_DWORD *write_bitdepth_colorspace_sampling(_DWORD *result, uint64_t a2)
{
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  _DWORD *v12;
  uint64_t *v13;
  unint64_t *v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  unint64_t v66;

  v2 = result + 4539;
  if (result[4539] < 2u)
    goto LABEL_15;
  v3 = result[4540];
  v4 = *(_DWORD *)a2;
  if (*(_DWORD *)a2)
  {
LABEL_10:
    v12 = result + 71;
    v13 = (uint64_t *)(a2 + 8);
    v14 = (unint64_t *)(a2 + 16);
    v15 = (uint64_t *)(a2 + 24);
    goto LABEL_43;
  }
  v5 = *(_QWORD *)(a2 + 8);
  if ((int)v5 >= 0)
    v6 = *(_QWORD *)(a2 + 8);
  else
    v6 = v5 + 7;
  v7 = (uint64_t)v6 >> 3;
  if (*(_QWORD *)(a2 + 16) <= v7)
  {
    v4 = 1;
    *(_DWORD *)a2 = 1;
    goto LABEL_10;
  }
  v8 = v6 & 0xFFFFFFF8;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = v5 - v8;
  if (v10)
  {
    v11 = *(unsigned __int8 *)(v9 + v7) | ((v3 != 10) << (7 - v10));
  }
  else if (v3 == 10)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    LOBYTE(v11) = 0x80;
  }
  *(_BYTE *)(v9 + v7) = v11;
  *(_QWORD *)(a2 + 8) = (int)v5 + 1;
LABEL_15:
  v15 = (uint64_t *)(a2 + 24);
  v4 = *(_DWORD *)a2;
  v16 = result[71];
  v13 = (uint64_t *)(a2 + 8);
  v14 = (unint64_t *)(a2 + 16);
  if (*(_DWORD *)a2)
  {
    if (v16 == 7)
      goto LABEL_17;
    goto LABEL_44;
  }
  v12 = result + 71;
  v17 = *v13;
  if ((int)*v13 >= 0)
    v18 = *v13;
  else
    v18 = *v13 + 7;
  v19 = (uint64_t)v18 >> 3;
  if (*v14 <= v19)
    goto LABEL_41;
  v20 = v17 - (v18 & 0xFFFFFFF8);
  if (v20)
  {
    v21 = ((v16 >> 2) & 1) << (7 - v20);
    v22 = *v15;
    v23 = *(_BYTE *)(*v15 + v19) | v21;
  }
  else
  {
    v23 = ((result[71] & 4) != 0) << 7;
    v22 = *v15;
  }
  *(_BYTE *)(v22 + v19) = v23;
  v24 = v17 << 32;
  v25 = (v24 + 0x100000000) >> 32;
  *(_QWORD *)(a2 + 8) = v25;
  if (*(_DWORD *)a2)
    goto LABEL_42;
  v26 = (int)v25 >= 0 ? (unint64_t)(v24 + 0x100000000) >> 32 : (int)v25 + 7;
  v27 = (uint64_t)v26 >> 3;
  if (*v14 <= v27)
    goto LABEL_41;
  v28 = v25 - (v26 & 0xFFFFFFF8);
  if (v28)
  {
    v29 = *v15;
    v30 = *(_BYTE *)(*v15 + v27) | (((v16 >> 1) & 1) << (7 - v28));
  }
  else
  {
    v30 = ((v16 & 2) != 0) << 7;
    v29 = *v15;
  }
  *(_BYTE *)(v29 + v27) = v30;
  v31 = (v24 + 0x200000000) >> 32;
  *(_QWORD *)(a2 + 8) = v31;
  if (*(_DWORD *)a2)
    goto LABEL_42;
  v32 = (int)v31 >= 0 ? (unint64_t)(v24 + 0x200000000) >> 32 : (int)v31 + 7;
  v33 = (uint64_t)v32 >> 3;
  if (*v14 <= v33)
  {
LABEL_41:
    *(_DWORD *)a2 = 1;
  }
  else
  {
    v34 = v16 & 1;
    v35 = v31 - (v32 & 0xFFFFFFF8);
    if (v35)
    {
      v36 = v34 << (7 - v35);
      v37 = *v15;
      v38 = *(_BYTE *)(*v15 + v33) | v36;
    }
    else
    {
      v38 = (_BYTE)v34 << 7;
      v37 = *v15;
    }
    *(_BYTE *)(v37 + v33) = v38;
    *v13 = (v24 + 0x300000000) >> 32;
  }
LABEL_42:
  v4 = *(_DWORD *)a2;
LABEL_43:
  if (*v12 == 7)
  {
LABEL_17:
    if (v4)
      return result;
    goto LABEL_73;
  }
LABEL_44:
  if (!v4)
  {
    v39 = *v13;
    if ((int)*v13 >= 0)
      v40 = *v13;
    else
      v40 = *v13 + 7;
    v41 = (uint64_t)v40 >> 3;
    if (*v14 > v41)
    {
      v42 = result[72];
      v43 = v39 - (v40 & 0xFFFFFFF8);
      if (v43)
      {
        v44 = v42 << (7 - v43);
        v45 = *v15;
        v46 = *(_BYTE *)(*v15 + v41) | v44;
      }
      else
      {
        v46 = (_BYTE)v42 << 7;
        v45 = *v15;
      }
      *(_BYTE *)(v45 + v41) = v46;
      *v13 = (int)v39 + 1;
      if ((*v2 | 2) != 3)
        return result;
      goto LABEL_53;
    }
    *(_DWORD *)a2 = 1;
  }
  if ((*v2 | 2) != 3)
    return result;
LABEL_53:
  if (*(_DWORD *)a2)
    return result;
  v47 = *v13;
  if ((int)*v13 >= 0)
    v48 = *v13;
  else
    v48 = *v13 + 7;
  v49 = (uint64_t)v48 >> 3;
  if (*v14 <= v49)
    goto LABEL_79;
  v50 = result[79];
  v51 = v47 - (v48 & 0xFFFFFFF8);
  if (v51)
  {
    v52 = v50 << (7 - v51);
    v53 = *v15;
    v54 = *(_BYTE *)(*v15 + v49) | v52;
  }
  else
  {
    v54 = (_BYTE)v50 << 7;
    v53 = *v15;
  }
  *(_BYTE *)(v53 + v49) = v54;
  v55 = v47 << 32;
  v56 = (v55 + 0x100000000) >> 32;
  *(_QWORD *)(a2 + 8) = v56;
  if (!*(_DWORD *)a2)
  {
    if ((int)v56 >= 0)
      v57 = (unint64_t)(v55 + 0x100000000) >> 32;
    else
      v57 = v56 + 7;
    v58 = (uint64_t)v57 >> 3;
    if (*v14 <= v58)
      goto LABEL_79;
    v59 = result[80];
    v60 = v56 - (v57 & 0xFFFFFFF8);
    if (v60)
    {
      v61 = v59 << (7 - v60);
      v62 = *v15;
      v63 = *(_BYTE *)(*v15 + v58) | v61;
    }
    else
    {
      v63 = (_BYTE)v59 << 7;
      v62 = *v15;
    }
    *(_BYTE *)(v62 + v58) = v63;
    *(_QWORD *)(a2 + 8) = (v55 + 0x200000000) >> 32;
    if (!*(_DWORD *)a2)
    {
LABEL_73:
      v64 = *v13;
      v65 = *v13 + 7;
      if ((int)*v13 >= 0)
        v65 = *v13;
      v66 = (uint64_t)v65 >> 3;
      if (*v14 > v66)
      {
        if ((v64 & 7) == 0)
          *(_BYTE *)(*v15 + v66) = 0;
        *v13 = (int)v64 + 1;
        return result;
      }
LABEL_79:
      *(_DWORD *)a2 = 1;
    }
  }
  return result;
}

_DWORD *write_frame_size(_DWORD *result, int *a2)
{
  int v2;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  char v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  char v35;
  BOOL v36;
  int v37;
  unsigned int v38;
  unsigned int j;
  uint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  char v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  char v57;

  if (!*a2)
  {
    v2 = 0;
    v3 = result[73] - 1;
    for (i = 17; i > 1; --i)
    {
      if (!v2)
      {
        v5 = *((_QWORD *)a2 + 1);
        if ((int)v5 >= 0)
          v6 = *((_QWORD *)a2 + 1);
        else
          v6 = v5 + 7;
        v7 = (uint64_t)v6 >> 3;
        if (*((_QWORD *)a2 + 2) <= v7)
        {
          *a2 = 1;
        }
        else
        {
          v8 = (v3 >> (i - 2)) & 1;
          v9 = v5 - (v6 & 0xFFFFFFF8);
          if (v9)
          {
            v10 = v8 << (7 - v9);
            v11 = *((_QWORD *)a2 + 3);
            v12 = *(_BYTE *)(v11 + v7) | v10;
          }
          else
          {
            v12 = (_BYTE)v8 << 7;
            v11 = *((_QWORD *)a2 + 3);
          }
          *(_BYTE *)(v11 + v7) = v12;
          *((_QWORD *)a2 + 1) = (int)v5 + 1;
        }
      }
      v2 = *a2;
    }
    if (!v2)
    {
      v26 = result[74] - 1;
      v27 = 16;
LABEL_31:
      v28 = *((_QWORD *)a2 + 1);
      if ((int)v28 >= 0)
        v29 = *((_QWORD *)a2 + 1);
      else
        v29 = v28 + 7;
      v30 = (uint64_t)v29 >> 3;
      if (*((_QWORD *)a2 + 2) <= v30)
      {
        *a2 = 1;
        while (1)
        {
          v36 = v27-- != 0;
          if (v27 == 0 || !v36)
            break;
LABEL_40:
          if (!*a2)
            goto LABEL_31;
        }
      }
      else
      {
        v31 = (v26 >> (v27 - 1)) & 1;
        v32 = v28 - (v29 & 0xFFFFFFF8);
        if (v32)
        {
          v33 = v31 << (7 - v32);
          v34 = *((_QWORD *)a2 + 3);
          v35 = *(_BYTE *)(v34 + v30) | v33;
        }
        else
        {
          v35 = (_BYTE)v31 << 7;
          v34 = *((_QWORD *)a2 + 3);
        }
        *(_BYTE *)(v34 + v30) = v35;
        *((_QWORD *)a2 + 1) = (int)v28 + 1;
        v36 = v27-- != 0;
        if (v27 != 0 && v36)
          goto LABEL_40;
      }
    }
  }
  if (result[73] == result[75])
  {
    v13 = result[74];
    v14 = result[76];
    if (!*a2)
    {
      v15 = *((_QWORD *)a2 + 1);
      if ((int)v15 >= 0)
        v16 = *((_QWORD *)a2 + 1);
      else
        v16 = v15 + 7;
      v17 = (uint64_t)v16 >> 3;
      if (*((_QWORD *)a2 + 2) > v17)
      {
        v18 = v16 & 0xFFFFFFF8;
        v19 = *((_QWORD *)a2 + 3);
        v20 = v15 - v18;
        if (v20)
        {
          v21 = *(unsigned __int8 *)(v19 + v17) | ((v13 != v14) << (7 - v20));
        }
        else if (v13 == v14)
        {
          LOBYTE(v21) = 0;
        }
        else
        {
          LOBYTE(v21) = 0x80;
        }
        *(_BYTE *)(v19 + v17) = v21;
        *((_QWORD *)a2 + 1) = (int)v15 + 1;
        if (v13 == v14)
          return result;
        goto LABEL_47;
      }
      *a2 = 1;
    }
    if (v13 == v14)
      return result;
LABEL_47:
    if (*a2)
      return result;
    goto LABEL_57;
  }
  if (!*a2)
  {
    v22 = *((_QWORD *)a2 + 1);
    if ((int)v22 >= 0)
      v23 = *((_QWORD *)a2 + 1);
    else
      v23 = v22 + 7;
    v24 = (uint64_t)v23 >> 3;
    if (*((_QWORD *)a2 + 2) <= v24)
    {
      *a2 = 1;
      return result;
    }
    v25 = v22 - (v23 & 0xFFFFFFF8);
    if (v25)
      *(_BYTE *)(*((_QWORD *)a2 + 3) + v24) |= 1 << (7 - v25);
    else
      *(_BYTE *)(*((_QWORD *)a2 + 3) + v24) = 0x80;
    *((_QWORD *)a2 + 1) = (int)v22 + 1;
    if (!*a2)
    {
LABEL_57:
      v37 = 0;
      v38 = result[75] - 1;
      for (j = 17; j > 1; --j)
      {
        if (!v37)
        {
          v40 = *((_QWORD *)a2 + 1);
          if ((int)v40 >= 0)
            v41 = *((_QWORD *)a2 + 1);
          else
            v41 = v40 + 7;
          v42 = (uint64_t)v41 >> 3;
          if (*((_QWORD *)a2 + 2) <= v42)
          {
            *a2 = 1;
          }
          else
          {
            v43 = (v38 >> (j - 2)) & 1;
            v44 = v40 - (v41 & 0xFFFFFFF8);
            if (v44)
            {
              v45 = v43 << (7 - v44);
              v46 = *((_QWORD *)a2 + 3);
              v47 = *(_BYTE *)(v46 + v42) | v45;
            }
            else
            {
              v47 = (_BYTE)v43 << 7;
              v46 = *((_QWORD *)a2 + 3);
            }
            *(_BYTE *)(v46 + v42) = v47;
            *((_QWORD *)a2 + 1) = (int)v40 + 1;
          }
        }
        v37 = *a2;
      }
      if (!v37)
      {
        v48 = result[76] - 1;
        v49 = 16;
LABEL_72:
        v50 = *((_QWORD *)a2 + 1);
        if ((int)v50 >= 0)
          v51 = *((_QWORD *)a2 + 1);
        else
          v51 = v50 + 7;
        v52 = (uint64_t)v51 >> 3;
        if (*((_QWORD *)a2 + 2) <= v52)
        {
          *a2 = 1;
        }
        else
        {
          v53 = (v48 >> (v49 - 1)) & 1;
          v54 = v50 - (v51 & 0xFFFFFFF8);
          if (v54)
          {
            v55 = v53 << (7 - v54);
            v56 = *((_QWORD *)a2 + 3);
            v57 = *(_BYTE *)(v56 + v52) | v55;
          }
          else
          {
            v57 = (_BYTE)v53 << 7;
            v56 = *((_QWORD *)a2 + 3);
          }
          *(_BYTE *)(v56 + v52) = v57;
          *((_QWORD *)a2 + 1) = (int)v50 + 1;
        }
        while (1)
        {
          v36 = v49-- != 0;
          if (v49 == 0 || !v36)
            break;
          if (!*a2)
            goto LABEL_72;
        }
      }
    }
  }
  return result;
}

BOOL encode_tile_worker(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 **v14;
  _QWORD *v16;
  unint64_t v18;

  *((_OWORD *)a2 + 1) = xmmword_208F3BB00;
  v3 = (uint64_t)(a2 + 2);
  v4 = *a2;
  v5 = a2[1];
  if (v5 >= 0x7FFFFFFF)
    LODWORD(v5) = 0x7FFFFFFF;
  *((_DWORD *)a2 + 8) = 0;
  *((_DWORD *)a2 + 9) = v5;
  a2[5] = v4;
  v6 = *(_QWORD *)(a1 + 194488);
  v18 = 0;
  v7 = *((int *)a2 + 12);
  v8 = (int *)(v6 + 3720 * (int)v7);
  if (*(_DWORD *)(a1 + 172972) && !*(_BYTE *)(a1 + 172988))
  {
    a2[70] = *(_QWORD *)(a1 + 176600) + 126;
    v9 = *v8;
    if (*v8 >= v8[1])
      return vpx_stop_encode(v3) == 0;
  }
  else
  {
    a2[70] = (uint64_t)&vp9_kf_partition_probs;
    v9 = *v8;
    if (*v8 >= v8[1])
      return vpx_stop_encode(v3) == 0;
  }
  v16 = (_QWORD *)(a1 + 8 * v7 + 196832);
  do
  {
    v10 = *v16 + 24 * ((v9 - *v8 + 7) >> 3);
    v11 = *(_QWORD *)v10;
    v18 = *(_QWORD *)v10;
    v12 = *(unsigned int *)(v10 + 16);
    a2[87] = 0;
    v13 = v8[2];
    if (v13 < v8[3])
    {
      v14 = (unsigned __int8 **)(v11 + 16 * v12);
      do
      {
        write_modes_sb((_DWORD *)a1, (uint64_t)(a2 + 10), (uint64_t)v8, v3, &v18, v14, v9, v13, 0xCu, (unsigned int *)a2 + 13, (uint64_t)(a2 + 7));
        v13 += 8;
      }
      while (v13 < v8[3]);
    }
    v9 += 8;
  }
  while (v9 < v8[1]);
  return vpx_stop_encode(v3) == 0;
}

_DWORD *write_modes_sb(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unsigned __int8 **a6, int a7, int a8, unsigned __int8 a9, unsigned int *a10, uint64_t a11)
{
  int *v11;
  char v12;
  int v13;
  int v14;
  int v16;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  BOOL v28;
  BOOL v29;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  unint64_t *v68;
  unint64_t *v69;
  int v71;
  void *v75;
  size_t v76;
  char *v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;

  v11 = result + 43252;
  v12 = b_width_log2_lookup[a9];
  if (1 << v12 >= 0)
    v13 = 1 << v12;
  else
    v13 = (1 << v12) + 3;
  v14 = *v11;
  if (*v11 > a7)
  {
    v16 = result[43254];
    if (v16 > a8)
    {
      v21 = (uint64_t)result;
      v22 = partition_lookup[13 * b_width_log2_lookup[a9]
                                         + **(unsigned __int8 **)(*((_QWORD *)result + 21647)
                                                                + 8 * (a8 + result[43255] * a7))];
      v23 = v13 >> 2;
      v80 = a2 + (a7 & 7);
      v81 = a8;
      v24 = (*(char *)(*(_QWORD *)(a2 + 608) + a8) >> mi_width_log2_lookup[a9]) & 1 | (2 * ((*(char *)(v80 + 616) >> mi_width_log2_lookup[a9]) & 1)) | (4 * mi_width_log2_lookup[a9]);
      v25 = *(_QWORD *)(a2 + 480) + v24 + 2 * v24;
      v26 = v23 + a7;
      v27 = v23 + a8;
      v28 = v23 + a7 < v14 && v27 < v16;
      v82 = partition_lookup[13 * b_width_log2_lookup[a9]
                           + **(unsigned __int8 **)(*((_QWORD *)result + 21647) + 8 * (a8 + result[43255] * a7))];
      v78 = v23 + a7;
      v79 = v23 + a8;
      if (!v28)
      {
        v28 = v26 < v14;
        v29 = v26 >= v14;
        if (!v28 && v27 < v16)
        {
          v59 = *(_DWORD *)(a4 + 4);
          v32 = *(_DWORD *)(a4 + 8);
          v60 = ((v59 - 1) * *(unsigned __int8 *)(v25 + 1)) >> 8;
          v34 = v59 - (v60 + 1);
          if ((_DWORD)v22 == 3)
          {
            v61 = v60 + 1;
          }
          else
          {
            v34 = v60 + 1;
            v61 = 0;
          }
          v36 = v61 + *(_DWORD *)a4;
          v37 = vpx_norm[v34];
          v38 = v32 + v37;
          if (v32 + v37 >= 0)
          {
            v39 = -v32;
            if (!*(_DWORD *)(a4 + 12))
            {
              if (((v36 << ~(_BYTE)v32) & 0x80000000) == 0)
                goto LABEL_59;
              LODWORD(v40) = *(_DWORD *)(a4 + 16);
              v41 = v40 - 1;
              if ((int)v40 < 1)
              {
LABEL_58:
                ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v41);
LABEL_59:
                v64 = *(unsigned int *)(a4 + 16);
                if (v64 >= *(_DWORD *)(a4 + 20))
                {
                  *(_DWORD *)(a4 + 12) = 1;
                }
                else
                {
                  v65 = *(_QWORD *)(a4 + 24);
                  *(_DWORD *)(a4 + 16) = v64 + 1;
                  *(_BYTE *)(v65 + v64) = v36 >> (v32 + 24);
                }
                goto LABEL_62;
              }
              while (1)
              {
                v40 = (v40 - 1);
                v62 = *(_QWORD *)(a4 + 24);
                if (*(unsigned __int8 *)(v62 + v40) != 255)
                  break;
                *(_BYTE *)(v62 + v40) = 0;
                if ((int)v40 <= 0)
                {
LABEL_55:
                  v41 = -1;
                  goto LABEL_58;
                }
              }
LABEL_57:
              v41 = v40;
              goto LABEL_58;
            }
LABEL_62:
            v36 = (v36 << v39) & 0xFFFFFF;
            v63 = v38 - 8;
            goto LABEL_63;
          }
        }
        else
        {
          if (v27 < v16)
            v29 = 1;
          if (v29)
          {
LABEL_64:
            v66 = subsize_lookup[13 * v22 + a9];
            if (v66 > 2)
            {
              switch((_DWORD)v22)
              {
                case 2:
                  v68 = a5;
                  v69 = a5;
                  v71 = a8;
                  write_modes_b(v21, a2, a3, a4, v68, a6, a7, v71, a10, a11);
                  if (v79 < v11[2])
                    write_modes_b(v21, a2, a3, a4, v69, a6, a7, v79, a10, a11);
                  goto LABEL_76;
                case 1:
                  write_modes_b(v21, a2, a3, a4, a5, a6, a7, a8, a10, a11);
                  if (v78 < *v11)
                    write_modes_b(v21, a2, a3, a4, a5, a6, v78, a8, a10, a11);
                  goto LABEL_76;
                case 0:
                  write_modes_b(v21, a2, a3, a4, a5, a6, a7, a8, a10, a11);
                  goto LABEL_76;
              }
              write_modes_sb(v21, a2);
              write_modes_sb(v21, a2);
              write_modes_sb(v21, a2);
              result = (_DWORD *)write_modes_sb(v21, a2);
              v67 = v82;
              if (a9 == 3)
                goto LABEL_76;
            }
            else
            {
              result = (_DWORD *)write_modes_b(v21, a2, a3, a4, a5, a6, a7, a8, a10, a11);
              v67 = v82;
              if (a9 == 3)
                goto LABEL_76;
            }
            if (v67 == 3)
              return result;
LABEL_76:
            v75 = (void *)(*(_QWORD *)(a2 + 608) + v81);
            v76 = num_8x8_blocks_wide_lookup[a9];
            v77 = &partition_context_lookup[2 * v66];
            memset(v75, *v77, v76);
            return memset((void *)(v80 + 616), v77[1], v76);
          }
          v31 = *(_DWORD *)(a4 + 4);
          v32 = *(_DWORD *)(a4 + 8);
          v33 = ((v31 - 1) * *(unsigned __int8 *)(v25 + 2)) >> 8;
          v34 = v31 - (v33 + 1);
          if ((_DWORD)v22 == 3)
          {
            v35 = v33 + 1;
          }
          else
          {
            v34 = v33 + 1;
            v35 = 0;
          }
          v36 = v35 + *(_DWORD *)a4;
          v37 = vpx_norm[v34];
          v38 = v32 + v37;
          if (v32 + v37 >= 0)
          {
            v39 = -v32;
            if (!*(_DWORD *)(a4 + 12))
            {
              if (((v36 << ~(_BYTE)v32) & 0x80000000) == 0)
                goto LABEL_59;
              LODWORD(v40) = *(_DWORD *)(a4 + 16);
              v41 = v40 - 1;
              if ((int)v40 < 1)
                goto LABEL_58;
              while (1)
              {
                v40 = (v40 - 1);
                v42 = *(_QWORD *)(a4 + 24);
                if (*(unsigned __int8 *)(v42 + v40) != 255)
                  goto LABEL_57;
                *(_BYTE *)(v42 + v40) = 0;
                if ((int)v40 <= 0)
                  goto LABEL_55;
              }
            }
            goto LABEL_62;
          }
        }
        v63 = v38;
        LOBYTE(v38) = v37;
LABEL_63:
        *(_DWORD *)(a4 + 4) = v34 << v37;
        *(_DWORD *)(a4 + 8) = v63;
        *(_DWORD *)a4 = v36 << v38;
        goto LABEL_64;
      }
      v43 = 0;
      v44 = (unsigned int *)((char *)&partition_encodings + 8 * v22);
      v45 = *v44;
      v46 = v44[1];
      v48 = *(_DWORD *)(a4 + 4);
      v47 = *(_DWORD *)(a4 + 8);
      v49 = *(_DWORD *)a4;
      while (1)
      {
        --v46;
        v51 = ((v48 - 1) * *(unsigned __int8 *)(v25 + (v43 >> 1))) >> 8;
        v52 = v48 - (v51 + 1);
        if (((v45 >> v46) & 1) == 0)
          v52 = v51 + 1;
        v50 = (((int)(v45 >> v46 << 31) >> 31) & (v51 + 1)) + v49;
        v53 = vpx_norm[v52];
        v54 = v47 + v53;
        if (v47 + v53 < 0)
        {
          v47 += v53;
          LOBYTE(v54) = vpx_norm[v52];
          goto LABEL_30;
        }
        if (!*(_DWORD *)(a4 + 12))
        {
          LODWORD(v55) = *(_DWORD *)(a4 + 16);
          if (((v50 << ~(_BYTE)v47) & 0x80000000) != 0)
          {
            v56 = v55 - 1;
            if ((int)v55 >= 1)
            {
              while (1)
              {
                v55 = (v55 - 1);
                v57 = *(_QWORD *)(a4 + 24);
                if (*(unsigned __int8 *)(v57 + v55) != 255)
                  break;
                *(_BYTE *)(v57 + v55) = 0;
                if ((int)v55 <= 0)
                {
                  v56 = -1;
                  goto LABEL_44;
                }
              }
              v56 = v55;
            }
LABEL_44:
            ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v56);
            LODWORD(v55) = *(_DWORD *)(a4 + 16);
            if (v55 < *(_DWORD *)(a4 + 20))
            {
LABEL_45:
              v58 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)(a4 + 16) = v55 + 1;
              *(_BYTE *)(v58 + v55) = v50 >> (v47 + 24);
              goto LABEL_29;
            }
          }
          else if (v55 < *(_DWORD *)(a4 + 20))
          {
            goto LABEL_45;
          }
          *(_DWORD *)(a4 + 12) = 1;
        }
LABEL_29:
        v50 = (v50 << -(char)v47) & 0xFFFFFF;
        v47 = v54 - 8;
LABEL_30:
        v48 = v52 << v53;
        v49 = v50 << v54;
        *(_DWORD *)(a4 + 4) = v48;
        *(_DWORD *)(a4 + 8) = v47;
        *(_DWORD *)a4 = v49;
        v43 = vp9_partition_tree[((v45 >> v46) & 1) + v43];
        if (!v46)
          goto LABEL_64;
      }
    }
  }
  return result;
}

uint64_t write_modes_b(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, unsigned __int8 **a6, int a7, int a8, unsigned int *a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char *v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned int v66;
  char *v67;
  uint64_t result;
  int v69;
  char *v70;
  unsigned __int8 **v71;
  int v72;
  int v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned __int8 *v97;
  uint64_t v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  int v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  int v114;
  unsigned int v115;
  unsigned int *v116;
  unsigned int v117;
  unsigned int v118;
  int v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  char v138;
  unsigned int v139;
  int v140;
  char *v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  int v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unsigned __int8 *v153;
  int v154;
  int v155;
  int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  int v162;
  uint64_t v163;
  unsigned __int8 v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  int v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  int v178;
  unsigned int v179;
  int v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 **v191;
  int v192;
  int v193;
  int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  int v199;
  int v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  _BOOL4 v212;
  BOOL v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  int v217;
  int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  int v223;
  int v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  BOOL v231;
  char v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  int v245;
  unsigned int v246;
  char v247;
  uint64_t v248;
  unsigned int *v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  int v255;
  int v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int v265;
  uint64_t v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  int v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  unsigned int *v277;
  unsigned int v278;
  unsigned int v279;
  uint64_t v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  int v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  unsigned int v294;
  unsigned int v295;
  unsigned int v296;
  unsigned int v297;
  int v298;
  int v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  int v308;
  int v309;
  int pred_context_comp_ref_p;
  int v311;
  int v312;
  unsigned int v313;
  unsigned int v314;
  unsigned int v315;
  unsigned int v316;
  int v317;
  int v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  int pred_context_single_ref_p1;
  int v326;
  int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  int v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  int pred_context_single_ref_p2;
  int v343;
  unsigned int v344;
  unsigned int v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _BOOL4 v351;
  uint64_t v352;
  uint64_t v353;
  char v354;
  char *v355;
  unsigned int v356;
  int v357;
  int v358;
  unsigned int v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  int v364;
  int v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int *v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  char v376;
  int v377;
  uint64_t v378;
  unsigned int *v379;
  unsigned int v380;
  unsigned int v381;
  int v382;
  unsigned int v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int v386;
  int v387;
  int v388;
  uint64_t v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  char v399;
  uint64_t v400;
  char *v401;
  unsigned int v402;
  int v403;
  int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  int v410;
  int v411;
  int v412;
  uint64_t v413;
  uint64_t v414;
  __int16 *v415;
  uint64_t v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  char *v420;
  __int16 *v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  int v437;
  int v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  uint64_t v445;
  __int16 *v447;

  v14 = a1;
  v15 = *(_QWORD *)(a1 + 74776);
  v16 = a1 + 172972;
  v17 = (uint64_t *)(*(_QWORD *)(v16 + 204) + 8 * (a8 + *(_DWORD *)(v16 + 48) * a7));
  *(_QWORD *)(a2 + 448) = v17;
  v18 = *(unsigned __int8 *)*v17;
  v19 = num_8x8_blocks_high_lookup[v18];
  v20 = *(_DWORD *)(v16 + 44);
  LODWORD(v18) = num_8x8_blocks_wide_lookup[v18];
  v21 = *(_DWORD *)(v16 + 36);
  *(_DWORD *)(a2 + 496) = -64 * a7;
  *(_DWORD *)(a2 + 500) = (v21 - a7 - v19) << 6;
  *(_DWORD *)(a2 + 488) = -64 * a8;
  *(_DWORD *)(a2 + 492) = (v20 - a8 - (_DWORD)v18) << 6;
  if (a7)
    v22 = (unsigned __int8 *)v17[-*(int *)(a2 + 440)];
  else
    v22 = 0;
  v23 = v14 + 176472;
  v24 = v14 + 171696;
  *(_QWORD *)(a2 + 464) = v22;
  if (*(_DWORD *)(a3 + 8) >= a8)
  {
    v25 = 0;
    *(_QWORD *)(a2 + 456) = 0;
    v423 = v14 + 176472;
    if (!*(_DWORD *)v16)
      goto LABEL_9;
  }
  else
  {
    v25 = (unsigned __int8 *)*(v17 - 1);
    *(_QWORD *)(a2 + 456) = v25;
    v423 = v14 + 176472;
    if (!*(_DWORD *)v16)
    {
LABEL_9:
      v26 = v16;
      v27 = *v17;
      v28 = *(unsigned __int8 *)*v17;
      if (*(_BYTE *)(v14 + 176473))
        write_segment_id(a4, (_BYTE *)(v14 + 176472), *(char *)(v27 + 4));
      write_skip(v14 + 171696, a2, *(char *)(v27 + 4), v27, a4);
      if (v28 >= 3)
      {
        if (*(_DWORD *)(v26 + 52) == 4)
          write_selected_tx_size(v14 + 171696, a2, a4);
        if (v22 && (char)v22[8] <= 0)
        {
          v63 = v22 + 44;
          if (*v22 >= 3u)
            v63 = v22 + 1;
          v29 = *v63;
          if (!v25)
            goto LABEL_66;
        }
        else
        {
          v29 = 0;
          if (!v25)
            goto LABEL_66;
        }
        if ((char)v25[8] <= 0)
        {
          v65 = v25 + 32;
          if (*v25 >= 3u)
            v65 = v25 + 1;
          v64 = *v65;
LABEL_70:
          write_intra_mode(a4, *(unsigned __int8 *)(v27 + 1), (uint64_t)&vp9_kf_y_mode_prob + 90 * v29 + 9 * v64);
LABEL_71:
          v66 = *(unsigned __int8 *)(v27 + 6);
          v67 = (char *)&vp9_kf_uv_mode_prob + 9 * *(unsigned __int8 *)(v27 + 1);
          goto LABEL_72;
        }
LABEL_66:
        v64 = 0;
        goto LABEL_70;
      }
      v30 = 0;
      v31 = num_4x4_blocks_wide_lookup[v28];
      v442 = num_4x4_blocks_high_lookup[v28];
LABEL_20:
      v32 = 0;
      v33 = 2 * v30;
LABEL_22:
      v34 = v32 + v33;
      if ((v32 + v33) > 1)
      {
        v35 = *(unsigned __int8 *)(v27 + 12 * ((int)v34 - 2) + 20);
        if ((v34 & 0xFFFFFFFD) == 0)
          goto LABEL_26;
      }
      else if (v22 && (char)v22[8] <= 0)
      {
        v56 = &v22[12 * (v34 + 2) + 20];
        if (*v22 >= 3u)
          v56 = v22 + 1;
        v35 = *v56;
        if ((v34 & 0xFFFFFFFD) == 0)
          goto LABEL_26;
      }
      else
      {
        v35 = 0;
        if ((v34 & 0xFFFFFFFD) == 0)
        {
LABEL_26:
          if (v25 && (char)v25[8] <= 0)
          {
            v57 = &v25[12 * (v34 + 1) + 20];
            if (*v25 >= 3u)
              v57 = v25 + 1;
            v36 = *v57;
          }
          else
          {
            v36 = 0;
          }
          goto LABEL_31;
        }
      }
      v36 = *(unsigned __int8 *)(v27 + 12 * ((int)v34 - 1) + 20);
LABEL_31:
      v37 = 0;
      v38 = *(unsigned __int8 *)(v27 + 12 * v34 + 20);
      v39 = (char *)&vp9_kf_y_mode_prob + 90 * v35 + 9 * v36;
      v40 = (unsigned int *)((char *)&intra_mode_encodings + 8 * v38);
      v41 = *v40;
      v42 = v40[1];
      v44 = *(_DWORD *)(a4 + 4);
      v43 = *(_DWORD *)(a4 + 8);
      v45 = *(_DWORD *)a4;
      while (1)
      {
        --v42;
        v47 = ((v44 - 1) * v39[v37 >> 1]) >> 8;
        v48 = v44 - (v47 + 1);
        v49 = (v41 >> v42) & 1;
        if (!v49)
          v48 = v47 + 1;
        v46 = (((int)(v41 >> v42 << 31) >> 31) & (v47 + 1)) + v45;
        v50 = vpx_norm[v48];
        v51 = v43 + v50;
        if (v43 + v50 < 0)
        {
          v43 += v50;
          LOBYTE(v51) = vpx_norm[v48];
          goto LABEL_34;
        }
        if (!*(_DWORD *)(a4 + 12))
        {
          LODWORD(v52) = *(_DWORD *)(a4 + 16);
          if (((v46 << ~(_BYTE)v43) & 0x80000000) != 0)
          {
            v53 = v52 - 1;
            if ((int)v52 >= 1)
            {
              while (1)
              {
                v52 = (v52 - 1);
                v54 = *(_QWORD *)(a4 + 24);
                if (*(unsigned __int8 *)(v54 + v52) != 255)
                  break;
                *(_BYTE *)(v54 + v52) = 0;
                if ((int)v52 <= 0)
                {
                  v53 = -1;
                  goto LABEL_48;
                }
              }
              v53 = v52;
            }
LABEL_48:
            ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v53);
            LODWORD(v52) = *(_DWORD *)(a4 + 16);
            if (v52 < *(_DWORD *)(a4 + 20))
            {
LABEL_49:
              v55 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)(a4 + 16) = v52 + 1;
              *(_BYTE *)(v55 + v52) = v46 >> (v43 + 24);
              goto LABEL_33;
            }
          }
          else if (v52 < *(_DWORD *)(a4 + 20))
          {
            goto LABEL_49;
          }
          *(_DWORD *)(a4 + 12) = 1;
        }
LABEL_33:
        v46 = (v46 << -(char)v43) & 0xFFFFFF;
        v43 = v51 - 8;
LABEL_34:
        v44 = v48 << v50;
        v45 = v46 << v51;
        *(_DWORD *)(a4 + 4) = v44;
        *(_DWORD *)(a4 + 8) = v43;
        *(_DWORD *)a4 = v45;
        v37 = vp9_intra_mode_tree[v49 + v37];
        if (!v42)
        {
          v32 += v31;
          if (v32 >= 2)
          {
            v30 += v442;
            if (v30 >= 2)
              goto LABEL_71;
            goto LABEL_20;
          }
          goto LABEL_22;
        }
      }
    }
  }
  if (*(_BYTE *)(v16 + 16))
    goto LABEL_9;
  v431 = *(_QWORD *)(v14 + 176600);
  v58 = (unsigned __int8 *)*v17;
  v433 = v58[1];
  v435 = v15;
  v59 = (char)v58[4];
  v440 = *v58;
  v437 = *(_DWORD *)(v16 + 20);
  v438 = (char)v58[8];
  v443 = (uint64_t)v58;
  v430 = (char)v58[9];
  v444 = v59;
  if (!*(_BYTE *)(v14 + 176473))
    goto LABEL_271;
  if (!*(_BYTE *)(v14 + 176476))
  {
LABEL_270:
    v206 = v16;
    write_segment_id(a4, (_BYTE *)(v14 + 176472), v59);
    LODWORD(v59) = v444;
    v16 = v206;
    goto LABEL_271;
  }
  v60 = v58[5];
  if (v22)
  {
    v61 = (char)v22[5];
    if (v25)
    {
LABEL_61:
      v62 = (char)v25[5];
      goto LABEL_252;
    }
  }
  else
  {
    v61 = 0;
    if (v25)
      goto LABEL_61;
  }
  v62 = 0;
LABEL_252:
  v192 = *(unsigned __int8 *)(v14 + v62 + v61 + 176484);
  v193 = *(_DWORD *)(a4 + 4);
  v194 = *(_DWORD *)(a4 + 8);
  v195 = ((v193 - 1) * v192) >> 8;
  v196 = v193 - (v195 + 1);
  if (v60)
  {
    v197 = v195 + 1;
  }
  else
  {
    v196 = v195 + 1;
    v197 = 0;
  }
  v198 = v197 + *(_DWORD *)a4;
  v199 = vpx_norm[v196];
  v200 = v194 + v199;
  if (v194 + v199 < 0)
  {
    *(_DWORD *)(a4 + 4) = v196 << v199;
    *(_DWORD *)(a4 + 8) = v194 + v199;
    *(_DWORD *)a4 = v198 << v199;
    if (v60)
      goto LABEL_271;
    goto LABEL_270;
  }
  if (!*(_DWORD *)(a4 + 12))
  {
    if (((v198 << ~(_BYTE)v194) & 0x80000000) != 0)
    {
      LODWORD(v201) = *(_DWORD *)(a4 + 16);
      v202 = v201 - 1;
      if ((int)v201 >= 1)
      {
        while (1)
        {
          v201 = (v201 - 1);
          v203 = *(_QWORD *)(a4 + 24);
          if (*(unsigned __int8 *)(v203 + v201) != 255)
            break;
          *(_BYTE *)(v203 + v201) = 0;
          if ((int)v201 <= 0)
          {
            v202 = -1;
            goto LABEL_265;
          }
        }
        v202 = v201;
      }
LABEL_265:
      ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v202);
    }
    v204 = *(unsigned int *)(a4 + 16);
    if (v204 >= *(_DWORD *)(a4 + 20))
    {
      *(_DWORD *)(a4 + 12) = 1;
    }
    else
    {
      v205 = *(_QWORD *)(a4 + 24);
      *(_DWORD *)(a4 + 16) = v204 + 1;
      *(_BYTE *)(v205 + v204) = v198 >> (v194 + 24);
    }
  }
  *(_DWORD *)(a4 + 4) = v196 << v199;
  *(_DWORD *)(a4 + 8) = v200 - 8;
  *(_DWORD *)a4 = ((v198 << -(char)v194) & 0xFFFFFF) << v200;
  if (!v60)
    goto LABEL_270;
LABEL_271:
  v207 = v16;
  v208 = write_skip(v14 + 171696, a2, v59, v443, a4);
  v209 = v438;
  if (!*(_BYTE *)v23 || (*(_DWORD *)(v14 + 4 * v444 + 176552) & 4) == 0)
  {
    v210 = *(_QWORD *)(a2 + 456);
    v211 = *(_QWORD *)(a2 + 464);
    if (v211 && v210)
    {
      v212 = *(char *)(v210 + 8) < 1;
      v213 = *(char *)(v211 + 8) < 1;
      v214 = v213 || v212;
      v231 = !v212 || !v213;
      v215 = 3;
      if (v231)
        v215 = v214;
    }
    else if (v211 | v210)
    {
      if (v211)
        v210 = *(_QWORD *)(a2 + 464);
      v215 = 2 * (*(char *)(v210 + 8) < 1);
    }
    else
    {
      v215 = 0;
    }
    v216 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 176600) + v215 + 1931);
    v217 = *(_DWORD *)(a4 + 4);
    v218 = *(_DWORD *)(a4 + 8);
    v219 = ((v217 - 1) * v216) >> 8;
    v220 = v217 - (v219 + 1);
    if (v438 > 0)
    {
      v221 = v219 + 1;
    }
    else
    {
      v220 = v219 + 1;
      v221 = 0;
    }
    v222 = v221 + *(_DWORD *)a4;
    v223 = vpx_norm[v220];
    v224 = v218 + v223;
    if (v218 + v223 < 0)
    {
      v228 = v218 + v223;
      LOBYTE(v224) = vpx_norm[v220];
    }
    else
    {
      if (!*(_DWORD *)(a4 + 12))
      {
        if (((v222 << ~(_BYTE)v218) & 0x80000000) != 0)
        {
          LODWORD(v225) = *(_DWORD *)(a4 + 16);
          v226 = v225 - 1;
          if ((int)v225 >= 1)
          {
            while (1)
            {
              v225 = (v225 - 1);
              v227 = *(_QWORD *)(a4 + 24);
              if (*(unsigned __int8 *)(v227 + v225) != 255)
                break;
              *(_BYTE *)(v227 + v225) = 0;
              if ((int)v225 <= 0)
              {
                v226 = -1;
                goto LABEL_298;
              }
            }
            v226 = v225;
          }
LABEL_298:
          ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v226);
        }
        v229 = *(unsigned int *)(a4 + 16);
        if (v229 >= *(_DWORD *)(a4 + 20))
        {
          *(_DWORD *)(a4 + 12) = 1;
        }
        else
        {
          v230 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)(a4 + 16) = v229 + 1;
          *(_BYTE *)(v230 + v229) = v222 >> (v218 + 24);
        }
      }
      v222 = (v222 << -(char)v218) & 0xFFFFFF;
      v228 = v224 - 8;
    }
    *(_DWORD *)(a4 + 4) = v220 << v223;
    *(_DWORD *)(a4 + 8) = v228;
    *(_DWORD *)a4 = v222 << v224;
  }
  if (v440 < 3)
  {
    if (v438 >= 1)
    {
      result = *(_QWORD *)(v14 + 176600);
      goto LABEL_319;
    }
    v241 = 0;
    v242 = num_4x4_blocks_wide_lookup[v440];
    v243 = num_4x4_blocks_high_lookup[v440];
    v244 = *(_DWORD *)(a4 + 4);
    v245 = *(_DWORD *)(a4 + 8);
    v246 = *(_DWORD *)a4;
    while (1)
    {
      v247 = 0;
      v248 = *(_QWORD *)(v23 + 128);
      v249 = (unsigned int *)((char *)&intra_mode_encodings + 8 * *(unsigned __int8 *)(v443 + 24 * v241 + 20));
      v250 = *v249;
      v251 = v249[1];
      do
      {
        --v251;
        v253 = ((v244 - 1) * *(unsigned __int8 *)(v248 + (v247 >> 1))) >> 8;
        v254 = v244 - (v253 + 1);
        if (((v250 >> v251) & 1) == 0)
          v254 = v253 + 1;
        v252 = (((int)(v250 >> v251 << 31) >> 31) & (v253 + 1)) + v246;
        v255 = vpx_norm[v254];
        v256 = v245 + v255;
        if (v245 + v255 >= 0)
        {
          if (!*(_DWORD *)(a4 + 12))
          {
            LODWORD(v257) = *(_DWORD *)(a4 + 16);
            if (((v252 << ~(_BYTE)v245) & 0x80000000) != 0)
            {
              v258 = v257 - 1;
              if ((int)v257 < 1)
                goto LABEL_347;
              while (1)
              {
                v257 = (v257 - 1);
                v259 = *(_QWORD *)(a4 + 24);
                if (*(unsigned __int8 *)(v259 + v257) != 255)
                  break;
                *(_BYTE *)(v259 + v257) = 0;
                if ((int)v257 <= 0)
                {
                  v258 = -1;
                  goto LABEL_347;
                }
              }
              v258 = v257;
LABEL_347:
              ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v258);
              LODWORD(v257) = *(_DWORD *)(a4 + 16);
              if (v257 >= *(_DWORD *)(a4 + 20))
                goto LABEL_331;
LABEL_348:
              v260 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)(a4 + 16) = v257 + 1;
              *(_BYTE *)(v260 + v257) = v252 >> (v245 + 24);
            }
            else
            {
              if (v257 < *(_DWORD *)(a4 + 20))
                goto LABEL_348;
LABEL_331:
              *(_DWORD *)(a4 + 12) = 1;
            }
          }
          v252 = (v252 << -(char)v245) & 0xFFFFFF;
          v245 = v256 - 8;
          goto LABEL_333;
        }
        v245 += v255;
        LOBYTE(v256) = vpx_norm[v254];
LABEL_333:
        v244 = v254 << v255;
        v246 = v252 << v256;
        *(_DWORD *)(a4 + 4) = v244;
        *(_DWORD *)(a4 + 8) = v245;
        *(_DWORD *)a4 = v246;
        v247 = vp9_intra_mode_tree[((v250 >> v251) & 1) + v247];
      }
      while (v251);
      if (v242 <= 1)
      {
        v261 = 0;
        v262 = *(_QWORD *)(v23 + 128);
        v263 = (unsigned int *)((char *)&intra_mode_encodings
                              + 8 * *(unsigned __int8 *)(v443 + 12 * (2 * v241 + v242) + 20));
        v264 = *v263;
        v265 = v263[1];
        while (1)
        {
          --v265;
          v268 = ((v244 - 1) * *(unsigned __int8 *)(v262 + (v261 >> 1))) >> 8;
          v269 = v244 - (v268 + 1);
          if (((v264 >> v265) & 1) == 0)
            v269 = v268 + 1;
          v267 = (((int)(v264 >> v265 << 31) >> 31) & (v268 + 1)) + v246;
          v270 = vpx_norm[v269];
          v271 = v245 + v270;
          if (v245 + v270 < 0)
          {
            v245 += v270;
            LOBYTE(v271) = vpx_norm[v269];
            goto LABEL_353;
          }
          if (!*(_DWORD *)(a4 + 12))
          {
            LODWORD(v272) = *(_DWORD *)(a4 + 16);
            if (((v267 << ~(_BYTE)v245) & 0x80000000) != 0)
            {
              v273 = v272 - 1;
              if ((int)v272 < 1)
                goto LABEL_367;
              while (1)
              {
                v272 = (v272 - 1);
                v274 = *(_QWORD *)(a4 + 24);
                if (*(unsigned __int8 *)(v274 + v272) != 255)
                  break;
                *(_BYTE *)(v274 + v272) = 0;
                if ((int)v272 <= 0)
                {
                  v273 = -1;
                  goto LABEL_367;
                }
              }
              v273 = v272;
LABEL_367:
              ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v273);
              LODWORD(v272) = *(_DWORD *)(a4 + 16);
              if (v272 >= *(_DWORD *)(a4 + 20))
              {
LABEL_368:
                *(_DWORD *)(a4 + 12) = 1;
                goto LABEL_352;
              }
            }
            else if (v272 >= *(_DWORD *)(a4 + 20))
            {
              goto LABEL_368;
            }
            v266 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 16) = v272 + 1;
            *(_BYTE *)(v266 + v272) = v267 >> (v245 + 24);
          }
LABEL_352:
          v267 = (v267 << -(char)v245) & 0xFFFFFF;
          v245 = v271 - 8;
LABEL_353:
          v244 = v269 << v270;
          v246 = v267 << v271;
          *(_DWORD *)(a4 + 4) = v244;
          *(_DWORD *)(a4 + 8) = v245;
          *(_DWORD *)a4 = v246;
          v261 = vp9_intra_mode_tree[((v264 >> v265) & 1) + v261];
          if (!v265)
          {
            if ((_DWORD)v242)
              break;
            v275 = 0;
            v276 = *(_QWORD *)(v23 + 128);
            v277 = (unsigned int *)((char *)&intra_mode_encodings
                                  + 8 * *(unsigned __int8 *)(v443 + 24 * (v241 + v242) + 20));
            v278 = *v277;
            v279 = v277[1];
LABEL_373:
            --v279;
            v282 = ((v244 - 1) * *(unsigned __int8 *)(v276 + (v275 >> 1))) >> 8;
            v283 = v244 - (v282 + 1);
            if (((v278 >> v279) & 1) == 0)
              v283 = v282 + 1;
            v281 = (((int)(v278 >> v279 << 31) >> 31) & (v282 + 1)) + v246;
            v284 = vpx_norm[v283];
            v285 = v245 + v284;
            if (v245 + v284 < 0)
            {
              v245 += v284;
              LOBYTE(v285) = vpx_norm[v283];
            }
            else
            {
              if (!*(_DWORD *)(a4 + 12))
              {
                LODWORD(v286) = *(_DWORD *)(a4 + 16);
                if (((v281 << ~(_BYTE)v245) & 0x80000000) != 0)
                {
                  v287 = v286 - 1;
                  if ((int)v286 < 1)
                    goto LABEL_386;
                  while (1)
                  {
                    v286 = (v286 - 1);
                    v288 = *(_QWORD *)(a4 + 24);
                    if (*(unsigned __int8 *)(v288 + v286) != 255)
                      break;
                    *(_BYTE *)(v288 + v286) = 0;
                    if ((int)v286 <= 0)
                    {
                      v287 = -1;
                      goto LABEL_386;
                    }
                  }
                  v287 = v286;
LABEL_386:
                  ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v287);
                  LODWORD(v286) = *(_DWORD *)(a4 + 16);
                  if (v286 < *(_DWORD *)(a4 + 20))
                    goto LABEL_370;
LABEL_387:
                  *(_DWORD *)(a4 + 12) = 1;
                }
                else
                {
                  if (v286 >= *(_DWORD *)(a4 + 20))
                    goto LABEL_387;
LABEL_370:
                  v280 = *(_QWORD *)(a4 + 24);
                  *(_DWORD *)(a4 + 16) = v286 + 1;
                  *(_BYTE *)(v280 + v286) = v281 >> (v245 + 24);
                }
              }
              v281 = (v281 << -(char)v245) & 0xFFFFFF;
              v245 = v285 - 8;
            }
            v244 = v283 << v284;
            v246 = v281 << v285;
            *(_DWORD *)(a4 + 4) = v244;
            *(_DWORD *)(a4 + 8) = v245;
            *(_DWORD *)a4 = v246;
            v275 = vp9_intra_mode_tree[((v278 >> v279) & 1) + v275];
            if (!v279)
              break;
            goto LABEL_373;
          }
        }
      }
      v241 += v243;
      if (v241 >= 2)
        goto LABEL_316;
    }
  }
  v231 = v438 <= 0 || v208 == 0;
  v232 = !v231;
  if (*(_DWORD *)(v207 + 52) == 4 && (v232 & 1) == 0)
  {
    write_selected_tx_size(v14 + 171696, a2, a4);
    v209 = v438;
  }
  result = *(_QWORD *)(v14 + 176600);
  if (v209 <= 0)
  {
    write_intra_mode(a4, v433, result + 9 * size_group_lookup[v440]);
LABEL_316:
    v66 = *(unsigned __int8 *)(v443 + 6);
    v67 = (char *)(*(_QWORD *)(v23 + 128) + 9 * v433 + 36);
LABEL_72:
    result = write_intra_mode(a4, v66, (uint64_t)v67);
    goto LABEL_73;
  }
LABEL_319:
  v233 = a8 + v20 * a7;
  v234 = 3 * *(unsigned __int8 *)(v435 + 36 * v233 + *(char *)(v443 + 8) + 32);
  v235 = **(_QWORD **)(a2 + 448);
  v236 = *(char *)(v235 + 9);
  v439 = v14;
  if (*(_BYTE *)v23 && (*(_DWORD *)(v14 + 4 * *(char *)(v235 + 4) + 176552) & 4) != 0)
    goto LABEL_470;
  if (*(_DWORD *)(v14 + 176592) == 2)
  {
    v237 = *(_QWORD *)(a2 + 456);
    v238 = *(_QWORD *)(a2 + 464);
    if (v238 && v237)
    {
      v239 = *(char *)(v237 + 9);
      if (*(char *)(v238 + 9) <= 0)
      {
        v289 = *(unsigned __int8 *)(v238 + 8);
        v290 = *(unsigned __int8 *)(v14 + 176588);
        if (v239 <= 0)
        {
          v240 = (v289 == v290) ^ (*(unsigned __int8 *)(v237 + 8) == v290);
          goto LABEL_402;
        }
        if (v289 == v290)
          goto LABEL_398;
        v291 = (char)v289;
      }
      else
      {
        if (v239 > 0)
        {
          v240 = 4;
LABEL_402:
          v292 = *(_DWORD *)(a4 + 4);
          v293 = *(_DWORD *)(a4 + 8);
          v294 = ((v292 - 1) * *(unsigned __int8 *)(result + v240 + 1935)) >> 8;
          v295 = v292 - (v294 + 1);
          if (v236 >= 1)
          {
            v296 = v294 + 1;
          }
          else
          {
            v295 = v294 + 1;
            v296 = 0;
          }
          v297 = v296 + *(_DWORD *)a4;
          v298 = vpx_norm[v295];
          v299 = v293 + v298;
          if (v293 + v298 < 0)
          {
            v303 = v293 + v298;
            LOBYTE(v299) = vpx_norm[v295];
          }
          else
          {
            if (!*(_DWORD *)(a4 + 12))
            {
              if (((v297 << ~(_BYTE)v293) & 0x80000000) != 0)
              {
                LODWORD(v300) = *(_DWORD *)(a4 + 16);
                v301 = v300 - 1;
                if ((int)v300 >= 1)
                {
                  while (1)
                  {
                    v300 = (v300 - 1);
                    v302 = *(_QWORD *)(a4 + 24);
                    if (*(unsigned __int8 *)(v302 + v300) != 255)
                      break;
                    *(_BYTE *)(v302 + v300) = 0;
                    if ((int)v300 <= 0)
                    {
                      v301 = -1;
                      goto LABEL_414;
                    }
                  }
                  v301 = v300;
                }
LABEL_414:
                ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v301);
              }
              v304 = *(unsigned int *)(a4 + 16);
              if (v304 >= *(_DWORD *)(a4 + 20))
              {
                *(_DWORD *)(a4 + 12) = 1;
              }
              else
              {
                v305 = *(_QWORD *)(a4 + 24);
                *(_DWORD *)(a4 + 16) = v304 + 1;
                *(_BYTE *)(v305 + v304) = v297 >> (v293 + 24);
              }
            }
            v297 = (v297 << -(char)v293) & 0xFFFFFF;
            v303 = v299 - 8;
          }
          *(_DWORD *)(a4 + 4) = v295 << v298;
          *(_DWORD *)(a4 + 8) = v303;
          *(_DWORD *)a4 = v297 << v299;
          goto LABEL_420;
        }
        v291 = *(unsigned __int8 *)(v237 + 8);
        if (v291 == *(unsigned __int8 *)(v14 + 176588))
          goto LABEL_398;
        v291 = (char)v291;
      }
      v240 = (v291 > 0) ^ 3;
      goto LABEL_402;
    }
    if (!(v238 | v237))
    {
      v240 = 1;
      goto LABEL_402;
    }
    if (v238)
      v237 = *(_QWORD *)(a2 + 464);
    if (*(char *)(v237 + 9) <= 0)
    {
      v240 = *(unsigned __int8 *)(v237 + 8) == *(unsigned __int8 *)(v14 + 176588);
      goto LABEL_402;
    }
LABEL_398:
    v240 = 3;
    goto LABEL_402;
  }
LABEL_420:
  v306 = result;
  if (v236 >= 1)
  {
    if (*(_DWORD *)(v14 + 4 * *(char *)(v14 + 176588) + 176404))
      v307 = v235;
    else
      v307 = v235 + 1;
    v308 = *(unsigned __int8 *)(v307 + 8);
    v309 = *(unsigned __int8 *)(v23 + 118);
    pred_context_comp_ref_p = vp9_get_pred_context_comp_ref_p(v24, a2);
    v311 = *(_DWORD *)(a4 + 4);
    v312 = *(_DWORD *)(a4 + 8);
    v313 = ((v311 - 1) * *(unsigned __int8 *)(*(_QWORD *)(v23 + 128) + pred_context_comp_ref_p + 1950)) >> 8;
    v314 = v311 - (v313 + 1);
    if (v308 == v309)
    {
      v315 = v313 + 1;
    }
    else
    {
      v314 = v313 + 1;
      v315 = 0;
    }
    v316 = v315 + *(_DWORD *)a4;
    v317 = vpx_norm[v314];
    v318 = v312 + v317;
    if (v312 + v317 >= 0)
    {
      v319 = -v312;
      v14 = v439;
      result = v306;
      if (!*(_DWORD *)(a4 + 12))
      {
        if (((v316 << ~(_BYTE)v312) & 0x80000000) == 0)
          goto LABEL_465;
        LODWORD(v320) = *(_DWORD *)(a4 + 16);
        v321 = v320 - 1;
        if ((int)v320 < 1)
          goto LABEL_464;
        while (1)
        {
          v320 = (v320 - 1);
          v322 = *(_QWORD *)(a4 + 24);
          if (*(unsigned __int8 *)(v322 + v320) != 255)
            goto LABEL_463;
          *(_BYTE *)(v322 + v320) = 0;
          if ((int)v320 <= 0)
            goto LABEL_461;
        }
      }
      goto LABEL_468;
    }
    goto LABEL_462;
  }
  v323 = *(unsigned __int8 *)(v235 + 8);
  v324 = *(_QWORD *)(v23 + 128);
  pred_context_single_ref_p1 = vp9_get_pred_context_single_ref_p1(a2);
  v326 = *(_DWORD *)(a4 + 4);
  v327 = *(_DWORD *)(a4 + 8);
  v328 = ((v326 - 1) * *(unsigned __int8 *)(v324 + 2 * pred_context_single_ref_p1 + 1940)) >> 8;
  v329 = v326 - (v328 + 1);
  if (v323 == 1)
  {
    v329 = v328 + 1;
    v330 = 0;
  }
  else
  {
    v330 = v328 + 1;
  }
  v331 = v330 + *(_DWORD *)a4;
  v332 = vpx_norm[v329];
  v333 = v327 + v332;
  if (v327 + v332 < 0)
  {
    v337 = v327 + v332;
    LOBYTE(v333) = vpx_norm[v329];
    result = v306;
  }
  else
  {
    result = v306;
    if (!*(_DWORD *)(a4 + 12))
    {
      if (((v331 << ~(_BYTE)v327) & 0x80000000) != 0)
      {
        LODWORD(v334) = *(_DWORD *)(a4 + 16);
        v335 = v334 - 1;
        if ((int)v334 >= 1)
        {
          while (1)
          {
            v334 = (v334 - 1);
            v336 = *(_QWORD *)(a4 + 24);
            if (*(unsigned __int8 *)(v336 + v334) != 255)
              break;
            *(_BYTE *)(v336 + v334) = 0;
            if ((int)v334 <= 0)
            {
              v335 = -1;
              goto LABEL_446;
            }
          }
          v335 = v334;
        }
LABEL_446:
        ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v335);
      }
      v338 = *(unsigned int *)(a4 + 16);
      if (v338 >= *(_DWORD *)(a4 + 20))
      {
        *(_DWORD *)(a4 + 12) = 1;
      }
      else
      {
        v339 = *(_QWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 16) = v338 + 1;
        *(_BYTE *)(v339 + v338) = v331 >> (v327 + 24);
      }
    }
    v331 = (v331 << -(char)v327) & 0xFFFFFF;
    v337 = v333 - 8;
  }
  *(_DWORD *)(a4 + 4) = v329 << v332;
  *(_DWORD *)(a4 + 8) = v337;
  *(_DWORD *)a4 = v331 << v333;
  v231 = v323 == 1;
  v14 = v439;
  if (!v231)
  {
    v340 = *(unsigned __int8 *)(v235 + 8);
    v341 = *(_QWORD *)(v23 + 128);
    pred_context_single_ref_p2 = vp9_get_pred_context_single_ref_p2(a2);
    v343 = *(_DWORD *)(a4 + 4);
    v312 = *(_DWORD *)(a4 + 8);
    v344 = ((v343 - 1) * *(unsigned __int8 *)(v341 + 2 * pred_context_single_ref_p2 + 1941)) >> 8;
    v314 = v343 - (v344 + 1);
    if (v340 == 2)
    {
      v314 = v344 + 1;
      v345 = 0;
    }
    else
    {
      v345 = v344 + 1;
    }
    v316 = v345 + *(_DWORD *)a4;
    v317 = vpx_norm[v314];
    v318 = v312 + v317;
    if (v312 + v317 >= 0)
    {
      v319 = -v312;
      v14 = v439;
      result = v306;
      if (!*(_DWORD *)(a4 + 12))
      {
        if (((v316 << ~(_BYTE)v312) & 0x80000000) == 0)
          goto LABEL_465;
        LODWORD(v320) = *(_DWORD *)(a4 + 16);
        v321 = v320 - 1;
        if ((int)v320 < 1)
        {
LABEL_464:
          ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v321);
LABEL_465:
          v348 = *(unsigned int *)(a4 + 16);
          if (v348 >= *(_DWORD *)(a4 + 20))
          {
            *(_DWORD *)(a4 + 12) = 1;
          }
          else
          {
            v349 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 16) = v348 + 1;
            *(_BYTE *)(v349 + v348) = v316 >> (v312 + 24);
          }
          goto LABEL_468;
        }
        while (1)
        {
          v320 = (v320 - 1);
          v346 = *(_QWORD *)(a4 + 24);
          if (*(unsigned __int8 *)(v346 + v320) != 255)
            break;
          *(_BYTE *)(v346 + v320) = 0;
          if ((int)v320 <= 0)
          {
LABEL_461:
            v321 = -1;
            goto LABEL_464;
          }
        }
LABEL_463:
        v321 = v320;
        goto LABEL_464;
      }
LABEL_468:
      v316 = (v316 << v319) & 0xFFFFFF;
      v347 = v318 - 8;
      goto LABEL_469;
    }
LABEL_462:
    v347 = v318;
    LOBYTE(v318) = v317;
    v14 = v439;
    result = v306;
LABEL_469:
    *(_DWORD *)(a4 + 4) = v314 << v317;
    *(_DWORD *)(a4 + 8) = v347;
    *(_DWORD *)a4 = v316 << v318;
  }
LABEL_470:
  v350 = result + v234;
  if (!*(_BYTE *)v23)
  {
    v351 = 1;
    v352 = v440;
    v353 = v350 + 1910;
    if (v440 < 3)
      goto LABEL_494;
    goto LABEL_474;
  }
  v351 = (*(_DWORD *)(v14 + 4 * v444 + 176552) & 8) == 0;
  v352 = v440;
  v353 = v350 + 1910;
  if (v440 >= 3)
  {
LABEL_474:
    if (!v351)
      goto LABEL_494;
    v354 = 0;
    v355 = (char *)&inter_mode_encodings + 8 * v433;
    v356 = *((_DWORD *)v355 - 20);
    v357 = *((_DWORD *)v355 - 19);
    v359 = *(_DWORD *)(a4 + 4);
    v358 = *(_DWORD *)(a4 + 8);
    v360 = *(_DWORD *)a4;
    do
    {
      --v357;
      v362 = ((v359 - 1) * *(unsigned __int8 *)(v353 + (v354 >> 1))) >> 8;
      result = v362 + 1;
      v363 = v359 - result;
      if (((v356 >> v357) & 1) == 0)
        v363 = v362 + 1;
      v361 = (((int)(v356 >> v357 << 31) >> 31) & result) + v360;
      v364 = vpx_norm[v363];
      v365 = v358 + v364;
      if (v358 + v364 < 0)
      {
        v358 += v364;
        LOBYTE(v365) = vpx_norm[v363];
        goto LABEL_478;
      }
      result = *(unsigned int *)(a4 + 12);
      if (!(_DWORD)result)
      {
        result = *(unsigned int *)(a4 + 16);
        if (((v361 << ~(_BYTE)v358) & 0x80000000) != 0)
        {
          v366 = result - 1;
          if ((int)result >= 1)
          {
            while (1)
            {
              result = (result - 1);
              v367 = *(_QWORD *)(a4 + 24);
              if (*(unsigned __int8 *)(v367 + result) != 255)
                break;
              *(_BYTE *)(v367 + result) = 0;
              if ((int)result <= 0)
              {
                v366 = -1;
                goto LABEL_492;
              }
            }
            v366 = result;
          }
LABEL_492:
          ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v366);
          result = *(unsigned int *)(a4 + 16);
          if (result < *(_DWORD *)(a4 + 20))
          {
LABEL_493:
            v368 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 16) = result + 1;
            *(_BYTE *)(v368 + result) = v361 >> (v358 + 24);
            goto LABEL_477;
          }
        }
        else if (result < *(_DWORD *)(a4 + 20))
        {
          goto LABEL_493;
        }
        *(_DWORD *)(a4 + 12) = 1;
      }
LABEL_477:
      v361 = (v361 << -(char)v358) & 0xFFFFFF;
      v358 = v365 - 8;
LABEL_478:
      v359 = v363 << v364;
      v360 = v361 << v365;
      *(_DWORD *)(a4 + 4) = v359;
      *(_DWORD *)(a4 + 8) = v358;
      *(_DWORD *)a4 = v360;
      v354 = vp9_inter_mode_tree[((v356 >> v357) & 1) + v354];
    }
    while (v357);
  }
LABEL_494:
  v369 = a9;
  v370 = v431 + 1970;
  if (*(_BYTE *)(v207 + 280) != 4)
    goto LABEL_527;
  v371 = *(_QWORD *)(a2 + 456);
  if (!v371)
  {
    v372 = 3;
    v373 = a10;
    v374 = *(_QWORD *)(a2 + 464);
    if (v374)
      goto LABEL_497;
LABEL_499:
    v375 = 3;
    goto LABEL_500;
  }
  v372 = *(unsigned __int8 *)(v371 + 7);
  v373 = a10;
  v374 = *(_QWORD *)(a2 + 464);
  if (!v374)
    goto LABEL_499;
LABEL_497:
  v375 = *(unsigned __int8 *)(v374 + 7);
LABEL_500:
  v376 = 0;
  if (v375 == 3)
    v377 = v372;
  else
    v377 = 3;
  if (v372 == 3)
    v377 = v375;
  if (v372 != v375)
    v372 = v377;
  v378 = *(_QWORD *)(v23 + 128) + 2 * v372 + 1902;
  v379 = (unsigned int *)((char *)&switchable_interp_encodings + 8 * *(unsigned __int8 *)(v443 + 7));
  v380 = *v379;
  v381 = v379[1];
  LODWORD(result) = *(_DWORD *)(a4 + 4);
  v382 = *(_DWORD *)(a4 + 8);
  v383 = *(_DWORD *)a4;
  do
  {
    --v381;
    v385 = (((_DWORD)result - 1) * *(unsigned __int8 *)(v378 + (v376 >> 1))) >> 8;
    v386 = result - (v385 + 1);
    if (((v380 >> v381) & 1) == 0)
      v386 = v385 + 1;
    v384 = (((int)(v380 >> v381 << 31) >> 31) & (v385 + 1)) + v383;
    v387 = vpx_norm[v386];
    v388 = v382 + v387;
    if (v382 + v387 >= 0)
    {
      if (!*(_DWORD *)(a4 + 12))
      {
        LODWORD(v389) = *(_DWORD *)(a4 + 16);
        if (((v384 << ~(_BYTE)v382) & 0x80000000) != 0)
        {
          v390 = v389 - 1;
          if ((int)v389 >= 1)
          {
            while (1)
            {
              v389 = (v389 - 1);
              v391 = *(_QWORD *)(a4 + 24);
              if (*(unsigned __int8 *)(v391 + v389) != 255)
                break;
              *(_BYTE *)(v391 + v389) = 0;
              if ((int)v389 <= 0)
              {
                v390 = -1;
                goto LABEL_524;
              }
            }
            v390 = v389;
          }
LABEL_524:
          ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v390);
          LODWORD(v389) = *(_DWORD *)(a4 + 16);
          if (v389 < *(_DWORD *)(a4 + 20))
            goto LABEL_525;
        }
        else if (v389 < *(_DWORD *)(a4 + 20))
        {
LABEL_525:
          v392 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)(a4 + 16) = v389 + 1;
          *(_BYTE *)(v392 + v389) = v384 >> (v382 + 24);
          goto LABEL_509;
        }
        *(_DWORD *)(a4 + 12) = 1;
      }
LABEL_509:
      v384 = (v384 << -(char)v382) & 0xFFFFFF;
      v382 = v388 - 8;
      goto LABEL_510;
    }
    v382 += v387;
    LOBYTE(v388) = vpx_norm[v386];
LABEL_510:
    result = v386 << v387;
    v383 = v384 << v388;
    *(_DWORD *)(a4 + 4) = result;
    *(_DWORD *)(a4 + 8) = v382;
    *(_DWORD *)a4 = v383;
    v376 = vp9_switchable_interp_tree[((v380 >> v381) & 1) + v376];
  }
  while (v381);
  ++*(_DWORD *)(v373 + 4 * *(unsigned __int8 *)(v443 + 7));
LABEL_527:
  v393 = v435 + 36 * v233;
  v394 = v431 + 1970;
  if (v352 > 2)
  {
    if ((_DWORD)v433 == 13)
    {
      if (v430 <= 0)
        v419 = 1;
      else
        v419 = 2;
      v420 = (char *)(v443 + 8);
      v421 = (__int16 *)(v443 + 12);
      do
      {
        v422 = *v420++;
        result = vp9_encode_mv(v439, a4, v421, (unsigned __int16 *)(v393 + 8 * v422), v370, v437, v369);
        v370 = v431 + 1970;
        v369 = a9;
        v421 += 2;
        --v419;
      }
      while (v419);
    }
    goto LABEL_73;
  }
  v395 = 0;
  if (v430 <= 0)
    v396 = 1;
  else
    v396 = 2;
  v432 = v396;
  v397 = v443 + 24;
  v426 = 24 * num_4x4_blocks_high_lookup[v352];
  v427 = num_4x4_blocks_high_lookup[v352];
  v434 = 12 * num_4x4_blocks_wide_lookup[v352];
  v436 = num_4x4_blocks_wide_lookup[v352];
  while (2)
  {
    v398 = 0;
    v428 = v397;
    v429 = v395;
    v441 = 2 * v395;
    v447 = (__int16 *)v397;
    while (2)
    {
      v399 = 0;
      v445 = v398;
      v400 = *(unsigned __int8 *)(v443 + 12 * (v398 + v441) + 20);
      v401 = (char *)&inter_mode_encodings + 8 * v400;
      v402 = *((_DWORD *)v401 - 20);
      v403 = *((_DWORD *)v401 - 19);
      v405 = *(_DWORD *)(a4 + 4);
      v404 = *(_DWORD *)(a4 + 8);
      v406 = *(_DWORD *)a4;
      while (2)
      {
        --v403;
        v408 = ((v405 - 1) * *(unsigned __int8 *)(v353 + (v399 >> 1))) >> 8;
        result = v408 + 1;
        v409 = v405 - result;
        if (((v402 >> v403) & 1) == 0)
          v409 = v408 + 1;
        v407 = (((int)(v402 >> v403 << 31) >> 31) & result) + v406;
        v410 = vpx_norm[v409];
        v411 = v404 + v410;
        if (v404 + v410 < 0)
        {
          v404 += v410;
          LOBYTE(v411) = vpx_norm[v409];
        }
        else
        {
          result = *(unsigned int *)(a4 + 12);
          if (!(_DWORD)result)
          {
            result = *(unsigned int *)(a4 + 16);
            if (((v407 << ~(_BYTE)v404) & 0x80000000) != 0)
            {
              v412 = result - 1;
              if ((int)result >= 1)
              {
                while (1)
                {
                  result = (result - 1);
                  v413 = *(_QWORD *)(a4 + 24);
                  if (*(unsigned __int8 *)(v413 + result) != 255)
                    break;
                  *(_BYTE *)(v413 + result) = 0;
                  if ((int)result <= 0)
                  {
                    v412 = -1;
                    goto LABEL_552;
                  }
                }
                v412 = result;
              }
LABEL_552:
              ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v412);
              result = *(unsigned int *)(a4 + 16);
              if (result >= *(_DWORD *)(a4 + 20))
                goto LABEL_536;
LABEL_553:
              v414 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)(a4 + 16) = result + 1;
              *(_BYTE *)(v414 + result) = v407 >> (v404 + 24);
            }
            else
            {
              if (result < *(_DWORD *)(a4 + 20))
                goto LABEL_553;
LABEL_536:
              *(_DWORD *)(a4 + 12) = 1;
            }
          }
          v407 = (v407 << -(char)v404) & 0xFFFFFF;
          v404 = v411 - 8;
        }
        v405 = v409 << v410;
        v406 = v407 << v411;
        *(_DWORD *)(a4 + 4) = v405;
        *(_DWORD *)(a4 + 8) = v404;
        *(_DWORD *)a4 = v406;
        v399 = vp9_inter_mode_tree[((v402 >> v403) & 1) + v399];
        if (v403)
          continue;
        break;
      }
      if ((_DWORD)v400 == 13)
      {
        v415 = v447;
        v417 = (char *)(v443 + 8);
        v416 = v432;
        do
        {
          v418 = *v417++;
          result = vp9_encode_mv(v439, a4, v415, (unsigned __int16 *)(v393 + 8 * v418), v370, v437, v369);
          v370 = v394;
          v369 = a9;
          v415 += 2;
          --v416;
        }
        while (v416);
      }
      v398 = v445 + v436;
      v447 = (__int16 *)((char *)v447 + v434);
      if ((unint64_t)(v445 + v436) < 2)
        continue;
      break;
    }
    v395 = v429 + v427;
    v397 = v428 + v426;
    if ((unint64_t)(v429 + v427) < 2)
      continue;
    break;
  }
LABEL_73:
  v69 = *(_DWORD *)(v423 + 13384);
  v70 = (char *)&vp9_extra_bits;
  if (v69 == 10)
    v70 = (char *)&vp9_extra_bits_high10;
  if (v69 == 12)
    v70 = (char *)&vp9_extra_bits_high12;
  v71 = (unsigned __int8 **)*a5;
  if (*a5 >= (unint64_t)a6)
  {
LABEL_247:
    v191 = &v71[2 * (*((_WORD *)v71 + 4) == 127)];
    goto LABEL_249;
  }
LABEL_78:
  while (2)
  {
    while (2)
    {
      v72 = *((unsigned __int16 *)v71 + 4);
      if (v72 == 11)
      {
        v82 = *(_DWORD *)(a4 + 8);
        v83 = *(_DWORD *)a4;
        v84 = (((*(_DWORD *)(a4 + 4) - 1) * **v71) >> 8) + 1;
        result = vpx_norm[v84];
        v85 = v82 + result;
        if (v82 + (int)result < 0)
        {
          v89 = v82 + result;
          LOBYTE(v85) = vpx_norm[v84];
          goto LABEL_143;
        }
        if (*(_DWORD *)(a4 + 12))
        {
LABEL_142:
          v83 = (v83 << -(char)v82) & 0xFFFFFF;
          v89 = v85 - 8;
LABEL_143:
          *(_DWORD *)(a4 + 4) = (_DWORD)v84 << result;
          *(_DWORD *)(a4 + 8) = v89;
          *(_DWORD *)a4 = v83 << v85;
          v71 += 2;
          if (v71 >= a6)
            goto LABEL_247;
          continue;
        }
        LODWORD(v86) = *(_DWORD *)(a4 + 16);
        if (((v83 << ~(_BYTE)v82) & 0x80000000) != 0)
        {
          v92 = v86 - 1;
          if ((int)v86 >= 1)
          {
            while (1)
            {
              v86 = (v86 - 1);
              v93 = *(_QWORD *)(a4 + 24);
              if (*(unsigned __int8 *)(v93 + v86) != 255)
                break;
              *(_BYTE *)(v93 + v86) = 0;
              if ((int)v86 <= 0)
              {
                v92 = -1;
                goto LABEL_140;
              }
            }
            v92 = v86;
          }
LABEL_140:
          ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v92);
          LODWORD(v86) = *(_DWORD *)(a4 + 16);
          if (v86 < *(_DWORD *)(a4 + 20))
            goto LABEL_89;
        }
        else if (v86 < *(_DWORD *)(a4 + 20))
        {
LABEL_89:
          v87 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)(a4 + 16) = v86 + 1;
          *(_BYTE *)(v87 + v86) = v83 >> (v82 + 24);
          goto LABEL_142;
        }
        *(_DWORD *)(a4 + 12) = 1;
        goto LABEL_142;
      }
      break;
    }
    if (v72 == 127)
      goto LABEL_247;
    v73 = *(_DWORD *)(a4 + 4);
    v74 = *(_DWORD *)(a4 + 8);
    v75 = (((v73 - 1) * **v71) >> 8) + 1;
    v76 = v73 - v75;
    v77 = v75 + *(_DWORD *)a4;
    v78 = vpx_norm[v76];
    v79 = v74 + v78;
    if (v74 + v78 < 0)
    {
      v88 = v74 + v78;
      LOBYTE(v79) = vpx_norm[v76];
    }
    else
    {
      if (!*(_DWORD *)(a4 + 12))
      {
        LODWORD(v80) = *(_DWORD *)(a4 + 16);
        if (((v77 << ~(_BYTE)v74) & 0x80000000) != 0)
        {
          v90 = v80 - 1;
          if ((int)v80 >= 1)
          {
            while (1)
            {
              v80 = (v80 - 1);
              v91 = *(_QWORD *)(a4 + 24);
              if (*(unsigned __int8 *)(v91 + v80) != 255)
                break;
              *(_BYTE *)(v91 + v80) = 0;
              if ((int)v80 <= 0)
              {
                v90 = -1;
                goto LABEL_101;
              }
            }
            v90 = v80;
          }
LABEL_101:
          ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v90);
          LODWORD(v80) = *(_DWORD *)(a4 + 16);
          if (v80 >= *(_DWORD *)(a4 + 20))
            goto LABEL_102;
LABEL_84:
          v81 = *(_QWORD *)(a4 + 24);
          *(_DWORD *)(a4 + 16) = v80 + 1;
          *(_BYTE *)(v81 + v80) = v77 >> (v74 + 24);
        }
        else
        {
          if (v80 < *(_DWORD *)(a4 + 20))
            goto LABEL_84;
LABEL_102:
          *(_DWORD *)(a4 + 12) = 1;
        }
      }
      v77 = (v77 << -(char)v74) & 0xFFFFFF;
      v88 = v79 - 8;
    }
    v94 = v76 << v78;
    *(_DWORD *)(a4 + 4) = v76 << v78;
    *(_DWORD *)(a4 + 8) = v88;
    v95 = v77 << v79;
    *(_DWORD *)a4 = v95;
LABEL_105:
    v96 = *((__int16 *)v71 + 4);
    v97 = *v71;
    v98 = (((v94 - 1) * (*v71)[1]) >> 8) + 1;
    if (*((_WORD *)v71 + 4))
    {
      v106 = v94 - v98;
      v107 = v98 + v95;
      v108 = vpx_norm[v106];
      v109 = v88 + v108;
      if (v88 + v108 < 0)
      {
        v113 = v88 + v108;
        v114 = v106 << v108;
        *(_DWORD *)(a4 + 4) = v106 << v108;
        *(_DWORD *)(a4 + 8) = v88 + v108;
        v115 = v107 << v108;
        *(_DWORD *)a4 = v107 << v108;
        if ((_DWORD)v96 == 1)
          goto LABEL_151;
      }
      else
      {
        if (!*(_DWORD *)(a4 + 12))
        {
          LODWORD(v110) = *(_DWORD *)(a4 + 16);
          if (((v107 << ~(_BYTE)v88) & 0x80000000) != 0)
          {
            v111 = v110 - 1;
            if ((int)v110 >= 1)
            {
              while (1)
              {
                v110 = (v110 - 1);
                v112 = *(_QWORD *)(a4 + 24);
                if (*(unsigned __int8 *)(v112 + v110) != 255)
                  break;
                *(_BYTE *)(v112 + v110) = 0;
                if ((int)v110 <= 0)
                {
                  v111 = -1;
                  goto LABEL_146;
                }
              }
              v111 = v110;
            }
LABEL_146:
            ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v111);
            LODWORD(v110) = *(_DWORD *)(a4 + 16);
          }
          if (v110 >= *(_DWORD *)(a4 + 20))
          {
            *(_DWORD *)(a4 + 12) = 1;
          }
          else
          {
            v129 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 16) = v110 + 1;
            *(_BYTE *)(v129 + v110) = v107 >> (v88 + 24);
          }
        }
        v113 = v109 - 8;
        v114 = v106 << v108;
        *(_DWORD *)(a4 + 4) = v106 << v108;
        *(_DWORD *)(a4 + 8) = v109 - 8;
        v115 = ((v107 << -(char)v88) & 0xFFFFFF) << v109;
        *(_DWORD *)a4 = v115;
        if ((_DWORD)v96 == 1)
        {
LABEL_151:
          v130 = (((v114 - 1) * v97[2]) >> 8) + 1;
          v131 = vpx_norm[v130];
          v132 = v113 + v131;
          if (v113 + v131 < 0)
          {
            v136 = v113 + v131;
            LOBYTE(v132) = vpx_norm[v130];
          }
          else
          {
            if (!*(_DWORD *)(a4 + 12))
            {
              LODWORD(v133) = *(_DWORD *)(a4 + 16);
              if (((v115 << ~(_BYTE)v113) & 0x80000000) != 0)
              {
                v134 = v133 - 1;
                if ((int)v133 >= 1)
                {
                  while (1)
                  {
                    v133 = (v133 - 1);
                    v135 = *(_QWORD *)(a4 + 24);
                    if (*(unsigned __int8 *)(v135 + v133) != 255)
                      break;
                    *(_BYTE *)(v135 + v133) = 0;
                    if ((int)v133 <= 0)
                    {
                      v134 = -1;
                      goto LABEL_217;
                    }
                  }
                  v134 = v133;
                }
LABEL_217:
                ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v134);
                LODWORD(v133) = *(_DWORD *)(a4 + 16);
              }
              if (v133 >= *(_DWORD *)(a4 + 20))
              {
                *(_DWORD *)(a4 + 12) = 1;
              }
              else
              {
                v177 = *(_QWORD *)(a4 + 24);
                *(_DWORD *)(a4 + 16) = v133 + 1;
                *(_BYTE *)(v177 + v133) = v115 >> (v113 + 24);
              }
            }
            v115 = (v115 << -(char)v113) & 0xFFFFFF;
            v136 = v132 - 8;
          }
          v178 = (_DWORD)v130 << v131;
          v179 = v115 << v132;
          *(_DWORD *)(a4 + 4) = v178;
          *(_DWORD *)(a4 + 8) = v136;
          *(_DWORD *)a4 = v115 << v132;
          v180 = *((_DWORD *)v71 + 3);
          v181 = ((v178 << 7) - 128) >> 8;
          v182 = v178 - (v181 + 1);
          if ((v180 & 1) == 0)
            v182 = v181 + 1;
          result = ((v180 << 31 >> 31) & (v181 + 1)) + v179;
          v183 = vpx_norm[v182];
          v184 = v136 + v183;
          if (v136 + v183 < 0)
          {
            v188 = v136 + v183;
            LOBYTE(v184) = vpx_norm[v182];
          }
          else
          {
            if (!*(_DWORD *)(a4 + 12))
            {
              LODWORD(v185) = *(_DWORD *)(a4 + 16);
              if ((((_DWORD)result << ~(_BYTE)v136) & 0x80000000) != 0)
              {
                v186 = v185 - 1;
                if ((int)v185 >= 1)
                {
                  while (1)
                  {
                    v185 = (v185 - 1);
                    v187 = *(_QWORD *)(a4 + 24);
                    if (*(unsigned __int8 *)(v187 + v185) != 255)
                      break;
                    *(_BYTE *)(v187 + v185) = 0;
                    if ((int)v185 <= 0)
                    {
                      v186 = -1;
                      goto LABEL_241;
                    }
                  }
                  v186 = v185;
                }
LABEL_241:
                ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v186);
                LODWORD(v185) = *(_DWORD *)(a4 + 16);
              }
              if (v185 >= *(_DWORD *)(a4 + 20))
              {
                *(_DWORD *)(a4 + 12) = 1;
              }
              else
              {
                v190 = *(_QWORD *)(a4 + 24);
                *(_DWORD *)(a4 + 16) = v185 + 1;
                *(_BYTE *)(v190 + v185) = result >> (v136 + 24);
              }
            }
            result = ((_DWORD)result << -(char)v136) & 0xFFFFFF;
            v188 = v184 - 8;
          }
          *(_DWORD *)(a4 + 4) = v182 << v183;
          *(_DWORD *)(a4 + 8) = v188;
          *(_DWORD *)a4 = (_DWORD)result << v184;
          v71 += 2;
          if (v71 >= a6)
            goto LABEL_247;
          continue;
        }
      }
      v116 = (unsigned int *)((char *)&vp9_coef_encodings + 8 * v96);
      v117 = *v116;
      v118 = v116[1];
      v119 = *((_DWORD *)v71 + 3);
      v120 = (((v114 - 1) * v97[2]) >> 8) + 1;
      v121 = v114 - v120;
      v122 = v120 + v115;
      v123 = vpx_norm[v121];
      v124 = v113 + v123;
      if (v113 + v123 < 0)
      {
        v128 = v113 + v123;
        LOBYTE(v124) = vpx_norm[v121];
      }
      else
      {
        if (!*(_DWORD *)(a4 + 12))
        {
          LODWORD(v125) = *(_DWORD *)(a4 + 16);
          if (((v122 << ~(_BYTE)v113) & 0x80000000) != 0)
          {
            v126 = v125 - 1;
            if ((int)v125 >= 1)
            {
              while (1)
              {
                v125 = (v125 - 1);
                v127 = *(_QWORD *)(a4 + 24);
                if (*(unsigned __int8 *)(v127 + v125) != 255)
                  break;
                *(_BYTE *)(v127 + v125) = 0;
                if ((int)v125 <= 0)
                {
                  v126 = -1;
                  goto LABEL_160;
                }
              }
              v126 = v125;
            }
LABEL_160:
            ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v126);
            LODWORD(v125) = *(_DWORD *)(a4 + 16);
          }
          if (v125 >= *(_DWORD *)(a4 + 20))
          {
            *(_DWORD *)(a4 + 12) = 1;
          }
          else
          {
            v137 = *(_QWORD *)(a4 + 24);
            *(_DWORD *)(a4 + 16) = v125 + 1;
            *(_BYTE *)(v137 + v125) = v122 >> (v113 + 24);
          }
        }
        v122 = (v122 << -(char)v113) & 0xFFFFFF;
        v128 = v124 - 8;
      }
      v138 = 0;
      v139 = v121 << v123;
      v140 = v122 << v124;
      *(_DWORD *)(a4 + 4) = v139;
      *(_DWORD *)(a4 + 8) = v128;
      *(_DWORD *)a4 = v122 << v124;
      v141 = (char *)&vp9_pareto8_full + 8 * v97[2] - 8;
      v142 = v118 - 3;
      while (1)
      {
        --v142;
        v144 = ((v139 - 1) * v141[v138 >> 1]) >> 8;
        v145 = v139 - (v144 + 1);
        if (((v117 >> v142) & 1) == 0)
          v145 = v144 + 1;
        v143 = (((int)(v117 >> v142 << 31) >> 31) & (v144 + 1)) + v140;
        v146 = vpx_norm[v145];
        v147 = v128 + v146;
        if (v128 + v146 < 0)
        {
          v128 += v146;
          LOBYTE(v147) = vpx_norm[v145];
          goto LABEL_168;
        }
        if (!*(_DWORD *)(a4 + 12))
        {
          LODWORD(v148) = *(_DWORD *)(a4 + 16);
          if (((v143 << ~(_BYTE)v128) & 0x80000000) != 0)
          {
            v149 = v148 - 1;
            if ((int)v148 >= 1)
            {
              while (1)
              {
                v148 = (v148 - 1);
                v150 = *(_QWORD *)(a4 + 24);
                if (*(unsigned __int8 *)(v150 + v148) != 255)
                  break;
                *(_BYTE *)(v150 + v148) = 0;
                if ((int)v148 <= 0)
                {
                  v149 = -1;
                  goto LABEL_182;
                }
              }
              v149 = v148;
            }
LABEL_182:
            ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v149);
            LODWORD(v148) = *(_DWORD *)(a4 + 16);
            if (v148 < *(_DWORD *)(a4 + 20))
            {
LABEL_183:
              v151 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)(a4 + 16) = v148 + 1;
              *(_BYTE *)(v151 + v148) = v143 >> (v128 + 24);
              goto LABEL_167;
            }
          }
          else if (v148 < *(_DWORD *)(a4 + 20))
          {
            goto LABEL_183;
          }
          *(_DWORD *)(a4 + 12) = 1;
        }
LABEL_167:
        v143 = (v143 << -(char)v128) & 0xFFFFFF;
        v128 = v147 - 8;
LABEL_168:
        v139 = v145 << v146;
        v140 = v143 << v147;
        *(_DWORD *)(a4 + 4) = v139;
        *(_DWORD *)(a4 + 8) = v128;
        *(_DWORD *)a4 = v140;
        v138 = vp9_coef_con_tree[((v117 >> v142) & 1) + v138];
        if (!v142)
        {
          if ((int)v96 < 5)
          {
LABEL_205:
            v168 = v119 << 31 >> 31;
            v169 = ((v139 << 7) - 128) >> 8;
            if ((v119 & 1) != 0)
              v170 = v139 - (v169 + 1);
            else
              v170 = v169 + 1;
            result = (v168 & (v169 + 1)) + v140;
            v171 = vpx_norm[v170];
            v172 = v128 + v171;
            if (v128 + v171 < 0)
            {
              v176 = v128 + v171;
              LOBYTE(v172) = vpx_norm[v170];
            }
            else
            {
              if (!*(_DWORD *)(a4 + 12))
              {
                LODWORD(v173) = *(_DWORD *)(a4 + 16);
                if ((((_DWORD)result << ~(_BYTE)v128) & 0x80000000) != 0)
                {
                  v174 = v173 - 1;
                  if ((int)v173 >= 1)
                  {
                    while (1)
                    {
                      v173 = (v173 - 1);
                      v175 = *(_QWORD *)(a4 + 24);
                      if (*(unsigned __int8 *)(v175 + v173) != 255)
                        break;
                      *(_BYTE *)(v175 + v173) = 0;
                      if ((int)v173 <= 0)
                      {
                        v174 = -1;
                        goto LABEL_233;
                      }
                    }
                    v174 = v173;
                  }
LABEL_233:
                  ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v174);
                  LODWORD(v173) = *(_DWORD *)(a4 + 16);
                }
                if (v173 >= *(_DWORD *)(a4 + 20))
                {
                  *(_DWORD *)(a4 + 12) = 1;
                }
                else
                {
                  v189 = *(_QWORD *)(a4 + 24);
                  *(_DWORD *)(a4 + 16) = v173 + 1;
                  *(_BYTE *)(v189 + v173) = result >> (v128 + 24);
                }
              }
              result = ((_DWORD)result << -(char)v128) & 0xFFFFFF;
              v176 = v172 - 8;
            }
            *(_DWORD *)(a4 + 4) = v170 << v171;
            *(_DWORD *)(a4 + 8) = v176;
            *(_DWORD *)a4 = (_DWORD)result << v172;
            v71 += 2;
            if (v71 >= a6)
              goto LABEL_247;
            goto LABEL_78;
          }
          v152 = &v70[24 * (int)v96];
          v153 = *(unsigned __int8 **)v152;
          v154 = *((_DWORD *)v152 + 2);
          while (2)
          {
            while (1)
            {
              --v154;
              v156 = *v153++;
              v157 = ((v139 - 1) * v156) >> 8;
              v158 = v139 - (v157 + 1);
              if (((1 << v154) & (v119 >> 1)) != 0)
              {
                v159 = v157 + 1;
              }
              else
              {
                v158 = v157 + 1;
                v159 = 0;
              }
              v160 = v159 + v140;
              v161 = vpx_norm[v158];
              v162 = v128 + v161;
              if (v128 + v161 >= 0)
                break;
              v128 += v161;
              v164 = vpx_norm[v158];
              v139 = v158 << v161;
              *(_DWORD *)(a4 + 4) = v139;
              *(_DWORD *)(a4 + 8) = v128;
              v140 = v160 << v164;
              *(_DWORD *)a4 = v140;
              if (!v154)
                goto LABEL_205;
            }
            if (!*(_DWORD *)(a4 + 12))
            {
              LODWORD(v163) = *(_DWORD *)(a4 + 16);
              if (((v160 << ~(_BYTE)v128) & 0x80000000) != 0)
              {
                v165 = v163 - 1;
                if ((int)v163 >= 1)
                {
                  while (1)
                  {
                    v163 = (v163 - 1);
                    v166 = *(_QWORD *)(a4 + 24);
                    if (*(unsigned __int8 *)(v166 + v163) != 255)
                      break;
                    *(_BYTE *)(v166 + v163) = 0;
                    if ((int)v163 <= 0)
                    {
                      v165 = -1;
                      goto LABEL_203;
                    }
                  }
                  v165 = v163;
                }
LABEL_203:
                ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v165);
                LODWORD(v163) = *(_DWORD *)(a4 + 16);
                if (v163 >= *(_DWORD *)(a4 + 20))
                  goto LABEL_186;
LABEL_204:
                v167 = *(_QWORD *)(a4 + 24);
                *(_DWORD *)(a4 + 16) = v163 + 1;
                *(_BYTE *)(v167 + v163) = v160 >> (v128 + 24);
              }
              else
              {
                if (v163 < *(_DWORD *)(a4 + 20))
                  goto LABEL_204;
LABEL_186:
                *(_DWORD *)(a4 + 12) = 1;
              }
            }
            v155 = (v160 << -(char)v128) & 0xFFFFFF;
            v128 = v162 - 8;
            v139 = v158 << v161;
            *(_DWORD *)(a4 + 4) = v139;
            *(_DWORD *)(a4 + 8) = v162 - 8;
            v140 = v155 << v162;
            *(_DWORD *)a4 = v140;
            if (!v154)
              goto LABEL_205;
            continue;
          }
        }
      }
    }
    break;
  }
  v99 = vpx_norm[v98];
  v100 = v88 + v99;
  if (v88 + v99 < 0)
  {
    v88 += v99;
    LOBYTE(v100) = vpx_norm[v98];
  }
  else
  {
    if (!*(_DWORD *)(a4 + 12))
    {
      LODWORD(v101) = *(_DWORD *)(a4 + 16);
      if (((v95 << ~(_BYTE)v88) & 0x80000000) != 0)
      {
        v103 = v101 - 1;
        if ((int)v101 >= 1)
        {
          while (1)
          {
            v101 = (v101 - 1);
            v104 = *(_QWORD *)(a4 + 24);
            if (*(unsigned __int8 *)(v104 + v101) != 255)
              break;
            *(_BYTE *)(v104 + v101) = 0;
            if ((int)v101 <= 0)
            {
              v103 = -1;
              goto LABEL_117;
            }
          }
          v103 = v101;
        }
LABEL_117:
        ++*(_BYTE *)(*(_QWORD *)(a4 + 24) + v103);
        LODWORD(v101) = *(_DWORD *)(a4 + 16);
        if (v101 >= *(_DWORD *)(a4 + 20))
          goto LABEL_118;
LABEL_110:
        v102 = *(_QWORD *)(a4 + 24);
        *(_DWORD *)(a4 + 16) = v101 + 1;
        *(_BYTE *)(v102 + v101) = v95 >> (v88 + 24);
      }
      else
      {
        if (v101 < *(_DWORD *)(a4 + 20))
          goto LABEL_110;
LABEL_118:
        *(_DWORD *)(a4 + 12) = 1;
      }
    }
    v95 = (v95 << -(char)v88) & 0xFFFFFF;
    v88 = v100 - 8;
  }
  v94 = (_DWORD)v98 << v99;
  v95 <<= v100;
  *(_DWORD *)(a4 + 4) = (_DWORD)v98 << v99;
  *(_DWORD *)(a4 + 8) = v88;
  *(_DWORD *)a4 = v95;
  result = (uint64_t)(v71 + 2);
  v105 = *((unsigned __int16 *)v71 + 12);
  if (v71 + 2 == a6)
  {
    v191 = &a6[2 * (v105 == 127)];
    goto LABEL_249;
  }
  v71 += 2;
  if (v105 != 127)
    goto LABEL_105;
  v191 = (unsigned __int8 **)(result + 16);
LABEL_249:
  *a5 = (unint64_t)v191;
  return result;
}

uint64_t write_segment_id(uint64_t result, _BYTE *a2, unint64_t a3)
{
  _BYTE *v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;

  if (*a2 && a2[1])
  {
    v4 = a2[5];
    v3 = a2 + 5;
    v5 = *(_DWORD *)(result + 4);
    v6 = *(_DWORD *)(result + 8);
    v7 = (a3 >> 2) & 1;
    v8 = ((v5 - 1) * v4) >> 8;
    v9 = v5 - (v8 + 1);
    if ((_DWORD)v7)
    {
      v10 = v8 + 1;
    }
    else
    {
      v9 = v8 + 1;
      v10 = 0;
    }
    v11 = v10 + *(_DWORD *)result;
    v12 = vpx_norm[v9];
    v13 = v6 + v12;
    if (v6 + v12 < 0)
    {
      v16 = v6 + v12;
      LOBYTE(v13) = vpx_norm[v9];
      goto LABEL_20;
    }
    if (*(_DWORD *)(result + 12))
    {
LABEL_19:
      v11 = (v11 << -(char)v6) & 0xFFFFFF;
      v16 = v13 - 8;
LABEL_20:
      v19 = v9 << v12;
      v20 = v11 << v13;
      *(_DWORD *)(result + 4) = v19;
      *(_DWORD *)(result + 8) = v16;
      *(_DWORD *)result = v20;
      v21 = vp9_segment_tree[v7];
      v22 = ((v19 - 1) * v3[v21 >> 1]) >> 8;
      v23 = v19 - (v22 + 1);
      if (((a3 >> 1) & 1) == 0)
        v23 = v22 + 1;
      v24 = ((v22 + 1) & ((int)((_DWORD)a3 << 30) >> 31)) + v20;
      v25 = vpx_norm[v23];
      v26 = v16 + v25;
      if (v16 + v25 < 0)
      {
        v29 = v16 + v25;
        LOBYTE(v26) = vpx_norm[v23];
        goto LABEL_36;
      }
      if (*(_DWORD *)(result + 12))
      {
LABEL_35:
        v24 = (v24 << -(char)v16) & 0xFFFFFF;
        v29 = v26 - 8;
LABEL_36:
        v32 = v23 << v25;
        v33 = v24 << v26;
        *(_DWORD *)(result + 4) = v32;
        *(_DWORD *)(result + 8) = v29;
        *(_DWORD *)result = v33;
        v34 = ((v32 - 1) * v3[vp9_segment_tree[((a3 >> 1) & 1) + v21] >> 1]) >> 8;
        v35 = v34 + 1;
        v36 = v32 - (v34 + 1);
        if ((a3 & 1) != 0)
          v37 = v36;
        else
          v37 = v34 + 1;
        v38 = (((int)((_DWORD)a3 << 31) >> 31) & v35) + v33;
        v39 = vpx_norm[v37];
        v40 = v29 + v39;
        if (v29 + v39 < 0)
        {
          v43 = v29 + v39;
          LOBYTE(v40) = vpx_norm[v37];
LABEL_53:
          *(_DWORD *)(result + 4) = v37 << v39;
          *(_DWORD *)(result + 8) = v43;
          *(_DWORD *)result = v38 << v40;
          return result;
        }
        if (*(_DWORD *)(result + 12))
        {
LABEL_52:
          v38 = (v38 << -(char)v29) & 0xFFFFFF;
          v43 = v40 - 8;
          goto LABEL_53;
        }
        LODWORD(v41) = *(_DWORD *)(result + 16);
        if (((v38 << ~(_BYTE)v29) & 0x80000000) != 0)
        {
          v44 = v41 - 1;
          if ((int)v41 >= 1)
          {
            while (1)
            {
              v41 = (v41 - 1);
              v45 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v45 + v41) != 255)
                break;
              *(_BYTE *)(v45 + v41) = 0;
              if ((int)v41 <= 0)
              {
                v44 = -1;
                goto LABEL_50;
              }
            }
            v44 = v41;
          }
LABEL_50:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v44);
          LODWORD(v41) = *(_DWORD *)(result + 16);
          if (v41 < *(_DWORD *)(result + 20))
            goto LABEL_43;
        }
        else if (v41 < *(_DWORD *)(result + 20))
        {
LABEL_43:
          v42 = *(_QWORD *)(result + 24);
          *(_DWORD *)(result + 16) = v41 + 1;
          *(_BYTE *)(v42 + v41) = v38 >> (v29 + 24);
          goto LABEL_52;
        }
        *(_DWORD *)(result + 12) = 1;
        goto LABEL_52;
      }
      LODWORD(v27) = *(_DWORD *)(result + 16);
      if (((v24 << ~(_BYTE)v16) & 0x80000000) != 0)
      {
        v30 = v27 - 1;
        if ((int)v27 >= 1)
        {
          while (1)
          {
            v27 = (v27 - 1);
            v31 = *(_QWORD *)(result + 24);
            if (*(unsigned __int8 *)(v31 + v27) != 255)
              break;
            *(_BYTE *)(v31 + v27) = 0;
            if ((int)v27 <= 0)
            {
              v30 = -1;
              goto LABEL_33;
            }
          }
          v30 = v27;
        }
LABEL_33:
        ++*(_BYTE *)(*(_QWORD *)(result + 24) + v30);
        LODWORD(v27) = *(_DWORD *)(result + 16);
        if (v27 < *(_DWORD *)(result + 20))
          goto LABEL_26;
      }
      else if (v27 < *(_DWORD *)(result + 20))
      {
LABEL_26:
        v28 = *(_QWORD *)(result + 24);
        *(_DWORD *)(result + 16) = v27 + 1;
        *(_BYTE *)(v28 + v27) = v24 >> (v16 + 24);
        goto LABEL_35;
      }
      *(_DWORD *)(result + 12) = 1;
      goto LABEL_35;
    }
    LODWORD(v14) = *(_DWORD *)(result + 16);
    if (((v11 << ~(_BYTE)v6) & 0x80000000) != 0)
    {
      v17 = v14 - 1;
      if ((int)v14 >= 1)
      {
        while (1)
        {
          v14 = (v14 - 1);
          v18 = *(_QWORD *)(result + 24);
          if (*(unsigned __int8 *)(v18 + v14) != 255)
            break;
          *(_BYTE *)(v18 + v14) = 0;
          if ((int)v14 <= 0)
          {
            v17 = -1;
            goto LABEL_17;
          }
        }
        v17 = v14;
      }
LABEL_17:
      ++*(_BYTE *)(*(_QWORD *)(result + 24) + v17);
      LODWORD(v14) = *(_DWORD *)(result + 16);
      if (v14 < *(_DWORD *)(result + 20))
        goto LABEL_10;
    }
    else if (v14 < *(_DWORD *)(result + 20))
    {
LABEL_10:
      v15 = *(_QWORD *)(result + 24);
      *(_DWORD *)(result + 16) = v14 + 1;
      *(_BYTE *)(v15 + v14) = v11 >> (v6 + 24);
      goto LABEL_19;
    }
    *(_DWORD *)(result + 12) = 1;
    goto LABEL_19;
  }
  return result;
}

uint64_t write_skip(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  if (*(_BYTE *)(a1 + 4776) && (*(_DWORD *)(a1 + 4 * a3 + 4856) & 8) != 0)
    return 1;
  v7 = *(_QWORD *)(a2 + 456);
  v6 = *(_QWORD *)(a2 + 464);
  if (v6)
    v6 = *(char *)(v6 + 3);
  result = *(char *)(a4 + 3);
  v9 = *(_QWORD *)(a1 + 4904);
  if (v7)
    v7 = *(char *)(v7 + 3);
  v10 = *(unsigned __int8 *)(v9 + v7 + v6 + 1967);
  v11 = *(_DWORD *)(a5 + 4);
  v12 = *(_DWORD *)(a5 + 8);
  v13 = ((v11 - 1) * v10) >> 8;
  v14 = v11 - (v13 + 1);
  if (*(_BYTE *)(a4 + 3))
  {
    v15 = v13 + 1;
  }
  else
  {
    v14 = v13 + 1;
    v15 = 0;
  }
  v16 = v15 + *(_DWORD *)a5;
  v17 = vpx_norm[v14];
  v18 = v12 + v17;
  if (v12 + v17 < 0)
  {
    *(_DWORD *)(a5 + 4) = v14 << v17;
    *(_DWORD *)(a5 + 8) = v12 + v17;
    *(_DWORD *)a5 = v16 << v17;
    return result;
  }
  if (!*(_DWORD *)(a5 + 12))
  {
    if (((v16 << ~(_BYTE)v12) & 0x80000000) != 0)
    {
      LODWORD(v21) = *(_DWORD *)(a5 + 16);
      v22 = v21 - 1;
      if ((int)v21 >= 1)
      {
        while (1)
        {
          v21 = (v21 - 1);
          v23 = *(_QWORD *)(a5 + 24);
          if (*(unsigned __int8 *)(v23 + v21) != 255)
            break;
          *(_BYTE *)(v23 + v21) = 0;
          if ((int)v21 <= 0)
          {
            v22 = -1;
            goto LABEL_22;
          }
        }
        v22 = v21;
      }
LABEL_22:
      ++*(_BYTE *)(*(_QWORD *)(a5 + 24) + v22);
      v19 = *(unsigned int *)(a5 + 16);
      if (v19 < *(_DWORD *)(a5 + 20))
        goto LABEL_14;
    }
    else
    {
      v19 = *(unsigned int *)(a5 + 16);
      if (v19 < *(_DWORD *)(a5 + 20))
      {
LABEL_14:
        v20 = *(_QWORD *)(a5 + 24);
        *(_DWORD *)(a5 + 16) = v19 + 1;
        *(_BYTE *)(v20 + v19) = v16 >> (v12 + 24);
        goto LABEL_24;
      }
    }
    *(_DWORD *)(a5 + 12) = 1;
  }
LABEL_24:
  *(_DWORD *)(a5 + 4) = v14 << v17;
  *(_DWORD *)(a5 + 8) = v18 - 8;
  *(_DWORD *)a5 = ((v16 << -(char)v12) & 0xFFFFFF) << v18;
  return result;
}

uint64_t write_selected_tx_size(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  unsigned __int8 v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = *(_QWORD *)(a2 + 456);
  v4 = **(unsigned __int8 ***)(a2 + 448);
  v5 = *v4;
  v6 = max_txsize_lookup[v5];
  v7 = *(_QWORD *)(a2 + 464);
  v8 = v6;
  if (v7)
  {
    v8 = max_txsize_lookup[v5];
    if (!*(_BYTE *)(v7 + 3))
      v8 = *(unsigned __int8 *)(v7 + 2);
  }
  v9 = v4[2];
  v10 = v8;
  if (v3)
  {
    v10 = max_txsize_lookup[v5];
    if (!*(_BYTE *)(v3 + 3))
      v10 = *(unsigned __int8 *)(v3 + 2);
  }
  if (v7)
    v11 = v8;
  else
    v11 = v10;
  v12 = v11 + v10;
  v13 = *(_QWORD *)(result + 4904);
  v14 = v13 + ((v12 > v6) | (2 * (v12 > v6))) + 1955;
  v15 = v12 > v6;
  v16 = v13 + 2 * (v12 > v6) + 1961;
  if (v15)
    ++v13;
  v17 = v13 + 1965;
  if (v6 != 1)
    v17 = 0;
  if (v6 != 2)
    v16 = v17;
  if (v6 == 3)
    v18 = (unsigned __int8 *)v14;
  else
    v18 = (unsigned __int8 *)v16;
  v20 = *(_DWORD *)(a3 + 4);
  v19 = *(_DWORD *)(a3 + 8);
  v21 = ((v20 - 1) * *v18) >> 8;
  v22 = v20 - (v21 + 1);
  if (v9)
  {
    v23 = v21 + 1;
  }
  else
  {
    v22 = v21 + 1;
    v23 = 0;
  }
  v24 = v23 + *(_DWORD *)a3;
  v25 = vpx_norm[v22];
  v26 = v19 + v25;
  if (v19 + v25 < 0)
  {
    v29 = v19 + v25;
    v30 = v22 << v25;
    *(_DWORD *)(a3 + 4) = v30;
    *(_DWORD *)(a3 + 8) = v29;
    v31 = v24 << v25;
    *(_DWORD *)a3 = v31;
    if (!v9)
      return result;
    goto LABEL_37;
  }
  v27 = -v19;
  result = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)result)
  {
    if (((v24 << ~(_BYTE)v19) & 0x80000000) != 0)
    {
      LODWORD(v32) = *(_DWORD *)(a3 + 16);
      v33 = v32 - 1;
      if ((int)v32 >= 1)
      {
        while (1)
        {
          v32 = (v32 - 1);
          v34 = *(_QWORD *)(a3 + 24);
          if (*(unsigned __int8 *)(v34 + v32) != 255)
            break;
          *(_BYTE *)(v34 + v32) = 0;
          if ((int)v32 <= 0)
          {
            v33 = -1;
            goto LABEL_34;
          }
        }
        v33 = v32;
      }
LABEL_34:
      ++*(_BYTE *)(*(_QWORD *)(a3 + 24) + v33);
      result = *(unsigned int *)(a3 + 16);
      if (result < *(_DWORD *)(a3 + 20))
        goto LABEL_26;
    }
    else
    {
      result = *(unsigned int *)(a3 + 16);
      if (result < *(_DWORD *)(a3 + 20))
      {
LABEL_26:
        v28 = *(_QWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 16) = result + 1;
        *(_BYTE *)(v28 + result) = v24 >> (v19 + 24);
        goto LABEL_36;
      }
    }
    *(_DWORD *)(a3 + 12) = 1;
  }
LABEL_36:
  v29 = v26 - 8;
  v30 = v22 << v25;
  *(_DWORD *)(a3 + 4) = v30;
  *(_DWORD *)(a3 + 8) = v26 - 8;
  v31 = ((v24 << v27) & 0xFFFFFF) << v26;
  *(_DWORD *)a3 = v31;
  if (!v9)
    return result;
LABEL_37:
  if ((unint64_t)(v5 - 6) > 6)
    return result;
  v35 = ((v30 - 1) * v18[1]) >> 8;
  v36 = v30 - (v35 + 1);
  if (v9 == 1)
  {
    v36 = v35 + 1;
    v37 = 0;
  }
  else
  {
    v37 = v35 + 1;
  }
  v38 = v37 + v31;
  v39 = vpx_norm[v36];
  v40 = v29 + v39;
  if (v29 + v39 < 0)
  {
    v43 = v29 + v39;
    v44 = vpx_norm[v36];
    v45 = v36 << v39;
    *(_DWORD *)(a3 + 4) = v45;
    *(_DWORD *)(a3 + 8) = v43;
    v46 = v38 << v44;
    *(_DWORD *)a3 = v38 << v44;
    if (v9 == 1)
      return result;
    goto LABEL_56;
  }
  v41 = -v29;
  result = *(unsigned int *)(a3 + 12);
  if (!(_DWORD)result)
  {
    if (((v38 << ~(_BYTE)v29) & 0x80000000) != 0)
    {
      LODWORD(v47) = *(_DWORD *)(a3 + 16);
      v48 = v47 - 1;
      if ((int)v47 >= 1)
      {
        while (1)
        {
          v47 = (v47 - 1);
          v49 = *(_QWORD *)(a3 + 24);
          if (*(unsigned __int8 *)(v49 + v47) != 255)
            break;
          *(_BYTE *)(v49 + v47) = 0;
          if ((int)v47 <= 0)
          {
            v48 = -1;
            goto LABEL_53;
          }
        }
        v48 = v47;
      }
LABEL_53:
      ++*(_BYTE *)(*(_QWORD *)(a3 + 24) + v48);
      result = *(unsigned int *)(a3 + 16);
      if (result < *(_DWORD *)(a3 + 20))
        goto LABEL_45;
    }
    else
    {
      result = *(unsigned int *)(a3 + 16);
      if (result < *(_DWORD *)(a3 + 20))
      {
LABEL_45:
        v42 = *(_QWORD *)(a3 + 24);
        *(_DWORD *)(a3 + 16) = result + 1;
        *(_BYTE *)(v42 + result) = v38 >> (v29 + 24);
        goto LABEL_55;
      }
    }
    *(_DWORD *)(a3 + 12) = 1;
  }
LABEL_55:
  v43 = v40 - 8;
  v45 = v36 << v39;
  *(_DWORD *)(a3 + 4) = v45;
  *(_DWORD *)(a3 + 8) = v40 - 8;
  v46 = ((v38 << v41) & 0xFFFFFF) << v40;
  *(_DWORD *)a3 = v46;
  if (v9 == 1)
    return result;
LABEL_56:
  if ((unint64_t)(v5 - 9) <= 3)
  {
    v50 = ((v45 - 1) * v18[2]) >> 8;
    v51 = v45 - (v50 + 1);
    if (v9 == 2)
    {
      v51 = v50 + 1;
      v52 = 0;
    }
    else
    {
      v52 = v50 + 1;
    }
    v53 = v52 + v46;
    v54 = vpx_norm[v51];
    v55 = v43 + v54;
    if (v43 + v54 < 0)
    {
      *(_DWORD *)(a3 + 4) = v51 << v54;
      *(_DWORD *)(a3 + 8) = v43 + v54;
      *(_DWORD *)a3 = v53 << v54;
    }
    else
    {
      if (!*(_DWORD *)(a3 + 12))
      {
        if (((v53 << ~(_BYTE)v43) & 0x80000000) != 0)
        {
          LODWORD(v56) = *(_DWORD *)(a3 + 16);
          v57 = v56 - 1;
          if ((int)v56 >= 1)
          {
            while (1)
            {
              v56 = (v56 - 1);
              v58 = *(_QWORD *)(a3 + 24);
              if (*(unsigned __int8 *)(v58 + v56) != 255)
                break;
              *(_BYTE *)(v58 + v56) = 0;
              if ((int)v56 <= 0)
              {
                v57 = -1;
                goto LABEL_69;
              }
            }
            v57 = v56;
          }
LABEL_69:
          ++*(_BYTE *)(*(_QWORD *)(a3 + 24) + v57);
        }
        v59 = *(unsigned int *)(a3 + 16);
        if (v59 >= *(_DWORD *)(a3 + 20))
        {
          *(_DWORD *)(a3 + 12) = 1;
        }
        else
        {
          v60 = *(_QWORD *)(a3 + 24);
          *(_DWORD *)(a3 + 16) = v59 + 1;
          *(_BYTE *)(v60 + v59) = v53 >> (v43 + 24);
        }
      }
      *(_DWORD *)(a3 + 4) = v51 << v54;
      *(_DWORD *)(a3 + 8) = v55 - 8;
      *(_DWORD *)a3 = ((v53 << -(char)v43) & 0xFFFFFF) << v55;
    }
  }
  return result;
}

uint64_t write_intra_mode(uint64_t result, unsigned int a2, uint64_t a3)
{
  char v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v3 = 0;
  v4 = (unsigned int *)((char *)&intra_mode_encodings + 8 * a2);
  v5 = *v4;
  v6 = v4[1];
  v8 = *(_DWORD *)(result + 4);
  v7 = *(_DWORD *)(result + 8);
  v9 = *(_DWORD *)result;
  do
  {
    --v6;
    v11 = ((v8 - 1) * *(unsigned __int8 *)(a3 + (v3 >> 1))) >> 8;
    v12 = v8 - (v11 + 1);
    if (((v5 >> v6) & 1) == 0)
      v12 = v11 + 1;
    v10 = (((int)(v5 >> v6 << 31) >> 31) & (v11 + 1)) + v9;
    v13 = vpx_norm[v12];
    v14 = v7 + v13;
    if (v7 + v13 >= 0)
    {
      if (!*(_DWORD *)(result + 12))
      {
        LODWORD(v15) = *(_DWORD *)(result + 16);
        if (((v10 << ~(_BYTE)v7) & 0x80000000) != 0)
        {
          v16 = v15 - 1;
          if ((int)v15 >= 1)
          {
            while (1)
            {
              v15 = (v15 - 1);
              v17 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v17 + v15) != 255)
                break;
              *(_BYTE *)(v17 + v15) = 0;
              if ((int)v15 <= 0)
              {
                v16 = -1;
                goto LABEL_18;
              }
            }
            v16 = v15;
          }
LABEL_18:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v16);
          LODWORD(v15) = *(_DWORD *)(result + 16);
          if (v15 < *(_DWORD *)(result + 20))
            goto LABEL_19;
        }
        else if (v15 < *(_DWORD *)(result + 20))
        {
LABEL_19:
          v18 = *(_QWORD *)(result + 24);
          *(_DWORD *)(result + 16) = v15 + 1;
          *(_BYTE *)(v18 + v15) = v10 >> (v7 + 24);
          goto LABEL_3;
        }
        *(_DWORD *)(result + 12) = 1;
      }
LABEL_3:
      v10 = (v10 << -(char)v7) & 0xFFFFFF;
      v7 = v14 - 8;
      goto LABEL_4;
    }
    v7 += v13;
    LOBYTE(v14) = vpx_norm[v12];
LABEL_4:
    v8 = v12 << v13;
    v9 = v10 << v14;
    *(_DWORD *)(result + 4) = v8;
    *(_DWORD *)(result + 8) = v7;
    *(_DWORD *)result = v9;
    v3 = vp9_intra_mode_tree[((v5 >> v6) & 1) + v3];
  }
  while (v6);
  return result;
}

uint64_t vp9_foreach_transformed_block_in_plane(uint64_t result, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;

  v7 = a3;
  v8 = result + 136 * (int)a3;
  v9 = **(unsigned __int8 ***)(result + 448);
  if ((_DWORD)a3)
  {
    v11 = *(_DWORD *)(v8 + 8);
    v10 = *(_DWORD *)(v8 + 12);
    v12 = v11;
    v13 = v10;
    v14 = (unsigned __int8 *)&uv_txsize_lookup + 16 * *v9 + 4 * v9[2] + 2 * v11 + v10;
  }
  else
  {
    v14 = v9 + 2;
    v11 = *(_DWORD *)(v8 + 8);
    v10 = *(_DWORD *)(v8 + 12);
    v12 = v11;
    v13 = v10;
  }
  v15 = ss_size_lookup[4 * a2 + 2 * v12 + v13];
  v16 = (*(int *)(result + 492) >> (v11 + 5)) & (*(int *)(result + 492) >> 31);
  v17 = v16 + num_4x4_blocks_wide_lookup[v15];
  v25 = ((*(int *)(result + 500) >> (v10 + 5)) & (*(int *)(result + 500) >> 31)) + num_4x4_blocks_high_lookup[v15];
  if (v25 >= 1 && v17 >= 1)
  {
    v19 = 0;
    v20 = 0;
    v21 = *v14;
    v24 = -v16 >> v21 << (2 * v21);
    v22 = 1 << v21;
    v26 = a3;
    do
    {
      v23 = 0;
      do
      {
        result = a4(v7, v20, v19, v23, v15, v21, a5);
        v7 = v26;
        v20 = (v20 + (1 << (2 * v21)));
        v23 = (v23 + v22);
      }
      while ((int)v23 < v17);
      v20 = (v24 + v20);
      v19 = (v19 + v22);
    }
    while ((int)v19 < v25);
  }
  return result;
}

uint64_t vp9_foreach_transformed_block(uint64_t result, unsigned int a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;

  v6 = a2;
  v7 = *(int *)(result + 8);
  v8 = *(int *)(result + 12);
  v9 = ss_size_lookup[4 * a2 + 2 * v7 + v8];
  v10 = **(unsigned __int8 ***)(result + 448);
  v11 = *(_DWORD *)(result + 492);
  v12 = (v11 >> (v7 + 5)) & (v11 >> 31);
  v13 = v12 + num_4x4_blocks_wide_lookup[v9];
  v14 = *(_DWORD *)(result + 500);
  v15 = ((v14 >> (v8 + 5)) & (v14 >> 31)) + num_4x4_blocks_high_lookup[v9];
  if (v15 >= 1 && v13 >= 1)
  {
    v48 = a2;
    v50 = result;
    v17 = 0;
    v18 = 0;
    v19 = v10[2];
    v52 = -v12 >> v19 << (2 * v19);
    v55 = v15;
    v20 = 1 << v19;
    do
    {
      v21 = 0;
      do
      {
        a3(0, v18, v17, v21, v9, v19, a4);
        v18 = (v18 + (1 << (2 * v19)));
        v21 = (v21 + v20);
      }
      while ((int)v21 < v13);
      v18 = (v52 + v18);
      v17 = (v17 + v20);
    }
    while ((int)v17 < v55);
    v6 = v48;
    result = v50;
    v10 = **(unsigned __int8 ***)(v50 + 448);
    v11 = *(_DWORD *)(v50 + 492);
    v14 = *(_DWORD *)(v50 + 500);
  }
  v22 = *v10;
  v24 = *(int *)(result + 144);
  v23 = *(int *)(result + 148);
  v25 = 2 * v24;
  v26 = &ss_size_lookup[4 * v6];
  v27 = v26[2 * v24 + v23];
  v28 = v10[2];
  v56 = ((v14 >> (v23 + 5)) & (v14 >> 31)) + num_4x4_blocks_high_lookup[v27];
  if (v56 >= 1)
  {
    v29 = (v11 >> (v24 + 5)) & (v11 >> 31);
    v30 = v29 + num_4x4_blocks_wide_lookup[v27];
    if (v30 >= 1)
    {
      v49 = &ss_size_lookup[4 * v6];
      v51 = result;
      v31 = 0;
      v32 = 0;
      v33 = uv_txsize_lookup[16 * v22 + 4 * v28 + v25 + v23];
      v53 = -v29 >> v33 << (2 * v33);
      v34 = 1 << v33;
      do
      {
        v35 = 0;
        do
        {
          a3(1, v32, v31, v35, v27, v33, a4);
          v32 = (v32 + (1 << (2 * v33)));
          v35 = (v35 + v34);
        }
        while ((int)v35 < v30);
        v32 = (v53 + v32);
        v31 = (v31 + v34);
      }
      while ((int)v31 < v56);
      v26 = v49;
      result = v51;
      v36 = **(unsigned __int8 ***)(v51 + 448);
      v22 = *v36;
      v28 = v36[2];
      v11 = *(_DWORD *)(v51 + 492);
      v14 = *(_DWORD *)(v51 + 500);
    }
  }
  v37 = *(int *)(result + 280);
  v38 = *(int *)(result + 284);
  v39 = v26[2 * v37 + v38];
  v40 = (v11 >> (v37 + 5)) & (v11 >> 31);
  v41 = v40 + num_4x4_blocks_wide_lookup[v39];
  v57 = ((v14 >> (v38 + 5)) & (v14 >> 31)) + num_4x4_blocks_high_lookup[v39];
  if (v57 >= 1 && v41 >= 1)
  {
    v43 = 0;
    v44 = 0;
    v45 = uv_txsize_lookup[16 * v22 + 4 * v28 + 2 * v37 + v38];
    v54 = -v40 >> v45 << (2 * v45);
    v46 = 1 << v45;
    do
    {
      v47 = 0;
      do
      {
        result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a3)(2, v44, v43, v47, v39, v45, a4);
        v44 = (v44 + (1 << (2 * v45)));
        v47 = (v47 + v46);
      }
      while ((int)v47 < v41);
      v44 = (v54 + v44);
      v43 = (v43 + v46);
    }
    while ((int)v43 < v57);
  }
  return result;
}

void vp9_set_contexts(uint64_t a1, uint64_t a2, int a3, char a4, int __c, int a6, int a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  int v17;
  size_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  void *__b;

  v10 = a6;
  v12 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v13 = (void *)(v12 + a6);
  v14 = (void *)(v11 + a7);
  v15 = 1 << a4;
  if (!__c)
  {
    v18 = v15;
    bzero(v13, v15);
LABEL_20:
    memset(v14, __c, v18);
    return;
  }
  v17 = *(_DWORD *)(a1 + 492);
  __b = (void *)(v11 + a7);
  v30 = a7;
  v31 = *(_QWORD *)(a2 + 72);
  if (v17 < 0)
  {
    v19 = (v17 >> (*(_BYTE *)(a2 + 8) + 5)) + num_4x4_blocks_wide_lookup[a3];
    v20 = v15 + a6;
    if (v15 + a6 <= v19)
      v21 = 1 << a4;
    else
      v21 = v19 - a6;
    if (v21 >= 1)
    {
      if (v20 >= v19)
        v22 = (v17 >> (*(_BYTE *)(a2 + 8) + 5)) + num_4x4_blocks_wide_lookup[a3];
      else
        v22 = v15 + a6;
      memset(v13, __c, (v22 + ~a6) + 1);
    }
    if (v21 < v15)
    {
      if (v20 >= v19)
        v23 = v19;
      else
        v23 = v20;
      bzero((void *)(v12 + v10 + v21), (v20 + ~v23) + 1);
    }
  }
  else
  {
    memset(v13, __c, v15);
  }
  v24 = *(_DWORD *)(a1 + 500);
  if ((v24 & 0x80000000) == 0)
  {
    v18 = v15;
    v14 = __b;
    goto LABEL_20;
  }
  v25 = (v24 >> (*(_BYTE *)(a2 + 12) + 5)) + num_4x4_blocks_high_lookup[a3];
  v26 = v15 + a7;
  if (v15 + a7 <= v25)
    v27 = v15;
  else
    v27 = v25 - a7;
  if (v27 >= 1)
  {
    if (v26 >= v25)
      v28 = v25;
    else
      v28 = v15 + a7;
    memset(__b, __c, (v28 + ~a7) + 1);
  }
  if (v27 < v15)
  {
    if (v26 >= v25)
      v29 = v25;
    else
      v29 = v15 + a7;
    bzero((void *)(v31 + v30 + v27), (v26 + ~v29) + 1);
  }
}

uint64_t vp9_setup_pc_tree(uint64_t a1, uint64_t a2)
{
  unint64_t *v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64x2_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  int64x2_t v27;

  v3 = (unint64_t *)(a2 + 114256);
  v4 = *(_QWORD *)(a2 + 114256);
  if (v4)
    free(*(void **)(v4 - 8));
  v5 = malloc_type_malloc(0xD417uLL, 0x74AD08B5uLL);
  if (v5)
  {
    v6 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v6 - 8) = v5;
    if (v6)
    {
      bzero((void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0), 0xD400uLL);
      *v3 = v6;
      v7 = v3[1];
      if (!v7)
        goto LABEL_9;
      goto LABEL_8;
    }
  }
  *v3 = 0;
  vpx_internal_error(a1, 2, "Failed to allocate td->leaf_tree");
  v7 = v3[1];
  if (v7)
LABEL_8:
    free(*(void **)(v7 - 8));
LABEL_9:
  v8 = malloc_type_malloc(0x5927FuLL, 0x74AD08B5uLL);
  if (v8 && (v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v9 - 8) = v8, v9))
  {
    bzero((void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0), 0x59268uLL);
    v3[1] = v9;
  }
  else
  {
    v3[1] = 0;
    vpx_internal_error(a1, 2, "Failed to allocate td->pc_tree");
    v9 = v3[1];
  }
  v10 = 0;
  v11 = *v3;
  v12 = 64;
  do
  {
    alloc_mode_context(a1, 1, *v3 + v10);
    v10 += 848;
    --v12;
  }
  while (v12);
  v13 = 0;
  v14 = 64;
  do
  {
    v15 = v3[1] + v13;
    *(_BYTE *)(v15 + 8) = 3;
    alloc_mode_context(a1, 4, v15 + 16);
    alloc_mode_context(a1, 2, v15 + 864);
    alloc_mode_context(a1, 2, v15 + 2560);
    bzero((void *)(v15 + 1712), 0x350uLL);
    bzero((void *)(v15 + 3408), 0x350uLL);
    *(_QWORD *)(v15 + 4256) = v11;
    *(_QWORD *)(v15 + 4264) = v11;
    *(_QWORD *)(v15 + 4272) = v11;
    *(_QWORD *)(v15 + 4280) = v11;
    v11 += 848;
    v13 += 4296;
    --v14;
  }
  while (v14);
  v16 = 16;
  v17 = 274952;
  do
  {
    v18 = v3[1] + v17;
    alloc_mode_context(a1, 16, v18 + 8);
    alloc_mode_context(a1, 8, v18 + 856);
    alloc_mode_context(a1, 8, v18 + 2552);
    alloc_mode_context(a1, 8, v18 + 1704);
    alloc_mode_context(a1, 8, v18 + 3400);
    *(_BYTE *)v18 = 6;
    *(_QWORD *)(v18 + 4248) = v9;
    *(_QWORD *)(v18 + 4256) = v9 + 4296;
    v19 = v9 + 12888;
    *(_QWORD *)(v18 + 4264) = v9 + 8592;
    v9 += 17184;
    v17 += 4296;
    *(_QWORD *)(v18 + 4272) = v19;
    --v16;
  }
  while (v16);
  v20 = v3[1];
  alloc_mode_context(a1, 64, v20 + 343696);
  alloc_mode_context(a1, 32, v20 + 344544);
  alloc_mode_context(a1, 32, v20 + 346240);
  alloc_mode_context(a1, 32, v20 + 345392);
  alloc_mode_context(a1, 32, v20 + 347088);
  *(_BYTE *)(v20 + 343688) = 9;
  *(_QWORD *)(v20 + 347936) = v9;
  *(_QWORD *)(v20 + 347944) = v9 + 4296;
  v27 = vdupq_n_s64(v9 - 17184);
  *(_QWORD *)(v20 + 347952) = v9 + 8592;
  *(_QWORD *)(v20 + 347960) = v9 + 12888;
  v21 = v3[1];
  alloc_mode_context(a1, 64, v21 + 347992);
  alloc_mode_context(a1, 32, v21 + 348840);
  alloc_mode_context(a1, 32, v21 + 350536);
  alloc_mode_context(a1, 32, v21 + 349688);
  alloc_mode_context(a1, 32, v21 + 351384);
  *(_BYTE *)(v21 + 347984) = 9;
  *(int64x2_t *)(v21 + 352232) = vaddq_s64(v27, (int64x2_t)xmmword_208F461A0);
  *(int64x2_t *)(v21 + 352248) = vaddq_s64(v27, (int64x2_t)xmmword_208F461B0);
  v22 = (int64x2_t *)v3[1];
  alloc_mode_context(a1, 64, (uint64_t)v22[22018].i64);
  alloc_mode_context(a1, 32, (uint64_t)v22[22071].i64);
  alloc_mode_context(a1, 32, (uint64_t)v22[22177].i64);
  alloc_mode_context(a1, 32, (uint64_t)v22[22124].i64);
  alloc_mode_context(a1, 32, (uint64_t)v22[22230].i64);
  v22[22017].i8[8] = 9;
  v22[22283] = vaddq_s64(v27, (int64x2_t)xmmword_208F461C0);
  v22[22284] = vaddq_s64(v27, (int64x2_t)xmmword_208F461D0);
  v23 = v3[1];
  alloc_mode_context(a1, 64, v23 + 356584);
  alloc_mode_context(a1, 32, v23 + 357432);
  alloc_mode_context(a1, 32, v23 + 359128);
  alloc_mode_context(a1, 32, v23 + 358280);
  alloc_mode_context(a1, 32, v23 + 359976);
  *(_BYTE *)(v23 + 356576) = 9;
  *(_QWORD *)(v23 + 360824) = v9 + 51552;
  *(_QWORD *)(v23 + 360832) = v9 + 55848;
  *(_QWORD *)(v23 + 360840) = v9 + 60144;
  *(_QWORD *)(v23 + 360848) = v9 + 64440;
  v24 = v3[1];
  alloc_mode_context(a1, 256, v24 + 360880);
  alloc_mode_context(a1, 128, v24 + 361728);
  alloc_mode_context(a1, 128, v24 + 363424);
  alloc_mode_context(a1, 128, v24 + 362576);
  result = alloc_mode_context(a1, 128, v24 + 364272);
  *(_BYTE *)(v24 + 360872) = 12;
  *(_QWORD *)(v24 + 365120) = v9 + 68736;
  *(_QWORD *)(v24 + 365128) = v9 + 73032;
  *(_QWORD *)(v24 + 365136) = v9 + 77328;
  *(_QWORD *)(v24 + 365144) = v9 + 81624;
  v26 = v3[1] + 360864;
  v3[2] = v26;
  *(_DWORD *)(v26 + 736) = 2;
  return result;
}

uint64_t alloc_mode_context(uint64_t a1, int a2, uint64_t a3)
{
  size_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  unint64_t *v12;
  uint64_t result;
  unint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t *v17;
  void *v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  void *v22;
  unint64_t v23;
  unint64_t *v24;
  void *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  _QWORD *v31;
  void *v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  void *v36;
  unint64_t v37;
  _QWORD *v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  unint64_t v47;
  void *v48;
  unint64_t v49;
  void *v50;
  unint64_t v51;
  _QWORD *v52;

  if (a2 <= 4)
    v5 = 4;
  else
    v5 = a2;
  *(_DWORD *)(a3 + 692) = v5;
  v6 = malloc_type_malloc(v5 + 23, 0x74AD08B5uLL);
  if (v6 && (v7 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v7 - 8) = v6, v7))
  {
    bzero((void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0), v5);
    *(_QWORD *)(a3 + 104) = v7;
  }
  else
  {
    *(_QWORD *)(a3 + 104) = 0;
    vpx_internal_error(a1, 2, "Failed to allocate ctx->zcoeff_blk");
  }
  v8 = 0;
  v9 = 0;
  v10 = (64 * (_DWORD)v5) | 0x27;
  v11 = 2 * v5 + 39;
  do
  {
    if (v10 >= 0x10000000001)
    {
      *(_QWORD *)(a3 + v8 + 112) = 0;
      v16 = (unint64_t *)(a3 + v8 + 112);
      vpx_internal_error(a1, 2, "Failed to allocate ctx->coeff[i][k]");
      *(_QWORD *)(a3 + v8 + 184) = 0;
      v17 = (unint64_t *)(a3 + v8 + 184);
      vpx_internal_error(a1, 2, "Failed to allocate ctx->qcoeff[i][k]");
LABEL_29:
      v24 = (unint64_t *)(a3 + v8 + 256);
      *v24 = 0;
      goto LABEL_30;
    }
    v18 = malloc_type_malloc(v10, 0x74AD08B5uLL);
    if (v18)
    {
      v19 = ((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(v19 - 8) = v18;
      v16 = (unint64_t *)(a3 + 112 + v8);
      *v16 = v19;
      if (v19)
      {
        v20 = malloc_type_malloc(v10, 0x74AD08B5uLL);
        if (!v20)
          goto LABEL_26;
        goto LABEL_17;
      }
      v16 = (unint64_t *)(a3 + 112 + 24 * v9);
    }
    else
    {
      *(_QWORD *)(a3 + v8 + 112) = 0;
      v16 = (unint64_t *)(a3 + v8 + 112);
    }
    vpx_internal_error(a1, 2, "Failed to allocate ctx->coeff[i][k]");
    v20 = malloc_type_malloc(v10, 0x74AD08B5uLL);
    if (!v20)
    {
LABEL_26:
      *(_QWORD *)(a3 + v8 + 184) = 0;
      v17 = (unint64_t *)(a3 + v8 + 184);
      goto LABEL_28;
    }
LABEL_17:
    v21 = ((unint64_t)v20 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v21 - 8) = v20;
    v17 = (unint64_t *)(a3 + 184 + v8);
    *v17 = v21;
    if (v21)
    {
      v22 = malloc_type_malloc(v10, 0x74AD08B5uLL);
      if (!v22)
        goto LABEL_29;
      goto LABEL_19;
    }
    v17 = (unint64_t *)(a3 + 184 + 24 * v9);
LABEL_28:
    vpx_internal_error(a1, 2, "Failed to allocate ctx->qcoeff[i][k]");
    v22 = malloc_type_malloc(v10, 0x74AD08B5uLL);
    if (!v22)
      goto LABEL_29;
LABEL_19:
    v23 = ((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v23 - 8) = v22;
    v24 = (unint64_t *)(a3 + 256 + v8);
    *v24 = v23;
    if (v23)
    {
      v25 = malloc_type_malloc(v11, 0x74AD08B5uLL);
      if (!v25)
        goto LABEL_31;
      goto LABEL_21;
    }
    v24 = (unint64_t *)(a3 + 256 + 24 * v9);
LABEL_30:
    vpx_internal_error(a1, 2, "Failed to allocate ctx->dqcoeff[i][k]");
    v25 = malloc_type_malloc(v11, 0x74AD08B5uLL);
    if (!v25)
    {
LABEL_31:
      v27 = (unint64_t *)(a3 + v8 + 328);
      *v27 = 0;
      goto LABEL_32;
    }
LABEL_21:
    v26 = ((unint64_t)v25 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v26 - 8) = v25;
    *(_QWORD *)(a3 + v8 + 328) = v26;
    if (v26)
      goto LABEL_33;
    v27 = (unint64_t *)(a3 + 24 * v9 + 328);
LABEL_32:
    vpx_internal_error(a1, 2, "Failed to allocate ctx->eobs[i][k]");
    v26 = *v27;
LABEL_33:
    v28 = *v16;
    v29 = (_QWORD *)(a3 + v8);
    v29[50] = v28;
    v29[59] = *v17;
    v29[68] = *v24;
    v29[77] = v26;
    if (v10 >= 0x10000000001)
    {
      v29[15] = 0;
      v30 = v29 + 15;
      vpx_internal_error(a1, 2, "Failed to allocate ctx->coeff[i][k]");
      v29[24] = 0;
      v31 = v29 + 24;
      vpx_internal_error(a1, 2, "Failed to allocate ctx->qcoeff[i][k]");
LABEL_50:
      v38 = (_QWORD *)(a3 + v8 + 264);
      *v38 = 0;
      goto LABEL_51;
    }
    v32 = malloc_type_malloc(v10, 0x74AD08B5uLL);
    if (v32)
    {
      v33 = ((unint64_t)v32 + 39) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(v33 - 8) = v32;
      *(_QWORD *)(a3 + v8 + 120) = v33;
      v30 = (uint64_t *)(a3 + v8 + 120);
      if (v33)
      {
        v34 = malloc_type_malloc(v10, 0x74AD08B5uLL);
        if (!v34)
          goto LABEL_47;
        goto LABEL_38;
      }
      v30 = (uint64_t *)(a3 + 24 * v9 + 120);
    }
    else
    {
      *(_QWORD *)(a3 + v8 + 120) = 0;
      v30 = (uint64_t *)(a3 + v8 + 120);
    }
    vpx_internal_error(a1, 2, "Failed to allocate ctx->coeff[i][k]");
    v34 = malloc_type_malloc(v10, 0x74AD08B5uLL);
    if (!v34)
    {
LABEL_47:
      *(_QWORD *)(a3 + v8 + 192) = 0;
      v31 = (_QWORD *)(a3 + v8 + 192);
      goto LABEL_49;
    }
LABEL_38:
    v35 = ((unint64_t)v34 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v35 - 8) = v34;
    *(_QWORD *)(a3 + v8 + 192) = v35;
    v31 = (_QWORD *)(a3 + v8 + 192);
    if (v35)
    {
      v36 = malloc_type_malloc(v10, 0x74AD08B5uLL);
      if (!v36)
        goto LABEL_50;
      goto LABEL_40;
    }
    v31 = (_QWORD *)(a3 + 24 * v9 + 192);
LABEL_49:
    vpx_internal_error(a1, 2, "Failed to allocate ctx->qcoeff[i][k]");
    v36 = malloc_type_malloc(v10, 0x74AD08B5uLL);
    if (!v36)
      goto LABEL_50;
LABEL_40:
    v37 = ((unint64_t)v36 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v37 - 8) = v36;
    *(_QWORD *)(a3 + v8 + 264) = v37;
    if (v37)
    {
      v38 = (_QWORD *)(a3 + v8 + 264);
      v39 = malloc_type_malloc(v11, 0x74AD08B5uLL);
      if (!v39)
        goto LABEL_42;
      goto LABEL_52;
    }
    v38 = (_QWORD *)(a3 + 24 * v9 + 264);
LABEL_51:
    vpx_internal_error(a1, 2, "Failed to allocate ctx->dqcoeff[i][k]");
    v39 = malloc_type_malloc(v11, 0x74AD08B5uLL);
    if (!v39)
    {
LABEL_42:
      v40 = (unint64_t *)(a3 + v8 + 336);
      *v40 = 0;
      goto LABEL_54;
    }
LABEL_52:
    v41 = ((unint64_t)v39 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v41 - 8) = v39;
    *(_QWORD *)(a3 + v8 + 336) = v41;
    if (v41)
      goto LABEL_55;
    v40 = (unint64_t *)(a3 + 24 * v9 + 336);
LABEL_54:
    vpx_internal_error(a1, 2, "Failed to allocate ctx->eobs[i][k]");
    v41 = *v40;
LABEL_55:
    v42 = *v30;
    v43 = (_QWORD *)(a3 + v8);
    v43[51] = v42;
    v43[60] = *v31;
    v43[69] = *v38;
    v43[78] = v41;
    if (v10 >= 0x10000000001)
    {
      v43[16] = 0;
      v44 = v43 + 16;
      vpx_internal_error(a1, 2, "Failed to allocate ctx->coeff[i][k]");
      v43[25] = 0;
      v45 = v43 + 25;
      vpx_internal_error(a1, 2, "Failed to allocate ctx->qcoeff[i][k]");
LABEL_72:
      v52 = (_QWORD *)(a3 + v8 + 272);
      *v52 = 0;
      goto LABEL_73;
    }
    v46 = malloc_type_malloc(v10, 0x74AD08B5uLL);
    if (v46)
    {
      v47 = ((unint64_t)v46 + 39) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(v47 - 8) = v46;
      *(_QWORD *)(a3 + v8 + 128) = v47;
      v44 = (_QWORD *)(a3 + v8 + 128);
      if (v47)
      {
        v48 = malloc_type_malloc(v10, 0x74AD08B5uLL);
        if (!v48)
          goto LABEL_69;
        goto LABEL_60;
      }
      v44 = (_QWORD *)(a3 + 24 * v9 + 128);
    }
    else
    {
      *(_QWORD *)(a3 + v8 + 128) = 0;
      v44 = (_QWORD *)(a3 + v8 + 128);
    }
    vpx_internal_error(a1, 2, "Failed to allocate ctx->coeff[i][k]");
    v48 = malloc_type_malloc(v10, 0x74AD08B5uLL);
    if (!v48)
    {
LABEL_69:
      *(_QWORD *)(a3 + v8 + 200) = 0;
      v45 = (_QWORD *)(a3 + v8 + 200);
      goto LABEL_71;
    }
LABEL_60:
    v49 = ((unint64_t)v48 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v49 - 8) = v48;
    *(_QWORD *)(a3 + v8 + 200) = v49;
    v45 = (_QWORD *)(a3 + v8 + 200);
    if (v49)
    {
      v50 = malloc_type_malloc(v10, 0x74AD08B5uLL);
      if (!v50)
        goto LABEL_72;
      goto LABEL_62;
    }
    v45 = (_QWORD *)(a3 + 24 * v9 + 200);
LABEL_71:
    vpx_internal_error(a1, 2, "Failed to allocate ctx->qcoeff[i][k]");
    v50 = malloc_type_malloc(v10, 0x74AD08B5uLL);
    if (!v50)
      goto LABEL_72;
LABEL_62:
    v51 = ((unint64_t)v50 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v51 - 8) = v50;
    *(_QWORD *)(a3 + v8 + 272) = v51;
    if (v51)
    {
      v52 = (_QWORD *)(a3 + v8 + 272);
      result = (uint64_t)malloc_type_malloc(v11, 0x74AD08B5uLL);
      if (!result)
        goto LABEL_9;
      goto LABEL_74;
    }
    v52 = (_QWORD *)(a3 + 24 * v9 + 272);
LABEL_73:
    vpx_internal_error(a1, 2, "Failed to allocate ctx->dqcoeff[i][k]");
    result = (uint64_t)malloc_type_malloc(v11, 0x74AD08B5uLL);
    if (!result)
    {
LABEL_9:
      v12 = (unint64_t *)(a3 + v8 + 344);
      *v12 = 0;
LABEL_10:
      result = vpx_internal_error(a1, 2, "Failed to allocate ctx->eobs[i][k]");
      v14 = *v12;
      goto LABEL_11;
    }
LABEL_74:
    v14 = (result + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v14 - 8) = result;
    *(_QWORD *)(a3 + v8 + 344) = v14;
    if (!v14)
    {
      v12 = (unint64_t *)(a3 + 24 * v9 + 344);
      goto LABEL_10;
    }
LABEL_11:
    v15 = (_QWORD *)(a3 + v8);
    v15[52] = *v44;
    v15[61] = *v45;
    v15[70] = *v52;
    v15[79] = v14;
    ++v9;
    v8 += 24;
  }
  while (v8 != 72);
  return result;
}

void vp9_free_pc_tree(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (a1)
  {
    v1 = (_QWORD *)(a1 + 114256);
    if (*(_QWORD *)(a1 + 114256))
    {
      v2 = 0;
      v3 = 64;
      do
      {
        free_mode_context((_QWORD *)(*v1 + v2));
        v2 += 848;
        --v3;
      }
      while (v3);
      if (*v1)
        free(*(void **)(*v1 - 8));
      *v1 = 0;
    }
    if (v1[1])
    {
      v4 = 85;
      v5 = 3408;
      do
      {
        v6 = (_QWORD *)(v1[1] + v5);
        free_mode_context(v6 - 424);
        free_mode_context(v6 - 318);
        free_mode_context(v6 - 212);
        free_mode_context(v6 - 106);
        free_mode_context(v6);
        v5 += 4296;
        --v4;
      }
      while (v4);
      v7 = v1[1];
      if (v7)
        free(*(void **)(v7 - 8));
      v1[1] = 0;
    }
  }
}

void free_mode_context(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = a1[13];
  if (v2)
    free(*(void **)(v2 - 8));
  a1[13] = 0;
  v3 = a1[14];
  if (v3)
    free(*(void **)(v3 - 8));
  a1[14] = 0;
  v4 = a1[23];
  if (v4)
    free(*(void **)(v4 - 8));
  a1[23] = 0;
  v5 = a1[32];
  if (v5)
    free(*(void **)(v5 - 8));
  a1[32] = 0;
  v6 = a1[41];
  if (v6)
    free(*(void **)(v6 - 8));
  a1[41] = 0;
  v7 = a1[15];
  if (v7)
    free(*(void **)(v7 - 8));
  a1[15] = 0;
  v8 = a1[24];
  if (v8)
    free(*(void **)(v8 - 8));
  a1[24] = 0;
  v9 = a1[33];
  if (v9)
    free(*(void **)(v9 - 8));
  a1[33] = 0;
  v10 = a1[42];
  if (v10)
    free(*(void **)(v10 - 8));
  a1[42] = 0;
  v11 = a1[16];
  if (v11)
    free(*(void **)(v11 - 8));
  a1[16] = 0;
  v12 = a1[25];
  if (v12)
    free(*(void **)(v12 - 8));
  a1[25] = 0;
  v13 = a1[34];
  if (v13)
    free(*(void **)(v13 - 8));
  a1[34] = 0;
  v14 = a1[43];
  if (v14)
    free(*(void **)(v14 - 8));
  a1[43] = 0;
  v15 = a1[17];
  if (v15)
    free(*(void **)(v15 - 8));
  a1[17] = 0;
  v16 = a1[26];
  if (v16)
    free(*(void **)(v16 - 8));
  a1[26] = 0;
  v17 = a1[35];
  if (v17)
    free(*(void **)(v17 - 8));
  a1[35] = 0;
  v18 = a1[44];
  if (v18)
    free(*(void **)(v18 - 8));
  a1[44] = 0;
  v19 = a1[18];
  if (v19)
    free(*(void **)(v19 - 8));
  a1[18] = 0;
  v20 = a1[27];
  if (v20)
    free(*(void **)(v20 - 8));
  a1[27] = 0;
  v21 = a1[36];
  if (v21)
    free(*(void **)(v21 - 8));
  a1[36] = 0;
  v22 = a1[45];
  if (v22)
    free(*(void **)(v22 - 8));
  a1[45] = 0;
  v23 = a1[19];
  if (v23)
    free(*(void **)(v23 - 8));
  a1[19] = 0;
  v24 = a1[28];
  if (v24)
    free(*(void **)(v24 - 8));
  a1[28] = 0;
  v25 = a1[37];
  if (v25)
    free(*(void **)(v25 - 8));
  a1[37] = 0;
  v26 = a1[46];
  if (v26)
    free(*(void **)(v26 - 8));
  a1[46] = 0;
  v27 = a1[20];
  if (v27)
    free(*(void **)(v27 - 8));
  a1[20] = 0;
  v28 = a1[29];
  if (v28)
    free(*(void **)(v28 - 8));
  a1[29] = 0;
  v29 = a1[38];
  if (v29)
    free(*(void **)(v29 - 8));
  a1[38] = 0;
  v30 = a1[47];
  if (v30)
    free(*(void **)(v30 - 8));
  a1[47] = 0;
  v31 = a1[21];
  if (v31)
    free(*(void **)(v31 - 8));
  a1[21] = 0;
  v32 = a1[30];
  if (v32)
    free(*(void **)(v32 - 8));
  a1[30] = 0;
  v33 = a1[39];
  if (v33)
    free(*(void **)(v33 - 8));
  a1[39] = 0;
  v34 = a1[48];
  if (v34)
    free(*(void **)(v34 - 8));
  a1[48] = 0;
  v35 = a1[22];
  if (v35)
    free(*(void **)(v35 - 8));
  a1[22] = 0;
  v36 = a1[31];
  if (v36)
    free(*(void **)(v36 - 8));
  a1[31] = 0;
  v37 = a1[40];
  if (v37)
    free(*(void **)(v37 - 8));
  a1[40] = 0;
  v38 = a1[49];
  if (v38)
    free(*(void **)(v38 - 8));
  a1[49] = 0;
}

uint64_t cost_0(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v8 = result;
  do
  {
    v9 = a4;
    v10 = *(unsigned __int8 *)(a3 + ((unint64_t)a4 >> 1));
    v11 = *(char *)(a2 + a4);
    if (v11 > 0)
      result = cost_0(v8, a2, a3);
    else
      *(_DWORD *)(v8 + 4 * -v11) = a5 + vp9_prob_cost[v10];
    a5 += vp9_prob_cost[256 - v10];
    a4 = *(char *)(v9 + a2 + 1);
  }
  while ((int)a4 > 0);
  *(_DWORD *)(v8 + 4 * -a4) = a5;
  return result;
}

uint64_t encoder_init(_QWORD *a1)
{
  uint64_t v1;
  void *v4;
  unint64_t v5;
  void *v6;
  unint64_t v7;
  const void *v8;
  _DWORD *compressor;
  uint64_t v10;

  if (a1[6])
    return 0;
  v4 = malloc_type_malloc(0x8F0FuLL, 0x74AD08B5uLL);
  if (!v4)
    return 2;
  v5 = ((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 - 8) = v4;
  if (!v5)
    return 2;
  bzero((void *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0), 0x8EF8uLL);
  a1[6] = v5;
  *(_QWORD *)(v5 + 8) = a1[4];
  *(_DWORD *)(v5 + 208) = 1;
  v6 = malloc_type_malloc(0xABFuLL, 0x74AD08B5uLL);
  if (!v6 || (v7 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v7 - 8) = v6, !v7))
  {
    *(_QWORD *)(v5 + 36568) = 0;
    return 2;
  }
  bzero((void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0), 0xAA8uLL);
  *(_QWORD *)(v5 + 36568) = v7;
  v8 = (const void *)a1[5];
  if (v8)
  {
    memcpy((void *)(v5 + 216), v8, 0x1F8uLL);
    a1[5] = v5 + 216;
  }
  *(_OWORD *)(v5 + 784) = xmmword_208F46640;
  *(_OWORD *)(v5 + 800) = unk_208F46650;
  *(_OWORD *)(v5 + 816) = xmmword_208F46660;
  *(_OWORD *)(v5 + 832) = unk_208F46670;
  *(_OWORD *)(v5 + 720) = default_extra_cfg;
  *(_OWORD *)(v5 + 736) = unk_208F46610;
  *(_OWORD *)(v5 + 752) = xmmword_208F46620;
  *(_OWORD *)(v5 + 768) = unk_208F46630;
  pthread_once(&once_lock_4, (void (*)(void))initialize_enc_0);
  v1 = validate_config_0((const char **)v5, (_DWORD *)(v5 + 216), (_DWORD *)(v5 + 720));
  if ((_DWORD)v1)
    return v1;
  *(_BYTE *)(v5 + 856) = 0;
  *(_DWORD *)(v5 + 36592) = -1;
  set_encoder_config(v5 + 864, v5 + 216, v5 + 720);
  *(_DWORD *)(v5 + 1264) = (*((_DWORD *)a1 + 8) >> 18) & 1;
  compressor = vp9_create_compressor((_QWORD *)(v5 + 864), *(_QWORD *)(v5 + 36568));
  *(_QWORD *)(v5 + 1304) = compressor;
  v10 = 2 * (compressor == 0);
  set_twopass_params_from_config((_DWORD *)(v5 + 216), (uint64_t)compressor);
  return v10;
}

uint64_t encoder_destroy(uint64_t a1)
{
  uint64_t v2;
  double v3;

  v2 = a1 + 36568;
  free(*(void **)(a1 + 1312));
  free(*(void **)(v2 + 8));
  vp9_remove_compressor(*(_QWORD *)(a1 + 1304), v3);
  if (*(_QWORD *)v2)
    free(*(void **)(*(_QWORD *)v2 - 8));
  free(*(void **)(a1 - 8));
  return 0;
}

uint64_t encoder_encode(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  const char *v12;
  int v13;
  unsigned int v14;
  char v15;
  unint64_t v16;
  void *v17;
  void *v18;
  int v19;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int v49;
  uint64_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void (*v64)(__int128 *, _QWORD);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  void (*v88)(__int128 *, _QWORD);
  unsigned int v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v117 = 0;
  v116 = a5;
  v115 = a3;
  v5 = *(_QWORD *)(a1 + 1304);
  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  v127 = 0u;
  v128 = 0u;
  v125 = 0u;
  v126 = 0u;
  v123 = 0u;
  v124 = 0u;
  if (!v5)
    return 8;
  v9 = a1 + 36544;
  v10 = (_DWORD *)(v5 + 747480);
  *(_QWORD *)(v5 + 747500) = *(_QWORD *)(a1 + 872);
  if (a2)
  {
    v11 = *a2;
    v12 = "Invalid image format. Only YV12, I420, I422, I444, I440, NV12 images are supported.";
    if (*a2 > 768)
    {
      if ((v11 - 2309) >= 3)
      {
        if (v11 != 769 && v11 != 2306)
          goto LABEL_19;
      }
      else if ((*(_DWORD *)(a1 + 224) | 2) != 3)
      {
        v12 = "Invalid image format. 16-bit I422, I444, I440 images are not supported in profile.";
        goto LABEL_19;
      }
    }
    else if ((v11 - 261) >= 3)
    {
      if (v11 != 258 && v11 != 265)
        goto LABEL_19;
    }
    else if (*(_DWORD *)(a1 + 224) != 1)
    {
      v12 = "Invalid image format. I422, I444, I440 images are not supported in profile.";
LABEL_19:
      *(_QWORD *)a1 = v12;
      v117 = 8;
      goto LABEL_49;
    }
    if (a2[6] == *(_DWORD *)(a1 + 228) && a2[7] == *(_DWORD *)(a1 + 232))
    {
      v117 = 0;
      v13 = 12;
      switch(v11)
      {
        case 258:
        case 265:
          break;
        case 259:
        case 260:
        case 264:
LABEL_26:
          v13 = 0;
          break;
        case 261:
        case 263:
          v13 = 16;
          break;
        case 262:
LABEL_24:
          v13 = 24;
          break;
        default:
          v13 = v11 - 2306;
          switch(v11)
          {
            case 2306:
              goto LABEL_24;
            case 2307:
            case 2308:
              goto LABEL_26;
            case 2309:
            case 2311:
              v13 = 32;
              break;
            case 2310:
              v13 = 48;
              break;
            default:
              if (v11 != 769)
                goto LABEL_26;
              break;
          }
          break;
      }
      v14 = (*(_DWORD *)(a1 + 232) * *(_DWORD *)(a1 + 228) * v13) >> 3;
      if (*(_DWORD *)(v5 + 850432))
        v15 = 3;
      else
        v15 = 1;
      LODWORD(v16) = v14 << v15;
      if (v16 <= 0x2000)
        v16 = 0x2000;
      else
        v16 = v16;
      v17 = *(void **)(a1 + 1312);
      if (!v17 || *(_QWORD *)(a1 + 1320) < v16)
      {
        *(_QWORD *)(a1 + 1320) = v16;
        free(v17);
        v18 = malloc_type_malloc(*(_QWORD *)(a1 + 1320), 0x369281ACuLL);
        *(_QWORD *)(a1 + 1312) = v18;
        if (!v18)
          return 2;
        v11 = *a2;
      }
      v19 = 1;
      if ((~v11 & 0x301) != 0 && (v11 & 0x102) != 0x102 && (v11 & 0x109) != 0x109)
      {
        if ((~v11 & 0x105) != 0)
        {
          if ((~v11 & 0x106) != 0)
            v19 = -1;
          else
            v19 = 3;
        }
        else
        {
          v19 = 2;
        }
      }
      if (v19 > *(_DWORD *)(v9 + 48))
        *(_DWORD *)(v9 + 48) = v19;
      goto LABEL_49;
    }
    v12 = "Image size must match encoder init configuration size";
    goto LABEL_19;
  }
LABEL_49:
  *(_DWORD *)(a1 + 956) = 0;
  if (*(_DWORD *)(a1 + 952) != 2)
  {
    *(_DWORD *)(a1 + 952) = 2;
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
  }
  v117 = 0;
  *(_QWORD *)(a1 + 1584) = 0x10000000000;
  if (((v116 & 0x400000) == 0 || (v116 & 0x80000) == 0) && ((v116 & 0x800000) == 0 || (v116 & 0x1000000) == 0))
  {
    v21 = (unsigned int *)(v5 + 171696);
    if (setjmp((int *)(v5 + 171788)))
    {
      *(_DWORD *)(v5 + 171784) = 0;
      v22 = *v21;
      if (*v21)
      {
        v23 = 0;
        if (*(_DWORD *)(v5 + 171700))
          v23 = v5 + 171704;
        *(_QWORD *)a1 = v23;
      }
      return v22;
    }
    *(_DWORD *)(v5 + 171784) = 1;
    if (!v117)
      vp9_apply_encoding_flags(v5, v116);
    if (*(_DWORD *)(a1 + 376) == 1)
    {
      v24 = *(_DWORD *)(a1 + 380);
      if (v24 == *(_DWORD *)(a1 + 384))
      {
        v25 = *(_DWORD *)v9 + 1;
        *(_DWORD *)v9 = v25;
        if (v25 > v24)
        {
          v116 |= 1uLL;
          *(_DWORD *)v9 = 1;
        }
      }
    }
    if (v117)
      goto LABEL_72;
    v114 = 0;
    v113 = 0;
    if ((*(_BYTE *)(a1 + 10) & 1) != 0)
      *v10 = 1;
    if (a2)
    {
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      if (*(_BYTE *)(a1 + 856))
      {
        v26 = *(_QWORD *)(a1 + 848);
      }
      else
      {
        v26 = v115;
        *(_QWORD *)(a1 + 848) = v115;
        *(_BYTE *)(a1 + 856) = 1;
      }
      if (v115 < v26)
      {
        vpx_internal_error(v5 + 171696, 8, "pts is smaller than initial pts");
        v26 = *(_QWORD *)(a1 + 848);
      }
      v115 -= v26;
      v27 = *(_QWORD *)(a1 + 904);
      if (v115 > 0x7FFFFFFFFFFFFFFFLL / v27)
      {
        vpx_internal_error(v5 + 171696, 8, "conversion of relative pts to ticks would overflow");
        v27 = *(_QWORD *)(a1 + 904);
      }
      v28 = *(int *)(a1 + 912);
      v29 = v115 * v27 / v28;
      *(_QWORD *)(v5 + 835368) = v27 / v28;
      *(_QWORD *)(v5 + 835376) = v29;
      if (a4 < 0)
        vpx_internal_error(v5 + 171696, 8, "duration is too big");
      if (v115 > (a4 ^ 0x7FFFFFFFFFFFFFFFLL))
        vpx_internal_error(v5 + 171696, 8, "relative pts + duration is too big");
      v30 = v115 + a4;
      v31 = *(_QWORD *)(a1 + 904);
      if (v30 > 0x7FFFFFFFFFFFFFFFLL / v31)
      {
        vpx_internal_error(v5 + 171696, 8, "conversion of relative pts + duration to ticks would overflow");
        v31 = *(_QWORD *)(a1 + 904);
      }
      v32 = v31 * v30 / *(int *)(a1 + 912);
      v117 = image2yuvconfig(a2, (uint64_t)&v103);
      if (vp9_receive_raw_frame(v5, *(_QWORD *)(a1 + 1560) | v116, &v103, v29, v32))
      {
        v33 = *v21;
        if (*v21)
        {
          v34 = 0;
          if (*(_DWORD *)(v5 + 171700))
            v34 = v5 + 171704;
          *(_QWORD *)a1 = v34;
        }
        v117 = v33;
      }
      *(_QWORD *)(a1 + 1560) = 0;
    }
    v35 = *(_QWORD *)(a1 + 1312);
    v36 = v35;
    v37 = *(_QWORD *)(a1 + 1320);
    v38 = *(const void **)(a1 + 1328);
    if (v38)
    {
      memmove(*(void **)(a1 + 1312), v38, *(_QWORD *)(a1 + 1336));
      *(_QWORD *)(a1 + 1328) = v35;
      v39 = *(_QWORD *)(a1 + 1336);
      v36 = v35 + v39;
      v37 -= v39;
      if (v37 < *(_QWORD *)(a1 + 1320) >> 1)
        vpx_internal_error(v5 + 171696, 1, "Compressed data buffer too small");
    }
    if ((v40 = v36, *(_DWORD *)(v5 + 190076) == 1) && !*(_DWORD *)(v5 + 747508)
      || (v41 = a2 == 0, v102 = 0, v99 = 0, v100 = 0, v101 = -1, v37 < *(_QWORD *)(a1 + 1320) >> 1))
    {
LABEL_72:
      *(_DWORD *)(v5 + 171784) = 0;
      return v117;
    }
    v98 = a1 + 1584;
    v42 = (uint64_t *)(a1 + 1328);
    v97 = (_DWORD *)(a1 + 1584);
    v43 = v40;
    v44 = v37;
    while (1)
    {
      if (vp9_get_compressed_data(v5, &v114, &v113, v43, v44, &v100, &v99, v41) == -1)
        goto LABEL_72;
      v49 = *(_DWORD *)(v5 + 747508);
      if (v113)
      {
        if (v49
          || (v106 = 0u, v107 = 0u, v104 = 0u, v105 = 0u, v103 = 0u, !*v10)
          || *(_DWORD *)(v5 + 190076) == 1
          || !*(_DWORD *)(v5 + 172976))
        {
          v50 = v113;
          v51 = 0;
          goto LABEL_120;
        }
        vpx_calc_highbd_psnr(*(_QWORD *)(v5 + 190792), *(_QWORD *)(v5 + 172024), (uint64_t)&v103, *(_DWORD *)(v5 + 74736), *(_DWORD *)(v5 + 190000), 0.0, v45, v46, v47, v48);
        v120 = v105;
        v121 = v106;
        v122 = v107;
        v118 = v103;
        v119 = v104;
        v52 = *(_DWORD *)(a1 + 1584);
        if (v52 < *(_DWORD *)(a1 + 1588))
        {
          *v97 = v52 + 1;
          v53 = v98 + 136 * v52;
          *(_QWORD *)(v53 + 8) = 3;
          v54 = v121;
          *(_OWORD *)(v53 + 48) = v120;
          *(_OWORD *)(v53 + 64) = v54;
          v55 = v119;
          *(_OWORD *)(v53 + 16) = v118;
          *(_OWORD *)(v53 + 32) = v55;
          *(_OWORD *)(v53 + 80) = v122;
          *(_OWORD *)(v53 + 96) = 0u;
          *(_OWORD *)(v53 + 112) = 0u;
          *(_OWORD *)(v53 + 128) = 0u;
        }
        v50 = v113;
        if (v113)
        {
          v51 = 0;
          goto LABEL_120;
        }
        v49 = *(_DWORD *)(v5 + 747508);
      }
      if (!v49 || !*(_DWORD *)(v5 + 834892))
        goto LABEL_104;
      v51 = 1;
      v50 = 0;
LABEL_120:
      v56 = *(_DWORD *)(v5 + 172976);
      if (v56
        && ((v57 = *(_DWORD *)(v5 + 747508), v58 = *(int *)(v5 + 747512), v59 = *(_DWORD *)(v5 + 747512), !v57)
         || v59 >= *(_DWORD *)(v5 + 747520) - 1))
      {
        LODWORD(v123) = 0;
        v72 = *(_QWORD *)(a1 + 904);
        v73 = *(int *)(a1 + 912);
        if (v72 >= 0)
          v74 = *(_QWORD *)(a1 + 904);
        else
          v74 = v72 + 1;
        v75 = (v74 >> 1) - (v72 > 1);
        *((_QWORD *)&v124 + 1) = *(_QWORD *)(a1 + 848) + (v75 + v100 * v73) / v72;
        *(_QWORD *)&v125 = (v75 + (v99 - v100) * v73) / v72;
        if ((v114 & 1) != 0
          || (v76 = v57, v77 = v114 << 16, v76)
          && *(_DWORD *)(v5 + 6880 * (*(int *)(v5 + 747516) + *(int *)(v5 + 747524) * (uint64_t)v59) + 758668))
        {
          v77 = (v114 << 16) | 1;
        }
        if (*(_DWORD *)(v5 + 747484))
          v78 = v77 | 2;
        else
          v78 = v77;
        DWORD2(v125) = v78;
        v79 = (char *)&v123 + 4 * v58 + 8;
        *((_DWORD *)v79 + 10) = *(_DWORD *)(v5 + 171988);
        *((_DWORD *)v79 + 15) = *(_DWORD *)(v5 + 171992);
        *((_BYTE *)&v128 + v58 + 8) = 1 - *(_BYTE *)(v5 + 4 * v58 + 834948);
        v80 = *v42;
        if (*v42)
        {
          if ((v51 & 1) == 0)
          {
            v81 = *(int *)(a1 + 1344);
            *(_DWORD *)(a1 + 1344) = v81 + 1;
            *(_QWORD *)(a1 + 8 * v81 + 1352) = v50;
          }
          *(_QWORD *)(a1 + 1416) |= v50;
          v82 = *(_QWORD *)(a1 + 1336) + v50;
          *(_QWORD *)(a1 + 1336) = v82;
          if (*(_QWORD *)(v9 + 8))
          {
            v83 = v80;
            v84 = v82;
            v85 = v83;
          }
          else
          {
            v87 = write_superframe_index(a1);
            v50 = v113 + v87;
            v113 = v50;
            v85 = *(_QWORD *)(a1 + 1328);
            v84 = *(_QWORD *)(a1 + 1336);
          }
          *((_QWORD *)&v123 + 1) = v85;
          *(_QWORD *)&v124 = v84;
          *(_QWORD *)(a1 + 1416) = 0;
          *v42 = 0;
          *(_QWORD *)(a1 + 1336) = 0;
          v86 = v50;
          *(_DWORD *)(a1 + 1344) = 0;
        }
        else
        {
          *((_QWORD *)&v123 + 1) = v43;
          *(_QWORD *)&v124 = v50;
          v86 = v50;
        }
        HIDWORD(v125) = -1;
        v88 = *(void (**)(__int128 *, _QWORD))(v9 + 8);
        if (v88)
        {
          v88(&v123, *(_QWORD *)(v9 + 16));
          v86 = v113;
        }
        else
        {
          v89 = *(_DWORD *)(a1 + 1584);
          if (v89 < *(_DWORD *)(a1 + 1588))
          {
            v90 = v127;
            v91 = v98 + 136 * v89;
            *(_OWORD *)(v91 + 88) = v128;
            v92 = v130;
            *(_OWORD *)(v91 + 104) = v129;
            *(_OWORD *)(v91 + 120) = v92;
            v93 = v123;
            *(_OWORD *)(v91 + 24) = v124;
            v94 = v126;
            *(_OWORD *)(v91 + 40) = v125;
            *(_OWORD *)(v91 + 56) = v94;
            *(_OWORD *)(v91 + 72) = v90;
            *v97 = v89 + 1;
            *(_QWORD *)(v91 + 136) = v131;
            *(_OWORD *)(v91 + 8) = v93;
          }
        }
        v95 = v86;
        v96 = v43 + v86;
        v44 -= v95;
        if (!*(_DWORD *)(v5 + 747508) || *(_DWORD *)(v5 + 190076))
        {
          v43 = v96;
        }
        else
        {
          v43 = v96;
          if (*(_DWORD *)(v5 + 747512) == *(_DWORD *)(v5 + 747520) - 1)
            goto LABEL_72;
        }
      }
      else
      {
        v60 = *v42;
        if (!*v42)
        {
          *v42 = v43;
          v60 = v43;
        }
        *(_QWORD *)(a1 + 1336) += v50;
        if ((v51 & 1) == 0)
        {
          v61 = *(int *)(a1 + 1344);
          *(_DWORD *)(a1 + 1344) = v61 + 1;
          *(_QWORD *)(a1 + 8 * v61 + 1352) = v50;
        }
        *(_QWORD *)(a1 + 1416) |= v50;
        v43 += v50;
        v44 -= v50;
        v62 = *(int *)(v5 + 747512);
        v63 = (char *)&v123 + 4 * v62 + 8;
        *((_DWORD *)v63 + 10) = *(_DWORD *)(v5 + 171988);
        *((_DWORD *)v63 + 15) = *(_DWORD *)(v5 + 171992);
        *((_BYTE *)&v128 + v62 + 8) = 1 - *(_BYTE *)(v5 + 4 * v62 + 834948);
        v64 = *(void (**)(__int128 *, _QWORD))(v9 + 8);
        if (v64)
        {
          LODWORD(v123) = 0;
          v65 = *(_QWORD *)(a1 + 904);
          v66 = *(int *)(a1 + 912);
          if (v65 >= 0)
            v67 = *(_QWORD *)(a1 + 904);
          else
            v67 = v65 + 1;
          v68 = (v67 >> 1) - (v65 > 1);
          *((_QWORD *)&v124 + 1) = *(_QWORD *)(a1 + 848) + (v68 + v100 * v66) / v65;
          *(_QWORD *)&v125 = (v68 + (v99 - v100) * v66) / v65;
          if ((v114 & 1) != 0
            || (v69 = v114 << 16, *(_DWORD *)(v5 + 747508))
            && *(_DWORD *)(v5 + 6880 * (*(int *)(v5 + 747516) + *(int *)(v5 + 747524) * (uint64_t)(int)v62) + 758668))
          {
            v69 = (v114 << 16) | 1;
          }
          v70 = v56 == 0;
          v71 = v69 | 4;
          if (!v70)
            v71 = v69;
          if (*(_DWORD *)(v5 + 747484))
            v71 |= 2u;
          DWORD2(v125) = v71;
          *((_QWORD *)&v123 + 1) = v60;
          *(_QWORD *)&v124 = v50;
          *(_QWORD *)(a1 + 1416) = 0;
          *v42 = 0;
          *(_QWORD *)(a1 + 1336) = 0;
          *(_DWORD *)(a1 + 1344) = 0;
          v64(&v123, *(_QWORD *)(v9 + 16));
        }
      }
LABEL_104:
      if (v44 < *(_QWORD *)(a1 + 1320) >> 1)
        goto LABEL_72;
    }
  }
  *(_QWORD *)a1 = "Conflicting flags.";
  return 8;
}

uint64_t encoder_get_cxdata(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = a1 + 1592;
    *a2 = a1 + 1592;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((result - (a1 + 1584) - 8) >> 3) >= *(unsigned int *)(a1 + 1584))
    return 0;
  *a2 = result + 136;
  return result;
}

uint64_t encoder_set_config(uint64_t a1, _DWORD *a2)
{
  int v4;
  unsigned int v5;
  const char *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  int v18;
  unsigned int *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  int v26;

  v25 = 0;
  v4 = a2[3];
  if (v4 == *(_DWORD *)(a1 + 228) && a2[4] == *(_DWORD *)(a1 + 232))
  {
    v5 = a2[11];
  }
  else
  {
    v5 = a2[11];
    if (v5 > 1 || a2[10])
    {
      v6 = "Cannot change width or height after initialization";
LABEL_29:
      *(_QWORD *)a1 = v6;
      return 8;
    }
    v7 = (int *)(*(_QWORD *)(a1 + 1304) + 747488);
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 747500);
    if (v8
      && (v9 = *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 747504)) != 0
      && ((v10 = a2[4], v8 <= 2 * v4) ? (v11 = 2 * v10 < v9) : (v11 = 1),
          !v11 ? (v12 = 16 * v8 < v4) : (v12 = 1),
          !v12 ? (v13 = 16 * v9 < v10) : (v13 = 1),
          v13)
      || (*v7 ? (v14 = v4 <= *v7) : (v14 = 1),
          !v14 || (v15 = *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 747492)) != 0 && a2[4] > v15))
    {
      v25 = 1;
    }
  }
  if (v5 > *(_DWORD *)(a1 + 260))
  {
    v6 = "Cannot increase lag_in_frames";
    goto LABEL_29;
  }
  v16 = validate_config_0((const char **)a1, a2, (_DWORD *)(a1 + 720));
  if ((_DWORD)v16)
    return v16;
  v18 = setjmp((int *)(*(_QWORD *)(a1 + 1304) + 171788));
  v19 = *(unsigned int **)(a1 + 1304);
  v20 = v19 + 42924;
  if (v18)
  {
    v21 = *v20;
    if ((_DWORD)v21)
    {
      v22 = v19[42925];
      v23 = v19 + 42926;
      if (!v22)
        v23 = 0;
      *(_QWORD *)a1 = v23;
    }
    v20[22] = 0;
    return v21;
  }
  else
  {
    v19[42946] = 1;
    memcpy((void *)(a1 + 216), a2, 0x1F8uLL);
    set_encoder_config(a1 + 864, a1 + 216, a1 + 720);
    set_twopass_params_from_config((_DWORD *)(a1 + 216), *(_QWORD *)(a1 + 1304));
    v24 = *(_QWORD *)(a1 + 1304);
    v26 = v25 | (*(_DWORD *)(v24 + 189852) != *(_DWORD *)(a1 + 864));
    vp9_change_config(v24, (_DWORD *)(a1 + 864));
    if (v26)
      *(_QWORD *)(a1 + 1560) |= 1uLL;
    *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 171784) = 0;
    return 0;
  }
}

uint64_t encoder_get_global_headers(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 1304);
  if (!v1)
    return 0;
  v2 = 0;
  v3 = a1 + 36576;
  do
  {
    if ((double)*(unint64_t *)&vp9_level_defs[v2 + 2] * 1.015 >= (double)*(unint64_t *)(v1 + 844464)
      && *(_DWORD *)(v1 + 844472) <= vp9_level_defs[v2 + 4]
      && *(_DWORD *)(v1 + 844476) <= vp9_level_defs[v2 + 5]
      && *(double *)(v1 + 844480) <= *(double *)&vp9_level_defs[v2 + 6]
      && *(double *)(v1 + 844488) <= *(double *)&vp9_level_defs[v2 + 8]
      && *(double *)(v1 + 844496) >= *(double *)&vp9_level_defs[v2 + 10]
      && *(unsigned __int8 *)(v1 + 844504) <= LOBYTE(vp9_level_defs[v2 + 12])
      && *(_DWORD *)(v1 + 844508) >= vp9_level_defs[v2 + 13]
      && *(unsigned __int8 *)(v1 + 844512) <= LOBYTE(vp9_level_defs[v2 + 14]))
    {
      break;
    }
    v2 += 16;
  }
  while (v2 != 224);
  if (*(_QWORD *)v3)
    free(*(void **)v3);
  v4 = malloc_type_malloc(0xCuLL, 0x10000403E1C8BA9uLL);
  *(_QWORD *)v3 = v4;
  if (!v4)
    return 0;
  if (*(_DWORD *)(v3 + 16) == -1)
    v5 = 9;
  else
    v5 = 12;
  *(_QWORD *)(v3 + 8) = v5;
  __memcpy_chk();
  return v3;
}

uint64_t encoder_get_preview(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD v5[2];
  _OWORD v6[10];

  memset(v5, 0, 12);
  if (*(_DWORD *)(a1 + 1568))
  {
    LODWORD(v5[0]) = *(_DWORD *)(a1 + 1568);
    *(_QWORD *)((char *)v5 + 4) = *(_QWORD *)(a1 + 1572);
  }
  memset(v6, 0, sizeof(v6));
  v2 = *(_QWORD *)(a1 + 1304);
  if (!*(_DWORD *)(v2 + 172976)
    || vp9_post_proc_frame(v2 + 171696, v6, (int *)v5, **(_DWORD **)(v2 + 190456)))
  {
    return 0;
  }
  v4 = a1 + 1424;
  yuvconfig2image(v4, (uint64_t)v6, 0);
  return v4;
}

uint64_t set_encoder_config(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int v33;
  _BOOL4 v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int i;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  int v64;
  int *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  unsigned int v71;

  v3 = *(_DWORD *)(a2 + 72);
  v4 = *(_DWORD *)(a2 + 4);
  v5 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 364) = v4;
  v6 = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 8) = v6;
  *(_DWORD *)(result + 12) = v7;
  v8 = *(unsigned int *)(a2 + 20);
  v9 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)result = v5;
  *(_DWORD *)(result + 4) = v8;
  *(_DWORD *)(result + 16) = v9;
  v10 = (double)*(int *)(a2 + 32) / (double)*(int *)(a2 + 28);
  if (v10 > 180.0)
    v10 = 30.0;
  *(double *)(result + 24) = v10;
  v11 = *(_QWORD *)(a2 + 28);
  *(_QWORD *)(result + 32) = v11;
  v12 = HIDWORD(v11);
  v13 = 10000000 * (int)v11;
  if ((_DWORD)v12)
  {
    LODWORD(v14) = v12;
    v15 = v13;
    do
    {
      v16 = (int)v14;
      v14 = v15 % (int)v14;
      v15 = v16;
    }
    while ((_DWORD)v14);
  }
  else
  {
    LODWORD(v16) = v13;
  }
  *(_QWORD *)(result + 40) = v13 / (int)v16;
  *(_QWORD *)(result + 48) = ((int)v12 / (int)v16);
  *(_DWORD *)(result + 88) = 0;
  v17 = *(_DWORD *)(a2 + 40);
  if (!v17 || v17 == 2)
  {
    *(_DWORD *)(result + 92) = v17;
  }
  else if (v17 == 1)
  {
    v18 = 0;
    *(_DWORD *)(result + 92) = 1;
    goto LABEL_14;
  }
  v18 = *(_DWORD *)(a2 + 44);
LABEL_14:
  v19 = v6 * (uint64_t)v7;
  v20 = *(_DWORD *)(a2 + 72);
  v21 = (v10 * (double)(3 * v19 * v8) / 1000.0);
  *(_DWORD *)(result + 104) = v18;
  *(_DWORD *)(result + 108) = v20;
  if (*(_DWORD *)(a2 + 112) < v21)
    v21 = *(_DWORD *)(a2 + 112);
  if (v21 >= 0xF4240)
    v21 = 1000000;
  *(_DWORD *)(a2 + 112) = v21;
  *(_QWORD *)(result + 56) = 1000 * v21;
  *(_QWORD *)(result + 76) = *(_QWORD *)(a3 + 56);
  v22 = *(_DWORD *)(a3 + 68);
  *(_DWORD *)(result + 84) = *(_DWORD *)(a3 + 64);
  if (v22)
  {
    v23 = 0;
    *(_DWORD *)(result + 156) = 0;
  }
  else
  {
    v24 = *(int *)(a2 + 120);
    *(_DWORD *)(result + 156) = quantizer_to_qindex[*(int *)(a2 + 116)];
    v23 = quantizer_to_qindex[v24];
  }
  *(_DWORD *)(result + 152) = v23;
  *(_DWORD *)(result + 160) = quantizer_to_qindex[*(int *)(a3 + 52)];
  *(_DWORD *)(result + 148) = -1;
  *(_QWORD *)(result + 112) = *(_QWORD *)(a2 + 124);
  v25 = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(result + 180) = v25;
  v26 = *(_DWORD *)(a2 + 56);
  if (v25)
    v27 = v26 == 0;
  else
    v27 = 1;
  if (v27)
    v28 = 2;
  else
    v28 = 1;
  if (*(_DWORD *)(a2 + 52) != 1)
    v28 = 0;
  *(_DWORD *)(result + 172) = v28;
  *(_DWORD *)(result + 176) = v26;
  if (v3)
  {
    v29 = *(unsigned int *)(a2 + 132);
    v30 = *(_QWORD *)(a2 + 136);
    v31.i64[0] = v30;
    v31.i64[1] = HIDWORD(v30);
    v32 = v31;
  }
  else
  {
    v32 = vdupq_n_s64(0xEA60uLL);
    v29 = 240000;
  }
  *(_QWORD *)(result + 136) = v29;
  *(int64x2_t *)(result + 120) = v32;
  *(_DWORD *)(result + 144) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(result + 188) = *(_OWORD *)(a2 + 144);
  if (*(_DWORD *)(a2 + 160) == 1)
  {
    v33 = *(_DWORD *)(a2 + 168);
    v34 = *(_DWORD *)(a2 + 164) != v33;
  }
  else
  {
    v34 = 0;
    v33 = *(_DWORD *)(a2 + 168);
  }
  *(_DWORD *)(result + 96) = v34;
  *(_DWORD *)(result + 100) = v33;
  v35 = *(_DWORD *)a3;
  v36 = *(_DWORD *)(a3 + 4);
  if (*(int *)a3 < 0)
    v35 = -v35;
  *(_DWORD *)(result + 72) = v35;
  *(_DWORD *)(result + 324) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(result + 320) = v36;
  if ((_DWORD)v8 == 8)
    v37 = *(_DWORD *)(a3 + 8);
  else
    v37 = 0;
  *(_DWORD *)(result + 64) = v37;
  *(_DWORD *)(result + 68) = *(_DWORD *)(a3 + 12);
  *(_OWORD *)(result + 376) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(result + 404) = *(_OWORD *)(a3 + 100);
  *(_OWORD *)(result + 336) = *(_OWORD *)(a3 + 32);
  *(_DWORD *)(result + 392) = *(_DWORD *)(a3 + 48);
  *(_DWORD *)(result + 396) = *(_DWORD *)(a3 + 96);
  v38 = *(_DWORD *)(a3 + 20);
  *(_DWORD *)(result + 352) = v38;
  *(_DWORD *)(result + 360) = *(_DWORD *)(a3 + 28);
  if (v4 < 2 || v38 <= 0)
    v39 = *(_DWORD *)(a3 + 24);
  else
    v39 = 0;
  *(_DWORD *)(result + 356) = v39;
  *(_DWORD *)(result + 328) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 332) = *(_DWORD *)(a3 + 76);
  *(_QWORD *)(result + 164) = *(_QWORD *)(a3 + 80);
  *(_DWORD *)(result + 184) = *(_DWORD *)(a3 + 88);
  v40 = *(_DWORD *)(a2 + 172);
  v41 = *(_DWORD *)(a2 + 216);
  *(_DWORD *)(result + 204) = v40;
  *(_DWORD *)(result + 208) = v41;
  *(_DWORD *)(result + 420) = *(_DWORD *)(a2 + 376);
  *(_DWORD *)(result + 368) = *(_DWORD *)(a3 + 72);
  *(_QWORD *)(result + 424) = *(_QWORD *)(a3 + 116);
  *(_DWORD *)(result + 432) = *(_DWORD *)(a3 + 124);
  if (v40 < 1)
    goto LABEL_64;
  if (v41 >= 1)
  {
    for (i = 0; i < v40; ++i)
    {
      if (v41 >= 1)
      {
        v43 = 0;
        do
        {
          v44 = 4 * (v43 + i * v41);
          v45 = *(_DWORD *)(a2 + v44 + 328);
          if (v45 <= 0x20C49B)
            v46 = 1000 * v45;
          else
            v46 = 0x7FFFFFFF;
          *(_DWORD *)(result + v44 + 212) = v46;
          v41 = *(_DWORD *)(result + 208);
          ++v43;
        }
        while ((int)v43 < v41);
        v40 = *(_DWORD *)(result + 204);
      }
    }
  }
  if (v40 != 1)
  {
LABEL_64:
    v47 = 0;
    v48 = v41 == 1;
    if (v41 <= 1)
      goto LABEL_59;
LABEL_65:
    v51 = *(_DWORD *)(a2 + 240);
    if (v51 <= 1)
      v51 = 1;
    *(_DWORD *)(result + 300) = v51;
    v52 = *(_DWORD *)(a2 + 244);
    if (v52 <= 1)
      v52 = 1;
    *(_DWORD *)(result + 304) = v52;
    v53 = *(_DWORD *)(a2 + 248);
    if (v53 <= 1)
      v53 = 1;
    *(_DWORD *)(result + 308) = v53;
    v54 = *(_DWORD *)(a2 + 252);
    if (v54 <= 1)
      v54 = 1;
    *(_DWORD *)(result + 312) = v54;
    v55 = *(_DWORD *)(a2 + 256);
    if (v55 <= 1)
      v55 = 1;
    *(_DWORD *)(result + 316) = v55;
    v49 = *(_DWORD *)(result + 368);
    if (v49 == 10)
      goto LABEL_63;
    goto LABEL_76;
  }
  if (*(_DWORD *)(result + 92))
    *(_DWORD *)(result + 260) = *(_QWORD *)(result + 56);
  v47 = 1;
  v48 = v41 == 1;
  if (v41 > 1)
    goto LABEL_65;
LABEL_59:
  if (v48)
    *(_DWORD *)(result + 300) = 1;
  v49 = *(_DWORD *)(result + 368);
  if (v49 == 10)
  {
LABEL_63:
    v50 = 0;
    goto LABEL_101;
  }
LABEL_76:
  if (v49 > 0x3E || ((1 << v49) & 0x701C0300C0300800) == 0)
    goto LABEL_118;
  v56 = v49 & 0xFFFFFFFE;
  v57 = 2;
  if (v49 != 20)
    v57 = 3;
  v58 = 4;
  if (v49 != 30)
    v58 = 5;
  v59 = 6;
  if (v49 != 40)
    v59 = 7;
  v60 = 8;
  if (v49 != 50)
    v60 = 9;
  v61 = 10;
  if (v49 != 52)
    v61 = 11;
  if (v56 != 50)
    v60 = v61;
  if (v56 != 40)
    v59 = v60;
  if (v56 != 30)
    v58 = v59;
  if (v56 == 20)
    v50 = v57;
  else
    v50 = v58;
  if (v49 == 11)
    v50 = 1;
  if (v49 > 0x3C || ((1 << v49) & 0x101C0300C0300800) == 0)
  {
    v50 = 13;
    if (v49 != 62)
      v50 = -1;
    if (v49 == 61)
      v50 = 12;
  }
LABEL_101:
  v62 = *(double *)&vp9_level_defs[16 * v50 + 6] * 800.0;
  v63 = *(_QWORD *)(result + 56);
  if (v62 < (double)v63)
  {
    v63 = (uint64_t)v62;
    *(_QWORD *)(result + 56) = (uint64_t)v62;
  }
  if (v47 && *(_DWORD *)(result + 92))
    *(_DWORD *)(result + 260) = v63;
  v64 = (int)(-((double)v63 - v62 * 1.1) * 100.0 / (double)v63);
  if (*(_DWORD *)(result + 116) > v64)
    *(_DWORD *)(result + 116) = v64;
  *(_DWORD *)(result + 152) = 255;
  v65 = &vp9_level_defs[16 * v50];
  v66 = v65[13];
  if (*(_DWORD *)(result + 344) <= v66)
  {
    v67 = v66 + 1;
    *(_DWORD *)(result + 344) = v67;
    v68 = *(_DWORD *)(result + 348);
    if (v68)
    {
      if (v68 > v67)
        v67 = *(_DWORD *)(result + 348);
      *(_DWORD *)(result + 348) = v67;
    }
  }
  v69 = *(_DWORD *)(result + 352);
  if (v69 >= 1)
  {
    v70 = *((unsigned __int8 *)v65 + 48);
    if (1 << v69 > v70)
    {
      do
        v71 = v69--;
      while (v71 >= 2 && 1 << v69 > v70);
      *(_DWORD *)(result + 352) = v69;
    }
  }
LABEL_118:
  *(_DWORD *)(result + 436) = 0;
  return result;
}

uint64_t validate_config_0(const char **a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;

  v3 = a2[3];
  if ((v3 - 1) >> 16)
  {
    v7 = "g_w out of range [1..65536]";
    goto LABEL_15;
  }
  v4 = a2[4];
  if ((v4 - 1) >> 16)
  {
    v7 = "g_h out of range [1..65536]";
    goto LABEL_15;
  }
  if ((a2[8] - 1) >= 0x3B9ACA00)
  {
    v7 = "g_timebase.den out of range [1..1000000000]";
    goto LABEL_15;
  }
  if ((a2[7] - 1) >= 0x3B9ACA00)
  {
    v7 = "g_timebase.num out of range [1..1000000000]";
    goto LABEL_15;
  }
  v5 = a2[2];
  if (v5 > 3)
  {
    v7 = "g_profile out of range [..3]";
    goto LABEL_15;
  }
  v6 = a2[30];
  if (v6 > 0x3F)
  {
    v7 = "rc_max_quantizer out of range [..63]";
    goto LABEL_15;
  }
  if (a2[29] > v6)
  {
    v7 = "rc_min_quantizer out of range [..cfg->rc_max_quantizer]";
LABEL_15:
    *a1 = v7;
    return 8;
  }
  if (a3[17] != (a3[17] != 0))
  {
    v7 = "lossless expected BOOLean";
    goto LABEL_15;
  }
  if (a3[19] != (a3[19] != 0))
  {
    v7 = "frame_parallel_decoding_mode expected BOOLean";
    goto LABEL_15;
  }
  if (a3[20] > 6u)
  {
    v7 = "aq_mode out of range [0..AQ_MODE_COUNT - 2]";
    goto LABEL_15;
  }
  if (a3[21] > 1u)
  {
    v7 = "alt_ref_aq out of range [0..1]";
    goto LABEL_15;
  }
  if (a3[22] > 1u)
  {
    v7 = "frame_periodic_boost out of range [0..1]";
    goto LABEL_15;
  }
  if (a2[1] > 0x40u)
  {
    v7 = "g_threads out of range [..MAX_NUM_THREADS]";
    goto LABEL_15;
  }
  v9 = a2[11];
  if (v9 > 0x19)
  {
    v7 = "g_lag_in_frames out of range [..MAX_LAG_BUFFERS]";
    goto LABEL_15;
  }
  if (a2[18] > 3u)
  {
    v7 = "rc_end_usage out of range [VPX_VBR..VPX_Q]";
    goto LABEL_15;
  }
  if (a2[31] > 0x64u)
  {
    v7 = "rc_undershoot_pct out of range [..100]";
    goto LABEL_15;
  }
  if (a2[32] > 0x64u)
  {
    v7 = "rc_overshoot_pct out of range [..100]";
    goto LABEL_15;
  }
  if (a2[36] > 0x64u)
  {
    v7 = "rc_2pass_vbr_bias_pct out of range [..100]";
    goto LABEL_15;
  }
  if (a2[39] > 0x2710u)
  {
    v7 = "rc_2pass_vbr_corpus_complexity out of range [0..10000]";
    goto LABEL_15;
  }
  v10 = a2[40];
  if (v10 > 1)
  {
    v7 = "kf_mode out of range [VPX_KF_DISABLED..VPX_KF_AUTO]";
    goto LABEL_15;
  }
  v11 = a2[13];
  if (v11 != (v11 != 0))
  {
    v7 = "rc_resize_allowed expected BOOLean";
    goto LABEL_15;
  }
  if (a2[12] > 0x64u)
  {
    v7 = "rc_dropframe_thresh out of range [..100]";
    goto LABEL_15;
  }
  if (a2[16] > 0x64u)
  {
    v7 = "rc_resize_up_thresh out of range [..100]";
    goto LABEL_15;
  }
  if (a2[17] > 0x64u)
  {
    v7 = "rc_resize_down_thresh out of range [..100]";
    goto LABEL_15;
  }
  if (a2[10])
  {
    v7 = "g_pass out of range [VPX_RC_ONE_PASS..VPX_RC_ONE_PASS]";
    goto LABEL_15;
  }
  v12 = a3[10];
  if (v12 > 0x18)
  {
    v7 = "min_gf_interval out of range [0..(MAX_LAG_BUFFERS - 1)]";
    goto LABEL_15;
  }
  v13 = a3[11];
  if (v13 > 0x18)
  {
    v7 = "max_gf_interval out of range [0..(MAX_LAG_BUFFERS - 1)]";
    goto LABEL_15;
  }
  if ((v13 | 2) != 2 && v13 < 3)
  {
    v7 = "max_gf_interval out of range [2..(MAX_LAG_BUFFERS - 1)]";
    goto LABEL_15;
  }
  if (v13 < v12 && v13)
  {
    v7 = "max_gf_interval out of range [extra_cfg->min_gf_interval..(MAX_LAG_BUFFERS - 1)]";
    goto LABEL_15;
  }
  if (v9 && v13 && v9 < v13 + 2)
  {
    v7 = "Set lag in frames to 0 (low delay) or >= (max-gf-interval + 2)";
    goto LABEL_15;
  }
  if (v11 == 1)
  {
    if (a2[14] > v3)
    {
      v7 = "rc_scaled_width out of range [0..cfg->g_w]";
      goto LABEL_15;
    }
    if (a2[15] > v4)
    {
      v7 = "rc_scaled_height out of range [0..cfg->g_h]";
      goto LABEL_15;
    }
  }
  v14 = a2[43];
  if (v14 - 1 > 4)
  {
    v7 = "ss_number_layers out of range [1..VPX_SS_MAX_LAYERS]";
    goto LABEL_15;
  }
  v15 = a2[54];
  if (v15 - 1 > 4)
  {
    v7 = "ts_number_layers out of range [1..VPX_TS_MAX_LAYERS]";
    goto LABEL_15;
  }
  v16 = a3[18];
  if ((v16 > 0x3E || ((1 << v16) & 0x701C0300C0300C03) == 0) && v16 != 255)
    *a1 = "target_level is invalid";
  if ((v16 > 0x3E || ((1 << v16) & 0x701C0300C0300C03) == 0) && v16 != 255)
    return 8;
  if (v15 * v14 > 0xC)
  {
    v7 = "ss_number_layers * ts_number_layers is out of range";
    goto LABEL_15;
  }
  if (v15 >= 2)
  {
    if (v14 >= 2)
    {
      v17 = 1;
      v7 = "ts_target_bitrate entries are not increasing";
      v18 = v15;
LABEL_85:
      v19 = v15 - 1;
      v20 = v18;
      while (a2[v20 + 1 + 82] >= a2[v20 + 82])
      {
        ++v20;
        if (!--v19)
        {
          ++v17;
          v18 += v15;
          if (v17 != v14)
            goto LABEL_85;
          goto LABEL_89;
        }
      }
      goto LABEL_15;
    }
LABEL_89:
    if (a2[v15 + 59] != 1)
    {
      v7 = "ts_rate_decimator[cfg->ts_number_layers - 1] out of range [1..1]";
      goto LABEL_15;
    }
    v21 = v15 - 3;
    v7 = "ts_rate_decimator factors are not powers of 2";
    while (1)
    {
      v22 = v21 + 1;
      if (v21 == -1)
        break;
      v23 = a2[v21-- + 60];
      if (v23 != 2 * a2[v22 + 60])
        goto LABEL_15;
    }
  }
  if (v10)
  {
    v24 = a2[41];
    if (v24 && v24 != a2[42])
    {
      v7 = "kf_min_dist not supported in auto mode, use 0 or kf_max_dist instead.";
      goto LABEL_15;
    }
  }
  if (a3[29] > 1u)
  {
    v7 = "row_mt out of range [0..1]";
    goto LABEL_15;
  }
  if (a3[30] > 2u)
  {
    v7 = "motion_vector_unit_test out of range [0..2]";
    goto LABEL_15;
  }
  if (a3[1] > 6u)
  {
    v7 = "enable_auto_alt_ref out of range [0..MAX_ARF_LAYERS]";
    goto LABEL_15;
  }
  if ((*a3 + 9) > 0x12)
  {
    v7 = "cpu_used out of range [-9..9]";
    goto LABEL_15;
  }
  if (a3[2] > 6u)
  {
    v7 = "noise_sensitivity out of range [..6]";
    goto LABEL_15;
  }
  if (a3[5] > 6u)
  {
    v7 = "tile_columns out of range [0..6]";
    goto LABEL_15;
  }
  if (a3[6] > 2u)
  {
    v7 = "tile_rows out of range [0..2]";
    goto LABEL_15;
  }
  if (a3[3] > 7u)
  {
    v7 = "sharpness out of range [..7]";
    goto LABEL_15;
  }
  if (a3[8] > 0xFu)
  {
    v7 = "arnr_max_frames out of range [0..15]";
    goto LABEL_15;
  }
  if (a3[9] > 6u)
  {
    v7 = "arnr_strength out of range [..6]";
    goto LABEL_15;
  }
  if (a3[13] > 0x3Fu)
  {
    v7 = "cq_level out of range [0..63]";
    goto LABEL_15;
  }
  v26 = a2[5];
  if (v26 - 8 > 4)
  {
    v7 = "g_bit_depth out of range [VPX_BITS_8..VPX_BITS_12]";
    goto LABEL_15;
  }
  v27 = a2[6];
  if (v27 - 8 > 4)
  {
    v7 = "g_input_bit_depth out of range [8..12]";
    goto LABEL_15;
  }
  if (a3[24] > 2u)
  {
    v7 = "content out of range [VP9E_CONTENT_DEFAULT..VP9E_CONTENT_INVALID - 1]";
    goto LABEL_15;
  }
  if (v5 > 1)
  {
    if (v26 == 8)
    {
      v7 = "Codec bit-depth 8 not supported in profile > 1";
      goto LABEL_15;
    }
  }
  else
  {
    v28 = v26 > 8;
    if (v26 <= 8)
      v7 = "Source high bit-depth not supported in profile < 2";
    else
      v7 = "Codec high bit-depth not supported in profile < 2";
    if (v28 || v27 > 8)
      goto LABEL_15;
  }
  if (a3[25] > 7u)
  {
    v7 = "color_space out of range [VPX_CS_UNKNOWN..VPX_CS_SRGB]";
    goto LABEL_15;
  }
  if (a3[26] > 1u)
  {
    v7 = "color_range out of range [VPX_CR_STUDIO_RANGE..VPX_CR_FULL_RANGE]";
    goto LABEL_15;
  }
  if (a2[95] > 1u)
  {
    v7 = "use_vizier_rc_params out of range [0..1]";
    goto LABEL_15;
  }
  if ((a2[97] - 1) > 0x3E7)
  {
    v7 = "active_wq_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[99] - 1) > 0x3E7)
  {
    v7 = "err_per_mb_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[101] - 1) > 0x3E7)
  {
    v7 = "sr_default_decay_limit.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[103] - 1) > 0x3E7)
  {
    v7 = "sr_diff_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[105] - 1) > 0x3E7)
  {
    v7 = "kf_err_per_mb_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[107] - 1) > 0x3E7)
  {
    v7 = "kf_frame_min_boost_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[111] - 1) > 0x3E7)
  {
    v7 = "kf_frame_max_boost_subs_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[113] - 1) > 0x3E7)
  {
    v7 = "kf_max_total_boost_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[115] - 1) > 0x3E7)
  {
    v7 = "gf_max_total_boost_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[117] - 1) > 0x3E7)
  {
    v7 = "gf_frame_max_boost_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[119] - 1) > 0x3E7)
  {
    v7 = "zm_factor.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[121] - 1) > 0x3E7)
  {
    v7 = "rd_mult_inter_qp_fac.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[123] - 1) > 0x3E7)
  {
    v7 = "rd_mult_arf_qp_fac.den out of range [1..1000]";
    goto LABEL_15;
  }
  if ((a2[125] - 1) >= 0x3E8)
  {
    v7 = "rd_mult_key_qp_fac.den out of range [1..1000]";
    goto LABEL_15;
  }
  return 0;
}

_DWORD *set_twopass_params_from_config(_DWORD *result, uint64_t a2)
{
  int v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;

  if (a2)
  {
    v2 = result[95];
    if (v2)
    {
      *(_DWORD *)(a2 + 747204) = v2;
      v3 = (double)(int)result[96] / (double)(int)result[97];
      *(double *)(a2 + 747208) = v3;
      v4 = 0.25;
      if (v3 < 0.25 || (v4 = 16.0, v3 > 16.0))
        *(double *)(a2 + 747208) = v4;
      v5 = (double)(int)result[98] / (double)(int)result[99];
      *(double *)(a2 + 747216) = v5;
      v6 = 0.25;
      if (v5 < 0.25 || (v6 = 4.0, v5 > 4.0))
        *(double *)(a2 + 747216) = v6;
      v7 = (double)(int)result[100] / (double)(int)result[101];
      *(double *)(a2 + 747224) = v7;
      v8 = 0.25;
      if (v7 < 0.25 || (v8 = 1.33, v7 > 1.33))
        *(double *)(a2 + 747224) = v8;
      v9 = (double)(int)result[102] / (double)(int)result[103];
      *(double *)(a2 + 747232) = v9;
      v10 = 0.25;
      if (v9 < 0.25 || (v10 = 4.0, v9 > 4.0))
        *(double *)(a2 + 747232) = v10;
      v11 = (double)(int)result[104] / (double)(int)result[105];
      *(double *)(a2 + 747240) = v11;
      v12 = 0.25;
      if (v11 < 0.25 || (v12 = 4.0, v11 > 4.0))
        *(double *)(a2 + 747240) = v12;
      v13 = (double)(int)result[106] / (double)(int)result[107];
      *(double *)(a2 + 747248) = v13;
      v14 = 0.25;
      if (v13 < 0.25 || (v14 = 4.0, v13 > 4.0))
        *(double *)(a2 + 747248) = v14;
      v15 = (double)(int)result[108] / (double)(int)result[109];
      *(double *)(a2 + 747256) = v15;
      v16 = 0.25;
      if (v15 < 0.25 || (v16 = 4.0, v15 > 4.0))
        *(double *)(a2 + 747256) = v16;
      v17 = (double)(int)result[110] / (double)(int)result[111];
      *(double *)(a2 + 747264) = v17;
      v18 = 0.25;
      if (v17 < 0.25 || (v18 = 4.0, v17 > 4.0))
        *(double *)(a2 + 747264) = v18;
      v19 = (double)(int)result[112] / (double)(int)result[113];
      *(double *)(a2 + 747272) = v19;
      v20 = 0.25;
      if (v19 < 0.25 || (v20 = 4.0, v19 > 4.0))
        *(double *)(a2 + 747272) = v20;
      v21 = (double)(int)result[114] / (double)(int)result[115];
      *(double *)(a2 + 747280) = v21;
      v22 = 0.25;
      if (v21 < 0.25 || (v22 = 4.0, v21 > 4.0))
        *(double *)(a2 + 747280) = v22;
      v23 = (double *)(a2 + 198888);
      v24 = (double)(int)result[116] / (double)(int)result[117];
      *(double *)(a2 + 747288) = v24;
      v25 = 0.25;
      if (v24 < 0.25 || (v25 = 4.0, v24 > 4.0))
        *(double *)(a2 + 747288) = v25;
      v26 = (double)(int)result[118] / (double)(int)result[119];
      *(double *)(a2 + 747296) = v26;
      v27 = 0.25;
      if (v26 < 0.25 || (v27 = 2.0, v26 > 2.0))
        *(double *)(a2 + 747296) = v27;
      v28 = (double)(int)result[120] / (double)(int)result[121];
      *v23 = v28;
      v29 = 0.25;
      if (v28 < 0.25 || (v29 = 4.0, v28 > 4.0))
        *v23 = v29;
      v30 = (double)(int)result[122] / (double)(int)result[123];
      *(double *)(a2 + 198896) = v30;
      v31 = 0.25;
      if (v30 < 0.25 || (v31 = 4.0, v30 > 4.0))
        *(double *)(a2 + 198896) = v31;
      v32 = (double)(int)result[124] / (double)(int)result[125];
      *(double *)(a2 + 198904) = v32;
      v33 = 0.25;
      if (v32 < 0.25 || (v33 = 4.0, v32 > 4.0))
        *(double *)(a2 + 198904) = v33;
    }
  }
  return result;
}

uint64_t ctrl_copy_reference(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  int *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v10;
  _OWORD v11[10];
  _DWORD **v12;

  v12 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  memset(v11, 0, sizeof(v11));
  image2yuvconfig(v2 + 2, (uint64_t)v11);
  v4 = *(int **)(a1 + 1304);
  v5 = v4 + 47486;
  if (*v2 == 2)
    v6 = 2;
  else
    v6 = 1;
  if (*v2 == 4)
    v7 = 4;
  else
    v7 = v6;
  if (v7 == 4)
  {
    v8 = v4[48630];
    if ((_DWORD)v8 != -1)
      goto LABEL_16;
    return 0;
  }
  if (v7 == 2)
  {
    v8 = v4[48629];
    if ((_DWORD)v8 != -1)
      goto LABEL_16;
    return 0;
  }
  v8 = v4[48628];
  if ((_DWORD)v8 == -1)
    return 0;
LABEL_16:
  v10 = v4[v8 + 43012];
  if (v10 == -1)
    return 0;
  vpx_yv12_copy_frame_c((int *)(*v5 + 224 * v10 + 88), (uint64_t)v11);
  return 0;
}

uint64_t ctrl_set_reference(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  int *v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v10;
  _OWORD v11[10];
  _DWORD **v12;

  v12 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  memset(v11, 0, sizeof(v11));
  image2yuvconfig(v2 + 2, (uint64_t)v11);
  v4 = *(int **)(a1 + 1304);
  v5 = v4 + 47486;
  if (*v2 == 2)
    v6 = 2;
  else
    v6 = 1;
  if (*v2 == 4)
    v7 = 4;
  else
    v7 = v6;
  if (v7 == 4)
  {
    v8 = v4[48630];
    if ((_DWORD)v8 != -1)
      goto LABEL_16;
    return 0;
  }
  if (v7 == 2)
  {
    v8 = v4[48629];
    if ((_DWORD)v8 != -1)
      goto LABEL_16;
    return 0;
  }
  v8 = v4[48628];
  if ((_DWORD)v8 == -1)
    return 0;
LABEL_16:
  v10 = v4[v8 + 43012];
  if (v10 == -1)
    return 0;
  vpx_yv12_copy_frame_c((int *)v11, *v5 + 224 * v10 + 88);
  return 0;
}

uint64_t ctrl_set_previewpp(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  if (!*a2)
    return 8;
  result = 0;
  v5 = *v2;
  *(_DWORD *)(a1 + 1576) = *((_DWORD *)v2 + 2);
  *(_QWORD *)(a1 + 1568) = v5;
  return result;
}

uint64_t ctrl_set_roi_map(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  if (!*a2)
    return 8;
  v2 = *a2;
  return vp9_set_roi_map(*(_QWORD *)(a1 + 1304), *(const void **)(v2 + 8), *(_DWORD *)(v2 + 16), *(_DWORD *)(v2 + 20), (_DWORD *)(v2 + 24), (_DWORD *)(v2 + 56), (_DWORD *)(v2 + 88), (_DWORD *)(v2 + 120));
}

uint64_t ctrl_set_active_map(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 1304);
  v4 = v3 + 173004;
  if (*(_DWORD *)(v3 + 173004) != *((_DWORD *)v2 + 2))
    return 8;
  v5 = *((_DWORD *)v2 + 3);
  if (*(_DWORD *)(v3 + 173012) != v5)
    return 8;
  v6 = v3 + 740272;
  v7 = *v2;
  v8 = *(_QWORD *)(v6 + 8);
  v9 = *(unsigned int *)(v4 + 4);
  v10 = *(unsigned int *)(v4 + 12);
  *(_DWORD *)(v6 + 4) = 1;
  if (v7)
  {
    if ((int)v9 >= 1 && (int)v10 >= 1)
    {
      v12 = 0;
      do
      {
        v13 = 0;
        do
        {
          if (*(_BYTE *)(v7 + (int)((v12 >> 1) * v5 + (v13 >> 1))))
            v14 = 0;
          else
            v14 = 7;
          *(_BYTE *)(v8 + v13++) = v14;
        }
        while (v10 != v13);
        ++v12;
        v8 += v10;
      }
      while (v12 != v9);
    }
    result = 0;
    *(_DWORD *)v6 = 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)v6 = 0;
  }
  return result;
}

uint64_t ctrl_set_scale_mode(uint64_t a1, int **a2)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v12;
  int v13;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *v2;
  v4 = v2[1];
  if ((v4 | v3) > 3)
    return 8;
  v5 = *(_DWORD **)(a1 + 1304);
  if (v3 > 2)
  {
    v8 = 2;
    v7 = 1;
    if (v4 > 2)
      goto LABEL_5;
LABEL_8:
    v12 = 4 * v4;
    v10 = *(_DWORD *)((char *)&unk_208F46680 + v12);
    v9 = *(_DWORD *)((char *)&unk_208F4668C + v12);
    goto LABEL_9;
  }
  v6 = 4 * v3;
  v7 = *(_DWORD *)((char *)&unk_208F46680 + v6);
  v8 = *(_DWORD *)((char *)&unk_208F4668C + v6);
  if (v4 <= 2)
    goto LABEL_8;
LABEL_5:
  v9 = 2;
  v10 = 1;
LABEL_9:
  v13 = (v9 + v5[47499] * v10 - 1) / v9;
  v5[42997] = (v8 + v5[47498] * v7 - 1) / v8;
  v5[42998] = v13;
  update_frame_size((uint64_t)v5);
  return 0;
}

uint64_t ctrl_set_cpuused(uint64_t a1, int *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  int v8;
  _DWORD *v9;
  uint64_t result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _DWORD *v24;

  v3 = *(_OWORD *)(a1 + 800);
  v20 = *(_OWORD *)(a1 + 784);
  v21 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v22 = *(_OWORD *)(a1 + 816);
  v23 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v16 = *(_OWORD *)(a1 + 720);
  v17 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v18 = *(_OWORD *)(a1 + 752);
  v19 = v6;
  v24 = a2 + 2;
  v7 = *a2;
  if (*a2 >= 9)
    v7 = 9;
  if (v7 <= -9)
    v7 = -9;
  if (v7 > 0)
    v8 = 5;
  else
    v8 = -5;
  if ((v7 + 4) < 9)
    v7 = v8;
  LODWORD(v16) = v7;
  v9 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v16);
  v11 = result;
  if (!(_DWORD)result)
  {
    v12 = v21;
    *(_OWORD *)(a1 + 784) = v20;
    *(_OWORD *)(a1 + 800) = v12;
    v13 = v23;
    *(_OWORD *)(a1 + 816) = v22;
    *(_OWORD *)(a1 + 832) = v13;
    v14 = v17;
    *(_OWORD *)(a1 + 720) = v16;
    *(_OWORD *)(a1 + 736) = v14;
    v15 = v19;
    *(_OWORD *)(a1 + 752) = v18;
    *(_OWORD *)(a1 + 768) = v15;
    set_encoder_config(a1 + 864, (uint64_t)v9, a1 + 720);
    set_twopass_params_from_config(v9, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v11;
  }
  return result;
}

uint64_t ctrl_set_enable_auto_alt_ref(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD1(v14) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_sharpness(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  HIDWORD(v14) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_static_thresh(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  LODWORD(v15) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_tile_columns(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD1(v15) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_tile_rows(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD2(v15) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_tpl_model(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  HIDWORD(v15) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_arnr_max_frames(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  LODWORD(v16) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_arnr_strength(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD1(v16) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_arnr_type()
{
  return 0;
}

uint64_t ctrl_set_tuning(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  LODWORD(v17) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_cq_level(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD1(v17) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_rc_max_intra_bitrate_pct(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD2(v17) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_rc_max_inter_bitrate_pct(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  HIDWORD(v17) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_rc_gf_cbr_boost_pct_0(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  LODWORD(v18) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_lossless(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD1(v18) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_frame_parallel_decoding_mode(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  HIDWORD(v18) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_aq_mode(uint64_t a1, int *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  _DWORD *v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _DWORD *v23;

  v3 = *(_OWORD *)(a1 + 800);
  v19 = *(_OWORD *)(a1 + 784);
  v20 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v21 = *(_OWORD *)(a1 + 816);
  v22 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v15 = *(_OWORD *)(a1 + 720);
  v16 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v17 = *(_OWORD *)(a1 + 752);
  v18 = v6;
  v23 = a2 + 2;
  v7 = *a2;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 1304) + 850792))
    v7 = 0;
  LODWORD(v20) = v7;
  v8 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v15);
  v10 = result;
  if (!(_DWORD)result)
  {
    v11 = v20;
    *(_OWORD *)(a1 + 784) = v19;
    *(_OWORD *)(a1 + 800) = v11;
    v12 = v22;
    *(_OWORD *)(a1 + 816) = v21;
    *(_OWORD *)(a1 + 832) = v12;
    v13 = v16;
    *(_OWORD *)(a1 + 720) = v15;
    *(_OWORD *)(a1 + 736) = v13;
    v14 = v18;
    *(_OWORD *)(a1 + 752) = v17;
    *(_OWORD *)(a1 + 768) = v14;
    set_encoder_config(a1 + 864, (uint64_t)v8, a1 + 720);
    set_twopass_params_from_config(v8, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v10;
  }
  return result;
}

uint64_t ctrl_set_alt_ref_aq(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD1(v19) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_frame_periodic_boost(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD2(v19) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_svc(uint64_t a1, int *a2)
{
  int v2;
  int *v3;
  uint64_t result;
  _DWORD *v5;
  int *v6;
  unsigned int v7;
  int v8;
  char v9;
  BOOL v10;

  v2 = *a2;
  v3 = *(int **)(a1 + 1304);
  v3[186877] = *a2;
  if (v2 == 1
    && (*(_DWORD *)(a1 + 256) - 1) <= 1
    && *(_DWORD *)(a1 + 388) >= 2u
    && *(_DWORD *)(a1 + 432) > 1u)
  {
    return 8;
  }
  v5 = v3 + 212584;
  v6 = v3 + 47514;
  *v5 = 0;
  v7 = v6[4];
  if (v7 <= 1)
  {
    if (*v6 <= 4)
    {
      v8 = v6[5];
      v9 = 1;
      if (v8 == 1 && !v2 && v6[88])
      {
        v9 = 0;
        *v5 = 1;
      }
      if (v7)
        v10 = 0;
      else
        v10 = (v8 | 2) == 2;
      if (v10 && !v2 && v6[88])
        goto LABEL_24;
      if ((v9 & 1) == 0)
      {
        result = 0;
        v5[1] = 1;
        return result;
      }
    }
LABEL_21:
    result = 0;
    v5[1] = 0;
    return result;
  }
  if (v7 != 2 || *v6 < 5 || !v6[88])
    goto LABEL_21;
LABEL_24:
  *v5 = 1;
  v5[1] = 1;
  return 0;
}

uint64_t ctrl_set_svc_parameters(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  _BYTE *v17;
  _DWORD *v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 1304);
  v3 = *(unsigned int *)(v2 + 747520);
  if ((int)v3 >= 1)
  {
    v4 = *(unsigned int *)(v2 + 747524);
    if ((int)v4 >= 1)
    {
      v5 = 0;
      v6 = (_BYTE *)(v2 + 758768);
      v7 = (_DWORD *)(v2 + 752644);
      v8 = (_DWORD *)*a2;
      v9 = 6880 * v4;
      v10 = (_DWORD *)*a2;
      do
      {
        v11 = &v8[v5];
        v12 = v11 + 24;
        v13 = v11 + 36;
        v14 = v11 + 48;
        v15 = v11 + 61;
        v16 = v10;
        v17 = v6;
        v18 = v7;
        v19 = v4;
        do
        {
          *v18 = *v16;
          v18[1] = v16[12];
          v18[2] = *v12;
          v18[3] = *v13;
          *v17 = *v14;
          v18[1532] = *v15;
          v18 += 1720;
          v17 += 6880;
          ++v16;
          --v19;
        }
        while (v19);
        ++v5;
        v7 = (_DWORD *)((char *)v7 + v9);
        v6 += v9;
        v10 += v4;
      }
      while (v5 != v3);
    }
  }
  return 0;
}

uint64_t ctrl_register_cx_callback(uint64_t a1, _OWORD **a2)
{
  *(_OWORD *)(a1 + 36552) = **a2;
  return 0;
}

uint64_t ctrl_set_svc_layer_id(uint64_t a1, int **a2)
{
  int *v2;
  _DWORD *v3;
  _OWORD *v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int v12;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;

  v2 = *a2;
  v3 = *(_DWORD **)(a1 + 1304);
  v4 = v3 + 208830;
  v6 = **a2;
  v5 = (*a2)[1];
  v3[186882] = v6;
  v3[208831] = v6;
  v3[186879] = v5;
  v7 = v3[186880];
  if ((int)v7 < 1)
    goto LABEL_7;
  if (v7 < 8 || (unint64_t)((char *)v3 - (char *)v2) >> 5 == 0x7FFFFFFFFFF9A09)
  {
    v8 = 0;
  }
  else
  {
    v8 = v7 & 0x7FFFFFF8;
    v14 = (__int128 *)(v2 + 6);
    v15 = v7 & 0xFFFFFFF8;
    do
    {
      v16 = *v14;
      *(v4 - 1) = *(v14 - 1);
      *v4 = v16;
      v14 += 2;
      v4 += 2;
      v15 -= 8;
    }
    while (v15);
    if (v8 == v7)
      goto LABEL_7;
  }
  v9 = v7 - v8;
  v10 = &v3[v8 + 208826];
  v11 = &v2[v8 + 2];
  do
  {
    v12 = *v11++;
    *v10++ = v12;
    --v9;
  }
  while (v9);
LABEL_7:
  if (v5 < 0)
    return 8;
  else
    return 8 * (v5 >= *(_DWORD *)(a1 + 432));
}

uint64_t ctrl_set_tune_content(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  LODWORD(v20) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_color_space(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD1(v20) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_color_range(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD2(v20) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_noise_sensitivity(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD2(v14) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_min_gf_interval(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD2(v16) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_max_gf_interval(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  HIDWORD(v16) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_svc_ref_frame_config(uint64_t a1, uint64_t *a2)
{
  unsigned int *v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;

  v2 = *(unsigned int **)(a1 + 1304);
  v3 = v2 + 208629;
  v4 = *a2;
  v2[208825] = 1;
  v5 = v2[186880];
  if ((int)v5 >= 1)
  {
    v6 = v3 + 203;
    v7 = (uint64_t *)(v4 + 200);
    v8 = (char *)v3 + 674;
    v9 = (_DWORD *)(v4 + 140);
    do
    {
      v3[161] = *(v9 - 20);
      *(v8 - 10) = *v9;
      *(v8 - 5) = v9[5];
      *v8++ = v9[10];
      *v3 = *(v9 - 35);
      v3[12] = *(v9 - 30);
      v10 = *v7++;
      *v6++ = v10;
      v3[24] = *(v9 - 25);
      ++v9;
      ++v3;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t ctrl_set_render_size(uint64_t a1, _DWORD **a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _DWORD **v23;

  v23 = a2;
  v3 = *(_OWORD *)(a1 + 800);
  v19 = *(_OWORD *)(a1 + 784);
  v20 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v21 = *(_OWORD *)(a1 + 816);
  v22 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v15 = *(_OWORD *)(a1 + 720);
  v16 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v17 = *(_OWORD *)(a1 + 752);
  v18 = v6;
  v23 = a2 + 1;
  v7 = *a2;
  HIDWORD(v21) = **a2;
  LODWORD(v22) = v7[1];
  v8 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v15);
  v10 = result;
  if (!(_DWORD)result)
  {
    v11 = v20;
    *(_OWORD *)(a1 + 784) = v19;
    *(_OWORD *)(a1 + 800) = v11;
    v12 = v22;
    *(_OWORD *)(a1 + 816) = v21;
    *(_OWORD *)(a1 + 832) = v12;
    v13 = v16;
    *(_OWORD *)(a1 + 720) = v15;
    *(_OWORD *)(a1 + 736) = v13;
    v14 = v18;
    *(_OWORD *)(a1 + 752) = v17;
    *(_OWORD *)(a1 + 768) = v14;
    set_encoder_config(a1 + 864, (uint64_t)v8, a1 + 720);
    set_twopass_params_from_config(v8, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v10;
  }
  return result;
}

uint64_t ctrl_set_target_level(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD2(v18) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_row_mt(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD1(v21) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_postencode_drop(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 739108) = *a2;
  return 0;
}

uint64_t ctrl_set_disable_overshoot_maxq_cbr(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 739112) = *a2;
  return 0;
}

uint64_t ctrl_enable_motion_vector_unit_test(uint64_t a1, _DWORD *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _DWORD *v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _DWORD *v22;

  v3 = *(_OWORD *)(a1 + 800);
  v18 = *(_OWORD *)(a1 + 784);
  v19 = v3;
  v4 = *(_OWORD *)(a1 + 832);
  v20 = *(_OWORD *)(a1 + 816);
  v21 = v4;
  v5 = *(_OWORD *)(a1 + 736);
  v14 = *(_OWORD *)(a1 + 720);
  v15 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v16 = *(_OWORD *)(a1 + 752);
  v17 = v6;
  v22 = a2 + 2;
  DWORD2(v21) = *a2;
  v7 = (_DWORD *)(a1 + 216);
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v14);
  v9 = result;
  if (!(_DWORD)result)
  {
    v10 = v19;
    *(_OWORD *)(a1 + 784) = v18;
    *(_OWORD *)(a1 + 800) = v10;
    v11 = v21;
    *(_OWORD *)(a1 + 816) = v20;
    *(_OWORD *)(a1 + 832) = v11;
    v12 = v15;
    *(_OWORD *)(a1 + 720) = v14;
    *(_OWORD *)(a1 + 736) = v12;
    v13 = v17;
    *(_OWORD *)(a1 + 752) = v16;
    *(_OWORD *)(a1 + 768) = v13;
    set_encoder_config(a1 + 864, (uint64_t)v7, a1 + 720);
    set_twopass_params_from_config(v7, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return v9;
  }
  return result;
}

uint64_t ctrl_set_svc_inter_layer_pred(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 835148) = *a2;
  return 0;
}

uint64_t ctrl_set_svc_frame_drop_layer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int *v10;
  int v11;
  int v12;
  __int128 *v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;

  v2 = *(_QWORD *)(a1 + 1304);
  v3 = v2 + 835012;
  v4 = *a2;
  *(_DWORD *)(v2 + 835144) = *(_DWORD *)(*a2 + 20);
  v5 = *(unsigned int *)(v2 + 747520);
  if ((int)v5 >= 1)
  {
    if (v5 < 8 || (unint64_t)(v2 + 834996 - v4) < 0x20)
    {
      v6 = 0;
LABEL_5:
      v7 = v5 - v6;
      v8 = 4 * v6;
      v9 = (_DWORD *)(v2 + 834996 + v8);
      v10 = (int *)(v4 + v8);
      do
      {
        v11 = *v10++;
        *v9++ = v11;
        --v7;
      }
      while (v7);
      goto LABEL_7;
    }
    v6 = v5 & 0x7FFFFFF8;
    v14 = (__int128 *)(v4 + 16);
    v15 = v5 & 0xFFFFFFF8;
    v16 = (_OWORD *)(v2 + 835012);
    do
    {
      v17 = *v14;
      *(v16 - 1) = *(v14 - 1);
      *v16 = v17;
      v14 += 2;
      v16 += 2;
      v15 -= 8;
    }
    while (v15);
    if (v6 != v5)
      goto LABEL_5;
  }
LABEL_7:
  v12 = *(_DWORD *)(v4 + 24);
  if (v12 <= 1)
    v12 = 1;
  *(_DWORD *)(v3 + 128) = v12;
  return 0;
}

uint64_t ctrl_set_svc_gf_temporal_ref(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 834664) = *a2;
  return 0;
}

uint64_t ctrl_set_svc_spatial_layer_sync(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int *v10;
  int v11;
  __int128 *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 1304);
  v3 = v2 + 835264;
  v4 = *a2;
  v5 = *(unsigned int *)(v2 + 747520);
  if ((int)v5 >= 1)
  {
    if (v5 < 8 || (unint64_t)(v2 + 835248 - v4) < 0x20)
    {
      v6 = 0;
LABEL_5:
      v7 = v5 - v6;
      v8 = 4 * v6;
      v9 = (_DWORD *)(v2 + 835248 + v8);
      v10 = (int *)(v4 + v8);
      do
      {
        v11 = *v10++;
        *v9++ = v11;
        --v7;
      }
      while (v7);
      goto LABEL_7;
    }
    v6 = v5 & 0x7FFFFFF8;
    v13 = (__int128 *)(v4 + 16);
    v14 = v5 & 0xFFFFFFF8;
    v15 = (_OWORD *)(v2 + 835264);
    do
    {
      v16 = *v13;
      *(v15 - 1) = *(v13 - 1);
      *v15 = v16;
      v13 += 2;
      v15 += 2;
      v14 -= 8;
    }
    while (v14);
    if (v6 != v5)
      goto LABEL_5;
  }
LABEL_7:
  *(_BYTE *)(v3 + 24) = *(_DWORD *)(v4 + 20);
  return 0;
}

uint64_t ctrl_set_delta_q_uv(uint64_t a1, int *a2)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[32];
  int *v22;

  v22 = a2;
  v3 = (_OWORD *)(a1 + 720);
  v4 = *(_OWORD *)(a1 + 800);
  v19 = *(_OWORD *)(a1 + 784);
  v20 = v4;
  *(_OWORD *)v21 = *(_OWORD *)(a1 + 816);
  *(_OWORD *)&v21[12] = *(_OWORD *)(a1 + 828);
  v5 = *(_OWORD *)(a1 + 736);
  v15 = *(_OWORD *)(a1 + 720);
  v16 = v5;
  v6 = *(_OWORD *)(a1 + 768);
  v17 = *(_OWORD *)(a1 + 752);
  v18 = v6;
  v22 = a2 + 2;
  v7 = *a2;
  if (*a2 <= -15)
    v7 = -15;
  if (v7 >= 15)
    v7 = 15;
  *(_DWORD *)&v21[28] = v7;
  v8 = (_DWORD *)(a1 + 216);
  v9 = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v15);
  if (!(_DWORD)v9)
  {
    v10 = v20;
    v3[4] = v19;
    v3[5] = v10;
    v11 = *(_OWORD *)&v21[16];
    v3[6] = *(_OWORD *)v21;
    v3[7] = v11;
    v12 = v16;
    *v3 = v15;
    v3[1] = v12;
    v13 = v18;
    v3[2] = v17;
    v3[3] = v13;
    set_encoder_config(a1 + 864, (uint64_t)v8, (uint64_t)v3);
    set_twopass_params_from_config(v8, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
  }
  return v9;
}

uint64_t ctrl_set_disable_loopfilter(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 850608) = *a2;
  return 0;
}

uint64_t ctrl_set_rtc_external_ratectrl_0(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 1304);
  if (*a2)
  {
    v3 = (_DWORD *)(v2 + 850396);
    v4 = v2 + 739160;
    *v3 = 0;
    *(_DWORD *)v4 = 0;
    *(_DWORD *)(*(_QWORD *)(v4 + 1104) + 132) = 0;
    v3[101] = 1;
  }
  return 0;
}

uint64_t ctrl_set_external_rate_control(uint64_t a1, __int128 **a2)
{
  __int128 *v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int32x2_t *v7;
  int32x2_t *v8;
  uint64_t v9;
  int32x2_t v10;
  __int32 v11;
  int32x2_t v12;
  int v13;
  int32x2_t v14;
  int32x2_t v15;
  __int32 v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  int32x2_t v20;
  int v21;
  int32x2_t v22;
  int v23;
  int32x2_t v24;
  int v25;
  int32x2_t v26;
  __int32 v27;
  _OWORD v28[5];
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  *(_QWORD *)&v28[0] = a2 + 1;
  v2 = *a2;
  v3 = (*a2)[1];
  v30 = **a2;
  v31 = v3;
  v4 = v2[2];
  v5 = v2[3];
  v6 = v2[4];
  v35 = *((_QWORD *)v2 + 10);
  v33 = v5;
  v34 = v6;
  v32 = v4;
  v7 = *(int32x2_t **)(a1 + 1304);
  v8 = v7 + 23752;
  if (v7[23759].i32[1] != 2)
    return 0;
  v9 = (uint64_t)&v7[106327];
  v10 = *v7;
  v11 = v7[92725].i32[0];
  v12 = v8[39];
  v13 = (int)*(_QWORD *)&v8[3] / 1000;
  v14 = *v8;
  v15 = v8[10];
  v16 = v8[16].i32[0];
  v17 = v8[9].i32[1];
  v18 = v17 > 3 ? 0 : *((_DWORD *)&xmmword_208F08A50 + v17);
  v28[2] = v32;
  v28[3] = v33;
  v28[4] = v34;
  v29 = v35;
  v28[0] = v30;
  v28[1] = v31;
  v20 = v10;
  v21 = v11;
  v22 = vrev64_s32(v12);
  v23 = v13;
  v24 = vrev64_s32(v14);
  v25 = v18;
  v26 = vrev64_s32(v15);
  v27 = v16;
  result = vp9_extrc_create((uint64_t)v28, (__int128 *)&v20, v9);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t ctrl_set_quantizer_one_pass(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t result;
  _DWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _DWORD *v23;

  v2 = *(_QWORD *)(a1 + 1304);
  v23 = a2 + 2;
  v3 = *a2;
  v4 = *(_OWORD *)(a1 + 800);
  v19 = *(_OWORD *)(a1 + 784);
  v20 = v4;
  v5 = *(_OWORD *)(a1 + 832);
  v21 = *(_OWORD *)(a1 + 816);
  v22 = v5;
  v6 = *(_OWORD *)(a1 + 736);
  v15 = *(_OWORD *)(a1 + 720);
  v16 = v6;
  v7 = *(_OWORD *)(a1 + 768);
  v17 = *(_OWORD *)(a1 + 752);
  v18 = v7;
  if (v3 > 0x3F)
    return 8;
  v10 = (_DWORD *)(a1 + 216);
  *(_DWORD *)(a1 + 336) = v3;
  *(_DWORD *)(a1 + 332) = v3;
  LODWORD(v20) = 0;
  *(_DWORD *)(v2 + 850792) = 1;
  result = validate_config_0((const char **)a1, (_DWORD *)(a1 + 216), &v15);
  if (!(_DWORD)result)
  {
    v11 = v20;
    *(_OWORD *)(a1 + 784) = v19;
    *(_OWORD *)(a1 + 800) = v11;
    v12 = v22;
    *(_OWORD *)(a1 + 816) = v21;
    *(_OWORD *)(a1 + 832) = v12;
    v13 = v16;
    *(_OWORD *)(a1 + 720) = v15;
    *(_OWORD *)(a1 + 736) = v13;
    v14 = v18;
    *(_OWORD *)(a1 + 752) = v17;
    *(_OWORD *)(a1 + 768) = v14;
    set_encoder_config(a1 + 864, (uint64_t)v10, a1 + 720);
    set_twopass_params_from_config(v10, *(_QWORD *)(a1 + 1304));
    vp9_change_config(*(_QWORD *)(a1 + 1304), (_DWORD *)(a1 + 864));
    return 0;
  }
  return result;
}

uint64_t ctrl_enable_external_rc_tpl(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 1304);
  if (*a2 > 1u)
    return 8;
  result = 0;
  *(_DWORD *)(v2 + 850804) = *a2;
  return result;
}

uint64_t ctrl_get_quantizer(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*a2)
    return 8;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 173028);
  return result;
}

uint64_t ctrl_get_quantizer64(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = 0;
  do
  {
    v3 = v2 + 1;
    if (quantizer_to_qindex[v2] >= *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 173028))
      break;
  }
  while (v2++ != 63);
  result = 0;
  *(_DWORD *)*a2 = v3 - 1;
  return result;
}

uint64_t ctrl_get_quantizer_svc_layers(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t result;
  _DWORD *v5;

  v2 = *a2;
  if (!*a2)
    return 8;
  result = 0;
  v5 = (_DWORD *)(*(_QWORD *)(a1 + 1304) + 835268);
  *v2 = *v5;
  v2[1] = v5[1];
  v2[2] = v5[2];
  v2[3] = v5[3];
  v2[4] = v5[4];
  return result;
}

uint64_t ctrl_get_loopfilter_level(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*a2)
    return 8;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 176424);
  return result;
}

uint64_t ctrl_get_reference(uint64_t a1, _QWORD *a2)
{
  unsigned int v2;

  if (!*a2)
    return 8;
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 172644);
  if (v2 > 0xB)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 1304) + 171696))
    return 1;
  yuvconfig2image(*a2 + 8, *(_QWORD *)(*(_QWORD *)(a1 + 1304) + 189944) + 224 * v2 + 88, 0);
  return 0;
}

uint64_t ctrl_get_svc_layer_id(uint64_t a1, _QWORD **a2)
{
  **a2 = *(_QWORD *)(*(_QWORD *)(a1 + 1304) + 747512);
  return 0;
}

uint64_t ctrl_get_active_map(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  int v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 1304);
  v4 = v3 + 173004;
  v5 = *(_DWORD *)(v2 + 8);
  if (*(_DWORD *)(v3 + 173004) != v5)
    return 8;
  v6 = *(void **)v2;
  v7 = *(_DWORD *)(v2 + 12);
  if (!*(_QWORD *)v2 || *(_DWORD *)(v3 + 173012) != v7)
    return 8;
  v10 = v3 + 737280;
  v11 = v10 + 2936;
  v12 = *(_QWORD *)(v10 + 2936);
  v13 = *(unsigned int *)(v4 + 4);
  v14 = *(unsigned int *)(v4 + 12);
  memset(v6, *(_DWORD *)(v10 + 2992) == 0, v7 * v5);
  if (*(_DWORD *)(v11 + 56))
    v15 = (int)v13 < 1;
  else
    v15 = 1;
  if (!v15 && (int)v14 >= 1)
  {
    v17 = 0;
    do
    {
      v18 = 0;
      do
      {
        *((_BYTE *)v6 + (int)((v17 >> 1) * v7 + (v18 >> 1))) |= *(_BYTE *)(v12 + v18) != 7;
        ++v18;
      }
      while (v14 != v18);
      ++v17;
      v12 += v14;
    }
    while (v17 != v13);
  }
  return 0;
}

uint64_t ctrl_get_level(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t i;
  uint64_t result;

  v2 = *a2;
  if (!*a2)
    return 8;
  for (i = 0; i != 224; i += 16)
  {
    if ((double)*(unint64_t *)&vp9_level_defs[i + 2] * 1.015 >= (double)*(unint64_t *)(*(_QWORD *)(a1 + 1304) + 844464)
      && *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 844472) <= vp9_level_defs[i + 4]
      && *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 844476) <= vp9_level_defs[i + 5]
      && *(double *)(*(_QWORD *)(a1 + 1304) + 844480) <= *(double *)&vp9_level_defs[i + 6]
      && *(double *)(*(_QWORD *)(a1 + 1304) + 844488) <= *(double *)&vp9_level_defs[i + 8]
      && *(double *)(*(_QWORD *)(a1 + 1304) + 844496) >= *(double *)&vp9_level_defs[i + 10]
      && *(unsigned __int8 *)(*(_QWORD *)(a1 + 1304) + 844504) <= LOBYTE(vp9_level_defs[i + 12])
      && *(_DWORD *)(*(_QWORD *)(a1 + 1304) + 844508) >= vp9_level_defs[i + 13]
      && *(unsigned __int8 *)(*(_QWORD *)(a1 + 1304) + 844512) <= LOBYTE(vp9_level_defs[i + 14]))
    {
      result = 0;
      *v2 = vp9_level_defs[i];
      return result;
    }
  }
  result = 0;
  *v2 = 0;
  return result;
}

uint64_t ctrl_get_svc_ref_frame_config(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;

  v2 = *(_QWORD *)(a1 + 1304);
  v3 = (int *)(v2 + 747512);
  if ((*(_DWORD *)(v2 + 747512) & 0x80000000) == 0)
  {
    v4 = 0;
    v5 = (_DWORD *)(v2 + 834516);
    v6 = v2 + 835205;
    v7 = (_DWORD *)(*a2 + 100);
    do
    {
      *(v7 - 10) = v5[161];
      v7[10] = *(unsigned __int8 *)(v6 + v4 - 25);
      v7[15] = *(unsigned __int8 *)(v6 + v4 - 20);
      v7[20] = *(unsigned __int8 *)(v6 + v4 - 15);
      *(v7 - 25) = *v5;
      *(v7 - 20) = v5[12];
      *(v7 - 15) = v5[24];
      *(v7 - 5) = *(unsigned __int8 *)(v6 + v4 - 10);
      *v7 = *(unsigned __int8 *)(v6 + v4 - 5);
      v7[5] = *(unsigned __int8 *)(v6 + v4);
      ++v5;
      ++v7;
    }
    while (v4++ < *v3);
  }
  return 0;
}

uint64_t write_superframe_index(uint64_t a1)
{
  int v1;
  unint64_t v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(a1 + 1344);
  v2 = *(_QWORD *)(a1 + 1416);
  if (v2 < 0xFFFFFFFF)
    v3 = 3;
  else
    v3 = 4;
  if (v2 >= 0xFFFFFF)
    v4 = v3;
  else
    v4 = 2;
  if (v2 >= 0xFFFF)
    v5 = v4;
  else
    v5 = 1;
  if (v2 < 0xFF)
    v5 = 0;
  v6 = *(_QWORD *)(a1 + 1336);
  v7 = v1 + v1 * v5 + 2;
  if ((unint64_t)(v6 + v7) < *(_QWORD *)(a1 + 1320))
  {
    v8 = (v1 + 63) | (8 * v5) | 0xC0;
    v9 = (_BYTE *)(*(_QWORD *)(a1 + 1328) + v6);
    *v9 = v8;
    v10 = v9 + 1;
    if (*(int *)(a1 + 1344) >= 1)
    {
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)(a1 + 1352 + 8 * v11);
        *v10 = v12;
        if (v5)
        {
          v10[1] = BYTE1(v12);
          if (v5 == 1)
          {
            v10 += 2;
          }
          else
          {
            v10[2] = BYTE2(v12);
            if (v5 == 2)
            {
              v10 += 3;
            }
            else
            {
              v10[3] = BYTE3(v12);
              if (v5 == 3)
              {
                v10 += 4;
              }
              else
              {
                v10[4] = 0;
                v10 += 5;
              }
            }
          }
        }
        else
        {
          ++v10;
        }
        ++v11;
      }
      while (v11 < *(int *)(a1 + 1344));
    }
    *v10 = v8;
    *(_QWORD *)(a1 + 1336) += v7;
  }
  return v7;
}

uint64_t vp9_fwht4x4_c(__int16 *a1, _DWORD *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;

  v3 = a3;
  v4 = a1[v3];
  v5 = 2 * a3;
  v6 = a1[v5];
  v7 = 3 * a3;
  v8 = v4 + *a1;
  v9 = a1[v7] - v6;
  v10 = (v8 - v9) >> 1;
  LODWORD(v4) = v10 - v4;
  v11 = v10 - v6;
  v12 = (v8 - (v10 - v6));
  v13 = a1[v3 + 1];
  v14 = a1[v5 + 1];
  v15 = v13 + a1[1];
  v16 = a1[v7 + 1] - v14;
  v17 = (v15 - v16) >> 1;
  LODWORD(v6) = v17 - v13;
  LODWORD(v13) = v17 - v14;
  v18 = (v15 - (v17 - v14));
  v19 = a1[v3 + 2];
  v20 = a1[v5 + 2];
  v21 = v19 + a1[2];
  v22 = a1[v7 + 2] - v20;
  v23 = (v21 - v22) >> 1;
  LODWORD(v15) = v23 - v19;
  LODWORD(v23) = v23 - v20;
  v25 = a1[3];
  v24 = a1 + 3;
  v26 = v24[v3];
  v27 = (v21 - v23);
  v28 = v24[v5];
  v29 = v24[v7] - v28;
  v30 = (v26 + v25 - v29) >> 1;
  LODWORD(v28) = v30 - v28;
  v31 = v18 + v12;
  v32 = (v26 + v25 - v28) - v27;
  v33 = (unint64_t)(v31 - v32) >> 1;
  LODWORD(v18) = v33 - v18;
  LODWORD(v27) = v33 - v27;
  v34 = v13 + (unint64_t)v11;
  v35 = (v6 + v16);
  v36 = (v15 + v22);
  LODWORD(v26) = v30 - v26;
  v37 = v28 - (unint64_t)v23;
  v38 = (v34 - v37) >> 1;
  result = (v26 + v29);
  *a2 = 4 * (v31 - v27);
  a2[1] = 4 * v27;
  a2[2] = 4 * (v18 + v32);
  a2[3] = 4 * v18;
  LODWORD(v13) = v38 - v13;
  LODWORD(v23) = v38 - v23;
  a2[4] = 4 * (v34 - v23);
  a2[5] = 4 * v23;
  a2[6] = 4 * (v13 + v37);
  a2[7] = 4 * v13;
  v40 = v35 + (v4 + v9);
  v41 = (unint64_t)(v40 - (result - v36)) >> 1;
  a2[8] = 4 * (v40 - (v41 - v36));
  a2[9] = 4 * (v41 - v36);
  a2[10] = 4 * (v41 - v35 + result - v36);
  a2[11] = 4 * (v41 - v35);
  v42 = v6 + (unint64_t)v4;
  v43 = v26 - (unint64_t)v15;
  v44 = (v42 - v43) >> 1;
  LODWORD(v15) = v44 - v15;
  a2[12] = 4 * (v42 - v15);
  a2[13] = 4 * v15;
  a2[14] = 4 * (v44 - v6 + v43);
  a2[15] = 4 * (v44 - v6);
  return result;
}

int32x4_t vp9_fht4x4_neon(int16x4_t *a1, int32x4_t *a2, int a3, int a4, int16x4_t a5)
{
  int32x4_t result;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  int16x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  int16x4_t v13;
  int16x4_t v14;
  int32x4_t v15;
  int16x4_t v16;
  int16x4_t v17;
  int16x4_t v18;
  int32x4_t v19;
  int16x4_t v20;
  int16x4_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int32x4_t v32;
  int16x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int32x2_t v41;
  int32x2_t v42;
  int32x2_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int32x4_t v55;
  int16x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  int16x4_t v67;
  int16x4_t v68;
  int16x4_t v69;
  int16x4_t v70;
  int16x4_t v71;
  int32x4_t v72;
  int16x8_t v73;
  int32x4_t v74;
  int16x4_t v75;
  int32x4_t v76;
  int16x4_t v77;
  int32x2_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x4_t v82;
  int16x4_t v83;
  int16x4_t v84;
  int16x4_t v85;
  int16x4_t v86;
  int16x4_t v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int16x4_t v97;
  int16x4_t v98;
  int32x2_t v99;
  int32x2_t v100;
  int16x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x4_t v108;
  int32x2_t v109;
  int32x2_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int32x4_t v113;

  if (a4 == 2)
  {
    v6 = vshl_n_s16(*a1, 4uLL);
    v7 = vshl_n_s16(*(int16x4_t *)((char *)a1 + 2 * a3), 4uLL);
    v8 = vshl_n_s16(*(int16x4_t *)((char *)a1 + 4 * a3), 4uLL);
    v9 = vshl_n_s16(*(int16x4_t *)((char *)a1 + 6 * a3), 4uLL);
    v10 = vadd_s16(vceq_s16(v6, (int16x4_t)0x1000100010000), vadd_s16(v6, (int16x4_t)1));
    v11 = vadd_s16(v9, v10);
    v12 = vadd_s16(v8, v7);
    v13 = vsub_s16(v7, v8);
    v14 = vsub_s16(v10, v9);
    v15 = vdupq_n_s32(0x5A820000u);
    v16 = vmovn_s32(vqrdmulhq_s32(vaddl_s16(v12, v11), v15));
    *(int16x4_t *)v15.i8 = vmovn_s32(vqrdmulhq_s32(vsubl_s16(v11, v12), v15));
    v17 = vdup_n_s16(0x3B21u);
    v18 = vdup_n_s16(0x187Eu);
    v19 = vmull_s16(v14, v18);
    v20 = vqrshrn_n_s32(vmlal_s16(vmull_s16(v13, v18), v14, v17), 0xEuLL);
    v21 = vqrshrn_n_s32(vmlsl_s16(v19, v13, v17), 0xEuLL);
    v22 = (int32x2_t)vtrn1_s16(v16, v20);
    v23 = (int32x2_t)vtrn2_s16(v16, v20);
    v24 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v15.i8, v21);
    v25 = (int32x2_t)vtrn2_s16(*(int16x4_t *)v15.i8, v21);
    *(int32x2_t *)v15.i8 = vzip1_s32(v22, v24);
    v26 = (int16x4_t)vzip1_s32(v23, v25);
    v27 = (int16x4_t)vzip2_s32(v22, v24);
    v28 = (int16x4_t)vzip2_s32(v23, v25);
    v29 = vdup_n_s16(0x14A3u);
    v30 = vdup_n_s16(0x26C9u);
    v31 = vdup_n_s16(0x3B6Cu);
    v32 = vmlal_s16(vmlal_s16(vmull_s16(v26, v30), *(int16x4_t *)v15.i8, v29), v28, v31);
    v33 = vdup_n_s16(0x3441u);
    v34 = vmlsl_s16(vmlal_s16(vmull_s16(v26, v33), *(int16x4_t *)v15.i8, v33), v28, v33);
    v35 = vmlal_s16(vmlsl_s16(vmull_s16(*(int16x4_t *)v15.i8, v31), v26, v29), v28, v30);
    v36 = vsubq_s32(v35, v32);
    v37 = (int16x8_t)vmlsl_s16(v35, v27, v33);
    v38 = (int16x8_t)vmlal_s16(v36, v27, v33);
    v39 = vrshrn_n_s32(vmlal_s16(v32, v27, v33), 0xEuLL);
    v40 = vrshrn_n_s32(v34, 0xEuLL);
    *(int16x4_t *)v37.i8 = vrshrn_n_s32((int32x4_t)v37, 0xEuLL);
    *(int16x4_t *)v38.i8 = vrshrn_n_s32((int32x4_t)v38, 0xEuLL);
    v41 = (int32x2_t)vtrn1_s16(v39, v40);
    v42 = (int32x2_t)vtrn2_s16(v39, v40);
    v43 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v38.i8);
    *(int16x4_t *)v38.i8 = vtrn2_s16(*(int16x4_t *)v37.i8, *(int16x4_t *)v38.i8);
    *(int32x2_t *)v37.i8 = vzip1_s32(v41, v43);
    v37.u64[1] = (unint64_t)vzip1_s32(v42, *(int32x2_t *)v38.i8);
    *(int32x2_t *)v44.i8 = vzip2_s32(v41, v43);
    v44.u64[1] = (unint64_t)vzip2_s32(v42, *(int32x2_t *)v38.i8);
    v38.i64[0] = 0x1000100010001;
    v38.i64[1] = 0x1000100010001;
    v45 = vaddq_s16(v37, v38);
    v46 = vaddq_s16(v44, v38);
LABEL_8:
    v81 = vshrq_n_s16(v45, 2uLL);
    goto LABEL_9;
  }
  if (a4 != 1)
  {
    if (!a4)
    {
      result.i64[0] = vpx_fdct4x4_neon(a1, a2, a3, a5).u64[0];
      return result;
    }
    v82 = vshl_n_s16(*a1, 4uLL);
    v83 = vshl_n_s16(*(int16x4_t *)((char *)a1 + 2 * a3), 4uLL);
    v84 = vshl_n_s16(*(int16x4_t *)((char *)a1 + 4 * a3), 4uLL);
    v85 = vshl_n_s16(*(int16x4_t *)((char *)a1 + 6 * a3), 4uLL);
    v86 = vdup_n_s16(0x14A3u);
    v87 = vadd_s16(vceq_s16(v82, (int16x4_t)0x1000100010000), vadd_s16(v82, (int16x4_t)1));
    v88 = vdup_n_s16(0x26C9u);
    v89 = vdup_n_s16(0x3B6Cu);
    v90 = vdup_n_s16(0x3441u);
    v91 = vmlal_s16(vmlal_s16(vmull_s16(v83, v88), v87, v86), v85, v89);
    v92 = vmlsl_s16(vmlal_s16(vmull_s16(v83, v90), v87, v90), v85, v90);
    v93 = vmlal_s16(vmlsl_s16(vmull_s16(v87, v89), v83, v86), v85, v88);
    v94 = vsubq_s32(v93, v91);
    v95 = vmlsl_s16(v93, v84, v90);
    v96 = vmlal_s16(v94, v84, v90);
    v97 = vrshrn_n_s32(vmlal_s16(v91, v84, v90), 0xEuLL);
    v98 = vrshrn_n_s32(v92, 0xEuLL);
    *(int16x4_t *)v95.i8 = vrshrn_n_s32(v95, 0xEuLL);
    *(int16x4_t *)v96.i8 = vrshrn_n_s32(v96, 0xEuLL);
    *(int16x4_t *)v91.i8 = vtrn1_s16(v97, v98);
    v99 = (int32x2_t)vtrn2_s16(v97, v98);
    v100 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v96.i8);
    *(int16x4_t *)v95.i8 = vtrn2_s16(*(int16x4_t *)v95.i8, *(int16x4_t *)v96.i8);
    *(int32x2_t *)v96.i8 = vzip1_s32(*(int32x2_t *)v91.i8, v100);
    *(int32x2_t *)v92.i8 = vzip1_s32(v99, *(int32x2_t *)v95.i8);
    v101 = (int16x4_t)vzip2_s32(*(int32x2_t *)v91.i8, v100);
    *(int32x2_t *)v95.i8 = vzip2_s32(v99, *(int32x2_t *)v95.i8);
    v102 = vmlal_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v92.i8, v88), *(int16x4_t *)v96.i8, v86), *(int16x4_t *)v95.i8, v89);
    v103 = vmlsl_s16(vmlal_s16(vmull_s16(*(int16x4_t *)v92.i8, v90), *(int16x4_t *)v96.i8, v90), *(int16x4_t *)v95.i8, v90);
    v104 = vmlal_s16(vmlsl_s16(vmull_s16(*(int16x4_t *)v96.i8, v89), *(int16x4_t *)v92.i8, v86), *(int16x4_t *)v95.i8, v88);
    v105 = vsubq_s32(v104, v102);
    v106 = (int16x8_t)vmlsl_s16(v104, v101, v90);
    v107 = (int16x8_t)vmlal_s16(v105, v101, v90);
    *(int16x4_t *)v102.i8 = vrshrn_n_s32(vmlal_s16(v102, v101, v90), 0xEuLL);
    v108 = vrshrn_n_s32(v103, 0xEuLL);
    *(int16x4_t *)v106.i8 = vrshrn_n_s32((int32x4_t)v106, 0xEuLL);
    *(int16x4_t *)v107.i8 = vrshrn_n_s32((int32x4_t)v107, 0xEuLL);
    v109 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v102.i8, v108);
    *(int16x4_t *)v102.i8 = vtrn2_s16(*(int16x4_t *)v102.i8, v108);
    v110 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v107.i8);
    *(int16x4_t *)v107.i8 = vtrn2_s16(*(int16x4_t *)v106.i8, *(int16x4_t *)v107.i8);
    *(int32x2_t *)v106.i8 = vzip1_s32(v109, v110);
    v106.u64[1] = (unint64_t)vzip1_s32(*(int32x2_t *)v102.i8, *(int32x2_t *)v107.i8);
    *(int32x2_t *)v111.i8 = vzip2_s32(v109, v110);
    v111.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v102.i8, *(int32x2_t *)v107.i8);
    v107.i64[0] = 0x1000100010001;
    v107.i64[1] = 0x1000100010001;
    v45 = vaddq_s16(v106, v107);
    v46 = vaddq_s16(v111, v107);
    goto LABEL_8;
  }
  v47 = vshl_n_s16(*a1, 4uLL);
  v48 = vshl_n_s16(*(int16x4_t *)((char *)a1 + 2 * a3), 4uLL);
  v49 = vshl_n_s16(*(int16x4_t *)((char *)a1 + 4 * a3), 4uLL);
  v50 = vshl_n_s16(*(int16x4_t *)((char *)a1 + 6 * a3), 4uLL);
  v51 = vadd_s16(vceq_s16(v47, (int16x4_t)0x1000100010000), vadd_s16(v47, (int16x4_t)1));
  v52 = vdup_n_s16(0x14A3u);
  v53 = vdup_n_s16(0x26C9u);
  v54 = vdup_n_s16(0x3B6Cu);
  v55 = vmlal_s16(vmlal_s16(vmull_s16(v48, v53), v51, v52), v50, v54);
  v56 = vdup_n_s16(0x3441u);
  v57 = vmlsl_s16(vmlal_s16(vmull_s16(v48, v56), v51, v56), v50, v56);
  v58 = vmlal_s16(vmlsl_s16(vmull_s16(v51, v54), v48, v52), v50, v53);
  v59 = vsubq_s32(v58, v55);
  v60 = (int16x8_t)vmlsl_s16(v58, v49, v56);
  v61 = vmlal_s16(v59, v49, v56);
  v62 = vrshrn_n_s32(vmlal_s16(v55, v49, v56), 0xEuLL);
  v63 = vrshrn_n_s32(v57, 0xEuLL);
  *(int16x4_t *)v60.i8 = vrshrn_n_s32((int32x4_t)v60, 0xEuLL);
  *(int16x4_t *)v61.i8 = vrshrn_n_s32(v61, 0xEuLL);
  v64 = (int32x2_t)vtrn1_s16(v62, v63);
  v65 = (int32x2_t)vtrn2_s16(v62, v63);
  v66 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v61.i8);
  *(int16x4_t *)v60.i8 = vtrn2_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v61.i8);
  *(int32x2_t *)v61.i8 = vzip1_s32(v64, v66);
  v67 = (int16x4_t)vzip1_s32(v65, *(int32x2_t *)v60.i8);
  v68 = (int16x4_t)vzip2_s32(v64, v66);
  *(int32x2_t *)v60.i8 = vzip2_s32(v65, *(int32x2_t *)v60.i8);
  v69 = vadd_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v61.i8);
  v70 = vadd_s16(v68, v67);
  v71 = vsub_s16(v67, v68);
  *(int16x4_t *)v60.i8 = vsub_s16(*(int16x4_t *)v61.i8, *(int16x4_t *)v60.i8);
  v72 = vdupq_n_s32(0x5A820000u);
  v73 = (int16x8_t)vqrdmulhq_s32(vaddl_s16(v70, v69), v72);
  v74 = vqrdmulhq_s32(vsubl_s16(v69, v70), v72);
  *(int16x4_t *)v73.i8 = vmovn_s32((int32x4_t)v73);
  v75 = vdup_n_s16(0x3B21u);
  *(int16x4_t *)v74.i8 = vmovn_s32(v74);
  *(int16x4_t *)v72.i8 = vdup_n_s16(0x187Eu);
  v76 = vmull_s16(*(int16x4_t *)v60.i8, *(int16x4_t *)v72.i8);
  *(int16x4_t *)v60.i8 = vqrshrn_n_s32(vmlal_s16(vmull_s16(v71, *(int16x4_t *)v72.i8), *(int16x4_t *)v60.i8, v75), 0xEuLL);
  v77 = vqrshrn_n_s32(vmlsl_s16(v76, v71, v75), 0xEuLL);
  v78 = (int32x2_t)vtrn1_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v60.i8);
  *(int16x4_t *)v60.i8 = vtrn2_s16(*(int16x4_t *)v73.i8, *(int16x4_t *)v60.i8);
  *(int16x4_t *)v73.i8 = vtrn1_s16(*(int16x4_t *)v74.i8, v77);
  *(int16x4_t *)v74.i8 = vtrn2_s16(*(int16x4_t *)v74.i8, v77);
  *(int32x2_t *)v79.i8 = vzip1_s32(v78, *(int32x2_t *)v73.i8);
  v79.u64[1] = (unint64_t)vzip1_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v74.i8);
  *(int32x2_t *)v73.i8 = vzip2_s32(v78, *(int32x2_t *)v73.i8);
  v73.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v74.i8);
  v60.i64[0] = 0x1000100010001;
  v60.i64[1] = 0x1000100010001;
  v80 = vaddq_s16(v79, v60);
  v46 = vaddq_s16(v73, v60);
  v81 = vshrq_n_s16(v80, 2uLL);
LABEL_9:
  v112 = vshrq_n_s16(v46, 2uLL);
  *a2 = vmovl_s16(*(int16x4_t *)v81.i8);
  a2[1] = vmovl_high_s16(v81);
  v113 = vmovl_s16(*(int16x4_t *)v112.i8);
  result = vmovl_high_s16(v112);
  a2[2] = v113;
  a2[3] = result;
  return result;
}

int32x4_t vp9_fht8x8_neon(int16x8_t *a1, int32x4_t *a2, int a3, int a4)
{
  int32x4_t result;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int32x4_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int32x4_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int64x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  uint16x8_t v140;
  uint16x8_t v141;
  uint16x8_t v142;
  uint16x8_t v143;
  uint16x8_t v144;
  uint16x8_t v145;
  uint16x8_t v146;
  uint16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int32x4_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  int16x8_t v161;
  int16x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int64x2_t v173;
  int16x8_t v174;
  int64x2_t v175;
  int16x8_t v176;
  int64x2_t v177;
  int16x8_t v178;
  int64x2_t v179;
  uint64_t v180;

  v180 = *MEMORY[0x24BDAC8D0];
  switch(a4)
  {
    case 2:
      v6 = vshlq_n_s16(*a1, 2uLL);
      v7 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
      v8 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
      v9 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
      v10 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 2uLL);
      v11 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 2uLL);
      v12 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 2uLL);
      v13 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 2uLL);
      v14 = vaddq_s16(v13, v6);
      v15 = vaddq_s16(v12, v7);
      v16 = vaddq_s16(v11, v8);
      v17 = vaddq_s16(v10, v9);
      v18 = vsubq_s16(v9, v10);
      v19 = vsubq_s16(v8, v11);
      v20 = vsubq_s16(v7, v12);
      v21 = vsubq_s16(v6, v13);
      v22 = vaddq_s16(v14, v17);
      v23 = vaddq_s16(v15, v16);
      v24 = vsubq_s16(v15, v16);
      v25 = vsubq_s16(v14, v17);
      v26 = vdupq_n_s32(0x5A820000u);
      v27 = (int16x8_t)vqrdmulhq_s32(vaddl_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v23.i8), v26);
      v28 = (int16x8_t)vqrdmulhq_s32(vaddl_high_s16(v22, v23), v26);
      v29 = (int16x8_t)vqrdmulhq_s32(vsubl_s16(*(int16x4_t *)v22.i8, *(int16x4_t *)v23.i8), v26);
      v30 = (int16x8_t)vqrdmulhq_s32(vsubl_high_s16(v22, v23), v26);
      v31 = vuzp1q_s16(v27, v28);
      v32 = vuzp1q_s16(v29, v30);
      v33 = vdupq_n_s16(0x3B21u);
      v34 = vdupq_n_s16(0x187Eu);
      v35 = vmull_s16(*(int16x4_t *)v25.i8, *(int16x4_t *)v34.i8);
      v36 = vmull_high_s16(v25, v34);
      v37 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v34.i8), *(int16x4_t *)v25.i8, *(int16x4_t *)v33.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v24, v34), v25, v33), 0xEuLL);
      v38 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(v35, *(int16x4_t *)v24.i8, *(int16x4_t *)v33.i8), 0xEuLL), vmlsl_high_s16(v36, v24, v33), 0xEuLL);
      v39 = (int16x8_t)vqrdmulhq_s32(vaddl_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v19.i8), v26);
      v40 = (int16x8_t)vqrdmulhq_s32(vaddl_high_s16(v20, v19), v26);
      v41 = (int16x8_t)vqrdmulhq_s32(vsubl_s16(*(int16x4_t *)v20.i8, *(int16x4_t *)v19.i8), v26);
      v42 = (int16x8_t)vqrdmulhq_s32(vsubl_high_s16(v20, v19), v26);
      v43 = vuzp1q_s16(v39, v40);
      v44 = vuzp1q_s16(v41, v42);
      v45 = vaddq_s16(v44, v18);
      v46 = vsubq_s16(v18, v44);
      v47 = vsubq_s16(v21, v43);
      v48 = vdupq_n_s16(0x3EC5u);
      v49 = vaddq_s16(v43, v21);
      v50 = vdupq_n_s16(0xC7Cu);
      v51 = vmull_s16(*(int16x4_t *)v49.i8, *(int16x4_t *)v50.i8);
      v52 = vmull_high_s16(v49, v50);
      v53 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v45.i8, *(int16x4_t *)v50.i8), *(int16x4_t *)v49.i8, *(int16x4_t *)v48.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v45, v50), v49, v48), 0xEuLL);
      v54 = vdupq_n_s16(0x238Eu);
      v55 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(v51, *(int16x4_t *)v45.i8, *(int16x4_t *)v48.i8), 0xEuLL), vmlsl_high_s16(v52, v45, v48), 0xEuLL);
      v56 = vdupq_n_s16(0x3537u);
      v57 = vmlsl_s16(vmull_s16(*(int16x4_t *)v47.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v46.i8, *(int16x4_t *)v54.i8);
      v58 = vmlsl_high_s16(vmull_high_s16(v47, v56), v46, v54);
      v59 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v46.i8, *(int16x4_t *)v56.i8), *(int16x4_t *)v47.i8, *(int16x4_t *)v54.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v46, v56), v47, v54), 0xEuLL);
      v60 = vqrshrn_high_n_s32(vqrshrn_n_s32(v57, 0xEuLL), v58, 0xEuLL);
      v61 = (int32x4_t)vtrn1q_s16(v31, v53);
      v62 = (int32x4_t)vtrn2q_s16(v31, v53);
      v63 = (int32x4_t)vtrn1q_s16(v37, v60);
      v64 = (int32x4_t)vtrn2q_s16(v37, v60);
      v65 = (int32x4_t)vtrn1q_s16(v32, v59);
      v66 = (int32x4_t)vtrn2q_s16(v32, v59);
      v67 = (int32x4_t)vtrn1q_s16(v38, v55);
      v68 = (int32x4_t)vtrn2q_s16(v38, v55);
      v69 = (int64x2_t)vtrn1q_s32(v61, v63);
      v70 = (int64x2_t)vtrn2q_s32(v61, v63);
      v71 = (int64x2_t)vtrn1q_s32(v62, v64);
      v72 = (int64x2_t)vtrn2q_s32(v62, v64);
      v73 = (int64x2_t)vtrn1q_s32(v65, v67);
      v74 = (int64x2_t)vtrn2q_s32(v65, v67);
      v75 = (int64x2_t)vtrn1q_s32(v66, v68);
      v172 = (int16x8_t)vzip1q_s64(v69, v73);
      v173 = vzip1q_s64(v71, v75);
      v76 = (int64x2_t)vtrn2q_s32(v66, v68);
      v174 = (int16x8_t)vzip1q_s64(v70, v74);
      v175 = vzip1q_s64(v72, v76);
      v176 = (int16x8_t)vzip2q_s64(v69, v73);
      v177 = vzip2q_s64(v71, v75);
      v178 = (int16x8_t)vzip2q_s64(v70, v74);
      v179 = vzip2q_s64(v72, v76);
      break;
    case 1:
      v77 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
      v172 = vshlq_n_s16(*a1, 2uLL);
      v173 = (int64x2_t)v77;
      v78 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
      v174 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
      v175 = (int64x2_t)v78;
      v79 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 2uLL);
      v176 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 2uLL);
      v177 = (int64x2_t)v79;
      v80 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 2uLL);
      v178 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 2uLL);
      v179 = (int64x2_t)v80;
      fadst8x8_neon((uint64_t)&v172);
      v81 = vaddq_s16((int16x8_t)v179, v172);
      v82 = vaddq_s16(v178, (int16x8_t)v173);
      v83 = vaddq_s16((int16x8_t)v177, v174);
      v84 = vaddq_s16(v176, (int16x8_t)v175);
      v85 = vsubq_s16((int16x8_t)v175, v176);
      v86 = vsubq_s16(v174, (int16x8_t)v177);
      v87 = vsubq_s16((int16x8_t)v173, v178);
      v88 = vsubq_s16(v172, (int16x8_t)v179);
      v89 = vaddq_s16(v84, v81);
      v90 = vaddq_s16(v83, v82);
      v91 = vsubq_s16(v82, v83);
      v92 = vsubq_s16(v81, v84);
      v93 = vdupq_n_s32(0x5A820000u);
      v94 = (int16x8_t)vqrdmulhq_s32(vaddl_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v90.i8), v93);
      v95 = (int16x8_t)vqrdmulhq_s32(vaddl_high_s16(v89, v90), v93);
      v96 = (int16x8_t)vqrdmulhq_s32(vsubl_s16(*(int16x4_t *)v89.i8, *(int16x4_t *)v90.i8), v93);
      v97 = (int16x8_t)vqrdmulhq_s32(vsubl_high_s16(v89, v90), v93);
      v98 = vuzp1q_s16(v94, v95);
      v99 = vdupq_n_s16(0x3B21u);
      v100 = vuzp1q_s16(v96, v97);
      v101 = vdupq_n_s16(0x187Eu);
      v102 = vmull_s16(*(int16x4_t *)v92.i8, *(int16x4_t *)v101.i8);
      v103 = vmull_high_s16(v92, v101);
      v104 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v91.i8, *(int16x4_t *)v101.i8), *(int16x4_t *)v92.i8, *(int16x4_t *)v99.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v91, v101), v92, v99), 0xEuLL);
      v105 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(v102, *(int16x4_t *)v91.i8, *(int16x4_t *)v99.i8), 0xEuLL), vmlsl_high_s16(v103, v91, v99), 0xEuLL);
      v106 = vuzp1q_s16((int16x8_t)vqrdmulhq_s32(vaddl_s16(*(int16x4_t *)v86.i8, *(int16x4_t *)v87.i8), v93), (int16x8_t)vqrdmulhq_s32(vaddl_high_s16(v86, v87), v93));
      v107 = vuzp1q_s16((int16x8_t)vqrdmulhq_s32(vsubl_s16(*(int16x4_t *)v87.i8, *(int16x4_t *)v86.i8), v93), (int16x8_t)vqrdmulhq_s32(vsubl_high_s16(v87, v86), v93));
      v108 = vaddq_s16(v107, v85);
      v109 = vsubq_s16(v85, v107);
      v110 = vsubq_s16(v88, v106);
      v111 = vaddq_s16(v106, v88);
      v112 = vdupq_n_s16(0x3EC5u);
      v113 = vdupq_n_s16(0xC7Cu);
      v114 = vmull_s16(*(int16x4_t *)v111.i8, *(int16x4_t *)v113.i8);
      v115 = vmull_high_s16(v111, v113);
      v116 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v108.i8, *(int16x4_t *)v113.i8), *(int16x4_t *)v111.i8, *(int16x4_t *)v112.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v108, v113), v111, v112), 0xEuLL);
      v117 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(v114, *(int16x4_t *)v108.i8, *(int16x4_t *)v112.i8), 0xEuLL), vmlsl_high_s16(v115, v108, v112), 0xEuLL);
      v118 = vdupq_n_s16(0x238Eu);
      v119 = vdupq_n_s16(0x3537u);
      v120 = vmlsl_s16(vmull_s16(*(int16x4_t *)v110.i8, *(int16x4_t *)v119.i8), *(int16x4_t *)v109.i8, *(int16x4_t *)v118.i8);
      v121 = vmlsl_high_s16(vmull_high_s16(v110, v119), v109, v118);
      v122 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v109.i8, *(int16x4_t *)v119.i8), *(int16x4_t *)v110.i8, *(int16x4_t *)v118.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v109, v119), v110, v118), 0xEuLL);
      v123 = vqrshrn_high_n_s32(vqrshrn_n_s32(v120, 0xEuLL), v121, 0xEuLL);
      v124 = (int32x4_t)vtrn1q_s16(v98, v116);
      v125 = (int32x4_t)vtrn2q_s16(v98, v116);
      v126 = (int32x4_t)vtrn1q_s16(v104, v123);
      v127 = (int32x4_t)vtrn2q_s16(v104, v123);
      v128 = (int32x4_t)vtrn1q_s16(v100, v122);
      v129 = (int32x4_t)vtrn2q_s16(v100, v122);
      v130 = (int32x4_t)vtrn1q_s16(v105, v117);
      v131 = (int32x4_t)vtrn2q_s16(v105, v117);
      v132 = (int64x2_t)vtrn1q_s32(v124, v126);
      v133 = (int64x2_t)vtrn2q_s32(v124, v126);
      v134 = (int64x2_t)vtrn1q_s32(v125, v127);
      v135 = (int64x2_t)vtrn2q_s32(v125, v127);
      v136 = (int64x2_t)vtrn1q_s32(v128, v130);
      v137 = (int64x2_t)vtrn2q_s32(v128, v130);
      v138 = (int64x2_t)vtrn1q_s32(v129, v131);
      v139 = (int64x2_t)vtrn2q_s32(v129, v131);
      v140 = (uint16x8_t)vzip1q_s64(v132, v136);
      v141 = (uint16x8_t)vzip2q_s64(v132, v136);
      v142 = (uint16x8_t)vzip1q_s64(v134, v138);
      v143 = (uint16x8_t)vzip2q_s64(v134, v138);
      v144 = (uint16x8_t)vzip1q_s64(v133, v137);
      v145 = (uint16x8_t)vzip2q_s64(v133, v137);
      v146 = (uint16x8_t)vzip1q_s64(v135, v139);
      v147 = (uint16x8_t)vzip2q_s64(v135, v139);
      v148 = vshrq_n_s16((int16x8_t)vsraq_n_u16(v140, v140, 0xFuLL), 1uLL);
      v149 = vshrq_n_s16((int16x8_t)vsraq_n_u16(v142, v142, 0xFuLL), 1uLL);
      v150 = vshrq_n_s16((int16x8_t)vsraq_n_u16(v144, v144, 0xFuLL), 1uLL);
      *a2 = vmovl_s16(*(int16x4_t *)v148.i8);
      a2[1] = vmovl_high_s16(v148);
      a2[2] = vmovl_s16(*(int16x4_t *)v149.i8);
      a2[3] = vmovl_high_s16(v149);
      a2[4] = vmovl_s16(*(int16x4_t *)v150.i8);
      a2[5] = vmovl_high_s16(v150);
      v151 = vshrq_n_s16((int16x8_t)vsraq_n_u16(v146, v146, 0xFuLL), 1uLL);
      v152 = vshrq_n_s16((int16x8_t)vsraq_n_u16(v141, v141, 0xFuLL), 1uLL);
      v153 = vshrq_n_s16((int16x8_t)vsraq_n_u16(v143, v143, 0xFuLL), 1uLL);
      v154 = vshrq_n_s16((int16x8_t)vsraq_n_u16(v145, v145, 0xFuLL), 1uLL);
      a2[6] = vmovl_s16(*(int16x4_t *)v151.i8);
      a2[7] = vmovl_high_s16(v151);
      a2[8] = vmovl_s16(*(int16x4_t *)v152.i8);
      a2[9] = vmovl_high_s16(v152);
      v155 = vshrq_n_s16((int16x8_t)vsraq_n_u16(v147, v147, 0xFuLL), 1uLL);
      a2[10] = vmovl_s16(*(int16x4_t *)v153.i8);
      a2[11] = vmovl_high_s16(v153);
      a2[12] = vmovl_s16(*(int16x4_t *)v154.i8);
      a2[13] = vmovl_high_s16(v154);
      v156 = vmovl_s16(*(int16x4_t *)v155.i8);
      result = vmovl_high_s16(v155);
      a2[14] = v156;
      a2[15] = result;
      return result;
    case 0:
      result.i64[0] = vpx_fdct8x8_neon(a1, a2, a3).u64[0];
      return result;
    default:
      v157 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 2 * a3), 2uLL);
      v172 = vshlq_n_s16(*a1, 2uLL);
      v173 = (int64x2_t)v157;
      v158 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 6 * a3), 2uLL);
      v174 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 4 * a3), 2uLL);
      v175 = (int64x2_t)v158;
      v159 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 10 * a3), 2uLL);
      v176 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 8 * a3), 2uLL);
      v177 = (int64x2_t)v159;
      v160 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 14 * a3), 2uLL);
      v178 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + 12 * a3), 2uLL);
      v179 = (int64x2_t)v160;
      fadst8x8_neon((uint64_t)&v172);
      break;
  }
  fadst8x8_neon((uint64_t)&v172);
  v161 = (int16x8_t)vsraq_n_u16((uint16x8_t)v177, (uint16x8_t)v177, 0xFuLL);
  v162 = (int16x8_t)vsraq_n_u16((uint16x8_t)v178, (uint16x8_t)v178, 0xFuLL);
  v163 = (int16x8_t)vsraq_n_u16((uint16x8_t)v179, (uint16x8_t)v179, 0xFuLL);
  v164 = vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v172, (uint16x8_t)v172, 0xFuLL), 1uLL);
  v165 = vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v173, (uint16x8_t)v173, 0xFuLL), 1uLL);
  v166 = vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v174, (uint16x8_t)v174, 0xFuLL), 1uLL);
  v167 = vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v175, (uint16x8_t)v175, 0xFuLL), 1uLL);
  v168 = vshrq_n_s16((int16x8_t)vsraq_n_u16((uint16x8_t)v176, (uint16x8_t)v176, 0xFuLL), 1uLL);
  *a2 = vmovl_s16(*(int16x4_t *)v164.i8);
  a2[1] = vmovl_high_s16(v164);
  v169 = vshrq_n_s16(v161, 1uLL);
  a2[2] = vmovl_s16(*(int16x4_t *)v165.i8);
  a2[3] = vmovl_high_s16(v165);
  v170 = vshrq_n_s16(v162, 1uLL);
  a2[4] = vmovl_s16(*(int16x4_t *)v166.i8);
  a2[5] = vmovl_high_s16(v166);
  v171 = vshrq_n_s16(v163, 1uLL);
  a2[6] = vmovl_s16(*(int16x4_t *)v167.i8);
  a2[7] = vmovl_high_s16(v167);
  a2[8] = vmovl_s16(*(int16x4_t *)v168.i8);
  a2[9] = vmovl_high_s16(v168);
  a2[10] = vmovl_s16(*(int16x4_t *)v169.i8);
  a2[11] = vmovl_high_s16(v169);
  a2[12] = vmovl_s16(*(int16x4_t *)v170.i8);
  a2[13] = vmovl_high_s16(v170);
  result = vmovl_s16(*(int16x4_t *)v171.i8);
  a2[14] = result;
  a2[15] = vmovl_high_s16(v171);
  return result;
}

int64x2_t fadst8x8_neon(uint64_t a1)
{
  int16x8_t v1;
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int16x8_t v65;
  int32x4_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t result;

  v1 = vdupq_n_s16(0x3FB1u);
  v2 = vdupq_n_s16(0x646u);
  v3 = *(int16x8_t *)(a1 + 96);
  v4 = *(int16x8_t *)(a1 + 112);
  v5 = vmull_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v2.i8);
  v6 = vmull_high_s16(v4, v2);
  v7 = *(int16x8_t *)(a1 + 16);
  v8 = vmlal_s16(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v2.i8), *(int16x4_t *)v4.i8, *(int16x4_t *)v1.i8);
  v9 = vmlal_high_s16(vmull_high_s16(*(int16x8_t *)a1, v2), v4, v1);
  v10 = *(int16x8_t *)(a1 + 32);
  v11 = *(int16x8_t *)(a1 + 48);
  v13 = *(int16x8_t *)(a1 + 64);
  v12 = *(int16x8_t *)(a1 + 80);
  v14 = vmlsl_s16(v5, *(int16x4_t *)a1, *(int16x4_t *)v1.i8);
  v15 = vmlsl_high_s16(v6, *(int16x8_t *)a1, v1);
  v16 = vdupq_n_s16(0x3871u);
  v17 = vdupq_n_s16(0x1E2Bu);
  v18 = vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)v17.i8);
  v19 = vmull_high_s16(v12, v17);
  v20 = vmlal_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v17.i8), *(int16x4_t *)v12.i8, *(int16x4_t *)v16.i8);
  v21 = vmlal_high_s16(vmull_high_s16(v10, v17), v12, v16);
  v22 = vmlsl_s16(v18, *(int16x4_t *)v10.i8, *(int16x4_t *)v16.i8);
  v23 = vdupq_n_s16(0x289Au);
  v24 = vdupq_n_s16(0x3179u);
  v25 = vmlsl_high_s16(v19, v10, v16);
  v26 = vmlal_s16(vmull_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v11.i8, *(int16x4_t *)v23.i8);
  v27 = vmlal_high_s16(vmull_high_s16(v13, v24), v11, v23);
  v28 = vmlsl_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v24.i8), *(int16x4_t *)v13.i8, *(int16x4_t *)v23.i8);
  v29 = vmlsl_high_s16(vmull_high_s16(v11, v24), v13, v23);
  v30 = vdupq_n_s16(0x1294u);
  v31 = vdupq_n_s16(0x3D3Fu);
  v32 = vmlal_s16(vmull_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)v31.i8), *(int16x4_t *)v7.i8, *(int16x4_t *)v30.i8);
  v33 = vmlal_high_s16(vmull_high_s16(v3, v31), v7, v30);
  v34 = vmlsl_s16(vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v31.i8), *(int16x4_t *)v3.i8, *(int16x4_t *)v30.i8);
  v35 = vmlsl_high_s16(vmull_high_s16(v7, v31), v3, v30);
  v36 = vaddq_s32(v26, v8);
  v37 = vaddq_s32(v27, v9);
  v38 = vaddq_s32(v28, v14);
  v39 = vaddq_s32(v29, v15);
  v40 = vrshrq_n_s32(vaddq_s32(v32, v20), 0xEuLL);
  v41 = vrshrq_n_s32(vaddq_s32(v33, v21), 0xEuLL);
  v42 = vrshrq_n_s32(vaddq_s32(v34, v22), 0xEuLL);
  v43 = vrshrq_n_s32(vaddq_s32(v35, v25), 0xEuLL);
  v44 = vrshrq_n_s32(vsubq_s32(v8, v26), 0xEuLL);
  v45 = vrshrq_n_s32(vsubq_s32(v9, v27), 0xEuLL);
  v46 = vrshrq_n_s32(vsubq_s32(v14, v28), 0xEuLL);
  v47 = vrshrq_n_s32(vsubq_s32(v15, v29), 0xEuLL);
  v48 = vrshrq_n_s32(vsubq_s32(v20, v32), 0xEuLL);
  v49 = vrshrq_n_s32(vsubq_s32(v21, v33), 0xEuLL);
  v50 = vrshrq_n_s32(vsubq_s32(v22, v34), 0xEuLL);
  v51 = vrshrq_n_s32(vsubq_s32(v25, v35), 0xEuLL);
  v52 = vdupq_n_s32(0x3B21u);
  v53 = vdupq_n_s32(0x187Eu);
  v54 = vmlaq_s32(vmulq_s32(v44, v52), v46, v53);
  v55 = vmlaq_s32(vmulq_s32(v45, v52), v47, v53);
  v56 = vdupq_n_s32(0xFFFFC4DF);
  v57 = vmlaq_s32(vmulq_s32(v44, v53), v46, v56);
  v58 = vmlaq_s32(vmulq_s32(v45, v53), v47, v56);
  v59 = vdupq_n_s32(0xFFFFE782);
  v60 = vmlaq_s32(vmulq_s32(v48, v59), v50, v52);
  v61 = vmlaq_s32(vmulq_s32(v49, v59), v51, v52);
  v62 = vmlaq_s32(vmulq_s32(v48, v52), v50, v53);
  v63 = vmlaq_s32(vmulq_s32(v49, v52), v51, v53);
  v64 = vsubq_s32(vrshrq_n_s32(v36, 0xEuLL), v40);
  v65 = (int16x8_t)vrsraq_n_s32(v40, v36, 0xEuLL);
  v66 = vsubq_s32(vrshrq_n_s32(v37, 0xEuLL), v41);
  v67 = (int16x8_t)vrsraq_n_s32(v41, v37, 0xEuLL);
  v68 = vsubq_s32(vrshrq_n_s32(v38, 0xEuLL), v42);
  v69 = (int16x8_t)vrsraq_n_s32(v42, v38, 0xEuLL);
  v70 = vsubq_s32(vrshrq_n_s32(v39, 0xEuLL), v43);
  v71 = (int16x8_t)vrsraq_n_s32(v43, v39, 0xEuLL);
  v72 = (int16x8_t)vrshrq_n_s32(vaddq_s32(v60, v54), 0xEuLL);
  v73 = (int16x8_t)vrshrq_n_s32(vaddq_s32(v61, v55), 0xEuLL);
  v74 = (int16x8_t)vrshrq_n_s32(vaddq_s32(v62, v57), 0xEuLL);
  v75 = (int16x8_t)vrshrq_n_s32(vaddq_s32(v63, v58), 0xEuLL);
  v76 = vrshrq_n_s32(vsubq_s32(v57, v62), 0xEuLL);
  v77 = vrshrq_n_s32(vsubq_s32(v58, v63), 0xEuLL);
  v78 = vdupq_n_s32(0x2D41u);
  v79 = vmulq_s32(v64, v78);
  v80 = vmulq_s32(v66, v78);
  v81 = vmulq_s32(v68, v78);
  v82 = vaddq_s32(v81, v79);
  v83 = vmulq_s32(v70, v78);
  v84 = vsubq_s32(v79, v81);
  v85 = vmulq_s32(vrshrq_n_s32(vsubq_s32(v54, v60), 0xEuLL), v78);
  v86 = vmulq_s32(vrshrq_n_s32(vsubq_s32(v55, v61), 0xEuLL), v78);
  v87 = vmulq_s32(v76, v78);
  v88 = vaddq_s32(v87, v85);
  v89 = vmulq_s32(v77, v78);
  v90 = vaddq_s32(v89, v86);
  v91 = vsubq_s32(v85, v87);
  v92 = vsubq_s32(v86, v89);
  *(int16x4_t *)v89.i8 = vrshrn_n_s32(v84, 0xEuLL);
  v93 = vuzp1q_s16(v65, v67);
  v94 = vnegq_s16(vuzp1q_s16(v72, v73));
  v95 = vrshrn_high_n_s32(vrshrn_n_s32(v88, 0xEuLL), v90, 0xEuLL);
  v96 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v82, 0xEuLL), vaddq_s32(v83, v80), 0xEuLL));
  v97 = vrshrn_high_n_s32(*(int16x4_t *)v89.i8, vsubq_s32(v80, v83), 0xEuLL);
  v98 = vnegq_s16(vrshrn_high_n_s32(vrshrn_n_s32(v91, 0xEuLL), v92, 0xEuLL));
  v99 = vuzp1q_s16(v74, v75);
  v100 = vnegq_s16(vuzp1q_s16(v69, v71));
  v101 = (int32x4_t)vtrn1q_s16(v93, v94);
  v102 = (int32x4_t)vtrn2q_s16(v93, v94);
  v103 = (int32x4_t)vtrn1q_s16(v95, v96);
  v104 = (int32x4_t)vtrn2q_s16(v95, v96);
  v105 = (int32x4_t)vtrn1q_s16(v97, v98);
  v106 = (int32x4_t)vtrn2q_s16(v97, v98);
  v107 = (int32x4_t)vtrn1q_s16(v99, v100);
  v108 = (int32x4_t)vtrn2q_s16(v99, v100);
  v109 = (int64x2_t)vtrn1q_s32(v101, v103);
  v110 = (int64x2_t)vtrn2q_s32(v101, v103);
  v111 = (int64x2_t)vtrn1q_s32(v102, v104);
  v112 = (int64x2_t)vtrn2q_s32(v102, v104);
  v113 = (int64x2_t)vtrn1q_s32(v105, v107);
  v114 = (int64x2_t)vtrn1q_s32(v106, v108);
  *(int64x2_t *)a1 = vzip1q_s64(v109, v113);
  *(int64x2_t *)(a1 + 16) = vzip1q_s64(v111, v114);
  v115 = (int64x2_t)vtrn2q_s32(v105, v107);
  v116 = (int64x2_t)vtrn2q_s32(v106, v108);
  *(int64x2_t *)(a1 + 32) = vzip1q_s64(v110, v115);
  *(int64x2_t *)(a1 + 48) = vzip1q_s64(v112, v116);
  *(int64x2_t *)(a1 + 64) = vzip2q_s64(v109, v113);
  *(int64x2_t *)(a1 + 80) = vzip2q_s64(v111, v114);
  result = vzip2q_s64(v112, v116);
  *(int64x2_t *)(a1 + 96) = vzip2q_s64(v110, v115);
  *(int64x2_t *)(a1 + 112) = result;
  return result;
}

int32x4_t vp9_fht16x16_neon(int16x8_t *a1, uint64_t a2, int a3, int a4)
{
  int32x4_t result;
  uint64_t v6;
  int16x8_t v7;
  uint64_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint64_t v11;
  uint64_t v12;
  int16x8_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t *v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t *v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v33;
  int16x8_t v34;
  uint64_t v35;
  uint64_t v36;
  int16x8_t v37;
  uint64_t v38;
  uint64_t v39;
  int16x8_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t *v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t *v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  uint64_t v60;
  int16x8_t v61;
  uint64_t v62;
  uint64_t v63;
  int16x8_t v64;
  uint64_t v65;
  uint64_t v66;
  int16x8_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t *v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int16x8_t v81;
  int16x8_t *v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int32x4_t v88;
  int16x8_t v89;
  int32x4_t v90;
  int16x8_t v91;
  int32x4_t v92;
  int16x8_t v93;
  int32x4_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int16x8_t v97;
  int32x4_t v98;
  int16x8_t v99;
  int32x4_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int16x8_t v105;
  int32x4_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int16x8_t v109;
  int32x4_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int16x8_t v113;
  int32x4_t v114;
  int16x8_t v115;
  int32x4_t v116;
  int16x8_t v117;
  int32x4_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  uint64_t v151;

  v151 = *MEMORY[0x24BDAC8D0];
  if (a4 == 2)
  {
    v6 = 2 * a3;
    v7 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v6), 2uLL);
    v135 = vshlq_n_s16(*a1, 2uLL);
    v136 = v7;
    v8 = 4 * a3;
    v9 = 6 * a3;
    v10 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v9), 2uLL);
    v137 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v8), 2uLL);
    v138 = v10;
    v11 = 8 * a3;
    v12 = 10 * a3;
    v13 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v12), 2uLL);
    v139 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v11), 2uLL);
    v140 = v13;
    v14 = 12 * a3;
    v15 = a3;
    v16 = v15 * 16 - v6;
    v17 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v15 * 16 - v6), 2uLL);
    v141 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v14), 2uLL);
    v142 = v17;
    v18 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v15] + v6), 2uLL);
    v143 = vshlq_n_s16(a1[v15], 2uLL);
    v144 = v18;
    v19 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v15] + v9), 2uLL);
    v145 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v15] + v8), 2uLL);
    v146 = v19;
    v20 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v15] + v12), 2uLL);
    v147 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v15] + v11), 2uLL);
    v148 = v20;
    v21 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v15] + v15 * 16 - v6), 2uLL);
    v149 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v15] + v14), 2uLL);
    v150 = v21;
    v23 = a1[1];
    v22 = a1 + 1;
    v24 = vshlq_n_s16(*(int16x8_t *)((char *)v22 + v6), 2uLL);
    v119 = vshlq_n_s16(v23, 2uLL);
    v120 = v24;
    v25 = vshlq_n_s16(*(int16x8_t *)((char *)v22 + v9), 2uLL);
    v121 = vshlq_n_s16(*(int16x8_t *)((char *)v22 + v8), 2uLL);
    v122 = v25;
    v26 = vshlq_n_s16(*(int16x8_t *)((char *)v22 + v12), 2uLL);
    v123 = vshlq_n_s16(*(int16x8_t *)((char *)v22 + v11), 2uLL);
    v124 = v26;
    v27 = vshlq_n_s16(*(int16x8_t *)((char *)v22 + v15 * 16 - v6), 2uLL);
    v125 = vshlq_n_s16(*(int16x8_t *)((char *)v22 + v14), 2uLL);
    v126 = v27;
    v28 = &v22[v15];
    v29 = vshlq_n_s16(*(int16x8_t *)((char *)v28 + v6), 2uLL);
    v127 = vshlq_n_s16(*v28, 2uLL);
    v128 = v29;
    v30 = vshlq_n_s16(*(int16x8_t *)((char *)v28 + v9), 2uLL);
    v129 = vshlq_n_s16(*(int16x8_t *)((char *)v28 + v8), 2uLL);
    v130 = v30;
    v31 = vshlq_n_s16(*(int16x8_t *)((char *)v28 + v12), 2uLL);
    v131 = vshlq_n_s16(*(int16x8_t *)((char *)v28 + v11), 2uLL);
    v132 = v31;
    v32 = vshlq_n_s16(*(int16x8_t *)((char *)v28 + v16), 2uLL);
    v133 = vshlq_n_s16(*(int16x8_t *)((char *)v28 + v14), 2uLL);
    v134 = v32;
    fdct16x16_neon(&v135, &v119);
LABEL_8:
    v135 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v135, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v135)), 2uLL);
    v136 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v136, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v136)), 2uLL);
    v137 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v137, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v137)), 2uLL);
    v138 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v138, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v138)), 2uLL);
    v139 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v139, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v139)), 2uLL);
    v140 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v140, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v140)), 2uLL);
    v141 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v141, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v141)), 2uLL);
    v142 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v142, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v142)), 2uLL);
    v143 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v143, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v143)), 2uLL);
    v144 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v144, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v144)), 2uLL);
    v145 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v145, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v145)), 2uLL);
    v146 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v146, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v146)), 2uLL);
    v147 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v147, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v147)), 2uLL);
    v148 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v148, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v148)), 2uLL);
    v149 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v149, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v149)), 2uLL);
    v150 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v150, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v150)), 2uLL);
    v119 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v119, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v119)), 2uLL);
    v120 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v120, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v120)), 2uLL);
    v121 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v121, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v121)), 2uLL);
    v122 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v122, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v122)), 2uLL);
    v123 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v123, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v123)), 2uLL);
    v124 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v124, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v124)), 2uLL);
    v125 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v125, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v125)), 2uLL);
    v126 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v126, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v126)), 2uLL);
    v127 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v127, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v127)), 2uLL);
    v128 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v128, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v128)), 2uLL);
    v129 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v129, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v129)), 2uLL);
    v130 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v130, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v130)), 2uLL);
    v131 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v131, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v131)), 2uLL);
    v132 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v132, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v132)), 2uLL);
    v133 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v133, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v133)), 2uLL);
    v134 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v134, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v134)), 2uLL);
    fadst16x16_neon((uint64_t)&v135, (uint64_t)&v119);
    goto LABEL_9;
  }
  if (a4 != 1)
  {
    if (!a4)
    {
      vpx_fdct16x16_neon(a1, a2, a3);
      return result;
    }
    v60 = 2 * a3;
    v61 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v60), 2uLL);
    v135 = vshlq_n_s16(*a1, 2uLL);
    v136 = v61;
    v62 = 4 * a3;
    v63 = 6 * a3;
    v64 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v63), 2uLL);
    v137 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v62), 2uLL);
    v138 = v64;
    v65 = 8 * a3;
    v66 = 10 * a3;
    v67 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v66), 2uLL);
    v139 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v65), 2uLL);
    v140 = v67;
    v68 = 12 * a3;
    v69 = a3;
    v70 = v69 * 16 - v60;
    v71 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v69 * 16 - v60), 2uLL);
    v141 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v68), 2uLL);
    v142 = v71;
    v72 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v69] + v60), 2uLL);
    v143 = vshlq_n_s16(a1[v69], 2uLL);
    v144 = v72;
    v73 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v69] + v63), 2uLL);
    v145 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v69] + v62), 2uLL);
    v146 = v73;
    v74 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v69] + v66), 2uLL);
    v147 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v69] + v65), 2uLL);
    v148 = v74;
    v75 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v69] + v69 * 16 - v60), 2uLL);
    v149 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v69] + v68), 2uLL);
    v150 = v75;
    v77 = a1[1];
    v76 = a1 + 1;
    v78 = vshlq_n_s16(*(int16x8_t *)((char *)v76 + v60), 2uLL);
    v119 = vshlq_n_s16(v77, 2uLL);
    v120 = v78;
    v79 = vshlq_n_s16(*(int16x8_t *)((char *)v76 + v63), 2uLL);
    v121 = vshlq_n_s16(*(int16x8_t *)((char *)v76 + v62), 2uLL);
    v122 = v79;
    v80 = vshlq_n_s16(*(int16x8_t *)((char *)v76 + v66), 2uLL);
    v123 = vshlq_n_s16(*(int16x8_t *)((char *)v76 + v65), 2uLL);
    v124 = v80;
    v81 = vshlq_n_s16(*(int16x8_t *)((char *)v76 + v69 * 16 - v60), 2uLL);
    v125 = vshlq_n_s16(*(int16x8_t *)((char *)v76 + v68), 2uLL);
    v126 = v81;
    v82 = &v76[v69];
    v83 = vshlq_n_s16(*(int16x8_t *)((char *)v82 + v60), 2uLL);
    v127 = vshlq_n_s16(*v82, 2uLL);
    v128 = v83;
    v84 = vshlq_n_s16(*(int16x8_t *)((char *)v82 + v63), 2uLL);
    v129 = vshlq_n_s16(*(int16x8_t *)((char *)v82 + v62), 2uLL);
    v130 = v84;
    v85 = vshlq_n_s16(*(int16x8_t *)((char *)v82 + v66), 2uLL);
    v131 = vshlq_n_s16(*(int16x8_t *)((char *)v82 + v65), 2uLL);
    v132 = v85;
    v86 = vshlq_n_s16(*(int16x8_t *)((char *)v82 + v70), 2uLL);
    v133 = vshlq_n_s16(*(int16x8_t *)((char *)v82 + v68), 2uLL);
    v134 = v86;
    fadst16x16_neon((uint64_t)&v135, (uint64_t)&v119);
    goto LABEL_8;
  }
  v33 = 2 * a3;
  v34 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v33), 2uLL);
  v135 = vshlq_n_s16(*a1, 2uLL);
  v136 = v34;
  v35 = 4 * a3;
  v36 = 6 * a3;
  v37 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v36), 2uLL);
  v137 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v35), 2uLL);
  v138 = v37;
  v38 = 8 * a3;
  v39 = 10 * a3;
  v40 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v39), 2uLL);
  v139 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v38), 2uLL);
  v140 = v40;
  v41 = 12 * a3;
  v42 = a3;
  v43 = v42 * 16 - v33;
  v44 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v42 * 16 - v33), 2uLL);
  v141 = vshlq_n_s16(*(int16x8_t *)((char *)a1 + v41), 2uLL);
  v142 = v44;
  v45 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v42] + v33), 2uLL);
  v143 = vshlq_n_s16(a1[v42], 2uLL);
  v144 = v45;
  v46 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v42] + v36), 2uLL);
  v145 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v42] + v35), 2uLL);
  v146 = v46;
  v47 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v42] + v39), 2uLL);
  v147 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v42] + v38), 2uLL);
  v148 = v47;
  v48 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v42] + v42 * 16 - v33), 2uLL);
  v149 = vshlq_n_s16(*(int16x8_t *)((char *)&a1[v42] + v41), 2uLL);
  v150 = v48;
  v50 = a1[1];
  v49 = a1 + 1;
  v51 = vshlq_n_s16(*(int16x8_t *)((char *)v49 + v33), 2uLL);
  v119 = vshlq_n_s16(v50, 2uLL);
  v120 = v51;
  v52 = vshlq_n_s16(*(int16x8_t *)((char *)v49 + v36), 2uLL);
  v121 = vshlq_n_s16(*(int16x8_t *)((char *)v49 + v35), 2uLL);
  v122 = v52;
  v53 = vshlq_n_s16(*(int16x8_t *)((char *)v49 + v39), 2uLL);
  v123 = vshlq_n_s16(*(int16x8_t *)((char *)v49 + v38), 2uLL);
  v124 = v53;
  v54 = vshlq_n_s16(*(int16x8_t *)((char *)v49 + v42 * 16 - v33), 2uLL);
  v125 = vshlq_n_s16(*(int16x8_t *)((char *)v49 + v41), 2uLL);
  v126 = v54;
  v55 = &v49[v42];
  v56 = vshlq_n_s16(*(int16x8_t *)((char *)v55 + v33), 2uLL);
  v127 = vshlq_n_s16(*v55, 2uLL);
  v128 = v56;
  v57 = vshlq_n_s16(*(int16x8_t *)((char *)v55 + v36), 2uLL);
  v129 = vshlq_n_s16(*(int16x8_t *)((char *)v55 + v35), 2uLL);
  v130 = v57;
  v58 = vshlq_n_s16(*(int16x8_t *)((char *)v55 + v39), 2uLL);
  v131 = vshlq_n_s16(*(int16x8_t *)((char *)v55 + v38), 2uLL);
  v132 = v58;
  v59 = vshlq_n_s16(*(int16x8_t *)((char *)v55 + v43), 2uLL);
  v133 = vshlq_n_s16(*(int16x8_t *)((char *)v55 + v41), 2uLL);
  v134 = v59;
  fadst16x16_neon((uint64_t)&v135, (uint64_t)&v119);
  v135 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v135, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v135)), 2uLL);
  v136 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v136, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v136)), 2uLL);
  v137 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v137, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v137)), 2uLL);
  v138 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v138, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v138)), 2uLL);
  v139 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v139, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v139)), 2uLL);
  v140 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v140, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v140)), 2uLL);
  v141 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v141, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v141)), 2uLL);
  v142 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v142, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v142)), 2uLL);
  v143 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v143, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v143)), 2uLL);
  v144 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v144, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v144)), 2uLL);
  v145 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v145, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v145)), 2uLL);
  v146 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v146, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v146)), 2uLL);
  v147 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v147, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v147)), 2uLL);
  v148 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v148, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v148)), 2uLL);
  v149 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v149, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v149)), 2uLL);
  v150 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v150, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v150)), 2uLL);
  v119 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v119, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v119)), 2uLL);
  v120 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v120, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v120)), 2uLL);
  v121 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v121, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v121)), 2uLL);
  v122 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v122, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v122)), 2uLL);
  v123 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v123, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v123)), 2uLL);
  v124 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v124, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v124)), 2uLL);
  v125 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v125, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v125)), 2uLL);
  v126 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v126, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v126)), 2uLL);
  v127 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v127, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v127)), 2uLL);
  v128 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v128, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v128)), 2uLL);
  v129 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v129, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v129)), 2uLL);
  v130 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v130, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v130)), 2uLL);
  v131 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v131, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v131)), 2uLL);
  v132 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v132, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v132)), 2uLL);
  v133 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v133, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v133)), 2uLL);
  v134 = vshrq_n_s16(vsubq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v134, 0xFuLL), (int16x8_t)vmvnq_s8((int8x16_t)v134)), 2uLL);
  fdct16x16_neon(&v135, &v119);
LABEL_9:
  v87 = v136;
  v88 = vmovl_high_s16(v135);
  *(int32x4_t *)a2 = vmovl_s16(*(int16x4_t *)v135.i8);
  *(int32x4_t *)(a2 + 16) = v88;
  *(int32x4_t *)(a2 + 64) = vmovl_s16(*(int16x4_t *)v87.i8);
  *(int32x4_t *)(a2 + 80) = vmovl_high_s16(v87);
  v89 = v138;
  v90 = vmovl_high_s16(v137);
  *(int32x4_t *)(a2 + 128) = vmovl_s16(*(int16x4_t *)v137.i8);
  *(int32x4_t *)(a2 + 144) = v90;
  *(int32x4_t *)(a2 + 192) = vmovl_s16(*(int16x4_t *)v89.i8);
  *(int32x4_t *)(a2 + 208) = vmovl_high_s16(v89);
  v91 = v140;
  v92 = vmovl_high_s16(v139);
  *(int32x4_t *)(a2 + 256) = vmovl_s16(*(int16x4_t *)v139.i8);
  *(int32x4_t *)(a2 + 272) = v92;
  *(int32x4_t *)(a2 + 320) = vmovl_s16(*(int16x4_t *)v91.i8);
  *(int32x4_t *)(a2 + 336) = vmovl_high_s16(v91);
  v93 = v142;
  v94 = vmovl_high_s16(v141);
  *(int32x4_t *)(a2 + 384) = vmovl_s16(*(int16x4_t *)v141.i8);
  *(int32x4_t *)(a2 + 400) = v94;
  *(int32x4_t *)(a2 + 448) = vmovl_s16(*(int16x4_t *)v93.i8);
  *(int32x4_t *)(a2 + 464) = vmovl_high_s16(v93);
  v95 = v144;
  v96 = vmovl_high_s16(v143);
  *(int32x4_t *)(a2 + 512) = vmovl_s16(*(int16x4_t *)v143.i8);
  *(int32x4_t *)(a2 + 528) = v96;
  *(int32x4_t *)(a2 + 576) = vmovl_s16(*(int16x4_t *)v95.i8);
  *(int32x4_t *)(a2 + 592) = vmovl_high_s16(v95);
  v97 = v146;
  v98 = vmovl_high_s16(v145);
  *(int32x4_t *)(a2 + 640) = vmovl_s16(*(int16x4_t *)v145.i8);
  *(int32x4_t *)(a2 + 656) = v98;
  *(int32x4_t *)(a2 + 704) = vmovl_s16(*(int16x4_t *)v97.i8);
  *(int32x4_t *)(a2 + 720) = vmovl_high_s16(v97);
  v99 = v148;
  v100 = vmovl_high_s16(v147);
  *(int32x4_t *)(a2 + 768) = vmovl_s16(*(int16x4_t *)v147.i8);
  *(int32x4_t *)(a2 + 784) = v100;
  *(int32x4_t *)(a2 + 832) = vmovl_s16(*(int16x4_t *)v99.i8);
  *(int32x4_t *)(a2 + 848) = vmovl_high_s16(v99);
  v101 = v150;
  v102 = vmovl_high_s16(v149);
  *(int32x4_t *)(a2 + 896) = vmovl_s16(*(int16x4_t *)v149.i8);
  *(int32x4_t *)(a2 + 912) = v102;
  *(int32x4_t *)(a2 + 960) = vmovl_s16(*(int16x4_t *)v101.i8);
  *(int32x4_t *)(a2 + 976) = vmovl_high_s16(v101);
  v103 = v120;
  v104 = vmovl_high_s16(v119);
  *(int32x4_t *)(a2 + 32) = vmovl_s16(*(int16x4_t *)v119.i8);
  *(int32x4_t *)(a2 + 48) = v104;
  *(int32x4_t *)(a2 + 96) = vmovl_s16(*(int16x4_t *)v103.i8);
  *(int32x4_t *)(a2 + 112) = vmovl_high_s16(v103);
  v105 = v122;
  v106 = vmovl_high_s16(v121);
  *(int32x4_t *)(a2 + 160) = vmovl_s16(*(int16x4_t *)v121.i8);
  *(int32x4_t *)(a2 + 176) = v106;
  *(int32x4_t *)(a2 + 224) = vmovl_s16(*(int16x4_t *)v105.i8);
  *(int32x4_t *)(a2 + 240) = vmovl_high_s16(v105);
  v107 = v124;
  v108 = vmovl_high_s16(v123);
  *(int32x4_t *)(a2 + 288) = vmovl_s16(*(int16x4_t *)v123.i8);
  *(int32x4_t *)(a2 + 304) = v108;
  *(int32x4_t *)(a2 + 352) = vmovl_s16(*(int16x4_t *)v107.i8);
  *(int32x4_t *)(a2 + 368) = vmovl_high_s16(v107);
  v109 = v126;
  v110 = vmovl_high_s16(v125);
  *(int32x4_t *)(a2 + 416) = vmovl_s16(*(int16x4_t *)v125.i8);
  *(int32x4_t *)(a2 + 432) = v110;
  *(int32x4_t *)(a2 + 480) = vmovl_s16(*(int16x4_t *)v109.i8);
  *(int32x4_t *)(a2 + 496) = vmovl_high_s16(v109);
  v111 = v128;
  v112 = vmovl_high_s16(v127);
  *(int32x4_t *)(a2 + 544) = vmovl_s16(*(int16x4_t *)v127.i8);
  *(int32x4_t *)(a2 + 560) = v112;
  *(int32x4_t *)(a2 + 608) = vmovl_s16(*(int16x4_t *)v111.i8);
  *(int32x4_t *)(a2 + 624) = vmovl_high_s16(v111);
  v113 = v130;
  v114 = vmovl_high_s16(v129);
  *(int32x4_t *)(a2 + 672) = vmovl_s16(*(int16x4_t *)v129.i8);
  *(int32x4_t *)(a2 + 688) = v114;
  *(int32x4_t *)(a2 + 736) = vmovl_s16(*(int16x4_t *)v113.i8);
  *(int32x4_t *)(a2 + 752) = vmovl_high_s16(v113);
  v115 = v132;
  v116 = vmovl_high_s16(v131);
  *(int32x4_t *)(a2 + 800) = vmovl_s16(*(int16x4_t *)v131.i8);
  *(int32x4_t *)(a2 + 816) = v116;
  *(int32x4_t *)(a2 + 864) = vmovl_s16(*(int16x4_t *)v115.i8);
  *(int32x4_t *)(a2 + 880) = vmovl_high_s16(v115);
  v117 = v134;
  v118 = vmovl_high_s16(v133);
  *(int32x4_t *)(a2 + 928) = vmovl_s16(*(int16x4_t *)v133.i8);
  *(int32x4_t *)(a2 + 944) = v118;
  result = vmovl_s16(*(int16x4_t *)v117.i8);
  *(int32x4_t *)(a2 + 992) = result;
  *(int32x4_t *)(a2 + 1008) = vmovl_high_s16(v117);
  return result;
}

int64x2_t fadst16x16_neon(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int16x8_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t result;

  fadst16_8col(a1);
  fadst16_8col(a2);
  v4 = *(_OWORD *)(a1 + 128);
  v5 = *(_OWORD *)(a1 + 144);
  v6 = *(_OWORD *)(a1 + 160);
  v7 = *(_OWORD *)(a1 + 176);
  v8 = *(_OWORD *)(a1 + 192);
  v9 = *(_OWORD *)(a1 + 208);
  v10 = *(_OWORD *)(a1 + 224);
  v11 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)a2 = v4;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v6;
  *(_OWORD *)(a2 + 48) = v7;
  *(_OWORD *)(a2 + 64) = v8;
  *(_OWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 96) = v10;
  *(_OWORD *)(a2 + 112) = v11;
  v12 = *(int16x8_t *)(a1 + 16);
  v13 = (int32x4_t)vtrn1q_s16(*(int16x8_t *)a1, v12);
  v14 = (int32x4_t)vtrn2q_s16(*(int16x8_t *)a1, v12);
  v15 = *(int16x8_t *)(a1 + 32);
  v16 = *(int16x8_t *)(a1 + 48);
  v17 = (int32x4_t)vtrn1q_s16(v15, v16);
  v18 = (int32x4_t)vtrn2q_s16(v15, v16);
  v19 = *(int16x8_t *)(a1 + 64);
  v20 = *(int16x8_t *)(a1 + 80);
  v21 = (int32x4_t)vtrn1q_s16(v19, v20);
  v22 = (int32x4_t)vtrn2q_s16(v19, v20);
  v23 = *(int16x8_t *)(a1 + 96);
  v24 = *(int16x8_t *)(a1 + 112);
  v25 = (int32x4_t)vtrn1q_s16(v23, v24);
  v26 = (int32x4_t)vtrn2q_s16(v23, v24);
  v27 = (int64x2_t)vtrn1q_s32(v13, v17);
  v28 = (int64x2_t)vtrn2q_s32(v13, v17);
  v29 = (int64x2_t)vtrn1q_s32(v14, v18);
  v30 = (int64x2_t)vtrn2q_s32(v14, v18);
  v31 = (int64x2_t)vtrn1q_s32(v21, v25);
  v32 = (int64x2_t)vtrn2q_s32(v21, v25);
  v33 = (int64x2_t)vtrn1q_s32(v22, v26);
  v34 = (int64x2_t)vtrn2q_s32(v22, v26);
  v35 = vzip1q_s64(v27, v31);
  v36 = vzip2q_s64(v27, v31);
  v37 = vzip1q_s64(v29, v33);
  v38 = vzip2q_s64(v29, v33);
  v39 = vzip1q_s64(v28, v32);
  v40 = vzip2q_s64(v28, v32);
  v41 = vzip1q_s64(v30, v34);
  v42 = vzip2q_s64(v30, v34);
  *(int64x2_t *)a1 = v35;
  *(int64x2_t *)(a1 + 16) = v37;
  *(int64x2_t *)(a1 + 32) = v39;
  *(int64x2_t *)(a1 + 48) = v41;
  v43 = *(int16x8_t *)(a1 + 128);
  v44 = *(int16x8_t *)(a1 + 144);
  v45 = (int32x4_t)vtrn1q_s16(v43, v44);
  v46 = (int32x4_t)vtrn2q_s16(v43, v44);
  v47 = *(int16x8_t *)(a1 + 160);
  v48 = *(int16x8_t *)(a1 + 176);
  v49 = (int32x4_t)vtrn1q_s16(v47, v48);
  v50 = (int32x4_t)vtrn2q_s16(v47, v48);
  v51 = *(int16x8_t *)(a1 + 192);
  v52 = *(int16x8_t *)(a1 + 208);
  v53 = (int32x4_t)vtrn1q_s16(v51, v52);
  v54 = (int32x4_t)vtrn2q_s16(v51, v52);
  v55 = *(int16x8_t *)(a1 + 224);
  v56 = *(int16x8_t *)(a1 + 240);
  v57 = (int32x4_t)vtrn1q_s16(v55, v56);
  v58 = (int32x4_t)vtrn2q_s16(v55, v56);
  *(int64x2_t *)(a1 + 64) = v36;
  *(int64x2_t *)(a1 + 80) = v38;
  v59 = (int64x2_t)vtrn1q_s32(v45, v49);
  v60 = (int64x2_t)vtrn2q_s32(v45, v49);
  v61 = (int64x2_t)vtrn1q_s32(v46, v50);
  *(int64x2_t *)(a1 + 96) = v40;
  *(int64x2_t *)(a1 + 112) = v42;
  v62 = (int64x2_t)vtrn2q_s32(v46, v50);
  v63 = (int64x2_t)vtrn1q_s32(v53, v57);
  v64 = (int64x2_t)vtrn2q_s32(v53, v57);
  v65 = (int64x2_t)vtrn1q_s32(v54, v58);
  v66 = (int64x2_t)vtrn2q_s32(v54, v58);
  *(int64x2_t *)(a1 + 128) = vzip1q_s64(v59, v63);
  *(int64x2_t *)(a1 + 144) = vzip1q_s64(v61, v65);
  *(int64x2_t *)(a1 + 160) = vzip1q_s64(v60, v64);
  *(int64x2_t *)(a1 + 176) = vzip1q_s64(v62, v66);
  *(int64x2_t *)(a1 + 192) = vzip2q_s64(v59, v63);
  *(int64x2_t *)(a1 + 208) = vzip2q_s64(v61, v65);
  *(int64x2_t *)(a1 + 224) = vzip2q_s64(v60, v64);
  *(int64x2_t *)(a1 + 240) = vzip2q_s64(v62, v66);
  v67 = *(int16x8_t *)(a2 + 16);
  v68 = (int32x4_t)vtrn1q_s16(*(int16x8_t *)a2, v67);
  v69 = (int32x4_t)vtrn2q_s16(*(int16x8_t *)a2, v67);
  v70 = *(int16x8_t *)(a2 + 32);
  v71 = *(int16x8_t *)(a2 + 48);
  v72 = (int32x4_t)vtrn1q_s16(v70, v71);
  v73 = (int32x4_t)vtrn2q_s16(v70, v71);
  v74 = *(int16x8_t *)(a2 + 64);
  v75 = *(int16x8_t *)(a2 + 80);
  v76 = (int32x4_t)vtrn1q_s16(v74, v75);
  v77 = (int32x4_t)vtrn2q_s16(v74, v75);
  v78 = *(int16x8_t *)(a2 + 96);
  v79 = *(int16x8_t *)(a2 + 112);
  v80 = (int32x4_t)vtrn1q_s16(v78, v79);
  v81 = (int32x4_t)vtrn2q_s16(v78, v79);
  v82 = (int64x2_t)vtrn1q_s32(v68, v72);
  v83 = (int64x2_t)vtrn2q_s32(v68, v72);
  v84 = (int64x2_t)vtrn1q_s32(v69, v73);
  v85 = (int64x2_t)vtrn2q_s32(v69, v73);
  v86 = (int64x2_t)vtrn1q_s32(v76, v80);
  v87 = (int64x2_t)vtrn2q_s32(v76, v80);
  v88 = (int64x2_t)vtrn1q_s32(v77, v81);
  v89 = (int64x2_t)vtrn2q_s32(v77, v81);
  v90 = vzip1q_s64(v82, v86);
  v91 = vzip2q_s64(v82, v86);
  v92 = vzip1q_s64(v84, v88);
  v93 = vzip2q_s64(v84, v88);
  v94 = vzip1q_s64(v83, v87);
  v95 = vzip2q_s64(v83, v87);
  v96 = vzip1q_s64(v85, v89);
  v97 = vzip2q_s64(v85, v89);
  *(int64x2_t *)a2 = v90;
  *(int64x2_t *)(a2 + 16) = v92;
  *(int64x2_t *)(a2 + 32) = v94;
  *(int64x2_t *)(a2 + 48) = v96;
  v98 = *(int16x8_t *)(a2 + 128);
  v99 = *(int16x8_t *)(a2 + 144);
  v100 = (int32x4_t)vtrn1q_s16(v98, v99);
  v101 = (int32x4_t)vtrn2q_s16(v98, v99);
  v102 = *(int16x8_t *)(a2 + 160);
  v103 = *(int16x8_t *)(a2 + 176);
  v104 = (int32x4_t)vtrn1q_s16(v102, v103);
  v105 = (int32x4_t)vtrn2q_s16(v102, v103);
  v106 = *(int16x8_t *)(a2 + 192);
  v107 = *(int16x8_t *)(a2 + 208);
  v108 = (int32x4_t)vtrn1q_s16(v106, v107);
  v109 = (int32x4_t)vtrn2q_s16(v106, v107);
  v110 = *(int16x8_t *)(a2 + 224);
  v111 = *(int16x8_t *)(a2 + 240);
  v112 = (int32x4_t)vtrn1q_s16(v110, v111);
  v113 = (int32x4_t)vtrn2q_s16(v110, v111);
  *(int64x2_t *)(a2 + 64) = v91;
  *(int64x2_t *)(a2 + 80) = v93;
  *(int64x2_t *)(a2 + 96) = v95;
  *(int64x2_t *)(a2 + 112) = v97;
  v114 = (int64x2_t)vtrn1q_s32(v100, v104);
  v115 = (int64x2_t)vtrn2q_s32(v100, v104);
  v116 = (int64x2_t)vtrn1q_s32(v101, v105);
  v117 = (int64x2_t)vtrn2q_s32(v101, v105);
  v118 = (int64x2_t)vtrn1q_s32(v108, v112);
  v119 = (int64x2_t)vtrn2q_s32(v108, v112);
  v120 = (int64x2_t)vtrn1q_s32(v109, v113);
  v121 = (int64x2_t)vtrn2q_s32(v109, v113);
  v122 = vzip1q_s64(v114, v118);
  result = vzip2q_s64(v114, v118);
  *(int64x2_t *)(a2 + 128) = v122;
  *(int64x2_t *)(a2 + 144) = vzip1q_s64(v116, v120);
  *(int64x2_t *)(a2 + 160) = vzip1q_s64(v115, v119);
  *(int64x2_t *)(a2 + 176) = vzip1q_s64(v117, v121);
  *(int64x2_t *)(a2 + 192) = result;
  *(int64x2_t *)(a2 + 208) = vzip2q_s64(v116, v120);
  *(int64x2_t *)(a2 + 224) = vzip2q_s64(v115, v119);
  *(int64x2_t *)(a2 + 240) = vzip2q_s64(v117, v121);
  return result;
}

int16x8_t fdct16x16_neon(int16x8_t *a1, int16x8_t *a2)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int16x8_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int16x8_t v106;
  int16x8_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int16x8_t result;

  fdct16_8col(a1);
  fdct16_8col(a2);
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[14];
  v11 = a1[15];
  a1[8] = *a2;
  a1[9] = a2[1];
  a1[10] = a2[2];
  a1[11] = a2[3];
  a1[12] = a2[4];
  a1[13] = a2[5];
  a1[14] = a2[6];
  a1[15] = a2[7];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  a2[7] = v11;
  v12 = a1[1];
  v13 = (int32x4_t)vtrn1q_s16(*a1, v12);
  v14 = (int32x4_t)vtrn2q_s16(*a1, v12);
  v15 = a1[2];
  v16 = a1[3];
  v17 = (int32x4_t)vtrn1q_s16(v15, v16);
  v18 = (int32x4_t)vtrn2q_s16(v15, v16);
  v19 = a1[4];
  v20 = a1[5];
  v21 = (int32x4_t)vtrn1q_s16(v19, v20);
  v22 = (int32x4_t)vtrn2q_s16(v19, v20);
  v23 = a1[6];
  v24 = a1[7];
  v25 = (int32x4_t)vtrn1q_s16(v23, v24);
  v26 = (int32x4_t)vtrn2q_s16(v23, v24);
  v27 = (int64x2_t)vtrn1q_s32(v13, v17);
  v28 = (int64x2_t)vtrn2q_s32(v13, v17);
  v29 = (int64x2_t)vtrn1q_s32(v14, v18);
  v30 = (int64x2_t)vtrn2q_s32(v14, v18);
  v31 = (int64x2_t)vtrn1q_s32(v21, v25);
  v32 = (int64x2_t)vtrn2q_s32(v21, v25);
  v33 = (int64x2_t)vtrn1q_s32(v22, v26);
  v34 = (int64x2_t)vtrn2q_s32(v22, v26);
  v35 = vzip1q_s64(v27, v31);
  v36 = vzip2q_s64(v27, v31);
  v37 = vzip1q_s64(v29, v33);
  v38 = vzip2q_s64(v29, v33);
  v39 = vzip1q_s64(v28, v32);
  v40 = vzip2q_s64(v28, v32);
  v41 = vzip1q_s64(v30, v34);
  v42 = vzip2q_s64(v30, v34);
  *a1 = (int16x8_t)v35;
  a1[1] = (int16x8_t)v37;
  a1[2] = (int16x8_t)v39;
  a1[3] = (int16x8_t)v41;
  v43 = a1[8];
  v44 = a1[9];
  v45 = (int32x4_t)vtrn1q_s16(v43, v44);
  v46 = (int32x4_t)vtrn2q_s16(v43, v44);
  v47 = a1[10];
  v48 = a1[11];
  v49 = (int32x4_t)vtrn1q_s16(v47, v48);
  v50 = (int32x4_t)vtrn2q_s16(v47, v48);
  v51 = a1[12];
  v52 = a1[13];
  v53 = (int32x4_t)vtrn1q_s16(v51, v52);
  v54 = (int32x4_t)vtrn2q_s16(v51, v52);
  v55 = a1[14];
  v56 = a1[15];
  v57 = (int32x4_t)vtrn1q_s16(v55, v56);
  v58 = (int32x4_t)vtrn2q_s16(v55, v56);
  a1[4] = (int16x8_t)v36;
  a1[5] = (int16x8_t)v38;
  v59 = (int64x2_t)vtrn1q_s32(v45, v49);
  v60 = (int64x2_t)vtrn2q_s32(v45, v49);
  v61 = (int64x2_t)vtrn1q_s32(v46, v50);
  a1[6] = (int16x8_t)v40;
  a1[7] = (int16x8_t)v42;
  v62 = (int64x2_t)vtrn2q_s32(v46, v50);
  v63 = (int64x2_t)vtrn1q_s32(v53, v57);
  v64 = (int64x2_t)vtrn2q_s32(v53, v57);
  v65 = (int64x2_t)vtrn1q_s32(v54, v58);
  v66 = (int64x2_t)vtrn2q_s32(v54, v58);
  a1[8] = (int16x8_t)vzip1q_s64(v59, v63);
  a1[9] = (int16x8_t)vzip1q_s64(v61, v65);
  a1[10] = (int16x8_t)vzip1q_s64(v60, v64);
  a1[11] = (int16x8_t)vzip1q_s64(v62, v66);
  a1[12] = (int16x8_t)vzip2q_s64(v59, v63);
  a1[13] = (int16x8_t)vzip2q_s64(v61, v65);
  a1[14] = (int16x8_t)vzip2q_s64(v60, v64);
  a1[15] = (int16x8_t)vzip2q_s64(v62, v66);
  v67 = a2[1];
  v68 = (int32x4_t)vtrn1q_s16(*a2, v67);
  v69 = (int32x4_t)vtrn2q_s16(*a2, v67);
  v70 = a2[2];
  v71 = a2[3];
  v72 = (int32x4_t)vtrn1q_s16(v70, v71);
  v73 = (int32x4_t)vtrn2q_s16(v70, v71);
  v74 = a2[4];
  v75 = a2[5];
  v76 = (int32x4_t)vtrn1q_s16(v74, v75);
  v77 = (int32x4_t)vtrn2q_s16(v74, v75);
  v78 = a2[6];
  v79 = a2[7];
  v80 = (int32x4_t)vtrn1q_s16(v78, v79);
  v81 = (int32x4_t)vtrn2q_s16(v78, v79);
  v82 = (int64x2_t)vtrn1q_s32(v68, v72);
  v83 = (int64x2_t)vtrn2q_s32(v68, v72);
  v84 = (int64x2_t)vtrn1q_s32(v69, v73);
  v85 = (int64x2_t)vtrn2q_s32(v69, v73);
  v86 = (int64x2_t)vtrn1q_s32(v76, v80);
  v87 = (int64x2_t)vtrn2q_s32(v76, v80);
  v88 = (int64x2_t)vtrn1q_s32(v77, v81);
  v89 = (int64x2_t)vtrn2q_s32(v77, v81);
  v90 = vzip1q_s64(v82, v86);
  v91 = vzip2q_s64(v82, v86);
  v92 = vzip1q_s64(v84, v88);
  v93 = vzip2q_s64(v84, v88);
  v94 = vzip1q_s64(v83, v87);
  v95 = vzip2q_s64(v83, v87);
  v96 = vzip1q_s64(v85, v89);
  v97 = vzip2q_s64(v85, v89);
  *a2 = (int16x8_t)v90;
  a2[1] = (int16x8_t)v92;
  a2[2] = (int16x8_t)v94;
  a2[3] = (int16x8_t)v96;
  v98 = a2[8];
  v99 = a2[9];
  v100 = (int32x4_t)vtrn1q_s16(v98, v99);
  v101 = (int32x4_t)vtrn2q_s16(v98, v99);
  v102 = a2[10];
  v103 = a2[11];
  v104 = (int32x4_t)vtrn1q_s16(v102, v103);
  v105 = (int32x4_t)vtrn2q_s16(v102, v103);
  v106 = a2[12];
  v107 = a2[13];
  v108 = (int32x4_t)vtrn1q_s16(v106, v107);
  v109 = (int32x4_t)vtrn2q_s16(v106, v107);
  v110 = a2[14];
  v111 = a2[15];
  v112 = (int32x4_t)vtrn1q_s16(v110, v111);
  v113 = (int32x4_t)vtrn2q_s16(v110, v111);
  a2[4] = (int16x8_t)v91;
  a2[5] = (int16x8_t)v93;
  a2[6] = (int16x8_t)v95;
  a2[7] = (int16x8_t)v97;
  v114 = (int64x2_t)vtrn1q_s32(v100, v104);
  v115 = (int64x2_t)vtrn2q_s32(v100, v104);
  v116 = (int64x2_t)vtrn1q_s32(v101, v105);
  v117 = (int64x2_t)vtrn2q_s32(v101, v105);
  v118 = (int64x2_t)vtrn1q_s32(v108, v112);
  v119 = (int64x2_t)vtrn2q_s32(v108, v112);
  v120 = (int64x2_t)vtrn1q_s32(v109, v113);
  v121 = (int64x2_t)vtrn2q_s32(v109, v113);
  v122 = vzip1q_s64(v114, v118);
  result = (int16x8_t)vzip2q_s64(v114, v118);
  a2[8] = (int16x8_t)v122;
  a2[9] = (int16x8_t)vzip1q_s64(v116, v120);
  a2[10] = (int16x8_t)vzip1q_s64(v115, v119);
  a2[11] = (int16x8_t)vzip1q_s64(v117, v121);
  a2[12] = result;
  a2[13] = (int16x8_t)vzip2q_s64(v116, v120);
  a2[14] = (int16x8_t)vzip2q_s64(v115, v119);
  a2[15] = (int16x8_t)vzip2q_s64(v117, v121);
  return result;
}

int32x4_t vp9_highbd_fht4x4_neon(int16x4_t *a1, int32x4_t *a2, int a3, int a4, int16x8_t a5, int16x8_t a6)
{
  int32x4_t result;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int64x2_t v36;
  int32x4_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int64x2_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int32x4_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int64x2_t v105;
  int32x4_t v106;
  int64x2_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int64x2_t v120;
  int32x4_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int64x2_t v145;
  int64x2_t v146;
  int64x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int64x2_t v165;
  int32x4_t v166;

  if (a4 == 2)
  {
    v7 = vshll_n_s16(*a1, 4uLL);
    v8 = vshll_n_s16(*(int16x4_t *)((char *)a1 + 2 * a3), 4uLL);
    v9 = vshll_n_s16(*(int16x4_t *)((char *)a1 + 4 * a3), 4uLL);
    v10 = vshll_n_s16(*(int16x4_t *)((char *)a1 + 6 * a3), 4uLL);
    v11 = vaddq_s32(vceqq_s32(v7, (int32x4_t)xmmword_208F09650), vaddq_s32(v7, (int32x4_t)xmmword_208F08A40));
    v12 = vaddq_s32(v10, v11);
    v13 = vaddq_s32(v9, v8);
    v14 = vsubq_s32(v8, v9);
    v15 = vsubq_s32(v11, v10);
    v16 = vdupq_n_s32(0x5A820000u);
    v17 = vqrdmulhq_s32(vaddq_s32(v12, v13), v16);
    v18 = vqrdmulhq_s32(vsubq_s32(v12, v13), v16);
    v19 = vdupq_n_s32(0x3B21u);
    v20 = vdupq_n_s32(0x187Eu);
    v21 = vmull_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v20.i8);
    v22 = vmull_high_s32(v15, v20);
    v23 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v14.i8, *(int32x2_t *)v20.i8), *(int32x2_t *)v15.i8, *(int32x2_t *)v19.i8), 0xEuLL), vmlal_high_s32(vmull_high_s32(v14, v20), v15, v19), 0xEuLL);
    v24 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(v21, *(int32x2_t *)v14.i8, *(int32x2_t *)v19.i8), 0xEuLL), vmlsl_high_s32(v22, v14, v19), 0xEuLL);
    v25 = (int64x2_t)vtrn1q_s32(v17, v23);
    v26 = (int64x2_t)vtrn2q_s32(v17, v23);
    v27 = (int64x2_t)vtrn1q_s32(v18, v24);
    v28 = (int64x2_t)vtrn2q_s32(v18, v24);
    v29 = (int32x4_t)vzip1q_s64(v25, v27);
    v30 = (int32x4_t)vzip2q_s64(v25, v27);
    v31 = (int32x4_t)vzip1q_s64(v26, v28);
    v32 = vdupq_n_s32(0x14A3u);
    v33 = vdupq_n_s32(0x26C9u);
    v34 = (int32x4_t)vzip2q_s64(v26, v28);
    v35 = vdupq_n_s32(0x3B6Cu);
    v36 = vmlal_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v33.i8), *(int32x2_t *)v29.i8, *(int32x2_t *)v32.i8), *(int32x2_t *)v34.i8, *(int32x2_t *)v35.i8);
    v37 = vdupq_n_s32(0x3441u);
    v38 = vmlal_high_s32(vmlal_high_s32(vmull_high_s32(v31, v33), v29, v32), v34, v35);
    v39 = vmlsl_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v31.i8, *(int32x2_t *)v37.i8), *(int32x2_t *)v29.i8, *(int32x2_t *)v37.i8), *(int32x2_t *)v34.i8, *(int32x2_t *)v37.i8);
    v40 = vmlsl_high_s32(vmlal_high_s32(vmull_high_s32(v31, v37), v29, v37), v34, v37);
    v41 = vmlal_s32(vmlsl_s32(vmull_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v35.i8), *(int32x2_t *)v31.i8, *(int32x2_t *)v32.i8), *(int32x2_t *)v34.i8, *(int32x2_t *)v33.i8);
    v42 = vmlal_high_s32(vmlsl_high_s32(vmull_high_s32(v29, v35), v31, v32), v34, v33);
    v43 = vsubq_s64(v41, v36);
    v44 = vmlsl_s32(v41, *(int32x2_t *)v30.i8, *(int32x2_t *)v37.i8);
    v45 = vmlal_s32(v43, *(int32x2_t *)v30.i8, *(int32x2_t *)v37.i8);
    v46 = vsubq_s64(v42, v38);
    v47 = vmlsl_high_s32(v42, v30, v37);
    v48 = vmlal_high_s32(v46, v30, v37);
    v49 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v36, *(int32x2_t *)v30.i8, *(int32x2_t *)v37.i8), 0xEuLL), vmlal_high_s32(v38, v30, v37), 0xEuLL);
    v50 = vrshrn_high_n_s64(vrshrn_n_s64(v39, 0xEuLL), v40, 0xEuLL);
    v51 = vrshrn_high_n_s64(vrshrn_n_s64(v44, 0xEuLL), v47, 0xEuLL);
    v52 = vrshrn_high_n_s64(vrshrn_n_s64(v45, 0xEuLL), v48, 0xEuLL);
    v53 = vtrn1q_s32(v49, v50);
    v54 = vtrn2q_s32(v49, v50);
    v55 = vtrn1q_s32(v51, v52);
    v56 = (int32x4_t)vzip2q_s64((int64x2_t)v53, (int64x2_t)v55);
    v53.i64[1] = v55.i64[0];
    v57 = (int64x2_t)vtrn2q_s32(v51, v52);
    v55.i64[0] = 0x100000001;
    v55.i64[1] = 0x100000001;
    v58 = (int32x4_t)vzip2q_s64((int64x2_t)v54, v57);
    v54.i64[1] = v57.i64[0];
    *a2 = vshrq_n_s32(vaddq_s32(v53, v55), 2uLL);
    a2[1] = vshrq_n_s32(vaddq_s32(v54, v55), 2uLL);
    result = vshrq_n_s32(vaddq_s32(v58, v55), 2uLL);
    a2[2] = vshrq_n_s32(vaddq_s32(v56, v55), 2uLL);
    a2[3] = result;
  }
  else if (a4 == 1)
  {
    v59 = vshll_n_s16(*a1, 4uLL);
    v60 = vshll_n_s16(*(int16x4_t *)((char *)a1 + 2 * a3), 4uLL);
    v61 = vshll_n_s16(*(int16x4_t *)((char *)a1 + 4 * a3), 4uLL);
    v62 = vshll_n_s16(*(int16x4_t *)((char *)a1 + 6 * a3), 4uLL);
    v63 = vaddq_s32(vceqq_s32(v59, (int32x4_t)xmmword_208F09650), vaddq_s32(v59, (int32x4_t)xmmword_208F08A40));
    v64 = vdupq_n_s32(0x14A3u);
    v65 = vdupq_n_s32(0x26C9u);
    v66 = vdupq_n_s32(0x3B6Cu);
    v67 = vmlal_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v65.i8), *(int32x2_t *)v63.i8, *(int32x2_t *)v64.i8), *(int32x2_t *)v62.i8, *(int32x2_t *)v66.i8);
    v68 = vmlal_high_s32(vmlal_high_s32(vmull_high_s32(v60, v65), v63, v64), v62, v66);
    v69 = vdupq_n_s32(0x3441u);
    v70 = vmlsl_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v60.i8, *(int32x2_t *)v69.i8), *(int32x2_t *)v63.i8, *(int32x2_t *)v69.i8), *(int32x2_t *)v62.i8, *(int32x2_t *)v69.i8);
    v71 = vmlsl_high_s32(vmlal_high_s32(vmull_high_s32(v60, v69), v63, v69), v62, v69);
    v72 = vmlal_s32(vmlsl_s32(vmull_s32(*(int32x2_t *)v63.i8, *(int32x2_t *)v66.i8), *(int32x2_t *)v60.i8, *(int32x2_t *)v64.i8), *(int32x2_t *)v62.i8, *(int32x2_t *)v65.i8);
    v73 = vmlal_high_s32(vmlsl_high_s32(vmull_high_s32(v63, v66), v60, v64), v62, v65);
    v74 = vsubq_s64(v72, v67);
    v75 = vmlsl_s32(v72, *(int32x2_t *)v61.i8, *(int32x2_t *)v69.i8);
    v76 = vmlal_s32(v74, *(int32x2_t *)v61.i8, *(int32x2_t *)v69.i8);
    v77 = vsubq_s64(v73, v68);
    v78 = vmlsl_high_s32(v73, v61, v69);
    v79 = vmlal_high_s32(v77, v61, v69);
    v80 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v67, *(int32x2_t *)v61.i8, *(int32x2_t *)v69.i8), 0xEuLL), vmlal_high_s32(v68, v61, v69), 0xEuLL);
    v81 = vrshrn_high_n_s64(vrshrn_n_s64(v70, 0xEuLL), v71, 0xEuLL);
    v82 = vrshrn_high_n_s64(vrshrn_n_s64(v75, 0xEuLL), v78, 0xEuLL);
    v83 = vrshrn_high_n_s64(vrshrn_n_s64(v76, 0xEuLL), v79, 0xEuLL);
    v84 = vtrn1q_s32(v80, v81);
    v85 = vtrn2q_s32(v80, v81);
    v86 = (int64x2_t)vtrn1q_s32(v82, v83);
    v87 = (int64x2_t)vtrn2q_s32(v82, v83);
    v88 = (int32x4_t)vzip2q_s64((int64x2_t)v84, v86);
    v84.i64[1] = v86.i64[0];
    v89 = (int32x4_t)vzip2q_s64((int64x2_t)v85, v87);
    v85.i64[1] = v87.i64[0];
    v90 = vaddq_s32(v89, v84);
    v91 = vaddq_s32(v88, v85);
    v92 = vsubq_s32(v85, v88);
    v93 = vsubq_s32(v84, v89);
    v94 = vdupq_n_s32(0x5A820000u);
    v95 = vqrdmulhq_s32(vaddq_s32(v91, v90), v94);
    v96 = vqrdmulhq_s32(vsubq_s32(v90, v91), v94);
    v97 = vdupq_n_s32(0x3B21u);
    v98 = vdupq_n_s32(0x187Eu);
    v99 = vmlsl_s32(vmull_s32(*(int32x2_t *)v93.i8, *(int32x2_t *)v98.i8), *(int32x2_t *)v92.i8, *(int32x2_t *)v97.i8);
    v100 = vmlsl_high_s32(vmull_high_s32(v93, v98), v92, v97);
    v101 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v92.i8, *(int32x2_t *)v98.i8), *(int32x2_t *)v93.i8, *(int32x2_t *)v97.i8), 0xEuLL), vmlal_high_s32(vmull_high_s32(v92, v98), v93, v97), 0xEuLL);
    v102 = vrshrn_high_n_s64(vrshrn_n_s64(v99, 0xEuLL), v100, 0xEuLL);
    v103 = vtrn1q_s32(v95, v101);
    v104 = vtrn2q_s32(v95, v101);
    v105 = (int64x2_t)vtrn1q_s32(v96, v102);
    v106 = (int32x4_t)vzip2q_s64((int64x2_t)v103, v105);
    v103.i64[1] = v105.i64[0];
    v107 = (int64x2_t)vtrn2q_s32(v96, v102);
    v102.i64[0] = 0x100000001;
    v102.i64[1] = 0x100000001;
    v108 = vshrq_n_s32(vaddq_s32(v103, v102), 2uLL);
    v109 = (int32x4_t)vzip2q_s64((int64x2_t)v104, v107);
    v104.i64[1] = v107.i64[0];
    *a2 = v108;
    a2[1] = vshrq_n_s32(vaddq_s32(v104, v102), 2uLL);
    result = vshrq_n_s32(vaddq_s32(v109, v102), 2uLL);
    a2[2] = vshrq_n_s32(vaddq_s32(v106, v102), 2uLL);
    a2[3] = result;
  }
  else if (a4)
  {
    v110 = vshll_n_s16(*a1, 4uLL);
    v111 = vshll_n_s16(*(int16x4_t *)((char *)a1 + 2 * a3), 4uLL);
    v112 = vshll_n_s16(*(int16x4_t *)((char *)a1 + 4 * a3), 4uLL);
    v113 = vshll_n_s16(*(int16x4_t *)((char *)a1 + 6 * a3), 4uLL);
    v114 = vceqq_s32(v110, (int32x4_t)xmmword_208F09650);
    v115 = vaddq_s32(v110, (int32x4_t)xmmword_208F08A40);
    v116 = vdupq_n_s32(0x14A3u);
    v117 = vdupq_n_s32(0x26C9u);
    v118 = vaddq_s32(v114, v115);
    v119 = vdupq_n_s32(0x3B6Cu);
    v120 = vmlal_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v111.i8, *(int32x2_t *)v117.i8), *(int32x2_t *)v118.i8, *(int32x2_t *)v116.i8), *(int32x2_t *)v113.i8, *(int32x2_t *)v119.i8);
    v121 = vdupq_n_s32(0x3441u);
    v122 = vmlal_high_s32(vmlal_high_s32(vmull_high_s32(v111, v117), v118, v116), v113, v119);
    v123 = vmlsl_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v111.i8, *(int32x2_t *)v121.i8), *(int32x2_t *)v118.i8, *(int32x2_t *)v121.i8), *(int32x2_t *)v113.i8, *(int32x2_t *)v121.i8);
    v124 = vmlsl_high_s32(vmlal_high_s32(vmull_high_s32(v111, v121), v118, v121), v113, v121);
    v125 = vmlal_s32(vmlsl_s32(vmull_s32(*(int32x2_t *)v118.i8, *(int32x2_t *)v119.i8), *(int32x2_t *)v111.i8, *(int32x2_t *)v116.i8), *(int32x2_t *)v113.i8, *(int32x2_t *)v117.i8);
    v126 = vmlal_high_s32(vmlsl_high_s32(vmull_high_s32(v118, v119), v111, v116), v113, v117);
    v127 = vsubq_s64(v125, v120);
    v128 = vmlsl_s32(v125, *(int32x2_t *)v112.i8, *(int32x2_t *)v121.i8);
    v129 = vmlal_s32(v127, *(int32x2_t *)v112.i8, *(int32x2_t *)v121.i8);
    v130 = vsubq_s64(v126, v122);
    v131 = vmlsl_high_s32(v126, v112, v121);
    v132 = vmlal_high_s32(v130, v112, v121);
    v133 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v120, *(int32x2_t *)v112.i8, *(int32x2_t *)v121.i8), 0xEuLL), vmlal_high_s32(v122, v112, v121), 0xEuLL);
    v134 = vrshrn_high_n_s64(vrshrn_n_s64(v123, 0xEuLL), v124, 0xEuLL);
    v135 = vrshrn_high_n_s64(vrshrn_n_s64(v128, 0xEuLL), v131, 0xEuLL);
    v136 = vrshrn_high_n_s64(vrshrn_n_s64(v129, 0xEuLL), v132, 0xEuLL);
    v137 = (int64x2_t)vtrn1q_s32(v133, v134);
    v138 = (int64x2_t)vtrn2q_s32(v133, v134);
    v139 = (int64x2_t)vtrn1q_s32(v135, v136);
    v140 = (int64x2_t)vtrn2q_s32(v135, v136);
    v141 = (int32x4_t)vzip1q_s64(v137, v139);
    v142 = (int32x4_t)vzip2q_s64(v137, v139);
    v143 = (int32x4_t)vzip1q_s64(v138, v140);
    v144 = (int32x4_t)vzip2q_s64(v138, v140);
    v145 = vmlal_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v143.i8, *(int32x2_t *)v117.i8), *(int32x2_t *)v141.i8, *(int32x2_t *)v116.i8), *(int32x2_t *)v144.i8, *(int32x2_t *)v119.i8);
    v146 = vmlal_high_s32(vmlal_high_s32(vmull_high_s32(v143, v117), v141, v116), v144, v119);
    v147 = vmlsl_s32(vmlal_s32(vmull_s32(*(int32x2_t *)v143.i8, *(int32x2_t *)v121.i8), *(int32x2_t *)v141.i8, *(int32x2_t *)v121.i8), *(int32x2_t *)v144.i8, *(int32x2_t *)v121.i8);
    v148 = vmlsl_high_s32(vmlal_high_s32(vmull_high_s32(v143, v121), v141, v121), v144, v121);
    v149 = vmlal_s32(vmlsl_s32(vmull_s32(*(int32x2_t *)v141.i8, *(int32x2_t *)v119.i8), *(int32x2_t *)v143.i8, *(int32x2_t *)v116.i8), *(int32x2_t *)v144.i8, *(int32x2_t *)v117.i8);
    v150 = vmlal_high_s32(vmlsl_high_s32(vmull_high_s32(v141, v119), v143, v116), v144, v117);
    v151 = vsubq_s64(v149, v145);
    v152 = vmlsl_s32(v149, *(int32x2_t *)v142.i8, *(int32x2_t *)v121.i8);
    v153 = vmlal_s32(v151, *(int32x2_t *)v142.i8, *(int32x2_t *)v121.i8);
    v154 = vsubq_s64(v150, v146);
    v155 = vmlsl_high_s32(v150, v142, v121);
    v156 = vmlal_high_s32(v154, v142, v121);
    v157 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(v145, *(int32x2_t *)v142.i8, *(int32x2_t *)v121.i8), 0xEuLL), vmlal_high_s32(v146, v142, v121), 0xEuLL);
    v158 = vrshrn_high_n_s64(vrshrn_n_s64(v147, 0xEuLL), v148, 0xEuLL);
    v159 = vrshrn_high_n_s64(vrshrn_n_s64(v152, 0xEuLL), v155, 0xEuLL);
    v160 = vrshrn_high_n_s64(vrshrn_n_s64(v153, 0xEuLL), v156, 0xEuLL);
    v161 = vtrn1q_s32(v157, v158);
    v162 = vtrn2q_s32(v157, v158);
    v163 = vtrn1q_s32(v159, v160);
    v164 = (int32x4_t)vzip2q_s64((int64x2_t)v161, (int64x2_t)v163);
    v161.i64[1] = v163.i64[0];
    v165 = (int64x2_t)vtrn2q_s32(v159, v160);
    v163.i64[0] = 0x100000001;
    v163.i64[1] = 0x100000001;
    v166 = (int32x4_t)vzip2q_s64((int64x2_t)v162, v165);
    v162.i64[1] = v165.i64[0];
    *a2 = vshrq_n_s32(vaddq_s32(v161, v163), 2uLL);
    a2[1] = vshrq_n_s32(vaddq_s32(v162, v163), 2uLL);
    result = vshrq_n_s32(vaddq_s32(v166, v163), 2uLL);
    a2[2] = vshrq_n_s32(vaddq_s32(v164, v163), 2uLL);
    a2[3] = result;
  }
  else
  {
    result.i64[0] = vpx_highbd_fdct4x4_neon(a1, a2, a3, a5, a6).u64[0];
  }
  return result;
}

void vp9_highbd_fht8x8_neon(int16x4_t *a1, int32x4_t *a2, int a3, int a4)
{
  int32x4_t v5;
  int32x4_t v6;
  int16x8_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int16x8_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int32x4_t v14;
  int16x8_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int16x8_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int16x8_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int32x4_t v168;
  uint32x4_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int64x2_t v188;
  int64x2_t v189;
  int64x2_t v190;
  int64x2_t v191;
  int64x2_t v192;
  int64x2_t v193;
  int64x2_t v194;
  int64x2_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int64x2_t v198;
  int64x2_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int64x2_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int64x2_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int32x4_t v216;
  int32x4_t v217;
  uint32x4_t v218;
  int64x2_t v219;
  uint32x4_t v220;
  uint32x4_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  uint32x4_t v226;
  uint32x4_t v227;
  int64x2_t v228;
  int64x2_t v229;
  uint32x4_t v230;
  uint32x4_t v231;
  int64x2_t v232;
  int64x2_t v233;
  uint32x4_t v234;
  uint32x4_t v235;
  uint32x4_t v236;
  uint32x4_t v237;
  uint32x4_t v238;
  uint32x4_t v239;
  uint32x4_t v240;
  uint32x4_t v241;
  int16x8_t v242;
  int16x8_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int16x8_t v249;
  int32x4_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  int32x4_t v256;
  int32x4_t v257;
  int32x4_t v258;
  int32x4_t v259;
  int32x4_t v260;
  int32x4_t v261;
  int32x4_t v262;
  int32x4_t v263;
  int32x4_t v264;
  int32x4_t v265;
  int32x4_t v266;
  int32x4_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int32x4_t v270;
  int32x4_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  int32x4_t v279;
  int32x4_t v280;
  uint64_t v281;

  v281 = *MEMORY[0x24BDAC8D0];
  switch(a4)
  {
    case 2:
      v5 = vshll_n_s16(*a1, 2uLL);
      v6 = vshll_high_n_s16(*(int16x8_t *)a1->i8, 2uLL);
      v7 = *(int16x8_t *)&a1->i8[2 * a3];
      v8 = vshll_n_s16(*(int16x4_t *)v7.i8, 2uLL);
      v9 = vshll_high_n_s16(v7, 2uLL);
      v10 = *(int16x8_t *)&a1->i8[4 * a3];
      v11 = vshll_n_s16(*(int16x4_t *)v10.i8, 2uLL);
      v12 = vshll_high_n_s16(v10, 2uLL);
      v13 = *(int16x8_t *)&a1->i8[6 * a3];
      v14 = vshll_n_s16(*(int16x4_t *)v13.i8, 2uLL);
      v15 = *(int16x8_t *)a1[a3].i8;
      v16 = vshll_high_n_s16(v13, 2uLL);
      v17 = vshll_n_s16(*(int16x4_t *)v15.i8, 2uLL);
      v18 = *(int16x8_t *)&a1->i8[10 * a3];
      v19 = vshll_high_n_s16(v15, 2uLL);
      v20 = vshll_n_s16(*(int16x4_t *)v18.i8, 2uLL);
      v21 = *(int16x8_t *)&a1->i8[12 * a3];
      v22 = vshll_high_n_s16(v18, 2uLL);
      v23 = vshll_n_s16(*(int16x4_t *)v21.i8, 2uLL);
      v24 = *(int16x8_t *)&a1->i8[14 * a3];
      v25 = vshll_high_n_s16(v21, 2uLL);
      v26 = vshll_n_s16(*(int16x4_t *)v24.i8, 2uLL);
      v27 = vshll_high_n_s16(v24, 2uLL);
      v28 = vaddq_s32(v26, v5);
      v29 = vaddq_s32(v23, v8);
      v30 = vaddq_s32(v20, v11);
      v31 = vaddq_s32(v17, v14);
      v32 = vsubq_s32(v14, v17);
      v33 = vsubq_s32(v11, v20);
      v34 = vsubq_s32(v8, v23);
      v35 = vsubq_s32(v5, v26);
      v36 = vaddq_s32(v27, v6);
      v37 = vaddq_s32(v25, v9);
      v38 = vaddq_s32(v22, v12);
      v39 = vaddq_s32(v19, v16);
      v40 = vsubq_s32(v16, v19);
      v41 = vsubq_s32(v12, v22);
      v42 = vsubq_s32(v9, v25);
      v43 = vsubq_s32(v6, v27);
      v44 = vaddq_s32(v28, v31);
      v45 = vaddq_s32(v36, v39);
      v46 = vaddq_s32(v29, v30);
      v47 = vaddq_s32(v37, v38);
      v48 = vsubq_s32(v29, v30);
      v49 = vsubq_s32(v37, v38);
      v50 = vsubq_s32(v28, v31);
      v51 = vsubq_s32(v36, v39);
      v52 = vdupq_n_s32(0x5A820000u);
      v53 = vqrdmulhq_s32(vaddq_s32(v44, v46), v52);
      v54 = vqrdmulhq_s32(vaddq_s32(v45, v47), v52);
      v55 = vqrdmulhq_s32(vsubq_s32(v44, v46), v52);
      v56 = vqrdmulhq_s32(vsubq_s32(v45, v47), v52);
      v57 = vdupq_n_s32(0x3B21u);
      v58 = vdupq_n_s32(0x187Eu);
      v59 = vmull_s32(*(int32x2_t *)v50.i8, *(int32x2_t *)v58.i8);
      v60 = vmull_high_s32(v50, v58);
      v61 = vmull_s32(*(int32x2_t *)v51.i8, *(int32x2_t *)v58.i8);
      v62 = vmull_high_s32(v51, v58);
      v63 = vmlal_s32(vmull_s32(*(int32x2_t *)v48.i8, *(int32x2_t *)v58.i8), *(int32x2_t *)v50.i8, *(int32x2_t *)v57.i8);
      v64 = vmlal_high_s32(vmull_high_s32(v48, v58), v50, v57);
      v65 = vmlal_s32(vmull_s32(*(int32x2_t *)v49.i8, *(int32x2_t *)v58.i8), *(int32x2_t *)v51.i8, *(int32x2_t *)v57.i8);
      v66 = vmlal_high_s32(vmull_high_s32(v49, v58), v51, v57);
      v67 = vrshrn_high_n_s64(vrshrn_n_s64(v63, 0xEuLL), v64, 0xEuLL);
      v68 = vrshrn_high_n_s64(vrshrn_n_s64(v65, 0xEuLL), v66, 0xEuLL);
      v69 = vmlsl_s32(v61, *(int32x2_t *)v49.i8, *(int32x2_t *)v57.i8);
      v70 = vmlsl_high_s32(v62, v49, v57);
      v71 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(v59, *(int32x2_t *)v48.i8, *(int32x2_t *)v57.i8), 0xEuLL), vmlsl_high_s32(v60, v48, v57), 0xEuLL);
      v72 = vrshrn_high_n_s64(vrshrn_n_s64(v69, 0xEuLL), v70, 0xEuLL);
      v73 = vqrdmulhq_s32(vaddq_s32(v34, v33), v52);
      v74 = vqrdmulhq_s32(vaddq_s32(v42, v41), v52);
      v75 = vqrdmulhq_s32(vsubq_s32(v34, v33), v52);
      v76 = vqrdmulhq_s32(vsubq_s32(v42, v41), v52);
      v77 = vaddq_s32(v75, v32);
      v78 = vaddq_s32(v76, v40);
      v79 = vsubq_s32(v32, v75);
      v80 = vsubq_s32(v40, v76);
      v81 = vsubq_s32(v35, v73);
      v82 = vsubq_s32(v43, v74);
      v83 = vaddq_s32(v73, v35);
      v84 = vaddq_s32(v74, v43);
      v85 = vdupq_n_s32(0x3EC5u);
      v86 = vdupq_n_s32(0xC7Cu);
      v87 = vmull_s32(*(int32x2_t *)v83.i8, *(int32x2_t *)v86.i8);
      v88 = vmull_high_s32(v83, v86);
      v89 = vmull_s32(*(int32x2_t *)v84.i8, *(int32x2_t *)v86.i8);
      v90 = vmull_high_s32(v84, v86);
      v91 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v77.i8, *(int32x2_t *)v86.i8), *(int32x2_t *)v83.i8, *(int32x2_t *)v85.i8), 0xEuLL), vmlal_high_s32(vmull_high_s32(v77, v86), v83, v85), 0xEuLL);
      v92 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v78.i8, *(int32x2_t *)v86.i8), *(int32x2_t *)v84.i8, *(int32x2_t *)v85.i8), 0xEuLL), vmlal_high_s32(vmull_high_s32(v78, v86), v84, v85), 0xEuLL);
      v93 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(v87, *(int32x2_t *)v77.i8, *(int32x2_t *)v85.i8), 0xEuLL), vmlsl_high_s32(v88, v77, v85), 0xEuLL);
      v94 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(v89, *(int32x2_t *)v78.i8, *(int32x2_t *)v85.i8), 0xEuLL), vmlsl_high_s32(v90, v78, v85), 0xEuLL);
      v95 = vdupq_n_s32(0x238Eu);
      v96 = vdupq_n_s32(0x3537u);
      v97 = vmull_s32(*(int32x2_t *)v82.i8, *(int32x2_t *)v96.i8);
      v98 = vmull_high_s32(v82, v96);
      v99 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v79.i8, *(int32x2_t *)v96.i8), *(int32x2_t *)v81.i8, *(int32x2_t *)v95.i8), 0xEuLL), vmlal_high_s32(vmull_high_s32(v79, v96), v81, v95), 0xEuLL);
      v100 = vrshrn_high_n_s64(vrshrn_n_s64(vmlal_s32(vmull_s32(*(int32x2_t *)v80.i8, *(int32x2_t *)v96.i8), *(int32x2_t *)v82.i8, *(int32x2_t *)v95.i8), 0xEuLL), vmlal_high_s32(vmull_high_s32(v80, v96), v82, v95), 0xEuLL);
      v101 = vmlsl_s32(v97, *(int32x2_t *)v80.i8, *(int32x2_t *)v95.i8);
      v102 = vmlsl_high_s32(v98, v80, v95);
      v103 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(vmull_s32(*(int32x2_t *)v81.i8, *(int32x2_t *)v96.i8), *(int32x2_t *)v79.i8, *(int32x2_t *)v95.i8), 0xEuLL), vmlsl_high_s32(vmull_high_s32(v81, v96), v79, v95), 0xEuLL);
      v104 = vrshrn_high_n_s64(vrshrn_n_s64(v101, 0xEuLL), v102, 0xEuLL);
      v105 = (int64x2_t)vtrn1q_s32(v53, v91);
      v106 = (int64x2_t)vtrn2q_s32(v53, v91);
      v107 = (int64x2_t)vtrn1q_s32(v67, v103);
      v108 = (int64x2_t)vtrn2q_s32(v67, v103);
      v109 = (int64x2_t)vtrn1q_s32(v55, v99);
      v110 = (int64x2_t)vtrn2q_s32(v55, v99);
      v111 = (int64x2_t)vtrn1q_s32(v54, v92);
      v112 = (int64x2_t)vtrn2q_s32(v54, v92);
      v273 = (int32x4_t)vzip1q_s64(v105, v107);
      v274 = (int32x4_t)vzip1q_s64(v106, v108);
      v113 = (int64x2_t)vtrn1q_s32(v68, v104);
      v275 = (int32x4_t)vzip2q_s64(v105, v107);
      v276 = (int32x4_t)vzip2q_s64(v106, v108);
      v114 = (int64x2_t)vtrn2q_s32(v68, v104);
      v277 = (int32x4_t)vzip1q_s64(v111, v113);
      v278 = (int32x4_t)vzip1q_s64(v112, v114);
      v115 = (int64x2_t)vtrn1q_s32(v71, v93);
      v279 = (int32x4_t)vzip2q_s64(v111, v113);
      v280 = (int32x4_t)vzip2q_s64(v112, v114);
      v116 = (int64x2_t)vtrn2q_s32(v71, v93);
      v265 = (int32x4_t)vzip1q_s64(v109, v115);
      v266 = (int32x4_t)vzip1q_s64(v110, v116);
      v117 = (int64x2_t)vtrn1q_s32(v56, v100);
      v267 = (int32x4_t)vzip2q_s64(v109, v115);
      v268 = (int32x4_t)vzip2q_s64(v110, v116);
      v118 = (int64x2_t)vtrn2q_s32(v56, v100);
      v119 = (int64x2_t)vtrn1q_s32(v72, v94);
      v120 = (int64x2_t)vtrn2q_s32(v72, v94);
      v269 = (int32x4_t)vzip1q_s64(v117, v119);
      v270 = (int32x4_t)vzip1q_s64(v118, v120);
      v271 = (int32x4_t)vzip2q_s64(v117, v119);
      v272 = (int32x4_t)vzip2q_s64(v118, v120);
      break;
    case 1:
      v121 = *(int16x8_t *)&a1->i8[2 * a3];
      v122 = *(int16x8_t *)&a1->i8[4 * a3];
      v123 = *(int16x8_t *)&a1->i8[6 * a3];
      v124 = *(int16x8_t *)a1->i8;
      v125 = *(int16x8_t *)a1[a3].i8;
      v126 = *(int16x8_t *)&a1->i8[10 * a3];
      v127 = *(int16x8_t *)&a1->i8[12 * a3];
      v128 = *(int16x8_t *)&a1->i8[14 * a3];
      v273 = vshll_n_s16(*a1, 2uLL);
      v274 = vshll_n_s16(*(int16x4_t *)v121.i8, 2uLL);
      v265 = vshll_high_n_s16(v124, 2uLL);
      v266 = vshll_high_n_s16(v121, 2uLL);
      v275 = vshll_n_s16(*(int16x4_t *)v122.i8, 2uLL);
      v276 = vshll_n_s16(*(int16x4_t *)v123.i8, 2uLL);
      v267 = vshll_high_n_s16(v122, 2uLL);
      v268 = vshll_high_n_s16(v123, 2uLL);
      v277 = vshll_n_s16(*(int16x4_t *)v125.i8, 2uLL);
      v278 = vshll_n_s16(*(int16x4_t *)v126.i8, 2uLL);
      v269 = vshll_high_n_s16(v125, 2uLL);
      v270 = vshll_high_n_s16(v126, 2uLL);
      v279 = vshll_n_s16(*(int16x4_t *)v127.i8, 2uLL);
      v280 = vshll_n_s16(*(int16x4_t *)v128.i8, 2uLL);
      v271 = vshll_high_n_s16(v127, 2uLL);
      v272 = vshll_high_n_s16(v128, 2uLL);
      highbd_fadst8x8_neon((uint64_t)&v273, (uint64_t)&v265);
      v129 = vaddq_s32(v280, v273);
      v130 = vaddq_s32(v279, v274);
      v131 = vaddq_s32(v278, v275);
      v132 = vaddq_s32(v277, v276);
      v133 = vsubq_s32(v276, v277);
      v134 = vsubq_s32(v275, v278);
      v135 = vsubq_s32(v274, v279);
      v136 = vsubq_s32(v273, v280);
      v137 = vaddq_s32(v272, v265);
      v138 = vaddq_s32(v271, v266);
      v139 = vaddq_s32(v270, v267);
      v140 = vaddq_s32(v269, v268);
      v141 = vsubq_s32(v268, v269);
      v142 = vsubq_s32(v267, v270);
      v143 = vsubq_s32(v266, v271);
      v144 = vsubq_s32(v265, v272);
      v145 = vaddq_s32(v132, v129);
      v146 = vaddq_s32(v140, v137);
      v147 = vaddq_s32(v131, v130);
      v148 = vaddq_s32(v139, v138);
      v149 = vsubq_s32(v130, v131);
      v150 = vsubq_s32(v138, v139);
      v151 = vsubq_s32(v129, v132);
      v152 = vsubq_s32(v137, v140);
      v153 = vdupq_n_s32(0x5A820000u);
      v154 = vqrdmulhq_s32(vaddq_s32(v145, v147), v153);
      v155 = vqrdmulhq_s32(vaddq_s32(v146, v148), v153);
      v156 = vqrdmulhq_s32(vsubq_s32(v145, v147), v153);
      v157 = vqrdmulhq_s32(vsubq_s32(v146, v148), v153);
      v158 = vdupq_n_s32(0x3B21u);
      v159 = vdupq_n_s32(0x187Eu);
      v160 = vmull_s32(*(int32x2_t *)v151.i8, *(int32x2_t *)v159.i8);
      v161 = vmull_high_s32(v151, v159);
      v162 = vmull_s32(*(int32x2_t *)v152.i8, *(int32x2_t *)v159.i8);
      v163 = vmull_high_s32(v152, v159);
      v164 = vmlal_s32(vmull_s32(*(int32x2_t *)v149.i8, *(int32x2_t *)v159.i8), *(int32x2_t *)v151.i8, *(int32x2_t *)v158.i8);
      v165 = vmlal_high_s32(vmull_high_s32(v149, v159), v151, v158);
      v166 = vmlal_s32(vmull_s32(*(int32x2_t *)v150.i8, *(int32x2_t *)v159.i8), *(int32x2_t *)v152.i8, *(int32x2_t *)v158.i8);
      v167 = vmlal_high_s32(vmull_high_s32(v150, v159), v152, v158);
      v168 = vrshrn_high_n_s64(vrshrn_n_s64(v164, 0xEuLL), v165, 0xEuLL);
      v169 = (uint32x4_t)vrshrn_high_n_s64(vrshrn_n_s64(v166, 0xEuLL), v167, 0xEuLL);
      v170 = vmlsl_s32(v162, *(int32x2_t *)v150.i8, *(int32x2_t *)v158.i8);
      v171 = vmlsl_high_s32(v163, v150, v158);
      v172 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(v160, *(int32x2_t *)v149.i8, *(int32x2_t *)v158.i8), 0xEuLL), vmlsl_high_s32(v161, v149, v158), 0xEuLL);
      v173 = vrshrn_high_n_s64(vrshrn_n_s64(v170, 0xEuLL), v171, 0xEuLL);
      v174 = vqrdmulhq_s32(vaddq_s32(v134, v135), v153);
      v175 = vqrdmulhq_s32(vaddq_s32(v142, v143), v153);
      v176 = vqrdmulhq_s32(vsubq_s32(v135, v134), v153);
      v177 = vqrdmulhq_s32(vsubq_s32(v143, v142), v153);
      v178 = vaddq_s32(v176, v133);
      v179 = vaddq_s32(v177, v141);
      v180 = vsubq_s32(v133, v176);
      v181 = vsubq_s32(v141, v177);
      v182 = vsubq_s32(v136, v174);
      v183 = vsubq_s32(v144, v175);
      v184 = vaddq_s32(v174, v136);
      v185 = vaddq_s32(v175, v144);
      v186 = vdupq_n_s32(0x3EC5u);
      v187 = vdupq_n_s32(0xC7Cu);
      v188 = vmull_s32(*(int32x2_t *)v184.i8, *(int32x2_t *)v187.i8);
      v189 = vmull_high_s32(v184, v187);
      v190 = vmull_s32(*(int32x2_t *)v185.i8, *(int32x2_t *)v187.i8);
      v191 = vmull_high_s32(v185, v187);
      v192 = vmlal_s32(vmull_s32(*(int32x2_t *)v178.i8, *(int32x2_t *)v187.i8), *(int32x2_t *)v184.i8, *(int32x2_t *)v186.i8);
      v193 = vmlal_high_s32(vmull_high_s32(v178, v187), v184, v186);
      v194 = vmlal_s32(vmull_s32(*(int32x2_t *)v179.i8, *(int32x2_t *)v187.i8), *(int32x2_t *)v185.i8, *(int32x2_t *)v186.i8);
      v195 = vmlal_high_s32(vmull_high_s32(v179, v187), v185, v186);
      v196 = vrshrn_high_n_s64(vrshrn_n_s64(v192, 0xEuLL), v193, 0xEuLL);
      v197 = vrshrn_high_n_s64(vrshrn_n_s64(v194, 0xEuLL), v195, 0xEuLL);
      v198 = vmlsl_s32(v190, *(int32x2_t *)v179.i8, *(int32x2_t *)v186.i8);
      v199 = vmlsl_high_s32(v191, v179, v186);
      v200 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(v188, *(int32x2_t *)v178.i8, *(int32x2_t *)v186.i8), 0xEuLL), vmlsl_high_s32(v189, v178, v186), 0xEuLL);
      v201 = vrshrn_high_n_s64(vrshrn_n_s64(v198, 0xEuLL), v199, 0xEuLL);
      v202 = vdupq_n_s32(0x238Eu);
      v203 = vdupq_n_s32(0x3537u);
      v204 = vmull_s32(*(int32x2_t *)v182.i8, *(int32x2_t *)v203.i8);
      v205 = vmull_high_s32(v182, v203);
      v206 = vmull_s32(*(int32x2_t *)v183.i8, *(int32x2_t *)v203.i8);
      v207 = vmull_high_s32(v183, v203);
      v208 = vmlal_s32(vmull_s32(*(int32x2_t *)v180.i8, *(int32x2_t *)v203.i8), *(int32x2_t *)v182.i8, *(int32x2_t *)v202.i8);
      v209 = vmlal_high_s32(vmull_high_s32(v180, v203), v182, v202);
      v210 = vmlal_s32(vmull_s32(*(int32x2_t *)v181.i8, *(int32x2_t *)v203.i8), *(int32x2_t *)v183.i8, *(int32x2_t *)v202.i8);
      v211 = vmlal_high_s32(vmull_high_s32(v181, v203), v183, v202);
      v212 = vrshrn_high_n_s64(vrshrn_n_s64(v208, 0xEuLL), v209, 0xEuLL);
      v213 = vrshrn_high_n_s64(vrshrn_n_s64(v210, 0xEuLL), v211, 0xEuLL);
      v214 = vmlsl_s32(v206, *(int32x2_t *)v181.i8, *(int32x2_t *)v202.i8);
      v215 = vmlsl_high_s32(v207, v181, v202);
      v216 = vrshrn_high_n_s64(vrshrn_n_s64(vmlsl_s32(v204, *(int32x2_t *)v180.i8, *(int32x2_t *)v202.i8), 0xEuLL), vmlsl_high_s32(v205, v180, v202), 0xEuLL);
      v217 = vrshrn_high_n_s64(vrshrn_n_s64(v214, 0xEuLL), v215, 0xEuLL);
      v218 = (uint32x4_t)vtrn1q_s32(v154, v196);
      v219 = (int64x2_t)vtrn2q_s32(v154, v196);
      v220 = (uint32x4_t)vtrn1q_s32(v168, v216);
      v221 = (uint32x4_t)vtrn2q_s32(v168, v216);
      v222 = (int64x2_t)vtrn1q_s32(v156, v212);
      v223 = (int64x2_t)vtrn2q_s32(v156, v212);
      v224 = (int64x2_t)vtrn1q_s32(v172, v200);
      v225 = (int64x2_t)vtrn2q_s32(v172, v200);
      v226 = (uint32x4_t)vtrn1q_s32(v155, v197);
      v227 = (uint32x4_t)vtrn2q_s32(v155, v197);
      v228 = (int64x2_t)vtrn1q_s32((int32x4_t)v169, v217);
      v229 = (int64x2_t)vtrn2q_s32((int32x4_t)v169, v217);
      v230 = (uint32x4_t)vtrn1q_s32(v157, v213);
      v231 = (uint32x4_t)vtrn2q_s32(v157, v213);
      v232 = (int64x2_t)vtrn1q_s32(v173, v201);
      v233 = (int64x2_t)vtrn2q_s32(v173, v201);
      v234 = (uint32x4_t)vzip2q_s64((int64x2_t)v218, (int64x2_t)v220);
      v218.i64[1] = v220.i64[0];
      v235 = (uint32x4_t)vzip2q_s64(v222, v224);
      v220.i64[0] = v222.i64[0];
      v220.i64[1] = v224.i64[0];
      v236 = (uint32x4_t)vzip2q_s64(v219, (int64x2_t)v221);
      v169.i64[0] = v219.i64[0];
      v169.i64[1] = v221.i64[0];
      v237 = (uint32x4_t)vzip2q_s64(v223, v225);
      v221.i64[0] = v223.i64[0];
      v221.i64[1] = v225.i64[0];
      v238 = (uint32x4_t)vzip2q_s64((int64x2_t)v226, v228);
      v226.i64[1] = v228.i64[0];
      v239 = (uint32x4_t)vzip2q_s64((int64x2_t)v230, v232);
      v230.i64[1] = v232.i64[0];
      v240 = (uint32x4_t)vzip2q_s64((int64x2_t)v227, v229);
      v227.i64[1] = v229.i64[0];
      v241 = (uint32x4_t)vzip2q_s64((int64x2_t)v231, v233);
      v231.i64[1] = v233.i64[0];
      *a2 = vshrq_n_s32((int32x4_t)vsraq_n_u32(v218, v218, 0x1FuLL), 1uLL);
      a2[1] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v220, v220, 0x1FuLL), 1uLL);
      a2[2] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v169, v169, 0x1FuLL), 1uLL);
      a2[3] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v221, v221, 0x1FuLL), 1uLL);
      a2[4] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v234, v234, 0x1FuLL), 1uLL);
      a2[5] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v235, v235, 0x1FuLL), 1uLL);
      a2[6] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v236, v236, 0x1FuLL), 1uLL);
      a2[7] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v237, v237, 0x1FuLL), 1uLL);
      a2[8] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v226, v226, 0x1FuLL), 1uLL);
      a2[9] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v230, v230, 0x1FuLL), 1uLL);
      a2[10] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v227, v227, 0x1FuLL), 1uLL);
      a2[11] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v231, v231, 0x1FuLL), 1uLL);
      a2[12] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v238, v238, 0x1FuLL), 1uLL);
      a2[13] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v239, v239, 0x1FuLL), 1uLL);
      a2[14] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v240, v240, 0x1FuLL), 1uLL);
      a2[15] = vshrq_n_s32((int32x4_t)vsraq_n_u32(v241, v241, 0x1FuLL), 1uLL);
      return;
    case 0:
      vpx_highbd_fdct8x8_neon(a1, a2, a3);
      return;
    default:
      v242 = *(int16x8_t *)&a1->i8[2 * a3];
      v243 = *(int16x8_t *)&a1->i8[4 * a3];
      v244 = *(int16x8_t *)&a1->i8[6 * a3];
      v245 = *(int16x8_t *)a1->i8;
      v246 = *(int16x8_t *)a1[a3].i8;
      v247 = *(int16x8_t *)&a1->i8[10 * a3];
      v248 = *(int16x8_t *)&a1->i8[12 * a3];
      v249 = *(int16x8_t *)&a1->i8[14 * a3];
      v273 = vshll_n_s16(*a1, 2uLL);
      v274 = vshll_n_s16(*(int16x4_t *)v242.i8, 2uLL);
      v265 = vshll_high_n_s16(v245, 2uLL);
      v266 = vshll_high_n_s16(v242, 2uLL);
      v275 = vshll_n_s16(*(int16x4_t *)v243.i8, 2uLL);
      v276 = vshll_n_s16(*(int16x4_t *)v244.i8, 2uLL);
      v267 = vshll_high_n_s16(v243, 2uLL);
      v268 = vshll_high_n_s16(v244, 2uLL);
      v277 = vshll_n_s16(*(int16x4_t *)v246.i8, 2uLL);
      v278 = vshll_n_s16(*(int16x4_t *)v247.i8, 2uLL);
      v269 = vshll_high_n_s16(v246, 2uLL);
      v270 = vshll_high_n_s16(v247, 2uLL);
      v279 = vshll_n_s16(*(int16x4_t *)v248.i8, 2uLL);
      v280 = vshll_n_s16(*(int16x4_t *)v249.i8, 2uLL);
      v271 = vshll_high_n_s16(v248, 2uLL);
      v272 = vshll_high_n_s16(v249, 2uLL);
      highbd_fadst8x8_neon((uint64_t)&v273, (uint64_t)&v265);
      break;
  }
  highbd_fadst8x8_neon((uint64_t)&v273, (uint64_t)&v265);
  v250 = (int32x4_t)vsraq_n_u32((uint32x4_t)v270, (uint32x4_t)v270, 0x1FuLL);
  v251 = (int32x4_t)vsraq_n_u32((uint32x4_t)v279, (uint32x4_t)v279, 0x1FuLL);
  v252 = (int32x4_t)vsraq_n_u32((uint32x4_t)v271, (uint32x4_t)v271, 0x1FuLL);
  v253 = (int32x4_t)vsraq_n_u32((uint32x4_t)v280, (uint32x4_t)v280, 0x1FuLL);
  v254 = (int32x4_t)vsraq_n_u32((uint32x4_t)v272, (uint32x4_t)v272, 0x1FuLL);
  v255 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v265, (uint32x4_t)v265, 0x1FuLL), 1uLL);
  v256 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v274, (uint32x4_t)v274, 0x1FuLL), 1uLL);
  v257 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v266, (uint32x4_t)v266, 0x1FuLL), 1uLL);
  v258 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v275, (uint32x4_t)v275, 0x1FuLL), 1uLL);
  v259 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v267, (uint32x4_t)v267, 0x1FuLL), 1uLL);
  v260 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v276, (uint32x4_t)v276, 0x1FuLL), 1uLL);
  v261 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v268, (uint32x4_t)v268, 0x1FuLL), 1uLL);
  v262 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v277, (uint32x4_t)v277, 0x1FuLL), 1uLL);
  v263 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v269, (uint32x4_t)v269, 0x1FuLL), 1uLL);
  v264 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v278, (uint32x4_t)v278, 0x1FuLL), 1uLL);
  *a2 = vshrq_n_s32((int32x4_t)vsraq_n_u32((uint32x4_t)v273, (uint32x4_t)v273, 0x1FuLL), 1uLL);
  a2[1] = v255;
  a2[2] = v256;
  a2[3] = v257;
  a2[4] = v258;
  a2[5] = v259;
  a2[6] = v260;
  a2[7] = v261;
  a2[8] = v262;
  a2[9] = v263;
  a2[10] = v264;
  a2[11] = vshrq_n_s32(v250, 1uLL);
  a2[12] = vshrq_n_s32(v251, 1uLL);
  a2[13] = vshrq_n_s32(v252, 1uLL);
  a2[14] = vshrq_n_s32(v253, 1uLL);
  a2[15] = vshrq_n_s32(v254, 1uLL);
}

int64x2_t highbd_fadst8x8_neon(uint64_t a1, uint64_t a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int64x2_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int32x4_t v36;
  int64x2_t v37;
  int32x4_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int32x4_t v48;
  int32x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  int64x2_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int64x2_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t result;
  int64x2_t v117;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int32x4_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int64x2_t v138;

  v2 = vdupq_n_s32(0x3FB1u);
  v3 = vdupq_n_s32(0x646u);
  v5 = *(int32x4_t *)(a1 + 96);
  v4 = *(int32x4_t *)(a1 + 112);
  v7 = *(int32x4_t *)(a2 + 96);
  v6 = *(int32x4_t *)(a2 + 112);
  v8 = *(int32x4_t *)(a1 + 16);
  v130 = vmlal_s32(vmull_s32(*(int32x2_t *)a1, *(int32x2_t *)v3.i8), *(int32x2_t *)v4.i8, *(int32x2_t *)v2.i8);
  v128 = vmlal_high_s32(vmull_high_s32(*(int32x4_t *)a1, v3), v4, v2);
  v9 = *(int32x4_t *)(a2 + 16);
  v127 = vmlal_s32(vmull_s32(*(int32x2_t *)a2, *(int32x2_t *)v3.i8), *(int32x2_t *)v6.i8, *(int32x2_t *)v2.i8);
  v138 = vmlal_high_s32(vmull_high_s32(*(int32x4_t *)a2, v3), v6, v2);
  v129 = vmlsl_s32(vmull_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v3.i8), *(int32x2_t *)a1, *(int32x2_t *)v2.i8);
  v10 = vmlsl_high_s32(vmull_high_s32(v4, v3), *(int32x4_t *)a1, v2);
  v131 = vmlsl_s32(vmull_s32(*(int32x2_t *)v6.i8, *(int32x2_t *)v3.i8), *(int32x2_t *)a2, *(int32x2_t *)v2.i8);
  v132 = vmlsl_high_s32(vmull_high_s32(v6, v3), *(int32x4_t *)a2, v2);
  v11 = vdupq_n_s32(0x3871u);
  v12 = vdupq_n_s32(0x1E2Bu);
  v13 = *(int32x4_t *)(a1 + 64);
  v14 = *(int32x4_t *)(a1 + 80);
  v15 = vmull_s32(*(int32x2_t *)v14.i8, *(int32x2_t *)v12.i8);
  v16 = vmull_high_s32(v14, v12);
  v17 = *(int32x4_t *)(a2 + 64);
  v18 = *(int32x4_t *)(a2 + 80);
  v19 = vmull_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v12.i8);
  v20 = vmull_high_s32(v18, v12);
  v21 = *(int32x4_t *)(a1 + 32);
  v22 = *(int32x4_t *)(a1 + 48);
  v126 = vmlal_s32(vmull_s32(*(int32x2_t *)v21.i8, *(int32x2_t *)v12.i8), *(int32x2_t *)v14.i8, *(int32x2_t *)v11.i8);
  v125 = vmlal_high_s32(vmull_high_s32(v21, v12), v14, v11);
  v24 = *(int32x4_t *)(a2 + 32);
  v23 = *(int32x4_t *)(a2 + 48);
  v123 = vmlal_high_s32(vmull_high_s32(v24, v12), v18, v11);
  v124 = vmlal_s32(vmull_s32(*(int32x2_t *)v24.i8, *(int32x2_t *)v12.i8), *(int32x2_t *)v18.i8, *(int32x2_t *)v11.i8);
  v25 = vdupq_n_s32(0x289Au);
  v119 = vmlsl_s32(v15, *(int32x2_t *)v21.i8, *(int32x2_t *)v11.i8);
  v120 = vmlsl_high_s32(v16, v21, v11);
  v26 = vdupq_n_s32(0x3179u);
  v27 = vmlsl_s32(v19, *(int32x2_t *)v24.i8, *(int32x2_t *)v11.i8);
  v122 = vmlsl_high_s32(v20, v24, v11);
  v28 = vmull_s32(*(int32x2_t *)v22.i8, *(int32x2_t *)v26.i8);
  v29 = vmull_high_s32(v22, v26);
  v30 = vmull_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v26.i8);
  v31 = vmull_high_s32(v23, v26);
  v32 = vmlal_s32(vmull_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v26.i8), *(int32x2_t *)v22.i8, *(int32x2_t *)v25.i8);
  v33 = vmlal_high_s32(vmull_high_s32(v13, v26), v22, v25);
  v34 = vmlal_s32(vmull_s32(*(int32x2_t *)v17.i8, *(int32x2_t *)v26.i8), *(int32x2_t *)v23.i8, *(int32x2_t *)v25.i8);
  v35 = vmlal_high_s32(vmull_high_s32(v17, v26), v23, v25);
  v36 = vdupq_n_s32(0x1294u);
  v37 = vmlsl_s32(v28, *(int32x2_t *)v13.i8, *(int32x2_t *)v25.i8);
  v38 = vdupq_n_s32(0x3D3Fu);
  v39 = vmlsl_high_s32(v29, v13, v25);
  v117 = vmlsl_high_s32(v31, v17, v25);
  v118 = vmlsl_s32(v30, *(int32x2_t *)v17.i8, *(int32x2_t *)v25.i8);
  v40 = vmlal_s32(vmull_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v38.i8), *(int32x2_t *)v8.i8, *(int32x2_t *)v36.i8);
  v41 = vmlal_high_s32(vmull_high_s32(v5, v38), v8, v36);
  v42 = vmlal_s32(vmull_s32(*(int32x2_t *)v7.i8, *(int32x2_t *)v38.i8), *(int32x2_t *)v9.i8, *(int32x2_t *)v36.i8);
  v43 = vmlal_high_s32(vmull_high_s32(v7, v38), v9, v36);
  v44 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, *(int32x2_t *)v38.i8), *(int32x2_t *)v5.i8, *(int32x2_t *)v36.i8);
  v45 = vmlsl_high_s32(vmull_high_s32(v8, v38), v5, v36);
  v46 = vmlsl_s32(vmull_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v38.i8), *(int32x2_t *)v7.i8, *(int32x2_t *)v36.i8);
  v47 = vmlsl_high_s32(vmull_high_s32(v9, v38), v7, v36);
  v134 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v32, v130), 0xEuLL), vaddq_s64(v33, v128), 0xEuLL);
  v133 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v34, v127), 0xEuLL), vaddq_s64(v35, v138), 0xEuLL);
  v137 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v37, v129), 0xEuLL), vaddq_s64(v39, v10), 0xEuLL);
  v121 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v40, v126), 0xEuLL), vaddq_s64(v41, v125), 0xEuLL);
  v48 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v42, v124), 0xEuLL), vaddq_s64(v43, v123), 0xEuLL);
  v135 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v44, v119), 0xEuLL), vaddq_s64(v45, v120), 0xEuLL);
  v136 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v46, v27), 0xEuLL), vaddq_s64(v47, v122), 0xEuLL);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v130, v32), 0xEuLL);
  *(int32x2_t *)v19.i8 = vrshrn_n_s64(vsubq_s64(v128, v33), 0xEuLL);
  *(int32x2_t *)v20.i8 = vrshrn_n_s64(vsubq_s64(v127, v34), 0xEuLL);
  v49 = vrshrn_n_s64(vsubq_s64(v138, v35), 0xEuLL);
  *(int32x2_t *)v7.i8 = vrshrn_n_s64(vsubq_s64(v129, v37), 0xEuLL);
  *(int32x2_t *)v37.i8 = vrshrn_n_s64(vsubq_s64(v10, v39), 0xEuLL);
  *(int32x2_t *)v5.i8 = vrshrn_n_s64(vsubq_s64(v131, v118), 0xEuLL);
  *(int32x2_t *)v32.i8 = vrshrn_n_s64(vsubq_s64(v132, v117), 0xEuLL);
  *(int32x2_t *)v30.i8 = vrshrn_n_s64(vsubq_s64(v126, v40), 0xEuLL);
  *(int32x2_t *)v13.i8 = vrshrn_n_s64(vsubq_s64(v125, v41), 0xEuLL);
  *(int32x2_t *)v17.i8 = vrshrn_n_s64(vsubq_s64(v124, v42), 0xEuLL);
  *(int32x2_t *)v38.i8 = vrshrn_n_s64(vsubq_s64(v123, v43), 0xEuLL);
  *(int32x2_t *)v39.i8 = vrshrn_n_s64(vsubq_s64(v119, v44), 0xEuLL);
  *(int32x2_t *)v45.i8 = vrshrn_n_s64(vsubq_s64(v120, v45), 0xEuLL);
  *(int32x2_t *)v33.i8 = vrshrn_n_s64(vsubq_s64(v27, v46), 0xEuLL);
  *(int32x2_t *)v34.i8 = vrshrn_n_s64(vsubq_s64(v122, v47), 0xEuLL);
  *(int32x2_t *)v41.i8 = vdup_n_s32(0x3B21u);
  *(int32x2_t *)v15.i8 = vdup_n_s32(0x187Eu);
  v50 = vmull_s32(*(int32x2_t *)v8.i8, *(int32x2_t *)v15.i8);
  v51 = vmlal_s32(vmull_s32(*(int32x2_t *)v7.i8, *(int32x2_t *)v15.i8), *(int32x2_t *)v8.i8, *(int32x2_t *)v41.i8);
  v52 = vmlal_s32(vmull_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v15.i8), *(int32x2_t *)v19.i8, *(int32x2_t *)v41.i8);
  v53 = vmlal_s32(vmull_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v15.i8), *(int32x2_t *)v20.i8, *(int32x2_t *)v41.i8);
  v54 = vmlal_s32(vmull_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v15.i8), v49, *(int32x2_t *)v41.i8);
  v55 = vmlsl_s32(v50, *(int32x2_t *)v7.i8, *(int32x2_t *)v41.i8);
  v56 = vmlsl_s32(vmull_s32(*(int32x2_t *)v19.i8, *(int32x2_t *)v15.i8), *(int32x2_t *)v37.i8, *(int32x2_t *)v41.i8);
  v57 = vmlsl_s32(vmull_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v15.i8), *(int32x2_t *)v5.i8, *(int32x2_t *)v41.i8);
  v58 = vmlsl_s32(vmull_s32(v49, *(int32x2_t *)v15.i8), *(int32x2_t *)v32.i8, *(int32x2_t *)v41.i8);
  *(int32x2_t *)v7.i8 = vdup_n_s32(0xFFFFE782);
  v59 = vmull_s32(*(int32x2_t *)v30.i8, *(int32x2_t *)v41.i8);
  v60 = vmull_s32(*(int32x2_t *)v13.i8, *(int32x2_t *)v41.i8);
  v61 = vmull_s32(*(int32x2_t *)v17.i8, *(int32x2_t *)v41.i8);
  v62 = vmlal_s32(vmull_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v30.i8, *(int32x2_t *)v7.i8);
  v63 = vmlal_s32(vmull_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v13.i8, *(int32x2_t *)v7.i8);
  v64 = vmlal_s32(vmull_s32(*(int32x2_t *)v33.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v17.i8, *(int32x2_t *)v7.i8);
  v65 = vmull_s32(*(int32x2_t *)v38.i8, *(int32x2_t *)v41.i8);
  v66 = vmlal_s32(vmull_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v41.i8), *(int32x2_t *)v38.i8, *(int32x2_t *)v7.i8);
  v67 = vmlsl_s32(v59, *(int32x2_t *)v39.i8, *(int32x2_t *)v7.i8);
  v68 = vmlsl_s32(v60, *(int32x2_t *)v45.i8, *(int32x2_t *)v7.i8);
  v69 = vmlsl_s32(v61, *(int32x2_t *)v33.i8, *(int32x2_t *)v7.i8);
  v70 = vmlsl_s32(v65, *(int32x2_t *)v34.i8, *(int32x2_t *)v7.i8);
  v71 = vsubq_s32(v134, v121);
  v72 = vsubq_s32(v133, v48);
  v73 = vrshrn_high_n_s64(vrshrn_n_s64(vsubq_s64(v51, v62), 0xEuLL), vsubq_s64(v52, v63), 0xEuLL);
  v74 = vrshrn_high_n_s64(vrshrn_n_s64(vsubq_s64(v53, v64), 0xEuLL), vsubq_s64(v54, v66), 0xEuLL);
  v75 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v67, v55), 0xEuLL), vaddq_s64(v68, v56), 0xEuLL);
  v76 = vsubq_s64(v55, v67);
  v77 = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v118, v131), 0xEuLL), vaddq_s64(v117, v132), 0xEuLL);
  v78 = vsubq_s32(v137, v135);
  v79 = vrshrn_high_n_s64(vrshrn_n_s64(v76, 0xEuLL), vsubq_s64(v56, v68), 0xEuLL);
  v80 = vrshrn_high_n_s64(vrshrn_n_s64(vsubq_s64(v57, v69), 0xEuLL), vsubq_s64(v58, v70), 0xEuLL);
  v81 = vsubq_s32(v77, v136);
  *(int32x4_t *)a1 = vaddq_s32(v121, v134);
  v82 = vdupq_n_s32(0x5A820000u);
  *(int32x4_t *)a2 = vaddq_s32(v48, v133);
  *(int32x4_t *)(a1 + 32) = vqrdmulhq_s32(vaddq_s32(v79, v73), v82);
  *(int32x4_t *)(a2 + 32) = vqrdmulhq_s32(vaddq_s32(v80, v74), v82);
  *(int32x4_t *)(a1 + 64) = vqrdmulhq_s32(vsubq_s32(v71, v78), v82);
  *(int32x4_t *)(a2 + 64) = vqrdmulhq_s32(vsubq_s32(v72, v81), v82);
  *(int32x4_t *)(a1 + 96) = v75;
  *(int32x4_t *)(a2 + 96) = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v69, v57), 0xEuLL), vaddq_s64(v70, v58), 0xEuLL);
  *(int32x4_t *)(a1 + 16) = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v62, v51), 0xEuLL), vaddq_s64(v63, v52), 0xEuLL));
  *(int32x4_t *)(a2 + 16) = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v64, v53), 0xEuLL), vaddq_s64(v66, v54), 0xEuLL));
  *(int32x4_t *)(a1 + 48) = vnegq_s32(vqrdmulhq_s32(vaddq_s32(v78, v71), v82));
  *(int32x4_t *)(a2 + 48) = vnegq_s32(vqrdmulhq_s32(vaddq_s32(v81, v72), v82));
  *(int32x4_t *)(a1 + 80) = vnegq_s32(vqrdmulhq_s32(vsubq_s32(v73, v79), v82));
  *(int32x4_t *)(a2 + 80) = vnegq_s32(vqrdmulhq_s32(vsubq_s32(v74, v80), v82));
  *(int32x4_t *)(a1 + 112) = vnegq_s32(vaddq_s32(v137, v135));
  v83 = vnegq_s32(vaddq_s32(v77, v136));
  *(int32x4_t *)(a2 + 112) = v83;
  v84 = *(int32x4_t *)(a1 + 16);
  v85 = *(int32x4_t *)a2;
  v86 = *(int32x4_t *)(a2 + 16);
  v87 = *(int32x4_t *)(a1 + 32);
  v88 = *(int32x4_t *)(a1 + 48);
  v89 = *(int32x4_t *)(a2 + 32);
  v90 = *(int32x4_t *)(a2 + 48);
  v91 = *(int32x4_t *)(a2 + 64);
  v92 = *(int32x4_t *)(a2 + 80);
  v93 = *(int32x4_t *)(a2 + 96);
  v94 = (int64x2_t)vtrn1q_s32(*(int32x4_t *)a1, v84);
  v95 = (int64x2_t)vtrn2q_s32(*(int32x4_t *)a1, v84);
  v96 = (int64x2_t)vtrn1q_s32(v87, v88);
  v97 = (int64x2_t)vtrn2q_s32(v87, v88);
  *(int64x2_t *)a1 = vzip1q_s64(v94, v96);
  *(int64x2_t *)(a1 + 16) = vzip1q_s64(v95, v97);
  v98 = (int64x2_t)vtrn1q_s32(v85, v86);
  v99 = (int64x2_t)vtrn2q_s32(v85, v86);
  v100 = vzip2q_s64(v95, v97);
  v101 = *(int32x4_t *)(a1 + 64);
  v102 = *(int32x4_t *)(a1 + 80);
  *(int64x2_t *)(a1 + 32) = vzip2q_s64(v94, v96);
  *(int64x2_t *)(a1 + 48) = v100;
  v103 = (int64x2_t)vtrn1q_s32(v89, v90);
  v104 = (int64x2_t)vtrn2q_s32(v89, v90);
  *(int64x2_t *)(a1 + 64) = vzip1q_s64(v98, v103);
  *(int64x2_t *)(a1 + 80) = vzip1q_s64(v99, v104);
  v105 = (int64x2_t)vtrn1q_s32(v101, v102);
  v106 = (int64x2_t)vtrn2q_s32(v101, v102);
  v107 = vzip2q_s64(v99, v104);
  v108 = *(int32x4_t *)(a1 + 96);
  v109 = *(int32x4_t *)(a1 + 112);
  *(int64x2_t *)(a1 + 96) = vzip2q_s64(v98, v103);
  *(int64x2_t *)(a1 + 112) = v107;
  v110 = (int64x2_t)vtrn1q_s32(v108, v109);
  v111 = (int64x2_t)vtrn2q_s32(v108, v109);
  *(int64x2_t *)a2 = vzip1q_s64(v105, v110);
  *(int64x2_t *)(a2 + 16) = vzip1q_s64(v106, v111);
  *(int64x2_t *)(a2 + 32) = vzip2q_s64(v105, v110);
  *(int64x2_t *)(a2 + 48) = vzip2q_s64(v106, v111);
  v112 = (int64x2_t)vtrn1q_s32(v91, v92);
  v113 = (int64x2_t)vtrn2q_s32(v91, v92);
  v114 = (int64x2_t)vtrn1q_s32(v93, v83);
  v115 = (int64x2_t)vtrn2q_s32(v93, v83);
  *(int64x2_t *)(a2 + 64) = vzip1q_s64(v112, v114);
  *(int64x2_t *)(a2 + 80) = vzip1q_s64(v113, v115);
  result = vzip2q_s64(v113, v115);
  *(int64x2_t *)(a2 + 96) = vzip2q_s64(v112, v114);
  *(int64x2_t *)(a2 + 112) = result;
  return result;
}

double vp9_highbd_fht16x16_neon(int16x8_t *a1, uint64_t a2, int a3, int a4)
{
  double result;
  int64x2_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  int64x2_t v11;
  int64x2_t v12;
  int64x2_t v13;
  int64x2_t v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  int64x2_t v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  int64x2_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int64x2_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  int64x2_t v37;
  int64x2_t v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;
  int64x2_t v48;
  int64x2_t v49;
  int64x2_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int64x2_t v70;
  int64x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int64x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int64x2_t v179;
  int64x2_t v180;
  int64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  int64x2_t v186;
  int64x2_t v187;
  int64x2_t v188;
  int64x2_t v189;
  int64x2_t v190;
  int64x2_t v191;
  int64x2_t v192;
  int64x2_t v193;
  int64x2_t v194;
  int64x2_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int64x2_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;
  int64x2_t v268;
  int64x2_t v269;
  int64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  int64x2_t v274;
  int64x2_t v275;
  int64x2_t v276;
  int64x2_t v277;
  int64x2_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int64x2_t v287;
  int64x2_t v288;
  int64x2_t v289;
  int64x2_t v290;
  int64x2_t v291;
  int64x2_t v292;
  int64x2_t v293;
  int32x4_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  int32x4_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t v307;
  int32x4_t v308;
  int32x4_t v309;
  int64x2_t v310;
  int64x2_t v311;
  int64x2_t v312;
  int64x2_t v313;
  int64x2_t v314;
  int64x2_t v315;
  int64x2_t v316;
  int64x2_t v317;
  int64x2_t v318;
  int64x2_t v319;
  int64x2_t v320;
  int64x2_t v321;
  int64x2_t v322;
  int64x2_t v323;
  int64x2_t v324;
  int64x2_t v325;
  int64x2_t v326;
  int64x2_t v327;
  int64x2_t v328;
  int64x2_t v329;
  int64x2_t v330;
  int64x2_t v331;
  int64x2_t v332;
  int64x2_t v333;
  int64x2_t v334;
  int64x2_t v335;
  int64x2_t v336;
  int64x2_t v337;
  int64x2_t v338;
  int64x2_t v339;
  int64x2_t v340;
  int64x2_t v341;
  int32x4_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  int32x4_t v349;
  int32x4_t v350;
  int32x4_t v351;
  int32x4_t v352;
  int32x4_t v353;
  int32x4_t v354;
  int32x4_t v355;
  int32x4_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  int32x4_t v360;
  int32x4_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  int32x4_t v383;
  int32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int32x4_t v387;
  int32x4_t v388;
  int32x4_t v389;
  int32x4_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  int32x4_t v395;
  int32x4_t v396;
  int32x4_t v397;
  int32x4_t v398;
  int32x4_t v399;
  int32x4_t v400;
  int32x4_t v401;
  int32x4_t v402;
  int32x4_t v403;
  int32x4_t v404;
  int32x4_t v405;
  int32x4_t v406;
  int32x4_t v407;
  int32x4_t v408;
  int32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  int32x4_t v419;
  int32x4_t v420;
  int32x4_t v421;
  int32x4_t v422;
  int32x4_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int32x4_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int32x4_t v432;
  int32x4_t v433;
  int32x4_t v434;
  int32x4_t v435;
  int32x4_t v436;
  int32x4_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  int32x4_t v445;
  int32x4_t v446;
  int32x4_t v447;
  int32x4_t v448;
  int32x4_t v449;
  int32x4_t v450;
  int32x4_t v451;
  int32x4_t v452;
  int32x4_t v453;
  uint64_t v454;

  v454 = *MEMORY[0x24BDAC8D0];
  if (a4 == 2)
  {
    highbd_load_buffer_16x16(a1, &v438, &v422, &v406, &v390, a3);
    highbd_fdct16_8col(&v438, &v422);
    highbd_fdct16_8col(&v406, &v390);
LABEL_8:
    v150 = (int64x2_t)vtrn1q_s32(v438, v439);
    v151 = (int64x2_t)vtrn2q_s32(v438, v439);
    v152 = (int64x2_t)vtrn1q_s32(v440, v441);
    v153 = (int64x2_t)vtrn2q_s32(v440, v441);
    v154 = (int64x2_t)vtrn1q_s32(v442, v443);
    v155 = (int64x2_t)vtrn2q_s32(v442, v443);
    v156 = (int64x2_t)vtrn1q_s32(v444, v445);
    v157 = (int64x2_t)vtrn2q_s32(v444, v445);
    v158 = (int64x2_t)vtrn1q_s32(v422, v423);
    v159 = (int64x2_t)vtrn2q_s32(v422, v423);
    v160 = (int64x2_t)vtrn1q_s32(v424, v425);
    v161 = (int64x2_t)vtrn2q_s32(v424, v425);
    v162 = (int64x2_t)vtrn1q_s32(v426, v427);
    v163 = (int64x2_t)vtrn2q_s32(v426, v427);
    v164 = (int64x2_t)vtrn1q_s32(v428, v429);
    v165 = (int64x2_t)vtrn2q_s32(v428, v429);
    v438 = (int32x4_t)vzip1q_s64(v150, v152);
    v439 = (int32x4_t)vzip1q_s64(v151, v153);
    v440 = (int32x4_t)vzip2q_s64(v150, v152);
    v441 = (int32x4_t)vzip2q_s64(v151, v153);
    v442 = (int32x4_t)vzip1q_s64(v158, v160);
    v443 = (int32x4_t)vzip1q_s64(v159, v161);
    v444 = (int32x4_t)vzip2q_s64(v158, v160);
    v445 = (int32x4_t)vzip2q_s64(v159, v161);
    v422 = (int32x4_t)vzip1q_s64(v154, v156);
    v423 = (int32x4_t)vzip1q_s64(v155, v157);
    v424 = (int32x4_t)vzip2q_s64(v154, v156);
    v425 = (int32x4_t)vzip2q_s64(v155, v157);
    v426 = (int32x4_t)vzip1q_s64(v162, v164);
    v427 = (int32x4_t)vzip1q_s64(v163, v165);
    v428 = (int32x4_t)vzip2q_s64(v162, v164);
    v429 = (int32x4_t)vzip2q_s64(v163, v165);
    v166 = (int64x2_t)vtrn1q_s32(v446, v447);
    v167 = (int64x2_t)vtrn2q_s32(v446, v447);
    v168 = (int64x2_t)vtrn1q_s32(v448, v449);
    v169 = (int64x2_t)vtrn2q_s32(v448, v449);
    v170 = (int64x2_t)vtrn1q_s32(v450, v451);
    v171 = (int64x2_t)vtrn2q_s32(v450, v451);
    v172 = (int64x2_t)vtrn1q_s32(v452, v453);
    v173 = (int64x2_t)vtrn2q_s32(v452, v453);
    v174 = (int64x2_t)vtrn1q_s32(v430, v431);
    v175 = (int64x2_t)vtrn2q_s32(v430, v431);
    v176 = (int64x2_t)vtrn1q_s32(v432, v433);
    v177 = (int64x2_t)vtrn2q_s32(v432, v433);
    v178 = (int64x2_t)vtrn1q_s32(v434, v435);
    v179 = (int64x2_t)vtrn2q_s32(v434, v435);
    v180 = (int64x2_t)vtrn1q_s32(v436, v437);
    v181 = (int64x2_t)vtrn2q_s32(v436, v437);
    v182 = vzip1q_s64(v166, v168);
    v183 = vzip2q_s64(v166, v168);
    v184 = vzip1q_s64(v167, v169);
    v185 = vzip2q_s64(v167, v169);
    v186 = vzip1q_s64(v170, v172);
    v187 = vzip2q_s64(v170, v172);
    v188 = vzip1q_s64(v171, v173);
    v189 = vzip2q_s64(v171, v173);
    v190 = vzip1q_s64(v174, v176);
    v191 = vzip2q_s64(v174, v176);
    v192 = vzip1q_s64(v175, v177);
    v193 = vzip2q_s64(v175, v177);
    v194 = vzip1q_s64(v178, v180);
    v195 = vzip2q_s64(v178, v180);
    v196 = vzip1q_s64(v179, v181);
    v197 = vzip2q_s64(v179, v181);
    v198 = v406;
    v199 = v407;
    v406 = (int32x4_t)v182;
    v407 = (int32x4_t)v184;
    v200 = v408;
    v201 = v409;
    v408 = (int32x4_t)v183;
    v409 = (int32x4_t)v185;
    v202 = v410;
    v203 = v411;
    v410 = (int32x4_t)v190;
    v411 = (int32x4_t)v192;
    v204 = v412;
    v205 = v413;
    v412 = (int32x4_t)v191;
    v413 = (int32x4_t)v193;
    v206 = v390;
    v207 = v391;
    v390 = (int32x4_t)v186;
    v391 = (int32x4_t)v188;
    v208 = v392;
    v209 = v393;
    v392 = (int32x4_t)v187;
    v393 = (int32x4_t)v189;
    v210 = v394;
    v211 = v395;
    v394 = (int32x4_t)v194;
    v395 = (int32x4_t)v196;
    v212 = v396;
    v213 = v397;
    v396 = (int32x4_t)v195;
    v397 = (int32x4_t)v197;
    v214 = (int64x2_t)vtrn1q_s32(v198, v199);
    v215 = (int64x2_t)vtrn2q_s32(v198, v199);
    v216 = (int64x2_t)vtrn1q_s32(v200, v201);
    v217 = (int64x2_t)vtrn2q_s32(v200, v201);
    v218 = (int64x2_t)vtrn1q_s32(v202, v203);
    v219 = (int64x2_t)vtrn2q_s32(v202, v203);
    v220 = (int64x2_t)vtrn1q_s32(v204, v205);
    v221 = (int64x2_t)vtrn2q_s32(v204, v205);
    v222 = (int64x2_t)vtrn1q_s32(v206, v207);
    v223 = (int64x2_t)vtrn2q_s32(v206, v207);
    v224 = (int64x2_t)vtrn1q_s32(v208, v209);
    v225 = (int64x2_t)vtrn2q_s32(v208, v209);
    v226 = (int64x2_t)vtrn1q_s32(v210, v211);
    v227 = (int64x2_t)vtrn2q_s32(v210, v211);
    v228 = (int64x2_t)vtrn1q_s32(v212, v213);
    v229 = (int64x2_t)vtrn2q_s32(v212, v213);
    v446 = (int32x4_t)vzip1q_s64(v214, v216);
    v447 = (int32x4_t)vzip1q_s64(v215, v217);
    v448 = (int32x4_t)vzip2q_s64(v214, v216);
    v449 = (int32x4_t)vzip2q_s64(v215, v217);
    v450 = (int32x4_t)vzip1q_s64(v222, v224);
    v451 = (int32x4_t)vzip1q_s64(v223, v225);
    v452 = (int32x4_t)vzip2q_s64(v222, v224);
    v453 = (int32x4_t)vzip2q_s64(v223, v225);
    v430 = (int32x4_t)vzip1q_s64(v218, v220);
    v431 = (int32x4_t)vzip1q_s64(v219, v221);
    v432 = (int32x4_t)vzip2q_s64(v218, v220);
    v433 = (int32x4_t)vzip2q_s64(v219, v221);
    v434 = (int32x4_t)vzip1q_s64(v226, v228);
    v435 = (int32x4_t)vzip1q_s64(v227, v229);
    v436 = (int32x4_t)vzip2q_s64(v226, v228);
    v437 = (int32x4_t)vzip2q_s64(v227, v229);
    v230 = (int64x2_t)vtrn1q_s32(v414, v415);
    v231 = (int64x2_t)vtrn2q_s32(v414, v415);
    v232 = (int64x2_t)vtrn1q_s32(v416, v417);
    v233 = (int64x2_t)vtrn2q_s32(v416, v417);
    v234 = (int64x2_t)vtrn1q_s32(v418, v419);
    v235 = (int64x2_t)vtrn2q_s32(v418, v419);
    v236 = (int64x2_t)vtrn1q_s32(v420, v421);
    v237 = (int64x2_t)vtrn2q_s32(v420, v421);
    v238 = (int64x2_t)vtrn1q_s32(v398, v399);
    v239 = (int64x2_t)vtrn2q_s32(v398, v399);
    v240 = (int64x2_t)vtrn1q_s32(v400, v401);
    v241 = (int64x2_t)vtrn2q_s32(v400, v401);
    v242 = (int64x2_t)vtrn1q_s32(v402, v403);
    v243 = (int64x2_t)vtrn2q_s32(v402, v403);
    v244 = (int64x2_t)vtrn1q_s32(v404, v405);
    v245 = (int64x2_t)vtrn2q_s32(v404, v405);
    v414 = (int32x4_t)vzip1q_s64(v230, v232);
    v415 = (int32x4_t)vzip1q_s64(v231, v233);
    v416 = (int32x4_t)vzip2q_s64(v230, v232);
    v417 = (int32x4_t)vzip2q_s64(v231, v233);
    v418 = (int32x4_t)vzip1q_s64(v238, v240);
    v419 = (int32x4_t)vzip1q_s64(v239, v241);
    v420 = (int32x4_t)vzip2q_s64(v238, v240);
    v421 = (int32x4_t)vzip2q_s64(v239, v241);
    v398 = (int32x4_t)vzip1q_s64(v234, v236);
    v399 = (int32x4_t)vzip1q_s64(v235, v237);
    v400 = (int32x4_t)vzip2q_s64(v234, v236);
    v401 = (int32x4_t)vzip2q_s64(v235, v237);
    v402 = (int32x4_t)vzip1q_s64(v242, v244);
    v403 = (int32x4_t)vzip1q_s64(v243, v245);
    v404 = (int32x4_t)vzip2q_s64(v242, v244);
    v405 = (int32x4_t)vzip2q_s64(v243, v245);
    highbd_right_shift_16x16((uint64_t)&v438, &v422, (uint64_t)&v406, &v390);
    highbd_fadst16_8col((uint64_t)&v438, (uint64_t)&v422);
    highbd_fadst16_8col((uint64_t)&v406, (uint64_t)&v390);
    goto LABEL_9;
  }
  if (a4 != 1)
  {
    if (!a4)
    {
      vpx_highbd_fdct16x16_neon(a1, (int64x2_t *)a2, a3);
      return result;
    }
    highbd_load_buffer_16x16(a1, &v438, &v422, &v406, &v390, a3);
    highbd_fadst16_8col((uint64_t)&v438, (uint64_t)&v422);
    highbd_fadst16_8col((uint64_t)&v406, (uint64_t)&v390);
    goto LABEL_8;
  }
  highbd_load_buffer_16x16(a1, &v438, &v422, &v406, &v390, a3);
  highbd_fadst16_8col((uint64_t)&v438, (uint64_t)&v422);
  highbd_fadst16_8col((uint64_t)&v406, (uint64_t)&v390);
  v6 = (int64x2_t)vtrn1q_s32(v438, v439);
  v7 = (int64x2_t)vtrn2q_s32(v438, v439);
  v8 = (int64x2_t)vtrn1q_s32(v440, v441);
  v9 = (int64x2_t)vtrn2q_s32(v440, v441);
  v10 = (int64x2_t)vtrn1q_s32(v442, v443);
  v11 = (int64x2_t)vtrn2q_s32(v442, v443);
  v12 = (int64x2_t)vtrn1q_s32(v444, v445);
  v13 = (int64x2_t)vtrn2q_s32(v444, v445);
  v14 = (int64x2_t)vtrn1q_s32(v422, v423);
  v15 = (int64x2_t)vtrn2q_s32(v422, v423);
  v16 = (int64x2_t)vtrn1q_s32(v424, v425);
  v17 = (int64x2_t)vtrn2q_s32(v424, v425);
  v18 = (int64x2_t)vtrn1q_s32(v426, v427);
  v19 = (int64x2_t)vtrn2q_s32(v426, v427);
  v20 = (int64x2_t)vtrn1q_s32(v428, v429);
  v21 = (int64x2_t)vtrn2q_s32(v428, v429);
  v438 = (int32x4_t)vzip1q_s64(v6, v8);
  v439 = (int32x4_t)vzip1q_s64(v7, v9);
  v440 = (int32x4_t)vzip2q_s64(v6, v8);
  v441 = (int32x4_t)vzip2q_s64(v7, v9);
  v442 = (int32x4_t)vzip1q_s64(v14, v16);
  v443 = (int32x4_t)vzip1q_s64(v15, v17);
  v444 = (int32x4_t)vzip2q_s64(v14, v16);
  v445 = (int32x4_t)vzip2q_s64(v15, v17);
  v422 = (int32x4_t)vzip1q_s64(v10, v12);
  v423 = (int32x4_t)vzip1q_s64(v11, v13);
  v424 = (int32x4_t)vzip2q_s64(v10, v12);
  v425 = (int32x4_t)vzip2q_s64(v11, v13);
  v426 = (int32x4_t)vzip1q_s64(v18, v20);
  v427 = (int32x4_t)vzip1q_s64(v19, v21);
  v428 = (int32x4_t)vzip2q_s64(v18, v20);
  v429 = (int32x4_t)vzip2q_s64(v19, v21);
  v22 = (int64x2_t)vtrn1q_s32(v446, v447);
  v23 = (int64x2_t)vtrn2q_s32(v446, v447);
  v24 = (int64x2_t)vtrn1q_s32(v448, v449);
  v25 = (int64x2_t)vtrn2q_s32(v448, v449);
  v26 = (int64x2_t)vtrn1q_s32(v450, v451);
  v27 = (int64x2_t)vtrn2q_s32(v450, v451);
  v28 = (int64x2_t)vtrn1q_s32(v452, v453);
  v29 = (int64x2_t)vtrn2q_s32(v452, v453);
  v30 = (int64x2_t)vtrn1q_s32(v430, v431);
  v31 = (int64x2_t)vtrn2q_s32(v430, v431);
  v32 = (int64x2_t)vtrn1q_s32(v432, v433);
  v33 = (int64x2_t)vtrn2q_s32(v432, v433);
  v34 = (int64x2_t)vtrn1q_s32(v434, v435);
  v35 = (int64x2_t)vtrn2q_s32(v434, v435);
  v36 = (int64x2_t)vtrn1q_s32(v436, v437);
  v37 = (int64x2_t)vtrn2q_s32(v436, v437);
  v38 = vzip1q_s64(v22, v24);
  v39 = vzip2q_s64(v22, v24);
  v40 = vzip1q_s64(v23, v25);
  v41 = vzip2q_s64(v23, v25);
  v42 = vzip1q_s64(v26, v28);
  v43 = vzip2q_s64(v26, v28);
  v44 = vzip1q_s64(v27, v29);
  v45 = vzip2q_s64(v27, v29);
  v46 = vzip1q_s64(v30, v32);
  v47 = vzip2q_s64(v30, v32);
  v48 = vzip1q_s64(v31, v33);
  v49 = vzip2q_s64(v31, v33);
  v50 = vzip1q_s64(v34, v36);
  v51 = vzip2q_s64(v34, v36);
  v52 = vzip1q_s64(v35, v37);
  v53 = vzip2q_s64(v35, v37);
  v54 = v406;
  v55 = v407;
  v406 = (int32x4_t)v38;
  v407 = (int32x4_t)v40;
  v56 = v408;
  v57 = v409;
  v408 = (int32x4_t)v39;
  v409 = (int32x4_t)v41;
  v58 = v410;
  v59 = v411;
  v410 = (int32x4_t)v46;
  v411 = (int32x4_t)v48;
  v60 = v412;
  v61 = v413;
  v412 = (int32x4_t)v47;
  v413 = (int32x4_t)v49;
  v62 = v390;
  v63 = v391;
  v390 = (int32x4_t)v42;
  v391 = (int32x4_t)v44;
  v64 = v392;
  v65 = v393;
  v392 = (int32x4_t)v43;
  v393 = (int32x4_t)v45;
  v66 = v394;
  v67 = v395;
  v394 = (int32x4_t)v50;
  v395 = (int32x4_t)v52;
  v68 = v396;
  v69 = v397;
  v396 = (int32x4_t)v51;
  v397 = (int32x4_t)v53;
  v70 = (int64x2_t)vtrn1q_s32(v54, v55);
  v71 = (int64x2_t)vtrn2q_s32(v54, v55);
  v72 = (int64x2_t)vtrn1q_s32(v56, v57);
  v73 = (int64x2_t)vtrn2q_s32(v56, v57);
  v74 = (int64x2_t)vtrn1q_s32(v58, v59);
  v75 = (int64x2_t)vtrn2q_s32(v58, v59);
  v76 = (int64x2_t)vtrn1q_s32(v60, v61);
  v77 = (int64x2_t)vtrn2q_s32(v60, v61);
  v78 = (int64x2_t)vtrn1q_s32(v62, v63);
  v79 = (int64x2_t)vtrn2q_s32(v62, v63);
  v80 = (int64x2_t)vtrn1q_s32(v64, v65);
  v81 = (int64x2_t)vtrn2q_s32(v64, v65);
  v82 = (int64x2_t)vtrn1q_s32(v66, v67);
  v83 = (int64x2_t)vtrn2q_s32(v66, v67);
  v84 = (int64x2_t)vtrn1q_s32(v68, v69);
  v85 = (int64x2_t)vtrn2q_s32(v68, v69);
  v446 = (int32x4_t)vzip1q_s64(v70, v72);
  v447 = (int32x4_t)vzip1q_s64(v71, v73);
  v448 = (int32x4_t)vzip2q_s64(v70, v72);
  v449 = (int32x4_t)vzip2q_s64(v71, v73);
  v450 = (int32x4_t)vzip1q_s64(v78, v80);
  v451 = (int32x4_t)vzip1q_s64(v79, v81);
  v452 = (int32x4_t)vzip2q_s64(v78, v80);
  v453 = (int32x4_t)vzip2q_s64(v79, v81);
  v430 = (int32x4_t)vzip1q_s64(v74, v76);
  v431 = (int32x4_t)vzip1q_s64(v75, v77);
  v432 = (int32x4_t)vzip2q_s64(v74, v76);
  v433 = (int32x4_t)vzip2q_s64(v75, v77);
  v434 = (int32x4_t)vzip1q_s64(v82, v84);
  v435 = (int32x4_t)vzip1q_s64(v83, v85);
  v436 = (int32x4_t)vzip2q_s64(v82, v84);
  v437 = (int32x4_t)vzip2q_s64(v83, v85);
  v86 = (int64x2_t)vtrn1q_s32(v414, v415);
  v87 = (int64x2_t)vtrn2q_s32(v414, v415);
  v88 = (int64x2_t)vtrn1q_s32(v416, v417);
  v89 = (int64x2_t)vtrn2q_s32(v416, v417);
  v90 = (int64x2_t)vtrn1q_s32(v418, v419);
  v91 = (int64x2_t)vtrn2q_s32(v418, v419);
  v92 = (int64x2_t)vtrn1q_s32(v420, v421);
  v93 = (int64x2_t)vtrn2q_s32(v420, v421);
  v94 = (int64x2_t)vtrn1q_s32(v398, v399);
  v95 = (int64x2_t)vtrn2q_s32(v398, v399);
  v96 = (int64x2_t)vtrn1q_s32(v400, v401);
  v97 = (int64x2_t)vtrn2q_s32(v400, v401);
  v98 = (int64x2_t)vtrn1q_s32(v402, v403);
  v99 = (int64x2_t)vtrn2q_s32(v402, v403);
  v100 = (int64x2_t)vtrn1q_s32(v404, v405);
  v101 = (int64x2_t)vtrn2q_s32(v404, v405);
  v414 = (int32x4_t)vzip1q_s64(v86, v88);
  v415 = (int32x4_t)vzip1q_s64(v87, v89);
  v416 = (int32x4_t)vzip2q_s64(v86, v88);
  v417 = (int32x4_t)vzip2q_s64(v87, v89);
  v418 = (int32x4_t)vzip1q_s64(v94, v96);
  v419 = (int32x4_t)vzip1q_s64(v95, v97);
  v420 = (int32x4_t)vzip2q_s64(v94, v96);
  v421 = (int32x4_t)vzip2q_s64(v95, v97);
  v398 = (int32x4_t)vzip1q_s64(v90, v92);
  v399 = (int32x4_t)vzip1q_s64(v91, v93);
  v400 = (int32x4_t)vzip2q_s64(v90, v92);
  v401 = (int32x4_t)vzip2q_s64(v91, v93);
  v402 = (int32x4_t)vzip1q_s64(v98, v100);
  v403 = (int32x4_t)vzip1q_s64(v99, v101);
  v404 = (int32x4_t)vzip2q_s64(v98, v100);
  v405 = (int32x4_t)vzip2q_s64(v99, v101);
  v102 = v439;
  v103 = v422;
  v104 = v423;
  *(int32x4_t *)a2 = v438;
  *(int32x4_t *)(a2 + 16) = v103;
  *(int32x4_t *)(a2 + 64) = v102;
  *(int32x4_t *)(a2 + 80) = v104;
  v105 = v441;
  v106 = v424;
  v107 = v425;
  *(int32x4_t *)(a2 + 128) = v440;
  *(int32x4_t *)(a2 + 144) = v106;
  *(int32x4_t *)(a2 + 192) = v105;
  *(int32x4_t *)(a2 + 208) = v107;
  v108 = v443;
  v109 = v426;
  v110 = v427;
  *(int32x4_t *)(a2 + 256) = v442;
  *(int32x4_t *)(a2 + 272) = v109;
  *(int32x4_t *)(a2 + 320) = v108;
  *(int32x4_t *)(a2 + 336) = v110;
  v111 = v445;
  v112 = v428;
  v113 = v429;
  *(int32x4_t *)(a2 + 384) = v444;
  *(int32x4_t *)(a2 + 400) = v112;
  *(int32x4_t *)(a2 + 448) = v111;
  *(int32x4_t *)(a2 + 464) = v113;
  v114 = v447;
  v115 = v430;
  v116 = v431;
  *(int32x4_t *)(a2 + 512) = v446;
  *(int32x4_t *)(a2 + 528) = v115;
  *(int32x4_t *)(a2 + 576) = v114;
  *(int32x4_t *)(a2 + 592) = v116;
  v117 = v449;
  v118 = v432;
  v119 = v433;
  *(int32x4_t *)(a2 + 640) = v448;
  *(int32x4_t *)(a2 + 656) = v118;
  *(int32x4_t *)(a2 + 704) = v117;
  *(int32x4_t *)(a2 + 720) = v119;
  v120 = v451;
  v121 = v434;
  v122 = v435;
  *(int32x4_t *)(a2 + 768) = v450;
  *(int32x4_t *)(a2 + 784) = v121;
  *(int32x4_t *)(a2 + 832) = v120;
  *(int32x4_t *)(a2 + 848) = v122;
  v123 = v453;
  v124 = v436;
  v125 = v437;
  *(int32x4_t *)(a2 + 896) = v452;
  *(int32x4_t *)(a2 + 912) = v124;
  *(int32x4_t *)(a2 + 960) = v123;
  *(int32x4_t *)(a2 + 976) = v125;
  v126 = v407;
  v127 = v390;
  v128 = v391;
  *(int32x4_t *)(a2 + 32) = v406;
  *(int32x4_t *)(a2 + 48) = v127;
  *(int32x4_t *)(a2 + 96) = v126;
  *(int32x4_t *)(a2 + 112) = v128;
  v129 = v409;
  v130 = v392;
  v131 = v393;
  *(int32x4_t *)(a2 + 160) = v408;
  *(int32x4_t *)(a2 + 176) = v130;
  *(int32x4_t *)(a2 + 224) = v129;
  *(int32x4_t *)(a2 + 240) = v131;
  v132 = v411;
  v133 = v394;
  v134 = v395;
  *(int32x4_t *)(a2 + 288) = v410;
  *(int32x4_t *)(a2 + 304) = v133;
  *(int32x4_t *)(a2 + 352) = v132;
  *(int32x4_t *)(a2 + 368) = v134;
  v135 = v413;
  v136 = v396;
  v137 = v397;
  *(int32x4_t *)(a2 + 416) = v412;
  *(int32x4_t *)(a2 + 432) = v136;
  *(int32x4_t *)(a2 + 480) = v135;
  *(int32x4_t *)(a2 + 496) = v137;
  v138 = v415;
  v139 = v398;
  v140 = v399;
  *(int32x4_t *)(a2 + 544) = v414;
  *(int32x4_t *)(a2 + 560) = v139;
  *(int32x4_t *)(a2 + 608) = v138;
  *(int32x4_t *)(a2 + 624) = v140;
  v141 = v417;
  v142 = v400;
  v143 = v401;
  *(int32x4_t *)(a2 + 672) = v416;
  *(int32x4_t *)(a2 + 688) = v142;
  *(int32x4_t *)(a2 + 736) = v141;
  *(int32x4_t *)(a2 + 752) = v143;
  v144 = v419;
  v145 = v402;
  v146 = v403;
  *(int32x4_t *)(a2 + 800) = v418;
  *(int32x4_t *)(a2 + 816) = v145;
  *(int32x4_t *)(a2 + 864) = v144;
  *(int32x4_t *)(a2 + 880) = v146;
  v147 = v421;
  v148 = v404;
  v149 = v405;
  *(int32x4_t *)(a2 + 928) = v420;
  *(int32x4_t *)(a2 + 944) = v148;
  *(int32x4_t *)(a2 + 992) = v147;
  *(int32x4_t *)(a2 + 1008) = v149;
  highbd_right_shift_16x16((uint64_t)&v438, &v422, (uint64_t)&v406, &v390);
  highbd_fdct16_8col(&v438, &v422);
  highbd_fdct16_8col(&v406, &v390);
LABEL_9:
  v246 = (int64x2_t)vtrn1q_s32(v438, v439);
  v247 = (int64x2_t)vtrn2q_s32(v438, v439);
  v248 = (int64x2_t)vtrn1q_s32(v440, v441);
  v249 = (int64x2_t)vtrn2q_s32(v440, v441);
  v250 = (int64x2_t)vtrn1q_s32(v442, v443);
  v251 = (int64x2_t)vtrn2q_s32(v442, v443);
  v252 = (int64x2_t)vtrn1q_s32(v444, v445);
  v253 = (int64x2_t)vtrn2q_s32(v444, v445);
  v254 = (int64x2_t)vtrn1q_s32(v422, v423);
  v255 = (int64x2_t)vtrn2q_s32(v422, v423);
  v256 = (int64x2_t)vtrn1q_s32(v424, v425);
  v257 = (int64x2_t)vtrn2q_s32(v424, v425);
  v258 = (int64x2_t)vtrn1q_s32(v426, v427);
  v259 = (int64x2_t)vtrn2q_s32(v426, v427);
  v260 = (int64x2_t)vtrn1q_s32(v428, v429);
  v261 = (int64x2_t)vtrn2q_s32(v428, v429);
  v438 = (int32x4_t)vzip1q_s64(v246, v248);
  v439 = (int32x4_t)vzip1q_s64(v247, v249);
  v440 = (int32x4_t)vzip2q_s64(v246, v248);
  v441 = (int32x4_t)vzip2q_s64(v247, v249);
  v442 = (int32x4_t)vzip1q_s64(v254, v256);
  v443 = (int32x4_t)vzip1q_s64(v255, v257);
  v444 = (int32x4_t)vzip2q_s64(v254, v256);
  v445 = (int32x4_t)vzip2q_s64(v255, v257);
  v422 = (int32x4_t)vzip1q_s64(v250, v252);
  v423 = (int32x4_t)vzip1q_s64(v251, v253);
  v424 = (int32x4_t)vzip2q_s64(v250, v252);
  v425 = (int32x4_t)vzip2q_s64(v251, v253);
  v426 = (int32x4_t)vzip1q_s64(v258, v260);
  v427 = (int32x4_t)vzip1q_s64(v259, v261);
  v428 = (int32x4_t)vzip2q_s64(v258, v260);
  v429 = (int32x4_t)vzip2q_s64(v259, v261);
  v262 = (int64x2_t)vtrn1q_s32(v446, v447);
  v263 = (int64x2_t)vtrn2q_s32(v446, v447);
  v264 = (int64x2_t)vtrn1q_s32(v448, v449);
  v265 = (int64x2_t)vtrn2q_s32(v448, v449);
  v266 = (int64x2_t)vtrn1q_s32(v450, v451);
  v267 = (int64x2_t)vtrn2q_s32(v450, v451);
  v268 = (int64x2_t)vtrn1q_s32(v452, v453);
  v269 = (int64x2_t)vtrn2q_s32(v452, v453);
  v270 = (int64x2_t)vtrn1q_s32(v430, v431);
  v271 = (int64x2_t)vtrn2q_s32(v430, v431);
  v272 = (int64x2_t)vtrn1q_s32(v432, v433);
  v273 = (int64x2_t)vtrn2q_s32(v432, v433);
  v274 = (int64x2_t)vtrn1q_s32(v434, v435);
  v275 = (int64x2_t)vtrn2q_s32(v434, v435);
  v276 = (int64x2_t)vtrn1q_s32(v436, v437);
  v277 = (int64x2_t)vtrn2q_s32(v436, v437);
  v278 = vzip1q_s64(v262, v264);
  v279 = vzip2q_s64(v262, v264);
  v280 = vzip1q_s64(v263, v265);
  v281 = vzip2q_s64(v263, v265);
  v282 = vzip1q_s64(v266, v268);
  v283 = vzip2q_s64(v266, v268);
  v284 = vzip1q_s64(v267, v269);
  v285 = vzip2q_s64(v267, v269);
  v286 = vzip1q_s64(v270, v272);
  v287 = vzip2q_s64(v270, v272);
  v288 = vzip1q_s64(v271, v273);
  v289 = vzip2q_s64(v271, v273);
  v290 = vzip1q_s64(v274, v276);
  v291 = vzip2q_s64(v274, v276);
  v292 = vzip1q_s64(v275, v277);
  v293 = vzip2q_s64(v275, v277);
  v294 = v406;
  v295 = v407;
  v406 = (int32x4_t)v278;
  v407 = (int32x4_t)v280;
  v296 = v408;
  v297 = v409;
  v408 = (int32x4_t)v279;
  v409 = (int32x4_t)v281;
  v298 = v410;
  v299 = v411;
  v410 = (int32x4_t)v286;
  v411 = (int32x4_t)v288;
  v300 = v412;
  v301 = v413;
  v412 = (int32x4_t)v287;
  v413 = (int32x4_t)v289;
  v302 = v390;
  v303 = v391;
  v390 = (int32x4_t)v282;
  v391 = (int32x4_t)v284;
  v304 = v392;
  v305 = v393;
  v392 = (int32x4_t)v283;
  v393 = (int32x4_t)v285;
  v306 = v394;
  v307 = v395;
  v394 = (int32x4_t)v290;
  v395 = (int32x4_t)v292;
  v308 = v396;
  v309 = v397;
  v396 = (int32x4_t)v291;
  v397 = (int32x4_t)v293;
  v310 = (int64x2_t)vtrn1q_s32(v294, v295);
  v311 = (int64x2_t)vtrn2q_s32(v294, v295);
  v312 = (int64x2_t)vtrn1q_s32(v296, v297);
  v313 = (int64x2_t)vtrn2q_s32(v296, v297);
  v314 = (int64x2_t)vtrn1q_s32(v298, v299);
  v315 = (int64x2_t)vtrn2q_s32(v298, v299);
  v316 = (int64x2_t)vtrn1q_s32(v300, v301);
  v317 = (int64x2_t)vtrn2q_s32(v300, v301);
  v318 = (int64x2_t)vtrn1q_s32(v302, v303);
  v319 = (int64x2_t)vtrn2q_s32(v302, v303);
  v320 = (int64x2_t)vtrn1q_s32(v304, v305);
  v321 = (int64x2_t)vtrn2q_s32(v304, v305);
  v322 = (int64x2_t)vtrn1q_s32(v306, v307);
  v323 = (int64x2_t)vtrn2q_s32(v306, v307);
  v324 = (int64x2_t)vtrn1q_s32(v308, v309);
  v325 = (int64x2_t)vtrn2q_s32(v308, v309);
  v446 = (int32x4_t)vzip1q_s64(v310, v312);
  v447 = (int32x4_t)vzip1q_s64(v311, v313);
  v448 = (int32x4_t)vzip2q_s64(v310, v312);
  v449 = (int32x4_t)vzip2q_s64(v311, v313);
  v450 = (int32x4_t)vzip1q_s64(v318, v320);
  v451 = (int32x4_t)vzip1q_s64(v319, v321);
  v452 = (int32x4_t)vzip2q_s64(v318, v320);
  v453 = (int32x4_t)vzip2q_s64(v319, v321);
  v430 = (int32x4_t)vzip1q_s64(v314, v316);
  v431 = (int32x4_t)vzip1q_s64(v315, v317);
  v432 = (int32x4_t)vzip2q_s64(v314, v316);
  v433 = (int32x4_t)vzip2q_s64(v315, v317);
  v434 = (int32x4_t)vzip1q_s64(v322, v324);
  v435 = (int32x4_t)vzip1q_s64(v323, v325);
  v436 = (int32x4_t)vzip2q_s64(v322, v324);
  v437 = (int32x4_t)vzip2q_s64(v323, v325);
  v326 = (int64x2_t)vtrn1q_s32(v414, v415);
  v327 = (int64x2_t)vtrn2q_s32(v414, v415);
  v328 = (int64x2_t)vtrn1q_s32(v416, v417);
  v329 = (int64x2_t)vtrn2q_s32(v416, v417);
  v330 = (int64x2_t)vtrn1q_s32(v418, v419);
  v331 = (int64x2_t)vtrn2q_s32(v418, v419);
  v332 = (int64x2_t)vtrn1q_s32(v420, v421);
  v333 = (int64x2_t)vtrn2q_s32(v420, v421);
  v334 = (int64x2_t)vtrn1q_s32(v398, v399);
  v335 = (int64x2_t)vtrn2q_s32(v398, v399);
  v336 = (int64x2_t)vtrn1q_s32(v400, v401);
  v337 = (int64x2_t)vtrn2q_s32(v400, v401);
  v338 = (int64x2_t)vtrn1q_s32(v402, v403);
  v339 = (int64x2_t)vtrn2q_s32(v402, v403);
  v340 = (int64x2_t)vtrn1q_s32(v404, v405);
  v341 = (int64x2_t)vtrn2q_s32(v404, v405);
  v414 = (int32x4_t)vzip1q_s64(v326, v328);
  v415 = (int32x4_t)vzip1q_s64(v327, v329);
  v416 = (int32x4_t)vzip2q_s64(v326, v328);
  v417 = (int32x4_t)vzip2q_s64(v327, v329);
  v418 = (int32x4_t)vzip1q_s64(v334, v336);
  v419 = (int32x4_t)vzip1q_s64(v335, v337);
  v420 = (int32x4_t)vzip2q_s64(v334, v336);
  v421 = (int32x4_t)vzip2q_s64(v335, v337);
  v398 = (int32x4_t)vzip1q_s64(v330, v332);
  v399 = (int32x4_t)vzip1q_s64(v331, v333);
  v400 = (int32x4_t)vzip2q_s64(v330, v332);
  v401 = (int32x4_t)vzip2q_s64(v331, v333);
  v402 = (int32x4_t)vzip1q_s64(v338, v340);
  v403 = (int32x4_t)vzip1q_s64(v339, v341);
  v404 = (int32x4_t)vzip2q_s64(v338, v340);
  v405 = (int32x4_t)vzip2q_s64(v339, v341);
  v342 = v439;
  v343 = v422;
  v344 = v423;
  *(int32x4_t *)a2 = v438;
  *(int32x4_t *)(a2 + 16) = v343;
  *(int32x4_t *)(a2 + 64) = v342;
  *(int32x4_t *)(a2 + 80) = v344;
  v345 = v441;
  v346 = v424;
  v347 = v425;
  *(int32x4_t *)(a2 + 128) = v440;
  *(int32x4_t *)(a2 + 144) = v346;
  *(int32x4_t *)(a2 + 192) = v345;
  *(int32x4_t *)(a2 + 208) = v347;
  v348 = v443;
  v349 = v426;
  v350 = v427;
  *(int32x4_t *)(a2 + 256) = v442;
  *(int32x4_t *)(a2 + 272) = v349;
  *(int32x4_t *)(a2 + 320) = v348;
  *(int32x4_t *)(a2 + 336) = v350;
  v351 = v445;
  v352 = v428;
  v353 = v429;
  *(int32x4_t *)(a2 + 384) = v444;
  *(int32x4_t *)(a2 + 400) = v352;
  *(int32x4_t *)(a2 + 448) = v351;
  *(int32x4_t *)(a2 + 464) = v353;
  v354 = v447;
  v355 = v430;
  v356 = v431;
  *(int32x4_t *)(a2 + 512) = v446;
  *(int32x4_t *)(a2 + 528) = v355;
  *(int32x4_t *)(a2 + 576) = v354;
  *(int32x4_t *)(a2 + 592) = v356;
  v357 = v449;
  v358 = v432;
  v359 = v433;
  *(int32x4_t *)(a2 + 640) = v448;
  *(int32x4_t *)(a2 + 656) = v358;
  *(int32x4_t *)(a2 + 704) = v357;
  *(int32x4_t *)(a2 + 720) = v359;
  v360 = v451;
  v361 = v434;
  v362 = v435;
  *(int32x4_t *)(a2 + 768) = v450;
  *(int32x4_t *)(a2 + 784) = v361;
  *(int32x4_t *)(a2 + 832) = v360;
  *(int32x4_t *)(a2 + 848) = v362;
  v363 = v453;
  v364 = v436;
  v365 = v437;
  *(int32x4_t *)(a2 + 896) = v452;
  *(int32x4_t *)(a2 + 912) = v364;
  *(int32x4_t *)(a2 + 960) = v363;
  *(int32x4_t *)(a2 + 976) = v365;
  v366 = v407;
  v367 = v390;
  v368 = v391;
  *(int32x4_t *)(a2 + 32) = v406;
  *(int32x4_t *)(a2 + 48) = v367;
  *(int32x4_t *)(a2 + 96) = v366;
  *(int32x4_t *)(a2 + 112) = v368;
  v369 = v409;
  v370 = v392;
  v371 = v393;
  *(int32x4_t *)(a2 + 160) = v408;
  *(int32x4_t *)(a2 + 176) = v370;
  *(int32x4_t *)(a2 + 224) = v369;
  *(int32x4_t *)(a2 + 240) = v371;
  v372 = v411;
  v373 = v394;
  v374 = v395;
  *(int32x4_t *)(a2 + 288) = v410;
  *(int32x4_t *)(a2 + 304) = v373;
  *(int32x4_t *)(a2 + 352) = v372;
  *(int32x4_t *)(a2 + 368) = v374;
  v375 = v413;
  v376 = v396;
  v377 = v397;
  *(int32x4_t *)(a2 + 416) = v412;
  *(int32x4_t *)(a2 + 432) = v376;
  *(int32x4_t *)(a2 + 480) = v375;
  *(int32x4_t *)(a2 + 496) = v377;
  v378 = v415;
  v379 = v398;
  v380 = v399;
  *(int32x4_t *)(a2 + 544) = v414;
  *(int32x4_t *)(a2 + 560) = v379;
  *(int32x4_t *)(a2 + 608) = v378;
  *(int32x4_t *)(a2 + 624) = v380;
  v381 = v417;
  v382 = v400;
  v383 = v401;
  *(int32x4_t *)(a2 + 672) = v416;
  *(int32x4_t *)(a2 + 688) = v382;
  *(int32x4_t *)(a2 + 736) = v381;
  *(int32x4_t *)(a2 + 752) = v383;
  v384 = v419;
  v385 = v402;
  v386 = v403;
  *(int32x4_t *)(a2 + 800) = v418;
  *(int32x4_t *)(a2 + 816) = v385;
  *(int32x4_t *)(a2 + 864) = v384;
  *(int32x4_t *)(a2 + 880) = v386;
  result = *(double *)v420.i64;
  v387 = v421;
  v388 = v404;
  v389 = v405;
  *(int32x4_t *)(a2 + 928) = v420;
  *(int32x4_t *)(a2 + 944) = v388;
  *(int32x4_t *)(a2 + 992) = v387;
  *(int32x4_t *)(a2 + 1008) = v389;
  return result;
}

int32x4_t highbd_load_buffer_16x16(int16x8_t *a1, int32x4_t *a2, int32x4_t *a3, int32x4_t *a4, int32x4_t *a5, int a6)
{
  int16x8_t v6;
  uint64_t v7;
  int16x8_t v8;
  uint64_t v9;
  int16x8_t v10;
  uint64_t v11;
  int16x8_t v12;
  uint64_t v13;
  int16x8_t v14;
  uint64_t v15;
  int16x8_t v16;
  uint64_t v17;
  int16x8_t v18;
  uint64_t v19;
  uint64_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t *v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x4_t *v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t result;

  v6 = *a1;
  v7 = 2 * a6;
  v8 = *(int16x8_t *)((char *)a1 + v7);
  v9 = 4 * a6;
  v10 = *(int16x8_t *)((char *)a1 + v9);
  v11 = 6 * a6;
  v12 = *(int16x8_t *)((char *)a1 + v11);
  v13 = 8 * a6;
  v14 = *(int16x8_t *)((char *)a1 + v13);
  v15 = 10 * a6;
  v16 = *(int16x8_t *)((char *)a1 + v15);
  v17 = 12 * a6;
  v18 = *(int16x8_t *)((char *)a1 + v17);
  v19 = a6;
  v20 = v19 * 16 - v7;
  v21 = *(int16x8_t *)((char *)a1 + v19 * 16 - v7);
  *a2 = vshll_n_s16(*(int16x4_t *)a1->i8, 2uLL);
  *a3 = vshll_high_n_s16(v6, 2uLL);
  a2[1] = vshll_n_s16(*(int16x4_t *)v8.i8, 2uLL);
  a3[1] = vshll_high_n_s16(v8, 2uLL);
  a2[2] = vshll_n_s16(*(int16x4_t *)v10.i8, 2uLL);
  a3[2] = vshll_high_n_s16(v10, 2uLL);
  a2[3] = vshll_n_s16(*(int16x4_t *)v12.i8, 2uLL);
  a3[3] = vshll_high_n_s16(v12, 2uLL);
  a2[4] = vshll_n_s16(*(int16x4_t *)v14.i8, 2uLL);
  a3[4] = vshll_high_n_s16(v14, 2uLL);
  a2[5] = vshll_n_s16(*(int16x4_t *)v16.i8, 2uLL);
  a3[5] = vshll_high_n_s16(v16, 2uLL);
  a2[6] = vshll_n_s16(*(int16x4_t *)v18.i8, 2uLL);
  a3[6] = vshll_high_n_s16(v18, 2uLL);
  a2[7] = vshll_n_s16(*(int16x4_t *)v21.i8, 2uLL);
  a3[7] = vshll_high_n_s16(v21, 2uLL);
  v22 = a1[v19];
  v23 = *(int16x8_t *)((char *)&a1[v19] + v7);
  v24 = *(int16x8_t *)((char *)&a1[v19] + v9);
  v25 = *(int16x8_t *)((char *)&a1[v19] + v11);
  v26 = *(int16x8_t *)((char *)&a1[v19] + v13);
  v27 = *(int16x8_t *)((char *)&a1[v19] + v15);
  v28 = *(int16x8_t *)((char *)&a1[v19] + v17);
  v29 = *(int16x8_t *)((char *)&a1[v19] + v19 * 16 - v7);
  a2[8] = vshll_n_s16(*(int16x4_t *)v22.i8, 2uLL);
  a3[8] = vshll_high_n_s16(v22, 2uLL);
  a2[9] = vshll_n_s16(*(int16x4_t *)v23.i8, 2uLL);
  a3[9] = vshll_high_n_s16(v23, 2uLL);
  a2[10] = vshll_n_s16(*(int16x4_t *)v24.i8, 2uLL);
  a3[10] = vshll_high_n_s16(v24, 2uLL);
  a2[11] = vshll_n_s16(*(int16x4_t *)v25.i8, 2uLL);
  a3[11] = vshll_high_n_s16(v25, 2uLL);
  a2[12] = vshll_n_s16(*(int16x4_t *)v26.i8, 2uLL);
  a3[12] = vshll_high_n_s16(v26, 2uLL);
  a2[13] = vshll_n_s16(*(int16x4_t *)v27.i8, 2uLL);
  a3[13] = vshll_high_n_s16(v27, 2uLL);
  a2[14] = vshll_n_s16(*(int16x4_t *)v28.i8, 2uLL);
  a3[14] = vshll_high_n_s16(v28, 2uLL);
  a2[15] = vshll_n_s16(*(int16x4_t *)v29.i8, 2uLL);
  a3[15] = vshll_high_n_s16(v29, 2uLL);
  v31 = a1[1];
  v30 = a1 + 1;
  v32 = *(int16x8_t *)((char *)v30 + v7);
  v33 = *(int16x8_t *)((char *)v30 + v9);
  v34 = *(int16x8_t *)((char *)v30 + v11);
  v35 = *(int16x8_t *)((char *)v30 + v13);
  v36 = *(int16x8_t *)((char *)v30 + v15);
  v37 = *(int16x8_t *)((char *)v30 + v17);
  v38 = *(int16x8_t *)((char *)v30 + v19 * 16 - v7);
  *a4 = vshll_n_s16(*(int16x4_t *)v31.i8, 2uLL);
  *a5 = vshll_high_n_s16(v31, 2uLL);
  a4[1] = vshll_n_s16(*(int16x4_t *)v32.i8, 2uLL);
  a5[1] = vshll_high_n_s16(v32, 2uLL);
  a4[2] = vshll_n_s16(*(int16x4_t *)v33.i8, 2uLL);
  a5[2] = vshll_high_n_s16(v33, 2uLL);
  a4[3] = vshll_n_s16(*(int16x4_t *)v34.i8, 2uLL);
  a5[3] = vshll_high_n_s16(v34, 2uLL);
  a4[4] = vshll_n_s16(*(int16x4_t *)v35.i8, 2uLL);
  a5[4] = vshll_high_n_s16(v35, 2uLL);
  a4[5] = vshll_n_s16(*(int16x4_t *)v36.i8, 2uLL);
  a5[5] = vshll_high_n_s16(v36, 2uLL);
  a4[6] = vshll_n_s16(*(int16x4_t *)v37.i8, 2uLL);
  a5[6] = vshll_high_n_s16(v37, 2uLL);
  a4[7] = vshll_n_s16(*(int16x4_t *)v38.i8, 2uLL);
  a5[7] = vshll_high_n_s16(v38, 2uLL);
  v39 = (int16x4_t *)&v30[v19];
  v40 = *(int16x8_t *)v39->i8;
  v41 = *(int16x8_t *)&v39->i8[v7];
  v42 = *(int16x8_t *)&v39->i8[v9];
  v43 = *(int16x8_t *)&v39->i8[v11];
  v44 = *(int16x8_t *)v39[(unint64_t)v13 / 8].i8;
  v45 = *(int16x8_t *)&v39->i8[v15];
  v46 = *(int16x8_t *)&v39->i8[v17];
  v47 = *(int16x8_t *)&v39->i8[v20];
  a4[8] = vshll_n_s16(*v39, 2uLL);
  a5[8] = vshll_high_n_s16(v40, 2uLL);
  a4[9] = vshll_n_s16(*(int16x4_t *)v41.i8, 2uLL);
  a5[9] = vshll_high_n_s16(v41, 2uLL);
  a4[10] = vshll_n_s16(*(int16x4_t *)v42.i8, 2uLL);
  a5[10] = vshll_high_n_s16(v42, 2uLL);
  a4[11] = vshll_n_s16(*(int16x4_t *)v43.i8, 2uLL);
  a5[11] = vshll_high_n_s16(v43, 2uLL);
  a4[12] = vshll_n_s16(*(int16x4_t *)v44.i8, 2uLL);
  a5[12] = vshll_high_n_s16(v44, 2uLL);
  a4[13] = vshll_n_s16(*(int16x4_t *)v45.i8, 2uLL);
  a5[13] = vshll_high_n_s16(v45, 2uLL);
  a4[14] = vshll_n_s16(*(int16x4_t *)v46.i8, 2uLL);
  a5[14] = vshll_high_n_s16(v46, 2uLL);
  a4[15] = vshll_n_s16(*(int16x4_t *)v47.i8, 2uLL);
  result = vshll_high_n_s16(v47, 2uLL);
  a5[15] = result;
  return result;
}

int32x4_t highbd_right_shift_16x16(uint64_t a1, int32x4_t *a2, uint64_t a3, int32x4_t *a4)
{
  uint32x4_t v4;
  uint32x4_t v5;
  uint32x4_t v6;
  uint32x4_t v7;
  uint32x4_t v8;
  uint32x4_t v9;
  uint32x4_t v10;
  uint32x4_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  uint32x4_t v15;
  uint32x4_t v16;
  uint32x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  int32x4_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  int32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  int32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  int32x4_t result;

  v5 = *(uint32x4_t *)a1;
  v4 = *(uint32x4_t *)(a1 + 16);
  v7 = *(uint32x4_t *)a2;
  v6 = (uint32x4_t)a2[1];
  v9 = *(uint32x4_t *)(a1 + 32);
  v8 = *(uint32x4_t *)(a1 + 48);
  v11 = (uint32x4_t)a2[2];
  v10 = (uint32x4_t)a2[3];
  v13 = *(uint32x4_t *)(a1 + 64);
  v12 = *(uint32x4_t *)(a1 + 80);
  v15 = (uint32x4_t)a2[4];
  v14 = (uint32x4_t)a2[5];
  v17 = *(uint32x4_t *)(a1 + 96);
  v16 = *(uint32x4_t *)(a1 + 112);
  v19 = (uint32x4_t)a2[6];
  v18 = (uint32x4_t)a2[7];
  v20.i64[0] = 0x100000001;
  v20.i64[1] = 0x100000001;
  *(int32x4_t *)a1 = vaddq_s32(*(int32x4_t *)a1, v20);
  *a2 = vaddq_s32(*a2, v20);
  *(int32x4_t *)(a1 + 16) = vaddq_s32(*(int32x4_t *)(a1 + 16), v20);
  a2[1] = vaddq_s32(a2[1], v20);
  *(int32x4_t *)(a1 + 32) = vaddq_s32(*(int32x4_t *)(a1 + 32), v20);
  a2[2] = vaddq_s32(a2[2], v20);
  *(int32x4_t *)(a1 + 48) = vaddq_s32(*(int32x4_t *)(a1 + 48), v20);
  a2[3] = vaddq_s32(a2[3], v20);
  *(int32x4_t *)(a1 + 64) = vaddq_s32(*(int32x4_t *)(a1 + 64), v20);
  a2[4] = vaddq_s32(a2[4], v20);
  *(int32x4_t *)(a1 + 80) = vaddq_s32(*(int32x4_t *)(a1 + 80), v20);
  a2[5] = vaddq_s32(a2[5], v20);
  *(int32x4_t *)(a1 + 96) = vaddq_s32(*(int32x4_t *)(a1 + 96), v20);
  a2[6] = vaddq_s32(a2[6], v20);
  *(int32x4_t *)(a1 + 112) = vaddq_s32(*(int32x4_t *)(a1 + 112), v20);
  a2[7] = vaddq_s32(a2[7], v20);
  *(uint32x4_t *)a1 = vsraq_n_u32(*(uint32x4_t *)a1, v5, 0x1FuLL);
  *(uint32x4_t *)a2 = vsraq_n_u32(*(uint32x4_t *)a2, v7, 0x1FuLL);
  *(uint32x4_t *)(a1 + 16) = vsraq_n_u32(*(uint32x4_t *)(a1 + 16), v4, 0x1FuLL);
  a2[1] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[1], v6, 0x1FuLL);
  *(uint32x4_t *)(a1 + 32) = vsraq_n_u32(*(uint32x4_t *)(a1 + 32), v9, 0x1FuLL);
  a2[2] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[2], v11, 0x1FuLL);
  *(uint32x4_t *)(a1 + 48) = vsraq_n_u32(*(uint32x4_t *)(a1 + 48), v8, 0x1FuLL);
  a2[3] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[3], v10, 0x1FuLL);
  *(uint32x4_t *)(a1 + 64) = vsraq_n_u32(*(uint32x4_t *)(a1 + 64), v13, 0x1FuLL);
  a2[4] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[4], v15, 0x1FuLL);
  *(uint32x4_t *)(a1 + 80) = vsraq_n_u32(*(uint32x4_t *)(a1 + 80), v12, 0x1FuLL);
  a2[5] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[5], v14, 0x1FuLL);
  *(uint32x4_t *)(a1 + 96) = vsraq_n_u32(*(uint32x4_t *)(a1 + 96), v17, 0x1FuLL);
  a2[6] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[6], v19, 0x1FuLL);
  *(uint32x4_t *)(a1 + 112) = vsraq_n_u32(*(uint32x4_t *)(a1 + 112), v16, 0x1FuLL);
  a2[7] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[7], v18, 0x1FuLL);
  *(int32x4_t *)a1 = vshrq_n_s32(*(int32x4_t *)a1, 2uLL);
  *a2 = vshrq_n_s32(*a2, 2uLL);
  *(int32x4_t *)(a1 + 16) = vshrq_n_s32(*(int32x4_t *)(a1 + 16), 2uLL);
  a2[1] = vshrq_n_s32(a2[1], 2uLL);
  *(int32x4_t *)(a1 + 32) = vshrq_n_s32(*(int32x4_t *)(a1 + 32), 2uLL);
  a2[2] = vshrq_n_s32(a2[2], 2uLL);
  *(int32x4_t *)(a1 + 48) = vshrq_n_s32(*(int32x4_t *)(a1 + 48), 2uLL);
  a2[3] = vshrq_n_s32(a2[3], 2uLL);
  *(int32x4_t *)(a1 + 64) = vshrq_n_s32(*(int32x4_t *)(a1 + 64), 2uLL);
  a2[4] = vshrq_n_s32(a2[4], 2uLL);
  *(int32x4_t *)(a1 + 80) = vshrq_n_s32(*(int32x4_t *)(a1 + 80), 2uLL);
  a2[5] = vshrq_n_s32(a2[5], 2uLL);
  *(int32x4_t *)(a1 + 96) = vshrq_n_s32(*(int32x4_t *)(a1 + 96), 2uLL);
  a2[6] = vshrq_n_s32(a2[6], 2uLL);
  *(int32x4_t *)(a1 + 112) = vshrq_n_s32(*(int32x4_t *)(a1 + 112), 2uLL);
  v21 = (uint32x4_t)a2[8];
  a2[7] = vshrq_n_s32(a2[7], 2uLL);
  v23 = *(int32x4_t *)(a1 + 128);
  v22 = *(uint32x4_t *)(a1 + 144);
  v25 = (uint32x4_t)a2[9];
  v24 = (uint32x4_t)a2[10];
  v27 = *(uint32x4_t *)(a1 + 160);
  v26 = *(uint32x4_t *)(a1 + 176);
  v29 = (uint32x4_t)a2[11];
  v28 = (uint32x4_t)a2[12];
  v31 = *(uint32x4_t *)(a1 + 192);
  v30 = *(uint32x4_t *)(a1 + 208);
  v33 = (uint32x4_t)a2[13];
  v32 = (uint32x4_t)a2[14];
  v35 = *(uint32x4_t *)(a1 + 224);
  v34 = *(uint32x4_t *)(a1 + 240);
  v36 = (uint32x4_t)a2[15];
  *(int32x4_t *)(a1 + 128) = vaddq_s32(v23, v20);
  a2[8] = vaddq_s32(a2[8], v20);
  *(int32x4_t *)(a1 + 144) = vaddq_s32(*(int32x4_t *)(a1 + 144), v20);
  a2[9] = vaddq_s32(a2[9], v20);
  *(int32x4_t *)(a1 + 160) = vaddq_s32(*(int32x4_t *)(a1 + 160), v20);
  a2[10] = vaddq_s32(a2[10], v20);
  *(int32x4_t *)(a1 + 176) = vaddq_s32(*(int32x4_t *)(a1 + 176), v20);
  a2[11] = vaddq_s32(a2[11], v20);
  *(int32x4_t *)(a1 + 192) = vaddq_s32(*(int32x4_t *)(a1 + 192), v20);
  a2[12] = vaddq_s32(a2[12], v20);
  *(int32x4_t *)(a1 + 208) = vaddq_s32(*(int32x4_t *)(a1 + 208), v20);
  a2[13] = vaddq_s32(a2[13], v20);
  *(int32x4_t *)(a1 + 224) = vaddq_s32(*(int32x4_t *)(a1 + 224), v20);
  a2[14] = vaddq_s32(a2[14], v20);
  *(int32x4_t *)(a1 + 240) = vaddq_s32(*(int32x4_t *)(a1 + 240), v20);
  a2[15] = vaddq_s32(a2[15], v20);
  *(uint32x4_t *)(a1 + 128) = vsraq_n_u32(*(uint32x4_t *)(a1 + 128), (uint32x4_t)v23, 0x1FuLL);
  a2[8] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[8], v21, 0x1FuLL);
  *(uint32x4_t *)(a1 + 144) = vsraq_n_u32(*(uint32x4_t *)(a1 + 144), v22, 0x1FuLL);
  a2[9] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[9], v25, 0x1FuLL);
  *(uint32x4_t *)(a1 + 160) = vsraq_n_u32(*(uint32x4_t *)(a1 + 160), v27, 0x1FuLL);
  a2[10] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[10], v24, 0x1FuLL);
  *(uint32x4_t *)(a1 + 176) = vsraq_n_u32(*(uint32x4_t *)(a1 + 176), v26, 0x1FuLL);
  a2[11] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[11], v29, 0x1FuLL);
  *(uint32x4_t *)(a1 + 192) = vsraq_n_u32(*(uint32x4_t *)(a1 + 192), v31, 0x1FuLL);
  a2[12] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[12], v28, 0x1FuLL);
  *(uint32x4_t *)(a1 + 208) = vsraq_n_u32(*(uint32x4_t *)(a1 + 208), v30, 0x1FuLL);
  a2[13] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[13], v33, 0x1FuLL);
  *(uint32x4_t *)(a1 + 224) = vsraq_n_u32(*(uint32x4_t *)(a1 + 224), v35, 0x1FuLL);
  a2[14] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[14], v32, 0x1FuLL);
  *(uint32x4_t *)(a1 + 240) = vsraq_n_u32(*(uint32x4_t *)(a1 + 240), v34, 0x1FuLL);
  a2[15] = (int32x4_t)vsraq_n_u32((uint32x4_t)a2[15], v36, 0x1FuLL);
  *(int32x4_t *)(a1 + 128) = vshrq_n_s32(*(int32x4_t *)(a1 + 128), 2uLL);
  a2[8] = vshrq_n_s32(a2[8], 2uLL);
  *(int32x4_t *)(a1 + 144) = vshrq_n_s32(*(int32x4_t *)(a1 + 144), 2uLL);
  a2[9] = vshrq_n_s32(a2[9], 2uLL);
  *(int32x4_t *)(a1 + 160) = vshrq_n_s32(*(int32x4_t *)(a1 + 160), 2uLL);
  a2[10] = vshrq_n_s32(a2[10], 2uLL);
  *(int32x4_t *)(a1 + 176) = vshrq_n_s32(*(int32x4_t *)(a1 + 176), 2uLL);
  a2[11] = vshrq_n_s32(a2[11], 2uLL);
  *(int32x4_t *)(a1 + 192) = vshrq_n_s32(*(int32x4_t *)(a1 + 192), 2uLL);
  a2[12] = vshrq_n_s32(a2[12], 2uLL);
  *(int32x4_t *)(a1 + 208) = vshrq_n_s32(*(int32x4_t *)(a1 + 208), 2uLL);
  a2[13] = vshrq_n_s32(a2[13], 2uLL);
  *(int32x4_t *)(a1 + 224) = vshrq_n_s32(*(int32x4_t *)(a1 + 224), 2uLL);
  a2[14] = vshrq_n_s32(a2[14], 2uLL);
  *(int32x4_t *)(a1 + 240) = vshrq_n_s32(*(int32x4_t *)(a1 + 240), 2uLL);
  a2[15] = vshrq_n_s32(a2[15], 2uLL);
  v38 = *(uint32x4_t *)a3;
  v37 = *(uint32x4_t *)(a3 + 16);
  v40 = *(uint32x4_t *)a4;
  v39 = (uint32x4_t)a4[1];
  v42 = *(uint32x4_t *)(a3 + 32);
  v41 = *(uint32x4_t *)(a3 + 48);
  v44 = (uint32x4_t)a4[2];
  v43 = (uint32x4_t)a4[3];
  v46 = *(uint32x4_t *)(a3 + 64);
  v45 = *(uint32x4_t *)(a3 + 80);
  v48 = (uint32x4_t)a4[4];
  v47 = (uint32x4_t)a4[5];
  v50 = *(uint32x4_t *)(a3 + 96);
  v49 = *(uint32x4_t *)(a3 + 112);
  v52 = (uint32x4_t)a4[6];
  v51 = (uint32x4_t)a4[7];
  *(int32x4_t *)a3 = vaddq_s32(*(int32x4_t *)a3, v20);
  *a4 = vaddq_s32(*a4, v20);
  *(int32x4_t *)(a3 + 16) = vaddq_s32(*(int32x4_t *)(a3 + 16), v20);
  a4[1] = vaddq_s32(a4[1], v20);
  *(int32x4_t *)(a3 + 32) = vaddq_s32(*(int32x4_t *)(a3 + 32), v20);
  a4[2] = vaddq_s32(a4[2], v20);
  *(int32x4_t *)(a3 + 48) = vaddq_s32(*(int32x4_t *)(a3 + 48), v20);
  a4[3] = vaddq_s32(a4[3], v20);
  *(int32x4_t *)(a3 + 64) = vaddq_s32(*(int32x4_t *)(a3 + 64), v20);
  a4[4] = vaddq_s32(a4[4], v20);
  *(int32x4_t *)(a3 + 80) = vaddq_s32(*(int32x4_t *)(a3 + 80), v20);
  a4[5] = vaddq_s32(a4[5], v20);
  *(int32x4_t *)(a3 + 96) = vaddq_s32(*(int32x4_t *)(a3 + 96), v20);
  a4[6] = vaddq_s32(a4[6], v20);
  *(int32x4_t *)(a3 + 112) = vaddq_s32(*(int32x4_t *)(a3 + 112), v20);
  a4[7] = vaddq_s32(a4[7], v20);
  *(uint32x4_t *)a3 = vsraq_n_u32(*(uint32x4_t *)a3, v38, 0x1FuLL);
  *(uint32x4_t *)a4 = vsraq_n_u32(*(uint32x4_t *)a4, v40, 0x1FuLL);
  *(uint32x4_t *)(a3 + 16) = vsraq_n_u32(*(uint32x4_t *)(a3 + 16), v37, 0x1FuLL);
  a4[1] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[1], v39, 0x1FuLL);
  *(uint32x4_t *)(a3 + 32) = vsraq_n_u32(*(uint32x4_t *)(a3 + 32), v42, 0x1FuLL);
  a4[2] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[2], v44, 0x1FuLL);
  *(uint32x4_t *)(a3 + 48) = vsraq_n_u32(*(uint32x4_t *)(a3 + 48), v41, 0x1FuLL);
  a4[3] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[3], v43, 0x1FuLL);
  *(uint32x4_t *)(a3 + 64) = vsraq_n_u32(*(uint32x4_t *)(a3 + 64), v46, 0x1FuLL);
  a4[4] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[4], v48, 0x1FuLL);
  *(uint32x4_t *)(a3 + 80) = vsraq_n_u32(*(uint32x4_t *)(a3 + 80), v45, 0x1FuLL);
  a4[5] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[5], v47, 0x1FuLL);
  *(uint32x4_t *)(a3 + 96) = vsraq_n_u32(*(uint32x4_t *)(a3 + 96), v50, 0x1FuLL);
  a4[6] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[6], v52, 0x1FuLL);
  *(uint32x4_t *)(a3 + 112) = vsraq_n_u32(*(uint32x4_t *)(a3 + 112), v49, 0x1FuLL);
  a4[7] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[7], v51, 0x1FuLL);
  *(int32x4_t *)a3 = vshrq_n_s32(*(int32x4_t *)a3, 2uLL);
  *a4 = vshrq_n_s32(*a4, 2uLL);
  *(int32x4_t *)(a3 + 16) = vshrq_n_s32(*(int32x4_t *)(a3 + 16), 2uLL);
  a4[1] = vshrq_n_s32(a4[1], 2uLL);
  *(int32x4_t *)(a3 + 32) = vshrq_n_s32(*(int32x4_t *)(a3 + 32), 2uLL);
  a4[2] = vshrq_n_s32(a4[2], 2uLL);
  *(int32x4_t *)(a3 + 48) = vshrq_n_s32(*(int32x4_t *)(a3 + 48), 2uLL);
  a4[3] = vshrq_n_s32(a4[3], 2uLL);
  *(int32x4_t *)(a3 + 64) = vshrq_n_s32(*(int32x4_t *)(a3 + 64), 2uLL);
  a4[4] = vshrq_n_s32(a4[4], 2uLL);
  *(int32x4_t *)(a3 + 80) = vshrq_n_s32(*(int32x4_t *)(a3 + 80), 2uLL);
  a4[5] = vshrq_n_s32(a4[5], 2uLL);
  *(int32x4_t *)(a3 + 96) = vshrq_n_s32(*(int32x4_t *)(a3 + 96), 2uLL);
  a4[6] = vshrq_n_s32(a4[6], 2uLL);
  *(int32x4_t *)(a3 + 112) = vshrq_n_s32(*(int32x4_t *)(a3 + 112), 2uLL);
  v53 = (uint32x4_t)a4[8];
  a4[7] = vshrq_n_s32(a4[7], 2uLL);
  v55 = *(int32x4_t *)(a3 + 128);
  v54 = *(uint32x4_t *)(a3 + 144);
  v57 = (uint32x4_t)a4[9];
  v56 = (uint32x4_t)a4[10];
  v59 = *(uint32x4_t *)(a3 + 160);
  v58 = *(uint32x4_t *)(a3 + 176);
  v61 = (uint32x4_t)a4[11];
  v60 = (uint32x4_t)a4[12];
  v63 = *(uint32x4_t *)(a3 + 192);
  v62 = *(uint32x4_t *)(a3 + 208);
  v65 = (uint32x4_t)a4[13];
  v64 = (uint32x4_t)a4[14];
  v67 = *(uint32x4_t *)(a3 + 224);
  v66 = *(uint32x4_t *)(a3 + 240);
  v68 = (uint32x4_t)a4[15];
  *(int32x4_t *)(a3 + 128) = vaddq_s32(v55, v20);
  a4[8] = vaddq_s32(a4[8], v20);
  *(int32x4_t *)(a3 + 144) = vaddq_s32(*(int32x4_t *)(a3 + 144), v20);
  a4[9] = vaddq_s32(a4[9], v20);
  *(int32x4_t *)(a3 + 160) = vaddq_s32(*(int32x4_t *)(a3 + 160), v20);
  a4[10] = vaddq_s32(a4[10], v20);
  *(int32x4_t *)(a3 + 176) = vaddq_s32(*(int32x4_t *)(a3 + 176), v20);
  a4[11] = vaddq_s32(a4[11], v20);
  *(int32x4_t *)(a3 + 192) = vaddq_s32(*(int32x4_t *)(a3 + 192), v20);
  a4[12] = vaddq_s32(a4[12], v20);
  *(int32x4_t *)(a3 + 208) = vaddq_s32(*(int32x4_t *)(a3 + 208), v20);
  a4[13] = vaddq_s32(a4[13], v20);
  *(int32x4_t *)(a3 + 224) = vaddq_s32(*(int32x4_t *)(a3 + 224), v20);
  a4[14] = vaddq_s32(a4[14], v20);
  *(int32x4_t *)(a3 + 240) = vaddq_s32(*(int32x4_t *)(a3 + 240), v20);
  a4[15] = vaddq_s32(a4[15], v20);
  *(uint32x4_t *)(a3 + 128) = vsraq_n_u32(*(uint32x4_t *)(a3 + 128), (uint32x4_t)v55, 0x1FuLL);
  a4[8] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[8], v53, 0x1FuLL);
  *(uint32x4_t *)(a3 + 144) = vsraq_n_u32(*(uint32x4_t *)(a3 + 144), v54, 0x1FuLL);
  a4[9] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[9], v57, 0x1FuLL);
  *(uint32x4_t *)(a3 + 160) = vsraq_n_u32(*(uint32x4_t *)(a3 + 160), v59, 0x1FuLL);
  a4[10] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[10], v56, 0x1FuLL);
  *(uint32x4_t *)(a3 + 176) = vsraq_n_u32(*(uint32x4_t *)(a3 + 176), v58, 0x1FuLL);
  a4[11] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[11], v61, 0x1FuLL);
  *(uint32x4_t *)(a3 + 192) = vsraq_n_u32(*(uint32x4_t *)(a3 + 192), v63, 0x1FuLL);
  a4[12] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[12], v60, 0x1FuLL);
  *(uint32x4_t *)(a3 + 208) = vsraq_n_u32(*(uint32x4_t *)(a3 + 208), v62, 0x1FuLL);
  a4[13] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[13], v65, 0x1FuLL);
  *(uint32x4_t *)(a3 + 224) = vsraq_n_u32(*(uint32x4_t *)(a3 + 224), v67, 0x1FuLL);
  a4[14] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[14], v64, 0x1FuLL);
  *(uint32x4_t *)(a3 + 240) = vsraq_n_u32(*(uint32x4_t *)(a3 + 240), v66, 0x1FuLL);
  a4[15] = (int32x4_t)vsraq_n_u32((uint32x4_t)a4[15], v68, 0x1FuLL);
  *(int32x4_t *)(a3 + 128) = vshrq_n_s32(*(int32x4_t *)(a3 + 128), 2uLL);
  a4[8] = vshrq_n_s32(a4[8], 2uLL);
  *(int32x4_t *)(a3 + 144) = vshrq_n_s32(*(int32x4_t *)(a3 + 144), 2uLL);
  a4[9] = vshrq_n_s32(a4[9], 2uLL);
  *(int32x4_t *)(a3 + 160) = vshrq_n_s32(*(int32x4_t *)(a3 + 160), 2uLL);
  a4[10] = vshrq_n_s32(a4[10], 2uLL);
  *(int32x4_t *)(a3 + 176) = vshrq_n_s32(*(int32x4_t *)(a3 + 176), 2uLL);
  a4[11] = vshrq_n_s32(a4[11], 2uLL);
  *(int32x4_t *)(a3 + 192) = vshrq_n_s32(*(int32x4_t *)(a3 + 192), 2uLL);
  a4[12] = vshrq_n_s32(a4[12], 2uLL);
  *(int32x4_t *)(a3 + 208) = vshrq_n_s32(*(int32x4_t *)(a3 + 208), 2uLL);
  a4[13] = vshrq_n_s32(a4[13], 2uLL);
  *(int32x4_t *)(a3 + 224) = vshrq_n_s32(*(int32x4_t *)(a3 + 224), 2uLL);
  a4[14] = vshrq_n_s32(a4[14], 2uLL);
  *(int32x4_t *)(a3 + 240) = vshrq_n_s32(*(int32x4_t *)(a3 + 240), 2uLL);
  result = vshrq_n_s32(a4[15], 2uLL);
  a4[15] = result;
  return result;
}

int16x8_t fadst16_8col(uint64_t a1)
{
  int16x8_t v1;
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int32x4_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int32x4_t v31;
  int16x8_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int16x8_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  int32x4_t v139;
  int32x4_t v140;
  int16x8_t v141;
  int32x4_t v142;
  int32x4_t v143;
  int16x8_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int16x8_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int32x4_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int32x4_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int16x8_t result;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int32x4_t v208;
  int32x4_t v209;
  int32x4_t v210;
  int32x4_t v211;
  int32x4_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  int32x4_t v216;
  int32x4_t v217;
  int32x4_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int16x8_t v233;
  int32x4_t v234;
  int16x8_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int16x8_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int16x8_t v244;

  v1 = vdupq_n_s16(0x3FECu);
  v2 = vdupq_n_s16(0x324u);
  v3 = *(int16x8_t *)(a1 + 224);
  v4 = *(int16x8_t *)(a1 + 240);
  v5 = *(int16x8_t *)(a1 + 16);
  v6 = vmlal_s16(vmull_s16(*(int16x4_t *)a1, *(int16x4_t *)v2.i8), *(int16x4_t *)v4.i8, *(int16x4_t *)v1.i8);
  v213 = vmlal_high_s16(vmull_high_s16(*(int16x8_t *)a1, v2), v4, v1);
  v242 = vmlsl_s16(vmull_s16(*(int16x4_t *)v4.i8, *(int16x4_t *)v2.i8), *(int16x4_t *)a1, *(int16x4_t *)v1.i8);
  v223 = vmlsl_high_s16(vmull_high_s16(v4, v2), *(int16x8_t *)a1, v1);
  v7 = vdupq_n_s16(0x3E15u);
  v8 = vdupq_n_s16(0xF8Du);
  v9 = *(int16x8_t *)(a1 + 192);
  v10 = *(int16x8_t *)(a1 + 208);
  v12 = *(int16x8_t *)(a1 + 32);
  v11 = *(int16x8_t *)(a1 + 48);
  v225 = vmlal_s16(vmull_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)v8.i8), *(int16x4_t *)v10.i8, *(int16x4_t *)v7.i8);
  v227 = vmlal_high_s16(vmull_high_s16(v12, v8), v10, v7);
  v209 = vmlsl_s16(vmull_s16(*(int16x4_t *)v10.i8, *(int16x4_t *)v8.i8), *(int16x4_t *)v12.i8, *(int16x4_t *)v7.i8);
  v211 = vmlsl_high_s16(vmull_high_s16(v10, v8), v12, v7);
  v13 = vdupq_n_s16(0x39DBu);
  v14 = vdupq_n_s16(0x1B5Du);
  v15 = *(int16x8_t *)(a1 + 160);
  v16 = *(int16x8_t *)(a1 + 176);
  v18 = *(int16x8_t *)(a1 + 64);
  v17 = *(int16x8_t *)(a1 + 80);
  v219 = vmlal_high_s16(vmull_high_s16(v18, v14), v16, v13);
  v221 = vmlal_s16(vmull_s16(*(int16x4_t *)v18.i8, *(int16x4_t *)v14.i8), *(int16x4_t *)v16.i8, *(int16x4_t *)v13.i8);
  v216 = vmlsl_high_s16(vmull_high_s16(v16, v14), v18, v13);
  v217 = vmlsl_s16(vmull_s16(*(int16x4_t *)v16.i8, *(int16x4_t *)v14.i8), *(int16x4_t *)v18.i8, *(int16x4_t *)v13.i8);
  v19 = vdupq_n_s16(0x3368u);
  v20 = vdupq_n_s16(0x2620u);
  v21 = vdupq_n_s16(0x2AFBu);
  v22 = vdupq_n_s16(0x2F6Cu);
  v24 = *(int16x8_t *)(a1 + 128);
  v23 = *(int16x8_t *)(a1 + 144);
  v25 = vmull_s16(*(int16x4_t *)v23.i8, *(int16x4_t *)v20.i8);
  v26 = vmull_high_s16(v23, v20);
  v27 = *(int16x8_t *)(a1 + 96);
  v28 = *(int16x8_t *)(a1 + 112);
  v29 = vdupq_n_s16(0x20E7u);
  v215 = vmlal_s16(vmull_s16(*(int16x4_t *)v27.i8, *(int16x4_t *)v20.i8), *(int16x4_t *)v23.i8, *(int16x4_t *)v19.i8);
  v30 = vdupq_n_s16(0x36E5u);
  v31 = vmull_high_s16(v27, v20);
  v32 = vdupq_n_s16(0x1590u);
  v206 = vmlal_high_s16(v31, v23, v19);
  v207 = vmlsl_s16(v25, *(int16x4_t *)v27.i8, *(int16x4_t *)v19.i8);
  v208 = vmlsl_high_s16(v26, v27, v19);
  v33 = vmlal_s16(vmull_s16(*(int16x4_t *)v24.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v28.i8, *(int16x4_t *)v21.i8);
  v191 = vmlal_high_s16(vmull_high_s16(v24, v22), v28, v21);
  v192 = vmlsl_s16(vmull_s16(*(int16x4_t *)v28.i8, *(int16x4_t *)v22.i8), *(int16x4_t *)v24.i8, *(int16x4_t *)v21.i8);
  v34 = vmull_s16(*(int16x4_t *)v17.i8, *(int16x4_t *)v30.i8);
  v35 = vmull_high_s16(v17, v30);
  v36 = vmlal_s16(vmull_s16(*(int16x4_t *)v15.i8, *(int16x4_t *)v30.i8), *(int16x4_t *)v17.i8, *(int16x4_t *)v29.i8);
  v37 = vmlal_high_s16(vmull_high_s16(v15, v30), v17, v29);
  v38 = vdupq_n_s16(0x3C42u);
  v39 = vmlsl_s16(v34, *(int16x4_t *)v15.i8, *(int16x4_t *)v29.i8);
  v40 = vmlsl_high_s16(v35, v15, v29);
  v41 = vmlal_s16(vmull_s16(*(int16x4_t *)v9.i8, *(int16x4_t *)v38.i8), *(int16x4_t *)v11.i8, *(int16x4_t *)v32.i8);
  v42 = vmlal_high_s16(vmull_high_s16(v9, v38), v11, v32);
  v189 = vmlsl_high_s16(vmull_high_s16(v28, v22), v24, v21);
  v190 = vmlsl_s16(vmull_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v38.i8), *(int16x4_t *)v9.i8, *(int16x4_t *)v32.i8);
  v43 = vmlsl_high_s16(vmull_high_s16(v11, v38), v9, v32);
  v44 = vdupq_n_s16(0x964u);
  v45 = vdupq_n_s16(0x3F4Fu);
  v46 = vmlal_s16(vmull_s16(*(int16x4_t *)v3.i8, *(int16x4_t *)v45.i8), *(int16x4_t *)v5.i8, *(int16x4_t *)v44.i8);
  v47 = vmlal_high_s16(vmull_high_s16(v3, v45), v5, v44);
  v48 = vmlsl_s16(vmull_s16(*(int16x4_t *)v5.i8, *(int16x4_t *)v45.i8), *(int16x4_t *)v3.i8, *(int16x4_t *)v44.i8);
  v49 = vmlsl_high_s16(vmull_high_s16(v5, v45), v3, v44);
  v50 = vrshrq_n_s32(vsubq_s32(v6, v33), 0xEuLL);
  v51 = vrshrq_n_s32(vsubq_s32(v242, v192), 0xEuLL);
  v52 = vdupq_n_s32(0x3EC5u);
  v53 = vdupq_n_s32(0xC7Cu);
  v54 = vmulq_s32(v50, v53);
  v55 = vmlaq_s32(vmulq_s32(v50, v52), v51, v53);
  v56 = vdupq_n_s32(0xFFFFC13B);
  v238 = vmlaq_s32(v54, v51, v56);
  v240 = v55;
  v57 = vrshrq_n_s32(vsubq_s32(v213, v191), 0xEuLL);
  v58 = vrshrq_n_s32(vsubq_s32(v223, v189), 0xEuLL);
  v203 = vmlaq_s32(vmulq_s32(v57, v52), v58, v53);
  v204 = vmlaq_s32(vmulq_s32(v57, v53), v58, v56);
  v59 = vrshrq_n_s32(vsubq_s32(v221, v41), 0xEuLL);
  v60 = vrshrq_n_s32(vsubq_s32(v219, v42), 0xEuLL);
  v61 = vrshrq_n_s32(vsubq_s32(v217, v190), 0xEuLL);
  v62 = vrshrq_n_s32(vsubq_s32(v216, v43), 0xEuLL);
  v234 = vmlaq_s32(vmulq_s32(v59, v52), v61, v53);
  v202 = vmlaq_s32(vmulq_s32(v60, v52), v62, v53);
  v63 = vdupq_n_s32(0xFFFFF384);
  v236 = vmlaq_s32(vmulq_s32(v59, v63), v61, v52);
  v230 = vmlaq_s32(vmulq_s32(v60, v63), v62, v52);
  v64 = vrshrq_n_s32(vsubq_s32(v225, v36), 0xEuLL);
  v65 = vrshrq_n_s32(vsubq_s32(v209, v39), 0xEuLL);
  v66 = vdupq_n_s32(0x238Eu);
  v67 = vdupq_n_s32(0x3537u);
  v68 = vmulq_s32(v64, v67);
  v69 = vmlaq_s32(vmulq_s32(v64, v66), v65, v67);
  v70 = vdupq_n_s32(0xFFFFDC72);
  v200 = v69;
  v201 = vmlaq_s32(v68, v65, v70);
  v71 = vrshrq_n_s32(vsubq_s32(v227, v37), 0xEuLL);
  v72 = vrshrq_n_s32(vsubq_s32(v211, v40), 0xEuLL);
  v198 = vmlaq_s32(vmulq_s32(v71, v66), v72, v67);
  v199 = vmlaq_s32(vmulq_s32(v71, v67), v72, v70);
  v73 = vrshrq_n_s32(vsubq_s32(v215, v46), 0xEuLL);
  v74 = vrshrq_n_s32(vsubq_s32(v206, v47), 0xEuLL);
  v75 = vrshrq_n_s32(vsubq_s32(v207, v48), 0xEuLL);
  v76 = vrshrq_n_s32(vsubq_s32(v208, v49), 0xEuLL);
  v196 = vmlaq_s32(vmulq_s32(v73, v66), v75, v67);
  v195 = vmlaq_s32(vmulq_s32(v74, v66), v76, v67);
  v77 = vdupq_n_s32(0xFFFFCAC9);
  v232 = vmlaq_s32(vmulq_s32(v73, v77), v75, v66);
  v229 = vmlaq_s32(vmulq_s32(v74, v77), v76, v66);
  v197 = vaddq_s32(v33, v6);
  v243 = vaddq_s32(v192, v242);
  v193 = vaddq_s32(v36, v225);
  v194 = vaddq_s32(v189, v223);
  v205 = vaddq_s32(v37, v227);
  v210 = vaddq_s32(v39, v209);
  v212 = vaddq_s32(v40, v211);
  v214 = vaddq_s32(v191, v213);
  v78 = vaddq_s32(v46, v215);
  v79 = vrshrq_n_s32(vaddq_s32(v41, v221), 0xEuLL);
  v218 = vrshrq_n_s32(vaddq_s32(v190, v217), 0xEuLL);
  v80 = vsubq_s32(vrshrq_n_s32(v197, 0xEuLL), v79);
  v81 = vsubq_s32(vrshrq_n_s32(v243, 0xEuLL), v218);
  v82 = vdupq_n_s32(0x3B21u);
  v83 = vdupq_n_s32(0x187Eu);
  v226 = vmlaq_s32(vmulq_s32(v80, v82), v81, v83);
  v84 = vdupq_n_s32(0xFFFFC4DF);
  v228 = vmlaq_s32(vmulq_s32(v80, v83), v81, v84);
  v85 = vrshrq_n_s32(vaddq_s32(v42, v219), 0xEuLL);
  v86 = vrshrq_n_s32(vaddq_s32(v43, v216), 0xEuLL);
  v87 = vsubq_s32(vrshrq_n_s32(v214, 0xEuLL), v85);
  v88 = vsubq_s32(vrshrq_n_s32(v194, 0xEuLL), v86);
  v222 = vmlaq_s32(vmulq_s32(v87, v82), v88, v83);
  v224 = vmlaq_s32(vmulq_s32(v87, v83), v88, v84);
  v89 = vrshrq_n_s32(v78, 0xEuLL);
  v90 = vrshrq_n_s32(vaddq_s32(v48, v207), 0xEuLL);
  v91 = vsubq_s32(vrshrq_n_s32(v193, 0xEuLL), v89);
  v92 = vsubq_s32(vrshrq_n_s32(v210, 0xEuLL), v90);
  v93 = vmlaq_s32(vmulq_s32(v91, v82), v92, v83);
  v94 = vdupq_n_s32(0xFFFFE782);
  v95 = vmlaq_s32(vmulq_s32(v91, v94), v92, v82);
  v96 = vrshrq_n_s32(vaddq_s32(v47, v206), 0xEuLL);
  v97 = vrshrq_n_s32(vaddq_s32(v49, v208), 0xEuLL);
  v98 = vsubq_s32(vrshrq_n_s32(v205, 0xEuLL), v96);
  v99 = vsubq_s32(vrshrq_n_s32(v212, 0xEuLL), v97);
  v100 = vmlaq_s32(vmulq_s32(v98, v82), v99, v83);
  v101 = vmlaq_s32(vmulq_s32(v98, v94), v99, v82);
  v102 = vrshrq_n_s32(vsubq_s32(v240, v236), 0xEuLL);
  v103 = vrshrq_n_s32(vsubq_s32(v238, v234), 0xEuLL);
  v104 = vmlaq_s32(vmulq_s32(v102, v82), v103, v83);
  v220 = vmlaq_s32(vmulq_s32(v102, v83), v103, v84);
  v105 = vrshrq_n_s32(vsubq_s32(v203, v230), 0xEuLL);
  v106 = vrshrq_n_s32(vsubq_s32(v204, v202), 0xEuLL);
  v107 = vmlaq_s32(vmulq_s32(v105, v83), v106, v84);
  v108 = vmlaq_s32(vmulq_s32(v105, v82), v106, v83);
  v109 = vrshrq_n_s32(vsubq_s32(v200, v232), 0xEuLL);
  v110 = vrshrq_n_s32(vsubq_s32(v198, v229), 0xEuLL);
  v111 = vrshrq_n_s32(vsubq_s32(v201, v196), 0xEuLL);
  v112 = vrshrq_n_s32(vsubq_s32(v199, v195), 0xEuLL);
  v113 = vmlaq_s32(vmulq_s32(v109, v82), v111, v83);
  v114 = vmlaq_s32(vmulq_s32(v110, v82), v112, v83);
  v115 = vmlaq_s32(vmulq_s32(v109, v94), v111, v82);
  v116 = vmlaq_s32(vmulq_s32(v110, v94), v112, v82);
  v117 = vrsraq_n_s32(v89, v193, 0xEuLL);
  v118 = vrsraq_n_s32(v96, v205, 0xEuLL);
  v119 = vrsraq_n_s32(v90, v210, 0xEuLL);
  v120 = vrsraq_n_s32(v97, v212, 0xEuLL);
  v121 = vrsraq_n_s32(v79, v197, 0xEuLL);
  v122 = vrsraq_n_s32(v85, v214, 0xEuLL);
  v123 = vrsraq_n_s32(v218, v243, 0xEuLL);
  v124 = vrsraq_n_s32(v86, v194, 0xEuLL);
  v125 = vaddq_s32(v236, v240);
  v126 = vaddq_s32(v230, v203);
  v127 = vaddq_s32(v234, v238);
  v128 = vaddq_s32(v232, v200);
  v129 = vsubq_s32(v121, v117);
  v233 = (int16x8_t)vaddq_s32(v118, v122);
  v235 = (int16x8_t)vaddq_s32(v117, v121);
  v130 = vsubq_s32(v122, v118);
  v131 = vaddq_s32(v119, v123);
  v132 = vsubq_s32(v123, v119);
  v241 = (int16x8_t)vaddq_s32(v120, v124);
  v244 = (int16x8_t)v131;
  v133 = vsubq_s32(v124, v120);
  v231 = vaddq_s32(v95, v226);
  v134 = vsubq_s32(v226, v95);
  v135 = vaddq_s32(v101, v222);
  v136 = vsubq_s32(v222, v101);
  v239 = vaddq_s32(v93, v228);
  v137 = vsubq_s32(v228, v93);
  v237 = vaddq_s32(v100, v224);
  v138 = vsubq_s32(v224, v100);
  v139 = vrshrq_n_s32(v128, 0xEuLL);
  v140 = vsubq_s32(vrshrq_n_s32(v125, 0xEuLL), v139);
  v141 = (int16x8_t)vrsraq_n_s32(v139, v125, 0xEuLL);
  v142 = vrshrq_n_s32(vaddq_s32(v229, v198), 0xEuLL);
  v143 = vsubq_s32(vrshrq_n_s32(v126, 0xEuLL), v142);
  v144 = (int16x8_t)vrsraq_n_s32(v142, v126, 0xEuLL);
  v145 = vrshrq_n_s32(vaddq_s32(v196, v201), 0xEuLL);
  v146 = vsubq_s32(vrshrq_n_s32(v127, 0xEuLL), v145);
  v147 = (int16x8_t)vrsraq_n_s32(v145, v127, 0xEuLL);
  v148 = vaddq_s32(v115, v104);
  v149 = vsubq_s32(v104, v115);
  v150 = vaddq_s32(v116, v108);
  v151 = vsubq_s32(v108, v116);
  v152 = vaddq_s32(v113, v220);
  v153 = vsubq_s32(v220, v113);
  v154 = vaddq_s32(v114, v107);
  v155 = vdupq_n_s32(0xFFFFD2BF);
  v156 = vmulq_s32(v132, v155);
  v157 = vmulq_s32(v129, v155);
  v158 = vaddq_s32(v156, v157);
  v159 = vsubq_s32(v156, v157);
  v160 = vmulq_s32(v133, v155);
  v161 = vmulq_s32(v130, v155);
  v162 = vaddq_s32(v160, v161);
  v163 = vsubq_s32(v160, v161);
  v164 = vdupq_n_s32(0x2D41u);
  v165 = vmulq_s32(vrshrq_n_s32(v137, 0xEuLL), v164);
  v166 = vmulq_s32(vrshrq_n_s32(v134, 0xEuLL), v164);
  v167 = vaddq_s32(v165, v166);
  v168 = vsubq_s32(v165, v166);
  v169 = vmulq_s32(vrshrq_n_s32(v138, 0xEuLL), v164);
  v170 = vmulq_s32(vrshrq_n_s32(v136, 0xEuLL), v164);
  v171 = vaddq_s32(v169, v170);
  v172 = vsubq_s32(v169, v170);
  v173 = vrshrq_n_s32(vaddq_s32(v195, v199), 0xEuLL);
  v174 = vaddq_s32(v202, v204);
  v175 = vmulq_s32(v146, v164);
  v176 = vmulq_s32(vsubq_s32(vrshrq_n_s32(v174, 0xEuLL), v173), v164);
  v177 = vmulq_s32(v140, v164);
  v178 = vmulq_s32(v143, v164);
  v179 = vaddq_s32(v175, v177);
  v180 = vsubq_s32(v175, v177);
  v181 = vaddq_s32(v176, v178);
  v182 = vsubq_s32(v176, v178);
  v183 = vrshrq_n_s32(v151, 0xEuLL);
  v184 = vmulq_s32(vrshrq_n_s32(v153, 0xEuLL), v155);
  v185 = vmulq_s32(vrshrq_n_s32(vsubq_s32(v107, v114), 0xEuLL), v155);
  v186 = vmulq_s32(vrshrq_n_s32(v149, 0xEuLL), v155);
  v187 = vmulq_s32(v183, v155);
  *(int16x8_t *)a1 = vuzp1q_s16(v235, v233);
  *(int16x8_t *)(a1 + 16) = vnegq_s16(vuzp1q_s16(v141, v144));
  *(int16x8_t *)(a1 + 32) = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v148, 0xEuLL), (int16x8_t)vrshrq_n_s32(v150, 0xEuLL));
  *(int16x8_t *)(a1 + 48) = vnegq_s16(vuzp1q_s16((int16x8_t)vrshrq_n_s32(v231, 0xEuLL), (int16x8_t)vrshrq_n_s32(v135, 0xEuLL)));
  *(int16x8_t *)(a1 + 64) = vrshrn_high_n_s32(vrshrn_n_s32(v167, 0xEuLL), v171, 0xEuLL);
  *(int16x8_t *)(a1 + 80) = vrshrn_high_n_s32(vrshrn_n_s32(vaddq_s32(v184, v186), 0xEuLL), vaddq_s32(v185, v187), 0xEuLL);
  *(int16x8_t *)(a1 + 96) = vrshrn_high_n_s32(vrshrn_n_s32(v179, 0xEuLL), v181, 0xEuLL);
  *(int16x8_t *)(a1 + 112) = vrshrn_high_n_s32(vrshrn_n_s32(v158, 0xEuLL), v162, 0xEuLL);
  *(int16x8_t *)(a1 + 128) = vrshrn_high_n_s32(vrshrn_n_s32(v159, 0xEuLL), v163, 0xEuLL);
  *(int16x8_t *)(a1 + 144) = vrshrn_high_n_s32(vrshrn_n_s32(v180, 0xEuLL), v182, 0xEuLL);
  *(int16x8_t *)(a1 + 160) = vrshrn_high_n_s32(vrshrn_n_s32(vsubq_s32(v184, v186), 0xEuLL), vsubq_s32(v185, v187), 0xEuLL);
  *(int16x8_t *)(a1 + 176) = vrshrn_high_n_s32(vrshrn_n_s32(v168, 0xEuLL), v172, 0xEuLL);
  *(int16x8_t *)(a1 + 192) = vuzp1q_s16((int16x8_t)vrshrq_n_s32(v239, 0xEuLL), (int16x8_t)vrshrq_n_s32(v237, 0xEuLL));
  *(int16x8_t *)(a1 + 208) = vnegq_s16(vuzp1q_s16((int16x8_t)vrshrq_n_s32(v152, 0xEuLL), (int16x8_t)vrshrq_n_s32(v154, 0xEuLL)));
  result = vuzp1q_s16(v147, (int16x8_t)vrsraq_n_s32(v173, v174, 0xEuLL));
  *(int16x8_t *)(a1 + 224) = result;
  *(int16x8_t *)(a1 + 240) = vnegq_s16(vuzp1q_s16(v244, v241));
  return result;
}

int16x8_t fdct16_8col(int16x8_t *a1)
{
  int16x8_t v1;
  int16x8_t v2;
  int16x8_t v3;
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  int32x4_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int64x2_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t v84;
  int64x2_t v85;
  int64x2_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int64x2_t v107;
  int64x2_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int64x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int64x2_t v117;
  int16x8_t result;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int16x8_t v124;
  int16x8_t v125;
  int16x8_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int16x8_t v130;
  int16x8_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int32x4_t v136;
  int32x4_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int32x4_t v156;
  int16x8_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int16x8_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int16x8_t v173;
  int16x8_t v174;
  int16x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int16x8_t v189;
  int32x4_t v190;
  int16x8_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int16x8_t v196;
  int16x8_t v197;

  v1 = a1[1];
  v3 = a1[14];
  v2 = a1[15];
  v4 = vaddq_s16(v2, *a1);
  v5 = vaddq_s16(v3, v1);
  v6 = a1[2];
  v7 = a1[3];
  v9 = a1[12];
  v8 = a1[13];
  v10 = vaddq_s16(v8, v6);
  v11 = vaddq_s16(v9, v7);
  v12 = a1[4];
  v13 = a1[5];
  v15 = a1[10];
  v14 = a1[11];
  v16 = vaddq_s16(v14, v12);
  v17 = vaddq_s16(v15, v13);
  v19 = a1[6];
  v18 = a1[7];
  v20 = a1[8];
  v21 = a1[9];
  v22 = vaddq_s16(v21, v19);
  v23 = vaddq_s16(v20, v18);
  v24 = vaddq_s16(v23, v4);
  v25 = vaddq_s16(v22, v5);
  v26 = vaddq_s16(v17, v10);
  v27 = vaddq_s16(v16, v11);
  v28 = vsubq_s16(v11, v16);
  v29 = vsubq_s16(v10, v17);
  v30 = vsubq_s16(v5, v22);
  v31 = vsubq_s16(v4, v23);
  v32 = vaddq_s16(v24, v27);
  v33 = vaddq_s16(v25, v26);
  v34 = vsubq_s16(v25, v26);
  v35 = vsubq_s16(v24, v27);
  v36 = vdupq_n_s32(0x5A820000u);
  v37 = (int16x8_t)vqrdmulhq_s32(vaddl_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v33.i8), v36);
  v38 = (int16x8_t)vqrdmulhq_s32(vaddl_high_s16(v32, v33), v36);
  v39 = (int16x8_t)vqrdmulhq_s32(vsubl_s16(*(int16x4_t *)v32.i8, *(int16x4_t *)v33.i8), v36);
  v40 = (int16x8_t)vqrdmulhq_s32(vsubl_high_s16(v32, v33), v36);
  v41 = vuzp1q_s16(v37, v38);
  v42 = vdupq_n_s16(0x3B21u);
  v43 = vdupq_n_s16(0x187Eu);
  v44 = vuzp1q_s16(v39, v40);
  v45 = vmlsl_s16(vmull_s16(*(int16x4_t *)v35.i8, *(int16x4_t *)v43.i8), *(int16x4_t *)v34.i8, *(int16x4_t *)v42.i8);
  v46 = vmlsl_high_s16(vmull_high_s16(v35, v43), v34, v42);
  v47 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v34.i8, *(int16x4_t *)v43.i8), *(int16x4_t *)v35.i8, *(int16x4_t *)v42.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v34, v43), v35, v42), 0xEuLL);
  v48 = vqrshrn_high_n_s32(vqrshrn_n_s32(v45, 0xEuLL), v46, 0xEuLL);
  v49 = (int16x8_t)vqrdmulhq_s32(vaddl_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v29.i8), v36);
  v50 = (int16x8_t)vqrdmulhq_s32(vaddl_high_s16(v30, v29), v36);
  v51 = (int16x8_t)vqrdmulhq_s32(vsubl_s16(*(int16x4_t *)v30.i8, *(int16x4_t *)v29.i8), v36);
  v52 = (int16x8_t)vqrdmulhq_s32(vsubl_high_s16(v30, v29), v36);
  v53 = vuzp1q_s16(v49, v50);
  v54 = vuzp1q_s16(v51, v52);
  v55 = vaddq_s16(v54, v28);
  v56 = vsubq_s16(v28, v54);
  v57 = vsubq_s16(v31, v53);
  v58 = vaddq_s16(v53, v31);
  v59 = vdupq_n_s16(0x3EC5u);
  v60 = vdupq_n_s16(0xC7Cu);
  v61 = vmull_s16(*(int16x4_t *)v58.i8, *(int16x4_t *)v60.i8);
  v62 = vmull_high_s16(v58, v60);
  v63 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v55.i8, *(int16x4_t *)v60.i8), *(int16x4_t *)v58.i8, *(int16x4_t *)v59.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v55, v60), v58, v59), 0xEuLL);
  v64 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlsl_s16(v61, *(int16x4_t *)v55.i8, *(int16x4_t *)v59.i8), 0xEuLL), vmlsl_high_s16(v62, v55, v59), 0xEuLL);
  v65 = vdupq_n_s16(0x238Eu);
  v66 = vdupq_n_s16(0x3537u);
  v67 = vmlsl_s16(vmull_s16(*(int16x4_t *)v57.i8, *(int16x4_t *)v66.i8), *(int16x4_t *)v56.i8, *(int16x4_t *)v65.i8);
  v68 = vmlsl_high_s16(vmull_high_s16(v57, v66), v56, v65);
  v69 = vqrshrn_high_n_s32(vqrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v56.i8, *(int16x4_t *)v66.i8), *(int16x4_t *)v57.i8, *(int16x4_t *)v65.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v56, v66), v57, v65), 0xEuLL);
  v70 = vqrshrn_high_n_s32(vqrshrn_n_s32(v67, 0xEuLL), v68, 0xEuLL);
  v71 = (int32x4_t)vtrn1q_s16(v41, v63);
  v72 = (int32x4_t)vtrn2q_s16(v41, v63);
  v73 = (int32x4_t)vtrn1q_s16(v47, v70);
  v74 = (int32x4_t)vtrn2q_s16(v47, v70);
  v75 = (int32x4_t)vtrn1q_s16(v44, v69);
  v76 = (int32x4_t)vtrn2q_s16(v44, v69);
  v77 = (int32x4_t)vtrn1q_s16(v48, v64);
  v78 = (int32x4_t)vtrn2q_s16(v48, v64);
  v79 = (int64x2_t)vtrn1q_s32(v71, v73);
  v80 = (int64x2_t)vtrn2q_s32(v71, v73);
  v81 = (int64x2_t)vtrn1q_s32(v72, v74);
  v82 = (int64x2_t)vtrn2q_s32(v72, v74);
  v83 = (int64x2_t)vtrn1q_s32(v75, v77);
  v84 = (int64x2_t)vtrn2q_s32(v75, v77);
  v85 = (int64x2_t)vtrn1q_s32(v76, v78);
  v86 = (int64x2_t)vtrn2q_s32(v76, v78);
  v87 = (int16x8_t)vzip1q_s64(v79, v83);
  v88 = (int16x8_t)vzip2q_s64(v79, v83);
  v89 = (int16x8_t)vzip1q_s64(v81, v85);
  v90 = (int16x8_t)vzip2q_s64(v81, v85);
  v91 = (int16x8_t)vzip1q_s64(v80, v84);
  v92 = (int16x8_t)vzip2q_s64(v80, v84);
  v93 = (int16x8_t)vzip1q_s64(v82, v86);
  v94 = (int16x8_t)vzip2q_s64(v82, v86);
  v95 = (int32x4_t)vtrn1q_s16(v87, v89);
  v96 = (int32x4_t)vtrn2q_s16(v87, v89);
  v97 = (int32x4_t)vtrn1q_s16(v91, v93);
  v98 = (int32x4_t)vtrn2q_s16(v91, v93);
  v99 = (int32x4_t)vtrn1q_s16(v88, v90);
  v100 = (int32x4_t)vtrn2q_s16(v88, v90);
  v101 = (int32x4_t)vtrn1q_s16(v92, v94);
  v102 = (int32x4_t)vtrn2q_s16(v92, v94);
  v103 = (int64x2_t)vtrn1q_s32(v95, v97);
  v104 = (int64x2_t)vtrn2q_s32(v95, v97);
  v105 = (int64x2_t)vtrn1q_s32(v96, v98);
  v106 = (int64x2_t)vtrn2q_s32(v96, v98);
  v107 = (int64x2_t)vtrn1q_s32(v99, v101);
  v108 = (int64x2_t)vtrn2q_s32(v99, v101);
  v109 = (int64x2_t)vtrn1q_s32(v100, v102);
  v110 = (int64x2_t)vtrn2q_s32(v100, v102);
  v111 = vzip1q_s64(v103, v107);
  v112 = vzip2q_s64(v103, v107);
  v113 = vzip1q_s64(v105, v109);
  v114 = vzip2q_s64(v105, v109);
  v115 = vzip1q_s64(v104, v108);
  v116 = vzip2q_s64(v104, v108);
  v117 = vzip1q_s64(v106, v110);
  result = (int16x8_t)vzip2q_s64(v106, v110);
  v119 = vsubq_s16(v18, v20);
  v120 = vsubq_s16(v19, v21);
  v121 = vsubq_s16(v13, v15);
  v122 = vsubq_s16(v12, v14);
  v123 = vsubq_s16(v7, v9);
  v124 = vsubq_s16(v6, v8);
  v125 = vsubq_s16(v1, v3);
  v126 = vsubq_s16(*a1, v2);
  v127 = vsubq_s16(v124, v121);
  v128 = vsubq_s16(v123, v122);
  v129 = vaddq_s16(v122, v123);
  v130 = vaddq_s16(v121, v124);
  v131 = vdupq_n_s16(0x2D41u);
  v132 = vmull_s16(*(int16x4_t *)v128.i8, *(int16x4_t *)v131.i8);
  v133 = vmull_high_s16(v128, v131);
  v134 = vmull_s16(*(int16x4_t *)v129.i8, *(int16x4_t *)v131.i8);
  v135 = vmull_high_s16(v129, v131);
  v136 = vmull_s16(*(int16x4_t *)v130.i8, *(int16x4_t *)v131.i8);
  v137 = vmull_high_s16(v130, v131);
  v138 = vrshrn_high_n_s32(vrshrn_n_s32(vmull_s16(*(int16x4_t *)v127.i8, *(int16x4_t *)v131.i8), 0xEuLL), vmull_high_s16(v127, v131), 0xEuLL);
  v139 = vrshrn_high_n_s32(vrshrn_n_s32(v132, 0xEuLL), v133, 0xEuLL);
  v140 = vrshrn_high_n_s32(vrshrn_n_s32(v134, 0xEuLL), v135, 0xEuLL);
  v141 = vrshrn_high_n_s32(vrshrn_n_s32(v136, 0xEuLL), v137, 0xEuLL);
  v142 = vaddq_s16(v139, v119);
  v143 = vaddq_s16(v138, v120);
  v144 = vsubq_s16(v120, v138);
  v145 = vsubq_s16(v119, v139);
  v146 = vsubq_s16(v126, v140);
  v147 = vsubq_s16(v125, v141);
  v148 = vaddq_s16(v141, v125);
  v149 = vaddq_s16(v140, v126);
  v150 = vdupq_n_s16(0xC4DFu);
  v151 = vmull_s16(*(int16x4_t *)v143.i8, *(int16x4_t *)v43.i8);
  v152 = vmull_high_s16(v143, v43);
  v153 = vmlal_s16(vmull_s16(*(int16x4_t *)v148.i8, *(int16x4_t *)v43.i8), *(int16x4_t *)v143.i8, *(int16x4_t *)v150.i8);
  v154 = vmlal_high_s16(vmull_high_s16(v148, v43), v143, v150);
  v155 = vmlsl_s16(v151, *(int16x4_t *)v148.i8, *(int16x4_t *)v150.i8);
  v156 = vmlsl_high_s16(v152, v148, v150);
  v157 = vdupq_n_s16(0xE782u);
  v158 = vmull_s16(*(int16x4_t *)v147.i8, *(int16x4_t *)v42.i8);
  v159 = vmull_high_s16(v147, v42);
  v160 = vmlal_s16(vmull_s16(*(int16x4_t *)v144.i8, *(int16x4_t *)v42.i8), *(int16x4_t *)v147.i8, *(int16x4_t *)v157.i8);
  v161 = vmlal_high_s16(vmull_high_s16(v144, v42), v147, v157);
  v162 = vmlsl_s16(v158, *(int16x4_t *)v144.i8, *(int16x4_t *)v157.i8);
  v163 = vmlsl_high_s16(v159, v144, v157);
  v164 = vrshrn_high_n_s32(vrshrn_n_s32(v153, 0xEuLL), v154, 0xEuLL);
  v165 = vrshrn_high_n_s32(vrshrn_n_s32(v162, 0xEuLL), v163, 0xEuLL);
  v166 = vrshrn_high_n_s32(vrshrn_n_s32(v160, 0xEuLL), v161, 0xEuLL);
  v167 = vrshrn_high_n_s32(vrshrn_n_s32(v155, 0xEuLL), v156, 0xEuLL);
  v168 = vaddq_s16(v164, v142);
  v169 = vsubq_s16(v142, v164);
  v170 = vaddq_s16(v165, v145);
  v171 = vsubq_s16(v145, v165);
  v172 = vsubq_s16(v146, v166);
  v173 = vaddq_s16(v166, v146);
  v174 = vsubq_s16(v149, v167);
  v175 = vaddq_s16(v167, v149);
  v176 = vdupq_n_s16(0x3FB1u);
  v177 = vdupq_n_s16(0x646u);
  v178 = vmull_s16(*(int16x4_t *)v175.i8, *(int16x4_t *)v177.i8);
  v179 = vmull_high_s16(v175, v177);
  v180 = vmlal_s16(vmull_s16(*(int16x4_t *)v168.i8, *(int16x4_t *)v177.i8), *(int16x4_t *)v175.i8, *(int16x4_t *)v176.i8);
  v181 = vmlal_high_s16(vmull_high_s16(v168, v177), v175, v176);
  v182 = vdupq_n_s16(0x289Au);
  v183 = vdupq_n_s16(0x3179u);
  v184 = vmull_s16(*(int16x4_t *)v174.i8, *(int16x4_t *)v183.i8);
  v185 = vmull_high_s16(v174, v183);
  v186 = vmlal_s16(vmull_s16(*(int16x4_t *)v169.i8, *(int16x4_t *)v183.i8), *(int16x4_t *)v174.i8, *(int16x4_t *)v182.i8);
  v187 = vmlal_high_s16(vmull_high_s16(v169, v183), v174, v182);
  v188 = vmlsl_s16(v184, *(int16x4_t *)v169.i8, *(int16x4_t *)v182.i8);
  v189 = vdupq_n_s16(0x3871u);
  v190 = vmlsl_high_s16(v185, v169, v182);
  v191 = vdupq_n_s16(0x1E2Bu);
  v192 = vmull_s16(*(int16x4_t *)v173.i8, *(int16x4_t *)v191.i8);
  v193 = vmull_high_s16(v173, v191);
  v194 = vmlal_s16(vmull_s16(*(int16x4_t *)v170.i8, *(int16x4_t *)v191.i8), *(int16x4_t *)v173.i8, *(int16x4_t *)v189.i8);
  v195 = vmlal_high_s16(vmull_high_s16(v170, v191), v173, v189);
  v196 = vdupq_n_s16(0x1294u);
  v197 = vdupq_n_s16(0x3D3Fu);
  *a1 = (int16x8_t)v111;
  a1[1] = vrshrn_high_n_s32(vrshrn_n_s32(v180, 0xEuLL), v181, 0xEuLL);
  a1[2] = (int16x8_t)v113;
  a1[3] = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(vmull_s16(*(int16x4_t *)v172.i8, *(int16x4_t *)v197.i8), *(int16x4_t *)v171.i8, *(int16x4_t *)v196.i8), 0xEuLL), vmlsl_high_s16(vmull_high_s16(v172, v197), v171, v196), 0xEuLL);
  a1[4] = (int16x8_t)v115;
  a1[5] = vrshrn_high_n_s32(vrshrn_n_s32(v194, 0xEuLL), v195, 0xEuLL);
  a1[6] = (int16x8_t)v117;
  a1[7] = vrshrn_high_n_s32(vrshrn_n_s32(v188, 0xEuLL), v190, 0xEuLL);
  a1[8] = (int16x8_t)v112;
  a1[9] = vrshrn_high_n_s32(vrshrn_n_s32(v186, 0xEuLL), v187, 0xEuLL);
  a1[10] = (int16x8_t)v114;
  a1[11] = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(v192, *(int16x4_t *)v170.i8, *(int16x4_t *)v189.i8), 0xEuLL), vmlsl_high_s16(v193, v170, v189), 0xEuLL);
  a1[12] = (int16x8_t)v116;
  a1[13] = vrshrn_high_n_s32(vrshrn_n_s32(vmlal_s16(vmull_s16(*(int16x4_t *)v171.i8, *(int16x4_t *)v197.i8), *(int16x4_t *)v172.i8, *(int16x4_t *)v196.i8), 0xEuLL), vmlal_high_s16(vmull_high_s16(v171, v197), v172, v196), 0xEuLL);
  a1[14] = result;
  a1[15] = vrshrn_high_n_s32(vrshrn_n_s32(vmlsl_s16(v178, *(int16x4_t *)v168.i8, *(int16x4_t *)v176.i8), 0xEuLL), vmlsl_high_s16(v179, v168, v176), 0xEuLL);
  return result;
}

int32x4_t highbd_fadst16_8col(uint64_t a1, uint64_t a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int64x2_t v6;
  int64x2_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int64x2_t v30;
  int64x2_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int64x2_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int64x2_t v51;
  int64x2_t v52;
  int64x2_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int32x2_t v69;
  int32x2_t v70;
  int32x2_t v71;
  int64x2_t v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  int64x2_t v80;
  int32x2_t v81;
  int32x2_t v82;
  int32x2_t v83;
  int32x2_t v84;
  int32x2_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int32x2_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int64x2_t v109;
  int64x2_t v110;
  int64x2_t v111;
  int64x2_t v112;
  int64x2_t v113;
  int32x2_t v114;
  int64x2_t v115;
  int64x2_t v116;
  int32x4_t result;
  int64x2_t v118;
  int64x2_t v119;
  int64x2_t v120;
  int64x2_t v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  int64x2_t v125;
  int64x2_t v126;
  int64x2_t v127;
  int64x2_t v128;
  int64x2_t v129;
  int64x2_t v130;
  int64x2_t v131;
  int64x2_t v132;
  int64x2_t v133;
  int64x2_t v134;
  int32x2_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int32x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int64x2_t v144;
  int32x2_t v145;
  int64x2_t v146;
  int32x2_t v147;
  int64x2_t v148;
  int64x2_t v149;
  int64x2_t v150;
  int64x2_t v151;
  int64x2_t v152;
  int64x2_t v153;
  int32x2_t v154;
  int64x2_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int64x2_t v160;
  int64x2_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int64x2_t v170;
  int64x2_t v171;
  int64x2_t v172;
  int64x2_t v173;
  int64x2_t v174;
  int64x2_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int64x2_t v179;
  int64x2_t v180;
  int64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  int64x2_t v186;
  int64x2_t v187;
  int64x2_t v188;
  int64x2_t v189;
  int64x2_t v190;
  int64x2_t v191;
  int64x2_t v192;
  int64x2_t v193;
  int64x2_t v194;
  int64x2_t v195;
  int64x2_t v196;
  int64x2_t v197;
  int64x2_t v198;
  int64x2_t v199;
  int64x2_t v200;
  int64x2_t v201;
  int64x2_t v202;
  int64x2_t v203;
  int64x2_t v204;
  int64x2_t v205;
  int32x4_t v206;
  int64x2_t v207;
  int64x2_t v208;
  int32x4_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int32x4_t v212;
  int64x2_t v213;
  int64x2_t v214;
  int64x2_t v215;
  int64x2_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int64x2_t v219;
  int64x2_t v220;
  int64x2_t v221;
  int64x2_t v222;
  int64x2_t v223;
  int64x2_t v224;
  int64x2_t v225;
  int64x2_t v226;
  int64x2_t v227;
  int64x2_t v228;
  int64x2_t v229;
  int64x2_t v230;
  int64x2_t v231;
  int64x2_t v232;
  int64x2_t v233;
  int64x2_t v234;
  int64x2_t v235;
  int64x2_t v236;
  int64x2_t v237;
  int64x2_t v238;
  int64x2_t v239;
  int64x2_t v240;
  int64x2_t v241;
  int64x2_t v242;
  int64x2_t v243;
  int64x2_t v244;
  int64x2_t v245;
  int64x2_t v246;
  int64x2_t v247;
  int64x2_t v248;
  int64x2_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int64x2_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int32x4_t v266;
  int64x2_t v267;
  int64x2_t v268;
  int64x2_t v269;
  int64x2_t v270;
  int64x2_t v271;
  int64x2_t v272;
  int64x2_t v273;
  int64x2_t v274;
  int64x2_t v275;
  int64x2_t v276;
  int64x2_t v277;
  int64x2_t v278;
  int64x2_t v279;
  int64x2_t v280;
  int64x2_t v281;
  int64x2_t v282;
  int64x2_t v283;
  int64x2_t v284;
  int64x2_t v285;
  int64x2_t v286;
  int64x2_t v287;
  int64x2_t v288;
  int64x2_t v289;
  int64x2_t v290;

  v2 = vdupq_n_s32(0x3FECu);
  v3 = vdupq_n_s32(0x324u);
  v4 = *(int32x4_t *)(a1 + 224);
  v5 = *(int32x4_t *)(a1 + 240);
  v6 = vmull_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v3.i8);
  v7 = vmull_high_s32(v5, v3);
  v8 = *(int32x4_t *)(a2 + 224);
  v9 = *(int32x4_t *)(a2 + 240);
  v10 = *(int32x4_t *)(a1 + 16);
  v183 = vmlal_s32(vmull_s32(*(int32x2_t *)a1, *(int32x2_t *)v3.i8), *(int32x2_t *)v5.i8, *(int32x2_t *)v2.i8);
  v286 = vmlal_high_s32(vmull_high_s32(*(int32x4_t *)a1, v3), v5, v2);
  v11 = *(int32x4_t *)(a2 + 16);
  v281 = vmlal_s32(vmull_s32(*(int32x2_t *)a2, *(int32x2_t *)v3.i8), *(int32x2_t *)v9.i8, *(int32x2_t *)v2.i8);
  v261 = vmlal_high_s32(vmull_high_s32(*(int32x4_t *)a2, v3), v9, v2);
  v176 = vmlsl_s32(v6, *(int32x2_t *)a1, *(int32x2_t *)v2.i8);
  v289 = vmlsl_high_s32(v7, *(int32x4_t *)a1, v2);
  v283 = vmlsl_s32(vmull_s32(*(int32x2_t *)v9.i8, *(int32x2_t *)v3.i8), *(int32x2_t *)a2, *(int32x2_t *)v2.i8);
  v264 = vmlsl_high_s32(vmull_high_s32(v9, v3), *(int32x4_t *)a2, v2);
  v12 = vdupq_n_s32(0x3E15u);
  v13 = vdupq_n_s32(0xF8Du);
  v14 = *(int32x4_t *)(a1 + 192);
  v15 = *(int32x4_t *)(a1 + 208);
  v16 = vmull_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v13.i8);
  v17 = vmull_high_s32(v15, v13);
  v18 = *(int32x4_t *)(a2 + 192);
  v19 = *(int32x4_t *)(a2 + 208);
  v21 = *(int32x4_t *)(a1 + 32);
  v20 = *(int32x4_t *)(a1 + 48);
  v232 = vmlal_s32(vmull_s32(*(int32x2_t *)v21.i8, *(int32x2_t *)v13.i8), *(int32x2_t *)v15.i8, *(int32x2_t *)v12.i8);
  v22 = vdupq_n_s32(0x39DBu);
  v224 = vmlal_high_s32(vmull_high_s32(v21, v13), v15, v12);
  v23 = vdupq_n_s32(0x1B5Du);
  v25 = *(int32x4_t *)(a2 + 32);
  v24 = *(int32x4_t *)(a2 + 48);
  v222 = vmlal_s32(vmull_s32(*(int32x2_t *)v25.i8, *(int32x2_t *)v13.i8), *(int32x2_t *)v19.i8, *(int32x2_t *)v12.i8);
  v230 = vmlal_high_s32(vmull_high_s32(v25, v13), v19, v12);
  v277 = vmlsl_s32(v16, *(int32x2_t *)v21.i8, *(int32x2_t *)v12.i8);
  v207 = vmlsl_high_s32(v17, v21, v12);
  v210 = vmlsl_s32(vmull_s32(*(int32x2_t *)v19.i8, *(int32x2_t *)v13.i8), *(int32x2_t *)v25.i8, *(int32x2_t *)v12.i8);
  v226 = vmlsl_high_s32(vmull_high_s32(v19, v13), v25, v12);
  v27 = *(int32x4_t *)(a1 + 64);
  v26 = *(int32x4_t *)(a1 + 80);
  v28 = *(int32x4_t *)(a1 + 160);
  v29 = *(int32x4_t *)(a1 + 176);
  v279 = vmlal_s32(vmull_s32(*(int32x2_t *)v27.i8, *(int32x2_t *)v23.i8), *(int32x2_t *)v29.i8, *(int32x2_t *)v22.i8);
  v275 = vmlal_high_s32(vmull_high_s32(v27, v23), v29, v22);
  v30 = vmull_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v23.i8);
  v31 = vmull_high_s32(v29, v23);
  v33 = *(int32x4_t *)(a2 + 64);
  v32 = *(int32x4_t *)(a2 + 80);
  v34 = *(int32x4_t *)(a2 + 160);
  v35 = *(int32x4_t *)(a2 + 176);
  v273 = vmlal_s32(vmull_s32(*(int32x2_t *)v33.i8, *(int32x2_t *)v23.i8), *(int32x2_t *)v35.i8, *(int32x2_t *)v22.i8);
  v271 = vmlal_high_s32(vmull_high_s32(v33, v23), v35, v22);
  v269 = vmlsl_s32(v30, *(int32x2_t *)v27.i8, *(int32x2_t *)v22.i8);
  v267 = vmlsl_high_s32(v31, v27, v22);
  v259 = vmlsl_s32(vmull_s32(*(int32x2_t *)v35.i8, *(int32x2_t *)v23.i8), *(int32x2_t *)v33.i8, *(int32x2_t *)v22.i8);
  v246 = vmlsl_high_s32(vmull_high_s32(v35, v23), v33, v22);
  v36 = vdupq_n_s32(0x3368u);
  v37 = vdupq_n_s32(0x2620u);
  v38 = *(int32x4_t *)(a1 + 96);
  v39 = *(int32x4_t *)(a1 + 112);
  v41 = *(int32x4_t *)(a1 + 128);
  v40 = *(int32x4_t *)(a1 + 144);
  v205 = vmlal_s32(vmull_s32(*(int32x2_t *)v38.i8, *(int32x2_t *)v37.i8), *(int32x2_t *)v40.i8, *(int32x2_t *)v36.i8);
  v203 = vmlal_high_s32(vmull_high_s32(v38, v37), v40, v36);
  v42 = vmull_s32(*(int32x2_t *)v40.i8, *(int32x2_t *)v37.i8);
  v43 = vmull_high_s32(v40, v37);
  v44 = *(int32x4_t *)(a2 + 96);
  v45 = *(int32x4_t *)(a2 + 112);
  v47 = *(int32x4_t *)(a2 + 128);
  v46 = *(int32x4_t *)(a2 + 144);
  v200 = vmlal_s32(vmull_s32(*(int32x2_t *)v44.i8, *(int32x2_t *)v37.i8), *(int32x2_t *)v46.i8, *(int32x2_t *)v36.i8);
  v195 = vmlsl_s32(v42, *(int32x2_t *)v38.i8, *(int32x2_t *)v36.i8);
  v197 = vmlal_high_s32(vmull_high_s32(v44, v37), v46, v36);
  v192 = vmlsl_s32(vmull_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v37.i8), *(int32x2_t *)v44.i8, *(int32x2_t *)v36.i8);
  v193 = vmlsl_high_s32(v43, v38, v36);
  v48 = vmlsl_high_s32(vmull_high_s32(v46, v37), v44, v36);
  v49 = vdupq_n_s32(0x2AFBu);
  v50 = vdupq_n_s32(0x2F6Cu);
  v51 = vmlal_s32(vmull_s32(*(int32x2_t *)v41.i8, *(int32x2_t *)v50.i8), *(int32x2_t *)v39.i8, *(int32x2_t *)v49.i8);
  v190 = v48;
  v181 = vmlal_high_s32(vmull_high_s32(v41, v50), v39, v49);
  v146 = vmlal_s32(vmull_s32(*(int32x2_t *)v47.i8, *(int32x2_t *)v50.i8), *(int32x2_t *)v45.i8, *(int32x2_t *)v49.i8);
  v52 = vmlal_high_s32(vmull_high_s32(v47, v50), v45, v49);
  v53 = vmlsl_s32(vmull_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v50.i8), *(int32x2_t *)v41.i8, *(int32x2_t *)v49.i8);
  v174 = vmlsl_high_s32(vmull_high_s32(v39, v50), v41, v49);
  v54 = vmlsl_s32(vmull_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v50.i8), *(int32x2_t *)v47.i8, *(int32x2_t *)v49.i8);
  v55 = vmlsl_high_s32(vmull_high_s32(v45, v50), v47, v49);
  v56 = vdupq_n_s32(0x20E7u);
  v57 = vdupq_n_s32(0x36E5u);
  v251 = vmlal_s32(vmull_s32(*(int32x2_t *)v28.i8, *(int32x2_t *)v57.i8), *(int32x2_t *)v26.i8, *(int32x2_t *)v56.i8);
  v253 = vmlal_high_s32(vmull_high_s32(v28, v57), v26, v56);
  v185 = vmlal_s32(vmull_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v57.i8), *(int32x2_t *)v32.i8, *(int32x2_t *)v56.i8);
  v187 = vmlal_high_s32(vmull_high_s32(v34, v57), v32, v56);
  v257 = vmlsl_s32(vmull_s32(*(int32x2_t *)v26.i8, *(int32x2_t *)v57.i8), *(int32x2_t *)v28.i8, *(int32x2_t *)v56.i8);
  v255 = vmlsl_high_s32(vmull_high_s32(v26, v57), v28, v56);
  v118 = vmlsl_s32(vmull_s32(*(int32x2_t *)v32.i8, *(int32x2_t *)v57.i8), *(int32x2_t *)v34.i8, *(int32x2_t *)v56.i8);
  v178 = vmlsl_high_s32(vmull_high_s32(v32, v57), v34, v56);
  v58 = vdupq_n_s32(0x1590u);
  v59 = vdupq_n_s32(0x3C42u);
  v172 = vmlal_s32(vmull_s32(*(int32x2_t *)v14.i8, *(int32x2_t *)v59.i8), *(int32x2_t *)v20.i8, *(int32x2_t *)v58.i8);
  v60 = vmlal_high_s32(vmull_high_s32(v14, v59), v20, v58);
  v156 = vmlal_s32(vmull_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v59.i8), *(int32x2_t *)v24.i8, *(int32x2_t *)v58.i8);
  v61 = vmlsl_s32(vmull_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v59.i8), *(int32x2_t *)v14.i8, *(int32x2_t *)v58.i8);
  v155 = vmlal_high_s32(vmull_high_s32(v18, v59), v24, v58);
  v148 = vmlsl_s32(vmull_s32(*(int32x2_t *)v24.i8, *(int32x2_t *)v59.i8), *(int32x2_t *)v18.i8, *(int32x2_t *)v58.i8);
  v149 = vmlsl_high_s32(vmull_high_s32(v20, v59), v14, v58);
  v62 = vmlsl_high_s32(vmull_high_s32(v24, v59), v18, v58);
  v63 = vdupq_n_s32(0x964u);
  v64 = vdupq_n_s32(0x3F4Fu);
  v128 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v64.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v63.i8);
  v65 = vmlal_high_s32(vmull_high_s32(v4, v64), v10, v63);
  v66 = vmlal_s32(vmull_s32(*(int32x2_t *)v8.i8, *(int32x2_t *)v64.i8), *(int32x2_t *)v11.i8, *(int32x2_t *)v63.i8);
  v67 = vmlal_high_s32(vmull_high_s32(v8, v64), v11, v63);
  v168 = vmlsl_high_s32(vmull_high_s32(v10, v64), v4, v63);
  v170 = vmlsl_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v64.i8), *(int32x2_t *)v4.i8, *(int32x2_t *)v63.i8);
  v68 = vmlsl_s32(vmull_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v64.i8), *(int32x2_t *)v8.i8, *(int32x2_t *)v63.i8);
  v249 = vmlsl_high_s32(vmull_high_s32(v11, v64), v8, v63);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v183, v51), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v176, v53), 0xEuLL);
  *(int32x2_t *)v11.i8 = vdup_n_s32(0x3EC5u);
  *(int32x2_t *)v8.i8 = vdup_n_s32(0xC7Cu);
  v238 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v11.i8);
  v240 = vmlsl_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v4.i8, *(int32x2_t *)v11.i8);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v286, v181), 0xEuLL);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v289, v174), 0xEuLL);
  v242 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v4.i8, *(int32x2_t *)v11.i8);
  v244 = vmlsl_s32(vmull_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v11.i8);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v281, v146), 0xEuLL);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v283, v54), 0xEuLL);
  v163 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v4.i8, *(int32x2_t *)v11.i8);
  v165 = vmlsl_s32(vmull_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v11.i8);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v261, v52), 0xEuLL);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v264, v55), 0xEuLL);
  v159 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v4.i8, *(int32x2_t *)v11.i8);
  v161 = vmlsl_s32(vmull_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v8.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v11.i8);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v279, v172), 0xEuLL);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v275, v60), 0xEuLL);
  *(int32x2_t *)v63.i8 = vrshrn_n_s64(vsubq_s64(v273, v156), 0xEuLL);
  *(int32x2_t *)v64.i8 = vrshrn_n_s64(vsubq_s64(v271, v155), 0xEuLL);
  *(int32x2_t *)v20.i8 = vrshrn_n_s64(vsubq_s64(v269, v61), 0xEuLL);
  *(int32x2_t *)v24.i8 = vrshrn_n_s64(vsubq_s64(v267, v149), 0xEuLL);
  *(int32x2_t *)v58.i8 = vrshrn_n_s64(vsubq_s64(v259, v148), 0xEuLL);
  *(int32x2_t *)v59.i8 = vrshrn_n_s64(vsubq_s64(v246, v62), 0xEuLL);
  v218 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v20.i8, *(int32x2_t *)v8.i8);
  v236 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v24.i8, *(int32x2_t *)v8.i8);
  v234 = vmlal_s32(vmull_s32(*(int32x2_t *)v63.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v58.i8, *(int32x2_t *)v8.i8);
  v216 = vmlsl_s32(vmull_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v4.i8, *(int32x2_t *)v8.i8);
  v228 = vmlsl_s32(vmull_s32(*(int32x2_t *)v24.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v8.i8);
  v220 = vmlsl_s32(vmull_s32(*(int32x2_t *)v58.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v63.i8, *(int32x2_t *)v8.i8);
  v150 = vmlsl_s32(vmull_s32(*(int32x2_t *)v59.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v64.i8, *(int32x2_t *)v8.i8);
  v152 = vmlal_s32(vmull_s32(*(int32x2_t *)v64.i8, *(int32x2_t *)v11.i8), *(int32x2_t *)v59.i8, *(int32x2_t *)v8.i8);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v232, v251), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v277, v257), 0xEuLL);
  *(int32x2_t *)v63.i8 = vdup_n_s32(0x238Eu);
  v69 = vdup_n_s32(0x3537u);
  v141 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, v69), *(int32x2_t *)v8.i8, *(int32x2_t *)v63.i8);
  v143 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v69), *(int32x2_t *)v4.i8, *(int32x2_t *)v63.i8);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v224, v253), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v207, v255), 0xEuLL);
  v136 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, v69), *(int32x2_t *)v8.i8, *(int32x2_t *)v63.i8);
  v138 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v69), *(int32x2_t *)v4.i8, *(int32x2_t *)v63.i8);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v222, v185), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v210, v118), 0xEuLL);
  v130 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, v69), *(int32x2_t *)v8.i8, *(int32x2_t *)v63.i8);
  v133 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v69), *(int32x2_t *)v4.i8, *(int32x2_t *)v63.i8);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v230, v187), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v226, v178), 0xEuLL);
  v125 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, v69), *(int32x2_t *)v8.i8, *(int32x2_t *)v63.i8);
  v126 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v69), *(int32x2_t *)v4.i8, *(int32x2_t *)v63.i8);
  *(int32x2_t *)v58.i8 = vrshrn_n_s64(vsubq_s64(v205, v128), 0xEuLL);
  v70 = vrshrn_n_s64(vsubq_s64(v203, v65), 0xEuLL);
  v71 = vrshrn_n_s64(vsubq_s64(v200, v66), 0xEuLL);
  *(int32x2_t *)v24.i8 = vrshrn_n_s64(vsubq_s64(v197, v67), 0xEuLL);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v195, v170), 0xEuLL);
  *(int32x2_t *)v11.i8 = vrshrn_n_s64(vsubq_s64(v193, v168), 0xEuLL);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v192, v68), 0xEuLL);
  *(int32x2_t *)v20.i8 = vrshrn_n_s64(vsubq_s64(v48, v249), 0xEuLL);
  v122 = vmlal_s32(vmull_s32(*(int32x2_t *)v58.i8, *(int32x2_t *)v63.i8), *(int32x2_t *)v10.i8, v69);
  v121 = vmlal_s32(vmull_s32(v70, *(int32x2_t *)v63.i8), *(int32x2_t *)v11.i8, v69);
  v120 = vmlal_s32(vmull_s32(v71, *(int32x2_t *)v63.i8), *(int32x2_t *)v8.i8, v69);
  v127 = vmlal_s32(vmull_s32(*(int32x2_t *)v24.i8, *(int32x2_t *)v63.i8), *(int32x2_t *)v20.i8, v69);
  v213 = vmlsl_s32(vmull_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v63.i8), v70, v69);
  v215 = vmlsl_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v63.i8), *(int32x2_t *)v58.i8, v69);
  v132 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, *(int32x2_t *)v63.i8), v71, v69);
  v124 = vmlsl_s32(vmull_s32(*(int32x2_t *)v20.i8, *(int32x2_t *)v63.i8), *(int32x2_t *)v24.i8, v69);
  v158 = vaddq_s64(v51, v183);
  v189 = vaddq_s64(v181, v286);
  v72 = vaddq_s64(v52, v261);
  v262 = vaddq_s64(v53, v176);
  v182 = v72;
  v184 = vaddq_s64(v174, v289);
  v284 = vaddq_s64(v54, v283);
  v180 = vaddq_s64(v55, v264);
  v167 = vaddq_s64(v253, v224);
  v73 = vaddq_s64(v185, v222);
  v265 = vaddq_s64(v187, v230);
  v287 = vaddq_s64(v257, v277);
  v74 = vaddq_s64(v118, v210);
  v175 = vaddq_s64(v178, v226);
  v177 = vaddq_s64(v255, v207);
  v75 = vaddq_s64(v172, v279);
  v76 = vaddq_s64(v156, v273);
  v208 = vaddq_s64(v155, v271);
  v211 = vaddq_s64(v60, v275);
  v186 = vaddq_s64(v62, v246);
  v188 = vaddq_s64(v149, v267);
  v77 = vaddq_s64(v128, v205);
  v179 = vaddq_s64(v65, v203);
  v78 = vaddq_s64(v66, v200);
  v173 = vaddq_s64(v67, v197);
  v79 = vaddq_s64(v170, v195);
  v80 = vaddq_s64(v68, v192);
  v198 = vaddq_s64(v249, v190);
  v201 = vaddq_s64(v168, v193);
  *(int32x2_t *)v10.i8 = vsub_s32(vrshrn_n_s64(v189, 0xEuLL), vrshrn_n_s64(v211, 0xEuLL));
  *(int32x2_t *)v4.i8 = vsub_s32(vrshrn_n_s64(v72, 0xEuLL), vrshrn_n_s64(v208, 0xEuLL));
  *(int32x2_t *)v72.i8 = vsub_s32(vrshrn_n_s64(v184, 0xEuLL), vrshrn_n_s64(v188, 0xEuLL));
  *(int32x2_t *)v24.i8 = vsub_s32(vrshrn_n_s64(v180, 0xEuLL), vrshrn_n_s64(v186, 0xEuLL));
  *(int32x2_t *)v193.i8 = vrshrn_n_s64(v158, 0xEuLL);
  *(int32x2_t *)v195.i8 = vrshrn_n_s64(v262, 0xEuLL);
  *(int32x2_t *)v203.i8 = vrshrn_n_s64(v75, 0xEuLL);
  *(int32x2_t *)v205.i8 = vrshrn_n_s64(vaddq_s64(v61, v269), 0xEuLL);
  v81 = vdup_n_s32(0x3B21u);
  v82 = vsub_s32(*(int32x2_t *)v193.i8, *(int32x2_t *)v203.i8);
  v83 = vdup_n_s32(0x187Eu);
  *(int32x2_t *)v8.i8 = vsub_s32(*(int32x2_t *)v195.i8, *(int32x2_t *)v205.i8);
  v258 = vmlal_s32(vmull_s32(*(int32x2_t *)v8.i8, v83), v82, v81);
  v250 = vmlsl_s32(vmull_s32(v82, v83), *(int32x2_t *)v8.i8, v81);
  v274 = vmlal_s32(vmull_s32(*(int32x2_t *)v72.i8, v83), *(int32x2_t *)v10.i8, v81);
  v270 = vmlsl_s32(vmull_s32(*(int32x2_t *)v10.i8, v83), *(int32x2_t *)v72.i8, v81);
  *(int32x2_t *)v155.i8 = vrshrn_n_s64(v284, 0xEuLL);
  *(int32x2_t *)v156.i8 = vrshrn_n_s64(vaddq_s64(v146, v281), 0xEuLL);
  *(int32x2_t *)v158.i8 = vrshrn_n_s64(v76, 0xEuLL);
  *(int32x2_t *)v192.i8 = vrshrn_n_s64(vaddq_s64(v148, v259), 0xEuLL);
  *(int32x2_t *)v8.i8 = vsub_s32(*(int32x2_t *)v156.i8, *(int32x2_t *)v158.i8);
  *(int32x2_t *)v10.i8 = vsub_s32(*(int32x2_t *)v155.i8, *(int32x2_t *)v192.i8);
  v260 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, v83), *(int32x2_t *)v8.i8, v81);
  v256 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v83), *(int32x2_t *)v10.i8, v81);
  v276 = vmlal_s32(vmull_s32(*(int32x2_t *)v24.i8, v83), *(int32x2_t *)v4.i8, v81);
  v268 = vmlsl_s32(vmull_s32(*(int32x2_t *)v4.i8, v83), *(int32x2_t *)v24.i8, v81);
  *(int32x2_t *)v8.i8 = vsub_s32(vrshrn_n_s64(v177, 0xEuLL), vrshrn_n_s64(v201, 0xEuLL));
  *(int32x2_t *)v4.i8 = vsub_s32(vrshrn_n_s64(v175, 0xEuLL), vrshrn_n_s64(v198, 0xEuLL));
  *(int32x2_t *)v10.i8 = vsub_s32(vrshrn_n_s64(v167, 0xEuLL), vrshrn_n_s64(v179, 0xEuLL));
  *(int32x2_t *)v72.i8 = vsub_s32(vrshrn_n_s64(v265, 0xEuLL), vrshrn_n_s64(v173, 0xEuLL));
  v145 = vrshrn_n_s64(vaddq_s64(v251, v232), 0xEuLL);
  v147 = vrshrn_n_s64(v287, 0xEuLL);
  *(int32x2_t *)v149.i8 = vrshrn_n_s64(v77, 0xEuLL);
  v154 = vrshrn_n_s64(v79, 0xEuLL);
  *(int32x2_t *)v24.i8 = vsub_s32(v147, v154);
  v84 = vsub_s32(v145, *(int32x2_t *)v149.i8);
  v254 = vmlal_s32(vmull_s32(v84, v81), *(int32x2_t *)v24.i8, v83);
  v263 = vmlsl_s32(vmull_s32(*(int32x2_t *)v24.i8, v81), v84, v83);
  v227 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, v81), *(int32x2_t *)v8.i8, v83);
  v223 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v81), *(int32x2_t *)v10.i8, v83);
  v135 = vrshrn_n_s64(v73, 0xEuLL);
  v140 = vrshrn_n_s64(v74, 0xEuLL);
  *(int32x2_t *)v146.i8 = vrshrn_n_s64(v78, 0xEuLL);
  *(int32x2_t *)v148.i8 = vrshrn_n_s64(v80, 0xEuLL);
  *(int32x2_t *)v8.i8 = vsub_s32(v140, *(int32x2_t *)v148.i8);
  *(int32x2_t *)v10.i8 = vsub_s32(v135, *(int32x2_t *)v146.i8);
  v231 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, v81), *(int32x2_t *)v8.i8, v83);
  v225 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v81), *(int32x2_t *)v10.i8, v83);
  v252 = vmlal_s32(vmull_s32(*(int32x2_t *)v72.i8, v81), *(int32x2_t *)v4.i8, v83);
  v247 = vmlsl_s32(vmull_s32(*(int32x2_t *)v4.i8, v81), *(int32x2_t *)v72.i8, v83);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v238, v216), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v240, v218), 0xEuLL);
  v278 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, v83), *(int32x2_t *)v8.i8, v81);
  v280 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v83), *(int32x2_t *)v4.i8, v81);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v242, v228), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v244, v236), 0xEuLL);
  v171 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, v83), *(int32x2_t *)v8.i8, v81);
  v191 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v83), *(int32x2_t *)v4.i8, v81);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v163, v220), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v165, v234), 0xEuLL);
  v169 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, v83), *(int32x2_t *)v8.i8, v81);
  v290 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v83), *(int32x2_t *)v4.i8, v81);
  *(int32x2_t *)v8.i8 = vrshrn_n_s64(vsubq_s64(v159, v150), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v161, v152), 0xEuLL);
  v157 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, v83), *(int32x2_t *)v8.i8, v81);
  v282 = vmlsl_s32(vmull_s32(*(int32x2_t *)v8.i8, v83), *(int32x2_t *)v4.i8, v81);
  *(int32x2_t *)v11.i8 = vrshrn_n_s64(vsubq_s64(v141, v215), 0xEuLL);
  *(int32x2_t *)v4.i8 = vrshrn_n_s64(vsubq_s64(v136, v213), 0xEuLL);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v130, v132), 0xEuLL);
  *(int32x2_t *)v72.i8 = vrshrn_n_s64(vsubq_s64(v125, v124), 0xEuLL);
  *(int32x2_t *)v24.i8 = vrshrn_n_s64(vsubq_s64(v143, v122), 0xEuLL);
  v85 = vrshrn_n_s64(vsubq_s64(v138, v121), 0xEuLL);
  *(int32x2_t *)v74.i8 = vrshrn_n_s64(vsubq_s64(v133, v120), 0xEuLL);
  *(int32x2_t *)v73.i8 = vrshrn_n_s64(vsubq_s64(v126, v127), 0xEuLL);
  v272 = vmlal_s32(vmull_s32(*(int32x2_t *)v11.i8, v81), *(int32x2_t *)v24.i8, v83);
  v129 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, v81), v85, v83);
  v288 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, v81), *(int32x2_t *)v74.i8, v83);
  v285 = vmlal_s32(vmull_s32(*(int32x2_t *)v72.i8, v81), *(int32x2_t *)v73.i8, v83);
  v248 = vmlsl_s32(vmull_s32(*(int32x2_t *)v24.i8, v81), *(int32x2_t *)v11.i8, v83);
  v233 = vmlsl_s32(vmull_s32(v85, v81), *(int32x2_t *)v4.i8, v83);
  v123 = vmlsl_s32(vmull_s32(*(int32x2_t *)v74.i8, v81), *(int32x2_t *)v10.i8, v83);
  v131 = vmlsl_s32(vmull_s32(*(int32x2_t *)v73.i8, v81), *(int32x2_t *)v72.i8, v83);
  v86 = vaddq_s64(v216, v238);
  v243 = vaddq_s64(v228, v242);
  v87 = vaddq_s64(v220, v163);
  v88 = vaddq_s64(v150, v159);
  v89 = vaddq_s64(v218, v240);
  v160 = vaddq_s64(v236, v244);
  v90 = vaddq_s64(v234, v165);
  v119 = vaddq_s64(v152, v161);
  v91 = vaddq_s64(v215, v141);
  v142 = vaddq_s64(v213, v136);
  v92 = vaddq_s64(v132, v130);
  v137 = vaddq_s64(v124, v125);
  v164 = vaddq_s64(v121, v138);
  v229 = vaddq_s64(v127, v126);
  *(int32x2_t *)v58.i8 = vrshrn_n_s64(vsubq_s64(v258, v263), 0xEuLL);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v250, v254), 0xEuLL);
  *(int32x2_t *)v76.i8 = vdup_n_s32(0x2D41u);
  v241 = vmlal_s32(vmull_s32(*(int32x2_t *)v58.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8);
  v245 = vmlsl_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v58.i8, *(int32x2_t *)v76.i8);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v274, v223), 0xEuLL);
  *(int32x2_t *)v63.i8 = vrshrn_n_s64(vsubq_s64(v270, v227), 0xEuLL);
  v221 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v63.i8, *(int32x2_t *)v76.i8);
  v237 = vmlsl_s32(vmull_s32(*(int32x2_t *)v63.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v260, v225), 0xEuLL);
  *(int32x2_t *)v63.i8 = vrshrn_n_s64(vsubq_s64(v256, v231), 0xEuLL);
  v219 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v63.i8, *(int32x2_t *)v76.i8);
  v239 = vmlsl_s32(vmull_s32(*(int32x2_t *)v63.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8);
  *(int32x2_t *)v10.i8 = vrshrn_n_s64(vsubq_s64(v276, v247), 0xEuLL);
  *(int32x2_t *)v63.i8 = vrshrn_n_s64(vsubq_s64(v268, v252), 0xEuLL);
  v217 = vmlal_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v63.i8, *(int32x2_t *)v76.i8);
  v235 = vmlsl_s32(vmull_s32(*(int32x2_t *)v63.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8);
  *(int32x2_t *)v10.i8 = vsub_s32(vrshrn_n_s64(v160, 0xEuLL), vrshrn_n_s64(v164, 0xEuLL));
  *(int32x2_t *)v63.i8 = vsub_s32(vrshrn_n_s64(v119, 0xEuLL), vrshrn_n_s64(v229, 0xEuLL));
  *(int32x2_t *)v64.i8 = vsub_s32(vrshrn_n_s64(v243, 0xEuLL), vrshrn_n_s64(v142, 0xEuLL));
  v93 = v88;
  v94 = vsub_s32(vrshrn_n_s64(v88, 0xEuLL), vrshrn_n_s64(v137, 0xEuLL));
  *(int32x2_t *)v75.i8 = vrshrn_n_s64(v86, 0xEuLL);
  *(int32x2_t *)v127.i8 = vrshrn_n_s64(v89, 0xEuLL);
  *(int32x2_t *)v130.i8 = vrshrn_n_s64(v91, 0xEuLL);
  *(int32x2_t *)v132.i8 = vrshrn_n_s64(vaddq_s64(v122, v143), 0xEuLL);
  *(int32x2_t *)v11.i8 = vsub_s32(*(int32x2_t *)v127.i8, *(int32x2_t *)v132.i8);
  *(int32x2_t *)v91.i8 = vsub_s32(*(int32x2_t *)v75.i8, *(int32x2_t *)v130.i8);
  v166 = vmlal_s32(vmull_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v11.i8, *(int32x2_t *)v76.i8);
  v214 = vmlsl_s32(vmull_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v91.i8, *(int32x2_t *)v76.i8);
  v162 = vmlsl_s32(vmull_s32(*(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v64.i8, *(int32x2_t *)v76.i8);
  *(int32x2_t *)v77.i8 = vrshrn_n_s64(v87, 0xEuLL);
  *(int32x2_t *)v46.i8 = vrshrn_n_s64(v90, 0xEuLL);
  *(int32x2_t *)v88.i8 = vrshrn_n_s64(v92, 0xEuLL);
  *(int32x2_t *)v215.i8 = vrshrn_n_s64(vaddq_s64(v120, v133), 0xEuLL);
  *(int32x2_t *)v92.i8 = vsub_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v215.i8);
  *(int32x2_t *)v4.i8 = vsub_s32(*(int32x2_t *)v77.i8, *(int32x2_t *)v88.i8);
  v139 = vmlal_s32(vmull_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v92.i8, *(int32x2_t *)v76.i8);
  v151 = vmlal_s32(vmull_s32(*(int32x2_t *)v64.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v10.i8, *(int32x2_t *)v76.i8);
  v153 = vmlsl_s32(vmull_s32(*(int32x2_t *)v92.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v4.i8, *(int32x2_t *)v76.i8);
  v134 = vmlal_s32(vmull_s32(v94, *(int32x2_t *)v76.i8), *(int32x2_t *)v63.i8, *(int32x2_t *)v76.i8);
  v144 = vmlsl_s32(vmull_s32(*(int32x2_t *)v63.i8, *(int32x2_t *)v76.i8), v94, *(int32x2_t *)v76.i8);
  v95 = vrshrn_high_n_s64(v135, v265, 0xEuLL);
  v96 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v203.i8, v211, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v193.i8, v189, 0xEuLL));
  v97 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v158.i8, v208, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v156.i8, v182, 0xEuLL));
  v98 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v205.i8, v188, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v195.i8, v184, 0xEuLL));
  v266 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v192.i8, v186, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v155.i8, v180, 0xEuLL));
  v99 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v149.i8, v179, 0xEuLL), vrshrn_high_n_s64(v145, v167, 0xEuLL));
  v100 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v146.i8, v173, 0xEuLL), v95);
  v206 = vaddq_s32(vrshrn_high_n_s64(v154, v201, 0xEuLL), vrshrn_high_n_s64(v147, v177, 0xEuLL));
  v209 = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v148.i8, v198, 0xEuLL), vrshrn_high_n_s64(v140, v175, 0xEuLL));
  v212 = v98;
  v101 = vsubq_s32(v96, v99);
  v102 = v96;
  v103 = vsubq_s32(v98, v206);
  v104 = vdupq_n_s32(0xFFFFD2BF);
  v105 = vmlal_s32(vmull_s32(*(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v103.i8, *(int32x2_t *)v104.i8);
  v106 = vmlal_high_s32(vmull_high_s32(v101, v104), v103, v104);
  v202 = vmlsl_s32(vmull_s32(*(int32x2_t *)v103.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8);
  v204 = vmlsl_high_s32(vmull_high_s32(v103, v104), v101, v104);
  v107 = vsubq_s32(v97, v100);
  v108 = vsubq_s32(v266, v209);
  v109 = vmlal_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v108.i8, *(int32x2_t *)v104.i8);
  v110 = vmlal_high_s32(vmull_high_s32(v107, v104), v108, v104);
  v196 = vmlsl_high_s32(vmull_high_s32(v108, v104), v107, v104);
  v199 = vmlsl_s32(vmull_s32(*(int32x2_t *)v108.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v104.i8);
  *(int32x2_t *)v101.i8 = vrshrn_n_s64(vsubq_s64(v278, v248), 0xEuLL);
  *(int32x2_t *)v107.i8 = vrshrn_n_s64(vsubq_s64(v280, v272), 0xEuLL);
  v111 = vmlal_s32(vmull_s32(*(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v107.i8, *(int32x2_t *)v104.i8);
  v194 = vmlsl_s32(vmull_s32(*(int32x2_t *)v107.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8);
  *(int32x2_t *)v101.i8 = vrshrn_n_s64(vsubq_s64(v171, v233), 0xEuLL);
  *(int32x2_t *)v52.i8 = vrshrn_n_s64(vsubq_s64(v191, v129), 0xEuLL);
  v112 = vmlal_s32(vmull_s32(*(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v52.i8, *(int32x2_t *)v104.i8);
  v113 = vmlsl_s32(vmull_s32(*(int32x2_t *)v52.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8);
  *(int32x2_t *)v101.i8 = vrshrn_n_s64(vsubq_s64(v169, v123), 0xEuLL);
  v114 = vrshrn_n_s64(vsubq_s64(v290, v288), 0xEuLL);
  v115 = vmlal_s32(vmull_s32(*(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8), v114, *(int32x2_t *)v104.i8);
  v116 = vmlsl_s32(vmull_s32(v114, *(int32x2_t *)v104.i8), *(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8);
  *(int32x2_t *)v101.i8 = vrshrn_n_s64(vsubq_s64(v157, v131), 0xEuLL);
  *(int32x2_t *)v87.i8 = vrshrn_n_s64(vsubq_s64(v282, v285), 0xEuLL);
  *(int32x4_t *)a1 = vaddq_s32(v99, v102);
  *(int32x4_t *)a2 = vaddq_s32(v100, v97);
  *(int32x4_t *)(a1 + 16) = vnegq_s32(vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v75.i8, v243, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v130.i8, v142, 0xEuLL)));
  *(int32x4_t *)(a2 + 16) = vnegq_s32(vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v77.i8, v93, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v88.i8, v137, 0xEuLL)));
  *(int32x4_t *)(a1 + 32) = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v248, v278), 0xEuLL), vaddq_s64(v233, v171), 0xEuLL);
  *(int32x4_t *)(a2 + 32) = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v123, v169), 0xEuLL), vaddq_s64(v131, v157), 0xEuLL);
  *(int32x4_t *)(a1 + 48) = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v263, v258), 0xEuLL), vaddq_s64(v223, v274), 0xEuLL));
  *(int32x4_t *)(a2 + 48) = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v225, v260), 0xEuLL), vaddq_s64(v247, v276), 0xEuLL));
  *(int32x4_t *)(a1 + 64) = vrshrn_high_n_s64(vrshrn_n_s64(v241, 0xEuLL), v221, 0xEuLL);
  *(int32x4_t *)(a2 + 64) = vrshrn_high_n_s64(vrshrn_n_s64(v219, 0xEuLL), v217, 0xEuLL);
  *(int32x4_t *)(a1 + 80) = vrshrn_high_n_s64(vrshrn_n_s64(v111, 0xEuLL), v112, 0xEuLL);
  *(int32x4_t *)(a2 + 80) = vrshrn_high_n_s64(vrshrn_n_s64(v115, 0xEuLL), vmlal_s32(vmull_s32(*(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v87.i8, *(int32x2_t *)v104.i8), 0xEuLL);
  *(int32x4_t *)(a1 + 96) = vrshrn_high_n_s64(vrshrn_n_s64(v166, 0xEuLL), v151, 0xEuLL);
  *(int32x4_t *)(a2 + 96) = vrshrn_high_n_s64(vrshrn_n_s64(v139, 0xEuLL), v134, 0xEuLL);
  *(int32x4_t *)(a1 + 112) = vrshrn_high_n_s64(vrshrn_n_s64(v105, 0xEuLL), v106, 0xEuLL);
  *(int32x4_t *)(a2 + 112) = vrshrn_high_n_s64(vrshrn_n_s64(v109, 0xEuLL), v110, 0xEuLL);
  *(int32x4_t *)(a1 + 128) = vrshrn_high_n_s64(vrshrn_n_s64(v202, 0xEuLL), v204, 0xEuLL);
  *(int32x4_t *)(a2 + 128) = vrshrn_high_n_s64(vrshrn_n_s64(v199, 0xEuLL), v196, 0xEuLL);
  *(int32x4_t *)(a1 + 144) = vrshrn_high_n_s64(vrshrn_n_s64(v214, 0xEuLL), v162, 0xEuLL);
  *(int32x4_t *)(a2 + 144) = vrshrn_high_n_s64(vrshrn_n_s64(v153, 0xEuLL), v144, 0xEuLL);
  *(int32x4_t *)(a1 + 160) = vrshrn_high_n_s64(vrshrn_n_s64(v194, 0xEuLL), v113, 0xEuLL);
  *(int32x4_t *)(a2 + 160) = vrshrn_high_n_s64(vrshrn_n_s64(v116, 0xEuLL), vmlsl_s32(vmull_s32(*(int32x2_t *)v87.i8, *(int32x2_t *)v104.i8), *(int32x2_t *)v101.i8, *(int32x2_t *)v104.i8), 0xEuLL);
  *(int32x4_t *)(a1 + 176) = vrshrn_high_n_s64(vrshrn_n_s64(v245, 0xEuLL), v237, 0xEuLL);
  *(int32x4_t *)(a2 + 176) = vrshrn_high_n_s64(vrshrn_n_s64(v239, 0xEuLL), v235, 0xEuLL);
  *(int32x4_t *)(a1 + 192) = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v254, v250), 0xEuLL), vaddq_s64(v227, v270), 0xEuLL);
  *(int32x4_t *)(a2 + 192) = vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v231, v256), 0xEuLL), vaddq_s64(v252, v268), 0xEuLL);
  *(int32x4_t *)(a1 + 208) = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v272, v280), 0xEuLL), vaddq_s64(v129, v191), 0xEuLL));
  *(int32x4_t *)(a2 + 208) = vnegq_s32(vrshrn_high_n_s64(vrshrn_n_s64(vaddq_s64(v288, v290), 0xEuLL), vaddq_s64(v285, v282), 0xEuLL));
  *(int32x4_t *)(a1 + 224) = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v132.i8, v164, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v127.i8, v160, 0xEuLL));
  *(int32x4_t *)(a2 + 224) = vaddq_s32(vrshrn_high_n_s64(*(int32x2_t *)v215.i8, v229, 0xEuLL), vrshrn_high_n_s64(*(int32x2_t *)v46.i8, v119, 0xEuLL));
  *(int32x4_t *)(a1 + 240) = vnegq_s32(vaddq_s32(v212, v206));
  result = vnegq_s32(vaddq_s32(v266, v209));
  *(int32x4_t *)(a2 + 240) = result;
  return result;
}

int32x4_t highbd_fdct16_8col(int32x4_t *a1, int32x4_t *a2)
{
  int32x4_t v2;
  int32x4_t v3;
  int32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int64x2_t v27;
  int64x2_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int64x2_t v54;
  int64x2_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  int64x2_t v59;
  int64x2_t v60;
  int64x2_t v61;
  int64x2_t v62;
  int64x2_t v63;
  int64x2_t v64;
  int64x2_t v65;
  int64x2_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;
  int64x2_t v91;
  int64x2_t v92;
  int64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  int64x2_t v96;
  int64x2_t v97;
  int64x2_t v98;
  int64x2_t v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t v104;
  int64x2_t v105;
  int64x2_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int64x2_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  int64x2_t v136;
  int64x2_t v137;
  int64x2_t v138;
  int64x2_t v139;
  int64x2_t v140;
  int64x2_t v141;
  int64x2_t v142;
  int64x2_t v143;
  int32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int32x4_t v154;
  int32x4_t v155;
  int64x2_t v156;
  int64x2_t v157;
  int64x2_t v158;
  int64x2_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int64x2_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t v165;
  int64x2_t v166;
  int64x2_t v167;
  int64x2_t v168;
  int64x2_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int64x2_t v176;
  int64x2_t v177;
  int64x2_t v178;
  int64x2_t v179;
  int64x2_t v180;
  int64x2_t v181;
  int64x2_t v182;
  int64x2_t v183;
  int64x2_t v184;
  int64x2_t v185;
  int64x2_t v186;
  int64x2_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t result;
  int64x2_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int64x2_t v202;
  int32x4_t v203;
  int64x2_t v204;
  int32x4_t v205;
  int32x4_t v206;
  int32x4_t v207;
  int64x2_t v208;
  int32x4_t v209;
  int64x2_t v210;
  int64x2_t v211;
  int32x4_t v212;
  int64x2_t v213;
  int32x4_t v214;
  int64x2_t v215;
  int32x4_t v216;
  int64x2_t v217;
  int64x2_t v218;
  int32x4_t v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int64x2_t v236;
  int32x4_t v237;
  int64x2_t v238;
  int32x4_t v239;
  int64x2_t v240;
  int32x4_t v241;
  int64x2_t v242;
  int32x4_t v243;
  int64x2_t v244;
  int32x4_t v245;
  int64x2_t v246;
  int32x4_t v247;
  int64x2_t v248;
  int32x4_t v249;
  int64x2_t v250;
  int64x2_t v251;
  int64x2_t v252;
  int64x2_t v253;
  int64x2_t v254;
  int64x2_t v255;
  int64x2_t v256;
  int64x2_t v257;
  int64x2_t v258;
  int64x2_t v259;
  int64x2_t v260;
  int32x4_t v261;
  int64x2_t v262;
  int64x2_t v263;
  int64x2_t v264;
  int64x2_t v265;
  int64x2_t v266;
  int64x2_t v267;

  v247 = a1[1];
  v249 = a1[14];
  v243 = a2[1];
  v245 = a2[14];
  v200 = vaddq_s32(v245, v243);
  v2 = a1[3];
  v229 = a1[2];
  v231 = vaddq_s32(v249, v247);
  v3 = a1[12];
  v227 = a1[13];
  v4 = a2[3];
  v223 = a2[13];
  v225 = a2[2];
  v5 = a2[12];
  v219 = vaddq_s32(v223, v225);
  v221 = a1[5];
  v6 = a1[10];
  v235 = vaddq_s32(v227, v229);
  v237 = vaddq_s32(v6, v221);
  v7 = a2[5];
  v8 = a2[10];
  v239 = a1[9];
  v241 = a1[6];
  v212 = a1[8];
  v214 = a1[7];
  v233 = vaddq_s32(v239, v241);
  v9 = vsubq_s32(v235, v237);
  v10 = vsubq_s32(v231, v233);
  v11 = vaddq_s32(v10, v9);
  v12 = vsubq_s32(v10, v9);
  v198 = a2[6];
  v199 = a2[9];
  v205 = a2[8];
  v207 = a2[7];
  v201 = vaddq_s32(v199, v198);
  v203 = vaddq_s32(v8, v7);
  v13 = vsubq_s32(v219, v203);
  v14 = vsubq_s32(v200, v201);
  v261 = vdupq_n_s32(0x5A820000u);
  v15 = vqrdmulhq_s32(v11, v261);
  v16 = vqrdmulhq_s32(vaddq_s32(v14, v13), v261);
  v17 = vqrdmulhq_s32(v12, v261);
  v18 = vqrdmulhq_s32(vsubq_s32(v14, v13), v261);
  v216 = a1[15];
  v19 = a1[4];
  v20 = a1[11];
  v195 = vaddq_s32(v216, *a1);
  v196 = vaddq_s32(v3, v2);
  v197 = vaddq_s32(v20, v19);
  v194 = vaddq_s32(v212, v214);
  v21 = vsubq_s32(v196, v197);
  v22 = vsubq_s32(v195, v194);
  v23 = vaddq_s32(v17, v21);
  v24 = vdupq_n_s32(0x3EC5u);
  v25 = vaddq_s32(v15, v22);
  v26 = vdupq_n_s32(0xC7Cu);
  v267 = vmlal_s32(vmull_s32(*(int32x2_t *)v23.i8, *(int32x2_t *)v26.i8), *(int32x2_t *)v25.i8, *(int32x2_t *)v24.i8);
  v266 = vmlal_high_s32(vmull_high_s32(v23, v26), v25, v24);
  v27 = vmull_s32(*(int32x2_t *)v25.i8, *(int32x2_t *)v26.i8);
  v28 = vmull_high_s32(v25, v26);
  v209 = a2[15];
  v29 = a2[4];
  v30 = a2[11];
  v31 = vaddq_s32(v209, *a2);
  v32 = vaddq_s32(v5, v4);
  v33 = vaddq_s32(v30, v29);
  v34 = vaddq_s32(v205, v207);
  v35 = vsubq_s32(v32, v33);
  v36 = vsubq_s32(v31, v34);
  v37 = vaddq_s32(v18, v35);
  v38 = vaddq_s32(v16, v36);
  v260 = vmlal_s32(vmull_s32(*(int32x2_t *)v37.i8, *(int32x2_t *)v26.i8), *(int32x2_t *)v38.i8, *(int32x2_t *)v24.i8);
  v259 = vmlal_high_s32(vmull_high_s32(v37, v26), v38, v24);
  v264 = vmlsl_high_s32(v28, v23, v24);
  v265 = vmlsl_s32(v27, *(int32x2_t *)v23.i8, *(int32x2_t *)v24.i8);
  v262 = vmlsl_high_s32(vmull_high_s32(v38, v26), v37, v24);
  v263 = vmlsl_s32(vmull_s32(*(int32x2_t *)v38.i8, *(int32x2_t *)v26.i8), *(int32x2_t *)v37.i8, *(int32x2_t *)v24.i8);
  v39 = vsubq_s32(v21, v17);
  v40 = vsubq_s32(v35, v18);
  v41 = vsubq_s32(v22, v15);
  v42 = vsubq_s32(v36, v16);
  v43 = vdupq_n_s32(0x238Eu);
  v44 = vdupq_n_s32(0x3537u);
  v258 = vmlal_s32(vmull_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v44.i8), *(int32x2_t *)v41.i8, *(int32x2_t *)v43.i8);
  v257 = vmlal_high_s32(vmull_high_s32(v39, v44), v41, v43);
  v256 = vmlal_s32(vmull_s32(*(int32x2_t *)v40.i8, *(int32x2_t *)v44.i8), *(int32x2_t *)v42.i8, *(int32x2_t *)v43.i8);
  v254 = vmlsl_s32(vmull_s32(*(int32x2_t *)v41.i8, *(int32x2_t *)v44.i8), *(int32x2_t *)v39.i8, *(int32x2_t *)v43.i8);
  v255 = vmlal_high_s32(vmull_high_s32(v40, v44), v42, v43);
  v252 = vmlsl_s32(vmull_s32(*(int32x2_t *)v42.i8, *(int32x2_t *)v44.i8), *(int32x2_t *)v40.i8, *(int32x2_t *)v43.i8);
  v253 = vmlsl_high_s32(vmull_high_s32(v41, v44), v39, v43);
  v251 = vmlsl_high_s32(vmull_high_s32(v42, v44), v40, v43);
  v45 = vsubq_s32(v221, v6);
  v46 = vsubq_s32(v7, v8);
  v47 = vsubq_s32(v19, v20);
  v48 = vsubq_s32(v29, v30);
  v49 = vsubq_s32(v2, v3);
  v50 = vsubq_s32(v4, v5);
  v51 = vsubq_s32(v229, v227);
  v52 = vsubq_s32(v225, v223);
  v53 = vdupq_n_s32(0x2D41u);
  v54 = vmlal_s32(vmull_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v53.i8), *(int32x2_t *)v51.i8, *(int32x2_t *)v53.i8);
  v55 = vmlal_high_s32(vmull_high_s32(v45, v53), v51, v53);
  v56 = vmlsl_s32(vmull_s32(*(int32x2_t *)v51.i8, *(int32x2_t *)v53.i8), *(int32x2_t *)v45.i8, *(int32x2_t *)v53.i8);
  v57 = vmlsl_high_s32(vmull_high_s32(v51, v53), v45, v53);
  v58 = vmlal_s32(vmull_s32(*(int32x2_t *)v46.i8, *(int32x2_t *)v53.i8), *(int32x2_t *)v52.i8, *(int32x2_t *)v53.i8);
  v59 = vmlal_high_s32(vmull_high_s32(v46, v53), v52, v53);
  v60 = vmlsl_s32(vmull_s32(*(int32x2_t *)v52.i8, *(int32x2_t *)v53.i8), *(int32x2_t *)v46.i8, *(int32x2_t *)v53.i8);
  v61 = vmlsl_high_s32(vmull_high_s32(v52, v53), v46, v53);
  v193 = vmlal_s32(vmull_s32(*(int32x2_t *)v47.i8, *(int32x2_t *)v53.i8), *(int32x2_t *)v49.i8, *(int32x2_t *)v53.i8);
  v62 = vmlal_high_s32(vmull_high_s32(v47, v53), v49, v53);
  v63 = vmlsl_s32(vmull_s32(*(int32x2_t *)v49.i8, *(int32x2_t *)v53.i8), *(int32x2_t *)v47.i8, *(int32x2_t *)v53.i8);
  v64 = vmlsl_high_s32(vmull_high_s32(v49, v53), v47, v53);
  v65 = vmlal_s32(vmull_s32(*(int32x2_t *)v48.i8, *(int32x2_t *)v53.i8), *(int32x2_t *)v50.i8, *(int32x2_t *)v53.i8);
  v66 = vmlal_high_s32(vmull_high_s32(v48, v53), v50, v53);
  v67 = vmlsl_s32(vmull_s32(*(int32x2_t *)v50.i8, *(int32x2_t *)v53.i8), *(int32x2_t *)v48.i8, *(int32x2_t *)v53.i8);
  v68 = vmlsl_high_s32(vmull_high_s32(v50, v53), v48, v53);
  v69 = vsubq_s32(v241, v239);
  v70 = vsubq_s32(v198, v199);
  v71 = vsubq_s32(v247, v249);
  v72 = vsubq_s32(v243, v245);
  v234 = vaddq_s32(v233, v231);
  v230 = vaddq_s32(v194, v195);
  v232 = vaddq_s32(v237, v235);
  v226 = vaddq_s32(v201, v200);
  v228 = vaddq_s32(v197, v196);
  v222 = vaddq_s32(v34, v31);
  v224 = vaddq_s32(v203, v219);
  v220 = vaddq_s32(v33, v32);
  v73 = vsubq_s32(v234, v232);
  v74 = vsubq_s32(v230, v228);
  v75 = vdupq_n_s32(0x3B21u);
  v76 = vdupq_n_s32(0x187Eu);
  v242 = vmlal_s32(vmull_s32(*(int32x2_t *)v73.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v74.i8, *(int32x2_t *)v75.i8);
  v240 = vmlal_high_s32(vmull_high_s32(v73, v76), v74, v75);
  v248 = vmlsl_high_s32(vmull_high_s32(v74, v76), v73, v75);
  v250 = vmlsl_s32(vmull_s32(*(int32x2_t *)v74.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v73.i8, *(int32x2_t *)v75.i8);
  v77 = vsubq_s32(v226, v224);
  v78 = vsubq_s32(v222, v220);
  v238 = vmlal_s32(vmull_s32(*(int32x2_t *)v77.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v78.i8, *(int32x2_t *)v75.i8);
  v236 = vmlal_high_s32(vmull_high_s32(v77, v76), v78, v75);
  v244 = vmlsl_high_s32(vmull_high_s32(v78, v76), v77, v75);
  v246 = vmlsl_s32(vmull_s32(*(int32x2_t *)v78.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v77.i8, *(int32x2_t *)v75.i8);
  v79 = vrshrn_high_n_s64(vrshrn_n_s64(v54, 0xEuLL), v55, 0xEuLL);
  v80 = vrshrn_high_n_s64(vrshrn_n_s64(v58, 0xEuLL), v59, 0xEuLL);
  v81 = vrshrn_high_n_s64(vrshrn_n_s64(v56, 0xEuLL), v57, 0xEuLL);
  v82 = vrshrn_high_n_s64(vrshrn_n_s64(v60, 0xEuLL), v61, 0xEuLL);
  v83 = vaddq_s32(v81, v69);
  v84 = vsubq_s32(v69, v81);
  v85 = vaddq_s32(v82, v70);
  v86 = vsubq_s32(v70, v82);
  v87 = vsubq_s32(v71, v79);
  v88 = vaddq_s32(v79, v71);
  v89 = vsubq_s32(v72, v80);
  v90 = vaddq_s32(v80, v72);
  v91 = vmlal_s32(vmull_s32(*(int32x2_t *)v83.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v88.i8, *(int32x2_t *)v75.i8);
  v92 = vmlal_high_s32(vmull_high_s32(v83, v76), v88, v75);
  v93 = vmlsl_s32(vmull_s32(*(int32x2_t *)v88.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v83.i8, *(int32x2_t *)v75.i8);
  v94 = vmlsl_high_s32(vmull_high_s32(v88, v76), v83, v75);
  v95 = vmlal_s32(vmull_s32(*(int32x2_t *)v85.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v90.i8, *(int32x2_t *)v75.i8);
  v96 = vmlal_high_s32(vmull_high_s32(v85, v76), v90, v75);
  v97 = vmlsl_s32(vmull_s32(*(int32x2_t *)v90.i8, *(int32x2_t *)v76.i8), *(int32x2_t *)v85.i8, *(int32x2_t *)v75.i8);
  v98 = vmlsl_high_s32(vmull_high_s32(v90, v76), v85, v75);
  v204 = vmlal_s32(vmull_s32(*(int32x2_t *)v87.i8, *(int32x2_t *)v75.i8), *(int32x2_t *)v84.i8, *(int32x2_t *)v76.i8);
  v202 = vmlal_high_s32(vmull_high_s32(v87, v75), v84, v76);
  v99 = vmull_s32(*(int32x2_t *)v84.i8, *(int32x2_t *)v75.i8);
  v100 = vmull_high_s32(v84, v75);
  v101 = vmlal_s32(vmull_s32(*(int32x2_t *)v89.i8, *(int32x2_t *)v75.i8), *(int32x2_t *)v86.i8, *(int32x2_t *)v76.i8);
  v102 = vmlal_high_s32(vmull_high_s32(v89, v75), v86, v76);
  v103 = vmlsl_s32(v99, *(int32x2_t *)v87.i8, *(int32x2_t *)v76.i8);
  v104 = vmlsl_high_s32(v100, v87, v76);
  v105 = vmlsl_s32(vmull_s32(*(int32x2_t *)v86.i8, *(int32x2_t *)v75.i8), *(int32x2_t *)v89.i8, *(int32x2_t *)v76.i8);
  v106 = vmlsl_high_s32(vmull_high_s32(v86, v75), v89, v76);
  v107 = vsubq_s32(v214, v212);
  v108 = vsubq_s32(v207, v205);
  v206 = vsubq_s32(*a1, v216);
  v109 = vsubq_s32(*a2, v209);
  v110 = vrshrn_high_n_s64(vrshrn_n_s64(v193, 0xEuLL), v62, 0xEuLL);
  v111 = vrshrn_high_n_s64(vrshrn_n_s64(v65, 0xEuLL), v66, 0xEuLL);
  v112 = vrshrn_high_n_s64(vrshrn_n_s64(v63, 0xEuLL), v64, 0xEuLL);
  v113 = vrshrn_high_n_s64(vrshrn_n_s64(v67, 0xEuLL), v68, 0xEuLL);
  v114 = vrshrn_high_n_s64(vrshrn_n_s64(v91, 0xEuLL), v92, 0xEuLL);
  v115 = vrshrn_high_n_s64(vrshrn_n_s64(v95, 0xEuLL), v96, 0xEuLL);
  v116 = vrshrn_high_n_s64(vrshrn_n_s64(v93, 0xEuLL), v94, 0xEuLL);
  v117 = vrshrn_high_n_s64(vrshrn_n_s64(v97, 0xEuLL), v98, 0xEuLL);
  v118 = vaddq_s32(v112, v107);
  v119 = v107;
  v120 = vaddq_s32(v110, v206);
  v121 = vaddq_s32(v116, v118);
  v122 = vaddq_s32(v114, v120);
  v123 = vdupq_n_s32(0x3FB1u);
  v124 = vdupq_n_s32(0x646u);
  v218 = vmlal_s32(vmull_s32(*(int32x2_t *)v121.i8, *(int32x2_t *)v124.i8), *(int32x2_t *)v122.i8, *(int32x2_t *)v123.i8);
  v217 = vmlal_high_s32(vmull_high_s32(v121, v124), v122, v123);
  v125 = vaddq_s32(v113, v108);
  v126 = vaddq_s32(v111, v109);
  v127 = vaddq_s32(v117, v125);
  v128 = vaddq_s32(v115, v126);
  v208 = vmlal_s32(vmull_s32(*(int32x2_t *)v127.i8, *(int32x2_t *)v124.i8), *(int32x2_t *)v128.i8, *(int32x2_t *)v123.i8);
  v129 = vmlal_high_s32(vmull_high_s32(v127, v124), v128, v123);
  v213 = vmlsl_high_s32(vmull_high_s32(v122, v124), v121, v123);
  v215 = vmlsl_s32(vmull_s32(*(int32x2_t *)v122.i8, *(int32x2_t *)v124.i8), *(int32x2_t *)v121.i8, *(int32x2_t *)v123.i8);
  v210 = vmlsl_high_s32(vmull_high_s32(v128, v124), v127, v123);
  v211 = vmlsl_s32(vmull_s32(*(int32x2_t *)v128.i8, *(int32x2_t *)v124.i8), *(int32x2_t *)v127.i8, *(int32x2_t *)v123.i8);
  v130 = vsubq_s32(v118, v116);
  v131 = vsubq_s32(v125, v117);
  v132 = vsubq_s32(v120, v114);
  v133 = vsubq_s32(v126, v115);
  v134 = vdupq_n_s32(0x289Au);
  v135 = vdupq_n_s32(0x3179u);
  v136 = vmlal_s32(vmull_s32(*(int32x2_t *)v130.i8, *(int32x2_t *)v135.i8), *(int32x2_t *)v132.i8, *(int32x2_t *)v134.i8);
  v137 = vmlal_high_s32(vmull_high_s32(v130, v135), v132, v134);
  v138 = vmlal_s32(vmull_s32(*(int32x2_t *)v131.i8, *(int32x2_t *)v135.i8), *(int32x2_t *)v133.i8, *(int32x2_t *)v134.i8);
  v139 = vmlal_high_s32(vmull_high_s32(v131, v135), v133, v134);
  v140 = vmlsl_s32(vmull_s32(*(int32x2_t *)v132.i8, *(int32x2_t *)v135.i8), *(int32x2_t *)v130.i8, *(int32x2_t *)v134.i8);
  v141 = vmlsl_high_s32(vmull_high_s32(v132, v135), v130, v134);
  v142 = vmlsl_s32(vmull_s32(*(int32x2_t *)v133.i8, *(int32x2_t *)v135.i8), *(int32x2_t *)v131.i8, *(int32x2_t *)v134.i8);
  v143 = vmlsl_high_s32(vmull_high_s32(v133, v135), v131, v134);
  v144 = vsubq_s32(v119, v112);
  v145 = vsubq_s32(v108, v113);
  v146 = vsubq_s32(v206, v110);
  v147 = vsubq_s32(v109, v111);
  v148 = vrshrn_high_n_s64(vrshrn_n_s64(v204, 0xEuLL), v202, 0xEuLL);
  v149 = vrshrn_high_n_s64(vrshrn_n_s64(v101, 0xEuLL), v102, 0xEuLL);
  v150 = vrshrn_high_n_s64(vrshrn_n_s64(v103, 0xEuLL), v104, 0xEuLL);
  v151 = vrshrn_high_n_s64(vrshrn_n_s64(v105, 0xEuLL), v106, 0xEuLL);
  v152 = vaddq_s32(v148, v144);
  v153 = vaddq_s32(v150, v146);
  v154 = vdupq_n_s32(0x3871u);
  v155 = vdupq_n_s32(0x1E2Bu);
  v156 = vmlal_s32(vmull_s32(*(int32x2_t *)v152.i8, *(int32x2_t *)v155.i8), *(int32x2_t *)v153.i8, *(int32x2_t *)v154.i8);
  v157 = vmlal_high_s32(vmull_high_s32(v152, v155), v153, v154);
  v158 = vmull_s32(*(int32x2_t *)v153.i8, *(int32x2_t *)v155.i8);
  v159 = vmull_high_s32(v153, v155);
  v160 = vaddq_s32(v149, v145);
  v161 = vaddq_s32(v151, v147);
  v162 = vmlal_s32(vmull_s32(*(int32x2_t *)v160.i8, *(int32x2_t *)v155.i8), *(int32x2_t *)v161.i8, *(int32x2_t *)v154.i8);
  v163 = vmull_s32(*(int32x2_t *)v161.i8, *(int32x2_t *)v155.i8);
  v164 = vmull_high_s32(v161, v155);
  v165 = vmlal_high_s32(vmull_high_s32(v160, v155), v161, v154);
  v166 = vmlsl_s32(v158, *(int32x2_t *)v152.i8, *(int32x2_t *)v154.i8);
  v167 = vmlsl_high_s32(v159, v152, v154);
  v168 = vmlsl_s32(v163, *(int32x2_t *)v160.i8, *(int32x2_t *)v154.i8);
  v169 = vmlsl_high_s32(v164, v160, v154);
  v170 = vsubq_s32(v144, v148);
  v171 = vsubq_s32(v145, v149);
  v172 = vsubq_s32(v146, v150);
  v173 = vsubq_s32(v147, v151);
  v174 = vdupq_n_s32(0x1294u);
  v175 = vdupq_n_s32(0x3D3Fu);
  v176 = vmlal_s32(vmull_s32(*(int32x2_t *)v170.i8, *(int32x2_t *)v175.i8), *(int32x2_t *)v172.i8, *(int32x2_t *)v174.i8);
  v177 = vmlal_high_s32(vmull_high_s32(v170, v175), v172, v174);
  v178 = vmull_s32(*(int32x2_t *)v172.i8, *(int32x2_t *)v175.i8);
  v179 = vmull_high_s32(v172, v175);
  v180 = vmlal_s32(vmull_s32(*(int32x2_t *)v171.i8, *(int32x2_t *)v175.i8), *(int32x2_t *)v173.i8, *(int32x2_t *)v174.i8);
  v181 = vmull_s32(*(int32x2_t *)v173.i8, *(int32x2_t *)v175.i8);
  v182 = vmull_high_s32(v173, v175);
  v183 = vmlal_high_s32(vmull_high_s32(v171, v175), v173, v174);
  v184 = vmlsl_s32(v178, *(int32x2_t *)v170.i8, *(int32x2_t *)v174.i8);
  v185 = vmlsl_high_s32(v179, v170, v174);
  v186 = vmlsl_s32(v181, *(int32x2_t *)v171.i8, *(int32x2_t *)v174.i8);
  v187 = vmlsl_high_s32(v182, v171, v174);
  v188 = vaddq_s32(v230, v228);
  v189 = vaddq_s32(v222, v220);
  v190 = vaddq_s32(v234, v232);
  v191 = vaddq_s32(v226, v224);
  a1[1] = vrshrn_high_n_s64(vrshrn_n_s64(v218, 0xEuLL), v217, 0xEuLL);
  a2[1] = vrshrn_high_n_s64(vrshrn_n_s64(v208, 0xEuLL), v129, 0xEuLL);
  a1[15] = vrshrn_high_n_s64(vrshrn_n_s64(v215, 0xEuLL), v213, 0xEuLL);
  a2[15] = vrshrn_high_n_s64(vrshrn_n_s64(v211, 0xEuLL), v210, 0xEuLL);
  a1[9] = vrshrn_high_n_s64(vrshrn_n_s64(v136, 0xEuLL), v137, 0xEuLL);
  a2[9] = vrshrn_high_n_s64(vrshrn_n_s64(v138, 0xEuLL), v139, 0xEuLL);
  a1[7] = vrshrn_high_n_s64(vrshrn_n_s64(v140, 0xEuLL), v141, 0xEuLL);
  a2[7] = vrshrn_high_n_s64(vrshrn_n_s64(v142, 0xEuLL), v143, 0xEuLL);
  a1[5] = vrshrn_high_n_s64(vrshrn_n_s64(v156, 0xEuLL), v157, 0xEuLL);
  a2[5] = vrshrn_high_n_s64(vrshrn_n_s64(v162, 0xEuLL), v165, 0xEuLL);
  a1[11] = vrshrn_high_n_s64(vrshrn_n_s64(v166, 0xEuLL), v167, 0xEuLL);
  a2[11] = vrshrn_high_n_s64(vrshrn_n_s64(v168, 0xEuLL), v169, 0xEuLL);
  a1[13] = vrshrn_high_n_s64(vrshrn_n_s64(v176, 0xEuLL), v177, 0xEuLL);
  a2[13] = vrshrn_high_n_s64(vrshrn_n_s64(v180, 0xEuLL), v183, 0xEuLL);
  a1[3] = vrshrn_high_n_s64(vrshrn_n_s64(v184, 0xEuLL), v185, 0xEuLL);
  a2[3] = vrshrn_high_n_s64(vrshrn_n_s64(v186, 0xEuLL), v187, 0xEuLL);
  *a1 = vqrdmulhq_s32(vaddq_s32(v188, v190), v261);
  *a2 = vqrdmulhq_s32(vaddq_s32(v189, v191), v261);
  a1[2] = vrshrn_high_n_s64(vrshrn_n_s64(v267, 0xEuLL), v266, 0xEuLL);
  a2[2] = vrshrn_high_n_s64(vrshrn_n_s64(v260, 0xEuLL), v259, 0xEuLL);
  a1[4] = vrshrn_high_n_s64(vrshrn_n_s64(v242, 0xEuLL), v240, 0xEuLL);
  a2[4] = vrshrn_high_n_s64(vrshrn_n_s64(v238, 0xEuLL), v236, 0xEuLL);
  a1[6] = vrshrn_high_n_s64(vrshrn_n_s64(v254, 0xEuLL), v253, 0xEuLL);
  a2[6] = vrshrn_high_n_s64(vrshrn_n_s64(v252, 0xEuLL), v251, 0xEuLL);
  a1[8] = vqrdmulhq_s32(vsubq_s32(v188, v190), v261);
  a2[8] = vqrdmulhq_s32(vsubq_s32(v189, v191), v261);
  a1[10] = vrshrn_high_n_s64(vrshrn_n_s64(v258, 0xEuLL), v257, 0xEuLL);
  a2[10] = vrshrn_high_n_s64(vrshrn_n_s64(v256, 0xEuLL), v255, 0xEuLL);
  a1[12] = vrshrn_high_n_s64(vrshrn_n_s64(v250, 0xEuLL), v248, 0xEuLL);
  a2[12] = vrshrn_high_n_s64(vrshrn_n_s64(v246, 0xEuLL), v244, 0xEuLL);
  a1[14] = vrshrn_high_n_s64(vrshrn_n_s64(v265, 0xEuLL), v264, 0xEuLL);
  result = vrshrn_high_n_s64(vrshrn_n_s64(v263, 0xEuLL), v262, 0xEuLL);
  a2[14] = result;
  return result;
}

BOOL vp9_read_sync_code(uint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);
  int v6;
  void (*v7)(uint64_t);
  int v8;
  void (*v9)(uint64_t);
  int v10;
  void (*v11)(uint64_t);
  int v12;
  void (*v13)(uint64_t);
  int v14;
  void (*v15)(uint64_t);
  int v16;
  void (*v17)(uint64_t);
  int v18;
  unsigned __int8 *v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  void (*v25)(uint64_t);
  int v27;
  void (*v28)(uint64_t);
  int v29;
  void (*v30)(uint64_t);
  int v31;
  void (*v32)(uint64_t);
  int v33;
  void (*v34)(uint64_t);
  int v35;
  void (*v36)(uint64_t);
  int v37;
  void (*v38)(uint64_t);
  int v39;
  unsigned __int8 *v40;
  int v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  void (*v48)(uint64_t);
  int v49;
  void (*v50)(uint64_t);
  void (*v51)(uint64_t);
  unsigned int v52;
  void (*v53)(uint64_t);
  int v54;
  unsigned int v55;
  void (*v56)(uint64_t);
  int v57;
  unsigned int v58;
  void (*v59)(uint64_t);
  int v60;
  unsigned int v61;
  void (*v62)(uint64_t);
  int v63;
  unsigned int v64;
  void (*v65)(uint64_t);
  int v66;
  unsigned int v67;
  unsigned __int8 *v68;
  int v69;
  void (*v70)(uint64_t);

  v3 = a1[1];
  v2 = a1[2];
  v4 = *a1;
  v5 = (void (*)(uint64_t))(*a1 + (v2 >> 3));
  if ((unint64_t)v5 >= v3)
  {
    v5 = (void (*)(uint64_t))a1[4];
    if (v5)
    {
      v5(a1[3]);
      LODWORD(v5) = 0;
      v3 = a1[1];
      v2 = a1[2];
      v4 = *a1;
    }
  }
  else
  {
    LODWORD(v5) = (*(unsigned __int8 *)v5 >> (~(_BYTE)v2++ & 7)) & 1;
    a1[2] = v2;
  }
  v6 = (_DWORD)v5 << 7;
  v7 = (void (*)(uint64_t))(v4 + (v2 >> 3));
  if ((unint64_t)v7 >= v3)
  {
    v7 = (void (*)(uint64_t))a1[4];
    if (v7)
    {
      v7(a1[3]);
      LODWORD(v7) = 0;
      v3 = a1[1];
      v2 = a1[2];
      v4 = *a1;
    }
  }
  else
  {
    LODWORD(v7) = (*(unsigned __int8 *)v7 >> (~(_BYTE)v2++ & 7)) & 1;
    a1[2] = v2;
  }
  v8 = v6 | ((_DWORD)v7 << 6);
  v9 = (void (*)(uint64_t))(v4 + (v2 >> 3));
  if ((unint64_t)v9 >= v3)
  {
    v9 = (void (*)(uint64_t))a1[4];
    if (v9)
    {
      v9(a1[3]);
      LODWORD(v9) = 0;
      v3 = a1[1];
      v2 = a1[2];
      v4 = *a1;
    }
  }
  else
  {
    LODWORD(v9) = (*(unsigned __int8 *)v9 >> (~(_BYTE)v2++ & 7)) & 1;
    a1[2] = v2;
  }
  v10 = v8 | (32 * (_DWORD)v9);
  v11 = (void (*)(uint64_t))(v4 + (v2 >> 3));
  if ((unint64_t)v11 >= v3)
  {
    v11 = (void (*)(uint64_t))a1[4];
    if (v11)
    {
      v11(a1[3]);
      LODWORD(v11) = 0;
      v3 = a1[1];
      v2 = a1[2];
      v4 = *a1;
    }
  }
  else
  {
    LODWORD(v11) = (*(unsigned __int8 *)v11 >> (~(_BYTE)v2++ & 7)) & 1;
    a1[2] = v2;
  }
  v12 = v10 | (16 * (_DWORD)v11);
  v13 = (void (*)(uint64_t))(v4 + (v2 >> 3));
  if ((unint64_t)v13 >= v3)
  {
    v13 = (void (*)(uint64_t))a1[4];
    if (v13)
    {
      v13(a1[3]);
      LODWORD(v13) = 0;
      v3 = a1[1];
      v2 = a1[2];
      v4 = *a1;
    }
  }
  else
  {
    LODWORD(v13) = (*(unsigned __int8 *)v13 >> (~(_BYTE)v2++ & 7)) & 1;
    a1[2] = v2;
  }
  v14 = v12 | (8 * (_DWORD)v13);
  v15 = (void (*)(uint64_t))(v4 + (v2 >> 3));
  if ((unint64_t)v15 >= v3)
  {
    v15 = (void (*)(uint64_t))a1[4];
    if (v15)
    {
      v15(a1[3]);
      LODWORD(v15) = 0;
      v3 = a1[1];
      v2 = a1[2];
      v4 = *a1;
    }
  }
  else
  {
    LODWORD(v15) = (*(unsigned __int8 *)v15 >> (~(_BYTE)v2++ & 7)) & 1;
    a1[2] = v2;
  }
  v16 = v14 | (4 * (_DWORD)v15);
  v17 = (void (*)(uint64_t))(v4 + (v2 >> 3));
  if ((unint64_t)v17 >= v3)
  {
    v17 = (void (*)(uint64_t))a1[4];
    if (v17)
    {
      v17(a1[3]);
      LODWORD(v17) = 0;
      v3 = a1[1];
      v2 = a1[2];
      v4 = *a1;
    }
  }
  else
  {
    LODWORD(v17) = (*(unsigned __int8 *)v17 >> (~(_BYTE)v2++ & 7)) & 1;
    a1[2] = v2;
  }
  v18 = v16 | (2 * (_DWORD)v17);
  v19 = (unsigned __int8 *)(v4 + (v2 >> 3));
  if ((unint64_t)v19 < v3)
  {
    v20 = (*v19 >> (~(_BYTE)v2 & 7)) & 1;
    a1[2] = v2 + 1;
    if ((v20 | v18) == 0x49)
      goto LABEL_31;
    return 0;
  }
  v25 = (void (*)(uint64_t))a1[4];
  if (v25)
  {
    v25(a1[3]);
    if (v18 != 73)
      return 0;
  }
  else if (v18 != 73)
  {
    return 0;
  }
LABEL_31:
  v22 = a1[1];
  v21 = a1[2];
  v23 = *a1;
  v24 = (void (*)(uint64_t))(*a1 + (v21 >> 3));
  if ((unint64_t)v24 >= v22)
  {
    v24 = (void (*)(uint64_t))a1[4];
    if (v24)
    {
      v24(a1[3]);
      LODWORD(v24) = 0;
      v22 = a1[1];
      v21 = a1[2];
      v23 = *a1;
    }
  }
  else
  {
    LODWORD(v24) = (*(unsigned __int8 *)v24 >> (~(_BYTE)v21++ & 7)) & 1;
    a1[2] = v21;
  }
  v27 = (_DWORD)v24 << 7;
  v28 = (void (*)(uint64_t))(v23 + (v21 >> 3));
  if ((unint64_t)v28 >= v22)
  {
    v28 = (void (*)(uint64_t))a1[4];
    if (v28)
    {
      v28(a1[3]);
      LODWORD(v28) = 0;
      v22 = a1[1];
      v21 = a1[2];
      v23 = *a1;
    }
  }
  else
  {
    LODWORD(v28) = (*(unsigned __int8 *)v28 >> (~(_BYTE)v21++ & 7)) & 1;
    a1[2] = v21;
  }
  v29 = v27 | ((_DWORD)v28 << 6);
  v30 = (void (*)(uint64_t))(v23 + (v21 >> 3));
  if ((unint64_t)v30 >= v22)
  {
    v30 = (void (*)(uint64_t))a1[4];
    if (v30)
    {
      v30(a1[3]);
      LODWORD(v30) = 0;
      v22 = a1[1];
      v21 = a1[2];
      v23 = *a1;
    }
  }
  else
  {
    LODWORD(v30) = (*(unsigned __int8 *)v30 >> (~(_BYTE)v21++ & 7)) & 1;
    a1[2] = v21;
  }
  v31 = v29 | (32 * (_DWORD)v30);
  v32 = (void (*)(uint64_t))(v23 + (v21 >> 3));
  if ((unint64_t)v32 >= v22)
  {
    v32 = (void (*)(uint64_t))a1[4];
    if (v32)
    {
      v32(a1[3]);
      LODWORD(v32) = 0;
      v22 = a1[1];
      v21 = a1[2];
      v23 = *a1;
    }
  }
  else
  {
    LODWORD(v32) = (*(unsigned __int8 *)v32 >> (~(_BYTE)v21++ & 7)) & 1;
    a1[2] = v21;
  }
  v33 = v31 | (16 * (_DWORD)v32);
  v34 = (void (*)(uint64_t))(v23 + (v21 >> 3));
  if ((unint64_t)v34 >= v22)
  {
    v34 = (void (*)(uint64_t))a1[4];
    if (v34)
    {
      v34(a1[3]);
      LODWORD(v34) = 0;
      v22 = a1[1];
      v21 = a1[2];
      v23 = *a1;
    }
  }
  else
  {
    LODWORD(v34) = (*(unsigned __int8 *)v34 >> (~(_BYTE)v21++ & 7)) & 1;
    a1[2] = v21;
  }
  v35 = v33 | (8 * (_DWORD)v34);
  v36 = (void (*)(uint64_t))(v23 + (v21 >> 3));
  if ((unint64_t)v36 >= v22)
  {
    v36 = (void (*)(uint64_t))a1[4];
    if (v36)
    {
      v36(a1[3]);
      LODWORD(v36) = 0;
      v22 = a1[1];
      v21 = a1[2];
      v23 = *a1;
    }
  }
  else
  {
    LODWORD(v36) = (*(unsigned __int8 *)v36 >> (~(_BYTE)v21++ & 7)) & 1;
    a1[2] = v21;
  }
  v37 = v35 | (4 * (_DWORD)v36);
  v38 = (void (*)(uint64_t))(v23 + (v21 >> 3));
  if ((unint64_t)v38 >= v22)
  {
    v38 = (void (*)(uint64_t))a1[4];
    if (v38)
    {
      v38(a1[3]);
      LODWORD(v38) = 0;
      v22 = a1[1];
      v21 = a1[2];
      v23 = *a1;
    }
  }
  else
  {
    LODWORD(v38) = (*(unsigned __int8 *)v38 >> (~(_BYTE)v21++ & 7)) & 1;
    a1[2] = v21;
  }
  v39 = v37 | (2 * (_DWORD)v38);
  v40 = (unsigned __int8 *)(v23 + (v21 >> 3));
  if ((unint64_t)v40 < v22)
  {
    v41 = (*v40 >> (~(_BYTE)v21 & 7)) & 1;
    a1[2] = v21 + 1;
    if ((v41 | v39) == 0x83)
      goto LABEL_64;
    return 0;
  }
  v50 = (void (*)(uint64_t))a1[4];
  if (v50)
  {
    v50(a1[3]);
    if (v39 != 131)
      return 0;
  }
  else if (v39 != 131)
  {
    return 0;
  }
LABEL_64:
  v43 = a1[1];
  v42 = a1[2];
  v44 = *a1;
  v45 = (unsigned __int8 *)(*a1 + (v42 >> 3));
  if ((unint64_t)v45 >= v43)
  {
    v51 = (void (*)(uint64_t))a1[4];
    if (v51)
    {
      v51(a1[3]);
      v47 = 0;
      v43 = a1[1];
      v42 = a1[2];
      v44 = *a1;
      v48 = (void (*)(uint64_t))(*a1 + (v42 >> 3));
      if ((unint64_t)v48 < v43)
        goto LABEL_66;
    }
    else
    {
      v47 = 0;
      v48 = (void (*)(uint64_t))(v44 + (v42 >> 3));
      if ((unint64_t)v48 < v43)
        goto LABEL_66;
    }
LABEL_74:
    v48 = (void (*)(uint64_t))a1[4];
    if (v48)
    {
      v48(a1[3]);
      LODWORD(v48) = 0;
      v43 = a1[1];
      v42 = a1[2];
      v44 = *a1;
    }
    goto LABEL_76;
  }
  v46 = *v45 >> (~(_BYTE)v42++ & 7);
  a1[2] = v42;
  v47 = (v46 & 1) << 7;
  v48 = (void (*)(uint64_t))(v44 + (v42 >> 3));
  if ((unint64_t)v48 >= v43)
    goto LABEL_74;
LABEL_66:
  v49 = *(unsigned __int8 *)v48 >> (~(_BYTE)v42++ & 7);
  a1[2] = v42;
  LODWORD(v48) = (v49 & 1) << 6;
LABEL_76:
  v52 = v48 | v47;
  v53 = (void (*)(uint64_t))(v44 + (v42 >> 3));
  if ((unint64_t)v53 >= v43)
  {
    v53 = (void (*)(uint64_t))a1[4];
    if (v53)
    {
      v53(a1[3]);
      LODWORD(v53) = 0;
      v43 = a1[1];
      v42 = a1[2];
      v44 = *a1;
    }
  }
  else
  {
    v54 = *(unsigned __int8 *)v53 >> (~(_BYTE)v42++ & 7);
    a1[2] = v42;
    LODWORD(v53) = 32 * (v54 & 1);
  }
  v55 = v53 | v52;
  v56 = (void (*)(uint64_t))(v44 + (v42 >> 3));
  if ((unint64_t)v56 >= v43)
  {
    v56 = (void (*)(uint64_t))a1[4];
    if (v56)
    {
      v56(a1[3]);
      LODWORD(v56) = 0;
      v43 = a1[1];
      v42 = a1[2];
      v44 = *a1;
    }
  }
  else
  {
    v57 = *(unsigned __int8 *)v56 >> (~(_BYTE)v42++ & 7);
    a1[2] = v42;
    LODWORD(v56) = 16 * (v57 & 1);
  }
  v58 = v56 | v55;
  v59 = (void (*)(uint64_t))(v44 + (v42 >> 3));
  if ((unint64_t)v59 >= v43)
  {
    v59 = (void (*)(uint64_t))a1[4];
    if (v59)
    {
      v59(a1[3]);
      LODWORD(v59) = 0;
      v43 = a1[1];
      v42 = a1[2];
      v44 = *a1;
    }
  }
  else
  {
    v60 = *(unsigned __int8 *)v59 >> (~(_BYTE)v42++ & 7);
    a1[2] = v42;
    LODWORD(v59) = 8 * (v60 & 1);
  }
  v61 = v59 | v58;
  v62 = (void (*)(uint64_t))(v44 + (v42 >> 3));
  if ((unint64_t)v62 >= v43)
  {
    v62 = (void (*)(uint64_t))a1[4];
    if (v62)
    {
      v62(a1[3]);
      LODWORD(v62) = 0;
      v43 = a1[1];
      v42 = a1[2];
      v44 = *a1;
    }
  }
  else
  {
    v63 = *(unsigned __int8 *)v62 >> (~(_BYTE)v42++ & 7);
    a1[2] = v42;
    LODWORD(v62) = 4 * (v63 & 1);
  }
  v64 = v62 | v61;
  v65 = (void (*)(uint64_t))(v44 + (v42 >> 3));
  if ((unint64_t)v65 >= v43)
  {
    v65 = (void (*)(uint64_t))a1[4];
    if (v65)
    {
      v65(a1[3]);
      LODWORD(v65) = 0;
      v43 = a1[1];
      v42 = a1[2];
      v44 = *a1;
    }
  }
  else
  {
    v66 = *(unsigned __int8 *)v65 >> (~(_BYTE)v42++ & 7);
    a1[2] = v42;
    LODWORD(v65) = 2 * (v66 & 1);
  }
  v67 = v65 | v64;
  v68 = (unsigned __int8 *)(v44 + (v42 >> 3));
  if ((unint64_t)v68 >= v43)
  {
    v70 = (void (*)(uint64_t))a1[4];
    if (v70)
      v70(a1[3]);
    return v67 == 66;
  }
  else
  {
    v69 = (*v68 >> (~(_BYTE)v42 & 7)) & 1;
    a1[2] = v42 + 1;
    return (v69 | v67) == 66;
  }
}

uint64_t vp9_read_frame_size(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _QWORD *v5;
  int v6;
  unsigned int i;
  int v8;
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t (*v11)(_QWORD);
  int v12;
  unsigned int j;
  int v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t (*v17)(_QWORD);

  v5 = (_QWORD *)result;
  v6 = 0;
  for (i = 17; i > 1; --i)
  {
    while (1)
    {
      v9 = v5[2];
      v10 = (unsigned __int8 *)(*v5 + (v9 >> 3));
      if ((unint64_t)v10 >= v5[1])
        break;
      v8 = (*v10 >> (~(_BYTE)v9 & 7)) & 1;
      v5[2] = v9 + 1;
      v6 |= v8 << (i-- - 2);
      if (i <= 1)
        goto LABEL_7;
    }
    v11 = (uint64_t (*)(_QWORD))v5[4];
    if (v11)
      result = v11(v5[3]);
  }
LABEL_7:
  v12 = 0;
  *a2 = v6 + 1;
  for (j = 17; j > 1; --j)
  {
    while (1)
    {
      v15 = v5[2];
      v16 = (unsigned __int8 *)(*v5 + (v15 >> 3));
      if ((unint64_t)v16 >= v5[1])
        break;
      v14 = (*v16 >> (~(_BYTE)v15 & 7)) & 1;
      v5[2] = v15 + 1;
      v12 |= v14 << (j-- - 2);
      if (j <= 1)
        goto LABEL_13;
    }
    v17 = (uint64_t (*)(_QWORD))v5[4];
    if (v17)
      result = v17(v5[3]);
  }
LABEL_13:
  *a3 = v12 + 1;
  return result;
}

void vp9_decode_frame(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  unsigned __int8 *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  __int16 *v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  __int16 *v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  unint64_t v34;
  unsigned __int8 *v35;
  int v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  unsigned __int8 *v44;
  int v45;
  _QWORD *v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  int v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  unsigned __int8 *v64;
  int v65;
  int v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  unsigned __int8 *v70;
  int v71;
  int v72;
  unsigned __int8 *v73;
  int v74;
  int v75;
  unsigned __int8 *v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int *v80;
  uint64_t v81;
  __int16 *v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  int v92;
  int v93;
  unsigned __int8 *v94;
  int v95;
  int v96;
  unsigned __int8 *v97;
  int v98;
  int v99;
  unsigned __int8 *v100;
  int v101;
  int v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  unsigned __int8 *v106;
  int v107;
  int v108;
  unsigned __int8 *v109;
  int v110;
  int v111;
  unsigned __int8 *v112;
  int v113;
  int v114;
  unsigned __int8 *v115;
  int v116;
  int v117;
  int v118;
  int v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unsigned __int8 *v123;
  int v124;
  int v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unsigned __int8 *v129;
  int v130;
  int v131;
  unsigned __int8 *v132;
  int v133;
  int v134;
  unsigned __int8 *v135;
  int v136;
  int v137;
  unsigned __int8 *v138;
  int v139;
  int v140;
  unsigned __int8 *v141;
  int v142;
  int v143;
  unsigned __int8 *v144;
  int v145;
  int v146;
  unsigned __int8 *v147;
  int v148;
  int v149;
  unsigned __int8 *v150;
  int v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unsigned __int8 *v155;
  int v156;
  int v157;
  unsigned __int8 *v158;
  int v159;
  int v160;
  unsigned __int8 *v161;
  int v162;
  int v163;
  unsigned __int8 *v164;
  int v165;
  int v166;
  unsigned __int8 *v167;
  int v168;
  int v169;
  unsigned __int8 *v170;
  int v171;
  int v172;
  unsigned __int8 *v173;
  int v174;
  int v175;
  unsigned __int8 *v176;
  int v177;
  int v178;
  unsigned __int8 *v179;
  int v180;
  int v181;
  unsigned __int8 *v182;
  int v183;
  int v184;
  unsigned __int8 *v185;
  int v186;
  int v187;
  unsigned __int8 *v188;
  int v189;
  int v190;
  unsigned __int8 *v191;
  int v192;
  int v193;
  unsigned __int8 *v194;
  int v195;
  int v196;
  unsigned __int8 *v197;
  int v198;
  unsigned __int8 *v199;
  int v200;
  int v201;
  unsigned __int8 *v202;
  int v203;
  int v204;
  unsigned __int8 *v205;
  int v206;
  int v207;
  unsigned __int8 *v208;
  int v209;
  unsigned __int8 *v210;
  int v211;
  int v212;
  unsigned __int8 *v213;
  int v214;
  int v215;
  unsigned __int8 *v216;
  int v217;
  int v218;
  unsigned __int8 *v219;
  int v220;
  unsigned __int8 *v221;
  int v222;
  int v223;
  unsigned __int8 *v224;
  int v225;
  int v226;
  unsigned __int8 *v227;
  int v228;
  int v229;
  unsigned __int8 *v230;
  int v231;
  uint64_t v232;
  unsigned __int8 *v233;
  unsigned int v234;
  __int16 *v235;
  unsigned int v236;
  unint64_t v237;
  unsigned __int8 *v238;
  unsigned int v239;
  int v240;
  unint64_t v241;
  unint64_t v242;
  uint64_t v243;
  unsigned __int8 *v244;
  int v245;
  int v246;
  unsigned __int8 *v247;
  int v248;
  int v249;
  unsigned __int8 *v250;
  int v251;
  int v252;
  unsigned __int8 *v253;
  int v254;
  int v255;
  unsigned __int8 *v256;
  int v257;
  int v258;
  unsigned __int8 *v259;
  int v260;
  int v261;
  unsigned __int8 *v262;
  int v263;
  int v264;
  unsigned __int8 *v265;
  int v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  unsigned __int8 *v270;
  int v271;
  int v272;
  unsigned __int8 *v273;
  int v274;
  int v275;
  unsigned __int8 *v276;
  int v277;
  int v278;
  unsigned __int8 *v279;
  int v280;
  int v281;
  unsigned __int8 *v282;
  int v283;
  int v284;
  unsigned __int8 *v285;
  int v286;
  int v287;
  unsigned __int8 *v288;
  int v289;
  int v290;
  unsigned __int8 *v291;
  int v292;
  __int128 v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unsigned __int8 *v297;
  int v298;
  int v299;
  unsigned __int8 *v300;
  int v301;
  int v302;
  unsigned __int8 *v303;
  int v304;
  int v305;
  unsigned __int8 *v306;
  int v307;
  int v308;
  unsigned __int8 *v309;
  int v310;
  int v311;
  unsigned __int8 *v312;
  int v313;
  int v314;
  unsigned __int8 *v315;
  int v316;
  int v317;
  unsigned __int8 *v318;
  int v319;
  __int128 v320;
  _QWORD *v321;
  int v322;
  unint64_t v323;
  unsigned __int8 *v324;
  unsigned int v325;
  uint64_t v326;
  int v327;
  int v328;
  int v329;
  int v330;
  int v331;
  uint64_t v332;
  int v333;
  int v334;
  BOOL v335;
  int v336;
  BOOL v337;
  int v338;
  int v340;
  uint64_t v341;
  int v342;
  int v343;
  BOOL v344;
  int v345;
  BOOL v346;
  int v347;
  int v349;
  uint64_t v350;
  int v351;
  int v352;
  _BOOL4 v356;
  _DWORD *v357;
  _DWORD *v358;
  _DWORD *v359;
  char v360;
  unsigned __int8 *v361;
  unsigned int v362;
  int v363;
  unsigned int i;
  int v365;
  unsigned __int8 *v366;
  int v367;
  unsigned int j;
  int v369;
  unsigned __int8 *v370;
  uint64_t v371;
  __int128 v372;
  unint64_t v373;
  unint64_t v374;
  uint64_t v375;
  unsigned __int8 *v376;
  int v377;
  unsigned __int8 *v378;
  unsigned int v379;
  char v380;
  uint64_t v381;
  __n128 v382;
  unint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unsigned __int8 *v386;
  int v387;
  int v388;
  unsigned __int8 *v389;
  int v390;
  int v391;
  uint64_t v392;
  __int16 *v393;
  unsigned int v394;
  BOOL v395;
  __int16 *v396;
  unint64_t v397;
  unint64_t v398;
  uint64_t v399;
  unsigned __int8 *v400;
  int v401;
  int v402;
  unsigned __int8 *v403;
  int v404;
  int v405;
  unsigned __int8 *v406;
  int v407;
  int v408;
  unsigned __int8 *v409;
  int v410;
  int v411;
  unsigned __int8 *v412;
  int v413;
  int v414;
  unsigned __int8 *v415;
  int v416;
  unsigned __int8 *v417;
  int v418;
  int v419;
  unsigned __int8 *v420;
  int v421;
  int v422;
  unsigned __int8 *v423;
  int v424;
  unsigned __int8 *v425;
  int v426;
  unint64_t v427;
  unsigned __int8 *v428;
  int v429;
  unint64_t v430;
  unsigned __int8 *v431;
  char v432;
  unsigned int v433;
  unint64_t v434;
  unsigned __int8 *v435;
  int v436;
  unint64_t v437;
  unint64_t v438;
  uint64_t v439;
  unsigned __int8 *v440;
  int v441;
  unsigned __int8 *v442;
  int v443;
  int v444;
  __int16 *v445;
  unsigned int v446;
  unint64_t v447;
  unint64_t v448;
  uint64_t v449;
  unsigned __int8 *v450;
  int v451;
  int v452;
  unsigned __int8 *v453;
  int v454;
  int v455;
  unsigned __int8 *v456;
  int v457;
  int v458;
  unsigned __int8 *v459;
  int v460;
  int v461;
  unsigned __int8 *v462;
  int v463;
  int v464;
  unsigned __int8 *v465;
  int v466;
  int v467;
  unsigned __int8 *v468;
  int v469;
  int v470;
  unsigned __int8 *v471;
  int v472;
  unsigned __int8 *v473;
  unsigned int v474;
  unint64_t v475;
  unsigned __int8 *v476;
  int v477;
  int v478;
  unsigned __int8 *v479;
  int v480;
  int v481;
  unint64_t v482;
  unint64_t v483;
  uint64_t v484;
  unsigned __int8 *v485;
  unsigned int v486;
  unint64_t v487;
  unsigned __int8 *v488;
  int v489;
  int v490;
  unsigned __int8 *v491;
  int v492;
  int v493;
  unint64_t v494;
  unint64_t v495;
  uint64_t v496;
  unsigned __int8 *v497;
  unsigned int v498;
  unint64_t v499;
  unsigned __int8 *v500;
  int v501;
  int v502;
  unsigned __int8 *v503;
  int v504;
  int v505;
  int v506;
  int v507;
  _BOOL4 v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unsigned __int8 *v512;
  int v513;
  unint64_t v514;
  unsigned __int8 *v515;
  int v516;
  unint64_t v517;
  unsigned __int8 *v518;
  char v519;
  unsigned int v520;
  unint64_t v521;
  unsigned __int8 *v522;
  int v523;
  int v524;
  __int16 *v525;
  int v526;
  _WORD *v527;
  int v528;
  int v529;
  __int16 *v530;
  int v531;
  int v532;
  _WORD *v533;
  int v534;
  __int16 v535;
  int v536;
  int v537;
  int v538;
  int v539;
  int v540;
  int v541;
  uint64_t v542;
  unint64_t v543;
  unint64_t v544;
  unsigned __int8 *v545;
  char v546;
  unsigned int v547;
  unint64_t v548;
  unint64_t v549;
  uint64_t v550;
  unsigned __int8 *v551;
  int v552;
  unint64_t v553;
  unsigned __int8 *v554;
  int v555;
  int v556;
  int v557;
  int v558;
  __int16 *v559;
  int v560;
  __int16 *v561;
  int v562;
  uint64_t v563;
  void *v564;
  unint64_t v565;
  int v566;
  unsigned __int8 *v567;
  int v568;
  int v569;
  unsigned __int8 *v570;
  int v571;
  int v572;
  unsigned __int8 *v573;
  int v574;
  int v575;
  unsigned __int8 *v576;
  int v577;
  int v578;
  unsigned __int8 *v579;
  int v580;
  int v581;
  unsigned __int8 *v582;
  int v583;
  unsigned __int8 *v584;
  unsigned int v585;
  unsigned __int8 *v586;
  unsigned int v587;
  unsigned __int8 *v588;
  unsigned int v589;
  unint64_t v590;
  unint64_t v591;
  uint64_t v592;
  unsigned __int8 *v593;
  __int16 *v594;
  int v595;
  size_t v596;
  uint64_t v597;
  void *v598;
  unint64_t v599;
  int v600;
  unsigned int k;
  int v602;
  unsigned __int8 *v603;
  int v604;
  int v605;
  uint64_t v606;
  unint64_t *v607;
  int v608;
  int v609;
  int v610;
  int32x4_t *v611;
  unsigned __int8 *v612;
  int v613;
  uint64_t v614;
  int v615;
  unsigned int v616;
  uint64_t v617;
  unint64_t v618;
  unsigned int v619;
  unint64_t *v620;
  unint64_t v621;
  signed int v622;
  signed int v623;
  unint64_t *v624;
  int v625;
  BOOL v626;
  int v627;
  int v628;
  unsigned int v629;
  int v630;
  int8x16_t v631;
  int8x16_t v632;
  int32x4_t v633;
  int32x4_t v634;
  int32x4_t v635;
  int32x4_t v636;
  int32x4_t v637;
  int32x4_t v638;
  uint64_t v639;
  int32x4_t v640;
  int32x4_t v641;
  int8x16_t v642;
  uint64_t v643;
  int8x16_t v644;
  uint8x16_t *v645;
  int8x16_t v646;
  int8x16_t v647;
  int8x16_t v648;
  int8x16_t v649;
  int32x4_t v650;
  int32x4_t v651;
  int32x4_t v652;
  uint8x16_t v653;
  uint16x8_t v654;
  uint32x4_t v655;
  uint64x2_t v656;
  uint64x2_t v657;
  uint32x4_t v658;
  uint64x2_t v659;
  uint16x8_t v660;
  uint32x4_t v661;
  uint64x2_t v662;
  uint64x2_t v663;
  uint64x2_t v664;
  uint64x2_t v665;
  uint32x4_t v666;
  uint64x2_t v667;
  uint64x2_t v668;
  int8x16_t v669;
  int8x16_t v670;
  int8x16_t v671;
  int8x16_t v672;
  int8x16_t v673;
  int8x16_t v674;
  int8x16_t v675;
  int8x16_t v676;
  unsigned int v677;
  unint64_t v678;
  unint64_t v679;
  uint64_t v680;
  unsigned __int8 *v681;
  unsigned int v682;
  unint64_t v683;
  unsigned __int8 *v684;
  int v685;
  uint64_t v686;
  int v687;
  int v688;
  int v689;
  int v690;
  unint64_t v691;
  uint64_t v692;
  unsigned int v693;
  unint64_t *v694;
  unint64_t v695;
  signed int v696;
  signed int v697;
  unint64_t *v698;
  int v699;
  BOOL v700;
  int v701;
  BOOL v702;
  uint64_t v703;
  int v704;
  _BOOL4 v705;
  int v706;
  int v707;
  unint64_t v708;
  unsigned int v709;
  uint64_t v710;
  unint64_t *v711;
  unint64_t v712;
  uint64_t v713;
  int32x4_t *v714;
  signed int v715;
  signed int v716;
  unint64_t *v717;
  unsigned __int8 v718;
  unsigned int v719;
  int32x4_t v720;
  int32x4_t v721;
  int v722;
  unsigned int v723;
  unint64_t v724;
  int v725;
  unsigned int v726;
  unint64_t *v727;
  unint64_t v728;
  uint64_t v729;
  uint64_t v730;
  signed int v731;
  signed int v732;
  unint64_t *v733;
  int v734;
  BOOL v735;
  int v736;
  int v738;
  unsigned int v739;
  int v740;
  uint64_t v741;
  int8x16_t v742;
  int8x16_t v743;
  int32x4_t v744;
  int32x4_t v745;
  int32x4_t v746;
  int32x4_t v747;
  int32x4_t v748;
  int32x4_t v749;
  uint64_t v750;
  uint8x16_t *v751;
  int8x16_t v752;
  int8x16_t v753;
  int8x16_t v754;
  int8x16_t v755;
  int8x16_t v756;
  int8x16_t v757;
  int32x4_t v758;
  int32x4_t v759;
  int32x4_t v760;
  uint8x16_t v761;
  uint16x8_t v762;
  uint32x4_t v763;
  uint64x2_t v764;
  uint64x2_t v765;
  uint32x4_t v766;
  uint64x2_t v767;
  uint16x8_t v768;
  uint32x4_t v769;
  uint64x2_t v770;
  uint64x2_t v771;
  uint64x2_t v772;
  uint64x2_t v773;
  uint32x4_t v774;
  uint64x2_t v775;
  uint64x2_t v776;
  int8x16_t v777;
  int8x16_t v778;
  int8x16_t v779;
  int8x16_t v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  int8x16_t v784;
  unsigned int v785;
  uint64_t v786;
  unint64_t v787;
  unsigned int v788;
  uint64_t v789;
  unint64_t v790;
  int v791;
  uint64_t v792;
  char v793;
  uint64_t v794;
  char v795;
  char v796;
  char v797;
  _BYTE *v798;
  uint64_t v799;
  uint64_t v800;
  int v801;
  int v802;
  int v803;
  unsigned int v804;
  uint64_t v805;
  unint64_t v806;
  unsigned int v807;
  unint64_t v808;
  signed int v809;
  signed int v810;
  unint64_t *v811;
  int v812;
  unsigned int v813;
  signed int v814;
  int8x16_t v815;
  int8x16_t v816;
  int32x4_t v817;
  int32x4_t v818;
  int32x4_t v819;
  int32x4_t v820;
  int32x4_t v821;
  int32x4_t v822;
  uint64_t v823;
  int32x4_t v824;
  int32x4_t v825;
  int8x16_t v826;
  uint64_t v827;
  int8x16_t v828;
  uint8x16_t *v829;
  int8x16_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int32x4_t v834;
  int32x4_t v835;
  int32x4_t v836;
  uint8x16_t v837;
  uint16x8_t v838;
  uint32x4_t v839;
  uint64x2_t v840;
  uint64x2_t v841;
  uint32x4_t v842;
  uint64x2_t v843;
  uint16x8_t v844;
  uint32x4_t v845;
  uint64x2_t v846;
  uint64x2_t v847;
  uint64x2_t v848;
  uint64x2_t v849;
  uint32x4_t v850;
  uint64x2_t v851;
  uint64x2_t v852;
  int8x16_t v853;
  int8x16_t v854;
  int8x16_t v855;
  int8x16_t v856;
  int8x16_t v857;
  int8x16_t v858;
  int8x16_t v859;
  int8x16_t v860;
  unsigned int v861;
  int v862;
  BOOL v863;
  int v864;
  BOOL v865;
  int v866;
  BOOL v867;
  int v868;
  int v869;
  unsigned int v870;
  signed int v871;
  uint64_t v872;
  int8x16_t v873;
  int8x16_t v874;
  int32x4_t v875;
  int32x4_t v876;
  int32x4_t v877;
  int32x4_t v878;
  int32x4_t v879;
  int32x4_t v880;
  int32x4_t v881;
  int32x4_t v882;
  uint64_t v883;
  uint8x16_t *v884;
  int8x16_t v885;
  int8x16_t v886;
  int8x16_t v887;
  int8x16_t v888;
  int8x16_t v889;
  int8x16_t v890;
  int32x4_t v891;
  int32x4_t v892;
  int32x4_t v893;
  uint8x16_t v894;
  uint16x8_t v895;
  uint32x4_t v896;
  uint64x2_t v897;
  uint64x2_t v898;
  uint32x4_t v899;
  uint64x2_t v900;
  uint16x8_t v901;
  uint32x4_t v902;
  uint64x2_t v903;
  uint64x2_t v904;
  uint64x2_t v905;
  uint64x2_t v906;
  uint32x4_t v907;
  uint64x2_t v908;
  uint64x2_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t v912;
  int8x16_t v913;
  int8x16_t v914;
  int8x16_t v915;
  int8x16_t v916;
  int8x16_t v917;
  unsigned int v918;
  int v919;
  unsigned int v920;
  signed int v921;
  int8x16_t v922;
  int8x16_t v923;
  int32x4_t v924;
  int32x4_t v925;
  int32x4_t v926;
  int32x4_t v927;
  int32x4_t v928;
  int32x4_t v929;
  uint64_t v930;
  int32x4_t v931;
  int32x4_t v932;
  int8x16_t v933;
  uint64_t v934;
  int8x16_t v935;
  uint8x16_t *v936;
  int8x16_t v937;
  int8x16_t v938;
  int8x16_t v939;
  int8x16_t v940;
  int32x4_t v941;
  int32x4_t v942;
  int32x4_t v943;
  uint8x16_t v944;
  uint16x8_t v945;
  uint32x4_t v946;
  uint64x2_t v947;
  uint64x2_t v948;
  uint32x4_t v949;
  uint64x2_t v950;
  uint16x8_t v951;
  uint32x4_t v952;
  uint64x2_t v953;
  uint64x2_t v954;
  uint64x2_t v955;
  uint64x2_t v956;
  uint32x4_t v957;
  uint64x2_t v958;
  uint64x2_t v959;
  int8x16_t v960;
  int8x16_t v961;
  int8x16_t v962;
  int8x16_t v963;
  int8x16_t v964;
  int8x16_t v965;
  int8x16_t v966;
  int8x16_t v967;
  unsigned int v968;
  unint64_t v969;
  int v970;
  uint64_t v971;
  int v972;
  unsigned int v973;
  unsigned int v974;
  unint64_t v975;
  unsigned int v976;
  int32x4_t *v977;
  int v978;
  uint64_t v979;
  int v980;
  unint64_t v981;
  int v982;
  int v983;
  unint64_t v984;
  int v985;
  _DWORD *v986;
  _BYTE *v987;
  int v988;
  unsigned int v989;
  int v990;
  __int16 *v991;
  uint64_t v992;
  int v993;
  uint64_t v994;
  int v995;
  uint64_t v996;
  void *v997;
  unint64_t v998;
  int v999;
  int v1000;
  uint64_t v1001;
  int v1002;
  __int16 *v1003;
  int v1004;
  uint64_t v1005;
  uint64_t v1006;
  uint64_t v1007;
  uint64_t v1008;
  _QWORD *v1009;
  uint64_t v1010;
  int v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t v1015;
  __int16 *v1016;
  uint64_t v1017;
  uint64_t v1018;
  _QWORD *v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  uint64_t v1023;
  unsigned int *v1024;
  size_t v1025;
  int v1026;
  int v1027;
  uint64_t v1028;
  void *v1029;
  unint64_t v1030;
  int v1031;
  uint64_t v1032;
  unsigned int v1033;
  uint64_t v1034;
  uint64_t v1035;
  uint64_t v1036;
  uint64_t v1037;
  uint64_t v1038;
  unsigned int v1039;
  uint64_t v1040;
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  _DWORD *v1044;
  _DWORD *v1045;
  pthread_mutex_t *(**v1046)(_DWORD *);
  int v1047;
  unint64_t v1048;
  uint64_t v1049;
  int v1050;
  uint64_t v1051;
  uint64_t v1052;
  _QWORD *v1053;
  uint64_t v1054;
  int v1055;
  __int16 *v1056;
  unsigned int v1057;
  uint64_t v1058;
  char *v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  __int128 v1063;
  uint64_t v1064;
  uint64_t v1065;
  int v1066;
  int v1067;
  _DWORD *v1068;
  BOOL v1069;
  uint64_t v1070;
  unsigned int v1071;
  uint64_t v1072;
  uint64_t v1073;
  unint64_t v1074;
  int v1075;
  int v1076;
  uint64_t v1077;
  int v1078;
  int v1079;
  size_t v1080;
  char *v1081;
  uint64_t v1082;
  uint64_t v1083;
  int v1084;
  int v1085;
  uint64_t v1086;
  uint64_t v1087;
  void (**v1088)(void);
  unint64_t v1089;
  uint64_t v1090;
  uint64_t *v1091;
  int v1092;
  uint64_t v1093;
  __int16 v1094;
  _BOOL4 v1095;
  uint64_t v1096;
  uint64_t v1097;
  uint64_t *v1098;
  int v1099;
  unsigned int v1100;
  int v1101;
  uint64_t v1102;
  int v1103;
  int v1104;
  int v1105;
  int v1106;
  int v1107;
  int v1108;
  int v1109;
  uint64_t v1110;
  void (**v1111)(uint64_t);
  uint64_t v1112;
  uint64_t v1113;
  uint64_t v1114;
  uint64_t v1115;
  int32x2_t v1116;
  void *v1117;
  char *v1118;
  int32x2_t *v1119;
  int32x2_t *v1120;
  int32x2_t v1121;
  int32x2_t *v1122;
  const float *v1123;
  int32x2_t v1124;
  unsigned int v1125;
  int32x2_t v1126;
  const float *v1127;
  int32x2_t v1128;
  unint64_t v1129;
  unint64_t *v1130;
  void (*v1131)(uint64_t, unint64_t *, uint64_t, uint64_t);
  uint64_t v1132;
  BOOL v1133;
  int32x4_t v1134;
  int32x4_t v1135;
  uint64_t v1136;
  uint64_t v1137;
  _QWORD *v1138;
  int32x2_t *v1139;
  uint64_t v1140;
  int v1141;
  unint64_t *v1142;
  unint64_t v1143;
  int v1144;
  int v1145;
  int v1146;
  unsigned int v1147;
  unint64_t *v1148;
  uint64_t v1149;
  uint64_t v1150;
  unsigned int v1151;
  int8x16_t v1152;
  int8x16_t v1153;
  int32x4_t v1154;
  int32x4_t v1155;
  int32x4_t v1156;
  uint8x8_t *v1157;
  uint64_t v1158;
  int8x16_t v1159;
  int8x16_t v1160;
  uint8x8_t v1161;
  uint16x8_t v1162;
  uint32x4_t v1163;
  uint64x2_t v1164;
  uint64x2_t v1165;
  uint64x2_t v1166;
  uint32x4_t v1167;
  uint64x2_t v1168;
  uint64x2_t v1169;
  uint64x2_t v1170;
  uint64x2_t v1171;
  uint64x2_t v1172;
  int8x16_t v1173;
  int8x16_t v1174;
  int8x16_t v1175;
  uint64_t v1176;
  uint8x16_t *v1177;
  int8x16_t v1178;
  int8x16_t v1179;
  int8x16_t v1180;
  int8x16_t v1181;
  int32x4_t v1182;
  int32x4_t v1183;
  int8x16_t v1184;
  int32x4_t v1185;
  int32x4_t v1186;
  int8x16_t v1187;
  uint8x16_t v1188;
  uint16x8_t v1189;
  uint32x4_t v1190;
  uint64x2_t v1191;
  uint64x2_t v1192;
  uint32x4_t v1193;
  uint64x2_t v1194;
  uint16x8_t v1195;
  uint32x4_t v1196;
  uint64x2_t v1197;
  uint64x2_t v1198;
  uint64x2_t v1199;
  uint64x2_t v1200;
  uint32x4_t v1201;
  uint64x2_t v1202;
  uint64x2_t v1203;
  uint64x2_t v1204;
  uint64x2_t v1205;
  uint64x2_t v1206;
  uint64x2_t v1207;
  uint64x2_t v1208;
  uint64x2_t v1209;
  uint64x2_t v1210;
  int8x16_t v1211;
  unsigned int v1212;
  uint64_t v1213;
  int64_t v1214;
  uint64_t v1215;
  unint64_t v1216;
  unsigned int v1217;
  uint64_t v1218;
  int v1219;
  uint64_t v1220;
  __int128 v1221;
  uint64_t v1222;
  uint64_t v1223;
  __int128 v1224;
  uint64_t v1225;
  uint64_t v1226;
  __int128 v1227;
  uint64_t v1228;
  int v1229;
  uint64_t v1230;
  int v1231;
  int v1232;
  int v1233;
  int v1234;
  int v1235;
  uint64_t v1236;
  int v1237;
  int v1238;
  int v1239;
  uint64_t v1240;
  int v1241;
  uint64_t v1242;
  int v1243;
  int v1244;
  int v1245;
  int v1246;
  int v1247;
  uint64_t v1248;
  int v1249;
  int v1250;
  _QWORD *v1251;
  _QWORD *v1252;
  _QWORD *v1253;
  uint64_t v1254;
  int v1255;
  uint64_t v1256;
  void (**v1257)(uint64_t);
  int v1258;
  unsigned __int8 *v1259;
  int v1260;
  int v1261;
  unsigned __int8 *v1262;
  int v1263;
  int v1264;
  unsigned __int8 *v1265;
  int v1266;
  int v1267;
  unsigned __int8 *v1268;
  int v1269;
  int v1270;
  unsigned __int8 *v1271;
  int v1272;
  int v1273;
  unsigned __int8 *v1274;
  unsigned int v1275;
  unint64_t v1276;
  unint64_t v1277;
  uint64_t v1278;
  unsigned __int8 *v1279;
  unsigned int v1280;
  unint64_t v1281;
  unsigned __int8 *v1282;
  int v1283;
  char v1284;
  unsigned __int8 *v1285;
  int v1286;
  char v1287;
  unsigned __int8 *v1288;
  int v1289;
  char v1290;
  unsigned __int8 *v1291;
  int v1292;
  char v1293;
  unsigned __int8 *v1294;
  int v1295;
  char v1296;
  unsigned __int8 *v1297;
  int v1298;
  char v1299;
  unsigned __int8 *v1300;
  int v1301;
  char v1302;
  unsigned __int8 *v1303;
  int v1304;
  unint64_t v1305;
  unint64_t v1306;
  uint64_t v1307;
  unsigned __int8 *v1308;
  unsigned int v1309;
  unint64_t v1310;
  unsigned __int8 *v1311;
  int v1312;
  char v1313;
  unsigned __int8 *v1314;
  int v1315;
  char v1316;
  unsigned __int8 *v1317;
  int v1318;
  char v1319;
  unsigned __int8 *v1320;
  int v1321;
  char v1322;
  unsigned __int8 *v1323;
  int v1324;
  char v1325;
  unsigned __int8 *v1326;
  int v1327;
  char v1328;
  unsigned __int8 *v1329;
  int v1330;
  char v1331;
  unsigned __int8 *v1332;
  int v1333;
  unint64_t v1334;
  unint64_t v1335;
  uint64_t v1336;
  unsigned __int8 *v1337;
  unsigned int v1338;
  unint64_t v1339;
  unsigned __int8 *v1340;
  int v1341;
  int v1342;
  unsigned __int8 *v1343;
  int v1344;
  int v1345;
  unsigned __int8 *v1346;
  int v1347;
  int v1348;
  unsigned __int8 *v1349;
  int v1350;
  int v1351;
  unsigned __int8 *v1352;
  int v1353;
  int v1354;
  unsigned __int8 *v1355;
  int v1356;
  int v1357;
  unsigned __int8 *v1358;
  unsigned int v1359;
  unint64_t v1360;
  unint64_t v1361;
  uint64_t v1362;
  unsigned __int8 *v1363;
  unsigned int v1364;
  unint64_t v1365;
  unsigned __int8 *v1366;
  int v1367;
  char v1368;
  unsigned __int8 *v1369;
  int v1370;
  char v1371;
  unsigned __int8 *v1372;
  int v1373;
  char v1374;
  unsigned __int8 *v1375;
  int v1376;
  char v1377;
  unsigned __int8 *v1378;
  int v1379;
  char v1380;
  unsigned __int8 *v1381;
  int v1382;
  char v1383;
  unsigned __int8 *v1384;
  int v1385;
  char v1386;
  unsigned __int8 *v1387;
  int v1388;
  unint64_t v1389;
  unint64_t v1390;
  uint64_t v1391;
  unsigned __int8 *v1392;
  unsigned int v1393;
  unint64_t v1394;
  unsigned __int8 *v1395;
  int v1396;
  char v1397;
  unsigned __int8 *v1398;
  int v1399;
  char v1400;
  unsigned __int8 *v1401;
  int v1402;
  char v1403;
  unsigned __int8 *v1404;
  int v1405;
  char v1406;
  unsigned __int8 *v1407;
  int v1408;
  char v1409;
  unsigned __int8 *v1410;
  int v1411;
  char v1412;
  unsigned __int8 *v1413;
  int v1414;
  char v1415;
  unsigned __int8 *v1416;
  int v1417;
  unint64_t v1418;
  unint64_t v1419;
  uint64_t v1420;
  unsigned __int8 *v1421;
  unsigned int v1422;
  unint64_t v1423;
  unsigned __int8 *v1424;
  int v1425;
  int v1426;
  unsigned __int8 *v1427;
  int v1428;
  int v1429;
  unsigned __int8 *v1430;
  int v1431;
  int v1432;
  unsigned __int8 *v1433;
  int v1434;
  int v1435;
  unsigned __int8 *v1436;
  int v1437;
  int v1438;
  unsigned __int8 *v1439;
  int v1440;
  int v1441;
  unsigned __int8 *v1442;
  unsigned int v1443;
  unint64_t v1444;
  unint64_t v1445;
  uint64_t v1446;
  unsigned __int8 *v1447;
  unsigned int v1448;
  unint64_t v1449;
  unsigned __int8 *v1450;
  int v1451;
  char v1452;
  unsigned __int8 *v1453;
  int v1454;
  char v1455;
  unsigned __int8 *v1456;
  int v1457;
  char v1458;
  unsigned __int8 *v1459;
  int v1460;
  char v1461;
  unsigned __int8 *v1462;
  int v1463;
  char v1464;
  unsigned __int8 *v1465;
  int v1466;
  char v1467;
  unsigned __int8 *v1468;
  int v1469;
  char v1470;
  unsigned __int8 *v1471;
  int v1472;
  unint64_t v1473;
  unint64_t v1474;
  uint64_t v1475;
  unsigned __int8 *v1476;
  unsigned int v1477;
  unint64_t v1478;
  unsigned __int8 *v1479;
  int v1480;
  char v1481;
  unsigned __int8 *v1482;
  int v1483;
  char v1484;
  unsigned __int8 *v1485;
  int v1486;
  char v1487;
  unsigned __int8 *v1488;
  int v1489;
  char v1490;
  unsigned __int8 *v1491;
  int v1492;
  char v1493;
  unsigned __int8 *v1494;
  int v1495;
  char v1496;
  unsigned __int8 *v1497;
  int v1498;
  char v1499;
  unsigned __int8 *v1500;
  int v1501;
  unint64_t v1502;
  unint64_t v1503;
  uint64_t v1504;
  unsigned __int8 *v1505;
  int v1506;
  unint64_t v1507;
  unsigned __int8 *v1508;
  char v1509;
  unsigned int v1510;
  unint64_t v1511;
  unsigned __int8 *v1512;
  int v1513;
  char v1514;
  int v1515;
  unsigned __int8 *v1516;
  int v1517;
  int v1518;
  unsigned __int8 *v1519;
  int v1520;
  int v1521;
  unsigned __int8 *v1522;
  int v1523;
  int v1524;
  unsigned __int8 *v1525;
  int v1526;
  int v1527;
  unsigned __int8 *v1528;
  int v1529;
  int v1530;
  unsigned __int8 *v1531;
  unsigned int v1532;
  unint64_t v1533;
  unint64_t v1534;
  uint64_t v1535;
  unsigned __int8 *v1536;
  unsigned int v1537;
  unint64_t v1538;
  unsigned __int8 *v1539;
  int v1540;
  char v1541;
  unsigned __int8 *v1542;
  int v1543;
  char v1544;
  unsigned __int8 *v1545;
  int v1546;
  char v1547;
  unsigned __int8 *v1548;
  int v1549;
  char v1550;
  unsigned __int8 *v1551;
  int v1552;
  char v1553;
  unsigned __int8 *v1554;
  int v1555;
  char v1556;
  unsigned __int8 *v1557;
  int v1558;
  char v1559;
  unsigned __int8 *v1560;
  int v1561;
  int v1562;
  unint64_t v1563;
  int v1564;
  int v1565;
  int v1566;
  int v1567;
  int v1568;
  __int16 *v1569;
  unsigned __int8 *v1570;
  int v1571;
  __int16 *v1572;
  __int16 *v1573;
  int v1574;
  _WORD *v1575;
  int v1576;
  int v1577;
  __int16 *v1578;
  int v1579;
  int v1580;
  _WORD *v1581;
  int v1582;
  int v1583;
  int v1584;
  int v1585;
  __int16 *v1586;
  int v1587;
  _WORD *v1588;
  int v1589;
  __int16 *v1590;
  int v1591;
  _WORD *v1592;
  int v1593;
  int v1594;
  int v1595;
  int v1596;
  __int16 *v1597;
  int v1598;
  _WORD *v1599;
  int v1600;
  __int16 *v1601;
  int v1602;
  _WORD *v1603;
  int v1604;
  int v1605;
  int v1606;
  int v1607;
  __int16 *v1608;
  int v1609;
  _WORD *v1610;
  int v1611;
  __int16 *v1612;
  int v1613;
  _WORD *v1614;
  int v1615;
  int v1616;
  int v1617;
  int v1618;
  __int16 *v1619;
  int v1620;
  _WORD *v1621;
  int v1622;
  __int16 *v1623;
  int v1624;
  _WORD *v1625;
  int v1626;
  int v1627;
  int v1628;
  int v1629;
  __int16 *v1630;
  int v1631;
  _WORD *v1632;
  int v1633;
  __int16 *v1634;
  int v1635;
  _WORD *v1636;
  int v1637;
  int v1638;
  int v1639;
  int v1640;
  __int16 *v1641;
  int v1642;
  _WORD *v1643;
  int v1644;
  __int16 *v1645;
  int v1646;
  _WORD *v1647;
  int v1648;
  int v1649;
  __int16 *v1650;
  int v1651;
  _WORD *v1652;
  int v1653;
  __int16 *v1654;
  int v1655;
  _WORD *v1656;
  int v1657;
  uint64_t v1658;
  __int16 *v1659;
  _WORD *v1660;
  unint64_t v1661;
  unint64_t v1662;
  uint64_t v1663;
  unsigned __int8 *v1664;
  unsigned int v1665;
  unint64_t v1666;
  unsigned __int8 *v1667;
  int v1668;
  unsigned __int8 *v1669;
  int v1670;
  unsigned __int8 *v1671;
  int v1672;
  unsigned __int8 *v1673;
  int v1674;
  unsigned __int8 *v1675;
  int v1676;
  unsigned __int8 *v1677;
  int v1678;
  unsigned __int8 *v1679;
  int v1680;
  unsigned __int8 *v1681;
  int v1682;
  int v1683;
  unint64_t v1684;
  unint64_t v1685;
  uint64_t v1686;
  unsigned __int8 *v1687;
  unsigned int v1688;
  unint64_t v1689;
  unsigned __int8 *v1690;
  int v1691;
  unsigned __int8 *v1692;
  int v1693;
  unsigned __int8 *v1694;
  int v1695;
  unsigned __int8 *v1696;
  int v1697;
  unsigned __int8 *v1698;
  int v1699;
  unsigned __int8 *v1700;
  int v1701;
  int v1702;
  unint64_t v1703;
  unint64_t v1704;
  uint64_t v1705;
  unsigned __int8 *v1706;
  unsigned int v1707;
  unint64_t v1708;
  unsigned __int8 *v1709;
  int v1710;
  unsigned __int8 *v1711;
  int v1712;
  __int16 v1713;
  unint64_t v1714;
  unsigned __int8 *v1715;
  unsigned int v1716;
  unsigned __int8 *v1717;
  unsigned int v1718;
  unsigned __int8 *v1719;
  unsigned int v1720;
  int v1721;
  unsigned __int8 *v1722;
  int v1723;
  int v1724;
  unsigned __int8 *v1725;
  int v1726;
  int v1727;
  unsigned __int8 *v1728;
  int v1729;
  int v1730;
  unsigned __int8 *v1731;
  int v1732;
  int v1733;
  unsigned __int8 *v1734;
  int v1735;
  int v1736;
  unsigned __int8 *v1737;
  unsigned int v1738;
  unint64_t v1739;
  unint64_t v1740;
  uint64_t v1741;
  unsigned __int8 *v1742;
  unsigned int v1743;
  unint64_t v1744;
  unsigned __int8 *v1745;
  int v1746;
  int v1747;
  unsigned __int8 *v1748;
  int v1749;
  int v1750;
  unsigned __int8 *v1751;
  int v1752;
  int v1753;
  unsigned __int8 *v1754;
  int v1755;
  int v1756;
  unsigned __int8 *v1757;
  int v1758;
  int v1759;
  unsigned __int8 *v1760;
  int v1761;
  int v1762;
  unsigned __int8 *v1763;
  unsigned int v1764;
  char v1765;
  unsigned __int8 *v1766;
  int v1767;
  char v1768;
  unsigned __int8 *v1769;
  int v1770;
  char v1771;
  unsigned __int8 *v1772;
  int v1773;
  char v1774;
  unsigned __int8 *v1775;
  int v1776;
  char v1777;
  unsigned __int8 *v1778;
  int v1779;
  char v1780;
  unsigned __int8 *v1781;
  int v1782;
  char v1783;
  unsigned __int8 *v1784;
  int v1785;
  unint64_t v1786;
  unint64_t v1787;
  uint64_t v1788;
  unsigned __int8 *v1789;
  unsigned int v1790;
  unint64_t v1791;
  unsigned __int8 *v1792;
  int v1793;
  char v1794;
  char v1795;
  unsigned __int8 *v1796;
  int v1797;
  char v1798;
  unsigned __int8 *v1799;
  int v1800;
  char v1801;
  unsigned __int8 *v1802;
  int v1803;
  char v1804;
  unsigned __int8 *v1805;
  int v1806;
  char v1807;
  unsigned __int8 *v1808;
  int v1809;
  char v1810;
  unsigned __int8 *v1811;
  int v1812;
  char v1813;
  unsigned __int8 *v1814;
  int v1815;
  unint64_t v1816;
  unint64_t v1817;
  uint64_t v1818;
  unsigned __int8 *v1819;
  unsigned int v1820;
  unint64_t v1821;
  unsigned __int8 *v1822;
  int v1823;
  char v1824;
  char v1825;
  unsigned __int8 *v1826;
  int v1827;
  char v1828;
  unsigned __int8 *v1829;
  int v1830;
  char v1831;
  unsigned __int8 *v1832;
  int v1833;
  char v1834;
  unsigned __int8 *v1835;
  int v1836;
  char v1837;
  unsigned __int8 *v1838;
  int v1839;
  char v1840;
  unsigned __int8 *v1841;
  int v1842;
  char v1843;
  unsigned __int8 *v1844;
  int v1845;
  char v1846;
  _QWORD *v1847;
  int v1848;
  uint64_t v1849;
  uint64_t v1850;
  uint64_t v1851;
  uint64_t v1852;
  int v1853;
  uint64_t v1854;
  int v1855;
  int v1856;
  int v1857;
  _OWORD *v1858;
  int v1859;
  int v1860;
  uint64_t v1861;
  __int128 *v1862;
  unint64_t *v1863;
  unsigned int *v1864;
  uint64_t v1865;
  uint64_t v1866;
  int v1867;
  int32x2_t v1868;
  int v1869;
  __int16 *v1870;
  int32x4_t v1871;
  uint64_t v1872;
  int v1873;
  int v1874;
  int v1875;
  int *v1876;
  int32x4_t v1877;
  uint64_t v1878;
  uint64_t v1879;
  int v1880;
  __int16 *v1881;
  int v1882;
  unint64_t *v1883;
  uint64_t v1884;
  uint64_t v1885;
  int v1886;
  _BYTE *v1887;
  _DWORD *v1888;
  uint64_t v1889;
  uint64_t *v1890;
  uint64_t v1891;
  __int16 *v1892;
  __int16 *__src;
  _BYTE *v1894;
  unsigned __int8 *v1895;
  unint64_t v1896;
  uint64_t v1897;
  uint64_t (*v1898)(uint64_t);
  _BYTE v1899[80];
  __int128 v1900;
  __int128 v1901;
  __int128 v1902;
  _OWORD v1903[381];
  uint64_t v1904;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v1847 = v5;
  v6 = (uint64_t)v4;
  v7 = v3;
  v8 = (__int16 *)v2;
  v1904 = *MEMORY[0x24BDAC8D0];
  v1894 = 0;
  v1895 = 0;
  v1897 = v2 + 656;
  v1898 = error_handler;
  v1896 = 0;
  v1876 = (int *)(v2 + 656);
  v9 = *(_QWORD *)(v2 + 20664);
  if (v9)
  {
    if (v4 - v3 >= 80)
      v10 = 80;
    else
      v10 = v4 - v3;
    v11 = v1899;
    ((void (*)(_QWORD, _BYTE *, _BYTE *, uint64_t))v9)(*(_QWORD *)(v2 + 20672), v3, v1899, v10);
    v12 = &v1899[(int)v10];
    v9 = v1896;
  }
  else
  {
    v11 = v3;
    v12 = v4;
  }
  v1894 = v11;
  v1895 = v12;
  v13 = *((_QWORD *)v8 + 2363);
  *((_DWORD *)v8 + 482) = *((_DWORD *)v8 + 483);
  *((_BYTE *)v8 + 1949) = *((_BYTE *)v8 + 1948);
  v14 = &v11[v9 >> 3];
  if (v14 >= v12)
  {
    v15 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v15 = 0;
      v12 = v1895;
      v9 = v1896;
      v11 = v1894;
    }
  }
  else
  {
    v15 = (*v14 >> (~(_BYTE)v9++ & 7)) & 1;
    v1896 = v9;
  }
  v16 = 2 * v15;
  v17 = &v11[v9 >> 3];
  if (v17 < v12)
  {
    v18 = (*v17 >> (~(_BYTE)v9 & 7)) & 1;
    v1896 = v9 + 1;
    if ((v18 | v16) == 2)
      goto LABEL_14;
    goto LABEL_13;
  }
  if (v1898)
  {
    v1898(v1897);
    if (v16 != 2)
      goto LABEL_13;
  }
  else if (v16 != 2)
  {
LABEL_13:
    vpx_internal_error((uint64_t)v1876, 5, "Invalid frame marker");
  }
LABEL_14:
  v19 = v1896;
  v20 = &v1894[v1896 >> 3];
  if (v20 < v1895)
  {
    v21 = (*v20 >> (~(_BYTE)v1896 & 7)) & 1;
    v19 = v1896 + 1;
    v1896 = v19;
    v22 = v8 + 2700;
    v23 = &v1894[v19 >> 3];
    if (v23 < v1895)
      goto LABEL_16;
LABEL_23:
    if (v1898)
      v1898(v1897);
    v1892 = v8 + 2774;
    v25 = v13 + 24;
    v26 = v21;
    goto LABEL_17;
  }
  if (v1898)
  {
    v1898(v1897);
    v21 = 0;
    v19 = v1896;
    v22 = v8 + 2700;
    v23 = &v1894[v1896 >> 3];
    if (v23 >= v1895)
      goto LABEL_23;
  }
  else
  {
    v21 = 0;
    v22 = v8 + 2700;
    v23 = &v1894[v1896 >> 3];
    if (v23 >= v1895)
      goto LABEL_23;
  }
LABEL_16:
  v24 = (*v23 >> (~(_BYTE)v19 & 7)) & 1;
  v1896 = v19 + 1;
  v1892 = v8 + 2774;
  v25 = v13 + 24;
  v26 = v21 | (2 * v24);
  if (v26 != 3)
  {
LABEL_17:
    v1888 = v22 + 6706;
LABEL_32:
    *((_DWORD *)v22 + 3353) = v26;
    goto LABEL_33;
  }
  v27 = &v1894[v1896 >> 3];
  if (v27 >= v1895)
  {
    if (v1898)
      v1898(v1897);
    v1888 = v22 + 6706;
    v26 = 3;
    goto LABEL_32;
  }
  v28 = *v27 >> (~(_BYTE)v1896++ & 7);
  v1888 = v22 + 6706;
  *((_DWORD *)v22 + 3353) = (v28 & 1) + 3;
  if ((v28 & 1) != 0)
    vpx_internal_error((uint64_t)v1876, 5, "Unsupported bitstream profile");
LABEL_33:
  v29 = (unint64_t)v1895;
  v30 = v1896;
  v31 = (uint64_t)v1894;
  v32 = &v1894[v1896 >> 3];
  __src = v8;
  v1850 = v6;
  if (v32 >= v1895)
  {
    if (v1898)
    {
      v1898(v1897);
      v29 = (unint64_t)v1895;
      v30 = v1896;
      v31 = (uint64_t)v1894;
    }
    *((_DWORD *)v8 + 486) = 0;
    v34 = v30;
  }
  else
  {
    v33 = *v32 >> (~(_BYTE)v1896 & 7);
    v34 = ++v1896;
    *((_DWORD *)v8 + 486) = v33 & 1;
    if ((v33 & 1) != 0)
    {
      v35 = (unsigned __int8 *)(v31 + (v34 >> 3));
      if ((unint64_t)v35 >= v29)
      {
        if (v1898)
        {
          v1898(v1897);
          v29 = (unint64_t)v1895;
          v34 = v1896;
          v31 = (uint64_t)v1894;
          v37 = 0;
          v38 = &v1894[v1896 >> 3];
          if (v38 < v1895)
            goto LABEL_37;
        }
        else
        {
          v37 = 0;
          v38 = (unsigned __int8 *)(v31 + (v34 >> 3));
          if ((unint64_t)v38 < v29)
            goto LABEL_37;
        }
      }
      else
      {
        v36 = (*v35 >> (~(_BYTE)v34 & 7)) & 1;
        v34 = v30 + 2;
        v1896 = v30 + 2;
        v37 = 4 * v36;
        v38 = (unsigned __int8 *)(v31 + ((v30 + 2) >> 3));
        if ((unint64_t)v38 < v29)
        {
LABEL_37:
          v39 = (*v38 >> (~(_BYTE)v34++ & 7)) & 1;
          v1896 = v34;
LABEL_100:
          v75 = v37 | (2 * v39);
          v76 = (unsigned __int8 *)(v31 + (v34 >> 3));
          if ((unint64_t)v76 >= v29)
          {
            v77 = (int)v1898;
            if (v1898)
            {
              v1898(v1897);
              v77 = 0;
            }
          }
          else
          {
            v77 = (*v76 >> (~(_BYTE)v34 & 7)) & 1;
            v1896 = v34 + 1;
          }
          v78 = *(_DWORD *)&v8[2 * (v77 | v75) + 504];
          if ((v78 & 0x80000000) != 0 || *(int *)(v25 + 224 * v78) <= 0)
            vpx_internal_error((uint64_t)v1876, 5, "Buffer %d does not contain a decoded frame", v78);
          v79 = *((_DWORD *)v8 + 400);
          if ((v79 & 0x80000000) == 0)
          {
            v80 = (int *)(v25 + 224 * v79);
            if (*v80 >= 1)
              --*v80;
          }
          v81 = 0;
          *((_DWORD *)v8 + 400) = v78;
          ++*(_DWORD *)(v25 + 224 * (int)v78);
          *((_DWORD *)v22 + 3387) = 0;
          *((_DWORD *)v8 + 1346) = 0;
          *((_DWORD *)v8 + 484) = 1;
          v82 = v1892;
          goto LABEL_891;
        }
      }
      v39 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v39 = 0;
        v29 = (unint64_t)v1895;
        v34 = v1896;
        v31 = (uint64_t)v1894;
      }
      goto LABEL_100;
    }
  }
  v40 = (unsigned __int8 *)(v31 + (v34 >> 3));
  if ((unint64_t)v40 >= v29)
  {
    v41 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v41 = 0;
      v29 = (unint64_t)v1895;
      v34 = v1896;
      v31 = (uint64_t)v1894;
    }
  }
  else
  {
    v41 = (*v40 >> (~(_BYTE)v34++ & 7)) & 1;
    v1896 = v34;
  }
  *((_DWORD *)v8 + 483) = v41;
  v42 = (unsigned __int8 *)(v31 + (v34 >> 3));
  if ((unint64_t)v42 >= v29)
  {
    v43 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v43 = 0;
      v29 = (unint64_t)v1895;
      v34 = v1896;
      v31 = (uint64_t)v1894;
    }
  }
  else
  {
    v43 = (*v42 >> (~(_BYTE)v34++ & 7)) & 1;
    v1896 = v34;
  }
  *((_DWORD *)v8 + 484) = v43;
  v44 = (unsigned __int8 *)(v31 + (v34 >> 3));
  if ((unint64_t)v44 >= v29)
  {
    v45 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v45 = 0;
    }
  }
  else
  {
    v45 = (*v44 >> (~(_BYTE)v34 & 7)) & 1;
    v1896 = v34 + 1;
  }
  v46 = v8 + 470;
  *((_DWORD *)v22 + 3370) = v45;
  if (*((_DWORD *)v8 + 483))
  {
    if (*((_DWORD *)v8 + 484))
    {
      v47 = 0;
    }
    else
    {
      v53 = &v1894[v1896 >> 3];
      if (v53 >= v1895)
      {
        v47 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v47 = 0;
          v45 = *((_DWORD *)v22 + 3370);
        }
      }
      else
      {
        v47 = (*v53 >> (~(_BYTE)v1896++ & 7)) & 1;
      }
    }
    *((_BYTE *)v8 + 1948) = v47;
    if (v45)
    {
      *((_DWORD *)v8 + 489) = 0;
      if (v47)
        goto LABEL_115;
LABEL_155:
      v119 = *((_DWORD *)v22 + 3822);
      if (v119 == 1)
        goto LABEL_574;
      v121 = (unint64_t)v1895;
      v120 = v1896;
      v122 = (uint64_t)v1894;
      v123 = &v1894[v1896 >> 3];
      if (v123 >= v1895)
      {
        v124 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v124 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v124 = (*v123 >> (~(_BYTE)v1896 & 7)) & 1;
        v120 = ++v1896;
      }
      v178 = v124 << 7;
      v179 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v179 >= v121)
      {
        v180 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v180 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v180 = (*v179 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v181 = v178 | (v180 << 6);
      v182 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v182 >= v121)
      {
        v183 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v183 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v183 = (*v182 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v184 = v181 | (32 * v183);
      v185 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v185 >= v121)
      {
        v186 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v186 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v186 = (*v185 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v187 = v184 | (16 * v186);
      v188 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v188 >= v121)
      {
        v189 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v189 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v189 = (*v188 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v190 = v187 | (8 * v189);
      v191 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v191 >= v121)
      {
        v192 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v192 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v192 = (*v191 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v193 = v190 | (4 * v192);
      v194 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v194 >= v121)
      {
        v195 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v195 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v195 = (*v194 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v196 = v193 | (2 * v195);
      v197 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v197 >= v121)
      {
        v198 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v198 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v198 = (*v197 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      *((_DWORD *)v22 + 3387) = v198 | v196;
      v199 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v199 >= v121)
      {
        v200 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v200 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v200 = (*v199 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v201 = 4 * v200;
      v202 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v202 >= v121)
      {
        v203 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v203 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v203 = (*v202 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v204 = v201 | (2 * v203);
      v205 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v205 >= v121)
      {
        v206 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v206 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v206 = (*v205 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v207 = *(_DWORD *)&v8[2 * (v206 | v204) + 504];
      *((_DWORD *)v8 + 268) = v207;
      *((_QWORD *)v8 + 135) = v25 + 224 * v207 + 64;
      v208 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v208 >= v121)
      {
        v209 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v209 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v209 = (*v208 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      *((_DWORD *)v8 + 1342) = v209;
      v210 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v210 >= v121)
      {
        v211 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v211 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v211 = (*v210 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v212 = 4 * v211;
      v213 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v213 >= v121)
      {
        v214 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v214 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v214 = (*v213 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v215 = v212 | (2 * v214);
      v216 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v216 >= v121)
      {
        v217 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v217 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v217 = (*v216 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v218 = *(_DWORD *)&v8[2 * (v217 | v215) + 504];
      *((_DWORD *)v8 + 312) = v218;
      *((_QWORD *)v8 + 157) = v25 + 224 * v218 + 64;
      v219 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v219 >= v121)
      {
        v220 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v220 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v220 = (*v219 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      *((_DWORD *)v8 + 1343) = v220;
      v221 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v221 >= v121)
      {
        v222 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v222 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v222 = (*v221 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v223 = 4 * v222;
      v224 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v224 >= v121)
      {
        v225 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v225 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v225 = (*v224 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v226 = v223 | (2 * v225);
      v227 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v227 >= v121)
      {
        v228 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v228 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v228 = (*v227 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      v229 = *(_DWORD *)&v8[2 * (v228 | v226) + 504];
      *((_DWORD *)v8 + 356) = v229;
      *((_QWORD *)v8 + 179) = v25 + 224 * v229 + 64;
      v230 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v230 >= v121)
      {
        v231 = (int)v1898;
        if (v1898)
        {
          v1898(v1897);
          v231 = 0;
          v121 = (unint64_t)v1895;
          v120 = v1896;
          v122 = (uint64_t)v1894;
        }
      }
      else
      {
        v231 = (*v230 >> (~(_BYTE)v120++ & 7)) & 1;
        v1896 = v120;
      }
      *((_DWORD *)v8 + 1344) = v231;
      v232 = *((_QWORD *)v8 + 2363);
      v233 = (unsigned __int8 *)(v122 + (v120 >> 3));
      if ((unint64_t)v233 >= v121)
      {
        if (v1898)
          v1898(v1897);
      }
      else
      {
        v234 = *v233;
        v1896 = v120 + 1;
        if (((v234 >> (~(_BYTE)v120 & 7)) & 1) != 0)
        {
          if (*((_DWORD *)v8 + 268) != -1)
          {
            v235 = v22;
            v236 = 0;
            goto LABEL_479;
          }
          vpx_internal_error((uint64_t)v1876, 7, "Failed to decode frame size");
          v237 = v1896;
          v238 = &v1894[v1896 >> 3];
          if (v238 >= v1895)
            goto LABEL_473;
          goto LABEL_318;
        }
      }
      v237 = v1896;
      v238 = &v1894[v1896 >> 3];
      if (v238 >= v1895)
      {
LABEL_473:
        if (v1898)
          v1898(v1897);
        goto LABEL_475;
      }
LABEL_318:
      v239 = *v238;
      v1896 = v237 + 1;
      if (((v239 >> (~(_BYTE)v237 & 7)) & 1) != 0)
      {
        if (*((_DWORD *)v8 + 312) != -1)
        {
          v235 = v22;
          v236 = 1;
          goto LABEL_479;
        }
        vpx_internal_error((uint64_t)v1876, 7, "Failed to decode frame size");
        v323 = v1896;
        v324 = &v1894[v1896 >> 3];
        if (v324 < v1895)
          goto LABEL_476;
        goto LABEL_482;
      }
LABEL_475:
      v323 = v1896;
      v324 = &v1894[v1896 >> 3];
      if (v324 < v1895)
      {
LABEL_476:
        v325 = *v324;
        v1896 = v323 + 1;
        if (((v325 >> (~(_BYTE)v323 & 7)) & 1) != 0)
        {
          if (*((_DWORD *)v8 + 356) != -1)
          {
            v235 = v22;
            v236 = 2;
LABEL_479:
            v326 = *(_QWORD *)&v8[88 * v236 + 540];
            v327 = *(_DWORD *)(v326 + 8);
            v328 = *(_DWORD *)(v326 + 12);
            if (v327 < 1)
              goto LABEL_487;
            goto LABEL_486;
          }
          vpx_internal_error((uint64_t)v1876, 7, "Failed to decode frame size");
        }
LABEL_485:
        v235 = v22;
        v327 = vpx_rb_read_literal(&v1894, 16) + 1;
        v328 = vpx_rb_read_literal(&v1894, 16) + 1;
        if (v327 < 1)
        {
LABEL_487:
          vpx_internal_error((uint64_t)v1876, 7, "Invalid frame size");
LABEL_488:
          v329 = 2 * v327;
          v330 = 2 * v328;
          v331 = *((_DWORD *)__src + 268);
          if (v331 == -1)
          {
            v340 = 0;
            if (*((_DWORD *)__src + 312) != -1)
              goto LABEL_502;
          }
          else
          {
            v332 = *((_QWORD *)__src + 135);
            v334 = *(_DWORD *)(v332 + 8);
            v333 = *(_DWORD *)(v332 + 12);
            v335 = v329 < v334 || v330 < v333;
            v336 = 16 * v334;
            v337 = !v335 && v327 <= v336;
            v338 = 16 * v333;
            v340 = v337 && v328 <= v338;
            if (*((_DWORD *)__src + 312) != -1)
            {
LABEL_502:
              v341 = *((_QWORD *)__src + 157);
              v343 = *(_DWORD *)(v341 + 8);
              v342 = *(_DWORD *)(v341 + 12);
              v344 = v329 < v343 || v330 < v342;
              v345 = 16 * v343;
              v346 = !v344 && v327 <= v345;
              v347 = 16 * v342;
              v349 = v346 && v328 <= v347;
              v340 |= v349;
              if (*((_DWORD *)__src + 356) != -1)
              {
LABEL_515:
                v350 = *((_QWORD *)__src + 179);
                v352 = *(_DWORD *)(v350 + 8);
                v351 = *(_DWORD *)(v350 + 12);
                v356 = v329 >= v352 && v330 >= v351 && v327 <= 16 * v352 && v328 <= 16 * v351;
                if (v340 | v356)
                {
LABEL_529:
                  if (v331 == -1
                    || (v357 = (_DWORD *)*((_QWORD *)__src + 135), v357[32] != *((_DWORD *)v235 + 3354))
                    || v357[30] != *((_DWORD *)__src + 243)
                    || v357[31] != *((_DWORD *)__src + 244))
                  {
                    vpx_internal_error((uint64_t)v1876, 7, "Referenced frame has incompatible color format");
                  }
                  if (*((_DWORD *)__src + 312) == -1
                    || (v358 = (_DWORD *)*((_QWORD *)__src + 157), v358[32] != *((_DWORD *)v235 + 3354))
                    || v358[30] != *((_DWORD *)__src + 243)
                    || v358[31] != *((_DWORD *)__src + 244))
                  {
                    vpx_internal_error((uint64_t)v1876, 7, "Referenced frame has incompatible color format");
                  }
                  if (*((_DWORD *)__src + 356) == -1
                    || (v359 = (_DWORD *)*((_QWORD *)__src + 179), v359[32] != *((_DWORD *)v235 + 3354))
                    || v359[30] != *((_DWORD *)__src + 243)
                    || v359[31] != *((_DWORD *)__src + 244))
                  {
                    vpx_internal_error((uint64_t)v1876, 7, "Referenced frame has incompatible color format");
                  }
                  resize_context_buffers(v1876, v327, v328);
                  v46[2] = v46[1];
                  v360 = v1896;
                  v361 = &v1894[v1896 >> 3];
                  if (v361 >= v1895)
                  {
                    v8 = __src;
                    v22 = v235;
                    if (v1898)
                      v1898(v1897);
                  }
                  else
                  {
                    v362 = *v361;
                    ++v1896;
                    v8 = __src;
                    v22 = v235;
                    if (((v362 >> (~v360 & 7)) & 1) != 0)
                    {
                      v363 = 0;
                      for (i = 17; i > 1; --i)
                      {
                        while (1)
                        {
                          v366 = &v1894[v1896 >> 3];
                          if (v366 >= v1895)
                            break;
                          v365 = (*v366 >> (~(_BYTE)v1896++ & 7)) & 1;
                          v363 |= v365 << (i-- - 2);
                          if (i <= 1)
                            goto LABEL_552;
                        }
                        if (v1898)
                          v1898(v1897);
                      }
LABEL_552:
                      v367 = 0;
                      *((_DWORD *)v46 + 4) = v363 + 1;
                      for (j = 17; j > 1; --j)
                      {
                        while (1)
                        {
                          v370 = &v1894[v1896 >> 3];
                          if (v370 >= v1895)
                            break;
                          v369 = (*v370 >> (~(_BYTE)v1896++ & 7)) & 1;
                          v367 |= v369 << (j-- - 2);
                          if (j <= 1)
                            goto LABEL_558;
                        }
                        if (v1898)
                          v1898(v1897);
                      }
LABEL_558:
                      *((_DWORD *)__src + 240) = v367 + 1;
                    }
                  }
                  if (vpx_realloc_frame_buffer(*((_QWORD *)v8 + 2363) + 224 * *((int *)v8 + 400) + 88, *((_DWORD *)v8 + 237), *((_DWORD *)v8 + 238), *((_DWORD *)v8 + 243), *((_DWORD *)v8 + 244), *((_DWORD *)v8 + 245), 32, *((_DWORD *)v22 + 3374), (_QWORD *)(v232 + 224 * *((int *)v8 + 400) + 64), *(uint64_t (**)(uint64_t, size_t, _QWORD *))(v232 + 8), *(_QWORD *)v232))vpx_internal_error((uint64_t)v1876, 2, "Failed to allocate frame buffer");
                  v371 = v232 + 224 * *((int *)v8 + 400);
                  *(_BYTE *)(v371 + 48) = 0;
                  *(_QWORD *)&v372 = v46[4];
                  DWORD2(v372) = *((_DWORD *)v22 + 3354);
                  HIDWORD(v372) = *((_DWORD *)v8 + 235);
                  *(_OWORD *)(v371 + 208) = v372;
                  *(_DWORD *)(v371 + 224) = *((_DWORD *)v8 + 236);
                  *(_QWORD *)(v371 + 228) = v46[2];
                  v374 = (unint64_t)v1895;
                  v373 = v1896;
                  v375 = (uint64_t)v1894;
                  v376 = &v1894[v1896 >> 3];
                  if (v376 >= v1895)
                  {
                    v377 = (int)v1898;
                    if (v1898)
                    {
                      v1898(v1897);
                      v377 = 0;
                      v374 = (unint64_t)v1895;
                      v373 = v1896;
                      v375 = (uint64_t)v1894;
                    }
                  }
                  else
                  {
                    v377 = (*v376 >> (~(_BYTE)v1896 & 7)) & 1;
                    v373 = ++v1896;
                  }
                  *((_DWORD *)v8 + 488) = v377;
                  v378 = (unsigned __int8 *)(v375 + (v373 >> 3));
                  if ((unint64_t)v378 >= v374)
                  {
                    if (v1898)
                      v1898(v1897);
                  }
                  else
                  {
                    v379 = *v378;
                    v1896 = v373 + 1;
                    if (((v379 >> (~(_BYTE)v373 & 7)) & 1) != 0)
                    {
                      v380 = 4;
LABEL_573:
                      *((_BYTE *)v8 + 2212) = v380;
                      vp9_setup_scale_factors_for_frame((uint64_t)(v8 + 544), *(_DWORD *)(*((_QWORD *)v8 + 135) + 8), *(_DWORD *)(*((_QWORD *)v8 + 135) + 12), *((_DWORD *)v8 + 237), *((_DWORD *)v8 + 238), *((_DWORD *)v8 + 245));
                      vp9_setup_scale_factors_for_frame((uint64_t)(v8 + 632), *(_DWORD *)(*((_QWORD *)v8 + 157) + 8), *(_DWORD *)(*((_QWORD *)v8 + 157) + 12), *((_DWORD *)v8 + 237), *((_DWORD *)v8 + 238), *((_DWORD *)v8 + 245));
                      vp9_setup_scale_factors_for_frame((uint64_t)(v8 + 720), *(_DWORD *)(*((_QWORD *)v8 + 179) + 8), *(_DWORD *)(*((_QWORD *)v8 + 179) + 12), *((_DWORD *)v8 + 237), *((_DWORD *)v8 + 238), *((_DWORD *)v8 + 245));
                      v119 = *((_DWORD *)v22 + 3822);
                      goto LABEL_574;
                    }
                  }
                  v380 = byte_208F466B8[(int)vpx_rb_read_literal(&v1894, 2)];
                  goto LABEL_573;
                }
LABEL_528:
                vpx_internal_error((uint64_t)v1876, 7, "Referenced frame has invalid size");
                v331 = *((_DWORD *)__src + 268);
                goto LABEL_529;
              }
LABEL_942:
              if (v340)
                goto LABEL_529;
              goto LABEL_528;
            }
          }
          if (*((_DWORD *)__src + 356) != -1)
            goto LABEL_515;
          goto LABEL_942;
        }
LABEL_486:
        if (v328 > 0)
          goto LABEL_488;
        goto LABEL_487;
      }
LABEL_482:
      if (v1898)
        v1898(v1897);
      goto LABEL_485;
    }
    v89 = (unint64_t)v1895;
    v88 = v1896;
    v90 = (uint64_t)v1894;
    v91 = &v1894[v1896 >> 3];
    if (v91 >= v1895)
    {
      v92 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v92 = 0;
        v89 = (unint64_t)v1895;
        v88 = v1896;
        v90 = (uint64_t)v1894;
      }
    }
    else
    {
      v92 = (*v91 >> (~(_BYTE)v1896 & 7)) & 1;
      v88 = ++v1896;
    }
    v114 = 2 * v92;
    v115 = (unsigned __int8 *)(v90 + (v88 >> 3));
    if ((unint64_t)v115 >= v89)
    {
      if (v1898)
      {
        v1898(v1897);
        v125 = *((unsigned __int8 *)v8 + 1948);
        *((_DWORD *)v8 + 489) = v114;
        if (!v125)
          goto LABEL_155;
      }
      else
      {
        v240 = *((unsigned __int8 *)v8 + 1948);
        *((_DWORD *)v8 + 489) = v114;
        if (!v240)
          goto LABEL_155;
      }
    }
    else
    {
      v116 = (*v115 >> (~(_BYTE)v88 & 7)) & 1;
      v1896 = v88 + 1;
      v117 = v116 | v114;
      v118 = *((unsigned __int8 *)v8 + 1948);
      *((_DWORD *)v8 + 489) = v117;
      if (!v118)
        goto LABEL_155;
    }
LABEL_115:
    v84 = (unint64_t)v1895;
    v83 = v1896;
    v85 = (uint64_t)v1894;
    v86 = &v1894[v1896 >> 3];
    if (v86 >= v1895)
    {
      v87 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v87 = 0;
        v84 = (unint64_t)v1895;
        v83 = v1896;
        v85 = (uint64_t)v1894;
      }
    }
    else
    {
      v87 = (*v86 >> (~(_BYTE)v1896 & 7)) & 1;
      v83 = ++v1896;
    }
    v93 = v87 << 7;
    v94 = (unsigned __int8 *)(v85 + (v83 >> 3));
    if ((unint64_t)v94 >= v84)
    {
      v95 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v95 = 0;
        v84 = (unint64_t)v1895;
        v83 = v1896;
        v85 = (uint64_t)v1894;
      }
    }
    else
    {
      v95 = (*v94 >> (~(_BYTE)v83++ & 7)) & 1;
      v1896 = v83;
    }
    v96 = v93 | (v95 << 6);
    v97 = (unsigned __int8 *)(v85 + (v83 >> 3));
    if ((unint64_t)v97 >= v84)
    {
      v98 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v98 = 0;
        v84 = (unint64_t)v1895;
        v83 = v1896;
        v85 = (uint64_t)v1894;
      }
    }
    else
    {
      v98 = (*v97 >> (~(_BYTE)v83++ & 7)) & 1;
      v1896 = v83;
    }
    v99 = v96 | (32 * v98);
    v100 = (unsigned __int8 *)(v85 + (v83 >> 3));
    if ((unint64_t)v100 >= v84)
    {
      v101 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v101 = 0;
        v84 = (unint64_t)v1895;
        v83 = v1896;
        v85 = (uint64_t)v1894;
      }
    }
    else
    {
      v101 = (*v100 >> (~(_BYTE)v83++ & 7)) & 1;
      v1896 = v83;
    }
    v102 = v99 | (16 * v101);
    v103 = (unsigned __int8 *)(v85 + (v83 >> 3));
    if ((unint64_t)v103 >= v84)
    {
      v104 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v104 = 0;
        v84 = (unint64_t)v1895;
        v83 = v1896;
        v85 = (uint64_t)v1894;
      }
    }
    else
    {
      v104 = (*v103 >> (~(_BYTE)v83++ & 7)) & 1;
      v1896 = v83;
    }
    v105 = v102 | (8 * v104);
    v106 = (unsigned __int8 *)(v85 + (v83 >> 3));
    if ((unint64_t)v106 >= v84)
    {
      v107 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v107 = 0;
        v84 = (unint64_t)v1895;
        v83 = v1896;
        v85 = (uint64_t)v1894;
      }
    }
    else
    {
      v107 = (*v106 >> (~(_BYTE)v83++ & 7)) & 1;
      v1896 = v83;
    }
    v108 = v105 | (4 * v107);
    v109 = (unsigned __int8 *)(v85 + (v83 >> 3));
    if ((unint64_t)v109 >= v84)
    {
      v110 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v110 = 0;
        v84 = (unint64_t)v1895;
        v83 = v1896;
        v85 = (uint64_t)v1894;
      }
    }
    else
    {
      v110 = (*v109 >> (~(_BYTE)v83++ & 7)) & 1;
      v1896 = v83;
    }
    v111 = v108 | (2 * v110);
    v112 = (unsigned __int8 *)(v85 + (v83 >> 3));
    if ((unint64_t)v112 >= v84)
    {
      if (v1898)
      {
        v1898(v1897);
        if (v111 != 73)
          goto LABEL_358;
      }
      else if (v111 != 73)
      {
        goto LABEL_358;
      }
    }
    else
    {
      v113 = (*v112 >> (~(_BYTE)v83 & 7)) & 1;
      v1896 = v83 + 1;
      if ((v113 | v111) != 0x49)
        goto LABEL_358;
    }
    v127 = (unint64_t)v1895;
    v126 = v1896;
    v128 = (uint64_t)v1894;
    v129 = &v1894[v1896 >> 3];
    if (v129 >= v1895)
    {
      v130 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v130 = 0;
        v127 = (unint64_t)v1895;
        v126 = v1896;
        v128 = (uint64_t)v1894;
      }
    }
    else
    {
      v130 = (*v129 >> (~(_BYTE)v1896 & 7)) & 1;
      v126 = ++v1896;
    }
    v131 = v130 << 7;
    v132 = (unsigned __int8 *)(v128 + (v126 >> 3));
    if ((unint64_t)v132 >= v127)
    {
      v133 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v133 = 0;
        v127 = (unint64_t)v1895;
        v126 = v1896;
        v128 = (uint64_t)v1894;
      }
    }
    else
    {
      v133 = (*v132 >> (~(_BYTE)v126++ & 7)) & 1;
      v1896 = v126;
    }
    v134 = v131 | (v133 << 6);
    v135 = (unsigned __int8 *)(v128 + (v126 >> 3));
    if ((unint64_t)v135 >= v127)
    {
      v136 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v136 = 0;
        v127 = (unint64_t)v1895;
        v126 = v1896;
        v128 = (uint64_t)v1894;
      }
    }
    else
    {
      v136 = (*v135 >> (~(_BYTE)v126++ & 7)) & 1;
      v1896 = v126;
    }
    v137 = v134 | (32 * v136);
    v138 = (unsigned __int8 *)(v128 + (v126 >> 3));
    if ((unint64_t)v138 >= v127)
    {
      v139 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v139 = 0;
        v127 = (unint64_t)v1895;
        v126 = v1896;
        v128 = (uint64_t)v1894;
      }
    }
    else
    {
      v139 = (*v138 >> (~(_BYTE)v126++ & 7)) & 1;
      v1896 = v126;
    }
    v140 = v137 | (16 * v139);
    v141 = (unsigned __int8 *)(v128 + (v126 >> 3));
    if ((unint64_t)v141 >= v127)
    {
      v142 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v142 = 0;
        v127 = (unint64_t)v1895;
        v126 = v1896;
        v128 = (uint64_t)v1894;
      }
    }
    else
    {
      v142 = (*v141 >> (~(_BYTE)v126++ & 7)) & 1;
      v1896 = v126;
    }
    v143 = v140 | (8 * v142);
    v144 = (unsigned __int8 *)(v128 + (v126 >> 3));
    if ((unint64_t)v144 >= v127)
    {
      v145 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v145 = 0;
        v127 = (unint64_t)v1895;
        v126 = v1896;
        v128 = (uint64_t)v1894;
      }
    }
    else
    {
      v145 = (*v144 >> (~(_BYTE)v126++ & 7)) & 1;
      v1896 = v126;
    }
    v146 = v143 | (4 * v145);
    v147 = (unsigned __int8 *)(v128 + (v126 >> 3));
    if ((unint64_t)v147 >= v127)
    {
      v148 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v148 = 0;
        v127 = (unint64_t)v1895;
        v126 = v1896;
        v128 = (uint64_t)v1894;
      }
    }
    else
    {
      v148 = (*v147 >> (~(_BYTE)v126++ & 7)) & 1;
      v1896 = v126;
    }
    v149 = v146 | (2 * v148);
    v150 = (unsigned __int8 *)(v128 + (v126 >> 3));
    if ((unint64_t)v150 >= v127)
    {
      if (v1898)
      {
        v1898(v1897);
        if (v149 != 131)
          goto LABEL_358;
      }
      else if (v149 != 131)
      {
        goto LABEL_358;
      }
    }
    else
    {
      v151 = (*v150 >> (~(_BYTE)v126 & 7)) & 1;
      v1896 = v126 + 1;
      if ((v151 | v149) != 0x83)
        goto LABEL_358;
    }
    v242 = (unint64_t)v1895;
    v241 = v1896;
    v243 = (uint64_t)v1894;
    v244 = &v1894[v1896 >> 3];
    if (v244 >= v1895)
    {
      v245 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v245 = 0;
        v242 = (unint64_t)v1895;
        v241 = v1896;
        v243 = (uint64_t)v1894;
      }
    }
    else
    {
      v245 = (*v244 >> (~(_BYTE)v1896 & 7)) & 1;
      v241 = ++v1896;
    }
    v246 = v245 << 7;
    v247 = (unsigned __int8 *)(v243 + (v241 >> 3));
    if ((unint64_t)v247 >= v242)
    {
      v248 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v248 = 0;
        v242 = (unint64_t)v1895;
        v241 = v1896;
        v243 = (uint64_t)v1894;
      }
    }
    else
    {
      v248 = (*v247 >> (~(_BYTE)v241++ & 7)) & 1;
      v1896 = v241;
    }
    v249 = v246 | (v248 << 6);
    v250 = (unsigned __int8 *)(v243 + (v241 >> 3));
    if ((unint64_t)v250 >= v242)
    {
      v251 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v251 = 0;
        v242 = (unint64_t)v1895;
        v241 = v1896;
        v243 = (uint64_t)v1894;
      }
    }
    else
    {
      v251 = (*v250 >> (~(_BYTE)v241++ & 7)) & 1;
      v1896 = v241;
    }
    v252 = v249 | (32 * v251);
    v253 = (unsigned __int8 *)(v243 + (v241 >> 3));
    if ((unint64_t)v253 >= v242)
    {
      v254 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v254 = 0;
        v242 = (unint64_t)v1895;
        v241 = v1896;
        v243 = (uint64_t)v1894;
      }
    }
    else
    {
      v254 = (*v253 >> (~(_BYTE)v241++ & 7)) & 1;
      v1896 = v241;
    }
    v255 = v252 | (16 * v254);
    v256 = (unsigned __int8 *)(v243 + (v241 >> 3));
    if ((unint64_t)v256 >= v242)
    {
      v257 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v257 = 0;
        v242 = (unint64_t)v1895;
        v241 = v1896;
        v243 = (uint64_t)v1894;
      }
    }
    else
    {
      v257 = (*v256 >> (~(_BYTE)v241++ & 7)) & 1;
      v1896 = v241;
    }
    v258 = v255 | (8 * v257);
    v259 = (unsigned __int8 *)(v243 + (v241 >> 3));
    if ((unint64_t)v259 >= v242)
    {
      v260 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v260 = 0;
        v242 = (unint64_t)v1895;
        v241 = v1896;
        v243 = (uint64_t)v1894;
      }
    }
    else
    {
      v260 = (*v259 >> (~(_BYTE)v241++ & 7)) & 1;
      v1896 = v241;
    }
    v261 = v258 | (4 * v260);
    v262 = (unsigned __int8 *)(v243 + (v241 >> 3));
    if ((unint64_t)v262 >= v242)
    {
      v263 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v263 = 0;
        v242 = (unint64_t)v1895;
        v241 = v1896;
        v243 = (uint64_t)v1894;
      }
    }
    else
    {
      v263 = (*v262 >> (~(_BYTE)v241++ & 7)) & 1;
      v1896 = v241;
    }
    v264 = v261 | (2 * v263);
    v265 = (unsigned __int8 *)(v243 + (v241 >> 3));
    if ((unint64_t)v265 >= v242)
    {
      if (v1898)
        v1898(v1897);
      v266 = 0;
    }
    else
    {
      v266 = (*v265 >> (~(_BYTE)v241 & 7)) & 1;
      v1896 = v241 + 1;
    }
    if ((v266 | v264) == 0x42)
    {
LABEL_359:
      if (*v1888)
      {
        read_bitdepth_colorspace_sampling((uint64_t)v1876, (uint64_t *)&v1894);
        v268 = (unint64_t)v1895;
        v267 = v1896;
        v269 = (uint64_t)v1894;
        v270 = &v1894[v1896 >> 3];
        if (v270 < v1895)
        {
LABEL_361:
          v271 = (*v270 >> (~(_BYTE)v267++ & 7)) & 1;
          v1896 = v267;
LABEL_365:
          v272 = v271 << 7;
          v273 = (unsigned __int8 *)(v269 + (v267 >> 3));
          if ((unint64_t)v273 >= v268)
          {
            v274 = (int)v1898;
            if (v1898)
            {
              v1898(v1897);
              v274 = 0;
              v268 = (unint64_t)v1895;
              v267 = v1896;
              v269 = (uint64_t)v1894;
            }
          }
          else
          {
            v274 = (*v273 >> (~(_BYTE)v267++ & 7)) & 1;
            v1896 = v267;
          }
          v275 = v272 | (v274 << 6);
          v276 = (unsigned __int8 *)(v269 + (v267 >> 3));
          if ((unint64_t)v276 >= v268)
          {
            v277 = (int)v1898;
            if (v1898)
            {
              v1898(v1897);
              v277 = 0;
              v268 = (unint64_t)v1895;
              v267 = v1896;
              v269 = (uint64_t)v1894;
            }
          }
          else
          {
            v277 = (*v276 >> (~(_BYTE)v267++ & 7)) & 1;
            v1896 = v267;
          }
          v278 = v275 | (32 * v277);
          v279 = (unsigned __int8 *)(v269 + (v267 >> 3));
          if ((unint64_t)v279 >= v268)
          {
            v280 = (int)v1898;
            if (v1898)
            {
              v1898(v1897);
              v280 = 0;
              v268 = (unint64_t)v1895;
              v267 = v1896;
              v269 = (uint64_t)v1894;
            }
          }
          else
          {
            v280 = (*v279 >> (~(_BYTE)v267++ & 7)) & 1;
            v1896 = v267;
          }
          v281 = v278 | (16 * v280);
          v282 = (unsigned __int8 *)(v269 + (v267 >> 3));
          if ((unint64_t)v282 >= v268)
          {
            v283 = (int)v1898;
            if (v1898)
            {
              v1898(v1897);
              v283 = 0;
              v268 = (unint64_t)v1895;
              v267 = v1896;
              v269 = (uint64_t)v1894;
            }
          }
          else
          {
            v283 = (*v282 >> (~(_BYTE)v267++ & 7)) & 1;
            v1896 = v267;
          }
          v284 = v281 | (8 * v283);
          v285 = (unsigned __int8 *)(v269 + (v267 >> 3));
          if ((unint64_t)v285 >= v268)
          {
            v286 = (int)v1898;
            if (v1898)
            {
              v1898(v1897);
              v286 = 0;
              v268 = (unint64_t)v1895;
              v267 = v1896;
              v269 = (uint64_t)v1894;
            }
          }
          else
          {
            v286 = (*v285 >> (~(_BYTE)v267++ & 7)) & 1;
            v1896 = v267;
          }
          v287 = v284 | (4 * v286);
          v288 = (unsigned __int8 *)(v269 + (v267 >> 3));
          if ((unint64_t)v288 >= v268)
          {
            v289 = (int)v1898;
            if (v1898)
            {
              v1898(v1897);
              v289 = 0;
              v268 = (unint64_t)v1895;
              v267 = v1896;
              v269 = (uint64_t)v1894;
            }
          }
          else
          {
            v289 = (*v288 >> (~(_BYTE)v267++ & 7)) & 1;
            v1896 = v267;
          }
          v290 = v287 | (2 * v289);
          v291 = (unsigned __int8 *)(v269 + (v267 >> 3));
          if ((unint64_t)v291 >= v268)
          {
            if (v1898)
              v1898(v1897);
            v292 = 0;
          }
          else
          {
            v292 = (*v291 >> (~(_BYTE)v267 & 7)) & 1;
            v1896 = v267 + 1;
          }
          *((_DWORD *)v22 + 3387) = v292 | v290;
          setup_frame_size(v1876, &v1894);
          v119 = *((_DWORD *)v22 + 3822);
          if (v119)
          {
            v119 = 0;
            *(_QWORD *)&v293 = -1;
            *((_QWORD *)&v293 + 1) = -1;
            *((_OWORD *)v8 + 63) = v293;
            *((_OWORD *)v8 + 64) = v293;
            *((_DWORD *)v22 + 3822) = 0;
          }
          goto LABEL_574;
        }
      }
      else
      {
        *(_QWORD *)(v8 + 470) = 1;
        *((_DWORD *)v8 + 243) = 1;
        *((_DWORD *)v22 + 3354) = 8;
        *((_QWORD *)v8 + 122) = 1;
        v268 = (unint64_t)v1895;
        v267 = v1896;
        v269 = (uint64_t)v1894;
        v270 = &v1894[v1896 >> 3];
        if (v270 < v1895)
          goto LABEL_361;
      }
      v271 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v271 = 0;
        v268 = (unint64_t)v1895;
        v267 = v1896;
        v269 = (uint64_t)v1894;
      }
      goto LABEL_365;
    }
LABEL_358:
    vpx_internal_error((uint64_t)v1876, 5, "Invalid frame sync code");
    goto LABEL_359;
  }
  v49 = (unint64_t)v1895;
  v48 = v1896;
  v50 = (uint64_t)v1894;
  v51 = &v1894[v1896 >> 3];
  if (v51 >= v1895)
  {
    v52 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v52 = 0;
      v49 = (unint64_t)v1895;
      v48 = v1896;
      v50 = (uint64_t)v1894;
    }
  }
  else
  {
    v52 = (*v51 >> (~(_BYTE)v1896 & 7)) & 1;
    v48 = ++v1896;
  }
  v54 = v52 << 7;
  v55 = (unsigned __int8 *)(v50 + (v48 >> 3));
  if ((unint64_t)v55 >= v49)
  {
    v56 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v56 = 0;
      v49 = (unint64_t)v1895;
      v48 = v1896;
      v50 = (uint64_t)v1894;
    }
  }
  else
  {
    v56 = (*v55 >> (~(_BYTE)v48++ & 7)) & 1;
    v1896 = v48;
  }
  v57 = v54 | (v56 << 6);
  v58 = (unsigned __int8 *)(v50 + (v48 >> 3));
  if ((unint64_t)v58 >= v49)
  {
    v59 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v59 = 0;
      v49 = (unint64_t)v1895;
      v48 = v1896;
      v50 = (uint64_t)v1894;
    }
  }
  else
  {
    v59 = (*v58 >> (~(_BYTE)v48++ & 7)) & 1;
    v1896 = v48;
  }
  v60 = v57 | (32 * v59);
  v61 = (unsigned __int8 *)(v50 + (v48 >> 3));
  if ((unint64_t)v61 >= v49)
  {
    v62 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v62 = 0;
      v49 = (unint64_t)v1895;
      v48 = v1896;
      v50 = (uint64_t)v1894;
    }
  }
  else
  {
    v62 = (*v61 >> (~(_BYTE)v48++ & 7)) & 1;
    v1896 = v48;
  }
  v63 = v60 | (16 * v62);
  v64 = (unsigned __int8 *)(v50 + (v48 >> 3));
  if ((unint64_t)v64 >= v49)
  {
    v65 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v65 = 0;
      v49 = (unint64_t)v1895;
      v48 = v1896;
      v50 = (uint64_t)v1894;
    }
  }
  else
  {
    v65 = (*v64 >> (~(_BYTE)v48++ & 7)) & 1;
    v1896 = v48;
  }
  v66 = v63 | (8 * v65);
  v67 = (unsigned __int8 *)(v50 + (v48 >> 3));
  if ((unint64_t)v67 >= v49)
  {
    v68 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v68 = 0;
      v49 = (unint64_t)v1895;
      v48 = v1896;
      v50 = (uint64_t)v1894;
    }
  }
  else
  {
    v68 = (*v67 >> (~(_BYTE)v48++ & 7)) & 1;
    v1896 = v48;
  }
  v69 = v66 | (4 * v68);
  v70 = (unsigned __int8 *)(v50 + (v48 >> 3));
  if ((unint64_t)v70 >= v49)
  {
    v71 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v71 = 0;
      v49 = (unint64_t)v1895;
      v48 = v1896;
      v50 = (uint64_t)v1894;
    }
  }
  else
  {
    v71 = (*v70 >> (~(_BYTE)v48++ & 7)) & 1;
    v1896 = v48;
  }
  v72 = v69 | (2 * v71);
  v73 = (unsigned __int8 *)(v50 + (v48 >> 3));
  if ((unint64_t)v73 >= v49)
  {
    if (v1898)
    {
      v1898(v1897);
      if (v72 != 73)
        goto LABEL_431;
    }
    else if (v72 != 73)
    {
      goto LABEL_431;
    }
  }
  else
  {
    v74 = (*v73 >> (~(_BYTE)v48 & 7)) & 1;
    v1896 = v48 + 1;
    if ((v74 | v72) != 0x49)
      goto LABEL_431;
  }
  v153 = (unint64_t)v1895;
  v152 = v1896;
  v154 = (uint64_t)v1894;
  v155 = &v1894[v1896 >> 3];
  if (v155 >= v1895)
  {
    v156 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v156 = 0;
      v153 = (unint64_t)v1895;
      v152 = v1896;
      v154 = (uint64_t)v1894;
    }
  }
  else
  {
    v156 = (*v155 >> (~(_BYTE)v1896 & 7)) & 1;
    v152 = ++v1896;
  }
  v157 = v156 << 7;
  v158 = (unsigned __int8 *)(v154 + (v152 >> 3));
  if ((unint64_t)v158 >= v153)
  {
    v159 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v159 = 0;
      v153 = (unint64_t)v1895;
      v152 = v1896;
      v154 = (uint64_t)v1894;
    }
  }
  else
  {
    v159 = (*v158 >> (~(_BYTE)v152++ & 7)) & 1;
    v1896 = v152;
  }
  v160 = v157 | (v159 << 6);
  v161 = (unsigned __int8 *)(v154 + (v152 >> 3));
  if ((unint64_t)v161 >= v153)
  {
    v162 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v162 = 0;
      v153 = (unint64_t)v1895;
      v152 = v1896;
      v154 = (uint64_t)v1894;
    }
  }
  else
  {
    v162 = (*v161 >> (~(_BYTE)v152++ & 7)) & 1;
    v1896 = v152;
  }
  v163 = v160 | (32 * v162);
  v164 = (unsigned __int8 *)(v154 + (v152 >> 3));
  if ((unint64_t)v164 >= v153)
  {
    v165 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v165 = 0;
      v153 = (unint64_t)v1895;
      v152 = v1896;
      v154 = (uint64_t)v1894;
    }
  }
  else
  {
    v165 = (*v164 >> (~(_BYTE)v152++ & 7)) & 1;
    v1896 = v152;
  }
  v166 = v163 | (16 * v165);
  v167 = (unsigned __int8 *)(v154 + (v152 >> 3));
  if ((unint64_t)v167 >= v153)
  {
    v168 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v168 = 0;
      v153 = (unint64_t)v1895;
      v152 = v1896;
      v154 = (uint64_t)v1894;
    }
  }
  else
  {
    v168 = (*v167 >> (~(_BYTE)v152++ & 7)) & 1;
    v1896 = v152;
  }
  v169 = v166 | (8 * v168);
  v170 = (unsigned __int8 *)(v154 + (v152 >> 3));
  if ((unint64_t)v170 >= v153)
  {
    v171 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v171 = 0;
      v153 = (unint64_t)v1895;
      v152 = v1896;
      v154 = (uint64_t)v1894;
    }
  }
  else
  {
    v171 = (*v170 >> (~(_BYTE)v152++ & 7)) & 1;
    v1896 = v152;
  }
  v172 = v169 | (4 * v171);
  v173 = (unsigned __int8 *)(v154 + (v152 >> 3));
  if ((unint64_t)v173 >= v153)
  {
    v174 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v174 = 0;
      v153 = (unint64_t)v1895;
      v152 = v1896;
      v154 = (uint64_t)v1894;
    }
  }
  else
  {
    v174 = (*v173 >> (~(_BYTE)v152++ & 7)) & 1;
    v1896 = v152;
  }
  v175 = v172 | (2 * v174);
  v176 = (unsigned __int8 *)(v154 + (v152 >> 3));
  if ((unint64_t)v176 < v153)
  {
    v177 = (*v176 >> (~(_BYTE)v152 & 7)) & 1;
    v1896 = v152 + 1;
    if ((v177 | v175) != 0x83)
      goto LABEL_431;
LABEL_397:
    v295 = (unint64_t)v1895;
    v294 = v1896;
    v296 = (uint64_t)v1894;
    v297 = &v1894[v1896 >> 3];
    if (v297 >= v1895)
    {
      v298 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v298 = 0;
        v295 = (unint64_t)v1895;
        v294 = v1896;
        v296 = (uint64_t)v1894;
      }
    }
    else
    {
      v298 = (*v297 >> (~(_BYTE)v1896 & 7)) & 1;
      v294 = ++v1896;
    }
    v299 = v298 << 7;
    v300 = (unsigned __int8 *)(v296 + (v294 >> 3));
    if ((unint64_t)v300 >= v295)
    {
      v301 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v301 = 0;
        v295 = (unint64_t)v1895;
        v294 = v1896;
        v296 = (uint64_t)v1894;
      }
    }
    else
    {
      v301 = (*v300 >> (~(_BYTE)v294++ & 7)) & 1;
      v1896 = v294;
    }
    v302 = v299 | (v301 << 6);
    v303 = (unsigned __int8 *)(v296 + (v294 >> 3));
    if ((unint64_t)v303 >= v295)
    {
      v304 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v304 = 0;
        v295 = (unint64_t)v1895;
        v294 = v1896;
        v296 = (uint64_t)v1894;
      }
    }
    else
    {
      v304 = (*v303 >> (~(_BYTE)v294++ & 7)) & 1;
      v1896 = v294;
    }
    v305 = v302 | (32 * v304);
    v306 = (unsigned __int8 *)(v296 + (v294 >> 3));
    if ((unint64_t)v306 >= v295)
    {
      v307 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v307 = 0;
        v295 = (unint64_t)v1895;
        v294 = v1896;
        v296 = (uint64_t)v1894;
      }
    }
    else
    {
      v307 = (*v306 >> (~(_BYTE)v294++ & 7)) & 1;
      v1896 = v294;
    }
    v308 = v305 | (16 * v307);
    v309 = (unsigned __int8 *)(v296 + (v294 >> 3));
    if ((unint64_t)v309 >= v295)
    {
      v310 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v310 = 0;
        v295 = (unint64_t)v1895;
        v294 = v1896;
        v296 = (uint64_t)v1894;
      }
    }
    else
    {
      v310 = (*v309 >> (~(_BYTE)v294++ & 7)) & 1;
      v1896 = v294;
    }
    v311 = v308 | (8 * v310);
    v312 = (unsigned __int8 *)(v296 + (v294 >> 3));
    if ((unint64_t)v312 >= v295)
    {
      v313 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v313 = 0;
        v295 = (unint64_t)v1895;
        v294 = v1896;
        v296 = (uint64_t)v1894;
      }
    }
    else
    {
      v313 = (*v312 >> (~(_BYTE)v294++ & 7)) & 1;
      v1896 = v294;
    }
    v314 = v311 | (4 * v313);
    v315 = (unsigned __int8 *)(v296 + (v294 >> 3));
    if ((unint64_t)v315 >= v295)
    {
      v316 = (int)v1898;
      if (v1898)
      {
        v1898(v1897);
        v316 = 0;
        v295 = (unint64_t)v1895;
        v294 = v1896;
        v296 = (uint64_t)v1894;
      }
    }
    else
    {
      v316 = (*v315 >> (~(_BYTE)v294++ & 7)) & 1;
      v1896 = v294;
    }
    v317 = v314 | (2 * v316);
    v318 = (unsigned __int8 *)(v296 + (v294 >> 3));
    if ((unint64_t)v318 >= v295)
    {
      if (v1898)
        v1898(v1897);
      v319 = 0;
    }
    else
    {
      v319 = (*v318 >> (~(_BYTE)v294 & 7)) & 1;
      v1896 = v294 + 1;
    }
    if ((v319 | v317) == 0x42)
      goto LABEL_432;
    goto LABEL_431;
  }
  if (v1898)
  {
    v1898(v1897);
    if (v175 != 131)
      goto LABEL_431;
    goto LABEL_397;
  }
  if (v175 == 131)
    goto LABEL_397;
LABEL_431:
  vpx_internal_error((uint64_t)v1876, 5, "Invalid frame sync code");
LABEL_432:
  read_bitdepth_colorspace_sampling((uint64_t)v1876, (uint64_t *)&v1894);
  *((_DWORD *)v22 + 3387) = 255;
  *((_DWORD *)v8 + 268) = -1;
  *((_QWORD *)v8 + 135) = 0;
  *((_DWORD *)v8 + 312) = -1;
  *((_QWORD *)v8 + 157) = 0;
  *((_DWORD *)v8 + 356) = -1;
  *((_QWORD *)v8 + 179) = 0;
  setup_frame_size(v1876, &v1894);
  v119 = *((_DWORD *)v22 + 3822);
  if (v119)
  {
    *(_QWORD *)&v320 = -1;
    *((_QWORD *)&v320 + 1) = -1;
    *((_OWORD *)v8 + 63) = v320;
    *((_OWORD *)v8 + 64) = v320;
    if (!*((_DWORD *)v8 + 483) && *((_DWORD *)v22 + 3351))
    {
      v321 = (_QWORD *)*((_QWORD *)v8 + 2363);
      v322 = *((_DWORD *)v8 + 400);
      if (!v322)
        goto LABEL_442;
      *((_DWORD *)v321 + 6) = 0;
      if (!*((_BYTE *)v321 + 48))
      {
        ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 8);
        *((_BYTE *)v321 + 48) = 1;
        v322 = *((_DWORD *)v8 + 400);
      }
      if (v322 != 1)
      {
LABEL_442:
        *((_DWORD *)v321 + 62) = 0;
        if (!*((_BYTE *)v321 + 272))
        {
          ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 36);
          *((_BYTE *)v321 + 272) = 1;
          v322 = *((_DWORD *)v8 + 400);
        }
        if (v322 == 2)
          goto LABEL_448;
      }
      *((_DWORD *)v321 + 118) = 0;
      if (!*((_BYTE *)v321 + 496))
      {
        ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 64);
        *((_BYTE *)v321 + 496) = 1;
        v322 = *((_DWORD *)v8 + 400);
      }
      if (v322 != 3)
      {
LABEL_448:
        *((_DWORD *)v321 + 174) = 0;
        if (!*((_BYTE *)v321 + 720))
        {
          ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 92);
          *((_BYTE *)v321 + 720) = 1;
          v322 = *((_DWORD *)v8 + 400);
        }
        if (v322 == 4)
          goto LABEL_454;
      }
      *((_DWORD *)v321 + 230) = 0;
      if (!*((_BYTE *)v321 + 944))
      {
        ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 120);
        *((_BYTE *)v321 + 944) = 1;
        v322 = *((_DWORD *)v8 + 400);
      }
      if (v322 != 5)
      {
LABEL_454:
        *((_DWORD *)v321 + 286) = 0;
        if (!*((_BYTE *)v321 + 1168))
        {
          ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 148);
          *((_BYTE *)v321 + 1168) = 1;
          v322 = *((_DWORD *)v8 + 400);
        }
        if (v322 == 6)
          goto LABEL_460;
      }
      *((_DWORD *)v321 + 342) = 0;
      if (!*((_BYTE *)v321 + 1392))
      {
        ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 176);
        *((_BYTE *)v321 + 1392) = 1;
        v322 = *((_DWORD *)v8 + 400);
      }
      if (v322 != 7)
      {
LABEL_460:
        *((_DWORD *)v321 + 398) = 0;
        if (!*((_BYTE *)v321 + 1616))
        {
          ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 204);
          *((_BYTE *)v321 + 1616) = 1;
          v322 = *((_DWORD *)v8 + 400);
        }
        if (v322 == 8)
          goto LABEL_466;
      }
      *((_DWORD *)v321 + 454) = 0;
      if (!*((_BYTE *)v321 + 1840))
      {
        ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 232);
        *((_BYTE *)v321 + 1840) = 1;
        v322 = *((_DWORD *)v8 + 400);
      }
      if (v322 != 9)
      {
LABEL_466:
        *((_DWORD *)v321 + 510) = 0;
        if (!*((_BYTE *)v321 + 2064))
        {
          ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 260);
          *((_BYTE *)v321 + 2064) = 1;
          v322 = *((_DWORD *)v8 + 400);
        }
        if (v322 == 10)
          goto LABEL_470;
      }
      *((_DWORD *)v321 + 566) = 0;
      if (!*((_BYTE *)v321 + 2288))
      {
        ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 288);
        *((_BYTE *)v321 + 2288) = 1;
        v322 = *((_DWORD *)v8 + 400);
      }
      if (v322 != 11)
      {
LABEL_470:
        *((_DWORD *)v321 + 622) = 0;
        if (!*((_BYTE *)v321 + 2512))
        {
          ((void (*)(_QWORD, _QWORD *))v321[2])(*v321, v321 + 316);
          *((_BYTE *)v321 + 2512) = 1;
        }
      }
    }
    v119 = 0;
    *((_DWORD *)v22 + 3822) = 0;
  }
LABEL_574:
  v381 = *((_QWORD *)v8 + 2363) + 224 * *((int *)v8 + 400);
  *(_DWORD *)(v381 + 216) = *((_DWORD *)v22 + 3354);
  v382.n128_u64[0] = *v46;
  v382.n128_u64[1] = v46[2];
  *(__n128 *)(v381 + 220) = v382;
  if (v119)
    vpx_internal_error((uint64_t)v1876, 7, "Keyframe / intra-only frame required to reset decoder state");
  if (*((_DWORD *)v22 + 3370))
  {
    *((_DWORD *)v8 + 1340) = 0;
    *((_DWORD *)v22 + 3371) = 1;
    v384 = (unint64_t)v1895;
    v383 = v1896;
    v385 = (uint64_t)v1894;
    v386 = &v1894[v1896 >> 3];
    if (v386 >= v1895)
      goto LABEL_578;
LABEL_649:
    v444 = (*v386 >> (~(_BYTE)v383++ & 7)) & 1;
    v1896 = v383;
    v388 = 2 * v444;
    v389 = (unsigned __int8 *)(v385 + (v383 >> 3));
    if ((unint64_t)v389 < v384)
      goto LABEL_581;
LABEL_650:
    if (v1898)
    {
      v1898(v1897);
      *((_DWORD *)v8 + 1394) = v388;
      v391 = *((_DWORD *)v22 + 3387);
      if (v391)
        goto LABEL_582;
    }
    else
    {
      *((_DWORD *)v8 + 1394) = v388;
      v391 = *((_DWORD *)v22 + 3387);
      if (v391)
        goto LABEL_582;
    }
    goto LABEL_652;
  }
  v438 = (unint64_t)v1895;
  v437 = v1896;
  v439 = (uint64_t)v1894;
  v440 = &v1894[v1896 >> 3];
  if (v440 >= v1895)
  {
    v441 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v441 = 0;
      v438 = (unint64_t)v1895;
      v437 = v1896;
      v439 = (uint64_t)v1894;
    }
  }
  else
  {
    v441 = (*v440 >> (~(_BYTE)v1896 & 7)) & 1;
    v437 = ++v1896;
  }
  *((_DWORD *)v8 + 1340) = v441;
  v442 = (unsigned __int8 *)(v439 + (v437 >> 3));
  if ((unint64_t)v442 >= v438)
  {
    if (v1898)
      v1898(v1897);
    *((_DWORD *)v22 + 3371) = 0;
  }
  else
  {
    v443 = *v442 >> (~(_BYTE)v437 & 7);
    v1896 = v437 + 1;
    *((_DWORD *)v22 + 3371) = v443 & 1;
    if ((v443 & 1) != 0)
    {
      v384 = (unint64_t)v1895;
      v383 = v1896;
      v385 = (uint64_t)v1894;
      v386 = &v1894[v1896 >> 3];
      if (v386 < v1895)
        goto LABEL_649;
      goto LABEL_578;
    }
  }
  bzero(v8 + 2790, 0x33A8uLL);
  v384 = (unint64_t)v1895;
  v383 = v1896;
  v385 = (uint64_t)v1894;
  v386 = &v1894[v1896 >> 3];
  if (v386 < v1895)
    goto LABEL_649;
LABEL_578:
  v387 = (int)v1898;
  if (v1898)
  {
    v1898(v1897);
    v387 = 0;
    v384 = (unint64_t)v1895;
    v383 = v1896;
    v385 = (uint64_t)v1894;
  }
  v388 = 2 * v387;
  v389 = (unsigned __int8 *)(v385 + (v383 >> 3));
  if ((unint64_t)v389 >= v384)
    goto LABEL_650;
LABEL_581:
  v390 = (*v389 >> (~(_BYTE)v383 & 7)) & 1;
  v1896 = v383 + 1;
  *((_DWORD *)v8 + 1394) = v390 | v388;
  v391 = *((_DWORD *)v22 + 3387);
  if (v391)
  {
LABEL_582:
    v392 = 0;
    while ((v391 & 1) != 0)
    {
      v393 = &v8[2 * v392];
      *((_DWORD *)v393 + 260) = *((_DWORD *)v8 + 400);
      ++*(_DWORD *)(v25 + 224 * *((int *)v8 + 400));
      v394 = *((_DWORD *)v393 + 252);
      if ((v394 & 0x80000000) == 0)
        goto LABEL_584;
LABEL_585:
      ++v392;
      v395 = v391 >= 2;
      v391 >>= 1;
      if (!v395)
      {
        if ((v392 & 0xFFFFFFF8) != 0)
          goto LABEL_591;
        goto LABEL_653;
      }
    }
    v396 = &v8[2 * v392];
    v394 = *((_DWORD *)v396 + 252);
    *((_DWORD *)v396 + 260) = v394;
    if ((v394 & 0x80000000) != 0)
      goto LABEL_585;
LABEL_584:
    ++*(_DWORD *)(v25 + 224 * v394);
    goto LABEL_585;
  }
LABEL_652:
  LODWORD(v392) = 0;
LABEL_653:
  v392 = v392;
  do
  {
    v445 = &v8[2 * v392];
    v446 = *((_DWORD *)v445 + 252);
    *((_DWORD *)v445 + 260) = v446;
    if ((v446 & 0x80000000) == 0)
      ++*(_DWORD *)(v25 + 224 * v446);
    ++v392;
  }
  while ((_DWORD)v392 != 8);
LABEL_591:
  *((_DWORD *)v22 + 3823) = 1;
  if (!*((_DWORD *)v8 + 483) || *((_BYTE *)v8 + 1948) || *((_DWORD *)v22 + 3370))
    v382.n128_f64[0] = vp9_setup_past_independence((uint64_t)v1876);
  v397 = (unint64_t)v1895;
  v398 = v1896;
  v399 = (uint64_t)v1894;
  v400 = &v1894[v1896 >> 3];
  if (v400 >= v1895)
  {
    v401 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v401 = 0;
      v397 = (unint64_t)v1895;
      v398 = v1896;
      v399 = (uint64_t)v1894;
    }
  }
  else
  {
    v401 = (*v400 >> (~(_BYTE)v1896 & 7)) & 1;
    v398 = ++v1896;
  }
  v402 = 32 * v401;
  v403 = (unsigned __int8 *)(v399 + (v398 >> 3));
  if ((unint64_t)v403 >= v397)
  {
    v404 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v404 = 0;
      v397 = (unint64_t)v1895;
      v398 = v1896;
      v399 = (uint64_t)v1894;
    }
  }
  else
  {
    v404 = (*v403 >> (~(_BYTE)v398++ & 7)) & 1;
    v1896 = v398;
  }
  v405 = v402 | (16 * v404);
  v406 = (unsigned __int8 *)(v399 + (v398 >> 3));
  if ((unint64_t)v406 >= v397)
  {
    v407 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v407 = 0;
      v397 = (unint64_t)v1895;
      v398 = v1896;
      v399 = (uint64_t)v1894;
    }
  }
  else
  {
    v407 = (*v406 >> (~(_BYTE)v398++ & 7)) & 1;
    v1896 = v398;
  }
  v408 = v405 | (8 * v407);
  v409 = (unsigned __int8 *)(v399 + (v398 >> 3));
  if ((unint64_t)v409 >= v397)
  {
    v410 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v410 = 0;
      v397 = (unint64_t)v1895;
      v398 = v1896;
      v399 = (uint64_t)v1894;
    }
  }
  else
  {
    v410 = (*v409 >> (~(_BYTE)v398++ & 7)) & 1;
    v1896 = v398;
  }
  v411 = v408 | (4 * v410);
  v412 = (unsigned __int8 *)(v399 + (v398 >> 3));
  if ((unint64_t)v412 >= v397)
  {
    v413 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v413 = 0;
      v397 = (unint64_t)v1895;
      v398 = v1896;
      v399 = (uint64_t)v1894;
    }
  }
  else
  {
    v413 = (*v412 >> (~(_BYTE)v398++ & 7)) & 1;
    v1896 = v398;
  }
  v414 = v411 | (2 * v413);
  v415 = (unsigned __int8 *)(v399 + (v398 >> 3));
  if ((unint64_t)v415 >= v397)
  {
    v416 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v416 = 0;
      v397 = (unint64_t)v1895;
      v398 = v1896;
      v399 = (uint64_t)v1894;
    }
  }
  else
  {
    v416 = (*v415 >> (~(_BYTE)v398++ & 7)) & 1;
    v1896 = v398;
  }
  *((_DWORD *)v8 + 1346) = v416 | v414;
  v417 = (unsigned __int8 *)(v399 + (v398 >> 3));
  if ((unint64_t)v417 >= v397)
  {
    v418 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v418 = 0;
      v397 = (unint64_t)v1895;
      v398 = v1896;
      v399 = (uint64_t)v1894;
    }
  }
  else
  {
    v418 = (*v417 >> (~(_BYTE)v398++ & 7)) & 1;
    v1896 = v398;
  }
  v419 = 4 * v418;
  v420 = (unsigned __int8 *)(v399 + (v398 >> 3));
  if ((unint64_t)v420 >= v397)
  {
    v421 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v421 = 0;
      v397 = (unint64_t)v1895;
      v398 = v1896;
      v399 = (uint64_t)v1894;
    }
  }
  else
  {
    v421 = (*v420 >> (~(_BYTE)v398++ & 7)) & 1;
    v1896 = v398;
  }
  v422 = v419 | (2 * v421);
  v423 = (unsigned __int8 *)(v399 + (v398 >> 3));
  if ((unint64_t)v423 >= v397)
  {
    v424 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v424 = 0;
      v397 = (unint64_t)v1895;
      v398 = v1896;
      v399 = (uint64_t)v1894;
    }
  }
  else
  {
    v424 = (*v423 >> (~(_BYTE)v398++ & 7)) & 1;
    v1896 = v398;
  }
  *((_DWORD *)v8 + 1348) = v424 | v422;
  *((_BYTE *)v22 + 1) = 0;
  v425 = (unsigned __int8 *)(v399 + (v398 >> 3));
  if ((unint64_t)v425 >= v397)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    *(_BYTE *)v22 = 0;
  }
  else
  {
    v426 = *v425 >> (~(_BYTE)v398 & 7);
    v427 = v398 + 1;
    v1896 = v398 + 1;
    *(_BYTE *)v22 = v426 & 1;
    if ((v426 & 1) != 0)
    {
      v428 = (unsigned __int8 *)(v399 + (v427 >> 3));
      if ((unint64_t)v428 >= v397)
      {
        if (v1898)
          ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        *((_BYTE *)v22 + 1) = 0;
      }
      else
      {
        v429 = *v428 >> (~(_BYTE)v427 & 7);
        v430 = v398 + 2;
        v1896 = v398 + 2;
        *((_BYTE *)v22 + 1) = v429 & 1;
        if ((v429 & 1) != 0)
        {
          v431 = (unsigned __int8 *)(v399 + (v430 >> 3));
          if ((unint64_t)v431 >= v397)
          {
            if (v1898)
              ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          }
          else
          {
            v432 = ~(_BYTE)v430 & 7;
            v433 = *v431;
            v434 = v398 + 3;
            v1896 = v398 + 3;
            if (((v433 >> v432) & 1) != 0)
            {
              v435 = (unsigned __int8 *)(v399 + (v434 >> 3));
              if ((unint64_t)v435 >= v397)
              {
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v436 = 0;
                  v397 = (unint64_t)v1895;
                  v434 = v1896;
                  v399 = (uint64_t)v1894;
                }
                else
                {
                  v436 = 0;
                }
              }
              else
              {
                v436 = (*v435 >> (~(_BYTE)v434 & 7)) & 1;
                v434 = v398 + 4;
                v1896 = v398 + 4;
              }
              v1258 = 32 * v436;
              v1259 = (unsigned __int8 *)(v399 + (v434 >> 3));
              if ((unint64_t)v1259 >= v397)
              {
                v1260 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1260 = 0;
                  v397 = (unint64_t)v1895;
                  v434 = v1896;
                  v399 = (uint64_t)v1894;
                }
              }
              else
              {
                v1260 = (*v1259 >> (~(_BYTE)v434++ & 7)) & 1;
                v1896 = v434;
              }
              v1261 = v1258 | (16 * v1260);
              v1262 = (unsigned __int8 *)(v399 + (v434 >> 3));
              if ((unint64_t)v1262 >= v397)
              {
                v1263 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1263 = 0;
                  v397 = (unint64_t)v1895;
                  v434 = v1896;
                  v399 = (uint64_t)v1894;
                }
              }
              else
              {
                v1263 = (*v1262 >> (~(_BYTE)v434++ & 7)) & 1;
                v1896 = v434;
              }
              v1264 = v1261 | (8 * v1263);
              v1265 = (unsigned __int8 *)(v399 + (v434 >> 3));
              if ((unint64_t)v1265 >= v397)
              {
                v1266 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1266 = 0;
                  v397 = (unint64_t)v1895;
                  v434 = v1896;
                  v399 = (uint64_t)v1894;
                }
              }
              else
              {
                v1266 = (*v1265 >> (~(_BYTE)v434++ & 7)) & 1;
                v1896 = v434;
              }
              v1267 = v1264 | (4 * v1266);
              v1268 = (unsigned __int8 *)(v399 + (v434 >> 3));
              if ((unint64_t)v1268 >= v397)
              {
                v1269 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1269 = 0;
                  v397 = (unint64_t)v1895;
                  v434 = v1896;
                  v399 = (uint64_t)v1894;
                }
              }
              else
              {
                v1269 = (*v1268 >> (~(_BYTE)v434++ & 7)) & 1;
                v1896 = v434;
              }
              v1270 = v1267 | (2 * v1269);
              v1271 = (unsigned __int8 *)(v399 + (v434 >> 3));
              if ((unint64_t)v1271 >= v397)
              {
                v1272 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1272 = 0;
                  v397 = (unint64_t)v1895;
                  v434 = v1896;
                  v399 = (uint64_t)v1894;
                }
              }
              else
              {
                v1272 = (*v1271 >> (~(_BYTE)v434++ & 7)) & 1;
                v1896 = v434;
              }
              v1273 = v1272 | v1270;
              v1274 = (unsigned __int8 *)(v399 + (v434 >> 3));
              if ((unint64_t)v1274 >= v397)
              {
                if (v1898)
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
              }
              else
              {
                v1275 = *v1274;
                v1896 = v434 + 1;
                if (((v1275 >> (~(_BYTE)v434 & 7)) & 1) != 0)
                  v1273 = -v1273;
              }
              *((_BYTE *)v22 + 2) = v1273;
            }
          }
          v1276 = (unint64_t)v1895;
          v1277 = v1896;
          v1278 = (uint64_t)v1894;
          v1279 = &v1894[v1896 >> 3];
          if (v1279 >= v1895)
          {
            if (v1898)
              ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          }
          else
          {
            v1280 = *v1279;
            v1281 = ++v1896;
            if (((v1280 >> (~(_BYTE)v1277 & 7)) & 1) != 0)
            {
              v1282 = &v1894[v1281 >> 3];
              if (v1282 >= v1895)
              {
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1283 = 0;
                  v1276 = (unint64_t)v1895;
                  v1281 = v1896;
                  v1278 = (uint64_t)v1894;
                }
                else
                {
                  v1283 = 0;
                }
              }
              else
              {
                v1283 = (*v1282 >> (~(_BYTE)v1281 & 7)) & 1;
                v1281 = v1277 + 2;
                v1896 = v1277 + 2;
              }
              v1342 = 32 * v1283;
              v1343 = (unsigned __int8 *)(v1278 + (v1281 >> 3));
              if ((unint64_t)v1343 >= v1276)
              {
                v1344 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1344 = 0;
                  v1276 = (unint64_t)v1895;
                  v1281 = v1896;
                  v1278 = (uint64_t)v1894;
                }
              }
              else
              {
                v1344 = (*v1343 >> (~(_BYTE)v1281++ & 7)) & 1;
                v1896 = v1281;
              }
              v1345 = v1342 | (16 * v1344);
              v1346 = (unsigned __int8 *)(v1278 + (v1281 >> 3));
              if ((unint64_t)v1346 >= v1276)
              {
                v1347 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1347 = 0;
                  v1276 = (unint64_t)v1895;
                  v1281 = v1896;
                  v1278 = (uint64_t)v1894;
                }
              }
              else
              {
                v1347 = (*v1346 >> (~(_BYTE)v1281++ & 7)) & 1;
                v1896 = v1281;
              }
              v1348 = v1345 | (8 * v1347);
              v1349 = (unsigned __int8 *)(v1278 + (v1281 >> 3));
              if ((unint64_t)v1349 >= v1276)
              {
                v1350 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1350 = 0;
                  v1276 = (unint64_t)v1895;
                  v1281 = v1896;
                  v1278 = (uint64_t)v1894;
                }
              }
              else
              {
                v1350 = (*v1349 >> (~(_BYTE)v1281++ & 7)) & 1;
                v1896 = v1281;
              }
              v1351 = v1348 | (4 * v1350);
              v1352 = (unsigned __int8 *)(v1278 + (v1281 >> 3));
              if ((unint64_t)v1352 >= v1276)
              {
                v1353 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1353 = 0;
                  v1276 = (unint64_t)v1895;
                  v1281 = v1896;
                  v1278 = (uint64_t)v1894;
                }
              }
              else
              {
                v1353 = (*v1352 >> (~(_BYTE)v1281++ & 7)) & 1;
                v1896 = v1281;
              }
              v1354 = v1351 | (2 * v1353);
              v1355 = (unsigned __int8 *)(v1278 + (v1281 >> 3));
              if ((unint64_t)v1355 >= v1276)
              {
                v1356 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1356 = 0;
                  v1276 = (unint64_t)v1895;
                  v1281 = v1896;
                  v1278 = (uint64_t)v1894;
                }
              }
              else
              {
                v1356 = (*v1355 >> (~(_BYTE)v1281++ & 7)) & 1;
                v1896 = v1281;
              }
              v1357 = v1356 | v1354;
              v1358 = (unsigned __int8 *)(v1278 + (v1281 >> 3));
              if ((unint64_t)v1358 >= v1276)
              {
                if (v1898)
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
              }
              else
              {
                v1359 = *v1358;
                v1896 = v1281 + 1;
                if (((v1359 >> (~(_BYTE)v1281 & 7)) & 1) != 0)
                  v1357 = -v1357;
              }
              *((_BYTE *)v22 + 3) = v1357;
            }
          }
          v1360 = (unint64_t)v1895;
          v1361 = v1896;
          v1362 = (uint64_t)v1894;
          v1363 = &v1894[v1896 >> 3];
          if (v1363 >= v1895)
          {
            if (v1898)
              ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          }
          else
          {
            v1364 = *v1363;
            v1365 = ++v1896;
            if (((v1364 >> (~(_BYTE)v1361 & 7)) & 1) != 0)
            {
              v1366 = &v1894[v1365 >> 3];
              if (v1366 >= v1895)
              {
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1367 = 0;
                  v1360 = (unint64_t)v1895;
                  v1365 = v1896;
                  v1362 = (uint64_t)v1894;
                }
                else
                {
                  v1367 = 0;
                }
              }
              else
              {
                v1367 = (*v1366 >> (~(_BYTE)v1365 & 7)) & 1;
                v1365 = v1361 + 2;
                v1896 = v1361 + 2;
              }
              v1426 = 32 * v1367;
              v1427 = (unsigned __int8 *)(v1362 + (v1365 >> 3));
              if ((unint64_t)v1427 >= v1360)
              {
                v1428 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1428 = 0;
                  v1360 = (unint64_t)v1895;
                  v1365 = v1896;
                  v1362 = (uint64_t)v1894;
                }
              }
              else
              {
                v1428 = (*v1427 >> (~(_BYTE)v1365++ & 7)) & 1;
                v1896 = v1365;
              }
              v1429 = v1426 | (16 * v1428);
              v1430 = (unsigned __int8 *)(v1362 + (v1365 >> 3));
              if ((unint64_t)v1430 >= v1360)
              {
                v1431 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1431 = 0;
                  v1360 = (unint64_t)v1895;
                  v1365 = v1896;
                  v1362 = (uint64_t)v1894;
                }
              }
              else
              {
                v1431 = (*v1430 >> (~(_BYTE)v1365++ & 7)) & 1;
                v1896 = v1365;
              }
              v1432 = v1429 | (8 * v1431);
              v1433 = (unsigned __int8 *)(v1362 + (v1365 >> 3));
              if ((unint64_t)v1433 >= v1360)
              {
                v1434 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1434 = 0;
                  v1360 = (unint64_t)v1895;
                  v1365 = v1896;
                  v1362 = (uint64_t)v1894;
                }
              }
              else
              {
                v1434 = (*v1433 >> (~(_BYTE)v1365++ & 7)) & 1;
                v1896 = v1365;
              }
              v1435 = v1432 | (4 * v1434);
              v1436 = (unsigned __int8 *)(v1362 + (v1365 >> 3));
              if ((unint64_t)v1436 >= v1360)
              {
                v1437 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1437 = 0;
                  v1360 = (unint64_t)v1895;
                  v1365 = v1896;
                  v1362 = (uint64_t)v1894;
                }
              }
              else
              {
                v1437 = (*v1436 >> (~(_BYTE)v1365++ & 7)) & 1;
                v1896 = v1365;
              }
              v1438 = v1435 | (2 * v1437);
              v1439 = (unsigned __int8 *)(v1362 + (v1365 >> 3));
              if ((unint64_t)v1439 >= v1360)
              {
                v1440 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1440 = 0;
                  v1360 = (unint64_t)v1895;
                  v1365 = v1896;
                  v1362 = (uint64_t)v1894;
                }
              }
              else
              {
                v1440 = (*v1439 >> (~(_BYTE)v1365++ & 7)) & 1;
                v1896 = v1365;
              }
              v1441 = v1440 | v1438;
              v1442 = (unsigned __int8 *)(v1362 + (v1365 >> 3));
              if ((unint64_t)v1442 >= v1360)
              {
                if (v1898)
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
              }
              else
              {
                v1443 = *v1442;
                v1896 = v1365 + 1;
                if (((v1443 >> (~(_BYTE)v1365 & 7)) & 1) != 0)
                  v1441 = -v1441;
              }
              *((_BYTE *)v22 + 4) = v1441;
            }
          }
          v1444 = (unint64_t)v1895;
          v1445 = v1896;
          v1446 = (uint64_t)v1894;
          v1447 = &v1894[v1896 >> 3];
          if (v1447 >= v1895)
          {
            if (v1898)
              ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          }
          else
          {
            v1448 = *v1447;
            v1449 = ++v1896;
            if (((v1448 >> (~(_BYTE)v1445 & 7)) & 1) != 0)
            {
              v1450 = &v1894[v1449 >> 3];
              if (v1450 >= v1895)
              {
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1451 = 0;
                  v1444 = (unint64_t)v1895;
                  v1449 = v1896;
                  v1446 = (uint64_t)v1894;
                }
                else
                {
                  v1451 = 0;
                }
              }
              else
              {
                v1451 = (*v1450 >> (~(_BYTE)v1449 & 7)) & 1;
                v1449 = v1445 + 2;
                v1896 = v1445 + 2;
              }
              v1515 = 32 * v1451;
              v1516 = (unsigned __int8 *)(v1446 + (v1449 >> 3));
              if ((unint64_t)v1516 >= v1444)
              {
                v1517 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1517 = 0;
                  v1444 = (unint64_t)v1895;
                  v1449 = v1896;
                  v1446 = (uint64_t)v1894;
                }
              }
              else
              {
                v1517 = (*v1516 >> (~(_BYTE)v1449++ & 7)) & 1;
                v1896 = v1449;
              }
              v1518 = v1515 | (16 * v1517);
              v1519 = (unsigned __int8 *)(v1446 + (v1449 >> 3));
              if ((unint64_t)v1519 >= v1444)
              {
                v1520 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1520 = 0;
                  v1444 = (unint64_t)v1895;
                  v1449 = v1896;
                  v1446 = (uint64_t)v1894;
                }
              }
              else
              {
                v1520 = (*v1519 >> (~(_BYTE)v1449++ & 7)) & 1;
                v1896 = v1449;
              }
              v1521 = v1518 | (8 * v1520);
              v1522 = (unsigned __int8 *)(v1446 + (v1449 >> 3));
              if ((unint64_t)v1522 >= v1444)
              {
                v1523 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1523 = 0;
                  v1444 = (unint64_t)v1895;
                  v1449 = v1896;
                  v1446 = (uint64_t)v1894;
                }
              }
              else
              {
                v1523 = (*v1522 >> (~(_BYTE)v1449++ & 7)) & 1;
                v1896 = v1449;
              }
              v1524 = v1521 | (4 * v1523);
              v1525 = (unsigned __int8 *)(v1446 + (v1449 >> 3));
              if ((unint64_t)v1525 >= v1444)
              {
                v1526 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1526 = 0;
                  v1444 = (unint64_t)v1895;
                  v1449 = v1896;
                  v1446 = (uint64_t)v1894;
                }
              }
              else
              {
                v1526 = (*v1525 >> (~(_BYTE)v1449++ & 7)) & 1;
                v1896 = v1449;
              }
              v1527 = v1524 | (2 * v1526);
              v1528 = (unsigned __int8 *)(v1446 + (v1449 >> 3));
              if ((unint64_t)v1528 >= v1444)
              {
                v1529 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1529 = 0;
                  v1444 = (unint64_t)v1895;
                  v1449 = v1896;
                  v1446 = (uint64_t)v1894;
                }
              }
              else
              {
                v1529 = (*v1528 >> (~(_BYTE)v1449++ & 7)) & 1;
                v1896 = v1449;
              }
              v1530 = v1529 | v1527;
              v1531 = (unsigned __int8 *)(v1446 + (v1449 >> 3));
              if ((unint64_t)v1531 >= v1444)
              {
                if (v1898)
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
              }
              else
              {
                v1532 = *v1531;
                v1896 = v1449 + 1;
                if (((v1532 >> (~(_BYTE)v1449 & 7)) & 1) != 0)
                  v1530 = -v1530;
              }
              *((_BYTE *)v22 + 5) = v1530;
            }
          }
          v1533 = (unint64_t)v1895;
          v1534 = v1896;
          v1535 = (uint64_t)v1894;
          v1536 = &v1894[v1896 >> 3];
          if (v1536 >= v1895)
          {
            if (v1898)
              ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          }
          else
          {
            v1537 = *v1536;
            v1538 = ++v1896;
            if (((v1537 >> (~(_BYTE)v1534 & 7)) & 1) != 0)
            {
              v1539 = &v1894[v1538 >> 3];
              if (v1539 >= v1895)
              {
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1540 = 0;
                  v1533 = (unint64_t)v1895;
                  v1538 = v1896;
                  v1535 = (uint64_t)v1894;
                }
                else
                {
                  v1540 = 0;
                }
              }
              else
              {
                v1540 = (*v1539 >> (~(_BYTE)v1538 & 7)) & 1;
                v1538 = v1534 + 2;
                v1896 = v1534 + 2;
              }
              v1721 = 32 * v1540;
              v1722 = (unsigned __int8 *)(v1535 + (v1538 >> 3));
              if ((unint64_t)v1722 >= v1533)
              {
                v1723 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1723 = 0;
                  v1533 = (unint64_t)v1895;
                  v1538 = v1896;
                  v1535 = (uint64_t)v1894;
                }
              }
              else
              {
                v1723 = (*v1722 >> (~(_BYTE)v1538++ & 7)) & 1;
                v1896 = v1538;
              }
              v1724 = v1721 | (16 * v1723);
              v1725 = (unsigned __int8 *)(v1535 + (v1538 >> 3));
              if ((unint64_t)v1725 >= v1533)
              {
                v1726 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1726 = 0;
                  v1533 = (unint64_t)v1895;
                  v1538 = v1896;
                  v1535 = (uint64_t)v1894;
                }
              }
              else
              {
                v1726 = (*v1725 >> (~(_BYTE)v1538++ & 7)) & 1;
                v1896 = v1538;
              }
              v1727 = v1724 | (8 * v1726);
              v1728 = (unsigned __int8 *)(v1535 + (v1538 >> 3));
              if ((unint64_t)v1728 >= v1533)
              {
                v1729 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1729 = 0;
                  v1533 = (unint64_t)v1895;
                  v1538 = v1896;
                  v1535 = (uint64_t)v1894;
                }
              }
              else
              {
                v1729 = (*v1728 >> (~(_BYTE)v1538++ & 7)) & 1;
                v1896 = v1538;
              }
              v1730 = v1727 | (4 * v1729);
              v1731 = (unsigned __int8 *)(v1535 + (v1538 >> 3));
              if ((unint64_t)v1731 >= v1533)
              {
                v1732 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1732 = 0;
                  v1533 = (unint64_t)v1895;
                  v1538 = v1896;
                  v1535 = (uint64_t)v1894;
                }
              }
              else
              {
                v1732 = (*v1731 >> (~(_BYTE)v1538++ & 7)) & 1;
                v1896 = v1538;
              }
              v1733 = v1730 | (2 * v1732);
              v1734 = (unsigned __int8 *)(v1535 + (v1538 >> 3));
              if ((unint64_t)v1734 >= v1533)
              {
                v1735 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1735 = 0;
                  v1533 = (unint64_t)v1895;
                  v1538 = v1896;
                  v1535 = (uint64_t)v1894;
                }
              }
              else
              {
                v1735 = (*v1734 >> (~(_BYTE)v1538++ & 7)) & 1;
                v1896 = v1538;
              }
              v1736 = v1735 | v1733;
              v1737 = (unsigned __int8 *)(v1535 + (v1538 >> 3));
              if ((unint64_t)v1737 >= v1533)
              {
                if (v1898)
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
              }
              else
              {
                v1738 = *v1737;
                v1896 = v1538 + 1;
                if (((v1738 >> (~(_BYTE)v1538 & 7)) & 1) != 0)
                  v1736 = -v1736;
              }
              *((_BYTE *)v22 + 10) = v1736;
            }
          }
          v1739 = (unint64_t)v1895;
          v1740 = v1896;
          v1741 = (uint64_t)v1894;
          v1742 = &v1894[v1896 >> 3];
          if (v1742 >= v1895)
          {
            if (v1898)
              ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          }
          else
          {
            v1743 = *v1742;
            v1744 = ++v1896;
            if (((v1743 >> (~(_BYTE)v1740 & 7)) & 1) != 0)
            {
              v1745 = &v1894[v1744 >> 3];
              if (v1745 >= v1895)
              {
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1746 = 0;
                  v1739 = (unint64_t)v1895;
                  v1744 = v1896;
                  v1741 = (uint64_t)v1894;
                }
                else
                {
                  v1746 = 0;
                }
              }
              else
              {
                v1746 = (*v1745 >> (~(_BYTE)v1744 & 7)) & 1;
                v1744 = v1740 + 2;
                v1896 = v1740 + 2;
              }
              v1747 = 32 * v1746;
              v1748 = (unsigned __int8 *)(v1741 + (v1744 >> 3));
              if ((unint64_t)v1748 >= v1739)
              {
                v1749 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1749 = 0;
                  v1739 = (unint64_t)v1895;
                  v1744 = v1896;
                  v1741 = (uint64_t)v1894;
                }
              }
              else
              {
                v1749 = (*v1748 >> (~(_BYTE)v1744++ & 7)) & 1;
                v1896 = v1744;
              }
              v1750 = v1747 | (16 * v1749);
              v1751 = (unsigned __int8 *)(v1741 + (v1744 >> 3));
              if ((unint64_t)v1751 >= v1739)
              {
                v1752 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1752 = 0;
                  v1739 = (unint64_t)v1895;
                  v1744 = v1896;
                  v1741 = (uint64_t)v1894;
                }
              }
              else
              {
                v1752 = (*v1751 >> (~(_BYTE)v1744++ & 7)) & 1;
                v1896 = v1744;
              }
              v1753 = v1750 | (8 * v1752);
              v1754 = (unsigned __int8 *)(v1741 + (v1744 >> 3));
              if ((unint64_t)v1754 >= v1739)
              {
                v1755 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1755 = 0;
                  v1739 = (unint64_t)v1895;
                  v1744 = v1896;
                  v1741 = (uint64_t)v1894;
                }
              }
              else
              {
                v1755 = (*v1754 >> (~(_BYTE)v1744++ & 7)) & 1;
                v1896 = v1744;
              }
              v1756 = v1753 | (4 * v1755);
              v1757 = (unsigned __int8 *)(v1741 + (v1744 >> 3));
              if ((unint64_t)v1757 >= v1739)
              {
                v1758 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1758 = 0;
                  v1739 = (unint64_t)v1895;
                  v1744 = v1896;
                  v1741 = (uint64_t)v1894;
                }
              }
              else
              {
                v1758 = (*v1757 >> (~(_BYTE)v1744++ & 7)) & 1;
                v1896 = v1744;
              }
              v1759 = v1756 | (2 * v1758);
              v1760 = (unsigned __int8 *)(v1741 + (v1744 >> 3));
              if ((unint64_t)v1760 >= v1739)
              {
                v1761 = (int)v1898;
                if (v1898)
                {
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  v1761 = 0;
                  v1739 = (unint64_t)v1895;
                  v1744 = v1896;
                  v1741 = (uint64_t)v1894;
                }
              }
              else
              {
                v1761 = (*v1760 >> (~(_BYTE)v1744++ & 7)) & 1;
                v1896 = v1744;
              }
              v1762 = v1761 | v1759;
              v1763 = (unsigned __int8 *)(v1741 + (v1744 >> 3));
              if ((unint64_t)v1763 >= v1739)
              {
                if (v1898)
                  ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
              }
              else
              {
                v1764 = *v1763;
                v1896 = v1744 + 1;
                if (((v1764 >> (~(_BYTE)v1744 & 7)) & 1) != 0)
                  v1762 = -v1762;
              }
              *((_BYTE *)v22 + 11) = v1762;
            }
          }
        }
      }
    }
  }
  v447 = (unint64_t)v1895;
  v448 = v1896;
  v449 = (uint64_t)v1894;
  v450 = &v1894[v1896 >> 3];
  if (v450 >= v1895)
  {
    v451 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v451 = 0;
      v447 = (unint64_t)v1895;
      v448 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v451 = (*v450 >> (~(_BYTE)v1896 & 7)) & 1;
    v448 = ++v1896;
  }
  v452 = v451 << 7;
  v453 = (unsigned __int8 *)(v449 + (v448 >> 3));
  if ((unint64_t)v453 >= v447)
  {
    v454 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v454 = 0;
      v447 = (unint64_t)v1895;
      v448 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v454 = (*v453 >> (~(_BYTE)v448++ & 7)) & 1;
    v1896 = v448;
  }
  v455 = v452 | (v454 << 6);
  v456 = (unsigned __int8 *)(v449 + (v448 >> 3));
  if ((unint64_t)v456 >= v447)
  {
    v457 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v457 = 0;
      v447 = (unint64_t)v1895;
      v448 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v457 = (*v456 >> (~(_BYTE)v448++ & 7)) & 1;
    v1896 = v448;
  }
  v458 = v455 | (32 * v457);
  v459 = (unsigned __int8 *)(v449 + (v448 >> 3));
  if ((unint64_t)v459 >= v447)
  {
    v460 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v460 = 0;
      v447 = (unint64_t)v1895;
      v448 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v460 = (*v459 >> (~(_BYTE)v448++ & 7)) & 1;
    v1896 = v448;
  }
  v461 = v458 | (16 * v460);
  v462 = (unsigned __int8 *)(v449 + (v448 >> 3));
  if ((unint64_t)v462 >= v447)
  {
    v463 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v463 = 0;
      v447 = (unint64_t)v1895;
      v448 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v463 = (*v462 >> (~(_BYTE)v448++ & 7)) & 1;
    v1896 = v448;
  }
  v464 = v461 | (8 * v463);
  v465 = (unsigned __int8 *)(v449 + (v448 >> 3));
  if ((unint64_t)v465 >= v447)
  {
    v466 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v466 = 0;
      v447 = (unint64_t)v1895;
      v448 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v466 = (*v465 >> (~(_BYTE)v448++ & 7)) & 1;
    v1896 = v448;
  }
  v467 = v464 | (4 * v466);
  v468 = (unsigned __int8 *)(v449 + (v448 >> 3));
  if ((unint64_t)v468 >= v447)
  {
    v469 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v469 = 0;
      v447 = (unint64_t)v1895;
      v448 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v469 = (*v468 >> (~(_BYTE)v448++ & 7)) & 1;
    v1896 = v448;
  }
  v470 = v467 | (2 * v469);
  v471 = (unsigned __int8 *)(v449 + (v448 >> 3));
  if ((unint64_t)v471 >= v447)
  {
    v472 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v472 = 0;
      v447 = (unint64_t)v1895;
      v448 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v472 = (*v471 >> (~(_BYTE)v448++ & 7)) & 1;
    v1896 = v448;
  }
  *((_DWORD *)v8 + 497) = v472 | v470;
  v473 = (unsigned __int8 *)(v449 + (v448 >> 3));
  if ((unint64_t)v473 >= v447)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    goto LABEL_706;
  }
  v474 = *v473;
  v475 = v448 + 1;
  v1896 = v448 + 1;
  if (((v474 >> (~(_BYTE)v448 & 7)) & 1) == 0)
  {
LABEL_706:
    v481 = 0;
    goto LABEL_707;
  }
  v476 = (unsigned __int8 *)(v449 + (v475 >> 3));
  if ((unint64_t)v476 >= v447)
  {
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v447 = (unint64_t)v1895;
      v475 = v1896;
      v449 = (uint64_t)v1894;
      v478 = 0;
      v479 = &v1894[v1896 >> 3];
      if (v479 < v1895)
        goto LABEL_703;
    }
    else
    {
      v478 = 0;
      v479 = (unsigned __int8 *)(v449 + (v475 >> 3));
      if ((unint64_t)v479 < v447)
        goto LABEL_703;
    }
LABEL_809:
    v480 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v480 = 0;
      v447 = (unint64_t)v1895;
      v475 = v1896;
      v449 = (uint64_t)v1894;
    }
    goto LABEL_811;
  }
  v477 = (*v476 >> (~(_BYTE)v475 & 7)) & 1;
  v475 = v448 + 2;
  v1896 = v448 + 2;
  v478 = 8 * v477;
  v479 = (unsigned __int8 *)(v449 + ((v448 + 2) >> 3));
  if ((unint64_t)v479 >= v447)
    goto LABEL_809;
LABEL_703:
  v480 = (*v479 >> (~(_BYTE)v475++ & 7)) & 1;
  v1896 = v475;
LABEL_811:
  v566 = v478 | (4 * v480);
  v567 = (unsigned __int8 *)(v449 + (v475 >> 3));
  if ((unint64_t)v567 >= v447)
  {
    v568 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v568 = 0;
      v447 = (unint64_t)v1895;
      v475 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v568 = (*v567 >> (~(_BYTE)v475++ & 7)) & 1;
    v1896 = v475;
  }
  v575 = v566 | (2 * v568);
  v576 = (unsigned __int8 *)(v449 + (v475 >> 3));
  if ((unint64_t)v576 >= v447)
  {
    v577 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v577 = 0;
      v447 = (unint64_t)v1895;
      v475 = v1896;
      v449 = (uint64_t)v1894;
    }
  }
  else
  {
    v577 = (*v576 >> (~(_BYTE)v475++ & 7)) & 1;
    v1896 = v475;
  }
  v481 = v577 | v575;
  v584 = (unsigned __int8 *)(v449 + (v475 >> 3));
  if ((unint64_t)v584 >= v447)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
  }
  else
  {
    v585 = *v584;
    v1896 = v475 + 1;
    if (((v585 >> (~(_BYTE)v475 & 7)) & 1) != 0)
      v481 = -v481;
  }
LABEL_707:
  *((_DWORD *)v8 + 498) = v481;
  v482 = (unint64_t)v1895;
  v483 = v1896;
  v484 = (uint64_t)v1894;
  v485 = &v1894[v1896 >> 3];
  if (v485 >= v1895)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    goto LABEL_714;
  }
  v486 = *v485;
  v487 = ++v1896;
  if (((v486 >> (~(_BYTE)v483 & 7)) & 1) == 0)
  {
LABEL_714:
    v493 = 0;
    goto LABEL_715;
  }
  v488 = &v1894[v487 >> 3];
  if (v488 >= v1895)
  {
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v482 = (unint64_t)v1895;
      v487 = v1896;
      v484 = (uint64_t)v1894;
      v490 = 0;
      v491 = &v1894[v1896 >> 3];
      if (v491 < v1895)
        goto LABEL_711;
    }
    else
    {
      v490 = 0;
      v491 = &v1894[v487 >> 3];
      if (v491 < v1895)
        goto LABEL_711;
    }
LABEL_815:
    v492 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v492 = 0;
      v482 = (unint64_t)v1895;
      v487 = v1896;
      v484 = (uint64_t)v1894;
    }
    goto LABEL_817;
  }
  v489 = (*v488 >> (~(_BYTE)v487 & 7)) & 1;
  v487 = v483 + 2;
  v1896 = v483 + 2;
  v490 = 8 * v489;
  v491 = &v1894[(v483 + 2) >> 3];
  if (v491 >= v1895)
    goto LABEL_815;
LABEL_711:
  v492 = (*v491 >> (~(_BYTE)v487++ & 7)) & 1;
  v1896 = v487;
LABEL_817:
  v569 = v490 | (4 * v492);
  v570 = (unsigned __int8 *)(v484 + (v487 >> 3));
  if ((unint64_t)v570 >= v482)
  {
    v571 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v571 = 0;
      v482 = (unint64_t)v1895;
      v487 = v1896;
      v484 = (uint64_t)v1894;
    }
  }
  else
  {
    v571 = (*v570 >> (~(_BYTE)v487++ & 7)) & 1;
    v1896 = v487;
  }
  v578 = v569 | (2 * v571);
  v579 = (unsigned __int8 *)(v484 + (v487 >> 3));
  if ((unint64_t)v579 >= v482)
  {
    v580 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v580 = 0;
      v482 = (unint64_t)v1895;
      v487 = v1896;
      v484 = (uint64_t)v1894;
    }
  }
  else
  {
    v580 = (*v579 >> (~(_BYTE)v487++ & 7)) & 1;
    v1896 = v487;
  }
  v493 = v580 | v578;
  v586 = (unsigned __int8 *)(v484 + (v487 >> 3));
  if ((unint64_t)v586 >= v482)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
  }
  else
  {
    v587 = *v586;
    v1896 = v487 + 1;
    if (((v587 >> (~(_BYTE)v487 & 7)) & 1) != 0)
      v493 = -v493;
  }
LABEL_715:
  *((_DWORD *)v8 + 499) = v493;
  v494 = (unint64_t)v1895;
  v495 = v1896;
  v496 = (uint64_t)v1894;
  v497 = &v1894[v1896 >> 3];
  if (v497 >= v1895)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    goto LABEL_722;
  }
  v498 = *v497;
  v499 = ++v1896;
  if (((v498 >> (~(_BYTE)v495 & 7)) & 1) == 0)
  {
LABEL_722:
    v505 = 0;
    goto LABEL_723;
  }
  v500 = &v1894[v499 >> 3];
  if (v500 >= v1895)
  {
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v494 = (unint64_t)v1895;
      v499 = v1896;
      v496 = (uint64_t)v1894;
      v502 = 0;
      v503 = &v1894[v1896 >> 3];
      if (v503 < v1895)
        goto LABEL_719;
    }
    else
    {
      v502 = 0;
      v503 = &v1894[v499 >> 3];
      if (v503 < v1895)
        goto LABEL_719;
    }
LABEL_821:
    v504 = (int)v1898;
    if (v1898)
    {
      v1898(v1897);
      v504 = 0;
      v494 = (unint64_t)v1895;
      v499 = v1896;
      v496 = (uint64_t)v1894;
    }
    goto LABEL_823;
  }
  v501 = (*v500 >> (~(_BYTE)v499 & 7)) & 1;
  v499 = v495 + 2;
  v1896 = v495 + 2;
  v502 = 8 * v501;
  v503 = &v1894[(v495 + 2) >> 3];
  if (v503 >= v1895)
    goto LABEL_821;
LABEL_719:
  v504 = (*v503 >> (~(_BYTE)v499++ & 7)) & 1;
  v1896 = v499;
LABEL_823:
  v572 = v502 | (4 * v504);
  v573 = (unsigned __int8 *)(v496 + (v499 >> 3));
  if ((unint64_t)v573 >= v494)
  {
    v574 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v574 = 0;
      v494 = (unint64_t)v1895;
      v499 = v1896;
      v496 = (uint64_t)v1894;
    }
  }
  else
  {
    v574 = (*v573 >> (~(_BYTE)v499++ & 7)) & 1;
    v1896 = v499;
  }
  v581 = v572 | (2 * v574);
  v582 = (unsigned __int8 *)(v496 + (v499 >> 3));
  if ((unint64_t)v582 >= v494)
  {
    v583 = (int)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v583 = 0;
      v494 = (unint64_t)v1895;
      v499 = v1896;
      v496 = (uint64_t)v1894;
    }
  }
  else
  {
    v583 = (*v582 >> (~(_BYTE)v499++ & 7)) & 1;
    v1896 = v499;
  }
  v505 = v583 | v581;
  v588 = (unsigned __int8 *)(v496 + (v499 >> 3));
  if ((unint64_t)v588 >= v494)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
  }
  else
  {
    v589 = *v588;
    v1896 = v499 + 1;
    if (((v589 >> (~(_BYTE)v499 & 7)) & 1) != 0)
      v505 = -v505;
  }
LABEL_723:
  *((_DWORD *)v8 + 500) = v505;
  v506 = *((_DWORD *)v22 + 3354);
  *((_DWORD *)v22 + 3355) = v506;
  v507 = *((_DWORD *)v8 + 497);
  v508 = !*(_QWORD *)(v8 + 994) && !*((_DWORD *)v8 + 499) && v505 == 0;
  *((_DWORD *)v8 + 157) = v508;
  *((_DWORD *)v8 + 156) = v506;
  *(__int16 *)((char *)v22 + 33) = 0;
  v509 = (unint64_t)v1895;
  v510 = v1896;
  v511 = (uint64_t)v1894;
  v512 = &v1894[v1896 >> 3];
  if (v512 >= v1895)
  {
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v507 = *((_DWORD *)v8 + 497);
    }
    *((_BYTE *)v22 + 32) = 0;
LABEL_737:
    v524 = *((_DWORD *)v22 + 3354);
    switch(v524)
    {
      case 8:
        v525 = dc_qlookup_0;
        break;
      case 12:
        v525 = (__int16 *)&dc_qlookup_12;
        break;
      case 10:
        v525 = (__int16 *)&dc_qlookup_10;
        break;
      default:
        v8[1002] = -1;
        goto LABEL_746;
    }
    v526 = *((_DWORD *)v8 + 498) + v507;
    if (v526 >= 255)
      v526 = 255;
    v8[1002] = v525[v526 & ~(v526 >> 31)];
    if (v524 == 8)
    {
      v527 = ac_qlookup_0;
      goto LABEL_752;
    }
LABEL_746:
    if (v524 == 12)
    {
      v527 = ac_qlookup_12;
    }
    else
    {
      if (v524 != 10)
      {
        v8[1003] = -1;
        v529 = *((_DWORD *)v8 + 499);
        goto LABEL_756;
      }
      v527 = ac_qlookup_10;
    }
LABEL_752:
    if (v507 >= 255)
      v528 = 255;
    else
      v528 = v507;
    v8[1003] = v527[v528 & ~(v528 >> 31)];
    v529 = *((_DWORD *)v8 + 499);
    if (v524 == 8)
    {
      v530 = dc_qlookup_0;
      goto LABEL_762;
    }
LABEL_756:
    if (v524 == 12)
    {
      v530 = (__int16 *)&dc_qlookup_12;
    }
    else
    {
      if (v524 != 10)
      {
        v8[1018] = -1;
        v532 = *((_DWORD *)v8 + 500);
        goto LABEL_765;
      }
      v530 = (__int16 *)&dc_qlookup_10;
    }
LABEL_762:
    v531 = v529 + v507;
    if (v531 >= 255)
      v531 = 255;
    v8[1018] = v530[v531 & ~(v531 >> 31)];
    v532 = *((_DWORD *)v8 + 500);
    if (v524 == 8)
    {
      v533 = ac_qlookup_0;
      goto LABEL_771;
    }
LABEL_765:
    if (v524 == 12)
    {
      v533 = ac_qlookup_12;
    }
    else
    {
      if (v524 != 10)
      {
        v535 = -1;
LABEL_775:
        v8[1019] = v535;
        goto LABEL_776;
      }
      v533 = ac_qlookup_10;
    }
LABEL_771:
    v534 = v532 + v507;
    if (v534 >= 255)
      v534 = 255;
    v535 = v533[v534 & ~(v534 >> 31)];
    goto LABEL_775;
  }
  v513 = *v512 >> (~(_BYTE)v1896 & 7);
  v514 = ++v1896;
  *((_BYTE *)v22 + 32) = v513 & 1;
  if ((v513 & 1) == 0)
    goto LABEL_737;
  v515 = (unsigned __int8 *)(v511 + (v514 >> 3));
  if ((unint64_t)v515 >= v509)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    *((_BYTE *)v22 + 33) = 0;
    v591 = (unint64_t)v1895;
    v590 = v1896;
    v592 = (uint64_t)v1894;
    v593 = &v1894[v1896 >> 3];
    v1870 = v22;
    if (v593 < v1895)
      goto LABEL_1809;
    goto LABEL_861;
  }
  v516 = *v515 >> (~(_BYTE)v514 & 7);
  v517 = v510 + 2;
  v1896 = v510 + 2;
  *((_BYTE *)v22 + 33) = v516 & 1;
  if ((v516 & 1) == 0)
    goto LABEL_1808;
  v518 = (unsigned __int8 *)(v511 + (v517 >> 3));
  if ((unint64_t)v518 >= v509)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
  }
  else
  {
    v519 = ~(_BYTE)v517 & 7;
    v520 = *v518;
    v521 = v510 + 3;
    v1896 = v510 + 3;
    if (((v520 >> v519) & 1) != 0)
    {
      v522 = (unsigned __int8 *)(v511 + (v521 >> 3));
      if ((unint64_t)v522 >= v509)
      {
        if (v1898)
        {
          ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          LOBYTE(v523) = 0;
          v509 = (unint64_t)v1895;
          v521 = v1896;
          v511 = (uint64_t)v1894;
        }
        else
        {
          LOBYTE(v523) = 0;
        }
      }
      else
      {
        v523 = (*v522 >> (~(_BYTE)v521 & 7)) & 1;
        v521 = v510 + 4;
        v1896 = v510 + 4;
      }
      v1284 = (_BYTE)v523 << 7;
      v1285 = (unsigned __int8 *)(v511 + (v521 >> 3));
      if ((unint64_t)v1285 >= v509)
      {
        LOBYTE(v1286) = (_BYTE)v1898;
        if (v1898)
        {
          ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          LOBYTE(v1286) = 0;
          v509 = (unint64_t)v1895;
          v521 = v1896;
          v511 = (uint64_t)v1894;
        }
      }
      else
      {
        v1286 = (*v1285 >> (~(_BYTE)v521++ & 7)) & 1;
        v1896 = v521;
      }
      v1287 = v1284 | ((_BYTE)v1286 << 6);
      v1288 = (unsigned __int8 *)(v511 + (v521 >> 3));
      if ((unint64_t)v1288 >= v509)
      {
        LOBYTE(v1289) = (_BYTE)v1898;
        if (v1898)
        {
          ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          LOBYTE(v1289) = 0;
          v509 = (unint64_t)v1895;
          v521 = v1896;
          v511 = (uint64_t)v1894;
        }
      }
      else
      {
        v1289 = (*v1288 >> (~(_BYTE)v521++ & 7)) & 1;
        v1896 = v521;
      }
      v1290 = v1287 | (32 * v1289);
      v1291 = (unsigned __int8 *)(v511 + (v521 >> 3));
      if ((unint64_t)v1291 >= v509)
      {
        LOBYTE(v1292) = (_BYTE)v1898;
        if (v1898)
        {
          ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          LOBYTE(v1292) = 0;
          v509 = (unint64_t)v1895;
          v521 = v1896;
          v511 = (uint64_t)v1894;
        }
      }
      else
      {
        v1292 = (*v1291 >> (~(_BYTE)v521++ & 7)) & 1;
        v1896 = v521;
      }
      v1293 = v1290 | (16 * v1292);
      v1294 = (unsigned __int8 *)(v511 + (v521 >> 3));
      if ((unint64_t)v1294 >= v509)
      {
        LOBYTE(v1295) = (_BYTE)v1898;
        if (v1898)
        {
          ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          LOBYTE(v1295) = 0;
          v509 = (unint64_t)v1895;
          v521 = v1896;
          v511 = (uint64_t)v1894;
        }
      }
      else
      {
        v1295 = (*v1294 >> (~(_BYTE)v521++ & 7)) & 1;
        v1896 = v521;
      }
      v1296 = v1293 | (8 * v1295);
      v1297 = (unsigned __int8 *)(v511 + (v521 >> 3));
      if ((unint64_t)v1297 >= v509)
      {
        LOBYTE(v1298) = (_BYTE)v1898;
        if (v1898)
        {
          ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          LOBYTE(v1298) = 0;
          v509 = (unint64_t)v1895;
          v521 = v1896;
          v511 = (uint64_t)v1894;
        }
      }
      else
      {
        v1298 = (*v1297 >> (~(_BYTE)v521++ & 7)) & 1;
        v1896 = v521;
      }
      v1299 = v1296 | (4 * v1298);
      v1300 = (unsigned __int8 *)(v511 + (v521 >> 3));
      if ((unint64_t)v1300 >= v509)
      {
        LOBYTE(v1301) = (_BYTE)v1898;
        if (v1898)
        {
          ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
          LOBYTE(v1301) = 0;
          v509 = (unint64_t)v1895;
          v521 = v1896;
          v511 = (uint64_t)v1894;
        }
      }
      else
      {
        v1301 = (*v1300 >> (~(_BYTE)v521++ & 7)) & 1;
        v1896 = v521;
      }
      v1302 = v1299 | (2 * v1301);
      v1303 = (unsigned __int8 *)(v511 + (v521 >> 3));
      if ((unint64_t)v1303 >= v509)
      {
        if (v1898)
          ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1304) = 0;
      }
      else
      {
        v1304 = (*v1303 >> (~(_BYTE)v521 & 7)) & 1;
        v1896 = v521 + 1;
      }
      *((_BYTE *)v22 + 37) = v1304 | v1302;
      v678 = (unint64_t)v1895;
      v679 = v1896;
      v680 = (uint64_t)v1894;
      v681 = &v1894[v1896 >> 3];
      if (v681 >= v1895)
        goto LABEL_1462;
      goto LABEL_949;
    }
  }
  *((_BYTE *)v22 + 37) = -1;
  v678 = (unint64_t)v1895;
  v679 = v1896;
  v680 = (uint64_t)v1894;
  v681 = &v1894[v1896 >> 3];
  if (v681 >= v1895)
  {
LABEL_1462:
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
LABEL_1464:
    *((_BYTE *)v22 + 38) = -1;
    v1305 = (unint64_t)v1895;
    v1306 = v1896;
    v1307 = (uint64_t)v1894;
    v1308 = &v1894[v1896 >> 3];
    if (v1308 < v1895)
      goto LABEL_1465;
LABEL_1501:
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    goto LABEL_1503;
  }
LABEL_949:
  v682 = *v681;
  v683 = v679 + 1;
  v1896 = v679 + 1;
  if (((v682 >> (~(_BYTE)v679 & 7)) & 1) == 0)
    goto LABEL_1464;
  v684 = (unsigned __int8 *)(v680 + (v683 >> 3));
  if ((unint64_t)v684 >= v678)
  {
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v685) = 0;
      v678 = (unint64_t)v1895;
      v683 = v1896;
      v680 = (uint64_t)v1894;
    }
    else
    {
      LOBYTE(v685) = 0;
    }
  }
  else
  {
    v685 = (*v684 >> (~(_BYTE)v683 & 7)) & 1;
    v683 = v679 + 2;
    v1896 = v679 + 2;
  }
  v1313 = (_BYTE)v685 << 7;
  v1314 = (unsigned __int8 *)(v680 + (v683 >> 3));
  if ((unint64_t)v1314 >= v678)
  {
    LOBYTE(v1315) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1315) = 0;
      v678 = (unint64_t)v1895;
      v683 = v1896;
      v680 = (uint64_t)v1894;
    }
  }
  else
  {
    v1315 = (*v1314 >> (~(_BYTE)v683++ & 7)) & 1;
    v1896 = v683;
  }
  v1316 = v1313 | ((_BYTE)v1315 << 6);
  v1317 = (unsigned __int8 *)(v680 + (v683 >> 3));
  if ((unint64_t)v1317 >= v678)
  {
    LOBYTE(v1318) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1318) = 0;
      v678 = (unint64_t)v1895;
      v683 = v1896;
      v680 = (uint64_t)v1894;
    }
  }
  else
  {
    v1318 = (*v1317 >> (~(_BYTE)v683++ & 7)) & 1;
    v1896 = v683;
  }
  v1319 = v1316 | (32 * v1318);
  v1320 = (unsigned __int8 *)(v680 + (v683 >> 3));
  if ((unint64_t)v1320 >= v678)
  {
    LOBYTE(v1321) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1321) = 0;
      v678 = (unint64_t)v1895;
      v683 = v1896;
      v680 = (uint64_t)v1894;
    }
  }
  else
  {
    v1321 = (*v1320 >> (~(_BYTE)v683++ & 7)) & 1;
    v1896 = v683;
  }
  v1322 = v1319 | (16 * v1321);
  v1323 = (unsigned __int8 *)(v680 + (v683 >> 3));
  if ((unint64_t)v1323 >= v678)
  {
    LOBYTE(v1324) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1324) = 0;
      v678 = (unint64_t)v1895;
      v683 = v1896;
      v680 = (uint64_t)v1894;
    }
  }
  else
  {
    v1324 = (*v1323 >> (~(_BYTE)v683++ & 7)) & 1;
    v1896 = v683;
  }
  v1325 = v1322 | (8 * v1324);
  v1326 = (unsigned __int8 *)(v680 + (v683 >> 3));
  if ((unint64_t)v1326 >= v678)
  {
    LOBYTE(v1327) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1327) = 0;
      v678 = (unint64_t)v1895;
      v683 = v1896;
      v680 = (uint64_t)v1894;
    }
  }
  else
  {
    v1327 = (*v1326 >> (~(_BYTE)v683++ & 7)) & 1;
    v1896 = v683;
  }
  v1328 = v1325 | (4 * v1327);
  v1329 = (unsigned __int8 *)(v680 + (v683 >> 3));
  if ((unint64_t)v1329 >= v678)
  {
    LOBYTE(v1330) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1330) = 0;
      v678 = (unint64_t)v1895;
      v683 = v1896;
      v680 = (uint64_t)v1894;
    }
  }
  else
  {
    v1330 = (*v1329 >> (~(_BYTE)v683++ & 7)) & 1;
    v1896 = v683;
  }
  v1331 = v1328 | (2 * v1330);
  v1332 = (unsigned __int8 *)(v680 + (v683 >> 3));
  if ((unint64_t)v1332 >= v678)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    LOBYTE(v1333) = 0;
  }
  else
  {
    v1333 = (*v1332 >> (~(_BYTE)v683 & 7)) & 1;
    v1896 = v683 + 1;
  }
  *((_BYTE *)v22 + 38) = v1333 | v1331;
  v1305 = (unint64_t)v1895;
  v1306 = v1896;
  v1307 = (uint64_t)v1894;
  v1308 = &v1894[v1896 >> 3];
  if (v1308 >= v1895)
    goto LABEL_1501;
LABEL_1465:
  v1309 = *v1308;
  v1310 = v1306 + 1;
  v1896 = v1306 + 1;
  if (((v1309 >> (~(_BYTE)v1306 & 7)) & 1) != 0)
  {
    v1311 = (unsigned __int8 *)(v1307 + (v1310 >> 3));
    if ((unint64_t)v1311 >= v1305)
    {
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1312) = 0;
        v1305 = (unint64_t)v1895;
        v1310 = v1896;
        v1307 = (uint64_t)v1894;
      }
      else
      {
        LOBYTE(v1312) = 0;
      }
    }
    else
    {
      v1312 = (*v1311 >> (~(_BYTE)v1310 & 7)) & 1;
      v1310 = v1306 + 2;
      v1896 = v1306 + 2;
    }
    v1368 = (_BYTE)v1312 << 7;
    v1369 = (unsigned __int8 *)(v1307 + (v1310 >> 3));
    if ((unint64_t)v1369 >= v1305)
    {
      LOBYTE(v1370) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1370) = 0;
        v1305 = (unint64_t)v1895;
        v1310 = v1896;
        v1307 = (uint64_t)v1894;
      }
    }
    else
    {
      v1370 = (*v1369 >> (~(_BYTE)v1310++ & 7)) & 1;
      v1896 = v1310;
    }
    v1371 = v1368 | ((_BYTE)v1370 << 6);
    v1372 = (unsigned __int8 *)(v1307 + (v1310 >> 3));
    if ((unint64_t)v1372 >= v1305)
    {
      LOBYTE(v1373) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1373) = 0;
        v1305 = (unint64_t)v1895;
        v1310 = v1896;
        v1307 = (uint64_t)v1894;
      }
    }
    else
    {
      v1373 = (*v1372 >> (~(_BYTE)v1310++ & 7)) & 1;
      v1896 = v1310;
    }
    v1374 = v1371 | (32 * v1373);
    v1375 = (unsigned __int8 *)(v1307 + (v1310 >> 3));
    if ((unint64_t)v1375 >= v1305)
    {
      LOBYTE(v1376) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1376) = 0;
        v1305 = (unint64_t)v1895;
        v1310 = v1896;
        v1307 = (uint64_t)v1894;
      }
    }
    else
    {
      v1376 = (*v1375 >> (~(_BYTE)v1310++ & 7)) & 1;
      v1896 = v1310;
    }
    v1377 = v1374 | (16 * v1376);
    v1378 = (unsigned __int8 *)(v1307 + (v1310 >> 3));
    if ((unint64_t)v1378 >= v1305)
    {
      LOBYTE(v1379) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1379) = 0;
        v1305 = (unint64_t)v1895;
        v1310 = v1896;
        v1307 = (uint64_t)v1894;
      }
    }
    else
    {
      v1379 = (*v1378 >> (~(_BYTE)v1310++ & 7)) & 1;
      v1896 = v1310;
    }
    v1380 = v1377 | (8 * v1379);
    v1381 = (unsigned __int8 *)(v1307 + (v1310 >> 3));
    if ((unint64_t)v1381 >= v1305)
    {
      LOBYTE(v1382) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1382) = 0;
        v1305 = (unint64_t)v1895;
        v1310 = v1896;
        v1307 = (uint64_t)v1894;
      }
    }
    else
    {
      v1382 = (*v1381 >> (~(_BYTE)v1310++ & 7)) & 1;
      v1896 = v1310;
    }
    v1383 = v1380 | (4 * v1382);
    v1384 = (unsigned __int8 *)(v1307 + (v1310 >> 3));
    if ((unint64_t)v1384 >= v1305)
    {
      LOBYTE(v1385) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1385) = 0;
        v1305 = (unint64_t)v1895;
        v1310 = v1896;
        v1307 = (uint64_t)v1894;
      }
    }
    else
    {
      v1385 = (*v1384 >> (~(_BYTE)v1310++ & 7)) & 1;
      v1896 = v1310;
    }
    v1386 = v1383 | (2 * v1385);
    v1387 = (unsigned __int8 *)(v1307 + (v1310 >> 3));
    if ((unint64_t)v1387 >= v1305)
    {
      if (v1898)
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1388) = 0;
    }
    else
    {
      v1388 = (*v1387 >> (~(_BYTE)v1310 & 7)) & 1;
      v1896 = v1310 + 1;
    }
    *((_BYTE *)v22 + 39) = v1388 | v1386;
    v1334 = (unint64_t)v1895;
    v1335 = v1896;
    v1336 = (uint64_t)v1894;
    v1337 = &v1894[v1896 >> 3];
    if (v1337 >= v1895)
      goto LABEL_1575;
    goto LABEL_1504;
  }
LABEL_1503:
  *((_BYTE *)v22 + 39) = -1;
  v1334 = (unint64_t)v1895;
  v1335 = v1896;
  v1336 = (uint64_t)v1894;
  v1337 = &v1894[v1896 >> 3];
  if (v1337 >= v1895)
  {
LABEL_1575:
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
LABEL_1577:
    *((_BYTE *)v22 + 40) = -1;
    v1389 = (unint64_t)v1895;
    v1390 = v1896;
    v1391 = (uint64_t)v1894;
    v1392 = &v1894[v1896 >> 3];
    if (v1392 < v1895)
      goto LABEL_1578;
LABEL_1614:
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    goto LABEL_1616;
  }
LABEL_1504:
  v1338 = *v1337;
  v1339 = v1335 + 1;
  v1896 = v1335 + 1;
  if (((v1338 >> (~(_BYTE)v1335 & 7)) & 1) == 0)
    goto LABEL_1577;
  v1340 = (unsigned __int8 *)(v1336 + (v1339 >> 3));
  if ((unint64_t)v1340 >= v1334)
  {
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1341) = 0;
      v1334 = (unint64_t)v1895;
      v1339 = v1896;
      v1336 = (uint64_t)v1894;
    }
    else
    {
      LOBYTE(v1341) = 0;
    }
  }
  else
  {
    v1341 = (*v1340 >> (~(_BYTE)v1339 & 7)) & 1;
    v1339 = v1335 + 2;
    v1896 = v1335 + 2;
  }
  v1397 = (_BYTE)v1341 << 7;
  v1398 = (unsigned __int8 *)(v1336 + (v1339 >> 3));
  if ((unint64_t)v1398 >= v1334)
  {
    LOBYTE(v1399) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1399) = 0;
      v1334 = (unint64_t)v1895;
      v1339 = v1896;
      v1336 = (uint64_t)v1894;
    }
  }
  else
  {
    v1399 = (*v1398 >> (~(_BYTE)v1339++ & 7)) & 1;
    v1896 = v1339;
  }
  v1400 = v1397 | ((_BYTE)v1399 << 6);
  v1401 = (unsigned __int8 *)(v1336 + (v1339 >> 3));
  if ((unint64_t)v1401 >= v1334)
  {
    LOBYTE(v1402) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1402) = 0;
      v1334 = (unint64_t)v1895;
      v1339 = v1896;
      v1336 = (uint64_t)v1894;
    }
  }
  else
  {
    v1402 = (*v1401 >> (~(_BYTE)v1339++ & 7)) & 1;
    v1896 = v1339;
  }
  v1403 = v1400 | (32 * v1402);
  v1404 = (unsigned __int8 *)(v1336 + (v1339 >> 3));
  if ((unint64_t)v1404 >= v1334)
  {
    LOBYTE(v1405) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1405) = 0;
      v1334 = (unint64_t)v1895;
      v1339 = v1896;
      v1336 = (uint64_t)v1894;
    }
  }
  else
  {
    v1405 = (*v1404 >> (~(_BYTE)v1339++ & 7)) & 1;
    v1896 = v1339;
  }
  v1406 = v1403 | (16 * v1405);
  v1407 = (unsigned __int8 *)(v1336 + (v1339 >> 3));
  if ((unint64_t)v1407 >= v1334)
  {
    LOBYTE(v1408) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1408) = 0;
      v1334 = (unint64_t)v1895;
      v1339 = v1896;
      v1336 = (uint64_t)v1894;
    }
  }
  else
  {
    v1408 = (*v1407 >> (~(_BYTE)v1339++ & 7)) & 1;
    v1896 = v1339;
  }
  v1409 = v1406 | (8 * v1408);
  v1410 = (unsigned __int8 *)(v1336 + (v1339 >> 3));
  if ((unint64_t)v1410 >= v1334)
  {
    LOBYTE(v1411) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1411) = 0;
      v1334 = (unint64_t)v1895;
      v1339 = v1896;
      v1336 = (uint64_t)v1894;
    }
  }
  else
  {
    v1411 = (*v1410 >> (~(_BYTE)v1339++ & 7)) & 1;
    v1896 = v1339;
  }
  v1412 = v1409 | (4 * v1411);
  v1413 = (unsigned __int8 *)(v1336 + (v1339 >> 3));
  if ((unint64_t)v1413 >= v1334)
  {
    LOBYTE(v1414) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1414) = 0;
      v1334 = (unint64_t)v1895;
      v1339 = v1896;
      v1336 = (uint64_t)v1894;
    }
  }
  else
  {
    v1414 = (*v1413 >> (~(_BYTE)v1339++ & 7)) & 1;
    v1896 = v1339;
  }
  v1415 = v1412 | (2 * v1414);
  v1416 = (unsigned __int8 *)(v1336 + (v1339 >> 3));
  if ((unint64_t)v1416 >= v1334)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    LOBYTE(v1417) = 0;
  }
  else
  {
    v1417 = (*v1416 >> (~(_BYTE)v1339 & 7)) & 1;
    v1896 = v1339 + 1;
  }
  *((_BYTE *)v22 + 40) = v1417 | v1415;
  v1389 = (unint64_t)v1895;
  v1390 = v1896;
  v1391 = (uint64_t)v1894;
  v1392 = &v1894[v1896 >> 3];
  if (v1392 >= v1895)
    goto LABEL_1614;
LABEL_1578:
  v1393 = *v1392;
  v1394 = v1390 + 1;
  v1896 = v1390 + 1;
  if (((v1393 >> (~(_BYTE)v1390 & 7)) & 1) != 0)
  {
    v1395 = (unsigned __int8 *)(v1391 + (v1394 >> 3));
    if ((unint64_t)v1395 >= v1389)
    {
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1396) = 0;
        v1389 = (unint64_t)v1895;
        v1394 = v1896;
        v1391 = (uint64_t)v1894;
      }
      else
      {
        LOBYTE(v1396) = 0;
      }
    }
    else
    {
      v1396 = (*v1395 >> (~(_BYTE)v1394 & 7)) & 1;
      v1394 = v1390 + 2;
      v1896 = v1390 + 2;
    }
    v1452 = (_BYTE)v1396 << 7;
    v1453 = (unsigned __int8 *)(v1391 + (v1394 >> 3));
    if ((unint64_t)v1453 >= v1389)
    {
      LOBYTE(v1454) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1454) = 0;
        v1389 = (unint64_t)v1895;
        v1394 = v1896;
        v1391 = (uint64_t)v1894;
      }
    }
    else
    {
      v1454 = (*v1453 >> (~(_BYTE)v1394++ & 7)) & 1;
      v1896 = v1394;
    }
    v1455 = v1452 | ((_BYTE)v1454 << 6);
    v1456 = (unsigned __int8 *)(v1391 + (v1394 >> 3));
    if ((unint64_t)v1456 >= v1389)
    {
      LOBYTE(v1457) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1457) = 0;
        v1389 = (unint64_t)v1895;
        v1394 = v1896;
        v1391 = (uint64_t)v1894;
      }
    }
    else
    {
      v1457 = (*v1456 >> (~(_BYTE)v1394++ & 7)) & 1;
      v1896 = v1394;
    }
    v1458 = v1455 | (32 * v1457);
    v1459 = (unsigned __int8 *)(v1391 + (v1394 >> 3));
    if ((unint64_t)v1459 >= v1389)
    {
      LOBYTE(v1460) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1460) = 0;
        v1389 = (unint64_t)v1895;
        v1394 = v1896;
        v1391 = (uint64_t)v1894;
      }
    }
    else
    {
      v1460 = (*v1459 >> (~(_BYTE)v1394++ & 7)) & 1;
      v1896 = v1394;
    }
    v1461 = v1458 | (16 * v1460);
    v1462 = (unsigned __int8 *)(v1391 + (v1394 >> 3));
    if ((unint64_t)v1462 >= v1389)
    {
      LOBYTE(v1463) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1463) = 0;
        v1389 = (unint64_t)v1895;
        v1394 = v1896;
        v1391 = (uint64_t)v1894;
      }
    }
    else
    {
      v1463 = (*v1462 >> (~(_BYTE)v1394++ & 7)) & 1;
      v1896 = v1394;
    }
    v1464 = v1461 | (8 * v1463);
    v1465 = (unsigned __int8 *)(v1391 + (v1394 >> 3));
    if ((unint64_t)v1465 >= v1389)
    {
      LOBYTE(v1466) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1466) = 0;
        v1389 = (unint64_t)v1895;
        v1394 = v1896;
        v1391 = (uint64_t)v1894;
      }
    }
    else
    {
      v1466 = (*v1465 >> (~(_BYTE)v1394++ & 7)) & 1;
      v1896 = v1394;
    }
    v1467 = v1464 | (4 * v1466);
    v1468 = (unsigned __int8 *)(v1391 + (v1394 >> 3));
    if ((unint64_t)v1468 >= v1389)
    {
      LOBYTE(v1469) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1469) = 0;
        v1389 = (unint64_t)v1895;
        v1394 = v1896;
        v1391 = (uint64_t)v1894;
      }
    }
    else
    {
      v1469 = (*v1468 >> (~(_BYTE)v1394++ & 7)) & 1;
      v1896 = v1394;
    }
    v1470 = v1467 | (2 * v1469);
    v1471 = (unsigned __int8 *)(v1391 + (v1394 >> 3));
    if ((unint64_t)v1471 >= v1389)
    {
      if (v1898)
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1472) = 0;
    }
    else
    {
      v1472 = (*v1471 >> (~(_BYTE)v1394 & 7)) & 1;
      v1896 = v1394 + 1;
    }
    *((_BYTE *)v22 + 41) = v1472 | v1470;
    v1418 = (unint64_t)v1895;
    v1419 = v1896;
    v1420 = (uint64_t)v1894;
    v1421 = &v1894[v1896 >> 3];
    if (v1421 >= v1895)
      goto LABEL_1688;
    goto LABEL_1617;
  }
LABEL_1616:
  *((_BYTE *)v22 + 41) = -1;
  v1418 = (unint64_t)v1895;
  v1419 = v1896;
  v1420 = (uint64_t)v1894;
  v1421 = &v1894[v1896 >> 3];
  if (v1421 >= v1895)
  {
LABEL_1688:
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
LABEL_1690:
    *((_BYTE *)v22 + 42) = -1;
    v1473 = (unint64_t)v1895;
    v1474 = v1896;
    v1475 = (uint64_t)v1894;
    v1476 = &v1894[v1896 >> 3];
    if (v1476 < v1895)
      goto LABEL_1691;
LABEL_1727:
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    goto LABEL_1729;
  }
LABEL_1617:
  v1422 = *v1421;
  v1423 = v1419 + 1;
  v1896 = v1419 + 1;
  if (((v1422 >> (~(_BYTE)v1419 & 7)) & 1) == 0)
    goto LABEL_1690;
  v1424 = (unsigned __int8 *)(v1420 + (v1423 >> 3));
  if ((unint64_t)v1424 >= v1418)
  {
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1425) = 0;
      v1418 = (unint64_t)v1895;
      v1423 = v1896;
      v1420 = (uint64_t)v1894;
    }
    else
    {
      LOBYTE(v1425) = 0;
    }
  }
  else
  {
    v1425 = (*v1424 >> (~(_BYTE)v1423 & 7)) & 1;
    v1423 = v1419 + 2;
    v1896 = v1419 + 2;
  }
  v1481 = (_BYTE)v1425 << 7;
  v1482 = (unsigned __int8 *)(v1420 + (v1423 >> 3));
  if ((unint64_t)v1482 >= v1418)
  {
    LOBYTE(v1483) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1483) = 0;
      v1418 = (unint64_t)v1895;
      v1423 = v1896;
      v1420 = (uint64_t)v1894;
    }
  }
  else
  {
    v1483 = (*v1482 >> (~(_BYTE)v1423++ & 7)) & 1;
    v1896 = v1423;
  }
  v1484 = v1481 | ((_BYTE)v1483 << 6);
  v1485 = (unsigned __int8 *)(v1420 + (v1423 >> 3));
  if ((unint64_t)v1485 >= v1418)
  {
    LOBYTE(v1486) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1486) = 0;
      v1418 = (unint64_t)v1895;
      v1423 = v1896;
      v1420 = (uint64_t)v1894;
    }
  }
  else
  {
    v1486 = (*v1485 >> (~(_BYTE)v1423++ & 7)) & 1;
    v1896 = v1423;
  }
  v1487 = v1484 | (32 * v1486);
  v1488 = (unsigned __int8 *)(v1420 + (v1423 >> 3));
  if ((unint64_t)v1488 >= v1418)
  {
    LOBYTE(v1489) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1489) = 0;
      v1418 = (unint64_t)v1895;
      v1423 = v1896;
      v1420 = (uint64_t)v1894;
    }
  }
  else
  {
    v1489 = (*v1488 >> (~(_BYTE)v1423++ & 7)) & 1;
    v1896 = v1423;
  }
  v1490 = v1487 | (16 * v1489);
  v1491 = (unsigned __int8 *)(v1420 + (v1423 >> 3));
  if ((unint64_t)v1491 >= v1418)
  {
    LOBYTE(v1492) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1492) = 0;
      v1418 = (unint64_t)v1895;
      v1423 = v1896;
      v1420 = (uint64_t)v1894;
    }
  }
  else
  {
    v1492 = (*v1491 >> (~(_BYTE)v1423++ & 7)) & 1;
    v1896 = v1423;
  }
  v1493 = v1490 | (8 * v1492);
  v1494 = (unsigned __int8 *)(v1420 + (v1423 >> 3));
  if ((unint64_t)v1494 >= v1418)
  {
    LOBYTE(v1495) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1495) = 0;
      v1418 = (unint64_t)v1895;
      v1423 = v1896;
      v1420 = (uint64_t)v1894;
    }
  }
  else
  {
    v1495 = (*v1494 >> (~(_BYTE)v1423++ & 7)) & 1;
    v1896 = v1423;
  }
  v1496 = v1493 | (4 * v1495);
  v1497 = (unsigned __int8 *)(v1420 + (v1423 >> 3));
  if ((unint64_t)v1497 >= v1418)
  {
    LOBYTE(v1498) = (_BYTE)v1898;
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1498) = 0;
      v1418 = (unint64_t)v1895;
      v1423 = v1896;
      v1420 = (uint64_t)v1894;
    }
  }
  else
  {
    v1498 = (*v1497 >> (~(_BYTE)v1423++ & 7)) & 1;
    v1896 = v1423;
  }
  v1499 = v1496 | (2 * v1498);
  v1500 = (unsigned __int8 *)(v1420 + (v1423 >> 3));
  if ((unint64_t)v1500 >= v1418)
  {
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    LOBYTE(v1501) = 0;
  }
  else
  {
    v1501 = (*v1500 >> (~(_BYTE)v1423 & 7)) & 1;
    v1896 = v1423 + 1;
  }
  *((_BYTE *)v22 + 42) = v1501 | v1499;
  v1473 = (unint64_t)v1895;
  v1474 = v1896;
  v1475 = (uint64_t)v1894;
  v1476 = &v1894[v1896 >> 3];
  if (v1476 >= v1895)
    goto LABEL_1727;
LABEL_1691:
  v1477 = *v1476;
  v1478 = v1474 + 1;
  v1896 = v1474 + 1;
  if (((v1477 >> (~(_BYTE)v1474 & 7)) & 1) != 0)
  {
    v1479 = (unsigned __int8 *)(v1475 + (v1478 >> 3));
    if ((unint64_t)v1479 >= v1473)
    {
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1480) = 0;
        v1473 = (unint64_t)v1895;
        v1478 = v1896;
        v1475 = (uint64_t)v1894;
      }
      else
      {
        LOBYTE(v1480) = 0;
      }
    }
    else
    {
      v1480 = (*v1479 >> (~(_BYTE)v1478 & 7)) & 1;
      v1478 = v1474 + 2;
      v1896 = v1474 + 2;
    }
    v1541 = (_BYTE)v1480 << 7;
    v1542 = (unsigned __int8 *)(v1475 + (v1478 >> 3));
    if ((unint64_t)v1542 >= v1473)
    {
      LOBYTE(v1543) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1543) = 0;
        v1473 = (unint64_t)v1895;
        v1478 = v1896;
        v1475 = (uint64_t)v1894;
      }
    }
    else
    {
      v1543 = (*v1542 >> (~(_BYTE)v1478++ & 7)) & 1;
      v1896 = v1478;
    }
    v1544 = v1541 | ((_BYTE)v1543 << 6);
    v1545 = (unsigned __int8 *)(v1475 + (v1478 >> 3));
    if ((unint64_t)v1545 >= v1473)
    {
      LOBYTE(v1546) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1546) = 0;
        v1473 = (unint64_t)v1895;
        v1478 = v1896;
        v1475 = (uint64_t)v1894;
      }
    }
    else
    {
      v1546 = (*v1545 >> (~(_BYTE)v1478++ & 7)) & 1;
      v1896 = v1478;
    }
    v1547 = v1544 | (32 * v1546);
    v1548 = (unsigned __int8 *)(v1475 + (v1478 >> 3));
    if ((unint64_t)v1548 >= v1473)
    {
      LOBYTE(v1549) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1549) = 0;
        v1473 = (unint64_t)v1895;
        v1478 = v1896;
        v1475 = (uint64_t)v1894;
      }
    }
    else
    {
      v1549 = (*v1548 >> (~(_BYTE)v1478++ & 7)) & 1;
      v1896 = v1478;
    }
    v1550 = v1547 | (16 * v1549);
    v1551 = (unsigned __int8 *)(v1475 + (v1478 >> 3));
    if ((unint64_t)v1551 >= v1473)
    {
      LOBYTE(v1552) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1552) = 0;
        v1473 = (unint64_t)v1895;
        v1478 = v1896;
        v1475 = (uint64_t)v1894;
      }
    }
    else
    {
      v1552 = (*v1551 >> (~(_BYTE)v1478++ & 7)) & 1;
      v1896 = v1478;
    }
    v1553 = v1550 | (8 * v1552);
    v1554 = (unsigned __int8 *)(v1475 + (v1478 >> 3));
    if ((unint64_t)v1554 >= v1473)
    {
      LOBYTE(v1555) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1555) = 0;
        v1473 = (unint64_t)v1895;
        v1478 = v1896;
        v1475 = (uint64_t)v1894;
      }
    }
    else
    {
      v1555 = (*v1554 >> (~(_BYTE)v1478++ & 7)) & 1;
      v1896 = v1478;
    }
    v1556 = v1553 | (4 * v1555);
    v1557 = (unsigned __int8 *)(v1475 + (v1478 >> 3));
    if ((unint64_t)v1557 >= v1473)
    {
      LOBYTE(v1558) = (_BYTE)v1898;
      if (v1898)
      {
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        LOBYTE(v1558) = 0;
        v1473 = (unint64_t)v1895;
        v1478 = v1896;
        v1475 = (uint64_t)v1894;
      }
    }
    else
    {
      v1558 = (*v1557 >> (~(_BYTE)v1478++ & 7)) & 1;
      v1896 = v1478;
    }
    v1559 = v1556 | (2 * v1558);
    v1560 = (unsigned __int8 *)(v1475 + (v1478 >> 3));
    if ((unint64_t)v1560 >= v1473)
    {
      if (v1898)
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1561) = 0;
    }
    else
    {
      v1561 = (*v1560 >> (~(_BYTE)v1478 & 7)) & 1;
      v1896 = v1478 + 1;
    }
    *((_BYTE *)v22 + 43) = v1561 | v1559;
    v1502 = (unint64_t)v1895;
    v1503 = v1896;
    v1504 = (uint64_t)v1894;
    v1505 = &v1894[v1896 >> 3];
    if (v1505 >= v1895)
      goto LABEL_1804;
    goto LABEL_1730;
  }
LABEL_1729:
  *((_BYTE *)v22 + 43) = -1;
  v1502 = (unint64_t)v1895;
  v1503 = v1896;
  v1504 = (uint64_t)v1894;
  v1505 = &v1894[v1896 >> 3];
  if (v1505 >= v1895)
  {
LABEL_1804:
    if (v1898)
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    *((_BYTE *)v22 + 36) = 0;
    goto LABEL_1807;
  }
LABEL_1730:
  v1506 = *v1505 >> (~(_BYTE)v1503 & 7);
  v1507 = v1503 + 1;
  v1896 = v1503 + 1;
  *((_BYTE *)v22 + 36) = v1506 & 1;
  if ((v1506 & 1) != 0)
  {
    v1508 = (unsigned __int8 *)(v1504 + (v1507 >> 3));
    if ((unint64_t)v1508 >= v1502)
    {
      if (v1898)
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
    }
    else
    {
      v1509 = ~(_BYTE)v1507 & 7;
      v1510 = *v1508;
      v1511 = v1503 + 2;
      v1896 = v1503 + 2;
      if (((v1510 >> v1509) & 1) != 0)
      {
        v1512 = (unsigned __int8 *)(v1504 + (v1511 >> 3));
        if ((unint64_t)v1512 >= v1502)
        {
          if (v1898)
          {
            ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
            LOBYTE(v1513) = 0;
            v1502 = (unint64_t)v1895;
            v1511 = v1896;
            v1504 = (uint64_t)v1894;
          }
          else
          {
            LOBYTE(v1513) = 0;
          }
        }
        else
        {
          v1513 = (*v1512 >> (~(_BYTE)v1511 & 7)) & 1;
          v1511 = v1503 + 3;
          v1896 = v1503 + 3;
        }
        v1765 = (_BYTE)v1513 << 7;
        v1766 = (unsigned __int8 *)(v1504 + (v1511 >> 3));
        if ((unint64_t)v1766 >= v1502)
        {
          LOBYTE(v1767) = (_BYTE)v1898;
          if (v1898)
          {
            ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
            LOBYTE(v1767) = 0;
            v1502 = (unint64_t)v1895;
            v1511 = v1896;
            v1504 = (uint64_t)v1894;
          }
        }
        else
        {
          v1767 = (*v1766 >> (~(_BYTE)v1511++ & 7)) & 1;
          v1896 = v1511;
        }
        v1768 = v1765 | ((_BYTE)v1767 << 6);
        v1769 = (unsigned __int8 *)(v1504 + (v1511 >> 3));
        if ((unint64_t)v1769 >= v1502)
        {
          LOBYTE(v1770) = (_BYTE)v1898;
          if (v1898)
          {
            ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
            LOBYTE(v1770) = 0;
            v1502 = (unint64_t)v1895;
            v1511 = v1896;
            v1504 = (uint64_t)v1894;
          }
        }
        else
        {
          v1770 = (*v1769 >> (~(_BYTE)v1511++ & 7)) & 1;
          v1896 = v1511;
        }
        v1771 = v1768 | (32 * v1770);
        v1772 = (unsigned __int8 *)(v1504 + (v1511 >> 3));
        if ((unint64_t)v1772 >= v1502)
        {
          LOBYTE(v1773) = (_BYTE)v1898;
          if (v1898)
          {
            ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
            LOBYTE(v1773) = 0;
            v1502 = (unint64_t)v1895;
            v1511 = v1896;
            v1504 = (uint64_t)v1894;
          }
        }
        else
        {
          v1773 = (*v1772 >> (~(_BYTE)v1511++ & 7)) & 1;
          v1896 = v1511;
        }
        v1774 = v1771 | (16 * v1773);
        v1775 = (unsigned __int8 *)(v1504 + (v1511 >> 3));
        if ((unint64_t)v1775 >= v1502)
        {
          LOBYTE(v1776) = (_BYTE)v1898;
          if (v1898)
          {
            ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
            LOBYTE(v1776) = 0;
            v1502 = (unint64_t)v1895;
            v1511 = v1896;
            v1504 = (uint64_t)v1894;
          }
        }
        else
        {
          v1776 = (*v1775 >> (~(_BYTE)v1511++ & 7)) & 1;
          v1896 = v1511;
        }
        v1777 = v1774 | (8 * v1776);
        v1778 = (unsigned __int8 *)(v1504 + (v1511 >> 3));
        if ((unint64_t)v1778 >= v1502)
        {
          LOBYTE(v1779) = (_BYTE)v1898;
          if (v1898)
          {
            ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
            LOBYTE(v1779) = 0;
            v1502 = (unint64_t)v1895;
            v1511 = v1896;
            v1504 = (uint64_t)v1894;
          }
        }
        else
        {
          v1779 = (*v1778 >> (~(_BYTE)v1511++ & 7)) & 1;
          v1896 = v1511;
        }
        v1780 = v1777 | (4 * v1779);
        v1781 = (unsigned __int8 *)(v1504 + (v1511 >> 3));
        if ((unint64_t)v1781 >= v1502)
        {
          LOBYTE(v1782) = (_BYTE)v1898;
          if (v1898)
          {
            ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
            LOBYTE(v1782) = 0;
            v1502 = (unint64_t)v1895;
            v1511 = v1896;
            v1504 = (uint64_t)v1894;
          }
        }
        else
        {
          v1782 = (*v1781 >> (~(_BYTE)v1511++ & 7)) & 1;
          v1896 = v1511;
        }
        v1783 = v1780 | (2 * v1782);
        v1784 = (unsigned __int8 *)(v1504 + (v1511 >> 3));
        if ((unint64_t)v1784 >= v1502)
        {
          LOBYTE(v1785) = (_BYTE)v1898;
          if (v1898)
          {
            ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
            LOBYTE(v1785) = 0;
          }
        }
        else
        {
          v1785 = (*v1784 >> (~(_BYTE)v1511 & 7)) & 1;
          v1896 = v1511 + 1;
        }
        v1514 = v1785 | v1783;
LABEL_2380:
        *((_BYTE *)v22 + 44) = v1514;
        v1786 = (unint64_t)v1895;
        v1787 = v1896;
        v1788 = (uint64_t)v1894;
        v1789 = &v1894[v1896 >> 3];
        if (v1789 >= v1895)
        {
          if (v1898)
            ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
        }
        else
        {
          v1790 = *v1789;
          v1791 = ++v1896;
          if (((v1790 >> (~(_BYTE)v1787 & 7)) & 1) != 0)
          {
            v1792 = &v1894[v1791 >> 3];
            if (v1792 >= v1895)
            {
              if (v1898)
              {
                ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                LOBYTE(v1793) = 0;
                v1786 = (unint64_t)v1895;
                v1791 = v1896;
                v1788 = (uint64_t)v1894;
              }
              else
              {
                LOBYTE(v1793) = 0;
              }
            }
            else
            {
              v1793 = (*v1792 >> (~(_BYTE)v1791 & 7)) & 1;
              v1791 = v1787 + 2;
              v1896 = v1787 + 2;
            }
            v1795 = (_BYTE)v1793 << 7;
            v1796 = (unsigned __int8 *)(v1788 + (v1791 >> 3));
            if ((unint64_t)v1796 >= v1786)
            {
              LOBYTE(v1797) = (_BYTE)v1898;
              if (v1898)
              {
                ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                LOBYTE(v1797) = 0;
                v1786 = (unint64_t)v1895;
                v1791 = v1896;
                v1788 = (uint64_t)v1894;
              }
            }
            else
            {
              v1797 = (*v1796 >> (~(_BYTE)v1791++ & 7)) & 1;
              v1896 = v1791;
            }
            v1798 = v1795 | ((_BYTE)v1797 << 6);
            v1799 = (unsigned __int8 *)(v1788 + (v1791 >> 3));
            if ((unint64_t)v1799 >= v1786)
            {
              LOBYTE(v1800) = (_BYTE)v1898;
              if (v1898)
              {
                ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                LOBYTE(v1800) = 0;
                v1786 = (unint64_t)v1895;
                v1791 = v1896;
                v1788 = (uint64_t)v1894;
              }
            }
            else
            {
              v1800 = (*v1799 >> (~(_BYTE)v1791++ & 7)) & 1;
              v1896 = v1791;
            }
            v1801 = v1798 | (32 * v1800);
            v1802 = (unsigned __int8 *)(v1788 + (v1791 >> 3));
            if ((unint64_t)v1802 >= v1786)
            {
              LOBYTE(v1803) = (_BYTE)v1898;
              if (v1898)
              {
                ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                LOBYTE(v1803) = 0;
                v1786 = (unint64_t)v1895;
                v1791 = v1896;
                v1788 = (uint64_t)v1894;
              }
            }
            else
            {
              v1803 = (*v1802 >> (~(_BYTE)v1791++ & 7)) & 1;
              v1896 = v1791;
            }
            v1804 = v1801 | (16 * v1803);
            v1805 = (unsigned __int8 *)(v1788 + (v1791 >> 3));
            if ((unint64_t)v1805 >= v1786)
            {
              LOBYTE(v1806) = (_BYTE)v1898;
              if (v1898)
              {
                ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                LOBYTE(v1806) = 0;
                v1786 = (unint64_t)v1895;
                v1791 = v1896;
                v1788 = (uint64_t)v1894;
              }
            }
            else
            {
              v1806 = (*v1805 >> (~(_BYTE)v1791++ & 7)) & 1;
              v1896 = v1791;
            }
            v1807 = v1804 | (8 * v1806);
            v1808 = (unsigned __int8 *)(v1788 + (v1791 >> 3));
            if ((unint64_t)v1808 >= v1786)
            {
              LOBYTE(v1809) = (_BYTE)v1898;
              if (v1898)
              {
                ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                LOBYTE(v1809) = 0;
                v1786 = (unint64_t)v1895;
                v1791 = v1896;
                v1788 = (uint64_t)v1894;
              }
            }
            else
            {
              v1809 = (*v1808 >> (~(_BYTE)v1791++ & 7)) & 1;
              v1896 = v1791;
            }
            v1810 = v1807 | (4 * v1809);
            v1811 = (unsigned __int8 *)(v1788 + (v1791 >> 3));
            if ((unint64_t)v1811 >= v1786)
            {
              LOBYTE(v1812) = (_BYTE)v1898;
              if (v1898)
              {
                ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                LOBYTE(v1812) = 0;
                v1786 = (unint64_t)v1895;
                v1791 = v1896;
                v1788 = (uint64_t)v1894;
              }
            }
            else
            {
              v1812 = (*v1811 >> (~(_BYTE)v1791++ & 7)) & 1;
              v1896 = v1791;
            }
            v1813 = v1810 | (2 * v1812);
            v1814 = (unsigned __int8 *)(v1788 + (v1791 >> 3));
            if ((unint64_t)v1814 >= v1786)
            {
              if (v1898)
                ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
              LOBYTE(v1815) = 0;
            }
            else
            {
              v1815 = (*v1814 >> (~(_BYTE)v1791 & 7)) & 1;
              v1896 = v1791 + 1;
            }
            v1794 = v1815 | v1813;
LABEL_2420:
            *((_BYTE *)v22 + 45) = v1794;
            v1816 = (unint64_t)v1895;
            v1817 = v1896;
            v1818 = (uint64_t)v1894;
            v1819 = &v1894[v1896 >> 3];
            if (v1819 >= v1895)
            {
              if (v1898)
                ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
            }
            else
            {
              v1820 = *v1819;
              v1821 = ++v1896;
              if (((v1820 >> (~(_BYTE)v1817 & 7)) & 1) != 0)
              {
                v1822 = &v1894[v1821 >> 3];
                if (v1822 >= v1895)
                {
                  if (v1898)
                  {
                    ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                    LOBYTE(v1823) = 0;
                    v1816 = (unint64_t)v1895;
                    v1821 = v1896;
                    v1818 = (uint64_t)v1894;
                  }
                  else
                  {
                    LOBYTE(v1823) = 0;
                  }
                }
                else
                {
                  v1823 = (*v1822 >> (~(_BYTE)v1821 & 7)) & 1;
                  v1821 = v1817 + 2;
                  v1896 = v1817 + 2;
                }
                v1825 = (_BYTE)v1823 << 7;
                v1826 = (unsigned __int8 *)(v1818 + (v1821 >> 3));
                if ((unint64_t)v1826 >= v1816)
                {
                  LOBYTE(v1827) = (_BYTE)v1898;
                  if (v1898)
                  {
                    ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                    LOBYTE(v1827) = 0;
                    v1816 = (unint64_t)v1895;
                    v1821 = v1896;
                    v1818 = (uint64_t)v1894;
                  }
                }
                else
                {
                  v1827 = (*v1826 >> (~(_BYTE)v1821++ & 7)) & 1;
                  v1896 = v1821;
                }
                v1828 = v1825 | ((_BYTE)v1827 << 6);
                v1829 = (unsigned __int8 *)(v1818 + (v1821 >> 3));
                if ((unint64_t)v1829 >= v1816)
                {
                  LOBYTE(v1830) = (_BYTE)v1898;
                  if (v1898)
                  {
                    ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                    LOBYTE(v1830) = 0;
                    v1816 = (unint64_t)v1895;
                    v1821 = v1896;
                    v1818 = (uint64_t)v1894;
                  }
                }
                else
                {
                  v1830 = (*v1829 >> (~(_BYTE)v1821++ & 7)) & 1;
                  v1896 = v1821;
                }
                v1831 = v1828 | (32 * v1830);
                v1832 = (unsigned __int8 *)(v1818 + (v1821 >> 3));
                if ((unint64_t)v1832 >= v1816)
                {
                  LOBYTE(v1833) = (_BYTE)v1898;
                  if (v1898)
                  {
                    ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                    LOBYTE(v1833) = 0;
                    v1816 = (unint64_t)v1895;
                    v1821 = v1896;
                    v1818 = (uint64_t)v1894;
                  }
                }
                else
                {
                  v1833 = (*v1832 >> (~(_BYTE)v1821++ & 7)) & 1;
                  v1896 = v1821;
                }
                v1834 = v1831 | (16 * v1833);
                v1835 = (unsigned __int8 *)(v1818 + (v1821 >> 3));
                if ((unint64_t)v1835 >= v1816)
                {
                  LOBYTE(v1836) = (_BYTE)v1898;
                  if (v1898)
                  {
                    ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                    LOBYTE(v1836) = 0;
                    v1816 = (unint64_t)v1895;
                    v1821 = v1896;
                    v1818 = (uint64_t)v1894;
                  }
                }
                else
                {
                  v1836 = (*v1835 >> (~(_BYTE)v1821++ & 7)) & 1;
                  v1896 = v1821;
                }
                v1837 = v1834 | (8 * v1836);
                v1838 = (unsigned __int8 *)(v1818 + (v1821 >> 3));
                if ((unint64_t)v1838 >= v1816)
                {
                  LOBYTE(v1839) = (_BYTE)v1898;
                  if (v1898)
                  {
                    ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                    LOBYTE(v1839) = 0;
                    v1816 = (unint64_t)v1895;
                    v1821 = v1896;
                    v1818 = (uint64_t)v1894;
                  }
                }
                else
                {
                  v1839 = (*v1838 >> (~(_BYTE)v1821++ & 7)) & 1;
                  v1896 = v1821;
                }
                v1840 = v1837 | (4 * v1839);
                v1841 = (unsigned __int8 *)(v1818 + (v1821 >> 3));
                if ((unint64_t)v1841 >= v1816)
                {
                  LOBYTE(v1842) = (_BYTE)v1898;
                  if (v1898)
                  {
                    ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                    LOBYTE(v1842) = 0;
                    v1816 = (unint64_t)v1895;
                    v1821 = v1896;
                    v1818 = (uint64_t)v1894;
                  }
                }
                else
                {
                  v1842 = (*v1841 >> (~(_BYTE)v1821++ & 7)) & 1;
                  v1896 = v1821;
                }
                v1843 = v1840 | (2 * v1842);
                v1844 = (unsigned __int8 *)(v1818 + (v1821 >> 3));
                if ((unint64_t)v1844 >= v1816)
                {
                  if (v1898)
                    ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
                  LOBYTE(v1845) = 0;
                }
                else
                {
                  v1845 = (*v1844 >> (~(_BYTE)v1821 & 7)) & 1;
                  v1896 = v1821 + 1;
                }
                v1824 = v1845 | v1843;
LABEL_2460:
                *((_BYTE *)v22 + 46) = v1824;
                v591 = (unint64_t)v1895;
                v590 = v1896;
                v592 = (uint64_t)v1894;
                v593 = &v1894[v1896 >> 3];
                v1870 = v22;
                if (v593 < v1895)
                  goto LABEL_1809;
                goto LABEL_861;
              }
            }
            v1824 = -1;
            goto LABEL_2460;
          }
        }
        v1794 = -1;
        goto LABEL_2420;
      }
    }
    v1514 = -1;
    goto LABEL_2380;
  }
LABEL_1807:
  *((_BYTE *)v8 + 5446) = -1;
  v8[2722] = -1;
LABEL_1808:
  v591 = (unint64_t)v1895;
  v590 = v1896;
  v592 = (uint64_t)v1894;
  v593 = &v1894[v1896 >> 3];
  v1870 = v22;
  if (v593 < v1895)
  {
LABEL_1809:
    v1562 = *v593 >> (~(_BYTE)v590 & 7);
    v1563 = v590 + 1;
    v1896 = v590 + 1;
    *((_BYTE *)v22 + 34) = v1562 & 1;
    if ((v1562 & 1) == 0)
      goto LABEL_1810;
    v1570 = (unsigned __int8 *)(v592 + (v1563 >> 3));
    if ((unint64_t)v1570 >= v591)
    {
      v1572 = __src;
      v1573 = v1870;
      if (v1898)
        ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      LOBYTE(v1571) = 0;
    }
    else
    {
      v1571 = (*v1570 >> (~(_BYTE)v1563 & 7)) & 1;
      v1896 = v590 + 2;
      v1572 = __src;
      v1573 = v1870;
    }
    v1658 = 0;
    *((_BYTE *)v1573 + 35) = v1571;
    v382 = 0uLL;
    *(_OWORD *)(v1572 + 2724) = 0u;
    *(_OWORD *)(v1572 + 2732) = 0u;
    *(_OWORD *)(v1572 + 2740) = 0u;
    *(_OWORD *)(v1572 + 2748) = 0u;
    v1659 = v1572 + 2724;
    *(_OWORD *)(v1572 + 2756) = 0u;
    *(_OWORD *)(v1572 + 2764) = 0u;
    v1660 = v1572 + 2727;
    *((_DWORD *)v1572 + 1386) = 0;
    v1887 = v7;
    v1881 = v1572 + 2724;
    while (1)
    {
      v1661 = (unint64_t)v1895;
      v1662 = v1896;
      v1663 = (uint64_t)v1894;
      v1664 = &v1894[v1896 >> 3];
      if (v1664 >= v1895)
      {
        if (v1898)
          v1898(v1897);
LABEL_2190:
        LOWORD(v1683) = 0;
        goto LABEL_2191;
      }
      v1665 = *v1664;
      v1666 = ++v1896;
      if (((v1665 >> (~(_BYTE)v1662 & 7)) & 1) == 0)
        goto LABEL_2190;
      *(_DWORD *)&v1659[2 * v1658 + 32] |= 1u;
      v1667 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
      if ((unint64_t)v1667 >= v1661)
      {
        if (v1898)
        {
          v1898(v1897);
          v1668 = 0;
          v1661 = (unint64_t)v1895;
          v1666 = v1896;
          v1663 = (uint64_t)v1894;
          v1669 = &v1894[v1896 >> 3];
          if (v1669 < v1895)
            goto LABEL_2181;
        }
        else
        {
          v1668 = 0;
          v1669 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
          if ((unint64_t)v1669 < v1661)
          {
LABEL_2181:
            v1670 = (*v1669 >> (~(_BYTE)v1666++ & 7)) & 1;
            v1896 = v1666;
            v1671 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
            if ((unint64_t)v1671 < v1661)
              goto LABEL_2182;
            goto LABEL_2220;
          }
        }
      }
      else
      {
        v1668 = (*v1667 >> (~(_BYTE)v1666 & 7)) & 1;
        v1666 = v1662 + 2;
        v1896 = v1662 + 2;
        v1669 = (unsigned __int8 *)(v1663 + ((v1662 + 2) >> 3));
        if ((unint64_t)v1669 < v1661)
          goto LABEL_2181;
      }
      if (v1898)
      {
        v1898(v1897);
        v1670 = 0;
        v1661 = (unint64_t)v1895;
        v1666 = v1896;
        v1663 = (uint64_t)v1894;
        v1671 = &v1894[v1896 >> 3];
        if (v1671 < v1895)
          goto LABEL_2182;
      }
      else
      {
        v1670 = 0;
        v1671 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
        if ((unint64_t)v1671 < v1661)
        {
LABEL_2182:
          v1672 = (*v1671 >> (~(_BYTE)v1666++ & 7)) & 1;
          v1896 = v1666;
          v1673 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
          if ((unint64_t)v1673 < v1661)
            goto LABEL_2183;
          goto LABEL_2222;
        }
      }
LABEL_2220:
      if (v1898)
      {
        v1898(v1897);
        v1672 = 0;
        v1661 = (unint64_t)v1895;
        v1666 = v1896;
        v1663 = (uint64_t)v1894;
        v1673 = &v1894[v1896 >> 3];
        if (v1673 < v1895)
          goto LABEL_2183;
      }
      else
      {
        v1672 = 0;
        v1673 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
        if ((unint64_t)v1673 < v1661)
        {
LABEL_2183:
          v1674 = (*v1673 >> (~(_BYTE)v1666++ & 7)) & 1;
          v1896 = v1666;
          v1675 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
          if ((unint64_t)v1675 < v1661)
            goto LABEL_2184;
          goto LABEL_2224;
        }
      }
LABEL_2222:
      if (v1898)
      {
        v1898(v1897);
        v1674 = 0;
        v1661 = (unint64_t)v1895;
        v1666 = v1896;
        v1663 = (uint64_t)v1894;
        v1675 = &v1894[v1896 >> 3];
        if (v1675 < v1895)
          goto LABEL_2184;
      }
      else
      {
        v1674 = 0;
        v1675 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
        if ((unint64_t)v1675 < v1661)
        {
LABEL_2184:
          v1676 = (*v1675 >> (~(_BYTE)v1666++ & 7)) & 1;
          v1896 = v1666;
          v1677 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
          if ((unint64_t)v1677 < v1661)
            goto LABEL_2185;
          goto LABEL_2226;
        }
      }
LABEL_2224:
      if (v1898)
      {
        v1898(v1897);
        v1676 = 0;
        v1661 = (unint64_t)v1895;
        v1666 = v1896;
        v1663 = (uint64_t)v1894;
        v1677 = &v1894[v1896 >> 3];
        if (v1677 < v1895)
          goto LABEL_2185;
      }
      else
      {
        v1676 = 0;
        v1677 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
        if ((unint64_t)v1677 < v1661)
        {
LABEL_2185:
          v1678 = (*v1677 >> (~(_BYTE)v1666++ & 7)) & 1;
          v1896 = v1666;
          v1679 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
          if ((unint64_t)v1679 < v1661)
            goto LABEL_2186;
          goto LABEL_2228;
        }
      }
LABEL_2226:
      if (v1898)
      {
        v1898(v1897);
        v1678 = 0;
        v1661 = (unint64_t)v1895;
        v1666 = v1896;
        v1663 = (uint64_t)v1894;
        v1679 = &v1894[v1896 >> 3];
        if (v1679 < v1895)
          goto LABEL_2186;
      }
      else
      {
        v1678 = 0;
        v1679 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
        if ((unint64_t)v1679 < v1661)
        {
LABEL_2186:
          v1680 = (*v1679 >> (~(_BYTE)v1666++ & 7)) & 1;
          v1896 = v1666;
          v1681 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
          if ((unint64_t)v1681 >= v1661)
            goto LABEL_2230;
          goto LABEL_2187;
        }
      }
LABEL_2228:
      if (v1898)
      {
        v1898(v1897);
        v1680 = 0;
        v1661 = (unint64_t)v1895;
        v1666 = v1896;
        v1663 = (uint64_t)v1894;
        v1681 = &v1894[v1896 >> 3];
        if (v1681 >= v1895)
          goto LABEL_2230;
      }
      else
      {
        v1680 = 0;
        v1681 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
        if ((unint64_t)v1681 >= v1661)
        {
LABEL_2230:
          v1682 = (int)v1898;
          if (v1898)
          {
            v1898(v1897);
            v1682 = 0;
            v1661 = (unint64_t)v1895;
            v1666 = v1896;
            v1663 = (uint64_t)v1894;
          }
          goto LABEL_2232;
        }
      }
LABEL_2187:
      v1682 = (*v1681 >> (~(_BYTE)v1666++ & 7)) & 1;
      v1896 = v1666;
LABEL_2232:
      v1683 = v1682 | (v1668 << 7) | (v1670 << 6) | (32 * v1672) | (16 * v1674) | (8 * v1676) | (4 * v1678) | (2 * v1680);
      v1717 = (unsigned __int8 *)(v1663 + (v1666 >> 3));
      if ((unint64_t)v1717 >= v1661)
      {
        v6 = v1850;
        v7 = v1887;
        v1659 = v1881;
        if (v1898)
          v1898(v1897);
      }
      else
      {
        v1718 = *v1717;
        v1896 = v1666 + 1;
        v6 = v1850;
        v7 = v1887;
        v1659 = v1881;
        if (((v1718 >> (~(_BYTE)v1666 & 7)) & 1) != 0)
          v1683 = -v1683;
      }
LABEL_2191:
      *(v1660 - 3) = v1683;
      v1684 = (unint64_t)v1895;
      v1685 = v1896;
      v1686 = (uint64_t)v1894;
      v1687 = &v1894[v1896 >> 3];
      if (v1687 >= v1895)
      {
        if (v1898)
          v1898(v1897);
LABEL_2202:
        LOWORD(v1702) = 0;
        goto LABEL_2203;
      }
      v1688 = *v1687;
      v1689 = ++v1896;
      if (((v1688 >> (~(_BYTE)v1685 & 7)) & 1) == 0)
        goto LABEL_2202;
      *(_DWORD *)&v1659[2 * v1658 + 32] |= 2u;
      v1690 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
      if ((unint64_t)v1690 >= v1684)
      {
        if (v1898)
        {
          v1898(v1897);
          v1691 = 0;
          v1684 = (unint64_t)v1895;
          v1689 = v1896;
          v1686 = (uint64_t)v1894;
          v1692 = &v1894[v1896 >> 3];
          if (v1692 < v1895)
            goto LABEL_2195;
        }
        else
        {
          v1691 = 0;
          v1692 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
          if ((unint64_t)v1692 < v1684)
          {
LABEL_2195:
            v1693 = (*v1692 >> (~(_BYTE)v1689++ & 7)) & 1;
            v1896 = v1689;
            v1694 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
            if ((unint64_t)v1694 < v1684)
              goto LABEL_2196;
            goto LABEL_2239;
          }
        }
      }
      else
      {
        v1691 = (*v1690 >> (~(_BYTE)v1689 & 7)) & 1;
        v1689 = v1685 + 2;
        v1896 = v1685 + 2;
        v1692 = (unsigned __int8 *)(v1686 + ((v1685 + 2) >> 3));
        if ((unint64_t)v1692 < v1684)
          goto LABEL_2195;
      }
      if (v1898)
      {
        v1898(v1897);
        v1693 = 0;
        v1684 = (unint64_t)v1895;
        v1689 = v1896;
        v1686 = (uint64_t)v1894;
        v1694 = &v1894[v1896 >> 3];
        if (v1694 < v1895)
          goto LABEL_2196;
      }
      else
      {
        v1693 = 0;
        v1694 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
        if ((unint64_t)v1694 < v1684)
        {
LABEL_2196:
          v1695 = (*v1694 >> (~(_BYTE)v1689++ & 7)) & 1;
          v1896 = v1689;
          v1696 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
          if ((unint64_t)v1696 < v1684)
            goto LABEL_2197;
          goto LABEL_2241;
        }
      }
LABEL_2239:
      if (v1898)
      {
        v1898(v1897);
        v1695 = 0;
        v1684 = (unint64_t)v1895;
        v1689 = v1896;
        v1686 = (uint64_t)v1894;
        v1696 = &v1894[v1896 >> 3];
        if (v1696 < v1895)
          goto LABEL_2197;
      }
      else
      {
        v1695 = 0;
        v1696 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
        if ((unint64_t)v1696 < v1684)
        {
LABEL_2197:
          v1697 = (*v1696 >> (~(_BYTE)v1689++ & 7)) & 1;
          v1896 = v1689;
          v1698 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
          if ((unint64_t)v1698 < v1684)
            goto LABEL_2198;
          goto LABEL_2243;
        }
      }
LABEL_2241:
      if (v1898)
      {
        v1898(v1897);
        v1697 = 0;
        v1684 = (unint64_t)v1895;
        v1689 = v1896;
        v1686 = (uint64_t)v1894;
        v1698 = &v1894[v1896 >> 3];
        if (v1698 < v1895)
          goto LABEL_2198;
      }
      else
      {
        v1697 = 0;
        v1698 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
        if ((unint64_t)v1698 < v1684)
        {
LABEL_2198:
          v1699 = (*v1698 >> (~(_BYTE)v1689++ & 7)) & 1;
          v1896 = v1689;
          v1700 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
          if ((unint64_t)v1700 >= v1684)
            goto LABEL_2245;
          goto LABEL_2199;
        }
      }
LABEL_2243:
      if (v1898)
      {
        v1898(v1897);
        v1699 = 0;
        v1684 = (unint64_t)v1895;
        v1689 = v1896;
        v1686 = (uint64_t)v1894;
        v1700 = &v1894[v1896 >> 3];
        if (v1700 >= v1895)
          goto LABEL_2245;
      }
      else
      {
        v1699 = 0;
        v1700 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
        if ((unint64_t)v1700 >= v1684)
        {
LABEL_2245:
          v1701 = (int)v1898;
          if (v1898)
          {
            v1898(v1897);
            v1701 = 0;
            v1684 = (unint64_t)v1895;
            v1689 = v1896;
            v1686 = (uint64_t)v1894;
          }
          goto LABEL_2247;
        }
      }
LABEL_2199:
      v1701 = (*v1700 >> (~(_BYTE)v1689++ & 7)) & 1;
      v1896 = v1689;
LABEL_2247:
      v1702 = v1701 | (32 * v1691) | (16 * v1693) | (8 * v1695) | (4 * v1697) | (2 * v1699);
      v1719 = (unsigned __int8 *)(v1686 + (v1689 >> 3));
      if ((unint64_t)v1719 >= v1684)
      {
        v7 = v1887;
        if (v1898)
          v1898(v1897);
      }
      else
      {
        v1720 = *v1719;
        v1896 = v1689 + 1;
        v7 = v1887;
        if (((v1720 >> (~(_BYTE)v1689 & 7)) & 1) != 0)
          v1702 = -v1702;
      }
LABEL_2203:
      *(v1660 - 2) = v1702;
      v1703 = (unint64_t)v1895;
      v1704 = v1896;
      v1705 = (uint64_t)v1894;
      v1706 = &v1894[v1896 >> 3];
      if (v1706 >= v1895)
      {
        v1713 = (__int16)v1898;
        if (v1898)
        {
          v1898(v1897);
          *(v1660 - 1) = 0;
          v1714 = v1896;
          v1715 = &v1894[v1896 >> 3];
          if (v1715 < v1895)
            goto LABEL_2214;
          goto LABEL_2210;
        }
        goto LABEL_2213;
      }
      v1707 = *v1706;
      v1708 = ++v1896;
      if (((v1707 >> (~(_BYTE)v1704 & 7)) & 1) == 0)
      {
        v1713 = 0;
LABEL_2213:
        *(v1660 - 1) = v1713;
        v1714 = v1896;
        v1715 = &v1894[v1896 >> 3];
        if (v1715 < v1895)
          goto LABEL_2214;
        goto LABEL_2210;
      }
      *(_DWORD *)&v1659[2 * v1658 + 32] |= 4u;
      v1709 = (unsigned __int8 *)(v1705 + (v1708 >> 3));
      if ((unint64_t)v1709 >= v1703)
      {
        if (v1898)
        {
          v1898(v1897);
          LOWORD(v1710) = 0;
          v1708 = v1896;
          v1711 = &v1894[v1896 >> 3];
          if (v1711 < v1895)
            goto LABEL_2207;
        }
        else
        {
          LOWORD(v1710) = 0;
          v1711 = (unsigned __int8 *)(v1705 + (v1708 >> 3));
          if ((unint64_t)v1711 < v1703)
          {
LABEL_2207:
            v1712 = (*v1711 >> (~(_BYTE)v1708 & 7)) & 1;
            v1896 = v1708 + 1;
            goto LABEL_2254;
          }
        }
      }
      else
      {
        v1710 = (*v1709 >> (~(_BYTE)v1708 & 7)) & 1;
        v1708 = v1704 + 2;
        v1896 = v1704 + 2;
        v1711 = (unsigned __int8 *)(v1705 + ((v1704 + 2) >> 3));
        if ((unint64_t)v1711 < v1703)
          goto LABEL_2207;
      }
      LOWORD(v1712) = (_WORD)v1898;
      if (v1898)
      {
        v1898(v1897);
        LOWORD(v1712) = 0;
      }
LABEL_2254:
      *(v1660 - 1) = v1712 | (2 * v1710);
      v1714 = v1896;
      v1715 = &v1894[v1896 >> 3];
      if (v1715 < v1895)
      {
LABEL_2214:
        v1716 = *v1715;
        v1896 = v1714 + 1;
        if (((v1716 >> (~(_BYTE)v1714 & 7)) & 1) != 0)
          *(_DWORD *)&v1659[2 * v1658 + 32] |= 8u;
        goto LABEL_2176;
      }
LABEL_2210:
      if (v1898)
        v1898(v1897);
LABEL_2176:
      *v1660 = 0;
      v1660 += 4;
      if (++v1658 == 8)
        goto LABEL_1810;
    }
  }
LABEL_861:
  if (v1898)
    v1898(v1897);
  *((_BYTE *)v22 + 34) = 0;
LABEL_1810:
  v22 = v1870;
  v8 = __src;
  v507 = *((_DWORD *)__src + 497);
  if (!*((_BYTE *)v1870 + 32))
    goto LABEL_737;
  v1564 = *((_DWORD *)__src + 497);
  if ((__src[2756] & 1) != 0)
  {
    if (*((_BYTE *)v1870 + 35) == 1)
      v1565 = 0;
    else
      v1565 = *((_DWORD *)__src + 497);
    v1566 = v1565 + __src[2724];
    if (v1566 >= 255)
      v1566 = 255;
    v1564 = v1566 & ~(v1566 >> 31);
  }
  v1567 = *((_DWORD *)__src + 498);
  v1568 = *((_DWORD *)v1870 + 3354);
  switch(v1568)
  {
    case 8:
      v1569 = dc_qlookup_0;
      break;
    case 12:
      v1569 = (__int16 *)&dc_qlookup_12;
      break;
    case 10:
      v1569 = (__int16 *)&dc_qlookup_10;
      break;
    default:
      __src[1002] = -1;
      goto LABEL_1829;
  }
  v1574 = v1567 + v1564;
  if (v1567 + v1564 >= 255)
    v1574 = 255;
  __src[1002] = v1569[v1574 & ~(v1574 >> 31)];
  if (v1568 == 8)
  {
    v1575 = ac_qlookup_0;
    goto LABEL_1835;
  }
LABEL_1829:
  if (v1568 == 12)
  {
    v1575 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1003] = -1;
      v1577 = *((_DWORD *)__src + 499);
      goto LABEL_1839;
    }
    v1575 = ac_qlookup_10;
  }
LABEL_1835:
  if (v1564 >= 255)
    v1576 = 255;
  else
    v1576 = v1564;
  __src[1003] = v1575[v1576 & ~(v1576 >> 31)];
  v1577 = *((_DWORD *)__src + 499);
  if (v1568 == 8)
  {
    v1578 = dc_qlookup_0;
    goto LABEL_1845;
  }
LABEL_1839:
  if (v1568 == 12)
  {
    v1578 = (__int16 *)&dc_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1018] = -1;
      v1580 = *((_DWORD *)__src + 500);
      goto LABEL_1848;
    }
    v1578 = (__int16 *)&dc_qlookup_10;
  }
LABEL_1845:
  v1579 = v1577 + v1564;
  if (v1577 + v1564 >= 255)
    v1579 = 255;
  __src[1018] = v1578[v1579 & ~(v1579 >> 31)];
  v1580 = *((_DWORD *)__src + 500);
  if (v1568 == 8)
  {
    v1581 = ac_qlookup_0;
    goto LABEL_1854;
  }
LABEL_1848:
  if (v1568 == 12)
  {
    v1581 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1019] = -1;
      v1583 = v507;
      if ((__src[2758] & 1) == 0)
        goto LABEL_1863;
      goto LABEL_1857;
    }
    v1581 = ac_qlookup_10;
  }
LABEL_1854:
  v1582 = v1580 + v1564;
  if (v1582 >= 255)
    v1582 = 255;
  __src[1019] = v1581[v1582 & ~(v1582 >> 31)];
  v1583 = v507;
  if ((__src[2758] & 1) != 0)
  {
LABEL_1857:
    if (*((_BYTE *)v1870 + 35) == 1)
      v1584 = 0;
    else
      v1584 = v507;
    v1585 = v1584 + __src[2728];
    if (v1585 >= 255)
      v1585 = 255;
    v1583 = v1585 & ~(v1585 >> 31);
  }
LABEL_1863:
  switch(v1568)
  {
    case 8:
      v1586 = dc_qlookup_0;
      break;
    case 12:
      v1586 = (__int16 *)&dc_qlookup_12;
      break;
    case 10:
      v1586 = (__int16 *)&dc_qlookup_10;
      break;
    default:
      __src[1004] = -1;
      goto LABEL_1872;
  }
  v1587 = v1583 + v1567;
  if (v1583 + v1567 >= 255)
    v1587 = 255;
  __src[1004] = v1586[v1587 & ~(v1587 >> 31)];
  if (v1568 == 8)
  {
    v1588 = ac_qlookup_0;
    goto LABEL_1880;
  }
LABEL_1872:
  if (v1568 == 12)
  {
    v1588 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1005] = -1;
      goto LABEL_1884;
    }
    v1588 = ac_qlookup_10;
  }
LABEL_1880:
  if (v1583 >= 255)
    v1589 = 255;
  else
    v1589 = v1583;
  __src[1005] = v1588[v1589 & ~(v1589 >> 31)];
  if (v1568 == 8)
  {
    v1590 = dc_qlookup_0;
    goto LABEL_1890;
  }
LABEL_1884:
  if (v1568 == 12)
  {
    v1590 = (__int16 *)&dc_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1020] = -1;
      goto LABEL_1893;
    }
    v1590 = (__int16 *)&dc_qlookup_10;
  }
LABEL_1890:
  v1591 = v1583 + v1577;
  if (v1583 + v1577 >= 255)
    v1591 = 255;
  __src[1020] = v1590[v1591 & ~(v1591 >> 31)];
  if (v1568 == 8)
  {
    v1592 = ac_qlookup_0;
    goto LABEL_1899;
  }
LABEL_1893:
  if (v1568 == 12)
  {
    v1592 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1021] = -1;
      v1594 = v507;
      if ((__src[2760] & 1) == 0)
        goto LABEL_1908;
      goto LABEL_1902;
    }
    v1592 = ac_qlookup_10;
  }
LABEL_1899:
  v1593 = v1583 + v1580;
  if (v1593 >= 255)
    v1593 = 255;
  __src[1021] = v1592[v1593 & ~(v1593 >> 31)];
  v1594 = v507;
  if ((__src[2760] & 1) != 0)
  {
LABEL_1902:
    if (*((_BYTE *)v1870 + 35) == 1)
      v1595 = 0;
    else
      v1595 = v507;
    v1596 = v1595 + __src[2732];
    if (v1596 >= 255)
      v1596 = 255;
    v1594 = v1596 & ~(v1596 >> 31);
  }
LABEL_1908:
  switch(v1568)
  {
    case 8:
      v1597 = dc_qlookup_0;
      break;
    case 12:
      v1597 = (__int16 *)&dc_qlookup_12;
      break;
    case 10:
      v1597 = (__int16 *)&dc_qlookup_10;
      break;
    default:
      __src[1006] = -1;
      goto LABEL_1917;
  }
  v1598 = v1594 + v1567;
  if (v1594 + v1567 >= 255)
    v1598 = 255;
  __src[1006] = v1597[v1598 & ~(v1598 >> 31)];
  if (v1568 == 8)
  {
    v1599 = ac_qlookup_0;
    goto LABEL_1925;
  }
LABEL_1917:
  if (v1568 == 12)
  {
    v1599 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1007] = -1;
      goto LABEL_1929;
    }
    v1599 = ac_qlookup_10;
  }
LABEL_1925:
  if (v1594 >= 255)
    v1600 = 255;
  else
    v1600 = v1594;
  __src[1007] = v1599[v1600 & ~(v1600 >> 31)];
  if (v1568 == 8)
  {
    v1601 = dc_qlookup_0;
    goto LABEL_1935;
  }
LABEL_1929:
  if (v1568 == 12)
  {
    v1601 = (__int16 *)&dc_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1022] = -1;
      goto LABEL_1938;
    }
    v1601 = (__int16 *)&dc_qlookup_10;
  }
LABEL_1935:
  v1602 = v1594 + v1577;
  if (v1594 + v1577 >= 255)
    v1602 = 255;
  __src[1022] = v1601[v1602 & ~(v1602 >> 31)];
  if (v1568 == 8)
  {
    v1603 = ac_qlookup_0;
    goto LABEL_1944;
  }
LABEL_1938:
  if (v1568 == 12)
  {
    v1603 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1023] = -1;
      v1605 = v507;
      if ((__src[2762] & 1) == 0)
        goto LABEL_1953;
      goto LABEL_1947;
    }
    v1603 = ac_qlookup_10;
  }
LABEL_1944:
  v1604 = v1594 + v1580;
  if (v1604 >= 255)
    v1604 = 255;
  __src[1023] = v1603[v1604 & ~(v1604 >> 31)];
  v1605 = v507;
  if ((__src[2762] & 1) != 0)
  {
LABEL_1947:
    if (*((_BYTE *)v1870 + 35) == 1)
      v1606 = 0;
    else
      v1606 = v507;
    v1607 = v1606 + __src[2736];
    if (v1607 >= 255)
      v1607 = 255;
    v1605 = v1607 & ~(v1607 >> 31);
  }
LABEL_1953:
  switch(v1568)
  {
    case 8:
      v1608 = dc_qlookup_0;
      break;
    case 12:
      v1608 = (__int16 *)&dc_qlookup_12;
      break;
    case 10:
      v1608 = (__int16 *)&dc_qlookup_10;
      break;
    default:
      __src[1008] = -1;
      goto LABEL_1962;
  }
  v1609 = v1605 + v1567;
  if (v1605 + v1567 >= 255)
    v1609 = 255;
  __src[1008] = v1608[v1609 & ~(v1609 >> 31)];
  if (v1568 == 8)
  {
    v1610 = ac_qlookup_0;
    goto LABEL_1970;
  }
LABEL_1962:
  if (v1568 == 12)
  {
    v1610 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1009] = -1;
      goto LABEL_1974;
    }
    v1610 = ac_qlookup_10;
  }
LABEL_1970:
  if (v1605 >= 255)
    v1611 = 255;
  else
    v1611 = v1605;
  __src[1009] = v1610[v1611 & ~(v1611 >> 31)];
  if (v1568 == 8)
  {
    v1612 = dc_qlookup_0;
    goto LABEL_1980;
  }
LABEL_1974:
  if (v1568 == 12)
  {
    v1612 = (__int16 *)&dc_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1024] = -1;
      goto LABEL_1983;
    }
    v1612 = (__int16 *)&dc_qlookup_10;
  }
LABEL_1980:
  v1613 = v1605 + v1577;
  if (v1605 + v1577 >= 255)
    v1613 = 255;
  __src[1024] = v1612[v1613 & ~(v1613 >> 31)];
  if (v1568 == 8)
  {
    v1614 = ac_qlookup_0;
    goto LABEL_1989;
  }
LABEL_1983:
  if (v1568 == 12)
  {
    v1614 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1025] = -1;
      v1616 = v507;
      if ((__src[2764] & 1) == 0)
        goto LABEL_1998;
      goto LABEL_1992;
    }
    v1614 = ac_qlookup_10;
  }
LABEL_1989:
  v1615 = v1605 + v1580;
  if (v1615 >= 255)
    v1615 = 255;
  __src[1025] = v1614[v1615 & ~(v1615 >> 31)];
  v1616 = v507;
  if ((__src[2764] & 1) != 0)
  {
LABEL_1992:
    if (*((_BYTE *)v1870 + 35) == 1)
      v1617 = 0;
    else
      v1617 = v507;
    v1618 = v1617 + __src[2740];
    if (v1618 >= 255)
      v1618 = 255;
    v1616 = v1618 & ~(v1618 >> 31);
  }
LABEL_1998:
  switch(v1568)
  {
    case 8:
      v1619 = dc_qlookup_0;
      break;
    case 12:
      v1619 = (__int16 *)&dc_qlookup_12;
      break;
    case 10:
      v1619 = (__int16 *)&dc_qlookup_10;
      break;
    default:
      __src[1010] = -1;
      goto LABEL_2007;
  }
  v1620 = v1616 + v1567;
  if (v1616 + v1567 >= 255)
    v1620 = 255;
  __src[1010] = v1619[v1620 & ~(v1620 >> 31)];
  if (v1568 == 8)
  {
    v1621 = ac_qlookup_0;
    goto LABEL_2015;
  }
LABEL_2007:
  if (v1568 == 12)
  {
    v1621 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1011] = -1;
      goto LABEL_2019;
    }
    v1621 = ac_qlookup_10;
  }
LABEL_2015:
  if (v1616 >= 255)
    v1622 = 255;
  else
    v1622 = v1616;
  __src[1011] = v1621[v1622 & ~(v1622 >> 31)];
  if (v1568 == 8)
  {
    v1623 = dc_qlookup_0;
    goto LABEL_2025;
  }
LABEL_2019:
  if (v1568 == 12)
  {
    v1623 = (__int16 *)&dc_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1026] = -1;
      goto LABEL_2028;
    }
    v1623 = (__int16 *)&dc_qlookup_10;
  }
LABEL_2025:
  v1624 = v1616 + v1577;
  if (v1616 + v1577 >= 255)
    v1624 = 255;
  __src[1026] = v1623[v1624 & ~(v1624 >> 31)];
  if (v1568 == 8)
  {
    v1625 = ac_qlookup_0;
    goto LABEL_2034;
  }
LABEL_2028:
  if (v1568 == 12)
  {
    v1625 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1027] = -1;
      v1627 = v507;
      if ((__src[2766] & 1) == 0)
        goto LABEL_2043;
      goto LABEL_2037;
    }
    v1625 = ac_qlookup_10;
  }
LABEL_2034:
  v1626 = v1616 + v1580;
  if (v1626 >= 255)
    v1626 = 255;
  __src[1027] = v1625[v1626 & ~(v1626 >> 31)];
  v1627 = v507;
  if ((__src[2766] & 1) != 0)
  {
LABEL_2037:
    if (*((_BYTE *)v1870 + 35) == 1)
      v1628 = 0;
    else
      v1628 = v507;
    v1629 = v1628 + __src[2744];
    if (v1629 >= 255)
      v1629 = 255;
    v1627 = v1629 & ~(v1629 >> 31);
  }
LABEL_2043:
  switch(v1568)
  {
    case 8:
      v1630 = dc_qlookup_0;
      break;
    case 12:
      v1630 = (__int16 *)&dc_qlookup_12;
      break;
    case 10:
      v1630 = (__int16 *)&dc_qlookup_10;
      break;
    default:
      __src[1012] = -1;
      goto LABEL_2052;
  }
  v1631 = v1627 + v1567;
  if (v1627 + v1567 >= 255)
    v1631 = 255;
  __src[1012] = v1630[v1631 & ~(v1631 >> 31)];
  if (v1568 == 8)
  {
    v1632 = ac_qlookup_0;
    goto LABEL_2060;
  }
LABEL_2052:
  if (v1568 == 12)
  {
    v1632 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1013] = -1;
      goto LABEL_2064;
    }
    v1632 = ac_qlookup_10;
  }
LABEL_2060:
  if (v1627 >= 255)
    v1633 = 255;
  else
    v1633 = v1627;
  __src[1013] = v1632[v1633 & ~(v1633 >> 31)];
  if (v1568 == 8)
  {
    v1634 = dc_qlookup_0;
    goto LABEL_2070;
  }
LABEL_2064:
  if (v1568 == 12)
  {
    v1634 = (__int16 *)&dc_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1028] = -1;
      goto LABEL_2073;
    }
    v1634 = (__int16 *)&dc_qlookup_10;
  }
LABEL_2070:
  v1635 = v1627 + v1577;
  if (v1627 + v1577 >= 255)
    v1635 = 255;
  __src[1028] = v1634[v1635 & ~(v1635 >> 31)];
  if (v1568 == 8)
  {
    v1636 = ac_qlookup_0;
    goto LABEL_2079;
  }
LABEL_2073:
  if (v1568 == 12)
  {
    v1636 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1029] = -1;
      v1638 = v507;
      if ((__src[2768] & 1) == 0)
        goto LABEL_2088;
      goto LABEL_2082;
    }
    v1636 = ac_qlookup_10;
  }
LABEL_2079:
  v1637 = v1627 + v1580;
  if (v1637 >= 255)
    v1637 = 255;
  __src[1029] = v1636[v1637 & ~(v1637 >> 31)];
  v1638 = v507;
  if ((__src[2768] & 1) != 0)
  {
LABEL_2082:
    if (*((_BYTE *)v1870 + 35) == 1)
      v1639 = 0;
    else
      v1639 = v507;
    v1640 = v1639 + __src[2748];
    if (v1640 >= 255)
      v1640 = 255;
    v1638 = v1640 & ~(v1640 >> 31);
  }
LABEL_2088:
  switch(v1568)
  {
    case 8:
      v1641 = dc_qlookup_0;
      break;
    case 12:
      v1641 = (__int16 *)&dc_qlookup_12;
      break;
    case 10:
      v1641 = (__int16 *)&dc_qlookup_10;
      break;
    default:
      __src[1014] = -1;
      goto LABEL_2097;
  }
  v1642 = v1638 + v1567;
  if (v1638 + v1567 >= 255)
    v1642 = 255;
  __src[1014] = v1641[v1642 & ~(v1642 >> 31)];
  if (v1568 == 8)
  {
    v1643 = ac_qlookup_0;
    goto LABEL_2105;
  }
LABEL_2097:
  if (v1568 == 12)
  {
    v1643 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1015] = -1;
      goto LABEL_2109;
    }
    v1643 = ac_qlookup_10;
  }
LABEL_2105:
  if (v1638 >= 255)
    v1644 = 255;
  else
    v1644 = v1638;
  __src[1015] = v1643[v1644 & ~(v1644 >> 31)];
  if (v1568 == 8)
  {
    v1645 = dc_qlookup_0;
    goto LABEL_2115;
  }
LABEL_2109:
  if (v1568 == 12)
  {
    v1645 = (__int16 *)&dc_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1030] = -1;
      goto LABEL_2118;
    }
    v1645 = (__int16 *)&dc_qlookup_10;
  }
LABEL_2115:
  v1646 = v1638 + v1577;
  if (v1638 + v1577 >= 255)
    v1646 = 255;
  __src[1030] = v1645[v1646 & ~(v1646 >> 31)];
  if (v1568 == 8)
  {
    v1647 = ac_qlookup_0;
    goto LABEL_2124;
  }
LABEL_2118:
  if (v1568 == 12)
  {
    v1647 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1031] = -1;
      if ((__src[2770] & 1) == 0)
        goto LABEL_2132;
      goto LABEL_2127;
    }
    v1647 = ac_qlookup_10;
  }
LABEL_2124:
  v1648 = v1638 + v1580;
  if (v1648 >= 255)
    v1648 = 255;
  __src[1031] = v1647[v1648 & ~(v1648 >> 31)];
  if ((__src[2770] & 1) != 0)
  {
LABEL_2127:
    if (*((_BYTE *)v1870 + 35) == 1)
      v507 = 0;
    v1649 = v507 + __src[2752];
    if (v1649 >= 255)
      v1649 = 255;
    v507 = v1649 & ~(v1649 >> 31);
  }
LABEL_2132:
  switch(v1568)
  {
    case 8:
      v1650 = dc_qlookup_0;
      break;
    case 12:
      v1650 = (__int16 *)&dc_qlookup_12;
      break;
    case 10:
      v1650 = (__int16 *)&dc_qlookup_10;
      break;
    default:
      __src[1016] = -1;
      goto LABEL_2141;
  }
  v1651 = v507 + v1567;
  if (v1651 >= 255)
    v1651 = 255;
  __src[1016] = v1650[v1651 & ~(v1651 >> 31)];
  if (v1568 == 8)
  {
    v1652 = ac_qlookup_0;
    goto LABEL_2149;
  }
LABEL_2141:
  if (v1568 == 12)
  {
    v1652 = ac_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1017] = -1;
      goto LABEL_2153;
    }
    v1652 = ac_qlookup_10;
  }
LABEL_2149:
  if (v507 >= 255)
    v1653 = 255;
  else
    v1653 = v507;
  __src[1017] = v1652[v1653 & ~(v1653 >> 31)];
  if (v1568 == 8)
  {
    v1654 = dc_qlookup_0;
    goto LABEL_2159;
  }
LABEL_2153:
  if (v1568 == 12)
  {
    v1654 = (__int16 *)&dc_qlookup_12;
  }
  else
  {
    if (v1568 != 10)
    {
      __src[1032] = -1;
      goto LABEL_2162;
    }
    v1654 = (__int16 *)&dc_qlookup_10;
  }
LABEL_2159:
  v1655 = v507 + v1577;
  if (v1655 >= 255)
    v1655 = 255;
  __src[1032] = v1654[v1655 & ~(v1655 >> 31)];
  if (v1568 != 8)
  {
LABEL_2162:
    if (v1568 == 12)
    {
      v1656 = ac_qlookup_12;
    }
    else
    {
      if (v1568 != 10)
      {
        __src[1033] = -1;
        goto LABEL_776;
      }
      v1656 = ac_qlookup_10;
    }
    goto LABEL_2168;
  }
  v1656 = ac_qlookup_0;
LABEL_2168:
  v1657 = v507 + v1580;
  if (v1657 >= 255)
    v1657 = 255;
  __src[1033] = v1656[v1657 & ~(v1657 >> 31)];
LABEL_776:
  v536 = 0;
  v537 = (*((_DWORD *)v8 + 494) + 7) >> 3;
  do
    v538 = 64 << v536++;
  while (v538 < v537);
  v539 = 0;
  v540 = v536 - 1;
  do
    ++v539;
  while (v537 >> v539 > 3);
  *((_DWORD *)v22 + 3372) = v540;
  v541 = v536 - v539;
  if (v541)
  {
    v542 = (uint64_t)v1894;
    v543 = (unint64_t)v1895;
    v544 = v1896;
    while (1)
    {
      v545 = (unsigned __int8 *)(v542 + (v544 >> 3));
      if ((unint64_t)v545 >= v543)
        break;
      v546 = ~(_BYTE)v544 & 7;
      v547 = *v545;
      v1896 = ++v544;
      if (((v547 >> v546) & 1) != 0)
      {
        *((_DWORD *)v22 + 3372) = ++v540;
        v395 = __CFADD__(v541++, 1);
        if (!v395)
          continue;
      }
      goto LABEL_789;
    }
    if (v1898)
    {
      ((void (*)(uint64_t, __n128))v1898)(v1897, v382);
      v540 = *((_DWORD *)v22 + 3372);
    }
  }
LABEL_789:
  if (v540 >= 7)
    vpx_internal_error((uint64_t)v1876, 7, "Invalid number of tile columns", v382.n128_f64[0]);
  v549 = (unint64_t)v1895;
  v548 = v1896;
  v550 = (uint64_t)v1894;
  v551 = &v1894[v1896 >> 3];
  v82 = v1892;
  if (v551 >= v1895)
  {
    if (v1898)
    {
      v1898(v1897);
      v82 = v1892;
    }
    *((_DWORD *)v82 + 3336) = 0;
LABEL_799:
    if (*((_DWORD *)v82 + 3787) != 1)
      goto LABEL_882;
    goto LABEL_800;
  }
  v552 = *v551 >> (~(_BYTE)v1896 & 7);
  v553 = ++v1896;
  *((_DWORD *)v1892 + 3336) = v552 & 1;
  if ((v552 & 1) == 0)
    goto LABEL_799;
  v554 = (unsigned __int8 *)(v550 + (v553 >> 3));
  if ((unint64_t)v554 >= v549)
  {
    if (v1898)
    {
      v1898(v1897);
      v82 = v1892;
      *((_DWORD *)v1892 + 3336) = *((_DWORD *)v1892 + 3336);
      if (*((_DWORD *)v1892 + 3787) != 1)
        goto LABEL_882;
    }
    else
    {
      *((_DWORD *)v1892 + 3336) = 1;
      if (*((_DWORD *)v1892 + 3787) != 1)
        goto LABEL_882;
    }
  }
  else
  {
    v555 = (*v554 >> (~(_BYTE)v553 & 7)) & 1;
    v1896 = v548 + 2;
    *((_DWORD *)v1892 + 3336) = v555 + 1;
    if (*((_DWORD *)v1892 + 3787) != 1)
      goto LABEL_882;
  }
LABEL_800:
  v556 = *((_DWORD *)v8 + 492) + 7;
  v557 = *((_DWORD *)v22 + 3372);
  if (*((_QWORD *)v8 + 2588))
  {
    v558 = v556 >> 3;
    v559 = v22;
    if (*((int *)v82 + 3783) >= 2)
      goto LABEL_802;
  }
  else
  {
    v564 = malloc_type_malloc(0x16FuLL, 0x74AD08B5uLL);
    if (v564 && (v565 = ((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v565 - 8) = v564, v565))
    {
      *(_QWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x150) = 0;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x130) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x140) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x110) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x120) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xF0) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x100) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xD0) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xE0) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xB0) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xC0) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x90) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xA0) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x70) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x80) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x50) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x60) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x30) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x40) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0u;
      *(_OWORD *)((((unint64_t)v564 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x20) = 0u;
      *(_OWORD *)v565 = 0u;
      *((_QWORD *)v8 + 2588) = v565;
    }
    else
    {
      *((_QWORD *)v8 + 2588) = 0;
      vpx_internal_error((uint64_t)v1876, 2, "Failed to allocate pbi->row_mt_worker_data");
      v565 = *((_QWORD *)v8 + 2588);
    }
    pthread_mutex_init((pthread_mutex_t *)(v565 + 256), 0);
    v82 = v1892;
    v558 = v556 >> 3;
    v559 = v22;
    if (*((int *)v1892 + 3783) >= 2)
    {
LABEL_802:
      v560 = ((*((_DWORD *)v8 + 494) + 7) >> 3) * v558;
      v561 = v8;
      v562 = v558 << v557;
      v563 = *((_QWORD *)v561 + 2588);
      if (v560 > *(_DWORD *)v563)
        goto LABEL_871;
      goto LABEL_870;
    }
  }
  v560 = 1;
  v594 = v8;
  v562 = v558 << v557;
  v563 = *((_QWORD *)v594 + 2588);
  if (*(int *)v563 < 1)
  {
LABEL_871:
    vp9_dec_free_row_mt_mem(v563);
    v595 = v562;
    v8 = __src;
    vp9_dec_alloc_row_mt_mem(*((_QWORD *)__src + 2588), (uint64_t)v1876, v560, *((_DWORD *)v1892 + 3783), v595);
    v82 = v1892;
    v563 = *((_QWORD *)__src + 2588);
    goto LABEL_873;
  }
LABEL_870:
  if (v562 > *(_DWORD *)(v563 + 252))
    goto LABEL_871;
  v8 = __src;
LABEL_873:
  v596 = 12
       * (((*((_DWORD *)v8 + 492) + 7) >> 3) + 2 * ((*((_DWORD *)v8 + 492) + 7) >> 3 << *((_DWORD *)v559 + 3372)));
  if (v596 > *(_QWORD *)(v563 + 240))
  {
    v597 = *(_QWORD *)(v563 + 80);
    if (v597)
      free(*(void **)(v597 - 8));
    if (v596 <= 0x10000000000
      && (v598 = malloc_type_malloc(v596 + 23, 0x74AD08B5uLL)) != 0
      && (v599 = ((unint64_t)v598 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v599 - 8) = v598, v599))
    {
      bzero((void *)(((unint64_t)v598 + 23) & 0xFFFFFFFFFFFFFFF0), v596);
      *(_QWORD *)(v563 + 80) = v599;
    }
    else
    {
      *(_QWORD *)(v563 + 80) = 0;
      vpx_internal_error((uint64_t)v1876, 2, "Failed to allocate row_mt_worker_data->jobq_buf");
      v599 = *(_QWORD *)(v563 + 80);
    }
    pthread_mutex_init((pthread_mutex_t *)(v563 + 128), 0);
    pthread_cond_init((pthread_cond_t *)(v563 + 192), 0);
    *(_QWORD *)(v563 + 88) = v599;
    *(_QWORD *)(v563 + 96) = v599;
    *(_QWORD *)(v563 + 104) = v599;
    *(_QWORD *)(v563 + 112) = v599 + v596;
    *(_DWORD *)(v563 + 120) = 0;
    *(_QWORD *)(v563 + 240) = v596;
    v82 = v1892;
    v8 = __src;
  }
LABEL_882:
  v600 = 0;
  for (k = 17; k > 1; --k)
  {
    while (1)
    {
      v603 = &v1894[v1896 >> 3];
      if (v603 >= v1895)
        break;
      v602 = (*v603 >> (~(_BYTE)v1896++ & 7)) & 1;
      v600 |= v602 << (k-- - 2);
      if (k <= 1)
        goto LABEL_888;
    }
    if (v1898)
    {
      v1898(v1897);
      v82 = v1892;
    }
  }
LABEL_888:
  if (v600)
  {
    v81 = v600;
  }
  else
  {
    vpx_internal_error((uint64_t)v1876, 7, "Invalid header size");
    v82 = v1892;
    v81 = 0;
  }
LABEL_891:
  v604 = *((_DWORD *)v82 + 3336);
  v1882 = *((_DWORD *)v82 + 3335);
  v605 = *((_DWORD *)v8 + 400);
  v606 = *((_QWORD *)v8 + 2363);
  *((_QWORD *)v8 + 66) = v606 + 224 * v605 + 88;
  if (!v81)
  {
    v614 = 1;
    if (*v1888 > 2u)
      v614 = 2;
    *v1847 = &v7[v614];
    return;
  }
  v1855 = v605;
  v1851 = v606 + 224 * v605 + 88;
  v607 = (unint64_t *)&v7[(v1896 + 7) >> 3];
  if (v81 - 1 >= (unint64_t)(v6 - (_QWORD)v607))
  {
    vpx_internal_error((uint64_t)v1876, 7, "Truncated packet or corrupt header length");
    v82 = v1892;
  }
  v1854 = v606;
  if (!*((_DWORD *)v82 + 3333)
    && *((_DWORD *)v8 + 237) == *((_DWORD *)v8 + 241)
    && *((_DWORD *)v8 + 238) == *((_DWORD *)v8 + 242)
    && !*((_BYTE *)v8 + 1949))
  {
    v608 = *((_DWORD *)v8 + 485);
    if (v608)
      v608 = *((_DWORD *)v8 + 482) != 0;
  }
  else
  {
    v608 = 0;
  }
  *((_DWORD *)v8 + 540) = v608;
  v609 = *((_DWORD *)v8 + 243);
  v610 = *((_DWORD *)v8 + 244);
  *((_QWORD *)v8 + 1) = 0;
  *((_DWORD *)v8 + 36) = v609;
  *((_DWORD *)v8 + 37) = v610;
  *((_DWORD *)v8 + 70) = v609;
  *((_DWORD *)v8 + 71) = v610;
  memcpy(*((void **)v8 + 695), (const void *)(*((_QWORD *)v8 + 696) + 2044 * *((unsigned int *)v8 + 1394)), 0x7FCuLL);
  v1889 = *((_QWORD *)v8 + 695);
  if (!*(_DWORD *)(v1889 + 2040))
  {
    vpx_internal_error((uint64_t)v1876, 7, "Uninitialized entropy context.");
    v1889 = *((_QWORD *)v8 + 695);
  }
  *((_DWORD *)v8 + 158) = 0;
  v1902 = 0u;
  v1903[0] = 0u;
  v1901 = 0u;
  v1900 = 0u;
  if (vpx_reader_init((uint64_t)&v1900, v607, v81, *((void (**)(uint64_t))v8 + 2583), *((_QWORD *)v8 + 2584)))
    vpx_internal_error((uint64_t)v1876, 2, "Failed to allocate BOOL decoder 0");
  v1863 = v607;
  v1866 = v81;
  v611 = (int32x4_t *)&silk_shell_code_table1[141];
  v612 = &silk_shell_code_table1[141];
  v1859 = v604;
  if (*((_DWORD *)v8 + 157))
  {
    v613 = 0;
LABEL_984:
    *((_DWORD *)v8 + 496) = v613;
    goto LABEL_985;
  }
  v615 = DWORD2(v1900);
  v616 = HIDWORD(v1900);
  v617 = ((DWORD2(v1900) << 7) + 128) >> 8;
  v618 = v1900;
  if ((HIDWORD(v1900) & 0x80000000) != 0)
  {
    v620 = (unint64_t *)*((_QWORD *)&v1901 + 1);
    v621 = 8 * (v1901 - *((_QWORD *)&v1901 + 1));
    if ((_QWORD)v1902)
    {
      ((void (*)(_QWORD))v1902)(*((_QWORD *)&v1902 + 1));
      v611 = (int32x4_t *)&silk_shell_code_table1[141];
      v620 = (unint64_t *)v1903;
    }
    v622 = 48 - v616;
    if (v621 < 0x41)
    {
      v625 = 56 - v616 - v621;
      if (v625 < 0)
        v619 = v616;
      else
        v619 = v616 + 0x40000000;
      if (v621)
        v626 = 1;
      else
        v626 = v625 <= -1;
      if (v626 && (v627 = v625 & ~(v625 >> 31), v622 >= v627))
      {
        v628 = v627 - 1;
        if (v627 - 1 >= (int)(40 - v616))
          v628 = 40 - v616;
        v629 = 47 - v616 - v628;
        v624 = v620;
        v630 = 48 - v616;
        if (v629 < 0x78)
          goto LABEL_2464;
        v631 = 0uLL;
        v632 = (int8x16_t)v618;
        v633 = (int32x4_t)v619;
        v634 = vdupq_n_s32(v622);
        v635 = vaddq_s32(v634, (int32x4_t)xmmword_208F3A6C0);
        v636 = vaddq_s32(v634, (int32x4_t)xmmword_208F3A6D0);
        v637 = vaddq_s32(v634, (int32x4_t)xmmword_208F3A6A0);
        v638 = vaddq_s32(v634, (int32x4_t)xmmword_208F3A6B0);
        v639 = (v629 >> 3) + 1;
        v640.i64[0] = 0x800000008;
        v640.i64[1] = 0x800000008;
        v624 = (unint64_t *)((char *)v620 + (v639 & 0x3FFFFFF0));
        v641.i64[0] = 0x7F0000007FLL;
        v641.i64[1] = 0x7F0000007FLL;
        v630 = v622 - 8 * (v639 & 0x3FFFFFF0);
        v642 = 0uLL;
        v643 = v639 & 0x3FFFFFF0;
        v644 = 0uLL;
        v645 = (uint8x16_t *)v620;
        v646 = 0uLL;
        v647 = 0uLL;
        v648 = 0uLL;
        v649 = 0uLL;
        v650 = 0uLL;
        v651 = 0uLL;
        v652 = 0uLL;
        do
        {
          v653 = *v645++;
          v654 = vmovl_high_u8(v653);
          v655 = vmovl_high_u16(v654);
          v656.i64[0] = v655.u32[0];
          v656.i64[1] = v655.u32[1];
          v657 = v656;
          v658 = vmovl_u16(*(uint16x4_t *)v654.i8);
          v656.i64[0] = v658.u32[2];
          v656.i64[1] = v658.u32[3];
          v659 = v656;
          v660 = vmovl_u8(*(uint8x8_t *)v653.i8);
          v661 = vmovl_high_u16(v660);
          v656.i64[0] = v661.u32[2];
          v656.i64[1] = v661.u32[3];
          v662 = v656;
          v656.i64[0] = v655.u32[2];
          v656.i64[1] = v655.u32[3];
          v663 = v656;
          v656.i64[0] = v658.u32[0];
          v656.i64[1] = v658.u32[1];
          v664 = v656;
          v656.i64[0] = v661.u32[0];
          v656.i64[1] = v661.u32[1];
          v665 = v656;
          v666 = vmovl_u16(*(uint16x4_t *)v660.i8);
          v656.i64[0] = v666.u32[2];
          v656.i64[1] = v666.u32[3];
          v667 = v656;
          v656.i64[0] = v666.u32[0];
          v656.i64[1] = v666.u32[1];
          v668 = v656;
          v656.i64[0] = v638.u32[0];
          v656.i64[1] = v638.u32[1];
          v669 = (int8x16_t)vshlq_u64(v668, v656);
          v656.i64[0] = v638.u32[2];
          v656.i64[1] = v638.u32[3];
          v670 = (int8x16_t)vshlq_u64(v667, v656);
          v656.i64[0] = v637.u32[0];
          v656.i64[1] = v637.u32[1];
          v671 = (int8x16_t)vshlq_u64(v665, v656);
          v656.i64[0] = v636.u32[0];
          v656.i64[1] = v636.u32[1];
          v672 = (int8x16_t)vshlq_u64(v664, v656);
          v656.i64[0] = v635.u32[2];
          v656.i64[1] = v635.u32[3];
          v673 = (int8x16_t)vshlq_u64(v663, v656);
          v656.i64[0] = v637.u32[2];
          v656.i64[1] = v637.u32[3];
          v674 = (int8x16_t)vshlq_u64(v662, v656);
          v656.i64[0] = v636.u32[2];
          v656.i64[1] = v636.u32[3];
          v675 = (int8x16_t)vshlq_u64(v659, v656);
          v656.i64[0] = v635.u32[0];
          v656.i64[1] = v635.u32[1];
          v648 = vorrq_s8((int8x16_t)vshlq_u64(v657, v656), v648);
          v647 = vorrq_s8(v675, v647);
          v644 = vorrq_s8(v674, v644);
          v649 = vorrq_s8(v673, v649);
          v646 = vorrq_s8(v672, v646);
          v642 = vorrq_s8(v671, v642);
          v631 = vorrq_s8(v670, v631);
          v632 = vorrq_s8(v669, v632);
          v633 = vaddq_s32(v633, v640);
          v650 = vaddq_s32(v650, v640);
          v651 = vaddq_s32(v651, v640);
          v652 = vaddq_s32(v652, v640);
          v638 = vaddq_s32(v638, v641);
          v637 = vaddq_s32(v637, v641);
          v636 = vaddq_s32(v636, v641);
          v635 = vaddq_s32(v635, v641);
          v643 -= 16;
        }
        while (v643);
        v619 = vaddvq_s32(vaddq_s32(vaddq_s32(v633, v651), vaddq_s32(v650, v652)));
        v676 = vorrq_s8(vorrq_s8(vorrq_s8(v632, v646), vorrq_s8(v642, v648)), vorrq_s8(vorrq_s8(v631, v647), vorrq_s8(v644, v649)));
        v618 = (unint64_t)vorr_s8(*(int8x8_t *)v676.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v676, v676, 8uLL));
        if ((v639 & 0x3FFFFFF0) != v639)
        {
LABEL_2464:
          do
          {
            v619 += 8;
            v677 = *(unsigned __int8 *)v624;
            v624 = (unint64_t *)((char *)v624 + 1);
            v618 |= (unint64_t)v677 << v630;
            v630 -= 8;
          }
          while (v630 >= v627);
        }
      }
      else
      {
        v624 = v620;
      }
    }
    else
    {
      v623 = (v622 & 0xFFFFFFF8) + 8;
      v619 = v623 + v616;
      v624 = (unint64_t *)((char *)v620 + (v623 >> 3));
      v618 = (bswap64(*v620) >> (56 - (v622 & 0xF8u)) << (v622 & 7)) | v1900;
    }
    *((_QWORD *)&v1901 + 1) += (char *)v624 - (char *)v620;
    v615 = DWORD2(v1900);
  }
  else
  {
    v619 = HIDWORD(v1900);
  }
  v686 = v617 << 56;
  v687 = v615 - v617;
  if (v618 < v617 << 56)
  {
    v686 = 0;
    v687 = v617;
  }
  v688 = 2 * (v618 >= v617 << 56);
  v689 = vpx_norm[v687];
  v690 = v687 << v689;
  v691 = (v618 - v686) << v689;
  *(_QWORD *)&v1900 = v691;
  v692 = ((v690 << 7) + 128) >> 8;
  v693 = v619 - v689;
  HIDWORD(v1900) = v619 - v689;
  DWORD2(v1900) = v690;
  if ((int)(v619 - v689) < 0)
  {
    v694 = (unint64_t *)*((_QWORD *)&v1901 + 1);
    v695 = 8 * (v1901 - *((_QWORD *)&v1901 + 1));
    if ((_QWORD)v1902)
    {
      ((void (*)(_QWORD))v1902)(*((_QWORD *)&v1902 + 1));
      v694 = (unint64_t *)v1903;
    }
    v696 = 48 - v693;
    if (v695 < 0x41)
    {
      v699 = 56 - v695 - v693;
      if (v699 >= 0)
        v693 += 0x40000000;
      if (v695)
        v700 = 1;
      else
        v700 = v699 <= -1;
      v701 = v699 & ~(v699 >> 31);
      v702 = !v700 || v696 < v701;
      v611 = (int32x4_t *)&silk_shell_code_table1[141];
      if (!v702)
      {
        v812 = v689 - v619 + 40;
        if (v812 >= v701 - 1)
          v812 = v701 - 1;
        v813 = v689 - v619 - v812 + 47;
        v698 = v694;
        v814 = v696;
        v612 = &silk_shell_code_table1[141];
        if (v813 < 0x78)
          goto LABEL_2465;
        v815 = 0uLL;
        v816 = (int8x16_t)v691;
        v817 = (int32x4_t)v693;
        v818 = vdupq_n_s32(v696);
        v819 = vaddq_s32(v818, (int32x4_t)xmmword_208F3A6C0);
        v820 = vaddq_s32(v818, (int32x4_t)xmmword_208F3A6D0);
        v821 = vaddq_s32(v818, (int32x4_t)xmmword_208F3A6A0);
        v822 = vaddq_s32(v818, (int32x4_t)xmmword_208F3A6B0);
        v823 = (v813 >> 3) + 1;
        v824.i64[0] = 0x800000008;
        v824.i64[1] = 0x800000008;
        v698 = (unint64_t *)((char *)v694 + (v823 & 0x3FFFFFF0));
        v825.i64[0] = 0x7F0000007FLL;
        v825.i64[1] = 0x7F0000007FLL;
        v814 = v696 - 8 * (v823 & 0x3FFFFFF0);
        v826 = 0uLL;
        v827 = v823 & 0x3FFFFFF0;
        v828 = 0uLL;
        v829 = (uint8x16_t *)v694;
        v830 = 0uLL;
        v831 = 0uLL;
        v832 = 0uLL;
        v833 = 0uLL;
        v834 = 0uLL;
        v835 = 0uLL;
        v836 = 0uLL;
        do
        {
          v837 = *v829++;
          v838 = vmovl_high_u8(v837);
          v839 = vmovl_high_u16(v838);
          v840.i64[0] = v839.u32[0];
          v840.i64[1] = v839.u32[1];
          v841 = v840;
          v842 = vmovl_u16(*(uint16x4_t *)v838.i8);
          v840.i64[0] = v842.u32[2];
          v840.i64[1] = v842.u32[3];
          v843 = v840;
          v844 = vmovl_u8(*(uint8x8_t *)v837.i8);
          v845 = vmovl_high_u16(v844);
          v840.i64[0] = v845.u32[2];
          v840.i64[1] = v845.u32[3];
          v846 = v840;
          v840.i64[0] = v839.u32[2];
          v840.i64[1] = v839.u32[3];
          v847 = v840;
          v840.i64[0] = v842.u32[0];
          v840.i64[1] = v842.u32[1];
          v848 = v840;
          v840.i64[0] = v845.u32[0];
          v840.i64[1] = v845.u32[1];
          v849 = v840;
          v850 = vmovl_u16(*(uint16x4_t *)v844.i8);
          v840.i64[0] = v850.u32[2];
          v840.i64[1] = v850.u32[3];
          v851 = v840;
          v840.i64[0] = v850.u32[0];
          v840.i64[1] = v850.u32[1];
          v852 = v840;
          v840.i64[0] = v822.u32[0];
          v840.i64[1] = v822.u32[1];
          v853 = (int8x16_t)vshlq_u64(v852, v840);
          v840.i64[0] = v822.u32[2];
          v840.i64[1] = v822.u32[3];
          v854 = (int8x16_t)vshlq_u64(v851, v840);
          v840.i64[0] = v821.u32[0];
          v840.i64[1] = v821.u32[1];
          v855 = (int8x16_t)vshlq_u64(v849, v840);
          v840.i64[0] = v820.u32[0];
          v840.i64[1] = v820.u32[1];
          v856 = (int8x16_t)vshlq_u64(v848, v840);
          v840.i64[0] = v819.u32[2];
          v840.i64[1] = v819.u32[3];
          v857 = (int8x16_t)vshlq_u64(v847, v840);
          v840.i64[0] = v821.u32[2];
          v840.i64[1] = v821.u32[3];
          v858 = (int8x16_t)vshlq_u64(v846, v840);
          v840.i64[0] = v820.u32[2];
          v840.i64[1] = v820.u32[3];
          v859 = (int8x16_t)vshlq_u64(v843, v840);
          v840.i64[0] = v819.u32[0];
          v840.i64[1] = v819.u32[1];
          v832 = vorrq_s8((int8x16_t)vshlq_u64(v841, v840), v832);
          v831 = vorrq_s8(v859, v831);
          v828 = vorrq_s8(v858, v828);
          v833 = vorrq_s8(v857, v833);
          v830 = vorrq_s8(v856, v830);
          v826 = vorrq_s8(v855, v826);
          v815 = vorrq_s8(v854, v815);
          v816 = vorrq_s8(v853, v816);
          v817 = vaddq_s32(v817, v824);
          v834 = vaddq_s32(v834, v824);
          v835 = vaddq_s32(v835, v824);
          v836 = vaddq_s32(v836, v824);
          v822 = vaddq_s32(v822, v825);
          v821 = vaddq_s32(v821, v825);
          v820 = vaddq_s32(v820, v825);
          v819 = vaddq_s32(v819, v825);
          v827 -= 16;
        }
        while (v827);
        v693 = vaddvq_s32(vaddq_s32(vaddq_s32(v817, v835), vaddq_s32(v834, v836)));
        v860 = vorrq_s8(vorrq_s8(vorrq_s8(v816, v830), vorrq_s8(v826, v832)), vorrq_s8(vorrq_s8(v815, v831), vorrq_s8(v828, v833)));
        v691 = (unint64_t)vorr_s8(*(int8x8_t *)v860.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v860, v860, 8uLL));
        if ((v823 & 0x3FFFFFF0) != v823)
        {
LABEL_2465:
          do
          {
            v693 += 8;
            v861 = *(unsigned __int8 *)v698;
            v698 = (unint64_t *)((char *)v698 + 1);
            v691 |= (unint64_t)v861 << v814;
            v814 -= 8;
          }
          while (v814 >= v701);
        }
        goto LABEL_975;
      }
      v698 = v694;
    }
    else
    {
      v697 = (v696 & 0xFFFFFFF8) + 8;
      v693 += v697;
      v698 = (unint64_t *)((char *)v694 + (v697 >> 3));
      v691 = (bswap64(*v694) >> (56 - (v696 & 0xF8u)) << (v696 & 7)) | v1900;
      v611 = (int32x4_t *)(silk_shell_code_table1 + 141);
    }
    v612 = silk_shell_code_table1 + 141;
LABEL_975:
    *((_QWORD *)&v1901 + 1) += (char *)v698 - (char *)v694;
    v690 = DWORD2(v1900);
  }
  v703 = v692 << 56;
  v704 = v690 - v692;
  v705 = v691 >= v692 << 56;
  if (v691 < v692 << 56)
  {
    v703 = 0;
    v704 = v692;
  }
  v706 = vpx_norm[v704];
  v707 = v704 << v706;
  v708 = (v691 - v703) << v706;
  v709 = v693 - v706;
  *(_QWORD *)&v1900 = v708;
  HIDWORD(v1900) = v693 - v706;
  DWORD2(v1900) = v707;
  v613 = v688 | v705;
  v8 = __src;
  if ((v688 | v705) != 3)
    goto LABEL_984;
  v710 = ((v707 << 7) + 128) >> 8;
  if ((v709 & 0x80000000) != 0)
  {
    v711 = (unint64_t *)*((_QWORD *)&v1901 + 1);
    v712 = 8 * (v1901 - *((_QWORD *)&v1901 + 1));
    if ((_QWORD)v1902)
    {
      v713 = ((v707 << 7) + 128) >> 8;
      v714 = v611;
      ((void (*)(_QWORD))v1902)(*((_QWORD *)&v1902 + 1));
      v710 = v713;
      v611 = v714;
      v711 = (unint64_t *)v1903;
    }
    v715 = 48 - v709;
    if (v712 < 0x41)
    {
      v862 = 56 - v712 - v709;
      if (v862 >= 0)
        v709 += 0x40000000;
      if (v712)
        v863 = 1;
      else
        v863 = v862 <= -1;
      v864 = v862 & ~(v862 >> 31);
      v865 = !v863 || v715 < v864;
      v612 = &silk_shell_code_table1[141];
      if (v865)
      {
        v717 = v711;
        v8 = __src;
      }
      else
      {
        v919 = v706 - v693 + 40;
        if (v919 >= v864 - 1)
          v919 = v864 - 1;
        v920 = v706 - v693 - v919 + 47;
        v717 = v711;
        v921 = v715;
        v8 = __src;
        if (v920 < 0x78)
          goto LABEL_2466;
        v922 = 0uLL;
        v923 = (int8x16_t)v708;
        v924 = (int32x4_t)v709;
        v925 = vdupq_n_s32(v715);
        v926 = vaddq_s32(v925, v611[108]);
        v927 = vaddq_s32(v925, (int32x4_t)xmmword_208F3A6D0);
        v928 = vaddq_s32(v925, (int32x4_t)xmmword_208F3A6A0);
        v929 = vaddq_s32(v925, (int32x4_t)xmmword_208F3A6B0);
        v930 = (v920 >> 3) + 1;
        v931.i64[0] = 0x800000008;
        v931.i64[1] = 0x800000008;
        v717 = (unint64_t *)((char *)v711 + (v930 & 0x3FFFFFF0));
        v932.i64[0] = 0x7F0000007FLL;
        v932.i64[1] = 0x7F0000007FLL;
        v921 = v715 - 8 * (v930 & 0x3FFFFFF0);
        v933 = 0uLL;
        v934 = v930 & 0x3FFFFFF0;
        v935 = 0uLL;
        v936 = (uint8x16_t *)v711;
        v937 = 0uLL;
        v938 = 0uLL;
        v939 = 0uLL;
        v940 = 0uLL;
        v941 = 0uLL;
        v942 = 0uLL;
        v943 = 0uLL;
        do
        {
          v944 = *v936++;
          v945 = vmovl_high_u8(v944);
          v946 = vmovl_high_u16(v945);
          v947.i64[0] = v946.u32[0];
          v947.i64[1] = v946.u32[1];
          v948 = v947;
          v949 = vmovl_u16(*(uint16x4_t *)v945.i8);
          v947.i64[0] = v949.u32[2];
          v947.i64[1] = v949.u32[3];
          v950 = v947;
          v951 = vmovl_u8(*(uint8x8_t *)v944.i8);
          v952 = vmovl_high_u16(v951);
          v947.i64[0] = v952.u32[2];
          v947.i64[1] = v952.u32[3];
          v953 = v947;
          v947.i64[0] = v946.u32[2];
          v947.i64[1] = v946.u32[3];
          v954 = v947;
          v947.i64[0] = v949.u32[0];
          v947.i64[1] = v949.u32[1];
          v955 = v947;
          v947.i64[0] = v952.u32[0];
          v947.i64[1] = v952.u32[1];
          v956 = v947;
          v957 = vmovl_u16(*(uint16x4_t *)v951.i8);
          v947.i64[0] = v957.u32[2];
          v947.i64[1] = v957.u32[3];
          v958 = v947;
          v947.i64[0] = v957.u32[0];
          v947.i64[1] = v957.u32[1];
          v959 = v947;
          v947.i64[0] = v929.u32[0];
          v947.i64[1] = v929.u32[1];
          v960 = (int8x16_t)vshlq_u64(v959, v947);
          v947.i64[0] = v929.u32[2];
          v947.i64[1] = v929.u32[3];
          v961 = (int8x16_t)vshlq_u64(v958, v947);
          v947.i64[0] = v928.u32[0];
          v947.i64[1] = v928.u32[1];
          v962 = (int8x16_t)vshlq_u64(v956, v947);
          v947.i64[0] = v927.u32[0];
          v947.i64[1] = v927.u32[1];
          v963 = (int8x16_t)vshlq_u64(v955, v947);
          v947.i64[0] = v926.u32[2];
          v947.i64[1] = v926.u32[3];
          v964 = (int8x16_t)vshlq_u64(v954, v947);
          v947.i64[0] = v928.u32[2];
          v947.i64[1] = v928.u32[3];
          v965 = (int8x16_t)vshlq_u64(v953, v947);
          v947.i64[0] = v927.u32[2];
          v947.i64[1] = v927.u32[3];
          v966 = (int8x16_t)vshlq_u64(v950, v947);
          v947.i64[0] = v926.u32[0];
          v947.i64[1] = v926.u32[1];
          v939 = vorrq_s8((int8x16_t)vshlq_u64(v948, v947), v939);
          v938 = vorrq_s8(v966, v938);
          v935 = vorrq_s8(v965, v935);
          v940 = vorrq_s8(v964, v940);
          v937 = vorrq_s8(v963, v937);
          v933 = vorrq_s8(v962, v933);
          v922 = vorrq_s8(v961, v922);
          v923 = vorrq_s8(v960, v923);
          v924 = vaddq_s32(v924, v931);
          v941 = vaddq_s32(v941, v931);
          v942 = vaddq_s32(v942, v931);
          v943 = vaddq_s32(v943, v931);
          v929 = vaddq_s32(v929, v932);
          v928 = vaddq_s32(v928, v932);
          v927 = vaddq_s32(v927, v932);
          v926 = vaddq_s32(v926, v932);
          v934 -= 16;
        }
        while (v934);
        v709 = vaddvq_s32(vaddq_s32(vaddq_s32(v924, v942), vaddq_s32(v941, v943)));
        v967 = vorrq_s8(vorrq_s8(vorrq_s8(v923, v937), vorrq_s8(v933, v939)), vorrq_s8(vorrq_s8(v922, v938), vorrq_s8(v935, v940)));
        v708 = (unint64_t)vorr_s8(*(int8x8_t *)v967.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v967, v967, 8uLL));
        if ((v930 & 0x3FFFFFF0) != v930)
        {
LABEL_2466:
          do
          {
            v709 += 8;
            v968 = *(unsigned __int8 *)v717;
            v717 = (unint64_t *)((char *)v717 + 1);
            v708 |= (unint64_t)v968 << v921;
            v921 -= 8;
          }
          while (v921 >= v864);
        }
      }
    }
    else
    {
      v716 = (v715 & 0xFFFFFFF8) + 8;
      v709 += v716;
      v717 = (unint64_t *)((char *)v711 + (v716 >> 3));
      v708 = (bswap64(*v711) >> (56 - (v715 & 0xF8u)) << (v715 & 7)) | v1900;
      v8 = __src;
      v612 = silk_shell_code_table1 + 141;
    }
    *((_QWORD *)&v1901 + 1) += (char *)v717 - (char *)v711;
    v707 = DWORD2(v1900);
  }
  v969 = v710 << 56;
  v970 = v707 - v710;
  if (v708 >= v710 << 56)
    v971 = v710 << 56;
  else
    v971 = 0;
  if (v708 < v710 << 56)
    v970 = v710;
  v972 = vpx_norm[v970];
  v973 = v709 - v972;
  v974 = v970 << v972;
  v975 = (v708 - v971) << v972;
  v613 = 3u;
  *(_QWORD *)&v1900 = v975;
  *((_QWORD *)&v1900 + 1) = __PAIR64__(v973, v974);
  if (v708 < v969)
    v976 = 3u;
  else
    v976 = v613 + 1;
  *((_DWORD *)v8 + 496) = v976;
  if (v708 >= v969)
  {
    v977 = v611;
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1965));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1966));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1961));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1962));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1963));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1964));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1955));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1956));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1957));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1958));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1959));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1960));
    v611 = v977;
    v613 = *((_DWORD *)v8 + 496);
  }
LABEL_985:
  v718 = 0;
  v1853 = 1 << v1882;
  v719 = tx_mode_to_biggest_tx_size[v613];
  v1883 = (unint64_t *)v1903;
  v1877 = v611[108];
  v1871 = *((int32x4_t *)v612 + 109);
  v720.i64[0] = 0x800000008;
  v720.i64[1] = 0x800000008;
  v721.i64[0] = 0x7F0000007FLL;
  v721.i64[1] = 0x7F0000007FLL;
  do
  {
    v722 = DWORD2(v1900);
    v723 = HIDWORD(v1900);
    v724 = v1900;
    if ((HIDWORD(v1900) & 0x80000000) != 0)
    {
      v727 = (unint64_t *)*((_QWORD *)&v1901 + 1);
      v728 = v1901 - *((_QWORD *)&v1901 + 1);
      if ((_QWORD)v1902)
      {
        if (v728 >= 9)
          v729 = 9;
        else
          v729 = v1901 - *((_QWORD *)&v1901 + 1);
        v727 = (unint64_t *)v1903;
        ((void (*)(_QWORD, _QWORD, _OWORD *, uint64_t))v1902)(*((_QWORD *)&v1902 + 1), *((_QWORD *)&v1901 + 1), v1903, v729);
        v721.i64[0] = 0x7F0000007FLL;
        v721.i64[1] = 0x7F0000007FLL;
        v720.i64[0] = 0x800000008;
        v720.i64[1] = 0x800000008;
      }
      v730 = 8 * v728;
      v731 = 48 - v723;
      if (8 * v728 < 0x41)
      {
        v734 = 56 - v723 - v730;
        if (v734 < 0)
          v726 = v723;
        else
          v726 = v723 + 0x40000000;
        if (v730)
          v735 = 1;
        else
          v735 = v734 <= -1;
        v736 = v734 & ~(v734 >> 31);
        if (!v735 || v731 < v736)
        {
          v733 = v727;
        }
        else
        {
          v738 = v736 - 1;
          if (v736 - 1 >= (int)(40 - v723))
            v738 = 40 - v723;
          v739 = 47 - v723 - v738;
          v733 = v727;
          v740 = 48 - v723;
          if (v739 < 0x78)
            goto LABEL_2467;
          v741 = (v739 >> 3) + 1;
          v742 = (int8x16_t)v724;
          v743 = 0uLL;
          v744 = (int32x4_t)v726;
          v745 = vdupq_n_s32(v731);
          v746 = vaddq_s32(v745, v1877);
          v733 = (unint64_t *)((char *)v727 + (v741 & 0x3FFFFFF0));
          v747 = vaddq_s32(v745, v1871);
          v740 = v731 - 8 * (v741 & 0x3FFFFFF0);
          v748 = vaddq_s32(v745, (int32x4_t)xmmword_208F3A6A0);
          v749 = vaddq_s32(v745, (int32x4_t)xmmword_208F3A6B0);
          v750 = v741 & 0x3FFFFFF0;
          v751 = (uint8x16_t *)v727;
          v752 = 0uLL;
          v753 = 0uLL;
          v754 = 0uLL;
          v755 = 0uLL;
          v756 = 0uLL;
          v757 = 0uLL;
          v758 = 0uLL;
          v759 = 0uLL;
          v760 = 0uLL;
          do
          {
            v761 = *v751++;
            v762 = vmovl_high_u8(v761);
            v763 = vmovl_high_u16(v762);
            v764.i64[0] = v763.u32[0];
            v764.i64[1] = v763.u32[1];
            v765 = v764;
            v766 = vmovl_u16(*(uint16x4_t *)v762.i8);
            v764.i64[0] = v766.u32[2];
            v764.i64[1] = v766.u32[3];
            v767 = v764;
            v768 = vmovl_u8(*(uint8x8_t *)v761.i8);
            v769 = vmovl_high_u16(v768);
            v764.i64[0] = v769.u32[2];
            v764.i64[1] = v769.u32[3];
            v770 = v764;
            v764.i64[0] = v763.u32[2];
            v764.i64[1] = v763.u32[3];
            v771 = v764;
            v764.i64[0] = v766.u32[0];
            v764.i64[1] = v766.u32[1];
            v772 = v764;
            v764.i64[0] = v769.u32[0];
            v764.i64[1] = v769.u32[1];
            v773 = v764;
            v774 = vmovl_u16(*(uint16x4_t *)v768.i8);
            v764.i64[0] = v774.u32[2];
            v764.i64[1] = v774.u32[3];
            v775 = v764;
            v764.i64[0] = v774.u32[0];
            v764.i64[1] = v774.u32[1];
            v776 = v764;
            v764.i64[0] = v749.u32[0];
            v764.i64[1] = v749.u32[1];
            v777 = (int8x16_t)vshlq_u64(v776, v764);
            v764.i64[0] = v749.u32[2];
            v764.i64[1] = v749.u32[3];
            v778 = (int8x16_t)vshlq_u64(v775, v764);
            v764.i64[0] = v748.u32[0];
            v764.i64[1] = v748.u32[1];
            v779 = (int8x16_t)vshlq_u64(v773, v764);
            v764.i64[0] = v747.u32[0];
            v764.i64[1] = v747.u32[1];
            v780 = (int8x16_t)vshlq_u64(v772, v764);
            v764.i64[0] = v746.u32[2];
            v764.i64[1] = v746.u32[3];
            v781 = (int8x16_t)vshlq_u64(v771, v764);
            v764.i64[0] = v748.u32[2];
            v764.i64[1] = v748.u32[3];
            v782 = (int8x16_t)vshlq_u64(v770, v764);
            v764.i64[0] = v747.u32[2];
            v764.i64[1] = v747.u32[3];
            v783 = (int8x16_t)vshlq_u64(v767, v764);
            v764.i64[0] = v746.u32[0];
            v764.i64[1] = v746.u32[1];
            v756 = vorrq_s8((int8x16_t)vshlq_u64(v765, v764), v756);
            v755 = vorrq_s8(v783, v755);
            v753 = vorrq_s8(v782, v753);
            v757 = vorrq_s8(v781, v757);
            v754 = vorrq_s8(v780, v754);
            v752 = vorrq_s8(v779, v752);
            v743 = vorrq_s8(v778, v743);
            v742 = vorrq_s8(v777, v742);
            v744 = vaddq_s32(v744, v720);
            v758 = vaddq_s32(v758, v720);
            v759 = vaddq_s32(v759, v720);
            v760 = vaddq_s32(v760, v720);
            v749 = vaddq_s32(v749, v721);
            v748 = vaddq_s32(v748, v721);
            v747 = vaddq_s32(v747, v721);
            v746 = vaddq_s32(v746, v721);
            v750 -= 16;
          }
          while (v750);
          v726 = vaddvq_s32(vaddq_s32(vaddq_s32(v744, v759), vaddq_s32(v758, v760)));
          v784 = vorrq_s8(vorrq_s8(vorrq_s8(v742, v754), vorrq_s8(v752, v756)), vorrq_s8(vorrq_s8(v743, v755), vorrq_s8(v753, v757)));
          v724 = (unint64_t)vorr_s8(*(int8x8_t *)v784.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v784, v784, 8uLL));
          if ((v741 & 0x3FFFFFF0) != v741)
          {
LABEL_2467:
            do
            {
              v726 += 8;
              v785 = *(unsigned __int8 *)v733;
              v733 = (unint64_t *)((char *)v733 + 1);
              v724 |= (unint64_t)v785 << v740;
              v740 -= 8;
            }
            while (v740 >= v736);
          }
        }
      }
      else
      {
        v732 = (v731 & 0xFFFFFFF8) + 8;
        v726 = v732 + v723;
        v733 = (unint64_t *)((char *)v727 + (v732 >> 3));
        v724 = (bswap64(*v727) >> (56 - (v731 & 0xF8u)) << (v731 & 7)) | v1900;
      }
      *((_QWORD *)&v1901 + 1) += (char *)v733 - (char *)v727;
      v725 = DWORD2(v1900);
    }
    else
    {
      v725 = DWORD2(v1900);
      v726 = HIDWORD(v1900);
    }
    v786 = ((v722 << 7) + 128) >> 8;
    v787 = v786 << 56;
    v788 = v725 - v786;
    if (v724 >= v786 << 56)
      v789 = v786 << 56;
    else
      v789 = 0;
    if (v724 < v786 << 56)
      v788 = ((v722 << 7) + 128) >> 8;
    v790 = v724 - v789;
    v791 = vpx_norm[v788];
    *(_QWORD *)&v1900 = v790 << v791;
    HIDWORD(v1900) = v726 - v791;
    DWORD2(v1900) = v788 << v791;
    if (v724 >= v787)
    {
      v792 = 0;
      v793 = 1;
      do
      {
        v794 = 0;
        v795 = v793;
        v796 = 1;
        do
        {
          v797 = v796;
          v798 = (_BYTE *)(v1889 + 432 * v718 + 174 + 216 * v792 + 108 * v794);
          vp9_diff_update_prob((uint64_t)&v1900, v798);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 1);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 2);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 3);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 4);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 5);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 6);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 7);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 8);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 18);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 19);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 20);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 21);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 22);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 23);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 24);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 25);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 26);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 27);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 28);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 29);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 30);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 31);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 32);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 33);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 34);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 35);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 36);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 37);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 38);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 39);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 40);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 41);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 42);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 43);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 44);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 45);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 46);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 47);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 48);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 49);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 50);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 51);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 52);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 53);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 54);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 55);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 56);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 57);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 58);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 59);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 60);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 61);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 62);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 63);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 64);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 65);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 66);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 67);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 68);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 69);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 70);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 71);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 72);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 73);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 74);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 75);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 76);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 77);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 78);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 79);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 80);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 81);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 82);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 83);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 84);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 85);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 86);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 87);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 88);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 89);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 90);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 91);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 92);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 93);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 94);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 95);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 96);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 97);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 98);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 99);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 100);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 101);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 102);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 103);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 104);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 105);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 106);
          vp9_diff_update_prob((uint64_t)&v1900, v798 + 107);
          v796 = 0;
          v794 = 1;
        }
        while ((v797 & 1) != 0);
        v793 = 0;
        v792 = 1;
      }
      while ((v795 & 1) != 0);
    }
    ++v718;
    v720.i64[0] = 0x800000008;
    v720.i64[1] = 0x800000008;
    v721.i64[0] = 0x7F0000007FLL;
    v721.i64[1] = 0x7F0000007FLL;
  }
  while (v719 >= v718);
  vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1967));
  vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1968));
  vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1969));
  v799 = (uint64_t)__src;
  v800 = v1866;
  v801 = v1859;
  if (*((_DWORD *)__src + 483) && !*((_BYTE *)__src + 1948))
  {
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1910));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1911));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1912));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1913));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1914));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1915));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1916));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1917));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1918));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1919));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1920));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1921));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1922));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1923));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1924));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1925));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1926));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1927));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1928));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1929));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1930));
    if (*((_BYTE *)__src + 2212) == 4)
    {
      vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1902));
      vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1903));
      vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1904));
      vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1905));
      vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1906));
      vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1907));
      vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1908));
      vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1909));
    }
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1931));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1932));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1933));
    vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1934));
    v802 = *((_DWORD *)__src + 1343);
    if (v802 == *((_DWORD *)__src + 1342) && *((_DWORD *)__src + 1344) == v802)
      goto LABEL_1108;
    v803 = DWORD2(v1900);
    v804 = HIDWORD(v1900);
    v805 = ((DWORD2(v1900) << 7) + 128) >> 8;
    v806 = v1900;
    if ((HIDWORD(v1900) & 0x80000000) == 0)
    {
      v807 = HIDWORD(v1900);
      goto LABEL_1101;
    }
    v808 = 8 * (v1901 - *((_QWORD *)&v1901 + 1));
    if ((_QWORD)v1902)
    {
      ((void (*)(_QWORD))v1902)(*((_QWORD *)&v1902 + 1));
      v809 = 48 - v804;
      if (v808 >= 0x41)
      {
LABEL_1037:
        v810 = (v809 & 0xFFFFFFF8) + 8;
        v807 = v810 + v804;
        v811 = (unint64_t *)((char *)v1883 + (v810 >> 3));
        v806 = (bswap64(*v1883) >> (56 - (v809 & 0xF8u)) << (v809 & 7)) | v1900;
        v800 = v1866;
        v801 = v1859;
LABEL_1100:
        *((_QWORD *)&v1901 + 1) += (char *)v811 - (char *)v1883;
        v803 = DWORD2(v1900);
LABEL_1101:
        v978 = v803 - v805;
        if (v806 >= v805 << 56)
          v979 = v805 << 56;
        else
          v979 = 0;
        if (v806 >= v805 << 56)
          v980 = v978;
        else
          v980 = v805;
        v981 = v806 - v979;
        v982 = vpx_norm[v980];
        v983 = v807 - v982;
        v984 = v981 << v982;
        *(_QWORD *)&v1900 = v984;
        v985 = v980 << v982;
        HIDWORD(v1900) = v807 - v982;
        DWORD2(v1900) = v985;
        if (v806 < v805 << 56)
        {
LABEL_1108:
          v986 = __src + 2776;
          *((_DWORD *)__src + 1388) = 0;
          v987 = (_BYTE *)*((_QWORD *)__src + 695);
          goto LABEL_1109;
        }
        v1073 = ((v985 << 7) + 128) >> 8;
        if (v983 < 0)
        {
          vpx_reader_fill((uint64_t)&v1900);
          v984 = v1900;
          v983 = HIDWORD(v1900);
          v985 = DWORD2(v1900);
        }
        v1074 = v1073 << 56;
        v1075 = v985 - v1073;
        if (v984 < v1073 << 56)
          v1076 = 1;
        else
          v1076 = 2;
        if (v984 >= v1073 << 56)
          v1077 = v1073 << 56;
        else
          v1077 = 0;
        if (v984 < v1073 << 56)
          v1075 = v1073;
        v1078 = vpx_norm[v1075];
        *(_QWORD *)&v1900 = (v984 - v1077) << v1078;
        HIDWORD(v1900) = v983 - v1078;
        DWORD2(v1900) = v1075 << v1078;
        v986 = __src + 2776;
        *((_DWORD *)__src + 1388) = v1076;
        v1079 = *((_DWORD *)__src + 1342);
        if (v1079 == *((_DWORD *)__src + 1343))
        {
          *v1892 = 259;
          *((_BYTE *)v1892 + 2) = 2;
          v987 = (_BYTE *)*((_QWORD *)__src + 695);
          if (v984 < v1074)
            goto LABEL_1110;
        }
        else
        {
          if (v1079 == *((_DWORD *)__src + 1344))
            v1094 = 258;
          else
            v1094 = 513;
          *v1892 = v1094;
          *((_BYTE *)v1892 + 2) = 3;
          v987 = (_BYTE *)*((_QWORD *)__src + 695);
          if (v984 < v1074)
            goto LABEL_1110;
        }
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1935);
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1936);
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1937);
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1938);
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1939);
        if (*v986 != 1)
        {
LABEL_1109:
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1940);
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1941);
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1942);
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1943);
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1944);
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1945);
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1946);
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1947);
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1948);
          vp9_diff_update_prob((uint64_t)&v1900, v987 + 1949);
          if (!*v986)
            goto LABEL_1111;
        }
LABEL_1110:
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1950);
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1951);
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1952);
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1953);
        vp9_diff_update_prob((uint64_t)&v1900, v987 + 1954);
LABEL_1111:
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)v1889);
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 1));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 2));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 3));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 4));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 5));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 6));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 7));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 8));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 9));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 10));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 11));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 12));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 13));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 14));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 15));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 16));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 17));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 18));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 19));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 20));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 21));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 22));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 23));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 24));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 25));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 26));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 27));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 28));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 29));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 30));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 31));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 32));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 33));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 34));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 35));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 126));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 127));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 128));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 129));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 130));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 131));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 132));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 133));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 134));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 135));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 136));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 137));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 138));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 139));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 140));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 141));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 142));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 143));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 144));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 145));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 146));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 147));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 148));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 149));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 150));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 151));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 152));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 153));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 154));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 155));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 156));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 157));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 158));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 159));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 160));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 161));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 162));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 163));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 164));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 165));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 166));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 167));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 168));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 169));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 170));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 171));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 172));
        vp9_diff_update_prob((uint64_t)&v1900, (_BYTE *)(v1889 + 173));
        v988 = *((_DWORD *)__src + 488);
        update_mv_probs(v1889 + 1970, 3u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 1973, 1u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 1974, 0xAu, (uint64_t)&v1900);
        update_mv_probs(v1889 + 1984, 1u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 1985, 0xAu, (uint64_t)&v1900);
        update_mv_probs(v1889 + 2006, 1u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 2007, 0xAu, (uint64_t)&v1900);
        update_mv_probs(v1889 + 2017, 1u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 2018, 0xAu, (uint64_t)&v1900);
        update_mv_probs(v1889 + 1995, 3u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 1998, 3u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 2001, 3u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 2028, 3u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 2031, 3u, (uint64_t)&v1900);
        update_mv_probs(v1889 + 2034, 3u, (uint64_t)&v1900);
        if (v988)
        {
          update_mv_probs(v1889 + 2004, 1u, (uint64_t)&v1900);
          update_mv_probs(v1889 + 2005, 1u, (uint64_t)&v1900);
          update_mv_probs(v1889 + 2037, 1u, (uint64_t)&v1900);
          update_mv_probs(v1889 + 2038, 1u, (uint64_t)&v1900);
        }
        goto LABEL_1113;
      }
    }
    else
    {
      v1883 = (unint64_t *)*((_QWORD *)&v1901 + 1);
      v809 = 48 - HIDWORD(v1900);
      if (v808 >= 0x41)
        goto LABEL_1037;
    }
    v866 = 56 - v804 - v808;
    if (v866 < 0)
      v807 = v804;
    else
      v807 = v804 + 0x40000000;
    if (v808)
      v867 = 1;
    else
      v867 = v866 <= -1;
    v801 = v1859;
    if (v867)
    {
      v868 = v866 & ~(v866 >> 31);
      v800 = v1866;
      if (v809 < v868)
      {
        v811 = v1883;
      }
      else
      {
        v869 = v868 - 1;
        if (v868 - 1 >= (int)(40 - v804))
          v869 = 40 - v804;
        v870 = 47 - v804 - v869;
        v811 = v1883;
        v871 = v809;
        if (v870 < 0x78)
          goto LABEL_2468;
        v872 = (v870 >> 3) + 1;
        v873 = 0uLL;
        v874 = (int8x16_t)v806;
        v875 = (int32x4_t)v807;
        v876 = vdupq_n_s32(v809);
        v877 = vaddq_s32(v876, v1877);
        v811 = (unint64_t *)((char *)v1883 + (v872 & 0x3FFFFFF0));
        v878 = vaddq_s32(v876, v1871);
        v871 = v809 - 8 * (v872 & 0x3FFFFFF0);
        v879 = vaddq_s32(v876, (int32x4_t)xmmword_208F3A6A0);
        v880 = vaddq_s32(v876, (int32x4_t)xmmword_208F3A6B0);
        v881.i64[0] = 0x800000008;
        v881.i64[1] = 0x800000008;
        v882.i64[0] = 0x7F0000007FLL;
        v882.i64[1] = 0x7F0000007FLL;
        v883 = v872 & 0x3FFFFFF0;
        v884 = (uint8x16_t *)v1883;
        v885 = 0uLL;
        v886 = 0uLL;
        v887 = 0uLL;
        v888 = 0uLL;
        v889 = 0uLL;
        v890 = 0uLL;
        v891 = 0uLL;
        v892 = 0uLL;
        v893 = 0uLL;
        do
        {
          v894 = *v884++;
          v895 = vmovl_high_u8(v894);
          v896 = vmovl_high_u16(v895);
          v897.i64[0] = v896.u32[0];
          v897.i64[1] = v896.u32[1];
          v898 = v897;
          v899 = vmovl_u16(*(uint16x4_t *)v895.i8);
          v897.i64[0] = v899.u32[2];
          v897.i64[1] = v899.u32[3];
          v900 = v897;
          v901 = vmovl_u8(*(uint8x8_t *)v894.i8);
          v902 = vmovl_high_u16(v901);
          v897.i64[0] = v902.u32[2];
          v897.i64[1] = v902.u32[3];
          v903 = v897;
          v897.i64[0] = v896.u32[2];
          v897.i64[1] = v896.u32[3];
          v904 = v897;
          v897.i64[0] = v899.u32[0];
          v897.i64[1] = v899.u32[1];
          v905 = v897;
          v897.i64[0] = v902.u32[0];
          v897.i64[1] = v902.u32[1];
          v906 = v897;
          v907 = vmovl_u16(*(uint16x4_t *)v901.i8);
          v897.i64[0] = v907.u32[2];
          v897.i64[1] = v907.u32[3];
          v908 = v897;
          v897.i64[0] = v907.u32[0];
          v897.i64[1] = v907.u32[1];
          v909 = v897;
          v897.i64[0] = v880.u32[0];
          v897.i64[1] = v880.u32[1];
          v910 = (int8x16_t)vshlq_u64(v909, v897);
          v897.i64[0] = v880.u32[2];
          v897.i64[1] = v880.u32[3];
          v911 = (int8x16_t)vshlq_u64(v908, v897);
          v897.i64[0] = v879.u32[0];
          v897.i64[1] = v879.u32[1];
          v912 = (int8x16_t)vshlq_u64(v906, v897);
          v897.i64[0] = v878.u32[0];
          v897.i64[1] = v878.u32[1];
          v913 = (int8x16_t)vshlq_u64(v905, v897);
          v897.i64[0] = v877.u32[2];
          v897.i64[1] = v877.u32[3];
          v914 = (int8x16_t)vshlq_u64(v904, v897);
          v897.i64[0] = v879.u32[2];
          v897.i64[1] = v879.u32[3];
          v915 = (int8x16_t)vshlq_u64(v903, v897);
          v897.i64[0] = v878.u32[2];
          v897.i64[1] = v878.u32[3];
          v916 = (int8x16_t)vshlq_u64(v900, v897);
          v897.i64[0] = v877.u32[0];
          v897.i64[1] = v877.u32[1];
          v889 = vorrq_s8((int8x16_t)vshlq_u64(v898, v897), v889);
          v888 = vorrq_s8(v916, v888);
          v886 = vorrq_s8(v915, v886);
          v890 = vorrq_s8(v914, v890);
          v887 = vorrq_s8(v913, v887);
          v885 = vorrq_s8(v912, v885);
          v873 = vorrq_s8(v911, v873);
          v874 = vorrq_s8(v910, v874);
          v875 = vaddq_s32(v875, v881);
          v891 = vaddq_s32(v891, v881);
          v892 = vaddq_s32(v892, v881);
          v893 = vaddq_s32(v893, v881);
          v880 = vaddq_s32(v880, v882);
          v879 = vaddq_s32(v879, v882);
          v878 = vaddq_s32(v878, v882);
          v877 = vaddq_s32(v877, v882);
          v883 -= 16;
        }
        while (v883);
        v807 = vaddvq_s32(vaddq_s32(vaddq_s32(v875, v892), vaddq_s32(v891, v893)));
        v917 = vorrq_s8(vorrq_s8(vorrq_s8(v874, v887), vorrq_s8(v885, v889)), vorrq_s8(vorrq_s8(v873, v888), vorrq_s8(v886, v890)));
        v806 = (unint64_t)vorr_s8(*(int8x8_t *)v917.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v917, v917, 8uLL));
        if ((v872 & 0x3FFFFFF0) != v872)
        {
LABEL_2468:
          do
          {
            v807 += 8;
            v918 = *(unsigned __int8 *)v811;
            v811 = (unint64_t *)((char *)v811 + 1);
            v806 |= (unint64_t)v918 << v871;
            v871 -= 8;
          }
          while (v871 >= v868);
        }
      }
    }
    else
    {
      v811 = v1883;
      v800 = v1866;
    }
    goto LABEL_1100;
  }
LABEL_1113:
  v989 = HIDWORD(v1900) - 65;
  *(_DWORD *)(v1854 + 224 * v1855 + 236) = (HIDWORD(v1900) - 65) < 0x3FFFFFBF;
  if (v989 <= 0x3FFFFFBE)
    vpx_internal_error((uint64_t)v1876, 7, "Decode failed. Frame data header is corrupted.");
  v990 = *((_DWORD *)__src + 1346);
  v991 = v1892;
  if (v990 && !*((_DWORD *)v1892 + 3338))
  {
    vp9_loop_filter_frame_init((uint64_t)v1876, v990);
    v991 = v1892;
    v992 = *((_QWORD *)__src + 2378);
    v993 = v1853 << v801;
    if (!v992)
      goto LABEL_1122;
  }
  else
  {
    v992 = *((_QWORD *)__src + 2378);
    v993 = v1853 << v801;
    if (!v992)
      goto LABEL_1122;
  }
  if (v993 == *((_DWORD *)v991 + 3756))
  {
    v994 = *((unsigned int *)v991 + 3783);
    if ((int)v994 < 2)
      goto LABEL_1155;
LABEL_1133:
    if (v801)
      goto LABEL_1155;
    v999 = *((_DWORD *)v991 + 3787);
    if (v1853 <= 1)
    {
      if (v999 != 1)
        goto LABEL_1155;
    }
    else if (v999 != 1)
    {
      v1860 = v994;
      v1864 = (unsigned int *)((char *)v1863 + v800);
      v1884 = (uint64_t)(__src + 10288);
      v1000 = *((_DWORD *)__src + 400);
      v1001 = *((_QWORD *)__src + 2363);
      v1002 = 1 << *((_DWORD *)v991 + 3335);
      v1856 = 1 << *((_DWORD *)v991 + 3336);
      v1867 = v1002;
      if ((int)v994 >= v1002)
        v994 = v1002;
      else
        v994 = v994;
      init_mt((uint64_t)__src);
      v1003 = v1892;
      v1872 = v994;
      if ((int)v994 >= 1)
      {
        v1004 = 0;
        v1005 = 0;
        v1006 = 0;
        v1878 = v1001 + 224 * v1000 + 88;
        do
        {
          v1009 = (_QWORD *)(*((_QWORD *)__src + 2377) + v1005);
          v1010 = *((_QWORD *)__src + 2378);
          v1011 = v1004 + *((_DWORD *)v1003 + 3756);
          off_253EA52A0();
          if (*((_DWORD *)v1892 + 3788) && *((_DWORD *)__src + 1346) && !*((_DWORD *)v1892 + 3338))
          {
            v1012 = v1010 + 69568 * v1011;
            *(_QWORD *)(v1012 + 13312) = v1884;
            v1013 = *((_QWORD *)__src + 2576) + v1006;
            *(_QWORD *)(v1012 + 13304) = v1013;
            *(_QWORD *)v1013 = v1878;
            *(_QWORD *)(v1013 + 8) = v1876;
            *(_QWORD *)(v1013 + 424) = 0;
            *(_DWORD *)(v1013 + 432) = 0;
            memcpy((void *)(v1013 + 16), __src, 0x198uLL);
            *(_DWORD *)(*(_QWORD *)(v1012 + 13304) + 432) = 0;
          }
          v1007 = v1010 + 69568 * v1011;
          memcpy((void *)(v1007 + 13328), __src, 0x290uLL);
          v1003 = v1892;
          if (*((_DWORD *)v1892 + 3334))
            v1008 = 0;
          else
            v1008 = v1007 + 80;
          *(_QWORD *)(v1007 + 13744) = v1008;
          v1009[3] = tile_worker_hook;
          v1009[4] = v1007;
          v1009[5] = __src;
          v1006 += 440;
          v1005 += 56;
          ++v1004;
        }
        while (440 * v1872 != v1006);
      }
      get_tile_buffers((uint64_t)__src, v1864, v1850, v1867, v1856, (uint64_t)(__src + 9516));
      qsort(__src + 9516, v1867, 0x18uLL, (int (__cdecl *)(const void *, const void *))compare_tile_buffers);
      if (v1867 <= v1860)
      {
        v1900 = *(_OWORD *)(__src + 9516);
        *(_QWORD *)&v1901 = *((_QWORD *)__src + 2381);
        v1080 = 24 * v1867 - 24;
        v1081 = (char *)__src + v1080;
        memmove(__src + 9516, __src + 9528, v1080);
        *(_OWORD *)(v1081 + 19032) = v1900;
        *((_QWORD *)v1081 + 2381) = v1901;
        v1062 = v1872;
      }
      else
      {
        v1058 = 0;
        v1059 = (char *)(__src + 9516);
        v1060 = v1867 - 4;
        v1061 = (uint64_t)&__src[12 * v1867 + 9492];
        v1062 = v1872;
        do
        {
          v1900 = *(_OWORD *)v1059;
          v1063 = v1900;
          *(_QWORD *)&v1901 = *((_QWORD *)v1059 + 2);
          v1064 = v1901;
          v1065 = *(_QWORD *)(v1061 + 16);
          *(_OWORD *)v1059 = *(_OWORD *)v1061;
          *((_QWORD *)v1059 + 2) = v1065;
          *(_OWORD *)v1061 = v1063;
          *(_QWORD *)(v1061 + 16) = v1064;
          v1058 += 2;
          v1059 += 48;
          v1061 -= 48;
          v335 = v1058 < v1060;
          v1060 -= 2;
        }
        while (v335);
      }
      if ((int)v1062 >= 1 && !*((_DWORD *)v1892 + 3334))
      {
        v1082 = 0;
        do
        {
          bzero((void *)(*(_QWORD *)(*((_QWORD *)__src + 2377) + v1082 + 32) + 80), 0x33A8uLL);
          v1082 += 56;
        }
        while (56 * v1062 != v1082);
      }
      v1083 = 0;
      if ((int)v1062 >= 1)
      {
        v1084 = 0;
        v1085 = v1867 % (int)v1062;
        do
        {
          v1086 = *((_QWORD *)__src + 2377) + v1083;
          v1087 = *(_QWORD *)(v1086 + 32);
          *(_DWORD *)(v1087 + 8) = v1084;
          v1084 += v1867 / (int)v1062 + v1085 / (int)v1062;
          *(_DWORD *)(v1087 + 12) = v1084 - 1;
          *(_QWORD *)v1087 = v1850;
          *(_DWORD *)(v1086 + 48) = 0;
          v1088 = (void (**)(void))&off_253EA52B0;
          if (56 * (v1062 - 1) != v1083)
            v1088 = (void (**)(void))&off_253EA52A8;
          (*v1088)();
          v1083 += 56;
          ++v1085;
        }
        while (56 * v1062 != v1083);
        v1083 = 0;
        v1089 = v1062 + 1;
        v1090 = 56 * v1062 - 24;
        do
        {
          v1091 = *(uint64_t **)(*((_QWORD *)__src + 2377) + v1090);
          off_253EA52A0();
          *((_DWORD *)__src + 158) |= v1092 == 0;
          if (!v1083)
            v1083 = *v1091;
          --v1089;
          v1090 -= 56;
        }
        while (v1089 > 1);
        v1056 = v1892;
        if (*((_DWORD *)v1892 + 3334))
          goto LABEL_1241;
        v1093 = 0;
        do
        {
          vp9_accumulate_frame_counts((_DWORD *)__src + 1395, (const float *)(*(_QWORD *)(*((_QWORD *)__src + 2377) + v1093 + 32) + 80), 1);
          v1093 += 56;
        }
        while (56 * v1062 != v1093);
      }
      v1056 = v1892;
LABEL_1241:
      *v1847 = v1083;
      if (!*((_DWORD *)v1056 + 3788))
      {
        if (*((_DWORD *)__src + 158))
        {
          vpx_internal_error((uint64_t)v1876, 7, "Decode failed. Frame data is corrupted.");
          v1056 = v1892;
        }
        else if (!*((_DWORD *)v1056 + 3338))
        {
          vp9_loop_filter_frame_mt(v1851, v1876, __src, *((_DWORD *)__src + 1346), 0, 0, *((_QWORD **)__src + 2377), *((_DWORD *)v1056 + 3755), v1884);
          v1056 = v1892;
        }
      }
      goto LABEL_1267;
    }
    v1014 = *((_QWORD *)__src + 2588);
    v1873 = *((_DWORD *)v991 + 3335);
    v1857 = *((_DWORD *)v991 + 3336);
    v1879 = *((_QWORD *)__src + 2363) + 224 * *((int *)__src + 400) + 88;
    bzero(*(void **)(v1014 + 64), ((*((_DWORD *)__src + 494) + 7) >> 3) * ((*((_DWORD *)__src + 492) + 7) >> 3));
    init_mt((uint64_t)__src);
    v1015 = 0;
    v1016 = __src;
    v1017 = 0;
    v1018 = 0;
    v1890 = (uint64_t *)(v1014 + 72);
    v1861 = v994;
    do
    {
      v1019 = (_QWORD *)(*((_QWORD *)v1016 + 2377) + v1017);
      v1020 = *(_QWORD *)(*((_QWORD *)v1016 + 2588) + 336);
      off_253EA52A0();
      if (*((_DWORD *)v1016 + 1346) && !*((_DWORD *)v1892 + 3338))
      {
        v1021 = v1020 + v1015;
        *(_QWORD *)(v1021 + 16) = __src + 10288;
        v1022 = *((_QWORD *)__src + 2576) + v1018;
        *(_QWORD *)(v1021 + 8) = v1022;
        *(_QWORD *)v1022 = v1879;
        *(_QWORD *)(v1022 + 8) = v1876;
        *(_QWORD *)(v1022 + 424) = 0;
        *(_DWORD *)(v1022 + 432) = 0;
        memcpy((void *)(v1022 + 16), __src, 0x198uLL);
      }
      v1016 = __src;
      *(_QWORD *)(v1020 + v1015) = __src;
      v1019[3] = row_decode_worker_hook;
      v1019[4] = v1020 + v1015;
      v1019[5] = v1890;
      v1018 += 440;
      v1017 += 56;
      v1015 += 24;
      --v994;
    }
    while (v994);
    v1031 = 1 << v1873;
    if (v1873 != 31)
    {
      v1032 = 0;
      if (v1031 <= 1)
        v1033 = 1;
      else
        v1033 = 1 << v1873;
      v1034 = 69568 * v1033;
      do
      {
        v1035 = *((_QWORD *)__src + 2378) + v1032;
        memcpy((void *)(v1035 + 13328), __src, 0x290uLL);
        if (*((_DWORD *)v1892 + 3334))
          v1036 = 0;
        else
          v1036 = v1035 + 80;
        *(_QWORD *)(v1035 + 13744) = v1036;
        v1032 += 69568;
      }
      while (v1034 != v1032);
    }
    pthread_mutex_lock((pthread_mutex_t *)(v1014 + 128));
    v1037 = *(_QWORD *)(v1014 + 88);
    *(_QWORD *)(v1014 + 96) = v1037;
    *(_QWORD *)(v1014 + 104) = v1037;
    *(_DWORD *)(v1014 + 120) = 0;
    pthread_mutex_unlock((pthread_mutex_t *)(v1014 + 128));
    *(_DWORD *)(v1014 + 248) = 0;
    *(_QWORD *)(v1014 + 72) = 0;
    get_tile_buffers((uint64_t)__src, (unsigned int *)((char *)v1863 + v1866), v1850, v1031, 1 << v1857, (uint64_t)(__src + 9516));
    v799 = (uint64_t)__src;
    if (!*((_DWORD *)v1892 + 3334) && v1873 != 31)
    {
      v1038 = 0;
      if (v1031 <= 1)
        v1039 = 1;
      else
        v1039 = 1 << v1873;
      v1040 = 69568 * v1039;
      do
      {
        bzero((void *)(*((_QWORD *)__src + 2378) + v1038 + 80), 0x33A8uLL);
        v1038 += 69568;
      }
      while (v1040 != v1038);
    }
    if (v1873 != 31)
    {
      v1066 = 0;
      if (v1031 <= 1)
        v1067 = 1;
      else
        v1067 = 1 << v1873;
      do
      {
        pthread_mutex_lock((pthread_mutex_t *)(v1014 + 128));
        if (*(_QWORD *)(v1014 + 112) >= (unint64_t)(*(_QWORD *)(v1014 + 96) + 12))
        {
          v1068 = *(_DWORD **)(v1014 + 96);
          *v1068 = 0;
          v1068[1] = v1066;
          v1068[2] = 0;
          *(_QWORD *)(v1014 + 96) += 12;
          pthread_cond_signal((pthread_cond_t *)(v1014 + 192));
        }
        pthread_mutex_unlock((pthread_mutex_t *)(v1014 + 128));
        ++v1066;
      }
      while (v1067 != v1066);
    }
    v1041 = (v1861 - 1);
    v1042 = 48;
    v1043 = v1861;
    do
    {
      v1044 = (_DWORD *)(*((_QWORD *)__src + 2377) + v1042);
      *v1044 = 0;
      v1045 = v1044 - 12;
      v1046 = (pthread_mutex_t *(**)(_DWORD *))&off_253EA52B0;
      if (v1041)
        v1046 = &off_253EA52A8;
      (*v1046)(v1045);
      --v1041;
      v1042 += 56;
      --v1043;
    }
    while (v1043);
    v1047 = 0;
    v1048 = v1861 + 1;
    v1049 = 56 * v1861 - 56;
    do
    {
      off_253EA52A0();
      v1047 |= v1050 == 0;
      --v1048;
      v1049 -= 56;
    }
    while (v1048 > 1);
    *((_DWORD *)__src + 158) = v1047;
    v1051 = *((_QWORD *)__src + 2378) + 69568 * (v1031 - 1);
    v1054 = *(_QWORD *)(v1051 + 40);
    v1053 = (_QWORD *)(v1051 + 40);
    v1052 = v1054;
    v1055 = *((_DWORD *)v1053 - 3);
    if ((v1055 - 9) > 0x36)
    {
      v1056 = v1892;
    }
    else
    {
      v1056 = v1892;
      do
      {
        v1057 = v1055 - 17;
        v1055 -= 8;
        --v1052;
      }
      while (v1057 < 0x37);
      *((_DWORD *)v1053 - 3) = v1055;
      *v1053 = v1052;
    }
    *v1890 = v1052;
    if (*((_DWORD *)v1056 + 3334))
      v1069 = 1;
    else
      v1069 = v1873 == 31;
    if (!v1069)
    {
      v1070 = 0;
      if (v1031 <= 1)
        v1071 = 1;
      else
        v1071 = 1 << v1873;
      v1072 = 69568 * v1071;
      do
      {
        vp9_accumulate_frame_counts((_DWORD *)__src + 1395, (const float *)(*((_QWORD *)__src + 2378) + v1070 + 80), 1);
        v1070 += 69568;
      }
      while (v1072 != v1070);
      v1056 = v1892;
      v1052 = *v1890;
    }
    goto LABEL_1266;
  }
LABEL_1122:
  v995 = *((_DWORD *)v991 + 3783);
  if (v995 <= 1)
    v995 = 0;
  v996 = 69568 * (v995 + v993);
  if (v992)
    free(*(void **)(v992 - 8));
  if ((v996 | 0x27uLL) > 0x10000000000
    || (v997 = malloc_type_malloc(v996 | 0x27, 0x74AD08B5uLL), v991 = v1892, !v997))
  {
    *((_QWORD *)__src + 2378) = 0;
LABEL_1132:
    vpx_internal_error((uint64_t)v1876, 2, "Failed to allocate pbi->tile_worker_data");
    v991 = v1892;
    *((_DWORD *)v1892 + 3756) = v993;
    v994 = *((unsigned int *)v1892 + 3783);
    if ((int)v994 < 2)
      goto LABEL_1155;
    goto LABEL_1133;
  }
  v998 = ((unint64_t)v997 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v998 - 8) = v997;
  *((_QWORD *)__src + 2378) = v998;
  if (!v998)
    goto LABEL_1132;
  *((_DWORD *)v1892 + 3756) = v993;
  v994 = *((unsigned int *)v1892 + 3783);
  if ((int)v994 >= 2)
    goto LABEL_1133;
LABEL_1155:
  v1023 = (uint64_t)__src;
  v1024 = (unsigned int *)((char *)v1863 + v800);
  v1025 = (*((int *)__src + 494) + 7) & 0xFFFFFFFFFFFFFFF8;
  v1848 = *((_DWORD *)v991 + 3335);
  v1880 = 1 << v1848;
  v1026 = *((_DWORD *)v991 + 3336);
  v1027 = 1 << v1026;
  v1028 = v1850;
  if (*((_DWORD *)__src + 1346))
  {
    if (*((_DWORD *)v991 + 3338) || *((_QWORD *)__src + 2374))
    {
LABEL_1254:
      v1023 = (uint64_t)__src;
      if (*((_DWORD *)__src + 1346) && !*((_DWORD *)v991 + 3338))
      {
        v1096 = *((_QWORD *)__src + 2374);
        off_253EA52A0();
        *(_QWORD *)v1096 = *((_QWORD *)__src + 2363) + 224 * *((int *)__src + 400) + 88;
        *(_QWORD *)(v1096 + 8) = v1876;
        *(_QWORD *)(v1096 + 424) = 0;
        *(_DWORD *)(v1096 + 432) = 0;
        memcpy((void *)(v1096 + 16), __src, 0x198uLL);
      }
      goto LABEL_1257;
    }
    v1029 = malloc_type_malloc(0x1DFuLL, 0x74AD08B5uLL);
    if (v1029)
    {
      v1030 = ((unint64_t)v1029 + 39) & 0xFFFFFFFFFFFFFFE0;
      *(_QWORD *)(v1030 - 8) = v1029;
      *((_QWORD *)__src + 2374) = v1030;
      if (v1030)
      {
LABEL_1251:
        v991 = v1892;
        *((_QWORD *)__src + 2373) = vp9_loop_filter_worker;
        if (*((int *)v1892 + 3783) >= 2)
        {
          v1095 = off_253EA5298((unsigned int *)__src + 4740);
          v991 = v1892;
          if (!v1095)
          {
            vpx_internal_error((uint64_t)v1876, 1, "Loop filter thread creation failed");
            v991 = v1892;
          }
        }
        goto LABEL_1254;
      }
    }
    else
    {
      *((_QWORD *)__src + 2374) = 0;
    }
    vpx_internal_error((uint64_t)v1876, 2, "Failed to allocate pbi->lf_worker.data1");
    goto LABEL_1251;
  }
LABEL_1257:
  bzero(*(void **)(v1023 + 18920), 6 * v1025);
  bzero(*(void **)(v1023 + 18912), v1025);
  if (*(_DWORD *)(v1023 + 5384))
    bzero(*(void **)(v1023 + 5416), 160 * *(int *)(v1023 + 5424) * (uint64_t)((*(_DWORD *)(v1023 + 1968) + 7) >> 3));
  get_tile_buffers(v1023, v1024, v1850, v1880, 1 << v1026, (uint64_t)&v1900);
  v1846 = v1026;
  v799 = v1023;
  v1056 = v1892;
  if (v1026 == 31)
    goto LABEL_1260;
  if (v1848 == 31)
  {
    v1101 = 0;
    v1102 = v1023 + 18960;
    if (v1027 <= 1)
      v1103 = 1;
    else
      v1103 = v1027;
    do
    {
      v1104 = *(_DWORD *)(v799 + 1968);
      v1105 = *((_DWORD *)v1056 + 3336);
      v1106 = (v1104 + 7) >> 3;
      if (8 * ((v1106 * v1101) >> v1105) >= v1104)
        v1107 = *(_DWORD *)(v799 + 1968);
      else
        v1107 = 8 * ((v1106 * v1101) >> v1105);
      ++v1101;
      v1108 = 8 * ((v1106 * v1101) >> v1105);
      if (v1108 >= v1104)
        v1109 = *(_DWORD *)(v799 + 1968);
      else
        v1109 = v1108;
      if (v1107 < v1109 && *(_DWORD *)(v799 + 5384))
      {
LABEL_1289:
        if (!*((_DWORD *)v1056 + 3338) && v1107 >= 8 && v1107 + 8 < *(_DWORD *)(v799 + 1968))
        {
          v1110 = *((_QWORD *)__src + 2374);
          off_253EA52A0();
          *(_DWORD *)(v1110 + 424) = v1107 - 8;
          *(_DWORD *)(v1110 + 428) = v1107;
          v799 = (uint64_t)__src;
          if (*((int *)v1892 + 3783) <= 1)
            v1111 = (void (**)(uint64_t))&off_253EA52B0;
          else
            v1111 = (void (**)(uint64_t))&off_253EA52A8;
          (*v1111)(v1102);
          v1056 = v1892;
        }
        while (1)
        {
          v1107 += 8;
          if (v1107 >= v1109)
            break;
          if (*(_DWORD *)(v799 + 5384))
            goto LABEL_1289;
        }
      }
    }
    while (v1101 != v1103);
    goto LABEL_1260;
  }
  v1112 = 0;
  v1865 = v1023 + 5580;
  v1858 = (_OWORD *)(v1023 + 2004);
  v1862 = (__int128 *)(v1023 + 2036);
  if (v1880 <= 1)
    v1113 = 1;
  else
    v1113 = v1880;
  v1891 = v1113;
  if (v1027 <= 1)
    v1114 = 1;
  else
    v1114 = v1027;
  v1849 = v1114;
  while (2)
  {
    v1115 = 0;
    v1874 = (_DWORD)v1112 << v1848;
    v1116.i32[0] = v1112;
    v1116.i32[1] = v1112 + 1;
    v1868 = v1116;
    v1852 = v1112;
    do
    {
      v1118 = (char *)&v1900 + 1536 * v1112 + 24 * v1115;
      v1885 = *((_QWORD *)__src + 2378) + 69568 * v1874;
      v1119 = (int32x2_t *)(v1885 + 69568 * v1115);
      v1120 = v1119 + 1666;
      memcpy(&v1119[1666], __src, 0x290uLL);
      v1119[1745].i32[0] = 0;
      v1121 = (int32x2_t)v1865;
      if (*((_DWORD *)v1892 + 3334))
        v1121 = 0;
      v1119[1718] = v1121;
      v1122 = v1119 + 1748;
      bzero(&v1119[1748], 0x1000uLL);
      v1123 = (const float *)(v1892 + 6672);
      v1124 = (int32x2_t)vld1_dup_f32(v1123);
      v1119[1719] = vmin_s32(vshl_n_s32(vshl_s32(vmul_s32(vdup_n_s32((*((_DWORD *)__src + 492) + 7) >> 3), v1868), vneg_s32(v1124)), 3uLL), vdup_n_s32(*((_DWORD *)__src + 492)));
      v1125 = *((_DWORD *)__src + 494);
      v1124.i32[0] = v1115;
      v1124.i32[1] = v1115 + 1;
      v1126 = vmul_s32(vdup_n_s32((int)(v1125 + 7) >> 3), v1124);
      v1127 = (const float *)(v1892 + 6670);
      v1128 = (int32x2_t)vld1_dup_f32(v1127);
      v1119[1720] = vmin_s32(vshl_n_s32(vshl_s32(v1126, vneg_s32(v1128)), 3uLL), vdup_n_s32(v1125));
      v1130 = *(unint64_t **)v1118;
      v1129 = *((_QWORD *)v1118 + 1);
      v1131 = (void (*)(uint64_t, unint64_t *, uint64_t, uint64_t))*((_QWORD *)__src + 2583);
      v1132 = *((_QWORD *)__src + 2584);
      if (v1129 - 1 >= v1028 - (uint64_t)v1130)
        vpx_internal_error((uint64_t)v1876, 7, "Truncated packet or corrupt tile length");
      if (v1130)
        v1133 = 1;
      else
        v1133 = v1129 == 0;
      v1134.i64[0] = 0x3F0000003FLL;
      v1134.i64[1] = 0x3F0000003FLL;
      v1135.i64[0] = 0x7F0000007FLL;
      v1135.i64[1] = 0x7F0000007FLL;
      if (!v1133)
      {
LABEL_1352:
        vpx_internal_error((uint64_t)v1876, 2, "Failed to allocate BOOL decoder %d", 1);
        goto LABEL_1353;
      }
      v1136 = v1885 + 69568 * v1115;
      *(_QWORD *)(v1136 + 24) = 0xFFFFFFF8000000FFLL;
      v1137 = v1136 + 24;
      *(_QWORD *)(v1137 + 8) = (char *)v1130 + v1129;
      *(_QWORD *)(v1137 + 16) = v1130;
      v1138 = (_QWORD *)(v1137 + 16);
      v1119[2] = 0;
      v1139 = v1119 + 2;
      *(_QWORD *)(v1137 + 24) = v1131;
      *(_QWORD *)(v1137 + 32) = v1132;
      if (v1131)
      {
        if (v1129 >= 9)
          v1140 = 9;
        else
          v1140 = v1129;
        v1131(v1132, v1130, v1885 + 69568 * v1115 + 64, v1140);
        v1138 = (_QWORD *)(v1137 + 16);
        v1135.i64[0] = 0x7F0000007FLL;
        v1135.i64[1] = 0x7F0000007FLL;
        v1134.i64[0] = 0x3F0000003FLL;
        v1134.i64[1] = 0x3F0000003FLL;
        v1130 = (unint64_t *)(v1885 + 69568 * v1115 + 64);
        v1028 = v1850;
      }
      v1141 = 8 * v1129;
      if (8 * v1129 >= 0x41)
      {
        v1142 = v1130 + 1;
        v1143 = bswap64(*v1130) | *(_QWORD *)v1139;
        v1144 = 56;
        goto LABEL_1346;
      }
      if (!v1141)
      {
        v1143 = 0;
        v1144 = 1073741816;
        v1142 = v1130;
        goto LABEL_1346;
      }
      if (64 - v1141 >= 49)
        v1145 = 49;
      else
        v1145 = 64 - v1141;
      v1146 = 56;
      v1147 = 56 - v1145;
      if ((56 - v1145) >= 0x38)
      {
        v1149 = (v1147 >> 3) + 1;
        if (v1147 < 0x78)
        {
          v1143 = 0;
          v1150 = 0;
          v1151 = 56;
LABEL_1335:
          v1148 = (unint64_t *)((char *)v1130 + (v1149 & 0x3FFFFFF8));
          v1146 = 56 - 8 * (v1149 & 0x3FFFFFF8);
          v1152 = 0uLL;
          v1153 = (int8x16_t)v1143;
          v1154 = vdupq_n_s32(v1151);
          v1155 = vaddq_s32(v1154, (int32x4_t)xmmword_208F3A6A0);
          v1156 = vaddq_s32(v1154, (int32x4_t)xmmword_208F3A6B0);
          v1157 = (uint8x8_t *)((char *)v1130 + v1150);
          v1158 = v1150 - (v1149 & 0x3FFFFFF8);
          v1159 = 0uLL;
          v1160 = 0uLL;
          do
          {
            v1161 = *v1157++;
            v1162 = vmovl_u8(v1161);
            v1163 = vmovl_high_u16(v1162);
            v1164.i64[0] = v1163.u32[2];
            v1164.i64[1] = v1163.u32[3];
            v1165 = v1164;
            v1164.i64[0] = v1163.u32[0];
            v1164.i64[1] = v1163.u32[1];
            v1166 = v1164;
            v1167 = vmovl_u16(*(uint16x4_t *)v1162.i8);
            v1164.i64[0] = v1167.u32[2];
            v1164.i64[1] = v1167.u32[3];
            v1168 = v1164;
            v1164.i64[0] = v1167.u32[0];
            v1164.i64[1] = v1167.u32[1];
            v1169 = v1164;
            v1164.i64[0] = v1155.u32[2];
            v1164.i64[1] = v1155.u32[3];
            v1170 = v1164;
            v1164.i64[0] = v1155.u32[0];
            v1164.i64[1] = v1155.u32[1];
            v1171 = v1164;
            v1164.i64[0] = v1156.u32[2];
            v1164.i64[1] = v1156.u32[3];
            v1172 = v1164;
            v1164.i64[0] = v1156.u32[0];
            v1164.i64[1] = v1156.u32[1];
            v1160 = vorrq_s8((int8x16_t)vshlq_u64(v1165, v1170), v1160);
            v1159 = vorrq_s8((int8x16_t)vshlq_u64(v1166, v1171), v1159);
            v1152 = vorrq_s8((int8x16_t)vshlq_u64(v1168, v1172), v1152);
            v1153 = vorrq_s8((int8x16_t)vshlq_u64(v1169, v1164), v1153);
            v1156 = vaddq_s32(v1156, v1134);
            v1155 = vaddq_s32(v1155, v1134);
            v1158 += 8;
          }
          while (v1158);
          v1173 = vorrq_s8(vorrq_s8(v1153, v1159), vorrq_s8(v1152, v1160));
          v1143 = (unint64_t)vorr_s8(*(int8x8_t *)v1173.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1173, v1173, 8uLL));
          if ((v1149 & 0x3FFFFFF8) == v1149)
            goto LABEL_1345;
          goto LABEL_1344;
        }
        v1150 = v1149 & 0x3FFFFFF0;
        v1151 = 56 - 8 * (v1149 & 0x3FFFFFF0);
        v1174 = 0uLL;
        v1175 = 0uLL;
        v1176 = v1150;
        v1177 = (uint8x16_t *)v1130;
        v1178 = 0uLL;
        v1179 = 0uLL;
        v1180 = 0uLL;
        v1181 = 0uLL;
        v1182 = (int32x4_t)xmmword_208F3A690;
        v1183 = (int32x4_t)xmmword_208F3A680;
        v1184 = 0uLL;
        v1185 = (int32x4_t)xmmword_208F3A670;
        v1186 = (int32x4_t)xmmword_208F3A660;
        v1187 = 0uLL;
        do
        {
          v1188 = *v1177++;
          v1189 = vmovl_high_u8(v1188);
          v1190 = vmovl_high_u16(v1189);
          v1191.i64[0] = v1190.u32[0];
          v1191.i64[1] = v1190.u32[1];
          v1192 = v1191;
          v1193 = vmovl_u16(*(uint16x4_t *)v1189.i8);
          v1191.i64[0] = v1193.u32[2];
          v1191.i64[1] = v1193.u32[3];
          v1194 = v1191;
          v1195 = vmovl_u8(*(uint8x8_t *)v1188.i8);
          v1196 = vmovl_high_u16(v1195);
          v1191.i64[0] = v1196.u32[2];
          v1191.i64[1] = v1196.u32[3];
          v1197 = v1191;
          v1191.i64[0] = v1190.u32[2];
          v1191.i64[1] = v1190.u32[3];
          v1198 = v1191;
          v1191.i64[0] = v1193.u32[0];
          v1191.i64[1] = v1193.u32[1];
          v1199 = v1191;
          v1191.i64[0] = v1196.u32[0];
          v1191.i64[1] = v1196.u32[1];
          v1200 = v1191;
          v1201 = vmovl_u16(*(uint16x4_t *)v1195.i8);
          v1191.i64[0] = v1201.u32[2];
          v1191.i64[1] = v1201.u32[3];
          v1202 = v1191;
          v1191.i64[0] = v1201.u32[0];
          v1191.i64[1] = v1201.u32[1];
          v1203 = v1191;
          v1191.i64[0] = v1186.u32[0];
          v1191.i64[1] = v1186.u32[1];
          v1204 = v1191;
          v1191.i64[0] = v1185.u32[2];
          v1191.i64[1] = v1185.u32[3];
          v1205 = v1191;
          v1191.i64[0] = v1183.u32[2];
          v1191.i64[1] = v1183.u32[3];
          v1206 = v1191;
          v1191.i64[0] = v1186.u32[2];
          v1191.i64[1] = v1186.u32[3];
          v1207 = v1191;
          v1191.i64[0] = v1185.u32[0];
          v1191.i64[1] = v1185.u32[1];
          v1208 = v1191;
          v1191.i64[0] = v1183.u32[0];
          v1191.i64[1] = v1183.u32[1];
          v1209 = v1191;
          v1191.i64[0] = v1182.u32[2];
          v1191.i64[1] = v1182.u32[3];
          v1210 = v1191;
          v1191.i64[0] = v1182.u32[0];
          v1191.i64[1] = v1182.u32[1];
          v1184 = vorrq_s8((int8x16_t)vshlq_u64(v1192, v1204), v1184);
          v1181 = vorrq_s8((int8x16_t)vshlq_u64(v1194, v1205), v1181);
          v1179 = vorrq_s8((int8x16_t)vshlq_u64(v1197, v1206), v1179);
          v1187 = vorrq_s8((int8x16_t)vshlq_u64(v1198, v1207), v1187);
          v1180 = vorrq_s8((int8x16_t)vshlq_u64(v1199, v1208), v1180);
          v1178 = vorrq_s8((int8x16_t)vshlq_u64(v1200, v1209), v1178);
          v1175 = vorrq_s8((int8x16_t)vshlq_u64(v1202, v1210), v1175);
          v1174 = vorrq_s8((int8x16_t)vshlq_u64(v1203, v1191), v1174);
          v1182 = vaddq_s32(v1182, v1135);
          v1183 = vaddq_s32(v1183, v1135);
          v1185 = vaddq_s32(v1185, v1135);
          v1186 = vaddq_s32(v1186, v1135);
          v1176 -= 16;
        }
        while (v1176);
        v1211 = vorrq_s8(vorrq_s8(vorrq_s8(v1174, v1180), vorrq_s8(v1178, v1184)), vorrq_s8(vorrq_s8(v1175, v1181), vorrq_s8(v1179, v1187)));
        v1143 = (unint64_t)vorr_s8(*(int8x8_t *)v1211.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1211, v1211, 8uLL));
        if (v1150 == v1149)
          goto LABEL_1345;
        if ((v1149 & 8) != 0)
          goto LABEL_1335;
        v1146 = (-8 * v1150) | 0x38;
        v1148 = (unint64_t *)((char *)v1130 + v1150);
      }
      else
      {
        v1143 = 0;
        v1148 = v1130;
      }
      do
      {
LABEL_1344:
        v1212 = *(unsigned __int8 *)v1148;
        v1148 = (unint64_t *)((char *)v1148 + 1);
        v1143 |= (unint64_t)v1212 << v1146;
        v1146 -= 8;
      }
      while (v1146 >= 64 - v1141);
LABEL_1345:
      v1213 = ((v1141 - 8) >> 3) + 1;
      v1144 = v1141 + 1073741816;
      v1142 = (unint64_t *)((char *)v1130 + v1213);
LABEL_1346:
      v1214 = (char *)v1142 - (char *)v1130;
      v1215 = ((*(_DWORD *)v1137 << 7) + 128) >> 8;
      v1216 = v1215 << 56;
      v1217 = *(_DWORD *)v1137 - v1215;
      if (v1143 >= v1215 << 56)
        v1218 = v1215 << 56;
      else
        v1218 = 0;
      if (v1143 < v1215 << 56)
        v1217 = ((*(_DWORD *)v1137 << 7) + 128) >> 8;
      v1219 = vpx_norm[v1217];
      *v1138 += v1214;
      *v1139 = (int32x2_t)((v1143 - v1218) << v1219);
      *(_DWORD *)(v1137 + 4) = v1144 - v1219;
      *(_DWORD *)v1137 = v1217 << v1219;
      v1112 = v1852;
      if (v1143 >= v1216)
        goto LABEL_1352;
LABEL_1353:
      v1220 = v1885 + 69568 * v1115;
      *v1120 = (int32x2_t)v1122;
      *(_QWORD *)(v1220 + 13864) = *((_QWORD *)__src + 2365);
      v1221 = v1858[1];
      *(_OWORD *)v1120[10].i8 = *v1858;
      *(_OWORD *)v1120[12].i8 = v1221;
      v1222 = *((int *)__src + 494);
      v1223 = *((_QWORD *)__src + 2365);
      *(_QWORD *)(v1220 + 13832) = *((_QWORD *)__src + 695);
      v1120[17] = (int32x2_t)v1122;
      *(_QWORD *)(v1220 + 13872) = v1223 + 2 * ((v1222 + 7) & 0x7FFFFFFFFFFFFFF8);
      v1224 = *v1862;
      *(_OWORD *)v1120[29].i8 = v1862[1];
      *(_OWORD *)v1120[27].i8 = v1224;
      v1225 = *((int *)__src + 494);
      v1226 = *((_QWORD *)__src + 2365);
      *(_QWORD *)(v1220 + 13832) = *((_QWORD *)__src + 695);
      v1120[34] = (int32x2_t)v1122;
      *(_QWORD *)(v1220 + 13880) = v1226 + 4 * ((v1225 + 7) & 0x3FFFFFFFFFFFFFF8);
      v1227 = v1862[1];
      *(_OWORD *)v1120[44].i8 = *v1862;
      *(_OWORD *)v1120[46].i8 = v1227;
      v1228 = *((_QWORD *)__src + 695);
      LODWORD(v1226) = *((_DWORD *)__src + 483);
      v1229 = *((_DWORD *)__src + 495);
      v1230 = *((_QWORD *)__src + 2364);
      *(_QWORD *)(v1220 + 13832) = v1228;
      *(_QWORD *)(v1220 + 13936) = v1230;
      *(_DWORD *)(v1220 + 13768) = v1229;
      *(_QWORD *)(v1220 + 13968) = v1876;
      if ((_DWORD)v1226)
      {
        v1117 = (void *)(v1228 + 126);
        if (*((_BYTE *)__src + 1948))
          v1117 = &vp9_kf_partition_probs;
      }
      else
      {
        v1117 = &vp9_kf_partition_probs;
      }
      *(_QWORD *)(v1885 + 69568 * v1115++ + 13808) = v1117;
    }
    while (v1115 != v1891);
    if (++v1112 != v1849)
      continue;
    break;
  }
  v1231 = 0;
  v1056 = v1892;
  v799 = (uint64_t)__src;
  do
  {
    v1232 = *(_DWORD *)(v799 + 1968);
    v1233 = *((_DWORD *)v1056 + 3336);
    v1234 = (v1232 + 7) >> 3;
    v1235 = 8 * ((v1234 * v1231) >> v1233);
    if (v1235 >= v1232)
      v1236 = v1232;
    else
      v1236 = v1235;
    v1869 = v1231 + 1;
    v1237 = 8 * ((v1234 * (v1231 + 1)) >> v1233);
    if (v1237 < v1232)
      v1232 = v1237;
    v1875 = v1232;
    if ((int)v1236 < v1232)
    {
      v1886 = v1231 << v1848;
      do
      {
        v1238 = 0;
        do
        {
          if (*((_DWORD *)v1056 + 3784))
            v1239 = v1880 + ~v1238;
          else
            v1239 = v1238;
          v1240 = *(_QWORD *)(v799 + 19024) + 69568 * v1886;
          v1241 = v1239;
          v1242 = v1240 + 69568 * v1239;
          v1243 = *(_DWORD *)(v799 + 1976);
          v1244 = *((_DWORD *)v1056 + 3335);
          v1245 = (v1243 + 7) >> 3;
          v1246 = v1245 * v1239;
          v1247 = 8 * (v1246 >> v1244);
          if (v1247 >= v1243)
            v1248 = v1243;
          else
            v1248 = v1247;
          v1249 = 8 * ((v1245 + v1246) >> v1244);
          *(_OWORD *)(v1242 + 13920) = 0u;
          *(_OWORD *)(v1242 + 13904) = 0u;
          if (v1249 >= v1243)
            v1250 = v1243;
          else
            v1250 = v1249;
          *(_OWORD *)(v1242 + 13888) = 0uLL;
          *(_QWORD *)(v1242 + 13944) = 0;
          if ((int)v1248 < v1250)
          {
            v1251 = (_QWORD *)(v1242 + 13328);
            v1252 = (_QWORD *)(v1240 + 69568 * v1241 + 13976);
            do
            {
              while (*((_DWORD *)v1056 + 3787) == 1)
              {
                v1253 = (_QWORD *)*((_QWORD *)__src + 2588);
                *(_QWORD *)(v1242 + 13456) = v1253[1];
                *v1251 = v1253[5];
                *(_QWORD *)(v1242 + 13592) = v1253[2];
                *(_QWORD *)(v1242 + 13464) = v1253[6];
                *(_QWORD *)(v1242 + 13728) = v1253[3];
                *(_QWORD *)(v1242 + 13600) = v1253[7];
                *v1252 = v1253[4];
                process_partition((char *)v1242, (uint64_t)__src, v1236, v1248, 0xCu, 4, 1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))parse_block);
                *(_QWORD *)(v1242 + 13456) = v1253[1];
                *v1251 = v1253[5];
                *(_QWORD *)(v1242 + 13592) = v1253[2];
                *(_QWORD *)(v1242 + 13464) = v1253[6];
                *(_QWORD *)(v1242 + 13728) = v1253[3];
                *(_QWORD *)(v1242 + 13600) = v1253[7];
                v1254 = v1253[4];
                v799 = (uint64_t)__src;
                *v1252 = v1254;
                process_partition((char *)v1242, (uint64_t)__src, v1236, v1248, 0xCu, 4, 2, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))recon_block);
                v1248 = (v1248 + 8);
                v1056 = v1892;
                if ((int)v1248 >= v1250)
                  goto LABEL_1381;
              }
              decode_partition(v1242, v799, v1236, v1248, 0xCu, 4);
              v1248 = (v1248 + 8);
              v1056 = v1892;
            }
            while ((int)v1248 < v1250);
          }
LABEL_1381:
          v1255 = *(_DWORD *)(v799 + 632) | *(_DWORD *)(v1240 + 69568 * v1241 + 13960);
          *(_DWORD *)(v799 + 632) = v1255;
          if (v1255)
          {
            vpx_internal_error((uint64_t)v1876, 7, "Failed to decode tile data");
            v1056 = v1892;
          }
          ++v1238;
        }
        while (v1238 != (_DWORD)v1891);
        if (*(_DWORD *)(v799 + 5384)
          && !*((_DWORD *)v1056 + 3338)
          && (int)v1236 >= 8
          && (int)v1236 + 8 < *(_DWORD *)(v799 + 1968))
        {
          v1256 = *(_QWORD *)(v799 + 18992);
          off_253EA52A0();
          *(_DWORD *)(v1256 + 424) = v1236 - 8;
          *(_DWORD *)(v1256 + 428) = v1236;
          if (*((int *)v1892 + 3783) <= 1)
            v1257 = (void (**)(uint64_t))&off_253EA52B0;
          else
            v1257 = (void (**)(uint64_t))&off_253EA52A8;
          (*v1257)((uint64_t)(__src + 9480));
          v1056 = v1892;
        }
        v1236 = (v1236 + 8);
      }
      while ((int)v1236 < v1875);
    }
    v1231 = v1869;
  }
  while (v1869 != (_DWORD)v1849);
LABEL_1260:
  if (*(_DWORD *)(v799 + 5384) && !*((_DWORD *)v1056 + 3338))
  {
    v1097 = *(_QWORD *)(v799 + 18992);
    off_253EA52A0();
    *(_DWORD *)(v1097 + 424) = *(_DWORD *)(v1097 + 428);
    *(_DWORD *)(v1097 + 428) = *(_DWORD *)(v799 + 1968);
    off_253EA52B0((_QWORD *)(v799 + 18960));
    v1056 = v1892;
  }
  v1098 = (uint64_t *)(*(_QWORD *)(v799 + 19024) + 69568 * (v1880 << v1846) - 69528);
  v1052 = *v1098;
  v1099 = *(_DWORD *)(*(_QWORD *)(v799 + 19024) + 69568 * (v1880 << v1846) - 69540);
  if ((v1099 - 9) <= 0x36)
  {
    do
    {
      v1100 = v1099 - 17;
      v1099 -= 8;
      --v1052;
    }
    while (v1100 < 0x37);
    *(_DWORD *)(*(_QWORD *)(v799 + 19024) + 69568 * (v1880 << v1846) - 69540) = v1099;
    *v1098 = v1052;
  }
LABEL_1266:
  *v1847 = v1052;
LABEL_1267:
  if (*(_DWORD *)(v799 + 632))
  {
    vpx_internal_error((uint64_t)v1876, 7, "Decode failed. Frame data is corrupted.");
  }
  else if (!*((_DWORD *)v1056 + 3333) && !*((_DWORD *)v1056 + 3334))
  {
    vp9_adapt_coef_probs((uint64_t)v1876);
    if (*(_DWORD *)(v799 + 1932))
    {
      if (!*(_BYTE *)(v799 + 1948))
      {
        vp9_adapt_mode_probs((uint64_t)v1876);
        vp9_adapt_mv_probs((uint64_t)v1876, *(_DWORD *)(v799 + 1952));
      }
    }
  }
  if (*(_DWORD *)(v799 + 5360))
    memcpy((void *)(*(_QWORD *)(v799 + 5568) + 2044 * *(unsigned int *)(v799 + 5576)), *(const void **)(v799 + 5560), 0x7FCuLL);
}

uint64_t read_bitdepth_colorspace_sampling(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  unint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t);
  int v15;
  uint64_t (*v16)(uint64_t);
  int v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t (*v20)(uint64_t);
  unint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t (*v26)(uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;
  uint64_t (*v34)(uint64_t);
  uint64_t (*v35)(uint64_t);

  v3 = result;
  v4 = (_DWORD *)(result + 18156);
  if (*(_DWORD *)(result + 18156) < 2u)
  {
    v8 = 0;
    v9 = 8;
  }
  else
  {
    v5 = a2[2];
    v6 = (unsigned __int8 *)(*a2 + (v5 >> 3));
    if ((unint64_t)v6 >= a2[1])
    {
      v10 = (uint64_t (*)(uint64_t))a2[4];
      if (v10)
        result = v10(a2[3]);
    }
    else
    {
      v7 = *v6;
      a2[2] = v5 + 1;
      if (((v7 >> (~(_BYTE)v5 & 7)) & 1) != 0)
      {
        v8 = 1;
        v9 = 12;
        goto LABEL_9;
      }
    }
    v8 = 1;
    v9 = 10;
  }
LABEL_9:
  v4[1] = v9;
  *(_DWORD *)(v3 + 324) = v8;
  v12 = a2[1];
  v11 = a2[2];
  v13 = *a2;
  v14 = (uint64_t (*)(uint64_t))(*a2 + (v11 >> 3));
  if ((unint64_t)v14 >= v12)
  {
    v14 = (uint64_t (*)(uint64_t))a2[4];
    if (v14)
    {
      result = v14(a2[3]);
      LODWORD(v14) = 0;
      v12 = a2[1];
      v11 = a2[2];
      v13 = *a2;
    }
  }
  else
  {
    LODWORD(v14) = (*(unsigned __int8 *)v14 >> (~(_BYTE)v11++ & 7)) & 1;
    a2[2] = v11;
  }
  v15 = 4 * (_DWORD)v14;
  v16 = (uint64_t (*)(uint64_t))(v13 + (v11 >> 3));
  if ((unint64_t)v16 >= v12)
  {
    v16 = (uint64_t (*)(uint64_t))a2[4];
    if (v16)
    {
      result = v16(a2[3]);
      LODWORD(v16) = 0;
      v12 = a2[1];
      v11 = a2[2];
      v13 = *a2;
    }
  }
  else
  {
    LODWORD(v16) = (*(unsigned __int8 *)v16 >> (~(_BYTE)v11++ & 7)) & 1;
    a2[2] = v11;
  }
  v17 = v15 | (2 * (_DWORD)v16);
  v18 = (unsigned __int8 *)(v13 + (v11 >> 3));
  if ((unint64_t)v18 >= v12)
  {
    v20 = (uint64_t (*)(uint64_t))a2[4];
    if (v20)
    {
      result = v20(a2[3]);
      *(_DWORD *)(v3 + 284) = v17;
      if (v17 != 7)
        goto LABEL_26;
    }
    else
    {
      *(_DWORD *)(v3 + 284) = v17;
      if (v17 != 7)
        goto LABEL_26;
    }
LABEL_22:
    *(_DWORD *)(v3 + 288) = 1;
    if ((*v4 | 2) != 3)
      return vpx_internal_error(v3, 5, "4:4:4 color not supported in profile 0 or 2");
    *(_QWORD *)(v3 + 316) = 0;
    v21 = a2[2];
    v22 = (unsigned __int8 *)(*a2 + (v21 >> 3));
    if ((unint64_t)v22 < a2[1])
      goto LABEL_42;
    goto LABEL_47;
  }
  v19 = (*v18 >> (~(_BYTE)v11 & 7)) & 1;
  a2[2] = v11 + 1;
  *(_DWORD *)(v3 + 284) = v19 | v17;
  if ((v19 | v17) == 7)
    goto LABEL_22;
LABEL_26:
  v23 = a2[2];
  v24 = (unsigned __int8 *)(*a2 + (v23 >> 3));
  if ((unint64_t)v24 >= a2[1])
  {
    v26 = (uint64_t (*)(uint64_t))a2[4];
    if (v26)
      result = v26(a2[3]);
    *(_DWORD *)(v3 + 288) = 0;
    if ((*v4 | 2) != 3)
      goto LABEL_28;
  }
  else
  {
    v25 = (*v24 >> (~(_BYTE)v23 & 7)) & 1;
    a2[2] = v23 + 1;
    *(_DWORD *)(v3 + 288) = v25;
    if ((*v4 | 2) != 3)
    {
LABEL_28:
      *(_QWORD *)(v3 + 316) = 0x100000001;
      return result;
    }
  }
  v28 = a2[1];
  v27 = a2[2];
  v29 = *a2;
  v30 = (uint64_t (*)(uint64_t))(*a2 + (v27 >> 3));
  if ((unint64_t)v30 >= v28)
  {
    v30 = (uint64_t (*)(uint64_t))a2[4];
    if (v30)
    {
      result = v30(a2[3]);
      LODWORD(v30) = 0;
      v28 = a2[1];
      v27 = a2[2];
      v29 = *a2;
    }
  }
  else
  {
    LODWORD(v30) = (*(unsigned __int8 *)v30 >> (~(_BYTE)v27++ & 7)) & 1;
    a2[2] = v27;
  }
  *(_DWORD *)(v3 + 316) = (_DWORD)v30;
  v31 = (unsigned __int8 *)(v29 + (v27 >> 3));
  if ((unint64_t)v31 >= v28)
  {
    v34 = (uint64_t (*)(uint64_t))a2[4];
    if (v34)
      result = v34(a2[3]);
    *(_DWORD *)(v3 + 320) = 0;
    v21 = a2[2];
    v22 = (unsigned __int8 *)(*a2 + (v21 >> 3));
    if ((unint64_t)v22 < a2[1])
      goto LABEL_42;
  }
  else
  {
    v32 = (*v31 >> (~(_BYTE)v27 & 7)) & 1;
    a2[2] = v27 + 1;
    *(_DWORD *)(v3 + 320) = v32;
    if ((_DWORD)v30 && v32)
      result = vpx_internal_error(v3, 5, "4:2:0 color not supported in profile 1 or 3");
    v21 = a2[2];
    v22 = (unsigned __int8 *)(*a2 + (v21 >> 3));
    if ((unint64_t)v22 < a2[1])
    {
LABEL_42:
      v33 = *v22;
      a2[2] = v21 + 1;
      if (((v33 >> (~(_BYTE)v21 & 7)) & 1) != 0)
        return vpx_internal_error(v3, 5, "Reserved bit set");
      return result;
    }
  }
LABEL_47:
  v35 = (uint64_t (*)(uint64_t))a2[4];
  if (v35)
    return v35(a2[3]);
  return result;
}

double setup_frame_size(jmp_buf a1, _QWORD *a2)
{
  int v4;
  int *__attribute__((__org_typedef(jmp_buf))) v5;
  int *__attribute__((__org_typedef(jmp_buf))) v6;
  uint64_t v7;
  unsigned int i;
  int v9;
  unint64_t v10;
  unsigned __int8 *v11;
  void (*v12)(_QWORD);
  int v13;
  unsigned int j;
  int v15;
  unint64_t v16;
  unsigned __int8 *v17;
  void (*v18)(_QWORD);
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  int v22;
  unsigned int k;
  int v24;
  unint64_t v25;
  unsigned __int8 *v26;
  void (*v27)(_QWORD);
  int v28;
  unsigned int m;
  int v30;
  unint64_t v31;
  unsigned __int8 *v32;
  void (*v33)(_QWORD);
  void (*v34)(_QWORD);
  uint64_t v35;
  __int128 v36;
  double result;

  v4 = 0;
  v5 = a1 + 4540;
  v6 = a1 + 73;
  v7 = *((_QWORD *)a1 + 2281);
  for (i = 17; i > 1; --i)
  {
    while (1)
    {
      v10 = a2[2];
      v11 = (unsigned __int8 *)(*a2 + (v10 >> 3));
      if ((unint64_t)v11 >= a2[1])
        break;
      v9 = (*v11 >> (~(_BYTE)v10 & 7)) & 1;
      a2[2] = v10 + 1;
      v4 |= v9 << (i-- - 2);
      if (i <= 1)
        goto LABEL_7;
    }
    v12 = (void (*)(_QWORD))a2[4];
    if (v12)
      v12(a2[3]);
  }
LABEL_7:
  v13 = 0;
  for (j = 17; j > 1; --j)
  {
    while (1)
    {
      v16 = a2[2];
      v17 = (unsigned __int8 *)(*a2 + (v16 >> 3));
      if ((unint64_t)v17 >= a2[1])
        break;
      v15 = (*v17 >> (~(_BYTE)v16 & 7)) & 1;
      a2[2] = v16 + 1;
      v13 |= v15 << (j-- - 2);
      if (j <= 1)
        goto LABEL_13;
    }
    v18 = (void (*)(_QWORD))a2[4];
    if (v18)
      v18(a2[3]);
  }
LABEL_13:
  resize_context_buffers(a1, v4 + 1, v13 + 1);
  *((_QWORD *)v6 + 1) = *(_QWORD *)v6;
  v19 = a2[2];
  v20 = (unsigned __int8 *)(*a2 + (v19 >> 3));
  if ((unint64_t)v20 >= a2[1])
  {
    v34 = (void (*)(_QWORD))a2[4];
    if (v34)
      v34(a2[3]);
  }
  else
  {
    v21 = *v20;
    a2[2] = v19 + 1;
    if (((v21 >> (~(_BYTE)v19 & 7)) & 1) != 0)
    {
      v22 = 0;
      for (k = 17; k > 1; --k)
      {
        while (1)
        {
          v25 = a2[2];
          v26 = (unsigned __int8 *)(*a2 + (v25 >> 3));
          if ((unint64_t)v26 >= a2[1])
            break;
          v24 = (*v26 >> (~(_BYTE)v25 & 7)) & 1;
          a2[2] = v25 + 1;
          v22 |= v24 << (k-- - 2);
          if (k <= 1)
            goto LABEL_21;
        }
        v27 = (void (*)(_QWORD))a2[4];
        if (v27)
          v27(a2[3]);
      }
LABEL_21:
      v28 = 0;
      v6[2] = v22 + 1;
      for (m = 17; m > 1; --m)
      {
        while (1)
        {
          v31 = a2[2];
          v32 = (unsigned __int8 *)(*a2 + (v31 >> 3));
          if ((unint64_t)v32 >= a2[1])
            break;
          v30 = (*v32 >> (~(_BYTE)v31 & 7)) & 1;
          a2[2] = v31 + 1;
          v28 |= v30 << (m-- - 2);
          if (m <= 1)
            goto LABEL_27;
        }
        v33 = (void (*)(_QWORD))a2[4];
        if (v33)
          v33(a2[3]);
      }
LABEL_27:
      a1[76] = v28 + 1;
    }
  }
  if (vpx_realloc_frame_buffer(*((_QWORD *)a1 + 2281) + 224 * a1[236] + 88, a1[73], a1[74], a1[79], a1[80], a1[81], 32, v5[20], (_QWORD *)(v7 + 224 * a1[236] + 64), *(uint64_t (**)(uint64_t, size_t, _QWORD *))(v7 + 8), *(_QWORD *)v7))vpx_internal_error((uint64_t)a1, 2, "Failed to allocate frame buffer");
  v35 = v7 + 224 * a1[236];
  *(_QWORD *)&v36 = *((_QWORD *)v6 + 3);
  DWORD2(v36) = *v5;
  HIDWORD(v36) = a1[71];
  *(_BYTE *)(v35 + 48) = 0;
  *(_OWORD *)(v35 + 208) = v36;
  *(_DWORD *)(v35 + 224) = a1[72];
  result = *((double *)v6 + 1);
  *(double *)(v35 + 228) = result;
  return result;
}

void resize_context_buffers(jmp_buf a1, int a2, int a3)
{
  int v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  size_t v13;
  void *v14;
  unint64_t v15;
  int v16;
  int v17;

  if (a2 > 0x4000 || a3 > 0x4000)
  {
    vpx_internal_error((uint64_t)a1, 7, "Dimensions of %dx%d beyond allowed size of %dx%d.", a2, a3, 0x4000, 0x4000);
    if (a1[73] != a2)
      goto LABEL_7;
  }
  else if (a1[73] != a2)
  {
    goto LABEL_7;
  }
  if (a1[74] == a3)
    goto LABEL_14;
LABEL_7:
  v6 = (a2 + 7) >> 3;
  if (v6 <= a1[330] && (v7 = (a3 + 7) >> 3, v7 <= a1[328]))
  {
    a1[330] = v6;
    a1[328] = v7;
    a1[331] = v6 + 8;
    v16 = (v6 + 1) >> 1;
    a1[329] = v16;
    v17 = (v7 + 1) >> 1;
    a1[327] = v17;
    a1[326] = v17 * v16;
    (*((void (**)(int *__attribute__((__org_typedef(jmp_buf)))))a1 + 183))(a1);
    v8 = (void *)*((_QWORD *)a1 + 192);
    if (!v8)
      goto LABEL_13;
  }
  else
  {
    if (vp9_alloc_context_buffers((uint64_t)a1, a2, a3))
    {
      *(_QWORD *)(a1 + 73) = 0;
      vpx_internal_error((uint64_t)a1, 2, "Failed to allocate context buffers");
    }
    (*((void (**)(int *__attribute__((__org_typedef(jmp_buf)))))a1 + 183))(a1);
    v8 = (void *)*((_QWORD *)a1 + 192);
    if (!v8)
      goto LABEL_13;
  }
  bzero(v8, a1[330] * (uint64_t)a1[328]);
LABEL_13:
  a1[73] = a2;
  a1[74] = a3;
LABEL_14:
  v9 = *((_QWORD *)a1 + 43);
  v10 = *(_QWORD *)(v9 + 8);
  if (v10)
  {
    if (a1[328] <= *(_DWORD *)(v9 + 16) && a1[330] <= *(_DWORD *)(v9 + 20))
      return;
    free(*(void **)(v10 - 8));
    v9 = *((_QWORD *)a1 + 43);
  }
  v11 = a1[328];
  v12 = a1[330];
  *(_DWORD *)(v9 + 16) = v11;
  *(_DWORD *)(v9 + 20) = v12;
  if (((v12 * v11) & 0x80000000) == 0
    && (v13 = 12 * (v12 * v11), (v14 = malloc_type_malloc(v13 + 23, 0x74AD08B5uLL)) != 0)
    && (v15 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v15 - 8) = v14, v15))
  {
    bzero((void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF0), v13);
    *(_QWORD *)(*((_QWORD *)a1 + 43) + 8) = v15;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)a1 + 43) + 8) = 0;
    vpx_internal_error((uint64_t)a1, 2, "Failed to allocate cm->cur_frame->mvs");
  }
}

uint64_t error_handler(uint64_t a1)
{
  return vpx_internal_error(a1, 7, "Truncated packet");
}

uint64_t update_mv_probs(uint64_t result, unsigned int a2, uint64_t a3)
{
  int32x4_t v4;
  int32x4_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t (*v15)(_QWORD, _QWORD, unint64_t *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  signed int v18;
  signed int v19;
  unsigned int v20;
  unint64_t *v21;
  int v22;
  BOOL v23;
  int v24;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  uint64_t v38;
  uint8x16_t *v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint32x4_t v51;
  uint64x2_t v52;
  uint64x2_t v53;
  uint32x4_t v54;
  uint64x2_t v55;
  uint16x8_t v56;
  uint32x4_t v57;
  uint64x2_t v58;
  uint64x2_t v59;
  uint64x2_t v60;
  uint64x2_t v61;
  uint32x4_t v62;
  uint64x2_t v63;
  uint64x2_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  int8x16_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  int v79;
  unint64_t v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  void (*v86)(_QWORD, _QWORD, unint64_t *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  signed int v89;
  signed int v90;
  unint64_t *v91;
  int v92;
  BOOL v93;
  int v94;
  int v96;
  unsigned int v97;
  signed int v98;
  uint64_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  uint64_t v108;
  uint8x16_t *v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  uint8x16_t v119;
  uint16x8_t v120;
  uint32x4_t v121;
  uint64x2_t v122;
  uint64x2_t v123;
  uint32x4_t v124;
  uint64x2_t v125;
  uint16x8_t v126;
  uint32x4_t v127;
  uint64x2_t v128;
  uint64x2_t v129;
  uint64x2_t v130;
  uint64x2_t v131;
  uint32x4_t v132;
  uint64x2_t v133;
  uint64x2_t v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int8x16_t v141;
  int8x16_t v142;
  unsigned int v143;
  int v144;
  int v145;
  unint64_t v146;
  unsigned int v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t *v150;
  unint64_t v151;
  void (*v152)(_QWORD, _QWORD, unint64_t *, uint64_t);
  uint64_t v153;
  uint64_t v154;
  signed int v155;
  signed int v156;
  unint64_t *v157;
  int v158;
  BOOL v159;
  int v160;
  int v162;
  unsigned int v163;
  signed int v164;
  uint64_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  uint64_t v174;
  uint8x16_t *v175;
  int8x16_t v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  uint8x16_t v185;
  uint16x8_t v186;
  uint32x4_t v187;
  uint64x2_t v188;
  uint64x2_t v189;
  uint32x4_t v190;
  uint64x2_t v191;
  uint16x8_t v192;
  uint32x4_t v193;
  uint64x2_t v194;
  uint64x2_t v195;
  uint64x2_t v196;
  uint64x2_t v197;
  uint32x4_t v198;
  uint64x2_t v199;
  uint64x2_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  unsigned int v209;
  int v210;
  int v211;
  unint64_t v212;
  unsigned int v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t *v216;
  unint64_t v217;
  void (*v218)(_QWORD, _QWORD, unint64_t *, uint64_t);
  uint64_t v219;
  uint64_t v220;
  signed int v221;
  signed int v222;
  unint64_t *v223;
  int v224;
  BOOL v225;
  int v226;
  int v228;
  unsigned int v229;
  signed int v230;
  uint64_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  uint64_t v240;
  uint8x16_t *v241;
  int8x16_t v242;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int32x4_t v248;
  int32x4_t v249;
  int32x4_t v250;
  uint8x16_t v251;
  uint16x8_t v252;
  uint32x4_t v253;
  uint64x2_t v254;
  uint64x2_t v255;
  uint32x4_t v256;
  uint64x2_t v257;
  uint16x8_t v258;
  uint32x4_t v259;
  uint64x2_t v260;
  uint64x2_t v261;
  uint64x2_t v262;
  uint64x2_t v263;
  uint32x4_t v264;
  uint64x2_t v265;
  uint64x2_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  unsigned int v275;
  int v276;
  int v277;
  unint64_t v278;
  unsigned int v279;
  uint64_t v280;
  unint64_t v281;
  char v282;
  unint64_t *v283;
  unint64_t v284;
  void (*v285)(_QWORD, _QWORD, unint64_t *, uint64_t);
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  signed int v289;
  signed int v290;
  unint64_t *v291;
  int v292;
  BOOL v293;
  int v294;
  int v296;
  unsigned int v297;
  signed int v298;
  uint64_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int32x4_t v302;
  int32x4_t v303;
  int32x4_t v304;
  int32x4_t v305;
  int32x4_t v306;
  int32x4_t v307;
  uint64_t v308;
  uint8x16_t *v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int8x16_t v313;
  int8x16_t v314;
  int8x16_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  uint8x16_t v319;
  uint16x8_t v320;
  uint32x4_t v321;
  uint64x2_t v322;
  uint64x2_t v323;
  uint32x4_t v324;
  uint64x2_t v325;
  uint16x8_t v326;
  uint32x4_t v327;
  uint64x2_t v328;
  uint64x2_t v329;
  uint64x2_t v330;
  uint64x2_t v331;
  uint32x4_t v332;
  uint64x2_t v333;
  uint64x2_t v334;
  int8x16_t v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int8x16_t v339;
  int8x16_t v340;
  int8x16_t v341;
  int8x16_t v342;
  unsigned int v343;
  int v344;
  int v345;
  unint64_t v346;
  unsigned int v347;
  uint64_t v348;
  unint64_t v349;
  char v350;
  unint64_t *v351;
  unint64_t v352;
  void (*v353)(_QWORD, _QWORD, unint64_t *, uint64_t);
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  signed int v357;
  signed int v358;
  unint64_t *v359;
  int v360;
  BOOL v361;
  int v362;
  int v364;
  unsigned int v365;
  signed int v366;
  uint64_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  int32x4_t v374;
  int32x4_t v375;
  uint64_t v376;
  uint8x16_t *v377;
  int8x16_t v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int8x16_t v383;
  int32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  uint8x16_t v387;
  uint16x8_t v388;
  uint32x4_t v389;
  uint64x2_t v390;
  uint64x2_t v391;
  uint32x4_t v392;
  uint64x2_t v393;
  uint16x8_t v394;
  uint32x4_t v395;
  uint64x2_t v396;
  uint64x2_t v397;
  uint64x2_t v398;
  uint64x2_t v399;
  uint32x4_t v400;
  uint64x2_t v401;
  uint64x2_t v402;
  int8x16_t v403;
  int8x16_t v404;
  int8x16_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  int8x16_t v409;
  int8x16_t v410;
  unsigned int v411;
  int v412;
  int v413;
  unint64_t v414;
  unsigned int v415;
  uint64_t v416;
  unint64_t v417;
  char v418;
  unint64_t *v419;
  unint64_t v420;
  void (*v421)(_QWORD, _QWORD, unint64_t *, uint64_t);
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  signed int v425;
  signed int v426;
  unint64_t *v427;
  int v428;
  BOOL v429;
  int v430;
  int v432;
  unsigned int v433;
  signed int v434;
  uint64_t v435;
  int8x16_t v436;
  int8x16_t v437;
  int32x4_t v438;
  int32x4_t v439;
  int32x4_t v440;
  int32x4_t v441;
  int32x4_t v442;
  int32x4_t v443;
  uint64_t v444;
  uint8x16_t *v445;
  int8x16_t v446;
  int8x16_t v447;
  int8x16_t v448;
  int8x16_t v449;
  int8x16_t v450;
  int8x16_t v451;
  int32x4_t v452;
  int32x4_t v453;
  int32x4_t v454;
  uint8x16_t v455;
  uint16x8_t v456;
  uint32x4_t v457;
  uint64x2_t v458;
  uint64x2_t v459;
  uint32x4_t v460;
  uint64x2_t v461;
  uint16x8_t v462;
  uint32x4_t v463;
  uint64x2_t v464;
  uint64x2_t v465;
  uint64x2_t v466;
  uint64x2_t v467;
  uint32x4_t v468;
  uint64x2_t v469;
  uint64x2_t v470;
  int8x16_t v471;
  int8x16_t v472;
  int8x16_t v473;
  int8x16_t v474;
  int8x16_t v475;
  int8x16_t v476;
  int8x16_t v477;
  int8x16_t v478;
  unsigned int v479;
  int v480;
  int v481;
  unsigned int v482;
  char v483;
  char v484;
  unint64_t v485;
  unint64_t *v486;
  unint64_t v487;
  void (*v488)(_QWORD, _QWORD, unint64_t *, uint64_t);
  uint64_t v489;
  char v490;
  int v491;
  uint64_t v492;
  signed int v493;
  signed int v494;
  unint64_t *v495;
  int v496;
  BOOL v497;
  int v498;
  int v500;
  unsigned int v501;
  signed int v502;
  uint64_t v503;
  int8x16_t v504;
  int8x16_t v505;
  int32x4_t v506;
  int32x4_t v507;
  int32x4_t v508;
  int32x4_t v509;
  int32x4_t v510;
  int32x4_t v511;
  uint64_t v512;
  uint8x16_t *v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int32x4_t v520;
  int32x4_t v521;
  int32x4_t v522;
  uint8x16_t v523;
  uint16x8_t v524;
  uint32x4_t v525;
  uint64x2_t v526;
  uint64x2_t v527;
  uint32x4_t v528;
  uint64x2_t v529;
  uint16x8_t v530;
  uint32x4_t v531;
  uint64x2_t v532;
  uint64x2_t v533;
  uint64x2_t v534;
  uint64x2_t v535;
  uint32x4_t v536;
  uint64x2_t v537;
  uint64x2_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int8x16_t v542;
  int8x16_t v543;
  int8x16_t v544;
  int8x16_t v545;
  int8x16_t v546;
  unsigned int v547;
  unsigned int v548;
  char v549;
  char v550;
  uint64_t v551;
  char v552;
  char v553;
  uint64_t v554;
  unint64_t *v555;
  uint64_t v556;

  v551 = result;
  v555 = (unint64_t *)(a3 + 48);
  v556 = 0;
  v4.i64[0] = 0x800000008;
  v4.i64[1] = 0x800000008;
  v5.i64[0] = 0x7F0000007FLL;
  v5.i64[1] = 0x7F0000007FLL;
  v554 = a2;
  do
  {
    v10 = *(_DWORD *)(a3 + 8);
    v11 = *(_DWORD *)(a3 + 12);
    v12 = *(_QWORD *)a3;
    if ((v11 & 0x80000000) != 0)
    {
      v13 = *(unint64_t **)(a3 + 24);
      v14 = *(_QWORD *)(a3 + 16) - (_QWORD)v13;
      v15 = *(uint64_t (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(a3 + 32);
      if (v15)
      {
        if (v14 >= 9)
          v16 = 9;
        else
          v16 = *(_QWORD *)(a3 + 16) - (_QWORD)v13;
        v13 = v555;
        result = v15(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 24), v555, v16);
        v5.i64[0] = 0x7F0000007FLL;
        v5.i64[1] = 0x7F0000007FLL;
        v4.i64[0] = 0x800000008;
        v4.i64[1] = 0x800000008;
      }
      v17 = 8 * v14;
      v18 = 48 - v11;
      if (8 * v14 < 0x41)
      {
        v22 = 56 - v11 - v17;
        if (v22 < 0)
          v20 = v11;
        else
          v20 = v11 + 0x40000000;
        if (v17)
          v23 = 1;
        else
          v23 = v22 <= -1;
        v24 = v22 & ~(v22 >> 31);
        if (!v23 || v18 < v24)
        {
          v21 = v13;
        }
        else
        {
          v26 = v24 - 1;
          if (v24 - 1 >= (int)(40 - v11))
            v26 = 40 - v11;
          v27 = 47 - v11 - v26;
          v21 = v13;
          v28 = 48 - v11;
          if (v27 < 0x78)
            goto LABEL_250;
          v29 = (v27 >> 3) + 1;
          v30 = (int8x16_t)v12;
          v31 = 0uLL;
          v32 = (int32x4_t)v20;
          v33 = vdupq_n_s32(v18);
          v34 = vaddq_s32(v33, (int32x4_t)xmmword_208F3A6C0);
          v21 = (unint64_t *)((char *)v13 + (v29 & 0x3FFFFFF0));
          v35 = vaddq_s32(v33, (int32x4_t)xmmword_208F3A6D0);
          v28 = v18 - 8 * (v29 & 0x3FFFFFF0);
          v36 = vaddq_s32(v33, (int32x4_t)xmmword_208F3A6A0);
          v37 = vaddq_s32(v33, (int32x4_t)xmmword_208F3A6B0);
          v38 = v29 & 0x3FFFFFF0;
          v39 = (uint8x16_t *)v13;
          v40 = 0uLL;
          v41 = 0uLL;
          v42 = 0uLL;
          v43 = 0uLL;
          v44 = 0uLL;
          v45 = 0uLL;
          v46 = 0uLL;
          v47 = 0uLL;
          v48 = 0uLL;
          do
          {
            v49 = *v39++;
            v50 = vmovl_high_u8(v49);
            v51 = vmovl_high_u16(v50);
            v52.i64[0] = v51.u32[0];
            v52.i64[1] = v51.u32[1];
            v53 = v52;
            v54 = vmovl_u16(*(uint16x4_t *)v50.i8);
            v52.i64[0] = v54.u32[2];
            v52.i64[1] = v54.u32[3];
            v55 = v52;
            v56 = vmovl_u8(*(uint8x8_t *)v49.i8);
            v57 = vmovl_high_u16(v56);
            v52.i64[0] = v57.u32[2];
            v52.i64[1] = v57.u32[3];
            v58 = v52;
            v52.i64[0] = v51.u32[2];
            v52.i64[1] = v51.u32[3];
            v59 = v52;
            v52.i64[0] = v54.u32[0];
            v52.i64[1] = v54.u32[1];
            v60 = v52;
            v52.i64[0] = v57.u32[0];
            v52.i64[1] = v57.u32[1];
            v61 = v52;
            v62 = vmovl_u16(*(uint16x4_t *)v56.i8);
            v52.i64[0] = v62.u32[2];
            v52.i64[1] = v62.u32[3];
            v63 = v52;
            v52.i64[0] = v62.u32[0];
            v52.i64[1] = v62.u32[1];
            v64 = v52;
            v52.i64[0] = v37.u32[0];
            v52.i64[1] = v37.u32[1];
            v65 = (int8x16_t)vshlq_u64(v64, v52);
            v52.i64[0] = v37.u32[2];
            v52.i64[1] = v37.u32[3];
            v66 = (int8x16_t)vshlq_u64(v63, v52);
            v52.i64[0] = v36.u32[0];
            v52.i64[1] = v36.u32[1];
            v67 = (int8x16_t)vshlq_u64(v61, v52);
            v52.i64[0] = v35.u32[0];
            v52.i64[1] = v35.u32[1];
            v68 = (int8x16_t)vshlq_u64(v60, v52);
            v52.i64[0] = v34.u32[2];
            v52.i64[1] = v34.u32[3];
            v69 = (int8x16_t)vshlq_u64(v59, v52);
            v52.i64[0] = v36.u32[2];
            v52.i64[1] = v36.u32[3];
            v70 = (int8x16_t)vshlq_u64(v58, v52);
            v52.i64[0] = v35.u32[2];
            v52.i64[1] = v35.u32[3];
            v71 = (int8x16_t)vshlq_u64(v55, v52);
            v52.i64[0] = v34.u32[0];
            v52.i64[1] = v34.u32[1];
            v44 = vorrq_s8((int8x16_t)vshlq_u64(v53, v52), v44);
            v43 = vorrq_s8(v71, v43);
            v41 = vorrq_s8(v70, v41);
            v45 = vorrq_s8(v69, v45);
            v42 = vorrq_s8(v68, v42);
            v40 = vorrq_s8(v67, v40);
            v31 = vorrq_s8(v66, v31);
            v30 = vorrq_s8(v65, v30);
            v32 = vaddq_s32(v32, v4);
            v46 = vaddq_s32(v46, v4);
            v47 = vaddq_s32(v47, v4);
            v48 = vaddq_s32(v48, v4);
            v37 = vaddq_s32(v37, v5);
            v36 = vaddq_s32(v36, v5);
            v35 = vaddq_s32(v35, v5);
            v34 = vaddq_s32(v34, v5);
            v38 -= 16;
          }
          while (v38);
          v20 = vaddvq_s32(vaddq_s32(vaddq_s32(v32, v47), vaddq_s32(v46, v48)));
          v72 = vorrq_s8(vorrq_s8(vorrq_s8(v30, v42), vorrq_s8(v40, v44)), vorrq_s8(vorrq_s8(v31, v43), vorrq_s8(v41, v45)));
          v12 = (unint64_t)vorr_s8(*(int8x8_t *)v72.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v72, v72, 8uLL));
          if ((v29 & 0x3FFFFFF0) != v29)
          {
LABEL_250:
            do
            {
              v20 += 8;
              v73 = *(unsigned __int8 *)v21;
              v21 = (unint64_t *)((char *)v21 + 1);
              v12 |= (unint64_t)v73 << v28;
              v28 -= 8;
            }
            while (v28 >= v24);
          }
        }
      }
      else
      {
        v19 = (v18 & 0xFFFFFFF8) + 8;
        v20 = v19 + v11;
        v21 = (unint64_t *)((char *)v13 + (v19 >> 3));
        v12 = (bswap64(*v13) >> (56 - (v18 & 0xF8u)) << (v18 & 7)) | *(_QWORD *)a3;
      }
      *(_QWORD *)(a3 + 24) += (char *)v21 - (char *)v13;
      v11 = v20;
    }
    v74 = (252 * v10 + 4) >> 8;
    v75 = v74 << 56;
    v76 = v12;
    v77 = v12 - (v74 << 56);
    if (v12 >= v74 << 56)
    {
      LODWORD(v74) = *(_DWORD *)(a3 + 8) - v74;
      v76 = v77;
    }
    v78 = vpx_norm[v74];
    v79 = (_DWORD)v74 << v78;
    v80 = v76 << v78;
    *(_QWORD *)a3 = v76 << v78;
    v81 = v11 - v78;
    *(_DWORD *)(a3 + 8) = (_DWORD)v74 << v78;
    *(_DWORD *)(a3 + 12) = v11 - v78;
    if (v12 >= v75)
    {
      if ((v81 & 0x80000000) != 0)
      {
        v84 = *(unint64_t **)(a3 + 24);
        v85 = *(_QWORD *)(a3 + 16) - (_QWORD)v84;
        v86 = *(void (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(a3 + 32);
        if (v86)
        {
          if (v85 >= 9)
            v87 = 9;
          else
            v87 = *(_QWORD *)(a3 + 16) - (_QWORD)v84;
          v84 = v555;
          v86(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 24), v555, v87);
          v5.i64[0] = 0x7F0000007FLL;
          v5.i64[1] = 0x7F0000007FLL;
          v4.i64[0] = 0x800000008;
          v4.i64[1] = 0x800000008;
        }
        v88 = 8 * v85;
        v89 = 48 - v81;
        if (8 * v85 < 0x41)
        {
          v92 = 56 - v88 - v81;
          if (v92 >= 0)
            v81 += 0x40000000;
          if (v88)
            v93 = 1;
          else
            v93 = v92 <= -1;
          v94 = v92 & ~(v92 >> 31);
          if (!v93 || v89 < v94)
          {
            v91 = v84;
          }
          else
          {
            v96 = v78 - v11 + 40;
            if (v96 >= v94 - 1)
              v96 = v94 - 1;
            v97 = v78 - v11 - v96 + 47;
            v91 = v84;
            v98 = v89;
            if (v97 < 0x78)
              goto LABEL_251;
            v99 = (v97 >> 3) + 1;
            v100 = (int8x16_t)v80;
            v101 = 0uLL;
            v102 = (int32x4_t)v81;
            v103 = vdupq_n_s32(v89);
            v104 = vaddq_s32(v103, (int32x4_t)xmmword_208F3A6C0);
            v91 = (unint64_t *)((char *)v84 + (v99 & 0x3FFFFFF0));
            v105 = vaddq_s32(v103, (int32x4_t)xmmword_208F3A6D0);
            v98 = v89 - 8 * (v99 & 0x3FFFFFF0);
            v106 = vaddq_s32(v103, (int32x4_t)xmmword_208F3A6A0);
            v107 = vaddq_s32(v103, (int32x4_t)xmmword_208F3A6B0);
            v108 = v99 & 0x3FFFFFF0;
            v109 = (uint8x16_t *)v84;
            v110 = 0uLL;
            v111 = 0uLL;
            v112 = 0uLL;
            v113 = 0uLL;
            v114 = 0uLL;
            v115 = 0uLL;
            v116 = 0uLL;
            v117 = 0uLL;
            v118 = 0uLL;
            do
            {
              v119 = *v109++;
              v120 = vmovl_high_u8(v119);
              v121 = vmovl_high_u16(v120);
              v122.i64[0] = v121.u32[0];
              v122.i64[1] = v121.u32[1];
              v123 = v122;
              v124 = vmovl_u16(*(uint16x4_t *)v120.i8);
              v122.i64[0] = v124.u32[2];
              v122.i64[1] = v124.u32[3];
              v125 = v122;
              v126 = vmovl_u8(*(uint8x8_t *)v119.i8);
              v127 = vmovl_high_u16(v126);
              v122.i64[0] = v127.u32[2];
              v122.i64[1] = v127.u32[3];
              v128 = v122;
              v122.i64[0] = v121.u32[2];
              v122.i64[1] = v121.u32[3];
              v129 = v122;
              v122.i64[0] = v124.u32[0];
              v122.i64[1] = v124.u32[1];
              v130 = v122;
              v122.i64[0] = v127.u32[0];
              v122.i64[1] = v127.u32[1];
              v131 = v122;
              v132 = vmovl_u16(*(uint16x4_t *)v126.i8);
              v122.i64[0] = v132.u32[2];
              v122.i64[1] = v132.u32[3];
              v133 = v122;
              v122.i64[0] = v132.u32[0];
              v122.i64[1] = v132.u32[1];
              v134 = v122;
              v122.i64[0] = v107.u32[0];
              v122.i64[1] = v107.u32[1];
              v135 = (int8x16_t)vshlq_u64(v134, v122);
              v122.i64[0] = v107.u32[2];
              v122.i64[1] = v107.u32[3];
              v136 = (int8x16_t)vshlq_u64(v133, v122);
              v122.i64[0] = v106.u32[0];
              v122.i64[1] = v106.u32[1];
              v137 = (int8x16_t)vshlq_u64(v131, v122);
              v122.i64[0] = v105.u32[0];
              v122.i64[1] = v105.u32[1];
              v138 = (int8x16_t)vshlq_u64(v130, v122);
              v122.i64[0] = v104.u32[2];
              v122.i64[1] = v104.u32[3];
              v139 = (int8x16_t)vshlq_u64(v129, v122);
              v122.i64[0] = v106.u32[2];
              v122.i64[1] = v106.u32[3];
              v140 = (int8x16_t)vshlq_u64(v128, v122);
              v122.i64[0] = v105.u32[2];
              v122.i64[1] = v105.u32[3];
              v141 = (int8x16_t)vshlq_u64(v125, v122);
              v122.i64[0] = v104.u32[0];
              v122.i64[1] = v104.u32[1];
              v114 = vorrq_s8((int8x16_t)vshlq_u64(v123, v122), v114);
              v113 = vorrq_s8(v141, v113);
              v111 = vorrq_s8(v140, v111);
              v115 = vorrq_s8(v139, v115);
              v112 = vorrq_s8(v138, v112);
              v110 = vorrq_s8(v137, v110);
              v101 = vorrq_s8(v136, v101);
              v100 = vorrq_s8(v135, v100);
              v102 = vaddq_s32(v102, v4);
              v116 = vaddq_s32(v116, v4);
              v117 = vaddq_s32(v117, v4);
              v118 = vaddq_s32(v118, v4);
              v107 = vaddq_s32(v107, v5);
              v106 = vaddq_s32(v106, v5);
              v105 = vaddq_s32(v105, v5);
              v104 = vaddq_s32(v104, v5);
              v108 -= 16;
            }
            while (v108);
            v81 = vaddvq_s32(vaddq_s32(vaddq_s32(v102, v117), vaddq_s32(v116, v118)));
            v142 = vorrq_s8(vorrq_s8(vorrq_s8(v100, v112), vorrq_s8(v110, v114)), vorrq_s8(vorrq_s8(v101, v113), vorrq_s8(v111, v115)));
            v80 = (unint64_t)vorr_s8(*(int8x8_t *)v142.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v142, v142, 8uLL));
            if ((v99 & 0x3FFFFFF0) != v99)
            {
LABEL_251:
              do
              {
                v81 += 8;
                v143 = *(unsigned __int8 *)v91;
                v91 = (unint64_t *)((char *)v91 + 1);
                v80 |= (unint64_t)v143 << v98;
                v98 -= 8;
              }
              while (v98 >= v94);
            }
          }
        }
        else
        {
          v90 = (v89 & 0xFFFFFFF8) + 8;
          v81 += v90;
          v91 = (unint64_t *)((char *)v84 + (v90 >> 3));
          v80 = (bswap64(*v84) >> (56 - (v89 & 0xF8u)) << (v89 & 7)) | *(_QWORD *)a3;
        }
        *(_QWORD *)(a3 + 24) += (char *)v91 - (char *)v84;
        v82 = ((v79 << 7) + 128) >> 8;
        v83 = v80 - (v82 << 56);
        if (v80 < v82 << 56)
          goto LABEL_38;
      }
      else
      {
        v82 = ((v79 << 7) + 128) >> 8;
        v83 = v80 - (v82 << 56);
        if (v80 < v82 << 56)
        {
LABEL_38:
          v553 = 1;
          goto LABEL_66;
        }
      }
      LODWORD(v82) = *(_DWORD *)(a3 + 8) - v82;
      v553 = -127;
      v80 = v83;
LABEL_66:
      v144 = vpx_norm[v82];
      v145 = (_DWORD)v82 << v144;
      v146 = v80 << v144;
      *(_QWORD *)a3 = v146;
      v147 = v81 - v144;
      *(_DWORD *)(a3 + 8) = (_DWORD)v82 << v144;
      *(_DWORD *)(a3 + 12) = v81 - v144;
      if ((int)(v81 - v144) < 0)
      {
        v150 = *(unint64_t **)(a3 + 24);
        v151 = *(_QWORD *)(a3 + 16) - (_QWORD)v150;
        v152 = *(void (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(a3 + 32);
        if (v152)
        {
          if (v151 >= 9)
            v153 = 9;
          else
            v153 = *(_QWORD *)(a3 + 16) - (_QWORD)v150;
          v150 = v555;
          v152(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 24), v555, v153);
          v5.i64[0] = 0x7F0000007FLL;
          v5.i64[1] = 0x7F0000007FLL;
          v4.i64[0] = 0x800000008;
          v4.i64[1] = 0x800000008;
        }
        v154 = 8 * v151;
        v155 = 48 - v147;
        if (8 * v151 < 0x41)
        {
          v158 = 56 - v154 - v147;
          if (v158 >= 0)
            v147 += 0x40000000;
          if (v154)
            v159 = 1;
          else
            v159 = v158 <= -1;
          v160 = v158 & ~(v158 >> 31);
          if (!v159 || v155 < v160)
          {
            v157 = v150;
          }
          else
          {
            v162 = v144 - v81 + 40;
            if (v162 >= v160 - 1)
              v162 = v160 - 1;
            v163 = v144 - v81 - v162 + 47;
            v157 = v150;
            v164 = v155;
            if (v163 < 0x78)
              goto LABEL_252;
            v165 = (v163 >> 3) + 1;
            v166 = (int8x16_t)v146;
            v167 = 0uLL;
            v168 = (int32x4_t)v147;
            v169 = vdupq_n_s32(v155);
            v170 = vaddq_s32(v169, (int32x4_t)xmmword_208F3A6C0);
            v157 = (unint64_t *)((char *)v150 + (v165 & 0x3FFFFFF0));
            v171 = vaddq_s32(v169, (int32x4_t)xmmword_208F3A6D0);
            v164 = v155 - 8 * (v165 & 0x3FFFFFF0);
            v172 = vaddq_s32(v169, (int32x4_t)xmmword_208F3A6A0);
            v173 = vaddq_s32(v169, (int32x4_t)xmmword_208F3A6B0);
            v174 = v165 & 0x3FFFFFF0;
            v175 = (uint8x16_t *)v150;
            v176 = 0uLL;
            v177 = 0uLL;
            v178 = 0uLL;
            v179 = 0uLL;
            v180 = 0uLL;
            v181 = 0uLL;
            v182 = 0uLL;
            v183 = 0uLL;
            v184 = 0uLL;
            do
            {
              v185 = *v175++;
              v186 = vmovl_high_u8(v185);
              v187 = vmovl_high_u16(v186);
              v188.i64[0] = v187.u32[0];
              v188.i64[1] = v187.u32[1];
              v189 = v188;
              v190 = vmovl_u16(*(uint16x4_t *)v186.i8);
              v188.i64[0] = v190.u32[2];
              v188.i64[1] = v190.u32[3];
              v191 = v188;
              v192 = vmovl_u8(*(uint8x8_t *)v185.i8);
              v193 = vmovl_high_u16(v192);
              v188.i64[0] = v193.u32[2];
              v188.i64[1] = v193.u32[3];
              v194 = v188;
              v188.i64[0] = v187.u32[2];
              v188.i64[1] = v187.u32[3];
              v195 = v188;
              v188.i64[0] = v190.u32[0];
              v188.i64[1] = v190.u32[1];
              v196 = v188;
              v188.i64[0] = v193.u32[0];
              v188.i64[1] = v193.u32[1];
              v197 = v188;
              v198 = vmovl_u16(*(uint16x4_t *)v192.i8);
              v188.i64[0] = v198.u32[2];
              v188.i64[1] = v198.u32[3];
              v199 = v188;
              v188.i64[0] = v198.u32[0];
              v188.i64[1] = v198.u32[1];
              v200 = v188;
              v188.i64[0] = v173.u32[0];
              v188.i64[1] = v173.u32[1];
              v201 = (int8x16_t)vshlq_u64(v200, v188);
              v188.i64[0] = v173.u32[2];
              v188.i64[1] = v173.u32[3];
              v202 = (int8x16_t)vshlq_u64(v199, v188);
              v188.i64[0] = v172.u32[0];
              v188.i64[1] = v172.u32[1];
              v203 = (int8x16_t)vshlq_u64(v197, v188);
              v188.i64[0] = v171.u32[0];
              v188.i64[1] = v171.u32[1];
              v204 = (int8x16_t)vshlq_u64(v196, v188);
              v188.i64[0] = v170.u32[2];
              v188.i64[1] = v170.u32[3];
              v205 = (int8x16_t)vshlq_u64(v195, v188);
              v188.i64[0] = v172.u32[2];
              v188.i64[1] = v172.u32[3];
              v206 = (int8x16_t)vshlq_u64(v194, v188);
              v188.i64[0] = v171.u32[2];
              v188.i64[1] = v171.u32[3];
              v207 = (int8x16_t)vshlq_u64(v191, v188);
              v188.i64[0] = v170.u32[0];
              v188.i64[1] = v170.u32[1];
              v180 = vorrq_s8((int8x16_t)vshlq_u64(v189, v188), v180);
              v179 = vorrq_s8(v207, v179);
              v177 = vorrq_s8(v206, v177);
              v181 = vorrq_s8(v205, v181);
              v178 = vorrq_s8(v204, v178);
              v176 = vorrq_s8(v203, v176);
              v167 = vorrq_s8(v202, v167);
              v166 = vorrq_s8(v201, v166);
              v168 = vaddq_s32(v168, v4);
              v182 = vaddq_s32(v182, v4);
              v183 = vaddq_s32(v183, v4);
              v184 = vaddq_s32(v184, v4);
              v173 = vaddq_s32(v173, v5);
              v172 = vaddq_s32(v172, v5);
              v171 = vaddq_s32(v171, v5);
              v170 = vaddq_s32(v170, v5);
              v174 -= 16;
            }
            while (v174);
            v147 = vaddvq_s32(vaddq_s32(vaddq_s32(v168, v183), vaddq_s32(v182, v184)));
            v208 = vorrq_s8(vorrq_s8(vorrq_s8(v166, v178), vorrq_s8(v176, v180)), vorrq_s8(vorrq_s8(v167, v179), vorrq_s8(v177, v181)));
            v146 = (unint64_t)vorr_s8(*(int8x8_t *)v208.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL));
            if ((v165 & 0x3FFFFFF0) != v165)
            {
LABEL_252:
              do
              {
                v147 += 8;
                v209 = *(unsigned __int8 *)v157;
                v157 = (unint64_t *)((char *)v157 + 1);
                v146 |= (unint64_t)v209 << v164;
                v164 -= 8;
              }
              while (v164 >= v160);
            }
          }
        }
        else
        {
          v156 = (v155 & 0xFFFFFFF8) + 8;
          v147 += v156;
          v157 = (unint64_t *)((char *)v150 + (v156 >> 3));
          v146 = (bswap64(*v150) >> (56 - (v155 & 0xF8u)) << (v155 & 7)) | *(_QWORD *)a3;
        }
        *(_QWORD *)(a3 + 24) += (char *)v157 - (char *)v150;
        v148 = ((v145 << 7) + 128) >> 8;
        v149 = v146 - (v148 << 56);
        if (v146 < v148 << 56)
          goto LABEL_68;
      }
      else
      {
        v148 = ((v145 << 7) + 128) >> 8;
        v149 = v146 - (v148 << 56);
        if (v146 < v148 << 56)
        {
LABEL_68:
          v552 = 0;
          goto LABEL_96;
        }
      }
      LODWORD(v148) = *(_DWORD *)(a3 + 8) - v148;
      v552 = 64;
      v146 = v149;
LABEL_96:
      v210 = vpx_norm[v148];
      v211 = (_DWORD)v148 << v210;
      v212 = v146 << v210;
      *(_QWORD *)a3 = v212;
      v213 = v147 - v210;
      *(_DWORD *)(a3 + 8) = (_DWORD)v148 << v210;
      *(_DWORD *)(a3 + 12) = v147 - v210;
      if ((int)(v147 - v210) < 0)
      {
        v216 = *(unint64_t **)(a3 + 24);
        v217 = *(_QWORD *)(a3 + 16) - (_QWORD)v216;
        v218 = *(void (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(a3 + 32);
        if (v218)
        {
          if (v217 >= 9)
            v219 = 9;
          else
            v219 = *(_QWORD *)(a3 + 16) - (_QWORD)v216;
          v216 = v555;
          v218(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 24), v555, v219);
          v5.i64[0] = 0x7F0000007FLL;
          v5.i64[1] = 0x7F0000007FLL;
          v4.i64[0] = 0x800000008;
          v4.i64[1] = 0x800000008;
        }
        v220 = 8 * v217;
        v221 = 48 - v213;
        if (8 * v217 < 0x41)
        {
          v224 = 56 - v220 - v213;
          if (v224 >= 0)
            v213 += 0x40000000;
          if (v220)
            v225 = 1;
          else
            v225 = v224 <= -1;
          v226 = v224 & ~(v224 >> 31);
          if (!v225 || v221 < v226)
          {
            v223 = v216;
          }
          else
          {
            v228 = v210 - v147 + 40;
            if (v228 >= v226 - 1)
              v228 = v226 - 1;
            v229 = v210 - v147 - v228 + 47;
            v223 = v216;
            v230 = v221;
            if (v229 < 0x78)
              goto LABEL_253;
            v231 = (v229 >> 3) + 1;
            v232 = (int8x16_t)v212;
            v233 = 0uLL;
            v234 = (int32x4_t)v213;
            v235 = vdupq_n_s32(v221);
            v236 = vaddq_s32(v235, (int32x4_t)xmmword_208F3A6C0);
            v223 = (unint64_t *)((char *)v216 + (v231 & 0x3FFFFFF0));
            v237 = vaddq_s32(v235, (int32x4_t)xmmword_208F3A6D0);
            v230 = v221 - 8 * (v231 & 0x3FFFFFF0);
            v238 = vaddq_s32(v235, (int32x4_t)xmmword_208F3A6A0);
            v239 = vaddq_s32(v235, (int32x4_t)xmmword_208F3A6B0);
            v240 = v231 & 0x3FFFFFF0;
            v241 = (uint8x16_t *)v216;
            v242 = 0uLL;
            v243 = 0uLL;
            v244 = 0uLL;
            v245 = 0uLL;
            v246 = 0uLL;
            v247 = 0uLL;
            v248 = 0uLL;
            v249 = 0uLL;
            v250 = 0uLL;
            do
            {
              v251 = *v241++;
              v252 = vmovl_high_u8(v251);
              v253 = vmovl_high_u16(v252);
              v254.i64[0] = v253.u32[0];
              v254.i64[1] = v253.u32[1];
              v255 = v254;
              v256 = vmovl_u16(*(uint16x4_t *)v252.i8);
              v254.i64[0] = v256.u32[2];
              v254.i64[1] = v256.u32[3];
              v257 = v254;
              v258 = vmovl_u8(*(uint8x8_t *)v251.i8);
              v259 = vmovl_high_u16(v258);
              v254.i64[0] = v259.u32[2];
              v254.i64[1] = v259.u32[3];
              v260 = v254;
              v254.i64[0] = v253.u32[2];
              v254.i64[1] = v253.u32[3];
              v261 = v254;
              v254.i64[0] = v256.u32[0];
              v254.i64[1] = v256.u32[1];
              v262 = v254;
              v254.i64[0] = v259.u32[0];
              v254.i64[1] = v259.u32[1];
              v263 = v254;
              v264 = vmovl_u16(*(uint16x4_t *)v258.i8);
              v254.i64[0] = v264.u32[2];
              v254.i64[1] = v264.u32[3];
              v265 = v254;
              v254.i64[0] = v264.u32[0];
              v254.i64[1] = v264.u32[1];
              v266 = v254;
              v254.i64[0] = v239.u32[0];
              v254.i64[1] = v239.u32[1];
              v267 = (int8x16_t)vshlq_u64(v266, v254);
              v254.i64[0] = v239.u32[2];
              v254.i64[1] = v239.u32[3];
              v268 = (int8x16_t)vshlq_u64(v265, v254);
              v254.i64[0] = v238.u32[0];
              v254.i64[1] = v238.u32[1];
              v269 = (int8x16_t)vshlq_u64(v263, v254);
              v254.i64[0] = v237.u32[0];
              v254.i64[1] = v237.u32[1];
              v270 = (int8x16_t)vshlq_u64(v262, v254);
              v254.i64[0] = v236.u32[2];
              v254.i64[1] = v236.u32[3];
              v271 = (int8x16_t)vshlq_u64(v261, v254);
              v254.i64[0] = v238.u32[2];
              v254.i64[1] = v238.u32[3];
              v272 = (int8x16_t)vshlq_u64(v260, v254);
              v254.i64[0] = v237.u32[2];
              v254.i64[1] = v237.u32[3];
              v273 = (int8x16_t)vshlq_u64(v257, v254);
              v254.i64[0] = v236.u32[0];
              v254.i64[1] = v236.u32[1];
              v246 = vorrq_s8((int8x16_t)vshlq_u64(v255, v254), v246);
              v245 = vorrq_s8(v273, v245);
              v243 = vorrq_s8(v272, v243);
              v247 = vorrq_s8(v271, v247);
              v244 = vorrq_s8(v270, v244);
              v242 = vorrq_s8(v269, v242);
              v233 = vorrq_s8(v268, v233);
              v232 = vorrq_s8(v267, v232);
              v234 = vaddq_s32(v234, v4);
              v248 = vaddq_s32(v248, v4);
              v249 = vaddq_s32(v249, v4);
              v250 = vaddq_s32(v250, v4);
              v239 = vaddq_s32(v239, v5);
              v238 = vaddq_s32(v238, v5);
              v237 = vaddq_s32(v237, v5);
              v236 = vaddq_s32(v236, v5);
              v240 -= 16;
            }
            while (v240);
            v213 = vaddvq_s32(vaddq_s32(vaddq_s32(v234, v249), vaddq_s32(v248, v250)));
            v274 = vorrq_s8(vorrq_s8(vorrq_s8(v232, v244), vorrq_s8(v242, v246)), vorrq_s8(vorrq_s8(v233, v245), vorrq_s8(v243, v247)));
            v212 = (unint64_t)vorr_s8(*(int8x8_t *)v274.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v274, v274, 8uLL));
            if ((v231 & 0x3FFFFFF0) != v231)
            {
LABEL_253:
              do
              {
                v213 += 8;
                v275 = *(unsigned __int8 *)v223;
                v223 = (unint64_t *)((char *)v223 + 1);
                v212 |= (unint64_t)v275 << v230;
                v230 -= 8;
              }
              while (v230 >= v226);
            }
          }
        }
        else
        {
          v222 = (v221 & 0xFFFFFFF8) + 8;
          v213 += v222;
          v223 = (unint64_t *)((char *)v216 + (v222 >> 3));
          v212 = (bswap64(*v216) >> (56 - (v221 & 0xF8u)) << (v221 & 7)) | *(_QWORD *)a3;
        }
        *(_QWORD *)(a3 + 24) += (char *)v223 - (char *)v216;
        v214 = ((v211 << 7) + 128) >> 8;
        v215 = v212 - (v214 << 56);
        if (v212 < v214 << 56)
          goto LABEL_98;
      }
      else
      {
        v214 = ((v211 << 7) + 128) >> 8;
        v215 = v212 - (v214 << 56);
        if (v212 < v214 << 56)
        {
LABEL_98:
          result = 0;
          goto LABEL_126;
        }
      }
      LODWORD(v214) = *(_DWORD *)(a3 + 8) - v214;
      result = 32;
      v212 = v215;
LABEL_126:
      v276 = vpx_norm[v214];
      v277 = (_DWORD)v214 << v276;
      v278 = v212 << v276;
      *(_QWORD *)a3 = v212 << v276;
      v279 = v213 - v276;
      *(_DWORD *)(a3 + 8) = (_DWORD)v214 << v276;
      *(_DWORD *)(a3 + 12) = v213 - v276;
      if ((int)(v213 - v276) < 0)
      {
        v283 = *(unint64_t **)(a3 + 24);
        v284 = *(_QWORD *)(a3 + 16) - (_QWORD)v283;
        v285 = *(void (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(a3 + 32);
        if (v285)
        {
          if (v284 >= 9)
            v286 = 9;
          else
            v286 = *(_QWORD *)(a3 + 16) - (_QWORD)v283;
          v287 = result;
          v283 = v555;
          v285(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 24), v555, v286);
          result = v287;
          v5.i64[0] = 0x7F0000007FLL;
          v5.i64[1] = 0x7F0000007FLL;
          v4.i64[0] = 0x800000008;
          v4.i64[1] = 0x800000008;
        }
        v288 = 8 * v284;
        v289 = 48 - v279;
        if (8 * v284 < 0x41)
        {
          v292 = 56 - v288 - v279;
          if (v292 >= 0)
            v279 += 0x40000000;
          if (v288)
            v293 = 1;
          else
            v293 = v292 <= -1;
          v294 = v292 & ~(v292 >> 31);
          if (!v293 || v289 < v294)
          {
            v291 = v283;
          }
          else
          {
            v296 = v276 - v213 + 40;
            if (v296 >= v294 - 1)
              v296 = v294 - 1;
            v297 = v276 - v213 - v296 + 47;
            v291 = v283;
            v298 = v289;
            if (v297 < 0x78)
              goto LABEL_254;
            v299 = (v297 >> 3) + 1;
            v300 = (int8x16_t)v278;
            v301 = 0uLL;
            v302 = (int32x4_t)v279;
            v303 = vdupq_n_s32(v289);
            v304 = vaddq_s32(v303, (int32x4_t)xmmword_208F3A6C0);
            v291 = (unint64_t *)((char *)v283 + (v299 & 0x3FFFFFF0));
            v305 = vaddq_s32(v303, (int32x4_t)xmmword_208F3A6D0);
            v298 = v289 - 8 * (v299 & 0x3FFFFFF0);
            v306 = vaddq_s32(v303, (int32x4_t)xmmword_208F3A6A0);
            v307 = vaddq_s32(v303, (int32x4_t)xmmword_208F3A6B0);
            v308 = v299 & 0x3FFFFFF0;
            v309 = (uint8x16_t *)v283;
            v310 = 0uLL;
            v311 = 0uLL;
            v312 = 0uLL;
            v313 = 0uLL;
            v314 = 0uLL;
            v315 = 0uLL;
            v316 = 0uLL;
            v317 = 0uLL;
            v318 = 0uLL;
            do
            {
              v319 = *v309++;
              v320 = vmovl_high_u8(v319);
              v321 = vmovl_high_u16(v320);
              v322.i64[0] = v321.u32[0];
              v322.i64[1] = v321.u32[1];
              v323 = v322;
              v324 = vmovl_u16(*(uint16x4_t *)v320.i8);
              v322.i64[0] = v324.u32[2];
              v322.i64[1] = v324.u32[3];
              v325 = v322;
              v326 = vmovl_u8(*(uint8x8_t *)v319.i8);
              v327 = vmovl_high_u16(v326);
              v322.i64[0] = v327.u32[2];
              v322.i64[1] = v327.u32[3];
              v328 = v322;
              v322.i64[0] = v321.u32[2];
              v322.i64[1] = v321.u32[3];
              v329 = v322;
              v322.i64[0] = v324.u32[0];
              v322.i64[1] = v324.u32[1];
              v330 = v322;
              v322.i64[0] = v327.u32[0];
              v322.i64[1] = v327.u32[1];
              v331 = v322;
              v332 = vmovl_u16(*(uint16x4_t *)v326.i8);
              v322.i64[0] = v332.u32[2];
              v322.i64[1] = v332.u32[3];
              v333 = v322;
              v322.i64[0] = v332.u32[0];
              v322.i64[1] = v332.u32[1];
              v334 = v322;
              v322.i64[0] = v307.u32[0];
              v322.i64[1] = v307.u32[1];
              v335 = (int8x16_t)vshlq_u64(v334, v322);
              v322.i64[0] = v307.u32[2];
              v322.i64[1] = v307.u32[3];
              v336 = (int8x16_t)vshlq_u64(v333, v322);
              v322.i64[0] = v306.u32[0];
              v322.i64[1] = v306.u32[1];
              v337 = (int8x16_t)vshlq_u64(v331, v322);
              v322.i64[0] = v305.u32[0];
              v322.i64[1] = v305.u32[1];
              v338 = (int8x16_t)vshlq_u64(v330, v322);
              v322.i64[0] = v304.u32[2];
              v322.i64[1] = v304.u32[3];
              v339 = (int8x16_t)vshlq_u64(v329, v322);
              v322.i64[0] = v306.u32[2];
              v322.i64[1] = v306.u32[3];
              v340 = (int8x16_t)vshlq_u64(v328, v322);
              v322.i64[0] = v305.u32[2];
              v322.i64[1] = v305.u32[3];
              v341 = (int8x16_t)vshlq_u64(v325, v322);
              v322.i64[0] = v304.u32[0];
              v322.i64[1] = v304.u32[1];
              v314 = vorrq_s8((int8x16_t)vshlq_u64(v323, v322), v314);
              v313 = vorrq_s8(v341, v313);
              v311 = vorrq_s8(v340, v311);
              v315 = vorrq_s8(v339, v315);
              v312 = vorrq_s8(v338, v312);
              v310 = vorrq_s8(v337, v310);
              v301 = vorrq_s8(v336, v301);
              v300 = vorrq_s8(v335, v300);
              v302 = vaddq_s32(v302, v4);
              v316 = vaddq_s32(v316, v4);
              v317 = vaddq_s32(v317, v4);
              v318 = vaddq_s32(v318, v4);
              v307 = vaddq_s32(v307, v5);
              v306 = vaddq_s32(v306, v5);
              v305 = vaddq_s32(v305, v5);
              v304 = vaddq_s32(v304, v5);
              v308 -= 16;
            }
            while (v308);
            v279 = vaddvq_s32(vaddq_s32(vaddq_s32(v302, v317), vaddq_s32(v316, v318)));
            v342 = vorrq_s8(vorrq_s8(vorrq_s8(v300, v312), vorrq_s8(v310, v314)), vorrq_s8(vorrq_s8(v301, v313), vorrq_s8(v311, v315)));
            v278 = (unint64_t)vorr_s8(*(int8x8_t *)v342.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v342, v342, 8uLL));
            if ((v299 & 0x3FFFFFF0) != v299)
            {
LABEL_254:
              do
              {
                v279 += 8;
                v343 = *(unsigned __int8 *)v291;
                v291 = (unint64_t *)((char *)v291 + 1);
                v278 |= (unint64_t)v343 << v298;
                v298 -= 8;
              }
              while (v298 >= v294);
            }
          }
        }
        else
        {
          v290 = (v289 & 0xFFFFFFF8) + 8;
          v279 += v290;
          v291 = (unint64_t *)((char *)v283 + (v290 >> 3));
          v278 = (bswap64(*v283) >> (56 - (v289 & 0xF8u)) << (v289 & 7)) | *(_QWORD *)a3;
        }
        *(_QWORD *)(a3 + 24) += (char *)v291 - (char *)v283;
        v280 = ((v277 << 7) + 128) >> 8;
        v281 = v278 - (v280 << 56);
        if (v278 < v280 << 56)
          goto LABEL_128;
      }
      else
      {
        v280 = ((v277 << 7) + 128) >> 8;
        v281 = v278 - (v280 << 56);
        if (v278 < v280 << 56)
        {
LABEL_128:
          v282 = 0;
          goto LABEL_156;
        }
      }
      LODWORD(v280) = *(_DWORD *)(a3 + 8) - v280;
      v282 = 16;
      v278 = v281;
LABEL_156:
      v344 = vpx_norm[v280];
      v345 = (_DWORD)v280 << v344;
      v346 = v278 << v344;
      *(_QWORD *)a3 = v346;
      v347 = v279 - v344;
      *(_DWORD *)(a3 + 8) = (_DWORD)v280 << v344;
      *(_DWORD *)(a3 + 12) = v279 - v344;
      if ((int)(v279 - v344) < 0)
      {
        v351 = *(unint64_t **)(a3 + 24);
        v352 = *(_QWORD *)(a3 + 16) - (_QWORD)v351;
        v353 = *(void (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(a3 + 32);
        if (v353)
        {
          if (v352 >= 9)
            v354 = 9;
          else
            v354 = *(_QWORD *)(a3 + 16) - (_QWORD)v351;
          v355 = result;
          v351 = v555;
          v353(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 24), v555, v354);
          result = v355;
          v5.i64[0] = 0x7F0000007FLL;
          v5.i64[1] = 0x7F0000007FLL;
          v4.i64[0] = 0x800000008;
          v4.i64[1] = 0x800000008;
        }
        v356 = 8 * v352;
        v357 = 48 - v347;
        if (8 * v352 < 0x41)
        {
          v360 = 56 - v356 - v347;
          if (v360 >= 0)
            v347 += 0x40000000;
          if (v356)
            v361 = 1;
          else
            v361 = v360 <= -1;
          v362 = v360 & ~(v360 >> 31);
          if (!v361 || v357 < v362)
          {
            v359 = v351;
          }
          else
          {
            v364 = v344 - v279 + 40;
            if (v364 >= v362 - 1)
              v364 = v362 - 1;
            v365 = v344 - v279 - v364 + 47;
            v359 = v351;
            v366 = v357;
            if (v365 < 0x78)
              goto LABEL_255;
            v367 = (v365 >> 3) + 1;
            v368 = (int8x16_t)v346;
            v369 = 0uLL;
            v370 = (int32x4_t)v347;
            v371 = vdupq_n_s32(v357);
            v372 = vaddq_s32(v371, (int32x4_t)xmmword_208F3A6C0);
            v359 = (unint64_t *)((char *)v351 + (v367 & 0x3FFFFFF0));
            v373 = vaddq_s32(v371, (int32x4_t)xmmword_208F3A6D0);
            v366 = v357 - 8 * (v367 & 0x3FFFFFF0);
            v374 = vaddq_s32(v371, (int32x4_t)xmmword_208F3A6A0);
            v375 = vaddq_s32(v371, (int32x4_t)xmmword_208F3A6B0);
            v376 = v367 & 0x3FFFFFF0;
            v377 = (uint8x16_t *)v351;
            v378 = 0uLL;
            v379 = 0uLL;
            v380 = 0uLL;
            v381 = 0uLL;
            v382 = 0uLL;
            v383 = 0uLL;
            v384 = 0uLL;
            v385 = 0uLL;
            v386 = 0uLL;
            do
            {
              v387 = *v377++;
              v388 = vmovl_high_u8(v387);
              v389 = vmovl_high_u16(v388);
              v390.i64[0] = v389.u32[0];
              v390.i64[1] = v389.u32[1];
              v391 = v390;
              v392 = vmovl_u16(*(uint16x4_t *)v388.i8);
              v390.i64[0] = v392.u32[2];
              v390.i64[1] = v392.u32[3];
              v393 = v390;
              v394 = vmovl_u8(*(uint8x8_t *)v387.i8);
              v395 = vmovl_high_u16(v394);
              v390.i64[0] = v395.u32[2];
              v390.i64[1] = v395.u32[3];
              v396 = v390;
              v390.i64[0] = v389.u32[2];
              v390.i64[1] = v389.u32[3];
              v397 = v390;
              v390.i64[0] = v392.u32[0];
              v390.i64[1] = v392.u32[1];
              v398 = v390;
              v390.i64[0] = v395.u32[0];
              v390.i64[1] = v395.u32[1];
              v399 = v390;
              v400 = vmovl_u16(*(uint16x4_t *)v394.i8);
              v390.i64[0] = v400.u32[2];
              v390.i64[1] = v400.u32[3];
              v401 = v390;
              v390.i64[0] = v400.u32[0];
              v390.i64[1] = v400.u32[1];
              v402 = v390;
              v390.i64[0] = v375.u32[0];
              v390.i64[1] = v375.u32[1];
              v403 = (int8x16_t)vshlq_u64(v402, v390);
              v390.i64[0] = v375.u32[2];
              v390.i64[1] = v375.u32[3];
              v404 = (int8x16_t)vshlq_u64(v401, v390);
              v390.i64[0] = v374.u32[0];
              v390.i64[1] = v374.u32[1];
              v405 = (int8x16_t)vshlq_u64(v399, v390);
              v390.i64[0] = v373.u32[0];
              v390.i64[1] = v373.u32[1];
              v406 = (int8x16_t)vshlq_u64(v398, v390);
              v390.i64[0] = v372.u32[2];
              v390.i64[1] = v372.u32[3];
              v407 = (int8x16_t)vshlq_u64(v397, v390);
              v390.i64[0] = v374.u32[2];
              v390.i64[1] = v374.u32[3];
              v408 = (int8x16_t)vshlq_u64(v396, v390);
              v390.i64[0] = v373.u32[2];
              v390.i64[1] = v373.u32[3];
              v409 = (int8x16_t)vshlq_u64(v393, v390);
              v390.i64[0] = v372.u32[0];
              v390.i64[1] = v372.u32[1];
              v382 = vorrq_s8((int8x16_t)vshlq_u64(v391, v390), v382);
              v381 = vorrq_s8(v409, v381);
              v379 = vorrq_s8(v408, v379);
              v383 = vorrq_s8(v407, v383);
              v380 = vorrq_s8(v406, v380);
              v378 = vorrq_s8(v405, v378);
              v369 = vorrq_s8(v404, v369);
              v368 = vorrq_s8(v403, v368);
              v370 = vaddq_s32(v370, v4);
              v384 = vaddq_s32(v384, v4);
              v385 = vaddq_s32(v385, v4);
              v386 = vaddq_s32(v386, v4);
              v375 = vaddq_s32(v375, v5);
              v374 = vaddq_s32(v374, v5);
              v373 = vaddq_s32(v373, v5);
              v372 = vaddq_s32(v372, v5);
              v376 -= 16;
            }
            while (v376);
            v347 = vaddvq_s32(vaddq_s32(vaddq_s32(v370, v385), vaddq_s32(v384, v386)));
            v410 = vorrq_s8(vorrq_s8(vorrq_s8(v368, v380), vorrq_s8(v378, v382)), vorrq_s8(vorrq_s8(v369, v381), vorrq_s8(v379, v383)));
            v346 = (unint64_t)vorr_s8(*(int8x8_t *)v410.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v410, v410, 8uLL));
            if ((v367 & 0x3FFFFFF0) != v367)
            {
LABEL_255:
              do
              {
                v347 += 8;
                v411 = *(unsigned __int8 *)v359;
                v359 = (unint64_t *)((char *)v359 + 1);
                v346 |= (unint64_t)v411 << v366;
                v366 -= 8;
              }
              while (v366 >= v362);
            }
          }
        }
        else
        {
          v358 = (v357 & 0xFFFFFFF8) + 8;
          v347 += v358;
          v359 = (unint64_t *)((char *)v351 + (v358 >> 3));
          v346 = (bswap64(*v351) >> (56 - (v357 & 0xF8u)) << (v357 & 7)) | *(_QWORD *)a3;
        }
        *(_QWORD *)(a3 + 24) += (char *)v359 - (char *)v351;
        v348 = ((v345 << 7) + 128) >> 8;
        v349 = v346 - (v348 << 56);
        if (v346 < v348 << 56)
          goto LABEL_158;
      }
      else
      {
        v348 = ((v345 << 7) + 128) >> 8;
        v349 = v346 - (v348 << 56);
        if (v346 < v348 << 56)
        {
LABEL_158:
          v350 = 0;
          goto LABEL_186;
        }
      }
      LODWORD(v348) = *(_DWORD *)(a3 + 8) - v348;
      v350 = 8;
      v346 = v349;
LABEL_186:
      v412 = vpx_norm[v348];
      v413 = (_DWORD)v348 << v412;
      v414 = v346 << v412;
      *(_QWORD *)a3 = v346 << v412;
      v415 = v347 - v412;
      *(_DWORD *)(a3 + 8) = (_DWORD)v348 << v412;
      *(_DWORD *)(a3 + 12) = v347 - v412;
      if ((int)(v347 - v412) < 0)
      {
        v419 = *(unint64_t **)(a3 + 24);
        v420 = *(_QWORD *)(a3 + 16) - (_QWORD)v419;
        v421 = *(void (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(a3 + 32);
        if (v421)
        {
          v549 = v350;
          if (v420 >= 9)
            v422 = 9;
          else
            v422 = *(_QWORD *)(a3 + 16) - (_QWORD)v419;
          v423 = result;
          v419 = v555;
          v421(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 24), v555, v422);
          v350 = v549;
          result = v423;
          v5.i64[0] = 0x7F0000007FLL;
          v5.i64[1] = 0x7F0000007FLL;
          v4.i64[0] = 0x800000008;
          v4.i64[1] = 0x800000008;
        }
        v424 = 8 * v420;
        v425 = 48 - v415;
        if (8 * v420 < 0x41)
        {
          v428 = 56 - v424 - v415;
          if (v428 >= 0)
            v415 += 0x40000000;
          if (v424)
            v429 = 1;
          else
            v429 = v428 <= -1;
          v430 = v428 & ~(v428 >> 31);
          if (!v429 || v425 < v430)
          {
            v427 = v419;
          }
          else
          {
            v432 = v412 - v347 + 40;
            if (v432 >= v430 - 1)
              v432 = v430 - 1;
            v433 = v412 - v347 - v432 + 47;
            v427 = v419;
            v434 = v425;
            if (v433 < 0x78)
              goto LABEL_256;
            v435 = (v433 >> 3) + 1;
            v436 = (int8x16_t)v414;
            v437 = 0uLL;
            v438 = (int32x4_t)v415;
            v439 = vdupq_n_s32(v425);
            v440 = vaddq_s32(v439, (int32x4_t)xmmword_208F3A6C0);
            v427 = (unint64_t *)((char *)v419 + (v435 & 0x3FFFFFF0));
            v441 = vaddq_s32(v439, (int32x4_t)xmmword_208F3A6D0);
            v434 = v425 - 8 * (v435 & 0x3FFFFFF0);
            v442 = vaddq_s32(v439, (int32x4_t)xmmword_208F3A6A0);
            v443 = vaddq_s32(v439, (int32x4_t)xmmword_208F3A6B0);
            v444 = v435 & 0x3FFFFFF0;
            v445 = (uint8x16_t *)v419;
            v446 = 0uLL;
            v447 = 0uLL;
            v448 = 0uLL;
            v449 = 0uLL;
            v450 = 0uLL;
            v451 = 0uLL;
            v452 = 0uLL;
            v453 = 0uLL;
            v454 = 0uLL;
            do
            {
              v455 = *v445++;
              v456 = vmovl_high_u8(v455);
              v457 = vmovl_high_u16(v456);
              v458.i64[0] = v457.u32[0];
              v458.i64[1] = v457.u32[1];
              v459 = v458;
              v460 = vmovl_u16(*(uint16x4_t *)v456.i8);
              v458.i64[0] = v460.u32[2];
              v458.i64[1] = v460.u32[3];
              v461 = v458;
              v462 = vmovl_u8(*(uint8x8_t *)v455.i8);
              v463 = vmovl_high_u16(v462);
              v458.i64[0] = v463.u32[2];
              v458.i64[1] = v463.u32[3];
              v464 = v458;
              v458.i64[0] = v457.u32[2];
              v458.i64[1] = v457.u32[3];
              v465 = v458;
              v458.i64[0] = v460.u32[0];
              v458.i64[1] = v460.u32[1];
              v466 = v458;
              v458.i64[0] = v463.u32[0];
              v458.i64[1] = v463.u32[1];
              v467 = v458;
              v468 = vmovl_u16(*(uint16x4_t *)v462.i8);
              v458.i64[0] = v468.u32[2];
              v458.i64[1] = v468.u32[3];
              v469 = v458;
              v458.i64[0] = v468.u32[0];
              v458.i64[1] = v468.u32[1];
              v470 = v458;
              v458.i64[0] = v443.u32[0];
              v458.i64[1] = v443.u32[1];
              v471 = (int8x16_t)vshlq_u64(v470, v458);
              v458.i64[0] = v443.u32[2];
              v458.i64[1] = v443.u32[3];
              v472 = (int8x16_t)vshlq_u64(v469, v458);
              v458.i64[0] = v442.u32[0];
              v458.i64[1] = v442.u32[1];
              v473 = (int8x16_t)vshlq_u64(v467, v458);
              v458.i64[0] = v441.u32[0];
              v458.i64[1] = v441.u32[1];
              v474 = (int8x16_t)vshlq_u64(v466, v458);
              v458.i64[0] = v440.u32[2];
              v458.i64[1] = v440.u32[3];
              v475 = (int8x16_t)vshlq_u64(v465, v458);
              v458.i64[0] = v442.u32[2];
              v458.i64[1] = v442.u32[3];
              v476 = (int8x16_t)vshlq_u64(v464, v458);
              v458.i64[0] = v441.u32[2];
              v458.i64[1] = v441.u32[3];
              v477 = (int8x16_t)vshlq_u64(v461, v458);
              v458.i64[0] = v440.u32[0];
              v458.i64[1] = v440.u32[1];
              v450 = vorrq_s8((int8x16_t)vshlq_u64(v459, v458), v450);
              v449 = vorrq_s8(v477, v449);
              v447 = vorrq_s8(v476, v447);
              v451 = vorrq_s8(v475, v451);
              v448 = vorrq_s8(v474, v448);
              v446 = vorrq_s8(v473, v446);
              v437 = vorrq_s8(v472, v437);
              v436 = vorrq_s8(v471, v436);
              v438 = vaddq_s32(v438, v4);
              v452 = vaddq_s32(v452, v4);
              v453 = vaddq_s32(v453, v4);
              v454 = vaddq_s32(v454, v4);
              v443 = vaddq_s32(v443, v5);
              v442 = vaddq_s32(v442, v5);
              v441 = vaddq_s32(v441, v5);
              v440 = vaddq_s32(v440, v5);
              v444 -= 16;
            }
            while (v444);
            v415 = vaddvq_s32(vaddq_s32(vaddq_s32(v438, v453), vaddq_s32(v452, v454)));
            v478 = vorrq_s8(vorrq_s8(vorrq_s8(v436, v448), vorrq_s8(v446, v450)), vorrq_s8(vorrq_s8(v437, v449), vorrq_s8(v447, v451)));
            v414 = (unint64_t)vorr_s8(*(int8x8_t *)v478.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v478, v478, 8uLL));
            if ((v435 & 0x3FFFFFF0) != v435)
            {
LABEL_256:
              do
              {
                v415 += 8;
                v479 = *(unsigned __int8 *)v427;
                v427 = (unint64_t *)((char *)v427 + 1);
                v414 |= (unint64_t)v479 << v434;
                v434 -= 8;
              }
              while (v434 >= v430);
            }
          }
        }
        else
        {
          v426 = (v425 & 0xFFFFFFF8) + 8;
          v415 += v426;
          v427 = (unint64_t *)((char *)v419 + (v426 >> 3));
          v414 = (bswap64(*v419) >> (56 - (v425 & 0xF8u)) << (v425 & 7)) | *(_QWORD *)a3;
        }
        *(_QWORD *)(a3 + 24) += (char *)v427 - (char *)v419;
        v416 = ((v413 << 7) + 128) >> 8;
        v417 = v414 - (v416 << 56);
        if (v414 < v416 << 56)
          goto LABEL_188;
      }
      else
      {
        v416 = ((v413 << 7) + 128) >> 8;
        v417 = v414 - (v416 << 56);
        if (v414 < v416 << 56)
        {
LABEL_188:
          v418 = 0;
          goto LABEL_216;
        }
      }
      LODWORD(v416) = *(_DWORD *)(a3 + 8) - v416;
      v418 = 4;
      v414 = v417;
LABEL_216:
      v480 = vpx_norm[v416];
      v481 = (_DWORD)v416 << v480;
      v8 = v414 << v480;
      *(_QWORD *)a3 = v8;
      v482 = v415 - v480;
      *(_DWORD *)(a3 + 8) = (_DWORD)v416 << v480;
      *(_DWORD *)(a3 + 12) = v415 - v480;
      if ((int)(v415 - v480) >= 0)
      {
        v484 = v552;
        v483 = v553;
        v6 = ((v481 << 7) + 128) >> 8;
        v485 = v8 - (v6 << 56);
        if (v8 < v6 << 56)
          goto LABEL_239;
        goto LABEL_2;
      }
      v486 = *(unint64_t **)(a3 + 24);
      v487 = *(_QWORD *)(a3 + 16) - (_QWORD)v486;
      v488 = *(void (**)(_QWORD, _QWORD, unint64_t *, uint64_t))(a3 + 32);
      if (v488)
      {
        v550 = v350;
        if (v487 >= 9)
          v489 = 9;
        else
          v489 = *(_QWORD *)(a3 + 16) - (_QWORD)v486;
        v548 = result;
        v486 = v555;
        v490 = v282;
        v491 = v481;
        v488(*(_QWORD *)(a3 + 40), *(_QWORD *)(a3 + 24), v555, v489);
        v481 = v491;
        v350 = v550;
        v282 = v490;
        result = v548;
        v5.i64[0] = 0x7F0000007FLL;
        v5.i64[1] = 0x7F0000007FLL;
        v4.i64[0] = 0x800000008;
        v4.i64[1] = 0x800000008;
      }
      v492 = 8 * v487;
      v493 = 48 - v482;
      if (8 * v487 < 0x41)
      {
        v496 = 56 - v492 - v482;
        if (v496 >= 0)
          v482 += 0x40000000;
        if (v492)
          v497 = 1;
        else
          v497 = v496 <= -1;
        v498 = v496 & ~(v496 >> 31);
        if (v497 && v493 >= v498)
        {
          v500 = v480 - v415 + 40;
          if (v500 >= v498 - 1)
            v500 = v498 - 1;
          v501 = v480 - v415 - v500 + 47;
          v495 = v486;
          v502 = v493;
          v484 = v552;
          v483 = v553;
          if (v501 < 0x78)
            goto LABEL_257;
          v503 = (v501 >> 3) + 1;
          v504 = (int8x16_t)v8;
          v505 = 0uLL;
          v506 = (int32x4_t)v482;
          v507 = vdupq_n_s32(v493);
          v508 = vaddq_s32(v507, (int32x4_t)xmmword_208F3A6C0);
          v495 = (unint64_t *)((char *)v486 + (v503 & 0x3FFFFFF0));
          v509 = vaddq_s32(v507, (int32x4_t)xmmword_208F3A6D0);
          v502 = v493 - 8 * (v503 & 0x3FFFFFF0);
          v510 = vaddq_s32(v507, (int32x4_t)xmmword_208F3A6A0);
          v511 = vaddq_s32(v507, (int32x4_t)xmmword_208F3A6B0);
          v512 = v503 & 0x3FFFFFF0;
          v513 = (uint8x16_t *)v486;
          v514 = 0uLL;
          v515 = 0uLL;
          v516 = 0uLL;
          v517 = 0uLL;
          v518 = 0uLL;
          v519 = 0uLL;
          v520 = 0uLL;
          v521 = 0uLL;
          v522 = 0uLL;
          do
          {
            v523 = *v513++;
            v524 = vmovl_high_u8(v523);
            v525 = vmovl_high_u16(v524);
            v526.i64[0] = v525.u32[0];
            v526.i64[1] = v525.u32[1];
            v527 = v526;
            v528 = vmovl_u16(*(uint16x4_t *)v524.i8);
            v526.i64[0] = v528.u32[2];
            v526.i64[1] = v528.u32[3];
            v529 = v526;
            v530 = vmovl_u8(*(uint8x8_t *)v523.i8);
            v531 = vmovl_high_u16(v530);
            v526.i64[0] = v531.u32[2];
            v526.i64[1] = v531.u32[3];
            v532 = v526;
            v526.i64[0] = v525.u32[2];
            v526.i64[1] = v525.u32[3];
            v533 = v526;
            v526.i64[0] = v528.u32[0];
            v526.i64[1] = v528.u32[1];
            v534 = v526;
            v526.i64[0] = v531.u32[0];
            v526.i64[1] = v531.u32[1];
            v535 = v526;
            v536 = vmovl_u16(*(uint16x4_t *)v530.i8);
            v526.i64[0] = v536.u32[2];
            v526.i64[1] = v536.u32[3];
            v537 = v526;
            v526.i64[0] = v536.u32[0];
            v526.i64[1] = v536.u32[1];
            v538 = v526;
            v526.i64[0] = v511.u32[0];
            v526.i64[1] = v511.u32[1];
            v539 = (int8x16_t)vshlq_u64(v538, v526);
            v526.i64[0] = v511.u32[2];
            v526.i64[1] = v511.u32[3];
            v540 = (int8x16_t)vshlq_u64(v537, v526);
            v526.i64[0] = v510.u32[0];
            v526.i64[1] = v510.u32[1];
            v541 = (int8x16_t)vshlq_u64(v535, v526);
            v526.i64[0] = v509.u32[0];
            v526.i64[1] = v509.u32[1];
            v542 = (int8x16_t)vshlq_u64(v534, v526);
            v526.i64[0] = v508.u32[2];
            v526.i64[1] = v508.u32[3];
            v543 = (int8x16_t)vshlq_u64(v533, v526);
            v526.i64[0] = v510.u32[2];
            v526.i64[1] = v510.u32[3];
            v544 = (int8x16_t)vshlq_u64(v532, v526);
            v526.i64[0] = v509.u32[2];
            v526.i64[1] = v509.u32[3];
            v545 = (int8x16_t)vshlq_u64(v529, v526);
            v526.i64[0] = v508.u32[0];
            v526.i64[1] = v508.u32[1];
            v518 = vorrq_s8((int8x16_t)vshlq_u64(v527, v526), v518);
            v517 = vorrq_s8(v545, v517);
            v515 = vorrq_s8(v544, v515);
            v519 = vorrq_s8(v543, v519);
            v516 = vorrq_s8(v542, v516);
            v514 = vorrq_s8(v541, v514);
            v505 = vorrq_s8(v540, v505);
            v504 = vorrq_s8(v539, v504);
            v506 = vaddq_s32(v506, v4);
            v520 = vaddq_s32(v520, v4);
            v521 = vaddq_s32(v521, v4);
            v522 = vaddq_s32(v522, v4);
            v511 = vaddq_s32(v511, v5);
            v510 = vaddq_s32(v510, v5);
            v509 = vaddq_s32(v509, v5);
            v508 = vaddq_s32(v508, v5);
            v512 -= 16;
          }
          while (v512);
          v482 = vaddvq_s32(vaddq_s32(vaddq_s32(v506, v521), vaddq_s32(v520, v522)));
          v546 = vorrq_s8(vorrq_s8(vorrq_s8(v504, v516), vorrq_s8(v514, v518)), vorrq_s8(vorrq_s8(v505, v517), vorrq_s8(v515, v519)));
          v8 = (unint64_t)vorr_s8(*(int8x8_t *)v546.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v546, v546, 8uLL));
          if ((v503 & 0x3FFFFFF0) != v503)
          {
LABEL_257:
            do
            {
              v482 += 8;
              v547 = *(unsigned __int8 *)v495;
              v495 = (unint64_t *)((char *)v495 + 1);
              v8 |= (unint64_t)v547 << v502;
              v502 -= 8;
            }
            while (v502 >= v498);
          }
LABEL_238:
          *(_QWORD *)(a3 + 24) += (char *)v495 - (char *)v486;
          v6 = ((v481 << 7) + 128) >> 8;
          v485 = v8 - (v6 << 56);
          if (v8 < v6 << 56)
          {
LABEL_239:
            v7 = 0;
            goto LABEL_3;
          }
LABEL_2:
          LODWORD(v6) = *(_DWORD *)(a3 + 8) - v6;
          v7 = 2;
          v8 = v485;
LABEL_3:
          v9 = vpx_norm[v6];
          *(_QWORD *)a3 = v8 << v9;
          *(_DWORD *)(a3 + 8) = (_DWORD)v6 << v9;
          *(_DWORD *)(a3 + 12) = v482 - v9;
          *(_BYTE *)(v551 + v556) = v483 | v484 | result | v282 | v350 | v418 | v7;
          goto LABEL_4;
        }
        v495 = v486;
      }
      else
      {
        v494 = (v493 & 0xFFFFFFF8) + 8;
        v482 += v494;
        v495 = (unint64_t *)((char *)v486 + (v494 >> 3));
        v8 = (bswap64(*v486) >> (56 - (v493 & 0xF8u)) << (v493 & 7)) | *(_QWORD *)a3;
      }
      v484 = v552;
      v483 = v553;
      goto LABEL_238;
    }
LABEL_4:
    ++v556;
  }
  while (v556 != v554);
  return result;
}

void init_mt(uint64_t a1)
{
  _DWORD *v2;
  int v3;
  int v4;
  size_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t i;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *__attribute__((__org_typedef(jmp_buf))) v15;

  v2 = (_DWORD *)(a1 + 18900);
  v14 = *(int *)(a1 + 1976);
  v15 = (int *)(a1 + 656);
  if (*(_DWORD *)(a1 + 20568))
    goto LABEL_2;
  v6 = *(unsigned int *)(a1 + 20680);
  v7 = 56 * *(int *)(a1 + 20680) + 23;
  if (v7 <= 0x10000000000 && (v8 = malloc_type_malloc(v7, 0x74AD08B5uLL)) != 0)
  {
    v9 = (_QWORD *)(a1 + 19016);
    v10 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v10 - 8) = v8;
    *(_QWORD *)(a1 + 19016) = v10;
    if (v10)
    {
      if ((int)v6 < 1)
        goto LABEL_2;
      goto LABEL_21;
    }
  }
  else
  {
    v9 = (_QWORD *)(a1 + 19016);
    *(_QWORD *)(a1 + 19016) = 0;
  }
  vpx_internal_error((uint64_t)v15, 2, "Failed to allocate pbi->tile_workers", v14);
  if ((int)v6 < 1)
    goto LABEL_2;
LABEL_21:
  for (i = 0; i != v6; ++i)
  {
    v12 = *v9 + 56 * i;
    ++v2[417];
    g_worker_interface(v12);
    *(_QWORD *)(v12 + 16) = "vpx tile worker";
    if (i < (v6 - 1) && !off_253EA5298((unsigned int *)v12))
    {
      v13 = v2[417];
      do
      {
        ((void (__cdecl *)(std::__fs::filesystem::recursive_directory_iterator *__return_ptr __struct_ptr, std::__fs::filesystem::recursive_directory_iterator *__struct_ptr))off_253EA52B8[0])((std::__fs::filesystem::recursive_directory_iterator *)(v13 - 1), (std::__fs::filesystem::recursive_directory_iterator *)(*v9 + 56 * (v13 - 1)));
        v13 = v2[417] - 1;
        v2[417] = v13;
      }
      while (v13);
      if (*v9)
        free(*(void **)(*v9 - 8));
      *v9 = 0;
      vpx_internal_error((uint64_t)v15, 1, "Tile decoder thread creation failed", v14);
    }
  }
LABEL_2:
  if ((v2[450] || v2[449]) && *(_DWORD *)(a1 + 5384) && !*v2)
  {
    v3 = v2[417];
    v4 = (*(_DWORD *)(a1 + 1968) + 7) >> 3;
    if (!v2[425] || v4 != v2[426] || v2[429] < v3)
    {
      vp9_loop_filter_dealloc((int *)(a1 + 20576));
      vp9_loop_filter_alloc(a1 + 20576, (uint64_t)v15, v4, *(_DWORD *)(a1 + 948), v3);
    }
    memset(*(void **)(a1 + 20592), 255, 4 * v4);
    v2[439] = 0;
    bzero(*(void **)(a1 + 20648), 4 * v4);
    v2[8] = 0;
  }
  v5 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  bzero(*(void **)(a1 + 18920), 6 * v5);
  bzero(*(void **)(a1 + 18912), v5);
  if (*(_DWORD *)(a1 + 5384))
    bzero(*(void **)(a1 + 5416), 160 * *(int *)(a1 + 5424) * (uint64_t)((*(_DWORD *)(a1 + 1968) + 7) >> 3));
}

BOOL row_decode_worker_hook(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  pthread_mutex_t *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  pthread_cond_t *v15;
  pthread_mutex_t *v16;
  int *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned int v26;
  const float *v27;
  int32x2_t v28;
  int32x2_t v29;
  int32x2_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int32x2_t *v41;
  int32x2_t *v42;
  int32x2_t *v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  int32x2_t v48;
  const float *v49;
  int32x2_t v50;
  int32x2_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  _BOOL4 v57;
  int32x2_t *v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  int v71;
  int v72;
  int v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  int v83;
  _QWORD *v84;
  int v85;
  __int32 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  pthread_mutex_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  BOOL v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int32x2_t *v117;
  _DWORD *v118;
  unsigned int *v119;
  _DWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  int v124;
  _QWORD *v125;
  pthread_cond_t *v126;
  pthread_mutex_t *v127;
  __int32 v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int *__attribute__((__org_typedef(jmp_buf))) v133;
  uint64_t v134;
  int v135;
  __int32 v136;
  unsigned int v137;
  int v138;
  int v139;
  uint64_t v140;
  pthread_cond_t *v141;
  int v142;
  int v143;
  __int128 *v144;
  _OWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  pthread_mutex_t *v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v155;
  int v156;

  v2 = a1[1];
  v3 = *(_QWORD *)(*a1 + 20704);
  v4 = *a1 + 18884;
  v5 = *(_DWORD *)(*a1 + 1976);
  v153 = *a1;
  v6 = *(_DWORD *)(*a1 + 1968);
  v151 = *(_DWORD *)(*a1 + 18888);
  v7 = a1[2];
  v156 = 0;
  v155 = 0;
  v8 = (pthread_mutex_t *)(v3 + 128);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 128));
  if (*(_QWORD *)(v3 + 112) < (unint64_t)(*(_QWORD *)(v3 + 104) + 12))
    goto LABEL_2;
  v148 = v153 + 656;
  v149 = (_DWORD *)v4;
  v10 = v3;
  v11 = v5 + 7;
  v12 = v153;
  v13 = (v6 + 7) >> 3;
  v147 = v2;
  v14 = v7;
  v145 = (_OWORD *)(v153 + 2036);
  v144 = (__int128 *)(v153 + 2004);
  v142 = v11 >> 3;
  v143 = v13 - 1;
  v15 = (pthread_cond_t *)(v3 + 192);
  v140 = v2 + 16;
  v150 = (pthread_mutex_t *)(v3 + 128);
  v146 = v14;
  v141 = (pthread_cond_t *)(v3 + 192);
  v152 = v4;
  if (*(_QWORD *)(v3 + 96) < (unint64_t)(*(_QWORD *)(v3 + 104) + 12))
    goto LABEL_11;
  do
  {
LABEL_13:
    v17 = *(int **)(v10 + 104);
    v18 = *v17;
    v136 = v17[1];
    v19 = v17[2];
    *(_QWORD *)(v10 + 104) = v17 + 3;
    pthread_mutex_unlock(v8);
    v137 = v18;
    if (!v19)
    {
      v20 = *(_QWORD *)(v12 + 19024);
      v21 = v20 + 69568 * v136;
      if (!setjmp((int *)(v21 + 69372)))
      {
        v133 = (int *)(v21 + 69280);
        v41 = (int32x2_t *)(v20 + 69568 * v136);
        memcpy(&v41[1666], (const void *)v12, 0x290uLL);
        v42 = 0;
        if (!*v149)
          v42 = v41 + 10;
        v41[1718] = (int32x2_t)v42;
        v41[8671].i32[0] = 1;
        v125 = *(_QWORD **)(v12 + 20704);
        v124 = *(_DWORD *)(v12 + 1976);
        v43 = v41 + 1748;
        bzero(&v41[1748], 0x1000uLL);
        v44 = *(_DWORD *)(v12 + 1968);
        v45 = v149[2];
        v41[1719].i32[0] = v44 & (v44 >> 31);
        v46 = 8 * ((v44 + 7) >> 3 >> v45);
        if (v46 < v44)
          v44 = v46;
        v41[1719].i32[1] = v44;
        v47 = *(_DWORD *)(v12 + 1976);
        v48.i32[0] = v136;
        v48.i32[1] = v136 + 1;
        v49 = (const float *)(v4 + 4);
        v50 = vmul_s32(vdup_n_s32((int)(v47 + 7) >> 3), v48);
        v51 = (int32x2_t)vld1_dup_f32(v49);
        v41[1720] = vmin_s32(vshl_n_s32(vshl_s32(v50, vneg_s32(v51)), 3uLL), vdup_n_s32(v47));
        v138 = v18;
        if (!v18)
        {
          v52 = v153 + 24 * v136;
          v53 = *(unint64_t **)(v52 + 19032);
          v54 = *(_QWORD *)(v52 + 19040);
          v55 = *(void (**)(uint64_t))(v12 + 20664);
          v56 = *(_QWORD *)(v12 + 20672);
          if ((unint64_t)(v54 - 1) >= *a2 - (_QWORD)v53)
            vpx_internal_error((uint64_t)v133, 7, "Truncated packet or corrupt tile length");
          v57 = vpx_reader_init(v20 + 69568 * v136 + 16, v53, v54, v55, v56);
          v12 = v153;
          if (v57)
            vpx_internal_error((uint64_t)v133, 2, "Failed to allocate BOOL decoder %d", 1);
        }
        v58 = v41 + 1666;
        v134 = v20;
        v59 = v20 + 69568 * v136;
        v41[1666] = (int32x2_t)v43;
        *(_QWORD *)(v59 + 13864) = *(_QWORD *)(v12 + 18920);
        v60 = *v144;
        *(_OWORD *)(v59 + 13424) = *(_OWORD *)(v153 + 2020);
        *(_OWORD *)(v59 + 13408) = v60;
        v61 = *(int *)(v12 + 1976);
        v62 = *(_QWORD *)(v12 + 18920);
        *(_QWORD *)(v59 + 13832) = *(_QWORD *)(v12 + 5560);
        *(_QWORD *)(v59 + 13464) = v43;
        *(_QWORD *)(v59 + 13872) = v62 + 2 * ((v61 + 7) & 0x7FFFFFFFFFFFFFF8);
        v63 = *(_OWORD *)(v153 + 2052);
        *(_OWORD *)(v59 + 13544) = *v145;
        *(_OWORD *)(v59 + 13560) = v63;
        v64 = *(int *)(v12 + 1976);
        v65 = *(_QWORD *)(v12 + 18920);
        *(_QWORD *)(v59 + 13832) = *(_QWORD *)(v12 + 5560);
        *(_QWORD *)(v59 + 13600) = v43;
        *(_QWORD *)(v59 + 13880) = v65 + 4 * ((v64 + 7) & 0x3FFFFFFFFFFFFFF8);
        v66 = *(_OWORD *)(v153 + 2052);
        *(_OWORD *)(v59 + 13680) = *v145;
        *(_OWORD *)(v59 + 13696) = v66;
        v67 = *(_QWORD *)(v12 + 5560);
        LODWORD(v65) = *(_DWORD *)(v12 + 1932);
        LODWORD(v62) = *(_DWORD *)(v12 + 1980);
        v68 = *(_QWORD *)(v12 + 18912);
        *(_QWORD *)(v59 + 13832) = v67;
        *(_QWORD *)(v59 + 13936) = v68;
        *(_DWORD *)(v59 + 13768) = v62;
        if ((_DWORD)v65)
        {
          v69 = (void *)(v67 + 126);
          if (*(_BYTE *)(v12 + 1948))
            v69 = &vp9_kf_partition_probs;
        }
        else
        {
          v69 = &vp9_kf_partition_probs;
        }
        v104 = (_DWORD *)&v41[1720] + 1;
        v105 = v20 + 69568 * v136;
        *(_QWORD *)(v105 + 13808) = v69;
        *(_QWORD *)(v59 + 13968) = v133;
        *(_OWORD *)(v105 + 13888) = 0u;
        *(_OWORD *)(v105 + 13904) = 0u;
        *(_OWORD *)(v105 + 13920) = 0u;
        *(_QWORD *)(v105 + 13944) = 0;
        v106 = v153;
        if (v41[1720].i32[0] < v41[1720].i32[1])
        {
          v122 = (_QWORD *)(v59 + 13600);
          v123 = (_QWORD *)(v59 + 13464);
          v107 = (_QWORD *)(v20 + 69568 * v136);
          v121 = v107 + 1747;
          v108 = v107 + 1682;
          v109 = v107 + 1699;
          v110 = v107 + 1716;
          v111 = v41[1720].u32[0];
          do
          {
            v112 = ((v124 + 7) >> 3) * (v138 >> 3) + ((int)v111 >> 3);
            v113 = 4 * (v112 << 8);
            *v108 = v125[1] + v113;
            v114 = 4 * (v112 << 12);
            *v58 = (int32x2_t)(v125[5] + v114);
            *v109 = v125[2] + v113;
            *v123 = v125[6] + v114;
            v115 = v125[4];
            *v110 = v125[3] + v113;
            *v122 = v125[7] + v114;
            *v121 = v115 + 340 * v112;
            v116 = v106;
            v117 = v58;
            v118 = v104;
            process_partition((char *)v41, v106, v137, v111, 0xCu, 4, 1, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))parse_block);
            v106 = v116;
            v104 = v118;
            v58 = v117;
            v111 = (v111 + 8);
          }
          while ((int)v111 < *v118);
        }
        v156 |= *(_DWORD *)(v134 + 69568 * v136 + 13960);
        if (v156)
          vpx_internal_error((uint64_t)v133, 7, "Failed to decode tile data");
        v8 = v150;
        pthread_mutex_lock(v150);
        v4 = v152;
        v12 = v153;
        v14 = v146;
        v15 = v141;
        if (*(_QWORD *)(v10 + 112) >= (unint64_t)(*(_QWORD *)(v10 + 96) + 12))
        {
          v119 = *(unsigned int **)(v10 + 96);
          *v119 = v137;
          v119[1] = v136;
          v119[2] = 1;
          *(_QWORD *)(v10 + 96) += 12;
          pthread_cond_signal(v141);
        }
        pthread_mutex_unlock(v150);
        if (v138 + 8 >= *(_DWORD *)(v153 + 1968))
          goto LABEL_9;
        pthread_mutex_lock(v150);
        if (*(_QWORD *)(v10 + 112) >= (unint64_t)(*(_QWORD *)(v10 + 96) + 12))
        {
          v120 = *(_DWORD **)(v10 + 96);
          *v120 = v138 + 8;
          v120[1] = v136;
          v120[2] = 0;
          *(_QWORD *)(v10 + 96) += 12;
          pthread_cond_signal(v141);
        }
        v16 = v150;
LABEL_8:
        pthread_mutex_unlock(v16);
        goto LABEL_9;
      }
      *(_DWORD *)(v20 + 69568 * v136 + 69368) = 0;
      v156 = 1;
      v22 = v149[1];
      v23 = *(_QWORD *)(v12 + 20704);
LABEL_78:
      v101 = 1 << v22;
      pthread_mutex_lock((pthread_mutex_t *)(v23 + 256));
      v102 = *(_DWORD *)(v23 + 248) + 1;
      *(_DWORD *)(v23 + 248) = v102;
      pthread_mutex_unlock((pthread_mutex_t *)(v23 + 256));
      v103 = v101 == v102;
      v15 = v141;
      v14 = v146;
      if (!v103)
        goto LABEL_9;
      pthread_mutex_lock((pthread_mutex_t *)(v23 + 128));
      *(_DWORD *)(v23 + 120) = 1;
      v15 = v141;
      pthread_cond_broadcast((pthread_cond_t *)(v23 + 192));
      v16 = (pthread_mutex_t *)(v23 + 128);
      goto LABEL_8;
    }
    if (v19 != 1)
    {
      if (v19 == 2)
      {
        *(_DWORD *)(v147 + 424) = v18;
        *(_DWORD *)(v147 + 428) = v18 + 8;
        if (*(_DWORD *)(v12 + 5384))
        {
          if (!v149[4] && v18 < *(_DWORD *)(v12 + 1968))
            thread_loop_filter_rows(*(_QWORD *)v147, *(_QWORD *)(v147 + 8), v140, v18, v18 + 8, *(_DWORD *)(v147 + 432), v14);
        }
      }
      goto LABEL_9;
    }
    if (!v155)
    {
      v70 = malloc_type_malloc(0x10FE7uLL, 0x74AD08B5uLL);
      if (v70)
      {
        *(_QWORD *)((((unint64_t)v70 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v70;
        v155 = ((unint64_t)v70 + 39) & 0xFFFFFFFFFFFFFFE0;
        if (v155)
          goto LABEL_23;
      }
      else
      {
        v155 = 0;
      }
      vpx_internal_error(v148, 2, "Failed to allocate tile_data_recon");
    }
LABEL_23:
    memcpy((void *)(v155 + 13328), (const void *)v12, 0x290uLL);
    v24 = *(_DWORD *)(v12 + 1968);
    v25 = v149[2];
    *(_DWORD *)(v155 + 13752) = v24 & (v24 >> 31);
    if (8 * ((v24 + 7) >> 3 >> v25) < v24)
      v24 = 8 * ((v24 + 7) >> 3 >> v25);
    *(_DWORD *)(v155 + 13756) = v24;
    v26 = *(_DWORD *)(v12 + 1976);
    v27 = (const float *)(v4 + 4);
    v28.i32[0] = v136;
    v28.i32[1] = v136 + 1;
    v29 = vmul_s32(vdup_n_s32((int)(v26 + 7) >> 3), v28);
    v30 = (int32x2_t)vld1_dup_f32(v27);
    *(int32x2_t *)(v155 + 13760) = vmin_s32(vshl_n_s32(vshl_s32(v29, vneg_s32(v30)), 3uLL), vdup_n_s32(v26));
    *(_QWORD *)(v155 + 13328) = v155 + 13984;
    *(_QWORD *)(v155 + 13864) = *(_QWORD *)(v12 + 18920);
    v31 = *v144;
    *(_OWORD *)(v155 + 13424) = *(_OWORD *)(v153 + 2020);
    *(_OWORD *)(v155 + 13408) = v31;
    v32 = *(int *)(v12 + 1976);
    v33 = *(_QWORD *)(v12 + 18920);
    *(_QWORD *)(v155 + 13832) = *(_QWORD *)(v12 + 5560);
    *(_QWORD *)(v155 + 13464) = v155 + 13984;
    *(_QWORD *)(v155 + 13872) = v33 + 2 * ((v32 + 7) & 0x7FFFFFFFFFFFFFF8);
    v34 = *(_OWORD *)(v153 + 2052);
    *(_OWORD *)(v155 + 13544) = *v145;
    *(_OWORD *)(v155 + 13560) = v34;
    v35 = *(int *)(v12 + 1976);
    v36 = *(_QWORD *)(v12 + 18920);
    *(_QWORD *)(v155 + 13832) = *(_QWORD *)(v12 + 5560);
    *(_QWORD *)(v155 + 13600) = v155 + 13984;
    *(_QWORD *)(v155 + 13880) = v36 + 4 * ((v35 + 7) & 0x3FFFFFFFFFFFFFF8);
    v37 = *(_OWORD *)(v153 + 2052);
    *(_OWORD *)(v155 + 13680) = *v145;
    *(_OWORD *)(v155 + 13696) = v37;
    v38 = *(_QWORD *)(v12 + 5560);
    LODWORD(v27) = *(_DWORD *)(v12 + 1932);
    LODWORD(v36) = *(_DWORD *)(v12 + 1980);
    v39 = *(_QWORD *)(v12 + 18912);
    *(_QWORD *)(v155 + 13832) = v38;
    *(_QWORD *)(v155 + 13936) = v39;
    *(_DWORD *)(v155 + 13768) = v36;
    *(_QWORD *)(v155 + 13968) = v148;
    if ((_DWORD)v27)
    {
      v40 = (void *)(v38 + 126);
      if (*(_BYTE *)(v12 + 1948))
        v40 = &vp9_kf_partition_probs;
    }
    else
    {
      v40 = &vp9_kf_partition_probs;
    }
    v135 = v18 >> 3;
    *(_QWORD *)(v155 + 13808) = v40;
    v71 = *(_DWORD *)(v155 + 13760);
    v72 = *(_DWORD *)(v155 + 13764);
    v73 = setjmp((int *)(v155 + 69372));
    v74 = (_DWORD *)(v155 + 69368);
    if (!v73)
    {
      v139 = v18;
      *v74 = 1;
      *(_QWORD *)(v155 + 13968) = v155 + 69280;
      v79 = *(_QWORD *)(v12 + 20704);
      v80 = v149[1];
      v81 = *(_DWORD *)(v12 + 1976);
      v82 = *(unsigned int *)(v155 + 13760);
      v83 = *(_DWORD *)(v155 + 13764);
      *(_OWORD *)(v155 + 13888) = 0u;
      *(_OWORD *)(v155 + 13904) = 0u;
      *(_OWORD *)(v155 + 13920) = 0u;
      *(_QWORD *)(v155 + 13944) = 0;
      v132 = v83;
      if ((int)v82 < v83)
      {
        v84 = (_QWORD *)v79;
        v85 = (v81 + 7) >> 3;
        v130 = v85 * v135;
        v131 = 1 << v80;
        v129 = v85 * (v135 - 1);
        v86 = ((v135 - 1) << v80) + v136;
        v128 = (v135 << v80) + v136;
        v127 = (pthread_mutex_t *)(v79 + 128);
        v126 = (pthread_cond_t *)(v79 + 192);
        do
        {
          v87 = (uint64_t)(int)v82 >> 3;
          if (v139 >= 8)
          {
            v88 = v87 + v129;
            v89 = v84[8];
            v90 = (pthread_mutex_t *)(v84[40] + ((uint64_t)v86 << 6));
            pthread_mutex_lock(v90);
            while (!*(_BYTE *)(v89 + v88))
              pthread_cond_wait((pthread_cond_t *)(v84[41] + 48 * v86), v90);
            pthread_mutex_unlock(v90);
            v12 = v153;
          }
          v91 = v87 + v130;
          v92 = 4 * (int)((_DWORD)v91 << 8);
          *(_QWORD *)(v155 + 13456) = v84[1] + v92;
          v93 = 4 * (int)((_DWORD)v91 << 12);
          *(_QWORD *)(v155 + 13328) = v84[5] + v93;
          *(_QWORD *)(v155 + 13592) = v84[2] + v92;
          *(_QWORD *)(v155 + 13464) = v84[6] + v93;
          v94 = v84[4];
          *(_QWORD *)(v155 + 13728) = v84[3] + v92;
          *(_QWORD *)(v155 + 13600) = v84[7] + v93;
          *(_QWORD *)(v155 + 13976) = v94 + 340 * (_DWORD)v91;
          process_partition((char *)v155, v12, v137, v82, 0xCu, 4, 2, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))recon_block);
          if (*(_DWORD *)(v12 + 5384))
          {
            v95 = v82 + 8;
            v82 = (v82 + 8);
            if (!v149[4] && v95 >= v132)
            {
              pthread_mutex_lock(*(pthread_mutex_t **)(v146 + 48));
              v96 = *(_DWORD *)(v146 + 80);
              pthread_mutex_unlock(*(pthread_mutex_t **)(v146 + 48));
              if (!v96)
              {
                pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(v146 + 56) + ((uint64_t)v135 << 6)));
                v97 = *(_QWORD *)(v146 + 72);
                v98 = *(_DWORD *)(v97 + 4 * v135) + 1;
                *(_DWORD *)(v97 + 4 * v135) = v98;
                pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(v146 + 56) + ((uint64_t)v135 << 6)));
                if (v98 == v131)
                {
                  if (v139 >= 8)
                  {
                    pthread_mutex_lock(v127);
                    if (v84[14] >= (unint64_t)(v84[12] + 12))
                    {
                      v99 = v84[12];
                      *(_QWORD *)v99 = (v139 - 8);
                      *(_DWORD *)(v99 + 8) = 2;
                      v84[12] += 12;
                      pthread_cond_signal(v126);
                    }
                    pthread_mutex_unlock(v127);
                  }
                  if (v143 == v135)
                  {
                    pthread_mutex_lock(v127);
                    if (v84[14] >= (unint64_t)(v84[12] + 12))
                    {
                      v100 = v84[12];
                      *(_QWORD *)v100 = v139;
                      *(_DWORD *)(v100 + 8) = 2;
                      v84[12] += 12;
                      pthread_cond_signal(v126);
                    }
                    pthread_mutex_unlock(v127);
                  }
                }
              }
            }
          }
          else
          {
            v82 = (v82 + 8);
          }
          pthread_mutex_lock((pthread_mutex_t *)(v84[40] + ((uint64_t)v128 << 6)));
          *(_BYTE *)(v84[8] + v91) = 1;
          pthread_cond_signal((pthread_cond_t *)(v84[41] + 48 * v128));
          pthread_mutex_unlock((pthread_mutex_t *)(v84[40] + ((uint64_t)v128 << 6)));
        }
        while ((int)v82 < v132);
      }
      v8 = v150;
      v15 = v141;
      if (v156)
        vpx_internal_error(v155 + 69280, 7, "Failed to decode tile data");
      v4 = v152;
      v14 = v146;
      if (v143 != v135)
        goto LABEL_9;
LABEL_77:
      v22 = v149[1];
      v23 = *(_QWORD *)(v12 + 20704);
      goto LABEL_78;
    }
    *v74 = 0;
    v156 = 1;
    if (v71 < v72)
    {
      v75 = v71;
      v76 = v136 + (v135 << v151);
      do
      {
        v77 = v75;
        v78 = v135 * v142 + (v75 >> 3);
        pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(v10 + 320) + (v76 << 6)));
        *(_BYTE *)(*(_QWORD *)(v10 + 64) + v78) = 1;
        pthread_cond_signal((pthread_cond_t *)(*(_QWORD *)(v10 + 328) + 48 * (v136 + (v135 << v151))));
        pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(v10 + 320) + (v76 << 6)));
        v75 = v77 + 8;
      }
      while (v77 + 8 < v72);
    }
    v4 = v152;
    v12 = v153;
    v8 = v150;
    v14 = v146;
    v15 = v141;
    if (v143 == v135)
      goto LABEL_77;
LABEL_9:
    pthread_mutex_lock(v8);
    if (*(_QWORD *)(v10 + 112) < (unint64_t)(*(_QWORD *)(v10 + 104) + 12))
      goto LABEL_2;
  }
  while (*(_QWORD *)(v10 + 96) >= (unint64_t)(*(_QWORD *)(v10 + 104) + 12));
LABEL_11:
  while (*(_DWORD *)(v10 + 120) != 1)
  {
    pthread_cond_wait(v15, v8);
    if (*(_QWORD *)(v10 + 96) >= (unint64_t)(*(_QWORD *)(v10 + 104) + 12))
      goto LABEL_13;
  }
LABEL_2:
  pthread_mutex_unlock(v8);
  if (v155)
    free(*(void **)(v155 - 8));
  return v156 == 0;
}

uint64_t get_tile_buffers(uint64_t result, unsigned int *a2, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, unsigned int *, unsigned int *, uint64_t);
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *__attribute__((__org_typedef(jmp_buf))) v19;
  uint64_t v20;
  unsigned int v22;

  v6 = (a5 - 1);
  if (a5 >= 1)
  {
    v20 = (a4 - 1);
    if (a4 >= 1)
    {
      v8 = result;
      v9 = 0;
      v19 = (int *)(result + 656);
      v17 = a5;
      v10 = a6 + 8;
      v11 = a4;
      do
      {
        v12 = 0;
        v18 = v10;
        do
        {
          *(_DWORD *)(v10 + 8) = v12;
          v13 = *(uint64_t (**)(uint64_t, unsigned int *, unsigned int *, uint64_t))(v8 + 20664);
          v14 = a3 - (_QWORD)a2;
          v15 = *(_QWORD *)(v8 + 20672);
          if (v9 != v6 || v20 != v12)
          {
            if (v14 <= 3)
              result = vpx_internal_error((uint64_t)v19, 7, "Truncated packet or corrupt tile length");
            if (v13)
            {
              result = v13(v15, a2, &v22, 4);
              v14 = bswap32(v22);
              if (a3 - (uint64_t)++a2 >= v14)
                goto LABEL_6;
            }
            else
            {
              v16 = *a2++;
              v14 = bswap32(v16);
              if (a3 - (uint64_t)a2 >= v14)
                goto LABEL_6;
            }
            result = vpx_internal_error((uint64_t)v19, 7, "Truncated packet or corrupt tile size", v17);
          }
LABEL_6:
          *(_QWORD *)(v10 - 8) = a2;
          *(_QWORD *)v10 = v14;
          a2 = (unsigned int *)((char *)a2 + v14);
          ++v12;
          v10 += 24;
        }
        while (v11 != v12);
        ++v9;
        v10 = v18 + 1536;
      }
      while (v9 != v17);
    }
  }
  return result;
}

char *process_partition(char *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t (*v14)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v19;
  uint64_t v21;
  char *v22;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL4 v46;
  char *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  size_t __len;

  v8 = a5;
  v9 = a4;
  v10 = (a6 - 1);
  __len = (1 << (a6 - 1));
  v11 = *(_DWORD *)(a2 + 1968);
  v12 = *(_DWORD *)(a2 + 1976);
  if (v11 > (int)a3 && v12 > (int)a4)
  {
    v14 = a8;
    v16 = a6;
    v17 = a3;
    v19 = result;
    v51 = (__len >> 1) + a3;
    v52 = (__len >> 1) + a4;
    if ((a7 & 1) != 0)
    {
      v49 = a4;
      v21 = a7;
      v22 = result;
      result = (char *)read_partition((uint64_t)result, a3, a4, (int)((__len >> 1) + a3) < v11, (int)((__len >> 1) + a4) < v12, (int)a6 - 1);
      v16 = a6;
      v17 = a3;
      v8 = a5;
      v19 = v22;
      a7 = v21;
      v14 = a8;
      v9 = v49;
      **((_DWORD **)v19 + 1747) = (_DWORD)result;
    }
    v26 = (unsigned int *)*((_QWORD *)v19 + 1747);
    v27 = *v26;
    *((_QWORD *)v19 + 1747) = v26 + 1;
    v28 = subsize_lookup[13 * v27 + v8];
    if ((_DWORD)v10)
    {
      switch((int)v27)
      {
        case 0:
          v29 = v19;
          v30 = a2;
          v31 = v17;
          v32 = v9;
          v33 = subsize_lookup[13 * v27 + v8];
          v34 = v16;
          goto LABEL_11;
        case 1:
          v45 = v16;
          v50 = v8;
          v48 = v27;
          result = (char *)v14(v19, a2, v17, v9, v28, v16, v10);
          LODWORD(v27) = v48;
          v8 = v50;
          if ((int)v51 >= v11)
            goto LABEL_19;
          v38 = v19;
          v39 = a2;
          v40 = v51;
          v41 = v9;
          v42 = v28;
          v43 = v45;
          v44 = v10;
          break;
        case 2:
          v37 = v16;
          v50 = v8;
          v48 = v27;
          result = (char *)((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v14)(v19, a2, v17, v9, v28, v10);
          LODWORD(v27) = v48;
          v8 = v50;
          if ((int)v52 >= v12)
            goto LABEL_19;
          v38 = v19;
          v39 = a2;
          v40 = v17;
          v41 = v52;
          v42 = v28;
          v43 = v10;
          v44 = v37;
          break;
        case 3:
          v50 = v8;
          v48 = v27;
          process_partition(v19, a2, v17, v9, v28, v10, a7, v14);
          process_partition(v19, a2, v17, v52, v28, v10, a7, v14);
          process_partition(v19, a2, v51, v9, v28, v10, a7, v14);
          result = (char *)process_partition(v19, a2, v51, v52, v28, v10, a7, v14);
          goto LABEL_18;
        default:
          goto LABEL_19;
      }
      result = (char *)v14(v38, v39, v40, v41, v42, v43, v44);
LABEL_18:
      LODWORD(v27) = v48;
      v8 = v50;
    }
    else
    {
      v19[13736] = 1u >> ((v27 & 2) != 0);
      v19[13737] = 1u >> (v27 & 1);
      v29 = v19;
      v30 = a2;
      v31 = v17;
      v32 = v9;
      v33 = v28;
      v34 = 1;
      v16 = 1;
LABEL_11:
      v35 = v8;
      v36 = v27;
      result = (char *)v14(v29, v30, v31, v32, v33, v34, v16);
      LODWORD(v27) = v36;
      v8 = v35;
    }
LABEL_19:
    if ((a7 & 1) != 0)
    {
      v46 = v8 == 3;
      if ((_DWORD)v27 != 3)
        v46 = 1;
      if (v8 >= 3 && v46)
      {
        v47 = &partition_context_lookup[2 * v28];
        memset((void *)(*((_QWORD *)v19 + 1742) + (int)v9), *v47, __len);
        return (char *)memset(&v19[(v17 & 7) + 13944], v47[1], __len);
      }
    }
  }
  return result;
}

uint64_t recon_block(int16x8_t *a1, uint64_t a2, int a3, int a4, unsigned int a5, char a6, char a7)
{
  int v11;
  uint64_t v12;
  char v13;
  int16x8_t *v14;
  int v15;
  char v16;
  int v17;
  char v18;
  __int32 v19;
  unsigned __int8 **v20;
  __int32 v21;
  __int32 v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int32 v33;
  unsigned __int8 *v34;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint8x8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  int *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  int m;
  int v69;
  uint8x8_t *v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int n;
  int v83;
  uint8x8_t *v84;
  int *v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int *v90;
  int i;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int *v100;
  int j;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int *v112;
  int k;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int v122;
  int v123;
  int16x8_t *v124;
  uint64_t i64;

  v11 = *(_DWORD *)(a2 + 1980);
  v12 = *(_QWORD *)(a2 + 2136);
  v13 = a1[833].i32[2];
  v14 = a1 + 840;
  v15 = 2 << (a6 - 1);
  a1[840].i16[0] = v15 >> v13;
  v16 = a1[833].i32[3];
  v17 = 2 << (a7 - 1);
  a1[840].i16[1] = v17 >> v16;
  a1[840].i8[4] = a6 - v13;
  a1[840].i8[5] = a7 - v16;
  v18 = a1[842].i32[0];
  a1[848].i16[4] = v15 >> v18;
  v19 = a1[842].i32[1];
  a1[848].i16[5] = v17 >> v19;
  a1[848].i8[12] = a6 - v18;
  v20 = (unsigned __int8 **)(v12 + 8 * (a4 + v11 * a3));
  v21 = a1[850].i32[2];
  a1[848].i8[13] = a7 - v19;
  v22 = a1[850].i32[3];
  a1[857].i16[0] = v15 >> v21;
  a1[857].i16[1] = v17 >> v22;
  v23 = a1[866].i64[1] + ((2 * a4) >> v13);
  a1[861].i64[0] = (uint64_t)v20;
  a1[857].i8[4] = a6 - v21;
  v24 = 2 * (a3 & 7);
  v124 = v14;
  v14[17].i8[5] = a7 - v22;
  a1[837].i64[0] = v23;
  v25 = a1[867].i64[0] + ((2 * a4) >> v18);
  a1[837].i64[1] = (uint64_t)a1[868].i64 + (v24 >> v16);
  a1[845].i64[1] = v25;
  a1[846].i64[0] = (uint64_t)a1[869].i64 + (v24 >> v19);
  a1[854].i64[0] = a1[867].i64[1] + ((2 * a4) >> v21);
  a1[854].i64[1] = (uint64_t)a1[870].i64 + (v24 >> v22);
  v26 = *(_DWORD *)(a2 + 1968);
  v27 = *(_DWORD *)(a2 + 1976);
  v114 = 1 << (a7 - 1);
  v115 = 1 << (a6 - 1);
  a1[864].i32[0] = -64 * a3;
  a1[864].i32[1] = (v26 - (v114 + a3)) << 6;
  a1[863].i32[2] = -64 * a4;
  a1[863].i32[3] = (v27 - (v115 + a4)) << 6;
  if (!a3)
  {
    a1[862].i64[0] = 0;
    if (a1[860].i32[0] < a4)
      goto LABEL_3;
LABEL_5:
    v28 = 0;
    goto LABEL_6;
  }
  a1[862].i64[0] = (uint64_t)v20[-a1[860].i32[2]];
  if (a1[860].i32[0] >= a4)
    goto LABEL_5;
LABEL_3:
  v28 = (uint64_t)*(v20 - 1);
LABEL_6:
  i64 = (uint64_t)a1[833].i64;
  a1[861].i64[1] = v28;
  v29 = *(_QWORD *)(a2 + 18904) + 224 * *(int *)(a2 + 1600);
  v30 = *(_QWORD *)(v29 + 144);
  v31 = *(_QWORD *)(v29 + 152);
  v32 = *(_QWORD *)(v29 + 160);
  v33 = *(_DWORD *)(v29 + 104);
  LODWORD(v29) = *(_DWORD *)(v29 + 124);
  a1[834].i64[0] = v30 + ((8 * a4) >> a1[833].i32[2]) + v33 * (uint64_t)((8 * a3) >> a1[833].i32[3]);
  a1[834].i32[2] = v33;
  a1[842].i64[1] = v31 + ((8 * a4) >> a1[842].i32[0]) + (int)v29 * (uint64_t)((8 * a3) >> v19);
  a1[843].i32[0] = v29;
  a1[851].i64[0] = v32 + ((8 * a4) >> v21) + (int)v29 * (uint64_t)((8 * a3) >> v22);
  a1[851].i32[2] = v29;
  v34 = *v20;
  if (a5 >= 3 && *(_QWORD *)(a2 + 972) && ss_size_lookup[4 * a5 + 2 * *(int *)(a2 + 972) + *(int *)(a2 + 976)] == 13)
    vpx_internal_error(a1[873].i64[0], 7, "Invalid block size.");
  v117 = a3;
  v118 = a4;
  v116 = a2;
  if ((char)v34[8] > 0)
  {
    dec_build_inter_predictors_sb(a1, a2, i64, a3, a4);
    if (v34[3])
      return vp9_build_mask(v116 + 656, v34, v117, v118, v115, v114);
    v41 = a1[863].i32[3];
    if (v41 < 0)
    {
      v42 = v124->u16[1];
      v43 = (v41 >> (a1[833].i32[2] + 5)) + v124->u16[0];
      v44 = a1[864].i32[1];
      if ((v44 & 0x80000000) == 0)
        goto LABEL_18;
    }
    else
    {
      v42 = v124->u16[1];
      v43 = v124->u16[0];
      v44 = a1[864].i32[1];
      if ((v44 & 0x80000000) == 0)
      {
LABEL_18:
        v45 = 0;
        goto LABEL_61;
      }
    }
    v45 = v44 >> (a1[833].i32[3] + 5);
LABEL_61:
    v86 = v34[2];
    v87 = v45 + v42;
    a1[862].i32[2] = v43 & (v41 >> 31);
    a1[862].i32[3] = (v45 + v42) & (v44 >> 31);
    if (v45 + v42 >= 1 && v43 >= 1)
    {
      v88 = 0;
      v89 = 1 << v86;
      v90 = (int *)a1[841].i64[0];
      do
      {
        for (i = 0; i < v43; i += v89)
        {
          if (*v90 >= 1)
          {
            inverse_transform_block_inter(i64, 0, v86, (uint8x8_t *)(a1[834].i64[0] + 4 * (i + v88 * a1[834].i32[2])), a1[834].i32[2], *v90);
            v90 = (int *)a1[841].i64[0];
          }
          a1[833].i64[0] += 4 * (16 << (2 * v86));
          a1[841].i64[0] = (uint64_t)++v90;
        }
        v88 += v89;
      }
      while (v88 < v87);
      v41 = a1[863].i32[3];
      v44 = a1[864].i32[1];
    }
    v92 = *v34;
    v93 = a1[842].i32[0];
    v94 = a1[842].i32[1];
    v95 = uv_txsize_lookup[16 * v92 + 4 * v34[2] + 2 * v93 + v94];
    v96 = ((v41 >> 31) & (v41 >> (v93 + 5))) + v124[8].u16[4];
    v97 = ((v44 >> 31) & (v44 >> (v94 + 5))) + v124[8].u16[5];
    a1[862].i32[2] = (v41 >> 31) & v96;
    a1[862].i32[3] = (v44 >> 31) & v97;
    if (v97 >= 1 && v96 >= 1)
    {
      v98 = 0;
      v99 = 1 << v95;
      v100 = (int *)a1[849].i64[1];
      do
      {
        for (j = 0; j < v96; j += v99)
        {
          if (*v100 >= 1)
          {
            inverse_transform_block_inter(i64, 1u, v95, (uint8x8_t *)(a1[842].i64[1] + 4 * (j + v98 * a1[843].i32[0])), a1[843].i32[0], *v100);
            v100 = (int *)a1[849].i64[1];
          }
          a1[841].i64[1] += 4 * (16 << (2 * v95));
          a1[849].i64[1] = (uint64_t)++v100;
        }
        v98 += v99;
      }
      while (v98 < v97);
      v92 = *v34;
      v41 = a1[863].i32[3];
      v44 = a1[864].i32[1];
    }
    v102 = a1[850].i32[2];
    v103 = a1[850].i32[3];
    v104 = uv_txsize_lookup[16 * v92 + 4 * v34[2] + 2 * v102 + v103];
    LODWORD(v102) = v41 >> (v102 + 5);
    v105 = v41 >> 31;
    v106 = (v105 & v102) + v124[17].u16[0];
    v107 = v44 >> (v103 + 5);
    v108 = v44 >> 31;
    v109 = (v108 & v107) + v124[17].u16[1];
    a1[862].i32[2] = v105 & v106;
    a1[862].i32[3] = v108 & v109;
    if (v109 >= 1 && v106 >= 1)
    {
      v110 = 0;
      v111 = 1 << v104;
      v112 = (int *)a1[858].i64[0];
      do
      {
        for (k = 0; k < v106; k += v111)
        {
          if (*v112 >= 1)
          {
            inverse_transform_block_inter(i64, 2u, v104, (uint8x8_t *)(a1[851].i64[0] + 4 * (k + v110 * a1[851].i32[2])), a1[851].i32[2], *v112);
            v112 = (int *)a1[858].i64[0];
          }
          a1[850].i64[0] += 4 * (16 << (2 * v104));
          a1[858].i64[0] = (uint64_t)++v112;
        }
        v110 += v111;
      }
      while (v110 < v109);
    }
    return vp9_build_mask(v116 + 656, v34, v117, v118, v115, v114);
  }
  v36 = a1[863].i32[3];
  if (v36 < 0)
  {
    v37 = v124->u16[1];
    v38 = (v36 >> (a1[833].i32[2] + 5)) + v124->u16[0];
    v39 = a1[864].i32[1];
    if ((v39 & 0x80000000) == 0)
      goto LABEL_15;
LABEL_20:
    v40 = v39 >> (a1[833].i32[3] + 5);
    goto LABEL_21;
  }
  v37 = v124->u16[1];
  v38 = v124->u16[0];
  v39 = a1[864].i32[1];
  if (v39 < 0)
    goto LABEL_20;
LABEL_15:
  v40 = 0;
LABEL_21:
  v46 = v34[2];
  v47 = (v40 + v37);
  a1[862].i32[2] = v38 & (v36 >> 31);
  a1[862].i32[3] = v47 & (v39 >> 31);
  v119 = v47;
  if ((int)v47 >= 1 && (int)v38 >= 1)
  {
    v48 = 0;
    v49 = 0;
    v50 = 1 << v46;
    v121 = 12 * v50;
    while (1)
    {
      v51 = 0;
      v120 = v48;
      v52 = 12 * v48 + 20;
      do
      {
        while (1)
        {
          v56 = v38;
          v57 = v34 + 1;
          if (*v34 <= 2u)
            v57 = (unsigned __int8 *)(*(_QWORD *)a1[861].i64[0] + v52);
          v53 = a1[834].i32[2];
          v54 = (uint8x8_t *)(a1[834].i64[0] + 4 * ((int)v51 + (int)v49 * v53));
          v55 = *v57;
          vp9_predict_intra_block(i64, v124->i8[4], v46, v55, (uint64_t)v54, v53, (uint64_t)v54, v53, v51, v49, 0);
          if (!v34[3])
            break;
          v51 += v50;
          v52 += v121;
          v38 = v56;
          if (v51 >= v56)
            goto LABEL_24;
        }
        if (a1[872].i32[1])
        {
          v58 = 0;
          v59 = (int *)a1[841].i64[0];
          v60 = *v59;
          if (*v59 < 1)
            goto LABEL_33;
LABEL_32:
          inverse_transform_block_intra(i64, 0, v58, v46, v54, a1[834].u32[2], v60);
          v59 = (int *)a1[841].i64[0];
          goto LABEL_33;
        }
        v58 = intra_mode_to_tx_type_lookup[v55];
        v59 = (int *)a1[841].i64[0];
        v60 = *v59;
        if (*v59 >= 1)
          goto LABEL_32;
LABEL_33:
        a1[833].i64[0] += 4 * (16 << (2 * v46));
        a1[841].i64[0] = (uint64_t)(v59 + 1);
        v51 += v50;
        v52 += v121;
        v38 = v56;
      }
      while (v51 < v56);
LABEL_24:
      v49 += v50;
      v48 = v120 + 2 * (1 << v46);
      if (v49 >= v119)
      {
        v36 = a1[863].i32[3];
        v39 = a1[864].i32[1];
        break;
      }
    }
  }
  v61 = *v34;
  v62 = a1[842].i32[0];
  v63 = a1[842].i32[1];
  v64 = uv_txsize_lookup[16 * v61 + 4 * v34[2] + 2 * v62 + v63];
  v65 = ((v36 >> 31) & (v36 >> (v62 + 5))) + v124[8].u16[4];
  LODWORD(v63) = ((v39 >> 31) & (v39 >> (v63 + 5))) + v124[8].u16[5];
  a1[862].i32[2] = (v36 >> 31) & v65;
  a1[862].i32[3] = (v39 >> 31) & v63;
  v122 = v63;
  if ((int)v63 >= 1 && v65 >= 1)
  {
    v66 = 0;
    v67 = 1 << v64;
    do
    {
      for (m = 0; m < v65; m += v67)
      {
        v69 = a1[843].i32[0];
        v70 = (uint8x8_t *)(a1[842].i64[1] + 4 * (m + v66 * v69));
        vp9_predict_intra_block(i64, v124[8].i8[12], v64, v34[6], (uint64_t)v70, v69, (uint64_t)v70, v69, m, v66, 1);
        if (!v34[3])
        {
          v71 = (int *)a1[849].i64[1];
          if (*v71 >= 1)
          {
            inverse_transform_block_intra(i64, 1u, 0, v64, v70, a1[843].u32[0], *v71);
            v71 = (int *)a1[849].i64[1];
          }
          a1[841].i64[1] += 4 * (16 << (2 * v64));
          a1[849].i64[1] = (uint64_t)(v71 + 1);
        }
      }
      v66 += v67;
    }
    while (v66 < v122);
    v61 = *v34;
    v36 = a1[863].i32[3];
    v39 = a1[864].i32[1];
  }
  v72 = a1[850].i32[2];
  v73 = a1[850].i32[3];
  v74 = uv_txsize_lookup[16 * v61 + 4 * v34[2] + 2 * v72 + v73];
  LODWORD(v72) = v36 >> (v72 + 5);
  v75 = v36 >> 31;
  v76 = (v75 & v72) + v124[17].u16[0];
  v77 = v39 >> (v73 + 5);
  v78 = v39 >> 31;
  v79 = (v78 & v77) + v124[17].u16[1];
  a1[862].i32[2] = v75 & v76;
  a1[862].i32[3] = v78 & v79;
  v123 = v79;
  if (v79 >= 1 && v76 >= 1)
  {
    v80 = 0;
    v81 = 1 << v74;
    do
    {
      for (n = 0; n < v76; n += v81)
      {
        v83 = a1[851].i32[2];
        v84 = (uint8x8_t *)(a1[851].i64[0] + 4 * (n + v80 * v83));
        vp9_predict_intra_block(i64, v124[17].i8[4], v74, v34[6], (uint64_t)v84, v83, (uint64_t)v84, v83, n, v80, 2);
        if (!v34[3])
        {
          v85 = (int *)a1[858].i64[0];
          if (*v85 >= 1)
          {
            inverse_transform_block_intra(i64, 2u, 0, v74, v84, a1[851].u32[2], *v85);
            v85 = (int *)a1[858].i64[0];
          }
          a1[850].i64[0] += 4 * (16 << (2 * v74));
          a1[858].i64[0] = (uint64_t)(v85 + 1);
        }
      }
      v80 += v81;
    }
    while (v80 < v123);
  }
  return vp9_build_mask(v116 + 656, v34, v117, v118, v115, v114);
}

uint64_t read_partition(uint64_t a1, char a2, int a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void (*v24)(uint64_t, uint64_t, unint64_t *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  signed int v30;
  signed int v31;
  unsigned int v32;
  unint64_t *v33;
  int v34;
  BOOL v35;
  int v36;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t v49;
  uint8x16_t *v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint8x16_t v60;
  uint16x8_t v61;
  uint32x4_t v62;
  uint64x2_t v63;
  uint64x2_t v64;
  uint32x4_t v65;
  uint64x2_t v66;
  uint16x8_t v67;
  uint32x4_t v68;
  uint64x2_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  uint64x2_t v72;
  uint32x4_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  unsigned int v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t result;
  unint64_t *v90;
  unint64_t v91;
  unint64_t v92;
  void (*v93)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v94;
  signed int v95;
  signed int v96;
  unsigned int v97;
  unint64_t *v98;
  unint64_t *v99;
  unint64_t v100;
  unint64_t v101;
  void (*v102)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v103;
  signed int v104;
  signed int v105;
  unsigned int v106;
  unint64_t *v107;
  int v108;
  BOOL v109;
  int v110;
  int v111;
  unsigned int v112;
  int v113;
  int8x16_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int8x16_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  uint64_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x16_t v127;
  uint64_t v128;
  uint8x16_t *v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int32x4_t v133;
  int32x4_t v134;
  int32x4_t v135;
  uint8x16_t v136;
  uint16x8_t v137;
  uint32x4_t v138;
  uint64x2_t v139;
  uint64x2_t v140;
  uint32x4_t v141;
  uint64x2_t v142;
  uint16x8_t v143;
  uint32x4_t v144;
  uint64x2_t v145;
  uint64x2_t v146;
  uint64x2_t v147;
  uint64x2_t v148;
  uint32x4_t v149;
  uint64x2_t v150;
  uint64x2_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t v159;
  unsigned int v160;
  int v161;
  BOOL v162;
  int v163;
  int v164;
  unsigned int v165;
  int v166;
  int8x16_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int8x16_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int32x4_t v173;
  int32x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  uint64_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int8x16_t v180;
  uint64_t v181;
  uint8x16_t *v182;
  int8x16_t v183;
  int8x16_t v184;
  int8x16_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  uint8x16_t v189;
  uint16x8_t v190;
  uint32x4_t v191;
  uint64x2_t v192;
  uint64x2_t v193;
  uint32x4_t v194;
  uint64x2_t v195;
  uint16x8_t v196;
  uint32x4_t v197;
  uint64x2_t v198;
  uint64x2_t v199;
  uint64x2_t v200;
  uint64x2_t v201;
  uint32x4_t v202;
  uint64x2_t v203;
  uint64x2_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  unsigned int v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t *v218;
  int v220;

  v6 = a1;
  v7 = (*(char *)(*(_QWORD *)(a1 + 13936) + a3) >> a6) & 1 | (2
                                                                          * ((*(char *)(a1 + (a2 & 7) + 13944) >> a6) & 1)) | (4 * a6);
  v8 = *(_QWORD *)(a1 + 13808) + v7 + 2 * v7;
  v9 = *(_QWORD *)(a1 + 13744);
  if (a4 && a5)
  {
    v216 = *(_QWORD *)(a1 + 13744);
    v217 = (*(char *)(*(_QWORD *)(a1 + 13936) + a3) >> a6) & 1 | (2
                                                                              * ((*(char *)(a1 + (a2 & 7) + 13944) >> a6) & 1)) | (4 * a6);
    LOBYTE(v10) = 0;
    v11 = *(_DWORD *)(a1 + 24);
    v12 = *(_DWORD *)(a1 + 28);
    v218 = (unint64_t *)(a1 + 64);
    v13 = 256;
    v14 = *(_QWORD *)(a1 + 16);
    v15.i64[0] = 0x800000008;
    v15.i64[1] = 0x800000008;
    v16.i64[0] = 0x7F0000007FLL;
    v16.i64[1] = 0x7F0000007FLL;
    while (1)
    {
      v20 = *(unsigned __int8 *)(v8 + (v10 >> 1));
      if ((v12 & 0x80000000) == 0)
      {
        v17 = (v13 + (v11 - 1) * v20) >> 8;
        v21 = v14 - (v17 << 56);
        if (v14 < v17 << 56)
          goto LABEL_37;
        goto LABEL_4;
      }
      v22 = *(unint64_t **)(v6 + 40);
      v23 = *(_QWORD *)(v6 + 32) - (_QWORD)v22;
      v24 = *(void (**)(uint64_t, uint64_t, unint64_t *, uint64_t))(v6 + 48);
      if (v24)
      {
        v220 = v11;
        if (v23 >= 9)
          v25 = 9;
        else
          v25 = *(_QWORD *)(v6 + 32) - (_QWORD)v22;
        v26 = *(_QWORD *)(v6 + 56);
        v27 = *(_QWORD *)(v6 + 40);
        v22 = v218;
        v28 = v13;
        v24(v26, v27, v218, v25);
        v11 = v220;
        v13 = v28;
        v16.i64[0] = 0x7F0000007FLL;
        v16.i64[1] = 0x7F0000007FLL;
        v15.i64[0] = 0x800000008;
        v15.i64[1] = 0x800000008;
      }
      v29 = 8 * v23;
      v30 = 48 - v12;
      if (8 * v23 >= 0x41)
      {
        v31 = (v30 & 0xFFFFFFF8) + 8;
        v32 = v31 + v12;
        v33 = (unint64_t *)((char *)v22 + (v31 >> 3));
        v6 = a1;
        v14 = (bswap64(*v22) >> (56 - (v30 & 0xF8u)) << (v30 & 7)) | *(_QWORD *)(a1 + 16);
        goto LABEL_36;
      }
      v34 = 56 - v12 - v29;
      if (v34 < 0)
        v32 = v12;
      else
        v32 = v12 + 0x40000000;
      if (v29)
        v35 = 1;
      else
        v35 = v34 <= -1;
      v36 = v34 & ~(v34 >> 31);
      if (!v35 || v30 < v36)
      {
        v33 = v22;
        v6 = a1;
        goto LABEL_36;
      }
      v38 = v36 - 1;
      if (v36 - 1 >= (int)(40 - v12))
        v38 = 40 - v12;
      v39 = 47 - v12 - v38;
      if (v39 < 0x78)
        break;
      v40 = (v39 >> 3) + 1;
      v41 = (int8x16_t)v14;
      v42 = 0uLL;
      v43 = (int32x4_t)v32;
      v44 = vdupq_n_s32(v30);
      v45 = vaddq_s32(v44, (int32x4_t)xmmword_208F3A6C0);
      v33 = (unint64_t *)((char *)v22 + (v40 & 0x3FFFFFF0));
      v46 = vaddq_s32(v44, (int32x4_t)xmmword_208F3A6D0);
      v30 -= 8 * (v40 & 0x3FFFFFF0);
      v47 = vaddq_s32(v44, (int32x4_t)xmmword_208F3A6A0);
      v48 = vaddq_s32(v44, (int32x4_t)xmmword_208F3A6B0);
      v49 = v40 & 0x3FFFFFF0;
      v50 = (uint8x16_t *)v22;
      v51 = 0uLL;
      v52 = 0uLL;
      v53 = 0uLL;
      v54 = 0uLL;
      v55 = 0uLL;
      v56 = 0uLL;
      v57 = 0uLL;
      v58 = 0uLL;
      v59 = 0uLL;
      do
      {
        v60 = *v50++;
        v61 = vmovl_high_u8(v60);
        v62 = vmovl_high_u16(v61);
        v63.i64[0] = v62.u32[0];
        v63.i64[1] = v62.u32[1];
        v64 = v63;
        v65 = vmovl_u16(*(uint16x4_t *)v61.i8);
        v63.i64[0] = v65.u32[2];
        v63.i64[1] = v65.u32[3];
        v66 = v63;
        v67 = vmovl_u8(*(uint8x8_t *)v60.i8);
        v68 = vmovl_high_u16(v67);
        v63.i64[0] = v68.u32[2];
        v63.i64[1] = v68.u32[3];
        v69 = v63;
        v63.i64[0] = v62.u32[2];
        v63.i64[1] = v62.u32[3];
        v70 = v63;
        v63.i64[0] = v65.u32[0];
        v63.i64[1] = v65.u32[1];
        v71 = v63;
        v63.i64[0] = v68.u32[0];
        v63.i64[1] = v68.u32[1];
        v72 = v63;
        v73 = vmovl_u16(*(uint16x4_t *)v67.i8);
        v63.i64[0] = v73.u32[2];
        v63.i64[1] = v73.u32[3];
        v74 = v63;
        v63.i64[0] = v73.u32[0];
        v63.i64[1] = v73.u32[1];
        v75 = v63;
        v63.i64[0] = v48.u32[0];
        v63.i64[1] = v48.u32[1];
        v76 = (int8x16_t)vshlq_u64(v75, v63);
        v63.i64[0] = v48.u32[2];
        v63.i64[1] = v48.u32[3];
        v77 = (int8x16_t)vshlq_u64(v74, v63);
        v63.i64[0] = v47.u32[0];
        v63.i64[1] = v47.u32[1];
        v78 = (int8x16_t)vshlq_u64(v72, v63);
        v63.i64[0] = v46.u32[0];
        v63.i64[1] = v46.u32[1];
        v79 = (int8x16_t)vshlq_u64(v71, v63);
        v63.i64[0] = v45.u32[2];
        v63.i64[1] = v45.u32[3];
        v80 = (int8x16_t)vshlq_u64(v70, v63);
        v63.i64[0] = v47.u32[2];
        v63.i64[1] = v47.u32[3];
        v81 = (int8x16_t)vshlq_u64(v69, v63);
        v63.i64[0] = v46.u32[2];
        v63.i64[1] = v46.u32[3];
        v82 = (int8x16_t)vshlq_u64(v66, v63);
        v63.i64[0] = v45.u32[0];
        v63.i64[1] = v45.u32[1];
        v55 = vorrq_s8((int8x16_t)vshlq_u64(v64, v63), v55);
        v54 = vorrq_s8(v82, v54);
        v52 = vorrq_s8(v81, v52);
        v56 = vorrq_s8(v80, v56);
        v53 = vorrq_s8(v79, v53);
        v51 = vorrq_s8(v78, v51);
        v42 = vorrq_s8(v77, v42);
        v41 = vorrq_s8(v76, v41);
        v43 = vaddq_s32(v43, v15);
        v57 = vaddq_s32(v57, v15);
        v58 = vaddq_s32(v58, v15);
        v59 = vaddq_s32(v59, v15);
        v48 = vaddq_s32(v48, v16);
        v47 = vaddq_s32(v47, v16);
        v46 = vaddq_s32(v46, v16);
        v45 = vaddq_s32(v45, v16);
        v49 -= 16;
      }
      while (v49);
      v32 = vaddvq_s32(vaddq_s32(vaddq_s32(v43, v58), vaddq_s32(v57, v59)));
      v83 = vorrq_s8(vorrq_s8(vorrq_s8(v41, v53), vorrq_s8(v51, v55)), vorrq_s8(vorrq_s8(v42, v54), vorrq_s8(v52, v56)));
      v14 = (unint64_t)vorr_s8(*(int8x8_t *)v83.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v83, v83, 8uLL));
      v6 = a1;
      if ((v40 & 0x3FFFFFF0) != v40)
        goto LABEL_35;
LABEL_36:
      *(_QWORD *)(v6 + 40) += (char *)v33 - (char *)v22;
      v12 = v32;
      v17 = (v13 + (v11 - 1) * v20) >> 8;
      v21 = v14 - (v17 << 56);
      if (v14 < v17 << 56)
      {
LABEL_37:
        v18 = 0;
        goto LABEL_5;
      }
LABEL_4:
      LODWORD(v17) = *(_DWORD *)(v6 + 24) - v17;
      v18 = 1;
      v14 = v21;
LABEL_5:
      v19 = vpx_norm[v17];
      v11 = (_DWORD)v17 << v19;
      v14 <<= v19;
      v12 -= v19;
      *(_QWORD *)(v6 + 16) = v14;
      *(_DWORD *)(v6 + 24) = (_DWORD)v17 << v19;
      *(_DWORD *)(v6 + 28) = v12;
      v10 = vp9_partition_tree[v18 + (unint64_t)v10];
      if (v10 <= 0)
      {
        result = -v10;
        v9 = v216;
        v7 = v217;
        goto LABEL_105;
      }
    }
    v33 = v22;
    v6 = a1;
    do
    {
LABEL_35:
      v32 += 8;
      v84 = *(unsigned __int8 *)v33;
      v33 = (unint64_t *)((char *)v33 + 1);
      v14 |= (unint64_t)v84 << v30;
      v30 -= 8;
    }
    while (v30 >= v36);
    goto LABEL_36;
  }
  if (a4 || !a5)
  {
    result = 3;
    if (!a4 || a5)
      goto LABEL_105;
    v85 = *(_DWORD *)(v6 + 28);
    v86 = ((*(_DWORD *)(v6 + 24) - 1) * *(unsigned __int8 *)(v8 + 2) + 256) >> 8;
    v87 = *(_QWORD *)(v6 + 16);
    if ((v85 & 0x80000000) != 0)
    {
      v99 = *(unint64_t **)(v6 + 40);
      v100 = *(_QWORD *)(v6 + 32) - (_QWORD)v99;
      v101 = 8 * v100;
      v102 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v6 + 48);
      if (v102)
      {
        if (v100 >= 9)
          v103 = 9;
        else
          v103 = *(_QWORD *)(v6 + 32) - (_QWORD)v99;
        v102(*(_QWORD *)(v6 + 56), v99, v6 + 64, v103);
        v99 = (unint64_t *)(v6 + 64);
      }
      v104 = 48 - v85;
      if (v101 < 0x41)
      {
        v161 = 56 - v85 - v101;
        if (v161 < 0)
          v106 = v85;
        else
          v106 = v85 + 0x40000000;
        if (v101)
          v162 = 1;
        else
          v162 = v161 <= -1;
        if (v162 && (v163 = v161 & ~(v161 >> 31), v104 >= v163))
        {
          v164 = v163 - 1;
          if (v163 - 1 >= (int)(40 - v85))
            v164 = 40 - v85;
          v165 = 47 - v85 - v164;
          v107 = v99;
          v166 = 48 - v85;
          if (v165 < 0x78)
            goto LABEL_109;
          v167 = (int8x16_t)v87;
          v168 = (int32x4_t)v106;
          v169 = vdupq_n_s32(v104);
          v170 = 0uLL;
          v171 = vaddq_s32(v169, (int32x4_t)xmmword_208F3A6C0);
          v172 = vaddq_s32(v169, (int32x4_t)xmmword_208F3A6D0);
          v173 = vaddq_s32(v169, (int32x4_t)xmmword_208F3A6A0);
          v174 = vaddq_s32(v169, (int32x4_t)xmmword_208F3A6B0);
          v175.i64[0] = 0x800000008;
          v175.i64[1] = 0x800000008;
          v176.i64[0] = 0x7F0000007FLL;
          v176.i64[1] = 0x7F0000007FLL;
          v177 = (v165 >> 3) + 1;
          v178 = 0uLL;
          v179 = 0uLL;
          v180 = 0uLL;
          v107 = (unint64_t *)((char *)v99 + (v177 & 0x3FFFFFF0));
          v166 = v104 - 8 * (v177 & 0x3FFFFFF0);
          v181 = v177 & 0x3FFFFFF0;
          v182 = (uint8x16_t *)v99;
          v183 = 0uLL;
          v184 = 0uLL;
          v185 = 0uLL;
          v186 = 0uLL;
          v187 = 0uLL;
          v188 = 0uLL;
          do
          {
            v189 = *v182++;
            v190 = vmovl_high_u8(v189);
            v191 = vmovl_high_u16(v190);
            v192.i64[0] = v191.u32[0];
            v192.i64[1] = v191.u32[1];
            v193 = v192;
            v194 = vmovl_u16(*(uint16x4_t *)v190.i8);
            v192.i64[0] = v194.u32[2];
            v192.i64[1] = v194.u32[3];
            v195 = v192;
            v196 = vmovl_u8(*(uint8x8_t *)v189.i8);
            v197 = vmovl_high_u16(v196);
            v192.i64[0] = v197.u32[2];
            v192.i64[1] = v197.u32[3];
            v198 = v192;
            v192.i64[0] = v191.u32[2];
            v192.i64[1] = v191.u32[3];
            v199 = v192;
            v192.i64[0] = v194.u32[0];
            v192.i64[1] = v194.u32[1];
            v200 = v192;
            v192.i64[0] = v197.u32[0];
            v192.i64[1] = v197.u32[1];
            v201 = v192;
            v202 = vmovl_u16(*(uint16x4_t *)v196.i8);
            v192.i64[0] = v202.u32[2];
            v192.i64[1] = v202.u32[3];
            v203 = v192;
            v192.i64[0] = v202.u32[0];
            v192.i64[1] = v202.u32[1];
            v204 = v192;
            v192.i64[0] = v174.u32[0];
            v192.i64[1] = v174.u32[1];
            v205 = (int8x16_t)vshlq_u64(v204, v192);
            v192.i64[0] = v174.u32[2];
            v192.i64[1] = v174.u32[3];
            v206 = (int8x16_t)vshlq_u64(v203, v192);
            v192.i64[0] = v173.u32[0];
            v192.i64[1] = v173.u32[1];
            v207 = (int8x16_t)vshlq_u64(v201, v192);
            v192.i64[0] = v172.u32[0];
            v192.i64[1] = v172.u32[1];
            v208 = (int8x16_t)vshlq_u64(v200, v192);
            v192.i64[0] = v171.u32[2];
            v192.i64[1] = v171.u32[3];
            v209 = (int8x16_t)vshlq_u64(v199, v192);
            v192.i64[0] = v173.u32[2];
            v192.i64[1] = v173.u32[3];
            v210 = (int8x16_t)vshlq_u64(v198, v192);
            v192.i64[0] = v172.u32[2];
            v192.i64[1] = v172.u32[3];
            v211 = (int8x16_t)vshlq_u64(v195, v192);
            v192.i64[0] = v171.u32[0];
            v192.i64[1] = v171.u32[1];
            v184 = vorrq_s8((int8x16_t)vshlq_u64(v193, v192), v184);
            v183 = vorrq_s8(v211, v183);
            v179 = vorrq_s8(v210, v179);
            v185 = vorrq_s8(v209, v185);
            v180 = vorrq_s8(v208, v180);
            v178 = vorrq_s8(v207, v178);
            v170 = vorrq_s8(v206, v170);
            v167 = vorrq_s8(v205, v167);
            v168 = vaddq_s32(v168, v175);
            v186 = vaddq_s32(v186, v175);
            v187 = vaddq_s32(v187, v175);
            v188 = vaddq_s32(v188, v175);
            v174 = vaddq_s32(v174, v176);
            v173 = vaddq_s32(v173, v176);
            v172 = vaddq_s32(v172, v176);
            v171 = vaddq_s32(v171, v176);
            v181 -= 16;
          }
          while (v181);
          v106 = vaddvq_s32(vaddq_s32(vaddq_s32(v168, v187), vaddq_s32(v186, v188)));
          v212 = vorrq_s8(vorrq_s8(vorrq_s8(v167, v180), vorrq_s8(v178, v184)), vorrq_s8(vorrq_s8(v170, v183), vorrq_s8(v179, v185)));
          v87 = (unint64_t)vorr_s8(*(int8x8_t *)v212.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v212, v212, 8uLL));
          if ((v177 & 0x3FFFFFF0) != v177)
          {
LABEL_109:
            do
            {
              v106 += 8;
              v213 = *(unsigned __int8 *)v107;
              v107 = (unint64_t *)((char *)v107 + 1);
              v87 |= (unint64_t)v213 << v166;
              v166 -= 8;
            }
            while (v166 >= v163);
          }
        }
        else
        {
          v107 = v99;
        }
      }
      else
      {
        v105 = (v104 & 0xFFFFFFF8) + 8;
        v106 = v105 + v85;
        v107 = (unint64_t *)((char *)v99 + (v105 >> 3));
        v87 = (bswap64(*v99) >> (56 - (v104 & 0xF8u)) << (v104 & 7)) | *(_QWORD *)(v6 + 16);
      }
      *(_QWORD *)(v6 + 40) += (char *)v107 - (char *)v99;
      v85 = v106;
      v88 = v87 - (v86 << 56);
      if (v87 >= v86 << 56)
        goto LABEL_103;
    }
    else
    {
      v88 = v87 - (v86 << 56);
      if (v87 >= v86 << 56)
        goto LABEL_103;
    }
    result = 2;
    goto LABEL_104;
  }
  v85 = *(_DWORD *)(a1 + 28);
  v86 = ((*(_DWORD *)(a1 + 24) - 1) * *(unsigned __int8 *)(v8 + 1) + 256) >> 8;
  v87 = *(_QWORD *)(a1 + 16);
  if ((v85 & 0x80000000) != 0)
  {
    v90 = *(unint64_t **)(a1 + 40);
    v91 = *(_QWORD *)(a1 + 32) - (_QWORD)v90;
    v92 = 8 * v91;
    v93 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
    if (v93)
    {
      if (v91 >= 9)
        v94 = 9;
      else
        v94 = *(_QWORD *)(a1 + 32) - (_QWORD)v90;
      v93(*(_QWORD *)(a1 + 56), v90, a1 + 64, v94);
      v90 = (unint64_t *)(v6 + 64);
    }
    v95 = 48 - v85;
    if (v92 < 0x41)
    {
      v108 = 56 - v85 - v92;
      if (v108 < 0)
        v97 = v85;
      else
        v97 = v85 + 0x40000000;
      if (v92)
        v109 = 1;
      else
        v109 = v108 <= -1;
      if (v109 && (v110 = v108 & ~(v108 >> 31), v95 >= v110))
      {
        v111 = v110 - 1;
        if (v110 - 1 >= (int)(40 - v85))
          v111 = 40 - v85;
        v112 = 47 - v85 - v111;
        v98 = v90;
        v113 = 48 - v85;
        if (v112 < 0x78)
          goto LABEL_110;
        v114 = (int8x16_t)v87;
        v115 = (int32x4_t)v97;
        v116 = vdupq_n_s32(v95);
        v117 = 0uLL;
        v118 = vaddq_s32(v116, (int32x4_t)xmmword_208F3A6C0);
        v119 = vaddq_s32(v116, (int32x4_t)xmmword_208F3A6D0);
        v120 = vaddq_s32(v116, (int32x4_t)xmmword_208F3A6A0);
        v121 = vaddq_s32(v116, (int32x4_t)xmmword_208F3A6B0);
        v122.i64[0] = 0x800000008;
        v122.i64[1] = 0x800000008;
        v123.i64[0] = 0x7F0000007FLL;
        v123.i64[1] = 0x7F0000007FLL;
        v124 = (v112 >> 3) + 1;
        v125 = 0uLL;
        v126 = 0uLL;
        v127 = 0uLL;
        v98 = (unint64_t *)((char *)v90 + (v124 & 0x3FFFFFF0));
        v113 = v95 - 8 * (v124 & 0x3FFFFFF0);
        v128 = v124 & 0x3FFFFFF0;
        v129 = (uint8x16_t *)v90;
        v130 = 0uLL;
        v131 = 0uLL;
        v132 = 0uLL;
        v133 = 0uLL;
        v134 = 0uLL;
        v135 = 0uLL;
        do
        {
          v136 = *v129++;
          v137 = vmovl_high_u8(v136);
          v138 = vmovl_high_u16(v137);
          v139.i64[0] = v138.u32[0];
          v139.i64[1] = v138.u32[1];
          v140 = v139;
          v141 = vmovl_u16(*(uint16x4_t *)v137.i8);
          v139.i64[0] = v141.u32[2];
          v139.i64[1] = v141.u32[3];
          v142 = v139;
          v143 = vmovl_u8(*(uint8x8_t *)v136.i8);
          v144 = vmovl_high_u16(v143);
          v139.i64[0] = v144.u32[2];
          v139.i64[1] = v144.u32[3];
          v145 = v139;
          v139.i64[0] = v138.u32[2];
          v139.i64[1] = v138.u32[3];
          v146 = v139;
          v139.i64[0] = v141.u32[0];
          v139.i64[1] = v141.u32[1];
          v147 = v139;
          v139.i64[0] = v144.u32[0];
          v139.i64[1] = v144.u32[1];
          v148 = v139;
          v149 = vmovl_u16(*(uint16x4_t *)v143.i8);
          v139.i64[0] = v149.u32[2];
          v139.i64[1] = v149.u32[3];
          v150 = v139;
          v139.i64[0] = v149.u32[0];
          v139.i64[1] = v149.u32[1];
          v151 = v139;
          v139.i64[0] = v121.u32[0];
          v139.i64[1] = v121.u32[1];
          v152 = (int8x16_t)vshlq_u64(v151, v139);
          v139.i64[0] = v121.u32[2];
          v139.i64[1] = v121.u32[3];
          v153 = (int8x16_t)vshlq_u64(v150, v139);
          v139.i64[0] = v120.u32[0];
          v139.i64[1] = v120.u32[1];
          v154 = (int8x16_t)vshlq_u64(v148, v139);
          v139.i64[0] = v119.u32[0];
          v139.i64[1] = v119.u32[1];
          v155 = (int8x16_t)vshlq_u64(v147, v139);
          v139.i64[0] = v118.u32[2];
          v139.i64[1] = v118.u32[3];
          v156 = (int8x16_t)vshlq_u64(v146, v139);
          v139.i64[0] = v120.u32[2];
          v139.i64[1] = v120.u32[3];
          v157 = (int8x16_t)vshlq_u64(v145, v139);
          v139.i64[0] = v119.u32[2];
          v139.i64[1] = v119.u32[3];
          v158 = (int8x16_t)vshlq_u64(v142, v139);
          v139.i64[0] = v118.u32[0];
          v139.i64[1] = v118.u32[1];
          v131 = vorrq_s8((int8x16_t)vshlq_u64(v140, v139), v131);
          v130 = vorrq_s8(v158, v130);
          v126 = vorrq_s8(v157, v126);
          v132 = vorrq_s8(v156, v132);
          v127 = vorrq_s8(v155, v127);
          v125 = vorrq_s8(v154, v125);
          v117 = vorrq_s8(v153, v117);
          v114 = vorrq_s8(v152, v114);
          v115 = vaddq_s32(v115, v122);
          v133 = vaddq_s32(v133, v122);
          v134 = vaddq_s32(v134, v122);
          v135 = vaddq_s32(v135, v122);
          v121 = vaddq_s32(v121, v123);
          v120 = vaddq_s32(v120, v123);
          v119 = vaddq_s32(v119, v123);
          v118 = vaddq_s32(v118, v123);
          v128 -= 16;
        }
        while (v128);
        v97 = vaddvq_s32(vaddq_s32(vaddq_s32(v115, v134), vaddq_s32(v133, v135)));
        v159 = vorrq_s8(vorrq_s8(vorrq_s8(v114, v127), vorrq_s8(v125, v131)), vorrq_s8(vorrq_s8(v117, v130), vorrq_s8(v126, v132)));
        v87 = (unint64_t)vorr_s8(*(int8x8_t *)v159.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v159, v159, 8uLL));
        if ((v124 & 0x3FFFFFF0) != v124)
        {
LABEL_110:
          do
          {
            v97 += 8;
            v160 = *(unsigned __int8 *)v98;
            v98 = (unint64_t *)((char *)v98 + 1);
            v87 |= (unint64_t)v160 << v113;
            v113 -= 8;
          }
          while (v113 >= v110);
        }
      }
      else
      {
        v98 = v90;
      }
    }
    else
    {
      v96 = (v95 & 0xFFFFFFF8) + 8;
      v97 = v96 + v85;
      v98 = (unint64_t *)((char *)v90 + (v96 >> 3));
      v87 = (bswap64(*v90) >> (56 - (v95 & 0xF8u)) << (v95 & 7)) | *(_QWORD *)(v6 + 16);
    }
    *(_QWORD *)(v6 + 40) += (char *)v98 - (char *)v90;
    v85 = v97;
    v88 = v87 - (v86 << 56);
    if (v87 < v86 << 56)
      goto LABEL_99;
LABEL_103:
    LODWORD(v86) = *(_DWORD *)(v6 + 24) - v86;
    result = 3;
    v87 = v88;
    goto LABEL_104;
  }
  v88 = v87 - (v86 << 56);
  if (v87 >= v86 << 56)
    goto LABEL_103;
LABEL_99:
  result = 1;
LABEL_104:
  v214 = vpx_norm[v86];
  *(_QWORD *)(v6 + 16) = v87 << v214;
  *(_DWORD *)(v6 + 24) = (_DWORD)v86 << v214;
  *(_DWORD *)(v6 + 28) = v85 - v214;
LABEL_105:
  if (v9)
  {
    v215 = v9 + 16 * v7 + 4 * result;
    ++*(_DWORD *)(v215 + 560);
  }
  return result;
}

uint64_t dec_build_inter_predictors_sb(int16x8_t *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  int v66;
  uint64_t v68;
  int v69;
  unsigned __int8 *v70;

  v5 = a3;
  v6 = a2;
  v7 = 0;
  v8 = 8 * a5;
  v9 = **(unsigned __int8 ***)(a3 + 448);
  v68 = (uint64_t)*(&vp9_filter_kernels + v9[7]);
  v42 = *v9;
  v10 = a3 + 16;
  v48 = a3 + 152;
  v59 = a3 + 136;
  v41 = (char)v9[9];
  v47 = a3 + 288;
  v58 = a3 + 272;
  v11 = 1;
  v69 = 8 * a5;
  v66 = 8 * a4;
  v70 = v9;
  v60 = a3 + 16;
  do
  {
    v14 = (char)v9[v7 + 8] - 1;
    v15 = v6 + 176 * v14;
    v16 = v15 + 1088;
    v17 = *(_DWORD *)(v15 + 1072);
    v18 = *(_QWORD *)(v6 + 18904);
    v19 = *(_DWORD *)(v15 + 1088);
    v56 = v7;
    v57 = (int *)(v15 + 1088);
    v46 = v11;
    if (v19 == -1 || (v20 = *(_DWORD *)(v6 + 176 * v14 + 1092), v20 == -1))
    {
      vpx_internal_error(*(_QWORD *)(v5 + 640), 5, "Reference frame has invalid dimensions");
      v16 = v15 + 1088;
      v19 = *v57;
      if (*v57 == -1 || (v20 = *(_DWORD *)(v6 + 176 * v14 + 1092), v20 == -1))
      {
        v21 = *(_QWORD *)(v6 + 176 * v14 + 1080);
LABEL_12:
        v22 = v68;
        v23 = 0;
        v16 = 0;
        goto LABEL_15;
      }
    }
    if (v19 == 0x4000)
    {
      v21 = *(_QWORD *)(v6 + 176 * v14 + 1080);
      if (v20 == 0x4000)
        goto LABEL_12;
    }
    else
    {
      v21 = *(_QWORD *)(v6 + 176 * v14 + 1080);
    }
    v23 = 1;
    v22 = v68;
LABEL_15:
    v24 = v18 + 224 * v17 + 24;
    vp9_setup_pre_planes(v5, v56, v21, a4, a5, v16);
    *(_QWORD *)(v5 + 8 * v56 + 512) = v15 + 1072;
    v55 = v24;
    if (v42 > 2)
    {
      v12 = *(_DWORD *)&v70[4 * v56 + 12];
      v61 = v5 + 16 * v56;
      dec_build_inter_predictors(a1, v5, 0, 4 * *(unsigned __int16 *)(v5 + 112), 4 * *(unsigned __int16 *)(v5 + 114), 0, 0, 4 * *(unsigned __int16 *)(v5 + 112), 4 * *(unsigned __int16 *)(v5 + 114), v8, v66, v22, v57, v61 + 32, v10, v12, HIWORD(v12), v24, v23,
        v56);
      dec_build_inter_predictors(a1, v5, 1u, 4 * *(unsigned __int16 *)(v5 + 248), 4 * *(unsigned __int16 *)(v5 + 250), 0, 0, 4 * *(unsigned __int16 *)(v5 + 248), 4 * *(unsigned __int16 *)(v5 + 250), v69, v66, v22, v57, v61 + 168, v48, v12, HIWORD(v12), v24, v23,
        v56);
      result = dec_build_inter_predictors(a1, v5, 2u, 4 * *(unsigned __int16 *)(v5 + 384), 4 * *(unsigned __int16 *)(v5 + 386), 0, 0, 4 * *(unsigned __int16 *)(v5 + 384), 4 * *(unsigned __int16 *)(v5 + 386), v69, v66, v22, v57, v61 + 304, v47, v12, HIWORD(v12), v24, v23,
                 v56);
      v9 = v70;
    }
    else
    {
      v40 = v5 + 16 * v56;
      v49 = *(unsigned __int16 *)(v5 + 114);
      if (*(_WORD *)(v5 + 114) && *(_WORD *)(a3 + 112))
      {
        v25 = 0;
        v26 = 0;
        v27 = 4 * *(unsigned __int16 *)(a3 + 112);
        do
        {
          v28 = 0;
          v52 = v25;
          v62 = 4 * v25;
          do
          {
            ++v26;
            v29 = average_split_mvs(a3);
            dec_build_inter_predictors(a1, a3, 0, v27, 4 * v49, v28, v62, 4, 4, v69, v66, v68, v57, v40 + 32, v60, v29, HIWORD(v29), v55, v23,
              v56);
            v28 += 4;
          }
          while (v27 != v28);
          v25 = v52 + 1;
        }
        while (v52 + 1 != v49);
      }
      result = v59;
      v50 = *(unsigned __int16 *)(a3 + 250);
      if (*(_WORD *)(a3 + 250) && *(_WORD *)(a3 + 248))
      {
        v30 = 0;
        v31 = 0;
        v32 = 4 * *(unsigned __int16 *)(a3 + 248);
        do
        {
          v33 = 0;
          v53 = v30;
          v63 = 4 * v30;
          do
          {
            ++v31;
            v34 = average_split_mvs(result);
            dec_build_inter_predictors(a1, a3, 1u, v32, 4 * v50, v33, v63, 4, 4, v69, v66, v68, v57, v40 + 168, v48, v34, HIWORD(v34), v55, v23,
              v56);
            result = v59;
            v33 += 4;
          }
          while (v32 != v33);
          v30 = v53 + 1;
        }
        while (v53 + 1 != v50);
      }
      v9 = v70;
      v51 = *(unsigned __int16 *)(a3 + 386);
      if (*(_WORD *)(a3 + 386) && *(_WORD *)(a3 + 384))
      {
        v35 = 0;
        v36 = 0;
        v37 = 4 * *(unsigned __int16 *)(a3 + 384);
        do
        {
          v38 = 0;
          v54 = v35;
          v64 = 4 * v35;
          do
          {
            ++v36;
            v39 = average_split_mvs(v58);
            result = dec_build_inter_predictors(a1, a3, 2u, v37, 4 * v51, v38, v64, 4, 4, v69, v66, v68, v57, a3 + 16 * v56 + 304, v47, v39, HIWORD(v39), v55, v23,
                       v56);
            v9 = v70;
            v38 += 4;
          }
          while (v37 != v38);
          v35 = v54 + 1;
        }
        while (v54 + 1 != v51);
      }
    }
    v7 = 1;
    v11 = 0;
    v6 = a2;
    v5 = a3;
    v8 = v69;
    v10 = v60;
  }
  while (((v41 > 0) & v46) != 0);
  return result;
}

void inverse_transform_block_intra(uint64_t a1, unsigned int a2, int a3, unsigned int a4, uint8x8_t *a5, uint64_t a6, int a7)
{
  int16x8_t *v10;
  int *v11;
  int16x8_t *v12;
  int v13;
  int *v14;
  unsigned __int16 *v15;
  int v16;
  int16x8_t *v17;
  int v18;
  int16x8_t *v19;
  int v20;
  int *v21;
  int16x8_t *v22;
  uint16x8_t v23;
  uint8x8_t v24;
  __int32 *v25;
  __int32 *v26;
  uint8x8_t v27;
  __int32 *v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  uint64_t v32;
  int8x16_t v33;
  uint64_t *v34;
  int8x16_t v35;

  v10 = *(int16x8_t **)(a1 + 136 * a2);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 528) + 152) & 8) != 0)
  {
    v12 = (int16x8_t *)(2 * (_QWORD)a5);
    if (!*(_DWORD *)(a1 + 628))
    {
      switch(a4)
      {
        case 0u:
          v16 = *(_DWORD *)(a1 + 624);
          if (a3)
          {
            vp9_highbd_iht4x4_16_add_neon(*(int16x8_t **)(a1 + 136 * a2), v12->i64, a6, a3, v16);
            goto LABEL_16;
          }
          if (a7 >= 2)
          {
            vpx_highbd_idct4x4_16_add_neon(*(int16x8_t **)(a1 + 136 * a2), v12->i64, a6, v16);
            goto LABEL_33;
          }
          v29 = vdupq_n_s16(~(-1 << v16));
          v30 = vdupq_n_s16((((unint64_t)(11585
                                                             * (int)((unint64_t)(3036938240 * v10->i32[0]
                                                                                      + 0x80000000) >> 32)
                                                             + 0x2000) >> 14)
                           + 8) >> 4);
          v31.i64[0] = v12->i64[0];
          v32 = 2 * (int)a6;
          v31.i64[1] = *(uint64_t *)((char *)v12->i64 + v32);
          v33 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v30, v31), v29), 0);
          v12->i64[0] = v33.i64[0];
          *(uint64_t *)((char *)v12->i64 + v32) = vextq_s8(v33, v33, 8uLL).u64[0];
          v34 = (uint64_t *)((char *)v12->i64 + v32 + v32);
          v33.i64[0] = *v34;
          v33.i64[1] = *(uint64_t *)((char *)v34 + v32);
          v35 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v30, (int16x8_t)v33), v29), 0);
          *v34 = v35.i64[0];
          *(uint64_t *)((char *)v34 + v32) = vextq_s8(v35, v35, 8uLL).u64[0];
          goto LABEL_16;
        case 1u:
          v18 = *(_DWORD *)(a1 + 624);
          v19 = *(int16x8_t **)(a1 + 136 * a2);
          if (a3)
          {
            vp9_highbd_iht8x8_64_add_neon(v19, v12, a6, a3, v18);
            goto LABEL_16;
          }
          if (a7 == 1)
          {
            vpx_highbd_idct8x8_1_add_neon(v19->i32, v12, a6, v18);
            goto LABEL_17;
          }
          if (a7 <= 12)
          {
            vpx_highbd_idct8x8_12_add_neon((int32x4_t *)v19, v12, a6, v18);
            goto LABEL_16;
          }
          vpx_highbd_idct8x8_64_add_neon(v19, v12, a6, v18);
          goto LABEL_52;
        case 2u:
          vp9_highbd_iht16x16_add(a3, v10, v12, a6, a7, *(unsigned int *)(a1 + 624));
          goto LABEL_16;
        case 3u:
          v20 = *(_DWORD *)(a1 + 624);
          v21 = *(int **)(a1 + 136 * a2);
          v22 = (int16x8_t *)(2 * (_QWORD)a5);
          if (a7 == 1)
          {
            vpx_highbd_idct32x32_1_add_neon(v21, v22, a6, v20);
            goto LABEL_17;
          }
          if (a7 <= 34)
          {
            vpx_highbd_idct32x32_34_add_neon((uint64_t)v21, v22, a6, v20);
            goto LABEL_16;
          }
          if (a7 > 0x87)
            vpx_highbd_idct32x32_1024_add_neon((uint64_t)v21, (uint64_t)v22);
          else
            vpx_highbd_idct32x32_135_add_neon((uint64_t)v21, (uint64_t)v22);
          break;
        default:
          goto LABEL_16;
      }
      goto LABEL_52;
    }
    v13 = *(_DWORD *)(a1 + 624);
    v14 = *(int **)(a1 + 136 * a2);
    v15 = (unsigned __int16 *)(2 * (_QWORD)a5);
    if (a7 >= 2)
    {
      vpx_highbd_iwht4x4_16_add_c(v14, v15, a6, v13);
      goto LABEL_33;
    }
    vpx_highbd_iwht4x4_1_add_c(v14, v15, a6, v13);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 628))
    {
      switch(a4)
      {
        case 0u:
          if (a3)
          {
            vp9_iht4x4_16_add_neon(*(int16x8_t **)(a1 + 136 * a2), (__int32 *)a5, a6, a3);
            goto LABEL_16;
          }
          if (a7 >= 2)
          {
            vpx_idct4x4_16_add_neon(*(int16x8_t **)(a1 + 136 * a2), (__int32 *)a5, a6);
            goto LABEL_33;
          }
          v23 = (uint16x8_t)vdupq_n_s16((((46340 * ((46340 * v10->i16[0] + 0x8000) >> 16) + 0x8000) >> 16)
                                                     + 8) >> 4);
          v24.i32[0] = a5->i32[0];
          v25 = (__int32 *)((char *)a5 + (int)a6);
          v24.i32[1] = *v25;
          v26 = (__int32 *)((char *)v25 + (int)a6);
          v27 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v23, v24));
          a5->i32[0] = v27.i32[0];
          *(__int32 *)((char *)a5->i32 + (int)a6) = v27.i32[1];
          v28 = (__int32 *)((char *)v26 + (int)a6);
          v27.i32[0] = *v26;
          v27.i32[1] = *v28;
          *(int8x8_t *)v23.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v23, v27));
          *v26 = v23.i32[0];
          *v28 = v23.i32[1];
          goto LABEL_16;
        case 1u:
          v17 = *(int16x8_t **)(a1 + 136 * a2);
          if (a3)
          {
            vp9_iht8x8_64_add_neon(v17, a5, a6, a3);
            goto LABEL_16;
          }
          if (a7 == 1)
          {
            vpx_idct8x8_1_add_neon(v17->i16, a5, a6);
            goto LABEL_17;
          }
          if (a7 <= 12)
          {
            vpx_idct8x8_12_add_neon((int32x4_t *)v17, a5, a6);
            goto LABEL_16;
          }
          vpx_idct8x8_64_add_neon(v17, a5, a6);
          break;
        case 2u:
          vp9_iht16x16_add(a3, v10, (uint64_t)a5, a6, a7);
          goto LABEL_16;
        case 3u:
          vp9_idct32x32_add(*(int16x8_t **)(a1 + 136 * a2), (uint64_t)a5, a6, a7);
          goto LABEL_16;
        default:
          return;
      }
      goto LABEL_52;
    }
    v11 = *(int **)(a1 + 136 * a2);
    if (a7 >= 2)
    {
      vpx_iwht4x4_16_add_c(v11, (unsigned __int8 *)a5, a6);
      goto LABEL_33;
    }
    vpx_iwht4x4_1_add_c(v11, (unsigned __int8 *)a5, a6);
  }
LABEL_16:
  if (a7 == 1)
  {
LABEL_17:
    v10->i32[0] = 0;
    return;
  }
LABEL_33:
  if (!a3 && a4 <= 2 && a7 <= 10)
  {
    bzero(v10, 4 * (16 << a4));
    return;
  }
LABEL_52:
  if (a4 == 3 && a7 <= 34)
    bzero(v10, 0x400uLL);
  else
    bzero(v10, 4 * (16 << (2 * a4)));
}

uint64_t dec_build_inter_predictors(int16x8_t *a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11, uint64_t a12, int *a13, uint64_t a14, uint64_t a15, unsigned __int16 a16, unsigned __int16 a17, uint64_t a18, int a19, int a20)
{
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int16x8_t *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int16 *v84;
  int v85;
  BOOL v86;
  int v87;
  int v88;
  signed int v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int16x8_t *v97;
  uint64_t v98;
  size_t v99;
  uint64_t v101;
  unsigned int v102;
  unint64_t v103;
  char *v104;
  int16x8_t v105;
  unint64_t v106;
  int16x8_t *v107;
  uint64_t v108;
  char *v109;
  unsigned int v110;
  unint64_t v111;
  int16x8_t v112;
  unint64_t v113;
  size_t v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  size_t v121;
  size_t v122;
  uint64_t v123;
  size_t v124;
  int v125;
  uint64_t v126;
  int16x8_t *v127;
  int v128;
  BOOL v129;
  uint64_t v130;
  unint64_t v131;
  int16x8_t *v132;
  uint64_t v134;
  char *v135;
  unsigned int v136;
  unint64_t v137;
  int16x8_t v138;
  unint64_t v139;
  int16x8_t *v140;
  unint64_t v141;
  int v142;
  char *v143;
  int v144;
  BOOL v145;
  uint64_t v146;
  int16x8_t *v147;
  uint64_t v149;
  unsigned int v150;
  unint64_t v151;
  char *v152;
  int16x8_t v153;
  unint64_t v154;
  int16x8_t *v155;
  unint64_t v156;
  int v157;
  int16x8_t *v158;
  int v159;
  BOOL v160;
  uint64_t v161;
  int16x8_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v166;
  unsigned int v167;
  unint64_t v168;
  char *v169;
  int16x8_t v170;
  unint64_t v171;
  int16x8_t *v172;
  uint64_t v173;
  unsigned int v174;
  char *v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  int16x8_t v179;
  size_t v180;
  unint64_t v181;
  uint64_t v182;
  int16x8_t *v183;
  uint64_t v184;
  BOOL v185;
  uint64_t v186;
  int v187;
  int16x8_t *v188;
  uint64_t v189;
  int v190;
  BOOL v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  int16x8_t *v195;
  int v196;
  BOOL v197;
  uint64_t v198;
  int16x8_t *v199;
  uint64_t v200;
  uint64_t v202;
  unsigned int v203;
  char *v204;
  unint64_t v205;
  int v206;
  uint64_t v207;
  int16x8_t v208;
  unint64_t v209;
  int16x8_t *v210;
  uint64_t v211;
  int16x8_t *v212;
  uint64_t v213;
  int v214;
  BOOL v215;
  uint64_t v216;
  int16x8_t *v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;
  uint64_t v221;
  unsigned int v222;
  unint64_t v223;
  char *v224;
  int16x8_t v225;
  unint64_t v226;
  int16x8_t *v227;
  uint64_t v228;
  int v229;
  int16x8_t *v230;
  uint64_t v231;
  int v232;
  BOOL v233;
  uint64_t v234;
  size_t v235;
  unint64_t v236;
  int v237;
  uint64_t v238;
  int v239;
  int v240;
  int16x8_t *__b;
  uint64_t v242;
  uint64_t v243;
  int v244;
  __int16 v245;
  uint64_t v246;
  __int16 v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unsigned __int8 *v252;
  size_t v253;
  int v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  int v258;
  uint64_t v259;
  int v260;

  v24 = a9;
  v243 = *(_QWORD *)a15 + *(int *)(a15 + 8) * (uint64_t)a7 + a6;
  v25 = 136;
  if (a3 == 1)
    v25 = 128;
  v26 = 92;
  if (!a3)
    v26 = 72;
  v27 = 96;
  if (!a3)
  {
    v27 = 76;
    v25 = 120;
  }
  v28 = *(_DWORD *)(a18 + v27);
  v29 = *(int *)(a18 + v26);
  v30 = *(unsigned __int8 **)(a18 + v25);
  v260 = v28;
  v244 = a8;
  if (a19)
  {
    v31 = a2 + 136 * a3;
    v33 = *(_DWORD *)(v31 + 8);
    v32 = *(_DWORD *)(v31 + 12);
    v252 = *(unsigned __int8 **)(a18 + v25);
    v34 = a16 << (1 - v32);
    v35 = *(_DWORD *)(a2 + 488);
    v36 = 16 * a4 + (*(_DWORD *)(a2 + 492) << (1 - v33)) + 48;
    v37 = *(_DWORD *)(a2 + 496);
    v38 = (__int16)(a17 << (1 - v33));
    if (v38 < v36)
      LOWORD(v36) = a17 << (1 - v33);
    if (v38 >= (v35 << (1 - v33)) - 16 * a4 - 64)
      v39 = v36;
    else
      v39 = ((_WORD)v35 << (1 - v33)) - 16 * a4 - 64;
    v247 = v39;
    v40 = (__int16)v34;
    if ((__int16)v34 >= 16 * a5 + (*(_DWORD *)(a2 + 500) << (1 - v32)) + 48)
      v34 = 16 * a5 + (*(_DWORD *)(a2 + 500) << (1 - v32)) + 48;
    if (v40 >= (v37 << (1 - v32)) - 16 * a5 - 64)
      v41 = v34;
    else
      v41 = ((_WORD)v37 << (1 - v32)) - 16 * a5 - 64;
    v245 = v41;
    v42 = ((-v35 >> (v33 + 3)) + a6);
    v43 = ((-v37 >> (v32 + 3)) + a7);
    v258 = (*((uint64_t (**)(_QWORD, int *))a13 + 2))((16 * v42), a13);
    v254 = (*((uint64_t (**)(_QWORD, int *))a13 + 3))((16 * v43), a13);
    v44 = (*((uint64_t (**)(uint64_t, int *))a13 + 2))(v42, a13);
    v45 = (*((uint64_t (**)(uint64_t, int *))a13 + 3))(v43, a13);
    v30 = v252;
    v28 = v260;
    v24 = a9;
    a8 = v244;
    v46 = ((((a11 + a7) * a13[1]) >> 10) & 0xF) + ((unint64_t)(v245 * (uint64_t)a13[1]) >> 14);
    v47 = ((((a10 + a6) * *a13) >> 10) & 0xF) + ((unint64_t)(v247 * (uint64_t)*a13) >> 14);
    v49 = a13[2];
    v48 = a13[3];
    v50 = v47 & 0xF;
    v51 = v46 & 0xF;
    v52 = v44 + (v47 >> 4);
    v53 = *(int *)(a14 + 8);
    v54 = v45 + (v46 >> 4);
  }
  else
  {
    v55 = a2 + 136 * a3;
    v56 = *(_DWORD *)(v55 + 8);
    LODWORD(v55) = *(_DWORD *)(v55 + 12);
    v57 = (-*(_DWORD *)(a2 + 488) >> (v56 + 3)) + a6;
    v58 = (-*(_DWORD *)(a2 + 496) >> (v55 + 3)) + a7;
    v258 = 16 * v57;
    v254 = 16 * v58;
    v46 = (__int16)a16 << (1 - v55);
    v47 = (__int16)a17 << (1 - v56);
    v48 = 16;
    v49 = 16;
    v50 = v47 & 0xF;
    v51 = v46 & 0xF;
    v52 = v57 + (v47 >> 4);
    v53 = *(int *)(a14 + 8);
    v54 = v58 + (v46 >> 4);
    if (!v47 && !v46 && (v29 & 7) == 0 && (v28 & 7) == 0)
      goto LABEL_23;
  }
  v61 = v47 + v258;
  v62 = v254 + v48 * (v24 - 1) + v46;
  v63 = (v61 + v49 * (a8 - 1)) >> 4;
  if (v50 || a13[2] != 16)
  {
    v66 = v52 - 3;
    v65 = v63 + 5;
    v64 = 3;
    v67 = v62 >> 4;
    if (v51)
      goto LABEL_33;
  }
  else
  {
    v64 = 0;
    v65 = v63 + 1;
    v66 = v52;
    v67 = v62 >> 4;
    if (v51)
      goto LABEL_33;
  }
  if (a13[3] != 16)
  {
LABEL_33:
    v70 = v54 - 3;
    v69 = v67 + 5;
    v68 = 3;
    if (v66 < 0)
      goto LABEL_41;
    goto LABEL_34;
  }
  v68 = 0;
  v69 = v67 + 1;
  v70 = v54;
  if (v66 < 0)
    goto LABEL_41;
LABEL_34:
  if (v66 < (int)v29
    && (v65 & 0x80000000) == 0
    && v65 < (int)v29
    && (v70 & 0x80000000) == 0
    && v70 < v28
    && (v69 & 0x80000000) == 0
    && v69 < v28)
  {
LABEL_23:
    v59 = (uint64_t)&v30[(int)v53 * (uint64_t)v54 + v52];
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 528) + 152) & 8) == 0)
      return (*(uint64_t (**)(uint64_t))&a13[8 * (v50 != 0) + 8 + 4 * (v51 != 0) + 2 * a20])(v59);
    v77 = 2 * v59;
    v78 = 2 * v243;
    v79 = *(int *)(a15 + 8);
    v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&a13[8 * (v50 != 0)
                                                                                    + 24
                                                                                    + 4 * (v51 != 0)
                                                                                    + 2 * a20];
    v81 = a12;
    return v80(v77, v53, v78, v79, v81);
  }
LABEL_41:
  v71 = v70 * (int)v53;
  v72 = v66;
  v73 = v65 - (uint64_t)v66 + 1;
  v74 = v69 - v70 + 1;
  v75 = a1 + 1130;
  v259 = v53;
  __b = a1 + 1130;
  v239 = v50;
  v240 = v51;
  v238 = *(int *)(a15 + 8);
  v237 = v64 + v68 * v73;
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 528) + 152) & 8) != 0)
  {
    v82 = 2 * (_QWORD)&v30[v71 + v66] - 2 * v66;
    v83 = v82 - 2 * v71;
    if (v70 <= 0)
      v82 = v83;
    if (v70 >= v28)
      v84 = (unsigned __int16 *)(v83 + 2 * (int)v53 * (v28 - 1));
    else
      v84 = (unsigned __int16 *)v82;
    v85 = -v66 & (v66 >> 31);
    if (v85 >= (int)v73)
      v85 = v73;
    v86 = __OFSUB__(v65, (_DWORD)v29);
    v87 = v65 - v29;
    if (v87 < 0 != v86)
      v88 = 0;
    else
      v88 = v87 + 1;
    if (v88 >= (int)v73)
      v89 = v73;
    else
      v89 = v88;
    v90 = v85;
    v91 = v89 + v85;
    v92 = (int)v73 - (v89 + v85);
    v251 = v73;
    v253 = 2 * v92;
    v93 = v29 - 1;
    v94 = (int)v29 - 1;
    v95 = v89;
    v249 = v92;
    v250 = v72;
    v248 = v93;
    if (v85)
    {
      v255 = v85 & 0xFFFFFFFFFFFFFFF0;
      v246 = 2 * v255;
      if (v89)
      {
        v96 = v89 & 0xFFFFFFFFFFFFFFF0;
        v242 = 2 * v96;
        if ((_DWORD)v73 == v91)
        {
          v97 = a1 + 1131;
          v98 = 2 * v73;
          v99 = v253 + 2 * v85;
          while (1)
          {
            v102 = *v84;
            if (v90 < 0x10)
              break;
            v104 = &v75->i8[v246];
            v105 = vdupq_n_s16(v102);
            v106 = v255;
            v107 = v97;
            do
            {
              v107[-1] = v105;
              *v107 = v105;
              v107 += 2;
              v106 -= 16;
            }
            while (v106);
            v103 = v255;
            if (v255 != v90)
              goto LABEL_76;
LABEL_78:
            v109 = &v75->i8[2 * v90 + 2 * v92];
            v110 = v84[v93];
            if (v89 < 0x10)
            {
              v111 = v89;
              goto LABEL_84;
            }
            v109 += v242;
            v112 = vdupq_n_s16(v110);
            v113 = v89 & 0xFFFFFFFFFFFFFFF0;
            v114 = v99;
            do
            {
              *(int16x8_t *)((char *)v75 + v114) = v112;
              *(int16x8_t *)((char *)v97 + v114) = v112;
              v114 += 32;
              v113 -= 16;
            }
            while (v113);
            if (v96 != v89)
            {
              v111 = v89 - v96;
              do
              {
LABEL_84:
                *(_WORD *)v109 = v110;
                v109 += 2;
                --v111;
              }
              while (v111);
            }
            v75 = (int16x8_t *)((char *)v75 + v98);
            if (v70 + 1 >= v28 || v70 <= -1)
              v101 = 0;
            else
              v101 = v53;
            v84 += v101;
            v97 = (int16x8_t *)((char *)v97 + v98);
            ++v70;
            if (!--v74)
              goto LABEL_206;
          }
          v103 = 0;
          v104 = (char *)v75;
LABEL_76:
          v108 = v90 - v103;
          do
          {
            *(_WORD *)v104 = v102;
            v104 += 2;
            --v108;
          }
          while (v108);
          goto LABEL_78;
        }
        v162 = a1 + 1131;
        v163 = 2 * v73;
        v235 = v253 + 2 * v85;
        v236 = v89 & 0xFFFFFFFFFFFFFFF0;
        v164 = 2 * v85;
        while (1)
        {
          v167 = *v84;
          if (v90 < 0x10)
            break;
          v169 = &v75->i8[v246];
          v170 = vdupq_n_s16(v167);
          v171 = v255;
          v172 = v162;
          do
          {
            v172[-1] = v170;
            *v172 = v170;
            v172 += 2;
            v171 -= 16;
          }
          while (v171);
          v168 = v255;
          if (v255 != v90)
            goto LABEL_179;
LABEL_181:
          memcpy(&v75->i8[v164], &v84[v72 + (unint64_t)v164 / 2], v253);
          v174 = v84[v248];
          v175 = &v75->i8[2 * v249 + v164];
          if (v95 < 0x10)
          {
            v176 = 0;
            v177 = v260;
            v178 = v259;
            v73 = v251;
            v72 = v250;
LABEL_186:
            v182 = v95 - v176;
            do
            {
              *(_WORD *)v175 = v174;
              v175 += 2;
              --v182;
            }
            while (v182);
            goto LABEL_167;
          }
          v175 += v242;
          v179 = vdupq_n_s16(v174);
          v180 = v235;
          v181 = v236;
          do
          {
            *(int16x8_t *)((char *)v75 + v180) = v179;
            *(int16x8_t *)((char *)v162 + v180) = v179;
            v180 += 32;
            v181 -= 16;
          }
          while (v181);
          v176 = v236;
          v177 = v260;
          v178 = v259;
          v73 = v251;
          v72 = v250;
          if (v236 != v95)
            goto LABEL_186;
LABEL_167:
          v75 = (int16x8_t *)((char *)v75 + v163);
          if (v70 + 1 >= v177 || v70 <= -1)
            v166 = 0;
          else
            v166 = v178;
          v84 += v166;
          v162 = (int16x8_t *)((char *)v162 + v163);
          ++v70;
          if (!--v74)
            goto LABEL_206;
        }
        v168 = 0;
        v169 = (char *)v75;
LABEL_179:
        v173 = v90 - v168;
        do
        {
          *(_WORD *)v169 = v167;
          v169 += 2;
          --v173;
        }
        while (v173);
        goto LABEL_181;
      }
      if ((_DWORD)v73 == v91)
      {
        v147 = a1 + 1131;
        while (1)
        {
          v150 = *v84;
          if (v85 < 0x10)
            break;
          v152 = &v75->i8[v246];
          v153 = vdupq_n_s16(v150);
          v154 = v85 & 0xFFFFFFFFFFFFFFF0;
          v155 = v147;
          do
          {
            v155[-1] = v153;
            *v155 = v153;
            v155 += 2;
            v154 -= 16;
          }
          while (v154);
          v151 = v85 & 0xFFFFFFFFFFFFFFF0;
          if (v255 != v85)
            goto LABEL_152;
LABEL_140:
          v75 = (int16x8_t *)((char *)v75 + 2 * v73);
          if (v70 + 1 >= v28 || v70 <= -1)
            v149 = 0;
          else
            v149 = v53;
          v84 += v149;
          v147 = (int16x8_t *)((char *)v147 + 2 * v73);
          ++v70;
          if (!--v74)
            goto LABEL_206;
        }
        v151 = 0;
        v152 = (char *)v75;
LABEL_152:
        v156 = v85 - v151;
        do
        {
          *(_WORD *)v152 = v150;
          v152 += 2;
          --v156;
        }
        while (v156);
        goto LABEL_140;
      }
      v217 = a1 + 1131;
      v218 = 2 * v73;
      v219 = v85;
      while (1)
      {
        v222 = *v84;
        if (v90 < 0x10)
          break;
        v224 = &v75->i8[v246];
        v225 = vdupq_n_s16(v222);
        v226 = v255;
        v227 = v217;
        do
        {
          v227[-1] = v225;
          *v227 = v225;
          v227 += 2;
          v226 -= 16;
        }
        while (v226);
        v223 = v255;
        if (v255 != v90)
          goto LABEL_255;
LABEL_243:
        memcpy(&v75->i8[v219 * 2], &v84[v72 + v219], v253);
        v72 = v250;
        v73 = v251;
        v75 = (int16x8_t *)((char *)v75 + 2 * v251);
        v220 = v70 + 1 >= v260 || v70 <= -1;
        v221 = v259;
        if (v220)
          v221 = 0;
        v84 += v221;
        v217 = (int16x8_t *)((char *)v217 + v218);
        ++v70;
        if (!--v74)
          goto LABEL_206;
      }
      v223 = 0;
      v224 = (char *)v75;
LABEL_255:
      v228 = v90 - v223;
      do
      {
        *(_WORD *)v224 = v222;
        v224 += 2;
        --v228;
      }
      while (v228);
      goto LABEL_243;
    }
    if (v89)
    {
      v131 = v89 & 0xFFFFFFFFFFFFFFF0;
      v257 = 2 * v131;
      if ((_DWORD)v73 == v91)
      {
        v132 = (int16x8_t *)((char *)a1 + v253 + 18096);
        while (1)
        {
          v135 = &v75->i8[2 * v85 + 2 * v92];
          v136 = v84[v94];
          if (v89 < 0x10)
            break;
          v135 += v257;
          v138 = vdupq_n_s16(v136);
          v139 = v89 & 0xFFFFFFFFFFFFFFF0;
          v140 = v132;
          do
          {
            v140[-1] = v138;
            *v140 = v138;
            v140 += 2;
            v139 -= 16;
          }
          while (v139);
          v137 = v89 & 0xFFFFFFFFFFFFFFF0;
          if (v131 != v89)
            goto LABEL_123;
LABEL_111:
          v75 = (int16x8_t *)((char *)v75 + 2 * v73);
          if (v70 + 1 >= v28 || v70 <= -1)
            v134 = 0;
          else
            v134 = v53;
          v84 += v134;
          v132 = (int16x8_t *)((char *)v132 + 2 * v73);
          ++v70;
          if (!--v74)
            goto LABEL_206;
        }
        v137 = 0;
LABEL_123:
        v141 = v89 - v137;
        do
        {
          *(_WORD *)v135 = v136;
          v135 += 2;
          --v141;
        }
        while (v141);
        goto LABEL_111;
      }
      v199 = (int16x8_t *)((char *)a1 + v253 + 18096);
      v200 = 2 * v73;
      while (1)
      {
        memcpy(v75, &v84[v72], v253);
        v203 = v84[v248];
        v204 = &v75->i8[2 * v249];
        if (v95 < 0x10)
          break;
        v204 += v257;
        v208 = vdupq_n_s16(v203);
        v209 = v95 & 0xFFFFFFFFFFFFFFF0;
        v210 = v199;
        do
        {
          v210[-1] = v208;
          *v210 = v208;
          v210 += 2;
          v209 -= 16;
        }
        while (v209);
        v205 = v95 & 0xFFFFFFFFFFFFFFF0;
        v206 = v260;
        v207 = v259;
        v73 = v251;
        v72 = v250;
        if (v131 != v95)
          goto LABEL_231;
LABEL_219:
        v75 = (int16x8_t *)((char *)v75 + 2 * v73);
        if (v70 + 1 >= v206 || v70 <= -1)
          v202 = 0;
        else
          v202 = v207;
        v84 += v202;
        v199 = (int16x8_t *)((char *)v199 + v200);
        ++v70;
        if (!--v74)
          goto LABEL_206;
      }
      v205 = 0;
      v206 = v260;
      v207 = v259;
      v73 = v251;
      v72 = v250;
LABEL_231:
      v211 = v95 - v205;
      do
      {
        *(_WORD *)v204 = v203;
        v204 += 2;
        --v211;
      }
      while (v211);
      goto LABEL_219;
    }
    if ((_DWORD)v73 != v91)
    {
      v187 = v69 + 1;
      v188 = a1 + 1130;
      v189 = 2 * v73;
      do
      {
        memcpy(v188, &v84[v72 + v90], v253);
        v72 = v250;
        v73 = v251;
        v190 = v70 + 1;
        v191 = v70 + 1 >= v260 || v70 <= -1;
        v192 = v259;
        if (v191)
          v192 = 0;
        v84 += v192;
        v188 = (int16x8_t *)((char *)v188 + v189);
        ++v70;
      }
      while (v187 != v190);
    }
LABEL_206:
    v77 = (uint64_t)__b->i64 + 2 * v237;
    v78 = 2 * v243;
    v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))&a13[8 * (v239 != 0)
                                                                                    + 24
                                                                                    + 4 * (v240 != 0)
                                                                                    + 2 * a20];
    v53 = v73;
    v79 = v238;
    v81 = a12;
    return v80(v77, v53, v78, v79, v81);
  }
  if (v70 >= v28)
  {
    v76 = &v30[(int)v53 * (v28 - 1)];
  }
  else if (v70 <= 0)
  {
    v76 = v30;
  }
  else
  {
    v76 = &v30[v71];
  }
  v115 = -v66 & (v66 >> 31);
  if (v115 >= (int)v73)
    v115 = v73;
  v86 = __OFSUB__(v65, (_DWORD)v29);
  v116 = v65 - v29;
  if (v116 < 0 != v86)
    v117 = 0;
  else
    v117 = v116 + 1;
  if (v117 >= (int)v73)
    v118 = v73;
  else
    v118 = v117;
  v119 = v118 + v115;
  v120 = v73 - (v118 + v115);
  v121 = v115;
  v122 = v120;
  v123 = v29 - 1;
  v124 = v118;
  v256 = (int)v73;
  if (v115)
  {
    if (v118)
    {
      if ((_DWORD)v73 == v119)
      {
        v125 = v69 + 1;
        v126 = v115 + (uint64_t)v120;
        v127 = a1 + 1130;
        do
        {
          memset(v127, *v76, v121);
          memset(&v127->i8[v126], v76[v123], v124);
          v127 = (int16x8_t *)((char *)v127 + v256);
          v128 = v70 + 1;
          v129 = v70 + 1 >= v260 || v70 <= -1;
          v130 = v259;
          if (v129)
            v130 = 0;
          v76 += v130;
          ++v70;
        }
        while (v125 != v128);
      }
      else
      {
        v183 = a1 + 1130;
        v184 = v72;
        do
        {
          memset(v183, *v76, v121);
          memcpy(&v183->i8[v121], &v76[v184 + v121], v122);
          memset(&v183->i8[v121 + v122], v76[v123], v124);
          v183 = (int16x8_t *)((char *)v183 + v256);
          v185 = v70 + 1 >= v260 || v70 <= -1;
          v186 = v259;
          if (v185)
            v186 = 0;
          v76 += v186;
          ++v70;
          --v74;
        }
        while (v74);
      }
    }
    else if ((_DWORD)v73 == v119)
    {
      v157 = v69 + 1;
      v158 = a1 + 1130;
      do
      {
        memset(v158, *v76, v121);
        v158 = (int16x8_t *)((char *)v158 + v256);
        v159 = v70 + 1;
        v160 = v70 + 1 >= v260 || v70 <= -1;
        v161 = v259;
        if (v160)
          v161 = 0;
        v76 += v161;
        ++v70;
      }
      while (v157 != v159);
    }
    else
    {
      v229 = v69 + 1;
      v230 = a1 + 1130;
      v231 = v72;
      do
      {
        memset(v230, *v76, v121);
        memcpy(&v230->i8[v121], &v76[v231 + v121], v122);
        v230 = (int16x8_t *)((char *)v230 + v256);
        v232 = v70 + 1;
        v233 = v70 + 1 >= v260 || v70 <= -1;
        v234 = v259;
        if (v233)
          v234 = 0;
        v76 += v234;
        ++v70;
      }
      while (v229 != v232);
    }
  }
  else if (v118)
  {
    v142 = v69 + 1;
    if ((_DWORD)v73 == v119)
    {
      v143 = &a1[1130].i8[v120];
      do
      {
        memset(v143, v76[v123], v124);
        v144 = v70 + 1;
        v145 = v70 + 1 >= v260 || v70 <= -1;
        v146 = v259;
        if (v145)
          v146 = 0;
        v76 += v146;
        v143 += v256;
        ++v70;
      }
      while (v142 != v144);
    }
    else
    {
      v212 = a1 + 1130;
      v213 = v72;
      do
      {
        memcpy(v212, &v76[v213 + v121], v122);
        memset(&v212->i8[v122], v76[v123], v124);
        v214 = v70 + 1;
        v215 = v70 + 1 >= v260 || v70 <= -1;
        v216 = v259;
        if (v215)
          v216 = 0;
        v76 += v216;
        v212 = (int16x8_t *)((char *)v212 + v256);
        ++v70;
      }
      while (v142 != v214);
    }
  }
  else if ((_DWORD)v73 != v119)
  {
    v193 = v72;
    v194 = v69 + 1;
    v195 = a1 + 1130;
    do
    {
      memcpy(v195, &v76[v193 + v121], v122);
      v196 = v70 + 1;
      v197 = v70 + 1 >= v260 || v70 <= -1;
      v198 = v259;
      if (v197)
        v198 = 0;
      v76 += v198;
      v195 = (int16x8_t *)((char *)v195 + v256);
      ++v70;
    }
    while (v194 != v196);
  }
  return (*(uint64_t (**)(__int8 *))&a13[8 * (v239 != 0) + 8 + 4 * (v240 != 0) + 2 * a20])(&__b->i8[v237]);
}

void inverse_transform_block_inter(uint64_t a1, unsigned int a2, unsigned int a3, uint8x8_t *a4, int a5, int a6)
{
  int16x8_t *v8;
  int *v9;
  int16x8_t *v10;
  int v11;
  int v12;
  int v13;
  int32x4_t *v14;
  int v15;
  int v16;
  uint16x8_t v17;
  uint8x8_t v18;
  __int32 *v19;
  __int32 *v20;
  uint8x8_t v21;
  __int32 *v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  uint64_t v26;
  int8x16_t v27;
  uint64_t *v28;
  int8x16_t v29;

  v8 = *(int16x8_t **)(a1 + 136 * a2);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 528) + 152) & 8) != 0)
  {
    v10 = (int16x8_t *)(2 * (_QWORD)a4);
    if (!*(_DWORD *)(a1 + 628))
    {
      switch(a3)
      {
        case 0u:
          v12 = *(_DWORD *)(a1 + 624);
          if (a6 >= 2)
          {
            vpx_highbd_idct4x4_16_add_neon(v8, v10->i64, a5, v12);
            goto LABEL_18;
          }
          v23 = vdupq_n_s16(~(-1 << v12));
          v24 = vdupq_n_s16((((unint64_t)(11585
                                                             * (int)((unint64_t)(3036938240 * v8->i32[0]
                                                                                      + 0x80000000) >> 32)
                                                             + 0x2000) >> 14)
                           + 8) >> 4);
          v25.i64[0] = v10->i64[0];
          v26 = 2 * a5;
          v25.i64[1] = *(uint64_t *)((char *)v10->i64 + v26);
          v27 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v24, v25), v23), 0);
          v10->i64[0] = v27.i64[0];
          *(uint64_t *)((char *)v10->i64 + v26) = vextq_s8(v27, v27, 8uLL).u64[0];
          v28 = (uint64_t *)((char *)v10->i64 + v26 + v26);
          v27.i64[0] = *v28;
          v27.i64[1] = *(uint64_t *)((char *)v28 + v26);
          v29 = (int8x16_t)vqshluq_n_s16(vminq_s16(vqaddq_s16(v24, (int16x8_t)v27), v23), 0);
          *v28 = v29.i64[0];
          *(uint64_t *)((char *)v28 + v26) = vextq_s8(v29, v29, 8uLL).u64[0];
          goto LABEL_16;
        case 1u:
          v15 = *(_DWORD *)(a1 + 624);
          if (a6 == 1)
          {
            vpx_highbd_idct8x8_1_add_neon(v8->i32, v10, a5, v15);
            goto LABEL_17;
          }
          if (a6 <= 12)
          {
            vpx_highbd_idct8x8_12_add_neon((int32x4_t *)v8, v10, a5, v15);
            goto LABEL_16;
          }
          vpx_highbd_idct8x8_64_add_neon(v8, v10, a5, v15);
          goto LABEL_49;
        case 2u:
          v13 = *(_DWORD *)(a1 + 624);
          if (a6 == 1)
          {
            vpx_highbd_idct16x16_1_add_neon(v8->i32, v10, a5, v13);
            goto LABEL_17;
          }
          if (a6 <= 10)
          {
            vpx_highbd_idct16x16_10_add_neon((int32x4_t *)v8, v10, a5, v13);
            goto LABEL_16;
          }
          if (a6 > 0x26)
            vpx_highbd_idct16x16_256_add_neon(v8, v10, a5, v13);
          else
            vpx_highbd_idct16x16_38_add_neon(v8, v10, a5, v13);
          goto LABEL_49;
        case 3u:
          v16 = *(_DWORD *)(a1 + 624);
          if (a6 == 1)
          {
            vpx_highbd_idct32x32_1_add_neon(v8->i32, v10, a5, v16);
            goto LABEL_17;
          }
          if (a6 <= 34)
          {
            vpx_highbd_idct32x32_34_add_neon((uint64_t)v8, v10, a5, v16);
            goto LABEL_16;
          }
          if (a6 > 0x87)
            vpx_highbd_idct32x32_1024_add_neon((uint64_t)v8, (uint64_t)v10);
          else
            vpx_highbd_idct32x32_135_add_neon((uint64_t)v8, (uint64_t)v10);
          break;
        default:
          goto LABEL_16;
      }
      goto LABEL_49;
    }
    v11 = *(_DWORD *)(a1 + 624);
    if (a6 >= 2)
    {
      vpx_highbd_iwht4x4_16_add_c(v8->i32, (unsigned __int16 *)v10, a5, v11);
      goto LABEL_18;
    }
    vpx_highbd_iwht4x4_1_add_c(v8->i32, (unsigned __int16 *)v10, a5, v11);
  }
  else
  {
    if (!*(_DWORD *)(a1 + 628))
    {
      switch(a3)
      {
        case 0u:
          if (a6 >= 2)
          {
            vpx_idct4x4_16_add_neon(*(int16x8_t **)(a1 + 136 * a2), (__int32 *)a4, a5);
            goto LABEL_18;
          }
          v17 = (uint16x8_t)vdupq_n_s16((((46340 * ((46340 * v8->i16[0] + 0x8000) >> 16) + 0x8000) >> 16)
                                                     + 8) >> 4);
          v18.i32[0] = a4->i32[0];
          v19 = (__int32 *)((char *)a4 + a5);
          v18.i32[1] = *v19;
          v20 = (__int32 *)((char *)v19 + a5);
          v21 = (uint8x8_t)vqmovun_s16((int16x8_t)vaddw_u8(v17, v18));
          a4->i32[0] = v21.i32[0];
          *(__int32 *)((char *)a4->i32 + a5) = v21.i32[1];
          v22 = (__int32 *)((char *)v20 + a5);
          v21.i32[0] = *v20;
          v21.i32[1] = *v22;
          *(int8x8_t *)v17.i8 = vqmovun_s16((int16x8_t)vaddw_u8(v17, v21));
          *v20 = v17.i32[0];
          *v22 = v17.i32[1];
          goto LABEL_16;
        case 1u:
          v14 = *(int32x4_t **)(a1 + 136 * a2);
          if (a6 == 1)
          {
            vpx_idct8x8_1_add_neon(v14->i16, a4, a5);
            goto LABEL_17;
          }
          if (a6 <= 12)
          {
            vpx_idct8x8_12_add_neon(v14, a4, a5);
            goto LABEL_16;
          }
          vpx_idct8x8_64_add_neon((int16x8_t *)v14, a4, a5);
          break;
        case 2u:
          vp9_idct16x16_add(*(int16x8_t **)(a1 + 136 * a2), (uint64_t)a4, a5, a6);
          goto LABEL_16;
        case 3u:
          vp9_idct32x32_add(*(int16x8_t **)(a1 + 136 * a2), (uint64_t)a4, a5, a6);
          goto LABEL_16;
        default:
          return;
      }
      goto LABEL_49;
    }
    v9 = *(int **)(a1 + 136 * a2);
    if (a6 >= 2)
    {
      vpx_iwht4x4_16_add_c(v9, (unsigned __int8 *)a4, a5);
      goto LABEL_18;
    }
    vpx_iwht4x4_1_add_c(v9, (unsigned __int8 *)a4, a5);
  }
LABEL_16:
  if (a6 == 1)
  {
LABEL_17:
    v8->i32[0] = 0;
    return;
  }
LABEL_18:
  if (a3 <= 2 && a6 <= 10)
  {
    bzero(v8, 4 * (16 << a3));
    return;
  }
LABEL_49:
  if (a3 == 3 && a6 <= 34)
    bzero(v8, 0x400uLL);
  else
    bzero(v8, 4 * (16 << (2 * a3)));
}

void parse_block(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6, char a7)
{
  unsigned __int16 *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int8x16_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _DWORD *v45;
  unsigned __int8 *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int m;
  int v57;
  _DWORD *v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  int v63;
  int i;
  int v65;
  _DWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  int v72;
  int v73;
  int j;
  int v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int k;
  int v88;
  _DWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  BOOL v98;
  int v99;
  int v100;
  int v101;
  int v102;
  _DWORD *v103;
  uint64_t v104;
  unsigned __int16 *v105;
  uint64_t v106;
  uint64_t v107;
  __int128 v108;
  int v109;
  __int128 v110;
  unsigned int v111;
  int v112;
  int v113;
  int v114;

  v12 = (unsigned __int16 *)(a1 + 13440);
  v13 = 1 << (a6 - 1);
  v14 = 1 << (a7 - 1);
  v15 = *(_DWORD *)(a2 + 1976) - a4;
  if (v13 >= v15)
    v16 = v15;
  else
    v16 = v13;
  v17 = *(_DWORD *)(a2 + 1968) - a3;
  if (v14 >= v17)
    v18 = v17;
  else
    v18 = v14;
  v19 = (unsigned __int8 *)set_offsets(a2 + 656, a1 + 13328, a5, a3, a4, 1 << (a6 - 1), 1 << (a7 - 1), v16, v18, a6, SHIWORD(a6), a7);
  if (a5 >= 3 && *(_QWORD *)(a2 + 972) && ss_size_lookup[4 * a5 + 2 * *(int *)(a2 + 972) + *(int *)(a2 + 976)] == 13)
    vpx_internal_error(*(_QWORD *)(a1 + 13968), 7, "Invalid block size.");
  vp9_read_mode_info(a1, a2, a3, a4, v16, v18, v20, v21, v22, v23, v24, v25, v26);
  if (v19[3])
  {
    bzero(*(void **)(a1 + 13392), *v12);
    bzero(*(void **)(a1 + 13400), v12[1]);
    bzero(*(void **)(a1 + 13528), v12[68]);
    bzero(*(void **)(a1 + 13536), v12[69]);
    bzero(*(void **)(a1 + 13664), v12[136]);
    bzero(*(void **)(a1 + 13672), v12[137]);
  }
  if ((char)v19[8] > 0)
  {
    if (v19[3])
      goto LABEL_78;
    v27 = *(_DWORD *)(a1 + 13820);
    v111 = a5;
    if (v27 < 0)
    {
      v28 = v12[1];
      v29 = (v27 >> (*(_DWORD *)(a1 + 13336) + 5)) + *v12;
      v30 = *(_DWORD *)(a1 + 13828);
      if ((v30 & 0x80000000) == 0)
        goto LABEL_17;
    }
    else
    {
      v28 = v12[1];
      v29 = *v12;
      v30 = *(_DWORD *)(a1 + 13828);
      if ((v30 & 0x80000000) == 0)
      {
LABEL_17:
        v31 = 0;
        goto LABEL_49;
      }
    }
    v31 = v30 >> (*(_DWORD *)(a1 + 13340) + 5);
LABEL_49:
    v59 = 0;
    v60 = v19[2];
    v106 = *(_QWORD *)(a1 + 13328);
    v108 = *(_OWORD *)(v12 + 76);
    v110 = *(_OWORD *)(a1 + 13456);
    v104 = *(_QWORD *)(a1 + 13728);
    v61 = v31 + v28;
    *(_DWORD *)(a1 + 13800) = v29 & (v27 >> 31);
    *(_DWORD *)(a1 + 13804) = v61 & (v30 >> 31);
    v112 = v61;
    if (v61 >= 1 && v29 >= 1)
    {
      v62 = 0;
      v59 = 0;
      v63 = 1 << v60;
      do
      {
        for (i = 0; i < v29; i += v63)
        {
          v65 = vp9_decode_block_tokens(a1, 0, (uint64_t *)&vp9_default_scan_orders + 3 * v60, i, v62, v60, (char)v19[4]);
          v66 = *(_DWORD **)(a1 + 13456);
          *v66 = v65;
          *(_QWORD *)(a1 + 13328) += 4 * (16 << (2 * v60));
          *(_QWORD *)(a1 + 13456) = v66 + 1;
          v59 += v65;
        }
        v62 += v63;
      }
      while (v62 < v112);
      v27 = *(_DWORD *)(a1 + 13820);
      v30 = *(_DWORD *)(a1 + 13828);
    }
    v67 = *v19;
    v68 = *(int *)(a1 + 13472);
    v69 = *(int *)(a1 + 13476);
    v70 = uv_txsize_lookup[16 * v67 + 4 * v19[2] + 2 * v68 + v69];
    v71 = ((v27 >> 31) & (v27 >> (v68 + 5))) + v12[68];
    LODWORD(v69) = ((v30 >> 31) & (v30 >> (v69 + 5))) + v12[69];
    *(_DWORD *)(a1 + 13800) = (v27 >> 31) & v71;
    *(_DWORD *)(a1 + 13804) = (v30 >> 31) & v69;
    v113 = v69;
    if ((int)v69 >= 1 && v71 >= 1)
    {
      v72 = 0;
      v73 = 1 << v70;
      do
      {
        for (j = 0; j < v71; j += v73)
        {
          v75 = vp9_decode_block_tokens(a1, 1, (uint64_t *)&vp9_default_scan_orders + 3 * v70, j, v72, v70, (char)v19[4]);
          v76 = *(_DWORD **)(a1 + 13592);
          *v76 = v75;
          *(_QWORD *)(a1 + 13464) += 4 * (16 << (2 * v70));
          *(_QWORD *)(a1 + 13592) = v76 + 1;
          v59 += v75;
        }
        v72 += v73;
      }
      while (v72 < v113);
      v67 = *v19;
      v27 = *(_DWORD *)(a1 + 13820);
      v30 = *(_DWORD *)(a1 + 13828);
    }
    v77 = *(int *)(a1 + 13608);
    v78 = *(int *)(a1 + 13612);
    v79 = uv_txsize_lookup[16 * v67 + 4 * v19[2] + 2 * v77 + v78];
    LODWORD(v77) = v27 >> (v77 + 5);
    v80 = v27 >> 31;
    v81 = (v80 & v77) + v12[136];
    v82 = v30 >> (v78 + 5);
    v83 = v30 >> 31;
    v84 = (v83 & v82) + v12[137];
    *(_DWORD *)(a1 + 13800) = v80 & v81;
    *(_DWORD *)(a1 + 13804) = v83 & v84;
    v114 = v84;
    if (v84 >= 1 && v81 >= 1)
    {
      v85 = 0;
      v86 = 1 << v79;
      do
      {
        for (k = 0; k < v81; k += v86)
        {
          v88 = vp9_decode_block_tokens(a1, 2, (uint64_t *)&vp9_default_scan_orders + 3 * v79, k, v85, v79, (char)v19[4]);
          v89 = *(_DWORD **)(a1 + 13728);
          *v89 = v88;
          *(_QWORD *)(a1 + 13600) += 4 * (16 << (2 * v79));
          *(_QWORD *)(a1 + 13728) = v89 + 1;
          v59 += v88;
        }
        v85 += v86;
      }
      while (v85 < v114);
    }
    if (v111 >= 3 && !v59)
    {
      v19[3] = 1;
      *(_QWORD *)(a1 + 13328) = v106;
      *(_OWORD *)(a1 + 13456) = v110;
      *(_OWORD *)(v12 + 76) = v108;
      *(_QWORD *)(a1 + 13728) = v104;
    }
    goto LABEL_78;
  }
  v32 = *(_DWORD *)(a1 + 13820);
  if (v32 < 0)
  {
    v33 = v12[1];
    v34 = (v32 >> (*(_DWORD *)(a1 + 13336) + 5)) + *v12;
    v35 = *(_DWORD *)(a1 + 13828);
    if ((v35 & 0x80000000) == 0)
      goto LABEL_20;
LABEL_22:
    v36 = v35 >> (*(_DWORD *)(a1 + 13340) + 5);
    goto LABEL_23;
  }
  v33 = v12[1];
  v34 = *v12;
  v35 = *(_DWORD *)(a1 + 13828);
  if (v35 < 0)
    goto LABEL_22;
LABEL_20:
  v36 = 0;
LABEL_23:
  v37 = v19[2];
  v38 = (v36 + v33);
  *(_DWORD *)(a1 + 13800) = v34 & (v32 >> 31);
  *(_DWORD *)(a1 + 13804) = v38 & (v35 >> 31);
  v107 = v38;
  v105 = v12;
  if ((int)v38 >= 1 && (int)v34 >= 1)
  {
    v39 = 0;
    v40 = 0;
    v41 = 1 << v37;
    while (1)
    {
      v42 = 0;
      v109 = v39;
      v43 = 12 * v39 + 20;
      do
      {
        v46 = v19 + 1;
        if (*v19 <= 2u)
        {
          v46 = (unsigned __int8 *)(**(_QWORD **)(a1 + 13776) + v43);
          if (v19[3])
            goto LABEL_29;
        }
        else if (v19[3])
        {
          goto LABEL_29;
        }
        v47 = (uint64_t *)(&vp9_default_scan_orders + 3 * v37);
        if (!*(_DWORD *)(a1 + 13956))
          v47 = (uint64_t *)(&vp9_scan_orders + 12 * v37 + 3 * intra_mode_to_tx_type_lookup[*v46]);
        v44 = vp9_decode_block_tokens(a1, 0, v47, v42, v40, v37, (char)v19[4]);
        v45 = *(_DWORD **)(a1 + 13456);
        *v45 = v44;
        *(_QWORD *)(a1 + 13328) += 4 * (16 << (2 * v37));
        *(_QWORD *)(a1 + 13456) = v45 + 1;
LABEL_29:
        v42 += v41;
        v43 += 12 * (1 << v37);
      }
      while (v42 < v34);
      v40 += v41;
      v39 = v109 + 2 * (1 << v37);
      if (v40 >= v107)
      {
        v32 = *(_DWORD *)(a1 + 13820);
        v35 = *(_DWORD *)(a1 + 13828);
        break;
      }
    }
  }
  v48 = *v19;
  v49 = *(int *)(a1 + 13472);
  v50 = *(int *)(a1 + 13476);
  v51 = uv_txsize_lookup[16 * v48 + 4 * v19[2] + 2 * v49 + v50];
  v52 = ((v32 >> 31) & (v32 >> (v49 + 5))) + v12[68];
  v53 = ((v35 >> 31) & (v35 >> (v50 + 5))) + v12[69];
  *(_DWORD *)(a1 + 13800) = (v32 >> 31) & v52;
  *(_DWORD *)(a1 + 13804) = (v35 >> 31) & v53;
  if (v53 >= 1 && v52 >= 1 && !v19[3])
  {
    v54 = 0;
    v55 = 1 << v51;
LABEL_43:
    for (m = 0; m < v52; m += v55)
    {
      if (!v19[3])
      {
        v57 = vp9_decode_block_tokens(a1, 1, (uint64_t *)&vp9_default_scan_orders + 3 * v51, m, v54, v51, (char)v19[4]);
        v58 = *(_DWORD **)(a1 + 13592);
        *v58 = v57;
        *(_QWORD *)(a1 + 13464) += 4 * (16 << (2 * v51));
        *(_QWORD *)(a1 + 13592) = v58 + 1;
      }
    }
    while (1)
    {
      v54 += v55;
      if (v54 >= v53)
        break;
      if (!v19[3])
        goto LABEL_43;
    }
    v48 = *v19;
    v32 = *(_DWORD *)(a1 + 13820);
    v35 = *(_DWORD *)(a1 + 13828);
  }
  v90 = *(int *)(a1 + 13608);
  v91 = *(int *)(a1 + 13612);
  v92 = uv_txsize_lookup[16 * v48 + 4 * v19[2] + 2 * v90 + v91];
  LODWORD(v90) = v32 >> (v90 + 5);
  v93 = v32 >> 31;
  v94 = (v93 & v90) + v105[136];
  v95 = v35 >> (v91 + 5);
  v96 = v35 >> 31;
  v97 = (v96 & v95) + v105[137];
  *(_DWORD *)(a1 + 13800) = v93 & v94;
  *(_DWORD *)(a1 + 13804) = v96 & v97;
  v98 = v97 < 1 || v94 < 1;
  if (!v98 && !v19[3])
  {
    v99 = 0;
    v100 = 1 << v92;
LABEL_82:
    v101 = 0;
    do
    {
      if (!v19[3])
      {
        v102 = vp9_decode_block_tokens(a1, 2, (uint64_t *)&vp9_default_scan_orders + 3 * v92, v101, v99, v92, (char)v19[4]);
        v103 = *(_DWORD **)(a1 + 13728);
        *v103 = v102;
        *(_QWORD *)(a1 + 13600) += 4 * (16 << (2 * v92));
        *(_QWORD *)(a1 + 13728) = v103 + 1;
      }
      v101 += v100;
    }
    while (v101 < v94);
    while (1)
    {
      v99 += v100;
      if (v99 >= v97)
        break;
      if (!v19[3])
        goto LABEL_82;
    }
  }
LABEL_78:
  *(_DWORD *)(a1 + 13960) |= (*(_DWORD *)(a1 + 28) - 65) < 0x3FFFFFBF;
}

uint64_t set_offsets(uint64_t a1, uint64_t a2, char a3, int a4, int a5, int a6, int a7, int a8, int a9, char a10, __int16 a11, char a12)
{
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;

  v12 = *(int *)(a1 + 1324);
  v13 = a5 + v12 * a4;
  v14 = *(_QWORD *)(a1 + 1480);
  v15 = 8 * v13;
  *(_QWORD *)(a2 + 448) = v14 + v15;
  *(_QWORD *)(v14 + v15) = *(_QWORD *)(a1 + 1424) + 68 * v13;
  ***(_BYTE ***)(a2 + 448) = a3;
  if (a9 >= 1)
  {
    v16 = 0;
    for (i = 0; i != a9; ++i)
    {
      if ((i == 0) < a8)
      {
        if (i)
          v18 = v16;
        else
          v18 = v16 + 1;
        v19 = (__PAIR128__(a8, i) - 1) >> 64;
        v20 = 8 * v18;
        do
        {
          *(_QWORD *)(*(_QWORD *)(a2 + 448) + v20) = **(_QWORD **)(a2 + 448);
          v20 += 8;
          --v19;
        }
        while (v19);
      }
      v16 += v12;
    }
  }
  v21 = *(_DWORD *)(a2 + 8);
  v22 = *(_DWORD *)(a2 + 12);
  *(_WORD *)(a2 + 112) = (2 * a6) >> v21;
  *(_WORD *)(a2 + 114) = (2 * a7) >> v22;
  *(_BYTE *)(a2 + 116) = a10 - v21;
  *(_BYTE *)(a2 + 117) = a12 - v22;
  v24 = *(_DWORD *)(a2 + 144);
  v23 = *(_DWORD *)(a2 + 148);
  *(_WORD *)(a2 + 248) = (2 * a6) >> v24;
  *(_WORD *)(a2 + 250) = (2 * a7) >> v23;
  *(_BYTE *)(a2 + 252) = a10 - v24;
  *(_BYTE *)(a2 + 253) = a12 - v23;
  v25 = *(_DWORD *)(a2 + 280);
  *(_WORD *)(a2 + 384) = (2 * a6) >> v25;
  v26 = *(_DWORD *)(a2 + 284);
  *(_WORD *)(a2 + 386) = (2 * a7) >> v26;
  *(_BYTE *)(a2 + 388) = a10 - v25;
  v27 = 2 * (a4 & 7);
  *(_BYTE *)(a2 + 389) = a12 - v26;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a2 + 536) + ((2 * a5) >> v21);
  *(_QWORD *)(a2 + 72) = a2 + 560 + (v27 >> v22);
  *(_QWORD *)(a2 + 200) = *(_QWORD *)(a2 + 544) + ((2 * a5) >> v24);
  *(_QWORD *)(a2 + 208) = a2 + 560 + (v27 >> v23) + 16;
  *(_QWORD *)(a2 + 336) = *(_QWORD *)(a2 + 552) + ((2 * a5) >> v25);
  *(_QWORD *)(a2 + 344) = a2 + 560 + (v27 >> v26) + 32;
  v28 = *(_DWORD *)(a1 + 1312);
  v29 = *(_DWORD *)(a1 + 1320);
  *(_DWORD *)(a2 + 496) = -64 * a4;
  *(_DWORD *)(a2 + 500) = (v28 - (a7 + a4)) << 6;
  *(_DWORD *)(a2 + 488) = -64 * a5;
  *(_DWORD *)(a2 + 492) = (v29 - (a6 + a5)) << 6;
  v30 = *(_QWORD *)(a2 + 448);
  if (!a4)
  {
    *(_QWORD *)(a2 + 464) = 0;
    if (*(_DWORD *)(a2 + 432) < a5)
      goto LABEL_13;
LABEL_15:
    v31 = 0;
    goto LABEL_16;
  }
  *(_QWORD *)(a2 + 464) = *(_QWORD *)(v30 - 8 * *(int *)(a2 + 440));
  if (*(_DWORD *)(a2 + 432) >= a5)
    goto LABEL_15;
LABEL_13:
  v31 = *(_QWORD *)(v30 - 8);
LABEL_16:
  *(_QWORD *)(a2 + 456) = v31;
  v32 = *(_QWORD *)(a1 + 18248) + 224 * *(int *)(a1 + 944);
  v33 = *(_QWORD *)(v32 + 144);
  v34 = *(_QWORD *)(v32 + 152);
  v35 = *(_QWORD *)(v32 + 160);
  v36 = *(_DWORD *)(v32 + 104);
  LODWORD(v32) = *(_DWORD *)(v32 + 124);
  *(_QWORD *)(a2 + 16) = v33 + ((8 * a5) >> *(_DWORD *)(a2 + 8)) + v36 * (uint64_t)((8 * a4) >> *(_DWORD *)(a2 + 12));
  *(_DWORD *)(a2 + 24) = v36;
  *(_QWORD *)(a2 + 152) = v34 + ((8 * a5) >> *(_DWORD *)(a2 + 144)) + (int)v32 * (uint64_t)((8 * a4) >> v23);
  *(_DWORD *)(a2 + 160) = v32;
  *(_QWORD *)(a2 + 288) = v35 + ((8 * a5) >> v25) + (int)v32 * (uint64_t)((8 * a4) >> v26);
  *(_DWORD *)(a2 + 296) = v32;
  return *(_QWORD *)v30;
}

BOOL tile_worker_hook(uint64_t a1, uint64_t a2)
{
  int v4;
  const float *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _DWORD *v9;
  int v10;
  int v11;
  int v12;
  _BOOL8 result;
  int v14;
  int k;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  pthread_cond_t *v20;
  uint64_t v21;
  __int32 v22;
  int v23;
  const float *v24;
  int32x2_t v25;
  int v26;
  int v27;
  int32x2_t v28;
  uint64_t v29;
  unint64_t *v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  void *v43;
  int i;
  uint64_t j;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  pthread_cond_t *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  pthread_cond_t *v71;
  int v72;
  int v73;
  _DWORD *v74;
  _OWORD *v75;
  void *v76;
  int *__attribute__((__org_typedef(jmp_buf))) v77;
  uint64_t v78;
  const float *v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  int32x2_t *v84;

  v84 = (int32x2_t *)(a1 + 13752);
  v4 = *(_DWORD *)(a2 + 18888);
  v5 = (const float *)(a2 + 18888);
  v83 = 0;
  v6 = *(_QWORD *)(a1 + 13304);
  v7 = *(_QWORD *)(a1 + 13312);
  v80 = *(_DWORD *)(a1 + 8);
  v8 = setjmp((int *)(a1 + 69372));
  v9 = (_DWORD *)(a1 + 69368);
  if (!v8)
  {
    v78 = v6;
    *v9 = 1;
    *(_DWORD *)(a1 + 13960) = 0;
    v77 = (int *)(a1 + 69280);
    v76 = (void *)(a1 + 13984);
    v75 = (_OWORD *)(a2 + 2036);
    v79 = v5;
    do
    {
      v21 = a2 + 19032 + 24 * v80;
      bzero(v76, 0x1000uLL);
      v22 = *(_DWORD *)(v21 + 16);
      v74 = (_DWORD *)(v21 + 16);
      v23 = *(_DWORD *)(a2 + 1968);
      v24 = v5;
      v25 = (int32x2_t)vld1_dup_f32(v24++);
      v26 = v23 & (v23 >> 31);
      v27 = 8 * ((v23 + 7) >> 3 >> *(_DWORD *)v24);
      if (v27 < v23)
        v23 = v27;
      v84->i32[0] = v26;
      v84->i32[1] = v23;
      v28.i32[0] = v22;
      v28.i32[1] = v22 + 1;
      v84[1] = vmin_s32(vshl_n_s32(vshl_s32(vmul_s32(vdup_n_s32((*(_DWORD *)(a2 + 1976) + 7) >> 3), v28), vneg_s32(v25)), 3uLL), vdup_n_s32(*(_DWORD *)(a2 + 1976)));
      v30 = *(unint64_t **)v21;
      v29 = *(_QWORD *)(v21 + 8);
      v31 = *(void (**)(uint64_t))(a2 + 20664);
      v32 = *(_QWORD *)(a2 + 20672);
      if ((unint64_t)(v29 - 1) >= *(_QWORD *)a1 - (_QWORD)v30)
        vpx_internal_error((uint64_t)v77, 7, "Truncated packet or corrupt tile length");
      if (vpx_reader_init(a1 + 16, v30, v29, v31, v32))
        vpx_internal_error((uint64_t)v77, 2, "Failed to allocate BOOL decoder %d", 1);
      *(_QWORD *)(a1 + 13328) = v76;
      *(_QWORD *)(a1 + 13864) = *(_QWORD *)(a2 + 18920);
      v33 = *(_OWORD *)(a2 + 2020);
      *(_OWORD *)(a1 + 13408) = *(_OWORD *)(a2 + 2004);
      *(_OWORD *)(a1 + 13424) = v33;
      v34 = *(int *)(a2 + 1976);
      v35 = *(_QWORD *)(a2 + 18920);
      *(_QWORD *)(a1 + 13832) = *(_QWORD *)(a2 + 5560);
      *(_QWORD *)(a1 + 13464) = v76;
      *(_QWORD *)(a1 + 13872) = v35 + 2 * ((v34 + 7) & 0x7FFFFFFFFFFFFFF8);
      v36 = *(_OWORD *)(a2 + 2052);
      *(_OWORD *)(a1 + 13544) = *v75;
      *(_OWORD *)(a1 + 13560) = v36;
      v37 = *(int *)(a2 + 1976);
      v38 = *(_QWORD *)(a2 + 18920);
      *(_QWORD *)(a1 + 13832) = *(_QWORD *)(a2 + 5560);
      *(_QWORD *)(a1 + 13600) = v76;
      *(_QWORD *)(a1 + 13880) = v38 + 4 * ((v37 + 7) & 0x3FFFFFFFFFFFFFF8);
      v39 = *(_OWORD *)(a2 + 2052);
      *(_OWORD *)(a1 + 13680) = *v75;
      *(_OWORD *)(a1 + 13696) = v39;
      v40 = *(_QWORD *)(a2 + 5560);
      LODWORD(v38) = *(_DWORD *)(a2 + 1932);
      v41 = *(_DWORD *)(a2 + 1980);
      v42 = *(_QWORD *)(a2 + 18912);
      *(_QWORD *)(a1 + 13832) = v40;
      *(_QWORD *)(a1 + 13936) = v42;
      *(_DWORD *)(a1 + 13768) = v41;
      v5 = v79;
      if ((_DWORD)v38)
      {
        v43 = (void *)(v40 + 126);
        if (*(_BYTE *)(a2 + 1948))
          v43 = &vp9_kf_partition_probs;
      }
      else
      {
        v43 = &vp9_kf_partition_probs;
      }
      *(_QWORD *)(a1 + 13808) = v43;
      *(_QWORD *)(a1 + 13968) = v77;
      for (i = v84->i32[0]; ; i = v82 + 8)
      {
        v82 = i;
        if (i >= v84->i32[1])
          break;
        *(_OWORD *)(a1 + 13904) = 0u;
        *(_OWORD *)(a1 + 13920) = 0u;
        *(_OWORD *)(a1 + 13888) = 0u;
        *(_QWORD *)(a1 + 13944) = 0;
        for (j = v84[1].u32[0]; (int)j < v84[1].i32[1]; j = (j + 8))
          decode_partition(a1, a2, v82, j, 0xCu, 4);
        if (*((_DWORD *)v5 + 453) && *(_DWORD *)(a2 + 5384) && !*((_DWORD *)v5 + 3))
        {
          v72 = *(_DWORD *)(a2 + 1968);
          v46 = 1 << *(_DWORD *)v5;
          v47 = *(_DWORD *)(a1 + 13960);
          pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 48));
          *(_DWORD *)(v7 + 80) |= v47;
          pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 48));
          v48 = (uint64_t)v82 >> 3;
          pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(v7 + 56) + (v48 << 6)));
          v49 = *(_QWORD *)(v7 + 72);
          v50 = 4 * (v82 >> 3);
          v51 = *(_DWORD *)(v49 + v50) + 1;
          *(_DWORD *)(v49 + v50) = v51;
          if (v51 == v46)
          {
            v52 = (pthread_cond_t *)(*(_QWORD *)(v7 + 64) + 48 * (int)v48);
            if (((v72 + 7) >> 3) - 1 == v82 >> 3)
              pthread_cond_broadcast(v52);
            else
              pthread_cond_signal(v52);
          }
          pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(v7 + 56) + (v48 << 6)));
          v5 = v79;
        }
      }
      if (*v74 == ~(-1 << v4))
      {
        v53 = *(_QWORD *)(a1 + 40);
        if ((*(_DWORD *)(a1 + 28) - 9) <= 0x36)
        {
          v54 = *(_DWORD *)(a1 + 28);
          do
          {
            v55 = v54 - 8;
            v56 = v53 - 1;
            v57 = v54 - 17;
            --v53;
            v54 -= 8;
          }
          while (v57 < 0x37);
          *(_DWORD *)(a1 + 28) = v55;
          *(_QWORD *)(a1 + 40) = v56;
          v53 = v56;
        }
        v83 = v53;
      }
      v58 = *(_DWORD *)(a1 + 13960);
      if (v58)
        break;
      v59 = v80++;
    }
    while (v59 < *(_DWORD *)(a1 + 12));
    if (!*((_DWORD *)v5 + 453))
      goto LABEL_68;
    v60 = *(_DWORD *)(a1 + 12);
    if (v80 < v60 && *(_DWORD *)(a2 + 5384) && !*((_DWORD *)v5 + 3))
    {
      v81 = v80 + 1;
      v62 = *(_DWORD *)(a2 + 1968);
      v61 = *(_DWORD *)(a1 + 13960);
      if (v62 >= 1)
      {
        v63 = 1 << *(_DWORD *)v5;
        v64 = v60 - v81;
        do
        {
          v73 = v64;
          v65 = 0;
          v66 = 0;
          v67 = 0;
          v68 = 0;
          do
          {
            pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 48));
            *(_DWORD *)(v7 + 80) |= 1u;
            pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 48));
            pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(v7 + 56) + v66));
            v69 = *(_QWORD *)(v7 + 72);
            v70 = *(_DWORD *)(v69 + 4 * v68) + 1;
            *(_DWORD *)(v69 + 4 * v68) = v70;
            if (v70 == v63)
            {
              v71 = (pthread_cond_t *)(*(_QWORD *)(v7 + 64) + v67);
              if (((v62 + 7) >> 3) - 1 == v68)
                pthread_cond_broadcast(v71);
              else
                pthread_cond_signal(v71);
            }
            pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(v7 + 56) + v66));
            v67 += 48;
            v66 += 64;
            ++v68;
            v65 += 8;
          }
          while (v62 > v65);
          v64 = v73 - 1;
        }
        while (v73);
        v58 = *(_DWORD *)(a1 + 13960);
        v61 = v58;
        if (!*((_DWORD *)v5 + 453))
          goto LABEL_68;
      }
    }
    else
    {
      v61 = *(_DWORD *)(a1 + 13960);
    }
    v58 = v61;
    if (!v61)
    {
      if (*(_DWORD *)(a2 + 5384) && !*((_DWORD *)v5 + 3))
      {
        vp9_loopfilter_rows(v78, v7);
        v58 = *(_DWORD *)(a1 + 13960);
      }
      else
      {
        v58 = 0;
      }
    }
LABEL_68:
    *(_QWORD *)a1 = v83;
    return v58 == 0;
  }
  *v9 = 0;
  *(_DWORD *)(a1 + 13960) = 1;
  *(_QWORD *)a1 = 0;
  if (!*((_DWORD *)v5 + 453) || !*(_DWORD *)(a2 + 5384) || *((_DWORD *)v5 + 3))
    return 0;
  v10 = *(_DWORD *)(a1 + 12) - v80;
  v11 = *(_DWORD *)(a2 + 1968);
  v12 = 1 << *(_DWORD *)v5;
  do
  {
    v14 = v10;
    if (v11 > 0)
    {
      for (k = 0; k < v11; k += 8)
      {
        pthread_mutex_lock(*(pthread_mutex_t **)(v7 + 48));
        *(_DWORD *)(v7 + 80) |= 1u;
        pthread_mutex_unlock(*(pthread_mutex_t **)(v7 + 48));
        v16 = (uint64_t)k >> 3;
        pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(v7 + 56) + (v16 << 6)));
        v17 = *(_QWORD *)(v7 + 72);
        v18 = 4 * (k >> 3);
        v19 = *(_DWORD *)(v17 + v18) + 1;
        *(_DWORD *)(v17 + v18) = v19;
        if (v19 == v12)
        {
          v20 = (pthread_cond_t *)(*(_QWORD *)(v7 + 64) + 48 * (int)v16);
          if (((v11 + 7) >> 3) - 1 == (_DWORD)v16)
            pthread_cond_broadcast(v20);
          else
            pthread_cond_signal(v20);
        }
        pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(v7 + 56) + (v16 << 6)));
      }
    }
    v10 = v14 - 1;
    result = 0;
  }
  while (v14);
  return result;
}

uint64_t compare_tile_buffers(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = v2 > v3;
  v5 = v2 < v3;
  v6 = v4;
  return (v5 - v6);
}

uint64_t decode_partition(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  char v24;
  void *v25;
  void *v26;
  char *v27;
  size_t __len;
  int v29;
  uint64_t v30;

  v6 = *(_DWORD *)(a2 + 1968);
  v7 = *(_DWORD *)(a2 + 1976);
  if (v6 > (int)a3 && v7 > (int)a4)
  {
    v13 = result;
    v14 = (a6 - 1);
    __len = (1 << (a6 - 1));
    v15 = (__len >> 1) + a3;
    v29 = (__len >> 1) + a4;
    result = read_partition(result, a3, a4, (int)v15 < v6, v29 < v7, a6 - 1);
    v16 = a5;
    v17 = result;
    v18 = subsize_lookup[13 * result + a5];
    v30 = subsize_lookup[13 * result + a5];
    if ((_DWORD)v14)
    {
      switch((char)result)
      {
        case 0:
          v19 = v13;
          v20 = a2;
          v21 = a3;
          v22 = a4;
          v18 = v30;
          v23 = a6;
          goto LABEL_11;
        case 1:
          result = (uint64_t)decode_block(v13, a2, a3, a4, v30, a6, v14);
          v16 = a5;
          if ((int)v15 >= v6)
            goto LABEL_17;
          v19 = v13;
          v20 = a2;
          v21 = v15;
          v22 = a4;
          v18 = v30;
          v23 = a6;
          v24 = v14;
          break;
        case 2:
          result = (uint64_t)decode_block(v13, a2, a3, a4, v30, v14, a6);
          v16 = a5;
          if (v29 >= v7)
            goto LABEL_17;
          v19 = v13;
          v20 = a2;
          v21 = a3;
          v22 = v29;
          v18 = v30;
          v23 = v14;
LABEL_11:
          v24 = a6;
          break;
        case 3:
          decode_partition(v13, a2, a3, a4, v30, v14);
          decode_partition(v13, a2, a3, v29, v30, v14);
          decode_partition(v13, a2, v15, a4, v30, v14);
          result = decode_partition(v13, a2, v15, v29, v30, v14);
          goto LABEL_16;
        default:
          goto LABEL_17;
      }
    }
    else
    {
      *(_BYTE *)(v13 + 13736) = 1u >> ((result & 2) != 0);
      *(_BYTE *)(v13 + 13737) = 1u >> (result & 1);
      v19 = v13;
      v20 = a2;
      v21 = a3;
      v22 = a4;
      v23 = 1;
      v24 = 1;
    }
    result = (uint64_t)decode_block(v19, v20, v21, v22, v18, v23, v24);
LABEL_16:
    v16 = a5;
LABEL_17:
    if (v16 >= 3 && (v16 == 3 || v17 != 3))
    {
      v25 = (void *)(*(_QWORD *)(v13 + 13936) + (int)a4);
      v26 = (void *)(v13 + 13944 + (a3 & 7));
      v27 = &partition_context_lookup[2 * v30];
      memset(v25, *v27, __len);
      return (uint64_t)memset(v26, v27[1], __len);
    }
  }
  return result;
}

_DWORD *decode_block(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6, char a7)
{
  unsigned __int16 *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  int8x16_t v24;
  unsigned __int8 *v25;
  _DWORD *result;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint8x8_t *v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t *v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  _DWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  _DWORD *v87;
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  int v99;
  char *v101;
  _QWORD *v102;
  unsigned __int16 *v103;
  unsigned int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;

  v11 = (unsigned __int16 *)(a1 + 13440);
  v12 = 1 << (a6 - 1);
  v13 = 1 << (a7 - 1);
  v14 = *(_DWORD *)(a2 + 1976) - a4;
  if (v12 >= v14)
    v15 = v14;
  else
    v15 = v12;
  v16 = *(_DWORD *)(a2 + 1968) - a3;
  if (v13 >= v16)
    v17 = v16;
  else
    v17 = v13;
  v90 = a2 + 656;
  v106 = a1 + 13328;
  v91 = 1 << (a6 - 1);
  v89 = 1 << (a7 - 1);
  v107 = (unsigned __int8 *)set_offsets(a2 + 656, a1 + 13328, a5, a3, a4, v91, v89, v15, v17, a6, SHIWORD(a6), a7);
  if (a5 >= 3 && *(_QWORD *)(a2 + 972) && ss_size_lookup[4 * a5 + 2 * *(int *)(a2 + 972) + *(int *)(a2 + 976)] == 13)
    vpx_internal_error(*(_QWORD *)(a1 + 13968), 7, "Invalid block size.");
  vp9_read_mode_info(a1, a2, a3, a4, v15, v17, v18, v19, v20, v21, v22, v23, v24);
  v25 = v107;
  if (v107[3])
  {
    bzero(*(void **)(a1 + 13392), *v11);
    bzero(*(void **)(a1 + 13400), v11[1]);
    bzero(*(void **)(a1 + 13528), v11[68]);
    bzero(*(void **)(a1 + 13536), v11[69]);
    bzero(*(void **)(a1 + 13664), v11[136]);
    bzero(*(void **)(a1 + 13672), v11[137]);
    v25 = v107;
  }
  v92 = a3;
  v93 = a4;
  v94 = a2;
  if ((char)v25[8] <= 0)
  {
    v32 = 0;
    v96 = v25 + 1;
    v97 = v25 + 2;
    v95 = v25 + 6;
    result = (_DWORD *)a1;
    v33 = v106;
    while (1)
    {
      v34 = v97;
      if (v32)
      {
        v34 = &uv_txsize_lookup[16 * *v25
                              + 4 * v25[2]
                              + 2 * *(int *)(v33 + 136 * v32 + 8)
                              + *(int *)(v33 + 136 * v32 + 12)];
        result = (_DWORD *)a1;
      }
      v35 = result[3455];
      if (v35 < 0)
      {
        v36 = v35 >> (*(_DWORD *)(v33 + 136 * v32 + 8) + 5);
        v37 = *(_DWORD *)(a1 + 13828);
        if ((v37 & 0x80000000) == 0)
        {
LABEL_24:
          v38 = 0;
          goto LABEL_27;
        }
      }
      else
      {
        v36 = 0;
        v37 = *(_DWORD *)(a1 + 13828);
        if ((v37 & 0x80000000) == 0)
          goto LABEL_24;
      }
      v38 = v37 >> (*(_DWORD *)(v33 + 136 * v32 + 12) + 5);
LABEL_27:
      v39 = *v34;
      v40 = v33 + 136 * v32;
      v41 = v38 + *(unsigned __int16 *)(v40 + 114);
      v105 = v36 + *(unsigned __int16 *)(v40 + 112);
      *(_DWORD *)(a1 + 13800) = v105 & (v35 >> 31);
      *(_DWORD *)(a1 + 13804) = v41 & (v37 >> 31);
      v98 = v41;
      if ((int)v41 >= 1)
      {
        v42 = v32 ? v95 : v96;
        if ((int)v105 >= 1)
        {
          v43 = 0;
          v44 = 0;
          v45 = v33 + 136 * v32;
          v102 = (_QWORD *)(v45 + 16);
          v46 = (int *)(v45 + 24);
          v101 = (char *)(v45 + 116);
          v47 = 1 << v39;
          do
          {
            v48 = 0;
            v99 = v43;
            v49 = 12 * v43 + 20;
            do
            {
              v50 = v42;
              if (!v32)
              {
                v50 = v42;
                if (*v25 <= 2u)
                  v50 = (unsigned __int8 *)(**(_QWORD **)(a1 + 13776) + v49);
              }
              v51 = (uint8x8_t *)(*v102 + 4 * ((int)v48 + (int)v44 * *v46));
              v52 = *v50;
              vp9_predict_intra_block(v33, *v101, v39, v52, (uint64_t)v51, *v46, (uint64_t)v51, *v46, v48, v44, v32);
              v25 = v107;
              if (!v107[3])
              {
                if (v32)
                {
                  v53 = 0;
                  v55 = (uint64_t *)(&vp9_default_scan_orders + 3 * v39);
                  v54 = a1;
                }
                else
                {
                  v54 = a1;
                  if (*(_DWORD *)(a1 + 13956))
                  {
                    v53 = 0;
                    v55 = (uint64_t *)(&vp9_default_scan_orders + 3 * v39);
                  }
                  else
                  {
                    v53 = intra_mode_to_tx_type_lookup[v52];
                    v55 = (uint64_t *)(&vp9_scan_orders + 12 * v39 + 3 * v53);
                  }
                }
                v56 = vp9_decode_block_tokens(v54, v32, v55, v48, v44, v39, (char)v107[4]);
                v25 = v107;
                if (v56 >= 1)
                {
                  inverse_transform_block_intra(v106, v32, v53, v39, v51, *v46, v56);
                  v25 = v107;
                }
              }
              v48 += v47;
              v49 += 12 * (1 << v39);
              v33 = v106;
            }
            while (v48 < v105);
            v44 += v47;
            v43 = v99 + 2 * (1 << v39);
          }
          while (v44 < v98);
        }
      }
      ++v32;
      result = (_DWORD *)a1;
      if (v32 == 3)
        goto LABEL_80;
    }
  }
  dec_build_inter_predictors_sb((int16x8_t *)a1, a2, v106, a3, a4);
  v25 = v107;
  result = (_DWORD *)a1;
  if (v107[3])
    goto LABEL_80;
  v27 = *(_DWORD *)(a1 + 13820);
  v104 = a5;
  if (v27 < 0)
  {
    v28 = v11[1];
    v29 = (v27 >> (*(_DWORD *)(a1 + 13336) + 5)) + *v11;
    v30 = *(_DWORD *)(a1 + 13828);
    if ((v30 & 0x80000000) == 0)
      goto LABEL_17;
  }
  else
  {
    v28 = v11[1];
    v29 = *v11;
    v30 = *(_DWORD *)(a1 + 13828);
    if ((v30 & 0x80000000) == 0)
    {
LABEL_17:
      v31 = 0;
      goto LABEL_49;
    }
  }
  v31 = v30 >> (*(_DWORD *)(a1 + 13340) + 5);
LABEL_49:
  v57 = v107[2];
  v58 = v31 + v28;
  *(_DWORD *)(a1 + 13800) = v29 & (v27 >> 31);
  *(_DWORD *)(a1 + 13804) = (v31 + v28) & (v30 >> 31);
  if (v31 + v28 < 1 || v29 < 1)
  {
    v60 = 0;
    v64 = (int *)a1;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    v61 = 1 << v57;
    do
    {
      v62 = 0;
      do
      {
        v63 = vp9_decode_block_tokens(a1, 0, (uint64_t *)&vp9_default_scan_orders + 3 * v57, v62, v59, v57, (char)v25[4]);
        if (v63 >= 1)
          inverse_transform_block_inter(v106, 0, v57, (uint8x8_t *)(*(_QWORD *)(a1 + 13344) + 4 * (v62 + v59 * *(_DWORD *)(a1 + 13352))), *(_DWORD *)(a1 + 13352), v63);
        v60 += v63;
        v62 += v61;
        v25 = v107;
      }
      while (v62 < v29);
      v59 += v61;
    }
    while (v59 < v58);
    v27 = *(_DWORD *)(a1 + 13820);
    v64 = (int *)a1;
    v30 = *(_DWORD *)(a1 + 13828);
  }
  v65 = *v25;
  v66 = v64[3368];
  v67 = v64[3369];
  v68 = uv_txsize_lookup[16 * v65 + 4 * v25[2] + 2 * v66 + v67];
  v69 = ((v27 >> 31) & (v27 >> (v66 + 5))) + v11[68];
  v70 = ((v30 >> 31) & (v30 >> (v67 + 5))) + v11[69];
  v64[3450] = (v27 >> 31) & v69;
  v64[3451] = (v30 >> 31) & v70;
  if (v70 < 1 || v69 < 1)
  {
    result = (_DWORD *)a1;
  }
  else
  {
    v103 = v11;
    v71 = 0;
    v72 = 1 << v68;
    result = (_DWORD *)a1;
    do
    {
      v73 = 0;
      do
      {
        v74 = result;
        v75 = vp9_decode_block_tokens((uint64_t)result, 1, (uint64_t *)&vp9_default_scan_orders + 3 * v68, v73, v71, v68, (char)v25[4]);
        if (v75 >= 1)
          inverse_transform_block_inter(v106, 1u, v68, (uint8x8_t *)(*((_QWORD *)v74 + 1685) + 4 * (v73 + v71 * v74[3372])), v74[3372], v75);
        v60 += v75;
        v73 += v72;
        result = v74;
        v25 = v107;
      }
      while (v73 < v69);
      v71 += v72;
    }
    while (v71 < v70);
    v65 = *v107;
    v27 = v74[3455];
    v30 = v74[3457];
    v11 = v103;
  }
  v76 = (int)result[3402];
  v77 = (int)result[3403];
  v78 = uv_txsize_lookup[16 * v65 + 4 * v25[2] + 2 * v76 + v77];
  LODWORD(v76) = v27 >> (v76 + 5);
  v79 = v27 >> 31;
  v80 = (v79 & v76) + v11[136];
  v81 = v30 >> (v77 + 5);
  v82 = v30 >> 31;
  v83 = (v82 & v81) + v11[137];
  result[3450] = v79 & v80;
  result[3451] = v82 & v83;
  if (v83 >= 1 && v80 >= 1)
  {
    v84 = 0;
    v85 = 1 << v78;
    do
    {
      v86 = 0;
      do
      {
        v87 = result;
        v88 = vp9_decode_block_tokens((uint64_t)result, 2, (uint64_t *)&vp9_default_scan_orders + 3 * v78, v86, v84, v78, (char)v25[4]);
        if (v88 >= 1)
          inverse_transform_block_inter(v106, 2u, v78, (uint8x8_t *)(*((_QWORD *)v87 + 1702) + 4 * (v86 + v84 * v87[3406])), v87[3406], v88);
        v60 += v88;
        v86 += v85;
        result = v87;
        v25 = v107;
      }
      while (v86 < v80);
      v84 += v85;
    }
    while (v84 < v83);
  }
  if (v104 >= 3 && !v60)
    v25[3] = 1;
LABEL_80:
  result[3490] |= (result[7] - 65) < 0x3FFFFFBF;
  if (*(_DWORD *)(v94 + 5384))
    return (_DWORD *)vp9_build_mask(v90, v25, v92, v93, v91, v89);
  return result;
}

uint64_t vp9_read_mode_info(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, double a7, double a8, double a9, double a10, double a11, double a12, int8x16_t a13)
{
  uint64_t v13;
  unsigned __int8 *v15;
  _DWORD *v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  void (*v38)(_QWORD, _QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, unsigned __int8 *);
  uint64_t v39;
  uint64_t v40;
  signed int v41;
  signed int v42;
  unsigned int v43;
  unint64_t *v44;
  int v45;
  BOOL v46;
  int v47;
  int v49;
  unsigned int v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint64_t v60;
  uint8x16_t *v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  uint8x16_t v71;
  uint16x8_t v72;
  uint32x4_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  uint32x4_t v76;
  uint64x2_t v77;
  uint16x8_t v78;
  uint32x4_t v79;
  uint64x2_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  uint64x2_t v83;
  uint32x4_t v84;
  uint64x2_t v85;
  uint64x2_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  unsigned int v95;
  int i;
  int v97;
  int v98;
  int v99;
  uint64_t v100;
  signed int v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  int v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  int v111;
  int32x4_t v112;
  uint64_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int8x16_t *v121;
  int8x16_t v122;
  int32x4_t v123;
  uint64_t v124;
  int v125;
  int32x4_t v126;
  int32x4_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  int v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  unsigned int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  unint64_t v148;
  void (*v149)(_QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *);
  uint64_t v150;
  signed int v151;
  signed int v152;
  unsigned int v153;
  unint64_t *v154;
  int v155;
  BOOL v156;
  int v157;
  int v158;
  unsigned int v159;
  int v160;
  int8x16_t v161;
  int32x4_t v162;
  int32x4_t v163;
  int8x16_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  uint64_t v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t v174;
  uint64_t v175;
  uint8x16_t *v176;
  int8x16_t v177;
  int8x16_t v178;
  int8x16_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  uint8x16_t v183;
  uint16x8_t v184;
  uint32x4_t v185;
  uint64x2_t v186;
  uint64x2_t v187;
  uint32x4_t v188;
  uint64x2_t v189;
  uint16x8_t v190;
  uint32x4_t v191;
  uint64x2_t v192;
  uint64x2_t v193;
  uint64x2_t v194;
  uint64x2_t v195;
  uint32x4_t v196;
  uint64x2_t v197;
  uint64x2_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  int8x16_t v203;
  int8x16_t v204;
  int8x16_t v205;
  int8x16_t v206;
  unsigned int v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t result;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  unsigned int v218;
  uint64_t v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  void (*v224)(_QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *);
  uint64_t v225;
  signed int v226;
  signed int v227;
  unsigned int v228;
  unint64_t *v229;
  uint64_t v230;
  int v231;
  int v232;
  int v233;
  uint64_t v234;
  int v235;
  int v236;
  unsigned __int8 *v237;
  uint64_t v238;
  unsigned __int8 *v239;
  uint64_t v240;
  unsigned __int8 *v241;
  int v242;
  char *v243;
  int v244;
  unsigned int v245;
  unint64_t v246;
  int32x4_t v247;
  int32x4_t v248;
  uint64_t v249;
  unsigned int v250;
  int v251;
  int v252;
  unint64_t v253;
  unint64_t *v254;
  unint64_t v255;
  uint64_t (*v256)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v257;
  uint64_t v258;
  signed int v259;
  signed int v260;
  unsigned int v261;
  unint64_t *v262;
  int v263;
  BOOL v264;
  int v265;
  int v267;
  unsigned int v268;
  uint64_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int32x4_t v272;
  int32x4_t v273;
  int32x4_t v274;
  int32x4_t v275;
  int32x4_t v276;
  int32x4_t v277;
  uint64_t v278;
  uint8x16_t *v279;
  int8x16_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v284;
  int8x16_t v285;
  int32x4_t v286;
  int32x4_t v287;
  int32x4_t v288;
  uint8x16_t v289;
  uint16x8_t v290;
  uint32x4_t v291;
  uint64x2_t v292;
  uint64x2_t v293;
  uint32x4_t v294;
  uint64x2_t v295;
  uint16x8_t v296;
  uint32x4_t v297;
  uint64x2_t v298;
  uint64x2_t v299;
  uint64x2_t v300;
  uint64x2_t v301;
  uint32x4_t v302;
  uint64x2_t v303;
  uint64x2_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  unsigned int v313;
  uint64_t v314;
  unsigned __int8 *v315;
  int v316;
  char *v317;
  int32x4_t v318;
  int32x4_t v319;
  uint64_t v320;
  unsigned int v321;
  int v322;
  int v323;
  unint64_t v324;
  unint64_t *v325;
  unint64_t v326;
  uint64_t (*v327)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v328;
  uint64_t v329;
  signed int v330;
  signed int v331;
  unsigned int v332;
  unint64_t *v333;
  int v334;
  BOOL v335;
  int v336;
  int v338;
  unsigned int v339;
  uint64_t v340;
  int8x16_t v341;
  int8x16_t v342;
  int32x4_t v343;
  int32x4_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  int32x4_t v348;
  uint64_t v349;
  uint8x16_t *v350;
  int8x16_t v351;
  int8x16_t v352;
  int8x16_t v353;
  int8x16_t v354;
  int8x16_t v355;
  int8x16_t v356;
  int32x4_t v357;
  int32x4_t v358;
  int32x4_t v359;
  uint8x16_t v360;
  uint16x8_t v361;
  uint32x4_t v362;
  uint64x2_t v363;
  uint64x2_t v364;
  uint32x4_t v365;
  uint64x2_t v366;
  uint16x8_t v367;
  uint32x4_t v368;
  uint64x2_t v369;
  uint64x2_t v370;
  uint64x2_t v371;
  uint64x2_t v372;
  uint32x4_t v373;
  uint64x2_t v374;
  uint64x2_t v375;
  int8x16_t v376;
  int8x16_t v377;
  int8x16_t v378;
  int8x16_t v379;
  int8x16_t v380;
  int8x16_t v381;
  int8x16_t v382;
  int8x16_t v383;
  unsigned int v384;
  unsigned int v385;
  unsigned __int8 *v386;
  int v387;
  char *v388;
  int32x4_t v389;
  int32x4_t v390;
  uint64_t v391;
  unsigned int v392;
  int v393;
  int v394;
  unint64_t v395;
  unint64_t *v396;
  unint64_t v397;
  uint64_t (*v398)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v399;
  uint64_t v400;
  signed int v401;
  signed int v402;
  unsigned int v403;
  unint64_t *v404;
  int v405;
  BOOL v406;
  int v407;
  int v409;
  unsigned int v410;
  uint64_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  int32x4_t v419;
  uint64_t v420;
  uint8x16_t *v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  uint8x16_t v431;
  uint16x8_t v432;
  uint32x4_t v433;
  uint64x2_t v434;
  uint64x2_t v435;
  uint32x4_t v436;
  uint64x2_t v437;
  uint16x8_t v438;
  uint32x4_t v439;
  uint64x2_t v440;
  uint64x2_t v441;
  uint64x2_t v442;
  uint64x2_t v443;
  uint32x4_t v444;
  uint64x2_t v445;
  uint64x2_t v446;
  int8x16_t v447;
  int8x16_t v448;
  int8x16_t v449;
  int8x16_t v450;
  int8x16_t v451;
  int8x16_t v452;
  int8x16_t v453;
  int8x16_t v454;
  unsigned int v455;
  int v456;
  unsigned __int8 *v457;
  int v458;
  char *v459;
  int32x4_t v460;
  int32x4_t v461;
  uint64_t v462;
  unsigned int v463;
  int v464;
  int v465;
  unint64_t v466;
  unint64_t *v467;
  unint64_t v468;
  uint64_t (*v469)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v470;
  uint64_t v471;
  signed int v472;
  signed int v473;
  unsigned int v474;
  unint64_t *v475;
  int v476;
  BOOL v477;
  int v478;
  int v480;
  unsigned int v481;
  uint64_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int32x4_t v485;
  int32x4_t v486;
  int32x4_t v487;
  int32x4_t v488;
  int32x4_t v489;
  int32x4_t v490;
  uint64_t v491;
  uint8x16_t *v492;
  int8x16_t v493;
  int8x16_t v494;
  int8x16_t v495;
  int8x16_t v496;
  int8x16_t v497;
  int8x16_t v498;
  int32x4_t v499;
  int32x4_t v500;
  int32x4_t v501;
  uint8x16_t v502;
  uint16x8_t v503;
  uint32x4_t v504;
  uint64x2_t v505;
  uint64x2_t v506;
  uint32x4_t v507;
  uint64x2_t v508;
  uint16x8_t v509;
  uint32x4_t v510;
  uint64x2_t v511;
  uint64x2_t v512;
  uint64x2_t v513;
  uint64x2_t v514;
  uint32x4_t v515;
  uint64x2_t v516;
  uint64x2_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int8x16_t v520;
  int8x16_t v521;
  int8x16_t v522;
  int8x16_t v523;
  int8x16_t v524;
  int8x16_t v525;
  unsigned int v526;
  unsigned __int8 *v527;
  uint64_t v528;
  unsigned __int8 *v529;
  uint64_t v530;
  unsigned __int8 *v531;
  int v532;
  char *v533;
  int32x4_t v534;
  int32x4_t v535;
  uint64_t v536;
  unsigned int v537;
  int v538;
  int v539;
  unint64_t v540;
  unint64_t *v541;
  unint64_t v542;
  uint64_t (*v543)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v544;
  uint64_t v545;
  signed int v546;
  signed int v547;
  unsigned int v548;
  unint64_t *v549;
  int v550;
  BOOL v551;
  int v552;
  int v554;
  unsigned int v555;
  uint64_t v556;
  int8x16_t v557;
  int8x16_t v558;
  int32x4_t v559;
  int32x4_t v560;
  int32x4_t v561;
  int32x4_t v562;
  int32x4_t v563;
  int32x4_t v564;
  uint64_t v565;
  uint8x16_t *v566;
  int8x16_t v567;
  int8x16_t v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  int8x16_t v572;
  int32x4_t v573;
  int32x4_t v574;
  int32x4_t v575;
  uint8x16_t v576;
  uint16x8_t v577;
  uint32x4_t v578;
  uint64x2_t v579;
  uint64x2_t v580;
  uint32x4_t v581;
  uint64x2_t v582;
  uint16x8_t v583;
  uint32x4_t v584;
  uint64x2_t v585;
  uint64x2_t v586;
  uint64x2_t v587;
  uint64x2_t v588;
  uint32x4_t v589;
  uint64x2_t v590;
  uint64x2_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  int8x16_t v595;
  int8x16_t v596;
  int8x16_t v597;
  int8x16_t v598;
  int8x16_t v599;
  unsigned int v600;
  int v601;
  unsigned int v602;
  unsigned __int8 *v603;
  int v604;
  char *v605;
  int32x4_t v606;
  int32x4_t v607;
  uint64_t v608;
  unsigned int v609;
  int v610;
  int v611;
  unint64_t v612;
  unint64_t *v613;
  unint64_t v614;
  uint64_t (*v615)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v616;
  uint64_t v617;
  signed int v618;
  signed int v619;
  unsigned int v620;
  unint64_t *v621;
  int v622;
  BOOL v623;
  int v624;
  int v626;
  unsigned int v627;
  uint64_t v628;
  int8x16_t v629;
  int8x16_t v630;
  int32x4_t v631;
  int32x4_t v632;
  int32x4_t v633;
  int32x4_t v634;
  int32x4_t v635;
  int32x4_t v636;
  uint64_t v637;
  uint8x16_t *v638;
  int8x16_t v639;
  int8x16_t v640;
  int8x16_t v641;
  int8x16_t v642;
  int8x16_t v643;
  int8x16_t v644;
  int32x4_t v645;
  int32x4_t v646;
  int32x4_t v647;
  uint8x16_t v648;
  uint16x8_t v649;
  uint32x4_t v650;
  uint64x2_t v651;
  uint64x2_t v652;
  uint32x4_t v653;
  uint64x2_t v654;
  uint16x8_t v655;
  uint32x4_t v656;
  uint64x2_t v657;
  uint64x2_t v658;
  uint64x2_t v659;
  uint64x2_t v660;
  uint32x4_t v661;
  uint64x2_t v662;
  uint64x2_t v663;
  int8x16_t v664;
  int8x16_t v665;
  int8x16_t v666;
  int8x16_t v667;
  int8x16_t v668;
  int8x16_t v669;
  int8x16_t v670;
  int8x16_t v671;
  unsigned int v672;
  unsigned __int8 *v673;
  unsigned __int8 *v674;
  int v675;
  char *v676;
  int32x4_t v677;
  int32x4_t v678;
  uint64_t v679;
  unsigned int v680;
  int v681;
  int v682;
  unint64_t v683;
  unint64_t *v684;
  unint64_t v685;
  uint64_t (*v686)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v687;
  uint64_t v688;
  signed int v689;
  signed int v690;
  unsigned int v691;
  unint64_t *v692;
  int v693;
  BOOL v694;
  int v695;
  int v697;
  unsigned int v698;
  uint64_t v699;
  int8x16_t v700;
  int8x16_t v701;
  int32x4_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int32x4_t v705;
  int32x4_t v706;
  int32x4_t v707;
  uint64_t v708;
  uint8x16_t *v709;
  int8x16_t v710;
  int8x16_t v711;
  int8x16_t v712;
  int8x16_t v713;
  int8x16_t v714;
  int8x16_t v715;
  int32x4_t v716;
  int32x4_t v717;
  int32x4_t v718;
  uint8x16_t v719;
  uint16x8_t v720;
  uint32x4_t v721;
  uint64x2_t v722;
  uint64x2_t v723;
  uint32x4_t v724;
  uint64x2_t v725;
  uint16x8_t v726;
  uint32x4_t v727;
  uint64x2_t v728;
  uint64x2_t v729;
  uint64x2_t v730;
  uint64x2_t v731;
  uint32x4_t v732;
  uint64x2_t v733;
  uint64x2_t v734;
  int8x16_t v735;
  int8x16_t v736;
  int8x16_t v737;
  int8x16_t v738;
  int8x16_t v739;
  int8x16_t v740;
  int8x16_t v741;
  int8x16_t v742;
  unsigned int v743;
  uint64_t v744;
  unsigned __int8 *v745;
  int v746;
  char *v747;
  int32x4_t v748;
  int32x4_t v749;
  uint64_t v750;
  unsigned int v751;
  int v752;
  int v753;
  unint64_t v754;
  unint64_t *v755;
  unint64_t v756;
  uint64_t (*v757)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v758;
  uint64_t v759;
  signed int v760;
  signed int v761;
  unsigned int v762;
  unint64_t *v763;
  int v764;
  BOOL v765;
  int v766;
  int v768;
  unsigned int v769;
  uint64_t v770;
  int8x16_t v771;
  int8x16_t v772;
  int32x4_t v773;
  int32x4_t v774;
  int32x4_t v775;
  int32x4_t v776;
  int32x4_t v777;
  int32x4_t v778;
  uint64_t v779;
  uint8x16_t *v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  int8x16_t v784;
  int8x16_t v785;
  int8x16_t v786;
  int32x4_t v787;
  int32x4_t v788;
  int32x4_t v789;
  uint8x16_t v790;
  uint16x8_t v791;
  uint32x4_t v792;
  uint64x2_t v793;
  uint64x2_t v794;
  uint32x4_t v795;
  uint64x2_t v796;
  uint16x8_t v797;
  uint32x4_t v798;
  uint64x2_t v799;
  uint64x2_t v800;
  uint64x2_t v801;
  uint64x2_t v802;
  uint32x4_t v803;
  uint64x2_t v804;
  uint64x2_t v805;
  int8x16_t v806;
  int8x16_t v807;
  int8x16_t v808;
  int8x16_t v809;
  int8x16_t v810;
  int8x16_t v811;
  int8x16_t v812;
  int8x16_t v813;
  unsigned int v814;
  int v815;
  char *v816;
  int32x4_t v817;
  int32x4_t v818;
  uint64_t v819;
  unsigned int v820;
  int v821;
  int v822;
  unint64_t v823;
  unint64_t *v824;
  unint64_t v825;
  uint64_t (*v826)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v827;
  uint64_t v828;
  signed int v829;
  signed int v830;
  unsigned int v831;
  unint64_t *v832;
  int v833;
  BOOL v834;
  int v835;
  int v837;
  unsigned int v838;
  uint64_t v839;
  int8x16_t v840;
  int8x16_t v841;
  int32x4_t v842;
  int32x4_t v843;
  int32x4_t v844;
  int32x4_t v845;
  int32x4_t v846;
  int32x4_t v847;
  uint64_t v848;
  uint8x16_t *v849;
  int8x16_t v850;
  int8x16_t v851;
  int8x16_t v852;
  int8x16_t v853;
  int8x16_t v854;
  int8x16_t v855;
  int32x4_t v856;
  int32x4_t v857;
  int32x4_t v858;
  uint8x16_t v859;
  uint16x8_t v860;
  uint32x4_t v861;
  uint64x2_t v862;
  uint64x2_t v863;
  uint32x4_t v864;
  uint64x2_t v865;
  uint16x8_t v866;
  uint32x4_t v867;
  uint64x2_t v868;
  uint64x2_t v869;
  uint64x2_t v870;
  uint64x2_t v871;
  uint32x4_t v872;
  uint64x2_t v873;
  uint64x2_t v874;
  int8x16_t v875;
  int8x16_t v876;
  int8x16_t v877;
  int8x16_t v878;
  int8x16_t v879;
  int8x16_t v880;
  int8x16_t v881;
  int8x16_t v882;
  unsigned int v883;
  int v884;
  char *v885;
  int32x4_t v886;
  int32x4_t v887;
  uint64_t v888;
  unsigned int v889;
  int v890;
  int v891;
  unint64_t v892;
  unint64_t *v893;
  unint64_t v894;
  uint64_t (*v895)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v896;
  uint64_t v897;
  signed int v898;
  signed int v899;
  unsigned int v900;
  unint64_t *v901;
  int v902;
  BOOL v903;
  int v904;
  int v906;
  unsigned int v907;
  uint64_t v908;
  int8x16_t v909;
  int8x16_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int32x4_t v913;
  int32x4_t v914;
  int32x4_t v915;
  int32x4_t v916;
  uint64_t v917;
  uint8x16_t *v918;
  int8x16_t v919;
  int8x16_t v920;
  int8x16_t v921;
  int8x16_t v922;
  int8x16_t v923;
  int8x16_t v924;
  int32x4_t v925;
  int32x4_t v926;
  int32x4_t v927;
  uint8x16_t v928;
  uint16x8_t v929;
  uint32x4_t v930;
  uint64x2_t v931;
  uint64x2_t v932;
  uint32x4_t v933;
  uint64x2_t v934;
  uint16x8_t v935;
  uint32x4_t v936;
  uint64x2_t v937;
  uint64x2_t v938;
  uint64x2_t v939;
  uint64x2_t v940;
  uint32x4_t v941;
  uint64x2_t v942;
  uint64x2_t v943;
  int8x16_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int8x16_t v947;
  int8x16_t v948;
  int8x16_t v949;
  int8x16_t v950;
  int8x16_t v951;
  unsigned int v952;
  unsigned int v953;
  uint64_t v954;
  unsigned int v955;
  int v956;
  unint64_t v957;
  int32x4_t v958;
  int32x4_t v959;
  uint64_t v960;
  unsigned int v961;
  int v962;
  int v963;
  int v964;
  unint64_t v965;
  unint64_t *v966;
  unint64_t v967;
  void (*v968)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *);
  uint64_t v969;
  uint64_t v970;
  signed int v971;
  signed int v972;
  unsigned int v973;
  unint64_t *v974;
  int v975;
  BOOL v976;
  int v977;
  int v979;
  unsigned int v980;
  uint64_t v981;
  int8x16_t v982;
  int8x16_t v983;
  int32x4_t v984;
  int32x4_t v985;
  int32x4_t v986;
  int32x4_t v987;
  int32x4_t v988;
  int32x4_t v989;
  uint64_t v990;
  uint8x16_t *v991;
  int8x16_t v992;
  int8x16_t v993;
  int8x16_t v994;
  int8x16_t v995;
  int8x16_t v996;
  int8x16_t v997;
  int32x4_t v998;
  int32x4_t v999;
  int32x4_t v1000;
  uint8x16_t v1001;
  uint16x8_t v1002;
  uint32x4_t v1003;
  uint64x2_t v1004;
  uint64x2_t v1005;
  uint32x4_t v1006;
  uint64x2_t v1007;
  uint16x8_t v1008;
  uint32x4_t v1009;
  uint64x2_t v1010;
  uint64x2_t v1011;
  uint64x2_t v1012;
  uint64x2_t v1013;
  uint32x4_t v1014;
  uint64x2_t v1015;
  uint64x2_t v1016;
  int8x16_t v1017;
  int8x16_t v1018;
  int8x16_t v1019;
  int8x16_t v1020;
  int8x16_t v1021;
  int8x16_t v1022;
  int8x16_t v1023;
  int8x16_t v1024;
  unsigned int v1025;
  int v1026;
  BOOL v1027;
  int v1028;
  int v1029;
  unsigned int v1030;
  int v1031;
  int8x16_t v1032;
  int32x4_t v1033;
  int32x4_t v1034;
  int8x16_t v1035;
  int32x4_t v1036;
  int32x4_t v1037;
  int32x4_t v1038;
  int32x4_t v1039;
  int32x4_t v1040;
  int32x4_t v1041;
  uint64_t v1042;
  int8x16_t v1043;
  int8x16_t v1044;
  int8x16_t v1045;
  uint64_t v1046;
  uint8x16_t *v1047;
  int8x16_t v1048;
  int8x16_t v1049;
  int8x16_t v1050;
  int32x4_t v1051;
  int32x4_t v1052;
  int32x4_t v1053;
  uint8x16_t v1054;
  uint16x8_t v1055;
  uint32x4_t v1056;
  uint64x2_t v1057;
  uint64x2_t v1058;
  uint32x4_t v1059;
  uint64x2_t v1060;
  uint16x8_t v1061;
  uint32x4_t v1062;
  uint64x2_t v1063;
  uint64x2_t v1064;
  uint64x2_t v1065;
  uint64x2_t v1066;
  uint32x4_t v1067;
  uint64x2_t v1068;
  uint64x2_t v1069;
  int8x16_t v1070;
  int8x16_t v1071;
  int8x16_t v1072;
  int8x16_t v1073;
  int8x16_t v1074;
  int8x16_t v1075;
  int8x16_t v1076;
  int8x16_t v1077;
  unsigned int v1078;
  unint64_t v1079;
  unint64_t v1080;
  char v1081;
  int v1082;
  int v1083;
  unint64_t v1084;
  unsigned int v1085;
  int32x4_t v1086;
  int32x4_t v1087;
  uint64_t v1088;
  unsigned int v1089;
  int v1090;
  int v1091;
  int v1092;
  unint64_t v1093;
  unint64_t *v1094;
  unint64_t v1095;
  void (*v1096)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *);
  uint64_t v1097;
  uint64_t v1098;
  signed int v1099;
  signed int v1100;
  unsigned int v1101;
  unint64_t *v1102;
  int v1103;
  BOOL v1104;
  int v1105;
  int v1107;
  unsigned int v1108;
  uint64_t v1109;
  int8x16_t v1110;
  int8x16_t v1111;
  int32x4_t v1112;
  int32x4_t v1113;
  int32x4_t v1114;
  int32x4_t v1115;
  int32x4_t v1116;
  int32x4_t v1117;
  uint64_t v1118;
  uint8x16_t *v1119;
  int8x16_t v1120;
  int8x16_t v1121;
  int8x16_t v1122;
  int8x16_t v1123;
  int8x16_t v1124;
  int8x16_t v1125;
  int32x4_t v1126;
  int32x4_t v1127;
  int32x4_t v1128;
  uint8x16_t v1129;
  uint16x8_t v1130;
  uint32x4_t v1131;
  uint64x2_t v1132;
  uint64x2_t v1133;
  uint32x4_t v1134;
  uint64x2_t v1135;
  uint16x8_t v1136;
  uint32x4_t v1137;
  uint64x2_t v1138;
  uint64x2_t v1139;
  uint64x2_t v1140;
  uint64x2_t v1141;
  uint32x4_t v1142;
  uint64x2_t v1143;
  uint64x2_t v1144;
  int8x16_t v1145;
  int8x16_t v1146;
  int8x16_t v1147;
  int8x16_t v1148;
  int8x16_t v1149;
  int8x16_t v1150;
  int8x16_t v1151;
  int8x16_t v1152;
  unsigned int v1153;
  int j;
  int v1155;
  int v1156;
  int v1157;
  int v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  int v1162;
  unsigned int v1163;
  uint64_t v1164;
  unint64_t v1165;
  unint64_t v1166;
  unsigned int v1167;
  unint64_t *v1168;
  unint64_t v1169;
  unint64_t v1170;
  void (*v1171)(_QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *);
  uint64_t v1172;
  signed int v1173;
  signed int v1174;
  unsigned int v1175;
  unint64_t *v1176;
  int v1177;
  BOOL v1178;
  int v1179;
  int v1180;
  unsigned int v1181;
  int v1182;
  int8x16_t v1183;
  int32x4_t v1184;
  int32x4_t v1185;
  int8x16_t v1186;
  int32x4_t v1187;
  int32x4_t v1188;
  int32x4_t v1189;
  int32x4_t v1190;
  int32x4_t v1191;
  int32x4_t v1192;
  uint64_t v1193;
  int8x16_t v1194;
  int8x16_t v1195;
  int8x16_t v1196;
  uint64_t v1197;
  uint8x16_t *v1198;
  int8x16_t v1199;
  int8x16_t v1200;
  int8x16_t v1201;
  int32x4_t v1202;
  int32x4_t v1203;
  int32x4_t v1204;
  uint8x16_t v1205;
  uint16x8_t v1206;
  uint32x4_t v1207;
  uint64x2_t v1208;
  uint64x2_t v1209;
  uint32x4_t v1210;
  uint64x2_t v1211;
  uint16x8_t v1212;
  uint32x4_t v1213;
  uint64x2_t v1214;
  uint64x2_t v1215;
  uint64x2_t v1216;
  uint64x2_t v1217;
  uint32x4_t v1218;
  uint64x2_t v1219;
  uint64x2_t v1220;
  int8x16_t v1221;
  int8x16_t v1222;
  int8x16_t v1223;
  int8x16_t v1224;
  int8x16_t v1225;
  int8x16_t v1226;
  int8x16_t v1227;
  int8x16_t v1228;
  unsigned int v1229;
  int v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  uint64_t v1234;
  uint64_t v1235;
  _BOOL4 v1236;
  BOOL v1237;
  uint64_t v1238;
  uint64_t v1239;
  _BOOL4 v1240;
  int v1241;
  unsigned int v1242;
  uint64_t v1243;
  unint64_t v1244;
  unint64_t v1245;
  unint64_t *v1246;
  unint64_t v1247;
  unint64_t v1248;
  void (*v1249)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1250;
  signed int v1251;
  signed int v1252;
  unsigned int v1253;
  unint64_t *v1254;
  int v1255;
  BOOL v1256;
  int v1257;
  int v1258;
  unsigned int v1259;
  int v1260;
  int8x16_t v1261;
  int32x4_t v1262;
  int32x4_t v1263;
  int8x16_t v1264;
  int32x4_t v1265;
  int32x4_t v1266;
  int32x4_t v1267;
  int32x4_t v1268;
  int32x4_t v1269;
  int32x4_t v1270;
  uint64_t v1271;
  int8x16_t v1272;
  int8x16_t v1273;
  int8x16_t v1274;
  uint64_t v1275;
  uint8x16_t *v1276;
  int8x16_t v1277;
  int8x16_t v1278;
  int8x16_t v1279;
  int32x4_t v1280;
  int32x4_t v1281;
  int32x4_t v1282;
  uint8x16_t v1283;
  uint16x8_t v1284;
  uint32x4_t v1285;
  uint64x2_t v1286;
  uint64x2_t v1287;
  uint32x4_t v1288;
  uint64x2_t v1289;
  uint16x8_t v1290;
  uint32x4_t v1291;
  uint64x2_t v1292;
  uint64x2_t v1293;
  uint64x2_t v1294;
  uint64x2_t v1295;
  uint32x4_t v1296;
  uint64x2_t v1297;
  uint64x2_t v1298;
  int8x16_t v1299;
  int8x16_t v1300;
  int8x16_t v1301;
  int8x16_t v1302;
  int8x16_t v1303;
  int8x16_t v1304;
  int8x16_t v1305;
  int8x16_t v1306;
  unsigned int v1307;
  int v1308;
  uint64_t v1309;
  uint64_t v1310;
  BOOL v1311;
  int v1312;
  uint64_t v1313;
  char *v1314;
  uint64_t v1315;
  uint64_t v1316;
  uint64_t v1317;
  unsigned int v1318;
  uint64_t v1319;
  uint64_t v1320;
  int v1321;
  uint64_t v1322;
  int v1323;
  uint64_t v1324;
  unsigned int v1325;
  int v1326;
  int32x4_t v1327;
  int32x4_t v1328;
  unint64_t v1329;
  uint64_t v1330;
  unsigned int v1331;
  int v1332;
  int v1333;
  unint64_t v1334;
  unint64_t *v1335;
  unint64_t v1336;
  uint64_t (*v1337)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1338;
  uint64_t v1339;
  signed int v1340;
  signed int v1341;
  unsigned int v1342;
  unint64_t *v1343;
  int v1344;
  BOOL v1345;
  int v1346;
  int v1348;
  unsigned int v1349;
  uint64_t v1350;
  int8x16_t v1351;
  int8x16_t v1352;
  int32x4_t v1353;
  int32x4_t v1354;
  int32x4_t v1355;
  int32x4_t v1356;
  int32x4_t v1357;
  int32x4_t v1358;
  uint64_t v1359;
  uint8x16_t *v1360;
  int8x16_t v1361;
  int8x16_t v1362;
  int8x16_t v1363;
  int8x16_t v1364;
  int8x16_t v1365;
  int8x16_t v1366;
  int32x4_t v1367;
  int32x4_t v1368;
  int32x4_t v1369;
  uint8x16_t v1370;
  uint16x8_t v1371;
  uint32x4_t v1372;
  uint64x2_t v1373;
  uint64x2_t v1374;
  uint32x4_t v1375;
  uint64x2_t v1376;
  uint16x8_t v1377;
  uint32x4_t v1378;
  uint64x2_t v1379;
  uint64x2_t v1380;
  uint64x2_t v1381;
  uint64x2_t v1382;
  uint32x4_t v1383;
  uint64x2_t v1384;
  uint64x2_t v1385;
  int8x16_t v1386;
  int8x16_t v1387;
  int8x16_t v1388;
  int8x16_t v1389;
  int8x16_t v1390;
  int8x16_t v1391;
  int8x16_t v1392;
  int8x16_t v1393;
  unsigned int v1394;
  char v1395;
  _BOOL8 v1396;
  int v1397;
  uint64_t v1398;
  int v1399;
  unsigned int v1400;
  int32x4_t v1401;
  int32x4_t v1402;
  uint64_t v1403;
  unsigned int v1404;
  int v1405;
  int v1406;
  unint64_t v1407;
  unint64_t *v1408;
  unint64_t v1409;
  uint64_t (*v1410)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1411;
  uint64_t v1412;
  signed int v1413;
  signed int v1414;
  unsigned int v1415;
  unint64_t *v1416;
  int v1417;
  BOOL v1418;
  int v1419;
  int v1421;
  unsigned int v1422;
  uint64_t v1423;
  int8x16_t v1424;
  int8x16_t v1425;
  int32x4_t v1426;
  int32x4_t v1427;
  int32x4_t v1428;
  int32x4_t v1429;
  int32x4_t v1430;
  int32x4_t v1431;
  uint64_t v1432;
  uint8x16_t *v1433;
  int8x16_t v1434;
  int8x16_t v1435;
  int8x16_t v1436;
  int8x16_t v1437;
  int8x16_t v1438;
  int8x16_t v1439;
  int32x4_t v1440;
  int32x4_t v1441;
  int32x4_t v1442;
  uint8x16_t v1443;
  uint16x8_t v1444;
  uint32x4_t v1445;
  uint64x2_t v1446;
  uint64x2_t v1447;
  uint32x4_t v1448;
  uint64x2_t v1449;
  uint16x8_t v1450;
  uint32x4_t v1451;
  uint64x2_t v1452;
  uint64x2_t v1453;
  uint64x2_t v1454;
  uint64x2_t v1455;
  uint32x4_t v1456;
  uint64x2_t v1457;
  uint64x2_t v1458;
  int8x16_t v1459;
  int8x16_t v1460;
  int8x16_t v1461;
  int8x16_t v1462;
  int8x16_t v1463;
  int8x16_t v1464;
  int8x16_t v1465;
  int8x16_t v1466;
  unsigned int v1467;
  int v1468;
  uint64_t v1469;
  int v1470;
  unsigned int v1471;
  int32x4_t v1472;
  int32x4_t v1473;
  uint64_t v1474;
  unsigned int v1475;
  int v1476;
  int v1477;
  unint64_t v1478;
  unint64_t *v1479;
  unint64_t v1480;
  uint64_t (*v1481)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1482;
  uint64_t v1483;
  signed int v1484;
  signed int v1485;
  unsigned int v1486;
  unint64_t *v1487;
  int v1488;
  BOOL v1489;
  int v1490;
  int v1492;
  unsigned int v1493;
  uint64_t v1494;
  int8x16_t v1495;
  int8x16_t v1496;
  int32x4_t v1497;
  int32x4_t v1498;
  int32x4_t v1499;
  int32x4_t v1500;
  int32x4_t v1501;
  int32x4_t v1502;
  uint64_t v1503;
  uint8x16_t *v1504;
  int8x16_t v1505;
  int8x16_t v1506;
  int8x16_t v1507;
  int8x16_t v1508;
  int8x16_t v1509;
  int8x16_t v1510;
  int32x4_t v1511;
  int32x4_t v1512;
  int32x4_t v1513;
  uint8x16_t v1514;
  uint16x8_t v1515;
  uint32x4_t v1516;
  uint64x2_t v1517;
  uint64x2_t v1518;
  uint32x4_t v1519;
  uint64x2_t v1520;
  uint16x8_t v1521;
  uint32x4_t v1522;
  uint64x2_t v1523;
  uint64x2_t v1524;
  uint64x2_t v1525;
  uint64x2_t v1526;
  uint32x4_t v1527;
  uint64x2_t v1528;
  uint64x2_t v1529;
  int8x16_t v1530;
  int8x16_t v1531;
  int8x16_t v1532;
  int8x16_t v1533;
  int8x16_t v1534;
  int8x16_t v1535;
  int8x16_t v1536;
  int8x16_t v1537;
  unsigned int v1538;
  int v1539;
  uint64_t v1540;
  int v1541;
  uint64_t v1542;
  int32x4_t v1543;
  int32x4_t v1544;
  uint64_t v1545;
  unsigned int v1546;
  int v1547;
  int v1548;
  unint64_t v1549;
  unint64_t *v1550;
  unint64_t v1551;
  uint64_t (*v1552)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1553;
  uint64_t v1554;
  signed int v1555;
  signed int v1556;
  unsigned int v1557;
  unint64_t *v1558;
  int v1559;
  BOOL v1560;
  int v1561;
  int v1563;
  unsigned int v1564;
  uint64_t v1565;
  int8x16_t v1566;
  int8x16_t v1567;
  int32x4_t v1568;
  int32x4_t v1569;
  int32x4_t v1570;
  int32x4_t v1571;
  int32x4_t v1572;
  int32x4_t v1573;
  uint64_t v1574;
  uint8x16_t *v1575;
  int8x16_t v1576;
  int8x16_t v1577;
  int8x16_t v1578;
  int8x16_t v1579;
  int8x16_t v1580;
  int8x16_t v1581;
  int32x4_t v1582;
  int32x4_t v1583;
  int32x4_t v1584;
  uint8x16_t v1585;
  uint16x8_t v1586;
  uint32x4_t v1587;
  uint64x2_t v1588;
  uint64x2_t v1589;
  uint32x4_t v1590;
  uint64x2_t v1591;
  uint16x8_t v1592;
  uint32x4_t v1593;
  uint64x2_t v1594;
  uint64x2_t v1595;
  uint64x2_t v1596;
  uint64x2_t v1597;
  uint32x4_t v1598;
  uint64x2_t v1599;
  uint64x2_t v1600;
  int8x16_t v1601;
  int8x16_t v1602;
  int8x16_t v1603;
  int8x16_t v1604;
  int8x16_t v1605;
  int8x16_t v1606;
  int8x16_t v1607;
  int8x16_t v1608;
  unsigned int v1609;
  int v1610;
  uint64_t v1611;
  int v1612;
  uint64_t v1613;
  int32x4_t v1614;
  int32x4_t v1615;
  uint64_t v1616;
  unsigned int v1617;
  int v1618;
  int v1619;
  unint64_t v1620;
  unint64_t *v1621;
  unint64_t v1622;
  uint64_t (*v1623)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1624;
  uint64_t v1625;
  signed int v1626;
  signed int v1627;
  unsigned int v1628;
  unint64_t *v1629;
  int v1630;
  BOOL v1631;
  int v1632;
  int v1634;
  unsigned int v1635;
  uint64_t v1636;
  int8x16_t v1637;
  int8x16_t v1638;
  int32x4_t v1639;
  int32x4_t v1640;
  int32x4_t v1641;
  int32x4_t v1642;
  int32x4_t v1643;
  int32x4_t v1644;
  uint64_t v1645;
  uint8x16_t *v1646;
  int8x16_t v1647;
  int8x16_t v1648;
  int8x16_t v1649;
  int8x16_t v1650;
  int8x16_t v1651;
  int8x16_t v1652;
  int32x4_t v1653;
  int32x4_t v1654;
  int32x4_t v1655;
  uint8x16_t v1656;
  uint16x8_t v1657;
  uint32x4_t v1658;
  uint64x2_t v1659;
  uint64x2_t v1660;
  uint32x4_t v1661;
  uint64x2_t v1662;
  uint16x8_t v1663;
  uint32x4_t v1664;
  uint64x2_t v1665;
  uint64x2_t v1666;
  uint64x2_t v1667;
  uint64x2_t v1668;
  uint32x4_t v1669;
  uint64x2_t v1670;
  uint64x2_t v1671;
  int8x16_t v1672;
  int8x16_t v1673;
  int8x16_t v1674;
  int8x16_t v1675;
  int8x16_t v1676;
  int8x16_t v1677;
  int8x16_t v1678;
  int8x16_t v1679;
  unsigned int v1680;
  int v1681;
  uint64_t v1682;
  uint64_t v1683;
  int v1684;
  uint64_t v1685;
  int v1686;
  unsigned int v1687;
  int32x4_t v1688;
  int32x4_t v1689;
  uint64_t v1690;
  unsigned int v1691;
  int v1692;
  int v1693;
  unint64_t v1694;
  unint64_t *v1695;
  unint64_t v1696;
  uint64_t (*v1697)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1698;
  uint64_t v1699;
  signed int v1700;
  signed int v1701;
  unsigned int v1702;
  unint64_t *v1703;
  int v1704;
  BOOL v1705;
  int v1706;
  int v1708;
  unsigned int v1709;
  uint64_t v1710;
  int8x16_t v1711;
  int8x16_t v1712;
  int32x4_t v1713;
  int32x4_t v1714;
  int32x4_t v1715;
  int32x4_t v1716;
  int32x4_t v1717;
  int32x4_t v1718;
  uint64_t v1719;
  uint8x16_t *v1720;
  int8x16_t v1721;
  int8x16_t v1722;
  int8x16_t v1723;
  int8x16_t v1724;
  int8x16_t v1725;
  int8x16_t v1726;
  int32x4_t v1727;
  int32x4_t v1728;
  int32x4_t v1729;
  uint8x16_t v1730;
  uint16x8_t v1731;
  uint32x4_t v1732;
  uint64x2_t v1733;
  uint64x2_t v1734;
  uint32x4_t v1735;
  uint64x2_t v1736;
  uint16x8_t v1737;
  uint32x4_t v1738;
  uint64x2_t v1739;
  uint64x2_t v1740;
  uint64x2_t v1741;
  uint64x2_t v1742;
  uint32x4_t v1743;
  uint64x2_t v1744;
  uint64x2_t v1745;
  int8x16_t v1746;
  int8x16_t v1747;
  int8x16_t v1748;
  int8x16_t v1749;
  int8x16_t v1750;
  int8x16_t v1751;
  int8x16_t v1752;
  int8x16_t v1753;
  unsigned int v1754;
  int v1755;
  uint64_t v1756;
  int v1757;
  uint64_t v1758;
  int32x4_t v1759;
  int32x4_t v1760;
  uint64_t v1761;
  unsigned int v1762;
  int v1763;
  int v1764;
  unint64_t v1765;
  unint64_t *v1766;
  unint64_t v1767;
  uint64_t (*v1768)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1769;
  uint64_t v1770;
  signed int v1771;
  signed int v1772;
  unsigned int v1773;
  unint64_t *v1774;
  int v1775;
  BOOL v1776;
  int v1777;
  int v1779;
  unsigned int v1780;
  uint64_t v1781;
  int8x16_t v1782;
  int8x16_t v1783;
  int32x4_t v1784;
  int32x4_t v1785;
  int32x4_t v1786;
  int32x4_t v1787;
  int32x4_t v1788;
  int32x4_t v1789;
  uint64_t v1790;
  uint8x16_t *v1791;
  int8x16_t v1792;
  int8x16_t v1793;
  int8x16_t v1794;
  int8x16_t v1795;
  int8x16_t v1796;
  int8x16_t v1797;
  int32x4_t v1798;
  int32x4_t v1799;
  int32x4_t v1800;
  uint8x16_t v1801;
  uint16x8_t v1802;
  uint32x4_t v1803;
  uint64x2_t v1804;
  uint64x2_t v1805;
  uint32x4_t v1806;
  uint64x2_t v1807;
  uint16x8_t v1808;
  uint32x4_t v1809;
  uint64x2_t v1810;
  uint64x2_t v1811;
  uint64x2_t v1812;
  uint64x2_t v1813;
  uint32x4_t v1814;
  uint64x2_t v1815;
  uint64x2_t v1816;
  int8x16_t v1817;
  int8x16_t v1818;
  int8x16_t v1819;
  int8x16_t v1820;
  int8x16_t v1821;
  int8x16_t v1822;
  int8x16_t v1823;
  int8x16_t v1824;
  unsigned int v1825;
  uint64_t v1826;
  int v1827;
  uint64_t v1828;
  int v1829;
  uint64_t v1830;
  int32x4_t v1831;
  int32x4_t v1832;
  uint64_t v1833;
  unsigned int v1834;
  int v1835;
  int v1836;
  unint64_t v1837;
  unint64_t *v1838;
  unint64_t v1839;
  uint64_t (*v1840)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1841;
  uint64_t v1842;
  signed int v1843;
  signed int v1844;
  unsigned int v1845;
  unint64_t *v1846;
  int v1847;
  BOOL v1848;
  int v1849;
  int v1851;
  unsigned int v1852;
  uint64_t v1853;
  int8x16_t v1854;
  int8x16_t v1855;
  int32x4_t v1856;
  int32x4_t v1857;
  int32x4_t v1858;
  int32x4_t v1859;
  int32x4_t v1860;
  int32x4_t v1861;
  uint64_t v1862;
  uint8x16_t *v1863;
  int8x16_t v1864;
  int8x16_t v1865;
  int8x16_t v1866;
  int8x16_t v1867;
  int8x16_t v1868;
  int8x16_t v1869;
  int32x4_t v1870;
  int32x4_t v1871;
  int32x4_t v1872;
  uint8x16_t v1873;
  uint16x8_t v1874;
  uint32x4_t v1875;
  uint64x2_t v1876;
  uint64x2_t v1877;
  uint32x4_t v1878;
  uint64x2_t v1879;
  uint16x8_t v1880;
  uint32x4_t v1881;
  uint64x2_t v1882;
  uint64x2_t v1883;
  uint64x2_t v1884;
  uint64x2_t v1885;
  uint32x4_t v1886;
  uint64x2_t v1887;
  uint64x2_t v1888;
  int8x16_t v1889;
  int8x16_t v1890;
  int8x16_t v1891;
  int8x16_t v1892;
  int8x16_t v1893;
  int8x16_t v1894;
  int8x16_t v1895;
  int8x16_t v1896;
  unsigned int v1897;
  int v1898;
  uint64_t v1899;
  int v1900;
  uint64_t v1901;
  int32x4_t v1902;
  int32x4_t v1903;
  uint64_t v1904;
  unsigned int v1905;
  int v1906;
  int v1907;
  unint64_t v1908;
  unint64_t *v1909;
  unint64_t v1910;
  uint64_t (*v1911)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1912;
  uint64_t v1913;
  signed int v1914;
  signed int v1915;
  unsigned int v1916;
  unint64_t *v1917;
  int v1918;
  BOOL v1919;
  int v1920;
  int v1922;
  unsigned int v1923;
  uint64_t v1924;
  int8x16_t v1925;
  int8x16_t v1926;
  int32x4_t v1927;
  int32x4_t v1928;
  int32x4_t v1929;
  int32x4_t v1930;
  int32x4_t v1931;
  int32x4_t v1932;
  uint64_t v1933;
  uint8x16_t *v1934;
  int8x16_t v1935;
  int8x16_t v1936;
  int8x16_t v1937;
  int8x16_t v1938;
  int8x16_t v1939;
  int8x16_t v1940;
  int32x4_t v1941;
  int32x4_t v1942;
  int32x4_t v1943;
  uint8x16_t v1944;
  uint16x8_t v1945;
  uint32x4_t v1946;
  uint64x2_t v1947;
  uint64x2_t v1948;
  uint32x4_t v1949;
  uint64x2_t v1950;
  uint16x8_t v1951;
  uint32x4_t v1952;
  uint64x2_t v1953;
  uint64x2_t v1954;
  uint64x2_t v1955;
  uint64x2_t v1956;
  uint32x4_t v1957;
  uint64x2_t v1958;
  uint64x2_t v1959;
  int8x16_t v1960;
  int8x16_t v1961;
  int8x16_t v1962;
  int8x16_t v1963;
  int8x16_t v1964;
  int8x16_t v1965;
  int8x16_t v1966;
  int8x16_t v1967;
  unsigned int v1968;
  uint64_t v1969;
  int v1970;
  uint64_t v1971;
  int v1972;
  unsigned int v1973;
  int32x4_t v1974;
  int32x4_t v1975;
  uint64_t v1976;
  unsigned int v1977;
  int v1978;
  int v1979;
  unint64_t v1980;
  unint64_t *v1981;
  unint64_t v1982;
  uint64_t (*v1983)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1984;
  uint64_t v1985;
  signed int v1986;
  signed int v1987;
  unsigned int v1988;
  unint64_t *v1989;
  int v1990;
  BOOL v1991;
  int v1992;
  int v1994;
  unsigned int v1995;
  uint64_t v1996;
  int8x16_t v1997;
  int8x16_t v1998;
  int32x4_t v1999;
  int32x4_t v2000;
  int32x4_t v2001;
  int32x4_t v2002;
  int32x4_t v2003;
  int32x4_t v2004;
  uint64_t v2005;
  uint8x16_t *v2006;
  int8x16_t v2007;
  int8x16_t v2008;
  int8x16_t v2009;
  int8x16_t v2010;
  int8x16_t v2011;
  int8x16_t v2012;
  int32x4_t v2013;
  int32x4_t v2014;
  int32x4_t v2015;
  uint8x16_t v2016;
  uint16x8_t v2017;
  uint32x4_t v2018;
  uint64x2_t v2019;
  uint64x2_t v2020;
  uint32x4_t v2021;
  uint64x2_t v2022;
  uint16x8_t v2023;
  uint32x4_t v2024;
  uint64x2_t v2025;
  uint64x2_t v2026;
  uint64x2_t v2027;
  uint64x2_t v2028;
  uint32x4_t v2029;
  uint64x2_t v2030;
  uint64x2_t v2031;
  int8x16_t v2032;
  int8x16_t v2033;
  int8x16_t v2034;
  int8x16_t v2035;
  int8x16_t v2036;
  int8x16_t v2037;
  int8x16_t v2038;
  int8x16_t v2039;
  unsigned int v2040;
  int v2041;
  uint64_t v2042;
  uint64_t v2043;
  unsigned __int8 *v2044;
  int v2045;
  int v2046;
  int v2047;
  int v2048;
  uint64_t v2049;
  unint64_t v2050;
  uint64_t v2051;
  int v2052;
  uint64_t v2053;
  uint64_t v2054;
  uint64_t v2055;
  uint64_t pred_context_comp_ref_p;
  int v2057;
  uint64_t v2058;
  unint64_t v2059;
  uint64_t v2060;
  uint64_t v2061;
  int pred_context_single_ref_p1;
  int v2063;
  uint64_t v2064;
  unint64_t v2065;
  unint64_t v2066;
  uint64_t v2067;
  uint64_t v2068;
  int v2069;
  int v2070;
  uint64_t v2071;
  char v2072;
  int pred_context_single_ref_p2;
  int v2074;
  uint64_t v2075;
  unint64_t v2076;
  unint64_t v2077;
  uint64_t v2078;
  uint64_t v2079;
  int v2080;
  uint64_t v2081;
  int v2082;
  int v2083;
  int v2084;
  int v2085;
  int v2086;
  int v2087;
  int v2088;
  int v2089;
  uint64_t v2090;
  int v2091;
  uint64_t v2092;
  unsigned int v2093;
  int v2094;
  unint64_t v2095;
  int32x4_t v2096;
  int32x4_t v2097;
  uint64_t v2098;
  unsigned int v2099;
  int v2100;
  int v2101;
  unint64_t v2102;
  unint64_t *v2103;
  unint64_t v2104;
  void (*v2105)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v2106;
  uint64_t v2107;
  signed int v2108;
  signed int v2109;
  unsigned int v2110;
  unint64_t *v2111;
  int v2112;
  BOOL v2113;
  int v2114;
  int v2116;
  unsigned int v2117;
  uint64_t v2118;
  int8x16_t v2119;
  int8x16_t v2120;
  int32x4_t v2121;
  int32x4_t v2122;
  int32x4_t v2123;
  int32x4_t v2124;
  int32x4_t v2125;
  int32x4_t v2126;
  uint64_t v2127;
  uint8x16_t *v2128;
  int8x16_t v2129;
  int8x16_t v2130;
  int8x16_t v2131;
  int8x16_t v2132;
  int8x16_t v2133;
  int8x16_t v2134;
  int32x4_t v2135;
  int32x4_t v2136;
  int32x4_t v2137;
  uint8x16_t v2138;
  uint16x8_t v2139;
  uint32x4_t v2140;
  uint64x2_t v2141;
  uint64x2_t v2142;
  uint32x4_t v2143;
  uint64x2_t v2144;
  uint16x8_t v2145;
  uint32x4_t v2146;
  uint64x2_t v2147;
  uint64x2_t v2148;
  uint64x2_t v2149;
  uint64x2_t v2150;
  uint32x4_t v2151;
  uint64x2_t v2152;
  uint64x2_t v2153;
  int8x16_t v2154;
  int8x16_t v2155;
  int8x16_t v2156;
  int8x16_t v2157;
  int8x16_t v2158;
  int8x16_t v2159;
  int8x16_t v2160;
  int8x16_t v2161;
  unsigned int v2162;
  uint64_t v2163;
  uint64_t v2164;
  unsigned int v2165;
  uint64_t v2166;
  int v2167;
  uint64_t v2168;
  int v2169;
  int v2170;
  unsigned int v2171;
  uint64_t v2172;
  unsigned int v2173;
  int v2174;
  unint64_t v2175;
  int32x4_t v2176;
  int32x4_t v2177;
  uint64_t v2178;
  unsigned int v2179;
  int v2180;
  int v2181;
  unint64_t v2182;
  unint64_t *v2183;
  unint64_t v2184;
  void (*v2185)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v2186;
  uint64_t v2187;
  signed int v2188;
  signed int v2189;
  unsigned int v2190;
  unint64_t *v2191;
  int v2192;
  BOOL v2193;
  int v2194;
  int v2196;
  unsigned int v2197;
  uint64_t v2198;
  int8x16_t v2199;
  int8x16_t v2200;
  int32x4_t v2201;
  int32x4_t v2202;
  int32x4_t v2203;
  int32x4_t v2204;
  int32x4_t v2205;
  int32x4_t v2206;
  uint64_t v2207;
  uint8x16_t *v2208;
  int8x16_t v2209;
  int8x16_t v2210;
  int8x16_t v2211;
  int8x16_t v2212;
  int8x16_t v2213;
  int8x16_t v2214;
  int32x4_t v2215;
  int32x4_t v2216;
  int32x4_t v2217;
  uint8x16_t v2218;
  uint16x8_t v2219;
  uint32x4_t v2220;
  uint64x2_t v2221;
  uint64x2_t v2222;
  uint32x4_t v2223;
  uint64x2_t v2224;
  uint16x8_t v2225;
  uint32x4_t v2226;
  uint64x2_t v2227;
  uint64x2_t v2228;
  uint64x2_t v2229;
  uint64x2_t v2230;
  uint32x4_t v2231;
  uint64x2_t v2232;
  uint64x2_t v2233;
  int8x16_t v2234;
  int8x16_t v2235;
  int8x16_t v2236;
  int8x16_t v2237;
  int8x16_t v2238;
  int8x16_t v2239;
  int8x16_t v2240;
  int8x16_t v2241;
  unsigned int v2242;
  uint64_t v2243;
  uint64_t v2244;
  int v2245;
  uint64_t v2246;
  unint64_t *v2247;
  uint64_t v2248;
  int32x4_t v2249;
  int32x4_t v2250;
  int v2251;
  uint64_t v2252;
  unsigned int v2253;
  int v2254;
  unint64_t v2255;
  uint64_t v2256;
  unsigned int v2257;
  int v2258;
  int v2259;
  unint64_t v2260;
  unint64_t *v2261;
  unint64_t v2262;
  void (*v2263)(_QWORD, unint64_t *, unint64_t *, uint64_t);
  uint64_t v2264;
  uint64_t v2265;
  signed int v2266;
  signed int v2267;
  unsigned int v2268;
  unint64_t *v2269;
  int v2270;
  BOOL v2271;
  int v2272;
  int v2274;
  unsigned int v2275;
  uint64_t v2276;
  int8x16_t v2277;
  int8x16_t v2278;
  int32x4_t v2279;
  int32x4_t v2280;
  int32x4_t v2281;
  int32x4_t v2282;
  int32x4_t v2283;
  int32x4_t v2284;
  uint64_t v2285;
  uint8x16_t *v2286;
  int8x16_t v2287;
  int8x16_t v2288;
  int8x16_t v2289;
  int8x16_t v2290;
  int8x16_t v2291;
  int8x16_t v2292;
  int32x4_t v2293;
  int32x4_t v2294;
  int32x4_t v2295;
  uint8x16_t v2296;
  uint16x8_t v2297;
  uint32x4_t v2298;
  uint64x2_t v2299;
  uint64x2_t v2300;
  uint32x4_t v2301;
  uint64x2_t v2302;
  uint16x8_t v2303;
  uint32x4_t v2304;
  uint64x2_t v2305;
  uint64x2_t v2306;
  uint64x2_t v2307;
  uint64x2_t v2308;
  uint32x4_t v2309;
  uint64x2_t v2310;
  uint64x2_t v2311;
  int8x16_t v2312;
  int8x16_t v2313;
  int8x16_t v2314;
  int8x16_t v2315;
  int8x16_t v2316;
  int8x16_t v2317;
  int8x16_t v2318;
  int8x16_t v2319;
  unsigned int v2320;
  unsigned int v2321;
  uint64_t v2322;
  int v2323;
  uint64_t v2324;
  uint64_t v2325;
  unsigned __int8 v2326;
  uint64_t v2327;
  uint64_t v2328;
  uint64_t *v2329;
  uint64_t v2330;
  int *v2331;
  int v2332;
  uint64_t v2333;
  int v2334;
  int v2335;
  BOOL v2336;
  uint64_t v2337;
  uint64_t *v2338;
  char *v2339;
  uint64_t v2340;
  int v2341;
  int v2342;
  int v2343;
  __int16 v2344;
  __int16 v2345;
  unsigned __int8 *v2346;
  _QWORD *v2347;
  unsigned __int8 *v2348;
  unsigned __int8 *v2349;
  int v2350;
  int v2351;
  int v2352;
  uint64_t v2353;
  __int16 v2354;
  uint64_t v2355;
  _WORD *v2356;
  uint64_t v2357;
  uint64_t v2358;
  char *v2359;
  uint64_t *v2360;
  int v2361;
  __int16 *v2362;
  int v2363;
  int v2364;
  int v2365;
  __int16 v2366;
  int v2367;
  __int16 v2368;
  uint64_t v2369;
  uint64_t v2370;
  int v2371;
  uint64_t v2372;
  char *v2373;
  uint64_t v2374;
  int v2375;
  int v2376;
  int v2377;
  int v2378;
  uint64_t v2379;
  int v2380;
  uint64_t v2381;
  int v2382;
  uint64_t v2383;
  _BOOL4 v2384;
  int v2385;
  int v2386;
  unsigned int v2387;
  int v2388;
  unsigned __int8 *v2389;
  unsigned __int8 *v2390;
  int v2391;
  int v2392;
  uint64_t v2393;
  int v2396;
  int v2397;
  uint64_t v2398;
  unsigned __int8 *v2399;
  _DWORD *v2400;
  uint64_t v2401;
  unsigned int v2402;
  unsigned __int8 *v2403;
  char *v2404;
  int v2405;
  uint64_t v2406;
  unsigned __int8 *v2407;
  _DWORD *v2408;
  unint64_t *v2411;
  uint64_t v2412;
  unint64_t *v2413;
  uint64_t v2414;
  uint64_t v2415;
  int v2416;
  int v2417;
  uint64_t v2418;

  v13 = a2;
  v2418 = *MEMORY[0x24BDAC8D0];
  v15 = (unsigned __int8 *)(a2 + 5432);
  v2413 = (unint64_t *)(a1 + 16);
  v16 = (_DWORD *)(a1 + 13328);
  v2412 = a2 + 656;
  v17 = **(unsigned __int8 ***)(a1 + 13776);
  v18 = *(_DWORD *)(a2 + 1976);
  v2399 = v17;
  v2378 = a6;
  v2400 = (_DWORD *)(a1 + 13328);
  if (!*(_DWORD *)(a2 + 1932) || *(_BYTE *)(a2 + 1948))
  {
    v19 = *(unsigned __int8 **)(a1 + 13792);
    v20 = *(unsigned __int8 **)(a1 + 13784);
    v2396 = *v17;
    v2407 = v20;
    v2403 = v19;
    if (!*v15)
    {
      v17[4] = 0;
      goto LABEL_91;
    }
    v21 = a4 + v18 * a3;
    LOBYTE(v22) = *(_BYTE *)(a2 + 5433);
    if (!(_BYTE)v22)
    {
      if ((int)a5 >= 1 && (int)a6 >= 1)
      {
        v128 = *(_QWORD *)(a2 + 2192);
        v129 = *(_QWORD *)(a2 + 2200);
        if (v128)
        {
          v130 = 0;
          do
          {
            v131 = v21;
            v132 = a5;
            do
            {
              v133 = v131 + v130 * *(_DWORD *)(a2 + 1976);
              *(_BYTE *)(v129 + v133) = *(_BYTE *)(v128 + v133);
              ++v131;
              --v132;
            }
            while (v132);
            ++v130;
          }
          while (v130 != (_DWORD)a6);
        }
        else
        {
          do
          {
            v134 = v21;
            v135 = a5;
            do
            {
              *(_BYTE *)(v129 + v134 + (int)v128 * *(_DWORD *)(a2 + 1976)) = 0;
              ++v134;
              --v135;
            }
            while (v135);
            LODWORD(v128) = v128 + 1;
          }
          while ((_DWORD)v128 != (_DWORD)a6);
        }
        LOBYTE(v22) = 0;
      }
LABEL_87:
      v136 = *v15;
      v17[4] = v22;
      if (!v136)
        goto LABEL_91;
      goto LABEL_88;
    }
    v2386 = a4 + v18 * a3;
    v2389 = (unsigned __int8 *)(a2 + 5432);
    v2375 = a5;
    v23 = 0;
    v24 = a2 + 5437;
    v26 = *(_DWORD *)(a1 + 24);
    v25 = *(_DWORD *)(a1 + 28);
    v2411 = (unint64_t *)(a1 + 64);
    v27 = *(_QWORD *)(a1 + 16);
    v28.i64[0] = 0x800000008;
    v28.i64[1] = 0x800000008;
    v29.i64[0] = 0x7F0000007FLL;
    v29.i64[1] = 0x7F0000007FLL;
    while (1)
    {
      v34 = *(unsigned __int8 *)(v24 + ((unint64_t)v23 >> 1));
      if ((v25 & 0x80000000) == 0)
      {
        v30 = ((v26 - 1) * v34 + 256) >> 8;
        v35 = v27 - (v30 << 56);
        if (v27 < v30 << 56)
          goto LABEL_39;
        goto LABEL_6;
      }
      v36 = *(unint64_t **)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 32) - (_QWORD)v36;
      v38 = *(void (**)(_QWORD, _QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(a1 + 48);
      if (v38)
      {
        if (v37 >= 9)
          v39 = 9;
        else
          v39 = *(_QWORD *)(a1 + 32) - (_QWORD)v36;
        v36 = v2411;
        v38(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), v2411, v39, a5, a6, vpx_norm);
        v29.i64[0] = 0x7F0000007FLL;
        v29.i64[1] = 0x7F0000007FLL;
        v28.i64[0] = 0x800000008;
        v28.i64[1] = 0x800000008;
      }
      v40 = 8 * v37;
      v41 = 48 - v25;
      if (8 * v37 >= 0x41)
      {
        v42 = (v41 & 0xFFFFFFF8) + 8;
        v43 = v42 + v25;
        v44 = (unint64_t *)((char *)v36 + (v42 >> 3));
        v27 = (bswap64(*v36) >> (56 - (v41 & 0xF8u)) << (v41 & 7)) | *v2413;
        goto LABEL_38;
      }
      v45 = 56 - v25 - v40;
      if (v45 < 0)
        v43 = v25;
      else
        v43 = v25 + 0x40000000;
      if (v40)
        v46 = 1;
      else
        v46 = v45 <= -1;
      v47 = v45 & ~(v45 >> 31);
      if (!v46 || v41 < v47)
      {
        v44 = v36;
        goto LABEL_38;
      }
      v49 = v47 - 1;
      if (v47 - 1 >= (int)(40 - v25))
        v49 = 40 - v25;
      v50 = 47 - v25 - v49;
      if (v50 < 0x78)
        break;
      v51 = (v50 >> 3) + 1;
      v52 = (int8x16_t)v27;
      v53 = 0uLL;
      v54 = (int32x4_t)v43;
      v55 = vdupq_n_s32(v41);
      v56 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6C0);
      v44 = (unint64_t *)((char *)v36 + (v51 & 0x3FFFFFF0));
      v57 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6D0);
      v41 -= 8 * (v51 & 0x3FFFFFF0);
      v58 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6A0);
      v59 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6B0);
      v60 = v51 & 0x3FFFFFF0;
      v61 = (uint8x16_t *)v36;
      v62 = 0uLL;
      v63 = 0uLL;
      v64 = 0uLL;
      v65 = 0uLL;
      v66 = 0uLL;
      v67 = 0uLL;
      v68 = 0uLL;
      v69 = 0uLL;
      v70 = 0uLL;
      do
      {
        v71 = *v61++;
        v72 = vmovl_high_u8(v71);
        v73 = vmovl_high_u16(v72);
        v74.i64[0] = v73.u32[0];
        v74.i64[1] = v73.u32[1];
        v75 = v74;
        v76 = vmovl_u16(*(uint16x4_t *)v72.i8);
        v74.i64[0] = v76.u32[2];
        v74.i64[1] = v76.u32[3];
        v77 = v74;
        v78 = vmovl_u8(*(uint8x8_t *)v71.i8);
        v79 = vmovl_high_u16(v78);
        v74.i64[0] = v79.u32[2];
        v74.i64[1] = v79.u32[3];
        v80 = v74;
        v74.i64[0] = v73.u32[2];
        v74.i64[1] = v73.u32[3];
        v81 = v74;
        v74.i64[0] = v76.u32[0];
        v74.i64[1] = v76.u32[1];
        v82 = v74;
        v74.i64[0] = v79.u32[0];
        v74.i64[1] = v79.u32[1];
        v83 = v74;
        v84 = vmovl_u16(*(uint16x4_t *)v78.i8);
        v74.i64[0] = v84.u32[2];
        v74.i64[1] = v84.u32[3];
        v85 = v74;
        v74.i64[0] = v84.u32[0];
        v74.i64[1] = v84.u32[1];
        v86 = v74;
        v74.i64[0] = v59.u32[0];
        v74.i64[1] = v59.u32[1];
        v87 = (int8x16_t)vshlq_u64(v86, v74);
        v74.i64[0] = v59.u32[2];
        v74.i64[1] = v59.u32[3];
        v88 = (int8x16_t)vshlq_u64(v85, v74);
        v74.i64[0] = v58.u32[0];
        v74.i64[1] = v58.u32[1];
        v89 = (int8x16_t)vshlq_u64(v83, v74);
        v74.i64[0] = v57.u32[0];
        v74.i64[1] = v57.u32[1];
        v90 = (int8x16_t)vshlq_u64(v82, v74);
        v74.i64[0] = v56.u32[2];
        v74.i64[1] = v56.u32[3];
        v91 = (int8x16_t)vshlq_u64(v81, v74);
        v74.i64[0] = v58.u32[2];
        v74.i64[1] = v58.u32[3];
        v92 = (int8x16_t)vshlq_u64(v80, v74);
        v74.i64[0] = v57.u32[2];
        v74.i64[1] = v57.u32[3];
        v93 = (int8x16_t)vshlq_u64(v77, v74);
        v74.i64[0] = v56.u32[0];
        v74.i64[1] = v56.u32[1];
        v66 = vorrq_s8((int8x16_t)vshlq_u64(v75, v74), v66);
        v65 = vorrq_s8(v93, v65);
        v63 = vorrq_s8(v92, v63);
        v67 = vorrq_s8(v91, v67);
        v64 = vorrq_s8(v90, v64);
        v62 = vorrq_s8(v89, v62);
        v53 = vorrq_s8(v88, v53);
        v52 = vorrq_s8(v87, v52);
        v54 = vaddq_s32(v54, v28);
        v68 = vaddq_s32(v68, v28);
        v69 = vaddq_s32(v69, v28);
        v70 = vaddq_s32(v70, v28);
        v59 = vaddq_s32(v59, v29);
        v58 = vaddq_s32(v58, v29);
        v57 = vaddq_s32(v57, v29);
        v56 = vaddq_s32(v56, v29);
        v60 -= 16;
      }
      while (v60);
      v43 = vaddvq_s32(vaddq_s32(vaddq_s32(v54, v69), vaddq_s32(v68, v70)));
      v94 = vorrq_s8(vorrq_s8(vorrq_s8(v52, v64), vorrq_s8(v62, v66)), vorrq_s8(vorrq_s8(v53, v65), vorrq_s8(v63, v67)));
      v27 = (unint64_t)vorr_s8(*(int8x8_t *)v94.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL));
      if ((v51 & 0x3FFFFFF0) != v51)
        goto LABEL_37;
LABEL_38:
      *(_QWORD *)(a1 + 40) += (char *)v44 - (char *)v36;
      v25 = v43;
      v30 = ((v26 - 1) * v34 + 256) >> 8;
      v35 = v27 - (v30 << 56);
      if (v27 < v30 << 56)
      {
LABEL_39:
        v31 = 0;
        goto LABEL_7;
      }
LABEL_6:
      LODWORD(v30) = *(_DWORD *)(a1 + 24) - v30;
      v31 = 1;
      v27 = v35;
LABEL_7:
      v32 = vpx_norm[v30];
      v26 = (_DWORD)v30 << v32;
      v27 <<= v32;
      v25 -= v32;
      *(_QWORD *)(a1 + 16) = v27;
      *(_DWORD *)(a1 + 24) = (_DWORD)v30 << v32;
      *(_DWORD *)(a1 + 28) = v25;
      v33 = vp9_segment_tree[v31 + (unint64_t)v23];
      v23 = v33;
      if (v33 <= 0)
      {
        v22 = -v33;
        if (v2378 >= 1)
        {
          v17 = v2399;
          v16 = v2400;
          v15 = v2389;
          v13 = a2;
          v20 = v2407;
          v19 = v2403;
          if (v2375 >= 1)
          {
            for (i = 0; i != v2378; ++i)
            {
              v97 = v2386;
              v98 = v2375;
              do
              {
                *(_BYTE *)(*(_QWORD *)(a2 + 2200) + v97 + i * *(_DWORD *)(a2 + 1976)) = v22;
                ++v97;
                --v98;
              }
              while (v98);
            }
          }
          goto LABEL_87;
        }
        v17 = v2399;
        v16 = v2400;
        v13 = a2;
        v20 = v2407;
        v19 = v2403;
        v138 = *v2389;
        v2399[4] = v22;
        if (!v138)
        {
LABEL_91:
          v139 = *(_QWORD *)(a1 + 13784);
          v140 = *(_QWORD *)(a1 + 13792);
          if (v140)
            v140 = *(char *)(v140 + 3);
          if (v139)
            v139 = *(char *)(v139 + 3);
          v141 = v139 + v140;
          v142 = *(_DWORD *)(a1 + 28);
          v143 = ((*(_DWORD *)(a1 + 24) - 1)
                * *(unsigned __int8 *)(*(_QWORD *)(v13 + 5560) + v139 + v140 + 1967)
                + 256) >> 8;
          v144 = *(_QWORD *)(a1 + 16);
          if ((v142 & 0x80000000) != 0)
          {
            v146 = *(unint64_t **)(a1 + 40);
            v147 = *(_QWORD *)(a1 + 32) - (_QWORD)v146;
            v148 = 8 * v147;
            v149 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(a1 + 48);
            if (v149)
            {
              if (v147 >= 9)
                v150 = 9;
              else
                v150 = *(_QWORD *)(a1 + 32) - (_QWORD)v146;
              v149(*(_QWORD *)(a1 + 56), v146, a1 + 64, v150, a5, a6, vpx_norm);
              v146 = (unint64_t *)(a1 + 64);
            }
            v151 = 48 - v142;
            if (v148 < 0x41)
            {
              v155 = 56 - v142 - v148;
              if (v155 < 0)
                v153 = v142;
              else
                v153 = v142 + 0x40000000;
              if (v148)
                v156 = 1;
              else
                v156 = v155 <= -1;
              if (v156 && (v157 = v155 & ~(v155 >> 31), v151 >= v157))
              {
                v158 = v157 - 1;
                if (v157 - 1 >= (int)(40 - v142))
                  v158 = 40 - v142;
                v159 = 47 - v142 - v158;
                v154 = v146;
                v160 = 48 - v142;
                if (v159 < 0x78)
                  goto LABEL_1471;
                v161 = (int8x16_t)v144;
                v162 = (int32x4_t)v153;
                v163 = vdupq_n_s32(v151);
                v164 = 0uLL;
                v165 = vaddq_s32(v163, (int32x4_t)xmmword_208F3A6C0);
                v166 = vaddq_s32(v163, (int32x4_t)xmmword_208F3A6D0);
                v167 = vaddq_s32(v163, (int32x4_t)xmmword_208F3A6A0);
                v168 = vaddq_s32(v163, (int32x4_t)xmmword_208F3A6B0);
                v169.i64[0] = 0x800000008;
                v169.i64[1] = 0x800000008;
                v170.i64[0] = 0x7F0000007FLL;
                v170.i64[1] = 0x7F0000007FLL;
                v171 = (v159 >> 3) + 1;
                v172 = 0uLL;
                v173 = 0uLL;
                v174 = 0uLL;
                v154 = (unint64_t *)((char *)v146 + (v171 & 0x3FFFFFF0));
                v160 = v151 - 8 * (v171 & 0x3FFFFFF0);
                v175 = v171 & 0x3FFFFFF0;
                v176 = (uint8x16_t *)v146;
                v177 = 0uLL;
                v178 = 0uLL;
                v179 = 0uLL;
                v180 = 0uLL;
                v181 = 0uLL;
                v182 = 0uLL;
                do
                {
                  v183 = *v176++;
                  v184 = vmovl_high_u8(v183);
                  v185 = vmovl_high_u16(v184);
                  v186.i64[0] = v185.u32[0];
                  v186.i64[1] = v185.u32[1];
                  v187 = v186;
                  v188 = vmovl_u16(*(uint16x4_t *)v184.i8);
                  v186.i64[0] = v188.u32[2];
                  v186.i64[1] = v188.u32[3];
                  v189 = v186;
                  v190 = vmovl_u8(*(uint8x8_t *)v183.i8);
                  v191 = vmovl_high_u16(v190);
                  v186.i64[0] = v191.u32[2];
                  v186.i64[1] = v191.u32[3];
                  v192 = v186;
                  v186.i64[0] = v185.u32[2];
                  v186.i64[1] = v185.u32[3];
                  v193 = v186;
                  v186.i64[0] = v188.u32[0];
                  v186.i64[1] = v188.u32[1];
                  v194 = v186;
                  v186.i64[0] = v191.u32[0];
                  v186.i64[1] = v191.u32[1];
                  v195 = v186;
                  v196 = vmovl_u16(*(uint16x4_t *)v190.i8);
                  v186.i64[0] = v196.u32[2];
                  v186.i64[1] = v196.u32[3];
                  v197 = v186;
                  v186.i64[0] = v196.u32[0];
                  v186.i64[1] = v196.u32[1];
                  v198 = v186;
                  v186.i64[0] = v168.u32[0];
                  v186.i64[1] = v168.u32[1];
                  v199 = (int8x16_t)vshlq_u64(v198, v186);
                  v186.i64[0] = v168.u32[2];
                  v186.i64[1] = v168.u32[3];
                  v200 = (int8x16_t)vshlq_u64(v197, v186);
                  v186.i64[0] = v167.u32[0];
                  v186.i64[1] = v167.u32[1];
                  v201 = (int8x16_t)vshlq_u64(v195, v186);
                  v186.i64[0] = v166.u32[0];
                  v186.i64[1] = v166.u32[1];
                  v202 = (int8x16_t)vshlq_u64(v194, v186);
                  v186.i64[0] = v165.u32[2];
                  v186.i64[1] = v165.u32[3];
                  v203 = (int8x16_t)vshlq_u64(v193, v186);
                  v186.i64[0] = v167.u32[2];
                  v186.i64[1] = v167.u32[3];
                  v204 = (int8x16_t)vshlq_u64(v192, v186);
                  v186.i64[0] = v166.u32[2];
                  v186.i64[1] = v166.u32[3];
                  v205 = (int8x16_t)vshlq_u64(v189, v186);
                  v186.i64[0] = v165.u32[0];
                  v186.i64[1] = v165.u32[1];
                  v178 = vorrq_s8((int8x16_t)vshlq_u64(v187, v186), v178);
                  v177 = vorrq_s8(v205, v177);
                  v173 = vorrq_s8(v204, v173);
                  v179 = vorrq_s8(v203, v179);
                  v174 = vorrq_s8(v202, v174);
                  v172 = vorrq_s8(v201, v172);
                  v164 = vorrq_s8(v200, v164);
                  v161 = vorrq_s8(v199, v161);
                  v162 = vaddq_s32(v162, v169);
                  v180 = vaddq_s32(v180, v169);
                  v181 = vaddq_s32(v181, v169);
                  v182 = vaddq_s32(v182, v169);
                  v168 = vaddq_s32(v168, v170);
                  v167 = vaddq_s32(v167, v170);
                  v166 = vaddq_s32(v166, v170);
                  v165 = vaddq_s32(v165, v170);
                  v175 -= 16;
                }
                while (v175);
                v153 = vaddvq_s32(vaddq_s32(vaddq_s32(v162, v181), vaddq_s32(v180, v182)));
                v206 = vorrq_s8(vorrq_s8(vorrq_s8(v161, v174), vorrq_s8(v172, v178)), vorrq_s8(vorrq_s8(v164, v177), vorrq_s8(v173, v179)));
                v144 = (unint64_t)vorr_s8(*(int8x8_t *)v206.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v206, v206, 8uLL));
                if ((v171 & 0x3FFFFFF0) != v171)
                {
LABEL_1471:
                  do
                  {
                    v153 += 8;
                    v207 = *(unsigned __int8 *)v154;
                    v154 = (unint64_t *)((char *)v154 + 1);
                    v144 |= (unint64_t)v207 << v160;
                    v160 -= 8;
                  }
                  while (v160 >= v157);
                }
              }
              else
              {
                v154 = v146;
              }
            }
            else
            {
              v152 = (v151 & 0xFFFFFFF8) + 8;
              v153 = v152 + v142;
              v154 = (unint64_t *)((char *)v146 + (v152 >> 3));
              v144 = (bswap64(*v146) >> (56 - (v151 & 0xF8u)) << (v151 & 7)) | *v2413;
            }
            *(_QWORD *)(a1 + 40) += (char *)v154 - (char *)v146;
            v142 = v153;
            v145 = v144 - (v143 << 56);
            if (v144 >= v143 << 56)
              goto LABEL_125;
LABEL_97:
            v137 = 0;
          }
          else
          {
            v145 = v144 - (v143 << 56);
            if (v144 < v143 << 56)
              goto LABEL_97;
LABEL_125:
            LODWORD(v143) = *(_DWORD *)(a1 + 24) - v143;
            v137 = 1;
            v144 = v145;
          }
          v208 = vpx_norm[v143];
          *(_QWORD *)(a1 + 16) = v144 << v208;
          *(_DWORD *)(a1 + 24) = (_DWORD)v143 << v208;
          *(_DWORD *)(a1 + 28) = v142 - v208;
          v209 = *(_QWORD *)(a1 + 13744);
          if (v209)
          {
            v210 = v209 + 8 * v141 + 4 * v137;
            ++*(_DWORD *)(v210 + 12776);
          }
          v17 = v2399;
          v20 = v2407;
          v19 = v2403;
LABEL_129:
          v17[3] = v137;
          result = read_tx_size(v2412, (uint64_t)v16, 1, (uint64_t)v2413);
          v17[2] = result;
          *((_WORD *)v17 + 4) = -256;
          if (v2396 != 2)
          {
            if (v2396 != 1)
            {
              if (!v2396)
              {
                if (v19 && (char)v19[8] <= 0)
                {
                  v527 = v19 + 44;
                  if (*v19 >= 3u)
                    v527 = v19 + 1;
                  v212 = *v527;
                  if (v20)
                    goto LABEL_350;
LABEL_351:
                  v528 = 0;
                }
                else
                {
                  v212 = 0;
                  if (!v20)
                    goto LABEL_351;
LABEL_350:
                  if ((char)v20[8] > 0)
                    goto LABEL_351;
                  v531 = v20 + 32;
                  if (*v20 >= 3u)
                    v531 = v20 + 1;
                  v528 = *v531;
                }
                LOBYTE(v532) = 0;
                v533 = (char *)&vp9_kf_y_mode_prob + 90 * v212 + 9 * v528;
                v244 = *(_DWORD *)(a1 + 24);
                v245 = *(_DWORD *)(a1 + 28);
                v246 = *(_QWORD *)(a1 + 16);
                v534.i64[0] = 0x800000008;
                v534.i64[1] = 0x800000008;
                v535.i64[0] = 0x7F0000007FLL;
                v535.i64[1] = 0x7F0000007FLL;
                while (2)
                {
                  v539 = v533[v532 >> 1];
                  if ((v245 & 0x80000000) == 0)
                  {
                    v536 = ((v244 - 1) * v539 + 256) >> 8;
                    v540 = v246 - (v536 << 56);
                    if (v246 < v536 << 56)
                    {
LABEL_394:
                      v537 = 0;
LABEL_362:
                      v538 = vpx_norm[v536];
                      v244 = (_DWORD)v536 << v538;
                      v246 <<= v538;
                      v245 -= v538;
                      *(_QWORD *)(a1 + 16) = v246;
                      *(_DWORD *)(a1 + 24) = (_DWORD)v536 << v538;
                      *(_DWORD *)(a1 + 28) = v245;
                      v532 = (char)vp9_intra_mode_tree[v537 + (unint64_t)v532];
                      if (v532 > 0)
                        continue;
                      v601 = -v532;
                      v2399[20] = -(char)v532;
                      if (v2403 && (char)v2403[8] <= 0)
                      {
                        v674 = v2403 + 56;
                        if (*v2403 >= 3u)
                          v674 = v2403 + 1;
                        v602 = *v674;
                      }
                      else
                      {
                        v602 = 0;
                      }
                      LOBYTE(v675) = 0;
                      v676 = (char *)&vp9_kf_y_mode_prob + 90 * v602 + 9 * v601;
                      v677.i64[0] = 0x800000008;
                      v677.i64[1] = 0x800000008;
                      v678.i64[0] = 0x7F0000007FLL;
                      v678.i64[1] = 0x7F0000007FLL;
                      while (2)
                      {
                        v682 = v676[v675 >> 1];
                        if ((v245 & 0x80000000) == 0)
                        {
                          v679 = ((v244 - 1) * v682 + 256) >> 8;
                          v683 = v246 - (v679 << 56);
                          if (v246 < v679 << 56)
                          {
LABEL_474:
                            v680 = 0;
LABEL_442:
                            v681 = vpx_norm[v679];
                            v244 = (_DWORD)v679 << v681;
                            v246 <<= v681;
                            v245 -= v681;
                            *(_QWORD *)(a1 + 16) = v246;
                            *(_DWORD *)(a1 + 24) = (_DWORD)v679 << v681;
                            *(_DWORD *)(a1 + 28) = v245;
                            v675 = (char)vp9_intra_mode_tree[v680 + (unint64_t)v675];
                            if (v675 <= 0)
                            {
                              v2399[32] = -(char)v675;
                              if (v2407 && (char)v2407[8] <= 0)
                              {
                                v745 = v2407 + 56;
                                if (*v2407 >= 3u)
                                  v745 = v2407 + 1;
                                v744 = *v745;
                              }
                              else
                              {
                                v744 = 0;
                              }
                              LOBYTE(v746) = 0;
                              v747 = (char *)&vp9_kf_y_mode_prob + 90 * v2399[20] + 9 * v744;
                              v748.i64[0] = 0x800000008;
                              v748.i64[1] = 0x800000008;
                              v749.i64[0] = 0x7F0000007FLL;
                              v749.i64[1] = 0x7F0000007FLL;
                              while (2)
                              {
                                v753 = v747[v746 >> 1];
                                if ((v245 & 0x80000000) == 0)
                                {
                                  v750 = ((v244 - 1) * v753 + 256) >> 8;
                                  v754 = v246 - (v750 << 56);
                                  if (v246 < v750 << 56)
                                  {
LABEL_515:
                                    v751 = 0;
LABEL_483:
                                    v752 = vpx_norm[v750];
                                    v244 = (_DWORD)v750 << v752;
                                    v246 <<= v752;
                                    v245 -= v752;
                                    *(_QWORD *)(a1 + 16) = v246;
                                    *(_DWORD *)(a1 + 24) = (_DWORD)v750 << v752;
                                    *(_DWORD *)(a1 + 28) = v245;
                                    v746 = (char)vp9_intra_mode_tree[v751 + (unint64_t)v746];
                                    if (v746 > 0)
                                      continue;
                                    LOBYTE(v815) = 0;
                                    v2399[44] = -(char)v746;
                                    v816 = (char *)&vp9_kf_y_mode_prob
                                         + 90 * v2399[32]
                                         + 9 * -(char)v746;
                                    v817.i64[0] = 0x800000008;
                                    v817.i64[1] = 0x800000008;
                                    v818.i64[0] = 0x7F0000007FLL;
                                    v818.i64[1] = 0x7F0000007FLL;
                                    while (2)
                                    {
                                      v822 = v816[v815 >> 1];
                                      if ((v245 & 0x80000000) == 0)
                                      {
                                        v819 = ((v244 - 1) * v822 + 256) >> 8;
                                        v823 = v246 - (v819 << 56);
                                        if (v246 < v819 << 56)
                                        {
LABEL_550:
                                          v820 = 0;
LABEL_518:
                                          v821 = vpx_norm[v819];
                                          v244 = (_DWORD)v819 << v821;
                                          v246 <<= v821;
                                          v245 -= v821;
                                          *(_QWORD *)(a1 + 16) = v246;
                                          *(_DWORD *)(a1 + 24) = (_DWORD)v819 << v821;
                                          *(_DWORD *)(a1 + 28) = v245;
                                          v815 = (char)vp9_intra_mode_tree[v820
                                                                         + (unint64_t)v815];
                                          if (v815 <= 0)
                                          {
                                            v456 = -v815;
                                            v673 = v2399;
                                            v2399[56] = -(char)v815;
LABEL_552:
                                            v673[1] = v456;
LABEL_553:
                                            LOBYTE(v884) = 0;
                                            v885 = (char *)&vp9_kf_uv_mode_prob + 9 * v456;
                                            v886.i64[0] = 0x800000008;
                                            v886.i64[1] = 0x800000008;
                                            v887.i64[0] = 0x7F0000007FLL;
                                            v887.i64[1] = 0x7F0000007FLL;
                                            while (2)
                                            {
                                              v891 = v885[v884 >> 1];
                                              if ((v245 & 0x80000000) == 0)
                                              {
                                                v888 = ((v244 - 1) * v891 + 256) >> 8;
                                                v892 = v246 - (v888 << 56);
                                                if (v246 < v888 << 56)
                                                {
LABEL_587:
                                                  v889 = 0;
LABEL_555:
                                                  v890 = vpx_norm[v888];
                                                  v244 = (_DWORD)v888 << v890;
                                                  v246 <<= v890;
                                                  v245 -= v890;
                                                  *(_QWORD *)(a1 + 16) = v246;
                                                  *(_DWORD *)(a1 + 24) = (_DWORD)v888 << v890;
                                                  *(_DWORD *)(a1 + 28) = v245;
                                                  v884 = (char)vp9_intra_mode_tree[v889
                                                                                 + (unint64_t)v884];
                                                  if (v884 <= 0)
                                                  {
                                                    v2399[6] = -(char)v884;
                                                    return result;
                                                  }
                                                  continue;
                                                }
LABEL_554:
                                                LODWORD(v888) = *(_DWORD *)(a1 + 24) - v888;
                                                v889 = 1;
                                                v246 = v892;
                                                goto LABEL_555;
                                              }
                                              break;
                                            }
                                            v893 = *(unint64_t **)(a1 + 40);
                                            v894 = *(_QWORD *)(a1 + 32) - (_QWORD)v893;
                                            v895 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                                            if (v895)
                                            {
                                              if (v894 >= 9)
                                                v896 = 9;
                                              else
                                                v896 = *(_QWORD *)(a1 + 32) - (_QWORD)v893;
                                              result = v895(*(_QWORD *)(a1 + 56), v893, a1 + 64, v896);
                                              v887.i64[0] = 0x7F0000007FLL;
                                              v887.i64[1] = 0x7F0000007FLL;
                                              v886.i64[0] = 0x800000008;
                                              v886.i64[1] = 0x800000008;
                                              v893 = (unint64_t *)(a1 + 64);
                                            }
                                            v897 = 8 * v894;
                                            v898 = 48 - v245;
                                            if (8 * v894 >= 0x41)
                                            {
                                              v899 = (v898 & 0xFFFFFFF8) + 8;
                                              v900 = v899 + v245;
                                              v901 = (unint64_t *)((char *)v893 + (v899 >> 3));
                                              v246 = (bswap64(*v893) >> (56 - (v898 & 0xF8u)) << (v898 & 7)) | *v2413;
                                              goto LABEL_586;
                                            }
                                            v902 = 56 - v245 - v897;
                                            if (v902 < 0)
                                              v900 = v245;
                                            else
                                              v900 = v245 + 0x40000000;
                                            if (v897)
                                              v903 = 1;
                                            else
                                              v903 = v902 <= -1;
                                            v904 = v902 & ~(v902 >> 31);
                                            if (!v903 || v898 < v904)
                                            {
                                              v901 = v893;
                                            }
                                            else
                                            {
                                              v906 = v904 - 1;
                                              if (v904 - 1 >= (int)(40 - v245))
                                                v906 = 40 - v245;
                                              v907 = 47 - v245 - v906;
                                              if (v907 < 0x78)
                                              {
                                                v901 = v893;
                                                goto LABEL_585;
                                              }
                                              v908 = (v907 >> 3) + 1;
                                              v909 = (int8x16_t)v246;
                                              v910 = 0uLL;
                                              v911 = (int32x4_t)v900;
                                              v912 = vdupq_n_s32(v898);
                                              v913 = vaddq_s32(v912, (int32x4_t)xmmword_208F3A6C0);
                                              v901 = (unint64_t *)((char *)v893 + (v908 & 0x3FFFFFF0));
                                              v914 = vaddq_s32(v912, (int32x4_t)xmmword_208F3A6D0);
                                              v898 -= 8 * (v908 & 0x3FFFFFF0);
                                              v915 = vaddq_s32(v912, (int32x4_t)xmmword_208F3A6A0);
                                              v916 = vaddq_s32(v912, (int32x4_t)xmmword_208F3A6B0);
                                              v917 = v908 & 0x3FFFFFF0;
                                              v918 = (uint8x16_t *)v893;
                                              v919 = 0uLL;
                                              v920 = 0uLL;
                                              v921 = 0uLL;
                                              v922 = 0uLL;
                                              v923 = 0uLL;
                                              v924 = 0uLL;
                                              v925 = 0uLL;
                                              v926 = 0uLL;
                                              v927 = 0uLL;
                                              do
                                              {
                                                v928 = *v918++;
                                                v929 = vmovl_high_u8(v928);
                                                v930 = vmovl_high_u16(v929);
                                                v931.i64[0] = v930.u32[0];
                                                v931.i64[1] = v930.u32[1];
                                                v932 = v931;
                                                v933 = vmovl_u16(*(uint16x4_t *)v929.i8);
                                                v931.i64[0] = v933.u32[2];
                                                v931.i64[1] = v933.u32[3];
                                                v934 = v931;
                                                v935 = vmovl_u8(*(uint8x8_t *)v928.i8);
                                                v936 = vmovl_high_u16(v935);
                                                v931.i64[0] = v936.u32[2];
                                                v931.i64[1] = v936.u32[3];
                                                v937 = v931;
                                                v931.i64[0] = v930.u32[2];
                                                v931.i64[1] = v930.u32[3];
                                                v938 = v931;
                                                v931.i64[0] = v933.u32[0];
                                                v931.i64[1] = v933.u32[1];
                                                v939 = v931;
                                                v931.i64[0] = v936.u32[0];
                                                v931.i64[1] = v936.u32[1];
                                                v940 = v931;
                                                v941 = vmovl_u16(*(uint16x4_t *)v935.i8);
                                                v931.i64[0] = v941.u32[2];
                                                v931.i64[1] = v941.u32[3];
                                                v942 = v931;
                                                v931.i64[0] = v941.u32[0];
                                                v931.i64[1] = v941.u32[1];
                                                v943 = v931;
                                                v931.i64[0] = v916.u32[0];
                                                v931.i64[1] = v916.u32[1];
                                                v944 = (int8x16_t)vshlq_u64(v943, v931);
                                                v931.i64[0] = v916.u32[2];
                                                v931.i64[1] = v916.u32[3];
                                                v945 = (int8x16_t)vshlq_u64(v942, v931);
                                                v931.i64[0] = v915.u32[0];
                                                v931.i64[1] = v915.u32[1];
                                                v946 = (int8x16_t)vshlq_u64(v940, v931);
                                                v931.i64[0] = v914.u32[0];
                                                v931.i64[1] = v914.u32[1];
                                                v947 = (int8x16_t)vshlq_u64(v939, v931);
                                                v931.i64[0] = v913.u32[2];
                                                v931.i64[1] = v913.u32[3];
                                                v948 = (int8x16_t)vshlq_u64(v938, v931);
                                                v931.i64[0] = v915.u32[2];
                                                v931.i64[1] = v915.u32[3];
                                                v949 = (int8x16_t)vshlq_u64(v937, v931);
                                                v931.i64[0] = v914.u32[2];
                                                v931.i64[1] = v914.u32[3];
                                                v950 = (int8x16_t)vshlq_u64(v934, v931);
                                                v931.i64[0] = v913.u32[0];
                                                v931.i64[1] = v913.u32[1];
                                                v923 = vorrq_s8((int8x16_t)vshlq_u64(v932, v931), v923);
                                                v922 = vorrq_s8(v950, v922);
                                                v920 = vorrq_s8(v949, v920);
                                                v924 = vorrq_s8(v948, v924);
                                                v921 = vorrq_s8(v947, v921);
                                                v919 = vorrq_s8(v946, v919);
                                                v910 = vorrq_s8(v945, v910);
                                                v909 = vorrq_s8(v944, v909);
                                                v911 = vaddq_s32(v911, v886);
                                                v925 = vaddq_s32(v925, v886);
                                                v926 = vaddq_s32(v926, v886);
                                                v927 = vaddq_s32(v927, v886);
                                                v916 = vaddq_s32(v916, v887);
                                                v915 = vaddq_s32(v915, v887);
                                                v914 = vaddq_s32(v914, v887);
                                                v913 = vaddq_s32(v913, v887);
                                                v917 -= 16;
                                              }
                                              while (v917);
                                              v900 = vaddvq_s32(vaddq_s32(vaddq_s32(v911, v926), vaddq_s32(v925, v927)));
                                              v951 = vorrq_s8(vorrq_s8(vorrq_s8(v909, v921), vorrq_s8(v919, v923)), vorrq_s8(vorrq_s8(v910, v922), vorrq_s8(v920, v924)));
                                              v246 = (unint64_t)vorr_s8(*(int8x8_t *)v951.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v951, v951, 8uLL));
                                              if ((v908 & 0x3FFFFFF0) != v908)
                                              {
                                                do
                                                {
LABEL_585:
                                                  v900 += 8;
                                                  v952 = *(unsigned __int8 *)v901;
                                                  v901 = (unint64_t *)((char *)v901 + 1);
                                                  v246 |= (unint64_t)v952 << v898;
                                                  v898 -= 8;
                                                }
                                                while (v898 >= v904);
                                              }
                                            }
LABEL_586:
                                            *(_QWORD *)(a1 + 40) += (char *)v901 - (char *)v893;
                                            v245 = v900;
                                            v888 = ((v244 - 1) * v891 + 256) >> 8;
                                            v892 = v246 - (v888 << 56);
                                            if (v246 < v888 << 56)
                                              goto LABEL_587;
                                            goto LABEL_554;
                                          }
                                          continue;
                                        }
LABEL_517:
                                        LODWORD(v819) = *(_DWORD *)(a1 + 24) - v819;
                                        v820 = 1;
                                        v246 = v823;
                                        goto LABEL_518;
                                      }
                                      break;
                                    }
                                    v824 = *(unint64_t **)(a1 + 40);
                                    v825 = *(_QWORD *)(a1 + 32) - (_QWORD)v824;
                                    v826 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                                    if (v826)
                                    {
                                      if (v825 >= 9)
                                        v827 = 9;
                                      else
                                        v827 = *(_QWORD *)(a1 + 32) - (_QWORD)v824;
                                      result = v826(*(_QWORD *)(a1 + 56), v824, a1 + 64, v827);
                                      v818.i64[0] = 0x7F0000007FLL;
                                      v818.i64[1] = 0x7F0000007FLL;
                                      v817.i64[0] = 0x800000008;
                                      v817.i64[1] = 0x800000008;
                                      v824 = (unint64_t *)(a1 + 64);
                                    }
                                    v828 = 8 * v825;
                                    v829 = 48 - v245;
                                    if (8 * v825 >= 0x41)
                                    {
                                      v830 = (v829 & 0xFFFFFFF8) + 8;
                                      v831 = v830 + v245;
                                      v832 = (unint64_t *)((char *)v824 + (v830 >> 3));
                                      v246 = (bswap64(*v824) >> (56 - (v829 & 0xF8u)) << (v829 & 7)) | *v2413;
                                      goto LABEL_549;
                                    }
                                    v833 = 56 - v245 - v828;
                                    if (v833 < 0)
                                      v831 = v245;
                                    else
                                      v831 = v245 + 0x40000000;
                                    if (v828)
                                      v834 = 1;
                                    else
                                      v834 = v833 <= -1;
                                    v835 = v833 & ~(v833 >> 31);
                                    if (!v834 || v829 < v835)
                                    {
                                      v832 = v824;
                                    }
                                    else
                                    {
                                      v837 = v835 - 1;
                                      if (v835 - 1 >= (int)(40 - v245))
                                        v837 = 40 - v245;
                                      v838 = 47 - v245 - v837;
                                      if (v838 < 0x78)
                                      {
                                        v832 = v824;
                                        goto LABEL_548;
                                      }
                                      v839 = (v838 >> 3) + 1;
                                      v840 = (int8x16_t)v246;
                                      v841 = 0uLL;
                                      v842 = (int32x4_t)v831;
                                      v843 = vdupq_n_s32(v829);
                                      v844 = vaddq_s32(v843, (int32x4_t)xmmword_208F3A6C0);
                                      v832 = (unint64_t *)((char *)v824 + (v839 & 0x3FFFFFF0));
                                      v845 = vaddq_s32(v843, (int32x4_t)xmmword_208F3A6D0);
                                      v829 -= 8 * (v839 & 0x3FFFFFF0);
                                      v846 = vaddq_s32(v843, (int32x4_t)xmmword_208F3A6A0);
                                      v847 = vaddq_s32(v843, (int32x4_t)xmmword_208F3A6B0);
                                      v848 = v839 & 0x3FFFFFF0;
                                      v849 = (uint8x16_t *)v824;
                                      v850 = 0uLL;
                                      v851 = 0uLL;
                                      v852 = 0uLL;
                                      v853 = 0uLL;
                                      v854 = 0uLL;
                                      v855 = 0uLL;
                                      v856 = 0uLL;
                                      v857 = 0uLL;
                                      v858 = 0uLL;
                                      do
                                      {
                                        v859 = *v849++;
                                        v860 = vmovl_high_u8(v859);
                                        v861 = vmovl_high_u16(v860);
                                        v862.i64[0] = v861.u32[0];
                                        v862.i64[1] = v861.u32[1];
                                        v863 = v862;
                                        v864 = vmovl_u16(*(uint16x4_t *)v860.i8);
                                        v862.i64[0] = v864.u32[2];
                                        v862.i64[1] = v864.u32[3];
                                        v865 = v862;
                                        v866 = vmovl_u8(*(uint8x8_t *)v859.i8);
                                        v867 = vmovl_high_u16(v866);
                                        v862.i64[0] = v867.u32[2];
                                        v862.i64[1] = v867.u32[3];
                                        v868 = v862;
                                        v862.i64[0] = v861.u32[2];
                                        v862.i64[1] = v861.u32[3];
                                        v869 = v862;
                                        v862.i64[0] = v864.u32[0];
                                        v862.i64[1] = v864.u32[1];
                                        v870 = v862;
                                        v862.i64[0] = v867.u32[0];
                                        v862.i64[1] = v867.u32[1];
                                        v871 = v862;
                                        v872 = vmovl_u16(*(uint16x4_t *)v866.i8);
                                        v862.i64[0] = v872.u32[2];
                                        v862.i64[1] = v872.u32[3];
                                        v873 = v862;
                                        v862.i64[0] = v872.u32[0];
                                        v862.i64[1] = v872.u32[1];
                                        v874 = v862;
                                        v862.i64[0] = v847.u32[0];
                                        v862.i64[1] = v847.u32[1];
                                        v875 = (int8x16_t)vshlq_u64(v874, v862);
                                        v862.i64[0] = v847.u32[2];
                                        v862.i64[1] = v847.u32[3];
                                        v876 = (int8x16_t)vshlq_u64(v873, v862);
                                        v862.i64[0] = v846.u32[0];
                                        v862.i64[1] = v846.u32[1];
                                        v877 = (int8x16_t)vshlq_u64(v871, v862);
                                        v862.i64[0] = v845.u32[0];
                                        v862.i64[1] = v845.u32[1];
                                        v878 = (int8x16_t)vshlq_u64(v870, v862);
                                        v862.i64[0] = v844.u32[2];
                                        v862.i64[1] = v844.u32[3];
                                        v879 = (int8x16_t)vshlq_u64(v869, v862);
                                        v862.i64[0] = v846.u32[2];
                                        v862.i64[1] = v846.u32[3];
                                        v880 = (int8x16_t)vshlq_u64(v868, v862);
                                        v862.i64[0] = v845.u32[2];
                                        v862.i64[1] = v845.u32[3];
                                        v881 = (int8x16_t)vshlq_u64(v865, v862);
                                        v862.i64[0] = v844.u32[0];
                                        v862.i64[1] = v844.u32[1];
                                        v854 = vorrq_s8((int8x16_t)vshlq_u64(v863, v862), v854);
                                        v853 = vorrq_s8(v881, v853);
                                        v851 = vorrq_s8(v880, v851);
                                        v855 = vorrq_s8(v879, v855);
                                        v852 = vorrq_s8(v878, v852);
                                        v850 = vorrq_s8(v877, v850);
                                        v841 = vorrq_s8(v876, v841);
                                        v840 = vorrq_s8(v875, v840);
                                        v842 = vaddq_s32(v842, v817);
                                        v856 = vaddq_s32(v856, v817);
                                        v857 = vaddq_s32(v857, v817);
                                        v858 = vaddq_s32(v858, v817);
                                        v847 = vaddq_s32(v847, v818);
                                        v846 = vaddq_s32(v846, v818);
                                        v845 = vaddq_s32(v845, v818);
                                        v844 = vaddq_s32(v844, v818);
                                        v848 -= 16;
                                      }
                                      while (v848);
                                      v831 = vaddvq_s32(vaddq_s32(vaddq_s32(v842, v857), vaddq_s32(v856, v858)));
                                      v882 = vorrq_s8(vorrq_s8(vorrq_s8(v840, v852), vorrq_s8(v850, v854)), vorrq_s8(vorrq_s8(v841, v853), vorrq_s8(v851, v855)));
                                      v246 = (unint64_t)vorr_s8(*(int8x8_t *)v882.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v882, v882, 8uLL));
                                      if ((v839 & 0x3FFFFFF0) != v839)
                                      {
                                        do
                                        {
LABEL_548:
                                          v831 += 8;
                                          v883 = *(unsigned __int8 *)v832;
                                          v832 = (unint64_t *)((char *)v832 + 1);
                                          v246 |= (unint64_t)v883 << v829;
                                          v829 -= 8;
                                        }
                                        while (v829 >= v835);
                                      }
                                    }
LABEL_549:
                                    *(_QWORD *)(a1 + 40) += (char *)v832 - (char *)v824;
                                    v245 = v831;
                                    v819 = ((v244 - 1) * v822 + 256) >> 8;
                                    v823 = v246 - (v819 << 56);
                                    if (v246 < v819 << 56)
                                      goto LABEL_550;
                                    goto LABEL_517;
                                  }
LABEL_482:
                                  LODWORD(v750) = *(_DWORD *)(a1 + 24) - v750;
                                  v751 = 1;
                                  v246 = v754;
                                  goto LABEL_483;
                                }
                                break;
                              }
                              v755 = *(unint64_t **)(a1 + 40);
                              v756 = *(_QWORD *)(a1 + 32) - (_QWORD)v755;
                              v757 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                              if (v757)
                              {
                                if (v756 >= 9)
                                  v758 = 9;
                                else
                                  v758 = *(_QWORD *)(a1 + 32) - (_QWORD)v755;
                                result = v757(*(_QWORD *)(a1 + 56), v755, a1 + 64, v758);
                                v749.i64[0] = 0x7F0000007FLL;
                                v749.i64[1] = 0x7F0000007FLL;
                                v748.i64[0] = 0x800000008;
                                v748.i64[1] = 0x800000008;
                                v755 = (unint64_t *)(a1 + 64);
                              }
                              v759 = 8 * v756;
                              v760 = 48 - v245;
                              if (8 * v756 >= 0x41)
                              {
                                v761 = (v760 & 0xFFFFFFF8) + 8;
                                v762 = v761 + v245;
                                v763 = (unint64_t *)((char *)v755 + (v761 >> 3));
                                v246 = (bswap64(*v755) >> (56 - (v760 & 0xF8u)) << (v760 & 7)) | *v2413;
                                goto LABEL_514;
                              }
                              v764 = 56 - v245 - v759;
                              if (v764 < 0)
                                v762 = v245;
                              else
                                v762 = v245 + 0x40000000;
                              if (v759)
                                v765 = 1;
                              else
                                v765 = v764 <= -1;
                              v766 = v764 & ~(v764 >> 31);
                              if (!v765 || v760 < v766)
                              {
                                v763 = v755;
                              }
                              else
                              {
                                v768 = v766 - 1;
                                if (v766 - 1 >= (int)(40 - v245))
                                  v768 = 40 - v245;
                                v769 = 47 - v245 - v768;
                                if (v769 < 0x78)
                                {
                                  v763 = v755;
                                  goto LABEL_513;
                                }
                                v770 = (v769 >> 3) + 1;
                                v771 = (int8x16_t)v246;
                                v772 = 0uLL;
                                v773 = (int32x4_t)v762;
                                v774 = vdupq_n_s32(v760);
                                v775 = vaddq_s32(v774, (int32x4_t)xmmword_208F3A6C0);
                                v763 = (unint64_t *)((char *)v755 + (v770 & 0x3FFFFFF0));
                                v776 = vaddq_s32(v774, (int32x4_t)xmmword_208F3A6D0);
                                v760 -= 8 * (v770 & 0x3FFFFFF0);
                                v777 = vaddq_s32(v774, (int32x4_t)xmmword_208F3A6A0);
                                v778 = vaddq_s32(v774, (int32x4_t)xmmword_208F3A6B0);
                                v779 = v770 & 0x3FFFFFF0;
                                v780 = (uint8x16_t *)v755;
                                v781 = 0uLL;
                                v782 = 0uLL;
                                v783 = 0uLL;
                                v784 = 0uLL;
                                v785 = 0uLL;
                                v786 = 0uLL;
                                v787 = 0uLL;
                                v788 = 0uLL;
                                v789 = 0uLL;
                                do
                                {
                                  v790 = *v780++;
                                  v791 = vmovl_high_u8(v790);
                                  v792 = vmovl_high_u16(v791);
                                  v793.i64[0] = v792.u32[0];
                                  v793.i64[1] = v792.u32[1];
                                  v794 = v793;
                                  v795 = vmovl_u16(*(uint16x4_t *)v791.i8);
                                  v793.i64[0] = v795.u32[2];
                                  v793.i64[1] = v795.u32[3];
                                  v796 = v793;
                                  v797 = vmovl_u8(*(uint8x8_t *)v790.i8);
                                  v798 = vmovl_high_u16(v797);
                                  v793.i64[0] = v798.u32[2];
                                  v793.i64[1] = v798.u32[3];
                                  v799 = v793;
                                  v793.i64[0] = v792.u32[2];
                                  v793.i64[1] = v792.u32[3];
                                  v800 = v793;
                                  v793.i64[0] = v795.u32[0];
                                  v793.i64[1] = v795.u32[1];
                                  v801 = v793;
                                  v793.i64[0] = v798.u32[0];
                                  v793.i64[1] = v798.u32[1];
                                  v802 = v793;
                                  v803 = vmovl_u16(*(uint16x4_t *)v797.i8);
                                  v793.i64[0] = v803.u32[2];
                                  v793.i64[1] = v803.u32[3];
                                  v804 = v793;
                                  v793.i64[0] = v803.u32[0];
                                  v793.i64[1] = v803.u32[1];
                                  v805 = v793;
                                  v793.i64[0] = v778.u32[0];
                                  v793.i64[1] = v778.u32[1];
                                  v806 = (int8x16_t)vshlq_u64(v805, v793);
                                  v793.i64[0] = v778.u32[2];
                                  v793.i64[1] = v778.u32[3];
                                  v807 = (int8x16_t)vshlq_u64(v804, v793);
                                  v793.i64[0] = v777.u32[0];
                                  v793.i64[1] = v777.u32[1];
                                  v808 = (int8x16_t)vshlq_u64(v802, v793);
                                  v793.i64[0] = v776.u32[0];
                                  v793.i64[1] = v776.u32[1];
                                  v809 = (int8x16_t)vshlq_u64(v801, v793);
                                  v793.i64[0] = v775.u32[2];
                                  v793.i64[1] = v775.u32[3];
                                  v810 = (int8x16_t)vshlq_u64(v800, v793);
                                  v793.i64[0] = v777.u32[2];
                                  v793.i64[1] = v777.u32[3];
                                  v811 = (int8x16_t)vshlq_u64(v799, v793);
                                  v793.i64[0] = v776.u32[2];
                                  v793.i64[1] = v776.u32[3];
                                  v812 = (int8x16_t)vshlq_u64(v796, v793);
                                  v793.i64[0] = v775.u32[0];
                                  v793.i64[1] = v775.u32[1];
                                  v785 = vorrq_s8((int8x16_t)vshlq_u64(v794, v793), v785);
                                  v784 = vorrq_s8(v812, v784);
                                  v782 = vorrq_s8(v811, v782);
                                  v786 = vorrq_s8(v810, v786);
                                  v783 = vorrq_s8(v809, v783);
                                  v781 = vorrq_s8(v808, v781);
                                  v772 = vorrq_s8(v807, v772);
                                  v771 = vorrq_s8(v806, v771);
                                  v773 = vaddq_s32(v773, v748);
                                  v787 = vaddq_s32(v787, v748);
                                  v788 = vaddq_s32(v788, v748);
                                  v789 = vaddq_s32(v789, v748);
                                  v778 = vaddq_s32(v778, v749);
                                  v777 = vaddq_s32(v777, v749);
                                  v776 = vaddq_s32(v776, v749);
                                  v775 = vaddq_s32(v775, v749);
                                  v779 -= 16;
                                }
                                while (v779);
                                v762 = vaddvq_s32(vaddq_s32(vaddq_s32(v773, v788), vaddq_s32(v787, v789)));
                                v813 = vorrq_s8(vorrq_s8(vorrq_s8(v771, v783), vorrq_s8(v781, v785)), vorrq_s8(vorrq_s8(v772, v784), vorrq_s8(v782, v786)));
                                v246 = (unint64_t)vorr_s8(*(int8x8_t *)v813.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v813, v813, 8uLL));
                                if ((v770 & 0x3FFFFFF0) != v770)
                                {
                                  do
                                  {
LABEL_513:
                                    v762 += 8;
                                    v814 = *(unsigned __int8 *)v763;
                                    v763 = (unint64_t *)((char *)v763 + 1);
                                    v246 |= (unint64_t)v814 << v760;
                                    v760 -= 8;
                                  }
                                  while (v760 >= v766);
                                }
                              }
LABEL_514:
                              *(_QWORD *)(a1 + 40) += (char *)v763 - (char *)v755;
                              v245 = v762;
                              v750 = ((v244 - 1) * v753 + 256) >> 8;
                              v754 = v246 - (v750 << 56);
                              if (v246 < v750 << 56)
                                goto LABEL_515;
                              goto LABEL_482;
                            }
                            continue;
                          }
LABEL_441:
                          LODWORD(v679) = *(_DWORD *)(a1 + 24) - v679;
                          v680 = 1;
                          v246 = v683;
                          goto LABEL_442;
                        }
                        break;
                      }
                      v684 = *(unint64_t **)(a1 + 40);
                      v685 = *(_QWORD *)(a1 + 32) - (_QWORD)v684;
                      v686 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                      if (v686)
                      {
                        if (v685 >= 9)
                          v687 = 9;
                        else
                          v687 = *(_QWORD *)(a1 + 32) - (_QWORD)v684;
                        result = v686(*(_QWORD *)(a1 + 56), v684, a1 + 64, v687);
                        v678.i64[0] = 0x7F0000007FLL;
                        v678.i64[1] = 0x7F0000007FLL;
                        v677.i64[0] = 0x800000008;
                        v677.i64[1] = 0x800000008;
                        v684 = (unint64_t *)(a1 + 64);
                      }
                      v688 = 8 * v685;
                      v689 = 48 - v245;
                      if (8 * v685 >= 0x41)
                      {
                        v690 = (v689 & 0xFFFFFFF8) + 8;
                        v691 = v690 + v245;
                        v692 = (unint64_t *)((char *)v684 + (v690 >> 3));
                        v246 = (bswap64(*v684) >> (56 - (v689 & 0xF8u)) << (v689 & 7)) | *v2413;
                        goto LABEL_473;
                      }
                      v693 = 56 - v245 - v688;
                      if (v693 < 0)
                        v691 = v245;
                      else
                        v691 = v245 + 0x40000000;
                      if (v688)
                        v694 = 1;
                      else
                        v694 = v693 <= -1;
                      v695 = v693 & ~(v693 >> 31);
                      if (!v694 || v689 < v695)
                      {
                        v692 = v684;
                      }
                      else
                      {
                        v697 = v695 - 1;
                        if (v695 - 1 >= (int)(40 - v245))
                          v697 = 40 - v245;
                        v698 = 47 - v245 - v697;
                        if (v698 < 0x78)
                        {
                          v692 = v684;
                          goto LABEL_472;
                        }
                        v699 = (v698 >> 3) + 1;
                        v700 = (int8x16_t)v246;
                        v701 = 0uLL;
                        v702 = (int32x4_t)v691;
                        v703 = vdupq_n_s32(v689);
                        v704 = vaddq_s32(v703, (int32x4_t)xmmword_208F3A6C0);
                        v692 = (unint64_t *)((char *)v684 + (v699 & 0x3FFFFFF0));
                        v705 = vaddq_s32(v703, (int32x4_t)xmmword_208F3A6D0);
                        v689 -= 8 * (v699 & 0x3FFFFFF0);
                        v706 = vaddq_s32(v703, (int32x4_t)xmmword_208F3A6A0);
                        v707 = vaddq_s32(v703, (int32x4_t)xmmword_208F3A6B0);
                        v708 = v699 & 0x3FFFFFF0;
                        v709 = (uint8x16_t *)v684;
                        v710 = 0uLL;
                        v711 = 0uLL;
                        v712 = 0uLL;
                        v713 = 0uLL;
                        v714 = 0uLL;
                        v715 = 0uLL;
                        v716 = 0uLL;
                        v717 = 0uLL;
                        v718 = 0uLL;
                        do
                        {
                          v719 = *v709++;
                          v720 = vmovl_high_u8(v719);
                          v721 = vmovl_high_u16(v720);
                          v722.i64[0] = v721.u32[0];
                          v722.i64[1] = v721.u32[1];
                          v723 = v722;
                          v724 = vmovl_u16(*(uint16x4_t *)v720.i8);
                          v722.i64[0] = v724.u32[2];
                          v722.i64[1] = v724.u32[3];
                          v725 = v722;
                          v726 = vmovl_u8(*(uint8x8_t *)v719.i8);
                          v727 = vmovl_high_u16(v726);
                          v722.i64[0] = v727.u32[2];
                          v722.i64[1] = v727.u32[3];
                          v728 = v722;
                          v722.i64[0] = v721.u32[2];
                          v722.i64[1] = v721.u32[3];
                          v729 = v722;
                          v722.i64[0] = v724.u32[0];
                          v722.i64[1] = v724.u32[1];
                          v730 = v722;
                          v722.i64[0] = v727.u32[0];
                          v722.i64[1] = v727.u32[1];
                          v731 = v722;
                          v732 = vmovl_u16(*(uint16x4_t *)v726.i8);
                          v722.i64[0] = v732.u32[2];
                          v722.i64[1] = v732.u32[3];
                          v733 = v722;
                          v722.i64[0] = v732.u32[0];
                          v722.i64[1] = v732.u32[1];
                          v734 = v722;
                          v722.i64[0] = v707.u32[0];
                          v722.i64[1] = v707.u32[1];
                          v735 = (int8x16_t)vshlq_u64(v734, v722);
                          v722.i64[0] = v707.u32[2];
                          v722.i64[1] = v707.u32[3];
                          v736 = (int8x16_t)vshlq_u64(v733, v722);
                          v722.i64[0] = v706.u32[0];
                          v722.i64[1] = v706.u32[1];
                          v737 = (int8x16_t)vshlq_u64(v731, v722);
                          v722.i64[0] = v705.u32[0];
                          v722.i64[1] = v705.u32[1];
                          v738 = (int8x16_t)vshlq_u64(v730, v722);
                          v722.i64[0] = v704.u32[2];
                          v722.i64[1] = v704.u32[3];
                          v739 = (int8x16_t)vshlq_u64(v729, v722);
                          v722.i64[0] = v706.u32[2];
                          v722.i64[1] = v706.u32[3];
                          v740 = (int8x16_t)vshlq_u64(v728, v722);
                          v722.i64[0] = v705.u32[2];
                          v722.i64[1] = v705.u32[3];
                          v741 = (int8x16_t)vshlq_u64(v725, v722);
                          v722.i64[0] = v704.u32[0];
                          v722.i64[1] = v704.u32[1];
                          v714 = vorrq_s8((int8x16_t)vshlq_u64(v723, v722), v714);
                          v713 = vorrq_s8(v741, v713);
                          v711 = vorrq_s8(v740, v711);
                          v715 = vorrq_s8(v739, v715);
                          v712 = vorrq_s8(v738, v712);
                          v710 = vorrq_s8(v737, v710);
                          v701 = vorrq_s8(v736, v701);
                          v700 = vorrq_s8(v735, v700);
                          v702 = vaddq_s32(v702, v677);
                          v716 = vaddq_s32(v716, v677);
                          v717 = vaddq_s32(v717, v677);
                          v718 = vaddq_s32(v718, v677);
                          v707 = vaddq_s32(v707, v678);
                          v706 = vaddq_s32(v706, v678);
                          v705 = vaddq_s32(v705, v678);
                          v704 = vaddq_s32(v704, v678);
                          v708 -= 16;
                        }
                        while (v708);
                        v691 = vaddvq_s32(vaddq_s32(vaddq_s32(v702, v717), vaddq_s32(v716, v718)));
                        v742 = vorrq_s8(vorrq_s8(vorrq_s8(v700, v712), vorrq_s8(v710, v714)), vorrq_s8(vorrq_s8(v701, v713), vorrq_s8(v711, v715)));
                        v246 = (unint64_t)vorr_s8(*(int8x8_t *)v742.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v742, v742, 8uLL));
                        if ((v699 & 0x3FFFFFF0) != v699)
                        {
                          do
                          {
LABEL_472:
                            v691 += 8;
                            v743 = *(unsigned __int8 *)v692;
                            v692 = (unint64_t *)((char *)v692 + 1);
                            v246 |= (unint64_t)v743 << v689;
                            v689 -= 8;
                          }
                          while (v689 >= v695);
                        }
                      }
LABEL_473:
                      *(_QWORD *)(a1 + 40) += (char *)v692 - (char *)v684;
                      v245 = v691;
                      v679 = ((v244 - 1) * v682 + 256) >> 8;
                      v683 = v246 - (v679 << 56);
                      if (v246 < v679 << 56)
                        goto LABEL_474;
                      goto LABEL_441;
                    }
LABEL_361:
                    LODWORD(v536) = *(_DWORD *)(a1 + 24) - v536;
                    v537 = 1;
                    v246 = v540;
                    goto LABEL_362;
                  }
                  break;
                }
                v541 = *(unint64_t **)(a1 + 40);
                v542 = *(_QWORD *)(a1 + 32) - (_QWORD)v541;
                v543 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                if (v543)
                {
                  if (v542 >= 9)
                    v544 = 9;
                  else
                    v544 = *(_QWORD *)(a1 + 32) - (_QWORD)v541;
                  result = v543(*(_QWORD *)(a1 + 56), v541, a1 + 64, v544);
                  v535.i64[0] = 0x7F0000007FLL;
                  v535.i64[1] = 0x7F0000007FLL;
                  v534.i64[0] = 0x800000008;
                  v534.i64[1] = 0x800000008;
                  v541 = (unint64_t *)(a1 + 64);
                }
                v545 = 8 * v542;
                v546 = 48 - v245;
                if (8 * v542 >= 0x41)
                {
                  v547 = (v546 & 0xFFFFFFF8) + 8;
                  v548 = v547 + v245;
                  v549 = (unint64_t *)((char *)v541 + (v547 >> 3));
                  v246 = (bswap64(*v541) >> (56 - (v546 & 0xF8u)) << (v546 & 7)) | *v2413;
                  goto LABEL_393;
                }
                v550 = 56 - v245 - v545;
                if (v550 < 0)
                  v548 = v245;
                else
                  v548 = v245 + 0x40000000;
                if (v545)
                  v551 = 1;
                else
                  v551 = v550 <= -1;
                v552 = v550 & ~(v550 >> 31);
                if (!v551 || v546 < v552)
                {
                  v549 = v541;
                }
                else
                {
                  v554 = v552 - 1;
                  if (v552 - 1 >= (int)(40 - v245))
                    v554 = 40 - v245;
                  v555 = 47 - v245 - v554;
                  if (v555 < 0x78)
                  {
                    v549 = v541;
                    goto LABEL_392;
                  }
                  v556 = (v555 >> 3) + 1;
                  v557 = (int8x16_t)v246;
                  v558 = 0uLL;
                  v559 = (int32x4_t)v548;
                  v560 = vdupq_n_s32(v546);
                  v561 = vaddq_s32(v560, (int32x4_t)xmmword_208F3A6C0);
                  v549 = (unint64_t *)((char *)v541 + (v556 & 0x3FFFFFF0));
                  v562 = vaddq_s32(v560, (int32x4_t)xmmword_208F3A6D0);
                  v546 -= 8 * (v556 & 0x3FFFFFF0);
                  v563 = vaddq_s32(v560, (int32x4_t)xmmword_208F3A6A0);
                  v564 = vaddq_s32(v560, (int32x4_t)xmmword_208F3A6B0);
                  v565 = v556 & 0x3FFFFFF0;
                  v566 = (uint8x16_t *)v541;
                  v567 = 0uLL;
                  v568 = 0uLL;
                  v569 = 0uLL;
                  v570 = 0uLL;
                  v571 = 0uLL;
                  v572 = 0uLL;
                  v573 = 0uLL;
                  v574 = 0uLL;
                  v575 = 0uLL;
                  do
                  {
                    v576 = *v566++;
                    v577 = vmovl_high_u8(v576);
                    v578 = vmovl_high_u16(v577);
                    v579.i64[0] = v578.u32[0];
                    v579.i64[1] = v578.u32[1];
                    v580 = v579;
                    v581 = vmovl_u16(*(uint16x4_t *)v577.i8);
                    v579.i64[0] = v581.u32[2];
                    v579.i64[1] = v581.u32[3];
                    v582 = v579;
                    v583 = vmovl_u8(*(uint8x8_t *)v576.i8);
                    v584 = vmovl_high_u16(v583);
                    v579.i64[0] = v584.u32[2];
                    v579.i64[1] = v584.u32[3];
                    v585 = v579;
                    v579.i64[0] = v578.u32[2];
                    v579.i64[1] = v578.u32[3];
                    v586 = v579;
                    v579.i64[0] = v581.u32[0];
                    v579.i64[1] = v581.u32[1];
                    v587 = v579;
                    v579.i64[0] = v584.u32[0];
                    v579.i64[1] = v584.u32[1];
                    v588 = v579;
                    v589 = vmovl_u16(*(uint16x4_t *)v583.i8);
                    v579.i64[0] = v589.u32[2];
                    v579.i64[1] = v589.u32[3];
                    v590 = v579;
                    v579.i64[0] = v589.u32[0];
                    v579.i64[1] = v589.u32[1];
                    v591 = v579;
                    v579.i64[0] = v564.u32[0];
                    v579.i64[1] = v564.u32[1];
                    v592 = (int8x16_t)vshlq_u64(v591, v579);
                    v579.i64[0] = v564.u32[2];
                    v579.i64[1] = v564.u32[3];
                    v593 = (int8x16_t)vshlq_u64(v590, v579);
                    v579.i64[0] = v563.u32[0];
                    v579.i64[1] = v563.u32[1];
                    v594 = (int8x16_t)vshlq_u64(v588, v579);
                    v579.i64[0] = v562.u32[0];
                    v579.i64[1] = v562.u32[1];
                    v595 = (int8x16_t)vshlq_u64(v587, v579);
                    v579.i64[0] = v561.u32[2];
                    v579.i64[1] = v561.u32[3];
                    v596 = (int8x16_t)vshlq_u64(v586, v579);
                    v579.i64[0] = v563.u32[2];
                    v579.i64[1] = v563.u32[3];
                    v597 = (int8x16_t)vshlq_u64(v585, v579);
                    v579.i64[0] = v562.u32[2];
                    v579.i64[1] = v562.u32[3];
                    v598 = (int8x16_t)vshlq_u64(v582, v579);
                    v579.i64[0] = v561.u32[0];
                    v579.i64[1] = v561.u32[1];
                    v571 = vorrq_s8((int8x16_t)vshlq_u64(v580, v579), v571);
                    v570 = vorrq_s8(v598, v570);
                    v568 = vorrq_s8(v597, v568);
                    v572 = vorrq_s8(v596, v572);
                    v569 = vorrq_s8(v595, v569);
                    v567 = vorrq_s8(v594, v567);
                    v558 = vorrq_s8(v593, v558);
                    v557 = vorrq_s8(v592, v557);
                    v559 = vaddq_s32(v559, v534);
                    v573 = vaddq_s32(v573, v534);
                    v574 = vaddq_s32(v574, v534);
                    v575 = vaddq_s32(v575, v534);
                    v564 = vaddq_s32(v564, v535);
                    v563 = vaddq_s32(v563, v535);
                    v562 = vaddq_s32(v562, v535);
                    v561 = vaddq_s32(v561, v535);
                    v565 -= 16;
                  }
                  while (v565);
                  v548 = vaddvq_s32(vaddq_s32(vaddq_s32(v559, v574), vaddq_s32(v573, v575)));
                  v599 = vorrq_s8(vorrq_s8(vorrq_s8(v557, v569), vorrq_s8(v567, v571)), vorrq_s8(vorrq_s8(v558, v570), vorrq_s8(v568, v572)));
                  v246 = (unint64_t)vorr_s8(*(int8x8_t *)v599.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v599, v599, 8uLL));
                  if ((v556 & 0x3FFFFFF0) != v556)
                  {
                    do
                    {
LABEL_392:
                      v548 += 8;
                      v600 = *(unsigned __int8 *)v549;
                      v549 = (unint64_t *)((char *)v549 + 1);
                      v246 |= (unint64_t)v600 << v546;
                      v546 -= 8;
                    }
                    while (v546 >= v552);
                  }
                }
LABEL_393:
                *(_QWORD *)(a1 + 40) += (char *)v549 - (char *)v541;
                v245 = v548;
                v536 = ((v244 - 1) * v539 + 256) >> 8;
                v540 = v246 - (v536 << 56);
                if (v246 < v536 << 56)
                  goto LABEL_394;
                goto LABEL_361;
              }
              if (v19 && (char)v19[8] <= 0)
              {
                v529 = v19 + 44;
                if (*v19 >= 3u)
                  v529 = v19 + 1;
                v215 = *v529;
                if (v20)
                  goto LABEL_355;
LABEL_356:
                v530 = 0;
              }
              else
              {
                v215 = 0;
                if (!v20)
                  goto LABEL_356;
LABEL_355:
                if ((char)v20[8] > 0)
                  goto LABEL_356;
                v603 = v20 + 32;
                if (*v20 >= 3u)
                  v603 = v20 + 1;
                v530 = *v603;
              }
              LOBYTE(v604) = 0;
              v605 = (char *)&vp9_kf_y_mode_prob + 90 * v215 + 9 * v530;
              v244 = *(_DWORD *)(a1 + 24);
              v245 = *(_DWORD *)(a1 + 28);
              v246 = *(_QWORD *)(a1 + 16);
              v606.i64[0] = 0x800000008;
              v606.i64[1] = 0x800000008;
              v607.i64[0] = 0x7F0000007FLL;
              v607.i64[1] = 0x7F0000007FLL;
              while (2)
              {
                v611 = v605[v604 >> 1];
                if ((v245 & 0x80000000) == 0)
                {
                  v608 = ((v244 - 1) * v611 + 256) >> 8;
                  v612 = v246 - (v608 << 56);
                  if (v246 < v608 << 56)
                  {
LABEL_435:
                    v609 = 0;
LABEL_403:
                    v610 = vpx_norm[v608];
                    v244 = (_DWORD)v608 << v610;
                    v246 <<= v610;
                    v245 -= v610;
                    *(_QWORD *)(a1 + 16) = v246;
                    *(_DWORD *)(a1 + 24) = (_DWORD)v608 << v610;
                    *(_DWORD *)(a1 + 28) = v245;
                    v604 = (char)vp9_intra_mode_tree[v609 + (unint64_t)v604];
                    if (v604 <= 0)
                    {
                      v456 = -v604;
                      v673 = v2399;
                      goto LABEL_552;
                    }
                    continue;
                  }
LABEL_402:
                  LODWORD(v608) = *(_DWORD *)(a1 + 24) - v608;
                  v609 = 1;
                  v246 = v612;
                  goto LABEL_403;
                }
                break;
              }
              v613 = *(unint64_t **)(a1 + 40);
              v614 = *(_QWORD *)(a1 + 32) - (_QWORD)v613;
              v615 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
              if (v615)
              {
                if (v614 >= 9)
                  v616 = 9;
                else
                  v616 = *(_QWORD *)(a1 + 32) - (_QWORD)v613;
                result = v615(*(_QWORD *)(a1 + 56), v613, a1 + 64, v616);
                v607.i64[0] = 0x7F0000007FLL;
                v607.i64[1] = 0x7F0000007FLL;
                v606.i64[0] = 0x800000008;
                v606.i64[1] = 0x800000008;
                v613 = (unint64_t *)(a1 + 64);
              }
              v617 = 8 * v614;
              v618 = 48 - v245;
              if (8 * v614 >= 0x41)
              {
                v619 = (v618 & 0xFFFFFFF8) + 8;
                v620 = v619 + v245;
                v621 = (unint64_t *)((char *)v613 + (v619 >> 3));
                v246 = (bswap64(*v613) >> (56 - (v618 & 0xF8u)) << (v618 & 7)) | *v2413;
                goto LABEL_434;
              }
              v622 = 56 - v245 - v617;
              if (v622 < 0)
                v620 = v245;
              else
                v620 = v245 + 0x40000000;
              if (v617)
                v623 = 1;
              else
                v623 = v622 <= -1;
              v624 = v622 & ~(v622 >> 31);
              if (!v623 || v618 < v624)
              {
                v621 = v613;
              }
              else
              {
                v626 = v624 - 1;
                if (v624 - 1 >= (int)(40 - v245))
                  v626 = 40 - v245;
                v627 = 47 - v245 - v626;
                if (v627 < 0x78)
                {
                  v621 = v613;
                  goto LABEL_433;
                }
                v628 = (v627 >> 3) + 1;
                v629 = (int8x16_t)v246;
                v630 = 0uLL;
                v631 = (int32x4_t)v620;
                v632 = vdupq_n_s32(v618);
                v633 = vaddq_s32(v632, (int32x4_t)xmmword_208F3A6C0);
                v621 = (unint64_t *)((char *)v613 + (v628 & 0x3FFFFFF0));
                v634 = vaddq_s32(v632, (int32x4_t)xmmword_208F3A6D0);
                v618 -= 8 * (v628 & 0x3FFFFFF0);
                v635 = vaddq_s32(v632, (int32x4_t)xmmword_208F3A6A0);
                v636 = vaddq_s32(v632, (int32x4_t)xmmword_208F3A6B0);
                v637 = v628 & 0x3FFFFFF0;
                v638 = (uint8x16_t *)v613;
                v639 = 0uLL;
                v640 = 0uLL;
                v641 = 0uLL;
                v642 = 0uLL;
                v643 = 0uLL;
                v644 = 0uLL;
                v645 = 0uLL;
                v646 = 0uLL;
                v647 = 0uLL;
                do
                {
                  v648 = *v638++;
                  v649 = vmovl_high_u8(v648);
                  v650 = vmovl_high_u16(v649);
                  v651.i64[0] = v650.u32[0];
                  v651.i64[1] = v650.u32[1];
                  v652 = v651;
                  v653 = vmovl_u16(*(uint16x4_t *)v649.i8);
                  v651.i64[0] = v653.u32[2];
                  v651.i64[1] = v653.u32[3];
                  v654 = v651;
                  v655 = vmovl_u8(*(uint8x8_t *)v648.i8);
                  v656 = vmovl_high_u16(v655);
                  v651.i64[0] = v656.u32[2];
                  v651.i64[1] = v656.u32[3];
                  v657 = v651;
                  v651.i64[0] = v650.u32[2];
                  v651.i64[1] = v650.u32[3];
                  v658 = v651;
                  v651.i64[0] = v653.u32[0];
                  v651.i64[1] = v653.u32[1];
                  v659 = v651;
                  v651.i64[0] = v656.u32[0];
                  v651.i64[1] = v656.u32[1];
                  v660 = v651;
                  v661 = vmovl_u16(*(uint16x4_t *)v655.i8);
                  v651.i64[0] = v661.u32[2];
                  v651.i64[1] = v661.u32[3];
                  v662 = v651;
                  v651.i64[0] = v661.u32[0];
                  v651.i64[1] = v661.u32[1];
                  v663 = v651;
                  v651.i64[0] = v636.u32[0];
                  v651.i64[1] = v636.u32[1];
                  v664 = (int8x16_t)vshlq_u64(v663, v651);
                  v651.i64[0] = v636.u32[2];
                  v651.i64[1] = v636.u32[3];
                  v665 = (int8x16_t)vshlq_u64(v662, v651);
                  v651.i64[0] = v635.u32[0];
                  v651.i64[1] = v635.u32[1];
                  v666 = (int8x16_t)vshlq_u64(v660, v651);
                  v651.i64[0] = v634.u32[0];
                  v651.i64[1] = v634.u32[1];
                  v667 = (int8x16_t)vshlq_u64(v659, v651);
                  v651.i64[0] = v633.u32[2];
                  v651.i64[1] = v633.u32[3];
                  v668 = (int8x16_t)vshlq_u64(v658, v651);
                  v651.i64[0] = v635.u32[2];
                  v651.i64[1] = v635.u32[3];
                  v669 = (int8x16_t)vshlq_u64(v657, v651);
                  v651.i64[0] = v634.u32[2];
                  v651.i64[1] = v634.u32[3];
                  v670 = (int8x16_t)vshlq_u64(v654, v651);
                  v651.i64[0] = v633.u32[0];
                  v651.i64[1] = v633.u32[1];
                  v643 = vorrq_s8((int8x16_t)vshlq_u64(v652, v651), v643);
                  v642 = vorrq_s8(v670, v642);
                  v640 = vorrq_s8(v669, v640);
                  v644 = vorrq_s8(v668, v644);
                  v641 = vorrq_s8(v667, v641);
                  v639 = vorrq_s8(v666, v639);
                  v630 = vorrq_s8(v665, v630);
                  v629 = vorrq_s8(v664, v629);
                  v631 = vaddq_s32(v631, v606);
                  v645 = vaddq_s32(v645, v606);
                  v646 = vaddq_s32(v646, v606);
                  v647 = vaddq_s32(v647, v606);
                  v636 = vaddq_s32(v636, v607);
                  v635 = vaddq_s32(v635, v607);
                  v634 = vaddq_s32(v634, v607);
                  v633 = vaddq_s32(v633, v607);
                  v637 -= 16;
                }
                while (v637);
                v620 = vaddvq_s32(vaddq_s32(vaddq_s32(v631, v646), vaddq_s32(v645, v647)));
                v671 = vorrq_s8(vorrq_s8(vorrq_s8(v629, v641), vorrq_s8(v639, v643)), vorrq_s8(vorrq_s8(v630, v642), vorrq_s8(v640, v644)));
                v246 = (unint64_t)vorr_s8(*(int8x8_t *)v671.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v671, v671, 8uLL));
                if ((v628 & 0x3FFFFFF0) != v628)
                {
                  do
                  {
LABEL_433:
                    v620 += 8;
                    v672 = *(unsigned __int8 *)v621;
                    v621 = (unint64_t *)((char *)v621 + 1);
                    v246 |= (unint64_t)v672 << v618;
                    v618 -= 8;
                  }
                  while (v618 >= v624);
                }
              }
LABEL_434:
              *(_QWORD *)(a1 + 40) += (char *)v621 - (char *)v613;
              v245 = v620;
              v608 = ((v244 - 1) * v611 + 256) >> 8;
              v612 = v246 - (v608 << 56);
              if (v246 < v608 << 56)
                goto LABEL_435;
              goto LABEL_402;
            }
            if (v19 && (char)v19[8] <= 0)
            {
              v239 = v19 + 44;
              if (*v19 >= 3u)
                v239 = v19 + 1;
              v214 = *v239;
              if (v20)
                goto LABEL_185;
LABEL_186:
              v240 = 0;
            }
            else
            {
              v214 = 0;
              if (!v20)
                goto LABEL_186;
LABEL_185:
              if ((char)v20[8] > 0)
                goto LABEL_186;
              v315 = v20 + 32;
              if (*v20 >= 3u)
                v315 = v20 + 1;
              v240 = *v315;
            }
            LOBYTE(v316) = 0;
            v317 = (char *)&vp9_kf_y_mode_prob + 90 * v214 + 9 * v240;
            v244 = *(_DWORD *)(a1 + 24);
            v245 = *(_DWORD *)(a1 + 28);
            v246 = *(_QWORD *)(a1 + 16);
            v318.i64[0] = 0x800000008;
            v318.i64[1] = 0x800000008;
            v319.i64[0] = 0x7F0000007FLL;
            v319.i64[1] = 0x7F0000007FLL;
            while (2)
            {
              v323 = v317[v316 >> 1];
              if ((v245 & 0x80000000) == 0)
              {
                v320 = ((v244 - 1) * v323 + 256) >> 8;
                v324 = v246 - (v320 << 56);
                if (v246 < v320 << 56)
                {
LABEL_265:
                  v321 = 0;
LABEL_233:
                  v322 = vpx_norm[v320];
                  v244 = (_DWORD)v320 << v322;
                  v246 <<= v322;
                  v245 -= v322;
                  *(_QWORD *)(a1 + 16) = v246;
                  *(_DWORD *)(a1 + 24) = (_DWORD)v320 << v322;
                  *(_DWORD *)(a1 + 28) = v245;
                  v316 = (char)vp9_intra_mode_tree[v321 + (unint64_t)v316];
                  if (v316 > 0)
                    continue;
                  v2399[44] = -(char)v316;
                  v2399[20] = -(char)v316;
                  if (v2403 && (char)v2403[8] <= 0)
                  {
                    v457 = v2403 + 56;
                    if (*v2403 >= 3u)
                      v457 = v2403 + 1;
                    v385 = *v457;
                  }
                  else
                  {
                    v385 = 0;
                  }
                  LOBYTE(v458) = 0;
                  v459 = (char *)&vp9_kf_y_mode_prob + 90 * v385 + 9 * -(char)v316;
                  v460.i64[0] = 0x800000008;
                  v460.i64[1] = 0x800000008;
                  v461.i64[0] = 0x7F0000007FLL;
                  v461.i64[1] = 0x7F0000007FLL;
                  while (2)
                  {
                    v465 = v459[v458 >> 1];
                    if ((v245 & 0x80000000) == 0)
                    {
                      v462 = ((v244 - 1) * v465 + 256) >> 8;
                      v466 = v246 - (v462 << 56);
                      if (v246 < v462 << 56)
                      {
LABEL_345:
                        v463 = 0;
LABEL_313:
                        v464 = vpx_norm[v462];
                        v244 = (_DWORD)v462 << v464;
                        v246 <<= v464;
                        v245 -= v464;
                        *(_QWORD *)(a1 + 16) = v246;
                        *(_DWORD *)(a1 + 24) = (_DWORD)v462 << v464;
                        *(_DWORD *)(a1 + 28) = v245;
                        v458 = (char)vp9_intra_mode_tree[v463 + (unint64_t)v458];
                        if (v458 <= 0)
                        {
                          v456 = -v458;
                          v2399[1] = -(char)v458;
                          v2399[56] = -(char)v458;
                          v2399[32] = -(char)v458;
                          goto LABEL_553;
                        }
                        continue;
                      }
LABEL_312:
                      LODWORD(v462) = *(_DWORD *)(a1 + 24) - v462;
                      v463 = 1;
                      v246 = v466;
                      goto LABEL_313;
                    }
                    break;
                  }
                  v467 = *(unint64_t **)(a1 + 40);
                  v468 = *(_QWORD *)(a1 + 32) - (_QWORD)v467;
                  v469 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                  if (v469)
                  {
                    if (v468 >= 9)
                      v470 = 9;
                    else
                      v470 = *(_QWORD *)(a1 + 32) - (_QWORD)v467;
                    result = v469(*(_QWORD *)(a1 + 56), v467, a1 + 64, v470);
                    v461.i64[0] = 0x7F0000007FLL;
                    v461.i64[1] = 0x7F0000007FLL;
                    v460.i64[0] = 0x800000008;
                    v460.i64[1] = 0x800000008;
                    v467 = (unint64_t *)(a1 + 64);
                  }
                  v471 = 8 * v468;
                  v472 = 48 - v245;
                  if (8 * v468 >= 0x41)
                  {
                    v473 = (v472 & 0xFFFFFFF8) + 8;
                    v474 = v473 + v245;
                    v475 = (unint64_t *)((char *)v467 + (v473 >> 3));
                    v246 = (bswap64(*v467) >> (56 - (v472 & 0xF8u)) << (v472 & 7)) | *v2413;
                    goto LABEL_344;
                  }
                  v476 = 56 - v245 - v471;
                  if (v476 < 0)
                    v474 = v245;
                  else
                    v474 = v245 + 0x40000000;
                  if (v471)
                    v477 = 1;
                  else
                    v477 = v476 <= -1;
                  v478 = v476 & ~(v476 >> 31);
                  if (!v477 || v472 < v478)
                  {
                    v475 = v467;
                  }
                  else
                  {
                    v480 = v478 - 1;
                    if (v478 - 1 >= (int)(40 - v245))
                      v480 = 40 - v245;
                    v481 = 47 - v245 - v480;
                    if (v481 < 0x78)
                    {
                      v475 = v467;
                      goto LABEL_343;
                    }
                    v482 = (v481 >> 3) + 1;
                    v483 = (int8x16_t)v246;
                    v484 = 0uLL;
                    v485 = (int32x4_t)v474;
                    v486 = vdupq_n_s32(v472);
                    v487 = vaddq_s32(v486, (int32x4_t)xmmword_208F3A6C0);
                    v475 = (unint64_t *)((char *)v467 + (v482 & 0x3FFFFFF0));
                    v488 = vaddq_s32(v486, (int32x4_t)xmmword_208F3A6D0);
                    v472 -= 8 * (v482 & 0x3FFFFFF0);
                    v489 = vaddq_s32(v486, (int32x4_t)xmmword_208F3A6A0);
                    v490 = vaddq_s32(v486, (int32x4_t)xmmword_208F3A6B0);
                    v491 = v482 & 0x3FFFFFF0;
                    v492 = (uint8x16_t *)v467;
                    v493 = 0uLL;
                    v494 = 0uLL;
                    v495 = 0uLL;
                    v496 = 0uLL;
                    v497 = 0uLL;
                    v498 = 0uLL;
                    v499 = 0uLL;
                    v500 = 0uLL;
                    v501 = 0uLL;
                    do
                    {
                      v502 = *v492++;
                      v503 = vmovl_high_u8(v502);
                      v504 = vmovl_high_u16(v503);
                      v505.i64[0] = v504.u32[0];
                      v505.i64[1] = v504.u32[1];
                      v506 = v505;
                      v507 = vmovl_u16(*(uint16x4_t *)v503.i8);
                      v505.i64[0] = v507.u32[2];
                      v505.i64[1] = v507.u32[3];
                      v508 = v505;
                      v509 = vmovl_u8(*(uint8x8_t *)v502.i8);
                      v510 = vmovl_high_u16(v509);
                      v505.i64[0] = v510.u32[2];
                      v505.i64[1] = v510.u32[3];
                      v511 = v505;
                      v505.i64[0] = v504.u32[2];
                      v505.i64[1] = v504.u32[3];
                      v512 = v505;
                      v505.i64[0] = v507.u32[0];
                      v505.i64[1] = v507.u32[1];
                      v513 = v505;
                      v505.i64[0] = v510.u32[0];
                      v505.i64[1] = v510.u32[1];
                      v514 = v505;
                      v515 = vmovl_u16(*(uint16x4_t *)v509.i8);
                      v505.i64[0] = v515.u32[2];
                      v505.i64[1] = v515.u32[3];
                      v516 = v505;
                      v505.i64[0] = v515.u32[0];
                      v505.i64[1] = v515.u32[1];
                      v517 = v505;
                      v505.i64[0] = v490.u32[0];
                      v505.i64[1] = v490.u32[1];
                      v518 = (int8x16_t)vshlq_u64(v517, v505);
                      v505.i64[0] = v490.u32[2];
                      v505.i64[1] = v490.u32[3];
                      v519 = (int8x16_t)vshlq_u64(v516, v505);
                      v505.i64[0] = v489.u32[0];
                      v505.i64[1] = v489.u32[1];
                      v520 = (int8x16_t)vshlq_u64(v514, v505);
                      v505.i64[0] = v488.u32[0];
                      v505.i64[1] = v488.u32[1];
                      v521 = (int8x16_t)vshlq_u64(v513, v505);
                      v505.i64[0] = v487.u32[2];
                      v505.i64[1] = v487.u32[3];
                      v522 = (int8x16_t)vshlq_u64(v512, v505);
                      v505.i64[0] = v489.u32[2];
                      v505.i64[1] = v489.u32[3];
                      v523 = (int8x16_t)vshlq_u64(v511, v505);
                      v505.i64[0] = v488.u32[2];
                      v505.i64[1] = v488.u32[3];
                      v524 = (int8x16_t)vshlq_u64(v508, v505);
                      v505.i64[0] = v487.u32[0];
                      v505.i64[1] = v487.u32[1];
                      v497 = vorrq_s8((int8x16_t)vshlq_u64(v506, v505), v497);
                      v496 = vorrq_s8(v524, v496);
                      v494 = vorrq_s8(v523, v494);
                      v498 = vorrq_s8(v522, v498);
                      v495 = vorrq_s8(v521, v495);
                      v493 = vorrq_s8(v520, v493);
                      v484 = vorrq_s8(v519, v484);
                      v483 = vorrq_s8(v518, v483);
                      v485 = vaddq_s32(v485, v460);
                      v499 = vaddq_s32(v499, v460);
                      v500 = vaddq_s32(v500, v460);
                      v501 = vaddq_s32(v501, v460);
                      v490 = vaddq_s32(v490, v461);
                      v489 = vaddq_s32(v489, v461);
                      v488 = vaddq_s32(v488, v461);
                      v487 = vaddq_s32(v487, v461);
                      v491 -= 16;
                    }
                    while (v491);
                    v474 = vaddvq_s32(vaddq_s32(vaddq_s32(v485, v500), vaddq_s32(v499, v501)));
                    v525 = vorrq_s8(vorrq_s8(vorrq_s8(v483, v495), vorrq_s8(v493, v497)), vorrq_s8(vorrq_s8(v484, v496), vorrq_s8(v494, v498)));
                    v246 = (unint64_t)vorr_s8(*(int8x8_t *)v525.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v525, v525, 8uLL));
                    if ((v482 & 0x3FFFFFF0) != v482)
                    {
                      do
                      {
LABEL_343:
                        v474 += 8;
                        v526 = *(unsigned __int8 *)v475;
                        v475 = (unint64_t *)((char *)v475 + 1);
                        v246 |= (unint64_t)v526 << v472;
                        v472 -= 8;
                      }
                      while (v472 >= v478);
                    }
                  }
LABEL_344:
                  *(_QWORD *)(a1 + 40) += (char *)v475 - (char *)v467;
                  v245 = v474;
                  v462 = ((v244 - 1) * v465 + 256) >> 8;
                  v466 = v246 - (v462 << 56);
                  if (v246 < v462 << 56)
                    goto LABEL_345;
                  goto LABEL_312;
                }
LABEL_232:
                LODWORD(v320) = *(_DWORD *)(a1 + 24) - v320;
                v321 = 1;
                v246 = v324;
                goto LABEL_233;
              }
              break;
            }
            v325 = *(unint64_t **)(a1 + 40);
            v326 = *(_QWORD *)(a1 + 32) - (_QWORD)v325;
            v327 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
            if (v327)
            {
              if (v326 >= 9)
                v328 = 9;
              else
                v328 = *(_QWORD *)(a1 + 32) - (_QWORD)v325;
              result = v327(*(_QWORD *)(a1 + 56), v325, a1 + 64, v328);
              v319.i64[0] = 0x7F0000007FLL;
              v319.i64[1] = 0x7F0000007FLL;
              v318.i64[0] = 0x800000008;
              v318.i64[1] = 0x800000008;
              v325 = (unint64_t *)(a1 + 64);
            }
            v329 = 8 * v326;
            v330 = 48 - v245;
            if (8 * v326 >= 0x41)
            {
              v331 = (v330 & 0xFFFFFFF8) + 8;
              v332 = v331 + v245;
              v333 = (unint64_t *)((char *)v325 + (v331 >> 3));
              v246 = (bswap64(*v325) >> (56 - (v330 & 0xF8u)) << (v330 & 7)) | *v2413;
              goto LABEL_264;
            }
            v334 = 56 - v245 - v329;
            if (v334 < 0)
              v332 = v245;
            else
              v332 = v245 + 0x40000000;
            if (v329)
              v335 = 1;
            else
              v335 = v334 <= -1;
            v336 = v334 & ~(v334 >> 31);
            if (!v335 || v330 < v336)
            {
              v333 = v325;
            }
            else
            {
              v338 = v336 - 1;
              if (v336 - 1 >= (int)(40 - v245))
                v338 = 40 - v245;
              v339 = 47 - v245 - v338;
              if (v339 < 0x78)
              {
                v333 = v325;
                goto LABEL_263;
              }
              v340 = (v339 >> 3) + 1;
              v341 = (int8x16_t)v246;
              v342 = 0uLL;
              v343 = (int32x4_t)v332;
              v344 = vdupq_n_s32(v330);
              v345 = vaddq_s32(v344, (int32x4_t)xmmword_208F3A6C0);
              v333 = (unint64_t *)((char *)v325 + (v340 & 0x3FFFFFF0));
              v346 = vaddq_s32(v344, (int32x4_t)xmmword_208F3A6D0);
              v330 -= 8 * (v340 & 0x3FFFFFF0);
              v347 = vaddq_s32(v344, (int32x4_t)xmmword_208F3A6A0);
              v348 = vaddq_s32(v344, (int32x4_t)xmmword_208F3A6B0);
              v349 = v340 & 0x3FFFFFF0;
              v350 = (uint8x16_t *)v325;
              v351 = 0uLL;
              v352 = 0uLL;
              v353 = 0uLL;
              v354 = 0uLL;
              v355 = 0uLL;
              v356 = 0uLL;
              v357 = 0uLL;
              v358 = 0uLL;
              v359 = 0uLL;
              do
              {
                v360 = *v350++;
                v361 = vmovl_high_u8(v360);
                v362 = vmovl_high_u16(v361);
                v363.i64[0] = v362.u32[0];
                v363.i64[1] = v362.u32[1];
                v364 = v363;
                v365 = vmovl_u16(*(uint16x4_t *)v361.i8);
                v363.i64[0] = v365.u32[2];
                v363.i64[1] = v365.u32[3];
                v366 = v363;
                v367 = vmovl_u8(*(uint8x8_t *)v360.i8);
                v368 = vmovl_high_u16(v367);
                v363.i64[0] = v368.u32[2];
                v363.i64[1] = v368.u32[3];
                v369 = v363;
                v363.i64[0] = v362.u32[2];
                v363.i64[1] = v362.u32[3];
                v370 = v363;
                v363.i64[0] = v365.u32[0];
                v363.i64[1] = v365.u32[1];
                v371 = v363;
                v363.i64[0] = v368.u32[0];
                v363.i64[1] = v368.u32[1];
                v372 = v363;
                v373 = vmovl_u16(*(uint16x4_t *)v367.i8);
                v363.i64[0] = v373.u32[2];
                v363.i64[1] = v373.u32[3];
                v374 = v363;
                v363.i64[0] = v373.u32[0];
                v363.i64[1] = v373.u32[1];
                v375 = v363;
                v363.i64[0] = v348.u32[0];
                v363.i64[1] = v348.u32[1];
                v376 = (int8x16_t)vshlq_u64(v375, v363);
                v363.i64[0] = v348.u32[2];
                v363.i64[1] = v348.u32[3];
                v377 = (int8x16_t)vshlq_u64(v374, v363);
                v363.i64[0] = v347.u32[0];
                v363.i64[1] = v347.u32[1];
                v378 = (int8x16_t)vshlq_u64(v372, v363);
                v363.i64[0] = v346.u32[0];
                v363.i64[1] = v346.u32[1];
                v379 = (int8x16_t)vshlq_u64(v371, v363);
                v363.i64[0] = v345.u32[2];
                v363.i64[1] = v345.u32[3];
                v380 = (int8x16_t)vshlq_u64(v370, v363);
                v363.i64[0] = v347.u32[2];
                v363.i64[1] = v347.u32[3];
                v381 = (int8x16_t)vshlq_u64(v369, v363);
                v363.i64[0] = v346.u32[2];
                v363.i64[1] = v346.u32[3];
                v382 = (int8x16_t)vshlq_u64(v366, v363);
                v363.i64[0] = v345.u32[0];
                v363.i64[1] = v345.u32[1];
                v355 = vorrq_s8((int8x16_t)vshlq_u64(v364, v363), v355);
                v354 = vorrq_s8(v382, v354);
                v352 = vorrq_s8(v381, v352);
                v356 = vorrq_s8(v380, v356);
                v353 = vorrq_s8(v379, v353);
                v351 = vorrq_s8(v378, v351);
                v342 = vorrq_s8(v377, v342);
                v341 = vorrq_s8(v376, v341);
                v343 = vaddq_s32(v343, v318);
                v357 = vaddq_s32(v357, v318);
                v358 = vaddq_s32(v358, v318);
                v359 = vaddq_s32(v359, v318);
                v348 = vaddq_s32(v348, v319);
                v347 = vaddq_s32(v347, v319);
                v346 = vaddq_s32(v346, v319);
                v345 = vaddq_s32(v345, v319);
                v349 -= 16;
              }
              while (v349);
              v332 = vaddvq_s32(vaddq_s32(vaddq_s32(v343, v358), vaddq_s32(v357, v359)));
              v383 = vorrq_s8(vorrq_s8(vorrq_s8(v341, v353), vorrq_s8(v351, v355)), vorrq_s8(vorrq_s8(v342, v354), vorrq_s8(v352, v356)));
              v246 = (unint64_t)vorr_s8(*(int8x8_t *)v383.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v383, v383, 8uLL));
              if ((v340 & 0x3FFFFFF0) != v340)
              {
                do
                {
LABEL_263:
                  v332 += 8;
                  v384 = *(unsigned __int8 *)v333;
                  v333 = (unint64_t *)((char *)v333 + 1);
                  v246 |= (unint64_t)v384 << v330;
                  v330 -= 8;
                }
                while (v330 >= v336);
              }
            }
LABEL_264:
            *(_QWORD *)(a1 + 40) += (char *)v333 - (char *)v325;
            v245 = v332;
            v320 = ((v244 - 1) * v323 + 256) >> 8;
            v324 = v246 - (v320 << 56);
            if (v246 < v320 << 56)
              goto LABEL_265;
            goto LABEL_232;
          }
          if (v19)
          {
            if ((char)v19[8] > 0)
            {
              v213 = 0;
              if (!v20)
                goto LABEL_181;
LABEL_180:
              if ((char)v20[8] > 0)
                goto LABEL_181;
              v241 = v20 + 32;
              if (*v20 >= 3u)
                v241 = v20 + 1;
              v238 = *v241;
LABEL_190:
              LOBYTE(v242) = 0;
              v243 = (char *)&vp9_kf_y_mode_prob + 90 * v213 + 9 * v238;
              v244 = *(_DWORD *)(a1 + 24);
              v245 = *(_DWORD *)(a1 + 28);
              v246 = *(_QWORD *)(a1 + 16);
              v247.i64[0] = 0x800000008;
              v247.i64[1] = 0x800000008;
              v248.i64[0] = 0x7F0000007FLL;
              v248.i64[1] = 0x7F0000007FLL;
              while (2)
              {
                v252 = v243[v242 >> 1];
                if ((v245 & 0x80000000) == 0)
                {
                  v249 = ((v244 - 1) * v252 + 256) >> 8;
                  v253 = v246 - (v249 << 56);
                  if (v246 < v249 << 56)
                  {
LABEL_224:
                    v250 = 0;
LABEL_192:
                    v251 = vpx_norm[v249];
                    v244 = (_DWORD)v249 << v251;
                    v246 <<= v251;
                    v245 -= v251;
                    *(_QWORD *)(a1 + 16) = v246;
                    *(_DWORD *)(a1 + 24) = (_DWORD)v249 << v251;
                    *(_DWORD *)(a1 + 28) = v245;
                    v242 = (char)vp9_intra_mode_tree[v250 + (unint64_t)v242];
                    if (v242 > 0)
                      continue;
                    v2399[32] = -(char)v242;
                    v2399[20] = -(char)v242;
                    if (v2407 && (char)v2407[8] <= 0)
                    {
                      v386 = v2407 + 56;
                      if (*v2407 >= 3u)
                        v386 = v2407 + 1;
                      v314 = *v386;
                    }
                    else
                    {
                      v314 = 0;
                    }
                    LOBYTE(v387) = 0;
                    v388 = (char *)&vp9_kf_y_mode_prob + 90 * -(char)v242 + 9 * v314;
                    v389.i64[0] = 0x800000008;
                    v389.i64[1] = 0x800000008;
                    v390.i64[0] = 0x7F0000007FLL;
                    v390.i64[1] = 0x7F0000007FLL;
                    while (2)
                    {
                      v394 = v388[v387 >> 1];
                      if ((v245 & 0x80000000) == 0)
                      {
                        v391 = ((v244 - 1) * v394 + 256) >> 8;
                        v395 = v246 - (v391 << 56);
                        if (v246 < v391 << 56)
                        {
LABEL_306:
                          v392 = 0;
LABEL_274:
                          v393 = vpx_norm[v391];
                          v244 = (_DWORD)v391 << v393;
                          v246 <<= v393;
                          v245 -= v393;
                          *(_QWORD *)(a1 + 16) = v246;
                          *(_DWORD *)(a1 + 24) = (_DWORD)v391 << v393;
                          *(_DWORD *)(a1 + 28) = v245;
                          v387 = (char)vp9_intra_mode_tree[v392 + (unint64_t)v387];
                          if (v387 <= 0)
                          {
                            v456 = -v387;
                            v2399[1] = -(char)v387;
                            v2399[56] = -(char)v387;
                            v2399[44] = -(char)v387;
                            goto LABEL_553;
                          }
                          continue;
                        }
LABEL_273:
                        LODWORD(v391) = *(_DWORD *)(a1 + 24) - v391;
                        v392 = 1;
                        v246 = v395;
                        goto LABEL_274;
                      }
                      break;
                    }
                    v396 = *(unint64_t **)(a1 + 40);
                    v397 = *(_QWORD *)(a1 + 32) - (_QWORD)v396;
                    v398 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                    if (v398)
                    {
                      if (v397 >= 9)
                        v399 = 9;
                      else
                        v399 = *(_QWORD *)(a1 + 32) - (_QWORD)v396;
                      result = v398(*(_QWORD *)(a1 + 56), v396, a1 + 64, v399);
                      v390.i64[0] = 0x7F0000007FLL;
                      v390.i64[1] = 0x7F0000007FLL;
                      v389.i64[0] = 0x800000008;
                      v389.i64[1] = 0x800000008;
                      v396 = (unint64_t *)(a1 + 64);
                    }
                    v400 = 8 * v397;
                    v401 = 48 - v245;
                    if (8 * v397 >= 0x41)
                    {
                      v402 = (v401 & 0xFFFFFFF8) + 8;
                      v403 = v402 + v245;
                      v404 = (unint64_t *)((char *)v396 + (v402 >> 3));
                      v246 = (bswap64(*v396) >> (56 - (v401 & 0xF8u)) << (v401 & 7)) | *v2413;
                      goto LABEL_305;
                    }
                    v405 = 56 - v245 - v400;
                    if (v405 < 0)
                      v403 = v245;
                    else
                      v403 = v245 + 0x40000000;
                    if (v400)
                      v406 = 1;
                    else
                      v406 = v405 <= -1;
                    v407 = v405 & ~(v405 >> 31);
                    if (!v406 || v401 < v407)
                    {
                      v404 = v396;
                    }
                    else
                    {
                      v409 = v407 - 1;
                      if (v407 - 1 >= (int)(40 - v245))
                        v409 = 40 - v245;
                      v410 = 47 - v245 - v409;
                      if (v410 < 0x78)
                      {
                        v404 = v396;
                        goto LABEL_304;
                      }
                      v411 = (v410 >> 3) + 1;
                      v412 = (int8x16_t)v246;
                      v413 = 0uLL;
                      v414 = (int32x4_t)v403;
                      v415 = vdupq_n_s32(v401);
                      v416 = vaddq_s32(v415, (int32x4_t)xmmword_208F3A6C0);
                      v404 = (unint64_t *)((char *)v396 + (v411 & 0x3FFFFFF0));
                      v417 = vaddq_s32(v415, (int32x4_t)xmmword_208F3A6D0);
                      v401 -= 8 * (v411 & 0x3FFFFFF0);
                      v418 = vaddq_s32(v415, (int32x4_t)xmmword_208F3A6A0);
                      v419 = vaddq_s32(v415, (int32x4_t)xmmword_208F3A6B0);
                      v420 = v411 & 0x3FFFFFF0;
                      v421 = (uint8x16_t *)v396;
                      v422 = 0uLL;
                      v423 = 0uLL;
                      v424 = 0uLL;
                      v425 = 0uLL;
                      v426 = 0uLL;
                      v427 = 0uLL;
                      v428 = 0uLL;
                      v429 = 0uLL;
                      v430 = 0uLL;
                      do
                      {
                        v431 = *v421++;
                        v432 = vmovl_high_u8(v431);
                        v433 = vmovl_high_u16(v432);
                        v434.i64[0] = v433.u32[0];
                        v434.i64[1] = v433.u32[1];
                        v435 = v434;
                        v436 = vmovl_u16(*(uint16x4_t *)v432.i8);
                        v434.i64[0] = v436.u32[2];
                        v434.i64[1] = v436.u32[3];
                        v437 = v434;
                        v438 = vmovl_u8(*(uint8x8_t *)v431.i8);
                        v439 = vmovl_high_u16(v438);
                        v434.i64[0] = v439.u32[2];
                        v434.i64[1] = v439.u32[3];
                        v440 = v434;
                        v434.i64[0] = v433.u32[2];
                        v434.i64[1] = v433.u32[3];
                        v441 = v434;
                        v434.i64[0] = v436.u32[0];
                        v434.i64[1] = v436.u32[1];
                        v442 = v434;
                        v434.i64[0] = v439.u32[0];
                        v434.i64[1] = v439.u32[1];
                        v443 = v434;
                        v444 = vmovl_u16(*(uint16x4_t *)v438.i8);
                        v434.i64[0] = v444.u32[2];
                        v434.i64[1] = v444.u32[3];
                        v445 = v434;
                        v434.i64[0] = v444.u32[0];
                        v434.i64[1] = v444.u32[1];
                        v446 = v434;
                        v434.i64[0] = v419.u32[0];
                        v434.i64[1] = v419.u32[1];
                        v447 = (int8x16_t)vshlq_u64(v446, v434);
                        v434.i64[0] = v419.u32[2];
                        v434.i64[1] = v419.u32[3];
                        v448 = (int8x16_t)vshlq_u64(v445, v434);
                        v434.i64[0] = v418.u32[0];
                        v434.i64[1] = v418.u32[1];
                        v449 = (int8x16_t)vshlq_u64(v443, v434);
                        v434.i64[0] = v417.u32[0];
                        v434.i64[1] = v417.u32[1];
                        v450 = (int8x16_t)vshlq_u64(v442, v434);
                        v434.i64[0] = v416.u32[2];
                        v434.i64[1] = v416.u32[3];
                        v451 = (int8x16_t)vshlq_u64(v441, v434);
                        v434.i64[0] = v418.u32[2];
                        v434.i64[1] = v418.u32[3];
                        v452 = (int8x16_t)vshlq_u64(v440, v434);
                        v434.i64[0] = v417.u32[2];
                        v434.i64[1] = v417.u32[3];
                        v453 = (int8x16_t)vshlq_u64(v437, v434);
                        v434.i64[0] = v416.u32[0];
                        v434.i64[1] = v416.u32[1];
                        v426 = vorrq_s8((int8x16_t)vshlq_u64(v435, v434), v426);
                        v425 = vorrq_s8(v453, v425);
                        v423 = vorrq_s8(v452, v423);
                        v427 = vorrq_s8(v451, v427);
                        v424 = vorrq_s8(v450, v424);
                        v422 = vorrq_s8(v449, v422);
                        v413 = vorrq_s8(v448, v413);
                        v412 = vorrq_s8(v447, v412);
                        v414 = vaddq_s32(v414, v389);
                        v428 = vaddq_s32(v428, v389);
                        v429 = vaddq_s32(v429, v389);
                        v430 = vaddq_s32(v430, v389);
                        v419 = vaddq_s32(v419, v390);
                        v418 = vaddq_s32(v418, v390);
                        v417 = vaddq_s32(v417, v390);
                        v416 = vaddq_s32(v416, v390);
                        v420 -= 16;
                      }
                      while (v420);
                      v403 = vaddvq_s32(vaddq_s32(vaddq_s32(v414, v429), vaddq_s32(v428, v430)));
                      v454 = vorrq_s8(vorrq_s8(vorrq_s8(v412, v424), vorrq_s8(v422, v426)), vorrq_s8(vorrq_s8(v413, v425), vorrq_s8(v423, v427)));
                      v246 = (unint64_t)vorr_s8(*(int8x8_t *)v454.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v454, v454, 8uLL));
                      if ((v411 & 0x3FFFFFF0) != v411)
                      {
                        do
                        {
LABEL_304:
                          v403 += 8;
                          v455 = *(unsigned __int8 *)v404;
                          v404 = (unint64_t *)((char *)v404 + 1);
                          v246 |= (unint64_t)v455 << v401;
                          v401 -= 8;
                        }
                        while (v401 >= v407);
                      }
                    }
LABEL_305:
                    *(_QWORD *)(a1 + 40) += (char *)v404 - (char *)v396;
                    v245 = v403;
                    v391 = ((v244 - 1) * v394 + 256) >> 8;
                    v395 = v246 - (v391 << 56);
                    if (v246 < v391 << 56)
                      goto LABEL_306;
                    goto LABEL_273;
                  }
LABEL_191:
                  LODWORD(v249) = *(_DWORD *)(a1 + 24) - v249;
                  v250 = 1;
                  v246 = v253;
                  goto LABEL_192;
                }
                break;
              }
              v254 = *(unint64_t **)(a1 + 40);
              v255 = *(_QWORD *)(a1 + 32) - (_QWORD)v254;
              v256 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
              if (v256)
              {
                if (v255 >= 9)
                  v257 = 9;
                else
                  v257 = *(_QWORD *)(a1 + 32) - (_QWORD)v254;
                result = v256(*(_QWORD *)(a1 + 56), v254, a1 + 64, v257);
                v248.i64[0] = 0x7F0000007FLL;
                v248.i64[1] = 0x7F0000007FLL;
                v247.i64[0] = 0x800000008;
                v247.i64[1] = 0x800000008;
                v254 = (unint64_t *)(a1 + 64);
              }
              v258 = 8 * v255;
              v259 = 48 - v245;
              if (8 * v255 >= 0x41)
              {
                v260 = (v259 & 0xFFFFFFF8) + 8;
                v261 = v260 + v245;
                v262 = (unint64_t *)((char *)v254 + (v260 >> 3));
                v246 = (bswap64(*v254) >> (56 - (v259 & 0xF8u)) << (v259 & 7)) | *v2413;
                goto LABEL_223;
              }
              v263 = 56 - v245 - v258;
              if (v263 < 0)
                v261 = v245;
              else
                v261 = v245 + 0x40000000;
              if (v258)
                v264 = 1;
              else
                v264 = v263 <= -1;
              v265 = v263 & ~(v263 >> 31);
              if (!v264 || v259 < v265)
              {
                v262 = v254;
              }
              else
              {
                v267 = v265 - 1;
                if (v265 - 1 >= (int)(40 - v245))
                  v267 = 40 - v245;
                v268 = 47 - v245 - v267;
                if (v268 < 0x78)
                {
                  v262 = v254;
                  goto LABEL_222;
                }
                v269 = (v268 >> 3) + 1;
                v270 = (int8x16_t)v246;
                v271 = 0uLL;
                v272 = (int32x4_t)v261;
                v273 = vdupq_n_s32(v259);
                v274 = vaddq_s32(v273, (int32x4_t)xmmword_208F3A6C0);
                v262 = (unint64_t *)((char *)v254 + (v269 & 0x3FFFFFF0));
                v275 = vaddq_s32(v273, (int32x4_t)xmmword_208F3A6D0);
                v259 -= 8 * (v269 & 0x3FFFFFF0);
                v276 = vaddq_s32(v273, (int32x4_t)xmmword_208F3A6A0);
                v277 = vaddq_s32(v273, (int32x4_t)xmmword_208F3A6B0);
                v278 = v269 & 0x3FFFFFF0;
                v279 = (uint8x16_t *)v254;
                v280 = 0uLL;
                v281 = 0uLL;
                v282 = 0uLL;
                v283 = 0uLL;
                v284 = 0uLL;
                v285 = 0uLL;
                v286 = 0uLL;
                v287 = 0uLL;
                v288 = 0uLL;
                do
                {
                  v289 = *v279++;
                  v290 = vmovl_high_u8(v289);
                  v291 = vmovl_high_u16(v290);
                  v292.i64[0] = v291.u32[0];
                  v292.i64[1] = v291.u32[1];
                  v293 = v292;
                  v294 = vmovl_u16(*(uint16x4_t *)v290.i8);
                  v292.i64[0] = v294.u32[2];
                  v292.i64[1] = v294.u32[3];
                  v295 = v292;
                  v296 = vmovl_u8(*(uint8x8_t *)v289.i8);
                  v297 = vmovl_high_u16(v296);
                  v292.i64[0] = v297.u32[2];
                  v292.i64[1] = v297.u32[3];
                  v298 = v292;
                  v292.i64[0] = v291.u32[2];
                  v292.i64[1] = v291.u32[3];
                  v299 = v292;
                  v292.i64[0] = v294.u32[0];
                  v292.i64[1] = v294.u32[1];
                  v300 = v292;
                  v292.i64[0] = v297.u32[0];
                  v292.i64[1] = v297.u32[1];
                  v301 = v292;
                  v302 = vmovl_u16(*(uint16x4_t *)v296.i8);
                  v292.i64[0] = v302.u32[2];
                  v292.i64[1] = v302.u32[3];
                  v303 = v292;
                  v292.i64[0] = v302.u32[0];
                  v292.i64[1] = v302.u32[1];
                  v304 = v292;
                  v292.i64[0] = v277.u32[0];
                  v292.i64[1] = v277.u32[1];
                  v305 = (int8x16_t)vshlq_u64(v304, v292);
                  v292.i64[0] = v277.u32[2];
                  v292.i64[1] = v277.u32[3];
                  v306 = (int8x16_t)vshlq_u64(v303, v292);
                  v292.i64[0] = v276.u32[0];
                  v292.i64[1] = v276.u32[1];
                  v307 = (int8x16_t)vshlq_u64(v301, v292);
                  v292.i64[0] = v275.u32[0];
                  v292.i64[1] = v275.u32[1];
                  v308 = (int8x16_t)vshlq_u64(v300, v292);
                  v292.i64[0] = v274.u32[2];
                  v292.i64[1] = v274.u32[3];
                  v309 = (int8x16_t)vshlq_u64(v299, v292);
                  v292.i64[0] = v276.u32[2];
                  v292.i64[1] = v276.u32[3];
                  v310 = (int8x16_t)vshlq_u64(v298, v292);
                  v292.i64[0] = v275.u32[2];
                  v292.i64[1] = v275.u32[3];
                  v311 = (int8x16_t)vshlq_u64(v295, v292);
                  v292.i64[0] = v274.u32[0];
                  v292.i64[1] = v274.u32[1];
                  v284 = vorrq_s8((int8x16_t)vshlq_u64(v293, v292), v284);
                  v283 = vorrq_s8(v311, v283);
                  v281 = vorrq_s8(v310, v281);
                  v285 = vorrq_s8(v309, v285);
                  v282 = vorrq_s8(v308, v282);
                  v280 = vorrq_s8(v307, v280);
                  v271 = vorrq_s8(v306, v271);
                  v270 = vorrq_s8(v305, v270);
                  v272 = vaddq_s32(v272, v247);
                  v286 = vaddq_s32(v286, v247);
                  v287 = vaddq_s32(v287, v247);
                  v288 = vaddq_s32(v288, v247);
                  v277 = vaddq_s32(v277, v248);
                  v276 = vaddq_s32(v276, v248);
                  v275 = vaddq_s32(v275, v248);
                  v274 = vaddq_s32(v274, v248);
                  v278 -= 16;
                }
                while (v278);
                v261 = vaddvq_s32(vaddq_s32(vaddq_s32(v272, v287), vaddq_s32(v286, v288)));
                v312 = vorrq_s8(vorrq_s8(vorrq_s8(v270, v282), vorrq_s8(v280, v284)), vorrq_s8(vorrq_s8(v271, v283), vorrq_s8(v281, v285)));
                v246 = (unint64_t)vorr_s8(*(int8x8_t *)v312.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v312, v312, 8uLL));
                if ((v269 & 0x3FFFFFF0) != v269)
                {
                  do
                  {
LABEL_222:
                    v261 += 8;
                    v313 = *(unsigned __int8 *)v262;
                    v262 = (unint64_t *)((char *)v262 + 1);
                    v246 |= (unint64_t)v313 << v259;
                    v259 -= 8;
                  }
                  while (v259 >= v265);
                }
              }
LABEL_223:
              *(_QWORD *)(a1 + 40) += (char *)v262 - (char *)v254;
              v245 = v261;
              v249 = ((v244 - 1) * v252 + 256) >> 8;
              v253 = v246 - (v249 << 56);
              if (v246 < v249 << 56)
                goto LABEL_224;
              goto LABEL_191;
            }
            v237 = v19 + 44;
            if (*v19 >= 3u)
              v237 = v19 + 1;
            v213 = *v237;
            if (v20)
              goto LABEL_180;
          }
          else
          {
            v213 = 0;
            if (v20)
              goto LABEL_180;
          }
LABEL_181:
          v238 = 0;
          goto LABEL_190;
        }
LABEL_88:
        if ((*(_DWORD *)(v13 + 4 * (char)v22 + 5512) & 8) == 0)
          goto LABEL_91;
        LOBYTE(v137) = 1;
        goto LABEL_129;
      }
    }
    v44 = v36;
    do
    {
LABEL_37:
      v43 += 8;
      v95 = *(unsigned __int8 *)v44;
      v44 = (unint64_t *)((char *)v44 + 1);
      v27 |= (unint64_t)v95 << v41;
      v41 -= 8;
    }
    while (v41 >= v47);
    goto LABEL_38;
  }
  v2372 = *(_QWORD *)(*(_QWORD *)(a2 + 1000) + 8);
  v2376 = a5;
  v2371 = v18 * a3;
  if (!*v15)
  {
    v17[4] = 0;
    v2404 = (char *)(v17 + 4);
    goto LABEL_695;
  }
  v2390 = (unsigned __int8 *)(a2 + 5432);
  v99 = v18 * a3 + a4;
  v100 = *(_QWORD *)(a2 + 2192);
  if (v100)
  {
    v101 = 0x7FFFFFFF;
    if ((int)a5 >= 1 && (int)a6 >= 1)
    {
      v102 = 0;
      v103 = a5 - 1;
      v104 = a5 & 0xFFFFFFF8;
      v105 = v18 * a3 + a4;
      do
      {
        if (a5 < 8
          || (v99 + v18 * v102 + (int)v103 >= v99 + v18 * v102 ? (v106 = HIDWORD(v103) == 0) : (v106 = 0), !v106))
        {
          v107 = 0;
LABEL_60:
          v108 = a5 - v107;
          v109 = v105 + v107;
          do
          {
            if (v101 >= *(unsigned __int8 *)(v100 + v109))
              v101 = *(unsigned __int8 *)(v100 + v109);
            ++v109;
            --v108;
          }
          while (v108);
          goto LABEL_53;
        }
        if (a5 >= 0x20)
        {
          v111 = v105;
          v112 = vdupq_n_s32(v101);
          v113 = a5 & 0xFFFFFFE0;
          v114 = v112;
          v115 = v112;
          v116 = v112;
          v117 = v112;
          v118 = v112;
          v119 = v112;
          v120 = v112;
          do
          {
            v121 = (int8x16_t *)(v100 + v111);
            v122 = v121[1];
            v116 = vminq_s32(v116, (int32x4_t)vqtbl1q_s8(*v121, (int8x16_t)xmmword_208F04F20));
            v115 = vminq_s32(v115, (int32x4_t)vqtbl1q_s8(*v121, (int8x16_t)xmmword_208F04F30));
            v114 = vminq_s32(v114, (int32x4_t)vqtbl1q_s8(*v121, (int8x16_t)xmmword_208F04F40));
            v112 = vminq_s32(v112, (int32x4_t)vqtbl1q_s8(*v121, (int8x16_t)xmmword_208F04F50));
            v120 = vminq_s32(v120, (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_208F04F20));
            v119 = vminq_s32(v119, (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_208F04F30));
            v118 = vminq_s32(v118, (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_208F04F40));
            v117 = vminq_s32(v117, (int32x4_t)vqtbl1q_s8(v122, (int8x16_t)xmmword_208F04F50));
            v111 += 32;
            v113 -= 32;
          }
          while (v113);
          a13 = (int8x16_t)vminq_s32(v114, v118);
          v101 = vminvq_s32(vminq_s32(vminq_s32(vminq_s32(v112, v117), vminq_s32(v115, v119)), vminq_s32((int32x4_t)a13, vminq_s32(v116, v120))));
          if ((a5 & 0xFFFFFFE0) == a5)
            goto LABEL_53;
          v110 = a5 & 0xFFFFFFE0;
          v107 = v110;
          if ((a5 & 0x18) == 0)
            goto LABEL_60;
        }
        else
        {
          v110 = 0;
        }
        v123 = vdupq_n_s32(v101);
        v124 = v110 - v104;
        v125 = v105 + v110;
        v126 = v123;
        do
        {
          a13.i64[0] = *(_QWORD *)(v100 + v125);
          v127 = (int32x4_t)vqtbl1q_s8(a13, (int8x16_t)xmmword_208F04F50);
          a13 = vqtbl1q_s8(a13, (int8x16_t)xmmword_208F04F40);
          v126 = vminq_s32(v126, (int32x4_t)a13);
          v123 = vminq_s32(v123, v127);
          v125 += 8;
          v124 += 8;
        }
        while (v124);
        v101 = vminvq_s32(vminq_s32(v123, v126));
        v107 = a5 & 0xFFFFFFF8;
        if (v104 != a5)
          goto LABEL_60;
LABEL_53:
        ++v102;
        v105 += v18;
      }
      while (v102 != (_DWORD)a6);
    }
  }
  else
  {
    LOBYTE(v101) = 0;
  }
  if (!v2390[1])
  {
    if ((int)a5 >= 1 && (int)a6 >= 1)
    {
      v230 = *(_QWORD *)(v13 + 2200);
      if (v100)
      {
        v231 = 0;
        do
        {
          v232 = v99;
          v233 = a5;
          do
          {
            v234 = v232 + v231 * *(_DWORD *)(v13 + 1976);
            *(_BYTE *)(v230 + v234) = *(_BYTE *)(v100 + v234);
            ++v232;
            --v233;
          }
          while (v233);
          ++v231;
        }
        while (v231 != (_DWORD)a6);
      }
      else
      {
        do
        {
          v235 = v99;
          v236 = a5;
          do
          {
            *(_BYTE *)(v230 + v235 + (int)v100 * *(_DWORD *)(v13 + 1976)) = 0;
            ++v235;
            --v236;
          }
          while (v236);
          LODWORD(v100) = v100 + 1;
        }
        while ((_DWORD)v100 != (_DWORD)a6);
      }
    }
LABEL_690:
    v15 = v2390;
    v1157 = *v2390;
    v17[4] = v101;
    v2404 = (char *)(v17 + 4);
    if (!v1157)
      goto LABEL_695;
    goto LABEL_691;
  }
  v2405 = v99;
  if (!v2390[4])
  {
    v953 = 0;
    v954 = v13 + 5437;
    v956 = *(_DWORD *)(a1 + 24);
    v955 = *(_DWORD *)(a1 + 28);
    v957 = *(_QWORD *)(a1 + 16);
    v958.i64[0] = 0x800000008;
    v958.i64[1] = 0x800000008;
    v959.i64[0] = 0x7F0000007FLL;
    v959.i64[1] = 0x7F0000007FLL;
    while (1)
    {
      v964 = *(unsigned __int8 *)(v954 + ((unint64_t)v953 >> 1));
      if ((v955 & 0x80000000) == 0)
      {
        v960 = ((v956 - 1) * v964 + 256) >> 8;
        v965 = v957 - (v960 << 56);
        if (v957 < v960 << 56)
          goto LABEL_624;
        goto LABEL_591;
      }
      v966 = *(unint64_t **)(a1 + 40);
      v967 = *(_QWORD *)(a1 + 32) - (_QWORD)v966;
      v968 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(a1 + 48);
      if (v968)
      {
        if (v967 >= 9)
          v969 = 9;
        else
          v969 = *(_QWORD *)(a1 + 32) - (_QWORD)v966;
        v966 = (unint64_t *)(a1 + 64);
        v968(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), a1 + 64, v969, a5, a6, vpx_norm);
        v959.i64[0] = 0x7F0000007FLL;
        v959.i64[1] = 0x7F0000007FLL;
        v958.i64[0] = 0x800000008;
        v958.i64[1] = 0x800000008;
      }
      v970 = 8 * v967;
      v971 = 48 - v955;
      if (8 * v967 >= 0x41)
      {
        v972 = (v971 & 0xFFFFFFF8) + 8;
        v973 = v972 + v955;
        v974 = (unint64_t *)((char *)v966 + (v972 >> 3));
        v957 = (bswap64(*v966) >> (56 - (v971 & 0xF8u)) << (v971 & 7)) | *v2413;
        goto LABEL_623;
      }
      v975 = 56 - v955 - v970;
      if (v975 < 0)
        v973 = v955;
      else
        v973 = v955 + 0x40000000;
      if (v970)
        v976 = 1;
      else
        v976 = v975 <= -1;
      v977 = v975 & ~(v975 >> 31);
      if (!v976 || v971 < v977)
      {
        v974 = v966;
        goto LABEL_623;
      }
      v979 = v977 - 1;
      if (v977 - 1 >= (int)(40 - v955))
        v979 = 40 - v955;
      v980 = 47 - v955 - v979;
      if (v980 < 0x78)
        break;
      v981 = (v980 >> 3) + 1;
      v982 = (int8x16_t)v957;
      v983 = 0uLL;
      v984 = (int32x4_t)v973;
      v985 = vdupq_n_s32(v971);
      v986 = vaddq_s32(v985, (int32x4_t)xmmword_208F3A6C0);
      v974 = (unint64_t *)((char *)v966 + (v981 & 0x3FFFFFF0));
      v987 = vaddq_s32(v985, (int32x4_t)xmmword_208F3A6D0);
      v971 -= 8 * (v981 & 0x3FFFFFF0);
      v988 = vaddq_s32(v985, (int32x4_t)xmmword_208F3A6A0);
      v989 = vaddq_s32(v985, (int32x4_t)xmmword_208F3A6B0);
      v990 = v981 & 0x3FFFFFF0;
      v991 = (uint8x16_t *)v966;
      v992 = 0uLL;
      v993 = 0uLL;
      v994 = 0uLL;
      v995 = 0uLL;
      v996 = 0uLL;
      v997 = 0uLL;
      v998 = 0uLL;
      v999 = 0uLL;
      v1000 = 0uLL;
      do
      {
        v1001 = *v991++;
        v1002 = vmovl_high_u8(v1001);
        v1003 = vmovl_high_u16(v1002);
        v1004.i64[0] = v1003.u32[0];
        v1004.i64[1] = v1003.u32[1];
        v1005 = v1004;
        v1006 = vmovl_u16(*(uint16x4_t *)v1002.i8);
        v1004.i64[0] = v1006.u32[2];
        v1004.i64[1] = v1006.u32[3];
        v1007 = v1004;
        v1008 = vmovl_u8(*(uint8x8_t *)v1001.i8);
        v1009 = vmovl_high_u16(v1008);
        v1004.i64[0] = v1009.u32[2];
        v1004.i64[1] = v1009.u32[3];
        v1010 = v1004;
        v1004.i64[0] = v1003.u32[2];
        v1004.i64[1] = v1003.u32[3];
        v1011 = v1004;
        v1004.i64[0] = v1006.u32[0];
        v1004.i64[1] = v1006.u32[1];
        v1012 = v1004;
        v1004.i64[0] = v1009.u32[0];
        v1004.i64[1] = v1009.u32[1];
        v1013 = v1004;
        v1014 = vmovl_u16(*(uint16x4_t *)v1008.i8);
        v1004.i64[0] = v1014.u32[2];
        v1004.i64[1] = v1014.u32[3];
        v1015 = v1004;
        v1004.i64[0] = v1014.u32[0];
        v1004.i64[1] = v1014.u32[1];
        v1016 = v1004;
        v1004.i64[0] = v989.u32[0];
        v1004.i64[1] = v989.u32[1];
        v1017 = (int8x16_t)vshlq_u64(v1016, v1004);
        v1004.i64[0] = v989.u32[2];
        v1004.i64[1] = v989.u32[3];
        v1018 = (int8x16_t)vshlq_u64(v1015, v1004);
        v1004.i64[0] = v988.u32[0];
        v1004.i64[1] = v988.u32[1];
        v1019 = (int8x16_t)vshlq_u64(v1013, v1004);
        v1004.i64[0] = v987.u32[0];
        v1004.i64[1] = v987.u32[1];
        v1020 = (int8x16_t)vshlq_u64(v1012, v1004);
        v1004.i64[0] = v986.u32[2];
        v1004.i64[1] = v986.u32[3];
        v1021 = (int8x16_t)vshlq_u64(v1011, v1004);
        v1004.i64[0] = v988.u32[2];
        v1004.i64[1] = v988.u32[3];
        v1022 = (int8x16_t)vshlq_u64(v1010, v1004);
        v1004.i64[0] = v987.u32[2];
        v1004.i64[1] = v987.u32[3];
        v1023 = (int8x16_t)vshlq_u64(v1007, v1004);
        v1004.i64[0] = v986.u32[0];
        v1004.i64[1] = v986.u32[1];
        v996 = vorrq_s8((int8x16_t)vshlq_u64(v1005, v1004), v996);
        v995 = vorrq_s8(v1023, v995);
        v993 = vorrq_s8(v1022, v993);
        v997 = vorrq_s8(v1021, v997);
        v994 = vorrq_s8(v1020, v994);
        v992 = vorrq_s8(v1019, v992);
        v983 = vorrq_s8(v1018, v983);
        v982 = vorrq_s8(v1017, v982);
        v984 = vaddq_s32(v984, v958);
        v998 = vaddq_s32(v998, v958);
        v999 = vaddq_s32(v999, v958);
        v1000 = vaddq_s32(v1000, v958);
        v989 = vaddq_s32(v989, v959);
        v988 = vaddq_s32(v988, v959);
        v987 = vaddq_s32(v987, v959);
        v986 = vaddq_s32(v986, v959);
        v990 -= 16;
      }
      while (v990);
      v973 = vaddvq_s32(vaddq_s32(vaddq_s32(v984, v999), vaddq_s32(v998, v1000)));
      v1024 = vorrq_s8(vorrq_s8(vorrq_s8(v982, v994), vorrq_s8(v992, v996)), vorrq_s8(vorrq_s8(v983, v995), vorrq_s8(v993, v997)));
      v957 = (unint64_t)vorr_s8(*(int8x8_t *)v1024.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1024, v1024, 8uLL));
      if ((v981 & 0x3FFFFFF0) != v981)
        goto LABEL_622;
LABEL_623:
      *(_QWORD *)(a1 + 40) += (char *)v974 - (char *)v966;
      v955 = v973;
      v960 = ((v956 - 1) * v964 + 256) >> 8;
      v965 = v957 - (v960 << 56);
      if (v957 < v960 << 56)
      {
LABEL_624:
        v961 = 0;
        goto LABEL_592;
      }
LABEL_591:
      LODWORD(v960) = *(_DWORD *)(a1 + 24) - v960;
      v961 = 1;
      v957 = v965;
LABEL_592:
      v962 = vpx_norm[v960];
      v956 = (_DWORD)v960 << v962;
      v957 <<= v962;
      v955 -= v962;
      *(_QWORD *)(a1 + 16) = v957;
      *(_DWORD *)(a1 + 24) = (_DWORD)v960 << v962;
      *(_DWORD *)(a1 + 28) = v955;
      v963 = vp9_segment_tree[v961 + (unint64_t)v953];
      v953 = v963;
      if (v963 <= 0)
      {
LABEL_683:
        v101 = -v953;
        v17 = v2399;
        goto LABEL_684;
      }
    }
    v974 = v966;
    do
    {
LABEL_622:
      v973 += 8;
      v1025 = *(unsigned __int8 *)v974;
      v974 = (unint64_t *)((char *)v974 + 1);
      v957 |= (unint64_t)v1025 << v971;
      v971 -= 8;
    }
    while (v971 >= v977);
    goto LABEL_623;
  }
  v216 = *(_QWORD *)(a1 + 13784);
  v217 = *(_QWORD *)(a1 + 13792);
  if (v217)
    v217 = *(char *)(v217 + 5);
  if (v216)
    v216 = *(char *)(v216 + 5);
  v218 = *(_DWORD *)(a1 + 28);
  v219 = ((*(_DWORD *)(a1 + 24) - 1) * *(unsigned __int8 *)(v13 + v216 + v217 + 5444) + 256) >> 8;
  v220 = *(_QWORD *)(a1 + 16);
  if ((v218 & 0x80000000) != 0)
  {
    v221 = *(unint64_t **)(a1 + 40);
    v222 = *(_QWORD *)(a1 + 32) - (_QWORD)v221;
    v223 = 8 * v222;
    v224 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(a1 + 48);
    if (v224)
    {
      if (v222 >= 9)
        v225 = 9;
      else
        v225 = *(_QWORD *)(a1 + 32) - (_QWORD)v221;
      v224(*(_QWORD *)(a1 + 56), v221, a1 + 64, v225, a5, a6, vpx_norm);
      v221 = (unint64_t *)(a1 + 64);
    }
    v226 = 48 - v218;
    if (v223 < 0x41)
    {
      v1026 = 56 - v218 - v223;
      if (v1026 < 0)
        v228 = v218;
      else
        v228 = v218 + 0x40000000;
      if (v223)
        v1027 = 1;
      else
        v1027 = v1026 <= -1;
      if (v1027 && (v1028 = v1026 & ~(v1026 >> 31), v226 >= v1028))
      {
        v1029 = v1028 - 1;
        if (v1028 - 1 >= (int)(40 - v218))
          v1029 = 40 - v218;
        v1030 = 47 - v218 - v1029;
        v229 = v221;
        v1031 = 48 - v218;
        if (v1030 < 0x78)
          goto LABEL_1472;
        v1032 = (int8x16_t)v220;
        v1033 = (int32x4_t)v228;
        v1034 = vdupq_n_s32(v226);
        v1035 = 0uLL;
        v1036 = vaddq_s32(v1034, (int32x4_t)xmmword_208F3A6C0);
        v1037 = vaddq_s32(v1034, (int32x4_t)xmmword_208F3A6D0);
        v1038 = vaddq_s32(v1034, (int32x4_t)xmmword_208F3A6A0);
        v1039 = vaddq_s32(v1034, (int32x4_t)xmmword_208F3A6B0);
        v1040.i64[0] = 0x800000008;
        v1040.i64[1] = 0x800000008;
        v1041.i64[0] = 0x7F0000007FLL;
        v1041.i64[1] = 0x7F0000007FLL;
        v1042 = (v1030 >> 3) + 1;
        v1043 = 0uLL;
        v1044 = 0uLL;
        v1045 = 0uLL;
        v229 = (unint64_t *)((char *)v221 + (v1042 & 0x3FFFFFF0));
        v1031 = v226 - 8 * (v1042 & 0x3FFFFFF0);
        v1046 = v1042 & 0x3FFFFFF0;
        v1047 = (uint8x16_t *)v221;
        v1048 = 0uLL;
        v1049 = 0uLL;
        v1050 = 0uLL;
        v1051 = 0uLL;
        v1052 = 0uLL;
        v1053 = 0uLL;
        do
        {
          v1054 = *v1047++;
          v1055 = vmovl_high_u8(v1054);
          v1056 = vmovl_high_u16(v1055);
          v1057.i64[0] = v1056.u32[0];
          v1057.i64[1] = v1056.u32[1];
          v1058 = v1057;
          v1059 = vmovl_u16(*(uint16x4_t *)v1055.i8);
          v1057.i64[0] = v1059.u32[2];
          v1057.i64[1] = v1059.u32[3];
          v1060 = v1057;
          v1061 = vmovl_u8(*(uint8x8_t *)v1054.i8);
          v1062 = vmovl_high_u16(v1061);
          v1057.i64[0] = v1062.u32[2];
          v1057.i64[1] = v1062.u32[3];
          v1063 = v1057;
          v1057.i64[0] = v1056.u32[2];
          v1057.i64[1] = v1056.u32[3];
          v1064 = v1057;
          v1057.i64[0] = v1059.u32[0];
          v1057.i64[1] = v1059.u32[1];
          v1065 = v1057;
          v1057.i64[0] = v1062.u32[0];
          v1057.i64[1] = v1062.u32[1];
          v1066 = v1057;
          v1067 = vmovl_u16(*(uint16x4_t *)v1061.i8);
          v1057.i64[0] = v1067.u32[2];
          v1057.i64[1] = v1067.u32[3];
          v1068 = v1057;
          v1057.i64[0] = v1067.u32[0];
          v1057.i64[1] = v1067.u32[1];
          v1069 = v1057;
          v1057.i64[0] = v1039.u32[0];
          v1057.i64[1] = v1039.u32[1];
          v1070 = (int8x16_t)vshlq_u64(v1069, v1057);
          v1057.i64[0] = v1039.u32[2];
          v1057.i64[1] = v1039.u32[3];
          v1071 = (int8x16_t)vshlq_u64(v1068, v1057);
          v1057.i64[0] = v1038.u32[0];
          v1057.i64[1] = v1038.u32[1];
          v1072 = (int8x16_t)vshlq_u64(v1066, v1057);
          v1057.i64[0] = v1037.u32[0];
          v1057.i64[1] = v1037.u32[1];
          v1073 = (int8x16_t)vshlq_u64(v1065, v1057);
          v1057.i64[0] = v1036.u32[2];
          v1057.i64[1] = v1036.u32[3];
          v1074 = (int8x16_t)vshlq_u64(v1064, v1057);
          v1057.i64[0] = v1038.u32[2];
          v1057.i64[1] = v1038.u32[3];
          v1075 = (int8x16_t)vshlq_u64(v1063, v1057);
          v1057.i64[0] = v1037.u32[2];
          v1057.i64[1] = v1037.u32[3];
          v1076 = (int8x16_t)vshlq_u64(v1060, v1057);
          v1057.i64[0] = v1036.u32[0];
          v1057.i64[1] = v1036.u32[1];
          v1049 = vorrq_s8((int8x16_t)vshlq_u64(v1058, v1057), v1049);
          v1048 = vorrq_s8(v1076, v1048);
          v1044 = vorrq_s8(v1075, v1044);
          v1050 = vorrq_s8(v1074, v1050);
          v1045 = vorrq_s8(v1073, v1045);
          v1043 = vorrq_s8(v1072, v1043);
          v1035 = vorrq_s8(v1071, v1035);
          v1032 = vorrq_s8(v1070, v1032);
          v1033 = vaddq_s32(v1033, v1040);
          v1051 = vaddq_s32(v1051, v1040);
          v1052 = vaddq_s32(v1052, v1040);
          v1053 = vaddq_s32(v1053, v1040);
          v1039 = vaddq_s32(v1039, v1041);
          v1038 = vaddq_s32(v1038, v1041);
          v1037 = vaddq_s32(v1037, v1041);
          v1036 = vaddq_s32(v1036, v1041);
          v1046 -= 16;
        }
        while (v1046);
        v228 = vaddvq_s32(vaddq_s32(vaddq_s32(v1033, v1052), vaddq_s32(v1051, v1053)));
        v1077 = vorrq_s8(vorrq_s8(vorrq_s8(v1032, v1045), vorrq_s8(v1043, v1049)), vorrq_s8(vorrq_s8(v1035, v1048), vorrq_s8(v1044, v1050)));
        v220 = (unint64_t)vorr_s8(*(int8x8_t *)v1077.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1077, v1077, 8uLL));
        if ((v1042 & 0x3FFFFFF0) != v1042)
        {
LABEL_1472:
          do
          {
            v228 += 8;
            v1078 = *(unsigned __int8 *)v229;
            v229 = (unint64_t *)((char *)v229 + 1);
            v220 |= (unint64_t)v1078 << v1031;
            v1031 -= 8;
          }
          while (v1031 >= v1028);
        }
      }
      else
      {
        v229 = v221;
      }
    }
    else
    {
      v227 = (v226 & 0xFFFFFFF8) + 8;
      v228 = v227 + v218;
      v229 = (unint64_t *)((char *)v221 + (v227 >> 3));
      v220 = (bswap64(*v221) >> (56 - (v226 & 0xF8u)) << (v226 & 7)) | *v2413;
    }
    *(_QWORD *)(a1 + 40) += (char *)v229 - (char *)v221;
    v218 = v228;
  }
  v1079 = v219 << 56;
  v1080 = v220 - (v219 << 56);
  if (v220 >= v219 << 56)
  {
    LODWORD(v219) = *(_DWORD *)(a1 + 24) - v219;
    v1081 = 1;
  }
  else
  {
    v1081 = 0;
    v1080 = v220;
  }
  v1082 = vpx_norm[v219];
  v1083 = (_DWORD)v219 << v1082;
  v1084 = v1080 << v1082;
  *(_QWORD *)(a1 + 16) = v1080 << v1082;
  v1085 = v218 - v1082;
  *(_DWORD *)(a1 + 24) = (_DWORD)v219 << v1082;
  *(_DWORD *)(a1 + 28) = v218 - v1082;
  v17 = v2399;
  v2399[5] = v1081;
  if (v220 < v1079)
  {
    v953 = 0;
    v1086.i64[0] = 0x800000008;
    v1086.i64[1] = 0x800000008;
    v1087.i64[0] = 0x7F0000007FLL;
    v1087.i64[1] = 0x7F0000007FLL;
    while (1)
    {
      v1092 = *(unsigned __int8 *)(a2 + 5437 + ((unint64_t)v953 >> 1));
      if ((v1085 & 0x80000000) == 0)
      {
        v1088 = ((v1083 - 1) * v1092 + 256) >> 8;
        v1093 = v1084 - (v1088 << 56);
        if (v1084 < v1088 << 56)
          goto LABEL_682;
        goto LABEL_649;
      }
      v1094 = *(unint64_t **)(a1 + 40);
      v1095 = *(_QWORD *)(a1 + 32) - (_QWORD)v1094;
      v1096 = *(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(a1 + 48);
      if (v1096)
      {
        if (v1095 >= 9)
          v1097 = 9;
        else
          v1097 = *(_QWORD *)(a1 + 32) - (_QWORD)v1094;
        v1094 = (unint64_t *)(a1 + 64);
        v1096(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), a1 + 64, v1097, a5, a6, vpx_norm);
        v1087.i64[0] = 0x7F0000007FLL;
        v1087.i64[1] = 0x7F0000007FLL;
        v1086.i64[0] = 0x800000008;
        v1086.i64[1] = 0x800000008;
      }
      v1098 = 8 * v1095;
      v1099 = 48 - v1085;
      if (8 * v1095 >= 0x41)
      {
        v1100 = (v1099 & 0xFFFFFFF8) + 8;
        v1101 = v1100 + v1085;
        v1102 = (unint64_t *)((char *)v1094 + (v1100 >> 3));
        v1084 = (bswap64(*v1094) >> (56 - (v1099 & 0xF8u)) << (v1099 & 7)) | *v2413;
        goto LABEL_681;
      }
      v1103 = 56 - v1085 - v1098;
      if (v1103 < 0)
        v1101 = v1085;
      else
        v1101 = v1085 + 0x40000000;
      if (v1098)
        v1104 = 1;
      else
        v1104 = v1103 <= -1;
      v1105 = v1103 & ~(v1103 >> 31);
      if (!v1104 || v1099 < v1105)
      {
        v1102 = v1094;
        goto LABEL_681;
      }
      v1107 = v1105 - 1;
      if (v1105 - 1 >= (int)(40 - v1085))
        v1107 = 40 - v1085;
      v1108 = 47 - v1085 - v1107;
      if (v1108 < 0x78)
        break;
      v1109 = (v1108 >> 3) + 1;
      v1110 = (int8x16_t)v1084;
      v1111 = 0uLL;
      v1112 = (int32x4_t)v1101;
      v1113 = vdupq_n_s32(v1099);
      v1114 = vaddq_s32(v1113, (int32x4_t)xmmword_208F3A6C0);
      v1102 = (unint64_t *)((char *)v1094 + (v1109 & 0x3FFFFFF0));
      v1115 = vaddq_s32(v1113, (int32x4_t)xmmword_208F3A6D0);
      v1099 -= 8 * (v1109 & 0x3FFFFFF0);
      v1116 = vaddq_s32(v1113, (int32x4_t)xmmword_208F3A6A0);
      v1117 = vaddq_s32(v1113, (int32x4_t)xmmword_208F3A6B0);
      v1118 = v1109 & 0x3FFFFFF0;
      v1119 = (uint8x16_t *)v1094;
      v1120 = 0uLL;
      v1121 = 0uLL;
      v1122 = 0uLL;
      v1123 = 0uLL;
      v1124 = 0uLL;
      v1125 = 0uLL;
      v1126 = 0uLL;
      v1127 = 0uLL;
      v1128 = 0uLL;
      do
      {
        v1129 = *v1119++;
        v1130 = vmovl_high_u8(v1129);
        v1131 = vmovl_high_u16(v1130);
        v1132.i64[0] = v1131.u32[0];
        v1132.i64[1] = v1131.u32[1];
        v1133 = v1132;
        v1134 = vmovl_u16(*(uint16x4_t *)v1130.i8);
        v1132.i64[0] = v1134.u32[2];
        v1132.i64[1] = v1134.u32[3];
        v1135 = v1132;
        v1136 = vmovl_u8(*(uint8x8_t *)v1129.i8);
        v1137 = vmovl_high_u16(v1136);
        v1132.i64[0] = v1137.u32[2];
        v1132.i64[1] = v1137.u32[3];
        v1138 = v1132;
        v1132.i64[0] = v1131.u32[2];
        v1132.i64[1] = v1131.u32[3];
        v1139 = v1132;
        v1132.i64[0] = v1134.u32[0];
        v1132.i64[1] = v1134.u32[1];
        v1140 = v1132;
        v1132.i64[0] = v1137.u32[0];
        v1132.i64[1] = v1137.u32[1];
        v1141 = v1132;
        v1142 = vmovl_u16(*(uint16x4_t *)v1136.i8);
        v1132.i64[0] = v1142.u32[2];
        v1132.i64[1] = v1142.u32[3];
        v1143 = v1132;
        v1132.i64[0] = v1142.u32[0];
        v1132.i64[1] = v1142.u32[1];
        v1144 = v1132;
        v1132.i64[0] = v1117.u32[0];
        v1132.i64[1] = v1117.u32[1];
        v1145 = (int8x16_t)vshlq_u64(v1144, v1132);
        v1132.i64[0] = v1117.u32[2];
        v1132.i64[1] = v1117.u32[3];
        v1146 = (int8x16_t)vshlq_u64(v1143, v1132);
        v1132.i64[0] = v1116.u32[0];
        v1132.i64[1] = v1116.u32[1];
        v1147 = (int8x16_t)vshlq_u64(v1141, v1132);
        v1132.i64[0] = v1115.u32[0];
        v1132.i64[1] = v1115.u32[1];
        v1148 = (int8x16_t)vshlq_u64(v1140, v1132);
        v1132.i64[0] = v1114.u32[2];
        v1132.i64[1] = v1114.u32[3];
        v1149 = (int8x16_t)vshlq_u64(v1139, v1132);
        v1132.i64[0] = v1116.u32[2];
        v1132.i64[1] = v1116.u32[3];
        v1150 = (int8x16_t)vshlq_u64(v1138, v1132);
        v1132.i64[0] = v1115.u32[2];
        v1132.i64[1] = v1115.u32[3];
        v1151 = (int8x16_t)vshlq_u64(v1135, v1132);
        v1132.i64[0] = v1114.u32[0];
        v1132.i64[1] = v1114.u32[1];
        v1124 = vorrq_s8((int8x16_t)vshlq_u64(v1133, v1132), v1124);
        v1123 = vorrq_s8(v1151, v1123);
        v1121 = vorrq_s8(v1150, v1121);
        v1125 = vorrq_s8(v1149, v1125);
        v1122 = vorrq_s8(v1148, v1122);
        v1120 = vorrq_s8(v1147, v1120);
        v1111 = vorrq_s8(v1146, v1111);
        v1110 = vorrq_s8(v1145, v1110);
        v1112 = vaddq_s32(v1112, v1086);
        v1126 = vaddq_s32(v1126, v1086);
        v1127 = vaddq_s32(v1127, v1086);
        v1128 = vaddq_s32(v1128, v1086);
        v1117 = vaddq_s32(v1117, v1087);
        v1116 = vaddq_s32(v1116, v1087);
        v1115 = vaddq_s32(v1115, v1087);
        v1114 = vaddq_s32(v1114, v1087);
        v1118 -= 16;
      }
      while (v1118);
      v1101 = vaddvq_s32(vaddq_s32(vaddq_s32(v1112, v1127), vaddq_s32(v1126, v1128)));
      v1152 = vorrq_s8(vorrq_s8(vorrq_s8(v1110, v1122), vorrq_s8(v1120, v1124)), vorrq_s8(vorrq_s8(v1111, v1123), vorrq_s8(v1121, v1125)));
      v1084 = (unint64_t)vorr_s8(*(int8x8_t *)v1152.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1152, v1152, 8uLL));
      if ((v1109 & 0x3FFFFFF0) != v1109)
        goto LABEL_680;
LABEL_681:
      *(_QWORD *)(a1 + 40) += (char *)v1102 - (char *)v1094;
      v1085 = v1101;
      v1088 = ((v1083 - 1) * v1092 + 256) >> 8;
      v1093 = v1084 - (v1088 << 56);
      if (v1084 < v1088 << 56)
      {
LABEL_682:
        v1089 = 0;
        goto LABEL_650;
      }
LABEL_649:
      LODWORD(v1088) = *(_DWORD *)(a1 + 24) - v1088;
      v1089 = 1;
      v1084 = v1093;
LABEL_650:
      v1090 = vpx_norm[v1088];
      v1083 = (_DWORD)v1088 << v1090;
      v1084 <<= v1090;
      v1085 -= v1090;
      *(_QWORD *)(a1 + 16) = v1084;
      *(_DWORD *)(a1 + 24) = (_DWORD)v1088 << v1090;
      *(_DWORD *)(a1 + 28) = v1085;
      v1091 = vp9_segment_tree[v1089 + (unint64_t)v953];
      v953 = v1091;
      if (v1091 <= 0)
        goto LABEL_683;
    }
    v1102 = v1094;
    do
    {
LABEL_680:
      v1101 += 8;
      v1153 = *(unsigned __int8 *)v1102;
      v1102 = (unint64_t *)((char *)v1102 + 1);
      v1084 |= (unint64_t)v1153 << v1099;
      v1099 -= 8;
    }
    while (v1099 >= v1105);
    goto LABEL_681;
  }
LABEL_684:
  if (v2378 >= 1)
  {
    a5 = v2376;
    v13 = a2;
    v16 = v2400;
    if (v2376 >= 1)
    {
      for (j = 0; j != v2378; ++j)
      {
        v1155 = v2405;
        v1156 = v2376;
        do
        {
          *(_BYTE *)(*(_QWORD *)(a2 + 2200) + v1155 + j * *(_DWORD *)(a2 + 1976)) = v101;
          ++v1155;
          --v1156;
        }
        while (v1156);
      }
    }
    goto LABEL_690;
  }
  v15 = v2390;
  v13 = a2;
  v16 = v2400;
  v1158 = *v2390;
  v17[4] = v101;
  v2404 = (char *)(v17 + 4);
  if (!v1158)
  {
LABEL_695:
    v1159 = *(_QWORD *)(a1 + 13784);
    v1160 = *(_QWORD *)(a1 + 13792);
    if (v1160)
      v1160 = *(char *)(v1160 + 3);
    if (v1159)
      v1159 = *(char *)(v1159 + 3);
    v1161 = v1159 + v1160;
    v1162 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 5560) + v1159 + v1160 + 1967);
    v1163 = *(_DWORD *)(a1 + 28);
    v1164 = ((*(_DWORD *)(a1 + 24) - 1) * v1162 + 256) >> 8;
    v1165 = *(_QWORD *)(a1 + 16);
    if ((v1163 & 0x80000000) != 0)
    {
      v1168 = *(unint64_t **)(a1 + 40);
      v1169 = *(_QWORD *)(a1 + 32) - (_QWORD)v1168;
      v1170 = 8 * v1169;
      v1171 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int8 *))(a1 + 48);
      if (v1171)
      {
        if (v1169 >= 9)
          v1172 = 9;
        else
          v1172 = *(_QWORD *)(a1 + 32) - (_QWORD)v1168;
        v1171(*(_QWORD *)(a1 + 56), v1168, a1 + 64, v1172, a5, a6, vpx_norm);
        v1168 = (unint64_t *)(a1 + 64);
      }
      v1173 = 48 - v1163;
      if (v1170 < 0x41)
      {
        v1177 = 56 - v1163 - v1170;
        if (v1177 < 0)
          v1175 = v1163;
        else
          v1175 = v1163 + 0x40000000;
        if (v1170)
          v1178 = 1;
        else
          v1178 = v1177 <= -1;
        if (v1178 && (v1179 = v1177 & ~(v1177 >> 31), v1173 >= v1179))
        {
          v1180 = v1179 - 1;
          if (v1179 - 1 >= (int)(40 - v1163))
            v1180 = 40 - v1163;
          v1181 = 47 - v1163 - v1180;
          v1176 = v1168;
          v1182 = 48 - v1163;
          if (v1181 < 0x78)
            goto LABEL_1473;
          v1183 = (int8x16_t)v1165;
          v1184 = (int32x4_t)v1175;
          v1185 = vdupq_n_s32(v1173);
          v1186 = 0uLL;
          v1187 = vaddq_s32(v1185, (int32x4_t)xmmword_208F3A6C0);
          v1188 = vaddq_s32(v1185, (int32x4_t)xmmword_208F3A6D0);
          v1189 = vaddq_s32(v1185, (int32x4_t)xmmword_208F3A6A0);
          v1190 = vaddq_s32(v1185, (int32x4_t)xmmword_208F3A6B0);
          v1191.i64[0] = 0x800000008;
          v1191.i64[1] = 0x800000008;
          v1192.i64[0] = 0x7F0000007FLL;
          v1192.i64[1] = 0x7F0000007FLL;
          v1193 = (v1181 >> 3) + 1;
          v1194 = 0uLL;
          v1195 = 0uLL;
          v1196 = 0uLL;
          v1176 = (unint64_t *)((char *)v1168 + (v1193 & 0x3FFFFFF0));
          v1182 = v1173 - 8 * (v1193 & 0x3FFFFFF0);
          v1197 = v1193 & 0x3FFFFFF0;
          v1198 = (uint8x16_t *)v1168;
          v1199 = 0uLL;
          v1200 = 0uLL;
          v1201 = 0uLL;
          v1202 = 0uLL;
          v1203 = 0uLL;
          v1204 = 0uLL;
          do
          {
            v1205 = *v1198++;
            v1206 = vmovl_high_u8(v1205);
            v1207 = vmovl_high_u16(v1206);
            v1208.i64[0] = v1207.u32[0];
            v1208.i64[1] = v1207.u32[1];
            v1209 = v1208;
            v1210 = vmovl_u16(*(uint16x4_t *)v1206.i8);
            v1208.i64[0] = v1210.u32[2];
            v1208.i64[1] = v1210.u32[3];
            v1211 = v1208;
            v1212 = vmovl_u8(*(uint8x8_t *)v1205.i8);
            v1213 = vmovl_high_u16(v1212);
            v1208.i64[0] = v1213.u32[2];
            v1208.i64[1] = v1213.u32[3];
            v1214 = v1208;
            v1208.i64[0] = v1207.u32[2];
            v1208.i64[1] = v1207.u32[3];
            v1215 = v1208;
            v1208.i64[0] = v1210.u32[0];
            v1208.i64[1] = v1210.u32[1];
            v1216 = v1208;
            v1208.i64[0] = v1213.u32[0];
            v1208.i64[1] = v1213.u32[1];
            v1217 = v1208;
            v1218 = vmovl_u16(*(uint16x4_t *)v1212.i8);
            v1208.i64[0] = v1218.u32[2];
            v1208.i64[1] = v1218.u32[3];
            v1219 = v1208;
            v1208.i64[0] = v1218.u32[0];
            v1208.i64[1] = v1218.u32[1];
            v1220 = v1208;
            v1208.i64[0] = v1190.u32[0];
            v1208.i64[1] = v1190.u32[1];
            v1221 = (int8x16_t)vshlq_u64(v1220, v1208);
            v1208.i64[0] = v1190.u32[2];
            v1208.i64[1] = v1190.u32[3];
            v1222 = (int8x16_t)vshlq_u64(v1219, v1208);
            v1208.i64[0] = v1189.u32[0];
            v1208.i64[1] = v1189.u32[1];
            v1223 = (int8x16_t)vshlq_u64(v1217, v1208);
            v1208.i64[0] = v1188.u32[0];
            v1208.i64[1] = v1188.u32[1];
            v1224 = (int8x16_t)vshlq_u64(v1216, v1208);
            v1208.i64[0] = v1187.u32[2];
            v1208.i64[1] = v1187.u32[3];
            v1225 = (int8x16_t)vshlq_u64(v1215, v1208);
            v1208.i64[0] = v1189.u32[2];
            v1208.i64[1] = v1189.u32[3];
            v1226 = (int8x16_t)vshlq_u64(v1214, v1208);
            v1208.i64[0] = v1188.u32[2];
            v1208.i64[1] = v1188.u32[3];
            v1227 = (int8x16_t)vshlq_u64(v1211, v1208);
            v1208.i64[0] = v1187.u32[0];
            v1208.i64[1] = v1187.u32[1];
            v1200 = vorrq_s8((int8x16_t)vshlq_u64(v1209, v1208), v1200);
            v1199 = vorrq_s8(v1227, v1199);
            v1195 = vorrq_s8(v1226, v1195);
            v1201 = vorrq_s8(v1225, v1201);
            v1196 = vorrq_s8(v1224, v1196);
            v1194 = vorrq_s8(v1223, v1194);
            v1186 = vorrq_s8(v1222, v1186);
            v1183 = vorrq_s8(v1221, v1183);
            v1184 = vaddq_s32(v1184, v1191);
            v1202 = vaddq_s32(v1202, v1191);
            v1203 = vaddq_s32(v1203, v1191);
            v1204 = vaddq_s32(v1204, v1191);
            v1190 = vaddq_s32(v1190, v1192);
            v1189 = vaddq_s32(v1189, v1192);
            v1188 = vaddq_s32(v1188, v1192);
            v1187 = vaddq_s32(v1187, v1192);
            v1197 -= 16;
          }
          while (v1197);
          v1175 = vaddvq_s32(vaddq_s32(vaddq_s32(v1184, v1203), vaddq_s32(v1202, v1204)));
          v1228 = vorrq_s8(vorrq_s8(vorrq_s8(v1183, v1196), vorrq_s8(v1194, v1200)), vorrq_s8(vorrq_s8(v1186, v1199), vorrq_s8(v1195, v1201)));
          v1165 = (unint64_t)vorr_s8(*(int8x8_t *)v1228.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1228, v1228, 8uLL));
          if ((v1193 & 0x3FFFFFF0) != v1193)
          {
LABEL_1473:
            do
            {
              v1175 += 8;
              v1229 = *(unsigned __int8 *)v1176;
              v1176 = (unint64_t *)((char *)v1176 + 1);
              v1165 |= (unint64_t)v1229 << v1182;
              v1182 -= 8;
            }
            while (v1182 >= v1179);
          }
        }
        else
        {
          v1176 = v1168;
        }
      }
      else
      {
        v1174 = (v1173 & 0xFFFFFFF8) + 8;
        v1175 = v1174 + v1163;
        v1176 = (unint64_t *)((char *)v1168 + (v1174 >> 3));
        v1165 = (bswap64(*v1168) >> (56 - (v1173 & 0xF8u)) << (v1173 & 7)) | *v2413;
      }
      *(_QWORD *)(a1 + 40) += (char *)v1176 - (char *)v1168;
      v1163 = v1175;
      v1166 = v1165 - (v1164 << 56);
      if (v1165 < v1164 << 56)
        goto LABEL_701;
    }
    else
    {
      v1166 = v1165 - (v1164 << 56);
      if (v1165 < v1164 << 56)
      {
LABEL_701:
        v1167 = 0;
        goto LABEL_729;
      }
    }
    LODWORD(v1164) = *(_DWORD *)(a1 + 24) - v1164;
    v1167 = 1;
    v1165 = v1166;
LABEL_729:
    v1230 = vpx_norm[v1164];
    *(_QWORD *)(a1 + 16) = v1165 << v1230;
    *(_DWORD *)(a1 + 24) = (_DWORD)v1164 << v1230;
    *(_DWORD *)(a1 + 28) = v1163 - v1230;
    v1231 = *(_QWORD *)(a1 + 13744);
    if (v1231)
    {
      v1232 = v1231 + 8 * v1161 + 4 * v1167;
      ++*(_DWORD *)(v1232 + 12776);
    }
    v17 = v2399;
    v16 = v2400;
    v13 = a2;
    v2399[3] = v1167;
    if (!*v15)
      goto LABEL_733;
    goto LABEL_732;
  }
LABEL_691:
  if ((*(_DWORD *)(v13 + 4 * (char)v101 + 5512) & 8) == 0)
    goto LABEL_695;
  v17[3] = 1;
  if (!*v15)
    goto LABEL_733;
LABEL_732:
  v1233 = *v2404;
  if ((*(_DWORD *)(v13 + 4 * v1233 + 5512) & 4) != 0)
  {
    v1240 = *(unsigned __int16 *)(v13 + 8 * v1233 + 5452) != 0;
    goto LABEL_780;
  }
LABEL_733:
  v1234 = *(_QWORD *)(a1 + 13784);
  v1235 = *(_QWORD *)(a1 + 13792);
  if (v1235 && v1234)
  {
    v1236 = *(char *)(v1234 + 8) < 1;
    v1237 = *(char *)(v1235 + 8) < 1;
    v1238 = v1237 || v1236;
    if (v1236 && v1237)
      v1239 = 3;
    else
      v1239 = v1238;
  }
  else if (v1235 | v1234)
  {
    if (v1235)
      v1234 = *(_QWORD *)(a1 + 13792);
    v1239 = 2 * (*(char *)(v1234 + 8) < 1);
  }
  else
  {
    v1239 = 0;
  }
  v1241 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 5560) + v1239 + 1931);
  v1242 = *(_DWORD *)(a1 + 28);
  v1243 = ((*(_DWORD *)(a1 + 24) - 1) * v1241 + 256) >> 8;
  v1244 = *(_QWORD *)(a1 + 16);
  if ((v1242 & 0x80000000) != 0)
  {
    v1246 = *(unint64_t **)(a1 + 40);
    v1247 = *(_QWORD *)(a1 + 32) - (_QWORD)v1246;
    v1248 = 8 * v1247;
    v1249 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
    if (v1249)
    {
      if (v1247 >= 9)
        v1250 = 9;
      else
        v1250 = *(_QWORD *)(a1 + 32) - (_QWORD)v1246;
      v1249(*(_QWORD *)(a1 + 56), v1246, a1 + 64, v1250);
      v1246 = (unint64_t *)(a1 + 64);
    }
    v1251 = 48 - v1242;
    if (v1248 < 0x41)
    {
      v1255 = 56 - v1242 - v1248;
      if (v1255 < 0)
        v1253 = v1242;
      else
        v1253 = v1242 + 0x40000000;
      if (v1248)
        v1256 = 1;
      else
        v1256 = v1255 <= -1;
      if (v1256 && (v1257 = v1255 & ~(v1255 >> 31), v1251 >= v1257))
      {
        v1258 = v1257 - 1;
        if (v1257 - 1 >= (int)(40 - v1242))
          v1258 = 40 - v1242;
        v1259 = 47 - v1242 - v1258;
        v1254 = v1246;
        v1260 = 48 - v1242;
        if (v1259 < 0x78)
          goto LABEL_1474;
        v1261 = (int8x16_t)v1244;
        v1262 = (int32x4_t)v1253;
        v1263 = vdupq_n_s32(v1251);
        v1264 = 0uLL;
        v1265 = vaddq_s32(v1263, (int32x4_t)xmmword_208F3A6C0);
        v1266 = vaddq_s32(v1263, (int32x4_t)xmmword_208F3A6D0);
        v1267 = vaddq_s32(v1263, (int32x4_t)xmmword_208F3A6A0);
        v1268 = vaddq_s32(v1263, (int32x4_t)xmmword_208F3A6B0);
        v1269.i64[0] = 0x800000008;
        v1269.i64[1] = 0x800000008;
        v1270.i64[0] = 0x7F0000007FLL;
        v1270.i64[1] = 0x7F0000007FLL;
        v1271 = (v1259 >> 3) + 1;
        v1272 = 0uLL;
        v1273 = 0uLL;
        v1274 = 0uLL;
        v1254 = (unint64_t *)((char *)v1246 + (v1271 & 0x3FFFFFF0));
        v1260 = v1251 - 8 * (v1271 & 0x3FFFFFF0);
        v1275 = v1271 & 0x3FFFFFF0;
        v1276 = (uint8x16_t *)v1246;
        v1277 = 0uLL;
        v1278 = 0uLL;
        v1279 = 0uLL;
        v1280 = 0uLL;
        v1281 = 0uLL;
        v1282 = 0uLL;
        do
        {
          v1283 = *v1276++;
          v1284 = vmovl_high_u8(v1283);
          v1285 = vmovl_high_u16(v1284);
          v1286.i64[0] = v1285.u32[0];
          v1286.i64[1] = v1285.u32[1];
          v1287 = v1286;
          v1288 = vmovl_u16(*(uint16x4_t *)v1284.i8);
          v1286.i64[0] = v1288.u32[2];
          v1286.i64[1] = v1288.u32[3];
          v1289 = v1286;
          v1290 = vmovl_u8(*(uint8x8_t *)v1283.i8);
          v1291 = vmovl_high_u16(v1290);
          v1286.i64[0] = v1291.u32[2];
          v1286.i64[1] = v1291.u32[3];
          v1292 = v1286;
          v1286.i64[0] = v1285.u32[2];
          v1286.i64[1] = v1285.u32[3];
          v1293 = v1286;
          v1286.i64[0] = v1288.u32[0];
          v1286.i64[1] = v1288.u32[1];
          v1294 = v1286;
          v1286.i64[0] = v1291.u32[0];
          v1286.i64[1] = v1291.u32[1];
          v1295 = v1286;
          v1296 = vmovl_u16(*(uint16x4_t *)v1290.i8);
          v1286.i64[0] = v1296.u32[2];
          v1286.i64[1] = v1296.u32[3];
          v1297 = v1286;
          v1286.i64[0] = v1296.u32[0];
          v1286.i64[1] = v1296.u32[1];
          v1298 = v1286;
          v1286.i64[0] = v1268.u32[0];
          v1286.i64[1] = v1268.u32[1];
          v1299 = (int8x16_t)vshlq_u64(v1298, v1286);
          v1286.i64[0] = v1268.u32[2];
          v1286.i64[1] = v1268.u32[3];
          v1300 = (int8x16_t)vshlq_u64(v1297, v1286);
          v1286.i64[0] = v1267.u32[0];
          v1286.i64[1] = v1267.u32[1];
          v1301 = (int8x16_t)vshlq_u64(v1295, v1286);
          v1286.i64[0] = v1266.u32[0];
          v1286.i64[1] = v1266.u32[1];
          v1302 = (int8x16_t)vshlq_u64(v1294, v1286);
          v1286.i64[0] = v1265.u32[2];
          v1286.i64[1] = v1265.u32[3];
          v1303 = (int8x16_t)vshlq_u64(v1293, v1286);
          v1286.i64[0] = v1267.u32[2];
          v1286.i64[1] = v1267.u32[3];
          v1304 = (int8x16_t)vshlq_u64(v1292, v1286);
          v1286.i64[0] = v1266.u32[2];
          v1286.i64[1] = v1266.u32[3];
          v1305 = (int8x16_t)vshlq_u64(v1289, v1286);
          v1286.i64[0] = v1265.u32[0];
          v1286.i64[1] = v1265.u32[1];
          v1278 = vorrq_s8((int8x16_t)vshlq_u64(v1287, v1286), v1278);
          v1277 = vorrq_s8(v1305, v1277);
          v1273 = vorrq_s8(v1304, v1273);
          v1279 = vorrq_s8(v1303, v1279);
          v1274 = vorrq_s8(v1302, v1274);
          v1272 = vorrq_s8(v1301, v1272);
          v1264 = vorrq_s8(v1300, v1264);
          v1261 = vorrq_s8(v1299, v1261);
          v1262 = vaddq_s32(v1262, v1269);
          v1280 = vaddq_s32(v1280, v1269);
          v1281 = vaddq_s32(v1281, v1269);
          v1282 = vaddq_s32(v1282, v1269);
          v1268 = vaddq_s32(v1268, v1270);
          v1267 = vaddq_s32(v1267, v1270);
          v1266 = vaddq_s32(v1266, v1270);
          v1265 = vaddq_s32(v1265, v1270);
          v1275 -= 16;
        }
        while (v1275);
        v1253 = vaddvq_s32(vaddq_s32(vaddq_s32(v1262, v1281), vaddq_s32(v1280, v1282)));
        v1306 = vorrq_s8(vorrq_s8(vorrq_s8(v1261, v1274), vorrq_s8(v1272, v1278)), vorrq_s8(vorrq_s8(v1264, v1277), vorrq_s8(v1273, v1279)));
        v1244 = (unint64_t)vorr_s8(*(int8x8_t *)v1306.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1306, v1306, 8uLL));
        if ((v1271 & 0x3FFFFFF0) != v1271)
        {
LABEL_1474:
          do
          {
            v1253 += 8;
            v1307 = *(unsigned __int8 *)v1254;
            v1254 = (unint64_t *)((char *)v1254 + 1);
            v1244 |= (unint64_t)v1307 << v1260;
            v1260 -= 8;
          }
          while (v1260 >= v1257);
        }
      }
      else
      {
        v1254 = v1246;
      }
    }
    else
    {
      v1252 = (v1251 & 0xFFFFFFF8) + 8;
      v1253 = v1252 + v1242;
      v1254 = (unint64_t *)((char *)v1246 + (v1252 >> 3));
      v1244 = (bswap64(*v1246) >> (56 - (v1251 & 0xF8u)) << (v1251 & 7)) | *v2413;
    }
    *(_QWORD *)(a1 + 40) += (char *)v1254 - (char *)v1246;
    v1242 = v1253;
    v1245 = v1244 - (v1243 << 56);
    if (v1244 < v1243 << 56)
      goto LABEL_749;
LABEL_776:
    LODWORD(v1243) = *(_DWORD *)(a1 + 24) - v1243;
    v1240 = 1;
    v1244 = v1245;
    goto LABEL_777;
  }
  v1245 = v1244 - (v1243 << 56);
  if (v1244 >= v1243 << 56)
    goto LABEL_776;
LABEL_749:
  v1240 = 0;
LABEL_777:
  v1308 = vpx_norm[v1243];
  *(_QWORD *)(a1 + 16) = v1244 << v1308;
  *(_DWORD *)(a1 + 24) = (_DWORD)v1243 << v1308;
  *(_DWORD *)(a1 + 28) = v1242 - v1308;
  v1309 = *(_QWORD *)(a1 + 13744);
  if (v1309)
  {
    v1310 = v1309 + 8 * v1239 + 4 * v1240;
    ++*(_DWORD *)(v1310 + 12496);
  }
  v17 = v2399;
  v16 = v2400;
  v13 = a2;
LABEL_780:
  if (v17[3])
    v1311 = !v1240;
  else
    v1311 = 1;
  v1312 = v1311;
  result = read_tx_size(v2412, (uint64_t)v16, v1312, (uint64_t)v2413);
  v17[2] = result;
  v1313 = *v17;
  if (!v1240)
  {
    if ((_DWORD)v1313 != 2)
    {
      if ((_DWORD)v1313 != 1)
      {
        if (!*v17)
        {
          LOBYTE(v1323) = 0;
          v1324 = *(_QWORD *)(v13 + 5560);
          v1326 = *(_DWORD *)(a1 + 24);
          v1325 = *(_DWORD *)(a1 + 28);
          v1327.i64[0] = 0x800000008;
          v1327.i64[1] = 0x800000008;
          v1328.i64[0] = 0x7F0000007FLL;
          v1328.i64[1] = 0x7F0000007FLL;
          v1329 = *(_QWORD *)(a1 + 16);
          while (1)
          {
            v1333 = *(unsigned __int8 *)(v1324 + (v1323 >> 1));
            if ((v1325 & 0x80000000) == 0)
            {
              v1330 = ((v1326 - 1) * v1333 + 256) >> 8;
              v1334 = v1329 - (v1330 << 56);
              if (v1329 < v1330 << 56)
                goto LABEL_832;
              goto LABEL_799;
            }
            v1335 = *(unint64_t **)(a1 + 40);
            v1336 = *(_QWORD *)(a1 + 32) - (_QWORD)v1335;
            v1337 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
            if (v1337)
            {
              if (v1336 >= 9)
                v1338 = 9;
              else
                v1338 = *(_QWORD *)(a1 + 32) - (_QWORD)v1335;
              result = v1337(*(_QWORD *)(a1 + 56), v1335, a1 + 64, v1338);
              v1328.i64[0] = 0x7F0000007FLL;
              v1328.i64[1] = 0x7F0000007FLL;
              v1327.i64[0] = 0x800000008;
              v1327.i64[1] = 0x800000008;
              v1335 = (unint64_t *)(a1 + 64);
            }
            v1339 = 8 * v1336;
            v1340 = 48 - v1325;
            if (8 * v1336 >= 0x41)
            {
              v1341 = (v1340 & 0xFFFFFFF8) + 8;
              v1342 = v1341 + v1325;
              v1343 = (unint64_t *)((char *)v1335 + (v1341 >> 3));
              v1329 = (bswap64(*v1335) >> (56 - (v1340 & 0xF8u)) << (v1340 & 7)) | *v2413;
              goto LABEL_831;
            }
            v1344 = 56 - v1325 - v1339;
            if (v1344 < 0)
              v1342 = v1325;
            else
              v1342 = v1325 + 0x40000000;
            if (v1339)
              v1345 = 1;
            else
              v1345 = v1344 <= -1;
            v1346 = v1344 & ~(v1344 >> 31);
            if (!v1345 || v1340 < v1346)
            {
              v1343 = v1335;
              goto LABEL_831;
            }
            v1348 = v1346 - 1;
            if (v1346 - 1 >= (int)(40 - v1325))
              v1348 = 40 - v1325;
            v1349 = 47 - v1325 - v1348;
            if (v1349 < 0x78)
              break;
            v1350 = (v1349 >> 3) + 1;
            v1351 = (int8x16_t)v1329;
            v1352 = 0uLL;
            v1353 = (int32x4_t)v1342;
            v1354 = vdupq_n_s32(v1340);
            v1355 = vaddq_s32(v1354, (int32x4_t)xmmword_208F3A6C0);
            v1343 = (unint64_t *)((char *)v1335 + (v1350 & 0x3FFFFFF0));
            v1356 = vaddq_s32(v1354, (int32x4_t)xmmword_208F3A6D0);
            v1340 -= 8 * (v1350 & 0x3FFFFFF0);
            v1357 = vaddq_s32(v1354, (int32x4_t)xmmword_208F3A6A0);
            v1358 = vaddq_s32(v1354, (int32x4_t)xmmword_208F3A6B0);
            v1359 = v1350 & 0x3FFFFFF0;
            v1360 = (uint8x16_t *)v1335;
            v1361 = 0uLL;
            v1362 = 0uLL;
            v1363 = 0uLL;
            v1364 = 0uLL;
            v1365 = 0uLL;
            v1366 = 0uLL;
            v1367 = 0uLL;
            v1368 = 0uLL;
            v1369 = 0uLL;
            do
            {
              v1370 = *v1360++;
              v1371 = vmovl_high_u8(v1370);
              v1372 = vmovl_high_u16(v1371);
              v1373.i64[0] = v1372.u32[0];
              v1373.i64[1] = v1372.u32[1];
              v1374 = v1373;
              v1375 = vmovl_u16(*(uint16x4_t *)v1371.i8);
              v1373.i64[0] = v1375.u32[2];
              v1373.i64[1] = v1375.u32[3];
              v1376 = v1373;
              v1377 = vmovl_u8(*(uint8x8_t *)v1370.i8);
              v1378 = vmovl_high_u16(v1377);
              v1373.i64[0] = v1378.u32[2];
              v1373.i64[1] = v1378.u32[3];
              v1379 = v1373;
              v1373.i64[0] = v1372.u32[2];
              v1373.i64[1] = v1372.u32[3];
              v1380 = v1373;
              v1373.i64[0] = v1375.u32[0];
              v1373.i64[1] = v1375.u32[1];
              v1381 = v1373;
              v1373.i64[0] = v1378.u32[0];
              v1373.i64[1] = v1378.u32[1];
              v1382 = v1373;
              v1383 = vmovl_u16(*(uint16x4_t *)v1377.i8);
              v1373.i64[0] = v1383.u32[2];
              v1373.i64[1] = v1383.u32[3];
              v1384 = v1373;
              v1373.i64[0] = v1383.u32[0];
              v1373.i64[1] = v1383.u32[1];
              v1385 = v1373;
              v1373.i64[0] = v1358.u32[0];
              v1373.i64[1] = v1358.u32[1];
              v1386 = (int8x16_t)vshlq_u64(v1385, v1373);
              v1373.i64[0] = v1358.u32[2];
              v1373.i64[1] = v1358.u32[3];
              v1387 = (int8x16_t)vshlq_u64(v1384, v1373);
              v1373.i64[0] = v1357.u32[0];
              v1373.i64[1] = v1357.u32[1];
              v1388 = (int8x16_t)vshlq_u64(v1382, v1373);
              v1373.i64[0] = v1356.u32[0];
              v1373.i64[1] = v1356.u32[1];
              v1389 = (int8x16_t)vshlq_u64(v1381, v1373);
              v1373.i64[0] = v1355.u32[2];
              v1373.i64[1] = v1355.u32[3];
              v1390 = (int8x16_t)vshlq_u64(v1380, v1373);
              v1373.i64[0] = v1357.u32[2];
              v1373.i64[1] = v1357.u32[3];
              v1391 = (int8x16_t)vshlq_u64(v1379, v1373);
              v1373.i64[0] = v1356.u32[2];
              v1373.i64[1] = v1356.u32[3];
              v1392 = (int8x16_t)vshlq_u64(v1376, v1373);
              v1373.i64[0] = v1355.u32[0];
              v1373.i64[1] = v1355.u32[1];
              v1365 = vorrq_s8((int8x16_t)vshlq_u64(v1374, v1373), v1365);
              v1364 = vorrq_s8(v1392, v1364);
              v1362 = vorrq_s8(v1391, v1362);
              v1366 = vorrq_s8(v1390, v1366);
              v1363 = vorrq_s8(v1389, v1363);
              v1361 = vorrq_s8(v1388, v1361);
              v1352 = vorrq_s8(v1387, v1352);
              v1351 = vorrq_s8(v1386, v1351);
              v1353 = vaddq_s32(v1353, v1327);
              v1367 = vaddq_s32(v1367, v1327);
              v1368 = vaddq_s32(v1368, v1327);
              v1369 = vaddq_s32(v1369, v1327);
              v1358 = vaddq_s32(v1358, v1328);
              v1357 = vaddq_s32(v1357, v1328);
              v1356 = vaddq_s32(v1356, v1328);
              v1355 = vaddq_s32(v1355, v1328);
              v1359 -= 16;
            }
            while (v1359);
            v1342 = vaddvq_s32(vaddq_s32(vaddq_s32(v1353, v1368), vaddq_s32(v1367, v1369)));
            v1393 = vorrq_s8(vorrq_s8(vorrq_s8(v1351, v1363), vorrq_s8(v1361, v1365)), vorrq_s8(vorrq_s8(v1352, v1364), vorrq_s8(v1362, v1366)));
            v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1393.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1393, v1393, 8uLL));
            if ((v1350 & 0x3FFFFFF0) != v1350)
              goto LABEL_830;
LABEL_831:
            *(_QWORD *)(a1 + 40) += (char *)v1343 - (char *)v1335;
            v1325 = v1342;
            v1330 = ((v1326 - 1) * v1333 + 256) >> 8;
            v1334 = v1329 - (v1330 << 56);
            if (v1329 < v1330 << 56)
            {
LABEL_832:
              v1331 = 0;
              goto LABEL_800;
            }
LABEL_799:
            LODWORD(v1330) = *(_DWORD *)(a1 + 24) - v1330;
            v1331 = 1;
            v1329 = v1334;
LABEL_800:
            v1332 = vpx_norm[v1330];
            v1326 = (_DWORD)v1330 << v1332;
            v1329 <<= v1332;
            v1325 -= v1332;
            *(_QWORD *)(a1 + 16) = v1329;
            *(_DWORD *)(a1 + 24) = (_DWORD)v1330 << v1332;
            *(_DWORD *)(a1 + 28) = v1325;
            v1323 = (char)vp9_intra_mode_tree[v1331 + (unint64_t)v1323];
            if (v1323 <= 0)
            {
              v1755 = -v1323;
              v1756 = *(_QWORD *)(a1 + 13744);
              if (v1756)
              {
                ++*(_DWORD *)(v1756 + 4 * -(char)v1323);
                v1326 = *(_DWORD *)(a1 + 24);
                v1325 = *(_DWORD *)(a1 + 28);
              }
              LOBYTE(v1757) = 0;
              v17[20] = v1755;
              v1758 = *(_QWORD *)(a2 + 5560);
              v1759.i64[0] = 0x800000008;
              v1759.i64[1] = 0x800000008;
              v1760.i64[0] = 0x7F0000007FLL;
              v1760.i64[1] = 0x7F0000007FLL;
              while (1)
              {
                v1764 = *(unsigned __int8 *)(v1758 + (v1757 >> 1));
                if ((v1325 & 0x80000000) == 0)
                {
                  v1761 = ((v1326 - 1) * v1764 + 256) >> 8;
                  v1765 = v1329 - (v1761 << 56);
                  if (v1329 < v1761 << 56)
                    goto LABEL_1060;
                  goto LABEL_1027;
                }
                v1766 = *(unint64_t **)(a1 + 40);
                v1767 = *(_QWORD *)(a1 + 32) - (_QWORD)v1766;
                v1768 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                if (v1768)
                {
                  if (v1767 >= 9)
                    v1769 = 9;
                  else
                    v1769 = *(_QWORD *)(a1 + 32) - (_QWORD)v1766;
                  result = v1768(*(_QWORD *)(a1 + 56), v1766, a1 + 64, v1769);
                  v1760.i64[0] = 0x7F0000007FLL;
                  v1760.i64[1] = 0x7F0000007FLL;
                  v1759.i64[0] = 0x800000008;
                  v1759.i64[1] = 0x800000008;
                  v1766 = (unint64_t *)(a1 + 64);
                }
                v1770 = 8 * v1767;
                v1771 = 48 - v1325;
                if (8 * v1767 >= 0x41)
                {
                  v1772 = (v1771 & 0xFFFFFFF8) + 8;
                  v1773 = v1772 + v1325;
                  v1774 = (unint64_t *)((char *)v1766 + (v1772 >> 3));
                  v1329 = (bswap64(*v1766) >> (56 - (v1771 & 0xF8u)) << (v1771 & 7)) | *v2413;
                  goto LABEL_1059;
                }
                v1775 = 56 - v1325 - v1770;
                if (v1775 < 0)
                  v1773 = v1325;
                else
                  v1773 = v1325 + 0x40000000;
                if (v1770)
                  v1776 = 1;
                else
                  v1776 = v1775 <= -1;
                v1777 = v1775 & ~(v1775 >> 31);
                if (!v1776 || v1771 < v1777)
                {
                  v1774 = v1766;
                  goto LABEL_1059;
                }
                v1779 = v1777 - 1;
                if (v1777 - 1 >= (int)(40 - v1325))
                  v1779 = 40 - v1325;
                v1780 = 47 - v1325 - v1779;
                if (v1780 < 0x78)
                  break;
                v1781 = (v1780 >> 3) + 1;
                v1782 = (int8x16_t)v1329;
                v1783 = 0uLL;
                v1784 = (int32x4_t)v1773;
                v1785 = vdupq_n_s32(v1771);
                v1786 = vaddq_s32(v1785, (int32x4_t)xmmword_208F3A6C0);
                v1774 = (unint64_t *)((char *)v1766 + (v1781 & 0x3FFFFFF0));
                v1787 = vaddq_s32(v1785, (int32x4_t)xmmword_208F3A6D0);
                v1771 -= 8 * (v1781 & 0x3FFFFFF0);
                v1788 = vaddq_s32(v1785, (int32x4_t)xmmword_208F3A6A0);
                v1789 = vaddq_s32(v1785, (int32x4_t)xmmword_208F3A6B0);
                v1790 = v1781 & 0x3FFFFFF0;
                v1791 = (uint8x16_t *)v1766;
                v1792 = 0uLL;
                v1793 = 0uLL;
                v1794 = 0uLL;
                v1795 = 0uLL;
                v1796 = 0uLL;
                v1797 = 0uLL;
                v1798 = 0uLL;
                v1799 = 0uLL;
                v1800 = 0uLL;
                do
                {
                  v1801 = *v1791++;
                  v1802 = vmovl_high_u8(v1801);
                  v1803 = vmovl_high_u16(v1802);
                  v1804.i64[0] = v1803.u32[0];
                  v1804.i64[1] = v1803.u32[1];
                  v1805 = v1804;
                  v1806 = vmovl_u16(*(uint16x4_t *)v1802.i8);
                  v1804.i64[0] = v1806.u32[2];
                  v1804.i64[1] = v1806.u32[3];
                  v1807 = v1804;
                  v1808 = vmovl_u8(*(uint8x8_t *)v1801.i8);
                  v1809 = vmovl_high_u16(v1808);
                  v1804.i64[0] = v1809.u32[2];
                  v1804.i64[1] = v1809.u32[3];
                  v1810 = v1804;
                  v1804.i64[0] = v1803.u32[2];
                  v1804.i64[1] = v1803.u32[3];
                  v1811 = v1804;
                  v1804.i64[0] = v1806.u32[0];
                  v1804.i64[1] = v1806.u32[1];
                  v1812 = v1804;
                  v1804.i64[0] = v1809.u32[0];
                  v1804.i64[1] = v1809.u32[1];
                  v1813 = v1804;
                  v1814 = vmovl_u16(*(uint16x4_t *)v1808.i8);
                  v1804.i64[0] = v1814.u32[2];
                  v1804.i64[1] = v1814.u32[3];
                  v1815 = v1804;
                  v1804.i64[0] = v1814.u32[0];
                  v1804.i64[1] = v1814.u32[1];
                  v1816 = v1804;
                  v1804.i64[0] = v1789.u32[0];
                  v1804.i64[1] = v1789.u32[1];
                  v1817 = (int8x16_t)vshlq_u64(v1816, v1804);
                  v1804.i64[0] = v1789.u32[2];
                  v1804.i64[1] = v1789.u32[3];
                  v1818 = (int8x16_t)vshlq_u64(v1815, v1804);
                  v1804.i64[0] = v1788.u32[0];
                  v1804.i64[1] = v1788.u32[1];
                  v1819 = (int8x16_t)vshlq_u64(v1813, v1804);
                  v1804.i64[0] = v1787.u32[0];
                  v1804.i64[1] = v1787.u32[1];
                  v1820 = (int8x16_t)vshlq_u64(v1812, v1804);
                  v1804.i64[0] = v1786.u32[2];
                  v1804.i64[1] = v1786.u32[3];
                  v1821 = (int8x16_t)vshlq_u64(v1811, v1804);
                  v1804.i64[0] = v1788.u32[2];
                  v1804.i64[1] = v1788.u32[3];
                  v1822 = (int8x16_t)vshlq_u64(v1810, v1804);
                  v1804.i64[0] = v1787.u32[2];
                  v1804.i64[1] = v1787.u32[3];
                  v1823 = (int8x16_t)vshlq_u64(v1807, v1804);
                  v1804.i64[0] = v1786.u32[0];
                  v1804.i64[1] = v1786.u32[1];
                  v1796 = vorrq_s8((int8x16_t)vshlq_u64(v1805, v1804), v1796);
                  v1795 = vorrq_s8(v1823, v1795);
                  v1793 = vorrq_s8(v1822, v1793);
                  v1797 = vorrq_s8(v1821, v1797);
                  v1794 = vorrq_s8(v1820, v1794);
                  v1792 = vorrq_s8(v1819, v1792);
                  v1783 = vorrq_s8(v1818, v1783);
                  v1782 = vorrq_s8(v1817, v1782);
                  v1784 = vaddq_s32(v1784, v1759);
                  v1798 = vaddq_s32(v1798, v1759);
                  v1799 = vaddq_s32(v1799, v1759);
                  v1800 = vaddq_s32(v1800, v1759);
                  v1789 = vaddq_s32(v1789, v1760);
                  v1788 = vaddq_s32(v1788, v1760);
                  v1787 = vaddq_s32(v1787, v1760);
                  v1786 = vaddq_s32(v1786, v1760);
                  v1790 -= 16;
                }
                while (v1790);
                v1773 = vaddvq_s32(vaddq_s32(vaddq_s32(v1784, v1799), vaddq_s32(v1798, v1800)));
                v1824 = vorrq_s8(vorrq_s8(vorrq_s8(v1782, v1794), vorrq_s8(v1792, v1796)), vorrq_s8(vorrq_s8(v1783, v1795), vorrq_s8(v1793, v1797)));
                v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1824.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1824, v1824, 8uLL));
                if ((v1781 & 0x3FFFFFF0) != v1781)
                  goto LABEL_1058;
LABEL_1059:
                *(_QWORD *)(a1 + 40) += (char *)v1774 - (char *)v1766;
                v1325 = v1773;
                v1761 = ((v1326 - 1) * v1764 + 256) >> 8;
                v1765 = v1329 - (v1761 << 56);
                if (v1329 < v1761 << 56)
                {
LABEL_1060:
                  v1762 = 0;
                  goto LABEL_1028;
                }
LABEL_1027:
                LODWORD(v1761) = *(_DWORD *)(a1 + 24) - v1761;
                v1762 = 1;
                v1329 = v1765;
LABEL_1028:
                v1763 = vpx_norm[v1761];
                v1326 = (_DWORD)v1761 << v1763;
                v1329 <<= v1763;
                v1325 -= v1763;
                *(_QWORD *)(a1 + 16) = v1329;
                *(_DWORD *)(a1 + 24) = (_DWORD)v1761 << v1763;
                *(_DWORD *)(a1 + 28) = v1325;
                v1757 = (char)vp9_intra_mode_tree[v1762 + (unint64_t)v1757];
                if (v1757 <= 0)
                {
                  v1827 = -v1757;
                  v1828 = *(_QWORD *)(a1 + 13744);
                  if (v1828)
                  {
                    ++*(_DWORD *)(v1828 + 4 * -(char)v1757);
                    v1326 = *(_DWORD *)(a1 + 24);
                    v1325 = *(_DWORD *)(a1 + 28);
                  }
                  LOBYTE(v1829) = 0;
                  v17[32] = v1827;
                  v1830 = *(_QWORD *)(a2 + 5560);
                  v1831.i64[0] = 0x800000008;
                  v1831.i64[1] = 0x800000008;
                  v1832.i64[0] = 0x7F0000007FLL;
                  v1832.i64[1] = 0x7F0000007FLL;
                  while (2)
                  {
                    v1836 = *(unsigned __int8 *)(v1830 + (v1829 >> 1));
                    if ((v1325 & 0x80000000) == 0)
                    {
                      v1833 = ((v1326 - 1) * v1836 + 256) >> 8;
                      v1837 = v1329 - (v1833 << 56);
                      if (v1329 < v1833 << 56)
                      {
LABEL_1100:
                        v1834 = 0;
LABEL_1068:
                        v1835 = vpx_norm[v1833];
                        v1326 = (_DWORD)v1833 << v1835;
                        v1329 <<= v1835;
                        v1325 -= v1835;
                        *(_QWORD *)(a1 + 16) = v1329;
                        *(_DWORD *)(a1 + 24) = (_DWORD)v1833 << v1835;
                        *(_DWORD *)(a1 + 28) = v1325;
                        v1829 = (char)vp9_intra_mode_tree[v1834 + (unint64_t)v1829];
                        if (v1829 > 0)
                          continue;
                        v1898 = -v1829;
                        v1899 = *(_QWORD *)(a1 + 13744);
                        if (v1899)
                        {
                          ++*(_DWORD *)(v1899 + 4 * -(char)v1829);
                          v1326 = *(_DWORD *)(a1 + 24);
                          v1325 = *(_DWORD *)(a1 + 28);
                        }
                        LOBYTE(v1900) = 0;
                        v17[44] = v1898;
                        v1901 = *(_QWORD *)(a2 + 5560);
                        v1902.i64[0] = 0x800000008;
                        v1902.i64[1] = 0x800000008;
                        v1903.i64[0] = 0x7F0000007FLL;
                        v1903.i64[1] = 0x7F0000007FLL;
                        while (2)
                        {
                          v1907 = *(unsigned __int8 *)(v1901 + (v1900 >> 1));
                          if ((v1325 & 0x80000000) == 0)
                          {
                            v1904 = ((v1326 - 1) * v1907 + 256) >> 8;
                            v1908 = v1329 - (v1904 << 56);
                            if (v1329 < v1904 << 56)
                            {
LABEL_1137:
                              v1905 = 0;
LABEL_1105:
                              v1906 = vpx_norm[v1904];
                              v1326 = (_DWORD)v1904 << v1906;
                              v1329 <<= v1906;
                              v1325 -= v1906;
                              *(_QWORD *)(a1 + 16) = v1329;
                              *(_DWORD *)(a1 + 24) = (_DWORD)v1904 << v1906;
                              *(_DWORD *)(a1 + 28) = v1325;
                              v1900 = (char)vp9_intra_mode_tree[v1905 + (unint64_t)v1900];
                              if (v1900 <= 0)
                              {
                                v1681 = -v1900;
                                v1969 = *(_QWORD *)(a1 + 13744);
                                if (v1969)
                                  ++*(_DWORD *)(v1969 + 4 * -(char)v1900);
                                v17[56] = v1681;
                                v17[1] = v1681;
                                goto LABEL_1141;
                              }
                              continue;
                            }
LABEL_1104:
                            LODWORD(v1904) = *(_DWORD *)(a1 + 24) - v1904;
                            v1905 = 1;
                            v1329 = v1908;
                            goto LABEL_1105;
                          }
                          break;
                        }
                        v1909 = *(unint64_t **)(a1 + 40);
                        v1910 = *(_QWORD *)(a1 + 32) - (_QWORD)v1909;
                        v1911 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                        if (v1911)
                        {
                          if (v1910 >= 9)
                            v1912 = 9;
                          else
                            v1912 = *(_QWORD *)(a1 + 32) - (_QWORD)v1909;
                          result = v1911(*(_QWORD *)(a1 + 56), v1909, a1 + 64, v1912);
                          v1903.i64[0] = 0x7F0000007FLL;
                          v1903.i64[1] = 0x7F0000007FLL;
                          v1902.i64[0] = 0x800000008;
                          v1902.i64[1] = 0x800000008;
                          v1909 = (unint64_t *)(a1 + 64);
                        }
                        v1913 = 8 * v1910;
                        v1914 = 48 - v1325;
                        if (8 * v1910 >= 0x41)
                        {
                          v1915 = (v1914 & 0xFFFFFFF8) + 8;
                          v1916 = v1915 + v1325;
                          v1917 = (unint64_t *)((char *)v1909 + (v1915 >> 3));
                          v1329 = (bswap64(*v1909) >> (56 - (v1914 & 0xF8u)) << (v1914 & 7)) | *v2413;
                          goto LABEL_1136;
                        }
                        v1918 = 56 - v1325 - v1913;
                        if (v1918 < 0)
                          v1916 = v1325;
                        else
                          v1916 = v1325 + 0x40000000;
                        if (v1913)
                          v1919 = 1;
                        else
                          v1919 = v1918 <= -1;
                        v1920 = v1918 & ~(v1918 >> 31);
                        if (!v1919 || v1914 < v1920)
                        {
                          v1917 = v1909;
                        }
                        else
                        {
                          v1922 = v1920 - 1;
                          if (v1920 - 1 >= (int)(40 - v1325))
                            v1922 = 40 - v1325;
                          v1923 = 47 - v1325 - v1922;
                          if (v1923 < 0x78)
                          {
                            v1917 = v1909;
                            goto LABEL_1135;
                          }
                          v1924 = (v1923 >> 3) + 1;
                          v1925 = (int8x16_t)v1329;
                          v1926 = 0uLL;
                          v1927 = (int32x4_t)v1916;
                          v1928 = vdupq_n_s32(v1914);
                          v1929 = vaddq_s32(v1928, (int32x4_t)xmmword_208F3A6C0);
                          v1917 = (unint64_t *)((char *)v1909 + (v1924 & 0x3FFFFFF0));
                          v1930 = vaddq_s32(v1928, (int32x4_t)xmmword_208F3A6D0);
                          v1914 -= 8 * (v1924 & 0x3FFFFFF0);
                          v1931 = vaddq_s32(v1928, (int32x4_t)xmmword_208F3A6A0);
                          v1932 = vaddq_s32(v1928, (int32x4_t)xmmword_208F3A6B0);
                          v1933 = v1924 & 0x3FFFFFF0;
                          v1934 = (uint8x16_t *)v1909;
                          v1935 = 0uLL;
                          v1936 = 0uLL;
                          v1937 = 0uLL;
                          v1938 = 0uLL;
                          v1939 = 0uLL;
                          v1940 = 0uLL;
                          v1941 = 0uLL;
                          v1942 = 0uLL;
                          v1943 = 0uLL;
                          do
                          {
                            v1944 = *v1934++;
                            v1945 = vmovl_high_u8(v1944);
                            v1946 = vmovl_high_u16(v1945);
                            v1947.i64[0] = v1946.u32[0];
                            v1947.i64[1] = v1946.u32[1];
                            v1948 = v1947;
                            v1949 = vmovl_u16(*(uint16x4_t *)v1945.i8);
                            v1947.i64[0] = v1949.u32[2];
                            v1947.i64[1] = v1949.u32[3];
                            v1950 = v1947;
                            v1951 = vmovl_u8(*(uint8x8_t *)v1944.i8);
                            v1952 = vmovl_high_u16(v1951);
                            v1947.i64[0] = v1952.u32[2];
                            v1947.i64[1] = v1952.u32[3];
                            v1953 = v1947;
                            v1947.i64[0] = v1946.u32[2];
                            v1947.i64[1] = v1946.u32[3];
                            v1954 = v1947;
                            v1947.i64[0] = v1949.u32[0];
                            v1947.i64[1] = v1949.u32[1];
                            v1955 = v1947;
                            v1947.i64[0] = v1952.u32[0];
                            v1947.i64[1] = v1952.u32[1];
                            v1956 = v1947;
                            v1957 = vmovl_u16(*(uint16x4_t *)v1951.i8);
                            v1947.i64[0] = v1957.u32[2];
                            v1947.i64[1] = v1957.u32[3];
                            v1958 = v1947;
                            v1947.i64[0] = v1957.u32[0];
                            v1947.i64[1] = v1957.u32[1];
                            v1959 = v1947;
                            v1947.i64[0] = v1932.u32[0];
                            v1947.i64[1] = v1932.u32[1];
                            v1960 = (int8x16_t)vshlq_u64(v1959, v1947);
                            v1947.i64[0] = v1932.u32[2];
                            v1947.i64[1] = v1932.u32[3];
                            v1961 = (int8x16_t)vshlq_u64(v1958, v1947);
                            v1947.i64[0] = v1931.u32[0];
                            v1947.i64[1] = v1931.u32[1];
                            v1962 = (int8x16_t)vshlq_u64(v1956, v1947);
                            v1947.i64[0] = v1930.u32[0];
                            v1947.i64[1] = v1930.u32[1];
                            v1963 = (int8x16_t)vshlq_u64(v1955, v1947);
                            v1947.i64[0] = v1929.u32[2];
                            v1947.i64[1] = v1929.u32[3];
                            v1964 = (int8x16_t)vshlq_u64(v1954, v1947);
                            v1947.i64[0] = v1931.u32[2];
                            v1947.i64[1] = v1931.u32[3];
                            v1965 = (int8x16_t)vshlq_u64(v1953, v1947);
                            v1947.i64[0] = v1930.u32[2];
                            v1947.i64[1] = v1930.u32[3];
                            v1966 = (int8x16_t)vshlq_u64(v1950, v1947);
                            v1947.i64[0] = v1929.u32[0];
                            v1947.i64[1] = v1929.u32[1];
                            v1939 = vorrq_s8((int8x16_t)vshlq_u64(v1948, v1947), v1939);
                            v1938 = vorrq_s8(v1966, v1938);
                            v1936 = vorrq_s8(v1965, v1936);
                            v1940 = vorrq_s8(v1964, v1940);
                            v1937 = vorrq_s8(v1963, v1937);
                            v1935 = vorrq_s8(v1962, v1935);
                            v1926 = vorrq_s8(v1961, v1926);
                            v1925 = vorrq_s8(v1960, v1925);
                            v1927 = vaddq_s32(v1927, v1902);
                            v1941 = vaddq_s32(v1941, v1902);
                            v1942 = vaddq_s32(v1942, v1902);
                            v1943 = vaddq_s32(v1943, v1902);
                            v1932 = vaddq_s32(v1932, v1903);
                            v1931 = vaddq_s32(v1931, v1903);
                            v1930 = vaddq_s32(v1930, v1903);
                            v1929 = vaddq_s32(v1929, v1903);
                            v1933 -= 16;
                          }
                          while (v1933);
                          v1916 = vaddvq_s32(vaddq_s32(vaddq_s32(v1927, v1942), vaddq_s32(v1941, v1943)));
                          v1967 = vorrq_s8(vorrq_s8(vorrq_s8(v1925, v1937), vorrq_s8(v1935, v1939)), vorrq_s8(vorrq_s8(v1926, v1938), vorrq_s8(v1936, v1940)));
                          v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1967.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1967, v1967, 8uLL));
                          if ((v1924 & 0x3FFFFFF0) != v1924)
                          {
                            do
                            {
LABEL_1135:
                              v1916 += 8;
                              v1968 = *(unsigned __int8 *)v1917;
                              v1917 = (unint64_t *)((char *)v1917 + 1);
                              v1329 |= (unint64_t)v1968 << v1914;
                              v1914 -= 8;
                            }
                            while (v1914 >= v1920);
                          }
                        }
LABEL_1136:
                        *(_QWORD *)(a1 + 40) += (char *)v1917 - (char *)v1909;
                        v1325 = v1916;
                        v1904 = ((v1326 - 1) * v1907 + 256) >> 8;
                        v1908 = v1329 - (v1904 << 56);
                        if (v1329 < v1904 << 56)
                          goto LABEL_1137;
                        goto LABEL_1104;
                      }
LABEL_1067:
                      LODWORD(v1833) = *(_DWORD *)(a1 + 24) - v1833;
                      v1834 = 1;
                      v1329 = v1837;
                      goto LABEL_1068;
                    }
                    break;
                  }
                  v1838 = *(unint64_t **)(a1 + 40);
                  v1839 = *(_QWORD *)(a1 + 32) - (_QWORD)v1838;
                  v1840 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
                  if (v1840)
                  {
                    if (v1839 >= 9)
                      v1841 = 9;
                    else
                      v1841 = *(_QWORD *)(a1 + 32) - (_QWORD)v1838;
                    result = v1840(*(_QWORD *)(a1 + 56), v1838, a1 + 64, v1841);
                    v1832.i64[0] = 0x7F0000007FLL;
                    v1832.i64[1] = 0x7F0000007FLL;
                    v1831.i64[0] = 0x800000008;
                    v1831.i64[1] = 0x800000008;
                    v1838 = (unint64_t *)(a1 + 64);
                  }
                  v1842 = 8 * v1839;
                  v1843 = 48 - v1325;
                  if (8 * v1839 >= 0x41)
                  {
                    v1844 = (v1843 & 0xFFFFFFF8) + 8;
                    v1845 = v1844 + v1325;
                    v1846 = (unint64_t *)((char *)v1838 + (v1844 >> 3));
                    v1329 = (bswap64(*v1838) >> (56 - (v1843 & 0xF8u)) << (v1843 & 7)) | *v2413;
                    goto LABEL_1099;
                  }
                  v1847 = 56 - v1325 - v1842;
                  if (v1847 < 0)
                    v1845 = v1325;
                  else
                    v1845 = v1325 + 0x40000000;
                  if (v1842)
                    v1848 = 1;
                  else
                    v1848 = v1847 <= -1;
                  v1849 = v1847 & ~(v1847 >> 31);
                  if (!v1848 || v1843 < v1849)
                  {
                    v1846 = v1838;
                  }
                  else
                  {
                    v1851 = v1849 - 1;
                    if (v1849 - 1 >= (int)(40 - v1325))
                      v1851 = 40 - v1325;
                    v1852 = 47 - v1325 - v1851;
                    if (v1852 < 0x78)
                    {
                      v1846 = v1838;
                      goto LABEL_1098;
                    }
                    v1853 = (v1852 >> 3) + 1;
                    v1854 = (int8x16_t)v1329;
                    v1855 = 0uLL;
                    v1856 = (int32x4_t)v1845;
                    v1857 = vdupq_n_s32(v1843);
                    v1858 = vaddq_s32(v1857, (int32x4_t)xmmword_208F3A6C0);
                    v1846 = (unint64_t *)((char *)v1838 + (v1853 & 0x3FFFFFF0));
                    v1859 = vaddq_s32(v1857, (int32x4_t)xmmword_208F3A6D0);
                    v1843 -= 8 * (v1853 & 0x3FFFFFF0);
                    v1860 = vaddq_s32(v1857, (int32x4_t)xmmword_208F3A6A0);
                    v1861 = vaddq_s32(v1857, (int32x4_t)xmmword_208F3A6B0);
                    v1862 = v1853 & 0x3FFFFFF0;
                    v1863 = (uint8x16_t *)v1838;
                    v1864 = 0uLL;
                    v1865 = 0uLL;
                    v1866 = 0uLL;
                    v1867 = 0uLL;
                    v1868 = 0uLL;
                    v1869 = 0uLL;
                    v1870 = 0uLL;
                    v1871 = 0uLL;
                    v1872 = 0uLL;
                    do
                    {
                      v1873 = *v1863++;
                      v1874 = vmovl_high_u8(v1873);
                      v1875 = vmovl_high_u16(v1874);
                      v1876.i64[0] = v1875.u32[0];
                      v1876.i64[1] = v1875.u32[1];
                      v1877 = v1876;
                      v1878 = vmovl_u16(*(uint16x4_t *)v1874.i8);
                      v1876.i64[0] = v1878.u32[2];
                      v1876.i64[1] = v1878.u32[3];
                      v1879 = v1876;
                      v1880 = vmovl_u8(*(uint8x8_t *)v1873.i8);
                      v1881 = vmovl_high_u16(v1880);
                      v1876.i64[0] = v1881.u32[2];
                      v1876.i64[1] = v1881.u32[3];
                      v1882 = v1876;
                      v1876.i64[0] = v1875.u32[2];
                      v1876.i64[1] = v1875.u32[3];
                      v1883 = v1876;
                      v1876.i64[0] = v1878.u32[0];
                      v1876.i64[1] = v1878.u32[1];
                      v1884 = v1876;
                      v1876.i64[0] = v1881.u32[0];
                      v1876.i64[1] = v1881.u32[1];
                      v1885 = v1876;
                      v1886 = vmovl_u16(*(uint16x4_t *)v1880.i8);
                      v1876.i64[0] = v1886.u32[2];
                      v1876.i64[1] = v1886.u32[3];
                      v1887 = v1876;
                      v1876.i64[0] = v1886.u32[0];
                      v1876.i64[1] = v1886.u32[1];
                      v1888 = v1876;
                      v1876.i64[0] = v1861.u32[0];
                      v1876.i64[1] = v1861.u32[1];
                      v1889 = (int8x16_t)vshlq_u64(v1888, v1876);
                      v1876.i64[0] = v1861.u32[2];
                      v1876.i64[1] = v1861.u32[3];
                      v1890 = (int8x16_t)vshlq_u64(v1887, v1876);
                      v1876.i64[0] = v1860.u32[0];
                      v1876.i64[1] = v1860.u32[1];
                      v1891 = (int8x16_t)vshlq_u64(v1885, v1876);
                      v1876.i64[0] = v1859.u32[0];
                      v1876.i64[1] = v1859.u32[1];
                      v1892 = (int8x16_t)vshlq_u64(v1884, v1876);
                      v1876.i64[0] = v1858.u32[2];
                      v1876.i64[1] = v1858.u32[3];
                      v1893 = (int8x16_t)vshlq_u64(v1883, v1876);
                      v1876.i64[0] = v1860.u32[2];
                      v1876.i64[1] = v1860.u32[3];
                      v1894 = (int8x16_t)vshlq_u64(v1882, v1876);
                      v1876.i64[0] = v1859.u32[2];
                      v1876.i64[1] = v1859.u32[3];
                      v1895 = (int8x16_t)vshlq_u64(v1879, v1876);
                      v1876.i64[0] = v1858.u32[0];
                      v1876.i64[1] = v1858.u32[1];
                      v1868 = vorrq_s8((int8x16_t)vshlq_u64(v1877, v1876), v1868);
                      v1867 = vorrq_s8(v1895, v1867);
                      v1865 = vorrq_s8(v1894, v1865);
                      v1869 = vorrq_s8(v1893, v1869);
                      v1866 = vorrq_s8(v1892, v1866);
                      v1864 = vorrq_s8(v1891, v1864);
                      v1855 = vorrq_s8(v1890, v1855);
                      v1854 = vorrq_s8(v1889, v1854);
                      v1856 = vaddq_s32(v1856, v1831);
                      v1870 = vaddq_s32(v1870, v1831);
                      v1871 = vaddq_s32(v1871, v1831);
                      v1872 = vaddq_s32(v1872, v1831);
                      v1861 = vaddq_s32(v1861, v1832);
                      v1860 = vaddq_s32(v1860, v1832);
                      v1859 = vaddq_s32(v1859, v1832);
                      v1858 = vaddq_s32(v1858, v1832);
                      v1862 -= 16;
                    }
                    while (v1862);
                    v1845 = vaddvq_s32(vaddq_s32(vaddq_s32(v1856, v1871), vaddq_s32(v1870, v1872)));
                    v1896 = vorrq_s8(vorrq_s8(vorrq_s8(v1854, v1866), vorrq_s8(v1864, v1868)), vorrq_s8(vorrq_s8(v1855, v1867), vorrq_s8(v1865, v1869)));
                    v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1896.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1896, v1896, 8uLL));
                    if ((v1853 & 0x3FFFFFF0) != v1853)
                    {
                      do
                      {
LABEL_1098:
                        v1845 += 8;
                        v1897 = *(unsigned __int8 *)v1846;
                        v1846 = (unint64_t *)((char *)v1846 + 1);
                        v1329 |= (unint64_t)v1897 << v1843;
                        v1843 -= 8;
                      }
                      while (v1843 >= v1849);
                    }
                  }
LABEL_1099:
                  *(_QWORD *)(a1 + 40) += (char *)v1846 - (char *)v1838;
                  v1325 = v1845;
                  v1833 = ((v1326 - 1) * v1836 + 256) >> 8;
                  v1837 = v1329 - (v1833 << 56);
                  if (v1329 < v1833 << 56)
                    goto LABEL_1100;
                  goto LABEL_1067;
                }
              }
              v1774 = v1766;
              do
              {
LABEL_1058:
                v1773 += 8;
                v1825 = *(unsigned __int8 *)v1774;
                v1774 = (unint64_t *)((char *)v1774 + 1);
                v1329 |= (unint64_t)v1825 << v1771;
                v1771 -= 8;
              }
              while (v1771 >= v1777);
              goto LABEL_1059;
            }
          }
          v1343 = v1335;
          do
          {
LABEL_830:
            v1342 += 8;
            v1394 = *(unsigned __int8 *)v1343;
            v1343 = (unint64_t *)((char *)v1343 + 1);
            v1329 |= (unint64_t)v1394 << v1340;
            v1340 -= 8;
          }
          while (v1340 >= v1346);
          goto LABEL_831;
        }
        LOBYTE(v1684) = 0;
        v2401 = size_group_lookup[*v17];
        v1685 = *(_QWORD *)(v13 + 5560) + 9 * v2401;
        v1686 = *(_DWORD *)(a1 + 24);
        v1687 = *(_DWORD *)(a1 + 28);
        v1329 = *(_QWORD *)(a1 + 16);
        v1688.i64[0] = 0x800000008;
        v1688.i64[1] = 0x800000008;
        v1689.i64[0] = 0x7F0000007FLL;
        v1689.i64[1] = 0x7F0000007FLL;
        while (1)
        {
          v1693 = *(unsigned __int8 *)(v1685 + (v1684 >> 1));
          if ((v1687 & 0x80000000) == 0)
          {
            v1690 = ((v1686 - 1) * v1693 + 256) >> 8;
            v1694 = v1329 - (v1690 << 56);
            if (v1329 < v1690 << 56)
              goto LABEL_1023;
            goto LABEL_990;
          }
          v1695 = *(unint64_t **)(a1 + 40);
          v1696 = *(_QWORD *)(a1 + 32) - (_QWORD)v1695;
          v1697 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
          if (v1697)
          {
            if (v1696 >= 9)
              v1698 = 9;
            else
              v1698 = *(_QWORD *)(a1 + 32) - (_QWORD)v1695;
            result = v1697(*(_QWORD *)(a1 + 56), v1695, a1 + 64, v1698);
            v1689.i64[0] = 0x7F0000007FLL;
            v1689.i64[1] = 0x7F0000007FLL;
            v1688.i64[0] = 0x800000008;
            v1688.i64[1] = 0x800000008;
            v1695 = (unint64_t *)(a1 + 64);
          }
          v1699 = 8 * v1696;
          v1700 = 48 - v1687;
          if (8 * v1696 >= 0x41)
          {
            v1701 = (v1700 & 0xFFFFFFF8) + 8;
            v1702 = v1701 + v1687;
            v1703 = (unint64_t *)((char *)v1695 + (v1701 >> 3));
            v1329 = (bswap64(*v1695) >> (56 - (v1700 & 0xF8u)) << (v1700 & 7)) | *v2413;
            goto LABEL_1022;
          }
          v1704 = 56 - v1687 - v1699;
          if (v1704 < 0)
            v1702 = v1687;
          else
            v1702 = v1687 + 0x40000000;
          if (v1699)
            v1705 = 1;
          else
            v1705 = v1704 <= -1;
          v1706 = v1704 & ~(v1704 >> 31);
          if (!v1705 || v1700 < v1706)
          {
            v1703 = v1695;
            goto LABEL_1022;
          }
          v1708 = v1706 - 1;
          if (v1706 - 1 >= (int)(40 - v1687))
            v1708 = 40 - v1687;
          v1709 = 47 - v1687 - v1708;
          if (v1709 < 0x78)
            break;
          v1710 = (v1709 >> 3) + 1;
          v1711 = (int8x16_t)v1329;
          v1712 = 0uLL;
          v1713 = (int32x4_t)v1702;
          v1714 = vdupq_n_s32(v1700);
          v1715 = vaddq_s32(v1714, (int32x4_t)xmmword_208F3A6C0);
          v1703 = (unint64_t *)((char *)v1695 + (v1710 & 0x3FFFFFF0));
          v1716 = vaddq_s32(v1714, (int32x4_t)xmmword_208F3A6D0);
          v1700 -= 8 * (v1710 & 0x3FFFFFF0);
          v1717 = vaddq_s32(v1714, (int32x4_t)xmmword_208F3A6A0);
          v1718 = vaddq_s32(v1714, (int32x4_t)xmmword_208F3A6B0);
          v1719 = v1710 & 0x3FFFFFF0;
          v1720 = (uint8x16_t *)v1695;
          v1721 = 0uLL;
          v1722 = 0uLL;
          v1723 = 0uLL;
          v1724 = 0uLL;
          v1725 = 0uLL;
          v1726 = 0uLL;
          v1727 = 0uLL;
          v1728 = 0uLL;
          v1729 = 0uLL;
          do
          {
            v1730 = *v1720++;
            v1731 = vmovl_high_u8(v1730);
            v1732 = vmovl_high_u16(v1731);
            v1733.i64[0] = v1732.u32[0];
            v1733.i64[1] = v1732.u32[1];
            v1734 = v1733;
            v1735 = vmovl_u16(*(uint16x4_t *)v1731.i8);
            v1733.i64[0] = v1735.u32[2];
            v1733.i64[1] = v1735.u32[3];
            v1736 = v1733;
            v1737 = vmovl_u8(*(uint8x8_t *)v1730.i8);
            v1738 = vmovl_high_u16(v1737);
            v1733.i64[0] = v1738.u32[2];
            v1733.i64[1] = v1738.u32[3];
            v1739 = v1733;
            v1733.i64[0] = v1732.u32[2];
            v1733.i64[1] = v1732.u32[3];
            v1740 = v1733;
            v1733.i64[0] = v1735.u32[0];
            v1733.i64[1] = v1735.u32[1];
            v1741 = v1733;
            v1733.i64[0] = v1738.u32[0];
            v1733.i64[1] = v1738.u32[1];
            v1742 = v1733;
            v1743 = vmovl_u16(*(uint16x4_t *)v1737.i8);
            v1733.i64[0] = v1743.u32[2];
            v1733.i64[1] = v1743.u32[3];
            v1744 = v1733;
            v1733.i64[0] = v1743.u32[0];
            v1733.i64[1] = v1743.u32[1];
            v1745 = v1733;
            v1733.i64[0] = v1718.u32[0];
            v1733.i64[1] = v1718.u32[1];
            v1746 = (int8x16_t)vshlq_u64(v1745, v1733);
            v1733.i64[0] = v1718.u32[2];
            v1733.i64[1] = v1718.u32[3];
            v1747 = (int8x16_t)vshlq_u64(v1744, v1733);
            v1733.i64[0] = v1717.u32[0];
            v1733.i64[1] = v1717.u32[1];
            v1748 = (int8x16_t)vshlq_u64(v1742, v1733);
            v1733.i64[0] = v1716.u32[0];
            v1733.i64[1] = v1716.u32[1];
            v1749 = (int8x16_t)vshlq_u64(v1741, v1733);
            v1733.i64[0] = v1715.u32[2];
            v1733.i64[1] = v1715.u32[3];
            v1750 = (int8x16_t)vshlq_u64(v1740, v1733);
            v1733.i64[0] = v1717.u32[2];
            v1733.i64[1] = v1717.u32[3];
            v1751 = (int8x16_t)vshlq_u64(v1739, v1733);
            v1733.i64[0] = v1716.u32[2];
            v1733.i64[1] = v1716.u32[3];
            v1752 = (int8x16_t)vshlq_u64(v1736, v1733);
            v1733.i64[0] = v1715.u32[0];
            v1733.i64[1] = v1715.u32[1];
            v1725 = vorrq_s8((int8x16_t)vshlq_u64(v1734, v1733), v1725);
            v1724 = vorrq_s8(v1752, v1724);
            v1722 = vorrq_s8(v1751, v1722);
            v1726 = vorrq_s8(v1750, v1726);
            v1723 = vorrq_s8(v1749, v1723);
            v1721 = vorrq_s8(v1748, v1721);
            v1712 = vorrq_s8(v1747, v1712);
            v1711 = vorrq_s8(v1746, v1711);
            v1713 = vaddq_s32(v1713, v1688);
            v1727 = vaddq_s32(v1727, v1688);
            v1728 = vaddq_s32(v1728, v1688);
            v1729 = vaddq_s32(v1729, v1688);
            v1718 = vaddq_s32(v1718, v1689);
            v1717 = vaddq_s32(v1717, v1689);
            v1716 = vaddq_s32(v1716, v1689);
            v1715 = vaddq_s32(v1715, v1689);
            v1719 -= 16;
          }
          while (v1719);
          v1702 = vaddvq_s32(vaddq_s32(vaddq_s32(v1713, v1728), vaddq_s32(v1727, v1729)));
          v1753 = vorrq_s8(vorrq_s8(vorrq_s8(v1711, v1723), vorrq_s8(v1721, v1725)), vorrq_s8(vorrq_s8(v1712, v1724), vorrq_s8(v1722, v1726)));
          v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1753.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1753, v1753, 8uLL));
          if ((v1710 & 0x3FFFFFF0) != v1710)
            goto LABEL_1021;
LABEL_1022:
          *(_QWORD *)(a1 + 40) += (char *)v1703 - (char *)v1695;
          v1687 = v1702;
          v1690 = ((v1686 - 1) * v1693 + 256) >> 8;
          v1694 = v1329 - (v1690 << 56);
          if (v1329 < v1690 << 56)
          {
LABEL_1023:
            v1691 = 0;
            goto LABEL_991;
          }
LABEL_990:
          LODWORD(v1690) = *(_DWORD *)(a1 + 24) - v1690;
          v1691 = 1;
          v1329 = v1694;
LABEL_991:
          v1692 = vpx_norm[v1690];
          v1686 = (_DWORD)v1690 << v1692;
          v1329 <<= v1692;
          v1687 -= v1692;
          *(_QWORD *)(a1 + 16) = v1329;
          *(_DWORD *)(a1 + 24) = (_DWORD)v1690 << v1692;
          *(_DWORD *)(a1 + 28) = v1687;
          v1684 = (char)vp9_intra_mode_tree[v1691 + (unint64_t)v1684];
          if (v1684 <= 0)
          {
            v1681 = -v1684;
            v1826 = *(_QWORD *)(a1 + 13744);
            if (v1826)
              ++*(_DWORD *)(v1826 + 40 * v2401 + 4 * -(char)v1684);
            v2399[1] = v1681;
            goto LABEL_1141;
          }
        }
        v1703 = v1695;
        do
        {
LABEL_1021:
          v1702 += 8;
          v1754 = *(unsigned __int8 *)v1703;
          v1703 = (unint64_t *)((char *)v1703 + 1);
          v1329 |= (unint64_t)v1754 << v1700;
          v1700 -= 8;
        }
        while (v1700 >= v1706);
        goto LABEL_1022;
      }
      LOBYTE(v1468) = 0;
      v1469 = *(_QWORD *)(v13 + 5560);
      v1470 = *(_DWORD *)(a1 + 24);
      v1471 = *(_DWORD *)(a1 + 28);
      v1472.i64[0] = 0x800000008;
      v1472.i64[1] = 0x800000008;
      v1473.i64[0] = 0x7F0000007FLL;
      v1473.i64[1] = 0x7F0000007FLL;
      v1329 = *(_QWORD *)(a1 + 16);
      while (1)
      {
        v1477 = *(unsigned __int8 *)(v1469 + (v1468 >> 1));
        if ((v1471 & 0x80000000) == 0)
        {
          v1474 = ((v1470 - 1) * v1477 + 256) >> 8;
          v1478 = v1329 - (v1474 << 56);
          if (v1329 < v1474 << 56)
            goto LABEL_908;
          goto LABEL_875;
        }
        v1479 = *(unint64_t **)(a1 + 40);
        v1480 = *(_QWORD *)(a1 + 32) - (_QWORD)v1479;
        v1481 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
        if (v1481)
        {
          if (v1480 >= 9)
            v1482 = 9;
          else
            v1482 = *(_QWORD *)(a1 + 32) - (_QWORD)v1479;
          result = v1481(*(_QWORD *)(a1 + 56), v1479, a1 + 64, v1482);
          v1473.i64[0] = 0x7F0000007FLL;
          v1473.i64[1] = 0x7F0000007FLL;
          v1472.i64[0] = 0x800000008;
          v1472.i64[1] = 0x800000008;
          v1479 = (unint64_t *)(a1 + 64);
        }
        v1483 = 8 * v1480;
        v1484 = 48 - v1471;
        if (8 * v1480 >= 0x41)
        {
          v1485 = (v1484 & 0xFFFFFFF8) + 8;
          v1486 = v1485 + v1471;
          v1487 = (unint64_t *)((char *)v1479 + (v1485 >> 3));
          v1329 = (bswap64(*v1479) >> (56 - (v1484 & 0xF8u)) << (v1484 & 7)) | *v2413;
          goto LABEL_907;
        }
        v1488 = 56 - v1471 - v1483;
        if (v1488 < 0)
          v1486 = v1471;
        else
          v1486 = v1471 + 0x40000000;
        if (v1483)
          v1489 = 1;
        else
          v1489 = v1488 <= -1;
        v1490 = v1488 & ~(v1488 >> 31);
        if (!v1489 || v1484 < v1490)
        {
          v1487 = v1479;
          goto LABEL_907;
        }
        v1492 = v1490 - 1;
        if (v1490 - 1 >= (int)(40 - v1471))
          v1492 = 40 - v1471;
        v1493 = 47 - v1471 - v1492;
        if (v1493 < 0x78)
          break;
        v1494 = (v1493 >> 3) + 1;
        v1495 = (int8x16_t)v1329;
        v1496 = 0uLL;
        v1497 = (int32x4_t)v1486;
        v1498 = vdupq_n_s32(v1484);
        v1499 = vaddq_s32(v1498, (int32x4_t)xmmword_208F3A6C0);
        v1487 = (unint64_t *)((char *)v1479 + (v1494 & 0x3FFFFFF0));
        v1500 = vaddq_s32(v1498, (int32x4_t)xmmword_208F3A6D0);
        v1484 -= 8 * (v1494 & 0x3FFFFFF0);
        v1501 = vaddq_s32(v1498, (int32x4_t)xmmword_208F3A6A0);
        v1502 = vaddq_s32(v1498, (int32x4_t)xmmword_208F3A6B0);
        v1503 = v1494 & 0x3FFFFFF0;
        v1504 = (uint8x16_t *)v1479;
        v1505 = 0uLL;
        v1506 = 0uLL;
        v1507 = 0uLL;
        v1508 = 0uLL;
        v1509 = 0uLL;
        v1510 = 0uLL;
        v1511 = 0uLL;
        v1512 = 0uLL;
        v1513 = 0uLL;
        do
        {
          v1514 = *v1504++;
          v1515 = vmovl_high_u8(v1514);
          v1516 = vmovl_high_u16(v1515);
          v1517.i64[0] = v1516.u32[0];
          v1517.i64[1] = v1516.u32[1];
          v1518 = v1517;
          v1519 = vmovl_u16(*(uint16x4_t *)v1515.i8);
          v1517.i64[0] = v1519.u32[2];
          v1517.i64[1] = v1519.u32[3];
          v1520 = v1517;
          v1521 = vmovl_u8(*(uint8x8_t *)v1514.i8);
          v1522 = vmovl_high_u16(v1521);
          v1517.i64[0] = v1522.u32[2];
          v1517.i64[1] = v1522.u32[3];
          v1523 = v1517;
          v1517.i64[0] = v1516.u32[2];
          v1517.i64[1] = v1516.u32[3];
          v1524 = v1517;
          v1517.i64[0] = v1519.u32[0];
          v1517.i64[1] = v1519.u32[1];
          v1525 = v1517;
          v1517.i64[0] = v1522.u32[0];
          v1517.i64[1] = v1522.u32[1];
          v1526 = v1517;
          v1527 = vmovl_u16(*(uint16x4_t *)v1521.i8);
          v1517.i64[0] = v1527.u32[2];
          v1517.i64[1] = v1527.u32[3];
          v1528 = v1517;
          v1517.i64[0] = v1527.u32[0];
          v1517.i64[1] = v1527.u32[1];
          v1529 = v1517;
          v1517.i64[0] = v1502.u32[0];
          v1517.i64[1] = v1502.u32[1];
          v1530 = (int8x16_t)vshlq_u64(v1529, v1517);
          v1517.i64[0] = v1502.u32[2];
          v1517.i64[1] = v1502.u32[3];
          v1531 = (int8x16_t)vshlq_u64(v1528, v1517);
          v1517.i64[0] = v1501.u32[0];
          v1517.i64[1] = v1501.u32[1];
          v1532 = (int8x16_t)vshlq_u64(v1526, v1517);
          v1517.i64[0] = v1500.u32[0];
          v1517.i64[1] = v1500.u32[1];
          v1533 = (int8x16_t)vshlq_u64(v1525, v1517);
          v1517.i64[0] = v1499.u32[2];
          v1517.i64[1] = v1499.u32[3];
          v1534 = (int8x16_t)vshlq_u64(v1524, v1517);
          v1517.i64[0] = v1501.u32[2];
          v1517.i64[1] = v1501.u32[3];
          v1535 = (int8x16_t)vshlq_u64(v1523, v1517);
          v1517.i64[0] = v1500.u32[2];
          v1517.i64[1] = v1500.u32[3];
          v1536 = (int8x16_t)vshlq_u64(v1520, v1517);
          v1517.i64[0] = v1499.u32[0];
          v1517.i64[1] = v1499.u32[1];
          v1509 = vorrq_s8((int8x16_t)vshlq_u64(v1518, v1517), v1509);
          v1508 = vorrq_s8(v1536, v1508);
          v1506 = vorrq_s8(v1535, v1506);
          v1510 = vorrq_s8(v1534, v1510);
          v1507 = vorrq_s8(v1533, v1507);
          v1505 = vorrq_s8(v1532, v1505);
          v1496 = vorrq_s8(v1531, v1496);
          v1495 = vorrq_s8(v1530, v1495);
          v1497 = vaddq_s32(v1497, v1472);
          v1511 = vaddq_s32(v1511, v1472);
          v1512 = vaddq_s32(v1512, v1472);
          v1513 = vaddq_s32(v1513, v1472);
          v1502 = vaddq_s32(v1502, v1473);
          v1501 = vaddq_s32(v1501, v1473);
          v1500 = vaddq_s32(v1500, v1473);
          v1499 = vaddq_s32(v1499, v1473);
          v1503 -= 16;
        }
        while (v1503);
        v1486 = vaddvq_s32(vaddq_s32(vaddq_s32(v1497, v1512), vaddq_s32(v1511, v1513)));
        v1537 = vorrq_s8(vorrq_s8(vorrq_s8(v1495, v1507), vorrq_s8(v1505, v1509)), vorrq_s8(vorrq_s8(v1496, v1508), vorrq_s8(v1506, v1510)));
        v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1537.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1537, v1537, 8uLL));
        if ((v1494 & 0x3FFFFFF0) != v1494)
          goto LABEL_906;
LABEL_907:
        *(_QWORD *)(a1 + 40) += (char *)v1487 - (char *)v1479;
        v1471 = v1486;
        v1474 = ((v1470 - 1) * v1477 + 256) >> 8;
        v1478 = v1329 - (v1474 << 56);
        if (v1329 < v1474 << 56)
        {
LABEL_908:
          v1475 = 0;
          goto LABEL_876;
        }
LABEL_875:
        LODWORD(v1474) = *(_DWORD *)(a1 + 24) - v1474;
        v1475 = 1;
        v1329 = v1478;
LABEL_876:
        v1476 = vpx_norm[v1474];
        v1470 = (_DWORD)v1474 << v1476;
        v1329 <<= v1476;
        v1471 -= v1476;
        *(_QWORD *)(a1 + 16) = v1329;
        *(_DWORD *)(a1 + 24) = (_DWORD)v1474 << v1476;
        *(_DWORD *)(a1 + 28) = v1471;
        v1468 = (char)vp9_intra_mode_tree[v1475 + (unint64_t)v1468];
        if (v1468 <= 0)
        {
          v1610 = -v1468;
          v1611 = *(_QWORD *)(a1 + 13744);
          if (v1611)
          {
            ++*(_DWORD *)(v1611 + 4 * -(char)v1468);
            v1470 = *(_DWORD *)(a1 + 24);
            v1471 = *(_DWORD *)(a1 + 28);
          }
          LOBYTE(v1612) = 0;
          v17[44] = v1610;
          v17[20] = v1610;
          v1613 = *(_QWORD *)(a2 + 5560);
          v1614.i64[0] = 0x800000008;
          v1614.i64[1] = 0x800000008;
          v1615.i64[0] = 0x7F0000007FLL;
          v1615.i64[1] = 0x7F0000007FLL;
          while (1)
          {
            v1619 = *(unsigned __int8 *)(v1613 + (v1612 >> 1));
            if ((v1471 & 0x80000000) == 0)
            {
              v1616 = ((v1470 - 1) * v1619 + 256) >> 8;
              v1620 = v1329 - (v1616 << 56);
              if (v1329 < v1616 << 56)
                goto LABEL_982;
              goto LABEL_949;
            }
            v1621 = *(unint64_t **)(a1 + 40);
            v1622 = *(_QWORD *)(a1 + 32) - (_QWORD)v1621;
            v1623 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
            if (v1623)
            {
              if (v1622 >= 9)
                v1624 = 9;
              else
                v1624 = *(_QWORD *)(a1 + 32) - (_QWORD)v1621;
              result = v1623(*(_QWORD *)(a1 + 56), v1621, a1 + 64, v1624);
              v1615.i64[0] = 0x7F0000007FLL;
              v1615.i64[1] = 0x7F0000007FLL;
              v1614.i64[0] = 0x800000008;
              v1614.i64[1] = 0x800000008;
              v1621 = (unint64_t *)(a1 + 64);
            }
            v1625 = 8 * v1622;
            v1626 = 48 - v1471;
            if (8 * v1622 >= 0x41)
            {
              v1627 = (v1626 & 0xFFFFFFF8) + 8;
              v1628 = v1627 + v1471;
              v1629 = (unint64_t *)((char *)v1621 + (v1627 >> 3));
              v1329 = (bswap64(*v1621) >> (56 - (v1626 & 0xF8u)) << (v1626 & 7)) | *v2413;
              goto LABEL_981;
            }
            v1630 = 56 - v1471 - v1625;
            if (v1630 < 0)
              v1628 = v1471;
            else
              v1628 = v1471 + 0x40000000;
            if (v1625)
              v1631 = 1;
            else
              v1631 = v1630 <= -1;
            v1632 = v1630 & ~(v1630 >> 31);
            if (!v1631 || v1626 < v1632)
            {
              v1629 = v1621;
              goto LABEL_981;
            }
            v1634 = v1632 - 1;
            if (v1632 - 1 >= (int)(40 - v1471))
              v1634 = 40 - v1471;
            v1635 = 47 - v1471 - v1634;
            if (v1635 < 0x78)
              break;
            v1636 = (v1635 >> 3) + 1;
            v1637 = (int8x16_t)v1329;
            v1638 = 0uLL;
            v1639 = (int32x4_t)v1628;
            v1640 = vdupq_n_s32(v1626);
            v1641 = vaddq_s32(v1640, (int32x4_t)xmmword_208F3A6C0);
            v1629 = (unint64_t *)((char *)v1621 + (v1636 & 0x3FFFFFF0));
            v1642 = vaddq_s32(v1640, (int32x4_t)xmmword_208F3A6D0);
            v1626 -= 8 * (v1636 & 0x3FFFFFF0);
            v1643 = vaddq_s32(v1640, (int32x4_t)xmmword_208F3A6A0);
            v1644 = vaddq_s32(v1640, (int32x4_t)xmmword_208F3A6B0);
            v1645 = v1636 & 0x3FFFFFF0;
            v1646 = (uint8x16_t *)v1621;
            v1647 = 0uLL;
            v1648 = 0uLL;
            v1649 = 0uLL;
            v1650 = 0uLL;
            v1651 = 0uLL;
            v1652 = 0uLL;
            v1653 = 0uLL;
            v1654 = 0uLL;
            v1655 = 0uLL;
            do
            {
              v1656 = *v1646++;
              v1657 = vmovl_high_u8(v1656);
              v1658 = vmovl_high_u16(v1657);
              v1659.i64[0] = v1658.u32[0];
              v1659.i64[1] = v1658.u32[1];
              v1660 = v1659;
              v1661 = vmovl_u16(*(uint16x4_t *)v1657.i8);
              v1659.i64[0] = v1661.u32[2];
              v1659.i64[1] = v1661.u32[3];
              v1662 = v1659;
              v1663 = vmovl_u8(*(uint8x8_t *)v1656.i8);
              v1664 = vmovl_high_u16(v1663);
              v1659.i64[0] = v1664.u32[2];
              v1659.i64[1] = v1664.u32[3];
              v1665 = v1659;
              v1659.i64[0] = v1658.u32[2];
              v1659.i64[1] = v1658.u32[3];
              v1666 = v1659;
              v1659.i64[0] = v1661.u32[0];
              v1659.i64[1] = v1661.u32[1];
              v1667 = v1659;
              v1659.i64[0] = v1664.u32[0];
              v1659.i64[1] = v1664.u32[1];
              v1668 = v1659;
              v1669 = vmovl_u16(*(uint16x4_t *)v1663.i8);
              v1659.i64[0] = v1669.u32[2];
              v1659.i64[1] = v1669.u32[3];
              v1670 = v1659;
              v1659.i64[0] = v1669.u32[0];
              v1659.i64[1] = v1669.u32[1];
              v1671 = v1659;
              v1659.i64[0] = v1644.u32[0];
              v1659.i64[1] = v1644.u32[1];
              v1672 = (int8x16_t)vshlq_u64(v1671, v1659);
              v1659.i64[0] = v1644.u32[2];
              v1659.i64[1] = v1644.u32[3];
              v1673 = (int8x16_t)vshlq_u64(v1670, v1659);
              v1659.i64[0] = v1643.u32[0];
              v1659.i64[1] = v1643.u32[1];
              v1674 = (int8x16_t)vshlq_u64(v1668, v1659);
              v1659.i64[0] = v1642.u32[0];
              v1659.i64[1] = v1642.u32[1];
              v1675 = (int8x16_t)vshlq_u64(v1667, v1659);
              v1659.i64[0] = v1641.u32[2];
              v1659.i64[1] = v1641.u32[3];
              v1676 = (int8x16_t)vshlq_u64(v1666, v1659);
              v1659.i64[0] = v1643.u32[2];
              v1659.i64[1] = v1643.u32[3];
              v1677 = (int8x16_t)vshlq_u64(v1665, v1659);
              v1659.i64[0] = v1642.u32[2];
              v1659.i64[1] = v1642.u32[3];
              v1678 = (int8x16_t)vshlq_u64(v1662, v1659);
              v1659.i64[0] = v1641.u32[0];
              v1659.i64[1] = v1641.u32[1];
              v1651 = vorrq_s8((int8x16_t)vshlq_u64(v1660, v1659), v1651);
              v1650 = vorrq_s8(v1678, v1650);
              v1648 = vorrq_s8(v1677, v1648);
              v1652 = vorrq_s8(v1676, v1652);
              v1649 = vorrq_s8(v1675, v1649);
              v1647 = vorrq_s8(v1674, v1647);
              v1638 = vorrq_s8(v1673, v1638);
              v1637 = vorrq_s8(v1672, v1637);
              v1639 = vaddq_s32(v1639, v1614);
              v1653 = vaddq_s32(v1653, v1614);
              v1654 = vaddq_s32(v1654, v1614);
              v1655 = vaddq_s32(v1655, v1614);
              v1644 = vaddq_s32(v1644, v1615);
              v1643 = vaddq_s32(v1643, v1615);
              v1642 = vaddq_s32(v1642, v1615);
              v1641 = vaddq_s32(v1641, v1615);
              v1645 -= 16;
            }
            while (v1645);
            v1628 = vaddvq_s32(vaddq_s32(vaddq_s32(v1639, v1654), vaddq_s32(v1653, v1655)));
            v1679 = vorrq_s8(vorrq_s8(vorrq_s8(v1637, v1649), vorrq_s8(v1647, v1651)), vorrq_s8(vorrq_s8(v1638, v1650), vorrq_s8(v1648, v1652)));
            v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1679.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1679, v1679, 8uLL));
            if ((v1636 & 0x3FFFFFF0) != v1636)
              goto LABEL_980;
LABEL_981:
            *(_QWORD *)(a1 + 40) += (char *)v1629 - (char *)v1621;
            v1471 = v1628;
            v1616 = ((v1470 - 1) * v1619 + 256) >> 8;
            v1620 = v1329 - (v1616 << 56);
            if (v1329 < v1616 << 56)
            {
LABEL_982:
              v1617 = 0;
              goto LABEL_950;
            }
LABEL_949:
            LODWORD(v1616) = *(_DWORD *)(a1 + 24) - v1616;
            v1617 = 1;
            v1329 = v1620;
LABEL_950:
            v1618 = vpx_norm[v1616];
            v1470 = (_DWORD)v1616 << v1618;
            v1329 <<= v1618;
            v1471 -= v1618;
            *(_QWORD *)(a1 + 16) = v1329;
            *(_DWORD *)(a1 + 24) = (_DWORD)v1616 << v1618;
            *(_DWORD *)(a1 + 28) = v1471;
            v1612 = (char)vp9_intra_mode_tree[v1617 + (unint64_t)v1612];
            if (v1612 <= 0)
            {
              v1681 = -v1612;
              v1683 = *(_QWORD *)(a1 + 13744);
              if (v1683)
                ++*(_DWORD *)(v1683 + 4 * -(char)v1612);
              v17[1] = v1681;
              v17[56] = v1681;
              v17[32] = v1681;
              goto LABEL_1141;
            }
          }
          v1629 = v1621;
          do
          {
LABEL_980:
            v1628 += 8;
            v1680 = *(unsigned __int8 *)v1629;
            v1629 = (unint64_t *)((char *)v1629 + 1);
            v1329 |= (unint64_t)v1680 << v1626;
            v1626 -= 8;
          }
          while (v1626 >= v1632);
          goto LABEL_981;
        }
      }
      v1487 = v1479;
      do
      {
LABEL_906:
        v1486 += 8;
        v1538 = *(unsigned __int8 *)v1487;
        v1487 = (unint64_t *)((char *)v1487 + 1);
        v1329 |= (unint64_t)v1538 << v1484;
        v1484 -= 8;
      }
      while (v1484 >= v1490);
      goto LABEL_907;
    }
    LOBYTE(v1397) = 0;
    v1398 = *(_QWORD *)(v13 + 5560);
    v1399 = *(_DWORD *)(a1 + 24);
    v1400 = *(_DWORD *)(a1 + 28);
    v1401.i64[0] = 0x800000008;
    v1401.i64[1] = 0x800000008;
    v1402.i64[0] = 0x7F0000007FLL;
    v1402.i64[1] = 0x7F0000007FLL;
    v1329 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v1406 = *(unsigned __int8 *)(v1398 + (v1397 >> 1));
      if ((v1400 & 0x80000000) == 0)
      {
        v1403 = ((v1399 - 1) * v1406 + 256) >> 8;
        v1407 = v1329 - (v1403 << 56);
        if (v1329 < v1403 << 56)
          goto LABEL_873;
        goto LABEL_840;
      }
      v1408 = *(unint64_t **)(a1 + 40);
      v1409 = *(_QWORD *)(a1 + 32) - (_QWORD)v1408;
      v1410 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
      if (v1410)
      {
        if (v1409 >= 9)
          v1411 = 9;
        else
          v1411 = *(_QWORD *)(a1 + 32) - (_QWORD)v1408;
        result = v1410(*(_QWORD *)(a1 + 56), v1408, a1 + 64, v1411);
        v1402.i64[0] = 0x7F0000007FLL;
        v1402.i64[1] = 0x7F0000007FLL;
        v1401.i64[0] = 0x800000008;
        v1401.i64[1] = 0x800000008;
        v1408 = (unint64_t *)(a1 + 64);
      }
      v1412 = 8 * v1409;
      v1413 = 48 - v1400;
      if (8 * v1409 >= 0x41)
      {
        v1414 = (v1413 & 0xFFFFFFF8) + 8;
        v1415 = v1414 + v1400;
        v1416 = (unint64_t *)((char *)v1408 + (v1414 >> 3));
        v1329 = (bswap64(*v1408) >> (56 - (v1413 & 0xF8u)) << (v1413 & 7)) | *v2413;
        goto LABEL_872;
      }
      v1417 = 56 - v1400 - v1412;
      if (v1417 < 0)
        v1415 = v1400;
      else
        v1415 = v1400 + 0x40000000;
      if (v1412)
        v1418 = 1;
      else
        v1418 = v1417 <= -1;
      v1419 = v1417 & ~(v1417 >> 31);
      if (!v1418 || v1413 < v1419)
      {
        v1416 = v1408;
        goto LABEL_872;
      }
      v1421 = v1419 - 1;
      if (v1419 - 1 >= (int)(40 - v1400))
        v1421 = 40 - v1400;
      v1422 = 47 - v1400 - v1421;
      if (v1422 < 0x78)
        break;
      v1423 = (v1422 >> 3) + 1;
      v1424 = (int8x16_t)v1329;
      v1425 = 0uLL;
      v1426 = (int32x4_t)v1415;
      v1427 = vdupq_n_s32(v1413);
      v1428 = vaddq_s32(v1427, (int32x4_t)xmmword_208F3A6C0);
      v1416 = (unint64_t *)((char *)v1408 + (v1423 & 0x3FFFFFF0));
      v1429 = vaddq_s32(v1427, (int32x4_t)xmmword_208F3A6D0);
      v1413 -= 8 * (v1423 & 0x3FFFFFF0);
      v1430 = vaddq_s32(v1427, (int32x4_t)xmmword_208F3A6A0);
      v1431 = vaddq_s32(v1427, (int32x4_t)xmmword_208F3A6B0);
      v1432 = v1423 & 0x3FFFFFF0;
      v1433 = (uint8x16_t *)v1408;
      v1434 = 0uLL;
      v1435 = 0uLL;
      v1436 = 0uLL;
      v1437 = 0uLL;
      v1438 = 0uLL;
      v1439 = 0uLL;
      v1440 = 0uLL;
      v1441 = 0uLL;
      v1442 = 0uLL;
      do
      {
        v1443 = *v1433++;
        v1444 = vmovl_high_u8(v1443);
        v1445 = vmovl_high_u16(v1444);
        v1446.i64[0] = v1445.u32[0];
        v1446.i64[1] = v1445.u32[1];
        v1447 = v1446;
        v1448 = vmovl_u16(*(uint16x4_t *)v1444.i8);
        v1446.i64[0] = v1448.u32[2];
        v1446.i64[1] = v1448.u32[3];
        v1449 = v1446;
        v1450 = vmovl_u8(*(uint8x8_t *)v1443.i8);
        v1451 = vmovl_high_u16(v1450);
        v1446.i64[0] = v1451.u32[2];
        v1446.i64[1] = v1451.u32[3];
        v1452 = v1446;
        v1446.i64[0] = v1445.u32[2];
        v1446.i64[1] = v1445.u32[3];
        v1453 = v1446;
        v1446.i64[0] = v1448.u32[0];
        v1446.i64[1] = v1448.u32[1];
        v1454 = v1446;
        v1446.i64[0] = v1451.u32[0];
        v1446.i64[1] = v1451.u32[1];
        v1455 = v1446;
        v1456 = vmovl_u16(*(uint16x4_t *)v1450.i8);
        v1446.i64[0] = v1456.u32[2];
        v1446.i64[1] = v1456.u32[3];
        v1457 = v1446;
        v1446.i64[0] = v1456.u32[0];
        v1446.i64[1] = v1456.u32[1];
        v1458 = v1446;
        v1446.i64[0] = v1431.u32[0];
        v1446.i64[1] = v1431.u32[1];
        v1459 = (int8x16_t)vshlq_u64(v1458, v1446);
        v1446.i64[0] = v1431.u32[2];
        v1446.i64[1] = v1431.u32[3];
        v1460 = (int8x16_t)vshlq_u64(v1457, v1446);
        v1446.i64[0] = v1430.u32[0];
        v1446.i64[1] = v1430.u32[1];
        v1461 = (int8x16_t)vshlq_u64(v1455, v1446);
        v1446.i64[0] = v1429.u32[0];
        v1446.i64[1] = v1429.u32[1];
        v1462 = (int8x16_t)vshlq_u64(v1454, v1446);
        v1446.i64[0] = v1428.u32[2];
        v1446.i64[1] = v1428.u32[3];
        v1463 = (int8x16_t)vshlq_u64(v1453, v1446);
        v1446.i64[0] = v1430.u32[2];
        v1446.i64[1] = v1430.u32[3];
        v1464 = (int8x16_t)vshlq_u64(v1452, v1446);
        v1446.i64[0] = v1429.u32[2];
        v1446.i64[1] = v1429.u32[3];
        v1465 = (int8x16_t)vshlq_u64(v1449, v1446);
        v1446.i64[0] = v1428.u32[0];
        v1446.i64[1] = v1428.u32[1];
        v1438 = vorrq_s8((int8x16_t)vshlq_u64(v1447, v1446), v1438);
        v1437 = vorrq_s8(v1465, v1437);
        v1435 = vorrq_s8(v1464, v1435);
        v1439 = vorrq_s8(v1463, v1439);
        v1436 = vorrq_s8(v1462, v1436);
        v1434 = vorrq_s8(v1461, v1434);
        v1425 = vorrq_s8(v1460, v1425);
        v1424 = vorrq_s8(v1459, v1424);
        v1426 = vaddq_s32(v1426, v1401);
        v1440 = vaddq_s32(v1440, v1401);
        v1441 = vaddq_s32(v1441, v1401);
        v1442 = vaddq_s32(v1442, v1401);
        v1431 = vaddq_s32(v1431, v1402);
        v1430 = vaddq_s32(v1430, v1402);
        v1429 = vaddq_s32(v1429, v1402);
        v1428 = vaddq_s32(v1428, v1402);
        v1432 -= 16;
      }
      while (v1432);
      v1415 = vaddvq_s32(vaddq_s32(vaddq_s32(v1426, v1441), vaddq_s32(v1440, v1442)));
      v1466 = vorrq_s8(vorrq_s8(vorrq_s8(v1424, v1436), vorrq_s8(v1434, v1438)), vorrq_s8(vorrq_s8(v1425, v1437), vorrq_s8(v1435, v1439)));
      v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1466.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1466, v1466, 8uLL));
      if ((v1423 & 0x3FFFFFF0) != v1423)
        goto LABEL_871;
LABEL_872:
      *(_QWORD *)(a1 + 40) += (char *)v1416 - (char *)v1408;
      v1400 = v1415;
      v1403 = ((v1399 - 1) * v1406 + 256) >> 8;
      v1407 = v1329 - (v1403 << 56);
      if (v1329 < v1403 << 56)
      {
LABEL_873:
        v1404 = 0;
        goto LABEL_841;
      }
LABEL_840:
      LODWORD(v1403) = *(_DWORD *)(a1 + 24) - v1403;
      v1404 = 1;
      v1329 = v1407;
LABEL_841:
      v1405 = vpx_norm[v1403];
      v1399 = (_DWORD)v1403 << v1405;
      v1329 <<= v1405;
      v1400 -= v1405;
      *(_QWORD *)(a1 + 16) = v1329;
      *(_DWORD *)(a1 + 24) = (_DWORD)v1403 << v1405;
      *(_DWORD *)(a1 + 28) = v1400;
      v1397 = (char)vp9_intra_mode_tree[v1404 + (unint64_t)v1397];
      if (v1397 <= 0)
      {
        v1539 = -v1397;
        v1540 = *(_QWORD *)(a1 + 13744);
        if (v1540)
        {
          ++*(_DWORD *)(v1540 + 4 * -(char)v1397);
          v1399 = *(_DWORD *)(a1 + 24);
          v1400 = *(_DWORD *)(a1 + 28);
        }
        LOBYTE(v1541) = 0;
        v17[32] = v1539;
        v17[20] = v1539;
        v1542 = *(_QWORD *)(a2 + 5560);
        v1543.i64[0] = 0x800000008;
        v1543.i64[1] = 0x800000008;
        v1544.i64[0] = 0x7F0000007FLL;
        v1544.i64[1] = 0x7F0000007FLL;
        while (1)
        {
          v1548 = *(unsigned __int8 *)(v1542 + (v1541 >> 1));
          if ((v1400 & 0x80000000) == 0)
          {
            v1545 = ((v1399 - 1) * v1548 + 256) >> 8;
            v1549 = v1329 - (v1545 << 56);
            if (v1329 < v1545 << 56)
              goto LABEL_945;
            goto LABEL_912;
          }
          v1550 = *(unint64_t **)(a1 + 40);
          v1551 = *(_QWORD *)(a1 + 32) - (_QWORD)v1550;
          v1552 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
          if (v1552)
          {
            if (v1551 >= 9)
              v1553 = 9;
            else
              v1553 = *(_QWORD *)(a1 + 32) - (_QWORD)v1550;
            result = v1552(*(_QWORD *)(a1 + 56), v1550, a1 + 64, v1553);
            v1544.i64[0] = 0x7F0000007FLL;
            v1544.i64[1] = 0x7F0000007FLL;
            v1543.i64[0] = 0x800000008;
            v1543.i64[1] = 0x800000008;
            v1550 = (unint64_t *)(a1 + 64);
          }
          v1554 = 8 * v1551;
          v1555 = 48 - v1400;
          if (8 * v1551 >= 0x41)
          {
            v1556 = (v1555 & 0xFFFFFFF8) + 8;
            v1557 = v1556 + v1400;
            v1558 = (unint64_t *)((char *)v1550 + (v1556 >> 3));
            v1329 = (bswap64(*v1550) >> (56 - (v1555 & 0xF8u)) << (v1555 & 7)) | *v2413;
            goto LABEL_944;
          }
          v1559 = 56 - v1400 - v1554;
          if (v1559 < 0)
            v1557 = v1400;
          else
            v1557 = v1400 + 0x40000000;
          if (v1554)
            v1560 = 1;
          else
            v1560 = v1559 <= -1;
          v1561 = v1559 & ~(v1559 >> 31);
          if (!v1560 || v1555 < v1561)
          {
            v1558 = v1550;
            goto LABEL_944;
          }
          v1563 = v1561 - 1;
          if (v1561 - 1 >= (int)(40 - v1400))
            v1563 = 40 - v1400;
          v1564 = 47 - v1400 - v1563;
          if (v1564 < 0x78)
            break;
          v1565 = (v1564 >> 3) + 1;
          v1566 = (int8x16_t)v1329;
          v1567 = 0uLL;
          v1568 = (int32x4_t)v1557;
          v1569 = vdupq_n_s32(v1555);
          v1570 = vaddq_s32(v1569, (int32x4_t)xmmword_208F3A6C0);
          v1558 = (unint64_t *)((char *)v1550 + (v1565 & 0x3FFFFFF0));
          v1571 = vaddq_s32(v1569, (int32x4_t)xmmword_208F3A6D0);
          v1555 -= 8 * (v1565 & 0x3FFFFFF0);
          v1572 = vaddq_s32(v1569, (int32x4_t)xmmword_208F3A6A0);
          v1573 = vaddq_s32(v1569, (int32x4_t)xmmword_208F3A6B0);
          v1574 = v1565 & 0x3FFFFFF0;
          v1575 = (uint8x16_t *)v1550;
          v1576 = 0uLL;
          v1577 = 0uLL;
          v1578 = 0uLL;
          v1579 = 0uLL;
          v1580 = 0uLL;
          v1581 = 0uLL;
          v1582 = 0uLL;
          v1583 = 0uLL;
          v1584 = 0uLL;
          do
          {
            v1585 = *v1575++;
            v1586 = vmovl_high_u8(v1585);
            v1587 = vmovl_high_u16(v1586);
            v1588.i64[0] = v1587.u32[0];
            v1588.i64[1] = v1587.u32[1];
            v1589 = v1588;
            v1590 = vmovl_u16(*(uint16x4_t *)v1586.i8);
            v1588.i64[0] = v1590.u32[2];
            v1588.i64[1] = v1590.u32[3];
            v1591 = v1588;
            v1592 = vmovl_u8(*(uint8x8_t *)v1585.i8);
            v1593 = vmovl_high_u16(v1592);
            v1588.i64[0] = v1593.u32[2];
            v1588.i64[1] = v1593.u32[3];
            v1594 = v1588;
            v1588.i64[0] = v1587.u32[2];
            v1588.i64[1] = v1587.u32[3];
            v1595 = v1588;
            v1588.i64[0] = v1590.u32[0];
            v1588.i64[1] = v1590.u32[1];
            v1596 = v1588;
            v1588.i64[0] = v1593.u32[0];
            v1588.i64[1] = v1593.u32[1];
            v1597 = v1588;
            v1598 = vmovl_u16(*(uint16x4_t *)v1592.i8);
            v1588.i64[0] = v1598.u32[2];
            v1588.i64[1] = v1598.u32[3];
            v1599 = v1588;
            v1588.i64[0] = v1598.u32[0];
            v1588.i64[1] = v1598.u32[1];
            v1600 = v1588;
            v1588.i64[0] = v1573.u32[0];
            v1588.i64[1] = v1573.u32[1];
            v1601 = (int8x16_t)vshlq_u64(v1600, v1588);
            v1588.i64[0] = v1573.u32[2];
            v1588.i64[1] = v1573.u32[3];
            v1602 = (int8x16_t)vshlq_u64(v1599, v1588);
            v1588.i64[0] = v1572.u32[0];
            v1588.i64[1] = v1572.u32[1];
            v1603 = (int8x16_t)vshlq_u64(v1597, v1588);
            v1588.i64[0] = v1571.u32[0];
            v1588.i64[1] = v1571.u32[1];
            v1604 = (int8x16_t)vshlq_u64(v1596, v1588);
            v1588.i64[0] = v1570.u32[2];
            v1588.i64[1] = v1570.u32[3];
            v1605 = (int8x16_t)vshlq_u64(v1595, v1588);
            v1588.i64[0] = v1572.u32[2];
            v1588.i64[1] = v1572.u32[3];
            v1606 = (int8x16_t)vshlq_u64(v1594, v1588);
            v1588.i64[0] = v1571.u32[2];
            v1588.i64[1] = v1571.u32[3];
            v1607 = (int8x16_t)vshlq_u64(v1591, v1588);
            v1588.i64[0] = v1570.u32[0];
            v1588.i64[1] = v1570.u32[1];
            v1580 = vorrq_s8((int8x16_t)vshlq_u64(v1589, v1588), v1580);
            v1579 = vorrq_s8(v1607, v1579);
            v1577 = vorrq_s8(v1606, v1577);
            v1581 = vorrq_s8(v1605, v1581);
            v1578 = vorrq_s8(v1604, v1578);
            v1576 = vorrq_s8(v1603, v1576);
            v1567 = vorrq_s8(v1602, v1567);
            v1566 = vorrq_s8(v1601, v1566);
            v1568 = vaddq_s32(v1568, v1543);
            v1582 = vaddq_s32(v1582, v1543);
            v1583 = vaddq_s32(v1583, v1543);
            v1584 = vaddq_s32(v1584, v1543);
            v1573 = vaddq_s32(v1573, v1544);
            v1572 = vaddq_s32(v1572, v1544);
            v1571 = vaddq_s32(v1571, v1544);
            v1570 = vaddq_s32(v1570, v1544);
            v1574 -= 16;
          }
          while (v1574);
          v1557 = vaddvq_s32(vaddq_s32(vaddq_s32(v1568, v1583), vaddq_s32(v1582, v1584)));
          v1608 = vorrq_s8(vorrq_s8(vorrq_s8(v1566, v1578), vorrq_s8(v1576, v1580)), vorrq_s8(vorrq_s8(v1567, v1579), vorrq_s8(v1577, v1581)));
          v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1608.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1608, v1608, 8uLL));
          if ((v1565 & 0x3FFFFFF0) != v1565)
            goto LABEL_943;
LABEL_944:
          *(_QWORD *)(a1 + 40) += (char *)v1558 - (char *)v1550;
          v1400 = v1557;
          v1545 = ((v1399 - 1) * v1548 + 256) >> 8;
          v1549 = v1329 - (v1545 << 56);
          if (v1329 < v1545 << 56)
          {
LABEL_945:
            v1546 = 0;
            goto LABEL_913;
          }
LABEL_912:
          LODWORD(v1545) = *(_DWORD *)(a1 + 24) - v1545;
          v1546 = 1;
          v1329 = v1549;
LABEL_913:
          v1547 = vpx_norm[v1545];
          v1399 = (_DWORD)v1545 << v1547;
          v1329 <<= v1547;
          v1400 -= v1547;
          *(_QWORD *)(a1 + 16) = v1329;
          *(_DWORD *)(a1 + 24) = (_DWORD)v1545 << v1547;
          *(_DWORD *)(a1 + 28) = v1400;
          v1541 = (char)vp9_intra_mode_tree[v1546 + (unint64_t)v1541];
          if (v1541 <= 0)
          {
            v1681 = -v1541;
            v1682 = *(_QWORD *)(a1 + 13744);
            if (v1682)
              ++*(_DWORD *)(v1682 + 4 * -(char)v1541);
            v17[1] = v1681;
            v17[56] = v1681;
            v17[44] = v1681;
LABEL_1141:
            LOBYTE(v1970) = 0;
            v2402 = v1681;
            v1971 = *(_QWORD *)(a2 + 5560) + 9 * v1681 + 36;
            v1972 = *(_DWORD *)(a1 + 24);
            v1973 = *(_DWORD *)(a1 + 28);
            v1974.i64[0] = 0x800000008;
            v1974.i64[1] = 0x800000008;
            v1975.i64[0] = 0x7F0000007FLL;
            v1975.i64[1] = 0x7F0000007FLL;
            while (2)
            {
              v1979 = *(unsigned __int8 *)(v1971 + (v1970 >> 1));
              if ((v1973 & 0x80000000) == 0)
              {
                v1976 = ((v1972 - 1) * v1979 + 256) >> 8;
                v1980 = v1329 - (v1976 << 56);
                if (v1329 < v1976 << 56)
                {
LABEL_1175:
                  v1977 = 0;
LABEL_1143:
                  v1978 = vpx_norm[v1976];
                  v1972 = (_DWORD)v1976 << v1978;
                  v1329 <<= v1978;
                  v1973 -= v1978;
                  *(_QWORD *)(a1 + 16) = v1329;
                  *(_DWORD *)(a1 + 24) = (_DWORD)v1976 << v1978;
                  *(_DWORD *)(a1 + 28) = v1973;
                  v1970 = (char)vp9_intra_mode_tree[v1977 + (unint64_t)v1970];
                  if (v1970 <= 0)
                  {
                    v2041 = -v1970;
                    v2042 = *(_QWORD *)(a1 + 13744);
                    if (v2042)
                    {
                      v2043 = v2042 + 40 * v2402 + 4 * v2041;
                      ++*(_DWORD *)(v2043 + 160);
                    }
                    v2044 = v2399;
                    v2399[6] = v2041;
                    *(_WORD *)(v2399 + 7) = 3;
                    v2399[9] = -1;
                    goto LABEL_1438;
                  }
                  continue;
                }
LABEL_1142:
                LODWORD(v1976) = *(_DWORD *)(a1 + 24) - v1976;
                v1977 = 1;
                v1329 = v1980;
                goto LABEL_1143;
              }
              break;
            }
            v1981 = *(unint64_t **)(a1 + 40);
            v1982 = *(_QWORD *)(a1 + 32) - (_QWORD)v1981;
            v1983 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
            if (v1983)
            {
              if (v1982 >= 9)
                v1984 = 9;
              else
                v1984 = *(_QWORD *)(a1 + 32) - (_QWORD)v1981;
              result = v1983(*(_QWORD *)(a1 + 56), v1981, a1 + 64, v1984);
              v1975.i64[0] = 0x7F0000007FLL;
              v1975.i64[1] = 0x7F0000007FLL;
              v1974.i64[0] = 0x800000008;
              v1974.i64[1] = 0x800000008;
              v1981 = (unint64_t *)(a1 + 64);
            }
            v1985 = 8 * v1982;
            v1986 = 48 - v1973;
            if (8 * v1982 >= 0x41)
            {
              v1987 = (v1986 & 0xFFFFFFF8) + 8;
              v1988 = v1987 + v1973;
              v1989 = (unint64_t *)((char *)v1981 + (v1987 >> 3));
              v1329 = (bswap64(*v1981) >> (56 - (v1986 & 0xF8u)) << (v1986 & 7)) | *v2413;
              goto LABEL_1174;
            }
            v1990 = 56 - v1973 - v1985;
            if (v1990 < 0)
              v1988 = v1973;
            else
              v1988 = v1973 + 0x40000000;
            if (v1985)
              v1991 = 1;
            else
              v1991 = v1990 <= -1;
            v1992 = v1990 & ~(v1990 >> 31);
            if (!v1991 || v1986 < v1992)
            {
              v1989 = v1981;
            }
            else
            {
              v1994 = v1992 - 1;
              if (v1992 - 1 >= (int)(40 - v1973))
                v1994 = 40 - v1973;
              v1995 = 47 - v1973 - v1994;
              if (v1995 < 0x78)
              {
                v1989 = v1981;
                goto LABEL_1173;
              }
              v1996 = (v1995 >> 3) + 1;
              v1997 = (int8x16_t)v1329;
              v1998 = 0uLL;
              v1999 = (int32x4_t)v1988;
              v2000 = vdupq_n_s32(v1986);
              v2001 = vaddq_s32(v2000, (int32x4_t)xmmword_208F3A6C0);
              v1989 = (unint64_t *)((char *)v1981 + (v1996 & 0x3FFFFFF0));
              v2002 = vaddq_s32(v2000, (int32x4_t)xmmword_208F3A6D0);
              v1986 -= 8 * (v1996 & 0x3FFFFFF0);
              v2003 = vaddq_s32(v2000, (int32x4_t)xmmword_208F3A6A0);
              v2004 = vaddq_s32(v2000, (int32x4_t)xmmword_208F3A6B0);
              v2005 = v1996 & 0x3FFFFFF0;
              v2006 = (uint8x16_t *)v1981;
              v2007 = 0uLL;
              v2008 = 0uLL;
              v2009 = 0uLL;
              v2010 = 0uLL;
              v2011 = 0uLL;
              v2012 = 0uLL;
              v2013 = 0uLL;
              v2014 = 0uLL;
              v2015 = 0uLL;
              do
              {
                v2016 = *v2006++;
                v2017 = vmovl_high_u8(v2016);
                v2018 = vmovl_high_u16(v2017);
                v2019.i64[0] = v2018.u32[0];
                v2019.i64[1] = v2018.u32[1];
                v2020 = v2019;
                v2021 = vmovl_u16(*(uint16x4_t *)v2017.i8);
                v2019.i64[0] = v2021.u32[2];
                v2019.i64[1] = v2021.u32[3];
                v2022 = v2019;
                v2023 = vmovl_u8(*(uint8x8_t *)v2016.i8);
                v2024 = vmovl_high_u16(v2023);
                v2019.i64[0] = v2024.u32[2];
                v2019.i64[1] = v2024.u32[3];
                v2025 = v2019;
                v2019.i64[0] = v2018.u32[2];
                v2019.i64[1] = v2018.u32[3];
                v2026 = v2019;
                v2019.i64[0] = v2021.u32[0];
                v2019.i64[1] = v2021.u32[1];
                v2027 = v2019;
                v2019.i64[0] = v2024.u32[0];
                v2019.i64[1] = v2024.u32[1];
                v2028 = v2019;
                v2029 = vmovl_u16(*(uint16x4_t *)v2023.i8);
                v2019.i64[0] = v2029.u32[2];
                v2019.i64[1] = v2029.u32[3];
                v2030 = v2019;
                v2019.i64[0] = v2029.u32[0];
                v2019.i64[1] = v2029.u32[1];
                v2031 = v2019;
                v2019.i64[0] = v2004.u32[0];
                v2019.i64[1] = v2004.u32[1];
                v2032 = (int8x16_t)vshlq_u64(v2031, v2019);
                v2019.i64[0] = v2004.u32[2];
                v2019.i64[1] = v2004.u32[3];
                v2033 = (int8x16_t)vshlq_u64(v2030, v2019);
                v2019.i64[0] = v2003.u32[0];
                v2019.i64[1] = v2003.u32[1];
                v2034 = (int8x16_t)vshlq_u64(v2028, v2019);
                v2019.i64[0] = v2002.u32[0];
                v2019.i64[1] = v2002.u32[1];
                v2035 = (int8x16_t)vshlq_u64(v2027, v2019);
                v2019.i64[0] = v2001.u32[2];
                v2019.i64[1] = v2001.u32[3];
                v2036 = (int8x16_t)vshlq_u64(v2026, v2019);
                v2019.i64[0] = v2003.u32[2];
                v2019.i64[1] = v2003.u32[3];
                v2037 = (int8x16_t)vshlq_u64(v2025, v2019);
                v2019.i64[0] = v2002.u32[2];
                v2019.i64[1] = v2002.u32[3];
                v2038 = (int8x16_t)vshlq_u64(v2022, v2019);
                v2019.i64[0] = v2001.u32[0];
                v2019.i64[1] = v2001.u32[1];
                v2011 = vorrq_s8((int8x16_t)vshlq_u64(v2020, v2019), v2011);
                v2010 = vorrq_s8(v2038, v2010);
                v2008 = vorrq_s8(v2037, v2008);
                v2012 = vorrq_s8(v2036, v2012);
                v2009 = vorrq_s8(v2035, v2009);
                v2007 = vorrq_s8(v2034, v2007);
                v1998 = vorrq_s8(v2033, v1998);
                v1997 = vorrq_s8(v2032, v1997);
                v1999 = vaddq_s32(v1999, v1974);
                v2013 = vaddq_s32(v2013, v1974);
                v2014 = vaddq_s32(v2014, v1974);
                v2015 = vaddq_s32(v2015, v1974);
                v2004 = vaddq_s32(v2004, v1975);
                v2003 = vaddq_s32(v2003, v1975);
                v2002 = vaddq_s32(v2002, v1975);
                v2001 = vaddq_s32(v2001, v1975);
                v2005 -= 16;
              }
              while (v2005);
              v1988 = vaddvq_s32(vaddq_s32(vaddq_s32(v1999, v2014), vaddq_s32(v2013, v2015)));
              v2039 = vorrq_s8(vorrq_s8(vorrq_s8(v1997, v2009), vorrq_s8(v2007, v2011)), vorrq_s8(vorrq_s8(v1998, v2010), vorrq_s8(v2008, v2012)));
              v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v2039.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2039, v2039, 8uLL));
              if ((v1996 & 0x3FFFFFF0) != v1996)
              {
                do
                {
LABEL_1173:
                  v1988 += 8;
                  v2040 = *(unsigned __int8 *)v1989;
                  v1989 = (unint64_t *)((char *)v1989 + 1);
                  v1329 |= (unint64_t)v2040 << v1986;
                  v1986 -= 8;
                }
                while (v1986 >= v1992);
              }
            }
LABEL_1174:
            *(_QWORD *)(a1 + 40) += (char *)v1989 - (char *)v1981;
            v1973 = v1988;
            v1976 = ((v1972 - 1) * v1979 + 256) >> 8;
            v1980 = v1329 - (v1976 << 56);
            if (v1329 < v1976 << 56)
              goto LABEL_1175;
            goto LABEL_1142;
          }
        }
        v1558 = v1550;
        do
        {
LABEL_943:
          v1557 += 8;
          v1609 = *(unsigned __int8 *)v1558;
          v1558 = (unint64_t *)((char *)v1558 + 1);
          v1329 |= (unint64_t)v1609 << v1555;
          v1555 -= 8;
        }
        while (v1555 >= v1561);
        goto LABEL_944;
      }
    }
    v1416 = v1408;
    do
    {
LABEL_871:
      v1415 += 8;
      v1467 = *(unsigned __int8 *)v1416;
      v1416 = (unint64_t *)((char *)v1416 + 1);
      v1329 |= (unint64_t)v1467 << v1413;
      v1413 -= 8;
    }
    while (v1413 >= v1419);
    goto LABEL_872;
  }
  v2385 = *(_DWORD *)(v13 + 1952);
  v2415 = 0;
  v2408 = (_DWORD *)((char *)&mv_ref_blocks + 64 * v1313);
  v1314 = (char *)(v17 + 8);
  v1315 = *(_QWORD *)(v13 + 5560);
  v1316 = *(_QWORD *)(a1 + 13744);
  v2397 = v1313;
  if (*v15)
  {
    v1317 = *v2404;
    if ((*(_DWORD *)(v13 + 4 * v1317 + 5512) & 4) != 0)
    {
      *v1314 = *(_BYTE *)(v13 + 8 * v1317 + 5452);
      v1395 = -1;
      v1396 = 1;
      goto LABEL_1225;
    }
  }
  v1318 = *(_DWORD *)(v13 + 5552);
  if (v1318 == 2)
  {
    v1319 = *(_QWORD *)(a1 + 13792);
    v1320 = *(_QWORD *)(a1 + 13784);
    if (v1319 && v1320)
    {
      v1321 = *(char *)(v1320 + 9);
      if (*(char *)(v1319 + 9) <= 0)
      {
        v2045 = *(unsigned __int8 *)(v1319 + 8);
        v2046 = v15[116];
        if (v1321 <= 0)
        {
          v1322 = (v2045 == v2046) ^ (*(unsigned __int8 *)(v1320 + 8) == v2046);
          goto LABEL_1188;
        }
        if (v2045 == v2046)
          goto LABEL_1184;
        v2047 = (char)v2045;
      }
      else
      {
        if (v1321 > 0)
        {
          v1322 = 4;
LABEL_1188:
          v2048 = *(_DWORD *)(a1 + 28);
          v2049 = ((*(_DWORD *)(a1 + 24) - 1) * *(unsigned __int8 *)(v1315 + v1322 + 1935) + 256) >> 8;
          if (v2048 < 0)
          {
            vpx_reader_fill((uint64_t)v2413);
            v2048 = *(_DWORD *)(a1 + 28);
          }
          v2050 = *v2413;
          v2051 = *v2413 - (v2049 << 56);
          if (*v2413 >= v2049 << 56)
          {
            LODWORD(v2049) = *(_DWORD *)(a1 + 24) - v2049;
            v1318 = 1;
            v2050 = v2051;
          }
          else
          {
            v1318 = 0;
          }
          v2052 = vpx_norm[v2049];
          *(_QWORD *)(a1 + 16) = v2050 << v2052;
          *(_DWORD *)(a1 + 24) = (_DWORD)v2049 << v2052;
          *(_DWORD *)(a1 + 28) = v2048 - v2052;
          v2053 = *(_QWORD *)(a1 + 13744);
          if (v2053)
          {
            v2054 = v2053 + 8 * v1322 + 4 * v1318;
            ++*(_DWORD *)(v2054 + 12528);
          }
          goto LABEL_1195;
        }
        v2047 = *(unsigned __int8 *)(v1320 + 8);
        if (v2047 == v15[116])
          goto LABEL_1184;
        v2047 = (char)v2047;
      }
      v1322 = (v2047 > 0) ^ 3;
      goto LABEL_1188;
    }
    if (!(v1319 | v1320))
    {
      v1322 = 1;
      goto LABEL_1188;
    }
    if (v1319)
      v1320 = *(_QWORD *)(a1 + 13792);
    if (*(char *)(v1320 + 9) <= 0)
    {
      v1322 = *(unsigned __int8 *)(v1320 + 8) == v15[116];
      goto LABEL_1188;
    }
LABEL_1184:
    v1322 = 3;
    goto LABEL_1188;
  }
LABEL_1195:
  if (v1318)
  {
    if (v1318 != 1)
      goto LABEL_1226;
    v1313 = v13;
    v2055 = *(int *)(v13 + 4 * (char)v15[116] + 5364);
    pred_context_comp_ref_p = (int)vp9_get_pred_context_comp_ref_p(v2412, (uint64_t)v16);
    v2057 = *(_DWORD *)(a1 + 28);
    v2058 = ((*(_DWORD *)(a1 + 24) - 1) * *(unsigned __int8 *)(v1315 + pred_context_comp_ref_p + 1950)
           + 256) >> 8;
    if (v2057 < 0)
    {
      vpx_reader_fill((uint64_t)v2413);
      v2057 = *(_DWORD *)(a1 + 28);
    }
    v2059 = *v2413;
    v2060 = *v2413 - (v2058 << 56);
    if (*v2413 >= v2058 << 56)
    {
      LODWORD(v2058) = *(_DWORD *)(a1 + 24) - v2058;
      v2061 = 1;
      v2059 = v2060;
    }
    else
    {
      v2061 = 0;
    }
    v2069 = vpx_norm[v2058];
    *(_QWORD *)(a1 + 16) = v2059 << v2069;
    *(_DWORD *)(a1 + 24) = (_DWORD)v2058 << v2069;
    *(_DWORD *)(a1 + 28) = v2057 - v2069;
    if (v1316)
      ++*(_DWORD *)(v1316 + 8 * pred_context_comp_ref_p + 4 * v2061 + 12648);
    v1314[v2055] = v15[116];
    v13 = v1313;
    v1395 = *(_BYTE *)(v1313 + v2061 + 5549);
    v1396 = (_DWORD)v2055 == 0;
    LODWORD(v1313) = v2397;
  }
  else
  {
    pred_context_single_ref_p1 = vp9_get_pred_context_single_ref_p1((uint64_t)v16);
    v2063 = *(_DWORD *)(a1 + 28);
    v2064 = ((*(_DWORD *)(a1 + 24) - 1)
           * *(unsigned __int8 *)(v1315 + 2 * pred_context_single_ref_p1 + 1940)
           + 256) >> 8;
    if (v2063 < 0)
    {
      vpx_reader_fill((uint64_t)v2413);
      v2063 = *(_DWORD *)(a1 + 28);
    }
    v2065 = *v2413;
    v2066 = v2064 << 56;
    v2067 = *v2413 - (v2064 << 56);
    if (*v2413 >= v2064 << 56)
    {
      LODWORD(v2064) = *(_DWORD *)(a1 + 24) - v2064;
      v2068 = 1;
    }
    else
    {
      v2068 = 0;
      v2067 = *v2413;
    }
    v2070 = vpx_norm[v2064];
    *(_QWORD *)(a1 + 16) = v2067 << v2070;
    *(_DWORD *)(a1 + 24) = (_DWORD)v2064 << v2070;
    *(_DWORD *)(a1 + 28) = v2063 - v2070;
    if (v1316)
    {
      v2071 = v1316 + 16 * pred_context_single_ref_p1 + 4 * v2068;
      ++*(_DWORD *)(v2071 + 12568);
    }
    if (v2065 >= v2066)
    {
      pred_context_single_ref_p2 = vp9_get_pred_context_single_ref_p2((uint64_t)v16);
      v2074 = *(_DWORD *)(a1 + 28);
      v2075 = ((*(_DWORD *)(a1 + 24) - 1)
             * *(unsigned __int8 *)(v1315 + 2 * pred_context_single_ref_p2 + 1941)
             + 256) >> 8;
      if (v2074 < 0)
      {
        vpx_reader_fill((uint64_t)v2413);
        v2074 = *(_DWORD *)(a1 + 28);
      }
      v2076 = *v2413;
      v2077 = v2075 << 56;
      v2078 = *v2413 - (v2075 << 56);
      if (*v2413 >= v2075 << 56)
      {
        LODWORD(v2075) = *(_DWORD *)(a1 + 24) - v2075;
        v2079 = 1;
      }
      else
      {
        v2079 = 0;
        v2078 = *v2413;
      }
      v2080 = vpx_norm[v2075];
      *(_QWORD *)(a1 + 16) = v2078 << v2080;
      *(_DWORD *)(a1 + 24) = (_DWORD)v2075 << v2080;
      *(_DWORD *)(a1 + 28) = v2074 - v2080;
      if (v1316)
      {
        v2081 = v1316 + 16 * pred_context_single_ref_p2 + 4 * v2079;
        ++*(_DWORD *)(v2081 + 12576);
      }
      if (v2076 < v2077)
        v2072 = 2;
      else
        v2072 = 3;
    }
    else
    {
      v2072 = 1;
    }
    *v1314 = v2072;
    v1395 = -1;
    v1396 = 1;
  }
LABEL_1225:
  v1314[v1396] = v1395;
LABEL_1226:
  v2044 = v2399;
  v2082 = (char)v2399[9];
  v2384 = v2082 > 0;
  v2083 = 0;
  if (*v2408 + a3 < 0)
  {
    v2084 = v2378;
    v2085 = v2376;
    goto LABEL_1233;
  }
  v2084 = v2378;
  v2085 = v2376;
  if (*v2408 + a3 >= *(_DWORD *)(v13 + 1968) || (v2086 = v2408[1], v2086 + a4 < *(_DWORD *)(a1 + 13760)))
  {
LABEL_1233:
    v2087 = v2408[2];
    v2088 = v2087 + a3;
    if (v2087 + a3 < 0)
      goto LABEL_1239;
    goto LABEL_1234;
  }
  if (v2086 + a4 >= *(_DWORD *)(a1 + 13764))
  {
    v2083 = 0;
    v2087 = v2408[2];
    v2088 = v2087 + a3;
    if (v2087 + a3 < 0)
      goto LABEL_1239;
LABEL_1234:
    if (v2088 < *(_DWORD *)(v13 + 1968))
    {
      v2089 = v2408[3];
      if (v2089 + a4 >= *(_DWORD *)(a1 + 13760) && v2089 + a4 < *(_DWORD *)(a1 + 13764))
        v2083 += mode_2_counter[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 13776)
                                                               + 8 * (v2089 + *(_DWORD *)(a1 + 13768) * v2087))
                                                   + 1)];
    }
    goto LABEL_1239;
  }
  v2083 = mode_2_counter[*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 13776)
                                                        + 8 * (v2086 + *(_DWORD *)(a1 + 13768) * *v2408))
                                            + 1)];
  v2087 = v2408[2];
  v2088 = v2087 + a3;
  if (v2087 + a3 >= 0)
    goto LABEL_1234;
LABEL_1239:
  v2090 = counter_to_context[4 * v2083];
  if (*v15 && (*(_DWORD *)(v13 + 4 * *v2404 + 5512) & 8) != 0)
  {
    v2399[1] = 12;
    if (v1313 > 2)
      goto LABEL_1282;
    result = vpx_internal_error(*(_QWORD *)(a1 + 13968), 5, "Invalid usage of segment feature on small blocks");
    goto LABEL_1439;
  }
  if (v1313 < 3)
    goto LABEL_1282;
  v2391 = (char)v2399[9];
  LOBYTE(v2091) = 0;
  v2381 = counter_to_context[4 * v2083];
  v2092 = *(_QWORD *)(v13 + 5560) + 3 * v2090 + 1910;
  v2094 = *(_DWORD *)(a1 + 24);
  v2093 = *(_DWORD *)(a1 + 28);
  v2095 = *(_QWORD *)(a1 + 16);
  v2096.i64[0] = 0x800000008;
  v2096.i64[1] = 0x800000008;
  v2097.i64[0] = 0x7F0000007FLL;
  v2097.i64[1] = 0x7F0000007FLL;
  do
  {
    v2101 = *(unsigned __int8 *)(v2092 + (v2091 >> 1));
    if ((v2093 & 0x80000000) == 0)
    {
      v2098 = ((v2094 - 1) * v2101 + 256) >> 8;
      v2102 = v2095 - (v2098 << 56);
      if (v2095 >= v2098 << 56)
        goto LABEL_1243;
      goto LABEL_1276;
    }
    v2103 = *(unint64_t **)(a1 + 40);
    v2104 = *(_QWORD *)(a1 + 32) - (_QWORD)v2103;
    v2105 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
    if (v2105)
    {
      if (v2104 >= 9)
        v2106 = 9;
      else
        v2106 = *(_QWORD *)(a1 + 32) - (_QWORD)v2103;
      v2105(*(_QWORD *)(a1 + 56), v2103, a1 + 64, v2106);
      v2097.i64[0] = 0x7F0000007FLL;
      v2097.i64[1] = 0x7F0000007FLL;
      v2096.i64[0] = 0x800000008;
      v2096.i64[1] = 0x800000008;
      v2103 = (unint64_t *)(a1 + 64);
    }
    v2107 = 8 * v2104;
    v2108 = 48 - v2093;
    if (8 * v2104 >= 0x41)
    {
      v2109 = (v2108 & 0xFFFFFFF8) + 8;
      v2110 = v2109 + v2093;
      v2111 = (unint64_t *)((char *)v2103 + (v2109 >> 3));
      v2095 = (bswap64(*v2103) >> (56 - (v2108 & 0xF8u)) << (v2108 & 7)) | *v2413;
      goto LABEL_1275;
    }
    v2112 = 56 - v2093 - v2107;
    if (v2112 < 0)
      v2110 = v2093;
    else
      v2110 = v2093 + 0x40000000;
    if (v2107)
      v2113 = 1;
    else
      v2113 = v2112 <= -1;
    v2114 = v2112 & ~(v2112 >> 31);
    if (!v2113 || v2108 < v2114)
    {
      v2111 = v2103;
      goto LABEL_1275;
    }
    v2116 = v2114 - 1;
    if (v2114 - 1 >= (int)(40 - v2093))
      v2116 = 40 - v2093;
    v2117 = 47 - v2093 - v2116;
    if (v2117 < 0x78)
    {
      v2111 = v2103;
      do
      {
LABEL_1274:
        v2110 += 8;
        v2162 = *(unsigned __int8 *)v2111;
        v2111 = (unint64_t *)((char *)v2111 + 1);
        v2095 |= (unint64_t)v2162 << v2108;
        v2108 -= 8;
      }
      while (v2108 >= v2114);
      goto LABEL_1275;
    }
    v2118 = (v2117 >> 3) + 1;
    v2119 = (int8x16_t)v2095;
    v2120 = 0uLL;
    v2121 = (int32x4_t)v2110;
    v2122 = vdupq_n_s32(v2108);
    v2123 = vaddq_s32(v2122, (int32x4_t)xmmword_208F3A6C0);
    v2111 = (unint64_t *)((char *)v2103 + (v2118 & 0x3FFFFFF0));
    v2124 = vaddq_s32(v2122, (int32x4_t)xmmword_208F3A6D0);
    v2108 -= 8 * (v2118 & 0x3FFFFFF0);
    v2125 = vaddq_s32(v2122, (int32x4_t)xmmword_208F3A6A0);
    v2126 = vaddq_s32(v2122, (int32x4_t)xmmword_208F3A6B0);
    v2127 = v2118 & 0x3FFFFFF0;
    v2128 = (uint8x16_t *)v2103;
    v2129 = 0uLL;
    v2130 = 0uLL;
    v2131 = 0uLL;
    v2132 = 0uLL;
    v2133 = 0uLL;
    v2134 = 0uLL;
    v2135 = 0uLL;
    v2136 = 0uLL;
    v2137 = 0uLL;
    do
    {
      v2138 = *v2128++;
      v2139 = vmovl_high_u8(v2138);
      v2140 = vmovl_high_u16(v2139);
      v2141.i64[0] = v2140.u32[0];
      v2141.i64[1] = v2140.u32[1];
      v2142 = v2141;
      v2143 = vmovl_u16(*(uint16x4_t *)v2139.i8);
      v2141.i64[0] = v2143.u32[2];
      v2141.i64[1] = v2143.u32[3];
      v2144 = v2141;
      v2145 = vmovl_u8(*(uint8x8_t *)v2138.i8);
      v2146 = vmovl_high_u16(v2145);
      v2141.i64[0] = v2146.u32[2];
      v2141.i64[1] = v2146.u32[3];
      v2147 = v2141;
      v2141.i64[0] = v2140.u32[2];
      v2141.i64[1] = v2140.u32[3];
      v2148 = v2141;
      v2141.i64[0] = v2143.u32[0];
      v2141.i64[1] = v2143.u32[1];
      v2149 = v2141;
      v2141.i64[0] = v2146.u32[0];
      v2141.i64[1] = v2146.u32[1];
      v2150 = v2141;
      v2151 = vmovl_u16(*(uint16x4_t *)v2145.i8);
      v2141.i64[0] = v2151.u32[2];
      v2141.i64[1] = v2151.u32[3];
      v2152 = v2141;
      v2141.i64[0] = v2151.u32[0];
      v2141.i64[1] = v2151.u32[1];
      v2153 = v2141;
      v2141.i64[0] = v2126.u32[0];
      v2141.i64[1] = v2126.u32[1];
      v2154 = (int8x16_t)vshlq_u64(v2153, v2141);
      v2141.i64[0] = v2126.u32[2];
      v2141.i64[1] = v2126.u32[3];
      v2155 = (int8x16_t)vshlq_u64(v2152, v2141);
      v2141.i64[0] = v2125.u32[0];
      v2141.i64[1] = v2125.u32[1];
      v2156 = (int8x16_t)vshlq_u64(v2150, v2141);
      v2141.i64[0] = v2124.u32[0];
      v2141.i64[1] = v2124.u32[1];
      v2157 = (int8x16_t)vshlq_u64(v2149, v2141);
      v2141.i64[0] = v2123.u32[2];
      v2141.i64[1] = v2123.u32[3];
      v2158 = (int8x16_t)vshlq_u64(v2148, v2141);
      v2141.i64[0] = v2125.u32[2];
      v2141.i64[1] = v2125.u32[3];
      v2159 = (int8x16_t)vshlq_u64(v2147, v2141);
      v2141.i64[0] = v2124.u32[2];
      v2141.i64[1] = v2124.u32[3];
      v2160 = (int8x16_t)vshlq_u64(v2144, v2141);
      v2141.i64[0] = v2123.u32[0];
      v2141.i64[1] = v2123.u32[1];
      v2133 = vorrq_s8((int8x16_t)vshlq_u64(v2142, v2141), v2133);
      v2132 = vorrq_s8(v2160, v2132);
      v2130 = vorrq_s8(v2159, v2130);
      v2134 = vorrq_s8(v2158, v2134);
      v2131 = vorrq_s8(v2157, v2131);
      v2129 = vorrq_s8(v2156, v2129);
      v2120 = vorrq_s8(v2155, v2120);
      v2119 = vorrq_s8(v2154, v2119);
      v2121 = vaddq_s32(v2121, v2096);
      v2135 = vaddq_s32(v2135, v2096);
      v2136 = vaddq_s32(v2136, v2096);
      v2137 = vaddq_s32(v2137, v2096);
      v2126 = vaddq_s32(v2126, v2097);
      v2125 = vaddq_s32(v2125, v2097);
      v2124 = vaddq_s32(v2124, v2097);
      v2123 = vaddq_s32(v2123, v2097);
      v2127 -= 16;
    }
    while (v2127);
    v2110 = vaddvq_s32(vaddq_s32(vaddq_s32(v2121, v2136), vaddq_s32(v2135, v2137)));
    v2161 = vorrq_s8(vorrq_s8(vorrq_s8(v2119, v2131), vorrq_s8(v2129, v2133)), vorrq_s8(vorrq_s8(v2120, v2132), vorrq_s8(v2130, v2134)));
    v2095 = (unint64_t)vorr_s8(*(int8x8_t *)v2161.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2161, v2161, 8uLL));
    if ((v2118 & 0x3FFFFFF0) != v2118)
      goto LABEL_1274;
LABEL_1275:
    *(_QWORD *)(a1 + 40) += (char *)v2111 - (char *)v2103;
    v2093 = v2110;
    v2098 = ((v2094 - 1) * v2101 + 256) >> 8;
    v2102 = v2095 - (v2098 << 56);
    if (v2095 >= v2098 << 56)
    {
LABEL_1243:
      LODWORD(v2098) = *(_DWORD *)(a1 + 24) - v2098;
      v2099 = 1;
      v2095 = v2102;
      goto LABEL_1244;
    }
LABEL_1276:
    v2099 = 0;
LABEL_1244:
    v2100 = vpx_norm[v2098];
    v2094 = (_DWORD)v2098 << v2100;
    v2095 <<= v2100;
    v2093 -= v2100;
    *(_QWORD *)(a1 + 16) = v2095;
    *(_DWORD *)(a1 + 24) = (_DWORD)v2098 << v2100;
    *(_DWORD *)(a1 + 28) = v2093;
    v2091 = (char)vp9_inter_mode_tree[v2099 + (unint64_t)v2091];
  }
  while (v2091 > 0);
  v2163 = *(_QWORD *)(a1 + 13744);
  LODWORD(v2090) = v2381;
  if (v2163)
  {
    v2164 = v2163 + 16 * v2381 + 4 * -v2091;
    ++*(_DWORD *)(v2164 + 12384);
  }
  v2044 = v2399;
  v16 = v2400;
  v2399[1] = 10 - v2091;
  v13 = a2;
  LODWORD(v1313) = v2397;
  v2082 = v2391;
LABEL_1282:
  v2165 = *(unsigned __int8 *)(v13 + 2212);
  if (v2165 != 4)
    goto LABEL_1333;
  v2166 = *(_QWORD *)(a1 + 13784);
  if (v2166)
  {
    v2167 = *(unsigned __int8 *)(v2166 + 7);
    v2168 = *(_QWORD *)(a1 + 13792);
    v2392 = v2082;
    v2382 = v2090;
    if (v2168)
      goto LABEL_1285;
LABEL_1287:
    v2169 = 3;
  }
  else
  {
    v2167 = 3;
    v2168 = *(_QWORD *)(a1 + 13792);
    v2392 = v2082;
    v2382 = v2090;
    if (!v2168)
      goto LABEL_1287;
LABEL_1285:
    v2169 = *(unsigned __int8 *)(v2168 + 7);
  }
  LOBYTE(v2170) = 0;
  if (v2169 == 3)
    v2171 = v2167;
  else
    v2171 = 3;
  if (v2167 == 3)
    v2171 = v2169;
  if (v2167 == v2169)
    v2171 = v2167;
  v2387 = v2171;
  v2172 = *(_QWORD *)(v13 + 5560) + 2 * v2171 + 1902;
  v2174 = *(_DWORD *)(a1 + 24);
  v2173 = *(_DWORD *)(a1 + 28);
  v2175 = *(_QWORD *)(a1 + 16);
  v2176.i64[0] = 0x800000008;
  v2176.i64[1] = 0x800000008;
  v2177.i64[0] = 0x7F0000007FLL;
  v2177.i64[1] = 0x7F0000007FLL;
  while (2)
  {
    v2181 = *(unsigned __int8 *)(v2172 + (v2170 >> 1));
    if ((v2173 & 0x80000000) != 0)
    {
      v2183 = *(unint64_t **)(a1 + 40);
      v2184 = *(_QWORD *)(a1 + 32) - (_QWORD)v2183;
      v2185 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 48);
      if (v2185)
      {
        if (v2184 >= 9)
          v2186 = 9;
        else
          v2186 = *(_QWORD *)(a1 + 32) - (_QWORD)v2183;
        v2185(*(_QWORD *)(a1 + 56), v2183, a1 + 64, v2186);
        v2177.i64[0] = 0x7F0000007FLL;
        v2177.i64[1] = 0x7F0000007FLL;
        v2176.i64[0] = 0x800000008;
        v2176.i64[1] = 0x800000008;
        v2183 = (unint64_t *)(a1 + 64);
      }
      v2187 = 8 * v2184;
      v2188 = 48 - v2173;
      if (8 * v2184 >= 0x41)
      {
        v2189 = (v2188 & 0xFFFFFFF8) + 8;
        v2190 = v2189 + v2173;
        v2191 = (unint64_t *)((char *)v2183 + (v2189 >> 3));
        v2175 = (bswap64(*v2183) >> (56 - (v2188 & 0xF8u)) << (v2188 & 7)) | *v2413;
        goto LABEL_1328;
      }
      v2192 = 56 - v2173 - v2187;
      if (v2192 < 0)
        v2190 = v2173;
      else
        v2190 = v2173 + 0x40000000;
      if (v2187)
        v2193 = 1;
      else
        v2193 = v2192 <= -1;
      v2194 = v2192 & ~(v2192 >> 31);
      if (!v2193 || v2188 < v2194)
      {
        v2191 = v2183;
        goto LABEL_1328;
      }
      v2196 = v2194 - 1;
      if (v2194 - 1 >= (int)(40 - v2173))
        v2196 = 40 - v2173;
      v2197 = 47 - v2173 - v2196;
      if (v2197 >= 0x78)
      {
        v2198 = (v2197 >> 3) + 1;
        v2199 = (int8x16_t)v2175;
        v2200 = 0uLL;
        v2201 = (int32x4_t)v2190;
        v2202 = vdupq_n_s32(v2188);
        v2203 = vaddq_s32(v2202, (int32x4_t)xmmword_208F3A6C0);
        v2191 = (unint64_t *)((char *)v2183 + (v2198 & 0x3FFFFFF0));
        v2204 = vaddq_s32(v2202, (int32x4_t)xmmword_208F3A6D0);
        v2188 -= 8 * (v2198 & 0x3FFFFFF0);
        v2205 = vaddq_s32(v2202, (int32x4_t)xmmword_208F3A6A0);
        v2206 = vaddq_s32(v2202, (int32x4_t)xmmword_208F3A6B0);
        v2207 = v2198 & 0x3FFFFFF0;
        v2208 = (uint8x16_t *)v2183;
        v2209 = 0uLL;
        v2210 = 0uLL;
        v2211 = 0uLL;
        v2212 = 0uLL;
        v2213 = 0uLL;
        v2214 = 0uLL;
        v2215 = 0uLL;
        v2216 = 0uLL;
        v2217 = 0uLL;
        do
        {
          v2218 = *v2208++;
          v2219 = vmovl_high_u8(v2218);
          v2220 = vmovl_high_u16(v2219);
          v2221.i64[0] = v2220.u32[0];
          v2221.i64[1] = v2220.u32[1];
          v2222 = v2221;
          v2223 = vmovl_u16(*(uint16x4_t *)v2219.i8);
          v2221.i64[0] = v2223.u32[2];
          v2221.i64[1] = v2223.u32[3];
          v2224 = v2221;
          v2225 = vmovl_u8(*(uint8x8_t *)v2218.i8);
          v2226 = vmovl_high_u16(v2225);
          v2221.i64[0] = v2226.u32[2];
          v2221.i64[1] = v2226.u32[3];
          v2227 = v2221;
          v2221.i64[0] = v2220.u32[2];
          v2221.i64[1] = v2220.u32[3];
          v2228 = v2221;
          v2221.i64[0] = v2223.u32[0];
          v2221.i64[1] = v2223.u32[1];
          v2229 = v2221;
          v2221.i64[0] = v2226.u32[0];
          v2221.i64[1] = v2226.u32[1];
          v2230 = v2221;
          v2231 = vmovl_u16(*(uint16x4_t *)v2225.i8);
          v2221.i64[0] = v2231.u32[2];
          v2221.i64[1] = v2231.u32[3];
          v2232 = v2221;
          v2221.i64[0] = v2231.u32[0];
          v2221.i64[1] = v2231.u32[1];
          v2233 = v2221;
          v2221.i64[0] = v2206.u32[0];
          v2221.i64[1] = v2206.u32[1];
          v2234 = (int8x16_t)vshlq_u64(v2233, v2221);
          v2221.i64[0] = v2206.u32[2];
          v2221.i64[1] = v2206.u32[3];
          v2235 = (int8x16_t)vshlq_u64(v2232, v2221);
          v2221.i64[0] = v2205.u32[0];
          v2221.i64[1] = v2205.u32[1];
          v2236 = (int8x16_t)vshlq_u64(v2230, v2221);
          v2221.i64[0] = v2204.u32[0];
          v2221.i64[1] = v2204.u32[1];
          v2237 = (int8x16_t)vshlq_u64(v2229, v2221);
          v2221.i64[0] = v2203.u32[2];
          v2221.i64[1] = v2203.u32[3];
          v2238 = (int8x16_t)vshlq_u64(v2228, v2221);
          v2221.i64[0] = v2205.u32[2];
          v2221.i64[1] = v2205.u32[3];
          v2239 = (int8x16_t)vshlq_u64(v2227, v2221);
          v2221.i64[0] = v2204.u32[2];
          v2221.i64[1] = v2204.u32[3];
          v2240 = (int8x16_t)vshlq_u64(v2224, v2221);
          v2221.i64[0] = v2203.u32[0];
          v2221.i64[1] = v2203.u32[1];
          v2213 = vorrq_s8((int8x16_t)vshlq_u64(v2222, v2221), v2213);
          v2212 = vorrq_s8(v2240, v2212);
          v2210 = vorrq_s8(v2239, v2210);
          v2214 = vorrq_s8(v2238, v2214);
          v2211 = vorrq_s8(v2237, v2211);
          v2209 = vorrq_s8(v2236, v2209);
          v2200 = vorrq_s8(v2235, v2200);
          v2199 = vorrq_s8(v2234, v2199);
          v2201 = vaddq_s32(v2201, v2176);
          v2215 = vaddq_s32(v2215, v2176);
          v2216 = vaddq_s32(v2216, v2176);
          v2217 = vaddq_s32(v2217, v2176);
          v2206 = vaddq_s32(v2206, v2177);
          v2205 = vaddq_s32(v2205, v2177);
          v2204 = vaddq_s32(v2204, v2177);
          v2203 = vaddq_s32(v2203, v2177);
          v2207 -= 16;
        }
        while (v2207);
        v2190 = vaddvq_s32(vaddq_s32(vaddq_s32(v2201, v2216), vaddq_s32(v2215, v2217)));
        v2241 = vorrq_s8(vorrq_s8(vorrq_s8(v2199, v2211), vorrq_s8(v2209, v2213)), vorrq_s8(vorrq_s8(v2200, v2212), vorrq_s8(v2210, v2214)));
        v2175 = (unint64_t)vorr_s8(*(int8x8_t *)v2241.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2241, v2241, 8uLL));
        if ((v2198 & 0x3FFFFFF0) == v2198)
        {
LABEL_1328:
          *(_QWORD *)(a1 + 40) += (char *)v2191 - (char *)v2183;
          v2173 = v2190;
          v2178 = ((v2174 - 1) * v2181 + 256) >> 8;
          v2182 = v2175 - (v2178 << 56);
          if (v2175 < v2178 << 56)
            goto LABEL_1329;
          goto LABEL_1296;
        }
      }
      else
      {
        v2191 = v2183;
      }
      do
      {
        v2190 += 8;
        v2242 = *(unsigned __int8 *)v2191;
        v2191 = (unint64_t *)((char *)v2191 + 1);
        v2175 |= (unint64_t)v2242 << v2188;
        v2188 -= 8;
      }
      while (v2188 >= v2194);
      goto LABEL_1328;
    }
    v2178 = ((v2174 - 1) * v2181 + 256) >> 8;
    v2182 = v2175 - (v2178 << 56);
    if (v2175 >= v2178 << 56)
    {
LABEL_1296:
      LODWORD(v2178) = *(_DWORD *)(a1 + 24) - v2178;
      v2179 = 1;
      v2175 = v2182;
      goto LABEL_1297;
    }
LABEL_1329:
    v2179 = 0;
LABEL_1297:
    v2180 = vpx_norm[v2178];
    v2174 = (_DWORD)v2178 << v2180;
    v2175 <<= v2180;
    v2173 -= v2180;
    *(_QWORD *)(a1 + 16) = v2175;
    *(_DWORD *)(a1 + 24) = (_DWORD)v2178 << v2180;
    *(_DWORD *)(a1 + 28) = v2173;
    v2170 = (char)vp9_switchable_interp_tree[v2179 + (unint64_t)v2170];
    if (v2170 > 0)
      continue;
    break;
  }
  v2165 = -v2170;
  v2243 = *(_QWORD *)(a1 + 13744);
  if (v2243)
  {
    v2244 = v2243 + 12 * v2387 + 4 * v2165;
    ++*(_DWORD *)(v2244 + 12336);
  }
  v2044 = v2399;
  v16 = v2400;
  LODWORD(v1313) = v2397;
  v2082 = v2392;
  LODWORD(v2090) = v2382;
LABEL_1333:
  v2044[7] = v2165;
  if (v1313 > 2)
  {
    v2350 = v2044[1];
    if (v2350 != 12)
    {
      if (v2082 <= 0)
        v2358 = 1;
      else
        v2358 = 2;
      v2359 = (char *)(v2399 + 8);
      v2360 = &v2415;
      do
      {
        v2361 = *v2359++;
        v2362 = (__int16 *)(&v2416
                          + dec_find_mv_refs(v2412, v16, v2350, v2361, v2408, (uint64_t)&v2416, a3, a4, 0xFFFFFFFF)- 1);
        v2363 = *v2362;
        if (v2363 >= 0)
          LOWORD(v2364) = *v2362;
        else
          v2364 = -v2363;
        if (!v2385 || (unsigned __int16)v2364 > 0x3Fu)
          goto LABEL_1459;
        v2365 = v2362[1];
        if (v2365 < 0)
          v2365 = -v2365;
        if ((unsigned __int16)v2365 >= 0x40u)
        {
LABEL_1459:
          if ((v2363 & 1) != 0)
          {
            if (v2363 < 1)
              v2366 = v2363 + 1;
            else
              v2366 = v2363 - 1;
            *v2362 = v2366;
          }
          v2367 = v2362[1];
          if ((v2367 & 1) != 0)
          {
            if (v2367 < 1)
              v2368 = v2367 + 1;
            else
              v2368 = v2367 - 1;
            v2362[1] = v2368;
          }
        }
        *(_DWORD *)v2360 = *(_DWORD *)v2362;
        v2360 = (uint64_t *)((char *)v2360 + 4);
        --v2358;
      }
      while (v2358);
    }
    v2044 = v2399;
    result = assign_mv(v2412, (uint64_t)v16, v2350, v2399 + 12, (uint64_t)&v2415, &v2415, v2384, v2385, v2413);
    v2351 = *(_DWORD *)(a1 + 13960) | result ^ 1;
LABEL_1437:
    *(_DWORD *)(a1 + 13960) = v2351;
    goto LABEL_1438;
  }
  v2377 = 0;
  v2245 = *(unsigned __int8 *)(a1 + 13736);
  v2380 = *(unsigned __int8 *)(a1 + 13737);
  HIDWORD(v2414) = -2147450880;
  v2379 = 1 << v2245;
  v2369 = 1 << v2380;
  if (v2082 <= 0)
    v2246 = 1;
  else
    v2246 = 2;
  v2247 = (unint64_t *)(a1 + 64);
  v2373 = (char *)(v2044 + 8);
  v2374 = v2246;
  v2406 = -v2246;
  v2248 = 0;
  v2249.i64[0] = 0x800000008;
  v2249.i64[1] = 0x800000008;
  v2250.i64[0] = 0x7F0000007FLL;
  v2250.i64[1] = 0x7F0000007FLL;
  v2393 = v2090;
  v2388 = v2245;
  while (2)
  {
    v2398 = 0;
    v2370 = v2248;
    v2383 = 2 * (int)v2248;
    while (2)
    {
      LOBYTE(v2251) = 0;
      v2252 = *(_QWORD *)(a2 + 5560) + 3 * v2393 + 1910;
      v2254 = *(_DWORD *)(a1 + 24);
      v2253 = *(_DWORD *)(a1 + 28);
      v2255 = *(_QWORD *)(a1 + 16);
      while (2)
      {
        v2259 = *(unsigned __int8 *)(v2252 + (v2251 >> 1));
        if ((v2253 & 0x80000000) != 0)
        {
          v2261 = *(unint64_t **)(a1 + 40);
          v2262 = *(_QWORD *)(a1 + 32) - (_QWORD)v2261;
          v2263 = *(void (**)(_QWORD, unint64_t *, unint64_t *, uint64_t))(a1 + 48);
          if (v2263)
          {
            if (v2262 >= 9)
              v2264 = 9;
            else
              v2264 = *(_QWORD *)(a1 + 32) - (_QWORD)v2261;
            v2263(*(_QWORD *)(a1 + 56), v2261, v2247, v2264);
            v2250.i64[0] = 0x7F0000007FLL;
            v2250.i64[1] = 0x7F0000007FLL;
            v2249.i64[0] = 0x800000008;
            v2249.i64[1] = 0x800000008;
            v2261 = v2247;
          }
          v2265 = 8 * v2262;
          v2266 = 48 - v2253;
          if (8 * v2262 >= 0x41)
          {
            v2267 = (v2266 & 0xFFFFFFF8) + 8;
            v2268 = v2267 + v2253;
            v2269 = (unint64_t *)((char *)v2261 + (v2267 >> 3));
            v2255 = (bswap64(*v2261) >> (56 - (v2266 & 0xF8u)) << (v2266 & 7)) | *v2413;
            goto LABEL_1373;
          }
          v2270 = 56 - v2253 - v2265;
          if (v2270 < 0)
            v2268 = v2253;
          else
            v2268 = v2253 + 0x40000000;
          if (v2265)
            v2271 = 1;
          else
            v2271 = v2270 <= -1;
          v2272 = v2270 & ~(v2270 >> 31);
          if (!v2271 || v2266 < v2272)
          {
            v2269 = v2261;
            goto LABEL_1373;
          }
          v2274 = v2272 - 1;
          if (v2272 - 1 >= (int)(40 - v2253))
            v2274 = 40 - v2253;
          v2275 = 47 - v2253 - v2274;
          if (v2275 >= 0x78)
          {
            v2276 = (v2275 >> 3) + 1;
            v2277 = (int8x16_t)v2255;
            v2278 = 0uLL;
            v2279 = (int32x4_t)v2268;
            v2280 = vdupq_n_s32(v2266);
            v2281 = vaddq_s32(v2280, (int32x4_t)xmmword_208F3A6C0);
            v2269 = (unint64_t *)((char *)v2261 + (v2276 & 0x3FFFFFF0));
            v2282 = vaddq_s32(v2280, (int32x4_t)xmmword_208F3A6D0);
            v2266 -= 8 * (v2276 & 0x3FFFFFF0);
            v2283 = vaddq_s32(v2280, (int32x4_t)xmmword_208F3A6A0);
            v2284 = vaddq_s32(v2280, (int32x4_t)xmmword_208F3A6B0);
            v2285 = v2276 & 0x3FFFFFF0;
            v2286 = (uint8x16_t *)v2261;
            v2287 = 0uLL;
            v2288 = 0uLL;
            v2289 = 0uLL;
            v2290 = 0uLL;
            v2291 = 0uLL;
            v2292 = 0uLL;
            v2293 = 0uLL;
            v2294 = 0uLL;
            v2295 = 0uLL;
            do
            {
              v2296 = *v2286++;
              v2297 = vmovl_high_u8(v2296);
              v2298 = vmovl_high_u16(v2297);
              v2299.i64[0] = v2298.u32[0];
              v2299.i64[1] = v2298.u32[1];
              v2300 = v2299;
              v2301 = vmovl_u16(*(uint16x4_t *)v2297.i8);
              v2299.i64[0] = v2301.u32[2];
              v2299.i64[1] = v2301.u32[3];
              v2302 = v2299;
              v2303 = vmovl_u8(*(uint8x8_t *)v2296.i8);
              v2304 = vmovl_high_u16(v2303);
              v2299.i64[0] = v2304.u32[2];
              v2299.i64[1] = v2304.u32[3];
              v2305 = v2299;
              v2299.i64[0] = v2298.u32[2];
              v2299.i64[1] = v2298.u32[3];
              v2306 = v2299;
              v2299.i64[0] = v2301.u32[0];
              v2299.i64[1] = v2301.u32[1];
              v2307 = v2299;
              v2299.i64[0] = v2304.u32[0];
              v2299.i64[1] = v2304.u32[1];
              v2308 = v2299;
              v2309 = vmovl_u16(*(uint16x4_t *)v2303.i8);
              v2299.i64[0] = v2309.u32[2];
              v2299.i64[1] = v2309.u32[3];
              v2310 = v2299;
              v2299.i64[0] = v2309.u32[0];
              v2299.i64[1] = v2309.u32[1];
              v2311 = v2299;
              v2299.i64[0] = v2284.u32[0];
              v2299.i64[1] = v2284.u32[1];
              v2312 = (int8x16_t)vshlq_u64(v2311, v2299);
              v2299.i64[0] = v2284.u32[2];
              v2299.i64[1] = v2284.u32[3];
              v2313 = (int8x16_t)vshlq_u64(v2310, v2299);
              v2299.i64[0] = v2283.u32[0];
              v2299.i64[1] = v2283.u32[1];
              v2314 = (int8x16_t)vshlq_u64(v2308, v2299);
              v2299.i64[0] = v2282.u32[0];
              v2299.i64[1] = v2282.u32[1];
              v2315 = (int8x16_t)vshlq_u64(v2307, v2299);
              v2299.i64[0] = v2281.u32[2];
              v2299.i64[1] = v2281.u32[3];
              v2316 = (int8x16_t)vshlq_u64(v2306, v2299);
              v2299.i64[0] = v2283.u32[2];
              v2299.i64[1] = v2283.u32[3];
              v2317 = (int8x16_t)vshlq_u64(v2305, v2299);
              v2299.i64[0] = v2282.u32[2];
              v2299.i64[1] = v2282.u32[3];
              v2318 = (int8x16_t)vshlq_u64(v2302, v2299);
              v2299.i64[0] = v2281.u32[0];
              v2299.i64[1] = v2281.u32[1];
              v2291 = vorrq_s8((int8x16_t)vshlq_u64(v2300, v2299), v2291);
              v2290 = vorrq_s8(v2318, v2290);
              v2288 = vorrq_s8(v2317, v2288);
              v2292 = vorrq_s8(v2316, v2292);
              v2289 = vorrq_s8(v2315, v2289);
              v2287 = vorrq_s8(v2314, v2287);
              v2278 = vorrq_s8(v2313, v2278);
              v2277 = vorrq_s8(v2312, v2277);
              v2279 = vaddq_s32(v2279, v2249);
              v2293 = vaddq_s32(v2293, v2249);
              v2294 = vaddq_s32(v2294, v2249);
              v2295 = vaddq_s32(v2295, v2249);
              v2284 = vaddq_s32(v2284, v2250);
              v2283 = vaddq_s32(v2283, v2250);
              v2282 = vaddq_s32(v2282, v2250);
              v2281 = vaddq_s32(v2281, v2250);
              v2285 -= 16;
            }
            while (v2285);
            v2268 = vaddvq_s32(vaddq_s32(vaddq_s32(v2279, v2294), vaddq_s32(v2293, v2295)));
            v2319 = vorrq_s8(vorrq_s8(vorrq_s8(v2277, v2289), vorrq_s8(v2287, v2291)), vorrq_s8(vorrq_s8(v2278, v2290), vorrq_s8(v2288, v2292)));
            v2255 = (unint64_t)vorr_s8(*(int8x8_t *)v2319.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2319, v2319, 8uLL));
            if ((v2276 & 0x3FFFFFF0) == v2276)
            {
LABEL_1373:
              *(_QWORD *)(a1 + 40) += (char *)v2269 - (char *)v2261;
              v2253 = v2268;
              v2256 = ((v2254 - 1) * v2259 + 256) >> 8;
              v2260 = v2255 - (v2256 << 56);
              if (v2255 < v2256 << 56)
                goto LABEL_1374;
              goto LABEL_1341;
            }
          }
          else
          {
            v2269 = v2261;
          }
          do
          {
            v2268 += 8;
            v2320 = *(unsigned __int8 *)v2269;
            v2269 = (unint64_t *)((char *)v2269 + 1);
            v2255 |= (unint64_t)v2320 << v2266;
            v2266 -= 8;
          }
          while (v2266 >= v2272);
          goto LABEL_1373;
        }
        v2256 = ((v2254 - 1) * v2259 + 256) >> 8;
        v2260 = v2255 - (v2256 << 56);
        if (v2255 >= v2256 << 56)
        {
LABEL_1341:
          LODWORD(v2256) = *(_DWORD *)(a1 + 24) - v2256;
          v2257 = 1;
          v2255 = v2260;
          goto LABEL_1342;
        }
LABEL_1374:
        v2257 = 0;
LABEL_1342:
        v2258 = vpx_norm[v2256];
        v2254 = (_DWORD)v2256 << v2258;
        v2255 <<= v2258;
        v2253 -= v2258;
        *(_QWORD *)(a1 + 16) = v2255;
        *(_DWORD *)(a1 + 24) = (_DWORD)v2256 << v2258;
        *(_DWORD *)(a1 + 28) = v2253;
        v2251 = (char)vp9_inter_mode_tree[v2257 + (unint64_t)v2251];
        if (v2251 > 0)
          continue;
        break;
      }
      v2321 = -v2251;
      v2322 = *(_QWORD *)(a1 + 13744);
      v2323 = v2388;
      if (v2322)
      {
        v2324 = v2322 + 16 * v2393 + 4 * v2321;
        ++*(_DWORD *)(v2324 + 12384);
      }
      v2325 = v2398 + v2383;
      v2326 = 10 - v2251;
      if ((((_BYTE)v2321 + 10) & 0xFE) == 0xA)
      {
        v2327 = 0;
        v2328 = 0;
        v2329 = *(uint64_t **)(a1 + 13776);
        v2330 = 6;
        while (1)
        {
          v2333 = *v2329;
          if ((v2325 - 1) < 2)
          {
            if ((_BYTE)v2321)
            {
              dec_find_mv_refs(v2412, v2400, (v2321 + 10), *(char *)(v2333 + v2330 + 2), v2408, (uint64_t)&v2416, a3, a4, v2325);
              *(_DWORD *)((char *)&v2414 + v2327) = 0;
              v2334 = *(_DWORD *)(v2333 + 4 * v2330);
              v2332 = v2416;
              if (v2334 == v2416)
              {
                v2332 = v2417;
                if (v2334 == v2417)
                  goto LABEL_1382;
              }
              goto LABEL_1381;
            }
            v2331 = (int *)(v2333 + 4 * v2328 + 24);
          }
          else if ((_DWORD)v2325 == 3)
          {
            if ((_BYTE)v2321)
            {
              *(_DWORD *)((char *)&v2414 + v2327) = 0;
              v2335 = *(_DWORD *)(v2333 + v2327 + 48);
              v2332 = *(_DWORD *)(v2333 + v2327 + 36);
              if (v2335 == v2332)
              {
                v2332 = *(_DWORD *)(v2333 + 4 * v2330);
                if (v2335 == v2332)
                {
                  dec_find_mv_refs(v2412, v2400, (v2321 + 10), *(char *)(v2333 + v2330 + 2), v2408, (uint64_t)&v2416, a3, a4, 3u);
                  v2332 = v2416;
                  if (v2335 == v2416)
                  {
                    v2332 = v2417;
                    if (v2335 == v2417)
                      goto LABEL_1382;
                  }
                }
              }
              goto LABEL_1381;
            }
            v2331 = (int *)(v2333 + v2327 + 48);
          }
          else
          {
            if ((_DWORD)v2325)
              goto LABEL_1382;
            v2331 = &v2416
                  + dec_find_mv_refs(v2412, v2400, (v2321 + 10), *(char *)(v2333 + v2330 + 2), v2408, (uint64_t)&v2416, a3, a4, 0)- 1;
          }
          v2332 = *v2331;
LABEL_1381:
          *(_DWORD *)((char *)&v2414 + v2327) = v2332;
LABEL_1382:
          ++v2328;
          ++v2330;
          v2327 += 4;
          if (v2406 + v2330 == 6)
          {
            v2337 = (uint64_t)v2400;
            v2323 = v2388;
            goto LABEL_1425;
          }
        }
      }
      v2336 = (v2321 + 10) == 13 && v2377 == 0;
      v2337 = (uint64_t)v2400;
      if (v2336)
      {
        v2338 = &v2415;
        v2339 = v2373;
        v2340 = v2374;
        do
        {
          v2341 = *v2339++;
          dec_find_mv_refs(v2412, v2400, 13, v2341, v2408, (uint64_t)&v2416, a3, a4, 0xFFFFFFFF);
          if ((v2416 & 0x8000u) == 0)
            LOWORD(v2342) = v2416;
          else
            v2342 = -(__int16)v2416;
          if (!v2385 || (unsigned __int16)v2342 > 0x3Fu)
            goto LABEL_1413;
          LOWORD(v2343) = HIWORD(v2416);
          if (v2416 < 0)
            v2343 = -SHIWORD(v2416);
          if ((unsigned __int16)v2343 >= 0x40u)
          {
LABEL_1413:
            if ((v2416 & 1) != 0)
            {
              if ((__int16)v2416 < 1)
                v2344 = v2416 + 1;
              else
                v2344 = v2416 - 1;
              LOWORD(v2416) = v2344;
            }
            if ((v2416 & 0x10000) != 0)
            {
              if (SHIWORD(v2416) < 1)
                v2345 = HIWORD(v2416) + 1;
              else
                v2345 = HIWORD(v2416) - 1;
              HIWORD(v2416) = v2345;
            }
          }
          *(_DWORD *)v2338 = v2416;
          v2338 = (uint64_t *)((char *)v2338 + 4);
          --v2340;
        }
        while (v2340);
        v2377 = 1;
LABEL_1425:
        v2247 = (unint64_t *)(a1 + 64);
      }
      v2044 = v2399;
      v2346 = &v2399[12 * v2325];
      result = assign_mv(v2412, v2337, v2326, (_QWORD *)v2346 + 3, (uint64_t)&v2415, &v2414, v2384, v2385, v2413);
      if (!(_DWORD)result)
      {
        v2351 = *(_DWORD *)(a1 + 13960) | 1;
        goto LABEL_1437;
      }
      v2347 = v2346 + 20;
      if (v2380 == 1)
      {
        v2348 = &v2399[12 * v2325];
        *(_QWORD *)(v2348 + 44) = *v2347;
        *((_DWORD *)v2348 + 13) = *((_DWORD *)v2346 + 7);
        v2249.i64[0] = 0x800000008;
        v2249.i64[1] = 0x800000008;
        v2250.i64[0] = 0x7F0000007FLL;
        v2250.i64[1] = 0x7F0000007FLL;
        if (v2323 == 1)
        {
LABEL_1431:
          v2349 = &v2399[12 * v2325];
          *((_QWORD *)v2349 + 4) = *v2347;
          *((_DWORD *)v2349 + 10) = *((_DWORD *)v2346 + 7);
        }
      }
      else
      {
        v2249.i64[0] = 0x800000008;
        v2249.i64[1] = 0x800000008;
        v2250.i64[0] = 0x7F0000007FLL;
        v2250.i64[1] = 0x7F0000007FLL;
        if (v2323 == 1)
          goto LABEL_1431;
      }
      v2398 += v2379;
      if (v2398 < 2)
        continue;
      break;
    }
    v2248 = v2370 + v2369;
    if (v2370 + v2369 < 2)
      continue;
    break;
  }
  v2399[1] = v2326;
  *(_QWORD *)(v2399 + 12) = *(_QWORD *)(v2399 + 60);
LABEL_1438:
  v13 = a2;
  v2084 = v2378;
  v2085 = v2376;
LABEL_1439:
  if (v2084 >= 1)
  {
    v2352 = 0;
    v2353 = v2372 + 12 * v2371 + 12 * a4;
    v2354 = *((_WORD *)v2044 + 4);
    v2355 = *(_QWORD *)(v2044 + 12);
    do
    {
      if (v2085 >= 1)
      {
        v2356 = (_WORD *)(v2353 + 8);
        v2357 = v2085;
        do
        {
          *v2356 = v2354;
          *((_QWORD *)v2356 - 1) = v2355;
          v2356 += 6;
          --v2357;
        }
        while (v2357);
      }
      v2353 += 12 * *(int *)(v13 + 1976);
      ++v2352;
    }
    while (v2352 != v2084);
  }
  return result;
}

uint64_t read_tx_size(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  unsigned int v26;
  unint64_t *v27;
  unint64_t v28;
  void (*v29)(_QWORD);
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  signed int v33;
  signed int v34;
  unsigned int v35;
  unint64_t *v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  unsigned int v41;
  int v42;
  int8x16_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  uint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  uint64_t v57;
  uint8x16_t *v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  uint8x16_t v65;
  uint16x8_t v66;
  uint32x4_t v67;
  uint64x2_t v68;
  uint64x2_t v69;
  uint32x4_t v70;
  uint64x2_t v71;
  uint16x8_t v72;
  uint32x4_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  uint64x2_t v76;
  uint64x2_t v77;
  uint32x4_t v78;
  uint64x2_t v79;
  uint64x2_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  unsigned int v89;
  int v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  int v95;
  int v96;
  unint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  void (*v100)(_QWORD);
  uint64_t v101;
  unsigned int v102;
  unsigned __int8 *v103;
  signed int v104;
  signed int v105;
  unint64_t *v106;
  int v107;
  BOOL v108;
  int v109;
  int v110;
  unsigned int v111;
  signed int v112;
  int8x16_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int8x16_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  uint64_t v123;
  int8x16_t v124;
  int8x16_t v125;
  int8x16_t v126;
  uint64_t v127;
  uint8x16_t *v128;
  int8x16_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int32x4_t v132;
  int32x4_t v133;
  int32x4_t v134;
  uint8x16_t v135;
  uint16x8_t v136;
  uint32x4_t v137;
  uint64x2_t v138;
  uint64x2_t v139;
  uint32x4_t v140;
  uint64x2_t v141;
  uint16x8_t v142;
  uint32x4_t v143;
  uint64x2_t v144;
  uint64x2_t v145;
  uint64x2_t v146;
  uint64x2_t v147;
  uint32x4_t v148;
  uint64x2_t v149;
  uint64x2_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t v157;
  int8x16_t v158;
  unsigned int v159;
  int v160;
  int v161;
  unint64_t v162;
  unsigned int v163;
  uint64_t v164;
  unint64_t v165;
  int v166;
  unint64_t *v167;
  uint64_t v168;
  unint64_t v169;
  void (*v170)(_QWORD);
  uint64_t v171;
  unsigned int v172;
  signed int v173;
  signed int v174;
  unint64_t *v175;
  int v176;
  BOOL v177;
  int v178;
  int v179;
  unsigned int v180;
  signed int v181;
  int8x16_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int8x16_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  uint64_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  uint64_t v196;
  uint8x16_t *v197;
  int8x16_t v198;
  int8x16_t v199;
  int8x16_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  uint8x16_t v204;
  uint16x8_t v205;
  uint32x4_t v206;
  uint64x2_t v207;
  uint64x2_t v208;
  uint32x4_t v209;
  uint64x2_t v210;
  uint16x8_t v211;
  uint32x4_t v212;
  uint64x2_t v213;
  uint64x2_t v214;
  uint64x2_t v215;
  uint64x2_t v216;
  uint32x4_t v217;
  uint64x2_t v218;
  uint64x2_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int8x16_t v227;
  unsigned int v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  uint64_t v237;
  uint64_t v238;

  v4 = *(unsigned int *)(a1 + 1328);
  v237 = ***(unsigned __int8 ***)(a2 + 448);
  v5 = max_txsize_lookup[v237];
  if (!a3 || ((_DWORD)v4 == 4 ? (v6 = v237 >= 3) : (v6 = 0), !v6))
  {
    v26 = tx_mode_to_biggest_tx_size[v4];
    if (v5 >= v26)
      return v26;
    else
      return max_txsize_lookup[v237];
  }
  v7 = a4;
  v9 = *(_QWORD *)(a2 + 456);
  v8 = *(_QWORD *)(a2 + 464);
  v10 = max_txsize_lookup[v237];
  if (v8)
  {
    v10 = max_txsize_lookup[v237];
    if (!*(_BYTE *)(v8 + 3))
      v10 = *(unsigned __int8 *)(v8 + 2);
  }
  v11 = v10;
  if (v9)
  {
    v11 = max_txsize_lookup[v237];
    if (!*(_BYTE *)(v9 + 3))
      v11 = *(unsigned __int8 *)(v9 + 2);
  }
  v12 = *(_QWORD *)(a2 + 416);
  if (v8)
    v13 = v10;
  else
    v13 = v11;
  v14 = v13 + v11;
  v15 = *(_QWORD *)(a1 + 4904);
  v16 = v15 + ((v14 > v5) | (2 * (v14 > v5))) + 1955;
  v17 = v15 + 2 * (v14 > v5) + 1961;
  if (v14 > v5)
    ++v15;
  v18 = (unsigned __int8 *)(v15 + 1965);
  if (v5 != 1)
    v18 = 0;
  if (v5 == 2)
    v18 = (unsigned __int8 *)v17;
  if (v5 == 3)
    v19 = (unsigned __int8 *)v16;
  else
    v19 = v18;
  v20 = *(_DWORD *)(a4 + 12);
  v21 = ((*(_DWORD *)(a4 + 8) - 1) * *v19 + 256) >> 8;
  v22 = *(_QWORD *)a4;
  if ((v20 & 0x80000000) != 0)
  {
    v27 = *(unint64_t **)(a4 + 24);
    v28 = 8 * (*(_QWORD *)(a4 + 16) - (_QWORD)v27);
    v29 = *(void (**)(_QWORD))(a4 + 32);
    if (v29)
    {
      v30 = v12;
      v31 = v14;
      v32 = v19;
      v29(*(_QWORD *)(a4 + 40));
      v19 = v32;
      v14 = v31;
      v12 = v30;
      v27 = (unint64_t *)(v7 + 48);
    }
    v33 = 48 - v20;
    if (v28 < 0x41)
    {
      v37 = 56 - v20 - v28;
      if (v37 < 0)
        v35 = v20;
      else
        v35 = v20 + 0x40000000;
      if (v28)
        v38 = 1;
      else
        v38 = v37 <= -1;
      v7 = a4;
      if (v38 && (v39 = v37 & ~(v37 >> 31), v33 >= v39))
      {
        v40 = v39 - 1;
        if (v39 - 1 >= (int)(40 - v20))
          v40 = 40 - v20;
        v41 = 47 - v20 - v40;
        v36 = v27;
        v42 = 48 - v20;
        if (v41 < 0x78)
          goto LABEL_121;
        v43 = (int8x16_t)v22;
        v44 = (int32x4_t)v35;
        v45 = vdupq_n_s32(v33);
        v46 = 0uLL;
        v47 = vaddq_s32(v45, (int32x4_t)xmmword_208F3A6C0);
        v48 = vaddq_s32(v45, (int32x4_t)xmmword_208F3A6D0);
        v49 = vaddq_s32(v45, (int32x4_t)xmmword_208F3A6A0);
        v50 = vaddq_s32(v45, (int32x4_t)xmmword_208F3A6B0);
        v51.i64[0] = 0x800000008;
        v51.i64[1] = 0x800000008;
        v52.i64[0] = 0x7F0000007FLL;
        v52.i64[1] = 0x7F0000007FLL;
        v53 = (v41 >> 3) + 1;
        v54 = 0uLL;
        v55 = 0uLL;
        v56 = 0uLL;
        v36 = (unint64_t *)((char *)v27 + (v53 & 0x3FFFFFF0));
        v42 = v33 - 8 * (v53 & 0x3FFFFFF0);
        v57 = v53 & 0x3FFFFFF0;
        v58 = (uint8x16_t *)v27;
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        do
        {
          v65 = *v58++;
          v66 = vmovl_high_u8(v65);
          v67 = vmovl_high_u16(v66);
          v68.i64[0] = v67.u32[0];
          v68.i64[1] = v67.u32[1];
          v69 = v68;
          v70 = vmovl_u16(*(uint16x4_t *)v66.i8);
          v68.i64[0] = v70.u32[2];
          v68.i64[1] = v70.u32[3];
          v71 = v68;
          v72 = vmovl_u8(*(uint8x8_t *)v65.i8);
          v73 = vmovl_high_u16(v72);
          v68.i64[0] = v73.u32[2];
          v68.i64[1] = v73.u32[3];
          v74 = v68;
          v68.i64[0] = v67.u32[2];
          v68.i64[1] = v67.u32[3];
          v75 = v68;
          v68.i64[0] = v70.u32[0];
          v68.i64[1] = v70.u32[1];
          v76 = v68;
          v68.i64[0] = v73.u32[0];
          v68.i64[1] = v73.u32[1];
          v77 = v68;
          v78 = vmovl_u16(*(uint16x4_t *)v72.i8);
          v68.i64[0] = v78.u32[2];
          v68.i64[1] = v78.u32[3];
          v79 = v68;
          v68.i64[0] = v78.u32[0];
          v68.i64[1] = v78.u32[1];
          v80 = v68;
          v68.i64[0] = v50.u32[0];
          v68.i64[1] = v50.u32[1];
          v81 = (int8x16_t)vshlq_u64(v80, v68);
          v68.i64[0] = v50.u32[2];
          v68.i64[1] = v50.u32[3];
          v82 = (int8x16_t)vshlq_u64(v79, v68);
          v68.i64[0] = v49.u32[0];
          v68.i64[1] = v49.u32[1];
          v83 = (int8x16_t)vshlq_u64(v77, v68);
          v68.i64[0] = v48.u32[0];
          v68.i64[1] = v48.u32[1];
          v84 = (int8x16_t)vshlq_u64(v76, v68);
          v68.i64[0] = v47.u32[2];
          v68.i64[1] = v47.u32[3];
          v85 = (int8x16_t)vshlq_u64(v75, v68);
          v68.i64[0] = v49.u32[2];
          v68.i64[1] = v49.u32[3];
          v86 = (int8x16_t)vshlq_u64(v74, v68);
          v68.i64[0] = v48.u32[2];
          v68.i64[1] = v48.u32[3];
          v87 = (int8x16_t)vshlq_u64(v71, v68);
          v68.i64[0] = v47.u32[0];
          v68.i64[1] = v47.u32[1];
          v60 = vorrq_s8((int8x16_t)vshlq_u64(v69, v68), v60);
          v59 = vorrq_s8(v87, v59);
          v55 = vorrq_s8(v86, v55);
          v61 = vorrq_s8(v85, v61);
          v56 = vorrq_s8(v84, v56);
          v54 = vorrq_s8(v83, v54);
          v46 = vorrq_s8(v82, v46);
          v43 = vorrq_s8(v81, v43);
          v44 = vaddq_s32(v44, v51);
          v62 = vaddq_s32(v62, v51);
          v63 = vaddq_s32(v63, v51);
          v64 = vaddq_s32(v64, v51);
          v50 = vaddq_s32(v50, v52);
          v49 = vaddq_s32(v49, v52);
          v48 = vaddq_s32(v48, v52);
          v47 = vaddq_s32(v47, v52);
          v57 -= 16;
        }
        while (v57);
        v35 = vaddvq_s32(vaddq_s32(vaddq_s32(v44, v63), vaddq_s32(v62, v64)));
        v88 = vorrq_s8(vorrq_s8(vorrq_s8(v43, v56), vorrq_s8(v54, v60)), vorrq_s8(vorrq_s8(v46, v59), vorrq_s8(v55, v61)));
        v22 = (unint64_t)vorr_s8(*(int8x8_t *)v88.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL));
        if ((v53 & 0x3FFFFFF0) != v53)
        {
LABEL_121:
          do
          {
            v35 += 8;
            v89 = *(unsigned __int8 *)v36;
            v36 = (unint64_t *)((char *)v36 + 1);
            v22 |= (unint64_t)v89 << v42;
            v42 -= 8;
          }
          while (v42 >= v39);
        }
      }
      else
      {
        v36 = v27;
      }
    }
    else
    {
      v34 = (v33 & 0xFFFFFFF8) + 8;
      v35 = v34 + v20;
      v36 = (unint64_t *)((char *)v27 + (v34 >> 3));
      v7 = a4;
      v22 = (bswap64(*v27) >> (56 - (v33 & 0xF8u)) << (v33 & 7)) | *(_QWORD *)a4;
    }
    *(_QWORD *)(v7 + 24) += (char *)v36 - (char *)v27;
    v20 = v35;
    v23 = v21 << 56;
    v24 = v22 - (v21 << 56);
    if (v22 >= v21 << 56)
      goto LABEL_27;
LABEL_54:
    result = 0;
    v24 = v22;
    goto LABEL_55;
  }
  v23 = v21 << 56;
  v24 = v22 - (v21 << 56);
  if (v22 < v21 << 56)
    goto LABEL_54;
LABEL_27:
  LODWORD(v21) = *(_DWORD *)(v7 + 8) - v21;
  result = 1;
LABEL_55:
  v90 = vpx_norm[v21];
  v91 = v24 << v90;
  v92 = v20 - v90;
  *(_QWORD *)v7 = v24 << v90;
  *(_DWORD *)(v7 + 8) = (_DWORD)v21 << v90;
  *(_DWORD *)(v7 + 12) = v20 - v90;
  if ((unint64_t)(v237 - 6) > 6 || v22 < v23)
    goto LABEL_112;
  v93 = ((((_DWORD)v21 << v90) - 1) * v19[1] + 256) >> 8;
  if ((v92 & 0x80000000) != 0)
  {
    v97 = *(unint64_t **)(v7 + 24);
    v98 = *(_QWORD *)(v7 + 16) - (_QWORD)v97;
    v99 = 8 * v98;
    v100 = *(void (**)(_QWORD))(v7 + 32);
    if (v100)
    {
      v232 = 8 * v98;
      v233 = ((((_DWORD)v21 << v90) - 1) * v19[1] + 256) >> 8;
      v234 = result;
      v101 = v12;
      v102 = v14;
      v103 = v19;
      v100(*(_QWORD *)(v7 + 40));
      v99 = v232;
      v93 = v233;
      v19 = v103;
      LODWORD(result) = v234;
      v14 = v102;
      v12 = v101;
      v97 = (unint64_t *)(v7 + 48);
    }
    v104 = 48 - v92;
    if (v99 < 0x41)
    {
      v107 = 56 - v99 - v92;
      if (v107 >= 0)
        v92 += 0x40000000;
      if (v99)
        v108 = 1;
      else
        v108 = v107 <= -1;
      if (v108 && (v109 = v107 & ~(v107 >> 31), v104 >= v109))
      {
        v110 = v90 - v20 + 40;
        if (v110 >= v109 - 1)
          v110 = v109 - 1;
        v111 = v90 - v20 - v110 + 47;
        v106 = v97;
        v112 = v104;
        if (v111 < 0x78)
          goto LABEL_122;
        v113 = (int8x16_t)v91;
        v114 = (int32x4_t)v92;
        v115 = vdupq_n_s32(v104);
        v116 = 0uLL;
        v117 = vaddq_s32(v115, (int32x4_t)xmmword_208F3A6C0);
        v118 = vaddq_s32(v115, (int32x4_t)xmmword_208F3A6D0);
        v119 = vaddq_s32(v115, (int32x4_t)xmmword_208F3A6A0);
        v120 = vaddq_s32(v115, (int32x4_t)xmmword_208F3A6B0);
        v121.i64[0] = 0x800000008;
        v121.i64[1] = 0x800000008;
        v122.i64[0] = 0x7F0000007FLL;
        v122.i64[1] = 0x7F0000007FLL;
        v123 = (v111 >> 3) + 1;
        v124 = 0uLL;
        v125 = 0uLL;
        v126 = 0uLL;
        v106 = (unint64_t *)((char *)v97 + (v123 & 0x3FFFFFF0));
        v112 = v104 - 8 * (v123 & 0x3FFFFFF0);
        v127 = v123 & 0x3FFFFFF0;
        v128 = (uint8x16_t *)v97;
        v129 = 0uLL;
        v130 = 0uLL;
        v131 = 0uLL;
        v132 = 0uLL;
        v133 = 0uLL;
        v134 = 0uLL;
        do
        {
          v135 = *v128++;
          v136 = vmovl_high_u8(v135);
          v137 = vmovl_high_u16(v136);
          v138.i64[0] = v137.u32[0];
          v138.i64[1] = v137.u32[1];
          v139 = v138;
          v140 = vmovl_u16(*(uint16x4_t *)v136.i8);
          v138.i64[0] = v140.u32[2];
          v138.i64[1] = v140.u32[3];
          v141 = v138;
          v142 = vmovl_u8(*(uint8x8_t *)v135.i8);
          v143 = vmovl_high_u16(v142);
          v138.i64[0] = v143.u32[2];
          v138.i64[1] = v143.u32[3];
          v144 = v138;
          v138.i64[0] = v137.u32[2];
          v138.i64[1] = v137.u32[3];
          v145 = v138;
          v138.i64[0] = v140.u32[0];
          v138.i64[1] = v140.u32[1];
          v146 = v138;
          v138.i64[0] = v143.u32[0];
          v138.i64[1] = v143.u32[1];
          v147 = v138;
          v148 = vmovl_u16(*(uint16x4_t *)v142.i8);
          v138.i64[0] = v148.u32[2];
          v138.i64[1] = v148.u32[3];
          v149 = v138;
          v138.i64[0] = v148.u32[0];
          v138.i64[1] = v148.u32[1];
          v150 = v138;
          v138.i64[0] = v120.u32[0];
          v138.i64[1] = v120.u32[1];
          v151 = (int8x16_t)vshlq_u64(v150, v138);
          v138.i64[0] = v120.u32[2];
          v138.i64[1] = v120.u32[3];
          v152 = (int8x16_t)vshlq_u64(v149, v138);
          v138.i64[0] = v119.u32[0];
          v138.i64[1] = v119.u32[1];
          v153 = (int8x16_t)vshlq_u64(v147, v138);
          v138.i64[0] = v118.u32[0];
          v138.i64[1] = v118.u32[1];
          v154 = (int8x16_t)vshlq_u64(v146, v138);
          v138.i64[0] = v117.u32[2];
          v138.i64[1] = v117.u32[3];
          v155 = (int8x16_t)vshlq_u64(v145, v138);
          v138.i64[0] = v119.u32[2];
          v138.i64[1] = v119.u32[3];
          v156 = (int8x16_t)vshlq_u64(v144, v138);
          v138.i64[0] = v118.u32[2];
          v138.i64[1] = v118.u32[3];
          v157 = (int8x16_t)vshlq_u64(v141, v138);
          v138.i64[0] = v117.u32[0];
          v138.i64[1] = v117.u32[1];
          v130 = vorrq_s8((int8x16_t)vshlq_u64(v139, v138), v130);
          v129 = vorrq_s8(v157, v129);
          v125 = vorrq_s8(v156, v125);
          v131 = vorrq_s8(v155, v131);
          v126 = vorrq_s8(v154, v126);
          v124 = vorrq_s8(v153, v124);
          v116 = vorrq_s8(v152, v116);
          v113 = vorrq_s8(v151, v113);
          v114 = vaddq_s32(v114, v121);
          v132 = vaddq_s32(v132, v121);
          v133 = vaddq_s32(v133, v121);
          v134 = vaddq_s32(v134, v121);
          v120 = vaddq_s32(v120, v122);
          v119 = vaddq_s32(v119, v122);
          v118 = vaddq_s32(v118, v122);
          v117 = vaddq_s32(v117, v122);
          v127 -= 16;
        }
        while (v127);
        v92 = vaddvq_s32(vaddq_s32(vaddq_s32(v114, v133), vaddq_s32(v132, v134)));
        v158 = vorrq_s8(vorrq_s8(vorrq_s8(v113, v126), vorrq_s8(v124, v130)), vorrq_s8(vorrq_s8(v116, v129), vorrq_s8(v125, v131)));
        v91 = (unint64_t)vorr_s8(*(int8x8_t *)v158.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL));
        if ((v123 & 0x3FFFFFF0) != v123)
        {
LABEL_122:
          do
          {
            v92 += 8;
            v159 = *(unsigned __int8 *)v106;
            v106 = (unint64_t *)((char *)v106 + 1);
            v91 |= (unint64_t)v159 << v112;
            v112 -= 8;
          }
          while (v112 >= v109);
        }
      }
      else
      {
        v106 = v97;
      }
    }
    else
    {
      v105 = (v104 & 0xFFFFFFF8) + 8;
      v92 += v105;
      v106 = (unint64_t *)((char *)v97 + (v105 >> 3));
      v91 = (bswap64(*v97) >> (56 - (v104 & 0xF8u)) << (v104 & 7)) | *(_QWORD *)v7;
    }
    *(_QWORD *)(v7 + 24) += (char *)v106 - (char *)v97;
    v94 = v91 - (v93 << 56);
    if (v91 < v93 << 56)
      goto LABEL_59;
LABEL_82:
    v96 = *(_DWORD *)(v7 + 8) - v93;
    v95 = 1;
    v91 = v94;
    goto LABEL_83;
  }
  v94 = v91 - (v93 << 56);
  if (v91 >= v93 << 56)
    goto LABEL_82;
LABEL_59:
  v95 = 0;
  v96 = v93;
LABEL_83:
  v160 = vpx_norm[v96];
  v161 = v96 << v160;
  v162 = v91 << v160;
  v163 = v92 - v160;
  *(_QWORD *)v7 = v91 << v160;
  *(_DWORD *)(v7 + 8) = v161;
  *(_DWORD *)(v7 + 12) = v92 - v160;
  result = (v95 + result);
  if ((unint64_t)(v237 - 9) <= 3 && (_DWORD)result != 1)
  {
    v164 = ((v161 - 1) * v19[2] + 256) >> 8;
    if ((v163 & 0x80000000) != 0)
    {
      v167 = *(unint64_t **)(v7 + 24);
      v168 = *(_QWORD *)(v7 + 16) - (_QWORD)v167;
      v169 = 8 * v168;
      v170 = *(void (**)(_QWORD))(v7 + 32);
      if (v170)
      {
        v238 = 8 * v168;
        v235 = result;
        v171 = v12;
        v172 = v14;
        v170(*(_QWORD *)(v7 + 40));
        v169 = v238;
        LODWORD(result) = v235;
        v14 = v172;
        v12 = v171;
        v167 = (unint64_t *)(v7 + 48);
      }
      v173 = 48 - v163;
      if (v169 < 0x41)
      {
        v176 = 56 - v169 - v163;
        if (v176 >= 0)
          v163 += 0x40000000;
        if (v169)
          v177 = 1;
        else
          v177 = v176 <= -1;
        if (v177 && (v178 = v176 & ~(v176 >> 31), v173 >= v178))
        {
          v179 = v160 - v92 + 40;
          if (v179 >= v178 - 1)
            v179 = v178 - 1;
          v180 = v160 - v92 - v179 + 47;
          v175 = v167;
          v181 = v173;
          if (v180 < 0x78)
            goto LABEL_123;
          v182 = (int8x16_t)v162;
          v183 = (int32x4_t)v163;
          v184 = vdupq_n_s32(v173);
          v185 = 0uLL;
          v186 = vaddq_s32(v184, (int32x4_t)xmmword_208F3A6C0);
          v187 = vaddq_s32(v184, (int32x4_t)xmmword_208F3A6D0);
          v188 = vaddq_s32(v184, (int32x4_t)xmmword_208F3A6A0);
          v189 = vaddq_s32(v184, (int32x4_t)xmmword_208F3A6B0);
          v190.i64[0] = 0x800000008;
          v190.i64[1] = 0x800000008;
          v191.i64[0] = 0x7F0000007FLL;
          v191.i64[1] = 0x7F0000007FLL;
          v192 = (v180 >> 3) + 1;
          v193 = 0uLL;
          v194 = 0uLL;
          v195 = 0uLL;
          v175 = (unint64_t *)((char *)v167 + (v192 & 0x3FFFFFF0));
          v181 = v173 - 8 * (v192 & 0x3FFFFFF0);
          v196 = v192 & 0x3FFFFFF0;
          v197 = (uint8x16_t *)v167;
          v198 = 0uLL;
          v199 = 0uLL;
          v200 = 0uLL;
          v201 = 0uLL;
          v202 = 0uLL;
          v203 = 0uLL;
          do
          {
            v204 = *v197++;
            v205 = vmovl_high_u8(v204);
            v206 = vmovl_high_u16(v205);
            v207.i64[0] = v206.u32[0];
            v207.i64[1] = v206.u32[1];
            v208 = v207;
            v209 = vmovl_u16(*(uint16x4_t *)v205.i8);
            v207.i64[0] = v209.u32[2];
            v207.i64[1] = v209.u32[3];
            v210 = v207;
            v211 = vmovl_u8(*(uint8x8_t *)v204.i8);
            v212 = vmovl_high_u16(v211);
            v207.i64[0] = v212.u32[2];
            v207.i64[1] = v212.u32[3];
            v213 = v207;
            v207.i64[0] = v206.u32[2];
            v207.i64[1] = v206.u32[3];
            v214 = v207;
            v207.i64[0] = v209.u32[0];
            v207.i64[1] = v209.u32[1];
            v215 = v207;
            v207.i64[0] = v212.u32[0];
            v207.i64[1] = v212.u32[1];
            v216 = v207;
            v217 = vmovl_u16(*(uint16x4_t *)v211.i8);
            v207.i64[0] = v217.u32[2];
            v207.i64[1] = v217.u32[3];
            v218 = v207;
            v207.i64[0] = v217.u32[0];
            v207.i64[1] = v217.u32[1];
            v219 = v207;
            v207.i64[0] = v189.u32[0];
            v207.i64[1] = v189.u32[1];
            v220 = (int8x16_t)vshlq_u64(v219, v207);
            v207.i64[0] = v189.u32[2];
            v207.i64[1] = v189.u32[3];
            v221 = (int8x16_t)vshlq_u64(v218, v207);
            v207.i64[0] = v188.u32[0];
            v207.i64[1] = v188.u32[1];
            v222 = (int8x16_t)vshlq_u64(v216, v207);
            v207.i64[0] = v187.u32[0];
            v207.i64[1] = v187.u32[1];
            v223 = (int8x16_t)vshlq_u64(v215, v207);
            v207.i64[0] = v186.u32[2];
            v207.i64[1] = v186.u32[3];
            v224 = (int8x16_t)vshlq_u64(v214, v207);
            v207.i64[0] = v188.u32[2];
            v207.i64[1] = v188.u32[3];
            v225 = (int8x16_t)vshlq_u64(v213, v207);
            v207.i64[0] = v187.u32[2];
            v207.i64[1] = v187.u32[3];
            v226 = (int8x16_t)vshlq_u64(v210, v207);
            v207.i64[0] = v186.u32[0];
            v207.i64[1] = v186.u32[1];
            v199 = vorrq_s8((int8x16_t)vshlq_u64(v208, v207), v199);
            v198 = vorrq_s8(v226, v198);
            v194 = vorrq_s8(v225, v194);
            v200 = vorrq_s8(v224, v200);
            v195 = vorrq_s8(v223, v195);
            v193 = vorrq_s8(v222, v193);
            v185 = vorrq_s8(v221, v185);
            v182 = vorrq_s8(v220, v182);
            v183 = vaddq_s32(v183, v190);
            v201 = vaddq_s32(v201, v190);
            v202 = vaddq_s32(v202, v190);
            v203 = vaddq_s32(v203, v190);
            v189 = vaddq_s32(v189, v191);
            v188 = vaddq_s32(v188, v191);
            v187 = vaddq_s32(v187, v191);
            v186 = vaddq_s32(v186, v191);
            v196 -= 16;
          }
          while (v196);
          v163 = vaddvq_s32(vaddq_s32(vaddq_s32(v183, v202), vaddq_s32(v201, v203)));
          v227 = vorrq_s8(vorrq_s8(vorrq_s8(v182, v195), vorrq_s8(v193, v199)), vorrq_s8(vorrq_s8(v185, v198), vorrq_s8(v194, v200)));
          v162 = (unint64_t)vorr_s8(*(int8x8_t *)v227.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v227, v227, 8uLL));
          if ((v192 & 0x3FFFFFF0) != v192)
          {
LABEL_123:
            do
            {
              v163 += 8;
              v228 = *(unsigned __int8 *)v175;
              v175 = (unint64_t *)((char *)v175 + 1);
              v162 |= (unint64_t)v228 << v181;
              v181 -= 8;
            }
            while (v181 >= v178);
          }
        }
        else
        {
          v175 = v167;
        }
      }
      else
      {
        v174 = (v173 & 0xFFFFFFF8) + 8;
        v163 += v174;
        v175 = (unint64_t *)((char *)v167 + (v174 >> 3));
        v162 = (bswap64(*v167) >> (56 - (v173 & 0xF8u)) << (v173 & 7)) | *(_QWORD *)v7;
      }
      *(_QWORD *)(v7 + 24) += (char *)v175 - (char *)v167;
      v165 = v162 - (v164 << 56);
      if (v162 < v164 << 56)
        goto LABEL_87;
    }
    else
    {
      v165 = v162 - (v164 << 56);
      if (v162 < v164 << 56)
      {
LABEL_87:
        v166 = 0;
LABEL_111:
        v229 = vpx_norm[v164];
        *(_QWORD *)v7 = v162 << v229;
        *(_DWORD *)(v7 + 8) = (_DWORD)v164 << v229;
        *(_DWORD *)(v7 + 12) = v163 - v229;
        result = (v166 + result);
        goto LABEL_112;
      }
    }
    LODWORD(v164) = *(_DWORD *)(v7 + 8) - v164;
    v166 = 1;
    v162 = v165;
    goto LABEL_111;
  }
LABEL_112:
  if (v12)
  {
    if (v5 == 3)
    {
      v230 = v12 + 16 * (v14 > 3);
      v231 = 12688;
    }
    else if (v5 == 2)
    {
      v230 = v12 + 12 * (v14 > 2);
      v231 = 12720;
    }
    else
    {
      v230 = v12 + 8 * (v14 > v5);
      v231 = 12744;
    }
    ++*(_DWORD *)(v230 + v231 + 4 * result);
  }
  return result;
}

uint64_t dec_find_mv_refs(uint64_t a1, _DWORD *a2, int a3, int a4, _DWORD *a5, uint64_t a6, int a7, int a8, unsigned int a9)
{
  unsigned __int16 *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  char v16;
  int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t i;
  int v45;
  int v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  unsigned int v56;
  int v57;
  int v58;
  uint64_t v59;
  int v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  int v66;
  unsigned int v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  signed int v73;
  signed int v74;
  signed int v75;
  signed int v76;
  uint64_t result;
  uint64_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  uint64_t v86;
  __int16 *v87;
  signed int v88;
  __int16 v89;
  __int16 v90;
  signed int v91;
  __int16 v92;
  __int16 v93;
  int16x8x2_t v94;
  int16x8x2_t v95;

  if (*(_DWORD *)(a1 + 1504))
  {
    v9 = (unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8) + 12 * *(_DWORD *)(a1 + 1320) * a7 + 12 * a8);
    *(_QWORD *)a6 = 0;
    if ((a9 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v9 = 0;
    *(_QWORD *)a6 = 0;
    if ((a9 & 0x80000000) == 0)
    {
LABEL_3:
      v10 = (_DWORD *)(a1 + 1312);
      v11 = a2 + 108;
      v12 = a2 + 109;
      v13 = a2 + 112;
      v14 = a2 + 110;
      v15 = 0;
      if (*a5 + a7 < 0)
      {
        v18 = 0;
        v16 = 1;
      }
      else
      {
        v16 = 1;
        if (*a5 + a7 >= *v10)
        {
          v18 = 0;
        }
        else
        {
          v17 = a5[1];
          v18 = 0;
          if (v17 + a8 >= *v11)
          {
            if (v17 + a8 >= *v12)
            {
              v15 = 0;
              v18 = 0;
            }
            else
            {
              v19 = *(unsigned __int8 **)(*v13 + 8 * (v17 + *v14 * *a5));
              if (v19[8] == a4)
              {
                if (*v19 > 2u)
                {
                  *(_DWORD *)a6 = *((_DWORD *)v19 + 3);
                  v15 = 1;
                  if (a3 != 11)
                    goto LABEL_174;
                }
                else
                {
                  *(_DWORD *)a6 = *(_DWORD *)&v19[12 * idx_n_column_to_subblock[2 * a9 + (v17 == 0)] + 24];
                  v15 = 1;
                  if (a3 != 11)
                    goto LABEL_174;
                }
                goto LABEL_24;
              }
              if (v19[9] == a4)
              {
                if (*v19 > 2u)
                  v21 = v19 + 16;
                else
                  v21 = &v19[12 * idx_n_column_to_subblock[2 * a9 + (v17 == 0)] + 28];
                *(_DWORD *)a6 = *(_DWORD *)v21;
                v15 = 1;
                if (a3 != 11)
                  goto LABEL_174;
LABEL_24:
                v16 = 0;
                v18 = 1;
                goto LABEL_25;
              }
              v18 = 0;
              v15 = 1;
            }
          }
        }
      }
LABEL_25:
      v22 = a5[2];
      if (v22 + a7 < 0)
        goto LABEL_49;
      v20 = 2;
      if (v22 + a7 >= *v10)
        goto LABEL_50;
      v23 = a5[3];
      if (v23 + a8 < *v11)
        goto LABEL_50;
      if (v23 + a8 >= *v12)
        goto LABEL_49;
      v24 = *(unsigned __int8 **)(*v13 + 8 * (v23 + *v14 * v22));
      if (v24[8] == a4)
      {
        v25 = *v24;
        if ((v16 & 1) != 0)
        {
          if (v25 >= 3)
            v26 = v24 + 12;
          else
            v26 = &v24[12 * idx_n_column_to_subblock[2 * a9 + (v23 == 0)] + 24];
LABEL_44:
          *(_DWORD *)a6 = *(_DWORD *)v26;
          v18 = 1;
          if (a3 != 11)
            goto LABEL_156;
          v20 = 2;
          v15 = 1;
          goto LABEL_51;
        }
        if (v25 >= 3)
          v28 = *((_DWORD *)v24 + 3);
        else
          v28 = *(_DWORD *)&v24[12 * idx_n_column_to_subblock[2 * a9 + (v23 == 0)] + 24];
      }
      else
      {
        if (v24[9] != a4)
        {
LABEL_48:
          v15 = 1;
LABEL_49:
          v20 = 2;
          goto LABEL_50;
        }
        v27 = *v24;
        if ((v16 & 1) != 0)
        {
          if (v27 >= 3)
            v26 = v24 + 16;
          else
            v26 = &v24[12 * idx_n_column_to_subblock[2 * a9 + (v23 == 0)] + 28];
          goto LABEL_44;
        }
        if (v27 >= 3)
          v28 = *((_DWORD *)v24 + 4);
        else
          v28 = *(_DWORD *)&v24[12 * idx_n_column_to_subblock[2 * a9 + (v23 == 0)] + 28];
      }
      if (v28 != *(_DWORD *)a6)
      {
        *(_DWORD *)(a6 + 4 * v18++) = v28;
        goto LABEL_156;
      }
      goto LABEL_48;
    }
  }
  v15 = 0;
  v18 = 0;
  v20 = 0;
LABEL_50:
  v10 = (_DWORD *)(a1 + 1312);
  v11 = a2 + 108;
  v12 = a2 + 109;
  v13 = a2 + 112;
  v14 = a2 + 110;
  if (a3 == 11)
  {
LABEL_51:
    v29 = 2 * v20;
    while (1)
    {
      v31 = a5[v29];
      if (v31 + a7 < 0)
        goto LABEL_55;
      v32 = a5[v29 + 1];
      v33 = v32 + a8;
      v34 = v31 + a7 >= *v10 || v33 < *v11;
      if (v34 || v33 >= *v12)
        goto LABEL_55;
      v35 = *(_QWORD *)(*v13 + 8 * (v32 + *v14 * v31));
      if (*(unsigned __int8 *)(v35 + 8) == a4)
      {
        v30 = *(_DWORD *)(v35 + 12);
        if (v18)
          goto LABEL_53;
      }
      else
      {
        if (*(unsigned __int8 *)(v35 + 9) != a4)
        {
          v15 = 1;
          goto LABEL_55;
        }
        v30 = *(_DWORD *)(v35 + 16);
        if (v18)
        {
LABEL_53:
          if (v30 != *(_DWORD *)a6)
            goto LABEL_137;
          goto LABEL_54;
        }
      }
      *(_DWORD *)a6 = v30;
LABEL_54:
      v15 = 1;
      v18 = 1;
LABEL_55:
      v29 += 2;
      if (v29 == 16)
        goto LABEL_83;
    }
  }
  v36 = 2 * v20;
  do
  {
    v37 = a5[v36];
    if (v37 + a7 >= 0)
    {
      v38 = a5[v36 + 1];
      v39 = v38 + a8;
      v40 = v37 + a7 >= *v10 || v39 < *v11;
      if (!v40 && v39 < *v12)
      {
        v41 = *(_QWORD *)(*v13 + 8 * (v38 + *v14 * v37));
        if (*(unsigned __int8 *)(v41 + 8) == a4)
        {
          v30 = *(_DWORD *)(v41 + 12);
          if (!v18)
            goto LABEL_151;
        }
        else
        {
          if (*(unsigned __int8 *)(v41 + 9) != a4)
          {
            v15 = 1;
            goto LABEL_69;
          }
          v30 = *(_DWORD *)(v41 + 16);
          if (!v18)
          {
LABEL_151:
            *(_DWORD *)a6 = v30;
            v18 = 1;
            goto LABEL_156;
          }
        }
        if (v30 != *(_DWORD *)a6)
        {
LABEL_137:
          *(_DWORD *)(a6 + 4) = v30;
          v18 = 2;
          goto LABEL_156;
        }
        v15 = 1;
        v18 = 1;
      }
    }
LABEL_69:
    v36 += 2;
  }
  while (v36 != 16);
LABEL_83:
  if (v9)
  {
    if (*((unsigned __int8 *)v9 + 8) == a4)
    {
      v42 = *(_DWORD *)v9;
      if (v18)
      {
        if (v42 == *(_DWORD *)a6)
          goto LABEL_87;
LABEL_91:
        *(_DWORD *)(a6 + 4) = v42;
        v18 = 2;
        goto LABEL_156;
      }
LABEL_92:
      *(_DWORD *)a6 = v42;
      v18 = 1;
      if (a3 != 11)
        goto LABEL_156;
    }
    else if (*((unsigned __int8 *)v9 + 9) == a4)
    {
      v42 = *((_DWORD *)v9 + 1);
      if (!v18)
        goto LABEL_92;
      if (v42 != *(_DWORD *)a6)
        goto LABEL_91;
LABEL_87:
      v18 = 1;
    }
  }
  v43 = a1 + 4708;
  if (v15)
  {
    for (i = 0; i != 16; i += 2)
    {
      v45 = a5[i];
      if (v45 + a7 >= 0)
      {
        v46 = a5[i + 1];
        v47 = v46 + a8;
        if (v45 + a7 < *v10 && v47 >= *v11 && v47 < *v12)
        {
          v49 = *(_QWORD *)(*v13 + 8 * (v46 + *v14 * v45));
          if (*(char *)(v49 + 8) >= 1)
          {
            v50 = *(unsigned __int8 *)(v49 + 8);
            if ((_DWORD)v50 != a4)
            {
              v51 = *(unsigned __int16 *)(v49 + 14);
              if (*(_DWORD *)(v43 + 4 * v50) == *(_DWORD *)(v43 + 4 * a4))
              {
                LOWORD(v52) = *(_WORD *)(v49 + 12);
              }
              else
              {
                v51 = -v51;
                v52 = -*(unsigned __int16 *)(v49 + 12);
              }
              v53 = (unsigned __int16)v52 | ((unsigned __int16)v51 << 16);
              if (v18)
              {
                if (v53 != *(_DWORD *)a6)
                {
                  *(_DWORD *)(a6 + 4) = v53;
                  v18 = 2;
                  goto LABEL_156;
                }
                v18 = 1;
              }
              else
              {
                *(_DWORD *)a6 = v53;
                v18 = 1;
                if (a3 != 11)
                  goto LABEL_156;
              }
            }
            v54 = *(char *)(v49 + 9);
            if (v54 >= 1 && v54 != a4)
            {
              v56 = *(_DWORD *)(v49 + 16);
              if (v56 != *(_DWORD *)(v49 + 12))
              {
                v57 = HIWORD(v56);
                if (*(_DWORD *)(v43 + 4 * *(unsigned __int8 *)(v49 + 9)) == *(_DWORD *)(v43 + 4 * a4))
                {
                  LOWORD(v49) = *(_DWORD *)(v49 + 16);
                }
                else
                {
                  v57 = -v57;
                  LODWORD(v49) = -v56;
                }
                v58 = (unsigned __int16)v49 | ((unsigned __int16)v57 << 16);
                if (v18)
                {
                  if (v58 != *(_DWORD *)a6)
                  {
                    *(_DWORD *)(a6 + 4) = v58;
                    v18 = 2;
                    goto LABEL_156;
                  }
                  v18 = 1;
                }
                else
                {
                  *(_DWORD *)a6 = v58;
                  v18 = 1;
                  if (a3 != 11)
                    goto LABEL_156;
                }
              }
            }
          }
        }
      }
    }
  }
  if (v9)
  {
    v59 = *((unsigned __int8 *)v9 + 8);
    if ((_DWORD)v59 != a4 && (char)v59 >= 1)
    {
      v61 = *(_DWORD *)(v43 + 4 * v59);
      v62 = *(_DWORD *)(v43 + 4 * a4);
      v63 = v61 == v62;
      if (v61 == v62)
        LOWORD(v64) = *v9;
      else
        v64 = -*v9;
      if (v63)
        LOWORD(v65) = v9[1];
      else
        v65 = -v9[1];
      if (v18)
      {
        if (((unsigned __int16)v64 | ((unsigned __int16)v65 << 16)) != *(_DWORD *)a6)
        {
          *(_WORD *)(a6 + 4) = v64;
          *(_WORD *)(a6 + 6) = v65;
          v18 = 2;
          goto LABEL_156;
        }
        v18 = 1;
      }
      else
      {
        *(_WORD *)a6 = v64;
        *(_WORD *)(a6 + 2) = v65;
        v18 = 1;
        if (a3 != 11)
          goto LABEL_156;
      }
    }
    v66 = *((char *)v9 + 9);
    if (v66 >= 1 && v66 != a4)
    {
      v67 = *((_DWORD *)v9 + 1);
      if (v67 != *(_DWORD *)v9)
      {
        v68 = *(_DWORD *)(v43 + 4 * *((unsigned __int8 *)v9 + 9));
        v69 = HIWORD(v67);
        v70 = *(_DWORD *)(v43 + 4 * a4);
        v71 = v68 == v70;
        if (v68 == v70)
          LOWORD(v72) = v67;
        else
          v72 = -v67;
        if (!v71)
          v69 = -v69;
        if (v18)
        {
          if (((unsigned __int16)v72 | ((unsigned __int16)v69 << 16)) != *(_DWORD *)a6)
          {
            *(_WORD *)(a6 + 4) = v72;
            *(_WORD *)(a6 + 6) = v69;
            v18 = 2;
            goto LABEL_156;
          }
          goto LABEL_153;
        }
        *(_WORD *)a6 = v72;
        *(_WORD *)(a6 + 2) = v69;
        if (a3 != 11)
        {
LABEL_174:
          v18 = 1;
          goto LABEL_156;
        }
      }
    }
  }
LABEL_153:
  if (a3 == 11)
    v18 = 2;
  else
    v18 = 1;
LABEL_156:
  v73 = a2[122] - 128;
  v74 = a2[123] + 128;
  v75 = a2[124] - 128;
  v76 = a2[125] + 128;
  result = v18;
  if (v18 >= 8)
  {
    v79 = vdupq_n_s32(v73);
    v80 = vdupq_n_s32(v74);
    v81 = vdupq_n_s32(v75);
    v82 = vdupq_n_s32(v76);
    v95 = vld2q_s16((const __int16 *)a6);
    v78 = v18 & 0xFFFFFFF8;
    v83 = vmovl_high_s16(v95.val[1]);
    v84 = vmovl_s16(*(int16x4_t *)v95.val[1].i8);
    v94.val[1] = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v79, v84), (int8x16_t)v79, (int8x16_t)vminq_s32(v84, v80)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v79, v83), (int8x16_t)v79, (int8x16_t)vminq_s32(v83, v80)));
    v85 = vmovl_high_s16(v95.val[0]);
    v95.val[0] = (int16x8_t)vmovl_s16(*(int16x4_t *)v95.val[0].i8);
    v94.val[0] = vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v81, (int32x4_t)v95.val[0]), (int8x16_t)v81, (int8x16_t)vminq_s32((int32x4_t)v95.val[0], v82)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_s32(v81, v85), (int8x16_t)v81, (int8x16_t)vminq_s32(v85, v82)));
    vst2q_s16((__int16 *)a6, v94);
    if ((result & 0xFFFFFFF8) != result)
      goto LABEL_159;
  }
  else
  {
    v78 = 0;
LABEL_159:
    v86 = result - v78;
    v87 = (__int16 *)(a6 + 4 * v78 + 2);
    do
    {
      v88 = *v87;
      if (v88 >= v74)
        v89 = v74;
      else
        v89 = *v87;
      if (v73 <= v88)
        v90 = v89;
      else
        v90 = v73;
      *v87 = v90;
      v91 = *(v87 - 1);
      if (v91 >= v76)
        v92 = v76;
      else
        v92 = *(v87 - 1);
      if (v75 <= v91)
        v93 = v92;
      else
        v93 = v75;
      *(v87 - 1) = v93;
      v87 += 2;
      --v86;
    }
    while (v86);
  }
  return result;
}

BOOL assign_mv(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, uint64_t a5, uint64_t *a6, int a7, int a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 result;
  int32x4_t v14;
  int32x4_t v15;
  _WORD *v16;
  __int16 v17;
  __int16 v18;
  int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  void (*v32)(uint64_t, unint64_t *, _QWORD *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  signed int v37;
  signed int v38;
  unsigned int v39;
  unint64_t *v40;
  int v41;
  BOOL v42;
  int v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint64_t v56;
  uint8x16_t *v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint32x4_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  uint32x4_t v72;
  uint64x2_t v73;
  uint16x8_t v74;
  uint32x4_t v75;
  uint64x2_t v76;
  uint64x2_t v77;
  uint64x2_t v78;
  uint64x2_t v79;
  uint32x4_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  unsigned int v91;
  __int16 *v92;
  int v93;
  int v94;
  _BOOL4 v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v104;
  _BOOL4 v105;
  uint64_t v106;
  int v107;

  if ((a3 - 10) < 2)
  {
    v97 = *a6;
LABEL_69:
    *a4 = v97;
    return 1;
  }
  if (a3 == 12)
  {
    v97 = 0;
    goto LABEL_69;
  }
  if (a3 == 13)
  {
    v9 = 0;
    v10 = *(_QWORD *)(a2 + 416);
    v11 = (uint64_t)a9;
    if (v10)
      v12 = v10 + 12800;
    else
      v12 = 0;
    v98 = (a7 + 1);
    v99 = v12;
    LODWORD(result) = 1;
    v14.i64[0] = 0x800000008;
    v14.i64[1] = 0x800000008;
    v15.i64[0] = 0x7F0000007FLL;
    for (v15.i64[1] = 0x7F0000007FLL; ; v15.i64[1] = 0x7F0000007FLL)
    {
      v105 = result;
      v106 = v9;
      LOBYTE(v21) = 0;
      v104 = *(_QWORD *)(a1 + 4904);
      v22 = *(_DWORD *)(v11 + 8);
      v23 = *(_DWORD *)(v11 + 12);
      v24 = *(_QWORD *)v11;
      do
      {
        v28 = *(unsigned __int8 *)(v104 + 1970 + (v21 >> 1));
        if ((v23 & 0x80000000) == 0)
        {
          v25 = ((v22 - 1) * v28 + 256) >> 8;
          v29 = v24 - (v25 << 56);
          if (v24 >= v25 << 56)
            goto LABEL_20;
          goto LABEL_53;
        }
        v30 = *(unint64_t **)(v11 + 24);
        v31 = *(_QWORD *)(v11 + 16) - (_QWORD)v30;
        v32 = *(void (**)(uint64_t, unint64_t *, _QWORD *, uint64_t))(v11 + 32);
        if (v32)
        {
          if (v31 >= 9)
            v33 = 9;
          else
            v33 = *(_QWORD *)(v11 + 16) - (_QWORD)v30;
          v34 = *(_QWORD *)(v11 + 40);
          v35 = *(unsigned __int8 *)(v104 + 1970 + (v21 >> 1));
          v32(v34, v30, a9 + 6, v33);
          v28 = v35;
          v15.i64[0] = 0x7F0000007FLL;
          v15.i64[1] = 0x7F0000007FLL;
          v14.i64[0] = 0x800000008;
          v14.i64[1] = 0x800000008;
          v30 = a9 + 6;
        }
        v36 = 8 * v31;
        v37 = 48 - v23;
        if (8 * v31 >= 0x41)
        {
          v38 = (v37 & 0xFFFFFFF8) + 8;
          v39 = v38 + v23;
          v40 = (unint64_t *)((char *)v30 + (v38 >> 3));
          v11 = (uint64_t)a9;
          v24 = (bswap64(*v30) >> (56 - (v37 & 0xF8u)) << (v37 & 7)) | *a9;
          goto LABEL_52;
        }
        v41 = 56 - v23 - v36;
        if (v41 < 0)
          v39 = v23;
        else
          v39 = v23 + 0x40000000;
        if (v36)
          v42 = 1;
        else
          v42 = v41 <= -1;
        v43 = v41 & ~(v41 >> 31);
        v44 = !v42 || v37 < v43;
        v11 = (uint64_t)a9;
        if (v44)
        {
          v40 = v30;
          goto LABEL_52;
        }
        v45 = v43 - 1;
        if (v43 - 1 >= (int)(40 - v23))
          v45 = 40 - v23;
        v46 = 47 - v23 - v45;
        if (v46 < 0x78)
        {
          v40 = v30;
          do
          {
LABEL_51:
            v39 += 8;
            v91 = *(unsigned __int8 *)v40;
            v40 = (unint64_t *)((char *)v40 + 1);
            v24 |= (unint64_t)v91 << v37;
            v37 -= 8;
          }
          while (v37 >= v43);
          goto LABEL_52;
        }
        v47 = (v46 >> 3) + 1;
        v48 = (int8x16_t)v24;
        v49 = 0uLL;
        v50 = (int32x4_t)v39;
        v51 = vdupq_n_s32(v37);
        v52 = vaddq_s32(v51, (int32x4_t)xmmword_208F3A6C0);
        v40 = (unint64_t *)((char *)v30 + (v47 & 0x3FFFFFF0));
        v53 = vaddq_s32(v51, (int32x4_t)xmmword_208F3A6D0);
        v37 -= 8 * (v47 & 0x3FFFFFF0);
        v54 = vaddq_s32(v51, (int32x4_t)xmmword_208F3A6A0);
        v55 = vaddq_s32(v51, (int32x4_t)xmmword_208F3A6B0);
        v56 = v47 & 0x3FFFFFF0;
        v57 = (uint8x16_t *)v30;
        v58 = 0uLL;
        v59 = 0uLL;
        v60 = 0uLL;
        v61 = 0uLL;
        v62 = 0uLL;
        v63 = 0uLL;
        v64 = 0uLL;
        v65 = 0uLL;
        v66 = 0uLL;
        do
        {
          v67 = *v57++;
          v68 = vmovl_high_u8(v67);
          v69 = vmovl_high_u16(v68);
          v70.i64[0] = v69.u32[0];
          v70.i64[1] = v69.u32[1];
          v71 = v70;
          v72 = vmovl_u16(*(uint16x4_t *)v68.i8);
          v70.i64[0] = v72.u32[2];
          v70.i64[1] = v72.u32[3];
          v73 = v70;
          v74 = vmovl_u8(*(uint8x8_t *)v67.i8);
          v75 = vmovl_high_u16(v74);
          v70.i64[0] = v75.u32[2];
          v70.i64[1] = v75.u32[3];
          v76 = v70;
          v70.i64[0] = v69.u32[2];
          v70.i64[1] = v69.u32[3];
          v77 = v70;
          v70.i64[0] = v72.u32[0];
          v70.i64[1] = v72.u32[1];
          v78 = v70;
          v70.i64[0] = v75.u32[0];
          v70.i64[1] = v75.u32[1];
          v79 = v70;
          v80 = vmovl_u16(*(uint16x4_t *)v74.i8);
          v70.i64[0] = v80.u32[2];
          v70.i64[1] = v80.u32[3];
          v81 = v70;
          v70.i64[0] = v80.u32[0];
          v70.i64[1] = v80.u32[1];
          v82 = v70;
          v70.i64[0] = v55.u32[0];
          v70.i64[1] = v55.u32[1];
          v83 = (int8x16_t)vshlq_u64(v82, v70);
          v70.i64[0] = v55.u32[2];
          v70.i64[1] = v55.u32[3];
          v84 = (int8x16_t)vshlq_u64(v81, v70);
          v70.i64[0] = v54.u32[0];
          v70.i64[1] = v54.u32[1];
          v85 = (int8x16_t)vshlq_u64(v79, v70);
          v70.i64[0] = v53.u32[0];
          v70.i64[1] = v53.u32[1];
          v86 = (int8x16_t)vshlq_u64(v78, v70);
          v70.i64[0] = v52.u32[2];
          v70.i64[1] = v52.u32[3];
          v87 = (int8x16_t)vshlq_u64(v77, v70);
          v70.i64[0] = v54.u32[2];
          v70.i64[1] = v54.u32[3];
          v88 = (int8x16_t)vshlq_u64(v76, v70);
          v70.i64[0] = v53.u32[2];
          v70.i64[1] = v53.u32[3];
          v89 = (int8x16_t)vshlq_u64(v73, v70);
          v70.i64[0] = v52.u32[0];
          v70.i64[1] = v52.u32[1];
          v62 = vorrq_s8((int8x16_t)vshlq_u64(v71, v70), v62);
          v61 = vorrq_s8(v89, v61);
          v59 = vorrq_s8(v88, v59);
          v63 = vorrq_s8(v87, v63);
          v60 = vorrq_s8(v86, v60);
          v58 = vorrq_s8(v85, v58);
          v49 = vorrq_s8(v84, v49);
          v48 = vorrq_s8(v83, v48);
          v50 = vaddq_s32(v50, v14);
          v64 = vaddq_s32(v64, v14);
          v65 = vaddq_s32(v65, v14);
          v66 = vaddq_s32(v66, v14);
          v55 = vaddq_s32(v55, v15);
          v54 = vaddq_s32(v54, v15);
          v53 = vaddq_s32(v53, v15);
          v52 = vaddq_s32(v52, v15);
          v56 -= 16;
        }
        while (v56);
        v39 = vaddvq_s32(vaddq_s32(vaddq_s32(v50, v65), vaddq_s32(v64, v66)));
        v90 = vorrq_s8(vorrq_s8(vorrq_s8(v48, v60), vorrq_s8(v58, v62)), vorrq_s8(vorrq_s8(v49, v61), vorrq_s8(v59, v63)));
        v24 = (unint64_t)vorr_s8(*(int8x8_t *)v90.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL));
        if ((v47 & 0x3FFFFFF0) != v47)
          goto LABEL_51;
LABEL_52:
        *(_QWORD *)(v11 + 24) += (char *)v40 - (char *)v30;
        v23 = v39;
        v25 = ((v22 - 1) * v28 + 256) >> 8;
        v29 = v24 - (v25 << 56);
        if (v24 >= v25 << 56)
        {
LABEL_20:
          LODWORD(v25) = *(_DWORD *)(v11 + 8) - v25;
          v26 = 1;
          v24 = v29;
          goto LABEL_21;
        }
LABEL_53:
        v26 = 0;
LABEL_21:
        v27 = vpx_norm[v25];
        v22 = (_DWORD)v25 << v27;
        v24 <<= v27;
        v23 -= v27;
        *(_QWORD *)v11 = v24;
        *(_DWORD *)(v11 + 8) = (_DWORD)v25 << v27;
        *(_DWORD *)(v11 + 12) = v23;
        v21 = (char)vp9_mv_joint_tree[v26 + (unint64_t)v21];
      }
      while (v21 > 0);
      v92 = (__int16 *)(a5 + 4 * v106);
      if (!a8)
        goto LABEL_62;
      v93 = *v92;
      if (v93 < 0)
        v93 = -v93;
      if ((unsigned __int16)v93 > 0x3Fu)
      {
LABEL_62:
        v95 = 0;
        v96 = -v21;
        v107 = 0;
        if ((v96 & 0xFFFFFFFE) != 2)
          goto LABEL_64;
LABEL_63:
        LOWORD(v107) = read_mv_component(v11, (unsigned __int8 *)(v104 + 1973), v95);
        goto LABEL_64;
      }
      v94 = v92[1];
      if (v94 < 0)
        v94 = -v94;
      v95 = (unsigned __int16)v94 < 0x40u;
      v96 = -v21;
      v107 = 0;
      if ((v96 & 0xFFFFFFFE) == 2)
        goto LABEL_63;
LABEL_64:
      if ((v96 & 0xFFFFFFFD) == 1)
        HIWORD(v107) = read_mv_component(v11, (unsigned __int8 *)(v104 + 2006), v95);
      v16 = (_WORD *)a4 + 2 * v106;
      vp9_inc_mv((unint64_t)&v107, v99);
      v17 = v107 + *v92;
      *v16 = v17;
      v18 = HIWORD(v107) + v92[1];
      v16[1] = v18;
      result = v105 && (unsigned __int16)(v17 + 0x3FFF) < 0x7FFEu && v18 > -16384 && v18 < 0x3FFF;
      v14.i64[0] = 0x800000008;
      v14.i64[1] = 0x800000008;
      v15.i64[0] = 0x7F0000007FLL;
      v9 = v106 + 1;
      if (v106 + 1 == v98)
        return result;
    }
  }
  return 0;
}

uint64_t read_mv_component(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unint64_t *v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  int32x4_t v14;
  int32x4_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void (*v24)(unint64_t, unint64_t, unint64_t *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  signed int v27;
  signed int v28;
  unint64_t *v29;
  int v30;
  BOOL v31;
  int v32;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  uint64_t v45;
  uint8x16_t *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  uint8x16_t v56;
  uint16x8_t v57;
  uint32x4_t v58;
  uint64x2_t v59;
  uint64x2_t v60;
  uint32x4_t v61;
  uint64x2_t v62;
  uint16x8_t v63;
  uint32x4_t v64;
  uint64x2_t v65;
  uint64x2_t v66;
  uint64x2_t v67;
  uint64x2_t v68;
  uint32x4_t v69;
  uint64x2_t v70;
  uint64x2_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  int32x4_t v83;
  int32x4_t v84;
  unsigned __int8 *v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  void (*v93)(unint64_t, unint64_t, unint64_t *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  signed int v96;
  signed int v97;
  unsigned int v98;
  unint64_t *v99;
  int v100;
  BOOL v101;
  int v102;
  int v104;
  unsigned int v105;
  uint64_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  uint64_t v115;
  uint8x16_t *v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  uint8x16_t v126;
  uint16x8_t v127;
  uint32x4_t v128;
  uint64x2_t v129;
  uint64x2_t v130;
  uint32x4_t v131;
  uint64x2_t v132;
  uint16x8_t v133;
  uint32x4_t v134;
  uint64x2_t v135;
  uint64x2_t v136;
  uint64x2_t v137;
  uint64x2_t v138;
  uint32x4_t v139;
  uint64x2_t v140;
  uint64x2_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t v145;
  int8x16_t v146;
  int8x16_t v147;
  int8x16_t v148;
  int8x16_t v149;
  unsigned int v150;
  int v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  void (*v155)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v156;
  signed int v157;
  signed int v158;
  unsigned int v159;
  unint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  int v163;
  BOOL v164;
  int v165;
  unint64_t *v167;
  unint64_t v168;
  unint64_t v169;
  void (*v170)(unint64_t, unint64_t, unint64_t *, uint64_t);
  uint64_t v171;
  signed int v172;
  signed int v173;
  unint64_t *v174;
  int v175;
  unsigned int v176;
  int v177;
  int8x16_t v178;
  int8x16_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  uint64_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int8x16_t v189;
  uint64_t v190;
  int8x16_t v191;
  uint8x16_t *v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int8x16_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int32x4_t v199;
  uint8x16_t v200;
  uint16x8_t v201;
  uint32x4_t v202;
  uint64x2_t v203;
  uint64x2_t v204;
  uint32x4_t v205;
  uint64x2_t v206;
  uint16x8_t v207;
  uint32x4_t v208;
  uint64x2_t v209;
  uint64x2_t v210;
  uint64x2_t v211;
  uint64x2_t v212;
  uint32x4_t v213;
  uint64x2_t v214;
  uint64x2_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  unsigned int v224;
  int v225;
  BOOL v226;
  int v227;
  int v229;
  unsigned int v230;
  signed int v231;
  uint64_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  int32x4_t v242;
  uint64_t v243;
  uint8x16_t *v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int32x4_t v251;
  int32x4_t v252;
  int32x4_t v253;
  uint8x16_t v254;
  uint16x8_t v255;
  uint32x4_t v256;
  uint64x2_t v257;
  uint64x2_t v258;
  uint32x4_t v259;
  uint64x2_t v260;
  uint16x8_t v261;
  uint32x4_t v262;
  uint64x2_t v263;
  uint64x2_t v264;
  uint64x2_t v265;
  uint64x2_t v266;
  uint32x4_t v267;
  uint64x2_t v268;
  uint64x2_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int8x16_t v274;
  int8x16_t v275;
  int8x16_t v276;
  int8x16_t v277;
  unsigned int v278;
  int v279;
  int v280;
  uint64_t v281;
  int32x4_t v282;
  int32x4_t v283;
  char *v284;
  uint64_t v285;
  unsigned int v286;
  int v287;
  int v288;
  unsigned int v289;
  unint64_t v290;
  unint64_t *v291;
  unint64_t v292;
  void (*v293)(unint64_t, unint64_t, unint64_t *, uint64_t);
  uint64_t v294;
  uint64_t v295;
  char *v296;
  unint64_t v297;
  unint64_t v298;
  int v299;
  uint64_t v300;
  signed int v301;
  signed int v302;
  unint64_t *v303;
  int v304;
  BOOL v305;
  int v306;
  int v308;
  unsigned int v309;
  uint64_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int32x4_t v313;
  int32x4_t v314;
  int32x4_t v315;
  int32x4_t v316;
  int32x4_t v317;
  int32x4_t v318;
  uint64_t v319;
  uint8x16_t *v320;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  uint8x16_t v330;
  uint16x8_t v331;
  uint32x4_t v332;
  uint64x2_t v333;
  uint64x2_t v334;
  uint32x4_t v335;
  uint64x2_t v336;
  uint16x8_t v337;
  uint32x4_t v338;
  uint64x2_t v339;
  uint64x2_t v340;
  uint64x2_t v341;
  uint64x2_t v342;
  uint32x4_t v343;
  uint64x2_t v344;
  uint64x2_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  int8x16_t v351;
  int8x16_t v352;
  int8x16_t v353;
  unsigned int v354;
  uint64_t v355;
  uint64_t v356;
  unint64_t v357;
  unint64_t v358;
  int v359;
  unint64_t v360;
  int v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  void (*v365)(unint64_t, unint64_t, unint64_t *, uint64_t);
  uint64_t v366;
  signed int v367;
  signed int v368;
  unint64_t *v369;
  int v370;
  BOOL v371;
  int v372;
  BOOL v373;
  int v374;
  unsigned int v375;
  signed int v376;
  uint64_t v377;
  int8x16_t v378;
  int8x16_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  uint8x16_t *v383;
  int32x4_t v384;
  int32x4_t v385;
  int32x4_t v386;
  int32x4_t v387;
  int32x4_t v388;
  uint64_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int8x16_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int8x16_t v395;
  int32x4_t v396;
  int32x4_t v397;
  int32x4_t v398;
  uint8x16_t v399;
  uint16x8_t v400;
  uint32x4_t v401;
  uint64x2_t v402;
  uint64x2_t v403;
  uint32x4_t v404;
  uint64x2_t v405;
  uint16x8_t v406;
  uint32x4_t v407;
  uint64x2_t v408;
  uint64x2_t v409;
  uint64x2_t v410;
  uint64x2_t v411;
  uint32x4_t v412;
  uint64x2_t v413;
  uint64x2_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  unsigned int v423;
  int v424;
  unsigned int v425;
  int v427;
  uint64_t v428;
  unint64_t v429;
  unint64_t *v432;
  unint64_t *v433;
  int v434;

  v3 = (unint64_t *)a1;
  v4 = *(_DWORD *)(a1 + 12);
  v5 = ((*(_DWORD *)(a1 + 8) - 1) * *a2 + 256) >> 8;
  v6 = *(_QWORD *)a1;
  if ((v4 & 0x80000000) != 0)
  {
    v152 = *(unint64_t **)(a1 + 24);
    v153 = *(_QWORD *)(a1 + 16) - (_QWORD)v152;
    v154 = 8 * v153;
    v155 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(a1 + 32);
    if (v155)
    {
      if (v153 >= 9)
        v156 = 9;
      else
        v156 = *(_QWORD *)(a1 + 16) - (_QWORD)v152;
      v155(*(_QWORD *)(a1 + 40), v152, a1 + 48, v156);
      v152 = v3 + 6;
    }
    v157 = 48 - v4;
    if (v154 < 0x41)
    {
      v163 = 56 - v4 - v154;
      if (v163 < 0)
        v159 = v4;
      else
        v159 = v4 + 0x40000000;
      if (v154)
        v164 = 1;
      else
        v164 = v163 <= -1;
      v165 = v163 & ~(v163 >> 31);
      if (!v164 || v157 < v165)
      {
        v160 = v152;
      }
      else
      {
        v175 = v165 - 1;
        if (v165 - 1 >= (int)(40 - v4))
          v175 = 40 - v4;
        v176 = 47 - v4 - v175;
        v160 = v152;
        v177 = 48 - v4;
        if (v176 < 0x78)
          goto LABEL_217;
        v178 = 0uLL;
        v179 = (int8x16_t)v6;
        v180 = (int32x4_t)v159;
        v181 = vdupq_n_s32(v157);
        v182 = vaddq_s32(v181, (int32x4_t)xmmword_208F3A6C0);
        v183 = vaddq_s32(v181, (int32x4_t)xmmword_208F3A6D0);
        v184 = vaddq_s32(v181, (int32x4_t)xmmword_208F3A6A0);
        v185 = vaddq_s32(v181, (int32x4_t)xmmword_208F3A6B0);
        v186 = (v176 >> 3) + 1;
        v187.i64[0] = 0x800000008;
        v187.i64[1] = 0x800000008;
        v160 = (unint64_t *)((char *)v152 + (v186 & 0x3FFFFFF0));
        v188.i64[0] = 0x7F0000007FLL;
        v188.i64[1] = 0x7F0000007FLL;
        v177 = v157 - 8 * (v186 & 0x3FFFFFF0);
        v189 = 0uLL;
        v190 = v186 & 0x3FFFFFF0;
        v191 = 0uLL;
        v192 = (uint8x16_t *)v152;
        v193 = 0uLL;
        v194 = 0uLL;
        v195 = 0uLL;
        v196 = 0uLL;
        v197 = 0uLL;
        v198 = 0uLL;
        v199 = 0uLL;
        do
        {
          v200 = *v192++;
          v201 = vmovl_high_u8(v200);
          v202 = vmovl_high_u16(v201);
          v203.i64[0] = v202.u32[0];
          v203.i64[1] = v202.u32[1];
          v204 = v203;
          v205 = vmovl_u16(*(uint16x4_t *)v201.i8);
          v203.i64[0] = v205.u32[2];
          v203.i64[1] = v205.u32[3];
          v206 = v203;
          v207 = vmovl_u8(*(uint8x8_t *)v200.i8);
          v208 = vmovl_high_u16(v207);
          v203.i64[0] = v208.u32[2];
          v203.i64[1] = v208.u32[3];
          v209 = v203;
          v203.i64[0] = v202.u32[2];
          v203.i64[1] = v202.u32[3];
          v210 = v203;
          v203.i64[0] = v205.u32[0];
          v203.i64[1] = v205.u32[1];
          v211 = v203;
          v203.i64[0] = v208.u32[0];
          v203.i64[1] = v208.u32[1];
          v212 = v203;
          v213 = vmovl_u16(*(uint16x4_t *)v207.i8);
          v203.i64[0] = v213.u32[2];
          v203.i64[1] = v213.u32[3];
          v214 = v203;
          v203.i64[0] = v213.u32[0];
          v203.i64[1] = v213.u32[1];
          v215 = v203;
          v203.i64[0] = v185.u32[0];
          v203.i64[1] = v185.u32[1];
          v216 = (int8x16_t)vshlq_u64(v215, v203);
          v203.i64[0] = v185.u32[2];
          v203.i64[1] = v185.u32[3];
          v217 = (int8x16_t)vshlq_u64(v214, v203);
          v203.i64[0] = v184.u32[0];
          v203.i64[1] = v184.u32[1];
          v218 = (int8x16_t)vshlq_u64(v212, v203);
          v203.i64[0] = v183.u32[0];
          v203.i64[1] = v183.u32[1];
          v219 = (int8x16_t)vshlq_u64(v211, v203);
          v203.i64[0] = v182.u32[2];
          v203.i64[1] = v182.u32[3];
          v220 = (int8x16_t)vshlq_u64(v210, v203);
          v203.i64[0] = v184.u32[2];
          v203.i64[1] = v184.u32[3];
          v221 = (int8x16_t)vshlq_u64(v209, v203);
          v203.i64[0] = v183.u32[2];
          v203.i64[1] = v183.u32[3];
          v222 = (int8x16_t)vshlq_u64(v206, v203);
          v203.i64[0] = v182.u32[0];
          v203.i64[1] = v182.u32[1];
          v195 = vorrq_s8((int8x16_t)vshlq_u64(v204, v203), v195);
          v194 = vorrq_s8(v222, v194);
          v191 = vorrq_s8(v221, v191);
          v196 = vorrq_s8(v220, v196);
          v193 = vorrq_s8(v219, v193);
          v189 = vorrq_s8(v218, v189);
          v178 = vorrq_s8(v217, v178);
          v179 = vorrq_s8(v216, v179);
          v180 = vaddq_s32(v180, v187);
          v197 = vaddq_s32(v197, v187);
          v198 = vaddq_s32(v198, v187);
          v199 = vaddq_s32(v199, v187);
          v185 = vaddq_s32(v185, v188);
          v184 = vaddq_s32(v184, v188);
          v183 = vaddq_s32(v183, v188);
          v182 = vaddq_s32(v182, v188);
          v190 -= 16;
        }
        while (v190);
        v159 = vaddvq_s32(vaddq_s32(vaddq_s32(v180, v198), vaddq_s32(v197, v199)));
        v223 = vorrq_s8(vorrq_s8(vorrq_s8(v179, v193), vorrq_s8(v189, v195)), vorrq_s8(vorrq_s8(v178, v194), vorrq_s8(v191, v196)));
        v6 = (unint64_t)vorr_s8(*(int8x8_t *)v223.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v223, v223, 8uLL));
        if ((v186 & 0x3FFFFFF0) != v186)
        {
LABEL_217:
          do
          {
            v159 += 8;
            v224 = *(unsigned __int8 *)v160;
            v160 = (unint64_t *)((char *)v160 + 1);
            v6 |= (unint64_t)v224 << v177;
            v177 -= 8;
          }
          while (v177 >= v165);
        }
      }
    }
    else
    {
      v158 = (v157 & 0xFFFFFFF8) + 8;
      v159 = v158 + v4;
      v160 = (unint64_t *)((char *)v152 + (v158 >> 3));
      v6 = (bswap64(*v152) >> (56 - (v157 & 0xF8u)) << (v157 & 7)) | *v3;
    }
    v3[3] += (char *)v160 - (char *)v152;
    v4 = v159;
    v7 = v6;
    v428 = v5 << 56;
    v429 = v6;
    v8 = v6 - (v5 << 56);
    if (v6 < v5 << 56)
      goto LABEL_4;
    goto LABEL_3;
  }
  v7 = *(_QWORD *)a1;
  v428 = v5 << 56;
  v429 = *(_QWORD *)a1;
  v8 = v6 - (v5 << 56);
  if (v6 >= v5 << 56)
  {
LABEL_3:
    LODWORD(v5) = *((_DWORD *)v3 + 2) - v5;
    v7 = v8;
  }
LABEL_4:
  LOBYTE(v9) = 0;
  v10 = vpx_norm[v5];
  v11 = (_DWORD)v5 << v10;
  v12 = v7 << v10;
  v13 = v4 - v10;
  *v3 = v7 << v10;
  *((_DWORD *)v3 + 2) = (_DWORD)v5 << v10;
  *((_DWORD *)v3 + 3) = v4 - v10;
  v433 = v3 + 6;
  v14.i64[0] = 0x800000008;
  v14.i64[1] = 0x800000008;
  v15.i64[0] = 0x7F0000007FLL;
  v15.i64[1] = 0x7F0000007FLL;
  do
  {
    v19 = a2[(v9 >> 1) + 1];
    if ((v13 & 0x80000000) == 0)
    {
      v20 = v13;
      v16 = ((v11 - 1) * v19 + 256) >> 8;
      v21 = v12 - (v16 << 56);
      if (v12 >= v16 << 56)
        goto LABEL_5;
      goto LABEL_38;
    }
    v22 = (unint64_t *)v3[3];
    v23 = v3[2] - (_QWORD)v22;
    v24 = (void (*)(unint64_t, unint64_t, unint64_t *, uint64_t))v3[4];
    if (v24)
    {
      if (v23 >= 9)
        v25 = 9;
      else
        v25 = v3[2] - (_QWORD)v22;
      v22 = v3 + 6;
      v24(v3[5], v3[3], v433, v25);
      v15.i64[0] = 0x7F0000007FLL;
      v15.i64[1] = 0x7F0000007FLL;
      v14.i64[0] = 0x800000008;
      v14.i64[1] = 0x800000008;
    }
    v26 = 8 * v23;
    v27 = 48 - v13;
    if (8 * v23 >= 0x41)
    {
      v28 = (v27 & 0xFFFFFFF8) + 8;
      v20 = v28 + v13;
      v29 = (unint64_t *)((char *)v22 + (v28 >> 3));
      v12 = (bswap64(*v22) >> (56 - (v27 & 0xF8u)) << (v27 & 7)) | *v3;
      goto LABEL_37;
    }
    v30 = 56 - v13 - v26;
    if (v30 < 0)
      v20 = v13;
    else
      v20 = v13 + 0x40000000;
    if (v26)
      v31 = 1;
    else
      v31 = v30 <= -1;
    v32 = v30 & ~(v30 >> 31);
    if (!v31 || v27 < v32)
    {
      v29 = v22;
      goto LABEL_37;
    }
    v34 = v32 - 1;
    if (v32 - 1 >= (int)(40 - v13))
      v34 = 40 - v13;
    v35 = 47 - v13 - v34;
    if (v35 < 0x78)
    {
      v29 = v22;
      do
      {
LABEL_36:
        v20 += 8;
        v80 = *(unsigned __int8 *)v29;
        v29 = (unint64_t *)((char *)v29 + 1);
        v12 |= (unint64_t)v80 << v27;
        v27 -= 8;
      }
      while (v27 >= v32);
      goto LABEL_37;
    }
    v36 = (v35 >> 3) + 1;
    v37 = (int8x16_t)v12;
    v38 = 0uLL;
    v39 = (int32x4_t)v20;
    v40 = vdupq_n_s32(v27);
    v41 = vaddq_s32(v40, (int32x4_t)xmmword_208F3A6C0);
    v29 = (unint64_t *)((char *)v22 + (v36 & 0x3FFFFFF0));
    v42 = vaddq_s32(v40, (int32x4_t)xmmword_208F3A6D0);
    v27 -= 8 * (v36 & 0x3FFFFFF0);
    v43 = vaddq_s32(v40, (int32x4_t)xmmword_208F3A6A0);
    v44 = vaddq_s32(v40, (int32x4_t)xmmword_208F3A6B0);
    v45 = v36 & 0x3FFFFFF0;
    v46 = (uint8x16_t *)v22;
    v47 = 0uLL;
    v48 = 0uLL;
    v49 = 0uLL;
    v50 = 0uLL;
    v51 = 0uLL;
    v52 = 0uLL;
    v53 = 0uLL;
    v54 = 0uLL;
    v55 = 0uLL;
    do
    {
      v56 = *v46++;
      v57 = vmovl_high_u8(v56);
      v58 = vmovl_high_u16(v57);
      v59.i64[0] = v58.u32[0];
      v59.i64[1] = v58.u32[1];
      v60 = v59;
      v61 = vmovl_u16(*(uint16x4_t *)v57.i8);
      v59.i64[0] = v61.u32[2];
      v59.i64[1] = v61.u32[3];
      v62 = v59;
      v63 = vmovl_u8(*(uint8x8_t *)v56.i8);
      v64 = vmovl_high_u16(v63);
      v59.i64[0] = v64.u32[2];
      v59.i64[1] = v64.u32[3];
      v65 = v59;
      v59.i64[0] = v58.u32[2];
      v59.i64[1] = v58.u32[3];
      v66 = v59;
      v59.i64[0] = v61.u32[0];
      v59.i64[1] = v61.u32[1];
      v67 = v59;
      v59.i64[0] = v64.u32[0];
      v59.i64[1] = v64.u32[1];
      v68 = v59;
      v69 = vmovl_u16(*(uint16x4_t *)v63.i8);
      v59.i64[0] = v69.u32[2];
      v59.i64[1] = v69.u32[3];
      v70 = v59;
      v59.i64[0] = v69.u32[0];
      v59.i64[1] = v69.u32[1];
      v71 = v59;
      v59.i64[0] = v44.u32[0];
      v59.i64[1] = v44.u32[1];
      v72 = (int8x16_t)vshlq_u64(v71, v59);
      v59.i64[0] = v44.u32[2];
      v59.i64[1] = v44.u32[3];
      v73 = (int8x16_t)vshlq_u64(v70, v59);
      v59.i64[0] = v43.u32[0];
      v59.i64[1] = v43.u32[1];
      v74 = (int8x16_t)vshlq_u64(v68, v59);
      v59.i64[0] = v42.u32[0];
      v59.i64[1] = v42.u32[1];
      v75 = (int8x16_t)vshlq_u64(v67, v59);
      v59.i64[0] = v41.u32[2];
      v59.i64[1] = v41.u32[3];
      v76 = (int8x16_t)vshlq_u64(v66, v59);
      v59.i64[0] = v43.u32[2];
      v59.i64[1] = v43.u32[3];
      v77 = (int8x16_t)vshlq_u64(v65, v59);
      v59.i64[0] = v42.u32[2];
      v59.i64[1] = v42.u32[3];
      v78 = (int8x16_t)vshlq_u64(v62, v59);
      v59.i64[0] = v41.u32[0];
      v59.i64[1] = v41.u32[1];
      v51 = vorrq_s8((int8x16_t)vshlq_u64(v60, v59), v51);
      v50 = vorrq_s8(v78, v50);
      v48 = vorrq_s8(v77, v48);
      v52 = vorrq_s8(v76, v52);
      v49 = vorrq_s8(v75, v49);
      v47 = vorrq_s8(v74, v47);
      v38 = vorrq_s8(v73, v38);
      v37 = vorrq_s8(v72, v37);
      v39 = vaddq_s32(v39, v14);
      v53 = vaddq_s32(v53, v14);
      v54 = vaddq_s32(v54, v14);
      v55 = vaddq_s32(v55, v14);
      v44 = vaddq_s32(v44, v15);
      v43 = vaddq_s32(v43, v15);
      v42 = vaddq_s32(v42, v15);
      v41 = vaddq_s32(v41, v15);
      v45 -= 16;
    }
    while (v45);
    v20 = vaddvq_s32(vaddq_s32(vaddq_s32(v39, v54), vaddq_s32(v53, v55)));
    v79 = vorrq_s8(vorrq_s8(vorrq_s8(v37, v49), vorrq_s8(v47, v51)), vorrq_s8(vorrq_s8(v38, v50), vorrq_s8(v48, v52)));
    v12 = (unint64_t)vorr_s8(*(int8x8_t *)v79.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL));
    if ((v36 & 0x3FFFFFF0) != v36)
      goto LABEL_36;
LABEL_37:
    v3[3] += (char *)v29 - (char *)v22;
    v16 = ((v11 - 1) * v19 + 256) >> 8;
    v21 = v12 - (v16 << 56);
    if (v12 >= v16 << 56)
    {
LABEL_5:
      LODWORD(v16) = *((_DWORD *)v3 + 2) - v16;
      v17 = 1;
      v12 = v21;
      goto LABEL_6;
    }
LABEL_38:
    v17 = 0;
LABEL_6:
    v18 = vpx_norm[v16];
    v11 = (_DWORD)v16 << v18;
    v12 <<= v18;
    v13 = v20 - v18;
    *v3 = v12;
    *((_DWORD *)v3 + 2) = (_DWORD)v16 << v18;
    *((_DWORD *)v3 + 3) = v20 - v18;
    v9 = vp9_mv_class_tree[v17 + (unint64_t)v9];
  }
  while ((int)v9 > 0);
  if ((_DWORD)v9)
  {
    v81 = 0;
    v434 = 0;
    if (-(int)v9 <= 1)
      v82 = 1;
    else
      v82 = -(int)v9;
    v83.i64[0] = 0x800000008;
    v83.i64[1] = 0x800000008;
    v84.i64[0] = 0x7F0000007FLL;
    v84.i64[1] = 0x7F0000007FLL;
    v85 = a2;
    while (1)
    {
      v89 = v85[v81 + 12];
      if ((v13 & 0x80000000) == 0)
      {
        v86 = ((v11 - 1) * v89 + 256) >> 8;
        v90 = v12 - (v86 << 56);
        if (v12 < v86 << 56)
          goto LABEL_77;
        goto LABEL_44;
      }
      v91 = (unint64_t *)v3[3];
      v92 = v3[2] - (_QWORD)v91;
      v93 = (void (*)(unint64_t, unint64_t, unint64_t *, uint64_t))v3[4];
      if (v93)
      {
        if (v92 >= 9)
          v94 = 9;
        else
          v94 = v3[2] - (_QWORD)v91;
        v91 = v3 + 6;
        v93(v3[5], v3[3], v433, v94);
        v84.i64[0] = 0x7F0000007FLL;
        v84.i64[1] = 0x7F0000007FLL;
        v83.i64[0] = 0x800000008;
        v83.i64[1] = 0x800000008;
      }
      v95 = 8 * v92;
      v96 = 48 - v13;
      if (8 * v92 >= 0x41)
      {
        v97 = (v96 & 0xFFFFFFF8) + 8;
        v98 = v97 + v13;
        v99 = (unint64_t *)((char *)v91 + (v97 >> 3));
        v12 = (bswap64(*v91) >> (56 - (v96 & 0xF8u)) << (v96 & 7)) | *v3;
        v85 = a2;
        goto LABEL_76;
      }
      v100 = 56 - v13 - v95;
      if (v100 < 0)
        v98 = v13;
      else
        v98 = v13 + 0x40000000;
      if (v95)
        v101 = 1;
      else
        v101 = v100 <= -1;
      v102 = v100 & ~(v100 >> 31);
      if (!v101 || v96 < v102)
      {
        v99 = v91;
        v85 = a2;
        goto LABEL_76;
      }
      v104 = v102 - 1;
      if (v102 - 1 >= (int)(40 - v13))
        v104 = 40 - v13;
      v105 = 47 - v13 - v104;
      v85 = a2;
      if (v105 < 0x78)
        break;
      v106 = (v105 >> 3) + 1;
      v107 = (int8x16_t)v12;
      v108 = 0uLL;
      v109 = (int32x4_t)v98;
      v110 = vdupq_n_s32(v96);
      v111 = vaddq_s32(v110, (int32x4_t)xmmword_208F3A6C0);
      v99 = (unint64_t *)((char *)v91 + (v106 & 0x3FFFFFF0));
      v112 = vaddq_s32(v110, (int32x4_t)xmmword_208F3A6D0);
      v96 -= 8 * (v106 & 0x3FFFFFF0);
      v113 = vaddq_s32(v110, (int32x4_t)xmmword_208F3A6A0);
      v114 = vaddq_s32(v110, (int32x4_t)xmmword_208F3A6B0);
      v115 = v106 & 0x3FFFFFF0;
      v116 = (uint8x16_t *)v91;
      v117 = 0uLL;
      v118 = 0uLL;
      v119 = 0uLL;
      v120 = 0uLL;
      v121 = 0uLL;
      v122 = 0uLL;
      v123 = 0uLL;
      v124 = 0uLL;
      v125 = 0uLL;
      do
      {
        v126 = *v116++;
        v127 = vmovl_high_u8(v126);
        v128 = vmovl_high_u16(v127);
        v129.i64[0] = v128.u32[0];
        v129.i64[1] = v128.u32[1];
        v130 = v129;
        v131 = vmovl_u16(*(uint16x4_t *)v127.i8);
        v129.i64[0] = v131.u32[2];
        v129.i64[1] = v131.u32[3];
        v132 = v129;
        v133 = vmovl_u8(*(uint8x8_t *)v126.i8);
        v134 = vmovl_high_u16(v133);
        v129.i64[0] = v134.u32[2];
        v129.i64[1] = v134.u32[3];
        v135 = v129;
        v129.i64[0] = v128.u32[2];
        v129.i64[1] = v128.u32[3];
        v136 = v129;
        v129.i64[0] = v131.u32[0];
        v129.i64[1] = v131.u32[1];
        v137 = v129;
        v129.i64[0] = v134.u32[0];
        v129.i64[1] = v134.u32[1];
        v138 = v129;
        v139 = vmovl_u16(*(uint16x4_t *)v133.i8);
        v129.i64[0] = v139.u32[2];
        v129.i64[1] = v139.u32[3];
        v140 = v129;
        v129.i64[0] = v139.u32[0];
        v129.i64[1] = v139.u32[1];
        v141 = v129;
        v129.i64[0] = v114.u32[0];
        v129.i64[1] = v114.u32[1];
        v142 = (int8x16_t)vshlq_u64(v141, v129);
        v129.i64[0] = v114.u32[2];
        v129.i64[1] = v114.u32[3];
        v143 = (int8x16_t)vshlq_u64(v140, v129);
        v129.i64[0] = v113.u32[0];
        v129.i64[1] = v113.u32[1];
        v144 = (int8x16_t)vshlq_u64(v138, v129);
        v129.i64[0] = v112.u32[0];
        v129.i64[1] = v112.u32[1];
        v145 = (int8x16_t)vshlq_u64(v137, v129);
        v129.i64[0] = v111.u32[2];
        v129.i64[1] = v111.u32[3];
        v146 = (int8x16_t)vshlq_u64(v136, v129);
        v129.i64[0] = v113.u32[2];
        v129.i64[1] = v113.u32[3];
        v147 = (int8x16_t)vshlq_u64(v135, v129);
        v129.i64[0] = v112.u32[2];
        v129.i64[1] = v112.u32[3];
        v148 = (int8x16_t)vshlq_u64(v132, v129);
        v129.i64[0] = v111.u32[0];
        v129.i64[1] = v111.u32[1];
        v121 = vorrq_s8((int8x16_t)vshlq_u64(v130, v129), v121);
        v120 = vorrq_s8(v148, v120);
        v118 = vorrq_s8(v147, v118);
        v122 = vorrq_s8(v146, v122);
        v119 = vorrq_s8(v145, v119);
        v117 = vorrq_s8(v144, v117);
        v108 = vorrq_s8(v143, v108);
        v107 = vorrq_s8(v142, v107);
        v109 = vaddq_s32(v109, v83);
        v123 = vaddq_s32(v123, v83);
        v124 = vaddq_s32(v124, v83);
        v125 = vaddq_s32(v125, v83);
        v114 = vaddq_s32(v114, v84);
        v113 = vaddq_s32(v113, v84);
        v112 = vaddq_s32(v112, v84);
        v111 = vaddq_s32(v111, v84);
        v115 -= 16;
      }
      while (v115);
      v98 = vaddvq_s32(vaddq_s32(vaddq_s32(v109, v124), vaddq_s32(v123, v125)));
      v149 = vorrq_s8(vorrq_s8(vorrq_s8(v107, v119), vorrq_s8(v117, v121)), vorrq_s8(vorrq_s8(v108, v120), vorrq_s8(v118, v122)));
      v12 = (unint64_t)vorr_s8(*(int8x8_t *)v149.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v149, v149, 8uLL));
      if ((v106 & 0x3FFFFFF0) != v106)
        goto LABEL_75;
LABEL_76:
      v3[3] += (char *)v99 - (char *)v91;
      v13 = v98;
      v86 = ((v11 - 1) * v89 + 256) >> 8;
      v90 = v12 - (v86 << 56);
      if (v12 < v86 << 56)
      {
LABEL_77:
        v87 = 0;
        goto LABEL_45;
      }
LABEL_44:
      LODWORD(v86) = *((_DWORD *)v3 + 2) - v86;
      v87 = 1;
      v12 = v90;
LABEL_45:
      v88 = vpx_norm[v86];
      v11 = (_DWORD)v86 << v88;
      v12 <<= v88;
      v13 -= v88;
      *v3 = v12;
      *((_DWORD *)v3 + 2) = (_DWORD)v86 << v88;
      *((_DWORD *)v3 + 3) = v13;
      v434 |= v87 << v81++;
      if (v81 == v82)
      {
        v151 = (8 << -(char)v9) | 1;
        goto LABEL_138;
      }
    }
    v99 = v91;
    do
    {
LABEL_75:
      v98 += 8;
      v150 = *(unsigned __int8 *)v99;
      v99 = (unint64_t *)((char *)v99 + 1);
      v12 |= (unint64_t)v150 << v96;
      v96 -= 8;
    }
    while (v96 >= v102);
    goto LABEL_76;
  }
  v161 = ((v11 - 1) * a2[11] + 256) >> 8;
  if ((v13 & 0x80000000) != 0)
  {
    v167 = (unint64_t *)v3[3];
    v168 = v3[2] - (_QWORD)v167;
    v169 = 8 * v168;
    v170 = (void (*)(unint64_t, unint64_t, unint64_t *, uint64_t))v3[4];
    if (v170)
    {
      if (v168 >= 9)
        v171 = 9;
      else
        v171 = v3[2] - (_QWORD)v167;
      v167 = v3 + 6;
      v170(v3[5], v3[3], v433, v171);
    }
    v172 = 48 - v13;
    if (v169 < 0x41)
    {
      v225 = 56 - v169 - v13;
      if (v225 >= 0)
        v13 += 0x40000000;
      if (v169)
        v226 = 1;
      else
        v226 = v225 <= -1;
      v227 = v225 & ~(v225 >> 31);
      if (!v226 || v172 < v227)
      {
        v174 = v167;
        v85 = a2;
      }
      else
      {
        v229 = v18 - v20 + 40;
        if (v229 >= v227 - 1)
          v229 = v227 - 1;
        v230 = v18 - v20 - v229 + 47;
        v174 = v167;
        v231 = v172;
        v85 = a2;
        if (v230 < 0x78)
          goto LABEL_218;
        v232 = (v230 >> 3) + 1;
        v233 = 0uLL;
        v234 = (int8x16_t)v12;
        v235 = (int32x4_t)v13;
        v236 = vdupq_n_s32(v172);
        v237 = vaddq_s32(v236, (int32x4_t)xmmword_208F3A6C0);
        v174 = (unint64_t *)((char *)v167 + (v232 & 0x3FFFFFF0));
        v238 = vaddq_s32(v236, (int32x4_t)xmmword_208F3A6D0);
        v231 = v172 - 8 * (v232 & 0x3FFFFFF0);
        v239 = vaddq_s32(v236, (int32x4_t)xmmword_208F3A6A0);
        v240 = vaddq_s32(v236, (int32x4_t)xmmword_208F3A6B0);
        v241.i64[0] = 0x800000008;
        v241.i64[1] = 0x800000008;
        v242.i64[0] = 0x7F0000007FLL;
        v242.i64[1] = 0x7F0000007FLL;
        v243 = v232 & 0x3FFFFFF0;
        v244 = (uint8x16_t *)v167;
        v245 = 0uLL;
        v246 = 0uLL;
        v247 = 0uLL;
        v248 = 0uLL;
        v249 = 0uLL;
        v250 = 0uLL;
        v251 = 0uLL;
        v252 = 0uLL;
        v253 = 0uLL;
        do
        {
          v254 = *v244++;
          v255 = vmovl_high_u8(v254);
          v256 = vmovl_high_u16(v255);
          v257.i64[0] = v256.u32[0];
          v257.i64[1] = v256.u32[1];
          v258 = v257;
          v259 = vmovl_u16(*(uint16x4_t *)v255.i8);
          v257.i64[0] = v259.u32[2];
          v257.i64[1] = v259.u32[3];
          v260 = v257;
          v261 = vmovl_u8(*(uint8x8_t *)v254.i8);
          v262 = vmovl_high_u16(v261);
          v257.i64[0] = v262.u32[2];
          v257.i64[1] = v262.u32[3];
          v263 = v257;
          v257.i64[0] = v256.u32[2];
          v257.i64[1] = v256.u32[3];
          v264 = v257;
          v257.i64[0] = v259.u32[0];
          v257.i64[1] = v259.u32[1];
          v265 = v257;
          v257.i64[0] = v262.u32[0];
          v257.i64[1] = v262.u32[1];
          v266 = v257;
          v267 = vmovl_u16(*(uint16x4_t *)v261.i8);
          v257.i64[0] = v267.u32[2];
          v257.i64[1] = v267.u32[3];
          v268 = v257;
          v257.i64[0] = v267.u32[0];
          v257.i64[1] = v267.u32[1];
          v269 = v257;
          v257.i64[0] = v240.u32[0];
          v257.i64[1] = v240.u32[1];
          v270 = (int8x16_t)vshlq_u64(v269, v257);
          v257.i64[0] = v240.u32[2];
          v257.i64[1] = v240.u32[3];
          v271 = (int8x16_t)vshlq_u64(v268, v257);
          v257.i64[0] = v239.u32[0];
          v257.i64[1] = v239.u32[1];
          v272 = (int8x16_t)vshlq_u64(v266, v257);
          v257.i64[0] = v238.u32[0];
          v257.i64[1] = v238.u32[1];
          v273 = (int8x16_t)vshlq_u64(v265, v257);
          v257.i64[0] = v237.u32[2];
          v257.i64[1] = v237.u32[3];
          v274 = (int8x16_t)vshlq_u64(v264, v257);
          v257.i64[0] = v239.u32[2];
          v257.i64[1] = v239.u32[3];
          v275 = (int8x16_t)vshlq_u64(v263, v257);
          v257.i64[0] = v238.u32[2];
          v257.i64[1] = v238.u32[3];
          v276 = (int8x16_t)vshlq_u64(v260, v257);
          v257.i64[0] = v237.u32[0];
          v257.i64[1] = v237.u32[1];
          v249 = vorrq_s8((int8x16_t)vshlq_u64(v258, v257), v249);
          v248 = vorrq_s8(v276, v248);
          v246 = vorrq_s8(v275, v246);
          v250 = vorrq_s8(v274, v250);
          v247 = vorrq_s8(v273, v247);
          v245 = vorrq_s8(v272, v245);
          v233 = vorrq_s8(v271, v233);
          v234 = vorrq_s8(v270, v234);
          v235 = vaddq_s32(v235, v241);
          v251 = vaddq_s32(v251, v241);
          v252 = vaddq_s32(v252, v241);
          v253 = vaddq_s32(v253, v241);
          v240 = vaddq_s32(v240, v242);
          v239 = vaddq_s32(v239, v242);
          v238 = vaddq_s32(v238, v242);
          v237 = vaddq_s32(v237, v242);
          v243 -= 16;
        }
        while (v243);
        v13 = vaddvq_s32(vaddq_s32(vaddq_s32(v235, v252), vaddq_s32(v251, v253)));
        v277 = vorrq_s8(vorrq_s8(vorrq_s8(v234, v247), vorrq_s8(v245, v249)), vorrq_s8(vorrq_s8(v233, v248), vorrq_s8(v246, v250)));
        v12 = (unint64_t)vorr_s8(*(int8x8_t *)v277.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v277, v277, 8uLL));
        if ((v232 & 0x3FFFFFF0) != v232)
        {
LABEL_218:
          do
          {
            v13 += 8;
            v278 = *(unsigned __int8 *)v174;
            v174 = (unint64_t *)((char *)v174 + 1);
            v12 |= (unint64_t)v278 << v231;
            v231 -= 8;
          }
          while (v231 >= v227);
        }
      }
    }
    else
    {
      v173 = (v172 & 0xFFFFFFF8) + 8;
      v13 += v173;
      v174 = (unint64_t *)((char *)v167 + (v173 >> 3));
      v12 = (bswap64(*v167) >> (56 - (v172 & 0xF8u)) << (v172 & 7)) | *v3;
      v85 = a2;
    }
    v3[3] += (char *)v174 - (char *)v167;
    v162 = v12 - (v161 << 56);
    if (v12 >= v161 << 56)
      goto LABEL_136;
LABEL_88:
    v434 = 0;
  }
  else
  {
    v85 = a2;
    v162 = v12 - (v161 << 56);
    if (v12 < v161 << 56)
      goto LABEL_88;
LABEL_136:
    LODWORD(v161) = *((_DWORD *)v3 + 2) - v161;
    v434 = 1;
    v12 = v162;
  }
  v279 = vpx_norm[v161];
  v11 = (_DWORD)v161 << v279;
  v12 <<= v279;
  *v3 = v12;
  v13 -= v279;
  *((_DWORD *)v3 + 2) = (_DWORD)v161 << v279;
  *((_DWORD *)v3 + 3) = v13;
  v151 = 1;
LABEL_138:
  v427 = v151;
  LOBYTE(v280) = 0;
  if ((_DWORD)v9)
    v281 = (uint64_t)(v85 + 28);
  else
    v281 = (uint64_t)&v85[3 * v434 + 22];
  v282.i64[0] = 0x800000008;
  v282.i64[1] = 0x800000008;
  v283.i64[0] = 0x7F0000007FLL;
  v283.i64[1] = 0x7F0000007FLL;
  v284 = (char *)&vp9_mv_fp_tree;
  v432 = v3;
  while (2)
  {
    v288 = *(unsigned __int8 *)(v281 + (v280 >> 1));
    if ((v13 & 0x80000000) != 0)
    {
      v291 = (unint64_t *)v3[3];
      v292 = v3[2] - (_QWORD)v291;
      v293 = (void (*)(unint64_t, unint64_t, unint64_t *, uint64_t))v3[4];
      if (v293)
      {
        if (v292 >= 9)
          v294 = 9;
        else
          v294 = v3[2] - (_QWORD)v291;
        v295 = v9;
        v296 = v284;
        v297 = v3[5];
        v298 = v3[3];
        v291 = v433;
        v299 = *(unsigned __int8 *)(v281 + (v280 >> 1));
        v293(v297, v298, v433, v294);
        v288 = v299;
        v284 = v296;
        v9 = v295;
        v283.i64[0] = 0x7F0000007FLL;
        v283.i64[1] = 0x7F0000007FLL;
        v282.i64[0] = 0x800000008;
        v282.i64[1] = 0x800000008;
      }
      v300 = 8 * v292;
      v301 = 48 - v13;
      if (8 * v292 >= 0x41)
      {
        v302 = (v301 & 0xFFFFFFF8) + 8;
        v289 = v302 + v13;
        v303 = (unint64_t *)((char *)v291 + (v302 >> 3));
        v3 = v432;
        v12 = (bswap64(*v291) >> (56 - (v301 & 0xF8u)) << (v301 & 7)) | *v432;
        goto LABEL_174;
      }
      v304 = 56 - v13 - v300;
      if (v304 < 0)
        v289 = v13;
      else
        v289 = v13 + 0x40000000;
      if (v300)
        v305 = 1;
      else
        v305 = v304 <= -1;
      v306 = v304 & ~(v304 >> 31);
      if (!v305 || v301 < v306)
      {
        v303 = v291;
        v3 = v432;
        goto LABEL_174;
      }
      v308 = v306 - 1;
      if (v306 - 1 >= (int)(40 - v13))
        v308 = 40 - v13;
      v309 = 47 - v13 - v308;
      if (v309 >= 0x78)
      {
        v310 = (v309 >> 3) + 1;
        v311 = (int8x16_t)v12;
        v312 = 0uLL;
        v313 = (int32x4_t)v289;
        v314 = vdupq_n_s32(v301);
        v315 = vaddq_s32(v314, (int32x4_t)xmmword_208F3A6C0);
        v303 = (unint64_t *)((char *)v291 + (v310 & 0x3FFFFFF0));
        v316 = vaddq_s32(v314, (int32x4_t)xmmword_208F3A6D0);
        v301 -= 8 * (v310 & 0x3FFFFFF0);
        v317 = vaddq_s32(v314, (int32x4_t)xmmword_208F3A6A0);
        v318 = vaddq_s32(v314, (int32x4_t)xmmword_208F3A6B0);
        v319 = v310 & 0x3FFFFFF0;
        v320 = (uint8x16_t *)v291;
        v321 = 0uLL;
        v322 = 0uLL;
        v323 = 0uLL;
        v324 = 0uLL;
        v325 = 0uLL;
        v326 = 0uLL;
        v327 = 0uLL;
        v328 = 0uLL;
        v329 = 0uLL;
        do
        {
          v330 = *v320++;
          v331 = vmovl_high_u8(v330);
          v332 = vmovl_high_u16(v331);
          v333.i64[0] = v332.u32[0];
          v333.i64[1] = v332.u32[1];
          v334 = v333;
          v335 = vmovl_u16(*(uint16x4_t *)v331.i8);
          v333.i64[0] = v335.u32[2];
          v333.i64[1] = v335.u32[3];
          v336 = v333;
          v337 = vmovl_u8(*(uint8x8_t *)v330.i8);
          v338 = vmovl_high_u16(v337);
          v333.i64[0] = v338.u32[2];
          v333.i64[1] = v338.u32[3];
          v339 = v333;
          v333.i64[0] = v332.u32[2];
          v333.i64[1] = v332.u32[3];
          v340 = v333;
          v333.i64[0] = v335.u32[0];
          v333.i64[1] = v335.u32[1];
          v341 = v333;
          v333.i64[0] = v338.u32[0];
          v333.i64[1] = v338.u32[1];
          v342 = v333;
          v343 = vmovl_u16(*(uint16x4_t *)v337.i8);
          v333.i64[0] = v343.u32[2];
          v333.i64[1] = v343.u32[3];
          v344 = v333;
          v333.i64[0] = v343.u32[0];
          v333.i64[1] = v343.u32[1];
          v345 = v333;
          v333.i64[0] = v318.u32[0];
          v333.i64[1] = v318.u32[1];
          v346 = (int8x16_t)vshlq_u64(v345, v333);
          v333.i64[0] = v318.u32[2];
          v333.i64[1] = v318.u32[3];
          v347 = (int8x16_t)vshlq_u64(v344, v333);
          v333.i64[0] = v317.u32[0];
          v333.i64[1] = v317.u32[1];
          v348 = (int8x16_t)vshlq_u64(v342, v333);
          v333.i64[0] = v316.u32[0];
          v333.i64[1] = v316.u32[1];
          v349 = (int8x16_t)vshlq_u64(v341, v333);
          v333.i64[0] = v315.u32[2];
          v333.i64[1] = v315.u32[3];
          v350 = (int8x16_t)vshlq_u64(v340, v333);
          v333.i64[0] = v317.u32[2];
          v333.i64[1] = v317.u32[3];
          v351 = (int8x16_t)vshlq_u64(v339, v333);
          v333.i64[0] = v316.u32[2];
          v333.i64[1] = v316.u32[3];
          v352 = (int8x16_t)vshlq_u64(v336, v333);
          v333.i64[0] = v315.u32[0];
          v333.i64[1] = v315.u32[1];
          v325 = vorrq_s8((int8x16_t)vshlq_u64(v334, v333), v325);
          v324 = vorrq_s8(v352, v324);
          v322 = vorrq_s8(v351, v322);
          v326 = vorrq_s8(v350, v326);
          v323 = vorrq_s8(v349, v323);
          v321 = vorrq_s8(v348, v321);
          v312 = vorrq_s8(v347, v312);
          v311 = vorrq_s8(v346, v311);
          v313 = vaddq_s32(v313, v282);
          v327 = vaddq_s32(v327, v282);
          v328 = vaddq_s32(v328, v282);
          v329 = vaddq_s32(v329, v282);
          v318 = vaddq_s32(v318, v283);
          v317 = vaddq_s32(v317, v283);
          v316 = vaddq_s32(v316, v283);
          v315 = vaddq_s32(v315, v283);
          v319 -= 16;
        }
        while (v319);
        v289 = vaddvq_s32(vaddq_s32(vaddq_s32(v313, v328), vaddq_s32(v327, v329)));
        v353 = vorrq_s8(vorrq_s8(vorrq_s8(v311, v323), vorrq_s8(v321, v325)), vorrq_s8(vorrq_s8(v312, v324), vorrq_s8(v322, v326)));
        v12 = (unint64_t)vorr_s8(*(int8x8_t *)v353.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v353, v353, 8uLL));
        v3 = v432;
        if ((v310 & 0x3FFFFFF0) == v310)
        {
LABEL_174:
          v3[3] += (char *)v303 - (char *)v291;
          v285 = ((v11 - 1) * v288 + 256) >> 8;
          v290 = v12 - (v285 << 56);
          if (v12 < v285 << 56)
            goto LABEL_175;
          goto LABEL_142;
        }
      }
      else
      {
        v303 = v291;
        v3 = v432;
      }
      do
      {
        v289 += 8;
        v354 = *(unsigned __int8 *)v303;
        v303 = (unint64_t *)((char *)v303 + 1);
        v12 |= (unint64_t)v354 << v301;
        v301 -= 8;
      }
      while (v301 >= v306);
      goto LABEL_174;
    }
    v289 = v13;
    v285 = ((v11 - 1) * v288 + 256) >> 8;
    v290 = v12 - (v285 << 56);
    if (v12 >= v285 << 56)
    {
LABEL_142:
      LODWORD(v285) = *((_DWORD *)v3 + 2) - v285;
      v286 = 1;
      v12 = v290;
      goto LABEL_143;
    }
LABEL_175:
    v286 = 0;
LABEL_143:
    v287 = vpx_norm[v285];
    v11 = (_DWORD)v285 << v287;
    v12 <<= v287;
    v13 = v289 - v287;
    *v3 = v12;
    *((_DWORD *)v3 + 2) = (_DWORD)v285 << v287;
    *((_DWORD *)v3 + 3) = v289 - v287;
    v280 = v284[v286 + (unint64_t)v280];
    if (v280 > 0)
      continue;
    break;
  }
  if (a3)
  {
    v355 = 31;
    if ((_DWORD)v9)
      v355 = 32;
    v356 = ((v11 - 1) * a2[v355] + 256) >> 8;
    if ((v13 & 0x80000000) == 0)
    {
      v358 = v428;
      v357 = v429;
      v359 = v427;
      v360 = v12 - (v356 << 56);
      if (v12 < v356 << 56)
        goto LABEL_181;
LABEL_210:
      LODWORD(v356) = *((_DWORD *)v3 + 2) - v356;
      v361 = 1;
      v12 = v360;
      goto LABEL_211;
    }
    v362 = v3[3];
    v363 = v3[2] - v362;
    v364 = 8 * v363;
    v365 = (void (*)(unint64_t, unint64_t, unint64_t *, uint64_t))v3[4];
    if (v365)
    {
      if (v363 >= 9)
        v366 = 9;
      else
        v366 = v3[2] - v362;
      v365(v3[5], v362, v433, v366);
      v367 = 48 - v13;
      if (v364 >= 0x41)
      {
LABEL_188:
        v368 = (v367 & 0xFFFFFFF8) + 8;
        v13 += v368;
        v369 = (unint64_t *)((char *)v433 + (v368 >> 3));
        v12 = (bswap64(*v433) >> (56 - (v367 & 0xF8u)) << (v367 & 7)) | *v3;
        v357 = v429;
        goto LABEL_201;
      }
    }
    else
    {
      v433 = (unint64_t *)v3[3];
      v367 = 48 - v13;
      if (v364 >= 0x41)
        goto LABEL_188;
    }
    v370 = 56 - v364 - v13;
    if (v370 >= 0)
      v13 += 0x40000000;
    if (v364)
      v371 = 1;
    else
      v371 = v370 <= -1;
    v372 = v370 & ~(v370 >> 31);
    v373 = !v371 || v367 < v372;
    v357 = v429;
    if (v373)
    {
      v369 = v433;
LABEL_201:
      v358 = v428;
      v359 = v427;
    }
    else
    {
      v374 = v287 - v289 + 40;
      if (v374 >= v372 - 1)
        v374 = v372 - 1;
      v375 = v287 - v289 - v374 + 47;
      v369 = v433;
      v376 = v367;
      v358 = v428;
      v359 = v427;
      if (v375 < 0x78)
        goto LABEL_219;
      v377 = (v375 >> 3) + 1;
      v378 = 0uLL;
      v379 = (int8x16_t)v12;
      v380 = (int32x4_t)v13;
      v381 = vdupq_n_s32(v367);
      v382 = vaddq_s32(v381, (int32x4_t)xmmword_208F3A6C0);
      v383 = (uint8x16_t *)v433;
      v369 = (unint64_t *)((char *)v433 + (v377 & 0x3FFFFFF0));
      v384 = vaddq_s32(v381, (int32x4_t)xmmword_208F3A6D0);
      v376 = v367 - 8 * (v377 & 0x3FFFFFF0);
      v385 = vaddq_s32(v381, (int32x4_t)xmmword_208F3A6A0);
      v386 = vaddq_s32(v381, (int32x4_t)xmmword_208F3A6B0);
      v387.i64[0] = 0x800000008;
      v387.i64[1] = 0x800000008;
      v388.i64[0] = 0x7F0000007FLL;
      v388.i64[1] = 0x7F0000007FLL;
      v389 = v377 & 0x3FFFFFF0;
      v390 = 0uLL;
      v391 = 0uLL;
      v392 = 0uLL;
      v393 = 0uLL;
      v394 = 0uLL;
      v395 = 0uLL;
      v396 = 0uLL;
      v397 = 0uLL;
      v398 = 0uLL;
      do
      {
        v399 = *v383++;
        v400 = vmovl_high_u8(v399);
        v401 = vmovl_high_u16(v400);
        v402.i64[0] = v401.u32[0];
        v402.i64[1] = v401.u32[1];
        v403 = v402;
        v404 = vmovl_u16(*(uint16x4_t *)v400.i8);
        v402.i64[0] = v404.u32[2];
        v402.i64[1] = v404.u32[3];
        v405 = v402;
        v406 = vmovl_u8(*(uint8x8_t *)v399.i8);
        v407 = vmovl_high_u16(v406);
        v402.i64[0] = v407.u32[2];
        v402.i64[1] = v407.u32[3];
        v408 = v402;
        v402.i64[0] = v401.u32[2];
        v402.i64[1] = v401.u32[3];
        v409 = v402;
        v402.i64[0] = v404.u32[0];
        v402.i64[1] = v404.u32[1];
        v410 = v402;
        v402.i64[0] = v407.u32[0];
        v402.i64[1] = v407.u32[1];
        v411 = v402;
        v412 = vmovl_u16(*(uint16x4_t *)v406.i8);
        v402.i64[0] = v412.u32[2];
        v402.i64[1] = v412.u32[3];
        v413 = v402;
        v402.i64[0] = v412.u32[0];
        v402.i64[1] = v412.u32[1];
        v414 = v402;
        v402.i64[0] = v386.u32[0];
        v402.i64[1] = v386.u32[1];
        v415 = (int8x16_t)vshlq_u64(v414, v402);
        v402.i64[0] = v386.u32[2];
        v402.i64[1] = v386.u32[3];
        v416 = (int8x16_t)vshlq_u64(v413, v402);
        v402.i64[0] = v385.u32[0];
        v402.i64[1] = v385.u32[1];
        v417 = (int8x16_t)vshlq_u64(v411, v402);
        v402.i64[0] = v384.u32[0];
        v402.i64[1] = v384.u32[1];
        v418 = (int8x16_t)vshlq_u64(v410, v402);
        v402.i64[0] = v382.u32[2];
        v402.i64[1] = v382.u32[3];
        v419 = (int8x16_t)vshlq_u64(v409, v402);
        v402.i64[0] = v385.u32[2];
        v402.i64[1] = v385.u32[3];
        v420 = (int8x16_t)vshlq_u64(v408, v402);
        v402.i64[0] = v384.u32[2];
        v402.i64[1] = v384.u32[3];
        v421 = (int8x16_t)vshlq_u64(v405, v402);
        v402.i64[0] = v382.u32[0];
        v402.i64[1] = v382.u32[1];
        v394 = vorrq_s8((int8x16_t)vshlq_u64(v403, v402), v394);
        v393 = vorrq_s8(v421, v393);
        v391 = vorrq_s8(v420, v391);
        v395 = vorrq_s8(v419, v395);
        v392 = vorrq_s8(v418, v392);
        v390 = vorrq_s8(v417, v390);
        v378 = vorrq_s8(v416, v378);
        v379 = vorrq_s8(v415, v379);
        v380 = vaddq_s32(v380, v387);
        v396 = vaddq_s32(v396, v387);
        v397 = vaddq_s32(v397, v387);
        v398 = vaddq_s32(v398, v387);
        v386 = vaddq_s32(v386, v388);
        v385 = vaddq_s32(v385, v388);
        v384 = vaddq_s32(v384, v388);
        v382 = vaddq_s32(v382, v388);
        v389 -= 16;
      }
      while (v389);
      v13 = vaddvq_s32(vaddq_s32(vaddq_s32(v380, v397), vaddq_s32(v396, v398)));
      v422 = vorrq_s8(vorrq_s8(vorrq_s8(v379, v392), vorrq_s8(v390, v394)), vorrq_s8(vorrq_s8(v378, v393), vorrq_s8(v391, v395)));
      v12 = (unint64_t)vorr_s8(*(int8x8_t *)v422.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v422, v422, 8uLL));
      if ((v377 & 0x3FFFFFF0) != v377)
      {
LABEL_219:
        do
        {
          v13 += 8;
          v423 = *(unsigned __int8 *)v369;
          v369 = (unint64_t *)((char *)v369 + 1);
          v12 |= (unint64_t)v423 << v376;
          v376 -= 8;
        }
        while (v376 >= v372);
      }
    }
    v3[3] += (char *)v369 - (char *)v433;
    v360 = v12 - (v356 << 56);
    if (v12 >= v356 << 56)
      goto LABEL_210;
LABEL_181:
    v361 = 0;
LABEL_211:
    v424 = vpx_norm[v356];
    *v3 = v12 << v424;
    *((_DWORD *)v3 + 2) = (_DWORD)v356 << v424;
    *((_DWORD *)v3 + 3) = v13 - v424;
  }
  else
  {
    v361 = 1;
    v358 = v428;
    v357 = v429;
    v359 = v427;
  }
  v425 = ((-2 * v280) | (8 * v434) | v361) + v359;
  if (v357 < v358)
    return v425;
  else
    return -v425;
}

void vp9_dec_alloc_row_mt_mem(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  size_t v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  size_t v17;
  void *v18;
  unint64_t *v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void **v29;
  size_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  void **v36;
  void *v37;
  unint64_t v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  void **v42;
  void *v43;
  unint64_t v44;
  size_t v45;
  void *v46;
  unint64_t v47;
  size_t v48;
  size_t v49;
  void *v50;
  unint64_t v51;
  size_t v52;
  void *v53;
  unint64_t v54;

  *(_DWORD *)(a1 + 252) = a5;
  v11 = ((uint64_t)a5 << 6) | 0x17;
  if (v11 > 0x10000000000 || (v12 = malloc_type_malloc(v11, 0x74AD08B5uLL)) == 0)
  {
    v13 = (unint64_t *)(a1 + 320);
    *(_QWORD *)(a1 + 320) = 0;
LABEL_7:
    vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->recon_sync_mutex");
    v14 = *v13;
    v15 = a3 << 12;
    if (a5 < 1)
      goto LABEL_11;
    goto LABEL_8;
  }
  v13 = (unint64_t *)(a1 + 320);
  v14 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v14 - 8) = v12;
  *(_QWORD *)(a1 + 320) = v14;
  if (!v14)
    goto LABEL_7;
  v15 = a3 << 12;
  if (a5 < 1)
    goto LABEL_11;
LABEL_8:
  if (v14)
  {
    v16 = 0;
    do
    {
      pthread_mutex_init((pthread_mutex_t *)(*v13 + v16), 0);
      v16 += 64;
    }
    while ((unint64_t)a5 << 6 != v16);
  }
LABEL_11:
  v17 = 48 * a5 + 23;
  if (v17 > 0x10000000000 || (v18 = malloc_type_malloc(v17, 0x74AD08B5uLL)) == 0)
  {
    v19 = (unint64_t *)(a1 + 328);
    *(_QWORD *)(a1 + 328) = 0;
LABEL_17:
    vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->recon_sync_cond");
    v20 = *v19;
    v21 = 4 * v15;
    if (a5 < 1)
      goto LABEL_21;
    goto LABEL_18;
  }
  v19 = (unint64_t *)(a1 + 328);
  v20 = ((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v20 - 8) = v18;
  *(_QWORD *)(a1 + 328) = v20;
  if (!v20)
    goto LABEL_17;
  v21 = 4 * v15;
  if (a5 < 1)
    goto LABEL_21;
LABEL_18:
  if (v20)
  {
    v22 = 0;
    v23 = 48 * a5;
    do
    {
      pthread_cond_init((pthread_cond_t *)(*v19 + v22), 0);
      v22 += 48;
    }
    while (v23 != v22);
  }
LABEL_21:
  *(_DWORD *)a1 = a3;
  v24 = a3 << 8;
  v25 = v21 | 0x27;
  if ((v21 | 0x27) <= 0x10000000000 && (v26 = malloc_type_malloc(v21 | 0x27, 0x74AD08B5uLL)) != 0)
  {
    v27 = v26;
    v28 = (_QWORD *)(((unint64_t)v26 + 39) & 0xFFFFFFFFFFFFFFE0);
    *(v28 - 1) = v27;
    *(_QWORD *)(a1 + 40) = v28;
    v29 = (void **)(a1 + 40);
    if (v28)
    {
      bzero(v28, v21);
      v30 = 4 * v24;
      if ((v24 & 0x80000000) != 0)
        goto LABEL_33;
      goto LABEL_28;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
    v29 = (void **)(a1 + 40);
  }
  vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->dqcoeff[plane]");
  bzero(*v29, v21);
  v30 = 4 * v24;
  if ((v24 & 0x80000000) != 0)
    goto LABEL_33;
LABEL_28:
  if ((v30 | 0x17) <= 0x10000000000)
  {
    v31 = malloc_type_malloc(v30 | 0x17, 0x74AD08B5uLL);
    if (v31)
    {
      v32 = ((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v32 - 8) = v31;
      if (v32)
      {
        bzero((void *)(((unint64_t)v31 + 23) & 0xFFFFFFFFFFFFFFF0), v30);
        *(_QWORD *)(a1 + 8) = v32;
        if (v25 > 0x10000000000)
          goto LABEL_38;
        goto LABEL_34;
      }
    }
  }
LABEL_33:
  *(_QWORD *)(a1 + 8) = 0;
  vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->eob[plane]");
  if (v25 > 0x10000000000)
  {
LABEL_38:
    *(_QWORD *)(a1 + 48) = 0;
    v36 = (void **)(a1 + 48);
    goto LABEL_39;
  }
LABEL_34:
  v33 = malloc_type_malloc(v21 | 0x27, 0x74AD08B5uLL);
  if (!v33)
    goto LABEL_38;
  v34 = v33;
  v35 = (_QWORD *)(((unint64_t)v33 + 39) & 0xFFFFFFFFFFFFFFE0);
  *(v35 - 1) = v34;
  *(_QWORD *)(a1 + 48) = v35;
  v36 = (void **)(a1 + 48);
  if (v35)
  {
    bzero(v35, v21);
    if ((v24 & 0x80000000) != 0)
      goto LABEL_45;
    goto LABEL_40;
  }
LABEL_39:
  vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->dqcoeff[plane]");
  bzero(*v36, v21);
  if ((v24 & 0x80000000) != 0)
    goto LABEL_45;
LABEL_40:
  if ((v30 | 0x17) <= 0x10000000000)
  {
    v37 = malloc_type_malloc(v30 | 0x17, 0x74AD08B5uLL);
    if (v37)
    {
      v38 = ((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v38 - 8) = v37;
      if (v38)
      {
        bzero((void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF0), v30);
        *(_QWORD *)(a1 + 16) = v38;
        if (v25 > 0x10000000000)
          goto LABEL_50;
        goto LABEL_46;
      }
    }
  }
LABEL_45:
  *(_QWORD *)(a1 + 16) = 0;
  vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->eob[plane]");
  if (v25 > 0x10000000000)
  {
LABEL_50:
    *(_QWORD *)(a1 + 56) = 0;
    v42 = (void **)(a1 + 56);
LABEL_51:
    vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->dqcoeff[plane]");
    bzero(*v42, v21);
    if ((v24 & 0x80000000) != 0)
      goto LABEL_57;
    goto LABEL_52;
  }
LABEL_46:
  v39 = malloc_type_malloc(v21 | 0x27, 0x74AD08B5uLL);
  if (!v39)
    goto LABEL_50;
  v40 = v39;
  v41 = (_QWORD *)(((unint64_t)v39 + 39) & 0xFFFFFFFFFFFFFFE0);
  *(v41 - 1) = v40;
  *(_QWORD *)(a1 + 56) = v41;
  v42 = (void **)(a1 + 56);
  if (!v41)
    goto LABEL_51;
  bzero(v41, v21);
  if ((v24 & 0x80000000) != 0)
    goto LABEL_57;
LABEL_52:
  if ((v30 | 0x17) > 0x10000000000
    || (v43 = malloc_type_malloc(v30 | 0x17, 0x74AD08B5uLL)) == 0
    || (v44 = ((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v44 - 8) = v43, !v44))
  {
LABEL_57:
    *(_QWORD *)(a1 + 24) = 0;
    vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->eob[plane]");
    if (a3 < 0)
      goto LABEL_63;
    goto LABEL_58;
  }
  bzero((void *)(((unint64_t)v43 + 23) & 0xFFFFFFFFFFFFFFF0), v30);
  *(_QWORD *)(a1 + 24) = v44;
  if (a3 < 0)
    goto LABEL_63;
LABEL_58:
  v45 = 340 * a3 + 23;
  if (v45 > 0x10000000000
    || (v46 = malloc_type_malloc(v45, 0x74AD08B5uLL)) == 0
    || (v47 = ((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v47 - 8) = v46, !v47))
  {
LABEL_63:
    *(_QWORD *)(a1 + 32) = 0;
    vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->partition");
    v48 = a3;
    if (!a3)
      goto LABEL_62;
    goto LABEL_64;
  }
  bzero((void *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF0), 340 * a3);
  *(_QWORD *)(a1 + 32) = v47;
  v48 = a3;
  if (!a3)
  {
LABEL_62:
    v49 = 23;
    goto LABEL_66;
  }
LABEL_64:
  if (a3 < 0 || (v49 = v48 + 23, v48 + 23 > 0x10000000000))
  {
LABEL_70:
    *(_QWORD *)(a1 + 64) = 0;
    vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->recon_map");
    if (*(_QWORD *)(a1 + 336))
      return;
    goto LABEL_72;
  }
LABEL_66:
  v50 = malloc_type_malloc(v49, 0x74AD08B5uLL);
  if (!v50)
    goto LABEL_70;
  v51 = ((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v51 - 8) = v50;
  if (!v51)
    goto LABEL_70;
  bzero((void *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0), v48);
  *(_QWORD *)(a1 + 64) = v51;
  if (*(_QWORD *)(a1 + 336))
    return;
LABEL_72:
  v52 = 24 * a4 + 39;
  if (v52 > 0x10000000000 || (v53 = malloc_type_malloc(v52, 0x74AD08B5uLL)) == 0)
  {
    *(_QWORD *)(a1 + 336) = 0;
LABEL_77:
    vpx_internal_error(a2, 2, "Failed to allocate row_mt_worker_data->thread_data");
    return;
  }
  v54 = ((unint64_t)v53 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v54 - 8) = v53;
  *(_QWORD *)(a1 + 336) = v54;
  if (!v54)
    goto LABEL_77;
}

void vp9_dec_free_row_mt_mem(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 320);
    if (v2)
    {
      if (*(int *)(a1 + 252) < 1)
        goto LABEL_7;
      v3 = 0;
      v4 = 0;
      do
      {
        pthread_mutex_destroy((pthread_mutex_t *)(*(_QWORD *)(a1 + 320) + v3));
        ++v4;
        v3 += 64;
      }
      while (v4 < *(int *)(a1 + 252));
      v2 = *(_QWORD *)(a1 + 320);
      if (v2)
LABEL_7:
        free(*(void **)(v2 - 8));
      *(_QWORD *)(a1 + 320) = 0;
    }
    v5 = *(_QWORD *)(a1 + 328);
    if (v5)
    {
      if (*(int *)(a1 + 252) < 1)
        goto LABEL_14;
      v6 = 0;
      v7 = 0;
      do
      {
        pthread_cond_destroy((pthread_cond_t *)(*(_QWORD *)(a1 + 328) + v6));
        ++v7;
        v6 += 48;
      }
      while (v7 < *(int *)(a1 + 252));
      v5 = *(_QWORD *)(a1 + 328);
      if (v5)
LABEL_14:
        free(*(void **)(v5 - 8));
      *(_QWORD *)(a1 + 328) = 0;
    }
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
      free(*(void **)(v8 - 8));
    *(_QWORD *)(a1 + 8) = 0;
    v9 = *(_QWORD *)(a1 + 40);
    if (v9)
      free(*(void **)(v9 - 8));
    *(_QWORD *)(a1 + 40) = 0;
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      free(*(void **)(v10 - 8));
    *(_QWORD *)(a1 + 16) = 0;
    v11 = *(_QWORD *)(a1 + 48);
    if (v11)
      free(*(void **)(v11 - 8));
    *(_QWORD *)(a1 + 48) = 0;
    v12 = *(_QWORD *)(a1 + 24);
    if (v12)
      free(*(void **)(v12 - 8));
    *(_QWORD *)(a1 + 24) = 0;
    v13 = *(_QWORD *)(a1 + 56);
    if (v13)
      free(*(void **)(v13 - 8));
    *(_QWORD *)(a1 + 56) = 0;
    v14 = *(_QWORD *)(a1 + 32);
    if (v14)
      free(*(void **)(v14 - 8));
    *(_QWORD *)(a1 + 32) = 0;
    v15 = *(_QWORD *)(a1 + 64);
    if (v15)
      free(*(void **)(v15 - 8));
    *(_QWORD *)(a1 + 64) = 0;
    v16 = *(_QWORD *)(a1 + 336);
    if (v16)
      free(*(void **)(v16 - 8));
    *(_QWORD *)(a1 + 336) = 0;
  }
}

int *vp9_decoder_create(uint64_t a1)
{
  void *v2;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  int *__attribute__((__org_typedef(jmp_buf))) v13;
  int *v14;

  v2 = malloc_type_malloc(0x5117uLL, 0x74AD08B5uLL);
  if (!v2)
    return 0;
  *(_QWORD *)((((unint64_t)v2 + 39) & 0xFFFFFFFFFFFFFFE0) - 8) = v2;
  v14 = (int *)(((unint64_t)v2 + 39) & 0xFFFFFFFFFFFFFFE0);
  if (!v14)
    return 0;
  v13 = v14 + 164;
  if (v14 == (int *)-656)
    return 0;
  bzero(v14, 0x50F0uLL);
  if (setjmp(v14 + 187))
  {
    v14[186] = 0;
    vp9_decoder_remove((uint64_t)v14);
    return 0;
  }
  v14[186] = 1;
  v4 = malloc_type_malloc(0x813uLL, 0x74AD08B5uLL);
  if (v4 && (v5 = v4, v6 = (void *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0), *((_QWORD *)v6 - 1) = v5, v6))
  {
    v7 = v6;
    bzero(v6, 0x7FCuLL);
    *((_QWORD *)v14 + 695) = v7;
    if (!*((_QWORD *)v14 + 695))
      goto LABEL_12;
  }
  else
  {
    *((_QWORD *)v14 + 695) = 0;
    if (!*((_QWORD *)v14 + 695))
LABEL_12:
      vpx_internal_error((uint64_t)v13, 2, "Failed to allocate cm->fc", v13);
  }
  v8 = malloc_type_malloc(0x2007uLL, 0x74AD08B5uLL);
  if (v8
    && (v9 = v8, v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0), *((_QWORD *)v10 - 1) = v9, v10))
  {
    v11 = v10;
    bzero(v10, 0x1FF0uLL);
    *((_QWORD *)v13 + 614) = v11;
    if (!*((_QWORD *)v13 + 614))
      goto LABEL_18;
  }
  else
  {
    *((_QWORD *)v13 + 614) = 0;
    if (!*((_QWORD *)v13 + 614))
LABEL_18:
      vpx_internal_error((uint64_t)v13, 2, "Failed to allocate cm->frame_contexts", v13);
  }
  v14[5172] = 1;
  pthread_once(&once_lock_3, (void (*)(void))initialize_dec_0);
  *(_QWORD *)&v12 = -1;
  *((_QWORD *)&v12 + 1) = -1;
  *((_OWORD *)v13 + 22) = v12;
  *((_OWORD *)v13 + 23) = v12;
  *((_OWORD *)v13 + 24) = v12;
  *((_OWORD *)v13 + 25) = v12;
  *(_QWORD *)(v13 + 4537) = 0;
  v14[4736] = 1;
  *((_QWORD *)v14 + 2363) = a1;
  v13[4540] = 8;
  v13[4541] = 8;
  *((_QWORD *)v13 + 181) = vp9_dec_alloc_mi;
  *((_QWORD *)v13 + 182) = vp9_dec_free_mi;
  *((_QWORD *)v13 + 183) = vp9_dec_setup_mi;
  update_sharpness((uint64_t)(v13 + 392), v13[1184]);
  v13[1185] = v13[1184];
  *((_QWORD *)v13 + 201) = 0;
  *((_QWORD *)v13 + 200) = 0;
  *((_QWORD *)v13 + 207) = 0;
  *((_QWORD *)v13 + 206) = 0;
  *((_QWORD *)v13 + 213) = 0;
  *((_QWORD *)v13 + 212) = 0;
  *((_QWORD *)v13 + 219) = 0;
  *((_QWORD *)v13 + 218) = 0;
  *((_QWORD *)v13 + 225) = 0;
  *((_QWORD *)v13 + 224) = 0;
  *((_QWORD *)v13 + 231) = 0;
  *((_QWORD *)v13 + 230) = 0;
  *((_QWORD *)v13 + 237) = 0;
  *((_QWORD *)v13 + 236) = 0;
  *((_QWORD *)v13 + 242) = 0;
  *((_QWORD *)v13 + 243) = 0;
  *((_QWORD *)v13 + 248) = 0;
  *((_QWORD *)v13 + 249) = 0;
  *((_QWORD *)v13 + 255) = 0;
  *((_QWORD *)v13 + 254) = 0;
  *((_QWORD *)v13 + 260) = 0;
  *((_QWORD *)v13 + 261) = 0;
  *((_QWORD *)v13 + 266) = 0;
  *((_QWORD *)v13 + 267) = 0;
  *((_QWORD *)v13 + 272) = 0;
  *((_QWORD *)v13 + 273) = 0;
  *((_QWORD *)v13 + 278) = 0;
  *((_QWORD *)v13 + 279) = 0;
  *((_QWORD *)v13 + 284) = 0;
  *((_QWORD *)v13 + 285) = 0;
  *((_QWORD *)v13 + 290) = 0;
  *((_QWORD *)v13 + 291) = 0;
  *((_QWORD *)v13 + 296) = 0x101010101010101;
  *((_QWORD *)v13 + 297) = 0x101010101010101;
  *((_QWORD *)v13 + 303) = 0x101010101010101;
  *((_QWORD *)v13 + 302) = 0x101010101010101;
  *((_QWORD *)v13 + 309) = 0x101010101010101;
  *((_QWORD *)v13 + 308) = 0x101010101010101;
  *((_QWORD *)v13 + 315) = 0x101010101010101;
  *((_QWORD *)v13 + 314) = 0x101010101010101;
  *((_QWORD *)v13 + 321) = 0x101010101010101;
  *((_QWORD *)v13 + 320) = 0x101010101010101;
  *((_QWORD *)v13 + 327) = 0x101010101010101;
  *((_QWORD *)v13 + 326) = 0x101010101010101;
  *((_QWORD *)v13 + 333) = 0x101010101010101;
  *((_QWORD *)v13 + 332) = 0x101010101010101;
  *((_QWORD *)v13 + 339) = 0x101010101010101;
  *((_QWORD *)v13 + 338) = 0x101010101010101;
  *((_QWORD *)v13 + 345) = 0x101010101010101;
  *((_QWORD *)v13 + 344) = 0x101010101010101;
  *((_QWORD *)v13 + 351) = 0x101010101010101;
  *((_QWORD *)v13 + 350) = 0x101010101010101;
  *((_QWORD *)v13 + 357) = 0x101010101010101;
  *((_QWORD *)v13 + 356) = 0x101010101010101;
  *((_QWORD *)v13 + 363) = 0x101010101010101;
  *((_QWORD *)v13 + 362) = 0x101010101010101;
  *((_QWORD *)v13 + 369) = 0x101010101010101;
  *((_QWORD *)v13 + 368) = 0x101010101010101;
  *((_QWORD *)v13 + 375) = 0x101010101010101;
  *((_QWORD *)v13 + 374) = 0x101010101010101;
  *((_QWORD *)v13 + 381) = 0x101010101010101;
  *((_QWORD *)v13 + 380) = 0x101010101010101;
  *((_QWORD *)v13 + 387) = 0x101010101010101;
  *((_QWORD *)v13 + 386) = 0x101010101010101;
  *((_QWORD *)v13 + 393) = 0x202020202020202;
  *((_QWORD *)v13 + 392) = 0x202020202020202;
  *((_QWORD *)v13 + 399) = 0x202020202020202;
  *((_QWORD *)v13 + 398) = 0x202020202020202;
  *((_QWORD *)v13 + 405) = 0x202020202020202;
  *((_QWORD *)v13 + 404) = 0x202020202020202;
  *((_QWORD *)v13 + 411) = 0x202020202020202;
  *((_QWORD *)v13 + 410) = 0x202020202020202;
  *((_QWORD *)v13 + 417) = 0x202020202020202;
  *((_QWORD *)v13 + 416) = 0x202020202020202;
  *((_QWORD *)v13 + 423) = 0x202020202020202;
  *((_QWORD *)v13 + 422) = 0x202020202020202;
  *((_QWORD *)v13 + 429) = 0x202020202020202;
  *((_QWORD *)v13 + 428) = 0x202020202020202;
  *((_QWORD *)v13 + 435) = 0x202020202020202;
  *((_QWORD *)v13 + 434) = 0x202020202020202;
  *((_QWORD *)v13 + 441) = 0x202020202020202;
  *((_QWORD *)v13 + 440) = 0x202020202020202;
  *((_QWORD *)v13 + 447) = 0x202020202020202;
  *((_QWORD *)v13 + 446) = 0x202020202020202;
  *((_QWORD *)v13 + 453) = 0x202020202020202;
  *((_QWORD *)v13 + 452) = 0x202020202020202;
  *((_QWORD *)v13 + 459) = 0x202020202020202;
  *((_QWORD *)v13 + 458) = 0x202020202020202;
  *((_QWORD *)v13 + 465) = 0x202020202020202;
  *((_QWORD *)v13 + 464) = 0x202020202020202;
  *((_QWORD *)v13 + 471) = 0x202020202020202;
  *((_QWORD *)v13 + 470) = 0x202020202020202;
  *((_QWORD *)v13 + 477) = 0x202020202020202;
  *((_QWORD *)v13 + 476) = 0x202020202020202;
  *((_QWORD *)v13 + 483) = 0x202020202020202;
  *((_QWORD *)v13 + 482) = 0x202020202020202;
  *((_QWORD *)v13 + 489) = 0x303030303030303;
  *((_QWORD *)v13 + 488) = 0x303030303030303;
  *((_QWORD *)v13 + 495) = 0x303030303030303;
  *((_QWORD *)v13 + 494) = 0x303030303030303;
  *((_QWORD *)v13 + 501) = 0x303030303030303;
  *((_QWORD *)v13 + 500) = 0x303030303030303;
  *((_QWORD *)v13 + 507) = 0x303030303030303;
  *((_QWORD *)v13 + 506) = 0x303030303030303;
  *((_QWORD *)v13 + 513) = 0x303030303030303;
  *((_QWORD *)v13 + 512) = 0x303030303030303;
  *((_QWORD *)v13 + 519) = 0x303030303030303;
  *((_QWORD *)v13 + 518) = 0x303030303030303;
  *((_QWORD *)v13 + 525) = 0x303030303030303;
  *((_QWORD *)v13 + 524) = 0x303030303030303;
  *((_QWORD *)v13 + 531) = 0x303030303030303;
  *((_QWORD *)v13 + 530) = 0x303030303030303;
  *((_QWORD *)v13 + 537) = 0x303030303030303;
  *((_QWORD *)v13 + 536) = 0x303030303030303;
  *((_QWORD *)v13 + 543) = 0x303030303030303;
  *((_QWORD *)v13 + 542) = 0x303030303030303;
  *((_QWORD *)v13 + 549) = 0x303030303030303;
  *((_QWORD *)v13 + 548) = 0x303030303030303;
  *((_QWORD *)v13 + 555) = 0x303030303030303;
  *((_QWORD *)v13 + 554) = 0x303030303030303;
  *((_QWORD *)v13 + 561) = 0x303030303030303;
  *((_QWORD *)v13 + 560) = 0x303030303030303;
  *((_QWORD *)v13 + 567) = 0x303030303030303;
  *((_QWORD *)v13 + 566) = 0x303030303030303;
  *((_QWORD *)v13 + 573) = 0x303030303030303;
  *((_QWORD *)v13 + 572) = 0x303030303030303;
  *((_QWORD *)v13 + 579) = 0x303030303030303;
  *((_QWORD *)v13 + 578) = 0x303030303030303;
  v13[22] = 0;
  g_worker_interface((uint64_t)(v14 + 4740));
  *((_QWORD *)v14 + 2372) = "vpx lf worker";
  return v14;
}

void vp9_decoder_remove(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1)
  {
    v2 = (int *)(a1 + 20568);
    ((void (__cdecl *)(std::__fs::filesystem::recursive_directory_iterator *__return_ptr __struct_ptr, std::__fs::filesystem::recursive_directory_iterator *__struct_ptr))off_253EA52B8[0])((std::__fs::filesystem::recursive_directory_iterator *)off_253EA52B8[0], (std::__fs::filesystem::recursive_directory_iterator *)(a1 + 18960));
    v3 = *(_QWORD *)(a1 + 18992);
    if (v3)
      free(*(void **)(v3 - 8));
    if (*v2 >= 1)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        ((void (__cdecl *)(std::__fs::filesystem::recursive_directory_iterator *__return_ptr __struct_ptr, std::__fs::filesystem::recursive_directory_iterator *__struct_ptr))off_253EA52B8[0])((std::__fs::filesystem::recursive_directory_iterator *)off_253EA52B8[0], (std::__fs::filesystem::recursive_directory_iterator *)(*(_QWORD *)(a1 + 19016) + v4));
        ++v5;
        v4 += 56;
      }
      while (v5 < *v2);
    }
    v6 = *(_QWORD *)(a1 + 19024);
    if (v6)
      free(*(void **)(v6 - 8));
    v7 = *(_QWORD *)(a1 + 19016);
    if (v7)
      free(*(void **)(v7 - 8));
    if (*v2 >= 1)
      vp9_loop_filter_dealloc((int *)(a1 + 20576));
    if (v2[32] == 1)
    {
      vp9_dec_free_row_mt_mem(*(_QWORD *)(a1 + 20704));
      v8 = *(_QWORD *)(a1 + 20704);
      if (v8)
      {
        pthread_mutex_lock((pthread_mutex_t *)(v8 + 128));
        v9 = *(_QWORD *)(v8 + 88);
        *(_QWORD *)(v8 + 96) = v9;
        *(_QWORD *)(v8 + 104) = v9;
        *(_DWORD *)(v8 + 120) = 0;
        pthread_mutex_unlock((pthread_mutex_t *)(v8 + 128));
        pthread_mutex_destroy((pthread_mutex_t *)(v8 + 128));
        pthread_cond_destroy((pthread_cond_t *)(v8 + 192));
        v10 = *(_QWORD *)(a1 + 20704);
        v11 = *(_QWORD *)(v10 + 80);
        if (v11)
        {
          free(*(void **)(v11 - 8));
          v10 = *(_QWORD *)(a1 + 20704);
        }
        pthread_mutex_destroy((pthread_mutex_t *)(v10 + 256));
        v12 = *(_QWORD *)(a1 + 20704);
        if (v12)
          free(*(void **)(v12 - 8));
      }
    }
    vp9_remove_common(a1 + 656);
    free(*(void **)(a1 - 8));
  }
}

uint64_t initialize_dec_0()
{
  uint64_t result;

  if (!initialize_dec_init_done_0)
  {
    pthread_once(&once_lock_6, (void (*)(void))setup_rtcd_internal_0);
    pthread_once(&once_lock_7, (void (*)(void))setup_rtcd_internal_1);
    pthread_once(&once_lock_8, (void (*)(void))setup_rtcd_internal_2);
    result = pthread_once(&once_lock_5, vp9_init_intra_predictors_internal);
    initialize_dec_init_done_0 = 1;
  }
  return result;
}

BOOL vp9_dec_alloc_mi(uint64_t a1, int a2)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  unint64_t v7;
  size_t v8;
  void *v9;
  unint64_t v10;

  if ((a2 & 0x80000000) == 0
    && (v4 = a2, v5 = 68 * a2, v5 + 23 <= 0x10000000000)
    && (v6 = malloc_type_malloc(v5 + 23, 0x74AD08B5uLL)) != 0
    && (v7 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v7 - 8) = v6, v7))
  {
    bzero((void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0), v5);
    *(_QWORD *)(a1 + 1416) = v7;
    *(_DWORD *)(a1 + 1412) = a2;
    v8 = 8 * v4 + 23;
    if (v8 <= 0x10000000000 && (v9 = malloc_type_malloc(v8, 0x74AD08B5uLL)) != 0)
    {
      v10 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v10 - 8) = v9;
      if (v10)
        bzero((void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0), 8 * v4);
    }
    else
    {
      v10 = 0;
    }
    *(_QWORD *)(a1 + 1472) = v10;
    return v10 == 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1416) = 0;
    return 1;
  }
}

void vp9_dec_free_mi(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 18184);
  if (v2)
    free(*(void **)(v2 - 8));
  *(_QWORD *)(a1 + 18184) = 0;
  v3 = *(_QWORD *)(a1 + 1416);
  if (v3)
    free(*(void **)(v3 - 8));
  *(_QWORD *)(a1 + 1416) = 0;
  v4 = *(_QWORD *)(a1 + 1472);
  if (v4)
    free(*(void **)(v4 - 8));
  *(_QWORD *)(a1 + 1472) = 0;
  *(_DWORD *)(a1 + 1412) = 0;
}

void vp9_dec_setup_mi(uint64_t a1)
{
  uint64_t v1;
  char *v2;

  v1 = *(int *)(a1 + 1324);
  *(_QWORD *)(a1 + 1424) = *(_QWORD *)(a1 + 1416) + 68 * (int)v1 + 68;
  v2 = *(char **)(a1 + 1472);
  *(_QWORD *)(a1 + 1480) = &v2[8 * v1 + 8];
  bzero(v2, 8 * ((int)v1 + (int)v1 * *(_DWORD *)(a1 + 1312)));
}

uint64_t vp9_copy_reference_dec(uint64_t a1, int a2, _DWORD *a3)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (unsigned int *)(a1 + 656);
  if (a2 != 1)
  {
    vpx_internal_error((uint64_t)v3, 1, "Invalid reference frame");
    return *v3;
  }
  v4 = *(_DWORD *)(a1 + 1008);
  if ((v4 & 0x80000000) == 0)
  {
    v5 = *(_QWORD *)(a1 + 18904);
    v6 = v5 + 224 * v4;
    if (*(_DWORD *)(v6 + 92) == a3[1]
      && *(_DWORD *)(v6 + 88) == *a3
      && *(_DWORD *)(v5 + 224 * v4 + 112) == a3[6]
      && *(_DWORD *)(v5 + 224 * v4 + 108) == a3[5])
    {
      vpx_yv12_copy_frame_c((int *)(v6 + 88), (uint64_t)a3);
      return *v3;
    }
    vpx_internal_error((uint64_t)v3, 1, "Incorrect buffer dimensions");
    return *v3;
  }
  vpx_internal_error(a1 + 656, 1, "No 'last' reference frame");
  return 1;
}

uint64_t vp9_set_reference_dec(jmp_buf a1, int a2, int *a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 == 4)
  {
    v4 = a1[90];
    if (v4 < 0xC)
      goto LABEL_7;
    goto LABEL_13;
  }
  if (a2 == 2)
  {
    v4 = a1[89];
    if (v4 < 0xC)
      goto LABEL_7;
LABEL_13:
    vpx_internal_error((uint64_t)a1, 1, "Invalid reference frame map");
    return *a1;
  }
  if (a2 != 1)
  {
    vpx_internal_error((uint64_t)a1, 1, "Invalid reference frame");
    return *a1;
  }
  v4 = a1[88];
  if (v4 >= 0xC)
    goto LABEL_13;
LABEL_7:
  v5 = *((_QWORD *)a1 + 2281);
  v6 = v5 + 224 * v4;
  if (*(_QWORD *)(v6 + 88) == *(_QWORD *)a3
    && *(_DWORD *)(v5 + 224 * v4 + 112) == a3[6]
    && *(_DWORD *)(v5 + 224 * v4 + 108) == a3[5])
  {
    vpx_yv12_copy_frame_c(a3, v6 + 88);
    return *a1;
  }
  vpx_internal_error((uint64_t)a1, 1, "Incorrect buffer dimensions");
  return *a1;
}

uint64_t vp9_receive_compressed_data(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  int v12;
  _QWORD *v13;
  _BYTE *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int *v25;
  int v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  int *v44;
  int v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  BOOL v49;
  _QWORD *v50;
  _DWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  int *__attribute__((__org_typedef(jmp_buf))) v54;

  v4 = (_DWORD *)(a1 + 18944);
  v54 = (int *)(a1 + 656);
  v53 = *(_QWORD **)(a1 + 18904);
  v52 = v53 + 3;
  v5 = *a3;
  *(_DWORD *)(a1 + 656) = 0;
  if (!a2 && *(int *)(a1 + 1072) >= 1)
    *(_DWORD *)(*(_QWORD *)(a1 + 1080) + 148) = 1;
  *v4 = 0;
  if ((*(_DWORD *)(a1 + 1600) & 0x80000000) != 0
    || LODWORD(v52[28 * *(int *)(a1 + 1600)])
    || LOBYTE(v52[28 * *(int *)(a1 + 1600) + 3]))
  {
    v6 = *(_DWORD **)(a1 + 18904);
    v7 = v6 + 6;
    if (v6[6])
      goto LABEL_8;
LABEL_24:
    v9 = 0;
    goto LABEL_25;
  }
  ((void (*)(_QWORD, _QWORD *))v53[2])(*v53, &v52[28 * *(int *)(a1 + 1600) + 5]);
  LOBYTE(v52[28 * v54[236] + 3]) = 1;
  v6 = (_DWORD *)*((_QWORD *)v54 + 2281);
  v7 = v6 + 6;
  if (!v6[6])
    goto LABEL_24;
LABEL_8:
  if (v6[62])
  {
    if (v6[118])
    {
      if (v6[174])
      {
        if (v6[230])
        {
          if (v6[286])
          {
            if (v6[342])
            {
              if (v6[398])
              {
                if (v6[454])
                {
                  if (v6[510])
                  {
                    if (v6[566])
                    {
                      if (v6[622])
                      {
                        v8 = -1;
                        goto LABEL_26;
                      }
                      v9 = 11;
                    }
                    else
                    {
                      v9 = 10;
                    }
                  }
                  else
                  {
                    v9 = 9;
                  }
                }
                else
                {
                  v9 = 8;
                }
              }
              else
              {
                v9 = 7;
              }
            }
            else
            {
              v9 = 6;
            }
          }
          else
          {
            v9 = 5;
          }
        }
        else
        {
          v9 = 4;
        }
      }
      else
      {
        v9 = 3;
      }
    }
    else
    {
      v9 = 2;
    }
  }
  else
  {
    v9 = 1;
  }
LABEL_25:
  v7[56 * v9] = 1;
  v8 = v9;
LABEL_26:
  v54[236] = v8;
  if (v54[236] == -1)
  {
    *v4 = 1;
    release_fb_on_decoder_exit(a1);
    vpx_internal_error((uint64_t)v54, 2, "Unable to find free frame buffer");
    return *v54;
  }
  *((_QWORD *)v54 + 43) = &v53[28 * v54[236] + 3];
  v4[437] = 0;
  *(_QWORD *)(a1 + 18952) = &v52[28 * v54[236]];
  if (!setjmp(v54 + 23))
  {
    v54[22] = 1;
    vp9_decode_frame(a1, v5);
    v17 = *(_QWORD *)(a1 + 18904) + 24;
    v50 = *(_QWORD **)(a1 + 18904);
    v18 = v17;
    if (v4[1])
    {
      v51 = v4;
      v19 = 0;
      v20 = v4[1];
      do
      {
        v22 = v20;
        v23 = a1 + 4 * v19;
        v24 = *(_DWORD *)(v23 + 1008);
        if ((v24 & 0x80000000) == 0)
        {
          v25 = (int *)(v17 + 224 * v24);
          v26 = *v25 - 1;
          if (*v25 >= 1)
          {
            *v25 = v26;
            v27 = v17 + 224 * v24;
            v29 = *(unsigned __int8 *)(v27 + 24);
            v28 = (_BYTE *)(v27 + 24);
            v30 = !v29 && v26 == 0;
            if (v30 && *(_QWORD *)(v17 + 224 * v24 + 56))
            {
              ((void (*)(_QWORD, uint64_t))v50[2])(*v50, v17 + 224 * v24 + 40);
              *v28 = 1;
            }
          }
          if ((v22 & 1) != 0)
          {
            v31 = *v25 - 1;
            if (*v25 >= 1)
            {
              *v25 = v31;
              v32 = v17 + 224 * v24;
              v34 = *(unsigned __int8 *)(v32 + 24);
              v33 = (_BYTE *)(v32 + 24);
              v35 = !v34 && v31 == 0;
              if (v35 && *(_QWORD *)(v17 + 224 * v24 + 56))
              {
                ((void (*)(_QWORD, uint64_t))v50[2])(*v50, v17 + 224 * v24 + 40);
                *v33 = 1;
              }
            }
          }
        }
        *(_DWORD *)(v23 + 1008) = *(_DWORD *)(v23 + 1040);
        v21 = v19 + 1;
        v20 = v22 >> 1;
        ++v19;
      }
      while (v22 >= 2);
      v36 = v21;
      v18 = v17;
      v4 = v51;
      if ((v21 & 0xFFFFFFF8) != 0)
        goto LABEL_58;
    }
    else
    {
      v36 = 0;
    }
    v41 = v36;
    do
    {
      if (*(_DWORD *)(a1 + 1944))
        break;
      v42 = a1 + 4 * v41;
      v43 = *(_DWORD *)(v42 + 1008);
      if ((v43 & 0x80000000) == 0)
      {
        v44 = (int *)(v17 + 224 * v43);
        v45 = *v44 - 1;
        if (*v44 >= 1)
        {
          *v44 = v45;
          v46 = v17 + 224 * v43;
          v48 = *(unsigned __int8 *)(v46 + 24);
          v47 = (_BYTE *)(v46 + 24);
          v49 = !v48 && v45 == 0;
          if (v49 && *(_QWORD *)(v17 + 224 * v43 + 56))
          {
            ((void (*)(_QWORD, uint64_t))v50[2])(*v50, v17 + 224 * v43 + 40);
            *v47 = 1;
          }
        }
      }
      *(_DWORD *)(v42 + 1008) = *(_DWORD *)(v42 + 1040);
      ++v41;
    }
    while ((_DWORD)v41 != 8);
LABEL_58:
    v4[437] = 0;
    v37 = 224 * *(int *)(a1 + 1600);
    *(_QWORD *)(a1 + 984) = *(_QWORD *)(a1 + 18904) + v37 + 88;
    --*(_DWORD *)(v18 + v37);
    *(_DWORD *)(a1 + 1072) = -1;
    *(_DWORD *)(a1 + 1248) = -1;
    *(_DWORD *)(a1 + 1424) = -1;
    if (!v54[322])
    {
      v54[321] = v54[320];
      *((_QWORD *)v54 + 42) = *((_QWORD *)v54 + 43);
      if (*((_BYTE *)v54 + 4776))
      {
        v38 = v54[377];
        v39 = v54[378];
        v54[377] = v39;
        v54[378] = v38;
        *((_QWORD *)v54 + 193) = *(_QWORD *)&v54[2 * v39 + 380];
        *((_QWORD *)v54 + 192) = *(_QWORD *)&v54[2 * v38 + 380];
      }
    }
    if (v54[320])
      v54[237] = v54[236];
    v54[77] = v54[73];
    v54[78] = v54[74];
    if (v54[320])
      ++v54[4537];
    v54[22] = 0;
    return 0;
  }
  v54[22] = 0;
  *v4 = 1;
  release_fb_on_decoder_exit(a1);
  v10 = v54[236];
  if ((v10 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v11 = (int *)&v52[28 * v10];
  v12 = *v11 - 1;
  if (*v11 < 1)
    return 0xFFFFFFFFLL;
  *v11 = v12;
  v13 = &v52[28 * v10];
  v15 = *((unsigned __int8 *)v13 + 24);
  v14 = v13 + 3;
  v16 = 0xFFFFFFFFLL;
  if (!v15 && !v12)
  {
    if (v52[28 * v10 + 7])
    {
      ((void (*)(_QWORD, _QWORD *))v53[2])(*v53, &v52[28 * v10 + 5]);
      *v14 = 1;
    }
    return 0xFFFFFFFFLL;
  }
  return v16;
}

void release_fb_on_decoder_exit(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  int *v8;
  int v9;
  _QWORD *v10;
  _BYTE *v11;
  int v12;
  BOOL v13;
  int *v14;
  int v15;
  _QWORD *v16;
  _BYTE *v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unsigned int v21;
  int *v22;
  int v23;
  _QWORD *v24;
  _BYTE *v25;
  int v26;
  BOOL v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;

  v1 = (int *)(a1 + 18948);
  v30 = a1 + 656;
  v29 = *(_QWORD **)(a1 + 18904);
  v28 = v29 + 3;
  off_253EA52A0();
  if (v1[405] >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      off_253EA52A0();
      ++v3;
      v2 += 56;
    }
    while (v3 < v1[405]);
  }
  if (v1[436] == 1)
  {
    v4 = *v1;
    if (*v1)
    {
      v5 = 0;
      do
      {
        v7 = *(_DWORD *)(v30 + 4 * v5 + 352);
        if ((v7 & 0x80000000) == 0)
        {
          v8 = (int *)&v28[28 * v7];
          v9 = *v8 - 1;
          if (*v8 >= 1)
          {
            *v8 = v9;
            v10 = &v28[28 * v7];
            v12 = *((unsigned __int8 *)v10 + 24);
            v11 = v10 + 3;
            v13 = !v12 && v9 == 0;
            if (v13 && v28[28 * v7 + 7])
            {
              ((void (*)(_QWORD, _QWORD *))v29[2])(*v29, &v28[28 * v7 + 5]);
              *v11 = 1;
            }
          }
          if ((v4 & 1) != 0)
          {
            v14 = (int *)&v28[28 * v7];
            v15 = *v14 - 1;
            if (*v14 >= 1)
            {
              *v14 = v15;
              v16 = &v28[28 * v7];
              v18 = *((unsigned __int8 *)v16 + 24);
              v17 = v16 + 3;
              v19 = !v18 && v15 == 0;
              if (v19 && v28[28 * v7 + 7])
              {
                ((void (*)(_QWORD, _QWORD *))v29[2])(*v29, &v28[28 * v7 + 5]);
                *v17 = 1;
              }
            }
          }
        }
        ++v5;
        v6 = v4 >= 2;
        v4 >>= 1;
      }
      while (v6);
      if ((v5 & 0xFFFFFFF8) != 0)
        goto LABEL_29;
    }
    else
    {
      LODWORD(v5) = 0;
    }
    v20 = v5 + 88;
    do
    {
      if (*(_DWORD *)(v30 + 1288))
        break;
      v21 = *(_DWORD *)(v30 + 4 * v20);
      if ((v21 & 0x80000000) == 0)
      {
        v22 = (int *)&v28[28 * v21];
        v23 = *v22 - 1;
        if (*v22 >= 1)
        {
          *v22 = v23;
          v24 = &v28[28 * v21];
          v26 = *((unsigned __int8 *)v24 + 24);
          v25 = v24 + 3;
          if (v26)
            v27 = 0;
          else
            v27 = v23 == 0;
          if (v27)
          {
            if (v28[28 * v21 + 7])
            {
              ((void (*)(_QWORD, _QWORD *))v29[2])(*v29, &v28[28 * v21 + 5]);
              *v25 = 1;
            }
          }
        }
      }
      v13 = (_DWORD)v20++ == 95;
    }
    while (!v13);
LABEL_29:
    v1[436] = 0;
  }
}

BOOL vp9_denoiser_denoise(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, int *a7, int a8)
{
  _DWORD *v10;
  uint64_t v11;
  int *v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int i;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  _BOOL4 v43;
  char v44;
  _BOOL4 v45;
  int **v46;
  unsigned int v47;
  _BOOL8 result;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  _OWORD *v59;
  int v60;
  int v61;
  int v62;
  int v63;
  __int128 *v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  __int128 *v74;
  unsigned int v75;
  __int128 *v76;
  unsigned int v77;
  _BOOL4 v78;
  _BOOL4 v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  int v84;
  signed int v85;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  __int128 *v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  unsigned int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  int v118;
  _DWORD *v119;
  _DWORD *v120;
  int v121;
  int v122;
  _DWORD *v123;
  int v124;
  _DWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  int v130;
  int v131;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  int v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;

  v10 = (_DWORD *)(a2 + 16528);
  v11 = a1 + 841880;
  v12 = (int *)(a1 + 747512);
  v13 = (_DWORD *)(a1 + 739520);
  v14 = (_DWORD *)(a1 + 173008);
  v15 = *(_DWORD *)(a1 + 747520);
  v16 = *(_DWORD *)(a1 + 747512);
  if (v15 - v16 == 2)
    v17 = *(_DWORD *)(a1 + 842064);
  else
    v17 = 0;
  v18 = 0;
  v19 = *(_QWORD *)v11 + 160 * v17;
  v20 = *(int *)(v19 + 16);
  v21 = *(_QWORD *)(v19 + 56);
  v22 = *(_QWORD *)(a1 + 841888) + 160 * (v15 + ~v16);
  v23 = *(_DWORD *)(v22 + 16);
  v24 = *(_QWORD *)(v22 + 56);
  v25 = 8 * a3;
  v26 = (int)v20 * 8 * a3;
  v27 = 8 * a4;
  v28 = v21 + v27 + v26;
  v29 = *(_QWORD *)(a2 + 8216);
  v30 = *(int *)(a2 + 8224);
  v31 = *(__int16 *)(a6 + 810) * *(__int16 *)(a6 + 810) + *(__int16 *)(a6 + 808) * *(__int16 *)(a6 + 808);
  v32 = *v13;
  if (a5 > 9 || !*(_DWORD *)(v11 + 240))
    goto LABEL_37;
  if (*(_DWORD *)(v11 + 196) > 2u)
  {
    v18 = 0;
    goto LABEL_37;
  }
  v130 = 8 * a3;
  v125 = v13;
  v127 = *(_QWORD *)(v22 + 56);
  v123 = v14;
  if (v31 <= 0xF)
  {
    v33 = num_8x8_blocks_high_lookup[a5];
    v34 = v14[2];
    if (v34 - a4 >= num_8x8_blocks_wide_lookup[a5])
      v35 = num_8x8_blocks_wide_lookup[a5];
    else
      v35 = (v34 - a4);
    if (*v14 - a3 < v33)
      v33 = *v14 - a3;
    v18 = 100;
    if (v33 >= 1 && (int)v35 >= 1)
    {
      for (i = 0; i < v33; ++i)
      {
        v37 = a4 + (i + a3) * v34;
        v38 = v35;
        while (1)
        {
          if (v18 >= *(unsigned __int8 *)(*(_QWORD *)(v11 + 288) + v37))
            v18 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 288) + v37);
          if (v18 <= 3)
            break;
          ++v37;
          if (!--v38)
            goto LABEL_19;
        }
        i = v33;
LABEL_19:
        ;
      }
    }
    v25 = 8 * a3;
    v13 = v125;
    v24 = v127;
    if (v18 > 60)
      goto LABEL_37;
  }
  else
  {
    v18 = 0;
  }
  v106 = a8;
  v107 = a6;
  v121 = v23;
  v108 = a3;
  v109 = a4;
  v112 = 8 * a4;
  v114 = v21;
  v116 = *(__int16 *)(a6 + 810) * *(__int16 *)(a6 + 810) + *(__int16 *)(a6 + 808) * *(__int16 *)(a6 + 808);
  v119 = v10;
  v110 = a5;
  v39 = 4 << b_width_log2_lookup[a5];
  v40 = 4 << b_height_log2_lookup[a5];
  v43 = v31 > 0xF || v18 < 26;
  v41 = (v40 >> 2) * *v10 + (v39 >> 2);
  if (vpx_skin_pixel(*(unsigned __int8 *)(v29 + (v40 >> 1) * (int)v30 + (v39 >> 1)), *(unsigned __int8 *)(*(_QWORD *)(a2 + 16520) + v41), *(unsigned __int8 *)(*(_QWORD *)(a2 + 24824) + v41), v43))
  {
    v44 = 0;
    v45 = 0;
    a5 = v110;
    v21 = v114;
    v27 = v112;
    a3 = v108;
    a4 = v109;
    v23 = v121;
    v10 = v119;
    v31 = v116;
    v25 = v130;
    a6 = v107;
    v13 = v125;
    v24 = v127;
    a8 = v106;
    v14 = v123;
    if ((v32 & 1) == 0)
      goto LABEL_40;
    goto LABEL_38;
  }
  a5 = v110;
  v21 = v114;
  v27 = v112;
  a3 = v108;
  a4 = v109;
  v23 = v121;
  v10 = v119;
  v31 = v116;
  v25 = v130;
  a6 = v107;
  v13 = v125;
  v24 = v127;
  a8 = v106;
  v14 = v123;
LABEL_37:
  v45 = *(_DWORD *)(v11 + 196) == 3;
  v44 = 1;
  if ((v32 & 1) == 0)
  {
LABEL_40:
    result = 0;
    v49 = 0;
    goto LABEL_41;
  }
LABEL_38:
  v46 = (int **)v14;
  v47 = *(_DWORD *)(v11 + 196);
  if (!v47 || *(_DWORD *)(a6 + 816))
    goto LABEL_40;
  v111 = v45;
  v128 = v24;
  v131 = v25;
  v60 = *(_DWORD *)(a6 + 792);
  v122 = v23;
  v120 = v10;
  v61 = a8;
  if (v60 == -1)
    v62 = 0;
  else
    v62 = *(_DWORD *)(a6 + 796) - v60;
  v71 = v12[2];
  v124 = *(_DWORD *)(a1 + 194512);
  v117 = *(_DWORD *)(a1 + 194516);
  v72 = v13[1997];
  v73 = *v12;
  v74 = **(__int128 ***)(a2 + 25360);
  v75 = *(char *)(a6 + 812);
  v135 = v74[2];
  v136 = v74[3];
  v137 = *((_DWORD *)v74 + 16);
  v76 = v74;
  v133 = *v74;
  v134 = v74[1];
  if ((v44 & 1) != 0)
  {
    if (a5 - 3 < 3)
    {
LABEL_77:
      v49 = 0;
      result = 0;
      goto LABEL_41;
    }
  }
  else
  {
    v49 = 0;
    if (a5 - 3 < 3 || v31 || v18 < 4)
      goto LABEL_126;
  }
  if (v47 <= 1 && a5 == 6 && *v46[2179] > 480)
    goto LABEL_77;
  v77 = *(unsigned __int8 *)(a6 + 812);
  if (v77 > 3 || v77 == 1)
  {
    if (v31 < 0x272)
    {
      v87 = v31;
      v88 = 16;
    }
    else
    {
      if (!v111)
      {
        if (v62 <= 0)
          goto LABEL_80;
LABEL_112:
        v49 = 0;
        *((_BYTE *)v76 + 8) = v75;
        *((_BYTE *)v76 + 1) = *(_BYTE *)(a6 + 804);
        *((_DWORD *)v76 + 3) = *(_DWORD *)(a6 + 808);
        v84 = v31;
        v81 = v122;
        if (v72)
          goto LABEL_96;
LABEL_113:
        v90 = 0;
        v85 = v75;
        goto LABEL_114;
      }
      v87 = v31;
      v88 = 4;
    }
    v31 = v87;
    if (v62 <= v88 << num_pels_log2_lookup[a5])
      goto LABEL_80;
    goto LABEL_112;
  }
LABEL_80:
  v77 = *(unsigned __int8 *)(a6 + 813);
  v78 = v61 != 0;
  v79 = (int)v71 < 2 || v61 != 0;
  v80 = *(_DWORD *)(a6 + 796);
  *(_DWORD *)(a6 + 792) = v80;
  if (v77 != 2)
    v78 = 0;
  if (!v79 || v77 == 3 || v78)
  {
    v82 = a6;
    v83 = *(_DWORD *)(a6 + 800);
    v81 = v122;
LABEL_91:
    *(_DWORD *)(v82 + 792) = v83;
    v77 = 1;
    goto LABEL_92;
  }
  v77 = (char)v77;
  v81 = v122;
  if ((char)v77 == 1)
  {
    v82 = a6;
    goto LABEL_92;
  }
  v83 = *(_DWORD *)(a6 + 800);
  if (v47 > 2)
  {
    v82 = a6;
    goto LABEL_91;
  }
  v82 = a6;
  if (v83 < (5 * v80) >> 2)
    goto LABEL_91;
LABEL_92:
  *((_BYTE *)v76 + 8) = v77;
  *((_BYTE *)v76 + 1) = 12;
  *((_DWORD *)v76 + 3) = 0;
  *(_BYTE *)(v82 + 804) = 12;
  *(_DWORD *)(v82 + 808) = 0;
  if (*(_DWORD *)(v11 + 196) <= 2u)
    v84 = v31;
  else
    v84 = 0;
  v49 = 1;
  v75 = v77;
  if (!v72)
    goto LABEL_113;
LABEL_96:
  if (v75 == 2)
  {
    v86 = v117;
    goto LABEL_106;
  }
  v85 = v75;
  if (v75 == 1)
  {
    v86 = v124;
LABEL_106:
    v85 = v86 + 1;
  }
  v89 = v71 - v73;
  if ((_DWORD)v89 == 2)
    v85 += *(_DWORD *)(v11 + 184);
  v90 = v89 - 1;
LABEL_114:
  if (!*(_QWORD *)(*(_QWORD *)v11 + 160 * v85 + 88)
    || ((v91 = a5, v111) ? (v92 = 80) : (v92 = 40),
        *(_DWORD *)(a6 + 792) > (v92 << num_pels_log2_lookup[a5]) || v84 >= 5001))
  {
    v76[2] = v135;
    v76[3] = v136;
    *((_DWORD *)v76 + 16) = v137;
    *v76 = v133;
    v76[1] = v134;
LABEL_126:
    result = 0;
    goto LABEL_41;
  }
  v115 = v21;
  v129 = (_QWORD *)(v128 + v81 * v131 + v27);
  v118 = v31;
  v138 = *(_OWORD *)(a2 + 24944);
  v139 = *(_OWORD *)(a2 + 25080);
  v141 = *(_OWORD *)(a2 + 24928);
  v142 = *(_OWORD *)(a2 + 25064);
  v140 = *(_OWORD *)(a2 + 25216);
  v143 = *(_OWORD *)(a2 + 25200);
  v126 = *(_QWORD *)(a2 + 25424);
  v93 = *(_QWORD *)v11 + 160 * v85;
  v94 = *(_DWORD *)(v93 + 16);
  *(_QWORD *)(a2 + 24944) = *(_QWORD *)(v93 + 56) + v94 * v131 + v27;
  v120[2106] = v94;
  v95 = *(_DWORD *)(v93 + 36);
  v96 = v95 * v131;
  *(_QWORD *)(a2 + 25080) = *(_QWORD *)(v93 + 64) + v27 + v96;
  v120[2140] = v95;
  *(_QWORD *)(a2 + 25216) = *(_QWORD *)(v93 + 72) + v27 + v96;
  v120[2174] = v95;
  v97 = *(_QWORD *)(v11 + 8) + 160 * v90;
  v98 = *(_DWORD *)(v97 + 16);
  *(_QWORD *)(a2 + 24928) = *(_QWORD *)(v97 + 56) + v98 * v131 + v27;
  v120[2102] = v98;
  v99 = *(_DWORD *)(v97 + 36);
  v100 = v99 * v131;
  *(_QWORD *)(a2 + 25064) = *(_QWORD *)(v97 + 64) + v27 + v100;
  v120[2136] = v99;
  v113 = v27;
  *(_QWORD *)(a2 + 25200) = *(_QWORD *)(v97 + 72) + v27 + v100;
  v120[2170] = v99;
  v101 = a1 + 172112;
  v102 = v75 - 1;
  if ((char)v77 <= 0)
    v103 = 0;
  else
    v103 = v102;
  *(_QWORD *)(a2 + 25424) = v101 + 176 * v103;
  *(_QWORD *)(a2 + 25432) = v101;
  v104 = a5;
  v105 = v76;
  build_inter_predictors_for_planes(a2 + 24912, a5, a3, a4, 0, 0);
  v105[2] = v135;
  v105[3] = v136;
  *((_DWORD *)v105 + 16) = v137;
  *v105 = v133;
  v105[1] = v134;
  *(_OWORD *)(a2 + 24944) = v138;
  *(_OWORD *)(a2 + 24928) = v141;
  *(_OWORD *)(a2 + 25080) = v139;
  *(_QWORD *)(a2 + 25424) = v126;
  *(_OWORD *)(a2 + 25064) = v142;
  *(_OWORD *)(a2 + 25216) = v140;
  *(_OWORD *)(a2 + 25200) = v143;
  result = vp9_denoiser_filter_neon((_QWORD *)v29, v30, v129, v81, (_QWORD *)v28, v20, v111, v104, v118);
  if (!result)
  {
    a5 = v104;
    v21 = v115;
    v27 = v113;
LABEL_41:
    v50 = num_4x4_blocks_high_lookup[a5];
    if (a5 > 1)
    {
      if ((unint64_t)a5 - 2 > 2)
      {
        if (a5 > 7)
        {
          if ((unint64_t)a5 - 8 >= 3)
          {
            v63 = -4 * v50;
            v64 = (__int128 *)(v29 + 32);
            v65 = (_OWORD *)(v26 + v27 + v21 + 32);
            do
            {
              v66 = *(v64 - 1);
              v67 = *v64;
              v68 = v64[1];
              *(v65 - 2) = *(v64 - 2);
              *(v65 - 1) = v66;
              *v65 = v67;
              v65[1] = v68;
              v64 = (__int128 *)((char *)v64 + v30);
              v65 = (_OWORD *)((char *)v65 + v20);
            }
            while (!__CFADD__(v63++, 1));
            LOBYTE(v51) = 0;
          }
          else
          {
            v51 = -4 * v50;
            do
            {
              v56 = *(_OWORD *)(v29 + 16);
              v57 = *(_OWORD *)(v29 + v30);
              v58 = *(_OWORD *)(v29 + v30 + 16);
              *(_OWORD *)v28 = *(_OWORD *)v29;
              *(_OWORD *)(v28 + 16) = v56;
              v59 = (_OWORD *)(v28 + v20);
              *v59 = v57;
              v59[1] = v58;
              v28 += v20 + v20;
              v29 += v30 + v30;
              v51 += 2;
            }
            while (v51);
          }
        }
        else
        {
          v51 = -4 * v50;
          do
          {
            v54 = *(_OWORD *)v29;
            v55 = *(_OWORD *)(v29 + v30);
            v29 += v30 + v30;
            *(_OWORD *)v28 = v54;
            *(_OWORD *)(v28 + v20) = v55;
            v28 += v20 + v20;
            v51 += 2;
          }
          while (v51);
        }
      }
      else
      {
        v51 = -4 * v50;
        do
        {
          v52 = *(_QWORD *)v29;
          v53 = *(_QWORD *)(v29 + v30);
          v29 += v30 + v30;
          *(_QWORD *)v28 = v52;
          *(_QWORD *)(v28 + v20) = v53;
          v28 += v20 + v20;
          v51 += 2;
        }
        while (v51);
      }
    }
    else
    {
      v51 = -4 * v50;
      do
      {
        *(_DWORD *)v28 = *(_DWORD *)v29;
        *(_DWORD *)(v28 + v20) = *(_DWORD *)(v29 + v30);
        v29 += v30 + v30;
        v28 += v20 + v20;
        v51 += 2;
      }
      while (v51);
    }
    goto LABEL_63;
  }
  vpx_convolve_copy_neon(v28, v20, v29, v30, 0, 0, 0, 0, 0, 4 * num_4x4_blocks_wide_lookup[v91], 4 * num_4x4_blocks_high_lookup[v91]);
  LOBYTE(v51) = 1;
  result = 1;
LABEL_63:
  if ((v51 & (v49 != 0)) != 0)
    v70 = 2;
  else
    v70 = result;
  *a7 = v70;
  return result;
}

uint64_t vp9_denoiser_update_frame_stats(uint64_t result, unsigned int a2, char a3, uint64_t a4)
{
  if (*(_DWORD *)(result + 12))
    goto LABEL_6;
  if (*(_DWORD *)(a4 + 796) > a2)
  {
    *(_DWORD *)(a4 + 796) = a2;
    *(_BYTE *)(a4 + 813) = *(_BYTE *)(result + 8);
    if (*(_BYTE *)(result + 8) == 1)
      *(_DWORD *)(a4 + 800) = a2;
  }
  if (*(_DWORD *)(result + 12))
  {
LABEL_6:
    if (*(_DWORD *)(a4 + 792) > a2)
    {
      *(_DWORD *)(a4 + 792) = a2;
      *(_BYTE *)(a4 + 804) = a3;
      *(_DWORD *)(a4 + 808) = *(_DWORD *)(result + 12);
      *(_BYTE *)(a4 + 812) = *(_BYTE *)(result + 8);
    }
  }
  return result;
}

double vp9_denoiser_alloc(jmp_buf a1, int *a2, unint64_t *a3, int a4, int a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  uint64_t v12;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  size_t v29;
  void *v30;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _OWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  _OWORD *v59;
  uint64_t v60;
  unint64_t v61;
  double result;
  uint64_t v63;
  uint64_t *v64;
  int v66;
  int v67;

  v12 = a6;
  if (a4)
  {
    v15 = a2[1] + a2[3] * (uint64_t)*a2;
    v16 = a2[1720 * v15 + 1286];
    v66 = a7;
    v67 = a6;
    if (v16)
    {
      v17 = a2[1720 * v15 + 1285];
      v18 = v17 * (int)a6 / v16;
      v19 = v17 * (int)a7 / v16;
      v20 = v18 & 1;
      if (v18 < 0)
        v20 = -v20;
      v67 = v20 + v18;
      v21 = v19 & 1;
      if (v19 < 0)
        v21 = -v21;
      v66 = v21 + v19;
    }
    v22 = a2[2];
    if (a5 <= 1)
      v23 = 1;
    else
      v23 = 2;
    if (a5 > 1)
      v24 = -2;
    else
      v24 = -1;
    v25 = v22 + v24;
    if (v22 <= v23)
      v26 = 0;
    else
      v26 = v25;
    a2[21844] = v26;
    v27 = v22 - v26;
    *((_DWORD *)a3 + 46) = 9;
    *((_DWORD *)a3 + 47) = v22 - v26;
    v28 = 9 * (v22 - v26);
    if (!v27)
      goto LABEL_21;
  }
  else
  {
    v27 = 1;
    v66 = a7;
    v67 = a6;
    *((_DWORD *)a3 + 46) = 3;
    *((_DWORD *)a3 + 47) = 1;
    v28 = 3;
  }
  if (v28 < 0)
  {
LABEL_25:
    *a3 = 0;
    vpx_internal_error((uint64_t)a1, 2, "Failed to allocate denoiser->running_avg_y");
    goto LABEL_26;
  }
LABEL_21:
  v29 = 160 * v28;
  if ((v29 | 0x17) > 0x10000000000)
    goto LABEL_25;
  v30 = malloc_type_malloc(v29 | 0x17, 0x74AD08B5uLL);
  if (!v30)
    goto LABEL_25;
  v31 = ((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v31 - 8) = v30;
  if (!v31)
    goto LABEL_25;
  bzero((void *)(((unint64_t)v30 + 23) & 0xFFFFFFFFFFFFFFF0), v29);
  *a3 = v31;
LABEL_26:
  if (v27 < 0
    || (v32 = malloc_type_malloc((160 * v27) | 0x17, 0x74AD08B5uLL)) == 0
    || (v33 = ((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v33 - 8) = v32, !v33))
  {
    a3[1] = 0;
    v64 = (uint64_t *)(a3 + 1);
    vpx_internal_error((uint64_t)a1, 2, "Failed to allocate denoiser->mc_running_avg_y");
    v35 = a7;
    if (v27 < 1)
      goto LABEL_66;
LABEL_32:
    v36 = 0;
    v37 = 0;
    v63 = 160 * v27;
    while (1)
    {
      v38 = v37 ? v67 : v12;
      v39 = v37 ? v66 : v35;
      v40 = *a3;
      if (!*a3)
        break;
      v41 = v12;
      v42 = v35;
      v43 = *((int *)a3 + 46) * (uint64_t)v36;
      if (*(_QWORD *)(v40 + 160 * v43 + 96))
      {
        v44 = *(_QWORD *)(v40 + 160 * v43 + 88);
        if (v44)
          free(*(void **)(v44 - 8));
      }
      v45 = (_OWORD *)(v40 + 160 * v43);
      v45[8] = 0u;
      v45[9] = 0u;
      v45[6] = 0u;
      v45[7] = 0u;
      v45[4] = 0u;
      v45[5] = 0u;
      v45[2] = 0u;
      v45[3] = 0u;
      *v45 = 0u;
      v45[1] = 0u;
      if (vpx_realloc_frame_buffer((uint64_t)v45, v38, v39, a8, a9, a10, a11, 0, 0, 0, 0))
        break;
      v46 = *a3;
      if (!*a3)
        break;
      v47 = *((int *)a3 + 46) * (uint64_t)v36 + 1;
      if (*(_QWORD *)(v46 + 160 * v47 + 96))
      {
        v48 = *(_QWORD *)(v46 + 160 * v47 + 88);
        if (v48)
          free(*(void **)(v48 - 8));
      }
      v49 = (_OWORD *)(v46 + 160 * v47);
      v49[8] = 0u;
      v49[9] = 0u;
      v49[6] = 0u;
      v49[7] = 0u;
      v49[4] = 0u;
      v49[5] = 0u;
      v49[2] = 0u;
      v49[3] = 0u;
      *v49 = 0u;
      v49[1] = 0u;
      if (vpx_realloc_frame_buffer((uint64_t)v49, v38, v39, a8, a9, a10, a11, 0, 0, 0, 0))
        break;
      v50 = *a3;
      if (!*a3)
        break;
      v51 = *((int *)a3 + 46) * (uint64_t)v36 + 2;
      if (*(_QWORD *)(v50 + 160 * v51 + 96))
      {
        v52 = *(_QWORD *)(v50 + 160 * v51 + 88);
        if (v52)
          free(*(void **)(v52 - 8));
      }
      v53 = (_OWORD *)(v50 + 160 * v51);
      v53[8] = 0u;
      v53[9] = 0u;
      v53[6] = 0u;
      v53[7] = 0u;
      v53[4] = 0u;
      v53[5] = 0u;
      v53[2] = 0u;
      v53[3] = 0u;
      *v53 = 0u;
      v53[1] = 0u;
      if (vpx_realloc_frame_buffer((uint64_t)v53, v38, v39, a8, a9, a10, a11, 0, 0, 0, 0))
        break;
      if (a4)
      {
        v54 = *a3;
        if (!*a3)
          break;
        v55 = *((int *)a3 + 46) * (uint64_t)v36 + 3;
        if (*(_QWORD *)(v54 + 160 * v55 + 96))
        {
          v56 = *(_QWORD *)(v54 + 160 * v55 + 88);
          if (v56)
            free(*(void **)(v56 - 8));
        }
        v57 = (_OWORD *)(v54 + 160 * v55);
        v57[8] = 0u;
        v57[9] = 0u;
        v57[6] = 0u;
        v57[7] = 0u;
        v57[4] = 0u;
        v57[5] = 0u;
        v57[2] = 0u;
        v57[3] = 0u;
        *v57 = 0u;
        v57[1] = 0u;
        if (vpx_realloc_frame_buffer((uint64_t)v57, v38, v39, a8, a9, a10, a11, 0, 0, 0, 0))
          break;
      }
      v58 = *v64;
      if (!*v64)
        break;
      v59 = (_OWORD *)(v58 + v37);
      if (*(_QWORD *)(v58 + v37 + 96))
      {
        v60 = *(_QWORD *)(v58 + v37 + 88);
        if (v60)
          free(*(void **)(v60 - 8));
      }
      v59[8] = 0u;
      v59[9] = 0u;
      v59[6] = 0u;
      v59[7] = 0u;
      v59[4] = 0u;
      v59[5] = 0u;
      v59[2] = 0u;
      v59[3] = 0u;
      *v59 = 0u;
      v59[1] = 0u;
      if (vpx_realloc_frame_buffer((uint64_t)v59, v38, v39, a8, a9, a10, a11, 0, 0, 0, 0))
        break;
      v37 += 160;
      ++v36;
      v35 = v42;
      v12 = v41;
      if (v63 == v37)
        goto LABEL_66;
    }
    return vp9_denoiser_free((uint64_t *)a3, v34);
  }
  bzero((void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF0), 160 * v27);
  a3[1] = v33;
  v64 = (uint64_t *)(a3 + 1);
  v35 = a7;
  if (v27 >= 1)
    goto LABEL_32;
LABEL_66:
  if (a3[14])
  {
    v61 = a3[13];
    if (v61)
      free(*(void **)(v61 - 8));
  }
  *((_OWORD *)a3 + 9) = 0u;
  *((_OWORD *)a3 + 10) = 0u;
  *((_OWORD *)a3 + 7) = 0u;
  *((_OWORD *)a3 + 8) = 0u;
  *((_OWORD *)a3 + 5) = 0u;
  *((_OWORD *)a3 + 6) = 0u;
  *((_OWORD *)a3 + 3) = 0u;
  *((_OWORD *)a3 + 4) = 0u;
  *((_OWORD *)a3 + 1) = 0u;
  *((_OWORD *)a3 + 2) = 0u;
  if (vpx_realloc_frame_buffer((uint64_t)(a3 + 2), v12, v35, a8, a9, a10, a11, 0, 0, 0, 0))
    return vp9_denoiser_free((uint64_t *)a3, v34);
  *((_DWORD *)a3 + 50) = 2;
  a3[22] = 1;
  *(_QWORD *)&result = 0x200000000;
  a3[24] = 0x200000000;
  return result;
}

double vp9_denoiser_free(uint64_t *a1, double result)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    return result;
  *((_DWORD *)a1 + 44) = 0;
  v4 = *((_DWORD *)a1 + 46);
  v3 = *((_DWORD *)a1 + 47);
  v5 = *a1;
  if (v3 * v4 < 1)
    goto LABEL_11;
  if (v5)
  {
    v6 = 0;
    v7 = 0;
    v8 = 0uLL;
    do
    {
      if (v5)
      {
        v9 = (_OWORD *)(v5 + v6);
        if (*(_QWORD *)(v5 + v6 + 96))
        {
          v10 = *(_QWORD *)(v5 + v6 + 88);
          if (v10)
          {
            free(*(void **)(v10 - 8));
            v8 = 0uLL;
          }
        }
        v9[8] = v8;
        v9[9] = v8;
        v9[6] = v8;
        v9[7] = v8;
        v9[4] = v8;
        v9[5] = v8;
        v9[2] = v8;
        v9[3] = v8;
        *v9 = v8;
        v9[1] = v8;
        v4 = *((_DWORD *)a1 + 46);
        v3 = *((_DWORD *)a1 + 47);
      }
      ++v7;
      v5 = *a1;
      v6 += 160;
    }
    while (v7 < v3 * v4);
LABEL_11:
    if (v5)
    {
      free(*(void **)(v5 - 8));
      v3 = *((_DWORD *)a1 + 47);
    }
  }
  *a1 = 0;
  if (v3 >= 1)
  {
    v11 = a1[1];
    if (v11)
    {
      v12 = 0;
      v13 = 1;
      v14 = 0uLL;
LABEL_16:
      v15 = (_OWORD *)(v11 + v12);
      if (*(_QWORD *)(v11 + v12 + 96))
      {
        v16 = *(_QWORD *)(v11 + v12 + 88);
        if (v16)
        {
          free(*(void **)(v16 - 8));
          v14 = 0uLL;
        }
      }
      v15[8] = v14;
      v15[9] = v14;
      v15[6] = v14;
      v15[7] = v14;
      v15[4] = v14;
      v15[5] = v14;
      v15[2] = v14;
      v15[3] = v14;
      *v15 = v14;
      v15[1] = v14;
      while (v13 < *((int *)a1 + 47))
      {
        v11 = a1[1];
        v12 += 160;
        ++v13;
        if (v11)
          goto LABEL_16;
      }
    }
  }
  v17 = a1[1];
  if (v17)
    free(*(void **)(v17 - 8));
  a1[1] = 0;
  if (a1[14])
  {
    v18 = a1[13];
    if (v18)
      free(*(void **)(v18 - 8));
  }
  result = 0.0;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  return result;
}

void vp9_denoiser_update_ref_frame(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  uint64_t *v6;
  int *v7;
  int v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  _OWORD *v24;
  int v25;
  int v26;
  int v27;
  double v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  _OWORD *v34;
  int v35;
  int v36;
  int v37;
  double v38;
  int v39;
  int v40;
  _OWORD *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  _OWORD *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  double v55;
  int v56;
  uint64_t i;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t *v61;
  int v62;
  uint64_t v63;
  char *v64;
  int *v65;
  char *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  int *v81;
  int *v82;
  uint64_t v83;
  int *v84;
  int v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  int *v90;
  int *v91;
  uint64_t v92;
  int *v93;
  int v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  int *v99;
  int *v100;
  uint64_t v101;
  int *v102;
  int v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  int *v108;
  int *v109;
  uint64_t v110;
  int *v111;
  int v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  int *v117;
  int *v118;
  uint64_t v119;
  int *v120;
  int v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  int *v126;
  int *v127;
  uint64_t v128;
  int *v129;
  int v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  char *v134;
  int *v135;
  int *v136;
  uint64_t v137;
  int *v138;
  int v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  char *v143;
  int *v144;
  int *v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  int v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  int *v154;
  int *v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  int v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  int *v164;
  int *v165;
  uint64_t v166;
  uint64_t v167;
  int *v168;
  int v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  char *v173;
  int *v174;
  int *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t *v186;
  _BOOL4 v187;
  int v188;
  uint64_t v189;
  _BOOL4 __src;
  char *__srca;
  void *__srcb;

  v1 = a1 + 190048;
  if (*(int *)(a1 + 190048) < 1)
    return;
  v3 = (_DWORD *)(a1 + 834464);
  v4 = a1 + 747508;
  v5 = *(_DWORD *)(a1 + 747508);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 747512) < *(_DWORD *)(a1 + 834888))
      return;
  }
  v6 = (uint64_t *)(a1 + 841880);
  if (!*(_DWORD *)(a1 + 842076))
    return;
  v7 = (int *)(a1 + 171988);
  if (*(_BYTE *)(a1 + 172988))
  {
    v8 = 0;
    ++*(_DWORD *)(a1 + 842072);
    if (v5)
      goto LABEL_7;
LABEL_11:
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 190440);
    goto LABEL_12;
  }
  v8 = *(_DWORD *)(a1 + 172972);
  ++*(_DWORD *)(a1 + 842072);
  if (!v5)
    goto LABEL_11;
LABEL_7:
  v9 = *(int *)(a1 + 747512);
  v188 = v8;
  __src = *(_DWORD *)(a1 + 747520) - (_DWORD)v9 == 2;
  if (*(_DWORD *)(a1 + 747520) - (_DWORD)v9 == 2)
    v14 = *(_DWORD *)(a1 + 842064);
  else
    v14 = 0;
  if (*(_DWORD *)(a1 + 6880 * (*(int *)(a1 + 747516) + *(int *)(a1 + 747524) * (uint64_t)(int)v9) + 758668))
    v15 = 1;
  else
    v15 = *(_DWORD *)(a1 + 4 * v9 + 835248) != 0;
  v187 = v15;
  v16 = *(_DWORD *)(a1 + 194560);
  v17 = *(_DWORD *)(a1 + 194556);
  v18 = *(_DWORD *)(a1 + 194516);
  v19 = *(_DWORD *)(a1 + 194512);
  if (*v3 == 1 && *(_DWORD *)(a1 + 835300))
  {
    v20 = 0;
    v21 = v14 + 1;
    do
    {
      if ((!*(_DWORD *)(a1 + 172972) || ((*(_DWORD *)(a1 + 4 * *(int *)(v4 + 4) + 835160) >> v20) & 1) != 0)
        && !*(_QWORD *)(*v6 + 160 * (v21 + (int)v20) + 88))
      {
        v22 = *v7;
        v23 = *(_DWORD *)(a1 + 171992);
        v24 = (_OWORD *)(*v6 + 160 * (v21 + (int)v20));
        v25 = *(_DWORD *)(a1 + 172012);
        v26 = *(_DWORD *)(a1 + 172016);
        v27 = *(_DWORD *)(a1 + 172020);
        v24[8] = 0u;
        v24[9] = 0u;
        v24[6] = 0u;
        v24[7] = 0u;
        v24[4] = 0u;
        v24[5] = 0u;
        v24[2] = 0u;
        v24[3] = 0u;
        *v24 = 0u;
        v24[1] = 0u;
        if (vpx_realloc_frame_buffer((uint64_t)v24, v22, v23, v25, v26, v27, 160, 0, 0, 0, 0))
          vp9_denoiser_free((uint64_t *)(a1 + 841880), v28);
      }
      ++v20;
    }
    while (v20 != 8);
  }
  else
  {
    if (*(_DWORD *)(a1 + 194564))
    {
      v29 = v14 + *(_DWORD *)(a1 + 194520) + 1;
      if (!*(_QWORD *)(*v6 + 160 * v29 + 88))
      {
        v39 = *v7;
        v40 = *(_DWORD *)(a1 + 171992);
        v41 = (_OWORD *)(*v6 + 160 * v29);
        v42 = *(_DWORD *)(a1 + 172012);
        v43 = *(_DWORD *)(a1 + 172016);
        v44 = *(_DWORD *)(a1 + 172020);
        v41[8] = 0u;
        v41[9] = 0u;
        v41[6] = 0u;
        v41[7] = 0u;
        v41[4] = 0u;
        v41[5] = 0u;
        v41[2] = 0u;
        v41[3] = 0u;
        *v41 = 0u;
        v41[1] = 0u;
        v185 = v17;
        v45 = v19;
        v46 = vpx_realloc_frame_buffer((uint64_t)v41, v39, v40, v42, v43, v44, 160, 0, 0, 0, 0);
        v19 = v45;
        v17 = v185;
        if (v46)
          goto LABEL_37;
      }
    }
    if (v16)
    {
      v30 = v14 + v18 + 1;
      if (!*(_QWORD *)(*v6 + 160 * v30 + 88))
      {
        v47 = *v7;
        v48 = *(_DWORD *)(a1 + 171992);
        v49 = (_OWORD *)(*v6 + 160 * v30);
        v50 = *(_DWORD *)(a1 + 172012);
        v51 = *(_DWORD *)(a1 + 172016);
        v52 = *(_DWORD *)(a1 + 172020);
        v49[8] = 0u;
        v49[9] = 0u;
        v49[6] = 0u;
        v49[7] = 0u;
        v49[4] = 0u;
        v49[5] = 0u;
        v49[2] = 0u;
        v49[3] = 0u;
        *v49 = 0u;
        v49[1] = 0u;
        v53 = v19;
        v54 = vpx_realloc_frame_buffer((uint64_t)v49, v47, v48, v50, v51, v52, 160, 0, 0, 0, 0);
        v19 = v53;
        if (v54)
          goto LABEL_37;
      }
    }
    if (v17)
    {
      v31 = v14 + v19 + 1;
      if (!*(_QWORD *)(*v6 + 160 * v31 + 88))
      {
        v32 = *v7;
        v33 = *(_DWORD *)(a1 + 171992);
        v34 = (_OWORD *)(*v6 + 160 * v31);
        v35 = *(_DWORD *)(a1 + 172012);
        v36 = *(_DWORD *)(a1 + 172016);
        v37 = *(_DWORD *)(a1 + 172020);
        v34[8] = 0u;
        v34[9] = 0u;
        v34[6] = 0u;
        v34[7] = 0u;
        v34[4] = 0u;
        v34[5] = 0u;
        v34[2] = 0u;
        v34[3] = 0u;
        *v34 = 0u;
        v34[1] = 0u;
        if (vpx_realloc_frame_buffer((uint64_t)v34, v32, v33, v35, v36, v37, 160, 0, 0, 0, 0))
        {
LABEL_37:
          v55 = vp9_denoiser_free((uint64_t *)(a1 + 841880), v38);
          vpx_internal_error(a1 + 171696, 2, "Failed to re-allocate denoiser for SVC", v55);
        }
      }
    }
  }
  v10 = v187;
  v8 = v188;
  v11 = *(_QWORD *)(v1 + 392);
  if (__src)
  {
    v12 = *(_DWORD *)(a1 + 842064);
    __srca = *(char **)(v11 + 56);
    v13 = *(int *)(v11 + 16);
    if (v188)
      goto LABEL_40;
LABEL_42:
    v56 = *(_DWORD *)(a1 + 842064);
    if (v56 >= 2)
    {
      for (i = 1; i < v56; ++i)
      {
        v58 = *v6;
        v59 = i + v12;
        if (*(_QWORD *)(*v6 + 160 * v59 + 88))
        {
          v60 = (int *)(v58 + 160 * v59);
          if (v60[1] >= 1)
          {
            v61 = v6;
            v62 = 0;
            v63 = v58 + 160 * v59;
            v64 = *(char **)(v63 + 56);
            v65 = (int *)(v63 + 16);
            v66 = __srca;
            do
            {
              memcpy(v64, v66, *v60);
              v64 += *v65;
              v66 += v13;
              ++v62;
            }
            while (v62 < v60[1]);
            v6 = v61;
            v56 = *((_DWORD *)v61 + 46);
          }
        }
      }
    }
    *((_DWORD *)v6 + 45) = 0;
    return;
  }
LABEL_12:
  v12 = 0;
  __srca = *(char **)(v11 + 56);
  v13 = *(int *)(v11 + 16);
  if (!v8)
    goto LABEL_42;
LABEL_40:
  if (*(_DWORD *)(a1 + 842088) || *(_DWORD *)(a1 + 842060) | v10)
    goto LABEL_42;
  v67 = *(_DWORD *)(v1 + 4516);
  v68 = *(_DWORD *)(v1 + 4512);
  v69 = *(_DWORD *)(v1 + 4508);
  v70 = *(int *)(v1 + 4472);
  v71 = *(int *)(v1 + 4468);
  v72 = *(int *)(v1 + 4464);
  if (*v3 == 1 && v3[209])
  {
    v73 = *(_DWORD *)(a1 + 4 * *(int *)(v4 + 4) + 835160);
    if ((v73 & 1) != 0)
    {
      v74 = *v6;
      v75 = (int *)(*v6 + 160 * (v12 + 1));
      if (v75[1] >= 1)
      {
        v76 = 0;
        v77 = v74 + 160 * (v12 + 1);
        v78 = *(char **)(v77 + 56);
        v79 = v74 + 160 * v12;
        v80 = *(char **)(v79 + 56);
        v81 = (int *)(v77 + 16);
        v82 = (int *)(v79 + 16);
        do
        {
          memcpy(v78, v80, *v75);
          v78 += *v81;
          v80 += *v82;
          ++v76;
        }
        while (v76 < v75[1]);
        v73 = *(_DWORD *)(a1 + 4 * *(int *)(v4 + 4) + 835160);
        v6 = (uint64_t *)(a1 + 841880);
      }
    }
    if ((v73 & 2) != 0)
    {
      v83 = *v6;
      v84 = (int *)(*v6 + 160 * (v12 + 2));
      if (v84[1] >= 1)
      {
        v85 = 0;
        v86 = v83 + 160 * (v12 + 2);
        v87 = *(char **)(v86 + 56);
        v88 = v83 + 160 * v12;
        v89 = *(char **)(v88 + 56);
        v90 = (int *)(v86 + 16);
        v91 = (int *)(v88 + 16);
        do
        {
          memcpy(v87, v89, *v84);
          v87 += *v90;
          v89 += *v91;
          ++v85;
        }
        while (v85 < v84[1]);
        v73 = *(_DWORD *)(a1 + 4 * *(int *)(v4 + 4) + 835160);
        v6 = (uint64_t *)(a1 + 841880);
      }
    }
    if ((v73 & 4) != 0)
    {
      v92 = *v6;
      v93 = (int *)(*v6 + 160 * (v12 + 3));
      if (v93[1] >= 1)
      {
        v94 = 0;
        v95 = v92 + 160 * (v12 + 3);
        v96 = *(char **)(v95 + 56);
        v97 = v92 + 160 * v12;
        v98 = *(char **)(v97 + 56);
        v99 = (int *)(v95 + 16);
        v100 = (int *)(v97 + 16);
        do
        {
          memcpy(v96, v98, *v93);
          v96 += *v99;
          v98 += *v100;
          ++v94;
        }
        while (v94 < v93[1]);
        v73 = *(_DWORD *)(a1 + 4 * *(int *)(v4 + 4) + 835160);
        v6 = (uint64_t *)(a1 + 841880);
      }
    }
    if ((v73 & 8) != 0)
    {
      v101 = *v6;
      v102 = (int *)(*v6 + 160 * (v12 + 4));
      if (v102[1] >= 1)
      {
        v103 = 0;
        v104 = v101 + 160 * (v12 + 4);
        v105 = *(char **)(v104 + 56);
        v106 = v101 + 160 * v12;
        v107 = *(char **)(v106 + 56);
        v108 = (int *)(v104 + 16);
        v109 = (int *)(v106 + 16);
        do
        {
          memcpy(v105, v107, *v102);
          v105 += *v108;
          v107 += *v109;
          ++v103;
        }
        while (v103 < v102[1]);
        v73 = *(_DWORD *)(a1 + 4 * *(int *)(v4 + 4) + 835160);
        v6 = (uint64_t *)(a1 + 841880);
      }
    }
    if ((v73 & 0x10) != 0)
    {
      v110 = *v6;
      v111 = (int *)(*v6 + 160 * (v12 + 5));
      if (v111[1] >= 1)
      {
        v112 = 0;
        v113 = v110 + 160 * (v12 + 5);
        v114 = *(char **)(v113 + 56);
        v115 = v110 + 160 * v12;
        v116 = *(char **)(v115 + 56);
        v117 = (int *)(v113 + 16);
        v118 = (int *)(v115 + 16);
        do
        {
          memcpy(v114, v116, *v111);
          v114 += *v117;
          v116 += *v118;
          ++v112;
        }
        while (v112 < v111[1]);
        v73 = *(_DWORD *)(a1 + 4 * *(int *)(v4 + 4) + 835160);
        v6 = (uint64_t *)(a1 + 841880);
      }
    }
    if ((v73 & 0x20) != 0)
    {
      v119 = *v6;
      v120 = (int *)(*v6 + 160 * (v12 + 6));
      if (v120[1] >= 1)
      {
        v121 = 0;
        v122 = v119 + 160 * (v12 + 6);
        v123 = *(char **)(v122 + 56);
        v124 = v119 + 160 * v12;
        v125 = *(char **)(v124 + 56);
        v126 = (int *)(v122 + 16);
        v127 = (int *)(v124 + 16);
        do
        {
          memcpy(v123, v125, *v120);
          v123 += *v126;
          v125 += *v127;
          ++v121;
        }
        while (v121 < v120[1]);
        v73 = *(_DWORD *)(a1 + 4 * *(int *)(v4 + 4) + 835160);
        v6 = (uint64_t *)(a1 + 841880);
      }
    }
    if ((v73 & 0x40) != 0)
    {
      v128 = *v6;
      v129 = (int *)(*v6 + 160 * (v12 + 7));
      if (v129[1] >= 1)
      {
        v130 = 0;
        v131 = v128 + 160 * (v12 + 7);
        v132 = *(char **)(v131 + 56);
        v133 = v128 + 160 * v12;
        v134 = *(char **)(v133 + 56);
        v135 = (int *)(v131 + 16);
        v136 = (int *)(v133 + 16);
        do
        {
          memcpy(v132, v134, *v129);
          v132 += *v135;
          v134 += *v136;
          ++v130;
        }
        while (v130 < v129[1]);
        v73 = *(_DWORD *)(a1 + 4 * *(int *)(v4 + 4) + 835160);
        v6 = (uint64_t *)(a1 + 841880);
      }
    }
    if ((v73 & 0x80) != 0)
    {
      v137 = *v6;
      v138 = (int *)(*v6 + 160 * (v12 + 8));
      if (v138[1] >= 1)
      {
        v139 = 0;
        v140 = v137 + 160 * (v12 + 8);
        v141 = *(char **)(v140 + 56);
        v142 = v137 + 160 * v12;
        v143 = *(char **)(v142 + 56);
        v144 = (int *)(v140 + 16);
        v145 = (int *)(v142 + 16);
        do
        {
          memcpy(v141, v143, *v138);
          v141 += *v144;
          v143 += *v145;
          ++v139;
        }
        while (v139 < v138[1]);
      }
    }
  }
  else if (v68 + v67 + v69 < 2)
  {
    if (v67)
    {
      v176 = *v6 + 160 * (v70 + v12);
      v177 = *(_QWORD *)(v176 + 216);
      v178 = *v6 + 160 * v12;
      *(_QWORD *)(v176 + 216) = *(_QWORD *)(v178 + 56);
      *(_QWORD *)(v178 + 56) = v177;
    }
    if (v68)
    {
      v179 = *v6 + 160 * (v71 + v12);
      v180 = *(_QWORD *)(v179 + 216);
      v181 = *v6 + 160 * v12;
      *(_QWORD *)(v179 + 216) = *(_QWORD *)(v181 + 56);
      *(_QWORD *)(v181 + 56) = v180;
    }
    if (v69)
    {
      v182 = *v6 + 160 * (v72 + v12);
      v183 = *(_QWORD *)(v182 + 216);
      v184 = *v6 + 160 * v12;
      *(_QWORD *)(v182 + 216) = *(_QWORD *)(v184 + 56);
      *(_QWORD *)(v184 + 56) = v183;
    }
  }
  else
  {
    v189 = *(int *)(v1 + 4468);
    __srcb = (void *)*(int *)(v1 + 4464);
    v186 = (uint64_t *)(a1 + 841880);
    if (v67)
    {
      v146 = *v186;
      v147 = v70 + v12 + 1;
      v148 = (int *)(*v186 + 160 * v147);
      if (v148[1] >= 1)
      {
        v149 = 0;
        v150 = v146 + 160 * v147;
        v151 = *(char **)(v150 + 56);
        v152 = v146 + 160 * v12;
        v153 = *(char **)(v152 + 56);
        v154 = (int *)(v150 + 16);
        v155 = (int *)(v152 + 16);
        do
        {
          memcpy(v151, v153, *v148);
          v151 += *v154;
          v153 += *v155;
          ++v149;
        }
        while (v149 < v148[1]);
      }
    }
    if (v68)
    {
      v156 = *v186;
      v157 = v189 + v12 + 1;
      v158 = (int *)(*v186 + 160 * v157);
      if (v158[1] >= 1)
      {
        v159 = 0;
        v160 = v156 + 160 * v157;
        v161 = *(char **)(v160 + 56);
        v162 = v156 + 160 * v12;
        v163 = *(char **)(v162 + 56);
        v164 = (int *)(v160 + 16);
        v165 = (int *)(v162 + 16);
        do
        {
          memcpy(v161, v163, *v158);
          v161 += *v164;
          v163 += *v165;
          ++v159;
        }
        while (v159 < v158[1]);
      }
    }
    if (v69)
    {
      v166 = *v186;
      v167 = (uint64_t)__srcb + v12 + 1;
      v168 = (int *)(*v186 + 160 * v167);
      if (v168[1] >= 1)
      {
        v169 = 0;
        v170 = v166 + 160 * v167;
        v171 = *(char **)(v170 + 56);
        v172 = v166 + 160 * v12;
        v173 = *(char **)(v172 + 56);
        v174 = (int *)(v170 + 16);
        v175 = (int *)(v172 + 16);
        do
        {
          memcpy(v171, v173, *v168);
          v171 += *v174;
          v173 += *v175;
          ++v169;
        }
        while (v169 < v168[1]);
      }
    }
  }
}

BOOL vp9_denoiser_filter_neon(_QWORD *a1, int a2, _QWORD *a3, int a4, _QWORD *a5, int a6, int a7, unsigned int a8, int a9)
{
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int8x16_t v25;
  uint8x16_t v26;
  uint64_t v27;
  uint8x16_t v28;
  uint8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  int8x16_t *v32;
  int8x16_t *v33;
  int8x16_t v34;
  uint8x16_t v35;
  uint8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  BOOL v41;
  _BOOL4 v42;
  uint64_t v43;
  int8x16_t v44;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int8x16_t v51;
  uint8x16_t v52;
  int8x16_t v53;
  unsigned int v54;
  uint8x16_t v55;
  uint8x16_t v56;
  int8x16_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint8x16_t v63;
  uint8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  char v70;
  int v71;
  int v72;
  BOOL v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint8x16_t v85;
  uint64_t v86;
  uint64_t v87;
  int8x16_t *v88;
  int8x16_t *v89;
  int8x16_t v90;
  uint8x16_t v91;
  uint8x16_t v92;
  uint8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  _BOOL4 v100;
  uint64_t v101;
  int8x16_t v102;
  int v103;
  char v104;
  int v105;
  int v106;
  int v107;
  _QWORD *v108;
  uint8x16_t v109;
  uint8x16_t *v110;
  uint8x16_t *v111;
  uint8x16_t *v112;
  uint8x16_t v113;
  uint8x16_t v114;
  uint8x16_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int v120;
  int v122;
  _BYTE v123[16];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _BYTE v127[128];
  _BYTE v128[128];
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  if (a8 - 5 > 7)
  {
    if (a8 - 3 > 1)
      return 0;
    if (a9 >= 25 || a7 == 0)
      v46 = 4;
    else
      v46 = 5;
    if (a9 >= 25)
      v47 = 3;
    else
      v47 = v46;
    v48 = 4 << b_height_log2_lookup[a8];
    LODWORD(v49) = v48 >> 1;
    if (v48 < 1)
    {
      v53 = 0uLL;
    }
    else
    {
      v50 = 0;
      v51 = vdupq_n_s8(v47);
      v52 = (uint8x16_t)vdupq_n_s8(v46);
      v53 = 0uLL;
      if ((int)v49 <= 1)
        v54 = 1;
      else
        v54 = v48 >> 1;
      v55.i64[0] = 0x707070707070707;
      v55.i64[1] = 0x707070707070707;
      v56.i64[0] = 0x1010101010101010;
      v56.i64[1] = 0x1010101010101010;
      v57.i64[0] = 0x202020202020202;
      v57.i64[1] = 0x202020202020202;
      v58 = 16 * v54;
      do
      {
        v59 = &v123[v50];
        v60 = *(_QWORD *)((char *)a1 + a2);
        *v59 = *a1;
        v59[1] = v60;
        v61 = &v128[v50];
        v62 = *(_QWORD *)((char *)a3 + a4);
        *v61 = *a3;
        v61[1] = v62;
        v63 = *(uint8x16_t *)&v123[v50];
        v64 = *(uint8x16_t *)&v128[v50];
        v65 = (int8x16_t)vabdq_u8(v63, v64);
        v66 = vbslq_s8((int8x16_t)vcgtq_u8(v52, (uint8x16_t)v65), v65, vaddq_s8(vsubq_s8(v51, (int8x16_t)vcgtq_u8((uint8x16_t)v65, v55)), vbicq_s8(v57, (int8x16_t)vcgtq_u8(v56, (uint8x16_t)v65))));
        v67 = vandq_s8(v66, (int8x16_t)vcgtq_u8(v64, v63));
        v68 = vandq_s8(v66, (int8x16_t)vcgtq_u8(v63, v64));
        v69 = (int8x16_t)vqsubq_u8(vqaddq_u8(v63, (uint8x16_t)v67), (uint8x16_t)v68);
        *(int8x16_t *)&v127[v50] = v69;
        *a5 = v69.i64[0];
        *(_QWORD *)((char *)a5 + a6) = vextq_s8(v69, v69, 8uLL).u64[0];
        v53 = vaddq_s8(vqsubq_s8(v67, v68), v53);
        a1 = (_QWORD *)((char *)a1 + 2 * a2);
        a3 = (_QWORD *)((char *)a3 + 2 * a4);
        a5 = (_QWORD *)((char *)a5 + 2 * a6);
        v50 += 16;
      }
      while (v58 != v50);
    }
    v103 = vaddlvq_s8(v53);
    v104 = num_pels_log2_lookup[a8];
    if (a7)
      v105 = 3;
    else
      v105 = 2;
    v106 = v105 << v104;
    if (v103 < 0)
      v103 = -v103;
    if (v103 > v106)
    {
      v107 = (v103 - v106) >> v104;
      if (v107 > 2)
        return 0;
      if (v48 >= 1)
      {
        v108 = (_QWORD *)((char *)a5 - v48 * a6);
        v109 = (uint8x16_t)vdupq_n_s8(v107 + 1);
        if ((int)v49 <= 1)
          v49 = 1;
        else
          v49 = v49;
        v110 = (uint8x16_t *)v127;
        v111 = (uint8x16_t *)v128;
        v112 = (uint8x16_t *)v123;
        do
        {
          v113 = *v112++;
          v114 = v113;
          v115 = *v111++;
          v116 = (int8x16_t)vminq_u8(vabdq_u8(v114, v115), v109);
          v117 = vandq_s8(v116, (int8x16_t)vcgtq_u8(v115, v114));
          v118 = vandq_s8(v116, (int8x16_t)vcgtq_u8(v114, v115));
          v119 = (int8x16_t)vqaddq_u8(vqsubq_u8(*v110, (uint8x16_t)v117), (uint8x16_t)v118);
          *v110++ = (uint8x16_t)v119;
          v53 = vaddq_s8(vqsubq_s8(v118, v117), v53);
          *v108 = v119.i64[0];
          *(_QWORD *)((char *)v108 + a6) = vextq_s8(v119, v119, 8uLL).u64[0];
          v108 = (_QWORD *)((char *)v108 + 2 * a6);
          --v49;
        }
        while (v49);
        v120 = vaddlvq_s8(v53);
        if (v120 >= 0)
          v103 = v120;
        else
          v103 = -v120;
      }
      if (v103 > v106)
        return 0;
    }
    return 1;
  }
  if (a9 >= 25 || a7 == 0)
    v10 = 4;
  else
    v10 = 5;
  v11 = 4 << b_width_log2_lookup[a8];
  if (a9 >= 25)
    v12 = 3;
  else
    v12 = v10;
  v13 = (4 << b_height_log2_lookup[a8]);
  v14 = v11 >> 4;
  if (v11 >= 16)
  {
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v14;
    v16 = v123;
    v17 = v15;
    do
    {
      *v16 = 0uLL;
      v16 += 4;
      --v17;
    }
    while (v17);
    v18 = &v124;
    v19 = v15;
    do
    {
      *(_OWORD *)v18 = 0uLL;
      v18 += 8;
      --v19;
    }
    while (v19);
    v20 = &v125;
    v21 = v15;
    do
    {
      *(_OWORD *)v20 = 0uLL;
      v20 += 8;
      --v21;
    }
    while (v21);
    v22 = &v126;
    do
    {
      *(_OWORD *)v22 = 0uLL;
      v22 += 8;
      --v15;
    }
    while (v15);
  }
  if ((int)v13 < 1)
  {
    v24 = 0;
  }
  else
  {
    if (v11 >= 16)
    {
      v23 = 0;
      v24 = 0;
      v25 = vdupq_n_s8(v12);
      v26 = (uint8x16_t)vdupq_n_s8(v10);
      if (v14 <= 1)
        v27 = 1;
      else
        v27 = v14;
      v28.i64[0] = 0x707070707070707;
      v28.i64[1] = 0x707070707070707;
      v29.i64[0] = 0x1010101010101010;
      v29.i64[1] = 0x1010101010101010;
      v30.i64[0] = 0x202020202020202;
      v30.i64[1] = 0x202020202020202;
      while (1)
      {
        v31 = 0;
        v32 = (int8x16_t *)&v123[v23 & 0xFFFFFFFFFFFFFFF0];
        v33 = v32;
        do
        {
          v34 = *v33;
          v35 = *(uint8x16_t *)&a1[v31];
          v36 = *(uint8x16_t *)&a3[v31];
          v37 = (int8x16_t)vabdq_u8(v35, v36);
          v38 = vbslq_s8((int8x16_t)vcgtq_u8(v26, (uint8x16_t)v37), v37, vaddq_s8(vsubq_s8(v25, (int8x16_t)vcgtq_u8((uint8x16_t)v37, v28)), vbicq_s8(v30, (int8x16_t)vcgtq_u8(v29, (uint8x16_t)v37))));
          v39 = vandq_s8(v38, (int8x16_t)vcgtq_u8(v36, v35));
          v40 = vandq_s8(v38, (int8x16_t)vcgtq_u8(v35, v36));
          *(uint8x16_t *)&a5[v31] = vqsubq_u8(vqaddq_u8(v35, (uint8x16_t)v39), (uint8x16_t)v40);
          *v33 = vaddq_s8(vqsubq_s8(v39, v40), v34);
          v33 += 4;
          v31 += 2;
        }
        while (2 * v27 != v31);
        v41 = a8 == 5 && (_DWORD)v23 == 7;
        v42 = v41;
        if ((~(_DWORD)v23 & 0xF) == 0)
          break;
        v43 = v27;
        if (v42)
          goto LABEL_42;
LABEL_29:
        a1 = (_QWORD *)((char *)a1 + a2 - (uint64_t)v11 + v31 * 8);
        a3 = (_QWORD *)((char *)a3 + a4 - (uint64_t)v11 + v31 * 8);
        a5 = (_QWORD *)((char *)a5 + a6 - (uint64_t)v11 + v31 * 8);
        if ((_DWORD)++v23 == (_DWORD)v13)
          goto LABEL_63;
      }
      v43 = v27;
      do
      {
LABEL_42:
        v44 = *v32;
        v32 += 4;
        v24 += vaddlvq_s8(v44);
        --v43;
      }
      while (v43);
      goto LABEL_29;
    }
    v24 = 0;
    a1 = (_QWORD *)((char *)a1 + (a2 - (uint64_t)v11) * v13);
    a3 = (_QWORD *)((char *)a3 + (a4 - (uint64_t)v11) * v13);
    a5 = (_QWORD *)((char *)a5 + (a6 - (uint64_t)v11) * v13);
  }
LABEL_63:
  v70 = num_pels_log2_lookup[a8];
  if (a7)
    v71 = 3;
  else
    v71 = 2;
  v72 = v71 << v70;
  if (v24 < 0)
    v24 = -v24;
  v73 = __OFSUB__(v24, v72);
  v74 = v24 - v72;
  if ((v74 < 0) ^ v73 | (v74 == 0))
    return 1;
  v75 = v74 >> v70;
  if (v74 >> v70 > 2)
    return 0;
  if ((int)v13 < 1 || (v14 <= 1 ? (v76 = 1) : (v76 = v14), v11 < 16))
  {
    v78 = 0;
  }
  else
  {
    v77 = 0;
    v78 = 0;
    v79 = v75 + 1;
    v80 = v11;
    v81 = (char *)a1 - (int)v13 * a2;
    v82 = (char *)a3 - (int)v13 * a4;
    v83 = (char *)a5 - (int)v13 * a6;
    v84 = a2 - v80;
    v85 = (uint8x16_t)vdupq_n_s8(v79);
    v86 = a6 - v80;
    do
    {
      v87 = 0;
      v88 = (int8x16_t *)&v123[v77 & 0xFFFFFFFFFFFFFFF0];
      v89 = v88;
      do
      {
        v90 = *v89;
        v91 = *(uint8x16_t *)&v81[v87];
        v92 = *(uint8x16_t *)&v82[v87];
        v93 = vabdq_u8(v91, v92);
        v94 = (int8x16_t)vcgtq_u8(v92, v91);
        v95 = (int8x16_t)vcgtq_u8(v91, v92);
        v96 = (int8x16_t)vminq_u8(v93, v85);
        v97 = vandq_s8(v96, v94);
        v98 = vandq_s8(v96, v95);
        *(uint8x16_t *)&v83[v87] = vqaddq_u8(vqsubq_u8(*(uint8x16_t *)&v83[v87], (uint8x16_t)v97), (uint8x16_t)v98);
        *v89 = vaddq_s8(vqsubq_s8(v98, v97), v90);
        v89 += 4;
        v87 += 16;
      }
      while (16 * v76 != v87);
      v100 = a8 == 5 && (_DWORD)v77 == 7;
      if ((~(_DWORD)v77 & 0xF) == 0 || v100)
      {
        v101 = v76;
        do
        {
          v102 = *v88;
          v88 += 4;
          v78 += vaddlvq_s8(v102);
          --v101;
        }
        while (v101);
      }
      v81 += v84 + v87;
      v82 += a4 - v80 + v87;
      v83 += v86 + v87;
      ++v77;
    }
    while ((_DWORD)v77 != (_DWORD)v13);
  }
  if (v78 >= 0)
    v122 = v78;
  else
    v122 = -v78;
  return v122 <= v72;
}

uint64_t vp9_decode_block_tokens(uint64_t a1, int a2, uint64_t *a3, int a4, int a5, int a6, int a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t result;
  unsigned int v19;
  BOOL v20;
  char v21;
  char v22;
  unsigned int v23;
  BOOL v24;
  char v25;
  int v26;
  char v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  char v32;
  char v33;
  unsigned int v34;
  BOOL v35;
  char v36;
  int v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unint64_t v45;
  BOOL v46;
  char v47;
  unsigned int v48;
  BOOL v49;
  unsigned int v50;
  BOOL v51;
  char v52;
  char v53;

  v9 = a1 + 16;
  v10 = a1 + 13328;
  v11 = (uint64_t *)(v10 + 136 * a2);
  v12 = (unsigned __int16 *)v11 + 2 * a7 + 40;
  v13 = a4;
  v15 = v11[8];
  v14 = v11[9];
  v16 = a5;
  switch(a6)
  {
    case 0:
      if (*(_BYTE *)(v14 + a5))
        v17 = (*(_BYTE *)(v15 + a4) != 0) + 1;
      else
        v17 = *(_BYTE *)(v15 + a4) != 0;
      result = decode_coefs(v10, a2 > 0, *v11, 0, v12, v17, *a3, a3[2], v9);
      *(_BYTE *)(v14 + a5) = (int)result > 0;
      *(_BYTE *)(v15 + v13) = (int)result > 0;
      break;
    case 1:
      v19 = *(_DWORD *)(a1 + 13800);
      v20 = a4 + 2 <= v19 || v19 == 0;
      v21 = 8 * (a4 + 2 - v19);
      if (v20)
        v22 = 0;
      else
        v22 = v21;
      v23 = *(_DWORD *)(a1 + 13804);
      v24 = a5 + 2 <= v23 || v23 == 0;
      v25 = 8 * (a5 + 2 - v23);
      if (v24)
        v27 = 0;
      else
        v27 = v25;
      v26 = *(unsigned __int16 *)(v15 + a4);
      if (*(_WORD *)(v14 + v16))
        v28 = (v26 != 0) + 1;
      else
        v28 = v26 != 0;
      result = decode_coefs(v10, a2 > 0, *v11, 1u, v12, v28, *a3, a3[2], v9);
      if ((int)result <= 0)
        v29 = 0;
      else
        v29 = 257;
      *(_WORD *)(v15 + v13) = v29 >> v22;
      *(_WORD *)(v14 + v16) = v29 >> v27;
      break;
    case 2:
      v30 = *(_DWORD *)(a1 + 13800);
      v31 = a4 + 4 <= v30 || v30 == 0;
      v32 = 8 * (a4 + 4 - v30);
      if (v31)
        v33 = 0;
      else
        v33 = v32;
      v34 = *(_DWORD *)(a1 + 13804);
      v35 = a5 + 4 <= v34 || v34 == 0;
      v36 = 8 * (a5 + 4 - v34);
      if (v35)
        v38 = 0;
      else
        v38 = v36;
      v37 = *(_DWORD *)(v15 + a4);
      if (*(_DWORD *)(v14 + v16))
        v39 = (v37 != 0) + 1;
      else
        v39 = v37 != 0;
      result = decode_coefs(v10, a2 > 0, *v11, 2u, v12, v39, *a3, a3[2], v9);
      if ((int)result <= 0)
        v40 = 0;
      else
        v40 = 16843009;
      *(_DWORD *)(v15 + v13) = v40 >> v33;
      *(_DWORD *)(v14 + v16) = v40 >> v38;
      break;
    case 3:
      v41 = *(_DWORD *)(a1 + 13800);
      v42 = a4 + 8;
      v43 = *(_DWORD *)(a1 + 13804);
      if (*(_QWORD *)(v14 + a5))
        v44 = (*(_QWORD *)(v15 + a4) != 0) + 1;
      else
        v44 = *(_QWORD *)(v15 + a4) != 0;
      result = decode_coefs(v10, a2 > 0, *v11, 3u, v12, v44, *a3, a3[2], v9);
      v45 = 0x101010101010101;
      if ((int)result <= 0)
        v45 = 0;
      v46 = v42 <= v41 || v41 == 0;
      v47 = 8 * (v42 - v41);
      v48 = a5 + 8;
      if (v46)
        v47 = 0;
      v49 = v48 >= v43;
      v50 = v48 - v43;
      v51 = v50 == 0 || !v49 || v43 == 0;
      v52 = 8 * v50;
      *(_QWORD *)(v15 + v13) = v45 >> v47;
      if (v51)
        v53 = 0;
      else
        v53 = v52;
      *(_QWORD *)(v14 + a5) = v45 >> v53;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t decode_coefs(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned __int16 *a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  BOOL v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned __int16 *v27;
  int32x4_t v28;
  int32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  void (*v36)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  signed int v41;
  signed int v42;
  unsigned int v43;
  unint64_t *v44;
  int v45;
  BOOL v46;
  int v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  uint64_t v60;
  uint8x16_t *v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  uint8x16_t v71;
  uint16x8_t v72;
  uint32x4_t v73;
  uint64x2_t v74;
  uint64x2_t v75;
  uint32x4_t v76;
  uint64x2_t v77;
  uint16x8_t v78;
  uint32x4_t v79;
  uint64x2_t v80;
  uint64x2_t v81;
  uint64x2_t v82;
  uint64x2_t v83;
  uint32x4_t v84;
  uint64x2_t v85;
  uint64x2_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  unsigned int v95;
  unint64_t v96;
  unint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  unint64_t *v102;
  unint64_t v103;
  void (*v104)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  signed int v113;
  signed int v114;
  unsigned int v115;
  unint64_t *v116;
  int v117;
  BOOL v118;
  int v119;
  BOOL v120;
  int v121;
  unsigned int v122;
  unint64_t v123;
  uint64_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  int32x4_t v132;
  uint64_t v133;
  uint8x16_t *v134;
  int8x16_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t v140;
  int32x4_t v141;
  int32x4_t v142;
  int32x4_t v143;
  uint8x16_t v144;
  uint16x8_t v145;
  uint32x4_t v146;
  uint64x2_t v147;
  uint64x2_t v148;
  uint32x4_t v149;
  uint64x2_t v150;
  uint16x8_t v151;
  uint32x4_t v152;
  uint64x2_t v153;
  uint64x2_t v154;
  uint64x2_t v155;
  uint64x2_t v156;
  uint32x4_t v157;
  uint64x2_t v158;
  uint64x2_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  unsigned int v168;
  unint64_t v169;
  unint64_t v170;
  int v171;
  unsigned __int8 *v172;
  int v173;
  unint64_t v174;
  unsigned int v175;
  int v176;
  unint64_t *v177;
  unint64_t v178;
  void (*v179)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  signed int v186;
  signed int v187;
  unint64_t *v188;
  int v189;
  BOOL v190;
  int v191;
  BOOL v192;
  int v193;
  unsigned int v194;
  signed int v195;
  uint64_t v196;
  int8x16_t v197;
  int8x16_t v198;
  int32x4_t v199;
  int32x4_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  uint64_t v205;
  uint8x16_t *v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int32x4_t v213;
  int32x4_t v214;
  int32x4_t v215;
  uint8x16_t v216;
  uint16x8_t v217;
  uint32x4_t v218;
  uint64x2_t v219;
  uint64x2_t v220;
  uint32x4_t v221;
  uint64x2_t v222;
  uint16x8_t v223;
  uint32x4_t v224;
  uint64x2_t v225;
  uint64x2_t v226;
  uint64x2_t v227;
  uint64x2_t v228;
  uint32x4_t v229;
  uint64x2_t v230;
  uint64x2_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  unsigned int v240;
  int v241;
  unint64_t v242;
  uint64_t v243;
  unint64_t v244;
  int v245;
  int v246;
  unint64_t v247;
  unsigned int v248;
  uint64_t v249;
  int v250;
  unint64_t v251;
  unint64_t v252;
  unsigned __int8 v253;
  int v254;
  int v255;
  int v256;
  int v257;
  uint64_t v258;
  unint64_t v259;
  unsigned int v260;
  unsigned __int8 *v261;
  int v262;
  unint64_t *v263;
  unint64_t v264;
  void (*v265)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  signed int v269;
  signed int v270;
  unint64_t *v271;
  int v272;
  BOOL v273;
  int v274;
  int v275;
  unsigned int v276;
  signed int v277;
  uint64_t v278;
  int8x16_t v279;
  int8x16_t v280;
  int32x4_t v281;
  int32x4_t v282;
  int32x4_t v283;
  int32x4_t v284;
  int32x4_t v285;
  int32x4_t v286;
  uint64_t v287;
  uint8x16_t *v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  int8x16_t v293;
  int8x16_t v294;
  int32x4_t v295;
  int32x4_t v296;
  int32x4_t v297;
  uint8x16_t v298;
  uint16x8_t v299;
  uint32x4_t v300;
  uint64x2_t v301;
  uint64x2_t v302;
  uint32x4_t v303;
  uint64x2_t v304;
  uint16x8_t v305;
  uint32x4_t v306;
  uint64x2_t v307;
  uint64x2_t v308;
  uint64x2_t v309;
  uint64x2_t v310;
  uint32x4_t v311;
  uint64x2_t v312;
  uint64x2_t v313;
  int8x16_t v314;
  int8x16_t v315;
  int8x16_t v316;
  int8x16_t v317;
  int8x16_t v318;
  int8x16_t v319;
  int8x16_t v320;
  int8x16_t v321;
  unsigned int v322;
  int v323;
  unint64_t v324;
  unint64_t v325;
  int v326;
  unint64_t v327;
  unsigned int v328;
  int v329;
  unint64_t *v330;
  unint64_t v331;
  void (*v332)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v333;
  __int16 v334;
  uint64_t v335;
  signed int v336;
  signed int v337;
  unint64_t *v338;
  int v339;
  int v340;
  unint64_t v341;
  unsigned int v342;
  int v343;
  unint64_t *v344;
  unint64_t v345;
  void (*v346)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  signed int v350;
  signed int v351;
  unint64_t *v352;
  int v353;
  BOOL v354;
  int v355;
  int v356;
  unsigned int v357;
  signed int v358;
  uint64_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int32x4_t v362;
  int32x4_t v363;
  int32x4_t v364;
  int32x4_t v365;
  int32x4_t v366;
  int32x4_t v367;
  uint64_t v368;
  uint8x16_t *v369;
  int8x16_t v370;
  int8x16_t v371;
  int8x16_t v372;
  int8x16_t v373;
  int8x16_t v374;
  int8x16_t v375;
  int32x4_t v376;
  int32x4_t v377;
  int32x4_t v378;
  uint8x16_t v379;
  uint16x8_t v380;
  uint32x4_t v381;
  uint64x2_t v382;
  uint64x2_t v383;
  uint32x4_t v384;
  uint64x2_t v385;
  uint16x8_t v386;
  uint32x4_t v387;
  uint64x2_t v388;
  uint64x2_t v389;
  uint64x2_t v390;
  uint64x2_t v391;
  uint32x4_t v392;
  uint64x2_t v393;
  uint64x2_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  int8x16_t v401;
  int8x16_t v402;
  unsigned int v403;
  int v404;
  BOOL v405;
  int v406;
  int v407;
  unsigned int v408;
  signed int v409;
  uint64_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int32x4_t v413;
  int32x4_t v414;
  int32x4_t v415;
  int32x4_t v416;
  int32x4_t v417;
  int32x4_t v418;
  uint64_t v419;
  uint8x16_t *v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  uint8x16_t v430;
  uint16x8_t v431;
  uint32x4_t v432;
  uint64x2_t v433;
  uint64x2_t v434;
  uint32x4_t v435;
  uint64x2_t v436;
  uint16x8_t v437;
  uint32x4_t v438;
  uint64x2_t v439;
  uint64x2_t v440;
  uint64x2_t v441;
  uint64x2_t v442;
  uint32x4_t v443;
  uint64x2_t v444;
  uint64x2_t v445;
  int8x16_t v446;
  int8x16_t v447;
  int8x16_t v448;
  int8x16_t v449;
  int8x16_t v450;
  int8x16_t v451;
  int8x16_t v452;
  int8x16_t v453;
  unsigned int v454;
  int v455;
  unint64_t v456;
  int v457;
  int v458;
  int v459;
  unint64_t v460;
  unsigned int v461;
  int v462;
  unint64_t *v463;
  unint64_t v464;
  void (*v465)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v466;
  __int16 v467;
  uint64_t v468;
  signed int v469;
  signed int v470;
  unint64_t *v471;
  int v472;
  BOOL v473;
  int v474;
  int v475;
  unsigned int v476;
  signed int v477;
  uint64_t v478;
  int8x16_t v479;
  int8x16_t v480;
  int32x4_t v481;
  int32x4_t v482;
  int32x4_t v483;
  int32x4_t v484;
  int32x4_t v485;
  int32x4_t v486;
  uint64_t v487;
  uint8x16_t *v488;
  int8x16_t v489;
  int8x16_t v490;
  int8x16_t v491;
  int8x16_t v492;
  int8x16_t v493;
  int8x16_t v494;
  int32x4_t v495;
  int32x4_t v496;
  int32x4_t v497;
  uint8x16_t v498;
  uint16x8_t v499;
  uint32x4_t v500;
  uint64x2_t v501;
  uint64x2_t v502;
  uint32x4_t v503;
  uint64x2_t v504;
  uint16x8_t v505;
  uint32x4_t v506;
  uint64x2_t v507;
  uint64x2_t v508;
  uint64x2_t v509;
  uint64x2_t v510;
  uint32x4_t v511;
  uint64x2_t v512;
  uint64x2_t v513;
  int8x16_t v514;
  int8x16_t v515;
  int8x16_t v516;
  int8x16_t v517;
  int8x16_t v518;
  int8x16_t v519;
  int8x16_t v520;
  int8x16_t v521;
  unsigned int v522;
  int v523;
  unint64_t v524;
  int v525;
  unint64_t v526;
  unsigned int v527;
  int v528;
  unint64_t *v529;
  unint64_t v530;
  void (*v531)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v532;
  __int16 v533;
  uint64_t v534;
  signed int v535;
  signed int v536;
  unint64_t *v537;
  int v538;
  int v539;
  unint64_t v540;
  unsigned int v541;
  int v542;
  unint64_t *v543;
  unint64_t v544;
  void (*v545)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  signed int v549;
  signed int v550;
  unint64_t *v551;
  int v552;
  BOOL v553;
  int v554;
  int v555;
  unsigned int v556;
  signed int v557;
  uint64_t v558;
  int8x16_t v559;
  int8x16_t v560;
  int32x4_t v561;
  int32x4_t v562;
  int32x4_t v563;
  int32x4_t v564;
  int32x4_t v565;
  int32x4_t v566;
  uint64_t v567;
  uint8x16_t *v568;
  int8x16_t v569;
  int8x16_t v570;
  int8x16_t v571;
  int8x16_t v572;
  int8x16_t v573;
  int8x16_t v574;
  int32x4_t v575;
  int32x4_t v576;
  int32x4_t v577;
  uint8x16_t v578;
  uint16x8_t v579;
  uint32x4_t v580;
  uint64x2_t v581;
  uint64x2_t v582;
  uint32x4_t v583;
  uint64x2_t v584;
  uint16x8_t v585;
  uint32x4_t v586;
  uint64x2_t v587;
  uint64x2_t v588;
  uint64x2_t v589;
  uint64x2_t v590;
  uint32x4_t v591;
  uint64x2_t v592;
  uint64x2_t v593;
  int8x16_t v594;
  int8x16_t v595;
  int8x16_t v596;
  int8x16_t v597;
  int8x16_t v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  unsigned int v602;
  int v603;
  BOOL v604;
  int v605;
  int v606;
  unsigned int v607;
  signed int v608;
  uint64_t v609;
  int8x16_t v610;
  int8x16_t v611;
  int32x4_t v612;
  int32x4_t v613;
  int32x4_t v614;
  int32x4_t v615;
  int32x4_t v616;
  int32x4_t v617;
  uint64_t v618;
  uint8x16_t *v619;
  int8x16_t v620;
  int8x16_t v621;
  int8x16_t v622;
  int8x16_t v623;
  int8x16_t v624;
  int8x16_t v625;
  int32x4_t v626;
  int32x4_t v627;
  int32x4_t v628;
  uint8x16_t v629;
  uint16x8_t v630;
  uint32x4_t v631;
  uint64x2_t v632;
  uint64x2_t v633;
  uint32x4_t v634;
  uint64x2_t v635;
  uint16x8_t v636;
  uint32x4_t v637;
  uint64x2_t v638;
  uint64x2_t v639;
  uint64x2_t v640;
  uint64x2_t v641;
  uint32x4_t v642;
  uint64x2_t v643;
  uint64x2_t v644;
  int8x16_t v645;
  int8x16_t v646;
  int8x16_t v647;
  int8x16_t v648;
  int8x16_t v649;
  int8x16_t v650;
  int8x16_t v651;
  int8x16_t v652;
  unsigned int v653;
  unint64_t v654;
  unint64_t v655;
  int v656;
  int v657;
  int v658;
  unint64_t v659;
  unint64_t v660;
  int v661;
  unint64_t v662;
  unsigned int v663;
  unint64_t *v664;
  unint64_t v665;
  void (*v666)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v667;
  __int16 v668;
  uint64_t v669;
  signed int v670;
  signed int v671;
  unint64_t *v672;
  int v673;
  int v674;
  unint64_t v675;
  unsigned int v676;
  unint64_t *v677;
  unint64_t v678;
  void (*v679)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v680;
  __int16 v681;
  uint64_t v682;
  signed int v683;
  signed int v684;
  unint64_t *v685;
  int v686;
  BOOL v687;
  int v688;
  int v689;
  unsigned int v690;
  signed int v691;
  uint64_t v692;
  int8x16_t v693;
  int8x16_t v694;
  int32x4_t v695;
  int32x4_t v696;
  int32x4_t v697;
  int32x4_t v698;
  int32x4_t v699;
  int32x4_t v700;
  uint64_t v701;
  uint8x16_t *v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int8x16_t v708;
  int32x4_t v709;
  int32x4_t v710;
  int32x4_t v711;
  uint8x16_t v712;
  uint16x8_t v713;
  uint32x4_t v714;
  uint64x2_t v715;
  uint64x2_t v716;
  uint32x4_t v717;
  uint64x2_t v718;
  uint16x8_t v719;
  uint32x4_t v720;
  uint64x2_t v721;
  uint64x2_t v722;
  uint64x2_t v723;
  uint64x2_t v724;
  uint32x4_t v725;
  uint64x2_t v726;
  uint64x2_t v727;
  int8x16_t v728;
  int8x16_t v729;
  int8x16_t v730;
  int8x16_t v731;
  int8x16_t v732;
  int8x16_t v733;
  int8x16_t v734;
  int8x16_t v735;
  unsigned int v736;
  int v737;
  BOOL v738;
  int v739;
  int v740;
  unsigned int v741;
  signed int v742;
  uint64_t v743;
  int8x16_t v744;
  int8x16_t v745;
  int32x4_t v746;
  int32x4_t v747;
  int32x4_t v748;
  int32x4_t v749;
  int32x4_t v750;
  int32x4_t v751;
  uint64_t v752;
  uint8x16_t *v753;
  int8x16_t v754;
  int8x16_t v755;
  int8x16_t v756;
  int8x16_t v757;
  int8x16_t v758;
  int8x16_t v759;
  int32x4_t v760;
  int32x4_t v761;
  int32x4_t v762;
  uint8x16_t v763;
  uint16x8_t v764;
  uint32x4_t v765;
  uint64x2_t v766;
  uint64x2_t v767;
  uint32x4_t v768;
  uint64x2_t v769;
  uint16x8_t v770;
  uint32x4_t v771;
  uint64x2_t v772;
  uint64x2_t v773;
  uint64x2_t v774;
  uint64x2_t v775;
  uint32x4_t v776;
  uint64x2_t v777;
  uint64x2_t v778;
  int8x16_t v779;
  int8x16_t v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  int8x16_t v784;
  int8x16_t v785;
  int8x16_t v786;
  unsigned int v787;
  unint64_t v788;
  unint64_t v789;
  int v790;
  unint64_t v791;
  unsigned int v792;
  int v793;
  unint64_t *v794;
  unint64_t v795;
  void (*v796)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v797;
  __int16 v798;
  uint64_t v799;
  signed int v800;
  signed int v801;
  unint64_t *v802;
  int v803;
  int v804;
  unint64_t v805;
  unsigned int v806;
  int v807;
  unint64_t *v808;
  unint64_t v809;
  void (*v810)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  signed int v814;
  signed int v815;
  unint64_t *v816;
  int v817;
  BOOL v818;
  int v819;
  int v820;
  unsigned int v821;
  signed int v822;
  uint64_t v823;
  int8x16_t v824;
  int8x16_t v825;
  int32x4_t v826;
  int32x4_t v827;
  int32x4_t v828;
  int32x4_t v829;
  int32x4_t v830;
  int32x4_t v831;
  uint64_t v832;
  uint8x16_t *v833;
  int8x16_t v834;
  int8x16_t v835;
  int8x16_t v836;
  int8x16_t v837;
  int8x16_t v838;
  int8x16_t v839;
  int32x4_t v840;
  int32x4_t v841;
  int32x4_t v842;
  uint8x16_t v843;
  uint16x8_t v844;
  uint32x4_t v845;
  uint64x2_t v846;
  uint64x2_t v847;
  uint32x4_t v848;
  uint64x2_t v849;
  uint16x8_t v850;
  uint32x4_t v851;
  uint64x2_t v852;
  uint64x2_t v853;
  uint64x2_t v854;
  uint64x2_t v855;
  uint32x4_t v856;
  uint64x2_t v857;
  uint64x2_t v858;
  int8x16_t v859;
  int8x16_t v860;
  int8x16_t v861;
  int8x16_t v862;
  int8x16_t v863;
  int8x16_t v864;
  int8x16_t v865;
  int8x16_t v866;
  unsigned int v867;
  int v868;
  BOOL v869;
  int v870;
  int v871;
  unsigned int v872;
  signed int v873;
  uint64_t v874;
  int8x16_t v875;
  int8x16_t v876;
  int32x4_t v877;
  int32x4_t v878;
  int32x4_t v879;
  int32x4_t v880;
  int32x4_t v881;
  int32x4_t v882;
  uint64_t v883;
  uint8x16_t *v884;
  int8x16_t v885;
  int8x16_t v886;
  int8x16_t v887;
  int8x16_t v888;
  int8x16_t v889;
  int8x16_t v890;
  int32x4_t v891;
  int32x4_t v892;
  int32x4_t v893;
  uint8x16_t v894;
  uint16x8_t v895;
  uint32x4_t v896;
  uint64x2_t v897;
  uint64x2_t v898;
  uint32x4_t v899;
  uint64x2_t v900;
  uint16x8_t v901;
  uint32x4_t v902;
  uint64x2_t v903;
  uint64x2_t v904;
  uint64x2_t v905;
  uint64x2_t v906;
  uint32x4_t v907;
  uint64x2_t v908;
  uint64x2_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t v912;
  int8x16_t v913;
  int8x16_t v914;
  int8x16_t v915;
  int8x16_t v916;
  int8x16_t v917;
  unsigned int v918;
  unint64_t v919;
  unint64_t v920;
  int v921;
  int v922;
  int v923;
  unint64_t v924;
  unint64_t v925;
  int v926;
  int v927;
  int v928;
  unint64_t v929;
  unsigned int v930;
  int v931;
  unint64_t *v932;
  unint64_t v933;
  void (*v934)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v935;
  __int16 v936;
  uint64_t v937;
  signed int v938;
  signed int v939;
  unint64_t *v940;
  int v941;
  BOOL v942;
  int v943;
  int v944;
  unsigned int v945;
  signed int v946;
  uint64_t v947;
  int8x16_t v948;
  int8x16_t v949;
  int32x4_t v950;
  int32x4_t v951;
  int32x4_t v952;
  int32x4_t v953;
  int32x4_t v954;
  int32x4_t v955;
  uint64_t v956;
  uint8x16_t *v957;
  int8x16_t v958;
  int8x16_t v959;
  int8x16_t v960;
  int8x16_t v961;
  int8x16_t v962;
  int8x16_t v963;
  int32x4_t v964;
  int32x4_t v965;
  int32x4_t v966;
  uint8x16_t v967;
  uint16x8_t v968;
  uint32x4_t v969;
  uint64x2_t v970;
  uint64x2_t v971;
  uint32x4_t v972;
  uint64x2_t v973;
  uint16x8_t v974;
  uint32x4_t v975;
  uint64x2_t v976;
  uint64x2_t v977;
  uint64x2_t v978;
  uint64x2_t v979;
  uint32x4_t v980;
  uint64x2_t v981;
  uint64x2_t v982;
  int8x16_t v983;
  int8x16_t v984;
  int8x16_t v985;
  int8x16_t v986;
  int8x16_t v987;
  int8x16_t v988;
  int8x16_t v989;
  int8x16_t v990;
  unsigned int v991;
  int v992;
  unint64_t v993;
  unint64_t v994;
  int v995;
  unint64_t v996;
  int v997;
  __int16 v998;
  int v999;
  unint64_t v1000;
  unint64_t v1001;
  int v1002;
  int v1003;
  int v1004;
  int v1005;
  int v1006;
  unint64_t v1007;
  int v1008;
  __int16 v1009;
  int v1010;
  unint64_t v1011;
  unint64_t v1012;
  int v1013;
  int v1014;
  int v1015;
  int v1016;
  unint64_t v1017;
  int v1018;
  __int16 v1019;
  unint64_t v1020;
  int v1021;
  int v1022;
  int v1023;
  int v1024;
  unint64_t v1025;
  int v1026;
  __int16 v1027;
  unint64_t v1028;
  int v1029;
  int v1030;
  int v1031;
  unint64_t v1032;
  int v1033;
  __int16 v1034;
  unint64_t v1035;
  int v1036;
  int v1037;
  unint64_t v1038;
  int v1039;
  __int16 v1040;
  unint64_t v1041;
  int v1042;
  int v1043;
  int v1044;
  int v1045;
  unint64_t v1046;
  int v1047;
  __int16 v1048;
  unint64_t v1049;
  int v1050;
  int v1051;
  int v1052;
  int v1053;
  unint64_t v1054;
  int v1055;
  unint64_t v1056;
  int v1057;
  __int16 v1058;
  int v1059;
  unint64_t v1060;
  unint64_t v1061;
  int v1062;
  int v1063;
  int v1064;
  uint64_t v1065;
  int v1066;
  int v1067;
  int v1068;
  int v1069;
  int v1070;
  int v1071;
  unint64_t *v1072;
  unint64_t v1073;
  void (*v1074)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1075;
  int v1076;
  uint64_t v1077;
  uint64_t v1078;
  signed int v1079;
  signed int v1080;
  unsigned int v1081;
  unint64_t *v1082;
  int v1083;
  BOOL v1084;
  int v1085;
  int v1086;
  unsigned int v1087;
  uint64_t v1088;
  int8x16_t v1089;
  int8x16_t v1090;
  int32x4_t v1091;
  int32x4_t v1092;
  int32x4_t v1093;
  int32x4_t v1094;
  int32x4_t v1095;
  int32x4_t v1096;
  uint64_t v1097;
  uint8x16_t *v1098;
  int8x16_t v1099;
  int8x16_t v1100;
  int8x16_t v1101;
  int8x16_t v1102;
  int8x16_t v1103;
  int8x16_t v1104;
  int32x4_t v1105;
  int32x4_t v1106;
  int32x4_t v1107;
  uint8x16_t v1108;
  uint16x8_t v1109;
  uint32x4_t v1110;
  uint64x2_t v1111;
  uint64x2_t v1112;
  uint32x4_t v1113;
  uint64x2_t v1114;
  uint16x8_t v1115;
  uint32x4_t v1116;
  uint64x2_t v1117;
  uint64x2_t v1118;
  uint64x2_t v1119;
  uint64x2_t v1120;
  uint32x4_t v1121;
  uint64x2_t v1122;
  uint64x2_t v1123;
  int8x16_t v1124;
  int8x16_t v1125;
  int8x16_t v1126;
  int8x16_t v1127;
  int8x16_t v1128;
  int8x16_t v1129;
  int8x16_t v1130;
  int8x16_t v1131;
  unsigned int v1132;
  unint64_t v1133;
  int v1134;
  unint64_t v1135;
  int v1136;
  __int16 v1137;
  unint64_t v1138;
  int v1139;
  int v1140;
  int v1141;
  unint64_t v1142;
  int v1143;
  __int16 v1144;
  unint64_t v1145;
  int v1146;
  int v1147;
  int v1148;
  unint64_t v1149;
  int v1150;
  __int16 v1151;
  unint64_t v1152;
  int v1153;
  int v1154;
  int v1155;
  unint64_t v1156;
  int v1157;
  __int16 v1158;
  unint64_t v1159;
  int v1160;
  int v1161;
  int v1162;
  unint64_t v1163;
  int v1164;
  int v1165;
  unint64_t *v1166;
  unint64_t v1167;
  void (*v1168)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1169;
  uint64_t v1170;
  signed int v1171;
  signed int v1172;
  unsigned int v1173;
  unint64_t *v1174;
  int v1175;
  BOOL v1176;
  int v1177;
  int v1178;
  unsigned int v1179;
  uint64_t v1180;
  int8x16_t v1181;
  int8x16_t v1182;
  int32x4_t v1183;
  int32x4_t v1184;
  int32x4_t v1185;
  int32x4_t v1186;
  int32x4_t v1187;
  int32x4_t v1188;
  uint64_t v1189;
  uint8x16_t *v1190;
  int8x16_t v1191;
  int8x16_t v1192;
  int8x16_t v1193;
  int8x16_t v1194;
  int8x16_t v1195;
  int8x16_t v1196;
  int32x4_t v1197;
  int32x4_t v1198;
  int32x4_t v1199;
  uint8x16_t v1200;
  uint16x8_t v1201;
  uint32x4_t v1202;
  uint64x2_t v1203;
  uint64x2_t v1204;
  uint32x4_t v1205;
  uint64x2_t v1206;
  uint16x8_t v1207;
  uint32x4_t v1208;
  uint64x2_t v1209;
  uint64x2_t v1210;
  uint64x2_t v1211;
  uint64x2_t v1212;
  uint32x4_t v1213;
  uint64x2_t v1214;
  uint64x2_t v1215;
  int8x16_t v1216;
  int8x16_t v1217;
  int8x16_t v1218;
  int8x16_t v1219;
  int8x16_t v1220;
  int8x16_t v1221;
  int8x16_t v1222;
  int8x16_t v1223;
  unsigned int v1224;
  int v1225;
  int v1227;
  uint64_t v1228;
  unsigned __int8 *v1229;
  unint64_t v1230;
  char v1231;
  uint64_t v1232;
  unsigned __int8 *v1233;
  uint64_t v1235;
  uint64_t v1236;
  unsigned __int16 *v1237;
  uint64_t v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  int v1244;
  int v1245;
  int v1246;
  int v1247;
  _BYTE v1248[1024];
  uint64_t v1249;

  v9 = 0;
  v10 = a9;
  v1249 = *MEMORY[0x24BDAC8D0];
  v11 = a6;
  v12 = *(_QWORD *)(a1 + 416);
  v13 = 16;
  v14 = (16 << (2 * a4));
  v15 = *(char *)(**(_QWORD **)(a1 + 448) + 8) > 0;
  v16 = *(_QWORD *)(a1 + 504) + 432 * a4 + 216 * a2 + 108 * (*(char *)(**(_QWORD **)(a1 + 448) + 8) > 0) + 174;
  v1231 = a4 == 3;
  v17 = *(_DWORD *)(a1 + 624);
  v18 = (unsigned __int8 *)&unk_208F476E2;
  if (v17 != 10)
  {
    v18 = (unsigned __int8 *)&vp9_cat6_prob;
    v13 = 14;
  }
  v19 = v17 == 12;
  if (v17 == 12)
    v20 = (unsigned __int8 *)&vp9_cat6_prob_high12;
  else
    v20 = v18;
  v1233 = v20;
  if (v19)
    v21 = 18;
  else
    v21 = v13;
  v1232 = v21;
  v22 = v12 + 2304 * a4 + 1152 * a2 + 576 * (*(char *)(**(_QWORD **)(a1 + 448) + 8) > 0) + 816;
  v1235 = v12 + 576 * a4 + 288 * a2 + 144 * v15 + 10032;
  v23 = *(_DWORD *)(a9 + 8);
  v24 = *(_DWORD *)(a9 + 12);
  v25 = *(_QWORD *)a9;
  if (a4)
    v26 = (unsigned __int8 *)&vp9_coefband_trans_8x8plus;
  else
    v26 = (unsigned __int8 *)&vp9_coefband_trans_4x4;
  v27 = a5 + 1;
  v1236 = a9 + 48;
  v28.i64[0] = 0x800000008;
  v28.i64[1] = 0x800000008;
  v29.i64[0] = 0x7F0000007FLL;
  v29.i64[1] = 0x7F0000007FLL;
  v1242 = a7;
  v1243 = a8;
  v1240 = v14;
  v1241 = v12;
  v1238 = v22;
  v1239 = v16;
  v1237 = a5 + 1;
  while (1)
  {
    v30 = *a5;
    v31 = *v26;
    if (v12)
      ++*(_DWORD *)(v1235 + 24 * *v26 + 4 * v11);
    v32 = (unsigned __int8 *)(v16 + 18 * v31 + 3 * v11);
    v33 = *v32;
    if ((v24 & 0x80000000) != 0)
    {
      v1245 = *v32;
      *(_QWORD *)v10 = v25;
      *(_DWORD *)(v10 + 12) = v24;
      v34 = *(unint64_t **)(v10 + 24);
      v35 = *(_QWORD *)(v10 + 16) - (_QWORD)v34;
      v36 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
      if (v36)
      {
        if (v35 >= 9)
          v37 = 9;
        else
          v37 = *(_QWORD *)(v10 + 16) - (_QWORD)v34;
        v1244 = v23;
        v38 = v30;
        v39 = v11;
        v36(*(_QWORD *)(v10 + 40), v34, v1236, v37);
        v11 = v39;
        v30 = v38;
        v23 = v1244;
        v29.i64[0] = 0x7F0000007FLL;
        v29.i64[1] = 0x7F0000007FLL;
        v28.i64[0] = 0x800000008;
        v28.i64[1] = 0x800000008;
        v27 = v1237;
        v22 = v1238;
        v16 = v1239;
        v14 = v1240;
        v12 = v1241;
        a7 = v1242;
        v34 = (unint64_t *)(a9 + 48);
        a8 = v1243;
      }
      v40 = 8 * v35;
      v41 = 48 - v24;
      if (8 * v35 < 0x41)
      {
        v45 = 56 - v24 - v40;
        if (v45 < 0)
          v43 = v24;
        else
          v43 = v24 + 0x40000000;
        if (v40)
          v46 = 1;
        else
          v46 = v45 <= -1;
        v10 = a9;
        if (v46 && (v47 = v45 & ~(v45 >> 31), v41 >= v47))
        {
          v48 = v47 - 1;
          if (v47 - 1 >= (int)(40 - v24))
            v48 = 40 - v24;
          v49 = 47 - v24 - v48;
          if (v49 >= 0x78)
          {
            v50 = v11;
            v51 = (v49 >> 3) + 1;
            v52 = (int8x16_t)v25;
            v53 = 0uLL;
            v54 = (int32x4_t)v43;
            v55 = vdupq_n_s32(v41);
            v56 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6C0);
            v44 = (unint64_t *)((char *)v34 + (v51 & 0x3FFFFFF0));
            v57 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6D0);
            v41 -= 8 * (v51 & 0x3FFFFFF0);
            v58 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6A0);
            v59 = vaddq_s32(v55, (int32x4_t)xmmword_208F3A6B0);
            v60 = v51 & 0x3FFFFFF0;
            v61 = (uint8x16_t *)v34;
            v62 = 0uLL;
            v63 = 0uLL;
            v64 = 0uLL;
            v65 = 0uLL;
            v66 = 0uLL;
            v67 = 0uLL;
            v68 = 0uLL;
            v69 = 0uLL;
            v70 = 0uLL;
            do
            {
              v71 = *v61++;
              v72 = vmovl_high_u8(v71);
              v73 = vmovl_high_u16(v72);
              v74.i64[0] = v73.u32[0];
              v74.i64[1] = v73.u32[1];
              v75 = v74;
              v76 = vmovl_u16(*(uint16x4_t *)v72.i8);
              v74.i64[0] = v76.u32[2];
              v74.i64[1] = v76.u32[3];
              v77 = v74;
              v78 = vmovl_u8(*(uint8x8_t *)v71.i8);
              v79 = vmovl_high_u16(v78);
              v74.i64[0] = v79.u32[2];
              v74.i64[1] = v79.u32[3];
              v80 = v74;
              v74.i64[0] = v73.u32[2];
              v74.i64[1] = v73.u32[3];
              v81 = v74;
              v74.i64[0] = v76.u32[0];
              v74.i64[1] = v76.u32[1];
              v82 = v74;
              v74.i64[0] = v79.u32[0];
              v74.i64[1] = v79.u32[1];
              v83 = v74;
              v84 = vmovl_u16(*(uint16x4_t *)v78.i8);
              v74.i64[0] = v84.u32[2];
              v74.i64[1] = v84.u32[3];
              v85 = v74;
              v74.i64[0] = v84.u32[0];
              v74.i64[1] = v84.u32[1];
              v86 = v74;
              v74.i64[0] = v59.u32[0];
              v74.i64[1] = v59.u32[1];
              v87 = (int8x16_t)vshlq_u64(v86, v74);
              v74.i64[0] = v59.u32[2];
              v74.i64[1] = v59.u32[3];
              v88 = (int8x16_t)vshlq_u64(v85, v74);
              v74.i64[0] = v58.u32[0];
              v74.i64[1] = v58.u32[1];
              v89 = (int8x16_t)vshlq_u64(v83, v74);
              v74.i64[0] = v57.u32[0];
              v74.i64[1] = v57.u32[1];
              v90 = (int8x16_t)vshlq_u64(v82, v74);
              v74.i64[0] = v56.u32[2];
              v74.i64[1] = v56.u32[3];
              v91 = (int8x16_t)vshlq_u64(v81, v74);
              v74.i64[0] = v58.u32[2];
              v74.i64[1] = v58.u32[3];
              v92 = (int8x16_t)vshlq_u64(v80, v74);
              v74.i64[0] = v57.u32[2];
              v74.i64[1] = v57.u32[3];
              v93 = (int8x16_t)vshlq_u64(v77, v74);
              v74.i64[0] = v56.u32[0];
              v74.i64[1] = v56.u32[1];
              v66 = vorrq_s8((int8x16_t)vshlq_u64(v75, v74), v66);
              v65 = vorrq_s8(v93, v65);
              v63 = vorrq_s8(v92, v63);
              v67 = vorrq_s8(v91, v67);
              v64 = vorrq_s8(v90, v64);
              v62 = vorrq_s8(v89, v62);
              v53 = vorrq_s8(v88, v53);
              v52 = vorrq_s8(v87, v52);
              v54 = vaddq_s32(v54, v28);
              v68 = vaddq_s32(v68, v28);
              v69 = vaddq_s32(v69, v28);
              v70 = vaddq_s32(v70, v28);
              v59 = vaddq_s32(v59, v29);
              v58 = vaddq_s32(v58, v29);
              v57 = vaddq_s32(v57, v29);
              v56 = vaddq_s32(v56, v29);
              v60 -= 16;
            }
            while (v60);
            v43 = vaddvq_s32(vaddq_s32(vaddq_s32(v54, v69), vaddq_s32(v68, v70)));
            v94 = vorrq_s8(vorrq_s8(vorrq_s8(v52, v64), vorrq_s8(v62, v66)), vorrq_s8(vorrq_s8(v53, v65), vorrq_s8(v63, v67)));
            v25 = (unint64_t)vorr_s8(*(int8x8_t *)v94.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL));
            v11 = v50;
            if ((v51 & 0x3FFFFFF0) == v51)
              goto LABEL_41;
          }
          else
          {
            v44 = v34;
          }
          do
          {
            v43 += 8;
            v95 = *(unsigned __int8 *)v44;
            v44 = (unint64_t *)((char *)v44 + 1);
            v25 |= (unint64_t)v95 << v41;
            v41 -= 8;
          }
          while (v41 >= v47);
        }
        else
        {
          v44 = v34;
        }
      }
      else
      {
        v42 = (v41 & 0xFFFFFFF8) + 8;
        v43 = v42 + v24;
        v44 = (unint64_t *)((char *)v34 + (v42 >> 3));
        v10 = a9;
        v25 = (bswap64(*v34) >> (56 - (v41 & 0xF8u)) << (v41 & 7)) | *(_QWORD *)a9;
      }
LABEL_41:
      *(_QWORD *)(v10 + 24) += (char *)v44 - (char *)v34;
      *(_QWORD *)v10 = v25;
      *(_DWORD *)(v10 + 12) = v43;
      v24 = v43;
      v33 = v1245;
    }
    v96 = (unint64_t)((v23 - 1) * v33 + 256) >> 8;
    v97 = v25 - (v96 << 56);
    if (v25 < v96 << 56)
      break;
    v98 = v23 - v96;
    v99 = vpx_norm[v98];
    v25 = v97 << v99;
    v24 -= v99;
    v9 = (int)v9;
    v23 = v98 << v99;
    v100 = v32[1];
    if ((v24 & 0x80000000) == 0)
      goto LABEL_77;
LABEL_49:
    v1246 = v100;
    *(_QWORD *)v10 = v25;
    *(_DWORD *)(v10 + 12) = v24;
    v102 = *(unint64_t **)(v10 + 24);
    v103 = *(_QWORD *)(v10 + 16) - (_QWORD)v102;
    v104 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
    if (v104)
    {
      if (v103 >= 9)
        v105 = 9;
      else
        v105 = *(_QWORD *)(v10 + 16) - (_QWORD)v102;
      v106 = v30;
      v107 = v23;
      v108 = v9;
      v109 = v32;
      v110 = v31;
      v111 = v11;
      v104(*(_QWORD *)(v10 + 40), v102, v1236, v105);
      v11 = v111;
      v31 = v110;
      v32 = v109;
      v9 = v108;
      v23 = v107;
      v30 = v106;
      v29.i64[0] = 0x7F0000007FLL;
      v29.i64[1] = 0x7F0000007FLL;
      v28.i64[0] = 0x800000008;
      v28.i64[1] = 0x800000008;
      v27 = v1237;
      v22 = v1238;
      v16 = v1239;
      v14 = v1240;
      v12 = v1241;
      a7 = v1242;
      a8 = v1243;
      v102 = (unint64_t *)(a9 + 48);
    }
    v112 = 8 * v103;
    v113 = 48 - v24;
    if (8 * v103 < 0x41)
    {
      v117 = 56 - v24 - v112;
      if (v117 < 0)
        v115 = v24;
      else
        v115 = v24 + 0x40000000;
      if (v112)
        v118 = 1;
      else
        v118 = v117 <= -1;
      v119 = v117 & ~(v117 >> 31);
      v120 = !v118 || v113 < v119;
      v10 = a9;
      if (v120)
      {
        v116 = v102;
        v100 = v1246;
      }
      else
      {
        v121 = v119 - 1;
        if (v119 - 1 >= (int)(40 - v24))
          v121 = 40 - v24;
        v122 = 47 - v24 - v121;
        if (v122 >= 0x78)
        {
          v123 = v11;
          v124 = (v122 >> 3) + 1;
          v125 = (int8x16_t)v25;
          v126 = 0uLL;
          v127 = (int32x4_t)v115;
          v128 = vdupq_n_s32(v113);
          v129 = vaddq_s32(v128, (int32x4_t)xmmword_208F3A6C0);
          v116 = (unint64_t *)((char *)v102 + (v124 & 0x3FFFFFF0));
          v130 = vaddq_s32(v128, (int32x4_t)xmmword_208F3A6D0);
          v113 -= 8 * (v124 & 0x3FFFFFF0);
          v131 = vaddq_s32(v128, (int32x4_t)xmmword_208F3A6A0);
          v132 = vaddq_s32(v128, (int32x4_t)xmmword_208F3A6B0);
          v133 = v124 & 0x3FFFFFF0;
          v134 = (uint8x16_t *)v102;
          v135 = 0uLL;
          v136 = 0uLL;
          v137 = 0uLL;
          v138 = 0uLL;
          v139 = 0uLL;
          v140 = 0uLL;
          v141 = 0uLL;
          v142 = 0uLL;
          v143 = 0uLL;
          do
          {
            v144 = *v134++;
            v145 = vmovl_high_u8(v144);
            v146 = vmovl_high_u16(v145);
            v147.i64[0] = v146.u32[0];
            v147.i64[1] = v146.u32[1];
            v148 = v147;
            v149 = vmovl_u16(*(uint16x4_t *)v145.i8);
            v147.i64[0] = v149.u32[2];
            v147.i64[1] = v149.u32[3];
            v150 = v147;
            v151 = vmovl_u8(*(uint8x8_t *)v144.i8);
            v152 = vmovl_high_u16(v151);
            v147.i64[0] = v152.u32[2];
            v147.i64[1] = v152.u32[3];
            v153 = v147;
            v147.i64[0] = v146.u32[2];
            v147.i64[1] = v146.u32[3];
            v154 = v147;
            v147.i64[0] = v149.u32[0];
            v147.i64[1] = v149.u32[1];
            v155 = v147;
            v147.i64[0] = v152.u32[0];
            v147.i64[1] = v152.u32[1];
            v156 = v147;
            v157 = vmovl_u16(*(uint16x4_t *)v151.i8);
            v147.i64[0] = v157.u32[2];
            v147.i64[1] = v157.u32[3];
            v158 = v147;
            v147.i64[0] = v157.u32[0];
            v147.i64[1] = v157.u32[1];
            v159 = v147;
            v147.i64[0] = v132.u32[0];
            v147.i64[1] = v132.u32[1];
            v160 = (int8x16_t)vshlq_u64(v159, v147);
            v147.i64[0] = v132.u32[2];
            v147.i64[1] = v132.u32[3];
            v161 = (int8x16_t)vshlq_u64(v158, v147);
            v147.i64[0] = v131.u32[0];
            v147.i64[1] = v131.u32[1];
            v162 = (int8x16_t)vshlq_u64(v156, v147);
            v147.i64[0] = v130.u32[0];
            v147.i64[1] = v130.u32[1];
            v163 = (int8x16_t)vshlq_u64(v155, v147);
            v147.i64[0] = v129.u32[2];
            v147.i64[1] = v129.u32[3];
            v164 = (int8x16_t)vshlq_u64(v154, v147);
            v147.i64[0] = v131.u32[2];
            v147.i64[1] = v131.u32[3];
            v165 = (int8x16_t)vshlq_u64(v153, v147);
            v147.i64[0] = v130.u32[2];
            v147.i64[1] = v130.u32[3];
            v166 = (int8x16_t)vshlq_u64(v150, v147);
            v147.i64[0] = v129.u32[0];
            v147.i64[1] = v129.u32[1];
            v139 = vorrq_s8((int8x16_t)vshlq_u64(v148, v147), v139);
            v138 = vorrq_s8(v166, v138);
            v136 = vorrq_s8(v165, v136);
            v140 = vorrq_s8(v164, v140);
            v137 = vorrq_s8(v163, v137);
            v135 = vorrq_s8(v162, v135);
            v126 = vorrq_s8(v161, v126);
            v125 = vorrq_s8(v160, v125);
            v127 = vaddq_s32(v127, v28);
            v141 = vaddq_s32(v141, v28);
            v142 = vaddq_s32(v142, v28);
            v143 = vaddq_s32(v143, v28);
            v132 = vaddq_s32(v132, v29);
            v131 = vaddq_s32(v131, v29);
            v130 = vaddq_s32(v130, v29);
            v129 = vaddq_s32(v129, v29);
            v133 -= 16;
          }
          while (v133);
          v115 = vaddvq_s32(vaddq_s32(vaddq_s32(v127, v142), vaddq_s32(v141, v143)));
          v167 = vorrq_s8(vorrq_s8(vorrq_s8(v125, v137), vorrq_s8(v135, v139)), vorrq_s8(vorrq_s8(v126, v138), vorrq_s8(v136, v140)));
          v25 = (unint64_t)vorr_s8(*(int8x8_t *)v167.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v167, v167, 8uLL));
          v11 = v123;
          v100 = v1246;
          if ((v124 & 0x3FFFFFF0) == v124)
            goto LABEL_76;
        }
        else
        {
          v116 = v102;
          v100 = v1246;
        }
        do
        {
          v115 += 8;
          v168 = *(unsigned __int8 *)v116;
          v116 = (unint64_t *)((char *)v116 + 1);
          v25 |= (unint64_t)v168 << v113;
          v113 -= 8;
        }
        while (v113 >= v119);
      }
    }
    else
    {
      v114 = (v113 & 0xFFFFFFF8) + 8;
      v115 = v114 + v24;
      v116 = (unint64_t *)((char *)v102 + (v114 >> 3));
      v10 = a9;
      v25 = (bswap64(*v102) >> (56 - (v113 & 0xF8u)) << (v113 & 7)) | *(_QWORD *)a9;
      v100 = v1246;
    }
LABEL_76:
    *(_QWORD *)(v10 + 24) += (char *)v116 - (char *)v102;
    *(_QWORD *)v10 = v25;
    *(_DWORD *)(v10 + 12) = v115;
    v24 = v115;
LABEL_77:
    while (1)
    {
      ++v26;
      v169 = (unint64_t)((v23 - 1) * v100 + 256) >> 8;
      v170 = v25 - (v169 << 56);
      if (v25 >= v169 << 56)
        break;
      v101 = vpx_norm[v169];
      if (v12)
        ++*(_DWORD *)(v22 + 96 * v31 + 16 * v11);
      v23 = (_DWORD)v169 << v101;
      v25 <<= v101;
      v24 -= v101;
      v30 = *v27;
      v1248[*(__int16 *)(a7 + 2 * v9++)] = 0;
      if (v9 >= v14)
        goto LABEL_551;
      v11 = (v1248[*(__int16 *)(a8 + 4 * (_DWORD)v9)]
           + (unint64_t)v1248[*(__int16 *)(a8 + 4 * (int)v9 + 2)]
           + 1) >> 1;
      v31 = *v26;
      v32 = (unsigned __int8 *)(v16 + 18 * v31 + 3 * v11);
      v100 = v32[1];
      if ((v24 & 0x80000000) != 0)
        goto LABEL_49;
    }
    v1247 = v9;
    v171 = v23 - v169;
    v172 = v32;
    v173 = vpx_norm[v171];
    v174 = v170 << v173;
    v175 = v24 - v173;
    v1229 = v172;
    v1230 = v11;
    v176 = v172[2];
    if (((v24 - v173) & 0x80000000) != 0)
    {
      *(_QWORD *)v10 = v174;
      *(_DWORD *)(v10 + 12) = v175;
      v177 = *(unint64_t **)(v10 + 24);
      v178 = *(_QWORD *)(v10 + 16) - (_QWORD)v177;
      v179 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
      if (v179)
      {
        if (v178 >= 9)
          v180 = 9;
        else
          v180 = *(_QWORD *)(v10 + 16) - (_QWORD)v177;
        v181 = v30;
        v182 = v173;
        v183 = v171;
        v184 = v176;
        v179(*(_QWORD *)(v10 + 40), v177, v1236, v180);
        v176 = v184;
        v171 = v183;
        v173 = v182;
        v30 = v181;
        v29.i64[0] = 0x7F0000007FLL;
        v29.i64[1] = 0x7F0000007FLL;
        v28.i64[0] = 0x800000008;
        v28.i64[1] = 0x800000008;
        v27 = v1237;
        v22 = v1238;
        v16 = v1239;
        v14 = v1240;
        v12 = v1241;
        a7 = v1242;
        a8 = v1243;
        v177 = (unint64_t *)(a9 + 48);
      }
      v185 = 8 * v178;
      v186 = 48 - v175;
      if (8 * v178 < 0x41)
      {
        v189 = 56 - v185 - v175;
        if (v189 >= 0)
          v175 += 0x40000000;
        if (v185)
          v190 = 1;
        else
          v190 = v189 <= -1;
        v191 = v189 & ~(v189 >> 31);
        v192 = !v190 || v186 < v191;
        v10 = a9;
        if (v192)
        {
          v188 = v177;
        }
        else
        {
          v193 = v173 - v24 + 40;
          if (v193 >= v191 - 1)
            v193 = v191 - 1;
          v194 = v173 - v24 - v193 + 47;
          v188 = v177;
          v195 = v186;
          if (v194 < 0x78)
            goto LABEL_556;
          v196 = (v194 >> 3) + 1;
          v197 = (int8x16_t)v174;
          v198 = 0uLL;
          v199 = (int32x4_t)v175;
          v200 = vdupq_n_s32(v186);
          v201 = vaddq_s32(v200, (int32x4_t)xmmword_208F3A6C0);
          v188 = (unint64_t *)((char *)v177 + (v196 & 0x3FFFFFF0));
          v202 = vaddq_s32(v200, (int32x4_t)xmmword_208F3A6D0);
          v195 = v186 - 8 * (v196 & 0x3FFFFFF0);
          v203 = vaddq_s32(v200, (int32x4_t)xmmword_208F3A6A0);
          v204 = vaddq_s32(v200, (int32x4_t)xmmword_208F3A6B0);
          v205 = v196 & 0x3FFFFFF0;
          v206 = (uint8x16_t *)v177;
          v207 = 0uLL;
          v208 = 0uLL;
          v209 = 0uLL;
          v210 = 0uLL;
          v211 = 0uLL;
          v212 = 0uLL;
          v213 = 0uLL;
          v214 = 0uLL;
          v215 = 0uLL;
          do
          {
            v216 = *v206++;
            v217 = vmovl_high_u8(v216);
            v218 = vmovl_high_u16(v217);
            v219.i64[0] = v218.u32[0];
            v219.i64[1] = v218.u32[1];
            v220 = v219;
            v221 = vmovl_u16(*(uint16x4_t *)v217.i8);
            v219.i64[0] = v221.u32[2];
            v219.i64[1] = v221.u32[3];
            v222 = v219;
            v223 = vmovl_u8(*(uint8x8_t *)v216.i8);
            v224 = vmovl_high_u16(v223);
            v219.i64[0] = v224.u32[2];
            v219.i64[1] = v224.u32[3];
            v225 = v219;
            v219.i64[0] = v218.u32[2];
            v219.i64[1] = v218.u32[3];
            v226 = v219;
            v219.i64[0] = v221.u32[0];
            v219.i64[1] = v221.u32[1];
            v227 = v219;
            v219.i64[0] = v224.u32[0];
            v219.i64[1] = v224.u32[1];
            v228 = v219;
            v229 = vmovl_u16(*(uint16x4_t *)v223.i8);
            v219.i64[0] = v229.u32[2];
            v219.i64[1] = v229.u32[3];
            v230 = v219;
            v219.i64[0] = v229.u32[0];
            v219.i64[1] = v229.u32[1];
            v231 = v219;
            v219.i64[0] = v204.u32[0];
            v219.i64[1] = v204.u32[1];
            v232 = (int8x16_t)vshlq_u64(v231, v219);
            v219.i64[0] = v204.u32[2];
            v219.i64[1] = v204.u32[3];
            v233 = (int8x16_t)vshlq_u64(v230, v219);
            v219.i64[0] = v203.u32[0];
            v219.i64[1] = v203.u32[1];
            v234 = (int8x16_t)vshlq_u64(v228, v219);
            v219.i64[0] = v202.u32[0];
            v219.i64[1] = v202.u32[1];
            v235 = (int8x16_t)vshlq_u64(v227, v219);
            v219.i64[0] = v201.u32[2];
            v219.i64[1] = v201.u32[3];
            v236 = (int8x16_t)vshlq_u64(v226, v219);
            v219.i64[0] = v203.u32[2];
            v219.i64[1] = v203.u32[3];
            v237 = (int8x16_t)vshlq_u64(v225, v219);
            v219.i64[0] = v202.u32[2];
            v219.i64[1] = v202.u32[3];
            v238 = (int8x16_t)vshlq_u64(v222, v219);
            v219.i64[0] = v201.u32[0];
            v219.i64[1] = v201.u32[1];
            v211 = vorrq_s8((int8x16_t)vshlq_u64(v220, v219), v211);
            v210 = vorrq_s8(v238, v210);
            v208 = vorrq_s8(v237, v208);
            v212 = vorrq_s8(v236, v212);
            v209 = vorrq_s8(v235, v209);
            v207 = vorrq_s8(v234, v207);
            v198 = vorrq_s8(v233, v198);
            v197 = vorrq_s8(v232, v197);
            v199 = vaddq_s32(v199, v28);
            v213 = vaddq_s32(v213, v28);
            v214 = vaddq_s32(v214, v28);
            v215 = vaddq_s32(v215, v28);
            v204 = vaddq_s32(v204, v29);
            v203 = vaddq_s32(v203, v29);
            v202 = vaddq_s32(v202, v29);
            v201 = vaddq_s32(v201, v29);
            v205 -= 16;
          }
          while (v205);
          v175 = vaddvq_s32(vaddq_s32(vaddq_s32(v199, v214), vaddq_s32(v213, v215)));
          v239 = vorrq_s8(vorrq_s8(vorrq_s8(v197, v209), vorrq_s8(v207, v211)), vorrq_s8(vorrq_s8(v198, v210), vorrq_s8(v208, v212)));
          v174 = (unint64_t)vorr_s8(*(int8x8_t *)v239.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL));
          if ((v196 & 0x3FFFFFF0) != v196)
          {
LABEL_556:
            do
            {
              v175 += 8;
              v240 = *(unsigned __int8 *)v188;
              v188 = (unint64_t *)((char *)v188 + 1);
              v174 |= (unint64_t)v240 << v195;
              v195 -= 8;
            }
            while (v195 >= v191);
          }
        }
      }
      else
      {
        v187 = (v186 & 0xFFFFFFF8) + 8;
        v175 += v187;
        v188 = (unint64_t *)((char *)v177 + (v187 >> 3));
        v10 = a9;
        v174 = (bswap64(*v177) >> (56 - (v186 & 0xF8u)) << (v186 & 7)) | *(_QWORD *)a9;
      }
      *(_QWORD *)(v10 + 24) += (char *)v188 - (char *)v177;
      *(_QWORD *)v10 = v174;
      *(_DWORD *)(v10 + 12) = v175;
    }
    v241 = v171 << v173;
    v242 = (unint64_t)(((v171 << v173) - 1) * v176 + 256) >> 8;
    v243 = 2 * v1247;
    v244 = v174 - (v242 << 56);
    if (v174 >= v242 << 56)
    {
      v256 = v241 - v242;
      v257 = vpx_norm[(v241 - v242)];
      v258 = v1229[2];
      if (v12)
        ++*(_DWORD *)(v22 + 96 * v31 + 16 * v1230 + 8);
      v259 = v244 << v257;
      v260 = v175 - v257;
      v261 = (unsigned __int8 *)&vp9_pareto8_full[v258 - 1];
      v262 = *v261;
      if (((v175 - v257) & 0x80000000) != 0)
      {
        *(_QWORD *)v10 = v259;
        *(_DWORD *)(v10 + 12) = v260;
        v263 = *(unint64_t **)(v10 + 24);
        v264 = *(_QWORD *)(v10 + 16) - (_QWORD)v263;
        v265 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
        if (v265)
        {
          if (v264 >= 9)
            v266 = 9;
          else
            v266 = *(_QWORD *)(v10 + 16) - (_QWORD)v263;
          v267 = v30;
          v265(*(_QWORD *)(v10 + 40), v263, v1236, v266);
          v243 = 2 * v1247;
          v30 = v267;
          v29.i64[0] = 0x7F0000007FLL;
          v29.i64[1] = 0x7F0000007FLL;
          v28.i64[0] = 0x800000008;
          v28.i64[1] = 0x800000008;
          v27 = v1237;
          v22 = v1238;
          v16 = v1239;
          v14 = v1240;
          v12 = v1241;
          a7 = v1242;
          a8 = v1243;
          v263 = (unint64_t *)(a9 + 48);
        }
        v268 = 8 * v264;
        v269 = 48 - v260;
        if (8 * v264 < 0x41)
        {
          v272 = 56 - v268 - v260;
          if (v272 >= 0)
            v260 += 0x40000000;
          if (v268)
            v273 = 1;
          else
            v273 = v272 <= -1;
          v10 = a9;
          if (v273 && (v274 = v272 & ~(v272 >> 31), v269 >= v274))
          {
            v275 = v257 - v175 + 40;
            if (v275 >= v274 - 1)
              v275 = v274 - 1;
            v276 = v257 - v175 - v275 + 47;
            v271 = v263;
            v277 = v269;
            if (v276 < 0x78)
              goto LABEL_557;
            v278 = (v276 >> 3) + 1;
            v279 = (int8x16_t)v259;
            v280 = 0uLL;
            v281 = (int32x4_t)v260;
            v282 = vdupq_n_s32(v269);
            v283 = vaddq_s32(v282, (int32x4_t)xmmword_208F3A6C0);
            v271 = (unint64_t *)((char *)v263 + (v278 & 0x3FFFFFF0));
            v284 = vaddq_s32(v282, (int32x4_t)xmmword_208F3A6D0);
            v277 = v269 - 8 * (v278 & 0x3FFFFFF0);
            v285 = vaddq_s32(v282, (int32x4_t)xmmword_208F3A6A0);
            v286 = vaddq_s32(v282, (int32x4_t)xmmword_208F3A6B0);
            v287 = v278 & 0x3FFFFFF0;
            v288 = (uint8x16_t *)v263;
            v289 = 0uLL;
            v290 = 0uLL;
            v291 = 0uLL;
            v292 = 0uLL;
            v293 = 0uLL;
            v294 = 0uLL;
            v295 = 0uLL;
            v296 = 0uLL;
            v297 = 0uLL;
            do
            {
              v298 = *v288++;
              v299 = vmovl_high_u8(v298);
              v300 = vmovl_high_u16(v299);
              v301.i64[0] = v300.u32[0];
              v301.i64[1] = v300.u32[1];
              v302 = v301;
              v303 = vmovl_u16(*(uint16x4_t *)v299.i8);
              v301.i64[0] = v303.u32[2];
              v301.i64[1] = v303.u32[3];
              v304 = v301;
              v305 = vmovl_u8(*(uint8x8_t *)v298.i8);
              v306 = vmovl_high_u16(v305);
              v301.i64[0] = v306.u32[2];
              v301.i64[1] = v306.u32[3];
              v307 = v301;
              v301.i64[0] = v300.u32[2];
              v301.i64[1] = v300.u32[3];
              v308 = v301;
              v301.i64[0] = v303.u32[0];
              v301.i64[1] = v303.u32[1];
              v309 = v301;
              v301.i64[0] = v306.u32[0];
              v301.i64[1] = v306.u32[1];
              v310 = v301;
              v311 = vmovl_u16(*(uint16x4_t *)v305.i8);
              v301.i64[0] = v311.u32[2];
              v301.i64[1] = v311.u32[3];
              v312 = v301;
              v301.i64[0] = v311.u32[0];
              v301.i64[1] = v311.u32[1];
              v313 = v301;
              v301.i64[0] = v286.u32[0];
              v301.i64[1] = v286.u32[1];
              v314 = (int8x16_t)vshlq_u64(v313, v301);
              v301.i64[0] = v286.u32[2];
              v301.i64[1] = v286.u32[3];
              v315 = (int8x16_t)vshlq_u64(v312, v301);
              v301.i64[0] = v285.u32[0];
              v301.i64[1] = v285.u32[1];
              v316 = (int8x16_t)vshlq_u64(v310, v301);
              v301.i64[0] = v284.u32[0];
              v301.i64[1] = v284.u32[1];
              v317 = (int8x16_t)vshlq_u64(v309, v301);
              v301.i64[0] = v283.u32[2];
              v301.i64[1] = v283.u32[3];
              v318 = (int8x16_t)vshlq_u64(v308, v301);
              v301.i64[0] = v285.u32[2];
              v301.i64[1] = v285.u32[3];
              v319 = (int8x16_t)vshlq_u64(v307, v301);
              v301.i64[0] = v284.u32[2];
              v301.i64[1] = v284.u32[3];
              v320 = (int8x16_t)vshlq_u64(v304, v301);
              v301.i64[0] = v283.u32[0];
              v301.i64[1] = v283.u32[1];
              v293 = vorrq_s8((int8x16_t)vshlq_u64(v302, v301), v293);
              v292 = vorrq_s8(v320, v292);
              v290 = vorrq_s8(v319, v290);
              v294 = vorrq_s8(v318, v294);
              v291 = vorrq_s8(v317, v291);
              v289 = vorrq_s8(v316, v289);
              v280 = vorrq_s8(v315, v280);
              v279 = vorrq_s8(v314, v279);
              v281 = vaddq_s32(v281, v28);
              v295 = vaddq_s32(v295, v28);
              v296 = vaddq_s32(v296, v28);
              v297 = vaddq_s32(v297, v28);
              v286 = vaddq_s32(v286, v29);
              v285 = vaddq_s32(v285, v29);
              v284 = vaddq_s32(v284, v29);
              v283 = vaddq_s32(v283, v29);
              v287 -= 16;
            }
            while (v287);
            v260 = vaddvq_s32(vaddq_s32(vaddq_s32(v281, v296), vaddq_s32(v295, v297)));
            v321 = vorrq_s8(vorrq_s8(vorrq_s8(v279, v291), vorrq_s8(v289, v293)), vorrq_s8(vorrq_s8(v280, v292), vorrq_s8(v290, v294)));
            v259 = (unint64_t)vorr_s8(*(int8x8_t *)v321.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v321, v321, 8uLL));
            v243 = 2 * v1247;
            if ((v278 & 0x3FFFFFF0) != v278)
            {
LABEL_557:
              do
              {
                v260 += 8;
                v322 = *(unsigned __int8 *)v271;
                v271 = (unint64_t *)((char *)v271 + 1);
                v259 |= (unint64_t)v322 << v277;
                v277 -= 8;
              }
              while (v277 >= v274);
            }
          }
          else
          {
            v271 = v263;
          }
        }
        else
        {
          v270 = (v269 & 0xFFFFFFF8) + 8;
          v260 += v270;
          v271 = (unint64_t *)((char *)v263 + (v270 >> 3));
          v10 = a9;
          v259 = (bswap64(*v263) >> (56 - (v269 & 0xF8u)) << (v269 & 7)) | *(_QWORD *)a9;
        }
        *(_QWORD *)(v10 + 24) += (char *)v271 - (char *)v263;
        *(_QWORD *)v10 = v259;
        *(_DWORD *)(v10 + 12) = v260;
      }
      v323 = v256 << v257;
      v324 = (unint64_t)(((v256 << v257) - 1) * v262 + 256) >> 8;
      v325 = v259 - (v324 << 56);
      if (v259 >= v324 << 56)
      {
        v339 = v323 - v324;
        v340 = vpx_norm[(v323 - v324)];
        v341 = v325 << v340;
        v342 = v260 - v340;
        v343 = v261[3];
        if (((v260 - v340) & 0x80000000) != 0)
        {
          *(_QWORD *)v10 = v341;
          *(_DWORD *)(v10 + 12) = v342;
          v344 = *(unint64_t **)(v10 + 24);
          v345 = *(_QWORD *)(v10 + 16) - (_QWORD)v344;
          v346 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
          if (v346)
          {
            if (v345 >= 9)
              v347 = 9;
            else
              v347 = *(_QWORD *)(v10 + 16) - (_QWORD)v344;
            v348 = v30;
            v346(*(_QWORD *)(v10 + 40), v344, v1236, v347);
            v243 = 2 * v1247;
            v30 = v348;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v344 = (unint64_t *)(a9 + 48);
          }
          v349 = 8 * v345;
          v350 = 48 - v342;
          if (8 * v345 < 0x41)
          {
            v404 = 56 - v349 - v342;
            if (v404 >= 0)
              v342 += 0x40000000;
            if (v349)
              v405 = 1;
            else
              v405 = v404 <= -1;
            v10 = a9;
            if (v405 && (v406 = v404 & ~(v404 >> 31), v350 >= v406))
            {
              v407 = v340 - v260 + 40;
              if (v407 >= v406 - 1)
                v407 = v406 - 1;
              v408 = v340 - v260 - v407 + 47;
              v352 = v344;
              v409 = v350;
              if (v408 < 0x78)
                goto LABEL_558;
              v410 = (v408 >> 3) + 1;
              v411 = (int8x16_t)v341;
              v412 = 0uLL;
              v413 = (int32x4_t)v342;
              v414 = vdupq_n_s32(v350);
              v415 = vaddq_s32(v414, (int32x4_t)xmmword_208F3A6C0);
              v352 = (unint64_t *)((char *)v344 + (v410 & 0x3FFFFFF0));
              v416 = vaddq_s32(v414, (int32x4_t)xmmword_208F3A6D0);
              v409 = v350 - 8 * (v410 & 0x3FFFFFF0);
              v417 = vaddq_s32(v414, (int32x4_t)xmmword_208F3A6A0);
              v418 = vaddq_s32(v414, (int32x4_t)xmmword_208F3A6B0);
              v419 = v410 & 0x3FFFFFF0;
              v420 = (uint8x16_t *)v344;
              v421 = 0uLL;
              v422 = 0uLL;
              v423 = 0uLL;
              v424 = 0uLL;
              v425 = 0uLL;
              v426 = 0uLL;
              v427 = 0uLL;
              v428 = 0uLL;
              v429 = 0uLL;
              do
              {
                v430 = *v420++;
                v431 = vmovl_high_u8(v430);
                v432 = vmovl_high_u16(v431);
                v433.i64[0] = v432.u32[0];
                v433.i64[1] = v432.u32[1];
                v434 = v433;
                v435 = vmovl_u16(*(uint16x4_t *)v431.i8);
                v433.i64[0] = v435.u32[2];
                v433.i64[1] = v435.u32[3];
                v436 = v433;
                v437 = vmovl_u8(*(uint8x8_t *)v430.i8);
                v438 = vmovl_high_u16(v437);
                v433.i64[0] = v438.u32[2];
                v433.i64[1] = v438.u32[3];
                v439 = v433;
                v433.i64[0] = v432.u32[2];
                v433.i64[1] = v432.u32[3];
                v440 = v433;
                v433.i64[0] = v435.u32[0];
                v433.i64[1] = v435.u32[1];
                v441 = v433;
                v433.i64[0] = v438.u32[0];
                v433.i64[1] = v438.u32[1];
                v442 = v433;
                v443 = vmovl_u16(*(uint16x4_t *)v437.i8);
                v433.i64[0] = v443.u32[2];
                v433.i64[1] = v443.u32[3];
                v444 = v433;
                v433.i64[0] = v443.u32[0];
                v433.i64[1] = v443.u32[1];
                v445 = v433;
                v433.i64[0] = v418.u32[0];
                v433.i64[1] = v418.u32[1];
                v446 = (int8x16_t)vshlq_u64(v445, v433);
                v433.i64[0] = v418.u32[2];
                v433.i64[1] = v418.u32[3];
                v447 = (int8x16_t)vshlq_u64(v444, v433);
                v433.i64[0] = v417.u32[0];
                v433.i64[1] = v417.u32[1];
                v448 = (int8x16_t)vshlq_u64(v442, v433);
                v433.i64[0] = v416.u32[0];
                v433.i64[1] = v416.u32[1];
                v449 = (int8x16_t)vshlq_u64(v441, v433);
                v433.i64[0] = v415.u32[2];
                v433.i64[1] = v415.u32[3];
                v450 = (int8x16_t)vshlq_u64(v440, v433);
                v433.i64[0] = v417.u32[2];
                v433.i64[1] = v417.u32[3];
                v451 = (int8x16_t)vshlq_u64(v439, v433);
                v433.i64[0] = v416.u32[2];
                v433.i64[1] = v416.u32[3];
                v452 = (int8x16_t)vshlq_u64(v436, v433);
                v433.i64[0] = v415.u32[0];
                v433.i64[1] = v415.u32[1];
                v425 = vorrq_s8((int8x16_t)vshlq_u64(v434, v433), v425);
                v424 = vorrq_s8(v452, v424);
                v422 = vorrq_s8(v451, v422);
                v426 = vorrq_s8(v450, v426);
                v423 = vorrq_s8(v449, v423);
                v421 = vorrq_s8(v448, v421);
                v412 = vorrq_s8(v447, v412);
                v411 = vorrq_s8(v446, v411);
                v413 = vaddq_s32(v413, v28);
                v427 = vaddq_s32(v427, v28);
                v428 = vaddq_s32(v428, v28);
                v429 = vaddq_s32(v429, v28);
                v418 = vaddq_s32(v418, v29);
                v417 = vaddq_s32(v417, v29);
                v416 = vaddq_s32(v416, v29);
                v415 = vaddq_s32(v415, v29);
                v419 -= 16;
              }
              while (v419);
              v342 = vaddvq_s32(vaddq_s32(vaddq_s32(v413, v428), vaddq_s32(v427, v429)));
              v453 = vorrq_s8(vorrq_s8(vorrq_s8(v411, v423), vorrq_s8(v421, v425)), vorrq_s8(vorrq_s8(v412, v424), vorrq_s8(v422, v426)));
              v341 = (unint64_t)vorr_s8(*(int8x8_t *)v453.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v453, v453, 8uLL));
              v243 = 2 * v1247;
              if ((v410 & 0x3FFFFFF0) != v410)
              {
LABEL_558:
                do
                {
                  v342 += 8;
                  v454 = *(unsigned __int8 *)v352;
                  v352 = (unint64_t *)((char *)v352 + 1);
                  v341 |= (unint64_t)v454 << v409;
                  v409 -= 8;
                }
                while (v409 >= v406);
              }
            }
            else
            {
              v352 = v344;
            }
          }
          else
          {
            v351 = (v350 & 0xFFFFFFF8) + 8;
            v342 += v351;
            v352 = (unint64_t *)((char *)v344 + (v351 >> 3));
            v10 = a9;
            v341 = (bswap64(*v344) >> (56 - (v350 & 0xF8u)) << (v350 & 7)) | *(_QWORD *)a9;
          }
          *(_QWORD *)(v10 + 24) += (char *)v352 - (char *)v344;
          *(_QWORD *)v10 = v341;
          *(_DWORD *)(v10 + 12) = v342;
        }
        v523 = v339 << v340;
        v524 = (unint64_t)(((v339 << v340) - 1) * v343 + 256) >> 8;
        if (v341 < v524 << 56)
        {
          v525 = vpx_norm[v524];
          v526 = v341 << v525;
          v527 = v342 - v525;
          v1248[*(__int16 *)(a7 + v243)] = 4;
          v528 = v261[4];
          if (((v342 - v525) & 0x80000000) != 0)
          {
            *(_QWORD *)v10 = v526;
            *(_DWORD *)(v10 + 12) = v527;
            v529 = *(unint64_t **)(v10 + 24);
            v530 = *(_QWORD *)(v10 + 16) - (_QWORD)v529;
            v531 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
            if (v531)
            {
              if (v530 >= 9)
                v532 = 9;
              else
                v532 = *(_QWORD *)(v10 + 16) - (_QWORD)v529;
              v533 = v30;
              v531(*(_QWORD *)(v10 + 40), v529, v1236, v532);
              v243 = 2 * v1247;
              LOWORD(v30) = v533;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v529 = (unint64_t *)(a9 + 48);
            }
            v534 = 8 * v530;
            v535 = 48 - v527;
            if (8 * v530 < 0x41)
            {
              v552 = 56 - v534 - v527;
              if (v552 >= 0)
                v527 += 0x40000000;
              if (v534)
                v553 = 1;
              else
                v553 = v552 <= -1;
              v10 = a9;
              if (v553 && (v554 = v552 & ~(v552 >> 31), v535 >= v554))
              {
                v555 = v525 - v342 + 40;
                if (v555 >= v554 - 1)
                  v555 = v554 - 1;
                v556 = v525 - v342 - v555 + 47;
                v537 = v529;
                v557 = v535;
                if (v556 < 0x78)
                  goto LABEL_559;
                v558 = (v556 >> 3) + 1;
                v559 = (int8x16_t)v526;
                v560 = 0uLL;
                v561 = (int32x4_t)v527;
                v562 = vdupq_n_s32(v535);
                v563 = vaddq_s32(v562, (int32x4_t)xmmword_208F3A6C0);
                v537 = (unint64_t *)((char *)v529 + (v558 & 0x3FFFFFF0));
                v564 = vaddq_s32(v562, (int32x4_t)xmmword_208F3A6D0);
                v557 = v535 - 8 * (v558 & 0x3FFFFFF0);
                v565 = vaddq_s32(v562, (int32x4_t)xmmword_208F3A6A0);
                v566 = vaddq_s32(v562, (int32x4_t)xmmword_208F3A6B0);
                v567 = v558 & 0x3FFFFFF0;
                v568 = (uint8x16_t *)v529;
                v569 = 0uLL;
                v570 = 0uLL;
                v571 = 0uLL;
                v572 = 0uLL;
                v573 = 0uLL;
                v574 = 0uLL;
                v575 = 0uLL;
                v576 = 0uLL;
                v577 = 0uLL;
                do
                {
                  v578 = *v568++;
                  v579 = vmovl_high_u8(v578);
                  v580 = vmovl_high_u16(v579);
                  v581.i64[0] = v580.u32[0];
                  v581.i64[1] = v580.u32[1];
                  v582 = v581;
                  v583 = vmovl_u16(*(uint16x4_t *)v579.i8);
                  v581.i64[0] = v583.u32[2];
                  v581.i64[1] = v583.u32[3];
                  v584 = v581;
                  v585 = vmovl_u8(*(uint8x8_t *)v578.i8);
                  v586 = vmovl_high_u16(v585);
                  v581.i64[0] = v586.u32[2];
                  v581.i64[1] = v586.u32[3];
                  v587 = v581;
                  v581.i64[0] = v580.u32[2];
                  v581.i64[1] = v580.u32[3];
                  v588 = v581;
                  v581.i64[0] = v583.u32[0];
                  v581.i64[1] = v583.u32[1];
                  v589 = v581;
                  v581.i64[0] = v586.u32[0];
                  v581.i64[1] = v586.u32[1];
                  v590 = v581;
                  v591 = vmovl_u16(*(uint16x4_t *)v585.i8);
                  v581.i64[0] = v591.u32[2];
                  v581.i64[1] = v591.u32[3];
                  v592 = v581;
                  v581.i64[0] = v591.u32[0];
                  v581.i64[1] = v591.u32[1];
                  v593 = v581;
                  v581.i64[0] = v566.u32[0];
                  v581.i64[1] = v566.u32[1];
                  v594 = (int8x16_t)vshlq_u64(v593, v581);
                  v581.i64[0] = v566.u32[2];
                  v581.i64[1] = v566.u32[3];
                  v595 = (int8x16_t)vshlq_u64(v592, v581);
                  v581.i64[0] = v565.u32[0];
                  v581.i64[1] = v565.u32[1];
                  v596 = (int8x16_t)vshlq_u64(v590, v581);
                  v581.i64[0] = v564.u32[0];
                  v581.i64[1] = v564.u32[1];
                  v597 = (int8x16_t)vshlq_u64(v589, v581);
                  v581.i64[0] = v563.u32[2];
                  v581.i64[1] = v563.u32[3];
                  v598 = (int8x16_t)vshlq_u64(v588, v581);
                  v581.i64[0] = v565.u32[2];
                  v581.i64[1] = v565.u32[3];
                  v599 = (int8x16_t)vshlq_u64(v587, v581);
                  v581.i64[0] = v564.u32[2];
                  v581.i64[1] = v564.u32[3];
                  v600 = (int8x16_t)vshlq_u64(v584, v581);
                  v581.i64[0] = v563.u32[0];
                  v581.i64[1] = v563.u32[1];
                  v573 = vorrq_s8((int8x16_t)vshlq_u64(v582, v581), v573);
                  v572 = vorrq_s8(v600, v572);
                  v570 = vorrq_s8(v599, v570);
                  v574 = vorrq_s8(v598, v574);
                  v571 = vorrq_s8(v597, v571);
                  v569 = vorrq_s8(v596, v569);
                  v560 = vorrq_s8(v595, v560);
                  v559 = vorrq_s8(v594, v559);
                  v561 = vaddq_s32(v561, v28);
                  v575 = vaddq_s32(v575, v28);
                  v576 = vaddq_s32(v576, v28);
                  v577 = vaddq_s32(v577, v28);
                  v566 = vaddq_s32(v566, v29);
                  v565 = vaddq_s32(v565, v29);
                  v564 = vaddq_s32(v564, v29);
                  v563 = vaddq_s32(v563, v29);
                  v567 -= 16;
                }
                while (v567);
                v527 = vaddvq_s32(vaddq_s32(vaddq_s32(v561, v576), vaddq_s32(v575, v577)));
                v601 = vorrq_s8(vorrq_s8(vorrq_s8(v559, v571), vorrq_s8(v569, v573)), vorrq_s8(vorrq_s8(v560, v572), vorrq_s8(v570, v574)));
                v526 = (unint64_t)vorr_s8(*(int8x8_t *)v601.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v601, v601, 8uLL));
                v243 = 2 * v1247;
                if ((v558 & 0x3FFFFFF0) != v558)
                {
LABEL_559:
                  do
                  {
                    v527 += 8;
                    v602 = *(unsigned __int8 *)v537;
                    v537 = (unint64_t *)((char *)v537 + 1);
                    v526 |= (unint64_t)v602 << v557;
                    v557 -= 8;
                  }
                  while (v557 >= v554);
                }
              }
              else
              {
                v537 = v529;
              }
            }
            else
            {
              v536 = (v535 & 0xFFFFFFF8) + 8;
              v527 += v536;
              v537 = (unint64_t *)((char *)v529 + (v536 >> 3));
              v10 = a9;
              v526 = (bswap64(*v529) >> (56 - (v535 & 0xF8u)) << (v535 & 7)) | *(_QWORD *)a9;
            }
            *(_QWORD *)(v10 + 24) += (char *)v537 - (char *)v529;
            *(_QWORD *)v10 = v526;
            *(_DWORD *)(v10 + 12) = v527;
          }
          v659 = (unint64_t)((((_DWORD)v524 << v525) - 1) * v528 + 256) >> 8;
          v660 = v526 - (v659 << 56);
          if (v526 < v659 << 56)
          {
            v661 = vpx_norm[v659];
            v662 = v526 << v661;
            v663 = v527 - v661;
            if ((int)(v527 - v661) < 0)
            {
              *(_QWORD *)v10 = v662;
              *(_DWORD *)(v10 + 12) = v663;
              v664 = *(unint64_t **)(v10 + 24);
              v665 = *(_QWORD *)(v10 + 16) - (_QWORD)v664;
              v666 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
              if (v666)
              {
                if (v665 >= 9)
                  v667 = 9;
                else
                  v667 = *(_QWORD *)(v10 + 16) - (_QWORD)v664;
                v668 = v30;
                v666(*(_QWORD *)(v10 + 40), v664, v1236, v667);
                v243 = 2 * v1247;
                LOWORD(v30) = v668;
                v29.i64[0] = 0x7F0000007FLL;
                v29.i64[1] = 0x7F0000007FLL;
                v28.i64[0] = 0x800000008;
                v28.i64[1] = 0x800000008;
                v27 = v1237;
                v22 = v1238;
                v16 = v1239;
                v14 = v1240;
                v12 = v1241;
                a7 = v1242;
                a8 = v1243;
                v664 = (unint64_t *)(a9 + 48);
              }
              v669 = 8 * v665;
              v670 = 48 - v663;
              if (8 * v665 < 0x41)
              {
                v686 = 56 - v669 - v663;
                if (v686 >= 0)
                  v663 += 0x40000000;
                if (v669)
                  v687 = 1;
                else
                  v687 = v686 <= -1;
                v10 = a9;
                if (v687 && (v688 = v686 & ~(v686 >> 31), v670 >= v688))
                {
                  v689 = v661 - v527 + 40;
                  if (v689 >= v688 - 1)
                    v689 = v688 - 1;
                  v690 = v661 - v527 - v689 + 47;
                  v672 = v664;
                  v691 = v670;
                  if (v690 < 0x78)
                    goto LABEL_560;
                  v692 = (v690 >> 3) + 1;
                  v693 = (int8x16_t)v662;
                  v694 = 0uLL;
                  v695 = (int32x4_t)v663;
                  v696 = vdupq_n_s32(v670);
                  v697 = vaddq_s32(v696, (int32x4_t)xmmword_208F3A6C0);
                  v672 = (unint64_t *)((char *)v664 + (v692 & 0x3FFFFFF0));
                  v698 = vaddq_s32(v696, (int32x4_t)xmmword_208F3A6D0);
                  v691 = v670 - 8 * (v692 & 0x3FFFFFF0);
                  v699 = vaddq_s32(v696, (int32x4_t)xmmword_208F3A6A0);
                  v700 = vaddq_s32(v696, (int32x4_t)xmmword_208F3A6B0);
                  v701 = v692 & 0x3FFFFFF0;
                  v702 = (uint8x16_t *)v664;
                  v703 = 0uLL;
                  v704 = 0uLL;
                  v705 = 0uLL;
                  v706 = 0uLL;
                  v707 = 0uLL;
                  v708 = 0uLL;
                  v709 = 0uLL;
                  v710 = 0uLL;
                  v711 = 0uLL;
                  do
                  {
                    v712 = *v702++;
                    v713 = vmovl_high_u8(v712);
                    v714 = vmovl_high_u16(v713);
                    v715.i64[0] = v714.u32[0];
                    v715.i64[1] = v714.u32[1];
                    v716 = v715;
                    v717 = vmovl_u16(*(uint16x4_t *)v713.i8);
                    v715.i64[0] = v717.u32[2];
                    v715.i64[1] = v717.u32[3];
                    v718 = v715;
                    v719 = vmovl_u8(*(uint8x8_t *)v712.i8);
                    v720 = vmovl_high_u16(v719);
                    v715.i64[0] = v720.u32[2];
                    v715.i64[1] = v720.u32[3];
                    v721 = v715;
                    v715.i64[0] = v714.u32[2];
                    v715.i64[1] = v714.u32[3];
                    v722 = v715;
                    v715.i64[0] = v717.u32[0];
                    v715.i64[1] = v717.u32[1];
                    v723 = v715;
                    v715.i64[0] = v720.u32[0];
                    v715.i64[1] = v720.u32[1];
                    v724 = v715;
                    v725 = vmovl_u16(*(uint16x4_t *)v719.i8);
                    v715.i64[0] = v725.u32[2];
                    v715.i64[1] = v725.u32[3];
                    v726 = v715;
                    v715.i64[0] = v725.u32[0];
                    v715.i64[1] = v725.u32[1];
                    v727 = v715;
                    v715.i64[0] = v700.u32[0];
                    v715.i64[1] = v700.u32[1];
                    v728 = (int8x16_t)vshlq_u64(v727, v715);
                    v715.i64[0] = v700.u32[2];
                    v715.i64[1] = v700.u32[3];
                    v729 = (int8x16_t)vshlq_u64(v726, v715);
                    v715.i64[0] = v699.u32[0];
                    v715.i64[1] = v699.u32[1];
                    v730 = (int8x16_t)vshlq_u64(v724, v715);
                    v715.i64[0] = v698.u32[0];
                    v715.i64[1] = v698.u32[1];
                    v731 = (int8x16_t)vshlq_u64(v723, v715);
                    v715.i64[0] = v697.u32[2];
                    v715.i64[1] = v697.u32[3];
                    v732 = (int8x16_t)vshlq_u64(v722, v715);
                    v715.i64[0] = v699.u32[2];
                    v715.i64[1] = v699.u32[3];
                    v733 = (int8x16_t)vshlq_u64(v721, v715);
                    v715.i64[0] = v698.u32[2];
                    v715.i64[1] = v698.u32[3];
                    v734 = (int8x16_t)vshlq_u64(v718, v715);
                    v715.i64[0] = v697.u32[0];
                    v715.i64[1] = v697.u32[1];
                    v707 = vorrq_s8((int8x16_t)vshlq_u64(v716, v715), v707);
                    v706 = vorrq_s8(v734, v706);
                    v704 = vorrq_s8(v733, v704);
                    v708 = vorrq_s8(v732, v708);
                    v705 = vorrq_s8(v731, v705);
                    v703 = vorrq_s8(v730, v703);
                    v694 = vorrq_s8(v729, v694);
                    v693 = vorrq_s8(v728, v693);
                    v695 = vaddq_s32(v695, v28);
                    v709 = vaddq_s32(v709, v28);
                    v710 = vaddq_s32(v710, v28);
                    v711 = vaddq_s32(v711, v28);
                    v700 = vaddq_s32(v700, v29);
                    v699 = vaddq_s32(v699, v29);
                    v698 = vaddq_s32(v698, v29);
                    v697 = vaddq_s32(v697, v29);
                    v701 -= 16;
                  }
                  while (v701);
                  v663 = vaddvq_s32(vaddq_s32(vaddq_s32(v695, v710), vaddq_s32(v709, v711)));
                  v735 = vorrq_s8(vorrq_s8(vorrq_s8(v693, v705), vorrq_s8(v703, v707)), vorrq_s8(vorrq_s8(v694, v706), vorrq_s8(v704, v708)));
                  v662 = (unint64_t)vorr_s8(*(int8x8_t *)v735.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v735, v735, 8uLL));
                  v243 = 2 * v1247;
                  if ((v692 & 0x3FFFFFF0) != v692)
                  {
LABEL_560:
                    do
                    {
                      v663 += 8;
                      v736 = *(unsigned __int8 *)v672;
                      v672 = (unint64_t *)((char *)v672 + 1);
                      v662 |= (unint64_t)v736 << v691;
                      v691 -= 8;
                    }
                    while (v691 >= v688);
                  }
                }
                else
                {
                  v672 = v664;
                }
              }
              else
              {
                v671 = (v670 & 0xFFFFFFF8) + 8;
                v663 += v671;
                v672 = (unint64_t *)((char *)v664 + (v671 >> 3));
                v10 = a9;
                v662 = (bswap64(*v664) >> (56 - (v670 & 0xF8u)) << (v670 & 7)) | *(_QWORD *)a9;
              }
              *(_QWORD *)(v10 + 24) += (char *)v672 - (char *)v664;
              *(_QWORD *)v10 = v662;
              *(_DWORD *)(v10 + 12) = v663;
            }
            v919 = (unint64_t)(159 * ((_DWORD)v659 << v661) + 97) >> 8;
            v920 = v662 - (v919 << 56);
            if (v662 >= v919 << 56)
            {
              v923 = ((_DWORD)v659 << v661) - v919;
              v921 = vpx_norm[v923];
              v246 = v923 << v921;
              v922 = 6;
              v662 = v920;
            }
            else
            {
              v921 = vpx_norm[v919];
              v246 = (_DWORD)v919 << v921;
              v922 = 5;
            }
            v247 = v662 << v921;
            v248 = v663 - v921;
            goto LABEL_521;
          }
          v673 = ((_DWORD)v524 << v525) - v659;
          v674 = vpx_norm[v673];
          v675 = v660 << v674;
          v676 = v527 - v674;
          if ((int)(v527 - v674) < 0)
          {
            *(_QWORD *)v10 = v675;
            *(_DWORD *)(v10 + 12) = v676;
            v677 = *(unint64_t **)(v10 + 24);
            v678 = *(_QWORD *)(v10 + 16) - (_QWORD)v677;
            v679 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
            if (v679)
            {
              if (v678 >= 9)
                v680 = 9;
              else
                v680 = *(_QWORD *)(v10 + 16) - (_QWORD)v677;
              v681 = v30;
              v679(*(_QWORD *)(v10 + 40), v677, v1236, v680);
              v243 = 2 * v1247;
              LOWORD(v30) = v681;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v677 = (unint64_t *)(a9 + 48);
            }
            v682 = 8 * v678;
            v683 = 48 - v676;
            if (8 * v678 < 0x41)
            {
              v737 = 56 - v682 - v676;
              if (v737 >= 0)
                v676 += 0x40000000;
              if (v682)
                v738 = 1;
              else
                v738 = v737 <= -1;
              v10 = a9;
              if (v738 && (v739 = v737 & ~(v737 >> 31), v683 >= v739))
              {
                v740 = v674 - v527 + 40;
                if (v740 >= v739 - 1)
                  v740 = v739 - 1;
                v741 = v674 - v527 - v740 + 47;
                v685 = v677;
                v742 = v683;
                if (v741 < 0x78)
                  goto LABEL_561;
                v743 = (v741 >> 3) + 1;
                v744 = (int8x16_t)v675;
                v745 = 0uLL;
                v746 = (int32x4_t)v676;
                v747 = vdupq_n_s32(v683);
                v748 = vaddq_s32(v747, (int32x4_t)xmmword_208F3A6C0);
                v685 = (unint64_t *)((char *)v677 + (v743 & 0x3FFFFFF0));
                v749 = vaddq_s32(v747, (int32x4_t)xmmword_208F3A6D0);
                v742 = v683 - 8 * (v743 & 0x3FFFFFF0);
                v750 = vaddq_s32(v747, (int32x4_t)xmmword_208F3A6A0);
                v751 = vaddq_s32(v747, (int32x4_t)xmmword_208F3A6B0);
                v752 = v743 & 0x3FFFFFF0;
                v753 = (uint8x16_t *)v677;
                v754 = 0uLL;
                v755 = 0uLL;
                v756 = 0uLL;
                v757 = 0uLL;
                v758 = 0uLL;
                v759 = 0uLL;
                v760 = 0uLL;
                v761 = 0uLL;
                v762 = 0uLL;
                do
                {
                  v763 = *v753++;
                  v764 = vmovl_high_u8(v763);
                  v765 = vmovl_high_u16(v764);
                  v766.i64[0] = v765.u32[0];
                  v766.i64[1] = v765.u32[1];
                  v767 = v766;
                  v768 = vmovl_u16(*(uint16x4_t *)v764.i8);
                  v766.i64[0] = v768.u32[2];
                  v766.i64[1] = v768.u32[3];
                  v769 = v766;
                  v770 = vmovl_u8(*(uint8x8_t *)v763.i8);
                  v771 = vmovl_high_u16(v770);
                  v766.i64[0] = v771.u32[2];
                  v766.i64[1] = v771.u32[3];
                  v772 = v766;
                  v766.i64[0] = v765.u32[2];
                  v766.i64[1] = v765.u32[3];
                  v773 = v766;
                  v766.i64[0] = v768.u32[0];
                  v766.i64[1] = v768.u32[1];
                  v774 = v766;
                  v766.i64[0] = v771.u32[0];
                  v766.i64[1] = v771.u32[1];
                  v775 = v766;
                  v776 = vmovl_u16(*(uint16x4_t *)v770.i8);
                  v766.i64[0] = v776.u32[2];
                  v766.i64[1] = v776.u32[3];
                  v777 = v766;
                  v766.i64[0] = v776.u32[0];
                  v766.i64[1] = v776.u32[1];
                  v778 = v766;
                  v766.i64[0] = v751.u32[0];
                  v766.i64[1] = v751.u32[1];
                  v779 = (int8x16_t)vshlq_u64(v778, v766);
                  v766.i64[0] = v751.u32[2];
                  v766.i64[1] = v751.u32[3];
                  v780 = (int8x16_t)vshlq_u64(v777, v766);
                  v766.i64[0] = v750.u32[0];
                  v766.i64[1] = v750.u32[1];
                  v781 = (int8x16_t)vshlq_u64(v775, v766);
                  v766.i64[0] = v749.u32[0];
                  v766.i64[1] = v749.u32[1];
                  v782 = (int8x16_t)vshlq_u64(v774, v766);
                  v766.i64[0] = v748.u32[2];
                  v766.i64[1] = v748.u32[3];
                  v783 = (int8x16_t)vshlq_u64(v773, v766);
                  v766.i64[0] = v750.u32[2];
                  v766.i64[1] = v750.u32[3];
                  v784 = (int8x16_t)vshlq_u64(v772, v766);
                  v766.i64[0] = v749.u32[2];
                  v766.i64[1] = v749.u32[3];
                  v785 = (int8x16_t)vshlq_u64(v769, v766);
                  v766.i64[0] = v748.u32[0];
                  v766.i64[1] = v748.u32[1];
                  v758 = vorrq_s8((int8x16_t)vshlq_u64(v767, v766), v758);
                  v757 = vorrq_s8(v785, v757);
                  v755 = vorrq_s8(v784, v755);
                  v759 = vorrq_s8(v783, v759);
                  v756 = vorrq_s8(v782, v756);
                  v754 = vorrq_s8(v781, v754);
                  v745 = vorrq_s8(v780, v745);
                  v744 = vorrq_s8(v779, v744);
                  v746 = vaddq_s32(v746, v28);
                  v760 = vaddq_s32(v760, v28);
                  v761 = vaddq_s32(v761, v28);
                  v762 = vaddq_s32(v762, v28);
                  v751 = vaddq_s32(v751, v29);
                  v750 = vaddq_s32(v750, v29);
                  v749 = vaddq_s32(v749, v29);
                  v748 = vaddq_s32(v748, v29);
                  v752 -= 16;
                }
                while (v752);
                v676 = vaddvq_s32(vaddq_s32(vaddq_s32(v746, v761), vaddq_s32(v760, v762)));
                v786 = vorrq_s8(vorrq_s8(vorrq_s8(v744, v756), vorrq_s8(v754, v758)), vorrq_s8(vorrq_s8(v745, v757), vorrq_s8(v755, v759)));
                v675 = (unint64_t)vorr_s8(*(int8x8_t *)v786.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v786, v786, 8uLL));
                v243 = 2 * v1247;
                if ((v743 & 0x3FFFFFF0) != v743)
                {
LABEL_561:
                  do
                  {
                    v676 += 8;
                    v787 = *(unsigned __int8 *)v685;
                    v685 = (unint64_t *)((char *)v685 + 1);
                    v675 |= (unint64_t)v787 << v742;
                    v742 -= 8;
                  }
                  while (v742 >= v739);
                }
              }
              else
              {
                v685 = v677;
              }
            }
            else
            {
              v684 = (v683 & 0xFFFFFFF8) + 8;
              v676 += v684;
              v685 = (unint64_t *)((char *)v677 + (v684 >> 3));
              v10 = a9;
              v675 = (bswap64(*v677) >> (56 - (v683 & 0xF8u)) << (v683 & 7)) | *(_QWORD *)a9;
            }
            *(_QWORD *)(v10 + 24) += (char *)v685 - (char *)v677;
            *(_QWORD *)v10 = v675;
            *(_DWORD *)(v10 + 12) = v676;
          }
          v924 = (unint64_t)(165 * (v673 << v674) + 91) >> 8;
          v925 = v675 - (v924 << 56);
          if (v675 >= v924 << 56)
          {
            v931 = (v673 << v674) - v924;
            v926 = vpx_norm[v931];
            v927 = v931 << v926;
            v928 = 9;
            v929 = v925 << v926;
            v930 = v676 - v926;
            if ((int)(v676 - v926) >= 0)
              goto LABEL_517;
          }
          else
          {
            v926 = vpx_norm[v924];
            v927 = (_DWORD)v924 << v926;
            v928 = 7;
            v929 = v675 << v926;
            v930 = v676 - v926;
            if ((int)(v676 - v926) >= 0)
            {
LABEL_517:
              v1163 = (unint64_t)(145 * v927 + 111) >> 8;
              if (v929 >= v1163 << 56)
              {
                v1165 = vpx_norm[(v927 - v1163)];
                v246 = (v927 - (_DWORD)v1163) << v1165;
                v1164 = 1;
                v929 -= v1163 << 56;
              }
              else
              {
                v1164 = 0;
                v1165 = vpx_norm[v1163];
                v246 = (_DWORD)v1163 << v1165;
              }
              v247 = v929 << v1165;
              v248 = v930 - v1165;
              v922 = v928 + v1164;
              goto LABEL_521;
            }
          }
          *(_QWORD *)v10 = v929;
          *(_DWORD *)(v10 + 12) = v930;
          v932 = *(unint64_t **)(v10 + 24);
          v933 = *(_QWORD *)(v10 + 16) - (_QWORD)v932;
          v934 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
          if (v934)
          {
            if (v933 >= 9)
              v935 = 9;
            else
              v935 = *(_QWORD *)(v10 + 16) - (_QWORD)v932;
            v936 = v30;
            v934(*(_QWORD *)(v10 + 40), v932, v1236, v935);
            v243 = 2 * v1247;
            LOWORD(v30) = v936;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v932 = (unint64_t *)(a9 + 48);
          }
          v937 = 8 * v933;
          v938 = 48 - v930;
          if (8 * v933 < 0x41)
          {
            v941 = 56 - v937 - v930;
            if (v941 >= 0)
              v930 += 0x40000000;
            if (v937)
              v942 = 1;
            else
              v942 = v941 <= -1;
            v10 = a9;
            if (v942 && (v943 = v941 & ~(v941 >> 31), v938 >= v943))
            {
              v944 = v926 - v676 + 40;
              if (v944 >= v943 - 1)
                v944 = v943 - 1;
              v945 = v926 - v676 - v944 + 47;
              v940 = v932;
              v946 = v938;
              if (v945 < 0x78)
                goto LABEL_562;
              v947 = (v945 >> 3) + 1;
              v948 = (int8x16_t)v929;
              v949 = 0uLL;
              v950 = (int32x4_t)v930;
              v951 = vdupq_n_s32(v938);
              v952 = vaddq_s32(v951, (int32x4_t)xmmword_208F3A6C0);
              v940 = (unint64_t *)((char *)v932 + (v947 & 0x3FFFFFF0));
              v953 = vaddq_s32(v951, (int32x4_t)xmmword_208F3A6D0);
              v946 = v938 - 8 * (v947 & 0x3FFFFFF0);
              v954 = vaddq_s32(v951, (int32x4_t)xmmword_208F3A6A0);
              v955 = vaddq_s32(v951, (int32x4_t)xmmword_208F3A6B0);
              v956 = v947 & 0x3FFFFFF0;
              v957 = (uint8x16_t *)v932;
              v958 = 0uLL;
              v959 = 0uLL;
              v960 = 0uLL;
              v961 = 0uLL;
              v962 = 0uLL;
              v963 = 0uLL;
              v964 = 0uLL;
              v965 = 0uLL;
              v966 = 0uLL;
              do
              {
                v967 = *v957++;
                v968 = vmovl_high_u8(v967);
                v969 = vmovl_high_u16(v968);
                v970.i64[0] = v969.u32[0];
                v970.i64[1] = v969.u32[1];
                v971 = v970;
                v972 = vmovl_u16(*(uint16x4_t *)v968.i8);
                v970.i64[0] = v972.u32[2];
                v970.i64[1] = v972.u32[3];
                v973 = v970;
                v974 = vmovl_u8(*(uint8x8_t *)v967.i8);
                v975 = vmovl_high_u16(v974);
                v970.i64[0] = v975.u32[2];
                v970.i64[1] = v975.u32[3];
                v976 = v970;
                v970.i64[0] = v969.u32[2];
                v970.i64[1] = v969.u32[3];
                v977 = v970;
                v970.i64[0] = v972.u32[0];
                v970.i64[1] = v972.u32[1];
                v978 = v970;
                v970.i64[0] = v975.u32[0];
                v970.i64[1] = v975.u32[1];
                v979 = v970;
                v980 = vmovl_u16(*(uint16x4_t *)v974.i8);
                v970.i64[0] = v980.u32[2];
                v970.i64[1] = v980.u32[3];
                v981 = v970;
                v970.i64[0] = v980.u32[0];
                v970.i64[1] = v980.u32[1];
                v982 = v970;
                v970.i64[0] = v955.u32[0];
                v970.i64[1] = v955.u32[1];
                v983 = (int8x16_t)vshlq_u64(v982, v970);
                v970.i64[0] = v955.u32[2];
                v970.i64[1] = v955.u32[3];
                v984 = (int8x16_t)vshlq_u64(v981, v970);
                v970.i64[0] = v954.u32[0];
                v970.i64[1] = v954.u32[1];
                v985 = (int8x16_t)vshlq_u64(v979, v970);
                v970.i64[0] = v953.u32[0];
                v970.i64[1] = v953.u32[1];
                v986 = (int8x16_t)vshlq_u64(v978, v970);
                v970.i64[0] = v952.u32[2];
                v970.i64[1] = v952.u32[3];
                v987 = (int8x16_t)vshlq_u64(v977, v970);
                v970.i64[0] = v954.u32[2];
                v970.i64[1] = v954.u32[3];
                v988 = (int8x16_t)vshlq_u64(v976, v970);
                v970.i64[0] = v953.u32[2];
                v970.i64[1] = v953.u32[3];
                v989 = (int8x16_t)vshlq_u64(v973, v970);
                v970.i64[0] = v952.u32[0];
                v970.i64[1] = v952.u32[1];
                v962 = vorrq_s8((int8x16_t)vshlq_u64(v971, v970), v962);
                v961 = vorrq_s8(v989, v961);
                v959 = vorrq_s8(v988, v959);
                v963 = vorrq_s8(v987, v963);
                v960 = vorrq_s8(v986, v960);
                v958 = vorrq_s8(v985, v958);
                v949 = vorrq_s8(v984, v949);
                v948 = vorrq_s8(v983, v948);
                v950 = vaddq_s32(v950, v28);
                v964 = vaddq_s32(v964, v28);
                v965 = vaddq_s32(v965, v28);
                v966 = vaddq_s32(v966, v28);
                v955 = vaddq_s32(v955, v29);
                v954 = vaddq_s32(v954, v29);
                v953 = vaddq_s32(v953, v29);
                v952 = vaddq_s32(v952, v29);
                v956 -= 16;
              }
              while (v956);
              v930 = vaddvq_s32(vaddq_s32(vaddq_s32(v950, v965), vaddq_s32(v964, v966)));
              v990 = vorrq_s8(vorrq_s8(vorrq_s8(v948, v960), vorrq_s8(v958, v962)), vorrq_s8(vorrq_s8(v949, v961), vorrq_s8(v959, v963)));
              v929 = (unint64_t)vorr_s8(*(int8x8_t *)v990.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v990, v990, 8uLL));
              v243 = 2 * v1247;
              if ((v947 & 0x3FFFFFF0) != v947)
              {
LABEL_562:
                do
                {
                  v930 += 8;
                  v991 = *(unsigned __int8 *)v940;
                  v940 = (unint64_t *)((char *)v940 + 1);
                  v929 |= (unint64_t)v991 << v946;
                  v946 -= 8;
                }
                while (v946 >= v943);
              }
            }
            else
            {
              v940 = v932;
            }
          }
          else
          {
            v939 = (v938 & 0xFFFFFFF8) + 8;
            v930 += v939;
            v940 = (unint64_t *)((char *)v932 + (v939 >> 3));
            v10 = a9;
            v929 = (bswap64(*v932) >> (56 - (v938 & 0xF8u)) << (v938 & 7)) | *(_QWORD *)a9;
          }
          *(_QWORD *)(v10 + 24) += (char *)v940 - (char *)v932;
          *(_QWORD *)v10 = v929;
          *(_DWORD *)(v10 + 12) = v930;
          goto LABEL_517;
        }
        v538 = v523 - v524;
        v539 = vpx_norm[(v523 - v524)];
        v540 = (v341 - (v524 << 56)) << v539;
        v541 = v342 - v539;
        v1248[*(__int16 *)(a7 + v243)] = 5;
        v542 = v261[5];
        if (((v342 - v539) & 0x80000000) != 0)
        {
          *(_QWORD *)v10 = v540;
          *(_DWORD *)(v10 + 12) = v541;
          v543 = *(unint64_t **)(v10 + 24);
          v544 = *(_QWORD *)(v10 + 16) - (_QWORD)v543;
          v545 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
          if (v545)
          {
            if (v544 >= 9)
              v546 = 9;
            else
              v546 = *(_QWORD *)(v10 + 16) - (_QWORD)v543;
            v547 = v30;
            v545(*(_QWORD *)(v10 + 40), v543, v1236, v546);
            v243 = 2 * v1247;
            v30 = v547;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v543 = (unint64_t *)(a9 + 48);
          }
          v548 = 8 * v544;
          v549 = 48 - v541;
          if (8 * v544 < 0x41)
          {
            v603 = 56 - v548 - v541;
            if (v603 >= 0)
              v541 += 0x40000000;
            if (v548)
              v604 = 1;
            else
              v604 = v603 <= -1;
            v10 = a9;
            if (v604 && (v605 = v603 & ~(v603 >> 31), v549 >= v605))
            {
              v606 = v539 - v342 + 40;
              if (v606 >= v605 - 1)
                v606 = v605 - 1;
              v607 = v539 - v342 - v606 + 47;
              v551 = v543;
              v608 = v549;
              if (v607 < 0x78)
                goto LABEL_563;
              v609 = (v607 >> 3) + 1;
              v610 = (int8x16_t)v540;
              v611 = 0uLL;
              v612 = (int32x4_t)v541;
              v613 = vdupq_n_s32(v549);
              v614 = vaddq_s32(v613, (int32x4_t)xmmword_208F3A6C0);
              v551 = (unint64_t *)((char *)v543 + (v609 & 0x3FFFFFF0));
              v615 = vaddq_s32(v613, (int32x4_t)xmmword_208F3A6D0);
              v608 = v549 - 8 * (v609 & 0x3FFFFFF0);
              v616 = vaddq_s32(v613, (int32x4_t)xmmword_208F3A6A0);
              v617 = vaddq_s32(v613, (int32x4_t)xmmword_208F3A6B0);
              v618 = v609 & 0x3FFFFFF0;
              v619 = (uint8x16_t *)v543;
              v620 = 0uLL;
              v621 = 0uLL;
              v622 = 0uLL;
              v623 = 0uLL;
              v624 = 0uLL;
              v625 = 0uLL;
              v626 = 0uLL;
              v627 = 0uLL;
              v628 = 0uLL;
              do
              {
                v629 = *v619++;
                v630 = vmovl_high_u8(v629);
                v631 = vmovl_high_u16(v630);
                v632.i64[0] = v631.u32[0];
                v632.i64[1] = v631.u32[1];
                v633 = v632;
                v634 = vmovl_u16(*(uint16x4_t *)v630.i8);
                v632.i64[0] = v634.u32[2];
                v632.i64[1] = v634.u32[3];
                v635 = v632;
                v636 = vmovl_u8(*(uint8x8_t *)v629.i8);
                v637 = vmovl_high_u16(v636);
                v632.i64[0] = v637.u32[2];
                v632.i64[1] = v637.u32[3];
                v638 = v632;
                v632.i64[0] = v631.u32[2];
                v632.i64[1] = v631.u32[3];
                v639 = v632;
                v632.i64[0] = v634.u32[0];
                v632.i64[1] = v634.u32[1];
                v640 = v632;
                v632.i64[0] = v637.u32[0];
                v632.i64[1] = v637.u32[1];
                v641 = v632;
                v642 = vmovl_u16(*(uint16x4_t *)v636.i8);
                v632.i64[0] = v642.u32[2];
                v632.i64[1] = v642.u32[3];
                v643 = v632;
                v632.i64[0] = v642.u32[0];
                v632.i64[1] = v642.u32[1];
                v644 = v632;
                v632.i64[0] = v617.u32[0];
                v632.i64[1] = v617.u32[1];
                v645 = (int8x16_t)vshlq_u64(v644, v632);
                v632.i64[0] = v617.u32[2];
                v632.i64[1] = v617.u32[3];
                v646 = (int8x16_t)vshlq_u64(v643, v632);
                v632.i64[0] = v616.u32[0];
                v632.i64[1] = v616.u32[1];
                v647 = (int8x16_t)vshlq_u64(v641, v632);
                v632.i64[0] = v615.u32[0];
                v632.i64[1] = v615.u32[1];
                v648 = (int8x16_t)vshlq_u64(v640, v632);
                v632.i64[0] = v614.u32[2];
                v632.i64[1] = v614.u32[3];
                v649 = (int8x16_t)vshlq_u64(v639, v632);
                v632.i64[0] = v616.u32[2];
                v632.i64[1] = v616.u32[3];
                v650 = (int8x16_t)vshlq_u64(v638, v632);
                v632.i64[0] = v615.u32[2];
                v632.i64[1] = v615.u32[3];
                v651 = (int8x16_t)vshlq_u64(v635, v632);
                v632.i64[0] = v614.u32[0];
                v632.i64[1] = v614.u32[1];
                v624 = vorrq_s8((int8x16_t)vshlq_u64(v633, v632), v624);
                v623 = vorrq_s8(v651, v623);
                v621 = vorrq_s8(v650, v621);
                v625 = vorrq_s8(v649, v625);
                v622 = vorrq_s8(v648, v622);
                v620 = vorrq_s8(v647, v620);
                v611 = vorrq_s8(v646, v611);
                v610 = vorrq_s8(v645, v610);
                v612 = vaddq_s32(v612, v28);
                v626 = vaddq_s32(v626, v28);
                v627 = vaddq_s32(v627, v28);
                v628 = vaddq_s32(v628, v28);
                v617 = vaddq_s32(v617, v29);
                v616 = vaddq_s32(v616, v29);
                v615 = vaddq_s32(v615, v29);
                v614 = vaddq_s32(v614, v29);
                v618 -= 16;
              }
              while (v618);
              v541 = vaddvq_s32(vaddq_s32(vaddq_s32(v612, v627), vaddq_s32(v626, v628)));
              v652 = vorrq_s8(vorrq_s8(vorrq_s8(v610, v622), vorrq_s8(v620, v624)), vorrq_s8(vorrq_s8(v611, v623), vorrq_s8(v621, v625)));
              v540 = (unint64_t)vorr_s8(*(int8x8_t *)v652.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v652, v652, 8uLL));
              v243 = 2 * v1247;
              if ((v609 & 0x3FFFFFF0) != v609)
              {
LABEL_563:
                do
                {
                  v541 += 8;
                  v653 = *(unsigned __int8 *)v551;
                  v551 = (unint64_t *)((char *)v551 + 1);
                  v540 |= (unint64_t)v653 << v608;
                  v608 -= 8;
                }
                while (v608 >= v605);
              }
            }
            else
            {
              v551 = v543;
            }
          }
          else
          {
            v550 = (v549 & 0xFFFFFFF8) + 8;
            v541 += v550;
            v551 = (unint64_t *)((char *)v543 + (v550 >> 3));
            v10 = a9;
            v540 = (bswap64(*v543) >> (56 - (v549 & 0xF8u)) << (v549 & 7)) | *(_QWORD *)a9;
          }
          *(_QWORD *)(v10 + 24) += (char *)v551 - (char *)v543;
          *(_QWORD *)v10 = v540;
          *(_DWORD *)(v10 + 12) = v541;
        }
        v788 = (unint64_t)(((v538 << v539) - 1) * v542 + 256) >> 8;
        v789 = v540 - (v788 << 56);
        if (v540 < v788 << 56)
        {
          v790 = vpx_norm[v788];
          v791 = v540 << v790;
          v792 = v541 - v790;
          v793 = v261[6];
          if (((v541 - v790) & 0x80000000) != 0)
          {
            *(_QWORD *)v10 = v791;
            *(_DWORD *)(v10 + 12) = v792;
            v794 = *(unint64_t **)(v10 + 24);
            v795 = *(_QWORD *)(v10 + 16) - (_QWORD)v794;
            v796 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
            if (v796)
            {
              if (v795 >= 9)
                v797 = 9;
              else
                v797 = *(_QWORD *)(v10 + 16) - (_QWORD)v794;
              v798 = v30;
              v796(*(_QWORD *)(v10 + 40), v794, v1236, v797);
              v243 = 2 * v1247;
              LOWORD(v30) = v798;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v794 = (unint64_t *)(a9 + 48);
            }
            v799 = 8 * v795;
            v800 = 48 - v792;
            if (8 * v795 < 0x41)
            {
              v817 = 56 - v799 - v792;
              if (v817 >= 0)
                v792 += 0x40000000;
              if (v799)
                v818 = 1;
              else
                v818 = v817 <= -1;
              v10 = a9;
              if (v818 && (v819 = v817 & ~(v817 >> 31), v800 >= v819))
              {
                v820 = v790 - v541 + 40;
                if (v820 >= v819 - 1)
                  v820 = v819 - 1;
                v821 = v790 - v541 - v820 + 47;
                v802 = v794;
                v822 = v800;
                if (v821 < 0x78)
                  goto LABEL_564;
                v823 = (v821 >> 3) + 1;
                v824 = (int8x16_t)v791;
                v825 = 0uLL;
                v826 = (int32x4_t)v792;
                v827 = vdupq_n_s32(v800);
                v828 = vaddq_s32(v827, (int32x4_t)xmmword_208F3A6C0);
                v802 = (unint64_t *)((char *)v794 + (v823 & 0x3FFFFFF0));
                v829 = vaddq_s32(v827, (int32x4_t)xmmword_208F3A6D0);
                v822 = v800 - 8 * (v823 & 0x3FFFFFF0);
                v830 = vaddq_s32(v827, (int32x4_t)xmmword_208F3A6A0);
                v831 = vaddq_s32(v827, (int32x4_t)xmmword_208F3A6B0);
                v832 = v823 & 0x3FFFFFF0;
                v833 = (uint8x16_t *)v794;
                v834 = 0uLL;
                v835 = 0uLL;
                v836 = 0uLL;
                v837 = 0uLL;
                v838 = 0uLL;
                v839 = 0uLL;
                v840 = 0uLL;
                v841 = 0uLL;
                v842 = 0uLL;
                do
                {
                  v843 = *v833++;
                  v844 = vmovl_high_u8(v843);
                  v845 = vmovl_high_u16(v844);
                  v846.i64[0] = v845.u32[0];
                  v846.i64[1] = v845.u32[1];
                  v847 = v846;
                  v848 = vmovl_u16(*(uint16x4_t *)v844.i8);
                  v846.i64[0] = v848.u32[2];
                  v846.i64[1] = v848.u32[3];
                  v849 = v846;
                  v850 = vmovl_u8(*(uint8x8_t *)v843.i8);
                  v851 = vmovl_high_u16(v850);
                  v846.i64[0] = v851.u32[2];
                  v846.i64[1] = v851.u32[3];
                  v852 = v846;
                  v846.i64[0] = v845.u32[2];
                  v846.i64[1] = v845.u32[3];
                  v853 = v846;
                  v846.i64[0] = v848.u32[0];
                  v846.i64[1] = v848.u32[1];
                  v854 = v846;
                  v846.i64[0] = v851.u32[0];
                  v846.i64[1] = v851.u32[1];
                  v855 = v846;
                  v856 = vmovl_u16(*(uint16x4_t *)v850.i8);
                  v846.i64[0] = v856.u32[2];
                  v846.i64[1] = v856.u32[3];
                  v857 = v846;
                  v846.i64[0] = v856.u32[0];
                  v846.i64[1] = v856.u32[1];
                  v858 = v846;
                  v846.i64[0] = v831.u32[0];
                  v846.i64[1] = v831.u32[1];
                  v859 = (int8x16_t)vshlq_u64(v858, v846);
                  v846.i64[0] = v831.u32[2];
                  v846.i64[1] = v831.u32[3];
                  v860 = (int8x16_t)vshlq_u64(v857, v846);
                  v846.i64[0] = v830.u32[0];
                  v846.i64[1] = v830.u32[1];
                  v861 = (int8x16_t)vshlq_u64(v855, v846);
                  v846.i64[0] = v829.u32[0];
                  v846.i64[1] = v829.u32[1];
                  v862 = (int8x16_t)vshlq_u64(v854, v846);
                  v846.i64[0] = v828.u32[2];
                  v846.i64[1] = v828.u32[3];
                  v863 = (int8x16_t)vshlq_u64(v853, v846);
                  v846.i64[0] = v830.u32[2];
                  v846.i64[1] = v830.u32[3];
                  v864 = (int8x16_t)vshlq_u64(v852, v846);
                  v846.i64[0] = v829.u32[2];
                  v846.i64[1] = v829.u32[3];
                  v865 = (int8x16_t)vshlq_u64(v849, v846);
                  v846.i64[0] = v828.u32[0];
                  v846.i64[1] = v828.u32[1];
                  v838 = vorrq_s8((int8x16_t)vshlq_u64(v847, v846), v838);
                  v837 = vorrq_s8(v865, v837);
                  v835 = vorrq_s8(v864, v835);
                  v839 = vorrq_s8(v863, v839);
                  v836 = vorrq_s8(v862, v836);
                  v834 = vorrq_s8(v861, v834);
                  v825 = vorrq_s8(v860, v825);
                  v824 = vorrq_s8(v859, v824);
                  v826 = vaddq_s32(v826, v28);
                  v840 = vaddq_s32(v840, v28);
                  v841 = vaddq_s32(v841, v28);
                  v842 = vaddq_s32(v842, v28);
                  v831 = vaddq_s32(v831, v29);
                  v830 = vaddq_s32(v830, v29);
                  v829 = vaddq_s32(v829, v29);
                  v828 = vaddq_s32(v828, v29);
                  v832 -= 16;
                }
                while (v832);
                v792 = vaddvq_s32(vaddq_s32(vaddq_s32(v826, v841), vaddq_s32(v840, v842)));
                v866 = vorrq_s8(vorrq_s8(vorrq_s8(v824, v836), vorrq_s8(v834, v838)), vorrq_s8(vorrq_s8(v825, v837), vorrq_s8(v835, v839)));
                v791 = (unint64_t)vorr_s8(*(int8x8_t *)v866.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v866, v866, 8uLL));
                v243 = 2 * v1247;
                if ((v823 & 0x3FFFFFF0) != v823)
                {
LABEL_564:
                  do
                  {
                    v792 += 8;
                    v867 = *(unsigned __int8 *)v802;
                    v802 = (unint64_t *)((char *)v802 + 1);
                    v791 |= (unint64_t)v867 << v822;
                    v822 -= 8;
                  }
                  while (v822 >= v819);
                }
              }
              else
              {
                v802 = v794;
              }
            }
            else
            {
              v801 = (v800 & 0xFFFFFFF8) + 8;
              v792 += v801;
              v802 = (unint64_t *)((char *)v794 + (v801 >> 3));
              v10 = a9;
              v791 = (bswap64(*v794) >> (56 - (v800 & 0xF8u)) << (v800 & 7)) | *(_QWORD *)a9;
            }
            *(_QWORD *)(v10 + 24) += (char *)v802 - (char *)v794;
            *(_QWORD *)v10 = v791;
            *(_DWORD *)(v10 + 12) = v792;
          }
          v992 = (_DWORD)v788 << v790;
          v993 = (unint64_t)((((_DWORD)v788 << v790) - 1) * v793 + 256) >> 8;
          v994 = v791 - (v993 << 56);
          if (v791 >= v993 << 56)
          {
            v1005 = v992 - v993;
            v1006 = vpx_norm[v1005];
            v1007 = v994 << v1006;
            v1008 = v792 - v1006;
            if ((int)(v792 - v1006) < 0)
            {
              *(_QWORD *)v10 = v1007;
              *(_DWORD *)(v10 + 12) = v1008;
              v1009 = v30;
              vpx_reader_fill(v10);
              v243 = 2 * v1247;
              v10 = a9;
              LOWORD(v30) = v1009;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v1007 = *(_QWORD *)a9;
              v1008 = *(_DWORD *)(a9 + 12);
            }
            v250 = v1247;
            v1010 = v1005 << v1006;
            v1011 = (unint64_t)(176 * (v1005 << v1006) + 80) >> 8;
            v1012 = v1007 - (v1011 << 56);
            if (v1007 >= v1011 << 56)
            {
              v1024 = v1010 - v1011;
              v1014 = vpx_norm[(v1010 - v1011)];
              v1015 = v1024 << v1014;
              v1013 = 8;
              v1007 = v1012;
            }
            else
            {
              v1013 = 0;
              v1014 = vpx_norm[v1011];
              v1015 = (_DWORD)v1011 << v1014;
            }
            v1025 = v1007 << v1014;
            v1026 = v1008 - v1014;
            if (v1026 < 0)
            {
              *(_QWORD *)v10 = v1025;
              *(_DWORD *)(v10 + 12) = v1026;
              v1027 = v30;
              vpx_reader_fill(v10);
              v243 = 2 * v1247;
              v10 = a9;
              LOWORD(v30) = v1027;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v1025 = *(_QWORD *)a9;
              v1026 = *(_DWORD *)(a9 + 12);
            }
            v1028 = (unint64_t)(155 * v1015 + 101) >> 8;
            if (v1025 >= v1028 << 56)
            {
              v1030 = vpx_norm[(v1015 - v1028)];
              v1031 = (v1015 - (_DWORD)v1028) << v1030;
              v1029 = 4;
              v1025 -= v1028 << 56;
            }
            else
            {
              v1029 = 0;
              v1030 = vpx_norm[v1028];
              v1031 = (_DWORD)v1028 << v1030;
            }
            v1038 = v1025 << v1030;
            v1039 = v1026 - v1030;
            if (v1039 < 0)
            {
              *(_QWORD *)v10 = v1038;
              *(_DWORD *)(v10 + 12) = v1039;
              v1040 = v30;
              vpx_reader_fill(v10);
              v243 = 2 * v1247;
              v10 = a9;
              LOWORD(v30) = v1040;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v1038 = *(_QWORD *)a9;
              v1039 = *(_DWORD *)(a9 + 12);
            }
            v1041 = (unint64_t)(140 * v1031 + 116) >> 8;
            if (v1038 >= v1041 << 56)
            {
              v1043 = vpx_norm[(v1031 - v1041)];
              v1044 = (v1031 - (_DWORD)v1041) << v1043;
              v1042 = 2;
              v1038 -= v1041 << 56;
            }
            else
            {
              v1042 = 0;
              v1043 = vpx_norm[v1041];
              v1044 = (_DWORD)v1041 << v1043;
            }
            v1046 = v1038 << v1043;
            v1047 = v1039 - v1043;
            if (v1047 < 0)
            {
              *(_QWORD *)v10 = v1046;
              *(_DWORD *)(v10 + 12) = v1047;
              v1048 = v30;
              vpx_reader_fill(v10);
              v243 = 2 * v1247;
              v10 = a9;
              LOWORD(v30) = v1048;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v1046 = *(_QWORD *)a9;
              v1047 = *(_DWORD *)(a9 + 12);
            }
            v1049 = (unint64_t)(135 * v1044 + 121) >> 8;
            if (v1046 >= v1049 << 56)
            {
              v1051 = vpx_norm[(v1044 - v1049)];
              v246 = (v1044 - (_DWORD)v1049) << v1051;
              v1050 = 1;
              v1046 -= v1049 << 56;
            }
            else
            {
              v1050 = 0;
              v1051 = vpx_norm[v1049];
              v246 = (_DWORD)v1049 << v1051;
            }
            v1052 = v1013 | v1029 | v1042;
            v247 = v1046 << v1051;
            v248 = v1047 - v1051;
            v922 = v1052 + v1050 + 19;
          }
          else
          {
            v995 = vpx_norm[v993];
            v996 = v791 << v995;
            v997 = v792 - v995;
            if ((int)(v792 - v995) < 0)
            {
              *(_QWORD *)v10 = v996;
              *(_DWORD *)(v10 + 12) = v997;
              v998 = v30;
              vpx_reader_fill(v10);
              v243 = 2 * v1247;
              v10 = a9;
              LOWORD(v30) = v998;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v996 = *(_QWORD *)a9;
              v997 = *(_DWORD *)(a9 + 12);
            }
            v250 = v1247;
            v999 = (_DWORD)v993 << v995;
            v1000 = (unint64_t)(173 * ((_DWORD)v993 << v995) + 83) >> 8;
            v1001 = v996 - (v1000 << 56);
            if (v996 >= v1000 << 56)
            {
              v1016 = v999 - v1000;
              v1003 = vpx_norm[(v999 - v1000)];
              v1004 = v1016 << v1003;
              v1002 = 4;
              v996 = v1001;
            }
            else
            {
              v1002 = 0;
              v1003 = vpx_norm[v1000];
              v1004 = (_DWORD)v1000 << v1003;
            }
            v1017 = v996 << v1003;
            v1018 = v997 - v1003;
            if (v1018 < 0)
            {
              *(_QWORD *)v10 = v1017;
              *(_DWORD *)(v10 + 12) = v1018;
              v1019 = v30;
              vpx_reader_fill(v10);
              v243 = 2 * v1247;
              v10 = a9;
              LOWORD(v30) = v1019;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v1017 = *(_QWORD *)a9;
              v1018 = *(_DWORD *)(a9 + 12);
            }
            v1020 = (unint64_t)(148 * v1004 + 108) >> 8;
            if (v1017 >= v1020 << 56)
            {
              v1022 = vpx_norm[(v1004 - v1020)];
              v1023 = (v1004 - (_DWORD)v1020) << v1022;
              v1021 = 2;
              v1017 -= v1020 << 56;
            }
            else
            {
              v1021 = 0;
              v1022 = vpx_norm[v1020];
              v1023 = (_DWORD)v1020 << v1022;
            }
            v1032 = v1017 << v1022;
            v1033 = v1018 - v1022;
            if (v1033 < 0)
            {
              *(_QWORD *)v10 = v1032;
              *(_DWORD *)(v10 + 12) = v1033;
              v1034 = v30;
              vpx_reader_fill(v10);
              v243 = 2 * v1247;
              v10 = a9;
              LOWORD(v30) = v1034;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v1032 = *(_QWORD *)a9;
              v1033 = *(_DWORD *)(a9 + 12);
            }
            v1035 = (unint64_t)(140 * v1023 + 116) >> 8;
            if (v1032 >= v1035 << 56)
            {
              v1037 = vpx_norm[(v1023 - v1035)];
              v246 = (v1023 - (_DWORD)v1035) << v1037;
              v1036 = 1;
              v1032 -= v1035 << 56;
            }
            else
            {
              v1036 = 0;
              v1037 = vpx_norm[v1035];
              v246 = (_DWORD)v1035 << v1037;
            }
            v1045 = v1002 | v1021;
            v247 = v1032 << v1037;
            v248 = v1033 - v1037;
            v922 = v1045 + v1036 + 11;
          }
          goto LABEL_522;
        }
        v803 = (v538 << v539) - v788;
        v804 = vpx_norm[v803];
        v805 = v789 << v804;
        v806 = v541 - v804;
        v807 = v261[7];
        if (((v541 - v804) & 0x80000000) != 0)
        {
          *(_QWORD *)v10 = v805;
          *(_DWORD *)(v10 + 12) = v806;
          v808 = *(unint64_t **)(v10 + 24);
          v809 = *(_QWORD *)(v10 + 16) - (_QWORD)v808;
          v810 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
          if (v810)
          {
            if (v809 >= 9)
              v811 = 9;
            else
              v811 = *(_QWORD *)(v10 + 16) - (_QWORD)v808;
            v812 = v30;
            v810(*(_QWORD *)(v10 + 40), v808, v1236, v811);
            v243 = 2 * v1247;
            v30 = v812;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v808 = (unint64_t *)(a9 + 48);
          }
          v813 = 8 * v809;
          v814 = 48 - v806;
          if (8 * v809 < 0x41)
          {
            v868 = 56 - v813 - v806;
            if (v868 >= 0)
              v806 += 0x40000000;
            if (v813)
              v869 = 1;
            else
              v869 = v868 <= -1;
            v10 = a9;
            if (v869 && (v870 = v868 & ~(v868 >> 31), v814 >= v870))
            {
              v871 = v804 - v541 + 40;
              if (v871 >= v870 - 1)
                v871 = v870 - 1;
              v872 = v804 - v541 - v871 + 47;
              v816 = v808;
              v873 = v814;
              if (v872 < 0x78)
                goto LABEL_565;
              v874 = (v872 >> 3) + 1;
              v875 = (int8x16_t)v805;
              v876 = 0uLL;
              v877 = (int32x4_t)v806;
              v878 = vdupq_n_s32(v814);
              v879 = vaddq_s32(v878, (int32x4_t)xmmword_208F3A6C0);
              v816 = (unint64_t *)((char *)v808 + (v874 & 0x3FFFFFF0));
              v880 = vaddq_s32(v878, (int32x4_t)xmmword_208F3A6D0);
              v873 = v814 - 8 * (v874 & 0x3FFFFFF0);
              v881 = vaddq_s32(v878, (int32x4_t)xmmword_208F3A6A0);
              v882 = vaddq_s32(v878, (int32x4_t)xmmword_208F3A6B0);
              v883 = v874 & 0x3FFFFFF0;
              v884 = (uint8x16_t *)v808;
              v885 = 0uLL;
              v886 = 0uLL;
              v887 = 0uLL;
              v888 = 0uLL;
              v889 = 0uLL;
              v890 = 0uLL;
              v891 = 0uLL;
              v892 = 0uLL;
              v893 = 0uLL;
              do
              {
                v894 = *v884++;
                v895 = vmovl_high_u8(v894);
                v896 = vmovl_high_u16(v895);
                v897.i64[0] = v896.u32[0];
                v897.i64[1] = v896.u32[1];
                v898 = v897;
                v899 = vmovl_u16(*(uint16x4_t *)v895.i8);
                v897.i64[0] = v899.u32[2];
                v897.i64[1] = v899.u32[3];
                v900 = v897;
                v901 = vmovl_u8(*(uint8x8_t *)v894.i8);
                v902 = vmovl_high_u16(v901);
                v897.i64[0] = v902.u32[2];
                v897.i64[1] = v902.u32[3];
                v903 = v897;
                v897.i64[0] = v896.u32[2];
                v897.i64[1] = v896.u32[3];
                v904 = v897;
                v897.i64[0] = v899.u32[0];
                v897.i64[1] = v899.u32[1];
                v905 = v897;
                v897.i64[0] = v902.u32[0];
                v897.i64[1] = v902.u32[1];
                v906 = v897;
                v907 = vmovl_u16(*(uint16x4_t *)v901.i8);
                v897.i64[0] = v907.u32[2];
                v897.i64[1] = v907.u32[3];
                v908 = v897;
                v897.i64[0] = v907.u32[0];
                v897.i64[1] = v907.u32[1];
                v909 = v897;
                v897.i64[0] = v882.u32[0];
                v897.i64[1] = v882.u32[1];
                v910 = (int8x16_t)vshlq_u64(v909, v897);
                v897.i64[0] = v882.u32[2];
                v897.i64[1] = v882.u32[3];
                v911 = (int8x16_t)vshlq_u64(v908, v897);
                v897.i64[0] = v881.u32[0];
                v897.i64[1] = v881.u32[1];
                v912 = (int8x16_t)vshlq_u64(v906, v897);
                v897.i64[0] = v880.u32[0];
                v897.i64[1] = v880.u32[1];
                v913 = (int8x16_t)vshlq_u64(v905, v897);
                v897.i64[0] = v879.u32[2];
                v897.i64[1] = v879.u32[3];
                v914 = (int8x16_t)vshlq_u64(v904, v897);
                v897.i64[0] = v881.u32[2];
                v897.i64[1] = v881.u32[3];
                v915 = (int8x16_t)vshlq_u64(v903, v897);
                v897.i64[0] = v880.u32[2];
                v897.i64[1] = v880.u32[3];
                v916 = (int8x16_t)vshlq_u64(v900, v897);
                v897.i64[0] = v879.u32[0];
                v897.i64[1] = v879.u32[1];
                v889 = vorrq_s8((int8x16_t)vshlq_u64(v898, v897), v889);
                v888 = vorrq_s8(v916, v888);
                v886 = vorrq_s8(v915, v886);
                v890 = vorrq_s8(v914, v890);
                v887 = vorrq_s8(v913, v887);
                v885 = vorrq_s8(v912, v885);
                v876 = vorrq_s8(v911, v876);
                v875 = vorrq_s8(v910, v875);
                v877 = vaddq_s32(v877, v28);
                v891 = vaddq_s32(v891, v28);
                v892 = vaddq_s32(v892, v28);
                v893 = vaddq_s32(v893, v28);
                v882 = vaddq_s32(v882, v29);
                v881 = vaddq_s32(v881, v29);
                v880 = vaddq_s32(v880, v29);
                v879 = vaddq_s32(v879, v29);
                v883 -= 16;
              }
              while (v883);
              v806 = vaddvq_s32(vaddq_s32(vaddq_s32(v877, v892), vaddq_s32(v891, v893)));
              v917 = vorrq_s8(vorrq_s8(vorrq_s8(v875, v887), vorrq_s8(v885, v889)), vorrq_s8(vorrq_s8(v876, v888), vorrq_s8(v886, v890)));
              v805 = (unint64_t)vorr_s8(*(int8x8_t *)v917.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v917, v917, 8uLL));
              v243 = 2 * v1247;
              if ((v874 & 0x3FFFFFF0) != v874)
              {
LABEL_565:
                do
                {
                  v806 += 8;
                  v918 = *(unsigned __int8 *)v816;
                  v816 = (unint64_t *)((char *)v816 + 1);
                  v805 |= (unint64_t)v918 << v873;
                  v873 -= 8;
                }
                while (v873 >= v870);
              }
            }
            else
            {
              v816 = v808;
            }
          }
          else
          {
            v815 = (v814 & 0xFFFFFFF8) + 8;
            v806 += v815;
            v816 = (unint64_t *)((char *)v808 + (v815 >> 3));
            v10 = a9;
            v805 = (bswap64(*v808) >> (56 - (v814 & 0xF8u)) << (v814 & 7)) | *(_QWORD *)a9;
          }
          *(_QWORD *)(v10 + 24) += (char *)v816 - (char *)v808;
          *(_QWORD *)v10 = v805;
          *(_DWORD *)(v10 + 12) = v806;
        }
        v1053 = v803 << v804;
        v1054 = (unint64_t)(((v803 << v804) - 1) * v807 + 256) >> 8;
        if (v805 < v1054 << 56)
        {
          v1055 = vpx_norm[v1054];
          v1056 = v805 << v1055;
          v1057 = v806 - v1055;
          if ((int)(v806 - v1055) < 0)
          {
            *(_QWORD *)v10 = v1056;
            *(_DWORD *)(v10 + 12) = v1057;
            v1058 = v30;
            vpx_reader_fill(v10);
            v243 = 2 * v1247;
            v10 = a9;
            LOWORD(v30) = v1058;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v1056 = *(_QWORD *)a9;
            v1057 = *(_DWORD *)(a9 + 12);
          }
          v1059 = (_DWORD)v1054 << v1055;
          v1060 = (unint64_t)(180 * ((_DWORD)v1054 << v1055) + 76) >> 8;
          v1061 = v1056 - (v1060 << 56);
          if (v1056 >= v1060 << 56)
          {
            v1134 = v1059 - v1060;
            v1063 = vpx_norm[(v1059 - v1060)];
            v1064 = v1134 << v1063;
            v1062 = 16;
            v1056 = v1061;
          }
          else
          {
            v1062 = 0;
            v1063 = vpx_norm[v1060];
            v1064 = (_DWORD)v1060 << v1063;
          }
          v1135 = v1056 << v1063;
          v1136 = v1057 - v1063;
          if (v1136 < 0)
          {
            *(_QWORD *)v10 = v1135;
            *(_DWORD *)(v10 + 12) = v1136;
            v1137 = v30;
            vpx_reader_fill(v10);
            v243 = 2 * v1247;
            v10 = a9;
            LOWORD(v30) = v1137;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v1135 = *(_QWORD *)a9;
            v1136 = *(_DWORD *)(a9 + 12);
          }
          v1138 = (unint64_t)(157 * v1064 + 99) >> 8;
          if (v1135 >= v1138 << 56)
          {
            v1140 = vpx_norm[(v1064 - v1138)];
            v1141 = (v1064 - (_DWORD)v1138) << v1140;
            v1139 = 8;
            v1135 -= v1138 << 56;
          }
          else
          {
            v1139 = 0;
            v1140 = vpx_norm[v1138];
            v1141 = (_DWORD)v1138 << v1140;
          }
          v1142 = v1135 << v1140;
          v1143 = v1136 - v1140;
          if (v1143 < 0)
          {
            *(_QWORD *)v10 = v1142;
            *(_DWORD *)(v10 + 12) = v1143;
            v1144 = v30;
            vpx_reader_fill(v10);
            v243 = 2 * v1247;
            v10 = a9;
            LOWORD(v30) = v1144;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v1142 = *(_QWORD *)a9;
            v1143 = *(_DWORD *)(a9 + 12);
          }
          v1145 = (unint64_t)(141 * v1141 + 115) >> 8;
          if (v1142 >= v1145 << 56)
          {
            v1147 = vpx_norm[(v1141 - v1145)];
            v1148 = (v1141 - (_DWORD)v1145) << v1147;
            v1146 = 4;
            v1142 -= v1145 << 56;
          }
          else
          {
            v1146 = 0;
            v1147 = vpx_norm[v1145];
            v1148 = (_DWORD)v1145 << v1147;
          }
          v1149 = v1142 << v1147;
          v1150 = v1143 - v1147;
          if (v1150 < 0)
          {
            *(_QWORD *)v10 = v1149;
            *(_DWORD *)(v10 + 12) = v1150;
            v1151 = v30;
            vpx_reader_fill(v10);
            v243 = 2 * v1247;
            v10 = a9;
            LOWORD(v30) = v1151;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v1149 = *(_QWORD *)a9;
            v1150 = *(_DWORD *)(a9 + 12);
          }
          v1152 = (unint64_t)(134 * v1148 + 122) >> 8;
          if (v1149 >= v1152 << 56)
          {
            v1154 = vpx_norm[(v1148 - v1152)];
            v1155 = (v1148 - (_DWORD)v1152) << v1154;
            v1153 = 2;
            v1149 -= v1152 << 56;
          }
          else
          {
            v1153 = 0;
            v1154 = vpx_norm[v1152];
            v1155 = (_DWORD)v1152 << v1154;
          }
          v1156 = v1149 << v1154;
          v1157 = v1150 - v1154;
          if (v1157 < 0)
          {
            *(_QWORD *)v10 = v1156;
            *(_DWORD *)(v10 + 12) = v1157;
            v1158 = v30;
            vpx_reader_fill(v10);
            v243 = 2 * v1247;
            v10 = a9;
            LOWORD(v30) = v1158;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v1156 = *(_QWORD *)a9;
            v1157 = *(_DWORD *)(a9 + 12);
          }
          v1159 = (unint64_t)(130 * v1155 + 126) >> 8;
          if (v1156 >= v1159 << 56)
          {
            v1161 = vpx_norm[(v1155 - v1159)];
            v246 = (v1155 - (_DWORD)v1159) << v1161;
            v1160 = 1;
            v1156 -= v1159 << 56;
          }
          else
          {
            v1160 = 0;
            v1161 = vpx_norm[v1159];
            v246 = (_DWORD)v1159 << v1161;
          }
          v1162 = v1062 | v1139 | v1146 | v1153;
          v247 = v1156 << v1161;
          v248 = v1157 - v1161;
          v922 = v1162 + v1160 + 35;
LABEL_521:
          v250 = v1247;
LABEL_522:
          v249 = ((__int16)v30 * (uint64_t)v922) >> v1231;
          if ((v248 & 0x80000000) == 0)
            goto LABEL_109;
          goto LABEL_523;
        }
        v1065 = 0;
        v1066 = 0;
        v1067 = v1053 - v1054;
        v1068 = vpx_norm[v1067];
        v246 = v1067 << v1068;
        v247 = (v805 - (v1054 << 56)) << v1068;
        v248 = v806 - v1068;
        v250 = v1247;
        while (2)
        {
          v1071 = v1233[v1065];
          if ((v248 & 0x80000000) != 0)
          {
            *(_QWORD *)v10 = v247;
            *(_DWORD *)(v10 + 12) = v248;
            v1072 = *(unint64_t **)(v10 + 24);
            v1073 = *(_QWORD *)(v10 + 16) - (_QWORD)v1072;
            v1074 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
            if (v1074)
            {
              if (v1073 >= 9)
                v1075 = 9;
              else
                v1075 = *(_QWORD *)(v10 + 16) - (_QWORD)v1072;
              v1076 = v246;
              v1077 = v30;
              v1074(*(_QWORD *)(v10 + 40), v1072, v1236, v1075);
              v243 = 2 * v1247;
              v30 = v1077;
              v246 = v1076;
              v29.i64[0] = 0x7F0000007FLL;
              v29.i64[1] = 0x7F0000007FLL;
              v28.i64[0] = 0x800000008;
              v28.i64[1] = 0x800000008;
              v27 = v1237;
              v22 = v1238;
              v16 = v1239;
              v14 = v1240;
              v12 = v1241;
              a7 = v1242;
              a8 = v1243;
              v1072 = (unint64_t *)(a9 + 48);
              v250 = v1247;
            }
            v1078 = 8 * v1073;
            v1079 = 48 - v248;
            if (8 * v1073 >= 0x41)
            {
              v1080 = (v1079 & 0xFFFFFFF8) + 8;
              v1081 = v1080 + v248;
              v1082 = (unint64_t *)((char *)v1072 + (v1080 >> 3));
              v10 = a9;
              v247 = (bswap64(*v1072) >> (56 - (v1079 & 0xF8u)) << (v1079 & 7)) | *(_QWORD *)a9;
              goto LABEL_489;
            }
            v1083 = 56 - v248 - v1078;
            if (v1083 < 0)
              v1081 = v248;
            else
              v1081 = v248 + 0x40000000;
            if (v1078)
              v1084 = 1;
            else
              v1084 = v1083 <= -1;
            v10 = a9;
            if (v1084 && (v1085 = v1083 & ~(v1083 >> 31), v1079 >= v1085))
            {
              v1086 = v1085 - 1;
              if (v1085 - 1 >= (int)(40 - v248))
                v1086 = 40 - v248;
              v1087 = 47 - v248 - v1086;
              if (v1087 < 0x78)
              {
                v1082 = v1072;
                goto LABEL_488;
              }
              v1088 = (v1087 >> 3) + 1;
              v1089 = (int8x16_t)v247;
              v1090 = 0uLL;
              v1091 = (int32x4_t)v1081;
              v1092 = vdupq_n_s32(v1079);
              v1093 = vaddq_s32(v1092, (int32x4_t)xmmword_208F3A6C0);
              v1082 = (unint64_t *)((char *)v1072 + (v1088 & 0x3FFFFFF0));
              v1094 = vaddq_s32(v1092, (int32x4_t)xmmword_208F3A6D0);
              v1079 -= 8 * (v1088 & 0x3FFFFFF0);
              v1095 = vaddq_s32(v1092, (int32x4_t)xmmword_208F3A6A0);
              v1096 = vaddq_s32(v1092, (int32x4_t)xmmword_208F3A6B0);
              v1097 = v1088 & 0x3FFFFFF0;
              v1098 = (uint8x16_t *)v1072;
              v1099 = 0uLL;
              v1100 = 0uLL;
              v1101 = 0uLL;
              v1102 = 0uLL;
              v1103 = 0uLL;
              v1104 = 0uLL;
              v1105 = 0uLL;
              v1106 = 0uLL;
              v1107 = 0uLL;
              do
              {
                v1108 = *v1098++;
                v1109 = vmovl_high_u8(v1108);
                v1110 = vmovl_high_u16(v1109);
                v1111.i64[0] = v1110.u32[0];
                v1111.i64[1] = v1110.u32[1];
                v1112 = v1111;
                v1113 = vmovl_u16(*(uint16x4_t *)v1109.i8);
                v1111.i64[0] = v1113.u32[2];
                v1111.i64[1] = v1113.u32[3];
                v1114 = v1111;
                v1115 = vmovl_u8(*(uint8x8_t *)v1108.i8);
                v1116 = vmovl_high_u16(v1115);
                v1111.i64[0] = v1116.u32[2];
                v1111.i64[1] = v1116.u32[3];
                v1117 = v1111;
                v1111.i64[0] = v1110.u32[2];
                v1111.i64[1] = v1110.u32[3];
                v1118 = v1111;
                v1111.i64[0] = v1113.u32[0];
                v1111.i64[1] = v1113.u32[1];
                v1119 = v1111;
                v1111.i64[0] = v1116.u32[0];
                v1111.i64[1] = v1116.u32[1];
                v1120 = v1111;
                v1121 = vmovl_u16(*(uint16x4_t *)v1115.i8);
                v1111.i64[0] = v1121.u32[2];
                v1111.i64[1] = v1121.u32[3];
                v1122 = v1111;
                v1111.i64[0] = v1121.u32[0];
                v1111.i64[1] = v1121.u32[1];
                v1123 = v1111;
                v1111.i64[0] = v1096.u32[0];
                v1111.i64[1] = v1096.u32[1];
                v1124 = (int8x16_t)vshlq_u64(v1123, v1111);
                v1111.i64[0] = v1096.u32[2];
                v1111.i64[1] = v1096.u32[3];
                v1125 = (int8x16_t)vshlq_u64(v1122, v1111);
                v1111.i64[0] = v1095.u32[0];
                v1111.i64[1] = v1095.u32[1];
                v1126 = (int8x16_t)vshlq_u64(v1120, v1111);
                v1111.i64[0] = v1094.u32[0];
                v1111.i64[1] = v1094.u32[1];
                v1127 = (int8x16_t)vshlq_u64(v1119, v1111);
                v1111.i64[0] = v1093.u32[2];
                v1111.i64[1] = v1093.u32[3];
                v1128 = (int8x16_t)vshlq_u64(v1118, v1111);
                v1111.i64[0] = v1095.u32[2];
                v1111.i64[1] = v1095.u32[3];
                v1129 = (int8x16_t)vshlq_u64(v1117, v1111);
                v1111.i64[0] = v1094.u32[2];
                v1111.i64[1] = v1094.u32[3];
                v1130 = (int8x16_t)vshlq_u64(v1114, v1111);
                v1111.i64[0] = v1093.u32[0];
                v1111.i64[1] = v1093.u32[1];
                v1103 = vorrq_s8((int8x16_t)vshlq_u64(v1112, v1111), v1103);
                v1102 = vorrq_s8(v1130, v1102);
                v1100 = vorrq_s8(v1129, v1100);
                v1104 = vorrq_s8(v1128, v1104);
                v1101 = vorrq_s8(v1127, v1101);
                v1099 = vorrq_s8(v1126, v1099);
                v1090 = vorrq_s8(v1125, v1090);
                v1089 = vorrq_s8(v1124, v1089);
                v1091 = vaddq_s32(v1091, v28);
                v1105 = vaddq_s32(v1105, v28);
                v1106 = vaddq_s32(v1106, v28);
                v1107 = vaddq_s32(v1107, v28);
                v1096 = vaddq_s32(v1096, v29);
                v1095 = vaddq_s32(v1095, v29);
                v1094 = vaddq_s32(v1094, v29);
                v1093 = vaddq_s32(v1093, v29);
                v1097 -= 16;
              }
              while (v1097);
              v1081 = vaddvq_s32(vaddq_s32(vaddq_s32(v1091, v1106), vaddq_s32(v1105, v1107)));
              v1131 = vorrq_s8(vorrq_s8(vorrq_s8(v1089, v1101), vorrq_s8(v1099, v1103)), vorrq_s8(vorrq_s8(v1090, v1102), vorrq_s8(v1100, v1104)));
              v247 = (unint64_t)vorr_s8(*(int8x8_t *)v1131.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1131, v1131, 8uLL));
              v243 = 2 * v1247;
              if ((v1088 & 0x3FFFFFF0) != v1088)
              {
                do
                {
LABEL_488:
                  v1081 += 8;
                  v1132 = *(unsigned __int8 *)v1082;
                  v1082 = (unint64_t *)((char *)v1082 + 1);
                  v247 |= (unint64_t)v1132 << v1079;
                  v1079 -= 8;
                }
                while (v1079 >= v1085);
              }
            }
            else
            {
              v1082 = v1072;
            }
LABEL_489:
            *(_QWORD *)(v10 + 24) += (char *)v1082 - (char *)v1072;
            *(_QWORD *)v10 = v247;
            *(_DWORD *)(v10 + 12) = v1081;
            v248 = v1081;
          }
          v1133 = (unint64_t)((v246 - 1) * v1071 + 256) >> 8;
          if (v247 < v1133 << 56)
          {
            v1069 = 0;
            v1070 = vpx_norm[v1133];
            v246 = (_DWORD)v1133 << v1070;
          }
          else
          {
            v1070 = vpx_norm[(v246 - v1133)];
            v246 = (v246 - (_DWORD)v1133) << v1070;
            v1069 = 1;
            v247 -= v1133 << 56;
          }
          v247 <<= v1070;
          v248 -= v1070;
          v1066 = v1069 | (2 * v1066);
          if (++v1065 == v1232)
          {
            v922 = v1066 + 67;
            goto LABEL_522;
          }
          continue;
        }
      }
      v326 = vpx_norm[v324];
      v327 = v259 << v326;
      v328 = v260 - v326;
      v329 = v261[1];
      if (((v260 - v326) & 0x80000000) != 0)
      {
        *(_QWORD *)v10 = v327;
        *(_DWORD *)(v10 + 12) = v328;
        v330 = *(unint64_t **)(v10 + 24);
        v331 = *(_QWORD *)(v10 + 16) - (_QWORD)v330;
        v332 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
        if (v332)
        {
          if (v331 >= 9)
            v333 = 9;
          else
            v333 = *(_QWORD *)(v10 + 16) - (_QWORD)v330;
          v334 = v30;
          v332(*(_QWORD *)(v10 + 40), v330, v1236, v333);
          v243 = 2 * v1247;
          LOWORD(v30) = v334;
          v29.i64[0] = 0x7F0000007FLL;
          v29.i64[1] = 0x7F0000007FLL;
          v28.i64[0] = 0x800000008;
          v28.i64[1] = 0x800000008;
          v27 = v1237;
          v22 = v1238;
          v16 = v1239;
          v14 = v1240;
          v12 = v1241;
          a7 = v1242;
          a8 = v1243;
          v330 = (unint64_t *)(a9 + 48);
        }
        v335 = 8 * v331;
        v336 = 48 - v328;
        if (8 * v331 < 0x41)
        {
          v353 = 56 - v335 - v328;
          if (v353 >= 0)
            v328 += 0x40000000;
          if (v335)
            v354 = 1;
          else
            v354 = v353 <= -1;
          v10 = a9;
          if (v354 && (v355 = v353 & ~(v353 >> 31), v336 >= v355))
          {
            v356 = v326 - v260 + 40;
            if (v356 >= v355 - 1)
              v356 = v355 - 1;
            v357 = v326 - v260 - v356 + 47;
            v338 = v330;
            v358 = v336;
            if (v357 < 0x78)
              goto LABEL_566;
            v359 = (v357 >> 3) + 1;
            v360 = (int8x16_t)v327;
            v361 = 0uLL;
            v362 = (int32x4_t)v328;
            v363 = vdupq_n_s32(v336);
            v364 = vaddq_s32(v363, (int32x4_t)xmmword_208F3A6C0);
            v338 = (unint64_t *)((char *)v330 + (v359 & 0x3FFFFFF0));
            v365 = vaddq_s32(v363, (int32x4_t)xmmword_208F3A6D0);
            v358 = v336 - 8 * (v359 & 0x3FFFFFF0);
            v366 = vaddq_s32(v363, (int32x4_t)xmmword_208F3A6A0);
            v367 = vaddq_s32(v363, (int32x4_t)xmmword_208F3A6B0);
            v368 = v359 & 0x3FFFFFF0;
            v369 = (uint8x16_t *)v330;
            v370 = 0uLL;
            v371 = 0uLL;
            v372 = 0uLL;
            v373 = 0uLL;
            v374 = 0uLL;
            v375 = 0uLL;
            v376 = 0uLL;
            v377 = 0uLL;
            v378 = 0uLL;
            do
            {
              v379 = *v369++;
              v380 = vmovl_high_u8(v379);
              v381 = vmovl_high_u16(v380);
              v382.i64[0] = v381.u32[0];
              v382.i64[1] = v381.u32[1];
              v383 = v382;
              v384 = vmovl_u16(*(uint16x4_t *)v380.i8);
              v382.i64[0] = v384.u32[2];
              v382.i64[1] = v384.u32[3];
              v385 = v382;
              v386 = vmovl_u8(*(uint8x8_t *)v379.i8);
              v387 = vmovl_high_u16(v386);
              v382.i64[0] = v387.u32[2];
              v382.i64[1] = v387.u32[3];
              v388 = v382;
              v382.i64[0] = v381.u32[2];
              v382.i64[1] = v381.u32[3];
              v389 = v382;
              v382.i64[0] = v384.u32[0];
              v382.i64[1] = v384.u32[1];
              v390 = v382;
              v382.i64[0] = v387.u32[0];
              v382.i64[1] = v387.u32[1];
              v391 = v382;
              v392 = vmovl_u16(*(uint16x4_t *)v386.i8);
              v382.i64[0] = v392.u32[2];
              v382.i64[1] = v392.u32[3];
              v393 = v382;
              v382.i64[0] = v392.u32[0];
              v382.i64[1] = v392.u32[1];
              v394 = v382;
              v382.i64[0] = v367.u32[0];
              v382.i64[1] = v367.u32[1];
              v395 = (int8x16_t)vshlq_u64(v394, v382);
              v382.i64[0] = v367.u32[2];
              v382.i64[1] = v367.u32[3];
              v396 = (int8x16_t)vshlq_u64(v393, v382);
              v382.i64[0] = v366.u32[0];
              v382.i64[1] = v366.u32[1];
              v397 = (int8x16_t)vshlq_u64(v391, v382);
              v382.i64[0] = v365.u32[0];
              v382.i64[1] = v365.u32[1];
              v398 = (int8x16_t)vshlq_u64(v390, v382);
              v382.i64[0] = v364.u32[2];
              v382.i64[1] = v364.u32[3];
              v399 = (int8x16_t)vshlq_u64(v389, v382);
              v382.i64[0] = v366.u32[2];
              v382.i64[1] = v366.u32[3];
              v400 = (int8x16_t)vshlq_u64(v388, v382);
              v382.i64[0] = v365.u32[2];
              v382.i64[1] = v365.u32[3];
              v401 = (int8x16_t)vshlq_u64(v385, v382);
              v382.i64[0] = v364.u32[0];
              v382.i64[1] = v364.u32[1];
              v374 = vorrq_s8((int8x16_t)vshlq_u64(v383, v382), v374);
              v373 = vorrq_s8(v401, v373);
              v371 = vorrq_s8(v400, v371);
              v375 = vorrq_s8(v399, v375);
              v372 = vorrq_s8(v398, v372);
              v370 = vorrq_s8(v397, v370);
              v361 = vorrq_s8(v396, v361);
              v360 = vorrq_s8(v395, v360);
              v362 = vaddq_s32(v362, v28);
              v376 = vaddq_s32(v376, v28);
              v377 = vaddq_s32(v377, v28);
              v378 = vaddq_s32(v378, v28);
              v367 = vaddq_s32(v367, v29);
              v366 = vaddq_s32(v366, v29);
              v365 = vaddq_s32(v365, v29);
              v364 = vaddq_s32(v364, v29);
              v368 -= 16;
            }
            while (v368);
            v328 = vaddvq_s32(vaddq_s32(vaddq_s32(v362, v377), vaddq_s32(v376, v378)));
            v402 = vorrq_s8(vorrq_s8(vorrq_s8(v360, v372), vorrq_s8(v370, v374)), vorrq_s8(vorrq_s8(v361, v373), vorrq_s8(v371, v375)));
            v327 = (unint64_t)vorr_s8(*(int8x8_t *)v402.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v402, v402, 8uLL));
            v243 = 2 * v1247;
            if ((v359 & 0x3FFFFFF0) != v359)
            {
LABEL_566:
              do
              {
                v328 += 8;
                v403 = *(unsigned __int8 *)v338;
                v338 = (unint64_t *)((char *)v338 + 1);
                v327 |= (unint64_t)v403 << v358;
                v358 -= 8;
              }
              while (v358 >= v355);
            }
          }
          else
          {
            v338 = v330;
          }
        }
        else
        {
          v337 = (v336 & 0xFFFFFFF8) + 8;
          v328 += v337;
          v338 = (unint64_t *)((char *)v330 + (v337 >> 3));
          v10 = a9;
          v327 = (bswap64(*v330) >> (56 - (v336 & 0xF8u)) << (v336 & 7)) | *(_QWORD *)a9;
        }
        *(_QWORD *)(v10 + 24) += (char *)v338 - (char *)v330;
        *(_QWORD *)v10 = v327;
        *(_DWORD *)(v10 + 12) = v328;
      }
      v455 = (_DWORD)v324 << v326;
      v456 = (unint64_t)((((_DWORD)v324 << v326) - 1) * v329 + 256) >> 8;
      if (v327 >= v456 << 56)
      {
        v458 = v455 - v456;
        v459 = vpx_norm[(v455 - v456)];
        v460 = (v327 - (v456 << 56)) << v459;
        v461 = v328 - v459;
        v1248[*(__int16 *)(a7 + v243)] = 3;
        v462 = v261[2];
        if (((v328 - v459) & 0x80000000) != 0)
        {
          *(_QWORD *)v10 = v460;
          *(_DWORD *)(v10 + 12) = v461;
          v463 = *(unint64_t **)(v10 + 24);
          v464 = *(_QWORD *)(v10 + 16) - (_QWORD)v463;
          v465 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
          if (v465)
          {
            if (v464 >= 9)
              v466 = 9;
            else
              v466 = *(_QWORD *)(v10 + 16) - (_QWORD)v463;
            v467 = v30;
            v465(*(_QWORD *)(v10 + 40), v463, v1236, v466);
            v243 = 2 * v1247;
            LOWORD(v30) = v467;
            v29.i64[0] = 0x7F0000007FLL;
            v29.i64[1] = 0x7F0000007FLL;
            v28.i64[0] = 0x800000008;
            v28.i64[1] = 0x800000008;
            v27 = v1237;
            v22 = v1238;
            v16 = v1239;
            v14 = v1240;
            v12 = v1241;
            a7 = v1242;
            a8 = v1243;
            v463 = (unint64_t *)(a9 + 48);
          }
          v468 = 8 * v464;
          v469 = 48 - v461;
          if (8 * v464 < 0x41)
          {
            v472 = 56 - v468 - v461;
            if (v472 >= 0)
              v461 += 0x40000000;
            if (v468)
              v473 = 1;
            else
              v473 = v472 <= -1;
            v10 = a9;
            if (v473 && (v474 = v472 & ~(v472 >> 31), v469 >= v474))
            {
              v475 = v459 - v328 + 40;
              if (v475 >= v474 - 1)
                v475 = v474 - 1;
              v476 = v459 - v328 - v475 + 47;
              v471 = v463;
              v477 = v469;
              v250 = v1247;
              if (v476 < 0x78)
                goto LABEL_567;
              v478 = (v476 >> 3) + 1;
              v479 = (int8x16_t)v460;
              v480 = 0uLL;
              v481 = (int32x4_t)v461;
              v482 = vdupq_n_s32(v469);
              v483 = vaddq_s32(v482, (int32x4_t)xmmword_208F3A6C0);
              v471 = (unint64_t *)((char *)v463 + (v478 & 0x3FFFFFF0));
              v484 = vaddq_s32(v482, (int32x4_t)xmmword_208F3A6D0);
              v477 = v469 - 8 * (v478 & 0x3FFFFFF0);
              v485 = vaddq_s32(v482, (int32x4_t)xmmword_208F3A6A0);
              v486 = vaddq_s32(v482, (int32x4_t)xmmword_208F3A6B0);
              v487 = v478 & 0x3FFFFFF0;
              v488 = (uint8x16_t *)v463;
              v489 = 0uLL;
              v490 = 0uLL;
              v491 = 0uLL;
              v492 = 0uLL;
              v493 = 0uLL;
              v494 = 0uLL;
              v495 = 0uLL;
              v496 = 0uLL;
              v497 = 0uLL;
              do
              {
                v498 = *v488++;
                v499 = vmovl_high_u8(v498);
                v500 = vmovl_high_u16(v499);
                v501.i64[0] = v500.u32[0];
                v501.i64[1] = v500.u32[1];
                v502 = v501;
                v503 = vmovl_u16(*(uint16x4_t *)v499.i8);
                v501.i64[0] = v503.u32[2];
                v501.i64[1] = v503.u32[3];
                v504 = v501;
                v505 = vmovl_u8(*(uint8x8_t *)v498.i8);
                v506 = vmovl_high_u16(v505);
                v501.i64[0] = v506.u32[2];
                v501.i64[1] = v506.u32[3];
                v507 = v501;
                v501.i64[0] = v500.u32[2];
                v501.i64[1] = v500.u32[3];
                v508 = v501;
                v501.i64[0] = v503.u32[0];
                v501.i64[1] = v503.u32[1];
                v509 = v501;
                v501.i64[0] = v506.u32[0];
                v501.i64[1] = v506.u32[1];
                v510 = v501;
                v511 = vmovl_u16(*(uint16x4_t *)v505.i8);
                v501.i64[0] = v511.u32[2];
                v501.i64[1] = v511.u32[3];
                v512 = v501;
                v501.i64[0] = v511.u32[0];
                v501.i64[1] = v511.u32[1];
                v513 = v501;
                v501.i64[0] = v486.u32[0];
                v501.i64[1] = v486.u32[1];
                v514 = (int8x16_t)vshlq_u64(v513, v501);
                v501.i64[0] = v486.u32[2];
                v501.i64[1] = v486.u32[3];
                v515 = (int8x16_t)vshlq_u64(v512, v501);
                v501.i64[0] = v485.u32[0];
                v501.i64[1] = v485.u32[1];
                v516 = (int8x16_t)vshlq_u64(v510, v501);
                v501.i64[0] = v484.u32[0];
                v501.i64[1] = v484.u32[1];
                v517 = (int8x16_t)vshlq_u64(v509, v501);
                v501.i64[0] = v483.u32[2];
                v501.i64[1] = v483.u32[3];
                v518 = (int8x16_t)vshlq_u64(v508, v501);
                v501.i64[0] = v485.u32[2];
                v501.i64[1] = v485.u32[3];
                v519 = (int8x16_t)vshlq_u64(v507, v501);
                v501.i64[0] = v484.u32[2];
                v501.i64[1] = v484.u32[3];
                v520 = (int8x16_t)vshlq_u64(v504, v501);
                v501.i64[0] = v483.u32[0];
                v501.i64[1] = v483.u32[1];
                v493 = vorrq_s8((int8x16_t)vshlq_u64(v502, v501), v493);
                v492 = vorrq_s8(v520, v492);
                v490 = vorrq_s8(v519, v490);
                v494 = vorrq_s8(v518, v494);
                v491 = vorrq_s8(v517, v491);
                v489 = vorrq_s8(v516, v489);
                v480 = vorrq_s8(v515, v480);
                v479 = vorrq_s8(v514, v479);
                v481 = vaddq_s32(v481, v28);
                v495 = vaddq_s32(v495, v28);
                v496 = vaddq_s32(v496, v28);
                v497 = vaddq_s32(v497, v28);
                v486 = vaddq_s32(v486, v29);
                v485 = vaddq_s32(v485, v29);
                v484 = vaddq_s32(v484, v29);
                v483 = vaddq_s32(v483, v29);
                v487 -= 16;
              }
              while (v487);
              v461 = vaddvq_s32(vaddq_s32(vaddq_s32(v481, v496), vaddq_s32(v495, v497)));
              v521 = vorrq_s8(vorrq_s8(vorrq_s8(v479, v491), vorrq_s8(v489, v493)), vorrq_s8(vorrq_s8(v480, v492), vorrq_s8(v490, v494)));
              v460 = (unint64_t)vorr_s8(*(int8x8_t *)v521.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v521, v521, 8uLL));
              v243 = 2 * v1247;
              if ((v478 & 0x3FFFFFF0) != v478)
              {
LABEL_567:
                do
                {
                  v461 += 8;
                  v522 = *(unsigned __int8 *)v471;
                  v471 = (unint64_t *)((char *)v471 + 1);
                  v460 |= (unint64_t)v522 << v477;
                  v477 -= 8;
                }
                while (v477 >= v474);
              }
            }
            else
            {
              v471 = v463;
              v250 = v1247;
            }
          }
          else
          {
            v470 = (v469 & 0xFFFFFFF8) + 8;
            v461 += v470;
            v471 = (unint64_t *)((char *)v463 + (v470 >> 3));
            v10 = a9;
            v250 = v1247;
            v460 = (bswap64(*v463) >> (56 - (v469 & 0xF8u)) << (v469 & 7)) | *(_QWORD *)a9;
          }
          *(_QWORD *)(v10 + 24) += (char *)v471 - (char *)v463;
          *(_QWORD *)v10 = v460;
          *(_DWORD *)(v10 + 12) = v461;
        }
        else
        {
          v250 = v1247;
        }
        v654 = (unint64_t)(((v458 << v459) - 1) * v462 + 256) >> 8;
        v655 = v460 - (v654 << 56);
        if (v460 >= v654 << 56)
        {
          v658 = (v458 << v459) - v654;
          v656 = vpx_norm[v658];
          v246 = v658 << v656;
          v657 = 4;
          v460 = v655;
        }
        else
        {
          v656 = vpx_norm[v654];
          v246 = (_DWORD)v654 << v656;
          v657 = 3;
        }
        v247 = v460 << v656;
        v248 = v461 - v656;
        LODWORD(v249) = (v657 * (__int16)v30) >> v1231;
        if (((v461 - v656) & 0x80000000) == 0)
        {
LABEL_109:
          v251 = (unint64_t)((v246 << 7) + 128) >> 8;
          v252 = v247 - (v251 << 56);
          if (v247 >= v251 << 56)
            goto LABEL_549;
          goto LABEL_110;
        }
      }
      else
      {
        v457 = vpx_norm[v456];
        v246 = (_DWORD)v456 << v457;
        v247 = v327 << v457;
        v248 = v328 - v457;
        v1248[*(__int16 *)(a7 + v243)] = 2;
        LODWORD(v249) = (2 * (__int16)v30) >> v1231;
        v250 = v1247;
        if ((v248 & 0x80000000) == 0)
          goto LABEL_109;
      }
    }
    else
    {
      v245 = vpx_norm[v242];
      if (v12)
        ++*(_DWORD *)(v22 + 96 * v31 + 16 * v1230 + 4);
      v246 = (_DWORD)v242 << v245;
      v247 = v174 << v245;
      v248 = v175 - v245;
      v1248[*(__int16 *)(a7 + 2 * v1247)] = 1;
      LODWORD(v249) = (__int16)v30 >> v1231;
      v250 = v1247;
      if ((v248 & 0x80000000) == 0)
        goto LABEL_109;
    }
LABEL_523:
    *(_QWORD *)v10 = v247;
    *(_DWORD *)(v10 + 12) = v248;
    v1166 = *(unint64_t **)(v10 + 24);
    v1167 = *(_QWORD *)(v10 + 16) - (_QWORD)v1166;
    v1168 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v10 + 32);
    if (v1168)
    {
      if (v1167 >= 9)
        v1169 = 9;
      else
        v1169 = *(_QWORD *)(v10 + 16) - (_QWORD)v1166;
      v1168(*(_QWORD *)(v10 + 40), v1166, v1236, v1169);
      v243 = 2 * v1247;
      v29.i64[0] = 0x7F0000007FLL;
      v29.i64[1] = 0x7F0000007FLL;
      v28.i64[0] = 0x800000008;
      v28.i64[1] = 0x800000008;
      v27 = v1237;
      v22 = v1238;
      v16 = v1239;
      v14 = v1240;
      v12 = v1241;
      a7 = v1242;
      a8 = v1243;
      v1166 = (unint64_t *)(a9 + 48);
    }
    v1170 = 8 * v1167;
    v1171 = 48 - v248;
    if (8 * v1167 >= 0x41)
    {
      v1172 = (v1171 & 0xFFFFFFF8) + 8;
      v1173 = v1172 + v248;
      v1174 = (unint64_t *)((char *)v1166 + (v1172 >> 3));
      v10 = a9;
      v247 = (bswap64(*v1166) >> (56 - (v1171 & 0xF8u)) << (v1171 & 7)) | *(_QWORD *)a9;
      goto LABEL_548;
    }
    v1175 = 56 - v248 - v1170;
    if (v1175 < 0)
      v1173 = v248;
    else
      v1173 = v248 + 0x40000000;
    if (v1170)
      v1176 = 1;
    else
      v1176 = v1175 <= -1;
    v10 = a9;
    if (!v1176 || (v1177 = v1175 & ~(v1175 >> 31), v1171 < v1177))
    {
      v1174 = v1166;
      goto LABEL_548;
    }
    v1178 = v1177 - 1;
    if (v1177 - 1 >= (int)(40 - v248))
      v1178 = 40 - v248;
    v1179 = 47 - v248 - v1178;
    if (v1179 < 0x78)
    {
      v1174 = v1166;
      do
      {
LABEL_547:
        v1173 += 8;
        v1224 = *(unsigned __int8 *)v1174;
        v1174 = (unint64_t *)((char *)v1174 + 1);
        v247 |= (unint64_t)v1224 << v1171;
        v1171 -= 8;
      }
      while (v1171 >= v1177);
      goto LABEL_548;
    }
    v1180 = (v1179 >> 3) + 1;
    v1181 = (int8x16_t)v247;
    v1182 = 0uLL;
    v1183 = (int32x4_t)v1173;
    v1184 = vdupq_n_s32(v1171);
    v1185 = vaddq_s32(v1184, (int32x4_t)xmmword_208F3A6C0);
    v1174 = (unint64_t *)((char *)v1166 + (v1180 & 0x3FFFFFF0));
    v1186 = vaddq_s32(v1184, (int32x4_t)xmmword_208F3A6D0);
    v1171 -= 8 * (v1180 & 0x3FFFFFF0);
    v1187 = vaddq_s32(v1184, (int32x4_t)xmmword_208F3A6A0);
    v1188 = vaddq_s32(v1184, (int32x4_t)xmmword_208F3A6B0);
    v1189 = v1180 & 0x3FFFFFF0;
    v1190 = (uint8x16_t *)v1166;
    v1191 = 0uLL;
    v1192 = 0uLL;
    v1193 = 0uLL;
    v1194 = 0uLL;
    v1195 = 0uLL;
    v1196 = 0uLL;
    v1197 = 0uLL;
    v1198 = 0uLL;
    v1199 = 0uLL;
    do
    {
      v1200 = *v1190++;
      v1201 = vmovl_high_u8(v1200);
      v1202 = vmovl_high_u16(v1201);
      v1203.i64[0] = v1202.u32[0];
      v1203.i64[1] = v1202.u32[1];
      v1204 = v1203;
      v1205 = vmovl_u16(*(uint16x4_t *)v1201.i8);
      v1203.i64[0] = v1205.u32[2];
      v1203.i64[1] = v1205.u32[3];
      v1206 = v1203;
      v1207 = vmovl_u8(*(uint8x8_t *)v1200.i8);
      v1208 = vmovl_high_u16(v1207);
      v1203.i64[0] = v1208.u32[2];
      v1203.i64[1] = v1208.u32[3];
      v1209 = v1203;
      v1203.i64[0] = v1202.u32[2];
      v1203.i64[1] = v1202.u32[3];
      v1210 = v1203;
      v1203.i64[0] = v1205.u32[0];
      v1203.i64[1] = v1205.u32[1];
      v1211 = v1203;
      v1203.i64[0] = v1208.u32[0];
      v1203.i64[1] = v1208.u32[1];
      v1212 = v1203;
      v1213 = vmovl_u16(*(uint16x4_t *)v1207.i8);
      v1203.i64[0] = v1213.u32[2];
      v1203.i64[1] = v1213.u32[3];
      v1214 = v1203;
      v1203.i64[0] = v1213.u32[0];
      v1203.i64[1] = v1213.u32[1];
      v1215 = v1203;
      v1203.i64[0] = v1188.u32[0];
      v1203.i64[1] = v1188.u32[1];
      v1216 = (int8x16_t)vshlq_u64(v1215, v1203);
      v1203.i64[0] = v1188.u32[2];
      v1203.i64[1] = v1188.u32[3];
      v1217 = (int8x16_t)vshlq_u64(v1214, v1203);
      v1203.i64[0] = v1187.u32[0];
      v1203.i64[1] = v1187.u32[1];
      v1218 = (int8x16_t)vshlq_u64(v1212, v1203);
      v1203.i64[0] = v1186.u32[0];
      v1203.i64[1] = v1186.u32[1];
      v1219 = (int8x16_t)vshlq_u64(v1211, v1203);
      v1203.i64[0] = v1185.u32[2];
      v1203.i64[1] = v1185.u32[3];
      v1220 = (int8x16_t)vshlq_u64(v1210, v1203);
      v1203.i64[0] = v1187.u32[2];
      v1203.i64[1] = v1187.u32[3];
      v1221 = (int8x16_t)vshlq_u64(v1209, v1203);
      v1203.i64[0] = v1186.u32[2];
      v1203.i64[1] = v1186.u32[3];
      v1222 = (int8x16_t)vshlq_u64(v1206, v1203);
      v1203.i64[0] = v1185.u32[0];
      v1203.i64[1] = v1185.u32[1];
      v1195 = vorrq_s8((int8x16_t)vshlq_u64(v1204, v1203), v1195);
      v1194 = vorrq_s8(v1222, v1194);
      v1192 = vorrq_s8(v1221, v1192);
      v1196 = vorrq_s8(v1220, v1196);
      v1193 = vorrq_s8(v1219, v1193);
      v1191 = vorrq_s8(v1218, v1191);
      v1182 = vorrq_s8(v1217, v1182);
      v1181 = vorrq_s8(v1216, v1181);
      v1183 = vaddq_s32(v1183, v28);
      v1197 = vaddq_s32(v1197, v28);
      v1198 = vaddq_s32(v1198, v28);
      v1199 = vaddq_s32(v1199, v28);
      v1188 = vaddq_s32(v1188, v29);
      v1187 = vaddq_s32(v1187, v29);
      v1186 = vaddq_s32(v1186, v29);
      v1185 = vaddq_s32(v1185, v29);
      v1189 -= 16;
    }
    while (v1189);
    v1173 = vaddvq_s32(vaddq_s32(vaddq_s32(v1183, v1198), vaddq_s32(v1197, v1199)));
    v1223 = vorrq_s8(vorrq_s8(vorrq_s8(v1181, v1193), vorrq_s8(v1191, v1195)), vorrq_s8(vorrq_s8(v1182, v1194), vorrq_s8(v1192, v1196)));
    v247 = (unint64_t)vorr_s8(*(int8x8_t *)v1223.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1223, v1223, 8uLL));
    v243 = 2 * v1247;
    if ((v1180 & 0x3FFFFFF0) != v1180)
      goto LABEL_547;
LABEL_548:
    *(_QWORD *)(v10 + 24) += (char *)v1174 - (char *)v1166;
    *(_QWORD *)v10 = v247;
    *(_DWORD *)(v10 + 12) = v1173;
    v248 = v1173;
    v251 = (unint64_t)((v246 << 7) + 128) >> 8;
    v252 = v247 - (v251 << 56);
    if (v247 >= v251 << 56)
    {
LABEL_549:
      v1225 = v246 - v251;
      v255 = vpx_norm[(v246 - v251)];
      v254 = v1225 << v255;
      v25 = v252 << v255;
      LODWORD(v249) = -(int)v249;
      goto LABEL_550;
    }
LABEL_110:
    v253 = vpx_norm[v251];
    v254 = (_DWORD)v251 << v253;
    v25 = v247 << v253;
    v255 = v253;
LABEL_550:
    *(_DWORD *)(a3 + 4 * *(__int16 *)(a7 + v243)) = v249;
    v9 = v250 + 1;
    v24 = v248 - v255;
    v11 = (v1248[*(__int16 *)(a8 + 4 * (_DWORD)v9)]
         + (unint64_t)v1248[*(__int16 *)(a8 + 4 * v9 + 2)]
         + 1) >> 1;
    a5 = v27;
    v23 = v254;
    if ((int)v9 >= (int)v14)
      goto LABEL_551;
  }
  v1227 = vpx_norm[v96];
  v23 = (_DWORD)v96 << v1227;
  v25 <<= v1227;
  v24 -= v1227;
  if (v12)
  {
    v1228 = v22 + 96 * v31 + 16 * v11;
    ++*(_DWORD *)(v1228 + 12);
  }
LABEL_551:
  *(_QWORD *)v10 = v25;
  *(_DWORD *)(v10 + 8) = v23;
  *(_DWORD *)(v10 + 12) = v24;
  return v9;
}

uint64_t vp9_diamond_search_sad_neon(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, unsigned int *a5, int a6, unsigned int a7, _DWORD *a8, uint64_t a9, __int16 *a10)
{
  int v11;
  int v12;
  int v13;
  const float *v14;
  float32x4_t v15;
  int v16;
  const float *v17;
  float32x4_t v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int16x8_t v32;
  int16x8_t v34;
  int32x4_t v35;
  uint64_t v36;
  int16x8_t v37;
  unint64_t v38;
  int16x8_t v39;
  int64x2_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  int v45;
  int8x16_t *v46;
  int16x8_t *v47;
  int16x8_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int64x2_t v51;
  int64x2_t v52;
  uint64_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int v56;
  int32x4_t v57;
  int32x4_t v58;
  unsigned int v59;
  int8x16_t v60;
  int16x8_t v62;
  int8x16_t v63;
  int64x2_t v64;
  int16x8_t v65;
  int8x16_t v66;
  uint64_t v67;
  uint64_t v68;
  int16x8_t v69;
  int32x4_t v70;
  int16x8_t v71;
  uint64_t v72;
  int16x8_t v73;
  int8x16_t v74;
  int8x16_t v75;
  uint64_t v76;
  unsigned int v77;
  _DWORD *v78;
  unsigned int *v79;
  uint64_t v80;
  unsigned int v81;
  int16x8_t v82;
  int32x4_t v83;
  _OWORD v84[2];
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v11 = *(unsigned __int16 *)(a1 + 25860);
  v12 = *(_DWORD *)(a1 + 25852);
  v13 = *(unsigned __int16 *)(a1 + 25856);
  v14 = (const float *)(a1 + 25784);
  v15 = vld1q_dup_f32(v14);
  v16 = *(_DWORD *)(a1 + 25848);
  v17 = (const float *)(a1 + 25788);
  v18 = vld1q_dup_f32(v17);
  v19 = *(_DWORD *)(a2 + 1056);
  v20 = *(_DWORD *)(a2 + 1060) - a6;
  v21 = *a10;
  v22 = a10[1];
  v23 = *a3;
  v24 = (__int16)a3[1];
  v25 = v23 | ((_DWORD)v24 << 16);
  v26 = *(_DWORD *)(a1 + 8224);
  v27 = *(unsigned int *)(a1 + 24952);
  v28 = *(_QWORD *)(a1 + 8216);
  v29 = *(_QWORD *)(a1 + 24944);
  *a8 = 0;
  if (v20 >= 1)
  {
    v30 = 0;
    v31 = 0;
    v32 = (int16x8_t)vdupq_n_s32(v11 | (v12 << 16));
    v34 = (int16x8_t)vdupq_n_s32(v13 | (v16 << 16));
    v35 = vdupq_n_s32(a7);
    v36 = v19 * a6;
    v37 = (int16x8_t)vdupq_n_s32((v22 << 13) & 0xFFFF0000 | (unsigned __int16)(v21 >> 3));
    v38 = v29 + (int)v27 * (__int16)v23 + v24;
    v39 = (int16x8_t)vdupq_n_s32(v25);
    v40 = vdupq_n_s64(v38);
    v41 = a2 + 8 * v36 + 368;
    v42 = a2 + 4 * v36;
    v43 = xmmword_208F071C0;
    v44 = v38;
    do
    {
      while (1)
      {
        if (*(int *)(a2 + 1056) >= 1)
        {
          v45 = 0;
          v46 = (int8x16_t *)(v41 + 8 * v31);
          v47 = (int16x8_t *)(v42 + 4 * v31);
          do
          {
            v83 = 0uLL;
            v82 = vaddq_s16(*v47, v39);
            v48 = vmaxq_s16(vminq_s16(v82, v32), v34);
            v49 = (int8x16_t)vceqq_s32((int32x4_t)v48, (int32x4_t)v82);
            if (vmaxvq_u32((uint32x4_t)v49))
            {
              v62 = vabsq_s16(vsubq_s16(v48, v37));
              v63 = (int8x16_t)vshrq_n_u32((uint32x4_t)vmvnq_s8(v49), 1uLL);
              v75 = (int8x16_t)v15;
              v50.i64[0] = v49.i32[0];
              v50.i64[1] = v49.i32[1];
              v51 = (int64x2_t)vandq_s8(v46[-1], v50);
              v50.i64[0] = v49.i32[2];
              v50.i64[1] = v49.i32[3];
              v52 = vaddq_s64((int64x2_t)vandq_s8(*v46, v50), v40);
              v84[0] = vaddq_s64(v51, v40);
              v84[1] = v52;
              v79 = a5;
              v80 = v28;
              v76 = a1;
              v81 = v26;
              v77 = a4;
              v78 = a8;
              v74 = (int8x16_t)v18;
              v73 = v32;
              v72 = a9;
              v70 = v35;
              v71 = v34;
              v69 = v37;
              v67 = v42;
              v68 = v41;
              v65 = v39;
              v66 = (int8x16_t)v43;
              v64 = v40;
              (*(void (**)(uint64_t, _QWORD, _OWORD *, uint64_t, int32x4_t *))(a9 + 8))(v28, v26, v84, v27, &v83);
              v40 = v64;
              v39 = v65;
              v43 = (__int128)v66;
              v37 = v69;
              v35 = v70;
              v34 = v71;
              v32 = v73;
              a5 = v79;
              v28 = v80;
              v27 = v27;
              v26 = v81;
              a1 = v76;
              a4 = v77;
              a8 = v78;
              v53 = *(_QWORD *)(v76 + 25800);
              v54 = vmovl_high_s16(v62);
              v50.i64[0] = v54.i32[2];
              v55 = vmovl_s16(*(int16x4_t *)v62.i8);
              v18 = (float32x4_t)v74;
              v15 = (float32x4_t)v75;
              v56 = *(_DWORD *)(v53 + 4 * v54.i32[1]) + *(_DWORD *)(v53 + 4 * v54.i32[0]);
              v54.i32[0] = *(_DWORD *)(v53 + 4 * v55.i32[1]) + *(_DWORD *)(v53 + 4 * v55.i32[0]);
              v54.i32[1] = *(_DWORD *)(v53 + 4 * v55.i32[3]) + *(_DWORD *)(v53 + 4 * v55.i32[2]);
              v42 = v67;
              v41 = v68;
              v54.i32[2] = v56;
              a9 = v72;
              v54.i32[3] = *(_DWORD *)(v53 + 4 * v54.i32[3]) + *(_DWORD *)(v53 + 4 * v50.i64[0]);
              v57.i64[0] = 0x10000000100;
              v57.i64[1] = 0x10000000100;
              v58 = (int32x4_t)vorrq_s8((int8x16_t)vsraq_n_s32(v83, vmlaq_s32(v57, vaddq_s32(v54, (int32x4_t)vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)v62), v75, v74)), v70), 9uLL), v63);
              v59 = vminvq_u32((uint32x4_t)v58);
              if (v59 < v77)
              {
                v60 = (int8x16_t)vceqq_s32(v58, vdupq_n_s32(v59));
                v60.i32[0] = vminvq_u32((uint32x4_t)vornq_s8(vandq_s8(v60, v66), v60));
                v25 = v82.u32[v60.u32[0]];
                v44 = *((_QWORD *)v84 + v60.u32[0]);
                a4 = v59;
              }
            }
            v45 += 4;
            v46 += 2;
            ++v47;
          }
          while (v45 < *(_DWORD *)(a2 + 1056));
          v31 += v45;
        }
        if (v44 == v38)
          break;
        v39 = (int16x8_t)vdupq_n_s32(v25);
        v40 = vdupq_n_s64(v44);
        if (++v30 == v20)
          goto LABEL_14;
      }
      ++*a8;
      v39 = (int16x8_t)vdupq_n_s32(v25);
      v40 = vdupq_n_s64(v44);
      ++v30;
    }
    while (v30 != v20);
  }
LABEL_14:
  *a5 = v25;
  return a4;
}

uint64_t vp9_diff_update_prob(uint64_t result, _BYTE *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t (*v27)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v28;
  signed int v29;
  signed int v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v37;
  signed int v38;
  signed int v39;
  unint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v45;
  signed int v46;
  signed int v47;
  unint64_t *v48;
  int v49;
  BOOL v50;
  int v51;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t (*v56)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v57;
  signed int v58;
  signed int v59;
  unint64_t *v60;
  int v61;
  BOOL v62;
  int v63;
  int v65;
  unsigned int v66;
  int v67;
  int8x16_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  uint64_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t v82;
  uint8x16_t *v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  uint8x16_t v90;
  uint16x8_t v91;
  uint32x4_t v92;
  uint64x2_t v93;
  uint64x2_t v94;
  uint32x4_t v95;
  uint64x2_t v96;
  uint16x8_t v97;
  uint32x4_t v98;
  uint64x2_t v99;
  uint64x2_t v100;
  uint64x2_t v101;
  uint64x2_t v102;
  uint32x4_t v103;
  uint64x2_t v104;
  uint64x2_t v105;
  int8x16_t v106;
  int8x16_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  unsigned int v114;
  int v115;
  BOOL v116;
  int v117;
  int v118;
  unsigned int v119;
  signed int v120;
  int8x16_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int8x16_t v124;
  int32x4_t v125;
  int32x4_t v126;
  int32x4_t v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  uint64_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  uint64_t v135;
  uint8x16_t *v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int32x4_t v140;
  int32x4_t v141;
  int32x4_t v142;
  uint8x16_t v143;
  uint16x8_t v144;
  uint32x4_t v145;
  uint64x2_t v146;
  uint64x2_t v147;
  uint32x4_t v148;
  uint64x2_t v149;
  uint16x8_t v150;
  uint32x4_t v151;
  uint64x2_t v152;
  uint64x2_t v153;
  uint64x2_t v154;
  uint64x2_t v155;
  uint32x4_t v156;
  uint64x2_t v157;
  uint64x2_t v158;
  int8x16_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  unsigned int v167;
  int v168;
  BOOL v169;
  int v170;
  int v171;
  unsigned int v172;
  signed int v173;
  int8x16_t v174;
  int32x4_t v175;
  int32x4_t v176;
  int8x16_t v177;
  int32x4_t v178;
  int32x4_t v179;
  int32x4_t v180;
  int32x4_t v181;
  int32x4_t v182;
  int32x4_t v183;
  uint64_t v184;
  int8x16_t v185;
  int8x16_t v186;
  int8x16_t v187;
  uint64_t v188;
  uint8x16_t *v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  uint8x16_t v196;
  uint16x8_t v197;
  uint32x4_t v198;
  uint64x2_t v199;
  uint64x2_t v200;
  uint32x4_t v201;
  uint64x2_t v202;
  uint16x8_t v203;
  uint32x4_t v204;
  uint64x2_t v205;
  uint64x2_t v206;
  uint64x2_t v207;
  uint64x2_t v208;
  uint32x4_t v209;
  uint64x2_t v210;
  uint64x2_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  unsigned int v220;
  int v221;
  unsigned int v222;
  signed int v223;
  int8x16_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int8x16_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  uint64_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  uint64_t v238;
  uint8x16_t *v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  uint8x16_t v246;
  uint16x8_t v247;
  uint32x4_t v248;
  uint64x2_t v249;
  uint64x2_t v250;
  uint32x4_t v251;
  uint64x2_t v252;
  uint16x8_t v253;
  uint32x4_t v254;
  uint64x2_t v255;
  uint64x2_t v256;
  uint64x2_t v257;
  uint64x2_t v258;
  uint32x4_t v259;
  uint64x2_t v260;
  uint64x2_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  int8x16_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int8x16_t v268;
  int8x16_t v269;
  unsigned int v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  int v274;
  unint64_t v275;
  unsigned int v276;
  uint64_t v277;
  unint64_t v278;
  int v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t v282;
  void (*v283)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v284;
  signed int v285;
  signed int v286;
  unint64_t *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t v290;
  void (*v291)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v292;
  signed int v293;
  signed int v294;
  unint64_t *v295;
  int v296;
  unint64_t v297;
  uint64_t v298;
  unsigned int v299;
  unint64_t v300;
  int v301;
  unint64_t *v302;
  unint64_t v303;
  unint64_t v304;
  uint64_t (*v305)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v306;
  signed int v307;
  signed int v308;
  unint64_t *v309;
  int v310;
  BOOL v311;
  int v312;
  int v314;
  BOOL v315;
  int v316;
  int v317;
  unsigned int v318;
  signed int v319;
  int8x16_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int8x16_t v323;
  int32x4_t v324;
  int32x4_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int32x4_t v328;
  int32x4_t v329;
  uint64_t v330;
  int8x16_t v331;
  int8x16_t v332;
  int8x16_t v333;
  uint64_t v334;
  uint8x16_t *v335;
  int8x16_t v336;
  int8x16_t v337;
  int8x16_t v338;
  int32x4_t v339;
  int32x4_t v340;
  int32x4_t v341;
  uint8x16_t v342;
  uint16x8_t v343;
  uint32x4_t v344;
  uint64x2_t v345;
  uint64x2_t v346;
  uint32x4_t v347;
  uint64x2_t v348;
  uint16x8_t v349;
  uint32x4_t v350;
  uint64x2_t v351;
  uint64x2_t v352;
  uint64x2_t v353;
  uint64x2_t v354;
  uint32x4_t v355;
  uint64x2_t v356;
  uint64x2_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int8x16_t v361;
  int8x16_t v362;
  int8x16_t v363;
  int8x16_t v364;
  int8x16_t v365;
  unsigned int v366;
  int v367;
  BOOL v368;
  int v369;
  int v370;
  unsigned int v371;
  signed int v372;
  int8x16_t v373;
  int32x4_t v374;
  int32x4_t v375;
  int8x16_t v376;
  int32x4_t v377;
  int32x4_t v378;
  int32x4_t v379;
  int32x4_t v380;
  int32x4_t v381;
  int32x4_t v382;
  uint64_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  uint64_t v387;
  uint8x16_t *v388;
  int8x16_t v389;
  int8x16_t v390;
  int8x16_t v391;
  int32x4_t v392;
  int32x4_t v393;
  int32x4_t v394;
  uint8x16_t v395;
  uint16x8_t v396;
  uint32x4_t v397;
  uint64x2_t v398;
  uint64x2_t v399;
  uint32x4_t v400;
  uint64x2_t v401;
  uint16x8_t v402;
  uint32x4_t v403;
  uint64x2_t v404;
  uint64x2_t v405;
  uint64x2_t v406;
  uint64x2_t v407;
  uint32x4_t v408;
  uint64x2_t v409;
  uint64x2_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  int8x16_t v414;
  int8x16_t v415;
  int8x16_t v416;
  int8x16_t v417;
  int8x16_t v418;
  unsigned int v419;
  int v420;
  unsigned int v421;
  signed int v422;
  int8x16_t v423;
  int32x4_t v424;
  int32x4_t v425;
  int8x16_t v426;
  int32x4_t v427;
  int32x4_t v428;
  int32x4_t v429;
  int32x4_t v430;
  int32x4_t v431;
  int32x4_t v432;
  uint64_t v433;
  int8x16_t v434;
  int8x16_t v435;
  int8x16_t v436;
  uint64_t v437;
  uint8x16_t *v438;
  int8x16_t v439;
  int8x16_t v440;
  int8x16_t v441;
  int32x4_t v442;
  int32x4_t v443;
  int32x4_t v444;
  uint8x16_t v445;
  uint16x8_t v446;
  uint32x4_t v447;
  uint64x2_t v448;
  uint64x2_t v449;
  uint32x4_t v450;
  uint64x2_t v451;
  uint16x8_t v452;
  uint32x4_t v453;
  uint64x2_t v454;
  uint64x2_t v455;
  uint64x2_t v456;
  uint64x2_t v457;
  uint32x4_t v458;
  uint64x2_t v459;
  uint64x2_t v460;
  int8x16_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int8x16_t v464;
  int8x16_t v465;
  int8x16_t v466;
  int8x16_t v467;
  int8x16_t v468;
  unsigned int v469;
  int v470;
  int v471;
  unint64_t v472;
  uint64_t v473;
  unsigned int v474;
  _BYTE *v475;
  unint64_t v476;
  int v477;
  unint64_t *v478;
  unint64_t v479;
  unint64_t v480;
  uint64_t (*v481)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v482;
  signed int v483;
  signed int v484;
  unint64_t *v485;
  int v486;
  BOOL v487;
  int v488;
  int v490;
  unsigned int v491;
  signed int v492;
  int8x16_t v493;
  int32x4_t v494;
  int32x4_t v495;
  int8x16_t v496;
  int32x4_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int32x4_t v500;
  int32x4_t v501;
  int32x4_t v502;
  uint64_t v503;
  int8x16_t v504;
  int8x16_t v505;
  int8x16_t v506;
  uint64_t v507;
  uint8x16_t *v508;
  int8x16_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int32x4_t v512;
  int32x4_t v513;
  int32x4_t v514;
  uint8x16_t v515;
  uint16x8_t v516;
  uint32x4_t v517;
  uint64x2_t v518;
  uint64x2_t v519;
  uint32x4_t v520;
  uint64x2_t v521;
  uint16x8_t v522;
  uint32x4_t v523;
  uint64x2_t v524;
  uint64x2_t v525;
  uint64x2_t v526;
  uint64x2_t v527;
  uint32x4_t v528;
  uint64x2_t v529;
  uint64x2_t v530;
  int8x16_t v531;
  int8x16_t v532;
  int8x16_t v533;
  int8x16_t v534;
  int8x16_t v535;
  int8x16_t v536;
  int8x16_t v537;
  int8x16_t v538;
  unsigned int v539;
  int v540;
  int v541;
  int v542;
  unint64_t v543;
  uint64_t v544;
  unsigned int v545;
  int v546;
  unint64_t v547;
  int v548;
  unint64_t *v549;
  unint64_t v550;
  unint64_t v551;
  uint64_t (*v552)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v553;
  int v554;
  signed int v555;
  signed int v556;
  unint64_t *v557;
  int v558;
  BOOL v559;
  int v560;
  int v562;
  unsigned int v563;
  signed int v564;
  int8x16_t v565;
  int32x4_t v566;
  int32x4_t v567;
  int8x16_t v568;
  int32x4_t v569;
  int32x4_t v570;
  int32x4_t v571;
  int32x4_t v572;
  int32x4_t v573;
  int32x4_t v574;
  uint64_t v575;
  int8x16_t v576;
  int8x16_t v577;
  int8x16_t v578;
  uint64_t v579;
  uint8x16_t *v580;
  int8x16_t v581;
  int8x16_t v582;
  int8x16_t v583;
  int32x4_t v584;
  int32x4_t v585;
  int32x4_t v586;
  uint8x16_t v587;
  uint16x8_t v588;
  uint32x4_t v589;
  uint64x2_t v590;
  uint64x2_t v591;
  uint32x4_t v592;
  uint64x2_t v593;
  uint16x8_t v594;
  uint32x4_t v595;
  uint64x2_t v596;
  uint64x2_t v597;
  uint64x2_t v598;
  uint64x2_t v599;
  uint32x4_t v600;
  uint64x2_t v601;
  uint64x2_t v602;
  int8x16_t v603;
  int8x16_t v604;
  int8x16_t v605;
  int8x16_t v606;
  int8x16_t v607;
  int8x16_t v608;
  int8x16_t v609;
  int8x16_t v610;
  unsigned int v611;
  int v612;
  unsigned int v613;
  unint64_t v614;
  unint64_t v615;
  unint64_t v616;
  int v617;
  unint64_t v618;
  unsigned int v619;
  uint64_t v620;
  unint64_t *v621;
  unint64_t v622;
  unint64_t v623;
  void (*v624)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v625;
  signed int v626;
  signed int v627;
  unint64_t *v628;
  unint64_t *v629;
  unint64_t v630;
  unint64_t v631;
  void (*v632)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v633;
  signed int v634;
  signed int v635;
  unint64_t *v636;
  int v637;
  unint64_t v638;
  uint64_t v639;
  unsigned int v640;
  unint64_t v641;
  int v642;
  unint64_t *v643;
  unint64_t v644;
  unint64_t v645;
  void (*v646)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v647;
  int v648;
  signed int v649;
  signed int v650;
  unint64_t *v651;
  int v652;
  BOOL v653;
  int v654;
  int v656;
  BOOL v657;
  int v658;
  int v659;
  unsigned int v660;
  signed int v661;
  int8x16_t v662;
  int32x4_t v663;
  int32x4_t v664;
  int8x16_t v665;
  int32x4_t v666;
  int32x4_t v667;
  int32x4_t v668;
  int32x4_t v669;
  int32x4_t v670;
  int32x4_t v671;
  uint64_t v672;
  int8x16_t v673;
  int8x16_t v674;
  int8x16_t v675;
  uint64_t v676;
  uint8x16_t *v677;
  int8x16_t v678;
  int8x16_t v679;
  int8x16_t v680;
  int32x4_t v681;
  int32x4_t v682;
  int32x4_t v683;
  uint8x16_t v684;
  uint16x8_t v685;
  uint32x4_t v686;
  uint64x2_t v687;
  uint64x2_t v688;
  uint32x4_t v689;
  uint64x2_t v690;
  uint16x8_t v691;
  uint32x4_t v692;
  uint64x2_t v693;
  uint64x2_t v694;
  uint64x2_t v695;
  uint64x2_t v696;
  uint32x4_t v697;
  uint64x2_t v698;
  uint64x2_t v699;
  int8x16_t v700;
  int8x16_t v701;
  int8x16_t v702;
  int8x16_t v703;
  int8x16_t v704;
  int8x16_t v705;
  int8x16_t v706;
  int8x16_t v707;
  unsigned int v708;
  int v709;
  BOOL v710;
  int v711;
  int v712;
  unsigned int v713;
  signed int v714;
  int8x16_t v715;
  int32x4_t v716;
  int32x4_t v717;
  int8x16_t v718;
  int32x4_t v719;
  int32x4_t v720;
  int32x4_t v721;
  int32x4_t v722;
  int32x4_t v723;
  int32x4_t v724;
  uint64_t v725;
  int8x16_t v726;
  int8x16_t v727;
  int8x16_t v728;
  uint64_t v729;
  uint8x16_t *v730;
  int8x16_t v731;
  int8x16_t v732;
  int8x16_t v733;
  int32x4_t v734;
  int32x4_t v735;
  int32x4_t v736;
  uint8x16_t v737;
  uint16x8_t v738;
  uint32x4_t v739;
  uint64x2_t v740;
  uint64x2_t v741;
  uint32x4_t v742;
  uint64x2_t v743;
  uint16x8_t v744;
  uint32x4_t v745;
  uint64x2_t v746;
  uint64x2_t v747;
  uint64x2_t v748;
  uint64x2_t v749;
  uint32x4_t v750;
  uint64x2_t v751;
  uint64x2_t v752;
  int8x16_t v753;
  int8x16_t v754;
  int8x16_t v755;
  int8x16_t v756;
  int8x16_t v757;
  int8x16_t v758;
  int8x16_t v759;
  int8x16_t v760;
  unsigned int v761;
  int v762;
  unsigned int v763;
  signed int v764;
  int8x16_t v765;
  int32x4_t v766;
  int32x4_t v767;
  int8x16_t v768;
  int32x4_t v769;
  int32x4_t v770;
  int32x4_t v771;
  int32x4_t v772;
  int32x4_t v773;
  int32x4_t v774;
  uint64_t v775;
  int8x16_t v776;
  int8x16_t v777;
  int8x16_t v778;
  uint64_t v779;
  uint8x16_t *v780;
  int8x16_t v781;
  int8x16_t v782;
  int8x16_t v783;
  int32x4_t v784;
  int32x4_t v785;
  int32x4_t v786;
  uint8x16_t v787;
  uint16x8_t v788;
  uint32x4_t v789;
  uint64x2_t v790;
  uint64x2_t v791;
  uint32x4_t v792;
  uint64x2_t v793;
  uint16x8_t v794;
  uint32x4_t v795;
  uint64x2_t v796;
  uint64x2_t v797;
  uint64x2_t v798;
  uint64x2_t v799;
  uint32x4_t v800;
  uint64x2_t v801;
  uint64x2_t v802;
  int8x16_t v803;
  int8x16_t v804;
  int8x16_t v805;
  int8x16_t v806;
  int8x16_t v807;
  int8x16_t v808;
  int8x16_t v809;
  int8x16_t v810;
  unsigned int v811;
  int v812;
  unint64_t v813;
  uint64_t v814;
  unsigned int v815;
  unint64_t v816;
  unint64_t *v817;
  unint64_t v818;
  unint64_t v819;
  void (*v820)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v821;
  int v822;
  int v823;
  signed int v824;
  signed int v825;
  unint64_t *v826;
  int v827;
  BOOL v828;
  int v829;
  int v831;
  unsigned int v832;
  signed int v833;
  int8x16_t v834;
  int32x4_t v835;
  int32x4_t v836;
  int8x16_t v837;
  int32x4_t v838;
  int32x4_t v839;
  int32x4_t v840;
  int32x4_t v841;
  int32x4_t v842;
  int32x4_t v843;
  uint64_t v844;
  int8x16_t v845;
  int8x16_t v846;
  int8x16_t v847;
  uint64_t v848;
  uint8x16_t *v849;
  int8x16_t v850;
  int8x16_t v851;
  int8x16_t v852;
  int32x4_t v853;
  int32x4_t v854;
  int32x4_t v855;
  uint8x16_t v856;
  uint16x8_t v857;
  uint32x4_t v858;
  uint64x2_t v859;
  uint64x2_t v860;
  uint32x4_t v861;
  uint64x2_t v862;
  uint16x8_t v863;
  uint32x4_t v864;
  uint64x2_t v865;
  uint64x2_t v866;
  uint64x2_t v867;
  uint64x2_t v868;
  uint32x4_t v869;
  uint64x2_t v870;
  uint64x2_t v871;
  int8x16_t v872;
  int8x16_t v873;
  int8x16_t v874;
  int8x16_t v875;
  int8x16_t v876;
  int8x16_t v877;
  int8x16_t v878;
  int8x16_t v879;
  unsigned int v880;
  int v881;
  int v882;
  unint64_t v883;
  uint64_t v884;
  unsigned int v885;
  unint64_t v886;
  int v887;
  unint64_t *v888;
  unint64_t v889;
  unint64_t v890;
  void (*v891)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v892;
  uint64_t v893;
  int v894;
  int v895;
  signed int v896;
  signed int v897;
  unint64_t *v898;
  int v899;
  BOOL v900;
  int v901;
  int v903;
  unsigned int v904;
  signed int v905;
  int8x16_t v906;
  int32x4_t v907;
  int32x4_t v908;
  int8x16_t v909;
  int32x4_t v910;
  int32x4_t v911;
  int32x4_t v912;
  int32x4_t v913;
  int32x4_t v914;
  int32x4_t v915;
  uint64_t v916;
  int8x16_t v917;
  int8x16_t v918;
  int8x16_t v919;
  uint64_t v920;
  uint8x16_t *v921;
  int8x16_t v922;
  int8x16_t v923;
  int8x16_t v924;
  int32x4_t v925;
  int32x4_t v926;
  int32x4_t v927;
  uint8x16_t v928;
  uint16x8_t v929;
  uint32x4_t v930;
  uint64x2_t v931;
  uint64x2_t v932;
  uint32x4_t v933;
  uint64x2_t v934;
  uint16x8_t v935;
  uint32x4_t v936;
  uint64x2_t v937;
  uint64x2_t v938;
  uint64x2_t v939;
  uint64x2_t v940;
  uint32x4_t v941;
  uint64x2_t v942;
  uint64x2_t v943;
  int8x16_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int8x16_t v947;
  int8x16_t v948;
  int8x16_t v949;
  int8x16_t v950;
  int8x16_t v951;
  unsigned int v952;
  int v953;
  unint64_t v954;
  int v955;
  int v956;
  unint64_t v957;
  uint64_t v958;
  unsigned int v959;
  unint64_t *v960;
  unint64_t v961;
  unint64_t v962;
  void (*v963)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v964;
  int v965;
  signed int v966;
  signed int v967;
  unint64_t *v968;
  int v969;
  BOOL v970;
  int v971;
  unint64_t v973;
  int v974;
  int v975;
  unint64_t v976;
  uint64_t v977;
  unsigned int v978;
  unint64_t *v979;
  unint64_t v980;
  unint64_t v981;
  void (*v982)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v983;
  int v984;
  signed int v985;
  signed int v986;
  unint64_t *v987;
  int v988;
  BOOL v989;
  int v990;
  int v992;
  unsigned int v993;
  signed int v994;
  int8x16_t v995;
  int32x4_t v996;
  int32x4_t v997;
  int8x16_t v998;
  int32x4_t v999;
  int32x4_t v1000;
  int32x4_t v1001;
  int32x4_t v1002;
  int32x4_t v1003;
  int32x4_t v1004;
  uint64_t v1005;
  int8x16_t v1006;
  int8x16_t v1007;
  int8x16_t v1008;
  uint64_t v1009;
  uint8x16_t *v1010;
  int8x16_t v1011;
  int8x16_t v1012;
  int8x16_t v1013;
  int32x4_t v1014;
  int32x4_t v1015;
  int32x4_t v1016;
  uint8x16_t v1017;
  uint16x8_t v1018;
  uint32x4_t v1019;
  uint64x2_t v1020;
  uint64x2_t v1021;
  uint32x4_t v1022;
  uint64x2_t v1023;
  uint16x8_t v1024;
  uint32x4_t v1025;
  uint64x2_t v1026;
  uint64x2_t v1027;
  uint64x2_t v1028;
  uint64x2_t v1029;
  uint32x4_t v1030;
  uint64x2_t v1031;
  uint64x2_t v1032;
  int8x16_t v1033;
  int8x16_t v1034;
  int8x16_t v1035;
  int8x16_t v1036;
  int8x16_t v1037;
  int8x16_t v1038;
  int8x16_t v1039;
  int8x16_t v1040;
  unsigned int v1041;
  unint64_t v1042;
  int v1043;
  int v1044;
  int v1045;
  unint64_t v1046;
  uint64_t v1047;
  unsigned int v1048;
  unint64_t *v1049;
  unint64_t v1050;
  unint64_t v1051;
  void (*v1052)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1053;
  int v1054;
  int v1055;
  signed int v1056;
  signed int v1057;
  unint64_t *v1058;
  int v1059;
  BOOL v1060;
  int v1061;
  int v1063;
  unsigned int v1064;
  signed int v1065;
  int8x16_t v1066;
  int32x4_t v1067;
  int32x4_t v1068;
  int8x16_t v1069;
  int32x4_t v1070;
  int32x4_t v1071;
  int32x4_t v1072;
  int32x4_t v1073;
  int32x4_t v1074;
  int32x4_t v1075;
  uint64_t v1076;
  int8x16_t v1077;
  int8x16_t v1078;
  int8x16_t v1079;
  uint64_t v1080;
  uint8x16_t *v1081;
  int8x16_t v1082;
  int8x16_t v1083;
  int8x16_t v1084;
  int32x4_t v1085;
  int32x4_t v1086;
  int32x4_t v1087;
  uint8x16_t v1088;
  uint16x8_t v1089;
  uint32x4_t v1090;
  uint64x2_t v1091;
  uint64x2_t v1092;
  uint32x4_t v1093;
  uint64x2_t v1094;
  uint16x8_t v1095;
  uint32x4_t v1096;
  uint64x2_t v1097;
  uint64x2_t v1098;
  uint64x2_t v1099;
  uint64x2_t v1100;
  uint32x4_t v1101;
  uint64x2_t v1102;
  uint64x2_t v1103;
  int8x16_t v1104;
  int8x16_t v1105;
  int8x16_t v1106;
  int8x16_t v1107;
  int8x16_t v1108;
  int8x16_t v1109;
  int8x16_t v1110;
  int8x16_t v1111;
  unsigned int v1112;
  unint64_t v1113;
  int v1114;
  int v1115;
  int v1116;
  unint64_t v1117;
  uint64_t v1118;
  unsigned int v1119;
  unint64_t *v1120;
  unint64_t v1121;
  unint64_t v1122;
  void (*v1123)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1124;
  int v1125;
  int v1126;
  signed int v1127;
  signed int v1128;
  unint64_t *v1129;
  int v1130;
  BOOL v1131;
  int v1132;
  int v1134;
  unsigned int v1135;
  signed int v1136;
  int8x16_t v1137;
  int32x4_t v1138;
  int32x4_t v1139;
  int8x16_t v1140;
  int32x4_t v1141;
  int32x4_t v1142;
  int32x4_t v1143;
  int32x4_t v1144;
  int32x4_t v1145;
  int32x4_t v1146;
  uint64_t v1147;
  int8x16_t v1148;
  int8x16_t v1149;
  int8x16_t v1150;
  uint64_t v1151;
  uint8x16_t *v1152;
  int8x16_t v1153;
  int8x16_t v1154;
  int8x16_t v1155;
  int32x4_t v1156;
  int32x4_t v1157;
  int32x4_t v1158;
  uint8x16_t v1159;
  uint16x8_t v1160;
  uint32x4_t v1161;
  uint64x2_t v1162;
  uint64x2_t v1163;
  uint32x4_t v1164;
  uint64x2_t v1165;
  uint16x8_t v1166;
  uint32x4_t v1167;
  uint64x2_t v1168;
  uint64x2_t v1169;
  uint64x2_t v1170;
  uint64x2_t v1171;
  uint32x4_t v1172;
  uint64x2_t v1173;
  uint64x2_t v1174;
  int8x16_t v1175;
  int8x16_t v1176;
  int8x16_t v1177;
  int8x16_t v1178;
  int8x16_t v1179;
  int8x16_t v1180;
  int8x16_t v1181;
  int8x16_t v1182;
  unsigned int v1183;
  int v1184;
  int v1185;
  int v1186;
  unint64_t v1187;
  uint64_t v1188;
  unsigned int v1189;
  unint64_t *v1190;
  unint64_t v1191;
  unint64_t v1192;
  void (*v1193)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1194;
  uint64_t v1195;
  int v1196;
  int v1197;
  signed int v1198;
  signed int v1199;
  unint64_t *v1200;
  int v1201;
  BOOL v1202;
  int v1203;
  int v1205;
  unsigned int v1206;
  signed int v1207;
  int8x16_t v1208;
  int32x4_t v1209;
  int32x4_t v1210;
  int8x16_t v1211;
  int32x4_t v1212;
  int32x4_t v1213;
  int32x4_t v1214;
  int32x4_t v1215;
  int32x4_t v1216;
  int32x4_t v1217;
  uint64_t v1218;
  int8x16_t v1219;
  int8x16_t v1220;
  int8x16_t v1221;
  uint64_t v1222;
  uint8x16_t *v1223;
  int8x16_t v1224;
  int8x16_t v1225;
  int8x16_t v1226;
  int32x4_t v1227;
  int32x4_t v1228;
  int32x4_t v1229;
  uint8x16_t v1230;
  uint16x8_t v1231;
  uint32x4_t v1232;
  uint64x2_t v1233;
  uint64x2_t v1234;
  uint32x4_t v1235;
  uint64x2_t v1236;
  uint16x8_t v1237;
  uint32x4_t v1238;
  uint64x2_t v1239;
  uint64x2_t v1240;
  uint64x2_t v1241;
  uint64x2_t v1242;
  uint32x4_t v1243;
  uint64x2_t v1244;
  uint64x2_t v1245;
  int8x16_t v1246;
  int8x16_t v1247;
  int8x16_t v1248;
  int8x16_t v1249;
  int8x16_t v1250;
  int8x16_t v1251;
  int8x16_t v1252;
  int8x16_t v1253;
  unsigned int v1254;
  unint64_t v1255;
  int v1256;
  unint64_t v1257;
  uint64_t v1258;
  unsigned int v1259;
  unint64_t *v1260;
  unint64_t v1261;
  unint64_t v1262;
  void (*v1263)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1264;
  uint64_t v1265;
  int v1266;
  int v1267;
  signed int v1268;
  signed int v1269;
  unint64_t *v1270;
  int v1271;
  BOOL v1272;
  int v1273;
  int v1275;
  unsigned int v1276;
  signed int v1277;
  int8x16_t v1278;
  int32x4_t v1279;
  int32x4_t v1280;
  int8x16_t v1281;
  int32x4_t v1282;
  int32x4_t v1283;
  int32x4_t v1284;
  int32x4_t v1285;
  int32x4_t v1286;
  int32x4_t v1287;
  uint64_t v1288;
  int8x16_t v1289;
  int8x16_t v1290;
  int8x16_t v1291;
  uint64_t v1292;
  uint8x16_t *v1293;
  int8x16_t v1294;
  int8x16_t v1295;
  int8x16_t v1296;
  int32x4_t v1297;
  int32x4_t v1298;
  int32x4_t v1299;
  uint8x16_t v1300;
  uint16x8_t v1301;
  uint32x4_t v1302;
  uint64x2_t v1303;
  uint64x2_t v1304;
  uint32x4_t v1305;
  uint64x2_t v1306;
  uint16x8_t v1307;
  uint32x4_t v1308;
  uint64x2_t v1309;
  uint64x2_t v1310;
  uint64x2_t v1311;
  uint64x2_t v1312;
  uint32x4_t v1313;
  uint64x2_t v1314;
  uint64x2_t v1315;
  int8x16_t v1316;
  int8x16_t v1317;
  int8x16_t v1318;
  int8x16_t v1319;
  int8x16_t v1320;
  int8x16_t v1321;
  int8x16_t v1322;
  int8x16_t v1323;
  unsigned int v1324;
  unint64_t v1325;
  int v1326;
  int v1327;
  int v1328;
  unint64_t v1329;
  uint64_t v1330;
  unsigned int v1331;
  unint64_t *v1332;
  unint64_t v1333;
  unint64_t v1334;
  void (*v1335)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1336;
  int v1337;
  int v1338;
  int v1339;
  signed int v1340;
  signed int v1341;
  unint64_t *v1342;
  int v1343;
  BOOL v1344;
  int v1345;
  int v1347;
  unsigned int v1348;
  signed int v1349;
  int8x16_t v1350;
  int32x4_t v1351;
  int32x4_t v1352;
  int8x16_t v1353;
  int32x4_t v1354;
  int32x4_t v1355;
  int32x4_t v1356;
  int32x4_t v1357;
  int32x4_t v1358;
  int32x4_t v1359;
  uint64_t v1360;
  int8x16_t v1361;
  int8x16_t v1362;
  int8x16_t v1363;
  uint64_t v1364;
  uint8x16_t *v1365;
  int8x16_t v1366;
  int8x16_t v1367;
  int8x16_t v1368;
  int32x4_t v1369;
  int32x4_t v1370;
  int32x4_t v1371;
  uint8x16_t v1372;
  uint16x8_t v1373;
  uint32x4_t v1374;
  uint64x2_t v1375;
  uint64x2_t v1376;
  uint32x4_t v1377;
  uint64x2_t v1378;
  uint16x8_t v1379;
  uint32x4_t v1380;
  uint64x2_t v1381;
  uint64x2_t v1382;
  uint64x2_t v1383;
  uint64x2_t v1384;
  uint32x4_t v1385;
  uint64x2_t v1386;
  uint64x2_t v1387;
  int8x16_t v1388;
  int8x16_t v1389;
  int8x16_t v1390;
  int8x16_t v1391;
  int8x16_t v1392;
  int8x16_t v1393;
  int8x16_t v1394;
  int8x16_t v1395;
  unsigned int v1396;
  unint64_t v1397;
  int v1398;
  int v1399;
  int v1400;
  unint64_t v1401;
  uint64_t v1402;
  unsigned int v1403;
  unint64_t *v1404;
  unint64_t v1405;
  unint64_t v1406;
  void (*v1407)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1408;
  int v1409;
  int v1410;
  int v1411;
  signed int v1412;
  signed int v1413;
  unint64_t *v1414;
  int v1415;
  BOOL v1416;
  int v1417;
  int v1419;
  unsigned int v1420;
  signed int v1421;
  int8x16_t v1422;
  int32x4_t v1423;
  int32x4_t v1424;
  int8x16_t v1425;
  int32x4_t v1426;
  int32x4_t v1427;
  int32x4_t v1428;
  int32x4_t v1429;
  int32x4_t v1430;
  int32x4_t v1431;
  uint64_t v1432;
  int8x16_t v1433;
  int8x16_t v1434;
  int8x16_t v1435;
  uint64_t v1436;
  uint8x16_t *v1437;
  int8x16_t v1438;
  int8x16_t v1439;
  int8x16_t v1440;
  int32x4_t v1441;
  int32x4_t v1442;
  int32x4_t v1443;
  uint8x16_t v1444;
  uint16x8_t v1445;
  uint32x4_t v1446;
  uint64x2_t v1447;
  uint64x2_t v1448;
  uint32x4_t v1449;
  uint64x2_t v1450;
  uint16x8_t v1451;
  uint32x4_t v1452;
  uint64x2_t v1453;
  uint64x2_t v1454;
  uint64x2_t v1455;
  uint64x2_t v1456;
  uint32x4_t v1457;
  uint64x2_t v1458;
  uint64x2_t v1459;
  int8x16_t v1460;
  int8x16_t v1461;
  int8x16_t v1462;
  int8x16_t v1463;
  int8x16_t v1464;
  int8x16_t v1465;
  int8x16_t v1466;
  int8x16_t v1467;
  unsigned int v1468;
  unint64_t v1469;
  int v1470;
  int v1471;
  int v1472;
  unsigned int v1473;
  signed int v1474;
  int8x16_t v1475;
  int32x4_t v1476;
  int32x4_t v1477;
  int8x16_t v1478;
  int32x4_t v1479;
  int32x4_t v1480;
  int32x4_t v1481;
  int32x4_t v1482;
  int32x4_t v1483;
  int32x4_t v1484;
  uint64_t v1485;
  int8x16_t v1486;
  int8x16_t v1487;
  int8x16_t v1488;
  uint64_t v1489;
  uint8x16_t *v1490;
  int8x16_t v1491;
  int8x16_t v1492;
  int8x16_t v1493;
  int32x4_t v1494;
  int32x4_t v1495;
  int32x4_t v1496;
  uint8x16_t v1497;
  uint16x8_t v1498;
  uint32x4_t v1499;
  uint64x2_t v1500;
  uint64x2_t v1501;
  uint32x4_t v1502;
  uint64x2_t v1503;
  uint16x8_t v1504;
  uint32x4_t v1505;
  uint64x2_t v1506;
  uint64x2_t v1507;
  uint64x2_t v1508;
  uint64x2_t v1509;
  uint32x4_t v1510;
  uint64x2_t v1511;
  uint64x2_t v1512;
  int8x16_t v1513;
  int8x16_t v1514;
  int8x16_t v1515;
  int8x16_t v1516;
  int8x16_t v1517;
  int8x16_t v1518;
  int8x16_t v1519;
  int8x16_t v1520;
  unsigned int v1521;
  unint64_t v1522;
  int v1523;
  int v1524;
  int v1525;
  int v1526;
  unint64_t v1527;
  uint64_t v1528;
  unsigned int v1529;
  unint64_t *v1530;
  unint64_t v1531;
  unint64_t v1532;
  uint64_t (*v1533)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1534;
  int v1535;
  signed int v1536;
  signed int v1537;
  unint64_t *v1538;
  int v1539;
  BOOL v1540;
  int v1541;
  int v1543;
  unsigned int v1544;
  signed int v1545;
  int8x16_t v1546;
  int32x4_t v1547;
  int32x4_t v1548;
  int8x16_t v1549;
  int32x4_t v1550;
  int32x4_t v1551;
  int32x4_t v1552;
  int32x4_t v1553;
  int32x4_t v1554;
  int32x4_t v1555;
  uint64_t v1556;
  int8x16_t v1557;
  int8x16_t v1558;
  int8x16_t v1559;
  uint64_t v1560;
  uint8x16_t *v1561;
  int8x16_t v1562;
  int8x16_t v1563;
  int8x16_t v1564;
  int32x4_t v1565;
  int32x4_t v1566;
  int32x4_t v1567;
  uint8x16_t v1568;
  uint16x8_t v1569;
  uint32x4_t v1570;
  uint64x2_t v1571;
  uint64x2_t v1572;
  uint32x4_t v1573;
  uint64x2_t v1574;
  uint16x8_t v1575;
  uint32x4_t v1576;
  uint64x2_t v1577;
  uint64x2_t v1578;
  uint64x2_t v1579;
  uint64x2_t v1580;
  uint32x4_t v1581;
  uint64x2_t v1582;
  uint64x2_t v1583;
  int8x16_t v1584;
  int8x16_t v1585;
  int8x16_t v1586;
  int8x16_t v1587;
  int8x16_t v1588;
  int8x16_t v1589;
  int8x16_t v1590;
  int8x16_t v1591;
  unsigned int v1592;
  unint64_t v1593;
  int v1594;
  int v1595;
  int v1596;
  int v1597;
  unint64_t v1598;
  uint64_t v1599;
  unsigned int v1600;
  int v1601;
  unint64_t v1602;
  int v1603;
  unint64_t *v1604;
  unint64_t v1605;
  unint64_t v1606;
  uint64_t (*v1607)(_QWORD, unint64_t *, uint64_t, uint64_t);
  uint64_t v1608;
  int v1609;
  signed int v1610;
  signed int v1611;
  unint64_t *v1612;
  int v1613;
  BOOL v1614;
  int v1615;
  int v1617;
  unsigned int v1618;
  signed int v1619;
  int8x16_t v1620;
  int32x4_t v1621;
  int32x4_t v1622;
  int8x16_t v1623;
  int32x4_t v1624;
  int32x4_t v1625;
  int32x4_t v1626;
  int32x4_t v1627;
  int32x4_t v1628;
  int32x4_t v1629;
  uint64_t v1630;
  int8x16_t v1631;
  int8x16_t v1632;
  int8x16_t v1633;
  uint64_t v1634;
  uint8x16_t *v1635;
  int8x16_t v1636;
  int8x16_t v1637;
  int8x16_t v1638;
  int32x4_t v1639;
  int32x4_t v1640;
  int32x4_t v1641;
  uint8x16_t v1642;
  uint16x8_t v1643;
  uint32x4_t v1644;
  uint64x2_t v1645;
  uint64x2_t v1646;
  uint32x4_t v1647;
  uint64x2_t v1648;
  uint16x8_t v1649;
  uint32x4_t v1650;
  uint64x2_t v1651;
  uint64x2_t v1652;
  uint64x2_t v1653;
  uint64x2_t v1654;
  uint32x4_t v1655;
  uint64x2_t v1656;
  uint64x2_t v1657;
  int8x16_t v1658;
  int8x16_t v1659;
  int8x16_t v1660;
  int8x16_t v1661;
  int8x16_t v1662;
  int8x16_t v1663;
  int8x16_t v1664;
  int8x16_t v1665;
  unsigned int v1666;
  int v1667;
  int v1668;
  unint64_t v1669;
  int v1670;
  unsigned int v1671;
  int v1672;
  uint64_t v1673;
  unint64_t v1674;
  int v1675;
  int v1676;
  unsigned int v1677;
  unsigned int v1678;
  int v1679;
  char v1680;
  char v1681;
  int v1682;
  char v1683;
  uint64_t v1684;
  uint64_t v1685;
  uint64_t v1686;
  uint64_t v1687;
  uint64_t v1688;
  unsigned int v1689;
  unsigned int v1690;
  uint64_t v1691;
  _BYTE *v1692;

  v3 = result;
  v4 = *(_DWORD *)(result + 12);
  v5 = (252 * *(_DWORD *)(result + 8) + 4) >> 8;
  v6 = *(_QWORD *)result;
  if ((v4 & 0x80000000) == 0)
  {
    v7 = v5 << 56;
    v8 = *(_QWORD *)result;
    v9 = v6 - (v5 << 56);
    if (v6 < v5 << 56)
      goto LABEL_4;
    goto LABEL_3;
  }
  v24 = *(unint64_t **)(result + 24);
  v25 = *(_QWORD *)(result + 16) - (_QWORD)v24;
  v26 = 8 * v25;
  v27 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(result + 32);
  if (v27)
  {
    if (v25 >= 9)
      v28 = 9;
    else
      v28 = *(_QWORD *)(result + 16) - (_QWORD)v24;
    result = v27(*(_QWORD *)(result + 40), v24, result + 48, v28);
    v24 = (unint64_t *)(v3 + 48);
  }
  v29 = 48 - v4;
  if (v26 < 0x41)
  {
    v49 = 56 - v4 - v26;
    if (v49 < 0)
      v31 = v4;
    else
      v31 = v4 + 0x40000000;
    if (v26)
      v50 = 1;
    else
      v50 = v49 <= -1;
    v51 = v49 & ~(v49 >> 31);
    if (!v50 || v29 < v51)
    {
      v32 = v24;
    }
    else
    {
      v65 = v51 - 1;
      if (v51 - 1 >= (int)(40 - v4))
        v65 = 40 - v4;
      v66 = 47 - v4 - v65;
      v32 = v24;
      v67 = 48 - v4;
      if (v66 < 0x78)
        goto LABEL_744;
      v68 = (int8x16_t)v6;
      v69 = (int32x4_t)v31;
      v70 = vdupq_n_s32(v29);
      v71 = 0uLL;
      v72 = vaddq_s32(v70, (int32x4_t)xmmword_208F3A6C0);
      v73 = vaddq_s32(v70, (int32x4_t)xmmword_208F3A6D0);
      v74 = vaddq_s32(v70, (int32x4_t)xmmword_208F3A6A0);
      v75 = vaddq_s32(v70, (int32x4_t)xmmword_208F3A6B0);
      v76.i64[0] = 0x800000008;
      v76.i64[1] = 0x800000008;
      v77.i64[0] = 0x7F0000007FLL;
      v77.i64[1] = 0x7F0000007FLL;
      v78 = (v66 >> 3) + 1;
      v79 = 0uLL;
      v80 = 0uLL;
      v81 = 0uLL;
      v32 = (unint64_t *)((char *)v24 + (v78 & 0x3FFFFFF0));
      v67 = v29 - 8 * (v78 & 0x3FFFFFF0);
      v82 = v78 & 0x3FFFFFF0;
      v83 = (uint8x16_t *)v24;
      v84 = 0uLL;
      v85 = 0uLL;
      v86 = 0uLL;
      v87 = 0uLL;
      v88 = 0uLL;
      v89 = 0uLL;
      do
      {
        v90 = *v83++;
        v91 = vmovl_high_u8(v90);
        v92 = vmovl_high_u16(v91);
        v93.i64[0] = v92.u32[0];
        v93.i64[1] = v92.u32[1];
        v94 = v93;
        v95 = vmovl_u16(*(uint16x4_t *)v91.i8);
        v93.i64[0] = v95.u32[2];
        v93.i64[1] = v95.u32[3];
        v96 = v93;
        v97 = vmovl_u8(*(uint8x8_t *)v90.i8);
        v98 = vmovl_high_u16(v97);
        v93.i64[0] = v98.u32[2];
        v93.i64[1] = v98.u32[3];
        v99 = v93;
        v93.i64[0] = v92.u32[2];
        v93.i64[1] = v92.u32[3];
        v100 = v93;
        v93.i64[0] = v95.u32[0];
        v93.i64[1] = v95.u32[1];
        v101 = v93;
        v93.i64[0] = v98.u32[0];
        v93.i64[1] = v98.u32[1];
        v102 = v93;
        v103 = vmovl_u16(*(uint16x4_t *)v97.i8);
        v93.i64[0] = v103.u32[2];
        v93.i64[1] = v103.u32[3];
        v104 = v93;
        v93.i64[0] = v103.u32[0];
        v93.i64[1] = v103.u32[1];
        v105 = v93;
        v93.i64[0] = v75.u32[0];
        v93.i64[1] = v75.u32[1];
        v106 = (int8x16_t)vshlq_u64(v105, v93);
        v93.i64[0] = v75.u32[2];
        v93.i64[1] = v75.u32[3];
        v107 = (int8x16_t)vshlq_u64(v104, v93);
        v93.i64[0] = v74.u32[0];
        v93.i64[1] = v74.u32[1];
        v108 = (int8x16_t)vshlq_u64(v102, v93);
        v93.i64[0] = v73.u32[0];
        v93.i64[1] = v73.u32[1];
        v109 = (int8x16_t)vshlq_u64(v101, v93);
        v93.i64[0] = v72.u32[2];
        v93.i64[1] = v72.u32[3];
        v110 = (int8x16_t)vshlq_u64(v100, v93);
        v93.i64[0] = v74.u32[2];
        v93.i64[1] = v74.u32[3];
        v111 = (int8x16_t)vshlq_u64(v99, v93);
        v93.i64[0] = v73.u32[2];
        v93.i64[1] = v73.u32[3];
        v112 = (int8x16_t)vshlq_u64(v96, v93);
        v93.i64[0] = v72.u32[0];
        v93.i64[1] = v72.u32[1];
        v85 = vorrq_s8((int8x16_t)vshlq_u64(v94, v93), v85);
        v84 = vorrq_s8(v112, v84);
        v80 = vorrq_s8(v111, v80);
        v86 = vorrq_s8(v110, v86);
        v81 = vorrq_s8(v109, v81);
        v79 = vorrq_s8(v108, v79);
        v71 = vorrq_s8(v107, v71);
        v68 = vorrq_s8(v106, v68);
        v69 = vaddq_s32(v69, v76);
        v87 = vaddq_s32(v87, v76);
        v88 = vaddq_s32(v88, v76);
        v89 = vaddq_s32(v89, v76);
        v75 = vaddq_s32(v75, v77);
        v74 = vaddq_s32(v74, v77);
        v73 = vaddq_s32(v73, v77);
        v72 = vaddq_s32(v72, v77);
        v82 -= 16;
      }
      while (v82);
      v31 = vaddvq_s32(vaddq_s32(vaddq_s32(v69, v88), vaddq_s32(v87, v89)));
      v113 = vorrq_s8(vorrq_s8(vorrq_s8(v68, v81), vorrq_s8(v79, v85)), vorrq_s8(vorrq_s8(v71, v84), vorrq_s8(v80, v86)));
      v6 = (unint64_t)vorr_s8(*(int8x8_t *)v113.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL));
      if ((v78 & 0x3FFFFFF0) != v78)
      {
LABEL_744:
        do
        {
          v31 += 8;
          v114 = *(unsigned __int8 *)v32;
          v32 = (unint64_t *)((char *)v32 + 1);
          v6 |= (unint64_t)v114 << v67;
          v67 -= 8;
        }
        while (v67 >= v51);
      }
    }
  }
  else
  {
    v30 = (v29 & 0xFFFFFFF8) + 8;
    v31 = v30 + v4;
    v32 = (unint64_t *)((char *)v24 + (v30 >> 3));
    v6 = (bswap64(*v24) >> (56 - (v29 & 0xF8u)) << (v29 & 7)) | *(_QWORD *)v3;
  }
  *(_QWORD *)(v3 + 24) += (char *)v32 - (char *)v24;
  v4 = v31;
  v7 = v5 << 56;
  v8 = v6;
  v9 = v6 - (v5 << 56);
  if (v6 >= v5 << 56)
  {
LABEL_3:
    LODWORD(v5) = *(_DWORD *)(v3 + 8) - v5;
    v8 = v9;
  }
LABEL_4:
  v10 = vpx_norm[v5];
  v11 = (_DWORD)v5 << v10;
  v12 = v8 << v10;
  *(_QWORD *)v3 = v8 << v10;
  v13 = v4 - v10;
  *(_DWORD *)(v3 + 8) = v11;
  *(_DWORD *)(v3 + 12) = v4 - v10;
  if (v6 < v7)
    return result;
  v14 = ((v11 << 7) + 128) >> 8;
  if ((v13 & 0x80000000) == 0)
  {
    v15 = v14 << 56;
    v16 = v8 << v10;
    v17 = v12 - (v14 << 56);
    if (v12 < v14 << 56)
      goto LABEL_8;
    goto LABEL_7;
  }
  v41 = *(unint64_t **)(v3 + 24);
  v42 = *(_QWORD *)(v3 + 16) - (_QWORD)v41;
  v43 = 8 * v42;
  v44 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
  if (v44)
  {
    if (v42 >= 9)
      v45 = 9;
    else
      v45 = *(_QWORD *)(v3 + 16) - (_QWORD)v41;
    result = v44(*(_QWORD *)(v3 + 40), v41, v3 + 48, v45);
    v41 = (unint64_t *)(v3 + 48);
  }
  v46 = 48 - v13;
  if (v43 < 0x41)
  {
    v61 = 56 - v43 - v13;
    if (v61 >= 0)
      v13 += 0x40000000;
    if (v43)
      v62 = 1;
    else
      v62 = v61 <= -1;
    v63 = v61 & ~(v61 >> 31);
    if (!v62 || v46 < v63)
    {
      v48 = v41;
    }
    else
    {
      v221 = v10 - v4 + 40;
      if (v221 >= v63 - 1)
        v221 = v63 - 1;
      v222 = v10 - v4 - v221 + 47;
      v48 = v41;
      v223 = v46;
      if (v222 < 0x78)
        goto LABEL_745;
      v224 = (int8x16_t)v12;
      v225 = (int32x4_t)v13;
      v226 = vdupq_n_s32(v46);
      v227 = 0uLL;
      v228 = vaddq_s32(v226, (int32x4_t)xmmword_208F3A6C0);
      v229 = vaddq_s32(v226, (int32x4_t)xmmword_208F3A6D0);
      v230 = vaddq_s32(v226, (int32x4_t)xmmword_208F3A6A0);
      v231 = vaddq_s32(v226, (int32x4_t)xmmword_208F3A6B0);
      v232.i64[0] = 0x800000008;
      v232.i64[1] = 0x800000008;
      v233.i64[0] = 0x7F0000007FLL;
      v233.i64[1] = 0x7F0000007FLL;
      v234 = (v222 >> 3) + 1;
      v235 = 0uLL;
      v236 = 0uLL;
      v237 = 0uLL;
      v48 = (unint64_t *)((char *)v41 + (v234 & 0x3FFFFFF0));
      v223 = v46 - 8 * (v234 & 0x3FFFFFF0);
      v238 = v234 & 0x3FFFFFF0;
      v239 = (uint8x16_t *)v41;
      v240 = 0uLL;
      v241 = 0uLL;
      v242 = 0uLL;
      v243 = 0uLL;
      v244 = 0uLL;
      v245 = 0uLL;
      do
      {
        v246 = *v239++;
        v247 = vmovl_high_u8(v246);
        v248 = vmovl_high_u16(v247);
        v249.i64[0] = v248.u32[0];
        v249.i64[1] = v248.u32[1];
        v250 = v249;
        v251 = vmovl_u16(*(uint16x4_t *)v247.i8);
        v249.i64[0] = v251.u32[2];
        v249.i64[1] = v251.u32[3];
        v252 = v249;
        v253 = vmovl_u8(*(uint8x8_t *)v246.i8);
        v254 = vmovl_high_u16(v253);
        v249.i64[0] = v254.u32[2];
        v249.i64[1] = v254.u32[3];
        v255 = v249;
        v249.i64[0] = v248.u32[2];
        v249.i64[1] = v248.u32[3];
        v256 = v249;
        v249.i64[0] = v251.u32[0];
        v249.i64[1] = v251.u32[1];
        v257 = v249;
        v249.i64[0] = v254.u32[0];
        v249.i64[1] = v254.u32[1];
        v258 = v249;
        v259 = vmovl_u16(*(uint16x4_t *)v253.i8);
        v249.i64[0] = v259.u32[2];
        v249.i64[1] = v259.u32[3];
        v260 = v249;
        v249.i64[0] = v259.u32[0];
        v249.i64[1] = v259.u32[1];
        v261 = v249;
        v249.i64[0] = v231.u32[0];
        v249.i64[1] = v231.u32[1];
        v262 = (int8x16_t)vshlq_u64(v261, v249);
        v249.i64[0] = v231.u32[2];
        v249.i64[1] = v231.u32[3];
        v263 = (int8x16_t)vshlq_u64(v260, v249);
        v249.i64[0] = v230.u32[0];
        v249.i64[1] = v230.u32[1];
        v264 = (int8x16_t)vshlq_u64(v258, v249);
        v249.i64[0] = v229.u32[0];
        v249.i64[1] = v229.u32[1];
        v265 = (int8x16_t)vshlq_u64(v257, v249);
        v249.i64[0] = v228.u32[2];
        v249.i64[1] = v228.u32[3];
        v266 = (int8x16_t)vshlq_u64(v256, v249);
        v249.i64[0] = v230.u32[2];
        v249.i64[1] = v230.u32[3];
        v267 = (int8x16_t)vshlq_u64(v255, v249);
        v249.i64[0] = v229.u32[2];
        v249.i64[1] = v229.u32[3];
        v268 = (int8x16_t)vshlq_u64(v252, v249);
        v249.i64[0] = v228.u32[0];
        v249.i64[1] = v228.u32[1];
        v241 = vorrq_s8((int8x16_t)vshlq_u64(v250, v249), v241);
        v240 = vorrq_s8(v268, v240);
        v236 = vorrq_s8(v267, v236);
        v242 = vorrq_s8(v266, v242);
        v237 = vorrq_s8(v265, v237);
        v235 = vorrq_s8(v264, v235);
        v227 = vorrq_s8(v263, v227);
        v224 = vorrq_s8(v262, v224);
        v225 = vaddq_s32(v225, v232);
        v243 = vaddq_s32(v243, v232);
        v244 = vaddq_s32(v244, v232);
        v245 = vaddq_s32(v245, v232);
        v231 = vaddq_s32(v231, v233);
        v230 = vaddq_s32(v230, v233);
        v229 = vaddq_s32(v229, v233);
        v228 = vaddq_s32(v228, v233);
        v238 -= 16;
      }
      while (v238);
      v13 = vaddvq_s32(vaddq_s32(vaddq_s32(v225, v244), vaddq_s32(v243, v245)));
      v269 = vorrq_s8(vorrq_s8(vorrq_s8(v224, v237), vorrq_s8(v235, v241)), vorrq_s8(vorrq_s8(v227, v240), vorrq_s8(v236, v242)));
      v12 = (unint64_t)vorr_s8(*(int8x8_t *)v269.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v269, v269, 8uLL));
      if ((v234 & 0x3FFFFFF0) != v234)
      {
LABEL_745:
        do
        {
          v13 += 8;
          v270 = *(unsigned __int8 *)v48;
          v48 = (unint64_t *)((char *)v48 + 1);
          v12 |= (unint64_t)v270 << v223;
          v223 -= 8;
        }
        while (v223 >= v63);
      }
    }
  }
  else
  {
    v47 = (v46 & 0xFFFFFFF8) + 8;
    v13 += v47;
    v48 = (unint64_t *)((char *)v41 + (v47 >> 3));
    v12 = (bswap64(*v41) >> (56 - (v46 & 0xF8u)) << (v46 & 7)) | *(_QWORD *)v3;
  }
  *(_QWORD *)(v3 + 24) += (char *)v48 - (char *)v41;
  v15 = v14 << 56;
  v16 = v12;
  v17 = v12 - (v14 << 56);
  if (v12 >= v14 << 56)
  {
LABEL_7:
    LODWORD(v14) = *(_DWORD *)(v3 + 8) - v14;
    v16 = v17;
  }
LABEL_8:
  v18 = vpx_norm[v14];
  v19 = v16 << v18;
  v20 = v13 - v18;
  *(_QWORD *)v3 = v16 << v18;
  *(_DWORD *)(v3 + 8) = (_DWORD)v14 << v18;
  *(_DWORD *)(v3 + 12) = v13 - v18;
  v21 = (((_DWORD)v14 << v18 << 7) + 128) >> 8;
  v1692 = a2;
  if (v12 >= v15)
  {
    if ((v20 & 0x80000000) != 0)
    {
      v33 = *(unint64_t **)(v3 + 24);
      v34 = *(_QWORD *)(v3 + 16) - (_QWORD)v33;
      v35 = 8 * v34;
      v36 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
      if (v36)
      {
        if (v34 >= 9)
          v37 = 9;
        else
          v37 = *(_QWORD *)(v3 + 16) - (_QWORD)v33;
        v36(*(_QWORD *)(v3 + 40), v33, v3 + 48, v37);
        v33 = (unint64_t *)(v3 + 48);
      }
      v38 = 48 - v20;
      if (v35 < 0x41)
      {
        v115 = 56 - v35 - v20;
        if (v115 >= 0)
          v20 += 0x40000000;
        if (v35)
          v116 = 1;
        else
          v116 = v115 <= -1;
        if (v116 && (v117 = v115 & ~(v115 >> 31), v38 >= v117))
        {
          v118 = v18 - v13 + 40;
          if (v118 >= v117 - 1)
            v118 = v117 - 1;
          v119 = v18 - v13 - v118 + 47;
          v40 = v33;
          v120 = v38;
          if (v119 < 0x78)
            goto LABEL_746;
          v121 = (int8x16_t)v19;
          v122 = (int32x4_t)v20;
          v123 = vdupq_n_s32(v38);
          v124 = 0uLL;
          v125 = vaddq_s32(v123, (int32x4_t)xmmword_208F3A6C0);
          v126 = vaddq_s32(v123, (int32x4_t)xmmword_208F3A6D0);
          v127 = vaddq_s32(v123, (int32x4_t)xmmword_208F3A6A0);
          v128 = vaddq_s32(v123, (int32x4_t)xmmword_208F3A6B0);
          v129.i64[0] = 0x800000008;
          v129.i64[1] = 0x800000008;
          v130.i64[0] = 0x7F0000007FLL;
          v130.i64[1] = 0x7F0000007FLL;
          v131 = (v119 >> 3) + 1;
          v132 = 0uLL;
          v133 = 0uLL;
          v134 = 0uLL;
          v40 = (unint64_t *)((char *)v33 + (v131 & 0x3FFFFFF0));
          v120 = v38 - 8 * (v131 & 0x3FFFFFF0);
          v135 = v131 & 0x3FFFFFF0;
          v136 = (uint8x16_t *)v33;
          v137 = 0uLL;
          v138 = 0uLL;
          v139 = 0uLL;
          v140 = 0uLL;
          v141 = 0uLL;
          v142 = 0uLL;
          do
          {
            v143 = *v136++;
            v144 = vmovl_high_u8(v143);
            v145 = vmovl_high_u16(v144);
            v146.i64[0] = v145.u32[0];
            v146.i64[1] = v145.u32[1];
            v147 = v146;
            v148 = vmovl_u16(*(uint16x4_t *)v144.i8);
            v146.i64[0] = v148.u32[2];
            v146.i64[1] = v148.u32[3];
            v149 = v146;
            v150 = vmovl_u8(*(uint8x8_t *)v143.i8);
            v151 = vmovl_high_u16(v150);
            v146.i64[0] = v151.u32[2];
            v146.i64[1] = v151.u32[3];
            v152 = v146;
            v146.i64[0] = v145.u32[2];
            v146.i64[1] = v145.u32[3];
            v153 = v146;
            v146.i64[0] = v148.u32[0];
            v146.i64[1] = v148.u32[1];
            v154 = v146;
            v146.i64[0] = v151.u32[0];
            v146.i64[1] = v151.u32[1];
            v155 = v146;
            v156 = vmovl_u16(*(uint16x4_t *)v150.i8);
            v146.i64[0] = v156.u32[2];
            v146.i64[1] = v156.u32[3];
            v157 = v146;
            v146.i64[0] = v156.u32[0];
            v146.i64[1] = v156.u32[1];
            v158 = v146;
            v146.i64[0] = v128.u32[0];
            v146.i64[1] = v128.u32[1];
            v159 = (int8x16_t)vshlq_u64(v158, v146);
            v146.i64[0] = v128.u32[2];
            v146.i64[1] = v128.u32[3];
            v160 = (int8x16_t)vshlq_u64(v157, v146);
            v146.i64[0] = v127.u32[0];
            v146.i64[1] = v127.u32[1];
            v161 = (int8x16_t)vshlq_u64(v155, v146);
            v146.i64[0] = v126.u32[0];
            v146.i64[1] = v126.u32[1];
            v162 = (int8x16_t)vshlq_u64(v154, v146);
            v146.i64[0] = v125.u32[2];
            v146.i64[1] = v125.u32[3];
            v163 = (int8x16_t)vshlq_u64(v153, v146);
            v146.i64[0] = v127.u32[2];
            v146.i64[1] = v127.u32[3];
            v164 = (int8x16_t)vshlq_u64(v152, v146);
            v146.i64[0] = v126.u32[2];
            v146.i64[1] = v126.u32[3];
            v165 = (int8x16_t)vshlq_u64(v149, v146);
            v146.i64[0] = v125.u32[0];
            v146.i64[1] = v125.u32[1];
            v138 = vorrq_s8((int8x16_t)vshlq_u64(v147, v146), v138);
            v137 = vorrq_s8(v165, v137);
            v133 = vorrq_s8(v164, v133);
            v139 = vorrq_s8(v163, v139);
            v134 = vorrq_s8(v162, v134);
            v132 = vorrq_s8(v161, v132);
            v124 = vorrq_s8(v160, v124);
            v121 = vorrq_s8(v159, v121);
            v122 = vaddq_s32(v122, v129);
            v140 = vaddq_s32(v140, v129);
            v141 = vaddq_s32(v141, v129);
            v142 = vaddq_s32(v142, v129);
            v128 = vaddq_s32(v128, v130);
            v127 = vaddq_s32(v127, v130);
            v126 = vaddq_s32(v126, v130);
            v125 = vaddq_s32(v125, v130);
            v135 -= 16;
          }
          while (v135);
          v20 = vaddvq_s32(vaddq_s32(vaddq_s32(v122, v141), vaddq_s32(v140, v142)));
          v166 = vorrq_s8(vorrq_s8(vorrq_s8(v121, v134), vorrq_s8(v132, v138)), vorrq_s8(vorrq_s8(v124, v137), vorrq_s8(v133, v139)));
          v19 = (unint64_t)vorr_s8(*(int8x8_t *)v166.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v166, v166, 8uLL));
          if ((v131 & 0x3FFFFFF0) != v131)
          {
LABEL_746:
            do
            {
              v20 += 8;
              v167 = *(unsigned __int8 *)v40;
              v40 = (unint64_t *)((char *)v40 + 1);
              v19 |= (unint64_t)v167 << v120;
              v120 -= 8;
            }
            while (v120 >= v117);
          }
        }
        else
        {
          v40 = v33;
        }
      }
      else
      {
        v39 = (v38 & 0xFFFFFFF8) + 8;
        v20 += v39;
        v40 = (unint64_t *)((char *)v33 + (v39 >> 3));
        v19 = (bswap64(*v33) >> (56 - (v38 & 0xF8u)) << (v38 & 7)) | *(_QWORD *)v3;
      }
      *(_QWORD *)(v3 + 24) += (char *)v40 - (char *)v33;
    }
    v271 = v21 << 56;
    v272 = v19;
    v273 = v19 - (v21 << 56);
    if (v19 >= v21 << 56)
    {
      LODWORD(v21) = *(_DWORD *)(v3 + 8) - v21;
      v272 = v273;
    }
    v274 = vpx_norm[v21];
    v275 = v272 << v274;
    v276 = v20 - v274;
    *(_QWORD *)v3 = v272 << v274;
    *(_DWORD *)(v3 + 8) = (_DWORD)v21 << v274;
    *(_DWORD *)(v3 + 12) = v20 - v274;
    v277 = (((_DWORD)v21 << v274 << 7) + 128) >> 8;
    if (v19 < v271)
    {
      if ((v276 & 0x80000000) != 0)
      {
        v288 = *(unint64_t **)(v3 + 24);
        v289 = *(_QWORD *)(v3 + 16) - (_QWORD)v288;
        v290 = 8 * v289;
        v291 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
        if (v291)
        {
          if (v289 >= 9)
            v292 = 9;
          else
            v292 = *(_QWORD *)(v3 + 16) - (_QWORD)v288;
          v291(*(_QWORD *)(v3 + 40), v288, v3 + 48, v292);
          v288 = (unint64_t *)(v3 + 48);
        }
        v293 = 48 - v276;
        if (v290 < 0x41)
        {
          v367 = 56 - v290 - v276;
          if (v367 >= 0)
            v276 += 0x40000000;
          if (v290)
            v368 = 1;
          else
            v368 = v367 <= -1;
          if (v368 && (v369 = v367 & ~(v367 >> 31), v293 >= v369))
          {
            v370 = v274 - v20 + 40;
            if (v370 >= v369 - 1)
              v370 = v369 - 1;
            v371 = v274 - v20 - v370 + 47;
            v295 = v288;
            v372 = v293;
            if (v371 < 0x78)
              goto LABEL_747;
            v373 = (int8x16_t)v275;
            v374 = (int32x4_t)v276;
            v375 = vdupq_n_s32(v293);
            v376 = 0uLL;
            v377 = vaddq_s32(v375, (int32x4_t)xmmword_208F3A6C0);
            v378 = vaddq_s32(v375, (int32x4_t)xmmword_208F3A6D0);
            v379 = vaddq_s32(v375, (int32x4_t)xmmword_208F3A6A0);
            v380 = vaddq_s32(v375, (int32x4_t)xmmword_208F3A6B0);
            v381.i64[0] = 0x800000008;
            v381.i64[1] = 0x800000008;
            v382.i64[0] = 0x7F0000007FLL;
            v382.i64[1] = 0x7F0000007FLL;
            v383 = (v371 >> 3) + 1;
            v384 = 0uLL;
            v385 = 0uLL;
            v386 = 0uLL;
            v295 = (unint64_t *)((char *)v288 + (v383 & 0x3FFFFFF0));
            v372 = v293 - 8 * (v383 & 0x3FFFFFF0);
            v387 = v383 & 0x3FFFFFF0;
            v388 = (uint8x16_t *)v288;
            v389 = 0uLL;
            v390 = 0uLL;
            v391 = 0uLL;
            v392 = 0uLL;
            v393 = 0uLL;
            v394 = 0uLL;
            do
            {
              v395 = *v388++;
              v396 = vmovl_high_u8(v395);
              v397 = vmovl_high_u16(v396);
              v398.i64[0] = v397.u32[0];
              v398.i64[1] = v397.u32[1];
              v399 = v398;
              v400 = vmovl_u16(*(uint16x4_t *)v396.i8);
              v398.i64[0] = v400.u32[2];
              v398.i64[1] = v400.u32[3];
              v401 = v398;
              v402 = vmovl_u8(*(uint8x8_t *)v395.i8);
              v403 = vmovl_high_u16(v402);
              v398.i64[0] = v403.u32[2];
              v398.i64[1] = v403.u32[3];
              v404 = v398;
              v398.i64[0] = v397.u32[2];
              v398.i64[1] = v397.u32[3];
              v405 = v398;
              v398.i64[0] = v400.u32[0];
              v398.i64[1] = v400.u32[1];
              v406 = v398;
              v398.i64[0] = v403.u32[0];
              v398.i64[1] = v403.u32[1];
              v407 = v398;
              v408 = vmovl_u16(*(uint16x4_t *)v402.i8);
              v398.i64[0] = v408.u32[2];
              v398.i64[1] = v408.u32[3];
              v409 = v398;
              v398.i64[0] = v408.u32[0];
              v398.i64[1] = v408.u32[1];
              v410 = v398;
              v398.i64[0] = v380.u32[0];
              v398.i64[1] = v380.u32[1];
              v411 = (int8x16_t)vshlq_u64(v410, v398);
              v398.i64[0] = v380.u32[2];
              v398.i64[1] = v380.u32[3];
              v412 = (int8x16_t)vshlq_u64(v409, v398);
              v398.i64[0] = v379.u32[0];
              v398.i64[1] = v379.u32[1];
              v413 = (int8x16_t)vshlq_u64(v407, v398);
              v398.i64[0] = v378.u32[0];
              v398.i64[1] = v378.u32[1];
              v414 = (int8x16_t)vshlq_u64(v406, v398);
              v398.i64[0] = v377.u32[2];
              v398.i64[1] = v377.u32[3];
              v415 = (int8x16_t)vshlq_u64(v405, v398);
              v398.i64[0] = v379.u32[2];
              v398.i64[1] = v379.u32[3];
              v416 = (int8x16_t)vshlq_u64(v404, v398);
              v398.i64[0] = v378.u32[2];
              v398.i64[1] = v378.u32[3];
              v417 = (int8x16_t)vshlq_u64(v401, v398);
              v398.i64[0] = v377.u32[0];
              v398.i64[1] = v377.u32[1];
              v390 = vorrq_s8((int8x16_t)vshlq_u64(v399, v398), v390);
              v389 = vorrq_s8(v417, v389);
              v385 = vorrq_s8(v416, v385);
              v391 = vorrq_s8(v415, v391);
              v386 = vorrq_s8(v414, v386);
              v384 = vorrq_s8(v413, v384);
              v376 = vorrq_s8(v412, v376);
              v373 = vorrq_s8(v411, v373);
              v374 = vaddq_s32(v374, v381);
              v392 = vaddq_s32(v392, v381);
              v393 = vaddq_s32(v393, v381);
              v394 = vaddq_s32(v394, v381);
              v380 = vaddq_s32(v380, v382);
              v379 = vaddq_s32(v379, v382);
              v378 = vaddq_s32(v378, v382);
              v377 = vaddq_s32(v377, v382);
              v387 -= 16;
            }
            while (v387);
            v276 = vaddvq_s32(vaddq_s32(vaddq_s32(v374, v393), vaddq_s32(v392, v394)));
            v418 = vorrq_s8(vorrq_s8(vorrq_s8(v373, v386), vorrq_s8(v384, v390)), vorrq_s8(vorrq_s8(v376, v389), vorrq_s8(v385, v391)));
            v275 = (unint64_t)vorr_s8(*(int8x8_t *)v418.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v418, v418, 8uLL));
            if ((v383 & 0x3FFFFFF0) != v383)
            {
LABEL_747:
              do
              {
                v276 += 8;
                v419 = *(unsigned __int8 *)v295;
                v295 = (unint64_t *)((char *)v295 + 1);
                v275 |= (unint64_t)v419 << v372;
                v372 -= 8;
              }
              while (v372 >= v369);
            }
          }
          else
          {
            v295 = v288;
          }
        }
        else
        {
          v294 = (v293 & 0xFFFFFFF8) + 8;
          v276 += v294;
          v295 = (unint64_t *)((char *)v288 + (v294 >> 3));
          v275 = (bswap64(*v288) >> (56 - (v293 & 0xF8u)) << (v293 & 7)) | *(_QWORD *)v3;
        }
        *(_QWORD *)(v3 + 24) += (char *)v295 - (char *)v288;
        v278 = v275 - (v277 << 56);
        if (v275 < v277 << 56)
          goto LABEL_121;
      }
      else
      {
        v278 = v275 - (v277 << 56);
        if (v275 < v277 << 56)
        {
LABEL_121:
          v279 = 16;
          goto LABEL_287;
        }
      }
      LODWORD(v277) = *(_DWORD *)(v3 + 8) - v277;
      v279 = 24;
      v275 = v278;
LABEL_287:
      v637 = vpx_norm[v277];
      v638 = v275 << v637;
      *(_QWORD *)v3 = v275 << v637;
      v639 = (((_DWORD)v277 << v637 << 7) + 128) >> 8;
      v640 = v276 - v637;
      *(_DWORD *)(v3 + 8) = (_DWORD)v277 << v637;
      *(_DWORD *)(v3 + 12) = v276 - v637;
      if ((int)(v276 - v637) < 0)
      {
        v643 = *(unint64_t **)(v3 + 24);
        v644 = *(_QWORD *)(v3 + 16) - (_QWORD)v643;
        v645 = 8 * v644;
        v646 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
        if (v646)
        {
          if (v644 >= 9)
            v647 = 9;
          else
            v647 = *(_QWORD *)(v3 + 16) - (_QWORD)v643;
          v648 = v279;
          v646(*(_QWORD *)(v3 + 40), v643, v3 + 48, v647);
          v279 = v648;
          v643 = (unint64_t *)(v3 + 48);
        }
        v649 = 48 - v640;
        if (v645 < 0x41)
        {
          v652 = 56 - v645 - v640;
          if (v652 >= 0)
            v640 += 0x40000000;
          if (v645)
            v653 = 1;
          else
            v653 = v652 <= -1;
          v654 = v652 & ~(v652 >> 31);
          if (!v653 || v649 < v654)
          {
            v651 = v643;
          }
          else
          {
            v762 = v637 - v276 + 40;
            if (v762 >= v654 - 1)
              v762 = v654 - 1;
            v763 = v637 - v276 - v762 + 47;
            v651 = v643;
            v764 = v649;
            if (v763 < 0x78)
              goto LABEL_748;
            v765 = (int8x16_t)v638;
            v766 = (int32x4_t)v640;
            v767 = vdupq_n_s32(v649);
            v768 = 0uLL;
            v769 = vaddq_s32(v767, (int32x4_t)xmmword_208F3A6C0);
            v770 = vaddq_s32(v767, (int32x4_t)xmmword_208F3A6D0);
            v771 = vaddq_s32(v767, (int32x4_t)xmmword_208F3A6A0);
            v772 = vaddq_s32(v767, (int32x4_t)xmmword_208F3A6B0);
            v773.i64[0] = 0x800000008;
            v773.i64[1] = 0x800000008;
            v774.i64[0] = 0x7F0000007FLL;
            v774.i64[1] = 0x7F0000007FLL;
            v775 = (v763 >> 3) + 1;
            v776 = 0uLL;
            v777 = 0uLL;
            v778 = 0uLL;
            v651 = (unint64_t *)((char *)v643 + (v775 & 0x3FFFFFF0));
            v764 = v649 - 8 * (v775 & 0x3FFFFFF0);
            v779 = v775 & 0x3FFFFFF0;
            v780 = (uint8x16_t *)v643;
            v781 = 0uLL;
            v782 = 0uLL;
            v783 = 0uLL;
            v784 = 0uLL;
            v785 = 0uLL;
            v786 = 0uLL;
            do
            {
              v787 = *v780++;
              v788 = vmovl_high_u8(v787);
              v789 = vmovl_high_u16(v788);
              v790.i64[0] = v789.u32[0];
              v790.i64[1] = v789.u32[1];
              v791 = v790;
              v792 = vmovl_u16(*(uint16x4_t *)v788.i8);
              v790.i64[0] = v792.u32[2];
              v790.i64[1] = v792.u32[3];
              v793 = v790;
              v794 = vmovl_u8(*(uint8x8_t *)v787.i8);
              v795 = vmovl_high_u16(v794);
              v790.i64[0] = v795.u32[2];
              v790.i64[1] = v795.u32[3];
              v796 = v790;
              v790.i64[0] = v789.u32[2];
              v790.i64[1] = v789.u32[3];
              v797 = v790;
              v790.i64[0] = v792.u32[0];
              v790.i64[1] = v792.u32[1];
              v798 = v790;
              v790.i64[0] = v795.u32[0];
              v790.i64[1] = v795.u32[1];
              v799 = v790;
              v800 = vmovl_u16(*(uint16x4_t *)v794.i8);
              v790.i64[0] = v800.u32[2];
              v790.i64[1] = v800.u32[3];
              v801 = v790;
              v790.i64[0] = v800.u32[0];
              v790.i64[1] = v800.u32[1];
              v802 = v790;
              v790.i64[0] = v772.u32[0];
              v790.i64[1] = v772.u32[1];
              v803 = (int8x16_t)vshlq_u64(v802, v790);
              v790.i64[0] = v772.u32[2];
              v790.i64[1] = v772.u32[3];
              v804 = (int8x16_t)vshlq_u64(v801, v790);
              v790.i64[0] = v771.u32[0];
              v790.i64[1] = v771.u32[1];
              v805 = (int8x16_t)vshlq_u64(v799, v790);
              v790.i64[0] = v770.u32[0];
              v790.i64[1] = v770.u32[1];
              v806 = (int8x16_t)vshlq_u64(v798, v790);
              v790.i64[0] = v769.u32[2];
              v790.i64[1] = v769.u32[3];
              v807 = (int8x16_t)vshlq_u64(v797, v790);
              v790.i64[0] = v771.u32[2];
              v790.i64[1] = v771.u32[3];
              v808 = (int8x16_t)vshlq_u64(v796, v790);
              v790.i64[0] = v770.u32[2];
              v790.i64[1] = v770.u32[3];
              v809 = (int8x16_t)vshlq_u64(v793, v790);
              v790.i64[0] = v769.u32[0];
              v790.i64[1] = v769.u32[1];
              v782 = vorrq_s8((int8x16_t)vshlq_u64(v791, v790), v782);
              v781 = vorrq_s8(v809, v781);
              v777 = vorrq_s8(v808, v777);
              v783 = vorrq_s8(v807, v783);
              v778 = vorrq_s8(v806, v778);
              v776 = vorrq_s8(v805, v776);
              v768 = vorrq_s8(v804, v768);
              v765 = vorrq_s8(v803, v765);
              v766 = vaddq_s32(v766, v773);
              v784 = vaddq_s32(v784, v773);
              v785 = vaddq_s32(v785, v773);
              v786 = vaddq_s32(v786, v773);
              v772 = vaddq_s32(v772, v774);
              v771 = vaddq_s32(v771, v774);
              v770 = vaddq_s32(v770, v774);
              v769 = vaddq_s32(v769, v774);
              v779 -= 16;
            }
            while (v779);
            v640 = vaddvq_s32(vaddq_s32(vaddq_s32(v766, v785), vaddq_s32(v784, v786)));
            v810 = vorrq_s8(vorrq_s8(vorrq_s8(v765, v778), vorrq_s8(v776, v782)), vorrq_s8(vorrq_s8(v768, v781), vorrq_s8(v777, v783)));
            v638 = (unint64_t)vorr_s8(*(int8x8_t *)v810.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v810, v810, 8uLL));
            if ((v775 & 0x3FFFFFF0) != v775)
            {
LABEL_748:
              do
              {
                v640 += 8;
                v811 = *(unsigned __int8 *)v651;
                v651 = (unint64_t *)((char *)v651 + 1);
                v638 |= (unint64_t)v811 << v764;
                v764 -= 8;
              }
              while (v764 >= v654);
            }
          }
        }
        else
        {
          v650 = (v649 & 0xFFFFFFF8) + 8;
          v640 += v650;
          v651 = (unint64_t *)((char *)v643 + (v650 >> 3));
          v638 = (bswap64(*v643) >> (56 - (v649 & 0xF8u)) << (v649 & 7)) | *(_QWORD *)v3;
        }
        *(_QWORD *)(v3 + 24) += (char *)v651 - (char *)v643;
        v641 = v638 - (v639 << 56);
        if (v638 < v639 << 56)
          goto LABEL_289;
      }
      else
      {
        v641 = v638 - (v639 << 56);
        if (v638 < v639 << 56)
        {
LABEL_289:
          v642 = 0;
          goto LABEL_349;
        }
      }
      LODWORD(v639) = *(_DWORD *)(v3 + 8) - v639;
      v642 = 4;
      v638 = v641;
LABEL_349:
      v812 = vpx_norm[v639];
      v813 = v638 << v812;
      *(_QWORD *)v3 = v813;
      v814 = (((_DWORD)v639 << v812 << 7) + 128) >> 8;
      v815 = v640 - v812;
      *(_DWORD *)(v3 + 8) = (_DWORD)v639 << v812;
      *(_DWORD *)(v3 + 12) = v640 - v812;
      if ((int)(v640 - v812) < 0)
      {
        v817 = *(unint64_t **)(v3 + 24);
        v818 = *(_QWORD *)(v3 + 16) - (_QWORD)v817;
        v819 = 8 * v818;
        v820 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
        if (v820)
        {
          if (v818 >= 9)
            v821 = 9;
          else
            v821 = *(_QWORD *)(v3 + 16) - (_QWORD)v817;
          v822 = v279;
          v823 = v642;
          v820(*(_QWORD *)(v3 + 40), v817, v3 + 48, v821);
          v642 = v823;
          v279 = v822;
          v817 = (unint64_t *)(v3 + 48);
        }
        v824 = 48 - v815;
        if (v819 < 0x41)
        {
          v827 = 56 - v819 - v815;
          if (v827 >= 0)
            v815 += 0x40000000;
          if (v819)
            v828 = 1;
          else
            v828 = v827 <= -1;
          v829 = v827 & ~(v827 >> 31);
          if (!v828 || v824 < v829)
          {
            v826 = v817;
          }
          else
          {
            v831 = v812 - v640 + 40;
            if (v831 >= v829 - 1)
              v831 = v829 - 1;
            v832 = v812 - v640 - v831 + 47;
            v826 = v817;
            v833 = v824;
            if (v832 < 0x78)
              goto LABEL_749;
            v834 = (int8x16_t)v813;
            v835 = (int32x4_t)v815;
            v836 = vdupq_n_s32(v824);
            v837 = 0uLL;
            v838 = vaddq_s32(v836, (int32x4_t)xmmword_208F3A6C0);
            v839 = vaddq_s32(v836, (int32x4_t)xmmword_208F3A6D0);
            v840 = vaddq_s32(v836, (int32x4_t)xmmword_208F3A6A0);
            v841 = vaddq_s32(v836, (int32x4_t)xmmword_208F3A6B0);
            v842.i64[0] = 0x800000008;
            v842.i64[1] = 0x800000008;
            v843.i64[0] = 0x7F0000007FLL;
            v843.i64[1] = 0x7F0000007FLL;
            v844 = (v832 >> 3) + 1;
            v845 = 0uLL;
            v846 = 0uLL;
            v847 = 0uLL;
            v826 = (unint64_t *)((char *)v817 + (v844 & 0x3FFFFFF0));
            v833 = v824 - 8 * (v844 & 0x3FFFFFF0);
            v848 = v844 & 0x3FFFFFF0;
            v849 = (uint8x16_t *)v817;
            v850 = 0uLL;
            v851 = 0uLL;
            v852 = 0uLL;
            v853 = 0uLL;
            v854 = 0uLL;
            v855 = 0uLL;
            do
            {
              v856 = *v849++;
              v857 = vmovl_high_u8(v856);
              v858 = vmovl_high_u16(v857);
              v859.i64[0] = v858.u32[0];
              v859.i64[1] = v858.u32[1];
              v860 = v859;
              v861 = vmovl_u16(*(uint16x4_t *)v857.i8);
              v859.i64[0] = v861.u32[2];
              v859.i64[1] = v861.u32[3];
              v862 = v859;
              v863 = vmovl_u8(*(uint8x8_t *)v856.i8);
              v864 = vmovl_high_u16(v863);
              v859.i64[0] = v864.u32[2];
              v859.i64[1] = v864.u32[3];
              v865 = v859;
              v859.i64[0] = v858.u32[2];
              v859.i64[1] = v858.u32[3];
              v866 = v859;
              v859.i64[0] = v861.u32[0];
              v859.i64[1] = v861.u32[1];
              v867 = v859;
              v859.i64[0] = v864.u32[0];
              v859.i64[1] = v864.u32[1];
              v868 = v859;
              v869 = vmovl_u16(*(uint16x4_t *)v863.i8);
              v859.i64[0] = v869.u32[2];
              v859.i64[1] = v869.u32[3];
              v870 = v859;
              v859.i64[0] = v869.u32[0];
              v859.i64[1] = v869.u32[1];
              v871 = v859;
              v859.i64[0] = v841.u32[0];
              v859.i64[1] = v841.u32[1];
              v872 = (int8x16_t)vshlq_u64(v871, v859);
              v859.i64[0] = v841.u32[2];
              v859.i64[1] = v841.u32[3];
              v873 = (int8x16_t)vshlq_u64(v870, v859);
              v859.i64[0] = v840.u32[0];
              v859.i64[1] = v840.u32[1];
              v874 = (int8x16_t)vshlq_u64(v868, v859);
              v859.i64[0] = v839.u32[0];
              v859.i64[1] = v839.u32[1];
              v875 = (int8x16_t)vshlq_u64(v867, v859);
              v859.i64[0] = v838.u32[2];
              v859.i64[1] = v838.u32[3];
              v876 = (int8x16_t)vshlq_u64(v866, v859);
              v859.i64[0] = v840.u32[2];
              v859.i64[1] = v840.u32[3];
              v877 = (int8x16_t)vshlq_u64(v865, v859);
              v859.i64[0] = v839.u32[2];
              v859.i64[1] = v839.u32[3];
              v878 = (int8x16_t)vshlq_u64(v862, v859);
              v859.i64[0] = v838.u32[0];
              v859.i64[1] = v838.u32[1];
              v851 = vorrq_s8((int8x16_t)vshlq_u64(v860, v859), v851);
              v850 = vorrq_s8(v878, v850);
              v846 = vorrq_s8(v877, v846);
              v852 = vorrq_s8(v876, v852);
              v847 = vorrq_s8(v875, v847);
              v845 = vorrq_s8(v874, v845);
              v837 = vorrq_s8(v873, v837);
              v834 = vorrq_s8(v872, v834);
              v835 = vaddq_s32(v835, v842);
              v853 = vaddq_s32(v853, v842);
              v854 = vaddq_s32(v854, v842);
              v855 = vaddq_s32(v855, v842);
              v841 = vaddq_s32(v841, v843);
              v840 = vaddq_s32(v840, v843);
              v839 = vaddq_s32(v839, v843);
              v838 = vaddq_s32(v838, v843);
              v848 -= 16;
            }
            while (v848);
            v815 = vaddvq_s32(vaddq_s32(vaddq_s32(v835, v854), vaddq_s32(v853, v855)));
            v879 = vorrq_s8(vorrq_s8(vorrq_s8(v834, v847), vorrq_s8(v845, v851)), vorrq_s8(vorrq_s8(v837, v850), vorrq_s8(v846, v852)));
            v813 = (unint64_t)vorr_s8(*(int8x8_t *)v879.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v879, v879, 8uLL));
            if ((v844 & 0x3FFFFFF0) != v844)
            {
LABEL_749:
              do
              {
                v815 += 8;
                v880 = *(unsigned __int8 *)v826;
                v826 = (unint64_t *)((char *)v826 + 1);
                v813 |= (unint64_t)v880 << v833;
                v833 -= 8;
              }
              while (v833 >= v829);
            }
          }
        }
        else
        {
          v825 = (v824 & 0xFFFFFFF8) + 8;
          v815 += v825;
          v826 = (unint64_t *)((char *)v817 + (v825 >> 3));
          v813 = (bswap64(*v817) >> (56 - (v824 & 0xF8u)) << (v824 & 7)) | *(_QWORD *)v3;
        }
        *(_QWORD *)(v3 + 24) += (char *)v826 - (char *)v817;
        v816 = v813 - (v814 << 56);
        if (v813 < v814 << 56)
          goto LABEL_351;
      }
      else
      {
        v816 = v813 - (v814 << 56);
        if (v813 < v814 << 56)
        {
LABEL_351:
          result = 0;
          goto LABEL_379;
        }
      }
      LODWORD(v814) = *(_DWORD *)(v3 + 8) - v814;
      result = 2;
      v813 = v816;
LABEL_379:
      v881 = vpx_norm[v814];
      v882 = (_DWORD)v814 << v881;
      v883 = v813 << v881;
      *(_QWORD *)v3 = v883;
      v884 = (((_DWORD)v814 << v881 << 7) + 128) >> 8;
      v885 = v815 - v881;
      *(_DWORD *)(v3 + 8) = v882;
      *(_DWORD *)(v3 + 12) = v815 - v881;
      if ((int)(v815 - v881) < 0)
      {
        v888 = *(unint64_t **)(v3 + 24);
        v889 = *(_QWORD *)(v3 + 16) - (_QWORD)v888;
        v890 = 8 * v889;
        v891 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
        if (v891)
        {
          if (v889 >= 9)
            v892 = 9;
          else
            v892 = *(_QWORD *)(v3 + 16) - (_QWORD)v888;
          v1686 = v884;
          v893 = result;
          v894 = v279;
          v895 = v642;
          v891(*(_QWORD *)(v3 + 40), v888, v3 + 48, v892);
          result = v893;
          v884 = v1686;
          v642 = v895;
          v279 = v894;
          v888 = (unint64_t *)(v3 + 48);
        }
        v896 = 48 - v885;
        if (v890 < 0x41)
        {
          v899 = 56 - v890 - v885;
          if (v899 >= 0)
            v885 += 0x40000000;
          if (v890)
            v900 = 1;
          else
            v900 = v899 <= -1;
          v901 = v899 & ~(v899 >> 31);
          if (!v900 || v896 < v901)
          {
            v898 = v888;
            v475 = v1692;
          }
          else
          {
            v903 = v881 - v815 + 40;
            if (v903 >= v901 - 1)
              v903 = v901 - 1;
            v904 = v881 - v815 - v903 + 47;
            v898 = v888;
            v905 = v896;
            v475 = v1692;
            if (v904 < 0x78)
              goto LABEL_750;
            v906 = (int8x16_t)v883;
            v907 = (int32x4_t)v885;
            v908 = vdupq_n_s32(v896);
            v909 = 0uLL;
            v910 = vaddq_s32(v908, (int32x4_t)xmmword_208F3A6C0);
            v911 = vaddq_s32(v908, (int32x4_t)xmmword_208F3A6D0);
            v912 = vaddq_s32(v908, (int32x4_t)xmmword_208F3A6A0);
            v913 = vaddq_s32(v908, (int32x4_t)xmmword_208F3A6B0);
            v914.i64[0] = 0x800000008;
            v914.i64[1] = 0x800000008;
            v915.i64[0] = 0x7F0000007FLL;
            v915.i64[1] = 0x7F0000007FLL;
            v916 = (v904 >> 3) + 1;
            v917 = 0uLL;
            v918 = 0uLL;
            v919 = 0uLL;
            v898 = (unint64_t *)((char *)v888 + (v916 & 0x3FFFFFF0));
            v905 = v896 - 8 * (v916 & 0x3FFFFFF0);
            v920 = v916 & 0x3FFFFFF0;
            v921 = (uint8x16_t *)v888;
            v922 = 0uLL;
            v923 = 0uLL;
            v924 = 0uLL;
            v925 = 0uLL;
            v926 = 0uLL;
            v927 = 0uLL;
            do
            {
              v928 = *v921++;
              v929 = vmovl_high_u8(v928);
              v930 = vmovl_high_u16(v929);
              v931.i64[0] = v930.u32[0];
              v931.i64[1] = v930.u32[1];
              v932 = v931;
              v933 = vmovl_u16(*(uint16x4_t *)v929.i8);
              v931.i64[0] = v933.u32[2];
              v931.i64[1] = v933.u32[3];
              v934 = v931;
              v935 = vmovl_u8(*(uint8x8_t *)v928.i8);
              v936 = vmovl_high_u16(v935);
              v931.i64[0] = v936.u32[2];
              v931.i64[1] = v936.u32[3];
              v937 = v931;
              v931.i64[0] = v930.u32[2];
              v931.i64[1] = v930.u32[3];
              v938 = v931;
              v931.i64[0] = v933.u32[0];
              v931.i64[1] = v933.u32[1];
              v939 = v931;
              v931.i64[0] = v936.u32[0];
              v931.i64[1] = v936.u32[1];
              v940 = v931;
              v941 = vmovl_u16(*(uint16x4_t *)v935.i8);
              v931.i64[0] = v941.u32[2];
              v931.i64[1] = v941.u32[3];
              v942 = v931;
              v931.i64[0] = v941.u32[0];
              v931.i64[1] = v941.u32[1];
              v943 = v931;
              v931.i64[0] = v913.u32[0];
              v931.i64[1] = v913.u32[1];
              v944 = (int8x16_t)vshlq_u64(v943, v931);
              v931.i64[0] = v913.u32[2];
              v931.i64[1] = v913.u32[3];
              v945 = (int8x16_t)vshlq_u64(v942, v931);
              v931.i64[0] = v912.u32[0];
              v931.i64[1] = v912.u32[1];
              v946 = (int8x16_t)vshlq_u64(v940, v931);
              v931.i64[0] = v911.u32[0];
              v931.i64[1] = v911.u32[1];
              v947 = (int8x16_t)vshlq_u64(v939, v931);
              v931.i64[0] = v910.u32[2];
              v931.i64[1] = v910.u32[3];
              v948 = (int8x16_t)vshlq_u64(v938, v931);
              v931.i64[0] = v912.u32[2];
              v931.i64[1] = v912.u32[3];
              v949 = (int8x16_t)vshlq_u64(v937, v931);
              v931.i64[0] = v911.u32[2];
              v931.i64[1] = v911.u32[3];
              v950 = (int8x16_t)vshlq_u64(v934, v931);
              v931.i64[0] = v910.u32[0];
              v931.i64[1] = v910.u32[1];
              v923 = vorrq_s8((int8x16_t)vshlq_u64(v932, v931), v923);
              v922 = vorrq_s8(v950, v922);
              v918 = vorrq_s8(v949, v918);
              v924 = vorrq_s8(v948, v924);
              v919 = vorrq_s8(v947, v919);
              v917 = vorrq_s8(v946, v917);
              v909 = vorrq_s8(v945, v909);
              v906 = vorrq_s8(v944, v906);
              v907 = vaddq_s32(v907, v914);
              v925 = vaddq_s32(v925, v914);
              v926 = vaddq_s32(v926, v914);
              v927 = vaddq_s32(v927, v914);
              v913 = vaddq_s32(v913, v915);
              v912 = vaddq_s32(v912, v915);
              v911 = vaddq_s32(v911, v915);
              v910 = vaddq_s32(v910, v915);
              v920 -= 16;
            }
            while (v920);
            v885 = vaddvq_s32(vaddq_s32(vaddq_s32(v907, v926), vaddq_s32(v925, v927)));
            v951 = vorrq_s8(vorrq_s8(vorrq_s8(v906, v919), vorrq_s8(v917, v923)), vorrq_s8(vorrq_s8(v909, v922), vorrq_s8(v918, v924)));
            v883 = (unint64_t)vorr_s8(*(int8x8_t *)v951.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v951, v951, 8uLL));
            if ((v916 & 0x3FFFFFF0) != v916)
            {
LABEL_750:
              do
              {
                v885 += 8;
                v952 = *(unsigned __int8 *)v898;
                v898 = (unint64_t *)((char *)v898 + 1);
                v883 |= (unint64_t)v952 << v905;
                v905 -= 8;
              }
              while (v905 >= v901);
            }
          }
        }
        else
        {
          v897 = (v896 & 0xFFFFFFF8) + 8;
          v885 += v897;
          v898 = (unint64_t *)((char *)v888 + (v897 >> 3));
          v883 = (bswap64(*v888) >> (56 - (v896 & 0xF8u)) << (v896 & 7)) | *(_QWORD *)v3;
          v475 = v1692;
        }
        *(_QWORD *)(v3 + 24) += (char *)v898 - (char *)v888;
        v886 = v883 - (v884 << 56);
        if (v883 < v884 << 56)
          goto LABEL_381;
      }
      else
      {
        v475 = v1692;
        v886 = v883 - (v884 << 56);
        if (v883 < v884 << 56)
        {
LABEL_381:
          v887 = 0;
LABEL_409:
          v953 = vpx_norm[v884];
          *(_QWORD *)v3 = v883 << v953;
          *(_DWORD *)(v3 + 8) = (_DWORD)v884 << v953;
          *(_DWORD *)(v3 + 12) = v885 - v953;
          v613 = v642 | v279 | result | v887;
          goto LABEL_729;
        }
      }
      LODWORD(v884) = *(_DWORD *)(v3 + 8) - v884;
      v887 = 1;
      v883 = v886;
      goto LABEL_409;
    }
    if ((v276 & 0x80000000) != 0)
    {
      v280 = *(unint64_t **)(v3 + 24);
      v281 = *(_QWORD *)(v3 + 16) - (_QWORD)v280;
      v282 = 8 * v281;
      v283 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
      if (v283)
      {
        if (v281 >= 9)
          v284 = 9;
        else
          v284 = *(_QWORD *)(v3 + 16) - (_QWORD)v280;
        v283(*(_QWORD *)(v3 + 40), v280, v3 + 48, v284);
        v280 = (unint64_t *)(v3 + 48);
      }
      v285 = 48 - v276;
      if (v282 < 0x41)
      {
        v314 = 56 - v282 - v276;
        if (v314 >= 0)
          v276 += 0x40000000;
        if (v282)
          v315 = 1;
        else
          v315 = v314 <= -1;
        if (v315 && (v316 = v314 & ~(v314 >> 31), v285 >= v316))
        {
          v317 = v274 - v20 + 40;
          if (v317 >= v316 - 1)
            v317 = v316 - 1;
          v318 = v274 - v20 - v317 + 47;
          v287 = v280;
          v319 = v285;
          if (v318 < 0x78)
            goto LABEL_751;
          v320 = (int8x16_t)v275;
          v321 = (int32x4_t)v276;
          v322 = vdupq_n_s32(v285);
          v323 = 0uLL;
          v324 = vaddq_s32(v322, (int32x4_t)xmmword_208F3A6C0);
          v325 = vaddq_s32(v322, (int32x4_t)xmmword_208F3A6D0);
          v326 = vaddq_s32(v322, (int32x4_t)xmmword_208F3A6A0);
          v327 = vaddq_s32(v322, (int32x4_t)xmmword_208F3A6B0);
          v328.i64[0] = 0x800000008;
          v328.i64[1] = 0x800000008;
          v329.i64[0] = 0x7F0000007FLL;
          v329.i64[1] = 0x7F0000007FLL;
          v330 = (v318 >> 3) + 1;
          v331 = 0uLL;
          v332 = 0uLL;
          v333 = 0uLL;
          v287 = (unint64_t *)((char *)v280 + (v330 & 0x3FFFFFF0));
          v319 = v285 - 8 * (v330 & 0x3FFFFFF0);
          v334 = v330 & 0x3FFFFFF0;
          v335 = (uint8x16_t *)v280;
          v336 = 0uLL;
          v337 = 0uLL;
          v338 = 0uLL;
          v339 = 0uLL;
          v340 = 0uLL;
          v341 = 0uLL;
          do
          {
            v342 = *v335++;
            v343 = vmovl_high_u8(v342);
            v344 = vmovl_high_u16(v343);
            v345.i64[0] = v344.u32[0];
            v345.i64[1] = v344.u32[1];
            v346 = v345;
            v347 = vmovl_u16(*(uint16x4_t *)v343.i8);
            v345.i64[0] = v347.u32[2];
            v345.i64[1] = v347.u32[3];
            v348 = v345;
            v349 = vmovl_u8(*(uint8x8_t *)v342.i8);
            v350 = vmovl_high_u16(v349);
            v345.i64[0] = v350.u32[2];
            v345.i64[1] = v350.u32[3];
            v351 = v345;
            v345.i64[0] = v344.u32[2];
            v345.i64[1] = v344.u32[3];
            v352 = v345;
            v345.i64[0] = v347.u32[0];
            v345.i64[1] = v347.u32[1];
            v353 = v345;
            v345.i64[0] = v350.u32[0];
            v345.i64[1] = v350.u32[1];
            v354 = v345;
            v355 = vmovl_u16(*(uint16x4_t *)v349.i8);
            v345.i64[0] = v355.u32[2];
            v345.i64[1] = v355.u32[3];
            v356 = v345;
            v345.i64[0] = v355.u32[0];
            v345.i64[1] = v355.u32[1];
            v357 = v345;
            v345.i64[0] = v327.u32[0];
            v345.i64[1] = v327.u32[1];
            v358 = (int8x16_t)vshlq_u64(v357, v345);
            v345.i64[0] = v327.u32[2];
            v345.i64[1] = v327.u32[3];
            v359 = (int8x16_t)vshlq_u64(v356, v345);
            v345.i64[0] = v326.u32[0];
            v345.i64[1] = v326.u32[1];
            v360 = (int8x16_t)vshlq_u64(v354, v345);
            v345.i64[0] = v325.u32[0];
            v345.i64[1] = v325.u32[1];
            v361 = (int8x16_t)vshlq_u64(v353, v345);
            v345.i64[0] = v324.u32[2];
            v345.i64[1] = v324.u32[3];
            v362 = (int8x16_t)vshlq_u64(v352, v345);
            v345.i64[0] = v326.u32[2];
            v345.i64[1] = v326.u32[3];
            v363 = (int8x16_t)vshlq_u64(v351, v345);
            v345.i64[0] = v325.u32[2];
            v345.i64[1] = v325.u32[3];
            v364 = (int8x16_t)vshlq_u64(v348, v345);
            v345.i64[0] = v324.u32[0];
            v345.i64[1] = v324.u32[1];
            v337 = vorrq_s8((int8x16_t)vshlq_u64(v346, v345), v337);
            v336 = vorrq_s8(v364, v336);
            v332 = vorrq_s8(v363, v332);
            v338 = vorrq_s8(v362, v338);
            v333 = vorrq_s8(v361, v333);
            v331 = vorrq_s8(v360, v331);
            v323 = vorrq_s8(v359, v323);
            v320 = vorrq_s8(v358, v320);
            v321 = vaddq_s32(v321, v328);
            v339 = vaddq_s32(v339, v328);
            v340 = vaddq_s32(v340, v328);
            v341 = vaddq_s32(v341, v328);
            v327 = vaddq_s32(v327, v329);
            v326 = vaddq_s32(v326, v329);
            v325 = vaddq_s32(v325, v329);
            v324 = vaddq_s32(v324, v329);
            v334 -= 16;
          }
          while (v334);
          v276 = vaddvq_s32(vaddq_s32(vaddq_s32(v321, v340), vaddq_s32(v339, v341)));
          v365 = vorrq_s8(vorrq_s8(vorrq_s8(v320, v333), vorrq_s8(v331, v337)), vorrq_s8(vorrq_s8(v323, v336), vorrq_s8(v332, v338)));
          v275 = (unint64_t)vorr_s8(*(int8x8_t *)v365.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v365, v365, 8uLL));
          if ((v330 & 0x3FFFFFF0) != v330)
          {
LABEL_751:
            do
            {
              v276 += 8;
              v366 = *(unsigned __int8 *)v287;
              v287 = (unint64_t *)((char *)v287 + 1);
              v275 |= (unint64_t)v366 << v319;
              v319 -= 8;
            }
            while (v319 >= v316);
          }
        }
        else
        {
          v287 = v280;
        }
      }
      else
      {
        v286 = (v285 & 0xFFFFFFF8) + 8;
        v276 += v286;
        v287 = (unint64_t *)((char *)v280 + (v286 >> 3));
        v275 = (bswap64(*v280) >> (56 - (v285 & 0xF8u)) << (v285 & 7)) | *(_QWORD *)v3;
      }
      *(_QWORD *)(v3 + 24) += (char *)v287 - (char *)v280;
    }
    v614 = v277 << 56;
    v615 = v275;
    v616 = v275 - (v277 << 56);
    if (v275 >= v277 << 56)
    {
      LODWORD(v277) = *(_DWORD *)(v3 + 8) - v277;
      v615 = v616;
    }
    v617 = vpx_norm[v277];
    v618 = v615 << v617;
    v619 = v276 - v617;
    *(_QWORD *)v3 = v615 << v617;
    *(_DWORD *)(v3 + 8) = (_DWORD)v277 << v617;
    *(_DWORD *)(v3 + 12) = v276 - v617;
    v620 = (((_DWORD)v277 << v617 << 7) + 128) >> 8;
    if (v275 < v614)
    {
      if ((v619 & 0x80000000) != 0)
      {
        v621 = *(unint64_t **)(v3 + 24);
        v622 = *(_QWORD *)(v3 + 16) - (_QWORD)v621;
        v623 = 8 * v622;
        v624 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
        if (v624)
        {
          if (v622 >= 9)
            v625 = 9;
          else
            v625 = *(_QWORD *)(v3 + 16) - (_QWORD)v621;
          v624(*(_QWORD *)(v3 + 40), v621, v3 + 48, v625);
          v621 = (unint64_t *)(v3 + 48);
        }
        v626 = 48 - v619;
        if (v623 < 0x41)
        {
          v656 = 56 - v623 - v619;
          if (v656 >= 0)
            v619 += 0x40000000;
          if (v623)
            v657 = 1;
          else
            v657 = v656 <= -1;
          if (v657 && (v658 = v656 & ~(v656 >> 31), v626 >= v658))
          {
            v659 = v617 - v276 + 40;
            if (v659 >= v658 - 1)
              v659 = v658 - 1;
            v660 = v617 - v276 - v659 + 47;
            v628 = v621;
            v661 = v626;
            if (v660 < 0x78)
              goto LABEL_752;
            v662 = (int8x16_t)v618;
            v663 = (int32x4_t)v619;
            v664 = vdupq_n_s32(v626);
            v665 = 0uLL;
            v666 = vaddq_s32(v664, (int32x4_t)xmmword_208F3A6C0);
            v667 = vaddq_s32(v664, (int32x4_t)xmmword_208F3A6D0);
            v668 = vaddq_s32(v664, (int32x4_t)xmmword_208F3A6A0);
            v669 = vaddq_s32(v664, (int32x4_t)xmmword_208F3A6B0);
            v670.i64[0] = 0x800000008;
            v670.i64[1] = 0x800000008;
            v671.i64[0] = 0x7F0000007FLL;
            v671.i64[1] = 0x7F0000007FLL;
            v672 = (v660 >> 3) + 1;
            v673 = 0uLL;
            v674 = 0uLL;
            v675 = 0uLL;
            v628 = (unint64_t *)((char *)v621 + (v672 & 0x3FFFFFF0));
            v661 = v626 - 8 * (v672 & 0x3FFFFFF0);
            v676 = v672 & 0x3FFFFFF0;
            v677 = (uint8x16_t *)v621;
            v678 = 0uLL;
            v679 = 0uLL;
            v680 = 0uLL;
            v681 = 0uLL;
            v682 = 0uLL;
            v683 = 0uLL;
            do
            {
              v684 = *v677++;
              v685 = vmovl_high_u8(v684);
              v686 = vmovl_high_u16(v685);
              v687.i64[0] = v686.u32[0];
              v687.i64[1] = v686.u32[1];
              v688 = v687;
              v689 = vmovl_u16(*(uint16x4_t *)v685.i8);
              v687.i64[0] = v689.u32[2];
              v687.i64[1] = v689.u32[3];
              v690 = v687;
              v691 = vmovl_u8(*(uint8x8_t *)v684.i8);
              v692 = vmovl_high_u16(v691);
              v687.i64[0] = v692.u32[2];
              v687.i64[1] = v692.u32[3];
              v693 = v687;
              v687.i64[0] = v686.u32[2];
              v687.i64[1] = v686.u32[3];
              v694 = v687;
              v687.i64[0] = v689.u32[0];
              v687.i64[1] = v689.u32[1];
              v695 = v687;
              v687.i64[0] = v692.u32[0];
              v687.i64[1] = v692.u32[1];
              v696 = v687;
              v697 = vmovl_u16(*(uint16x4_t *)v691.i8);
              v687.i64[0] = v697.u32[2];
              v687.i64[1] = v697.u32[3];
              v698 = v687;
              v687.i64[0] = v697.u32[0];
              v687.i64[1] = v697.u32[1];
              v699 = v687;
              v687.i64[0] = v669.u32[0];
              v687.i64[1] = v669.u32[1];
              v700 = (int8x16_t)vshlq_u64(v699, v687);
              v687.i64[0] = v669.u32[2];
              v687.i64[1] = v669.u32[3];
              v701 = (int8x16_t)vshlq_u64(v698, v687);
              v687.i64[0] = v668.u32[0];
              v687.i64[1] = v668.u32[1];
              v702 = (int8x16_t)vshlq_u64(v696, v687);
              v687.i64[0] = v667.u32[0];
              v687.i64[1] = v667.u32[1];
              v703 = (int8x16_t)vshlq_u64(v695, v687);
              v687.i64[0] = v666.u32[2];
              v687.i64[1] = v666.u32[3];
              v704 = (int8x16_t)vshlq_u64(v694, v687);
              v687.i64[0] = v668.u32[2];
              v687.i64[1] = v668.u32[3];
              v705 = (int8x16_t)vshlq_u64(v693, v687);
              v687.i64[0] = v667.u32[2];
              v687.i64[1] = v667.u32[3];
              v706 = (int8x16_t)vshlq_u64(v690, v687);
              v687.i64[0] = v666.u32[0];
              v687.i64[1] = v666.u32[1];
              v679 = vorrq_s8((int8x16_t)vshlq_u64(v688, v687), v679);
              v678 = vorrq_s8(v706, v678);
              v674 = vorrq_s8(v705, v674);
              v680 = vorrq_s8(v704, v680);
              v675 = vorrq_s8(v703, v675);
              v673 = vorrq_s8(v702, v673);
              v665 = vorrq_s8(v701, v665);
              v662 = vorrq_s8(v700, v662);
              v663 = vaddq_s32(v663, v670);
              v681 = vaddq_s32(v681, v670);
              v682 = vaddq_s32(v682, v670);
              v683 = vaddq_s32(v683, v670);
              v669 = vaddq_s32(v669, v671);
              v668 = vaddq_s32(v668, v671);
              v667 = vaddq_s32(v667, v671);
              v666 = vaddq_s32(v666, v671);
              v676 -= 16;
            }
            while (v676);
            v619 = vaddvq_s32(vaddq_s32(vaddq_s32(v663, v682), vaddq_s32(v681, v683)));
            v707 = vorrq_s8(vorrq_s8(vorrq_s8(v662, v675), vorrq_s8(v673, v679)), vorrq_s8(vorrq_s8(v665, v678), vorrq_s8(v674, v680)));
            v618 = (unint64_t)vorr_s8(*(int8x8_t *)v707.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v707, v707, 8uLL));
            if ((v672 & 0x3FFFFFF0) != v672)
            {
LABEL_752:
              do
              {
                v619 += 8;
                v708 = *(unsigned __int8 *)v628;
                v628 = (unint64_t *)((char *)v628 + 1);
                v618 |= (unint64_t)v708 << v661;
                v661 -= 8;
              }
              while (v661 >= v658);
            }
          }
          else
          {
            v628 = v621;
          }
        }
        else
        {
          v627 = (v626 & 0xFFFFFFF8) + 8;
          v619 += v627;
          v628 = (unint64_t *)((char *)v621 + (v627 >> 3));
          v618 = (bswap64(*v621) >> (56 - (v626 & 0xF8u)) << (v626 & 7)) | *(_QWORD *)v3;
        }
        *(_QWORD *)(v3 + 24) += (char *)v628 - (char *)v621;
      }
      v954 = v618 - (v620 << 56);
      if (v618 >= v620 << 56)
      {
        LODWORD(v620) = *(_DWORD *)(v3 + 8) - v620;
        v955 = 48;
        v618 = v954;
      }
      else
      {
        v955 = 32;
      }
      v956 = vpx_norm[v620];
      v957 = v618 << v956;
      *(_QWORD *)v3 = v618 << v956;
      v958 = (((_DWORD)v620 << v956 << 7) + 128) >> 8;
      v959 = v619 - v956;
      *(_DWORD *)(v3 + 8) = (_DWORD)v620 << v956;
      *(_DWORD *)(v3 + 12) = v619 - v956;
      if ((int)(v619 - v956) < 0)
      {
        v960 = *(unint64_t **)(v3 + 24);
        v961 = *(_QWORD *)(v3 + 16) - (_QWORD)v960;
        v962 = 8 * v961;
        v963 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
        if (v963)
        {
          if (v961 >= 9)
            v964 = 9;
          else
            v964 = *(_QWORD *)(v3 + 16) - (_QWORD)v960;
          v965 = v955;
          v963(*(_QWORD *)(v3 + 40), v960, v3 + 48, v964);
          v955 = v965;
          v960 = (unint64_t *)(v3 + 48);
        }
        v966 = 48 - v959;
        if (v962 < 0x41)
        {
          v969 = 56 - v962 - v959;
          if (v969 >= 0)
            v959 += 0x40000000;
          if (v962)
            v970 = 1;
          else
            v970 = v969 <= -1;
          v971 = v969 & ~(v969 >> 31);
          if (!v970 || v966 < v971)
          {
            v968 = v960;
          }
          else
          {
            v992 = v956 - v619 + 40;
            if (v992 >= v971 - 1)
              v992 = v971 - 1;
            v993 = v956 - v619 - v992 + 47;
            v968 = v960;
            v994 = v966;
            if (v993 < 0x78)
              goto LABEL_753;
            v995 = (int8x16_t)v957;
            v996 = (int32x4_t)v959;
            v997 = vdupq_n_s32(v966);
            v998 = 0uLL;
            v999 = vaddq_s32(v997, (int32x4_t)xmmword_208F3A6C0);
            v1000 = vaddq_s32(v997, (int32x4_t)xmmword_208F3A6D0);
            v1001 = vaddq_s32(v997, (int32x4_t)xmmword_208F3A6A0);
            v1002 = vaddq_s32(v997, (int32x4_t)xmmword_208F3A6B0);
            v1003.i64[0] = 0x800000008;
            v1003.i64[1] = 0x800000008;
            v1004.i64[0] = 0x7F0000007FLL;
            v1004.i64[1] = 0x7F0000007FLL;
            v1005 = (v993 >> 3) + 1;
            v1006 = 0uLL;
            v1007 = 0uLL;
            v1008 = 0uLL;
            v968 = (unint64_t *)((char *)v960 + (v1005 & 0x3FFFFFF0));
            v994 = v966 - 8 * (v1005 & 0x3FFFFFF0);
            v1009 = v1005 & 0x3FFFFFF0;
            v1010 = (uint8x16_t *)v960;
            v1011 = 0uLL;
            v1012 = 0uLL;
            v1013 = 0uLL;
            v1014 = 0uLL;
            v1015 = 0uLL;
            v1016 = 0uLL;
            do
            {
              v1017 = *v1010++;
              v1018 = vmovl_high_u8(v1017);
              v1019 = vmovl_high_u16(v1018);
              v1020.i64[0] = v1019.u32[0];
              v1020.i64[1] = v1019.u32[1];
              v1021 = v1020;
              v1022 = vmovl_u16(*(uint16x4_t *)v1018.i8);
              v1020.i64[0] = v1022.u32[2];
              v1020.i64[1] = v1022.u32[3];
              v1023 = v1020;
              v1024 = vmovl_u8(*(uint8x8_t *)v1017.i8);
              v1025 = vmovl_high_u16(v1024);
              v1020.i64[0] = v1025.u32[2];
              v1020.i64[1] = v1025.u32[3];
              v1026 = v1020;
              v1020.i64[0] = v1019.u32[2];
              v1020.i64[1] = v1019.u32[3];
              v1027 = v1020;
              v1020.i64[0] = v1022.u32[0];
              v1020.i64[1] = v1022.u32[1];
              v1028 = v1020;
              v1020.i64[0] = v1025.u32[0];
              v1020.i64[1] = v1025.u32[1];
              v1029 = v1020;
              v1030 = vmovl_u16(*(uint16x4_t *)v1024.i8);
              v1020.i64[0] = v1030.u32[2];
              v1020.i64[1] = v1030.u32[3];
              v1031 = v1020;
              v1020.i64[0] = v1030.u32[0];
              v1020.i64[1] = v1030.u32[1];
              v1032 = v1020;
              v1020.i64[0] = v1002.u32[0];
              v1020.i64[1] = v1002.u32[1];
              v1033 = (int8x16_t)vshlq_u64(v1032, v1020);
              v1020.i64[0] = v1002.u32[2];
              v1020.i64[1] = v1002.u32[3];
              v1034 = (int8x16_t)vshlq_u64(v1031, v1020);
              v1020.i64[0] = v1001.u32[0];
              v1020.i64[1] = v1001.u32[1];
              v1035 = (int8x16_t)vshlq_u64(v1029, v1020);
              v1020.i64[0] = v1000.u32[0];
              v1020.i64[1] = v1000.u32[1];
              v1036 = (int8x16_t)vshlq_u64(v1028, v1020);
              v1020.i64[0] = v999.u32[2];
              v1020.i64[1] = v999.u32[3];
              v1037 = (int8x16_t)vshlq_u64(v1027, v1020);
              v1020.i64[0] = v1001.u32[2];
              v1020.i64[1] = v1001.u32[3];
              v1038 = (int8x16_t)vshlq_u64(v1026, v1020);
              v1020.i64[0] = v1000.u32[2];
              v1020.i64[1] = v1000.u32[3];
              v1039 = (int8x16_t)vshlq_u64(v1023, v1020);
              v1020.i64[0] = v999.u32[0];
              v1020.i64[1] = v999.u32[1];
              v1012 = vorrq_s8((int8x16_t)vshlq_u64(v1021, v1020), v1012);
              v1011 = vorrq_s8(v1039, v1011);
              v1007 = vorrq_s8(v1038, v1007);
              v1013 = vorrq_s8(v1037, v1013);
              v1008 = vorrq_s8(v1036, v1008);
              v1006 = vorrq_s8(v1035, v1006);
              v998 = vorrq_s8(v1034, v998);
              v995 = vorrq_s8(v1033, v995);
              v996 = vaddq_s32(v996, v1003);
              v1014 = vaddq_s32(v1014, v1003);
              v1015 = vaddq_s32(v1015, v1003);
              v1016 = vaddq_s32(v1016, v1003);
              v1002 = vaddq_s32(v1002, v1004);
              v1001 = vaddq_s32(v1001, v1004);
              v1000 = vaddq_s32(v1000, v1004);
              v999 = vaddq_s32(v999, v1004);
              v1009 -= 16;
            }
            while (v1009);
            v959 = vaddvq_s32(vaddq_s32(vaddq_s32(v996, v1015), vaddq_s32(v1014, v1016)));
            v1040 = vorrq_s8(vorrq_s8(vorrq_s8(v995, v1008), vorrq_s8(v1006, v1012)), vorrq_s8(vorrq_s8(v998, v1011), vorrq_s8(v1007, v1013)));
            v957 = (unint64_t)vorr_s8(*(int8x8_t *)v1040.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1040, v1040, 8uLL));
            if ((v1005 & 0x3FFFFFF0) != v1005)
            {
LABEL_753:
              do
              {
                v959 += 8;
                v1041 = *(unsigned __int8 *)v968;
                v968 = (unint64_t *)((char *)v968 + 1);
                v957 |= (unint64_t)v1041 << v994;
                v994 -= 8;
              }
              while (v994 >= v971);
            }
          }
        }
        else
        {
          v967 = (v966 & 0xFFFFFFF8) + 8;
          v959 += v967;
          v968 = (unint64_t *)((char *)v960 + (v967 >> 3));
          v957 = (bswap64(*v960) >> (56 - (v966 & 0xF8u)) << (v966 & 7)) | *(_QWORD *)v3;
        }
        *(_QWORD *)(v3 + 24) += (char *)v968 - (char *)v960;
      }
      v1042 = v957 - (v958 << 56);
      if (v957 >= v958 << 56)
      {
        LODWORD(v958) = *(_DWORD *)(v3 + 8) - v958;
        v1043 = 8;
        v957 = v1042;
      }
      else
      {
        v1043 = 0;
      }
      v1044 = vpx_norm[v958];
      v1045 = (_DWORD)v958 << v1044;
      v1046 = v957 << v1044;
      *(_QWORD *)v3 = v1046;
      v1047 = (((_DWORD)v958 << v1044 << 7) + 128) >> 8;
      v1048 = v959 - v1044;
      *(_DWORD *)(v3 + 8) = v1045;
      *(_DWORD *)(v3 + 12) = v959 - v1044;
      if ((int)(v959 - v1044) < 0)
      {
        v1049 = *(unint64_t **)(v3 + 24);
        v1050 = *(_QWORD *)(v3 + 16) - (_QWORD)v1049;
        v1051 = 8 * v1050;
        v1052 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
        if (v1052)
        {
          if (v1050 >= 9)
            v1053 = 9;
          else
            v1053 = *(_QWORD *)(v3 + 16) - (_QWORD)v1049;
          v1054 = v955;
          v1055 = v1043;
          v1052(*(_QWORD *)(v3 + 40), v1049, v3 + 48, v1053);
          v1043 = v1055;
          v955 = v1054;
          v1049 = (unint64_t *)(v3 + 48);
        }
        v1056 = 48 - v1048;
        if (v1051 < 0x41)
        {
          v1059 = 56 - v1051 - v1048;
          if (v1059 >= 0)
            v1048 += 0x40000000;
          if (v1051)
            v1060 = 1;
          else
            v1060 = v1059 <= -1;
          v1061 = v1059 & ~(v1059 >> 31);
          if (!v1060 || v1056 < v1061)
          {
            v1058 = v1049;
          }
          else
          {
            v1134 = v1044 - v959 + 40;
            if (v1134 >= v1061 - 1)
              v1134 = v1061 - 1;
            v1135 = v1044 - v959 - v1134 + 47;
            v1058 = v1049;
            v1136 = v1056;
            if (v1135 < 0x78)
              goto LABEL_754;
            v1137 = (int8x16_t)v1046;
            v1138 = (int32x4_t)v1048;
            v1139 = vdupq_n_s32(v1056);
            v1140 = 0uLL;
            v1141 = vaddq_s32(v1139, (int32x4_t)xmmword_208F3A6C0);
            v1142 = vaddq_s32(v1139, (int32x4_t)xmmword_208F3A6D0);
            v1143 = vaddq_s32(v1139, (int32x4_t)xmmword_208F3A6A0);
            v1144 = vaddq_s32(v1139, (int32x4_t)xmmword_208F3A6B0);
            v1145.i64[0] = 0x800000008;
            v1145.i64[1] = 0x800000008;
            v1146.i64[0] = 0x7F0000007FLL;
            v1146.i64[1] = 0x7F0000007FLL;
            v1147 = (v1135 >> 3) + 1;
            v1148 = 0uLL;
            v1149 = 0uLL;
            v1150 = 0uLL;
            v1058 = (unint64_t *)((char *)v1049 + (v1147 & 0x3FFFFFF0));
            v1136 = v1056 - 8 * (v1147 & 0x3FFFFFF0);
            v1151 = v1147 & 0x3FFFFFF0;
            v1152 = (uint8x16_t *)v1049;
            v1153 = 0uLL;
            v1154 = 0uLL;
            v1155 = 0uLL;
            v1156 = 0uLL;
            v1157 = 0uLL;
            v1158 = 0uLL;
            do
            {
              v1159 = *v1152++;
              v1160 = vmovl_high_u8(v1159);
              v1161 = vmovl_high_u16(v1160);
              v1162.i64[0] = v1161.u32[0];
              v1162.i64[1] = v1161.u32[1];
              v1163 = v1162;
              v1164 = vmovl_u16(*(uint16x4_t *)v1160.i8);
              v1162.i64[0] = v1164.u32[2];
              v1162.i64[1] = v1164.u32[3];
              v1165 = v1162;
              v1166 = vmovl_u8(*(uint8x8_t *)v1159.i8);
              v1167 = vmovl_high_u16(v1166);
              v1162.i64[0] = v1167.u32[2];
              v1162.i64[1] = v1167.u32[3];
              v1168 = v1162;
              v1162.i64[0] = v1161.u32[2];
              v1162.i64[1] = v1161.u32[3];
              v1169 = v1162;
              v1162.i64[0] = v1164.u32[0];
              v1162.i64[1] = v1164.u32[1];
              v1170 = v1162;
              v1162.i64[0] = v1167.u32[0];
              v1162.i64[1] = v1167.u32[1];
              v1171 = v1162;
              v1172 = vmovl_u16(*(uint16x4_t *)v1166.i8);
              v1162.i64[0] = v1172.u32[2];
              v1162.i64[1] = v1172.u32[3];
              v1173 = v1162;
              v1162.i64[0] = v1172.u32[0];
              v1162.i64[1] = v1172.u32[1];
              v1174 = v1162;
              v1162.i64[0] = v1144.u32[0];
              v1162.i64[1] = v1144.u32[1];
              v1175 = (int8x16_t)vshlq_u64(v1174, v1162);
              v1162.i64[0] = v1144.u32[2];
              v1162.i64[1] = v1144.u32[3];
              v1176 = (int8x16_t)vshlq_u64(v1173, v1162);
              v1162.i64[0] = v1143.u32[0];
              v1162.i64[1] = v1143.u32[1];
              v1177 = (int8x16_t)vshlq_u64(v1171, v1162);
              v1162.i64[0] = v1142.u32[0];
              v1162.i64[1] = v1142.u32[1];
              v1178 = (int8x16_t)vshlq_u64(v1170, v1162);
              v1162.i64[0] = v1141.u32[2];
              v1162.i64[1] = v1141.u32[3];
              v1179 = (int8x16_t)vshlq_u64(v1169, v1162);
              v1162.i64[0] = v1143.u32[2];
              v1162.i64[1] = v1143.u32[3];
              v1180 = (int8x16_t)vshlq_u64(v1168, v1162);
              v1162.i64[0] = v1142.u32[2];
              v1162.i64[1] = v1142.u32[3];
              v1181 = (int8x16_t)vshlq_u64(v1165, v1162);
              v1162.i64[0] = v1141.u32[0];
              v1162.i64[1] = v1141.u32[1];
              v1154 = vorrq_s8((int8x16_t)vshlq_u64(v1163, v1162), v1154);
              v1153 = vorrq_s8(v1181, v1153);
              v1149 = vorrq_s8(v1180, v1149);
              v1155 = vorrq_s8(v1179, v1155);
              v1150 = vorrq_s8(v1178, v1150);
              v1148 = vorrq_s8(v1177, v1148);
              v1140 = vorrq_s8(v1176, v1140);
              v1137 = vorrq_s8(v1175, v1137);
              v1138 = vaddq_s32(v1138, v1145);
              v1156 = vaddq_s32(v1156, v1145);
              v1157 = vaddq_s32(v1157, v1145);
              v1158 = vaddq_s32(v1158, v1145);
              v1144 = vaddq_s32(v1144, v1146);
              v1143 = vaddq_s32(v1143, v1146);
              v1142 = vaddq_s32(v1142, v1146);
              v1141 = vaddq_s32(v1141, v1146);
              v1151 -= 16;
            }
            while (v1151);
            v1048 = vaddvq_s32(vaddq_s32(vaddq_s32(v1138, v1157), vaddq_s32(v1156, v1158)));
            v1182 = vorrq_s8(vorrq_s8(vorrq_s8(v1137, v1150), vorrq_s8(v1148, v1154)), vorrq_s8(vorrq_s8(v1140, v1153), vorrq_s8(v1149, v1155)));
            v1046 = (unint64_t)vorr_s8(*(int8x8_t *)v1182.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1182, v1182, 8uLL));
            if ((v1147 & 0x3FFFFFF0) != v1147)
            {
LABEL_754:
              do
              {
                v1048 += 8;
                v1183 = *(unsigned __int8 *)v1058;
                v1058 = (unint64_t *)((char *)v1058 + 1);
                v1046 |= (unint64_t)v1183 << v1136;
                v1136 -= 8;
              }
              while (v1136 >= v1061);
            }
          }
        }
        else
        {
          v1057 = (v1056 & 0xFFFFFFF8) + 8;
          v1048 += v1057;
          v1058 = (unint64_t *)((char *)v1049 + (v1057 >> 3));
          v1046 = (bswap64(*v1049) >> (56 - (v1056 & 0xF8u)) << (v1056 & 7)) | *(_QWORD *)v3;
        }
        *(_QWORD *)(v3 + 24) += (char *)v1058 - (char *)v1049;
      }
      if (v1046 >= v1047 << 56)
      {
        v1184 = *(_DWORD *)(v3 + 8) - v1047;
        result = 4;
        v1046 -= v1047 << 56;
      }
      else
      {
        result = 0;
        v1184 = v1047;
      }
      v1185 = vpx_norm[v1184];
      v1186 = v1184 << v1185;
      v1187 = v1046 << v1185;
      *(_QWORD *)v3 = v1187;
      v1188 = ((v1186 << 7) + 128) >> 8;
      v1189 = v1048 - v1185;
      *(_DWORD *)(v3 + 8) = v1186;
      *(_DWORD *)(v3 + 12) = v1048 - v1185;
      if ((int)(v1048 - v1185) < 0)
      {
        v1190 = *(unint64_t **)(v3 + 24);
        v1191 = *(_QWORD *)(v3 + 16) - (_QWORD)v1190;
        v1192 = 8 * v1191;
        v1193 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
        if (v1193)
        {
          if (v1191 >= 9)
            v1194 = 9;
          else
            v1194 = *(_QWORD *)(v3 + 16) - (_QWORD)v1190;
          v1687 = v1188;
          v1195 = result;
          v1196 = v955;
          v1197 = v1043;
          v1193(*(_QWORD *)(v3 + 40), v1190, v3 + 48, v1194);
          result = v1195;
          v1188 = v1687;
          v1043 = v1197;
          v955 = v1196;
          v1190 = (unint64_t *)(v3 + 48);
        }
        v1198 = 48 - v1189;
        if (v1192 < 0x41)
        {
          v1201 = 56 - v1192 - v1189;
          if (v1201 >= 0)
            v1189 += 0x40000000;
          if (v1192)
            v1202 = 1;
          else
            v1202 = v1201 <= -1;
          v1203 = v1201 & ~(v1201 >> 31);
          if (!v1202 || v1198 < v1203)
          {
            v1200 = v1190;
          }
          else
          {
            v1275 = v1185 - v1048 + 40;
            if (v1275 >= v1203 - 1)
              v1275 = v1203 - 1;
            v1276 = v1185 - v1048 - v1275 + 47;
            v1200 = v1190;
            v1277 = v1198;
            if (v1276 < 0x78)
              goto LABEL_755;
            v1278 = (int8x16_t)v1187;
            v1279 = (int32x4_t)v1189;
            v1280 = vdupq_n_s32(v1198);
            v1281 = 0uLL;
            v1282 = vaddq_s32(v1280, (int32x4_t)xmmword_208F3A6C0);
            v1283 = vaddq_s32(v1280, (int32x4_t)xmmword_208F3A6D0);
            v1284 = vaddq_s32(v1280, (int32x4_t)xmmword_208F3A6A0);
            v1285 = vaddq_s32(v1280, (int32x4_t)xmmword_208F3A6B0);
            v1286.i64[0] = 0x800000008;
            v1286.i64[1] = 0x800000008;
            v1287.i64[0] = 0x7F0000007FLL;
            v1287.i64[1] = 0x7F0000007FLL;
            v1288 = (v1276 >> 3) + 1;
            v1289 = 0uLL;
            v1290 = 0uLL;
            v1291 = 0uLL;
            v1200 = (unint64_t *)((char *)v1190 + (v1288 & 0x3FFFFFF0));
            v1277 = v1198 - 8 * (v1288 & 0x3FFFFFF0);
            v1292 = v1288 & 0x3FFFFFF0;
            v1293 = (uint8x16_t *)v1190;
            v1294 = 0uLL;
            v1295 = 0uLL;
            v1296 = 0uLL;
            v1297 = 0uLL;
            v1298 = 0uLL;
            v1299 = 0uLL;
            do
            {
              v1300 = *v1293++;
              v1301 = vmovl_high_u8(v1300);
              v1302 = vmovl_high_u16(v1301);
              v1303.i64[0] = v1302.u32[0];
              v1303.i64[1] = v1302.u32[1];
              v1304 = v1303;
              v1305 = vmovl_u16(*(uint16x4_t *)v1301.i8);
              v1303.i64[0] = v1305.u32[2];
              v1303.i64[1] = v1305.u32[3];
              v1306 = v1303;
              v1307 = vmovl_u8(*(uint8x8_t *)v1300.i8);
              v1308 = vmovl_high_u16(v1307);
              v1303.i64[0] = v1308.u32[2];
              v1303.i64[1] = v1308.u32[3];
              v1309 = v1303;
              v1303.i64[0] = v1302.u32[2];
              v1303.i64[1] = v1302.u32[3];
              v1310 = v1303;
              v1303.i64[0] = v1305.u32[0];
              v1303.i64[1] = v1305.u32[1];
              v1311 = v1303;
              v1303.i64[0] = v1308.u32[0];
              v1303.i64[1] = v1308.u32[1];
              v1312 = v1303;
              v1313 = vmovl_u16(*(uint16x4_t *)v1307.i8);
              v1303.i64[0] = v1313.u32[2];
              v1303.i64[1] = v1313.u32[3];
              v1314 = v1303;
              v1303.i64[0] = v1313.u32[0];
              v1303.i64[1] = v1313.u32[1];
              v1315 = v1303;
              v1303.i64[0] = v1285.u32[0];
              v1303.i64[1] = v1285.u32[1];
              v1316 = (int8x16_t)vshlq_u64(v1315, v1303);
              v1303.i64[0] = v1285.u32[2];
              v1303.i64[1] = v1285.u32[3];
              v1317 = (int8x16_t)vshlq_u64(v1314, v1303);
              v1303.i64[0] = v1284.u32[0];
              v1303.i64[1] = v1284.u32[1];
              v1318 = (int8x16_t)vshlq_u64(v1312, v1303);
              v1303.i64[0] = v1283.u32[0];
              v1303.i64[1] = v1283.u32[1];
              v1319 = (int8x16_t)vshlq_u64(v1311, v1303);
              v1303.i64[0] = v1282.u32[2];
              v1303.i64[1] = v1282.u32[3];
              v1320 = (int8x16_t)vshlq_u64(v1310, v1303);
              v1303.i64[0] = v1284.u32[2];
              v1303.i64[1] = v1284.u32[3];
              v1321 = (int8x16_t)vshlq_u64(v1309, v1303);
              v1303.i64[0] = v1283.u32[2];
              v1303.i64[1] = v1283.u32[3];
              v1322 = (int8x16_t)vshlq_u64(v1306, v1303);
              v1303.i64[0] = v1282.u32[0];
              v1303.i64[1] = v1282.u32[1];
              v1295 = vorrq_s8((int8x16_t)vshlq_u64(v1304, v1303), v1295);
              v1294 = vorrq_s8(v1322, v1294);
              v1290 = vorrq_s8(v1321, v1290);
              v1296 = vorrq_s8(v1320, v1296);
              v1291 = vorrq_s8(v1319, v1291);
              v1289 = vorrq_s8(v1318, v1289);
              v1281 = vorrq_s8(v1317, v1281);
              v1278 = vorrq_s8(v1316, v1278);
              v1279 = vaddq_s32(v1279, v1286);
              v1297 = vaddq_s32(v1297, v1286);
              v1298 = vaddq_s32(v1298, v1286);
              v1299 = vaddq_s32(v1299, v1286);
              v1285 = vaddq_s32(v1285, v1287);
              v1284 = vaddq_s32(v1284, v1287);
              v1283 = vaddq_s32(v1283, v1287);
              v1282 = vaddq_s32(v1282, v1287);
              v1292 -= 16;
            }
            while (v1292);
            v1189 = vaddvq_s32(vaddq_s32(vaddq_s32(v1279, v1298), vaddq_s32(v1297, v1299)));
            v1323 = vorrq_s8(vorrq_s8(vorrq_s8(v1278, v1291), vorrq_s8(v1289, v1295)), vorrq_s8(vorrq_s8(v1281, v1294), vorrq_s8(v1290, v1296)));
            v1187 = (unint64_t)vorr_s8(*(int8x8_t *)v1323.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1323, v1323, 8uLL));
            if ((v1288 & 0x3FFFFFF0) != v1288)
            {
LABEL_755:
              do
              {
                v1189 += 8;
                v1324 = *(unsigned __int8 *)v1200;
                v1200 = (unint64_t *)((char *)v1200 + 1);
                v1187 |= (unint64_t)v1324 << v1277;
                v1277 -= 8;
              }
              while (v1277 >= v1203);
            }
          }
        }
        else
        {
          v1199 = (v1198 & 0xFFFFFFF8) + 8;
          v1189 += v1199;
          v1200 = (unint64_t *)((char *)v1190 + (v1199 >> 3));
          v1187 = (bswap64(*v1190) >> (56 - (v1198 & 0xF8u)) << (v1198 & 7)) | *(_QWORD *)v3;
        }
        *(_QWORD *)(v3 + 24) += (char *)v1200 - (char *)v1190;
      }
      v1325 = v1187 - (v1188 << 56);
      if (v1187 >= v1188 << 56)
      {
        LODWORD(v1188) = *(_DWORD *)(v3 + 8) - v1188;
        v1326 = 2;
        v1187 = v1325;
      }
      else
      {
        v1326 = 0;
      }
      v1327 = vpx_norm[v1188];
      v1328 = (_DWORD)v1188 << v1327;
      v1329 = v1187 << v1327;
      *(_QWORD *)v3 = v1329;
      v1330 = (((_DWORD)v1188 << v1327 << 7) + 128) >> 8;
      v1331 = v1189 - v1327;
      *(_DWORD *)(v3 + 8) = v1328;
      *(_DWORD *)(v3 + 12) = v1189 - v1327;
      if ((int)(v1189 - v1327) < 0)
      {
        v1332 = *(unint64_t **)(v3 + 24);
        v1333 = *(_QWORD *)(v3 + 16) - (_QWORD)v1332;
        v1334 = 8 * v1333;
        v1335 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
        if (v1335)
        {
          if (v1333 >= 9)
            v1336 = 9;
          else
            v1336 = *(_QWORD *)(v3 + 16) - (_QWORD)v1332;
          v1689 = result;
          v1684 = v1330;
          v1337 = v1326;
          v1338 = v955;
          v1339 = v1043;
          v1335(*(_QWORD *)(v3 + 40), v1332, v3 + 48, v1336);
          v1326 = v1337;
          v1330 = v1684;
          result = v1689;
          v1043 = v1339;
          v955 = v1338;
          v1332 = (unint64_t *)(v3 + 48);
        }
        v1340 = 48 - v1331;
        if (v1334 < 0x41)
        {
          v1343 = 56 - v1334 - v1331;
          if (v1343 >= 0)
            v1331 += 0x40000000;
          if (v1334)
            v1344 = 1;
          else
            v1344 = v1343 <= -1;
          v1345 = v1343 & ~(v1343 >> 31);
          if (!v1344 || v1340 < v1345)
          {
            v1342 = v1332;
          }
          else
          {
            v1419 = v1327 - v1189 + 40;
            if (v1419 >= v1345 - 1)
              v1419 = v1345 - 1;
            v1420 = v1327 - v1189 - v1419 + 47;
            v1342 = v1332;
            v1421 = v1340;
            if (v1420 < 0x78)
              goto LABEL_756;
            v1422 = (int8x16_t)v1329;
            v1423 = (int32x4_t)v1331;
            v1424 = vdupq_n_s32(v1340);
            v1425 = 0uLL;
            v1426 = vaddq_s32(v1424, (int32x4_t)xmmword_208F3A6C0);
            v1427 = vaddq_s32(v1424, (int32x4_t)xmmword_208F3A6D0);
            v1428 = vaddq_s32(v1424, (int32x4_t)xmmword_208F3A6A0);
            v1429 = vaddq_s32(v1424, (int32x4_t)xmmword_208F3A6B0);
            v1430.i64[0] = 0x800000008;
            v1430.i64[1] = 0x800000008;
            v1431.i64[0] = 0x7F0000007FLL;
            v1431.i64[1] = 0x7F0000007FLL;
            v1432 = (v1420 >> 3) + 1;
            v1433 = 0uLL;
            v1434 = 0uLL;
            v1435 = 0uLL;
            v1342 = (unint64_t *)((char *)v1332 + (v1432 & 0x3FFFFFF0));
            v1421 = v1340 - 8 * (v1432 & 0x3FFFFFF0);
            v1436 = v1432 & 0x3FFFFFF0;
            v1437 = (uint8x16_t *)v1332;
            v1438 = 0uLL;
            v1439 = 0uLL;
            v1440 = 0uLL;
            v1441 = 0uLL;
            v1442 = 0uLL;
            v1443 = 0uLL;
            do
            {
              v1444 = *v1437++;
              v1445 = vmovl_high_u8(v1444);
              v1446 = vmovl_high_u16(v1445);
              v1447.i64[0] = v1446.u32[0];
              v1447.i64[1] = v1446.u32[1];
              v1448 = v1447;
              v1449 = vmovl_u16(*(uint16x4_t *)v1445.i8);
              v1447.i64[0] = v1449.u32[2];
              v1447.i64[1] = v1449.u32[3];
              v1450 = v1447;
              v1451 = vmovl_u8(*(uint8x8_t *)v1444.i8);
              v1452 = vmovl_high_u16(v1451);
              v1447.i64[0] = v1452.u32[2];
              v1447.i64[1] = v1452.u32[3];
              v1453 = v1447;
              v1447.i64[0] = v1446.u32[2];
              v1447.i64[1] = v1446.u32[3];
              v1454 = v1447;
              v1447.i64[0] = v1449.u32[0];
              v1447.i64[1] = v1449.u32[1];
              v1455 = v1447;
              v1447.i64[0] = v1452.u32[0];
              v1447.i64[1] = v1452.u32[1];
              v1456 = v1447;
              v1457 = vmovl_u16(*(uint16x4_t *)v1451.i8);
              v1447.i64[0] = v1457.u32[2];
              v1447.i64[1] = v1457.u32[3];
              v1458 = v1447;
              v1447.i64[0] = v1457.u32[0];
              v1447.i64[1] = v1457.u32[1];
              v1459 = v1447;
              v1447.i64[0] = v1429.u32[0];
              v1447.i64[1] = v1429.u32[1];
              v1460 = (int8x16_t)vshlq_u64(v1459, v1447);
              v1447.i64[0] = v1429.u32[2];
              v1447.i64[1] = v1429.u32[3];
              v1461 = (int8x16_t)vshlq_u64(v1458, v1447);
              v1447.i64[0] = v1428.u32[0];
              v1447.i64[1] = v1428.u32[1];
              v1462 = (int8x16_t)vshlq_u64(v1456, v1447);
              v1447.i64[0] = v1427.u32[0];
              v1447.i64[1] = v1427.u32[1];
              v1463 = (int8x16_t)vshlq_u64(v1455, v1447);
              v1447.i64[0] = v1426.u32[2];
              v1447.i64[1] = v1426.u32[3];
              v1464 = (int8x16_t)vshlq_u64(v1454, v1447);
              v1447.i64[0] = v1428.u32[2];
              v1447.i64[1] = v1428.u32[3];
              v1465 = (int8x16_t)vshlq_u64(v1453, v1447);
              v1447.i64[0] = v1427.u32[2];
              v1447.i64[1] = v1427.u32[3];
              v1466 = (int8x16_t)vshlq_u64(v1450, v1447);
              v1447.i64[0] = v1426.u32[0];
              v1447.i64[1] = v1426.u32[1];
              v1439 = vorrq_s8((int8x16_t)vshlq_u64(v1448, v1447), v1439);
              v1438 = vorrq_s8(v1466, v1438);
              v1434 = vorrq_s8(v1465, v1434);
              v1440 = vorrq_s8(v1464, v1440);
              v1435 = vorrq_s8(v1463, v1435);
              v1433 = vorrq_s8(v1462, v1433);
              v1425 = vorrq_s8(v1461, v1425);
              v1422 = vorrq_s8(v1460, v1422);
              v1423 = vaddq_s32(v1423, v1430);
              v1441 = vaddq_s32(v1441, v1430);
              v1442 = vaddq_s32(v1442, v1430);
              v1443 = vaddq_s32(v1443, v1430);
              v1429 = vaddq_s32(v1429, v1431);
              v1428 = vaddq_s32(v1428, v1431);
              v1427 = vaddq_s32(v1427, v1431);
              v1426 = vaddq_s32(v1426, v1431);
              v1436 -= 16;
            }
            while (v1436);
            v1331 = vaddvq_s32(vaddq_s32(vaddq_s32(v1423, v1442), vaddq_s32(v1441, v1443)));
            v1467 = vorrq_s8(vorrq_s8(vorrq_s8(v1422, v1435), vorrq_s8(v1433, v1439)), vorrq_s8(vorrq_s8(v1425, v1438), vorrq_s8(v1434, v1440)));
            v1329 = (unint64_t)vorr_s8(*(int8x8_t *)v1467.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1467, v1467, 8uLL));
            if ((v1432 & 0x3FFFFFF0) != v1432)
            {
LABEL_756:
              do
              {
                v1331 += 8;
                v1468 = *(unsigned __int8 *)v1342;
                v1342 = (unint64_t *)((char *)v1342 + 1);
                v1329 |= (unint64_t)v1468 << v1421;
                v1421 -= 8;
              }
              while (v1421 >= v1345);
            }
          }
        }
        else
        {
          v1341 = (v1340 & 0xFFFFFFF8) + 8;
          v1331 += v1341;
          v1342 = (unint64_t *)((char *)v1332 + (v1341 >> 3));
          v1329 = (bswap64(*v1332) >> (56 - (v1340 & 0xF8u)) << (v1340 & 7)) | *(_QWORD *)v3;
        }
        *(_QWORD *)(v3 + 24) += (char *)v1342 - (char *)v1332;
      }
      v1469 = v1329 - (v1330 << 56);
      if (v1329 >= v1330 << 56)
      {
        LODWORD(v1330) = *(_DWORD *)(v3 + 8) - v1330;
        v1470 = 1;
        v1329 = v1469;
      }
      else
      {
        v1470 = 0;
      }
      v1471 = vpx_norm[v1330];
      *(_QWORD *)v3 = v1329 << v1471;
      *(_DWORD *)(v3 + 8) = (_DWORD)v1330 << v1471;
      *(_DWORD *)(v3 + 12) = v1331 - v1471;
      v613 = v1043 | v955 | result | v1326 | v1470;
      v475 = v1692;
      goto LABEL_729;
    }
    if ((v619 & 0x80000000) != 0)
    {
      v629 = *(unint64_t **)(v3 + 24);
      v630 = *(_QWORD *)(v3 + 16) - (_QWORD)v629;
      v631 = 8 * v630;
      v632 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
      if (v632)
      {
        if (v630 >= 9)
          v633 = 9;
        else
          v633 = *(_QWORD *)(v3 + 16) - (_QWORD)v629;
        v632(*(_QWORD *)(v3 + 40), v629, v3 + 48, v633);
        v629 = (unint64_t *)(v3 + 48);
      }
      v634 = 48 - v619;
      if (v631 < 0x41)
      {
        v709 = 56 - v631 - v619;
        if (v709 >= 0)
          v619 += 0x40000000;
        if (v631)
          v710 = 1;
        else
          v710 = v709 <= -1;
        if (v710 && (v711 = v709 & ~(v709 >> 31), v634 >= v711))
        {
          v712 = v617 - v276 + 40;
          if (v712 >= v711 - 1)
            v712 = v711 - 1;
          v713 = v617 - v276 - v712 + 47;
          v636 = v629;
          v714 = v634;
          if (v713 < 0x78)
            goto LABEL_757;
          v715 = (int8x16_t)v618;
          v716 = (int32x4_t)v619;
          v717 = vdupq_n_s32(v634);
          v718 = 0uLL;
          v719 = vaddq_s32(v717, (int32x4_t)xmmword_208F3A6C0);
          v720 = vaddq_s32(v717, (int32x4_t)xmmword_208F3A6D0);
          v721 = vaddq_s32(v717, (int32x4_t)xmmword_208F3A6A0);
          v722 = vaddq_s32(v717, (int32x4_t)xmmword_208F3A6B0);
          v723.i64[0] = 0x800000008;
          v723.i64[1] = 0x800000008;
          v724.i64[0] = 0x7F0000007FLL;
          v724.i64[1] = 0x7F0000007FLL;
          v725 = (v713 >> 3) + 1;
          v726 = 0uLL;
          v727 = 0uLL;
          v728 = 0uLL;
          v636 = (unint64_t *)((char *)v629 + (v725 & 0x3FFFFFF0));
          v714 = v634 - 8 * (v725 & 0x3FFFFFF0);
          v729 = v725 & 0x3FFFFFF0;
          v730 = (uint8x16_t *)v629;
          v731 = 0uLL;
          v732 = 0uLL;
          v733 = 0uLL;
          v734 = 0uLL;
          v735 = 0uLL;
          v736 = 0uLL;
          do
          {
            v737 = *v730++;
            v738 = vmovl_high_u8(v737);
            v739 = vmovl_high_u16(v738);
            v740.i64[0] = v739.u32[0];
            v740.i64[1] = v739.u32[1];
            v741 = v740;
            v742 = vmovl_u16(*(uint16x4_t *)v738.i8);
            v740.i64[0] = v742.u32[2];
            v740.i64[1] = v742.u32[3];
            v743 = v740;
            v744 = vmovl_u8(*(uint8x8_t *)v737.i8);
            v745 = vmovl_high_u16(v744);
            v740.i64[0] = v745.u32[2];
            v740.i64[1] = v745.u32[3];
            v746 = v740;
            v740.i64[0] = v739.u32[2];
            v740.i64[1] = v739.u32[3];
            v747 = v740;
            v740.i64[0] = v742.u32[0];
            v740.i64[1] = v742.u32[1];
            v748 = v740;
            v740.i64[0] = v745.u32[0];
            v740.i64[1] = v745.u32[1];
            v749 = v740;
            v750 = vmovl_u16(*(uint16x4_t *)v744.i8);
            v740.i64[0] = v750.u32[2];
            v740.i64[1] = v750.u32[3];
            v751 = v740;
            v740.i64[0] = v750.u32[0];
            v740.i64[1] = v750.u32[1];
            v752 = v740;
            v740.i64[0] = v722.u32[0];
            v740.i64[1] = v722.u32[1];
            v753 = (int8x16_t)vshlq_u64(v752, v740);
            v740.i64[0] = v722.u32[2];
            v740.i64[1] = v722.u32[3];
            v754 = (int8x16_t)vshlq_u64(v751, v740);
            v740.i64[0] = v721.u32[0];
            v740.i64[1] = v721.u32[1];
            v755 = (int8x16_t)vshlq_u64(v749, v740);
            v740.i64[0] = v720.u32[0];
            v740.i64[1] = v720.u32[1];
            v756 = (int8x16_t)vshlq_u64(v748, v740);
            v740.i64[0] = v719.u32[2];
            v740.i64[1] = v719.u32[3];
            v757 = (int8x16_t)vshlq_u64(v747, v740);
            v740.i64[0] = v721.u32[2];
            v740.i64[1] = v721.u32[3];
            v758 = (int8x16_t)vshlq_u64(v746, v740);
            v740.i64[0] = v720.u32[2];
            v740.i64[1] = v720.u32[3];
            v759 = (int8x16_t)vshlq_u64(v743, v740);
            v740.i64[0] = v719.u32[0];
            v740.i64[1] = v719.u32[1];
            v732 = vorrq_s8((int8x16_t)vshlq_u64(v741, v740), v732);
            v731 = vorrq_s8(v759, v731);
            v727 = vorrq_s8(v758, v727);
            v733 = vorrq_s8(v757, v733);
            v728 = vorrq_s8(v756, v728);
            v726 = vorrq_s8(v755, v726);
            v718 = vorrq_s8(v754, v718);
            v715 = vorrq_s8(v753, v715);
            v716 = vaddq_s32(v716, v723);
            v734 = vaddq_s32(v734, v723);
            v735 = vaddq_s32(v735, v723);
            v736 = vaddq_s32(v736, v723);
            v722 = vaddq_s32(v722, v724);
            v721 = vaddq_s32(v721, v724);
            v720 = vaddq_s32(v720, v724);
            v719 = vaddq_s32(v719, v724);
            v729 -= 16;
          }
          while (v729);
          v619 = vaddvq_s32(vaddq_s32(vaddq_s32(v716, v735), vaddq_s32(v734, v736)));
          v760 = vorrq_s8(vorrq_s8(vorrq_s8(v715, v728), vorrq_s8(v726, v732)), vorrq_s8(vorrq_s8(v718, v731), vorrq_s8(v727, v733)));
          v618 = (unint64_t)vorr_s8(*(int8x8_t *)v760.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v760, v760, 8uLL));
          if ((v725 & 0x3FFFFFF0) != v725)
          {
LABEL_757:
            do
            {
              v619 += 8;
              v761 = *(unsigned __int8 *)v636;
              v636 = (unint64_t *)((char *)v636 + 1);
              v618 |= (unint64_t)v761 << v714;
              v714 -= 8;
            }
            while (v714 >= v711);
          }
        }
        else
        {
          v636 = v629;
        }
      }
      else
      {
        v635 = (v634 & 0xFFFFFFF8) + 8;
        v619 += v635;
        v636 = (unint64_t *)((char *)v629 + (v635 >> 3));
        v618 = (bswap64(*v629) >> (56 - (v634 & 0xF8u)) << (v634 & 7)) | *(_QWORD *)v3;
      }
      *(_QWORD *)(v3 + 24) += (char *)v636 - (char *)v629;
    }
    v973 = v618 - (v620 << 56);
    if (v618 >= v620 << 56)
    {
      LODWORD(v620) = *(_DWORD *)(v3 + 8) - v620;
      v974 = 64;
      v618 = v973;
    }
    else
    {
      v974 = 0;
    }
    v975 = vpx_norm[v620];
    v976 = v618 << v975;
    *(_QWORD *)v3 = v618 << v975;
    v977 = (((_DWORD)v620 << v975 << 7) + 128) >> 8;
    v978 = v619 - v975;
    *(_DWORD *)(v3 + 8) = (_DWORD)v620 << v975;
    *(_DWORD *)(v3 + 12) = v619 - v975;
    if ((int)(v619 - v975) < 0)
    {
      v979 = *(unint64_t **)(v3 + 24);
      v980 = *(_QWORD *)(v3 + 16) - (_QWORD)v979;
      v981 = 8 * v980;
      v982 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
      if (v982)
      {
        if (v980 >= 9)
          v983 = 9;
        else
          v983 = *(_QWORD *)(v3 + 16) - (_QWORD)v979;
        v984 = v974;
        v982(*(_QWORD *)(v3 + 40), v979, v3 + 48, v983);
        v974 = v984;
        v979 = (unint64_t *)(v3 + 48);
      }
      v985 = 48 - v978;
      if (v981 < 0x41)
      {
        v988 = 56 - v981 - v978;
        if (v988 >= 0)
          v978 += 0x40000000;
        if (v981)
          v989 = 1;
        else
          v989 = v988 <= -1;
        v990 = v988 & ~(v988 >> 31);
        if (!v989 || v985 < v990)
        {
          v987 = v979;
        }
        else
        {
          v1063 = v975 - v619 + 40;
          if (v1063 >= v990 - 1)
            v1063 = v990 - 1;
          v1064 = v975 - v619 - v1063 + 47;
          v987 = v979;
          v1065 = v985;
          if (v1064 < 0x78)
            goto LABEL_758;
          v1066 = (int8x16_t)v976;
          v1067 = (int32x4_t)v978;
          v1068 = vdupq_n_s32(v985);
          v1069 = 0uLL;
          v1070 = vaddq_s32(v1068, (int32x4_t)xmmword_208F3A6C0);
          v1071 = vaddq_s32(v1068, (int32x4_t)xmmword_208F3A6D0);
          v1072 = vaddq_s32(v1068, (int32x4_t)xmmword_208F3A6A0);
          v1073 = vaddq_s32(v1068, (int32x4_t)xmmword_208F3A6B0);
          v1074.i64[0] = 0x800000008;
          v1074.i64[1] = 0x800000008;
          v1075.i64[0] = 0x7F0000007FLL;
          v1075.i64[1] = 0x7F0000007FLL;
          v1076 = (v1064 >> 3) + 1;
          v1077 = 0uLL;
          v1078 = 0uLL;
          v1079 = 0uLL;
          v987 = (unint64_t *)((char *)v979 + (v1076 & 0x3FFFFFF0));
          v1065 = v985 - 8 * (v1076 & 0x3FFFFFF0);
          v1080 = v1076 & 0x3FFFFFF0;
          v1081 = (uint8x16_t *)v979;
          v1082 = 0uLL;
          v1083 = 0uLL;
          v1084 = 0uLL;
          v1085 = 0uLL;
          v1086 = 0uLL;
          v1087 = 0uLL;
          do
          {
            v1088 = *v1081++;
            v1089 = vmovl_high_u8(v1088);
            v1090 = vmovl_high_u16(v1089);
            v1091.i64[0] = v1090.u32[0];
            v1091.i64[1] = v1090.u32[1];
            v1092 = v1091;
            v1093 = vmovl_u16(*(uint16x4_t *)v1089.i8);
            v1091.i64[0] = v1093.u32[2];
            v1091.i64[1] = v1093.u32[3];
            v1094 = v1091;
            v1095 = vmovl_u8(*(uint8x8_t *)v1088.i8);
            v1096 = vmovl_high_u16(v1095);
            v1091.i64[0] = v1096.u32[2];
            v1091.i64[1] = v1096.u32[3];
            v1097 = v1091;
            v1091.i64[0] = v1090.u32[2];
            v1091.i64[1] = v1090.u32[3];
            v1098 = v1091;
            v1091.i64[0] = v1093.u32[0];
            v1091.i64[1] = v1093.u32[1];
            v1099 = v1091;
            v1091.i64[0] = v1096.u32[0];
            v1091.i64[1] = v1096.u32[1];
            v1100 = v1091;
            v1101 = vmovl_u16(*(uint16x4_t *)v1095.i8);
            v1091.i64[0] = v1101.u32[2];
            v1091.i64[1] = v1101.u32[3];
            v1102 = v1091;
            v1091.i64[0] = v1101.u32[0];
            v1091.i64[1] = v1101.u32[1];
            v1103 = v1091;
            v1091.i64[0] = v1073.u32[0];
            v1091.i64[1] = v1073.u32[1];
            v1104 = (int8x16_t)vshlq_u64(v1103, v1091);
            v1091.i64[0] = v1073.u32[2];
            v1091.i64[1] = v1073.u32[3];
            v1105 = (int8x16_t)vshlq_u64(v1102, v1091);
            v1091.i64[0] = v1072.u32[0];
            v1091.i64[1] = v1072.u32[1];
            v1106 = (int8x16_t)vshlq_u64(v1100, v1091);
            v1091.i64[0] = v1071.u32[0];
            v1091.i64[1] = v1071.u32[1];
            v1107 = (int8x16_t)vshlq_u64(v1099, v1091);
            v1091.i64[0] = v1070.u32[2];
            v1091.i64[1] = v1070.u32[3];
            v1108 = (int8x16_t)vshlq_u64(v1098, v1091);
            v1091.i64[0] = v1072.u32[2];
            v1091.i64[1] = v1072.u32[3];
            v1109 = (int8x16_t)vshlq_u64(v1097, v1091);
            v1091.i64[0] = v1071.u32[2];
            v1091.i64[1] = v1071.u32[3];
            v1110 = (int8x16_t)vshlq_u64(v1094, v1091);
            v1091.i64[0] = v1070.u32[0];
            v1091.i64[1] = v1070.u32[1];
            v1083 = vorrq_s8((int8x16_t)vshlq_u64(v1092, v1091), v1083);
            v1082 = vorrq_s8(v1110, v1082);
            v1078 = vorrq_s8(v1109, v1078);
            v1084 = vorrq_s8(v1108, v1084);
            v1079 = vorrq_s8(v1107, v1079);
            v1077 = vorrq_s8(v1106, v1077);
            v1069 = vorrq_s8(v1105, v1069);
            v1066 = vorrq_s8(v1104, v1066);
            v1067 = vaddq_s32(v1067, v1074);
            v1085 = vaddq_s32(v1085, v1074);
            v1086 = vaddq_s32(v1086, v1074);
            v1087 = vaddq_s32(v1087, v1074);
            v1073 = vaddq_s32(v1073, v1075);
            v1072 = vaddq_s32(v1072, v1075);
            v1071 = vaddq_s32(v1071, v1075);
            v1070 = vaddq_s32(v1070, v1075);
            v1080 -= 16;
          }
          while (v1080);
          v978 = vaddvq_s32(vaddq_s32(vaddq_s32(v1067, v1086), vaddq_s32(v1085, v1087)));
          v1111 = vorrq_s8(vorrq_s8(vorrq_s8(v1066, v1079), vorrq_s8(v1077, v1083)), vorrq_s8(vorrq_s8(v1069, v1082), vorrq_s8(v1078, v1084)));
          v976 = (unint64_t)vorr_s8(*(int8x8_t *)v1111.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1111, v1111, 8uLL));
          if ((v1076 & 0x3FFFFFF0) != v1076)
          {
LABEL_758:
            do
            {
              v978 += 8;
              v1112 = *(unsigned __int8 *)v987;
              v987 = (unint64_t *)((char *)v987 + 1);
              v976 |= (unint64_t)v1112 << v1065;
              v1065 -= 8;
            }
            while (v1065 >= v990);
          }
        }
      }
      else
      {
        v986 = (v985 & 0xFFFFFFF8) + 8;
        v978 += v986;
        v987 = (unint64_t *)((char *)v979 + (v986 >> 3));
        v976 = (bswap64(*v979) >> (56 - (v985 & 0xF8u)) << (v985 & 7)) | *(_QWORD *)v3;
      }
      *(_QWORD *)(v3 + 24) += (char *)v987 - (char *)v979;
    }
    v1113 = v976 - (v977 << 56);
    if (v976 >= v977 << 56)
    {
      LODWORD(v977) = *(_DWORD *)(v3 + 8) - v977;
      v1114 = 32;
      v976 = v1113;
    }
    else
    {
      v1114 = 0;
    }
    v1115 = vpx_norm[v977];
    v1116 = (_DWORD)v977 << v1115;
    v1117 = v976 << v1115;
    *(_QWORD *)v3 = v1117;
    v1118 = (((_DWORD)v977 << v1115 << 7) + 128) >> 8;
    v1119 = v978 - v1115;
    *(_DWORD *)(v3 + 8) = v1116;
    *(_DWORD *)(v3 + 12) = v978 - v1115;
    if ((int)(v978 - v1115) < 0)
    {
      v1120 = *(unint64_t **)(v3 + 24);
      v1121 = *(_QWORD *)(v3 + 16) - (_QWORD)v1120;
      v1122 = 8 * v1121;
      v1123 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
      if (v1123)
      {
        if (v1121 >= 9)
          v1124 = 9;
        else
          v1124 = *(_QWORD *)(v3 + 16) - (_QWORD)v1120;
        v1125 = v974;
        v1126 = v1114;
        v1123(*(_QWORD *)(v3 + 40), v1120, v3 + 48, v1124);
        v1114 = v1126;
        v974 = v1125;
        v1120 = (unint64_t *)(v3 + 48);
      }
      v1127 = 48 - v1119;
      if (v1122 < 0x41)
      {
        v1130 = 56 - v1122 - v1119;
        if (v1130 >= 0)
          v1119 += 0x40000000;
        if (v1122)
          v1131 = 1;
        else
          v1131 = v1130 <= -1;
        v1132 = v1130 & ~(v1130 >> 31);
        if (!v1131 || v1127 < v1132)
        {
          v1129 = v1120;
        }
        else
        {
          v1205 = v1115 - v978 + 40;
          if (v1205 >= v1132 - 1)
            v1205 = v1132 - 1;
          v1206 = v1115 - v978 - v1205 + 47;
          v1129 = v1120;
          v1207 = v1127;
          if (v1206 < 0x78)
            goto LABEL_759;
          v1208 = (int8x16_t)v1117;
          v1209 = (int32x4_t)v1119;
          v1210 = vdupq_n_s32(v1127);
          v1211 = 0uLL;
          v1212 = vaddq_s32(v1210, (int32x4_t)xmmword_208F3A6C0);
          v1213 = vaddq_s32(v1210, (int32x4_t)xmmword_208F3A6D0);
          v1214 = vaddq_s32(v1210, (int32x4_t)xmmword_208F3A6A0);
          v1215 = vaddq_s32(v1210, (int32x4_t)xmmword_208F3A6B0);
          v1216.i64[0] = 0x800000008;
          v1216.i64[1] = 0x800000008;
          v1217.i64[0] = 0x7F0000007FLL;
          v1217.i64[1] = 0x7F0000007FLL;
          v1218 = (v1206 >> 3) + 1;
          v1219 = 0uLL;
          v1220 = 0uLL;
          v1221 = 0uLL;
          v1129 = (unint64_t *)((char *)v1120 + (v1218 & 0x3FFFFFF0));
          v1207 = v1127 - 8 * (v1218 & 0x3FFFFFF0);
          v1222 = v1218 & 0x3FFFFFF0;
          v1223 = (uint8x16_t *)v1120;
          v1224 = 0uLL;
          v1225 = 0uLL;
          v1226 = 0uLL;
          v1227 = 0uLL;
          v1228 = 0uLL;
          v1229 = 0uLL;
          do
          {
            v1230 = *v1223++;
            v1231 = vmovl_high_u8(v1230);
            v1232 = vmovl_high_u16(v1231);
            v1233.i64[0] = v1232.u32[0];
            v1233.i64[1] = v1232.u32[1];
            v1234 = v1233;
            v1235 = vmovl_u16(*(uint16x4_t *)v1231.i8);
            v1233.i64[0] = v1235.u32[2];
            v1233.i64[1] = v1235.u32[3];
            v1236 = v1233;
            v1237 = vmovl_u8(*(uint8x8_t *)v1230.i8);
            v1238 = vmovl_high_u16(v1237);
            v1233.i64[0] = v1238.u32[2];
            v1233.i64[1] = v1238.u32[3];
            v1239 = v1233;
            v1233.i64[0] = v1232.u32[2];
            v1233.i64[1] = v1232.u32[3];
            v1240 = v1233;
            v1233.i64[0] = v1235.u32[0];
            v1233.i64[1] = v1235.u32[1];
            v1241 = v1233;
            v1233.i64[0] = v1238.u32[0];
            v1233.i64[1] = v1238.u32[1];
            v1242 = v1233;
            v1243 = vmovl_u16(*(uint16x4_t *)v1237.i8);
            v1233.i64[0] = v1243.u32[2];
            v1233.i64[1] = v1243.u32[3];
            v1244 = v1233;
            v1233.i64[0] = v1243.u32[0];
            v1233.i64[1] = v1243.u32[1];
            v1245 = v1233;
            v1233.i64[0] = v1215.u32[0];
            v1233.i64[1] = v1215.u32[1];
            v1246 = (int8x16_t)vshlq_u64(v1245, v1233);
            v1233.i64[0] = v1215.u32[2];
            v1233.i64[1] = v1215.u32[3];
            v1247 = (int8x16_t)vshlq_u64(v1244, v1233);
            v1233.i64[0] = v1214.u32[0];
            v1233.i64[1] = v1214.u32[1];
            v1248 = (int8x16_t)vshlq_u64(v1242, v1233);
            v1233.i64[0] = v1213.u32[0];
            v1233.i64[1] = v1213.u32[1];
            v1249 = (int8x16_t)vshlq_u64(v1241, v1233);
            v1233.i64[0] = v1212.u32[2];
            v1233.i64[1] = v1212.u32[3];
            v1250 = (int8x16_t)vshlq_u64(v1240, v1233);
            v1233.i64[0] = v1214.u32[2];
            v1233.i64[1] = v1214.u32[3];
            v1251 = (int8x16_t)vshlq_u64(v1239, v1233);
            v1233.i64[0] = v1213.u32[2];
            v1233.i64[1] = v1213.u32[3];
            v1252 = (int8x16_t)vshlq_u64(v1236, v1233);
            v1233.i64[0] = v1212.u32[0];
            v1233.i64[1] = v1212.u32[1];
            v1225 = vorrq_s8((int8x16_t)vshlq_u64(v1234, v1233), v1225);
            v1224 = vorrq_s8(v1252, v1224);
            v1220 = vorrq_s8(v1251, v1220);
            v1226 = vorrq_s8(v1250, v1226);
            v1221 = vorrq_s8(v1249, v1221);
            v1219 = vorrq_s8(v1248, v1219);
            v1211 = vorrq_s8(v1247, v1211);
            v1208 = vorrq_s8(v1246, v1208);
            v1209 = vaddq_s32(v1209, v1216);
            v1227 = vaddq_s32(v1227, v1216);
            v1228 = vaddq_s32(v1228, v1216);
            v1229 = vaddq_s32(v1229, v1216);
            v1215 = vaddq_s32(v1215, v1217);
            v1214 = vaddq_s32(v1214, v1217);
            v1213 = vaddq_s32(v1213, v1217);
            v1212 = vaddq_s32(v1212, v1217);
            v1222 -= 16;
          }
          while (v1222);
          v1119 = vaddvq_s32(vaddq_s32(vaddq_s32(v1209, v1228), vaddq_s32(v1227, v1229)));
          v1253 = vorrq_s8(vorrq_s8(vorrq_s8(v1208, v1221), vorrq_s8(v1219, v1225)), vorrq_s8(vorrq_s8(v1211, v1224), vorrq_s8(v1220, v1226)));
          v1117 = (unint64_t)vorr_s8(*(int8x8_t *)v1253.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1253, v1253, 8uLL));
          if ((v1218 & 0x3FFFFFF0) != v1218)
          {
LABEL_759:
            do
            {
              v1119 += 8;
              v1254 = *(unsigned __int8 *)v1129;
              v1129 = (unint64_t *)((char *)v1129 + 1);
              v1117 |= (unint64_t)v1254 << v1207;
              v1207 -= 8;
            }
            while (v1207 >= v1132);
          }
        }
      }
      else
      {
        v1128 = (v1127 & 0xFFFFFFF8) + 8;
        v1119 += v1128;
        v1129 = (unint64_t *)((char *)v1120 + (v1128 >> 3));
        v1117 = (bswap64(*v1120) >> (56 - (v1127 & 0xF8u)) << (v1127 & 7)) | *(_QWORD *)v3;
      }
      *(_QWORD *)(v3 + 24) += (char *)v1129 - (char *)v1120;
    }
    v1255 = v1117 - (v1118 << 56);
    if (v1117 >= v1118 << 56)
    {
      LODWORD(v1118) = *(_DWORD *)(v3 + 8) - v1118;
      result = 16;
      v1117 = v1255;
    }
    else
    {
      result = 0;
    }
    v1256 = vpx_norm[v1118];
    v1257 = v1117 << v1256;
    *(_QWORD *)v3 = v1257;
    v1258 = (((_DWORD)v1118 << v1256 << 7) + 128) >> 8;
    v1259 = v1119 - v1256;
    *(_DWORD *)(v3 + 8) = (_DWORD)v1118 << v1256;
    *(_DWORD *)(v3 + 12) = v1119 - v1256;
    if ((int)(v1119 - v1256) < 0)
    {
      v1260 = *(unint64_t **)(v3 + 24);
      v1261 = *(_QWORD *)(v3 + 16) - (_QWORD)v1260;
      v1262 = 8 * v1261;
      v1263 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
      if (v1263)
      {
        if (v1261 >= 9)
          v1264 = 9;
        else
          v1264 = *(_QWORD *)(v3 + 16) - (_QWORD)v1260;
        v1688 = (((_DWORD)v1118 << v1256 << 7) + 128) >> 8;
        v1265 = result;
        v1266 = v974;
        v1267 = v1114;
        v1263(*(_QWORD *)(v3 + 40), v1260, v3 + 48, v1264);
        result = v1265;
        v1258 = v1688;
        v1114 = v1267;
        v974 = v1266;
        v1260 = (unint64_t *)(v3 + 48);
      }
      v1268 = 48 - v1259;
      if (v1262 < 0x41)
      {
        v1271 = 56 - v1262 - v1259;
        if (v1271 >= 0)
          v1259 += 0x40000000;
        if (v1262)
          v1272 = 1;
        else
          v1272 = v1271 <= -1;
        v1273 = v1271 & ~(v1271 >> 31);
        if (!v1272 || v1268 < v1273)
        {
          v1270 = v1260;
        }
        else
        {
          v1347 = v1256 - v1119 + 40;
          if (v1347 >= v1273 - 1)
            v1347 = v1273 - 1;
          v1348 = v1256 - v1119 - v1347 + 47;
          v1270 = v1260;
          v1349 = v1268;
          if (v1348 < 0x78)
            goto LABEL_760;
          v1350 = (int8x16_t)v1257;
          v1351 = (int32x4_t)v1259;
          v1352 = vdupq_n_s32(v1268);
          v1353 = 0uLL;
          v1354 = vaddq_s32(v1352, (int32x4_t)xmmword_208F3A6C0);
          v1355 = vaddq_s32(v1352, (int32x4_t)xmmword_208F3A6D0);
          v1356 = vaddq_s32(v1352, (int32x4_t)xmmword_208F3A6A0);
          v1357 = vaddq_s32(v1352, (int32x4_t)xmmword_208F3A6B0);
          v1358.i64[0] = 0x800000008;
          v1358.i64[1] = 0x800000008;
          v1359.i64[0] = 0x7F0000007FLL;
          v1359.i64[1] = 0x7F0000007FLL;
          v1360 = (v1348 >> 3) + 1;
          v1361 = 0uLL;
          v1362 = 0uLL;
          v1363 = 0uLL;
          v1270 = (unint64_t *)((char *)v1260 + (v1360 & 0x3FFFFFF0));
          v1349 = v1268 - 8 * (v1360 & 0x3FFFFFF0);
          v1364 = v1360 & 0x3FFFFFF0;
          v1365 = (uint8x16_t *)v1260;
          v1366 = 0uLL;
          v1367 = 0uLL;
          v1368 = 0uLL;
          v1369 = 0uLL;
          v1370 = 0uLL;
          v1371 = 0uLL;
          do
          {
            v1372 = *v1365++;
            v1373 = vmovl_high_u8(v1372);
            v1374 = vmovl_high_u16(v1373);
            v1375.i64[0] = v1374.u32[0];
            v1375.i64[1] = v1374.u32[1];
            v1376 = v1375;
            v1377 = vmovl_u16(*(uint16x4_t *)v1373.i8);
            v1375.i64[0] = v1377.u32[2];
            v1375.i64[1] = v1377.u32[3];
            v1378 = v1375;
            v1379 = vmovl_u8(*(uint8x8_t *)v1372.i8);
            v1380 = vmovl_high_u16(v1379);
            v1375.i64[0] = v1380.u32[2];
            v1375.i64[1] = v1380.u32[3];
            v1381 = v1375;
            v1375.i64[0] = v1374.u32[2];
            v1375.i64[1] = v1374.u32[3];
            v1382 = v1375;
            v1375.i64[0] = v1377.u32[0];
            v1375.i64[1] = v1377.u32[1];
            v1383 = v1375;
            v1375.i64[0] = v1380.u32[0];
            v1375.i64[1] = v1380.u32[1];
            v1384 = v1375;
            v1385 = vmovl_u16(*(uint16x4_t *)v1379.i8);
            v1375.i64[0] = v1385.u32[2];
            v1375.i64[1] = v1385.u32[3];
            v1386 = v1375;
            v1375.i64[0] = v1385.u32[0];
            v1375.i64[1] = v1385.u32[1];
            v1387 = v1375;
            v1375.i64[0] = v1357.u32[0];
            v1375.i64[1] = v1357.u32[1];
            v1388 = (int8x16_t)vshlq_u64(v1387, v1375);
            v1375.i64[0] = v1357.u32[2];
            v1375.i64[1] = v1357.u32[3];
            v1389 = (int8x16_t)vshlq_u64(v1386, v1375);
            v1375.i64[0] = v1356.u32[0];
            v1375.i64[1] = v1356.u32[1];
            v1390 = (int8x16_t)vshlq_u64(v1384, v1375);
            v1375.i64[0] = v1355.u32[0];
            v1375.i64[1] = v1355.u32[1];
            v1391 = (int8x16_t)vshlq_u64(v1383, v1375);
            v1375.i64[0] = v1354.u32[2];
            v1375.i64[1] = v1354.u32[3];
            v1392 = (int8x16_t)vshlq_u64(v1382, v1375);
            v1375.i64[0] = v1356.u32[2];
            v1375.i64[1] = v1356.u32[3];
            v1393 = (int8x16_t)vshlq_u64(v1381, v1375);
            v1375.i64[0] = v1355.u32[2];
            v1375.i64[1] = v1355.u32[3];
            v1394 = (int8x16_t)vshlq_u64(v1378, v1375);
            v1375.i64[0] = v1354.u32[0];
            v1375.i64[1] = v1354.u32[1];
            v1367 = vorrq_s8((int8x16_t)vshlq_u64(v1376, v1375), v1367);
            v1366 = vorrq_s8(v1394, v1366);
            v1362 = vorrq_s8(v1393, v1362);
            v1368 = vorrq_s8(v1392, v1368);
            v1363 = vorrq_s8(v1391, v1363);
            v1361 = vorrq_s8(v1390, v1361);
            v1353 = vorrq_s8(v1389, v1353);
            v1350 = vorrq_s8(v1388, v1350);
            v1351 = vaddq_s32(v1351, v1358);
            v1369 = vaddq_s32(v1369, v1358);
            v1370 = vaddq_s32(v1370, v1358);
            v1371 = vaddq_s32(v1371, v1358);
            v1357 = vaddq_s32(v1357, v1359);
            v1356 = vaddq_s32(v1356, v1359);
            v1355 = vaddq_s32(v1355, v1359);
            v1354 = vaddq_s32(v1354, v1359);
            v1364 -= 16;
          }
          while (v1364);
          v1259 = vaddvq_s32(vaddq_s32(vaddq_s32(v1351, v1370), vaddq_s32(v1369, v1371)));
          v1395 = vorrq_s8(vorrq_s8(vorrq_s8(v1350, v1363), vorrq_s8(v1361, v1367)), vorrq_s8(vorrq_s8(v1353, v1366), vorrq_s8(v1362, v1368)));
          v1257 = (unint64_t)vorr_s8(*(int8x8_t *)v1395.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1395, v1395, 8uLL));
          if ((v1360 & 0x3FFFFFF0) != v1360)
          {
LABEL_760:
            do
            {
              v1259 += 8;
              v1396 = *(unsigned __int8 *)v1270;
              v1270 = (unint64_t *)((char *)v1270 + 1);
              v1257 |= (unint64_t)v1396 << v1349;
              v1349 -= 8;
            }
            while (v1349 >= v1273);
          }
        }
      }
      else
      {
        v1269 = (v1268 & 0xFFFFFFF8) + 8;
        v1259 += v1269;
        v1270 = (unint64_t *)((char *)v1260 + (v1269 >> 3));
        v1257 = (bswap64(*v1260) >> (56 - (v1268 & 0xF8u)) << (v1268 & 7)) | *(_QWORD *)v3;
      }
      *(_QWORD *)(v3 + 24) += (char *)v1270 - (char *)v1260;
    }
    v1397 = v1257 - (v1258 << 56);
    if (v1257 >= v1258 << 56)
    {
      LODWORD(v1258) = *(_DWORD *)(v3 + 8) - v1258;
      v1398 = 8;
      v1257 = v1397;
    }
    else
    {
      v1398 = 0;
    }
    v1399 = vpx_norm[v1258];
    v1400 = (_DWORD)v1258 << v1399;
    v1401 = v1257 << v1399;
    *(_QWORD *)v3 = v1257 << v1399;
    v1402 = (((_DWORD)v1258 << v1399 << 7) + 128) >> 8;
    v1403 = v1259 - v1399;
    *(_DWORD *)(v3 + 8) = v1400;
    *(_DWORD *)(v3 + 12) = v1259 - v1399;
    if ((int)(v1259 - v1399) < 0)
    {
      v1404 = *(unint64_t **)(v3 + 24);
      v1405 = *(_QWORD *)(v3 + 16) - (_QWORD)v1404;
      v1406 = 8 * v1405;
      v1407 = *(void (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
      if (v1407)
      {
        if (v1405 >= 9)
          v1408 = 9;
        else
          v1408 = *(_QWORD *)(v3 + 16) - (_QWORD)v1404;
        v1690 = result;
        v1685 = v1402;
        v1409 = v1398;
        v1410 = v974;
        v1411 = v1114;
        v1407(*(_QWORD *)(v3 + 40), v1404, v3 + 48, v1408);
        v1398 = v1409;
        v1402 = v1685;
        result = v1690;
        v1114 = v1411;
        v974 = v1410;
        v1404 = (unint64_t *)(v3 + 48);
      }
      v1412 = 48 - v1403;
      if (v1406 < 0x41)
      {
        v1415 = 56 - v1406 - v1403;
        if (v1415 >= 0)
          v1403 += 0x40000000;
        if (v1406)
          v1416 = 1;
        else
          v1416 = v1415 <= -1;
        v1417 = v1415 & ~(v1415 >> 31);
        if (!v1416 || v1412 < v1417)
        {
          v1414 = v1404;
        }
        else
        {
          v1472 = v1399 - v1259 + 40;
          if (v1472 >= v1417 - 1)
            v1472 = v1417 - 1;
          v1473 = v1399 - v1259 - v1472 + 47;
          v1414 = v1404;
          v1474 = v1412;
          if (v1473 < 0x78)
            goto LABEL_761;
          v1475 = (int8x16_t)v1401;
          v1476 = (int32x4_t)v1403;
          v1477 = vdupq_n_s32(v1412);
          v1478 = 0uLL;
          v1479 = vaddq_s32(v1477, (int32x4_t)xmmword_208F3A6C0);
          v1480 = vaddq_s32(v1477, (int32x4_t)xmmword_208F3A6D0);
          v1481 = vaddq_s32(v1477, (int32x4_t)xmmword_208F3A6A0);
          v1482 = vaddq_s32(v1477, (int32x4_t)xmmword_208F3A6B0);
          v1483.i64[0] = 0x800000008;
          v1483.i64[1] = 0x800000008;
          v1484.i64[0] = 0x7F0000007FLL;
          v1484.i64[1] = 0x7F0000007FLL;
          v1485 = (v1473 >> 3) + 1;
          v1486 = 0uLL;
          v1487 = 0uLL;
          v1488 = 0uLL;
          v1414 = (unint64_t *)((char *)v1404 + (v1485 & 0x3FFFFFF0));
          v1474 = v1412 - 8 * (v1485 & 0x3FFFFFF0);
          v1489 = v1485 & 0x3FFFFFF0;
          v1490 = (uint8x16_t *)v1404;
          v1491 = 0uLL;
          v1492 = 0uLL;
          v1493 = 0uLL;
          v1494 = 0uLL;
          v1495 = 0uLL;
          v1496 = 0uLL;
          do
          {
            v1497 = *v1490++;
            v1498 = vmovl_high_u8(v1497);
            v1499 = vmovl_high_u16(v1498);
            v1500.i64[0] = v1499.u32[0];
            v1500.i64[1] = v1499.u32[1];
            v1501 = v1500;
            v1502 = vmovl_u16(*(uint16x4_t *)v1498.i8);
            v1500.i64[0] = v1502.u32[2];
            v1500.i64[1] = v1502.u32[3];
            v1503 = v1500;
            v1504 = vmovl_u8(*(uint8x8_t *)v1497.i8);
            v1505 = vmovl_high_u16(v1504);
            v1500.i64[0] = v1505.u32[2];
            v1500.i64[1] = v1505.u32[3];
            v1506 = v1500;
            v1500.i64[0] = v1499.u32[2];
            v1500.i64[1] = v1499.u32[3];
            v1507 = v1500;
            v1500.i64[0] = v1502.u32[0];
            v1500.i64[1] = v1502.u32[1];
            v1508 = v1500;
            v1500.i64[0] = v1505.u32[0];
            v1500.i64[1] = v1505.u32[1];
            v1509 = v1500;
            v1510 = vmovl_u16(*(uint16x4_t *)v1504.i8);
            v1500.i64[0] = v1510.u32[2];
            v1500.i64[1] = v1510.u32[3];
            v1511 = v1500;
            v1500.i64[0] = v1510.u32[0];
            v1500.i64[1] = v1510.u32[1];
            v1512 = v1500;
            v1500.i64[0] = v1482.u32[0];
            v1500.i64[1] = v1482.u32[1];
            v1513 = (int8x16_t)vshlq_u64(v1512, v1500);
            v1500.i64[0] = v1482.u32[2];
            v1500.i64[1] = v1482.u32[3];
            v1514 = (int8x16_t)vshlq_u64(v1511, v1500);
            v1500.i64[0] = v1481.u32[0];
            v1500.i64[1] = v1481.u32[1];
            v1515 = (int8x16_t)vshlq_u64(v1509, v1500);
            v1500.i64[0] = v1480.u32[0];
            v1500.i64[1] = v1480.u32[1];
            v1516 = (int8x16_t)vshlq_u64(v1508, v1500);
            v1500.i64[0] = v1479.u32[2];
            v1500.i64[1] = v1479.u32[3];
            v1517 = (int8x16_t)vshlq_u64(v1507, v1500);
            v1500.i64[0] = v1481.u32[2];
            v1500.i64[1] = v1481.u32[3];
            v1518 = (int8x16_t)vshlq_u64(v1506, v1500);
            v1500.i64[0] = v1480.u32[2];
            v1500.i64[1] = v1480.u32[3];
            v1519 = (int8x16_t)vshlq_u64(v1503, v1500);
            v1500.i64[0] = v1479.u32[0];
            v1500.i64[1] = v1479.u32[1];
            v1492 = vorrq_s8((int8x16_t)vshlq_u64(v1501, v1500), v1492);
            v1491 = vorrq_s8(v1519, v1491);
            v1487 = vorrq_s8(v1518, v1487);
            v1493 = vorrq_s8(v1517, v1493);
            v1488 = vorrq_s8(v1516, v1488);
            v1486 = vorrq_s8(v1515, v1486);
            v1478 = vorrq_s8(v1514, v1478);
            v1475 = vorrq_s8(v1513, v1475);
            v1476 = vaddq_s32(v1476, v1483);
            v1494 = vaddq_s32(v1494, v1483);
            v1495 = vaddq_s32(v1495, v1483);
            v1496 = vaddq_s32(v1496, v1483);
            v1482 = vaddq_s32(v1482, v1484);
            v1481 = vaddq_s32(v1481, v1484);
            v1480 = vaddq_s32(v1480, v1484);
            v1479 = vaddq_s32(v1479, v1484);
            v1489 -= 16;
          }
          while (v1489);
          v1403 = vaddvq_s32(vaddq_s32(vaddq_s32(v1476, v1495), vaddq_s32(v1494, v1496)));
          v1520 = vorrq_s8(vorrq_s8(vorrq_s8(v1475, v1488), vorrq_s8(v1486, v1492)), vorrq_s8(vorrq_s8(v1478, v1491), vorrq_s8(v1487, v1493)));
          v1401 = (unint64_t)vorr_s8(*(int8x8_t *)v1520.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1520, v1520, 8uLL));
          if ((v1485 & 0x3FFFFFF0) != v1485)
          {
LABEL_761:
            do
            {
              v1403 += 8;
              v1521 = *(unsigned __int8 *)v1414;
              v1414 = (unint64_t *)((char *)v1414 + 1);
              v1401 |= (unint64_t)v1521 << v1474;
              v1474 -= 8;
            }
            while (v1474 >= v1417);
          }
        }
      }
      else
      {
        v1413 = (v1412 & 0xFFFFFFF8) + 8;
        v1403 += v1413;
        v1414 = (unint64_t *)((char *)v1404 + (v1413 >> 3));
        v1401 = (bswap64(*v1404) >> (56 - (v1412 & 0xF8u)) << (v1412 & 7)) | *(_QWORD *)v3;
      }
      *(_QWORD *)(v3 + 24) += (char *)v1414 - (char *)v1404;
    }
    v1522 = v1401 - (v1402 << 56);
    if (v1401 >= v1402 << 56)
    {
      LODWORD(v1402) = *(_DWORD *)(v3 + 8) - v1402;
      v1523 = 4;
      v1401 = v1522;
    }
    else
    {
      v1523 = 0;
    }
    v1524 = v1114 | v974 | result;
    v1525 = vpx_norm[v1402];
    v1526 = (_DWORD)v1402 << v1525;
    v1527 = v1401 << v1525;
    *(_QWORD *)v3 = v1401 << v1525;
    v1528 = (((_DWORD)v1402 << v1525 << 7) + 128) >> 8;
    v1529 = v1403 - v1525;
    *(_DWORD *)(v3 + 8) = v1526;
    *(_DWORD *)(v3 + 12) = v1403 - v1525;
    if ((int)(v1403 - v1525) < 0)
    {
      v1530 = *(unint64_t **)(v3 + 24);
      v1531 = *(_QWORD *)(v3 + 16) - (_QWORD)v1530;
      v1532 = 8 * v1531;
      v1533 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
      if (v1533)
      {
        if (v1531 >= 9)
          v1534 = 9;
        else
          v1534 = *(_QWORD *)(v3 + 16) - (_QWORD)v1530;
        v1691 = v1528;
        v1535 = v1398;
        result = v1533(*(_QWORD *)(v3 + 40), v1530, v3 + 48, v1534);
        v1398 = v1535;
        v1528 = v1691;
        v1530 = (unint64_t *)(v3 + 48);
      }
      v1536 = 48 - v1529;
      if (v1532 < 0x41)
      {
        v1539 = 56 - v1532 - v1529;
        if (v1539 >= 0)
          v1529 += 0x40000000;
        if (v1532)
          v1540 = 1;
        else
          v1540 = v1539 <= -1;
        v1541 = v1539 & ~(v1539 >> 31);
        if (!v1540 || v1536 < v1541)
        {
          v1538 = v1530;
        }
        else
        {
          v1543 = v1525 - v1403 + 40;
          if (v1543 >= v1541 - 1)
            v1543 = v1541 - 1;
          v1544 = v1525 - v1403 - v1543 + 47;
          v1538 = v1530;
          v1545 = v1536;
          if (v1544 < 0x78)
            goto LABEL_762;
          v1546 = (int8x16_t)v1527;
          v1547 = (int32x4_t)v1529;
          v1548 = vdupq_n_s32(v1536);
          v1549 = 0uLL;
          v1550 = vaddq_s32(v1548, (int32x4_t)xmmword_208F3A6C0);
          v1551 = vaddq_s32(v1548, (int32x4_t)xmmword_208F3A6D0);
          v1552 = vaddq_s32(v1548, (int32x4_t)xmmword_208F3A6A0);
          v1553 = vaddq_s32(v1548, (int32x4_t)xmmword_208F3A6B0);
          v1554.i64[0] = 0x800000008;
          v1554.i64[1] = 0x800000008;
          v1555.i64[0] = 0x7F0000007FLL;
          v1555.i64[1] = 0x7F0000007FLL;
          v1556 = (v1544 >> 3) + 1;
          v1557 = 0uLL;
          v1558 = 0uLL;
          v1559 = 0uLL;
          v1538 = (unint64_t *)((char *)v1530 + (v1556 & 0x3FFFFFF0));
          v1545 = v1536 - 8 * (v1556 & 0x3FFFFFF0);
          v1560 = v1556 & 0x3FFFFFF0;
          v1561 = (uint8x16_t *)v1530;
          v1562 = 0uLL;
          v1563 = 0uLL;
          v1564 = 0uLL;
          v1565 = 0uLL;
          v1566 = 0uLL;
          v1567 = 0uLL;
          do
          {
            v1568 = *v1561++;
            v1569 = vmovl_high_u8(v1568);
            v1570 = vmovl_high_u16(v1569);
            v1571.i64[0] = v1570.u32[0];
            v1571.i64[1] = v1570.u32[1];
            v1572 = v1571;
            v1573 = vmovl_u16(*(uint16x4_t *)v1569.i8);
            v1571.i64[0] = v1573.u32[2];
            v1571.i64[1] = v1573.u32[3];
            v1574 = v1571;
            v1575 = vmovl_u8(*(uint8x8_t *)v1568.i8);
            v1576 = vmovl_high_u16(v1575);
            v1571.i64[0] = v1576.u32[2];
            v1571.i64[1] = v1576.u32[3];
            v1577 = v1571;
            v1571.i64[0] = v1570.u32[2];
            v1571.i64[1] = v1570.u32[3];
            v1578 = v1571;
            v1571.i64[0] = v1573.u32[0];
            v1571.i64[1] = v1573.u32[1];
            v1579 = v1571;
            v1571.i64[0] = v1576.u32[0];
            v1571.i64[1] = v1576.u32[1];
            v1580 = v1571;
            v1581 = vmovl_u16(*(uint16x4_t *)v1575.i8);
            v1571.i64[0] = v1581.u32[2];
            v1571.i64[1] = v1581.u32[3];
            v1582 = v1571;
            v1571.i64[0] = v1581.u32[0];
            v1571.i64[1] = v1581.u32[1];
            v1583 = v1571;
            v1571.i64[0] = v1553.u32[0];
            v1571.i64[1] = v1553.u32[1];
            v1584 = (int8x16_t)vshlq_u64(v1583, v1571);
            v1571.i64[0] = v1553.u32[2];
            v1571.i64[1] = v1553.u32[3];
            v1585 = (int8x16_t)vshlq_u64(v1582, v1571);
            v1571.i64[0] = v1552.u32[0];
            v1571.i64[1] = v1552.u32[1];
            v1586 = (int8x16_t)vshlq_u64(v1580, v1571);
            v1571.i64[0] = v1551.u32[0];
            v1571.i64[1] = v1551.u32[1];
            v1587 = (int8x16_t)vshlq_u64(v1579, v1571);
            v1571.i64[0] = v1550.u32[2];
            v1571.i64[1] = v1550.u32[3];
            v1588 = (int8x16_t)vshlq_u64(v1578, v1571);
            v1571.i64[0] = v1552.u32[2];
            v1571.i64[1] = v1552.u32[3];
            v1589 = (int8x16_t)vshlq_u64(v1577, v1571);
            v1571.i64[0] = v1551.u32[2];
            v1571.i64[1] = v1551.u32[3];
            v1590 = (int8x16_t)vshlq_u64(v1574, v1571);
            v1571.i64[0] = v1550.u32[0];
            v1571.i64[1] = v1550.u32[1];
            v1563 = vorrq_s8((int8x16_t)vshlq_u64(v1572, v1571), v1563);
            v1562 = vorrq_s8(v1590, v1562);
            v1558 = vorrq_s8(v1589, v1558);
            v1564 = vorrq_s8(v1588, v1564);
            v1559 = vorrq_s8(v1587, v1559);
            v1557 = vorrq_s8(v1586, v1557);
            v1549 = vorrq_s8(v1585, v1549);
            v1546 = vorrq_s8(v1584, v1546);
            v1547 = vaddq_s32(v1547, v1554);
            v1565 = vaddq_s32(v1565, v1554);
            v1566 = vaddq_s32(v1566, v1554);
            v1567 = vaddq_s32(v1567, v1554);
            v1553 = vaddq_s32(v1553, v1555);
            v1552 = vaddq_s32(v1552, v1555);
            v1551 = vaddq_s32(v1551, v1555);
            v1550 = vaddq_s32(v1550, v1555);
            v1560 -= 16;
          }
          while (v1560);
          v1529 = vaddvq_s32(vaddq_s32(vaddq_s32(v1547, v1566), vaddq_s32(v1565, v1567)));
          v1591 = vorrq_s8(vorrq_s8(vorrq_s8(v1546, v1559), vorrq_s8(v1557, v1563)), vorrq_s8(vorrq_s8(v1549, v1562), vorrq_s8(v1558, v1564)));
          v1527 = (unint64_t)vorr_s8(*(int8x8_t *)v1591.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1591, v1591, 8uLL));
          if ((v1556 & 0x3FFFFFF0) != v1556)
          {
LABEL_762:
            do
            {
              v1529 += 8;
              v1592 = *(unsigned __int8 *)v1538;
              v1538 = (unint64_t *)((char *)v1538 + 1);
              v1527 |= (unint64_t)v1592 << v1545;
              v1545 -= 8;
            }
            while (v1545 >= v1541);
          }
        }
      }
      else
      {
        v1537 = (v1536 & 0xFFFFFFF8) + 8;
        v1529 += v1537;
        v1538 = (unint64_t *)((char *)v1530 + (v1537 >> 3));
        v1527 = (bswap64(*v1530) >> (56 - (v1536 & 0xF8u)) << (v1536 & 7)) | *(_QWORD *)v3;
      }
      *(_QWORD *)(v3 + 24) += (char *)v1538 - (char *)v1530;
    }
    v1593 = v1527 - (v1528 << 56);
    if (v1527 >= v1528 << 56)
    {
      LODWORD(v1528) = *(_DWORD *)(v3 + 8) - v1528;
      v1594 = 2;
      v1527 = v1593;
    }
    else
    {
      v1594 = 0;
    }
    v1595 = v1524 | v1398 | v1523;
    v1596 = vpx_norm[v1528];
    v1597 = (_DWORD)v1528 << v1596;
    v1598 = v1527 << v1596;
    *(_QWORD *)v3 = v1527 << v1596;
    v1599 = (((_DWORD)v1528 << v1596 << 7) + 128) >> 8;
    v1600 = v1529 - v1596;
    *(_DWORD *)(v3 + 8) = v1597;
    *(_DWORD *)(v3 + 12) = v1529 - v1596;
    if ((int)(v1529 - v1596) < 0)
    {
      v1604 = *(unint64_t **)(v3 + 24);
      v1605 = *(_QWORD *)(v3 + 16) - (_QWORD)v1604;
      v1606 = 8 * v1605;
      v1607 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
      if (v1607)
      {
        if (v1605 >= 9)
          v1608 = 9;
        else
          v1608 = *(_QWORD *)(v3 + 16) - (_QWORD)v1604;
        v1609 = v1594;
        result = v1607(*(_QWORD *)(v3 + 40), v1604, v3 + 48, v1608);
        v1594 = v1609;
        v1604 = (unint64_t *)(v3 + 48);
      }
      v1610 = 48 - v1600;
      if (v1606 < 0x41)
      {
        v1613 = 56 - v1606 - v1600;
        if (v1613 >= 0)
          v1600 += 0x40000000;
        if (v1606)
          v1614 = 1;
        else
          v1614 = v1613 <= -1;
        v1615 = v1613 & ~(v1613 >> 31);
        if (!v1614 || v1610 < v1615)
        {
          v1612 = v1604;
          v475 = v1692;
        }
        else
        {
          v1617 = v1596 - v1529 + 40;
          if (v1617 >= v1615 - 1)
            v1617 = v1615 - 1;
          v1618 = v1596 - v1529 - v1617 + 47;
          v1612 = v1604;
          v1619 = v1610;
          v475 = v1692;
          if (v1618 < 0x78)
            goto LABEL_763;
          v1620 = (int8x16_t)v1598;
          v1621 = (int32x4_t)v1600;
          v1622 = vdupq_n_s32(v1610);
          v1623 = 0uLL;
          v1624 = vaddq_s32(v1622, (int32x4_t)xmmword_208F3A6C0);
          v1625 = vaddq_s32(v1622, (int32x4_t)xmmword_208F3A6D0);
          v1626 = vaddq_s32(v1622, (int32x4_t)xmmword_208F3A6A0);
          v1627 = vaddq_s32(v1622, (int32x4_t)xmmword_208F3A6B0);
          v1628.i64[0] = 0x800000008;
          v1628.i64[1] = 0x800000008;
          v1629.i64[0] = 0x7F0000007FLL;
          v1629.i64[1] = 0x7F0000007FLL;
          v1630 = (v1618 >> 3) + 1;
          v1631 = 0uLL;
          v1632 = 0uLL;
          v1633 = 0uLL;
          v1612 = (unint64_t *)((char *)v1604 + (v1630 & 0x3FFFFFF0));
          v1619 = v1610 - 8 * (v1630 & 0x3FFFFFF0);
          v1634 = v1630 & 0x3FFFFFF0;
          v1635 = (uint8x16_t *)v1604;
          v1636 = 0uLL;
          v1637 = 0uLL;
          v1638 = 0uLL;
          v1639 = 0uLL;
          v1640 = 0uLL;
          v1641 = 0uLL;
          do
          {
            v1642 = *v1635++;
            v1643 = vmovl_high_u8(v1642);
            v1644 = vmovl_high_u16(v1643);
            v1645.i64[0] = v1644.u32[0];
            v1645.i64[1] = v1644.u32[1];
            v1646 = v1645;
            v1647 = vmovl_u16(*(uint16x4_t *)v1643.i8);
            v1645.i64[0] = v1647.u32[2];
            v1645.i64[1] = v1647.u32[3];
            v1648 = v1645;
            v1649 = vmovl_u8(*(uint8x8_t *)v1642.i8);
            v1650 = vmovl_high_u16(v1649);
            v1645.i64[0] = v1650.u32[2];
            v1645.i64[1] = v1650.u32[3];
            v1651 = v1645;
            v1645.i64[0] = v1644.u32[2];
            v1645.i64[1] = v1644.u32[3];
            v1652 = v1645;
            v1645.i64[0] = v1647.u32[0];
            v1645.i64[1] = v1647.u32[1];
            v1653 = v1645;
            v1645.i64[0] = v1650.u32[0];
            v1645.i64[1] = v1650.u32[1];
            v1654 = v1645;
            v1655 = vmovl_u16(*(uint16x4_t *)v1649.i8);
            v1645.i64[0] = v1655.u32[2];
            v1645.i64[1] = v1655.u32[3];
            v1656 = v1645;
            v1645.i64[0] = v1655.u32[0];
            v1645.i64[1] = v1655.u32[1];
            v1657 = v1645;
            v1645.i64[0] = v1627.u32[0];
            v1645.i64[1] = v1627.u32[1];
            v1658 = (int8x16_t)vshlq_u64(v1657, v1645);
            v1645.i64[0] = v1627.u32[2];
            v1645.i64[1] = v1627.u32[3];
            v1659 = (int8x16_t)vshlq_u64(v1656, v1645);
            v1645.i64[0] = v1626.u32[0];
            v1645.i64[1] = v1626.u32[1];
            v1660 = (int8x16_t)vshlq_u64(v1654, v1645);
            v1645.i64[0] = v1625.u32[0];
            v1645.i64[1] = v1625.u32[1];
            v1661 = (int8x16_t)vshlq_u64(v1653, v1645);
            v1645.i64[0] = v1624.u32[2];
            v1645.i64[1] = v1624.u32[3];
            v1662 = (int8x16_t)vshlq_u64(v1652, v1645);
            v1645.i64[0] = v1626.u32[2];
            v1645.i64[1] = v1626.u32[3];
            v1663 = (int8x16_t)vshlq_u64(v1651, v1645);
            v1645.i64[0] = v1625.u32[2];
            v1645.i64[1] = v1625.u32[3];
            v1664 = (int8x16_t)vshlq_u64(v1648, v1645);
            v1645.i64[0] = v1624.u32[0];
            v1645.i64[1] = v1624.u32[1];
            v1637 = vorrq_s8((int8x16_t)vshlq_u64(v1646, v1645), v1637);
            v1636 = vorrq_s8(v1664, v1636);
            v1632 = vorrq_s8(v1663, v1632);
            v1638 = vorrq_s8(v1662, v1638);
            v1633 = vorrq_s8(v1661, v1633);
            v1631 = vorrq_s8(v1660, v1631);
            v1623 = vorrq_s8(v1659, v1623);
            v1620 = vorrq_s8(v1658, v1620);
            v1621 = vaddq_s32(v1621, v1628);
            v1639 = vaddq_s32(v1639, v1628);
            v1640 = vaddq_s32(v1640, v1628);
            v1641 = vaddq_s32(v1641, v1628);
            v1627 = vaddq_s32(v1627, v1629);
            v1626 = vaddq_s32(v1626, v1629);
            v1625 = vaddq_s32(v1625, v1629);
            v1624 = vaddq_s32(v1624, v1629);
            v1634 -= 16;
          }
          while (v1634);
          v1600 = vaddvq_s32(vaddq_s32(vaddq_s32(v1621, v1640), vaddq_s32(v1639, v1641)));
          v1665 = vorrq_s8(vorrq_s8(vorrq_s8(v1620, v1633), vorrq_s8(v1631, v1637)), vorrq_s8(vorrq_s8(v1623, v1636), vorrq_s8(v1632, v1638)));
          v1598 = (unint64_t)vorr_s8(*(int8x8_t *)v1665.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1665, v1665, 8uLL));
          if ((v1630 & 0x3FFFFFF0) != v1630)
          {
LABEL_763:
            do
            {
              v1600 += 8;
              v1666 = *(unsigned __int8 *)v1612;
              v1612 = (unint64_t *)((char *)v1612 + 1);
              v1598 |= (unint64_t)v1666 << v1619;
              v1619 -= 8;
            }
            while (v1619 >= v1615);
          }
        }
      }
      else
      {
        v1611 = (v1610 & 0xFFFFFFF8) + 8;
        v1600 += v1611;
        v1612 = (unint64_t *)((char *)v1604 + (v1611 >> 3));
        v1598 = (bswap64(*v1604) >> (56 - (v1610 & 0xF8u)) << (v1610 & 7)) | *(_QWORD *)v3;
        v475 = v1692;
      }
      *(_QWORD *)(v3 + 24) += (char *)v1612 - (char *)v1604;
      v1601 = v1595 | v1594;
      v1602 = v1598 - (v1599 << 56);
      if (v1598 < v1599 << 56)
        goto LABEL_693;
    }
    else
    {
      v475 = v1692;
      v1601 = v1595 | v1594;
      v1602 = v1598 - (v1599 << 56);
      if (v1598 < v1599 << 56)
      {
LABEL_693:
        v1603 = 0;
LABEL_721:
        v1667 = vpx_norm[v1599];
        v1668 = (_DWORD)v1599 << v1667;
        v1669 = v1598 << v1667;
        v1670 = v1600 - v1667;
        *(_QWORD *)v3 = v1669;
        *(_DWORD *)(v3 + 8) = v1668;
        *(_DWORD *)(v3 + 12) = v1670;
        v1671 = v1601 | v1603;
        if (v1671 >= 0x41)
        {
          v1672 = 2 * v1671;
          v1673 = ((v1668 << 7) + 128) >> 8;
          if (v1670 < 0)
          {
            result = vpx_reader_fill(v3);
            v1670 = *(_DWORD *)(v3 + 12);
            v1669 = *(_QWORD *)v3;
          }
          v1674 = v1669 - (v1673 << 56);
          if (v1669 >= v1673 << 56)
          {
            LODWORD(v1673) = *(_DWORD *)(v3 + 8) - v1673;
            v1675 = 1;
            v1669 = v1674;
          }
          else
          {
            v1675 = 0;
          }
          v1676 = vpx_norm[v1673];
          *(_QWORD *)v3 = v1669 << v1676;
          *(_DWORD *)(v3 + 8) = (_DWORD)v1673 << v1676;
          *(_DWORD *)(v3 + 12) = v1670 - v1676;
          v1671 = v1672 - 65 + v1675;
        }
        v613 = v1671 + 64;
        goto LABEL_729;
      }
    }
    LODWORD(v1599) = *(_DWORD *)(v3 + 8) - v1599;
    v1603 = 1;
    v1598 = v1602;
    goto LABEL_721;
  }
  if ((v20 & 0x80000000) != 0)
  {
    v53 = *(unint64_t **)(v3 + 24);
    v54 = *(_QWORD *)(v3 + 16) - (_QWORD)v53;
    v55 = 8 * v54;
    v56 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
    if (v56)
    {
      if (v54 >= 9)
        v57 = 9;
      else
        v57 = *(_QWORD *)(v3 + 16) - (_QWORD)v53;
      result = v56(*(_QWORD *)(v3 + 40), v53, v3 + 48, v57);
      v53 = (unint64_t *)(v3 + 48);
    }
    v58 = 48 - v20;
    if (v55 < 0x41)
    {
      v168 = 56 - v55 - v20;
      if (v168 >= 0)
        v20 += 0x40000000;
      if (v55)
        v169 = 1;
      else
        v169 = v168 <= -1;
      if (v169 && (v170 = v168 & ~(v168 >> 31), v58 >= v170))
      {
        v171 = v18 - v13 + 40;
        if (v171 >= v170 - 1)
          v171 = v170 - 1;
        v172 = v18 - v13 - v171 + 47;
        v60 = v53;
        v173 = v58;
        if (v172 < 0x78)
          goto LABEL_764;
        v174 = (int8x16_t)v19;
        v175 = (int32x4_t)v20;
        v176 = vdupq_n_s32(v58);
        v177 = 0uLL;
        v178 = vaddq_s32(v176, (int32x4_t)xmmword_208F3A6C0);
        v179 = vaddq_s32(v176, (int32x4_t)xmmword_208F3A6D0);
        v180 = vaddq_s32(v176, (int32x4_t)xmmword_208F3A6A0);
        v181 = vaddq_s32(v176, (int32x4_t)xmmword_208F3A6B0);
        v182.i64[0] = 0x800000008;
        v182.i64[1] = 0x800000008;
        v183.i64[0] = 0x7F0000007FLL;
        v183.i64[1] = 0x7F0000007FLL;
        v184 = (v172 >> 3) + 1;
        v185 = 0uLL;
        v186 = 0uLL;
        v187 = 0uLL;
        v60 = (unint64_t *)((char *)v53 + (v184 & 0x3FFFFFF0));
        v173 = v58 - 8 * (v184 & 0x3FFFFFF0);
        v188 = v184 & 0x3FFFFFF0;
        v189 = (uint8x16_t *)v53;
        v190 = 0uLL;
        v191 = 0uLL;
        v192 = 0uLL;
        v193 = 0uLL;
        v194 = 0uLL;
        v195 = 0uLL;
        do
        {
          v196 = *v189++;
          v197 = vmovl_high_u8(v196);
          v198 = vmovl_high_u16(v197);
          v199.i64[0] = v198.u32[0];
          v199.i64[1] = v198.u32[1];
          v200 = v199;
          v201 = vmovl_u16(*(uint16x4_t *)v197.i8);
          v199.i64[0] = v201.u32[2];
          v199.i64[1] = v201.u32[3];
          v202 = v199;
          v203 = vmovl_u8(*(uint8x8_t *)v196.i8);
          v204 = vmovl_high_u16(v203);
          v199.i64[0] = v204.u32[2];
          v199.i64[1] = v204.u32[3];
          v205 = v199;
          v199.i64[0] = v198.u32[2];
          v199.i64[1] = v198.u32[3];
          v206 = v199;
          v199.i64[0] = v201.u32[0];
          v199.i64[1] = v201.u32[1];
          v207 = v199;
          v199.i64[0] = v204.u32[0];
          v199.i64[1] = v204.u32[1];
          v208 = v199;
          v209 = vmovl_u16(*(uint16x4_t *)v203.i8);
          v199.i64[0] = v209.u32[2];
          v199.i64[1] = v209.u32[3];
          v210 = v199;
          v199.i64[0] = v209.u32[0];
          v199.i64[1] = v209.u32[1];
          v211 = v199;
          v199.i64[0] = v181.u32[0];
          v199.i64[1] = v181.u32[1];
          v212 = (int8x16_t)vshlq_u64(v211, v199);
          v199.i64[0] = v181.u32[2];
          v199.i64[1] = v181.u32[3];
          v213 = (int8x16_t)vshlq_u64(v210, v199);
          v199.i64[0] = v180.u32[0];
          v199.i64[1] = v180.u32[1];
          v214 = (int8x16_t)vshlq_u64(v208, v199);
          v199.i64[0] = v179.u32[0];
          v199.i64[1] = v179.u32[1];
          v215 = (int8x16_t)vshlq_u64(v207, v199);
          v199.i64[0] = v178.u32[2];
          v199.i64[1] = v178.u32[3];
          v216 = (int8x16_t)vshlq_u64(v206, v199);
          v199.i64[0] = v180.u32[2];
          v199.i64[1] = v180.u32[3];
          v217 = (int8x16_t)vshlq_u64(v205, v199);
          v199.i64[0] = v179.u32[2];
          v199.i64[1] = v179.u32[3];
          v218 = (int8x16_t)vshlq_u64(v202, v199);
          v199.i64[0] = v178.u32[0];
          v199.i64[1] = v178.u32[1];
          v191 = vorrq_s8((int8x16_t)vshlq_u64(v200, v199), v191);
          v190 = vorrq_s8(v218, v190);
          v186 = vorrq_s8(v217, v186);
          v192 = vorrq_s8(v216, v192);
          v187 = vorrq_s8(v215, v187);
          v185 = vorrq_s8(v214, v185);
          v177 = vorrq_s8(v213, v177);
          v174 = vorrq_s8(v212, v174);
          v175 = vaddq_s32(v175, v182);
          v193 = vaddq_s32(v193, v182);
          v194 = vaddq_s32(v194, v182);
          v195 = vaddq_s32(v195, v182);
          v181 = vaddq_s32(v181, v183);
          v180 = vaddq_s32(v180, v183);
          v179 = vaddq_s32(v179, v183);
          v178 = vaddq_s32(v178, v183);
          v188 -= 16;
        }
        while (v188);
        v20 = vaddvq_s32(vaddq_s32(vaddq_s32(v175, v194), vaddq_s32(v193, v195)));
        v219 = vorrq_s8(vorrq_s8(vorrq_s8(v174, v187), vorrq_s8(v185, v191)), vorrq_s8(vorrq_s8(v177, v190), vorrq_s8(v186, v192)));
        v19 = (unint64_t)vorr_s8(*(int8x8_t *)v219.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL));
        if ((v184 & 0x3FFFFFF0) != v184)
        {
LABEL_764:
          do
          {
            v20 += 8;
            v220 = *(unsigned __int8 *)v60;
            v60 = (unint64_t *)((char *)v60 + 1);
            v19 |= (unint64_t)v220 << v173;
            v173 -= 8;
          }
          while (v173 >= v170);
        }
      }
      else
      {
        v60 = v53;
      }
    }
    else
    {
      v59 = (v58 & 0xFFFFFFF8) + 8;
      v20 += v59;
      v60 = (unint64_t *)((char *)v53 + (v59 >> 3));
      v19 = (bswap64(*v53) >> (56 - (v58 & 0xF8u)) << (v58 & 7)) | *(_QWORD *)v3;
    }
    *(_QWORD *)(v3 + 24) += (char *)v60 - (char *)v53;
    v22 = v19 - (v21 << 56);
    if (v19 < v21 << 56)
      goto LABEL_11;
  }
  else
  {
    v22 = v19 - (v21 << 56);
    if (v19 < v21 << 56)
    {
LABEL_11:
      v23 = 0;
      goto LABEL_140;
    }
  }
  LODWORD(v21) = *(_DWORD *)(v3 + 8) - v21;
  v23 = 8;
  v19 = v22;
LABEL_140:
  v296 = vpx_norm[v21];
  v297 = v19 << v296;
  *(_QWORD *)v3 = v19 << v296;
  v298 = (((_DWORD)v21 << v296 << 7) + 128) >> 8;
  v299 = v20 - v296;
  *(_DWORD *)(v3 + 8) = (_DWORD)v21 << v296;
  *(_DWORD *)(v3 + 12) = v20 - v296;
  if ((int)(v20 - v296) < 0)
  {
    v302 = *(unint64_t **)(v3 + 24);
    v303 = *(_QWORD *)(v3 + 16) - (_QWORD)v302;
    v304 = 8 * v303;
    v305 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
    if (v305)
    {
      if (v303 >= 9)
        v306 = 9;
      else
        v306 = *(_QWORD *)(v3 + 16) - (_QWORD)v302;
      result = v305(*(_QWORD *)(v3 + 40), v302, v3 + 48, v306);
      v302 = (unint64_t *)(v3 + 48);
    }
    v307 = 48 - v299;
    if (v304 < 0x41)
    {
      v310 = 56 - v304 - v299;
      if (v310 >= 0)
        v299 += 0x40000000;
      if (v304)
        v311 = 1;
      else
        v311 = v310 <= -1;
      v312 = v310 & ~(v310 >> 31);
      if (!v311 || v307 < v312)
      {
        v309 = v302;
      }
      else
      {
        v420 = v296 - v20 + 40;
        if (v420 >= v312 - 1)
          v420 = v312 - 1;
        v421 = v296 - v20 - v420 + 47;
        v309 = v302;
        v422 = v307;
        if (v421 < 0x78)
          goto LABEL_765;
        v423 = (int8x16_t)(v19 << v296);
        v424 = (int32x4_t)v299;
        v425 = vdupq_n_s32(v307);
        v426 = 0uLL;
        v427 = vaddq_s32(v425, (int32x4_t)xmmword_208F3A6C0);
        v428 = vaddq_s32(v425, (int32x4_t)xmmword_208F3A6D0);
        v429 = vaddq_s32(v425, (int32x4_t)xmmword_208F3A6A0);
        v430 = vaddq_s32(v425, (int32x4_t)xmmword_208F3A6B0);
        v431.i64[0] = 0x800000008;
        v431.i64[1] = 0x800000008;
        v432.i64[0] = 0x7F0000007FLL;
        v432.i64[1] = 0x7F0000007FLL;
        v433 = (v421 >> 3) + 1;
        v434 = 0uLL;
        v435 = 0uLL;
        v436 = 0uLL;
        v309 = (unint64_t *)((char *)v302 + (v433 & 0x3FFFFFF0));
        v422 = v307 - 8 * (v433 & 0x3FFFFFF0);
        v437 = v433 & 0x3FFFFFF0;
        v438 = (uint8x16_t *)v302;
        v439 = 0uLL;
        v440 = 0uLL;
        v441 = 0uLL;
        v442 = 0uLL;
        v443 = 0uLL;
        v444 = 0uLL;
        do
        {
          v445 = *v438++;
          v446 = vmovl_high_u8(v445);
          v447 = vmovl_high_u16(v446);
          v448.i64[0] = v447.u32[0];
          v448.i64[1] = v447.u32[1];
          v449 = v448;
          v450 = vmovl_u16(*(uint16x4_t *)v446.i8);
          v448.i64[0] = v450.u32[2];
          v448.i64[1] = v450.u32[3];
          v451 = v448;
          v452 = vmovl_u8(*(uint8x8_t *)v445.i8);
          v453 = vmovl_high_u16(v452);
          v448.i64[0] = v453.u32[2];
          v448.i64[1] = v453.u32[3];
          v454 = v448;
          v448.i64[0] = v447.u32[2];
          v448.i64[1] = v447.u32[3];
          v455 = v448;
          v448.i64[0] = v450.u32[0];
          v448.i64[1] = v450.u32[1];
          v456 = v448;
          v448.i64[0] = v453.u32[0];
          v448.i64[1] = v453.u32[1];
          v457 = v448;
          v458 = vmovl_u16(*(uint16x4_t *)v452.i8);
          v448.i64[0] = v458.u32[2];
          v448.i64[1] = v458.u32[3];
          v459 = v448;
          v448.i64[0] = v458.u32[0];
          v448.i64[1] = v458.u32[1];
          v460 = v448;
          v448.i64[0] = v430.u32[0];
          v448.i64[1] = v430.u32[1];
          v461 = (int8x16_t)vshlq_u64(v460, v448);
          v448.i64[0] = v430.u32[2];
          v448.i64[1] = v430.u32[3];
          v462 = (int8x16_t)vshlq_u64(v459, v448);
          v448.i64[0] = v429.u32[0];
          v448.i64[1] = v429.u32[1];
          v463 = (int8x16_t)vshlq_u64(v457, v448);
          v448.i64[0] = v428.u32[0];
          v448.i64[1] = v428.u32[1];
          v464 = (int8x16_t)vshlq_u64(v456, v448);
          v448.i64[0] = v427.u32[2];
          v448.i64[1] = v427.u32[3];
          v465 = (int8x16_t)vshlq_u64(v455, v448);
          v448.i64[0] = v429.u32[2];
          v448.i64[1] = v429.u32[3];
          v466 = (int8x16_t)vshlq_u64(v454, v448);
          v448.i64[0] = v428.u32[2];
          v448.i64[1] = v428.u32[3];
          v467 = (int8x16_t)vshlq_u64(v451, v448);
          v448.i64[0] = v427.u32[0];
          v448.i64[1] = v427.u32[1];
          v440 = vorrq_s8((int8x16_t)vshlq_u64(v449, v448), v440);
          v439 = vorrq_s8(v467, v439);
          v435 = vorrq_s8(v466, v435);
          v441 = vorrq_s8(v465, v441);
          v436 = vorrq_s8(v464, v436);
          v434 = vorrq_s8(v463, v434);
          v426 = vorrq_s8(v462, v426);
          v423 = vorrq_s8(v461, v423);
          v424 = vaddq_s32(v424, v431);
          v442 = vaddq_s32(v442, v431);
          v443 = vaddq_s32(v443, v431);
          v444 = vaddq_s32(v444, v431);
          v430 = vaddq_s32(v430, v432);
          v429 = vaddq_s32(v429, v432);
          v428 = vaddq_s32(v428, v432);
          v427 = vaddq_s32(v427, v432);
          v437 -= 16;
        }
        while (v437);
        v299 = vaddvq_s32(vaddq_s32(vaddq_s32(v424, v443), vaddq_s32(v442, v444)));
        v468 = vorrq_s8(vorrq_s8(vorrq_s8(v423, v436), vorrq_s8(v434, v440)), vorrq_s8(vorrq_s8(v426, v439), vorrq_s8(v435, v441)));
        v297 = (unint64_t)vorr_s8(*(int8x8_t *)v468.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v468, v468, 8uLL));
        if ((v433 & 0x3FFFFFF0) != v433)
        {
LABEL_765:
          do
          {
            v299 += 8;
            v469 = *(unsigned __int8 *)v309;
            v309 = (unint64_t *)((char *)v309 + 1);
            v297 |= (unint64_t)v469 << v422;
            v422 -= 8;
          }
          while (v422 >= v312);
        }
      }
    }
    else
    {
      v308 = (v307 & 0xFFFFFFF8) + 8;
      v299 += v308;
      v309 = (unint64_t *)((char *)v302 + (v308 >> 3));
      v297 = (bswap64(*v302) >> (56 - (v307 & 0xF8u)) << (v307 & 7)) | *(_QWORD *)v3;
    }
    *(_QWORD *)(v3 + 24) += (char *)v309 - (char *)v302;
    v300 = v297 - (v298 << 56);
    if (v297 < v298 << 56)
      goto LABEL_142;
  }
  else
  {
    v300 = v297 - (v298 << 56);
    if (v297 < v298 << 56)
    {
LABEL_142:
      v301 = 0;
      goto LABEL_202;
    }
  }
  LODWORD(v298) = *(_DWORD *)(v3 + 8) - v298;
  v301 = 4;
  v297 = v300;
LABEL_202:
  v470 = vpx_norm[v298];
  v471 = (_DWORD)v298 << v470;
  v472 = v297 << v470;
  *(_QWORD *)v3 = v472;
  v473 = (((_DWORD)v298 << v470 << 7) + 128) >> 8;
  v474 = v299 - v470;
  *(_DWORD *)(v3 + 8) = v471;
  *(_DWORD *)(v3 + 12) = v299 - v470;
  if ((int)(v299 - v470) < 0)
  {
    v478 = *(unint64_t **)(v3 + 24);
    v479 = *(_QWORD *)(v3 + 16) - (_QWORD)v478;
    v480 = 8 * v479;
    v481 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
    if (v481)
    {
      if (v479 >= 9)
        v482 = 9;
      else
        v482 = *(_QWORD *)(v3 + 16) - (_QWORD)v478;
      result = v481(*(_QWORD *)(v3 + 40), v478, v3 + 48, v482);
      v478 = (unint64_t *)(v3 + 48);
    }
    v483 = 48 - v474;
    if (v480 < 0x41)
    {
      v486 = 56 - v480 - v474;
      if (v486 >= 0)
        v474 += 0x40000000;
      if (v480)
        v487 = 1;
      else
        v487 = v486 <= -1;
      v488 = v486 & ~(v486 >> 31);
      if (!v487 || v483 < v488)
      {
        v485 = v478;
        v475 = v1692;
      }
      else
      {
        v490 = v470 - v299 + 40;
        if (v490 >= v488 - 1)
          v490 = v488 - 1;
        v491 = v470 - v299 - v490 + 47;
        v485 = v478;
        v492 = v483;
        v475 = v1692;
        if (v491 < 0x78)
          goto LABEL_766;
        v493 = (int8x16_t)v472;
        v494 = (int32x4_t)v474;
        v495 = vdupq_n_s32(v483);
        v496 = 0uLL;
        v497 = vaddq_s32(v495, (int32x4_t)xmmword_208F3A6C0);
        v498 = vaddq_s32(v495, (int32x4_t)xmmword_208F3A6D0);
        v499 = vaddq_s32(v495, (int32x4_t)xmmword_208F3A6A0);
        v500 = vaddq_s32(v495, (int32x4_t)xmmword_208F3A6B0);
        v501.i64[0] = 0x800000008;
        v501.i64[1] = 0x800000008;
        v502.i64[0] = 0x7F0000007FLL;
        v502.i64[1] = 0x7F0000007FLL;
        v503 = (v491 >> 3) + 1;
        v504 = 0uLL;
        v505 = 0uLL;
        v506 = 0uLL;
        v485 = (unint64_t *)((char *)v478 + (v503 & 0x3FFFFFF0));
        v492 = v483 - 8 * (v503 & 0x3FFFFFF0);
        v507 = v503 & 0x3FFFFFF0;
        v508 = (uint8x16_t *)v478;
        v509 = 0uLL;
        v510 = 0uLL;
        v511 = 0uLL;
        v512 = 0uLL;
        v513 = 0uLL;
        v514 = 0uLL;
        do
        {
          v515 = *v508++;
          v516 = vmovl_high_u8(v515);
          v517 = vmovl_high_u16(v516);
          v518.i64[0] = v517.u32[0];
          v518.i64[1] = v517.u32[1];
          v519 = v518;
          v520 = vmovl_u16(*(uint16x4_t *)v516.i8);
          v518.i64[0] = v520.u32[2];
          v518.i64[1] = v520.u32[3];
          v521 = v518;
          v522 = vmovl_u8(*(uint8x8_t *)v515.i8);
          v523 = vmovl_high_u16(v522);
          v518.i64[0] = v523.u32[2];
          v518.i64[1] = v523.u32[3];
          v524 = v518;
          v518.i64[0] = v517.u32[2];
          v518.i64[1] = v517.u32[3];
          v525 = v518;
          v518.i64[0] = v520.u32[0];
          v518.i64[1] = v520.u32[1];
          v526 = v518;
          v518.i64[0] = v523.u32[0];
          v518.i64[1] = v523.u32[1];
          v527 = v518;
          v528 = vmovl_u16(*(uint16x4_t *)v522.i8);
          v518.i64[0] = v528.u32[2];
          v518.i64[1] = v528.u32[3];
          v529 = v518;
          v518.i64[0] = v528.u32[0];
          v518.i64[1] = v528.u32[1];
          v530 = v518;
          v518.i64[0] = v500.u32[0];
          v518.i64[1] = v500.u32[1];
          v531 = (int8x16_t)vshlq_u64(v530, v518);
          v518.i64[0] = v500.u32[2];
          v518.i64[1] = v500.u32[3];
          v532 = (int8x16_t)vshlq_u64(v529, v518);
          v518.i64[0] = v499.u32[0];
          v518.i64[1] = v499.u32[1];
          v533 = (int8x16_t)vshlq_u64(v527, v518);
          v518.i64[0] = v498.u32[0];
          v518.i64[1] = v498.u32[1];
          v534 = (int8x16_t)vshlq_u64(v526, v518);
          v518.i64[0] = v497.u32[2];
          v518.i64[1] = v497.u32[3];
          v535 = (int8x16_t)vshlq_u64(v525, v518);
          v518.i64[0] = v499.u32[2];
          v518.i64[1] = v499.u32[3];
          v536 = (int8x16_t)vshlq_u64(v524, v518);
          v518.i64[0] = v498.u32[2];
          v518.i64[1] = v498.u32[3];
          v537 = (int8x16_t)vshlq_u64(v521, v518);
          v518.i64[0] = v497.u32[0];
          v518.i64[1] = v497.u32[1];
          v510 = vorrq_s8((int8x16_t)vshlq_u64(v519, v518), v510);
          v509 = vorrq_s8(v537, v509);
          v505 = vorrq_s8(v536, v505);
          v511 = vorrq_s8(v535, v511);
          v506 = vorrq_s8(v534, v506);
          v504 = vorrq_s8(v533, v504);
          v496 = vorrq_s8(v532, v496);
          v493 = vorrq_s8(v531, v493);
          v494 = vaddq_s32(v494, v501);
          v512 = vaddq_s32(v512, v501);
          v513 = vaddq_s32(v513, v501);
          v514 = vaddq_s32(v514, v501);
          v500 = vaddq_s32(v500, v502);
          v499 = vaddq_s32(v499, v502);
          v498 = vaddq_s32(v498, v502);
          v497 = vaddq_s32(v497, v502);
          v507 -= 16;
        }
        while (v507);
        v474 = vaddvq_s32(vaddq_s32(vaddq_s32(v494, v513), vaddq_s32(v512, v514)));
        v538 = vorrq_s8(vorrq_s8(vorrq_s8(v493, v506), vorrq_s8(v504, v510)), vorrq_s8(vorrq_s8(v496, v509), vorrq_s8(v505, v511)));
        v472 = (unint64_t)vorr_s8(*(int8x8_t *)v538.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v538, v538, 8uLL));
        if ((v503 & 0x3FFFFFF0) != v503)
        {
LABEL_766:
          do
          {
            v474 += 8;
            v539 = *(unsigned __int8 *)v485;
            v485 = (unint64_t *)((char *)v485 + 1);
            v472 |= (unint64_t)v539 << v492;
            v492 -= 8;
          }
          while (v492 >= v488);
        }
      }
    }
    else
    {
      v484 = (v483 & 0xFFFFFFF8) + 8;
      v474 += v484;
      v485 = (unint64_t *)((char *)v478 + (v484 >> 3));
      v472 = (bswap64(*v478) >> (56 - (v483 & 0xF8u)) << (v483 & 7)) | *(_QWORD *)v3;
      v475 = v1692;
    }
    *(_QWORD *)(v3 + 24) += (char *)v485 - (char *)v478;
    v476 = v472 - (v473 << 56);
    if (v472 < v473 << 56)
      goto LABEL_204;
  }
  else
  {
    v475 = v1692;
    v476 = v472 - (v473 << 56);
    if (v472 < v473 << 56)
    {
LABEL_204:
      v477 = 0;
      goto LABEL_232;
    }
  }
  LODWORD(v473) = *(_DWORD *)(v3 + 8) - v473;
  v477 = 2;
  v472 = v476;
LABEL_232:
  v540 = v301 | v23;
  v541 = vpx_norm[v473];
  v542 = (_DWORD)v473 << v541;
  v543 = v472 << v541;
  *(_QWORD *)v3 = v543;
  v544 = (((_DWORD)v473 << v541 << 7) + 128) >> 8;
  v545 = v474 - v541;
  *(_DWORD *)(v3 + 8) = v542;
  *(_DWORD *)(v3 + 12) = v474 - v541;
  if ((int)(v474 - v541) < 0)
  {
    v549 = *(unint64_t **)(v3 + 24);
    v550 = *(_QWORD *)(v3 + 16) - (_QWORD)v549;
    v551 = 8 * v550;
    v552 = *(uint64_t (**)(_QWORD, unint64_t *, uint64_t, uint64_t))(v3 + 32);
    if (v552)
    {
      if (v550 >= 9)
        v553 = 9;
      else
        v553 = *(_QWORD *)(v3 + 16) - (_QWORD)v549;
      v554 = v477;
      result = v552(*(_QWORD *)(v3 + 40), v549, v3 + 48, v553);
      v477 = v554;
      v549 = (unint64_t *)(v3 + 48);
    }
    v555 = 48 - v545;
    if (v551 < 0x41)
    {
      v558 = 56 - v551 - v545;
      if (v558 >= 0)
        v545 += 0x40000000;
      if (v551)
        v559 = 1;
      else
        v559 = v558 <= -1;
      v560 = v558 & ~(v558 >> 31);
      if (!v559 || v555 < v560)
      {
        v557 = v549;
        v475 = v1692;
      }
      else
      {
        v562 = v541 - v474 + 40;
        if (v562 >= v560 - 1)
          v562 = v560 - 1;
        v563 = v541 - v474 - v562 + 47;
        v557 = v549;
        v564 = v555;
        v475 = v1692;
        if (v563 < 0x78)
          goto LABEL_767;
        v565 = (int8x16_t)v543;
        v566 = (int32x4_t)v545;
        v567 = vdupq_n_s32(v555);
        v568 = 0uLL;
        v569 = vaddq_s32(v567, (int32x4_t)xmmword_208F3A6C0);
        v570 = vaddq_s32(v567, (int32x4_t)xmmword_208F3A6D0);
        v571 = vaddq_s32(v567, (int32x4_t)xmmword_208F3A6A0);
        v572 = vaddq_s32(v567, (int32x4_t)xmmword_208F3A6B0);
        v573.i64[0] = 0x800000008;
        v573.i64[1] = 0x800000008;
        v574.i64[0] = 0x7F0000007FLL;
        v574.i64[1] = 0x7F0000007FLL;
        v575 = (v563 >> 3) + 1;
        v576 = 0uLL;
        v577 = 0uLL;
        v578 = 0uLL;
        v557 = (unint64_t *)((char *)v549 + (v575 & 0x3FFFFFF0));
        v564 = v555 - 8 * (v575 & 0x3FFFFFF0);
        v579 = v575 & 0x3FFFFFF0;
        v580 = (uint8x16_t *)v549;
        v581 = 0uLL;
        v582 = 0uLL;
        v583 = 0uLL;
        v584 = 0uLL;
        v585 = 0uLL;
        v586 = 0uLL;
        do
        {
          v587 = *v580++;
          v588 = vmovl_high_u8(v587);
          v589 = vmovl_high_u16(v588);
          v590.i64[0] = v589.u32[0];
          v590.i64[1] = v589.u32[1];
          v591 = v590;
          v592 = vmovl_u16(*(uint16x4_t *)v588.i8);
          v590.i64[0] = v592.u32[2];
          v590.i64[1] = v592.u32[3];
          v593 = v590;
          v594 = vmovl_u8(*(uint8x8_t *)v587.i8);
          v595 = vmovl_high_u16(v594);
          v590.i64[0] = v595.u32[2];
          v590.i64[1] = v595.u32[3];
          v596 = v590;
          v590.i64[0] = v589.u32[2];
          v590.i64[1] = v589.u32[3];
          v597 = v590;
          v590.i64[0] = v592.u32[0];
          v590.i64[1] = v592.u32[1];
          v598 = v590;
          v590.i64[0] = v595.u32[0];
          v590.i64[1] = v595.u32[1];
          v599 = v590;
          v600 = vmovl_u16(*(uint16x4_t *)v594.i8);
          v590.i64[0] = v600.u32[2];
          v590.i64[1] = v600.u32[3];
          v601 = v590;
          v590.i64[0] = v600.u32[0];
          v590.i64[1] = v600.u32[1];
          v602 = v590;
          v590.i64[0] = v572.u32[0];
          v590.i64[1] = v572.u32[1];
          v603 = (int8x16_t)vshlq_u64(v602, v590);
          v590.i64[0] = v572.u32[2];
          v590.i64[1] = v572.u32[3];
          v604 = (int8x16_t)vshlq_u64(v601, v590);
          v590.i64[0] = v571.u32[0];
          v590.i64[1] = v571.u32[1];
          v605 = (int8x16_t)vshlq_u64(v599, v590);
          v590.i64[0] = v570.u32[0];
          v590.i64[1] = v570.u32[1];
          v606 = (int8x16_t)vshlq_u64(v598, v590);
          v590.i64[0] = v569.u32[2];
          v590.i64[1] = v569.u32[3];
          v607 = (int8x16_t)vshlq_u64(v597, v590);
          v590.i64[0] = v571.u32[2];
          v590.i64[1] = v571.u32[3];
          v608 = (int8x16_t)vshlq_u64(v596, v590);
          v590.i64[0] = v570.u32[2];
          v590.i64[1] = v570.u32[3];
          v609 = (int8x16_t)vshlq_u64(v593, v590);
          v590.i64[0] = v569.u32[0];
          v590.i64[1] = v569.u32[1];
          v582 = vorrq_s8((int8x16_t)vshlq_u64(v591, v590), v582);
          v581 = vorrq_s8(v609, v581);
          v577 = vorrq_s8(v608, v577);
          v583 = vorrq_s8(v607, v583);
          v578 = vorrq_s8(v606, v578);
          v576 = vorrq_s8(v605, v576);
          v568 = vorrq_s8(v604, v568);
          v565 = vorrq_s8(v603, v565);
          v566 = vaddq_s32(v566, v573);
          v584 = vaddq_s32(v584, v573);
          v585 = vaddq_s32(v585, v573);
          v586 = vaddq_s32(v586, v573);
          v572 = vaddq_s32(v572, v574);
          v571 = vaddq_s32(v571, v574);
          v570 = vaddq_s32(v570, v574);
          v569 = vaddq_s32(v569, v574);
          v579 -= 16;
        }
        while (v579);
        v545 = vaddvq_s32(vaddq_s32(vaddq_s32(v566, v585), vaddq_s32(v584, v586)));
        v610 = vorrq_s8(vorrq_s8(vorrq_s8(v565, v578), vorrq_s8(v576, v582)), vorrq_s8(vorrq_s8(v568, v581), vorrq_s8(v577, v583)));
        v543 = (unint64_t)vorr_s8(*(int8x8_t *)v610.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v610, v610, 8uLL));
        if ((v575 & 0x3FFFFFF0) != v575)
        {
LABEL_767:
          do
          {
            v545 += 8;
            v611 = *(unsigned __int8 *)v557;
            v557 = (unint64_t *)((char *)v557 + 1);
            v543 |= (unint64_t)v611 << v564;
            v564 -= 8;
          }
          while (v564 >= v560);
        }
      }
    }
    else
    {
      v556 = (v555 & 0xFFFFFFF8) + 8;
      v545 += v556;
      v557 = (unint64_t *)((char *)v549 + (v556 >> 3));
      v543 = (bswap64(*v549) >> (56 - (v555 & 0xF8u)) << (v555 & 7)) | *(_QWORD *)v3;
      v475 = v1692;
    }
    *(_QWORD *)(v3 + 24) += (char *)v557 - (char *)v549;
    v546 = v540 | v477;
    v547 = v543 - (v544 << 56);
    if (v543 < v544 << 56)
      goto LABEL_234;
LABEL_261:
    LODWORD(v544) = *(_DWORD *)(v3 + 8) - v544;
    v548 = 1;
    v543 = v547;
    goto LABEL_262;
  }
  v546 = v540 | v477;
  v547 = v543 - (v544 << 56);
  if (v543 >= v544 << 56)
    goto LABEL_261;
LABEL_234:
  v548 = 0;
LABEL_262:
  v612 = vpx_norm[v544];
  *(_QWORD *)v3 = v543 << v612;
  *(_DWORD *)(v3 + 8) = (_DWORD)v544 << v612;
  *(_DWORD *)(v3 + 12) = v545 - v612;
  v613 = v546 | v548;
LABEL_729:
  v1677 = *v475;
  v1678 = inv_remap_prob_inv_map_table[v613];
  v1679 = (v1677 ^ 0xFF) + (v1678 >> 1);
  if ((v1678 & 1) != 0)
    v1679 = (v1677 ^ 0xFF) - ((v1678 + 1) >> 1);
  if (v1678 <= 2 * (v1677 ^ 0xFF))
    v1680 = v1679;
  else
    v1680 = v1678;
  v1681 = -1 - v1680;
  v1682 = v1677 - 1 - ((v1678 + 1) >> 1);
  if ((v1678 & 1) == 0)
    v1682 = v1677 - 1 + (v1678 >> 1);
  if ((int)v1678 <= (int)(2 * (v1677 - 1)))
    LOBYTE(v1678) = v1682;
  if (v1677 <= 0x80)
    v1683 = v1678 + 1;
  else
    v1683 = v1681;
  *v475 = v1683;
  return result;
}

uint64_t decoder_init(_QWORD *a1)
{
  uint64_t result;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;

  if (a1[6])
    return 0;
  v3 = malloc_type_malloc(0x217uLL, 0x74AD08B5uLL);
  if (!v3)
    return 2;
  v4 = ((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 - 8) = v3;
  if (!v4)
    return 2;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1E0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1F0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1C0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1D0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1A0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1B0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x180) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x190) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x160) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x170) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x140) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x150) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x120) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x130) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x100) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x110) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xE0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xF0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xC0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xD0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xA0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xB0) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x80) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x90) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x60) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x70) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x40) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x50) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x20) = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x30) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0u;
  a1[6] = v4;
  *(_QWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 8) = a1[4];
  *(_DWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0xE4) = 16;
  *(_DWORD *)((((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x1B4) = 0;
  v5 = a1[5];
  if (!v5)
    return 0;
  result = 0;
  v6 = *(_DWORD *)(v5 + 8);
  *(_QWORD *)(v4 + 216) = *(_QWORD *)v5;
  v7 = v4 + 216;
  *(_DWORD *)(v7 + 8) = v6;
  a1[5] = v7;
  return result;
}

uint64_t decoder_destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 248);
  if (v2)
    vp9_decoder_remove(v2);
  v3 = *(_QWORD *)(a1 + 464);
  if (!v3)
    goto LABEL_13;
  vp9_free_ref_frame_buffers(v3);
  v4 = *(_QWORD *)(a1 + 464);
  v5 = *(_DWORD *)(v4 + 2712);
  v6 = *(_QWORD *)(v4 + 2720);
  if (v5 >= 1)
  {
    v7 = 0;
    for (i = 0; i < v5; ++i)
    {
      v9 = *(_QWORD *)(v6 + v7);
      if (v9)
      {
        free(*(void **)(v9 - 8));
        v6 = *(_QWORD *)(v4 + 2720);
        v5 = *(_DWORD *)(v4 + 2712);
      }
      *(_QWORD *)(v6 + v7) = 0;
      v7 += 24;
    }
LABEL_10:
    free(*(void **)(v6 - 8));
    v10 = *(_QWORD *)(a1 + 464);
    *(_QWORD *)(v4 + 2720) = 0;
    *(_DWORD *)(v4 + 2712) = 0;
    v4 = v10;
    if (!v10)
      goto LABEL_12;
    goto LABEL_11;
  }
  if (v6)
    goto LABEL_10;
  *(_QWORD *)(v4 + 2720) = 0;
  *(_DWORD *)(v4 + 2712) = 0;
LABEL_11:
  free(*(void **)(v4 - 8));
LABEL_12:
  if (a1)
LABEL_13:
    free(*(void **)(a1 - 8));
  return 0;
}

uint64_t decoder_peek_si(unsigned __int8 *a1, int a2, _DWORD *a3)
{
  return decoder_peek_si_internal(a1, a2, a3, 0, 0, 0);
}

uint64_t decoder_get_si(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(a1 + 228);
  *(_DWORD *)a2 = 16;
  return 0;
}

uint64_t decoder_decode(uint64_t a1, unsigned __int8 *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v7;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, unsigned __int8 *, unsigned __int8 **, uint64_t);
  unint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  int *v26;
  int *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned int v36;
  uint64_t v37;
  const char *v38;
  unsigned __int8 *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  void (*v44)(uint64_t, unsigned __int8 *, unsigned __int8 **, uint64_t);
  uint64_t v45;
  uint64_t v46;
  int v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned int v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned int v62;
  uint64_t v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68[5];

  v7 = a2;
  v68[4] = *(unsigned __int8 **)MEMORY[0x24BDAC8D0];
  v67 = a2;
  if (!a2 && !a3)
  {
    result = 0;
    *(_DWORD *)(a1 + 436) = 1;
    return result;
  }
  *(_DWORD *)(a1 + 436) = 0;
  if (*(_QWORD *)(a1 + 248))
  {
    v10 = a3;
    v12 = *(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 **, uint64_t))(a1 + 280);
    v11 = *(_QWORD *)(a1 + 288);
    v13 = (unint64_t)&a2[a3];
    v14 = (unsigned __int8 *)(v13 - 1);
    if (v12)
      goto LABEL_7;
    goto LABEL_56;
  }
  *(_DWORD *)(a1 + 444) = -1;
  *(_DWORD *)(a1 + 456) = 1;
  v24 = malloc_type_malloc(0xABFuLL, 0x74AD08B5uLL);
  if (!v24 || (v25 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v25 - 8) = v24, !v25))
  {
    *(_QWORD *)(a1 + 464) = 0;
    return 2;
  }
  bzero((void *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF0), 0xAA8uLL);
  *(_QWORD *)(a1 + 464) = v25;
  v26 = vp9_decoder_create(v25);
  *(_QWORD *)(a1 + 248) = v26;
  if (!v26)
  {
    v37 = *(_QWORD *)(a1 + 464);
    if (v37)
      free(*(void **)(v37 - 8));
    *(_QWORD *)(a1 + 464) = 0;
    *(_QWORD *)a1 = "Failed to allocate decoder";
    return 2;
  }
  v27 = v26;
  v26[5170] = *(_DWORD *)(a1 + 216);
  v26[5171] = *(_DWORD *)(a1 + 440);
  v28 = *(_DWORD *)(a1 + 504);
  if (v28 >= 2)
  {
    v38 = "row_mt out of range [0..1]";
LABEL_50:
    *(_QWORD *)a1 = v38;
    return 8;
  }
  v26[5174] = v28;
  v29 = *(_DWORD *)(a1 + 508);
  if (v29 >= 2)
  {
    v38 = "lpf_opt out of range [0..1]";
    goto LABEL_50;
  }
  v26[5175] = v29;
  if (!*(_DWORD *)(a1 + 264) && (*(_BYTE *)(a1 + 10) & 1) != 0)
  {
    *(_DWORD *)(a1 + 268) = 3;
    *(_QWORD *)(a1 + 272) = 4;
  }
  v30 = (_QWORD *)*((_QWORD *)v26 + 2363);
  v26[400] = -1;
  *((_QWORD *)v26 + 2362) = *(_QWORD *)(a1 + 448);
  v31 = *(_QWORD *)(a1 + 480);
  if (v31 && (v32 = *(_QWORD *)(a1 + 488)) != 0)
  {
    v30[1] = v31;
    v30[2] = v32;
    v33 = *(_QWORD **)(a1 + 472);
  }
  else
  {
    v30[1] = vp9_get_frame_buffer;
    v30[2] = vp9_release_frame_buffer;
    v33 = v30 + 339;
    if (vp9_alloc_internal_frame_buffers((uint64_t)(v30 + 339)))
    {
      vpx_internal_error((uint64_t)(v27 + 164), 2, "Failed to initialize internal frame buffers");
      v41 = *(_QWORD *)(a1 + 464);
      if (v41)
        free(*(void **)(v41 - 8));
      *(_QWORD *)(a1 + 464) = 0;
      vp9_decoder_remove(*(_QWORD *)(a1 + 248));
      *(_QWORD *)(a1 + 248) = 0;
      return 2;
    }
  }
  *v30 = v33;
  v10 = a3;
  v12 = *(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 **, uint64_t))(a1 + 280);
  v11 = *(_QWORD *)(a1 + 288);
  v13 = (unint64_t)&v7[a3];
  v14 = (unsigned __int8 *)(v13 - 1);
  if (v12)
  {
LABEL_7:
    LOBYTE(v68[0]) = 0;
    v12(v11, v14, v68, 1);
    LODWORD(v15) = LOBYTE(v68[0]);
    if (((uint64_t)v68[0] & 0xE0) == 0xC0)
      goto LABEL_8;
LABEL_57:
    v17 = 0;
    goto LABEL_58;
  }
LABEL_56:
  LODWORD(v15) = *v14;
  if ((v15 & 0xE0) != 0xC0)
    goto LABEL_57;
LABEL_8:
  v4 = v10;
  v66 = a4;
  v16 = v15 & 7;
  v17 = v16 + 1;
  v18 = (v15 >> 3) & 3;
  v19 = v18 + 1;
  v20 = v19 * (v16 + 1);
  v21 = (v20 + 2);
  if (v21 > a3)
    return 7;
  v22 = (unsigned __int8 *)(v13 - v21);
  if (v12)
  {
    v62 = v15 & 7;
    v63 = v18 + 1;
    v64 = (v15 >> 3) & 3;
    v65 = v62 + 1;
    LOBYTE(v68[0]) = 0;
    v12(v11, v22, v68, 1);
    if ((_DWORD)v15 == LOBYTE(v68[0]))
    {
      v23 = v4 - v21;
      v10 = v4;
      v15 = (unsigned __int8 *)v68;
      v12(v11, &v7[v23 + 1], v68, v20);
      v18 = v64;
      v17 = v62 + 1;
      v19 = v63;
      v16 = v62;
      goto LABEL_26;
    }
    return 7;
  }
  if ((_DWORD)v15 != *v22)
    return 7;
  v34 = v4 - v21;
  v10 = v4;
  v15 = &v7[v34 + 1];
LABEL_26:
  LODWORD(v11) = *v15;
  if (v18)
  {
    LODWORD(v11) = v11 | (v15[1] << 8);
    if (v18 != 1)
    {
      LODWORD(v11) = v11 | (v15[2] << 16);
      if (v18 != 2)
        LODWORD(v11) = v11 | (v15[3] << 24);
    }
  }
  if (v16)
  {
    v35 = &v15[v19];
    v36 = v15[v19];
    if (v18)
    {
      v36 |= v35[1] << 8;
      if (v18 != 1)
      {
        v36 |= v35[2] << 16;
        if (v18 != 2)
          v36 |= v35[3] << 24;
      }
    }
    a4 = v66;
    v65 = v36;
    if (v17 != 2)
    {
      v39 = &v35[v19];
      v40 = *v39;
      if (v18)
      {
        v40 |= v39[1] << 8;
        if (v18 != 1)
        {
          v40 |= v39[2] << 16;
          if (v18 != 2)
            v40 |= v39[3] << 24;
        }
      }
      v64 = v40;
      if (v17 != 3)
      {
        v55 = &v39[v19];
        v56 = *v55;
        if (v18)
        {
          v56 |= v55[1] << 8;
          if (v18 != 1)
          {
            v56 |= v55[2] << 16;
            if (v18 != 2)
              v56 |= v55[3] << 24;
          }
        }
        LODWORD(v63) = v56;
        if (v17 != 4)
        {
          v57 = &v55[v19];
          LODWORD(v15) = *v57;
          if (v18)
          {
            LODWORD(v15) = v15 | (v57[1] << 8);
            if (v18 != 1)
            {
              LODWORD(v15) = v15 | (v57[2] << 16);
              if (v18 != 2)
                LODWORD(v15) = v15 | (v57[3] << 24);
            }
          }
          if (v17 != 5)
          {
            v58 = &v57[v19];
            v59 = *v58;
            if (v18)
            {
              v59 |= v58[1] << 8;
              if (v18 != 1)
              {
                v59 |= v58[2] << 16;
                if (v18 != 2)
                  v59 |= v58[3] << 24;
              }
            }
            v62 = v59;
            if (v17 != 6)
            {
              v60 = &v58[v19];
              LODWORD(v4) = *v60;
              if (v18)
              {
                LODWORD(v4) = v4 | (v60[1] << 8);
                if (v18 != 1)
                {
                  LODWORD(v4) = v4 | (v60[2] << 16);
                  if (v18 != 2)
                    LODWORD(v4) = v4 | (v60[3] << 24);
                }
              }
              if (v17 != 7)
              {
                v61 = &v60[v19];
                LODWORD(v12) = *v61;
                if (v18)
                {
                  LODWORD(v12) = v12 | (v61[1] << 8);
                  if (v18 != 1)
                  {
                    LODWORD(v12) = v12 | (v61[2] << 16);
                    if (v18 != 2)
                      LODWORD(v12) = v12 | (v61[3] << 24);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    a4 = v66;
  }
LABEL_58:
  if (*(_DWORD *)(a1 + 496))
  {
    v42 = *(_DWORD *)(a1 + 500);
    if (v42 < v17 - 1)
      v17 = v42 + 1;
  }
  if (v17 < 1)
  {
    if (!a3)
      return 0;
    v43 = &v7[v10];
    do
    {
      result = decode_one(a1, &v67, (int)v13 - (int)v7, a4);
      if ((_DWORD)result)
        break;
      v7 = v67;
      if ((unint64_t)v67 < v13)
      {
        v44 = *(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 **, uint64_t))(a1 + 280);
        if (v44)
        {
LABEL_70:
          v45 = *(_QWORD *)(a1 + 288);
          LOBYTE(v68[0]) = 0;
          v44(v45, v7, v68, 1);
          v7 = v67;
          if (!LOBYTE(v68[0]))
          {
            do
            {
              v67 = ++v7;
              if ((unint64_t)v7 >= v13)
                break;
              v44 = *(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 **, uint64_t))(a1 + 280);
              if (v44)
                goto LABEL_70;
            }
            while (!*v7);
          }
        }
        else
        {
          v46 = v43 - v67;
          while (!*v7)
          {
            v67 = ++v7;
            if (!--v46)
            {
              v7 = v43;
              break;
            }
          }
        }
      }
      result = 0;
    }
    while ((unint64_t)v7 < v13);
  }
  else
  {
    v68[0] = v7;
    if (v11 > a3)
      goto LABEL_63;
    v47 = v17;
    result = decode_one(a1, v68, v11, a4);
    if (!(_DWORD)result)
    {
      if (v47 == 1)
        return 0;
      v48 = &v7[v11];
      v68[0] = v48;
      if (v65 > (int)v13 - (int)v48)
        goto LABEL_63;
      result = decode_one(a1, v68, v65, a4);
      if (!(_DWORD)result)
      {
        if (v47 == 2)
          return 0;
        v49 = &v48[v65];
        v68[0] = v49;
        if (v49 < v7 || v64 > (int)v13 - (int)v49)
          goto LABEL_63;
        result = decode_one(a1, v68, v64, a4);
        if (!(_DWORD)result)
        {
          if (v47 == 3)
            return 0;
          v50 = &v49[v64];
          v68[0] = v50;
          if (v50 < v7 || v63 > (int)v13 - (int)v50)
            goto LABEL_63;
          result = decode_one(a1, v68, v63, a4);
          if (!(_DWORD)result)
          {
            if (v47 == 4)
              return 0;
            v51 = &v50[v63];
            v68[0] = v51;
            if (v51 < v7 || v15 > (int)v13 - (int)v51)
              goto LABEL_63;
            result = decode_one(a1, v68, v15, a4);
            if (!(_DWORD)result)
            {
              if (v47 == 5)
                return 0;
              v52 = &v51[v15];
              v68[0] = v52;
              if (v52 < v7 || v62 > (int)v13 - (int)v52)
                goto LABEL_63;
              result = decode_one(a1, v68, v62, a4);
              if (!(_DWORD)result)
              {
                if (v47 == 6)
                  return 0;
                v53 = &v52[v62];
                v68[0] = v53;
                if (v53 < v7 || v4 > (int)v13 - (int)v53)
                  goto LABEL_63;
                result = decode_one(a1, v68, v4, a4);
                if (!(_DWORD)result)
                {
                  if (v47 != 7)
                  {
                    v54 = &v53[v4];
                    v68[0] = v54;
                    if (v54 >= v7 && v12 <= (int)v13 - (int)v54)
                      return decode_one(a1, v68, v12, a4);
LABEL_63:
                    *(_QWORD *)a1 = "Invalid frame size in index";
                    return 7;
                  }
                  return 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t decoder_get_frame(uint64_t a1)
{
  uint64_t v1;
  __int128 *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v1 = *(_QWORD *)(a1 + 248);
  if (!v1)
    return 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v15 = 0;
  v14 = 0;
  if ((*(_BYTE *)(a1 + 10) & 1) != 0)
  {
    v14 = *(_QWORD *)(a1 + 268);
    v15 = *(_DWORD *)(a1 + 276);
  }
  if (*(_DWORD *)(v1 + 18944) == 1)
    return 0;
  *(_DWORD *)(v1 + 18944) = 1;
  if (!*(_DWORD *)(v1 + 1936))
    return 0;
  if (!*(_DWORD *)(v1 + 1944))
  {
    if (!vp9_post_proc_frame(v1 + 656, &v16, (int *)&v14, *(_DWORD *)(v1 + 948)))
    {
      v1 = *(_QWORD *)(a1 + 248);
      v11 = *(_QWORD *)(v1 + 18904);
      *(_DWORD *)(a1 + 444) = *(_DWORD *)(v1 + 1600);
      if (!*(_DWORD *)(a1 + 456))
        goto LABEL_8;
    }
    return 0;
  }
  v3 = *(__int128 **)(v1 + 984);
  v4 = v3[1];
  v16 = *v3;
  v17 = v4;
  v5 = v3[5];
  v7 = v3[2];
  v6 = v3[3];
  v20 = v3[4];
  v21 = v5;
  v18 = v7;
  v19 = v6;
  v8 = v3[9];
  v10 = v3[6];
  v9 = v3[7];
  v24 = v3[8];
  v25 = v8;
  v22 = v10;
  v23 = v9;
  v11 = *(_QWORD *)(v1 + 18904);
  *(_DWORD *)(a1 + 444) = *(_DWORD *)(v1 + 1600);
  if (*(_DWORD *)(a1 + 456))
    return 0;
LABEL_8:
  v12 = a1 + 296;
  yuvconfig2image(a1 + 296, (uint64_t)&v16, *(_QWORD *)(a1 + 256));
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(v11 + 224 * *(int *)(v1 + 1600) + 80);
  return v12;
}

uint64_t decoder_set_fb_fn(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 8;
  if (a2 && a3)
  {
    if (a1[31])
    {
      return 1;
    }
    else
    {
      result = 0;
      a1[60] = a2;
      a1[61] = a3;
      a1[59] = a4;
    }
  }
  return result;
}

uint64_t ctrl_copy_reference_0(uint64_t a1, int **a2)
{
  int *v2;
  _OWORD v5[10];
  int **v6;

  v6 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  memset(v5, 0, sizeof(v5));
  image2yuvconfig(v2 + 2, (uint64_t)v5);
  return vp9_copy_reference_dec(*(_QWORD *)(a1 + 248), *v2, v5);
}

uint64_t ctrl_set_reference_0(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  int v4;
  int v5;
  _OWORD v7[10];
  _DWORD **v8;

  v8 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  memset(v7, 0, sizeof(v7));
  image2yuvconfig(v2 + 2, (uint64_t)v7);
  if (*v2 == 2)
    v4 = 2;
  else
    v4 = 1;
  if (*v2 == 4)
    v5 = 4;
  else
    v5 = v4;
  return vp9_set_reference_dec((int *)(*(_QWORD *)(a1 + 248) + 656), v5, (int *)v7);
}

uint64_t ctrl_set_postproc(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  if (!*a2)
    return 8;
  result = 0;
  *(_DWORD *)(a1 + 264) = 1;
  v5 = *v2;
  *(_DWORD *)(a1 + 276) = *((_DWORD *)v2 + 2);
  *(_QWORD *)(a1 + 268) = v5;
  return result;
}

uint64_t ctrl_set_invert_tile_order(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 440) = *a2;
  return 0;
}

uint64_t ctrl_set_decryptor(uint64_t a1, _OWORD **a2)
{
  if (*a2)
    *(_OWORD *)(a1 + 280) = **a2;
  else
    *(_OWORD *)(a1 + 280) = 0u;
  return 0;
}

uint64_t ctrl_set_byte_alignment(uint64_t a1, __int32 *a2, int8x8_t a3)
{
  __int32 v3;
  uint8x8_t v4;
  uint64_t result;
  uint64_t v7;

  v3 = *a2;
  if (*a2)
  {
    a3.i32[0] = *a2;
    v4 = (uint8x8_t)vcnt_s8(a3);
    v4.i16[0] = vaddlv_u8(v4);
    if ((v3 - 32) > 0x3E0 || v4.i32[0] > 1u)
      return 8;
  }
  *(_DWORD *)(a1 + 448) = v3;
  v7 = *(_QWORD *)(a1 + 248);
  result = 0;
  if (v7)
    *(_DWORD *)(v7 + 18896) = v3;
  return result;
}

uint64_t ctrl_set_skip_loop_filter(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  *(_DWORD *)(a1 + 452) = *a2;
  v3 = *(_QWORD *)(a1 + 248);
  if (v3)
    *(_DWORD *)(v3 + 18900) = v2;
  return 0;
}

uint64_t ctrl_set_spatial_layer_svc(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  *(_DWORD *)(a1 + 496) = 1;
  v2 = *a2;
  *(_DWORD *)(a1 + 500) = *a2;
  return (v2 >> 28) & 8;
}

uint64_t ctrl_set_row_mt_0(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 504) = *a2;
  return 0;
}

uint64_t ctrl_enable_lpf_opt(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 508) = *a2;
  return 0;
}

uint64_t ctrl_get_quantizer_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 248);
  if (!v2)
    return 8;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(v2 + 1988);
  return result;
}

uint64_t ctrl_get_last_ref_updates(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 248);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(v2 + 18948);
  return result;
}

uint64_t ctrl_get_frame_corrupted(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 248);
  if (!v2 || !*(_QWORD *)(v2 + 984))
    return 1;
  v3 = *(_DWORD *)(a1 + 444);
  result = 0;
  if ((v3 & 0x80000000) == 0)
    *(_DWORD *)*a2 = *(_DWORD *)(*(_QWORD *)(v2 + 18904) + 24 + 224 * v3 + 212);
  return result;
}

uint64_t ctrl_get_reference_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int v3;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 248);
  if (!v2)
    return 1;
  v3 = *(_DWORD *)(v2 + 1604);
  if (v3 > 0xB || *(_DWORD *)(v2 + 656))
    return 1;
  yuvconfig2image(*a2 + 8, *(_QWORD *)(v2 + 18904) + 224 * v3 + 88, 0);
  return 0;
}

uint64_t ctrl_get_render_size(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 248);
  if (!v3)
    return 1;
  result = 0;
  *v2 = *(_DWORD *)(v3 + 956);
  v2[1] = *(_DWORD *)(v3 + 960);
  return result;
}

uint64_t ctrl_get_bit_depth(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 248);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(v2 + 18816);
  return result;
}

uint64_t ctrl_get_frame_size(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 248);
  if (!v3)
    return 1;
  result = 0;
  *v2 = *(_DWORD *)(v3 + 948);
  v2[1] = *(_DWORD *)(v3 + 952);
  return result;
}

uint64_t decoder_peek_si_internal(unsigned __int8 *a1, int a2, _DWORD *a3, int *a4, void (*a5)(uint64_t, unsigned __int8 *, _BYTE *, uint64_t), uint64_t a6)
{
  uint64_t v6;
  unsigned __int8 *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t result;
  unsigned int v18;
  _BOOL4 v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  unsigned int v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  int v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  _BYTE v49[11];
  uint64_t v50;

  LODWORD(v6) = a2;
  v50 = *MEMORY[0x24BDAC8D0];
  if (!a2)
    return 8;
  v9 = a1;
  a3[2] = 0;
  a3[3] = 0;
  v10 = a3 + 2;
  a3[1] = 0;
  v11 = a3 + 1;
  if (a5)
  {
    if (v6 >= 0xB)
      v6 = 11;
    else
      v6 = v6;
    a5(a6, a1, v49, v6);
    v9 = v49;
  }
  v12 = v6;
  v44 = v9;
  v45 = &v9[v6];
  v47 = 0;
  v48 = 0;
  v13 = *v9;
  v14 = 4;
  v46 = 4;
  v15 = (v13 >> 3) & 2 | (v13 >> 5) & 1;
  if (v15 == 3)
  {
    v16 = (*v9 >> 3) & 1;
    v14 = 5;
    v46 = 5;
    v15 = v16 + 3;
  }
  result = 5;
  if ((v13 & 0xC0) == 0x80 && v15 <= 3)
  {
    v18 = *v9;
    v46 = v14 + 1;
    if (((v18 >> (v14 ^ 7)) & 1) != 0)
    {
      if (v15 <= 2 || v12 >= 2)
        return 0;
      else
        return 5;
    }
    if (v12 < 0xA)
      return result;
    v20 = ((*v9 >> ((v14 + 1) ^ 7)) & 1) == 0;
    a3[3] = v20;
    v21 = *v9;
    v22 = v14 + 3;
    v46 = v14 + 3;
    v23 = (unint64_t)(v14 + 3) >> 3;
    if (v23 >= v12)
    {
      v24 = 0;
      if (v20)
      {
LABEL_23:
        if (vp9_read_sync_code((uint64_t *)&v44))
        {
          v25 = v46;
          if (v15 >= 2)
            v25 = ++v46;
          v26 = (uint64_t)v44;
          v27 = (unint64_t)v45;
          v28 = &v44[v25 >> 3];
          if (v28 >= v45)
          {
            if (v48)
            {
              v48(v47);
              v30 = 0;
              v27 = (unint64_t)v45;
              v25 = v46;
              v26 = (uint64_t)v44;
            }
            else
            {
              v30 = 0;
            }
          }
          else
          {
            v29 = *v28 >> (~(_BYTE)v25++ & 7);
            v46 = v25;
            v30 = 4 * (v29 & 1);
          }
          v37 = (unsigned __int8 *)(v26 + (v25 >> 3));
          if ((unint64_t)v37 >= v27)
          {
            v39 = (int)v48;
            if (v48)
            {
              v48(v47);
              v39 = 0;
              v27 = (unint64_t)v45;
              v25 = v46;
              v26 = (uint64_t)v44;
            }
          }
          else
          {
            v38 = *v37 >> (~(_BYTE)v25++ & 7);
            v46 = v25;
            v39 = 2 * (v38 & 1);
          }
          v40 = v39 | v30;
          v41 = (unsigned __int8 *)(v26 + (v25 >> 3));
          if ((unint64_t)v41 >= v27)
          {
            if (v48)
              v48(v47);
            v42 = 0;
          }
          else
          {
            v42 = (*v41 >> (~(_BYTE)v25 & 7)) & 1;
            v46 = v25 + 1;
          }
          if ((v42 | v40) != 7)
          {
            v43 = v46++;
            if ((v15 & 0xFFFFFFFD) != 1)
            {
              v36 = 0;
              goto LABEL_61;
            }
            v36 = 0;
            v35 = v43 + 4;
LABEL_59:
            v46 = v35;
LABEL_61:
            vp9_read_frame_size((uint64_t)&v44, v11, v10);
LABEL_62:
            result = 0;
            if (a4)
              *a4 = v36;
            return result;
          }
          if ((v15 & 0xFFFFFFFD) == 1)
          {
            v36 = 0;
            v35 = v46 + 1;
            goto LABEL_59;
          }
        }
        return 5;
      }
    }
    else
    {
      v24 = (v9[v23] >> (~(_BYTE)v22 & 7)) & 1;
      v22 = v14 + 4;
      v46 = v14 + 4;
      if (v20)
        goto LABEL_23;
    }
    if (((v21 >> ((v14 | 2) ^ 7)) & 1) != 0
      || v22 >> 3 >= v12
      || ((v31 = v9[v22 >> 3], v32 = ~(_BYTE)v22 & 7, v24) ? (v33 = v22 + 1) : (v33 = v22 + 3),
          v46 = v33,
          ((v31 >> v32) & 1) == 0))
    {
      v36 = 0;
      goto LABEL_62;
    }
    if (vp9_read_sync_code((uint64_t *)&v44))
    {
      if (v15)
      {
        v34 = parse_bitdepth_colorspace_sampling(v15, (uint64_t *)&v44);
        result = 5;
        if (v12 < 0xB || !v34)
          return result;
      }
      v35 = v46 + 8;
      v36 = 1;
      goto LABEL_59;
    }
    return 5;
  }
  return result;
}

uint64_t parse_bitdepth_colorspace_sampling(unsigned int a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  void (*v10)(uint64_t);
  void (*v11)(uint64_t);
  int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  int v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v19;

  v4 = a2[2];
  if (a1 < 2)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = (unsigned __int8 *)(*a2 + (v4 >> 3));
    if ((unint64_t)v7 < v6)
      goto LABEL_3;
LABEL_6:
    v11 = (void (*)(uint64_t))a2[4];
    if (v11)
    {
      v11(a2[3]);
      v9 = 0;
      v6 = a2[1];
      v4 = a2[2];
      v5 = *a2;
      v10 = (void (*)(uint64_t))(*a2 + (v4 >> 3));
      if ((unint64_t)v10 >= v6)
        goto LABEL_10;
    }
    else
    {
      v9 = 0;
      v10 = (void (*)(uint64_t))(v5 + (v4 >> 3));
      if ((unint64_t)v10 >= v6)
        goto LABEL_10;
    }
LABEL_8:
    v12 = *(unsigned __int8 *)v10 >> (~(_BYTE)v4++ & 7);
    a2[2] = v4;
    LODWORD(v10) = 2 * (v12 & 1);
    goto LABEL_12;
  }
  a2[2] = ++v4;
  v5 = *a2;
  v6 = a2[1];
  v7 = (unsigned __int8 *)(*a2 + (v4 >> 3));
  if ((unint64_t)v7 >= v6)
    goto LABEL_6;
LABEL_3:
  v8 = *v7 >> (~(_BYTE)v4++ & 7);
  a2[2] = v4;
  v9 = 4 * (v8 & 1);
  v10 = (void (*)(uint64_t))(v5 + (v4 >> 3));
  if ((unint64_t)v10 < v6)
    goto LABEL_8;
LABEL_10:
  v10 = (void (*)(uint64_t))a2[4];
  if (v10)
  {
    v10(a2[3]);
    LODWORD(v10) = 0;
    v6 = a2[1];
    v4 = a2[2];
    v5 = *a2;
  }
LABEL_12:
  v13 = v10 | v9;
  v14 = (unsigned __int8 *)(v5 + (v4 >> 3));
  if ((unint64_t)v14 >= v6)
  {
    v16 = (void (*)(uint64_t))a2[4];
    if (v16)
    {
      v16(a2[3]);
      if (v13 != 7)
        goto LABEL_21;
    }
    else if (v13 != 7)
    {
      goto LABEL_21;
    }
LABEL_17:
    if ((a1 & 0xFFFFFFFD) != 1)
      return 0;
    v17 = a2[2] + 1;
    goto LABEL_23;
  }
  v15 = (*v14 >> (~(_BYTE)v4 & 7)) & 1;
  a2[2] = v4 + 1;
  if ((v15 | v13) == 7)
    goto LABEL_17;
LABEL_21:
  v19 = a2[2];
  a2[2] = v19 + 1;
  if ((a1 & 0xFFFFFFFD) == 1)
  {
    v17 = v19 + 4;
LABEL_23:
    a2[2] = v17;
  }
  return 1;
}

uint64_t decode_one(uint64_t a1, unsigned __int8 **a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  int v15;

  if (!*(_DWORD *)(a1 + 236))
  {
    v15 = 0;
    result = decoder_peek_si_internal(*a2, a3, (_DWORD *)(a1 + 228), &v15, *(void (**)(uint64_t, unsigned __int8 *, _BYTE *, uint64_t))(a1 + 280), *(_QWORD *)(a1 + 288));
    if ((_DWORD)result)
      return result;
    if (!(*(_DWORD *)(a1 + 240) | v15))
      return 1;
  }
  *(_QWORD *)(a1 + 256) = a4;
  v8 = *(_QWORD *)(a1 + 248);
  v9 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(v8 + 20664) = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(v8 + 20672) = v9;
  v10 = vp9_receive_compressed_data(v8, a3, (uint64_t *)a2);
  v11 = *(_QWORD *)(a1 + 248);
  if (v10)
  {
    *(_DWORD *)(*(_QWORD *)(v11 + 18952) + 212) = 1;
    *(_DWORD *)(v11 + 20688) = 1;
    *(_DWORD *)(a1 + 456) = 1;
    result = *(unsigned int *)(v11 + 656);
    if ((_DWORD)result)
    {
      v13 = *(_DWORD *)(v11 + 660);
      v14 = v11 + 664;
      if (!v13)
        v14 = 0;
      *(_QWORD *)a1 = v14;
    }
  }
  else if (*(_DWORD *)(a1 + 456) != 1 || *(_DWORD *)(v11 + 20688) || !*(_BYTE *)(v11 + 1948) && *(_DWORD *)(v11 + 1932))
  {
    return 0;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 456) = 0;
  }
  return result;
}

int64x2_t *vp9_set_variance_partition_thresholds(int64x2_t *result, int a2, unsigned int a3)
{
  int64x2_t *v4;
  int64x2_t *v5;
  int *v6;
  _BOOL4 v7;
  __int8 *v8;
  int64x2_t *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  BOOL v16;

  v4 = result;
  v5 = result + 46191;
  v6 = &result[10749].i32[1];
  if (result[10810].i32[3])
  {
    v7 = result[10811].i8[12] != 0;
    if ((result[46230].i32[2] & 0xFFFFFFFE) != 2)
      return result;
LABEL_5:
    v8 = &result[52639].i8[8];
    v9 = result + 52197;
    result = (int64x2_t *)set_vbp_thresholds((uint64_t)result, result + 52636, a2, a3);
    if (v7)
    {
      *(int64x2_t *)((char *)&v4[52638] + 8) = 0u;
      *v8 = 3;
LABEL_23:
      v4[52638].i64[0] = (a2 >> 3) + 15;
      return result;
    }
    v10 = *v6;
    if (*v6 <= 352 && v6[1] <= 288)
    {
      v4[52638].i64[1] = 10;
      *v8 = 6;
      v11 = 4000;
LABEL_21:
      v4[52639].i64[0] = v11;
      if (v5->i32[0] || v5[528].i32[1] && v9->i32[0])
        *(int64x2_t *)((char *)&v4[52638] + 8) = 0u;
      goto LABEL_23;
    }
    v12 = v4[a2 + 10219].i16[1];
    v13 = (2 * v12);
    if (v12 <= 500)
      v13 = 1000;
    v4[52638].i64[1] = v13;
    *v8 = 6;
    if (v10 > 352)
    {
      if (v10 > 0x280)
        goto LABEL_19;
      v14 = v6[1];
    }
    else
    {
      v14 = v6[1];
      if (v14 < 289)
      {
        v11 = 4000;
        goto LABEL_21;
      }
    }
    if (v14 < 361)
    {
      v11 = 8000;
      goto LABEL_21;
    }
LABEL_19:
    v15 = (8 * v12);
    v16 = v12 <= 1000;
    v11 = 8000;
    if (!v16)
      v11 = v15;
    goto LABEL_21;
  }
  v7 = 1;
  if ((result[46230].i32[2] & 0xFFFFFFFE) == 2)
    goto LABEL_5;
  return result;
}

uint64_t set_vbp_thresholds(uint64_t result, int64x2_t *a2, int a3, unsigned int a4)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v4 = (int *)(result + 171988);
  v5 = result + 16 * a3;
  if (!*(_DWORD *)(result + 172972) || *(_BYTE *)(result + 172988))
  {
    v6 = 5 * *(__int16 *)(v5 + 163506);
    a2->i64[0] = 20 * *(__int16 *)(v5 + 163506);
    a2->i64[1] = v6;
    a2[1].i64[0] = v6;
    a2[1].i64[1] = 16 * v6;
    return result;
  }
  v7 = *(int *)(result + 740172) * (uint64_t)*(__int16 *)(v5 + 163506);
  if (*(_DWORD *)(result + 842128) && *v4 >= 640 && *(int *)(result + 171992) >= 480)
  {
    v9 = *(_DWORD *)(result + 842136);
    v8 = *(_DWORD *)(result + 842140);
    v10 = 3 * v7;
    v11 = 2 * v7;
    if (v9 <= v8 >> 1)
      v7 = (uint64_t)(7 * v7) >> 3;
    if (v9 > v8)
      v7 = v11;
    if (v9 > 2 * v8)
      v7 = v10;
  }
  if (*(int *)(result + 190048) >= 1
    && (!*(_DWORD *)(result + 747508) || *(_DWORD *)(result + 747512) >= *(_DWORD *)(result + 834888)))
  {
    v12 = *(_DWORD *)(result + 190056);
    if (v12 >= 6)
    {
      v13 = *(_DWORD *)(result + 842076);
      if (v13)
      {
        v14 = *(_DWORD *)(result + 747516);
        if (a4 == 5 || (a4 & 0xFFFFFFFD) == 1 || v13 == 3 || v14)
        {
          v15 = (uint64_t)(3 * v7) >> 1;
          v7 = (uint64_t)(7 * v7) >> 2;
          if (v14 < 2)
            v7 = v15;
          a2->i64[0] = v7;
          v16 = v7 << v12;
          a2[1].i64[0] = v7 << v12;
          v17 = *v4;
          if (*v4 < 1280)
            goto LABEL_48;
LABEL_38:
          v19 = *(_DWORD *)(result + 171992);
          if (v12 <= 6 && v19 >= 720)
            a2[1].i64[0] = 2 * v16;
          if (v17 > 0x77F)
            goto LABEL_56;
          goto LABEL_54;
        }
LABEL_29:
        v7 = (uint64_t)(5 * v7) >> 2;
        a2->i64[0] = v7;
        v16 = v7 << v12;
        a2[1].i64[0] = v7 << v12;
        v17 = *v4;
        if (*v4 < 1280)
          goto LABEL_48;
        goto LABEL_38;
      }
    }
  }
  v12 = *(_DWORD *)(result + 190056);
  if (v12 < 8)
  {
    v18 = (uint64_t)(5 * v7) >> 2;
    if (((1 << a4) & 0x2A) == 0)
      v18 = v7;
    if (a4 > 5)
      v18 = v7;
    if (v12 == 7)
    {
      v12 = 7;
      v7 = v18;
    }
    a2->i64[0] = v7;
    v16 = v7 << v12;
    a2[1].i64[0] = v7 << v12;
    v17 = *v4;
    if (*v4 >= 1280)
      goto LABEL_38;
  }
  else
  {
    if (*(int *)(result + 171992) <= 480 && *v4 <= 640)
      goto LABEL_29;
    v20 = (uint64_t)(5 * v7) >> 2;
    if (((1 << a4) & 0x2A) == 0)
      v20 = v7;
    if (a4 <= 5)
      v7 = v20;
    a2->i64[0] = v7;
    v16 = v7 << v12;
    a2[1].i64[0] = v7 << v12;
    v17 = *v4;
    if (*v4 >= 1280)
      goto LABEL_38;
  }
LABEL_48:
  v19 = *(_DWORD *)(result + 171992);
  if (v17 <= 352 && v19 <= 288)
  {
    *a2 = vshlq_s64(vdupq_n_s64(v7), (int64x2_t)xmmword_208F46BB0);
    a2[1].i64[0] = 8 * v7;
    v21 = *(_DWORD *)(result + 738620);
    if (v21 < 221)
    {
      if (v21 >= 201)
        a2[1].i64[0] = 16 * v7;
    }
    else
    {
      a2[1].i64[0] = 32 * v7;
    }
    goto LABEL_58;
  }
  if (v19 > 719)
  {
LABEL_54:
    if (v19 <= 1079)
    {
      v22 = 2 * v7;
      goto LABEL_57;
    }
LABEL_56:
    v22 = (uint64_t)(5 * v7) >> 1;
    goto LABEL_57;
  }
  v22 = (uint64_t)(5 * v7) >> 2;
LABEL_57:
  a2->i64[1] = v22;
LABEL_58:
  if (*(_DWORD *)(result + 740152))
    a2[1].i64[0] = 0x7FFFFFFFFFFFFFFFLL;
  return result;
}

void vp9_init_tile_data(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  size_t v5;
  void *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  __int32 v32;
  uint64_t v33;
  int32x2_t v34;
  uint64_t v35;
  const float *v36;
  int32x2_t v37;
  int32x2_t *v38;
  unsigned int v39;
  int32x2_t v40;
  int32x2_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int v60;
  int *__attribute__((__org_typedef(jmp_buf))) v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  int32x2_t v78;

  v1 = a1 + 189928;
  v52 = a1;
  v2 = *(_DWORD *)(a1 + 189932);
  v60 = *(_DWORD *)(a1 + 189928);
  v61 = (int *)(a1 + 171696);
  v53 = 1 << v2;
  v54 = 1 << v60;
  v3 = 1 << v60 << v2;
  v72 = a1 + 189928;
  v58 = (_QWORD *)(a1 + 194784);
  v64 = *(_QWORD *)(a1 + 194784);
  v66 = *(_QWORD *)(a1 + 196832);
  if (!*(_QWORD *)(a1 + 194488))
    goto LABEL_5;
  if (*(_DWORD *)(a1 + 194496) < v3)
  {
    vp9_row_mt_mem_dealloc(a1);
    v1 = v72;
    v4 = *(_QWORD *)(v72 + 4560);
    if (v4)
      free(*(void **)(v4 - 8));
LABEL_5:
    *(_DWORD *)(v1 + 4568) = 0;
    v5 = 3720 * v3 + 23;
    if (v5 <= 0x10000000000 && (v6 = malloc_type_malloc(v5, 0x74AD08B5uLL)) != 0)
    {
      v7 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v7 - 8) = v6;
      *(_QWORD *)(v1 + 4560) = v7;
      if (v7)
      {
        *(_DWORD *)(v1 + 4568) = v3;
        if (v2 == 31)
          return;
LABEL_12:
        if (v60 == 31)
          return;
        v8 = 0;
        if (v54 <= 1)
          v9 = 1;
        else
          v9 = v54;
        v68 = v9;
        v10 = 1 << v2;
        if (v53 <= 1)
          v10 = 1;
        v56 = v10;
        do
        {
          v11 = 0;
          v12 = 0;
          v62 = v8;
          v70 = v8 << v60;
          v13 = 3720 * v70;
          do
          {
            v76 = v12;
            v74 = *(_QWORD *)(v72 + 4560);
            v14 = v74 + v11;
            v15 = v74 + v11;
            v16 = 13;
            do
            {
              v17 = (_DWORD *)(v15 + v13);
              v17[4] = 32;
              v17[394] = 32;
              v18 = (_BYTE *)(v14 + v13);
              v18[3136] = 0;
              v17[5] = 32;
              v17[395] = 32;
              v18[3137] = 1;
              v17[6] = 32;
              v17[396] = 32;
              v18[3138] = 2;
              v17[7] = 32;
              v17[397] = 32;
              v18[3139] = 3;
              v17[8] = 32;
              v17[398] = 32;
              v18[3140] = 4;
              v17[9] = 32;
              v17[399] = 32;
              v18[3141] = 5;
              v17[10] = 32;
              v17[400] = 32;
              v18[3142] = 6;
              v17[11] = 32;
              v17[401] = 32;
              v18[3143] = 7;
              v17[12] = 32;
              v17[402] = 32;
              v18[3144] = 8;
              v17[13] = 32;
              v17[403] = 32;
              v18[3145] = 9;
              v17[14] = 32;
              v17[404] = 32;
              v18[3146] = 10;
              v17[15] = 32;
              v17[405] = 32;
              v18[3147] = 11;
              v17[16] = 32;
              v17[406] = 32;
              v18[3148] = 12;
              v17[17] = 32;
              v17[407] = 32;
              v18[3149] = 13;
              v17[18] = 32;
              v17[408] = 32;
              v18[3150] = 14;
              v17[19] = 32;
              v17[409] = 32;
              v18[3151] = 15;
              v17[20] = 32;
              v17[410] = 32;
              v18[3152] = 16;
              v17[21] = 32;
              v17[411] = 32;
              v18[3153] = 17;
              v17[22] = 32;
              v17[412] = 32;
              v18[3154] = 18;
              v17[23] = 32;
              v17[413] = 32;
              v18[3155] = 19;
              v17[24] = 32;
              v17[414] = 32;
              v18[3156] = 20;
              v17[25] = 32;
              v17[415] = 32;
              v18[3157] = 21;
              v17[26] = 32;
              v17[416] = 32;
              v18[3158] = 22;
              v17[27] = 32;
              v17[417] = 32;
              v18[3159] = 23;
              v17[28] = 32;
              v17[418] = 32;
              v18[3160] = 24;
              v17[29] = 32;
              v17[419] = 32;
              v18[3161] = 25;
              v17[30] = 32;
              v17[420] = 32;
              v18[3162] = 26;
              v17[31] = 32;
              v17[421] = 32;
              v18[3163] = 27;
              v17[32] = 32;
              v17[422] = 32;
              v18[3164] = 28;
              v17[33] = 32;
              v17[423] = 32;
              v18[3165] = 29;
              v15 += 120;
              v14 += 30;
              --v16;
            }
            while (v16);
            v19 = v74 + 3720 * (v12 + v70);
            *(_DWORD *)(v19 + 3716) = 0;
            *(_QWORD *)(v19 + 3704) = 0;
            ++v12;
            v11 += 3720;
          }
          while (v76 + 1 != v68);
          v8 = v62 + 1;
        }
        while (v62 + 1 != v56);
        goto LABEL_24;
      }
    }
    else
    {
      *(_QWORD *)(v1 + 4560) = 0;
    }
    vpx_internal_error((uint64_t)v61, 2, "Failed to allocate cpi->tile_data", v52);
    *(_DWORD *)(v1 + 4568) = v3;
    if (v2 == 31)
      return;
    goto LABEL_12;
  }
LABEL_24:
  v20 = v58;
  v21 = v2 == 31 || v60 == 31;
  v22 = v72;
  v24 = v64;
  v23 = v66;
  if (v21)
    return;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v77 = (_DWORD *)(v52 + 739600);
  v28 = (unsigned int *)(v52 + 173008);
  if (v54 <= 1)
    v29 = 1;
  else
    v29 = 1 << v60;
  if (v53 <= 1)
    v30 = 1;
  else
    v30 = v53;
  v55 = v30;
  v31 = *v28;
  v75 = 3720 * v29;
  v69 = (unsigned int *)(v52 + 173008);
  while (2)
  {
    v32 = 0;
    v33 = 0;
    v57 = v25;
    v59 = v20;
    v34.i32[0] = v25;
    v34.i32[1] = v25 + 1;
    v78 = v34;
    v35 = 3720 * (int)((_DWORD)v25 << v60);
    v71 = v35;
    do
    {
      v43 = *(_QWORD *)(v22 + 4560);
      v44 = v43 + v35;
      if (*v77)
      {
        v45 = (int)(v31 + 7) >> 3;
        v46 = v44 + v33;
        v47 = *(_QWORD *)(v44 + v33 + 3704);
        v67 = v23;
        if (!v47)
          goto LABEL_45;
        if (v45 > *(_DWORD *)(v43 + v35 + v33 + 3712))
        {
          v48 = v26;
          free(*(void **)(v47 - 8));
          v26 = v48;
          *(_QWORD *)(v46 + 3704) = 0;
LABEL_45:
          v73 = v26;
          v65 = v24;
          v49 = 390 * v45;
          if (((390 * v45) & 0x80000000) == 0
            && (v63 = 4 * (390 * v45), (v50 = malloc_type_malloc(v63 + 23, 0x74AD08B5uLL)) != 0)
            && (v51 = ((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v51 - 8) = v50, v51))
          {
            bzero((void *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0), v63);
            *(_QWORD *)(v46 + 3704) = v51;
            v22 = v72;
            if (v49 < 1)
              goto LABEL_39;
          }
          else
          {
            *(_QWORD *)(v46 + 3704) = 0;
            vpx_internal_error((uint64_t)v61, 2, "Failed to allocate this_tile->row_base_thresh_freq_fact", v52);
            v22 = v72;
            if (v49 < 1)
            {
LABEL_39:
              v28 = v69;
              v35 = v71;
              *(_DWORD *)(v43 + v71 + v33 + 3712) = v45;
              v31 = *v69;
              v24 = v65;
              v23 = v67;
              v26 = v73;
              goto LABEL_40;
            }
          }
          memset_pattern16(*(void **)(v46 + 3704), &memset_pattern_6, 4 * (390 * v45));
          goto LABEL_39;
        }
      }
LABEL_40:
      v36 = (const float *)(v22 + 4);
      v37 = (int32x2_t)vld1_dup_f32(v36);
      v38 = (int32x2_t *)(v44 + v33);
      *v38 = vmin_s32(vshl_n_s32(vshl_s32(vmul_s32(vdup_n_s32((int)(v31 + 7) >> 3), v78), vneg_s32(v37)), 3uLL), vdup_n_s32(v31));
      v39 = v28[2];
      v37.i32[0] = v32;
      v37.i32[1] = v32 + 1;
      v40 = vmul_s32(vdup_n_s32((int)(v39 + 7) >> 3), v37);
      v41 = (int32x2_t)vld1_dup_f32((const float *)v22);
      v38[1] = vmin_s32(vshl_n_s32(vshl_s32(v40, vneg_s32(v41)), 3uLL), vdup_n_s32(v39));
      v24 += 16 * v27;
      *v20 = v24;
      v42 = *(_QWORD *)&vsra_n_s32((int32x2_t)0x300000003, vadd_s32(vsub_s32(vshrn_n_s64(*(int64x2_t *)(v44 + v33), 0x20uLL), vmovn_s64(*(int64x2_t *)(v44 + v33))), (int32x2_t)0x100000001), 1uLL) & 0xFFFFFFFCFFFFFFFCLL;
      v27 = 772 * v42 * HIDWORD(v42);
      v23 += 24 * v26;
      v20[256] = v23;
      v26 = (*(_DWORD *)(v44 + v33 + 4) - *(_DWORD *)(v44 + v33) + 7) >> 3;
      v33 += 3720;
      ++v20;
      ++v32;
    }
    while (v75 != v33);
    v25 = v57 + 1;
    v20 = v59 + 64;
    if (v57 + 1 != v55)
      continue;
    break;
  }
}

uint64_t vp9_encode_sb_row(uint64_t result, unint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  __n128 *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned __int32 v15;
  unsigned __int32 v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int8x16_t v29;
  _DWORD *v30;
  uint64_t v31;
  int32x2_t *v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  char v46;
  char v47;
  char v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unsigned __int8 **v53;
  uint64_t *v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  _BOOL4 v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v75;
  int v76;
  int32x4_t v77;
  uint64_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int8x16_t *v85;
  int8x16_t v86;
  int32x4_t v87;
  int32x4_t v88;
  uint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  unint64_t v114;
  _BYTE *v115;
  char v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  unsigned __int8 *v124;
  unsigned __int8 v125;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  unsigned __int8 *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  int v143;
  unsigned __int32 v144;
  int *v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  uint64_t v152;
  int32x2_t *v153;
  int v154;
  unsigned __int8 *v155;
  int v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  unsigned __int8 *v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  unsigned __int8 *v169;
  int v170;
  int v171;
  int v172;
  int v173;
  uint64_t v174;
  int v175;
  unsigned __int8 *v176;
  int v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  int v181;
  uint64_t v182;
  int32x2_t *v183;
  char *v184;
  int32x2_t v185;
  int v186;
  int *v187;
  uint64_t v188;
  int32x2_t *v189;
  uint64_t v190;
  __int32 v191;
  uint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char v202;
  uint64_t v203;
  char *v204;
  int v205;
  int v206;
  unsigned __int8 *v207;
  unsigned __int8 **v208;
  int v209;
  int v210;
  int v211;
  unsigned __int8 *v212;
  unsigned __int8 *v213;
  int v214;
  char v215;
  char v216;
  unsigned int v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  char v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  __int32 v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  unsigned int v230;
  char v231;
  unsigned int v232;
  unsigned int v233;
  int v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  __int32 v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  _DWORD *v243;
  _DWORD *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  int v249;
  uint64_t v250;
  int *v251;
  uint64_t *v252;
  int v253;
  uint64_t v254;
  void *v255;
  int v256;
  uint64_t (**v257)(uint64_t, uint64_t, uint64_t, _QWORD);
  unint64_t v258;
  int v259;
  unsigned int v260;
  int v261;
  _DWORD *v262;
  _DWORD *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _DWORD *v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t *v271;
  _QWORD *v272;
  void *__b;
  unint64_t v274;
  unsigned int v275;
  _DWORD *v276;
  uint64_t v277;
  uint64_t *v278;
  unint64_t v279;
  int v280;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  __n128 *v285;
  uint64_t v286;
  unsigned int v287;
  int v288;
  uint64_t v289;
  int v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _DWORD *v298;
  uint64_t v299;
  int32x2_t *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  uint64_t v309;

  v309 = *MEMORY[0x24BDAC8D0];
  v296 = result + 176472;
  v5 = *(_QWORD *)(result + 194488);
  v6 = (a3 << *(_DWORD *)(result + 189928)) + a4;
  v7 = (__n128 *)(v5 + 3720 * v6);
  v8 = a5 - v7->n128_u32[0];
  v9 = v8 + 7;
  v10 = v7->n128_i32[2];
  v11 = v7->n128_i32[3];
  v12 = result + ((uint64_t)a3 << 9) + 8 * a4;
  v13 = *(_QWORD *)(v12 + 194784)
      + 16 * (int)(772 * (((v8 >> 1) + 3) & 0xFFFFFFFC) * (((((int)v11 - (int)v10 + 1) >> 1) + 3) & 0xFFFFFFFC));
  v302 = v13;
  v14 = (_QWORD *)(v12 + 196832);
  *(_QWORD *)(*(_QWORD *)(v12 + 196832) + 24 * (v9 >> 3)) = v13;
  v15 = v7->n128_u32[2];
  v16 = v7->n128_u32[3];
  v285 = v7;
  *(_OWORD *)(a2 + 25488) = 0u;
  *(_OWORD *)(a2 + 25504) = 0u;
  v17 = (uint64_t)v9 >> 3;
  *(_OWORD *)(a2 + 25472) = 0u;
  *(_QWORD *)(a2 + 25528) = 0;
  if ((int)v11 > (int)v10)
  {
    v18 = a5;
    v247 = v17;
    v248 = (_QWORD *)(v12 + 196832);
    v19 = 0;
    v271 = (uint64_t *)(a2 + 114272);
    v258 = a2 + 25652;
    v263 = (_DWORD *)(a2 + 16528);
    v277 = result + 850440;
    v299 = result + 835440;
    v243 = (_DWORD *)(result + 834668);
    v244 = (_DWORD *)(result + 747512);
    v268 = result + 738568;
    v251 = (int *)(result + 190056);
    v270 = (uint64_t *)(result + 173120);
    v264 = result + 171988;
    v279 = a2 + 82376;
    v276 = (_DWORD *)(a2 + 25688);
    v284 = result + 842120;
    v257 = (uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(result + 741232);
    v20 = (uint64_t *)(result + 740216);
    v298 = (_DWORD *)(result + 738588);
    v267 = (_DWORD *)(result + 194560);
    v21 = (_DWORD *)(result + 172020);
    v254 = a2 + 24912;
    v275 = (int)(v16 - v15 + 7) >> 3;
    v22 = v5 + 3720 * v6 + 3672;
    v274 = a2 + 82352;
    v242 = result + 172480;
    v245 = result + 172304;
    v246 = result + 172128;
    v255 = (void *)(a2 + 82432);
    __b = (void *)(a2 + 82336);
    v295 = 68 * v10;
    v250 = result + 172112;
    v288 = -(int)v10;
    v262 = (_DWORD *)(a2 + 82340);
    v278 = (uint64_t *)(result + 173176);
    v269 = (uint64_t *)(result + 173232);
    v256 = 8 * a5;
    v253 = (int)a5 >> 1;
    v249 = a5 + 4;
    v272 = (_QWORD *)(a2 + 82360);
    v286 = 8 * v10;
    v266 = (int)a5;
    v261 = v10;
    v300 = (int32x2_t *)result;
    v265 = v11;
    v282 = v22;
    v283 = (int)a5 >> 3;
    v252 = (uint64_t *)(result + 740216);
    while (1)
    {
      v301 = v10;
      v303 = 0;
      v304 = 0;
      v305 = 0;
      v292 = v21[250];
      v289 = *v278;
      v280 = v298[275];
      (*(void (**)(uint64_t))(v284 + 7824))(v22);
      if (*(_DWORD *)v284)
        vp9_compute_skin_sb((uint64_t)v300, 6u, v18, v301);
      *v276 = -1;
      memset_pattern16(__b, &unk_208F46BC0, 0x10uLL);
      LODWORD(v303) = 0;
      v304 = 0;
      v305 = 0;
      *(_WORD *)(v279 + 30) = 0;
      *(_DWORD *)v274 = 0;
      *(_BYTE *)(v274 + 4) = 0;
      *v272 = 0;
      v272[1] = 0;
      *(_QWORD *)((char *)v272 + 13) = 0;
      v287 = v19;
      if (!*(_DWORD *)(v284 + 8272))
      {
        v32 = v300;
        v31 = v301;
        v34 = (int8x16_t)xmmword_208F04F40;
        v33 = (int8x16_t)xmmword_208F04F50;
        v36 = (int8x16_t)xmmword_208F04F20;
        v35 = (int8x16_t)xmmword_208F04F30;
        goto LABEL_47;
      }
      v30 = v298;
      v32 = v300;
      v31 = v301;
      v34 = (int8x16_t)xmmword_208F04F40;
      v33 = (int8x16_t)xmmword_208F04F50;
      v36 = (int8x16_t)xmmword_208F04F20;
      v35 = (int8x16_t)xmmword_208F04F30;
      if (!v298[382])
        goto LABEL_47;
      if (*v21)
      {
        v37 = 0;
        if (!v298[384])
          goto LABEL_47;
        goto LABEL_38;
      }
      v38 = *(_QWORD *)(v296 + 13968);
      v39 = *(unsigned int *)(v38 + 16);
      v259 = v21[249];
      LODWORD(v306) = 0;
      v40 = 8 * ((int)v301 + (int)v39 * (int)v18);
      v41 = *(_QWORD *)(v38 + 56) + v40;
      v260 = (*v257)(v41, v39, *(_QWORD *)(*(_QWORD *)(v296 + 13976) + 56) + v40, *(unsigned int *)(*(_QWORD *)(v296 + 13976) + 16));
      v42 = vpx_variance64x64(v41);
      v37 = v260;
      v43 = v306;
      v44 = v306 - v42;
      v45 = v306 - v42 < 0x19 ? 1 : 2;
      v46 = v44 < 0x19 ? 3 : 4;
      v47 = v260 >> 4 >= 0x271 ? v46 : v45;
      *(_BYTE *)(v279 + 4) = v47;
      if (*(_DWORD *)(v296 + 13908) != 1 && *(_DWORD *)(v296 + 13620) == 1 && v42 < v43 >> 3 && v44 > 0x2710)
        break;
      v18 = a5;
      v32 = v300;
      v31 = v301;
      v11 = v265;
      v34 = (int8x16_t)xmmword_208F04F40;
      v33 = (int8x16_t)xmmword_208F04F50;
      v36 = (int8x16_t)xmmword_208F04F20;
      v35 = (int8x16_t)xmmword_208F04F30;
      if (v260 >= 0x4E21)
      {
        v49 = 6;
LABEL_31:
        *(_BYTE *)(v279 + 4) = v49;
      }
      v50 = *(_QWORD *)(v284 + 8264);
      if (v50)
      {
        v51 = (int)(((v259 + 7) >> 3) * v283 + ((int)v31 >> 3));
        if (v260 >> 5 > 0x176)
        {
          *(_BYTE *)(v50 + v51) = 0;
          v30 = v298;
          if (!v298[384])
            goto LABEL_47;
          goto LABEL_38;
        }
        v52 = *(unsigned __int8 *)(v50 + v51);
        if (v52 != 255)
          *(_BYTE *)(v50 + v51) = v52 + 1;
      }
      v30 = v298;
      if (v260)
      {
        if (!v298[384])
          goto LABEL_47;
      }
      else
      {
        *(_DWORD *)v279 = 1;
        if (!v298[384])
          goto LABEL_47;
      }
LABEL_38:
      if (!*(_DWORD *)(v296 + 13620) && !*v30 && v37 > (uint64_t)(int)v30[385] && (*v267 || v267[1]))
        v280 = 2;
LABEL_47:
      v53 = (unsigned __int8 **)(v289 + 8 * (v31 + v292 * (uint64_t)(int)v18));
      if (*(_BYTE *)v296)
      {
        if (*(_BYTE *)(v296 + 1))
          v54 = v20;
        else
          v54 = v269;
        v55 = v21[249];
        LODWORD(v56) = v55 - v31;
        v57 = v21[247] - v18;
        v58 = 8;
        if (v57 >= 8)
          v59 = 8;
        else
          v59 = v21[247] - v18;
        v61 = v57 > 0 && (int)v56 > 0;
        if (v61)
        {
          v62 = 0;
          v63 = *v54;
          if ((int)v56 >= 8)
            v56 = 8;
          else
            v56 = v56;
          v64 = v56 - 1;
          if (v55 + v288 >= 8)
            v65 = 8;
          else
            v65 = (v55 + v288);
          v66 = v65 & 0xFFFFFFE0;
          v67 = v301 + v55 * v18;
          v68 = -(uint64_t)(v65 & 0xFFFFFFF8);
          v69 = -v65;
          do
          {
            if (v56 < 8
              || ((int)(v261 + 8 * v287 + v55 * v18 + v55 * v62 + v64) >= (int)(v261 + 8 * v287 + v55 * v18 + v55 * v62)
                ? (v70 = HIDWORD(v64) == 0)
                : (v70 = 0),
                  !v70))
            {
              v71 = 0;
LABEL_75:
              v72 = v69 + v71;
              v73 = v67 + v71;
              do
              {
                if ((int)v58 >= *(unsigned __int8 *)(v63 + v73))
                  v58 = *(unsigned __int8 *)(v63 + v73);
                ++v73;
              }
              while (!__CFADD__(v72++, 1));
              goto LABEL_68;
            }
            if (v56 >= 0x20)
            {
              v76 = v67;
              v77 = vdupq_n_s32(v58);
              v78 = v66;
              v79 = v77;
              v80 = v77;
              v81 = v77;
              v29 = (int8x16_t)v77;
              v82 = v77;
              v83 = v77;
              v84 = v77;
              do
              {
                v85 = (int8x16_t *)(v63 + v76);
                v86 = v85[1];
                v81 = vminq_s32(v81, (int32x4_t)vqtbl1q_s8(*v85, v36));
                v80 = vminq_s32(v80, (int32x4_t)vqtbl1q_s8(*v85, v35));
                v79 = vminq_s32(v79, (int32x4_t)vqtbl1q_s8(*v85, v34));
                v77 = vminq_s32(v77, (int32x4_t)vqtbl1q_s8(*v85, v33));
                v84 = vminq_s32(v84, (int32x4_t)vqtbl1q_s8(v86, v36));
                v83 = vminq_s32(v83, (int32x4_t)vqtbl1q_s8(v86, v35));
                v82 = vminq_s32(v82, (int32x4_t)vqtbl1q_s8(v86, v34));
                v29 = (int8x16_t)vminq_s32((int32x4_t)v29, (int32x4_t)vqtbl1q_s8(v86, v33));
                v76 += 32;
                v78 -= 32;
              }
              while (v78);
              v27 = (int8x16_t)vminq_s32(v79, v82);
              v28 = vminq_s32(v81, v84);
              v87 = vminq_s32(vminq_s32(v77, (int32x4_t)v29), vminq_s32(v80, v83));
              v26 = vminq_s32((int32x4_t)v27, v28);
              v25 = vminq_s32(v87, v26);
              v25.i32[0] = vminvq_s32(v25);
              v58 = v25.i32[0];
              if ((v56 & 0xFFFFFFE0) == v56)
                goto LABEL_68;
              v75 = v56 & 0xFFFFFFE0;
              v71 = v75;
              if ((v56 & 0x18) == 0)
                goto LABEL_75;
            }
            else
            {
              v75 = 0;
            }
            v88 = vdupq_n_s32(v58);
            v89 = v68 + v75;
            v90 = v67 + v75;
            v26 = v88;
            do
            {
              v27.i64[0] = *(_QWORD *)(v63 + v90);
              v28 = (int32x4_t)vqtbl1q_s8(v27, v33);
              v27 = vqtbl1q_s8(v27, v34);
              v26 = vminq_s32(v26, (int32x4_t)v27);
              v88 = vminq_s32(v88, v28);
              v90 += 8;
              v89 += 8;
            }
            while (v89);
            v25 = vminq_s32(v88, v26);
            v25.i32[0] = vminvq_s32(v25);
            v58 = v25.i32[0];
            v71 = v56 & 0xFFFFFFF8;
            if (v71 != v56)
              goto LABEL_75;
LABEL_68:
            ++v62;
            v67 += v55;
          }
          while (v62 != v59);
        }
        if (*(_BYTE *)v277 && *(_DWORD *)(v277 + 100) && *(int *)v268 >= 21 && *(unsigned __int8 *)(v279 + 4) >= 2u)
        {
          v91 = v55 * v18;
          v92 = v301 + (int)v263[2206] * (uint64_t)(int)v18;
          v93 = *v278;
          *(_QWORD *)(a2 + 25360) = *v278 + 8 * v92;
          *(_QWORD *)(v93 + 8 * v92) = *v270 + 68 * v92;
          *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * (v301 + v55 * (int)v18);
          if (v61)
          {
            v94 = 0;
            v95 = v55 + v288;
            if (v95 >= 8)
              v95 = 8;
            v96 = v301 + v91;
            do
            {
              v97 = v96;
              v98 = v95;
              do
              {
                *(_BYTE *)(*v20 + v97 + v94 * v21[249]) = 0;
                ++v97;
                --v98;
              }
              while (v98);
              ++v94;
            }
            while (v94 != v59);
          }
          set_segment_index((uint64_t)v32, a2, v18, v301, 12, *(double *)v25.i64, *(double *)v26.i64, *(double *)v27.i64, *(double *)v28.i64, v29);
          v31 = v301;
        }
        else
        {
          v31 = v301;
          if ((v32[22069].i32[v58] & 8) != 0)
          {
            v99 = 0xCu;
LABEL_107:
            v100 = v292 * (uint64_t)(int)v18;
            v101 = v21[250];
            v102 = *v270;
            v103 = v285->n128_i32[1] - v266;
            v104 = v285->n128_i32[3] - (uint64_t)(int)v31;
            v105 = v101 * (uint64_t)(int)v18;
            v106 = num_8x8_blocks_high_lookup[v99];
            v107 = num_8x8_blocks_wide_lookup[v99];
            v301 = v31;
            if ((int)v104 < 8 || (int)v103 < 8)
            {
              if (v99 >= 3)
                v116 = 3;
              else
                v116 = v99;
              if (v99)
              {
                v117 = 0;
                v118 = v102 + 68 * v105 + 68 * v31;
                v119 = v289 + 8 * (v31 + v100);
                v120 = v102 + v295 + 68 * v105;
                do
                {
                  v121 = v117 * v101;
                  if ((int)v103 - v117 < 1)
                  {
                    v127 = 0;
                    v128 = v119 + 8 * v121;
                    v129 = (char *)(v120 + 68 * v121);
                    do
                    {
                      *(_QWORD *)(v128 + 8 * v127) = v129;
                      *v129 = v116;
                      v127 += v107;
                      v129 += 68 * v107;
                    }
                    while (v127 < 8);
                  }
                  else
                  {
                    v122 = 0;
                    v123 = v107;
                    do
                    {
                      v124 = (unsigned __int8 *)(v118 + 68 * (v122 + v121));
                      (&v53[v122])[v121] = v124;
                      v125 = v116;
                      if ((int)v104 - v122 >= 1)
                      {
                        v125 = v99;
                        while (1)
                        {
                          LODWORD(v106) = num_8x8_blocks_high_lookup[v125];
                          v123 = num_8x8_blocks_wide_lookup[v125];
                          if ((int)v103 - v117 >= (int)v106 && (int)v104 - v122 >= v123)
                            break;
                          v125 -= 3;
                          if (!v125)
                          {
                            v125 = 0;
                            break;
                          }
                        }
                      }
                      *v124 = v125;
                      v122 += v123;
                    }
                    while (v122 < 8);
                  }
                  v117 += v106;
                }
                while (v117 < 8);
              }
              else
              {
                v193 = 0;
                v194 = v289 + v286 + 8 * v100;
                v195 = v101 * (uint64_t)(int)v106;
                v196 = 8 * v195;
                v197 = (char *)(v102 + v295 + 68 * v105);
                v198 = 68 * v195;
                v199 = 68 * v107;
                do
                {
                  if ((uint64_t)v193 >= v103)
                  {
                    v203 = 0;
                    v204 = v197;
                    do
                    {
                      *(_QWORD *)(v194 + 8 * v203) = v204;
                      *v204 = v116;
                      v203 += v107;
                      v204 += v199;
                    }
                    while (v203 < 8);
                  }
                  else
                  {
                    v200 = 0;
                    v201 = v197;
                    do
                    {
                      *(_QWORD *)(v194 + 8 * v200) = v201;
                      if (v200 >= v104)
                        v202 = v116;
                      else
                        v202 = 0;
                      *v201 = v202;
                      v200 += v107;
                      v201 += v199;
                    }
                    while (v200 < 8);
                  }
                  v193 += v106;
                  v194 += v196;
                  v197 += v198;
                }
                while (v193 < 8);
              }
            }
            else
            {
              v108 = 0;
              v109 = v289 + v286 + 8 * v100;
              v110 = v101 * (unint64_t)num_8x8_blocks_high_lookup[v99];
              v111 = 8 * v110;
              v112 = (_BYTE *)(v102 + v295 + 68 * v105);
              v113 = 68 * v110;
              do
              {
                v114 = 0;
                v115 = v112;
                do
                {
                  *(_QWORD *)(v109 + 8 * v114) = v115;
                  *v115 = v99;
                  v114 += v107;
                  v115 += 68 * v107;
                }
                while (v114 < 8);
                v108 += v106;
                v109 += v111;
                v112 += v113;
              }
              while (v108 < 8);
            }
LABEL_220:
            nonrd_use_partition(v32, a2, v285, v53, &v302, v18, v301, 0xCu, (uint64_t)&v303, *v271);
LABEL_221:
            v23 = v287;
            v24 = v283;
            if (*v298)
              goto LABEL_4;
            goto LABEL_222;
          }
        }
      }
      switch(v280)
      {
        case 1:
          v99 = *(unsigned __int8 *)(v268 + 1124);
          goto LABEL_107;
        case 3:
          v130 = v31;
          choose_partitioning((uint64_t)v32, (uint64_t)v285);
          v18 = a5;
          v131 = v130;
          v11 = v265;
          nonrd_use_partition(v32, a2, v285, v53, &v302, a5, v131, 0xCu, (uint64_t)&v303, *v271);
          goto LABEL_221;
        case 4:
          v132 = v21[250];
          v133 = v285->n128_u32[1] - v18;
          v134 = v285->n128_u32[3] - v31;
          v135 = (unsigned __int8 *)(*v270 + 68 * v132 * (int)v18 + 68 * v31);
          v136 = *(_QWORD *)(v296 + 13968);
          v137 = *(_QWORD *)(v136 + 56);
          v138 = *(_QWORD *)(v136 + 64);
          v139 = *(_QWORD *)(v136 + 72);
          v140 = *(_DWORD *)(v136 + 16);
          v141 = *(_DWORD *)(v136 + 36);
          *(_QWORD *)(a2 + 25440) = v136;
          *(_QWORD *)(a2 + 8216) = v137 + ((8 * (int)v31) >> v263[2098]) + v140 * (uint64_t)(v256 >> v263[2099]);
          *(_DWORD *)(a2 + 8224) = v140;
          *(_QWORD *)(a2 + 16520) = v138 + ((8 * (int)v31) >> v263[2132]) + v141 * (uint64_t)(v256 >> v263[2133]);
          *v263 = v141;
          *(_QWORD *)(a2 + 24824) = v139 + ((8 * (int)v31) >> v263[2166]) + v141 * (uint64_t)(v256 >> v263[2167]);
          v263[2076] = v141;
          if (v134 < 8 || v133 <= 7)
          {
            v205 = 0;
            v206 = 2;
            do
            {
              v209 = v205 * v132;
              if (v133 - v205 < 1)
              {
                v207 = &v135[68 * v209];
                v208 = &v53[v209];
                *v208 = v207;
                *v207 = 3;
                v207[136] = 3;
                v208[2] = v207 + 136;
                v208[4] = v207 + 272;
                v207[272] = 3;
                v208[6] = v207 + 408;
                v207[408] = 3;
              }
              else
              {
                v210 = 0;
                v211 = 2;
                if (v133 - v205 == 1)
                {
                  do
                  {
                    v212 = &v135[68 * v210 + 68 * v209];
                    (&v53[v210])[v209] = v212;
                    if (v134 > v210)
                    {
                      v206 = 1;
                      v211 = 1;
                    }
                    *v212 = 3;
                    v210 += v211;
                  }
                  while (v210 < 8);
                }
                else
                {
                  do
                  {
                    v213 = &v135[68 * v210 + 68 * v209];
                    (&v53[v210])[v209] = v213;
                    if (v134 - v210 == 1)
                      v214 = 1;
                    else
                      v214 = 2;
                    if (v134 - v210 == 1)
                      v215 = 3;
                    else
                      v215 = 6;
                    if (v134 - v210 < 1)
                    {
                      v216 = 3;
                    }
                    else
                    {
                      v206 = v214;
                      v211 = v214;
                      v216 = v215;
                    }
                    *v213 = v216;
                    v210 += v211;
                  }
                  while (v210 < 8);
                }
              }
              v205 += v206;
            }
            while (v205 < 8);
          }
          else
          {
            v142 = 0;
            v290 = 0;
            v143 = *(_DWORD *)(v264 + 1024);
            v144 = *(_DWORD *)(v299 + 8);
            v306 = 0u;
            v307 = 0u;
            v308 = 0u;
            v293 = v143 * v253 + ((int)v301 >> 1);
            v145 = &dword_208F47130;
            do
            {
              v146 = *(v145 - 4);
              v147 = *(v145 - 3);
              if (v146 >= 0)
                v148 = *(v145 - 4);
              else
                v148 = v146 + 1;
              v149 = (v148 >> 1) * v143;
              if (v147 >= 0)
                v150 = *(v145 - 3);
              else
                v150 = v147 + 1;
              v151 = v149 + (v150 >> 1);
              v152 = 12 * v293;
              v153 = (int32x2_t *)(*(_QWORD *)v299 + 12 * v293 + 12 * v151);
              v154 = v147 + v146 * v132;
              v155 = &v135[68 * v154];
              v53[v154] = v155;
              *v155 = 6;
              v156 = *(v145 - 2);
              v157 = *(v145 - 1);
              if (v156 >= 0)
                v158 = *(v145 - 2);
              else
                v158 = v156 + 1;
              if (v157 >= 0)
                v159 = *(v145 - 1);
              else
                v159 = v157 + 1;
              v160 = *(_QWORD *)v299;
              v161 = v157 + v156 * v132;
              v162 = &v135[68 * v161];
              v53[v161] = v162;
              *v162 = 6;
              v163 = *v145;
              v164 = v145[1];
              if (*v145 >= 0)
                v165 = *v145;
              else
                v165 = v163 + 1;
              if (v164 >= 0)
                v166 = v145[1];
              else
                v166 = v164 + 1;
              v167 = *(_QWORD *)v299;
              v168 = v164 + v163 * v132;
              v169 = &v135[68 * v168];
              v53[v168] = v169;
              *v169 = 6;
              v171 = v145[2];
              v170 = v145[3];
              if (v171 >= 0)
                v172 = v145[2];
              else
                v172 = v171 + 1;
              if (v170 >= 0)
                v173 = v145[3];
              else
                v173 = v170 + 1;
              v174 = *(_QWORD *)v299;
              v175 = v170 + v171 * v132;
              v176 = &v135[68 * v175];
              v53[v175] = v176;
              *v176 = 6;
              if (v153[1].i32[0] >= v144)
              {
                v18 = a5;
                v32 = v300;
              }
              else
              {
                v177 = (v158 >> 1) * v143 + (v159 >> 1);
                v178 = v160 + v152;
                if (*(_DWORD *)(v160 + v152 + 12 * v177 + 8) >= v144)
                {
                  v18 = a5;
                  v32 = v300;
                }
                else
                {
                  v179 = (v165 >> 1) * v143 + (v166 >> 1);
                  v180 = v167 + v152;
                  v32 = v300;
                  if (*(_DWORD *)(v167 + v152 + 12 * v179 + 8) >= v144)
                  {
                    v18 = a5;
                  }
                  else
                  {
                    v181 = (v172 >> 1) * v143 + (v173 >> 1);
                    v182 = v174 + v152;
                    v18 = a5;
                    if (*(_DWORD *)(v182 + 12 * v181 + 8) < v144)
                    {
                      v183 = (int32x2_t *)(v178 + 12 * v177);
                      v184 = (char *)&v306 + v142;
                      v185 = vadd_s32(vadd_s32(vadd_s32(*v153, *(int32x2_t *)((char *)&v306 + v142)), vadd_s32(*v183, *(int32x2_t *)(v180 + 12 * v179))), *(int32x2_t *)(v182 + 12 * v181));
                      *(int32x2_t *)v184 = v185;
                      *((_DWORD *)v184 + 2) = v185.i32[0]
                                            - ((unint64_t)(v185.i32[1] * (uint64_t)v185.i32[1]) >> 10);
                      ++v290;
                      v53[v154] = v155;
                      *v155 = 9;
                    }
                  }
                }
              }
              v145 += 8;
              v142 += 12;
            }
            while (v142 != 48);
            if (v290 == 4)
            {
              v217 = 2 * v144;
              if (DWORD2(v306) < 2 * v144 && DWORD1(v307) < v217 && v308 < v217 && HIDWORD(v308) < v217)
              {
                *v53 = v135;
                *v135 = 12;
              }
            }
            v11 = v265;
            v20 = v252;
          }
          goto LABEL_220;
        case 5:
          if (*(_DWORD *)(v264 + 984))
          {
            v186 = *(unsigned __int8 *)(v264 + 1000);
            set_offsets_0(v32, v285, a2, v18, v31, 12);
            v23 = v287;
            if (!v186)
            {
              v187 = v251;
              v188 = v251[1114];
              if ((_DWORD)v188 == -1)
              {
                v192 = 0;
                v189 = v300;
                v190 = v301;
              }
              else
              {
                v189 = v300;
                v190 = v301;
                v191 = v300[21506].i32[v188];
                if (v191 == -1)
                  v192 = 0;
                else
                  v192 = v270[2103] + 224 * v191 + 88;
              }
              v223 = **(_QWORD **)(a2 + 25360);
              if (v190 + 4 >= (int)v21[249])
                LODWORD(v224) = 9;
              else
                LODWORD(v224) = 11;
              if (v249 >= v21[247])
                v224 = v224;
              else
                v224 = (v224 + 1);
              v294 = v224;
              if (*(_DWORD *)(v268 + 8940) && !v251[5] && *v244 && !*v243
                || (v225 = v251[1115], (_DWORD)v225 == -1)
                || (v226 = v189[21506].i32[v225], v226 == -1))
              {
                v227 = 0;
                v228 = -1;
              }
              else
              {
                v227 = v270[2103] + 224 * v226 + 88;
                v228 = -1;
                if (*v251 <= 7 && v227 != v192 && (*(_BYTE *)(v268 + 952) & 2) != 0)
                {
                  v229 = v270[2103] + 224 * v226 + 88;
                  v190 = v192;
                  vp9_setup_pre_planes(v254, 0, v227, v18, v301, v245);
                  v230 = ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v300[8 * v294 + 92558])(*(_QWORD *)(a2 + 8216), *(unsigned int *)(a2 + 8224), *(_QWORD *)(a2 + 24944), v263[2106]);
                  v192 = v190;
                  v227 = v229;
                  LODWORD(v190) = v301;
                  v187 = v251;
                  v228 = v230;
                }
              }
              v291 = v227;
              if (v187[8] < 1 || *(_DWORD *)(v296 + 13620) || !*v298)
              {
                vp9_setup_pre_planes(v254, 0, v192, v18, v190, v246);
                v231 = 1;
              }
              else
              {
                v237 = v187[1116];
                if ((_DWORD)v237 == -1 || (v238 = v300[21506].i32[v237], v238 == -1))
                  v239 = 0;
                else
                  v239 = v270[2103] + 224 * v238 + 88;
                vp9_setup_pre_planes(v254, 0, v239, v18, v190, v242);
                v228 = -1;
                v231 = 3;
              }
              *(_BYTE *)(v223 + 8) = v231;
              *(_BYTE *)(v223 + 9) = -1;
              *(_BYTE *)v223 = 12;
              *(_DWORD *)(v223 + 12) = 0;
              *(_BYTE *)(v223 + 7) = 3;
              LODWORD(v306) = 0;
              v232 = vp9_int_pro_motion_estimation((uint64_t)v300, a2, v294, v18, v190, (__int16 *)&v306);
              v262[5] = 1;
              v262[6] = *(__int16 *)(v223 + 14);
              v262[7] = *(__int16 *)(v223 + 12);
              if (*(_DWORD *)(v268 + 1528))
                v233 = (7 * v232) >> 3;
              else
                v233 = v232;
              if (v228 >= v233)
              {
                *v262 = *(_DWORD *)(v223 + 12);
                v235 = *(unsigned __int8 *)(v223 + 9);
                v23 = v287;
                if (*(char *)(v223 + 8) < 1)
                  v234 = 0;
                else
                  v234 = *(unsigned __int8 *)(v223 + 8) - 1;
                v236 = v301;
              }
              else
              {
                vp9_setup_pre_planes(v254, 0, v291, v18, v190, v245);
                *(_BYTE *)(v223 + 8) = 2;
                *(_DWORD *)(v223 + 12) = 0;
                v234 = 1;
                v235 = *(unsigned __int8 *)(v223 + 9);
                v23 = v287;
                v236 = v190;
              }
              v11 = v265;
              *(_QWORD *)(a2 + 25424) = v250 + 176 * v234;
              v240 = (char)v235;
              v241 = v235 - 1;
              if (v240 <= 0)
                v241 = 0;
              *(_QWORD *)(a2 + 25432) = v250 + 176 * v241;
              *(_QWORD *)(a2 + 24928) = v255;
              v263[2102] = 64;
              build_inter_predictors_for_planes(v254, 12, v18, v236, 0, 2);
              goto LABEL_283;
            }
          }
          else
          {
            set_offsets_0(v32, v285, a2, v18, v31, 12);
            v23 = v287;
          }
          v222 = v263[2252];
          if (v222 == 12 || v222 == 10)
          {
            bzero(v255, 0x1000uLL);
          }
          else if (v222 == 8)
          {
            memset(v255, 128, 0x1000uLL);
          }
LABEL_283:
          *(_WORD *)v258 = 3075;
          v262[8] = 1;
          nonrd_pick_partition((uint64_t)v300, a2, v285, &v302, v18, v301, 12, (uint64_t)&v303, 1, 0x7FFFFFFFFFFFFFFFLL, *v271);
          goto LABEL_284;
        default:
          v262[8] = 1;
          set_offsets_0(v32, v285, a2, v18, v31, 12);
          if (*(_DWORD *)(v296 + 13620)
            || !*(_DWORD *)(v268 + 488)
            || *v251 > 5
            || !*(_DWORD *)(v264 + 984)
            || *(_BYTE *)(v264 + 1000)
            || !*v267 && !v267[1])
          {
            choose_partitioning((uint64_t)v300, (uint64_t)v285);
            if (!*(_DWORD *)(v264 + 984) || *(_BYTE *)(v264 + 1000))
            {
              nonrd_use_partition(v300, a2, v285, v53, &v302, v18, v301, 0xCu, (uint64_t)&v303, *v271);
              goto LABEL_221;
            }
            nonrd_select_partition(v300, a2, v285, v53, &v302, v18, v301, 0xCu, (uint64_t)&v303, *v271);
            v23 = v287;
            v24 = v283;
            if (!*v298)
              break;
            goto LABEL_4;
          }
          if (*(int *)v264 > 352 || *(int *)(v264 + 4) >= 289)
            v221 = 12;
          else
            v221 = 9;
          v23 = v287;
          *(_BYTE *)(v258 + 1) = v221;
          *(_BYTE *)v258 = 3;
          nonrd_pick_partition((uint64_t)v300, a2, v285, &v302, v18, v301, 12, (uint64_t)&v303, 1, 0x7FFFFFFFFFFFFFFFLL, *v271);
LABEL_284:
          v24 = v283;
          if (*v298)
            goto LABEL_4;
          break;
      }
LABEL_222:
      if (!*v267 && !v267[1] && *(_DWORD *)(v268 + 480) && *(_DWORD *)(v268 + 1564))
      {
        v218 = ((v21[249] + 7) >> 3) * (int)v24 + (uint64_t)((int)v301 >> 3);
        v219 = *(_QWORD *)(v299 + 14976);
        if (v219)
          *(_BYTE *)(v219 + v218) = *(_BYTE *)(v279 + 30);
        v220 = *(_QWORD *)(v299 + 14984);
        if (v220)
          *(_BYTE *)(v220 + v218) = *(_BYTE *)(v279 + 31);
      }
LABEL_4:
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v299 + 14512))(v282, v24, v23, v275);
      v22 = v282;
      v10 = v301 + 8;
      v19 = v23 + 1;
      v288 -= 8;
      v295 += 544;
      v286 += 64;
      if (v301 + 8 >= v11)
      {
        v13 = v302;
        v17 = v247;
        v14 = v248;
        goto LABEL_291;
      }
    }
    v49 = 5;
    v18 = a5;
    v32 = v300;
    v31 = v301;
    v11 = v265;
    v34 = (int8x16_t)xmmword_208F04F40;
    v33 = (int8x16_t)xmmword_208F04F50;
    v36 = (int8x16_t)xmmword_208F04F20;
    v35 = (int8x16_t)xmmword_208F04F30;
    goto LABEL_31;
  }
LABEL_291:
  *(_QWORD *)(*v14 + 24 * v17 + 8) = v13;
  *(_DWORD *)(*v14 + 24 * v17 + 16) = (*(_QWORD *)(*v14 + 24 * v17 + 8) - *(_QWORD *)(*v14 + 24 * v17)) >> 4;
  return result;
}

uint64_t compare_kmeans_data(double *a1, double *a2)
{
  unsigned int v2;

  if (*a1 >= *a2)
    v2 = 0;
  else
    v2 = -1;
  if (*a1 > *a2)
    return 1;
  else
    return v2;
}

uint64_t vp9_encode_frame(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v2 = (int *)(a1 + 194496);
  *(_OWORD *)(a1 + 211536) = *(_OWORD *)(a1 + 211760);
  v3 = a1 + 738588;
  v4 = a1 + 176472;
  *(_OWORD *)(a1 + 211632) = *(_OWORD *)(a1 + 211856);
  v5 = a1 + 172988;
  v6 = a1 + 163392;
  *(_OWORD *)(a1 + 211648) = *(_OWORD *)(a1 + 211872);
  *(_OWORD *)(a1 + 211552) = *(_OWORD *)(a1 + 211776);
  *(_OWORD *)(a1 + 211568) = *(_OWORD *)(a1 + 211792);
  *(_OWORD *)(a1 + 211664) = *(_OWORD *)(a1 + 211888);
  *(_OWORD *)(a1 + 211680) = *(_OWORD *)(a1 + 211904);
  *(_OWORD *)(a1 + 211584) = *(_OWORD *)(a1 + 211808);
  *(_OWORD *)(a1 + 211696) = *(_OWORD *)(a1 + 211920);
  *(_OWORD *)(a1 + 211712) = *(_OWORD *)(a1 + 211936);
  *(_OWORD *)(a1 + 211600) = *(_OWORD *)(a1 + 211824);
  *(_OWORD *)(a1 + 211616) = *(_OWORD *)(a1 + 211840);
  *(_OWORD *)(a1 + 211728) = *(_OWORD *)(a1 + 211952);
  *(_OWORD *)(a1 + 211744) = *(_OWORD *)(a1 + 211968);
  if (*(int *)(a1 + 194496) >= 1)
  {
    v7 = 0;
    v8 = 1576;
    do
    {
      memcpy((void *)(*(_QWORD *)(v4 + 18016) + v8 - 1560), (const void *)(*(_QWORD *)(v4 + 18016) + v8), 0x618uLL);
      ++v7;
      v8 += 3720;
    }
    while (v7 < *v2);
  }
  v9 = *(unsigned __int8 *)(v3 + 1428);
  *(_BYTE *)(v5 + 264) = v9;
  v10 = *(_DWORD *)(v6 + 9580);
  if (v10 && !*(_BYTE *)v5)
  {
    v18 = *(_DWORD *)(v5 + 3424);
    v19 = *(_DWORD *)(v5 + 3420);
    if (v18 == v19)
    {
      if (*(_DWORD *)(v5 + 3428) == v18)
      {
        *(_DWORD *)(v3 + 1612) = 0;
        v11 = *(_DWORD **)(v6 + 56);
        if (!*(_DWORD *)(v3 + 988))
          goto LABEL_24;
      }
      else
      {
        *(_DWORD *)(v3 + 1612) = 1;
        *(_WORD *)(v4 + 116) = 259;
        *(_BYTE *)(v4 + 118) = 2;
        v11 = *(_DWORD **)(v6 + 56);
        if (!*(_DWORD *)(v3 + 988))
          goto LABEL_24;
      }
    }
    else
    {
      *(_DWORD *)(v3 + 1612) = 1;
      if (v19 == *(_DWORD *)(v5 + 3428))
      {
        *(_WORD *)(v4 + 116) = 258;
        *(_BYTE *)(v4 + 118) = 3;
        v11 = *(_DWORD **)(v6 + 56);
        if (!*(_DWORD *)(v3 + 988))
          goto LABEL_24;
      }
      else
      {
        *(_WORD *)(v4 + 116) = 513;
        *(_BYTE *)(v4 + 118) = 3;
        v11 = *(_DWORD **)(v6 + 56);
        if (!*(_DWORD *)(v3 + 988))
          goto LABEL_24;
      }
    }
    if (v2[16])
    {
      v21 = 2;
      if (*(_DWORD *)v3)
        v21 = 3;
      v13 = (uint64_t *)(a1 + 198912 + 24 * v21 + 12624);
      v14 = (uint64_t *)(a1 + 198912 + 32 * v21 + 12720);
      if (*(_DWORD *)v3)
      {
        v15 = 1;
        goto LABEL_49;
      }
LABEL_9:
      v15 = *(_DWORD *)(v3 + 1612);
      if (v15)
      {
        v16 = v13[1];
        v17 = v13[2];
        if (v16 <= *v13
          || v16 <= v17
          || *(_BYTE *)v4 && (*(_BYTE *)(v4 + 84) & 4) != 0
          || ((*(_DWORD *)(v3 + 932) >> 1) & 1) + (*(_DWORD *)(v3 + 932) & 1) + ((*(_DWORD *)(v3 + 932) >> 2) & 1u) < 2
          || *(_DWORD *)(v3 + 928) != 100)
        {
          if (*v13 <= v17)
          {
            v15 = 0;
            *(_DWORD *)(v4 + 120) = 2;
            if (v9 != 4)
              goto LABEL_60;
          }
          else
          {
            v15 = 0;
            *(_DWORD *)(v4 + 120) = 0;
            if (v9 != 4)
              goto LABEL_60;
          }
        }
        else
        {
          v15 = 0;
          *(_DWORD *)(v4 + 120) = 1;
          if (v9 != 4)
            goto LABEL_60;
        }
LABEL_50:
        v22 = *v14;
        if (v15 || (v23 = v14[1], v23 <= v22) || v23 <= v14[2] || v23 <= v14[3])
        {
          v26 = v14[2];
          v25 = v14[3];
          if (v26 <= v22 || v26 <= v25)
            v24 = 4 * (v22 <= v25);
          else
            v24 = 2;
        }
        else
        {
          v24 = 1;
        }
        *(_BYTE *)(v5 + 264) = v24;
LABEL_60:
        result = encode_frame_internal(a1);
        v27 = *(int *)(v5 + 12);
        v28 = *(_QWORD *)v6 / v27;
        v29 = v13[1];
        v30 = __OFADD__(v28, *v13);
        v31 = v28 + *v13;
        if (v31 < 0 != v30)
          ++v31;
        *v13 = v31 >> 1;
        v32 = *(_QWORD *)(v6 + 8) / v27;
        v30 = __OFADD__(v32, v29);
        v33 = v32 + v29;
        if (v33 < 0 != v30)
          ++v33;
        v13[1] = v33 >> 1;
        v34 = v13[2];
        v35 = *(_QWORD *)(v6 + 16) / v27;
        v30 = __OFADD__(v35, v34);
        v36 = v35 + v34;
        if (v36 < 0 != v30)
          ++v36;
        v13[2] = v36 >> 1;
        v37 = *(_QWORD *)(v6 + 24) / v27;
        v38 = v14[1];
        v30 = __OFADD__(v37, *v14);
        v39 = v37 + *v14;
        if (v39 < 0 != v30)
          ++v39;
        *v14 = v39 >> 1;
        v40 = *(_QWORD *)(v6 + 32) / v27;
        v30 = __OFADD__(v40, v38);
        v41 = v40 + v38;
        if (v41 < 0 != v30)
          ++v41;
        v14[1] = v41 >> 1;
        v42 = *(_QWORD *)(v6 + 40) / v27;
        v43 = v14[2];
        v44 = v14[3];
        v30 = __OFADD__(v42, v43);
        v45 = v42 + v43;
        if (v45 < 0 != v30)
          ++v45;
        v14[2] = v45 >> 1;
        v46 = *(_QWORD *)(v6 + 48) / v27;
        v30 = __OFADD__(v46, v44);
        v47 = v46 + v44;
        if (v47 < 0 != v30)
          ++v47;
        v14[3] = v47 >> 1;
        if (*(_DWORD *)(v4 + 120) != 2)
          goto LABEL_80;
        if (v11[3141] + v11[3139] + v11[3137] + v11[3133] + v11[3135])
        {
          if (v11[3140] + v11[3138] + v11[3136] + v11[3134] + v11[3132])
            goto LABEL_80;
          v48 = 1;
        }
        else
        {
          v48 = 0;
        }
        *(_DWORD *)(v4 + 120) = v48;
        *((_QWORD *)v11 + 1570) = 0;
        *((_OWORD *)v11 + 783) = 0u;
        *((_OWORD *)v11 + 784) = 0u;
LABEL_80:
        if (*(_DWORD *)(v5 + 36) == 4)
        {
          result = v11[3175];
          v49 = v11[3178] + v11[3174];
          v50 = v11[3185];
          v51 = -v11[3182];
          v52 = -(int)result;
          v53 = v11[3179];
          v54 = v11[3180] + v11[3172] + v11[3186] + v11[3176] + v11[3183] + v11[3188];
          if (v54 || v49 || v50 != v51 || v53 != v52)
          {
            v63 = v11[3181] + v11[3173] + v11[3177] + v11[3184];
            if (v11[3189] + v11[3187] || v50 != v51 || v63 || v49 || v53 != v52)
            {
              if (v63 | v49 | v54)
              {
                if (v53 == v52 && !(v63 | v54))
                {
                  *(_DWORD *)(v5 + 36) = 2;
                  v82 = *(_DWORD *)(v5 + 20);
                  if (v82 >= 1)
                  {
                    v83 = *(unsigned int *)(v5 + 28);
                    if ((int)v83 >= 1)
                    {
                      v84 = 0;
                      v85 = *(_QWORD *)(v5 + 188);
                      v86 = 8 * v83;
                      v87 = 8 * *(int *)(v5 + 32);
                      do
                      {
                        v88 = 0;
                        do
                        {
                          v89 = *(_QWORD *)(v85 + v88);
                          if (*(unsigned __int8 *)(v89 + 2) >= 3u)
                            *(_BYTE *)(v89 + 2) = 2;
                          v88 += 8;
                        }
                        while (v86 != v88);
                        ++v84;
                        v85 += v87;
                      }
                      while (v84 != v82);
                    }
                  }
                }
              }
              else
              {
                *(_DWORD *)(v5 + 36) = 3;
              }
            }
            else
            {
              *(_DWORD *)(v5 + 36) = 0;
              v64 = *(_DWORD *)(v5 + 20);
              if (v64 >= 1)
              {
                v65 = *(unsigned int *)(v5 + 28);
                if ((int)v65 >= 1)
                {
                  v66 = 0;
                  v67 = *(_QWORD *)(v5 + 188);
                  v68 = 8 * v65;
                  v69 = 8 * *(int *)(v5 + 32);
                  do
                  {
                    v70 = 0;
                    do
                    {
                      v71 = *(_QWORD *)(v67 + v70);
                      if (*(_BYTE *)(v71 + 2))
                        *(_BYTE *)(v71 + 2) = 0;
                      v70 += 8;
                    }
                    while (v68 != v70);
                    ++v66;
                    v67 += v69;
                  }
                  while (v66 != v64);
                }
              }
            }
          }
          else
          {
            *(_DWORD *)(v5 + 36) = 1;
            v55 = *(_DWORD *)(v5 + 20);
            if (v55 >= 1)
            {
              v56 = *(unsigned int *)(v5 + 28);
              if ((int)v56 >= 1)
              {
                v57 = 0;
                v58 = *(_QWORD *)(v5 + 188);
                v59 = 8 * v56;
                v60 = 8 * *(int *)(v5 + 32);
                do
                {
                  v61 = 0;
                  do
                  {
                    v62 = *(_QWORD *)(v58 + v61);
                    if (*(unsigned __int8 *)(v62 + 2) >= 2u)
                      *(_BYTE *)(v62 + 2) = 1;
                    v61 += 8;
                  }
                  while (v59 != v61);
                  ++v57;
                  v58 += v60;
                }
                while (v57 != v55);
              }
            }
          }
        }
        goto LABEL_108;
      }
LABEL_49:
      *(_DWORD *)(v4 + 120) = 0;
      if (v9 != 4)
        goto LABEL_60;
      goto LABEL_50;
    }
    v12 = 1;
    if (v2[17])
      v12 = 2;
LABEL_8:
    v13 = (uint64_t *)(a1 + 198912 + 24 * v12 + 12624);
    v14 = (uint64_t *)(a1 + 198912 + 32 * v12 + 12720);
    goto LABEL_9;
  }
  v11 = *(_DWORD **)(v6 + 56);
  if (*(_DWORD *)(v3 + 988))
  {
    v12 = 0;
    goto LABEL_8;
  }
LABEL_24:
  *(_DWORD *)(v4 + 120) = 0;
  if (*(_DWORD *)(v3 + 1612) && *(_DWORD *)(v3 + 1548) && *(_DWORD *)(v3 + 460) && v10 && !*(_DWORD *)v3)
    *(_DWORD *)(v4 + 120) = 2;
  result = encode_frame_internal(a1);
  if (*(_DWORD *)(v4 + 120) == 2)
  {
    if (v11[3141] + v11[3139] + v11[3137] + v11[3133] + v11[3135])
    {
      if (v11[3140] + v11[3138] + v11[3136] + v11[3134] + v11[3132])
        goto LABEL_108;
      *(_DWORD *)(v4 + 120) = 1;
    }
    else
    {
      *(_DWORD *)(v4 + 120) = 0;
    }
    *((_QWORD *)v11 + 1570) = 0;
    *((_OWORD *)v11 + 783) = 0u;
    *((_OWORD *)v11 + 784) = 0u;
  }
LABEL_108:
  if (*(_BYTE *)v4 && *(_DWORD *)(v4 + 13676) && (*(_BYTE *)(v4 + 1) || *(_BYTE *)(v4 + 2)))
  {
    v72 = *(_DWORD *)(v5 + 20);
    v73 = *(unsigned int *)(v5 + 28);
    if (v72 >= 1 && (int)v73 >= 1)
    {
      v74 = 0;
      v75 = 0;
      v76 = *(_QWORD *)(v5 + 188);
      while (1)
      {
        if (v73 >= 2)
        {
          v78 = 0;
          v79 = 0;
          result = v76 + 8 * (v73 & 0xFFFFFFFE);
          do
          {
            v74 += *(__int16 *)(a1 + 176488 + 8 * *(char *)(*(_QWORD *)(v76 + v78) + 4));
            v79 += *(__int16 *)(a1 + 176488 + 8 * *(char *)(*(_QWORD *)(v76 + v78 + 8) + 4));
            v78 += 16;
          }
          while (((8 * v73) & 0x7FFFFFFF0) != v78);
          v74 += v79;
          v77 = v73 & 0xFFFFFFFE;
          if ((v73 & 0xFFFFFFFE) == v73)
            goto LABEL_115;
        }
        else
        {
          v77 = 0;
          result = v76;
        }
        v80 = v73 - v77;
        do
        {
          v81 = *(_QWORD *)result;
          result += 8;
          v74 += *(__int16 *)(a1 + 8 * *(char *)(v81 + 4) + 176488);
          --v80;
        }
        while (v80);
LABEL_115:
        v76 += 8 * *(int *)(v5 + 32);
        if (++v75 == v72)
          goto LABEL_125;
      }
    }
    v74 = 0;
LABEL_125:
    *(_DWORD *)(v4 + 112) = v74 / ((int)v73 * v72);
  }
  return result;
}

uint64_t encode_frame_internal(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  int v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  int v13;
  unint64_t v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _DWORD *v31;
  _QWORD *v32;
  _DWORD *v33;
  unsigned int *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  unint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  _DWORD *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  int16x8_t *v78;
  int16x8_t *v79;
  int32x4_t v80;
  int v81;
  int32x4_t v82;
  int32x4_t v83;
  int16x8_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int16x8_t v88;
  BOOL v89;
  int v90;
  int v91;
  int16x8_t *v92;
  int16x8_t *v93;
  int32x4_t v94;
  int v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int16x8_t v102;
  unint64_t v103;
  uint64_t v104;
  int16x8_t *v105;
  int16x8_t *v106;
  int32x4_t v107;
  int v108;
  int32x4_t v109;
  int32x4_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int16x8_t v115;
  unint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t (*v119)();
  int v120;
  int v121;
  uint64_t v122;
  timeval *v123;
  int tv_sec;
  int v125;
  unsigned int v126;
  uint64_t v127;
  _DWORD *v128;
  int *v129;
  int v130;
  int v131;
  int v132;
  pthread_mutex_t *v133;
  int v134;
  unsigned int v135;
  unsigned int v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  signed int v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int64x2_t v163;
  int64x2_t v164;
  int64x2_t *v165;
  uint64_t v166;
  int v167;
  int v168;
  void *v169;
  int v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double v175;
  double v176;
  uint64_t v177;
  int v178;
  int v179;
  _QWORD *v180;
  uint64_t v181;
  int v182;
  double *v183;
  int v184;
  double *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  __int128 v191;
  uint64_t v192;
  uint64_t v193;
  double *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  double v198;
  uint64_t v199;
  uint64_t v200;
  double *v201;
  timeval *v202;
  int *v203;
  uint64_t v204;
  double *v205;
  int v206;
  double *v207;
  double *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  int v215;
  int v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  int v220;
  int v221;
  int v222;
  int i;
  unsigned int *v224;
  uint64_t v225;
  int j;
  uint64_t result;
  int v228;
  int v229;
  int32x2_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  int v236;
  unsigned __int8 *v237;
  int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  _DWORD *v248;
  int v249;
  uint64_t v250;
  _DWORD *v251;
  int v252;
  _DWORD *v253;
  int v254;
  double *v255;
  int v256;
  int *v257;
  timeval v258;
  unsigned __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  int v283;
  _OWORD v284[2];
  uint64_t v285;

  v1 = a1;
  v285 = *MEMORY[0x24BDAC8D0];
  v2 = (_DWORD *)(a1 + 738536);
  v3 = a1 + 189856;
  v4 = a1 + 171988;
  v5 = a1 + 74648;
  v6 = a1 + 74384;
  v237 = (unsigned __int8 *)(a1 + 742180);
  v240 = *(unsigned __int8 *)(a1 + 742180);
  v7 = *(_QWORD **)(a1 + 173176);
  *(_QWORD *)(a1 + 74560) = v7;
  v245 = a1 + 173120;
  *v7 = *(_QWORD *)(a1 + 173120);
  v235 = (_QWORD *)(a1 + 131408);
  bzero(*(void **)(a1 + 163448), 0x33A8uLL);
  bzero((void *)(v1 + 135744), 0x6C38uLL);
  if (*(_DWORD *)(v4 + 1040) || *(_DWORD *)(v4 + 1044) || *(_DWORD *)(v4 + 1048))
  {
    v8 = 0;
    v9 = *(_DWORD *)(v4 + 32);
    v253 = (_DWORD *)(v4 + 32);
    *(_DWORD *)(v5 + 92) = 0;
    if (v9)
      v10 = vpx_highbd_fdct4x4_neon;
    else
      v10 = vpx_fdct4x4_neon;
LABEL_7:
    v11 = v235;
    v235[25] = v10;
    v235[27] = vp9_highbd_idct4x4_add;
    v12 = vp9_idct4x4_add;
    v13 = 1;
    goto LABEL_8;
  }
  v60 = *(_DWORD *)(v4 + 32);
  v253 = (_DWORD *)(v4 + 32);
  v61 = *(_DWORD *)(v4 + 1052);
  *(_DWORD *)(v5 + 92) = v61 == 0;
  if (v61)
  {
    v8 = 0;
    v10 = vpx_highbd_fdct4x4_neon;
    if (!v60)
      v10 = vpx_fdct4x4_neon;
    goto LABEL_7;
  }
  v13 = 0;
  v119 = vp9_highbd_fwht4x4_c;
  if (!v60)
    v119 = (uint64_t (*)())vp9_fwht4x4_c;
  v11 = v235;
  v235[25] = v119;
  v235[27] = vp9_highbd_iwht4x4_add;
  v12 = vp9_iwht4x4_add;
  v8 = 1;
LABEL_8:
  v14 = v1 + 49200;
  v11[26] = v12;
  v248 = v2;
  v15 = v2[262] == 1 && *(_DWORD *)(v3 + 220) != 1;
  *(_DWORD *)v11 = v13 & v15;
  *(_DWORD *)(v5 + 392) = *(_DWORD *)(v3 + 196);
  *(_DWORD *)(v5 + 396) = *(_DWORD *)(v3 + 292) == 1;
  if ((v8 & 1) != 0)
  {
    v16 = 0;
  }
  else if (*(_DWORD *)(v4 + 984) || !v2[349])
  {
    v17 = (int)v2[283];
    if (v17 >= 3)
      v16 = *(_DWORD *)(v4 + 1036);
    else
      v16 = dword_208F471A0[v17];
  }
  else
  {
    v16 = 2;
  }
  *(_DWORD *)(v4 + 1036) = v16;
  vp9_init_plane_quantizers(v1, v14);
  vp9_initialize_rd_consts(v1);
  v18 = 4 * *(int *)(v4 + 1040);
  if (*(_DWORD *)v3 == 10)
  {
    *(_DWORD *)(v5 + 176) = sad_per_bit16lut_10[*(int *)(v4 + 1040)];
    v19 = (char *)&sad_per_bit4lut_10;
  }
  else if (*(_DWORD *)v3 == 8)
  {
    *(_DWORD *)(v5 + 176) = sad_per_bit16lut_8[*(int *)(v4 + 1040)];
    v19 = (char *)&sad_per_bit4lut_8;
  }
  else
  {
    *(_DWORD *)(v5 + 176) = sad_per_bit16lut_12[*(int *)(v4 + 1040)];
    v19 = (char *)&sad_per_bit4lut_12;
  }
  v232 = v1 + 835448;
  *(_DWORD *)(v5 + 180) = *(_DWORD *)&v19[v18];
  v234 = v1 + 739520;
  v257 = (int *)(v1 + 194312);
  v20 = *(_QWORD *)(v3 + 584);
  v251 = (_DWORD *)(v1 + 172480);
  v21 = (*(int *)(v4 + 1028) + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = *(_QWORD *)(v20 + 56);
  v23 = *(_QWORD *)(v20 + 64);
  v24 = *(_QWORD *)(v20 + 72);
  v25 = *(_DWORD *)(v20 + 16);
  v26 = *(_DWORD *)(v20 + 36);
  *(_QWORD *)(v6 + 256) = v20;
  *(_QWORD *)(v1 + 57416) = v22;
  *(_DWORD *)(v1 + 57424) = v25;
  *(_QWORD *)(v1 + 65720) = v23;
  *(_DWORD *)(v1 + 65728) = v26;
  *(_QWORD *)(v1 + 74024) = v24;
  *(_DWORD *)(v1 + 74032) = v26;
  LODWORD(v22) = *(_DWORD *)(v4 + 24);
  LODWORD(v23) = *(_DWORD *)(v4 + 28);
  *(_QWORD *)(v1 + 74120) = 0;
  *(_DWORD *)(v1 + 74256) = v22;
  *(_DWORD *)(v1 + 74260) = v23;
  *(_DWORD *)(v6 + 8) = v22;
  *(_DWORD *)(v6 + 12) = v23;
  bzero(*(void **)v5, 6 * v21);
  bzero(*(void **)(v5 + 72), v21);
  v27 = v3;
  if (!*(_DWORD *)(v3 + 64)
    && *(_DWORD *)v4 == *(_DWORD *)(v4 + 16)
    && *(_DWORD *)(v4 + 4) == *(_DWORD *)(v4 + 20)
    && !*(_BYTE *)(v4 + 1000))
  {
    v118 = *(_DWORD *)(v4 + 992);
    v29 = v245;
    *(_DWORD *)(v245 + 80) = v118 != 0;
    v30 = v235;
    if (v118)
      v28 = *(_QWORD *)(v245 + 8) + 68 * *(int *)(v4 + 1032) + 68;
    else
      v28 = 0;
  }
  else
  {
    v28 = 0;
    v29 = v245;
    *(_DWORD *)(v245 + 80) = 0;
    v30 = v235;
  }
  v31 = (_DWORD *)(v1 + 172128);
  *(_QWORD *)(v29 + 16) = v28;
  *((_DWORD *)v30 + 4) = v2[319];
  *(_QWORD *)(v1 + 131428) = 0;
  *(_DWORD *)(v1 + 131436) = 0;
  if (!v2[349])
  {
    v34 = (unsigned int *)(v1 + 739520);
    if ((v240 - 1) > 0x30 || !*(_DWORD *)(v1 + 739644))
      goto LABEL_132;
    v36 = *(unsigned int *)(v1 + 173008);
    if ((int)v36 < 1)
    {
      v41 = 0;
      v40 = 0;
LABEL_73:
      if (!*(_BYTE *)(v1 + 40 * *v237 + 190808))
        goto LABEL_132;
    }
    else
    {
      if (!*(_BYTE *)(v1 + 40 * *v237 + 190808))
        goto LABEL_132;
      v37 = *(unsigned int *)(v4 + 1028);
      if ((int)v37 >= 1)
      {
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = *(_QWORD *)(v1 + 40 * *v237 + 190816);
        v43 = *(int *)(v1 + 40 * *v237 + 190824);
        v44 = (_QWORD *)(v42 + 48);
        while (1)
        {
          if (v37 >= 2)
          {
            v46 = 0;
            v47 = 0;
            v48 = v37 & 0xFFFFFFFE;
            v49 = v44;
            do
            {
              v41 += *(v49 - 6);
              v47 += *v49;
              v40 += *(v49 - 3);
              v46 += v49[3];
              v49 += 12;
              v48 -= 2;
            }
            while (v48);
            v41 += v47;
            v40 += v46;
            v45 = v37 & 0xFFFFFFFE;
            if (v45 == v37)
              goto LABEL_45;
          }
          else
          {
            v45 = 0;
          }
          v50 = v37 - v45;
          v51 = (_QWORD *)(v42 + 48 * (v45 + v38));
          do
          {
            v41 += *v51;
            v40 += v51[3];
            v51 += 6;
            --v50;
          }
          while (v50);
LABEL_45:
          ++v39;
          v44 += 6 * v43;
          v38 += v43;
          if (v39 == v36)
            goto LABEL_73;
        }
      }
      v40 = 0;
      v41 = 0;
    }
    *(double *)(v1 + 211992) = (double)v41 / (double)v40;
    goto LABEL_132;
  }
  v32 = (_QWORD *)v30[4008];
  *(_QWORD *)(v1 + 57400) = v32[52];
  *(_QWORD *)(v1 + 57392) = v32[61];
  *(_QWORD *)(v1 + 74112) = v32[70];
  *(_QWORD *)(v1 + 57408) = v32[79];
  *(_QWORD *)(v1 + 65704) = v32[55];
  *(_QWORD *)(v1 + 65696) = v32[64];
  *(_QWORD *)(v1 + 74248) = v32[73];
  *(_QWORD *)(v1 + 65712) = v32[82];
  *(_QWORD *)(v1 + 74008) = v32[58];
  *(_QWORD *)(v1 + 74000) = v32[67];
  *(_QWORD *)v6 = v32[76];
  *(_QWORD *)(v1 + 74016) = v32[85];
  bzero((void *)(v1 + 75064), 0x400uLL);
  if (!*(_DWORD *)(v4 + 984))
  {
    v34 = (unsigned int *)(v1 + 739520);
    v27 = v3;
    if (v2[288] == 4)
      v2[288] = 0;
    goto LABEL_132;
  }
  v33 = v2;
  v34 = (unsigned int *)(v1 + 739520);
  v27 = v3;
  if (!*v2 && (*(int *)(v3 + 232) < 1 || *(_DWORD *)(v3 + 236)) && !*((_DWORD *)v237 + 1332))
    v2[246] &= ~2u;
  v35 = v253;
  if (v2[288] != 4)
    goto LABEL_132;
  if (*(_BYTE *)(v4 + 1000))
  {
    v2[288] = 1;
    goto LABEL_132;
  }
  v52 = v1 + 835440;
  if (*(_DWORD *)(v4 + 16) == *(_DWORD *)v4 && *(_DWORD *)(v4 + 20) == *(_DWORD *)(v4 + 4))
  {
    v53 = *(_DWORD *)(v1 + 835452);
    if (v53)
      goto LABEL_59;
  }
  else
  {
    if (*(_QWORD *)v52)
      free(*(void **)(*(_QWORD *)v52 - 8));
    v56 = *(unsigned int *)(v4 + 1012);
    if ((v56 & 0x80000000) == 0
      && (v57 = 8 * v56, (v58 = malloc_type_malloc(8 * v56 + 23, 0x74AD08B5uLL)) != 0)
      && (v59 = ((unint64_t)v58 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v59 - 8) = v58, v59))
    {
      bzero((void *)(((unint64_t)v58 + 23) & 0xFFFFFFFFFFFFFFF0), v57);
      *(_QWORD *)v52 = v59;
    }
    else
    {
      *(_QWORD *)v52 = 0;
      vpx_internal_error(v1 + 171696, 2, "Failed to allocate cpi->source_diff_var");
    }
    v34 = (unsigned int *)(v1 + 739520);
    v27 = v3;
    v35 = v253;
    v53 = *(_DWORD *)(v1 + 835452);
    if (v53)
    {
LABEL_59:
      v54 = __OFSUB__(v53, 1);
      v55 = v53 - 1;
      if (v55 < 0 == v54)
        goto LABEL_131;
      goto LABEL_132;
    }
  }
  v62 = *(_QWORD *)(v27 + 584);
  v63 = *(_QWORD *)(v62 + 56);
  v64 = *(_QWORD *)(v27 + 592);
  v65 = *(_QWORD *)(v64 + 56);
  v246 = *(int *)(v62 + 16);
  v241 = *(int *)(v64 + 16);
  v66 = *(_DWORD *)v4;
  if (*(_DWORD *)v4 >= *(_DWORD *)(v4 + 4))
    v66 = *(_DWORD *)(v4 + 4);
  if (v66 <= 719)
    v67 = 45;
  else
    v67 = 75;
  v231 = v67 * *(_DWORD *)(v4 + 1012) / 100;
  v68 = *(_DWORD **)v52;
  v258 = (timeval)0;
  v259 = 0u;
  v260 = 0u;
  v261 = 0u;
  v262 = 0u;
  v263 = 0u;
  v264 = 0u;
  v265 = 0u;
  v266 = 0u;
  v267 = 0u;
  v268 = 0u;
  v269 = 0u;
  v270 = 0u;
  v271 = 0u;
  v272 = 0u;
  v273 = 0u;
  v274 = 0u;
  v275 = 0u;
  v276 = 0u;
  v277 = 0u;
  v278 = 0u;
  v279 = 0u;
  v280 = 0u;
  v281 = 0u;
  v282 = 0u;
  v283 = 0;
  v69 = *(_DWORD *)(v4 + 1016);
  if (v69 < 1 || (v70 = *(_DWORD *)(v4 + 1024), v70 < 1))
  {
    v120 = 0;
    goto LABEL_124;
  }
  v238 = 0;
  v71 = 2 * v241;
  v72 = 2 * v246;
  do
  {
    if (v70 >= 1)
    {
      v74 = 0;
      while (1)
      {
        if (*v35)
        {
          v76 = 2 * v63;
          if (*(_DWORD *)v27 == 10)
          {
            v92 = (int16x8_t *)(2 * v65 + 16);
            v93 = (int16x8_t *)(v76 + 16);
            v94 = 0uLL;
            v95 = -16;
            v96 = 0uLL;
            v97 = 0uLL;
            do
            {
              v98 = vsubq_s16(v93[-1], v92[-1]);
              v99 = vpadalq_s16(v97, v98);
              v100 = vmlal_s16(v94, *(int16x4_t *)v98.i8, *(int16x4_t *)v98.i8);
              v101 = vmlal_high_s16(v96, v98, v98);
              v102 = vsubq_s16(*v93, *v92);
              v97 = vpadalq_s16(v99, v102);
              v94 = vmlal_s16(v100, *(int16x4_t *)v102.i8, *(int16x4_t *)v102.i8);
              v96 = vmlal_high_s16(v101, v102, v102);
              v92 = (int16x8_t *)((char *)v92 + v71);
              v93 = (int16x8_t *)((char *)v93 + v72);
              v89 = __CFADD__(v95++, 1);
            }
            while (!v89);
            v103 = vaddlvq_u32((uint32x4_t)vaddq_s32(v96, v94));
            v104 = vaddvq_s32(v97) + 2;
            *v68 = (v103 + 8) >> 4;
            v68[1] = (unint64_t)v104 >> 2;
            v75 = ((v103 + 8) >> 4)
                - ((unint64_t)((int)(v104 >> 2) * (uint64_t)(int)(v104 >> 2)) >> 8);
            if (v75 < 0)
            {
LABEL_89:
              LOWORD(v75) = 0;
              v68[2] = 0;
              goto LABEL_90;
            }
            v68[2] = v75;
            if (v75 >= 0x3E8)
              goto LABEL_107;
          }
          else
          {
            v77 = 2 * v65;
            if (*(_DWORD *)v27 == 8)
            {
              v78 = (int16x8_t *)(v77 + 16);
              v79 = (int16x8_t *)(v76 + 16);
              v80 = 0uLL;
              v81 = -16;
              v82 = 0uLL;
              v83 = 0uLL;
              do
              {
                v84 = vsubq_s16(v79[-1], v78[-1]);
                v85 = vpadalq_s16(v83, v84);
                v86 = vmlal_s16(v80, *(int16x4_t *)v84.i8, *(int16x4_t *)v84.i8);
                v87 = vmlal_high_s16(v82, v84, v84);
                v88 = vsubq_s16(*v79, *v78);
                v83 = vpadalq_s16(v85, v88);
                v80 = vmlal_s16(v86, *(int16x4_t *)v88.i8, *(int16x4_t *)v88.i8);
                v82 = vmlal_high_s16(v87, v88, v88);
                v78 = (int16x8_t *)((char *)v78 + v71);
                v79 = (int16x8_t *)((char *)v79 + v72);
                v89 = __CFADD__(v81++, 1);
              }
              while (!v89);
              v90 = vaddvq_s32(v83);
              v68[1] = v90;
              v91 = vaddlvq_u32((uint32x4_t)vaddq_s32(v82, v80));
              *v68 = v91;
              LODWORD(v75) = v91 - ((unint64_t)(v90 * (uint64_t)v90) >> 8);
              v68[2] = v75;
              if (v75 >= 0x3E8)
              {
LABEL_107:
                ++v283;
                goto LABEL_91;
              }
            }
            else
            {
              v105 = (int16x8_t *)(v77 + 16);
              v106 = (int16x8_t *)(v76 + 16);
              v107 = 0uLL;
              v108 = -16;
              v109 = 0uLL;
              v110 = 0uLL;
              do
              {
                v111 = vsubq_s16(v106[-1], v105[-1]);
                v112 = vpadalq_s16(v110, v111);
                v113 = vmlal_s16(v107, *(int16x4_t *)v111.i8, *(int16x4_t *)v111.i8);
                v114 = vmlal_high_s16(v109, v111, v111);
                v115 = vsubq_s16(*v106, *v105);
                v110 = vpadalq_s16(v112, v115);
                v107 = vmlal_s16(v113, *(int16x4_t *)v115.i8, *(int16x4_t *)v115.i8);
                v109 = vmlal_high_s16(v114, v115, v115);
                v105 = (int16x8_t *)((char *)v105 + v71);
                v106 = (int16x8_t *)((char *)v106 + v72);
                v89 = __CFADD__(v108++, 1);
              }
              while (!v89);
              v116 = vaddlvq_u32((uint32x4_t)vaddq_s32(v109, v107));
              v117 = vaddvq_s32(v110) + 8;
              *v68 = (v116 + 128) >> 8;
              v68[1] = (unint64_t)v117 >> 4;
              v75 = ((v116 + 128) >> 8)
                  - ((unint64_t)((int)(v117 >> 4) * (uint64_t)(int)(v117 >> 4)) >> 8);
              if (v75 < 0)
                goto LABEL_89;
              v68[2] = v75;
              if (v75 >= 0x3E8)
                goto LABEL_107;
            }
          }
        }
        else
        {
          vpx_get16x16var(v63, v246, v65, v241, v68, v68 + 1);
          v35 = v253;
          v27 = v3;
          LODWORD(v75) = *v68 - ((unint64_t)((int)v68[1] * (uint64_t)(int)v68[1]) >> 8);
          v68[2] = v75;
          if (v75 >= 0x3E8)
            goto LABEL_107;
        }
LABEL_90:
        ++*((_DWORD *)&v258.tv_sec + (unsigned __int16)v75 / 0xAu);
LABEL_91:
        v63 += 16;
        v65 += 16;
        v68 += 3;
        ++v74;
        v70 = *(_DWORD *)(v4 + 1024);
        if (v74 >= v70)
        {
          v69 = *(_DWORD *)(v4 + 1016);
          v31 = (_DWORD *)(v1 + 172128);
          break;
        }
      }
    }
    v73 = 16 * v70;
    v63 = v63 - v73 + 16 * v246;
    v65 = v65 - v73 + 16 * v241;
    ++v238;
  }
  while (v238 < v69);
  v120 = v283;
  v33 = v248;
LABEL_124:
  *(_DWORD *)v232 = 0;
  v34 = (unsigned int *)(v1 + 739520);
  v52 = v1 + 835440;
  if (v120 >= v231)
  {
LABEL_128:
    v125 = *(_DWORD *)(v1 + 740004);
  }
  else
  {
    v121 = 0;
    v122 = -1000;
    v123 = &v258;
    while (1)
    {
      tv_sec = v123->tv_sec;
      v123 = (timeval *)((char *)v123 + 4);
      v121 += tv_sec;
      if (v121 > v231)
        break;
      v122 += 10;
      if (!v122)
        goto LABEL_128;
    }
    v125 = 0;
    *(_DWORD *)v232 = v122 + 1010;
  }
  *(_DWORD *)(v1 + 835452) = v125;
  v54 = __OFSUB__(v125, 1);
  v55 = v125 - 1;
  if (v55 < 0 == v54)
  {
LABEL_131:
    v33[288] = 1;
    *(_DWORD *)(v52 + 12) = v55;
  }
LABEL_132:
  v126 = *v34;
  if ((*v34 & 1) != 0 && (*v31 == -1 || v31[1] == -1))
  {
    v126 &= ~1u;
    *v34 = v126;
  }
  if ((v126 & 2) != 0 && (v31[44] == -1 || v31[45] == -1))
  {
    v126 &= ~2u;
    *v34 = v126;
  }
  v127 = v1 + 176472;
  if ((v126 & 4) != 0 && (*v251 == -1 || *(_DWORD *)(v1 + 172484) == -1))
    *v34 = v126 & 0xFFFFFFFB;
  v128 = (_DWORD *)(v1 + 172480);
  if (*(_DWORD *)(v27 + 292) == 5)
  {
    *(_WORD *)v127 = 0;
    *(_BYTE *)(v1 + 176474) = 0;
    if (*(_DWORD *)(v1 + 172976))
    {
      v247 = v1 + 176472;
      v129 = (int *)(v1 + 194312);
      *v257 = 0;
      *(_DWORD *)(v1 + 194480) = 8;
      v130 = *(_DWORD *)(v1 + 173008);
      if (v130 < 1 || (v131 = *(_DWORD *)(v4 + 1028), v131 < 1))
      {
        v168 = 0;
        v167 = 8;
      }
      else
      {
        v132 = 0;
        v254 = 0;
        v133 = (pthread_mutex_t *)(v1 + 194232);
        v233 = v1;
        v243 = v4;
        do
        {
          while (v131 > 0)
          {
            v134 = 0;
            v135 = 0;
            v249 = v254 >> 1;
            v236 = v254 + 8;
            v136 = (v254 + 8) >> 1;
            v239 = 8 * v132;
            v242 = v132;
            v137 = 4;
            do
            {
              v142 = v134;
              v143 = v135 >> 1;
              v144 = v128[131];
              if ((int)v136 >= v144)
                v145 = v144;
              else
                v145 = v136;
              v146 = v135 + 8;
              LODWORD(v147) = (v135 + 8) >> 1;
              v148 = (int)v128[133];
              if ((int)v147 >= (int)v148)
                v147 = v148;
              else
                v147 = v147;
              v149 = 0;
              if ((int)v145 > v249 && (int)v147 > v143)
              {
                v151 = v142 + 1;
                v152 = *((_QWORD *)v257 + 36);
                if ((v142 | 1) <= v147)
                  v153 = v147;
                else
                  v153 = v142 | 1;
                v154 = v153 - v142;
                v155 = v153 & 3;
                if ((int)v148 >= v137)
                  v156 = v137;
                else
                  v156 = v148;
                if (v151 <= v156)
                  v151 = v156;
                v157 = v151 - v142 - (v151 & 3);
                v158 = v152 + 8 * (v142 + (int)v242 * (uint64_t)(int)v148) + 16;
                v159 = 8 * v148;
                v160 = v152 + v239 * v148;
                v161 = v242;
                do
                {
                  if (v154 >= 4)
                  {
                    v163 = 0uLL;
                    v164 = (int64x2_t)(unint64_t)v149;
                    v165 = (int64x2_t *)v158;
                    v166 = v157;
                    do
                    {
                      v164 = vaddq_s64(v165[-1], v164);
                      v163 = vaddq_s64(*v165, v163);
                      v165 += 2;
                      v166 -= 4;
                    }
                    while (v166);
                    v149 = vaddvq_s64(vaddq_s64(v163, v164));
                    v162 = v154 - v155 + v142;
                    if (!v155)
                      goto LABEL_172;
                  }
                  else
                  {
                    v162 = v142;
                  }
                  do
                    v149 += *(_QWORD *)(v160 + 8 * v162++);
                  while (v162 < v147);
LABEL_172:
                  ++v161;
                  v158 += v159;
                  v160 += v159;
                }
                while (v161 < v145);
              }
              v138 = v149 / (((int)v147 - v143) * ((int)v145 - v249));
              pthread_mutex_lock(v133);
              v139 = *(_QWORD *)(v247 + 17832);
              v140 = *v257;
              *v257 = v140 + 1;
              v141 = v139 + 16 * v140;
              *(long double *)v141 = log((double)v138 + 1.0) / 0.693147181;
              *(_DWORD *)(v141 + 8) = v135 + v257[1] * v254;
              pthread_mutex_unlock(v133);
              v131 = *(_DWORD *)(v243 + 1028);
              v134 = v142 + 4;
              v137 += 4;
              v135 += 8;
              v128 = v251;
            }
            while (v146 < v131);
            v130 = v251[132];
            v1 = v233;
            v132 = v242 + 4;
            v254 += 8;
            if (v236 >= v130)
              goto LABEL_181;
          }
          v132 += 4;
          v254 += 8;
        }
        while (v254 < v130);
LABEL_181:
        v129 = v257;
        v167 = v257[42];
        v168 = *v257;
      }
      v169 = *(void **)(v247 + 17832);
      v170 = v168;
      qsort(v169, v168, 0x10uLL, (int (__cdecl *)(const void *, const void *))compare_kmeans_data);
      v177 = v167;
      v178 = v167;
      if (v167 <= 0)
      {
        v182 = v170;
        v183 = (double *)(v129 + 2);
      }
      else
      {
        v179 = v170;
        v180 = v129 + 2;
        v181 = v167;
        v182 = v170;
        v183 = (double *)(v129 + 2);
        do
        {
          *v180++ = *((_QWORD *)v169 + 2 * (v179 / (2 * v167)));
          v179 += 2 * v170;
          --v181;
        }
        while (v181);
      }
      v184 = 0;
      v185 = (double *)(v129 + 18);
      v186 = (v167 - 1);
      v187 = v186;
      v188 = (int)v186;
      v189 = v178 - 2;
      v190 = 0.5;
      v191 = 0uLL;
      v192 = v182;
      v127 = v247;
      do
      {
        while (1)
        {
          if (v178 > 1)
          {
            v171 = *v183;
            v193 = (v178 - 1);
            v194 = v185;
            do
            {
              v172 = *(v194 - 7);
              *v194++ = (v171 + v172) * 0.5;
              v171 = v172;
              --v193;
            }
            while (v193);
          }
          v185[(int)v186] = 1.79769313e308;
          v258 = (timeval)0;
          v259 = 0uLL;
          v260 = 0uLL;
          v261 = 0uLL;
          memset(v284, 0, sizeof(v284));
          if (v182 >= 1)
          {
            v195 = 0;
            v196 = 0;
            do
            {
              v198 = *((double *)v169 + 2 * v195);
              v199 = v196 << 32;
              v200 = v189 + 1 - (int)v196;
              v201 = (double *)(v1 + 194384 + 8 * (int)v196);
              do
              {
                if (v198 < *v201)
                {
                  v197 = v199 >> 32;
                  goto LABEL_196;
                }
                v199 += 0x100000000;
                v196 = (v196 + 1);
                ++v201;
                --v200;
              }
              while (v200);
              v197 = (int)v186;
              v196 = (v178 - 1);
LABEL_196:
              v172 = *((double *)&v258.tv_sec + v197);
              v171 = v198 + v172;
              *((double *)&v258.tv_sec + v197) = v171;
              ++*((_DWORD *)v284 + v197);
              ++v195;
            }
            while (v195 != v182);
          }
          if (v178 >= 1)
            break;
          if (++v184 == 10)
            goto LABEL_211;
        }
        v202 = &v258;
        v203 = (int *)v284;
        v204 = v177;
        v205 = v183;
        do
        {
          v206 = *v203;
          if (*v203 >= 1)
          {
            v172 = (double)v206;
            v171 = *(double *)&v202->tv_sec / (double)v206;
            *v205 = v171;
          }
          v202->tv_sec = 0;
          v202 = (timeval *)((char *)v202 + 8);
          *v203++ = 0;
          ++v205;
          --v204;
        }
        while (v204);
        ++v184;
      }
      while (v184 != 10);
      v252 = v182;
      v255 = v183;
      v244 = v178;
      v207 = v185;
      v250 = v178 - 2;
      bzero((void *)(v1 + 194448), 4 * v177);
      v189 = v250;
      v182 = v252;
      v185 = v207;
      v127 = v247;
      if (v244 > 1)
      {
        *(double *)&v191 = *v255;
        v190 = 0.5;
        v208 = v185;
        do
        {
          v171 = *(v208 - 7);
          *v208++ = (*(double *)&v191 + v171) * 0.5;
          *(double *)&v191 = v171;
          --v186;
        }
        while (v186);
      }
LABEL_211:
      v185[v188] = 1.79769313e308;
      if (v182 >= 1)
      {
        v209 = 0;
        v210 = 0;
        do
        {
          v190 = *((double *)v169 + 2 * v209);
          v212 = v210 << 32;
          v213 = v189 + 1 - (int)v210;
          v214 = (_QWORD *)(v1 + 194384 + 8 * (int)v210);
          do
          {
            *(_QWORD *)&v191 = *v214;
            if (v190 < *(double *)v214)
            {
              v211 = v212 >> 32;
              goto LABEL_214;
            }
            v212 += 0x100000000;
            v210 = (v210 + 1);
            ++v214;
            --v213;
          }
          while (v213);
          v211 = v188;
          v210 = v187;
LABEL_214:
          *((_DWORD *)v169 + 4 * v209 + 3) = v210;
          ++*(_DWORD *)(v1 + 194448 + 4 * v211);
          ++v209;
        }
        while (v209 != v192);
      }
      vp9_perceptual_aq_mode_setup((_DWORD *)v1, v127, v190, *(int16x4_t *)&v191, v171, v172, v173, v174, v175, v176);
    }
  }
  v258 = (timeval)0;
  v259 = 0u;
  gettimeofday(&v258, 0);
  if (*(_DWORD *)(v232 + 14888))
  {
    *(_QWORD *)(v232 + 14496) = vp9_row_mt_sync_read;
    *(_QWORD *)(v232 + 14504) = vp9_row_mt_sync_write;
    vp9_encode_tiles_row_mt((_DWORD *)v1);
  }
  else
  {
    *(_QWORD *)(v232 + 14496) = vp9_row_mt_sync_read_dummy;
    *(_QWORD *)(v232 + 14504) = vp9_row_mt_sync_write_dummy;
    v215 = *(_DWORD *)(v127 + 13876);
    v216 = *(_DWORD *)(v127 + 13456);
    v217 = v127;
    v218 = 1 << v216;
    if (v215 >= 1 << v216)
      v215 = 1 << v216;
    if (v215 < 2)
    {
      v219 = v217;
      v220 = *(_DWORD *)(v217 + 13460);
      vp9_init_tile_data(v1);
      if (v220 != 31 && v216 != 31)
      {
        v221 = 0;
        v222 = 1 << v220;
        if (v218 <= 1)
          v218 = 1;
        if (v222 <= 1)
          v222 = 1;
        v256 = v222;
        do
        {
          for (i = 0; i != v218; ++i)
          {
            v224 = (unsigned int *)(*((_QWORD *)v257 + 22) + 3720 * ((v221 << *(_DWORD *)(v219 + 13456)) + i));
            v225 = *v224;
            for (j = v224[1]; (int)v225 < j; v225 = (v225 + 8))
              vp9_encode_sb_row(v1, v14, v221, i, v225);
          }
          ++v221;
        }
        while (v221 != v256);
      }
    }
    else
    {
      vp9_encode_tiles_mt((_DWORD *)v1);
    }
  }
  result = gettimeofday((timeval *)&v259, 0);
  v228 = DWORD2(v259) - v258.tv_usec + 1000000;
  if (SDWORD2(v259) >= v258.tv_usec)
    v228 = DWORD2(v259) - v258.tv_usec;
  *(_QWORD *)(v234 + 1800) += v228 + 1000000 * (v259 - v258.tv_sec + ((DWORD2(v259) - v258.tv_usec) >> 31));
  v229 = *(_DWORD *)(v234 + 84);
  if (v229)
  {
    v230 = vadd_s32(vadd_s32(*(int32x2_t *)(v235[4005] + 12504), *(int32x2_t *)(v235[4005] + 12496)), vadd_s32(*(int32x2_t *)(v235[4005] + 12512), *(int32x2_t *)(v235[4005] + 12520)));
    if (v230.i32[1] <= (4 * v230.i32[0]))
    {
      v229 = 0;
    }
    else
    {
      v229 = v128[123];
      if (v229)
        v229 = v128[124] != 0;
    }
  }
  *(_DWORD *)(v234 + 88) = v229;
  return result;
}

uint64_t set_segment_index(uint64_t a1, uint64_t a2, int a3, int a4, int a5, double a6, double a7, double a8, double a9, int8x16_t a10)
{
  uint64_t v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v19;
  uint64_t v20;
  signed int v21;
  int v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int32x4_t v29;
  uint64_t v30;
  uint8x16_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  uint16x8_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint16x8_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  uint64_t v48;
  uint8x16_t v49;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint64_t v54;
  uint8x16_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint16x8_t v59;
  uint64_t v60;
  uint8x16_t v61;
  uint16x8_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  uint64_t v66;
  uint8x16_t v67;
  uint16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint64_t v72;
  uint8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint64_t v78;
  uint8x16_t v79;
  uint16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  int32x4_t v84;
  uint64_t v85;
  int v86;
  int32x4_t v87;
  int32x4_t v88;
  int v89;
  uint64_t v90;
  int v91;
  int v93;
  int v94;
  int v95;
  int v97;
  uint64_t v98;
  signed int v99;
  int v100;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  int32x4_t v107;
  uint64_t v108;
  uint8x16_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  uint16x8_t v112;
  int32x4_t v113;
  int32x4_t v114;
  uint16x8_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  int32x4_t v119;
  int32x4_t v120;
  int32x4_t v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  int32x4_t v125;
  uint64_t v126;
  uint8x16_t v127;
  uint16x8_t v128;
  uint16x8_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  uint64_t v132;
  uint8x16_t v133;
  uint16x8_t v134;
  uint16x8_t v135;
  uint16x8_t v136;
  uint16x8_t v137;
  uint64_t v138;
  uint8x16_t v139;
  uint16x8_t v140;
  uint16x8_t v141;
  uint16x8_t v142;
  uint16x8_t v143;
  uint64_t v144;
  uint8x16_t v145;
  uint16x8_t v146;
  uint16x8_t v147;
  uint16x8_t v148;
  uint16x8_t v149;
  uint64_t v150;
  uint8x16_t v151;
  uint16x8_t v152;
  uint16x8_t v153;
  uint16x8_t v154;
  uint16x8_t v155;
  uint64_t v156;
  uint8x16_t v157;
  uint16x8_t v158;
  uint16x8_t v159;
  uint16x8_t v160;
  uint16x8_t v161;
  int32x4_t v162;
  uint64_t v163;
  int v164;
  int32x4_t v165;
  int32x4_t v166;
  int v167;
  uint64_t v168;
  int v169;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  int32x4_t v176;
  uint64_t v177;
  uint8x16_t v178;
  uint16x8_t v179;
  uint16x8_t v180;
  uint16x8_t v181;
  int32x4_t v182;
  int32x4_t v183;
  uint16x8_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int32x4_t v189;
  int32x4_t v190;
  int32x4_t v191;
  int32x4_t v192;
  int32x4_t v193;
  int32x4_t v194;
  uint64_t v195;
  uint8x16_t v196;
  uint16x8_t v197;
  uint16x8_t v198;
  uint16x8_t v199;
  uint16x8_t v200;
  uint64_t v201;
  uint8x16_t v202;
  uint16x8_t v203;
  uint16x8_t v204;
  uint16x8_t v205;
  uint16x8_t v206;
  uint64_t v207;
  uint8x16_t v208;
  uint16x8_t v209;
  uint16x8_t v210;
  uint16x8_t v211;
  uint16x8_t v212;
  uint64_t v213;
  uint8x16_t v214;
  uint16x8_t v215;
  uint16x8_t v216;
  uint16x8_t v217;
  uint16x8_t v218;
  uint64_t v219;
  uint8x16_t v220;
  uint16x8_t v221;
  uint16x8_t v222;
  uint16x8_t v223;
  uint16x8_t v224;
  uint64_t v225;
  uint8x16_t v226;
  uint16x8_t v227;
  uint16x8_t v228;
  uint16x8_t v229;
  uint16x8_t v230;
  int32x4_t v231;
  uint64_t v232;
  int v233;
  int32x4_t v234;
  int32x4_t v235;

  v10 = **(_QWORD **)(a2 + 25360);
  v11 = *(_DWORD *)(a1 + 190148);
  if (*(_BYTE *)(a1 + 176473))
    v12 = (uint64_t *)(a1 + 740216);
  else
    v12 = (uint64_t *)(a1 + 173232);
  v13 = *v12;
  *(_BYTE *)(v10 + 4) = 0;
  if (!*(_BYTE *)(a1 + 176472))
    return a1;
  v14 = a1 + 173008;
  if (v11 == 7)
  {
    v89 = *(_DWORD *)(a1 + 173016);
    LODWORD(v90) = v89 - a4;
    if (v89 - a4 >= num_8x8_blocks_wide_lookup[a5])
      v90 = num_8x8_blocks_wide_lookup[a5];
    else
      v90 = v90;
    v91 = *(_DWORD *)v14 - a3;
    if (v91 >= num_8x8_blocks_high_lookup[a5])
      v91 = num_8x8_blocks_high_lookup[a5];
    if (v91 < 1 || (int)v90 < 1)
      goto LABEL_56;
    v167 = 0;
    v168 = v90 & 0xFFFFFFE0;
    v21 = 8;
    v169 = a4 + v89 * a3;
    while (v90 >= 8)
    {
      if (a4 + v89 * a3 + v89 * v167 + (int)v90 - 1 < a4 + v89 * a3 + v89 * v167
        || (unint64_t)(v90 - 1) >> 32 != 0)
      {
        break;
      }
      if (v90 >= 0x20)
      {
        v175 = a4 + (v167 + a3) * v89;
        v176 = vdupq_n_s32(v21);
        v177 = v13 + v175;
        v178 = *(uint8x16_t *)(v177 + 16);
        v179 = vmovl_u8(*(uint8x8_t *)v177);
        v180 = vmovl_high_u8(*(uint8x16_t *)v177);
        v181 = vmovl_u8(*(uint8x8_t *)v178.i8);
        v182 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v181.i8);
        v183 = (int32x4_t)vmovl_high_u16(v181);
        v184 = vmovl_high_u8(v178);
        v185 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v184.i8);
        v186 = (int32x4_t)vmovl_high_u16(v184);
        v187 = vminq_s32(v176, (int32x4_t)vmovl_high_u16(v180));
        v188 = vminq_s32(v176, (int32x4_t)vmovl_u16(*(uint16x4_t *)v180.i8));
        v189 = vminq_s32(v176, (int32x4_t)vmovl_high_u16(v179));
        v190 = vminq_s32(v176, (int32x4_t)vmovl_u16(*(uint16x4_t *)v179.i8));
        v191 = vminq_s32(v176, v186);
        v192 = vminq_s32(v176, v185);
        v193 = vminq_s32(v176, v183);
        v194 = vminq_s32(v176, v182);
        if (v168 != 32)
        {
          v195 = v13 + v175 + 32;
          v196 = *(uint8x16_t *)(v195 + 16);
          v197 = vmovl_u8(*(uint8x8_t *)v195);
          v198 = vmovl_high_u8(*(uint8x16_t *)v195);
          v199 = vmovl_u8(*(uint8x8_t *)v196.i8);
          v200 = vmovl_high_u8(v196);
          v187 = vminq_s32(v187, (int32x4_t)vmovl_high_u16(v198));
          v188 = vminq_s32(v188, (int32x4_t)vmovl_u16(*(uint16x4_t *)v198.i8));
          v189 = vminq_s32(v189, (int32x4_t)vmovl_high_u16(v197));
          v190 = vminq_s32(v190, (int32x4_t)vmovl_u16(*(uint16x4_t *)v197.i8));
          v191 = vminq_s32(v191, (int32x4_t)vmovl_high_u16(v200));
          v192 = vminq_s32(v192, (int32x4_t)vmovl_u16(*(uint16x4_t *)v200.i8));
          v193 = vminq_s32(v193, (int32x4_t)vmovl_high_u16(v199));
          v194 = vminq_s32(v194, (int32x4_t)vmovl_u16(*(uint16x4_t *)v199.i8));
          if (v168 != 64)
          {
            v201 = v13 + v175 + 64;
            v202 = *(uint8x16_t *)(v201 + 16);
            v203 = vmovl_u8(*(uint8x8_t *)v201);
            v204 = vmovl_high_u8(*(uint8x16_t *)v201);
            v205 = vmovl_u8(*(uint8x8_t *)v202.i8);
            v206 = vmovl_high_u8(v202);
            v187 = vminq_s32(v187, (int32x4_t)vmovl_high_u16(v204));
            v188 = vminq_s32(v188, (int32x4_t)vmovl_u16(*(uint16x4_t *)v204.i8));
            v189 = vminq_s32(v189, (int32x4_t)vmovl_high_u16(v203));
            v190 = vminq_s32(v190, (int32x4_t)vmovl_u16(*(uint16x4_t *)v203.i8));
            v191 = vminq_s32(v191, (int32x4_t)vmovl_high_u16(v206));
            v192 = vminq_s32(v192, (int32x4_t)vmovl_u16(*(uint16x4_t *)v206.i8));
            v193 = vminq_s32(v193, (int32x4_t)vmovl_high_u16(v205));
            v194 = vminq_s32(v194, (int32x4_t)vmovl_u16(*(uint16x4_t *)v205.i8));
            if (v168 != 96)
            {
              v207 = v13 + v175 + 96;
              v208 = *(uint8x16_t *)(v207 + 16);
              v209 = vmovl_u8(*(uint8x8_t *)v207);
              v210 = vmovl_high_u8(*(uint8x16_t *)v207);
              v211 = vmovl_u8(*(uint8x8_t *)v208.i8);
              v212 = vmovl_high_u8(v208);
              v187 = vminq_s32(v187, (int32x4_t)vmovl_high_u16(v210));
              v188 = vminq_s32(v188, (int32x4_t)vmovl_u16(*(uint16x4_t *)v210.i8));
              v189 = vminq_s32(v189, (int32x4_t)vmovl_high_u16(v209));
              v190 = vminq_s32(v190, (int32x4_t)vmovl_u16(*(uint16x4_t *)v209.i8));
              v191 = vminq_s32(v191, (int32x4_t)vmovl_high_u16(v212));
              v192 = vminq_s32(v192, (int32x4_t)vmovl_u16(*(uint16x4_t *)v212.i8));
              v193 = vminq_s32(v193, (int32x4_t)vmovl_high_u16(v211));
              v194 = vminq_s32(v194, (int32x4_t)vmovl_u16(*(uint16x4_t *)v211.i8));
              if (v168 != 128)
              {
                v213 = v13 + v175 + 128;
                v214 = *(uint8x16_t *)(v213 + 16);
                v215 = vmovl_u8(*(uint8x8_t *)v213);
                v216 = vmovl_high_u8(*(uint8x16_t *)v213);
                v217 = vmovl_u8(*(uint8x8_t *)v214.i8);
                v218 = vmovl_high_u8(v214);
                v187 = vminq_s32(v187, (int32x4_t)vmovl_high_u16(v216));
                v188 = vminq_s32(v188, (int32x4_t)vmovl_u16(*(uint16x4_t *)v216.i8));
                v189 = vminq_s32(v189, (int32x4_t)vmovl_high_u16(v215));
                v190 = vminq_s32(v190, (int32x4_t)vmovl_u16(*(uint16x4_t *)v215.i8));
                v191 = vminq_s32(v191, (int32x4_t)vmovl_high_u16(v218));
                v192 = vminq_s32(v192, (int32x4_t)vmovl_u16(*(uint16x4_t *)v218.i8));
                v193 = vminq_s32(v193, (int32x4_t)vmovl_high_u16(v217));
                v194 = vminq_s32(v194, (int32x4_t)vmovl_u16(*(uint16x4_t *)v217.i8));
                if (v168 != 160)
                {
                  v219 = v13 + v175 + 160;
                  v220 = *(uint8x16_t *)(v219 + 16);
                  v221 = vmovl_u8(*(uint8x8_t *)v219);
                  v222 = vmovl_high_u8(*(uint8x16_t *)v219);
                  v223 = vmovl_u8(*(uint8x8_t *)v220.i8);
                  v224 = vmovl_high_u8(v220);
                  v187 = vminq_s32(v187, (int32x4_t)vmovl_high_u16(v222));
                  v188 = vminq_s32(v188, (int32x4_t)vmovl_u16(*(uint16x4_t *)v222.i8));
                  v189 = vminq_s32(v189, (int32x4_t)vmovl_high_u16(v221));
                  v190 = vminq_s32(v190, (int32x4_t)vmovl_u16(*(uint16x4_t *)v221.i8));
                  v191 = vminq_s32(v191, (int32x4_t)vmovl_high_u16(v224));
                  v192 = vminq_s32(v192, (int32x4_t)vmovl_u16(*(uint16x4_t *)v224.i8));
                  v193 = vminq_s32(v193, (int32x4_t)vmovl_high_u16(v223));
                  v194 = vminq_s32(v194, (int32x4_t)vmovl_u16(*(uint16x4_t *)v223.i8));
                  if (v168 != 192)
                  {
                    v225 = v13 + v175 + 192;
                    v226 = *(uint8x16_t *)(v225 + 16);
                    v227 = vmovl_u8(*(uint8x8_t *)v225);
                    v228 = vmovl_high_u8(*(uint8x16_t *)v225);
                    v229 = vmovl_u8(*(uint8x8_t *)v226.i8);
                    v230 = vmovl_high_u8(v226);
                    v187 = vminq_s32(v187, (int32x4_t)vmovl_high_u16(v228));
                    v188 = vminq_s32(v188, (int32x4_t)vmovl_u16(*(uint16x4_t *)v228.i8));
                    v189 = vminq_s32(v189, (int32x4_t)vmovl_high_u16(v227));
                    v190 = vminq_s32(v190, (int32x4_t)vmovl_u16(*(uint16x4_t *)v227.i8));
                    v191 = vminq_s32(v191, (int32x4_t)vmovl_high_u16(v230));
                    v192 = vminq_s32(v192, (int32x4_t)vmovl_u16(*(uint16x4_t *)v230.i8));
                    v193 = vminq_s32(v193, (int32x4_t)vmovl_high_u16(v229));
                    v194 = vminq_s32(v194, (int32x4_t)vmovl_u16(*(uint16x4_t *)v229.i8));
                  }
                }
              }
            }
          }
        }
        a10 = (int8x16_t)vminq_s32(v190, v194);
        v21 = vminvq_s32(vminq_s32(vminq_s32((int32x4_t)a10, vminq_s32(v188, v192)), vminq_s32(vminq_s32(v189, v193), vminq_s32(v187, v191))));
        if (v168 == v90)
          goto LABEL_101;
        v174 = v90 & 0xFFFFFFE0;
        v171 = v174;
        if ((v90 & 0x18) == 0)
          goto LABEL_108;
      }
      else
      {
        v174 = 0;
      }
      v231 = vdupq_n_s32(v21);
      v232 = v174 - (v90 & 0xFFFFFFF8);
      v233 = v169 + v174;
      v234 = v231;
      do
      {
        a10.i64[0] = *(_QWORD *)(v13 + v233);
        v235 = (int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_208F04F50);
        a10 = vqtbl1q_s8(a10, (int8x16_t)xmmword_208F04F40);
        v234 = vminq_s32(v234, (int32x4_t)a10);
        v231 = vminq_s32(v231, v235);
        v233 += 8;
        v232 += 8;
      }
      while (v232);
      v21 = vminvq_s32(vminq_s32(v231, v234));
      v171 = v90 & 0xFFFFFFF8;
      if (v171 != v90)
        goto LABEL_108;
LABEL_101:
      ++v167;
      v169 += v89;
      if (v167 == v91)
        goto LABEL_58;
    }
    v171 = 0;
LABEL_108:
    v172 = v90 - v171;
    v173 = v169 + v171;
    do
    {
      if (v21 >= *(unsigned __int8 *)(v13 + v173))
        v21 = *(unsigned __int8 *)(v13 + v173);
      ++v173;
      --v172;
    }
    while (v172);
    goto LABEL_101;
  }
  if (v11 == 5)
  {
    v21 = *(_DWORD *)(a2 + 25644);
    goto LABEL_58;
  }
  if (v11 != 3)
    goto LABEL_59;
  v15 = *(_DWORD *)(a1 + 173016);
  LODWORD(v16) = v15 - a4;
  if (v15 - a4 >= num_8x8_blocks_wide_lookup[a5])
    v16 = num_8x8_blocks_wide_lookup[a5];
  else
    v16 = v16;
  v17 = *(_DWORD *)v14 - a3;
  if (v17 >= num_8x8_blocks_high_lookup[a5])
    v17 = num_8x8_blocks_high_lookup[a5];
  if (v17 >= 1 && (int)v16 >= 1)
  {
    v19 = 0;
    v20 = v16 & 0xFFFFFFE0;
    v21 = 8;
    v22 = a4 + v15 * a3;
    while (v16 >= 8)
    {
      if (a4 + v15 * a3 + v15 * v19 + (int)v16 - 1 < a4 + v15 * a3 + v15 * v19
        || (unint64_t)(v16 - 1) >> 32 != 0)
      {
        break;
      }
      if (v16 >= 0x20)
      {
        v28 = a4 + (v19 + a3) * v15;
        v29 = vdupq_n_s32(v21);
        v30 = v13 + v28;
        v31 = *(uint8x16_t *)(v30 + 16);
        v32 = vmovl_u8(*(uint8x8_t *)v30);
        v33 = vmovl_high_u8(*(uint8x16_t *)v30);
        v34 = vmovl_u8(*(uint8x8_t *)v31.i8);
        v35 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v34.i8);
        v36 = (int32x4_t)vmovl_high_u16(v34);
        v37 = vmovl_high_u8(v31);
        v38 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v37.i8);
        v39 = (int32x4_t)vmovl_high_u16(v37);
        v40 = vminq_s32(v29, (int32x4_t)vmovl_high_u16(v33));
        v41 = vminq_s32(v29, (int32x4_t)vmovl_u16(*(uint16x4_t *)v33.i8));
        v42 = vminq_s32(v29, (int32x4_t)vmovl_high_u16(v32));
        v43 = vminq_s32(v29, (int32x4_t)vmovl_u16(*(uint16x4_t *)v32.i8));
        v44 = vminq_s32(v29, v39);
        v45 = vminq_s32(v29, v38);
        v46 = vminq_s32(v29, v36);
        v47 = vminq_s32(v29, v35);
        if (v20 != 32)
        {
          v48 = v13 + v28 + 32;
          v49 = *(uint8x16_t *)(v48 + 16);
          v50 = vmovl_u8(*(uint8x8_t *)v48);
          v51 = vmovl_high_u8(*(uint8x16_t *)v48);
          v52 = vmovl_u8(*(uint8x8_t *)v49.i8);
          v53 = vmovl_high_u8(v49);
          v40 = vminq_s32(v40, (int32x4_t)vmovl_high_u16(v51));
          v41 = vminq_s32(v41, (int32x4_t)vmovl_u16(*(uint16x4_t *)v51.i8));
          v42 = vminq_s32(v42, (int32x4_t)vmovl_high_u16(v50));
          v43 = vminq_s32(v43, (int32x4_t)vmovl_u16(*(uint16x4_t *)v50.i8));
          v44 = vminq_s32(v44, (int32x4_t)vmovl_high_u16(v53));
          v45 = vminq_s32(v45, (int32x4_t)vmovl_u16(*(uint16x4_t *)v53.i8));
          v46 = vminq_s32(v46, (int32x4_t)vmovl_high_u16(v52));
          v47 = vminq_s32(v47, (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8));
          if (v20 != 64)
          {
            v54 = v13 + v28 + 64;
            v55 = *(uint8x16_t *)(v54 + 16);
            v56 = vmovl_u8(*(uint8x8_t *)v54);
            v57 = vmovl_high_u8(*(uint8x16_t *)v54);
            v58 = vmovl_u8(*(uint8x8_t *)v55.i8);
            v59 = vmovl_high_u8(v55);
            v40 = vminq_s32(v40, (int32x4_t)vmovl_high_u16(v57));
            v41 = vminq_s32(v41, (int32x4_t)vmovl_u16(*(uint16x4_t *)v57.i8));
            v42 = vminq_s32(v42, (int32x4_t)vmovl_high_u16(v56));
            v43 = vminq_s32(v43, (int32x4_t)vmovl_u16(*(uint16x4_t *)v56.i8));
            v44 = vminq_s32(v44, (int32x4_t)vmovl_high_u16(v59));
            v45 = vminq_s32(v45, (int32x4_t)vmovl_u16(*(uint16x4_t *)v59.i8));
            v46 = vminq_s32(v46, (int32x4_t)vmovl_high_u16(v58));
            v47 = vminq_s32(v47, (int32x4_t)vmovl_u16(*(uint16x4_t *)v58.i8));
            if (v20 != 96)
            {
              v60 = v13 + v28 + 96;
              v61 = *(uint8x16_t *)(v60 + 16);
              v62 = vmovl_u8(*(uint8x8_t *)v60);
              v63 = vmovl_high_u8(*(uint8x16_t *)v60);
              v64 = vmovl_u8(*(uint8x8_t *)v61.i8);
              v65 = vmovl_high_u8(v61);
              v40 = vminq_s32(v40, (int32x4_t)vmovl_high_u16(v63));
              v41 = vminq_s32(v41, (int32x4_t)vmovl_u16(*(uint16x4_t *)v63.i8));
              v42 = vminq_s32(v42, (int32x4_t)vmovl_high_u16(v62));
              v43 = vminq_s32(v43, (int32x4_t)vmovl_u16(*(uint16x4_t *)v62.i8));
              v44 = vminq_s32(v44, (int32x4_t)vmovl_high_u16(v65));
              v45 = vminq_s32(v45, (int32x4_t)vmovl_u16(*(uint16x4_t *)v65.i8));
              v46 = vminq_s32(v46, (int32x4_t)vmovl_high_u16(v64));
              v47 = vminq_s32(v47, (int32x4_t)vmovl_u16(*(uint16x4_t *)v64.i8));
              if (v20 != 128)
              {
                v66 = v13 + v28 + 128;
                v67 = *(uint8x16_t *)(v66 + 16);
                v68 = vmovl_u8(*(uint8x8_t *)v66);
                v69 = vmovl_high_u8(*(uint8x16_t *)v66);
                v70 = vmovl_u8(*(uint8x8_t *)v67.i8);
                v71 = vmovl_high_u8(v67);
                v40 = vminq_s32(v40, (int32x4_t)vmovl_high_u16(v69));
                v41 = vminq_s32(v41, (int32x4_t)vmovl_u16(*(uint16x4_t *)v69.i8));
                v42 = vminq_s32(v42, (int32x4_t)vmovl_high_u16(v68));
                v43 = vminq_s32(v43, (int32x4_t)vmovl_u16(*(uint16x4_t *)v68.i8));
                v44 = vminq_s32(v44, (int32x4_t)vmovl_high_u16(v71));
                v45 = vminq_s32(v45, (int32x4_t)vmovl_u16(*(uint16x4_t *)v71.i8));
                v46 = vminq_s32(v46, (int32x4_t)vmovl_high_u16(v70));
                v47 = vminq_s32(v47, (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.i8));
                if (v20 != 160)
                {
                  v72 = v13 + v28 + 160;
                  v73 = *(uint8x16_t *)(v72 + 16);
                  v74 = vmovl_u8(*(uint8x8_t *)v72);
                  v75 = vmovl_high_u8(*(uint8x16_t *)v72);
                  v76 = vmovl_u8(*(uint8x8_t *)v73.i8);
                  v77 = vmovl_high_u8(v73);
                  v40 = vminq_s32(v40, (int32x4_t)vmovl_high_u16(v75));
                  v41 = vminq_s32(v41, (int32x4_t)vmovl_u16(*(uint16x4_t *)v75.i8));
                  v42 = vminq_s32(v42, (int32x4_t)vmovl_high_u16(v74));
                  v43 = vminq_s32(v43, (int32x4_t)vmovl_u16(*(uint16x4_t *)v74.i8));
                  v44 = vminq_s32(v44, (int32x4_t)vmovl_high_u16(v77));
                  v45 = vminq_s32(v45, (int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8));
                  v46 = vminq_s32(v46, (int32x4_t)vmovl_high_u16(v76));
                  v47 = vminq_s32(v47, (int32x4_t)vmovl_u16(*(uint16x4_t *)v76.i8));
                  if (v20 != 192)
                  {
                    v78 = v13 + v28 + 192;
                    v79 = *(uint8x16_t *)(v78 + 16);
                    v80 = vmovl_u8(*(uint8x8_t *)v78);
                    v81 = vmovl_high_u8(*(uint8x16_t *)v78);
                    v82 = vmovl_u8(*(uint8x8_t *)v79.i8);
                    v83 = vmovl_high_u8(v79);
                    v40 = vminq_s32(v40, (int32x4_t)vmovl_high_u16(v81));
                    v41 = vminq_s32(v41, (int32x4_t)vmovl_u16(*(uint16x4_t *)v81.i8));
                    v42 = vminq_s32(v42, (int32x4_t)vmovl_high_u16(v80));
                    v43 = vminq_s32(v43, (int32x4_t)vmovl_u16(*(uint16x4_t *)v80.i8));
                    v44 = vminq_s32(v44, (int32x4_t)vmovl_high_u16(v83));
                    v45 = vminq_s32(v45, (int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8));
                    v46 = vminq_s32(v46, (int32x4_t)vmovl_high_u16(v82));
                    v47 = vminq_s32(v47, (int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8));
                  }
                }
              }
            }
          }
        }
        a10 = (int8x16_t)vminq_s32(v43, v47);
        v21 = vminvq_s32(vminq_s32(vminq_s32((int32x4_t)a10, vminq_s32(v41, v45)), vminq_s32(vminq_s32(v42, v46), vminq_s32(v40, v44))));
        if (v20 == v16)
          goto LABEL_18;
        v27 = v16 & 0xFFFFFFE0;
        v24 = v27;
        if ((v16 & 0x18) == 0)
          goto LABEL_25;
      }
      else
      {
        v27 = 0;
      }
      v84 = vdupq_n_s32(v21);
      v85 = v27 - (v16 & 0xFFFFFFF8);
      v86 = v22 + v27;
      v87 = v84;
      do
      {
        a10.i64[0] = *(_QWORD *)(v13 + v86);
        v88 = (int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_208F04F50);
        a10 = vqtbl1q_s8(a10, (int8x16_t)xmmword_208F04F40);
        v87 = vminq_s32(v87, (int32x4_t)a10);
        v84 = vminq_s32(v84, v88);
        v86 += 8;
        v85 += 8;
      }
      while (v85);
      v21 = vminvq_s32(vminq_s32(v84, v87));
      v24 = v16 & 0xFFFFFFF8;
      if (v24 != v16)
        goto LABEL_25;
LABEL_18:
      ++v19;
      v22 += v15;
      if (v19 == v17)
        goto LABEL_58;
    }
    v24 = 0;
LABEL_25:
    v25 = v16 - v24;
    v26 = v22 + v24;
    do
    {
      if (v21 >= *(unsigned __int8 *)(v13 + v26))
        v21 = *(unsigned __int8 *)(v13 + v26);
      ++v26;
      --v25;
    }
    while (v25);
    goto LABEL_18;
  }
LABEL_56:
  LOBYTE(v21) = 8;
LABEL_58:
  *(_BYTE *)(v10 + 4) = v21;
LABEL_59:
  if (*(_BYTE *)(a1 + 850440) || *(_DWORD *)(a1 + 740272))
  {
    v93 = *(_DWORD *)v14;
    v94 = *(_DWORD *)(a1 + 173016);
    LODWORD(v14) = v94 - a4;
    if (v94 - a4 >= num_8x8_blocks_wide_lookup[a5])
      v14 = num_8x8_blocks_wide_lookup[a5];
    else
      v14 = v14;
    v95 = v93 - a3;
    if (v93 - a3 >= num_8x8_blocks_high_lookup[a5])
      v95 = num_8x8_blocks_high_lookup[a5];
    if (v95 >= 1 && (int)v14 >= 1)
    {
      v97 = 0;
      v98 = v14 & 0xFFFFFFE0;
      v99 = 8;
      v100 = a4 + v94 * a3;
      while (v14 >= 8)
      {
        if (a4 + v94 * a3 + v94 * v97 + (int)v14 - 1 < a4 + v94 * a3 + v94 * v97
          || (unint64_t)(v14 - 1) >> 32 != 0)
        {
          break;
        }
        if (v14 >= 0x20)
        {
          v106 = a4 + (v97 + a3) * v94;
          v107 = vdupq_n_s32(v99);
          v108 = v13 + v106;
          v109 = *(uint8x16_t *)(v108 + 16);
          v110 = vmovl_u8(*(uint8x8_t *)v108);
          v111 = vmovl_high_u8(*(uint8x16_t *)v108);
          v112 = vmovl_u8(*(uint8x8_t *)v109.i8);
          v113 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v112.i8);
          v114 = (int32x4_t)vmovl_high_u16(v112);
          v115 = vmovl_high_u8(v109);
          v116 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v115.i8);
          v117 = (int32x4_t)vmovl_high_u16(v115);
          v118 = vminq_s32(v107, (int32x4_t)vmovl_high_u16(v111));
          v119 = vminq_s32(v107, (int32x4_t)vmovl_u16(*(uint16x4_t *)v111.i8));
          v120 = vminq_s32(v107, (int32x4_t)vmovl_high_u16(v110));
          v121 = vminq_s32(v107, (int32x4_t)vmovl_u16(*(uint16x4_t *)v110.i8));
          v122 = vminq_s32(v107, v117);
          v123 = vminq_s32(v107, v116);
          v124 = vminq_s32(v107, v114);
          v125 = vminq_s32(v107, v113);
          if (v98 != 32)
          {
            v126 = v13 + v106 + 32;
            v127 = *(uint8x16_t *)(v126 + 16);
            v128 = vmovl_u8(*(uint8x8_t *)v126);
            v129 = vmovl_high_u8(*(uint8x16_t *)v126);
            v130 = vmovl_u8(*(uint8x8_t *)v127.i8);
            v131 = vmovl_high_u8(v127);
            v118 = vminq_s32(v118, (int32x4_t)vmovl_high_u16(v129));
            v119 = vminq_s32(v119, (int32x4_t)vmovl_u16(*(uint16x4_t *)v129.i8));
            v120 = vminq_s32(v120, (int32x4_t)vmovl_high_u16(v128));
            v121 = vminq_s32(v121, (int32x4_t)vmovl_u16(*(uint16x4_t *)v128.i8));
            v122 = vminq_s32(v122, (int32x4_t)vmovl_high_u16(v131));
            v123 = vminq_s32(v123, (int32x4_t)vmovl_u16(*(uint16x4_t *)v131.i8));
            v124 = vminq_s32(v124, (int32x4_t)vmovl_high_u16(v130));
            v125 = vminq_s32(v125, (int32x4_t)vmovl_u16(*(uint16x4_t *)v130.i8));
            if (v98 != 64)
            {
              v132 = v13 + v106 + 64;
              v133 = *(uint8x16_t *)(v132 + 16);
              v134 = vmovl_u8(*(uint8x8_t *)v132);
              v135 = vmovl_high_u8(*(uint8x16_t *)v132);
              v136 = vmovl_u8(*(uint8x8_t *)v133.i8);
              v137 = vmovl_high_u8(v133);
              v118 = vminq_s32(v118, (int32x4_t)vmovl_high_u16(v135));
              v119 = vminq_s32(v119, (int32x4_t)vmovl_u16(*(uint16x4_t *)v135.i8));
              v120 = vminq_s32(v120, (int32x4_t)vmovl_high_u16(v134));
              v121 = vminq_s32(v121, (int32x4_t)vmovl_u16(*(uint16x4_t *)v134.i8));
              v122 = vminq_s32(v122, (int32x4_t)vmovl_high_u16(v137));
              v123 = vminq_s32(v123, (int32x4_t)vmovl_u16(*(uint16x4_t *)v137.i8));
              v124 = vminq_s32(v124, (int32x4_t)vmovl_high_u16(v136));
              v125 = vminq_s32(v125, (int32x4_t)vmovl_u16(*(uint16x4_t *)v136.i8));
              if (v98 != 96)
              {
                v138 = v13 + v106 + 96;
                v139 = *(uint8x16_t *)(v138 + 16);
                v140 = vmovl_u8(*(uint8x8_t *)v138);
                v141 = vmovl_high_u8(*(uint8x16_t *)v138);
                v142 = vmovl_u8(*(uint8x8_t *)v139.i8);
                v143 = vmovl_high_u8(v139);
                v118 = vminq_s32(v118, (int32x4_t)vmovl_high_u16(v141));
                v119 = vminq_s32(v119, (int32x4_t)vmovl_u16(*(uint16x4_t *)v141.i8));
                v120 = vminq_s32(v120, (int32x4_t)vmovl_high_u16(v140));
                v121 = vminq_s32(v121, (int32x4_t)vmovl_u16(*(uint16x4_t *)v140.i8));
                v122 = vminq_s32(v122, (int32x4_t)vmovl_high_u16(v143));
                v123 = vminq_s32(v123, (int32x4_t)vmovl_u16(*(uint16x4_t *)v143.i8));
                v124 = vminq_s32(v124, (int32x4_t)vmovl_high_u16(v142));
                v125 = vminq_s32(v125, (int32x4_t)vmovl_u16(*(uint16x4_t *)v142.i8));
                if (v98 != 128)
                {
                  v144 = v13 + v106 + 128;
                  v145 = *(uint8x16_t *)(v144 + 16);
                  v146 = vmovl_u8(*(uint8x8_t *)v144);
                  v147 = vmovl_high_u8(*(uint8x16_t *)v144);
                  v148 = vmovl_u8(*(uint8x8_t *)v145.i8);
                  v149 = vmovl_high_u8(v145);
                  v118 = vminq_s32(v118, (int32x4_t)vmovl_high_u16(v147));
                  v119 = vminq_s32(v119, (int32x4_t)vmovl_u16(*(uint16x4_t *)v147.i8));
                  v120 = vminq_s32(v120, (int32x4_t)vmovl_high_u16(v146));
                  v121 = vminq_s32(v121, (int32x4_t)vmovl_u16(*(uint16x4_t *)v146.i8));
                  v122 = vminq_s32(v122, (int32x4_t)vmovl_high_u16(v149));
                  v123 = vminq_s32(v123, (int32x4_t)vmovl_u16(*(uint16x4_t *)v149.i8));
                  v124 = vminq_s32(v124, (int32x4_t)vmovl_high_u16(v148));
                  v125 = vminq_s32(v125, (int32x4_t)vmovl_u16(*(uint16x4_t *)v148.i8));
                  if (v98 != 160)
                  {
                    v150 = v13 + v106 + 160;
                    v151 = *(uint8x16_t *)(v150 + 16);
                    v152 = vmovl_u8(*(uint8x8_t *)v150);
                    v153 = vmovl_high_u8(*(uint8x16_t *)v150);
                    v154 = vmovl_u8(*(uint8x8_t *)v151.i8);
                    v155 = vmovl_high_u8(v151);
                    v118 = vminq_s32(v118, (int32x4_t)vmovl_high_u16(v153));
                    v119 = vminq_s32(v119, (int32x4_t)vmovl_u16(*(uint16x4_t *)v153.i8));
                    v120 = vminq_s32(v120, (int32x4_t)vmovl_high_u16(v152));
                    v121 = vminq_s32(v121, (int32x4_t)vmovl_u16(*(uint16x4_t *)v152.i8));
                    v122 = vminq_s32(v122, (int32x4_t)vmovl_high_u16(v155));
                    v123 = vminq_s32(v123, (int32x4_t)vmovl_u16(*(uint16x4_t *)v155.i8));
                    v124 = vminq_s32(v124, (int32x4_t)vmovl_high_u16(v154));
                    v125 = vminq_s32(v125, (int32x4_t)vmovl_u16(*(uint16x4_t *)v154.i8));
                    if (v98 != 192)
                    {
                      v156 = v13 + v106 + 192;
                      v157 = *(uint8x16_t *)(v156 + 16);
                      v158 = vmovl_u8(*(uint8x8_t *)v156);
                      v159 = vmovl_high_u8(*(uint8x16_t *)v156);
                      v160 = vmovl_u8(*(uint8x8_t *)v157.i8);
                      v161 = vmovl_high_u8(v157);
                      v118 = vminq_s32(v118, (int32x4_t)vmovl_high_u16(v159));
                      v119 = vminq_s32(v119, (int32x4_t)vmovl_u16(*(uint16x4_t *)v159.i8));
                      v120 = vminq_s32(v120, (int32x4_t)vmovl_high_u16(v158));
                      v121 = vminq_s32(v121, (int32x4_t)vmovl_u16(*(uint16x4_t *)v158.i8));
                      v122 = vminq_s32(v122, (int32x4_t)vmovl_high_u16(v161));
                      v123 = vminq_s32(v123, (int32x4_t)vmovl_u16(*(uint16x4_t *)v161.i8));
                      v124 = vminq_s32(v124, (int32x4_t)vmovl_high_u16(v160));
                      v125 = vminq_s32(v125, (int32x4_t)vmovl_u16(*(uint16x4_t *)v160.i8));
                    }
                  }
                }
              }
            }
          }
          a10 = (int8x16_t)vminq_s32(v121, v125);
          v99 = vminvq_s32(vminq_s32(vminq_s32((int32x4_t)a10, vminq_s32(v119, v123)), vminq_s32(vminq_s32(v120, v124), vminq_s32(v118, v122))));
          if (v98 == v14)
            goto LABEL_74;
          v105 = v14 & 0xFFFFFFE0;
          v102 = v105;
          if ((v14 & 0x18) == 0)
            goto LABEL_81;
        }
        else
        {
          v105 = 0;
        }
        v162 = vdupq_n_s32(v99);
        v163 = v105 - (v14 & 0xFFFFFFF8);
        v164 = v100 + v105;
        v165 = v162;
        do
        {
          a10.i64[0] = *(_QWORD *)(v13 + v164);
          v166 = (int32x4_t)vqtbl1q_s8(a10, (int8x16_t)xmmword_208F04F50);
          a10 = vqtbl1q_s8(a10, (int8x16_t)xmmword_208F04F40);
          v165 = vminq_s32(v165, (int32x4_t)a10);
          v162 = vminq_s32(v162, v166);
          v164 += 8;
          v163 += 8;
        }
        while (v163);
        v99 = vminvq_s32(vminq_s32(v162, v165));
        v102 = v14 & 0xFFFFFFF8;
        if (v102 != v14)
          goto LABEL_81;
LABEL_74:
        ++v97;
        v100 += v94;
        if (v97 == v95)
          goto LABEL_72;
      }
      v102 = 0;
LABEL_81:
      v103 = v14 - v102;
      v104 = v100 + v102;
      do
      {
        if (v99 >= *(unsigned __int8 *)(v13 + v104))
          v99 = *(unsigned __int8 *)(v13 + v104);
        ++v104;
        --v103;
      }
      while (v103);
      goto LABEL_74;
    }
    LOBYTE(v99) = 8;
LABEL_72:
    *(_BYTE *)(v10 + 4) = v99;
  }
  return vp9_init_plane_quantizers(a1, a2);
}

void choose_partitioning(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  double v23;
  double v24;
  double v25;
  double v26;
  int8x16_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  _BOOL4 v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  int v79;
  uint8x8_t *v80;
  uint8x8_t v81;
  uint8x8_t *v82;
  uint16x8_t v83;
  uint8x8_t *v84;
  uint16x8_t v85;
  uint8x8_t *v86;
  uint64_t *v87;
  uint8x8_t *v88;
  uint16x8_t v89;
  uint8x8_t *v90;
  uint16x8_t v91;
  uint8x8_t *v92;
  unsigned int v93;
  int v94;
  uint64_t v95;
  int16x8_t *v96;
  int16x8_t v97;
  int16x8_t *v98;
  int16x8_t v99;
  int16x8_t *v100;
  int16x8_t v101;
  int16x8_t *v102;
  int16x8_t *v103;
  int16x8_t v104;
  int16x8_t *v105;
  int16x8_t v106;
  int16x8_t *v107;
  int16x8_t v108;
  int16x8_t *v109;
  int v110;
  __int128 *v111;
  uint64_t v112;
  unsigned int v113;
  uint8x8_t *v114;
  uint8x8_t v115;
  uint8x8_t *v116;
  uint16x8_t v117;
  uint8x8_t *v118;
  uint16x8_t v119;
  uint8x8_t *v120;
  uint64_t *v121;
  uint8x8_t *v122;
  uint16x8_t v123;
  uint8x8_t *v124;
  uint16x8_t v125;
  uint8x8_t *v126;
  int v127;
  int v128;
  unsigned int v129;
  uint8x8_t *v130;
  uint8x8_t v131;
  uint8x8_t *v132;
  uint16x8_t v133;
  uint8x8_t *v134;
  uint16x8_t v135;
  uint8x8_t *v136;
  uint64_t *v137;
  uint8x8_t *v138;
  uint16x8_t v139;
  uint8x8_t *v140;
  uint16x8_t v141;
  uint8x8_t *v142;
  int v143;
  __int128 *v144;
  uint8x8_t *v145;
  uint8x8_t v146;
  uint8x8_t *v147;
  uint16x8_t v148;
  uint8x8_t *v149;
  uint16x8_t v150;
  uint8x8_t *v151;
  uint64_t *v152;
  uint8x8_t *v153;
  uint16x8_t v154;
  uint8x8_t *v155;
  uint16x8_t v156;
  uint8x8_t *v157;
  unsigned int v158;
  __int128 *v159;
  uint64_t v160;
  int16x8_t *v161;
  int16x8_t v162;
  int16x8_t *v163;
  int16x8_t v164;
  int16x8_t *v165;
  int16x8_t v166;
  int16x8_t *v167;
  int16x8_t *v168;
  int16x8_t v169;
  int16x8_t *v170;
  int16x8_t v171;
  int16x8_t *v172;
  int16x8_t v173;
  int16x8_t *v174;
  int v175;
  int16x8_t *v176;
  int16x8_t v177;
  int16x8_t *v178;
  int16x8_t v179;
  int16x8_t *v180;
  int16x8_t v181;
  int16x8_t *v182;
  int16x8_t *v183;
  int16x8_t v184;
  int16x8_t *v185;
  int16x8_t v186;
  int16x8_t *v187;
  int16x8_t v188;
  int16x8_t *v189;
  __int128 *v190;
  int16x8_t *v191;
  int16x8_t v192;
  int16x8_t *v193;
  int16x8_t v194;
  int16x8_t *v195;
  int16x8_t v196;
  int16x8_t *v197;
  int16x8_t *v198;
  int16x8_t v199;
  int16x8_t *v200;
  int16x8_t v201;
  int16x8_t *v202;
  int16x8_t v203;
  int16x8_t *v204;
  __int128 *v205;
  __int128 *v206;
  int v207;
  int v208;
  unsigned int v209;
  int v210;
  unsigned int v211;
  int v212;
  unsigned int v213;
  uint64_t v214;
  int v215;
  int v216;
  _BOOL4 v217;
  int v218;
  uint64_t *v219;
  uint8x16_t v220;
  uint8x16_t v221;
  uint8x16_t v222;
  uint8x16_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint8x16_t v226;
  uint8x16_t v227;
  uint8x16_t v228;
  uint64_t v229;
  uint8x16_t v230;
  uint8x16_t v231;
  uint8x16_t v232;
  uint8x16_t v233;
  uint8x16_t v234;
  uint8x16_t v235;
  uint8x16_t v236;
  uint8x16_t v237;
  uint8x16_t v238;
  int v239;
  uint64_t v240;
  uint16x8_t *v241;
  uint16x8_t *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint16x8_t v248;
  uint16x8_t v249;
  uint16x8_t v250;
  uint16x8_t v251;
  uint16x8_t v252;
  uint16x8_t v253;
  uint16x8_t v254;
  uint16x8_t v255;
  uint16x8_t v256;
  uint16x8_t v257;
  uint16x8_t v258;
  uint16x8_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t *v270;
  uint8x16_t v271;
  uint8x16_t v272;
  uint8x16_t v273;
  uint8x16_t v274;
  uint64_t *v275;
  uint8x16_t v276;
  uint8x16_t v277;
  uint8x16_t v278;
  uint8x16_t v279;
  uint8x16_t v280;
  uint8x16_t v281;
  uint8x16_t v282;
  uint8x16_t v283;
  uint8x16_t v284;
  uint8x16_t v285;
  uint8x16_t v286;
  uint8x16_t v287;
  int v288;
  uint64_t *v289;
  uint8x16_t v290;
  uint8x16_t v291;
  uint8x16_t v292;
  uint8x16_t v293;
  uint64_t *v294;
  uint8x16_t v295;
  uint8x16_t v296;
  uint8x16_t v297;
  uint8x16_t v298;
  uint8x16_t v299;
  uint8x16_t v300;
  uint8x16_t v301;
  uint8x16_t v302;
  uint8x16_t v303;
  uint8x16_t v304;
  uint8x16_t v305;
  uint8x16_t v306;
  uint64_t *v307;
  uint8x16_t v308;
  uint8x16_t v309;
  uint8x16_t v310;
  uint8x16_t v311;
  uint64_t *v312;
  uint8x16_t v313;
  uint8x16_t v314;
  uint8x16_t v315;
  uint8x16_t v316;
  uint8x16_t v317;
  uint8x16_t v318;
  uint8x16_t v319;
  uint8x16_t v320;
  uint8x16_t v321;
  uint8x16_t v322;
  uint8x16_t v323;
  uint8x16_t v324;
  uint16x8_t *v325;
  uint16x8_t *v326;
  uint16x8_t v327;
  uint16x8_t v328;
  uint16x8_t v329;
  uint16x8_t v330;
  uint16x8_t v331;
  uint16x8_t v332;
  uint16x8_t v333;
  uint16x8_t v334;
  uint16x8_t v335;
  uint16x8_t v336;
  uint16x8_t v337;
  uint16x8_t v338;
  uint16x8_t *v339;
  uint16x8_t *v340;
  uint64_t v341;
  uint16x8_t v342;
  uint16x8_t v343;
  uint16x8_t v344;
  uint16x8_t v345;
  uint16x8_t v346;
  uint16x8_t v347;
  uint16x8_t v348;
  uint16x8_t v349;
  uint16x8_t v350;
  uint16x8_t v351;
  uint16x8_t v352;
  uint16x8_t v353;
  uint64_t v354;
  uint16x8_t *v355;
  uint16x8_t *v356;
  uint16x8_t v357;
  uint16x8_t v358;
  uint16x8_t v359;
  uint16x8_t v360;
  uint16x8_t v361;
  uint16x8_t v362;
  uint16x8_t v363;
  uint16x8_t v364;
  uint16x8_t v365;
  uint16x8_t v366;
  uint16x8_t v367;
  uint16x8_t v368;
  uint16x8_t v369;
  uint16x8_t v370;
  uint16x8_t v371;
  uint16x8_t v372;
  uint16x8_t v373;
  uint16x8_t v374;
  uint16x8_t v375;
  uint16x8_t v376;
  _BOOL4 v377;
  int v378;
  __int128 *v379;
  uint64_t v380;
  uint64_t v381;
  _BYTE *v382;
  _QWORD *v383;
  unsigned int v384;
  int v385;
  int v386;
  int v387;
  int v388;
  uint64_t v389;
  __int128 *v390;
  int v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  int32x2_t v397;
  int32x2_t v398;
  int v399;
  int v400;
  int v401;
  int32x2_t v402;
  int v403;
  _OWORD *v404;
  int32x2_t v405;
  int v406;
  char v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  _DWORD *v411;
  __int128 *v412;
  _DWORD *v413;
  _DWORD *v414;
  int *v415;
  int *v416;
  int *v417;
  int *v418;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  int v424;
  int v425;
  int v426;
  int v427;
  int v428;
  int v429;
  int v430;
  int v431;
  int v432;
  int v433;
  int v434;
  int *v435;
  int *v436;
  int *v437;
  int *v438;
  int *v439;
  int v440;
  int v441;
  int v442;
  int v443;
  int v444;
  int v445;
  int v446;
  int v447;
  int v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int *v454;
  int *v455;
  int *v456;
  int *v457;
  int *v458;
  int v459;
  int v460;
  int v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  int v468;
  int v469;
  int v470;
  int v471;
  int v472;
  int v473;
  _DWORD *v474;
  int *v475;
  int *v476;
  int *v477;
  int *v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  int v484;
  int v485;
  int v486;
  int v487;
  int v488;
  int v489;
  int v490;
  int v491;
  int v492;
  int v493;
  int v494;
  int v495;
  int v496;
  int v497;
  int v498;
  int v499;
  int v500;
  signed int v501;
  signed int v502;
  unsigned int v503;
  unsigned int v504;
  uint64_t v505;
  uint64_t v506;
  int v507;
  uint64_t v508;
  int v509;
  uint64_t v510;
  int v511;
  int v512;
  int v513;
  unsigned __int8 *v514;
  int v515;
  uint64_t v516;
  __int128 *v517;
  uint64_t v518;
  _BYTE *v519;
  int v520;
  int v521;
  int v522;
  char v523;
  uint64_t v524;
  _DWORD *v525;
  _DWORD *v526;
  int v527;
  int v528;
  int v529;
  int v530;
  int v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  char v535;
  int v536;
  int v537;
  uint64_t v538;
  char v539;
  int v540;
  int v541;
  uint64_t v542;
  char v543;
  int v544;
  uint64_t v545;
  char v546;
  char v547;
  uint64_t v548;
  _DWORD *v549;
  _DWORD *v550;
  int v551;
  int v552;
  int v553;
  int v554;
  int v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  int v559;
  uint64_t v560;
  uint64_t v561;
  int v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  _OWORD *v569;
  __int128 v570;
  int v571;
  int v573;
  unsigned int v574;
  uint64_t v575;
  int v576;
  uint64_t v577;
  int v578;
  int v579;
  char v580;
  _BOOL4 v581;
  char v582;
  unsigned int v583;
  _DWORD *v584;
  int v585;
  int v586;
  int v587;
  uint64_t v588;
  unsigned int v589;
  unsigned int v590;
  int v591;
  uint64_t v592;
  int v593;
  uint64_t v594;
  int v595;
  uint64_t v596;
  char v597;
  char v598;
  int v599;
  signed int v600;
  int v601;
  int v602;
  unint64_t v603;
  int v604;
  int v605;
  int v606;
  unint64_t v607;
  int v608;
  uint64_t v609;
  int v610;
  uint64_t v611;
  char *v612;
  _BOOL4 v613;
  uint64_t v614;
  _BYTE *v615;
  int v616;
  int v617;
  int v618;
  uint64_t v619;
  uint64_t v621;
  _BYTE *v622;
  int v623;
  int v624;
  int v625;
  uint64_t v626;
  uint64_t v627;
  _BYTE *v628;
  int v629;
  int v630;
  uint64_t v631;
  uint64_t v632;
  __int128 *v633;
  char v634;
  int v635;
  unsigned int v636;
  unsigned __int8 v637;
  uint64_t v638;
  int v639;
  _DWORD *v640;
  uint64_t v641;
  _BOOL4 v642;
  uint64_t v643;
  unsigned int v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  char v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  unsigned int v652;
  uint64_t v653;
  uint64_t v654;
  _BOOL4 v655;
  int v656;
  unint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  _BOOL4 v662;
  int v663;
  uint64_t v664;
  unsigned int v665;
  uint64_t v666;
  uint64_t v667;
  __int128 *v668;
  int v669;
  unsigned int v670;
  unint64_t v671;
  int v672;
  int v673;
  int v674;
  int v675;
  int v676;
  int v677;
  int v678;
  uint64_t v679;
  int v680;
  uint64_t v681;
  int v682;
  signed int v683;
  uint64_t v684;
  _BOOL4 v685;
  uint64_t v686;
  int v687;
  _OWORD *v688;
  _BOOL4 v689;
  uint64_t v690;
  _QWORD *v691;
  int v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  char *v696;
  uint64_t v697;
  _DWORD *v698;
  uint64_t v699;
  __int128 v700;
  __int128 v701;
  __int128 v702;
  __int128 v703;
  __int128 v704;
  _OWORD v705[5];
  _OWORD v706[169];
  int v707;
  int v708;
  int v709;
  int v710;
  int32x2_t v711;
  int v712;
  int v713;
  int v714;
  int v715;
  int v716;
  int v717;
  int32x2_t v718;
  int v719;
  int v720;
  int v721;
  int v722;
  int v723;
  int v724;
  unsigned int v725;
  int v726;
  int v727;
  int v728;
  int v729;
  int v730;
  _BYTE v731[20];
  _DWORD v732[16];
  int64x2_t v733;
  __int128 v734;
  _BYTE __b[16];
  _QWORD v736[2];
  _QWORD v737[2];
  _DWORD v738[5];
  _BYTE v739[64];
  uint64_t v740;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v645 = v6;
  v7 = v2;
  v740 = *MEMORY[0x24BDAC8D0];
  v699 = v4;
  v640 = (_DWORD *)(v2 + 747512);
  v8 = v2 + 740224;
  v9 = v2 + 176472;
  v10 = *(_OWORD *)(v2 + 842192);
  v667 = v2 + 842128;
  v733 = *(int64x2_t *)(v2 + 842176);
  v734 = v10;
  v641 = v2 + 738588;
  v695 = v2 + 834668;
  if (*(_DWORD *)(v2 + 739056) || *(_DWORD *)(v2 + 747508) && *(_DWORD *)(v2 + 835152))
  {
    v639 = 1;
    v11 = 1;
  }
  else if (*(_DWORD *)(v2 + 190380) == 1 && *(_DWORD *)(v2 + 850392) && *(_DWORD *)(v2 + 740116))
  {
    v639 = 0;
    v11 = *(_DWORD *)(v4 + 82376) == 0;
  }
  else
  {
    v639 = 0;
    v11 = 0;
  }
  if (*(_DWORD *)(v2 + 172972))
  {
    v689 = *(_BYTE *)(v2 + 172988)
        || *(_DWORD *)(v2 + 747508)
        && !*(_DWORD *)(v2 + 190076)
        && *(_DWORD *)(v2 + 6880 * *(int *)(v2 + 747516) + 758668)
        || *(_DWORD *)(v2 + 172128) == -1
        || *(_DWORD *)(v2 + 172132) == -1;
    v12 = *(unsigned __int8 *)(v2 + 172988) != 0;
  }
  else
  {
    v12 = 1;
    v689 = 1;
  }
  v642 = v12;
  v13 = (int *)(v2 + 194512);
  v14 = *(_DWORD *)(v2 + 171988);
  v685 = v14 <= 352 && *(_DWORD *)(v2 + 171992) < 289;
  memset(v706, 0, 352);
  v704 = 0u;
  memset(v705, 0, sizeof(v705));
  v702 = 0u;
  v703 = 0u;
  v15 = *(int *)(v2 + 173020) >> 3;
  v16 = v5 >> 3;
  v700 = 0u;
  v701 = 0u;
  v17 = v15 * (v5 >> 3);
  v18 = (uint64_t)(int)v6 >> 3;
  v647 = v4 + 82340;
  if (*(_DWORD *)(v2 + 747508))
  {
    v19 = *v13;
    if ((_DWORD)v19 == -1
      || (v20 = *(_DWORD *)(v2 + 4 * v19 + 172048), v20 == -1)
      || (v21 = *(_QWORD *)(v2 + 189944), *(_DWORD *)(v21 + 224 * v20 + 100) != *(_DWORD *)(v2 + 171992))
      || *(_DWORD *)(v21 + 224 * v20 + 96) != v14)
    {
      v689 = 1;
    }
  }
  v659 = v4 + 24912;
  v660 = v2 + 171988;
  v638 = v18 + v17;
  v22 = v5;
  *(_QWORD *)&v23 = set_offsets_0((int32x2_t *)v2, v3, v4, v5, v6, 12).n128_u64[0];
  v661 = v7;
  v644 = v22;
  set_segment_index(v7, v699, v22, v645, 12, v23, v24, v25, v26, v27);
  v28 = *(char *)(**(_QWORD **)(v699 + 25360) + 4);
  v655 = *(int *)(v9 + 13584) <= 7 && (!*(_DWORD *)(v8 + 7284) || !*(_DWORD *)(v695 + 24));
  v29 = 0;
  *(_QWORD *)(v647 + 41) = 0;
  *(_BYTE *)(v647 + 65) = 0;
  *(_QWORD *)(v647 + 49) = 0;
  *(_QWORD *)(v647 + 57) = 0;
  v633 = (__int128 *)(v647 + 41);
  v30 = v22;
  v31 = v660;
  if (!v689 && *(_DWORD *)(v641 + 1528))
  {
    v32 = *(_DWORD *)(v660 + 1028);
    v29 = *(unsigned __int8 *)(v647 + 40);
    v33 = v29 - 1 < 2;
    *(_BYTE *)(v647 + 15) = v33;
    *(_BYTE *)(v647 + 16) = v29 == 5;
    v34 = *(_QWORD *)(v667 + 8256);
    if (v34)
      *(_BYTE *)(v647 + 17) = *(_BYTE *)(v34 + v18 + ((v32 + 7) >> 3) * v16);
    if (*(_DWORD *)(v641 + 1556) && *v640 == v640[2] - 1 && *(_QWORD *)(v695 + 68) && v29 != 6)
    {
      if (!scale_partitioning_svc(v661, v699, v659, 12, ((int)v22 >> 1), ((int)v645 >> 1), v22, v645))
      {
        if (*(_DWORD *)(v641 + 1524))
          update_prev_partition(v661, v699, v28, v22, v645, v638);
        return;
      }
      v33 = *(unsigned __int8 *)(v647 + 15);
      v30 = v22;
      v31 = v660;
    }
    if (v33)
    {
      if (*(_DWORD *)(v641 + 1524))
      {
        if (!v11)
        {
          v35 = copy_partitioning(v661, v699, v659, v30, v645, v28, v638);
          v31 = v660;
          if (v35)
          {
            *(_DWORD *)(v647 + 20) = 1;
            if (*(_DWORD *)(v641 + 1556))
            {
              if (*v640 == v640[2] - 2)
                update_partition_svc(v661, 0xCu, v22, v645);
            }
            return;
          }
        }
      }
    }
  }
  if (*(_DWORD *)(v9 + 13676) == 3 && *(_BYTE *)v9 && (v28 - 3) >= 0xFFFFFFFE)
  {
    v36 = *(_DWORD *)(v31 + 1040);
    if ((*(_DWORD *)(v661 + 4 * v28 + 176552) & 1) != 0)
    {
      if (*(_BYTE *)(v9 + 3) == 1)
        v37 = 0;
      else
        v37 = *(_DWORD *)(v31 + 1040);
      v38 = v37 + *(__int16 *)(v661 + 8 * v28 + 176488);
      if (v38 >= 255)
        v38 = 255;
      v36 = v38 & ~(v38 >> 31);
    }
  }
  else
  {
    v36 = *(_DWORD *)(v31 + 1040);
  }
  v634 = v28;
  set_vbp_thresholds(v661, &v733, v36, v29);
  if (*(_DWORD *)(v9 + 13908) == 1)
  {
    v654 = v733.i64[1];
    v39 = v22;
    if (*v640)
    {
      v40 = v660;
    }
    else
    {
      v40 = v660;
      if (v11)
      {
        v654 = (3 * v733.i64[1]) >> 2;
        v733.i64[1] = v654;
      }
    }
  }
  else
  {
    v654 = v733.i64[1];
    v39 = v22;
    v40 = v660;
  }
  v41 = *(_DWORD *)(v9 + 13584);
  v42 = *(_DWORD *)(v699 + 25404);
  v43 = (v42 >> 3) + 64;
  if (v42 >= 0)
    v43 = 64;
  v682 = v43;
  v44 = *(_DWORD *)(v699 + 25412);
  if (v44 >= 0)
    v45 = 64;
  else
    v45 = (v44 >> 3) + 64;
  v692 = v45;
  v690 = *(_QWORD *)(v699 + 8216);
  v46 = *(int *)(v699 + 8224);
  v738[0] = v11;
  if (v689)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v699 + 25440) + 152) & 8) != 0)
    {
      v57 = *(_DWORD *)(v699 + 25536);
      if (v57 == 10)
      {
        v656 = 0;
        v58 = (unint64_t)&VP9_HIGH_VAR_OFFS_10;
      }
      else
      {
        v656 = 0;
        if (v57 == 12)
          v58 = (unint64_t)&VP9_HIGH_VAR_OFFS_12;
        else
          v58 = (unint64_t)&VP9_HIGH_VAR_OFFS_8;
      }
      v635 = 1;
      LOBYTE(v47) = 12;
      v48 = -1;
      v696 = (char *)(v58 >> 1);
      v377 = v41 < 8 && v685;
      v662 = v377;
      if (v377)
        goto LABEL_79;
    }
    else
    {
      v656 = 0;
      v635 = 1;
      LOBYTE(v47) = 12;
      v48 = -1;
      v696 = (char *)&VP9_VAR_OFFS_0;
      v49 = v41 < 8 && v685;
      v662 = v49;
      if (v49)
      {
LABEL_79:
        v50 = malloc_type_malloc(0xA917uLL, 0x74AD08B5uLL);
        if (v50 && (v51 = ((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v51 - 8) = v50, v51))
        {
          bzero((void *)(((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF0), 0xA900uLL);
        }
        else
        {
          vpx_internal_error(v661 + 171696, 2, "Failed to allocate vt2");
          v51 = 0;
        }
        v636 = v48;
        v637 = v47;
        v679 = v46;
        v671 = v51;
        if (!v689)
          goto LABEL_90;
        goto LABEL_204;
      }
    }
LABEL_203:
    v51 = 0;
    v636 = v48;
    v637 = v47;
    v679 = v46;
    v671 = 0;
    if (!v689)
    {
LABEL_90:
      v59 = 0;
      v60 = 0;
      v652 = v28 - 3;
      v651 = 7 * v46;
      v61 = 2 * v46;
      v62 = &v700;
      v646 = 3 * v46;
      v653 = 6 * v46;
      v657 = v51;
      v649 = 5 * v46;
      v650 = 4 * v46;
      while (1)
      {
        v63 = 0;
        v64 = 0;
        v65 = 0;
        v677 = 0;
        v675 = 0;
        v66 = v60;
        v665 = 32 * (v60 & 1);
        v67 = 16 * v60;
        v68 = 4 * v60;
        v663 = v67 & 0x7FFFFFE0;
        v658 = v66 + 1;
        v738[v66 + 1] = 0;
        *(_DWORD *)((char *)v737 + v68) = 0;
        *(_DWORD *)((char *)v736 + v68) = 0;
        v664 = v68;
        v674 = 0x7FFFFFFF;
        *(_DWORD *)&__b[v68] = 0x7FFFFFFF;
        v643 = v59;
        v69 = v696;
        v70 = v699;
        v71 = v682;
        v72 = v692;
        v73 = v690;
        v74 = v679;
        v668 = v62;
        do
        {
          v75 = v64 & 0x10 | v665;
          *(_DWORD *)&v739[v59] = 0;
          *(_DWORD *)((char *)v732 + v59) = 0;
          v76 = (v65 & 0x7FFFFFF0) + v663;
          v77 = *(_DWORD *)(*(_QWORD *)(v70 + 25440) + 152);
          v79 = (int)v75 < v71 && v76 < v72;
          v672 = v64;
          if ((v77 & 8) != 0)
          {
            v95 = 2 * v656;
            if ((v79 & 1) != 0)
            {
              v96 = (int16x8_t *)(2 * (v73 + v76 * (uint64_t)(int)v74 + v75));
              v97 = *v96;
              v98 = (int16x8_t *)((char *)v96 + v61);
              v99 = *v98;
              v100 = (int16x8_t *)((char *)v98 + v61);
              v101 = *v100;
              v102 = (int16x8_t *)((char *)v100 + v61);
              LODWORD(v102) = (vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v99, v97), v101), *(int16x8_t *)((char *)v102 + v61 + v61)), *(int16x8_t *)((char *)v102 + v61 + v61 + v61 + v61)), vaddq_s16(vaddq_s16(*v102, *(int16x8_t *)((char *)v102 + v61)), *(int16x8_t *)((char *)v102 + v61 + v61 + v61))))+ 32) >> 6;
              v103 = (int16x8_t *)(2 * (_QWORD)&v69[v76 * (uint64_t)v656 + v75]);
              v104 = *v103;
              v105 = (int16x8_t *)((char *)v103 + v95);
              v106 = *v105;
              v107 = (int16x8_t *)((char *)v105 + v95);
              v108 = *v107;
              v109 = (int16x8_t *)((char *)v107 + v95);
              v93 = (_DWORD)v102
                  - ((vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v106, v104), v108), *(int16x8_t *)((char *)v109 + v95 + v95)), *(int16x8_t *)((char *)v109 + 2 * v656 + v95 + v95 + v95)), vaddq_s16(vaddq_s16(*v109, *(int16x8_t *)((char *)v109 + v95)), *(int16x8_t *)((char *)v109 + v95 + v95 + v95))))+ 32) >> 6);
              v94 = v93 * v93;
            }
            else
            {
              v94 = 0;
              v93 = 0;
            }
            v110 = 0;
            v159 = &v62[v63];
            *((_DWORD *)v159 + 60) = v94;
            *((_DWORD *)v159 + 61) = v93;
            *((_DWORD *)v159 + 62) = 0;
            v160 = v75 | 8;
            v113 = 0;
            if (v76 < v72 && (int)v160 < v71)
            {
              v161 = (int16x8_t *)(2 * (v73 + v76 * (uint64_t)(int)v74 + v160));
              v162 = *v161;
              v163 = (int16x8_t *)((char *)v161 + v61);
              v164 = *v163;
              v165 = (int16x8_t *)((char *)v163 + v61);
              v166 = *v165;
              v167 = (int16x8_t *)((char *)v165 + v61);
              LODWORD(v167) = (vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v164, v162), v166), *(int16x8_t *)((char *)v167 + v61 + v61)), *(int16x8_t *)((char *)v167 + v61 + v61 + v61 + v61)), vaddq_s16(vaddq_s16(*v167, *(int16x8_t *)((char *)v167 + v61)), *(int16x8_t *)((char *)v167 + v61 + v61 + v61))))+ 32) >> 6;
              v168 = (int16x8_t *)(2 * (_QWORD)&v69[v76 * (uint64_t)v656 + v160]);
              v169 = *v168;
              v170 = (int16x8_t *)((char *)v168 + v95);
              v171 = *v170;
              v172 = (int16x8_t *)((char *)v170 + v95);
              v173 = *v172;
              v174 = (int16x8_t *)((char *)v172 + v95);
              v113 = (_DWORD)v167
                   - ((vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v171, v169), v173), *(int16x8_t *)((char *)v174 + v95 + v95)), *(int16x8_t *)((char *)v174 + 2 * v656 + v95 + v95 + v95)), vaddq_s16(vaddq_s16(*v174, *(int16x8_t *)((char *)v174 + v95)), *(int16x8_t *)((char *)v174 + v95 + v95 + v95))))+ 32) >> 6);
              v110 = v113 * v113;
            }
            v127 = 0;
            *((_DWORD *)v159 + 224) = v110;
            *((_DWORD *)v159 + 225) = v113;
            v175 = v76 | 8;
            *((_DWORD *)v159 + 226) = 0;
            v129 = 0;
            if ((int)v75 < v71 && v175 < v72)
            {
              v176 = (int16x8_t *)(2 * (v73 + v175 * (uint64_t)(int)v74 + v75));
              v177 = *v176;
              v178 = (int16x8_t *)((char *)v176 + v61);
              v179 = *v178;
              v180 = (int16x8_t *)((char *)v178 + v61);
              v181 = *v180;
              v182 = (int16x8_t *)((char *)v180 + v61);
              LODWORD(v182) = (vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v179, v177), v181), *(int16x8_t *)((char *)v182 + v61 + v61)), *(int16x8_t *)((char *)v182 + v61 + v61 + v61 + v61)), vaddq_s16(vaddq_s16(*v182, *(int16x8_t *)((char *)v182 + v61)), *(int16x8_t *)((char *)v182 + v61 + v61 + v61))))+ 32) >> 6;
              v183 = (int16x8_t *)(2 * (_QWORD)&v69[v175 * (uint64_t)v656 + v75]);
              v184 = *v183;
              v185 = (int16x8_t *)((char *)v183 + v95);
              v186 = *v185;
              v187 = (int16x8_t *)((char *)v185 + v95);
              v188 = *v187;
              v189 = (int16x8_t *)((char *)v187 + v95);
              v129 = (_DWORD)v182
                   - ((vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v186, v184), v188), *(int16x8_t *)((char *)v189 + v95 + v95)), *(int16x8_t *)((char *)v189 + 2 * v656 + v95 + v95 + v95)), vaddq_s16(vaddq_s16(*v189, *(int16x8_t *)((char *)v189 + v95)), *(int16x8_t *)((char *)v189 + v95 + v95 + v95))))+ 32) >> 6);
              v127 = v129 * v129;
            }
            v143 = 0;
            v190 = &v62[v63];
            *((_DWORD *)v190 + 388) = v127;
            *((_DWORD *)v190 + 389) = v129;
            *((_DWORD *)v190 + 390) = 0;
            if ((int)v160 >= v71 || v175 >= v72)
            {
              v158 = 0;
            }
            else
            {
              v191 = (int16x8_t *)(2 * (v73 + v175 * (uint64_t)(int)v74 + v160));
              v192 = *v191;
              v193 = (int16x8_t *)((char *)v191 + v61);
              v194 = *v193;
              v195 = (int16x8_t *)((char *)v193 + v61);
              v196 = *v195;
              v197 = (int16x8_t *)((char *)v195 + v61);
              LODWORD(v197) = (vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v194, v192), v196), *(int16x8_t *)((char *)v197 + v61 + v61)), *(int16x8_t *)((char *)v197 + v61 + v61 + v61 + v61)), vaddq_s16(vaddq_s16(*v197, *(int16x8_t *)((char *)v197 + v61)), *(int16x8_t *)((char *)v197 + v61 + v61 + v61))))+ 32) >> 6;
              v198 = (int16x8_t *)(2 * (_QWORD)&v69[(v76 | 8) * (uint64_t)v656 + v160]);
              v199 = *v198;
              v200 = (int16x8_t *)((char *)v198 + v95);
              v201 = *v200;
              v202 = (int16x8_t *)((char *)v200 + v95);
              v203 = *v202;
              v204 = (int16x8_t *)((char *)v202 + v95);
              v158 = (_DWORD)v197
                   - ((vaddlvq_u16((uint16x8_t)vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(v201, v199), v203), *(int16x8_t *)((char *)v204 + v95 + v95)), *(int16x8_t *)((char *)v204 + 2 * v656 + v95 + v95 + v95)), vaddq_s16(vaddq_s16(*v204, *(int16x8_t *)((char *)v204 + v95)), *(int16x8_t *)((char *)v204 + v95 + v95 + v95))))+ 32) >> 6);
              v143 = v158 * v158;
            }
            v62 = v668;
          }
          else
          {
            if (v79)
            {
              v80 = (uint8x8_t *)(v73 + v76 * (uint64_t)(int)v74 + v75);
              v81 = *v80;
              v82 = (uint8x8_t *)((char *)v80 + v74);
              v83 = vaddl_u8(*v82, v81);
              v84 = (uint8x8_t *)((char *)v82 + v74);
              v85 = vaddw_u8(v83, *v84);
              v86 = (uint8x8_t *)((char *)v84 + v74);
              LODWORD(v86) = (vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v85, *v86), *(uint8x8_t *)((char *)v86 + v74)), *(uint8x8_t *)((char *)v86 + v74 + v74)), *(uint8x8_t *)((char *)v86 + v74 + v74 + v74)), *(uint8x8_t *)((char *)v86 + v74 + v74 + v74 + v74)))+ 32) >> 6;
              v87 = (uint64_t *)&v69[v76 * (uint64_t)v656 + v75];
              v85.i64[0] = *v87;
              v88 = (uint8x8_t *)((char *)v87 + v656);
              v89 = vaddl_u8(*v88, *(uint8x8_t *)v85.i8);
              v90 = (uint8x8_t *)((char *)v88 + v656);
              v91 = vaddw_u8(v89, *v90);
              v92 = (uint8x8_t *)((char *)v90 + v656);
              v93 = (_DWORD)v86
                  - ((vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v91, *v92), *(uint8x8_t *)((char *)v92 + v656)), *(uint8x8_t *)((char *)v92 + v656 + v656)), *(uint8x8_t *)((char *)v92 + v656 + v656 + v656)), *(uint8x8_t *)((char *)v92 + v656 + v656 + v656 + v656)))+ 32) >> 6);
              v94 = v93 * v93;
            }
            else
            {
              v94 = 0;
              v93 = 0;
            }
            v110 = 0;
            v111 = &v62[v63];
            *((_DWORD *)v111 + 60) = v94;
            *((_DWORD *)v111 + 61) = v93;
            *((_DWORD *)v111 + 62) = 0;
            v112 = v75 | 8;
            v113 = 0;
            if (v76 < v72 && (int)v112 < v71)
            {
              v114 = (uint8x8_t *)(v73 + v76 * (uint64_t)(int)v74 + v112);
              v115 = *v114;
              v116 = (uint8x8_t *)((char *)v114 + v74);
              v117 = vaddl_u8(*v116, v115);
              v118 = (uint8x8_t *)((char *)v116 + v74);
              v119 = vaddw_u8(v117, *v118);
              v120 = (uint8x8_t *)((char *)v118 + v74);
              LODWORD(v120) = (vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v119, *v120), *(uint8x8_t *)((char *)v120 + v74)), *(uint8x8_t *)((char *)v120 + v74 + v74)), *(uint8x8_t *)((char *)v120 + v74 + v74 + v74)), *(uint8x8_t *)((char *)v120 + v74 + v74 + v74 + v74)))+ 32) >> 6;
              v121 = (uint64_t *)&v69[v76 * (uint64_t)v656 + v112];
              v119.i64[0] = *v121;
              v122 = (uint8x8_t *)((char *)v121 + v656);
              v123 = vaddl_u8(*v122, *(uint8x8_t *)v119.i8);
              v124 = (uint8x8_t *)((char *)v122 + v656);
              v125 = vaddw_u8(v123, *v124);
              v126 = (uint8x8_t *)((char *)v124 + v656);
              v113 = (_DWORD)v120
                   - ((vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v125, *v126), *(uint8x8_t *)((char *)v126 + v656)), *(uint8x8_t *)((char *)v126 + v656 + v656)), *(uint8x8_t *)((char *)v126 + v656 + v656 + v656)), *(uint8x8_t *)((char *)v126 + v656 + v656 + v656 + v656)))+ 32) >> 6);
              v110 = v113 * v113;
            }
            v127 = 0;
            *((_DWORD *)v111 + 224) = v110;
            *((_DWORD *)v111 + 225) = v113;
            v128 = v76 | 8;
            *((_DWORD *)v111 + 226) = 0;
            v129 = 0;
            if ((int)v75 < v71 && v128 < v72)
            {
              v130 = (uint8x8_t *)(v73 + v128 * (uint64_t)(int)v74 + v75);
              v131 = *v130;
              v132 = (uint8x8_t *)((char *)v130 + v74);
              v133 = vaddl_u8(*v132, v131);
              v134 = (uint8x8_t *)((char *)v132 + v74);
              v135 = vaddw_u8(v133, *v134);
              v136 = (uint8x8_t *)((char *)v134 + v74);
              LODWORD(v136) = (vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v135, *v136), *(uint8x8_t *)((char *)v136 + v74)), *(uint8x8_t *)((char *)v136 + v74 + v74)), *(uint8x8_t *)((char *)v136 + v74 + v74 + v74)), *(uint8x8_t *)((char *)v136 + v74 + v74 + v74 + v74)))+ 32) >> 6;
              v137 = (uint64_t *)&v69[v128 * (uint64_t)v656 + v75];
              v135.i64[0] = *v137;
              v138 = (uint8x8_t *)((char *)v137 + v656);
              v139 = vaddl_u8(*v138, *(uint8x8_t *)v135.i8);
              v140 = (uint8x8_t *)((char *)v138 + v656);
              v141 = vaddw_u8(v139, *v140);
              v142 = (uint8x8_t *)((char *)v140 + v656);
              v129 = (_DWORD)v136
                   - ((vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v141, *v142), *(uint8x8_t *)((char *)v142 + v656)), *(uint8x8_t *)((char *)v142 + v656 + v656)), *(uint8x8_t *)((char *)v142 + v656 + v656 + v656)), *(uint8x8_t *)((char *)v142 + v656 + v656 + v656 + v656)))+ 32) >> 6);
              v127 = v129 * v129;
            }
            v143 = 0;
            v144 = &v62[v63];
            *((_DWORD *)v144 + 388) = v127;
            *((_DWORD *)v144 + 389) = v129;
            *((_DWORD *)v144 + 390) = 0;
            if ((int)v112 >= v71 || v128 >= v72)
            {
              v158 = 0;
            }
            else
            {
              v145 = (uint8x8_t *)(v73 + v128 * (uint64_t)(int)v74 + v112);
              v146 = *v145;
              v147 = (uint8x8_t *)((char *)v145 + v74);
              v148 = vaddl_u8(*v147, v146);
              v149 = (uint8x8_t *)((char *)v147 + v74);
              v150 = vaddw_u8(v148, *v149);
              v151 = (uint8x8_t *)((char *)v149 + v74);
              LODWORD(v151) = (vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v150, *v151), *(uint8x8_t *)((char *)v151 + v74)), *(uint8x8_t *)((char *)v151 + v74 + v74)), *(uint8x8_t *)((char *)v151 + v74 + v74 + v74)), *(uint8x8_t *)((char *)v151 + v74 + v74 + v74 + v74)))+ 32) >> 6;
              v152 = (uint64_t *)&v69[v128 * (uint64_t)v656 + v112];
              v150.i64[0] = *v152;
              v153 = (uint8x8_t *)((char *)v152 + v656);
              v154 = vaddl_u8(*v153, *(uint8x8_t *)v150.i8);
              v155 = (uint8x8_t *)((char *)v153 + v656);
              v156 = vaddw_u8(v154, *v155);
              v157 = (uint8x8_t *)((char *)v155 + v656);
              v158 = (_DWORD)v151
                   - ((vaddlvq_u16(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(vaddw_u8(v156, *v157), *(uint8x8_t *)((char *)v157 + v656)), *(uint8x8_t *)((char *)v157 + v656 + v656)), *(uint8x8_t *)((char *)v157 + v656 + v656 + v656)), *(uint8x8_t *)((char *)v157 + v656 + v656 + v656 + v656)))+ 32) >> 6);
              v143 = v158 * v158;
            }
          }
          v205 = &v62[v63];
          v206 = &v62[v63];
          *((_DWORD *)v206 + 552) = v143;
          *((_DWORD *)v206 + 553) = v158;
          *((_DWORD *)v206 + 554) = 0;
          v207 = v94 + v110;
          *((_DWORD *)v206 + 45) = v93 + v113;
          *((_DWORD *)v206 + 46) = 1;
          *((_DWORD *)v206 + 48) = v127 + v143;
          *((_DWORD *)v206 + 49) = v129 + v158;
          *((_DWORD *)v206 + 50) = 1;
          v208 = v127 + v94;
          v209 = v129 + v93;
          *((_DWORD *)v206 + 52) = v208;
          *((_DWORD *)v206 + 53) = v209;
          *((_DWORD *)v206 + 54) = 1;
          v210 = v110 + v143;
          v211 = v113 + v158;
          *((_DWORD *)v206 + 56) = v210;
          *((_DWORD *)v206 + 57) = v211;
          *((_DWORD *)v206 + 58) = 1;
          v212 = v208 + v210;
          v213 = v209 + v211;
          *((_DWORD *)v205 + 40) = v212;
          *((_DWORD *)v206 + 41) = v213;
          *((_DWORD *)v206 + 42) = 2;
          v214 = ((v212 - ((v213 * v213) >> 2)) & 0xFFFFFF) << 6;
          *((_DWORD *)v206 + 43) = v214;
          *((_DWORD *)v206 + 44) = v207;
          v675 += v214;
          *(_DWORD *)((char *)v737 + v664) = v675;
          v215 = v674;
          if ((int)v214 < v674)
            v215 = v214;
          v674 = v215;
          *(_DWORD *)&__b[v664] = v215;
          v216 = v677;
          if ((int)v214 > v677)
            v216 = v214;
          v677 = v216;
          *(_DWORD *)((char *)v736 + v664) = v216;
          if ((uint64_t)v734 < v214)
          {
LABEL_133:
            *(_DWORD *)&v739[v59] = 1;
            v738[v658] = 1;
            v738[0] = 1;
            goto LABEL_134;
          }
          if (v655 && v654 < v214 && v652 <= 0xFFFFFFFD)
          {
            if ((v77 & 8) == 0)
            {
              if (v79)
              {
                v219 = (uint64_t *)(v73 + v76 * (uint64_t)(int)v74 + v75);
                v220.i64[0] = *v219;
                v220.i64[1] = *(uint64_t *)((char *)v219 + v74);
                v221.i64[0] = *(uint64_t *)((char *)v219 + v61);
                v221.i64[1] = *(uint64_t *)((char *)v219 + v646);
                v222.i64[0] = *(uint64_t *)((char *)v219 + v650);
                v222.i64[1] = *(uint64_t *)((char *)v219 + v649);
                v223.i64[0] = *(uint64_t *)((char *)v219 + v653);
                v224 = *(uint64_t *)((char *)v219 + v651);
                v225 = (uint64_t *)&v69[v76 * (uint64_t)v656 + v75];
                v223.i64[1] = v224;
                v226.i64[0] = *v225;
                v226.i64[1] = *(uint64_t *)((char *)v225 + v656);
                v227.i64[0] = *(uint64_t *)((char *)v225 + 2 * v656);
                v227.i64[1] = *(uint64_t *)((char *)v225 + 3 * v656);
                v228.i64[0] = *(uint64_t *)((char *)v225 + 4 * v656);
                v228.i64[1] = *(uint64_t *)((char *)v225 + 5 * v656);
                v229 = 6 * v656;
                v230.i64[0] = *(uint64_t *)((char *)v225 + v229);
                v230.i64[1] = *(uint64_t *)((char *)v225 + 7 * v656);
                v231 = vabdq_u8(v220, v226);
                v232 = vabdq_u8(v221, v227);
                v233 = vabdq_u8(v222, v228);
                v234 = vabdq_u8(v223, v230);
                v235 = vmaxq_u8(v231, v232);
                v236 = vminq_u8(v231, v232);
                v237 = vminq_u8(v233, v234);
                v238 = vminq_u8(v236, v237);
                v237.i8[0] = vmaxvq_u8(vmaxq_u8(v235, vmaxq_u8(v233, v234)));
                v238.i8[0] = vminvq_u8(v238);
                v239 = v237.i32[0] - v238.i32[0];
                v79 = v239 & ~(v239 >> 31);
                v240 = v75 | 8;
                if (v76 >= v72)
                  goto LABEL_157;
LABEL_152:
                if ((int)v240 < v71)
                {
                  v270 = (uint64_t *)(v73 + v76 * (uint64_t)(int)v74 + v240);
                  v271.i64[0] = *v270;
                  v271.i64[1] = *(uint64_t *)((char *)v270 + v74);
                  v272.i64[0] = *(uint64_t *)((char *)v270 + v61);
                  v272.i64[1] = *(uint64_t *)((char *)v270 + v646);
                  v273.i64[0] = *(uint64_t *)((char *)v270 + v650);
                  v273.i64[1] = *(uint64_t *)((char *)v270 + v649);
                  v274.i64[0] = *(uint64_t *)((char *)v270 + v653);
                  v275 = (uint64_t *)&v69[v76 * (uint64_t)v656 + v240];
                  v274.i64[1] = *(uint64_t *)((char *)v270 + v651);
                  v276.i64[0] = *v275;
                  v276.i64[1] = *(uint64_t *)((char *)v275 + v656);
                  v277.i64[0] = *(uint64_t *)((char *)v275 + 2 * v656);
                  v277.i64[1] = *(uint64_t *)((char *)v275 + 3 * v656);
                  v278.i64[0] = *(uint64_t *)((char *)v275 + 4 * v656);
                  v278.i64[1] = *(uint64_t *)((char *)v275 + 5 * v656);
                  v279.i64[0] = *(uint64_t *)((char *)v275 + v229);
                  v279.i64[1] = *(uint64_t *)((char *)v275 + 7 * v656);
                  v280 = vabdq_u8(v271, v276);
                  v281 = vabdq_u8(v272, v277);
                  v282 = vabdq_u8(v273, v278);
                  v283 = vabdq_u8(v274, v279);
                  v284 = vmaxq_u8(v280, v281);
                  v285 = vminq_u8(v280, v281);
                  v286 = vminq_u8(v282, v283);
                  v287 = vminq_u8(v285, v286);
                  v286.i8[0] = vmaxvq_u8(vmaxq_u8(v284, vmaxq_u8(v282, v283)));
                  v287.i8[0] = vminvq_u8(v287);
                  if (v286.i32[0] - v287.i32[0] > v79)
                    v79 = v286.i32[0] - v287.i32[0];
                  if (v286.i32[0] - v287.i32[0] < v239)
                    v239 = v286.i32[0] - v287.i32[0];
                }
              }
              else
              {
                v239 = 255;
                v229 = 6 * v656;
                v240 = v75 | 8;
                if (v76 < v72)
                  goto LABEL_152;
              }
LABEL_157:
              v288 = v76 | 8;
              if ((int)v75 < v71 && v288 < v72)
              {
                v289 = (uint64_t *)(v73 + v288 * (uint64_t)(int)v74 + v75);
                v290.i64[0] = *v289;
                v290.i64[1] = *(uint64_t *)((char *)v289 + v74);
                v291.i64[0] = *(uint64_t *)((char *)v289 + v61);
                v291.i64[1] = *(uint64_t *)((char *)v289 + v646);
                v292.i64[0] = *(uint64_t *)((char *)v289 + v650);
                v292.i64[1] = *(uint64_t *)((char *)v289 + v649);
                v293.i64[0] = *(uint64_t *)((char *)v289 + v653);
                v294 = (uint64_t *)&v69[v288 * (uint64_t)v656 + v75];
                v293.i64[1] = *(uint64_t *)((char *)v289 + v651);
                v295.i64[0] = *v294;
                v295.i64[1] = *(uint64_t *)((char *)v294 + v656);
                v296.i64[0] = *(uint64_t *)((char *)v294 + 2 * v656);
                v296.i64[1] = *(uint64_t *)((char *)v294 + 3 * v656);
                v297.i64[0] = *(uint64_t *)((char *)v294 + 4 * v656);
                v297.i64[1] = *(uint64_t *)((char *)v294 + 5 * v656);
                v298.i64[0] = *(uint64_t *)((char *)v294 + v229);
                v298.i64[1] = *(uint64_t *)((char *)v294 + 7 * v656);
                v299 = vabdq_u8(v290, v295);
                v300 = vabdq_u8(v291, v296);
                v301 = vabdq_u8(v292, v297);
                v302 = vabdq_u8(v293, v298);
                v303 = vmaxq_u8(v299, v300);
                v304 = vminq_u8(v299, v300);
                v305 = vminq_u8(v301, v302);
                v306 = vminq_u8(v304, v305);
                v305.i8[0] = vmaxvq_u8(vmaxq_u8(v303, vmaxq_u8(v301, v302)));
                v306.i8[0] = vminvq_u8(v306);
                if (v305.i32[0] - v306.i32[0] > v79)
                  v79 = v305.i32[0] - v306.i32[0];
                if (v305.i32[0] - v306.i32[0] < v239)
                  v239 = v305.i32[0] - v306.i32[0];
              }
              if ((int)v240 < v71 && v288 < v72)
              {
                v307 = (uint64_t *)(v73 + v288 * (uint64_t)(int)v74 + v240);
                v308.i64[0] = *v307;
                v308.i64[1] = *(uint64_t *)((char *)v307 + v74);
                v309.i64[0] = *(uint64_t *)((char *)v307 + v61);
                v309.i64[1] = *(uint64_t *)((char *)v307 + v646);
                v310.i64[0] = *(uint64_t *)((char *)v307 + v650);
                v310.i64[1] = *(uint64_t *)((char *)v307 + v649);
                v311.i64[0] = *(uint64_t *)((char *)v307 + v653);
                v312 = (uint64_t *)&v69[v288 * (uint64_t)v656 + v240];
                v311.i64[1] = *(uint64_t *)((char *)v307 + v651);
                v313.i64[0] = *v312;
                v313.i64[1] = *(uint64_t *)((char *)v312 + v656);
                v314.i64[0] = *(uint64_t *)((char *)v312 + 2 * v656);
                v314.i64[1] = *(uint64_t *)((char *)v312 + 3 * v656);
                v315.i64[0] = *(uint64_t *)((char *)v312 + 4 * v656);
                v315.i64[1] = *(uint64_t *)((char *)v312 + 5 * v656);
                v316.i64[0] = *(uint64_t *)((char *)v312 + v229);
                v316.i64[1] = *(uint64_t *)((char *)v312 + 7 * v656);
                v317 = vabdq_u8(v308, v313);
                v318 = vabdq_u8(v309, v314);
                v319 = vabdq_u8(v310, v315);
                v320 = vabdq_u8(v311, v316);
                v321 = vmaxq_u8(v317, v318);
                v322 = vminq_u8(v317, v318);
                v323 = vminq_u8(v319, v320);
                v324 = vminq_u8(v322, v323);
                v323.i8[0] = vmaxvq_u8(vmaxq_u8(v321, vmaxq_u8(v319, v320)));
                v324.i8[0] = vminvq_u8(v324);
                if (v323.i32[0] - v324.i32[0] > v79)
                  v79 = v323.i32[0] - v324.i32[0];
                if (v323.i32[0] - v324.i32[0] < v239)
                  v239 = v323.i32[0] - v324.i32[0];
              }
LABEL_192:
              if (v79 - v239 > *(_DWORD *)(v667 + 80) << (*(_BYTE *)(v647 + 40) == 6))
                goto LABEL_133;
              goto LABEL_134;
            }
            v648 = v77;
            if ((v79 & 1) != 0)
            {
              v241 = (uint16x8_t *)(2 * (v73 + v76 * (uint64_t)(int)v74 + v75));
              v242 = (uint16x8_t *)(2 * (_QWORD)&v69[v76 * (uint64_t)v656 + v75]);
              v243 = 2 * v650;
              v244 = 2 * v649;
              v245 = 2 * v651;
              v246 = 4 * v656;
              v247 = 12 * v656;
              v248 = vabdq_u16(*v241, *v242);
              v249 = vabdq_u16(*(uint16x8_t *)((char *)v241 + v61), *(uint16x8_t *)((char *)v242 + 2 * v656));
              v250 = vabdq_u16(*(uint16x8_t *)((char *)v241 + 2 * v61), *(uint16x8_t *)((char *)v242 + v246));
              v251 = vabdq_u16(*(uint16x8_t *)((char *)v241 + v653), *(uint16x8_t *)((char *)v242 + 6 * v656));
              v252 = vabdq_u16(*(uint16x8_t *)((char *)v241 + 2 * v650), *(uint16x8_t *)((char *)v242 + 8 * v656));
              v253 = vabdq_u16(*(uint16x8_t *)((char *)v241 + 2 * v649), *(uint16x8_t *)((char *)v242 + 10 * v656));
              v254 = vabdq_u16(*(uint16x8_t *)((char *)v241 + 2 * v653), *(uint16x8_t *)((char *)v242 + v247));
              v255 = vabdq_u16(*(uint16x8_t *)((char *)v241 + 2 * v651), *(uint16x8_t *)((char *)v242 + 14 * v656));
              v256 = vmaxq_u16(vmaxq_u16(vmaxq_u16(v248, v249), vmaxq_u16(v250, v251)), vmaxq_u16(vmaxq_u16(v252, v253), vmaxq_u16(v254, v255)));
              v257 = vminq_u16(vminq_u16(v248, v249), vminq_u16(v250, v251));
              v258 = vminq_u16(vminq_u16(v252, v253), vminq_u16(v254, v255));
              v259 = vminq_u16(v257, v258);
              v258.i16[0] = vmaxvq_u16(v256);
              v259.i16[0] = vminvq_u16(v259);
              v239 = v258.i32[0] - v259.i32[0];
              v79 = v239 & ~(v239 >> 31);
              if (v258.i32[0] - v259.i32[0] >= 255)
                v239 = 255;
              v260 = 10 * v656;
              v261 = 14 * v656;
              v262 = v75 | 8;
              if (v76 >= v72)
              {
LABEL_149:
                v263 = 8 * v656;
                v264 = v247;
                v265 = v246;
                v266 = v243;
                v267 = v245;
                v268 = v76 | 8;
                if ((int)v75 >= v71)
                  goto LABEL_150;
LABEL_177:
                v269 = v244;
                if (v268 < v72)
                {
                  v339 = (uint16x8_t *)(2 * (v690 + v268 * (uint64_t)(int)v74 + v75));
                  v340 = (uint16x8_t *)(2 * (_QWORD)&v696[v268 * (uint64_t)v656 + v75]);
                  v341 = 2 * v653;
                  v263 = 8 * v656;
                  v342 = vabdq_u16(*v339, *v340);
                  v343 = vabdq_u16(*(uint16x8_t *)((char *)v339 + v61), *(uint16x8_t *)((char *)v340 + 2 * v656));
                  v344 = vabdq_u16(*(uint16x8_t *)((char *)v339 + 2 * v61), *(uint16x8_t *)((char *)v340 + v265));
                  v345 = vabdq_u16(*(uint16x8_t *)((char *)v339 + v653), *(uint16x8_t *)((char *)v340 + 6 * v656));
                  v346 = vabdq_u16(*(uint16x8_t *)((char *)v339 + v266), *(uint16x8_t *)((char *)v340 + v263));
                  v347 = vabdq_u16(*(uint16x8_t *)((char *)v339 + v244), *(uint16x8_t *)((char *)v340 + v260));
                  v348 = vabdq_u16(*(uint16x8_t *)((char *)v339 + 2 * v653), *(uint16x8_t *)((char *)v340 + v264));
                  v349 = vabdq_u16(*(uint16x8_t *)((char *)v339 + v267), *(uint16x8_t *)((char *)v340 + v261));
                  v350 = vmaxq_u16(vmaxq_u16(vmaxq_u16(v342, v343), vmaxq_u16(v344, v345)), vmaxq_u16(vmaxq_u16(v346, v347), vmaxq_u16(v348, v349)));
                  v351 = vminq_u16(vminq_u16(v342, v343), vminq_u16(v344, v345));
                  v352 = vminq_u16(vminq_u16(v346, v347), vminq_u16(v348, v349));
                  v353 = vminq_u16(v351, v352);
                  v352.i16[0] = vmaxvq_u16(v350);
                  v353.i16[0] = vminvq_u16(v353);
                  if (v352.i32[0] - v353.i32[0] > v79)
                    v79 = v352.i32[0] - v353.i32[0];
                  if (v352.i32[0] - v353.i32[0] < v239)
                    v239 = v352.i32[0] - v353.i32[0];
                  v72 = v692;
                  LOBYTE(v77) = v648;
                  if ((int)v262 >= v71)
                    goto LABEL_191;
LABEL_185:
                  if (v268 < v72)
                  {
                    v354 = v690 + v268 * (uint64_t)(int)v74 + v262;
                    v355 = (uint16x8_t *)&v696[v268 * (uint64_t)v656 + v262];
                    v356 = (uint16x8_t *)(2 * v354);
                    v72 = v692;
                    v355 = (uint16x8_t *)(2 * (_QWORD)v355);
                    v357 = *(uint16x8_t *)((char *)v356 + v61);
                    v358 = *(uint16x8_t *)((char *)v356 + 2 * v61);
                    v359 = *(uint16x8_t *)((char *)v356 + v653);
                    v360 = *(uint16x8_t *)((char *)v356 + v266);
                    v361 = *(uint16x8_t *)((char *)v356 + v269);
                    v362 = *(uint16x8_t *)((char *)v356 + v341);
                    LOBYTE(v77) = v648;
                    v363 = *(uint16x8_t *)((char *)v356 + v267);
                    v364 = *v356;
                    v73 = v690;
                    v69 = v696;
                    v365 = vabdq_u16(v364, *v355);
                    v366 = vabdq_u16(v357, *(uint16x8_t *)((char *)v355 + 2 * v656));
                    v367 = vabdq_u16(v358, *(uint16x8_t *)((char *)v355 + v265));
                    v368 = vabdq_u16(v359, *(uint16x8_t *)((char *)v355 + 6 * v656));
                    v369 = vabdq_u16(v360, *(uint16x8_t *)((char *)v355 + v263));
                    v370 = vabdq_u16(v361, *(uint16x8_t *)((char *)v355 + v260));
                    v371 = vabdq_u16(v362, *(uint16x8_t *)((char *)v355 + v264));
                    v372 = vabdq_u16(v363, *(uint16x8_t *)((char *)v355 + v261));
                    v373 = vmaxq_u16(vmaxq_u16(vmaxq_u16(v365, v366), vmaxq_u16(v367, v368)), vmaxq_u16(vmaxq_u16(v369, v370), vmaxq_u16(v371, v372)));
                    v374 = vminq_u16(vminq_u16(v365, v366), vminq_u16(v367, v368));
                    v375 = vminq_u16(vminq_u16(v369, v370), vminq_u16(v371, v372));
                    v376 = vminq_u16(v374, v375);
                    v375.i16[0] = vmaxvq_u16(v373);
                    v376.i16[0] = vminvq_u16(v376);
                    if (v375.i32[0] - v376.i32[0] > v79)
                      v79 = v375.i32[0] - v376.i32[0];
                    if (v375.i32[0] - v376.i32[0] < v239)
                      v239 = v375.i32[0] - v376.i32[0];
                    goto LABEL_192;
                  }
LABEL_191:
                  v73 = v690;
                  v69 = v696;
                  goto LABEL_192;
                }
LABEL_184:
                v341 = 2 * v653;
                LOBYTE(v77) = v648;
                if ((int)v262 < v71)
                  goto LABEL_185;
                goto LABEL_191;
              }
            }
            else
            {
              v244 = 2 * v649;
              v245 = 2 * v651;
              v243 = 2 * v650;
              v246 = 4 * v656;
              v247 = 12 * v656;
              v79 = 0;
              v239 = 255;
              v260 = 10 * v656;
              v261 = 14 * v656;
              v262 = v75 | 8;
              if (v76 >= v72)
                goto LABEL_149;
            }
            v264 = v247;
            v266 = v243;
            if ((int)v262 >= v71)
            {
              v263 = 8 * v656;
              v265 = v246;
              v267 = v245;
              v268 = v76 | 8;
              if ((int)v75 < v71)
                goto LABEL_177;
            }
            else
            {
              v325 = (uint16x8_t *)(2 * (v73 + v76 * (uint64_t)(int)v74 + v262));
              v326 = (uint16x8_t *)(2 * (_QWORD)&v69[v76 * (uint64_t)v656 + v262]);
              v267 = v245;
              v265 = v246;
              v263 = 8 * v656;
              v327 = vabdq_u16(*v325, *v326);
              v328 = vabdq_u16(*(uint16x8_t *)((char *)v325 + v61), *(uint16x8_t *)((char *)v326 + 2 * v656));
              v329 = vabdq_u16(*(uint16x8_t *)((char *)v325 + 2 * v61), *(uint16x8_t *)((char *)v326 + v246));
              v330 = vabdq_u16(*(uint16x8_t *)((char *)v325 + v653), *(uint16x8_t *)((char *)v326 + 6 * v656));
              v331 = vabdq_u16(*(uint16x8_t *)((char *)v325 + v266), *(uint16x8_t *)((char *)v326 + v263));
              v332 = vabdq_u16(*(uint16x8_t *)((char *)v325 + v244), *(uint16x8_t *)((char *)v326 + v260));
              v333 = vabdq_u16(*(uint16x8_t *)((char *)v325 + 2 * v653), *(uint16x8_t *)((char *)v326 + v264));
              v334 = vabdq_u16(*(uint16x8_t *)((char *)v325 + v245), *(uint16x8_t *)((char *)v326 + v261));
              v335 = vmaxq_u16(vmaxq_u16(vmaxq_u16(v327, v328), vmaxq_u16(v329, v330)), vmaxq_u16(vmaxq_u16(v331, v332), vmaxq_u16(v333, v334)));
              v336 = vminq_u16(vminq_u16(v327, v328), vminq_u16(v329, v330));
              v337 = vminq_u16(vminq_u16(v331, v332), vminq_u16(v333, v334));
              v338 = vminq_u16(v336, v337);
              v337.i16[0] = vmaxvq_u16(v335);
              v338.i16[0] = vminvq_u16(v338);
              v72 = v692;
              if (v337.i32[0] - v338.i32[0] > v79)
                v79 = v337.i32[0] - v338.i32[0];
              if (v337.i32[0] - v338.i32[0] < v239)
                v239 = v337.i32[0] - v338.i32[0];
              v268 = v76 | 8;
              if ((int)v75 < v71)
                goto LABEL_177;
            }
LABEL_150:
            v269 = v244;
            goto LABEL_184;
          }
LABEL_134:
          v217 = v662;
          if (2 * v654 >= v214)
            v217 = 0;
          if (v217)
          {
            *(_DWORD *)&v739[v59] = 0;
            *(_DWORD *)((char *)v732 + v59) = 1;
            fill_variance_4x4avg(v73, v74, (uint64_t)v696, v656, v75, v76, (_DWORD *)(v657 + v63 * 16 + 80), v77, v71, v72, 0);
            fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v75 | 8, v76, (_DWORD *)(v657 + v63 * 16 + 736), *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 0);
            v218 = v76 | 8;
            fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v75, v218, (_DWORD *)(v657 + v63 * 16 + 1392), *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 0);
            v70 = v699;
            v74 = v679;
            fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v75 | 8, v218, (_DWORD *)(v657 + v63 * 16 + 2048), *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 0);
            v69 = v696;
            v73 = v690;
            v72 = v692;
            v71 = v682;
          }
          v65 += 8;
          v64 = v672 + 16;
          v59 += 4;
          v63 += 169;
          v62 = v668;
        }
        while (v65 != 32);
        v59 = v643 + 16;
        v62 = v668 + 681;
        v60 = v658;
        v657 += 10816;
        if (v658 == 4)
          goto LABEL_206;
      }
    }
LABEL_204:
    v737[0] = 0;
    v737[1] = 0;
    v736[0] = 0;
    v736[1] = 0;
    memset_pattern16(__b, &xmmword_208F46BD0, 0x10uLL);
    v378 = 0;
    v379 = &v700;
    v380 = 20;
    v381 = 4;
    do
    {
      v666 = v381;
      v686 = v380;
      v669 = v378;
      v382 = &v731[v380];
      v383 = (_QWORD *)((char *)v738 + v380);
      v384 = v378 & 0x20;
      *(_DWORD *)((char *)v738 + v381) = 0;
      v385 = (v686 - 20) & 0x7FFFFFE0;
      *v383 = 0;
      v383[1] = 0;
      memset_pattern16(v382, &unk_208F1A9B0, 0x10uLL);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384, v385, (_DWORD *)v379 + 60, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 8, v385, (_DWORD *)v379 + 224, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384, v385 | 8, (_DWORD *)v379 + 388, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 8, v385 | 8, (_DWORD *)v379 + 552, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 0x10, v385, (_DWORD *)v379 + 736, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 0x18, v385, (_DWORD *)v379 + 900, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 0x10, v385 | 8, (_DWORD *)v379 + 1064, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 0x18, v385 | 8, (_DWORD *)v379 + 1228, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      v385 |= 0x10u;
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384, v385, (_DWORD *)v379 + 1412, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 8, v385, (_DWORD *)v379 + 1576, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      v673 = (v686 - 20) & 0x7FFFFFE0 | 0x18;
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384, v673, (_DWORD *)v379 + 1740, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 8, v673, (_DWORD *)v379 + 1904, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 0x10, v385, (_DWORD *)v379 + 2088, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 0x18, v385, (_DWORD *)v379 + 2252, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 0x10, v673, (_DWORD *)v379 + 2416, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      fill_variance_4x4avg(v690, v679, (uint64_t)v696, v656, v384 | 0x18, v673, (_DWORD *)v379 + 2580, *(_DWORD *)(*(_QWORD *)(v699 + 25440) + 152), v682, v692, 1);
      v379 += 681;
      v380 = v686 + 16;
      v381 = v666 + 4;
      v378 = v669 + 32;
    }
    while (v686 != 68);
LABEL_206:
    v691 = (_QWORD *)(v661 + 173120);
    if (*(_DWORD *)v667)
    {
      v386 = *(_DWORD *)(v667 + 8);
      v387 = *(_DWORD *)(v667 + 12);
      if (v386 <= 2 * v387)
      {
        if (v386 <= v387)
          v388 = v386 > v387 >> 1;
        else
          v388 = 2;
      }
      else
      {
        v388 = 3;
      }
    }
    else
    {
      v388 = 1;
    }
    v389 = 0;
    v683 = 0;
    v687 = 0;
    v670 = v388;
    v678 = v388 | v689;
    v680 = 0x7FFFFFFF;
    do
    {
      while (1)
      {
        v408 = 0;
        v409 = v389;
        v410 = 4 * v389;
        v693 = 4 * v389 + 5;
        v697 = v389 + 1;
        do
        {
          if (v732[v408 + v410] == 1)
          {
            v411 = (_DWORD *)(v671 + 2704 * (v408 + v410));
            v412 = &v700 + 681 * v409 + 169 * v408;
            if (v689)
              v413 = v412 + 10;
            else
              v413 = (_DWORD *)(v671 + 2704 * (v408 + v410));
            v414 = v412 + 15;
            if (!v689)
              v414 = v411 + 20;
            v415 = (int *)(v412 + 20);
            if (!v689)
              v415 = v411 + 40;
            v416 = (int *)(v412 + 29);
            if (!v689)
              v416 = v411 + 76;
            v417 = (int *)(v412 + 38);
            if (!v689)
              v417 = v411 + 112;
            v418 = v411 + 148;
            if (v689)
              v418 = (int *)(v412 + 47);
            v419 = *v416;
            v420 = v416[1];
            v422 = *v415;
            v421 = v415[1];
            v423 = v415[2];
            v414[4] = *v415 + *v416;
            v414[5] = v421 + v420;
            v414[6] = v423 + 1;
            v424 = *v418;
            v425 = v418[1];
            v427 = *v417;
            v426 = v417[1];
            v428 = *v417 + v424;
            v429 = v417[2] + 1;
            v414[8] = v428;
            v414[9] = v426 + v425;
            v414[10] = v429;
            v430 = v426 + v421;
            v414[12] = v427 + v422;
            v414[13] = v426 + v421;
            v414[14] = v423 + 1;
            v431 = v424 + v419;
            v432 = v416[2] + 1;
            v414[16] = v431;
            v414[17] = v425 + v420;
            v414[18] = v432;
            v433 = v427 + v422 + v431;
            v434 = v430 + v425 + v420;
            *v414 = v433;
            v414[1] = v434;
            v414[2] = v423 + 2;
            if (v689)
              v435 = (int *)(v412 + 56);
            else
              v435 = v411 + 184;
            v436 = (int *)(v412 + 61);
            if (!v689)
              v436 = v411 + 204;
            v437 = (int *)(v412 + 70);
            if (!v689)
              v437 = v411 + 240;
            v438 = (int *)(v412 + 79);
            if (!v689)
              v438 = v411 + 276;
            v439 = (int *)(v412 + 88);
            if (!v689)
              v439 = v411 + 312;
            v441 = *v437;
            v440 = v437[1];
            v442 = *v436;
            v443 = v436[1];
            v444 = v436[2];
            v435[4] = *v436 + *v437;
            v435[5] = v443 + v440;
            v435[6] = v444 + 1;
            v445 = *v439;
            v446 = v439[1];
            v447 = *v438;
            v448 = v438[1];
            v449 = v438[2] + 1;
            v435[8] = v447 + v445;
            v435[9] = v448 + v446;
            v435[10] = v449;
            v450 = v448 + v443;
            v435[12] = v447 + v442;
            v435[13] = v450;
            v435[14] = v444 + 1;
            v451 = v446 + v440;
            v452 = v437[2] + 1;
            v435[16] = v445 + v441;
            v435[17] = v451;
            v435[18] = v452;
            v453 = v447 + v442 + v445 + v441;
            *v435 = v453;
            v435[1] = v450 + v451;
            v435[2] = v444 + 2;
            v454 = (int *)(v412 + 97);
            if (!v689)
              v454 = v411 + 348;
            v455 = (int *)(v412 + 102);
            if (!v689)
              v455 = v411 + 368;
            v456 = (int *)(v412 + 111);
            if (!v689)
              v456 = v411 + 404;
            v457 = (int *)(v412 + 120);
            if (!v689)
              v457 = v411 + 440;
            v458 = (int *)(v412 + 129);
            if (!v689)
              v458 = v411 + 476;
            v460 = *v456;
            v459 = v456[1];
            v461 = *v455;
            v462 = v455[1];
            v463 = v455[2];
            v454[4] = *v455 + *v456;
            v454[5] = v462 + v459;
            v454[6] = v463 + 1;
            v464 = *v458;
            v465 = v458[1];
            v466 = *v457;
            v467 = v457[1];
            v468 = *v457 + v464;
            v469 = v457[2] + 1;
            v454[8] = v468;
            v454[9] = v467 + v465;
            v454[10] = v469;
            v470 = v467 + v462;
            v454[12] = v466 + v461;
            v454[13] = v470;
            v454[14] = v463 + 1;
            v471 = v456[2] + 1;
            v454[16] = v464 + v460;
            v454[17] = v465 + v459;
            v454[18] = v471;
            v472 = v466 + v461 + v464 + v460;
            v473 = v470 + v465 + v459;
            *v454 = v472;
            v454[1] = v473;
            v454[2] = v463 + 2;
            v474 = v412 + 138;
            if (!v689)
              v474 = v411 + 512;
            v475 = (int *)(v412 + 143);
            if (!v689)
              v475 = v411 + 532;
            v476 = (int *)(v412 + 152);
            if (!v689)
              v476 = v411 + 568;
            v477 = (int *)(v412 + 161);
            if (!v689)
              v477 = v411 + 604;
            v478 = (int *)(v412 + 170);
            if (!v689)
              v478 = v411 + 640;
            v479 = *v476;
            v480 = v476[1];
            v481 = *v475;
            v482 = v475[1];
            v483 = v475[2];
            v474[4] = v481 + *v476;
            v474[5] = v482 + v480;
            v474[6] = v483 + 1;
            v484 = *v478;
            v485 = v478[1];
            v486 = *v477;
            v487 = v477[1];
            v488 = *v477 + v484;
            v489 = v477[2];
            v474[8] = v488;
            v474[9] = v487 + v485;
            v474[10] = v489 + 1;
            v474[13] = v487 + v482;
            v474[14] = v483 + 1;
            v490 = v484 + v479;
            v491 = v485 + v480;
            v474[12] = v486 + v481;
            v492 = v476[2] + 1;
            v474[17] = v491;
            v474[18] = v492;
            v493 = v486 + v481 + v490;
            v474[16] = v490;
            v494 = v487 + v482 + v491;
            *v474 = v493;
            v474[1] = v494;
            v474[2] = v483 + 2;
            v495 = v435[1];
            v413[4] = v453 + v433;
            v413[5] = v495 + v434;
            v413[8] = v493 + v472;
            v413[9] = v494 + v473;
            v413[10] = v463 + 3;
            v496 = v472 + v433;
            v413[6] = v423 + 3;
            v413[13] = v473 + v434;
            v413[14] = v423 + 3;
            v497 = v493 + v453;
            v498 = v494 + v495;
            v413[17] = v498;
            v413[18] = v444 + 3;
            v413[16] = v497;
            v499 = v497 + v496;
            v413[12] = v496;
            v500 = v498 + v473 + v434;
            *v413 = v499;
            v413[1] = v500;
            v501 = (v499 - ((unint64_t)(v500 * (uint64_t)v500) >> (v423 + 4))) << 8 >> (v423 + 4);
            v413[2] = v423 + 4;
            v413[3] = v501;
            if ((uint64_t)v734 < v501)
            {
              v738[v693 + v408] = 1;
              v738[v697] = 1;
              v738[0] = 1;
            }
          }
          ++v408;
        }
        while (v408 != 4);
        v390 = &v700 + 681 * v409;
        v391 = *((_DWORD *)v390 + 716);
        v392 = *((_DWORD *)v390 + 40);
        v393 = *((_DWORD *)v390 + 41);
        v394 = *((_DWORD *)v390 + 42);
        *((_DWORD *)v390 + 24) = v392 + v391;
        *((_DWORD *)v390 + 26) = v394 + 1;
        v395 = *((_DWORD *)v390 + 2068);
        v396 = *((_DWORD *)v390 + 1392);
        *((_DWORD *)v390 + 28) = v396 + v395;
        v397 = *(int32x2_t *)((char *)v390 + 5572);
        v398.i32[1] = 1;
        v398.i32[0] = *((_DWORD *)v390 + 2069);
        *(int32x2_t *)((char *)v390 + 116) = vadd_s32(v397, v398);
        v399 = v396 + v392;
        v400 = v397.i32[0] + v393;
        *((_DWORD *)v390 + 32) = v399;
        *((_DWORD *)v390 + 33) = v397.i32[0] + v393;
        *((_DWORD *)v390 + 34) = v394 + 1;
        v401 = v395 + v391;
        *((_DWORD *)v390 + 36) = v401;
        v402 = *(int32x2_t *)((char *)v390 + 2868);
        v403 = v399 + v401;
        *((_DWORD *)v390 + 20) = v399 + v401;
        v404 = v390 + 5;
        v405 = vadd_s32(v402, v398);
        *((_DWORD *)v404 + 5) = v393 + v402.i32[0];
        *(int32x2_t *)((char *)v404 + 68) = v405;
        *((_DWORD *)v404 + 1) = v400 + v405.i32[0];
        *((_DWORD *)v404 + 2) = v394 + 2;
        v389 = v697;
        if (!v738[v697])
          break;
        if (v697 == 4)
          goto LABEL_279;
      }
      v407 = v394 + 2;
      v406 = v400 + v405.i32[0];
      v502 = (v403 - ((unint64_t)(v406 * (uint64_t)v406) >> v407)) << 8 >> v407;
      *((_DWORD *)v404 + 3) = v502;
      v503 = v683;
      if (v502 > v683)
        v503 = (v403 - ((unint64_t)(v406 * (uint64_t)v406) >> v407)) << 8 >> v407;
      v683 = v503;
      v504 = v680;
      if (v502 < v680)
        v504 = (v403 - ((unint64_t)(v406 * (uint64_t)v406) >> v407)) << 8 >> v407;
      v680 = v504;
      if (v733.i64[1] < v502
        || (v505 = v733.i64[1] >> 1, !v689) && v505 < v502 && v502 > *((int *)v737 + v409) >> 1
        || !v678
        && *(int *)(v660 + 4) <= 360
        && (v506 = *(int *)((char *)v736 + v410), v733.i64[1] < v506)
        && v505 < v506 - *(int *)&__b[v410])
      {
        v738[v697] = 1;
        v738[0] = 1;
      }
      v687 += v502;
    }
    while (v697 != 4);
LABEL_279:
    v507 = v738[0];
    LODWORD(v508) = v644;
    if (v738[0])
    {
LABEL_280:
      if ((int)v645 + 8 > *(_DWORD *)(v660 + 1028)
        || (signed int)(v644 + 8) > *(_DWORD *)(v660 + 1020)
        || (v509 = set_vt_partitioning(v661, v699, v659, &v700, 0xCu, v644, v645, v733.i64[0], 6u, v507),
            v510 = v660,
            v508 = v644,
            !v509))
      {
        v518 = 0;
        v519 = v739;
        v688 = v706;
        v698 = v732;
        do
        {
          v694 = 4 * v518;
          v520 = ((2 * v518) & 0x7FFFFFFC) + v508;
          v521 = ((4 * v518) & 4) + v645;
          v684 = v518 + 1;
          v522 = set_vt_partitioning(v661, v699, v659, &v705[681 * v518], 9u, v520, v521, v733.i64[1], 6u, v738[v518 + 1]);
          v510 = v660;
          if (!v522)
          {
            if (v642)
            {
              v523 = 0;
              v524 = 0;
              v525 = v688;
              do
              {
                v526 = v525;
                if (!v689)
                {
                  if (v698[v524] == 1)
                    v526 = (_DWORD *)(v671 + 2704 * (v524 + v694));
                  else
                    v526 = v525;
                }
                v527 = (v524 & 0x7FFFFFFE) + v520;
                v528 = (v523 & 2) + v521;
                v529 = set_vt_partitioning(v661, v699, v659, v526, 6u, v527, v528, v734, *(_BYTE *)(v667 + 104), *(_DWORD *)&v519[4 * v524]);
                v510 = v660;
                if (!v529)
                {
                  v530 = *(_DWORD *)(v660 + 984);
                  v531 = *(_DWORD *)(v660 + 1028);
                  if (!v530 || *(_BYTE *)(v660 + 1000))
                    v526[23] = (v526[20]
                              - ((unint64_t)((int)v526[21] * (uint64_t)(int)v526[21]) >> v526[22])) << 8 >> v526[22];
                  v532 = *((_QWORD *)&v734 + 1);
                  if (v528 < v531 && v527 < *(_DWORD *)(v660 + 1020))
                  {
                    v533 = v528 + *(_DWORD *)(v699 + 25352) * v527;
                    v534 = *(_QWORD *)(v661 + 173176);
                    if (*((uint64_t *)&v734 + 1) <= (int)v526[23])
                      v535 = 0;
                    else
                      v535 = 3;
                    *(_QWORD *)(v699 + 25360) = v534 + 8 * v533;
                    *(_QWORD *)(v534 + 8 * v533) = *v691 + 68 * v533;
                    *(_QWORD *)(v699 + 25568) = *(_QWORD *)(v699 + 25576) + 36 * (v528 + v531 * v527);
                    ***(_BYTE ***)(v699 + 25360) = v535;
                  }
                  if (!v530 || *(_BYTE *)(v660 + 1000))
                    v526[187] = (v526[184]
                               - ((unint64_t)((int)v526[185] * (uint64_t)(int)v526[185]) >> v526[186])) << 8 >> v526[186];
                  v536 = v528 + 1;
                  if (v528 + 1 < v531 && v527 < *(_DWORD *)(v660 + 1020))
                  {
                    v537 = v536 + *(_DWORD *)(v699 + 25352) * v527;
                    v538 = *(_QWORD *)(v661 + 173176);
                    if (v532 <= (int)v526[187])
                      v539 = 0;
                    else
                      v539 = 3;
                    *(_QWORD *)(v699 + 25360) = v538 + 8 * v537;
                    *(_QWORD *)(v538 + 8 * v537) = *v691 + 68 * v537;
                    *(_QWORD *)(v699 + 25568) = *(_QWORD *)(v699 + 25576) + 36 * (v536 + v531 * v527);
                    ***(_BYTE ***)(v699 + 25360) = v539;
                  }
                  if (!v530 || *(_BYTE *)(v660 + 1000))
                    v526[351] = (v526[348]
                               - ((unint64_t)((int)v526[349] * (uint64_t)(int)v526[349]) >> v526[350])) << 8 >> v526[350];
                  v540 = v527 + 1;
                  if (v528 < v531 && v540 < *(_DWORD *)(v660 + 1020))
                  {
                    v541 = v528 + *(_DWORD *)(v699 + 25352) * v540;
                    v542 = *(_QWORD *)(v661 + 173176);
                    if (v532 <= (int)v526[351])
                      v543 = 0;
                    else
                      v543 = 3;
                    *(_QWORD *)(v699 + 25360) = v542 + 8 * v541;
                    *(_QWORD *)(v542 + 8 * v541) = *v691 + 68 * v541;
                    *(_QWORD *)(v699 + 25568) = *(_QWORD *)(v699 + 25576) + 36 * (v528 + v531 * v540);
                    ***(_BYTE ***)(v699 + 25360) = v543;
                  }
                  if (!v530 || *(_BYTE *)(v660 + 1000))
                    v526[515] = (v526[512]
                               - ((unint64_t)((int)v526[513] * (uint64_t)(int)v526[513]) >> v526[514])) << 8 >> v526[514];
                  if (v536 < v531 && v540 < *(_DWORD *)(v660 + 1020))
                  {
                    v544 = v536 + *(_DWORD *)(v699 + 25352) * v540;
                    v545 = *(_QWORD *)(v661 + 173176);
                    if (v532 <= (int)v526[515])
                      v546 = 0;
                    else
                      v546 = 3;
                    *(_QWORD *)(v699 + 25360) = v545 + 8 * v544;
                    *(_QWORD *)(v545 + 8 * v544) = *v691 + 68 * v544;
                    *(_QWORD *)(v699 + 25568) = *(_QWORD *)(v699 + 25576) + 36 * (v536 + v531 * v540);
                    ***(_BYTE ***)(v699 + 25360) = v546;
                  }
                }
                ++v524;
                v525 += 676;
                v523 += 2;
              }
              while (v524 != 4);
            }
            else
            {
              v547 = 0;
              v548 = 0;
              v549 = v688;
              do
              {
                v550 = v549;
                if (!v689)
                {
                  if (v698[v548] == 1)
                    v550 = (_DWORD *)(v671 + 2704 * (v548 + v694));
                  else
                    v550 = v549;
                }
                v551 = (v548 & 0x7FFFFFFE) + v520;
                v552 = (v547 & 2) + v521;
                v553 = set_vt_partitioning(v661, v699, v659, v550, 6u, v551, v552, v734, *(_BYTE *)(v667 + 104), *(_DWORD *)&v519[4 * v548]);
                v510 = v660;
                if (!v553)
                {
                  v554 = *(_DWORD *)(v660 + 1028);
                  if (v554 > v552 && *(_DWORD *)(v660 + 1020) > v551)
                  {
                    v555 = v552 + *(_DWORD *)(v699 + 25352) * v551;
                    v556 = *(_QWORD *)(v661 + 173176);
                    v557 = 8 * v555;
                    *(_QWORD *)(v699 + 25360) = v556 + v557;
                    *(_QWORD *)(v556 + v557) = *v691 + 68 * v555;
                    *(_QWORD *)(v699 + 25568) = *(_QWORD *)(v699 + 25576) + 36 * (v552 + v554 * v551);
                    ***(_BYTE ***)(v699 + 25360) = 3;
                  }
                  v558 = v552 + 1;
                  if (v554 > v552 + 1 && *(_DWORD *)(v660 + 1020) > v551)
                  {
                    v559 = v558 + *(_DWORD *)(v699 + 25352) * v551;
                    v560 = *(_QWORD *)(v661 + 173176);
                    v561 = 8 * v559;
                    *(_QWORD *)(v699 + 25360) = v560 + v561;
                    *(_QWORD *)(v560 + v561) = *v691 + 68 * v559;
                    *(_QWORD *)(v699 + 25568) = *(_QWORD *)(v699 + 25576) + 36 * (v558 + v554 * v551);
                    ***(_BYTE ***)(v699 + 25360) = 3;
                  }
                  v562 = v551 + 1;
                  if (v554 > v552 && *(_DWORD *)(v660 + 1020) > v562)
                  {
                    v563 = v552 + *(_DWORD *)(v699 + 25352) * v562;
                    v564 = *(_QWORD *)(v661 + 173176);
                    v565 = 8 * v563;
                    *(_QWORD *)(v699 + 25360) = v564 + v565;
                    *(_QWORD *)(v564 + v565) = *v691 + 68 * v563;
                    *(_QWORD *)(v699 + 25568) = *(_QWORD *)(v699 + 25576) + 36 * (v552 + v554 * v562);
                    ***(_BYTE ***)(v699 + 25360) = 3;
                  }
                  if (v554 > v558 && *(_DWORD *)(v660 + 1020) > v562)
                  {
                    v566 = v558 + *(_DWORD *)(v699 + 25352) * v562;
                    v567 = *(_QWORD *)(v661 + 173176);
                    v568 = 8 * v566;
                    *(_QWORD *)(v699 + 25360) = v567 + v568;
                    *(_QWORD *)(v567 + v568) = *v691 + 68 * v566;
                    *(_QWORD *)(v699 + 25568) = *(_QWORD *)(v699 + 25576) + 36 * (v558 + v554 * v562);
                    ***(_BYTE ***)(v699 + 25360) = 3;
                  }
                }
                ++v548;
                v549 += 676;
                v547 += 2;
              }
              while (v548 != 4);
            }
          }
          v519 += 16;
          v518 = v684;
          v688 += 681;
          v698 += 4;
          v508 = v644;
        }
        while (v684 != 4);
      }
      if (*(_DWORD *)(v510 + 984))
      {
        if (!*(_BYTE *)(v510 + 1000))
        {
          if (!*(_DWORD *)(v641 + 1524))
            goto LABEL_375;
          update_prev_partition_helper(v661, 0xCu, v508, v645);
          v510 = v660;
          v508 = v644;
          *(_BYTE *)(*(_QWORD *)(v667 + 8224) + v638) = v634;
          v569 = (_OWORD *)(*(_QWORD *)(v667 + 8232) + 25 * (int)v638);
          v570 = *v633;
          *(_OWORD *)((char *)v569 + 9) = *(_OWORD *)(v647 + 50);
          *v569 = v570;
          *(_BYTE *)(*(_QWORD *)(v667 + 8240) + v638) = 0;
          if (*(_DWORD *)(v660 + 984))
          {
            if (!*(_BYTE *)(v660 + 1000))
            {
LABEL_375:
              if (*(_DWORD *)(v641 + 1556) && *v640 == v640[2] - 2)
              {
                update_partition_svc(v661, 0xCu, v508, v645);
                v510 = v660;
                LODWORD(v508) = v644;
              }
            }
          }
        }
      }
      v511 = *(_DWORD *)(v641 + 1508);
      if (!v511)
        goto LABEL_593;
      v512 = *(int *)v510 <= 640 ? -4 : -8;
      v513 = *(int *)v510 <= 640 ? 4 : 8;
      if (v635 != 1)
        goto LABEL_593;
      v514 = **(unsigned __int8 ***)(v699 + 25360);
      if (v511 != 1)
      {
        v571 = *((__int16 *)v514 + 7);
        if (v513 <= v571 || v512 >= v571)
          goto LABEL_593;
        v573 = *((__int16 *)v514 + 6);
        if (v513 <= v573 || v512 >= v573)
          goto LABEL_593;
      }
      v515 = *v514;
      switch(v515)
      {
        case 12:
          if (SHIDWORD(v700) < v733.i64[0] >> 1)
          {
LABEL_479:
            *(_BYTE *)v633 = 1;
            goto LABEL_593;
          }
          goto LABEL_593;
        case 11:
          v609 = v733.i64[0] >> 2;
          if (v733.i64[0] >> 2 > SHIDWORD(v701))
            *(_BYTE *)(v647 + 42) = 1;
          if (v609 <= SHIDWORD(v702))
            goto LABEL_593;
          v517 = (__int128 *)(v647 + 43);
          goto LABEL_478;
        case 10:
          v516 = v733.i64[0] >> 2;
          if (v733.i64[0] >> 2 > SHIDWORD(v703))
            *(_BYTE *)(v647 + 44) = 1;
          if (v516 <= SHIDWORD(v704))
            goto LABEL_593;
          v517 = (__int128 *)(v647 + 45);
          goto LABEL_478;
      }
      if (*(_DWORD *)(v510 + 1028) <= (int)v645 || *(_DWORD *)(v510 + 1020) <= (int)v508)
        goto LABEL_532;
      v610 = **(unsigned __int8 **)(*(_QWORD *)(v661 + 173176) + 8
                                                               * ((int)v645 + *(_DWORD *)(v510 + 1032) * (int)v508));
      if (v610 == 9)
      {
        if ((v511 | 2) == 3)
          v611 = (5 * v733.i64[1]) >> 3;
        else
          v611 = v733.i64[1] >> 1;
        if (v611 > SHIDWORD(v705[0]))
        {
          v615 = (_BYTE *)(v647 + 46);
          goto LABEL_531;
        }
LABEL_532:
        v616 = v645 + 4;
        if (*(_DWORD *)(v510 + 1028) <= (int)v645 + 4 || *(_DWORD *)(v510 + 1020) <= (int)v508)
          goto LABEL_554;
        v617 = **(unsigned __int8 **)(*(_QWORD *)(v661 + 173176) + 8 * (v616 + *(_DWORD *)(v510 + 1032) * (int)v508));
        v618 = *(_DWORD *)(v641 + 1508);
        if (v617 == 9)
        {
          if ((v618 | 2) == 3)
            v619 = (5 * v733.i64[1]) >> 3;
          else
            v619 = v733.i64[1] >> 1;
          if (v619 > v712)
          {
            v622 = (_BYTE *)(v647 + 47);
            goto LABEL_553;
          }
LABEL_554:
          v623 = v508 + 4;
          if (*(_DWORD *)(v510 + 1028) <= (int)v645 || *(_DWORD *)(v510 + 1020) <= v623)
            goto LABEL_574;
          v624 = **(unsigned __int8 **)(*(_QWORD *)(v661 + 173176) + 8 * ((int)v645 + *(_DWORD *)(v510 + 1032) * v623));
          v625 = *(_DWORD *)(v641 + 1508);
          if (v624 == 9)
          {
            if ((v625 | 2) == 3)
              v626 = (5 * v733.i64[1]) >> 3;
            else
              v626 = v733.i64[1] >> 1;
            if (v626 > v719)
            {
              v628 = (_BYTE *)(v647 + 48);
              goto LABEL_573;
            }
LABEL_574:
            if (*(_DWORD *)(v510 + 1028) <= v616 || *(_DWORD *)(v510 + 1020) <= v623)
              goto LABEL_593;
            v629 = **(unsigned __int8 **)(*(_QWORD *)(v661 + 173176) + 8 * (v616 + *(_DWORD *)(v510 + 1032) * v623));
            v630 = *(_DWORD *)(v641 + 1508);
            if (v629 == 9)
            {
              if ((v630 | 2) == 3)
                v631 = (5 * v733.i64[1]) >> 3;
              else
                v631 = v733.i64[1] >> 1;
              if (v631 > v726)
              {
                v517 = (__int128 *)(v647 + 49);
                goto LABEL_478;
              }
LABEL_593:
              chroma_check(v661, v699, v637, v636, v689, v639);
              if (v671)
                free(*(void **)(v671 - 8));
              return;
            }
            if ((v629 - 6) > 2 || v630 < 2)
              goto LABEL_593;
            v632 = (uint64_t)v734 >> 8;
            if ((uint64_t)v734 >> 8 <= v727)
            {
              if (v632 <= v728)
              {
LABEL_583:
                if (v632 > v729)
                  goto LABEL_584;
                goto LABEL_588;
              }
            }
            else
            {
              *(_BYTE *)(v647 + 62) = 1;
              if (v632 <= v728)
                goto LABEL_583;
            }
            *(_BYTE *)(v647 + 63) = 1;
            if (v632 > v729)
            {
LABEL_584:
              *(_BYTE *)(v647 + 64) = 1;
              if (v632 <= v730)
                goto LABEL_593;
              goto LABEL_589;
            }
LABEL_588:
            if (v632 <= v730)
              goto LABEL_593;
LABEL_589:
            v517 = (__int128 *)(v647 + 65);
LABEL_478:
            v633 = v517;
            goto LABEL_479;
          }
          if ((v624 - 6) > 2 || v625 < 2)
            goto LABEL_574;
          v627 = (uint64_t)v734 >> 8;
          if ((uint64_t)v734 >> 8 <= v720)
          {
            if (v627 <= v721)
            {
LABEL_563:
              if (v627 > v722)
                goto LABEL_564;
              goto LABEL_568;
            }
          }
          else
          {
            *(_BYTE *)(v647 + 58) = 1;
            if (v627 <= v721)
              goto LABEL_563;
          }
          *(_BYTE *)(v647 + 59) = 1;
          if (v627 > v722)
          {
LABEL_564:
            *(_BYTE *)(v647 + 60) = 1;
            if (v627 <= v723)
              goto LABEL_574;
LABEL_569:
            v628 = (_BYTE *)(v647 + 61);
LABEL_573:
            *v628 = 1;
            goto LABEL_574;
          }
LABEL_568:
          if (v627 <= v723)
            goto LABEL_574;
          goto LABEL_569;
        }
        if ((v617 - 6) > 2 || v618 < 2)
          goto LABEL_554;
        v621 = (uint64_t)v734 >> 8;
        if ((uint64_t)v734 >> 8 <= v713)
        {
          if (v621 <= v714)
          {
LABEL_543:
            if (v621 > v715)
              goto LABEL_544;
            goto LABEL_548;
          }
        }
        else
        {
          *(_BYTE *)(v647 + 54) = 1;
          if (v621 <= v714)
            goto LABEL_543;
        }
        *(_BYTE *)(v647 + 55) = 1;
        if (v621 > v715)
        {
LABEL_544:
          *(_BYTE *)(v647 + 56) = 1;
          if (v621 <= v716)
            goto LABEL_554;
LABEL_549:
          v622 = (_BYTE *)(v647 + 57);
LABEL_553:
          *v622 = 1;
          goto LABEL_554;
        }
LABEL_548:
        if (v621 <= v716)
          goto LABEL_554;
        goto LABEL_549;
      }
      if (v511 < 2 || (v610 - 6) > 2)
        goto LABEL_532;
      v614 = (uint64_t)v734 >> 8;
      if ((uint64_t)v734 >> 8 <= SHIDWORD(v706[0]))
      {
        if (v614 <= v707)
        {
LABEL_517:
          if (v614 > v708)
            goto LABEL_518;
          goto LABEL_522;
        }
      }
      else
      {
        *(_BYTE *)(v647 + 50) = 1;
        if (v614 <= v707)
          goto LABEL_517;
      }
      *(_BYTE *)(v647 + 51) = 1;
      if (v614 > v708)
      {
LABEL_518:
        *(_BYTE *)(v647 + 52) = 1;
        if (v614 <= v709)
          goto LABEL_532;
LABEL_523:
        v615 = (_BYTE *)(v647 + 53);
LABEL_531:
        *v615 = 1;
        goto LABEL_532;
      }
LABEL_522:
      if (v614 <= v709)
        goto LABEL_532;
      goto LABEL_523;
    }
    DWORD2(v701) = DWORD2(v705[0]) + 1;
    LODWORD(v702) = v717 + v724;
    *(int32x2_t *)((char *)&v702 + 4) = vadd_s32(v718, (int32x2_t)(v725 | 0x100000000));
    LODWORD(v703) = v717 + LODWORD(v705[0]);
    DWORD1(v703) = v718.i32[0] + DWORD1(v705[0]);
    DWORD2(v703) = DWORD2(v705[0]) + 1;
    LODWORD(v704) = v724 + v710;
    LODWORD(v701) = LODWORD(v705[0]) + v710;
    DWORD1(v701) = DWORD1(v705[0]) + v711.i32[0];
    *(int32x2_t *)((char *)&v704 + 4) = vadd_s32(v711, (int32x2_t)(v725 | 0x100000000));
    LODWORD(v700) = v717 + LODWORD(v705[0]) + v724 + v710;
    DWORD1(v700) = v718.i32[0] + DWORD1(v705[0]) + DWORD1(v704);
    DWORD2(v700) = DWORD2(v705[0]) + 2;
    HIDWORD(v700) = (v700
                   - ((unint64_t)(SDWORD1(v700) * (uint64_t)SDWORD1(v700)) >> (BYTE8(v705[0]) + 2))) << 8 >> (BYTE8(v705[0]) + 2);
    if (v689 || v670 < 2)
    {
      v507 = 0;
      if (v689)
        goto LABEL_280;
      if (v670 > 1)
        goto LABEL_280;
      v507 = 0;
      if (3 * (v733.i64[0] >> 3) >= v683 - v680 || v733.i64[0] >> 1 >= v683)
        goto LABEL_280;
    }
    else if ((int)((v700
                   - ((unint64_t)(SDWORD1(v700) * (uint64_t)SDWORD1(v700)) >> (BYTE8(v705[0]) + 2))) << 8 >> (BYTE8(v705[0]) + 2)) <= (9 * v687) >> 5)
    {
      v507 = 0;
      goto LABEL_280;
    }
    v507 = 1;
    v738[0] = 1;
    goto LABEL_280;
  }
  v52 = **(_QWORD **)(v699 + 25360);
  v53 = *v13;
  if ((_DWORD)v53 == -1)
  {
    v56 = 0;
    v55 = v659;
  }
  else
  {
    v54 = *(_DWORD *)(v661 + 4 * v53 + 172048);
    v55 = v659;
    if (v54 == -1)
      v56 = 0;
    else
      v56 = *(_QWORD *)(v9 + 13472) + 224 * v54 + 88;
  }
  if ((int)v645 + 4 >= *(_DWORD *)(v40 + 1028))
    v574 = 9;
  else
    v574 = 11;
  if (v39 + 4 >= *(_DWORD *)(v40 + 1020))
    v47 = v574;
  else
    v47 = v574 + 1;
  v676 = v39 + 4;
  if (*(_DWORD *)(v8 + 7284) && !*(_DWORD *)(v9 + 13604) && *v640 && !*(_DWORD *)v695
    || (v575 = v13[1], (_DWORD)v575 == -1)
    || (v576 = *(_DWORD *)(v661 + 4 * v575 + 172048), v576 == -1))
  {
    v681 = 0;
    v578 = -1;
  }
  else
  {
    v577 = *(_QWORD *)(v9 + 13472) + 224 * v576 + 88;
    v578 = -1;
    v681 = v577;
    if (v41 <= 7 && v577 != v56 && (*(_BYTE *)(v641 + 932) & 2) != 0)
    {
      vp9_setup_pre_planes(v55, 0, v577, v39, v645, v661 + 172304);
      v579 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v661 + (v47 << 6) + 740464))(*(_QWORD *)(v699 + 8216), *(unsigned int *)(v699 + 8224), *(_QWORD *)(v699 + 24944), *(unsigned int *)(v699 + 24952));
      v55 = v659;
      v39 = v644;
      v578 = v579;
    }
  }
  if (*(int *)(v9 + 13616) < 1 || *(_DWORD *)(v9 + 13620) || !*(_DWORD *)v641)
  {
    vp9_setup_pre_planes(v55, 0, v56, v39, v645, v661 + 172128);
    v580 = 1;
    v581 = v685;
  }
  else
  {
    v592 = v13[2];
    if ((_DWORD)v592 == -1 || (v593 = *(_DWORD *)(v661 + 4 * v592 + 172048), v593 == -1))
      v594 = 0;
    else
      v594 = *(_QWORD *)(v9 + 13472) + 224 * v593 + 88;
    v581 = v685;
    vp9_setup_pre_planes(v55, 0, v594, v39, v645, v661 + 172480);
    v578 = -1;
    v580 = 3;
  }
  *(_BYTE *)(v52 + 8) = v580;
  *(_BYTE *)(v52 + 9) = -1;
  *(_BYTE *)v52 = 12;
  *(_DWORD *)(v52 + 12) = 0;
  *(_BYTE *)(v52 + 7) = 3;
  v582 = *(int *)(v9 + 13584) < 8 || v581;
  if ((v582 & 1) == 0 && *(_BYTE *)(v647 + 40) != 6)
  {
    v583 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v661 + (v47 << 6) + 740464))(*(_QWORD *)(v699 + 8216), *(unsigned int *)(v699 + 8224), *(_QWORD *)(v699 + 24944), *(unsigned int *)(v699 + 24952));
    v584 = (_DWORD *)v647;
    goto LABEL_431;
  }
  v732[0] = 0;
  v583 = vp9_int_pro_motion_estimation(v661, v699, v47, v644, v645, (__int16 *)v732);
  v584 = (_DWORD *)v647;
  *(_DWORD *)(v647 + 20) = 1;
  v585 = *(__int16 *)(v52 + 14);
  *(_DWORD *)(v647 + 24) = v585;
  v586 = *(__int16 *)(v52 + 12);
  *(_DWORD *)(v647 + 28) = v586;
  if (*(_DWORD *)(v9 + 13908) != 1)
  {
LABEL_431:
    v587 = v644;
    v48 = v578;
    v588 = v659;
    goto LABEL_432;
  }
  v587 = v644;
  v588 = v659;
  v48 = v578;
  if (*v640 != *(_DWORD *)(v695 + 656)
    || !*(_DWORD *)(v695 + 488)
    || *(_DWORD *)(v647 + 36)
    || *(int *)v660 < 641
    || *(int *)(v660 + 4) < 481)
  {
    goto LABEL_432;
  }
  if (v586 < 0)
    v586 = -v586;
  if (v585 < 0)
    v585 = -v585;
  if (v586 < 0x30 || v585 >= 9)
  {
    if (v585 < 0x30 || v586 > 8 || v583 >= 0x186A0)
      goto LABEL_432;
  }
  else if (v583 >> 5 > 0xC34)
  {
    goto LABEL_432;
  }
  v655 = 0;
  *(_QWORD *)&v734 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_432:
  if (*(_DWORD *)(v641 + 1508))
    v589 = (7 * v583) >> 3;
  else
    v589 = v583;
  if (v48 >= v589)
  {
    *v584 = *(_DWORD *)(v52 + 12);
    v590 = *(unsigned __int8 *)(v52 + 9);
    v635 = 1;
    if (*(char *)(v52 + 8) < 1)
      v591 = 0;
    else
      v591 = *(unsigned __int8 *)(v52 + 8) - 1;
    v48 = v583;
  }
  else
  {
    vp9_setup_pre_planes(v588, 0, v681, v587, v645, v661 + 172304);
    v588 = v659;
    v587 = v644;
    v635 = 2;
    *(_BYTE *)(v52 + 8) = 2;
    *(_DWORD *)(v52 + 12) = 0;
    v590 = *(unsigned __int8 *)(v52 + 9);
    v591 = 1;
  }
  *(_QWORD *)(v699 + 25424) = v661 + 172112 + 176 * v591;
  v595 = (char)v590;
  v596 = v590 - 1;
  if (v595 <= 0)
    v596 = 0;
  *(_QWORD *)(v699 + 25432) = v661 + 172112 + 176 * v596;
  build_inter_predictors_for_planes(v588, 12, v587, v645, 0, 2);
  if (*(_DWORD *)(v695 + 7452))
  {
    v597 = 0;
    v598 = (int)v645 < 8 || v581;
    if (*(_DWORD *)(v660 + 32))
      goto LABEL_491;
    if ((v598 & 1) != 0)
      goto LABEL_491;
    v597 = 0;
    if ((int)v644 < 8)
      goto LABEL_491;
    v599 = *(_DWORD *)(v660 + 1028);
    if ((int)v645 + 8 >= v599)
      goto LABEL_491;
    v600 = *(_DWORD *)(v660 + 1020);
    if ((int)(v644 + 8) >= v600)
      goto LABEL_490;
    v597 = 0;
    v601 = v600 - v644;
    if ((int)(v600 - v644) >= 8)
      v602 = 8;
    else
      v602 = v600 - v644;
    if (v601 < 1)
      goto LABEL_491;
    LODWORD(v603) = v599 - v645;
    if (v599 - (int)v645 < 1)
      goto LABEL_491;
    v604 = 0;
    v605 = 0;
    v606 = 0;
    v603 = (int)v603 >= 8 ? 8 : v603;
    do
    {
      v607 = 0;
      while (1)
      {
        v608 = *(unsigned __int8 *)(*(_QWORD *)v8 + (int)(v645 + (v604 + v644) * v599 + v607));
        v606 += v608;
        v605 = v605 - v608 + 1;
        if (v605 >= 4)
          break;
        v607 += 2;
        if (v607 >= v603)
          goto LABEL_465;
      }
      v604 = v602;
LABEL_465:
      v604 += 2;
    }
    while (v604 < v602);
    if (v606 >= 13)
    {
      v597 = 1;
      v738[0] = 1;
    }
    else
    {
LABEL_490:
      v597 = 0;
    }
LABEL_491:
    *(_BYTE *)(v647 + 14) = v597;
  }
  v612 = *(char **)(v699 + 24928);
  v656 = *(_DWORD *)(v699 + 24936);
  if ((_BYTE)v28
    || *(_QWORD *)(v667 + 88) <= (uint64_t)v48
    || (int)v645 + 4 >= *(_DWORD *)(v660 + 1028)
    || v676 >= *(_DWORD *)(v660 + 1020))
  {
    if (!*(_DWORD *)(v641 + 1524)
      || *(_QWORD *)(v667 + 96) <= (uint64_t)v583
      || !copy_partitioning(v661, v699, v659, v644, v645, v28, v638))
    {
      v696 = v612;
      v613 = v41 < 8 && v581;
      v662 = v613;
      if (v613)
        goto LABEL_79;
      goto LABEL_203;
    }
    chroma_check(v661, v699, v47, v48, 0, v639);
    if (*(_DWORD *)(v641 + 1556) && *v640 == v640[2] - 2)
      update_partition_svc(v661, 0xCu, v644, v645);
  }
  else
  {
    set_block_size(v661, v699, v659, v644, v645, 12);
    *(_BYTE *)v633 = 1;
    chroma_check(v661, v699, v47, v48, 0, v639);
    if (*(_DWORD *)(v641 + 1556) && *v640 == v640[2] - 2)
      update_partition_svc(v661, 0xCu, v644, v645);
    if (*(_DWORD *)(v641 + 1524))
      update_prev_partition(v661, v699, 0, v644, v645, v638);
  }
}

int32x2_t *nonrd_use_partition(int32x2_t *result, unint64_t a2, __n128 *a3, unsigned __int8 **a4, uint64_t *a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10)
{
  int32x2_t *v10;
  uint64_t v11;
  int v12;
  int32x2_t *v18;
  __int32 v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  int v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  __int128 v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  void *v68;
  void *v69;
  size_t v70;
  char *v71;
  int v72;
  unsigned __int8 **v73;
  __int32 v74;
  int v75;
  int v76;
  _BYTE *v80;
  uint64_t v81;
  _DWORD *v82;
  unsigned int v83;

  v10 = result + 21626;
  v11 = a8;
  v12 = (1 << b_width_log2_lookup[a8]) + (1 << b_width_log2_lookup[a8] < 0 ? 3 : 0);
  if (result[21626].i32[0] <= (int)a6 || result[21627].i32[0] <= (int)a7)
    return result;
  v18 = result;
  v80 = (_BYTE *)(a2 + 82228);
  v82 = (_DWORD *)(a2 + 26904);
  v19 = result[21627].i32[1];
  if (a8 >= 3)
  {
    v20 = **a4;
    v21 = partition_lookup[13 * b_width_log2_lookup[a8] + v20];
LABEL_6:
    v23 = *(_QWORD *)(a2 + 114248)
        + 16
        * ((*(char *)(*(_QWORD *)(a2 + 25520) + (int)a7) >> mi_width_log2_lookup[a8]) & 1 | (2 * ((*(char *)(a2 + (a6 & 7) + 25528) >> mi_width_log2_lookup[a8]) & 1)) | (4 * mi_width_log2_lookup[a8]))
        + 4 * v21;
    ++*(_DWORD *)(v23 + 560);
    v22 = v20;
    goto LABEL_7;
  }
  v20 = 0;
  v22 = 0;
  v21 = partition_lookup[13 * b_width_log2_lookup[a8]];
  if (a8)
    goto LABEL_6;
LABEL_7:
  v24 = v12 >> 2;
  switch(v21)
  {
    case 2u:
      v75 = v12 >> 2;
      *(_DWORD *)(a10 + 3260) = 1;
      v34 = v22;
      nonrd_pick_sb_modes(result, a3, a2, a6, a7, a9, v22, a10 + 2560);
      v35 = **(_QWORD **)(a2 + 25360);
      *(_OWORD *)(a10 + 2560) = *(_OWORD *)v35;
      v36 = *(_OWORD *)(v35 + 16);
      v37 = *(_OWORD *)(v35 + 32);
      v38 = *(_OWORD *)(v35 + 48);
      *(_DWORD *)(a10 + 2624) = *(_DWORD *)(v35 + 64);
      *(_OWORD *)(a10 + 2608) = v38;
      *(_OWORD *)(a10 + 2592) = v37;
      *(_OWORD *)(a10 + 2576) = v36;
      v39 = *(_QWORD *)(a2 + 25568);
      v40 = *(_DWORD *)(v39 + 32);
      v41 = *(_OWORD *)(v39 + 16);
      *(_OWORD *)(a10 + 2628) = *(_OWORD *)v39;
      *(_DWORD *)(a10 + 2660) = v40;
      *(_OWORD *)(a10 + 2644) = v41;
      *(_BYTE *)(a10 + 3268) = *v80;
      *(_DWORD *)(a10 + 3256) = *v82;
      v26 = v34;
      encode_b_rt(v18, a2, a3, a5, a6, a7, 1, v34, a10 + 2560);
      if (a8 >= 4)
      {
        v42 = v75 + a7;
        if (v75 + (int)a7 < v10[1].i32[0])
        {
          *(_DWORD *)(a10 + 4108) = 1;
          nonrd_pick_sb_modes(v18, a3, a2, a6, v42, a9, v34, a10 + 3408);
          v43 = **(_QWORD **)(a2 + 25360);
          *(_OWORD *)(a10 + 3408) = *(_OWORD *)v43;
          v44 = *(_OWORD *)(v43 + 16);
          v45 = *(_OWORD *)(v43 + 32);
          v46 = *(_OWORD *)(v43 + 48);
          *(_DWORD *)(a10 + 3472) = *(_DWORD *)(v43 + 64);
          *(_OWORD *)(a10 + 3456) = v46;
          *(_OWORD *)(a10 + 3440) = v45;
          *(_OWORD *)(a10 + 3424) = v44;
          v47 = *(_QWORD *)(a2 + 25568);
          v48 = *(_DWORD *)(v47 + 32);
          v49 = *(_OWORD *)(v47 + 16);
          *(_OWORD *)(a10 + 3476) = *(_OWORD *)v47;
          *(_DWORD *)(a10 + 3508) = v48;
          *(_OWORD *)(a10 + 3492) = v49;
          *(_BYTE *)(a10 + 4116) = *v80;
          *(_DWORD *)(a10 + 4104) = *v82;
          encode_b_rt(v18, a2, a3, a5, a6, v42, 1, v34, a10 + 3408);
        }
      }
      goto LABEL_19;
    case 1u:
      v76 = v12 >> 2;
      *(_DWORD *)(a10 + 1564) = 1;
      v50 = v22;
      nonrd_pick_sb_modes(result, a3, a2, a6, a7, a9, v22, a10 + 864);
      v51 = **(_QWORD **)(a2 + 25360);
      *(_OWORD *)(a10 + 864) = *(_OWORD *)v51;
      v52 = *(_OWORD *)(v51 + 16);
      v53 = *(_OWORD *)(v51 + 32);
      v54 = *(_OWORD *)(v51 + 48);
      *(_DWORD *)(a10 + 928) = *(_DWORD *)(v51 + 64);
      *(_OWORD *)(a10 + 896) = v53;
      *(_OWORD *)(a10 + 912) = v54;
      *(_OWORD *)(a10 + 880) = v52;
      v55 = *(_QWORD *)(a2 + 25568);
      v56 = *(_DWORD *)(v55 + 32);
      v57 = *(_OWORD *)(v55 + 16);
      *(_OWORD *)(a10 + 932) = *(_OWORD *)v55;
      *(_DWORD *)(a10 + 964) = v56;
      *(_OWORD *)(a10 + 948) = v57;
      *(_BYTE *)(a10 + 1572) = *v80;
      *(_DWORD *)(a10 + 1560) = *v82;
      v26 = v50;
      encode_b_rt(v18, a2, a3, a5, a6, a7, 1, v50, a10 + 864);
      if (a8 >= 4 && v76 + (int)a6 < v10->i32[0])
      {
        *(_DWORD *)(a10 + 2412) = 1;
        nonrd_pick_sb_modes(v18, a3, a2, v76 + a6, a7, a9, v50, a10 + 1712);
        v58 = **(_QWORD **)(a2 + 25360);
        *(_OWORD *)(a10 + 1712) = *(_OWORD *)v58;
        v59 = *(_OWORD *)(v58 + 16);
        v60 = *(_OWORD *)(v58 + 32);
        v61 = *(_OWORD *)(v58 + 48);
        *(_DWORD *)(a10 + 1776) = *(_DWORD *)(v58 + 64);
        *(_OWORD *)(a10 + 1760) = v61;
        *(_OWORD *)(a10 + 1744) = v60;
        *(_OWORD *)(a10 + 1728) = v59;
        v62 = *(_QWORD *)(a2 + 25568);
        v63 = *(_DWORD *)(v62 + 32);
        v64 = *(_OWORD *)(v62 + 16);
        *(_OWORD *)(a10 + 1780) = *(_OWORD *)v62;
        *(_DWORD *)(a10 + 1812) = v63;
        *(_OWORD *)(a10 + 1796) = v64;
        *(_BYTE *)(a10 + 2420) = *v80;
        *(_DWORD *)(a10 + 2408) = *v82;
        encode_b_rt(v18, a2, a3, a5, v76 + a6, a7, 1, v50, a10 + 1712);
      }
      goto LABEL_19;
    case 0u:
      *(_DWORD *)(a10 + 716) = 1;
      v26 = v22;
      nonrd_pick_sb_modes(result, a3, a2, a6, a7, a9, v22, a10 + 16);
      v27 = **(_QWORD **)(a2 + 25360);
      *(_OWORD *)(a10 + 16) = *(_OWORD *)v27;
      v28 = *(_OWORD *)(v27 + 16);
      v29 = *(_OWORD *)(v27 + 32);
      v30 = *(_OWORD *)(v27 + 48);
      *(_DWORD *)(a10 + 80) = *(_DWORD *)(v27 + 64);
      *(_OWORD *)(a10 + 48) = v29;
      *(_OWORD *)(a10 + 64) = v30;
      *(_OWORD *)(a10 + 32) = v28;
      v31 = *(_QWORD *)(a2 + 25568);
      v32 = *(_DWORD *)(v31 + 32);
      v33 = *(_OWORD *)(v31 + 16);
      *(_OWORD *)(a10 + 84) = *(_OWORD *)v31;
      *(_DWORD *)(a10 + 116) = v32;
      *(_OWORD *)(a10 + 100) = v33;
      *(_BYTE *)(a10 + 724) = *v80;
      *(_DWORD *)(a10 + 712) = *v82;
      encode_b_rt(v18, a2, a3, a5, a6, a7, 1, v26, a10 + 16);
LABEL_19:
      v68 = (void *)(*(_QWORD *)(a2 + 25520) + (int)a7);
      v69 = (void *)(a2 + 25528 + (a6 & 7));
      v70 = num_8x8_blocks_wide_lookup[v11];
      v71 = &partition_context_lookup[2 * v26];
      memset(v68, *v71, v70);
      return (int32x2_t *)memset(v69, v71[1], v70);
  }
  v65 = subsize_lookup[a8 + 39];
  v66 = *(_QWORD *)(a10 + 4256);
  if (a8 == 3)
  {
    v26 = subsize_lookup[v11 + 39];
    nonrd_pick_sb_modes(result, a3, a2, a6, a7, a9, subsize_lookup[v11 + 39], v66);
    encode_b_rt(v18, a2, a3, a5, a6, a7, 1, v26, *(_QWORD *)(a10 + 4256));
    goto LABEL_19;
  }
  v83 = v65;
  v72 = v24;
  v74 = v19;
  nonrd_use_partition(result, a2, a3, a4, a5, a6, a7, v65, a9, v66);
  v81 = v72;
  nonrd_use_partition(v18, a2, a3, &a4[v81], a5, a6, (v72 + a7), v83, a9, *(_QWORD *)(a10 + 4264));
  v73 = &a4[v72 * v74];
  nonrd_use_partition(v18, a2, a3, v73, a5, (v72 + a6), a7, v83, a9, *(_QWORD *)(a10 + 4272));
  result = (int32x2_t *)nonrd_use_partition(v18, a2, a3, &v73[v81], a5, (v72 + a6), (v72 + a7), v83, a9, *(_QWORD *)(a10 + 4280));
  v26 = v83;
  if (v21 != 3)
    goto LABEL_19;
  return result;
}

uint64_t nonrd_pick_partition(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t *a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  _DWORD *v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  int v23;
  _BOOL4 v24;
  _BOOL4 v25;
  int v26;
  int v27;
  uint64_t result;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  int v32;
  int v33;
  _BOOL4 v34;
  unsigned int v35;
  _BOOL4 v36;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  __int128 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  _OWORD *v61;
  int v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _BOOL4 v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  int v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  int v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  int v116;
  __int128 v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int *v128;
  _OWORD *v129;
  _OWORD *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int *v140;
  unsigned int v141;
  int v142;
  int v143;
  int v144;
  _BYTE *v145;
  __n128 *v146;
  _DWORD *v147;
  uint64_t v148;
  uint64_t v150;
  int64x2_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v15 = a11;
  v16 = (_DWORD *)(a2 + 25056);
  v17 = (int *)(a1 + 739688);
  v148 = a7;
  v18 = num_8x8_blocks_wide_lookup[a7] >> 1;
  v19 = v18 + a5;
  v20 = *(_DWORD *)(a1 + 173008);
  v21 = v18 + (int)a5 < v20;
  v122 = v18;
  v22 = v18 + a6;
  v140 = (int *)(a1 + 173008);
  v23 = *(_DWORD *)(a1 + 173016);
  v24 = v22 >= v23;
  v25 = v22 < v23;
  v26 = *(_DWORD *)(a2 + 25056);
  v27 = *(_DWORD *)(a2 + 25060);
  result = v22 < v23 && v21;
  if (v27 > v26)
    v25 = 0;
  v29 = v26 <= v27 && v21;
  v30 = a7 > 2;
  v31 = a7 > 2 && v25;
  v32 = a7 > 2 && v29;
  v33 = *v17;
  v34 = *(_DWORD *)(a1 + 190056) < 5;
  v151 = 0uLL;
  if (v17[6])
  {
    if (*(unsigned __int8 *)(a2 + 25653) >= a7)
    {
      v35 = *(unsigned __int8 *)(a2 + 25652);
      v36 = v35 < a7;
      if (v19 >= v20)
        v36 = 1;
      v31 &= v36;
      if (v35 <= a7)
        result = result;
      else
        result = 0;
      if (v35 < a7)
        v24 = 1;
    }
    else
    {
      result = 0;
      if (v19 < v20)
        v31 = 0;
      v35 = *(unsigned __int8 *)(a2 + 25652);
    }
    v32 &= v24;
    v30 = a7 > 2 && v35 < a7;
  }
  v38 = a10;
  v145 = (_BYTE *)(a2 + 82228);
  v39 = v17[3];
  if (v19 >= v20)
    v40 = v31;
  else
    v40 = 0;
  if (v22 >= v23)
    v41 = v32;
  else
    v41 = 0;
  if (v39)
    v42 = v40;
  else
    v42 = v31;
  if (!v39)
    v41 = v32;
  v146 = a3;
  v147 = (_DWORD *)(a2 + 25056);
  v128 = v17;
  v131 = v42;
  if (v33 != 5)
    goto LABEL_49;
  if (result | v30)
    v34 = 0;
  if ((result & v30) == 1)
  {
    v43 = a2;
    v44 = v41;
    v45 = ml_predict_var_partitioning(a1, a2, a7, a5, a6);
    a3 = v146;
    v16 = v147;
    v33 = 5;
    v15 = a11;
    v42 = v131;
    v41 = v44;
    v38 = a10;
    v30 = v45 != 0;
    result = v45 != 3;
  }
  else
  {
LABEL_49:
    v43 = a2;
  }
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v150 = 0;
  if (result | v30)
    v46 = v34;
  else
    v46 = 1;
  *(_DWORD *)(v15 + 716) = (v41 | v42 | v30) ^ 1;
  LODWORD(v47) = 0x7FFFFFFF;
  v123 = v19;
  v124 = v22;
  v138 = v41;
  if (!(_DWORD)result)
  {
    v49 = a7;
    v57 = 0;
    v58 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_67;
  }
  v134 = v33;
  v125 = result;
  v142 = v46;
  v48 = v38;
  v49 = a7;
  nonrd_pick_sb_modes((int32x2_t *)a1, a3, v43, a5, a6, (uint64_t)&v152, a7, v15 + 16);
  LODWORD(v47) = 0x7FFFFFFF;
  v16 = v147;
  v50 = **(_QWORD **)(v43 + 25360);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)v50;
  v51 = *(_OWORD *)(v50 + 16);
  v52 = *(_OWORD *)(v50 + 32);
  v53 = *(_OWORD *)(v50 + 48);
  *(_DWORD *)(v15 + 80) = *(_DWORD *)(v50 + 64);
  *(_OWORD *)(v15 + 48) = v52;
  *(_OWORD *)(v15 + 64) = v53;
  *(_OWORD *)(v15 + 32) = v51;
  v54 = *(_QWORD *)(v43 + 25568);
  v55 = *(_DWORD *)(v54 + 32);
  v56 = *(_OWORD *)(v54 + 16);
  *(_OWORD *)(v15 + 84) = *(_OWORD *)v54;
  *(_DWORD *)(v15 + 116) = v55;
  *(_OWORD *)(v15 + 100) = v56;
  *(_BYTE *)(v15 + 724) = *v145;
  *(_DWORD *)(v15 + 712) = v147[462];
  if ((_DWORD)v152 == 0x7FFFFFFF)
  {
    v57 = 0;
    v58 = 0x7FFFFFFFFFFFFFFFLL;
    v38 = v48;
LABEL_66:
    v46 = v142;
    result = v125;
    v42 = v131;
    goto LABEL_67;
  }
  v47 = *(int *)(a1
               + 16
               * ((*(char *)(*(_QWORD *)(v43 + 25520) + a6) >> mi_width_log2_lookup[v148]) & 1 | (2 * ((*(char *)(v43 + (a5 & 7) + 25528) >> mi_width_log2_lookup[v148]) & 1)) | (4 * mi_width_log2_lookup[v148]))
               + 841528)
      + (uint64_t)(int)v152;
  LODWORD(v152) = *(_DWORD *)(a1
                            + 16
                            * ((*(char *)(*(_QWORD *)(v43 + 25520) + a6) >> mi_width_log2_lookup[v148]) & 1 | (2 * ((*(char *)(v43 + (a5 & 7) + 25528) >> mi_width_log2_lookup[v148]) & 1)) | (4 * mi_width_log2_lookup[v148]))
                            + 841528)
                + v152;
  v58 = v153;
  v59 = (v153 << v147[144]) + (((int)v147[145] * v47 + 256) >> 9);
  v154 = v59;
  if (v59 >= v48)
  {
    v38 = v48;
    v57 = 0;
    v58 = 0x7FFFFFFFFFFFFFFFLL;
    LODWORD(v47) = 0x7FFFFFFF;
    goto LABEL_66;
  }
  v57 = HIDWORD(v152);
  if (v49 >= 3)
    *(_DWORD *)(v15 + 4) = 0;
  v46 = v142;
  result = v125;
  v42 = v131;
  if (v134 != 5
    && !v147[121]
    && num_pels_log2_lookup[v148] * (uint64_t)*(int *)(a1 + 740040) > v47
    && v58 < *(uint64_t *)(a1 + 740032) >> (8 - (b_width_log2_lookup[v148] + b_height_log2_lookup[v148])))
  {
    v30 = 0;
    v46 = 0;
  }
  v38 = v59;
LABEL_67:
  v60 = (_OWORD *)(v15 + 836);
  v61 = (_OWORD *)(v43 + 82336);
  *(_OWORD *)(v15 + 836) = *(_OWORD *)(v43 + 82336);
  v129 = (_OWORD *)(v43 + 82336);
  v130 = (_OWORD *)(v15 + 836);
  v141 = v49;
  if (!v30)
  {
    v64 = v140;
    if (v46)
      v69 = v42;
    else
      v69 = 0;
    v70 = a6;
    if (v69 == 1)
      goto LABEL_115;
    goto LABEL_78;
  }
  v62 = *(_DWORD *)(a1
                  + 16
                  * ((*(char *)(*(_QWORD *)(v43 + 25520) + a6) >> mi_width_log2_lookup[v148]) & 1 | (2 * ((*(char *)(v43 + (a5 & 7) + 25528) >> mi_width_log2_lookup[v148]) & 1)) | (4 * mi_width_log2_lookup[v148]))
                  + 841540);
  LODWORD(v150) = v62;
  v63 = ((int)v16[145] * (uint64_t)v62 + 256) >> 9;
  v151.i64[1] = v63;
  v64 = v140;
  if (v38 <= v63)
    goto LABEL_109;
  if (*v140 <= (int)a5)
  {
    v67 = 0;
    v68 = v38 > v63;
    if (v38 <= v63)
      goto LABEL_84;
  }
  else if (v140[2] <= a6)
  {
    v67 = 0;
    v68 = v38 > v63;
    if (v38 <= v63)
      goto LABEL_84;
  }
  else
  {
    v126 = result;
    v143 = v46;
    v135 = v57;
    v65 = v58;
    v66 = v47;
    v121 = v38;
    *v61 = *v60;
    nonrd_pick_partition(a1, v43, v146, a4, a5);
    if ((_DWORD)v152 == 0x7FFFFFFF)
      goto LABEL_105;
    v62 += v152;
    LODWORD(v150) = v62;
    v63 += v154;
    v151.i64[0] = v153;
    v151.i64[1] = v63;
    v38 = v121;
    LODWORD(v47) = v66;
    v58 = v65;
    v57 = v135;
    v46 = v143;
    result = v126;
    v42 = v131;
    v61 = (_OWORD *)(v43 + 82336);
    v60 = (_OWORD *)(v15 + 836);
    v67 = v153;
    v68 = v121 > v63;
    if (v121 <= v63)
    {
LABEL_84:
      if (v68)
        goto LABEL_85;
      goto LABEL_109;
    }
  }
  v135 = v57;
  v143 = v46;
  if (*v140 <= (int)a5 || v122 + a6 >= v140[2])
  {
    v65 = v58;
    v66 = v47;
  }
  else
  {
    v126 = result;
    v65 = v58;
    v66 = v47;
    v121 = v38;
    *v61 = *v60;
    nonrd_pick_partition(a1, v43, v146, a4, a5);
    if ((_DWORD)v152 == 0x7FFFFFFF)
      goto LABEL_105;
    v62 += v152;
    LODWORD(v150) = v62;
    v67 += v153;
    v63 += v154;
    v151.i64[0] = v67;
    v151.i64[1] = v63;
    v38 = v121;
    result = v126;
    v61 = (_OWORD *)(v43 + 82336);
    v60 = (_OWORD *)(v15 + 836);
  }
  if (v38 <= v63)
  {
    LODWORD(v47) = v66;
    v58 = v65;
    v57 = v135;
    v46 = v143;
    v42 = v131;
    goto LABEL_109;
  }
  v126 = result;
  v74 = v122;
  v75 = (v122 + a5);
  if ((int)v75 < *v140 && v140[2] > a6)
  {
    v121 = v38;
    *v61 = *v60;
    nonrd_pick_partition(a1, v43, v146, a4, v75);
    if ((_DWORD)v152 != 0x7FFFFFFF)
    {
      v62 += v152;
      LODWORD(v150) = v62;
      v67 += v153;
      v63 += v154;
      v151.i64[0] = v67;
      v151.i64[1] = v63;
      v38 = v121;
      v61 = (_OWORD *)(v43 + 82336);
      v60 = (_OWORD *)(v15 + 836);
      v74 = v122;
      goto LABEL_101;
    }
LABEL_105:
    LODWORD(v150) = 0x7FFFFFFF;
    v151 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    v38 = v121;
    LODWORD(v47) = v66;
    v58 = v65;
    v57 = v135;
    v46 = v143;
    result = v126;
    v42 = v131;
    v61 = (_OWORD *)(v43 + 82336);
    v60 = (_OWORD *)(v15 + 836);
    goto LABEL_109;
  }
LABEL_101:
  if (v38 <= v63)
  {
    LODWORD(v47) = v66;
    v58 = v65;
    v57 = v135;
    v46 = v143;
    result = v126;
    v42 = v131;
    goto LABEL_109;
  }
  v76 = (v74 + a5);
  if ((int)v76 >= *v140 || v74 + a6 >= v140[2])
  {
    LODWORD(v47) = v66;
    v58 = v65;
    v57 = v135;
    v46 = v143;
    result = v126;
    v42 = v131;
    if (v63 >= v38)
      goto LABEL_109;
  }
  else
  {
    v121 = v38;
    *v61 = *v60;
    nonrd_pick_partition(a1, v43, v146, a4, v76);
    if ((_DWORD)v152 == 0x7FFFFFFF)
      goto LABEL_105;
    v62 += v152;
    LODWORD(v150) = v62;
    v67 += v153;
    v63 += v154;
    v151.i64[0] = v67;
    v151.i64[1] = v63;
    v38 = v121;
    LODWORD(v47) = v66;
    v58 = v65;
    v57 = v135;
    v46 = v143;
    result = v126;
    v42 = v131;
    v61 = (_OWORD *)(v43 + 82336);
    v60 = (_OWORD *)(v15 + 836);
    if (v63 >= v121)
    {
LABEL_109:
      if (v128[2])
        v46 &= result ^ 1;
      if (v46)
        v77 = v42;
      else
        v77 = 0;
      v70 = a6;
      if (v77 == 1)
        goto LABEL_115;
LABEL_78:
      v71 = a8;
      v72 = v138;
      if (!v46)
        v72 = 0;
      if (v72 != 1)
        goto LABEL_81;
LABEL_127:
      v137 = v57;
      v133 = v58;
      v99 = v47;
      v100 = subsize_lookup[v148 + 26];
      *v61 = *v60;
      *(_DWORD *)(v15 + 3260) = 1;
      v101 = v38;
      result = (uint64_t)nonrd_pick_sb_modes((int32x2_t *)a1, v146, v43, a5, v70, (uint64_t)&v150, v100, v15 + 2560);
      v102 = v101;
      v103 = **(_QWORD **)(v43 + 25360);
      *(_OWORD *)(v15 + 2560) = *(_OWORD *)v103;
      v104 = *(_OWORD *)(v103 + 16);
      v105 = *(_OWORD *)(v103 + 32);
      v106 = *(_OWORD *)(v103 + 48);
      *(_DWORD *)(v15 + 2624) = *(_DWORD *)(v103 + 64);
      *(_OWORD *)(v15 + 2608) = v106;
      *(_OWORD *)(v15 + 2592) = v105;
      *(_OWORD *)(v15 + 2576) = v104;
      v107 = *(_QWORD *)(v43 + 25568);
      v108 = *(_DWORD *)(v107 + 32);
      v109 = *(_OWORD *)(v107 + 16);
      *(_OWORD *)(v15 + 2628) = *(_OWORD *)v107;
      *(_DWORD *)(v15 + 2660) = v108;
      *(_OWORD *)(v15 + 2644) = v109;
      *(_BYTE *)(v15 + 3268) = *v145;
      *(_DWORD *)(v15 + 3256) = v147[462];
      v110 = v151.i64[1];
      if (v151.i64[1] < v101 && v124 < v140[2])
      {
        *v129 = *v130;
        *(_DWORD *)(v15 + 4108) = 1;
        result = (uint64_t)nonrd_pick_sb_modes((int32x2_t *)a1, v146, v43, a5, v124, (uint64_t)&v152, v100, v15 + 3408);
        v111 = **(_QWORD **)(v43 + 25360);
        *(_OWORD *)(v15 + 3408) = *(_OWORD *)v111;
        v112 = *(_OWORD *)(v111 + 16);
        v113 = *(_OWORD *)(v111 + 32);
        v114 = *(_OWORD *)(v111 + 48);
        *(_DWORD *)(v15 + 3472) = *(_DWORD *)(v111 + 64);
        *(_OWORD *)(v15 + 3456) = v114;
        *(_OWORD *)(v15 + 3440) = v113;
        *(_OWORD *)(v15 + 3424) = v112;
        v115 = *(_QWORD *)(v43 + 25568);
        v116 = *(_DWORD *)(v115 + 32);
        v117 = *(_OWORD *)(v115 + 16);
        *(_OWORD *)(v15 + 3476) = *(_OWORD *)v115;
        *(_DWORD *)(v15 + 3508) = v116;
        *(_OWORD *)(v15 + 3492) = v117;
        *(_BYTE *)(v15 + 4116) = *v145;
        *(_DWORD *)(v15 + 4104) = v147[462];
        if ((_DWORD)v152 == 0x7FFFFFFF)
        {
          LODWORD(v150) = 0x7FFFFFFF;
          v151 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
LABEL_135:
          result = (uint64_t)pred_pixel_ready_reset((_DWORD *)v15, v141);
          v120 = v101;
          v58 = v133;
          *(_DWORD *)v71 = v99;
          *(_DWORD *)(v71 + 4) = v137;
          *(_QWORD *)(v71 + 8) = v133;
          *(_QWORD *)(v71 + 16) = v120;
          if (v99 == 0x7FFFFFFF)
            goto LABEL_82;
          goto LABEL_136;
        }
        LODWORD(v150) = *(_DWORD *)(a1
                                  + 16
                                  * ((*(char *)(*(_QWORD *)(v43 + 25520) + (int)v70) >> mi_width_log2_lookup[v148]) & 1 | (2 * ((*(char *)(v43 + (a5 & 7) + 25528) >> mi_width_log2_lookup[v148]) & 1)) | (4 * mi_width_log2_lookup[v148]))
                                  + 841536)
                      + v152
                      + v150;
        v110 = ((v151.i64[0] + v153) << v147[144]) + (((int)v147[145] * (uint64_t)(int)v150 + 256) >> 9);
        v151.i64[0] += v153;
        v151.i64[1] = v110;
        v102 = v101;
      }
      if (v110 < v102)
      {
        v118 = v150;
        v119 = HIDWORD(v150);
        v58 = v151.i64[0];
        *(_DWORD *)(v15 + 4) = 2;
        *(_DWORD *)v71 = v118;
        *(_DWORD *)(v71 + 4) = v119;
        *(_QWORD *)(v71 + 8) = v58;
        *(_QWORD *)(v71 + 16) = v110;
        if (v118 == 0x7FFFFFFF)
          goto LABEL_82;
        goto LABEL_136;
      }
      goto LABEL_135;
    }
  }
LABEL_85:
  v57 = 0;
  *(_DWORD *)(v15 + 4) = 3;
  LODWORD(v47) = v62;
  v58 = v67;
  v38 = v63;
  if (v46)
    v73 = v42;
  else
    v73 = 0;
  v70 = a6;
  if (v73 != 1)
    goto LABEL_78;
LABEL_115:
  v144 = v46;
  v136 = v57;
  v132 = v58;
  v78 = v47;
  v79 = subsize_lookup[v148 + 13];
  *v61 = *v60;
  *(_DWORD *)(v15 + 1564) = 1;
  v80 = v38;
  result = (uint64_t)nonrd_pick_sb_modes((int32x2_t *)a1, v146, v43, a5, v70, (uint64_t)&v150, v79, v15 + 864);
  v81 = **(_QWORD **)(v43 + 25360);
  *(_OWORD *)(v15 + 864) = *(_OWORD *)v81;
  v82 = *(_OWORD *)(v81 + 16);
  v83 = *(_OWORD *)(v81 + 32);
  v84 = *(_OWORD *)(v81 + 48);
  *(_DWORD *)(v15 + 928) = *(_DWORD *)(v81 + 64);
  *(_OWORD *)(v15 + 896) = v83;
  *(_OWORD *)(v15 + 912) = v84;
  *(_OWORD *)(v15 + 880) = v82;
  v85 = *(_QWORD *)(v43 + 25568);
  v86 = *(_DWORD *)(v85 + 32);
  v87 = *(_OWORD *)(v85 + 16);
  *(_OWORD *)(v15 + 932) = *(_OWORD *)v85;
  *(_DWORD *)(v15 + 964) = v86;
  *(_OWORD *)(v15 + 948) = v87;
  *(_BYTE *)(v15 + 1572) = *v145;
  *(_DWORD *)(v15 + 1560) = v147[462];
  v88 = v151.i64[1];
  if (v151.i64[1] >= v80)
  {
    v71 = a8;
LABEL_120:
    if (v151.i64[1] >= v80)
      goto LABEL_123;
LABEL_121:
    LODWORD(v47) = v150;
    v57 = HIDWORD(v150);
    v58 = v151.i64[0];
    *(_DWORD *)(v15 + 4) = 1;
    v38 = v88;
    goto LABEL_124;
  }
  v71 = a8;
  if (v123 >= *v64)
    goto LABEL_120;
  *v129 = *v130;
  *(_DWORD *)(v15 + 2412) = 1;
  result = (uint64_t)nonrd_pick_sb_modes((int32x2_t *)a1, v146, v43, v123, v70, (uint64_t)&v152, v79, v15 + 1712);
  v89 = **(_QWORD **)(v43 + 25360);
  *(_OWORD *)(v15 + 1712) = *(_OWORD *)v89;
  v90 = *(_OWORD *)(v89 + 16);
  v91 = *(_OWORD *)(v89 + 32);
  v92 = *(_OWORD *)(v89 + 48);
  *(_DWORD *)(v15 + 1776) = *(_DWORD *)(v89 + 64);
  *(_OWORD *)(v15 + 1760) = v92;
  *(_OWORD *)(v15 + 1744) = v91;
  *(_OWORD *)(v15 + 1728) = v90;
  v93 = *(_QWORD *)(v43 + 25568);
  v94 = *(_DWORD *)(v93 + 32);
  v95 = *(_OWORD *)(v93 + 16);
  *(_OWORD *)(v15 + 1780) = *(_OWORD *)v93;
  *(_DWORD *)(v15 + 1812) = v94;
  *(_OWORD *)(v15 + 1796) = v95;
  *(_BYTE *)(v15 + 2420) = *v145;
  *(_DWORD *)(v15 + 2408) = v147[462];
  if ((_DWORD)v152 != 0x7FFFFFFF)
  {
    v96 = *(int *)(a1
                 + 16
                 * ((*(char *)(*(_QWORD *)(v43 + 25520) + (int)v70) >> mi_width_log2_lookup[v148]) & 1 | (2 * ((*(char *)(v43 + (a5 & 7) + 25528) >> mi_width_log2_lookup[v148]) & 1)) | (4 * mi_width_log2_lookup[v148]))
                 + 841532)
        + (uint64_t)(int)v152;
    LODWORD(v152) = *(_DWORD *)(a1
                              + 16
                              * ((*(char *)(*(_QWORD *)(v43 + 25520) + (int)v70) >> mi_width_log2_lookup[v148]) & 1 | (2 * ((*(char *)(v43 + (a5 & 7) + 25528) >> mi_width_log2_lookup[v148]) & 1)) | (4 * mi_width_log2_lookup[v148]))
                              + 841532)
                  + v152;
    v97 = (int)v150 + v96;
    LODWORD(v150) = v97;
    v88 = ((v151.i64[0] + v153) << v147[144]) + (((int)v147[145] * v97 + 256) >> 9);
    v151.i64[0] += v153;
    v151.i64[1] = v88;
    v71 = a8;
    if (v88 >= v80)
      goto LABEL_123;
    goto LABEL_121;
  }
  LODWORD(v150) = 0x7FFFFFFF;
  v151 = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  v71 = a8;
LABEL_123:
  result = (uint64_t)pred_pixel_ready_reset((_DWORD *)v15, v49);
  v38 = v80;
  LODWORD(v47) = v78;
  v58 = v132;
  v57 = v136;
LABEL_124:
  v61 = (_OWORD *)(v43 + 82336);
  v60 = (_OWORD *)(v15 + 836);
  v98 = v138;
  if (!v144)
    v98 = 0;
  if (v98 == 1)
    goto LABEL_127;
LABEL_81:
  *(_DWORD *)v71 = v47;
  *(_DWORD *)(v71 + 4) = v57;
  *(_QWORD *)(v71 + 8) = v58;
  *(_QWORD *)(v71 + 16) = v38;
  if ((_DWORD)v47 == 0x7FFFFFFF)
  {
LABEL_82:
    *(_DWORD *)v71 = 0x7FFFFFFF;
    *(int64x2_t *)(v71 + 8) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
    return result;
  }
LABEL_136:
  result = fill_mode_info_sb(a1 + 171696, v43, a5, v70, v141, v15);
  if (a9)
  {
    if (v58 != 0x7FFFFFFFFFFFFFFFLL)
      return (uint64_t)encode_sb_rt((int32x2_t *)a1, v43, v146, a4, a5, v70, v141 == 12, v141, v15);
  }
  return result;
}

__n128 set_offsets_0(int32x2_t *a1, __n128 *a2, uint64_t a3, int a4, int a5, int a6)
{
  int32x2_t *v8;
  int32x2_t *v9;
  int32x2_t *v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  unsigned int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  int v23;
  int32x2_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int32x2_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int32x2_t v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  double v55;
  int v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  uint64_t v68;
  long double v69;
  long double v71;
  unsigned int v72;
  int v73;
  __n128 result;
  int v75;

  v8 = a1 + 26498;
  v9 = a1 + 23797;
  v10 = a1 + 21580;
  v11 = (unsigned int *)(a3 + 25848);
  v12 = (_DWORD *)(a3 + 16528);
  v13 = num_8x8_blocks_wide_lookup[a6];
  v14 = num_8x8_blocks_high_lookup[a6];
  v15 = 2 * (a4 & 7);
  v16 = v12[2098];
  *(_QWORD *)(a3 + 24976) = *(_QWORD *)(a3 + 25448) + ((2 * a5) >> v16);
  v17 = v12[2099];
  *(_QWORD *)(a3 + 24984) = a3 + 25472 + (v15 >> v17);
  v18 = v12[2132];
  *(_QWORD *)(a3 + 25112) = *(_QWORD *)(a3 + 25456) + ((2 * a5) >> v18);
  v19 = v12[2133];
  *(_QWORD *)(a3 + 25120) = a3 + 25472 + (v15 >> v19) + 16;
  v20 = v12[2166];
  *(_QWORD *)(a3 + 25248) = *(_QWORD *)(a3 + 25464) + ((2 * a5) >> v20);
  v21 = v12[2167];
  *(_QWORD *)(a3 + 25256) = a3 + 25472 + (v15 >> v21) + 32;
  v22 = v12[2206];
  v23 = a5 + v22 * a4;
  v24 = v10[67];
  v25 = 8 * v23;
  *(_QWORD *)(a3 + 25360) = *(_QWORD *)&v24 + v25;
  *(_QWORD *)(*(_QWORD *)&v24 + v25) = *(_QWORD *)&v10[60] + 68 * v23;
  v26 = v10[47].i32[0];
  *(_QWORD *)(a3 + 25568) = *(_QWORD *)(a3 + 25576) + 36 * (a5 + v26 * a4);
  v27 = (8 * a5) >> v16;
  v28 = (8 * a4) >> v17;
  v29 = v27;
  v30 = *(_QWORD *)&v10[2163] + 224 * v10->i32[0];
  v31 = *(_QWORD *)(v30 + 152);
  v32 = *(_QWORD *)(v30 + 160);
  v33 = *(_DWORD *)(v30 + 104);
  v34 = *(_QWORD *)(v30 + 144) + v29 + v33 * v28;
  v35 = (8 * a5) >> v18;
  v36 = (8 * a4) >> v19;
  LODWORD(v30) = *(_DWORD *)(v30 + 124);
  *(_QWORD *)(a3 + 24928) = v34;
  v12[2102] = v33;
  *(_QWORD *)(a3 + 25064) = v31 + v35 + (int)v30 * v36;
  v12[2136] = v30;
  LODWORD(v34) = (8 * a5) >> v20;
  v37 = (8 * a4) >> v21;
  v38 = (int)v34;
  *(_QWORD *)(a3 + 25200) = v32 + (int)v34 + (int)v30 * v37;
  v12[2170] = v30;
  v39 = v10[46].i32[0];
  v11[2] = (8 * (v14 + a4)) ^ 0xFFFFFFFC;
  v11[3] = (8 * (v39 - a4)) | 4;
  *v11 = (8 * (v13 + a5)) ^ 0xFFFFFFFC;
  v11[1] = (8 * (v26 - a5)) | 4;
  v12[2220] = -64 * a4;
  v12[2221] = (v39 - (v14 + a4)) << 6;
  v12[2218] = -64 * a5;
  v12[2219] = (v26 - (v13 + a5)) << 6;
  if (a4)
  {
    *(_QWORD *)(a3 + 25376) = *(_QWORD *)(*(_QWORD *)(a3 + 25360) + 8 * -v22);
    if ((signed __int32)a2->n128_u32[2] < a5)
    {
LABEL_3:
      v40 = *(_QWORD *)(*(_QWORD *)(a3 + 25360) - 8);
      goto LABEL_6;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 25376) = 0;
    if ((signed __int32)a2->n128_u32[2] < a5)
      goto LABEL_3;
  }
  v40 = 0;
LABEL_6:
  *(_QWORD *)(a3 + 25368) = v40;
  v41 = v9[8];
  v42 = *(_QWORD *)(*(_QWORD *)&v41 + 56);
  v43 = *(_QWORD *)(*(_QWORD *)&v41 + 64);
  v44 = *(_QWORD *)(*(_QWORD *)&v41 + 72);
  v45 = *(_DWORD *)(*(_QWORD *)&v41 + 16);
  v46 = *(_DWORD *)(*(_QWORD *)&v41 + 36);
  *(int32x2_t *)(a3 + 25440) = v41;
  *(_QWORD *)(a3 + 8216) = v42 + v29 + v45 * (uint64_t)(int)v28;
  *(_DWORD *)(a3 + 8224) = v45;
  *(_QWORD *)(a3 + 16520) = v43 + v35 + v46 * (uint64_t)(int)v36;
  *v12 = v46;
  *(_QWORD *)(a3 + 24824) = v44 + v38 + v46 * (uint64_t)(int)v37;
  v12[2076] = v46;
  v47 = *v8;
  *(int32x2_t *)(a3 + 25632) = vrev64_s32(*v8);
  if (v9->i32[0] == 1)
  {
    if (v26 + 1 >= 0)
      v48 = v26 + 1;
    else
      v48 = v26 + 2;
    if (v39 + 1 >= 0)
      v49 = v39 + 1;
    else
      v49 = v39 + 2;
    v50 = v49 >> 1;
    v51 = v14 + 1;
    if (a4 >= 0)
      v52 = a4;
    else
      v52 = a4 + 1;
    v53 = v52 >> 1;
    v54 = v53 + (v51 >> 1);
    if (v50 >= v54)
      v50 = v54;
    v55 = 0.0;
    v75 = v47.i32[0];
    if (v53 >= v50)
    {
      v61 = 0.0;
    }
    else
    {
      v56 = v48 >> 1;
      v57 = v13 + 1;
      if (a5 >= 0)
        v58 = a5;
      else
        v58 = a5 + 1;
      v59 = v58 >> 1;
      v60 = v59 + (v57 >> 1);
      if (v56 < v60)
        v60 = v56;
      v61 = 0.0;
      if (v59 < v60)
      {
        v62 = v53;
        v63 = v50;
        v64 = v59 - (uint64_t)v60;
        v65 = *(_QWORD *)&v9[530] + 8 * (v59 + v53 * (uint64_t)v56);
        v66 = 8 * v56;
        do
        {
          v67 = (double *)v65;
          v68 = v64;
          do
          {
            v69 = *v67++;
            v61 = v61 + log(v69);
            v55 = v55 + 1.0;
          }
          while (!__CFADD__(v68++, 1));
          ++v62;
          v65 += v66;
        }
        while (v62 != v63);
      }
    }
    v71 = exp(v61 / v55);
    v72 = (int)(v71 * (double)v75) & ~((int)(v71 * (double)v75) >> 31);
    *(_DWORD *)(a3 + 25636) = v72;
    if (v72 >= 0x40)
      v73 = v72 >> 6;
    else
      v73 = (v72 >> 6) + 1;
    *(_DWORD *)(a3 + 25620) = v73;
  }
  result = *a2;
  *(__n128 *)(a3 + 25336) = *a2;
  return result;
}

int32x2_t *nonrd_select_partition(int32x2_t *result, unint64_t a2, __n128 *a3, unsigned __int8 **a4, uint64_t *a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10)
{
  int32x2_t *v10;
  unsigned int v11;
  int v12;
  __int32 v13;
  int32x2_t *v18;
  __int16 *v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  __int128 v30;
  unsigned int v31;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  int v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  int v67;
  __int128 v70;
  uint64_t v71;

  v10 = result + 21626;
  v11 = b_width_log2_lookup[a8];
  v12 = (1 << v11) + (1 << v11 < 0 ? 3 : 0);
  v13 = result[92515].i32[1];
  v70 = xmmword_208F0A8D0;
  LODWORD(v70) = 0x7FFFFFFF;
  v71 = 0x7FFFFFFFFFFFFFFFLL;
  if (result[21626].i32[0] > (int)a6 && result[21627].i32[0] > (int)a7)
  {
    v18 = result;
    v19 = (__int16 *)(a2 + 25652);
    if (a8 <= 2)
    {
      v20 = 0;
      v21 = partition_lookup[13 * v11];
    }
    else
    {
      v20 = **a4;
      v21 = partition_lookup[13 * v11 + v20];
      if (a8 == 9 && (_DWORD)v20 == 9)
      {
        v22 = 2310;
LABEL_21:
        *v19 = v22;
        return (int32x2_t *)nonrd_pick_partition((uint64_t)result, a2, a3, a5, a6, a7, 9, a9, 0, 0x7FFFFFFFFFFFFFFFLL, a10);
      }
      if (v13)
        v31 = 3;
      else
        v31 = 6;
      if (a8 == 9 && v21 && v31 <= v20)
      {
        v22 = 2307;
        goto LABEL_21;
      }
      if (a8 == 6 && v21)
      {
        *v19 = 1539;
        return (int32x2_t *)nonrd_pick_partition((uint64_t)result, a2, a3, a5, a6, a7, 6, a9, 0, 0x7FFFFFFFFFFFFFFFLL, a10);
      }
    }
    v66 = (_BYTE *)(a2 + 82228);
    v67 = v12 >> 2;
    switch(v21)
    {
      case 2:
        *(_DWORD *)(a10 + 3260) = 1;
        v65 = a9;
        v33 = a2 + 25652;
        result = (int32x2_t *)nonrd_pick_sb_modes(result, a3, a2, a6, a7, a9, v20, a10 + 2560);
        v34 = **(_QWORD **)(a2 + 25360);
        *(_OWORD *)(a10 + 2560) = *(_OWORD *)v34;
        v35 = *(_OWORD *)(v34 + 16);
        v36 = *(_OWORD *)(v34 + 32);
        v37 = *(_OWORD *)(v34 + 48);
        *(_DWORD *)(a10 + 2624) = *(_DWORD *)(v34 + 64);
        *(_OWORD *)(a10 + 2608) = v37;
        *(_OWORD *)(a10 + 2592) = v36;
        *(_OWORD *)(a10 + 2576) = v35;
        v38 = *(_QWORD *)(a2 + 25568);
        v39 = *(_DWORD *)(v38 + 32);
        v40 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(a10 + 2628) = *(_OWORD *)v38;
        *(_DWORD *)(a10 + 2660) = v39;
        *(_OWORD *)(a10 + 2644) = v40;
        *(_BYTE *)(a10 + 3268) = *v66;
        *(_DWORD *)(a10 + 3256) = *(_DWORD *)(v33 + 1252);
        if (v67 + (int)a7 < v10[1].i32[0])
        {
          *(_DWORD *)(a10 + 4108) = 1;
          result = (int32x2_t *)nonrd_pick_sb_modes(v18, a3, a2, a6, v67 + (int)a7, (uint64_t)&v70, v20, a10 + 3408);
          v41 = **(_QWORD **)(a2 + 25360);
          *(_OWORD *)(a10 + 3408) = *(_OWORD *)v41;
          v42 = *(_OWORD *)(v41 + 16);
          v43 = *(_OWORD *)(v41 + 32);
          v44 = *(_OWORD *)(v41 + 48);
          *(_DWORD *)(a10 + 3472) = *(_DWORD *)(v41 + 64);
          *(_OWORD *)(a10 + 3456) = v44;
          *(_OWORD *)(a10 + 3440) = v43;
          *(_OWORD *)(a10 + 3424) = v42;
          v45 = *(_QWORD *)(a2 + 25568);
          v46 = *(_DWORD *)(v45 + 32);
          v47 = *(_OWORD *)(v45 + 16);
          *(_OWORD *)(a10 + 3476) = *(_OWORD *)v45;
          *(_DWORD *)(a10 + 3508) = v46;
          *(_OWORD *)(a10 + 3492) = v47;
          *(_BYTE *)(a10 + 4116) = *v66;
          *(_DWORD *)(a10 + 4104) = *(_DWORD *)(v33 + 1252);
          goto LABEL_27;
        }
        break;
      case 1:
        *(_DWORD *)(a10 + 1564) = 1;
        v65 = a9;
        v48 = a2 + 25652;
        result = (int32x2_t *)nonrd_pick_sb_modes(result, a3, a2, a6, a7, a9, v20, a10 + 864);
        v49 = **(_QWORD **)(a2 + 25360);
        *(_OWORD *)(a10 + 864) = *(_OWORD *)v49;
        v50 = *(_OWORD *)(v49 + 16);
        v51 = *(_OWORD *)(v49 + 32);
        v52 = *(_OWORD *)(v49 + 48);
        *(_DWORD *)(a10 + 928) = *(_DWORD *)(v49 + 64);
        *(_OWORD *)(a10 + 896) = v51;
        *(_OWORD *)(a10 + 912) = v52;
        *(_OWORD *)(a10 + 880) = v50;
        v53 = *(_QWORD *)(a2 + 25568);
        v54 = *(_DWORD *)(v53 + 32);
        v55 = *(_OWORD *)(v53 + 16);
        *(_OWORD *)(a10 + 932) = *(_OWORD *)v53;
        *(_DWORD *)(a10 + 964) = v54;
        *(_OWORD *)(a10 + 948) = v55;
        *(_BYTE *)(a10 + 1572) = *v66;
        *(_DWORD *)(a10 + 1560) = *(_DWORD *)(v48 + 1252);
        if (v67 + (int)a6 < v10->i32[0])
        {
          *(_DWORD *)(a10 + 2412) = 1;
          result = (int32x2_t *)nonrd_pick_sb_modes(v18, a3, a2, v67 + (int)a6, a7, (uint64_t)&v70, v20, a10 + 1712);
          v56 = **(_QWORD **)(a2 + 25360);
          *(_OWORD *)(a10 + 1712) = *(_OWORD *)v56;
          v57 = *(_OWORD *)(v56 + 16);
          v58 = *(_OWORD *)(v56 + 32);
          v59 = *(_OWORD *)(v56 + 48);
          *(_DWORD *)(a10 + 1776) = *(_DWORD *)(v56 + 64);
          *(_OWORD *)(a10 + 1760) = v59;
          *(_OWORD *)(a10 + 1744) = v58;
          *(_OWORD *)(a10 + 1728) = v57;
          v60 = *(_QWORD *)(a2 + 25568);
          v61 = *(_DWORD *)(v60 + 32);
          v62 = *(_OWORD *)(v60 + 16);
          *(_OWORD *)(a10 + 1780) = *(_OWORD *)v60;
          *(_DWORD *)(a10 + 1812) = v61;
          *(_OWORD *)(a10 + 1796) = v62;
          *(_BYTE *)(a10 + 2420) = *v66;
          *(_DWORD *)(a10 + 2408) = *(_DWORD *)(v48 + 1252);
          goto LABEL_27;
        }
        break;
      case 0:
        *(_DWORD *)(a10 + 716) = 1;
        v23 = a2 + 25652;
        result = (int32x2_t *)nonrd_pick_sb_modes(result, a3, a2, a6, a7, a9, v20, a10 + 16);
        v24 = **(_QWORD **)(a2 + 25360);
        *(_OWORD *)(a10 + 16) = *(_OWORD *)v24;
        v25 = *(_OWORD *)(v24 + 16);
        v26 = *(_OWORD *)(v24 + 32);
        v27 = *(_OWORD *)(v24 + 48);
        *(_DWORD *)(a10 + 80) = *(_DWORD *)(v24 + 64);
        *(_OWORD *)(a10 + 48) = v26;
        *(_OWORD *)(a10 + 64) = v27;
        *(_OWORD *)(a10 + 32) = v25;
        v28 = *(_QWORD *)(a2 + 25568);
        v29 = *(_DWORD *)(v28 + 32);
        v30 = *(_OWORD *)(v28 + 16);
        *(_OWORD *)(a10 + 84) = *(_OWORD *)v28;
        *(_DWORD *)(a10 + 116) = v29;
        *(_OWORD *)(a10 + 100) = v30;
        *(_BYTE *)(a10 + 724) = *v66;
        *(_DWORD *)(a10 + 712) = *(_DWORD *)(v23 + 1252);
        break;
      default:
        v65 = a9;
        nonrd_select_partition(result, a2);
        nonrd_select_partition(v18, a2);
        nonrd_select_partition(v18, a2);
        result = (int32x2_t *)nonrd_select_partition(v18, a2);
LABEL_27:
        if ((_DWORD)v70 != 0x7FFFFFFF)
        {
          v63 = *((_QWORD *)&v70 + 1);
          if (*((_QWORD *)&v70 + 1) != 0x7FFFFFFFFFFFFFFFLL && *(_DWORD *)v65 != 0x7FFFFFFF)
          {
            v64 = *(_QWORD *)(v65 + 8);
            if (v64 != 0x7FFFFFFFFFFFFFFFLL)
            {
              *(_DWORD *)v65 += v70;
              *(_QWORD *)(v65 + 8) = v64 + v63;
            }
          }
        }
        break;
    }
    if (a8 == 12)
      return encode_sb_rt(v18, a2, a3, a5, a6, a7, 1, 0xCu, a10);
  }
  return result;
}

uint64_t scale_partitioning_svc(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _DWORD *v28;
  BOOL v29;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t result;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;

  v8 = a1 + 173008;
  v9 = *(_DWORD *)(a1 + 173008);
  v10 = *(_DWORD *)(a1 + 173016);
  if (v9 <= (int)a7 || v10 <= (int)a8)
    return 0;
  v13 = a1;
  v14 = *(int *)(a1 + 747512) - 1;
  v15 = a1 + 4 * v14;
  if (*(_DWORD *)(v15 + 834792) <= (int)a5 || *(_DWORD *)(v15 + 834840) <= (int)a6)
    return 0;
  v19 = 1 << b_width_log2_lookup[a4];
  v20 = ((v19 >> 2) + a7);
  v21 = ((v19 >> 2) + a8);
  v22 = (int)v21 < v10 && (int)v20 < v9;
  v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 834736) + (int)a6 + *(_DWORD *)(a1 + 4 * v14 + 834744) * (int)a5);
  if (!v22 && v23 > 6)
    return 1;
  v25 = a3;
  v26 = a2;
  if (!*(_DWORD *)(a1 + 834692) && !*(_BYTE *)(a2 + 82355) && v23 < 9)
    return 1;
  v27 = v23 + 3;
  if (v23 >= 9)
    v27 = 12;
  if ((int)v21 >= v10 && (int)v20 < v9)
  {
    v28 = &unk_208F46DAC;
LABEL_34:
    v32 = v28[v23] + v23;
    goto LABEL_35;
  }
  v29 = (int)v20 < v9;
  if ((int)v20 >= v9 && (int)v21 < v10)
  {
    v28 = &unk_208F46DE0;
    goto LABEL_34;
  }
  if (v29 || (int)v21 < v10)
    v32 = v27;
  else
    v32 = v23;
LABEL_35:
  v33 = partition_lookup[13 * b_width_log2_lookup[a4] + v32];
  v34 = subsize_lookup[13 * v33 + a4];
  if (v34 <= 2)
  {
    result = 0;
    v36 = a8 + *(_DWORD *)(a3 + 440) * a7;
    v37 = *(_QWORD *)(v8 + 168);
    v38 = *(_QWORD *)(v8 + 112) + 68 * v36;
    v39 = (uint64_t *)(v37 + 8 * v36);
    *(_QWORD *)(a3 + 448) = v39;
    *v39 = v38;
    *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * ((int)a8 + v10 * (int)a7);
    ***(_BYTE ***)(a3 + 448) = v32;
    return result;
  }
  switch(v33)
  {
    case 2:
      v43 = subsize_lookup[a4 + 26];
      set_block_size(a1, a2, a3, a7, a8, v34);
      if (v43 <= 0xB)
      {
        a1 = v13;
        a2 = v26;
        a3 = v25;
        v41 = a7;
        v42 = v21;
        v40 = v43;
        goto LABEL_45;
      }
      return 0;
    case 1:
      v44 = subsize_lookup[a4 + 13];
      set_block_size(a1, a2, a3, a7, a8, v34);
      if (v44 <= 0xB)
      {
        a1 = v13;
        a2 = v26;
        a3 = v25;
        v41 = v20;
        v42 = a8;
        v40 = v44;
        goto LABEL_45;
      }
      return 0;
    case 0:
      v40 = v32;
      v41 = a7;
      v42 = a8;
LABEL_45:
      set_block_size(a1, a2, a3, v41, v42, v40);
      return 0;
  }
  v46 = subsize_lookup[13 * v33 + a4];
  if (!scale_partitioning_svc(a1, a2, a3, subsize_lookup[13 * v33 + a4], a5, a6, a7, a8))
  {
    v45 = v19 >> 3;
    if (!scale_partitioning_svc(v13, v26, v25, v46, ((v19 >> 3) + a5), a6, v20, a8)
      && !scale_partitioning_svc(v13, v26, v25, v46, a5, (v45 + a6), a7, v21)
      && !scale_partitioning_svc(v13, v26, v25, v46, (v45 + a5), (v45 + a6), v20, v21))
    {
      return 0;
    }
  }
  return 1;
}

__n128 update_prev_partition(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v9;
  uint64_t v10;
  __n128 result;

  v9 = (_QWORD *)(a1 + 850352);
  update_prev_partition_helper(a1, 0xCu, a4, a5);
  *(_BYTE *)(*v9 + a6) = a3;
  v10 = v9[1] + 25 * a6;
  result = *(__n128 *)(a2 + 82381);
  *(_OWORD *)(v10 + 9) = *(_OWORD *)(a2 + 82390);
  *(__n128 *)v10 = result;
  *(_BYTE *)(v9[2] + a6) = 0;
  return result;
}

uint64_t copy_partitioning(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  __int128 *v12;
  __int128 v13;

  if (*(_DWORD *)(a1 + 747508))
  {
    if (*(_DWORD *)(a1 + 6880 * *(int *)(a1 + 747516) + 758668) || !*(_DWORD *)(a1 + 834692))
      return 0;
    v9 = 2 * *(_DWORD *)(a1 + 747520);
    v8 = 0;
  }
  else
  {
    v9 = 1;
    v8 = 0;
  }
  if (*(_DWORD *)(a1 + 738568) <= v9)
    return v8;
  if (!(*(_DWORD *)(a1 + 842088) | a6))
  {
    v10 = (uint64_t *)(a1 + 850344);
    v11 = a7;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 850352) + a7)
      && *(unsigned __int8 *)(*(_QWORD *)(a1 + 850368) + a7) < *(unsigned __int8 *)(a1 + 850376))
    {
      v8 = *v10;
      if (*v10)
      {
        copy_partitioning_helper(a1, a2, a3, 0xCu, a4, a5);
        ++*(_BYTE *)(v10[3] + v11);
        v12 = (__int128 *)(v10[2] + 25 * (int)v11);
        v13 = *v12;
        *(_OWORD *)(a2 + 82390) = *(__int128 *)((char *)v12 + 9);
        *(_OWORD *)(a2 + 82381) = v13;
        return 1;
      }
      return v8;
    }
  }
  return 0;
}

uint64_t update_partition_svc(uint64_t result, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v4 = result + 173008;
  if (*(_DWORD *)(result + 173008) <= (int)a3)
    return result;
  v5 = a4;
  v6 = a3;
  v7 = result;
  v8 = (uint64_t *)(result + 834736);
  v9 = a4 + *(_DWORD *)(result + 173020) * a3;
  while (1)
  {
    if (*(_DWORD *)(v4 + 8) <= (int)v5)
      return result;
    v10 = *v8;
    v11 = v9;
    v12 = partition_lookup[13 * b_width_log2_lookup[a2]
                         + **(unsigned __int8 **)(*(_QWORD *)(v4 + 168) + 8 * v9)];
    v13 = subsize_lookup[13 * v12 + a2];
    if (v13 < 3)
    {
      LOBYTE(v13) = a2;
LABEL_29:
      *(_BYTE *)(v10 + v11) = v13;
      return result;
    }
    v14 = 1 << b_width_log2_lookup[a2] >> 2;
    if (v12 == 2)
    {
      *(_BYTE *)(v10 + v9) = v13;
      if (v14 + (int)v5 >= *(_DWORD *)(v4 + 8))
        return result;
      v16 = v14 + v9;
LABEL_28:
      v11 = v16;
      goto LABEL_29;
    }
    if (v12 == 1)
    {
      *(_BYTE *)(v10 + v9) = v13;
      if (v14 + (int)v6 >= *(_DWORD *)v4)
        return result;
      v16 = v9 + *(_DWORD *)(v4 + 12) * v14;
      goto LABEL_28;
    }
    if (!v12)
      break;
    update_partition_svc(v7, subsize_lookup[13 * v12 + a2], v6, v5);
    v15 = v14 + v6;
    update_partition_svc(v7, v13, (v14 + v6), v5);
    v5 = (v14 + v5);
    result = update_partition_svc(v7, v13, v6, v5);
    v9 = v5 + *(_DWORD *)(v4 + 12) * (v14 + v6);
    v6 = (v14 + v6);
    a2 = v13;
    if (*(_DWORD *)v4 <= v15)
      return result;
  }
  *(_BYTE *)(v10 + v9) = a2;
  if (a2 == 12)
  {
    v17 = *(_DWORD *)v4;
    if ((int)v6 < *(_DWORD *)v4)
    {
      if ((int)v5 < *(_DWORD *)(v4 + 8))
      {
        *(_BYTE *)(v10 + v9) = 12;
        v17 = *(_DWORD *)v4;
      }
      if ((int)v6 < v17 && (int)v5 + 4 < *(_DWORD *)(v4 + 8))
      {
        *(_BYTE *)(v10 + v9 + 4) = 12;
        v17 = *(_DWORD *)v4;
      }
    }
    if ((int)v6 + 4 < v17)
    {
      if ((int)v5 < *(_DWORD *)(v4 + 8))
      {
        *(_BYTE *)(v10 + v9 + 4 * *(_DWORD *)(v4 + 12)) = 12;
        v17 = *(_DWORD *)v4;
      }
      if ((int)v6 + 4 < v17 && (int)v5 + 4 < *(_DWORD *)(v4 + 8))
      {
        v11 = v9 + 4 * *(_DWORD *)(v4 + 12) + 4;
        LOBYTE(v13) = 12;
        goto LABEL_29;
      }
    }
  }
  return result;
}

uint64_t set_block_size(uint64_t result, uint64_t a2, uint64_t a3, int a4, int a5, char a6)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_DWORD *)(result + 173016);
  if (v6 > a5 && *(_DWORD *)(result + 173008) > a4)
  {
    v7 = a5 + *(_DWORD *)(a3 + 440) * a4;
    v8 = *(_QWORD *)(result + 173176);
    v9 = 8 * v7;
    *(_QWORD *)(a3 + 448) = v8 + v9;
    *(_QWORD *)(v8 + v9) = *(_QWORD *)(result + 173120) + 68 * v7;
    *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * (a5 + v6 * a4);
    ***(_BYTE ***)(a3 + 448) = a6;
  }
  return result;
}

uint64_t chroma_check(uint64_t result, uint64_t a2, unsigned __int8 a3, unsigned int a4, int a5, int a6)
{
  uint64_t v7;
  int v8;
  int v9;
  BOOL v10;
  BOOL *v11;
  char v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;

  if (!a5)
  {
    if ((v7 = result, *(int *)(result + 190056) < 9)
      || *(_QWORD *)(result + 842184) >= (uint64_t)a4
      || *(_DWORD *)(result + 842128)
      && ((v9 = *(_DWORD *)(result + 842136), v8 = *(_DWORD *)(result + 842140), v9 <= v8)
        ? (v10 = v9 <= 2 * v8)
        : (v10 = 0),
          !v10))
    {
      v11 = (BOOL *)(a2 + 82352);
      if (*(_DWORD *)(result + 190380) != 1 || a6 == 0)
        v13 = 2;
      else
        v13 = 5;
      v14 = a3;
      v15 = a4 >> v13;
      v16 = ss_size_lookup[4 * a3 + 2 * *(int *)(a2 + 25056) + *(int *)(a2 + 25060)];
      if (v16 == 13)
        v17 = -1;
      else
        v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(result + (v16 << 6) + 740464))(*(_QWORD *)(a2 + 16520), *(unsigned int *)(a2 + 16528), *(_QWORD *)(a2 + 25064), *(unsigned int *)(a2 + 25072));
      *v11 = v17 > v15;
      v18 = ss_size_lookup[4 * v14 + 2 * *(int *)(a2 + 25192) + *(int *)(a2 + 25196)];
      if (v18 == 13)
        result = 0xFFFFFFFFLL;
      else
        result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v7 + (v18 << 6) + 740464))(*(_QWORD *)(a2 + 24824), *(unsigned int *)(a2 + 24832), *(_QWORD *)(a2 + 25200), *(unsigned int *)(a2 + 25208));
      *(_BYTE *)(a2 + 82353) = result > v15;
    }
  }
  return result;
}

uint64_t fill_variance_4x4avg(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5, int a6, _DWORD *a7, char a8, int a9, int a10, int a11)
{
  unsigned int v12;
  __int32 *v13;
  __int32 *v14;
  uint8x8_t v15;
  __int32 *v16;
  uint8x8_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int16x8_t v23;
  uint64_t *v24;
  int16x8_t v25;
  unsigned int v26;
  int v27;
  __int32 *v28;
  __int32 *v29;
  uint8x8_t v30;
  __int32 *v31;
  uint8x8_t v32;
  unsigned int v33;
  __int32 *v34;
  __int32 *v35;
  __int32 *v36;
  int v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int16x8_t v41;
  uint64_t *v42;
  int16x8_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  int v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  __int32 *v52;
  __int32 *v53;
  uint8x8_t v54;
  __int32 *v55;
  uint8x8_t v56;
  int v57;
  uint64_t v58;
  unsigned int v59;
  __int32 *v60;
  __int32 *v61;
  uint8x8_t v62;
  __int32 *v63;
  uint8x8_t v64;
  int v65;
  unsigned int v66;
  __int32 *v67;
  __int32 *v68;
  uint8x8_t v69;
  __int32 *v70;
  uint8x8_t v71;
  uint16x8_t v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t *v77;
  uint64_t v78;
  int16x8_t v79;
  uint64_t *v80;
  int16x8_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  int16x8_t v87;
  uint64_t *v88;
  int16x8_t v89;
  uint64_t *v90;
  uint64_t v91;
  int16x8_t v92;
  uint64_t *v93;
  int16x8_t v94;
  int v95;
  unsigned int v96;
  uint64_t v97;
  __int32 *v99;
  __int32 *v100;
  uint8x8_t v101;
  __int32 *v102;
  uint8x8_t v103;
  unsigned int v104;
  __int32 *v105;
  __int32 *v106;
  __int32 *v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  __int32 *v112;
  __int32 *v113;
  uint8x8_t v114;
  __int32 *v115;
  uint8x8_t v116;
  unsigned int v117;
  __int32 *v118;
  __int32 *v119;
  __int32 *v120;
  __int32 *v121;
  __int32 *v122;
  uint8x8_t v123;
  __int32 *v124;
  uint8x8_t v125;
  unsigned int v126;
  __int32 *v127;
  __int32 *v128;
  __int32 *v129;
  unsigned int v130;
  uint16x8_t v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t *v136;
  uint64_t v137;
  int16x8_t v138;
  uint64_t *v139;
  int16x8_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t *v148;
  uint64_t v149;
  int16x8_t v150;
  uint64_t *v151;
  int16x8_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  int16x8_t v158;
  uint64_t *v159;
  int16x8_t v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t *v163;

  v12 = (int)a5 < a9 && a6 < a10;
  if ((a8 & 8) == 0)
  {
    if (a11)
    {
      if ((v12 & 1) != 0)
      {
        v13 = (__int32 *)(result + a6 * (uint64_t)a2 + a5);
        v14 = (__int32 *)((char *)v13 + a2);
        v15.i32[0] = *v13;
        v15.i32[1] = *v14;
        v16 = (__int32 *)((char *)v14 + a2);
        v17.i32[0] = *v16;
        v17.i32[1] = *(__int32 *)((char *)v16 + a2);
        v18 = ((vaddlvq_u16(vaddl_u8(v15, v17)) + 8) >> 4) - 128;
        v19 = v18 * v18;
      }
      else
      {
        v19 = 0;
        v18 = 0;
      }
      v48 = 0;
      v49 = 0;
      a7[20] = v19;
      a7[21] = v18;
      a7[22] = 0;
      v50 = a5 + 4;
      if ((int)v50 < a9 && a6 < a10)
      {
        v52 = (__int32 *)(result + a6 * (uint64_t)a2 + v50);
        v53 = (__int32 *)((char *)v52 + a2);
        v54.i32[0] = *v52;
        v54.i32[1] = *v53;
        v55 = (__int32 *)((char *)v53 + a2);
        v56.i32[0] = *v55;
        v56.i32[1] = *(__int32 *)((char *)v55 + a2);
        v49 = ((vaddlvq_u16(vaddl_u8(v54, v56)) + 8) >> 4) - 128;
        v48 = v49 * v49;
      }
      v57 = 0;
      a7[56] = v48;
      a7[57] = v49;
      a7[58] = 0;
      v58 = a6 + 4;
      v59 = 0;
      if ((int)a5 < a9 && (int)v58 < a10)
      {
        v60 = (__int32 *)(result + v58 * a2 + a5);
        v61 = (__int32 *)((char *)v60 + a2);
        v62.i32[0] = *v60;
        v62.i32[1] = *v61;
        v63 = (__int32 *)((char *)v61 + a2);
        v64.i32[0] = *v63;
        v64.i32[1] = *(__int32 *)((char *)v63 + a2);
        v59 = ((vaddlvq_u16(vaddl_u8(v62, v64)) + 8) >> 4) - 128;
        v57 = v59 * v59;
      }
      v65 = 0;
      a7[92] = v57;
      a7[93] = v59;
      a7[94] = 0;
      if ((int)v50 < a9)
      {
        v66 = 0;
        if ((int)v58 < a10)
        {
          v67 = (__int32 *)(result + (int)v58 * (uint64_t)a2 + v50);
          v68 = (__int32 *)((char *)v67 + a2);
          v69.i32[0] = *v67;
          v69.i32[1] = *v68;
          v70 = (__int32 *)((char *)v68 + a2);
          v71.i32[0] = *v70;
          v71.i32[1] = *(__int32 *)((char *)v70 + a2);
          v72 = vaddl_u8(v69, v71);
LABEL_44:
          v66 = ((vaddlvq_u16(v72) + 8) >> 4) - 128;
LABEL_72:
          v65 = v66 * v66;
          goto LABEL_73;
        }
        goto LABEL_73;
      }
      goto LABEL_74;
    }
    if (v12)
    {
      v28 = (__int32 *)(result + a6 * (uint64_t)a2 + a5);
      v29 = (__int32 *)((char *)v28 + a2);
      v30.i32[0] = *v28;
      v30.i32[1] = *v29;
      v31 = (__int32 *)((char *)v29 + a2);
      v32.i32[0] = *v31;
      v32.i32[1] = *(__int32 *)((char *)v31 + a2);
      v33 = vaddlvq_u16(vaddl_u8(v30, v32));
      v34 = (__int32 *)(a3 + a6 * (uint64_t)a4 + a5);
      v35 = (__int32 *)((char *)v34 + a4);
      v30.i32[0] = *v34;
      v30.i32[1] = *v35;
      v36 = (__int32 *)((char *)v35 + a4);
      v32.i32[0] = *v36;
      v32.i32[1] = *(__int32 *)((char *)v36 + a4);
      v12 = ((v33 + 8) >> 4) - ((vaddlvq_u16(vaddl_u8(v30, v32)) + 8) >> 4);
      v37 = v12 * v12;
    }
    else
    {
      v37 = 0;
    }
    v95 = 0;
    v96 = 0;
    a7[20] = v37;
    a7[21] = v12;
    a7[22] = 0;
    v97 = a5 + 4;
    if ((int)v97 < a9 && a6 < a10)
    {
      v99 = (__int32 *)(result + a6 * (uint64_t)a2 + v97);
      v100 = (__int32 *)((char *)v99 + a2);
      v101.i32[0] = *v99;
      v101.i32[1] = *v100;
      v102 = (__int32 *)((char *)v100 + a2);
      v103.i32[0] = *v102;
      v103.i32[1] = *(__int32 *)((char *)v102 + a2);
      v104 = vaddlvq_u16(vaddl_u8(v101, v103));
      v105 = (__int32 *)(a3 + a6 * (uint64_t)a4 + v97);
      v106 = (__int32 *)((char *)v105 + a4);
      v101.i32[0] = *v105;
      v101.i32[1] = *v106;
      v107 = (__int32 *)((char *)v106 + a4);
      v103.i32[0] = *v107;
      v103.i32[1] = *(__int32 *)((char *)v107 + a4);
      v96 = ((v104 + 8) >> 4) - ((vaddlvq_u16(vaddl_u8(v101, v103)) + 8) >> 4);
      v95 = v96 * v96;
    }
    v108 = 0;
    a7[56] = v95;
    a7[57] = v96;
    a7[58] = 0;
    v109 = a6 + 4;
    v110 = a3 + (int)v109 * (uint64_t)a4;
    v111 = 0;
    if ((int)a5 < a9 && (int)v109 < a10)
    {
      v112 = (__int32 *)(result + v109 * a2 + a5);
      v113 = (__int32 *)((char *)v112 + a2);
      v114.i32[0] = *v112;
      v114.i32[1] = *v113;
      v115 = (__int32 *)((char *)v113 + a2);
      v116.i32[0] = *v115;
      v116.i32[1] = *(__int32 *)((char *)v115 + a2);
      v117 = vaddlvq_u16(vaddl_u8(v114, v116));
      v118 = (__int32 *)(v110 + a5);
      v119 = (__int32 *)((char *)v118 + a4);
      v114.i32[0] = *v118;
      v114.i32[1] = *v119;
      v120 = (__int32 *)((char *)v119 + a4);
      v116.i32[0] = *v120;
      v116.i32[1] = *(__int32 *)((char *)v120 + a4);
      v111 = ((v117 + 8) >> 4) - ((vaddlvq_u16(vaddl_u8(v114, v116)) + 8) >> 4);
      v108 = v111 * v111;
    }
    v65 = 0;
    a7[92] = v108;
    a7[93] = v111;
    a7[94] = 0;
    if ((int)v97 >= a9)
      goto LABEL_74;
    v66 = 0;
    if ((int)v109 >= a10)
      goto LABEL_73;
    v121 = (__int32 *)(result + (int)v109 * (uint64_t)a2 + v97);
    v122 = (__int32 *)((char *)v121 + a2);
    v123.i32[0] = *v121;
    v123.i32[1] = *v122;
    v124 = (__int32 *)((char *)v122 + a2);
    v125.i32[0] = *v124;
    v125.i32[1] = *(__int32 *)((char *)v124 + a2);
    v126 = vaddlvq_u16(vaddl_u8(v123, v125));
    v127 = (__int32 *)(v110 + v97);
    v128 = (__int32 *)((char *)v127 + a4);
    v123.i32[0] = *v127;
    v123.i32[1] = *v128;
    v129 = (__int32 *)((char *)v128 + a4);
    v130 = (v126 + 8) >> 4;
    v125.i32[0] = *v129;
    v125.i32[1] = *(__int32 *)((char *)v129 + a4);
    v131 = vaddl_u8(v123, v125);
LABEL_71:
    v66 = v130 - ((vaddlvq_u16(v131) + 8) >> 4);
    goto LABEL_72;
  }
  if (!a11)
  {
    v38 = a3 + a6 * (uint64_t)a4;
    if (v12)
    {
      v39 = (uint64_t *)(2 * (result + a6 * (uint64_t)a2 + a5));
      v40 = 2 * a2;
      v41.i64[0] = *v39;
      v41.i64[1] = *(uint64_t *)((char *)v39 + v40);
      v42 = (uint64_t *)((char *)v39 + 4 * a2);
      v43.i64[0] = *v42;
      v43.i64[1] = *(uint64_t *)((char *)v42 + v40);
      LODWORD(v42) = vaddlvq_u16((uint16x8_t)vaddq_s16(v43, v41)) + 8;
      v44 = (uint64_t *)(2 * (v38 + a5));
      v45 = 2 * a4;
      v41.i64[0] = *v44;
      v41.i64[1] = *(uint64_t *)((char *)v44 + v45);
      v46 = (uint64_t *)((char *)v44 + 4 * a4);
      v43.i64[0] = *v46;
      v43.i64[1] = *(uint64_t *)((char *)v46 + v45);
      v12 = (v42 >> 4) - ((vaddlvq_u16((uint16x8_t)vaddq_s16(v43, v41)) + 8) >> 4);
      v47 = v12 * v12;
    }
    else
    {
      v47 = 0;
    }
    v132 = 0;
    v133 = 0;
    a7[20] = v47;
    a7[21] = v12;
    a7[22] = 0;
    v134 = a5 + 4;
    if ((int)v134 < a9 && a6 < a10)
    {
      v136 = (uint64_t *)(2 * (result + a6 * (uint64_t)a2 + v134));
      v137 = 2 * a2;
      v138.i64[0] = *v136;
      v138.i64[1] = *(uint64_t *)((char *)v136 + v137);
      v139 = (uint64_t *)((char *)v136 + 4 * a2);
      v140.i64[0] = *v139;
      v140.i64[1] = *(uint64_t *)((char *)v139 + v137);
      LODWORD(v139) = vaddlvq_u16((uint16x8_t)vaddq_s16(v140, v138)) + 8;
      v141 = (uint64_t *)(2 * (v38 + v134));
      v142 = 2 * a4;
      v138.i64[0] = *v141;
      v138.i64[1] = *(uint64_t *)((char *)v141 + v142);
      v143 = (uint64_t *)((char *)v141 + 4 * a4);
      v140.i64[0] = *v143;
      v140.i64[1] = *(uint64_t *)((char *)v143 + v142);
      v133 = (v139 >> 4) - ((vaddlvq_u16((uint16x8_t)vaddq_s16(v140, v138)) + 8) >> 4);
      v132 = v133 * v133;
    }
    v144 = 0;
    a7[56] = v132;
    a7[57] = v133;
    a7[58] = 0;
    v145 = a6 + 4;
    v146 = a3 + (int)v145 * (uint64_t)a4;
    v147 = 0;
    if ((int)a5 < a9 && (int)v145 < a10)
    {
      v148 = (uint64_t *)(2 * (result + v145 * a2 + a5));
      v149 = 2 * a2;
      v150.i64[0] = *v148;
      v150.i64[1] = *(uint64_t *)((char *)v148 + v149);
      v151 = (uint64_t *)((char *)v148 + 4 * a2);
      v152.i64[0] = *v151;
      v152.i64[1] = *(uint64_t *)((char *)v151 + v149);
      LODWORD(v149) = vaddlvq_u16((uint16x8_t)vaddq_s16(v152, v150)) + 8;
      v153 = (uint64_t *)(2 * (v146 + a5));
      v154 = 2 * a4;
      v150.i64[0] = *v153;
      v150.i64[1] = *(uint64_t *)((char *)v153 + v154);
      v155 = (uint64_t *)((char *)v153 + 4 * a4);
      v152.i64[0] = *v155;
      v152.i64[1] = *(uint64_t *)((char *)v155 + v154);
      v147 = (v149 >> 4) - ((vaddlvq_u16((uint16x8_t)vaddq_s16(v152, v150)) + 8) >> 4);
      v144 = v147 * v147;
    }
    v65 = 0;
    a7[92] = v144;
    a7[93] = v147;
    a7[94] = 0;
    if ((int)v134 >= a9)
      goto LABEL_74;
    v66 = 0;
    if ((int)v145 >= a10)
      goto LABEL_73;
    v156 = (uint64_t *)(2 * (result + (int)v145 * (uint64_t)a2 + v134));
    v157 = 2 * a2;
    v158.i64[0] = *v156;
    v158.i64[1] = *(uint64_t *)((char *)v156 + v157);
    v159 = (uint64_t *)((char *)v156 + 4 * a2);
    v160.i64[0] = *v159;
    v160.i64[1] = *(uint64_t *)((char *)v159 + v157);
    LODWORD(v159) = vaddlvq_u16((uint16x8_t)vaddq_s16(v160, v158)) + 8;
    v161 = (uint64_t *)(2 * (v146 + v134));
    v162 = 2 * a4;
    v158.i64[0] = *v161;
    v158.i64[1] = *(uint64_t *)((char *)v161 + v162);
    v130 = v159 >> 4;
    v163 = (uint64_t *)((char *)v161 + 4 * a4);
    v160.i64[0] = *v163;
    v160.i64[1] = *(uint64_t *)((char *)v163 + v162);
    v131 = (uint16x8_t)vaddq_s16(v160, v158);
    goto LABEL_71;
  }
  v20 = result + a6 * (uint64_t)a2;
  if ((v12 & 1) != 0)
  {
    v21 = (uint64_t *)(2 * (v20 + a5));
    v22 = 2 * a2;
    v23.i64[0] = *v21;
    v23.i64[1] = *(uint64_t *)((char *)v21 + v22);
    v24 = (uint64_t *)((char *)v21 + 4 * a2);
    v25.i64[0] = *v24;
    v25.i64[1] = *(uint64_t *)((char *)v24 + v22);
    v26 = ((vaddlvq_u16((uint16x8_t)vaddq_s16(v25, v23)) + 8) >> 4) - 128;
    v27 = v26 * v26;
  }
  else
  {
    v27 = 0;
    v26 = 0;
  }
  v73 = 0;
  v74 = 0;
  a7[20] = v27;
  a7[21] = v26;
  a7[22] = 0;
  v75 = a5 + 4;
  if ((int)(a5 + 4) < a9 && a6 < a10)
  {
    v77 = (uint64_t *)(2 * (v20 + v75));
    v78 = 2 * a2;
    v79.i64[0] = *v77;
    v79.i64[1] = *(uint64_t *)((char *)v77 + v78);
    v80 = (uint64_t *)((char *)v77 + 4 * a2);
    v81.i64[0] = *v80;
    v81.i64[1] = *(uint64_t *)((char *)v80 + v78);
    v74 = ((vaddlvq_u16((uint16x8_t)vaddq_s16(v81, v79)) + 8) >> 4) - 128;
    v73 = v74 * v74;
  }
  v82 = 0;
  a7[56] = v73;
  a7[57] = v74;
  a7[58] = 0;
  v83 = a6 + 4;
  v84 = 0;
  if ((int)a5 < a9 && (int)v83 < a10)
  {
    v85 = (uint64_t *)(2 * (result + v83 * a2 + a5));
    v86 = 2 * a2;
    v87.i64[0] = *v85;
    v87.i64[1] = *(uint64_t *)((char *)v85 + v86);
    v88 = (uint64_t *)((char *)v85 + 4 * a2);
    v89.i64[0] = *v88;
    v89.i64[1] = *(uint64_t *)((char *)v88 + v86);
    v84 = ((vaddlvq_u16((uint16x8_t)vaddq_s16(v89, v87)) + 8) >> 4) - 128;
    v82 = v84 * v84;
  }
  v65 = 0;
  a7[92] = v82;
  a7[93] = v84;
  a7[94] = 0;
  if ((int)v75 < a9)
  {
    v66 = 0;
    if ((int)v83 < a10)
    {
      v90 = (uint64_t *)(2 * (result + (int)v83 * (uint64_t)a2 + v75));
      v91 = 2 * a2;
      v92.i64[0] = *v90;
      v92.i64[1] = *(uint64_t *)((char *)v90 + v91);
      v93 = (uint64_t *)((char *)v90 + 4 * a2);
      v94.i64[0] = *v93;
      v94.i64[1] = *(uint64_t *)((char *)v93 + v91);
      v72 = (uint16x8_t)vaddq_s16(v94, v92);
      goto LABEL_44;
    }
LABEL_73:
    a7[128] = v65;
    a7[129] = v66;
    a7[130] = 0;
    return result;
  }
LABEL_74:
  a7[128] = 0;
  *(_QWORD *)(a7 + 129) = 0;
  return result;
}

uint64_t set_vt_partitioning(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, unsigned int a5, int a6, int a7, uint64_t a8, unsigned __int8 a9, int a10)
{
  uint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  signed int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  signed int v34;
  signed int v35;
  BOOL v36;
  uint64_t v37;
  signed int v38;
  signed int v39;
  BOOL v40;

  if (a10 == 1)
    return 0;
  v13 = a5;
  v14 = a3;
  v15 = a2;
  v16 = a1;
  v17 = num_8x8_blocks_wide_lookup[a5];
  v18 = a1 + 172972;
  v19 = num_8x8_blocks_high_lookup[a5];
  if (a5 != a9)
  {
    if (a5 > a9)
    {
      if ((v25 = *(_DWORD *)v18) != 0 && !*(_BYTE *)(a1 + 172988)
        || (v26 = (*a4 - ((unint64_t)((int)a4[1] * (uint64_t)(int)a4[1]) >> a4[2])) << 8 >> a4[2],
            a4[3] = v26,
            v25)
        && !*(_BYTE *)(a1 + 172988)
        || a5 <= 9 && v26 <= 16 * a8)
      {
        v27 = a7 + (v17 >> 1);
        v28 = *(_DWORD *)(a1 + 173016);
        if (v27 >= v28)
        {
          v30 = *(_DWORD *)(a1 + 173008);
          v29 = a6 + (v19 >> 1);
        }
        else
        {
          v29 = a6 + (v19 >> 1);
          v30 = *(_DWORD *)(a1 + 173008);
          if (v29 < v30 && (int)a4[3] < a8)
          {
            v31 = a6;
            v32 = a7;
LABEL_42:
            set_block_size(a1, a2, a3, v31, v32, v13);
            return 1;
          }
        }
        if (v29 < v30)
        {
          v33 = subsize_lookup[a5 + 26];
          v34 = (a4[12] - ((unint64_t)((int)a4[13] * (uint64_t)(int)a4[13]) >> a4[14])) << 8 >> a4[14];
          a4[15] = v34;
          v35 = (a4[16] - ((unint64_t)((int)a4[17] * (uint64_t)(int)a4[17]) >> a4[18])) << 8 >> a4[18];
          a4[19] = v35;
          v36 = v34 < a8 && v35 < a8;
          if (v36 && ss_size_lookup[4 * v33 + 2 * *(int *)(a3 + 144) + *(int *)(a3 + 148)] <= 0xCu)
          {
            set_block_size(a1, a2, a3, a6, a7, v33);
            a1 = v16;
            a2 = v15;
            a3 = v14;
            v31 = a6;
            v32 = v27;
            v13 = v33;
            goto LABEL_42;
          }
        }
        if (v27 < v28)
        {
          v37 = subsize_lookup[a5 + 13];
          v38 = (a4[4] - ((unint64_t)((int)a4[5] * (uint64_t)(int)a4[5]) >> a4[6])) << 8 >> a4[6];
          a4[7] = v38;
          v39 = (a4[8] - ((unint64_t)((int)a4[9] * (uint64_t)(int)a4[9]) >> a4[10])) << 8 >> a4[10];
          a4[11] = v39;
          v40 = v38 < a8 && v39 < a8;
          if (v40 && ss_size_lookup[4 * v37 + 2 * *(int *)(a3 + 144) + *(int *)(a3 + 148)] <= 0xCu)
          {
            set_block_size(a1, a2, a3, a6, a7, v37);
            a1 = v16;
            a2 = v15;
            a3 = v14;
            v31 = v29;
            v32 = a7;
            v13 = v37;
            goto LABEL_42;
          }
        }
      }
    }
    return 0;
  }
  if (!*(_DWORD *)v18 || *(_BYTE *)(a1 + 172988))
    a4[3] = (*a4 - ((unint64_t)((int)a4[1] * (uint64_t)(int)a4[1]) >> a4[2])) << 8 >> a4[2];
  v20 = *(_DWORD *)(a1 + 173016);
  if ((int)(a7 + (v17 >> 1)) >= v20)
    return 0;
  v21 = *(_DWORD *)(a1 + 173008);
  if ((int)(a6 + (v19 >> 1)) >= v21 || (int)a4[3] >= a8)
    return 0;
  result = 1;
  if (v20 > a7 && v21 > a6)
  {
    v22 = a7 + *(_DWORD *)(a3 + 440) * a6;
    v23 = *(_QWORD *)(v18 + 204);
    v24 = 8 * v22;
    *(_QWORD *)(a3 + 448) = v23 + v24;
    *(_QWORD *)(v23 + v24) = *(_QWORD *)(v18 + 148) + 68 * v22;
    *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * (a7 + v20 * a6);
    ***(_BYTE ***)(a3 + 448) = a5;
  }
  return result;
}

uint64_t update_prev_partition_helper(uint64_t result, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v16;
  int v17;
  int v18;

  v4 = result + 173008;
  if (*(_DWORD *)(result + 173008) > (int)a3)
  {
    v5 = a4;
    v6 = a3;
    v7 = result;
    v8 = (uint64_t *)(result + 850344);
    v9 = a4 + *(_DWORD *)(result + 173020) * a3;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) <= (int)v5)
        return result;
      v10 = *v8;
      v11 = partition_lookup[13 * b_width_log2_lookup[a2]
                           + **(unsigned __int8 **)(*(_QWORD *)(v4 + 168) + 8 * v9)];
      v12 = v9;
      v13 = &subsize_lookup[13 * v11];
      v14 = v13[a2];
      if (v14 < 3 || v11 == 0)
        break;
      v16 = 1 << b_width_log2_lookup[a2] >> 2;
      if (v11 == 2)
      {
        *(_BYTE *)(v10 + v9) = v14;
        if (v16 + (int)v5 >= *(_DWORD *)(v4 + 8))
          return result;
        v18 = v16 + v9;
LABEL_17:
        v12 = v18;
LABEL_18:
        *(_BYTE *)(v10 + v12) = v14;
        return result;
      }
      if (v11 == 1)
      {
        *(_BYTE *)(v10 + v9) = v14;
        if (v16 + (int)v6 >= *(_DWORD *)v4)
          return result;
        v18 = v9 + *(_DWORD *)(v4 + 12) * v16;
        goto LABEL_17;
      }
      update_prev_partition_helper(v7, v13[a2], v6, v5);
      v17 = v16 + v6;
      update_prev_partition_helper(v7, v14, (v16 + v6), v5);
      v5 = (v16 + v5);
      result = update_prev_partition_helper(v7, v14, v6, v5);
      v9 = v5 + *(_DWORD *)(v4 + 12) * (v16 + v6);
      v6 = (v16 + v6);
      a2 = v14;
      if (*(_DWORD *)v4 <= v17)
        return result;
    }
    LOBYTE(v14) = a2;
    goto LABEL_18;
  }
  return result;
}

uint64_t copy_partitioning_helper(uint64_t result, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 ***v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v6 = result + 173008;
  v7 = *(_DWORD *)(result + 173008);
  if (v7 > (int)a5)
  {
    v8 = a6;
    v9 = a5;
    v12 = result;
    v13 = (_QWORD *)(result + 850344);
    v14 = a6 + *(_DWORD *)(result + 173020) * a5;
    while (1)
    {
      v15 = *(_DWORD *)(v6 + 8);
      if (v15 <= (int)v8)
        return result;
      v16 = partition_lookup[13 * b_width_log2_lookup[a4] + *(unsigned __int8 *)(*v13 + v14)];
      v17 = subsize_lookup[13 * v16 + a4];
      if (v17 <= 2)
        goto LABEL_10;
      v18 = 1 << b_width_log2_lookup[a4] >> 2;
      if (v16 == 2)
        break;
      if (v16 == 1)
      {
        v33 = *(_DWORD *)(a3 + 440);
        v34 = v8 + v33 * v9;
        v35 = *(_QWORD *)(v6 + 168);
        v36 = 8 * v34;
        *(_QWORD *)(a3 + 448) = v35 + v36;
        *(_QWORD *)(v35 + v36) = *(_QWORD *)(v6 + 112) + 68 * v34;
        *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * ((int)v8 + v15 * (int)v9);
        ***(_BYTE ***)(a3 + 448) = v17;
        v37 = v18 + v9;
        if (v7 <= v18 + (int)v9)
          return result;
        v23 = (unsigned __int8 ***)(a3 + 448);
        v38 = v8 + v33 * v37;
        v39 = *(_QWORD *)(v6 + 168);
        v40 = 8 * v38;
        *(_QWORD *)(a3 + 448) = v39 + v40;
        *(_QWORD *)(v39 + v40) = *(_QWORD *)(v6 + 112) + 68 * v38;
        v32 = *(_QWORD *)(a2 + 25576) + 36 * ((int)v8 + v37 * v15);
        goto LABEL_15;
      }
      if (!v16)
      {
LABEL_10:
        v20 = v8 + *(_DWORD *)(a3 + 440) * v9;
        v21 = *(_QWORD *)(v6 + 168);
        v22 = 8 * v20;
        *(_QWORD *)(a3 + 448) = v21 + v22;
        *(_QWORD *)(v21 + v22) = *(_QWORD *)(v6 + 112) + 68 * v20;
        v23 = (unsigned __int8 ***)(a3 + 448);
        *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * ((int)v8 + v15 * (int)v9);
LABEL_16:
        ***v23 = a4;
        return result;
      }
      copy_partitioning_helper(v12, a2, a3, subsize_lookup[13 * v16 + a4], v9, v8);
      v19 = v18 + v9;
      copy_partitioning_helper(v12, a2, a3, v17, (v18 + v9), v8);
      v8 = (v18 + v8);
      result = copy_partitioning_helper(v12, a2, a3, v17, v9, v8);
      v14 = v8 + *(_DWORD *)(v6 + 12) * (v18 + v9);
      v7 = *(_DWORD *)v6;
      v9 = (v18 + v9);
      a4 = v17;
      if (*(_DWORD *)v6 <= v19)
        return result;
    }
    v24 = *(_DWORD *)(a3 + 440) * v9;
    v25 = *(_QWORD *)(v6 + 168);
    v26 = 8 * (v24 + (int)v8);
    *(_QWORD *)(a3 + 448) = v25 + v26;
    *(_QWORD *)(v25 + v26) = *(_QWORD *)(v6 + 112) + 68 * (v24 + (int)v8);
    v27 = v15 * v9;
    *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * (v15 * (int)v9 + (int)v8);
    ***(_BYTE ***)(a3 + 448) = v17;
    v28 = v18 + v8;
    if (v15 <= v18 + (int)v8)
      return result;
    v23 = (unsigned __int8 ***)(a3 + 448);
    v29 = v24 + v28;
    v30 = *(_QWORD *)(v6 + 168);
    v31 = 8 * v29;
    *(_QWORD *)(a3 + 448) = v30 + v31;
    *(_QWORD *)(v30 + v31) = *(_QWORD *)(v6 + 112) + 68 * v29;
    v32 = *(_QWORD *)(a2 + 25576) + 36 * (v28 + v27);
LABEL_15:
    *(_QWORD *)(a2 + 25568) = v32;
    a4 = v17;
    goto LABEL_16;
  }
  return result;
}

void *nonrd_pick_sb_modes(int32x2_t *a1, __n128 *a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int32x2_t *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  int8x16_t v22;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int32x2_t *v29;
  _BYTE *v30;
  int v31;
  _BYTE *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *result;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int32x2_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  int v61;
  int32x2_t *v62;
  char *v63;
  _BYTE __src[48];
  _BYTE v65[48];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v13 = a1 + 22059;
  v62 = a1 + 92383;
  v63 = (char *)&a1[21621] + 4;
  v14 = (_DWORD *)(a3 + 24920);
  if (a7 <= 3)
    v15 = 3;
  else
    v15 = a7;
  v16 = num_4x4_blocks_wide_lookup[v15];
  v17 = num_4x4_blocks_high_lookup[v15];
  *(_QWORD *)&v18 = set_offsets_0(a1, a2, a3, a4, a5, a7).n128_u64[0];
  v58 = a4;
  v61 = a5;
  set_segment_index((uint64_t)a1, a3, a4, a5, a7, v18, v19, v20, v21, v22);
  v14[168] = 0;
  v23 = **(_QWORD **)(a3 + 25360);
  *(_BYTE *)v23 = a7;
  __memcpy_chk();
  __memcpy_chk();
  memcpy(&__src[v16], *(const void **)(a3 + 25112), v16 >> v14[34]);
  memcpy(&v65[v17], *(const void **)(a3 + 25120), v17 >> v14[35]);
  memcpy(&__src[2 * v16], *(const void **)(a3 + 25248), v16 >> v14[68]);
  memcpy(&v65[2 * v17], *(const void **)(a3 + 25256), v17 >> v14[69]);
  if (v13[1709].i32[1] == 3 && v13->i8[0] && (*(char *)(v23 + 4) - 3) >= 0xFFFFFFFE)
    v14[179] = *(_DWORD *)(*(_QWORD *)&v62[150] + 28);
  v25 = v63;
  if (!*(_DWORD *)v63 || v63[16])
  {
    if (a7 > 5 || v62[134].i32[1])
    {
      v29 = a1;
      v28 = a6;
      v27 = a8;
      vp9_pick_intra_mode(v29, a3, a6, a7);
    }
    else
    {
      v26 = (uint64_t)a1;
      v28 = a6;
      v27 = a8;
      vp9_rd_pick_intra_mode_sb(v26, a3, (int *)a6, a7, a8, 0x7FFFFFFFFFFFFFFFLL, v24);
    }
    v30 = &__src[v16];
    v31 = v58;
    v32 = &v65[v17];
    goto LABEL_15;
  }
  if (!a1[860 * v62[1056].i32[1] + 94833].i32[1])
  {
    if (v13->i8[0] && (a1[22069].i32[*(char *)(v23 + 4)] & 8) != 0)
    {
      v50 = *(_QWORD *)(a3 + 25368);
      v31 = a4;
      if (v50)
        v51 = *(unsigned __int8 *)(v50 + 7);
      else
        v51 = 3;
      v28 = a6;
      v27 = a8;
      v53 = *((unsigned int *)v63 + 13);
      v54 = *(_QWORD *)(a3 + 25376);
      if (v54)
        v55 = *(unsigned __int8 *)(v54 + 7);
      else
        v55 = 3;
      v56 = v63[280];
      if (v51 != v55)
      {
        if (v51 == 3)
        {
          v51 = v55;
        }
        else if (v55 != 3)
        {
          v51 = 3;
        }
      }
      if (v51 == 3)
        LOBYTE(v51) = 0;
      *(_BYTE *)v23 = a7;
      *(_BYTE *)(v23 + 1) = 12;
      v57 = tx_mode_to_biggest_tx_size[v53];
      if (v56 == 3)
        LOBYTE(v51) = 3;
      if (max_txsize_lookup[a7] < v57)
        LOBYTE(v57) = max_txsize_lookup[a7];
      *(_BYTE *)(v23 + 2) = v57;
      *(_BYTE *)(v23 + 3) = 1;
      *(_BYTE *)(v23 + 6) = 0;
      *(_WORD *)(v23 + 8) = -255;
      *(_DWORD *)(v23 + 12) = 0;
      *(_BYTE *)(v23 + 7) = v51;
      *(_DWORD *)(**(_QWORD **)(a3 + 25360) + 24) = 0;
      v14[496] = 1;
      *(_DWORD *)a6 = 0;
      *(_QWORD *)(a6 + 8) = 0;
      *(_QWORD *)(a6 + 16) = 0;
    }
    else
    {
      v31 = a4;
      if (a7 >= 3)
      {
        v30 = &__src[v16];
        v32 = &v65[v17];
        if (v62->i32[0])
        {
          v46 = (uint64_t)a1;
          v28 = a6;
          v27 = a8;
          hybrid_search_scene_change(v46, a3, (int *)a6, a7, a8, v24);
LABEL_15:
          v25 = v63;
          goto LABEL_16;
        }
LABEL_44:
        v48 = (uint64_t)a1;
        v28 = a6;
        v27 = a8;
        vp9_pick_inter_mode(v48, a3);
        goto LABEL_15;
      }
      v49 = (uint64_t)a1;
      v28 = a6;
      v27 = a8;
      vp9_pick_inter_mode_sub8x8(v49, a3, v58, a5, a6, a7, a8);
      v25 = v63;
    }
    v30 = &__src[v16];
    goto LABEL_66;
  }
  if (a7 > 3 || v62[134].i32[1])
  {
    v30 = &__src[v16];
    v31 = a4;
    v32 = &v65[v17];
    if (a1[104393].i32[1] == 1)
    {
      v47 = a1;
      v28 = a6;
      v27 = a8;
      vp9_pick_intra_mode(v47, a3, a6, a7);
      goto LABEL_15;
    }
    if (a7 < 3)
    {
      v52 = (uint64_t)a1;
      v28 = a6;
      v27 = a8;
      vp9_pick_inter_mode_sub8x8(v52, a3, v58, v61, a6, a7, a8);
      goto LABEL_15;
    }
    goto LABEL_44;
  }
  v45 = (uint64_t)a1;
  v28 = a6;
  v27 = a8;
  vp9_rd_pick_intra_mode_sb(v45, a3, (int *)a6, a7, a8, 0x7FFFFFFFFFFFFFFFLL, v24);
  v25 = v63;
  v30 = &__src[v16];
  v31 = v58;
LABEL_66:
  v32 = &v65[v17];
LABEL_16:
  v33 = *((_DWORD *)v25 + 11) - v61;
  if (v33 >= num_8x8_blocks_wide_lookup[a7])
    v34 = num_8x8_blocks_wide_lookup[a7];
  else
    v34 = v33;
  LODWORD(v35) = *((_DWORD *)v25 + 9) - v31;
  if ((int)v35 >= num_8x8_blocks_high_lookup[a7])
    v35 = num_8x8_blocks_high_lookup[a7];
  else
    v35 = v35;
  if ((int)v35 >= 1 && (int)v34 >= 1)
  {
    v36 = 0;
    v37 = 0;
    v38 = **(_QWORD **)(a3 + 25360);
    v39 = 8 * (int)v14[108];
    do
    {
      v40 = v36;
      v41 = v34;
      do
      {
        *(_QWORD *)(*(_QWORD *)(a3 + 25360) + v40) = v38;
        v40 += 8;
        --v41;
      }
      while (v41);
      ++v37;
      v36 += v39;
    }
    while (v37 != v35);
  }
  memcpy(*(void **)(a3 + 24976), __src, v16 >> *v14);
  memcpy(*(void **)(a3 + 24984), v65, v17 >> v14[1]);
  memcpy(*(void **)(a3 + 25112), v30, v16 >> v14[34]);
  memcpy(*(void **)(a3 + 25120), v32, v17 >> v14[35]);
  memcpy(*(void **)(a3 + 25248), &__src[2 * v16], v16 >> v14[68]);
  result = memcpy(*(void **)(a3 + 25256), &v65[2 * v17], v17 >> v14[69]);
  v43 = *(_DWORD *)v28;
  if (*(_DWORD *)v28 == 0x7FFFFFFF)
  {
    *(_DWORD *)v28 = 0x7FFFFFFF;
    v44 = 0x7FFFFFFFFFFFFFFFLL;
    *(int64x2_t *)(v28 + 8) = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
  }
  else
  {
    v44 = *(_QWORD *)(v28 + 8);
  }
  *(_DWORD *)(v27 + 768) = v43;
  *(_QWORD *)(v27 + 776) = v44;
  return result;
}

void encode_b_rt(int32x2_t *a1, unint64_t a2, __n128 *a3, uint64_t *a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  unsigned int v9;
  int32x2_t *v14;
  int32x2_t *v15;
  int32x2_t *v16;
  int8x16_t v17;
  int32x2_t *v18;
  int v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int32 v33;
  int32x2_t *v34;
  __int32 v35;
  uint64_t v36;
  int v37;
  signed int v38;
  int v39;
  int32x2_t v40;
  uint64_t v41;
  int v42;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  int32x4_t v49;
  uint64_t v50;
  uint8x16_t v51;
  uint16x8_t v52;
  uint16x8_t v53;
  uint16x8_t v54;
  int32x4_t v55;
  int32x4_t v56;
  uint16x8_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  uint64_t v68;
  uint8x16_t v69;
  uint16x8_t v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint64_t v74;
  uint8x16_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  uint64_t v80;
  uint8x16_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  uint16x8_t v85;
  uint64_t v86;
  uint8x16_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  uint16x8_t v91;
  uint64_t v92;
  uint8x16_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint16x8_t v97;
  uint64_t v98;
  uint8x16_t v99;
  uint16x8_t v100;
  uint16x8_t v101;
  uint16x8_t v102;
  uint16x8_t v103;
  int32x4_t v104;
  uint64_t v105;
  int v106;
  int32x4_t v107;
  int32x4_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  BOOL v114;
  int v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  int v119;
  char v120;
  unint64_t v121;
  unsigned __int8 **v122;
  unsigned __int8 *v123;
  int v124;
  int v125;
  int32x2_t *v126;
  unsigned __int8 v127;
  int v128;
  int v129;
  uint64_t v130;
  int v131;
  int32x2_t *v132;
  uint64_t v133;
  __int32 v134;
  uint64_t v135;
  uint64_t v136;
  unsigned __int8 *v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  __int32 v141;
  uint64_t v142;
  int32x2_t *v143;
  int32x2_t *v144;
  uint64_t v145;
  __int32 v146;
  uint64_t v147;
  unsigned __int8 *v148;
  uint64_t v149;
  unsigned __int8 *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  int32x2_t *v165;
  __int32 v166;
  unsigned int v167;
  unsigned int v168;
  uint64_t v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int v174;
  int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int32x2_t v186;
  __int32 v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  int v193;
  int v194;
  __int32 v195;
  uint64_t v196;
  int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  unsigned __int8 *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  BOOL v208;
  int v209;
  _BOOL8 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  int v214;
  int v215;
  uint64_t v216;
  __int32 v217;
  int v218;
  int v219;
  BOOL v220;
  int v221;
  int v222;
  int v223;
  int v225;
  int32x2_t *v226;
  int v227;
  int v228;
  int32x2_t v229;
  uint64_t v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  int v235;
  int v236;
  int v237;
  int32x2_t *v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  int pred_context_comp_ref_p;
  unsigned __int8 *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  unsigned int v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int32x2_t *v264;
  int32x2_t *v265;
  int32x2_t *v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  int *v273;
  int32x2_t *v274;
  int32x2_t *v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  __int128 *p_dst;
  __int128 *v282;
  unsigned __int8 *v283;
  __int128 __dst;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  char v289[32];

  v9 = a8;
  v270 = a2 + 82208;
  v273 = (int *)(a2 + 25056);
  v14 = a1 + 92534;
  v275 = a1 + 92451;
  v15 = a1 + 22059;
  v16 = a1 + 21505;
  set_offsets_0(a1, a3, a2, a5, a6, a8);
  v18 = v15;
  v19 = a6;
  v20 = **(unsigned __int8 ***)(a2 + 25360);
  v21 = *v20;
  v22 = num_8x8_blocks_wide_lookup[v21];
  v23 = num_8x8_blocks_high_lookup[v21];
  v24 = v16[122].i32[0] - v19;
  if (v24 >= v22)
    v25 = v22;
  else
    v25 = v24;
  if (v16[121].i32[0] - a5 >= v23)
    v26 = v23;
  else
    v26 = v16[121].i32[0] - a5;
  v27 = *(_OWORD *)(a9 + 16);
  v28 = *(_OWORD *)(a9 + 32);
  v29 = *(_OWORD *)(a9 + 48);
  *((_DWORD *)v20 + 16) = *(_DWORD *)(a9 + 64);
  *((_OWORD *)v20 + 2) = v28;
  *((_OWORD *)v20 + 3) = v29;
  *((_OWORD *)v20 + 1) = v27;
  *(_OWORD *)v20 = *(_OWORD *)a9;
  v30 = *(_QWORD *)(a2 + 25568);
  v31 = *(_OWORD *)(a9 + 68);
  v32 = *(_OWORD *)(a9 + 84);
  *(_DWORD *)(v30 + 32) = *(_DWORD *)(a9 + 100);
  *(_OWORD *)v30 = v31;
  *(_OWORD *)(v30 + 16) = v32;
  v274 = v18;
  if (v18->i8[0])
  {
    v33 = v18[1709].i32[1];
    if (v33 == 3)
    {
      if (*(_DWORD *)(*(_QWORD *)&v275[82] + 132))
      {
        vp9_cyclic_refresh_update_segment((uint64_t)a1, (uint64_t)v20, a5, v19, v9, *(int *)(a9 + 768), *(_QWORD *)(a9 + 776), v273[462], a2);
        goto LABEL_54;
      }
    }
    else if (!v33 && !a1[106305].i8[0] && !v14->i32[0])
    {
      goto LABEL_55;
    }
    if (v18->i8[1])
      v34 = v275 + 76;
    else
      v34 = v16 + 149;
    v35 = v16[122].i32[0];
    LODWORD(v36) = v35 - v19;
    if (v35 - v19 >= num_8x8_blocks_wide_lookup[v9])
      v36 = num_8x8_blocks_wide_lookup[v9];
    else
      v36 = v36;
    v37 = v16[121].i32[0] - a5;
    if (v37 >= num_8x8_blocks_high_lookup[v9])
      v37 = num_8x8_blocks_high_lookup[v9];
    v38 = 8;
    if (v37 >= 1 && (int)v36 >= 1)
    {
      v39 = 0;
      v40 = *v34;
      v41 = v36 & 0xFFFFFFE0;
      v42 = v19 + v35 * a5;
      while (v36 >= 8)
      {
        if (v19 + v35 * a5 + v35 * v39 + (int)v36 - 1 < v19 + v35 * a5 + v35 * v39
          || (unint64_t)(v36 - 1) >> 32 != 0)
        {
          break;
        }
        if (v36 >= 0x20)
        {
          v48 = v19 + (v39 + a5) * v35;
          v49 = vdupq_n_s32(v38);
          v50 = *(_QWORD *)&v40 + v48;
          v51 = *(uint8x16_t *)(v50 + 16);
          v52 = vmovl_u8(*(uint8x8_t *)v50);
          v53 = vmovl_high_u8(*(uint8x16_t *)v50);
          v54 = vmovl_u8(*(uint8x8_t *)v51.i8);
          v55 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v54.i8);
          v56 = (int32x4_t)vmovl_high_u16(v54);
          v57 = vmovl_high_u8(v51);
          v58 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v57.i8);
          v59 = (int32x4_t)vmovl_high_u16(v57);
          v60 = vminq_s32(v49, (int32x4_t)vmovl_high_u16(v53));
          v61 = vminq_s32(v49, (int32x4_t)vmovl_u16(*(uint16x4_t *)v53.i8));
          v62 = vminq_s32(v49, (int32x4_t)vmovl_high_u16(v52));
          v63 = vminq_s32(v49, (int32x4_t)vmovl_u16(*(uint16x4_t *)v52.i8));
          v64 = vminq_s32(v49, v59);
          v65 = vminq_s32(v49, v58);
          v66 = vminq_s32(v49, v56);
          v67 = vminq_s32(v49, v55);
          if (v41 != 32)
          {
            v68 = *(_QWORD *)&v40 + v48 + 32;
            v69 = *(uint8x16_t *)(v68 + 16);
            v70 = vmovl_u8(*(uint8x8_t *)v68);
            v71 = vmovl_high_u8(*(uint8x16_t *)v68);
            v72 = vmovl_u8(*(uint8x8_t *)v69.i8);
            v73 = vmovl_high_u8(v69);
            v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v71));
            v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v71.i8));
            v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v70));
            v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v70.i8));
            v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v73));
            v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v73.i8));
            v66 = vminq_s32(v66, (int32x4_t)vmovl_high_u16(v72));
            v67 = vminq_s32(v67, (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8));
            if (v41 != 64)
            {
              v74 = *(_QWORD *)&v40 + v48 + 64;
              v75 = *(uint8x16_t *)(v74 + 16);
              v76 = vmovl_u8(*(uint8x8_t *)v74);
              v77 = vmovl_high_u8(*(uint8x16_t *)v74);
              v78 = vmovl_u8(*(uint8x8_t *)v75.i8);
              v79 = vmovl_high_u8(v75);
              v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v77));
              v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v77.i8));
              v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v76));
              v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v76.i8));
              v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v79));
              v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v79.i8));
              v66 = vminq_s32(v66, (int32x4_t)vmovl_high_u16(v78));
              v67 = vminq_s32(v67, (int32x4_t)vmovl_u16(*(uint16x4_t *)v78.i8));
              if (v41 != 96)
              {
                v80 = *(_QWORD *)&v40 + v48 + 96;
                v81 = *(uint8x16_t *)(v80 + 16);
                v82 = vmovl_u8(*(uint8x8_t *)v80);
                v83 = vmovl_high_u8(*(uint8x16_t *)v80);
                v84 = vmovl_u8(*(uint8x8_t *)v81.i8);
                v85 = vmovl_high_u8(v81);
                v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v83));
                v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v83.i8));
                v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v82));
                v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v82.i8));
                v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v85));
                v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v85.i8));
                v66 = vminq_s32(v66, (int32x4_t)vmovl_high_u16(v84));
                v67 = vminq_s32(v67, (int32x4_t)vmovl_u16(*(uint16x4_t *)v84.i8));
                if (v41 != 128)
                {
                  v86 = *(_QWORD *)&v40 + v48 + 128;
                  v87 = *(uint8x16_t *)(v86 + 16);
                  v88 = vmovl_u8(*(uint8x8_t *)v86);
                  v89 = vmovl_high_u8(*(uint8x16_t *)v86);
                  v90 = vmovl_u8(*(uint8x8_t *)v87.i8);
                  v91 = vmovl_high_u8(v87);
                  v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v89));
                  v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v89.i8));
                  v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v88));
                  v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8));
                  v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v91));
                  v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v91.i8));
                  v66 = vminq_s32(v66, (int32x4_t)vmovl_high_u16(v90));
                  v67 = vminq_s32(v67, (int32x4_t)vmovl_u16(*(uint16x4_t *)v90.i8));
                  if (v41 != 160)
                  {
                    v92 = *(_QWORD *)&v40 + v48 + 160;
                    v93 = *(uint8x16_t *)(v92 + 16);
                    v94 = vmovl_u8(*(uint8x8_t *)v92);
                    v95 = vmovl_high_u8(*(uint8x16_t *)v92);
                    v96 = vmovl_u8(*(uint8x8_t *)v93.i8);
                    v97 = vmovl_high_u8(v93);
                    v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v95));
                    v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v95.i8));
                    v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v94));
                    v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v94.i8));
                    v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v97));
                    v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v97.i8));
                    v66 = vminq_s32(v66, (int32x4_t)vmovl_high_u16(v96));
                    v67 = vminq_s32(v67, (int32x4_t)vmovl_u16(*(uint16x4_t *)v96.i8));
                    if (v41 != 192)
                    {
                      v98 = *(_QWORD *)&v40 + v48 + 192;
                      v99 = *(uint8x16_t *)(v98 + 16);
                      v100 = vmovl_u8(*(uint8x8_t *)v98);
                      v101 = vmovl_high_u8(*(uint8x16_t *)v98);
                      v102 = vmovl_u8(*(uint8x8_t *)v99.i8);
                      v103 = vmovl_high_u8(v99);
                      v60 = vminq_s32(v60, (int32x4_t)vmovl_high_u16(v101));
                      v61 = vminq_s32(v61, (int32x4_t)vmovl_u16(*(uint16x4_t *)v101.i8));
                      v62 = vminq_s32(v62, (int32x4_t)vmovl_high_u16(v100));
                      v63 = vminq_s32(v63, (int32x4_t)vmovl_u16(*(uint16x4_t *)v100.i8));
                      v64 = vminq_s32(v64, (int32x4_t)vmovl_high_u16(v103));
                      v65 = vminq_s32(v65, (int32x4_t)vmovl_u16(*(uint16x4_t *)v103.i8));
                      v66 = vminq_s32(v66, (int32x4_t)vmovl_high_u16(v102));
                      v67 = vminq_s32(v67, (int32x4_t)vmovl_u16(*(uint16x4_t *)v102.i8));
                    }
                  }
                }
              }
            }
          }
          v17 = (int8x16_t)vminq_s32(v63, v67);
          v38 = vminvq_s32(vminq_s32(vminq_s32((int32x4_t)v17, vminq_s32(v61, v65)), vminq_s32(vminq_s32(v62, v66), vminq_s32(v60, v64))));
          if (v41 == v36)
            goto LABEL_26;
          v47 = v36 & 0x7FFFFFE0;
          v44 = v36 & 0xFFFFFFE0;
          if ((v36 & 0x18) == 0)
            goto LABEL_33;
        }
        else
        {
          v47 = 0;
        }
        v104 = vdupq_n_s32(v38);
        v105 = v47 - (v36 & 0xFFFFFFF8);
        v106 = v42 + v47;
        v107 = v104;
        do
        {
          v17.i64[0] = *(_QWORD *)(*(_QWORD *)&v40 + v106);
          v108 = (int32x4_t)vqtbl1q_s8(v17, (int8x16_t)xmmword_208F04F50);
          v17 = vqtbl1q_s8(v17, (int8x16_t)xmmword_208F04F40);
          v107 = vminq_s32(v107, (int32x4_t)v17);
          v104 = vminq_s32(v104, v108);
          v106 += 8;
          v105 += 8;
        }
        while (v105);
        v38 = vminvq_s32(vminq_s32(v104, v107));
        v44 = v36 & 0xFFFFFFF8;
        if (v44 != v36)
          goto LABEL_33;
LABEL_26:
        ++v39;
        v42 += v35;
        if (v39 == v37)
          goto LABEL_53;
      }
      v44 = 0;
LABEL_33:
      v45 = v36 - v44;
      v46 = v42 + v44;
      do
      {
        if (v38 >= *(unsigned __int8 *)(*(_QWORD *)&v40 + v46))
          v38 = *(unsigned __int8 *)(*(_QWORD *)&v40 + v46);
        ++v46;
        --v45;
      }
      while (v45);
      goto LABEL_26;
    }
LABEL_53:
    v20[4] = v38;
LABEL_54:
    vp9_init_plane_quantizers((uint64_t)a1, a2);
    v18 = v274;
  }
LABEL_55:
  v265 = a1 + 104337;
  v266 = a1 + 93439;
  if ((char)v20[8] < 1)
    goto LABEL_70;
  vp9_update_mv_count(a2);
  if (v16[151].i8[4] == 4)
  {
    v109 = *(_QWORD *)(a2 + 25368);
    if (v109)
    {
      v110 = *(unsigned __int8 *)(v109 + 7);
      v111 = *(_QWORD *)(a2 + 25376);
      if (v111)
        goto LABEL_59;
    }
    else
    {
      v110 = 3;
      v111 = *(_QWORD *)(a2 + 25376);
      if (v111)
      {
LABEL_59:
        v112 = *(unsigned __int8 *)(v111 + 7);
        if (v110 == v112)
          goto LABEL_67;
        goto LABEL_63;
      }
    }
    v112 = 3;
    if (v110 == 3)
    {
LABEL_67:
      v113 = *(_QWORD *)(v270 + 32040) + 12 * v110 + 4 * v20[7];
      ++*(_DWORD *)(v113 + 12336);
      goto LABEL_68;
    }
LABEL_63:
    if (v110 == 3)
    {
      v110 = v112;
    }
    else if (v112 != 3)
    {
      v110 = 3;
    }
    goto LABEL_67;
  }
LABEL_68:
  v18 = v274;
  if (*v20 <= 2u)
    *(_QWORD *)(v20 + 12) = *(_QWORD *)(v20 + 60);
LABEL_70:
  if (v16[145].i32[0]
    || !v18[1681].i32[0]
    || v265->i32[0] && (v119 = a1[93440].i32[0], v119 >= 2) && v266->i32[0] != v119 - 1)
  {
    v114 = v26 < 1 || (int)v25 < 1;
    if (!v114)
    {
      v115 = 0;
      v116 = 12 * v16[122].i32[0] * (uint64_t)a5 + 12 * v19 + *(_QWORD *)(*(_QWORD *)v16 + 8) + 9;
      do
      {
        v117 = (_BYTE *)(v116 + 12 * v16[122].i32[0] * (uint64_t)v115);
        v118 = v25;
        do
        {
          *(v117 - 1) = v20[8];
          *v117 = v20[9];
          *(_DWORD *)(v117 - 9) = *((_DWORD *)v20 + 3);
          *(_DWORD *)(v117 - 5) = *((_DWORD *)v20 + 4);
          v117 += 12;
          --v118;
        }
        while (v118);
        ++v115;
      }
      while (v115 != v26);
    }
  }
  v273[462] = *(_DWORD *)(a9 + 696);
  if (v20[4] || v273[121])
    v120 = 0;
  else
    v120 = *(_BYTE *)(a9 + 708);
  v121 = v270;
  *(_BYTE *)(v270 + 20) = v120;
  v122 = *(unsigned __int8 ***)(a2 + 25360);
  v123 = *v122;
  if (v18->i8[0])
  {
    v267 = ((unsigned __int32)a1[22069].i32[(char)v123[4]] >> 3) & 1;
    v268 = a2 + 24912;
    if (!v273[133])
      goto LABEL_91;
LABEL_93:
    v273[134] = 0;
    goto LABEL_94;
  }
  v267 = 0;
  v268 = a2 + 24912;
  if (v273[133])
    goto LABEL_93;
LABEL_91:
  if (*v123 < 3u || (v18[1709].i32[1] & 0xFFFFFFFE) == 2)
    goto LABEL_93;
  v166 = v275->i32[1];
  v273[134] = v166 != 0;
  if (v166)
  {
    v124 = 0;
    goto LABEL_97;
  }
LABEL_94:
  if (!v275[40].i32[1])
  {
    *(_DWORD *)(v270 + 28) = 0;
    *(_QWORD *)(v270 + 20) = 0;
  }
  v124 = 1;
LABEL_97:
  v125 = *(_DWORD *)(a9 + 688);
  v273[135] = v125;
  *(_DWORD *)(a9 + 688) = 1;
  *(_DWORD *)(v270 + 4) = v275[8].i32[1];
  v269 = (uint64_t)a1;
  if (a7 || !v275->i32[0])
  {
    *(_DWORD *)(v270 + 8) = 0;
  }
  else
  {
    v114 = v273[136] < 115;
    *(_DWORD *)(v270 + 8) = v114;
    if (v114)
      goto LABEL_235;
  }
  if ((char)v123[8] > 0)
  {
    v264 = v14;
    v126 = a1 + 24314;
    v127 = v123[9];
    v128 = (char)v127;
    v129 = v123[8] - 1;
    *(_QWORD *)(a2 + 25424) = &a1[22 * v129 + 21514];
    v130 = v127 - 1;
    if (v128 <= 0)
      v130 = 0;
    *(_QWORD *)(a2 + 25432) = &a1[22 * v130 + 21514];
    v131 = v123[8];
    if (v128 < 1)
    {
      if (v131 == 2)
        v143 = (int32x2_t *)((char *)a1 + 194516);
      else
        v143 = a1 + 24315;
      if (v131 == 1)
        v144 = a1 + 24314;
      else
        v144 = v143;
      v145 = v144->i32[0];
      if ((_DWORD)v145 == -1 || (v146 = a1[21506].i32[v145], v146 == -1))
        v147 = 0;
      else
        v147 = *(_QWORD *)&v274[1684] + 224 * v146 + 88;
      v121 = v270;
      v149 = v268;
      vp9_setup_pre_planes(v268, 0, v147, a5, v19, v269 + 176 * v129 + 172128);
      if (!v275[50].i32[0])
        goto LABEL_179;
    }
    else
    {
      v132 = a1 + 24314;
      if (v131 != 1)
      {
        v132 = (int32x2_t *)((char *)a1 + 194516);
        if (v131 != 2)
          v132 = a1 + 24315;
      }
      v133 = v132->i32[0];
      if ((_DWORD)v133 == -1 || (v134 = a1[21506].i32[v133], v134 == -1))
        v135 = 0;
      else
        v135 = *(_QWORD *)&v274[1684] + 224 * v134 + 88;
      vp9_setup_pre_planes(v268, 0, v135, a5, v19, (uint64_t)&a1[22 * v129 + 21516]);
      v139 = v123[9];
      if (v139 != 1)
      {
        v126 = (int32x2_t *)((char *)a1 + 194516);
        if (v139 != 2)
          v126 = a1 + 24315;
      }
      v140 = v126->i32[0];
      if ((_DWORD)v140 == -1)
      {
        v142 = 0;
        v121 = v270;
      }
      else
      {
        v141 = a1[21506].i32[v140];
        v121 = v270;
        if (v141 == -1)
          v142 = 0;
        else
          v142 = *(_QWORD *)&v274[1684] + 224 * v141 + 88;
      }
      v149 = v268;
      vp9_setup_pre_planes(v268, 1, v142, a5, v19, *(_QWORD *)(a2 + 25432) + 16);
      if (!v275[50].i32[0])
        goto LABEL_179;
    }
    if (*(_DWORD *)(a9 + 700) && !v267)
    {
      v167 = v9;
      if (v9 <= 3)
        v168 = 3;
      else
        v168 = v9;
      goto LABEL_183;
    }
LABEL_179:
    v167 = v9;
    if (v9 <= 3)
      v168 = 3;
    else
      v168 = v9;
    build_inter_predictors_for_planes(v149, v168, a5, v19, 0, 0);
LABEL_183:
    build_inter_predictors_for_planes(v149, v168, a5, v19, 1, 2);
    vp9_encode_sb(a2, v168);
    vp9_tokenize_sb(v269, a2, (uint64_t)a4, a7 == 0, v267, v168);
    v9 = v167;
    v14 = v264;
    v164 = v273;
    v165 = v274;
    if (!a7)
      goto LABEL_235;
    goto LABEL_184;
  }
  v123[3] = 1;
  if (v9 <= 3)
    v136 = 3;
  else
    v136 = v9;
  v288 = 0u;
  *(_OWORD *)v289 = 0u;
  v286 = 0u;
  v287 = 0u;
  __dst = 0u;
  v285 = 0u;
  v276 = a2;
  v277 = 1;
  v278 = 0;
  v279 = 0;
  v280 = 0;
  p_dst = &__dst;
  v282 = &v287;
  v137 = *v122;
  v283 = v137 + 3;
  if (!v125)
    v124 = 1;
  if (*(_DWORD *)v270 && v124)
  {
    v138 = v268;
    vp9_get_entropy_contexts(v136, v137[2], v268, (char *)&__dst, (char *)&v287);
  }
  else
  {
    LODWORD(v277) = 0;
    v138 = v268;
  }
  vp9_foreach_transformed_block_in_plane(v138, v136, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))vp9_encode_block_intra, (uint64_t)&v276);
  v288 = 0u;
  *(_OWORD *)v289 = 0u;
  v286 = 0u;
  v287 = 0u;
  __dst = 0u;
  v285 = 0u;
  v276 = a2;
  v277 = 1;
  v278 = 0;
  v279 = 0;
  v280 = 0;
  p_dst = &v285;
  v282 = &v288;
  v148 = **(unsigned __int8 ***)(a2 + 25360);
  v283 = v148 + 3;
  if (!*(_DWORD *)v270 || v273[134] && v273[135])
    LODWORD(v277) = 0;
  else
    vp9_get_entropy_contexts(v136, uv_txsize_lookup[16 * *v148 + 4 * v148[2] + 2 * *v273 + v273[1]], a2 + 25048, (char *)&v285, (char *)&v288);
  vp9_foreach_transformed_block_in_plane(v138, v136, 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))vp9_encode_block_intra, (uint64_t)&v276);
  v288 = 0u;
  *(_OWORD *)v289 = 0u;
  v286 = 0u;
  v287 = 0u;
  __dst = 0u;
  v285 = 0u;
  v276 = a2;
  v277 = 1;
  v278 = 0;
  v279 = 0;
  v280 = 0;
  p_dst = &v286;
  v282 = (__int128 *)v289;
  v150 = **(unsigned __int8 ***)(a2 + 25360);
  v283 = v150 + 3;
  if (!*(_DWORD *)v270 || v273[134] && v273[135])
    LODWORD(v277) = 0;
  else
    vp9_get_entropy_contexts(v136, uv_txsize_lookup[16 * *v150 + 4 * v150[2] + 2 * v273[34] + v273[35]], a2 + 25184, (char *)&v286, v289);
  vp9_foreach_transformed_block_in_plane(v268, v136, 2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))vp9_encode_block_intra, (uint64_t)&v276);
  if (a7)
  {
    v151 = *(_QWORD *)(v270 + 32040);
    v152 = v123[1];
    v153 = v123[6];
    v154 = *v123;
    if (v154 > 2)
    {
      v162 = v151 + 40 * size_group_lookup[v154];
      ++*(_DWORD *)(v162 + 4 * v152);
    }
    else
    {
      v155 = num_4x4_blocks_wide_lookup[v154];
      v156 = num_4x4_blocks_high_lookup[v154];
      ++*(_DWORD *)(v151 + 4 * v123[20]);
      if (v155 <= 1)
      {
        v157 = 4 * v123[12 * v155 + 20];
        ++*(_DWORD *)(v151 + v157);
        if (!v155)
          ++*(_DWORD *)(v151 + 4 * v123[20]);
      }
      if (v156 <= 1)
      {
        v158 = 4 * v123[24 * v156 + 20];
        ++*(_DWORD *)(v151 + v158);
        if (v155 <= 1)
        {
          v159 = 4 * v123[24 * v156 + 20 + 12 * v155];
          ++*(_DWORD *)(v151 + v159);
          if (!v155)
          {
            v160 = 4 * v123[24 * v156 + 20];
            ++*(_DWORD *)(v151 + v160);
          }
        }
        if (!v156)
        {
          ++*(_DWORD *)(v151 + 4 * v123[20]);
          if (v155 <= 1)
          {
            v161 = 4 * v123[12 * v155 + 20];
            ++*(_DWORD *)(v151 + v161);
            if (!v155)
              ++*(_DWORD *)(v151 + 4 * v123[20]);
          }
        }
      }
    }
    v163 = v151 + 40 * v152 + 4 * v153;
    ++*(_DWORD *)(v163 + 160);
  }
  vp9_tokenize_sb(v269, a2, (uint64_t)a4, a7 == 0, v267, v136);
  v164 = v273;
  v165 = v274;
  if (!a7)
    goto LABEL_235;
LABEL_184:
  v169 = v16[123].u32[0];
  if ((_DWORD)v169 == 4)
  {
    v170 = (char)v123[8];
    if (*v123 >= 3u)
    {
      if (v170 < 1 || !v123[3])
      {
        v171 = max_txsize_lookup[***(unsigned __int8 ***)(a2 + 25360)];
        v172 = *(_QWORD *)(a2 + 25376);
        v173 = *(_QWORD *)(a2 + 25368);
        v174 = v171;
        if (v172)
        {
          v174 = max_txsize_lookup[***(unsigned __int8 ***)(a2 + 25360)];
          if (!*(_BYTE *)(v172 + 3))
            v174 = *(unsigned __int8 *)(v172 + 2);
        }
        v175 = max_txsize_lookup[v9];
        v176 = v174;
        if (v173)
        {
          v176 = max_txsize_lookup[***(unsigned __int8 ***)(a2 + 25360)];
          if (!*(_BYTE *)(v173 + 3))
            v176 = *(unsigned __int8 *)(v173 + 2);
        }
        if (v172)
          v177 = v174;
        else
          v177 = v176;
        v178 = v177 + v176;
        v179 = *(_QWORD *)(v121 + 32040);
        if (v175 == 3)
        {
          v180 = v179 + 16 * (v178 > v171);
          v181 = 12688;
        }
        else if (v175 == 2)
        {
          v180 = v179 + 12 * (v178 > v171);
          v181 = 12720;
        }
        else
        {
          v180 = v179 + 8 * (v178 > v171);
          v181 = 12744;
        }
        v232 = v180 + v181;
        v233 = v123[2];
        ++*(_DWORD *)(v232 + 4 * v233);
        v182 = v233;
        goto LABEL_205;
      }
      goto LABEL_202;
    }
  }
  else
  {
    LOBYTE(v170) = v123[8];
  }
  if ((char)v170 >= 1)
  {
LABEL_202:
    v182 = tx_mode_to_biggest_tx_size[v169];
    if (v182 >= max_txsize_lookup[v9])
      v182 = max_txsize_lookup[v9];
    goto LABEL_204;
  }
  if (v9 < 3)
    v182 = 0;
  else
    v182 = v123[2];
LABEL_204:
  v123[2] = v182;
LABEL_205:
  v183 = *(_QWORD *)(v121 + 32040) + 12760;
  v184 = 4 * v182;
  ++*(_DWORD *)(v183 + v184);
  v185 = 4 * uv_txsize_lookup[16 * *v123 + 2 * *v164 + v184 + v164[1]];
  ++*(_DWORD *)(v183 + v185);
  if (v165->i8[0])
  {
    if (v165[1709].i32[1] == 3)
    {
      v186 = v275[82];
      if (*(_DWORD *)(*(_QWORD *)&v186 + 132))
      {
        v187 = v16[122].i32[0];
        v188 = v187 - v19;
        if (v187 - v19 >= num_8x8_blocks_wide_lookup[v9])
          v188 = num_8x8_blocks_wide_lookup[v9];
        v189 = v16[121].i32[0] - a5;
        if (v189 >= num_8x8_blocks_high_lookup[v9])
          v189 = num_8x8_blocks_high_lookup[v9];
        if (v189 >= 1 && v188 >= 1)
        {
          v190 = 0;
          v191 = v19 + v187 * a5;
          do
          {
            v192 = v191;
            v193 = v188;
            do
            {
              v195 = v192 + v190 * v16[122].i32[0];
              if ((char)v123[8] < 1)
              {
                LODWORD(v196) = (char)v123[4];
                if ((int)v196 > 2)
                  goto LABEL_220;
              }
              else
              {
                v196 = (char)v123[4];
                if (v123[3])
                {
                  if ((int)v196 <= 2)
                  {
                    v197 = *(_DWORD *)(*(_QWORD *)&v186 + 4 * v196 + 96) + v16[123].i32[1];
                    if (v197 >= 255)
                      v197 = 255;
                    v198 = v197 & ~(v197 >> 31);
                    v199 = *(_QWORD *)(*(_QWORD *)&v186 + 40);
                    if (v198 >= *(unsigned __int8 *)(v199 + v195))
                      LOBYTE(v198) = *(_BYTE *)(v199 + v195);
                    *(_BYTE *)(v199 + v195) = v198;
                  }
                  goto LABEL_220;
                }
                if ((int)v196 >= 3)
                  goto LABEL_220;
              }
              v194 = *(_DWORD *)(*(_QWORD *)&v186 + 4 * (int)v196 + 96) + v16[123].i32[1];
              if (v194 >= 255)
                v194 = 255;
              *(_BYTE *)(*(_QWORD *)(*(_QWORD *)&v186 + 40) + v195) = v194 & ~(v194 >> 31);
LABEL_220:
              ++v192;
              --v193;
            }
            while (v193);
            ++v190;
          }
          while (v190 != v189);
        }
      }
    }
  }
  if (!v165[1700].i32[1]
    && !v266->i32[1]
    && (!v14[904].i32[1] || !v266[1394].i32[1] && v266->i32[0] == v266[1].i32[0] - 1))
  {
    v217 = v16[122].i32[0];
    v218 = v217 - v19;
    if (v217 - v19 >= num_8x8_blocks_wide_lookup[v9])
      v218 = num_8x8_blocks_wide_lookup[v9];
    v219 = v16[121].i32[0] - a5;
    if (v219 >= num_8x8_blocks_high_lookup[v9])
      v219 = num_8x8_blocks_high_lookup[v9];
    v220 = v219 < 1 || v218 < 1;
    if (!v220 && v123[8] == 1)
    {
      v221 = v19 + v217 * a5;
      v222 = *((__int16 *)v123 + 6);
      if (v222 < 0)
        v222 = -v222;
      v223 = *((__int16 *)v123 + 7);
      if (v223 < 0)
        v223 = -v223;
      if ((unsigned __int16)v223 >= 8u || (unsigned __int16)v222 >= 8u)
      {
        v237 = 0;
        v238 = v265;
LABEL_315:
        v239 = v221;
        v240 = v218;
        do
        {
          if (v123[8] == 1 && (char)v123[4] <= 2)
            *(_BYTE *)(*(_QWORD *)&v238[934] + v239 + v237 * v16[122].i32[0]) = 0;
          ++v239;
          --v240;
        }
        while (v240);
        while (++v237 != v219)
        {
          v238 = v265;
          if (v123[8] == 1)
            goto LABEL_315;
        }
      }
      else
      {
        v225 = 0;
        v226 = v265;
LABEL_287:
        v227 = v221;
        v228 = v218;
        do
        {
          if (v123[8] == 1 && (char)v123[4] <= 2)
          {
            v229 = v226[934];
            v230 = v227 + v225 * v16[122].i32[0];
            v231 = *(unsigned __int8 *)(*(_QWORD *)&v229 + v230);
            if (v231 != 255)
              *(_BYTE *)(*(_QWORD *)&v229 + v230) = v231 + 1;
          }
          ++v227;
          --v228;
        }
        while (v228);
        while (++v225 != v219)
        {
          v226 = v265;
          if (v123[8] == 1)
            goto LABEL_287;
        }
      }
    }
  }
LABEL_235:
  if (!v16[116].i32[1] || v16[118].i8[4])
    goto LABEL_237;
  v201 = **(unsigned __int8 ***)(a2 + 25360);
  v202 = *(_QWORD *)(a2 + 25568);
  v203 = *v201;
  v204 = *(_QWORD *)(v121 + 32040);
  v205 = (char)v201[8];
  if (v274->i8[0] && (*(_DWORD *)(v269 + 4 * (char)v201[4] + 176552) & 4) != 0)
  {
    if (v205 <= 0)
      goto LABEL_237;
    goto LABEL_333;
  }
  v206 = *(_QWORD *)(a2 + 25368);
  v207 = *(_QWORD *)(a2 + 25376);
  if (v207)
    v208 = v206 == 0;
  else
    v208 = 1;
  v209 = !v208;
  if (v208)
  {
    v211 = v207 | v206;
    if (v207 | v206)
    {
      if (v207)
        v212 = *(_QWORD *)(a2 + 25376);
      else
        v212 = *(_QWORD *)(a2 + 25368);
      v211 = 2 * (*(char *)(v212 + 8) < 1);
    }
  }
  else
  {
    v210 = *(char *)(v207 + 8) < 1 || *(char *)(v206 + 8) < 1;
    v211 = 3;
    if (*(char *)(v206 + 8) >= 1 || *(char *)(v207 + 8) >= 1)
      v211 = v210;
  }
  v213 = v204 + 8 * v211 + 4 * (v205 > 0);
  ++*(_DWORD *)(v213 + 12496);
  if (v205 < 1)
    goto LABEL_237;
  v214 = v201[8];
  if (v274[15].i32[0] == 2)
  {
    if (v209)
    {
      v215 = *(char *)(v206 + 9);
      if (*(char *)(v207 + 9) <= 0)
      {
        v234 = *(unsigned __int8 *)(v207 + 8);
        v235 = v274[14].u8[4];
        if (v215 <= 0)
        {
          v216 = (v234 == v235) ^ (*(unsigned __int8 *)(v206 + 8) == v235);
        }
        else
        {
          v216 = 3;
          if (v234 != v235)
            v216 = ((char)v234 > 0) ^ 3;
        }
        goto LABEL_324;
      }
      if (v215 > 0)
      {
        v216 = 4;
LABEL_324:
        v241 = v204 + 8 * v216 + 4 * ((char)v201[9] > 0);
        ++*(_DWORD *)(v241 + 12528);
        goto LABEL_325;
      }
      v236 = *(unsigned __int8 *)(v206 + 8);
      if (v236 != v274[14].u8[4])
      {
        v216 = ((char)v236 > 0) ^ 3;
        goto LABEL_324;
      }
    }
    else
    {
      if (!(v207 | v206))
      {
        v216 = 1;
        goto LABEL_324;
      }
      if (v207)
        v206 = v207;
      if (*(char *)(v206 + 9) <= 0)
      {
        v216 = *(unsigned __int8 *)(v206 + 8) == v274[14].u8[4];
        goto LABEL_324;
      }
    }
    v216 = 3;
    goto LABEL_324;
  }
LABEL_325:
  if ((char)v201[9] < 1)
  {
    v247 = v204 + 16 * (int)vp9_get_pred_context_single_ref_p1(v268) + 4 * (v214 != 1);
    ++*(_DWORD *)(v247 + 12568);
    if (v214 == 1)
      goto LABEL_333;
    v245 = v204 + 16 * (int)vp9_get_pred_context_single_ref_p2(v268) + 4 * (v214 != 2);
    v246 = 12576;
  }
  else
  {
    v242 = *(_DWORD *)(v269 + 4 * v274[14].i8[4] + 176404);
    pred_context_comp_ref_p = vp9_get_pred_context_comp_ref_p(v269 + 171696, v268);
    if (v242)
      v244 = v201;
    else
      v244 = v201 + 1;
    v245 = v204 + 8 * pred_context_comp_ref_p + 4 * (v244[8] == v274[14].u8[6]);
    v246 = 12648;
  }
  ++*(_DWORD *)(v245 + v246);
LABEL_333:
  if (v274->i8[0] && (*(_DWORD *)(v269 + 4 * (char)v201[4] + 176552) & 8) != 0)
    goto LABEL_237;
  v248 = *(unsigned __int8 *)(v202 + (char)v201[8] + 32);
  if (v203 >= 3)
  {
    v249 = v201[1];
LABEL_337:
    v250 = v204 + 16 * v248 + 4 * v249;
    ++*(_DWORD *)(v250 + 12344);
    goto LABEL_237;
  }
  v251 = num_4x4_blocks_wide_lookup[v203];
  v252 = num_4x4_blocks_high_lookup[v203];
  v253 = v204 + 16 * v248;
  v254 = v253 + 4 * v201[20];
  ++*(_DWORD *)(v254 + 12344);
  if (v251 <= 1)
  {
    v255 = v253 + 4 * v201[12 * v251 + 20];
    ++*(_DWORD *)(v255 + 12344);
    if (!v251)
    {
      v256 = v204 + 16 * v248 + 4 * v201[20];
      ++*(_DWORD *)(v256 + 12344);
    }
  }
  if (v252 <= 1)
  {
    v257 = v204 + 16 * v248;
    v258 = v257 + 4 * v201[24 * v252 + 20];
    ++*(_DWORD *)(v258 + 12344);
    if (v251 <= 1)
    {
      v259 = v257 + 4 * v201[24 * v252 + 20 + 12 * v251];
      ++*(_DWORD *)(v259 + 12344);
      if (!v251)
      {
        v260 = v204 + 16 * v248 + 4 * v201[24 * v252 + 20];
        ++*(_DWORD *)(v260 + 12344);
      }
    }
    if (!v252)
    {
      v261 = v204 + 16 * v248;
      v262 = v261 + 4 * v201[20];
      ++*(_DWORD *)(v262 + 12344);
      if (v251 <= 1)
      {
        v263 = v261 + 4 * v201[12 * v251 + 20];
        ++*(_DWORD *)(v263 + 12344);
        if (!v251)
        {
          v249 = v201[20];
          goto LABEL_337;
        }
      }
    }
  }
LABEL_237:
  v200 = *a4;
  *(_WORD *)(v200 + 8) = 127;
  *a4 = v200 + 16;
}

void hybrid_search_scene_change(uint64_t a1, uint64_t a2, int *a3, unsigned int a4, uint64_t a5, int64x2_t a6)
{
  if (a4 > 3 || *(_DWORD *)(a1 + 740140))
    vp9_pick_inter_mode(a1, a2);
  else
    vp9_rd_pick_intra_mode_sb(a1, a2, a3, 3u, a5, 0x7FFFFFFFFFFFFFFFLL, a6);
}

uint64_t ml_predict_var_partitioning(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  int *v10;
  float v11;
  int v12;
  int v13;
  __int16 *v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint32x4_t v32;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  int v43;
  _DWORD *v44;
  float32x4_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  unint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t *v55;
  uint64_t v56;
  float32x4_t v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  float *v61;
  float v62;
  uint64_t v63;
  float32x4_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  unint64_t v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  float32x4_t *v73;
  int8x16_t *v74;
  uint64_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  float *v79;
  float *v80;
  float v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  float v85;
  unsigned int v86;
  float v87[2];
  _DWORD v88[2];
  int8x16_t v89;
  _DWORD v90[256];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  switch(a3)
  {
    case 6u:
      v10 = &vp9_var_part_nnconfig_16;
      break;
    case 0xCu:
      v10 = &vp9_var_part_nnconfig_64;
      break;
    case 9u:
      v10 = &vp9_var_part_nnconfig_32;
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  if (*(int *)(a1 + 190056) >= 6)
    v11 = 0.0;
  else
    v11 = 1.25;
  v12 = *(_DWORD *)(a1 + 173028);
  v13 = *(_DWORD *)(a1 + 189856);
  switch(v13)
  {
    case 8:
      v14 = dc_qlookup_0;
      break;
    case 12:
      v14 = (__int16 *)&dc_qlookup_12;
      break;
    case 10:
      v14 = (__int16 *)&dc_qlookup_10;
      break;
    default:
      v16 = -1;
      goto LABEL_21;
  }
  if (v12 >= 255)
    v12 = 255;
  v16 = v14[v12 & ~(v12 >> 31)];
LABEL_21:
  v88[0] = logf((float)((float)(v16 * v16) * 0.0039062) + 1.0);
  v17 = *(_QWORD *)(a1 + 190440);
  v18 = *(_QWORD *)(v17 + 56);
  v19 = *(_QWORD *)(v17 + 64);
  v20 = *(_QWORD *)(v17 + 72);
  v21 = *(int *)(v17 + 16);
  v22 = *(_DWORD *)(v17 + 36);
  *(_QWORD *)(a2 + 25440) = v17;
  LODWORD(v17) = 8 * a5;
  v23 = v18 + ((8 * a5) >> *(_DWORD *)(a2 + 24920)) + (int)v21 * (uint64_t)((8 * a4) >> *(_DWORD *)(a2 + 24924));
  *(_QWORD *)(a2 + 8216) = v23;
  *(_DWORD *)(a2 + 8224) = v21;
  *(_QWORD *)(a2 + 16520) = v19
                          + ((int)v17 >> *(_DWORD *)(a2 + 25056))
                          + v22 * (uint64_t)((8 * a4) >> *(_DWORD *)(a2 + 25060));
  *(_DWORD *)(a2 + 16528) = v22;
  *(_QWORD *)(a2 + 24824) = v20
                          + ((int)v17 >> *(_DWORD *)(a2 + 25192))
                          + v22 * (uint64_t)((8 * a4) >> *(_DWORD *)(a2 + 25196));
  *(_DWORD *)(a2 + 24832) = v22;
  v24 = a3;
  v25 = num_4x4_blocks_wide_lookup[a3];
  v26 = subsize_lookup[a3 + 39];
  v27 = a2 + ((a4 & 7) << 9) + (v17 & 0x38) + 82432;
  v90[0] = 0;
  v28 = a1 + 740464;
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(v28 + (v24 << 6) + 24))(v23, v21, v27, 64, v90);
  v86 = v29 == 0;
  v85 = 1.0 / (float)v29;
  v88[1] = logf((float)v29 + 1.0);
  v30 = v28 + (v26 << 6);
  v84 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(v30 + 24))(v23, v21, v27, 64, v90);
  v83 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(v30 + 24))(v23 + 2 * v25, v21, v27 + 2 * v25, 64, v90);
  LODWORD(v26) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(v30 + 24))(v23 + 2 * (int)v25 * (uint64_t)(int)v21, v21, v27 + (v25 << 7), 64, v90);
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _DWORD *))(v30 + 24))(v23 + 2 * v25 + 2 * (int)v25 * (int)v21, v21, v27 + 130 * v25, 64, v90);
  v32.i64[0] = __PAIR64__(v83, v84);
  v32.i64[1] = __PAIR64__(v31, v26);
  __asm { FMOV            V2.4S, #1.0 }
  v89 = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v86)), 0x1FuLL)), _Q2, (int8x16_t)vmulq_n_f32(vcvtq_f32_u32(v32), v85));
  v38 = *v10;
  v39 = v10[2];
  if ((int)v39 >= 1)
  {
    v40 = 0;
    v41 = 0;
    v42 = v88;
    v43 = *v10;
    while (1)
    {
      v44 = v42;
      v42 = &v90[128 * v41];
      v38 = v10[v40 + 3];
      if ((int)v38 >= 1)
      {
        v45 = *(float32x4_t **)&v10[2 * v40 + 36];
        if (v43 > 0)
        {
          v46 = 0;
          v47 = *(_QWORD *)&v10[2 * v40 + 14];
          while (1)
          {
            if (v43 >= 8)
            {
              v50 = 0;
              v49 = 0.0;
              do
              {
                v51 = vmulq_f32(*(float32x4_t *)(v47 + v50), *(float32x4_t *)&v44[v50 / 4]);
                v52 = vmulq_f32(*(float32x4_t *)(v47 + v50 + 16), *(float32x4_t *)&v44[v50 / 4 + 4]);
                v49 = (float)((float)((float)((float)((float)((float)((float)(v49 + v51.f32[0]) + v51.f32[1])
                                                            + v51.f32[2])
                                                    + v51.f32[3])
                                            + v52.f32[0])
                                    + v52.f32[1])
                            + v52.f32[2])
                    + v52.f32[3];
                v50 += 32;
              }
              while (((4 * v43) & 0x3FFFFFFE0) != v50);
              v48 = v43 & 0xFFFFFFF8;
              if (v48 == v43)
                goto LABEL_27;
            }
            else
            {
              v48 = 0;
              v49 = 0.0;
            }
            do
            {
              v49 = v49 + (float)(*(float *)(v47 + 4 * v48) * *(float *)&v44[v48]);
              ++v48;
            }
            while (v43 != v48);
LABEL_27:
            *(float *)&v42[v46] = fmaxf(v49 + v45->f32[v46], 0.0);
            ++v46;
            v47 += 4 * v43;
            if (v46 == v38)
              goto LABEL_23;
          }
        }
        if (v38 >= 8)
        {
          v53 = v38 & 0x7FFFFFF8;
          v54 = v45 + 1;
          v55 = (float32x4_t *)&v90[128 * v41 + 4];
          v56 = v38 & 0xFFFFFFF8;
          do
          {
            v57 = vmaxnmq_f32(vaddq_f32(*v54, (float32x4_t)0), (float32x4_t)0);
            v55[-1] = vmaxnmq_f32(vaddq_f32(v54[-1], (float32x4_t)0), (float32x4_t)0);
            *v55 = v57;
            v54 += 2;
            v55 += 2;
            v56 -= 8;
          }
          while (v56);
          if (v53 == v38)
            goto LABEL_23;
        }
        else
        {
          v53 = 0;
        }
        v58 = v38 - v53;
        v59 = v53;
        v60 = (float *)&v90[128 * v41 + v53];
        v61 = &v45->f32[v59];
        do
        {
          v62 = *v61++;
          *v60++ = fmaxf(v62 + 0.0, 0.0);
          --v58;
        }
        while (v58);
      }
LABEL_23:
      v41 = 1 - v41;
      ++v40;
      v43 = v38;
      if (v40 == v39)
        goto LABEL_44;
    }
  }
  v42 = v88;
LABEL_44:
  v63 = v10[1];
  if ((int)v63 < 1)
    goto LABEL_62;
  v64 = *(float32x4_t **)&v10[2 * (int)v39 + 36];
  if ((int)v38 > 0)
  {
    v65 = 0;
    v66 = *(_QWORD *)&v10[2 * (int)v39 + 14];
    while (1)
    {
      if (v38 >= 8)
      {
        v69 = 0;
        v68 = 0.0;
        do
        {
          v70 = vmulq_f32(*(float32x4_t *)(v66 + v69), *(float32x4_t *)&v42[v69 / 4]);
          v71 = vmulq_f32(*(float32x4_t *)(v66 + v69 + 16), *(float32x4_t *)&v42[v69 / 4 + 4]);
          v68 = (float)((float)((float)((float)((float)((float)((float)(v68 + v70.f32[0]) + v70.f32[1]) + v70.f32[2])
                                              + v70.f32[3])
                                      + v71.f32[0])
                              + v71.f32[1])
                      + v71.f32[2])
              + v71.f32[3];
          v69 += 32;
        }
        while (((4 * v38) & 0x3FFFFFFE0) != v69);
        v67 = v38 & 0x7FFFFFF8;
        if ((v38 & 0xFFFFFFF8) == v38)
          goto LABEL_47;
      }
      else
      {
        v67 = 0;
        v68 = 0.0;
      }
      do
      {
        v68 = v68 + (float)(*(float *)(v66 + 4 * v67) * *(float *)&v42[v67]);
        ++v67;
      }
      while (v38 != v67);
LABEL_47:
      v87[v65] = v68 + v64->f32[v65];
      ++v65;
      v66 += 4 * (int)v38;
      if (v65 == v63)
        goto LABEL_62;
    }
  }
  if (v63 < 8)
  {
    v72 = 0;
LABEL_60:
    v77 = v63 - v72;
    v78 = v72;
    v79 = &v87[v72];
    v80 = &v64->f32[v78];
    do
    {
      v81 = *v80++;
      *v79++ = v81 + 0.0;
      --v77;
    }
    while (v77);
    goto LABEL_62;
  }
  v72 = v63 & 0x7FFFFFF8;
  v73 = v64 + 1;
  v74 = &v89;
  v75 = v63 & 0xFFFFFFF8;
  do
  {
    v76 = vaddq_f32(*v73, (float32x4_t)0);
    v74[-1] = (int8x16_t)vaddq_f32(v73[-1], (float32x4_t)0);
    *v74 = (int8x16_t)v76;
    v73 += 2;
    v74 += 2;
    v75 -= 8;
  }
  while (v75);
  if (v72 != v63)
    goto LABEL_60;
LABEL_62:
  if (v87[0] < (float)-v11)
    v82 = 0;
  else
    v82 = -1;
  if (v87[0] <= v11)
    return v82;
  else
    return 3;
}

_DWORD *pred_pixel_ready_reset(_DWORD *result, unsigned int a2)
{
  uint64_t v2;
  _DWORD *v3;

  result[179] = 0;
  result[391] = 0;
  result[603] = 0;
  result[815] = 0;
  result[1027] = 0;
  if (a2 >= 4)
  {
    LOBYTE(v2) = a2;
    v3 = result;
    do
    {
      v2 = subsize_lookup[v2 + 39];
      pred_pixel_ready_reset(*((_QWORD *)v3 + 532), v2);
      pred_pixel_ready_reset(*((_QWORD *)v3 + 533), v2);
      result = (_DWORD *)pred_pixel_ready_reset(*((_QWORD *)v3 + 534), v2);
      v3 = (_DWORD *)*((_QWORD *)v3 + 535);
      v3[179] = 0;
      v3[391] = 0;
      v3[603] = 0;
      v3[815] = 0;
      v3[1027] = 0;
    }
    while (v2 > 3);
  }
  return result;
}

uint64_t fill_mode_info_sb(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  if (*(_DWORD *)(result + 1312) > (int)a3)
  {
    v6 = a6;
    v8 = a3;
    v10 = result;
    v11 = *(_DWORD *)(a6 + 4);
    v12 = a5;
    v13 = &subsize_lookup[13 * v11 + a5];
    do
    {
      v14 = 1 << b_width_log2_lookup[v12];
      v15 = v14 + 3;
      if (v14 >= 0)
        v15 = 1 << b_width_log2_lookup[v12];
      v16 = *(_DWORD *)(v10 + 1320);
      if (v16 <= (int)a4)
        break;
      v17 = v15 >> 2;
      v18 = *v13;
      if (v11 != 3)
      {
        switch(v11)
        {
          case 2u:
            v38 = (int *)(a2 + 25352);
            v39 = a4 + *(_DWORD *)(a2 + 25352) * v8;
            v40 = *(_QWORD *)(v10 + 1480);
            v41 = 8 * v39;
            *(_QWORD *)(a2 + 25360) = v40 + v41;
            *(_QWORD *)(v40 + v41) = *(_QWORD *)(v10 + 1424) + 68 * v39;
            *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * ((int)a4 + v16 * (int)v8);
            v42 = **(_QWORD **)(a2 + 25360);
            LODWORD(v40) = *(_DWORD *)(v6 + 2624);
            v43 = *(_OWORD *)(v6 + 2608);
            v44 = *(_OWORD *)(v6 + 2592);
            *(_OWORD *)(v42 + 16) = *(_OWORD *)(v6 + 2576);
            *(_OWORD *)v42 = *(_OWORD *)(v6 + 2560);
            *(_OWORD *)(v42 + 32) = v44;
            *(_OWORD *)(v42 + 48) = v43;
            *(_DWORD *)(v42 + 64) = v40;
            v47 = *(_QWORD *)(a2 + 25568);
            v45 = *(_OWORD *)(v6 + 2628);
            v46 = *(_OWORD *)(v6 + 2644);
            *(_DWORD *)(v47 + 32) = *(_DWORD *)(v6 + 2660);
            *(_OWORD *)v47 = v45;
            *(_OWORD *)(v47 + 16) = v46;
            LODWORD(v47) = num_8x8_blocks_wide_lookup[v18];
            v48 = *(_DWORD *)(v10 + 1320);
            if (v48 - (int)a4 >= (int)v47)
              v49 = num_8x8_blocks_wide_lookup[v18];
            else
              v49 = (v48 - a4);
            LODWORD(v50) = num_8x8_blocks_high_lookup[v18];
            LODWORD(v51) = *(_DWORD *)(v10 + 1312) - v8;
            if ((int)v51 >= (int)v50)
              v51 = num_8x8_blocks_high_lookup[v18];
            else
              v51 = v51;
            if ((int)v51 >= 1 && (int)v49 >= 1)
            {
              v52 = 0;
              v53 = 0;
              v54 = **(_QWORD **)(a2 + 25360);
              v55 = 8 * *v38;
              do
              {
                result = v52;
                v56 = v49;
                do
                {
                  *(_QWORD *)(*(_QWORD *)(a2 + 25360) + result) = v54;
                  result += 8;
                  --v56;
                }
                while (v56);
                ++v53;
                v52 += v55;
              }
              while (v53 != v51);
            }
            v57 = v17 + a4;
            if (v17 + (int)a4 < v48)
            {
              v58 = v57 + *v38 * v8;
              v59 = *(_QWORD *)(v10 + 1480);
              v60 = 8 * v58;
              *(_QWORD *)(a2 + 25360) = v59 + v60;
              *(_QWORD *)(v59 + v60) = *(_QWORD *)(v10 + 1424) + 68 * v58;
              *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * (v57 + v48 * (int)v8);
              v61 = **(_QWORD **)(a2 + 25360);
              LODWORD(v59) = *(_DWORD *)(v6 + 3472);
              v62 = *(_OWORD *)(v6 + 3456);
              v63 = *(_OWORD *)(v6 + 3440);
              *(_OWORD *)(v61 + 16) = *(_OWORD *)(v6 + 3424);
              *(_OWORD *)v61 = *(_OWORD *)(v6 + 3408);
              *(_OWORD *)(v61 + 32) = v63;
              *(_OWORD *)(v61 + 48) = v62;
              *(_DWORD *)(v61 + 64) = v59;
              v64 = *(_QWORD *)(a2 + 25568);
              v65 = *(_OWORD *)(v6 + 3476);
              v66 = *(_OWORD *)(v6 + 3492);
              *(_DWORD *)(v64 + 32) = *(_DWORD *)(v6 + 3508);
              *(_OWORD *)v64 = v65;
              *(_OWORD *)(v64 + 16) = v66;
              v67 = *(_DWORD *)(v10 + 1320) - v57;
              v47 = v67 >= (int)v47 ? v47 : v67;
              v68 = *(_DWORD *)(v10 + 1312) - v8;
              v50 = v68 >= (int)v50 ? v50 : v68;
              if ((int)v50 >= 1 && (int)v47 >= 1)
              {
                v69 = 0;
                v70 = 0;
                v71 = **(_QWORD **)(a2 + 25360);
                v72 = 8 * *v38;
                do
                {
                  v73 = v69;
                  v74 = v47;
                  do
                  {
                    *(_QWORD *)(*(_QWORD *)(a2 + 25360) + v73) = v71;
                    v73 += 8;
                    --v74;
                  }
                  while (v74);
                  ++v70;
                  v69 += v72;
                }
                while (v70 != v50);
              }
            }
            break;
          case 1u:
            v75 = (int *)(a2 + 25352);
            v76 = a4 + *(_DWORD *)(a2 + 25352) * v8;
            v77 = *(_QWORD *)(v10 + 1480);
            v78 = 8 * v76;
            *(_QWORD *)(a2 + 25360) = v77 + v78;
            *(_QWORD *)(v77 + v78) = *(_QWORD *)(v10 + 1424) + 68 * v76;
            *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * ((int)a4 + v16 * (int)v8);
            v79 = **(_QWORD **)(a2 + 25360);
            LODWORD(v77) = *(_DWORD *)(v6 + 928);
            v81 = *(_OWORD *)(v6 + 896);
            v80 = *(_OWORD *)(v6 + 912);
            *(_OWORD *)(v79 + 16) = *(_OWORD *)(v6 + 880);
            *(_OWORD *)v79 = *(_OWORD *)(v6 + 864);
            *(_OWORD *)(v79 + 32) = v81;
            *(_OWORD *)(v79 + 48) = v80;
            *(_DWORD *)(v79 + 64) = v77;
            v85 = *(_QWORD *)(a2 + 25568);
            v82 = *(_OWORD *)(v6 + 932);
            v83 = *(_OWORD *)(v6 + 948);
            *(_DWORD *)(v85 + 32) = *(_DWORD *)(v6 + 964);
            *(_OWORD *)v85 = v82;
            *(_OWORD *)(v85 + 16) = v83;
            v84 = *(_DWORD *)(v10 + 1312);
            LODWORD(v85) = num_8x8_blocks_wide_lookup[v18];
            v86 = *(_DWORD *)(v10 + 1320);
            if (v86 - (int)a4 >= (int)v85)
              v87 = num_8x8_blocks_wide_lookup[v18];
            else
              v87 = (v86 - a4);
            LODWORD(v88) = num_8x8_blocks_high_lookup[v18];
            LODWORD(v89) = v84 - v8;
            if (v84 - (int)v8 >= (int)v88)
              v89 = num_8x8_blocks_high_lookup[v18];
            else
              v89 = v89;
            if ((int)v89 >= 1 && (int)v87 >= 1)
            {
              v90 = 0;
              v91 = 0;
              v92 = **(_QWORD **)(a2 + 25360);
              result = 8 * *v75;
              do
              {
                v93 = v90;
                v94 = v87;
                do
                {
                  *(_QWORD *)(*(_QWORD *)(a2 + 25360) + v93) = v92;
                  v93 += 8;
                  --v94;
                }
                while (v94);
                ++v91;
                v90 += result;
              }
              while (v91 != v89);
            }
            v95 = v17 + v8;
            if (v17 + (int)v8 < v84)
            {
              v96 = a4 + *v75 * v95;
              v97 = *(_QWORD *)(v10 + 1480);
              v98 = 8 * v96;
              *(_QWORD *)(a2 + 25360) = v97 + v98;
              *(_QWORD *)(v97 + v98) = *(_QWORD *)(v10 + 1424) + 68 * v96;
              *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * ((int)a4 + v86 * v95);
              v99 = **(_QWORD **)(a2 + 25360);
              LODWORD(v97) = *(_DWORD *)(v6 + 1776);
              v100 = *(_OWORD *)(v6 + 1760);
              v101 = *(_OWORD *)(v6 + 1744);
              *(_OWORD *)(v99 + 16) = *(_OWORD *)(v6 + 1728);
              *(_OWORD *)v99 = *(_OWORD *)(v6 + 1712);
              *(_OWORD *)(v99 + 32) = v101;
              *(_OWORD *)(v99 + 48) = v100;
              *(_DWORD *)(v99 + 64) = v97;
              v102 = *(_QWORD *)(a2 + 25568);
              v103 = *(_OWORD *)(v6 + 1780);
              v104 = *(_OWORD *)(v6 + 1796);
              *(_DWORD *)(v102 + 32) = *(_DWORD *)(v6 + 1812);
              *(_OWORD *)v102 = v103;
              *(_OWORD *)(v102 + 16) = v104;
              v105 = *(_DWORD *)(v10 + 1320) - a4;
              v85 = v105 >= (int)v85 ? v85 : v105;
              v106 = *(_DWORD *)(v10 + 1312) - v95;
              v88 = v106 >= (int)v88 ? v88 : v106;
              if ((int)v88 >= 1 && (int)v85 >= 1)
              {
                v107 = 0;
                v108 = 0;
                v109 = **(_QWORD **)(a2 + 25360);
                v110 = 8 * *v75;
                do
                {
                  v111 = v107;
                  v112 = v85;
                  do
                  {
                    *(_QWORD *)(*(_QWORD *)(a2 + 25360) + v111) = v109;
                    v111 += 8;
                    --v112;
                  }
                  while (v112);
                  ++v108;
                  v107 += v110;
                }
                while (v108 != v88);
              }
            }
            break;
          case 0u:
            v19 = a4 + *(_DWORD *)(a2 + 25352) * v8;
            v20 = *(_QWORD *)(v10 + 1480);
            v21 = 8 * v19;
            *(_QWORD *)(a2 + 25360) = v20 + v21;
            *(_QWORD *)(v20 + v21) = *(_QWORD *)(v10 + 1424) + 68 * v19;
            *(_QWORD *)(a2 + 25568) = *(_QWORD *)(a2 + 25576) + 36 * ((int)a4 + v16 * (int)v8);
            v22 = **(_QWORD **)(a2 + 25360);
            v23 = *(_DWORD *)(v6 + 80);
            v25 = *(_OWORD *)(v6 + 48);
            v24 = *(_OWORD *)(v6 + 64);
            *(_OWORD *)(v22 + 16) = *(_OWORD *)(v6 + 32);
            *(_OWORD *)v22 = *(_OWORD *)(v6 + 16);
            *(_OWORD *)(v22 + 32) = v25;
            *(_OWORD *)(v22 + 48) = v24;
            *(_DWORD *)(v22 + 64) = v23;
            v26 = *(_QWORD *)(a2 + 25568);
            v27 = *(_OWORD *)(v6 + 84);
            v28 = *(_OWORD *)(v6 + 100);
            *(_DWORD *)(v26 + 32) = *(_DWORD *)(v6 + 116);
            *(_OWORD *)v26 = v27;
            *(_OWORD *)(v26 + 16) = v28;
            v29 = *(_DWORD *)(v10 + 1320) - a4;
            v30 = v29 >= num_8x8_blocks_wide_lookup[v12] ? num_8x8_blocks_wide_lookup[v12] : v29;
            LODWORD(v12) = num_8x8_blocks_high_lookup[v12];
            v31 = *(_DWORD *)(v10 + 1312) - v8;
            v12 = v31 >= (int)v12 ? v12 : v31;
            if ((int)v12 >= 1 && (int)v30 >= 1)
            {
              v32 = 0;
              v33 = 0;
              v34 = **(_QWORD **)(a2 + 25360);
              v35 = 8 * *(int *)(a2 + 25352);
              do
              {
                v36 = v32;
                v37 = v30;
                do
                {
                  *(_QWORD *)(*(_QWORD *)(a2 + 25360) + v36) = v34;
                  v36 += 8;
                  --v37;
                }
                while (v37);
                ++v33;
                v32 += v35;
              }
              while (v33 != v12);
            }
            break;
        }
        return result;
      }
      fill_mode_info_sb(v10, a2, v8, a4, *v13, *(_QWORD *)(v6 + 4256));
      fill_mode_info_sb(v10, a2, v8, (v17 + a4), v18, *(_QWORD *)(v6 + 4264));
      v8 = (v17 + v8);
      result = fill_mode_info_sb(v10, a2, v8, a4, v18, *(_QWORD *)(v6 + 4272));
      v6 = *(_QWORD *)(v6 + 4280);
      v11 = *(_DWORD *)(v6 + 4);
      v13 = &subsize_lookup[13 * v11 + v18];
      v12 = v18;
      a4 = (v17 + a4);
    }
    while (*(_DWORD *)(v10 + 1312) > (int)v8);
  }
  return result;
}

int32x2_t *encode_sb_rt(int32x2_t *result, unint64_t a2, __n128 *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  int32x2_t *v9;
  uint64_t v10;
  int v11;
  int32x2_t *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t *v27;
  int32x2_t *v28;
  unint64_t v29;
  __n128 *v30;
  int v31;
  int v32;
  int v33;
  void *v34;
  void *v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  uint64_t v46;
  uint64_t v47;

  v9 = result + 21626;
  v10 = a8;
  v11 = (1 << b_width_log2_lookup[a8]) + (1 << b_width_log2_lookup[a8] < 0 ? 3 : 0);
  if (result[21626].i32[0] <= (int)a5 || result[21627].i32[0] <= (int)a6)
    return result;
  v18 = result;
  if (a8 < 3)
  {
    v19 = 0;
    v20 = 0;
  }
  else
  {
    v19 = (*(char *)(*(_QWORD *)(a2 + 25520) + (int)a6) >> mi_width_log2_lookup[a8]) & 1 | (2 * ((*(char *)(a2 + (a5 & 7) + 25528) >> mi_width_log2_lookup[a8]) & 1)) | (4 * mi_width_log2_lookup[a8]);
    v20 = **(unsigned __int8 **)(*(_QWORD *)&result[21647] + 8 * ((int)a6 + *(_DWORD *)(a2 + 25352) * (int)a5));
  }
  v21 = partition_lookup[13 * b_width_log2_lookup[a8] + v20];
  if ((_DWORD)a7 && a8)
  {
    v22 = *(_QWORD *)(a2 + 114248) + 16 * v19 + 4 * v21;
    ++*(_DWORD *)(v22 + 560);
  }
  v23 = v11 >> 2;
  switch((_DWORD)v21)
  {
    case 2:
      v32 = v23;
      v46 = v20;
      encode_b_rt(result, a2, a3, a4, a5, a6, a7, v20, a9 + 2560);
      if (a8 >= 4)
      {
        v31 = v32 + a6;
        if (v32 + (int)a6 < v9[1].i32[0])
        {
          v27 = a4;
          v39 = a9 + 3408;
          v28 = v18;
          v29 = a2;
          v30 = a3;
          v26 = a5;
          goto LABEL_19;
        }
      }
LABEL_20:
      v24 = v46;
      goto LABEL_21;
    case 1:
      v25 = v23;
      v46 = v20;
      encode_b_rt(result, a2, a3, a4, a5, a6, a7, v20, a9 + 864);
      if (a8 >= 4)
      {
        v26 = v25 + a5;
        if (v25 + (int)a5 < v9->i32[0])
        {
          v27 = a4;
          v39 = a9 + 1712;
          v28 = v18;
          v29 = a2;
          v30 = a3;
          v31 = a6;
LABEL_19:
          v33 = a7;
          v24 = v46;
          encode_b_rt(v28, v29, v30, v27, v26, v31, v33, v46, v39);
          goto LABEL_21;
        }
      }
      goto LABEL_20;
    case 0:
      v24 = v20;
      encode_b_rt(result, a2, a3, a4, a5, a6, a7, v20, a9 + 16);
LABEL_21:
      v34 = (void *)(*(_QWORD *)(a2 + 25520) + (int)a6);
      v35 = (void *)(a2 + 25528 + (a5 & 7));
      v36 = num_8x8_blocks_wide_lookup[v10];
      v37 = &partition_context_lookup[2 * v24];
      memset(v34, *v37, v36);
      return (int32x2_t *)memset(v35, v37[1], v36);
  }
  v41 = v23;
  v47 = subsize_lookup[a8 + 39];
  encode_sb_rt(result, a2, a3, a4, a5, a6, a7);
  v40 = v41 + a6;
  encode_sb_rt(v18, a2, a3, a4, a5, (v41 + a6), a7);
  v42 = v41 + a5;
  encode_sb_rt(v18, a2, a3, a4, v42, a6, a7);
  v38 = a7;
  v24 = v47;
  result = (int32x2_t *)encode_sb_rt(v18, a2, a3, a4, v42, v40, v38);
  if (a8 == 3 || (_DWORD)v21 != 3)
    goto LABEL_21;
  return result;
}

uint64_t vp9_subtract_plane(uint64_t a1, int a2, int a3)
{
  uint16x8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint8x8_t *v11;
  uint64_t v12;
  uint8x8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int16x8_t v20;
  _OWORD *i8;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v5 = (uint16x8_t *)(a1 + 8304 * a3);
  v6 = a1 + 136 * a3;
  v7 = ss_size_lookup[4 * a2 + 2 * *(int *)(v6 + 24920) + *(int *)(v6 + 24924)];
  v8 = num_4x4_blocks_wide_lookup[v7];
  v9 = 4 * v8;
  result = 4 * num_4x4_blocks_high_lookup[v7];
  v11 = (uint8x8_t *)v5[513].i64[1];
  v12 = v5[514].i32[0];
  v13 = *(uint8x8_t **)(v6 + 24928);
  v14 = *(int *)(v6 + 24936);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 25440) + 152) & 8) == 0)
    return vpx_subtract_block_neon(result, v9, v5, 4 * v8, v11, v12, v13, v14);
  v15 = 2 * (_QWORD)v11;
  v16 = 2 * (_QWORD)v13;
  if ((unint64_t)(v7 - 5) > 7)
  {
    if (v7 <= 1)
    {
      do
      {
        v24 = 0;
        v25 = 0;
        do
        {
          *(int16x4_t *)&v5->i8[v24] = vsub_s16(*(int16x4_t *)(v15 + v24), *(int16x4_t *)(v16 + v24));
          v25 += 4;
          v24 += 8;
        }
        while (v25 < v9);
        v5 = (uint16x8_t *)((char *)v5 + 8 * v8);
        v16 += 2 * v14;
        v15 += 2 * v12;
        result = (result - 1);
      }
      while ((_DWORD)result);
    }
    else
    {
      do
      {
        v22 = 0;
        v23 = 0;
        do
        {
          v5[v22] = (uint16x8_t)vsubq_s16(*(int16x8_t *)(v15 + v22 * 16), *(int16x8_t *)(v16 + v22 * 16));
          v23 += 8;
          ++v22;
        }
        while (v23 < v9);
        v5 = (uint16x8_t *)((char *)v5 + 8 * v8);
        v16 += 2 * v14;
        v15 += 2 * v12;
        result = (result - 1);
      }
      while ((_DWORD)result);
    }
  }
  else
  {
    v17 = 8 * v8;
    do
    {
      v18 = 0;
      v19 = 16;
      do
      {
        v20 = vsubq_s16(*(int16x8_t *)(v15 + v19), *(int16x8_t *)(v16 + v19));
        i8 = v5[(unint64_t)v19 / 0x10].i8;
        *(i8 - 1) = vsubq_s16(*(int16x8_t *)(v15 + v19 - 16), *(int16x8_t *)(v16 + v19 - 16));
        *i8 = v20;
        v18 += 16;
        v19 += 32;
      }
      while (v18 < v9);
      v15 += 2 * v12;
      v16 += 2 * v14;
      v5 = (uint16x8_t *)((char *)v5 + v17);
      result = (result - 1);
    }
    while ((_DWORD)result);
  }
  return result;
}

uint64_t vp9_optimize_b(uint64_t a1, int a2, int a3, unsigned int a4, signed int a5)
{
  _DWORD *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  __int16 **v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 *v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char *v26;
  uint64_t v27;
  __int16 *v28;
  __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 *v38;
  char *v39;
  int v40;
  char v41;
  __int16 *v42;
  char *v43;
  signed int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  BOOL v54;
  int v55;
  unsigned int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  __int16 v63;
  __int16 v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BOOL4 v92;
  unsigned int v93;
  int v94;
  int v95;
  int v96;
  BOOL v97;
  _BOOL4 v98;
  uint64_t v99;
  int v100;
  unsigned int v101;
  int v102;
  _BOOL4 v103;
  BOOL v104;
  uint64_t v105;
  BOOL v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t result;
  uint64_t v111;
  uint64_t v112;
  __int16 *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  char *v117;
  __int16 *v118;
  unint64_t v119;
  __int16 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  __int16 *v125;
  _DWORD *v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  unsigned __int8 *v134;
  uint64_t v135;
  unsigned __int16 *v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  char v140;
  int v142;
  int *v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE v147[1024];
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v5 = (_DWORD *)(a1 + 25536);
  v6 = a1 + 136 * a2;
  v7 = **(unsigned __int8 ***)(a1 + 25360);
  v8 = (char)v7[8];
  v9 = (_QWORD *)(a1 + 8304 * a2);
  v10 = a3;
  v11 = (uint64_t)a3 << 6;
  v12 = v9[1026];
  v13 = *(unsigned __int16 *)(v12 + 2 * a3);
  v140 = a4 == 3;
  if (a4)
    v14 = (unsigned __int8 *)&vp9_coefband_trans_8x8plus;
  else
    v14 = (unsigned __int8 *)&vp9_coefband_trans_4x4;
  if (a2 > 0 || v8 > 0 || *(_DWORD *)(a1 + 25540))
  {
    v15 = (__int16 **)(&vp9_default_scan_orders + 3 * a4);
  }
  else
  {
    v116 = v7 + 1;
    if (*v7 < 3u)
      v116 = &v7[12 * (int)v10 + 20];
    v15 = (__int16 **)(&vp9_scan_orders + 12 * a4 + 3 * intra_mode_to_tx_type_lookup[*v116]);
  }
  v16 = v9[1024] + v11;
  v17 = *(_QWORD *)(v6 + 24912) + v11;
  v18 = a2 > 0;
  v19 = v8 > 0;
  v20 = *(_DWORD *)(a1 + 25840);
  v21 = plane_rd_mult_0[2 * v19 + (a2 > 0)] * (uint64_t)*(int *)(a1 + 25636);
  if (v20)
    v22 = (v21 * ((char)v7[4] - v20 + 8)) >> 4;
  else
    v22 = v21 >> 1;
  v139 = v22;
  v23 = *v15;
  v24 = (unsigned __int16 *)&vp9_cat6_high12_high_cost;
  if (*v5 == 10)
    v24 = (unsigned __int16 *)&vp9_cat6_high10_high_cost;
  if (*v5 == 8)
    v25 = (unsigned __int16 *)&vp9_cat6_high_cost;
  else
    v25 = v24;
  v136 = v25;
  if (!(_DWORD)v13)
  {
    result = 0;
LABEL_109:
    if ((int)result < (int)v13)
    {
      v112 = v13 - (int)result;
      v113 = &v23[(int)result];
      do
      {
        v114 = *v113++;
        v115 = 4 * v114;
        *(_DWORD *)(v16 + v115) = 0;
        *(_DWORD *)(v17 + v115) = 0;
        --v112;
      }
      while (v112);
    }
    goto LABEL_114;
  }
  v132 = v9[1025] + v11;
  v131 = *(_QWORD *)(v6 + 25032);
  v26 = (char *)v15[2];
  v138 = *(_DWORD *)(a1 + 25632);
  v27 = a1 + 13824 * a4 + 6912 * v18 + 3456 * v19 + 26912;
  v28 = vp9_dct_cat_lt_10_value_tokens;
  v29 = *v15;
  v30 = v13;
  do
  {
    while (1)
    {
      v32 = *v29++;
      v31 = v32;
      v33 = *(int *)(v16 + 4 * v32);
      if ((v33 - 67) < 0xFFFFFF7B)
        break;
      v147[v31] = vp9_pt_energy_class[v28[4 * v33]];
      if (!--v30)
        goto LABEL_21;
    }
    v147[v31] = vp9_pt_energy_class[10];
    --v30;
  }
  while (v30);
LABEL_21:
  v126 = (_DWORD *)(a1 + 25536);
  v122 = v12;
  v123 = v10;
  v34 = 0;
  v119 = 0;
  v35 = 0;
  v145 = v16;
  v36 = 0x4000000000000;
  v137 = (0x4000000000000 << v138) + ((v139 * *(unsigned int *)(v27 + 576 * *v14 + 48 * a5 + 44) + 256) >> 9);
  v129 = (16 << (2 * a4)) - 1;
  v130 = vp9_dct_cat_lt_10_value_cost;
  v120 = v23;
  v121 = v13;
  v37 = -v13;
  v38 = v23 + 1;
  v39 = v26 + 4;
  v40 = 1;
  v134 = v14;
  v135 = v17;
  v41 = a4 == 3;
  v133 = v20;
  v144 = a1 + 13824 * a4 + 6912 * v18 + 3456 * v19 + 26912;
  v125 = v28;
  v128 = -v13;
  v117 = v39;
  v118 = v23 + 1;
LABEL_22:
  v124 = v30;
  v142 = 0;
  v42 = &v38[v34];
  v43 = &v39[4 * v34++];
  do
  {
    v44 = a5;
    if (v34 != 1)
      v44 = (v147[*((__int16 *)v43 - 2)]
           + v147[*((__int16 *)v43 - 1)]
           + 1) >> 1;
    v45 = *(v42 - 1);
    v46 = *(_DWORD *)(v16 + 4 * v45);
    if (!v46)
    {
      v35 += *(unsigned int *)(v27 + 576 * v14[v34 - 1] + 288 * (v40 == 0) + 48 * v44 + 4 * *v28);
      v40 = 0;
      goto LABEL_24;
    }
    v47 = *(_DWORD *)(v132 + 4 * v45);
    v48 = -(v47 << v41);
    v49 = *(_DWORD *)(*(_QWORD *)(a1 + 25440) + 152);
    if ((v49 & 8) != 0)
    {
      v52 = *v126 - 8;
      if (v47 << v41 > 0)
        v53 = -(v47 << v41 >> (*(_BYTE *)v126 - 8));
      else
        v53 = v48 >> (*(_BYTE *)v126 - 8);
      v50 = v53 * (uint64_t)v53;
      v143 = (int *)(v17 + 4 * v45);
      v127 = *v143;
      v55 = *v143 - v47;
      v54 = v55 < 0;
      v56 = v55 << v41;
      if (v54)
        v51 = -((signed int)-v56 >> v52);
      else
        v51 = v56 >> v52;
    }
    else
    {
      v50 = v48 * (uint64_t)v48;
      v143 = (int *)(v17 + 4 * v45);
      v127 = *v143;
      v51 = (*v143 - v47) << v41;
    }
    v57 = *(__int16 *)(v131 + 2 * ((_DWORD)v45 != 0));
    v58 = v50;
    v59 = v46 + ~(2 * (v46 >> 31));
    if (v59)
    {
      v60 = *(__int16 *)(v131 + 2 * ((_DWORD)v45 != 0));
      if ((v49 & 8) != 0)
        v60 = v57 >> (*v126 - 8);
      v58 = (v51 - ((v60 + (v46 >> 31)) ^ (v46 >> 31))) * (uint64_t)(v51 - ((v60 + (v46 >> 31)) ^ (v46 >> 31)));
    }
    if ((v46 - 67) > 0xFFFFFF7A)
    {
      v63 = v28[4 * v46];
      v62 = v130[v46];
      if ((v59 - 67) > 0xFFFFFF7A)
        goto LABEL_45;
    }
    else
    {
      if (v46 >= 0)
        v61 = *(_DWORD *)(v16 + 4 * v45);
      else
        v61 = -v46;
      v62 = v136[(v61 - 67) >> 8] + vp9_cat6_low_cost[(v61 - 67)];
      v63 = 10;
      if ((v59 - 67) > 0xFFFFFF7A)
      {
LABEL_45:
        v64 = v28[4 * v59];
        v65 = v130[v59];
        goto LABEL_51;
      }
    }
    if (v59 >= 0)
      v66 = v46 + ~(2 * (v46 >> 31));
    else
      v66 = -v59;
    v65 = v136[(v66 - 67) >> 8] + vp9_cat6_low_cost[(v66 - 67)];
    v64 = 10;
LABEL_51:
    v67 = v63;
    v68 = v27 + 576 * v14[v34 - 1] + 288 * (v40 == 0) + 48 * v44;
    v69 = *(unsigned int *)(v68 + 4 * v63);
    v70 = v64;
    v71 = *(unsigned int *)(v68 + 4 * v64);
    if (v34 - 1 >= v129)
    {
      v73 = 0;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      v16 = v145;
    }
    else
    {
      if (v37 + v34)
      {
        v72 = *(int *)(v145 + 4 * *v42);
        if ((v72 - 67) >= 0xFFFFFF7B)
          LOWORD(v72) = v28[4 * v72];
        else
          LOWORD(v72) = 10;
        v72 = (__int16)v72;
      }
      else
      {
        v72 = 11;
      }
      v77 = v14[v34];
      v78 = v144 + 576 * v14[v34];
      v147[v45] = vp9_pt_energy_class[v67];
      v79 = *(__int16 *)v43;
      v80 = *((__int16 *)v43 + 1);
      v81 = v78
          + 48 * ((v147[v79] + (unint64_t)v147[v80] + 1) >> 1);
      v82 = 4 * v72;
      v73 = *(unsigned int *)(v81 + 4 * v72);
      v147[v45] = vp9_pt_energy_class[v70];
      v75 = *(unsigned int *)(v81 + 44);
      v83 = (v147[v79] + (unint64_t)v147[v80] + 1) >> 1;
      v74 = *(unsigned int *)(v78 + 288 * (v59 == 0) + 48 * v83 + v82);
      if (v59)
        v76 = *(unsigned int *)(v144 + 576 * v77 + 288 * (v59 == 0) + 48 * v83 + 44);
      else
        v76 = 0;
      v28 = v125;
      v16 = v145;
    }
    v84 = v51 * (uint64_t)v51;
    v85 = v69 + v62;
    v86 = v71 + v65;
    v87 = (v84 << v138) + (((v85 + v73) * v139 + 256) >> 9);
    v88 = (v58 << v138) + (((v86 + v74) * v139 + 256) >> 9);
    v89 = v85 + v35;
    v90 = ((v84 + v36 - v50) << v138) + (((v85 + v35 + v75) * v139 + 256) >> 9);
    v35 += v86;
    v91 = ((v58 + v36 - v50) << v138) + (((v35 + v76) * v139 + 256) >> 9);
    v92 = v91 < v90;
    LODWORD(v86) = v59 * v57;
    v93 = (v59 * v57) >> v140;
    v94 = -(v59 * v57);
    v41 = v140;
    v95 = v94 >> v140;
    if ((int)v86 < 0)
      v96 = -v95;
    else
      v96 = v93;
    v97 = v88 < v87 || v91 < v90;
    if (!v97)
    {
      v92 = 0;
      v96 = 0;
    }
    if (v59)
      v98 = v92;
    else
      v98 = 0;
    if (v59)
      v99 = v91;
    else
      v99 = v90;
    if (v59)
      v100 = v96;
    else
      v100 = 0;
    if (v88 >= v87)
    {
      v40 = v46;
      v35 = v89;
      v58 = v84;
    }
    else
    {
      *(_DWORD *)(v16 + 4 * v45) = v59;
      *v143 = v100;
      v40 = *(_DWORD *)(v16 + 4 * v45);
      v67 = v70;
    }
    v14 = v134;
    v17 = v135;
    v147[v45] = vp9_pt_energy_class[v67];
    v27 = v144;
    v37 = v128;
    if (v133 >= 1)
    {
      if (v40 >= 0)
        v101 = v40;
      else
        v101 = -v40;
      v97 = v101 > 1;
      v102 = v142;
      if (v97)
        v102 = v142 + 1;
      v142 = v102;
    }
    v36 += v58 - v50;
    v103 = v59 != 0;
    v104 = v103 && v98;
    if (v103 && v98)
      v105 = v99;
    else
      v105 = v90;
    if (v105 < v137)
    {
      v106 = !v104;
      if (v104)
        v107 = v46 + ~(2 * (v46 >> 31));
      else
        v107 = v46;
      v108 = v127;
      if (!v106)
        v108 = v100;
      v119 = __PAIR64__(v107, v108);
      v137 = v105;
      LODWORD(v30) = v34;
      v39 = v117;
      v38 = v118;
      if (!(v128 + v34))
      {
        v124 = v34;
        goto LABEL_107;
      }
      goto LABEL_22;
    }
LABEL_24:
    ++v42;
    ++v34;
    v43 += 4;
  }
  while (v37 + v34 != 1);
  if (v142 < 1)
  {
LABEL_107:
    result = v124;
    v12 = v122;
    v10 = v123;
    v23 = v120;
    v13 = v121;
    if (v124 >= 1)
    {
      v111 = 4 * v120[v124 - 1];
      *(_DWORD *)(v16 + v111) = HIDWORD(v119);
      *(_DWORD *)(v17 + v111) = v119;
    }
    goto LABEL_109;
  }
  v12 = v122;
  v10 = v123;
  v109 = v121;
  while (1)
  {
    v97 = v109-- < 1;
    if (v97)
      break;
    if (*(_DWORD *)(v16 + 4 * v120[v109]))
    {
      result = (v109 + 1);
      goto LABEL_114;
    }
  }
  result = 0;
LABEL_114:
  *(_WORD *)(v12 + 2 * v10) = result;
  return result;
}

void vp9_xform_quant_dc(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int16x8_t *v20;
  uint64_t v21;
  __int16 *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  int16x4_t *v32;
  uint64_t v33;
  int32x4_t v34;
  int v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  uint64_t v39;
  __int16 *v40;
  int v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  __int16 *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  __int16 *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  uint64_t v64;
  __int16 *v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  __int16 *v73;
  uint64_t v74;
  int v75;
  __int128 v76;
  int16x4_t *v77;
  uint64_t v78;
  int32x4_t v79;
  int v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int16x8_t v84;
  uint64_t v85;
  __int16 *v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  __int16 v94;

  v8 = a1 + 24912;
  v10 = (_QWORD *)(a1 + 8304 * a2);
  v11 = a3;
  v12 = (uint64_t)a3 << 6;
  v13 = (int *)(v10[1025] + v12);
  v14 = (_OWORD *)(v10[1024] + v12);
  v15 = (_OWORD *)(*(_QWORD *)(a1 + 24912 + 136 * a2) + v12);
  v16 = num_4x4_blocks_wide_lookup[a6];
  v17 = v10[1026];
  v18 = 4 * v16;
  v19 = a5 + 4 * v16 * a4;
  v20 = (int16x8_t *)&v10[v19];
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 25440) + 152) & 8) != 0)
  {
    if (a7 == 1)
    {
      *v13 = vaddlvq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(*(int16x8_t *)((char *)v20 + 8 * v16), *v20), vaddq_s16(v20[v16], *(int16x8_t *)((char *)v20 + 6 * (4 * v16)))), vaddq_s16(vaddq_s16(v20[2 * v16], *(int16x8_t *)((char *)v20 + 10 * (4 * v16))), v20[12 * v18 / 0x10])), *(int16x8_t *)((char *)v20 + 14 * v18)));
      v13[1] = 0;
      v72 = a1 + 8304 * a2;
      v73 = *(__int16 **)(v72 + 8272);
      v74 = **(__int16 **)(v72 + 8240);
      v75 = **(__int16 **)(v8 + 136 * a2 + 120);
      v76 = 0uLL;
      v14[2] = 0u;
      v14[3] = 0u;
      v14[4] = 0u;
      v14[5] = 0u;
      v14[6] = 0u;
      v14[7] = 0u;
      v14[8] = 0u;
      v14[9] = 0u;
      v14[10] = 0u;
      v14[11] = 0u;
      v14[12] = 0u;
      v14[13] = 0u;
      v14[14] = 0u;
      v14[15] = 0u;
      *v14 = 0u;
      v14[1] = 0u;
      v15[14] = 0u;
      v15[15] = 0u;
      v15[12] = 0u;
      v15[13] = 0u;
      v15[10] = 0u;
      v15[11] = 0u;
      v15[8] = 0u;
      v15[9] = 0u;
      v15[6] = 0u;
      v15[7] = 0u;
      v15[4] = 0u;
      v15[5] = 0u;
    }
    else
    {
      v31 = 4 * v19;
      if (a7 == 2)
      {
        v77 = (int16x4_t *)(8304 * a2 + 2 * v31 + a1 + 16);
        v78 = 8 * v16;
        v79 = 0uLL;
        v80 = 16;
        v81 = 0uLL;
        v82 = 0uLL;
        v83 = 0uLL;
        do
        {
          v84 = *(int16x8_t *)v77[-2].i8;
          v79 = vaddw_s16(v79, *(int16x4_t *)v84.i8);
          v81 = vaddw_high_s16(v81, v84);
          v82 = vaddw_s16(v82, *v77);
          v83 = vaddw_high_s16(v83, *(int16x8_t *)v77->i8);
          v77 = (int16x4_t *)((char *)v77 + v78);
          --v80;
        }
        while (v80);
        *v13 = vaddvq_s32(vaddq_s32(vaddq_s32(v79, v81), vaddq_s32(v83, v82))) >> 1;
        v13[1] = 0;
        v85 = a1 + 8304 * a2;
        v86 = *(__int16 **)(v85 + 8272);
        v87 = **(__int16 **)(v85 + 8240);
        v88 = **(__int16 **)(v8 + 136 * a2 + 120);
        bzero(v14, 0x400uLL);
        bzero(v15, 0x400uLL);
        v89 = *v13 >> 31;
        v44 = (unint64_t)((*v86 + (uint64_t)(int)((v89 ^ *v13) + (*v13 >> 31))) * v87) >> 16;
        v90 = (v89 ^ v44) - v89;
        *(_DWORD *)v14 = v90;
        v46 = v90 * v88;
        goto LABEL_38;
      }
      if (a7 == 3)
      {
        v32 = (int16x4_t *)(8304 * a2 + 2 * v31 + a1 + 32);
        v33 = 8 * v16;
        v34 = 0uLL;
        v35 = 32;
        v36 = 0uLL;
        v37 = 0uLL;
        v38 = 0uLL;
        do
        {
          v34 = vaddw_high_s16(vaddw_s16(v34, v32[-4]), *(int16x8_t *)v32[-4].i8);
          v36 = vaddw_high_s16(vaddw_s16(v36, v32[-2]), *(int16x8_t *)v32[-2].i8);
          v37 = vaddw_high_s16(vaddw_s16(v37, *v32), *(int16x8_t *)v32->i8);
          v38 = vaddw_high_s16(vaddw_s16(v38, v32[2]), *(int16x8_t *)v32[2].i8);
          v32 = (int16x4_t *)((char *)v32 + v33);
          --v35;
        }
        while (v35);
        *v13 = vaddvq_s32(vaddq_s32(vaddq_s32(v36, v34), vaddq_s32(v37, v38))) >> 3;
        v13[1] = 0;
        v39 = a1 + 8304 * a2;
        v40 = *(__int16 **)(v39 + 8272);
        v41 = **(__int16 **)(v39 + 8240);
        v42 = **(__int16 **)(v8 + 136 * a2 + 120);
        bzero(v14, 0x1000uLL);
        bzero(v15, 0x1000uLL);
        v43 = *v13 >> 31;
        v44 = (unint64_t)(v41 * (uint64_t)(int)((v43 ^ *v13) + (*v13 >> 31) + ((*v40 + 1) >> 1))) >> 15;
        v45 = (v43 ^ v44) - v43;
        *(_DWORD *)v14 = v45;
        v46 = v45 * v42 / 2;
        goto LABEL_38;
      }
      (*(void (**)(int16x8_t *, uint64_t))(a1 + 82408))(v20, v10[1025] + v12);
      v91 = a1 + 8304 * a2;
      v73 = *(__int16 **)(v91 + 8272);
      v74 = **(__int16 **)(v91 + 8240);
      v75 = **(__int16 **)(v8 + 136 * a2 + 120);
      v76 = 0uLL;
      v14[2] = 0u;
      v14[3] = 0u;
      *v14 = 0u;
      v14[1] = 0u;
    }
    v15[2] = v76;
    v15[3] = v76;
    *v15 = v76;
    v15[1] = v76;
    v92 = *v13 >> 31;
    v44 = (unint64_t)((*v73 + (uint64_t)(int)((v92 ^ *v13) + (*v13 >> 31))) * v74) >> 16;
    v93 = (v92 ^ v44) - v92;
    *(_DWORD *)v14 = v93;
    v46 = v93 * v75;
LABEL_38:
    *(_DWORD *)v15 = v46;
    v30 = (_DWORD)v44 == 0;
    goto LABEL_39;
  }
  if (a7 == 1)
  {
    v47 = vaddlvq_s16(vaddq_s16(vaddq_s16(vaddq_s16(vaddq_s16(*(int16x8_t *)((char *)v20 + 2 * v18), *v20), vaddq_s16(v20[v18 / 4], *(int16x8_t *)((char *)v20 + 6 * v18))), vaddq_s16(vaddq_s16(v20[v18 / 2], *(int16x8_t *)((char *)v20 + 10 * v18)), v20[12 * v18 / 0x10])), *(int16x8_t *)((char *)v20 + 14 * v18)));
    *v13 = v47;
    v13[1] = 0;
    v48 = a1 + 8304 * a2;
    v49 = *(__int16 **)(v48 + 8272);
    v50 = **(__int16 **)(v48 + 8240);
    v51 = **(__int16 **)(v8 + 136 * a2 + 120);
    v14[2] = 0u;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[5] = 0u;
    v14[6] = 0u;
    v14[7] = 0u;
    v14[8] = 0u;
    v14[9] = 0u;
    v14[10] = 0u;
    v14[11] = 0u;
    v14[12] = 0u;
    v14[13] = 0u;
    v14[14] = 0u;
    v14[15] = 0u;
    *v14 = 0u;
    v14[1] = 0u;
    v15[14] = 0u;
    v15[15] = 0u;
    v15[12] = 0u;
    v15[13] = 0u;
    v15[10] = 0u;
    v15[11] = 0u;
    v15[8] = 0u;
    v15[9] = 0u;
    v15[6] = 0u;
    v15[7] = 0u;
    v15[4] = 0u;
    v15[5] = 0u;
    v15[2] = 0u;
    v15[3] = 0u;
    *v15 = 0u;
    v15[1] = 0u;
    v52 = ((v47 >> 31) ^ v47) + (v47 >> 31) + *v49;
    if (v52 >= 0x7FFF)
      v52 = 0x7FFF;
    if (v52 <= -32768)
      v52 = -32768;
    v53 = v52 * v50;
    v54 = ((v47 >> 31) ^ (v53 >> 16)) - (v47 >> 31);
    *(_DWORD *)v14 = v54;
    v55 = v54 * v51;
    goto LABEL_31;
  }
  if (a7 == 2)
  {
    vpx_fdct16x16_1_neon(v20, (_QWORD *)(v10[1025] + v12), v18);
    v56 = a1 + 8304 * a2;
    v57 = *(__int16 **)(v56 + 8272);
    v58 = **(__int16 **)(v56 + 8240);
    v59 = **(__int16 **)(v8 + 136 * a2 + 120);
    LODWORD(v56) = *v13;
    v60 = *v13 >> 31;
    v61 = (v60 ^ v56) + (v56 >> 31);
    bzero(v14, 0x400uLL);
    bzero(v15, 0x400uLL);
    v62 = v61 + *v57;
    if (v62 >= 0x7FFF)
      v62 = 0x7FFF;
    if (v62 <= -32768)
      v62 = -32768;
    v53 = v62 * v58;
    v63 = (v60 ^ (v53 >> 16)) - v60;
    *(_DWORD *)v14 = v63;
    v55 = v63 * v59;
    goto LABEL_31;
  }
  if (a7 != 3)
  {
    (*(void (**)(int16x8_t *, uint64_t))(a1 + 82408))(v20, v10[1025] + v12);
    v64 = a1 + 8304 * a2;
    v65 = *(__int16 **)(v64 + 8272);
    v66 = **(__int16 **)(v64 + 8240);
    v67 = **(__int16 **)(v8 + 136 * a2 + 120);
    v68 = *v13 >> 31;
    v69 = (v68 ^ *v13) + (*v13 >> 31);
    v14[2] = 0u;
    v14[3] = 0u;
    *v14 = 0u;
    v14[1] = 0u;
    v15[2] = 0u;
    v15[3] = 0u;
    *v15 = 0u;
    v15[1] = 0u;
    v70 = v69 + *v65;
    if (v70 >= 0x7FFF)
      v70 = 0x7FFF;
    if (v70 <= -32768)
      v70 = -32768;
    v53 = v70 * v66;
    v71 = (v68 ^ (v53 >> 16)) - v68;
    *(_DWORD *)v14 = v71;
    v55 = v71 * v67;
LABEL_31:
    *(_DWORD *)v15 = v55;
    v30 = (v53 & 0xFFFF0000) == 0;
    goto LABEL_39;
  }
  vpx_fdct32x32_1_neon(v20, (_QWORD *)(v10[1025] + v12), v18);
  v21 = a1 + 8304 * a2;
  v22 = *(__int16 **)(v21 + 8272);
  v23 = **(__int16 **)(v21 + 8240);
  v24 = **(__int16 **)(v8 + 136 * a2 + 120);
  LODWORD(v21) = *v13;
  v25 = *v13 >> 31;
  v26 = (v25 ^ v21) + (v21 >> 31);
  bzero(v14, 0x1000uLL);
  bzero(v15, 0x1000uLL);
  v27 = v26 + ((*v22 + 1) >> 1);
  if (v27 >= 0x7FFF)
    v27 = 0x7FFF;
  if (v27 <= -32768)
    v27 = -32768;
  v28 = v27 * v23;
  v29 = (v25 ^ (v28 >> 15)) - v25;
  *(_DWORD *)v14 = v29;
  *(_DWORD *)v15 = v29 * v24 / 2;
  v30 = (v28 & 0xFFFF8000) == 0;
LABEL_39:
  v94 = !v30;
  *(_WORD *)(v17 + 2 * v11) = v94;
}

unsigned __int16 vp9_xform_quant@<H0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, unsigned int a7@<W6>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _UNKNOWN **v12;
  uint64_t v13;
  int16x8_t *v14;
  int32x4_t *v15;
  int32x4_t *v16;
  unsigned __int16 *v17;
  int v18;
  int16x8_t *v19;
  int16x8_t *v20;
  int16x8_t *v21;
  uint64_t v22;
  int16x4_t *v24;
  int32x4_t *v25;
  uint64_t v26;

  v8 = a1 + 82212;
  v9 = a1 + 24912;
  v11 = a1 + 8304 * a2;
  v12 = &vp9_default_scan_orders + 3 * a7;
  v13 = (uint64_t)a3 << 6;
  v14 = (int16x8_t *)(*(_QWORD *)(v11 + 8200) + v13);
  v15 = (int32x4_t *)(*(_QWORD *)(v11 + 0x2000) + v13);
  v16 = (int32x4_t *)(*(_QWORD *)(a1 + 24912 + 136 * a2) + v13);
  v17 = (unsigned __int16 *)(*(_QWORD *)(v11 + 8208) + 2 * a3);
  v18 = 4 * num_4x4_blocks_wide_lookup[a6];
  v19 = (int16x8_t *)(v11 + 8 * (a5 + v18 * a4));
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 25440) + 152) & 8) == 0)
  {
    switch(a7)
    {
      case 1u:
        vpx_fdct8x8_neon(v19, (int32x4_t *)(*(_QWORD *)(v11 + 8200) + v13), v18);
        v20 = *(int16x8_t **)(v9 + 136 * a2 + 120);
        v21 = v14;
        v22 = 64;
        break;
      case 2u:
        vpx_fdct16x16_neon(v19, *(_QWORD *)(v11 + 8200) + v13, v18);
        v20 = *(int16x8_t **)(v9 + 136 * a2 + 120);
        v21 = v14;
        v22 = 256;
        break;
      case 3u:
        if (*(_DWORD *)v8)
          vpx_fdct32x32_rd_neon(v19, (int32x4_t *)(*(_QWORD *)(v11 + 8200) + v13), v18);
        else
          vpx_fdct32x32_neon(v19, (int32x4_t *)(*(_QWORD *)(v11 + 8200) + v13), v18);
        return vpx_quantize_b_32x32_neon(v14, (int16x8_t **)v11, v15, v16, *(int16x8_t **)(v9 + 136 * a2 + 120), v17, (uint64_t)v12);
      default:
        (*(void (**)(int16x8_t *, uint64_t))(v8 + 196))(v19, *(_QWORD *)(v11 + 8200) + v13);
        v20 = *(int16x8_t **)(v9 + 136 * a2 + 120);
        v21 = v14;
        v22 = 16;
        break;
    }
    return vpx_quantize_b_neon(v21, v22, (_QWORD *)v11, v15, v16, v20, v17, (uint64_t)v12);
  }
  if (a7 == 1)
  {
    vpx_highbd_fdct8x8_neon((int16x4_t *)v19, (int32x4_t *)(*(_QWORD *)(v11 + 8200) + v13), v18);
    v24 = *(int16x4_t **)(v9 + 136 * a2 + 120);
    v25 = (int32x4_t *)v14;
    v26 = 64;
    return vpx_highbd_quantize_b_neon(v25, v26, (int16x4_t **)v11, (int16x8_t *)v15, v16, v24, v17, (uint64_t)v12);
  }
  if (a7 == 2)
  {
    vpx_highbd_fdct16x16_neon(v19, (int64x2_t *)(*(_QWORD *)(v11 + 8200) + v13), v18);
    v24 = *(int16x4_t **)(v9 + 136 * a2 + 120);
    v25 = (int32x4_t *)v14;
    v26 = 256;
    return vpx_highbd_quantize_b_neon(v25, v26, (int16x4_t **)v11, (int16x8_t *)v15, v16, v24, v17, (uint64_t)v12);
  }
  if (a7 != 3)
  {
    (*(void (**)(int16x8_t *, uint64_t))(v8 + 196))(v19, *(_QWORD *)(v11 + 8200) + v13);
    v24 = *(int16x4_t **)(v9 + 136 * a2 + 120);
    v25 = (int32x4_t *)v14;
    v26 = 16;
    return vpx_highbd_quantize_b_neon(v25, v26, (int16x4_t **)v11, (int16x8_t *)v15, v16, v24, v17, (uint64_t)v12);
  }
  if (*(_DWORD *)v8)
    vpx_highbd_fdct32x32_rd_neon((uint64_t)v19, *(_QWORD *)(v11 + 8200) + v13);
  else
    vpx_highbd_fdct32x32_neon((uint64_t)v19, *(_QWORD *)(v11 + 8200) + v13);
  return vpx_highbd_quantize_b_32x32_neon((int32x4_t *)v14, (int16x4_t **)v11, (int16x8_t *)v15, v16, *(int16x4_t **)(v9 + 136 * a2 + 120), v17, (uint64_t)v12);
}

void vp9_encode_sb(uint64_t a1, unsigned int a2)
{
  int *v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint8x8_t *v10;
  uint64_t v11;
  uint8x8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int16x8_t v22;
  int16x8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  uint16x8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint8x8_t *v49;
  uint64_t v50;
  uint8x8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  int16x8_t v61;
  int16x8_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v78;
  int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  uint16x8_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint8x8_t *v89;
  uint64_t v90;
  uint8x8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  int16x8_t v99;
  int16x8_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  int v114;
  int v116;
  int v117;
  unsigned int v118;
  int v119;
  int v120;
  int v121;
  unsigned __int8 *v122;
  uint64_t v124;
  int *v125;
  uint64_t v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 *p_dst;
  __int128 *v134;
  unsigned __int8 *v135;
  __int128 __dst;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  char v141[32];

  v2 = (int *)(a1 + 16528);
  v140 = 0u;
  *(_OWORD *)v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  __dst = 0u;
  v137 = 0u;
  v3 = **(unsigned __int8 ***)(a1 + 25360);
  v128 = a1;
  v130 = 0;
  v131 = 0;
  v132 = 0;
  v3[3] = 1;
  v135 = v3 + 3;
  if (!*(_DWORD *)(a1 + 26904))
  {
    v122 = v3;
    v127 = (unsigned int *)(a1 + 82208);
    v5 = a2;
    if (!*(_DWORD *)(a1 + 25592))
    {
      v6 = ss_size_lookup[4 * a2 + 2 * *(int *)(a1 + 24920) + *(int *)(a1 + 24924)];
      v7 = num_4x4_blocks_wide_lookup[v6];
      v8 = 4 * v7;
      v9 = 4 * num_4x4_blocks_high_lookup[v6];
      v10 = *(uint8x8_t **)(a1 + 8216);
      v11 = *(int *)(a1 + 8224);
      v12 = *(uint8x8_t **)(a1 + 24928);
      v13 = v2[2102];
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 25440) + 152) & 8) != 0)
      {
        v14 = 2 * (_QWORD)v10;
        v15 = 2 * (_QWORD)v12;
        v16 = 2 * v11;
        v17 = 2 * v13;
        v18 = 8 * v7;
        if ((unint64_t)(v6 - 5) > 7)
        {
          if (v6 <= 1)
          {
            v27 = a1;
            do
            {
              v28 = 0;
              v29 = 0;
              do
              {
                *(int16x4_t *)(v27 + v28) = vsub_s16(*(int16x4_t *)(v14 + v28), *(int16x4_t *)(v15 + v28));
                v29 += 4;
                v28 += 8;
              }
              while (v29 < v8);
              v27 += v18;
              v15 += v17;
              v14 += v16;
              LODWORD(v9) = v9 - 1;
            }
            while ((_DWORD)v9);
          }
          else
          {
            v24 = a1;
            do
            {
              v25 = 0;
              v26 = 0;
              do
              {
                *(int16x8_t *)(v24 + v25) = vsubq_s16(*(int16x8_t *)(v14 + v25), *(int16x8_t *)(v15 + v25));
                v26 += 8;
                v25 += 16;
              }
              while (v26 < v8);
              v24 += v18;
              v15 += v17;
              v14 += v16;
              LODWORD(v9) = v9 - 1;
            }
            while ((_DWORD)v9);
          }
        }
        else
        {
          v19 = a1;
          do
          {
            v20 = 0;
            v21 = 16;
            do
            {
              v22 = vsubq_s16(*(int16x8_t *)(v14 + v21), *(int16x8_t *)(v15 + v21));
              v23 = (int16x8_t *)(v19 + v21);
              v23[-1] = vsubq_s16(*(int16x8_t *)(v14 + v21 - 16), *(int16x8_t *)(v15 + v21 - 16));
              *v23 = v22;
              v20 += 16;
              v21 += 32;
            }
            while (v20 < v8);
            v14 += v16;
            v15 += v17;
            v19 += v18;
            LODWORD(v9) = v9 - 1;
          }
          while ((_DWORD)v9);
        }
      }
      else
      {
        vpx_subtract_block_neon(v9, v8, (uint16x8_t *)a1, 4 * v7, v10, v11, v12, v13);
      }
    }
    v30 = *v127;
    v126 = a1;
    if (*v127)
    {
      if (v2[2266] && v2[2267])
      {
        v30 = 0;
      }
      else
      {
        vp9_get_entropy_contexts(a2, v122[2], a1 + 24912, (char *)&__dst, (char *)&v139);
        v30 = 1;
      }
    }
    v129 = v30;
    p_dst = &__dst;
    v134 = &v139;
    v31 = v2[2098];
    v32 = v2[2099];
    v124 = v5;
    v125 = v2;
    v33 = ss_size_lookup[4 * v5 + 2 * v31 + v32];
    v34 = (v2[2219] >> (v31 + 5)) & (v2[2219] >> 31);
    v35 = v34 + num_4x4_blocks_wide_lookup[v33];
    v36 = ((v2[2221] >> (v32 + 5)) & (v2[2221] >> 31)) + num_4x4_blocks_high_lookup[v33];
    if (v36 >= 1 && v35 >= 1)
    {
      v38 = 0;
      v39 = 0;
      v40 = *(unsigned __int8 *)(**(_QWORD **)(a1 + 25360) + 2);
      v41 = -v34 >> v40 << (2 * v40);
      v42 = 1 << v40;
      do
      {
        v43 = 0;
        do
        {
          encode_block(0, v39, v38, v43, v33, v40, &v128);
          v39 += 1 << (2 * v40);
          v43 += v42;
        }
        while (v43 < v35);
        v39 += v41;
        v38 += v42;
      }
      while (v38 < v36);
    }
    if (!v125[2266])
    {
      v44 = (uint16x8_t *)(v126 + 8304);
      v45 = ss_size_lookup[4 * v124 + 2 * v125[2132] + v125[2133]];
      v46 = num_4x4_blocks_wide_lookup[v45];
      v47 = 4 * v46;
      v48 = 4 * num_4x4_blocks_high_lookup[v45];
      v49 = *(uint8x8_t **)(v126 + 16520);
      v50 = *v125;
      v51 = *(uint8x8_t **)(v126 + 25064);
      v52 = v125[2136];
      if ((*(_BYTE *)(*(_QWORD *)(v126 + 25440) + 152) & 8) != 0)
      {
        v53 = 2 * (_QWORD)v49;
        v54 = 2 * (_QWORD)v51;
        v55 = 2 * v50;
        v56 = 2 * v52;
        if ((unint64_t)(v45 - 5) > 7)
        {
          if (v45 <= 1)
          {
            v66 = 8 * v46;
            do
            {
              v67 = 0;
              v68 = 0;
              do
              {
                *(int16x4_t *)&v44->i8[v67] = vsub_s16(*(int16x4_t *)(v53 + v67), *(int16x4_t *)(v54 + v67));
                v68 += 4;
                v67 += 8;
              }
              while (v68 < v47);
              v44 = (uint16x8_t *)((char *)v44 + v66);
              v54 += v56;
              v53 += v55;
              LODWORD(v48) = v48 - 1;
            }
            while ((_DWORD)v48);
          }
          else
          {
            v63 = 8 * v46;
            do
            {
              v64 = 0;
              v65 = 0;
              do
              {
                v44[v64] = (uint16x8_t)vsubq_s16(*(int16x8_t *)(v53 + v64 * 16), *(int16x8_t *)(v54 + v64 * 16));
                v65 += 8;
                ++v64;
              }
              while (v65 < v47);
              v44 = (uint16x8_t *)((char *)v44 + v63);
              v54 += v56;
              v53 += v55;
              LODWORD(v48) = v48 - 1;
            }
            while ((_DWORD)v48);
          }
        }
        else
        {
          v57 = v126 + 8320;
          v58 = 8 * v46;
          do
          {
            v59 = 0;
            v60 = 0;
            do
            {
              v61 = vsubq_s16(*(int16x8_t *)(v53 + v59 + 16), *(int16x8_t *)(v54 + v59 + 16));
              v62 = (int16x8_t *)(v57 + v59);
              v62[-1] = vsubq_s16(*(int16x8_t *)(v53 + v59), *(int16x8_t *)(v54 + v59));
              *v62 = v61;
              v60 += 16;
              v59 += 32;
            }
            while (v60 < v47);
            v53 += v55;
            v54 += v56;
            v57 += v58;
            LODWORD(v48) = v48 - 1;
          }
          while ((_DWORD)v48);
        }
      }
      else
      {
        vpx_subtract_block_neon(v48, v47, v44, 4 * v46, v49, v50, v51, v52);
      }
    }
    v69 = *v127;
    if (*v127)
    {
      if (v125[2266] && v125[2267])
      {
        v69 = 0;
      }
      else
      {
        vp9_get_entropy_contexts(a2, uv_txsize_lookup[16 * *v122 + 4 * v122[2] + 2 * v125[2132] + v125[2133]], v126 + 25048, (char *)&v137, (char *)&v140);
        v69 = 1;
      }
    }
    LODWORD(v129) = v69;
    p_dst = &v137;
    v134 = &v140;
    v70 = v125[2132];
    v71 = v125[2133];
    v72 = 2 * v70;
    v73 = ss_size_lookup[4 * v124 + 2 * v70 + v71];
    v74 = (v125[2219] >> (v70 + 5)) & (v125[2219] >> 31);
    v75 = v74 + num_4x4_blocks_wide_lookup[v73];
    v76 = ((v125[2221] >> (v71 + 5)) & (v125[2221] >> 31)) + num_4x4_blocks_high_lookup[v73];
    if (v76 >= 1 && v75 >= 1)
    {
      v78 = 0;
      v79 = 0;
      v80 = uv_txsize_lookup[16 * ***(unsigned __int8 ***)(v126 + 25360)
                           + 4 * *(unsigned __int8 *)(**(_QWORD **)(v126 + 25360) + 2)
                           + v72
                           + v71];
      v81 = -v74 >> v80 << (2 * v80);
      v82 = 1 << v80;
      do
      {
        v83 = 0;
        do
        {
          encode_block(1, v79, v78, v83, v73, v80, &v128);
          v79 += 1 << (2 * v80);
          v83 += v82;
        }
        while (v83 < v75);
        v79 += v81;
        v78 += v82;
      }
      while (v78 < v76);
    }
    if (!v125[2266])
    {
      v84 = (uint16x8_t *)(v126 + 16608);
      v85 = ss_size_lookup[4 * v124 + 2 * v125[2166] + v125[2167]];
      v86 = num_4x4_blocks_wide_lookup[v85];
      v87 = 4 * v86;
      v88 = 4 * num_4x4_blocks_high_lookup[v85];
      v89 = *(uint8x8_t **)(v126 + 24824);
      v90 = v125[2076];
      v91 = *(uint8x8_t **)(v126 + 25200);
      v92 = v125[2170];
      if ((*(_BYTE *)(*(_QWORD *)(v126 + 25440) + 152) & 8) != 0)
      {
        v93 = 2 * (_QWORD)v89;
        v94 = 2 * (_QWORD)v91;
        if ((unint64_t)(v85 - 5) > 7)
        {
          if (v85 <= 1)
          {
            v104 = 8 * v86;
            do
            {
              v105 = 0;
              v106 = 0;
              do
              {
                *(int16x4_t *)&v84->i8[v105] = vsub_s16(*(int16x4_t *)(v93 + v105), *(int16x4_t *)(v94 + v105));
                v106 += 4;
                v105 += 8;
              }
              while (v106 < v87);
              v84 = (uint16x8_t *)((char *)v84 + v104);
              v94 += 2 * v92;
              v93 += 2 * v90;
              LODWORD(v88) = v88 - 1;
            }
            while ((_DWORD)v88);
          }
          else
          {
            v101 = 8 * v86;
            do
            {
              v102 = 0;
              v103 = 0;
              do
              {
                v84[v102] = (uint16x8_t)vsubq_s16(*(int16x8_t *)(v93 + v102 * 16), *(int16x8_t *)(v94 + v102 * 16));
                v103 += 8;
                ++v102;
              }
              while (v103 < v87);
              v84 = (uint16x8_t *)((char *)v84 + v101);
              v94 += 2 * v92;
              v93 += 2 * v90;
              LODWORD(v88) = v88 - 1;
            }
            while ((_DWORD)v88);
          }
        }
        else
        {
          v95 = v126 + 16624;
          v96 = 8 * v86;
          do
          {
            v97 = 0;
            v98 = 0;
            do
            {
              v99 = vsubq_s16(*(int16x8_t *)(v93 + v97 + 16), *(int16x8_t *)(v94 + v97 + 16));
              v100 = (int16x8_t *)(v95 + v97);
              v100[-1] = vsubq_s16(*(int16x8_t *)(v93 + v97), *(int16x8_t *)(v94 + v97));
              *v100 = v99;
              v98 += 16;
              v97 += 32;
            }
            while (v98 < v87);
            v93 += 2 * v90;
            v94 += 2 * v92;
            v95 += v96;
            LODWORD(v88) = v88 - 1;
          }
          while ((_DWORD)v88);
        }
      }
      else
      {
        vpx_subtract_block_neon(v88, v87, v84, 4 * v86, v89, v90, v91, v92);
      }
    }
    v107 = *v127;
    if (*v127)
    {
      if (v125[2266] && v125[2267])
      {
        v107 = 0;
      }
      else
      {
        vp9_get_entropy_contexts(a2, uv_txsize_lookup[16 * *v122 + 4 * v122[2] + 2 * v125[2166] + v125[2167]], v126 + 25184, (char *)&v138, v141);
        v107 = 1;
      }
    }
    LODWORD(v129) = v107;
    p_dst = &v138;
    v134 = (__int128 *)v141;
    v108 = v125[2166];
    v109 = v125[2167];
    v110 = 2 * v108;
    v111 = ss_size_lookup[4 * v124 + 2 * v108 + v109];
    v112 = (v125[2219] >> (v108 + 5)) & (v125[2219] >> 31);
    v113 = v112 + num_4x4_blocks_wide_lookup[v111];
    v114 = ((v125[2221] >> (v109 + 5)) & (v125[2221] >> 31)) + num_4x4_blocks_high_lookup[v111];
    if (v114 >= 1 && v113 >= 1)
    {
      v116 = 0;
      v117 = 0;
      v118 = uv_txsize_lookup[16 * ***(unsigned __int8 ***)(v126 + 25360)
                            + 4 * *(unsigned __int8 *)(**(_QWORD **)(v126 + 25360) + 2)
                            + v110
                            + v109];
      v119 = -v112 >> v118 << (2 * v118);
      v120 = 1 << v118;
      do
      {
        v121 = 0;
        do
        {
          encode_block(2, v117, v116, v121, v111, v118, &v128);
          v117 += 1 << (2 * v118);
          v121 += v120;
        }
        while (v121 < v113);
        v117 += v119;
        v116 += v120;
      }
      while (v116 < v114);
    }
  }
}

void encode_block(int a1, int a2, int a3, int a4, int a5, unsigned int a6, uint64_t *a7)
{
  uint64_t *v7;
  int v10;
  int v11;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;
  int32x4_t *v33;
  int v34;
  int16x8_t *v35;
  signed int v36;
  uint64_t v37;
  int v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  int v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int16x8_t *v57;
  int16x8_t *v58;
  int16x8_t *v59;
  uint64_t v60;
  int16x4_t *v61;
  int32x4_t *v62;
  uint64_t v63;
  uint64_t v64;
  int32x4_t *v65;
  int16x8_t *v66;
  int32x4_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  __int16 *v79;
  uint64_t v80;
  _UNKNOWN **v81;
  uint64_t *v82;
  int *v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int32x4_t *v93;

  v7 = a7;
  v10 = a4;
  v11 = a3;
  v14 = *a7;
  v15 = *a7 + 24912;
  v16 = a1;
  v17 = v15 + 136 * a1;
  v18 = *(_QWORD *)v17;
  v19 = *(_QWORD *)(v17 + 16);
  v22 = *(_DWORD *)(v17 + 24);
  v21 = (int *)(v17 + 24);
  v20 = v22;
  v23 = a2;
  v24 = a4;
  v26 = a7[5];
  v25 = a7[6];
  v27 = a3;
  if (!a1 && *(_BYTE *)(v14 + ((unint64_t)a6 << 8) + a2 + 25864))
    goto LABEL_3;
  v28 = v14 + 82208;
  v29 = (_DWORD *)(v14 + 25536);
  v93 = (int32x4_t *)(v18 + ((uint64_t)a2 << 6));
  if (!*(_DWORD *)(v14 + 25592))
  {
    if (*(_DWORD *)(v14 + 82224))
    {
      if (a1 || *(_BYTE *)(v14 + 82228) != 1)
      {
        v31 = (_QWORD *)(v14 + 8304 * a1);
        v32 = (uint64_t)a2 << 6;
        v33 = (int32x4_t *)(v31[1025] + v32);
        v34 = 4 * num_4x4_blocks_wide_lookup[a5];
        v35 = (int16x8_t *)&v31[v10 + v34 * v11];
        v85 = v10;
        v75 = v19;
        v77 = v11;
        v73 = v20;
        v69 = a7[5];
        v71 = v24;
        v90 = a7[6];
        v87 = v27;
        v79 = (__int16 *)(v31[1026] + 2 * v23);
        v81 = &vp9_default_scan_orders + 3 * a6;
        v67 = (int32x4_t *)(v31[1024] + v32);
        v68 = v14 + 8304 * v16;
        v66 = (int16x8_t *)v33;
        if ((*(_BYTE *)(*(_QWORD *)(v14 + 25440) + 152) & 8) == 0)
        {
          switch(a6)
          {
            case 1u:
              vpx_fdct8x8_neon(v35, v33, v34);
              v58 = *(int16x8_t **)(v15 + 136 * v16 + 120);
              v59 = v66;
              v60 = 64;
              break;
            case 2u:
              vpx_fdct16x16_neon(v35, (uint64_t)v33, v34);
              v58 = *(int16x8_t **)(v15 + 136 * v16 + 120);
              v59 = v66;
              v60 = 256;
              break;
            case 3u:
              if (*(_DWORD *)(v14 + 82212))
                vpx_fdct32x32_rd_neon(v35, v33, v34);
              else
                vpx_fdct32x32_neon(v35, v33, v34);
              vp9_quantize_fp_32x32_neon(v66, 1024, v68, v67, v93, *(int16x8_t **)(v15 + 136 * v16 + 120), v79, (uint64_t)v81);
LABEL_67:
              v28 = v14 + 82208;
              v10 = v85;
              v19 = v75;
              v11 = v77;
              v20 = v73;
              v26 = v69;
              v24 = v71;
              v25 = v90;
              v27 = v87;
              goto LABEL_5;
            default:
              (*(void (**)(int16x8_t *))(v14 + 82408))(v35);
              vp9_quantize_fp_neon(v66, 16, v68, v67, v93, *(int16x8_t **)(v15 + 136 * v16 + 120), v79, (uint64_t)v81);
LABEL_62:
              v10 = v85;
              v27 = v87;
              v25 = v90;
              v26 = v69;
              v24 = v71;
              v20 = v73;
              v19 = v75;
              v11 = v77;
              v28 = v14 + 82208;
              goto LABEL_5;
          }
          vp9_quantize_fp_neon(v59, v60, v68, v67, v93, v58, v79, (uint64_t)v81);
          goto LABEL_62;
        }
        switch(a6)
        {
          case 1u:
            vpx_highbd_fdct8x8_neon((int16x4_t *)v35, v33, v34);
            v61 = *(int16x4_t **)(v15 + 136 * v16 + 120);
            v62 = (int32x4_t *)v66;
            v63 = 64;
            break;
          case 2u:
            vpx_highbd_fdct16x16_neon(v35, (int64x2_t *)v33, v34);
            v61 = *(int16x4_t **)(v15 + 136 * v16 + 120);
            v62 = (int32x4_t *)v66;
            v63 = 256;
            break;
          case 3u:
            if (*(_DWORD *)(v14 + 82212))
              vpx_highbd_fdct32x32_rd_neon((uint64_t)v35, (uint64_t)v33);
            else
              vpx_highbd_fdct32x32_neon((uint64_t)v35, (uint64_t)v33);
            vp9_highbd_quantize_fp_32x32_neon((int32x4_t *)v66, 1024, v68, v67, v93, *(int16x4_t **)(v15 + 136 * v16 + 120), v79, (uint64_t)v81);
            goto LABEL_67;
          default:
            (*(void (**)(int16x8_t *))(v14 + 82408))(v35);
            v61 = *(int16x4_t **)(v15 + 136 * v16 + 120);
            v62 = (int32x4_t *)v66;
            v65 = v67;
            v63 = 16;
            v64 = v14 + 8304 * v16;
            goto LABEL_61;
        }
        v65 = v67;
        v64 = v14 + 8304 * v16;
LABEL_61:
        vp9_highbd_quantize_fp_neon(v62, v63, v64, v65, v93, v61, v79, (uint64_t)v81);
        goto LABEL_62;
      }
LABEL_3:
      *(_WORD *)(*(_QWORD *)(v14 + 8304 * a1 + 8208) + 2 * a2) = 0;
      *(_BYTE *)(v25 + a3) = 0;
      *(_BYTE *)(v26 + v24) = 0;
      return;
    }
    if (max_txsize_lookup[a5] == a6)
    {
      if (*(_BYTE *)(v14 + (a2 >> (2 * a6)) + 4 * a1 + 82228) == 2)
      {
        v92 = a7[6];
        v89 = a3;
        v56 = v10;
        v76 = v19;
        v78 = a3;
        v84 = v14 + 82208;
        v74 = v20;
        v70 = a7[5];
        v72 = v24;
        vp9_xform_quant_dc(v14, a1, a2, a3, v10, a5, a6);
        goto LABEL_52;
      }
      if (*(_BYTE *)(v14 + (a2 >> (2 * a6)) + 4 * a1 + 82228))
        goto LABEL_3;
    }
    v92 = a7[6];
    v89 = a3;
    v56 = v10;
    v76 = v19;
    v78 = a3;
    v84 = v14 + 82208;
    v74 = v20;
    v70 = a7[5];
    v72 = v24;
    vp9_xform_quant(v14, a1, a2, a3, v10, a5, a6);
LABEL_52:
    v27 = v89;
    v25 = v92;
    v26 = v70;
    v24 = v72;
    v20 = v74;
    v19 = v76;
    v11 = v78;
    v28 = v84;
    v10 = v56;
  }
LABEL_5:
  if (!*(_DWORD *)v28 || *(_DWORD *)(v14 + 25592) && *(_DWORD *)(v14 + 25596))
  {
    v30 = *(_WORD *)(*(_QWORD *)(v14 + 8304 * v16 + 8208) + 2 * v23) != 0;
  }
  else
  {
    v86 = v10;
    if (*(_BYTE *)(v25 + v27))
      v36 = (*(_BYTE *)(v26 + v24) != 0) + 1;
    else
      v36 = *(_BYTE *)(v26 + v24) != 0;
    v37 = v14;
    v91 = v25;
    v38 = a1;
    v39 = a2;
    v88 = v27;
    v40 = a6;
    v41 = v11;
    v42 = v28;
    v82 = v7;
    v83 = v21;
    v80 = v23;
    v43 = a6;
    v44 = v16;
    v45 = (_DWORD *)(v14 + 25536);
    v46 = v19;
    v47 = v14;
    v48 = v20;
    v49 = v24;
    v50 = v26;
    v51 = vp9_optimize_b(v37, v38, v39, v40, v36);
    v10 = v86;
    v27 = v88;
    v25 = v91;
    v26 = v50;
    v24 = v49;
    v20 = v48;
    v14 = v47;
    v19 = v46;
    v29 = v45;
    v16 = v44;
    a6 = v43;
    v23 = v80;
    v7 = v82;
    v21 = v83;
    v28 = v42;
    v11 = v41;
    v30 = v51 > 0;
  }
  *(_BYTE *)(v25 + v27) = v30;
  *(_BYTE *)(v26 + v24) = v30;
  v52 = v14 + 8304 * v16;
  if (*(_WORD *)(*(_QWORD *)(v52 + 8208) + 2 * v23))
    *(_BYTE *)v7[7] = 0;
  if (!*(_DWORD *)(v28 + 8))
  {
    v53 = *(_QWORD *)(v52 + 8208);
    v54 = *(unsigned __int16 *)(v53 + 2 * v23);
    if (*(_WORD *)(v53 + 2 * v23))
    {
      v55 = v19 + 4 * (v10 + v20 * v11);
      if ((*(_BYTE *)(*(_QWORD *)(v14 + 25440) + 152) & 8) != 0)
      {
        v57 = (int16x8_t *)(2 * v55);
        switch(a6)
        {
          case 1u:
            vp9_highbd_idct8x8_add((int16x8_t *)v93, v57, *v21, v54, *v29);
            break;
          case 2u:
            vp9_highbd_idct16x16_add((int16x8_t *)v93, v57, *v21, v54, *v29);
            break;
          case 3u:
            vp9_highbd_idct32x32_add(v93->i32, v57, *v21, v54, *v29);
            break;
          default:
            (*(void (**)(int32x4_t *, int16x8_t *, _QWORD))(v28 + 216))(v93, v57, *v21);
            break;
        }
      }
      else
      {
        switch(a6)
        {
          case 1u:
            vp9_idct8x8_add(v93, (uint8x8_t *)v55, *v21, v54);
            break;
          case 2u:
            vp9_idct16x16_add((int16x8_t *)v93, v55, *v21, v54);
            break;
          case 3u:
            vp9_idct32x32_add((int16x8_t *)v93, v55, *v21, v54);
            break;
          default:
            (*(void (**)(int32x4_t *, uint64_t, _QWORD))(v28 + 208))(v93, v55, *v21);
            break;
        }
      }
    }
  }
}

void vp9_encode_block_intra(int a1, int a2, int a3, int a4, unsigned int a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  unsigned int v20;
  unsigned int v21;
  _UNKNOWN **v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int16x8_t v29;
  int16x8_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  BOOL *v34;
  BOOL *v35;
  signed int v36;
  int v37;
  uint64_t v38;
  unsigned __int16 *v39;
  int16x8_t *v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint16x8_t *v45;
  int v46;
  unint64_t v47;
  unint64_t j;
  int16x8_t *v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  uint16x8_t *v53;
  int v54;
  uint64_t v55;
  unint64_t i;
  unint64_t v57;
  int16x4_t *v58;
  int16x4_t *v59;
  int16x4_t *v60;
  int16x4_t v61;
  int16x4_t v62;
  int16x4_t v63;
  unint64_t v64;
  int16x4_t *v65;
  int16x4_t *v66;
  int16x4_t *v67;
  int16x4_t *v68;
  int16x4_t *v69;
  int16x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  unint64_t v73;
  int16x4_t *v74;
  int16x4_t *v75;
  int16x4_t *v76;
  int16x4_t *v77;
  int16x4_t *v78;
  int16x4_t v79;
  int16x4_t v80;
  int16x4_t v81;
  unint64_t v82;
  int16x4_t *v83;
  int16x4_t *v84;
  int16x4_t *v85;
  int16x4_t *v86;
  _QWORD *v87;
  int16x4_t v88;
  int16x4_t v89;
  int16x4_t v90;
  unint64_t v91;
  int16x4_t *v92;
  int16x4_t *v93;
  int16x4_t *v94;
  int16x4_t *v95;
  int16x4_t *v96;
  int16x4_t v97;
  int16x4_t v98;
  int16x4_t v99;
  unint64_t v100;
  int16x4_t *v101;
  int16x4_t *v102;
  int16x4_t *v103;
  int16x4_t *v104;
  int16x4_t *v105;
  int16x4_t v106;
  int16x4_t v107;
  int16x4_t v108;
  unint64_t v109;
  _QWORD *v110;
  int16x4_t *v111;
  int16x4_t *v112;
  int16x4_t v113;
  int16x4_t v114;
  int16x4_t v115;
  uint64_t v116;
  _DWORD *v117;
  uint64_t v118;
  int v119;
  int v120;
  uint64_t v121;
  int *v122;
  int v123;
  int v124;
  int v125;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  int16x4_t *v131;
  uint64_t v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  unsigned int v135;
  unsigned __int8 *v136;
  unsigned int v137;
  int v138;
  unsigned int v139;
  int v140;
  BOOL v141;
  BOOL v142;
  BOOL v143;
  BOOL v144;
  unsigned int v145;
  int v146;
  _DWORD *v147;
  uint64_t *v148;
  uint64_t *v149;
  char v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int16x8_t **v156;
  int32x4_t *v157;
  uint64_t v158;
  uint64_t v159;
  int32x4_t *v161;
  int v162;
  int v163;
  int32x4_t *v165;
  uint16x8_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t v171;
  int *v172;

  v11 = *a7;
  v172 = (int *)(*a7 + 25536);
  v12 = **(unsigned __int8 ***)(*a7 + 25360);
  v13 = *a7 + 8304 * a1;
  v14 = *a7 + 24912 + 136 * a1;
  v15 = b_width_log2_lookup[a5];
  v16 = *(_DWORD *)(v13 + 8224);
  v170 = *(int *)(v14 + 24);
  v171 = *(_QWORD *)(v14 + 16) + 4 * (a4 + (int)v170 * a3);
  v17 = *(_QWORD *)(v13 + 8216) + 4 * (a4 + v16 * a3);
  v167 = (4 << v15);
  v18 = a4 + v167 * a3;
  v154 = a5;
  if (a6)
  {
    v19 = v12 + 6;
    if (!a1)
      v19 = v12 + 1;
    v20 = *v19;
    if (a6 == 3)
    {
      v21 = 0;
      v22 = &off_24C0D6968;
    }
    else
    {
      if (a1 > 0 || *(_DWORD *)(*a7 + 25540) || (char)v12[8] > 0)
        v21 = 0;
      else
        v21 = intra_mode_to_tx_type_lookup[v12[1]];
      v22 = &vp9_scan_orders + 12 * a6 + 3 * v21;
    }
    goto LABEL_17;
  }
  v22 = &vp9_scan_orders;
  if (a1 > 0)
  {
    v21 = 0;
LABEL_16:
    v20 = v12[6];
    goto LABEL_17;
  }
  if (*(_DWORD *)(*a7 + 25540) || (char)v12[8] > 0)
  {
    v21 = 0;
    if (a1)
      goto LABEL_16;
  }
  else
  {
    v133 = v12 + 1;
    if (*v12 < 3u)
      v133 = &v12[12 * a2 + 20];
    v21 = intra_mode_to_tx_type_lookup[*v133];
    v22 = &vp9_scan_orders + 3 * v21;
    if (a1)
      goto LABEL_16;
  }
  v134 = v12 + 1;
  v135 = *v12;
  v136 = &v12[12 * a2 + 20];
  if (v135 >= 3)
    v136 = v134;
  v20 = *v136;
LABEL_17:
  v158 = (uint64_t)v22;
  v162 = v21;
  v23 = (uint64_t)a2 << 6;
  v24 = v17;
  v25 = *(_DWORD *)(v13 + 8224);
  v151 = v18;
  v153 = v11 + 24912 + 136 * a1;
  v166 = (uint16x8_t *)(v13 + 8 * v18);
  if (!*(_DWORD *)(*a7 + 82216))
  {
    v26 = *(_DWORD *)(*a7 + 82220);
    if (v26)
      v24 = v17;
    else
      v24 = v171;
    if (v26)
      v25 = *(_DWORD *)(v13 + 8224);
    else
      v25 = *(_DWORD *)(v14 + 24);
  }
  v168 = *a7 + 82212;
  v161 = (int32x4_t *)(*(_QWORD *)(v13 + 8200) + v23);
  v156 = (int16x8_t **)(v11 + 8304 * a1);
  v157 = (int32x4_t *)(*(_QWORD *)(v13 + 0x2000) + v23);
  v165 = (int32x4_t *)(*(_QWORD *)v14 + v23);
  v27 = *(_QWORD *)(v13 + 8208);
  v28 = *(_DWORD *)(*a7 + 25592);
  v163 = a4;
  v159 = v11 + 24912;
  vp9_predict_intra_block(v11 + 24912, v15, a6, v20, v24, v25, v171, v170, a4, a3, a1);
  if (v172[14])
  {
    v31 = a7;
    v32 = v27;
    if (v28)
      goto LABEL_26;
    goto LABEL_157;
  }
  v150 = v15;
  v42 = (4 << a6);
  if ((*(_BYTE *)(*(_QWORD *)(v11 + 25440) + 152) & 8) != 0)
  {
    v43 = 2 * v17;
    v44 = 2 * v171;
    if ((int)v42 < 16)
    {
      if ((int)v42 < 8)
      {
        v38 = v168;
        v31 = a7;
        v32 = v27;
        if ((int)v42 >= 4)
        {
          v57 = 0;
          v58 = (int16x4_t *)(2 * v17);
          v59 = (int16x4_t *)(2 * v171);
          v60 = (int16x4_t *)v166;
          do
          {
            v61 = *v58++;
            v62 = v61;
            v63 = *v59++;
            *v60++ = vsub_s16(v62, v63);
            v57 += 4;
          }
          while (v57 < v42);
          v64 = 0;
          v65 = (int16x4_t *)(v44 + 2 * v170);
          v66 = (int16x4_t *)(v43 + 2 * v16);
          v67 = v66;
          v68 = v65;
          v69 = (int16x4_t *)((char *)v166 + 2 * (int)v167);
          do
          {
            v70 = *v67++;
            v71 = v70;
            v72 = *v68++;
            *v69++ = vsub_s16(v71, v72);
            v64 += 4;
          }
          while (v64 < v42);
          v73 = 0;
          v74 = (int16x4_t *)((char *)v65 + 2 * v170);
          v75 = (int16x4_t *)((char *)v66 + 2 * v16);
          v76 = v75;
          v77 = v74;
          v78 = (int16x4_t *)((char *)v166 + 2 * (int)v167 + 2 * (int)v167);
          do
          {
            v79 = *v76++;
            v80 = v79;
            v81 = *v77++;
            *v78++ = vsub_s16(v80, v81);
            v73 += 4;
          }
          while (v73 < v42);
          v82 = 0;
          v83 = (int16x4_t *)((char *)v74 + 2 * v170);
          v84 = (int16x4_t *)((char *)v75 + 2 * v16);
          v85 = v84;
          v86 = v83;
          v87 = (uint64_t *)((char *)v166->i64 + 2 * (int)v167 + 2 * (int)v167 + 2 * (int)v167);
          do
          {
            v88 = *v85++;
            v89 = v88;
            v90 = *v86++;
            *(int16x4_t *)v30.i8 = v90;
            *(int16x4_t *)v29.i8 = vsub_s16(v89, v90);
            *v87++ = v29.i64[0];
            v82 += 4;
          }
          while (v82 < v42);
          if (a6)
          {
            v91 = 0;
            v92 = (int16x4_t *)((char *)v83 + 2 * v170);
            v93 = (int16x4_t *)((char *)v84 + 2 * v16);
            v94 = v93;
            v95 = v92;
            v96 = (int16x4_t *)((char *)v166 + 2 * (int)v167 + 2 * (int)v167 + 2 * (int)v167 + 2 * (int)v167);
            do
            {
              v97 = *v94++;
              v98 = v97;
              v99 = *v95++;
              *v96++ = vsub_s16(v98, v99);
              v91 += 4;
            }
            while (v91 < v42);
            v100 = 0;
            v101 = (int16x4_t *)((char *)v92 + 2 * v170);
            v102 = (int16x4_t *)((char *)v93 + 2 * v16);
            v103 = v102;
            v104 = v101;
            v105 = (int16x4_t *)((char *)v166
                               + 2 * (int)v167
                               + 2 * (int)v167
                               + 2 * (int)v167
                               + 2 * (int)v167
                               + 2 * (int)v167);
            do
            {
              v106 = *v103++;
              v107 = v106;
              v108 = *v104++;
              *v105++ = vsub_s16(v107, v108);
              v100 += 4;
            }
            while (v100 < v42);
            v109 = 0;
            v110 = (uint64_t *)((char *)v166->i64
                             + 2 * (int)v167
                             + 2 * (int)v167
                             + 2 * (int)v167
                             + 2 * (int)v167
                             + 2 * (int)v167
                             + 2 * (int)v167);
            v111 = (int16x4_t *)((char *)v101 + 2 * v170);
            v112 = (int16x4_t *)((char *)v102 + 2 * v16);
            do
            {
              v113 = *v112++;
              v114 = v113;
              v115 = *v111++;
              *(int16x4_t *)v30.i8 = v115;
              *(int16x4_t *)v29.i8 = vsub_s16(v114, v115);
              *v110++ = v29.i64[0];
              v109 += 4;
            }
            while (v109 < v42);
          }
        }
      }
      else
      {
        v53 = v166;
        v54 = 4 << a6;
        v38 = v168;
        v31 = a7;
        v32 = v27;
        do
        {
          v55 = 0;
          for (i = 0; i < v42; i += 8)
          {
            v30 = *(int16x8_t *)(v44 + v55 * 16);
            v29 = vsubq_s16(*(int16x8_t *)(v43 + v55 * 16), v30);
            v53[v55++] = (uint16x8_t)v29;
          }
          v53 = (uint16x8_t *)((char *)v53 + 2 * (int)v167);
          v44 += 2 * v170;
          v43 += 2 * v16;
          --v54;
        }
        while (v54);
      }
    }
    else
    {
      v45 = v166;
      v46 = 4 << a6;
      v38 = v168;
      v31 = a7;
      v32 = v27;
      do
      {
        v47 = 0;
        for (j = 0; j < v42; j += 16)
        {
          v29 = vsubq_s16(*(int16x8_t *)(v43 + v47), *(int16x8_t *)(v44 + v47));
          v30 = vsubq_s16(*(int16x8_t *)(v43 + v47 + 16), *(int16x8_t *)(v44 + v47 + 16));
          v49 = (int16x8_t *)&v45[v47 / 0x10];
          *v49 = v29;
          v49[1] = v30;
          v47 += 32;
        }
        v43 += 2 * v16;
        v44 += 2 * v170;
        v45 = (uint16x8_t *)((char *)v45 + 2 * (int)v167);
        --v46;
      }
      while (v46);
    }
  }
  else
  {
    vpx_subtract_block_neon(v42, 4 << a6, v166, (int)v167, (uint8x8_t *)v17, v16, (uint8x8_t *)v171, v170);
    v38 = v168;
    v31 = a7;
    v32 = v27;
  }
  v36 = *((_DWORD *)v31 + 2);
  if (!v36)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v37 = a2;
    v39 = (unsigned __int16 *)(v32 + 2 * a2);
    if ((*(_BYTE *)(*(_QWORD *)(v11 + 25440) + 152) & 8) == 0)
      goto LABEL_161;
    goto LABEL_27;
  }
  v116 = *v31;
  if (v36 != 3)
  {
    if (v36 != 2)
      goto LABEL_157;
    v29.i64[0] = v31[2];
    if (*(double *)v29.i64 <= 0.0)
      goto LABEL_157;
    v30.i64[0] = *(_QWORD *)(v116 + 25608);
    if (*(double *)v30.i64 <= *(double *)v29.i64)
      goto LABEL_157;
LABEL_26:
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v38 = v168;
    v37 = a2;
    v39 = (unsigned __int16 *)(v32 + 2 * a2);
    if ((*(_BYTE *)(*(_QWORD *)(v11 + 25440) + 152) & 8) != 0)
      goto LABEL_27;
LABEL_161:
    if (a6 != 1)
    {
      if (a6 != 2)
      {
        if (a6 == 3)
        {
          if (v172[14])
          {
            if (v33)
              goto LABEL_166;
          }
          else
          {
            if (*(_DWORD *)v38)
              vpx_fdct32x32_rd_neon((int16x8_t *)v166, v161, v167);
            else
              vpx_fdct32x32_neon((int16x8_t *)v166, v161, v167);
            vpx_quantize_b_32x32_neon((int16x8_t *)v161, v156, v157, v165, *(int16x8_t **)(v159 + 136 * a1 + 120), v39, v158);
            v37 = a2;
            if (v33)
            {
LABEL_166:
              v141 = (int)vp9_optimize_b(v11, a1, v37, 3u, v36) > 0;
              *v35 = v141;
              *v34 = v141;
              if (*(_DWORD *)(v38 + 4))
                goto LABEL_201;
              goto LABEL_196;
            }
          }
          if (*(_DWORD *)(v38 + 4))
            goto LABEL_201;
LABEL_196:
          if (!*v39)
            return;
          vp9_idct32x32_add((int16x8_t *)v165, v171, v170, *v39);
          goto LABEL_201;
        }
        if (v172[14])
        {
          if (v33)
            goto LABEL_178;
        }
        else
        {
          if (v162)
            vp9_fht4x4_neon((int16x4_t *)v166, v161, v167, v162, *(int16x4_t *)v29.i8);
          else
            (*(void (**)(uint16x8_t *, int32x4_t *, uint64_t))(v38 + 196))(v166, v161, v167);
          vpx_quantize_b_neon((int16x8_t *)v161, 16, v156, v157, v165, *(int16x8_t **)(v159 + 136 * a1 + 120), v39, v158);
          v37 = a2;
          if (v33)
          {
LABEL_178:
            v144 = (int)vp9_optimize_b(v11, a1, v37, a6, v36) > 0;
            *v35 = v144;
            *v34 = v144;
            if (*(_DWORD *)(v38 + 4))
              goto LABEL_201;
LABEL_204:
            if (!*v39)
              return;
            if (v162)
              vp9_iht4x4_16_add_neon((int16x8_t *)v165, (__int32 *)v171, v170, v162);
            else
              (*(void (**)(int32x4_t *, uint64_t, uint64_t))(v38 + 204))(v165, v171, v170);
            goto LABEL_201;
          }
        }
        if (*(_DWORD *)(v38 + 4))
          goto LABEL_201;
        goto LABEL_204;
      }
      if (v172[14])
      {
        if (v33)
          goto LABEL_174;
      }
      else
      {
        vp9_fht16x16_neon((int16x8_t *)v166, (uint64_t)v161, v167, v162);
        vpx_quantize_b_neon((int16x8_t *)v161, 256, v156, v157, v165, *(int16x8_t **)(v159 + 136 * a1 + 120), v39, v158);
        v37 = a2;
        if (v33)
        {
LABEL_174:
          v143 = (int)vp9_optimize_b(v11, a1, v37, 2u, v36) > 0;
          *v35 = v143;
          *v34 = v143;
          if (*(_DWORD *)(v38 + 4))
            goto LABEL_201;
          goto LABEL_189;
        }
      }
      if (*(_DWORD *)(v38 + 4))
        goto LABEL_201;
LABEL_189:
      if (!*v39)
        return;
      vp9_iht16x16_add(v162, (int16x8_t *)v165, v171, v170, *v39);
      goto LABEL_201;
    }
    if (v172[14])
    {
      if (v33)
        goto LABEL_170;
    }
    else
    {
      vp9_fht8x8_neon((int16x8_t *)v166, v161, v167, v162);
      vpx_quantize_b_neon((int16x8_t *)v161, 64, v156, v157, v165, *(int16x8_t **)(v159 + 136 * a1 + 120), v39, v158);
      v37 = a2;
      if (v33)
      {
LABEL_170:
        v142 = (int)vp9_optimize_b(v11, a1, v37, 1u, v36) > 0;
        *v35 = v142;
        *v34 = v142;
        if (*(_DWORD *)(v38 + 4))
          goto LABEL_201;
        goto LABEL_184;
      }
    }
    if (*(_DWORD *)(v38 + 4))
      goto LABEL_201;
LABEL_184:
    v145 = *v39;
    if (!*v39)
      return;
    if (v162)
    {
      vp9_iht8x8_64_add_neon((int16x8_t *)v165, (uint8x8_t *)v171, v170, v162);
    }
    else if (v145 == 1)
    {
      vpx_idct8x8_1_add_neon(v165->i16, (uint8x8_t *)v171, v170);
    }
    else if (v145 > 0xC)
    {
      vpx_idct8x8_64_add_neon((int16x8_t *)v165, (uint8x8_t *)v171, v170);
    }
    else
    {
      vpx_idct8x8_12_add_neon(v165, (uint8x8_t *)v171, v170);
    }
    goto LABEL_201;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v116 + 25440) + 152) & 8) == 0)
  {
    if (v31[4])
    {
      v117 = (_DWORD *)v31[3];
      if (v117)
      {
        v118 = txsize_to_bsize[a6];
        v119 = *(__int16 *)(*(_QWORD *)(v159 + 136 * a1 + 120) + 2) >> 3;
        v120 = num_4x4_blocks_wide_lookup[v118];
        LODWORD(v121) = num_4x4_blocks_high_lookup[v118];
        v148 = (uint64_t *)v31[4];
        if (!a6)
          goto LABEL_144;
        v122 = (int *)(v116 + 25404);
        v123 = v122[2];
        v124 = (*v122 >> (*(_DWORD *)(v153 + 8) + 5)) - v163 + num_4x4_blocks_wide_lookup[v154];
        v125 = (v123 >> (*(_DWORD *)(v153 + 12) + 5)) - a3 + num_4x4_blocks_high_lookup[v154];
        if (v124 < v120 || v125 < (int)v121)
        {
          v121 = v125 >= (int)v121 ? num_4x4_blocks_high_lookup[v118] : v125;
          v127 = v124 >= v120 ? num_4x4_blocks_wide_lookup[v118] : v124;
          v149 = v31;
          v147 = (_DWORD *)v31[3];
          v146 = *(__int16 *)(*(_QWORD *)(v159 + 136 * a1 + 120) + 2) >> 3;
          if ((int)v121 < 1 || (int)v127 < 1)
          {
            v130 = 0;
          }
          else
          {
            v128 = 0;
            v129 = 0;
            v130 = 0;
            v152 = v11 + 8304 * a1 + 8 * v151;
            v155 = v127;
            do
            {
              v131 = (int16x4_t *)(v152 + 2 * v128);
              v132 = v127;
              do
              {
                v130 += vpx_sum_squares_2d_i16_neon(v131++, v167, 4);
                --v132;
              }
              while (v132);
              ++v129;
              v128 += 16 << v150;
              v127 = v155;
            }
            while (v129 != v121);
          }
          v140 = 4 * v127;
          v31 = v149;
          v117 = v147;
          v119 = v146;
        }
        else
        {
LABEL_144:
          v140 = 4 * v120;
          v130 = vpx_sum_squares_2d_i16_neon((int16x4_t *)v166, v167, 4 * v120);
        }
        *v148 = v130;
        *v117 = 1;
        *(double *)v29.i64 = (double)v130;
        *(double *)v30.i64 = *((double *)v31 + 2) * (double)(v119 * v119 * (uint64_t)v140 * 4 * (int)v121);
        if (*(double *)v30.i64 < (double)v130)
          goto LABEL_26;
      }
    }
  }
LABEL_157:
  v34 = (BOOL *)(v31[5] + v163);
  v35 = (BOOL *)(v31[6] + a3);
  if (*v35)
    v36 = *v34 + 1;
  else
    v36 = *v34;
  v33 = 1;
  v38 = v168;
  v37 = a2;
  v39 = (unsigned __int16 *)(v32 + 2 * a2);
  if ((*(_BYTE *)(*(_QWORD *)(v11 + 25440) + 152) & 8) == 0)
    goto LABEL_161;
LABEL_27:
  v40 = (int16x8_t *)(2 * v171);
  if (a6 == 1)
  {
    if (v172[14])
    {
      if (v33)
        goto LABEL_44;
    }
    else
    {
      if (v162)
        vp9_highbd_fht8x8_neon((int16x4_t *)v166, v161, v167, v162);
      else
        vpx_highbd_fdct8x8_neon((int16x4_t *)v166, v161, v167);
      vpx_highbd_quantize_b_neon(v161, 64, (int16x4_t **)v156, (int16x8_t *)v157, v165, *(int16x4_t **)(v159 + 136 * a1 + 120), v39, v158);
      v37 = a2;
      if (v33)
      {
LABEL_44:
        v50 = (int)vp9_optimize_b(v11, a1, v37, 1u, v36) > 0;
        *v35 = v50;
        *v34 = v50;
        if (*(_DWORD *)(v38 + 4))
          goto LABEL_201;
        goto LABEL_129;
      }
    }
    if (*(_DWORD *)(v38 + 4))
      goto LABEL_201;
LABEL_129:
    v139 = *v39;
    if (!*v39)
      return;
    if (v162)
    {
      vp9_highbd_iht8x8_64_add_neon((int16x8_t *)v165, v40, v170, v162, *v172);
    }
    else if (v139 == 1)
    {
      vpx_highbd_idct8x8_1_add_neon(v165->i32, v40, v170, *v172);
    }
    else if (v139 > 0xC)
    {
      vpx_highbd_idct8x8_64_add_neon((int16x8_t *)v165, v40, v170, *v172);
    }
    else
    {
      vpx_highbd_idct8x8_12_add_neon(v165, v40, v170, *v172);
    }
    goto LABEL_201;
  }
  if (a6 == 2)
  {
    if (v172[14])
    {
      if (v33)
        goto LABEL_48;
    }
    else
    {
      if (v162)
        vp9_highbd_fht16x16_neon((int16x8_t *)v166, (uint64_t)v161, v167, v162);
      else
        vpx_highbd_fdct16x16_neon((int16x8_t *)v166, (int64x2_t *)v161, v167);
      vpx_highbd_quantize_b_neon(v161, 256, (int16x4_t **)v156, (int16x8_t *)v157, v165, *(int16x4_t **)(v159 + 136 * a1 + 120), v39, v158);
      v37 = a2;
      if (v33)
      {
LABEL_48:
        v51 = (int)vp9_optimize_b(v11, a1, v37, 2u, v36) > 0;
        *v35 = v51;
        *v34 = v51;
        if (*(_DWORD *)(v38 + 4))
          goto LABEL_201;
        goto LABEL_135;
      }
    }
    if (*(_DWORD *)(v38 + 4))
      goto LABEL_201;
LABEL_135:
    if (!*v39)
      return;
    vp9_highbd_iht16x16_add(v162, (int16x8_t *)v165, v40, v170, *v39, *v172);
    goto LABEL_201;
  }
  if (a6 != 3)
  {
    if (v172[14])
    {
      if (v33)
        goto LABEL_52;
    }
    else
    {
      if (v162)
        vp9_highbd_fht4x4_neon((int16x4_t *)v166, v161, v167, v162, v29, v30);
      else
        (*(void (**)(uint16x8_t *, int32x4_t *, uint64_t))(v38 + 196))(v166, v161, v167);
      vpx_highbd_quantize_b_neon(v161, 16, (int16x4_t **)v156, (int16x8_t *)v157, v165, *(int16x4_t **)(v159 + 136 * a1 + 120), v39, v158);
      v37 = a2;
      if (v33)
      {
LABEL_52:
        v52 = (int)vp9_optimize_b(v11, a1, v37, a6, v36) > 0;
        *v35 = v52;
        *v34 = v52;
        if (*(_DWORD *)(v38 + 4))
          goto LABEL_201;
        goto LABEL_140;
      }
    }
    if (*(_DWORD *)(v38 + 4))
      goto LABEL_201;
LABEL_140:
    if (!*v39)
      return;
    if (v162)
      vp9_highbd_iht4x4_16_add_neon((int16x8_t *)v165, v40->i64, v170, v162, *v172);
    else
      (*(void (**)(int32x4_t *, int16x8_t *, uint64_t))(v38 + 212))(v165, v40, v170);
    goto LABEL_201;
  }
  if (v172[14])
  {
    if (v33)
      goto LABEL_32;
  }
  else
  {
    if (*(_DWORD *)v38)
      vpx_highbd_fdct32x32_rd_neon((uint64_t)v166, (uint64_t)v161);
    else
      vpx_highbd_fdct32x32_neon((uint64_t)v166, (uint64_t)v161);
    vpx_highbd_quantize_b_32x32_neon(v161, (int16x4_t **)v156, (int16x8_t *)v157, v165, *(int16x4_t **)(v159 + 136 * a1 + 120), v39, v158);
    v37 = a2;
    if (v33)
    {
LABEL_32:
      v41 = (int)vp9_optimize_b(v11, a1, v37, 3u, v36) > 0;
      *v35 = v41;
      *v34 = v41;
      if (!*(_DWORD *)(v38 + 4))
        goto LABEL_123;
      goto LABEL_201;
    }
  }
  if (!*(_DWORD *)(v38 + 4))
  {
LABEL_123:
    v137 = *v39;
    if (!*v39)
      return;
    v138 = *v172;
    if (v137 == 1)
    {
      vpx_highbd_idct32x32_1_add_neon(v165->i32, v40, v170, v138);
    }
    else if (v137 > 0x22)
    {
      if (v137 > 0x87)
        vpx_highbd_idct32x32_1024_add_neon((uint64_t)v165, (uint64_t)v40);
      else
        vpx_highbd_idct32x32_135_add_neon((uint64_t)v165, (uint64_t)v40);
    }
    else
    {
      vpx_highbd_idct32x32_34_add_neon((uint64_t)v165, v40, v170, v138);
    }
  }
LABEL_201:
  if (*v39)
    *(_BYTE *)v31[7] = 0;
}

uint64_t vp9_write_nmv_probs(uint64_t a1, int a2, uint64_t a3, unsigned int *a4)
{
  _BYTE *v6;
  uint64_t v7;
  char v8;
  char v9;
  _BYTE *v10;
  unsigned int *v11;
  uint64_t result;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = *(_BYTE **)(a1 + 4904);
  convert_distribution(0, (uint64_t)vp9_mv_joint_tree, (uint64_t)&v14, (uint64_t)a4);
  update_mv(a3, v14, v15, v6 + 1970);
  update_mv(a3, v16, v17, v6 + 1971);
  update_mv(a3, v18, v19, v6 + 1972);
  v7 = 0;
  v8 = 1;
  do
  {
    v9 = v8;
    v10 = &v6[33 * v7];
    v11 = &a4[51 * v7];
    update_mv(a3, v11[4], v11[5], v10 + 1973);
    convert_distribution(0, (uint64_t)vp9_mv_class_tree, (uint64_t)&v14, (uint64_t)(v11 + 6));
    update_mv(a3, v14, v15, v10 + 1974);
    update_mv(a3, v16, v17, v10 + 1975);
    update_mv(a3, v18, v19, v10 + 1976);
    update_mv(a3, v20, v21, v10 + 1977);
    update_mv(a3, v22, v23, v10 + 1978);
    update_mv(a3, v24, v25, v10 + 1979);
    update_mv(a3, v26, v27, v10 + 1980);
    update_mv(a3, v28, v29, v10 + 1981);
    update_mv(a3, v30, v31, v10 + 1982);
    update_mv(a3, v32, v33, v10 + 1983);
    convert_distribution(0, (uint64_t)&vp9_mv_class0_tree, (uint64_t)&v14, (uint64_t)(v11 + 17));
    update_mv(a3, v14, v15, v10 + 1984);
    update_mv(a3, v11[19], v11[20], v10 + 1985);
    update_mv(a3, v11[21], v11[22], v10 + 1986);
    update_mv(a3, v11[23], v11[24], v10 + 1987);
    update_mv(a3, v11[25], v11[26], v10 + 1988);
    update_mv(a3, v11[27], v11[28], v10 + 1989);
    update_mv(a3, v11[29], v11[30], v10 + 1990);
    update_mv(a3, v11[31], v11[32], v10 + 1991);
    update_mv(a3, v11[33], v11[34], v10 + 1992);
    update_mv(a3, v11[35], v11[36], v10 + 1993);
    update_mv(a3, v11[37], v11[38], v10 + 1994);
    v8 = 0;
    v7 = 1;
  }
  while ((v9 & 1) != 0);
  convert_distribution(0, (uint64_t)vp9_mv_fp_tree, (uint64_t)&v14, (uint64_t)(a4 + 39));
  update_mv(a3, v14, v15, v6 + 1995);
  update_mv(a3, v16, v17, v6 + 1996);
  update_mv(a3, v18, v19, v6 + 1997);
  convert_distribution(0, (uint64_t)vp9_mv_fp_tree, (uint64_t)&v14, (uint64_t)(a4 + 43));
  update_mv(a3, v14, v15, v6 + 1998);
  update_mv(a3, v16, v17, v6 + 1999);
  update_mv(a3, v18, v19, v6 + 2000);
  convert_distribution(0, (uint64_t)vp9_mv_fp_tree, (uint64_t)&v14, (uint64_t)(a4 + 47));
  update_mv(a3, v14, v15, v6 + 2001);
  update_mv(a3, v16, v17, v6 + 2002);
  update_mv(a3, v18, v19, v6 + 2003);
  convert_distribution(0, (uint64_t)vp9_mv_fp_tree, (uint64_t)&v14, (uint64_t)(a4 + 90));
  update_mv(a3, v14, v15, v6 + 2028);
  update_mv(a3, v16, v17, v6 + 2029);
  update_mv(a3, v18, v19, v6 + 2030);
  convert_distribution(0, (uint64_t)vp9_mv_fp_tree, (uint64_t)&v14, (uint64_t)(a4 + 94));
  update_mv(a3, v14, v15, v6 + 2031);
  update_mv(a3, v16, v17, v6 + 2032);
  update_mv(a3, v18, v19, v6 + 2033);
  convert_distribution(0, (uint64_t)vp9_mv_fp_tree, (uint64_t)&v14, (uint64_t)(a4 + 98));
  update_mv(a3, v14, v15, v6 + 2034);
  update_mv(a3, v16, v17, v6 + 2035);
  result = update_mv(a3, v18, v19, v6 + 2036);
  if (a2)
  {
    update_mv(a3, a4[51], a4[52], v6 + 2004);
    update_mv(a3, a4[53], a4[54], v6 + 2005);
    update_mv(a3, a4[102], a4[103], v6 + 2037);
    return update_mv(a3, a4[104], a4[105], v6 + 2038);
  }
  return result;
}

uint64_t update_mv(uint64_t result, unsigned int a2, unsigned int a3, _BYTE *a4)
{
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;

  if (a3 + a2)
  {
    v4 = (((a3 + a2) >> 1) + ((unint64_t)a2 << 8)) / (a3 + a2);
    v5 = v4 | ((255 - v4) >> 23);
  }
  else
  {
    LOBYTE(v5) = 0x80;
  }
  v6 = vp9_prob_cost[*a4] * (unint64_t)a2
     + vp9_prob_cost[256 - *a4] * (unint64_t)a3
     + 12;
  v7 = vp9_prob_cost[v5 | 1] * (unint64_t)a2
     + vp9_prob_cost[256 - (v5 | 1u)] * (unint64_t)a3
     + 6656;
  v8 = *(_DWORD *)(result + 4);
  v9 = *(_DWORD *)(result + 8);
  v10 = (252 * v8 - 252) >> 8;
  v11 = v8 - (v10 + 1);
  if (v6 <= v7)
    v12 = v10 + 1;
  else
    v12 = v11;
  if (v6 > v7)
    v13 = v10 + 1;
  else
    v13 = 0;
  v14 = v13 + *(_DWORD *)result;
  v15 = vpx_norm[v12];
  v16 = v9 + v15;
  if (v9 + v15 >= 0)
  {
    if (*(_DWORD *)(result + 12))
      goto LABEL_24;
    if (((v14 << ~(_BYTE)v9) & 0x80000000) != 0)
    {
      LODWORD(v19) = *(_DWORD *)(result + 16);
      v20 = v19 - 1;
      if ((int)v19 >= 1)
      {
        while (1)
        {
          v19 = (v19 - 1);
          v21 = *(_QWORD *)(result + 24);
          if (*(unsigned __int8 *)(v21 + v19) != 255)
            break;
          *(_BYTE *)(v21 + v19) = 0;
          if ((int)v19 <= 0)
          {
            v20 = -1;
            goto LABEL_22;
          }
        }
        v20 = v19;
      }
LABEL_22:
      ++*(_BYTE *)(*(_QWORD *)(result + 24) + v20);
      v17 = *(unsigned int *)(result + 16);
      if (v17 < *(_DWORD *)(result + 20))
        goto LABEL_14;
    }
    else
    {
      v17 = *(unsigned int *)(result + 16);
      if (v17 < *(_DWORD *)(result + 20))
      {
LABEL_14:
        v18 = *(_QWORD *)(result + 24);
        *(_DWORD *)(result + 16) = v17 + 1;
        *(_BYTE *)(v18 + v17) = v14 >> (v9 + 24);
        goto LABEL_24;
      }
    }
    *(_DWORD *)(result + 12) = 1;
LABEL_24:
    *(_DWORD *)(result + 4) = v12 << v15;
    *(_DWORD *)(result + 8) = v16 - 8;
    *(_DWORD *)result = ((v14 << -(char)v9) & 0xFFFFFF) << v16;
    if (v6 > v7)
      goto LABEL_25;
    return result;
  }
  *(_DWORD *)(result + 4) = v12 << v15;
  *(_DWORD *)(result + 8) = v9 + v15;
  *(_DWORD *)result = v14 << v15;
  if (v6 > v7)
  {
LABEL_25:
    *a4 = v5 | 1;
    v22 = v5 >> 1;
    v24 = *(_DWORD *)(result + 4);
    v23 = *(_DWORD *)(result + 8);
    v25 = *(_DWORD *)result;
    v26 = 6;
    do
    {
      while (1)
      {
        v28 = v26;
        v29 = ((v24 << 7) - 128) >> 8;
        v30 = v24 - (v29 + 1);
        if (((1 << v28) & v22) != 0)
        {
          v31 = v29 + 1;
        }
        else
        {
          v30 = v29 + 1;
          v31 = 0;
        }
        v32 = v31 + v25;
        v33 = vpx_norm[v30];
        v34 = v23 + v33;
        if (v23 + v33 >= 0)
          break;
        v23 += v33;
        v24 = v30 << v33;
        *(_DWORD *)(result + 4) = v24;
        *(_DWORD *)(result + 8) = v34;
        v25 = v32 << v33;
        *(_DWORD *)result = v25;
        v26 = v28 - 1;
        if (!v28)
          return result;
      }
      if (!*(_DWORD *)(result + 12))
      {
        LODWORD(v35) = *(_DWORD *)(result + 16);
        if (((v32 << ~(_BYTE)v23) & 0x80000000) != 0)
        {
          v36 = v35 - 1;
          if ((int)v35 >= 1)
          {
            while (1)
            {
              v35 = (v35 - 1);
              v37 = *(_QWORD *)(result + 24);
              if (*(unsigned __int8 *)(v37 + v35) != 255)
                break;
              *(_BYTE *)(v37 + v35) = 0;
              if ((int)v35 <= 0)
              {
                v36 = -1;
                goto LABEL_43;
              }
            }
            v36 = v35;
          }
LABEL_43:
          ++*(_BYTE *)(*(_QWORD *)(result + 24) + v36);
          LODWORD(v35) = *(_DWORD *)(result + 16);
          if (v35 < *(_DWORD *)(result + 20))
          {
LABEL_44:
            v38 = *(_QWORD *)(result + 24);
            *(_DWORD *)(result + 16) = v35 + 1;
            *(_BYTE *)(v38 + v35) = v32 >> (v23 + 24);
            goto LABEL_27;
          }
        }
        else if (v35 < *(_DWORD *)(result + 20))
        {
          goto LABEL_44;
        }
        *(_DWORD *)(result + 12) = 1;
      }
LABEL_27:
      v27 = (v32 << -(char)v23) & 0xFFFFFF;
      v23 = v34 - 8;
      v24 = v30 << v33;
      *(_DWORD *)(result + 4) = v24;
      *(_DWORD *)(result + 8) = v34 - 8;
      v25 = v27 << v34;
      *(_DWORD *)result = v25;
      v26 = v28 - 1;
    }
    while (v28);
  }
  return result;
}

