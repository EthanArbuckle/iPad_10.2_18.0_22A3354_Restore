BOOL ED25519_verify(const void *a1, size_t a2, int8x16_t *a3, unsigned int *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int128 v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  signed __int128 v41;
  unsigned __int128 v42;
  uint64_t v43;
  unsigned __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int128 v87;
  unsigned __int128 v88;
  signed __int128 v89;
  unsigned __int128 v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  unint64_t v118;
  unint64_t v119;
  unsigned __int128 v120;
  uint64_t v121;
  int8x16_t v122;
  unint64_t v123;
  unint64_t v124;
  signed __int128 v125;
  unsigned __int128 v126;
  unsigned __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  int8x16_t v144;
  uint64_t v145;
  __int128 v146;
  unint64_t v147;
  unint64_t v148;
  signed __int128 v149;
  unsigned __int128 v150;
  uint64_t v151;
  unsigned __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unsigned __int128 v205;
  uint64_t v206;
  unsigned __int128 v207;
  unsigned __int128 v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  unint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  unsigned __int128 v248;
  uint64_t v249;
  unsigned __int128 v250;
  unsigned __int128 v251;
  unint64_t v252;
  unint64_t v253;
  signed __int128 v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unsigned __int128 v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unsigned __int128 v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  unsigned __int128 v279;
  unsigned __int128 v280;
  unsigned __int128 v281;
  signed __int128 v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  signed __int128 v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  unsigned __int128 v295;
  signed __int128 v296;
  uint64_t v297;
  unsigned __int128 v298;
  unsigned __int128 v299;
  int8x16_t v300;
  unint64_t v301;
  unint64_t v302;
  signed __int128 v303;
  unsigned __int128 v304;
  unsigned __int128 v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __int128 v313;
  uint64_t v314;
  uint64_t v315;
  __int128 v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  int v333;
  unint64_t v334;
  uint64_t v335;
  unint64_t v336;
  uint64_t v337;
  signed __int128 v338;
  unsigned __int128 v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  __int128 v351;
  uint64_t v352;
  uint64_t v353;
  __int128 v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  __int128 v358;
  uint64_t v359;
  uint64_t v360;
  __int128 v361;
  unint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  signed __int128 v366;
  unsigned __int128 v367;
  unsigned __int128 v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  __int128 v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  __int128 v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  __int128 v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  unint64_t v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  signed __int128 v401;
  unsigned __int128 v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  __int128 v414;
  uint64_t v415;
  uint64_t v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  __int128 v421;
  uint64_t v422;
  uint64_t v423;
  __int128 v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  unint64_t v428;
  signed __int128 v429;
  unsigned __int128 v430;
  unsigned __int128 v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  __int128 v439;
  uint64_t v440;
  uint64_t v441;
  __int128 v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  __int128 v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  __int128 v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  uint64_t v458;
  int v459;
  unint64_t v460;
  uint64_t v461;
  unint64_t v462;
  uint64_t v463;
  signed __int128 v464;
  unsigned __int128 v465;
  unint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  __int128 v477;
  uint64_t v478;
  uint64_t v479;
  __int128 v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  __int128 v484;
  uint64_t v485;
  uint64_t v486;
  __int128 v487;
  unint64_t v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  signed __int128 v492;
  unsigned __int128 v493;
  unsigned __int128 v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  __int128 v502;
  uint64_t v503;
  uint64_t v504;
  __int128 v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  __int128 v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  __int128 v515;
  uint64_t v516;
  unint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  int v522;
  unint64_t v523;
  uint64_t v524;
  unint64_t v525;
  uint64_t v526;
  signed __int128 v527;
  unsigned __int128 v528;
  unint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  __int128 v540;
  uint64_t v541;
  uint64_t v542;
  __int128 v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  __int128 v547;
  uint64_t v548;
  uint64_t v549;
  __int128 v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  unint64_t v554;
  signed __int128 v555;
  unsigned __int128 v556;
  unsigned __int128 v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  __int128 v565;
  uint64_t v566;
  uint64_t v567;
  __int128 v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  __int128 v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  __int128 v578;
  uint64_t v579;
  unint64_t v580;
  uint64_t v581;
  unint64_t v582;
  uint64_t v583;
  uint64_t v584;
  int v585;
  unint64_t v586;
  uint64_t v587;
  unint64_t v588;
  uint64_t v589;
  signed __int128 v590;
  unsigned __int128 v591;
  unint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  __int128 v603;
  uint64_t v604;
  uint64_t v605;
  __int128 v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  __int128 v610;
  uint64_t v611;
  uint64_t v612;
  __int128 v613;
  unint64_t v614;
  uint64_t v615;
  uint64_t v616;
  unint64_t v617;
  signed __int128 v618;
  unsigned __int128 v619;
  unsigned __int128 v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  __int128 v628;
  uint64_t v629;
  uint64_t v630;
  __int128 v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  __int128 v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  __int128 v641;
  uint64_t v642;
  unint64_t v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  int v648;
  unint64_t v649;
  uint64_t v650;
  unint64_t v651;
  uint64_t v652;
  signed __int128 v653;
  unsigned __int128 v654;
  unint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  __int128 v666;
  uint64_t v667;
  uint64_t v668;
  __int128 v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  __int128 v673;
  uint64_t v674;
  uint64_t v675;
  __int128 v676;
  unint64_t v677;
  uint64_t v678;
  uint64_t v679;
  unint64_t v680;
  signed __int128 v681;
  unsigned __int128 v682;
  uint64_t v683;
  unsigned __int128 v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  __int128 v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  __int128 v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  __int128 v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  __int128 v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  unint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t v716;
  uint64_t v717;
  unint64_t v718;
  unsigned __int128 v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v722;
  unint64_t v723;
  uint64_t v724;
  uint64_t v725;
  unsigned __int128 v726;
  uint64_t v727;
  unsigned __int128 v728;
  uint64_t v729;
  __int128 v730;
  unint64_t v731;
  unint64_t v732;
  unsigned __int128 v733;
  uint64_t v734;
  int8x16_t v735;
  unint64_t v736;
  unint64_t v737;
  signed __int128 v738;
  unsigned __int128 v739;
  unsigned __int128 v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  __int128 v748;
  uint64_t v749;
  uint64_t v750;
  __int128 v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  __int128 v755;
  uint64_t v756;
  int8x16_t v757;
  uint64_t v758;
  __int128 v759;
  unint64_t v760;
  unint64_t v761;
  __int128 v762;
  unint64_t v763;
  __int128 v764;
  uint64_t v765;
  unint64_t v766;
  unint64_t v767;
  unint64_t v768;
  unint64_t v769;
  unint64_t v770;
  unint64_t v771;
  int8x16_t v772;
  unint64_t v773;
  unint64_t v774;
  unint64_t v775;
  unint64_t v776;
  unint64_t v777;
  unint64_t v778;
  int8x16_t v779;
  unint64_t v780;
  unint64_t v781;
  unint64_t v782;
  unint64_t v783;
  unint64_t v784;
  unint64_t v785;
  unint64_t v786;
  unint64_t v787;
  unint64_t v788;
  unint64_t v789;
  unint64_t v790;
  unint64_t v791;
  unint64_t v792;
  unint64_t v793;
  unint64_t v794;
  unint64_t v795;
  unint64_t v796;
  unint64_t v797;
  int8x16_t v798;
  int8x16_t v799;
  int8x16_t v800;
  uint64_t v802;
  const char *v803;
  int8x8_t v804;
  const char *v805;
  uint8x8_t v806;
  uint8x8_t v807;
  uint8x8_t v808;
  int8x8_t *v809;
  unint64_t v810;
  __int8 *v811;
  uint64_t v812;
  int v813;
  int v814;
  int v815;
  int v816;
  int v817;
  unint64_t v818;
  int v819;
  int v820;
  int v821;
  uint64_t v822;
  unint64_t v823;
  int v824;
  int v825;
  int v826;
  unint64_t v827;
  int v828;
  int v829;
  int v830;
  unint64_t v831;
  int v832;
  int v833;
  int v834;
  unint64_t v835;
  int v836;
  int v837;
  int v838;
  uint64_t v839;
  int8x8_t v840;
  const char *v841;
  const char *v842;
  uint8x8_t v843;
  uint8x8_t v844;
  uint8x8_t v845;
  int8x8_t *v846;
  unint64_t v847;
  char *v848;
  uint64_t v849;
  int v850;
  int v851;
  int v852;
  int v853;
  int v854;
  unint64_t v855;
  int v856;
  int v857;
  int v858;
  uint64_t v859;
  unint64_t v860;
  int v861;
  int v862;
  int v863;
  unint64_t v864;
  int v865;
  int v866;
  int v867;
  unint64_t v868;
  int v869;
  int v870;
  int v871;
  unint64_t v872;
  int v873;
  int v874;
  int v875;
  unsigned int v876;
  uint64_t v877;
  int v878;
  unint64_t v880;
  unint64_t *v881;
  unint64_t v882;
  unint64_t v883;
  unint64_t v884;
  unint64_t v885;
  unint64_t v886;
  unint64_t v887;
  uint64_t v888;
  uint64_t v889;
  unint64_t *v890;
  unint64_t v891;
  unint64_t v892;
  unint64_t v893;
  unint64_t v894;
  unint64_t v895;
  unint64_t v896;
  uint64_t v897;
  uint64_t v898;
  uint64_t v903;
  int8x16_t v904;
  uint64_t v905;
  int8x16_t v906;
  uint64_t v907;
  int8x16_t v908;
  int8x16_t v909;
  __int128 v910;
  __int128 v911;
  __int128 v912;
  __int128 v913;
  __int128 v914;
  _OWORD v915[3];
  __int128 v916;
  __int128 v917;
  _OWORD v918[6];
  __int128 v919;
  __int128 v920;
  _OWORD v921[5];
  _OWORD v922[5];
  _OWORD v923[3];
  __int128 v924;
  __int128 v925;
  __int128 v926;
  __int128 v927;
  __int128 v928;
  __int128 v929;
  __int128 v930;
  __int128 v931;
  __int128 v932;
  uint64_t v933;
  __int128 v934;
  __int128 v935;
  uint64_t v936;
  __int128 v937;
  __int128 v938;
  uint64_t v939;
  __int128 v940;
  __int128 v941;
  uint64_t v942;
  __int128 v943;
  __int128 v944;
  uint64_t v945;
  __int128 v946;
  __int128 v947;
  uint64_t v948;
  _QWORD v949[8];
  SHA512_CTX c;
  _BYTE v951[32];
  int8x16_t v952;
  int8x16_t v953;
  __int128 v954;
  __int128 v955;
  __int128 v956;
  __int128 v957;
  __int128 v958;
  _OWORD v959[3];
  __int128 v960;
  _BYTE v961[24];
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  uint64_t v965;
  uint64_t v966;
  __int128 v967;
  __int128 v968;
  uint64_t v969;
  uint64_t v970;
  unint64_t v971[10];
  __int128 v972;
  __int128 v973;
  uint64_t v974;
  uint64_t v975;
  unint64_t v976[10];
  __int128 v977;
  __int128 v978;
  uint64_t v979;
  uint64_t v980;
  unint64_t v981[10];
  __int128 v982;
  __int128 v983;
  uint64_t v984;
  uint64_t v985;
  unint64_t v986[10];
  __int128 v987;
  __int128 v988;
  uint64_t v989;
  uint64_t v990;
  unint64_t v991[10];
  __int128 v992;
  __int128 v993;
  uint64_t v994;
  uint64_t v995;
  unint64_t v996[10];
  __int128 v997;
  __int128 v998;
  uint64_t v999;
  _QWORD v1000[15];
  __int128 v1001;
  __int128 v1002;
  uint64_t v1003;
  uint64_t v1004;
  __int128 v1005;
  __int128 v1006;
  uint64_t v1007;
  int8x16_t v1008[16];
  uint64_t v1009;

  v1009 = *MEMORY[0x24BDAC8D0];
  if (a3[3].u8[15] > 0x1Fu)
    return 0;
  memset(&v918[3], 0, 48);
  memset(v918, 0, 48);
  v4 = *((unsigned __int8 *)a4 + 6);
  v5 = *((unsigned __int8 *)a4 + 12);
  v6 = *((unsigned __int8 *)a4 + 13);
  v7 = *((unsigned __int8 *)a4 + 14);
  v8 = *((unsigned __int8 *)a4 + 15);
  v9 = a4[4];
  v10 = *((unsigned __int8 *)a4 + 20);
  v11 = *((unsigned __int8 *)a4 + 21);
  v12 = *(unsigned int *)((char *)a4 + 22);
  v13 = ((unint64_t)*((unsigned __int8 *)a4 + 11) << 37) & 0xFFF81FFFFFFFFFFFLL | ((v5 & 0x3F) << 45) | ((unint64_t)*((unsigned __int8 *)a4 + 10) << 29) | ((unint64_t)*((unsigned __int8 *)a4 + 9) << 21) | ((unint64_t)*((unsigned __int8 *)a4 + 8) << 13) | (32 * *((unsigned __int8 *)a4 + 7)) | (v4 >> 3);
  v14 = ((unint64_t)*((unsigned __int8 *)a4 + 27) << 12) & 0xFFF80000000FFFFFLL | ((unint64_t)(a4[7] & 0x7FFFFFFF) << 20) | (16 * *((unsigned __int8 *)a4 + 26)) | (v12 >> 28);
  *((_QWORD *)&v918[0] + 1) = ((unint64_t)*((unsigned __int8 *)a4 + 5) << 40) & 0xFFF8FFFFFFFFFFFFLL | ((v4 & 7) << 48) | *a4 | ((unint64_t)*((unsigned __int8 *)a4 + 4) << 32);
  *(_QWORD *)&v918[1] = v13;
  *((_QWORD *)&v918[1] + 1) = (v8 << 18) & 0xFFF8000003FFFFFFLL | ((v9 & 0x1FFFFFF) << 26) | (v7 << 10) | (4 * v6) | (v5 >> 6);
  *(_QWORD *)&v918[2] = (v11 << 15) & 0xFFF80000007FFFFFLL | ((v12 & 0xFFFFFFF) << 23) | (v10 << 7) | (v9 >> 25);
  *((_QWORD *)&v918[2] + 1) = v14;
  *(_QWORD *)&v918[3] = 1;
  v15 = 38 * *(_QWORD *)&v918[2] * *((_QWORD *)&v918[1] + 1)
      + *((_QWORD *)&v918[0] + 1) * *((_QWORD *)&v918[0] + 1)
      + 38 * v14 * v13;
  v16 = (unint64_t)(2 * *(_QWORD *)&v918[2]) * (unsigned __int128)v13
      + *((unint64_t *)&v918[1] + 1) * (unsigned __int128)*((unint64_t *)&v918[1] + 1)
      + 2 * v14 * (unsigned __int128)*((unint64_t *)&v918[0] + 1);
  v17 = ((unint64_t)(2 * *((_QWORD *)&v918[1] + 1)) * (unsigned __int128)v13) >> 64;
  v18 = 19 * *(_QWORD *)&v918[2] * *(_QWORD *)&v918[2]
      + 2 * v13 * *((_QWORD *)&v918[0] + 1)
      + 38 * v14 * *((_QWORD *)&v918[1] + 1)
      + (((unint64_t)(38 * *(_QWORD *)&v918[2]) * (unsigned __int128)*((unint64_t *)&v918[1] + 1)
        + *((unint64_t *)&v918[0] + 1) * (unsigned __int128)*((unint64_t *)&v918[0] + 1)
        + 38 * v14 * (unsigned __int128)v13) >> 51);
  v19 = 2 * *((_QWORD *)&v918[1] + 1) * v13;
  v20 = ((unint64_t)(2 * *((_QWORD *)&v918[1] + 1)) * (unsigned __int128)*((unint64_t *)&v918[0] + 1)
       + v13 * (unsigned __int128)v13
       + 38 * v14 * (unsigned __int128)*(unint64_t *)&v918[2]
       + (((unint64_t)(19 * *(_QWORD *)&v918[2]) * (unsigned __int128)*(unint64_t *)&v918[2]
         + 2 * v13 * (unsigned __int128)*((unint64_t *)&v918[0] + 1)
         + 38 * v14 * (unsigned __int128)*((unint64_t *)&v918[1] + 1)
         + (((unint64_t)(38 * *(_QWORD *)&v918[2]) * (unsigned __int128)*((unint64_t *)&v918[1] + 1)
           + *((unint64_t *)&v918[0] + 1) * (unsigned __int128)*((unint64_t *)&v918[0] + 1)
           + 38 * v14 * (unsigned __int128)v13) >> 51)) >> 51)) >> 64;
  v21 = 2 * *((_QWORD *)&v918[1] + 1) * *((_QWORD *)&v918[0] + 1)
      + v13 * v13
      + 38 * v14 * *(_QWORD *)&v918[2]
      + (((unint64_t)(19 * *(_QWORD *)&v918[2]) * (unsigned __int128)*(unint64_t *)&v918[2]
        + 2 * v13 * (unsigned __int128)*((unint64_t *)&v918[0] + 1)
        + 38 * v14 * (unsigned __int128)*((unint64_t *)&v918[1] + 1)
        + (((unint64_t)(38 * *(_QWORD *)&v918[2]) * (unsigned __int128)*((unint64_t *)&v918[1] + 1)
          + *((unint64_t *)&v918[0] + 1) * (unsigned __int128)*((unint64_t *)&v918[0] + 1)
          + 38 * v14 * (unsigned __int128)v13) >> 51)) >> 51);
  v22 = (unint64_t)(2 * *(_QWORD *)&v918[2]) * (unsigned __int128)*((unint64_t *)&v918[0] + 1)
      + __PAIR128__(v17, v19)
      + 19 * v14 * (unsigned __int128)v14;
  v23 = (__int128)__PAIR128__(v20, v21) >> 51;
  *((_QWORD *)&v25 + 1) = (v22 + (__PAIR128__(v20, v21) >> 51)) >> 64;
  *(_QWORD *)&v25 = v22 + v23;
  v24 = v25 >> 51;
  v919 = 0u;
  v920 = 0u;
  v916 = 0u;
  v917 = 0u;
  memset(v921, 0, 40);
  *((_QWORD *)&v25 + 1) = (v16 + ((unsigned __int128)v25 >> 51)) >> 64;
  *(_QWORD *)&v25 = v16 + v24;
  v26 = (v15 & 0x7FFFFFFFFFFFFLL) + 19 * (v25 >> 51);
  v27 = (v22 + v23) & 0x7FFFFFFFFFFFFLL;
  v28 = (v18 & 0x7FFFFFFFFFFFFLL) + (v26 >> 51);
  v29 = v26 & 0x7FFFFFFFFFFFFLL;
  v30 = (v21 & 0x7FFFFFFFFFFFFLL) + (v28 >> 51);
  v31 = v28 & 0x7FFFFFFFFFFFFLL;
  v952.i64[0] = v26 & 0x7FFFFFFFFFFFFLL;
  v952.i64[1] = v28 & 0x7FFFFFFFFFFFFLL;
  v32 = (v16 + v24) & 0x7FFFFFFFFFFFFLL;
  v953.i64[0] = v30;
  v953.i64[1] = v27;
  *(_QWORD *)&v954 = v32;
  fe_mul_impl((uint64_t)v921, (unint64_t *)&v952, d);
  v33 = v31 + ((unint64_t)(v29 + 0xFFFFFFFFFFFD9) >> 51) + 0xFFFFFFFFFFFFELL;
  v34 = v30 + (v33 >> 51) + 0xFFFFFFFFFFFFELL;
  v35 = v27 + (v34 >> 51) + 0xFFFFFFFFFFFFELL;
  v36 = v32 + (v35 >> 51) + 0xFFFFFFFFFFFFELL;
  v37 = ((v29 + 0xFFFFFFFFFFFD9) & 0x7FFFFFFFFFFFFLL) + 19 * (v36 >> 51);
  v38 = (v33 & 0x7FFFFFFFFFFFFLL) + (v37 >> 51);
  v39 = v37 & 0x7FFFFFFFFFFFFLL;
  c.h[0] = v37 & 0x7FFFFFFFFFFFFLL;
  v40 = v38 & 0x7FFFFFFFFFFFFLL;
  c.h[1] = v38 & 0x7FFFFFFFFFFFFLL;
  v907 = (v34 & 0x7FFFFFFFFFFFFLL) + (v38 >> 51);
  c.h[2] = v907;
  v905 = v35 & 0x7FFFFFFFFFFFFLL;
  c.h[3] = v35 & 0x7FFFFFFFFFFFFLL;
  v903 = v36 & 0x7FFFFFFFFFFFFLL;
  c.h[4] = v36 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)&v923[0] = *(_QWORD *)&v921[0] + 1;
  *(_OWORD *)((char *)v923 + 8) = *(_OWORD *)((char *)v921 + 8);
  *(_OWORD *)((char *)&v923[1] + 8) = *(_OWORD *)((char *)&v921[1] + 8);
  fe_mul_impl((uint64_t)&v952, c.h, (unint64_t *)v923);
  v41 = v952.u64[1] * (unsigned __int128)(unint64_t)(38 * v954)
      + v953.u64[0] * (unsigned __int128)(unint64_t)(38 * v953.i64[1])
      + v952.u64[0] * (unsigned __int128)v952.u64[0];
  v43 = v41 >> 51;
  v42 = v952.u64[1] * (unsigned __int128)(unint64_t)(2 * v953.i64[1])
      + v953.u64[0] * (unsigned __int128)v953.u64[0]
      + v952.u64[0] * (unsigned __int128)(unint64_t)(2 * v954);
  v44 = v952.u64[1] * (unsigned __int128)(unint64_t)(2 * v953.i64[0])
      + (unint64_t)(19 * v954) * (unsigned __int128)(unint64_t)v954
      + v952.u64[0] * (unsigned __int128)(unint64_t)(2 * v953.i64[1]);
  v45 = (v952.u64[1] * (unsigned __int128)v952.u64[1]
       + v953.u64[1] * (unsigned __int128)(unint64_t)(38 * v954)
       + v952.u64[0] * (unsigned __int128)(unint64_t)(2 * v953.i64[0])) >> 64;
  v46 = v952.i64[1] * v952.i64[1] + v953.i64[1] * 38 * v954 + v952.i64[0] * 2 * v953.i64[0];
  v48 = (v953.u64[0] * (unsigned __int128)(unint64_t)(38 * v954)
       + (unint64_t)(19 * v953.i64[1]) * (unsigned __int128)v953.u64[1]
       + v952.u64[0] * (unsigned __int128)(unint64_t)(2 * v952.i64[1])) >> 64;
  v47 = v953.i64[0] * 38 * v954 + 19 * v953.i64[1] * v953.i64[1] + v952.i64[0] * 2 * v952.i64[1];
  v49 = __CFADD__(v47, v43);
  v50 = v47 + v43;
  if (v49)
    ++v48;
  *((_QWORD *)&v52 + 1) = v48;
  *(_QWORD *)&v52 = v50;
  v51 = v52 >> 51;
  v53 = v50 & 0x7FFFFFFFFFFFFLL;
  v49 = __CFADD__(v46, v51);
  v54 = v46 + v51;
  if (v49)
    ++v45;
  *((_QWORD *)&v56 + 1) = v45;
  *(_QWORD *)&v56 = v54;
  v55 = v56 >> 51;
  v57 = v44 + v55;
  if (__CFADD__((_QWORD)v44, v55))
    v58 = *((_QWORD *)&v44 + 1) + 1;
  else
    v58 = (v952.u64[1] * (unsigned __int128)(unint64_t)(2 * v953.i64[0])
         + (unint64_t)(19 * v954) * (unsigned __int128)(unint64_t)v954
         + v952.u64[0] * (unsigned __int128)(unint64_t)(2 * v953.i64[1])) >> 64;
  *((_QWORD *)&v60 + 1) = v58;
  *(_QWORD *)&v60 = v57;
  v59 = v60 >> 51;
  v61 = v54 & 0x7FFFFFFFFFFFFLL;
  v62 = v57 & 0x7FFFFFFFFFFFFLL;
  v49 = __CFADD__((_QWORD)v42, v59);
  v63 = v42 + v59;
  if (v49)
    v64 = *((_QWORD *)&v42 + 1) + 1;
  else
    v64 = (v952.u64[1] * (unsigned __int128)(unint64_t)(2 * v953.i64[1])
         + v953.u64[0] * (unsigned __int128)v953.u64[0]
         + v952.u64[0] * (unsigned __int128)(unint64_t)(2 * v954)) >> 64;
  *((_QWORD *)&v65 + 1) = v64;
  *(_QWORD *)&v65 = v63;
  v66 = (v41 & 0x7FFFFFFFFFFFFLL) + 19 * (v65 >> 51);
  v67 = v66 & 0x7FFFFFFFFFFFFLL;
  v68 = v53 + (v66 >> 51);
  *(_QWORD *)&v960 = v67;
  *((_QWORD *)&v960 + 1) = v68 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)v961 = v61 + (v68 >> 51);
  *(_QWORD *)&v961[8] = v62;
  *(_QWORD *)&v961[16] = v63 & 0x7FFFFFFFFFFFFLL;
  v69 = 19 * (v63 & 0x7FFFFFFFFFFFFLL);
  v70 = 38 * (v63 & 0x7FFFFFFFFFFFFLL);
  v71 = 2 * (v63 & 0x7FFFFFFFFFFFFLL);
  v72 = 2 * (v68 & 0x7FFFFFFFFFFFFLL);
  v73 = ((v63 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v69) >> 64;
  v74 = (v63 & 0x7FFFFFFFFFFFFLL) * v69;
  v75 = ((v68 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(2 * v62)) >> 64;
  v76 = (v68 & 0x7FFFFFFFFFFFFLL) * 2 * v62;
  v77 = ((unint64_t)v67 * (unsigned __int128)(unint64_t)v71) >> 64;
  v78 = v67 * v71;
  v79 = ((unint64_t)v67 * (unsigned __int128)(unint64_t)(2 * v62)) >> 64;
  v80 = v67 * 2 * v62;
  v81 = (__int128)((v68 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v70
                 + (unint64_t)v67 * (unsigned __int128)(unint64_t)v67
                 + *(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * v62)) >> 51;
  v82 = ((v68 & 0x7FFFFFFFFFFFFLL) * v70 + v67 * v67 + *(_QWORD *)v961 * 38 * v62) & 0x7FFFFFFFFFFFFLL;
  v83 = *((unint64_t *)&v960 + 1) * (unsigned __int128)*((unint64_t *)&v960 + 1)
      + (unint64_t)v62 * (unsigned __int128)(unint64_t)v70
      + (unint64_t)(2 * *(_QWORD *)v961) * (unsigned __int128)(unint64_t)v67;
  v85 = (*(unint64_t *)v961 * (unsigned __int128)(unint64_t)v70
       + (unint64_t)v62 * (unsigned __int128)(unint64_t)(19 * v62)
       + (unint64_t)v72 * (unsigned __int128)(unint64_t)v67) >> 64;
  v84 = *(_QWORD *)v961 * v70 + v62 * 19 * v62 + v72 * v67;
  v49 = __CFADD__(v84, v81);
  v86 = v84 + v81;
  if (v49)
    ++v85;
  *((_QWORD *)&v87 + 1) = v85;
  *(_QWORD *)&v87 = v86;
  v88 = v83 + (v87 >> 51);
  v89 = __PAIR128__(v79, v80)
      + __PAIR128__(v73, v74)
      + (unint64_t)(2 * *(_QWORD *)v961) * (unsigned __int128)(v68 & 0x7FFFFFFFFFFFFLL)
      + (v88 >> 51);
  v90 = __PAIR128__(v75, v76)
      + __PAIR128__(v77, v78)
      + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961;
  v91 = (v90 + (v89 >> 51)) & 0x7FFFFFFFFFFFFLL;
  v92 = v82 + 19 * ((__int128)(v90 + ((unsigned __int128)v89 >> 51)) >> 51);
  v93 = v92 & 0x7FFFFFFFFFFFFLL;
  v94 = (v86 & 0x7FFFFFFFFFFFFLL) + (v92 >> 51);
  v95 = v94 & 0x7FFFFFFFFFFFFLL;
  v96 = (v88 & 0x7FFFFFFFFFFFFLL) + (v94 >> 51);
  v97 = 38 * v91;
  v98 = 2 * v91;
  v99 = (v91 * (unsigned __int128)(19 * v91)) >> 64;
  v100 = v91 * 19 * v91;
  v101 = ((unint64_t)v95 * (unsigned __int128)(2 * ((unint64_t)v89 & 0x7FFFFFFFFFFFFLL))) >> 64;
  v102 = v95 * 2 * (v89 & 0x7FFFFFFFFFFFFLL);
  v103 = ((unint64_t)(2 * v96) * (unsigned __int128)(unint64_t)v95) >> 64;
  v104 = ((unint64_t)v93 * (unsigned __int128)(unint64_t)v98) >> 64;
  v105 = v93 * v98;
  v108 = ((unint64_t)v93 * (unsigned __int128)(2 * ((unint64_t)v89 & 0x7FFFFFFFFFFFFLL))) >> 64;
  v109 = v93 * 2 * (v89 & 0x7FFFFFFFFFFFFLL);
  v106 = ((unint64_t)v95 * (unsigned __int128)(unint64_t)v97
        + (unint64_t)v93 * (unsigned __int128)(unint64_t)v93
        + (unint64_t)v96 * (unsigned __int128)(38 * ((unint64_t)v89 & 0x7FFFFFFFFFFFFLL))) >> 64;
  v107 = v95 * v97 + v93 * v93 + v96 * 38 * (v89 & 0x7FFFFFFFFFFFFLL);
  v110 = 2 * v95 * v93;
  v111 = 2 * v96 * v95;
  v112 = (unint64_t)v95 * (unsigned __int128)(unint64_t)v95
       + (v89 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v97
       + (unint64_t)(2 * v96) * (unsigned __int128)(unint64_t)v93;
  v114 = ((unint64_t)v96 * (unsigned __int128)(unint64_t)v97
        + (v89 & 0x7FFFFFFFFFFFFLL) * 19 * ((unint64_t)v89 & 0x7FFFFFFFFFFFFLL)
        + (unint64_t)(2 * v95) * (unsigned __int128)(unint64_t)v93) >> 64;
  v113 = v96 * v97 + (v89 & 0x7FFFFFFFFFFFFLL) * 19 * (v89 & 0x7FFFFFFFFFFFFLL) + v110;
  v115 = (__int128)__PAIR128__(v106, v107) >> 51;
  v49 = __CFADD__(v113, v115);
  v116 = v113 + v115;
  if (v49)
    ++v114;
  *((_QWORD *)&v117 + 1) = v114;
  *(_QWORD *)&v117 = v116;
  v118 = (v112 + ((unsigned __int128)v117 >> 51)) >> 64;
  v119 = v112 + ((unsigned __int128)v117 >> 51);
  v120 = __PAIR128__(v101, v102)
       + __PAIR128__(v104, v105)
       + (unint64_t)v96 * (unsigned __int128)(unint64_t)v96;
  *((_QWORD *)&v117 + 1) = (__PAIR128__(v108, v109)
                          + __PAIR128__(v99, v100)
                          + __PAIR128__(v103, v111)
                          + ((v112 + ((unsigned __int128)v117 >> 51)) >> 51)) >> 64;
  *(_QWORD *)&v117 = v109 + v100 + v111 + ((__int128)__PAIR128__(v118, v119) >> 51);
  v121 = v117 >> 51;
  v122.i64[0] = v117;
  *((_QWORD *)&v117 + 1) = (v120 + ((unsigned __int128)v117 >> 51)) >> 64;
  *(_QWORD *)&v117 = v120 + v121;
  v122.i64[1] = v120 + v121;
  v908 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL);
  v123 = (v107 & 0x7FFFFFFFFFFFFLL) + 19 * (v117 >> 51);
  v124 = (v116 & 0x7FFFFFFFFFFFFLL) + (v123 >> 51);
  v1008[0].i64[0] = v123 & 0x7FFFFFFFFFFFFLL;
  v1008[0].i64[1] = v124 & 0x7FFFFFFFFFFFFLL;
  v1008[1].i64[0] = (v119 & 0x7FFFFFFFFFFFFLL) + (v124 >> 51);
  *(int8x16_t *)((char *)&v1008[1] + 8) = vandq_s8(v122, v908);
  fe_mul_impl((uint64_t)v1008, (unint64_t *)&v952, (unint64_t *)v1008);
  fe_mul_impl((uint64_t)&v960, (unint64_t *)&v960, (unint64_t *)v1008);
  v125 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
       + *(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[8])
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)v960;
  v126 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
       + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16]);
  v127 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
       + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8]);
  v128 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)*((unint64_t *)&v960 + 1)
        + *(unint64_t *)&v961[8] * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)) >> 64;
  v129 = *((_QWORD *)&v960 + 1) * *((_QWORD *)&v960 + 1)
       + *(_QWORD *)&v961[8] * 38 * *(_QWORD *)&v961[16]
       + v960 * 2 * *(_QWORD *)v961;
  v131 = (*(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)(19 * *(_QWORD *)&v961[8]) * (unsigned __int128)*(unint64_t *)&v961[8]
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v960 + 1))) >> 64;
  v130 = *(_QWORD *)v961 * 38 * *(_QWORD *)&v961[16]
       + 19 * *(_QWORD *)&v961[8] * *(_QWORD *)&v961[8]
       + v960 * 2 * *((_QWORD *)&v960 + 1);
  v132 = v125 >> 51;
  v49 = __CFADD__(v130, v132);
  v133 = v130 + v132;
  if (v49)
    ++v131;
  *((_QWORD *)&v135 + 1) = v131;
  *(_QWORD *)&v135 = v133;
  v134 = v135 >> 51;
  v49 = __CFADD__(v129, v134);
  v136 = v129 + v134;
  if (v49)
    ++v128;
  *((_QWORD *)&v138 + 1) = v128;
  *(_QWORD *)&v138 = v136;
  v137 = v138 >> 51;
  v139 = v127 + v137;
  if (__CFADD__((_QWORD)v127, v137))
    v140 = *((_QWORD *)&v127 + 1) + 1;
  else
    v140 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
          + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])) >> 64;
  *((_QWORD *)&v142 + 1) = v140;
  *(_QWORD *)&v142 = v139;
  v141 = v142 >> 51;
  v49 = __CFADD__((_QWORD)v126, v141);
  v143 = v126 + v141;
  v144.i64[0] = v139;
  if (v49)
    v145 = *((_QWORD *)&v126 + 1) + 1;
  else
    v145 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
          + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16])) >> 64;
  *((_QWORD *)&v146 + 1) = v145;
  *(_QWORD *)&v146 = v143;
  v144.i64[1] = v143;
  v147 = (v125 & 0x7FFFFFFFFFFFFLL) + 19 * (v146 >> 51);
  v148 = (v133 & 0x7FFFFFFFFFFFFLL) + (v147 >> 51);
  *(_QWORD *)&v960 = v147 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v960 + 1) = v148 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)v961 = (v136 & 0x7FFFFFFFFFFFFLL) + (v148 >> 51);
  *(int8x16_t *)&v961[8] = vandq_s8(v144, v908);
  fe_mul_impl((uint64_t)&v960, (unint64_t *)v1008, (unint64_t *)&v960);
  v149 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
       + *(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[8])
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)v960;
  v151 = v149 >> 51;
  v150 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
       + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16]);
  v152 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
       + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8]);
  v153 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)*((unint64_t *)&v960 + 1)
        + *(unint64_t *)&v961[8] * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)) >> 64;
  v154 = *((_QWORD *)&v960 + 1) * *((_QWORD *)&v960 + 1)
       + *(_QWORD *)&v961[8] * 38 * *(_QWORD *)&v961[16]
       + v960 * 2 * *(_QWORD *)v961;
  v156 = (*(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)(19 * *(_QWORD *)&v961[8]) * (unsigned __int128)*(unint64_t *)&v961[8]
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v960 + 1))) >> 64;
  v155 = *(_QWORD *)v961 * 38 * *(_QWORD *)&v961[16]
       + 19 * *(_QWORD *)&v961[8] * *(_QWORD *)&v961[8]
       + v960 * 2 * *((_QWORD *)&v960 + 1);
  v49 = __CFADD__(v155, v151);
  v157 = v155 + v151;
  if (v49)
    ++v156;
  *((_QWORD *)&v159 + 1) = v156;
  *(_QWORD *)&v159 = v157;
  v158 = v159 >> 51;
  v160 = v157 & 0x7FFFFFFFFFFFFLL;
  v49 = __CFADD__(v154, v158);
  v161 = v154 + v158;
  if (v49)
    ++v153;
  *((_QWORD *)&v163 + 1) = v153;
  *(_QWORD *)&v163 = v161;
  v162 = v163 >> 51;
  v164 = v161 & 0x7FFFFFFFFFFFFLL;
  v165 = v152 + v162;
  if (__CFADD__((_QWORD)v152, v162))
    v166 = *((_QWORD *)&v152 + 1) + 1;
  else
    v166 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
          + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])) >> 64;
  *((_QWORD *)&v168 + 1) = v166;
  *(_QWORD *)&v168 = v165;
  v167 = v168 >> 51;
  v169 = v165 & 0x7FFFFFFFFFFFFLL;
  v49 = __CFADD__((_QWORD)v150, v167);
  v170 = v150 + v167;
  if (v49)
    v171 = *((_QWORD *)&v150 + 1) + 1;
  else
    v171 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
          + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16])) >> 64;
  *((_QWORD *)&v172 + 1) = v171;
  *(_QWORD *)&v172 = v170;
  v173 = v170 & 0x7FFFFFFFFFFFFLL;
  v174 = (v149 & 0x7FFFFFFFFFFFFLL) + 19 * (v172 >> 51);
  v175 = v174 & 0x7FFFFFFFFFFFFLL;
  v176 = v160 + (v174 >> 51);
  v177 = v176 & 0x7FFFFFFFFFFFFLL;
  v178 = v164 + (v176 >> 51);
  v179 = 38 * v173;
  v180 = 2 * v173;
  v181 = ((unint64_t)v173 * (unsigned __int128)(unint64_t)(19 * v173)) >> 64;
  v182 = v173 * 19 * v173;
  v183 = ((unint64_t)v177 * (unsigned __int128)(unint64_t)(2 * v169)) >> 64;
  v184 = v177 * 2 * v169;
  v185 = ((unint64_t)(2 * v178) * (unsigned __int128)(unint64_t)v177) >> 64;
  v186 = ((unint64_t)v175 * (unsigned __int128)(unint64_t)v180) >> 64;
  v187 = v175 * v180;
  v190 = ((unint64_t)v175 * (unsigned __int128)(unint64_t)(2 * v169)) >> 64;
  v191 = v175 * 2 * v169;
  v188 = ((unint64_t)v177 * (unsigned __int128)(unint64_t)v179
        + (unint64_t)v175 * (unsigned __int128)(unint64_t)v175
        + (unint64_t)v178 * (unsigned __int128)(unint64_t)(38 * v169)) >> 64;
  v189 = v177 * v179 + v175 * v175 + v178 * 38 * v169;
  v192 = ((unint64_t)(2 * v178) * (unsigned __int128)(unint64_t)v175) >> 64;
  v193 = ((unint64_t)(2 * v177) * (unsigned __int128)(unint64_t)v175) >> 64;
  v194 = 2 * v177 * v175;
  v195 = 2 * v178 * v175;
  v196 = 2 * v178 * v177;
  v198 = v177 * v177 + v169 * v179;
  v197 = ((unint64_t)v177 * (unsigned __int128)(unint64_t)v177
        + (unint64_t)v169 * (unsigned __int128)(unint64_t)v179) >> 64;
  v199 = ((unint64_t)v178 * (unsigned __int128)(unint64_t)v179) >> 64;
  v200 = v178 * v179;
  v201 = ((unint64_t)v178 * (unsigned __int128)(unint64_t)v178) >> 64;
  v202 = v178 * v178;
  v203 = (__int128)__PAIR128__(v188, v189) >> 51;
  v204 = v189 & 0x7FFFFFFFFFFFFLL;
  v205 = __PAIR128__(v197, v198) + __PAIR128__(v192, v195);
  v207 = __PAIR128__(v199, v200)
       + (unint64_t)v169 * (unsigned __int128)(unint64_t)(19 * v169)
       + __PAIR128__(v193, v194);
  v206 = *((_QWORD *)&v207 + 1);
  if (__CFADD__((_QWORD)v207, v203))
    v206 = *((_QWORD *)&v207 + 1) + 1;
  *((_QWORD *)&v208 + 1) = v206;
  *(_QWORD *)&v208 = v207 + v203;
  v210 = (__PAIR128__(v190, v191) + __PAIR128__(v181, v182) + __PAIR128__(v185, v196) + ((v205 + (v208 >> 51)) >> 51)) >> 64;
  v209 = v191 + v182 + v196 + ((v205 + (v208 >> 51)) >> 51);
  v211 = v210 >> 51;
  v212 = (__int128)__PAIR128__(v210, v209) >> 51;
  v209 &= 0x7FFFFFFFFFFFFuLL;
  v214 = v184 + v187 + v202 + v212;
  v213 = (__PAIR128__(v183, v184) + __PAIR128__(v186, v187) + __PAIR128__(v201, v202) + __PAIR128__(v211, v212)) >> 64;
  v215 = v214 & 0x7FFFFFFFFFFFFLL;
  v216 = v204 + 19 * ((__int128)__PAIR128__(v213, v214) >> 51);
  v217 = v216 & 0x7FFFFFFFFFFFFLL;
  v218 = ((v207 + v203) & 0x7FFFFFFFFFFFFLL) + (v216 >> 51);
  v219 = v218 & 0x7FFFFFFFFFFFFLL;
  v220 = ((v205 + (v208 >> 51)) & 0x7FFFFFFFFFFFFLL) + (v218 >> 51);
  v221 = 38 * (v214 & 0x7FFFFFFFFFFFFLL);
  v222 = 2 * (v214 & 0x7FFFFFFFFFFFFLL);
  v223 = ((unint64_t)v215 * (unsigned __int128)(unint64_t)(19 * v215)) >> 64;
  v224 = v215 * 19 * v215;
  v225 = ((unint64_t)v219 * (unsigned __int128)(2 * v209)) >> 64;
  v226 = v219 * 2 * v209;
  v227 = ((unint64_t)(2 * v220) * (unsigned __int128)(unint64_t)v219) >> 64;
  v228 = ((unint64_t)v217 * (unsigned __int128)(unint64_t)v222) >> 64;
  v229 = v217 * v222;
  v232 = ((unint64_t)v217 * (unsigned __int128)(2 * v209)) >> 64;
  v233 = v217 * 2 * v209;
  v230 = ((unint64_t)v219 * (unsigned __int128)(unint64_t)v221
        + (unint64_t)v217 * (unsigned __int128)(unint64_t)v217
        + (unint64_t)v220 * (unsigned __int128)(38 * v209)) >> 64;
  v231 = v219 * v221 + v217 * v217 + v220 * 38 * v209;
  v234 = ((unint64_t)(2 * v220) * (unsigned __int128)(unint64_t)v217) >> 64;
  v237 = ((unint64_t)(2 * v219) * (unsigned __int128)(unint64_t)v217) >> 64;
  v238 = 2 * v219 * v217;
  v239 = 2 * v220 * v217;
  v240 = 2 * v220 * v219;
  v236 = ((unint64_t)v219 * (unsigned __int128)(unint64_t)v219
        + v209 * (unsigned __int128)(unint64_t)v221) >> 64;
  v235 = v219 * v219 + v209 * v221;
  v241 = ((unint64_t)v220 * (unsigned __int128)(unint64_t)v221) >> 64;
  v242 = v220 * v221;
  v243 = v235;
  v244 = ((unint64_t)v220 * (unsigned __int128)(unint64_t)v220) >> 64;
  v245 = v220 * v220;
  v246 = (__int128)__PAIR128__(v230, v231) >> 51;
  v247 = v231 & 0x7FFFFFFFFFFFFLL;
  v248 = __PAIR128__(v236, v243) + __PAIR128__(v234, v239);
  v250 = __PAIR128__(v241, v242) + v209 * (unsigned __int128)(19 * v209) + __PAIR128__(v237, v238);
  v249 = *((_QWORD *)&v250 + 1);
  if (__CFADD__((_QWORD)v250, v246))
    v249 = *((_QWORD *)&v250 + 1) + 1;
  *((_QWORD *)&v251 + 1) = v249;
  *(_QWORD *)&v251 = v250 + v246;
  v252 = (v248 + (v251 >> 51)) >> 64;
  v253 = v248 + (v251 >> 51);
  *((_QWORD *)&v251 + 1) = (__PAIR128__(v232, v233)
                          + __PAIR128__(v223, v224)
                          + __PAIR128__(v227, v240)
                          + ((v248 + (v251 >> 51)) >> 51)) >> 64;
  *(_QWORD *)&v251 = v233 + v224 + v240 + ((__int128)__PAIR128__(v252, v253) >> 51);
  v254 = __PAIR128__(v225, v226) + __PAIR128__(v228, v229) + __PAIR128__(v244, v245) + (v251 >> 51);
  v255 = v254 & 0x7FFFFFFFFFFFFLL;
  v256 = v247 + 19 * (v254 >> 51);
  v257 = v256 & 0x7FFFFFFFFFFFFLL;
  v258 = ((v250 + v246) & 0x7FFFFFFFFFFFFLL) + (v256 >> 51);
  v259 = v258 & 0x7FFFFFFFFFFFFLL;
  v260 = (v253 & 0x7FFFFFFFFFFFFLL) + (v258 >> 51);
  v261 = 38 * (v254 & 0x7FFFFFFFFFFFFLL);
  v262 = 2 * (v254 & 0x7FFFFFFFFFFFFLL);
  v263 = ((unint64_t)v255 * (unsigned __int128)(unint64_t)(19 * v255)) >> 64;
  v264 = v255 * 19 * v255;
  v265 = v260 * 38 * (v251 & 0x7FFFFFFFFFFFFLL);
  v266 = ((unint64_t)v259 * (unsigned __int128)(2 * ((unint64_t)v251 & 0x7FFFFFFFFFFFFLL))) >> 64;
  v267 = v259 * 2 * (v251 & 0x7FFFFFFFFFFFFLL);
  v268 = (unint64_t)v259 * (unsigned __int128)(unint64_t)v261
       + (unint64_t)v257 * (unsigned __int128)(unint64_t)v257;
  v269 = ((unint64_t)v257 * (unsigned __int128)(unint64_t)v262) >> 64;
  v270 = v257 * v262;
  v49 = __CFADD__((_QWORD)v268, v265);
  v271 = v268 + v265;
  v272 = ((unint64_t)v257 * (unsigned __int128)(2 * ((unint64_t)v251 & 0x7FFFFFFFFFFFFLL))) >> 64;
  v273 = v257 * 2 * (v251 & 0x7FFFFFFFFFFFFLL);
  v274 = (unint64_t)v259 * (unsigned __int128)(unint64_t)v259
       + (v251 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v261
       + (unint64_t)(2 * v260) * (unsigned __int128)(unint64_t)v257;
  v276 = ((unint64_t)v260 * (unsigned __int128)(unint64_t)v261
        + (v251 & 0x7FFFFFFFFFFFFLL) * 19 * ((unint64_t)v251 & 0x7FFFFFFFFFFFFLL)
        + (unint64_t)(2 * v259) * (unsigned __int128)(unint64_t)v257) >> 64;
  v275 = v260 * v261 + (v251 & 0x7FFFFFFFFFFFFLL) * 19 * (v251 & 0x7FFFFFFFFFFFFLL) + 2 * v259 * v257;
  *((_QWORD *)&v251 + 1) = (((unint64_t)v260
                           * (unsigned __int128)(38 * ((unint64_t)v251 & 0x7FFFFFFFFFFFFLL))) >> 64)
                         + v49
                         + *((_QWORD *)&v268 + 1);
  *(_QWORD *)&v251 = v271;
  v277 = (__int128)v251 >> 51;
  v49 = __CFADD__(v275, v277);
  v278 = v275 + v277;
  if (v49)
    ++v276;
  *((_QWORD *)&v279 + 1) = v276;
  *(_QWORD *)&v279 = v278;
  v280 = v274 + (v279 >> 51);
  v281 = __PAIR128__(v272, v273)
       + __PAIR128__(v263, v264)
       + (unint64_t)(2 * v260) * (unsigned __int128)(unint64_t)v259
       + (v280 >> 51);
  v282 = __PAIR128__(v266, v267)
       + __PAIR128__(v269, v270)
       + (unint64_t)v260 * (unsigned __int128)(unint64_t)v260
       + (v281 >> 51);
  v283 = v281 & 0x7FFFFFFFFFFFFLL;
  v284 = v282 & 0x7FFFFFFFFFFFFLL;
  v285 = (v271 & 0x7FFFFFFFFFFFFLL) + 19 * (v282 >> 51);
  v286 = v285 & 0x7FFFFFFFFFFFFLL;
  v287 = (v278 & 0x7FFFFFFFFFFFFLL) + (v285 >> 51);
  v288 = v287 & 0x7FFFFFFFFFFFFLL;
  v289 = (v280 & 0x7FFFFFFFFFFFFLL) + (v287 >> 51);
  v290 = (unint64_t)v288 * (unsigned __int128)(38 * ((unint64_t)v282 & 0x7FFFFFFFFFFFFLL))
       + (unint64_t)v286 * (unsigned __int128)(unint64_t)v286
       + (unint64_t)v289 * (unsigned __int128)(38 * ((unint64_t)v281 & 0x7FFFFFFFFFFFFLL));
  v291 = v290 >> 51;
  v292 = ((unint64_t)v289 * (unsigned __int128)(38 * ((unint64_t)v282 & 0x7FFFFFFFFFFFFLL))
        + (unint64_t)v283 * (unsigned __int128)(unint64_t)(19 * v283)
        + (unint64_t)(2 * v288) * (unsigned __int128)(unint64_t)v286) >> 64;
  v293 = v289 * 38 * (v282 & 0x7FFFFFFFFFFFFLL) + v283 * 19 * v283 + 2 * v288 * v286;
  v49 = __CFADD__(v293, v291);
  v294 = v293 + v291;
  if (v49)
    ++v292;
  *((_QWORD *)&v295 + 1) = v292;
  *(_QWORD *)&v295 = v294;
  v297 = 2 * v283;
  v298 = (unint64_t)v286 * (unsigned __int128)(unint64_t)v297
       + (unint64_t)v284 * (unsigned __int128)(unint64_t)(19 * v284)
       + (unint64_t)(2 * v289) * (unsigned __int128)(unint64_t)v288;
  v299 = (unint64_t)v288 * (unsigned __int128)(unint64_t)v297
       + (unint64_t)v286 * (unsigned __int128)(unint64_t)(2 * v284)
       + (unint64_t)v289 * (unsigned __int128)(unint64_t)v289;
  v296 = (unint64_t)v288 * (unsigned __int128)(unint64_t)v288
       + (v281 & 0x7FFFFFFFFFFFFLL) * 38 * ((unint64_t)v282 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)(2 * v289) * (unsigned __int128)(unint64_t)v286
       + (v295 >> 51);
  *((_QWORD *)&v295 + 1) = (v298 + ((unsigned __int128)v296 >> 51)) >> 64;
  *(_QWORD *)&v295 = v298 + (v296 >> 51);
  v300.i64[0] = v295;
  v300.i64[1] = v299 + (v295 >> 51);
  *(int8x16_t *)((char *)&v1008[1] + 8) = vandq_s8(v300, v908);
  v301 = (v290 & 0x7FFFFFFFFFFFFLL) + 19 * ((__int128)(v299 + (v295 >> 51)) >> 51);
  v302 = (v294 & 0x7FFFFFFFFFFFFLL) + (v301 >> 51);
  v1008[1].i64[0] = (v296 & 0x7FFFFFFFFFFFFLL) + (v302 >> 51);
  v1008[0].i64[1] = v302 & 0x7FFFFFFFFFFFFLL;
  v1008[0].i64[0] = v301 & 0x7FFFFFFFFFFFFLL;
  fe_mul_impl((uint64_t)&v960, (unint64_t *)v1008, (unint64_t *)&v960);
  v303 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
       + *(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[8])
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)v960;
  v304 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
       + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16]);
  v305 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
       + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8]);
  v306 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)*((unint64_t *)&v960 + 1)
        + *(unint64_t *)&v961[8] * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)) >> 64;
  v307 = *((_QWORD *)&v960 + 1) * *((_QWORD *)&v960 + 1)
       + *(_QWORD *)&v961[8] * 38 * *(_QWORD *)&v961[16]
       + v960 * 2 * *(_QWORD *)v961;
  v309 = (*(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)(19 * *(_QWORD *)&v961[8]) * (unsigned __int128)*(unint64_t *)&v961[8]
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v960 + 1))) >> 64;
  v308 = *(_QWORD *)v961 * 38 * *(_QWORD *)&v961[16]
       + 19 * *(_QWORD *)&v961[8] * *(_QWORD *)&v961[8]
       + v960 * 2 * *((_QWORD *)&v960 + 1);
  v310 = v303 >> 51;
  v49 = __CFADD__(v308, v310);
  v311 = v308 + v310;
  if (v49)
    ++v309;
  *((_QWORD *)&v313 + 1) = v309;
  *(_QWORD *)&v313 = v311;
  v312 = v313 >> 51;
  v49 = __CFADD__(v307, v312);
  v314 = v307 + v312;
  if (v49)
    ++v306;
  *((_QWORD *)&v316 + 1) = v306;
  *(_QWORD *)&v316 = v314;
  v315 = v316 >> 51;
  v317 = v305 + v315;
  if (__CFADD__((_QWORD)v305, v315))
    v318 = *((_QWORD *)&v305 + 1) + 1;
  else
    v318 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
          + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])) >> 64;
  *((_QWORD *)&v320 + 1) = v318;
  *(_QWORD *)&v320 = v317;
  v319 = v320 >> 51;
  v49 = __CFADD__((_QWORD)v304, v319);
  v321 = v304 + v319;
  v322 = v311 & 0x7FFFFFFFFFFFFLL;
  v323 = v314 & 0x7FFFFFFFFFFFFLL;
  v324 = v317 & 0x7FFFFFFFFFFFFLL;
  if (v49)
    v325 = *((_QWORD *)&v304 + 1) + 1;
  else
    v325 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
          + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16])) >> 64;
  *((_QWORD *)&v326 + 1) = v325;
  *(_QWORD *)&v326 = v321;
  v327 = v321 & 0x7FFFFFFFFFFFFLL;
  v328 = (v303 & 0x7FFFFFFFFFFFFLL) + 19 * (v326 >> 51);
  v329 = v328 & 0x7FFFFFFFFFFFFLL;
  v330 = v322 + (v328 >> 51);
  v331 = v330 & 0x7FFFFFFFFFFFFLL;
  v332 = v323 + (v330 >> 51);
  v333 = 9;
  do
  {
    v334 = ((unint64_t)v324 * (unsigned __int128)(unint64_t)(38 * v327)) >> 64;
    v335 = v324 * 38 * v327;
    v336 = ((unint64_t)v332 * (unsigned __int128)(unint64_t)(38 * v327)) >> 64;
    v337 = v332 * 38 * v327;
    v338 = (unint64_t)v331 * (unsigned __int128)(unint64_t)(38 * v327)
         + (unint64_t)v332 * (unsigned __int128)(unint64_t)(38 * v324)
         + (unint64_t)v329 * (unsigned __int128)(unint64_t)v329;
    v339 = (unint64_t)v331 * (unsigned __int128)(unint64_t)(2 * v324)
         + (unint64_t)v332 * (unsigned __int128)(unint64_t)v332
         + (unint64_t)v329 * (unsigned __int128)(unint64_t)(2 * v327);
    v340 = ((unint64_t)v329 * (unsigned __int128)(unint64_t)(2 * v331)) >> 64;
    v341 = v329 * 2 * v331;
    v343 = ((unint64_t)v331 * (unsigned __int128)(unint64_t)(2 * v332)
          + (unint64_t)(19 * v327) * (unsigned __int128)(unint64_t)v327
          + (unint64_t)v329 * (unsigned __int128)(unint64_t)(2 * v324)) >> 64;
    v342 = v331 * 2 * v332 + 19 * v327 * v327 + v329 * 2 * v324;
    v345 = v331 * v331 + v335 + v329 * 2 * v332;
    v344 = ((unint64_t)v331 * (unsigned __int128)(unint64_t)v331
          + __PAIR128__(v334, v335)
          + (unint64_t)v329 * (unsigned __int128)(unint64_t)(2 * v332)) >> 64;
    v347 = (__PAIR128__(v336, v337)
          + (unint64_t)(19 * v324) * (unsigned __int128)(unint64_t)v324
          + __PAIR128__(v340, v341)) >> 64;
    v346 = v337 + 19 * v324 * v324 + v341;
    v348 = v338 >> 51;
    v49 = __CFADD__(v346, v348);
    v349 = v346 + v348;
    if (v49)
      ++v347;
    *((_QWORD *)&v351 + 1) = v347;
    *(_QWORD *)&v351 = v349;
    v350 = v351 >> 51;
    v352 = v345 + v350;
    if (__CFADD__(v345, v350))
      ++v344;
    *((_QWORD *)&v354 + 1) = v344;
    *(_QWORD *)&v354 = v345 + v350;
    v353 = v354 >> 51;
    v49 = __CFADD__(v342, v353);
    v355 = v342 + v353;
    if (v49)
      v356 = v343 + 1;
    else
      v356 = v343;
    *((_QWORD *)&v358 + 1) = v356;
    *(_QWORD *)&v358 = v355;
    v357 = v358 >> 51;
    v49 = __CFADD__((_QWORD)v339, v357);
    v359 = v339 + v357;
    if (v49)
      v360 = *((_QWORD *)&v339 + 1) + 1;
    else
      v360 = *((_QWORD *)&v339 + 1);
    *((_QWORD *)&v361 + 1) = v360;
    *(_QWORD *)&v361 = v359;
    v362 = (v338 & 0x7FFFFFFFFFFFFLL) + 19 * (v361 >> 51);
    v363 = v349 & 0x7FFFFFFFFFFFFLL;
    v364 = v352 & 0x7FFFFFFFFFFFFLL;
    v324 = v355 & 0x7FFFFFFFFFFFFLL;
    v327 = v359 & 0x7FFFFFFFFFFFFLL;
    v365 = v363 + (v362 >> 51);
    v329 = v362 & 0x7FFFFFFFFFFFFLL;
    v332 = v364 + (v365 >> 51);
    v331 = v365 & 0x7FFFFFFFFFFFFLL;
    --v333;
  }
  while (v333);
  v1008[2].i64[0] = v327;
  v1008[1].i64[1] = v324;
  v1008[1].i64[0] = v332;
  v1008[0].i64[1] = v331;
  v1008[0].i64[0] = v329;
  fe_mul_impl((uint64_t)v1008, (unint64_t *)v1008, (unint64_t *)&v960);
  v366 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
       + v1008[1].u64[0] * (unsigned __int128)(unint64_t)(38 * v1008[1].i64[1])
       + v1008[0].u64[0] * (unsigned __int128)v1008[0].u64[0];
  v367 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])
       + v1008[1].u64[0] * (unsigned __int128)v1008[1].u64[0]
       + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[2].i64[0]);
  v368 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])
       + (unint64_t)(19 * v1008[2].i64[0]) * (unsigned __int128)v1008[2].u64[0]
       + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1]);
  v370 = (v1008[0].u64[1] * (unsigned __int128)v1008[0].u64[1]
        + v1008[1].u64[1] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
        + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])) >> 64;
  v369 = v1008[0].i64[1] * v1008[0].i64[1]
       + v1008[1].i64[1] * 38 * v1008[2].i64[0]
       + v1008[0].i64[0] * 2 * v1008[1].i64[0];
  v372 = (v1008[1].u64[0] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
        + (unint64_t)(19 * v1008[1].i64[1]) * (unsigned __int128)v1008[1].u64[1]
        + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[0].i64[1])) >> 64;
  v371 = v1008[1].i64[0] * 38 * v1008[2].i64[0]
       + 19 * v1008[1].i64[1] * v1008[1].i64[1]
       + v1008[0].i64[0] * 2 * v1008[0].i64[1];
  v373 = v366 >> 51;
  v49 = __CFADD__(v371, v373);
  v374 = v371 + v373;
  if (v49)
    ++v372;
  *((_QWORD *)&v376 + 1) = v372;
  *(_QWORD *)&v376 = v374;
  v375 = v376 >> 51;
  v49 = __CFADD__(v369, v375);
  v377 = v369 + v375;
  if (v49)
    ++v370;
  *((_QWORD *)&v379 + 1) = v370;
  *(_QWORD *)&v379 = v377;
  v378 = v379 >> 51;
  v380 = v368 + v378;
  if (__CFADD__((_QWORD)v368, v378))
    v381 = *((_QWORD *)&v368 + 1) + 1;
  else
    v381 = (v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])
          + (unint64_t)(19 * v1008[2].i64[0]) * (unsigned __int128)v1008[2].u64[0]
          + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])) >> 64;
  *((_QWORD *)&v383 + 1) = v381;
  *(_QWORD *)&v383 = v380;
  v382 = v383 >> 51;
  v49 = __CFADD__((_QWORD)v367, v382);
  v384 = v367 + v382;
  v385 = v374 & 0x7FFFFFFFFFFFFLL;
  v386 = v377 & 0x7FFFFFFFFFFFFLL;
  v387 = v380 & 0x7FFFFFFFFFFFFLL;
  if (v49)
    v388 = *((_QWORD *)&v367 + 1) + 1;
  else
    v388 = (v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])
          + v1008[1].u64[0] * (unsigned __int128)v1008[1].u64[0]
          + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[2].i64[0])) >> 64;
  *((_QWORD *)&v389 + 1) = v388;
  *(_QWORD *)&v389 = v384;
  v390 = v384 & 0x7FFFFFFFFFFFFLL;
  v391 = (v366 & 0x7FFFFFFFFFFFFLL) + 19 * (v389 >> 51);
  v392 = v391 & 0x7FFFFFFFFFFFFLL;
  v393 = v385 + (v391 >> 51);
  v394 = v393 & 0x7FFFFFFFFFFFFLL;
  v395 = v386 + (v393 >> 51);
  v396 = 19;
  do
  {
    v397 = ((unint64_t)v387 * (unsigned __int128)(unint64_t)(38 * v390)) >> 64;
    v398 = v387 * 38 * v390;
    v399 = ((unint64_t)v395 * (unsigned __int128)(unint64_t)(38 * v390)) >> 64;
    v400 = v395 * 38 * v390;
    v401 = (unint64_t)v394 * (unsigned __int128)(unint64_t)(38 * v390)
         + (unint64_t)v395 * (unsigned __int128)(unint64_t)(38 * v387)
         + (unint64_t)v392 * (unsigned __int128)(unint64_t)v392;
    v402 = (unint64_t)v394 * (unsigned __int128)(unint64_t)(2 * v387)
         + (unint64_t)v395 * (unsigned __int128)(unint64_t)v395
         + (unint64_t)v392 * (unsigned __int128)(unint64_t)(2 * v390);
    v403 = ((unint64_t)v392 * (unsigned __int128)(unint64_t)(2 * v394)) >> 64;
    v404 = v392 * 2 * v394;
    v405 = ((unint64_t)v394 * (unsigned __int128)(unint64_t)(2 * v395)
          + (unint64_t)(19 * v390) * (unsigned __int128)(unint64_t)v390
          + (unint64_t)v392 * (unsigned __int128)(unint64_t)(2 * v387)) >> 64;
    v406 = v394 * 2 * v395 + 19 * v390 * v390 + v392 * 2 * v387;
    v408 = v394 * v394 + v398 + v392 * 2 * v395;
    v407 = ((unint64_t)v394 * (unsigned __int128)(unint64_t)v394
          + __PAIR128__(v397, v398)
          + (unint64_t)v392 * (unsigned __int128)(unint64_t)(2 * v395)) >> 64;
    v410 = (__PAIR128__(v399, v400)
          + (unint64_t)(19 * v387) * (unsigned __int128)(unint64_t)v387
          + __PAIR128__(v403, v404)) >> 64;
    v409 = v400 + 19 * v387 * v387 + v404;
    v411 = v401 >> 51;
    v49 = __CFADD__(v409, v411);
    v412 = v409 + v411;
    if (v49)
      ++v410;
    *((_QWORD *)&v414 + 1) = v410;
    *(_QWORD *)&v414 = v412;
    v413 = v414 >> 51;
    v415 = v408 + v413;
    if (__CFADD__(v408, v413))
      ++v407;
    *((_QWORD *)&v417 + 1) = v407;
    *(_QWORD *)&v417 = v408 + v413;
    v416 = v417 >> 51;
    v49 = __CFADD__(v406, v416);
    v418 = v406 + v416;
    if (v49)
      v419 = v405 + 1;
    else
      v419 = v405;
    *((_QWORD *)&v421 + 1) = v419;
    *(_QWORD *)&v421 = v418;
    v420 = v421 >> 51;
    v49 = __CFADD__((_QWORD)v402, v420);
    v422 = v402 + v420;
    if (v49)
      v423 = *((_QWORD *)&v402 + 1) + 1;
    else
      v423 = *((_QWORD *)&v402 + 1);
    *((_QWORD *)&v424 + 1) = v423;
    *(_QWORD *)&v424 = v422;
    v425 = (v401 & 0x7FFFFFFFFFFFFLL) + 19 * (v424 >> 51);
    v426 = v412 & 0x7FFFFFFFFFFFFLL;
    v427 = v415 & 0x7FFFFFFFFFFFFLL;
    v387 = v418 & 0x7FFFFFFFFFFFFLL;
    v390 = v422 & 0x7FFFFFFFFFFFFLL;
    v428 = v426 + (v425 >> 51);
    v392 = v425 & 0x7FFFFFFFFFFFFLL;
    v395 = v427 + (v428 >> 51);
    v394 = v428 & 0x7FFFFFFFFFFFFLL;
    --v396;
  }
  while (v396);
  v1007 = v390;
  *((_QWORD *)&v1006 + 1) = v387;
  *(_QWORD *)&v1006 = v395;
  *((_QWORD *)&v1005 + 1) = v394;
  *(_QWORD *)&v1005 = v392;
  fe_mul_impl((uint64_t)v1008, (unint64_t *)&v1005, (unint64_t *)v1008);
  v429 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
       + v1008[1].u64[0] * (unsigned __int128)(unint64_t)(38 * v1008[1].i64[1])
       + v1008[0].u64[0] * (unsigned __int128)v1008[0].u64[0];
  v430 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])
       + v1008[1].u64[0] * (unsigned __int128)v1008[1].u64[0]
       + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[2].i64[0]);
  v431 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])
       + (unint64_t)(19 * v1008[2].i64[0]) * (unsigned __int128)v1008[2].u64[0]
       + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1]);
  v433 = (v1008[0].u64[1] * (unsigned __int128)v1008[0].u64[1]
        + v1008[1].u64[1] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
        + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])) >> 64;
  v432 = v1008[0].i64[1] * v1008[0].i64[1]
       + v1008[1].i64[1] * 38 * v1008[2].i64[0]
       + v1008[0].i64[0] * 2 * v1008[1].i64[0];
  v435 = (v1008[1].u64[0] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
        + (unint64_t)(19 * v1008[1].i64[1]) * (unsigned __int128)v1008[1].u64[1]
        + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[0].i64[1])) >> 64;
  v434 = v1008[1].i64[0] * 38 * v1008[2].i64[0]
       + 19 * v1008[1].i64[1] * v1008[1].i64[1]
       + v1008[0].i64[0] * 2 * v1008[0].i64[1];
  v436 = v429 >> 51;
  v49 = __CFADD__(v434, v436);
  v437 = v434 + v436;
  if (v49)
    ++v435;
  *((_QWORD *)&v439 + 1) = v435;
  *(_QWORD *)&v439 = v437;
  v438 = v439 >> 51;
  v49 = __CFADD__(v432, v438);
  v440 = v432 + v438;
  if (v49)
    ++v433;
  *((_QWORD *)&v442 + 1) = v433;
  *(_QWORD *)&v442 = v440;
  v441 = v442 >> 51;
  v443 = v431 + v441;
  if (__CFADD__((_QWORD)v431, v441))
    v444 = *((_QWORD *)&v431 + 1) + 1;
  else
    v444 = (v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])
          + (unint64_t)(19 * v1008[2].i64[0]) * (unsigned __int128)v1008[2].u64[0]
          + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])) >> 64;
  *((_QWORD *)&v446 + 1) = v444;
  *(_QWORD *)&v446 = v443;
  v445 = v446 >> 51;
  v49 = __CFADD__((_QWORD)v430, v445);
  v447 = v430 + v445;
  v448 = v437 & 0x7FFFFFFFFFFFFLL;
  v449 = v440 & 0x7FFFFFFFFFFFFLL;
  v450 = v443 & 0x7FFFFFFFFFFFFLL;
  if (v49)
    v451 = *((_QWORD *)&v430 + 1) + 1;
  else
    v451 = (v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])
          + v1008[1].u64[0] * (unsigned __int128)v1008[1].u64[0]
          + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[2].i64[0])) >> 64;
  *((_QWORD *)&v452 + 1) = v451;
  *(_QWORD *)&v452 = v447;
  v453 = v447 & 0x7FFFFFFFFFFFFLL;
  v454 = (v429 & 0x7FFFFFFFFFFFFLL) + 19 * (v452 >> 51);
  v455 = v454 & 0x7FFFFFFFFFFFFLL;
  v456 = v448 + (v454 >> 51);
  v457 = v456 & 0x7FFFFFFFFFFFFLL;
  v458 = v449 + (v456 >> 51);
  v459 = 9;
  do
  {
    v460 = ((unint64_t)v450 * (unsigned __int128)(unint64_t)(38 * v453)) >> 64;
    v461 = v450 * 38 * v453;
    v462 = ((unint64_t)v458 * (unsigned __int128)(unint64_t)(38 * v453)) >> 64;
    v463 = v458 * 38 * v453;
    v464 = (unint64_t)v457 * (unsigned __int128)(unint64_t)(38 * v453)
         + (unint64_t)v458 * (unsigned __int128)(unint64_t)(38 * v450)
         + (unint64_t)v455 * (unsigned __int128)(unint64_t)v455;
    v465 = (unint64_t)v457 * (unsigned __int128)(unint64_t)(2 * v450)
         + (unint64_t)v458 * (unsigned __int128)(unint64_t)v458
         + (unint64_t)v455 * (unsigned __int128)(unint64_t)(2 * v453);
    v466 = ((unint64_t)v455 * (unsigned __int128)(unint64_t)(2 * v457)) >> 64;
    v467 = v455 * 2 * v457;
    v468 = ((unint64_t)v457 * (unsigned __int128)(unint64_t)(2 * v458)
          + (unint64_t)(19 * v453) * (unsigned __int128)(unint64_t)v453
          + (unint64_t)v455 * (unsigned __int128)(unint64_t)(2 * v450)) >> 64;
    v469 = v457 * 2 * v458 + 19 * v453 * v453 + v455 * 2 * v450;
    v471 = v457 * v457 + v461 + v455 * 2 * v458;
    v470 = ((unint64_t)v457 * (unsigned __int128)(unint64_t)v457
          + __PAIR128__(v460, v461)
          + (unint64_t)v455 * (unsigned __int128)(unint64_t)(2 * v458)) >> 64;
    v473 = (__PAIR128__(v462, v463)
          + (unint64_t)(19 * v450) * (unsigned __int128)(unint64_t)v450
          + __PAIR128__(v466, v467)) >> 64;
    v472 = v463 + 19 * v450 * v450 + v467;
    v474 = v464 >> 51;
    v49 = __CFADD__(v472, v474);
    v475 = v472 + v474;
    if (v49)
      ++v473;
    *((_QWORD *)&v477 + 1) = v473;
    *(_QWORD *)&v477 = v475;
    v476 = v477 >> 51;
    v478 = v471 + v476;
    if (__CFADD__(v471, v476))
      ++v470;
    *((_QWORD *)&v480 + 1) = v470;
    *(_QWORD *)&v480 = v471 + v476;
    v479 = v480 >> 51;
    v49 = __CFADD__(v469, v479);
    v481 = v469 + v479;
    if (v49)
      v482 = v468 + 1;
    else
      v482 = v468;
    *((_QWORD *)&v484 + 1) = v482;
    *(_QWORD *)&v484 = v481;
    v483 = v484 >> 51;
    v49 = __CFADD__((_QWORD)v465, v483);
    v485 = v465 + v483;
    if (v49)
      v486 = *((_QWORD *)&v465 + 1) + 1;
    else
      v486 = *((_QWORD *)&v465 + 1);
    *((_QWORD *)&v487 + 1) = v486;
    *(_QWORD *)&v487 = v485;
    v488 = (v464 & 0x7FFFFFFFFFFFFLL) + 19 * (v487 >> 51);
    v489 = v475 & 0x7FFFFFFFFFFFFLL;
    v490 = v478 & 0x7FFFFFFFFFFFFLL;
    v450 = v481 & 0x7FFFFFFFFFFFFLL;
    v453 = v485 & 0x7FFFFFFFFFFFFLL;
    v491 = v489 + (v488 >> 51);
    v455 = v488 & 0x7FFFFFFFFFFFFLL;
    v458 = v490 + (v491 >> 51);
    v457 = v491 & 0x7FFFFFFFFFFFFLL;
    --v459;
  }
  while (v459);
  v1008[2].i64[0] = v453;
  v1008[1].i64[1] = v450;
  v1008[1].i64[0] = v458;
  v1008[0].i64[1] = v457;
  v1008[0].i64[0] = v455;
  fe_mul_impl((uint64_t)&v960, (unint64_t *)v1008, (unint64_t *)&v960);
  v492 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
       + *(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[8])
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)v960;
  v493 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
       + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16]);
  v494 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
       + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8]);
  v496 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)*((unint64_t *)&v960 + 1)
        + *(unint64_t *)&v961[8] * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)) >> 64;
  v495 = *((_QWORD *)&v960 + 1) * *((_QWORD *)&v960 + 1)
       + *(_QWORD *)&v961[8] * 38 * *(_QWORD *)&v961[16]
       + v960 * 2 * *(_QWORD *)v961;
  v498 = (*(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)(19 * *(_QWORD *)&v961[8]) * (unsigned __int128)*(unint64_t *)&v961[8]
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v960 + 1))) >> 64;
  v497 = *(_QWORD *)v961 * 38 * *(_QWORD *)&v961[16]
       + 19 * *(_QWORD *)&v961[8] * *(_QWORD *)&v961[8]
       + v960 * 2 * *((_QWORD *)&v960 + 1);
  v499 = v492 >> 51;
  v49 = __CFADD__(v497, v499);
  v500 = v497 + v499;
  if (v49)
    ++v498;
  *((_QWORD *)&v502 + 1) = v498;
  *(_QWORD *)&v502 = v500;
  v501 = v502 >> 51;
  v49 = __CFADD__(v495, v501);
  v503 = v495 + v501;
  if (v49)
    ++v496;
  *((_QWORD *)&v505 + 1) = v496;
  *(_QWORD *)&v505 = v503;
  v504 = v505 >> 51;
  v506 = v494 + v504;
  if (__CFADD__((_QWORD)v494, v504))
    v507 = *((_QWORD *)&v494 + 1) + 1;
  else
    v507 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
          + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])) >> 64;
  *((_QWORD *)&v509 + 1) = v507;
  *(_QWORD *)&v509 = v506;
  v508 = v509 >> 51;
  v49 = __CFADD__((_QWORD)v493, v508);
  v510 = v493 + v508;
  v511 = v500 & 0x7FFFFFFFFFFFFLL;
  v512 = v503 & 0x7FFFFFFFFFFFFLL;
  v513 = v506 & 0x7FFFFFFFFFFFFLL;
  if (v49)
    v514 = *((_QWORD *)&v493 + 1) + 1;
  else
    v514 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
          + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16])) >> 64;
  *((_QWORD *)&v515 + 1) = v514;
  *(_QWORD *)&v515 = v510;
  v516 = v510 & 0x7FFFFFFFFFFFFLL;
  v517 = (v492 & 0x7FFFFFFFFFFFFLL) + 19 * (v515 >> 51);
  v518 = v517 & 0x7FFFFFFFFFFFFLL;
  v519 = v511 + (v517 >> 51);
  v520 = v519 & 0x7FFFFFFFFFFFFLL;
  v521 = v512 + (v519 >> 51);
  v522 = 49;
  do
  {
    v523 = ((unint64_t)v513 * (unsigned __int128)(unint64_t)(38 * v516)) >> 64;
    v524 = v513 * 38 * v516;
    v525 = ((unint64_t)v521 * (unsigned __int128)(unint64_t)(38 * v516)) >> 64;
    v526 = v521 * 38 * v516;
    v527 = (unint64_t)v520 * (unsigned __int128)(unint64_t)(38 * v516)
         + (unint64_t)v521 * (unsigned __int128)(unint64_t)(38 * v513)
         + (unint64_t)v518 * (unsigned __int128)(unint64_t)v518;
    v528 = (unint64_t)v520 * (unsigned __int128)(unint64_t)(2 * v513)
         + (unint64_t)v521 * (unsigned __int128)(unint64_t)v521
         + (unint64_t)v518 * (unsigned __int128)(unint64_t)(2 * v516);
    v529 = ((unint64_t)v518 * (unsigned __int128)(unint64_t)(2 * v520)) >> 64;
    v530 = v518 * 2 * v520;
    v531 = ((unint64_t)v520 * (unsigned __int128)(unint64_t)(2 * v521)
          + (unint64_t)(19 * v516) * (unsigned __int128)(unint64_t)v516
          + (unint64_t)v518 * (unsigned __int128)(unint64_t)(2 * v513)) >> 64;
    v532 = v520 * 2 * v521 + 19 * v516 * v516 + v518 * 2 * v513;
    v534 = v520 * v520 + v524 + v518 * 2 * v521;
    v533 = ((unint64_t)v520 * (unsigned __int128)(unint64_t)v520
          + __PAIR128__(v523, v524)
          + (unint64_t)v518 * (unsigned __int128)(unint64_t)(2 * v521)) >> 64;
    v536 = (__PAIR128__(v525, v526)
          + (unint64_t)(19 * v513) * (unsigned __int128)(unint64_t)v513
          + __PAIR128__(v529, v530)) >> 64;
    v535 = v526 + 19 * v513 * v513 + v530;
    v537 = v527 >> 51;
    v49 = __CFADD__(v535, v537);
    v538 = v535 + v537;
    if (v49)
      ++v536;
    *((_QWORD *)&v540 + 1) = v536;
    *(_QWORD *)&v540 = v538;
    v539 = v540 >> 51;
    v541 = v534 + v539;
    if (__CFADD__(v534, v539))
      ++v533;
    *((_QWORD *)&v543 + 1) = v533;
    *(_QWORD *)&v543 = v534 + v539;
    v542 = v543 >> 51;
    v49 = __CFADD__(v532, v542);
    v544 = v532 + v542;
    if (v49)
      v545 = v531 + 1;
    else
      v545 = v531;
    *((_QWORD *)&v547 + 1) = v545;
    *(_QWORD *)&v547 = v544;
    v546 = v547 >> 51;
    v49 = __CFADD__((_QWORD)v528, v546);
    v548 = v528 + v546;
    if (v49)
      v549 = *((_QWORD *)&v528 + 1) + 1;
    else
      v549 = *((_QWORD *)&v528 + 1);
    *((_QWORD *)&v550 + 1) = v549;
    *(_QWORD *)&v550 = v548;
    v551 = (v527 & 0x7FFFFFFFFFFFFLL) + 19 * (v550 >> 51);
    v552 = v538 & 0x7FFFFFFFFFFFFLL;
    v553 = v541 & 0x7FFFFFFFFFFFFLL;
    v513 = v544 & 0x7FFFFFFFFFFFFLL;
    v516 = v548 & 0x7FFFFFFFFFFFFLL;
    v554 = v552 + (v551 >> 51);
    v518 = v551 & 0x7FFFFFFFFFFFFLL;
    v521 = v553 + (v554 >> 51);
    v520 = v554 & 0x7FFFFFFFFFFFFLL;
    --v522;
  }
  while (v522);
  v1008[2].i64[0] = v516;
  v1008[1].i64[1] = v513;
  v1008[1].i64[0] = v521;
  v1008[0].i64[1] = v520;
  v1008[0].i64[0] = v518;
  fe_mul_impl((uint64_t)v1008, (unint64_t *)v1008, (unint64_t *)&v960);
  v555 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
       + v1008[1].u64[0] * (unsigned __int128)(unint64_t)(38 * v1008[1].i64[1])
       + v1008[0].u64[0] * (unsigned __int128)v1008[0].u64[0];
  v556 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])
       + v1008[1].u64[0] * (unsigned __int128)v1008[1].u64[0]
       + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[2].i64[0]);
  v557 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])
       + (unint64_t)(19 * v1008[2].i64[0]) * (unsigned __int128)v1008[2].u64[0]
       + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1]);
  v559 = (v1008[0].u64[1] * (unsigned __int128)v1008[0].u64[1]
        + v1008[1].u64[1] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
        + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])) >> 64;
  v558 = v1008[0].i64[1] * v1008[0].i64[1]
       + v1008[1].i64[1] * 38 * v1008[2].i64[0]
       + v1008[0].i64[0] * 2 * v1008[1].i64[0];
  v561 = (v1008[1].u64[0] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
        + (unint64_t)(19 * v1008[1].i64[1]) * (unsigned __int128)v1008[1].u64[1]
        + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[0].i64[1])) >> 64;
  v560 = v1008[1].i64[0] * 38 * v1008[2].i64[0]
       + 19 * v1008[1].i64[1] * v1008[1].i64[1]
       + v1008[0].i64[0] * 2 * v1008[0].i64[1];
  v562 = v555 >> 51;
  v49 = __CFADD__(v560, v562);
  v563 = v560 + v562;
  if (v49)
    ++v561;
  *((_QWORD *)&v565 + 1) = v561;
  *(_QWORD *)&v565 = v563;
  v564 = v565 >> 51;
  v49 = __CFADD__(v558, v564);
  v566 = v558 + v564;
  if (v49)
    ++v559;
  *((_QWORD *)&v568 + 1) = v559;
  *(_QWORD *)&v568 = v566;
  v567 = v568 >> 51;
  v569 = v557 + v567;
  if (__CFADD__((_QWORD)v557, v567))
    v570 = *((_QWORD *)&v557 + 1) + 1;
  else
    v570 = (v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])
          + (unint64_t)(19 * v1008[2].i64[0]) * (unsigned __int128)v1008[2].u64[0]
          + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])) >> 64;
  *((_QWORD *)&v572 + 1) = v570;
  *(_QWORD *)&v572 = v569;
  v571 = v572 >> 51;
  v49 = __CFADD__((_QWORD)v556, v571);
  v573 = v556 + v571;
  v574 = v563 & 0x7FFFFFFFFFFFFLL;
  v575 = v566 & 0x7FFFFFFFFFFFFLL;
  v576 = v569 & 0x7FFFFFFFFFFFFLL;
  if (v49)
    v577 = *((_QWORD *)&v556 + 1) + 1;
  else
    v577 = (v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])
          + v1008[1].u64[0] * (unsigned __int128)v1008[1].u64[0]
          + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[2].i64[0])) >> 64;
  *((_QWORD *)&v578 + 1) = v577;
  *(_QWORD *)&v578 = v573;
  v579 = v573 & 0x7FFFFFFFFFFFFLL;
  v580 = (v555 & 0x7FFFFFFFFFFFFLL) + 19 * (v578 >> 51);
  v581 = v580 & 0x7FFFFFFFFFFFFLL;
  v582 = v574 + (v580 >> 51);
  v583 = v582 & 0x7FFFFFFFFFFFFLL;
  v584 = v575 + (v582 >> 51);
  v585 = 99;
  do
  {
    v586 = ((unint64_t)v576 * (unsigned __int128)(unint64_t)(38 * v579)) >> 64;
    v587 = v576 * 38 * v579;
    v588 = ((unint64_t)v584 * (unsigned __int128)(unint64_t)(38 * v579)) >> 64;
    v589 = v584 * 38 * v579;
    v590 = (unint64_t)v583 * (unsigned __int128)(unint64_t)(38 * v579)
         + (unint64_t)v584 * (unsigned __int128)(unint64_t)(38 * v576)
         + (unint64_t)v581 * (unsigned __int128)(unint64_t)v581;
    v591 = (unint64_t)v583 * (unsigned __int128)(unint64_t)(2 * v576)
         + (unint64_t)v584 * (unsigned __int128)(unint64_t)v584
         + (unint64_t)v581 * (unsigned __int128)(unint64_t)(2 * v579);
    v592 = ((unint64_t)v581 * (unsigned __int128)(unint64_t)(2 * v583)) >> 64;
    v593 = v581 * 2 * v583;
    v594 = ((unint64_t)v583 * (unsigned __int128)(unint64_t)(2 * v584)
          + (unint64_t)(19 * v579) * (unsigned __int128)(unint64_t)v579
          + (unint64_t)v581 * (unsigned __int128)(unint64_t)(2 * v576)) >> 64;
    v595 = v583 * 2 * v584 + 19 * v579 * v579 + v581 * 2 * v576;
    v597 = v583 * v583 + v587 + v581 * 2 * v584;
    v596 = ((unint64_t)v583 * (unsigned __int128)(unint64_t)v583
          + __PAIR128__(v586, v587)
          + (unint64_t)v581 * (unsigned __int128)(unint64_t)(2 * v584)) >> 64;
    v599 = (__PAIR128__(v588, v589)
          + (unint64_t)(19 * v576) * (unsigned __int128)(unint64_t)v576
          + __PAIR128__(v592, v593)) >> 64;
    v598 = v589 + 19 * v576 * v576 + v593;
    v600 = v590 >> 51;
    v49 = __CFADD__(v598, v600);
    v601 = v598 + v600;
    if (v49)
      ++v599;
    *((_QWORD *)&v603 + 1) = v599;
    *(_QWORD *)&v603 = v601;
    v602 = v603 >> 51;
    v604 = v597 + v602;
    if (__CFADD__(v597, v602))
      ++v596;
    *((_QWORD *)&v606 + 1) = v596;
    *(_QWORD *)&v606 = v597 + v602;
    v605 = v606 >> 51;
    v49 = __CFADD__(v595, v605);
    v607 = v595 + v605;
    if (v49)
      v608 = v594 + 1;
    else
      v608 = v594;
    *((_QWORD *)&v610 + 1) = v608;
    *(_QWORD *)&v610 = v607;
    v609 = v610 >> 51;
    v49 = __CFADD__((_QWORD)v591, v609);
    v611 = v591 + v609;
    if (v49)
      v612 = *((_QWORD *)&v591 + 1) + 1;
    else
      v612 = *((_QWORD *)&v591 + 1);
    *((_QWORD *)&v613 + 1) = v612;
    *(_QWORD *)&v613 = v611;
    v614 = (v590 & 0x7FFFFFFFFFFFFLL) + 19 * (v613 >> 51);
    v615 = v601 & 0x7FFFFFFFFFFFFLL;
    v616 = v604 & 0x7FFFFFFFFFFFFLL;
    v576 = v607 & 0x7FFFFFFFFFFFFLL;
    v579 = v611 & 0x7FFFFFFFFFFFFLL;
    v617 = v615 + (v614 >> 51);
    v581 = v614 & 0x7FFFFFFFFFFFFLL;
    v584 = v616 + (v617 >> 51);
    v583 = v617 & 0x7FFFFFFFFFFFFLL;
    --v585;
  }
  while (v585);
  v1007 = v579;
  *((_QWORD *)&v1006 + 1) = v576;
  *(_QWORD *)&v1006 = v584;
  *((_QWORD *)&v1005 + 1) = v583;
  *(_QWORD *)&v1005 = v581;
  fe_mul_impl((uint64_t)v1008, (unint64_t *)&v1005, (unint64_t *)v1008);
  v618 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
       + v1008[1].u64[0] * (unsigned __int128)(unint64_t)(38 * v1008[1].i64[1])
       + v1008[0].u64[0] * (unsigned __int128)v1008[0].u64[0];
  v619 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])
       + v1008[1].u64[0] * (unsigned __int128)v1008[1].u64[0]
       + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[2].i64[0]);
  v620 = v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])
       + (unint64_t)(19 * v1008[2].i64[0]) * (unsigned __int128)v1008[2].u64[0]
       + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1]);
  v622 = (v1008[0].u64[1] * (unsigned __int128)v1008[0].u64[1]
        + v1008[1].u64[1] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
        + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])) >> 64;
  v621 = v1008[0].i64[1] * v1008[0].i64[1]
       + v1008[1].i64[1] * 38 * v1008[2].i64[0]
       + v1008[0].i64[0] * 2 * v1008[1].i64[0];
  v624 = (v1008[1].u64[0] * (unsigned __int128)(unint64_t)(38 * v1008[2].i64[0])
        + (unint64_t)(19 * v1008[1].i64[1]) * (unsigned __int128)v1008[1].u64[1]
        + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[0].i64[1])) >> 64;
  v623 = v1008[1].i64[0] * 38 * v1008[2].i64[0]
       + 19 * v1008[1].i64[1] * v1008[1].i64[1]
       + v1008[0].i64[0] * 2 * v1008[0].i64[1];
  v625 = v618 >> 51;
  v49 = __CFADD__(v623, v625);
  v626 = v623 + v625;
  if (v49)
    ++v624;
  *((_QWORD *)&v628 + 1) = v624;
  *(_QWORD *)&v628 = v626;
  v627 = v628 >> 51;
  v49 = __CFADD__(v621, v627);
  v629 = v621 + v627;
  if (v49)
    ++v622;
  *((_QWORD *)&v631 + 1) = v622;
  *(_QWORD *)&v631 = v629;
  v630 = v631 >> 51;
  v632 = v620 + v630;
  if (__CFADD__((_QWORD)v620, v630))
    v633 = *((_QWORD *)&v620 + 1) + 1;
  else
    v633 = (v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[0])
          + (unint64_t)(19 * v1008[2].i64[0]) * (unsigned __int128)v1008[2].u64[0]
          + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])) >> 64;
  *((_QWORD *)&v635 + 1) = v633;
  *(_QWORD *)&v635 = v632;
  v634 = v635 >> 51;
  v49 = __CFADD__((_QWORD)v619, v634);
  v636 = v619 + v634;
  v637 = v626 & 0x7FFFFFFFFFFFFLL;
  v638 = v629 & 0x7FFFFFFFFFFFFLL;
  v639 = v632 & 0x7FFFFFFFFFFFFLL;
  if (v49)
    v640 = *((_QWORD *)&v619 + 1) + 1;
  else
    v640 = (v1008[0].u64[1] * (unsigned __int128)(unint64_t)(2 * v1008[1].i64[1])
          + v1008[1].u64[0] * (unsigned __int128)v1008[1].u64[0]
          + v1008[0].u64[0] * (unsigned __int128)(unint64_t)(2 * v1008[2].i64[0])) >> 64;
  *((_QWORD *)&v641 + 1) = v640;
  *(_QWORD *)&v641 = v636;
  v642 = v636 & 0x7FFFFFFFFFFFFLL;
  v643 = (v618 & 0x7FFFFFFFFFFFFLL) + 19 * (v641 >> 51);
  v644 = v643 & 0x7FFFFFFFFFFFFLL;
  v645 = v637 + (v643 >> 51);
  v646 = v645 & 0x7FFFFFFFFFFFFLL;
  v647 = v638 + (v645 >> 51);
  v648 = 49;
  do
  {
    v649 = ((unint64_t)v639 * (unsigned __int128)(unint64_t)(38 * v642)) >> 64;
    v650 = v639 * 38 * v642;
    v651 = ((unint64_t)v647 * (unsigned __int128)(unint64_t)(38 * v642)) >> 64;
    v652 = v647 * 38 * v642;
    v653 = (unint64_t)v646 * (unsigned __int128)(unint64_t)(38 * v642)
         + (unint64_t)v647 * (unsigned __int128)(unint64_t)(38 * v639)
         + (unint64_t)v644 * (unsigned __int128)(unint64_t)v644;
    v654 = (unint64_t)v646 * (unsigned __int128)(unint64_t)(2 * v639)
         + (unint64_t)v647 * (unsigned __int128)(unint64_t)v647
         + (unint64_t)v644 * (unsigned __int128)(unint64_t)(2 * v642);
    v655 = ((unint64_t)v644 * (unsigned __int128)(unint64_t)(2 * v646)) >> 64;
    v656 = v644 * 2 * v646;
    v657 = ((unint64_t)v646 * (unsigned __int128)(unint64_t)(2 * v647)
          + (unint64_t)(19 * v642) * (unsigned __int128)(unint64_t)v642
          + (unint64_t)v644 * (unsigned __int128)(unint64_t)(2 * v639)) >> 64;
    v658 = v646 * 2 * v647 + 19 * v642 * v642 + v644 * 2 * v639;
    v660 = v646 * v646 + v650 + v644 * 2 * v647;
    v659 = ((unint64_t)v646 * (unsigned __int128)(unint64_t)v646
          + __PAIR128__(v649, v650)
          + (unint64_t)v644 * (unsigned __int128)(unint64_t)(2 * v647)) >> 64;
    v662 = (__PAIR128__(v651, v652)
          + (unint64_t)(19 * v639) * (unsigned __int128)(unint64_t)v639
          + __PAIR128__(v655, v656)) >> 64;
    v661 = v652 + 19 * v639 * v639 + v656;
    v663 = v653 >> 51;
    v49 = __CFADD__(v661, v663);
    v664 = v661 + v663;
    if (v49)
      ++v662;
    *((_QWORD *)&v666 + 1) = v662;
    *(_QWORD *)&v666 = v664;
    v665 = v666 >> 51;
    v667 = v660 + v665;
    if (__CFADD__(v660, v665))
      ++v659;
    *((_QWORD *)&v669 + 1) = v659;
    *(_QWORD *)&v669 = v660 + v665;
    v668 = v669 >> 51;
    v49 = __CFADD__(v658, v668);
    v670 = v658 + v668;
    if (v49)
      v671 = v657 + 1;
    else
      v671 = v657;
    *((_QWORD *)&v673 + 1) = v671;
    *(_QWORD *)&v673 = v670;
    v672 = v673 >> 51;
    v49 = __CFADD__((_QWORD)v654, v672);
    v674 = v654 + v672;
    if (v49)
      v675 = *((_QWORD *)&v654 + 1) + 1;
    else
      v675 = *((_QWORD *)&v654 + 1);
    *((_QWORD *)&v676 + 1) = v675;
    *(_QWORD *)&v676 = v674;
    v677 = (v653 & 0x7FFFFFFFFFFFFLL) + 19 * (v676 >> 51);
    v678 = v664 & 0x7FFFFFFFFFFFFLL;
    v679 = v667 & 0x7FFFFFFFFFFFFLL;
    v639 = v670 & 0x7FFFFFFFFFFFFLL;
    v642 = v674 & 0x7FFFFFFFFFFFFLL;
    v680 = v678 + (v677 >> 51);
    v644 = v677 & 0x7FFFFFFFFFFFFLL;
    v647 = v679 + (v680 >> 51);
    v646 = v680 & 0x7FFFFFFFFFFFFLL;
    --v648;
  }
  while (v648);
  v1008[2].i64[0] = v642;
  v1008[1].i64[1] = v639;
  v1008[1].i64[0] = v647;
  v1008[0].i64[1] = v646;
  v1008[0].i64[0] = v644;
  fe_mul_impl((uint64_t)&v960, (unint64_t *)v1008, (unint64_t *)&v960);
  v681 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
       + *(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[8])
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)v960;
  v683 = v681 >> 51;
  v682 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
       + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16]);
  v684 = *((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
       + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
       + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8]);
  v685 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)*((unint64_t *)&v960 + 1)
        + *(unint64_t *)&v961[8] * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)) >> 64;
  v686 = *((_QWORD *)&v960 + 1) * *((_QWORD *)&v960 + 1)
       + *(_QWORD *)&v961[8] * 38 * *(_QWORD *)&v961[16]
       + v960 * 2 * *(_QWORD *)v961;
  v688 = (*(unint64_t *)v961 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v961[16])
        + (unint64_t)(19 * *(_QWORD *)&v961[8]) * (unsigned __int128)*(unint64_t *)&v961[8]
        + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v960 + 1))) >> 64;
  v687 = *(_QWORD *)v961 * 38 * *(_QWORD *)&v961[16]
       + 19 * *(_QWORD *)&v961[8] * *(_QWORD *)&v961[8]
       + v960 * 2 * *((_QWORD *)&v960 + 1);
  v49 = __CFADD__(v687, v683);
  v689 = v687 + v683;
  if (v49)
    ++v688;
  *((_QWORD *)&v691 + 1) = v688;
  *(_QWORD *)&v691 = v689;
  v690 = v691 >> 51;
  v692 = v689 & 0x7FFFFFFFFFFFFLL;
  v49 = __CFADD__(v686, v690);
  v693 = v686 + v690;
  if (v49)
    ++v685;
  *((_QWORD *)&v695 + 1) = v685;
  *(_QWORD *)&v695 = v693;
  v694 = v695 >> 51;
  v696 = v693 & 0x7FFFFFFFFFFFFLL;
  v697 = v684 + v694;
  if (__CFADD__((_QWORD)v684, v694))
    v698 = *((_QWORD *)&v684 + 1) + 1;
  else
    v698 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)v961)
          + (unint64_t)(19 * *(_QWORD *)&v961[16]) * (unsigned __int128)*(unint64_t *)&v961[16]
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])) >> 64;
  *((_QWORD *)&v700 + 1) = v698;
  *(_QWORD *)&v700 = v697;
  v699 = v700 >> 51;
  v701 = v697 & 0x7FFFFFFFFFFFFLL;
  v702 = v682 + v699;
  if (__CFADD__((_QWORD)v682, v699))
    v703 = *((_QWORD *)&v682 + 1) + 1;
  else
    v703 = (*((unint64_t *)&v960 + 1) * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[8])
          + *(unint64_t *)v961 * (unsigned __int128)*(unint64_t *)v961
          + (unint64_t)v960 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v961[16])) >> 64;
  *((_QWORD *)&v704 + 1) = v703;
  *(_QWORD *)&v704 = v702;
  v705 = v702 & 0x7FFFFFFFFFFFFLL;
  v706 = (v681 & 0x7FFFFFFFFFFFFLL) + 19 * (v704 >> 51);
  v707 = v706 & 0x7FFFFFFFFFFFFLL;
  v708 = v692 + (v706 >> 51);
  v709 = v708 & 0x7FFFFFFFFFFFFLL;
  v710 = v696 + (v708 >> 51);
  v711 = 38 * v705;
  v712 = 2 * v705;
  v713 = ((unint64_t)v705 * (unsigned __int128)(unint64_t)(19 * v705)) >> 64;
  v714 = v705 * 19 * v705;
  v715 = v710 * 38 * v701;
  v716 = ((unint64_t)v709 * (unsigned __int128)(unint64_t)(2 * v701)) >> 64;
  v717 = v709 * 2 * v701;
  v718 = ((unint64_t)(2 * v710) * (unsigned __int128)(unint64_t)v709) >> 64;
  v719 = (unint64_t)v709 * (unsigned __int128)(unint64_t)v711
       + (unint64_t)v707 * (unsigned __int128)(unint64_t)v707;
  v720 = ((unint64_t)v707 * (unsigned __int128)(unint64_t)v712) >> 64;
  v721 = v707 * v712;
  v49 = __CFADD__((_QWORD)v719, v715);
  v722 = v719 + v715;
  v723 = ((unint64_t)v707 * (unsigned __int128)(unint64_t)(2 * v701)) >> 64;
  v724 = v707 * 2 * v701;
  v725 = 2 * v710 * v709;
  v726 = (unint64_t)v709 * (unsigned __int128)(unint64_t)v709
       + (unint64_t)v701 * (unsigned __int128)(unint64_t)v711
       + (unint64_t)(2 * v710) * (unsigned __int128)(unint64_t)v707;
  v728 = (unint64_t)v710 * (unsigned __int128)(unint64_t)v711
       + (unint64_t)v701 * (unsigned __int128)(unint64_t)(19 * v701)
       + (unint64_t)(2 * v709) * (unsigned __int128)(unint64_t)v707;
  v727 = *((_QWORD *)&v728 + 1);
  *((_QWORD *)&v704 + 1) = (((unint64_t)v710 * (unsigned __int128)(unint64_t)(38 * v701)) >> 64)
                         + v49
                         + *((_QWORD *)&v719 + 1);
  *(_QWORD *)&v704 = v722;
  v729 = v704 >> 51;
  if (__CFADD__((_QWORD)v728, v729))
    v727 = *((_QWORD *)&v728 + 1) + 1;
  *((_QWORD *)&v730 + 1) = v727;
  *(_QWORD *)&v730 = v728 + v729;
  v732 = (v726 + ((unsigned __int128)v730 >> 51)) >> 64;
  v731 = v726 + ((unsigned __int128)v730 >> 51);
  v733 = __PAIR128__(v716, v717)
       + __PAIR128__(v720, v721)
       + (unint64_t)v710 * (unsigned __int128)(unint64_t)v710;
  *((_QWORD *)&v730 + 1) = (__PAIR128__(v723, v724)
                          + __PAIR128__(v713, v714)
                          + __PAIR128__(v718, v725)
                          + ((v726 + ((unsigned __int128)v730 >> 51)) >> 51)) >> 64;
  *(_QWORD *)&v730 = v724 + v714 + v725 + ((__int128)__PAIR128__(v732, v731) >> 51);
  v734 = v730 >> 51;
  v735.i64[0] = v730;
  *((_QWORD *)&v730 + 1) = (v733 + ((unsigned __int128)v730 >> 51)) >> 64;
  *(_QWORD *)&v730 = v733 + v734;
  v735.i64[1] = v733 + v734;
  v909 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL);
  v736 = (v722 & 0x7FFFFFFFFFFFFLL) + 19 * (v730 >> 51);
  v737 = ((v728 + v729) & 0x7FFFFFFFFFFFFLL) + (v736 >> 51);
  *(_QWORD *)&v960 = v736 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v960 + 1) = v737 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)v961 = (v731 & 0x7FFFFFFFFFFFFLL) + (v737 >> 51);
  *(int8x16_t *)&v961[8] = vandq_s8(v735, v909);
  fe_mul_impl((uint64_t)&v916, (unint64_t *)&v960, (unint64_t *)&v952);
  fe_mul_impl((uint64_t)&v916, (unint64_t *)&v916, c.h);
  v738 = *((unint64_t *)&v916 + 1) * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v918[0])
       + (unint64_t)v917 * (unsigned __int128)(unint64_t)(38 * *((_QWORD *)&v917 + 1))
       + (unint64_t)v916 * (unsigned __int128)(unint64_t)v916;
  v739 = *((unint64_t *)&v916 + 1) * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v917 + 1))
       + (unint64_t)v917 * (unsigned __int128)(unint64_t)v917
       + (unint64_t)v916 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v918[0]);
  v740 = *((unint64_t *)&v916 + 1) * (unsigned __int128)(unint64_t)(2 * v917)
       + (unint64_t)(19 * *(_QWORD *)&v918[0]) * (unsigned __int128)*(unint64_t *)&v918[0]
       + (unint64_t)v916 * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v917 + 1));
  v741 = (*((unint64_t *)&v916 + 1) * (unsigned __int128)*((unint64_t *)&v916 + 1)
        + *((unint64_t *)&v917 + 1) * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v918[0])
        + (unint64_t)v916 * (unsigned __int128)(unint64_t)(2 * v917)) >> 64;
  v742 = *((_QWORD *)&v916 + 1) * *((_QWORD *)&v916 + 1)
       + *((_QWORD *)&v917 + 1) * 38 * *(_QWORD *)&v918[0]
       + v916 * 2 * v917;
  v744 = ((unint64_t)v917 * (unsigned __int128)(unint64_t)(38 * *(_QWORD *)&v918[0])
        + (unint64_t)(19 * *((_QWORD *)&v917 + 1)) * (unsigned __int128)*((unint64_t *)&v917 + 1)
        + (unint64_t)v916 * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v916 + 1))) >> 64;
  v743 = v917 * 38 * *(_QWORD *)&v918[0]
       + 19 * *((_QWORD *)&v917 + 1) * *((_QWORD *)&v917 + 1)
       + v916 * 2 * *((_QWORD *)&v916 + 1);
  v745 = v738 >> 51;
  v49 = __CFADD__(v743, v745);
  v746 = v743 + v745;
  if (v49)
    ++v744;
  *((_QWORD *)&v748 + 1) = v744;
  *(_QWORD *)&v748 = v746;
  v747 = v748 >> 51;
  v49 = __CFADD__(v742, v747);
  v749 = v742 + v747;
  if (v49)
    ++v741;
  *((_QWORD *)&v751 + 1) = v741;
  *(_QWORD *)&v751 = v749;
  v750 = v751 >> 51;
  v752 = v740 + v750;
  if (__CFADD__((_QWORD)v740, v750))
    v753 = *((_QWORD *)&v740 + 1) + 1;
  else
    v753 = (*((unint64_t *)&v916 + 1) * (unsigned __int128)(unint64_t)(2 * v917)
          + (unint64_t)(19 * *(_QWORD *)&v918[0]) * (unsigned __int128)*(unint64_t *)&v918[0]
          + (unint64_t)v916 * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v917 + 1))) >> 64;
  *((_QWORD *)&v755 + 1) = v753;
  *(_QWORD *)&v755 = v752;
  v754 = v755 >> 51;
  v49 = __CFADD__((_QWORD)v739, v754);
  v756 = v739 + v754;
  v757.i64[0] = v752;
  if (v49)
    v758 = *((_QWORD *)&v739 + 1) + 1;
  else
    v758 = (*((unint64_t *)&v916 + 1) * (unsigned __int128)(unint64_t)(2 * *((_QWORD *)&v917 + 1))
          + (unint64_t)v917 * (unsigned __int128)(unint64_t)v917
          + (unint64_t)v916 * (unsigned __int128)(unint64_t)(2 * *(_QWORD *)&v918[0])) >> 64;
  *((_QWORD *)&v759 + 1) = v758;
  *(_QWORD *)&v759 = v756;
  v757.i64[1] = v756;
  v760 = (v738 & 0x7FFFFFFFFFFFFLL) + 19 * (v759 >> 51);
  v761 = (v746 & 0x7FFFFFFFFFFFFLL) + (v760 >> 51);
  *(_QWORD *)&v921[0] = v760 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v921[0] + 1) = v761 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)&v921[1] = (v749 & 0x7FFFFFFFFFFFFLL) + (v761 >> 51);
  *(int8x16_t *)((char *)&v921[1] + 8) = vandq_s8(v757, v909);
  fe_mul_impl((uint64_t)v921, (unint64_t *)v921, (unint64_t *)v923);
  v762 = v921[0];
  v763 = *(_QWORD *)&v921[0] - v39 + 0xFFFFFFFFFFFDALL;
  v764 = v921[1];
  v765 = *(_QWORD *)&v921[2];
  v766 = *((_QWORD *)&v921[0] + 1) - v40 + (v763 >> 51) + 0xFFFFFFFFFFFFELL;
  v767 = *(_QWORD *)&v921[1] - v907 + (v766 >> 51) + 0xFFFFFFFFFFFFELL;
  v768 = *((_QWORD *)&v921[1] + 1) - v905 + (v767 >> 51) + 0xFFFFFFFFFFFFELL;
  v769 = *(_QWORD *)&v921[2] - v903 + (v768 >> 51) + 0xFFFFFFFFFFFFELL;
  v770 = (v763 & 0x7FFFFFFFFFFFFLL) + 19 * (v769 >> 51);
  v771 = (v766 & 0x7FFFFFFFFFFFFLL) + (v770 >> 51);
  *(_QWORD *)&v960 = v770 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v960 + 1) = v771 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)v961 = (v767 & 0x7FFFFFFFFFFFFLL) + (v771 >> 51);
  *(_QWORD *)&v961[8] = v768 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)&v961[16] = v769 & 0x7FFFFFFFFFFFFLL;
  fe_tobytes(v1008, &v960);
  v772 = vorrq_s8(v1008[0], v1008[1]);
  if (!*(_QWORD *)&vorr_s8(*(int8x8_t *)v772.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v772, v772, 8uLL)))
    goto LABEL_201;
  v773 = *((_QWORD *)&v762 + 1) + v40 + ((unint64_t)(v762 + v39) >> 51);
  v774 = v764 + v907 + (v773 >> 51);
  v775 = *((_QWORD *)&v764 + 1) + v905 + (v774 >> 51);
  v776 = v765 + v903 + (v775 >> 51);
  v777 = ((v762 + v39) & 0x7FFFFFFFFFFFFLL) + 19 * (v776 >> 51);
  v778 = (v773 & 0x7FFFFFFFFFFFFLL) + (v777 >> 51);
  *(_QWORD *)&v960 = v777 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v960 + 1) = v778 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)v961 = (v774 & 0x7FFFFFFFFFFFFLL) + (v778 >> 51);
  *(_QWORD *)&v961[8] = v775 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)&v961[16] = v776 & 0x7FFFFFFFFFFFFLL;
  fe_tobytes(v1008, &v960);
  v779 = vorrq_s8(v1008[0], v1008[1]);
  if (vorr_s8(*(int8x8_t *)v779.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v779, v779, 8uLL)))
    return 0;
  fe_mul_impl((uint64_t)&v916, (unint64_t *)&v916, sqrtm1);
LABEL_201:
  fe_tobytes(&v960, &v916);
  if ((v960 & 1) != *((unsigned __int8 *)a4 + 31) >> 7)
  {
    v780 = ((unint64_t)(0xFFFFFFFFFFFDALL - v916) >> 51) - *((_QWORD *)&v916 + 1) + 0xFFFFFFFFFFFFELL;
    v781 = (v780 >> 51) - v917 + 0xFFFFFFFFFFFFELL;
    v782 = (v781 >> 51) - *((_QWORD *)&v917 + 1) + 0xFFFFFFFFFFFFELL;
    v783 = (v782 >> 51) - *(_QWORD *)&v918[0] + 0xFFFFFFFFFFFFELL;
    v784 = ((0xFFFFFFFFFFFDALL - v916) & 0x7FFFFFFFFFFFFLL) + 19 * (v783 >> 51);
    v785 = (v780 & 0x7FFFFFFFFFFFFLL) + (v784 >> 51);
    *(_QWORD *)&v916 = v784 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v916 + 1) = v785 & 0x7FFFFFFFFFFFFLL;
    *(_QWORD *)&v917 = (v781 & 0x7FFFFFFFFFFFFLL) + (v785 >> 51);
    *((_QWORD *)&v917 + 1) = v782 & 0x7FFFFFFFFFFFFLL;
    *(_QWORD *)&v918[0] = v783 & 0x7FFFFFFFFFFFFLL;
  }
  fe_mul_impl((uint64_t)&v918[5] + 8, (unint64_t *)&v916, (unint64_t *)v918 + 1);
  v786 = ((unint64_t)(0xFFFFFFFFFFFDALL - v916) >> 51) - *((_QWORD *)&v916 + 1) + 0xFFFFFFFFFFFFELL;
  v787 = (v786 >> 51) - v917 + 0xFFFFFFFFFFFFELL;
  v788 = (v787 >> 51) - *((_QWORD *)&v917 + 1) + 0xFFFFFFFFFFFFELL;
  v789 = (v788 >> 51) - *(_QWORD *)&v918[0] + 0xFFFFFFFFFFFFELL;
  v790 = ((0xFFFFFFFFFFFDALL - v916) & 0x7FFFFFFFFFFFFLL) + 19 * (v789 >> 51);
  v791 = (v786 & 0x7FFFFFFFFFFFFLL) + (v790 >> 51);
  *(_QWORD *)&v916 = v790 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v916 + 1) = v791 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)&v917 = (v787 & 0x7FFFFFFFFFFFFLL) + (v791 >> 51);
  *((_QWORD *)&v917 + 1) = v788 & 0x7FFFFFFFFFFFFLL;
  v792 = ((unint64_t)(0xFFFFFFFFFFFDALL - *((_QWORD *)&v918[5] + 1)) >> 51) - v919 + 0xFFFFFFFFFFFFELL;
  v793 = (v792 >> 51) - *((_QWORD *)&v919 + 1) + 0xFFFFFFFFFFFFELL;
  v794 = (v793 >> 51) - v920 + 0xFFFFFFFFFFFFELL;
  v795 = (v794 >> 51) - *((_QWORD *)&v920 + 1) + 0xFFFFFFFFFFFFELL;
  v796 = ((0xFFFFFFFFFFFDALL - *((_QWORD *)&v918[5] + 1)) & 0x7FFFFFFFFFFFFLL) + 19 * (v795 >> 51);
  v797 = (v792 & 0x7FFFFFFFFFFFFLL) + (v796 >> 51);
  *(_QWORD *)&v918[0] = v789 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v918[5] + 1) = v796 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)&v919 = v797 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v919 + 1) = (v793 & 0x7FFFFFFFFFFFFLL) + (v797 >> 51);
  *(_QWORD *)&v920 = v794 & 0x7FFFFFFFFFFFFLL;
  *((_QWORD *)&v920 + 1) = v795 & 0x7FFFFFFFFFFFFLL;
  v798 = *a3;
  v799 = a3[1];
  v800 = a3[2];
  *(int8x16_t *)&v951[16] = a3[3];
  *(int8x16_t *)v951 = v800;
  if (*(_QWORD *)&v951[24] > 0x1000000000000000uLL
    || *(_QWORD *)&v951[24] == 0x1000000000000000
    && (*(_OWORD *)&v951[8] > 0x14DEF9DEA2F79CD6uLL
     || *(_OWORD *)v951 > __PAIR128__(0x14DEF9DEA2F79CD6, 0x5812631A5CF5D3ECLL)))
  {
    return 0;
  }
  v904 = v799;
  v906 = v798;
  *(_OWORD *)c.h = xmmword_208F1E540;
  *(_OWORD *)&c.h[2] = xmmword_208F1E550;
  *(_OWORD *)&c.h[4] = xmmword_208F1E560;
  *(_OWORD *)&c.h[6] = xmmword_208F1E570;
  memset(&c.Nl, 0, 144);
  *(_QWORD *)&c.num = 0x4000000000;
  SHA512_Update(&c, a3, 0x20uLL);
  SHA512_Update(&c, a4, 0x20uLL);
  SHA512_Update(&c, a1, a2);
  sha512_final_impl(v949, c.md_len, (int8x16_t *)&c);
  x25519_sc_reduce((unsigned __int16 *)v949);
  v802 = 0;
  memset(v915, 0, 40);
  v913 = 0u;
  v914 = 0u;
  v803 = (char *)v949 + 1;
  v911 = 0u;
  v912 = 0u;
  v910 = 0u;
  v804 = (int8x8_t)0x706050403020100;
  do
  {
    v805 = v803 - 1;
    v806 = (uint8x8_t)vld1_dup_s8(v805);
    v807 = (uint8x8_t)vld1_dup_s8(v803);
    v808 = (uint8x8_t)vneg_s8(vand_s8(v804, (int8x8_t)0x707070707070707));
    v809 = (int8x8_t *)&v1008[v802];
    *v809 = vand_s8((int8x8_t)vshl_u8(v806, v808), (int8x8_t)0x101010101010101);
    v809[1] = vand_s8((int8x8_t)vshl_u8(v807, v808), (int8x8_t)0x101010101010101);
    ++v802;
    v804 = vadd_s8(v804, (int8x8_t)0x1010101010101010);
    v803 += 2;
  }
  while (v802 != 16);
  v810 = 0;
  v811 = &v1008[0].i8[2];
  v812 = 1;
  do
  {
    if (v810 > 0xFE || !v1008[0].i8[v810])
      goto LABEL_212;
    v813 = v1008[0].i8[v812];
    if (v1008[0].i8[v812])
    {
      v814 = v1008[0].i8[v810];
      v815 = 2 * v813;
      v816 = 2 * v813 + v814;
      if (v816 > 15)
      {
        v817 = v814 - v815;
        if (v817 < -15)
          goto LABEL_212;
        v1008[0].i8[v810] = v817;
        v818 = v810;
        while (v1008[0].i8[v818 + 1])
        {
          v1008[0].i8[++v818] = 0;
          if (v818 >= 0xFF)
            goto LABEL_223;
        }
        v1008[0].i8[v818 + 1] = 1;
        if (v810 > 0xFD)
          goto LABEL_212;
      }
      else
      {
        v1008[0].i8[v810] = v816;
        v1008[0].i8[v812] = 0;
        if (v810 > 0xFD)
          goto LABEL_212;
      }
    }
    else
    {
LABEL_223:
      if (v810 > 0xFD)
        goto LABEL_212;
    }
    if (v1008[0].i8[v812 + 1])
    {
      v819 = v1008[0].i8[v810];
      v820 = 4 * v1008[0].i8[v812 + 1];
      if (v820 + v819 >= 16)
      {
        v821 = v819 - v820;
        if (v821 < -15)
          goto LABEL_212;
        v822 = 0;
        v1008[0].i8[v810] = v821;
        while (v811[v822])
        {
          v811[v822++] = 0;
          if ((unint64_t)(v812 + v822) >= 0xFF)
            goto LABEL_232;
        }
        v811[v822] = 1;
        if (v810 > 0xFC)
          goto LABEL_212;
      }
      else
      {
        v1008[0].i8[v810] = v820 + v819;
        v1008[0].i8[v812 + 1] = 0;
        if (v810 > 0xFC)
          goto LABEL_212;
      }
    }
    else
    {
LABEL_232:
      if (v810 > 0xFC)
        goto LABEL_212;
    }
    v823 = v812 + 2;
    if (v1008[0].i8[v812 + 2])
    {
      v824 = v1008[0].i8[v810];
      v825 = 8 * v1008[0].i8[v812 + 2];
      if (v825 + v824 >= 16)
      {
        v826 = v824 - v825;
        if (v826 < -15)
          goto LABEL_212;
        v1008[0].i8[v810] = v826;
        while (v1008[0].i8[v823])
        {
          v1008[0].i8[v823] = 0;
          v49 = v823++ >= 0xFF;
          if (v49)
            goto LABEL_247;
        }
        v1008[0].i8[v823] = 1;
      }
      else
      {
        v1008[0].i8[v810] = v825 + v824;
        v1008[0].i8[v823] = 0;
      }
    }
LABEL_247:
    if (v810 <= 0xFB)
    {
      v827 = v812 + 3;
      if (v1008[0].i8[v812 + 3])
      {
        v828 = v1008[0].i8[v810];
        v829 = 16 * v1008[0].i8[v812 + 3];
        if (v829 + v828 >= 16)
        {
          v830 = v828 - v829;
          if (v830 < -15)
            goto LABEL_212;
          v1008[0].i8[v810] = v830;
          while (v1008[0].i8[v827])
          {
            v1008[0].i8[v827] = 0;
            v49 = v827++ >= 0xFF;
            if (v49)
              goto LABEL_258;
          }
          v1008[0].i8[v827] = 1;
        }
        else
        {
          v1008[0].i8[v810] = v829 + v828;
          v1008[0].i8[v827] = 0;
        }
      }
LABEL_258:
      if (v810 <= 0xFA)
      {
        v831 = v812 + 4;
        if (v1008[0].i8[v812 + 4])
        {
          v832 = v1008[0].i8[v810];
          v833 = 32 * v1008[0].i8[v812 + 4];
          if (v833 + v832 >= 16)
          {
            v834 = v832 - v833;
            if (v834 < -15)
              goto LABEL_212;
            v1008[0].i8[v810] = v834;
            while (v1008[0].i8[v831])
            {
              v1008[0].i8[v831] = 0;
              v49 = v831++ >= 0xFF;
              if (v49)
                goto LABEL_269;
            }
            v1008[0].i8[v831] = 1;
          }
          else
          {
            v1008[0].i8[v810] = v833 + v832;
            v1008[0].i8[v831] = 0;
          }
        }
LABEL_269:
        if (v810 <= 0xF9)
        {
          v835 = v812 + 5;
          if (v1008[0].i8[v812 + 5])
          {
            v836 = v1008[0].i8[v810];
            v837 = v1008[0].i8[v812 + 5] << 6;
            if (v837 + v836 < 16)
            {
              v1008[0].i8[v810] = v837 + v836;
              v1008[0].i8[v835] = 0;
            }
            else
            {
              v838 = v836 - v837;
              if (v838 >= -15)
              {
                v1008[0].i8[v810] = v838;
                while (v1008[0].i8[v835])
                {
                  v1008[0].i8[v835] = 0;
                  v49 = v835++ >= 0xFF;
                  if (v49)
                    goto LABEL_212;
                }
                v1008[0].i8[v835] = 1;
              }
            }
          }
        }
      }
    }
LABEL_212:
    ++v810;
    ++v812;
    ++v811;
  }
  while (v810 != 256);
  v839 = 0;
  v840 = (int8x8_t)0x706050403020100;
  v841 = &v951[1];
  do
  {
    v842 = v841 - 1;
    v843 = (uint8x8_t)vld1_dup_s8(v842);
    v844 = (uint8x8_t)vld1_dup_s8(v841);
    v845 = (uint8x8_t)vneg_s8(vand_s8(v840, (int8x8_t)0x707070707070707));
    v846 = (int8x8_t *)((char *)&v1005 + v839);
    *v846 = vand_s8((int8x8_t)vshl_u8(v843, v845), (int8x8_t)0x101010101010101);
    v846[1] = vand_s8((int8x8_t)vshl_u8(v844, v845), (int8x8_t)0x101010101010101);
    v839 += 16;
    v840 = vadd_s8(v840, (int8x8_t)0x1010101010101010);
    v841 += 2;
  }
  while (v839 != 256);
  v847 = 0;
  v848 = (char *)&v1005 + 2;
  v849 = 1;
  while (2)
  {
    if (v847 <= 0xFE && *((_BYTE *)&v1005 + v847))
    {
      v850 = *((char *)&v1005 + v849);
      if (*((_BYTE *)&v1005 + v849))
      {
        v851 = *((char *)&v1005 + v847);
        v852 = 2 * v850;
        v853 = 2 * v850 + v851;
        if (v853 > 15)
        {
          v854 = v851 - v852;
          if (v854 >= -15)
          {
            *((_BYTE *)&v1005 + v847) = v854;
            v855 = v847;
            while (*((_BYTE *)&v1005 + v855 + 1))
            {
              *((_BYTE *)&v1005 + ++v855) = 0;
              if (v855 >= 0xFF)
                goto LABEL_294;
            }
            *((_BYTE *)&v1005 + v855 + 1) = 1;
            if (v847 <= 0xFD)
            {
LABEL_295:
              if (*((_BYTE *)&v1005 + v849 + 1))
              {
                v856 = *((char *)&v1005 + v847);
                v857 = 4 * *((char *)&v1005 + v849 + 1);
                if (v857 + v856 >= 16)
                {
                  v858 = v856 - v857;
                  if (v858 < -15)
                    goto LABEL_283;
                  v859 = 0;
                  *((_BYTE *)&v1005 + v847) = v858;
                  while (v848[v859])
                  {
                    v848[v859++] = 0;
                    if ((unint64_t)(v849 + v859) >= 0xFF)
                      goto LABEL_303;
                  }
                  v848[v859] = 1;
                  if (v847 > 0xFC)
                    goto LABEL_283;
                }
                else
                {
                  *((_BYTE *)&v1005 + v847) = v857 + v856;
                  *((_BYTE *)&v1005 + v849 + 1) = 0;
                  if (v847 > 0xFC)
                    goto LABEL_283;
                }
              }
              else
              {
LABEL_303:
                if (v847 > 0xFC)
                  goto LABEL_283;
              }
              v860 = v849 + 2;
              if (*((_BYTE *)&v1005 + v849 + 2))
              {
                v861 = *((char *)&v1005 + v847);
                v862 = 8 * *((char *)&v1005 + v849 + 2);
                if (v862 + v861 >= 16)
                {
                  v863 = v861 - v862;
                  if (v863 < -15)
                    goto LABEL_283;
                  *((_BYTE *)&v1005 + v847) = v863;
                  while (*((_BYTE *)&v1005 + v860))
                  {
                    *((_BYTE *)&v1005 + v860) = 0;
                    v49 = v860++ >= 0xFF;
                    if (v49)
                      goto LABEL_318;
                  }
                  *((_BYTE *)&v1005 + v860) = 1;
                }
                else
                {
                  *((_BYTE *)&v1005 + v847) = v862 + v861;
                  *((_BYTE *)&v1005 + v860) = 0;
                }
              }
LABEL_318:
              if (v847 <= 0xFB)
              {
                v864 = v849 + 3;
                if (*((_BYTE *)&v1005 + v849 + 3))
                {
                  v865 = *((char *)&v1005 + v847);
                  v866 = 16 * *((char *)&v1005 + v849 + 3);
                  if (v866 + v865 >= 16)
                  {
                    v867 = v865 - v866;
                    if (v867 < -15)
                      goto LABEL_283;
                    *((_BYTE *)&v1005 + v847) = v867;
                    while (*((_BYTE *)&v1005 + v864))
                    {
                      *((_BYTE *)&v1005 + v864) = 0;
                      v49 = v864++ >= 0xFF;
                      if (v49)
                        goto LABEL_329;
                    }
                    *((_BYTE *)&v1005 + v864) = 1;
                  }
                  else
                  {
                    *((_BYTE *)&v1005 + v847) = v866 + v865;
                    *((_BYTE *)&v1005 + v864) = 0;
                  }
                }
LABEL_329:
                if (v847 <= 0xFA)
                {
                  v868 = v849 + 4;
                  if (*((_BYTE *)&v1005 + v849 + 4))
                  {
                    v869 = *((char *)&v1005 + v847);
                    v870 = 32 * *((char *)&v1005 + v849 + 4);
                    if (v870 + v869 >= 16)
                    {
                      v871 = v869 - v870;
                      if (v871 < -15)
                        goto LABEL_283;
                      *((_BYTE *)&v1005 + v847) = v871;
                      while (*((_BYTE *)&v1005 + v868))
                      {
                        *((_BYTE *)&v1005 + v868) = 0;
                        v49 = v868++ >= 0xFF;
                        if (v49)
                          goto LABEL_340;
                      }
                      *((_BYTE *)&v1005 + v868) = 1;
                    }
                    else
                    {
                      *((_BYTE *)&v1005 + v847) = v870 + v869;
                      *((_BYTE *)&v1005 + v868) = 0;
                    }
                  }
LABEL_340:
                  if (v847 <= 0xF9)
                  {
                    v872 = v849 + 5;
                    if (*((_BYTE *)&v1005 + v849 + 5))
                    {
                      v873 = *((char *)&v1005 + v847);
                      v874 = *((char *)&v1005 + v849 + 5) << 6;
                      if (v874 + v873 < 16)
                      {
                        *((_BYTE *)&v1005 + v847) = v874 + v873;
                        *((_BYTE *)&v1005 + v872) = 0;
                      }
                      else
                      {
                        v875 = v873 - v874;
                        if (v875 >= -15)
                        {
                          *((_BYTE *)&v1005 + v847) = v875;
                          while (*((_BYTE *)&v1005 + v872))
                          {
                            *((_BYTE *)&v1005 + v872) = 0;
                            v49 = v872++ >= 0xFF;
                            if (v49)
                              goto LABEL_283;
                          }
                          *((_BYTE *)&v1005 + v872) = 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          *((_BYTE *)&v1005 + v847) = v853;
          *((_BYTE *)&v1005 + v849) = 0;
          if (v847 <= 0xFD)
            goto LABEL_295;
        }
      }
      else
      {
LABEL_294:
        if (v847 <= 0xFD)
          goto LABEL_295;
      }
    }
LABEL_283:
    ++v847;
    ++v849;
    ++v848;
    if (v847 != 256)
      continue;
    break;
  }
  v929 = 0u;
  v930 = 0u;
  v927 = 0u;
  v928 = 0u;
  v925 = 0u;
  v926 = 0u;
  v924 = 0u;
  memset(v923, 0, sizeof(v923));
  v952 = 0u;
  v953 = 0u;
  v954 = 0u;
  v955 = 0u;
  v956 = 0u;
  v957 = 0u;
  v958 = 0u;
  memset(v959, 0, sizeof(v959));
  memset(v922, 0, sizeof(v922));
  memset(v921, 0, sizeof(v921));
  *(_QWORD *)&v960 = v916 + *((_QWORD *)&v918[0] + 1);
  *((_QWORD *)&v960 + 1) = *((_QWORD *)&v916 + 1) + *(_QWORD *)&v918[1];
  *(_QWORD *)v961 = v917 + *((_QWORD *)&v918[1] + 1);
  *(_QWORD *)&v961[8] = *((_QWORD *)&v917 + 1) + *(_QWORD *)&v918[2];
  *(_QWORD *)&v961[16] = *(_QWORD *)&v918[0] + *((_QWORD *)&v918[2] + 1);
  v962 = *((_QWORD *)&v918[0] + 1) + 0xFFFFFFFFFFFDALL - v916;
  v963 = *(_QWORD *)&v918[1] - *((_QWORD *)&v916 + 1) + 0xFFFFFFFFFFFFELL;
  v964 = *((_QWORD *)&v918[1] + 1) - v917 + 0xFFFFFFFFFFFFELL;
  v965 = *(_QWORD *)&v918[2] - *((_QWORD *)&v917 + 1) + 0xFFFFFFFFFFFFELL;
  v966 = *((_QWORD *)&v918[2] + 1) - *(_QWORD *)&v918[0] + 0xFFFFFFFFFFFFELL;
  v969 = *(_QWORD *)&v918[5];
  v968 = v918[4];
  v967 = v918[3];
  fe_mul_impl((uint64_t)&v970, (unint64_t *)&v918[5] + 1, d2);
  v931 = v916;
  v932 = v917;
  v934 = *(_OWORD *)((char *)v918 + 8);
  v935 = *(_OWORD *)((char *)&v918[1] + 8);
  v933 = *(_QWORD *)&v918[0];
  v936 = *((_QWORD *)&v918[2] + 1);
  v937 = v918[3];
  v938 = v918[4];
  v939 = *(_QWORD *)&v918[5];
  ge_p2_dbl((uint64_t)v923, (unint64_t *)&v931);
  fe_mul_impl((uint64_t)v921, (unint64_t *)v923, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)&v921[2] + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
  fe_mul_impl((uint64_t)v922, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)&v922[2] + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
  x25519_ge_add((uint64_t)v923, (uint64_t)v921, (unint64_t *)&v960);
  fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
  fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
  v971[0] = v952.i64[0] + *((_QWORD *)&v954 + 1);
  v971[1] = v952.i64[1] + v955;
  v971[2] = v953.i64[0] + *((_QWORD *)&v955 + 1);
  v971[3] = v953.i64[1] + v956;
  v971[4] = v954 + *((_QWORD *)&v956 + 1);
  v971[5] = *((_QWORD *)&v954 + 1) + 0xFFFFFFFFFFFDALL - v952.i64[0];
  v971[6] = v955 - v952.i64[1] + 0xFFFFFFFFFFFFELL;
  v971[7] = *((_QWORD *)&v955 + 1) - v953.i64[0] + 0xFFFFFFFFFFFFELL;
  v971[8] = v956 - v953.i64[1] + 0xFFFFFFFFFFFFELL;
  v971[9] = *((_QWORD *)&v956 + 1) - v954 + 0xFFFFFFFFFFFFELL;
  v974 = *(_QWORD *)&v959[0];
  v973 = v958;
  v972 = v957;
  fe_mul_impl((uint64_t)&v975, (unint64_t *)v959 + 1, d2);
  x25519_ge_add((uint64_t)v923, (uint64_t)v921, v971);
  fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
  fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
  v976[0] = v952.i64[0] + *((_QWORD *)&v954 + 1);
  v976[1] = v952.i64[1] + v955;
  v976[2] = v953.i64[0] + *((_QWORD *)&v955 + 1);
  v976[3] = v953.i64[1] + v956;
  v976[4] = v954 + *((_QWORD *)&v956 + 1);
  v976[5] = *((_QWORD *)&v954 + 1) + 0xFFFFFFFFFFFDALL - v952.i64[0];
  v976[6] = v955 - v952.i64[1] + 0xFFFFFFFFFFFFELL;
  v976[7] = *((_QWORD *)&v955 + 1) - v953.i64[0] + 0xFFFFFFFFFFFFELL;
  v976[8] = v956 - v953.i64[1] + 0xFFFFFFFFFFFFELL;
  v976[9] = *((_QWORD *)&v956 + 1) - v954 + 0xFFFFFFFFFFFFELL;
  v979 = *(_QWORD *)&v959[0];
  v978 = v958;
  v977 = v957;
  fe_mul_impl((uint64_t)&v980, (unint64_t *)v959 + 1, d2);
  x25519_ge_add((uint64_t)v923, (uint64_t)v921, v976);
  fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
  fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
  v981[0] = v952.i64[0] + *((_QWORD *)&v954 + 1);
  v981[1] = v952.i64[1] + v955;
  v981[2] = v953.i64[0] + *((_QWORD *)&v955 + 1);
  v981[3] = v953.i64[1] + v956;
  v981[4] = v954 + *((_QWORD *)&v956 + 1);
  v981[5] = *((_QWORD *)&v954 + 1) + 0xFFFFFFFFFFFDALL - v952.i64[0];
  v981[6] = v955 - v952.i64[1] + 0xFFFFFFFFFFFFELL;
  v981[7] = *((_QWORD *)&v955 + 1) - v953.i64[0] + 0xFFFFFFFFFFFFELL;
  v981[8] = v956 - v953.i64[1] + 0xFFFFFFFFFFFFELL;
  v981[9] = *((_QWORD *)&v956 + 1) - v954 + 0xFFFFFFFFFFFFELL;
  v984 = *(_QWORD *)&v959[0];
  v983 = v958;
  v982 = v957;
  fe_mul_impl((uint64_t)&v985, (unint64_t *)v959 + 1, d2);
  x25519_ge_add((uint64_t)v923, (uint64_t)v921, v981);
  fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
  fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
  v986[0] = v952.i64[0] + *((_QWORD *)&v954 + 1);
  v986[1] = v952.i64[1] + v955;
  v986[2] = v953.i64[0] + *((_QWORD *)&v955 + 1);
  v986[3] = v953.i64[1] + v956;
  v986[4] = v954 + *((_QWORD *)&v956 + 1);
  v986[5] = *((_QWORD *)&v954 + 1) + 0xFFFFFFFFFFFDALL - v952.i64[0];
  v986[6] = v955 - v952.i64[1] + 0xFFFFFFFFFFFFELL;
  v986[7] = *((_QWORD *)&v955 + 1) - v953.i64[0] + 0xFFFFFFFFFFFFELL;
  v986[8] = v956 - v953.i64[1] + 0xFFFFFFFFFFFFELL;
  v986[9] = *((_QWORD *)&v956 + 1) - v954 + 0xFFFFFFFFFFFFELL;
  v989 = *(_QWORD *)&v959[0];
  v988 = v958;
  v987 = v957;
  fe_mul_impl((uint64_t)&v990, (unint64_t *)v959 + 1, d2);
  x25519_ge_add((uint64_t)v923, (uint64_t)v921, v986);
  fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
  fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
  v991[0] = v952.i64[0] + *((_QWORD *)&v954 + 1);
  v991[1] = v952.i64[1] + v955;
  v991[2] = v953.i64[0] + *((_QWORD *)&v955 + 1);
  v991[3] = v953.i64[1] + v956;
  v991[4] = v954 + *((_QWORD *)&v956 + 1);
  v991[5] = *((_QWORD *)&v954 + 1) + 0xFFFFFFFFFFFDALL - v952.i64[0];
  v991[6] = v955 - v952.i64[1] + 0xFFFFFFFFFFFFELL;
  v991[7] = *((_QWORD *)&v955 + 1) - v953.i64[0] + 0xFFFFFFFFFFFFELL;
  v991[8] = v956 - v953.i64[1] + 0xFFFFFFFFFFFFELL;
  v991[9] = *((_QWORD *)&v956 + 1) - v954 + 0xFFFFFFFFFFFFELL;
  v994 = *(_QWORD *)&v959[0];
  v993 = v958;
  v992 = v957;
  fe_mul_impl((uint64_t)&v995, (unint64_t *)v959 + 1, d2);
  x25519_ge_add((uint64_t)v923, (uint64_t)v921, v991);
  fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
  fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
  v998 = v958;
  v996[0] = v952.i64[0] + *((_QWORD *)&v954 + 1);
  v996[1] = v952.i64[1] + v955;
  v996[2] = v953.i64[0] + *((_QWORD *)&v955 + 1);
  v996[3] = v953.i64[1] + v956;
  v996[4] = v954 + *((_QWORD *)&v956 + 1);
  v996[5] = *((_QWORD *)&v954 + 1) + 0xFFFFFFFFFFFDALL - v952.i64[0];
  v996[6] = v955 - v952.i64[1] + 0xFFFFFFFFFFFFELL;
  v996[7] = *((_QWORD *)&v955 + 1) - v953.i64[0] + 0xFFFFFFFFFFFFELL;
  v996[8] = v956 - v953.i64[1] + 0xFFFFFFFFFFFFELL;
  v996[9] = *((_QWORD *)&v956 + 1) - v954 + 0xFFFFFFFFFFFFELL;
  v999 = *(_QWORD *)&v959[0];
  v997 = v957;
  fe_mul_impl((uint64_t)v1000, (unint64_t *)v959 + 1, d2);
  x25519_ge_add((uint64_t)v923, (uint64_t)v921, v996);
  fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
  fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
  fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
  v1002 = v958;
  v1000[5] = v952.i64[0] + *((_QWORD *)&v954 + 1);
  v1000[6] = v952.i64[1] + v955;
  v1000[7] = v953.i64[0] + *((_QWORD *)&v955 + 1);
  v1000[8] = v953.i64[1] + v956;
  v1000[9] = v954 + *((_QWORD *)&v956 + 1);
  v1000[10] = *((_QWORD *)&v954 + 1) + 0xFFFFFFFFFFFDALL - v952.i64[0];
  v1000[11] = v955 - v952.i64[1] + 0xFFFFFFFFFFFFELL;
  v1000[12] = *((_QWORD *)&v955 + 1) - v953.i64[0] + 0xFFFFFFFFFFFFELL;
  v1000[13] = v956 - v953.i64[1] + 0xFFFFFFFFFFFFELL;
  v1000[14] = *((_QWORD *)&v956 + 1) - v954 + 0xFFFFFFFFFFFFELL;
  v1003 = *(_QWORD *)&v959[0];
  v1001 = v957;
  fe_mul_impl((uint64_t)&v1004, (unint64_t *)v959 + 1, d2);
  v913 = 0u;
  v914 = 0u;
  v911 = 0u;
  *(_QWORD *)&v912 = 0;
  v910 = 0u;
  *((_QWORD *)&v912 + 1) = 1;
  memset((char *)v915 + 8, 0, 32);
  *(_QWORD *)&v915[0] = 1;
  v876 = 255;
  while (1)
  {
    v877 = v876;
    if (v1008[0].i8[v876] || *((_BYTE *)&v1005 + v876))
      break;
    --v876;
    if (!(_DWORD)v877)
      goto LABEL_367;
  }
  if ((v876 & 0x80000000) == 0)
  {
    while (2)
    {
      ge_p2_dbl((uint64_t)v923, (unint64_t *)&v910);
      v880 = v1008[0].u8[v877];
      if (v1008[0].i8[v877] < 1)
      {
        if ((v880 & 0x80) != 0)
        {
          fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
          fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
          fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
          fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
          v933 = 0;
          v890 = (unint64_t *)&v961[160 * (-(char)v880 >> 1) - 16];
          v931 = 0u;
          v932 = 0u;
          v948 = 0;
          v946 = 0u;
          v947 = 0u;
          v945 = 0;
          v943 = 0u;
          v944 = 0u;
          v942 = 0;
          v940 = 0u;
          v941 = 0u;
          *(_QWORD *)&v923[0] = v952.i64[0] + *((_QWORD *)&v954 + 1);
          *((_QWORD *)&v923[0] + 1) = v952.i64[1] + v955;
          *(_QWORD *)&v923[1] = v953.i64[0] + *((_QWORD *)&v955 + 1);
          *((_QWORD *)&v923[1] + 1) = v953.i64[1] + v956;
          *(_QWORD *)&v923[2] = v954 + *((_QWORD *)&v956 + 1);
          *((_QWORD *)&v923[2] + 1) = *((_QWORD *)&v954 + 1) + 0xFFFFFFFFFFFDALL - v952.i64[0];
          *(_QWORD *)&v924 = v955 - v952.i64[1] + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v924 + 1) = *((_QWORD *)&v955 + 1) - v953.i64[0] + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v925 = v956 - v953.i64[1] + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v925 + 1) = *((_QWORD *)&v956 + 1) - v954 + 0xFFFFFFFFFFFFELL;
          fe_mul_impl((uint64_t)&v943, (unint64_t *)v923, v890 + 5);
          fe_mul_impl((uint64_t)&v946, (unint64_t *)&v923[2] + 1, v890);
          fe_mul_impl((uint64_t)&v940, v890 + 15, (unint64_t *)v959 + 1);
          fe_mul_impl((uint64_t)&v931, (unint64_t *)&v957, v890 + 10);
          *(_QWORD *)&v923[0] = v943 + 0xFFFFFFFFFFFDALL - v946;
          *((_QWORD *)&v923[0] + 1) = *((_QWORD *)&v943 + 1) - *((_QWORD *)&v946 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v923[1] = v944 - v947 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v923[1] + 1) = *((_QWORD *)&v944 + 1) - *((_QWORD *)&v947 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v923[2] = v945 - v948 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v923[2] + 1) = v946 + v943;
          *(_QWORD *)&v924 = *((_QWORD *)&v946 + 1) + *((_QWORD *)&v943 + 1);
          *((_QWORD *)&v924 + 1) = v947 + v944;
          *(_QWORD *)&v925 = *((_QWORD *)&v947 + 1) + *((_QWORD *)&v944 + 1);
          *((_QWORD *)&v925 + 1) = v948 + v945;
          v891 = (((unint64_t)v931 >> 50) & 0x1FFF) + 2 * *((_QWORD *)&v931 + 1);
          v892 = (v891 >> 51) + 2 * v932;
          v893 = (v892 >> 51) + 2 * *((_QWORD *)&v932 + 1);
          v894 = (v893 >> 51) + 2 * v933;
          v895 = 2 * (v931 & 0x3FFFFFFFFFFFFLL) + 19 * (v894 >> 51);
          v896 = (v891 & 0x7FFFFFFFFFFFFLL) + (v895 >> 51);
          v895 &= 0x7FFFFFFFFFFFFuLL;
          v897 = v896 & 0x7FFFFFFFFFFFFLL;
          v898 = (v892 & 0x7FFFFFFFFFFFFLL) + (v896 >> 51);
          *(_QWORD *)&v926 = v895 + 0xFFFFFFFFFFFDALL - v940;
          *((_QWORD *)&v926 + 1) = v897 - *((_QWORD *)&v940 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v927 = v898 - v941 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v927 + 1) = (v893 & 0x7FFFFFFFFFFFFLL) - *((_QWORD *)&v941 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v928 = (v894 & 0x7FFFFFFFFFFFFLL) - v942 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v928 + 1) = v940 + v895;
          *(_QWORD *)&v929 = *((_QWORD *)&v940 + 1) + v897;
          *((_QWORD *)&v929 + 1) = v941 + v898;
          *(_QWORD *)&v930 = *((_QWORD *)&v941 + 1) + (v893 & 0x7FFFFFFFFFFFFLL);
          *((_QWORD *)&v930 + 1) = v942 + (v894 & 0x7FFFFFFFFFFFFLL);
          v878 = *((char *)&v1005 + v877);
          if (v878 < 1)
            goto LABEL_363;
          goto LABEL_359;
        }
        v878 = *((char *)&v1005 + v877);
        if (v878 >= 1)
          goto LABEL_359;
LABEL_363:
        if (v878 < 0)
        {
          fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
          fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
          fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
          fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
          v933 = 0;
          v881 = &Bi[15 * (-(char)v878 >> 1)];
          v931 = 0u;
          v932 = 0u;
          v948 = 0;
          v946 = 0u;
          v947 = 0u;
          v945 = 0;
          v943 = 0u;
          v944 = 0u;
          *(_QWORD *)&v923[0] = v952.i64[0] + *((_QWORD *)&v954 + 1);
          *((_QWORD *)&v923[0] + 1) = v952.i64[1] + v955;
          *(_QWORD *)&v923[1] = v953.i64[0] + *((_QWORD *)&v955 + 1);
          *((_QWORD *)&v923[1] + 1) = v953.i64[1] + v956;
          *(_QWORD *)&v923[2] = v954 + *((_QWORD *)&v956 + 1);
          *((_QWORD *)&v923[2] + 1) = *((_QWORD *)&v954 + 1) + 0xFFFFFFFFFFFDALL - v952.i64[0];
          *(_QWORD *)&v924 = v955 - v952.i64[1] + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v924 + 1) = *((_QWORD *)&v955 + 1) - v953.i64[0] + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v925 = v956 - v953.i64[1] + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v925 + 1) = *((_QWORD *)&v956 + 1) - v954 + 0xFFFFFFFFFFFFELL;
          fe_mul_impl((uint64_t)&v946, (unint64_t *)v923, v881 + 5);
          fe_mul_impl((uint64_t)&v931, (unint64_t *)&v923[2] + 1, v881);
          fe_mul_impl((uint64_t)&v943, v881 + 10, (unint64_t *)v959 + 1);
          *(_QWORD *)&v923[0] = v946 + 0xFFFFFFFFFFFDALL - v931;
          *((_QWORD *)&v923[0] + 1) = *((_QWORD *)&v946 + 1) - *((_QWORD *)&v931 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v923[1] = v947 - v932 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v923[1] + 1) = *((_QWORD *)&v947 + 1) - *((_QWORD *)&v932 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v923[2] = v948 - v933 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v923[2] + 1) = v931 + v946;
          *(_QWORD *)&v924 = *((_QWORD *)&v931 + 1) + *((_QWORD *)&v946 + 1);
          *((_QWORD *)&v924 + 1) = v932 + v947;
          *(_QWORD *)&v925 = *((_QWORD *)&v932 + 1) + *((_QWORD *)&v947 + 1);
          *((_QWORD *)&v925 + 1) = v933 + v948;
          v882 = (((unint64_t)v957 >> 50) & 0x1FFF) + 2 * *((_QWORD *)&v957 + 1);
          v883 = (v882 >> 51) + 2 * v958;
          v884 = (v883 >> 51) + 2 * *((_QWORD *)&v958 + 1);
          v885 = (v884 >> 51) + 2 * *(_QWORD *)&v959[0];
          v886 = 2 * (v957 & 0x3FFFFFFFFFFFFLL) + 19 * (v885 >> 51);
          v887 = (v882 & 0x7FFFFFFFFFFFFLL) + (v886 >> 51);
          v886 &= 0x7FFFFFFFFFFFFuLL;
          v888 = v887 & 0x7FFFFFFFFFFFFLL;
          v889 = (v883 & 0x7FFFFFFFFFFFFLL) + (v887 >> 51);
          *(_QWORD *)&v926 = v886 + 0xFFFFFFFFFFFDALL - v943;
          *((_QWORD *)&v926 + 1) = v888 - *((_QWORD *)&v943 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v927 = v889 - v944 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v927 + 1) = (v884 & 0x7FFFFFFFFFFFFLL) - *((_QWORD *)&v944 + 1) + 0xFFFFFFFFFFFFELL;
          *(_QWORD *)&v928 = (v885 & 0x7FFFFFFFFFFFFLL) - v945 + 0xFFFFFFFFFFFFELL;
          *((_QWORD *)&v928 + 1) = v943 + v886;
          *(_QWORD *)&v929 = *((_QWORD *)&v943 + 1) + v888;
          *((_QWORD *)&v929 + 1) = v944 + v889;
          *(_QWORD *)&v930 = *((_QWORD *)&v944 + 1) + (v884 & 0x7FFFFFFFFFFFFLL);
          *((_QWORD *)&v930 + 1) = v945 + (v885 & 0x7FFFFFFFFFFFFLL);
        }
      }
      else
      {
        fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
        fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
        fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
        fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
        x25519_ge_add((uint64_t)v923, (uint64_t)&v952, (unint64_t *)&v961[160 * (v880 >> 1) - 16]);
        v878 = *((char *)&v1005 + v877);
        if (v878 < 1)
          goto LABEL_363;
LABEL_359:
        fe_mul_impl((uint64_t)&v952, (unint64_t *)v923, (unint64_t *)&v928 + 1);
        fe_mul_impl((uint64_t)&v954 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
        fe_mul_impl((uint64_t)&v957, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
        fe_mul_impl((uint64_t)v959 + 8, (unint64_t *)v923, (unint64_t *)&v923[2] + 1);
        ge_madd((uint64_t)v923, (uint64_t)&v952, &Bi[15 * (v878 >> 1)]);
      }
      fe_mul_impl((uint64_t)&v910, (unint64_t *)v923, (unint64_t *)&v928 + 1);
      fe_mul_impl((uint64_t)&v912 + 8, (unint64_t *)&v923[2] + 1, (unint64_t *)&v926);
      fe_mul_impl((uint64_t)v915, (unint64_t *)&v926, (unint64_t *)&v928 + 1);
      if (v877-- <= 0)
        break;
      continue;
    }
  }
LABEL_367:
  memset(v1008, 0, 40);
  v1007 = 0;
  v1006 = 0u;
  v1005 = 0u;
  memset(v923, 0, 40);
  v960 = v915[0];
  *(_OWORD *)v961 = v915[1];
  *(_QWORD *)&v961[16] = *(_QWORD *)&v915[2];
  fe_loose_invert((uint64_t)v1008, (unint64_t *)&v960);
  fe_mul_impl((uint64_t)&v1005, (unint64_t *)&v910, (unint64_t *)v1008);
  fe_mul_impl((uint64_t)v923, (unint64_t *)&v912 + 1, (unint64_t *)v1008);
  fe_tobytes(&v952, v923);
  fe_tobytes(&v960, &v1005);
  v953.i8[15] ^= (_BYTE)v960 << 7;
  return (vmaxvq_u8((uint8x16_t)vornq_s8(vmvnq_s8(vceqq_s8(v906, v952)), vceqq_s8(v904, v953))) & 1) == 0;
}

_BYTE *X25519_public_from_private(_BYTE *a1, __int128 *a2)
{
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  unint64_t v7[5];
  unint64_t v8[5];
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v3 = a2[1];
  v18 = *a2;
  v19 = v3;
  LOBYTE(v18) = v18 & 0xF8;
  HIBYTE(v19) = HIBYTE(v3) & 0x3F | 0x40;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  memset(v9, 0, sizeof(v9));
  x25519_ge_scalarmult_base((uint64_t)v9, (unsigned __int8 *)&v18);
  v6 = 0;
  memset(v5, 0, sizeof(v5));
  v8[0] = *((_QWORD *)&v10 + 1) + v13;
  v8[1] = v11 + *((_QWORD *)&v13 + 1);
  v8[2] = *((_QWORD *)&v11 + 1) + v14;
  v8[3] = v12 + *((_QWORD *)&v14 + 1);
  v8[4] = *((_QWORD *)&v12 + 1) + v15;
  v7[0] = v13 - *((_QWORD *)&v10 + 1) + 0xFFFFFFFFFFFDALL;
  v7[1] = *((_QWORD *)&v13 + 1) - v11 + 0xFFFFFFFFFFFFELL;
  v7[2] = v14 - *((_QWORD *)&v11 + 1) + 0xFFFFFFFFFFFFELL;
  v7[3] = *((_QWORD *)&v14 + 1) - v12 + 0xFFFFFFFFFFFFELL;
  v7[4] = v15 - *((_QWORD *)&v12 + 1) + 0xFFFFFFFFFFFFELL;
  fe_loose_invert((uint64_t)v5, v7);
  fe_mul_impl((uint64_t)v5, v8, (unint64_t *)v5);
  return fe_tobytes(a1, v5);
}

BOOL X25519(int8x16_t *a1, __int128 *a2, unsigned int *a3)
{
  int v3;
  uint8x8_t v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint32x4_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64x2_t v13;
  unint64_t v14;
  int8x16_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int128 v53;
  unint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  signed __int128 v72;
  uint64_t v73;
  unsigned __int128 v74;
  unsigned __int128 v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  unsigned __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  signed __int128 v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  __int128 v143;
  int8x16_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  signed __int128 v166;
  unsigned __int128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  uint64_t v177;
  uint64_t v178;
  __int128 v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  __int128 v189;
  unint64_t v190;
  unint64_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int8x16_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unsigned int v210;
  __int128 v211;
  __int128 v212;
  unint64_t v213;
  __int128 v214;
  __int128 v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  __int128 v220;
  __int128 v221;
  unint64_t v222;
  __int128 v223;
  __int128 v224;
  uint64_t v225;
  __int128 v226;
  __int128 v227;
  uint64_t v228;
  int8x16_t v229[3];
  int8x16_t v230[3];
  unint64_t v231[5];
  unint64_t v232[5];
  _OWORD v233[2];
  uint64_t v234;
  __int128 v235;
  __int128 v236;
  uint64_t v237;

  v3 = 0;
  v237 = *MEMORY[0x24BDAC8D0];
  v228 = 0;
  v226 = 0u;
  v227 = 0u;
  v225 = 0;
  v223 = 0u;
  v224 = 0u;
  v222 = 0;
  v220 = 0u;
  v221 = 0u;
  v219 = 0;
  v217 = 0u;
  v218 = 0u;
  v216 = 0;
  v214 = 0u;
  v215 = 0u;
  v213 = 0;
  v211 = 0u;
  v212 = 0u;
  v5 = a2[1];
  v235 = *a2;
  v4.i32[1] = DWORD1(v235);
  v236 = v5;
  LOBYTE(v235) = v235 & 0xF8;
  HIBYTE(v236) = HIBYTE(v5) & 0x3F | 0x40;
  v6 = *((unsigned __int8 *)a3 + 6);
  v7 = *((unsigned __int8 *)a3 + 12);
  v8 = a3[4];
  v9 = *(unsigned int *)((char *)a3 + 22);
  v4.i32[0] = a3[2];
  v10 = vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v4));
  v11.i64[0] = v10.u32[0];
  v11.i64[1] = v10.u32[1];
  v12.i64[0] = 255;
  v12.i64[1] = 255;
  v13 = (uint64x2_t)vandq_s8(v11, v12);
  v11.i64[0] = v10.u32[2];
  v11.i64[1] = v10.u32[3];
  v14 = ((unint64_t)*((unsigned __int8 *)a3 + 5) << 40) & 0xFFF8FFFFFFFFFFFFLL | ((v6 & 7) << 48) | *a3 | ((unint64_t)*((unsigned __int8 *)a3 + 4) << 32);
  v15 = vorrq_s8((int8x16_t)vshlq_u64(v13, (uint64x2_t)xmmword_208F1E590), (int8x16_t)vshlq_u64((uint64x2_t)vandq_s8(v11, v12), (uint64x2_t)xmmword_208F1E580));
  v16 = *(_QWORD *)&vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)) | (32
                                                                                                  * *((unsigned __int8 *)a3 + 7)) | (v6 >> 3) & 0xFFF81FFFFFFFFFFFLL | ((v7 & 0x3F) << 45);
  v17 = (*((unsigned __int8 *)a3 + 15) << 18) & 0x3FFFFFF | ((v8 & 0x1FFFFFF) << 26) | ((unint64_t)*((unsigned __int8 *)a3 + 14) << 10) | (4 * *((unsigned __int8 *)a3 + 13)) | (v7 >> 6);
  v18 = ((unint64_t)*((unsigned __int8 *)a3 + 21) << 15) & 0xFFF80000007FFFFFLL | ((v9 & 0xFFFFFFF) << 23) | ((unint64_t)*((unsigned __int8 *)a3 + 20) << 7) | (v8 >> 25);
  v19 = ((unint64_t)*((unsigned __int8 *)a3 + 27) << 12) & 0xFFF80000000FFFFFLL | ((unint64_t)(a3[7] & 0x7FFFFFFF) << 20) | (16 * *((unsigned __int8 *)a3 + 26)) | (v9 >> 28);
  v232[0] = v14;
  v232[1] = v16;
  v232[2] = v17;
  v232[3] = v18;
  v232[4] = v19;
  memset(&v231[1], 0, 32);
  v231[0] = 1;
  memset(v230, 0, 40);
  memset(&v229[0].u64[1], 0, 32);
  v229[0].i64[0] = 1;
  v20 = 254;
  v197 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL);
  do
  {
    v210 = v20;
    v209 = (*((unsigned __int8 *)&v235 + ((unint64_t)v20 >> 3)) >> (v20 & 7)) & 1;
    v21 = -(uint64_t)(v209 ^ v3);
    v22 = (v231[0] ^ v14) & v21;
    v23 = (v231[1] ^ v16) & v21;
    v231[0] ^= v22;
    v231[1] ^= v23;
    v24 = (v231[2] ^ v17) & v21;
    v25 = (v231[3] ^ v18) & v21;
    v231[2] ^= v24;
    v231[3] ^= v25;
    v26 = (v231[4] ^ v19) & v21;
    v231[4] ^= v26;
    v27 = v22 ^ v14;
    v28 = v23 ^ v16;
    v29 = v24 ^ v17;
    v30 = (v229[0].i64[0] ^ v230[0].i64[0]) & v21;
    v31 = (v229[0].i64[1] ^ v230[0].i64[1]) & v21;
    v230[0].i64[0] ^= v30;
    v230[0].i64[1] ^= v31;
    v32 = v25 ^ v18;
    v33 = v26 ^ v19;
    v229[0].i64[0] ^= v30;
    v229[0].i64[1] ^= v31;
    v34 = (v229[1].i64[0] ^ v230[1].i64[0]) & v21;
    v35 = v34 ^ v230[1].i64[0];
    v36 = v34 ^ v229[1].i64[0];
    v37 = (v229[1].i64[1] ^ v230[1].i64[1]) & v21;
    v230[1].i64[0] = v35;
    v230[1].i64[1] ^= v37;
    v229[1].i64[0] = v36;
    v229[1].i64[1] ^= v37;
    v38 = (v229[2].i64[0] ^ v230[2].i64[0]) & v21;
    v230[2].i64[0] ^= v38;
    v229[2].i64[0] ^= v38;
    *(_QWORD *)&v214 = v27 + 0xFFFFFFFFFFFDALL - v229[0].i64[0];
    *((_QWORD *)&v214 + 1) = v28 - v229[0].i64[1] + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v215 = v29 - v36 + 0xFFFFFFFFFFFFELL;
    *((_QWORD *)&v215 + 1) = v32 - v229[1].i64[1] + 0xFFFFFFFFFFFFELL;
    v216 = (v26 ^ v19) - v229[2].i64[0] + 0xFFFFFFFFFFFFELL;
    v39 = v231[0] + 0xFFFFFFFFFFFDALL - v230[0].i64[0];
    v40 = v231[1] - v230[0].i64[1] + 0xFFFFFFFFFFFFELL;
    v41 = v231[2] - v35 + 0xFFFFFFFFFFFFELL;
    v42 = v231[3] - v230[1].i64[1] + 0xFFFFFFFFFFFFELL;
    v43 = v231[4] - v230[2].i64[0] + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v211 = v39;
    *((_QWORD *)&v211 + 1) = v40;
    *(_QWORD *)&v212 = v41;
    *((_QWORD *)&v212 + 1) = v42;
    v213 = v43;
    v44 = v230[0].i64[0] + v231[0];
    v45 = v230[0].i64[1] + v231[1];
    v46 = v35 + v231[2];
    v207 = v230[1].i64[1] + v231[3];
    v47 = v230[2].i64[0] + v231[4];
    *(_QWORD *)&v220 = v230[0].i64[0] + v231[0];
    *((_QWORD *)&v220 + 1) = v230[0].i64[1] + v231[1];
    *(_QWORD *)&v221 = v35 + v231[2];
    *((_QWORD *)&v221 + 1) = v230[1].i64[1] + v231[3];
    v222 = v230[2].i64[0] + v231[4];
    *(_QWORD *)&v217 = v229[0].i64[0] + v27;
    *((_QWORD *)&v217 + 1) = v229[0].i64[1] + v28;
    *(_QWORD *)&v218 = v36 + v29;
    *((_QWORD *)&v218 + 1) = v229[1].i64[1] + v32;
    v219 = v229[2].i64[0] + v33;
    fe_mul_impl((uint64_t)v229, (unint64_t *)&v214, (unint64_t *)&v220);
    fe_mul_impl((uint64_t)v230, (unint64_t *)&v217, (unint64_t *)&v211);
    v48 = 38 * v43 * v42;
    v49 = 38 * v42 * v41 + v39 * v39 + 38 * v43 * v40;
    v51 = (2 * v42 * (unsigned __int128)v40 + v41 * (unsigned __int128)v41 + 2 * v43 * (unsigned __int128)v39) >> 64;
    v50 = 2 * v42 * v40 + v41 * v41 + 2 * v43 * v39;
    v52 = 2 * v41 * v39;
    v53 = 19 * v42 * (unsigned __int128)v42 + 2 * v40 * (unsigned __int128)v39 + 38 * v43 * (unsigned __int128)v41;
    v54 = v40 * v40;
    v55 = (__int128)(38 * v42 * (unsigned __int128)v41 + v39 * (unsigned __int128)v39 + 38
                                                                                      * v43
                                                                                      * (unsigned __int128)v40) >> 51;
    v56 = __CFADD__((_QWORD)v53, v55);
    v57 = v53 + v55;
    if (v56)
      v58 = *((_QWORD *)&v53 + 1) + 1;
    else
      v58 = (19 * v42 * (unsigned __int128)v42 + 2 * v40 * (unsigned __int128)v39 + 38 * v43 * (unsigned __int128)v41) >> 64;
    *((_QWORD *)&v60 + 1) = v58;
    *(_QWORD *)&v60 = v57;
    v59 = v60 >> 51;
    v56 = __CFADD__(v52 + v54, v48);
    v61 = v52 + v54 + v48;
    v62 = ((38 * v43 * (unsigned __int128)v42) >> 64)
        + v56
        + ((v40 * (unsigned __int128)v40) >> 64)
        + __CFADD__(v52, v54)
        + ((2 * v41 * (unsigned __int128)v39) >> 64);
    v56 = __CFADD__(v61, v59);
    v63 = v61 + v59;
    if (v56)
      ++v62;
    *((_QWORD *)&v65 + 1) = v62;
    *(_QWORD *)&v65 = v63;
    v64 = v65 >> 51;
    v66 = (2 * v42 * (unsigned __int128)v39 + 2 * v41 * (unsigned __int128)v40 + 19 * v43 * (unsigned __int128)v43) >> 64;
    v67 = 2 * v42 * v39 + 2 * v41 * v40 + 19 * v43 * v43;
    v68 = v67 + v64;
    if (__CFADD__(v67, v64))
      ++v66;
    *((_QWORD *)&v70 + 1) = v66;
    *(_QWORD *)&v70 = v67 + v64;
    v69 = v70 >> 51;
    v56 = __CFADD__(v50, v69);
    v71 = v50 + v69;
    if (v56)
      ++v51;
    v72 = 38 * v207 * (unsigned __int128)v46 + v44 * (unsigned __int128)v44 + 38 * v47 * (unsigned __int128)v45;
    v73 = v72 >> 51;
    v74 = 2 * v207 * (unsigned __int128)v45 + v46 * (unsigned __int128)v46 + 2 * v47 * (unsigned __int128)v44;
    v75 = 19 * v207 * (unsigned __int128)v207 + 2 * v45 * (unsigned __int128)v44 + 38 * v47 * (unsigned __int128)v46;
    if (__CFADD__((_QWORD)v75, v73))
      v76 = *((_QWORD *)&v75 + 1) + 1;
    else
      v76 = (19 * v207 * (unsigned __int128)v207 + 2 * v45 * (unsigned __int128)v44 + 38 * v47 * (unsigned __int128)v46) >> 64;
    *((_QWORD *)&v78 + 1) = v76;
    *(_QWORD *)&v78 = v75 + v73;
    v77 = v78 >> 51;
    v79 = 2 * v46 * (unsigned __int128)v44 + v45 * (unsigned __int128)v45 + 38 * v47 * (unsigned __int128)v207;
    v80 = v79 + v77;
    if (__CFADD__((_QWORD)v79, v77))
      v81 = *((_QWORD *)&v79 + 1) + 1;
    else
      v81 = (2 * v46 * (unsigned __int128)v44 + v45 * (unsigned __int128)v45 + 38 * v47 * (unsigned __int128)v207) >> 64;
    *((_QWORD *)&v83 + 1) = v81;
    *(_QWORD *)&v83 = v80;
    v82 = v83 >> 51;
    v85 = (2 * v207 * (unsigned __int128)v44 + 2 * v46 * (unsigned __int128)v45 + 19 * v47 * (unsigned __int128)v47) >> 64;
    v84 = 2 * v207 * v44 + 2 * v46 * v45 + 19 * v47 * v47;
    v56 = __CFADD__(v84, v82);
    v86 = v84 + v82;
    if (v56)
      ++v85;
    *((_QWORD *)&v88 + 1) = v85;
    *(_QWORD *)&v88 = v86;
    v87 = v88 >> 51;
    v56 = __CFADD__((_QWORD)v74, v87);
    v89 = v74 + v87;
    v90 = v230[0].i64[0] + v229[0].i64[0];
    v91 = v230[0].i64[1] + v229[0].i64[1];
    v92 = v230[1].i64[0] + v229[1].i64[0];
    v93 = v229[0].i64[0] + 0xFFFFFFFFFFFDALL - v230[0].i64[0];
    v94 = v230[1].i64[1] + v229[1].i64[1];
    v95 = v229[0].i64[1] - v230[0].i64[1];
    v96 = v229[1].i64[0] - v230[1].i64[0];
    v97 = v229[1].i64[1] - v230[1].i64[1];
    v98 = v229[2].i64[0] - v230[2].i64[0];
    *((_QWORD *)&v88 + 1) = v51;
    *(_QWORD *)&v88 = v71;
    v99 = (v49 & 0x7FFFFFFFFFFFFLL) + 19 * (v88 >> 51);
    if (v56)
      v100 = *((_QWORD *)&v74 + 1) + 1;
    else
      v100 = *((_QWORD *)&v74 + 1);
    *((_QWORD *)&v101 + 1) = v100;
    *(_QWORD *)&v101 = v89;
    v102 = (v72 & 0x7FFFFFFFFFFFFLL) + 19 * (v101 >> 51);
    v103 = (v57 & 0x7FFFFFFFFFFFFLL) + (v99 >> 51);
    v202 = (v63 & 0x7FFFFFFFFFFFFLL) + (v103 >> 51);
    v203 = v99 & 0x7FFFFFFFFFFFFLL;
    *(_QWORD *)&v226 = v99 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v226 + 1) = v103 & 0x7FFFFFFFFFFFFLL;
    v204 = v103 & 0x7FFFFFFFFFFFFLL;
    v205 = v68 & 0x7FFFFFFFFFFFFLL;
    v206 = v71 & 0x7FFFFFFFFFFFFLL;
    v208 = v230[2].i64[0] + v229[2].i64[0];
    *(_QWORD *)&v227 = v202;
    *((_QWORD *)&v227 + 1) = v68 & 0x7FFFFFFFFFFFFLL;
    v228 = v71 & 0x7FFFFFFFFFFFFLL;
    v104 = ((v75 + v73) & 0x7FFFFFFFFFFFFLL) + (v102 >> 51);
    v198 = v102 & 0x7FFFFFFFFFFFFLL;
    v199 = v104 & 0x7FFFFFFFFFFFFLL;
    *(_QWORD *)&v223 = v102 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v223 + 1) = v104 & 0x7FFFFFFFFFFFFLL;
    v200 = (v80 & 0x7FFFFFFFFFFFFLL) + (v104 >> 51);
    v201 = v86 & 0x7FFFFFFFFFFFFLL;
    *(_QWORD *)&v224 = v200;
    *((_QWORD *)&v224 + 1) = v86 & 0x7FFFFFFFFFFFFLL;
    v105 = v89 & 0x7FFFFFFFFFFFFLL;
    v225 = v89 & 0x7FFFFFFFFFFFFLL;
    v106 = v95 + 0xFFFFFFFFFFFFELL;
    v107 = v96 + 0xFFFFFFFFFFFFELL;
    v108 = v97 + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v217 = v229[0].i64[0] + 0xFFFFFFFFFFFDALL - v230[0].i64[0];
    *((_QWORD *)&v217 + 1) = v95 + 0xFFFFFFFFFFFFELL;
    v109 = v98 + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v218 = v96 + 0xFFFFFFFFFFFFELL;
    *((_QWORD *)&v218 + 1) = v97 + 0xFFFFFFFFFFFFELL;
    v219 = v98 + 0xFFFFFFFFFFFFELL;
    fe_mul_impl((uint64_t)v231, (unint64_t *)&v223, (unint64_t *)&v226);
    v110 = 2 * v108;
    v111 = (unint64_t)(38 * v108) * (unsigned __int128)(unint64_t)v107
         + (unint64_t)v93 * (unsigned __int128)(unint64_t)v93
         + (unint64_t)(38 * v109) * (unsigned __int128)(unint64_t)v106;
    v113 = ((unint64_t)(2 * v108) * (unsigned __int128)(unint64_t)v106
          + (unint64_t)v107 * (unsigned __int128)(unint64_t)v107
          + (unint64_t)(2 * v109) * (unsigned __int128)(unint64_t)v93) >> 64;
    v112 = 2 * v108 * v106 + v107 * v107 + 2 * v109 * v93;
    v114 = 2 * v107;
    v116 = ((unint64_t)(19 * v108) * (unsigned __int128)(unint64_t)v108
          + (unint64_t)(2 * v106) * (unsigned __int128)(unint64_t)v93
          + (unint64_t)(38 * v109) * (unsigned __int128)(unint64_t)v107) >> 64;
    v115 = 19 * v108 * v108 + 2 * v106 * v93 + 38 * v109 * v107;
    v117 = v111 >> 51;
    v56 = __CFADD__(v115, v117);
    v118 = v115 + v117;
    if (v56)
      ++v116;
    v119 = ((unint64_t)v110 * (unsigned __int128)(unint64_t)v93) >> 64;
    v120 = v110 * v93;
    v121 = ((unint64_t)v114 * (unsigned __int128)(unint64_t)v93) >> 64;
    v122 = v114 * v106;
    v123 = 2 * v107 * v93 + v106 * v106 + 38 * v109 * v108;
    *((_QWORD *)&v125 + 1) = v116;
    *(_QWORD *)&v125 = v118;
    v124 = v125 >> 51;
    v56 = __CFADD__(v123, v124);
    v126 = v123 + v124;
    if (v56)
      v127 = ((__PAIR128__(v121, 2 * v107 * v93)
             + (unint64_t)v106 * (unsigned __int128)(unint64_t)v106
             + (unint64_t)(38 * v109) * (unsigned __int128)(unint64_t)v108) >> 64)
           + 1;
    else
      v127 = (__PAIR128__(v121, 2 * v107 * v93)
            + (unint64_t)v106 * (unsigned __int128)(unint64_t)v106
            + (unint64_t)(38 * v109) * (unsigned __int128)(unint64_t)v108) >> 64;
    v128 = v122;
    v129 = v198 + 0xFFFFFFFFFFFDALL - v203;
    v130 = v199 - v204 + 0xFFFFFFFFFFFFELL;
    v131 = v200 - v202 + 0xFFFFFFFFFFFFELL;
    v132 = v201 - v205 + 0xFFFFFFFFFFFFELL;
    v133 = v105 - v206 + 0xFFFFFFFFFFFFELL;
    *(_QWORD *)&v211 = v129;
    *((_QWORD *)&v211 + 1) = v130;
    *(_QWORD *)&v212 = v131;
    *((_QWORD *)&v212 + 1) = v132;
    v213 = v133;
    v134 = v118 & 0x7FFFFFFFFFFFFLL;
    *((_QWORD *)&v136 + 1) = v127;
    *(_QWORD *)&v136 = v126;
    v135 = v136 >> 51;
    v137 = (__PAIR128__(v119, v120)
          + __PAIR128__(((unint64_t)(2 * v107) * (unsigned __int128)(unint64_t)v106) >> 64, v128)
          + (unint64_t)(19 * v109) * (unsigned __int128)(unint64_t)v109) >> 64;
    v138 = v120 + v128 + 19 * v109 * v109;
    v56 = __CFADD__(v138, v135);
    v139 = v138 + v135;
    if (v56)
      ++v137;
    *((_QWORD *)&v141 + 1) = v137;
    *(_QWORD *)&v141 = v139;
    v140 = v141 >> 51;
    v56 = __CFADD__(v112, v140);
    v142 = v112 + v140;
    if (v56)
      ++v113;
    *((_QWORD *)&v143 + 1) = v113;
    *(_QWORD *)&v143 = v142;
    v144.i64[0] = v139;
    v144.i64[1] = v142;
    v145 = (v111 & 0x7FFFFFFFFFFFFLL) + 19 * (v143 >> 51);
    v146 = v145 & 0x7FFFFFFFFFFFFLL;
    v147 = v134 + (v145 >> 51);
    v230[0].i64[0] = v146;
    v230[0].i64[1] = v147 & 0x7FFFFFFFFFFFFLL;
    v230[1].i64[0] = (v126 & 0x7FFFFFFFFFFFFLL) + (v147 >> 51);
    v148 = ((unint64_t)v133 * (unsigned __int128)0x1DB42uLL) >> 64;
    v149 = 121666 * v133;
    v150 = ((unint64_t)v132 * (unsigned __int128)0x1DB42uLL) >> 64;
    v151 = 121666 * v132;
    v152 = ((unint64_t)v131 * (unsigned __int128)0x1DB42uLL) >> 64;
    v153 = ((unint64_t)v130 * (unsigned __int128)0x1DB42uLL) >> 64;
    v154 = 121666 * v129;
    v155 = (__int128)((unint64_t)v129 * (unsigned __int128)0x1DB42uLL) >> 51;
    v156 = 121666 * v130 + v155;
    if (__CFADD__(121666 * v130, v155))
      ++v153;
    *((_QWORD *)&v158 + 1) = v153;
    *(_QWORD *)&v158 = 121666 * v130 + v155;
    v157 = v158 >> 51;
    v56 = __CFADD__(v157, 121666 * v131);
    v159 = v157 + 121666 * v131;
    if (v56)
      ++v152;
    *((_QWORD *)&v161 + 1) = v152;
    *(_QWORD *)&v161 = v159;
    v160 = v161 >> 51;
    v56 = __CFADD__(v160, v151);
    v162 = v160 + v151;
    if (v56)
      ++v150;
    *((_QWORD *)&v164 + 1) = v150;
    *(_QWORD *)&v164 = v162;
    v163 = v164 >> 51;
    v56 = __CFADD__(v163, v149);
    v165 = v163 + v149;
    if (v56)
      ++v148;
    v166 = (unint64_t)(38 * v94) * (unsigned __int128)(unint64_t)v92
         + (unint64_t)v90 * (unsigned __int128)(unint64_t)v90
         + (unint64_t)(38 * v208) * (unsigned __int128)(unint64_t)v91;
    v168 = v166 >> 51;
    v167 = (unint64_t)(2 * v94) * (unsigned __int128)(unint64_t)v91
         + (unint64_t)v92 * (unsigned __int128)(unint64_t)v92
         + (unint64_t)(2 * v208) * (unsigned __int128)(unint64_t)v90;
    v169 = 2 * v92;
    v171 = ((unint64_t)(19 * v94) * (unsigned __int128)(unint64_t)v94
          + (unint64_t)(2 * v91) * (unsigned __int128)(unint64_t)v90
          + (unint64_t)(38 * v208) * (unsigned __int128)(unint64_t)v92) >> 64;
    v170 = 19 * v94 * v94 + 2 * v91 * v90 + 38 * v208 * v92;
    v56 = __CFADD__(v170, v168);
    v172 = v170 + v168;
    if (v56)
      ++v171;
    *((_QWORD *)&v176 + 1) = v171;
    *(_QWORD *)&v176 = v172;
    v175 = v176 >> 51;
    v174 = ((unint64_t)v169 * (unsigned __int128)(unint64_t)v90
          + (unint64_t)v91 * (unsigned __int128)(unint64_t)v91
          + (unint64_t)(38 * v208) * (unsigned __int128)(unint64_t)v94) >> 64;
    v173 = v169 * v90 + v91 * v91 + 38 * v208 * v94;
    v56 = __CFADD__(v173, v175);
    v177 = v173 + v175;
    if (v56)
      ++v174;
    *((_QWORD *)&v179 + 1) = v174;
    *(_QWORD *)&v179 = v177;
    v178 = v179 >> 51;
    v181 = ((unint64_t)(2 * v94) * (unsigned __int128)(unint64_t)v90
          + (unint64_t)v169 * (unsigned __int128)(unint64_t)v91
          + (unint64_t)(19 * v208) * (unsigned __int128)(unint64_t)v208) >> 64;
    v180 = 2 * v94 * v90 + v169 * v91 + 19 * v208 * v208;
    v56 = __CFADD__(v180, v178);
    v182 = v180 + v178;
    if (v56)
      ++v181;
    *((_QWORD *)&v184 + 1) = v181;
    *(_QWORD *)&v184 = v182;
    v183 = v184 >> 51;
    v56 = __CFADD__((_QWORD)v167, v183);
    v185 = v167 + v183;
    *((_QWORD *)&v184 + 1) = v148;
    *(_QWORD *)&v184 = v165;
    v186 = (v154 & 0x7FFFFFFFFFFFELL) + 19 * (v184 >> 51);
    v187 = (v156 & 0x7FFFFFFFFFFFFLL) + (v186 >> 51);
    v229[0].i64[0] = v186 & 0x7FFFFFFFFFFFFLL;
    v229[0].i64[1] = v187 & 0x7FFFFFFFFFFFFLL;
    v229[1].i64[0] = (v159 & 0x7FFFFFFFFFFFFLL) + (v187 >> 51);
    v229[1].i64[1] = v162 & 0x7FFFFFFFFFFFFLL;
    v229[2].i64[0] = v165 & 0x7FFFFFFFFFFFFLL;
    *(_QWORD *)&v214 = (v186 & 0x7FFFFFFFFFFFFLL) + v203;
    *((_QWORD *)&v214 + 1) = (v187 & 0x7FFFFFFFFFFFFLL) + v204;
    *(_QWORD *)&v215 = v229[1].i64[0] + v202;
    *((_QWORD *)&v215 + 1) = (v162 & 0x7FFFFFFFFFFFFLL) + v205;
    v216 = (v165 & 0x7FFFFFFFFFFFFLL) + v206;
    if (v56)
      v188 = *((_QWORD *)&v167 + 1) + 1;
    else
      v188 = ((unint64_t)(2 * v94) * (unsigned __int128)(unint64_t)v91
            + (unint64_t)v92 * (unsigned __int128)(unint64_t)v92
            + (unint64_t)(2 * v208) * (unsigned __int128)(unint64_t)v90) >> 64;
    *((_QWORD *)&v189 + 1) = v188;
    *(_QWORD *)&v189 = v185;
    v190 = (v166 & 0x7FFFFFFFFFFFFLL) + 19 * (v189 >> 51);
    *(int8x16_t *)((char *)&v230[1] + 8) = vandq_s8(v144, v197);
    v18 = v182 & 0x7FFFFFFFFFFFFLL;
    v19 = v185 & 0x7FFFFFFFFFFFFLL;
    v191 = (v172 & 0x7FFFFFFFFFFFFLL) + (v190 >> 51);
    v14 = v190 & 0x7FFFFFFFFFFFFLL;
    v17 = (v177 & 0x7FFFFFFFFFFFFLL) + (v191 >> 51);
    v16 = v191 & 0x7FFFFFFFFFFFFLL;
    fe_mul_impl((uint64_t)v229, v232, (unint64_t *)v230);
    fe_mul_impl((uint64_t)v230, (unint64_t *)&v211, (unint64_t *)&v214);
    v20 = v210 - 1;
    v3 = v209;
  }
  while (v210);
  v192.i64[0] = v17;
  v192.i64[1] = v18;
  v193 = (int8x16_t)vdupq_n_s64(-v209);
  v231[0] = v14 & -v209 | v231[0] & (v209 - 1);
  v231[1] = v16 & -v209 | v231[1] & (v209 - 1);
  *(int8x16_t *)&v231[2] = vbslq_s8(v193, v192, *(int8x16_t *)&v231[2]);
  v231[4] = v19 & -v209 | v231[4] & (v209 - 1);
  v230[0] = vbslq_s8(v193, v229[0], v230[0]);
  v230[1] = vbslq_s8(v193, v229[1], v230[1]);
  v230[2].i64[0] = v229[2].i64[0] & -v209 | v230[2].i64[0] & (v209 - 1);
  v233[0] = v230[0];
  v233[1] = v230[1];
  v234 = v230[2].i64[0];
  fe_loose_invert((uint64_t)v230, (unint64_t *)v233);
  fe_mul_impl((uint64_t)v231, v231, (unint64_t *)v230);
  fe_tobytes(a1, v231);
  v194 = vorrq_s8(*a1, a1[1]);
  return vorr_s8(*(int8x8_t *)v194.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v194, v194, 8uLL)) != 0;
}

double fe_loose_invert(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  signed __int128 v9;
  unsigned __int128 v10;
  uint64_t v11;
  unsigned __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int128 v16;
  uint64_t v17;
  __int128 v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int128 v49;
  unsigned __int128 v50;
  signed __int128 v51;
  unsigned __int128 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unsigned __int128 v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  unint64_t v82;
  unsigned __int128 v83;
  uint64_t v84;
  int8x16_t v85;
  unint64_t v86;
  unint64_t v87;
  signed __int128 v88;
  unsigned __int128 v89;
  unsigned __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  int8x16_t v107;
  uint64_t v108;
  __int128 v109;
  unint64_t v110;
  unint64_t v111;
  signed __int128 v112;
  unsigned __int128 v113;
  uint64_t v114;
  unsigned __int128 v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  unint64_t v152;
  unsigned __int128 v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned __int128 v169;
  uint64_t v170;
  unsigned __int128 v171;
  unsigned __int128 v172;
  unint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  unsigned __int128 v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unsigned __int128 v213;
  uint64_t v214;
  unsigned __int128 v215;
  unsigned __int128 v216;
  unint64_t v217;
  unint64_t v218;
  signed __int128 v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  unsigned __int128 v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  unsigned __int128 v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int128 v244;
  unsigned __int128 v245;
  unsigned __int128 v246;
  signed __int128 v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  signed __int128 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned __int128 v260;
  unint64_t v261;
  unint64_t v262;
  unsigned __int128 v263;
  uint64_t v264;
  unsigned __int128 v265;
  unsigned __int128 v266;
  int8x16_t v267;
  unint64_t v268;
  unint64_t v269;
  signed __int128 v270;
  unsigned __int128 v271;
  unsigned __int128 v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  __int128 v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  __int128 v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  __int128 v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  int v300;
  unint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  signed __int128 v305;
  unsigned __int128 v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unsigned __int128 v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  __int128 v319;
  uint64_t v320;
  uint64_t v321;
  __int128 v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  __int128 v326;
  uint64_t v327;
  uint64_t v328;
  __int128 v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  signed __int128 v334;
  unsigned __int128 v335;
  unsigned __int128 v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  __int128 v344;
  uint64_t v345;
  uint64_t v346;
  __int128 v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  __int128 v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  __int128 v357;
  uint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  int v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  signed __int128 v369;
  unsigned __int128 v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unsigned __int128 v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  __int128 v383;
  uint64_t v384;
  uint64_t v385;
  __int128 v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  __int128 v390;
  uint64_t v391;
  uint64_t v392;
  __int128 v393;
  unint64_t v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t v397;
  signed __int128 v398;
  unsigned __int128 v399;
  unsigned __int128 v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  __int128 v408;
  uint64_t v409;
  uint64_t v410;
  __int128 v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  __int128 v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  __int128 v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  uint64_t v426;
  uint64_t v427;
  int v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t v431;
  uint64_t v432;
  signed __int128 v433;
  unsigned __int128 v434;
  unint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  unsigned __int128 v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  __int128 v447;
  uint64_t v448;
  uint64_t v449;
  __int128 v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  __int128 v454;
  uint64_t v455;
  uint64_t v456;
  __int128 v457;
  unint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  signed __int128 v462;
  unsigned __int128 v463;
  unsigned __int128 v464;
  unint64_t v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  __int128 v472;
  uint64_t v473;
  uint64_t v474;
  __int128 v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  __int128 v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  __int128 v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  unint64_t v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  unint64_t v493;
  uint64_t v494;
  unint64_t v495;
  uint64_t v496;
  signed __int128 v497;
  unsigned __int128 v498;
  unint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unsigned __int128 v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  __int128 v511;
  uint64_t v512;
  uint64_t v513;
  __int128 v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  __int128 v518;
  uint64_t v519;
  uint64_t v520;
  __int128 v521;
  unint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  signed __int128 v526;
  unsigned __int128 v527;
  unsigned __int128 v528;
  unint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  __int128 v536;
  uint64_t v537;
  uint64_t v538;
  __int128 v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  __int128 v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  __int128 v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  uint64_t v554;
  uint64_t v555;
  int v556;
  unint64_t v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  signed __int128 v561;
  unsigned __int128 v562;
  unint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unsigned __int128 v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  __int128 v575;
  uint64_t v576;
  uint64_t v577;
  __int128 v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  __int128 v582;
  uint64_t v583;
  uint64_t v584;
  __int128 v585;
  unint64_t v586;
  uint64_t v587;
  uint64_t v588;
  unint64_t v589;
  signed __int128 v590;
  unsigned __int128 v591;
  unsigned __int128 v592;
  unint64_t v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  __int128 v600;
  uint64_t v601;
  uint64_t v602;
  __int128 v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  __int128 v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  __int128 v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  unint64_t v617;
  uint64_t v618;
  uint64_t v619;
  int v620;
  unint64_t v621;
  uint64_t v622;
  unint64_t v623;
  uint64_t v624;
  signed __int128 v625;
  unsigned __int128 v626;
  unint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  unsigned __int128 v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  __int128 v639;
  uint64_t v640;
  uint64_t v641;
  __int128 v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  __int128 v646;
  uint64_t v647;
  uint64_t v648;
  __int128 v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  signed __int128 v654;
  unsigned __int128 v655;
  uint64_t v656;
  unsigned __int128 v657;
  uint64_t v658;
  unint64_t v659;
  unint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  __int128 v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  __int128 v668;
  uint64_t v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  __int128 v673;
  uint64_t v674;
  uint64_t v675;
  __int128 v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  uint64_t v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t v687;
  unint64_t v688;
  uint64_t v689;
  unint64_t v690;
  unint64_t v691;
  uint64_t v692;
  unint64_t v693;
  unint64_t v694;
  unsigned __int128 v695;
  unint64_t v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  unint64_t v703;
  uint64_t v704;
  unint64_t v705;
  uint64_t v706;
  unint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unsigned __int128 v711;
  uint64_t v712;
  unsigned __int128 v713;
  unsigned __int128 v714;
  unint64_t v715;
  unint64_t v716;
  unint64_t v717;
  unint64_t v718;
  unint64_t v719;
  unint64_t v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  unint64_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  unint64_t v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  unint64_t v733;
  unint64_t v734;
  uint64_t v735;
  unint64_t v736;
  unint64_t v737;
  unsigned __int128 v738;
  unint64_t v739;
  uint64_t v740;
  unint64_t v741;
  uint64_t v742;
  unint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  unint64_t v748;
  uint64_t v749;
  uint64_t v750;
  unint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unsigned __int128 v756;
  unsigned __int128 v757;
  unsigned __int128 v758;
  unsigned __int128 v759;
  signed __int128 v760;
  uint64_t v761;
  unint64_t v762;
  uint64_t v763;
  unint64_t v764;
  uint64_t v765;
  uint64_t v766;
  unint64_t v767;
  uint64_t v768;
  unint64_t v769;
  unint64_t v770;
  unsigned __int128 v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  unsigned __int128 v776;
  unsigned __int128 v777;
  unint64_t v778;
  uint64_t v779;
  unsigned __int128 v780;
  uint64_t v781;
  signed __int128 v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t v785;
  unint64_t v786;
  uint64_t v787;
  uint64_t v788;
  signed __int128 v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  __int128 v794;
  unint64_t v795;
  unint64_t v796;
  unsigned __int128 v797;
  uint64_t v798;
  unsigned __int128 v799;
  signed __int128 v800;
  int8x16_t v801;
  unint64_t v802;
  unint64_t v803;
  double result;
  int8x16_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  uint64_t v813;
  int8x16_t v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  int8x16_t v818;
  uint64_t v819;
  uint64_t v820;
  unint64_t v821;
  uint64_t v822;
  uint64_t v823;

  v4 = a2[3];
  v3 = a2[4];
  v5 = a2[1];
  v6 = a2[2];
  v7 = (v6 * (unsigned __int128)(38 * v3)) >> 64;
  v8 = v6 * 38 * v3;
  v9 = v5 * (unsigned __int128)(38 * v3) + v6 * (unsigned __int128)(38 * v4) + *a2 * (unsigned __int128)*a2;
  v11 = v9 >> 51;
  v10 = v5 * (unsigned __int128)(2 * v4) + v6 * (unsigned __int128)v6 + *a2 * (unsigned __int128)(2 * v3);
  v12 = v5 * (unsigned __int128)(2 * v6) + 19 * v3 * (unsigned __int128)v3 + *a2 * (unsigned __int128)(2 * v4);
  v13 = (v5 * (unsigned __int128)v5 + v4 * (unsigned __int128)(38 * v3) + *a2 * (unsigned __int128)(2 * v6)) >> 64;
  v14 = v5 * v5 + v4 * 38 * v3 + *a2 * 2 * v6;
  v16 = __PAIR128__(v7, v8) + 19 * v4 * (unsigned __int128)v4 + *a2 * (unsigned __int128)(2 * v5);
  v15 = *((_QWORD *)&v16 + 1);
  if (__CFADD__((_QWORD)v16, v11))
    v15 = *((_QWORD *)&v16 + 1) + 1;
  *((_QWORD *)&v18 + 1) = v15;
  *(_QWORD *)&v18 = v16 + v11;
  v17 = v18 >> 51;
  v19 = __CFADD__(v14, v17);
  v20 = v14 + v17;
  if (v19)
    ++v13;
  *((_QWORD *)&v22 + 1) = v13;
  *(_QWORD *)&v22 = v20;
  v21 = v22 >> 51;
  v23 = v12 + v21;
  if (__CFADD__((_QWORD)v12, v21))
    v24 = *((_QWORD *)&v12 + 1) + 1;
  else
    v24 = *((_QWORD *)&v12 + 1);
  *((_QWORD *)&v26 + 1) = v24;
  *(_QWORD *)&v26 = v23;
  v25 = v26 >> 51;
  v27 = v20 & 0x7FFFFFFFFFFFFLL;
  v28 = v23 & 0x7FFFFFFFFFFFFLL;
  v19 = __CFADD__((_QWORD)v10, v25);
  v29 = v10 + v25;
  if (v19)
    v30 = *((_QWORD *)&v10 + 1) + 1;
  else
    v30 = *((_QWORD *)&v10 + 1);
  *((_QWORD *)&v31 + 1) = v30;
  *(_QWORD *)&v31 = v29;
  v32 = (v9 & 0x7FFFFFFFFFFFFLL) + 19 * (v31 >> 51);
  v33 = v32 & 0x7FFFFFFFFFFFFLL;
  v34 = ((v16 + v11) & 0x7FFFFFFFFFFFFLL) + (v32 >> 51);
  v819 = v33;
  v820 = v34 & 0x7FFFFFFFFFFFFLL;
  v821 = v27 + (v34 >> 51);
  v822 = v28;
  v823 = v29 & 0x7FFFFFFFFFFFFLL;
  v35 = 38 * (v29 & 0x7FFFFFFFFFFFFLL);
  v36 = 2 * (v29 & 0x7FFFFFFFFFFFFLL);
  v37 = ((v34 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)(2 * v28)) >> 64;
  v38 = (v34 & 0x7FFFFFFFFFFFFLL) * 2 * v28;
  v39 = ((unint64_t)v33 * (unsigned __int128)(unint64_t)v36) >> 64;
  v40 = v33 * v36;
  v41 = ((unint64_t)v33 * (unsigned __int128)(unint64_t)(2 * v28)) >> 64;
  v42 = v33 * 2 * v28;
  v43 = (__int128)((v34 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v35
                 + (unint64_t)v33 * (unsigned __int128)(unint64_t)v33
                 + v821 * (unsigned __int128)(unint64_t)(38 * v28)) >> 51;
  v44 = ((v34 & 0x7FFFFFFFFFFFFLL) * v35 + v33 * v33 + v821 * 38 * v28) & 0x7FFFFFFFFFFFFLL;
  v45 = (unint64_t)v820 * (unsigned __int128)(unint64_t)v820
      + (unint64_t)v28 * (unsigned __int128)(unint64_t)v35
      + 2 * v821 * (unsigned __int128)(unint64_t)v33;
  v47 = (v821 * (unsigned __int128)(unint64_t)v35
       + (unint64_t)v28 * (unsigned __int128)(unint64_t)(19 * v28)
       + 2 * (v34 & 0x7FFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v33) >> 64;
  v46 = v821 * v35 + v28 * 19 * v28 + 2 * (v34 & 0x7FFFFFFFFFFFFLL) * v33;
  v19 = __CFADD__(v46, v43);
  v48 = v46 + v43;
  if (v19)
    ++v47;
  *((_QWORD *)&v49 + 1) = v47;
  *(_QWORD *)&v49 = v48;
  v50 = v45 + (v49 >> 51);
  v51 = __PAIR128__(v41, v42)
      + (unint64_t)v823 * (unsigned __int128)(unint64_t)(19 * v823)
      + 2 * v821 * (unsigned __int128)(v34 & 0x7FFFFFFFFFFFFLL)
      + (v50 >> 51);
  v52 = __PAIR128__(v37, v38) + __PAIR128__(v39, v40) + v821 * (unsigned __int128)v821;
  v53 = (v52 + (v51 >> 51)) & 0x7FFFFFFFFFFFFLL;
  v54 = v44 + 19 * ((__int128)(v52 + ((unsigned __int128)v51 >> 51)) >> 51);
  v55 = v54 & 0x7FFFFFFFFFFFFLL;
  v56 = (v48 & 0x7FFFFFFFFFFFFLL) + (v54 >> 51);
  v57 = v56 & 0x7FFFFFFFFFFFFLL;
  v58 = (v50 & 0x7FFFFFFFFFFFFLL) + (v56 >> 51);
  v59 = 38 * v53;
  v60 = 2 * v53;
  v61 = (v53 * (unsigned __int128)(19 * v53)) >> 64;
  v62 = v53 * 19 * v53;
  v63 = ((unint64_t)v57 * (unsigned __int128)(2 * ((unint64_t)v51 & 0x7FFFFFFFFFFFFLL))) >> 64;
  v64 = v57 * 2 * (v51 & 0x7FFFFFFFFFFFFLL);
  v65 = ((unint64_t)(2 * v58) * (unsigned __int128)(unint64_t)v57) >> 64;
  v66 = ((unint64_t)v55 * (unsigned __int128)(unint64_t)v60) >> 64;
  v67 = v55 * v60;
  v71 = ((unint64_t)v55 * (unsigned __int128)(2 * ((unint64_t)v51 & 0x7FFFFFFFFFFFFLL))) >> 64;
  v72 = v55 * 2 * (v51 & 0x7FFFFFFFFFFFFLL);
  v70 = (unint64_t)v57 * (unsigned __int128)(unint64_t)v59
      + (unint64_t)v55 * (unsigned __int128)(unint64_t)v55
      + (unint64_t)v58 * (unsigned __int128)(38 * ((unint64_t)v51 & 0x7FFFFFFFFFFFFLL));
  v68 = v70 >> 64;
  v69 = v70;
  v73 = 2 * v57 * v55;
  v74 = 2 * v58 * v57;
  v75 = (unint64_t)v57 * (unsigned __int128)(unint64_t)v57
      + (v51 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v59
      + (unint64_t)(2 * v58) * (unsigned __int128)(unint64_t)v55;
  v77 = ((unint64_t)v58 * (unsigned __int128)(unint64_t)v59
       + (v51 & 0x7FFFFFFFFFFFFLL) * 19 * ((unint64_t)v51 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)(2 * v57) * (unsigned __int128)(unint64_t)v55) >> 64;
  v76 = v58 * v59 + (v51 & 0x7FFFFFFFFFFFFLL) * 19 * (v51 & 0x7FFFFFFFFFFFFLL) + v73;
  v78 = (__int128)__PAIR128__(v68, v69) >> 51;
  v19 = __CFADD__(v76, v78);
  v79 = v76 + v78;
  if (v19)
    ++v77;
  *((_QWORD *)&v80 + 1) = v77;
  *(_QWORD *)&v80 = v79;
  v81 = (v75 + ((unsigned __int128)v80 >> 51)) >> 64;
  v82 = v75 + ((unsigned __int128)v80 >> 51);
  v83 = __PAIR128__(v63, v64) + __PAIR128__(v66, v67) + (unint64_t)v58 * (unsigned __int128)(unint64_t)v58;
  *((_QWORD *)&v80 + 1) = (__PAIR128__(v71, v72)
                         + __PAIR128__(v61, v62)
                         + __PAIR128__(v65, v74)
                         + ((v75 + ((unsigned __int128)v80 >> 51)) >> 51)) >> 64;
  *(_QWORD *)&v80 = v72 + v62 + v74 + ((__int128)__PAIR128__(v81, v82) >> 51);
  v84 = v80 >> 51;
  v85.i64[0] = v80;
  *((_QWORD *)&v80 + 1) = (v83 + ((unsigned __int128)v80 >> 51)) >> 64;
  *(_QWORD *)&v80 = v83 + v84;
  v85.i64[1] = v83 + v84;
  v805 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL);
  v86 = (v69 & 0x7FFFFFFFFFFFFLL) + 19 * (v80 >> 51);
  v87 = (v79 & 0x7FFFFFFFFFFFFLL) + (v86 >> 51);
  v815 = v86 & 0x7FFFFFFFFFFFFLL;
  v816 = v87 & 0x7FFFFFFFFFFFFLL;
  v817 = (v82 & 0x7FFFFFFFFFFFFLL) + (v87 >> 51);
  v818 = vandq_s8(v85, v805);
  fe_mul_impl((uint64_t)&v815, a2, (unint64_t *)&v815);
  fe_mul_impl((uint64_t)&v819, (unint64_t *)&v819, (unint64_t *)&v815);
  v88 = (unint64_t)v820 * (unsigned __int128)(unint64_t)(38 * v823)
      + v821 * (unsigned __int128)(unint64_t)(38 * v822)
      + (unint64_t)v819 * (unsigned __int128)(unint64_t)v819;
  v89 = (unint64_t)v820 * (unsigned __int128)(unint64_t)(2 * v822)
      + v821 * (unsigned __int128)v821
      + (unint64_t)v819 * (unsigned __int128)(unint64_t)(2 * v823);
  v90 = (unint64_t)v820 * (unsigned __int128)(2 * v821)
      + (unint64_t)(19 * v823) * (unsigned __int128)(unint64_t)v823
      + (unint64_t)v819 * (unsigned __int128)(unint64_t)(2 * v822);
  v91 = ((unint64_t)v820 * (unsigned __int128)(unint64_t)v820
       + (unint64_t)v822 * (unsigned __int128)(unint64_t)(38 * v823)
       + (unint64_t)v819 * (unsigned __int128)(2 * v821)) >> 64;
  v92 = v820 * v820 + v822 * 38 * v823 + v819 * 2 * v821;
  v94 = (v821 * (unsigned __int128)(unint64_t)(38 * v823)
       + (unint64_t)(19 * v822) * (unsigned __int128)(unint64_t)v822
       + (unint64_t)v819 * (unsigned __int128)(unint64_t)(2 * v820)) >> 64;
  v93 = v821 * 38 * v823 + 19 * v822 * v822 + v819 * 2 * v820;
  v95 = v88 >> 51;
  v19 = __CFADD__(v93, v95);
  v96 = v93 + v95;
  if (v19)
    ++v94;
  *((_QWORD *)&v98 + 1) = v94;
  *(_QWORD *)&v98 = v96;
  v97 = v98 >> 51;
  v19 = __CFADD__(v92, v97);
  v99 = v92 + v97;
  if (v19)
    ++v91;
  *((_QWORD *)&v101 + 1) = v91;
  *(_QWORD *)&v101 = v99;
  v100 = v101 >> 51;
  v102 = v90 + v100;
  if (__CFADD__((_QWORD)v90, v100))
    v103 = *((_QWORD *)&v90 + 1) + 1;
  else
    v103 = ((unint64_t)v820 * (unsigned __int128)(2 * v821)
          + (unint64_t)(19 * v823) * (unsigned __int128)(unint64_t)v823
          + (unint64_t)v819 * (unsigned __int128)(unint64_t)(2 * v822)) >> 64;
  *((_QWORD *)&v105 + 1) = v103;
  *(_QWORD *)&v105 = v102;
  v104 = v105 >> 51;
  v19 = __CFADD__((_QWORD)v89, v104);
  v106 = v89 + v104;
  v107.i64[0] = v102;
  if (v19)
    v108 = *((_QWORD *)&v89 + 1) + 1;
  else
    v108 = ((unint64_t)v820 * (unsigned __int128)(unint64_t)(2 * v822)
          + v821 * (unsigned __int128)v821
          + (unint64_t)v819 * (unsigned __int128)(unint64_t)(2 * v823)) >> 64;
  *((_QWORD *)&v109 + 1) = v108;
  *(_QWORD *)&v109 = v106;
  v107.i64[1] = v106;
  v110 = (v88 & 0x7FFFFFFFFFFFFLL) + 19 * (v109 >> 51);
  v111 = (v96 & 0x7FFFFFFFFFFFFLL) + (v110 >> 51);
  v811 = v110 & 0x7FFFFFFFFFFFFLL;
  v812 = v111 & 0x7FFFFFFFFFFFFLL;
  v813 = (v99 & 0x7FFFFFFFFFFFFLL) + (v111 >> 51);
  v814 = vandq_s8(v107, v805);
  fe_mul_impl((uint64_t)&v815, (unint64_t *)&v815, (unint64_t *)&v811);
  v112 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
       + (unint64_t)v817 * (unsigned __int128)(unint64_t)(38 * v818.i64[0])
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)v815;
  v114 = v112 >> 51;
  v113 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])
       + (unint64_t)v817 * (unsigned __int128)(unint64_t)v817
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[1]);
  v115 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v817)
       + (unint64_t)(19 * v818.i64[1]) * (unsigned __int128)v818.u64[1]
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[0]);
  v116 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)v816
        + v818.u64[0] * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
        + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v817)) >> 64;
  v117 = v816 * v816 + v818.i64[0] * 38 * v818.i64[1] + v815 * 2 * v817;
  v119 = ((unint64_t)v817 * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
        + (unint64_t)(19 * v818.i64[0]) * (unsigned __int128)v818.u64[0]
        + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v816)) >> 64;
  v118 = v817 * 38 * v818.i64[1] + 19 * v818.i64[0] * v818.i64[0] + v815 * 2 * v816;
  v19 = __CFADD__(v118, v114);
  v120 = v118 + v114;
  if (v19)
    ++v119;
  *((_QWORD *)&v122 + 1) = v119;
  *(_QWORD *)&v122 = v120;
  v121 = v122 >> 51;
  v123 = v120 & 0x7FFFFFFFFFFFFLL;
  v19 = __CFADD__(v117, v121);
  v124 = v117 + v121;
  if (v19)
    ++v116;
  *((_QWORD *)&v126 + 1) = v116;
  *(_QWORD *)&v126 = v124;
  v125 = v126 >> 51;
  v127 = v124 & 0x7FFFFFFFFFFFFLL;
  v128 = v115 + v125;
  if (__CFADD__((_QWORD)v115, v125))
    v129 = *((_QWORD *)&v115 + 1) + 1;
  else
    v129 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v817)
          + (unint64_t)(19 * v818.i64[1]) * (unsigned __int128)v818.u64[1]
          + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])) >> 64;
  *((_QWORD *)&v131 + 1) = v129;
  *(_QWORD *)&v131 = v128;
  v130 = v131 >> 51;
  v132 = v128 & 0x7FFFFFFFFFFFFLL;
  v19 = __CFADD__((_QWORD)v113, v130);
  v133 = v113 + v130;
  if (v19)
    v134 = *((_QWORD *)&v113 + 1) + 1;
  else
    v134 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])
          + (unint64_t)v817 * (unsigned __int128)(unint64_t)v817
          + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[1])) >> 64;
  *((_QWORD *)&v135 + 1) = v134;
  *(_QWORD *)&v135 = v133;
  v136 = v133 & 0x7FFFFFFFFFFFFLL;
  v137 = (v112 & 0x7FFFFFFFFFFFFLL) + 19 * (v135 >> 51);
  v138 = v137 & 0x7FFFFFFFFFFFFLL;
  v139 = v123 + (v137 >> 51);
  v140 = v139 & 0x7FFFFFFFFFFFFLL;
  v141 = v127 + (v139 >> 51);
  v142 = 38 * v136;
  v143 = 2 * v136;
  v144 = ((unint64_t)v136 * (unsigned __int128)(unint64_t)(19 * v136)) >> 64;
  v145 = v136 * 19 * v136;
  v146 = ((unint64_t)v140 * (unsigned __int128)(unint64_t)(2 * v132)) >> 64;
  v147 = v140 * 2 * v132;
  v148 = ((unint64_t)(2 * v141) * (unsigned __int128)(unint64_t)v140) >> 64;
  v149 = ((unint64_t)v138 * (unsigned __int128)(unint64_t)v143) >> 64;
  v150 = v138 * v143;
  v154 = ((unint64_t)v138 * (unsigned __int128)(unint64_t)(2 * v132)) >> 64;
  v155 = v138 * 2 * v132;
  v153 = (unint64_t)v140 * (unsigned __int128)(unint64_t)v142
       + (unint64_t)v138 * (unsigned __int128)(unint64_t)v138
       + (unint64_t)v141 * (unsigned __int128)(unint64_t)(38 * v132);
  v151 = v153 >> 64;
  v152 = v153;
  v156 = ((unint64_t)(2 * v141) * (unsigned __int128)(unint64_t)v138) >> 64;
  v157 = ((unint64_t)(2 * v140) * (unsigned __int128)(unint64_t)v138) >> 64;
  v158 = 2 * v140 * v138;
  v159 = 2 * v141 * v138;
  v160 = 2 * v141 * v140;
  v162 = v140 * v140 + v132 * v142;
  v161 = ((unint64_t)v140 * (unsigned __int128)(unint64_t)v140
        + (unint64_t)v132 * (unsigned __int128)(unint64_t)v142) >> 64;
  v163 = ((unint64_t)v141 * (unsigned __int128)(unint64_t)v142) >> 64;
  v164 = v141 * v142;
  v165 = ((unint64_t)v141 * (unsigned __int128)(unint64_t)v141) >> 64;
  v166 = v141 * v141;
  v167 = (__int128)__PAIR128__(v151, v152) >> 51;
  v168 = v152 & 0x7FFFFFFFFFFFFLL;
  v169 = __PAIR128__(v161, v162) + __PAIR128__(v156, v159);
  v171 = __PAIR128__(v163, v164)
       + (unint64_t)v132 * (unsigned __int128)(unint64_t)(19 * v132)
       + __PAIR128__(v157, v158);
  v170 = *((_QWORD *)&v171 + 1);
  if (__CFADD__((_QWORD)v171, v167))
    v170 = *((_QWORD *)&v171 + 1) + 1;
  *((_QWORD *)&v172 + 1) = v170;
  *(_QWORD *)&v172 = v171 + v167;
  v174 = (__PAIR128__(v154, v155) + __PAIR128__(v144, v145) + __PAIR128__(v148, v160) + ((v169 + (v172 >> 51)) >> 51)) >> 64;
  v173 = v155 + v145 + v160 + ((v169 + (v172 >> 51)) >> 51);
  v175 = v174 >> 51;
  v176 = (__int128)__PAIR128__(v174, v173) >> 51;
  v173 &= 0x7FFFFFFFFFFFFuLL;
  v178 = v147 + v150 + v166 + v176;
  v177 = (__PAIR128__(v146, v147) + __PAIR128__(v149, v150) + __PAIR128__(v165, v166) + __PAIR128__(v175, v176)) >> 64;
  v179 = v178 & 0x7FFFFFFFFFFFFLL;
  v180 = v168 + 19 * ((__int128)__PAIR128__(v177, v178) >> 51);
  v181 = v180 & 0x7FFFFFFFFFFFFLL;
  v182 = ((v171 + v167) & 0x7FFFFFFFFFFFFLL) + (v180 >> 51);
  v183 = v182 & 0x7FFFFFFFFFFFFLL;
  v184 = ((v169 + (v172 >> 51)) & 0x7FFFFFFFFFFFFLL) + (v182 >> 51);
  v185 = 38 * (v178 & 0x7FFFFFFFFFFFFLL);
  v186 = 2 * (v178 & 0x7FFFFFFFFFFFFLL);
  v187 = ((unint64_t)v179 * (unsigned __int128)(unint64_t)(19 * v179)) >> 64;
  v188 = v179 * 19 * v179;
  v189 = ((unint64_t)v183 * (unsigned __int128)(2 * v173)) >> 64;
  v190 = v183 * 2 * v173;
  v191 = ((unint64_t)(2 * v184) * (unsigned __int128)(unint64_t)v183) >> 64;
  v192 = ((unint64_t)v181 * (unsigned __int128)(unint64_t)v186) >> 64;
  v193 = v181 * v186;
  v197 = ((unint64_t)v181 * (unsigned __int128)(2 * v173)) >> 64;
  v198 = v181 * 2 * v173;
  v196 = (unint64_t)v183 * (unsigned __int128)(unint64_t)v185
       + (unint64_t)v181 * (unsigned __int128)(unint64_t)v181
       + (unint64_t)v184 * (unsigned __int128)(38 * v173);
  v194 = v196 >> 64;
  v195 = v196;
  v199 = ((unint64_t)(2 * v184) * (unsigned __int128)(unint64_t)v181) >> 64;
  v202 = ((unint64_t)(2 * v183) * (unsigned __int128)(unint64_t)v181) >> 64;
  v203 = 2 * v183 * v181;
  v204 = 2 * v184 * v181;
  v205 = 2 * v184 * v183;
  v201 = ((unint64_t)v183 * (unsigned __int128)(unint64_t)v183
        + v173 * (unsigned __int128)(unint64_t)v185) >> 64;
  v200 = v183 * v183 + v173 * v185;
  v206 = ((unint64_t)v184 * (unsigned __int128)(unint64_t)v185) >> 64;
  v207 = v184 * v185;
  v208 = v200;
  v209 = ((unint64_t)v184 * (unsigned __int128)(unint64_t)v184) >> 64;
  v210 = v184 * v184;
  v211 = (__int128)__PAIR128__(v194, v195) >> 51;
  v212 = v195 & 0x7FFFFFFFFFFFFLL;
  v213 = __PAIR128__(v201, v208) + __PAIR128__(v199, v204);
  v215 = __PAIR128__(v206, v207) + v173 * (unsigned __int128)(19 * v173) + __PAIR128__(v202, v203);
  v214 = *((_QWORD *)&v215 + 1);
  if (__CFADD__((_QWORD)v215, v211))
    v214 = *((_QWORD *)&v215 + 1) + 1;
  *((_QWORD *)&v216 + 1) = v214;
  *(_QWORD *)&v216 = v215 + v211;
  v217 = (v213 + (v216 >> 51)) >> 64;
  v218 = v213 + (v216 >> 51);
  *((_QWORD *)&v216 + 1) = (__PAIR128__(v197, v198)
                          + __PAIR128__(v187, v188)
                          + __PAIR128__(v191, v205)
                          + ((v213 + (v216 >> 51)) >> 51)) >> 64;
  *(_QWORD *)&v216 = v198 + v188 + v205 + ((__int128)__PAIR128__(v217, v218) >> 51);
  v219 = __PAIR128__(v189, v190) + __PAIR128__(v192, v193) + __PAIR128__(v209, v210) + (v216 >> 51);
  v220 = v219 & 0x7FFFFFFFFFFFFLL;
  v221 = v212 + 19 * (v219 >> 51);
  v222 = v221 & 0x7FFFFFFFFFFFFLL;
  v223 = ((v215 + v211) & 0x7FFFFFFFFFFFFLL) + (v221 >> 51);
  v224 = v223 & 0x7FFFFFFFFFFFFLL;
  v225 = (v218 & 0x7FFFFFFFFFFFFLL) + (v223 >> 51);
  v226 = 38 * (v219 & 0x7FFFFFFFFFFFFLL);
  v227 = 2 * (v219 & 0x7FFFFFFFFFFFFLL);
  v228 = ((unint64_t)v220 * (unsigned __int128)(unint64_t)(19 * v220)) >> 64;
  v229 = v220 * 19 * v220;
  v230 = v225 * 38 * (v216 & 0x7FFFFFFFFFFFFLL);
  v231 = ((unint64_t)v224 * (unsigned __int128)(2 * ((unint64_t)v216 & 0x7FFFFFFFFFFFFLL))) >> 64;
  v232 = v224 * 2 * (v216 & 0x7FFFFFFFFFFFFLL);
  v233 = (unint64_t)v224 * (unsigned __int128)(unint64_t)v226
       + (unint64_t)v222 * (unsigned __int128)(unint64_t)v222;
  v234 = ((unint64_t)v222 * (unsigned __int128)(unint64_t)v227) >> 64;
  v235 = v222 * v227;
  v19 = __CFADD__((_QWORD)v233, v230);
  v236 = v233 + v230;
  v237 = ((unint64_t)v222 * (unsigned __int128)(2 * ((unint64_t)v216 & 0x7FFFFFFFFFFFFLL))) >> 64;
  v238 = v222 * 2 * (v216 & 0x7FFFFFFFFFFFFLL);
  v239 = (unint64_t)v224 * (unsigned __int128)(unint64_t)v224
       + (v216 & 0x7FFFFFFFFFFFFLL) * (unint64_t)v226
       + (unint64_t)(2 * v225) * (unsigned __int128)(unint64_t)v222;
  v241 = ((unint64_t)v225 * (unsigned __int128)(unint64_t)v226
        + (v216 & 0x7FFFFFFFFFFFFLL) * 19 * ((unint64_t)v216 & 0x7FFFFFFFFFFFFLL)
        + (unint64_t)(2 * v224) * (unsigned __int128)(unint64_t)v222) >> 64;
  v240 = v225 * v226 + (v216 & 0x7FFFFFFFFFFFFLL) * 19 * (v216 & 0x7FFFFFFFFFFFFLL) + 2 * v224 * v222;
  *((_QWORD *)&v216 + 1) = (((unint64_t)v225
                           * (unsigned __int128)(38 * ((unint64_t)v216 & 0x7FFFFFFFFFFFFLL))) >> 64)
                         + v19
                         + *((_QWORD *)&v233 + 1);
  *(_QWORD *)&v216 = v236;
  v242 = (__int128)v216 >> 51;
  v19 = __CFADD__(v240, v242);
  v243 = v240 + v242;
  if (v19)
    ++v241;
  *((_QWORD *)&v244 + 1) = v241;
  *(_QWORD *)&v244 = v243;
  v245 = v239 + (v244 >> 51);
  v246 = __PAIR128__(v237, v238)
       + __PAIR128__(v228, v229)
       + (unint64_t)(2 * v225) * (unsigned __int128)(unint64_t)v224
       + (v245 >> 51);
  v247 = __PAIR128__(v231, v232)
       + __PAIR128__(v234, v235)
       + (unint64_t)v225 * (unsigned __int128)(unint64_t)v225
       + (v246 >> 51);
  v248 = v246 & 0x7FFFFFFFFFFFFLL;
  v249 = v247 & 0x7FFFFFFFFFFFFLL;
  v250 = (v236 & 0x7FFFFFFFFFFFFLL) + 19 * (v247 >> 51);
  v251 = v250 & 0x7FFFFFFFFFFFFLL;
  v252 = (v243 & 0x7FFFFFFFFFFFFLL) + (v250 >> 51);
  v253 = v252 & 0x7FFFFFFFFFFFFLL;
  v254 = (v245 & 0x7FFFFFFFFFFFFLL) + (v252 >> 51);
  v255 = (unint64_t)v253 * (unsigned __int128)(38 * ((unint64_t)v247 & 0x7FFFFFFFFFFFFLL))
       + (unint64_t)v251 * (unsigned __int128)(unint64_t)v251
       + (unint64_t)v254 * (unsigned __int128)(38 * ((unint64_t)v246 & 0x7FFFFFFFFFFFFLL));
  v256 = v255 >> 51;
  v257 = ((unint64_t)v254 * (unsigned __int128)(38 * ((unint64_t)v247 & 0x7FFFFFFFFFFFFLL))
        + (unint64_t)v248 * (unsigned __int128)(unint64_t)(19 * v248)
        + (unint64_t)(2 * v253) * (unsigned __int128)(unint64_t)v251) >> 64;
  v258 = v254 * 38 * (v247 & 0x7FFFFFFFFFFFFLL) + v248 * 19 * v248 + 2 * v253 * v251;
  v19 = __CFADD__(v258, v256);
  v259 = v258 + v256;
  if (v19)
    ++v257;
  *((_QWORD *)&v260 + 1) = v257;
  *(_QWORD *)&v260 = v259;
  v264 = 2 * v248;
  v265 = (unint64_t)v251 * (unsigned __int128)(unint64_t)v264
       + (unint64_t)v249 * (unsigned __int128)(unint64_t)(19 * v249)
       + (unint64_t)(2 * v254) * (unsigned __int128)(unint64_t)v253;
  v266 = (unint64_t)v253 * (unsigned __int128)(unint64_t)v264
       + (unint64_t)v251 * (unsigned __int128)(unint64_t)(2 * v249)
       + (unint64_t)v254 * (unsigned __int128)(unint64_t)v254;
  v263 = (unint64_t)v253 * (unsigned __int128)(unint64_t)v253
       + (v246 & 0x7FFFFFFFFFFFFLL) * 38 * ((unint64_t)v247 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)(2 * v254) * (unsigned __int128)(unint64_t)v251
       + (v260 >> 51);
  v261 = v263 >> 64;
  v262 = v263;
  *((_QWORD *)&v260 + 1) = (v265 + (__PAIR128__(v261, v262) >> 51)) >> 64;
  *(_QWORD *)&v260 = v265 + ((__int128)__PAIR128__(v261, v262) >> 51);
  v267.i64[0] = v260;
  v267.i64[1] = v266 + (v260 >> 51);
  v268 = (v255 & 0x7FFFFFFFFFFFFLL) + 19 * ((__int128)(v266 + (v260 >> 51)) >> 51);
  v269 = (v259 & 0x7FFFFFFFFFFFFLL) + (v268 >> 51);
  v812 = v269 & 0x7FFFFFFFFFFFFLL;
  v813 = (v262 & 0x7FFFFFFFFFFFFLL) + (v269 >> 51);
  v811 = v268 & 0x7FFFFFFFFFFFFLL;
  v814 = vandq_s8(v267, v805);
  fe_mul_impl((uint64_t)&v815, (unint64_t *)&v811, (unint64_t *)&v815);
  v270 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
       + (unint64_t)v817 * (unsigned __int128)(unint64_t)(38 * v818.i64[0])
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)v815;
  v271 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])
       + (unint64_t)v817 * (unsigned __int128)(unint64_t)v817
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[1]);
  v272 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v817)
       + (unint64_t)(19 * v818.i64[1]) * (unsigned __int128)v818.u64[1]
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[0]);
  v273 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)v816
        + v818.u64[0] * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
        + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v817)) >> 64;
  v274 = v816 * v816 + v818.i64[0] * 38 * v818.i64[1] + v815 * 2 * v817;
  v276 = ((unint64_t)v817 * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
        + (unint64_t)(19 * v818.i64[0]) * (unsigned __int128)v818.u64[0]
        + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v816)) >> 64;
  v275 = v817 * 38 * v818.i64[1] + 19 * v818.i64[0] * v818.i64[0] + v815 * 2 * v816;
  v277 = v270 >> 51;
  v19 = __CFADD__(v275, v277);
  v278 = v275 + v277;
  if (v19)
    ++v276;
  *((_QWORD *)&v280 + 1) = v276;
  *(_QWORD *)&v280 = v278;
  v279 = v280 >> 51;
  v19 = __CFADD__(v274, v279);
  v281 = v274 + v279;
  if (v19)
    ++v273;
  *((_QWORD *)&v283 + 1) = v273;
  *(_QWORD *)&v283 = v281;
  v282 = v283 >> 51;
  v284 = v272 + v282;
  if (__CFADD__((_QWORD)v272, v282))
    v285 = *((_QWORD *)&v272 + 1) + 1;
  else
    v285 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v817)
          + (unint64_t)(19 * v818.i64[1]) * (unsigned __int128)v818.u64[1]
          + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])) >> 64;
  *((_QWORD *)&v287 + 1) = v285;
  *(_QWORD *)&v287 = v284;
  v286 = v287 >> 51;
  v19 = __CFADD__((_QWORD)v271, v286);
  v288 = v271 + v286;
  v289 = v278 & 0x7FFFFFFFFFFFFLL;
  v290 = v281 & 0x7FFFFFFFFFFFFLL;
  v291 = v284 & 0x7FFFFFFFFFFFFLL;
  if (v19)
    v292 = *((_QWORD *)&v271 + 1) + 1;
  else
    v292 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])
          + (unint64_t)v817 * (unsigned __int128)(unint64_t)v817
          + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[1])) >> 64;
  *((_QWORD *)&v293 + 1) = v292;
  *(_QWORD *)&v293 = v288;
  v294 = v288 & 0x7FFFFFFFFFFFFLL;
  v295 = (v270 & 0x7FFFFFFFFFFFFLL) + 19 * (v293 >> 51);
  v296 = v295 & 0x7FFFFFFFFFFFFLL;
  v297 = v289 + (v295 >> 51);
  v298 = v297 & 0x7FFFFFFFFFFFFLL;
  v299 = v290 + (v297 >> 51);
  v300 = 9;
  do
  {
    v301 = ((unint64_t)v291 * (unsigned __int128)(unint64_t)(38 * v294)) >> 64;
    v302 = v291 * 38 * v294;
    v303 = ((unint64_t)v299 * (unsigned __int128)(unint64_t)(38 * v294)) >> 64;
    v304 = v299 * 38 * v294;
    v305 = (unint64_t)v298 * (unsigned __int128)(unint64_t)(38 * v294)
         + (unint64_t)v299 * (unsigned __int128)(unint64_t)(38 * v291)
         + (unint64_t)v296 * (unsigned __int128)(unint64_t)v296;
    v306 = (unint64_t)v298 * (unsigned __int128)(unint64_t)(2 * v291)
         + (unint64_t)v299 * (unsigned __int128)(unint64_t)v299
         + (unint64_t)v296 * (unsigned __int128)(unint64_t)(2 * v294);
    v307 = ((unint64_t)v296 * (unsigned __int128)(unint64_t)(2 * v298)) >> 64;
    v308 = v296 * 2 * v298;
    v311 = (unint64_t)v298 * (unsigned __int128)(unint64_t)(2 * v299)
         + (unint64_t)(19 * v294) * (unsigned __int128)(unint64_t)v294
         + (unint64_t)v296 * (unsigned __int128)(unint64_t)(2 * v291);
    v310 = v311 >> 64;
    v309 = v311;
    v313 = v298 * v298 + v302 + v296 * 2 * v299;
    v312 = ((unint64_t)v298 * (unsigned __int128)(unint64_t)v298
          + __PAIR128__(v301, v302)
          + (unint64_t)v296 * (unsigned __int128)(unint64_t)(2 * v299)) >> 64;
    v315 = (__PAIR128__(v303, v304)
          + (unint64_t)(19 * v291) * (unsigned __int128)(unint64_t)v291
          + __PAIR128__(v307, v308)) >> 64;
    v314 = v304 + 19 * v291 * v291 + v308;
    v316 = v305 >> 51;
    v19 = __CFADD__(v314, v316);
    v317 = v314 + v316;
    if (v19)
      ++v315;
    *((_QWORD *)&v319 + 1) = v315;
    *(_QWORD *)&v319 = v317;
    v318 = v319 >> 51;
    v320 = v313 + v318;
    if (__CFADD__(v313, v318))
      ++v312;
    *((_QWORD *)&v322 + 1) = v312;
    *(_QWORD *)&v322 = v313 + v318;
    v321 = v322 >> 51;
    v19 = __CFADD__(v309, v321);
    v323 = v309 + v321;
    if (v19)
      v324 = v310 + 1;
    else
      v324 = v310;
    *((_QWORD *)&v326 + 1) = v324;
    *(_QWORD *)&v326 = v323;
    v325 = v326 >> 51;
    v19 = __CFADD__((_QWORD)v306, v325);
    v327 = v306 + v325;
    if (v19)
      v328 = *((_QWORD *)&v306 + 1) + 1;
    else
      v328 = *((_QWORD *)&v306 + 1);
    *((_QWORD *)&v329 + 1) = v328;
    *(_QWORD *)&v329 = v327;
    v330 = (v305 & 0x7FFFFFFFFFFFFLL) + 19 * (v329 >> 51);
    v331 = v317 & 0x7FFFFFFFFFFFFLL;
    v332 = v320 & 0x7FFFFFFFFFFFFLL;
    v291 = v323 & 0x7FFFFFFFFFFFFLL;
    v294 = v327 & 0x7FFFFFFFFFFFFLL;
    v333 = v331 + (v330 >> 51);
    v296 = v330 & 0x7FFFFFFFFFFFFLL;
    v299 = v332 + (v333 >> 51);
    v298 = v333 & 0x7FFFFFFFFFFFFLL;
    --v300;
  }
  while (v300);
  v814.i64[0] = v291;
  v814.i64[1] = v294;
  v812 = v298;
  v813 = v299;
  v811 = v296;
  fe_mul_impl((uint64_t)&v811, (unint64_t *)&v811, (unint64_t *)&v815);
  v334 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
       + (unint64_t)v813 * (unsigned __int128)(unint64_t)(38 * v814.i64[0])
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)v811;
  v335 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])
       + (unint64_t)v813 * (unsigned __int128)(unint64_t)v813
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[1]);
  v336 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v813)
       + (unint64_t)(19 * v814.i64[1]) * (unsigned __int128)v814.u64[1]
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[0]);
  v338 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)v812
        + v814.u64[0] * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
        + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v813)) >> 64;
  v337 = v812 * v812 + v814.i64[0] * 38 * v814.i64[1] + v811 * 2 * v813;
  v340 = ((unint64_t)v813 * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
        + (unint64_t)(19 * v814.i64[0]) * (unsigned __int128)v814.u64[0]
        + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v812)) >> 64;
  v339 = v813 * 38 * v814.i64[1] + 19 * v814.i64[0] * v814.i64[0] + v811 * 2 * v812;
  v341 = v334 >> 51;
  v19 = __CFADD__(v339, v341);
  v342 = v339 + v341;
  if (v19)
    ++v340;
  *((_QWORD *)&v344 + 1) = v340;
  *(_QWORD *)&v344 = v342;
  v343 = v344 >> 51;
  v19 = __CFADD__(v337, v343);
  v345 = v337 + v343;
  if (v19)
    ++v338;
  *((_QWORD *)&v347 + 1) = v338;
  *(_QWORD *)&v347 = v345;
  v346 = v347 >> 51;
  v348 = v336 + v346;
  if (__CFADD__((_QWORD)v336, v346))
    v349 = *((_QWORD *)&v336 + 1) + 1;
  else
    v349 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v813)
          + (unint64_t)(19 * v814.i64[1]) * (unsigned __int128)v814.u64[1]
          + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])) >> 64;
  *((_QWORD *)&v351 + 1) = v349;
  *(_QWORD *)&v351 = v348;
  v350 = v351 >> 51;
  v19 = __CFADD__((_QWORD)v335, v350);
  v352 = v335 + v350;
  v353 = v342 & 0x7FFFFFFFFFFFFLL;
  v354 = v345 & 0x7FFFFFFFFFFFFLL;
  v355 = v348 & 0x7FFFFFFFFFFFFLL;
  if (v19)
    v356 = *((_QWORD *)&v335 + 1) + 1;
  else
    v356 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])
          + (unint64_t)v813 * (unsigned __int128)(unint64_t)v813
          + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[1])) >> 64;
  *((_QWORD *)&v357 + 1) = v356;
  *(_QWORD *)&v357 = v352;
  v358 = v352 & 0x7FFFFFFFFFFFFLL;
  v359 = (v334 & 0x7FFFFFFFFFFFFLL) + 19 * (v357 >> 51);
  v360 = v359 & 0x7FFFFFFFFFFFFLL;
  v361 = v353 + (v359 >> 51);
  v362 = v361 & 0x7FFFFFFFFFFFFLL;
  v363 = v354 + (v361 >> 51);
  v364 = 19;
  do
  {
    v365 = ((unint64_t)v355 * (unsigned __int128)(unint64_t)(38 * v358)) >> 64;
    v366 = v355 * 38 * v358;
    v367 = ((unint64_t)v363 * (unsigned __int128)(unint64_t)(38 * v358)) >> 64;
    v368 = v363 * 38 * v358;
    v369 = (unint64_t)v362 * (unsigned __int128)(unint64_t)(38 * v358)
         + (unint64_t)v363 * (unsigned __int128)(unint64_t)(38 * v355)
         + (unint64_t)v360 * (unsigned __int128)(unint64_t)v360;
    v370 = (unint64_t)v362 * (unsigned __int128)(unint64_t)(2 * v355)
         + (unint64_t)v363 * (unsigned __int128)(unint64_t)v363
         + (unint64_t)v360 * (unsigned __int128)(unint64_t)(2 * v358);
    v371 = ((unint64_t)v360 * (unsigned __int128)(unint64_t)(2 * v362)) >> 64;
    v372 = v360 * 2 * v362;
    v375 = (unint64_t)v362 * (unsigned __int128)(unint64_t)(2 * v363)
         + (unint64_t)(19 * v358) * (unsigned __int128)(unint64_t)v358
         + (unint64_t)v360 * (unsigned __int128)(unint64_t)(2 * v355);
    v373 = v375 >> 64;
    v374 = v375;
    v377 = v362 * v362 + v366 + v360 * 2 * v363;
    v376 = ((unint64_t)v362 * (unsigned __int128)(unint64_t)v362
          + __PAIR128__(v365, v366)
          + (unint64_t)v360 * (unsigned __int128)(unint64_t)(2 * v363)) >> 64;
    v379 = (__PAIR128__(v367, v368)
          + (unint64_t)(19 * v355) * (unsigned __int128)(unint64_t)v355
          + __PAIR128__(v371, v372)) >> 64;
    v378 = v368 + 19 * v355 * v355 + v372;
    v380 = v369 >> 51;
    v19 = __CFADD__(v378, v380);
    v381 = v378 + v380;
    if (v19)
      ++v379;
    *((_QWORD *)&v383 + 1) = v379;
    *(_QWORD *)&v383 = v381;
    v382 = v383 >> 51;
    v384 = v377 + v382;
    if (__CFADD__(v377, v382))
      ++v376;
    *((_QWORD *)&v386 + 1) = v376;
    *(_QWORD *)&v386 = v377 + v382;
    v385 = v386 >> 51;
    v19 = __CFADD__(v374, v385);
    v387 = v374 + v385;
    if (v19)
      v388 = v373 + 1;
    else
      v388 = v373;
    *((_QWORD *)&v390 + 1) = v388;
    *(_QWORD *)&v390 = v387;
    v389 = v390 >> 51;
    v19 = __CFADD__((_QWORD)v370, v389);
    v391 = v370 + v389;
    if (v19)
      v392 = *((_QWORD *)&v370 + 1) + 1;
    else
      v392 = *((_QWORD *)&v370 + 1);
    *((_QWORD *)&v393 + 1) = v392;
    *(_QWORD *)&v393 = v391;
    v394 = (v369 & 0x7FFFFFFFFFFFFLL) + 19 * (v393 >> 51);
    v395 = v381 & 0x7FFFFFFFFFFFFLL;
    v396 = v384 & 0x7FFFFFFFFFFFFLL;
    v355 = v387 & 0x7FFFFFFFFFFFFLL;
    v358 = v391 & 0x7FFFFFFFFFFFFLL;
    v397 = v395 + (v394 >> 51);
    v360 = v394 & 0x7FFFFFFFFFFFFLL;
    v363 = v396 + (v397 >> 51);
    v362 = v397 & 0x7FFFFFFFFFFFFLL;
    --v364;
  }
  while (v364);
  v809 = v355;
  v810 = v358;
  v807 = v362;
  v808 = v363;
  v806 = v360;
  fe_mul_impl((uint64_t)&v811, (unint64_t *)&v806, (unint64_t *)&v811);
  v398 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
       + (unint64_t)v813 * (unsigned __int128)(unint64_t)(38 * v814.i64[0])
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)v811;
  v399 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])
       + (unint64_t)v813 * (unsigned __int128)(unint64_t)v813
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[1]);
  v400 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v813)
       + (unint64_t)(19 * v814.i64[1]) * (unsigned __int128)v814.u64[1]
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[0]);
  v402 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)v812
        + v814.u64[0] * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
        + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v813)) >> 64;
  v401 = v812 * v812 + v814.i64[0] * 38 * v814.i64[1] + v811 * 2 * v813;
  v404 = ((unint64_t)v813 * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
        + (unint64_t)(19 * v814.i64[0]) * (unsigned __int128)v814.u64[0]
        + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v812)) >> 64;
  v403 = v813 * 38 * v814.i64[1] + 19 * v814.i64[0] * v814.i64[0] + v811 * 2 * v812;
  v405 = v398 >> 51;
  v19 = __CFADD__(v403, v405);
  v406 = v403 + v405;
  if (v19)
    ++v404;
  *((_QWORD *)&v408 + 1) = v404;
  *(_QWORD *)&v408 = v406;
  v407 = v408 >> 51;
  v19 = __CFADD__(v401, v407);
  v409 = v401 + v407;
  if (v19)
    ++v402;
  *((_QWORD *)&v411 + 1) = v402;
  *(_QWORD *)&v411 = v409;
  v410 = v411 >> 51;
  v412 = v400 + v410;
  if (__CFADD__((_QWORD)v400, v410))
    v413 = *((_QWORD *)&v400 + 1) + 1;
  else
    v413 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v813)
          + (unint64_t)(19 * v814.i64[1]) * (unsigned __int128)v814.u64[1]
          + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])) >> 64;
  *((_QWORD *)&v415 + 1) = v413;
  *(_QWORD *)&v415 = v412;
  v414 = v415 >> 51;
  v19 = __CFADD__((_QWORD)v399, v414);
  v416 = v399 + v414;
  v417 = v406 & 0x7FFFFFFFFFFFFLL;
  v418 = v409 & 0x7FFFFFFFFFFFFLL;
  v419 = v412 & 0x7FFFFFFFFFFFFLL;
  if (v19)
    v420 = *((_QWORD *)&v399 + 1) + 1;
  else
    v420 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])
          + (unint64_t)v813 * (unsigned __int128)(unint64_t)v813
          + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[1])) >> 64;
  *((_QWORD *)&v421 + 1) = v420;
  *(_QWORD *)&v421 = v416;
  v422 = v416 & 0x7FFFFFFFFFFFFLL;
  v423 = (v398 & 0x7FFFFFFFFFFFFLL) + 19 * (v421 >> 51);
  v424 = v423 & 0x7FFFFFFFFFFFFLL;
  v425 = v417 + (v423 >> 51);
  v426 = v425 & 0x7FFFFFFFFFFFFLL;
  v427 = v418 + (v425 >> 51);
  v428 = 9;
  do
  {
    v429 = ((unint64_t)v419 * (unsigned __int128)(unint64_t)(38 * v422)) >> 64;
    v430 = v419 * 38 * v422;
    v431 = ((unint64_t)v427 * (unsigned __int128)(unint64_t)(38 * v422)) >> 64;
    v432 = v427 * 38 * v422;
    v433 = (unint64_t)v426 * (unsigned __int128)(unint64_t)(38 * v422)
         + (unint64_t)v427 * (unsigned __int128)(unint64_t)(38 * v419)
         + (unint64_t)v424 * (unsigned __int128)(unint64_t)v424;
    v434 = (unint64_t)v426 * (unsigned __int128)(unint64_t)(2 * v419)
         + (unint64_t)v427 * (unsigned __int128)(unint64_t)v427
         + (unint64_t)v424 * (unsigned __int128)(unint64_t)(2 * v422);
    v435 = ((unint64_t)v424 * (unsigned __int128)(unint64_t)(2 * v426)) >> 64;
    v436 = v424 * 2 * v426;
    v439 = (unint64_t)v426 * (unsigned __int128)(unint64_t)(2 * v427)
         + (unint64_t)(19 * v422) * (unsigned __int128)(unint64_t)v422
         + (unint64_t)v424 * (unsigned __int128)(unint64_t)(2 * v419);
    v437 = v439 >> 64;
    v438 = v439;
    v441 = v426 * v426 + v430 + v424 * 2 * v427;
    v440 = ((unint64_t)v426 * (unsigned __int128)(unint64_t)v426
          + __PAIR128__(v429, v430)
          + (unint64_t)v424 * (unsigned __int128)(unint64_t)(2 * v427)) >> 64;
    v443 = (__PAIR128__(v431, v432)
          + (unint64_t)(19 * v419) * (unsigned __int128)(unint64_t)v419
          + __PAIR128__(v435, v436)) >> 64;
    v442 = v432 + 19 * v419 * v419 + v436;
    v444 = v433 >> 51;
    v19 = __CFADD__(v442, v444);
    v445 = v442 + v444;
    if (v19)
      ++v443;
    *((_QWORD *)&v447 + 1) = v443;
    *(_QWORD *)&v447 = v445;
    v446 = v447 >> 51;
    v448 = v441 + v446;
    if (__CFADD__(v441, v446))
      ++v440;
    *((_QWORD *)&v450 + 1) = v440;
    *(_QWORD *)&v450 = v441 + v446;
    v449 = v450 >> 51;
    v19 = __CFADD__(v438, v449);
    v451 = v438 + v449;
    if (v19)
      v452 = v437 + 1;
    else
      v452 = v437;
    *((_QWORD *)&v454 + 1) = v452;
    *(_QWORD *)&v454 = v451;
    v453 = v454 >> 51;
    v19 = __CFADD__((_QWORD)v434, v453);
    v455 = v434 + v453;
    if (v19)
      v456 = *((_QWORD *)&v434 + 1) + 1;
    else
      v456 = *((_QWORD *)&v434 + 1);
    *((_QWORD *)&v457 + 1) = v456;
    *(_QWORD *)&v457 = v455;
    v458 = (v433 & 0x7FFFFFFFFFFFFLL) + 19 * (v457 >> 51);
    v459 = v445 & 0x7FFFFFFFFFFFFLL;
    v460 = v448 & 0x7FFFFFFFFFFFFLL;
    v419 = v451 & 0x7FFFFFFFFFFFFLL;
    v422 = v455 & 0x7FFFFFFFFFFFFLL;
    v461 = v459 + (v458 >> 51);
    v424 = v458 & 0x7FFFFFFFFFFFFLL;
    v427 = v460 + (v461 >> 51);
    v426 = v461 & 0x7FFFFFFFFFFFFLL;
    --v428;
  }
  while (v428);
  v814.i64[0] = v419;
  v814.i64[1] = v422;
  v812 = v426;
  v813 = v427;
  v811 = v424;
  fe_mul_impl((uint64_t)&v815, (unint64_t *)&v811, (unint64_t *)&v815);
  v462 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
       + (unint64_t)v817 * (unsigned __int128)(unint64_t)(38 * v818.i64[0])
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)v815;
  v463 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])
       + (unint64_t)v817 * (unsigned __int128)(unint64_t)v817
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[1]);
  v464 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v817)
       + (unint64_t)(19 * v818.i64[1]) * (unsigned __int128)v818.u64[1]
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[0]);
  v466 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)v816
        + v818.u64[0] * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
        + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v817)) >> 64;
  v465 = v816 * v816 + v818.i64[0] * 38 * v818.i64[1] + v815 * 2 * v817;
  v468 = ((unint64_t)v817 * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
        + (unint64_t)(19 * v818.i64[0]) * (unsigned __int128)v818.u64[0]
        + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v816)) >> 64;
  v467 = v817 * 38 * v818.i64[1] + 19 * v818.i64[0] * v818.i64[0] + v815 * 2 * v816;
  v469 = v462 >> 51;
  v19 = __CFADD__(v467, v469);
  v470 = v467 + v469;
  if (v19)
    ++v468;
  *((_QWORD *)&v472 + 1) = v468;
  *(_QWORD *)&v472 = v470;
  v471 = v472 >> 51;
  v19 = __CFADD__(v465, v471);
  v473 = v465 + v471;
  if (v19)
    ++v466;
  *((_QWORD *)&v475 + 1) = v466;
  *(_QWORD *)&v475 = v473;
  v474 = v475 >> 51;
  v476 = v464 + v474;
  if (__CFADD__((_QWORD)v464, v474))
    v477 = *((_QWORD *)&v464 + 1) + 1;
  else
    v477 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v817)
          + (unint64_t)(19 * v818.i64[1]) * (unsigned __int128)v818.u64[1]
          + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])) >> 64;
  *((_QWORD *)&v479 + 1) = v477;
  *(_QWORD *)&v479 = v476;
  v478 = v479 >> 51;
  v19 = __CFADD__((_QWORD)v463, v478);
  v480 = v463 + v478;
  v481 = v470 & 0x7FFFFFFFFFFFFLL;
  v482 = v473 & 0x7FFFFFFFFFFFFLL;
  v483 = v476 & 0x7FFFFFFFFFFFFLL;
  if (v19)
    v484 = *((_QWORD *)&v463 + 1) + 1;
  else
    v484 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])
          + (unint64_t)v817 * (unsigned __int128)(unint64_t)v817
          + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[1])) >> 64;
  *((_QWORD *)&v485 + 1) = v484;
  *(_QWORD *)&v485 = v480;
  v486 = v480 & 0x7FFFFFFFFFFFFLL;
  v487 = (v462 & 0x7FFFFFFFFFFFFLL) + 19 * (v485 >> 51);
  v488 = v487 & 0x7FFFFFFFFFFFFLL;
  v489 = v481 + (v487 >> 51);
  v490 = v489 & 0x7FFFFFFFFFFFFLL;
  v491 = v482 + (v489 >> 51);
  v492 = 49;
  do
  {
    v493 = ((unint64_t)v483 * (unsigned __int128)(unint64_t)(38 * v486)) >> 64;
    v494 = v483 * 38 * v486;
    v495 = ((unint64_t)v491 * (unsigned __int128)(unint64_t)(38 * v486)) >> 64;
    v496 = v491 * 38 * v486;
    v497 = (unint64_t)v490 * (unsigned __int128)(unint64_t)(38 * v486)
         + (unint64_t)v491 * (unsigned __int128)(unint64_t)(38 * v483)
         + (unint64_t)v488 * (unsigned __int128)(unint64_t)v488;
    v498 = (unint64_t)v490 * (unsigned __int128)(unint64_t)(2 * v483)
         + (unint64_t)v491 * (unsigned __int128)(unint64_t)v491
         + (unint64_t)v488 * (unsigned __int128)(unint64_t)(2 * v486);
    v499 = ((unint64_t)v488 * (unsigned __int128)(unint64_t)(2 * v490)) >> 64;
    v500 = v488 * 2 * v490;
    v503 = (unint64_t)v490 * (unsigned __int128)(unint64_t)(2 * v491)
         + (unint64_t)(19 * v486) * (unsigned __int128)(unint64_t)v486
         + (unint64_t)v488 * (unsigned __int128)(unint64_t)(2 * v483);
    v501 = v503 >> 64;
    v502 = v503;
    v505 = v490 * v490 + v494 + v488 * 2 * v491;
    v504 = ((unint64_t)v490 * (unsigned __int128)(unint64_t)v490
          + __PAIR128__(v493, v494)
          + (unint64_t)v488 * (unsigned __int128)(unint64_t)(2 * v491)) >> 64;
    v507 = (__PAIR128__(v495, v496)
          + (unint64_t)(19 * v483) * (unsigned __int128)(unint64_t)v483
          + __PAIR128__(v499, v500)) >> 64;
    v506 = v496 + 19 * v483 * v483 + v500;
    v508 = v497 >> 51;
    v19 = __CFADD__(v506, v508);
    v509 = v506 + v508;
    if (v19)
      ++v507;
    *((_QWORD *)&v511 + 1) = v507;
    *(_QWORD *)&v511 = v509;
    v510 = v511 >> 51;
    v512 = v505 + v510;
    if (__CFADD__(v505, v510))
      ++v504;
    *((_QWORD *)&v514 + 1) = v504;
    *(_QWORD *)&v514 = v505 + v510;
    v513 = v514 >> 51;
    v19 = __CFADD__(v502, v513);
    v515 = v502 + v513;
    if (v19)
      v516 = v501 + 1;
    else
      v516 = v501;
    *((_QWORD *)&v518 + 1) = v516;
    *(_QWORD *)&v518 = v515;
    v517 = v518 >> 51;
    v19 = __CFADD__((_QWORD)v498, v517);
    v519 = v498 + v517;
    if (v19)
      v520 = *((_QWORD *)&v498 + 1) + 1;
    else
      v520 = *((_QWORD *)&v498 + 1);
    *((_QWORD *)&v521 + 1) = v520;
    *(_QWORD *)&v521 = v519;
    v522 = (v497 & 0x7FFFFFFFFFFFFLL) + 19 * (v521 >> 51);
    v523 = v509 & 0x7FFFFFFFFFFFFLL;
    v524 = v512 & 0x7FFFFFFFFFFFFLL;
    v483 = v515 & 0x7FFFFFFFFFFFFLL;
    v486 = v519 & 0x7FFFFFFFFFFFFLL;
    v525 = v523 + (v522 >> 51);
    v488 = v522 & 0x7FFFFFFFFFFFFLL;
    v491 = v524 + (v525 >> 51);
    v490 = v525 & 0x7FFFFFFFFFFFFLL;
    --v492;
  }
  while (v492);
  v814.i64[0] = v483;
  v814.i64[1] = v486;
  v812 = v490;
  v813 = v491;
  v811 = v488;
  fe_mul_impl((uint64_t)&v811, (unint64_t *)&v811, (unint64_t *)&v815);
  v526 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
       + (unint64_t)v813 * (unsigned __int128)(unint64_t)(38 * v814.i64[0])
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)v811;
  v527 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])
       + (unint64_t)v813 * (unsigned __int128)(unint64_t)v813
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[1]);
  v528 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v813)
       + (unint64_t)(19 * v814.i64[1]) * (unsigned __int128)v814.u64[1]
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[0]);
  v530 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)v812
        + v814.u64[0] * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
        + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v813)) >> 64;
  v529 = v812 * v812 + v814.i64[0] * 38 * v814.i64[1] + v811 * 2 * v813;
  v532 = ((unint64_t)v813 * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
        + (unint64_t)(19 * v814.i64[0]) * (unsigned __int128)v814.u64[0]
        + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v812)) >> 64;
  v531 = v813 * 38 * v814.i64[1] + 19 * v814.i64[0] * v814.i64[0] + v811 * 2 * v812;
  v533 = v526 >> 51;
  v19 = __CFADD__(v531, v533);
  v534 = v531 + v533;
  if (v19)
    ++v532;
  *((_QWORD *)&v536 + 1) = v532;
  *(_QWORD *)&v536 = v534;
  v535 = v536 >> 51;
  v19 = __CFADD__(v529, v535);
  v537 = v529 + v535;
  if (v19)
    ++v530;
  *((_QWORD *)&v539 + 1) = v530;
  *(_QWORD *)&v539 = v537;
  v538 = v539 >> 51;
  v540 = v528 + v538;
  if (__CFADD__((_QWORD)v528, v538))
    v541 = *((_QWORD *)&v528 + 1) + 1;
  else
    v541 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v813)
          + (unint64_t)(19 * v814.i64[1]) * (unsigned __int128)v814.u64[1]
          + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])) >> 64;
  *((_QWORD *)&v543 + 1) = v541;
  *(_QWORD *)&v543 = v540;
  v542 = v543 >> 51;
  v19 = __CFADD__((_QWORD)v527, v542);
  v544 = v527 + v542;
  v545 = v534 & 0x7FFFFFFFFFFFFLL;
  v546 = v537 & 0x7FFFFFFFFFFFFLL;
  v547 = v540 & 0x7FFFFFFFFFFFFLL;
  if (v19)
    v548 = *((_QWORD *)&v527 + 1) + 1;
  else
    v548 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])
          + (unint64_t)v813 * (unsigned __int128)(unint64_t)v813
          + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[1])) >> 64;
  *((_QWORD *)&v549 + 1) = v548;
  *(_QWORD *)&v549 = v544;
  v550 = v544 & 0x7FFFFFFFFFFFFLL;
  v551 = (v526 & 0x7FFFFFFFFFFFFLL) + 19 * (v549 >> 51);
  v552 = v551 & 0x7FFFFFFFFFFFFLL;
  v553 = v545 + (v551 >> 51);
  v554 = v553 & 0x7FFFFFFFFFFFFLL;
  v555 = v546 + (v553 >> 51);
  v556 = 99;
  do
  {
    v557 = ((unint64_t)v547 * (unsigned __int128)(unint64_t)(38 * v550)) >> 64;
    v558 = v547 * 38 * v550;
    v559 = ((unint64_t)v555 * (unsigned __int128)(unint64_t)(38 * v550)) >> 64;
    v560 = v555 * 38 * v550;
    v561 = (unint64_t)v554 * (unsigned __int128)(unint64_t)(38 * v550)
         + (unint64_t)v555 * (unsigned __int128)(unint64_t)(38 * v547)
         + (unint64_t)v552 * (unsigned __int128)(unint64_t)v552;
    v562 = (unint64_t)v554 * (unsigned __int128)(unint64_t)(2 * v547)
         + (unint64_t)v555 * (unsigned __int128)(unint64_t)v555
         + (unint64_t)v552 * (unsigned __int128)(unint64_t)(2 * v550);
    v563 = ((unint64_t)v552 * (unsigned __int128)(unint64_t)(2 * v554)) >> 64;
    v564 = v552 * 2 * v554;
    v567 = (unint64_t)v554 * (unsigned __int128)(unint64_t)(2 * v555)
         + (unint64_t)(19 * v550) * (unsigned __int128)(unint64_t)v550
         + (unint64_t)v552 * (unsigned __int128)(unint64_t)(2 * v547);
    v565 = v567 >> 64;
    v566 = v567;
    v569 = v554 * v554 + v558 + v552 * 2 * v555;
    v568 = ((unint64_t)v554 * (unsigned __int128)(unint64_t)v554
          + __PAIR128__(v557, v558)
          + (unint64_t)v552 * (unsigned __int128)(unint64_t)(2 * v555)) >> 64;
    v571 = (__PAIR128__(v559, v560)
          + (unint64_t)(19 * v547) * (unsigned __int128)(unint64_t)v547
          + __PAIR128__(v563, v564)) >> 64;
    v570 = v560 + 19 * v547 * v547 + v564;
    v572 = v561 >> 51;
    v19 = __CFADD__(v570, v572);
    v573 = v570 + v572;
    if (v19)
      ++v571;
    *((_QWORD *)&v575 + 1) = v571;
    *(_QWORD *)&v575 = v573;
    v574 = v575 >> 51;
    v576 = v569 + v574;
    if (__CFADD__(v569, v574))
      ++v568;
    *((_QWORD *)&v578 + 1) = v568;
    *(_QWORD *)&v578 = v569 + v574;
    v577 = v578 >> 51;
    v19 = __CFADD__(v566, v577);
    v579 = v566 + v577;
    if (v19)
      v580 = v565 + 1;
    else
      v580 = v565;
    *((_QWORD *)&v582 + 1) = v580;
    *(_QWORD *)&v582 = v579;
    v581 = v582 >> 51;
    v19 = __CFADD__((_QWORD)v562, v581);
    v583 = v562 + v581;
    if (v19)
      v584 = *((_QWORD *)&v562 + 1) + 1;
    else
      v584 = *((_QWORD *)&v562 + 1);
    *((_QWORD *)&v585 + 1) = v584;
    *(_QWORD *)&v585 = v583;
    v586 = (v561 & 0x7FFFFFFFFFFFFLL) + 19 * (v585 >> 51);
    v587 = v573 & 0x7FFFFFFFFFFFFLL;
    v588 = v576 & 0x7FFFFFFFFFFFFLL;
    v547 = v579 & 0x7FFFFFFFFFFFFLL;
    v550 = v583 & 0x7FFFFFFFFFFFFLL;
    v589 = v587 + (v586 >> 51);
    v552 = v586 & 0x7FFFFFFFFFFFFLL;
    v555 = v588 + (v589 >> 51);
    v554 = v589 & 0x7FFFFFFFFFFFFLL;
    --v556;
  }
  while (v556);
  v809 = v547;
  v810 = v550;
  v807 = v554;
  v808 = v555;
  v806 = v552;
  fe_mul_impl((uint64_t)&v811, (unint64_t *)&v806, (unint64_t *)&v811);
  v590 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
       + (unint64_t)v813 * (unsigned __int128)(unint64_t)(38 * v814.i64[0])
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)v811;
  v591 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])
       + (unint64_t)v813 * (unsigned __int128)(unint64_t)v813
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[1]);
  v592 = (unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v813)
       + (unint64_t)(19 * v814.i64[1]) * (unsigned __int128)v814.u64[1]
       + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[0]);
  v594 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)v812
        + v814.u64[0] * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
        + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v813)) >> 64;
  v593 = v812 * v812 + v814.i64[0] * 38 * v814.i64[1] + v811 * 2 * v813;
  v596 = ((unint64_t)v813 * (unsigned __int128)(unint64_t)(38 * v814.i64[1])
        + (unint64_t)(19 * v814.i64[0]) * (unsigned __int128)v814.u64[0]
        + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v812)) >> 64;
  v595 = v813 * 38 * v814.i64[1] + 19 * v814.i64[0] * v814.i64[0] + v811 * 2 * v812;
  v597 = v590 >> 51;
  v19 = __CFADD__(v595, v597);
  v598 = v595 + v597;
  if (v19)
    ++v596;
  *((_QWORD *)&v600 + 1) = v596;
  *(_QWORD *)&v600 = v598;
  v599 = v600 >> 51;
  v19 = __CFADD__(v593, v599);
  v601 = v593 + v599;
  if (v19)
    ++v594;
  *((_QWORD *)&v603 + 1) = v594;
  *(_QWORD *)&v603 = v601;
  v602 = v603 >> 51;
  v604 = v592 + v602;
  if (__CFADD__((_QWORD)v592, v602))
    v605 = *((_QWORD *)&v592 + 1) + 1;
  else
    v605 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v813)
          + (unint64_t)(19 * v814.i64[1]) * (unsigned __int128)v814.u64[1]
          + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])) >> 64;
  *((_QWORD *)&v607 + 1) = v605;
  *(_QWORD *)&v607 = v604;
  v606 = v607 >> 51;
  v19 = __CFADD__((_QWORD)v591, v606);
  v608 = v591 + v606;
  v609 = v598 & 0x7FFFFFFFFFFFFLL;
  v610 = v601 & 0x7FFFFFFFFFFFFLL;
  v611 = v604 & 0x7FFFFFFFFFFFFLL;
  if (v19)
    v612 = *((_QWORD *)&v591 + 1) + 1;
  else
    v612 = ((unint64_t)v812 * (unsigned __int128)(unint64_t)(2 * v814.i64[0])
          + (unint64_t)v813 * (unsigned __int128)(unint64_t)v813
          + (unint64_t)v811 * (unsigned __int128)(unint64_t)(2 * v814.i64[1])) >> 64;
  *((_QWORD *)&v613 + 1) = v612;
  *(_QWORD *)&v613 = v608;
  v614 = v608 & 0x7FFFFFFFFFFFFLL;
  v615 = (v590 & 0x7FFFFFFFFFFFFLL) + 19 * (v613 >> 51);
  v616 = v615 & 0x7FFFFFFFFFFFFLL;
  v617 = v609 + (v615 >> 51);
  v618 = v617 & 0x7FFFFFFFFFFFFLL;
  v619 = v610 + (v617 >> 51);
  v620 = 49;
  do
  {
    v621 = ((unint64_t)v611 * (unsigned __int128)(unint64_t)(38 * v614)) >> 64;
    v622 = v611 * 38 * v614;
    v623 = ((unint64_t)v619 * (unsigned __int128)(unint64_t)(38 * v614)) >> 64;
    v624 = v619 * 38 * v614;
    v625 = (unint64_t)v618 * (unsigned __int128)(unint64_t)(38 * v614)
         + (unint64_t)v619 * (unsigned __int128)(unint64_t)(38 * v611)
         + (unint64_t)v616 * (unsigned __int128)(unint64_t)v616;
    v626 = (unint64_t)v618 * (unsigned __int128)(unint64_t)(2 * v611)
         + (unint64_t)v619 * (unsigned __int128)(unint64_t)v619
         + (unint64_t)v616 * (unsigned __int128)(unint64_t)(2 * v614);
    v627 = ((unint64_t)v616 * (unsigned __int128)(unint64_t)(2 * v618)) >> 64;
    v628 = v616 * 2 * v618;
    v631 = (unint64_t)v618 * (unsigned __int128)(unint64_t)(2 * v619)
         + (unint64_t)(19 * v614) * (unsigned __int128)(unint64_t)v614
         + (unint64_t)v616 * (unsigned __int128)(unint64_t)(2 * v611);
    v629 = v631 >> 64;
    v630 = v631;
    v633 = v618 * v618 + v622 + v616 * 2 * v619;
    v632 = ((unint64_t)v618 * (unsigned __int128)(unint64_t)v618
          + __PAIR128__(v621, v622)
          + (unint64_t)v616 * (unsigned __int128)(unint64_t)(2 * v619)) >> 64;
    v635 = (__PAIR128__(v623, v624)
          + (unint64_t)(19 * v611) * (unsigned __int128)(unint64_t)v611
          + __PAIR128__(v627, v628)) >> 64;
    v634 = v624 + 19 * v611 * v611 + v628;
    v636 = v625 >> 51;
    v19 = __CFADD__(v634, v636);
    v637 = v634 + v636;
    if (v19)
      ++v635;
    *((_QWORD *)&v639 + 1) = v635;
    *(_QWORD *)&v639 = v637;
    v638 = v639 >> 51;
    v640 = v633 + v638;
    if (__CFADD__(v633, v638))
      ++v632;
    *((_QWORD *)&v642 + 1) = v632;
    *(_QWORD *)&v642 = v633 + v638;
    v641 = v642 >> 51;
    v19 = __CFADD__(v630, v641);
    v643 = v630 + v641;
    if (v19)
      v644 = v629 + 1;
    else
      v644 = v629;
    *((_QWORD *)&v646 + 1) = v644;
    *(_QWORD *)&v646 = v643;
    v645 = v646 >> 51;
    v19 = __CFADD__((_QWORD)v626, v645);
    v647 = v626 + v645;
    if (v19)
      v648 = *((_QWORD *)&v626 + 1) + 1;
    else
      v648 = *((_QWORD *)&v626 + 1);
    *((_QWORD *)&v649 + 1) = v648;
    *(_QWORD *)&v649 = v647;
    v650 = (v625 & 0x7FFFFFFFFFFFFLL) + 19 * (v649 >> 51);
    v651 = v637 & 0x7FFFFFFFFFFFFLL;
    v652 = v640 & 0x7FFFFFFFFFFFFLL;
    v611 = v643 & 0x7FFFFFFFFFFFFLL;
    v614 = v647 & 0x7FFFFFFFFFFFFLL;
    v653 = v651 + (v650 >> 51);
    v616 = v650 & 0x7FFFFFFFFFFFFLL;
    v619 = v652 + (v653 >> 51);
    v618 = v653 & 0x7FFFFFFFFFFFFLL;
    --v620;
  }
  while (v620);
  v814.i64[0] = v611;
  v814.i64[1] = v614;
  v812 = v618;
  v813 = v619;
  v811 = v616;
  fe_mul_impl((uint64_t)&v815, (unint64_t *)&v811, (unint64_t *)&v815);
  v654 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
       + (unint64_t)v817 * (unsigned __int128)(unint64_t)(38 * v818.i64[0])
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)v815;
  v656 = v654 >> 51;
  v655 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])
       + (unint64_t)v817 * (unsigned __int128)(unint64_t)v817
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[1]);
  v657 = (unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v817)
       + (unint64_t)(19 * v818.i64[1]) * (unsigned __int128)v818.u64[1]
       + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[0]);
  v658 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)v816
        + v818.u64[0] * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
        + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v817)) >> 64;
  v659 = v816 * v816 + v818.i64[0] * 38 * v818.i64[1] + v815 * 2 * v817;
  v661 = ((unint64_t)v817 * (unsigned __int128)(unint64_t)(38 * v818.i64[1])
        + (unint64_t)(19 * v818.i64[0]) * (unsigned __int128)v818.u64[0]
        + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v816)) >> 64;
  v660 = v817 * 38 * v818.i64[1] + 19 * v818.i64[0] * v818.i64[0] + v815 * 2 * v816;
  v19 = __CFADD__(v660, v656);
  v662 = v660 + v656;
  if (v19)
    ++v661;
  *((_QWORD *)&v664 + 1) = v661;
  *(_QWORD *)&v664 = v662;
  v663 = v664 >> 51;
  v665 = v662 & 0x7FFFFFFFFFFFFLL;
  v19 = __CFADD__(v659, v663);
  v666 = v659 + v663;
  if (v19)
    ++v658;
  *((_QWORD *)&v668 + 1) = v658;
  *(_QWORD *)&v668 = v666;
  v667 = v668 >> 51;
  v669 = v666 & 0x7FFFFFFFFFFFFLL;
  v670 = v657 + v667;
  if (__CFADD__((_QWORD)v657, v667))
    v671 = *((_QWORD *)&v657 + 1) + 1;
  else
    v671 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v817)
          + (unint64_t)(19 * v818.i64[1]) * (unsigned __int128)v818.u64[1]
          + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])) >> 64;
  *((_QWORD *)&v673 + 1) = v671;
  *(_QWORD *)&v673 = v670;
  v672 = v673 >> 51;
  v19 = __CFADD__((_QWORD)v655, v672);
  v674 = v655 + v672;
  if (v19)
    v675 = *((_QWORD *)&v655 + 1) + 1;
  else
    v675 = ((unint64_t)v816 * (unsigned __int128)(unint64_t)(2 * v818.i64[0])
          + (unint64_t)v817 * (unsigned __int128)(unint64_t)v817
          + (unint64_t)v815 * (unsigned __int128)(unint64_t)(2 * v818.i64[1])) >> 64;
  *((_QWORD *)&v676 + 1) = v675;
  *(_QWORD *)&v676 = v674;
  v677 = v670 & 0x7FFFFFFFFFFFFLL;
  v678 = v674 & 0x7FFFFFFFFFFFFLL;
  v679 = (v654 & 0x7FFFFFFFFFFFFLL) + 19 * (v676 >> 51);
  v680 = v679 & 0x7FFFFFFFFFFFFLL;
  v681 = v665 + (v679 >> 51);
  v682 = v681 & 0x7FFFFFFFFFFFFLL;
  v683 = v669 + (v681 >> 51);
  v684 = 38 * v678;
  v685 = 2 * v678;
  v686 = ((unint64_t)v678 * (unsigned __int128)(unint64_t)(19 * v678)) >> 64;
  v687 = v678 * 19 * v678;
  v688 = ((unint64_t)v682 * (unsigned __int128)(unint64_t)(2 * v677)) >> 64;
  v689 = v682 * 2 * v677;
  v690 = ((unint64_t)(2 * v683) * (unsigned __int128)(unint64_t)v682) >> 64;
  v691 = ((unint64_t)v680 * (unsigned __int128)(unint64_t)v685) >> 64;
  v692 = v680 * v685;
  v696 = ((unint64_t)v680 * (unsigned __int128)(unint64_t)(2 * v677)) >> 64;
  v697 = v680 * 2 * v677;
  v695 = (unint64_t)v682 * (unsigned __int128)(unint64_t)v684
       + (unint64_t)v680 * (unsigned __int128)(unint64_t)v680
       + (unint64_t)v683 * (unsigned __int128)(unint64_t)(38 * v677);
  v693 = v695 >> 64;
  v694 = v695;
  v698 = ((unint64_t)(2 * v683) * (unsigned __int128)(unint64_t)v680) >> 64;
  v699 = ((unint64_t)(2 * v682) * (unsigned __int128)(unint64_t)v680) >> 64;
  v700 = 2 * v682 * v680;
  v701 = 2 * v683 * v680;
  v702 = 2 * v683 * v682;
  v704 = v682 * v682 + v677 * v684;
  v703 = ((unint64_t)v682 * (unsigned __int128)(unint64_t)v682
        + (unint64_t)v677 * (unsigned __int128)(unint64_t)v684) >> 64;
  v705 = ((unint64_t)v683 * (unsigned __int128)(unint64_t)v684) >> 64;
  v706 = v683 * v684;
  v707 = ((unint64_t)v683 * (unsigned __int128)(unint64_t)v683) >> 64;
  v708 = v683 * v683;
  v709 = (__int128)__PAIR128__(v693, v694) >> 51;
  v710 = v694 & 0x7FFFFFFFFFFFFLL;
  v711 = __PAIR128__(v703, v704) + __PAIR128__(v698, v701);
  v713 = __PAIR128__(v705, v706)
       + (unint64_t)v677 * (unsigned __int128)(unint64_t)(19 * v677)
       + __PAIR128__(v699, v700);
  v712 = *((_QWORD *)&v713 + 1);
  if (__CFADD__((_QWORD)v713, v709))
    v712 = *((_QWORD *)&v713 + 1) + 1;
  *((_QWORD *)&v714 + 1) = v712;
  *(_QWORD *)&v714 = v713 + v709;
  v716 = (__PAIR128__(v696, v697) + __PAIR128__(v686, v687) + __PAIR128__(v690, v702) + ((v711 + (v714 >> 51)) >> 51)) >> 64;
  v715 = v697 + v687 + v702 + ((v711 + (v714 >> 51)) >> 51);
  v717 = v716 >> 51;
  v718 = (__int128)__PAIR128__(v716, v715) >> 51;
  v715 &= 0x7FFFFFFFFFFFFuLL;
  v720 = v689 + v692 + v708 + v718;
  v719 = (__PAIR128__(v688, v689) + __PAIR128__(v691, v692) + __PAIR128__(v707, v708) + __PAIR128__(v717, v718)) >> 64;
  v721 = v720 & 0x7FFFFFFFFFFFFLL;
  v722 = v710 + 19 * ((__int128)__PAIR128__(v719, v720) >> 51);
  v723 = v722 & 0x7FFFFFFFFFFFFLL;
  v724 = ((v713 + v709) & 0x7FFFFFFFFFFFFLL) + (v722 >> 51);
  v725 = v724 & 0x7FFFFFFFFFFFFLL;
  v726 = ((v711 + (v714 >> 51)) & 0x7FFFFFFFFFFFFLL) + (v724 >> 51);
  v727 = 38 * (v720 & 0x7FFFFFFFFFFFFLL);
  v728 = 2 * (v720 & 0x7FFFFFFFFFFFFLL);
  v729 = ((unint64_t)v721 * (unsigned __int128)(unint64_t)(19 * v721)) >> 64;
  v730 = v721 * 19 * v721;
  v731 = ((unint64_t)v725 * (unsigned __int128)(2 * v715)) >> 64;
  v732 = v725 * 2 * v715;
  v733 = ((unint64_t)(2 * v726) * (unsigned __int128)(unint64_t)v725) >> 64;
  v734 = ((unint64_t)v723 * (unsigned __int128)(unint64_t)v728) >> 64;
  v735 = v723 * v728;
  v739 = ((unint64_t)v723 * (unsigned __int128)(2 * v715)) >> 64;
  v740 = v723 * 2 * v715;
  v738 = (unint64_t)v725 * (unsigned __int128)(unint64_t)v727
       + (unint64_t)v723 * (unsigned __int128)(unint64_t)v723
       + (unint64_t)v726 * (unsigned __int128)(38 * v715);
  v736 = v738 >> 64;
  v737 = v738;
  v741 = ((unint64_t)(2 * v726) * (unsigned __int128)(unint64_t)v723) >> 64;
  v744 = ((unint64_t)(2 * v725) * (unsigned __int128)(unint64_t)v723) >> 64;
  v745 = 2 * v725 * v723;
  v746 = 2 * v726 * v723;
  v747 = 2 * v726 * v725;
  v743 = ((unint64_t)v725 * (unsigned __int128)(unint64_t)v725
        + v715 * (unsigned __int128)(unint64_t)v727) >> 64;
  v742 = v725 * v725 + v715 * v727;
  v748 = ((unint64_t)v726 * (unsigned __int128)(unint64_t)v727) >> 64;
  v749 = v726 * v727;
  v750 = v742;
  v751 = ((unint64_t)v726 * (unsigned __int128)(unint64_t)v726) >> 64;
  v752 = v726 * v726;
  v753 = (__int128)__PAIR128__(v736, v737) >> 51;
  v754 = v737 & 0x7FFFFFFFFFFFFLL;
  v756 = __PAIR128__(v748, v749) + v715 * (unsigned __int128)(19 * v715) + __PAIR128__(v744, v745);
  v755 = *((_QWORD *)&v756 + 1);
  if (__CFADD__((_QWORD)v756, v753))
    v755 = *((_QWORD *)&v756 + 1) + 1;
  *((_QWORD *)&v757 + 1) = v755;
  *(_QWORD *)&v757 = v756 + v753;
  v758 = __PAIR128__(v743, v750) + __PAIR128__(v741, v746) + (v757 >> 51);
  v759 = __PAIR128__(v739, v740) + __PAIR128__(v729, v730) + __PAIR128__(v733, v747) + (v758 >> 51);
  v760 = __PAIR128__(v731, v732) + __PAIR128__(v734, v735) + __PAIR128__(v751, v752) + (v759 >> 51);
  v761 = v760 & 0x7FFFFFFFFFFFFLL;
  v762 = v754 + 19 * (v760 >> 51);
  v763 = v762 & 0x7FFFFFFFFFFFFLL;
  v764 = ((v756 + v753) & 0x7FFFFFFFFFFFFLL) + (v762 >> 51);
  v765 = v764 & 0x7FFFFFFFFFFFFLL;
  v766 = (v758 & 0x7FFFFFFFFFFFFLL) + (v764 >> 51);
  v767 = ((unint64_t)v761 * (unsigned __int128)(unint64_t)(19 * v761)) >> 64;
  v768 = v761 * 19 * v761;
  v771 = (unint64_t)v765 * (unsigned __int128)(38 * ((unint64_t)v760 & 0x7FFFFFFFFFFFFLL))
       + (unint64_t)v763 * (unsigned __int128)(unint64_t)v763
       + (unint64_t)v766 * (unsigned __int128)(38 * ((unint64_t)v759 & 0x7FFFFFFFFFFFFLL));
  v769 = v771 >> 64;
  v770 = v771;
  v772 = (__int128)__PAIR128__(v769, v770) >> 51;
  v774 = ((unint64_t)v766 * (unsigned __int128)(38 * ((unint64_t)v760 & 0x7FFFFFFFFFFFFLL))
        + (v759 & 0x7FFFFFFFFFFFFLL) * 19 * ((unint64_t)v759 & 0x7FFFFFFFFFFFFLL)
        + (unint64_t)(2 * v765) * (unsigned __int128)(unint64_t)v763) >> 64;
  v773 = v766 * 38 * (v760 & 0x7FFFFFFFFFFFFLL)
       + (v759 & 0x7FFFFFFFFFFFFLL) * 19 * (v759 & 0x7FFFFFFFFFFFFLL)
       + 2 * v765 * v763;
  v19 = __CFADD__(v773, v772);
  v775 = v773 + v772;
  if (v19)
    ++v774;
  *((_QWORD *)&v776 + 1) = v774;
  *(_QWORD *)&v776 = v775;
  v777 = (unint64_t)v765 * (unsigned __int128)(unint64_t)v765
       + (v759 & 0x7FFFFFFFFFFFFLL) * 38 * ((unint64_t)v760 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)(2 * v766) * (unsigned __int128)(unint64_t)v763
       + (v776 >> 51);
  v778 = ((unint64_t)v766 * (unsigned __int128)(unint64_t)v766) >> 64;
  v779 = v766 * v766;
  v780 = (unint64_t)v763 * (unsigned __int128)(2 * ((unint64_t)v759 & 0x7FFFFFFFFFFFFLL))
       + __PAIR128__(v767, v768)
       + (unint64_t)(2 * v766) * (unsigned __int128)(unint64_t)v765
       + (v777 >> 51);
  v781 = v780 & 0x7FFFFFFFFFFFFLL;
  v782 = (unint64_t)v765 * (unsigned __int128)(2 * ((unint64_t)v759 & 0x7FFFFFFFFFFFFLL))
       + (unint64_t)v763 * (unsigned __int128)(2 * ((unint64_t)v760 & 0x7FFFFFFFFFFFFLL))
       + __PAIR128__(v778, v779)
       + (v780 >> 51);
  v783 = v782 & 0x7FFFFFFFFFFFFLL;
  v784 = (v770 & 0x7FFFFFFFFFFFFLL) + 19 * (v782 >> 51);
  v785 = v784 & 0x7FFFFFFFFFFFFLL;
  v786 = (v775 & 0x7FFFFFFFFFFFFLL) + (v784 >> 51);
  v787 = v786 & 0x7FFFFFFFFFFFFLL;
  v788 = (v777 & 0x7FFFFFFFFFFFFLL) + (v786 >> 51);
  v789 = (unint64_t)v787 * (unsigned __int128)(38 * ((unint64_t)v782 & 0x7FFFFFFFFFFFFLL))
       + (unint64_t)v785 * (unsigned __int128)(unint64_t)v785
       + (unint64_t)v788 * (unsigned __int128)(38 * ((unint64_t)v780 & 0x7FFFFFFFFFFFFLL));
  v790 = ((unint64_t)v788 * (unsigned __int128)(38 * ((unint64_t)v782 & 0x7FFFFFFFFFFFFLL))
        + (unint64_t)v781 * (unsigned __int128)(unint64_t)(19 * v781)
        + (unint64_t)(2 * v787) * (unsigned __int128)(unint64_t)v785) >> 64;
  v791 = v788 * 38 * (v782 & 0x7FFFFFFFFFFFFLL) + v781 * 19 * v781 + 2 * v787 * v785;
  v792 = v789 >> 51;
  v19 = __CFADD__(v791, v792);
  v793 = v791 + v792;
  if (v19)
    ++v790;
  *((_QWORD *)&v794 + 1) = v790;
  *(_QWORD *)&v794 = v793;
  v798 = 2 * v781;
  v797 = (unint64_t)v787 * (unsigned __int128)(unint64_t)v787
       + (v780 & 0x7FFFFFFFFFFFFLL) * 38 * ((unint64_t)v782 & 0x7FFFFFFFFFFFFLL)
       + (unint64_t)(2 * v788) * (unsigned __int128)(unint64_t)v785
       + ((unsigned __int128)v794 >> 51);
  v795 = v797 >> 64;
  v796 = v797;
  v799 = (unint64_t)v787 * (unsigned __int128)(unint64_t)v798
       + (unint64_t)v785 * (unsigned __int128)(unint64_t)(2 * v783)
       + (unint64_t)v788 * (unsigned __int128)(unint64_t)v788;
  v800 = (unint64_t)v785 * (unsigned __int128)(unint64_t)v798
       + (unint64_t)v783 * (unsigned __int128)(unint64_t)(19 * v783)
       + (unint64_t)(2 * v788) * (unsigned __int128)(unint64_t)v787
       + (__PAIR128__(v795, v796) >> 51);
  v801.i64[0] = v785 * v798 + v783 * 19 * v783 + 2 * v788 * v787 + (__PAIR128__(v795, v796) >> 51);
  *((_QWORD *)&v794 + 1) = (v799 + ((unsigned __int128)v800 >> 51)) >> 64;
  *(_QWORD *)&v794 = v799 + (v800 >> 51);
  v801.i64[1] = v794;
  v802 = (v789 & 0x7FFFFFFFFFFFFLL) + 19 * (v794 >> 51);
  v803 = (v793 & 0x7FFFFFFFFFFFFLL) + (v802 >> 51);
  v816 = v803 & 0x7FFFFFFFFFFFFLL;
  v817 = (v796 & 0x7FFFFFFFFFFFFLL) + (v803 >> 51);
  v815 = v802 & 0x7FFFFFFFFFFFFLL;
  v818 = vandq_s8(v801, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL));
  *(_QWORD *)&result = fe_mul_impl(a1, (unint64_t *)&v815, (unint64_t *)&v819).u64[0];
  return result;
}

int8x16_t fe_mul_impl(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unsigned __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int128 v26;
  unsigned __int128 v27;
  uint64_t v28;
  unsigned __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  __int128 v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t result;

  v4 = a3[3];
  v3 = a3[4];
  v5 = a2[4];
  v7 = a3[1];
  v6 = a3[2];
  v8 = *a3;
  v10 = a2[2];
  v9 = a2[3];
  v11 = *a2;
  v12 = a2[1];
  v14 = v9 * 19 * v6 + 19 * v7 * v5 + v10 * 19 * v4 + v12 * 19 * v3 + v11 * *a3;
  v15 = v9 * (unsigned __int128)(19 * v3) + 19 * v4 * (unsigned __int128)v5;
  v16 = (v9 * (unsigned __int128)(19 * v4)
       + 19 * v6 * (unsigned __int128)v5
       + v10 * (unsigned __int128)(19 * v3)
       + *a3 * (unsigned __int128)v12
       + v11 * (unsigned __int128)v7) >> 64;
  v17 = v9 * 19 * v4 + 19 * v6 * v5 + v10 * 19 * v3 + *a3 * v12 + v11 * v7;
  v18 = (__int128)(v9 * (unsigned __int128)(19 * v6)
                 + 19 * v7 * (unsigned __int128)v5
                 + v10 * (unsigned __int128)(19 * v4)
                 + v12 * (unsigned __int128)(19 * v3)
                 + v11 * (unsigned __int128)*a3) >> 51;
  v19 = __CFADD__(v17, v18);
  v20 = v17 + v18;
  if (v19)
    ++v16;
  *((_QWORD *)&v22 + 1) = v16;
  *(_QWORD *)&v22 = v20;
  v21 = v22 >> 51;
  v24 = (v15 + v12 * (unsigned __int128)v7 + v8 * (unsigned __int128)v10 + v11 * (unsigned __int128)v6) >> 64;
  v23 = v15 + v12 * v7 + v8 * v10 + v11 * v6;
  v19 = __CFADD__(v23, v21);
  v25 = v23 + v21;
  if (v19)
    ++v24;
  v26 = v10 * (unsigned __int128)v7
      + 19 * v3 * (unsigned __int128)v5
      + v12 * (unsigned __int128)v6
      + v8 * (unsigned __int128)v9
      + v11 * (unsigned __int128)v4;
  v27 = v10 * (unsigned __int128)v6
      + v9 * (unsigned __int128)v7
      + v12 * (unsigned __int128)v4
      + v8 * (unsigned __int128)v5;
  v29 = v27 + v11 * (unsigned __int128)v3;
  v28 = *((_QWORD *)&v29 + 1);
  *((_QWORD *)&v30 + 1) = v24;
  *(_QWORD *)&v30 = v25;
  v31 = v26 + (v30 >> 51);
  *((_QWORD *)&v30 + 1) = v27;
  *(_QWORD *)&v30 = v31;
  v32 = v30 >> 51;
  v33.i64[0] = v31;
  if (__CFADD__((_QWORD)v29, v32))
    v28 = *((_QWORD *)&v29 + 1) + 1;
  *((_QWORD *)&v34 + 1) = v28;
  *(_QWORD *)&v34 = v29 + v32;
  v33.i64[1] = v29 + v32;
  v35 = (v14 & 0x7FFFFFFFFFFFFLL) + 19 * (v34 >> 51);
  v36 = (v20 & 0x7FFFFFFFFFFFFLL) + (v35 >> 51);
  *(_QWORD *)a1 = v35 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 8) = v36 & 0x7FFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 16) = (v25 & 0x7FFFFFFFFFFFFLL) + (v36 >> 51);
  result = vandq_s8(v33, (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFuLL));
  *(int8x16_t *)(a1 + 24) = result;
  return result;
}

uint64_t bssl::dtls1_open_handshake(uint64_t a1, unint64_t *a2, char *a3, unsigned __int8 *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  char *v13;
  char v14;
  int v15;
  int v16;
  unsigned __int8 *v17;
  size_t v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  unsigned __int8 *v29;
  char *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  size_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  size_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  size_t v57;
  void *v58;
  uint64_t v59;
  size_t v60;
  BOOL v61;
  char *v62;
  char v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  int v70;
  _BYTE *v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned __int8 *v76;
  int v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  size_t v81;
  char *v82;
  uint64_t v83;
  uint64_t *v84;
  _QWORD *v85;
  unsigned int v86;
  unsigned __int8 v87;
  unsigned __int8 *v88;
  char *v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  void *v93[2];
  __int128 v94;
  _BYTE *v95;

  v91 = 0;
  v89 = 0;
  v90 = 0;
  result = bssl::dtls_open_record((_QWORD *)a1, &v91, (uint64_t)&v89, a2, a3, a4, a5, a8);
  if ((_DWORD)result)
    return result;
  if (v91 == 20)
  {
    if (**(_QWORD **)(*(_QWORD *)(a1 + 48) + 264))
    {
      v11 = 318;
      goto LABEL_13;
    }
    if (v90 != 1 || *v89 != 1)
    {
      v15 = 103;
      v16 = 324;
      goto LABEL_130;
    }
    **(_BYTE **)(a1 + 56) |= 1u;
    bssl::ssl_do_msg_callback(a1, 0, 20, (uint64_t)v89, v90);
    return 0;
  }
  if (v91 != 22)
  {
    if (v91 == 23)
    {
      if (**(_QWORD **)(*(_QWORD *)(a1 + 48) + 264))
        return 1;
      v11 = 305;
    }
    else
    {
      v11 = 340;
    }
LABEL_13:
    ERR_put_error(16, 0, 225, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_both.cc", v11);
    v14 = 10;
    goto LABEL_14;
  }
  v12 = v90;
  if (!v90)
    return 0;
  v13 = v89;
  while (1)
  {
    if ((unint64_t)(v12 - 1) < 3
      || (v12 & 0xFFFFFFFFFFFFFFFELL) == 4
      || (unint64_t)(v12 - 6) < 3
      || (unint64_t)(v12 - 9) < 3
      || (v18 = (v13[9] << 16) | (v13[10] << 8) | v13[11],
          v66 = v12 - 12 >= v18,
          v12 = v12 - 12 - v18,
          !v66))
    {
      ERR_put_error(16, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_both.cc", 352);
      v14 = 50;
      goto LABEL_14;
    }
    v19 = (v13[1] << 16) | (v13[2] << 8) | v13[3];
    v20 = v13[8];
    v21 = (v13[6] << 16) | (v13[7] << 8) | v20;
    if (v21 > v19
      || (v22 = (v18 + v21), v22 > v19)
      || ((v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 280)) == 0 || (*(_BYTE *)(v23 + 1568) & 8) != 0
        ? (*(_WORD *)(a1 + 16) != 772
         ? (v24 = 0)
         : (*(_BYTE *)(a1 + 164) & 1) != 0
         ? (v24 = 1)
         : (v24 = 0x4000))
        : (*(_BYTE *)(a1 + 164) & 1) == 0 || (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 236) & 1) != 0
        ? ((LODWORD(v24) = *(_DWORD *)(a1 + 136), v24 <= 0x4000)
         ? (v24 = 0x4000)
         : (v24 = v24))
        : (v24 = 0x4000),
          v24 < v19))
    {
      v15 = 150;
      v16 = 363;
      goto LABEL_130;
    }
    v25 = *v13;
    v26 = __rev16(*((unsigned __int16 *)v13 + 2));
    v27 = *(_QWORD *)(a1 + 56);
    v28 = *(unsigned __int16 *)(v27 + 50);
    if (*(_WORD *)(v27 + 2) == 1)
    {
      v61 = v26 == v28;
      v28 = v26;
      if (!v61)
      {
        v11 = 370;
        goto LABEL_13;
      }
    }
    v17 = (unsigned __int8 *)(v13 + 12);
    if (v26 >= v28 && v28 + 7 >= v26)
      break;
LABEL_23:
    result = 0;
    v13 = (char *)&v17[v18];
    if (!v12)
      return result;
  }
  if ((int)(v26 - v28) > 6)
    goto LABEL_131;
  v29 = *(unsigned __int8 **)(v27
                            + 8
                            * (unsigned __int16)(v26
                                               - 7
                                               * ((((9363 * v26) >> 16)
                                                 + ((unsigned __int16)((v26 - ((9363 * v26) >> 16)) & 0xFFFE) >> 1)) >> 2))
                            + 72);
  if (!v29)
  {
    v86 = v26 - 7 * ((((9363 * v26) >> 16) + ((unsigned __int16)((v26 - ((9363 * v26) >> 16)) & 0xFFFE) >> 1)) >> 2);
    v87 = v13[8];
    v88 = (unsigned __int8 *)(v13 + 12);
    *(_OWORD *)v93 = 0u;
    v94 = 0u;
    v92 = 0u;
    v30 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (v30)
    {
      v30[8] = v25;
      v82 = v30 + 8;
      *((_QWORD *)v30 + 2) = 0;
      v31 = (uint64_t *)(v30 + 16);
      *(_QWORD *)v30 = 24;
      *((_QWORD *)v30 + 3) = 0;
      *((_WORD *)v30 + 5) = v26;
      v83 = (v19 + 12);
      v85 = v30;
      *((_DWORD *)v30 + 3) = v19;
      v32 = malloc_type_malloc(v83 + 8, 0x30772F57uLL);
      if (v32)
      {
        *v32 = v83;
        v84 = v31;
        *v31 = (uint64_t)(v32 + 1);
        v33 = v85;
        if (CBB_init_fixed((uint64_t)&v92, (uint64_t)(v32 + 1), 12))
        {
          v95 = 0;
          if (CBB_add_space((uint64_t)&v92, &v95, 1))
          {
            *v95 = v25;
            if (CBB_add_u24((uint64_t)&v92, v19))
            {
              if (CBB_add_u16((uint64_t)&v92, v26))
              {
                if (CBB_add_u24((uint64_t)&v92, 0))
                {
                  if (CBB_add_u24((uint64_t)&v92, v19))
                  {
                    v34 = CBB_finish((uint64_t)&v92, 0, 0);
                    v35 = v82;
                    if (v34)
                    {
                      if (!(_DWORD)v19
                        || (v36 = OPENSSL_zalloc((v19 + 7) >> 3), v35 = v82, (v85[3] = v36) != 0))
                      {
LABEL_80:
                        if (!BYTE8(v92) && (BYTE8(v94) & 1) != 0 && v93[0])
                        {
                          v45 = v35;
                          v47 = (char *)v93[0] - 8;
                          v46 = *((_QWORD *)v93[0] - 1);
                          if (v46 != -8)
                            bzero((char *)v93[0] - 8, v46 + 8);
                          free(v47);
                          v35 = v45;
                        }
                        v48 = *(_QWORD *)(a1 + 56) + 8 * (unsigned __int16)v86;
                        v49 = *(_QWORD *)(v48 + 72);
                        *(_QWORD *)(v48 + 72) = v35;
                        if (v49)
                        {
                          v50 = *(_QWORD *)(v49 + 8);
                          if (v50)
                          {
                            v52 = *(_QWORD *)(v50 - 8);
                            v51 = (void *)(v50 - 8);
                            v53 = v52 + 8;
                            if (v52 != -8)
                              bzero(v51, v53);
                            free(v51);
                          }
                          v54 = *(_QWORD *)(v49 + 16);
                          if (v54)
                          {
                            v56 = *(_QWORD *)(v54 - 8);
                            v55 = (void *)(v54 - 8);
                            v57 = v56 + 8;
                            if (v56 != -8)
                              bzero(v55, v57);
                            free(v55);
                          }
                          v59 = *(_QWORD *)(v49 - 8);
                          v58 = (void *)(v49 - 8);
                          v60 = v59 + 8;
                          if (v59 != -8)
                            bzero(v58, v60);
                          free(v58);
                        }
                        v29 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 56) + 8 * (unsigned __int16)v86 + 72);
                        LOBYTE(v20) = v87;
                        v17 = v88;
                        if (!v29)
                        {
LABEL_131:
                          v14 = 80;
                          goto LABEL_14;
                        }
LABEL_99:
                        if (*((_QWORD *)v29 + 2))
                          v61 = (_DWORD)v18 == 0;
                        else
                          v61 = 1;
                        if (v61)
                          goto LABEL_23;
                        v62 = (char *)v17;
                        v63 = v20;
                        memcpy((void *)(*((_QWORD *)v29 + 1) + v21 + 12), v17, v18);
                        v17 = (unsigned __int8 *)v62;
                        v64 = *((_QWORD *)v29 + 2);
                        v65 = *((unsigned int *)v29 + 1);
                        v66 = v64 && v65 >= v22;
                        if (!v66)
                          goto LABEL_23;
                        v67 = v21 >> 3;
                        v68 = v22 >> 3;
                        v69 = -1 << (v63 & 7);
                        if (v21 >> 3 == v22 >> 3)
                        {
                          v70 = v69 & ~(-1 << ((v18 + v21) & 7));
                          v71 = (_BYTE *)(v64 + v67);
                        }
                        else
                        {
                          *(_BYTE *)(v64 + v67) |= v69;
                          v72 = v67 + 1;
                          if (v67 + 1 < v68)
                          {
                            do
                              *(_BYTE *)(*((_QWORD *)v29 + 2) + v72++) = -1;
                            while (v68 != v72);
                          }
                          if ((((_BYTE)v18 + (_BYTE)v21) & 7) == 0)
                          {
LABEL_115:
                            v73 = v65 >> 3;
                            v74 = *((_QWORD *)v29 + 2);
                            if (v65 >= 8)
                            {
                              if (v73 <= 1)
                                v75 = 1;
                              else
                                v75 = v65 >> 3;
                              v76 = (unsigned __int8 *)*((_QWORD *)v29 + 2);
                              do
                              {
                                v77 = *v76++;
                                if (v77 != 255)
                                  goto LABEL_23;
                              }
                              while (--v75);
                            }
                            v78 = v65 & 7;
                            if (v78)
                            {
                              if (*(unsigned __int8 *)(v74 + v73) != ~(-1 << v78))
                                goto LABEL_23;
                            }
                            else if (!v74)
                            {
LABEL_22:
                              *((_QWORD *)v29 + 2) = 0;
                              goto LABEL_23;
                            }
                            v80 = *(_QWORD *)(v74 - 8);
                            v79 = (void *)(v74 - 8);
                            v81 = v80 + 8;
                            if (v80 != -8)
                              bzero(v79, v81);
                            free(v79);
                            v17 = (unsigned __int8 *)v62;
                            goto LABEL_22;
                          }
                          v70 = ~(-1 << ((v18 + v21) & 7));
                          v71 = (_BYTE *)(*((_QWORD *)v29 + 2) + v68);
                        }
                        *v71 |= v70;
                        goto LABEL_115;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        v37 = *v84;
        if (*v84)
        {
          v39 = *(_QWORD *)(v37 - 8);
          v38 = (void *)(v37 - 8);
          v40 = v39 + 8;
          if (v39 != -8)
            bzero(v38, v40);
          free(v38);
        }
      }
      else
      {
        ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
        *v31 = 0;
        v33 = v85;
      }
      v41 = v33[3];
      if (v41)
      {
        v43 = *(_QWORD *)(v41 - 8);
        v42 = (void *)(v41 - 8);
        v44 = v43 + 8;
        if (v43 != -8)
          bzero(v42, v44);
        free(v42);
      }
      if (*v33 != -8)
        __memset_chk();
      free(v33);
    }
    else
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    }
    v35 = 0;
    goto LABEL_80;
  }
  if (__PAIR64__(*((_DWORD *)v29 + 1), *v29) == __PAIR64__(v19, v25))
    goto LABEL_99;
  v15 = 152;
  v16 = 276;
LABEL_130:
  ERR_put_error(16, 0, v15, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_both.cc", v16);
  v14 = 47;
LABEL_14:
  *a3 = v14;
  return 4;
}

uint64_t bssl::dtls1_get_message(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  void (*v10)(_QWORD, _QWORD, uint64_t);
  uint64_t v11;
  unsigned __int16 *v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(v2
                 + 8
                 * (unsigned __int16)(*(_WORD *)(v2 + 50)
                                    - 7
                                    * ((((9363 * *(unsigned __int16 *)(v2 + 50)) >> 16)
                                      + ((unsigned __int16)((*(_WORD *)(v2 + 50)
                                                           - ((9363 * *(unsigned __int16 *)(v2 + 50)) >> 16)) & 0xFFFE) >> 1)) >> 2))
                 + 72);
  if (!v3 || *(_QWORD *)(v3 + 16))
    return 0;
  *(_BYTE *)(a2 + 1) = *(_BYTE *)v3;
  v6 = *(_QWORD *)(v3 + 8);
  v7 = *(unsigned int *)(v3 + 4);
  *(_QWORD *)(a2 + 8) = v6 + 12;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = (v7 + 12);
  *(_BYTE *)a2 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(_WORD *)(v8 + 220);
  if ((v9 & 0x10) == 0)
  {
    v10 = *(void (**)(_QWORD, _QWORD, uint64_t))(a1 + 64);
    if (v10)
    {
      v11 = *(_QWORD *)(v8 + 280);
      if (v11 && (*(_BYTE *)(v11 + 1569) & 4) != 0 && (*(_BYTE *)(a1 + 164) & 1) == 0)
        v12 = (unsigned __int16 *)(*(_QWORD *)(v11 + 1512) + 4);
      else
        v12 = (unsigned __int16 *)(a1 + 16);
      v10(0, *v12, 22);
      v8 = *(_QWORD *)(a1 + 48);
      v9 = *(_WORD *)(v8 + 220);
    }
    *(_WORD *)(v8 + 220) = v9 | 0x10;
  }
  return 1;
}

void bssl::dtls1_next_message(bssl *this, ssl_st *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  _BYTE *v18;

  v3 = *((_QWORD *)this + 7);
  v4 = v3
     + 8
     * (unsigned __int16)(*(_WORD *)(v3 + 50)
                        - 7
                        * ((((9363 * *(unsigned __int16 *)(v3 + 50)) >> 16)
                          + ((unsigned __int16)((*(_WORD *)(v3 + 50)
                                               - ((9363 * *(unsigned __int16 *)(v3 + 50)) >> 16)) & 0xFFFE) >> 1)) >> 2));
  v5 = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 72) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v8 = *(_QWORD *)(v6 - 8);
      v7 = (void *)(v6 - 8);
      v9 = v8 + 8;
      if (v8 != -8)
        bzero(v7, v9);
      free(v7);
    }
    v10 = *(_QWORD *)(v5 + 16);
    if (v10)
    {
      v12 = *(_QWORD *)(v10 - 8);
      v11 = (void *)(v10 - 8);
      v13 = v12 + 8;
      if (v12 != -8)
        bzero(v11, v13);
      free(v11);
    }
    v15 = *(_QWORD *)(v5 - 8);
    v14 = (void *)(v5 - 8);
    v16 = v15 + 8;
    if (v15 != -8)
      bzero(v14, v16);
    free(v14);
  }
  v17 = *((_QWORD *)this + 6);
  ++*(_WORD *)(*((_QWORD *)this + 7) + 50);
  *(_WORD *)(v17 + 220) &= ~0x10u;
  v18 = (_BYTE *)*((_QWORD *)this + 7);
  if ((*v18 & 2) != 0)
    *v18 |= 4u;
}

BOOL bssl::dtls_has_unprocessed_handshake_data(bssl *this, const ssl_st *a2)
{
  uint64_t v2;
  unsigned int v4;

  v2 = *((_QWORD *)this + 7);
  if ((*(_WORD *)(*((_QWORD *)this + 6) + 220) & 0x10) != 0)
  {
    v4 = *(unsigned __int16 *)(v2 + 50) % 7u;
    if (v4)
    {
      if (*(_QWORD *)(v2 + 72))
        return 1;
      if (v4 != 1)
      {
        if (*(_QWORD *)(v2 + 80))
          return 1;
        if (v4 == 2)
        {
          if (*(_QWORD *)(v2 + 96))
            return 1;
          goto LABEL_19;
        }
      }
    }
    else if (*(_QWORD *)(v2 + 80))
    {
      return 1;
    }
    if (*(_QWORD *)(v2 + 88))
      return 1;
    if (v4 != 3)
    {
      if (*(_QWORD *)(v2 + 96))
        return 1;
      if (v4 == 4)
      {
        if (*(_QWORD *)(v2 + 112))
          return 1;
        return *(_QWORD *)(v2 + 120) != 0;
      }
    }
LABEL_19:
    if (*(_QWORD *)(v2 + 104))
      return 1;
    if (v4 != 5)
    {
      if (*(_QWORD *)(v2 + 112))
        return 1;
      if (v4 == 6)
        return 0;
    }
    return *(_QWORD *)(v2 + 120) != 0;
  }
  if (*(_QWORD *)(v2 + 72))
    return 1;
  if (*(_QWORD *)(v2 + 80))
    return 1;
  if (*(_QWORD *)(v2 + 88))
    return 1;
  if (*(_QWORD *)(v2 + 96))
    return 1;
  if (*(_QWORD *)(v2 + 104))
    return 1;
  if (*(_QWORD *)(v2 + 112))
    return 1;
  return *(_QWORD *)(v2 + 120) != 0;
}

uint64_t bssl::dtls1_open_change_cipher_spec(uint64_t a1, unint64_t *a2, char *a3, unsigned __int8 *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  char v9;
  uint64_t result;

  v8 = *(char **)(a1 + 56);
  v9 = *v8;
  if ((*v8 & 1) != 0)
    goto LABEL_5;
  result = bssl::dtls1_open_handshake(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
    return result;
  v8 = *(char **)(a1 + 56);
  v9 = *v8;
  if ((*v8 & 1) == 0)
    return 1;
LABEL_5:
  result = 0;
  *v8 = v9 & 0xFE;
  return result;
}

uint64_t bssl::dtls1_init_message(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v8;
  uint64_t result;
  __int16 v10;
  _BYTE *v11;

  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v8 = malloc_type_malloc(0x48uLL, 0x30772F57uLL);
  if (v8)
  {
    *v8 = 64;
    *(_BYTE *)(a2 + 8) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 16) = v8 + 1;
    *(_OWORD *)(a2 + 24) = xmmword_208F05A00;
    *(_BYTE *)(a2 + 40) = *(_BYTE *)(a2 + 40) & 0xFC | 1;
    v11 = 0;
    result = CBB_add_space(a2, &v11, 1);
    if ((_DWORD)result)
    {
      *v11 = a4;
      v11 = 0;
      result = CBB_add_space(a2, &v11, 3);
      if ((_DWORD)result)
      {
        v11[2] = 0;
        v11[1] = 0;
        *v11 = 0;
        v10 = *(_WORD *)(*(_QWORD *)(a1 + 56) + 48);
        v11 = 0;
        result = CBB_add_space(a2, &v11, 2);
        if ((_DWORD)result)
        {
          v11[1] = v10;
          *v11 = HIBYTE(v10);
          v11 = 0;
          result = CBB_add_space(a2, &v11, 3);
          if ((_DWORD)result)
          {
            v11[2] = 0;
            v11[1] = 0;
            *v11 = 0;
            result = CBB_flush((uint64_t *)a2);
            if ((_DWORD)result)
              return cbb_add_child(a2, a3, 3u, 0) != 0;
          }
        }
      }
    }
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  return result;
}

uint64_t bssl::dtls1_finish_message(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  if (bssl::CBBFinishArray(a2, a3) && (unint64_t)a3[1] > 0xB)
  {
    v5 = *a3;
    *(_WORD *)(v5 + 1) = *(_WORD *)(*a3 + 9);
    *(_BYTE *)(v5 + 3) = *(_BYTE *)(v5 + 11);
    return 1;
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_both.cc", 516);
    return 0;
  }
}

uint64_t bssl::dtls1_add_message(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v7[2];

  v2 = *(void **)(a2 + 8);
  v7[0] = *(void **)a2;
  v7[1] = v2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = bssl::add_outgoing(a1, 0, (uint64_t)v7);
  if (v7[0])
  {
    v5 = (char *)v7[0] - 8;
    v4 = *((_QWORD *)v7[0] - 1);
    if (v4 != -8)
      bzero(v5, v4 + 8);
    free(v5);
  }
  return v3;
}

uint64_t bssl::add_outgoing(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  uint64_t v19;
  void *v20;
  unint64_t *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)v6 & 2) != 0)
  {
    *(_DWORD *)(v6 + 324) = 0;
    *(_QWORD *)(v6 + 316) = 0;
    *(_QWORD *)(v6 + 308) = 0;
    v7 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(v7 + 328) = *(_DWORD *)(a1 + 80);
    if (*(_BYTE *)(v7 + 296))
    {
      v8 = 0;
      v9 = 128;
      do
      {
        v10 = (_QWORD *)(v7 + v9);
        v11 = *(_QWORD *)(v7 + v9);
        if (v11)
        {
          v13 = *(_QWORD *)(v11 - 8);
          v12 = (void *)(v11 - 8);
          v14 = v13 + 8;
          if (v13 != -8)
            bzero(v12, v14);
          free(v12);
        }
        *v10 = 0;
        v10[1] = 0;
        ++v8;
        v7 = *(_QWORD *)(a1 + 56);
        v9 += 24;
      }
      while (v8 < *(unsigned __int8 *)(v7 + 296));
    }
    *(_WORD *)(v7 + 296) = 0;
    *(_DWORD *)(v7 + 300) = 0;
    *(_BYTE *)v7 &= ~2u;
    **(_BYTE **)(a1 + 56) &= ~4u;
    v6 = *(_QWORD *)(a1 + 56);
  }
  v15 = *(unsigned __int8 *)(v6 + 296);
  if (v15 > 6 || (v16 = *(_QWORD *)(a3 + 8), HIDWORD(v16)))
  {
    v17 = 557;
LABEL_13:
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_both.cc", v17);
    return 0;
  }
  if ((a2 & 1) == 0)
  {
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 280);
    if (v19)
    {
      v20 = *(void **)a3;
      v21 = *(unint64_t **)(v19 + 408);
      if (v21 && !BUF_MEM_append(v21, *(void **)a3, *(_QWORD *)(a3 + 8)))
      {
        v17 = 566;
        goto LABEL_13;
      }
      v22 = *(_QWORD *)(v19 + 416);
      if (v22)
        (*(void (**)(uint64_t, void *, unint64_t))(v22 + 24))(v19 + 416, v20, v16);
      v6 = *(_QWORD *)(a1 + 56);
      v15 = *(unsigned __int8 *)(v6 + 296);
    }
    ++*(_WORD *)(v6 + 48);
  }
  v23 = v15;
  v24 = v6 + 24 * v15;
  v27 = *(_QWORD *)(v24 + 128);
  v26 = (_QWORD *)(v24 + 128);
  v25 = v27;
  if (v27)
  {
    v29 = *(_QWORD *)(v25 - 8);
    v28 = (void *)(v25 - 8);
    v30 = v29 + 8;
    if (v29 != -8)
      bzero(v28, v30);
    free(v28);
  }
  *v26 = 0;
  v26[1] = 0;
  v31 = *(_QWORD *)(a3 + 8);
  *v26 = *(_QWORD *)a3;
  v26[1] = v31;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v32 = *(_QWORD *)(a1 + 56);
  v33 = v6 + 24 * v23;
  *(_WORD *)(v33 + 144) = *(_WORD *)(v32 + 4);
  *(_BYTE *)(v33 + 146) = a2;
  ++*(_BYTE *)(v32 + 296);
  return 1;
}

uint64_t bssl::dtls1_add_change_cipher_spec(bssl *this, ssl_st *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v6[2];

  v6[0] = 0;
  v6[1] = 0;
  v2 = bssl::add_outgoing((uint64_t)this, 1, (uint64_t)v6);
  if (v6[0])
  {
    v4 = (char *)v6[0] - 8;
    v3 = *((_QWORD *)v6[0] - 1);
    if (v3 != -8)
      bzero(v4, v3 + 8);
    free(v4);
  }
  return v2;
}

uint64_t bssl::dtls1_flush_flight(bssl *this, ssl_st *a2)
{
  uint64_t v3;
  void (*v4)(_QWORD, timeval *);
  ssl_st *v5;
  __darwin_suseconds_t tv_usec;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int v10;
  timeval v12;

  **((_BYTE **)this + 7) |= 2u;
  v3 = *((_QWORD *)this + 7);
  if (*(_QWORD *)(v3 + 312) || *(_DWORD *)(v3 + 320))
  {
    v4 = *(void (**)(_QWORD, timeval *))(*((_QWORD *)this + 13) + 696);
    if (v4)
    {
LABEL_4:
      v4(0, &v12);
      goto LABEL_7;
    }
  }
  else
  {
    *(_DWORD *)(v3 + 328) = *((_DWORD *)this + 20);
    v4 = *(void (**)(_QWORD, timeval *))(*((_QWORD *)this + 13) + 696);
    if (v4)
      goto LABEL_4;
  }
  gettimeofday(&v12, 0);
LABEL_7:
  if (v12.tv_sec >= 0)
    tv_usec = v12.tv_usec;
  else
    tv_usec = 0;
  *(_QWORD *)(v3 + 312) = v12.tv_sec & ~(v12.tv_sec >> 63);
  *(_DWORD *)(v3 + 320) = tv_usec;
  v7 = *((_QWORD *)this + 7);
  v8 = *(_DWORD *)(v7 + 328);
  v9 = *(_QWORD *)(v7 + 312) + v8 / 0x3E8uLL;
  *(_QWORD *)(v7 + 312) = v9;
  v10 = *(_DWORD *)(v7 + 320) + 1000 * (v8 % 0x3E8);
  *(_DWORD *)(v7 + 320) = v10;
  if (v10 >= 0xF4240)
  {
    *(_QWORD *)(v7 + 312) = v9 + 1;
    *(_DWORD *)(v7 + 320) = v10 - 1000000;
  }
  return bssl::send_flight(this, v5);
}

uint64_t bssl::send_flight(bssl *this, ssl_st *a2)
{
  const char *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t (*v10)(void);
  unint64_t v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t, _QWORD, uint64_t, char *, uint64_t, bssl *, _QWORD);
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  BOOL v45;
  BOOL v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  size_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t, char *, _QWORD, bssl *, _QWORD);
  uint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD, unint64_t, uint64_t);
  uint64_t v63;
  int v64;
  int v65;
  _BYTE *v66;
  uint64_t v67;
  void *v68;
  void *v69;
  uint64_t v70;
  size_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  char v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  char *v81;
  size_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[48];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  void *v89[2];

  if (*(_DWORD *)(*((_QWORD *)this + 6) + 176))
  {
    v2 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_both.cc";
    v3 = 16;
    v4 = 194;
    v5 = 762;
LABEL_3:
    ERR_put_error(v3, 0, v4, v2, v5);
    return 0xFFFFFFFFLL;
  }
  v9 = *((_QWORD *)this + 4);
  if (!v9)
  {
    v2 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_both.cc";
    v3 = 16;
    v4 = 119;
    v5 = 767;
    goto LABEL_3;
  }
  if (*(_DWORD *)(*((_QWORD *)this + 7) + 304) > 0xE3u || (*((_BYTE *)this + 129) & 0x10) != 0)
    goto LABEL_20;
  if (!*(_QWORD *)v9 || (v10 = *(uint64_t (**)(void))(*(_QWORD *)v9 + 48)) == 0)
  {
    ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 217);
    goto LABEL_15;
  }
  v11 = v10();
  if (v11 > 0x40000000 || v11 < 0xE4)
  {
LABEL_15:
    *(_DWORD *)(*((_QWORD *)this + 7) + 304) = 1472;
    v12 = *((_QWORD *)this + 4);
    if (v12)
    {
      if (*(_QWORD *)v12 && (v13 = *(void (**)(void))(*(_QWORD *)v12 + 48)) != 0)
        v13();
      else
        ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 217);
    }
    goto LABEL_20;
  }
  *(_DWORD *)(*((_QWORD *)this + 7) + 304) = v11;
LABEL_20:
  v14 = *((_QWORD *)this + 7);
  v15 = *(unsigned int *)(v14 + 304);
  if ((_DWORD)v15)
  {
    v16 = malloc_type_malloc(v15 + 8, 0x30772F57uLL);
    if (!v16)
    {
      v2 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
      v3 = 14;
      v4 = 65;
      v5 = 247;
      goto LABEL_3;
    }
    *v16 = v15;
    v17 = (unint64_t)(v16 + 1);
    v14 = *((_QWORD *)this + 7);
    v18 = *(unsigned __int8 *)(v14 + 297);
    if (v18 >= *(unsigned __int8 *)(v14 + 296))
    {
LABEL_109:
      if ((int)BIO_flush(*((_QWORD *)this + 4)) <= 0)
      {
        *(_DWORD *)(*((_QWORD *)this + 6) + 196) = 3;
        v6 = 0xFFFFFFFFLL;
        if (v17)
          goto LABEL_131;
      }
      else
      {
        v6 = 1;
        if (v17)
          goto LABEL_131;
      }
      return v6;
    }
  }
  else
  {
    v17 = 0;
    v18 = *(unsigned __int8 *)(v14 + 297);
    if (v18 >= *(unsigned __int8 *)(v14 + 296))
      goto LABEL_109;
  }
  v19 = (char *)this + 16;
  v73 = v15;
  v77 = v17;
  while (2)
  {
    v20 = 0;
    v21 = 0;
    v74 = *(_DWORD *)(v14 + 300);
    v75 = v18;
    while (1)
    {
      v84 = 0;
      v22 = *(unsigned __int16 *)(v14 + 4);
      if (!*(_WORD *)(v14 + 4))
        break;
      v23 = *(unsigned __int16 *)(v14 + 24 * v18 + 144);
      if (v22 - 1 != v23)
        goto LABEL_44;
      v24 = 0;
      v25 = 1;
      v26 = *(_QWORD *)(v14 + 64);
      if ((*(_BYTE *)(v26 + 609) & 1) == 0)
        goto LABEL_46;
LABEL_30:
      v27 = *(unsigned __int8 *)(v26 + 605) + 13;
      if (!*(_QWORD *)v26)
        goto LABEL_47;
LABEL_31:
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v26 + 8) + 2);
      if (!v25)
        goto LABEL_48;
LABEL_32:
      v29 = *(_QWORD *)(v14 + 64);
      if ((*(_BYTE *)(v29 + 609) & 1) == 0)
        goto LABEL_49;
LABEL_33:
      v30 = *(unsigned __int8 *)(v29 + 605) + 13;
      v31 = v28 + v27;
      if (!*(_BYTE *)(v14 + 24 * v18 + 146))
        goto LABEL_50;
LABEL_34:
      if (v31 >= v15)
      {
        if ((v21 & 1) == 0)
          goto LABEL_139;
        goto LABEL_102;
      }
      if (!bssl::dtls_seal_record(this, v17, &v84, v15, 20, bssl::seal_next_message(ssl_st *,unsigned char *,unsigned long *,unsigned long,bssl::DTLS_OUTGOING_MESSAGE const*)::kChangeCipherSpec, 1uLL, v24))goto LABEL_130;
      v32 = (void (*)(uint64_t, _QWORD, uint64_t, char *, uint64_t, bssl *, _QWORD))*((_QWORD *)this + 8);
      if (v32)
      {
        v33 = *(_QWORD *)(*((_QWORD *)this + 6) + 280);
        v34 = (unsigned __int16 *)v19;
        if (v33)
        {
          v34 = (unsigned __int16 *)v19;
          if ((*(_BYTE *)(v33 + 1569) & 4) != 0)
          {
            v34 = (unsigned __int16 *)v19;
            if ((*((_BYTE *)this + 164) & 1) == 0)
              v34 = (unsigned __int16 *)(*(_QWORD *)(v33 + 1512) + 4);
          }
        }
        v32(1, *v34, 20, bssl::seal_next_message(ssl_st *,unsigned char *,unsigned long *,unsigned long,bssl::DTLS_OUTGOING_MESSAGE const*)::kChangeCipherSpec, 1, this, *((_QWORD *)this + 9));
      }
      v35 = v84;
      v20 += v84;
LABEL_97:
      v15 -= v35;
      v17 += v35;
      v14 = *((_QWORD *)this + 7);
      LOBYTE(v18) = *(_BYTE *)(v14 + 297) + 1;
      *(_BYTE *)(v14 + 297) = v18;
      v21 = 1;
      if (*(unsigned __int8 *)(v14 + 296) <= v18)
        goto LABEL_102;
    }
    v23 = *(unsigned __int16 *)(v14 + 24 * v18 + 144);
LABEL_44:
    if (v23 != v22)
    {
      v64 = 68;
      v65 = 631;
      goto LABEL_117;
    }
    v25 = 0;
    v24 = 1;
    v26 = *(_QWORD *)(*((_QWORD *)this + 6) + 272);
    if ((*(_BYTE *)(v26 + 609) & 1) != 0)
      goto LABEL_30;
LABEL_46:
    v27 = 13;
    if (*(_QWORD *)v26)
      goto LABEL_31;
LABEL_47:
    v28 = 0;
    if (v25)
      goto LABEL_32;
LABEL_48:
    v29 = *(_QWORD *)(*((_QWORD *)this + 6) + 272);
    if ((*(_BYTE *)(v29 + 609) & 1) != 0)
      goto LABEL_33;
LABEL_49:
    v30 = 13;
    v31 = v28 + v27;
    if (*(_BYTE *)(v14 + 24 * v18 + 146))
      goto LABEL_34;
LABEL_50:
    v36 = v14 + 24 * v18 + 128;
    v37 = *(_QWORD *)(v14 + 24 * v18 + 136);
    if (v37 < 4 || (v37 & 0xFFFFFFFFFFFFFFFELL) == 4 || v37 - 6 < 6)
      goto LABEL_115;
    v38 = *(char **)v36;
    v39 = *(unsigned __int8 *)(*(_QWORD *)v36 + 1);
    v40 = *(unsigned __int8 *)(*(_QWORD *)v36 + 2);
    v41 = *(unsigned __int8 *)(*(_QWORD *)v36 + 3);
    v42 = v41 | (v39 << 16) | (v40 << 8);
    v43 = v37 - 12;
    v44 = (v38[9] << 16) | (v38[10] << 8) | v38[11];
    v45 = v43 >= v44
       && ((v38[6] << 16) | (v38[7] << 8) | v38[8]) == 0;
    v46 = v45 && (_DWORD)v44 == v42;
    if (!v46 || (v47 = *(unsigned int *)(v14 + 300), v42 < v47) || v43 != v44)
    {
LABEL_115:
      v64 = 68;
      v65 = 666;
      goto LABEL_117;
    }
    if (v31 + 13 > v15 || v15 < v30)
    {
      if ((v21 & 1) == 0)
      {
LABEL_139:
        v64 = 169;
        v65 = 752;
LABEL_117:
        ERR_put_error(16, 0, v64, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_both.cc", v65);
        v6 = 0xFFFFFFFFLL;
        v17 = v77;
        if (v77)
          goto LABEL_131;
        return v6;
      }
LABEL_102:
      v61 = *((_QWORD *)this + 4);
      if (v61
        && *(_QWORD *)v61
        && (v62 = *(uint64_t (**)(_QWORD, unint64_t, uint64_t))(*(_QWORD *)v61 + 16)) != 0)
      {
        v17 = v77;
        if (*(_DWORD *)(v61 + 16))
        {
          if ((int)v20 < 1)
          {
            v6 = 0;
          }
          else
          {
            v63 = v62(*((_QWORD *)this + 4), v77, v20);
            v6 = v63;
            if ((int)v63 >= 1)
            {
              *(_QWORD *)(v61 + 64) += v63;
              v14 = *((_QWORD *)this + 7);
              v18 = *(unsigned __int8 *)(v14 + 297);
              v15 = v73;
              if (v18 < *(unsigned __int8 *)(v14 + 296))
                continue;
              goto LABEL_109;
            }
          }
        }
        else
        {
          ERR_put_error(17, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 171);
          v6 = 4294967294;
        }
      }
      else
      {
        ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 167);
        v6 = 4294967294;
        v17 = v77;
      }
      v72 = *((_QWORD *)this + 7);
      *(_BYTE *)(v72 + 297) = v75;
      *(_DWORD *)(v72 + 300) = v74;
      *(_DWORD *)(*((_QWORD *)this + 6) + 196) = 3;
      if (v17)
        goto LABEL_131;
      return v6;
    }
    break;
  }
  v80 = v24;
  v83 = v20;
  v48 = *v38;
  v49 = v38[4];
  v50 = v38[5];
  v76 = *(unsigned int *)(v14 + 300);
  v51 = v44 - v47;
  v52 = v15 - v31 - 12;
  v78 = v52;
  v79 = v51;
  if (v51 < v52)
    v52 = v51;
  v82 = v52;
  v87 = 0u;
  v88 = 0u;
  v86 = 0u;
  v81 = (char *)(v17 + v30);
  *(_QWORD *)&v87 = v17 + v30;
  *(_QWORD *)&v88 = v15 - v30;
  v89[0] = 0;
  if (!CBB_add_space((uint64_t)&v86, v89, 1))
    goto LABEL_123;
  *(_BYTE *)v89[0] = v48;
  v89[0] = 0;
  if (!CBB_add_space((uint64_t)&v86, v89, 3))
    goto LABEL_123;
  *((_BYTE *)v89[0] + 2) = v41;
  *((_BYTE *)v89[0] + 1) = v40;
  *(_BYTE *)v89[0] = v39;
  v89[0] = 0;
  if (!CBB_add_space((uint64_t)&v86, v89, 2))
    goto LABEL_123;
  *((_BYTE *)v89[0] + 1) = v50;
  *(_BYTE *)v89[0] = v49;
  v53 = *(_DWORD *)(*((_QWORD *)this + 7) + 300);
  v89[0] = 0;
  if (!CBB_add_space((uint64_t)&v86, v89, 3))
    goto LABEL_123;
  *((_BYTE *)v89[0] + 2) = v53;
  *((_BYTE *)v89[0] + 1) = BYTE1(v53);
  *(_BYTE *)v89[0] = BYTE2(v53);
  if (HIBYTE(v53))
  {
    v66 = (char *)&v88 + 8;
    if (BYTE8(v86))
      v66 = (_BYTE *)(v87 + 24);
    *v66 |= 2u;
    *(_QWORD *)&v86 = 0;
    goto LABEL_123;
  }
  v19 = (char *)this + 16;
  if (!CBB_flush((uint64_t *)&v86))
    goto LABEL_123;
  if (!cbb_add_child((uint64_t)&v86, (uint64_t)v85, 3u, 0))
    goto LABEL_123;
  v89[0] = 0;
  if (!CBB_add_space((uint64_t)v85, v89, v82))
    goto LABEL_123;
  if (v82)
    memcpy(v89[0], &v38[v76 + 12], v82);
  if (!BYTE8(v86))
  {
    if (!CBB_flush((uint64_t *)&v86) || (BYTE8(v88) & 1) != 0)
      goto LABEL_123;
    v54 = *((_QWORD *)&v87 + 1);
    *(_QWORD *)&v87 = 0;
    v55 = (void (*)(uint64_t, _QWORD, uint64_t, char *, _QWORD, bssl *, _QWORD))*((_QWORD *)this + 8);
    if (v55)
    {
      v56 = *(_QWORD *)(*((_QWORD *)this + 6) + 280);
      v57 = (unsigned __int16 *)((char *)this + 16);
      if (v56)
      {
        v57 = (unsigned __int16 *)((char *)this + 16);
        if ((*(_BYTE *)(v56 + 1569) & 4) != 0)
        {
          v57 = (unsigned __int16 *)((char *)this + 16);
          if ((*((_BYTE *)this + 164) & 1) == 0)
            v57 = (unsigned __int16 *)(*(_QWORD *)(v56 + 1512) + 4);
        }
      }
      v55(1, *v57, 22, v81, *((_QWORD *)&v87 + 1), this, *((_QWORD *)this + 9));
    }
    if (!bssl::dtls_seal_record(this, v17, &v84, v15, 22, v81, v54, v80))
      goto LABEL_124;
    v58 = *((_QWORD *)this + 7);
    if (v79 <= v78)
    {
      *(_DWORD *)(v58 + 300) = 0;
      if (!BYTE8(v86))
        goto LABEL_91;
    }
    else
    {
      *(_DWORD *)(v58 + 300) += v82;
      if (!BYTE8(v86))
      {
LABEL_91:
        if ((BYTE8(v88) & 1) != 0 && (_QWORD)v87)
        {
          v60 = (void *)(v87 - 8);
          v59 = *(_QWORD *)(v87 - 8);
          if (v59 != -8)
            bzero(v60, v59 + 8);
          free(v60);
        }
      }
    }
    v35 = v84;
    v20 = v84 + v83;
    if (v79 > v78)
      goto LABEL_102;
    goto LABEL_97;
  }
  ERR_put_error(14, 0, 66, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", 127);
LABEL_123:
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_both.cc", 692);
LABEL_124:
  if (!BYTE8(v86) && (BYTE8(v88) & 1) != 0 && (_QWORD)v87)
  {
    v68 = (void *)(v87 - 8);
    v67 = *(_QWORD *)(v87 - 8);
    if (v67 != -8)
      bzero(v68, v67 + 8);
    free(v68);
  }
LABEL_130:
  v6 = 0xFFFFFFFFLL;
  v17 = v77;
  if (!v77)
    return v6;
LABEL_131:
  v70 = *(_QWORD *)(v17 - 8);
  v69 = (void *)(v17 - 8);
  v71 = v70 + 8;
  if (v70 != -8)
    bzero(v69, v71);
  free(v69);
  return v6;
}

uint64_t bssl::dtls1_new(bssl *this, ssl_st *a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;

  result = bssl::tls_new((char **)this, a2);
  if ((_DWORD)result)
  {
    v4 = (char *)malloc_type_malloc(0x158uLL, 0x30772F57uLL);
    if (v4)
    {
      *(_QWORD *)v4 = 336;
      v4[8] &= 0xF8u;
      *(_DWORD *)(v4 + 10) = 0;
      *((_QWORD *)v4 + 20) = 0;
      *((_QWORD *)v4 + 21) = 0;
      *(_DWORD *)(v4 + 175) = 0;
      *((_QWORD *)v4 + 23) = 0;
      *((_QWORD *)v4 + 24) = 0;
      *(_DWORD *)(v4 + 199) = 0;
      *((_QWORD *)v4 + 26) = 0;
      *((_QWORD *)v4 + 27) = 0;
      *(_DWORD *)(v4 + 223) = 0;
      *((_QWORD *)v4 + 29) = 0;
      *((_QWORD *)v4 + 30) = 0;
      *(_DWORD *)(v4 + 247) = 0;
      *((_QWORD *)v4 + 32) = 0;
      *((_QWORD *)v4 + 33) = 0;
      *(_DWORD *)(v4 + 271) = 0;
      *((_QWORD *)v4 + 35) = 0;
      *((_QWORD *)v4 + 36) = 0;
      *(_DWORD *)(v4 + 295) = 0;
      *((_WORD *)v4 + 152) = 0;
      *((_DWORD *)v4 + 84) = 0;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)(v4 + 44) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 5) = 0u;
      *((_OWORD *)v4 + 6) = 0u;
      *((_OWORD *)v4 + 7) = 0u;
      *((_OWORD *)v4 + 8) = 0u;
      *(_OWORD *)(v4 + 139) = 0u;
      *(_QWORD *)(v4 + 324) = 0;
      *(_QWORD *)(v4 + 308) = 0;
      *(_QWORD *)(v4 + 316) = 0;
      *((_QWORD *)this + 7) = v4 + 8;
      result = 1;
      *((_WORD *)this + 8) = -259;
    }
    else
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      if (this && (v5 = *((_QWORD *)this + 6)) != 0)
      {
        bssl::SSL3_STATE::~SSL3_STATE(*((bssl::SSL3_STATE **)this + 6));
        v7 = *(_QWORD *)(v5 - 8);
        v6 = (void *)(v5 - 8);
        v8 = v7 + 8;
        if (v7 != -8)
          bzero(v6, v8);
        free(v6);
        result = 0;
        *((_QWORD *)this + 6) = 0;
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void bssl::dtls1_free(bssl *this, ssl_st *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  size_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  size_t v44;
  void *v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  size_t v56;
  void *v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  size_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  size_t v68;
  void *v69;
  uint64_t v70;
  size_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  size_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  size_t v80;
  void *v81;
  uint64_t v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  size_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  size_t v92;
  void *v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  size_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  size_t v104;
  void *v105;
  uint64_t v106;
  size_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  size_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  size_t v116;
  void *v117;
  uint64_t v118;
  size_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  size_t v124;
  _QWORD *v125;
  uint64_t v126;
  size_t v127;

  if (this)
  {
    v3 = *((_QWORD *)this + 6);
    if (v3)
    {
      bssl::SSL3_STATE::~SSL3_STATE(*((bssl::SSL3_STATE **)this + 6));
      v5 = *(_QWORD *)(v3 - 8);
      v4 = (void *)(v3 - 8);
      v6 = v5 + 8;
      if (v5 != -8)
        bzero(v4, v6);
      free(v4);
      *((_QWORD *)this + 6) = 0;
    }
    v7 = (_QWORD *)*((_QWORD *)this + 7);
    if (v7)
    {
      v8 = v7[34];
      if (v8)
      {
        v10 = *(_QWORD *)(v8 - 8);
        v9 = (void *)(v8 - 8);
        v11 = v10 + 8;
        if (v10 != -8)
          bzero(v9, v11);
        free(v9);
      }
      v7[34] = 0;
      v7[35] = 0;
      v12 = v7[31];
      if (v12)
      {
        v14 = *(_QWORD *)(v12 - 8);
        v13 = (void *)(v12 - 8);
        v15 = v14 + 8;
        if (v14 != -8)
          bzero(v13, v15);
        free(v13);
      }
      v7[31] = 0;
      v7[32] = 0;
      v16 = v7[28];
      if (v16)
      {
        v18 = *(_QWORD *)(v16 - 8);
        v17 = (void *)(v16 - 8);
        v19 = v18 + 8;
        if (v18 != -8)
          bzero(v17, v19);
        free(v17);
      }
      v7[28] = 0;
      v7[29] = 0;
      v20 = v7[25];
      if (v20)
      {
        v22 = *(_QWORD *)(v20 - 8);
        v21 = (void *)(v20 - 8);
        v23 = v22 + 8;
        if (v22 != -8)
          bzero(v21, v23);
        free(v21);
      }
      v7[25] = 0;
      v7[26] = 0;
      v24 = v7[22];
      if (v24)
      {
        v26 = *(_QWORD *)(v24 - 8);
        v25 = (void *)(v24 - 8);
        v27 = v26 + 8;
        if (v26 != -8)
          bzero(v25, v27);
        free(v25);
      }
      v7[22] = 0;
      v7[23] = 0;
      v28 = v7[19];
      if (v28)
      {
        v30 = *(_QWORD *)(v28 - 8);
        v29 = (void *)(v28 - 8);
        v31 = v30 + 8;
        if (v30 != -8)
          bzero(v29, v31);
        free(v29);
      }
      v7[19] = 0;
      v7[20] = 0;
      v32 = v7[16];
      if (v32)
      {
        v34 = *(_QWORD *)(v32 - 8);
        v33 = (void *)(v32 - 8);
        v35 = v34 + 8;
        if (v34 != -8)
          bzero(v33, v35);
        free(v33);
      }
      v7[16] = 0;
      v7[17] = 0;
      v36 = v7[15];
      v7[15] = 0;
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 8);
        if (v37)
        {
          v39 = *(_QWORD *)(v37 - 8);
          v38 = (void *)(v37 - 8);
          v40 = v39 + 8;
          if (v39 != -8)
            bzero(v38, v40);
          free(v38);
        }
        v41 = *(_QWORD *)(v36 + 16);
        if (v41)
        {
          v43 = *(_QWORD *)(v41 - 8);
          v42 = (void *)(v41 - 8);
          v44 = v43 + 8;
          if (v43 != -8)
            bzero(v42, v44);
          free(v42);
        }
        v46 = *(_QWORD *)(v36 - 8);
        v45 = (void *)(v36 - 8);
        v47 = v46 + 8;
        if (v46 != -8)
          bzero(v45, v47);
        free(v45);
      }
      v48 = v7[14];
      v7[14] = 0;
      if (v48)
      {
        v49 = *(_QWORD *)(v48 + 8);
        if (v49)
        {
          v51 = *(_QWORD *)(v49 - 8);
          v50 = (void *)(v49 - 8);
          v52 = v51 + 8;
          if (v51 != -8)
            bzero(v50, v52);
          free(v50);
        }
        v53 = *(_QWORD *)(v48 + 16);
        if (v53)
        {
          v55 = *(_QWORD *)(v53 - 8);
          v54 = (void *)(v53 - 8);
          v56 = v55 + 8;
          if (v55 != -8)
            bzero(v54, v56);
          free(v54);
        }
        v58 = *(_QWORD *)(v48 - 8);
        v57 = (void *)(v48 - 8);
        v59 = v58 + 8;
        if (v58 != -8)
          bzero(v57, v59);
        free(v57);
      }
      v60 = v7[13];
      v7[13] = 0;
      if (v60)
      {
        v61 = *(_QWORD *)(v60 + 8);
        if (v61)
        {
          v63 = *(_QWORD *)(v61 - 8);
          v62 = (void *)(v61 - 8);
          v64 = v63 + 8;
          if (v63 != -8)
            bzero(v62, v64);
          free(v62);
        }
        v65 = *(_QWORD *)(v60 + 16);
        if (v65)
        {
          v67 = *(_QWORD *)(v65 - 8);
          v66 = (void *)(v65 - 8);
          v68 = v67 + 8;
          if (v67 != -8)
            bzero(v66, v68);
          free(v66);
        }
        v70 = *(_QWORD *)(v60 - 8);
        v69 = (void *)(v60 - 8);
        v71 = v70 + 8;
        if (v70 != -8)
          bzero(v69, v71);
        free(v69);
      }
      v72 = v7[12];
      v7[12] = 0;
      if (v72)
      {
        v73 = *(_QWORD *)(v72 + 8);
        if (v73)
        {
          v75 = *(_QWORD *)(v73 - 8);
          v74 = (void *)(v73 - 8);
          v76 = v75 + 8;
          if (v75 != -8)
            bzero(v74, v76);
          free(v74);
        }
        v77 = *(_QWORD *)(v72 + 16);
        if (v77)
        {
          v79 = *(_QWORD *)(v77 - 8);
          v78 = (void *)(v77 - 8);
          v80 = v79 + 8;
          if (v79 != -8)
            bzero(v78, v80);
          free(v78);
        }
        v82 = *(_QWORD *)(v72 - 8);
        v81 = (void *)(v72 - 8);
        v83 = v82 + 8;
        if (v82 != -8)
          bzero(v81, v83);
        free(v81);
      }
      v84 = v7[11];
      v7[11] = 0;
      if (v84)
      {
        v85 = *(_QWORD *)(v84 + 8);
        if (v85)
        {
          v87 = *(_QWORD *)(v85 - 8);
          v86 = (void *)(v85 - 8);
          v88 = v87 + 8;
          if (v87 != -8)
            bzero(v86, v88);
          free(v86);
        }
        v89 = *(_QWORD *)(v84 + 16);
        if (v89)
        {
          v91 = *(_QWORD *)(v89 - 8);
          v90 = (void *)(v89 - 8);
          v92 = v91 + 8;
          if (v91 != -8)
            bzero(v90, v92);
          free(v90);
        }
        v94 = *(_QWORD *)(v84 - 8);
        v93 = (void *)(v84 - 8);
        v95 = v94 + 8;
        if (v94 != -8)
          bzero(v93, v95);
        free(v93);
      }
      v96 = v7[10];
      v7[10] = 0;
      if (v96)
      {
        v97 = *(_QWORD *)(v96 + 8);
        if (v97)
        {
          v99 = *(_QWORD *)(v97 - 8);
          v98 = (void *)(v97 - 8);
          v100 = v99 + 8;
          if (v99 != -8)
            bzero(v98, v100);
          free(v98);
        }
        v101 = *(_QWORD *)(v96 + 16);
        if (v101)
        {
          v103 = *(_QWORD *)(v101 - 8);
          v102 = (void *)(v101 - 8);
          v104 = v103 + 8;
          if (v103 != -8)
            bzero(v102, v104);
          free(v102);
        }
        v106 = *(_QWORD *)(v96 - 8);
        v105 = (void *)(v96 - 8);
        v107 = v106 + 8;
        if (v106 != -8)
          bzero(v105, v107);
        free(v105);
      }
      v108 = v7[9];
      v7[9] = 0;
      if (v108)
      {
        v109 = *(_QWORD *)(v108 + 8);
        if (v109)
        {
          v111 = *(_QWORD *)(v109 - 8);
          v110 = (void *)(v109 - 8);
          v112 = v111 + 8;
          if (v111 != -8)
            bzero(v110, v112);
          free(v110);
        }
        v113 = *(_QWORD *)(v108 + 16);
        if (v113)
        {
          v115 = *(_QWORD *)(v113 - 8);
          v114 = (void *)(v113 - 8);
          v116 = v115 + 8;
          if (v115 != -8)
            bzero(v114, v116);
          free(v114);
        }
        v118 = *(_QWORD *)(v108 - 8);
        v117 = (void *)(v108 - 8);
        v119 = v118 + 8;
        if (v118 != -8)
          bzero(v117, v119);
        free(v117);
      }
      v120 = v7[8];
      v7[8] = 0;
      if (v120)
      {
        v121 = *(_QWORD *)(v120 + 8);
        if (v121)
        {
          (*(void (**)(uint64_t, ssl_st *))(v121 + 24))(v120 + 8, a2);
          *(_QWORD *)(v120 + 8) = 0;
        }
        v123 = *(_QWORD *)(v120 - 8);
        v122 = (void *)(v120 - 8);
        v124 = v123 + 8;
        if (v123 != -8)
          bzero(v122, v124);
        free(v122);
      }
      v126 = *(v7 - 1);
      v125 = v7 - 1;
      v127 = v126 + 8;
      if (v126 != -8)
        bzero(v125, v127);
      free(v125);
    }
    *((_QWORD *)this + 7) = 0;
  }
}

uint64_t DTLSv1_get_timeout(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  void (*v5)(_QWORD, timeval *);
  unint64_t v7;
  unsigned int tv_usec;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  unint64_t v15;
  unsigned int v16;
  BOOL v17;
  timeval v18;

  if (!**(_BYTE **)a1)
    return 0;
  v4 = *(_QWORD *)(a1 + 56);
  if (!*(_QWORD *)(v4 + 312) && !*(_DWORD *)(v4 + 320))
    return 0;
  v5 = *(void (**)(_QWORD, timeval *))(*(_QWORD *)(a1 + 104) + 696);
  if (v5)
    v5(0, &v18);
  else
    gettimeofday(&v18, 0);
  v7 = v18.tv_sec & ~(v18.tv_sec >> 63);
  if (v18.tv_sec >= 0)
    tv_usec = v18.tv_usec;
  else
    tv_usec = 0;
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_QWORD *)(v9 + 312);
  v11 = v10 >= v7;
  v12 = v10 - v7;
  if (!v11)
    goto LABEL_16;
  if (v12)
  {
    v13 = *(_DWORD *)(v9 + 320);
  }
  else
  {
    v13 = *(_DWORD *)(v9 + 320);
    if (v13 <= tv_usec)
    {
LABEL_16:
      *a2 = 0;
      a2[1] = 0;
      return 1;
    }
  }
  v14 = v13 < tv_usec;
  if (v13 < tv_usec)
    v13 += 1000000;
  v15 = v12 - v14;
  v16 = v13 - tv_usec;
  v17 = v15 == 0;
  if (v15 >= 0x7FFFFFFF)
    v15 = 0x7FFFFFFFLL;
  if (v17 && v16 >> 3 < 0x753)
  {
    v16 = 0;
    v15 = 0;
  }
  *a2 = v15;
  *((_DWORD *)a2 + 2) = v16;
  return 1;
}

BOOL bssl::dtls1_check_timeout_num(bssl *this, ssl_st *a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  unint64_t v7;
  unsigned int v8;

  v3 = *((_QWORD *)this + 7);
  v4 = *(_DWORD *)(v3 + 308) + 1;
  *(_DWORD *)(v3 + 308) = v4;
  if (v4 >= 3 && (*((_BYTE *)this + 129) & 0x10) == 0)
  {
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      if (*(_QWORD *)v5 && (v6 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 48)) != 0)
      {
        v7 = v6();
        if (v7 <= 0x40000000 && v7 >= 0xE4)
          *(_DWORD *)(*((_QWORD *)this + 7) + 304) = v7;
      }
      else
      {
        ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 217);
      }
    }
  }
  v8 = *(_DWORD *)(*((_QWORD *)this + 7) + 308);
  if (v8 >= 0xD)
    ERR_put_error(16, 0, 198, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_lib.cc", 183);
  return v8 < 0xD;
}

uint64_t DTLSv1_handle_timeout(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, timeval *);
  unsigned int tv_usec;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  unint64_t v14;
  unsigned int v15;
  _BOOL8 v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  void (*v27)(_QWORD, timeval *);
  ssl_st *v28;
  __darwin_suseconds_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  timeval v34;

  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 196) = 0;
  ERR_clear_error();
  *__error() = 0;
  if (!**(_BYTE **)a1)
  {
    ERR_put_error(16, 0, 66, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_lib.cc", 252);
    return 0xFFFFFFFFLL;
  }
  v2 = *(_QWORD *)(a1 + 56);
  if (!*(_QWORD *)(v2 + 312) && !*(_DWORD *)(v2 + 320))
    return 0;
  v3 = *(void (**)(_QWORD, timeval *))(*(_QWORD *)(a1 + 104) + 696);
  if (v3)
    v3(0, &v34);
  else
    gettimeofday(&v34, 0);
  tv_usec = v34.tv_usec;
  v6 = v34.tv_sec & ~(v34.tv_sec >> 63);
  if (v34.tv_sec < 0)
    tv_usec = 0;
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(v7 + 312);
  v9 = v8 >= v6;
  v10 = v8 - v6;
  if (!v9)
    goto LABEL_11;
  if (v10)
  {
    v15 = *(_DWORD *)(v7 + 320);
  }
  else
  {
    v15 = *(_DWORD *)(v7 + 320);
    if (v15 <= tv_usec)
      goto LABEL_11;
  }
  v16 = v15 < tv_usec;
  if (v15 < tv_usec)
    v15 += 1000000;
  v17 = v10 - v16;
  v18 = v15 - tv_usec;
  v19 = v18 >> 3;
  v20 = 0x7FFFFFFFLL;
  if (v17 < 0x7FFFFFFF)
    v20 = v17;
  if (v20)
    v21 = 0;
  else
    v21 = (int)v18 <= 0;
  v22 = !v21;
  v23 = v19 <= 0x752 && v17 == 0;
  if (!v23 && (v22 & 1) != 0)
    return 0;
LABEL_11:
  v11 = *(_DWORD *)(v7 + 308) + 1;
  *(_DWORD *)(v7 + 308) = v11;
  if (v11 >= 3 && (*(_BYTE *)(a1 + 129) & 0x10) == 0)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12)
    {
      if (*(_QWORD *)v12 && (v13 = *(uint64_t (**)(void))(*(_QWORD *)v12 + 48)) != 0)
      {
        v14 = v13();
        if (v14 <= 0x40000000 && v14 >= 0xE4)
          *(_DWORD *)(*(_QWORD *)(a1 + 56) + 304) = v14;
      }
      else
      {
        ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 217);
      }
    }
  }
  v24 = *(_QWORD *)(a1 + 56);
  if (*(_DWORD *)(v24 + 308) >= 0xDu)
  {
    ERR_put_error(16, 0, 198, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_lib.cc", 183);
    return 0xFFFFFFFFLL;
  }
  else
  {
    v25 = 2 * *(_DWORD *)(v24 + 328);
    if (v25 >= 0xEA60)
      v25 = 60000;
    *(_DWORD *)(v24 + 328) = v25;
    v26 = *(_QWORD *)(a1 + 56);
    if (!*(_QWORD *)(v26 + 312) && !*(_DWORD *)(v26 + 320))
      *(_DWORD *)(v26 + 328) = *(_DWORD *)(a1 + 80);
    v27 = *(void (**)(_QWORD, timeval *))(*(_QWORD *)(a1 + 104) + 696);
    if (v27)
      v27(0, &v34);
    else
      gettimeofday(&v34, 0);
    if (v34.tv_sec >= 0)
      v29 = v34.tv_usec;
    else
      v29 = 0;
    *(_QWORD *)(v26 + 312) = v34.tv_sec & ~(v34.tv_sec >> 63);
    *(_DWORD *)(v26 + 320) = v29;
    v30 = *(_QWORD *)(a1 + 56);
    v31 = *(_DWORD *)(v30 + 328);
    v32 = *(_QWORD *)(v30 + 312) + v31 / 0x3E8uLL;
    *(_QWORD *)(v30 + 312) = v32;
    v33 = *(_DWORD *)(v30 + 320) + 1000 * (v31 % 0x3E8);
    *(_DWORD *)(v30 + 320) = v33;
    if (v33 > 0xF423F)
    {
      *(_QWORD *)(v30 + 312) = v32 + 1;
      *(_DWORD *)(v30 + 320) = v33 - 1000000;
    }
    *(_BYTE *)(v30 + 297) = 0;
    *(_DWORD *)(v30 + 300) = 0;
    return bssl::send_flight((bssl *)a1, v28);
  }
}

uint64_t bssl::dtls1_open_app_data(bssl *a1, _OWORD *a2, unint64_t *a3, char *a4, unsigned __int8 *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  ssl_st *v12;
  char v13;
  ssl_st *v14;
  uint64_t v15;
  __int128 v16;
  char v17;

  v17 = 0;
  v16 = 0uLL;
  result = bssl::dtls_open_record(a1, &v17, (uint64_t)&v16, a3, a4, a5, a6, a8);
  if (!(_DWORD)result)
  {
    if (v17 == 23)
    {
      if (*((_QWORD *)&v16 + 1))
      {
        result = 0;
        *a2 = v16;
        return result;
      }
      return 1;
    }
    if (v17 != 22)
      goto LABEL_15;
    if (*((_QWORD *)&v16 + 1) < 6uLL
      || (unint64_t)(*((_QWORD *)&v16 + 1) - 6) < 3
      || (unint64_t)(*((_QWORD *)&v16 + 1) - 9) < 3
      || *((_QWORD *)&v16 + 1) - 12 < (((unint64_t)*(unsigned __int8 *)(v16 + 9) << 16) | ((unint64_t)*(unsigned __int8 *)(v16 + 10) << 8) | *(unsigned __int8 *)(v16 + 11)))
    {
      ERR_put_error(16, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_pkt.cc", 150);
      v13 = 50;
LABEL_16:
      *a4 = v13;
      return 4;
    }
    if (*(_BYTE *)v16 != 20
      || *(unsigned __int16 *)(*((_QWORD *)a1 + 7) + 50) - 1 != __rev16(*(unsigned __int16 *)(v16 + 4)))
    {
LABEL_15:
      ERR_put_error(16, 0, 225, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_pkt.cc", 176);
      v13 = 10;
      goto LABEL_16;
    }
    if ((*(unsigned __int8 *)(v16 + 6) << 16) | (*(unsigned __int8 *)(v16 + 7) << 8) | *(unsigned __int8 *)(v16 + 8))
      return 1;
    if (bssl::dtls1_check_timeout_num(a1, v12))
    {
      v15 = *((_QWORD *)a1 + 7);
      *(_BYTE *)(v15 + 297) = 0;
      *(_DWORD *)(v15 + 300) = 0;
      bssl::send_flight(a1, v14);
      return 1;
    }
    else
    {
      *a4 = 0;
      return 4;
    }
  }
  return result;
}

uint64_t bssl::dtls1_write_app_data(uint64_t a1, _BYTE *a2, size_t *a3, char *a4, size_t a5)
{
  int v5;
  int v6;
  uint64_t result;

  *a2 = 0;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 48) + 176))
  {
    v5 = 194;
    v6 = 195;
LABEL_5:
    ERR_put_error(16, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_pkt.cc", v6);
    return 0xFFFFFFFFLL;
  }
  if (a5 > 0x4000)
  {
    v5 = 143;
    v6 = 201;
    goto LABEL_5;
  }
  if (a5)
  {
    result = bssl::dtls1_write_record(a1, 23, a4, a5);
    if ((int)result >= 1)
    {
      *a3 = a5;
      return 1;
    }
  }
  else
  {
    *a3 = 0;
    return 1;
  }
  return result;
}

uint64_t bssl::dtls1_write_record(uint64_t a1, __int8 a2, char *a3, size_t a4)
{
  uint64_t result;
  uint64_t v9;
  void **v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v18;
  int v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  ssl_st *v27;
  uint64_t v28;
  unint64_t v29;

  if (a4 > 0x4000)
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_pkt.cc", 229);
    return 0xFFFFFFFFLL;
  }
  v9 = *(_QWORD *)(a1 + 48);
  v10 = (void **)(v9 + 104);
  v29 = 0;
  v11 = *(uint64_t **)(v9 + 272);
  if ((*((_BYTE *)v11 + 609) & 1) != 0)
  {
    v14 = *((unsigned __int8 *)v11 + 605);
    if (**(_BYTE **)a1)
    {
      v12 = v14 + 13;
      if (*v11)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else
  {
    if (**(_BYTE **)a1)
    {
      v12 = 13;
      if (*v11)
      {
LABEL_6:
        v13 = *(unsigned __int8 *)(v11[1] + 2) + v12;
        goto LABEL_45;
      }
LABEL_9:
      v13 = v12;
      goto LABEL_45;
    }
    LODWORD(v14) = 0;
  }
  LODWORD(v12) = v14 + 5;
  v15 = *v11;
  if (*v11)
  {
    v16 = *((unsigned __int16 *)v11 + 303);
    if (v16 - 769 >= 4)
    {
      if (v16 == 65277 || v16 == 65279)
        goto LABEL_30;
    }
    else if (v16 > 0x301)
    {
      goto LABEL_30;
    }
    if ((*(_BYTE *)(a1 + 133) & 1) != 0 && *(_DWORD *)(v15 + 32) != 4)
    {
      v18 = v14 + 10;
      v19 = *(_DWORD *)(v15 + 28);
      if (v19 == 1)
      {
        v21 = 24;
      }
      else if (v19 == 4 || v19 == 2)
      {
        v21 = 32;
      }
      else
      {
        v21 = 0;
      }
      LODWORD(v12) = v18 + v21;
    }
  }
LABEL_30:
  if ((*((_BYTE *)v11 + 609) & 1) == 0)
  {
    v22 = 0;
    if (v15)
      goto LABEL_32;
LABEL_38:
    v13 = v22 + 5;
    goto LABEL_45;
  }
  v22 = *((unsigned __int8 *)v11 + 605);
  if (!v15)
    goto LABEL_38;
LABEL_32:
  v23 = *(unsigned __int8 *)(v11[1] + 2);
  v24 = *((unsigned __int16 *)v11 + 303);
  v25 = 5;
  if (v24 == 772)
    v25 = 6;
  v13 = v22 + v25 + v23;
  if (v24 - 769 < 4)
  {
    if (v24 > 0x301)
      goto LABEL_45;
LABEL_43:
    if ((*(_BYTE *)(a1 + 133) & 1) != 0)
      v13 <<= *(_DWORD *)(v15 + 32) != 4;
    goto LABEL_45;
  }
  if (v24 != 65277 && v24 != 65279)
    goto LABEL_43;
LABEL_45:
  if (bssl::SSLBuffer::EnsureCap((void **)(v9 + 104), v12, v13 + a4)
    && bssl::dtls_seal_record((_QWORD *)a1, *(_QWORD *)(v9 + 104) + *(unsigned __int16 *)(v9 + 112) + *(unsigned __int16 *)(v9 + 114), &v29, *(unsigned __int16 *)(v9 + 116) - (unint64_t)*(unsigned __int16 *)(v9 + 114), a2, a3, a4, 1))
  {
    v28 = *(unsigned __int16 *)(v9 + 114);
    if ((unint64_t)*(unsigned __int16 *)(v9 + 116) - v28 < v29)
      abort();
    *(_WORD *)(v9 + 114) = v28 + v29;
    LODWORD(result) = bssl::ssl_write_buffer_flush((bssl *)a1, v27);
    if ((int)result >= 1)
      return 1;
    else
      return result;
  }
  else
  {
    if (*(_BYTE *)(v9 + 123))
      free(*v10);
    *(_BYTE *)(v9 + 123) = 0;
    *v10 = 0;
    result = 0xFFFFFFFFLL;
    *(_QWORD *)(v9 + 110) = 0;
  }
  return result;
}

uint64_t bssl::dtls1_dispatch_alert(bssl *this, ssl_st *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  void (*v7)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, bssl *, _QWORD);
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned int v11;
  void (*v12)(bssl *, uint64_t, _QWORD);

  v3 = bssl::dtls1_write_record((uint64_t)this, 21, (char *)(*((_QWORD *)this + 6) + 461), 2uLL);
  if ((int)v3 >= 1)
  {
    *(_WORD *)(*((_QWORD *)this + 6) + 220) &= ~0x800u;
    v4 = *((_QWORD *)this + 6);
    if (*(_BYTE *)(v4 + 461) == 2)
    {
      v5 = *((_QWORD *)this + 4);
      if (v5)
      {
        if (*(_QWORD *)v5 && (v6 = *(void (**)(void))(*(_QWORD *)v5 + 48)) != 0)
          v6();
        else
          ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 217);
      }
      v4 = *((_QWORD *)this + 6);
    }
    v7 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, bssl *, _QWORD))*((_QWORD *)this + 8);
    if (v7)
    {
      v8 = v4 + 461;
      v9 = *(_QWORD *)(v4 + 280);
      if (v9 && (*(_BYTE *)(v9 + 1569) & 4) != 0 && (*((_BYTE *)this + 164) & 1) == 0)
        v10 = (unsigned __int16 *)(*(_QWORD *)(v9 + 1512) + 4);
      else
        v10 = (unsigned __int16 *)((char *)this + 16);
      v7(1, *v10, 21, v8, 2, this, *((_QWORD *)this + 9));
      v4 = *((_QWORD *)this + 6);
    }
    v11 = *(unsigned __int16 *)(v4 + 461);
    v12 = (void (*)(bssl *, uint64_t, _QWORD))*((_QWORD *)this + 12);
    if (v12 || (v12 = *(void (**)(bssl *, uint64_t, _QWORD))(*((_QWORD *)this + 13) + 384)) != 0)
      v12(this, 16392, __rev16(v11));
  }
  return v3;
}

uint64_t ssl_ctx_make_profiles(char *a1, unint64_t **a2)
{
  char *v4;
  unint64_t *v5;
  char *v6;
  char *v7;
  size_t v8;
  int v9;
  char **v10;
  int v11;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  size_t v16;
  unint64_t *v17;
  uint64_t v18;
  size_t v19;
  unint64_t *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  size_t v24;
  unint64_t *v25;
  uint64_t v26;
  size_t v27;

  v4 = OPENSSL_sk_new_null();
  if (!v4)
  {
    ERR_put_error(16, 0, 211, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_srtp.cc", 167);
    return 0;
  }
  v5 = (unint64_t *)v4;
  do
  {
    v6 = strchr(a1, 58);
    v7 = v6;
    if (v6)
    {
      v8 = v6 - a1;
      if (v7 - a1 != 21)
        goto LABEL_5;
    }
    else
    {
      v8 = strlen(a1);
      if (v8 != 21)
      {
LABEL_5:
        if (v8 != 22)
          goto LABEL_20;
        if (!strncmp("SRTP_AES128_CM_SHA1_80", a1, 0x16uLL))
        {
          v10 = &kSRTPProfiles;
        }
        else
        {
          v9 = strncmp("SRTP_AES128_CM_SHA1_32", a1, 0x16uLL);
          v10 = &off_24C0C6D20;
          if (v9)
            goto LABEL_20;
        }
LABEL_14:
        if (!OPENSSL_sk_insert(v5, (uint64_t)v10, *v5))
          goto LABEL_21;
        goto LABEL_15;
      }
    }
    if (strncmp("SRTP_AEAD_AES_128_GCM", a1, 0x15uLL))
    {
      v11 = strncmp("SRTP_AEAD_AES_256_GCM", a1, 0x15uLL);
      v10 = &off_24C0C6D40;
      if (v11)
      {
LABEL_20:
        ERR_put_error(16, 0, 212, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/d1_srtp.cc", 179);
LABEL_21:
        v13 = v5[1];
        if (v13)
        {
          v15 = *(_QWORD *)(v13 - 8);
          v14 = (void *)(v13 - 8);
          v16 = v15 + 8;
          if (v15 != -8)
            bzero(v14, v16);
          free(v14);
        }
        v18 = *(v5 - 1);
        v17 = v5 - 1;
        v19 = v18 + 8;
        if (v18 != -8)
          bzero(v17, v19);
        free(v17);
        return 0;
      }
      goto LABEL_14;
    }
    if (!OPENSSL_sk_insert(v5, (uint64_t)&off_24C0C6D30, *v5))
      goto LABEL_21;
LABEL_15:
    a1 = v7 + 1;
  }
  while (v7);
  v20 = *a2;
  *a2 = v5;
  if (v20)
  {
    v21 = v20[1];
    if (v21)
    {
      v23 = *(_QWORD *)(v21 - 8);
      v22 = (void *)(v21 - 8);
      v24 = v23 + 8;
      if (v23 != -8)
        bzero(v22, v24);
      free(v22);
    }
    v26 = *(v20 - 1);
    v25 = v20 - 1;
    v27 = v26 + 8;
    if (v26 != -8)
      bzero(v25, v27);
    free(v25);
  }
  return 1;
}

int EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md, const unsigned __int8 *salt, const unsigned __int8 *data, int datal, int count, unsigned __int8 *key, unsigned __int8 *iv)
{
  int result;
  unsigned int v13;
  int v14;
  int iv_len;
  uint64_t final_high;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  _QWORD *v32;
  int v33;
  char *v34;
  uint64_t v35;
  size_t v36;
  int v37;
  const EVP_CIPHER *v38;
  int v39;
  uint64_t v43;
  int v44;
  void *v45[2];
  __int128 v46;
  _BYTE v47[64];
  uint64_t v48;

  v43 = *(_QWORD *)&datal;
  v48 = *MEMORY[0x24BDAC8D0];
  result = type->key_len;
  if (!data)
    return result;
  v13 = 0;
  v14 = 0;
  v38 = type;
  iv_len = type->iv_len;
  *(_OWORD *)v45 = 0u;
  v46 = 0u;
  v39 = count - 1;
  do
  {
    v44 = result;
    if (v45[0] != md)
    {
      final_high = HIDWORD(md->final);
      v17 = malloc_type_malloc(final_high + 8, 0x30772F57uLL);
      if (!v17)
      {
LABEL_45:
        ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
        result = 0;
        v32 = v45[1];
        if (!v45[1])
          goto LABEL_49;
        goto LABEL_46;
      }
      *v17 = final_high;
      v18 = v17 + 1;
      if (v45[1])
      {
        v20 = (char *)v45[1] - 8;
        v19 = *((_QWORD *)v45[1] - 1);
        if (v19 != -8)
          bzero(v20, v19 + 8);
        free(v20);
      }
      v45[0] = (void *)md;
      v45[1] = v18;
    }
    ((void (*)(void **))md->flags)(v45);
    if (v14)
      (*((void (**)(void **, _BYTE *, _QWORD))v45[0] + 3))(v45, v47, v13);
    (*((void (**)(void **, const unsigned __int8 *, uint64_t))v45[0] + 3))(v45, data, v43);
    if (salt)
      (*((void (**)(void **, const unsigned __int8 *, uint64_t))v45[0] + 3))(v45, salt, 8);
    (*((void (**)(void **, _BYTE *))v45[0] + 4))(v45, v47);
    v13 = *((_DWORD *)v45[0] + 1);
    v21 = *((unsigned int *)v45[0] + 11);
    if ((_DWORD)v21)
      bzero(v45[1], v21);
    v22 = v39;
    if (count >= 2)
    {
      do
      {
        if (v45[0] != md)
        {
          v26 = HIDWORD(md->final);
          v27 = malloc_type_malloc(v26 + 8, 0x30772F57uLL);
          if (!v27)
            goto LABEL_45;
          *v27 = v26;
          v28 = v27 + 1;
          if (v45[1])
          {
            v30 = (char *)v45[1] - 8;
            v29 = *((_QWORD *)v45[1] - 1);
            if (v29 != -8)
              bzero(v30, v29 + 8);
            free(v30);
          }
          v45[0] = (void *)md;
          v45[1] = v28;
        }
        ((void (*)(void **))md->flags)(v45);
        (*((void (**)(void **, _BYTE *, _QWORD))v45[0] + 3))(v45, v47, v13);
        (*((void (**)(void **, _BYTE *))v45[0] + 4))(v45, v47);
        v13 = *((_DWORD *)v45[0] + 1);
        v31 = *((unsigned int *)v45[0] + 11);
        if ((_DWORD)v31)
          bzero(v45[1], v31);
        --v22;
      }
      while (v22);
    }
    if (v44)
    {
      v23 = 0;
      v24 = v13;
      v25 = v44;
      do
      {
        if (v13 == v23)
        {
          result = v25;
          if (iv_len)
            goto LABEL_39;
          goto LABEL_3;
        }
        if (key)
          *key++ = v47[v23];
        ++v23;
        --v25;
      }
      while (v25);
      v24 = v44;
      result = 0;
      if (!iv_len)
        goto LABEL_3;
    }
    else
    {
      v24 = 0;
      result = 0;
      if (!iv_len)
        goto LABEL_3;
    }
LABEL_39:
    if (v24 != v13)
    {
      do
      {
        if (v13 == v24)
          break;
        if (iv)
          *iv++ = v47[v24];
        ++v24;
        --iv_len;
      }
      while (iv_len);
    }
LABEL_3:
    ++v14;
  }
  while (result | iv_len);
  result = v38->key_len;
  v32 = v45[1];
  if (!v45[1])
    goto LABEL_49;
LABEL_46:
  v33 = result;
  v35 = *(v32 - 1);
  v34 = (char *)(v32 - 1);
  v36 = v35 + 8;
  if (v35 != -8)
    bzero(v34, v36);
  free(v34);
  result = v33;
LABEL_49:
  if (*((_QWORD *)&v46 + 1))
  {
    v37 = result;
    (**((void (***)(_QWORD))&v46 + 1))(v46);
    return v37;
  }
  return result;
}

uint64_t DES_set_key_ex(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  char v17;
  unsigned int v18;
  char v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t result;

  v2 = 0;
  v3 = a1[1];
  v4 = (*a1 ^ (v3 >> 4)) & 0xF0F0F0F;
  v5 = ((v4 ^ *a1 ^ ((v4 ^ *a1) << 18)) & 0xCCCC0000 | (((v4 ^ *a1 ^ ((v4 ^ *a1) << 18)) & 0xCCCC0000) >> 18)) ^ v4 ^ *a1;
  v6 = ((v3 ^ (16 * v4) ^ ((v3 ^ (16 * v4)) << 18)) & 0xCCCC0000 | (((v3 ^ (16 * v4) ^ ((v3 ^ (16 * v4)) << 18)) & 0xCCCC0000) >> 18)) ^ v3 ^ (16 * v4);
  v7 = (v5 ^ (v6 >> 1)) & 0x55555555;
  v8 = v7 ^ v5;
  v9 = v6 ^ (2 * v7);
  v10 = (v9 ^ (v8 >> 8)) & 0xFF00FF;
  v11 = v10 ^ v9;
  v12 = v8 ^ (v10 << 8);
  v13 = (v12 ^ (v11 >> 1)) & 0x55555555;
  v14 = v13 ^ v12;
  v15 = (v14 >> 4) & 0xF000000 | (v11 ^ (2 * v13)) & 0xFF00 | ((v11 ^ (2 * v13)) << 16) | ((v11 ^ (2 * v13)) >> 16);
  v16 = (_DWORD *)(a2 + 4);
  do
  {
    if (((0x8103uLL >> v2) & 1) != 0)
      v17 = 1;
    else
      v17 = 2;
    v18 = (v14 & 0xFFFFFFF) >> v17;
    if (((0x8103uLL >> v2) & 1) != 0)
      v19 = 27;
    else
      v19 = 26;
    v20 = v15 >> v17;
    v14 = v18 | (v14 << v19);
    v21 = v20 | (v15 << v19);
    v15 = v21 & 0xFFFFFFF;
    v22 = des_skb[((v18 >> 7) & 0x3C | (v18 >> 6)) + 64] | des_skb[v18 & 0x3F] | des_skb[((v18 >> 14) & 0x30 | (v18 >> 13) & 0xF) + 128] | des_skb[((v18 >> 21) & 6 | (v18 >> 20) & 1 | (v14 >> 22) & 0x38) + 192];
    v23 = des_skb[((v20 >> 8) & 0x3C | (v20 >> 7) & 3) + 320] | des_skb[(v20 & 0x3F) + 256] | des_skb[((v20 >> 15) & 0x3F) + 384] | des_skb[((v21 >> 22) & 0x30 | (v20 >> 21) & 0xF) + 448];
    HIDWORD(v24) = v23 << 16;
    LODWORD(v24) = v23 << 16;
    v25 = (v24 >> 30) | (4 * (unsigned __int16)v22);
    result = v23 & 0x3FF0000 | HIWORD(v22);
    HIDWORD(v24) = v23 & 0x3FF0000 | HIWORD(v22);
    LODWORD(v24) = v23;
    *(v16 - 1) = v25;
    *v16 = v24 >> 26;
    ++v2;
    v16 += 2;
  }
  while (v2 != 16);
  return result;
}

void DES_encrypt3(unsigned int *data, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;

  v7 = data[1];
  v8 = (*data ^ (v7 >> 4)) & 0xF0F0F0F;
  v9 = v8 ^ *data;
  v10 = v7 ^ (16 * v8);
  v11 = (unsigned __int16)v10 ^ HIWORD(v9);
  v12 = v11 ^ v10;
  v13 = v9 ^ (v11 << 16);
  v14 = (v13 ^ (v12 >> 2)) & 0x33333333;
  v15 = v14 ^ v13;
  v16 = v12 ^ (4 * v14);
  v17 = (v16 ^ (v15 >> 8)) & 0xFF00FF;
  v18 = v17 ^ v16;
  v19 = v15 ^ (v17 << 8);
  v20 = (v19 ^ (v18 >> 1)) & 0x55555555;
  *data = v20 ^ v19;
  data[1] = v18 ^ (2 * v20);
  DES_encrypt2(data, ks1, 1);
  DES_encrypt2(data, ks2, 0);
  DES_encrypt2(data, ks3, 1);
  v21 = data[1];
  v22 = (*data ^ (v21 >> 1)) & 0x55555555;
  v23 = v22 ^ *data;
  v24 = v21 ^ (2 * v22);
  v25 = (v24 ^ (v23 >> 8)) & 0xFF00FF;
  v26 = v25 ^ v24;
  v27 = v23 ^ (v25 << 8);
  v28 = (v27 ^ (v26 >> 2)) & 0x33333333;
  v29 = v28 ^ v27;
  v30 = v26 ^ (4 * v28);
  v31 = (unsigned __int16)v30 ^ HIWORD(v29);
  v32 = v31 ^ v30;
  v33 = v29 ^ (v31 << 16);
  v34 = (v33 ^ (v32 >> 4)) & 0xF0F0F0F;
  *data = v34 ^ v33;
  data[1] = v32 ^ (16 * v34);
}

void DES_encrypt2(unsigned int *data, DES_key_schedule *ks, int enc)
{
  int v3;
  unint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unint64_t v98;
  unsigned int v99;

  HIDWORD(v4) = *data;
  LODWORD(v4) = *data;
  v3 = v4 >> 29;
  HIDWORD(v4) = data[1];
  LODWORD(v4) = HIDWORD(v4);
  v5 = v4 >> 29;
  if (enc)
  {
    v6 = ks->ks[0].deslong[0] ^ v3;
    HIDWORD(v8) = ks->ks[0].deslong[1] ^ v3;
    LODWORD(v8) = HIDWORD(v8);
    v7 = v8 >> 4;
    v9 = DES_SPtrans[v6 >> 2] ^ DES_SPtrans[((unsigned __int16)v6 >> 10) + 128] ^ DES_SPtrans[((v6 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v6 >> 26) + 384] ^ DES_SPtrans[(v7 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v7 >> 10) + 192] ^ DES_SPtrans[((v7 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v7 >> 26) + 448] ^ v5;
    v10 = v9 ^ ks->ks[1].deslong[0];
    HIDWORD(v8) = v9 ^ ks->ks[1].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v11 = v8 >> 4;
    v12 = DES_SPtrans[v10 >> 2] ^ DES_SPtrans[((unsigned __int16)v10 >> 10) + 128] ^ DES_SPtrans[((v10 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v10 >> 26) + 384] ^ DES_SPtrans[(v11 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v11 >> 10) + 192] ^ DES_SPtrans[((v11 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v11 >> 26) + 448] ^ v3;
    v13 = v12 ^ ks->ks[2].deslong[0];
    HIDWORD(v8) = v12 ^ ks->ks[2].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v14 = v8 >> 4;
    v15 = DES_SPtrans[v13 >> 2] ^ DES_SPtrans[((unsigned __int16)v13 >> 10) + 128] ^ DES_SPtrans[((v13 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v13 >> 26) + 384] ^ DES_SPtrans[(v14 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v14 >> 10) + 192] ^ DES_SPtrans[((v14 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v14 >> 26) + 448] ^ v9;
    v16 = v15 ^ ks->ks[3].deslong[0];
    HIDWORD(v8) = v15 ^ ks->ks[3].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v17 = v8 >> 4;
    v18 = DES_SPtrans[v16 >> 2] ^ DES_SPtrans[((unsigned __int16)v16 >> 10) + 128] ^ DES_SPtrans[((v16 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v16 >> 26) + 384] ^ DES_SPtrans[(v17 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v17 >> 10) + 192] ^ DES_SPtrans[((v17 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v17 >> 26) + 448] ^ v12;
    v19 = v18 ^ ks->ks[4].deslong[0];
    HIDWORD(v8) = v18 ^ ks->ks[4].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v20 = v8 >> 4;
    v21 = DES_SPtrans[v19 >> 2] ^ DES_SPtrans[((unsigned __int16)v19 >> 10) + 128] ^ DES_SPtrans[((v19 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v19 >> 26) + 384] ^ DES_SPtrans[(v20 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v20 >> 10) + 192] ^ DES_SPtrans[((v20 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v20 >> 26) + 448] ^ v15;
    v22 = v21 ^ ks->ks[5].deslong[0];
    HIDWORD(v8) = v21 ^ ks->ks[5].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v23 = v8 >> 4;
    v24 = DES_SPtrans[v22 >> 2] ^ DES_SPtrans[((unsigned __int16)v22 >> 10) + 128] ^ DES_SPtrans[((v22 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v22 >> 26) + 384] ^ DES_SPtrans[(v23 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v23 >> 10) + 192] ^ DES_SPtrans[((v23 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v23 >> 26) + 448] ^ v18;
    v25 = v24 ^ ks->ks[6].deslong[0];
    HIDWORD(v8) = v24 ^ ks->ks[6].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v26 = v8 >> 4;
    v27 = DES_SPtrans[v25 >> 2] ^ DES_SPtrans[((unsigned __int16)v25 >> 10) + 128] ^ DES_SPtrans[((v25 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v25 >> 26) + 384] ^ DES_SPtrans[(v26 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v26 >> 10) + 192] ^ DES_SPtrans[((v26 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v26 >> 26) + 448] ^ v21;
    v28 = v27 ^ ks->ks[7].deslong[0];
    HIDWORD(v8) = v27 ^ ks->ks[7].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v29 = v8 >> 4;
    v30 = DES_SPtrans[v28 >> 2] ^ DES_SPtrans[((unsigned __int16)v28 >> 10) + 128] ^ DES_SPtrans[((v28 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v28 >> 26) + 384] ^ DES_SPtrans[(v29 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v29 >> 10) + 192] ^ DES_SPtrans[((v29 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v29 >> 26) + 448] ^ v24;
    v31 = v30 ^ ks->ks[8].deslong[0];
    HIDWORD(v8) = v30 ^ ks->ks[8].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v32 = v8 >> 4;
    v33 = DES_SPtrans[v31 >> 2] ^ DES_SPtrans[((unsigned __int16)v31 >> 10) + 128] ^ DES_SPtrans[((v31 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v31 >> 26) + 384] ^ DES_SPtrans[(v32 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v32 >> 10) + 192] ^ DES_SPtrans[((v32 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v32 >> 26) + 448] ^ v27;
    v34 = v33 ^ ks->ks[9].deslong[0];
    HIDWORD(v8) = v33 ^ ks->ks[9].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v35 = v8 >> 4;
    v36 = DES_SPtrans[v34 >> 2] ^ DES_SPtrans[((unsigned __int16)v34 >> 10) + 128] ^ DES_SPtrans[((v34 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v34 >> 26) + 384] ^ DES_SPtrans[(v35 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v35 >> 10) + 192] ^ DES_SPtrans[((v35 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v35 >> 26) + 448] ^ v30;
    v37 = v36 ^ ks->ks[10].deslong[0];
    HIDWORD(v8) = v36 ^ ks->ks[10].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v38 = v8 >> 4;
    v39 = DES_SPtrans[v37 >> 2] ^ DES_SPtrans[((unsigned __int16)v37 >> 10) + 128] ^ DES_SPtrans[((v37 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v37 >> 26) + 384] ^ DES_SPtrans[(v38 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v38 >> 10) + 192] ^ DES_SPtrans[((v38 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v38 >> 26) + 448] ^ v33;
    v40 = v39 ^ ks->ks[11].deslong[0];
    HIDWORD(v8) = v39 ^ ks->ks[11].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v41 = v8 >> 4;
    v42 = DES_SPtrans[v40 >> 2] ^ DES_SPtrans[((unsigned __int16)v40 >> 10) + 128] ^ DES_SPtrans[((v40 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v40 >> 26) + 384] ^ DES_SPtrans[(v41 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v41 >> 10) + 192] ^ DES_SPtrans[((v41 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v41 >> 26) + 448] ^ v36;
    v43 = v42 ^ ks->ks[12].deslong[0];
    HIDWORD(v8) = v42 ^ ks->ks[12].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v44 = v8 >> 4;
    v45 = DES_SPtrans[v43 >> 2] ^ DES_SPtrans[((unsigned __int16)v43 >> 10) + 128] ^ DES_SPtrans[((v43 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v43 >> 26) + 384] ^ DES_SPtrans[(v44 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v44 >> 10) + 192] ^ DES_SPtrans[((v44 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v44 >> 26) + 448] ^ v39;
    v46 = v45 ^ ks->ks[13].deslong[0];
    HIDWORD(v8) = v45 ^ ks->ks[13].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v47 = v8 >> 4;
    v48 = DES_SPtrans[v46 >> 2] ^ DES_SPtrans[((unsigned __int16)v46 >> 10) + 128] ^ DES_SPtrans[((v46 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v46 >> 26) + 384] ^ DES_SPtrans[(v47 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v47 >> 10) + 192] ^ DES_SPtrans[((v47 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v47 >> 26) + 448] ^ v42;
    v49 = v48 ^ ks->ks[14].deslong[0];
    HIDWORD(v8) = v48 ^ ks->ks[14].deslong[1];
    LODWORD(v8) = HIDWORD(v8);
    v50 = DES_SPtrans[v49 >> 2] ^ DES_SPtrans[((unsigned __int16)v49 >> 10) + 128] ^ DES_SPtrans[((v49 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v49 >> 26) + 384] ^ DES_SPtrans[((v8 >> 4) >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)(v8 >> 4) >> 10) + 192] ^ DES_SPtrans[(((v8 >> 4) >> 18) & 0x3F) + 320] ^ DES_SPtrans[((v8 >> 4) >> 26) + 448] ^ v45;
    v51 = ks->ks[15].deslong[0];
    v52 = ks->ks[15].deslong[1];
  }
  else
  {
    v53 = ks->ks[15].deslong[0] ^ v3;
    HIDWORD(v55) = ks->ks[15].deslong[1] ^ v3;
    LODWORD(v55) = HIDWORD(v55);
    v54 = v55 >> 4;
    v56 = DES_SPtrans[v53 >> 2] ^ DES_SPtrans[((unsigned __int16)v53 >> 10) + 128] ^ DES_SPtrans[((v53 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v53 >> 26) + 384] ^ DES_SPtrans[(v54 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v54 >> 10) + 192] ^ DES_SPtrans[((v54 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v54 >> 26) + 448] ^ v5;
    v57 = v56 ^ ks->ks[14].deslong[0];
    HIDWORD(v55) = v56 ^ ks->ks[14].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v58 = v55 >> 4;
    v59 = DES_SPtrans[v57 >> 2] ^ DES_SPtrans[((unsigned __int16)v57 >> 10) + 128] ^ DES_SPtrans[((v57 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v57 >> 26) + 384] ^ DES_SPtrans[(v58 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v58 >> 10) + 192] ^ DES_SPtrans[((v58 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v58 >> 26) + 448] ^ v3;
    v60 = v59 ^ ks->ks[13].deslong[0];
    HIDWORD(v55) = v59 ^ ks->ks[13].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v61 = v55 >> 4;
    v62 = DES_SPtrans[v60 >> 2] ^ DES_SPtrans[((unsigned __int16)v60 >> 10) + 128] ^ DES_SPtrans[((v60 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v60 >> 26) + 384] ^ DES_SPtrans[(v61 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v61 >> 10) + 192] ^ DES_SPtrans[((v61 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v61 >> 26) + 448] ^ v56;
    v63 = v62 ^ ks->ks[12].deslong[0];
    HIDWORD(v55) = v62 ^ ks->ks[12].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v64 = v55 >> 4;
    v65 = DES_SPtrans[v63 >> 2] ^ DES_SPtrans[((unsigned __int16)v63 >> 10) + 128] ^ DES_SPtrans[((v63 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v63 >> 26) + 384] ^ DES_SPtrans[(v64 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v64 >> 10) + 192] ^ DES_SPtrans[((v64 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v64 >> 26) + 448] ^ v59;
    v66 = v65 ^ ks->ks[11].deslong[0];
    HIDWORD(v55) = v65 ^ ks->ks[11].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v67 = v55 >> 4;
    v68 = DES_SPtrans[v66 >> 2] ^ DES_SPtrans[((unsigned __int16)v66 >> 10) + 128] ^ DES_SPtrans[((v66 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v66 >> 26) + 384] ^ DES_SPtrans[(v67 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v67 >> 10) + 192] ^ DES_SPtrans[((v67 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v67 >> 26) + 448] ^ v62;
    v69 = v68 ^ ks->ks[10].deslong[0];
    HIDWORD(v55) = v68 ^ ks->ks[10].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v70 = v55 >> 4;
    v71 = DES_SPtrans[v69 >> 2] ^ DES_SPtrans[((unsigned __int16)v69 >> 10) + 128] ^ DES_SPtrans[((v69 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v69 >> 26) + 384] ^ DES_SPtrans[(v70 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v70 >> 10) + 192] ^ DES_SPtrans[((v70 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v70 >> 26) + 448] ^ v65;
    v72 = v71 ^ ks->ks[9].deslong[0];
    HIDWORD(v55) = v71 ^ ks->ks[9].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v73 = v55 >> 4;
    v74 = DES_SPtrans[v72 >> 2] ^ DES_SPtrans[((unsigned __int16)v72 >> 10) + 128] ^ DES_SPtrans[((v72 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v72 >> 26) + 384] ^ DES_SPtrans[(v73 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v73 >> 10) + 192] ^ DES_SPtrans[((v73 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v73 >> 26) + 448] ^ v68;
    v75 = v74 ^ ks->ks[8].deslong[0];
    HIDWORD(v55) = v74 ^ ks->ks[8].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v76 = v55 >> 4;
    v77 = DES_SPtrans[v75 >> 2] ^ DES_SPtrans[((unsigned __int16)v75 >> 10) + 128] ^ DES_SPtrans[((v75 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v75 >> 26) + 384] ^ DES_SPtrans[(v76 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v76 >> 10) + 192] ^ DES_SPtrans[((v76 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v76 >> 26) + 448] ^ v71;
    v78 = v77 ^ ks->ks[7].deslong[0];
    HIDWORD(v55) = v77 ^ ks->ks[7].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v79 = v55 >> 4;
    v80 = DES_SPtrans[v78 >> 2] ^ DES_SPtrans[((unsigned __int16)v78 >> 10) + 128] ^ DES_SPtrans[((v78 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v78 >> 26) + 384] ^ DES_SPtrans[(v79 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v79 >> 10) + 192] ^ DES_SPtrans[((v79 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v79 >> 26) + 448] ^ v74;
    v81 = v80 ^ ks->ks[6].deslong[0];
    HIDWORD(v55) = v80 ^ ks->ks[6].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v82 = v55 >> 4;
    v83 = DES_SPtrans[v81 >> 2] ^ DES_SPtrans[((unsigned __int16)v81 >> 10) + 128] ^ DES_SPtrans[((v81 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v81 >> 26) + 384] ^ DES_SPtrans[(v82 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v82 >> 10) + 192] ^ DES_SPtrans[((v82 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v82 >> 26) + 448] ^ v77;
    v84 = v83 ^ ks->ks[5].deslong[0];
    HIDWORD(v55) = v83 ^ ks->ks[5].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v85 = v55 >> 4;
    v86 = DES_SPtrans[v84 >> 2] ^ DES_SPtrans[((unsigned __int16)v84 >> 10) + 128] ^ DES_SPtrans[((v84 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v84 >> 26) + 384] ^ DES_SPtrans[(v85 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v85 >> 10) + 192] ^ DES_SPtrans[((v85 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v85 >> 26) + 448] ^ v80;
    v87 = v86 ^ ks->ks[4].deslong[0];
    HIDWORD(v55) = v86 ^ ks->ks[4].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v88 = v55 >> 4;
    v89 = DES_SPtrans[v87 >> 2] ^ DES_SPtrans[((unsigned __int16)v87 >> 10) + 128] ^ DES_SPtrans[((v87 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v87 >> 26) + 384] ^ DES_SPtrans[(v88 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v88 >> 10) + 192] ^ DES_SPtrans[((v88 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v88 >> 26) + 448] ^ v83;
    v90 = v89 ^ ks->ks[3].deslong[0];
    HIDWORD(v55) = v89 ^ ks->ks[3].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v91 = v55 >> 4;
    v92 = DES_SPtrans[v90 >> 2] ^ DES_SPtrans[((unsigned __int16)v90 >> 10) + 128] ^ DES_SPtrans[((v90 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v90 >> 26) + 384] ^ DES_SPtrans[(v91 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v91 >> 10) + 192] ^ DES_SPtrans[((v91 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v91 >> 26) + 448] ^ v86;
    v93 = v92 ^ ks->ks[2].deslong[0];
    HIDWORD(v55) = v92 ^ ks->ks[2].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v94 = v55 >> 4;
    v48 = DES_SPtrans[v93 >> 2] ^ DES_SPtrans[((unsigned __int16)v93 >> 10) + 128] ^ DES_SPtrans[((v93 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v93 >> 26) + 384] ^ DES_SPtrans[(v94 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v94 >> 10) + 192] ^ DES_SPtrans[((v94 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v94 >> 26) + 448] ^ v89;
    v95 = v48 ^ ks->ks[1].deslong[0];
    HIDWORD(v55) = v48 ^ ks->ks[1].deslong[1];
    LODWORD(v55) = HIDWORD(v55);
    v50 = DES_SPtrans[v95 >> 2] ^ DES_SPtrans[((unsigned __int16)v95 >> 10) + 128] ^ DES_SPtrans[((v95 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v95 >> 26) + 384] ^ DES_SPtrans[((v55 >> 4) >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)(v55 >> 4) >> 10) + 192] ^ DES_SPtrans[(((v55 >> 4) >> 18) & 0x3F) + 320] ^ DES_SPtrans[((v55 >> 4) >> 26) + 448] ^ v92;
    v51 = ks->ks[0].deslong[0];
    v52 = ks->ks[0].deslong[1];
  }
  v96 = v50 ^ v51;
  HIDWORD(v98) = v50 ^ v52;
  LODWORD(v98) = v50 ^ v52;
  v97 = v98 >> 4;
  HIDWORD(v98) = v50;
  LODWORD(v98) = v50;
  v99 = v98 >> 3;
  HIDWORD(v98) = DES_SPtrans[v96 >> 2] ^ v48 ^ DES_SPtrans[((unsigned __int16)v96 >> 10) + 128] ^ DES_SPtrans[((v96 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v96 >> 26) + 384] ^ DES_SPtrans[(v97 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v97 >> 10) + 192] ^ DES_SPtrans[((v97 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v97 >> 26) + 448];
  LODWORD(v98) = HIDWORD(v98);
  *data = v99;
  data[1] = v98 >> 3;
}

void DES_decrypt3(unsigned int *data, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3)
{
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned int v32;
  int v33;
  int v34;

  v7 = data[1];
  v8 = (*data ^ (v7 >> 4)) & 0xF0F0F0F;
  v9 = v8 ^ *data;
  v10 = v7 ^ (16 * v8);
  v11 = (unsigned __int16)v10 ^ HIWORD(v9);
  v12 = v11 ^ v10;
  v13 = v9 ^ (v11 << 16);
  v14 = (v13 ^ (v12 >> 2)) & 0x33333333;
  v15 = v14 ^ v13;
  v16 = v12 ^ (4 * v14);
  v17 = (v16 ^ (v15 >> 8)) & 0xFF00FF;
  v18 = v17 ^ v16;
  v19 = v15 ^ (v17 << 8);
  v20 = (v19 ^ (v18 >> 1)) & 0x55555555;
  *data = v20 ^ v19;
  data[1] = v18 ^ (2 * v20);
  DES_encrypt2(data, ks3, 0);
  DES_encrypt2(data, ks2, 1);
  DES_encrypt2(data, ks1, 0);
  v21 = data[1];
  v22 = (*data ^ (v21 >> 1)) & 0x55555555;
  v23 = v22 ^ *data;
  v24 = v21 ^ (2 * v22);
  v25 = (v24 ^ (v23 >> 8)) & 0xFF00FF;
  v26 = v25 ^ v24;
  v27 = v23 ^ (v25 << 8);
  v28 = (v27 ^ (v26 >> 2)) & 0x33333333;
  v29 = v28 ^ v27;
  v30 = v26 ^ (4 * v28);
  v31 = (unsigned __int16)v30 ^ HIWORD(v29);
  v32 = v31 ^ v30;
  v33 = v29 ^ (v31 << 16);
  v34 = (v33 ^ (v32 >> 4)) & 0xF0F0F0F;
  *data = v34 ^ v33;
  data[1] = v32 ^ (16 * v34);
}

void DES_encrypt1(unsigned int *data, DES_key_schedule *ks, int enc)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unsigned int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  unsigned int v86;
  unsigned int v87;
  int v88;
  unsigned int v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  unsigned int v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned int v116;
  int v117;
  int v118;
  unsigned int v119;
  int v120;
  int v121;
  unsigned int v122;
  int v123;
  int v124;
  unsigned int v125;
  int v126;
  int v127;

  v3 = data[1];
  v4 = (*data ^ (v3 >> 4)) & 0xF0F0F0F;
  v5 = v4 ^ *data;
  v6 = v3 ^ (16 * v4);
  v7 = (unsigned __int16)v6 ^ HIWORD(v5);
  v8 = v7 ^ v6;
  v9 = v5 ^ (v7 << 16);
  v10 = (v9 ^ (v8 >> 2)) & 0x33333333;
  v11 = v10 ^ v9;
  v12 = v8 ^ (4 * v10);
  v13 = (v12 ^ (v11 >> 8)) & 0xFF00FF;
  v14 = v13 ^ v12;
  v15 = v11 ^ (v13 << 8);
  v16 = (v15 ^ (v14 >> 1)) & 0x55555555;
  HIDWORD(v18) = v16 ^ v15;
  LODWORD(v18) = v16 ^ v15;
  v17 = v18 >> 29;
  HIDWORD(v18) = v14 ^ (2 * v16);
  LODWORD(v18) = HIDWORD(v18);
  v19 = v18 >> 29;
  if (enc)
  {
    v20 = ks->ks[0].deslong[0] ^ v17;
    HIDWORD(v22) = ks->ks[0].deslong[1] ^ v17;
    LODWORD(v22) = HIDWORD(v22);
    v21 = v22 >> 4;
    v23 = DES_SPtrans[v20 >> 2] ^ DES_SPtrans[((unsigned __int16)v20 >> 10) + 128] ^ DES_SPtrans[((v20 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v20 >> 26) + 384] ^ DES_SPtrans[(v21 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v21 >> 10) + 192] ^ DES_SPtrans[((v21 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v21 >> 26) + 448] ^ v19;
    v24 = v23 ^ ks->ks[1].deslong[0];
    HIDWORD(v22) = v23 ^ ks->ks[1].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v25 = v22 >> 4;
    v26 = DES_SPtrans[v24 >> 2] ^ DES_SPtrans[((unsigned __int16)v24 >> 10) + 128] ^ DES_SPtrans[((v24 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v24 >> 26) + 384] ^ DES_SPtrans[(v25 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v25 >> 10) + 192] ^ DES_SPtrans[((v25 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v25 >> 26) + 448] ^ v17;
    v27 = v26 ^ ks->ks[2].deslong[0];
    HIDWORD(v22) = v26 ^ ks->ks[2].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v28 = v22 >> 4;
    v29 = DES_SPtrans[v27 >> 2] ^ DES_SPtrans[((unsigned __int16)v27 >> 10) + 128] ^ DES_SPtrans[((v27 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v27 >> 26) + 384] ^ DES_SPtrans[(v28 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v28 >> 10) + 192] ^ DES_SPtrans[((v28 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v28 >> 26) + 448] ^ v23;
    v30 = v29 ^ ks->ks[3].deslong[0];
    HIDWORD(v22) = v29 ^ ks->ks[3].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v31 = v22 >> 4;
    v32 = DES_SPtrans[v30 >> 2] ^ DES_SPtrans[((unsigned __int16)v30 >> 10) + 128] ^ DES_SPtrans[((v30 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v30 >> 26) + 384] ^ DES_SPtrans[(v31 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v31 >> 10) + 192] ^ DES_SPtrans[((v31 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v31 >> 26) + 448] ^ v26;
    v33 = v32 ^ ks->ks[4].deslong[0];
    HIDWORD(v22) = v32 ^ ks->ks[4].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v34 = v22 >> 4;
    v35 = DES_SPtrans[v33 >> 2] ^ DES_SPtrans[((unsigned __int16)v33 >> 10) + 128] ^ DES_SPtrans[((v33 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v33 >> 26) + 384] ^ DES_SPtrans[(v34 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v34 >> 10) + 192] ^ DES_SPtrans[((v34 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v34 >> 26) + 448] ^ v29;
    v36 = v35 ^ ks->ks[5].deslong[0];
    HIDWORD(v22) = v35 ^ ks->ks[5].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v37 = v22 >> 4;
    v38 = DES_SPtrans[v36 >> 2] ^ DES_SPtrans[((unsigned __int16)v36 >> 10) + 128] ^ DES_SPtrans[((v36 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v36 >> 26) + 384] ^ DES_SPtrans[(v37 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v37 >> 10) + 192] ^ DES_SPtrans[((v37 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v37 >> 26) + 448] ^ v32;
    v39 = v38 ^ ks->ks[6].deslong[0];
    HIDWORD(v22) = v38 ^ ks->ks[6].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v40 = v22 >> 4;
    v41 = DES_SPtrans[v39 >> 2] ^ DES_SPtrans[((unsigned __int16)v39 >> 10) + 128] ^ DES_SPtrans[((v39 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v39 >> 26) + 384] ^ DES_SPtrans[(v40 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v40 >> 10) + 192] ^ DES_SPtrans[((v40 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v40 >> 26) + 448] ^ v35;
    v42 = v41 ^ ks->ks[7].deslong[0];
    HIDWORD(v22) = v41 ^ ks->ks[7].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v43 = v22 >> 4;
    v44 = DES_SPtrans[v42 >> 2] ^ DES_SPtrans[((unsigned __int16)v42 >> 10) + 128] ^ DES_SPtrans[((v42 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v42 >> 26) + 384] ^ DES_SPtrans[(v43 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v43 >> 10) + 192] ^ DES_SPtrans[((v43 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v43 >> 26) + 448] ^ v38;
    v45 = v44 ^ ks->ks[8].deslong[0];
    HIDWORD(v22) = v44 ^ ks->ks[8].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v46 = v22 >> 4;
    v47 = DES_SPtrans[v45 >> 2] ^ DES_SPtrans[((unsigned __int16)v45 >> 10) + 128] ^ DES_SPtrans[((v45 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v45 >> 26) + 384] ^ DES_SPtrans[(v46 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v46 >> 10) + 192] ^ DES_SPtrans[((v46 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v46 >> 26) + 448] ^ v41;
    v48 = v47 ^ ks->ks[9].deslong[0];
    HIDWORD(v22) = v47 ^ ks->ks[9].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v49 = v22 >> 4;
    v50 = DES_SPtrans[v48 >> 2] ^ DES_SPtrans[((unsigned __int16)v48 >> 10) + 128] ^ DES_SPtrans[((v48 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v48 >> 26) + 384] ^ DES_SPtrans[(v49 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v49 >> 10) + 192] ^ DES_SPtrans[((v49 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v49 >> 26) + 448] ^ v44;
    v51 = v50 ^ ks->ks[10].deslong[0];
    HIDWORD(v22) = v50 ^ ks->ks[10].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v52 = v22 >> 4;
    v53 = DES_SPtrans[v51 >> 2] ^ DES_SPtrans[((unsigned __int16)v51 >> 10) + 128] ^ DES_SPtrans[((v51 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v51 >> 26) + 384] ^ DES_SPtrans[(v52 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v52 >> 10) + 192] ^ DES_SPtrans[((v52 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v52 >> 26) + 448] ^ v47;
    v54 = v53 ^ ks->ks[11].deslong[0];
    HIDWORD(v22) = v53 ^ ks->ks[11].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v55 = v22 >> 4;
    v56 = DES_SPtrans[v54 >> 2] ^ DES_SPtrans[((unsigned __int16)v54 >> 10) + 128] ^ DES_SPtrans[((v54 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v54 >> 26) + 384] ^ DES_SPtrans[(v55 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v55 >> 10) + 192] ^ DES_SPtrans[((v55 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v55 >> 26) + 448] ^ v50;
    v57 = v56 ^ ks->ks[12].deslong[0];
    HIDWORD(v22) = v56 ^ ks->ks[12].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v58 = v22 >> 4;
    v59 = DES_SPtrans[v57 >> 2] ^ DES_SPtrans[((unsigned __int16)v57 >> 10) + 128] ^ DES_SPtrans[((v57 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v57 >> 26) + 384] ^ DES_SPtrans[(v58 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v58 >> 10) + 192] ^ DES_SPtrans[((v58 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v58 >> 26) + 448] ^ v53;
    v60 = v59 ^ ks->ks[13].deslong[0];
    HIDWORD(v22) = v59 ^ ks->ks[13].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v61 = v22 >> 4;
    v62 = DES_SPtrans[v60 >> 2] ^ DES_SPtrans[((unsigned __int16)v60 >> 10) + 128] ^ DES_SPtrans[((v60 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v60 >> 26) + 384] ^ DES_SPtrans[(v61 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v61 >> 10) + 192] ^ DES_SPtrans[((v61 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v61 >> 26) + 448] ^ v56;
    v63 = v62 ^ ks->ks[14].deslong[0];
    HIDWORD(v22) = v62 ^ ks->ks[14].deslong[1];
    LODWORD(v22) = HIDWORD(v22);
    v64 = DES_SPtrans[v63 >> 2] ^ DES_SPtrans[((unsigned __int16)v63 >> 10) + 128] ^ DES_SPtrans[((v63 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v63 >> 26) + 384] ^ DES_SPtrans[((v22 >> 4) >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)(v22 >> 4) >> 10) + 192] ^ DES_SPtrans[(((v22 >> 4) >> 18) & 0x3F) + 320] ^ DES_SPtrans[((v22 >> 4) >> 26) + 448] ^ v59;
    v65 = ks->ks[15].deslong[0];
    v66 = ks->ks[15].deslong[1];
  }
  else
  {
    v67 = ks->ks[15].deslong[0] ^ v17;
    HIDWORD(v69) = ks->ks[15].deslong[1] ^ v17;
    LODWORD(v69) = HIDWORD(v69);
    v68 = v69 >> 4;
    v70 = DES_SPtrans[v67 >> 2] ^ DES_SPtrans[((unsigned __int16)v67 >> 10) + 128] ^ DES_SPtrans[((v67 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v67 >> 26) + 384] ^ DES_SPtrans[(v68 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v68 >> 10) + 192] ^ DES_SPtrans[((v68 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v68 >> 26) + 448] ^ v19;
    v71 = v70 ^ ks->ks[14].deslong[0];
    HIDWORD(v69) = v70 ^ ks->ks[14].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v72 = v69 >> 4;
    v73 = DES_SPtrans[v71 >> 2] ^ DES_SPtrans[((unsigned __int16)v71 >> 10) + 128] ^ DES_SPtrans[((v71 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v71 >> 26) + 384] ^ DES_SPtrans[(v72 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v72 >> 10) + 192] ^ DES_SPtrans[((v72 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v72 >> 26) + 448] ^ v17;
    v74 = v73 ^ ks->ks[13].deslong[0];
    HIDWORD(v69) = v73 ^ ks->ks[13].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v75 = v69 >> 4;
    v76 = DES_SPtrans[v74 >> 2] ^ DES_SPtrans[((unsigned __int16)v74 >> 10) + 128] ^ DES_SPtrans[((v74 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v74 >> 26) + 384] ^ DES_SPtrans[(v75 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v75 >> 10) + 192] ^ DES_SPtrans[((v75 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v75 >> 26) + 448] ^ v70;
    v77 = v76 ^ ks->ks[12].deslong[0];
    HIDWORD(v69) = v76 ^ ks->ks[12].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v78 = v69 >> 4;
    v79 = DES_SPtrans[v77 >> 2] ^ DES_SPtrans[((unsigned __int16)v77 >> 10) + 128] ^ DES_SPtrans[((v77 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v77 >> 26) + 384] ^ DES_SPtrans[(v78 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v78 >> 10) + 192] ^ DES_SPtrans[((v78 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v78 >> 26) + 448] ^ v73;
    v80 = v79 ^ ks->ks[11].deslong[0];
    HIDWORD(v69) = v79 ^ ks->ks[11].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v81 = v69 >> 4;
    v82 = DES_SPtrans[v80 >> 2] ^ DES_SPtrans[((unsigned __int16)v80 >> 10) + 128] ^ DES_SPtrans[((v80 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v80 >> 26) + 384] ^ DES_SPtrans[(v81 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v81 >> 10) + 192] ^ DES_SPtrans[((v81 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v81 >> 26) + 448] ^ v76;
    v83 = v82 ^ ks->ks[10].deslong[0];
    HIDWORD(v69) = v82 ^ ks->ks[10].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v84 = v69 >> 4;
    v85 = DES_SPtrans[v83 >> 2] ^ DES_SPtrans[((unsigned __int16)v83 >> 10) + 128] ^ DES_SPtrans[((v83 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v83 >> 26) + 384] ^ DES_SPtrans[(v84 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v84 >> 10) + 192] ^ DES_SPtrans[((v84 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v84 >> 26) + 448] ^ v79;
    v86 = v85 ^ ks->ks[9].deslong[0];
    HIDWORD(v69) = v85 ^ ks->ks[9].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v87 = v69 >> 4;
    v88 = DES_SPtrans[v86 >> 2] ^ DES_SPtrans[((unsigned __int16)v86 >> 10) + 128] ^ DES_SPtrans[((v86 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v86 >> 26) + 384] ^ DES_SPtrans[(v87 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v87 >> 10) + 192] ^ DES_SPtrans[((v87 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v87 >> 26) + 448] ^ v82;
    v89 = v88 ^ ks->ks[8].deslong[0];
    HIDWORD(v69) = v88 ^ ks->ks[8].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v90 = v69 >> 4;
    v91 = DES_SPtrans[v89 >> 2] ^ DES_SPtrans[((unsigned __int16)v89 >> 10) + 128] ^ DES_SPtrans[((v89 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v89 >> 26) + 384] ^ DES_SPtrans[(v90 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v90 >> 10) + 192] ^ DES_SPtrans[((v90 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v90 >> 26) + 448] ^ v85;
    v92 = v91 ^ ks->ks[7].deslong[0];
    HIDWORD(v69) = v91 ^ ks->ks[7].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v93 = v69 >> 4;
    v94 = DES_SPtrans[v92 >> 2] ^ DES_SPtrans[((unsigned __int16)v92 >> 10) + 128] ^ DES_SPtrans[((v92 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v92 >> 26) + 384] ^ DES_SPtrans[(v93 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v93 >> 10) + 192] ^ DES_SPtrans[((v93 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v93 >> 26) + 448] ^ v88;
    v95 = v94 ^ ks->ks[6].deslong[0];
    HIDWORD(v69) = v94 ^ ks->ks[6].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v96 = v69 >> 4;
    v97 = DES_SPtrans[v95 >> 2] ^ DES_SPtrans[((unsigned __int16)v95 >> 10) + 128] ^ DES_SPtrans[((v95 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v95 >> 26) + 384] ^ DES_SPtrans[(v96 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v96 >> 10) + 192] ^ DES_SPtrans[((v96 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v96 >> 26) + 448] ^ v91;
    v98 = v97 ^ ks->ks[5].deslong[0];
    HIDWORD(v69) = v97 ^ ks->ks[5].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v99 = v69 >> 4;
    v100 = DES_SPtrans[v98 >> 2] ^ DES_SPtrans[((unsigned __int16)v98 >> 10) + 128] ^ DES_SPtrans[((v98 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v98 >> 26) + 384] ^ DES_SPtrans[(v99 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v99 >> 10) + 192] ^ DES_SPtrans[((v99 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v99 >> 26) + 448] ^ v94;
    v101 = v100 ^ ks->ks[4].deslong[0];
    HIDWORD(v69) = v100 ^ ks->ks[4].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v102 = v69 >> 4;
    v103 = DES_SPtrans[v101 >> 2] ^ DES_SPtrans[((unsigned __int16)v101 >> 10) + 128] ^ DES_SPtrans[((v101 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v101 >> 26) + 384] ^ DES_SPtrans[(v102 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v102 >> 10) + 192] ^ DES_SPtrans[((v102 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v102 >> 26) + 448] ^ v97;
    v104 = v103 ^ ks->ks[3].deslong[0];
    HIDWORD(v69) = v103 ^ ks->ks[3].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v105 = v69 >> 4;
    v106 = DES_SPtrans[v104 >> 2] ^ DES_SPtrans[((unsigned __int16)v104 >> 10) + 128] ^ DES_SPtrans[((v104 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v104 >> 26) + 384] ^ DES_SPtrans[(v105 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v105 >> 10) + 192] ^ DES_SPtrans[((v105 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v105 >> 26) + 448] ^ v100;
    v107 = v106 ^ ks->ks[2].deslong[0];
    HIDWORD(v69) = v106 ^ ks->ks[2].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v108 = v69 >> 4;
    v62 = DES_SPtrans[v107 >> 2] ^ DES_SPtrans[((unsigned __int16)v107 >> 10) + 128] ^ DES_SPtrans[((v107 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v107 >> 26) + 384] ^ DES_SPtrans[(v108 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v108 >> 10) + 192] ^ DES_SPtrans[((v108 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v108 >> 26) + 448] ^ v103;
    v109 = v62 ^ ks->ks[1].deslong[0];
    HIDWORD(v69) = v62 ^ ks->ks[1].deslong[1];
    LODWORD(v69) = HIDWORD(v69);
    v64 = DES_SPtrans[v109 >> 2] ^ DES_SPtrans[((unsigned __int16)v109 >> 10) + 128] ^ DES_SPtrans[((v109 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v109 >> 26) + 384] ^ DES_SPtrans[((v69 >> 4) >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)(v69 >> 4) >> 10) + 192] ^ DES_SPtrans[(((v69 >> 4) >> 18) & 0x3F) + 320] ^ DES_SPtrans[((v69 >> 4) >> 26) + 448] ^ v106;
    v65 = ks->ks[0].deslong[0];
    v66 = ks->ks[0].deslong[1];
  }
  v110 = v64 ^ v65;
  HIDWORD(v112) = v64 ^ v66;
  LODWORD(v112) = v64 ^ v66;
  v111 = v112 >> 4;
  HIDWORD(v112) = v64;
  LODWORD(v112) = v64;
  v113 = v112 >> 3;
  HIDWORD(v112) = DES_SPtrans[v110 >> 2] ^ v62 ^ DES_SPtrans[((unsigned __int16)v110 >> 10) + 128] ^ DES_SPtrans[((v110 >> 18) & 0x3F) + 256] ^ DES_SPtrans[(v110 >> 26) + 384] ^ DES_SPtrans[(v111 >> 2) + 64] ^ DES_SPtrans[((unsigned __int16)v111 >> 10) + 192] ^ DES_SPtrans[((v111 >> 18) & 0x3F) + 320] ^ DES_SPtrans[(v111 >> 26) + 448];
  LODWORD(v112) = HIDWORD(v112);
  v114 = v112 >> 3;
  v115 = (v113 ^ (v114 >> 1)) & 0x55555555;
  v116 = v115 ^ v113;
  v117 = v114 ^ (2 * v115);
  v118 = (v117 ^ (v116 >> 8)) & 0xFF00FF;
  v119 = v118 ^ v117;
  v120 = v116 ^ (v118 << 8);
  v121 = (v120 ^ (v119 >> 2)) & 0x33333333;
  v122 = v121 ^ v120;
  v123 = v119 ^ (4 * v121);
  v124 = (unsigned __int16)v123 ^ HIWORD(v122);
  v125 = v124 ^ v123;
  v126 = v122 ^ (v124 << 16);
  v127 = (v126 ^ (v125 >> 4)) & 0xF0F0F0F;
  *data = v127 ^ v126;
  data[1] = v125 ^ (16 * v127);
}

void DES_ncbc_encrypt_ex(unsigned int *a1, _DWORD *a2, unint64_t a3, DES_key_schedule *ks, uint64_t a5, int a6)
{
  unint64_t v8;
  unsigned int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  _DWORD *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  __int16 v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  char *v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;

  v8 = a3;
  v44 = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)a5;
  v12 = *(_DWORD *)(a5 + 4);
  if (a6)
  {
    if (a3 >= 8)
    {
      do
      {
        v13 = a2;
        v14 = *a1;
        v15 = a1[1];
        a1 += 2;
        v42 = v14 ^ v11;
        v43 = v15 ^ v12;
        DES_encrypt1(&v42, ks, 1);
        v11 = v42;
        v12 = v43;
        a2 += 2;
        *v13 = v42;
        v13[1] = v12;
        v8 -= 8;
      }
      while (v8 > 7);
    }
    if (v8)
    {
      v16 = 0;
      v17 = (char *)a1 + v8;
      v18 = 0;
      switch(v8)
      {
        case 1uLL:
          goto LABEL_12;
        case 2uLL:
          goto LABEL_11;
        case 3uLL:
          goto LABEL_10;
        case 4uLL:
          goto LABEL_9;
        case 5uLL:
          goto LABEL_8;
        case 6uLL:
          goto LABEL_7;
        case 7uLL:
          v19 = *--v17;
          v16 = v19 << 16;
LABEL_7:
          v20 = *--v17;
          v16 |= v20 << 8;
LABEL_8:
          v21 = *--v17;
          v16 |= v21;
LABEL_9:
          v18 = v16;
          v22 = *--v17;
          v16 = v22 << 24;
LABEL_10:
          v23 = *--v17;
          v16 |= v23 << 16;
LABEL_11:
          v24 = *--v17;
          v16 |= v24 << 8;
LABEL_12:
          v16 |= *(v17 - 1);
          break;
        default:
          v18 = 0;
          break;
      }
      v42 = v16 ^ v11;
      v43 = v18 ^ v12;
      DES_encrypt1(&v42, ks, 1);
      LOBYTE(v11) = v42;
      v12 = v43;
      v25 = v42 >> 8;
      v26 = HIWORD(v42);
      v27 = HIBYTE(v42);
      v28 = v43 >> 8;
      v29 = HIWORD(v43);
      v30 = HIBYTE(v43);
      *a2 = v42;
      a2[1] = v12;
    }
    else
    {
      v25 = v11 >> 8;
      v26 = HIWORD(v11);
      v27 = HIBYTE(v11);
      v28 = v12 >> 8;
      v29 = HIWORD(v12);
      v30 = HIBYTE(v12);
    }
    *(_BYTE *)a5 = v11;
    *(_BYTE *)(a5 + 1) = v25;
    *(_BYTE *)(a5 + 2) = v26;
    *(_BYTE *)(a5 + 3) = v27;
    *(_BYTE *)(a5 + 4) = v12;
    *(_BYTE *)(a5 + 5) = v28;
    *(_BYTE *)(a5 + 6) = v29;
  }
  else
  {
    if (a3 >= 8)
    {
      do
      {
        v31 = a2;
        v32 = v11;
        v33 = v12;
        v11 = *a1;
        v12 = a1[1];
        v34 = a1 + 2;
        v42 = *a1;
        v43 = v12;
        DES_encrypt1(&v42, ks, 0);
        v35 = HIWORD(v42) ^ HIWORD(v32);
        v36 = v43 ^ v33;
        *(_WORD *)v31 = v42 ^ v32;
        *((_WORD *)v31 + 1) = v35;
        v31[1] = v36;
        a2 = v31 + 2;
        v8 -= 8;
        a1 += 2;
      }
      while (v8 > 7);
      a1 = v34;
    }
    if (v8)
    {
      v38 = *a1;
      v37 = a1[1];
      v42 = v38;
      v43 = v37;
      DES_encrypt1(&v42, ks, 0);
      v39 = v42 ^ v11;
      v40 = v43 ^ v12;
      v41 = (char *)a2 + v8;
      switch(v8)
      {
        case 1uLL:
          goto LABEL_25;
        case 2uLL:
          goto LABEL_24;
        case 3uLL:
          goto LABEL_23;
        case 4uLL:
          goto LABEL_22;
        case 5uLL:
          goto LABEL_21;
        case 6uLL:
          goto LABEL_20;
        case 7uLL:
          *--v41 = BYTE2(v40);
LABEL_20:
          *--v41 = BYTE1(v40);
LABEL_21:
          *--v41 = v40;
LABEL_22:
          *--v41 = HIBYTE(v39);
LABEL_23:
          *--v41 = BYTE2(v39);
LABEL_24:
          *--v41 = BYTE1(v39);
LABEL_25:
          *(v41 - 1) = v39;
          break;
        default:
          break;
      }
    }
    else
    {
      v38 = v11;
      v37 = v12;
    }
    *(_DWORD *)a5 = v38;
    *(_WORD *)(a5 + 4) = v37;
    v30 = HIBYTE(v37);
    *(_BYTE *)(a5 + 6) = BYTE2(v37);
  }
  *(_BYTE *)(a5 + 7) = v30;
}

void DES_ede3_cbc_encrypt_ex(unsigned int *a1, uint64_t a2, unint64_t a3, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3, _DWORD *a7, int a8)
{
  _BYTE *v8;
  DES_key_schedule *v9;
  DES_key_schedule *v10;
  DES_key_schedule *v11;
  unint64_t v12;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  __int16 v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  unsigned int data;
  int v50;
  uint64_t v51;

  v8 = a7;
  v9 = ks3;
  v10 = ks2;
  v11 = ks1;
  v12 = a3;
  v51 = *MEMORY[0x24BDAC8D0];
  v16 = *a7;
  v15 = a7[1];
  if (a8)
  {
    if (a3 >= 8)
    {
      do
      {
        v17 = *a1;
        v18 = a1[1];
        a1 += 2;
        data = v17 ^ v16;
        v50 = v18 ^ v15;
        DES_encrypt3(&data, v11, v10, v9);
        v16 = data;
        v15 = v50;
        *(_WORD *)a2 = data;
        *(_BYTE *)(a2 + 2) = BYTE2(v16);
        *(_BYTE *)(a2 + 3) = HIBYTE(v16);
        *(_DWORD *)(a2 + 4) = v15;
        a2 += 8;
        v12 -= 8;
      }
      while (v12 > 7);
    }
    if (v12)
    {
      v19 = 0;
      v20 = (char *)a1 + v12;
      v21 = 0;
      switch(v12)
      {
        case 1uLL:
          goto LABEL_12;
        case 2uLL:
          goto LABEL_11;
        case 3uLL:
          goto LABEL_10;
        case 4uLL:
          goto LABEL_9;
        case 5uLL:
          goto LABEL_8;
        case 6uLL:
          goto LABEL_7;
        case 7uLL:
          v22 = *--v20;
          v19 = v22 << 16;
LABEL_7:
          v23 = *--v20;
          v19 |= v23 << 8;
LABEL_8:
          v24 = *--v20;
          v19 |= v24;
LABEL_9:
          v21 = v19;
          v25 = *--v20;
          v19 = v25 << 24;
LABEL_10:
          v26 = *--v20;
          v19 |= v26 << 16;
LABEL_11:
          v27 = *--v20;
          v19 |= v27 << 8;
LABEL_12:
          v19 |= *(v20 - 1);
          break;
        default:
          v21 = 0;
          break;
      }
      data = v19 ^ v16;
      v50 = v21 ^ v15;
      DES_encrypt3(&data, v11, v10, v9);
      v16 = data;
      v15 = v50;
      *(_BYTE *)a2 = data;
      v28 = v16 >> 8;
      *(_BYTE *)(a2 + 1) = BYTE1(v16);
      v29 = HIWORD(v16);
      *(_BYTE *)(a2 + 2) = BYTE2(v16);
      v30 = HIBYTE(v16);
      *(_BYTE *)(a2 + 3) = HIBYTE(v16);
      *(_DWORD *)(a2 + 4) = v15;
      v31 = v15 >> 8;
      v32 = HIWORD(v15);
      v33 = HIBYTE(v15);
    }
    else
    {
      v28 = v16 >> 8;
      v29 = HIWORD(v16);
      v30 = HIBYTE(v16);
      v31 = v15 >> 8;
      v32 = HIWORD(v15);
      v33 = HIBYTE(v15);
    }
    *v8 = v16;
    v8[1] = v28;
    v8[2] = v29;
    v8[3] = v30;
    v8[4] = v15;
    v8[5] = v31;
    v8[6] = v32;
  }
  else
  {
    if (a3 >= 8)
    {
      do
      {
        v36 = a2;
        v37 = v16;
        v38 = v15;
        v16 = *a1;
        v15 = a1[1];
        v39 = a1 + 2;
        data = *a1;
        v50 = v15;
        DES_decrypt3(&data, ks1, ks2, ks3);
        v40 = HIWORD(data) ^ HIWORD(v37);
        v41 = v50 ^ v38;
        *(_WORD *)v36 = data ^ v37;
        *(_WORD *)(v36 + 2) = v40;
        *(_DWORD *)(v36 + 4) = v41;
        a2 = v36 + 8;
        v12 -= 8;
        a1 += 2;
      }
      while (v12 > 7);
      a1 = v39;
      v9 = ks3;
      v10 = ks2;
      v8 = a7;
      v11 = ks1;
    }
    if (v12)
    {
      v43 = *a1;
      v42 = a1[1];
      data = v43;
      v50 = v42;
      DES_decrypt3(&data, v11, v10, v9);
      v44 = data ^ v16;
      v45 = v50 ^ v15;
      v46 = a2 + v12;
      switch(v12)
      {
        case 1uLL:
          goto LABEL_25;
        case 2uLL:
          goto LABEL_24;
        case 3uLL:
          goto LABEL_23;
        case 4uLL:
          goto LABEL_22;
        case 5uLL:
          goto LABEL_21;
        case 6uLL:
          goto LABEL_20;
        case 7uLL:
          *(_BYTE *)--v46 = BYTE2(v45);
LABEL_20:
          *(_BYTE *)--v46 = BYTE1(v45);
LABEL_21:
          *(_BYTE *)--v46 = v45;
LABEL_22:
          *(_BYTE *)--v46 = HIBYTE(v44);
LABEL_23:
          *(_BYTE *)--v46 = BYTE2(v44);
LABEL_24:
          *(_BYTE *)--v46 = BYTE1(v44);
LABEL_25:
          *(_BYTE *)(v46 - 1) = v44;
          break;
        default:
          break;
      }
    }
    else
    {
      v43 = v16;
      v42 = v15;
    }
    *(_DWORD *)v8 = v43;
    *((_WORD *)v8 + 2) = v42;
    v33 = HIBYTE(v42);
    v8[6] = BYTE2(v42);
  }
  v8[7] = v33;
}

int EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx)
{
  ENGINE *engine;
  char *v3;
  uint64_t v4;
  size_t v5;
  void (**md_data)(unint64_t);

  engine = ctx->engine;
  if (engine)
  {
    v4 = *((_QWORD *)engine - 1);
    v3 = (char *)engine - 8;
    v5 = v4 + 8;
    if (v4 != -8)
      bzero(v3, v5);
    free(v3);
  }
  md_data = (void (**)(unint64_t))ctx->md_data;
  if (md_data)
    (*md_data)(ctx->flags);
  *(_OWORD *)&ctx->digest = 0u;
  *(_OWORD *)&ctx->flags = 0u;
  return 1;
}

void EVP_MD_CTX_destroy(EVP_MD_CTX *ctx)
{
  ENGINE *engine;
  char *v3;
  uint64_t v4;
  size_t v5;
  void (**md_data)(unint64_t);
  void **p_md_data;
  void *v8;
  size_t v9;

  if (ctx)
  {
    engine = ctx->engine;
    if (engine)
    {
      v4 = *((_QWORD *)engine - 1);
      v3 = (char *)engine - 8;
      v5 = v4 + 8;
      if (v4 != -8)
        bzero(v3, v5);
      free(v3);
    }
    md_data = (void (**)(unint64_t))ctx->md_data;
    if (md_data)
      (*md_data)(ctx->flags);
    *(_OWORD *)&ctx->digest = 0u;
    *(_OWORD *)&ctx->flags = 0u;
    v8 = ctx[-1].md_data;
    p_md_data = &ctx[-1].md_data;
    v9 = (size_t)v8 + 8;
    if (v8 != (void *)-8)
      bzero(p_md_data, v9);
    free(p_md_data);
  }
}

int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)
{
  uint64_t v4;
  unint64_t v5;
  const EVP_MD *digest;
  uint64_t v7;
  _QWORD *v8;
  ENGINE *v9;
  ENGINE *engine;
  char *v11;
  uint64_t v12;
  size_t v13;
  void (**md_data)(unint64_t);
  size_t final_high;
  void *v16;

  if (!in)
    goto LABEL_12;
  if (in->flags)
  {
    v4 = (*((uint64_t (**)(void))in->md_data + 1))();
    if (!v4)
      return v4;
    v5 = v4;
    digest = in->digest;
    if (!in->digest)
    {
      v9 = 0;
      engine = out->engine;
      if (engine)
        goto LABEL_15;
LABEL_18:
      md_data = (void (**)(unint64_t))out->md_data;
      if (md_data)
        (*md_data)(out->flags);
      *(_OWORD *)&out->digest = 0u;
      *(_OWORD *)&out->flags = 0u;
      out->digest = in->digest;
      out->engine = v9;
      if (in->digest)
      {
        final_high = HIDWORD(in->digest->final);
        if ((_DWORD)final_high)
          memcpy(v9, in->engine, final_high);
      }
      v16 = in->md_data;
      out->flags = v5;
      out->md_data = v16;
      LODWORD(v4) = 1;
      return v4;
    }
    if (out->digest != digest)
      goto LABEL_6;
LABEL_11:
    v9 = out->engine;
    out->engine = 0;
    goto LABEL_18;
  }
  digest = in->digest;
  if (!in->digest)
  {
LABEL_12:
    ERR_put_error(29, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/digest/digest.c", 138);
    LODWORD(v4) = 0;
    return v4;
  }
  v5 = 0;
  if (out->digest == digest)
    goto LABEL_11;
LABEL_6:
  v7 = HIDWORD(digest->final);
  v8 = malloc_type_malloc(v7 + 8, 0x30772F57uLL);
  if (v8)
  {
    *v8 = v7;
    v9 = (ENGINE *)(v8 + 1);
    engine = out->engine;
    if (!engine)
      goto LABEL_18;
LABEL_15:
    v12 = *((_QWORD *)engine - 1);
    v11 = (char *)engine - 8;
    v13 = v12 + 8;
    if (v12 != -8)
      bzero(v11, v13);
    free(v11);
    goto LABEL_18;
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  if (v5)
    (*(void (**)(unint64_t))in->md_data)(v5);
  LODWORD(v4) = 0;
  return v4;
}

double EVP_MD_CTX_move(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  void (**v8)(_QWORD);
  double result;
  __int128 v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v6 = *(_QWORD *)(v4 - 8);
    v5 = (void *)(v4 - 8);
    v7 = v6 + 8;
    if (v6 != -8)
      bzero(v5, v7);
    free(v5);
  }
  v8 = *(void (***)(_QWORD))(a1 + 24);
  if (v8)
    (*v8)(*(_QWORD *)(a1 + 16));
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v10 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v10;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
{
  uint64_t final_high;
  _QWORD *v6;
  ENGINE *v7;
  ENGINE *engine;
  char *v9;
  uint64_t v10;
  size_t v11;

  if (ctx->digest == type)
  {
LABEL_8:
    ((void (*)(EVP_MD_CTX *))type->flags)(ctx);
    return 1;
  }
  final_high = HIDWORD(type->final);
  v6 = malloc_type_malloc(final_high + 8, 0x30772F57uLL);
  if (v6)
  {
    *v6 = final_high;
    v7 = (ENGINE *)(v6 + 1);
    engine = ctx->engine;
    if (engine)
    {
      v10 = *((_QWORD *)engine - 1);
      v9 = (char *)engine - 8;
      v11 = v10 + 8;
      if (v10 != -8)
        bzero(v9, v11);
      free(v9);
    }
    ctx->digest = type;
    ctx->engine = v7;
    goto LABEL_8;
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  return 0;
}

int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned __int8 *md, unsigned int *s)
{
  const EVP_MD *digest;
  size_t final_high;

  ((void (*)(EVP_MD_CTX *, unsigned __int8 *))ctx->digest->update)(ctx, md);
  digest = ctx->digest;
  if (s)
    *s = digest->pkey_type;
  final_high = HIDWORD(digest->final);
  if ((_DWORD)final_high)
    bzero(ctx->engine, final_high);
  return 1;
}

int EVP_Digest(const void *data, size_t count, unsigned __int8 *md, unsigned int *size, const EVP_MD *type, ENGINE *impl)
{
  uint64_t final_high;
  _QWORD *v12;
  unsigned int *v13;
  _QWORD *v14;
  size_t v15;
  char *v16;
  uint64_t v17;
  size_t v18;
  int v19;
  void (**v20)(_QWORD);
  void *v22[2];
  __int128 v23;

  *(_OWORD *)v22 = 0u;
  v23 = 0u;
  if (type)
  {
    final_high = HIDWORD(type->final);
    v12 = malloc_type_malloc(final_high + 8, 0x30772F57uLL);
    if (!v12)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      v19 = 0;
      v20 = (void (**)(_QWORD))*((_QWORD *)&v23 + 1);
      if (!*((_QWORD *)&v23 + 1))
        return v19;
      goto LABEL_13;
    }
    *v12 = final_high;
    v22[0] = (void *)type;
    v22[1] = v12 + 1;
  }
  ((void (*)(void **))type->flags)(v22);
  (*((void (**)(void **, const void *, size_t))v22[0] + 3))(v22, data, count);
  (*((void (**)(void **, unsigned __int8 *))v22[0] + 4))(v22, md);
  v13 = (unsigned int *)v22[0];
  if (size)
    *size = *((_DWORD *)v22[0] + 1);
  v14 = v22[1];
  v15 = v13[11];
  if ((_DWORD)v15)
  {
    bzero(v22[1], v15);
    v14 = v22[1];
  }
  if (v14)
  {
    v17 = *(v14 - 1);
    v16 = (char *)(v14 - 1);
    v18 = v17 + 8;
    if (v17 != -8)
      bzero(v16, v18);
    free(v16);
  }
  v19 = 1;
  v20 = (void (**)(_QWORD))*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
LABEL_13:
    (*v20)(v23);
  return v19;
}

const EVP_MD *EVP_get_digestbyobj(uint64_t a1)
{
  int v1;
  const EVP_MD *result;

  v1 = *(_DWORD *)(a1 + 16);
  if (v1 > 256)
  {
    switch(v1)
    {
      case 672:
        result = EVP_sha256();
        break;
      case 673:
        result = EVP_sha384();
        break;
      case 674:
        result = EVP_sha512();
        break;
      case 675:
        result = EVP_sha224();
        break;
      default:
        if (v1 == 257)
        {
          result = EVP_md4();
        }
        else
        {
          if (v1 != 962)
            return 0;
          result = EVP_sha512_256();
        }
        break;
    }
  }
  else
  {
    if (v1 > 63)
    {
      if (v1 == 64)
        return EVP_sha1();
      if (v1 == 114)
        return (const EVP_MD *)EVP_md5_sha1();
    }
    else
    {
      if (!v1)
        return cbs_to_md(*(_QWORD *)(a1 + 24), *(_DWORD *)(a1 + 20) & ~(*(int *)(a1 + 20) >> 31));
      if (v1 == 4)
        return EVP_md5();
    }
    return 0;
  }
  return result;
}

const EVP_MD *cbs_to_md(uint64_t a1, uint64_t a2)
{
  int v2;
  int v8;
  const EVP_MD *result;

  switch(a2)
  {
    case 5:
      if (*(_DWORD *)a1 == 33754667 && *(_BYTE *)(a1 + 4) == 26)
      {
        v2 = 64;
LABEL_34:
        if (v2 == 4)
          return EVP_md5();
        else
          return EVP_sha1();
      }
      return 0;
    case 9:
      if (*(_QWORD *)a1 == 0x204036501488660 && *(_BYTE *)(a1 + 8) == 1)
      {
        v8 = 672;
      }
      else if (*(_QWORD *)a1 == 0x204036501488660 && *(_BYTE *)(a1 + 8) == 2)
      {
        v8 = 673;
      }
      else if (*(_QWORD *)a1 == 0x204036501488660 && *(_BYTE *)(a1 + 8) == 3)
      {
        v8 = 674;
      }
      else
      {
        if (*(_QWORD *)a1 != 0x204036501488660 || *(_BYTE *)(a1 + 8) != 4)
          return 0;
        v8 = 675;
      }
      break;
    case 8:
      if (*(_QWORD *)a1 != 0x4020DF78648862ALL)
      {
        if (*(_QWORD *)a1 == 0x5020DF78648862ALL)
        {
          v2 = 4;
          goto LABEL_34;
        }
        return 0;
      }
      v8 = 257;
      break;
    default:
      return 0;
  }
  switch(v8)
  {
    case 672:
      result = EVP_sha256();
      break;
    case 673:
      result = EVP_sha384();
      break;
    case 674:
      result = EVP_sha512();
      break;
    case 675:
      result = EVP_sha224();
      break;
    default:
      if (v8 != 257)
        return 0;
      result = EVP_md4();
      break;
  }
  return result;
}

const EVP_MD *EVP_md4(void)
{
  if (pthread_once(&EVP_md4_once, (void (*)(void))EVP_md4_init))
    abort();
  return (const EVP_MD *)&EVP_md4_storage;
}

double EVP_md4_init()
{
  double result;

  EVP_md4_storage = 0x1000000101;
  dword_254541C78 = 0;
  qword_254541C80 = (uint64_t)md4_init;
  unk_254541C88 = md4_update;
  qword_254541C90 = (uint64_t)md4_final;
  *(_QWORD *)&result = 0x5C00000040;
  qword_254541C98 = 0x5C00000040;
  return result;
}

const EVP_MD *EVP_md5(void)
{
  if (pthread_once(&EVP_md5_once, (void (*)(void))EVP_md5_init))
    abort();
  return (const EVP_MD *)&EVP_md5_storage;
}

double EVP_md5_init()
{
  double result;

  EVP_md5_storage = 0x1000000004;
  dword_254572588 = 0;
  qword_254572590 = (uint64_t)md5_init;
  unk_254572598 = md5_update;
  qword_2545725A0 = (uint64_t)md5_final;
  *(_QWORD *)&result = 0x5C00000040;
  qword_2545725A8 = 0x5C00000040;
  return result;
}

const EVP_MD *EVP_sha1(void)
{
  if (pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
    abort();
  return (const EVP_MD *)&EVP_sha1_storage;
}

double EVP_sha1_init()
{
  double result;

  EVP_sha1_storage = 0x1400000040;
  dword_2545725B8 = 0;
  qword_2545725C0 = (uint64_t)sha1_init;
  unk_2545725C8 = sha1_update;
  qword_2545725D0 = (uint64_t)sha1_final;
  *(_QWORD *)&result = 0x6000000040;
  qword_2545725D8 = 0x6000000040;
  return result;
}

const EVP_MD *EVP_sha224(void)
{
  if (pthread_once(&EVP_sha224_once, (void (*)(void))EVP_sha224_init))
    abort();
  return (const EVP_MD *)&EVP_sha224_storage;
}

double EVP_sha224_init()
{
  double result;

  EVP_sha224_storage = 0x1C000002A3;
  dword_2545725E8 = 0;
  qword_2545725F0 = (uint64_t)sha224_init;
  unk_2545725F8 = sha224_update;
  qword_254572600 = (uint64_t)sha224_final;
  *(_QWORD *)&result = 0x7000000040;
  qword_254572608 = 0x7000000040;
  return result;
}

const EVP_MD *EVP_sha256(void)
{
  if (pthread_once(&EVP_sha256_once, (void (*)(void))EVP_sha256_init))
    abort();
  return (const EVP_MD *)&EVP_sha256_storage;
}

double EVP_sha256_init()
{
  double result;

  EVP_sha256_storage = 0x20000002A0;
  dword_253EA7950 = 0;
  qword_253EA7958 = (uint64_t)sha256_init;
  unk_253EA7960 = sha256_update;
  qword_253EA7968 = (uint64_t)sha256_final;
  *(_QWORD *)&result = 0x7000000040;
  qword_253EA7970 = 0x7000000040;
  return result;
}

const EVP_MD *EVP_sha384(void)
{
  if (pthread_once(&EVP_sha384_once, (void (*)(void))EVP_sha384_init))
    abort();
  return (const EVP_MD *)&EVP_sha384_storage;
}

double EVP_sha384_init()
{
  double result;

  EVP_sha384_storage = 0x30000002A1;
  dword_254572618 = 0;
  qword_254572620 = (uint64_t)sha384_init;
  unk_254572628 = sha384_update;
  qword_254572630 = (uint64_t)sha384_final;
  *(_QWORD *)&result = 0xD800000080;
  qword_254572638 = 0xD800000080;
  return result;
}

const EVP_MD *EVP_sha512(void)
{
  if (pthread_once(&EVP_sha512_once, (void (*)(void))EVP_sha512_init))
    abort();
  return (const EVP_MD *)&EVP_sha512_storage;
}

double EVP_sha512_init()
{
  double result;

  EVP_sha512_storage = 0x40000002A2;
  dword_254572648 = 0;
  qword_254572650 = (uint64_t)sha512_init;
  unk_254572658 = sha512_update;
  qword_254572660 = (uint64_t)sha512_final;
  *(_QWORD *)&result = 0xD800000080;
  qword_254572668 = 0xD800000080;
  return result;
}

const EVP_MD *EVP_sha512_256(void)
{
  if (pthread_once(&EVP_sha512_256_once, (void (*)(void))EVP_sha512_256_init))
    abort();
  return (const EVP_MD *)&EVP_sha512_256_storage;
}

double EVP_sha512_256_init()
{
  double result;

  EVP_sha512_256_storage = 0x20000003C2;
  dword_254541CA8 = 0;
  qword_254541CB0 = (uint64_t)sha512_256_init;
  unk_254541CB8 = sha512_256_update;
  qword_254541CC0 = (uint64_t)sha512_256_final;
  *(_QWORD *)&result = 0xD800000080;
  qword_254541CC8 = 0xD800000080;
  return result;
}

uint64_t *EVP_md5_sha1()
{
  if (pthread_once(&EVP_md5_sha1_once, (void (*)(void))EVP_md5_sha1_init))
    abort();
  return &EVP_md5_sha1_storage;
}

double EVP_md5_sha1_init()
{
  double result;

  EVP_md5_sha1_storage = 0x2400000072;
  dword_254572678 = 0;
  qword_254572680 = (uint64_t)md5_sha1_init;
  unk_254572688 = md5_sha1_update;
  qword_254572690 = (uint64_t)md5_sha1_final;
  *(_QWORD *)&result = 0xBC00000040;
  qword_254572698 = 0xBC00000040;
  return result;
}

double md4_init(uint64_t a1)
{
  _OWORD *v1;
  double result;

  v1 = *(_OWORD **)(a1 + 8);
  result = 0.0;
  *(_OWORD *)((char *)v1 + 76) = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  *v1 = xmmword_208F1E4D0;
  return result;
}

uint64_t md4_update(uint64_t a1, const void *a2, size_t a3)
{
  return MD4_Update(*(MD4_CTX **)(a1 + 8), a2, a3);
}

uint64_t md4_final(uint64_t a1, unsigned __int8 *md)
{
  return MD4_Final(md, *(MD4_CTX **)(a1 + 8));
}

double md5_init(uint64_t a1)
{
  _OWORD *v1;
  double result;

  v1 = *(_OWORD **)(a1 + 8);
  result = 0.0;
  *(_OWORD *)((char *)v1 + 76) = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  *v1 = xmmword_208F1E4D0;
  return result;
}

uint64_t md5_update(uint64_t a1, const void *a2, size_t a3)
{
  return MD5_Update(*(_MD5_CTX **)(a1 + 8), a2, a3);
}

uint64_t md5_final(uint64_t a1, unsigned __int8 *md)
{
  return MD5_Final(md, *(_MD5_CTX **)(a1 + 8));
}

double sha1_init(uint64_t a1)
{
  _OWORD *v1;
  double result;

  v1 = *(_OWORD **)(a1 + 8);
  result = 0.0;
  v1[4] = 0u;
  v1[5] = 0u;
  v1[2] = 0u;
  v1[3] = 0u;
  *v1 = xmmword_208F1E4D0;
  v1[1] = 0u;
  *((_DWORD *)v1 + 4) = -1009589776;
  return result;
}

uint64_t sha1_update(uint64_t a1, const void *a2, size_t a3)
{
  return SHA1_Update(*(SHA_CTX **)(a1 + 8), a2, a3);
}

uint64_t sha1_final(uint64_t a1, unsigned __int8 *md)
{
  return SHA1_Final(md, *(SHA_CTX **)(a1 + 8));
}

double sha224_init(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  result = 3.15644116e-46;
  *(_OWORD *)v1 = xmmword_208F25B00;
  *(_OWORD *)(v1 + 16) = xmmword_208F25B10;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_DWORD *)(v1 + 108) = 28;
  return result;
}

uint64_t sha224_update(uint64_t a1, const void *a2, size_t a3)
{
  return SHA256_Update(*(SHA256_CTX **)(a1 + 8), a2, a3);
}

uint64_t sha224_final(uint64_t a1, _DWORD *a2)
{
  return sha256_final_impl(a2, 0x1CuLL, *(int32x2_t **)(a1 + 8));
}

double sha256_init(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  result = -1.56712499e-22;
  *(_OWORD *)v1 = xmmword_208F25B20;
  *(_OWORD *)(v1 + 16) = xmmword_208F25B30;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_DWORD *)(v1 + 108) = 32;
  return result;
}

uint64_t sha256_update(uint64_t a1, const void *a2, size_t a3)
{
  return SHA256_Update(*(SHA256_CTX **)(a1 + 8), a2, a3);
}

uint64_t sha256_final(uint64_t a1, _DWORD *a2)
{
  return sha256_final_impl(a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 108), *(int32x2_t **)(a1 + 8));
}

double sha384_init(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v1 = xmmword_208F25B40;
  *(_OWORD *)(v1 + 16) = xmmword_208F25B50;
  *(_OWORD *)(v1 + 32) = xmmword_208F25B60;
  *(_OWORD *)(v1 + 48) = xmmword_208F25B70;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)&result = 0x3000000000;
  *(_QWORD *)(v1 + 208) = 0x3000000000;
  return result;
}

uint64_t sha384_update(uint64_t a1, const void *a2, size_t a3)
{
  return SHA512_Update(*(SHA512_CTX **)(a1 + 8), a2, a3);
}

uint64_t sha384_final(uint64_t a1, _QWORD *a2)
{
  return sha512_final_impl(a2, 0x30uLL, *(int8x16_t **)(a1 + 8));
}

double sha512_init(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v1 = xmmword_208F1E540;
  *(_OWORD *)(v1 + 16) = xmmword_208F1E550;
  *(_OWORD *)(v1 + 32) = xmmword_208F1E560;
  *(_OWORD *)(v1 + 48) = xmmword_208F1E570;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)&result = 0x4000000000;
  *(_QWORD *)(v1 + 208) = 0x4000000000;
  return result;
}

uint64_t sha512_update(uint64_t a1, const void *a2, size_t a3)
{
  return SHA512_Update(*(SHA512_CTX **)(a1 + 8), a2, a3);
}

uint64_t sha512_final(uint64_t a1, _QWORD *a2)
{
  return sha512_final_impl(a2, *(unsigned int *)(*(_QWORD *)(a1 + 8) + 212), *(int8x16_t **)(a1 + 8));
}

double sha512_256_init(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)v1 = xmmword_208F25B80;
  *(_OWORD *)(v1 + 16) = xmmword_208F25B90;
  *(_OWORD *)(v1 + 32) = xmmword_208F25BA0;
  *(_OWORD *)(v1 + 48) = xmmword_208F25BB0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)&result = 0x2000000000;
  *(_QWORD *)(v1 + 208) = 0x2000000000;
  return result;
}

uint64_t sha512_256_update(uint64_t a1, const void *a2, size_t a3)
{
  return SHA512_Update(*(SHA512_CTX **)(a1 + 8), a2, a3);
}

uint64_t sha512_256_final(uint64_t a1, _QWORD *a2)
{
  return sha512_final_impl(a2, 0x20uLL, *(int8x16_t **)(a1 + 8));
}

double md5_sha1_init(uint64_t a1)
{
  _OWORD *v1;
  double result;

  v1 = *(_OWORD **)(a1 + 8);
  result = 0.0;
  *(_OWORD *)((char *)v1 + 76) = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  *v1 = xmmword_208F1E4D0;
  *(_OWORD *)((char *)v1 + 108) = 0u;
  *(_OWORD *)((char *)v1 + 124) = 0u;
  *(_OWORD *)((char *)v1 + 140) = 0u;
  *(_OWORD *)((char *)v1 + 156) = 0u;
  *(_OWORD *)((char *)v1 + 172) = 0u;
  *(_OWORD *)((char *)v1 + 92) = xmmword_208F1E4D0;
  *((_DWORD *)v1 + 27) = -1009589776;
  return result;
}

uint64_t md5_sha1_update(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 8);
  result = MD5_Update((_MD5_CTX *)v5, a2, a3);
  if ((_DWORD)result)
    return SHA1_Update((SHA_CTX *)(v5 + 92), a2, a3);
  return result;
}

uint64_t md5_sha1_final(uint64_t a1, unsigned __int8 *md)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  result = MD5_Final(md, (_MD5_CTX *)v3);
  if ((_DWORD)result)
    return SHA1_Final(md + 16, (SHA_CTX *)(v3 + 92));
  return result;
}

uint64_t do_sigver_init(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t result;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  size_t v21;
  uint64_t v22;
  const char *v23;
  int v24;
  int v25;
  int v26;

  if (!a1[2])
  {
    result = (uint64_t)EVP_PKEY_CTX_new(a5, a4);
    a1[2] = result;
    if (!result)
      return result;
  }
  if (pthread_once(&md_pctx_ops_once, md_pctx_ops_init))
    abort();
  a1[3] = &md_pctx_ops_storage;
  v11 = a1[2];
  if (a6 == 1)
  {
    if (!v11 || (v12 = *(_QWORD **)v11) == 0 || !v12[7] && !v12[8])
    {
      v23 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/evp/evp_ctx.c";
      v24 = 6;
      v25 = 125;
      v26 = 240;
      goto LABEL_34;
    }
    *(_DWORD *)(v11 + 32) = 16;
    if (a3)
      goto LABEL_10;
LABEL_28:
    v22 = 7;
    if (!a6)
      v22 = 5;
    if (!v12[v22])
      goto LABEL_36;
    v23 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/fipsmodule/digestsign/digestsign.c";
    v24 = 6;
    v25 = 119;
    v26 = 109;
LABEL_34:
    ERR_put_error(v24, 0, v25, v23, v26);
    return 0;
  }
  if (!v11 || (v12 = *(_QWORD **)v11) == 0 || !v12[5] && !v12[6])
  {
    v23 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/evp/evp_ctx.c";
    v24 = 6;
    v25 = 125;
    v26 = 216;
    goto LABEL_34;
  }
  *(_DWORD *)(v11 + 32) = 8;
  if (!a3)
    goto LABEL_28;
LABEL_10:
  v13 = (uint64_t (*)(void))v12[14];
  if (!v13)
  {
    v23 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/evp/evp_ctx.c";
    v24 = 6;
    v25 = 101;
    v26 = 192;
    goto LABEL_34;
  }
  result = v13();
  if (!(_DWORD)result)
    return result;
  v14 = 56;
  if (!a6)
    v14 = 40;
  if (!*(_QWORD *)(*(_QWORD *)a1[2] + v14))
    goto LABEL_36;
  if (*a1 == a3)
    goto LABEL_22;
  v15 = *(unsigned int *)(a3 + 44);
  v16 = malloc_type_malloc(v15 + 8, 0x30772F57uLL);
  if (!v16)
  {
    v23 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v24 = 14;
    v25 = 65;
    v26 = 247;
    goto LABEL_34;
  }
  *v16 = v15;
  v17 = v16 + 1;
  v18 = a1[1];
  if (v18)
  {
    v20 = *(_QWORD *)(v18 - 8);
    v19 = (void *)(v18 - 8);
    v21 = v20 + 8;
    if (v20 != -8)
      bzero(v19, v21);
    free(v19);
  }
  *a1 = a3;
  a1[1] = v17;
LABEL_22:
  (*(void (**)(_QWORD *))(a3 + 16))(a1);
LABEL_36:
  if (a2)
    *a2 = a1[2];
  return 1;
}

uint64_t EVP_DigestSignFinal(EVP_MD_CTX *in, uint64_t a2)
{
  _DWORD *flags;
  uint64_t (*v4)(void);
  size_t final_high;
  _DWORD *v6;
  unsigned int (*v7)(void);
  _BOOL8 v8;
  ENGINE *engine;
  const char *v10;
  int v11;
  int v12;
  char *v14;
  uint64_t v15;
  size_t v16;
  EVP_MD_CTX v17;
  _BYTE v18[64];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  flags = (_DWORD *)in->flags;
  v4 = *(uint64_t (**)(void))(*(_QWORD *)flags + 40);
  if (v4)
  {
    if (a2)
    {
      memset(&v17, 0, sizeof(v17));
      if (EVP_MD_CTX_copy_ex(&v17, in))
      {
        ((void (*)(EVP_MD_CTX *, _BYTE *))v17.digest->update)(&v17, v18);
        final_high = HIDWORD(v17.digest->final);
        if ((_DWORD)final_high)
          bzero(v17.engine, final_high);
        v6 = (_DWORD *)in->flags;
        if (v6)
        {
          if (*(_QWORD *)v6)
          {
            v7 = *(unsigned int (**)(void))(*(_QWORD *)v6 + 40);
            if (v7)
            {
              if (v6[8] == 8)
              {
                v8 = v7() != 0;
                engine = v17.engine;
                if (!v17.engine)
                  goto LABEL_20;
              }
              else
              {
                ERR_put_error(6, 0, 126, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 231);
                v8 = 0;
                engine = v17.engine;
                if (!v17.engine)
                {
LABEL_20:
                  if (v17.md_data)
                    (*(void (**)(unint64_t))v17.md_data)(v17.flags);
                  return v8;
                }
              }
LABEL_17:
              v15 = *((_QWORD *)engine - 1);
              v14 = (char *)engine - 8;
              v16 = v15 + 8;
              if (v15 != -8)
                bzero(v14, v16);
              free(v14);
              goto LABEL_20;
            }
          }
        }
        ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 227);
      }
      v8 = 0;
      engine = v17.engine;
      if (!v17.engine)
        goto LABEL_20;
      goto LABEL_17;
    }
    if (flags[8] == 8)
      return v4();
    v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/evp/evp_ctx.c";
    v11 = 126;
    v12 = 231;
  }
  else
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/fipsmodule/digestsign/digestsign.c";
    v11 = 125;
    v12 = 154;
  }
  ERR_put_error(6, 0, v11, v10, v12);
  return 0;
}

BOOL EVP_DigestVerifyFinal(EVP_MD_CTX *in)
{
  size_t final_high;
  _DWORD *flags;
  unsigned int (*v4)(void);
  _BOOL8 v5;
  ENGINE *engine;
  char *v7;
  uint64_t v8;
  size_t v9;
  EVP_MD_CTX v11;
  _BYTE v12[64];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(*(_QWORD *)in->flags + 56))
  {
    ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/digestsign/digestsign.c", 186);
    return 0;
  }
  memset(&v11, 0, sizeof(v11));
  if (!EVP_MD_CTX_copy_ex(&v11, in))
  {
LABEL_13:
    v5 = 0;
    engine = v11.engine;
    if (!v11.engine)
      goto LABEL_17;
    goto LABEL_14;
  }
  ((void (*)(EVP_MD_CTX *, _BYTE *))v11.digest->update)(&v11, v12);
  final_high = HIDWORD(v11.digest->final);
  if ((_DWORD)final_high)
    bzero(v11.engine, final_high);
  flags = (_DWORD *)in->flags;
  if (!flags || !*(_QWORD *)flags || (v4 = *(unsigned int (**)(void))(*(_QWORD *)flags + 56)) == 0)
  {
    ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 250);
    goto LABEL_13;
  }
  if (flags[8] == 16)
  {
    v5 = v4() != 0;
    engine = v11.engine;
    if (!v11.engine)
      goto LABEL_17;
LABEL_14:
    v8 = *((_QWORD *)engine - 1);
    v7 = (char *)engine - 8;
    v9 = v8 + 8;
    if (v8 != -8)
      bzero(v7, v9);
    free(v7);
    goto LABEL_17;
  }
  ERR_put_error(6, 0, 126, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 254);
  v5 = 0;
  engine = v11.engine;
  if (v11.engine)
    goto LABEL_14;
LABEL_17:
  if (v11.md_data)
    (*(void (**)(unint64_t))v11.md_data)(v11.flags);
  return v5;
}

uint64_t EVP_DigestSign(EVP_MD_CTX *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _DWORD *flags;
  uint64_t (*v8)(void);

  flags = (_DWORD *)a1->flags;
  v8 = *(uint64_t (**)(void))(*(_QWORD *)flags + 40);
  if (v8)
  {
    if (a2)
    {
      ((void (*)(EVP_MD_CTX *, uint64_t, uint64_t))a1->digest->init)(a1, a4, a5);
      return EVP_DigestSignFinal(a1, a2);
    }
    if (flags[8] == 8)
      return v8();
    ERR_put_error(6, 0, 126, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 231);
    return 0;
  }
  else
  {
    v8 = *(uint64_t (**)(void))(*(_QWORD *)flags + 48);
    if (v8)
      return v8();
    ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/digestsign/digestsign.c", 228);
    return 0;
  }
}

void md_pctx_ops_init()
{
  md_pctx_ops_storage = (uint64_t)EVP_PKEY_CTX_free;
  unk_253EA7980 = EVP_PKEY_CTX_dup;
}

int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
{
  uint64_t top;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  int8x8_t v23;
  int v24;
  int v25;
  int8x16_t *v26;
  int8x16_t v27;
  unint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  _QWORD *v38;
  int result;
  BIGNUM *v40;
  BIGNUM *v41;
  BIGNUM *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  unint64_t *v47;
  uint64_t v48;
  char v49;
  int v50;
  unint64_t v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  int v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t *v78;
  unint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t *v84;
  uint64_t v85;
  BIGNUM *v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned __int128 v95;
  unint64_t v96;
  unint64_t *v97;
  unint64_t *v98;
  unint64_t i;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t *v122;
  uint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  BOOL v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _BOOL8 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  BIGNUM *v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  int8x8_t v174;
  uint64_t v175;
  uint64_t v176;
  int8x16_t *v177;
  int8x16_t v178;
  unint64_t v179;
  int8x16_t v180;
  int8x16_t v181;
  uint64_t v182;
  unint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int neg;
  int n;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  unint64_t *v197;
  BIGNUM *v199;

  top = m->top;
  v10 = top & ((int)top >> 31);
  v11 = 8 * top - 8;
  while (1)
  {
    v12 = __OFSUB__((_DWORD)top, 1);
    LODWORD(top) = top - 1;
    if ((int)top < 0 != v12)
      break;
    v13 = *(unint64_t *)((char *)m->d + v11);
    v11 -= 8;
    if (v13)
    {
      v10 = top + 1;
      break;
    }
  }
  v14 = d->top;
  v15 = (int)v14;
  v16 = v14 & ((int)v14 >> 31);
  v17 = 8 * v14 - 8;
  v18 = d->top;
  while (1)
  {
    v12 = __OFSUB__(v18--, 1);
    if (v18 < 0 != v12)
      break;
    v19 = *(unint64_t *)((char *)d->d + v17);
    v17 -= 8;
    if (v19)
    {
      v16 = v18 + 1;
      break;
    }
  }
  v12 = __OFSUB__(v10, 1);
  v20 = v10 - 1;
  if (v20 < 0 == v12 && !m->d[v20] || v16 >= 1 && !d->d[v16 - 1])
  {
    v24 = 111;
    v25 = 212;
LABEL_36:
    ERR_put_error(3, 0, v24, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/div.c", v25);
    return 0;
  }
  if (!(_DWORD)v14)
  {
LABEL_35:
    v24 = 105;
    v25 = 217;
    goto LABEL_36;
  }
  v21 = d->d;
  if (v14 < 4)
  {
    v22 = 0;
    v23 = 0;
LABEL_20:
    v31 = v15 - v22;
    v32 = &v21[v22];
    do
    {
      v33 = *v32++;
      *(_QWORD *)&v23 |= v33;
      --v31;
    }
    while (v31);
    goto LABEL_22;
  }
  v22 = (int)v14 & 0xFFFFFFFFFFFFFFFCLL;
  v26 = (int8x16_t *)(v21 + 2);
  v27 = 0uLL;
  v28 = v15 & 0xFFFFFFFFFFFFFFFCLL;
  v29 = 0uLL;
  do
  {
    v27 = vorrq_s8(v26[-1], v27);
    v29 = vorrq_s8(*v26, v29);
    v26 += 2;
    v28 -= 4;
  }
  while (v28);
  v30 = vorrq_s8(v29, v27);
  v23 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
  if (v22 != v15)
    goto LABEL_20;
LABEL_22:
  if (!*(_QWORD *)&v23)
    goto LABEL_35;
  if (!*((_BYTE *)ctx + 40))
  {
    v34 = *((_QWORD *)ctx + 4);
    v35 = *((_QWORD *)ctx + 2);
    if (v35 == *((_QWORD *)ctx + 3))
    {
      if (v35)
        v36 = (3 * v35) >> 1;
      else
        v36 = 32;
      v37 = v36 > v35 && v36 >> 61 == 0;
      if (!v37 || (v38 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v36)) == 0)
      {
        *((_WORD *)ctx + 20) = 257;
        goto LABEL_41;
      }
      *((_QWORD *)ctx + 1) = v38;
      *((_QWORD *)ctx + 3) = v36;
      v35 = *((_QWORD *)ctx + 2);
    }
    else
    {
      v38 = (_QWORD *)*((_QWORD *)ctx + 1);
    }
    v38[v35] = v34;
    ++*((_QWORD *)ctx + 2);
  }
LABEL_41:
  v40 = BN_CTX_get(ctx);
  v41 = BN_CTX_get(ctx);
  v42 = BN_CTX_get(ctx);
  if (!dv)
    dv = BN_CTX_get(ctx);
  v199 = dv;
  if (!v42 || !dv)
    goto LABEL_190;
  v43 = d->top;
  v44 = v43 & ((int)v43 >> 31);
  v45 = 8 * v43 - 8;
  v46 = d->top;
  while (1)
  {
    v12 = __OFSUB__(v46--, 1);
    if (v46 < 0 != v12)
      break;
    v47 = d->d;
    v48 = *(unint64_t *)((char *)d->d + v45);
    v45 -= 8;
    if (v48)
    {
      v44 = v46 + 1;
      goto LABEL_52;
    }
  }
  if ((v43 & 0x80000000) == 0)
  {
    v49 = 0;
    goto LABEL_64;
  }
  v47 = d->d;
LABEL_52:
  v50 = v44 - 1;
  v51 = v47[v50];
  v52 = v51 != 0;
  v53 = HIDWORD(v51) != 0;
  if (HIDWORD(v51))
    v51 >>= 32;
  v54 = v51 >> 16 != 0;
  if (v51 >> 16)
    v51 >>= 16;
  v55 = v51 > 0xFF;
  if (v51 > 0xFF)
    v51 >>= 8;
  v56 = v51 > 0xF;
  if (v51 > 0xF)
    v51 >>= 4;
  v57 = v51 > 3;
  if (v51 > 3)
    v51 >>= 2;
  v49 = v52 | ((_BYTE)v50 << 6) | (32 * v53) | (16 * v54) | (8 * v55) | (4 * v56) | (2 * v57);
  if (v51 > 1)
    ++v49;
LABEL_64:
  v58 = v49 & 0x3F;
  if (!BN_lshift(v42, d, 64 - v58))
    goto LABEL_190;
  v59 = v42->top;
  v60 = v59 & ((int)v59 >> 31);
  v61 = 8 * v59 - 8;
  while (1)
  {
    v12 = __OFSUB__((_DWORD)v59, 1);
    LODWORD(v59) = v59 - 1;
    if ((int)v59 < 0 != v12)
      break;
    v62 = *(unint64_t *)((char *)v42->d + v61);
    v61 -= 8;
    if (v62)
    {
      v60 = v59 + 1;
      break;
    }
  }
  v42->top = v60;
  v42->neg = 0;
  n = 128 - v58;
  if (!BN_lshift(v41, m, 128 - v58))
    goto LABEL_190;
  v63 = v41->top;
  v64 = v63 & ((int)v63 >> 31);
  v65 = 8 * v63 - 8;
  while (1)
  {
    v12 = __OFSUB__((_DWORD)v63, 1);
    LODWORD(v63) = v63 - 1;
    if ((int)v63 < 0 != v12)
      break;
    v66 = *(unint64_t *)((char *)v41->d + v65);
    v65 -= 8;
    if (v66)
    {
      v64 = v63 + 1;
      break;
    }
  }
  v41->top = v64;
  v41->neg = 0;
  v67 = v42->top;
  if (v64 <= (int)v67 + 1)
  {
    if (bn_wexpand((uint64_t)v41, v67 + 2))
    {
      v71 = v41->top;
      v72 = v42->top;
      v70 = v72 + 2;
      v68 = v41->d;
      if ((int)v71 < v72 + 2)
        bzero(&v68[v71], 8 * (v72 - v71 + 1) + 8);
      goto LABEL_80;
    }
LABEL_190:
    if (!*((_BYTE *)ctx + 40))
    {
      result = 0;
      v175 = *((_QWORD *)ctx + 1);
      v176 = *((_QWORD *)ctx + 2) - 1;
      *((_QWORD *)ctx + 2) = v176;
      *((_QWORD *)ctx + 4) = *(_QWORD *)(v175 + 8 * v176);
      return result;
    }
    return 0;
  }
  if (!bn_wexpand((uint64_t)v41, v64 + 1))
    goto LABEL_190;
  v68 = v41->d;
  v69 = v41->top;
  v41->d[v69] = 0;
  v70 = v69 + 1;
LABEL_80:
  v41->top = v70;
  v73 = v42->top;
  v74 = v70 - v73;
  v75 = v42->d;
  v196 = v70;
  if ((_DWORD)v73 == 1)
    v193 = 0;
  else
    v193 = v75[(int)v73 - 2];
  v195 = v75[(int)v73 - 1];
  neg = m->neg;
  v199->neg = d->neg ^ neg;
  if (!bn_wexpand((uint64_t)v199, v74 + 1))
    goto LABEL_190;
  v76 = (v74 - 1);
  v199->top = v76;
  v77 = v199->d;
  v194 = v73 + 1;
  if (!bn_wexpand((uint64_t)v40, v73 + 1))
    goto LABEL_190;
  v78 = (uint64_t *)&v77[(int)v76];
  if (v199->top)
    --v78;
  else
    v199->neg = 0;
  v80 = v73 + 1;
  v79 = v195;
  if (v74 >= 2)
  {
    v81 = 0;
    v82 = &v68[v74];
    v83 = &v68[v196 - 1];
    v84 = v40->d;
    v197 = v42->d;
    while (1)
    {
      if (*v83 == v79)
      {
        v85 = -1;
      }
      else
      {
        v86 = v41;
        v87 = v84;
        v88 = v73;
        v89 = v82;
        v90 = v76;
        v91 = *(v83 - 1);
        v85 = __udivti3();
        v79 = v195;
        v92 = v91 - v195 * v85;
        v93 = ((unint64_t)v85 * (unsigned __int128)v193) >> 64;
        v94 = v85 * v193;
        v76 = v90;
        if (__PAIR128__(v92, *(v83 - 2)) >= (unint64_t)v85 * (unsigned __int128)v193)
        {
          v80 = v194;
          v82 = v89;
          v73 = v88;
          v84 = v87;
          v41 = v86;
        }
        else
        {
          v80 = v194;
          v82 = v89;
          v73 = v88;
          v84 = v87;
          v41 = v86;
          do
          {
            --v85;
            v137 = __CFADD__(v92, v195);
            v92 += v195;
            if (v137)
              break;
            v95 = __PAIR128__(v93, v94) - v193;
            v93 = *((_QWORD *)&v95 + 1);
            v94 = v95;
          }
          while (__PAIR128__(v92, *(v83 - 2)) < v95);
        }
      }
      if (!(_DWORD)v73)
      {
        v100 = 0;
        v84[v73] = 0;
        --v82;
        v101 = 1;
LABEL_125:
        v122 = v84;
        v123 = (uint64_t *)v82;
        do
        {
LABEL_126:
          v124 = *v122++;
          v125 = *v123 - (v100 + v124);
          v100 = v100 & (*v123 == v124);
          if (*v123 < v124)
            v100 = 1;
          *v123++ = v125;
          --v101;
        }
        while (v101);
        goto LABEL_129;
      }
      if (v73 < 4)
        break;
      v96 = 0;
      v97 = v84;
      v98 = v197;
      for (i = v73; i >= 4; i -= 4)
      {
        v102 = *v98 * v85;
        v137 = __CFADD__(v102, v96);
        v103 = v102 + v96;
        if (v137)
          v104 = ((*v98 * (unsigned __int128)(unint64_t)v85) >> 64) + 1;
        else
          v104 = (*v98 * (unsigned __int128)(unint64_t)v85) >> 64;
        *v97 = v103;
        v105 = v98[1];
        v106 = (v105 * (unsigned __int128)(unint64_t)v85) >> 64;
        v107 = v105 * v85;
        v137 = __CFADD__(v107, v104);
        v108 = v107 + v104;
        if (v137)
          v109 = v106 + 1;
        else
          v109 = v106;
        v97[1] = v108;
        v110 = v98[2];
        v111 = (v110 * (unsigned __int128)(unint64_t)v85) >> 64;
        v112 = v110 * v85;
        v137 = __CFADD__(v112, v109);
        v113 = v112 + v109;
        if (v137)
          v114 = v111 + 1;
        else
          v114 = v111;
        v97[2] = v113;
        v115 = v98[3];
        v116 = (v115 * (unsigned __int128)(unint64_t)v85) >> 64;
        v117 = v115 * v85;
        v137 = __CFADD__(v117, v114);
        v118 = v117 + v114;
        if (v137)
          v96 = v116 + 1;
        else
          v96 = v116;
        v97[3] = v118;
        v98 += 4;
        v97 += 4;
      }
      if (i)
        goto LABEL_118;
LABEL_122:
      v84[v73] = v96;
      --v82;
      if (!(_DWORD)v80)
        goto LABEL_90;
      if (v80 < 4)
      {
        v100 = 0;
        v101 = v80;
        goto LABEL_125;
      }
      v100 = 0;
      v101 = v80;
      v122 = v84;
      v123 = (uint64_t *)v82;
      do
      {
        v130 = v123[1];
        v131 = *v123 - (v100 + *v122);
        v100 = v100 & (*v123 == *v122);
        if (*v123 < *v122)
          v100 = 1;
        *v123 = v131;
        v132 = v122[1];
        v133 = v130 - v132 - v100;
        if (v130 != v132)
          v100 = 0;
        if (v130 < v132)
          v100 = 1;
        v123[1] = v133;
        v134 = v122[2];
        v135 = v123[2];
        v136 = v123[3];
        v137 = v135 >= v134;
        v37 = v135 == v134;
        v138 = v135 - v134 - v100;
        if (!v37)
          v100 = 0;
        if (!v137)
          v100 = 1;
        v123[2] = v138;
        v139 = v122[3];
        v140 = v136 - v139 - v100;
        if (v136 != v139)
          v100 = 0;
        if (v136 < v139)
          v100 = 1;
        v123[3] = v140;
        v123 += 4;
        v122 += 4;
        v101 -= 4;
      }
      while (v101 >= 4);
      if (v101)
        goto LABEL_126;
LABEL_129:
      if (v100)
      {
        --v85;
        if ((_DWORD)v73)
        {
          if (v73 < 4)
          {
            v126 = 0;
            v127 = v73;
            v128 = (uint64_t *)v197;
            v129 = v82;
            goto LABEL_169;
          }
          v126 = 0;
          v127 = v73;
          v128 = (uint64_t *)v197;
          v129 = v82;
          do
          {
            v141 = *v128;
            v142 = v129[1];
            v137 = __CFADD__(*v129, v126);
            v143 = *v129 + v126;
            v144 = v137;
            v137 = __CFADD__(v143, v141);
            *v129 = v143 + v141;
            v145 = v128[1];
            v146 = v144 + v137 + v142;
            if (__CFADD__(v137, v142) | __CFADD__(v144, v137 + v142))
              v147 = 1;
            else
              v147 = 0;
            v137 = __CFADD__(v146, v145);
            v129[1] = v146 + v145;
            v148 = v128[2];
            v149 = v129[2];
            v150 = v129[3];
            v152 = v137;
            v137 = __CFADD__(v137, v149);
            v151 = v152 + v149;
            v137 |= __CFADD__(v147, v151);
            v151 += v147;
            v153 = v137;
            v129[2] = v151 + v148;
            v154 = v128[3];
            v137 = __CFADD__(v154, v150);
            v155 = v154 + v150;
            v156 = v137;
            v137 = __CFADD__(__CFADD__(v151, v148), v155);
            v157 = __CFADD__(v151, v148) + v155;
            v137 |= __CFADD__(v153, v157);
            v157 += v153;
            if (v137)
              v126 = v156 + 1;
            else
              v126 = v156;
            v129[3] = v157;
            v129 += 4;
            v128 += 4;
            v127 -= 4;
          }
          while (v127 >= 4);
          if (v127)
          {
LABEL_169:
            v158 = v129;
            do
            {
              v160 = *v129++;
              v159 = v160;
              v162 = *v128++;
              v161 = v162;
              v137 = __CFADD__(v159, v126);
              v163 = v159 + v126;
              v164 = v137;
              v137 = __CFADD__(v163, v161);
              v165 = v163 + v161;
              if (v137)
                v126 = v164 + 1;
              else
                v126 = v164;
              *v158++ = v165;
              --v127;
            }
            while (v127);
          }
          if (v126)
            ++*v83;
        }
      }
LABEL_90:
      *v78-- = v85;
      ++v81;
      --v83;
      if (v81 == (_DWORD)v76)
        goto LABEL_179;
    }
    v96 = 0;
    v97 = v84;
    v98 = v197;
    i = v73;
    do
    {
LABEL_118:
      v119 = *v98++;
      v120 = (v119 * (unsigned __int128)(unint64_t)v85) >> 64;
      v121 = v119 * v85 + v96;
      if (__CFADD__(v119 * v85, v96))
        v96 = v120 + 1;
      else
        v96 = v120;
      *v97++ = v121;
      --i;
    }
    while (i);
    goto LABEL_122;
  }
LABEL_179:
  v166 = v41->top;
  v167 = 8 * v166 - 8;
  v168 = v41->top;
  v169 = v199;
  while (1)
  {
    v12 = __OFSUB__(v168--, 1);
    if (v168 < 0 != v12)
      break;
    v170 = *(unint64_t *)((char *)v41->d + v167);
    v167 -= 8;
    if (v170)
    {
      v41->top = v168 + 1;
      goto LABEL_185;
    }
  }
  v41->top = v166 & ((int)v166 >> 31);
  if ((v166 & 0x80000000) == 0)
    v41->neg = 0;
LABEL_185:
  if (!rem)
    goto LABEL_199;
  if (!BN_rshift(rem, v41, n))
    goto LABEL_190;
  v169 = v199;
  v171 = rem->top;
  if (!(_DWORD)v171)
    goto LABEL_199;
  v172 = rem->d;
  if (v171 < 4)
  {
    v173 = 0;
    v174 = 0;
LABEL_195:
    v182 = v171 - v173;
    v183 = &v172[v173];
    do
    {
      v184 = *v183++;
      *(_QWORD *)&v174 |= v184;
      --v182;
    }
    while (v182);
    goto LABEL_197;
  }
  v173 = v171 & 0xFFFFFFFFFFFFFFFCLL;
  v177 = (int8x16_t *)(v172 + 2);
  v178 = 0uLL;
  v179 = v171 & 0xFFFFFFFFFFFFFFFCLL;
  v180 = 0uLL;
  do
  {
    v178 = vorrq_s8(v177[-1], v178);
    v180 = vorrq_s8(*v177, v180);
    v177 += 2;
    v179 -= 4;
  }
  while (v179);
  v181 = vorrq_s8(v180, v178);
  v174 = vorr_s8(*(int8x8_t *)v181.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v181, v181, 8uLL));
  if (v173 != v171)
    goto LABEL_195;
LABEL_197:
  if (v174)
    rem->neg = neg;
LABEL_199:
  v185 = v169->top;
  v186 = 8 * v185 - 8;
  v187 = v169->top;
  while (1)
  {
    v12 = __OFSUB__(v187--, 1);
    if (v187 < 0 != v12)
      break;
    v188 = *(unint64_t *)((char *)v169->d + v186);
    v186 -= 8;
    if (v188)
    {
      v169->top = v187 + 1;
      goto LABEL_205;
    }
  }
  v169->top = v185 & ((int)v185 >> 31);
  if ((v185 & 0x80000000) == 0)
    v169->neg = 0;
LABEL_205:
  if (!*((_BYTE *)ctx + 40))
  {
    v189 = *((_QWORD *)ctx + 1);
    v190 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v190;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v189 + 8 * v190);
  }
  return 1;
}

int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
{
  int result;
  int (__cdecl *v7)(BIGNUM *, const BIGNUM *, const BIGNUM *);

  result = BN_div(0, r, m, d, ctx);
  if (result)
  {
    if (r->neg)
    {
      if (d->neg)
        v7 = BN_sub;
      else
        v7 = BN_add;
      return ((uint64_t (*)(BIGNUM *, BIGNUM *, const BIGNUM *))v7)(r, r, d);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

unint64_t bn_mod_sub_words(unint64_t result, unint64_t *a2, unint64_t *a3, uint64_t *a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t *v58;
  int8x16_t *v59;
  unint64_t v60;
  int8x16_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  uint64_t *v65;
  uint64_t v66;

  if (!a6)
    return result;
  if (a6 < 4)
  {
    v6 = 0;
    v7 = a6;
    v8 = (unint64_t *)result;
    do
    {
LABEL_21:
      v20 = *a2++;
      v19 = v20;
      v21 = *a3++;
      v22 = v19 - (v6 + v21);
      v6 = v6 & (v19 == v21);
      if (v19 < v21)
        v6 = 1;
      *v8++ = v22;
      --v7;
    }
    while (v7);
    goto LABEL_24;
  }
  v6 = 0;
  v7 = a6;
  v8 = (unint64_t *)result;
  do
  {
    v9 = *a2 - (v6 + *a3);
    v6 = v6 & (*a2 == *a3);
    if (*a2 < *a3)
      v6 = 1;
    *v8 = v9;
    v10 = a2[1];
    v11 = a3[1];
    v12 = v10 - (v11 + v6);
    if (v10 != v11)
      v6 = 0;
    if (v10 < v11)
      v6 = 1;
    v8[1] = v12;
    v13 = a2[2];
    v14 = a3[2];
    v15 = v13 - (v14 + v6);
    if (v13 != v14)
      v6 = 0;
    if (v13 < v14)
      v6 = 1;
    v8[2] = v15;
    v16 = a2[3];
    v17 = a3[3];
    v18 = v16 - (v17 + v6);
    if (v16 != v17)
      v6 = 0;
    if (v16 < v17)
      v6 = 1;
    v8[3] = v18;
    a2 += 4;
    a3 += 4;
    v8 += 4;
    v7 -= 4;
  }
  while (v7 >= 4);
  if (v7)
    goto LABEL_21;
LABEL_24:
  if (a6 >= 4)
  {
    v23 = 0;
    v24 = a6;
    v25 = (uint64_t *)result;
    v26 = (_QWORD *)a5;
    do
    {
      v27 = *a4;
      v28 = __CFADD__(*v25, v23);
      v29 = *v25 + v23;
      v30 = v28;
      v28 = __CFADD__(v29, v27);
      *v26 = v29 + v27;
      v31 = v25[1];
      v32 = a4[1];
      v34 = v28;
      v28 = __CFADD__(v28, v31);
      v33 = v34 + v31;
      v28 |= __CFADD__(v30, v33);
      v33 += v30;
      v35 = v28;
      v28 = __CFADD__(v33, v32);
      v26[1] = v33 + v32;
      v36 = v25[2];
      v37 = a4[2];
      v39 = v28;
      v28 = __CFADD__(v28, v36);
      v38 = v39 + v36;
      v28 |= __CFADD__(v35, v38);
      v38 += v35;
      v40 = v28;
      v26[2] = v38 + v37;
      v41 = v25[3];
      v42 = a4[3];
      v28 = __CFADD__(v42, v41);
      v43 = v42 + v41;
      v44 = v28;
      v28 = __CFADD__(__CFADD__(v38, v37), v43) | __CFADD__(v40, __CFADD__(v38, v37) + v43);
      v45 = v40 + __CFADD__(v38, v37) + v43;
      if (v28)
        v23 = v44 + 1;
      else
        v23 = v44;
      v26[3] = v45;
      v25 += 4;
      a4 += 4;
      v26 += 4;
      v24 -= 4;
    }
    while (v24 >= 4);
    if (!v24)
      goto LABEL_51;
  }
  else
  {
    v23 = 0;
    v24 = a6;
    v25 = (uint64_t *)result;
    v26 = (_QWORD *)a5;
  }
  do
  {
    v47 = *v25++;
    v46 = v47;
    v49 = *a4++;
    v48 = v49;
    v28 = __CFADD__(v46, v23);
    v50 = v46 + v23;
    v51 = v28;
    v28 = __CFADD__(v50, v48);
    v52 = v50 + v48;
    if (v28)
      v23 = v51 + 1;
    else
      v23 = v51;
    *v26++ = v52;
    --v24;
  }
  while (v24);
LABEL_51:
  v53 = 0;
  v54 = -v6;
  v55 = ~v54;
  if (a6 < 4)
    goto LABEL_58;
  if (a5 + 8 * a6 > result && result + 8 * a6 > a5)
  {
    v53 = 0;
LABEL_58:
    v62 = a6 - v53;
    v63 = 8 * v53;
    v64 = (unint64_t *)(result + 8 * v53);
    v65 = (uint64_t *)(a5 + v63);
    do
    {
      v66 = *v65++;
      *v64 = *v64 & v55 | v66 & v54;
      ++v64;
      --v62;
    }
    while (v62);
    return result;
  }
  v56 = (int8x16_t)vdupq_n_s64(v54);
  v53 = a6 & 0xFFFFFFFFFFFFFFFCLL;
  v57 = (int8x16_t)vdupq_n_s64(v55);
  v58 = (int8x16_t *)(a5 + 16);
  v59 = (int8x16_t *)(result + 16);
  v60 = a6 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v61 = vorrq_s8(vandq_s8(*v59, v57), vandq_s8(*v58, v56));
    v59[-1] = vorrq_s8(vandq_s8(v59[-1], v57), vandq_s8(v58[-1], v56));
    *v59 = v61;
    v58 += 2;
    v59 += 2;
    v60 -= 4;
  }
  while (v60);
  if (v53 != a6)
    goto LABEL_58;
  return result;
}

unint64_t bn_mod_add_words(unint64_t result, uint64_t *a2, uint64_t *a3, unint64_t *a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t *v59;
  uint64_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t *v63;
  int8x16_t *v64;
  unint64_t v65;
  int8x16_t v66;

  if (!a6)
    return result;
  if (a6 < 4)
  {
    v6 = 0;
    v7 = a6;
    v8 = (_QWORD *)result;
    do
    {
LABEL_22:
      v29 = *a2++;
      v28 = v29;
      v31 = *a3++;
      v30 = v31;
      v10 = __CFADD__(v28, v6);
      v32 = v28 + v6;
      v33 = v10;
      v10 = __CFADD__(v32, v30);
      v34 = v32 + v30;
      if (v10)
        v6 = v33 + 1;
      else
        v6 = v33;
      *v8++ = v34;
      --v7;
    }
    while (v7);
    goto LABEL_29;
  }
  v6 = 0;
  v7 = a6;
  v8 = (_QWORD *)result;
  do
  {
    v9 = *a3;
    v10 = __CFADD__(*a2, v6);
    v11 = *a2 + v6;
    v12 = v10;
    v10 = __CFADD__(v11, v9);
    *v8 = v11 + v9;
    v13 = a2[1];
    v14 = a3[1];
    v16 = v10;
    v10 = __CFADD__(v10, v13);
    v15 = v16 + v13;
    v10 |= __CFADD__(v12, v15);
    v15 += v12;
    v17 = v10;
    v10 = __CFADD__(v15, v14);
    v8[1] = v15 + v14;
    v18 = a2[2];
    v19 = a3[2];
    v21 = v10;
    v10 = __CFADD__(v10, v18);
    v20 = v21 + v18;
    v10 |= __CFADD__(v17, v20);
    v20 += v17;
    v22 = v10;
    v8[2] = v20 + v19;
    v23 = a2[3];
    v24 = a3[3];
    v10 = __CFADD__(v24, v23);
    v25 = v24 + v23;
    v26 = v10;
    v10 = __CFADD__(__CFADD__(v20, v19), v25) | __CFADD__(v22, __CFADD__(v20, v19) + v25);
    v27 = v22 + __CFADD__(v20, v19) + v25;
    if (v10)
      v6 = v26 + 1;
    else
      v6 = v26;
    v8[3] = v27;
    a2 += 4;
    a3 += 4;
    v8 += 4;
    v7 -= 4;
  }
  while (v7 >= 4);
  if (v7)
    goto LABEL_22;
LABEL_29:
  if (a6 >= 4)
  {
    v35 = 0;
    v36 = a6;
    v37 = (unint64_t *)result;
    v38 = (unint64_t *)a5;
    do
    {
      v39 = *v37 - (v35 + *a4);
      v35 = v35 & (*v37 == *a4);
      if (*v37 < *a4)
        v35 = 1;
      *v38 = v39;
      v40 = v37[1];
      v41 = a4[1];
      v42 = v40 - (v41 + v35);
      if (v40 != v41)
        v35 = 0;
      if (v40 < v41)
        v35 = 1;
      v38[1] = v42;
      v43 = v37[2];
      v44 = a4[2];
      v45 = v43 - (v44 + v35);
      if (v43 != v44)
        v35 = 0;
      if (v43 < v44)
        v35 = 1;
      v38[2] = v45;
      v46 = v37[3];
      v47 = a4[3];
      v48 = v46 - (v47 + v35);
      if (v46 != v47)
        v35 = 0;
      if (v46 < v47)
        v35 = 1;
      v38[3] = v48;
      v37 += 4;
      a4 += 4;
      v38 += 4;
      v36 -= 4;
    }
    while (v36 >= 4);
    if (!v36)
      goto LABEL_51;
  }
  else
  {
    v35 = 0;
    v36 = a6;
    v37 = (unint64_t *)result;
    v38 = (unint64_t *)a5;
  }
  do
  {
    v50 = *v37++;
    v49 = v50;
    v51 = *a4++;
    v52 = v49 - (v35 + v51);
    v35 = v35 & (v49 == v51);
    if (v49 < v51)
      v35 = 1;
    *v38++ = v52;
    --v36;
  }
  while (v36);
LABEL_51:
  v53 = v6 - v35;
  v54 = ~v53;
  if (a6 < 4 || a5 + 8 * a6 > result && result + 8 * a6 > a5)
  {
    v55 = 0;
LABEL_55:
    v56 = a6 - v55;
    v57 = 8 * v55;
    v58 = (uint64_t *)(a5 + 8 * v55);
    v59 = (unint64_t *)(result + v57);
    do
    {
      v60 = *v58++;
      *v59 = v60 & v54 | *v59 & v53;
      ++v59;
      --v56;
    }
    while (v56);
    return result;
  }
  v61 = (int8x16_t)vdupq_n_s64(v53);
  v55 = a6 & 0xFFFFFFFFFFFFFFFCLL;
  v62 = (int8x16_t)vdupq_n_s64(v54);
  v63 = (int8x16_t *)(result + 16);
  v64 = (int8x16_t *)(a5 + 16);
  v65 = a6 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v66 = vorrq_s8(vandq_s8(*v64, v62), vandq_s8(*v63, v61));
    v63[-1] = vorrq_s8(vandq_s8(v64[-1], v62), vandq_s8(v63[-1], v61));
    *v63 = v66;
    v63 += 2;
    v64 += 2;
    v65 -= 4;
  }
  while (v65);
  if (v55 != a6)
    goto LABEL_55;
  return result;
}

uint64_t bn_div_consttime(BIGNUM *a1, BIGNUM *a2, BIGNUM *a3, BIGNUM *a4, int a5, BN_CTX *ctx)
{
  int v7;
  int v8;
  uint64_t result;
  uint64_t top;
  int8x16_t *d;
  unint64_t v17;
  int8x8_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v31;
  BIGNUM *v32;
  BIGNUM *v33;
  BIGNUM *v34;
  uint64_t v35;
  uint64_t v36;
  signed int v37;
  signed int v38;
  int v39;
  uint64_t v40;
  int8x16_t *v41;
  unint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t *v45;
  char v46;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  unint64_t v95;
  int8x16_t v96;
  int8x16_t v97;
  unint64_t v98;
  int8x16_t *v99;
  int8x16_t *v100;
  int8x16_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  unint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  if (a3->neg || a4->neg)
  {
    v7 = 109;
    v8 = 461;
LABEL_4:
    ERR_put_error(3, 0, v7, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/div.c", v8);
    return 0;
  }
  top = a4->top;
  if (!(_DWORD)top)
  {
LABEL_27:
    v7 = 105;
    v8 = 465;
    goto LABEL_4;
  }
  d = (int8x16_t *)a4->d;
  if (top < 4)
  {
    v17 = 0;
    v18 = 0;
LABEL_12:
    v24 = top - v17;
    v25 = &d->i64[v17];
    do
    {
      v26 = *v25++;
      *(_QWORD *)&v18 |= v26;
      --v24;
    }
    while (v24);
    goto LABEL_14;
  }
  v17 = top & 0xFFFFFFFFFFFFFFFCLL;
  v19 = d + 1;
  v20 = 0uLL;
  v21 = top & 0xFFFFFFFFFFFFFFFCLL;
  v22 = 0uLL;
  do
  {
    v20 = vorrq_s8(v19[-1], v20);
    v22 = vorrq_s8(*v19, v22);
    v19 += 2;
    v21 -= 4;
  }
  while (v21);
  v23 = vorrq_s8(v22, v20);
  v18 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
  if (v17 != top)
    goto LABEL_12;
LABEL_14:
  if (!*(_QWORD *)&v18)
    goto LABEL_27;
  if (*((_BYTE *)ctx + 40))
    goto LABEL_31;
  v27 = *((_QWORD *)ctx + 4);
  v28 = *((_QWORD *)ctx + 2);
  if (v28 != *((_QWORD *)ctx + 3))
  {
    v31 = (_QWORD *)*((_QWORD *)ctx + 1);
    goto LABEL_29;
  }
  if (v28)
    v29 = (3 * v28) >> 1;
  else
    v29 = 32;
  if (v29 > v28 && v29 >> 61 == 0)
  {
    v31 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v29);
    if (v31)
    {
      *((_QWORD *)ctx + 1) = v31;
      *((_QWORD *)ctx + 3) = v29;
      v28 = *((_QWORD *)ctx + 2);
LABEL_29:
      v31[v28] = v27;
      ++*((_QWORD *)ctx + 2);
      goto LABEL_31;
    }
  }
  *((_WORD *)ctx + 20) = 257;
LABEL_31:
  if (!a1 || a1 == a3 || (v32 = a1, a1 == a4))
    v32 = BN_CTX_get(ctx);
  if (!a2 || a2 == a3 || (v33 = a2, a2 == a4))
    v33 = BN_CTX_get(ctx);
  v34 = BN_CTX_get(ctx);
  result = 0;
  if (!v32)
    goto LABEL_121;
  if (!v33)
    goto LABEL_121;
  if (!v34)
    goto LABEL_121;
  result = bn_wexpand((uint64_t)v32, a3->top);
  if (!(_DWORD)result)
    goto LABEL_121;
  result = bn_wexpand((uint64_t)v33, a4->top);
  if (!(_DWORD)result)
    goto LABEL_121;
  result = bn_wexpand((uint64_t)v34, a4->top);
  if (!(_DWORD)result)
    goto LABEL_121;
  v35 = a3->top;
  if ((_DWORD)v35)
  {
    bzero(v32->d, 8 * v35);
    LODWORD(v35) = a3->top;
  }
  v32->top = v35;
  v32->neg = 0;
  v36 = a4->top;
  if ((_DWORD)v36)
  {
    bzero(v33->d, 8 * v36);
    LODWORD(v36) = a4->top;
  }
  v33->top = v36;
  v33->neg = 0;
  v37 = a3->top;
  if (a5 && ((int)((a5 - 1) >> 6) >= v37 ? (v38 = a3->top) : (v38 = (a5 - 1) >> 6), v38))
  {
    memcpy(v33->d, &a3->d[v37 - v38], 8 * v38);
    v37 = a3->top;
    v39 = ~v38;
  }
  else
  {
    v39 = -1;
  }
  v40 = (v39 + v37);
  if ((int)v40 < 0)
    goto LABEL_116;
  v41 = (int8x16_t *)v33->d;
  v42 = a4->top;
  v43 = (unint64_t)v34->d;
  v44 = v33->d >= &v34->d[v42] || (unint64_t *)v43 >= &v33->d[v42];
  v45 = a3->d;
  v46 = !v44;
  while (2)
  {
    v48 = 63;
    do
    {
      v50 = v48;
      if (!(_DWORD)v42)
      {
        LOBYTE(v49) = 0;
        v41->i64[0] |= (v45[v40] >> v50) & 1;
        goto LABEL_66;
      }
      if (v42 < 4)
      {
        v51 = 0;
        v52 = v42;
        v53 = (uint64_t *)v41;
LABEL_75:
        v65 = v53;
        v66 = v53;
        do
        {
          v68 = *v65++;
          v67 = v68;
          v70 = *v53++;
          v69 = v70;
          v44 = __CFADD__(v67, v51);
          v71 = v67 + v51;
          v72 = v44;
          v44 = __CFADD__(v71, v69);
          v73 = v71 + v69;
          if (v44)
            v51 = v72 + 1;
          else
            v51 = v72;
          *v66++ = v73;
          --v52;
        }
        while (v52);
        goto LABEL_83;
      }
      v51 = 0;
      v52 = v42;
      v53 = (uint64_t *)v41;
      do
      {
        v54 = v53[1];
        v55 = (unint64_t)*v53 >> 63;
        v56 = v54 >> 63;
        v54 *= 2;
        v44 = __CFADD__(__CFADD__(v51, 2 * *v53), v54);
        v57 = __CFADD__(v51, 2 * *v53) + v54;
        v44 |= __CFADD__(v55, v57);
        *v53 = v51 + 2 * *v53;
        v53[1] = v55 + v57;
        v58 = v53[2];
        v59 = v53[3];
        v60 = v58 >> 63;
        v58 *= 2;
        v62 = v44 + v58;
        v44 = __CFADD__(v44, v58) | __CFADD__(v56, v62);
        v61 = v56 + v62;
        v64 = v44 + 2 * v59;
        v44 = __CFADD__(v44, 2 * v59) | __CFADD__(v60, v64);
        v63 = v60 + v64;
        v51 = v59 >> 63;
        if (v44)
          ++v51;
        v53[2] = v61;
        v53[3] = v63;
        v53 += 4;
        v52 -= 4;
      }
      while (v52 >= 4);
      if (v52)
        goto LABEL_75;
LABEL_83:
      v41->i64[0] |= (v45[v40] >> v50) & 1;
      v74 = a4->d;
      if (v42 < 4)
      {
        v75 = 0;
        v76 = v42;
        v77 = (uint64_t *)v41;
        v78 = (unint64_t *)v43;
        do
        {
LABEL_102:
          v90 = *v77++;
          v89 = v90;
          v91 = *v74++;
          v92 = v89 - (v75 + v91);
          v75 = v75 & (v89 == v91);
          if (v89 < v91)
            v75 = 1;
          *v78++ = v92;
          --v76;
        }
        while (v76);
        goto LABEL_105;
      }
      v75 = 0;
      v76 = v42;
      v77 = (uint64_t *)v41;
      v78 = (unint64_t *)v43;
      do
      {
        v79 = *v77 - (v75 + *v74);
        v75 = v75 & (*v77 == *v74);
        if (*v77 < *v74)
          v75 = 1;
        *v78 = v79;
        v80 = v77[1];
        v81 = v74[1];
        v82 = v80 - (v81 + v75);
        if (v80 != v81)
          v75 = 0;
        if (v80 < v81)
          v75 = 1;
        v78[1] = v82;
        v83 = v77[2];
        v84 = v74[2];
        v85 = v83 - (v84 + v75);
        if (v83 != v84)
          v75 = 0;
        if (v83 < v84)
          v75 = 1;
        v78[2] = v85;
        v86 = v77[3];
        v87 = v74[3];
        v88 = v86 - (v87 + v75);
        if (v86 != v87)
          v75 = 0;
        if (v86 < v87)
          v75 = 1;
        v78[3] = v88;
        v77 += 4;
        v74 += 4;
        v78 += 4;
        v76 -= 4;
      }
      while (v76 >= 4);
      if (v76)
        goto LABEL_102;
LABEL_105:
      v49 = v51 - v75;
      v93 = ~v49;
      if (v42 < 4)
        v94 = 1;
      else
        v94 = v46;
      if ((v94 & 1) != 0)
      {
        v95 = 0;
LABEL_113:
        v102 = v42 - v95;
        v103 = v95;
        v104 = (uint64_t *)(v43 + 8 * v95);
        v105 = &v41->u64[v103];
        do
        {
          v106 = *v104++;
          *v105 = v106 & v93 | *v105 & v49;
          ++v105;
          --v102;
        }
        while (v102);
        goto LABEL_66;
      }
      v96 = (int8x16_t)vdupq_n_s64(v49);
      v97 = (int8x16_t)vdupq_n_s64(v93);
      v98 = v42 & 0xFFFFFFFFFFFFFFFCLL;
      v99 = (int8x16_t *)(v43 + 16);
      v100 = v41 + 1;
      do
      {
        v101 = vorrq_s8(vandq_s8(*v99, v97), vandq_s8(*v100, v96));
        v100[-1] = vorrq_s8(vandq_s8(v99[-1], v97), vandq_s8(v100[-1], v96));
        *v100 = v101;
        v100 += 2;
        v99 += 2;
        v98 -= 4;
      }
      while (v98);
      v95 = v42 & 0xFFFFFFFFFFFFFFFCLL;
      if ((v42 & 0xFFFFFFFFFFFFFFFCLL) != v42)
        goto LABEL_113;
LABEL_66:
      v32->d[v40] |= (unint64_t)((v49 & 1) == 0) << v50;
      v48 = v50 - 1;
    }
    while (v50);
    if ((int)v40-- > 0)
      continue;
    break;
  }
LABEL_116:
  if ((!a1 || (result = (uint64_t)BN_copy(a1, v32)) != 0) && (!a2 || (result = (uint64_t)BN_copy(a2, v33)) != 0))
    result = 1;
LABEL_121:
  if (!*((_BYTE *)ctx + 40))
  {
    v107 = *((_QWORD *)ctx + 1);
    v108 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v108;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v107 + 8 * v108);
  }
  return result;
}

uint64_t bn_mod_add_consttime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BN_CTX *ctx)
{
  signed int v10;
  BIGNUM *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v23;
  signed int v24;
  uint64_t v25;
  uint64_t v26;
  BIGNUM *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  int8x8_t v32;
  unint64_t v33;
  int v34;
  uint64_t result;
  uint64_t v36;
  signed int v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t *v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  unint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t *v101;
  int8x16_t *v102;
  unint64_t v103;
  int8x16_t v104;
  int8x16_t *v105;
  int8x16_t v106;
  unint64_t v107;
  int8x16_t v108;
  int8x16_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  int8x16_t *v113;
  int8x16_t v114;
  unint64_t v115;
  int8x16_t v116;
  int8x16_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  if (*((_BYTE *)ctx + 40))
  {
    v10 = *(_DWORD *)(a4 + 8);
    if (*(_DWORD *)(a2 + 8) < v10)
      goto LABEL_3;
LABEL_24:
    v12 = a2;
    v24 = *(_DWORD *)(a4 + 8);
    if (*(_DWORD *)(a3 + 8) < v24)
      goto LABEL_34;
    goto LABEL_25;
  }
  v19 = *((_QWORD *)ctx + 4);
  v20 = *((_QWORD *)ctx + 2);
  if (v20 != *((_QWORD *)ctx + 3))
  {
    v23 = (_QWORD *)*((_QWORD *)ctx + 1);
LABEL_23:
    v23[v20] = v19;
    ++*((_QWORD *)ctx + 2);
    v10 = *(_DWORD *)(a4 + 8);
    if (*(_DWORD *)(a2 + 8) >= v10)
      goto LABEL_24;
    goto LABEL_3;
  }
  if (v20)
    v21 = (3 * v20) >> 1;
  else
    v21 = 32;
  if (v21 > v20 && v21 >> 61 == 0)
  {
    v23 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v21);
    if (v23)
    {
      *((_QWORD *)ctx + 1) = v23;
      *((_QWORD *)ctx + 3) = v21;
      v20 = *((_QWORD *)ctx + 2);
      goto LABEL_23;
    }
  }
  *((_WORD *)ctx + 20) = 257;
  v10 = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a2 + 8) >= v10)
    goto LABEL_24;
LABEL_3:
  v11 = BN_CTX_get(ctx);
  v12 = (uint64_t)v11;
  if (!v11)
    goto LABEL_33;
  if (!bn_wexpand((uint64_t)v11, v10))
    goto LABEL_121;
  *(_DWORD *)(v12 + 16) = 0;
  *(_DWORD *)(v12 + 8) = v10;
  if (v12 == a2)
    goto LABEL_29;
  if (!bn_wexpand(v12, *(int *)(a2 + 8)))
    goto LABEL_121;
  v13 = *(int *)(a2 + 8);
  if (!(_DWORD)v13)
  {
    *(_DWORD *)(v12 + 8) = 0;
    *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 + 16);
    goto LABEL_29;
  }
  memcpy(*(void **)v12, *(const void **)a2, 8 * v13);
  v14 = *(int *)(a2 + 8);
  *(_DWORD *)(v12 + 8) = v14;
  *(_DWORD *)(v12 + 16) = *(_DWORD *)(a2 + 16);
  if (v14 <= v10)
  {
LABEL_29:
    if (!bn_wexpand(v12, v10))
      goto LABEL_121;
    v26 = *(int *)(v12 + 8);
    if (v10 != (_DWORD)v26)
      bzero((void *)(*(_QWORD *)v12 + 8 * v26), 8 * (v10 - v26));
    goto LABEL_32;
  }
  v15 = *(char **)v12;
  v16 = v14 - v10;
  if (v16 < 4)
  {
    v17 = 0;
    v18 = v10;
LABEL_117:
    v110 = v14 - v18;
    v111 = &v15[8 * v18];
    do
    {
      v112 = *(_QWORD *)v111;
      v111 += 8;
      *(_QWORD *)&v17 |= v112;
      --v110;
    }
    while (v110);
    goto LABEL_119;
  }
  v18 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + v10;
  v105 = (int8x16_t *)&v15[8 * v10 + 16];
  v106 = 0uLL;
  v107 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  v108 = 0uLL;
  do
  {
    v106 = vorrq_s8(v105[-1], v106);
    v108 = vorrq_s8(*v105, v108);
    v105 += 2;
    v107 -= 4;
  }
  while (v107);
  v109 = vorrq_s8(v108, v106);
  v17 = vorr_s8(*(int8x8_t *)v109.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL));
  if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_117;
LABEL_119:
  if (!*(_QWORD *)&v17)
  {
LABEL_32:
    *(_DWORD *)(v12 + 8) = v10;
LABEL_33:
    v24 = *(_DWORD *)(a4 + 8);
    if (*(_DWORD *)(a3 + 8) < v24)
      goto LABEL_34;
LABEL_25:
    v25 = a3;
    goto LABEL_42;
  }
  ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 399);
LABEL_121:
  v12 = 0;
  v24 = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a3 + 8) >= v24)
    goto LABEL_25;
LABEL_34:
  v27 = BN_CTX_get(ctx);
  v25 = (uint64_t)v27;
  if (!v27)
  {
LABEL_42:
    v34 = *(_DWORD *)(a4 + 8);
    result = (uint64_t)BN_CTX_get(ctx);
    if (!result)
      goto LABEL_131;
LABEL_43:
    v36 = result;
    result = bn_wexpand(result, v34);
    if (!(_DWORD)result)
      goto LABEL_131;
    result = 0;
    *(_DWORD *)(v36 + 16) = 0;
    *(_DWORD *)(v36 + 8) = v34;
    if (!v12)
      goto LABEL_131;
    if (!v25)
      goto LABEL_131;
    result = bn_wexpand(a1, *(int *)(a4 + 8));
    if (!(_DWORD)result)
      goto LABEL_131;
    v37 = *(_DWORD *)(a4 + 8);
    if (!v37)
      goto LABEL_103;
    v38 = *(_QWORD *)a1;
    v39 = *(unint64_t **)a4;
    v40 = *(_QWORD *)v36;
    v41 = *(uint64_t **)v25;
    v42 = *(uint64_t **)v12;
    if (v37 >= 4)
    {
      v43 = 0;
      v44 = v37;
      v45 = *(_QWORD **)a1;
      do
      {
        v46 = *v41;
        v47 = __CFADD__(*v42, v43);
        v48 = *v42 + v43;
        v49 = v47;
        v47 = __CFADD__(v48, v46);
        *v45 = v48 + v46;
        v50 = v42[1];
        v51 = v41[1];
        v53 = v47;
        v47 = __CFADD__(v47, v50);
        v52 = v53 + v50;
        v47 |= __CFADD__(v49, v52);
        v52 += v49;
        v54 = v47;
        v47 = __CFADD__(v52, v51);
        v45[1] = v52 + v51;
        v55 = v42[2];
        v56 = v41[2];
        v58 = v47;
        v47 = __CFADD__(v47, v55);
        v57 = v58 + v55;
        v47 |= __CFADD__(v54, v57);
        v57 += v54;
        v59 = v47;
        v45[2] = v57 + v56;
        v60 = v42[3];
        v61 = v41[3];
        v47 = __CFADD__(v61, v60);
        v62 = v61 + v60;
        v63 = v47;
        v47 = __CFADD__(__CFADD__(v57, v56), v62) | __CFADD__(v59, __CFADD__(v57, v56) + v62);
        v64 = v59 + __CFADD__(v57, v56) + v62;
        if (v47)
          v43 = v63 + 1;
        else
          v43 = v63;
        v45[3] = v64;
        v42 += 4;
        v41 += 4;
        v45 += 4;
        v44 -= 4;
      }
      while (v44 >= 4);
      if (!v44)
      {
LABEL_75:
        if (v37 >= 4)
        {
          v72 = 0;
          v73 = v37;
          v74 = (unint64_t *)v38;
          v75 = (unint64_t *)v40;
          do
          {
            v76 = *v74 - (v72 + *v39);
            v72 = v72 & (*v74 == *v39);
            if (*v74 < *v39)
              v72 = 1;
            *v75 = v76;
            v77 = v74[1];
            v78 = v39[1];
            v79 = v77 - (v78 + v72);
            if (v77 != v78)
              v72 = 0;
            if (v77 < v78)
              v72 = 1;
            v75[1] = v79;
            v80 = v74[2];
            v81 = v39[2];
            v82 = v80 - (v81 + v72);
            if (v80 != v81)
              v72 = 0;
            if (v80 < v81)
              v72 = 1;
            v75[2] = v82;
            v83 = v74[3];
            v84 = v39[3];
            v85 = v83 - (v84 + v72);
            if (v83 != v84)
              v72 = 0;
            if (v83 < v84)
              v72 = 1;
            v75[3] = v85;
            v74 += 4;
            v39 += 4;
            v75 += 4;
            v73 -= 4;
          }
          while (v73 >= 4);
          if (!v73)
          {
LABEL_97:
            v90 = v43 - v72;
            v91 = ~(v43 - v72);
            if (v37 >= 4 && (v38 >= v40 + 8 * v37 || v40 >= v38 + 8 * v37))
            {
              v99 = (int8x16_t)vdupq_n_s64(v90);
              v92 = v37 & 0xFFFFFFFFFFFFFFFCLL;
              v100 = (int8x16_t)vdupq_n_s64(v91);
              v101 = (int8x16_t *)(v38 + 16);
              v102 = (int8x16_t *)(v40 + 16);
              v103 = v92;
              do
              {
                v104 = vorrq_s8(vandq_s8(*v102, v100), vandq_s8(*v101, v99));
                v101[-1] = vorrq_s8(vandq_s8(v102[-1], v100), vandq_s8(v101[-1], v99));
                *v101 = v104;
                v101 += 2;
                v102 += 2;
                v103 -= 4;
              }
              while (v103);
              if (v92 == v37)
                goto LABEL_103;
            }
            else
            {
              v92 = 0;
            }
            v93 = v37 - v92;
            v94 = 8 * v92;
            v95 = (uint64_t *)(v40 + v94);
            v96 = (unint64_t *)(v38 + v94);
            do
            {
              v97 = *v95++;
              *v96 = v97 & v91 | *v96 & v90;
              ++v96;
              --v93;
            }
            while (v93);
LABEL_103:
            *(_DWORD *)(a1 + 8) = v37;
            *(_DWORD *)(a1 + 16) = 0;
            result = 1;
            goto LABEL_131;
          }
        }
        else
        {
          v72 = 0;
          v73 = v37;
          v74 = (unint64_t *)v38;
          v75 = (unint64_t *)v40;
        }
        do
        {
          v87 = *v74++;
          v86 = v87;
          v88 = *v39++;
          v89 = v86 - (v72 + v88);
          v72 = v72 & (v86 == v88);
          if (v86 < v88)
            v72 = 1;
          *v75++ = v89;
          --v73;
        }
        while (v73);
        goto LABEL_97;
      }
    }
    else
    {
      v43 = 0;
      v44 = v37;
      v45 = *(_QWORD **)a1;
    }
    do
    {
      v66 = *v42++;
      v65 = v66;
      v68 = *v41++;
      v67 = v68;
      v47 = __CFADD__(v65, v43);
      v69 = v65 + v43;
      v70 = v47;
      v47 = __CFADD__(v69, v67);
      v71 = v69 + v67;
      if (v47)
        v43 = v70 + 1;
      else
        v43 = v70;
      *v45++ = v71;
      --v44;
    }
    while (v44);
    goto LABEL_75;
  }
  if (!bn_wexpand((uint64_t)v27, v24))
    goto LABEL_130;
  *(_DWORD *)(v25 + 16) = 0;
  *(_DWORD *)(v25 + 8) = v24;
  if (v25 == a3)
    goto LABEL_105;
  if (!bn_wexpand(v25, *(int *)(a3 + 8)))
    goto LABEL_130;
  v28 = *(int *)(a3 + 8);
  if (!(_DWORD)v28)
  {
    *(_DWORD *)(v25 + 8) = 0;
    *(_DWORD *)(v25 + 16) = *(_DWORD *)(a3 + 16);
    goto LABEL_105;
  }
  memcpy(*(void **)v25, *(const void **)a3, 8 * v28);
  v29 = *(int *)(a3 + 8);
  *(_DWORD *)(v25 + 8) = v29;
  *(_DWORD *)(v25 + 16) = *(_DWORD *)(a3 + 16);
  if (v29 <= v24)
  {
LABEL_105:
    if (!bn_wexpand(v25, v24))
      goto LABEL_130;
    v98 = *(int *)(v25 + 8);
    if (v24 != (_DWORD)v98)
      bzero((void *)(*(_QWORD *)v25 + 8 * v98), 8 * (v24 - v98));
    goto LABEL_108;
  }
  v30 = *(char **)v25;
  v31 = v29 - v24;
  if (v31 < 4)
  {
    v32 = 0;
    v33 = v24;
LABEL_126:
    v118 = v29 - v33;
    v119 = &v30[8 * v33];
    do
    {
      v120 = *(_QWORD *)v119;
      v119 += 8;
      *(_QWORD *)&v32 |= v120;
      --v118;
    }
    while (v118);
    goto LABEL_128;
  }
  v33 = (v31 & 0xFFFFFFFFFFFFFFFCLL) + v24;
  v113 = (int8x16_t *)&v30[8 * v24 + 16];
  v114 = 0uLL;
  v115 = v31 & 0xFFFFFFFFFFFFFFFCLL;
  v116 = 0uLL;
  do
  {
    v114 = vorrq_s8(v113[-1], v114);
    v116 = vorrq_s8(*v113, v116);
    v113 += 2;
    v115 -= 4;
  }
  while (v115);
  v117 = vorrq_s8(v116, v114);
  v32 = vorr_s8(*(int8x8_t *)v117.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v117, v117, 8uLL));
  if (v31 != (v31 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_126;
LABEL_128:
  if (v32)
  {
    ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 399);
LABEL_130:
    v25 = 0;
    v34 = *(_DWORD *)(a4 + 8);
    result = (uint64_t)BN_CTX_get(ctx);
    if (result)
      goto LABEL_43;
    goto LABEL_131;
  }
LABEL_108:
  *(_DWORD *)(v25 + 8) = v24;
  v34 = *(_DWORD *)(a4 + 8);
  result = (uint64_t)BN_CTX_get(ctx);
  if (result)
    goto LABEL_43;
LABEL_131:
  if (!*((_BYTE *)ctx + 40))
  {
    v121 = *((_QWORD *)ctx + 1);
    v122 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v122;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v121 + 8 * v122);
  }
  return result;
}

uint64_t bn_mod_sub_consttime(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, BN_CTX *ctx)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v14;
  signed int v15;
  BIGNUM *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  int8x8_t v22;
  unint64_t v23;
  signed int v24;
  uint64_t v25;
  BIGNUM *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  int8x8_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t result;
  int8x16_t *v37;
  int8x16_t v38;
  unint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  signed int v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL8 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t *v104;
  int8x16_t *v105;
  unint64_t v106;
  int8x16_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  int8x16_t *v113;
  int8x16_t v114;
  unint64_t v115;
  int8x16_t v116;
  int8x16_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;

  if (*((_BYTE *)ctx + 40))
  {
LABEL_15:
    v15 = *(_DWORD *)(a4 + 8);
    if (*(_DWORD *)(a2 + 8) < v15)
      goto LABEL_16;
LABEL_25:
    v17 = a2;
    v24 = *(_DWORD *)(a4 + 8);
    if (*(_DWORD *)(a3 + 8) >= v24)
      goto LABEL_55;
    goto LABEL_33;
  }
  v10 = *((_QWORD *)ctx + 4);
  v11 = *((_QWORD *)ctx + 2);
  if (v11 != *((_QWORD *)ctx + 3))
  {
    v14 = (_QWORD *)*((_QWORD *)ctx + 1);
    goto LABEL_14;
  }
  if (v11)
    v12 = (3 * v11) >> 1;
  else
    v12 = 32;
  if (v12 > v11 && v12 >> 61 == 0)
  {
    v14 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v12);
    if (v14)
    {
      *((_QWORD *)ctx + 1) = v14;
      *((_QWORD *)ctx + 3) = v12;
      v11 = *((_QWORD *)ctx + 2);
LABEL_14:
      v14[v11] = v10;
      ++*((_QWORD *)ctx + 2);
      goto LABEL_15;
    }
  }
  *((_WORD *)ctx + 20) = 257;
  v15 = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a2 + 8) >= v15)
    goto LABEL_25;
LABEL_16:
  v16 = BN_CTX_get(ctx);
  v17 = (uint64_t)v16;
  if (!v16)
    goto LABEL_32;
  if (!bn_wexpand((uint64_t)v16, v15))
    goto LABEL_54;
  *(_DWORD *)(v17 + 16) = 0;
  *(_DWORD *)(v17 + 8) = v15;
  if (v17 != a2)
  {
    if (!bn_wexpand(v17, *(int *)(a2 + 8)))
      goto LABEL_54;
    v18 = *(int *)(a2 + 8);
    if ((_DWORD)v18)
    {
      memcpy(*(void **)v17, *(const void **)a2, 8 * v18);
      v19 = *(int *)(a2 + 8);
      *(_DWORD *)(v17 + 8) = v19;
      *(_DWORD *)(v17 + 16) = *(_DWORD *)(a2 + 16);
      if (v19 > v15)
      {
        v20 = *(char **)v17;
        v21 = v19 - v15;
        if (v21 >= 4)
        {
          v23 = (v21 & 0xFFFFFFFFFFFFFFFCLL) + v15;
          v37 = (int8x16_t *)&v20[8 * v15 + 16];
          v38 = 0uLL;
          v39 = v21 & 0xFFFFFFFFFFFFFFFCLL;
          v40 = 0uLL;
          do
          {
            v38 = vorrq_s8(v37[-1], v38);
            v40 = vorrq_s8(*v37, v40);
            v37 += 2;
            v39 -= 4;
          }
          while (v39);
          v41 = vorrq_s8(v40, v38);
          v22 = vorr_s8(*(int8x8_t *)v41.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL));
          if (v21 == (v21 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_52:
            if (v22)
            {
              ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 399);
LABEL_54:
              v17 = 0;
              v24 = *(_DWORD *)(a4 + 8);
              if (*(_DWORD *)(a3 + 8) >= v24)
                goto LABEL_55;
              goto LABEL_33;
            }
            goto LABEL_31;
          }
        }
        else
        {
          v22 = 0;
          v23 = v15;
        }
        v42 = v19 - v23;
        v43 = &v20[8 * v23];
        do
        {
          v44 = *(_QWORD *)v43;
          v43 += 8;
          *(_QWORD *)&v22 |= v44;
          --v42;
        }
        while (v42);
        goto LABEL_52;
      }
    }
    else
    {
      *(_DWORD *)(v17 + 8) = 0;
      *(_DWORD *)(v17 + 16) = *(_DWORD *)(a2 + 16);
    }
  }
  if (!bn_wexpand(v17, v15))
    goto LABEL_54;
  v25 = *(int *)(v17 + 8);
  if (v15 != (_DWORD)v25)
    bzero((void *)(*(_QWORD *)v17 + 8 * v25), 8 * (v15 - v25));
LABEL_31:
  *(_DWORD *)(v17 + 8) = v15;
LABEL_32:
  v24 = *(_DWORD *)(a4 + 8);
  if (*(_DWORD *)(a3 + 8) >= v24)
  {
LABEL_55:
    v27 = a3;
LABEL_56:
    v35 = *(_DWORD *)(a4 + 8);
    result = (uint64_t)BN_CTX_get(ctx);
    if (!result)
      goto LABEL_129;
LABEL_57:
    v45 = result;
    result = bn_wexpand(result, v35);
    if (!(_DWORD)result)
      goto LABEL_129;
    result = 0;
    *(_DWORD *)(v45 + 16) = 0;
    *(_DWORD *)(v45 + 8) = v35;
    if (!v17)
      goto LABEL_129;
    if (!v27)
      goto LABEL_129;
    result = bn_wexpand(a1, *(int *)(a4 + 8));
    if (!(_DWORD)result)
      goto LABEL_129;
    v46 = *(_DWORD *)(a4 + 8);
    if (!v46)
      goto LABEL_120;
    v47 = *(_QWORD *)a1;
    v48 = *(uint64_t **)a4;
    v49 = *(_QWORD *)v45;
    v50 = *(unint64_t **)v27;
    v51 = *(unint64_t **)v17;
    if (v46 >= 4)
    {
      v52 = 0;
      v53 = v46;
      v54 = *(unint64_t **)a1;
      do
      {
        v55 = *v51 - (v52 + *v50);
        v52 = v52 & (*v51 == *v50);
        if (*v51 < *v50)
          v52 = 1;
        *v54 = v55;
        v56 = v51[1];
        v57 = v50[1];
        v58 = v56 - (v57 + v52);
        if (v56 != v57)
          v52 = 0;
        if (v56 < v57)
          v52 = 1;
        v54[1] = v58;
        v59 = v51[2];
        v60 = v50[2];
        v61 = v59 - (v60 + v52);
        if (v59 != v60)
          v52 = 0;
        if (v59 < v60)
          v52 = 1;
        v54[2] = v61;
        v62 = v51[3];
        v63 = v50[3];
        v64 = v62 - (v63 + v52);
        if (v62 != v63)
          v52 = 0;
        if (v62 < v63)
          v52 = 1;
        v54[3] = v64;
        v51 += 4;
        v50 += 4;
        v54 += 4;
        v53 -= 4;
      }
      while (v53 >= 4);
      if (!v53)
      {
LABEL_84:
        if (v46 >= 4)
        {
          v69 = 0;
          v70 = v46;
          v71 = (uint64_t *)v47;
          v72 = (_QWORD *)v49;
          do
          {
            v73 = *v48;
            v74 = __CFADD__(*v71, v69);
            v75 = *v71 + v69;
            v76 = v74;
            v74 = __CFADD__(v75, v73);
            *v72 = v75 + v73;
            v77 = v71[1];
            v78 = v48[1];
            v80 = v74;
            v74 = __CFADD__(v74, v77);
            v79 = v80 + v77;
            v74 |= __CFADD__(v76, v79);
            v79 += v76;
            v81 = v74;
            v74 = __CFADD__(v79, v78);
            v72[1] = v79 + v78;
            v82 = v71[2];
            v83 = v48[2];
            v85 = v74;
            v74 = __CFADD__(v74, v82);
            v84 = v85 + v82;
            v74 |= __CFADD__(v81, v84);
            v84 += v81;
            v86 = v74;
            v72[2] = v84 + v83;
            v87 = v71[3];
            v88 = v48[3];
            v74 = __CFADD__(v88, v87);
            v89 = v88 + v87;
            v90 = v74;
            v74 = __CFADD__(__CFADD__(v84, v83), v89) | __CFADD__(v86, __CFADD__(v84, v83) + v89);
            v91 = v86 + __CFADD__(v84, v83) + v89;
            if (v74)
              v69 = v90 + 1;
            else
              v69 = v90;
            v72[3] = v91;
            v71 += 4;
            v48 += 4;
            v72 += 4;
            v70 -= 4;
          }
          while (v70 >= 4);
          if (!v70)
          {
LABEL_111:
            v99 = 0;
            v100 = -v52;
            v101 = v52 - 1;
            if (v46 >= 4)
            {
              if (v47 >= v49 + 8 * v46 || v49 >= v47 + 8 * v46)
              {
                v102 = (int8x16_t)vdupq_n_s64(v100);
                v99 = v46 & 0xFFFFFFFFFFFFFFFCLL;
                v103 = (int8x16_t)vdupq_n_s64(v101);
                v104 = (int8x16_t *)(v49 + 16);
                v105 = (int8x16_t *)(v47 + 16);
                v106 = v99;
                do
                {
                  v107 = vorrq_s8(vandq_s8(*v105, v103), vandq_s8(*v104, v102));
                  v105[-1] = vorrq_s8(vandq_s8(v105[-1], v103), vandq_s8(v104[-1], v102));
                  *v105 = v107;
                  v104 += 2;
                  v105 += 2;
                  v106 -= 4;
                }
                while (v106);
                if (v99 == v46)
                  goto LABEL_120;
              }
              else
              {
                v99 = 0;
              }
            }
            v108 = v46 - v99;
            v109 = 8 * v99;
            v110 = (unint64_t *)(v47 + v109);
            v111 = (uint64_t *)(v49 + v109);
            do
            {
              v112 = *v111++;
              *v110 = *v110 & v101 | v112 & v100;
              ++v110;
              --v108;
            }
            while (v108);
LABEL_120:
            *(_DWORD *)(a1 + 8) = v46;
            *(_DWORD *)(a1 + 16) = 0;
            result = 1;
            goto LABEL_129;
          }
        }
        else
        {
          v69 = 0;
          v70 = v46;
          v71 = (uint64_t *)v47;
          v72 = (_QWORD *)v49;
        }
        do
        {
          v93 = *v71++;
          v92 = v93;
          v95 = *v48++;
          v94 = v95;
          v74 = __CFADD__(v92, v69);
          v96 = v92 + v69;
          v97 = v74;
          v74 = __CFADD__(v96, v94);
          v98 = v96 + v94;
          if (v74)
            v69 = v97 + 1;
          else
            v69 = v97;
          *v72++ = v98;
          --v70;
        }
        while (v70);
        goto LABEL_111;
      }
    }
    else
    {
      v52 = 0;
      v53 = v46;
      v54 = *(unint64_t **)a1;
    }
    do
    {
      v66 = *v51++;
      v65 = v66;
      v67 = *v50++;
      v68 = v65 - (v52 + v67);
      v52 = v52 & (v65 == v67);
      if (v65 < v67)
        v52 = 1;
      *v54++ = v68;
      --v53;
    }
    while (v53);
    goto LABEL_84;
  }
LABEL_33:
  v26 = BN_CTX_get(ctx);
  v27 = (uint64_t)v26;
  if (!v26)
    goto LABEL_56;
  if (!bn_wexpand((uint64_t)v26, v24))
    goto LABEL_128;
  *(_DWORD *)(v27 + 16) = 0;
  *(_DWORD *)(v27 + 8) = v24;
  if (v27 == a3)
    goto LABEL_42;
  if (!bn_wexpand(v27, *(int *)(a3 + 8)))
    goto LABEL_128;
  v28 = *(int *)(a3 + 8);
  if (!(_DWORD)v28)
  {
    *(_DWORD *)(v27 + 8) = 0;
    *(_DWORD *)(v27 + 16) = *(_DWORD *)(a3 + 16);
    goto LABEL_42;
  }
  memcpy(*(void **)v27, *(const void **)a3, 8 * v28);
  v29 = *(int *)(a3 + 8);
  *(_DWORD *)(v27 + 8) = v29;
  *(_DWORD *)(v27 + 16) = *(_DWORD *)(a3 + 16);
  if (v29 <= v24)
  {
LABEL_42:
    if (!bn_wexpand(v27, v24))
      goto LABEL_128;
    v34 = *(int *)(v27 + 8);
    if (v24 != (_DWORD)v34)
      bzero((void *)(*(_QWORD *)v27 + 8 * v34), 8 * (v24 - v34));
    goto LABEL_45;
  }
  v30 = *(char **)v27;
  v31 = v29 - v24;
  if (v31 < 4)
  {
    v32 = 0;
    v33 = v24;
LABEL_124:
    v118 = v29 - v33;
    v119 = &v30[8 * v33];
    do
    {
      v120 = *(_QWORD *)v119;
      v119 += 8;
      *(_QWORD *)&v32 |= v120;
      --v118;
    }
    while (v118);
    goto LABEL_126;
  }
  v33 = (v31 & 0xFFFFFFFFFFFFFFFCLL) + v24;
  v113 = (int8x16_t *)&v30[8 * v24 + 16];
  v114 = 0uLL;
  v115 = v31 & 0xFFFFFFFFFFFFFFFCLL;
  v116 = 0uLL;
  do
  {
    v114 = vorrq_s8(v113[-1], v114);
    v116 = vorrq_s8(*v113, v116);
    v113 += 2;
    v115 -= 4;
  }
  while (v115);
  v117 = vorrq_s8(v116, v114);
  v32 = vorr_s8(*(int8x8_t *)v117.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v117, v117, 8uLL));
  if (v31 != (v31 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_124;
LABEL_126:
  if (v32)
  {
    ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 399);
LABEL_128:
    v27 = 0;
    v35 = *(_DWORD *)(a4 + 8);
    result = (uint64_t)BN_CTX_get(ctx);
    if (result)
      goto LABEL_57;
    goto LABEL_129;
  }
LABEL_45:
  *(_DWORD *)(v27 + 8) = v24;
  v35 = *(_DWORD *)(a4 + 8);
  result = (uint64_t)BN_CTX_get(ctx);
  if (result)
    goto LABEL_57;
LABEL_129:
  if (!*((_BYTE *)ctx + 40))
  {
    v121 = *((_QWORD *)ctx + 1);
    v122 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v122;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v121 + 8 * v122);
  }
  return result;
}

int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx)
{
  BIGNUM *v10;
  const BIGNUM *v11;
  uint64_t top;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  if (!*((_BYTE *)ctx + 40))
  {
    v18 = *((_QWORD *)ctx + 4);
    v19 = *((_QWORD *)ctx + 2);
    if (v19 == *((_QWORD *)ctx + 3))
    {
      if (v19)
        v20 = (3 * v19) >> 1;
      else
        v20 = 32;
      v21 = v20 > v19 && v20 >> 61 == 0;
      if (!v21 || (v22 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v20)) == 0)
      {
        *((_WORD *)ctx + 20) = 257;
        v10 = BN_CTX_get(ctx);
        if (!v10)
          goto LABEL_39;
        goto LABEL_3;
      }
      *((_QWORD *)ctx + 1) = v22;
      *((_QWORD *)ctx + 3) = v20;
      v19 = *((_QWORD *)ctx + 2);
    }
    else
    {
      v22 = (_QWORD *)*((_QWORD *)ctx + 1);
    }
    v22[v19] = v18;
    ++*((_QWORD *)ctx + 2);
    v10 = BN_CTX_get(ctx);
    if (!v10)
      goto LABEL_39;
    goto LABEL_3;
  }
  v10 = BN_CTX_get(ctx);
  if (!v10)
    goto LABEL_39;
LABEL_3:
  v11 = v10;
  if (a == b)
  {
    LODWORD(v10) = bn_sqr_consttime((uint64_t)v10, (uint64_t)a, ctx);
    if (!(_DWORD)v10)
      goto LABEL_39;
    top = v11->top;
    v13 = top & ((int)top >> 31);
    v23 = 8 * top - 8;
    v15 = v11->top;
    while (1)
    {
      v16 = __OFSUB__(v15--, 1);
      if (v15 < 0 != v16)
        break;
      v24 = *(unint64_t *)((char *)v11->d + v23);
      v23 -= 8;
      if (v24)
      {
LABEL_24:
        v11->top = v15 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    LODWORD(v10) = bn_mul_impl((uint64_t)v10, (uint64_t)a, (uint64_t)b, ctx);
    if (!(_DWORD)v10)
      goto LABEL_39;
    top = v11->top;
    v13 = top & ((int)top >> 31);
    v14 = 8 * top - 8;
    v15 = v11->top;
    while (1)
    {
      v16 = __OFSUB__(v15--, 1);
      if (v15 < 0 != v16)
        break;
      v17 = *(unint64_t *)((char *)v11->d + v14);
      v14 -= 8;
      if (v17)
        goto LABEL_24;
    }
  }
  v11->top = v13;
  if ((top & 0x80000000) == 0)
    v11->neg = 0;
LABEL_27:
  LODWORD(v10) = BN_div(0, r, v11, m, ctx)
              && (!r->neg
               || (m->neg
                 ? (v25 = ((uint64_t (*)(BIGNUM *, BIGNUM *, const BIGNUM *))BN_sub)(r, r, m))
                 : (v25 = ((uint64_t (*)(BIGNUM *, BIGNUM *, const BIGNUM *))BN_add)(r, r, m)),
                   v25));
LABEL_39:
  if (!*((_BYTE *)ctx + 40))
  {
    v26 = *((_QWORD *)ctx + 1);
    v27 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v27;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v26 + 8 * v27);
  }
  return (int)v10;
}

int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
{
  int result;
  uint64_t top;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;

  result = bn_sqr_consttime((uint64_t)r, (uint64_t)a, ctx);
  if (result)
  {
    top = r->top;
    v9 = 8 * top - 8;
    v10 = r->top;
    while (1)
    {
      v11 = __OFSUB__(v10--, 1);
      if (v10 < 0 != v11)
        break;
      v12 = *(unint64_t *)((char *)r->d + v9);
      v9 -= 8;
      if (v12)
      {
        r->top = v10 + 1;
        return BN_div(0, r, r, m, ctx);
      }
    }
    r->top = top & ((int)top >> 31);
    if ((top & 0x80000000) == 0)
      r->neg = 0;
    return BN_div(0, r, r, m, ctx);
  }
  return result;
}

uint64_t bn_mod_lshift_consttime(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int8x8_t v17;
  unint64_t v18;
  uint64_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int8x16_t *v37;
  unint64_t v38;
  BOOL v39;
  unint64_t *v40;
  char v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t *v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  int8x16_t v88;
  int8x16_t v89;
  unint64_t v90;
  int8x16_t *v91;
  int8x16_t *v92;
  int8x16_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  if (a2 == a1)
  {
    if (!a2)
      return 0;
    LODWORD(v11) = *(_DWORD *)(a2 + 8);
    v12 = *(_DWORD *)(a4 + 8);
    v13 = (int)v12;
    if (v11 > v12)
      goto LABEL_6;
LABEL_10:
    result = bn_wexpand(a1, v13);
    if (!(_DWORD)result)
      return result;
    v19 = *(int *)(a1 + 8);
    if (v12 != (_DWORD)v19)
      bzero((void *)(*(_QWORD *)a1 + 8 * v19), 8 * (v13 - v19));
    goto LABEL_21;
  }
  result = bn_wexpand(a1, *(int *)(a2 + 8));
  if (!(_DWORD)result)
    return result;
  v11 = *(int *)(a2 + 8);
  if ((_DWORD)v11)
  {
    memcpy(*(void **)a1, *(const void **)a2, 8 * v11);
    LODWORD(v11) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v12 = *(_DWORD *)(a4 + 8);
  v13 = (int)v12;
  if (v11 <= v12)
    goto LABEL_10;
LABEL_6:
  v14 = (int)v11;
  v15 = *(char **)a1;
  v16 = v14 - v13;
  if (v14 - v13 < 4)
  {
    v17 = 0;
    v18 = v13;
LABEL_16:
    v25 = v14 - v18;
    v26 = &v15[8 * v18];
    do
    {
      v27 = *(_QWORD *)v26;
      v26 += 8;
      *(_QWORD *)&v17 |= v27;
      --v25;
    }
    while (v25);
    goto LABEL_18;
  }
  v18 = (v16 & 0xFFFFFFFFFFFFFFFCLL) + v13;
  v20 = (int8x16_t *)&v15[8 * v13 + 16];
  v21 = 0uLL;
  v22 = v16 & 0xFFFFFFFFFFFFFFFCLL;
  v23 = 0uLL;
  do
  {
    v21 = vorrq_s8(v20[-1], v21);
    v23 = vorrq_s8(*v20, v23);
    v20 += 2;
    v22 -= 4;
  }
  while (v22);
  v24 = vorrq_s8(v23, v21);
  v17 = vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
  if (v16 != (v16 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_16;
LABEL_18:
  if (v17)
  {
    ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 399);
    return 0;
  }
LABEL_21:
  *(_DWORD *)(a1 + 8) = v12;
  if (!*(_BYTE *)(a5 + 40))
  {
    v28 = *(_QWORD *)(a5 + 32);
    v29 = *(_QWORD *)(a5 + 16);
    if (v29 == *(_QWORD *)(a5 + 24))
    {
      if (v29)
        v30 = (3 * v29) >> 1;
      else
        v30 = 32;
      v31 = v30 > v29 && v30 >> 61 == 0;
      if (!v31 || (v32 = OPENSSL_realloc(*(_QWORD **)(a5 + 8), 8 * v30)) == 0)
      {
        *(_WORD *)(a5 + 40) = 257;
        v33 = *(_DWORD *)(a4 + 8);
        result = (uint64_t)BN_CTX_get((BN_CTX *)a5);
        if (!result)
          goto LABEL_96;
        goto LABEL_37;
      }
      *(_QWORD *)(a5 + 8) = v32;
      *(_QWORD *)(a5 + 24) = v30;
      v29 = *(_QWORD *)(a5 + 16);
    }
    else
    {
      v32 = *(_QWORD **)(a5 + 8);
    }
    v32[v29] = v28;
    ++*(_QWORD *)(a5 + 16);
  }
  v33 = *(_DWORD *)(a4 + 8);
  result = (uint64_t)BN_CTX_get((BN_CTX *)a5);
  if (!result)
    goto LABEL_96;
LABEL_37:
  v34 = result;
  result = bn_wexpand(result, v33);
  if ((_DWORD)result)
  {
    *(_DWORD *)(v34 + 16) = 0;
    *(_DWORD *)(v34 + 8) = v33;
    if (a3 >= 1)
    {
      v35 = *(int *)(a4 + 8);
      if ((_DWORD)v35)
      {
        v36 = 0;
        v37 = *(int8x16_t **)a1;
        v38 = *(_QWORD *)v34;
        v39 = *(_QWORD *)a1 >= *(_QWORD *)v34 + 8 * v35 || v38 >= *(_QWORD *)a1 + 8 * v35;
        v40 = *(unint64_t **)a4;
        v41 = !v39;
        while (v35 >= 4)
        {
          v42 = 0;
          v43 = v35;
          v44 = (uint64_t *)v37;
          do
          {
            v45 = v44[1];
            v46 = (unint64_t)*v44 >> 63;
            v47 = v45 >> 63;
            v45 *= 2;
            v39 = __CFADD__(__CFADD__(v42, 2 * *v44), v45);
            v48 = __CFADD__(v42, 2 * *v44) + v45;
            v39 |= __CFADD__(v46, v48);
            *v44 = v42 + 2 * *v44;
            v44[1] = v46 + v48;
            v50 = v44[2];
            v49 = v44[3];
            v51 = v50 >> 63;
            v50 *= 2;
            v53 = v39 + v50;
            v39 = __CFADD__(v39, v50) | __CFADD__(v47, v53);
            v52 = v47 + v53;
            v55 = v39 + 2 * v49;
            v39 = __CFADD__(v39, 2 * v49) | __CFADD__(v51, v55);
            v54 = v51 + v55;
            v42 = v49 >> 63;
            if (v39)
              ++v42;
            v44[2] = v52;
            v44[3] = v54;
            v44 += 4;
            v43 -= 4;
          }
          while (v43 >= 4);
          if (v43)
            goto LABEL_54;
LABEL_62:
          if (v35 < 4)
          {
            v65 = 0;
            v66 = v35;
            v67 = v40;
            v68 = (uint64_t *)v37;
            v69 = (unint64_t *)v38;
            do
            {
LABEL_81:
              v81 = *v68++;
              v80 = v81;
              v82 = *v67++;
              v83 = v80 - (v65 + v82);
              v65 = v65 & (v80 == v82);
              if (v80 < v82)
                v65 = 1;
              *v69++ = v83;
              --v66;
            }
            while (v66);
            goto LABEL_84;
          }
          v65 = 0;
          v66 = v35;
          v67 = v40;
          v68 = (uint64_t *)v37;
          v69 = (unint64_t *)v38;
          do
          {
            v70 = *v68 - (v65 + *v67);
            v65 = v65 & (*v68 == *v67);
            if (*v68 < *v67)
              v65 = 1;
            *v69 = v70;
            v71 = v68[1];
            v72 = v67[1];
            v73 = v71 - (v72 + v65);
            if (v71 != v72)
              v65 = 0;
            if (v71 < v72)
              v65 = 1;
            v69[1] = v73;
            v74 = v68[2];
            v75 = v67[2];
            v76 = v74 - (v75 + v65);
            if (v74 != v75)
              v65 = 0;
            if (v74 < v75)
              v65 = 1;
            v69[2] = v76;
            v77 = v68[3];
            v78 = v67[3];
            v79 = v77 - (v78 + v65);
            if (v77 != v78)
              v65 = 0;
            if (v77 < v78)
              v65 = 1;
            v69[3] = v79;
            v68 += 4;
            v67 += 4;
            v69 += 4;
            v66 -= 4;
          }
          while (v66 >= 4);
          if (v66)
            goto LABEL_81;
LABEL_84:
          v84 = v42 - v65;
          v85 = ~v84;
          if (v35 < 4)
            v86 = 1;
          else
            v86 = v41;
          if ((v86 & 1) != 0)
          {
            v87 = 0;
          }
          else
          {
            v88 = (int8x16_t)vdupq_n_s64(v84);
            v89 = (int8x16_t)vdupq_n_s64(v85);
            v90 = v35 & 0xFFFFFFFFFFFFFFFCLL;
            v91 = (int8x16_t *)(v38 + 16);
            v92 = v37 + 1;
            do
            {
              v93 = vorrq_s8(vandq_s8(*v91, v89), vandq_s8(*v92, v88));
              v92[-1] = vorrq_s8(vandq_s8(v91[-1], v89), vandq_s8(v92[-1], v88));
              *v92 = v93;
              v92 += 2;
              v91 += 2;
              v90 -= 4;
            }
            while (v90);
            v87 = v35 & 0xFFFFFFFFFFFFFFFCLL;
            if ((v35 & 0xFFFFFFFFFFFFFFFCLL) == v35)
              goto LABEL_46;
          }
          v94 = v35 - v87;
          v95 = v87;
          v96 = (uint64_t *)(v38 + 8 * v87);
          v97 = &v37->u64[v95];
          do
          {
            v98 = *v96++;
            *v97 = v98 & v85 | *v97 & v84;
            ++v97;
            --v94;
          }
          while (v94);
LABEL_46:
          if (++v36 == a3)
            goto LABEL_95;
        }
        v42 = 0;
        v43 = v35;
        v44 = (uint64_t *)v37;
LABEL_54:
        v56 = v44;
        v57 = v44;
        do
        {
          v59 = *v56++;
          v58 = v59;
          v61 = *v44++;
          v60 = v61;
          v39 = __CFADD__(v58, v42);
          v62 = v58 + v42;
          v63 = v39;
          v39 = __CFADD__(v62, v60);
          v64 = v62 + v60;
          if (v39)
            v42 = v63 + 1;
          else
            v42 = v63;
          *v57++ = v64;
          --v43;
        }
        while (v43);
        goto LABEL_62;
      }
    }
LABEL_95:
    *(_DWORD *)(a1 + 16) = 0;
    result = 1;
  }
LABEL_96:
  if (!*(_BYTE *)(a5 + 40))
  {
    v99 = *(_QWORD *)(a5 + 8);
    v100 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v100;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v99 + 8 * v100);
  }
  return result;
}

unint64_t BN_div_word(BIGNUM *a, unint64_t w)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _BOOL4 v11;
  char v12;
  uint64_t top;
  unint64_t v14;
  unint64_t *d;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t v24;

  if (!w)
    return -1;
  if (!a->top)
    return 0;
  v4 = HIDWORD(w);
  if (!HIDWORD(w))
    v4 = w;
  v5 = v4 >> 16;
  if (HIDWORD(w))
    v6 = 31;
  else
    v6 = 63;
  if (v5)
    v7 = -16;
  else
    v7 = 0;
  if (v5)
    v4 >>= 16;
  if (v4 <= 0xFF)
    v8 = 0;
  else
    v8 = -8;
  if (v4 > 0xFF)
    v4 >>= 8;
  if (v4 <= 0xF)
    v9 = 0;
  else
    v9 = -4;
  if (v4 > 0xF)
    v4 >>= 4;
  if (v4 <= 3)
    v10 = 0;
  else
    v10 = -2;
  if (v4 > 3)
    v4 >>= 2;
  v11 = v4 > 1;
  v12 = v6 + v7 + v8 + v9 + v10 - v11;
  if (!BN_lshift(a, a, v6 + v7 + v8 + v9 + v10 - v11))
    return -1;
  top = a->top;
  if ((int)top <= 0)
  {
    v19 = 0;
  }
  else
  {
    v14 = w << v12;
    d = a->d;
    v16 = top + 1;
    do
    {
      v17 = d[(v16 - 2)];
      v18 = __udivti3();
      v19 = v17 - v14 * v18;
      d[(v16-- - 2)] = v18;
    }
    while (v16 > 1);
  }
  v21 = 8 * top - 8;
  v22 = top;
  while (1)
  {
    v23 = __OFSUB__(v22--, 1);
    if (v22 < 0 != v23)
      break;
    v24 = *(unint64_t *)((char *)a->d + v21);
    v21 -= 8;
    if (v24)
    {
      a->top = v22 + 1;
      return v19 >> v12;
    }
  }
  a->top = top & ((int)top >> 31);
  if ((top & 0x80000000) == 0)
    a->neg = 0;
  return v19 >> v12;
}

uint64_t bn_mod_u16_consttime(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  unsigned int v3;
  unint64_t v4;
  char v5;
  char v6;
  char v7;
  unsigned int v8;
  char v9;
  unint64_t v10;
  int *v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;

  if (a2 < 2)
    return 0;
  v2 = *(unsigned int *)(a1 + 8);
  if ((int)v2 < 1)
    return 0;
  v3 = 0;
  v4 = a2 - 1;
  v5 = (a2 != 1) | (8 * (v4 > 0xFF));
  if (v4 > 0xFF)
    v4 >>= 8;
  v6 = v5 | (4 * (v4 > 0xF));
  if (v4 > 0xF)
    v4 >>= 4;
  v7 = v6 | (2 * (v4 > 3));
  if (v4 > 3)
    v4 >>= 2;
  if (v4 > 1)
    ++v7;
  v8 = ((a2 | (unint64_t)(1 << (v7 | 0x20u))) - 1) / a2;
  v9 = v7 - 1;
  v10 = v2 + 1;
  do
  {
    v11 = (int *)(*(_QWORD *)a1 + 8 * (v10 - 2));
    v12 = *v11;
    LODWORD(v11) = v11[1];
    v13 = (unsigned __int16)v11 | ((unsigned __int16)(WORD1(v11)
                                                    - ((((v8
                                                                      * (unint64_t)(__PAIR64__(v3, v11) >> 16)) >> 32)
                                                                    + (((__PAIR64__(v3, v11) >> 16)
                                                                                    - ((v8
                                                                                      * (unint64_t)(__PAIR64__(v3, v11) >> 16)) >> 32)) >> 1)) >> v9)
                                                    * a2) << 16);
    HIDWORD(v14) = (_DWORD)v11
                 - ((((v8 * (unint64_t)v13) >> 32)
                                 + ((v13 - ((v8 * (unint64_t)v13) >> 32)) >> 1)) >> v9)
                 * a2;
    LODWORD(v14) = v12;
    v15 = (unsigned __int16)v12 | ((unsigned __int16)(HIWORD(v12)
                                                    - ((((v8 * (unint64_t)(v14 >> 16)) >> 32)
                                                                    + (((v14 >> 16)
                                                                                    - ((v8
                                                                                      * (unint64_t)(v14 >> 16)) >> 32)) >> 1)) >> v9)
                                                    * a2) << 16);
    v3 = v12
       - ((((v8 * (unint64_t)v15) >> 32)
                       + ((v15 - ((v8 * (unint64_t)v15) >> 32)) >> 1)) >> v9)
       * a2;
    --v10;
  }
  while (v10 > 1);
  return (unsigned __int16)(v12
                          - ((((v8 * (unint64_t)v15) >> 32)
                                          + ((v15 - ((v8 * (unint64_t)v15) >> 32)) >> 1)) >> v9)
                          * a2);
}

void DSA_free(DSA *r)
{
  unsigned int *p_meth;
  unsigned int i;
  unsigned int v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  uint64_t *v11;
  uint64_t v12;
  size_t v13;
  uint64_t version;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  size_t v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  size_t v28;
  uint64_t *v29;
  uint64_t v30;
  size_t v31;
  BIGNUM *p;
  int flags;
  unint64_t *d;
  unint64_t *v35;
  uint64_t v36;
  size_t v37;
  int *p_neg;
  uint64_t v39;
  size_t v40;
  BIGNUM *q;
  int v42;
  unint64_t *v43;
  unint64_t *v44;
  uint64_t v45;
  size_t v46;
  int *v47;
  uint64_t v48;
  size_t v49;
  ENGINE **p_engine;
  ENGINE *engine;
  size_t v52;

  if (r)
  {
    p_meth = (unsigned int *)&r[1].meth;
    for (i = atomic_load((unsigned int *)&r[1].meth); i != -1; i = v4)
    {
      if (!i)
        abort();
      v4 = __ldaxr(p_meth);
      if (v4 == i)
      {
        if (!__stlxr(i - 1, p_meth))
        {
          if (i == 1)
          {
            CRYPTO_free_ex_data((int)&g_ex_data_class_0, r, (CRYPTO_EX_DATA *)&r[1].engine);
            v5 = *(uint64_t **)&r->pad;
            if (*(_QWORD *)&r->pad)
            {
              v6 = *((_DWORD *)v5 + 5);
              if ((v6 & 2) == 0)
              {
                v7 = *v5;
                if (*v5)
                {
                  v9 = *(_QWORD *)(v7 - 8);
                  v8 = (void *)(v7 - 8);
                  v10 = v9 + 8;
                  if (v9 != -8)
                    bzero(v8, v10);
                  free(v8);
                  v6 = *((_DWORD *)v5 + 5);
                }
              }
              if ((v6 & 1) != 0)
              {
                v12 = *(v5 - 1);
                v11 = v5 - 1;
                v13 = v12 + 8;
                if (v12 != -8)
                  bzero(v11, v13);
                free(v11);
              }
              else
              {
                *v5 = 0;
              }
            }
            version = r->version;
            if (version)
            {
              v15 = *(_DWORD *)(version + 20);
              if ((v15 & 2) == 0)
              {
                v16 = *(_QWORD *)version;
                if (*(_QWORD *)version)
                {
                  v18 = *(_QWORD *)(v16 - 8);
                  v17 = (void *)(v16 - 8);
                  v19 = v18 + 8;
                  if (v18 != -8)
                    bzero(v17, v19);
                  free(v17);
                  v15 = *(_DWORD *)(version + 20);
                }
              }
              if ((v15 & 1) != 0)
              {
                v21 = *(_QWORD *)(version - 8);
                v20 = (void *)(version - 8);
                v22 = v21 + 8;
                if (v21 != -8)
                  bzero(v20, v22);
                free(v20);
              }
              else
              {
                *(_QWORD *)version = 0;
              }
            }
            v23 = *(uint64_t **)&r->write_params;
            if (v23)
            {
              v24 = *((_DWORD *)v23 + 5);
              if ((v24 & 2) == 0)
              {
                v25 = *v23;
                if (*v23)
                {
                  v27 = *(_QWORD *)(v25 - 8);
                  v26 = (void *)(v25 - 8);
                  v28 = v27 + 8;
                  if (v27 != -8)
                    bzero(v26, v28);
                  free(v26);
                  v24 = *((_DWORD *)v23 + 5);
                }
              }
              if ((v24 & 1) != 0)
              {
                v30 = *(v23 - 1);
                v29 = v23 - 1;
                v31 = v30 + 8;
                if (v30 != -8)
                  bzero(v29, v31);
                free(v29);
              }
              else
              {
                *v23 = 0;
              }
            }
            p = r->p;
            if (p)
            {
              flags = p->flags;
              if ((flags & 2) == 0)
              {
                d = p->d;
                if (p->d)
                {
                  v36 = *(d - 1);
                  v35 = d - 1;
                  v37 = v36 + 8;
                  if (v36 != -8)
                    bzero(v35, v37);
                  free(v35);
                  flags = p->flags;
                }
              }
              if ((flags & 1) != 0)
              {
                v39 = *(_QWORD *)&p[-1].neg;
                p_neg = &p[-1].neg;
                v40 = v39 + 8;
                if (v39 != -8)
                  bzero(p_neg, v40);
                free(p_neg);
              }
              else
              {
                p->d = 0;
              }
            }
            q = r->q;
            if (q)
            {
              v42 = q->flags;
              if ((v42 & 2) == 0)
              {
                v43 = q->d;
                if (q->d)
                {
                  v45 = *(v43 - 1);
                  v44 = v43 - 1;
                  v46 = v45 + 8;
                  if (v45 != -8)
                    bzero(v44, v46);
                  free(v44);
                  v42 = q->flags;
                }
              }
              if ((v42 & 1) != 0)
              {
                v48 = *(_QWORD *)&q[-1].neg;
                v47 = &q[-1].neg;
                v49 = v48 + 8;
                if (v48 != -8)
                  bzero(v47, v49);
                free(v47);
              }
              else
              {
                q->d = 0;
              }
            }
            BN_MONT_CTX_free((BN_MONT_CTX *)r[1].ex_data.sk);
            BN_MONT_CTX_free(*(BN_MONT_CTX **)&r[1].ex_data.dummy);
            pthread_rwlock_destroy((pthread_rwlock_t *)&r->g);
            engine = r[-1].engine;
            p_engine = &r[-1].engine;
            v52 = (size_t)engine + 8;
            if (engine != (ENGINE *)-8)
              bzero(p_engine, v52);
            free(p_engine);
          }
          return;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
}

int DSA_size(const DSA *a1)
{
  uint64_t version;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int result;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  version = a1->version;
  if (!version)
    return 0;
  v2 = *(unsigned int *)(version + 8);
  v3 = v2 & ((int)v2 >> 31);
  v4 = 8 * v2 - 8;
  v5 = *(_DWORD *)(version + 8);
  while (1)
  {
    v6 = __OFSUB__(v5--, 1);
    if (v5 < 0 != v6)
      break;
    v7 = *(_QWORD *)version;
    v8 = *(_QWORD *)(*(_QWORD *)version + v4);
    v4 -= 8;
    if (v8)
    {
      v3 = v5 + 1;
      goto LABEL_10;
    }
  }
  if ((v2 & 0x80000000) == 0)
  {
    v10 = 0;
    v11 = 1;
    goto LABEL_26;
  }
  v7 = *(_QWORD *)version;
LABEL_10:
  v12 = v3 - 1;
  v13 = *(_QWORD *)(v7 + 8 * v12);
  v14 = v13 != 0;
  v15 = HIDWORD(v13) != 0;
  if (HIDWORD(v13))
    v13 >>= 32;
  v16 = v13 >> 16 != 0;
  if (v13 >> 16)
    v13 >>= 16;
  v17 = v13 > 0xFF;
  if (v13 > 0xFF)
    v13 >>= 8;
  v18 = v13 > 0xF;
  if (v13 > 0xF)
    v13 >>= 4;
  v19 = v13 > 3;
  if (v13 > 3)
    v13 >>= 2;
  v20 = v14 | (v12 << 6) | (32 * v15) | (16 * v16) | (8 * v17) | (4 * v18) | (2 * v19);
  if (v13 > 1)
    ++v20;
  v21 = v20 + 7;
  v10 = (v20 + 7) >> 3;
  if (v21 >= 0x3F8)
  {
    v22 = v10 + 1;
    v11 = 1;
    do
    {
      ++v11;
      v23 = v22 > 0xFF;
      v22 >>= 8;
    }
    while (v23);
  }
  else
  {
    v11 = 1;
  }
LABEL_26:
  result = 0;
  v24 = v10 + v11 + 2;
  if (v24 >= v10 && (v24 & 0x8000000000000000) == 0)
  {
    v25 = 2 * v24;
    if (v24 >= 0x40)
    {
      v26 = 1;
      v27 = v25;
      do
      {
        ++v26;
        v23 = v27 > 0xFF;
        v27 >>= 8;
      }
      while (v23);
    }
    else
    {
      v26 = 1;
    }
    v28 = v26 + (v25 | 1);
    if (v28 >= v25)
      return v28;
    else
      return 0;
  }
  return result;
}

uint64_t dsa_check_key(const BIGNUM **a1)
{
  const BIGNUM *v1;
  const BIGNUM *v3;
  const BIGNUM *v4;
  uint64_t top;
  int8x16_t *d;
  unint64_t v8;
  int8x8_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t *v19;
  unint64_t v20;
  int8x8_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t *v31;
  unint64_t v32;
  int8x8_t v33;
  int8x16_t *v34;
  int8x16_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  int v42;
  const BIGNUM *v43;
  uint64_t v44;
  int8x16_t *v45;
  unint64_t v46;
  int8x8_t v47;
  int8x16_t *v48;
  int8x16_t v49;
  unint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  const BIGNUM *v56;
  uint64_t v57;
  int8x16_t *v58;
  unint64_t v59;
  int8x8_t v60;
  _BOOL4 v61;
  int8x16_t *v62;
  int8x16_t v63;
  unint64_t v64;
  int8x16_t v65;
  int8x16_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;

  v1 = *a1;
  if (!*a1 || (v3 = a1[1]) == 0 || (v4 = a1[2]) == 0)
  {
    ERR_put_error(10, 0, 101, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", 75);
    return 0;
  }
  if (v1->neg || v3->neg || (top = v1->top, !(_DWORD)top))
  {
LABEL_6:
    ERR_put_error(10, 0, 107, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", 92);
    return 0;
  }
  d = (int8x16_t *)v1->d;
  if (top < 4)
  {
    v8 = 0;
    v9 = 0;
LABEL_14:
    v15 = top - v8;
    v16 = &d->i64[v8];
    do
    {
      v17 = *v16++;
      *(_QWORD *)&v9 |= v17;
      --v15;
    }
    while (v15);
    goto LABEL_16;
  }
  v8 = top & 0xFFFFFFFFFFFFFFFCLL;
  v10 = d + 1;
  v11 = 0uLL;
  v12 = top & 0xFFFFFFFFFFFFFFFCLL;
  v13 = 0uLL;
  do
  {
    v11 = vorrq_s8(v10[-1], v11);
    v13 = vorrq_s8(*v10, v13);
    v10 += 2;
    v12 -= 4;
  }
  while (v12);
  v14 = vorrq_s8(v13, v11);
  v9 = vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
  if (v8 != top)
    goto LABEL_14;
LABEL_16:
  if (!*(_QWORD *)&v9)
    goto LABEL_6;
  v18 = v3->top;
  if (!(_DWORD)v18)
    goto LABEL_6;
  v19 = (int8x16_t *)v3->d;
  if (v18 < 4)
  {
    v20 = 0;
    v21 = 0;
LABEL_23:
    v27 = v18 - v20;
    v28 = &v19->i64[v20];
    do
    {
      v29 = *v28++;
      *(_QWORD *)&v21 |= v29;
      --v27;
    }
    while (v27);
    goto LABEL_25;
  }
  v20 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  v22 = v19 + 1;
  v23 = 0uLL;
  v24 = v18 & 0xFFFFFFFFFFFFFFFCLL;
  v25 = 0uLL;
  do
  {
    v23 = vorrq_s8(v22[-1], v23);
    v25 = vorrq_s8(*v22, v25);
    v22 += 2;
    v24 -= 4;
  }
  while (v24);
  v26 = vorrq_s8(v25, v23);
  v21 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
  if (v20 != v18)
    goto LABEL_23;
LABEL_25:
  if ((int)top < 1)
    goto LABEL_6;
  if (!*(_QWORD *)&v21)
    goto LABEL_6;
  if ((int)v18 < 1)
    goto LABEL_6;
  if ((d->i64[0] & 1) == 0)
    goto LABEL_6;
  if ((v19->i8[0] & 1) == 0)
    goto LABEL_6;
  if ((BN_cmp(a1[1], v1) & 0x80000000) == 0)
    goto LABEL_6;
  if (v4->neg)
    goto LABEL_6;
  v30 = v4->top;
  if (!(_DWORD)v30)
    goto LABEL_6;
  v31 = (int8x16_t *)v4->d;
  if (v30 < 4)
  {
    v32 = 0;
    v33 = 0;
LABEL_38:
    v39 = v30 - v32;
    v40 = &v31->i64[v32];
    do
    {
      v41 = *v40++;
      *(_QWORD *)&v33 |= v41;
      --v39;
    }
    while (v39);
    goto LABEL_40;
  }
  v32 = v30 & 0xFFFFFFFFFFFFFFFCLL;
  v34 = v31 + 1;
  v35 = 0uLL;
  v36 = v30 & 0xFFFFFFFFFFFFFFFCLL;
  v37 = 0uLL;
  do
  {
    v35 = vorrq_s8(v34[-1], v35);
    v37 = vorrq_s8(*v34, v37);
    v34 += 2;
    v36 -= 4;
  }
  while (v36);
  v38 = vorrq_s8(v37, v35);
  v33 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
  if (v32 != v30)
    goto LABEL_38;
LABEL_40:
  if (!*(_QWORD *)&v33 || (BN_cmp(v4, v1) & 0x80000000) == 0)
    goto LABEL_6;
  v42 = BN_num_bits(v3);
  if (v42 != 160 && v42 != 224 && v42 != 256)
  {
    ERR_put_error(10, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", 99);
    return 0;
  }
  if (BN_num_bits(v1) >= 0x2711)
  {
    ERR_put_error(10, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", 106);
    return 0;
  }
  v43 = a1[3];
  if (v43)
  {
    if (v43->neg)
      goto LABEL_49;
    v44 = v43->top;
    if (!(_DWORD)v44)
      goto LABEL_49;
    v45 = (int8x16_t *)v43->d;
    if (v44 >= 4)
    {
      v46 = v44 & 0xFFFFFFFFFFFFFFFCLL;
      v48 = v45 + 1;
      v49 = 0uLL;
      v50 = v44 & 0xFFFFFFFFFFFFFFFCLL;
      v51 = 0uLL;
      do
      {
        v49 = vorrq_s8(v48[-1], v49);
        v51 = vorrq_s8(*v48, v51);
        v48 += 2;
        v50 -= 4;
      }
      while (v50);
      v52 = vorrq_s8(v51, v49);
      v47 = vorr_s8(*(int8x8_t *)v52.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
      if (v46 == v44)
      {
LABEL_59:
        if (*(_QWORD *)&v47 && BN_cmp(v43, v1) < 0)
          goto LABEL_61;
LABEL_49:
        ERR_put_error(10, 0, 107, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", 114);
        return 0;
      }
    }
    else
    {
      v46 = 0;
      v47 = 0;
    }
    v53 = v44 - v46;
    v54 = &v45->i64[v46];
    do
    {
      v55 = *v54++;
      *(_QWORD *)&v47 |= v55;
      --v53;
    }
    while (v53);
    goto LABEL_59;
  }
LABEL_61:
  v56 = a1[4];
  if (!v56)
    return 1;
  if (v56->neg)
  {
LABEL_75:
    ERR_put_error(10, 0, 107, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", 125);
    return 0;
  }
  v57 = v56->top;
  if ((_DWORD)v57)
  {
    v58 = (int8x16_t *)v56->d;
    if (v57 >= 4)
    {
      v59 = v57 & 0xFFFFFFFFFFFFFFFCLL;
      v62 = v58 + 1;
      v63 = 0uLL;
      v64 = v57 & 0xFFFFFFFFFFFFFFFCLL;
      v65 = 0uLL;
      do
      {
        v63 = vorrq_s8(v62[-1], v63);
        v65 = vorrq_s8(*v62, v65);
        v62 += 2;
        v64 -= 4;
      }
      while (v64);
      v66 = vorrq_s8(v65, v63);
      v60 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
      if (v59 == v57)
        goto LABEL_72;
    }
    else
    {
      v59 = 0;
      v60 = 0;
    }
    v67 = v57 - v59;
    v68 = &v58->i64[v59];
    do
    {
      v69 = *v68++;
      *(_QWORD *)&v60 |= v69;
      --v67;
    }
    while (v67);
LABEL_72:
    v61 = *(_QWORD *)&v60 == 0;
    goto LABEL_73;
  }
  v61 = 1;
LABEL_73:
  if (v61 || BN_cmp(v56, v3) >= 0)
    goto LABEL_75;
  return 1;
}

BOOL parse_integer(unsigned __int8 **a1, _QWORD *a2)
{
  char *v4;

  v4 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v4)
  {
    *(_QWORD *)v4 = 24;
    *((_QWORD *)v4 + 2) = 0;
    *((_QWORD *)v4 + 3) = 0x100000000;
    *((_QWORD *)v4 + 1) = 0;
    *a2 = v4 + 8;
    return BN_parse_asn1_unsigned(a1, (BIGNUM *)(v4 + 8));
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    *a2 = 0;
    return 0;
  }
}

DSA *DSA_parse_parameters(unsigned __int8 **a1)
{
  char *v2;
  _QWORD *v3;
  DSA *v4;
  char *v5;
  char *v6;
  char *v7;
  unsigned __int8 *v9;
  unint64_t v10;
  int v11;
  unint64_t v12;

  v2 = (char *)malloc_type_malloc(0x118uLL, 0x30772F57uLL);
  if (!v2)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v3 = v2;
  *(_QWORD *)v2 = 272;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (DSA *)(v2 + 8);
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *((_DWORD *)v2 + 66) = 1;
  *(_OWORD *)(v2 + 248) = 0u;
  if (pthread_rwlock_init((pthread_rwlock_t *)(v2 + 48), 0))
    abort();
  v3[34] = 0;
  v9 = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  if (!cbs_get_any_asn1_element(a1, &v9, &v11, &v12, 0, 0, 0) || v11 != 536870928 || v10 < v12)
    goto LABEL_19;
  v9 += v12;
  v10 -= v12;
  v5 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v5)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    *(_QWORD *)&v4->pad = 0;
    goto LABEL_19;
  }
  *(_QWORD *)v5 = 24;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = 0x100000000;
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)&v4->pad = v5 + 8;
  if (!BN_parse_asn1_unsigned(&v9, (BIGNUM *)(v5 + 8)))
    goto LABEL_19;
  v6 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v6)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v3[2] = 0;
    goto LABEL_19;
  }
  *(_QWORD *)v6 = 24;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0x100000000;
  *((_QWORD *)v6 + 1) = 0;
  v3[2] = v6 + 8;
  if (!BN_parse_asn1_unsigned(&v9, (BIGNUM *)(v6 + 8)))
  {
LABEL_19:
    ERR_put_error(10, 0, 105, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", 230);
LABEL_20:
    DSA_free(v4);
    return 0;
  }
  v7 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v7)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v3[3] = 0;
    goto LABEL_19;
  }
  *(_QWORD *)v7 = 24;
  *((_QWORD *)v7 + 2) = 0;
  *((_QWORD *)v7 + 3) = 0x100000000;
  *((_QWORD *)v7 + 1) = 0;
  v3[3] = v7 + 8;
  if (!BN_parse_asn1_unsigned(&v9, (BIGNUM *)(v7 + 8)) || v10)
    goto LABEL_19;
  if (!dsa_check_key((const BIGNUM **)v4))
    goto LABEL_20;
  return v4;
}

uint64_t DSA_marshal_parameters(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  _OWORD v7[3];
  _BYTE *v8;

  memset(v7, 0, sizeof(v7));
  if (!CBB_flush(a1))
    goto LABEL_13;
  v8 = 0;
  if (!CBB_add_space((uint64_t)a1, &v8, 1))
    goto LABEL_13;
  *v8 = 48;
  if (!cbb_add_child((uint64_t)a1, (uint64_t)v7, 1u, 1))
    goto LABEL_13;
  if (!*a2)
    goto LABEL_12;
  if (!BN_marshal_asn1((uint64_t *)v7, *a2))
    goto LABEL_13;
  v4 = a2[1];
  if (!v4)
    goto LABEL_12;
  if (!BN_marshal_asn1((uint64_t *)v7, v4))
    goto LABEL_13;
  v5 = a2[2];
  if (!v5)
  {
LABEL_12:
    ERR_put_error(10, 0, 67, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", 145);
    goto LABEL_13;
  }
  if (BN_marshal_asn1((uint64_t *)v7, v5) && CBB_flush(a1))
    return 1;
LABEL_13:
  ERR_put_error(10, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", 250);
  return 0;
}

const BIGNUM **DSA_parse_private_key(unsigned __int8 **a1)
{
  char *v2;
  _QWORD *v3;
  const BIGNUM **v4;
  int v5;
  int v6;
  char *v8;
  const BIGNUM **v9;
  char *v10;
  BIGNUM *v11;
  BIGNUM *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;

  v2 = (char *)malloc_type_malloc(0x118uLL, 0x30772F57uLL);
  if (!v2)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v3 = v2;
  *(_QWORD *)v2 = 272;
  *(_OWORD *)(v2 + 8) = 0u;
  v4 = (const BIGNUM **)(v2 + 8);
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 264) = 0u;
  *((_DWORD *)v2 + 66) = 1;
  *(_OWORD *)(v2 + 248) = 0u;
  if (pthread_rwlock_init((pthread_rwlock_t *)(v2 + 48), 0))
    abort();
  v3[34] = 0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v17 = 0;
  v16 = 0;
  if (!cbs_get_any_asn1_element(a1, &v14, &v16, &v17, 0, 0, 0)
    || v16 != 536870928
    || v15 < v17
    || (v14 += v17, v15 -= v17, !CBS_get_asn1_uint64(&v14, &v13)))
  {
    v5 = 105;
    v6 = 266;
    goto LABEL_10;
  }
  if (!v13)
  {
    v8 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    v9 = v4;
    if (v8)
    {
      *(_QWORD *)v8 = 24;
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 3) = 0x100000000;
      *((_QWORD *)v8 + 1) = 0;
      *v4 = (const BIGNUM *)(v8 + 8);
      if (!BN_parse_asn1_unsigned(&v14, (BIGNUM *)(v8 + 8)))
      {
LABEL_28:
        v5 = 105;
        v6 = 281;
        goto LABEL_10;
      }
      v9 = (const BIGNUM **)(v3 + 2);
      v10 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
      if (v10)
      {
        *(_QWORD *)v10 = 24;
        *((_QWORD *)v10 + 2) = 0;
        *((_QWORD *)v10 + 3) = 0x100000000;
        *((_QWORD *)v10 + 1) = 0;
        *v9 = (const BIGNUM *)(v10 + 8);
        if (BN_parse_asn1_unsigned(&v14, (BIGNUM *)(v10 + 8)))
        {
          v11 = BN_new();
          v3[3] = v11;
          if (v11)
          {
            if (BN_parse_asn1_unsigned(&v14, v11))
            {
              v12 = BN_new();
              v3[4] = v12;
              if (v12)
              {
                if (BN_parse_asn1_unsigned(&v14, v12) && parse_integer(&v14, v3 + 5) && !v15)
                {
                  if (dsa_check_key(v4))
                    return v4;
                  goto LABEL_11;
                }
              }
            }
          }
        }
        goto LABEL_28;
      }
    }
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    *v9 = 0;
    goto LABEL_28;
  }
  v5 = 104;
  v6 = 271;
LABEL_10:
  ERR_put_error(10, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/dsa/dsa_asn1.c", v6);
LABEL_11:
  DSA_free((DSA *)v4);
  return 0;
}

void dtls1_on_handshake_complete(ssl_st *a1)
{
  uint64_t v1;
  char *v2;
  char v3;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;

  v1 = *(_QWORD *)&a1->server;
  *(_DWORD *)(v1 + 324) = 0;
  *(_QWORD *)(v1 + 316) = 0;
  *(_QWORD *)(v1 + 308) = 0;
  v2 = *(char **)&a1->server;
  *((_DWORD *)v2 + 82) = a1->init_buf;
  v3 = *v2;
  if ((*v2 & 4) != 0)
  {
    if (v2[296])
    {
      v5 = 0;
      v6 = 128;
      do
      {
        v7 = &v2[v6];
        v8 = *(_QWORD *)&v2[v6];
        if (v8)
        {
          v10 = *(_QWORD *)(v8 - 8);
          v9 = (void *)(v8 - 8);
          v11 = v10 + 8;
          if (v10 != -8)
            bzero(v9, v11);
          free(v9);
        }
        *(_QWORD *)v7 = 0;
        *((_QWORD *)v7 + 1) = 0;
        ++v5;
        v2 = *(char **)&a1->server;
        v6 += 24;
      }
      while (v5 < v2[296]);
      v3 = *v2;
    }
    *((_WORD *)v2 + 148) = 0;
    *((_DWORD *)v2 + 75) = 0;
    *v2 = v3 & 0xFD;
    **(_BYTE **)&a1->server &= ~4u;
  }
}

uint64_t dtls1_set_read_state(bssl *a1, const ssl_st *a2, uint64_t *a3)
{
  int v4;
  _BOOL4 has_unprocessed_handshake_data;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  _BYTE *v16;

  v4 = (int)a2;
  has_unprocessed_handshake_data = bssl::dtls_has_unprocessed_handshake_data(a1, a2);
  if (has_unprocessed_handshake_data)
  {
    ERR_put_error(16, 0, 255, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/dtls_method.cc", 86);
    bssl::ssl_send_alert(a1, (ssl_st *)2, 10);
    return !has_unprocessed_handshake_data;
  }
  else
  {
    v8 = *((_QWORD *)a1 + 7);
    ++*(_WORD *)(v8 + 2);
    *(_OWORD *)(v8 + 8) = 0u;
    *(_OWORD *)(v8 + 24) = 0u;
    *(_QWORD *)(v8 + 40) = 0;
    v9 = (_QWORD *)*((_QWORD *)a1 + 6);
    *v9 = 0;
    v10 = *a3;
    *a3 = 0;
    v11 = v9[33];
    v9[33] = v10;
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        (*(void (**)(uint64_t))(v12 + 24))(v11 + 8);
        *(_QWORD *)(v11 + 8) = 0;
      }
      v14 = *(_QWORD *)(v11 - 8);
      v13 = (void *)(v11 - 8);
      v15 = v14 + 8;
      if (v14 != -8)
        bzero(v13, v15);
      free(v13);
    }
    v16 = (_BYTE *)*((_QWORD *)a1 + 7);
    *(_DWORD *)(*((_QWORD *)a1 + 6) + 200) = v4;
    *v16 &= ~1u;
    return 1;
  }
}

uint64_t dtls1_set_write_state(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  size_t v21;

  v7 = *(_QWORD *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  ++*(_WORD *)(v6 + 4);
  v8 = *(_QWORD *)(v7 + 8);
  *(_QWORD *)(v7 + 8) = 0;
  v9 = *(_QWORD *)(v7 + 272);
  *(_QWORD *)(v7 + 272) = 0;
  v10 = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 56) = v8;
  *(_QWORD *)(v6 + 64) = v9;
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v11)
    {
      (*(void (**)(uint64_t))(v11 + 24))(v10 + 8);
      *(_QWORD *)(v10 + 8) = 0;
    }
    v13 = *(_QWORD *)(v10 - 8);
    v12 = (void *)(v10 - 8);
    v14 = v13 + 8;
    if (v13 != -8)
      bzero(v12, v14);
    free(v12);
  }
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *a3;
  *a3 = 0;
  v17 = *(_QWORD *)(v15 + 272);
  *(_QWORD *)(v15 + 272) = v16;
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (v18)
    {
      (*(void (**)(uint64_t))(v18 + 24))(v17 + 8);
      *(_QWORD *)(v17 + 8) = 0;
    }
    v20 = *(_QWORD *)(v17 - 8);
    v19 = (void *)(v17 - 8);
    v21 = v20 + 8;
    if (v20 != -8)
      bzero(v19, v21);
    free(v19);
  }
  *(_DWORD *)(*(_QWORD *)(a1 + 48) + 204) = a2;
  return 1;
}

uint64_t bssl::dtls_open_record(_QWORD *a1, _BYTE *a2, uint64_t a3, unint64_t *a4, _BYTE *a5, unsigned __int8 *a6, unint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  int v19;
  __int16 v20;
  bssl::SSLAEADContext *v21;
  int v22;
  int v23;
  uint64_t v24;
  void (*v25)(_QWORD, _QWORD, uint64_t, unsigned __int8 *, uint64_t, _QWORD *, _QWORD);
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  BOOL v30;
  unint64_t v31;
  __int128 v32;
  __int16 v33;
  int v34;
  unint64_t v35;

  *a4 = 0;
  v8 = a1[6];
  if (*(_DWORD *)(v8 + 172) == 1)
    return 3;
  if (!a7)
    return 2;
  if (a7 < 3)
    goto LABEL_23;
  if (a7 - 3 < 8)
    goto LABEL_23;
  if (a7 - 11 < 2)
    goto LABEL_23;
  v13 = __rev16(*(unsigned __int16 *)(a6 + 11));
  v14 = a7 - 13 - v13;
  if (a7 - 13 < v13 || v13 >= 0x4141)
    goto LABEL_23;
  v34 = *a6;
  v19 = a6[1];
  v20 = _byteswap_ushort(*(_WORD *)(a6 + 1));
  v35 = *(_QWORD *)(a6 + 3);
  v21 = *(bssl::SSLAEADContext **)(v8 + 264);
  if (*(_QWORD *)v21)
  {
    v22 = a6[2] | (v19 << 8);
    v23 = bssl::SSLAEADContext::RecordVersion(v21);
    v20 = v22;
    if (v22 == v23)
      goto LABEL_11;
LABEL_23:
    *a4 = a7;
    return 1;
  }
  if (v19 != 254)
    goto LABEL_23;
LABEL_11:
  if (a7 >= 0xD)
    v24 = 13;
  else
    v24 = a7;
  v25 = (void (*)(_QWORD, _QWORD, uint64_t, unsigned __int8 *, uint64_t, _QWORD *, _QWORD))a1[8];
  if (v25)
  {
    v33 = v20;
    v26 = v24;
    v25(0, 0, 256, a6, v24, a1, a1[9]);
    v24 = v26;
    v20 = v33;
  }
  v27 = bswap64(v35);
  v28 = a1[7];
  if (HIWORD(v27) != *(unsigned __int16 *)(v28 + 2))
    goto LABEL_29;
  v29 = *(_QWORD *)(v28 + 40);
  v30 = v29 >= v27;
  v31 = v29 - v27;
  if (v30 && (v31 > 0xFF || ((*(_QWORD *)(v28 + 8 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1) != 0))
    goto LABEL_29;
  *(_QWORD *)&v32 = a6 + 13;
  *((_QWORD *)&v32 + 1) = v13;
  if (!bssl::SSLAEADContext::Open(*(int8x16_t **)(a1[6] + 264), a3, v34, v20, v27, (uint64_t)a6, v24, a8, v32))
  {
    ERR_clear_error();
LABEL_29:
    *a4 = a7 - v14;
    return 1;
  }
  *a4 = a7 - v14;
  if (*(_QWORD *)(a3 + 8) <= 0x4000uLL)
  {
    bssl::dtls1_bitmap_record((bssl *)(a1[7] + 8), (DTLS1_BITMAP *)v27);
    if (v34 == 21)
    {
      return bssl::ssl_process_alert((uint64_t)a1, a5, *(unsigned __int8 **)a3, *(_QWORD *)(a3 + 8));
    }
    else
    {
      result = 0;
      *(_BYTE *)(a1[6] + 211) = 0;
      *a2 = v34;
    }
  }
  else
  {
    ERR_put_error(16, 0, 136, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/dtls_record.cc", 240);
    *a5 = 22;
    return 4;
  }
  return result;
}

void bssl::dtls1_bitmap_record(bssl *this, DTLS1_BITMAP *a2)
{
  _QWORD *v4;
  DTLS1_BITMAP *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  bssl *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;

  v4 = (_QWORD *)((char *)this + 32);
  v5 = (DTLS1_BITMAP *)*((_QWORD *)this + 4);
  v6 = (char *)a2 - (char *)v5;
  if (a2 > v5)
  {
    if (v6 >= 0x100)
    {
      *(_OWORD *)this = 0u;
      *((_OWORD *)this + 1) = 0u;
    }
    else
    {
      v8 = 256 - v6;
      v9 = (256 - v6) >> 6;
      if (((256 - (_DWORD)v6) & 0x3F) != 0)
      {
        v10 = ((*((_QWORD *)this + v9) & (0xFFFFFFFFFFFFFFFFLL >> -(((_BYTE)v5 - (_BYTE)a2) & 0x3F))) << (a2 - v5)) | *((_QWORD *)this + 3) & ~(-1 << (a2 - v5));
        *((_QWORD *)this + 3) = v10;
        v11 = v8 & 0xFFFFFFFFFFFFFFC0;
        if ((v8 & 0xFFFFFFFFFFFFFFC0) != 0)
        {
          v12 = v6 & 0x3F;
          v13 = 64 - v12;
          v14 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v12;
          v15 = this;
          do
          {
            v16 = v11;
            v17 = *((_QWORD *)v15 + v9 - 1);
            v18 = (v17 >> v13) | v10 & ~v14;
            v10 = *((_QWORD *)v15 + 2) & v14 | (v17 << v12);
            *((_QWORD *)v15 + 2) = v10;
            *((_QWORD *)v15 + 3) = v18;
            v11 = v16 - 64;
            v15 = (bssl *)((char *)v15 - 8);
          }
          while (v16 > 0x7F);
          if (v16 != 64)
          {
            v19 = *((_QWORD *)v15 + v9 - 1);
            v20 = v11 >= v12 ? v6 & 0x3F : v16 - 64;
            *((_QWORD *)v15 + 3) = (v19 >> v13) | v10 & ~((-1 << (v12 - v20)) & v14);
            if ((uint64_t)(v11 - v20) >= 1)
            {
              if (v11 < v12)
                LOBYTE(v12) = v16 - 64;
              *((_QWORD *)v15 + 2) = *((_QWORD *)v15 + 2) & ~(-1 << (v12 - v11)) | (v19 << (v12 + v11));
            }
          }
        }
      }
      else
      {
        v21 = &v4[-v9];
        if (v6 <= 0xC0)
          memmove(&v4[-v9], this, 8 * v9);
        if ((-(char)v6 & 0x3F) != 0)
          *(v21 - 1) = *(v21 - 1) & ~(-1 << -(-(char)v6 & 0x3F)) | *((_QWORD *)this - 1) & (-1 << -(-(char)v6 & 0x3F));
      }
      if (a2 != v5)
      {
        if (v6 >= 0x40)
          bzero(this, 8 * (v6 >> 6));
        if ((v6 & 0x3F) != 0)
          *((_QWORD *)this + (v6 >> 6)) &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v6 & 0x3F));
      }
    }
    *v4 = a2;
    v7 = 0;
    goto LABEL_28;
  }
  v7 = (char *)v5 - (char *)a2;
  if ((unint64_t)((char *)v5 - (char *)a2) <= 0xFF)
LABEL_28:
    *(_QWORD *)((char *)this + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
}

BOOL bssl::dtls_seal_record(_QWORD *a1, unint64_t a2, _QWORD *a3, unint64_t a4, __int8 a5, char *a6, size_t a7, int a8)
{
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int8x16_t **v20;
  _QWORD *v21;
  _QWORD *v22;
  int8x16_t **v23;
  int v24;
  int v25;
  unsigned int v26;
  int8x16_t *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t (*v31)(unint64_t *, size_t, _QWORD);
  uint64_t v32;
  unint64_t v33;
  _BOOL8 v34;
  void (*v35)(uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD *, _QWORD);
  __int128 v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;

  if (!a8)
  {
    v15 = (uint64_t *)(a1[7] + 64);
    if (a2 + a4 <= (unint64_t)a6)
      goto LABEL_11;
LABEL_5:
    if ((unint64_t)&a6[a7] <= a2)
      goto LABEL_11;
    v16 = *v15;
    if ((*(_BYTE *)(v16 + 609) & 1) != 0)
    {
      v17 = *(unsigned __int8 *)(v16 + 605) + 13;
      if (v17 > a4)
        goto LABEL_22;
    }
    else
    {
      v17 = 13;
      if (a4 < 0xD)
        goto LABEL_22;
    }
    if ((char *)(a2 + v17) == a6)
      goto LABEL_11;
LABEL_22:
    v24 = 189;
    v25 = 286;
    goto LABEL_43;
  }
  v15 = (uint64_t *)(a1[6] + 272);
  if (a2 + a4 > (unint64_t)a6)
    goto LABEL_5;
LABEL_11:
  v19 = a1[6];
  v18 = a1[7];
  v20 = (int8x16_t **)(v19 + 272);
  v21 = (_QWORD *)(v19 + 8);
  if (a8)
    v22 = v21;
  else
    v22 = (_QWORD *)(v18 + 56);
  if (a8)
    v23 = v20;
  else
    v23 = (int8x16_t **)(v18 + 64);
  if (a4 <= 0xC)
  {
    v24 = 121;
    v25 = 302;
LABEL_43:
    ERR_put_error(16, 0, v24, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/dtls_record.cc", v25);
    return 0;
  }
  v26 = *(unsigned __int16 *)(v18 + 4);
  v27 = *v23;
  *(_BYTE *)a2 = a5;
  v28 = *(_QWORD *)(a1[6] + 272);
  v29 = *(unsigned __int16 *)(v28 + 606);
  if (v29 - 769 >= 4)
  {
    if (!*(_WORD *)(v28 + 606))
    {
      if (*(_BYTE *)(v28 + 608))
        v29 = -257;
      else
        v29 = 769;
    }
  }
  else if (v29 > 0x303)
  {
    v29 = 771;
  }
  *(_WORD *)(a2 + 1) = bswap32(v29) >> 16;
  if ((unint64_t)(*v22 - 0xFFFFFFFFFFFFLL) <= 0xFFFEFFFFFFFFFFFFLL)
  {
    v24 = 69;
    v25 = 315;
    goto LABEL_43;
  }
  v30 = *v22 | ((__PAIR64__(v26, a8) - 1) >> 32 << 48);
  *(_QWORD *)(a2 + 3) = bswap64(v30);
  if (!v27->i64[0])
  {
    v32 = 0;
    v39 = a3;
    if ((v27[38].i8[1] & 1) != 0)
      goto LABEL_37;
    goto LABEL_34;
  }
  v31 = *(uint64_t (**)(unint64_t *, size_t, _QWORD))(v27->i64[1] + 64);
  if (!v31)
  {
    v32 = v27[36].u8[8];
    v39 = a3;
    if ((v27[38].i8[1] & 1) != 0)
      goto LABEL_37;
LABEL_34:
    v33 = v32 + a7;
    if (v32 + a7 < a7)
      goto LABEL_42;
    goto LABEL_38;
  }
  v38 = v30;
  v32 = v31(&v27->u64[1], a7, 0);
  v30 = v38;
  v39 = a3;
  if ((v27[38].i8[1] & 1) == 0)
    goto LABEL_34;
LABEL_37:
  v33 = v32 + a7 + v27[37].u8[13];
  if (v33 < a7)
  {
LABEL_42:
    ERR_put_error(16, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/ssl_aead_ctx.cc", 207);
    v24 = 200;
    v25 = 324;
    goto LABEL_43;
  }
LABEL_38:
  if (v33 >= 0xFFFF)
    goto LABEL_42;
  *(_WORD *)(a2 + 11) = bswap32(v33) >> 16;
  *(_QWORD *)&v37 = a2;
  *((_QWORD *)&v37 + 1) = 13;
  v34 = bssl::SSLAEADContext::Seal(v27, (char *)(a2 + 13), &v40, a4 - 13, a5, v29, v30, a8, v37, a6, a7);
  if (v34)
  {
    ++*v22;
    *v39 = v33 + 13;
    v35 = (void (*)(uint64_t, _QWORD, uint64_t, unint64_t, uint64_t, _QWORD *, _QWORD))a1[8];
    if (v35)
      v35(1, 0, 256, a2, 13, a1, a1[9]);
  }
  return v34;
}

const EVP_CIPHER *EVP_aes_128_cbc(void)
{
  if (pthread_once(&EVP_aes_128_cbc_once, (void (*)(void))EVP_aes_128_cbc_init))
    abort();
  return (const EVP_CIPHER *)&EVP_aes_128_cbc_storage;
}

double EVP_aes_128_cbc_init()
{
  double result;

  qword_2545726C8 = 0;
  unk_2545726D0 = 0;
  EVP_aes_128_cbc_storage = xmmword_208F25BC0;
  *(_QWORD *)&result = 0x200000108;
  qword_2545726B0 = 0x200000108;
  qword_2545726B8 = (uint64_t)aes_init_key;
  unk_2545726C0 = aes_cbc_cipher;
  return result;
}

double EVP_aes_128_ctr_init()
{
  double result;

  qword_254572708 = 0;
  unk_254572710 = 0;
  EVP_aes_128_ctr_storage = xmmword_208F25BD0;
  *(_QWORD *)&result = 0x500000108;
  qword_2545726F0 = 0x500000108;
  qword_2545726F8 = (uint64_t)aes_init_key;
  unk_254572700 = aes_ctr_cipher;
  return result;
}

double EVP_aes_128_gcm_init()
{
  double result;

  EVP_aes_128_gcm_storage = xmmword_208F25BE0;
  *(_QWORD *)&result = 0x1F86000002A8;
  qword_254572730 = 0x1F86000002A8;
  qword_254572738 = (uint64_t)aes_gcm_init_key;
  unk_254572740 = aes_gcm_cipher;
  qword_254572748 = (uint64_t)aes_gcm_cleanup;
  unk_254572750 = aes_gcm_ctrl;
  return result;
}

const EVP_CIPHER *EVP_aes_192_cbc(void)
{
  if (pthread_once(&EVP_aes_192_cbc_once, (void (*)(void))EVP_aes_192_cbc_init))
    abort();
  return (const EVP_CIPHER *)&EVP_aes_192_cbc_storage;
}

double EVP_aes_192_cbc_init()
{
  double result;

  qword_254572788 = 0;
  unk_254572790 = 0;
  EVP_aes_192_cbc_storage = xmmword_208F25BF0;
  *(_QWORD *)&result = 0x200000108;
  qword_254572770 = 0x200000108;
  qword_254572778 = (uint64_t)aes_init_key;
  unk_254572780 = aes_cbc_cipher;
  return result;
}

double EVP_aes_192_ctr_init()
{
  double result;

  qword_2545727C8 = 0;
  unk_2545727D0 = 0;
  EVP_aes_192_ctr_storage = xmmword_208F25C00;
  *(_QWORD *)&result = 0x500000108;
  qword_2545727B0 = 0x500000108;
  qword_2545727B8 = (uint64_t)aes_init_key;
  unk_2545727C0 = aes_ctr_cipher;
  return result;
}

const EVP_CIPHER *EVP_aes_256_cbc(void)
{
  if (pthread_once(&EVP_aes_256_cbc_once, (void (*)(void))EVP_aes_256_cbc_init))
    abort();
  return (const EVP_CIPHER *)&EVP_aes_256_cbc_storage;
}

double EVP_aes_256_cbc_init()
{
  double result;

  qword_254572808 = 0;
  unk_254572810 = 0;
  EVP_aes_256_cbc_storage = xmmword_208F25C10;
  *(_QWORD *)&result = 0x200000108;
  qword_2545727F0 = 0x200000108;
  qword_2545727F8 = (uint64_t)aes_init_key;
  unk_254572800 = aes_cbc_cipher;
  return result;
}

double EVP_aes_256_ctr_init()
{
  double result;

  qword_254572848 = 0;
  unk_254572850 = 0;
  EVP_aes_256_ctr_storage = xmmword_208F25C20;
  *(_QWORD *)&result = 0x500000108;
  qword_254572830 = 0x500000108;
  qword_254572838 = (uint64_t)aes_init_key;
  unk_254572840 = aes_ctr_cipher;
  return result;
}

double EVP_aes_256_gcm_init()
{
  double result;

  EVP_aes_256_gcm_storage = xmmword_208F25C30;
  *(_QWORD *)&result = 0x1F86000002A8;
  qword_254572870 = 0x1F86000002A8;
  qword_254572878 = (uint64_t)aes_gcm_init_key;
  unk_254572880 = aes_gcm_cipher;
  qword_254572888 = (uint64_t)aes_gcm_cleanup;
  unk_254572890 = aes_gcm_ctrl;
  return result;
}

int *EVP_aead_aes_128_gcm()
{
  if (pthread_once(&EVP_aead_aes_128_gcm_once, (void (*)(void))EVP_aead_aes_128_gcm_init))
    abort();
  return &EVP_aead_aes_128_gcm_storage;
}

double EVP_aead_aes_128_gcm_init()
{
  double result;

  xmmword_2545728A8 = 0u;
  unk_2545728B8 = 0u;
  xmmword_2545728C8 = 0u;
  qword_2545728D8 = 0;
  *(_QWORD *)&result = 269487120;
  EVP_aead_aes_128_gcm_storage = 269487120;
  dword_25457289C = 1;
  qword_2545728A0 = (uint64_t)aead_aes_gcm_init;
  *((_QWORD *)&xmmword_2545728A8 + 1) = aead_aes_gcm_cleanup;
  qword_2545728C0 = (uint64_t)aead_aes_gcm_seal_scatter;
  *(_QWORD *)&xmmword_2545728C8 = aead_aes_gcm_open_gather;
  return result;
}

int *EVP_aead_aes_256_gcm()
{
  if (pthread_once(&EVP_aead_aes_256_gcm_once, (void (*)(void))EVP_aead_aes_256_gcm_init))
    abort();
  return &EVP_aead_aes_256_gcm_storage;
}

double EVP_aead_aes_256_gcm_init()
{
  double result;

  xmmword_2545728F0 = 0u;
  unk_254572900 = 0u;
  xmmword_254572910 = 0u;
  qword_254572920 = 0;
  *(_QWORD *)&result = 269487136;
  EVP_aead_aes_256_gcm_storage = 269487136;
  dword_2545728E4 = 1;
  qword_2545728E8 = (uint64_t)aead_aes_gcm_init;
  *((_QWORD *)&xmmword_2545728F0 + 1) = aead_aes_gcm_cleanup;
  qword_254572908 = (uint64_t)aead_aes_gcm_seal_scatter;
  *(_QWORD *)&xmmword_254572910 = aead_aes_gcm_open_gather;
  return result;
}

double EVP_aead_aes_128_gcm_tls12_init()
{
  double result;

  xmmword_254572938 = 0u;
  unk_254572948 = 0u;
  xmmword_254572958 = 0u;
  qword_254572968 = 0;
  *(_QWORD *)&result = 269487120;
  EVP_aead_aes_128_gcm_tls12_storage = 269487120;
  dword_25457292C = 1;
  qword_254572930 = (uint64_t)aead_aes_gcm_tls12_init;
  *((_QWORD *)&xmmword_254572938 + 1) = aead_aes_gcm_cleanup;
  qword_254572950 = (uint64_t)aead_aes_gcm_tls12_seal_scatter;
  *(_QWORD *)&xmmword_254572958 = aead_aes_gcm_open_gather;
  return result;
}

double EVP_aead_aes_256_gcm_tls12_init()
{
  double result;

  xmmword_254572980 = 0u;
  unk_254572990 = 0u;
  xmmword_2545729A0 = 0u;
  qword_2545729B0 = 0;
  *(_QWORD *)&result = 269487136;
  EVP_aead_aes_256_gcm_tls12_storage = 269487136;
  dword_254572974 = 1;
  qword_254572978 = (uint64_t)aead_aes_gcm_tls12_init;
  *((_QWORD *)&xmmword_254572980 + 1) = aead_aes_gcm_cleanup;
  qword_254572998 = (uint64_t)aead_aes_gcm_tls12_seal_scatter;
  *(_QWORD *)&xmmword_2545729A0 = aead_aes_gcm_open_gather;
  return result;
}

int *EVP_aead_aes_128_gcm_tls13()
{
  if (pthread_once(&EVP_aead_aes_128_gcm_tls13_once, (void (*)(void))EVP_aead_aes_128_gcm_tls13_init))
    abort();
  return &EVP_aead_aes_128_gcm_tls13_storage;
}

double EVP_aead_aes_128_gcm_tls13_init()
{
  double result;

  xmmword_2545729C8 = 0u;
  unk_2545729D8 = 0u;
  xmmword_2545729E8 = 0u;
  qword_2545729F8 = 0;
  *(_QWORD *)&result = 269487120;
  EVP_aead_aes_128_gcm_tls13_storage = 269487120;
  dword_2545729BC = 1;
  qword_2545729C0 = (uint64_t)aead_aes_gcm_tls13_init;
  *((_QWORD *)&xmmword_2545729C8 + 1) = aead_aes_gcm_cleanup;
  qword_2545729E0 = (uint64_t)aead_aes_gcm_tls13_seal_scatter;
  *(_QWORD *)&xmmword_2545729E8 = aead_aes_gcm_open_gather;
  return result;
}

int *EVP_aead_aes_256_gcm_tls13()
{
  if (pthread_once(&EVP_aead_aes_256_gcm_tls13_once, (void (*)(void))EVP_aead_aes_256_gcm_tls13_init))
    abort();
  return &EVP_aead_aes_256_gcm_tls13_storage;
}

double EVP_aead_aes_256_gcm_tls13_init()
{
  double result;

  xmmword_254572A10 = 0u;
  unk_254572A20 = 0u;
  xmmword_254572A30 = 0u;
  qword_254572A40 = 0;
  *(_QWORD *)&result = 269487136;
  EVP_aead_aes_256_gcm_tls13_storage = 269487136;
  dword_254572A04 = 1;
  qword_254572A08 = (uint64_t)aead_aes_gcm_tls13_init;
  *((_QWORD *)&xmmword_254572A10 + 1) = aead_aes_gcm_cleanup;
  qword_254572A28 = (uint64_t)aead_aes_gcm_tls13_seal_scatter;
  *(_QWORD *)&xmmword_254572A30 = aead_aes_gcm_open_gather;
  return result;
}

uint64_t aes_init_key(uint64_t a1, int8x16_t *a2, uint64_t a3, int a4)
{
  int8x16_t *v4;
  int v5;
  _BOOL4 v6;
  double (*v7)(int8x16_t *, int8x16_t *, unint64_t, unint64_t, int8x16_t *, int);
  int v9;
  double (*v10)(int8x16_t *, int8x16_t *, unint64_t, unint64_t, int8x16_t *, int);

  v4 = *(int8x16_t **)(a1 + 16);
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 20) & 0x3F;
  if (v5 == 5)
  {
    v6 = 0;
LABEL_8:
    v9 = aes_nohw_set_encrypt_key(a2, 8 * *(_DWORD *)(a1 + 24), v4);
    v10 = aes_nohw_cbc_encrypt;
    if (!v6)
      v10 = 0;
    v4[15].i64[1] = (uint64_t)aes_nohw_encrypt;
    v4[16].i64[0] = (uint64_t)v10;
    if ((v9 & 0x80000000) == 0)
      return 1;
    ERR_put_error(30, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", 228);
    return 0;
  }
  v6 = v5 == 2;
  if (a4 || (v5 - 3) < 0xFFFFFFFE)
    goto LABEL_8;
  aes_nohw_set_encrypt_key(a2, 8 * *(_DWORD *)(a1 + 24), v4);
  v7 = aes_nohw_cbc_encrypt;
  if (v5 != 2)
    v7 = 0;
  v4[15].i64[1] = (uint64_t)aes_nohw_decrypt;
  v4[16].i64[0] = (uint64_t)v7;
  return 1;
}

uint64_t aes_cbc_cipher(uint64_t a1, __n128 *a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5;
  void (*v6)(unint64_t, __n128 *, unint64_t);
  __n128 *v8;
  void (*v9)(__n128 *, __n128 *, uint64_t);

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(void (**)(unint64_t, __n128 *, unint64_t))(v5 + 256);
  if (v6)
  {
    v6(a3, a2, a4);
    return 1;
  }
  else
  {
    v8 = (__n128 *)(a1 + 52);
    v9 = *(void (**)(__n128 *, __n128 *, uint64_t))(v5 + 248);
    if (*(_DWORD *)(a1 + 28))
      CRYPTO_cbc128_encrypt(a3, a2, a4, v5, v8, v9);
    else
      CRYPTO_cbc128_decrypt(a3, (unint64_t)a2, a4, v5, (int8x16_t *)v8, (uint64_t (*)(int8x16_t *, int8x16_t *, uint64_t))v9);
    return 1;
  }
}

uint64_t aes_ctr_cipher(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5;
  uint64_t (*v6)(char *, _BYTE *, unint64_t, uint64_t, uint64_t);
  _BYTE *v7;
  _QWORD *v8;
  unsigned int *v9;

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(uint64_t (**)(char *, _BYTE *, unint64_t, uint64_t, uint64_t))(v5 + 256);
  v7 = (_BYTE *)(a1 + 52);
  v8 = (_QWORD *)(a1 + 68);
  v9 = (unsigned int *)(a1 + 104);
  if (v6)
    CRYPTO_ctr128_encrypt_ctr32(a3, a2, a4, v5, (uint64_t)v7, v8, v9, v6);
  else
    CRYPTO_ctr128_encrypt(a3, a2, a4, v5, v7, v8, v9, *(uint64_t (**)(_BYTE *, _QWORD *, uint64_t))(v5 + 248));
  return 1;
}

uint64_t aes_gcm_init_key(uint64_t a1, int8x16_t *a2, int8x8_t *__src)
{
  int8x8_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  size_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if ((unint64_t)a2 | (unint64_t)__src)
  {
    v3 = __src;
    v4 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) & 8);
    if (a2)
    {
      *(_OWORD *)(v4 + 352) = 0u;
      *(_OWORD *)(v4 + 368) = 0u;
      *(_OWORD *)(v4 + 320) = 0u;
      *(_OWORD *)(v4 + 336) = 0u;
      *(_OWORD *)(v4 + 288) = 0u;
      *(_OWORD *)(v4 + 304) = 0u;
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      aes_nohw_set_encrypt_key(a2, 8 * *(_DWORD *)(a1 + 24), (int8x16_t *)(v4 + 384));
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 160) = 0u;
      *(_OWORD *)(v4 + 176) = 0u;
      *(_OWORD *)(v4 + 192) = 0u;
      *(_OWORD *)(v4 + 208) = 0u;
      *(_OWORD *)(v4 + 224) = 0u;
      *(_OWORD *)(v4 + 240) = 0u;
      *(_OWORD *)(v4 + 256) = 0u;
      *(_OWORD *)(v4 + 272) = 0u;
      *(_OWORD *)(v4 + 288) = 0u;
      *(_OWORD *)(v4 + 304) = 0u;
      *(_OWORD *)(v4 + 320) = 0u;
      *(_OWORD *)(v4 + 336) = 0u;
      *(_OWORD *)(v4 + 352) = 0u;
      *(_QWORD *)(v4 + 352) = aes_nohw_encrypt;
      v10 = 0;
      v11 = 0;
      aes_nohw_encrypt((unint64_t)&v10, (uint64_t)&v10, v4 + 384);
      v5 = bswap64(v10);
      *((_QWORD *)&v7 + 1) = v5;
      *(_QWORD *)&v7 = bswap64(v11);
      v6 = v7 >> 63;
      *((_QWORD *)&v7 + 1) = v7;
      *(_QWORD *)&v7 = v5;
      *(_QWORD *)(v4 + 80) = (v5 >> 63) & 0xC200000000000000 ^ v6;
      *(_QWORD *)(v4 + 88) = v7 >> 63;
      *(_QWORD *)(v4 + 336) = gcm_gmult_nohw;
      *(_QWORD *)(v4 + 344) = gcm_ghash_nohw;
      *(_BYTE *)(v4 + 360) &= ~1u;
      *(_QWORD *)(v4 + 664) = aes_nohw_ctr32_encrypt_blocks;
      if (v3 || *(_DWORD *)(v4 + 636) && (v3 = *(int8x8_t **)(v4 + 640)) != 0)
      {
        CRYPTO_gcm128_setiv(v4, v4 + 384, v3, *(int *)(v4 + 648));
        *(_DWORD *)(v4 + 636) = 1;
      }
      *(_DWORD *)(v4 + 632) = 1;
    }
    else
    {
      if (*(_DWORD *)(v4 + 632))
      {
        CRYPTO_gcm128_setiv(v4, v4 + 384, __src, *(int *)(v4 + 648));
      }
      else
      {
        v9 = *(int *)(v4 + 648);
        if ((_DWORD)v9)
          memcpy(*(void **)(v4 + 640), v3, v9);
      }
      *(_DWORD *)(v4 + 636) = 1;
      *(_DWORD *)(v4 + 656) = 0;
    }
  }
  return 1;
}

uint64_t aes_gcm_cipher(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t a4, int8x16_t a5)
{
  uint64_t v5;
  uint64_t result;
  void (*v10)(int8x16_t *, int8x16_t *, unint64_t, uint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) & 8);
  if (!*(_DWORD *)(v5 + 632))
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (!(a4 >> 31) && *(_DWORD *)(v5 + 636))
  {
    if (a3)
    {
      if (a2)
      {
        v10 = *(void (**)(int8x16_t *, int8x16_t *, unint64_t, uint64_t, uint64_t))(v5 + 664);
        v11 = v5 + 384;
        if (*(_DWORD *)(a1 + 28))
        {
          if (v10)
          {
            if (!CRYPTO_gcm128_encrypt_ctr32(v5, v11, a3, a2, a4, v10, a5))
              return 0xFFFFFFFFLL;
            return a4;
          }
          if (CRYPTO_gcm128_encrypt((int8x16_t *)v5, v11, a3, a2->i64, a4, a5))
            return a4;
        }
        else
        {
          if (v10)
          {
            if (!CRYPTO_gcm128_decrypt_ctr32(v5, v11, a3, a2->i8, a4, (void (*)(int8x16_t *, __int8 *, unint64_t, uint64_t, uint64_t, __n128))v10))return 0xFFFFFFFFLL;
            return a4;
          }
          if (CRYPTO_gcm128_decrypt((int8x16_t *)v5, v11, a3, a2->i64, a4))
            return a4;
        }
        return 0xFFFFFFFFLL;
      }
      if (!CRYPTO_gcm128_aad((int8x16_t *)v5, a3, a4))
        return 0xFFFFFFFFLL;
      return a4;
    }
    if (*(_DWORD *)(a1 + 28))
    {
      CRYPTO_gcm128_finish(v5, 0, 0);
      result = 0;
      *(_OWORD *)(a1 + 68) = *(_OWORD *)(v5 + 64);
      *(_DWORD *)(v5 + 652) = 16;
      *(_DWORD *)(v5 + 636) = 0;
      return result;
    }
    v12 = *(unsigned int *)(v5 + 652);
    if ((v12 & 0x80000000) == 0)
    {
      if (CRYPTO_gcm128_finish(v5, (int8x16_t *)(a1 + 68), v12))
      {
        result = 0;
        *(_DWORD *)(v5 + 636) = 0;
        return result;
      }
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void aes_gcm_cleanup(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  size_t v5;

  v1 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) & 8);
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 320) = 0u;
  *(_OWORD *)(v1 + 336) = 0u;
  *(_OWORD *)(v1 + 288) = 0u;
  *(_OWORD *)(v1 + 304) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_OWORD *)(v1 + 272) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)v1 = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  v2 = *(_QWORD *)(v1 + 640);
  if (v2 != a1 + 52 && v2)
  {
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    v5 = v4 + 8;
    if (v4 != -8)
      bzero(v3, v5);
    free(v3);
  }
}

uint64_t aes_gcm_ctrl(uint64_t a1, int a2, size_t __n, _QWORD *__src)
{
  uint64_t result;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  const void *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  size_t v17;

  result = 0xFFFFFFFFLL;
  v7 = __n;
  v8 = *(_QWORD *)(a1 + 16) + (*(_QWORD *)(a1 + 16) & 8);
  switch(a2)
  {
    case 0:
      *(_QWORD *)(v8 + 632) = 0;
      *(_DWORD *)(v8 + 648) = *(_DWORD *)(*(_QWORD *)a1 + 12);
      *(_QWORD *)(v8 + 640) = a1 + 52;
      *(_QWORD *)(v8 + 652) = 0xFFFFFFFFLL;
      return 1;
    case 8:
      v9 = (_QWORD *)(__src[2] + (__src[2] & 8));
      memcpy(v9, (const void *)v8, 0x2A0uLL);
      v10 = *(const void **)(v8 + 640);
      if (v10 == (const void *)(a1 + 52))
      {
        v9[80] = (char *)__src + 52;
        return 1;
      }
      else
      {
        v11 = *(int *)(v8 + 648);
        if ((_DWORD)v11)
        {
          if (v11 <= 0xFFFFFFF7)
          {
            v12 = malloc_type_malloc(v11 + 8, 0x30772F57uLL);
            if (v12)
            {
              *v12 = v11;
              v13 = v12 + 1;
              memcpy(v12 + 1, v10, v11);
              v9[80] = v13;
              return 1;
            }
          }
          ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
        }
        result = 0;
        v9[80] = 0;
      }
      return result;
    case 9:
      if ((int)__n < 1)
        return 0;
      if (__n < 0x11 || *(_DWORD *)(v8 + 648) >= (int)__n)
        goto LABEL_14;
      v14 = *(_QWORD **)(v8 + 640);
      if (v14 != (_QWORD *)(a1 + 52))
        OPENSSL_free(v14);
      result = (uint64_t)OPENSSL_malloc(v7);
      *(_QWORD *)(v8 + 640) = result;
      if (result)
      {
LABEL_14:
        *(_DWORD *)(v8 + 648) = v7;
        return 1;
      }
      return result;
    case 16:
      if ((__n - 17) < 0xFFFFFFF0)
        return 0;
      if (!*(_DWORD *)(a1 + 28) || (*(_DWORD *)(v8 + 652) & 0x80000000) != 0)
        return 0;
      memcpy(__src, (const void *)(a1 + 68), __n);
      return 1;
    case 17:
      if ((__n - 17) < 0xFFFFFFF0 || *(_DWORD *)(a1 + 28))
        return 0;
      memcpy((void *)(a1 + 68), __src, __n);
      *(_DWORD *)(v8 + 652) = v7;
      return 1;
    case 18:
      if ((_DWORD)__n == -1)
      {
        v17 = *(int *)(v8 + 648);
        if ((_DWORD)v17)
          memcpy(*(void **)(v8 + 640), __src, v17);
      }
      else
      {
        if ((int)__n < 4 || *(_DWORD *)(v8 + 648) - (int)__n < 8)
          return 0;
        memcpy(*(void **)(v8 + 640), __src, __n);
        if (*(_DWORD *)(a1 + 28))
          RAND_bytes_with_additional_data(*(_QWORD *)(v8 + 640) + v7, *(int *)(v8 + 648) - (uint64_t)v7, (uint64_t)&RAND_bytes_kZeroAdditionalData);
      }
      result = 1;
      *(_DWORD *)(v8 + 656) = 1;
      return result;
    case 19:
      if (!*(_DWORD *)(v8 + 656) || !*(_DWORD *)(v8 + 632))
        return 0;
      CRYPTO_gcm128_setiv(v8, v8 + 384, *(int8x8_t **)(v8 + 640), *(int *)(v8 + 648));
      v15 = *(_DWORD *)(v8 + 648);
      if (v7 >= 1 && v15 >= v7 || (v7 = *(_DWORD *)(v8 + 648), v15))
      {
        memcpy(__src, (const void *)(*(_QWORD *)(v8 + 640) + v15 - v7), v7);
        v16 = *(int *)(v8 + 648);
      }
      else
      {
        v16 = 0;
      }
      *(_QWORD *)(*(_QWORD *)(v8 + 640) + v16 - 8) = bswap64(bswap64(*(_QWORD *)(*(_QWORD *)(v8 + 640) + v16 - 8)) + 1);
      goto LABEL_39;
    case 24:
      if (!*(_DWORD *)(v8 + 656) || !*(_DWORD *)(v8 + 632) || *(_DWORD *)(a1 + 28))
        return 0;
      if ((_DWORD)__n)
        memcpy((void *)(*(_QWORD *)(v8 + 640) + *(int *)(v8 + 648) - (int)__n), __src, (int)__n);
      CRYPTO_gcm128_setiv(v8, v8 + 384, *(int8x8_t **)(v8 + 640), *(int *)(v8 + 648));
LABEL_39:
      result = 1;
      *(_DWORD *)(v8 + 636) = 1;
      return result;
    case 25:
      *(_DWORD *)__src = *(_DWORD *)(v8 + 648);
      return 1;
    default:
      return result;
  }
}

uint64_t aead_aes_gcm_init(uint64_t a1, int8x16_t *a2, uint64_t a3, unint64_t a4)
{
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((a3 & 0x1FFFFFFFFFFFFFF7) == 0x10 || (a3 & 0x1FFFFFFFFFFFFFFFLL) == 0x20)
  {
    if (a4)
      v7 = a4;
    else
      v7 = 16;
    if (v7 < 0x11)
    {
      aes_nohw_set_encrypt_key(a2, 8 * a3, (int8x16_t *)(a1 + 8));
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_OWORD *)(a1 + 384) = 0u;
      *(_OWORD *)(a1 + 400) = 0u;
      *(_OWORD *)(a1 + 416) = 0u;
      *(_OWORD *)(a1 + 432) = 0u;
      *(_OWORD *)(a1 + 448) = 0u;
      *(_OWORD *)(a1 + 464) = 0u;
      *(_OWORD *)(a1 + 480) = 0u;
      *(_OWORD *)(a1 + 496) = 0u;
      *(_OWORD *)(a1 + 512) = 0u;
      *(_OWORD *)(a1 + 528) = 0u;
      *(_QWORD *)(a1 + 528) = aes_nohw_encrypt;
      v12 = 0;
      v13 = 0;
      aes_nohw_encrypt((unint64_t)&v12, (uint64_t)&v12, a1 + 8);
      v9 = bswap64(v12);
      *((_QWORD *)&v11 + 1) = v9;
      *(_QWORD *)&v11 = bswap64(v13);
      v10 = v11 >> 63;
      *((_QWORD *)&v11 + 1) = v11;
      *(_QWORD *)&v11 = v9;
      *(_QWORD *)(a1 + 256) = (v9 >> 63) & 0xC200000000000000 ^ v10;
      *(_QWORD *)(a1 + 264) = v11 >> 63;
      *(_QWORD *)(a1 + 512) = gcm_gmult_nohw;
      *(_QWORD *)(a1 + 520) = gcm_ghash_nohw;
      *(_BYTE *)(a1 + 536) &= ~1u;
      *(_QWORD *)(a1 + 544) = aes_nohw_ctr32_encrypt_blocks;
      *(_BYTE *)(a1 + 576) = v7;
      return 1;
    }
    v5 = 116;
    v6 = 911;
  }
  else
  {
    v5 = 102;
    v6 = 902;
  }
  ERR_put_error(30, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", v6);
  return 0;
}

uint64_t aead_aes_gcm_seal_scatter(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, unint64_t a5, int8x8_t *a6, unint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, unint64_t a11, int8x16_t *a12, unint64_t a13)
{
  return aead_aes_gcm_seal_scatter_impl(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, *(unsigned __int8 *)(a1 + 576));
}

uint64_t aead_aes_gcm_open_gather(uint64_t a1, __int8 *a2, int8x8_t *a3, unint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, unint64_t a8, int8x16_t *a9, unint64_t a10)
{
  uint64_t result;
  void (*v18)(int8x16_t *, __int8 *, unint64_t, uint64_t, uint64_t, __n128);
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  int8x16_t *v24;
  int8x16_t *v25;
  int8x16_t *v26;
  int8x16_t v27;
  unint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  unint64_t v31;
  unint64_t v32;
  int8x8_t v33;
  int8x8_t *v34;
  int8x8_t *v35;
  unint64_t v36;
  int8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  __int8 *v42;
  char *v43;
  char v44;
  char v45;
  char v46;
  int8x16_t v48[5];
  _OWORD v49[20];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  if (!a4)
  {
    v19 = 111;
    v20 = 1032;
LABEL_9:
    ERR_put_error(30, 0, v19, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", v20);
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 576) != a8)
  {
    v19 = 101;
    v20 = 1037;
    goto LABEL_9;
  }
  memset(v49, 0, 304);
  memset(v48, 0, sizeof(v48));
  memcpy(v49, (const void *)(a1 + 256), 0x120uLL);
  CRYPTO_gcm128_setiv((unint64_t)v48, a1 + 8, a3, a4);
  result = CRYPTO_gcm128_aad(v48, a9, a10);
  if (!(_DWORD)result)
    return result;
  v18 = *(void (**)(int8x16_t *, __int8 *, unint64_t, uint64_t, uint64_t, __n128))(a1 + 544);
  if (v18)
  {
    result = CRYPTO_gcm128_decrypt_ctr32((uint64_t)v48, a1 + 8, a5, a2, a6, v18);
    if (!(_DWORD)result)
      return result;
LABEL_12:
    CRYPTO_gcm128_finish((uint64_t)v48, 0, 0);
    if (a8 >= 0x10)
      v21 = 16;
    else
      v21 = a8;
    if (v21)
      __memcpy_chk();
    if (!a8)
      return 1;
    if (a8 < 8)
    {
      v22 = 0;
      v23 = 0;
      v24 = a7;
      goto LABEL_29;
    }
    v24 = a7;
    if (a8 >= 0x20)
    {
      v22 = a8 & 0xFFFFFFFFFFFFFFE0;
      v25 = (int8x16_t *)&v50;
      v26 = a7 + 1;
      v27 = 0uLL;
      v28 = a8 & 0xFFFFFFFFFFFFFFE0;
      v29 = 0uLL;
      do
      {
        v27 = vorrq_s8(veorq_s8(v26[-1], v25[-1]), v27);
        v29 = vorrq_s8(veorq_s8(*v26, *v25), v29);
        v25 += 2;
        v26 += 2;
        v28 -= 32;
      }
      while (v28);
      v30 = vorrq_s8(v29, v27);
      *(int8x8_t *)v30.i8 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
      v31 = v30.i64[0] | HIDWORD(v30.i64[0]) | ((unint64_t)(v30.i64[0] | HIDWORD(v30.i64[0])) >> 16);
      v23 = v31 | BYTE1(v31);
      if (v22 == a8)
        goto LABEL_31;
      if ((a8 & 0x18) == 0)
      {
LABEL_29:
        v41 = a8 - v22;
        v42 = &v24->i8[v22];
        v43 = (char *)&v49[19] + v22;
        do
        {
          v45 = *v43++;
          v44 = v45;
          v46 = *v42++;
          v23 |= v46 ^ v44;
          --v41;
        }
        while (v41);
        goto LABEL_31;
      }
    }
    else
    {
      v23 = 0;
      v22 = 0;
    }
    v32 = v22;
    v22 = a8 & 0xFFFFFFFFFFFFFFF8;
    v33 = (int8x8_t)v23;
    v34 = (int8x8_t *)((char *)&v49[19] + v32);
    v35 = (int8x8_t *)&a7->i8[v32];
    v36 = v32 - (a8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *v34++;
      v38 = v37;
      v39 = *v35++;
      v33 = vorr_s8(veor_s8(v39, v38), v33);
      v36 += 8;
    }
    while (v36);
    v40 = *(_QWORD *)&v33 | HIDWORD(*(_QWORD *)&v33) | ((*(_QWORD *)&v33 | HIDWORD(*(_QWORD *)&v33)) >> 16);
    v23 = v40 | BYTE1(v40);
    if (v22 != a8)
      goto LABEL_29;
LABEL_31:
    if (v23)
    {
      v19 = 101;
      v20 = 1065;
      goto LABEL_9;
    }
    return 1;
  }
  result = CRYPTO_gcm128_decrypt(v48, a1 + 8, a5, (uint64_t *)a2, a6);
  if ((_DWORD)result)
    goto LABEL_12;
  return result;
}

uint64_t aead_aes_gcm_seal_scatter_impl(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, unint64_t a5, int8x8_t *a6, unint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, unint64_t a11, int8x16_t *a12, unint64_t a13, unint64_t a14)
{
  unint64_t v14;
  int v15;
  int v16;
  int8x16_t v24;
  uint64_t result;
  void (*v26)(int8x16_t *, int8x16_t *, unint64_t, uint64_t, uint64_t);
  int8x16_t v27;
  void (*v28)(int8x16_t *, int8x16_t *, unint64_t, uint64_t, uint64_t);
  size_t v29;
  int8x16_t v30[4];
  __int128 v31;
  _OWORD v32[19];
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v14 = a14 + a11;
  if (__CFADD__(a14, a11))
  {
    v15 = 117;
    v16 = 953;
LABEL_13:
    ERR_put_error(30, 0, v15, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", v16);
    return 0;
  }
  if (v14 > a5)
  {
    v15 = 103;
    v16 = 957;
    goto LABEL_13;
  }
  if (!a7)
  {
    v15 = 111;
    v16 = 961;
    goto LABEL_13;
  }
  v31 = 0u;
  memset(v32, 0, sizeof(v32));
  memset(v30, 0, sizeof(v30));
  memcpy(v32, (const void *)(a1 + 248), 0x120uLL);
  CRYPTO_gcm128_setiv((unint64_t)v30, a1, a6, a7);
  if (!a13 || (result = CRYPTO_gcm128_aad(v30, a12, a13), (_DWORD)result))
  {
    v26 = *(void (**)(int8x16_t *, int8x16_t *, unint64_t, uint64_t, uint64_t))(a1 + 536);
    if (v26)
    {
      result = CRYPTO_gcm128_encrypt_ctr32((uint64_t)v30, a1, a8, a2, a9, v26, v24);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      result = CRYPTO_gcm128_encrypt(v30, a1, a8, a2->i64, a9, v24);
      if (!(_DWORD)result)
        return result;
    }
    if (a11)
    {
      v28 = *(void (**)(int8x16_t *, int8x16_t *, unint64_t, uint64_t, uint64_t))(a1 + 536);
      if (v28)
      {
        result = CRYPTO_gcm128_encrypt_ctr32((uint64_t)v30, a1, a10, a3, a11, v28, v27);
        if (!(_DWORD)result)
          return result;
      }
      else
      {
        result = CRYPTO_gcm128_encrypt(v30, a1, a10, a3->i64, a11, v27);
        if (!(_DWORD)result)
          return result;
      }
    }
    CRYPTO_gcm128_finish((uint64_t)v30, 0, 0);
    if (a14 >= 0x10)
      v29 = 16;
    else
      v29 = a14;
    if (v29)
      memcpy(&a3->i8[a11], &v31, v29);
    *a4 = v14;
    return 1;
  }
  return result;
}

uint64_t aead_aes_gcm_tls12_init(uint64_t a1, int8x16_t *a2, uint64_t a3, unint64_t a4)
{
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 552) = 0;
  if ((a3 & 0x1FFFFFFFFFFFFFF7) == 0x10 || (a3 & 0x1FFFFFFFFFFFFFFFLL) == 0x20)
  {
    if (a4)
      v7 = a4;
    else
      v7 = 16;
    if (v7 < 0x11)
    {
      aes_nohw_set_encrypt_key(a2, 8 * a3, (int8x16_t *)(a1 + 8));
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_OWORD *)(a1 + 384) = 0u;
      *(_OWORD *)(a1 + 400) = 0u;
      *(_OWORD *)(a1 + 416) = 0u;
      *(_OWORD *)(a1 + 432) = 0u;
      *(_OWORD *)(a1 + 448) = 0u;
      *(_OWORD *)(a1 + 464) = 0u;
      *(_OWORD *)(a1 + 480) = 0u;
      *(_OWORD *)(a1 + 496) = 0u;
      *(_OWORD *)(a1 + 512) = 0u;
      *(_OWORD *)(a1 + 528) = 0u;
      *(_QWORD *)(a1 + 528) = aes_nohw_encrypt;
      v12 = 0;
      v13 = 0;
      aes_nohw_encrypt((unint64_t)&v12, (uint64_t)&v12, a1 + 8);
      v9 = bswap64(v12);
      *((_QWORD *)&v11 + 1) = v9;
      *(_QWORD *)&v11 = bswap64(v13);
      v10 = v11 >> 63;
      *((_QWORD *)&v11 + 1) = v11;
      *(_QWORD *)&v11 = v9;
      *(_QWORD *)(a1 + 256) = (v9 >> 63) & 0xC200000000000000 ^ v10;
      *(_QWORD *)(a1 + 264) = v11 >> 63;
      *(_QWORD *)(a1 + 512) = gcm_gmult_nohw;
      *(_QWORD *)(a1 + 520) = gcm_ghash_nohw;
      *(_BYTE *)(a1 + 536) &= ~1u;
      *(_QWORD *)(a1 + 544) = aes_nohw_ctr32_encrypt_blocks;
      *(_BYTE *)(a1 + 576) = v7;
      return 1;
    }
    v5 = 116;
    v6 = 911;
  }
  else
  {
    v5 = 102;
    v6 = 902;
  }
  ERR_put_error(30, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", v6);
  return 0;
}

uint64_t aead_aes_gcm_tls12_seal_scatter(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, unint64_t a11, int8x16_t *a12, unint64_t a13)
{
  unint64_t v13;
  unint64_t v14;

  if (a7 == 12)
  {
    v13 = *(_QWORD *)(a6 + 4);
    if (v13 == -1 || (v14 = bswap64(v13), v14 < *(_QWORD *)(a1 + 552)))
    {
      ERR_put_error(30, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", 1300);
      return 0;
    }
    else
    {
      *(_QWORD *)(a1 + 552) = v14 + 1;
      return aead_aes_gcm_seal_scatter_impl(a1 + 8, a2, a3, a4, a5, (int8x8_t *)a6, 0xCuLL, a8, a9, a10, a11, a12, a13, *(unsigned __int8 *)(a1 + 576));
    }
  }
  else
  {
    ERR_put_error(30, 0, 121, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", 1292);
    return 0;
  }
}

uint64_t aead_aes_gcm_tls13_init(uint64_t a1, int8x16_t *a2, uint64_t a3, unint64_t a4)
{
  int v5;
  int v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 552) = 0;
  *(_BYTE *)(a1 + 568) = 1;
  if ((a3 & 0x1FFFFFFFFFFFFFF7) == 0x10 || (a3 & 0x1FFFFFFFFFFFFFFFLL) == 0x20)
  {
    if (a4)
      v7 = a4;
    else
      v7 = 16;
    if (v7 < 0x11)
    {
      aes_nohw_set_encrypt_key(a2, 8 * a3, (int8x16_t *)(a1 + 8));
      *(_OWORD *)(a1 + 256) = 0u;
      *(_OWORD *)(a1 + 272) = 0u;
      *(_OWORD *)(a1 + 288) = 0u;
      *(_OWORD *)(a1 + 304) = 0u;
      *(_OWORD *)(a1 + 320) = 0u;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_OWORD *)(a1 + 352) = 0u;
      *(_OWORD *)(a1 + 368) = 0u;
      *(_OWORD *)(a1 + 384) = 0u;
      *(_OWORD *)(a1 + 400) = 0u;
      *(_OWORD *)(a1 + 416) = 0u;
      *(_OWORD *)(a1 + 432) = 0u;
      *(_OWORD *)(a1 + 448) = 0u;
      *(_OWORD *)(a1 + 464) = 0u;
      *(_OWORD *)(a1 + 480) = 0u;
      *(_OWORD *)(a1 + 496) = 0u;
      *(_OWORD *)(a1 + 512) = 0u;
      *(_OWORD *)(a1 + 528) = 0u;
      *(_QWORD *)(a1 + 528) = aes_nohw_encrypt;
      v12 = 0;
      v13 = 0;
      aes_nohw_encrypt((unint64_t)&v12, (uint64_t)&v12, a1 + 8);
      v9 = bswap64(v12);
      *((_QWORD *)&v11 + 1) = v9;
      *(_QWORD *)&v11 = bswap64(v13);
      v10 = v11 >> 63;
      *((_QWORD *)&v11 + 1) = v11;
      *(_QWORD *)&v11 = v9;
      *(_QWORD *)(a1 + 256) = (v9 >> 63) & 0xC200000000000000 ^ v10;
      *(_QWORD *)(a1 + 264) = v11 >> 63;
      *(_QWORD *)(a1 + 512) = gcm_gmult_nohw;
      *(_QWORD *)(a1 + 520) = gcm_ghash_nohw;
      *(_BYTE *)(a1 + 536) &= ~1u;
      *(_QWORD *)(a1 + 544) = aes_nohw_ctr32_encrypt_blocks;
      *(_BYTE *)(a1 + 576) = v7;
      return 1;
    }
    v5 = 116;
    v6 = 911;
  }
  else
  {
    v5 = 102;
    v6 = 902;
  }
  ERR_put_error(30, 0, v5, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", v6);
  return 0;
}

uint64_t aead_aes_gcm_tls13_seal_scatter(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, int8x16_t *a8, unint64_t a9, int8x16_t *a10, unint64_t a11, int8x16_t *a12, unint64_t a13)
{
  unint64_t v13;
  unint64_t v14;

  if (a7 != 12)
  {
    ERR_put_error(30, 0, 121, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", 1387);
    return 0;
  }
  v13 = bswap64(*(_QWORD *)(a6 + 4));
  if (*(_BYTE *)(a1 + 568))
  {
    *(_QWORD *)(a1 + 560) = v13;
    *(_BYTE *)(a1 + 568) = 0;
    v14 = 0;
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 560) ^ v13;
    if (v14 == -1)
    {
LABEL_7:
      ERR_put_error(30, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/e_aes.c", 1407);
      return 0;
    }
  }
  if (v14 < *(_QWORD *)(a1 + 552))
    goto LABEL_7;
  *(_QWORD *)(a1 + 552) = v14 + 1;
  return aead_aes_gcm_seal_scatter_impl(a1 + 8, a2, a3, a4, a5, (int8x8_t *)a6, 0xCuLL, a8, a9, a10, a11, a12, a13, *(unsigned __int8 *)(a1 + 576));
}

void *EVP_aead_chacha20_poly1305()
{
  return &aead_chacha20_poly1305;
}

uint64_t aead_chacha20_poly1305_init(uint64_t a1, _OWORD *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  __int128 v6;

  v4 = 16;
  if (a4)
    v4 = a4;
  if (v4 < 0x11)
  {
    if (a3 == 32)
    {
      v6 = a2[1];
      *(_OWORD *)(a1 + 8) = *a2;
      *(_OWORD *)(a1 + 24) = v6;
      *(_BYTE *)(a1 + 576) = v4;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    ERR_put_error(30, 0, 117, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cipher_extra/e_chacha20poly1305.c", 52);
    return 0;
  }
}

uint64_t aead_chacha20_poly1305_seal_scatter(uint64_t a1, int8x16_t *a2, unsigned int *a3, size_t *a4, size_t a5, int *a6, uint64_t a7, int8x16_t *a8, unint64_t a9, uint64_t a10, unint64_t a11, char *a12, size_t a13)
{
  size_t v13;
  size_t v14;
  int v15;
  int v16;
  unint64_t v17;
  size_t *v20;
  int8x16_t *v22;
  size_t v23;
  unsigned int *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  int8x16_t *v34;
  int8x16_t __src;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v13 = *(unsigned __int8 *)(a1 + 576);
  v14 = v13 + a11;
  if (__CFADD__(v13, a11))
  {
    v15 = 117;
    v16 = 115;
LABEL_10:
    ERR_put_error(30, 0, v15, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cipher_extra/e_chacha20poly1305.c", v16);
    return 0;
  }
  if (v14 > a5)
  {
    v15 = 103;
    v16 = 119;
    goto LABEL_10;
  }
  if (a7 != 12)
  {
    v15 = 121;
    v16 = 123;
    goto LABEL_10;
  }
  v17 = a9;
  if (a9 >= 0x3FFFFFFFC0)
  {
    v15 = 117;
    v16 = 135;
    goto LABEL_10;
  }
  v20 = a4;
  v22 = a2;
  v23 = a13;
  v24 = (unsigned int *)(a1 + 8);
  if (!a11)
    goto LABEL_35;
  v34 = a8;
  v25 = 0;
  v26 = a9 >> 6;
  v27 = a9 & 0x3F;
  do
  {
    LODWORD(v26) = v26 + 1;
    v39 = 0u;
    v40 = 0u;
    __src = 0u;
    v38 = 0u;
    CRYPTO_chacha_20(&__src, &__src, 0x40uLL, v24, a6, v26);
    if (a11 <= v25 + 1)
      v28 = v25 + 1;
    else
      v28 = a11;
    v29 = v28 + ~v25;
    if (v29 >= (v27 ^ 0x3F))
      v29 = v27 ^ 0x3F;
    if (v29 < 0xF || (unint64_t)a3 - a10 < 0x10)
      goto LABEL_31;
    v30 = v29 + 1;
    v31 = (v29 + 1) & 0x70;
    *(int8x16_t *)((char *)a3 + v25) = veorq_s8(*(int8x16_t *)((char *)&__src + v27), *(int8x16_t *)(a10 + v25));
    if (v31 == 16)
    {
      v32 = v25 + 15;
    }
    else
    {
      *(int8x16_t *)((char *)a3 + v25 + 16) = veorq_s8(*(int8x16_t *)((char *)&__src + v27 + 16), *(int8x16_t *)(a10 + v25 + 16));
      if (v31 == 32)
      {
        v32 = v25 + 31;
      }
      else
      {
        *(int8x16_t *)((char *)a3 + v25 + 32) = veorq_s8(*(int8x16_t *)((char *)&__src + v27 + 32), *(int8x16_t *)(a10 + v25 + 32));
        if (v31 == 48)
        {
          v32 = v25 + 47;
        }
        else
        {
          v32 = v25 + 63;
          *(int8x16_t *)((char *)a3 + v25 + 48) = veorq_s8(*(int8x16_t *)((char *)&__src + v27 + 48), *(int8x16_t *)(a10 + v25 + 48));
        }
      }
    }
    v25 += v31;
    v33 = v32 + 1 < a11;
    if (v30 != v31)
    {
      v27 += v31;
      do
      {
LABEL_31:
        *((_BYTE *)a3 + v25) = __src.i8[v27] ^ *(_BYTE *)(a10 + v25);
        v33 = ++v25 < a11;
        if (v27 > 0x3E)
          break;
        ++v27;
      }
      while (v25 < a11);
    }
    v27 = 0;
  }
  while (v33);
  v14 = v13 + a11;
  v20 = a4;
  a8 = v34;
  v22 = a2;
  v23 = a13;
  v17 = a9;
LABEL_35:
  v39 = 0u;
  v40 = 0u;
  __src = 0u;
  v38 = 0u;
  CRYPTO_chacha_20(v22, a8, v17, v24, a6, 1);
  calc_tag(&__src, v24, a6, a12, v23, (unsigned int *)v22, v17, a3, a11);
  if ((_DWORD)v13)
    memcpy((char *)a3 + a11, &__src, v13);
  *v20 = v14;
  return 1;
}

uint64_t aead_chacha20_poly1305_open_gather(uint64_t a1, int8x16_t *a2, int *a3, uint64_t a4, int8x16_t *a5, unint64_t a6, int8x16_t *a7, unint64_t a8, char *a9, size_t a10)
{
  int v12;
  int v13;
  uint64_t v14;
  unsigned int *v20;
  unint64_t v21;
  unsigned __int8 v22;
  int8x16_t *v23;
  int8x16_t *v24;
  int8x16_t v25;
  unint64_t v26;
  int8x16_t v27;
  int8x16_t v28;
  unint64_t v29;
  unint64_t v30;
  int8x8_t v31;
  int8x8_t *v32;
  int8x8_t *v33;
  unint64_t v34;
  int8x8_t v35;
  int8x8_t v36;
  int8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  __int8 *v40;
  char *v41;
  char v42;
  char v43;
  char v44;
  __int128 v45;
  _OWORD v46[2];
  uint64_t v47;

  v47 = *MEMORY[0x24BDAC8D0];
  if (a4 != 12)
  {
    v12 = 121;
    v13 = 226;
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a1 + 576) != a8)
  {
    v12 = 101;
    v13 = 231;
    goto LABEL_7;
  }
  if (a6 < 0x3FFFFFFFC0)
  {
    v20 = (unsigned int *)(a1 + 8);
    memset(v46, 0, sizeof(v46));
    v45 = 0u;
    calc_tag(&v45, (unsigned int *)(a1 + 8), a3, a9, a10, (unsigned int *)a5, a6, 0, 0);
    v14 = 1;
    CRYPTO_chacha_20(a2, a5, a6, v20, a3, 1);
    if (!a8)
      return v14;
    if (a8 < 8)
    {
      v21 = 0;
      v22 = 0;
LABEL_21:
      v39 = a8 - v21;
      v40 = &a7->i8[v21];
      v41 = (char *)&v46[-1] + v21;
      do
      {
        v43 = *v41++;
        v42 = v43;
        v44 = *v40++;
        v22 |= v44 ^ v42;
        --v39;
      }
      while (v39);
LABEL_23:
      if (!v22)
        return 1;
      v12 = 101;
      v13 = 259;
      goto LABEL_7;
    }
    if (a8 >= 0x20)
    {
      v21 = a8 & 0xFFFFFFFFFFFFFFE0;
      v23 = (int8x16_t *)v46;
      v24 = a7 + 1;
      v25 = 0uLL;
      v26 = a8 & 0xFFFFFFFFFFFFFFE0;
      v27 = 0uLL;
      do
      {
        v25 = vorrq_s8(veorq_s8(v24[-1], v23[-1]), v25);
        v27 = vorrq_s8(veorq_s8(*v24, *v23), v27);
        v23 += 2;
        v24 += 2;
        v26 -= 32;
      }
      while (v26);
      v28 = vorrq_s8(v27, v25);
      *(int8x8_t *)v28.i8 = vorr_s8(*(int8x8_t *)v28.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
      v29 = v28.i64[0] | HIDWORD(v28.i64[0]) | ((unint64_t)(v28.i64[0] | HIDWORD(v28.i64[0])) >> 16);
      v22 = v29 | BYTE1(v29);
      if (v21 == a8)
        goto LABEL_23;
      if ((a8 & 0x18) == 0)
        goto LABEL_21;
    }
    else
    {
      v22 = 0;
      v21 = 0;
    }
    v30 = v21;
    v21 = a8 & 0xFFFFFFFFFFFFFFF8;
    v31 = (int8x8_t)v22;
    v32 = (int8x8_t *)((char *)&v46[-1] + v30);
    v33 = (int8x8_t *)&a7->i8[v30];
    v34 = v30 - (a8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v35 = *v32++;
      v36 = v35;
      v37 = *v33++;
      v31 = vorr_s8(veor_s8(v37, v36), v31);
      v34 += 8;
    }
    while (v34);
    v38 = *(_QWORD *)&v31 | HIDWORD(*(_QWORD *)&v31) | ((*(_QWORD *)&v31 | HIDWORD(*(_QWORD *)&v31)) >> 16);
    v22 = v38 | BYTE1(v38);
    if (v21 == a8)
      goto LABEL_23;
    goto LABEL_21;
  }
  v12 = 117;
  v13 = 243;
LABEL_7:
  ERR_put_error(30, 0, v12, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cipher_extra/e_chacha20poly1305.c", v13);
  return 0;
}

uint64_t calc_tag(_DWORD *a1, unsigned int *a2, int *a3, char *a4, size_t a5, unsigned int *a6, unint64_t a7, unsigned int *a8, unint64_t a9)
{
  unint64_t v15;
  size_t v16;
  char *v17;
  __int32 v18;
  __int32 v19;
  unsigned __int32 v20;
  int v21;
  int v22;
  unint64_t v23;
  int v24;
  _DWORD *v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unsigned int *v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  size_t v33;
  uint64_t v34;
  size_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  unsigned int *v39;
  unint64_t v40;
  char v41;
  size_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  unsigned int *v46;
  unint64_t v47;
  char v48;
  uint64_t i;
  unint64_t v50;
  unint64_t v51;
  unsigned int *v52;
  unint64_t v53;
  uint64_t v54;
  char *v55;
  size_t v57;
  unint64_t v58;
  uint64_t v59;
  size_t v60;
  char *v61;
  size_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  size_t v67;
  uint64_t v68;
  _OWORD v69[32];
  int8x16_t v70;
  __int128 v71;
  _QWORD __src[3];

  v15 = a9;
  v16 = a9;
  __src[1] = *MEMORY[0x24BDAC8D0];
  v70 = 0u;
  v71 = 0u;
  CRYPTO_chacha_20(&v70, &v70, 0x20uLL, a2, a3, 0);
  memset(v69, 0, sizeof(v69));
  v68 = -(uint64_t)v69 & 0x30;
  v17 = (char *)v69 + v68;
  v19 = v70.i32[2];
  v18 = v70.i32[1];
  v20 = v70.u32[3];
  v21 = ((unint64_t)v70.i64[0] >> 26) & 0x3FFFF03;
  *(_DWORD *)v17 = v70.i32[0] & 0x3FFFFFF;
  *((_DWORD *)v17 + 1) = v21;
  v22 = (__PAIR64__(v19, v18) >> 20) & 0x3FFC0FF;
  v23 = (__PAIR64__(v20, v19) >> 14) & 0x3F03FFF;
  *((_DWORD *)v17 + 2) = v22;
  *((_DWORD *)v17 + 3) = v23;
  v24 = (v20 >> 8) & 0xFFFFF;
  *((_DWORD *)v17 + 4) = v24;
  *((_DWORD *)v17 + 5) = 5 * v21;
  *((_DWORD *)v17 + 6) = 5 * v22;
  *((_DWORD *)v17 + 7) = 5 * v23;
  *((_DWORD *)v17 + 8) = 5 * v24;
  *((_QWORD *)v17 + 9) = 0;
  *(_QWORD *)(v17 + 44) = 0;
  *(_QWORD *)(v17 + 36) = 0;
  *((_DWORD *)v17 + 13) = 0;
  *((_OWORD *)v17 + 5) = v71;
  v67 = a5;
  if (!a5)
  {
    a5 = a7;
    v34 = -(uint64_t)v69 & 0x30;
    if (!a7)
    {
      v35 = 0;
      if (!a9)
      {
        v36 = 0;
        __src[0] = 0;
        goto LABEL_105;
      }
LABEL_54:
      if (v16 >= 0x10)
      {
        poly1305_update((unsigned int *)v17, a8, v16 & 0xFFFFFFFFFFFFFFF0);
        a8 = (unsigned int *)((char *)a8 + (v16 & 0xFFFFFFFFFFFFFFF0));
        v16 &= 0xFu;
      }
      if (v16)
      {
        for (i = 0; i != v16; ++i)
          *((_BYTE *)&v69[3] + v34 + i + 8) = *((_BYTE *)a8 + i);
        *((_QWORD *)v17 + 9) = v16;
        v36 = v15 + a7;
        v50 = v36 & 0xF;
        if ((v36 & 0xF) != 0)
          goto LABEL_68;
      }
      else
      {
        v16 = *((_QWORD *)v17 + 9);
        v36 = v15 + a7;
        v50 = v36 & 0xF;
        if ((v36 & 0xF) != 0)
          goto LABEL_68;
      }
LABEL_84:
      __src[0] = v35;
      if (v16)
        goto LABEL_85;
LABEL_105:
      v63 = (char *)__src;
      v60 = 8;
      goto LABEL_106;
    }
LABEL_36:
    if (a5 < 0x10)
      goto LABEL_38;
    goto LABEL_37;
  }
  if (a5 < 0x10)
  {
LABEL_5:
    memcpy((char *)&v69[3] + v68 + 8, a4, a5);
    *((_QWORD *)v17 + 9) = a5;
    v27 = v67 & 0xF;
    if ((v67 & 0xF) != 0)
      goto LABEL_6;
LABEL_26:
    if (!a7)
      goto LABEL_66;
    goto LABEL_27;
  }
  v25 = a1;
  v26 = a5 & 0xFFFFFFFFFFFFFFF0;
  poly1305_update((unsigned int *)v17, (unsigned int *)a4, a5 & 0xFFFFFFFFFFFFFFF0);
  a5 &= 0xFu;
  if (a5)
  {
    a4 += v26;
    a1 = v25;
    v15 = a9;
    goto LABEL_5;
  }
  a5 = *((_QWORD *)v17 + 9);
  a1 = v25;
  v15 = a9;
  v27 = v67 & 0xF;
  if ((v67 & 0xF) == 0)
    goto LABEL_26;
LABEL_6:
  v28 = 16 - v27;
  v29 = (unsigned int *)&calc_tag_padding;
  if (!a5)
  {
    a5 = v28;
    goto LABEL_23;
  }
  v30 = 16 - a5;
  if (16 - a5 >= v28)
    v30 = v28;
  if (v30)
  {
    v31 = (char *)&v69[3] + v68 + 8;
    v32 = v30;
    do
    {
      v31[*((_QWORD *)v17 + 9)] = 0;
      ++v31;
      --v32;
    }
    while (v32);
    a5 = *((_QWORD *)v17 + 9);
  }
  v33 = a5 + v30;
  *((_QWORD *)v17 + 9) = a5 + v30;
  a5 = v28 - v30;
  v29 = (unsigned int *)((char *)&calc_tag_padding + v30);
  if (v33 != 16)
  {
    if (a5 < 0x10)
      goto LABEL_15;
LABEL_22:
    poly1305_update((unsigned int *)v17, v29, a5 & 0xFFFFFFFFFFFFFFF0);
    v29 = (unsigned int *)((char *)v29 + (a5 & 0xFFFFFFFFFFFFFFF0));
    a5 &= 0xFu;
    if (!a5)
      goto LABEL_65;
    goto LABEL_23;
  }
  poly1305_update((unsigned int *)v17, (unsigned int *)v17 + 14, 0x10uLL);
  *((_QWORD *)v17 + 9) = 0;
  if (a5 >= 0x10)
    goto LABEL_22;
LABEL_15:
  if (!a5)
  {
LABEL_65:
    a5 = *((_QWORD *)v17 + 9);
    if (!a7)
      goto LABEL_66;
    goto LABEL_27;
  }
LABEL_23:
  memcpy((char *)&v69[3] + v68 + 8, v29, a5);
  *((_QWORD *)v17 + 9) = a5;
  if (!a7)
  {
LABEL_66:
    v34 = -(uint64_t)v69 & 0x30;
    if (!a9)
      goto LABEL_67;
    goto LABEL_44;
  }
LABEL_27:
  v34 = -(uint64_t)v69 & 0x30;
  if (a5)
  {
    v37 = 16 - a5;
    if (16 - a5 >= a7)
      v37 = a7;
    if (v37)
    {
      v38 = (char *)&v69[3] + v68 + 8;
      v39 = a6;
      v40 = v37;
      do
      {
        v41 = *(_BYTE *)v39;
        v39 = (unsigned int *)((char *)v39 + 1);
        v38[*((_QWORD *)v17 + 9)] = v41;
        ++v38;
        --v40;
      }
      while (v40);
      a5 = *((_QWORD *)v17 + 9);
    }
    v42 = a5 + v37;
    *((_QWORD *)v17 + 9) = a5 + v37;
    a5 = a7 - v37;
    a6 = (unsigned int *)((char *)a6 + v37);
    if (v42 == 16)
    {
      poly1305_update((unsigned int *)v17, (unsigned int *)v17 + 14, 0x10uLL);
      *((_QWORD *)v17 + 9) = 0;
    }
    goto LABEL_36;
  }
  a5 = a7;
  if (a7 >= 0x10)
  {
LABEL_37:
    poly1305_update((unsigned int *)v17, a6, a5 & 0xFFFFFFFFFFFFFFF0);
    a6 = (unsigned int *)((char *)a6 + (a5 & 0xFFFFFFFFFFFFFFF0));
    v34 = -(uint64_t)v69 & 0x30;
    a5 &= 0xFu;
  }
LABEL_38:
  if (!a5)
  {
    a5 = *((_QWORD *)v17 + 9);
    if (!a9)
      goto LABEL_67;
    goto LABEL_44;
  }
  v43 = 0;
  do
  {
    *((_BYTE *)&v69[3] + v34 + v43 + 8) = *((_BYTE *)a6 + v43);
    ++v43;
  }
  while (a5 != v43);
  *((_QWORD *)v17 + 9) = a5;
  if (a9)
  {
LABEL_44:
    if (a5)
    {
      v44 = 16 - a5;
      if (16 - a5 >= v15)
        v44 = v15;
      if (v44)
      {
        v45 = (char *)&v69[3] + v34 + 8;
        v46 = a8;
        v47 = v44;
        do
        {
          v48 = *(_BYTE *)v46;
          v46 = (unsigned int *)((char *)v46 + 1);
          v45[*((_QWORD *)v17 + 9)] = v48;
          ++v45;
          --v47;
        }
        while (v47);
        a5 = *((_QWORD *)v17 + 9);
      }
      *((_QWORD *)v17 + 9) = a5 + v44;
      v16 = v15 - v44;
      a8 = (unsigned int *)((char *)a8 + v44);
      if (a5 + v44 == 16)
      {
        poly1305_update((unsigned int *)v17, (unsigned int *)v17 + 14, 0x10uLL);
        *((_QWORD *)v17 + 9) = 0;
      }
    }
    v35 = v67;
    goto LABEL_54;
  }
LABEL_67:
  v16 = a5;
  v35 = v67;
  v36 = v15 + a7;
  v50 = v36 & 0xF;
  if ((v36 & 0xF) == 0)
    goto LABEL_84;
LABEL_68:
  v51 = 16 - v50;
  v52 = (unsigned int *)&calc_tag_padding;
  if (!v16)
  {
    v16 = v51;
    goto LABEL_83;
  }
  v53 = 16 - v16;
  if (16 - v16 >= v51)
    v53 = v51;
  if (v53)
  {
    v54 = -(uint64_t)v53;
    v55 = (char *)&v69[3] + v34 + 8;
    do
    {
      v55[*((_QWORD *)v17 + 9)] = 0;
      ++v55;
    }
    while (!__CFADD__(v54++, 1));
    v16 = *((_QWORD *)v17 + 9);
  }
  v57 = v16 + v53;
  *((_QWORD *)v17 + 9) = v16 + v53;
  v16 = v51 - v53;
  v52 = (unsigned int *)((char *)&calc_tag_padding + v53);
  if (v57 != 16)
  {
    if (v16 < 0x10)
      goto LABEL_78;
LABEL_82:
    poly1305_update((unsigned int *)v17, v52, v16 & 0xFFFFFFFFFFFFFFF0);
    v52 = (unsigned int *)((char *)v52 + (v16 & 0xFFFFFFFFFFFFFFF0));
    v16 &= 0xFu;
    if (!v16)
      goto LABEL_104;
    goto LABEL_83;
  }
  poly1305_update((unsigned int *)v17, (unsigned int *)v17 + 14, 0x10uLL);
  *((_QWORD *)v17 + 9) = 0;
  if (v16 >= 0x10)
    goto LABEL_82;
LABEL_78:
  if (v16)
  {
LABEL_83:
    memcpy((char *)&v69[3] + v34 + 8, v52, v16);
    *((_QWORD *)v17 + 9) = v16;
    goto LABEL_84;
  }
LABEL_104:
  v16 = *((_QWORD *)v17 + 9);
  __src[0] = v35;
  if (!v16)
    goto LABEL_105;
LABEL_85:
  v58 = 16 - v16;
  if (16 - v16 >= 8)
    v59 = 8;
  else
    v59 = 16 - v16;
  if (v59)
  {
    v17[*((_QWORD *)v17 + 9) + 56] = __src[0];
    if (v59 != 1)
    {
      v17[*((_QWORD *)v17 + 9) + 57] = BYTE1(__src[0]);
      if (v59 != 2)
      {
        v17[*((_QWORD *)v17 + 9) + 58] = BYTE2(__src[0]);
        if (v59 != 3)
        {
          v17[*((_QWORD *)v17 + 9) + 59] = BYTE3(__src[0]);
          if (v59 != 4)
          {
            v17[*((_QWORD *)v17 + 9) + 60] = BYTE4(__src[0]);
            if (v59 != 5)
            {
              v17[*((_QWORD *)v17 + 9) + 61] = BYTE5(__src[0]);
              if (v59 != 6)
              {
                v17[*((_QWORD *)v17 + 9) + 62] = BYTE6(__src[0]);
                if (v59 != 7)
                  v17[*((_QWORD *)v17 + 9) + 63] = HIBYTE(__src[0]);
              }
            }
          }
        }
      }
    }
    v16 = *((_QWORD *)v17 + 9);
  }
  *((_QWORD *)v17 + 9) = v16 + v59;
  if (v16 + v59 == 16)
  {
    poly1305_update((unsigned int *)v17, (unsigned int *)v17 + 14, 0x10uLL);
    *((_QWORD *)v17 + 9) = 0;
  }
  if (v58 >= 8)
  {
    v60 = *((_QWORD *)v17 + 9);
    __src[0] = v36;
    if (v60)
      goto LABEL_107;
LABEL_102:
    v61 = (char *)__src;
    v62 = 8;
LABEL_124:
    memcpy((char *)&v69[3] + v34 + 8, v61, v62);
    *((_QWORD *)v17 + 9) = v62;
    return CRYPTO_poly1305_finish((uint64_t)v69, a1);
  }
  v60 = 8 - v59;
  v63 = (char *)__src + v59;
LABEL_106:
  memcpy((char *)&v69[3] + v34 + 8, v63, v60);
  *((_QWORD *)v17 + 9) = v60;
  __src[0] = v36;
  if (!v60)
    goto LABEL_102;
LABEL_107:
  v64 = 16 - v60;
  if (16 - v60 >= 8)
    v65 = 8;
  else
    v65 = 16 - v60;
  if (v65)
  {
    v17[*((_QWORD *)v17 + 9) + 56] = __src[0];
    if (v65 != 1)
    {
      v17[*((_QWORD *)v17 + 9) + 57] = BYTE1(__src[0]);
      if (v65 != 2)
      {
        v17[*((_QWORD *)v17 + 9) + 58] = BYTE2(__src[0]);
        if (v65 != 3)
        {
          v17[*((_QWORD *)v17 + 9) + 59] = BYTE3(__src[0]);
          if (v65 != 4)
          {
            v17[*((_QWORD *)v17 + 9) + 60] = BYTE4(__src[0]);
            if (v65 != 5)
            {
              v17[*((_QWORD *)v17 + 9) + 61] = BYTE5(__src[0]);
              if (v65 != 6)
              {
                v17[*((_QWORD *)v17 + 9) + 62] = BYTE6(__src[0]);
                if (v65 != 7)
                  v17[*((_QWORD *)v17 + 9) + 63] = HIBYTE(__src[0]);
              }
            }
          }
        }
      }
    }
    v60 = *((_QWORD *)v17 + 9);
  }
  *((_QWORD *)v17 + 9) = v60 + v65;
  if (v60 + v65 == 16)
  {
    poly1305_update((unsigned int *)v17, (unsigned int *)v17 + 14, 0x10uLL);
    *((_QWORD *)v17 + 9) = 0;
  }
  if (v64 <= 7)
  {
    v62 = 8 - v65;
    v61 = (char *)__src + v65;
    goto LABEL_124;
  }
  return CRYPTO_poly1305_finish((uint64_t)v69, a1);
}

const EVP_CIPHER *EVP_des_ede3_cbc(void)
{
  return (const EVP_CIPHER *)&evp_des_ede3_cbc;
}

uint64_t des_init_key(uint64_t a1, _DWORD *a2)
{
  DES_set_key_ex(a2, *(_QWORD *)(a1 + 16));
  return 1;
}

uint64_t des_cbc_cipher(uint64_t a1, _DWORD *a2, unsigned int *a3, unint64_t a4)
{
  DES_ncbc_encrypt_ex(a3, a2, a4, *(DES_key_schedule **)(a1 + 16), a1 + 52, *(_DWORD *)(a1 + 28));
  return 1;
}

uint64_t des_ede3_init_key(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 16);
  DES_set_key_ex(a2, v3);
  DES_set_key_ex(a2 + 2, v3 + 128);
  DES_set_key_ex(a2 + 4, v3 + 256);
  return 1;
}

uint64_t des_ede3_cbc_cipher(uint64_t a1, uint64_t a2, unsigned int *a3, unint64_t a4)
{
  DES_ede3_cbc_encrypt_ex(a3, a2, a4, *(DES_key_schedule **)(a1 + 16), (DES_key_schedule *)(*(_QWORD *)(a1 + 16) + 128), (DES_key_schedule *)(*(_QWORD *)(a1 + 16) + 256), (_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 28));
  return 1;
}

const EVP_CIPHER *EVP_rc2_40_cbc(void)
{
  return (const EVP_CIPHER *)&rc2_40_cbc;
}

const EVP_CIPHER *EVP_rc2_cbc(void)
{
  return (const EVP_CIPHER *)&rc2_cbc;
}

uint64_t rc2_init_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char *v13;
  char v14;
  char v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v24;
  _OWORD *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(int *)(a1 + 24);
  *(_BYTE *)(v2 + 4) = 0;
  v4 = v2 + 4;
  v5 = *(_DWORD *)v2;
  if ((int)v3 >= 128)
    v6 = 128;
  else
    v6 = v3;
  if (v5 >= 1024)
    v7 = 1024;
  else
    v7 = *(_DWORD *)v2;
  if (v5 >= 1)
    v8 = v7;
  else
    v8 = 1024;
  if ((int)v3 >= 1)
  {
    if (v6 <= 1)
      v9 = 1;
    else
      v9 = v6;
    if (v9 < 8 || (unint64_t)(v2 - a2 + 4) < 0x20)
    {
      v10 = 0;
      goto LABEL_17;
    }
    if (v9 >= 0x20)
    {
      v10 = v9 & 0xE0;
      v24 = (__int128 *)(a2 + 16);
      v25 = (_OWORD *)(v2 + 20);
      v26 = v9 & 0x7FFFFFE0;
      do
      {
        v27 = *v24;
        *(v25 - 1) = *(v24 - 1);
        *v25 = v27;
        v24 += 2;
        v25 += 2;
        v26 -= 32;
      }
      while (v26);
      if (v10 == v9)
        goto LABEL_19;
      if ((v9 & 0x18) == 0)
      {
LABEL_17:
        v11 = v9 - v10;
        v12 = (_BYTE *)(v10 + v2 + 4);
        v13 = (char *)(a2 + v10);
        do
        {
          v14 = *v13++;
          *v12++ = v14;
          --v11;
        }
        while (v11);
        goto LABEL_19;
      }
    }
    else
    {
      v10 = 0;
    }
    v28 = v10;
    v10 = v9 & 0x7FFFFFF8;
    v29 = (uint64_t *)(a2 + v28);
    v30 = (_QWORD *)(v28 + v2 + 4);
    v31 = v28 - v10;
    do
    {
      v32 = *v29++;
      *v30++ = v32;
      v31 += 8;
    }
    while (v31);
    if (v10 != v9)
      goto LABEL_17;
LABEL_19:
    if ((int)v3 > 127)
      goto LABEL_22;
  }
  v15 = *(_BYTE *)(v4 + v6 - 1);
  v16 = (128 - v6);
  v17 = (_BYTE *)(v2 + 4);
  do
  {
    v15 = key_table[(*v17 + v15)];
    v17[v3] = v15;
    ++v17;
    --v16;
  }
  while (v16);
LABEL_22:
  v18 = (v8 + 7) >> 3;
  v19 = (128 - v18);
  v20 = key_table[(0xFFu >> (-(char)v8 & 7)) & (unint64_t)*(unsigned __int8 *)(v4 + v19)];
  *(_BYTE *)(v4 + v19) = v20;
  if (v18 != 128)
  {
    do
    {
      v20 = key_table[(*(_BYTE *)(v2 + v18 + v19 + 3) ^ v20)];
      *(_BYTE *)(v2 + v19-- + 3) = v20;
    }
    while (v19);
  }
  v21 = 0;
  do
  {
    v22 = v21 + 127;
    v21 -= 2;
  }
  while (v22 > 1);
  return 1;
}

uint64_t rc2_cbc_cipher(uint64_t a1, unsigned __int8 *out, unsigned __int8 *in, unint64_t length)
{
  unint64_t v4;
  uint64_t v8;

  v4 = length;
  v8 = *(_QWORD *)(a1 + 16);
  if (length >= 0x10000)
  {
    do
    {
      RC2_cbc_encrypt(in, out, 0x10000, (RC2_KEY *)(v8 + 4), (unsigned __int8 *)(a1 + 52), *(_DWORD *)(a1 + 28));
      v4 -= 0x10000;
      in += 0x10000;
      out += 0x10000;
    }
    while (v4 >> 16);
  }
  if (v4)
    RC2_cbc_encrypt(in, out, v4, (RC2_KEY *)(v8 + 4), (unsigned __int8 *)(a1 + 52), *(_DWORD *)(a1 + 28));
  return 1;
}

uint64_t rc2_ctrl(uint64_t a1, int a2, int a3)
{
  if (a2 == 3)
    goto LABEL_4;
  if (!a2)
  {
    a3 = 8 * *(_DWORD *)(a1 + 24);
LABEL_4:
    **(_DWORD **)(a1 + 16) = a3;
    return 1;
  }
  return 0xFFFFFFFFLL;
}

void RC2_cbc_encrypt(const unsigned __int8 *in, unsigned __int8 *out, uint64_t length, RC2_KEY *ks, unsigned __int8 *iv, int enc)
{
  unsigned __int8 *v6;
  uint64_t v8;
  unsigned int v11;
  unsigned int v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  const unsigned __int8 *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  const unsigned __int8 *v36;
  __int16 v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  unint64_t data[2];

  v6 = iv;
  v8 = length;
  data[1] = *MEMORY[0x24BDAC8D0];
  v11 = *(_DWORD *)iv;
  v12 = *((_DWORD *)iv + 1);
  if (enc)
  {
    if (length >= 8)
    {
      do
      {
        v13 = out;
        v14 = v8;
        v8 -= 8;
        v15 = *(_DWORD *)in;
        v16 = *((_DWORD *)in + 1);
        in += 8;
        LODWORD(data[0]) = v15 ^ v11;
        HIDWORD(data[0]) = v16 ^ v12;
        RC2_encrypt(data, ks);
        v11 = data[0];
        v12 = HIDWORD(data[0]);
        out += 8;
        *(_DWORD *)v13 = data[0];
        *((_DWORD *)v13 + 1) = v12;
      }
      while (v14 > 0xF);
    }
    if (v8)
    {
      v17 = 0;
      v18 = &in[v8];
      v19 = 0;
      switch(v8)
      {
        case 1:
          goto LABEL_12;
        case 2:
          goto LABEL_11;
        case 3:
          goto LABEL_10;
        case 4:
          goto LABEL_9;
        case 5:
          goto LABEL_8;
        case 6:
          goto LABEL_7;
        case 7:
          v20 = *--v18;
          v17 = v20 << 16;
LABEL_7:
          v21 = *--v18;
          v17 |= v21 << 8;
LABEL_8:
          v22 = *--v18;
          v17 |= v22;
LABEL_9:
          v19 = v17;
          v23 = *--v18;
          v17 = v23 << 24;
LABEL_10:
          v24 = *--v18;
          v17 |= v24 << 16;
LABEL_11:
          v25 = *--v18;
          v17 |= v25 << 8;
LABEL_12:
          v17 |= *(v18 - 1);
          break;
        default:
          v19 = 0;
          break;
      }
      LODWORD(data[0]) = v17 ^ v11;
      HIDWORD(data[0]) = v19 ^ v12;
      RC2_encrypt(data, ks);
      LOBYTE(v11) = data[0];
      v12 = HIDWORD(data[0]);
      v26 = LODWORD(data[0]) >> 8;
      v27 = HIWORD(LODWORD(data[0]));
      v28 = HIBYTE(LODWORD(data[0]));
      v29 = HIDWORD(data[0]) >> 8;
      v30 = HIWORD(HIDWORD(data[0]));
      v31 = HIBYTE(HIDWORD(data[0]));
      *(_DWORD *)out = data[0];
      *((_DWORD *)out + 1) = v12;
    }
    else
    {
      v26 = v11 >> 8;
      v27 = HIWORD(v11);
      v28 = HIBYTE(v11);
      v29 = v12 >> 8;
      v30 = HIWORD(v12);
      v31 = HIBYTE(v12);
    }
    *v6 = v11;
    v6[1] = v26;
    v6[2] = v27;
    v6[3] = v28;
    v6[4] = v12;
    v6[5] = v29;
    v6[6] = v30;
  }
  else
  {
    if (length >= 8)
    {
      do
      {
        v32 = out;
        v33 = v11;
        v34 = v12;
        v11 = *(_DWORD *)in;
        v12 = *((_DWORD *)in + 1);
        v35 = v8;
        v8 -= 8;
        v36 = in + 8;
        LODWORD(data[0]) = *(_DWORD *)in;
        HIDWORD(data[0]) = v12;
        RC2_decrypt(data, ks);
        v37 = WORD1(data[0]) ^ HIWORD(v33);
        v38 = HIDWORD(data[0]) ^ v34;
        *(_WORD *)v32 = LOWORD(data[0]) ^ v33;
        *((_WORD *)v32 + 1) = v37;
        *((_DWORD *)v32 + 1) = v38;
        out = v32 + 8;
        in += 8;
      }
      while (v35 > 0xF);
      in = v36;
      v6 = iv;
    }
    if (v8)
    {
      v40 = *(_DWORD *)in;
      v39 = *((_DWORD *)in + 1);
      data[0] = __PAIR64__(v39, v40);
      RC2_decrypt(data, ks);
      v41 = LODWORD(data[0]) ^ v11;
      v42 = HIDWORD(data[0]) ^ v12;
      v43 = &out[v8];
      switch(v8)
      {
        case 1:
          goto LABEL_25;
        case 2:
          goto LABEL_24;
        case 3:
          goto LABEL_23;
        case 4:
          goto LABEL_22;
        case 5:
          goto LABEL_21;
        case 6:
          goto LABEL_20;
        case 7:
          *--v43 = BYTE2(v42);
LABEL_20:
          *--v43 = BYTE1(v42);
LABEL_21:
          *--v43 = v42;
LABEL_22:
          *--v43 = HIBYTE(v41);
LABEL_23:
          *--v43 = BYTE2(v41);
LABEL_24:
          *--v43 = BYTE1(v41);
LABEL_25:
          *(v43 - 1) = v41;
          break;
        default:
          break;
      }
    }
    else
    {
      v40 = v11;
      v39 = v12;
    }
    *(_DWORD *)v6 = v40;
    *((_WORD *)v6 + 2) = v39;
    v31 = HIBYTE(v39);
    v6[6] = BYTE2(v39);
  }
  v6[7] = v31;
}

void RC2_encrypt(unint64_t *data, RC2_KEY *key)
{
  uint64_t v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  unsigned __int16 v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  unsigned int v15;
  char *v16;
  unsigned __int16 v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned __int16 *v22;
  int v23;
  unsigned int v24;
  unsigned __int16 v25;

  v2 = 0;
  v3 = *(_DWORD *)data;
  v4 = *((_DWORD *)data + 1);
  v5 = HIWORD(v4);
  v6 = HIWORD(*(_DWORD *)data);
  do
  {
    v7 = LOWORD(key->data[v2]) + (v6 & ~v5) + v3 + (v5 & v4);
    v3 = (v7 >> 15) & 1 | (2 * (unsigned __int16)v7);
    LOWORD(v7) = HIWORD(key->data[v2]) + (v3 & v5) + (v4 & ~(_WORD)v3) + v6;
    v6 = ((unsigned __int16)v7 >> 14) & 0xFFFC0003 | (4 * (unsigned __int16)v7);
    v8 = LOWORD(key->data[v2 + 1]) + (v6 & v3) + (v5 & ~(_WORD)v6) + v4;
    v4 = (v8 >> 13) & 0xFFF80007 | (8 * v8);
    v5 = ((unsigned __int16)(HIWORD(key->data[v2 + 1]) + (v4 & v6) + (v3 & ~(_WORD)v4) + v5) >> 11) & 0xFFE0001F | (32 * (unsigned __int16)(HIWORD(key->data[v2 + 1]) + (v4 & v6) + (v3 & ~(_WORD)v4) + v5));
    v2 += 2;
  }
  while ((_DWORD)(v2 * 4) != 40);
  v9 = 0;
  v10 = *((unsigned __int16 *)key->data + (v5 & 0x3F)) + (unsigned __int16)v3;
  v11 = *((unsigned __int16 *)key->data + (v10 & 0x3F)) + (unsigned __int16)v6;
  v12 = *((unsigned __int16 *)key->data + (v11 & 0x3F)) + (unsigned __int16)((v8 >> 13) | (8 * v8));
  v13 = *((unsigned __int16 *)key->data + (v12 & 0x3F)) + (unsigned __int16)v5;
  v14 = (char *)key + v2 * 4;
  do
  {
    v15 = *(unsigned __int16 *)&v14[v9] + (v11 & ~v13) + v10 + (v13 & v12);
    v10 = (v15 >> 15) & 1 | (2 * (unsigned __int16)v15);
    v16 = (char *)key + v9 + v2 * 4;
    LOWORD(v15) = *((_WORD *)v16 + 1) + (v10 & v13) + (v12 & ~(_WORD)v10) + v11;
    v11 = ((unsigned __int16)v15 >> 14) & 0xFFFC0003 | (4 * (unsigned __int16)v15);
    v17 = *((_WORD *)v16 + 2) + (v11 & v10) + (v13 & ~(_WORD)v11) + v12;
    v12 = (v17 >> 13) & 0xFFF80007 | (8 * v17);
    v13 = ((unsigned __int16)(*(_WORD *)&v14[v9 + 6] + (v12 & v11) + (v10 & ~(_WORD)v12) + v13) >> 11) & 0xFFE0001F | (32 * (unsigned __int16)(*(_WORD *)&v14[v9 + 6] + (v12 & v11) + (v10 & ~(_WORD)v12) + v13));
    v9 += 8;
  }
  while ((_DWORD)v9 != 48);
  v18 = *((unsigned __int16 *)key->data + (v13 & 0x3F)) + (unsigned __int16)v10;
  v19 = *((unsigned __int16 *)key->data + (v18 & 0x3F)) + (unsigned __int16)v11;
  v20 = *((unsigned __int16 *)key->data + (v19 & 0x3F)) + (unsigned __int16)((v17 >> 13) | (8 * v17));
  v21 = *((unsigned __int16 *)key->data + (v20 & 0x3F)) + (unsigned __int16)v13;
  v22 = (unsigned __int16 *)((char *)key + v2 * 4 + v9);
  v23 = -5;
  do
  {
    v24 = *v22 + (v19 & ~v21) + v18 + (v21 & v20);
    v18 = (v24 >> 15) & 1 | (2 * (unsigned __int16)v24);
    LOWORD(v24) = v22[1] + (v18 & v21) + (v20 & ~(_WORD)v18) + v19;
    v19 = ((unsigned __int16)v24 >> 14) & 0xFFFC0003 | (4 * (unsigned __int16)v24);
    v25 = v22[2] + (v19 & v18) + (v21 & ~(_WORD)v19) + v20;
    v20 = (v25 >> 13) & 0xFFF80007 | (8 * v25);
    v21 = ((unsigned __int16)(v22[3] + (v20 & v19) + (v18 & ~(_WORD)v20) + v21) >> 11) & 0xFFE0001F | (32 * (unsigned __int16)(v22[3] + (v20 & v19) + (v18 & ~(_WORD)v20) + v21));
    v22 += 4;
  }
  while (!__CFADD__(v23++, 1));
  *(_DWORD *)data = (unsigned __int16)v18 | ((unsigned __int16)v19 << 16);
  *((_DWORD *)data + 1) = (unsigned __int16)((v25 >> 13) | (8 * v25)) | ((unsigned __int16)v21 << 16);
}

void RC2_decrypt(unint64_t *data, RC2_KEY *key)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  _WORD *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  __int16 v12;
  char v13;
  __int16 v14;

  v3 = *(_DWORD *)data;
  v2 = *((_DWORD *)data + 1);
  v4 = HIWORD(*(_DWORD *)data);
  v5 = HIWORD(v2);
  v6 = (_WORD *)&key->data[31] + 1;
  v7 = 3;
  v8 = 5;
  while (1)
  {
    v9 = ((v5 << 11) | (v5 >> 5)) - (v3 & ~(unsigned __int16)v2 | v2 & v4) - (unsigned __int16)*v6;
    v5 = (unsigned __int16)((((_WORD)v5 << 11) | (v5 >> 5)) - (v3 & ~(_WORD)v2 | v2 & v4) - *v6);
    v10 = (((unsigned __int16)v2 >> 3) | ((unsigned __int16)v2 << 13))
        - ((v4 & v3)
         + (unsigned __int16)*(v6 - 1))
        - (v9 & ~v4);
    v2 = (unsigned __int16)((((unsigned __int16)v2 >> 3) | ((_WORD)v2 << 13))
                          - ((v4 & v3)
                           + *(v6 - 1))
                          - (v9 & ~(_WORD)v4));
    v11 = ((v4 << 14) | (v4 >> 2)) - (unsigned __int16)*(v6 - 2) - (v10 & ~(unsigned __int16)v3 | v9 & v3);
    v4 = (unsigned __int16)((((_WORD)v4 << 14) | (v4 >> 2)) - *(v6 - 2) - (v10 & ~(_WORD)v3 | v9 & v3));
    LOWORD(v3) = (((unsigned __int16)v3 >> 1) | ((_WORD)v3 << 15)) - *(v6 - 3) - (v11 & ~(_WORD)v5 | v10 & v9);
    if (--v8)
      goto LABEL_2;
    if (!--v7)
      break;
    v12 = *((_WORD *)key->data + (v10 & 0x3F));
    if (v7 == 2)
      v8 = 6;
    else
      v8 = 5;
    v13 = v9 - v12;
    v5 = (unsigned __int16)(v9 - v12);
    v14 = *((_WORD *)key->data + (v3 & 0x3F));
    LOWORD(v3) = v3 - *((_WORD *)key->data + (v13 & 0x3F));
    v4 = (unsigned __int16)(v11 - v14);
    v2 = (unsigned __int16)(v10 - *((_WORD *)key->data + (v11 & 0x3F)));
LABEL_2:
    v3 = (unsigned __int16)v3;
    v6 -= 4;
  }
  *(_DWORD *)data = (unsigned __int16)v3 | ((unsigned __int16)v4 << 16);
  *((_DWORD *)data + 1) = v2 | (v5 << 16);
}

const EVP_CIPHER *EVP_rc4(void)
{
  return (const EVP_CIPHER *)&rc4;
}

uint64_t rc4_init_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;

  v2 = 0;
  v3 = 0;
  v4 = 0;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 24);
  *(_OWORD *)(v5 + 24) = xmmword_208F08E20;
  *(_OWORD *)(v5 + 40) = xmmword_208F25DA0;
  *(_OWORD *)(v5 + 56) = xmmword_208F25DB0;
  *(_OWORD *)(v5 + 72) = xmmword_208F25DC0;
  *(_OWORD *)(v5 + 88) = xmmword_208F25DD0;
  *(_OWORD *)(v5 + 104) = xmmword_208F25DE0;
  *(_OWORD *)(v5 + 120) = xmmword_208F25DF0;
  *(_OWORD *)(v5 + 136) = xmmword_208F25E00;
  *(_OWORD *)(v5 + 152) = xmmword_208F25E10;
  *(_OWORD *)(v5 + 168) = xmmword_208F25E20;
  *(_OWORD *)(v5 + 184) = xmmword_208F25E30;
  *(_OWORD *)(v5 + 200) = xmmword_208F25E40;
  *(_OWORD *)(v5 + 216) = xmmword_208F25E50;
  *(_OWORD *)(v5 + 232) = xmmword_208F25E60;
  *(_OWORD *)(v5 + 264) = xmmword_208F25E80;
  *(_OWORD *)(v5 + 280) = xmmword_208F25E90;
  *(_OWORD *)(v5 + 296) = xmmword_208F25EA0;
  *(_OWORD *)(v5 + 312) = xmmword_208F25EB0;
  *(_OWORD *)(v5 + 328) = xmmword_208F25EC0;
  *(_OWORD *)(v5 + 344) = xmmword_208F25ED0;
  *(_OWORD *)(v5 + 360) = xmmword_208F25EE0;
  *(_OWORD *)(v5 + 376) = xmmword_208F25EF0;
  *(_OWORD *)(v5 + 392) = xmmword_208F25F00;
  *(_OWORD *)(v5 + 408) = xmmword_208F25F10;
  *(_OWORD *)(v5 + 424) = xmmword_208F25F20;
  *(_OWORD *)(v5 + 440) = xmmword_208F25F30;
  *(_OWORD *)(v5 + 456) = xmmword_208F25F40;
  *(_OWORD *)(v5 + 472) = xmmword_208F25F50;
  *(_OWORD *)(v5 + 488) = xmmword_208F25F60;
  *(_OWORD *)(v5 + 504) = xmmword_208F25F70;
  *(_OWORD *)(v5 + 520) = xmmword_208F25F80;
  *(_OWORD *)(v5 + 536) = xmmword_208F25F90;
  *(_OWORD *)(v5 + 552) = xmmword_208F25FA0;
  *(_OWORD *)(v5 + 568) = xmmword_208F25FB0;
  *(_OWORD *)(v5 + 584) = xmmword_208F25FC0;
  *(_OWORD *)(v5 + 600) = xmmword_208F25FD0;
  *(_OWORD *)(v5 + 616) = xmmword_208F25FE0;
  *(_OWORD *)(v5 + 632) = xmmword_208F25FF0;
  *(_OWORD *)(v5 + 648) = xmmword_208F26000;
  *(_OWORD *)(v5 + 664) = xmmword_208F26010;
  *(_OWORD *)(v5 + 680) = xmmword_208F26020;
  *(_OWORD *)(v5 + 696) = xmmword_208F26030;
  *(_OWORD *)(v5 + 712) = xmmword_208F26040;
  *(_OWORD *)(v5 + 728) = xmmword_208F26050;
  *(_OWORD *)(v5 + 744) = xmmword_208F26060;
  *(_OWORD *)(v5 + 760) = xmmword_208F26070;
  *(_OWORD *)(v5 + 776) = xmmword_208F26080;
  *(_OWORD *)(v5 + 792) = xmmword_208F26090;
  *(_OWORD *)(v5 + 808) = xmmword_208F260A0;
  *(_OWORD *)(v5 + 824) = xmmword_208F260B0;
  *(_OWORD *)(v5 + 840) = xmmword_208F260C0;
  *(_OWORD *)(v5 + 856) = xmmword_208F260D0;
  *(_OWORD *)(v5 + 872) = xmmword_208F260E0;
  *(_OWORD *)(v5 + 888) = xmmword_208F260F0;
  *(_OWORD *)(v5 + 904) = xmmword_208F26100;
  *(_OWORD *)(v5 + 920) = xmmword_208F26110;
  *(_OWORD *)(v5 + 936) = xmmword_208F26120;
  *(_OWORD *)(v5 + 952) = xmmword_208F26130;
  *(_OWORD *)(v5 + 968) = xmmword_208F26140;
  *(_OWORD *)(v5 + 984) = xmmword_208F26150;
  *(_OWORD *)(v5 + 1000) = xmmword_208F26160;
  *(_OWORD *)(v5 + 1016) = xmmword_208F26170;
  *(_OWORD *)(v5 + 248) = xmmword_208F25E70;
  *(_QWORD *)v5 = 0;
  *(_OWORD *)(v5 + 8) = xmmword_208F071C0;
  v7 = v5 + 8;
  do
  {
    v8 = *(_DWORD *)(v7 + v2);
    v9 = *(_BYTE *)(a2 + v4) + v8 + v3;
    v3 = v9;
    if (v4 + 1 == v6)
      v4 = 0;
    else
      ++v4;
    v10 = 4 * v9;
    *(_DWORD *)(v7 + v2) = *(_DWORD *)(v7 + v10);
    *(_DWORD *)(v7 + v10) = v8;
    v2 += 4;
  }
  while (v2 != 1024);
  return 1;
}

uint64_t rc4_cipher(uint64_t a1, _BYTE *a2, char *a3, uint64_t a4)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  char v12;

  v4 = *(unsigned int **)(a1 + 16);
  v5 = *v4;
  v6 = v4[1];
  if (a4)
  {
    v7 = v4 + 2;
    do
    {
      v5 = (v5 + 1);
      v8 = v5;
      v9 = v7[v8];
      v6 = (v9 + v6);
      v10 = v6;
      v11 = v7[v10];
      v7[v8] = v11;
      v7[v10] = v9;
      v12 = *a3++;
      *a2++ = v12 ^ v7[(v11 + v9)];
      --a4;
    }
    while (a4);
  }
  *v4 = v5;
  v4[1] = v6;
  return 1;
}

uint64_t aead_aes_128_cbc_sha1_tls_init(unsigned __int8 **a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (pthread_once(&EVP_aes_128_cbc_once, (void (*)(void))EVP_aes_128_cbc_init)
    || pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
  {
    abort();
  }
  return aead_tls_init(a1, a2, a3, a4, a5, (EVP_CIPHER *)&EVP_aes_128_cbc_storage, (const EVP_MD *)&EVP_sha1_storage, 0);
}

void aead_tls_cleanup(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;

  v3 = a1 + 8;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v4 = *(void (**)(uint64_t))(v2 + 40);
    if (v4)
      v4(a1 + 8);
  }
  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
  {
    v7 = *(_QWORD *)(v5 - 8);
    v6 = (void *)(v5 - 8);
    v8 = v7 + 8;
    if (v7 != -8)
      bzero(v6, v8);
    free(v6);
  }
  *(_QWORD *)(v3 + 144) = 0;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)v3 = 0u;
  HMAC_CTX_cleanup((HMAC_CTX *)(a1 + 160));
}

uint64_t aead_tls_open(uint64_t a1, unsigned __int8 *out, ENGINE *a3, unint64_t a4, const unsigned __int8 *a5, uint64_t a6, unsigned __int8 *in, unint64_t inl, uint64_t a9, uint64_t a10)
{
  int v10;
  int v11;
  int v12;
  HMAC_CTX *v14;
  uint64_t result;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  EVP_MD *v24;
  uint64_t pkey_type;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  unsigned int *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  unsigned __int8 v35;
  BOOL v36;
  int8x16_t *v37;
  int8x16_t *v38;
  int8x16_t v39;
  unint64_t v40;
  int8x16_t v41;
  int8x16_t v42;
  unint64_t v43;
  unint64_t v44;
  int8x8_t v45;
  int8x8_t *v46;
  unsigned __int8 *v47;
  unint64_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  uint64_t v52;
  size_t v53;
  unsigned __int8 *v54;
  char *v55;
  char v56;
  char v57;
  char v58;
  size_t __n;
  uint64_t v60;
  uint64_t v61;
  int outl;
  unsigned int len[16];
  unsigned __int8 md[16];
  uint64_t v65;
  _BYTE v66[11];
  __int16 v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 36))
  {
    v10 = 112;
    v11 = 244;
LABEL_13:
    ERR_put_error(30, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cipher_extra/e_tls.c", v11);
    return 0;
  }
  v12 = inl;
  v14 = (HMAC_CTX *)(a1 + 160);
  if (*(unsigned int *)(*(_QWORD *)(a1 + 160) + 4) > inl)
  {
    v10 = 101;
    v11 = 249;
    goto LABEL_13;
  }
  if (a4 < inl)
  {
    v10 = 103;
    v11 = 256;
    goto LABEL_13;
  }
  if (*(unsigned __int8 *)(*(_QWORD *)a1 + 1) != a6)
  {
    v10 = 111;
    v11 = 261;
    goto LABEL_13;
  }
  if (a10 != 11)
  {
    v10 = 109;
    v11 = 266;
    goto LABEL_13;
  }
  if (inl >> 31)
  {
    v10 = 117;
    v11 = 272;
    goto LABEL_13;
  }
  v19 = (uint64_t *)(a1 + 8);
  if ((*(_DWORD *)(*(_QWORD *)(a1 + 8) + 20) & 0x3F) != 2
    || *(_BYTE *)(a1 + 329)
    || (result = EVP_CipherInit_ex((EVP_CIPHER_CTX *)(a1 + 8), 0, a3, 0, a5, 0), (_DWORD)result))
  {
    outl = 0;
    result = EVP_DecryptUpdate((EVP_CIPHER_CTX *)(a1 + 8), out, &outl, in, v12);
    if ((_DWORD)result)
    {
      v20 = outl;
      result = EVP_DecryptFinal_ex((EVP_CIPHER_CTX *)(a1 + 8), &out[outl], &outl);
      if ((_DWORD)result)
      {
        v21 = outl + v20;
        v60 = 0;
        v61 = 0;
        v22 = *v19;
        v23 = *(_DWORD *)(*v19 + 20) & 0x3F;
        if (v23 == 2)
        {
          v24 = (EVP_MD *)v14->md;
          pkey_type = v14->md->pkey_type;
          if (!EVP_tls_cbc_remove_padding(&v60, &v61, (uint64_t)out, v21, *(unsigned int *)(v22 + 4), pkey_type))
          {
            v10 = 101;
            v11 = 308;
            goto LABEL_13;
          }
          v26 = v61;
        }
        else
        {
          v60 = -1;
          v24 = (EVP_MD *)v14->md;
          pkey_type = v14->md->pkey_type;
          v26 = v21;
        }
        v27 = v26 - pkey_type;
        *(_QWORD *)v66 = *(_QWORD *)a9;
        *(_DWORD *)&v66[7] = *(_DWORD *)(a9 + 7);
        v67 = bswap32(v27) >> 16;
        __n = 0;
        if (v23 == 2 && (v24->type == 672 || v24->type == 64))
        {
          if (!EVP_tls_cbc_digest_record(v24, md, (uint64_t *)&__n, v66, (char *)out, v27, v21, a1 + 264, *(unsigned __int8 *)(a1 + 328)))
          {
            v10 = 101;
            v11 = 342;
            goto LABEL_13;
          }
          v28 = __n;
          v29 = len;
          EVP_tls_cbc_copy_mac((uint64_t)len, __n, (uint64_t)out, v26, v21);
        }
        else
        {
          len[0] = 0;
          HMAC_Init_ex(v14, 0, 0, 0, 0);
          if (!v30)
            return 0;
          v32 = *(_QWORD *)(a1 + 168);
          v31 = a1 + 168;
          (*(void (**)(uint64_t, _BYTE *, uint64_t))(v32 + 24))(v31, v66, 13);
          (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v31 + 24))(v31, out, v27);
          HMAC_Final(v14, md, len);
          if (!v33)
            return 0;
          v28 = len[0];
          __n = len[0];
          v29 = (unsigned int *)&out[v27];
        }
        if (!v28)
        {
          v36 = 0;
          goto LABEL_51;
        }
        if (v28 < 8)
        {
          v34 = 0;
          v35 = 0;
LABEL_48:
          v53 = v28 - v34;
          v54 = &md[v34];
          v55 = (char *)v29 + v34;
          do
          {
            v57 = *v55++;
            v56 = v57;
            v58 = *v54++;
            v35 |= v58 ^ v56;
            --v53;
          }
          while (v53);
LABEL_50:
          v36 = v35 != 0;
LABEL_51:
          if (!v36 && v60)
          {
            *(_QWORD *)a3 = v27;
            return 1;
          }
          v10 = 101;
          v11 = 376;
          goto LABEL_13;
        }
        if (v28 >= 0x20)
        {
          v34 = v28 & 0xFFFFFFFFFFFFFFE0;
          v37 = (int8x16_t *)(v29 + 4);
          v38 = (int8x16_t *)&v65;
          v39 = 0uLL;
          v40 = v28 & 0xFFFFFFFFFFFFFFE0;
          v41 = 0uLL;
          do
          {
            v39 = vorrq_s8(veorq_s8(v38[-1], v37[-1]), v39);
            v41 = vorrq_s8(veorq_s8(*v38, *v37), v41);
            v37 += 2;
            v38 += 2;
            v40 -= 32;
          }
          while (v40);
          v42 = vorrq_s8(v41, v39);
          *(int8x8_t *)v42.i8 = vorr_s8(*(int8x8_t *)v42.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL));
          v43 = v42.i64[0] | HIDWORD(v42.i64[0]) | ((unint64_t)(v42.i64[0] | HIDWORD(v42.i64[0])) >> 16);
          v35 = v43 | BYTE1(v43);
          if (v28 == v34)
            goto LABEL_50;
          if ((v28 & 0x18) == 0)
            goto LABEL_48;
        }
        else
        {
          v35 = 0;
          v34 = 0;
        }
        v44 = v34;
        v34 = v28 & 0xFFFFFFFFFFFFFFF8;
        v45 = (int8x8_t)v35;
        v46 = (int8x8_t *)((char *)v29 + v44);
        v47 = &md[v44];
        v48 = v44 - (v28 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v49 = *v46++;
          v50 = v49;
          v51 = *(int8x8_t *)v47;
          v47 += 8;
          v45 = vorr_s8(veor_s8(v51, v50), v45);
          v48 += 8;
        }
        while (v48);
        v52 = *(_QWORD *)&v45 | HIDWORD(*(_QWORD *)&v45) | ((*(_QWORD *)&v45 | HIDWORD(*(_QWORD *)&v45)) >> 16);
        v35 = v52 | BYTE1(v52);
        if (v28 == v34)
          goto LABEL_50;
        goto LABEL_48;
      }
    }
  }
  return result;
}

void aead_tls_seal_scatter(HMAC_CTX *ctx, unsigned __int8 *a2, void *a3, size_t *a4, unint64_t a5, const unsigned __int8 *a6, uint64_t a7, const unsigned __int8 *a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v13;
  int v14;
  HMAC_CTX *v21;
  unint64_t v22;
  const EVP_MD *digest;
  int v24;
  ENGINE *v25;
  int v26;
  EVP_MD_CTX *p_md_ctx;
  unint64_t pkey_type;
  unint64_t v29;
  size_t v30;
  int v31;
  size_t v32;
  int v33;
  int v34;
  int v35;
  int outl;
  unsigned int len;
  __int16 v38;
  unsigned __int8 out[256];
  unsigned __int8 md[64];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (!HIDWORD(ctx->md_ctx.md_data))
  {
    v13 = 112;
    v14 = 128;
    goto LABEL_22;
  }
  if (a9 >> 31)
  {
    v13 = 117;
    v14 = 134;
LABEL_22:
    ERR_put_error(30, 0, v13, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cipher_extra/e_tls.c", v14);
    return;
  }
  v21 = (HMAC_CTX *)&ctx->key[52];
  v22 = *(unsigned int *)(*(_QWORD *)&ctx->key[52] + 4);
  digest = ctx->md_ctx.digest;
  if ((HIDWORD(digest->flags) & 0x3F) == 2)
    v22 = (v22 + a9) / digest->pkey_type * digest->pkey_type
        - a9
        + digest->pkey_type;
  if (v22 > a5)
  {
    v13 = 103;
    v14 = 139;
    goto LABEL_22;
  }
  if (BYTE1(ctx->md->type) != a7)
  {
    v13 = 111;
    v14 = 144;
    goto LABEL_22;
  }
  if (a13 != 11)
  {
    v13 = 109;
    v14 = 149;
    goto LABEL_22;
  }
  v38 = bswap32(a9) >> 16;
  len = 0;
  HMAC_Init_ex((HMAC_CTX *)&ctx->key[52], 0, 0, 0, 0);
  if (v24)
  {
    (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)&ctx->key[60] + 24))(&ctx->key[60], a12, 11);
    (*(void (**)(unsigned __int8 *, __int16 *, uint64_t))(*(_QWORD *)&ctx->key[60] + 24))(&ctx->key[60], &v38, 2);
    (*(void (**)(unsigned __int8 *, const unsigned __int8 *, unint64_t))(*(_QWORD *)&ctx->key[60]
                                                                                         + 24))(&ctx->key[60], a8, a9);
    HMAC_Final(v21, md, &len);
    if (v26)
    {
      p_md_ctx = &ctx->md_ctx;
      if ((HIDWORD(ctx->md_ctx.digest->flags) & 0x3F) != 2
        || BYTE1(ctx[1].o_ctx.flags)
        || EVP_CipherInit_ex((EVP_CIPHER_CTX *)&ctx->md_ctx, 0, v25, 0, a6, 1))
      {
        outl = 0;
        if (EVP_EncryptUpdate((EVP_CIPHER_CTX *)&ctx->md_ctx, a2, &outl, a8, a9))
        {
          pkey_type = p_md_ctx->digest->pkey_type;
          v29 = pkey_type - a9 % pkey_type;
          v30 = v29 % pkey_type;
          if (v29 % pkey_type)
          {
            v35 = 0;
            if (!EVP_EncryptUpdate((EVP_CIPHER_CTX *)p_md_ctx, out, &v35, md, v29 % pkey_type))
              return;
            memcpy(&a2[outl], out, pkey_type - v30);
            memcpy(a3, &out[pkey_type - v30], v30);
            v31 = v30;
          }
          else
          {
            v31 = 0;
          }
          if (EVP_EncryptUpdate((EVP_CIPHER_CTX *)p_md_ctx, (unsigned __int8 *)a3 + v30, &outl, &md[v30], len - v31))
          {
            v32 = v30 + outl;
            if (pkey_type < 2)
              goto LABEL_31;
            v33 = (len + a9) % pkey_type;
            v34 = pkey_type - v33;
            if ((_DWORD)pkey_type != v33)
              __memset_chk();
            if (EVP_EncryptUpdate((EVP_CIPHER_CTX *)p_md_ctx, (unsigned __int8 *)a3 + v32, &outl, out, v34))
            {
              v32 += outl;
LABEL_31:
              if (EVP_EncryptFinal_ex((EVP_CIPHER_CTX *)p_md_ctx, (unsigned __int8 *)a3 + v32, &outl))
                *a4 = v32;
            }
          }
        }
      }
    }
  }
}

unint64_t aead_tls_tag_len(uint64_t a1, uint64_t a2)
{
  unint64_t result;
  uint64_t v4;

  result = *(unsigned int *)(*(_QWORD *)(a1 + 160) + 4);
  v4 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(v4 + 20) & 0x3F) == 2)
    return (result + a2) / *(unsigned int *)(v4 + 4) * *(unsigned int *)(v4 + 4) - a2 + *(unsigned int *)(v4 + 4);
  return result;
}

uint64_t aead_tls_init(unsigned __int8 **a1, char *__src, uint64_t a3, uint64_t a4, int a5, EVP_CIPHER *cipher, const EVP_MD *a7, int a8)
{
  size_t pkey_type;
  uint64_t key_len;
  unsigned __int8 **v16;
  HMAC_CTX *v17;
  const unsigned __int8 *v18;
  int v19;
  int v21;
  int v22;
  void (*v23)(unsigned __int8 **);
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  size_t v27;

  if (a4 && a7->pkey_type != a4)
  {
    v21 = 122;
    v22 = 63;
    goto LABEL_14;
  }
  if (**a1 != a3)
  {
    v21 = 102;
    v22 = 68;
LABEL_14:
    ERR_put_error(30, 0, v21, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/cipher_extra/e_tls.c", v22);
    return 0;
  }
  pkey_type = a7->pkey_type;
  key_len = cipher->key_len;
  *(_OWORD *)(a1 + 1) = 0u;
  v16 = a1 + 1;
  a1[19] = 0;
  *(_OWORD *)(a1 + 15) = 0u;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  a1[20] = 0;
  v17 = (HMAC_CTX *)(a1 + 20);
  *(_OWORD *)(a1 + 25) = 0u;
  *(_OWORD *)(a1 + 27) = 0u;
  *(_OWORD *)(a1 + 29) = 0u;
  *(_OWORD *)(a1 + 31) = 0u;
  *(_OWORD *)(a1 + 21) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  if ((_DWORD)pkey_type)
    memcpy(a1 + 33, __src, pkey_type);
  *((_BYTE *)a1 + 328) = pkey_type;
  *((_BYTE *)a1 + 329) = a8;
  if (a8)
    v18 = (const unsigned __int8 *)&__src[key_len + pkey_type];
  else
    v18 = 0;
  if (EVP_CipherInit_ex((EVP_CIPHER_CTX *)(a1 + 1), cipher, 0, (const unsigned __int8 *)&__src[pkey_type], v18, a5 == 1))
  {
    HMAC_Init_ex((HMAC_CTX *)(a1 + 20), __src, pkey_type, a7, 0);
    if (v19)
    {
      *((_DWORD *)a1 + 10) |= 0x800u;
      return 1;
    }
  }
  if (*v16)
  {
    v23 = (void (*)(unsigned __int8 **))*((_QWORD *)*v16 + 5);
    if (v23)
      v23(a1 + 1);
  }
  v24 = a1[3];
  if (v24)
  {
    v26 = *((_QWORD *)v24 - 1);
    v25 = v24 - 8;
    v27 = v26 + 8;
    if (v26 != -8)
      bzero(v25, v27);
    free(v25);
  }
  v16[18] = 0;
  *((_OWORD *)v16 + 7) = 0u;
  *((_OWORD *)v16 + 8) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((_OWORD *)v16 + 6) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 4) = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *(_OWORD *)v16 = 0u;
  HMAC_CTX_cleanup(v17);
  return 0;
}

uint64_t aead_aes_128_cbc_sha1_tls_implicit_iv_init(unsigned __int8 **a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (pthread_once(&EVP_aes_128_cbc_once, (void (*)(void))EVP_aes_128_cbc_init)
    || pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
  {
    abort();
  }
  return aead_tls_init(a1, a2, a3, a4, a5, (EVP_CIPHER *)&EVP_aes_128_cbc_storage, (const EVP_MD *)&EVP_sha1_storage, 1);
}

uint64_t aead_tls_get_iv(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, _QWORD, unsigned int *);
  int v9;
  unsigned int v10;
  int v12;
  int v13;
  unsigned int v14;

  v7 = a1 + 8;
  v6 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(v6 + 20) & 0x3F) != 6)
  {
LABEL_10:
    v10 = *(_DWORD *)(*(_QWORD *)v7 + 12);
    if (v10 >= 2)
      goto LABEL_6;
    return 0;
  }
  v14 = 0;
  v8 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, unsigned int *))(v6 + 48);
  if (!v8)
  {
    v12 = 104;
    v13 = 625;
LABEL_9:
    ERR_put_error(30, 0, v12, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", v13);
    goto LABEL_10;
  }
  v9 = v8(a1 + 8, 25, 0, &v14);
  if (v9 == -1)
  {
    v12 = 105;
    v13 = 631;
    goto LABEL_9;
  }
  if (v9 != 1)
    goto LABEL_10;
  v10 = v14;
  if (v14 >= 2)
  {
LABEL_6:
    *a2 = a1 + 60;
    *a3 = v10;
    return 1;
  }
  return 0;
}

uint64_t aead_aes_128_cbc_sha256_tls_init(unsigned __int8 **a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (pthread_once(&EVP_aes_128_cbc_once, (void (*)(void))EVP_aes_128_cbc_init)
    || pthread_once(&EVP_sha256_once, (void (*)(void))EVP_sha256_init))
  {
    abort();
  }
  return aead_tls_init(a1, a2, a3, a4, a5, (EVP_CIPHER *)&EVP_aes_128_cbc_storage, (const EVP_MD *)&EVP_sha256_storage, 0);
}

uint64_t aead_aes_256_cbc_sha1_tls_init(unsigned __int8 **a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (pthread_once(&EVP_aes_256_cbc_once, (void (*)(void))EVP_aes_256_cbc_init)
    || pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
  {
    abort();
  }
  return aead_tls_init(a1, a2, a3, a4, a5, (EVP_CIPHER *)&EVP_aes_256_cbc_storage, (const EVP_MD *)&EVP_sha1_storage, 0);
}

uint64_t aead_aes_256_cbc_sha1_tls_implicit_iv_init(unsigned __int8 **a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (pthread_once(&EVP_aes_256_cbc_once, (void (*)(void))EVP_aes_256_cbc_init)
    || pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
  {
    abort();
  }
  return aead_tls_init(a1, a2, a3, a4, a5, (EVP_CIPHER *)&EVP_aes_256_cbc_storage, (const EVP_MD *)&EVP_sha1_storage, 1);
}

uint64_t aead_des_ede3_cbc_sha1_tls_init(unsigned __int8 **a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
    abort();
  return aead_tls_init(a1, a2, a3, a4, a5, (EVP_CIPHER *)&evp_des_ede3_cbc, (const EVP_MD *)&EVP_sha1_storage, 0);
}

uint64_t aead_des_ede3_cbc_sha1_tls_implicit_iv_init(unsigned __int8 **a1, char *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
    abort();
  return aead_tls_init(a1, a2, a3, a4, a5, (EVP_CIPHER *)&evp_des_ede3_cbc, (const EVP_MD *)&EVP_sha1_storage, 1);
}

uint64_t *EC_group_p224()
{
  if (pthread_once(&EC_group_p224_once, (void (*)(void))EC_group_p224_init))
    abort();
  return EC_group_p224_storage;
}

double EC_group_p224_init()
{
  int v0;
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int8x8_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t *v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t *v27;
  uint64_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t *v31;
  const unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  unint64_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  const unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  unint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  double result;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  unk_254572C48 = 0x4812B000002C9;
  unk_254572C40 = "NIST P-224";
  byte_254572C50 = 33;
  byte_254572C55 = 5;
  v0 = dword_254572B9C;
  if ((dword_254572B9C & 2) == 0 && qword_254572B88)
  {
    v2 = (void *)(qword_254572B88 - 8);
    v1 = *(_QWORD *)(qword_254572B88 - 8);
    if (v1 != -8)
      bzero(v2, v1 + 8);
    free(v2);
    v0 = dword_254572B9C;
  }
  qword_254572B88 = (uint64_t)&kP224Field;
  *(_QWORD *)&dword_254572B90 = 0x400000004;
  dword_254572B98 = 0;
  dword_254572B9C = v0 | 2;
  v3 = dword_254572B84;
  if ((dword_254572B84 & 2) == 0 && qword_254572B70)
  {
    v5 = (void *)(qword_254572B70 - 8);
    v4 = *(_QWORD *)(qword_254572B70 - 8);
    if (v4 != -8)
      bzero(v5, v4 + 8);
    free(v5);
    v3 = dword_254572B84;
  }
  qword_254572B70 = (uint64_t)&kP224FieldRR;
  *(_QWORD *)algn_254572B78 = 0x400000004;
  dword_254572B80 = 0;
  dword_254572B84 = v3 | 2;
  unk_254572BA0 = -1;
  v6 = dword_254572B5C;
  if ((dword_254572B5C & 2) == 0 && qword_254572B48)
  {
    v8 = (void *)(qword_254572B48 - 8);
    v7 = *(_QWORD *)(qword_254572B48 - 8);
    if (v7 != -8)
      bzero(v8, v7 + 8);
    free(v8);
    v6 = dword_254572B5C;
  }
  qword_254572B48 = (uint64_t)&kP224Order;
  unk_254572B50 = 0x400000004;
  dword_254572B58 = 0;
  dword_254572B5C = v6 | 2;
  v9 = dword_254572B44;
  if ((dword_254572B44 & 2) == 0 && qword_254572B30)
  {
    v11 = (void *)(qword_254572B30 - 8);
    v10 = *(_QWORD *)(qword_254572B30 - 8);
    if (v10 != -8)
      bzero(v11, v10 + 8);
    free(v11);
    v9 = dword_254572B44;
  }
  qword_254572B30 = (uint64_t)&kP224OrderRR;
  qword_254572B38 = 0x400000004;
  dword_254572B40 = 0;
  dword_254572B44 = v9 | 2;
  qword_254572B60 = 0xD6E242706A1FC2EBLL;
  if (pthread_once(&EC_GFp_nistp224_method_once, EC_GFp_nistp224_method_init))
    abort();
  xmmword_254572A58 = kP224GX;
  unk_254572A68 = unk_208F26210;
  unk_254572AA0 = kP224GY;
  unk_254572AB0 = unk_208F26230;
  *(_QWORD *)&xmmword_254572AE8 = 1;
  xmmword_254572BF8 = kP224B;
  unk_254572C08 = unk_208F26250;
  dword_254572C58 = 1;
  EC_group_p224_storage[0] = (uint64_t)&EC_GFp_nistp224_method_storage;
  unk_254572A50 = EC_group_p224_storage;
  if (dword_254572B90 < 1)
  {
    v14 = 0;
    goto LABEL_34;
  }
  if (dword_254572B90 >= 4)
  {
    v12 = dword_254572B90 & 0xFFFFFFFC;
    v15 = 0uLL;
    v16 = (int8x16_t *)&unk_254572AF8;
    v17 = v12;
    v18 = 0uLL;
    do
    {
      v15 = vorrq_s8(v16[-1], v15);
      v18 = vorrq_s8(*v16, v18);
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    v19 = vorrq_s8(v18, v15);
    v13 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
    if (v12 == dword_254572B90)
      goto LABEL_31;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v20 = dword_254572B90 - v12;
  v21 = &EC_group_p224_storage[v12 + 20];
  do
  {
    v22 = *v21++;
    *(_QWORD *)&v13 |= v22;
    --v20;
  }
  while (v20);
LABEL_31:
  if (v13)
    v14 = -1;
  else
    v14 = 0;
LABEL_34:
  bn_sub_words((unint64_t *)xmmword_254572BB0, (const unint64_t *)qword_254572B88, (const unint64_t *)&xmmword_254572AE8, dword_254572B90);
  v23 = dword_254572B90;
  v24 = dword_254572B90;
  if (dword_254572B90 < 1)
    goto LABEL_42;
  if (dword_254572B90 < 4)
  {
    v25 = 0;
LABEL_40:
    v30 = v23 - v25;
    v31 = &EC_group_p224_storage[v25 + 45];
    do
    {
      *v31++ &= v14;
      --v30;
    }
    while (v30);
    goto LABEL_42;
  }
  v25 = dword_254572B90 & 0xFFFFFFFC;
  v26 = (int8x16_t)vdupq_n_s64(v14);
  v27 = (int8x16_t *)xmmword_254572BB0;
  v28 = v25;
  do
  {
    v29 = vandq_s8(v27[1], v26);
    *v27 = vandq_s8(*v27, v26);
    v27[1] = v29;
    v27 += 2;
    v28 -= 4;
  }
  while (v28);
  if (v25 != v23)
    goto LABEL_40;
LABEL_42:
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v32 = (const unint64_t *)qword_254572B88;
  v33 = bn_sub_words((unint64_t *)xmmword_254572BB0, (const unint64_t *)xmmword_254572BB0, (const unint64_t *)&xmmword_254572AE8, v24);
  bn_add_words((unint64_t *)&v66, (const unint64_t *)xmmword_254572BB0, v32, v24);
  if ((_DWORD)v24)
  {
    v34 = 0;
    v35 = -(uint64_t)v33;
    v36 = v33 - 1;
    if (v24 < 4)
      goto LABEL_47;
    v37 = (int8x16_t)vdupq_n_s64(v35);
    v38 = (int8x16_t)vdupq_n_s64(v36);
    v34 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    v39 = (int8x16_t *)&v67;
    v40 = (int8x16_t *)xmmword_254572BB0;
    v41 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v42 = vorrq_s8(vandq_s8(v40[1], v38), vandq_s8(*v39, v37));
      *v40 = vorrq_s8(vandq_s8(*v40, v38), vandq_s8(v39[-1], v37));
      v40[1] = v42;
      v40 += 2;
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v34 != v24)
    {
LABEL_47:
      v43 = v24 - v34;
      v44 = 8 * v34;
      v45 = &EC_group_p224_storage[v34 + 45];
      v46 = (uint64_t *)((char *)&v66 + v44);
      do
      {
        v47 = *v46++;
        *v45 = *v45 & v36 | v47 & v35;
        ++v45;
        --v43;
      }
      while (v43);
    }
  }
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v48 = (const unint64_t *)qword_254572B88;
  v49 = dword_254572B90;
  v50 = bn_sub_words((unint64_t *)xmmword_254572BB0, (const unint64_t *)xmmword_254572BB0, (const unint64_t *)&xmmword_254572AE8, dword_254572B90);
  bn_add_words((unint64_t *)&v66, (const unint64_t *)xmmword_254572BB0, v48, v49);
  if ((_DWORD)v49)
  {
    v51 = 0;
    v52 = -(uint64_t)v50;
    v53 = v50 - 1;
    if (v49 < 4)
      goto LABEL_54;
    v54 = (int8x16_t)vdupq_n_s64(v52);
    v55 = (int8x16_t)vdupq_n_s64(v53);
    v51 = v49 & 0xFFFFFFFFFFFFFFFCLL;
    v56 = (int8x16_t *)&v67;
    v57 = (int8x16_t *)xmmword_254572BB0;
    v58 = v49 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v59 = vorrq_s8(vandq_s8(v57[1], v55), vandq_s8(*v56, v54));
      *v57 = vorrq_s8(vandq_s8(*v57, v55), vandq_s8(v56[-1], v54));
      v57[1] = v59;
      v57 += 2;
      v56 += 2;
      v58 -= 4;
    }
    while (v58);
    if (v51 != v49)
    {
LABEL_54:
      v60 = v49 - v51;
      v61 = 8 * v51;
      v62 = &EC_group_p224_storage[v51 + 45];
      v63 = (uint64_t *)((char *)&v66 + v61);
      do
      {
        v64 = *v63++;
        *v62 = *v62 & v53 | v64 & v52;
        ++v62;
        --v60;
      }
      while (v60);
    }
  }
  *(_QWORD *)&result = 0x100000001;
  qword_254572C5C = 0x100000001;
  return result;
}

uint64_t *EC_group_p256()
{
  if (pthread_once(&EC_group_p256_once, (void (*)(void))EC_group_p256_init))
    abort();
  return EC_group_p256_storage;
}

double EC_group_p256_init()
{
  int v0;
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int8x8_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t *v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t *v27;
  uint64_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t *v31;
  const unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  unint64_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  const unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  unint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  double result;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  dword_254572E68 = 415;
  unk_254572E60 = "NIST P-256";
  *(_QWORD *)&xmmword_254572E6C = 0x701033DCE48862ALL;
  BYTE9(xmmword_254572E6C) = 8;
  v0 = dword_254572DBC;
  if ((dword_254572DBC & 2) == 0 && qword_254572DA8)
  {
    v2 = (void *)(qword_254572DA8 - 8);
    v1 = *(_QWORD *)(qword_254572DA8 - 8);
    if (v1 != -8)
      bzero(v2, v1 + 8);
    free(v2);
    v0 = dword_254572DBC;
  }
  qword_254572DA8 = (uint64_t)&kP256Field;
  *(_QWORD *)&dword_254572DB0 = 0x400000004;
  dword_254572DB8 = 0;
  dword_254572DBC = v0 | 2;
  v3 = dword_254572DA4;
  if ((dword_254572DA4 & 2) == 0 && qword_254572D90)
  {
    v5 = (void *)(qword_254572D90 - 8);
    v4 = *(_QWORD *)(qword_254572D90 - 8);
    if (v4 != -8)
      bzero(v5, v4 + 8);
    free(v5);
    v3 = dword_254572DA4;
  }
  qword_254572D90 = (uint64_t)&kP256FieldRR;
  *(_QWORD *)algn_254572D98 = 0x400000004;
  dword_254572DA0 = 0;
  dword_254572DA4 = v3 | 2;
  unk_254572DC0 = 1;
  v6 = dword_254572D7C;
  if ((dword_254572D7C & 2) == 0 && qword_254572D68)
  {
    v8 = (void *)(qword_254572D68 - 8);
    v7 = *(_QWORD *)(qword_254572D68 - 8);
    if (v7 != -8)
      bzero(v8, v7 + 8);
    free(v8);
    v6 = dword_254572D7C;
  }
  qword_254572D68 = (uint64_t)&kP256Order;
  unk_254572D70 = 0x400000004;
  dword_254572D78 = 0;
  dword_254572D7C = v6 | 2;
  v9 = dword_254572D64;
  if ((dword_254572D64 & 2) == 0 && qword_254572D50)
  {
    v11 = (void *)(qword_254572D50 - 8);
    v10 = *(_QWORD *)(qword_254572D50 - 8);
    if (v10 != -8)
      bzero(v11, v10 + 8);
    free(v11);
    v9 = dword_254572D64;
  }
  qword_254572D50 = (uint64_t)&kP256OrderRR;
  qword_254572D58 = 0x400000004;
  dword_254572D60 = 0;
  dword_254572D64 = v9 | 2;
  qword_254572D80 = 0xCCD1C8AAEE00BC4FLL;
  if (pthread_once(&EC_GFp_nistp256_method_once, EC_GFp_nistp256_method_init))
    abort();
  EC_group_p256_storage[0] = (uint64_t)&EC_GFp_nistp256_method_storage;
  unk_254572C70 = EC_group_p256_storage;
  xmmword_254572C78 = kP256MontGX;
  unk_254572C88 = unk_208F262F0;
  unk_254572CC0 = kP256MontGY;
  *(__int128 *)((char *)&xmmword_254572CCC + 4) = unk_208F26310;
  xmmword_254572D08 = kP256FieldR;
  unk_254572D18 = unk_208F26330;
  HIDWORD(xmmword_254572E6C) = 1;
  xmmword_254572E18 = kP256MontB;
  unk_254572E28 = unk_208F26350;
  if (dword_254572DB0 < 1)
  {
    v14 = 0;
    goto LABEL_34;
  }
  if (dword_254572DB0 >= 4)
  {
    v12 = dword_254572DB0 & 0xFFFFFFFC;
    v15 = 0uLL;
    v16 = (int8x16_t *)&unk_254572D18;
    v17 = v12;
    v18 = 0uLL;
    do
    {
      v15 = vorrq_s8(v16[-1], v15);
      v18 = vorrq_s8(*v16, v18);
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    v19 = vorrq_s8(v18, v15);
    v13 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
    if (v12 == dword_254572DB0)
      goto LABEL_31;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v20 = dword_254572DB0 - v12;
  v21 = &EC_group_p256_storage[v12 + 20];
  do
  {
    v22 = *v21++;
    *(_QWORD *)&v13 |= v22;
    --v20;
  }
  while (v20);
LABEL_31:
  if (v13)
    v14 = -1;
  else
    v14 = 0;
LABEL_34:
  bn_sub_words((unint64_t *)xmmword_254572DD0, (const unint64_t *)qword_254572DA8, (const unint64_t *)&xmmword_254572D08, dword_254572DB0);
  v23 = dword_254572DB0;
  v24 = dword_254572DB0;
  if (dword_254572DB0 < 1)
    goto LABEL_42;
  if (dword_254572DB0 < 4)
  {
    v25 = 0;
LABEL_40:
    v30 = v23 - v25;
    v31 = &EC_group_p256_storage[v25 + 45];
    do
    {
      *v31++ &= v14;
      --v30;
    }
    while (v30);
    goto LABEL_42;
  }
  v25 = dword_254572DB0 & 0xFFFFFFFC;
  v26 = (int8x16_t)vdupq_n_s64(v14);
  v27 = (int8x16_t *)xmmword_254572DD0;
  v28 = v25;
  do
  {
    v29 = vandq_s8(v27[1], v26);
    *v27 = vandq_s8(*v27, v26);
    v27[1] = v29;
    v27 += 2;
    v28 -= 4;
  }
  while (v28);
  if (v25 != v23)
    goto LABEL_40;
LABEL_42:
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v32 = (const unint64_t *)qword_254572DA8;
  v33 = bn_sub_words((unint64_t *)xmmword_254572DD0, (const unint64_t *)xmmword_254572DD0, (const unint64_t *)&xmmword_254572D08, v24);
  bn_add_words((unint64_t *)&v66, (const unint64_t *)xmmword_254572DD0, v32, v24);
  if ((_DWORD)v24)
  {
    v34 = 0;
    v35 = -(uint64_t)v33;
    v36 = v33 - 1;
    if (v24 < 4)
      goto LABEL_47;
    v37 = (int8x16_t)vdupq_n_s64(v35);
    v38 = (int8x16_t)vdupq_n_s64(v36);
    v34 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    v39 = (int8x16_t *)&v67;
    v40 = (int8x16_t *)xmmword_254572DD0;
    v41 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v42 = vorrq_s8(vandq_s8(v40[1], v38), vandq_s8(*v39, v37));
      *v40 = vorrq_s8(vandq_s8(*v40, v38), vandq_s8(v39[-1], v37));
      v40[1] = v42;
      v40 += 2;
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v34 != v24)
    {
LABEL_47:
      v43 = v24 - v34;
      v44 = 8 * v34;
      v45 = &EC_group_p256_storage[v34 + 45];
      v46 = (uint64_t *)((char *)&v66 + v44);
      do
      {
        v47 = *v46++;
        *v45 = *v45 & v36 | v47 & v35;
        ++v45;
        --v43;
      }
      while (v43);
    }
  }
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v48 = (const unint64_t *)qword_254572DA8;
  v49 = dword_254572DB0;
  v50 = bn_sub_words((unint64_t *)xmmword_254572DD0, (const unint64_t *)xmmword_254572DD0, (const unint64_t *)&xmmword_254572D08, dword_254572DB0);
  bn_add_words((unint64_t *)&v66, (const unint64_t *)xmmword_254572DD0, v48, v49);
  if ((_DWORD)v49)
  {
    v51 = 0;
    v52 = -(uint64_t)v50;
    v53 = v50 - 1;
    if (v49 < 4)
      goto LABEL_54;
    v54 = (int8x16_t)vdupq_n_s64(v52);
    v55 = (int8x16_t)vdupq_n_s64(v53);
    v51 = v49 & 0xFFFFFFFFFFFFFFFCLL;
    v56 = (int8x16_t *)&v67;
    v57 = (int8x16_t *)xmmword_254572DD0;
    v58 = v49 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v59 = vorrq_s8(vandq_s8(v57[1], v55), vandq_s8(*v56, v54));
      *v57 = vorrq_s8(vandq_s8(*v57, v55), vandq_s8(v56[-1], v54));
      v57[1] = v59;
      v57 += 2;
      v56 += 2;
      v58 -= 4;
    }
    while (v58);
    if (v51 != v49)
    {
LABEL_54:
      v60 = v49 - v51;
      v61 = 8 * v51;
      v62 = &EC_group_p256_storage[v51 + 45];
      v63 = (uint64_t *)((char *)&v66 + v61);
      do
      {
        v64 = *v63++;
        *v62 = *v62 & v53 | v64 & v52;
        ++v62;
        --v60;
      }
      while (v60);
    }
  }
  *(_QWORD *)&result = 0x100000001;
  qword_254572E7C = 0x100000001;
  return result;
}

uint64_t *EC_group_p384()
{
  if (pthread_once(&EC_group_p384_once, (void (*)(void))EC_group_p384_init))
    abort();
  return EC_group_p384_storage;
}

double EC_group_p384_init()
{
  int v0;
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int8x8_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t *v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t *v27;
  uint64_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t *v31;
  const unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  unint64_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  const unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  unint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  double result;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  unk_254573088 = 0x4812B000002CBLL;
  unk_254573080 = "NIST P-384";
  byte_254573090 = 34;
  byte_254573095 = 5;
  v0 = dword_254572FDC;
  if ((dword_254572FDC & 2) == 0 && qword_254572FC8)
  {
    v2 = (void *)(qword_254572FC8 - 8);
    v1 = *(_QWORD *)(qword_254572FC8 - 8);
    if (v1 != -8)
      bzero(v2, v1 + 8);
    free(v2);
    v0 = dword_254572FDC;
  }
  qword_254572FC8 = (uint64_t)&kP384Field;
  *(_QWORD *)&dword_254572FD0 = 0x600000006;
  dword_254572FD8 = 0;
  dword_254572FDC = v0 | 2;
  v3 = dword_254572FC4;
  if ((dword_254572FC4 & 2) == 0 && qword_254572FB0)
  {
    v5 = (void *)(qword_254572FB0 - 8);
    v4 = *(_QWORD *)(qword_254572FB0 - 8);
    if (v4 != -8)
      bzero(v5, v4 + 8);
    free(v5);
    v3 = dword_254572FC4;
  }
  qword_254572FB0 = (uint64_t)&kP384FieldRR;
  *(_QWORD *)algn_254572FB8 = 0x600000006;
  dword_254572FC0 = 0;
  dword_254572FC4 = v3 | 2;
  unk_254572FE0 = 0x100000001;
  v6 = dword_254572F9C;
  if ((dword_254572F9C & 2) == 0 && qword_254572F88)
  {
    v8 = (void *)(qword_254572F88 - 8);
    v7 = *(_QWORD *)(qword_254572F88 - 8);
    if (v7 != -8)
      bzero(v8, v7 + 8);
    free(v8);
    v6 = dword_254572F9C;
  }
  qword_254572F88 = (uint64_t)&kP384Order;
  unk_254572F90 = 0x600000006;
  dword_254572F98 = 0;
  dword_254572F9C = v6 | 2;
  v9 = dword_254572F84;
  if ((dword_254572F84 & 2) == 0 && qword_254572F70)
  {
    v11 = (void *)(qword_254572F70 - 8);
    v10 = *(_QWORD *)(qword_254572F70 - 8);
    if (v10 != -8)
      bzero(v11, v10 + 8);
    free(v11);
    v9 = dword_254572F84;
  }
  qword_254572F70 = (uint64_t)&kP384OrderRR;
  qword_254572F78 = 0x600000006;
  dword_254572F80 = 0;
  dword_254572F84 = v9 | 2;
  qword_254572FA0 = 0x6ED46089E88FDC45;
  if (pthread_once(&EC_GFp_mont_method_once, EC_GFp_mont_method_init))
    abort();
  EC_group_p384_storage[0] = (uint64_t)&EC_GFp_mont_method_storage;
  unk_254572E90 = EC_group_p384_storage;
  xmmword_254572E98 = kP384MontGX;
  unk_254572EA8 = unk_208F26430;
  *(__int128 *)((char *)&xmmword_254572EAC + 12) = xmmword_208F26440;
  unk_254572EE0 = kP384MontGY;
  *(__int128 *)((char *)&xmmword_254572EEC + 4) = unk_208F26460;
  unk_254572F00 = xmmword_208F26470;
  xmmword_254572F38 = unk_208F26490;
  unk_254572F48 = xmmword_208F264A0;
  xmmword_254572F28 = kP384FieldR;
  dword_254573098 = 1;
  xmmword_254573048 = unk_208F264C0;
  unk_254573058 = xmmword_208F264D0;
  xmmword_254573038 = kP384MontB;
  if (dword_254572FD0 < 1)
  {
    v14 = 0;
    goto LABEL_34;
  }
  if (dword_254572FD0 >= 4)
  {
    v12 = dword_254572FD0 & 0xFFFFFFFC;
    v15 = 0uLL;
    v16 = (int8x16_t *)&xmmword_254572F38;
    v17 = v12;
    v18 = 0uLL;
    do
    {
      v15 = vorrq_s8(v16[-1], v15);
      v18 = vorrq_s8(*v16, v18);
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    v19 = vorrq_s8(v18, v15);
    v13 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
    if (v12 == dword_254572FD0)
      goto LABEL_31;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v20 = dword_254572FD0 - v12;
  v21 = &EC_group_p384_storage[v12 + 20];
  do
  {
    v22 = *v21++;
    *(_QWORD *)&v13 |= v22;
    --v20;
  }
  while (v20);
LABEL_31:
  if (v13)
    v14 = -1;
  else
    v14 = 0;
LABEL_34:
  bn_sub_words((unint64_t *)xmmword_254572FF0, (const unint64_t *)qword_254572FC8, (const unint64_t *)&xmmword_254572F28, dword_254572FD0);
  v23 = dword_254572FD0;
  v24 = dword_254572FD0;
  if (dword_254572FD0 < 1)
    goto LABEL_42;
  if (dword_254572FD0 < 4)
  {
    v25 = 0;
LABEL_40:
    v30 = v23 - v25;
    v31 = &EC_group_p384_storage[v25 + 45];
    do
    {
      *v31++ &= v14;
      --v30;
    }
    while (v30);
    goto LABEL_42;
  }
  v25 = dword_254572FD0 & 0xFFFFFFFC;
  v26 = (int8x16_t)vdupq_n_s64(v14);
  v27 = (int8x16_t *)xmmword_254572FF0;
  v28 = v25;
  do
  {
    v29 = vandq_s8(v27[1], v26);
    *v27 = vandq_s8(*v27, v26);
    v27[1] = v29;
    v27 += 2;
    v28 -= 4;
  }
  while (v28);
  if (v25 != v23)
    goto LABEL_40;
LABEL_42:
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v32 = (const unint64_t *)qword_254572FC8;
  v33 = bn_sub_words((unint64_t *)xmmword_254572FF0, (const unint64_t *)xmmword_254572FF0, (const unint64_t *)&xmmword_254572F28, v24);
  bn_add_words((unint64_t *)&v66, (const unint64_t *)xmmword_254572FF0, v32, v24);
  if ((_DWORD)v24)
  {
    v34 = 0;
    v35 = -(uint64_t)v33;
    v36 = v33 - 1;
    if (v24 < 4)
      goto LABEL_47;
    v37 = (int8x16_t)vdupq_n_s64(v35);
    v38 = (int8x16_t)vdupq_n_s64(v36);
    v34 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    v39 = (int8x16_t *)&v67;
    v40 = (int8x16_t *)xmmword_254572FF0;
    v41 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v42 = vorrq_s8(vandq_s8(v40[1], v38), vandq_s8(*v39, v37));
      *v40 = vorrq_s8(vandq_s8(*v40, v38), vandq_s8(v39[-1], v37));
      v40[1] = v42;
      v40 += 2;
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v34 != v24)
    {
LABEL_47:
      v43 = v24 - v34;
      v44 = 8 * v34;
      v45 = &EC_group_p384_storage[v34 + 45];
      v46 = (uint64_t *)((char *)&v66 + v44);
      do
      {
        v47 = *v46++;
        *v45 = *v45 & v36 | v47 & v35;
        ++v45;
        --v43;
      }
      while (v43);
    }
  }
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v48 = (const unint64_t *)qword_254572FC8;
  v49 = dword_254572FD0;
  v50 = bn_sub_words((unint64_t *)xmmword_254572FF0, (const unint64_t *)xmmword_254572FF0, (const unint64_t *)&xmmword_254572F28, dword_254572FD0);
  bn_add_words((unint64_t *)&v66, (const unint64_t *)xmmword_254572FF0, v48, v49);
  if ((_DWORD)v49)
  {
    v51 = 0;
    v52 = -(uint64_t)v50;
    v53 = v50 - 1;
    if (v49 < 4)
      goto LABEL_54;
    v54 = (int8x16_t)vdupq_n_s64(v52);
    v55 = (int8x16_t)vdupq_n_s64(v53);
    v51 = v49 & 0xFFFFFFFFFFFFFFFCLL;
    v56 = (int8x16_t *)&v67;
    v57 = (int8x16_t *)xmmword_254572FF0;
    v58 = v49 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v59 = vorrq_s8(vandq_s8(v57[1], v55), vandq_s8(*v56, v54));
      *v57 = vorrq_s8(vandq_s8(*v57, v55), vandq_s8(v56[-1], v54));
      v57[1] = v59;
      v57 += 2;
      v56 += 2;
      v58 -= 4;
    }
    while (v58);
    if (v51 != v49)
    {
LABEL_54:
      v60 = v49 - v51;
      v61 = 8 * v51;
      v62 = &EC_group_p384_storage[v51 + 45];
      v63 = (uint64_t *)((char *)&v66 + v61);
      do
      {
        v64 = *v63++;
        *v62 = *v62 & v53 | v64 & v52;
        ++v62;
        --v60;
      }
      while (v60);
    }
  }
  *(_QWORD *)&result = 0x100000001;
  qword_25457309C = 0x100000001;
  return result;
}

uint64_t *EC_group_p521()
{
  if (pthread_once(&EC_group_p521_once, (void (*)(void))EC_group_p521_init))
    abort();
  return EC_group_p521_storage;
}

double EC_group_p521_init()
{
  int v0;
  uint64_t v1;
  void *v2;
  int v3;
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int8x8_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t *v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t *v27;
  uint64_t v28;
  int8x16_t v29;
  uint64_t v30;
  uint64_t *v31;
  const unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t *v39;
  int8x16_t *v40;
  unint64_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  const unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t *v56;
  int8x16_t *v57;
  unint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  double result;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;

  unk_2545732A8 = 0x4812B000002CCLL;
  unk_2545732A0 = "NIST P-521";
  byte_2545732B0 = 35;
  byte_2545732B5 = 5;
  v0 = dword_2545731FC;
  if ((dword_2545731FC & 2) == 0 && qword_2545731E8)
  {
    v2 = (void *)(qword_2545731E8 - 8);
    v1 = *(_QWORD *)(qword_2545731E8 - 8);
    if (v1 != -8)
      bzero(v2, v1 + 8);
    free(v2);
    v0 = dword_2545731FC;
  }
  qword_2545731E8 = (uint64_t)&kP521Field;
  *(_QWORD *)&dword_2545731F0 = 0x900000009;
  dword_2545731F8 = 0;
  dword_2545731FC = v0 | 2;
  v3 = dword_2545731E4;
  if ((dword_2545731E4 & 2) == 0 && qword_2545731D0)
  {
    v5 = (void *)(qword_2545731D0 - 8);
    v4 = *(_QWORD *)(qword_2545731D0 - 8);
    if (v4 != -8)
      bzero(v5, v4 + 8);
    free(v5);
    v3 = dword_2545731E4;
  }
  qword_2545731D0 = (uint64_t)&kP521FieldRR;
  *(_QWORD *)algn_2545731D8 = 0x900000009;
  dword_2545731E0 = 0;
  dword_2545731E4 = v3 | 2;
  unk_254573200 = 1;
  v6 = dword_2545731BC;
  if ((dword_2545731BC & 2) == 0 && qword_2545731A8)
  {
    v8 = (void *)(qword_2545731A8 - 8);
    v7 = *(_QWORD *)(qword_2545731A8 - 8);
    if (v7 != -8)
      bzero(v8, v7 + 8);
    free(v8);
    v6 = dword_2545731BC;
  }
  qword_2545731A8 = (uint64_t)&kP521Order;
  unk_2545731B0 = 0x900000009;
  dword_2545731B8 = 0;
  dword_2545731BC = v6 | 2;
  v9 = dword_2545731A4;
  if ((dword_2545731A4 & 2) == 0 && qword_254573190)
  {
    v11 = (void *)(qword_254573190 - 8);
    v10 = *(_QWORD *)(qword_254573190 - 8);
    if (v10 != -8)
      bzero(v11, v10 + 8);
    free(v11);
    v9 = dword_2545731A4;
  }
  qword_254573190 = (uint64_t)&kP521OrderRR;
  qword_254573198 = 0x900000009;
  dword_2545731A0 = 0;
  dword_2545731A4 = v9 | 2;
  qword_2545731C0 = 0x1D2F5CCD79A995C7;
  if (pthread_once(&EC_GFp_mont_method_once, EC_GFp_mont_method_init))
    abort();
  EC_group_p521_storage[0] = (uint64_t)&EC_GFp_mont_method_storage;
  unk_2545730B0 = EC_group_p521_storage;
  qword_2545730F8 = 116;
  xmmword_2545730B8 = kP521MontGX;
  unk_2545730C8 = unk_208F26610;
  *(__int128 *)((char *)&xmmword_2545730CC + 12) = xmmword_208F26620;
  unk_2545730E8 = unk_208F26630;
  qword_254573140 = 480;
  unk_254573100 = kP521MontGY;
  *(__int128 *)((char *)&xmmword_25457310C + 4) = unk_208F26658;
  unk_254573120 = xmmword_208F26668;
  *(__int128 *)((char *)&xmmword_25457312C + 4) = unk_208F26678;
  qword_254573188 = 0;
  xmmword_254573168 = xmmword_208F266F8;
  unk_254573178 = unk_208F26708;
  xmmword_254573148 = kP521FieldR;
  unk_254573158 = unk_208F266E8;
  qword_254573298 = 77;
  xmmword_254573278 = xmmword_208F266B0;
  unk_254573288 = unk_208F266C0;
  dword_2545732B8 = 1;
  xmmword_254573258 = kP521MontB;
  unk_254573268 = unk_208F266A0;
  if (dword_2545731F0 < 1)
  {
    v14 = 0;
    goto LABEL_34;
  }
  if (dword_2545731F0 >= 4)
  {
    v12 = dword_2545731F0 & 0xFFFFFFFC;
    v15 = 0uLL;
    v16 = (int8x16_t *)&unk_254573158;
    v17 = v12;
    v18 = 0uLL;
    do
    {
      v15 = vorrq_s8(v16[-1], v15);
      v18 = vorrq_s8(*v16, v18);
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    v19 = vorrq_s8(v18, v15);
    v13 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
    if (v12 == dword_2545731F0)
      goto LABEL_31;
  }
  else
  {
    v12 = 0;
    v13 = 0;
  }
  v20 = dword_2545731F0 - v12;
  v21 = &EC_group_p521_storage[v12 + 20];
  do
  {
    v22 = *v21++;
    *(_QWORD *)&v13 |= v22;
    --v20;
  }
  while (v20);
LABEL_31:
  if (v13)
    v14 = -1;
  else
    v14 = 0;
LABEL_34:
  bn_sub_words((unint64_t *)xmmword_254573210, (const unint64_t *)qword_2545731E8, (const unint64_t *)&xmmword_254573148, dword_2545731F0);
  v23 = dword_2545731F0;
  v24 = dword_2545731F0;
  if (dword_2545731F0 < 1)
    goto LABEL_42;
  if (dword_2545731F0 < 4)
  {
    v25 = 0;
LABEL_40:
    v30 = v23 - v25;
    v31 = &EC_group_p521_storage[v25 + 45];
    do
    {
      *v31++ &= v14;
      --v30;
    }
    while (v30);
    goto LABEL_42;
  }
  v25 = dword_2545731F0 & 0xFFFFFFFC;
  v26 = (int8x16_t)vdupq_n_s64(v14);
  v27 = (int8x16_t *)xmmword_254573210;
  v28 = v25;
  do
  {
    v29 = vandq_s8(v27[1], v26);
    *v27 = vandq_s8(*v27, v26);
    v27[1] = v29;
    v27 += 2;
    v28 -= 4;
  }
  while (v28);
  if (v25 != v23)
    goto LABEL_40;
LABEL_42:
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v32 = (const unint64_t *)qword_2545731E8;
  v33 = bn_sub_words((unint64_t *)xmmword_254573210, (const unint64_t *)xmmword_254573210, (const unint64_t *)&xmmword_254573148, v24);
  bn_add_words((unint64_t *)&v66, (const unint64_t *)xmmword_254573210, v32, v24);
  if ((_DWORD)v24)
  {
    v34 = 0;
    v35 = -(uint64_t)v33;
    v36 = v33 - 1;
    if (v24 < 4)
      goto LABEL_47;
    v37 = (int8x16_t)vdupq_n_s64(v35);
    v38 = (int8x16_t)vdupq_n_s64(v36);
    v34 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    v39 = (int8x16_t *)&v67;
    v40 = (int8x16_t *)xmmword_254573210;
    v41 = v24 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v42 = vorrq_s8(vandq_s8(v40[1], v38), vandq_s8(*v39, v37));
      *v40 = vorrq_s8(vandq_s8(*v40, v38), vandq_s8(v39[-1], v37));
      v40[1] = v42;
      v40 += 2;
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    if (v34 != v24)
    {
LABEL_47:
      v43 = v24 - v34;
      v44 = 8 * v34;
      v45 = &EC_group_p521_storage[v34 + 45];
      v46 = (uint64_t *)((char *)&v66 + v44);
      do
      {
        v47 = *v46++;
        *v45 = *v45 & v36 | v47 & v35;
        ++v45;
        --v43;
      }
      while (v43);
    }
  }
  v70 = 0;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v48 = (const unint64_t *)qword_2545731E8;
  v49 = dword_2545731F0;
  v50 = bn_sub_words((unint64_t *)xmmword_254573210, (const unint64_t *)xmmword_254573210, (const unint64_t *)&xmmword_254573148, dword_2545731F0);
  bn_add_words((unint64_t *)&v66, (const unint64_t *)xmmword_254573210, v48, v49);
  if ((_DWORD)v49)
  {
    v51 = 0;
    v52 = -(uint64_t)v50;
    v53 = v50 - 1;
    if (v49 < 4)
      goto LABEL_54;
    v54 = (int8x16_t)vdupq_n_s64(v52);
    v55 = (int8x16_t)vdupq_n_s64(v53);
    v51 = v49 & 0xFFFFFFFFFFFFFFFCLL;
    v56 = (int8x16_t *)&v67;
    v57 = (int8x16_t *)xmmword_254573210;
    v58 = v49 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v59 = vorrq_s8(vandq_s8(v57[1], v55), vandq_s8(*v56, v54));
      *v57 = vorrq_s8(vandq_s8(*v57, v55), vandq_s8(v56[-1], v54));
      v57[1] = v59;
      v57 += 2;
      v56 += 2;
      v58 -= 4;
    }
    while (v58);
    if (v51 != v49)
    {
LABEL_54:
      v60 = v49 - v51;
      v61 = 8 * v51;
      v62 = &EC_group_p521_storage[v51 + 45];
      v63 = (uint64_t *)((char *)&v66 + v61);
      do
      {
        v64 = *v63++;
        *v62 = *v62 & v53 | v64 & v52;
        ++v62;
        --v60;
      }
      while (v60);
    }
  }
  *(_QWORD *)&result = 0x100000001;
  qword_2545732BC = 0x100000001;
  return result;
}

void EC_GROUP_free(EC_GROUP *a1)
{
  unsigned int *v2;
  unsigned int i;
  unsigned int v4;
  char *v5;
  uint64_t v6;
  size_t v7;

  if (a1 && !*((_DWORD *)a1 + 128))
  {
    v2 = (unsigned int *)((char *)a1 + 540);
    for (i = atomic_load((unsigned int *)a1 + 135); i != -1; i = v4)
    {
      if (!i)
        abort();
      v4 = __ldaxr(v2);
      if (v4 == i)
      {
        if (!__stlxr(i - 1, v2))
        {
          if (i == 1)
          {
            bn_mont_ctx_cleanup((_DWORD *)a1 + 58);
            bn_mont_ctx_cleanup((_DWORD *)a1 + 74);
            v6 = *((_QWORD *)a1 - 1);
            v5 = (char *)a1 - 8;
            v7 = v6 + 8;
            if (v6 != -8)
              bzero(v5, v7);
            free(v5);
          }
          return;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
}

EC_GROUP *__cdecl EC_GROUP_new_by_curve_name(int nid)
{
  if (nid > 714)
  {
    if (nid == 715)
    {
      if (pthread_once(&EC_group_p384_once, (void (*)(void))EC_group_p384_init))
        goto LABEL_15;
      return (EC_GROUP *)EC_group_p384_storage;
    }
    else
    {
      if (nid != 716)
      {
LABEL_10:
        ERR_put_error(15, 0, 123, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 342);
        return 0;
      }
      if (pthread_once(&EC_group_p521_once, (void (*)(void))EC_group_p521_init))
        goto LABEL_15;
      return (EC_GROUP *)EC_group_p521_storage;
    }
  }
  else
  {
    if (nid != 415)
    {
      if (nid == 713)
      {
        if (!pthread_once(&EC_group_p224_once, (void (*)(void))EC_group_p224_init))
          return (EC_GROUP *)EC_group_p224_storage;
LABEL_15:
        abort();
      }
      goto LABEL_10;
    }
    if (pthread_once(&EC_group_p256_once, (void (*)(void))EC_group_p256_init))
      goto LABEL_15;
    return (EC_GROUP *)EC_group_p256_storage;
  }
}

int EC_GROUP_cmp(const EC_GROUP *a1, const EC_GROUP *a2, BN_CTX *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  int8x16_t *v11;
  int8x16_t *v12;
  int8x16_t v13;
  unint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  unint64_t v21;
  unint64_t v22;
  int8x8_t v23;
  int8x8_t *v24;
  int8x8_t *v25;
  unint64_t v26;
  int8x8_t v27;
  int8x8_t v28;
  int8x8_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int8x16_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t v41;
  int8x8_t *v42;
  int8x8_t *v43;
  unint64_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int8x8_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char v52;
  char v53;
  char v54;
  char *v55;
  char *v56;
  char v57;
  char v58;
  char v59;

  if (a1 == a2)
    return 0;
  v5 = *((_DWORD *)a1 + 128);
  if (v5 != *((_DWORD *)a2 + 128))
    return 1;
  if (v5)
    return 0;
  if (*(_QWORD *)a1 != *(_QWORD *)a2
    || !*((_DWORD *)a1 + 133)
    || !*((_DWORD *)a2 + 133)
    || BN_cmp((const BIGNUM *)((char *)a1 + 256), (const BIGNUM *)((char *)a2 + 256))
    || BN_cmp((const BIGNUM *)((char *)a1 + 320), (const BIGNUM *)((char *)a2 + 320)))
  {
    return 1;
  }
  v7 = *((int *)a1 + 82);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    if ((unint64_t)(8 * v7) < 0x20)
    {
      v9 = 0;
      v10 = 0;
      goto LABEL_19;
    }
    v11 = (int8x16_t *)((char *)a1 + 360);
    v12 = (int8x16_t *)((char *)a2 + 360);
    v10 = v8 & 0xFFFFFFFFFFFFFFE0;
    v13 = 0uLL;
    v14 = v8 & 0xFFFFFFFFFFFFFFE0;
    v15 = 0uLL;
    do
    {
      v16 = *v11;
      v17 = v11[1];
      v11 += 2;
      v18 = *v12;
      v19 = v12[1];
      v12 += 2;
      v13 = vorrq_s8(veorq_s8(v18, v16), v13);
      v15 = vorrq_s8(veorq_s8(v19, v17), v15);
      v14 -= 32;
    }
    while (v14);
    v20 = vorrq_s8(v15, v13);
    *(int8x8_t *)v20.i8 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
    v21 = v20.i64[0] | HIDWORD(v20.i64[0]) | ((unint64_t)(v20.i64[0] | HIDWORD(v20.i64[0])) >> 16);
    v9 = v21 | BYTE1(v21);
    v22 = v8 - v10;
    if (v8 != v10)
    {
      if ((v7 & 3) != 0)
      {
LABEL_19:
        v23 = (int8x8_t)v9;
        v24 = (int8x8_t *)((char *)a1 + v10 + 360);
        v25 = (int8x8_t *)((char *)a2 + v10 + 360);
        v26 = v10 - v8;
        do
        {
          v27 = *v24++;
          v28 = v27;
          v29 = *v25++;
          v23 = vorr_s8(veor_s8(v29, v28), v23);
          v26 += 8;
        }
        while (v26);
        v30 = *(_QWORD *)&v23 | HIDWORD(*(_QWORD *)&v23) | ((*(_QWORD *)&v23 | HIDWORD(*(_QWORD *)&v23)) >> 16);
        v9 = v30 | BYTE1(v30);
        goto LABEL_22;
      }
      v49 = v10 + 360;
      v50 = (char *)a2 + v10 + 360;
      v51 = (char *)a1 + v49;
      do
      {
        v53 = *v51++;
        v52 = v53;
        v54 = *v50++;
        v9 |= v54 ^ v52;
        --v22;
      }
      while (v22);
    }
LABEL_22:
    if (v9)
      return 1;
    if (v8 < 0x20)
    {
      v31 = 0;
      v32 = 0;
      goto LABEL_29;
    }
    v32 = v8 & 0xFFFFFFFFFFFFFFE0;
    v33 = (int8x16_t *)((char *)a1 + 448);
    v34 = (int8x16_t *)((char *)a2 + 448);
    v35 = 0uLL;
    v36 = v8 & 0xFFFFFFFFFFFFFFE0;
    v37 = 0uLL;
    do
    {
      v35 = vorrq_s8(veorq_s8(v34[-1], v33[-1]), v35);
      v37 = vorrq_s8(veorq_s8(*v34, *v33), v37);
      v33 += 2;
      v34 += 2;
      v36 -= 32;
    }
    while (v36);
    v38 = vorrq_s8(v37, v35);
    *(int8x8_t *)v38.i8 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
    v39 = v38.i64[0] | HIDWORD(v38.i64[0]) | ((unint64_t)(v38.i64[0] | HIDWORD(v38.i64[0])) >> 16);
    v31 = v39 | BYTE1(v39);
    v40 = v8 - v32;
    if (v8 != v32)
    {
      if ((v7 & 3) != 0)
      {
LABEL_29:
        v41 = (int8x8_t)v31;
        v42 = (int8x8_t *)((char *)a1 + v32 + 432);
        v43 = (int8x8_t *)((char *)a2 + v32 + 432);
        v44 = v32 - v8;
        do
        {
          v45 = *v42++;
          v46 = v45;
          v47 = *v43++;
          v41 = vorr_s8(veor_s8(v47, v46), v41);
          v44 += 8;
        }
        while (v44);
        v48 = *(_QWORD *)&v41 | HIDWORD(*(_QWORD *)&v41) | ((*(_QWORD *)&v41 | HIDWORD(*(_QWORD *)&v41)) >> 16);
        v31 = v48 | BYTE1(v48);
        goto LABEL_32;
      }
      v55 = (char *)a2 + v32 + 432;
      v56 = (char *)a1 + v32 + 432;
      do
      {
        v58 = *v56++;
        v57 = v58;
        v59 = *v55++;
        v31 |= v59 ^ v57;
        --v40;
      }
      while (v40);
    }
LABEL_32:
    if (!v31)
      return ec_GFp_simple_points_equal((uint64_t)a1, (int8x16_t *)a1 + 1, (uint64_t)a2 + 16) == 0;
    return 1;
  }
  return ec_GFp_simple_points_equal((uint64_t)a1, (int8x16_t *)a1 + 1, (uint64_t)a2 + 16) == 0;
}

EC_POINT *__cdecl EC_POINT_new(const EC_GROUP *a1)
{
  char *v2;
  char *v3;
  EC_POINT *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v8;

  if (a1)
  {
    v2 = (char *)malloc_type_malloc(0xE8uLL, 0x30772F57uLL);
    if (v2)
    {
      v3 = v2;
      *(_QWORD *)v2 = 224;
      result = (EC_POINT *)(v2 + 8);
      if (!*((_DWORD *)a1 + 128))
      {
        v5 = (unsigned int *)((char *)a1 + 540);
        v6 = atomic_load((unsigned int *)a1 + 135);
        if (v6 != -1)
        {
          while (1)
          {
            v7 = __ldaxr(v5);
            if (v7 == v6)
            {
              if (!__stlxr(v6 + 1, v5))
              {
                v8 = 1;
                goto LABEL_10;
              }
            }
            else
            {
              __clrex();
            }
            v8 = 0;
LABEL_10:
            if ((v8 & 1) == 0)
            {
              v6 = v7;
              if (v7 != -1)
                continue;
            }
            break;
          }
        }
      }
      *((_QWORD *)v3 + 1) = a1;
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *((_OWORD *)v3 + 3) = 0u;
      *((_OWORD *)v3 + 4) = 0u;
      *((_OWORD *)v3 + 5) = 0u;
      *((_OWORD *)v3 + 6) = 0u;
      *((_OWORD *)v3 + 7) = 0u;
      *((_OWORD *)v3 + 8) = 0u;
      *((_OWORD *)v3 + 9) = 0u;
      *((_OWORD *)v3 + 10) = 0u;
      *((_OWORD *)v3 + 11) = 0u;
      *((_OWORD *)v3 + 12) = 0u;
      *((_OWORD *)v3 + 13) = 0u;
      *((_QWORD *)v3 + 28) = 0;
    }
    else
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      return 0;
    }
  }
  else
  {
    ERR_put_error(15, 0, 67, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 469);
    return 0;
  }
  return result;
}

void EC_POINT_free(EC_POINT *a1)
{
  _DWORD *v2;
  char *v3;
  uint64_t v4;
  size_t v5;
  unsigned int *v6;
  unsigned int i;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  size_t v11;

  if (a1)
  {
    v2 = *(_DWORD **)a1;
    if (*(_QWORD *)a1 && !v2[128])
    {
      v6 = v2 + 135;
      for (i = atomic_load(v2 + 135); i != -1; i = v8)
      {
        if (!i)
          abort();
        v8 = __ldaxr(v6);
        if (v8 == i)
        {
          if (!__stlxr(i - 1, v6))
          {
            if (i == 1)
            {
              bn_mont_ctx_cleanup(v2 + 58);
              bn_mont_ctx_cleanup(v2 + 74);
              v10 = *((_QWORD *)v2 - 1);
              v9 = v2 - 2;
              v11 = v10 + 8;
              if (v10 != -8)
                bzero(v9, v11);
              free(v9);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v4 = *((_QWORD *)a1 - 1);
    v3 = (char *)a1 - 8;
    v5 = v4 + 8;
    if (v4 != -8)
      bzero(v3, v5);
    free(v3);
  }
}

EC_POINT *__cdecl EC_POINT_dup(const EC_POINT *a1, const EC_GROUP *a2)
{
  char *v4;
  BN_CTX *v5;
  _QWORD *v6;
  const EC_POINT *v7;
  _DWORD *v8;
  const char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unsigned int *v27;
  unsigned int i;
  unsigned int v29;
  _DWORD *v30;
  uint64_t v31;
  size_t v32;

  if (!a1)
    return 0;
  if (!a2)
  {
    v9 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/fipsmodule/ec/ec.c";
    v10 = 15;
    v11 = 67;
    v12 = 469;
LABEL_13:
    ERR_put_error(v10, 0, v11, v9, v12);
    return 0;
  }
  v4 = (char *)malloc_type_malloc(0xE8uLL, 0x30772F57uLL);
  if (!v4)
  {
    v9 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v10 = 14;
    v11 = 65;
    v12 = 247;
    goto LABEL_13;
  }
  v6 = v4;
  *(_QWORD *)v4 = 224;
  v7 = (const EC_POINT *)(v4 + 8);
  if (!*((_DWORD *)a2 + 128))
  {
    v14 = (unsigned int *)((char *)a2 + 540);
    v15 = atomic_load((unsigned int *)a2 + 135);
    if (v15 != -1)
    {
      while (1)
      {
        v16 = __ldaxr(v14);
        if (v16 == v15)
        {
          if (!__stlxr(v15 + 1, v14))
          {
            v17 = 1;
            goto LABEL_21;
          }
        }
        else
        {
          __clrex();
        }
        v17 = 0;
LABEL_21:
        if ((v17 & 1) == 0)
        {
          v15 = v16;
          if (v16 != -1)
            continue;
        }
        break;
      }
    }
  }
  *((_OWORD *)v4 + 1) = 0u;
  *((_QWORD *)v4 + 1) = a2;
  *((_OWORD *)v4 + 10) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  *((_OWORD *)v4 + 7) = 0u;
  *((_OWORD *)v4 + 8) = 0u;
  *((_OWORD *)v4 + 9) = 0u;
  *((_OWORD *)v4 + 11) = 0u;
  *((_OWORD *)v4 + 12) = 0u;
  *((_OWORD *)v4 + 13) = 0u;
  *((_QWORD *)v4 + 28) = 0;
  if (EC_GROUP_cmp(a2, *(const EC_GROUP **)a1, v5))
  {
    ERR_put_error(15, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 501);
    v8 = *(_DWORD **)v7;
    if (v8 && !v8[128])
    {
      v27 = v8 + 135;
      for (i = atomic_load(v8 + 135); i != -1; i = v29)
      {
        if (!i)
          abort();
        v29 = __ldaxr(v27);
        if (v29 == i)
        {
          if (!__stlxr(i - 1, v27))
          {
            if (i == 1)
            {
              bn_mont_ctx_cleanup(v8 + 58);
              bn_mont_ctx_cleanup(v8 + 74);
              v31 = *((_QWORD *)v8 - 1);
              v30 = v8 - 2;
              v32 = v31 + 8;
              if (v31 != -8)
                bzero(v30, v32);
              free(v30);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    if (*v6 != -8)
      __memset_chk();
    free(v6);
    return 0;
  }
  if (v7 == a1)
    return a1;
  *((_OWORD *)v6 + 1) = *(_OWORD *)((char *)a1 + 8);
  v18 = *(_OWORD *)((char *)a1 + 24);
  v19 = *(_OWORD *)((char *)a1 + 40);
  v20 = *(_OWORD *)((char *)a1 + 56);
  v6[10] = *((_QWORD *)a1 + 9);
  *((_OWORD *)v6 + 3) = v19;
  *((_OWORD *)v6 + 4) = v20;
  *((_OWORD *)v6 + 2) = v18;
  v22 = *((_OWORD *)a1 + 7);
  v21 = *((_OWORD *)a1 + 8);
  v23 = *((_OWORD *)a1 + 6);
  v6[19] = *((_QWORD *)a1 + 18);
  *(_OWORD *)(v6 + 15) = v22;
  *(_OWORD *)(v6 + 17) = v21;
  *(_OWORD *)(v6 + 13) = v23;
  *(_OWORD *)(v6 + 11) = *((_OWORD *)a1 + 5);
  v24 = *(_OWORD *)((char *)a1 + 184);
  v25 = *(_OWORD *)((char *)a1 + 200);
  v26 = *(_OWORD *)((char *)a1 + 168);
  v6[28] = *((_QWORD *)a1 + 27);
  *((_OWORD *)v6 + 12) = v24;
  *((_OWORD *)v6 + 13) = v25;
  *((_OWORD *)v6 + 11) = v26;
  *((_OWORD *)v6 + 10) = *(_OWORD *)((char *)a1 + 152);
  return v7;
}

int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *a1, const EC_POINT *a2, BIGNUM *x, BIGNUM *y, BN_CTX *a5)
{
  int v9;
  int v10;
  BIGNUM *v11;
  _OWORD *v12;
  _OWORD *v13;
  _OWORD v15[4];
  uint64_t v16;
  _OWORD v17[4];
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 s[66];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (!**(_QWORD **)a1)
  {
    v9 = 66;
    v10 = 568;
    goto LABEL_5;
  }
  if (EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, (BN_CTX *)x))
  {
    v9 = 106;
    v10 = 572;
LABEL_5:
    ERR_put_error(15, 0, v9, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", v10);
    LODWORD(v11) = 0;
    return (int)v11;
  }
  v18 = 0;
  memset(v17, 0, sizeof(v17));
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  if (x)
    v12 = v17;
  else
    v12 = 0;
  if (y)
    v13 = v15;
  else
    v13 = 0;
  LODWORD(v11) = (**(uint64_t (***)(const EC_GROUP *, char *, _OWORD *, _OWORD *))a1)(a1, (char *)a2 + 8, v12, v13);
  if ((_DWORD)v11)
  {
    if (!x
      || (v19 = 0,
          (*(void (**)(const EC_GROUP *, unsigned __int8 *, uint64_t *, _OWORD *))(*(_QWORD *)a1 + 104))(a1, s, &v19, v17), (v11 = BN_bin2bn(s, v19, x)) != 0))
    {
      if (!y
        || (v19 = 0,
            (*(void (**)(const EC_GROUP *, unsigned __int8 *, uint64_t *, _OWORD *))(*(_QWORD *)a1 + 104))(a1, s, &v19, v15), (v11 = BN_bin2bn(s, v19, y)) != 0))
      {
        LODWORD(v11) = 1;
      }
    }
  }
  return (int)v11;
}

uint64_t ec_point_set_affine_coordinates(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(uint64_t, __int128 *, uint64_t);
  void (*v9)(uint64_t, __int128 *, __int128 *, uint64_t);
  const unint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  int8x16_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  const unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t *v37;
  int8x16_t *v38;
  unint64_t v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 v48;
  unint64_t v49;
  int8x16_t *v50;
  int8x16_t *v51;
  int8x16_t v52;
  unint64_t v53;
  int8x16_t v54;
  int8x16_t v55;
  unint64_t v56;
  unint64_t v57;
  int8x8_t v58;
  int8x8_t *v59;
  int8x8_t *v60;
  unint64_t v61;
  int8x8_t v62;
  int8x8_t v63;
  int8x8_t v64;
  uint64_t v65;
  uint64_t result;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char v81;
  char v82;
  char v83;
  __int128 v84;
  _OWORD v85[3];
  uint64_t v86;
  __int128 v87;
  _OWORD v88[3];
  uint64_t v89;
  unint64_t rp[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;

  v9 = *(void (**)(uint64_t, __int128 *, __int128 *, uint64_t))(*(_QWORD *)a1 + 88);
  v8 = *(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 96);
  v89 = 0;
  v87 = 0u;
  memset(v88, 0, sizeof(v88));
  v86 = 0;
  v84 = 0u;
  memset(v85, 0, sizeof(v85));
  v8(a1, &v87, a4);
  v8(a1, &v84, a3);
  v94 = 0;
  v92 = 0u;
  v93 = 0u;
  *(_OWORD *)rp = 0u;
  v91 = 0u;
  v10 = *(const unint64_t **)(a1 + 320);
  v11 = *(int *)(a1 + 328);
  v12 = bn_add_words((unint64_t *)&v84, (const unint64_t *)&v84, (const unint64_t *)(a1 + 360), *(_DWORD *)(a1 + 328));
  v13 = bn_sub_words(rp, (const unint64_t *)&v84, v10, v11);
  if ((_DWORD)v11)
  {
    v14 = v12 - v13;
    v15 = ~(v12 - v13);
    if (v11 < 4)
    {
      v16 = 0;
LABEL_7:
      v23 = v11 - v16;
      v24 = 8 * v16;
      v25 = &rp[v16];
      v26 = (unint64_t *)((char *)&v85[-1] + v24);
      do
      {
        v27 = *v25++;
        *v26 = v27 & v15 | *v26 & v14;
        ++v26;
        --v23;
      }
      while (v23);
      goto LABEL_9;
    }
    v17 = (int8x16_t)vdupq_n_s64(v14);
    v18 = (int8x16_t)vdupq_n_s64(v15);
    v16 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    v19 = (int8x16_t *)v85;
    v20 = (int8x16_t *)&v91;
    v21 = v11 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v22 = vorrq_s8(vandq_s8(*v20, v18), vandq_s8(*v19, v17));
      v19[-1] = vorrq_s8(vandq_s8(v20[-1], v18), vandq_s8(v19[-1], v17));
      *v19 = v22;
      v19 += 2;
      v20 += 2;
      v21 -= 4;
    }
    while (v21);
    if (v16 != v11)
      goto LABEL_7;
  }
LABEL_9:
  v9(a1, &v84, &v84, a3);
  v94 = 0;
  v92 = 0u;
  v93 = 0u;
  *(_OWORD *)rp = 0u;
  v91 = 0u;
  v28 = *(const unint64_t **)(a1 + 320);
  v29 = *(int *)(a1 + 328);
  v30 = bn_add_words((unint64_t *)&v84, (const unint64_t *)&v84, (const unint64_t *)(a1 + 432), *(_DWORD *)(a1 + 328));
  v31 = bn_sub_words(rp, (const unint64_t *)&v84, v28, v29);
  if (!(_DWORD)v29)
    goto LABEL_17;
  v32 = v30 - v31;
  v33 = ~(v30 - v31);
  if (v29 < 4)
  {
    v34 = 0;
LABEL_15:
    v41 = v29 - v34;
    v42 = 8 * v34;
    v43 = &rp[v34];
    v44 = (unint64_t *)((char *)&v85[-1] + v42);
    do
    {
      v45 = *v43++;
      *v44 = v45 & v33 | *v44 & v32;
      ++v44;
      --v41;
    }
    while (v41);
    goto LABEL_17;
  }
  v35 = (int8x16_t)vdupq_n_s64(v32);
  v36 = (int8x16_t)vdupq_n_s64(v33);
  v34 = v29 & 0xFFFFFFFFFFFFFFFCLL;
  v37 = (int8x16_t *)v85;
  v38 = (int8x16_t *)&v91;
  v39 = v29 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v40 = vorrq_s8(vandq_s8(*v38, v36), vandq_s8(*v37, v35));
    v37[-1] = vorrq_s8(vandq_s8(v38[-1], v36), vandq_s8(v37[-1], v35));
    *v37 = v40;
    v37 += 2;
    v38 += 2;
    v39 -= 4;
  }
  while (v39);
  if (v34 != v29)
    goto LABEL_15;
LABEL_17:
  v46 = *(int *)(a1 + 328);
  if (!(_DWORD)v46)
  {
LABEL_30:
    *(_OWORD *)a2 = *(_OWORD *)a3;
    v73 = *(_OWORD *)(a3 + 16);
    v74 = *(_OWORD *)(a3 + 32);
    v75 = *(_OWORD *)(a3 + 48);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 64);
    *(_OWORD *)(a2 + 32) = v74;
    *(_OWORD *)(a2 + 48) = v75;
    *(_OWORD *)(a2 + 16) = v73;
    v77 = *(_OWORD *)(a4 + 32);
    v76 = *(_OWORD *)(a4 + 48);
    v78 = *(_QWORD *)(a4 + 64);
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a2 + 136) = v78;
    *(_OWORD *)(a2 + 120) = v76;
    *(_OWORD *)(a2 + 104) = v77;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)a4;
    return 1;
  }
  v47 = 8 * v46;
  if ((unint64_t)(8 * v46) < 0x20)
  {
    v48 = 0;
    v49 = 0;
    goto LABEL_24;
  }
  v49 = v47 & 0xFFFFFFFFFFFFFFE0;
  v50 = (int8x16_t *)v88;
  v51 = (int8x16_t *)v85;
  v52 = 0uLL;
  v53 = v47 & 0xFFFFFFFFFFFFFFE0;
  v54 = 0uLL;
  do
  {
    v52 = vorrq_s8(veorq_s8(v51[-1], v50[-1]), v52);
    v54 = vorrq_s8(veorq_s8(*v51, *v50), v54);
    v50 += 2;
    v51 += 2;
    v53 -= 32;
  }
  while (v53);
  v55 = vorrq_s8(v54, v52);
  *(int8x8_t *)v55.i8 = vorr_s8(*(int8x8_t *)v55.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL));
  v56 = v55.i64[0] | HIDWORD(v55.i64[0]) | ((unint64_t)(v55.i64[0] | HIDWORD(v55.i64[0])) >> 16);
  v48 = v56 | BYTE1(v56);
  v57 = v47 - v49;
  if (v47 != v49)
  {
    if ((v46 & 3) != 0)
    {
LABEL_24:
      v58 = (int8x8_t)v48;
      v59 = (int8x8_t *)((char *)&v88[-1] + v49);
      v60 = (int8x8_t *)((char *)&v85[-1] + v49);
      v61 = v49 - v47;
      do
      {
        v62 = *v59++;
        v63 = v62;
        v64 = *v60++;
        v58 = vorr_s8(veor_s8(v64, v63), v58);
        v61 += 8;
      }
      while (v61);
      v65 = *(_QWORD *)&v58 | HIDWORD(*(_QWORD *)&v58) | ((*(_QWORD *)&v58 | HIDWORD(*(_QWORD *)&v58)) >> 16);
      v48 = v65 | BYTE1(v65);
      goto LABEL_27;
    }
    v79 = (char *)&v85[-1] + v49;
    v80 = (char *)&v88[-1] + v49;
    do
    {
      v82 = *v80++;
      v81 = v82;
      v83 = *v79++;
      v48 |= v83 ^ v81;
      --v57;
    }
    while (v57);
  }
LABEL_27:
  if (!v48)
    goto LABEL_30;
  ERR_put_error(15, 0, 120, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 628);
  result = 0;
  if (*(_DWORD *)(a1 + 532))
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
    v67 = *(_OWORD *)(a1 + 32);
    v68 = *(_OWORD *)(a1 + 48);
    v69 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 32) = v68;
    *(_OWORD *)(a2 + 48) = v69;
    *(_OWORD *)(a2 + 16) = v67;
    v70 = *(_OWORD *)(a1 + 120);
    v71 = *(_OWORD *)(a1 + 136);
    v72 = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 136) = *(_QWORD *)(a1 + 152);
    *(_OWORD *)(a2 + 88) = v72;
    *(_OWORD *)(a2 + 120) = v71;
    *(_OWORD *)(a2 + 104) = v70;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 88);
  }
  return result;
}

int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *a1, EC_POINT *a2, const BIGNUM *x, const BIGNUM *y, BN_CTX *a5)
{
  int v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int result;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[5];
  _OWORD v35[4];
  uint64_t v36;
  _OWORD v37[4];
  uint64_t v38;

  if (EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, (BN_CTX *)x))
  {
    v9 = 106;
    v10 = 649;
LABEL_10:
    ERR_put_error(15, 0, v9, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", v10);
    return 0;
  }
  if (!x || !y)
  {
    v9 = 67;
    v10 = 654;
    goto LABEL_10;
  }
  v38 = 0;
  memset(v37, 0, sizeof(v37));
  v36 = 0;
  memset(v35, 0, sizeof(v35));
  v33 = 0u;
  memset(v34, 0, sizeof(v34));
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  if (ec_bignum_to_felem((uint64_t)a1, (uint64_t)v37, (uint64_t)x)
    && ec_bignum_to_felem((uint64_t)a1, (uint64_t)v35, (uint64_t)y)
    && ec_point_set_affine_coordinates((uint64_t)a1, (uint64_t)&v30, (uint64_t)v37, (uint64_t)v35))
  {
    v11 = v30;
    *(_OWORD *)((char *)a2 + 24) = v31;
    v12 = v33;
    *(_OWORD *)((char *)a2 + 40) = v32;
    *(_OWORD *)((char *)a2 + 56) = v12;
    *((_QWORD *)a2 + 9) = *(_QWORD *)&v34[0];
    *(_OWORD *)((char *)a2 + 8) = v11;
    v13 = *(_OWORD *)((char *)v34 + 8);
    *((_QWORD *)a2 + 18) = *((_QWORD *)&v34[4] + 1);
    v14 = *(_OWORD *)((char *)&v34[3] + 8);
    *((_OWORD *)a2 + 7) = *(_OWORD *)((char *)&v34[2] + 8);
    *((_OWORD *)a2 + 8) = v14;
    v15 = *(_OWORD *)((char *)&v34[1] + 8);
    *((_OWORD *)a2 + 5) = v13;
    *((_OWORD *)a2 + 6) = v15;
    *(_OWORD *)((char *)a2 + 152) = *((_OWORD *)a1 + 10);
    v16 = *((_OWORD *)a1 + 11);
    v17 = *((_OWORD *)a1 + 12);
    v18 = *((_OWORD *)a1 + 13);
    *((_QWORD *)a2 + 27) = *((_QWORD *)a1 + 28);
    *(_OWORD *)((char *)a2 + 200) = v18;
    *(_OWORD *)((char *)a2 + 184) = v17;
    *(_OWORD *)((char *)a2 + 168) = v16;
    return 1;
  }
  else
  {
    v20 = (_OWORD *)((char *)a2 + 8);
    result = 0;
    if (*((_DWORD *)a1 + 133))
    {
      *v20 = *((_OWORD *)a1 + 1);
      v21 = *((_OWORD *)a1 + 2);
      v22 = *((_OWORD *)a1 + 3);
      v23 = *((_OWORD *)a1 + 4);
      *((_QWORD *)a2 + 9) = *((_QWORD *)a1 + 10);
      *(_OWORD *)((char *)a2 + 40) = v22;
      *(_OWORD *)((char *)a2 + 56) = v23;
      *(_OWORD *)((char *)a2 + 24) = v21;
      v24 = *(_OWORD *)((char *)a1 + 120);
      v25 = *(_OWORD *)((char *)a1 + 136);
      v26 = *(_OWORD *)((char *)a1 + 104);
      *((_QWORD *)a2 + 18) = *((_QWORD *)a1 + 19);
      *((_OWORD *)a2 + 7) = v24;
      *((_OWORD *)a2 + 8) = v25;
      *((_OWORD *)a2 + 6) = v26;
      *((_OWORD *)a2 + 5) = *(_OWORD *)((char *)a1 + 88);
      v28 = *((_OWORD *)a1 + 12);
      v27 = *((_OWORD *)a1 + 13);
      v29 = *((_QWORD *)a1 + 28);
      *(_OWORD *)((char *)a2 + 168) = *((_OWORD *)a1 + 11);
      *((_QWORD *)a2 + 27) = v29;
      *(_OWORD *)((char *)a2 + 200) = v27;
      *(_OWORD *)((char *)a2 + 184) = v28;
      *(_OWORD *)((char *)a2 + 152) = *((_OWORD *)a1 + 10);
    }
    else
    {
      *((_QWORD *)a2 + 9) = 0;
      *(_OWORD *)((char *)a2 + 40) = 0u;
      *(_OWORD *)((char *)a2 + 56) = 0u;
      *v20 = 0u;
      *(_OWORD *)((char *)a2 + 24) = 0u;
      *((_OWORD *)a2 + 5) = 0u;
      *((_OWORD *)a2 + 6) = 0u;
      *((_OWORD *)a2 + 7) = 0u;
      *((_OWORD *)a2 + 8) = 0u;
      *((_QWORD *)a2 + 18) = 0;
      *(_OWORD *)((char *)a2 + 152) = 0u;
      *(_OWORD *)((char *)a2 + 168) = 0u;
      *(_OWORD *)((char *)a2 + 184) = 0u;
      *(_OWORD *)((char *)a2 + 200) = 0u;
      *((_QWORD *)a2 + 27) = 0;
    }
  }
  return result;
}

double ec_set_to_safe_point(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (*(_DWORD *)(a1 + 532))
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 16);
    v2 = *(_OWORD *)(a1 + 32);
    v3 = *(_OWORD *)(a1 + 48);
    v4 = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 32) = v3;
    *(_OWORD *)(a2 + 48) = v4;
    *(_OWORD *)(a2 + 16) = v2;
    v5 = *(_OWORD *)(a1 + 120);
    v6 = *(_OWORD *)(a1 + 136);
    v7 = *(_QWORD *)(a1 + 152);
    *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 104);
    *(_QWORD *)(a2 + 136) = v7;
    *(_OWORD *)(a2 + 120) = v6;
    *(_OWORD *)(a2 + 104) = v5;
    *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 88);
    v9 = *(_OWORD *)(a1 + 192);
    v8 = *(_OWORD *)(a1 + 208);
    v10 = *(_OWORD *)(a1 + 176);
    *(_QWORD *)(a2 + 208) = *(_QWORD *)(a1 + 224);
    *(_OWORD *)(a2 + 176) = v9;
    *(_OWORD *)(a2 + 192) = v8;
    *(_OWORD *)(a2 + 160) = v10;
    v11 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a2 + 144) = v11;
  }
  else
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)&v11 = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_OWORD *)(a2 + 120) = 0u;
    *(_QWORD *)(a2 + 136) = 0;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_QWORD *)(a2 + 208) = 0;
  }
  return *(double *)&v11;
}

uint64_t ec_point_mul_no_self_test(const EC_GROUP *a1, uint64_t a2, BN_CTX *a3, const EC_GROUP **a4, char **a5, uint64_t a6)
{
  int v7;
  int v8;
  BN_CTX *v15;
  uint64_t v16;
  BN_CTX *v18;
  char *v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int8x16_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD __dst[4];
  uint64_t v42;

  if ((a4 != 0) != (a5 == 0) && ((unint64_t)a3 | (unint64_t)a5) != 0)
  {
    if (EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, a3) || a4 && EC_GROUP_cmp(a1, *a4, v15))
    {
      v7 = 106;
      v8 = 744;
      goto LABEL_8;
    }
    if (a6)
    {
      v18 = 0;
      if (!a3)
        goto LABEL_19;
    }
    else
    {
      v19 = (char *)malloc_type_malloc(0x38uLL, 0x30772F57uLL);
      if (!v19)
      {
        ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
        v16 = 0;
        v18 = 0;
LABEL_31:
        BN_CTX_free(v18);
        return v16;
      }
      *(_QWORD *)v19 = 48;
      *(_OWORD *)(v19 + 8) = 0u;
      a6 = (uint64_t)(v19 + 8);
      *(_OWORD *)(v19 + 24) = 0u;
      *(_OWORD *)(v19 + 34) = 0u;
      v18 = (BN_CTX *)(v19 + 8);
      if (!a3)
        goto LABEL_19;
    }
    *(_QWORD *)&v31 = 0;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    if (!arbitrary_bignum_to_scalar((uint64_t)a1, &v27, (char **)a3, a6))
    {
LABEL_28:
      v16 = 0;
      goto LABEL_31;
    }
    (*(void (**)(const EC_GROUP *, uint64_t, int8x16_t *))(*(_QWORD *)a1 + 40))(a1, a2 + 8, &v27);
    if (!ec_GFp_simple_is_on_curve((uint64_t)a1, (int8x16_t *)(a2 + 8)))
    {
      v20 = 867;
LABEL_27:
      ERR_put_error(15, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", v20);
      goto LABEL_28;
    }
LABEL_19:
    if (!a5)
    {
LABEL_30:
      v16 = 1;
      goto LABEL_31;
    }
    v42 = 0;
    memset(__dst, 0, sizeof(__dst));
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v27 = 0u;
    if (!arbitrary_bignum_to_scalar((uint64_t)a1, __dst, a5, a6))
      goto LABEL_28;
    (*(void (**)(const EC_GROUP *, int8x16_t *, const EC_GROUP **, _OWORD *))(*(_QWORD *)a1 + 32))(a1, &v27, a4 + 1, __dst);
    if (ec_GFp_simple_is_on_curve((uint64_t)a1, &v27))
    {
      if (a3)
      {
        (*(void (**)(const EC_GROUP *, uint64_t, uint64_t, int8x16_t *))(*(_QWORD *)a1 + 16))(a1, a2 + 8, a2 + 8, &v27);
      }
      else
      {
        v21 = v38;
        *(_OWORD *)(a2 + 168) = v37;
        *(_OWORD *)(a2 + 184) = v21;
        *(_OWORD *)(a2 + 200) = v39;
        v22 = v34;
        *(_OWORD *)(a2 + 104) = v33;
        *(_OWORD *)(a2 + 120) = v22;
        v23 = v36;
        *(_OWORD *)(a2 + 136) = v35;
        *(_OWORD *)(a2 + 152) = v23;
        v24 = v30;
        *(_OWORD *)(a2 + 40) = v29;
        *(_OWORD *)(a2 + 56) = v24;
        v25 = v32;
        *(_OWORD *)(a2 + 72) = v31;
        *(_OWORD *)(a2 + 88) = v25;
        v26 = v28;
        *(int8x16_t *)(a2 + 8) = v27;
        *(_QWORD *)(a2 + 216) = v40;
        *(_OWORD *)(a2 + 24) = v26;
      }
      goto LABEL_30;
    }
    v20 = 846;
    goto LABEL_27;
  }
  v7 = 67;
  v8 = 738;
LABEL_8:
  ERR_put_error(15, 0, v7, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", v8);
  return 0;
}

uint64_t arbitrary_bignum_to_scalar(uint64_t a1, void *__dst, char **a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (bn_copy_words(__dst, *(int *)(a1 + 264), a3)
    && (int)bn_cmp_words_consttime((uint64_t *)__dst, *(int *)(a1 + 264), *(uint64_t **)(a1 + 256), *(int *)(a1 + 264)) < 0)
  {
    return 1;
  }
  ERR_put_error(15, 0, 133, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/scalar.c", 32);
  ERR_clear_error();
  if (!*(_BYTE *)(a4 + 40))
  {
    v9 = *(_QWORD *)(a4 + 32);
    v10 = *(_QWORD *)(a4 + 16);
    if (v10 == *(_QWORD *)(a4 + 24))
    {
      if (v10)
        v11 = (3 * v10) >> 1;
      else
        v11 = 32;
      v12 = v11 > v10 && v11 >> 61 == 0;
      if (!v12 || (v13 = OPENSSL_realloc(*(_QWORD **)(a4 + 8), 8 * v11)) == 0)
      {
        *(_WORD *)(a4 + 40) = 257;
        result = (uint64_t)BN_CTX_get((BN_CTX *)a4);
        if (result)
          goto LABEL_20;
        goto LABEL_31;
      }
      *(_QWORD *)(a4 + 8) = v13;
      *(_QWORD *)(a4 + 24) = v11;
      v10 = *(_QWORD *)(a4 + 16);
    }
    else
    {
      v13 = *(_QWORD **)(a4 + 8);
    }
    v13[v10] = v9;
    ++*(_QWORD *)(a4 + 16);
  }
  result = (uint64_t)BN_CTX_get((BN_CTX *)a4);
  if (result)
  {
LABEL_20:
    v14 = result;
    result = BN_div(0, (BIGNUM *)result, (const BIGNUM *)a3, (const BIGNUM *)(a1 + 256), (BN_CTX *)a4);
    if ((_DWORD)result)
    {
      if (!*(_DWORD *)(v14 + 16)
        || (*(_DWORD *)(a1 + 272)
          ? (result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))BN_sub)(v14, v14, a1 + 256))
          : (result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))BN_add)(v14, v14, a1 + 256)),
            (_DWORD)result))
      {
        if (bn_copy_words(__dst, *(int *)(a1 + 264), (char **)v14)
          && (int)bn_cmp_words_consttime((uint64_t *)__dst, *(int *)(a1 + 264), *(uint64_t **)(a1 + 256), *(int *)(a1 + 264)) < 0)
        {
          result = 1;
        }
        else
        {
          ERR_put_error(15, 0, 133, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/scalar.c", 32);
          result = 0;
        }
      }
    }
  }
LABEL_31:
  if (!*(_BYTE *)(a4 + 40))
  {
    v15 = *(_QWORD *)(a4 + 8);
    v16 = *(_QWORD *)(a4 + 16) - 1;
    *(_QWORD *)(a4 + 16) = v16;
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(v15 + 8 * v16);
  }
  return result;
}

uint64_t ec_point_mul_scalar_base(uint64_t a1, int8x16_t *a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    if (ec_GFp_simple_is_on_curve(a1, a2))
    {
      return 1;
    }
    else
    {
      ERR_put_error(15, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 867);
      return 0;
    }
  }
  else
  {
    ERR_put_error(15, 0, 67, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 856);
    return 0;
  }
}

uint64_t ec_get_x_coordinate_as_scalar(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  unint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  unsigned int v22;
  uint64_t result;
  int64x2_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  int64x2_t v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int64x2_t v35;
  uint64_t v36;
  int8x16_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  unsigned int v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t *v50;
  int8x16_t *v51;
  unint64_t v52;
  int8x16_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t ap[2];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[66];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a1 + 328);
  v6 = v5 & ((int)v5 >> 31);
  v7 = 8 * v5 - 8;
  v8 = *(_DWORD *)(a1 + 328);
  while (1)
  {
    v9 = __OFSUB__(v8--, 1);
    if (v8 < 0 != v9)
      break;
    v10 = *(_QWORD *)(a1 + 320);
    v11 = *(_QWORD *)(v10 + v7);
    v7 -= 8;
    if (v11)
    {
      v6 = v8 + 1;
      goto LABEL_8;
    }
  }
  if ((v5 & 0x80000000) == 0)
  {
    v12 = 0;
    goto LABEL_23;
  }
  v10 = *(_QWORD *)(a1 + 320);
LABEL_8:
  v13 = v6 - 1;
  v14 = *(_QWORD *)(v10 + 8 * v13);
  v15 = v14 != 0;
  v16 = HIDWORD(v14) != 0;
  if (HIDWORD(v14))
    v14 >>= 32;
  v17 = v14 >> 16 != 0;
  if (v14 >> 16)
    v14 >>= 16;
  v18 = v14 > 0xFF;
  if (v14 > 0xFF)
    v14 >>= 8;
  v19 = v14 > 0xF;
  if (v14 > 0xF)
    v14 >>= 4;
  v20 = v14 > 3;
  if (v14 > 3)
    v14 >>= 2;
  v21 = v15 | (v13 << 6) | (32 * v16) | (16 * v17) | (8 * v18) | (4 * v19) | (2 * v20);
  if (v14 > 1)
    ++v21;
  v22 = v21 + 7;
  if (v22 >= 0x218)
  {
    ERR_put_error(15, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 996);
    return 0;
  }
  v12 = v22 >> 3;
LABEL_23:
  v59 = 0;
  *(_QWORD *)&v64 = 0;
  v62 = 0u;
  v63 = 0u;
  *(_OWORD *)ap = 0u;
  v61 = 0u;
  result = (**(uint64_t (***)(uint64_t, uint64_t, unint64_t *, _QWORD))a1)(a1, a3, ap, 0);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, _BYTE *, unint64_t *, unint64_t *))(*(_QWORD *)a1 + 104))(a1, v65, &v59, ap);
    v59 = v12;
    v24 = 0uLL;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    *(_OWORD *)ap = 0u;
    v25 = *(int *)(a1 + 264);
    v26 = v25 + 1;
    if (v12 > 8 * (v25 + 1))
      abort();
    v27 = v12 - 8;
    if (v12 < 8)
    {
      v29 = ap;
      v28 = v12;
      goto LABEL_34;
    }
    if (v27 >= 0x18)
    {
      v30 = (v27 >> 3) + 1;
      v31 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      v28 = v12 - v31 * 8;
      v29 = &ap[v31];
      v32 = (int64x2_t)(unint64_t)(v25 + 1);
      v33 = (int8x16_t *)&v65[v12 - 16];
      v34 = (int8x16_t *)&v61;
      v35.i64[0] = -1;
      v35.i64[1] = -1;
      v36 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v37 = vrev64q_s8(vextq_s8(v33[-1], v33[-1], 8uLL));
        v34[-1] = vrev64q_s8(vextq_s8(*v33, *v33, 8uLL));
        *v34 = v37;
        v32 = vaddq_s64(v32, v35);
        v24 = vaddq_s64(v24, v35);
        v33 -= 2;
        v34 += 2;
        v36 -= 4;
      }
      while (v36);
      v26 = vaddvq_s64(vaddq_s64(v24, v32));
      if (v30 == (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_34:
        if (v28)
        {
          v39 = 0;
          v40 = v65;
          do
          {
            v41 = *v40++;
            v39 = v41 | (v39 << 8);
            --v28;
          }
          while (v28);
          *v29++ = v39;
          --v26;
        }
        if (8 * v26)
        {
          bzero(v29, 8 * v26);
          v42 = *(_DWORD *)(a1 + 264);
        }
        else
        {
          v42 = v25;
        }
        v43 = ap[v42];
        v44 = bn_sub_words(a2, ap, *(const unint64_t **)(a1 + 256), v42);
        if (!v42)
          return 1;
        v45 = v43 - v44;
        v46 = ~(v43 - v44);
        if (v42 >= 4)
        {
          v47 = v42 & 0xFFFFFFFFFFFFFFFCLL;
          v48 = (int8x16_t)vdupq_n_s64(v45);
          v49 = (int8x16_t)vdupq_n_s64(v46);
          v50 = (int8x16_t *)&v61;
          v51 = (int8x16_t *)(a2 + 2);
          v52 = v47;
          do
          {
            v53 = vorrq_s8(vandq_s8(*v51, v49), vandq_s8(*v50, v48));
            v51[-1] = vorrq_s8(vandq_s8(v51[-1], v49), vandq_s8(v50[-1], v48));
            *v51 = v53;
            v50 += 2;
            v51 += 2;
            v52 -= 4;
          }
          while (v52);
          if (v47 == v42)
            return 1;
        }
        else
        {
          v47 = 0;
        }
        v54 = v42 - v47;
        v55 = v47;
        v56 = &a2[v47];
        v57 = &ap[v55];
        do
        {
          v58 = *v57++;
          *v56 = *v56 & v46 | v58 & v45;
          ++v56;
          --v54;
        }
        while (v54);
        return 1;
      }
    }
    else
    {
      v28 = v12;
      v29 = ap;
    }
    v38 = v28;
    do
    {
      v28 = v38 - 8;
      *v29++ = bswap64(*(_QWORD *)(v65 + v38 + 4));
      --v26;
      v38 = v28;
    }
    while (v28 > 7);
    goto LABEL_34;
  }
  return result;
}

uint64_t ec_get_x_coordinate_as_bytes(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  int v24;
  uint64_t result;
  _OWORD v26[4];
  uint64_t v27;

  v8 = *(unsigned int *)(a1 + 328);
  v9 = v8 & ((int)v8 >> 31);
  v10 = 8 * v8 - 8;
  v11 = *(_DWORD *)(a1 + 328);
  while (1)
  {
    v12 = __OFSUB__(v11--, 1);
    if (v11 < 0 != v12)
      break;
    v13 = *(_QWORD *)(a1 + 320);
    v14 = *(_QWORD *)(v13 + v10);
    v10 -= 8;
    if (v14)
    {
      v9 = v11 + 1;
      goto LABEL_8;
    }
  }
  if ((v8 & 0x80000000) == 0)
  {
    v15 = 0;
    goto LABEL_23;
  }
  v13 = *(_QWORD *)(a1 + 320);
LABEL_8:
  v16 = v9 - 1;
  v17 = *(_QWORD *)(v13 + 8 * v16);
  v18 = v17 != 0;
  v19 = HIDWORD(v17) != 0;
  if (HIDWORD(v17))
    v17 >>= 32;
  v20 = v17 >> 16 != 0;
  if (v17 >> 16)
    v17 >>= 16;
  v21 = v17 > 0xFF;
  if (v17 > 0xFF)
    v17 >>= 8;
  v22 = v17 > 0xF;
  if (v17 > 0xF)
    v17 >>= 4;
  v23 = v17 > 3;
  if (v17 > 3)
    v17 >>= 2;
  v24 = v18 | (v16 << 6) | (32 * v19) | (16 * v20) | (8 * v21) | (4 * v22) | (2 * v23);
  if (v17 > 1)
    ++v24;
  v15 = (v24 + 7) >> 3;
  if (v15 > a4)
  {
    ERR_put_error(15, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 996);
    return 0;
  }
LABEL_23:
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  result = (**(uint64_t (***)(uint64_t, uint64_t, _OWORD *, _QWORD))a1)(a1, a5, v26, 0);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t, unint64_t *, _OWORD *))(*(_QWORD *)a1 + 104))(a1, a2, a3, v26);
    *a3 = v15;
    return 1;
  }
  return result;
}

EC_KEY *EC_KEY_parse_private_key(unsigned __int8 **a1, uint64_t a2)
{
  EC_KEY *v3;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  char *v16;
  BIGNUM *v17;
  _QWORD *v18;
  _BYTE *v19;
  const unsigned __int8 *v20;
  size_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t *v30;
  int v31;
  int flags;
  unint64_t *d;
  unint64_t *v34;
  uint64_t v35;
  size_t v36;
  int *p_neg;
  uint64_t v38;
  size_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  const unsigned __int8 *v45;
  unint64_t v46;
  unsigned __int8 *v47;
  unint64_t v48;
  int v49;

  v47 = 0;
  v48 = 0;
  v45 = 0;
  v46 = 0;
  v42 = 0;
  LODWORD(v40) = 0;
  if (!cbs_get_any_asn1_element(a1, &v47, &v40, &v42, 0, 0, 0)
    || (_DWORD)v40 != 536870928
    || v48 < v42
    || (v44 = 0, v47 += v42, v48 -= v42, !CBS_get_asn1_uint64(&v47, &v44))
    || v44 != 1
    || (v42 = 0, LODWORD(v40) = 0, !cbs_get_any_asn1_element(&v47, &v45, &v40, &v42, 0, 0, 0))
    || (_DWORD)v40 != 4
    || v46 < v42)
  {
    ERR_put_error(15, 0, 128, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ec_extra/ec_asn1.c", 92);
    return 0;
  }
  v45 += v42;
  v46 -= v42;
  if (!v48)
    goto LABEL_27;
  v5 = *v47;
  LODWORD(v6) = v5 & 0x1F;
  if ((_DWORD)v6 == 31)
  {
    v7 = 0;
    v8 = v47 + 1;
    v9 = v48 - 1;
    do
    {
      if (!v9)
        goto LABEL_27;
      if (v7 >> 57)
        goto LABEL_27;
      v10 = *v8;
      if (!v7 && v10 == 128)
        goto LABEL_27;
      v6 = v10 & 0x7F | (v7 << 7);
      ++v8;
      --v9;
      v7 = v6;
    }
    while ((v10 & 0x80) != 0);
    if (v6 - 0x20000000 < 0xFFFFFFFFE000001FLL)
      goto LABEL_27;
  }
  if ((v6 | (v5 << 24) & 0xE0000000) == 0xA0000000)
  {
    v42 = 0;
    v43 = 0;
    v40 = 0;
    v49 = 0;
    if (!cbs_get_any_asn1_element(&v47, &v42, &v49, &v40, 0, 0, 0) || v49 != -1610612736 || v43 < v40)
    {
      v11 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/ec_extra/ec_asn1.c";
      v12 = 15;
      v13 = 128;
      v14 = 106;
LABEL_46:
      ERR_put_error(v12, 0, v13, v11, v14);
LABEL_47:
      v3 = 0;
      goto LABEL_48;
    }
    v42 += v40;
    v43 -= v40;
    v30 = EC_KEY_parse_parameters((unsigned __int8 **)&v42);
    if (!v30)
      goto LABEL_47;
    if (a2)
    {
      if (EC_GROUP_cmp((const EC_GROUP *)a2, (const EC_GROUP *)v30, 0))
      {
        v11 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/s"
              "rc/crypto/ec_extra/ec_asn1.c";
        v12 = 15;
        v13 = 130;
        v14 = 117;
        goto LABEL_46;
      }
    }
    else
    {
      a2 = (uint64_t)v30;
    }
    if (v43)
    {
      v11 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/ec_extra/ec_asn1.c";
      v12 = 15;
      v13 = 128;
      v14 = 121;
      goto LABEL_46;
    }
  }
  else
  {
LABEL_27:
    if (!a2)
    {
      v11 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/ec_extra/ec_asn1.c";
      v12 = 15;
      v13 = 114;
      v14 = 127;
      goto LABEL_46;
    }
  }
  v15 = (char *)malloc_type_malloc(0x40uLL, 0x30772F57uLL);
  if (!v15)
  {
    v11 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v12 = 14;
    v13 = 65;
    v14 = 247;
    goto LABEL_46;
  }
  v16 = v15;
  *(_QWORD *)v15 = 56;
  *(_OWORD *)(v15 + 8) = 0u;
  v3 = (EC_KEY *)(v15 + 8);
  *(_OWORD *)(v15 + 24) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  *((_QWORD *)v15 + 7) = 0;
  *(_QWORD *)(v15 + 36) = 0x100000004;
  if (*(_DWORD *)(a2 + 512)
    || (v22 = (unsigned int *)(a2 + 540), v23 = atomic_load((unsigned int *)(a2 + 540)), v23 == -1))
  {
    *(_QWORD *)v3 = a2;
    goto LABEL_31;
  }
  do
  {
    v24 = __ldaxr(v22);
    if (v24 != v23)
    {
      __clrex();
LABEL_54:
      v25 = 0;
      goto LABEL_55;
    }
    if (__stlxr(v23 + 1, v22))
      goto LABEL_54;
    v25 = 1;
LABEL_55:
    if ((v25 & 1) != 0)
      break;
    v23 = v24;
  }
  while (v24 != -1);
  *(_QWORD *)v3 = a2;
LABEL_31:
  v17 = BN_bin2bn(v45, v46, 0);
  v18 = malloc_type_malloc(0xE8uLL, 0x30772F57uLL);
  if (v18)
  {
    *v18 = 224;
    if (!*(_DWORD *)(a2 + 512))
    {
      v26 = (unsigned int *)(a2 + 540);
      v27 = atomic_load((unsigned int *)(a2 + 540));
      if (v27 != -1)
      {
        while (1)
        {
          v28 = __ldaxr(v26);
          if (v28 == v27)
          {
            if (!__stlxr(v27 + 1, v26))
            {
              v29 = 1;
              goto LABEL_66;
            }
          }
          else
          {
            __clrex();
          }
          v29 = 0;
LABEL_66:
          if ((v29 & 1) == 0)
          {
            v27 = v28;
            if (v28 != -1)
              continue;
          }
          break;
        }
      }
    }
    v18[1] = a2;
    *((_OWORD *)v18 + 1) = 0u;
    *((_OWORD *)v18 + 2) = 0u;
    *((_OWORD *)v18 + 3) = 0u;
    *((_OWORD *)v18 + 4) = 0u;
    *((_OWORD *)v18 + 5) = 0u;
    *((_OWORD *)v18 + 6) = 0u;
    *((_OWORD *)v18 + 7) = 0u;
    *((_OWORD *)v18 + 8) = 0u;
    *((_OWORD *)v18 + 9) = 0u;
    *((_OWORD *)v18 + 10) = 0u;
    *((_OWORD *)v18 + 11) = 0u;
    *((_OWORD *)v18 + 12) = 0u;
    *((_OWORD *)v18 + 13) = 0u;
    v18[28] = 0;
    *((_QWORD *)v16 + 2) = v18 + 1;
    if (!v17)
    {
LABEL_48:
      EC_KEY_free(v3);
      return 0;
    }
    if (EC_KEY_set_private_key(v3, v17))
    {
      if (CBS_peek_asn1_tag(&v47, -1610612735))
      {
        v42 = 0;
        v43 = 0;
        v40 = 0;
        v41 = 0;
        if (CBS_get_asn1(&v47, &v42, -1610612735))
        {
          if (CBS_get_asn1((unsigned __int8 **)&v42, &v40, 3))
          {
            if (v41)
            {
              v19 = (_BYTE *)v40;
              v20 = (const unsigned __int8 *)(v40 + 1);
              v21 = v41 - 1;
              ++v40;
              --v41;
              if (!*v19
                && v21
                && EC_POINT_oct2point((const EC_GROUP *)a2, *((EC_POINT **)v16 + 2), v20, v21, 0)
                && !v43)
              {
                *((_DWORD *)v16 + 9) = *(_BYTE *)v40 & 0xFE;
                goto LABEL_76;
              }
            }
          }
        }
        v31 = 161;
LABEL_78:
        ERR_put_error(15, 0, 128, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ec_extra/ec_asn1.c", v31);
      }
      else if (ec_point_mul_scalar_base(a2, (int8x16_t *)(*((_QWORD *)v16 + 2) + 8), *((_QWORD *)v16 + 3) + 24))
      {
        *((_DWORD *)v16 + 8) |= 2u;
LABEL_76:
        if (v48)
        {
          v31 = 181;
          goto LABEL_78;
        }
        if (EC_KEY_check_key(v3))
        {
          BN_free(v17);
          return v3;
        }
      }
    }
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    *((_QWORD *)v16 + 2) = 0;
    if (!v17)
      goto LABEL_48;
  }
  EC_KEY_free(v3);
  flags = v17->flags;
  if ((flags & 2) == 0)
  {
    d = v17->d;
    if (v17->d)
    {
      v35 = *(d - 1);
      v34 = d - 1;
      v36 = v35 + 8;
      if (v35 != -8)
        bzero(v34, v36);
      free(v34);
      flags = v17->flags;
    }
  }
  if ((flags & 1) == 0)
  {
    v3 = 0;
    v17->d = 0;
    return v3;
  }
  v38 = *(_QWORD *)&v17[-1].neg;
  p_neg = &v17[-1].neg;
  v39 = v38 + 8;
  if (v38 != -8)
    bzero(p_neg, v39);
  free(p_neg);
  return 0;
}

uint64_t *EC_KEY_parse_parameters(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  BOOL v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  BIGNUM *v19;
  BIGNUM *v20;
  BIGNUM *v21;
  BIGNUM *v22;
  BIGNUM *v23;
  BIGNUM *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  int8x8_t *v28;
  int v29;
  unint64_t v30;
  char v31;
  int8x8_t v32;
  int8x8_t v33;
  int8x8_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char v39;
  char v40;
  char v41;
  uint64_t *v42;
  unint64_t v43;
  int8x8_t *v44;
  int v45;
  unint64_t v46;
  char v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  char v55;
  char v56;
  char v57;
  uint64_t *v58;
  unint64_t v59;
  int8x8_t *v60;
  int v61;
  unint64_t v62;
  char v63;
  int8x8_t v64;
  int8x8_t v65;
  int8x8_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  char v71;
  char v72;
  char v73;
  uint64_t *v74;
  unint64_t v75;
  int8x8_t *v76;
  int v77;
  unint64_t v78;
  char v79;
  int8x8_t v80;
  int8x8_t v81;
  int8x8_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char v87;
  char v88;
  char v89;
  unint64_t v90;
  int8x8_t *v91;
  int v92;
  unint64_t v93;
  char v94;
  int8x8_t v95;
  int8x8_t v96;
  int8x8_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  char v102;
  char v103;
  char v104;
  unint64_t v105;
  int8x8_t *v106;
  int v107;
  unint64_t v108;
  char v109;
  int8x8_t v110;
  int8x8_t v111;
  int8x8_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  char *v116;
  char v117;
  char v118;
  char v119;
  unint64_t v120;
  int8x8_t *v121;
  int v122;
  unint64_t v123;
  char v124;
  int8x8_t v125;
  int8x8_t v126;
  int8x8_t v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  char *v131;
  char v132;
  char v133;
  char v134;
  const EC_POINT *v135;
  unint64_t v136;
  int8x8_t *v137;
  int v138;
  unint64_t v139;
  char v140;
  int8x8_t v141;
  int8x8_t v142;
  int8x8_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  char *v147;
  char v148;
  char v149;
  char v150;
  unint64_t v151;
  int8x8_t *v152;
  int v153;
  unint64_t v154;
  char v155;
  int8x8_t v156;
  int8x8_t v157;
  int8x8_t v158;
  uint64_t v159;
  unint64_t v160;
  char *v161;
  char *v162;
  char v163;
  char v164;
  char v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  unint64_t v172;
  int v173;
  _BYTE *v174;
  uint64_t v175;
  _BYTE *v176;
  uint64_t v177;
  unsigned __int8 *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unsigned __int8 *v182;
  unint64_t v183;
  int v184;
  unint64_t v185;
  int8x8_t v186;
  int8x8_t v187;
  int8x8_t v188;
  int8x8_t v189;
  int8x8_t v190;
  int8x8_t v191;
  int8x8_t v192;
  int8x8_t v193;
  int8x8_t v194;
  int8x8_t v195;
  int8x8_t v196;
  int8x8_t v197;
  int8x8_t v198;
  int8x8_t v199;

  v195 = *(int8x8_t *)MEMORY[0x24BDAC8D0];
  v1 = a1[1];
  if (!v1)
    return EC_KEY_parse_curve_name(a1);
  v2 = **a1;
  LODWORD(v3) = v2 & 0x1F;
  if ((_DWORD)v3 == 31)
  {
    v4 = 0;
    v5 = *a1 + 1;
    v6 = v1 - 1;
    while (v6)
    {
      if (v4 >> 57)
        break;
      v7 = *v5;
      if (!v4 && v7 == 128)
        break;
      v3 = v7 & 0x7F | (v4 << 7);
      ++v5;
      --v6;
      v4 = v3;
      if ((v7 & 0x80) == 0)
      {
        if (v3 - 0x20000000 < 0xFFFFFFFFE000001FLL)
          return EC_KEY_parse_curve_name(a1);
        goto LABEL_11;
      }
    }
    return EC_KEY_parse_curve_name(a1);
  }
LABEL_11:
  if ((v3 | (v2 << 24) & 0xE0000000) != 0x20000010)
    return EC_KEY_parse_curve_name(a1);
  v170 = 0u;
  v171 = 0u;
  v168 = 0u;
  v169 = 0u;
  v166 = 0u;
  v167 = 0u;
  v186 = 0;
  v187 = 0;
  v182 = 0;
  v183 = 0;
  v180 = 0;
  v181 = 0;
  v178 = 0;
  v179 = 0;
  v176 = 0;
  v177 = 0;
  v174 = 0;
  v175 = 0;
  v173 = 0;
  v172 = 0;
  v185 = 0;
  v184 = 0;
  if (!cbs_get_any_asn1_element(a1, &v186, &v184, &v185, 0, 0, 0))
    goto LABEL_15;
  if (v184 != 536870928)
    goto LABEL_15;
  if (*(_QWORD *)&v187 < v185)
    goto LABEL_15;
  *(_QWORD *)&v186 += v185;
  *(_QWORD *)&v187 -= v185;
  if (!CBS_get_asn1_uint64((unsigned __int8 **)&v186, &v172))
    goto LABEL_15;
  if (v172 != 1)
    goto LABEL_15;
  v185 = 0;
  v184 = 0;
  if (!cbs_get_any_asn1_element((unsigned __int8 **)&v186, &v182, &v184, &v185, 0, 0, 0))
    goto LABEL_15;
  if (v184 != 536870928)
    goto LABEL_15;
  if (v183 < v185)
    goto LABEL_15;
  v182 += v185;
  v183 -= v185;
  v185 = 0;
  v184 = 0;
  if (!cbs_get_any_asn1_element(&v182, &v180, &v184, &v185, 0, 0, 0))
    goto LABEL_15;
  if (v184 != 6)
    goto LABEL_15;
  v11 = v181 - v185;
  if (v181 < v185)
    goto LABEL_15;
  v12 = (int *)(v180 + v185);
  v180 += v185;
  v181 -= v185;
  if (v11 != 7)
    goto LABEL_15;
  v13 = *v12;
  v14 = *(int *)((char *)v12 + 3);
  v15 = v13 == -834107862 && v14 == 16858574;
  if (!v15
    || (v185 = 0, v184 = 0, !cbs_get_any_asn1_element(&v182, &v166, &v184, &v185, 0, 0, 0))
    || v184 != 2
    || *((_QWORD *)&v166 + 1) < v185
    || (*(_QWORD *)&v166 = v166 + v185,
        *((_QWORD *)&v166 + 1) -= v185,
        !CBS_is_unsigned_asn1_integer((unsigned __int8 **)&v166))
    || v183
    || !CBS_get_asn1((unsigned __int8 **)&v186, &v178, 536870928)
    || !CBS_get_asn1(&v178, &v167, 4)
    || !CBS_get_asn1(&v178, &v168, 4)
    || !CBS_get_optional_asn1(&v178, 0, 0, 3)
    || v179
    || !CBS_get_asn1((unsigned __int8 **)&v186, &v176, 4)
    || !CBS_get_asn1((unsigned __int8 **)&v186, &v171, 2)
    || !CBS_is_unsigned_asn1_integer((unsigned __int8 **)&v171)
    || !CBS_get_optional_asn1((unsigned __int8 **)&v186, &v174, &v173, 2)
    || *(_QWORD *)&v187)
  {
LABEL_15:
    v8 = 128;
    v9 = 288;
LABEL_16:
    ERR_put_error(15, 0, v8, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ec_extra/ec_asn1.c", v9);
    return 0;
  }
  if (v173 && (v175 != 1 || *v174 != 1))
  {
    v8 = 123;
    v9 = 296;
    goto LABEL_16;
  }
  if (!v177 || (v16 = v176, v17 = v176 + 1, v18 = v177 - 1, ++v176, --v177, *v16 != 4))
  {
    v8 = 111;
    v9 = 304;
    goto LABEL_16;
  }
  if ((v18 & 1) != 0)
  {
    v8 = 128;
    v9 = 309;
    goto LABEL_16;
  }
  *(_QWORD *)&v169 = v17;
  *((_QWORD *)&v169 + 1) = v18 >> 1;
  *(_QWORD *)&v170 = &v17[v18 >> 1];
  *((_QWORD *)&v170 + 1) = v18 >> 1;
  v19 = BN_new();
  v20 = BN_new();
  v21 = BN_new();
  v22 = BN_new();
  v23 = BN_new();
  v24 = v23;
  v25 = 0;
  if (!v19 || !v20 || !v21 || !v22 || !v23)
    goto LABEL_259;
  v26 = EC_group_p224();
  v25 = (uint64_t)v26;
  v27 = *((_QWORD *)&v171 + 1);
  v28 = (int8x8_t *)v171;
  if (*((_QWORD *)&v171 + 1))
  {
    if (*(_BYTE *)v171)
    {
LABEL_62:
      if (v27 > 0x42)
        goto LABEL_84;
    }
    else
    {
      while (--v27)
      {
        v29 = v28->u8[1];
        v28 = (int8x8_t *)((char *)v28 + 1);
        if (v29)
          goto LABEL_62;
      }
      v28 = (int8x8_t *)(v171 + *((_QWORD *)&v171 + 1));
    }
  }
  if (!BN_bn2bin_padded((char *)&v186, v27, (uint64_t)(v26 + 32)))
  {
    ERR_clear_error();
    goto LABEL_84;
  }
  if (!v27)
    goto LABEL_152;
  if (v27 < 0x10)
  {
    v30 = 0;
    v31 = 0;
LABEL_81:
    v36 = v27 - v30;
    v37 = (char *)&v186 + v30;
    v38 = (char *)v28 + v30;
    do
    {
      v40 = *v38++;
      v39 = v40;
      v41 = *v37++;
      v31 |= v41 ^ v39;
      --v36;
    }
    while (v36);
    goto LABEL_83;
  }
  v30 = v27 & 0x70;
  v32 = veor_s8(v186, *v28);
  v33 = veor_s8(v187, v28[1]);
  if (v30 != 16)
  {
    v32 = vorr_s8(veor_s8(v188, v28[2]), v32);
    v33 = vorr_s8(veor_s8(v189, v28[3]), v33);
    if (v30 != 32)
    {
      v32 = vorr_s8(veor_s8(v190, v28[4]), v32);
      v33 = vorr_s8(veor_s8(v191, v28[5]), v33);
      if (v30 != 48)
      {
        v32 = vorr_s8(veor_s8(v192, v28[6]), v32);
        v33 = vorr_s8(veor_s8(v193, v28[7]), v33);
        if (v30 != 64)
        {
          v32 = vorr_s8(veor_s8(v194, v28[8]), v32);
          v33 = vorr_s8(veor_s8(v195, v28[9]), v33);
          if (v30 != 80)
          {
            v32 = vorr_s8(veor_s8(v196, v28[10]), v32);
            v33 = vorr_s8(veor_s8(v197, v28[11]), v33);
            if (v30 != 96)
            {
              v32 = vorr_s8(veor_s8(v198, v28[12]), v32);
              v33 = vorr_s8(veor_s8(v199, v28[13]), v33);
            }
          }
        }
      }
    }
  }
  v34 = vorr_s8(v33, v32);
  v35 = *(_QWORD *)&v34 | HIDWORD(*(_QWORD *)&v34) | ((*(_QWORD *)&v34 | HIDWORD(*(_QWORD *)&v34)) >> 16);
  v31 = v35 | BYTE1(v35);
  if (v27 != v30)
    goto LABEL_81;
LABEL_83:
  if (!v31)
    goto LABEL_152;
LABEL_84:
  v42 = EC_group_p256();
  v25 = (uint64_t)v42;
  v43 = *((_QWORD *)&v171 + 1);
  v44 = (int8x8_t *)v171;
  if (*((_QWORD *)&v171 + 1))
  {
    if (*(_BYTE *)v171)
    {
LABEL_88:
      if (v43 > 0x42)
        goto LABEL_107;
    }
    else
    {
      while (--v43)
      {
        v45 = v44->u8[1];
        v44 = (int8x8_t *)((char *)v44 + 1);
        if (v45)
          goto LABEL_88;
      }
      v44 = (int8x8_t *)(v171 + *((_QWORD *)&v171 + 1));
    }
  }
  if (!BN_bn2bin_padded((char *)&v186, v43, (uint64_t)(v42 + 32)))
  {
    ERR_clear_error();
    goto LABEL_107;
  }
  if (!v43)
    goto LABEL_152;
  if (v43 < 0x10)
  {
    v46 = 0;
    v47 = 0;
LABEL_104:
    v52 = v43 - v46;
    v53 = (char *)&v186 + v46;
    v54 = (char *)v44 + v46;
    do
    {
      v56 = *v54++;
      v55 = v56;
      v57 = *v53++;
      v47 |= v57 ^ v55;
      --v52;
    }
    while (v52);
    goto LABEL_106;
  }
  v46 = v43 & 0x70;
  v48 = veor_s8(v186, *v44);
  v49 = veor_s8(v187, v44[1]);
  if (v46 != 16)
  {
    v48 = vorr_s8(veor_s8(v188, v44[2]), v48);
    v49 = vorr_s8(veor_s8(v189, v44[3]), v49);
    if (v46 != 32)
    {
      v48 = vorr_s8(veor_s8(v190, v44[4]), v48);
      v49 = vorr_s8(veor_s8(v191, v44[5]), v49);
      if (v46 != 48)
      {
        v48 = vorr_s8(veor_s8(v192, v44[6]), v48);
        v49 = vorr_s8(veor_s8(v193, v44[7]), v49);
        if (v46 != 64)
        {
          v48 = vorr_s8(veor_s8(v194, v44[8]), v48);
          v49 = vorr_s8(veor_s8(v195, v44[9]), v49);
          if (v46 != 80)
          {
            v48 = vorr_s8(veor_s8(v196, v44[10]), v48);
            v49 = vorr_s8(veor_s8(v197, v44[11]), v49);
            if (v46 != 96)
            {
              v48 = vorr_s8(veor_s8(v198, v44[12]), v48);
              v49 = vorr_s8(veor_s8(v199, v44[13]), v49);
            }
          }
        }
      }
    }
  }
  v50 = vorr_s8(v49, v48);
  v51 = *(_QWORD *)&v50 | HIDWORD(*(_QWORD *)&v50) | ((*(_QWORD *)&v50 | HIDWORD(*(_QWORD *)&v50)) >> 16);
  v47 = v51 | BYTE1(v51);
  if (v43 != v46)
    goto LABEL_104;
LABEL_106:
  if (!v47)
    goto LABEL_152;
LABEL_107:
  v58 = EC_group_p384();
  v25 = (uint64_t)v58;
  v59 = *((_QWORD *)&v171 + 1);
  v60 = (int8x8_t *)v171;
  if (*((_QWORD *)&v171 + 1))
  {
    if (*(_BYTE *)v171)
    {
LABEL_111:
      if (v59 > 0x42)
        goto LABEL_130;
    }
    else
    {
      while (--v59)
      {
        v61 = v60->u8[1];
        v60 = (int8x8_t *)((char *)v60 + 1);
        if (v61)
          goto LABEL_111;
      }
      v60 = (int8x8_t *)(v171 + *((_QWORD *)&v171 + 1));
    }
  }
  if (!BN_bn2bin_padded((char *)&v186, v59, (uint64_t)(v58 + 32)))
  {
    ERR_clear_error();
    goto LABEL_130;
  }
  if (!v59)
    goto LABEL_152;
  if (v59 < 0x10)
  {
    v62 = 0;
    v63 = 0;
LABEL_127:
    v68 = v59 - v62;
    v69 = (char *)&v186 + v62;
    v70 = (char *)v60 + v62;
    do
    {
      v72 = *v70++;
      v71 = v72;
      v73 = *v69++;
      v63 |= v73 ^ v71;
      --v68;
    }
    while (v68);
    goto LABEL_129;
  }
  v62 = v59 & 0x70;
  v64 = veor_s8(v186, *v60);
  v65 = veor_s8(v187, v60[1]);
  if (v62 != 16)
  {
    v64 = vorr_s8(veor_s8(v188, v60[2]), v64);
    v65 = vorr_s8(veor_s8(v189, v60[3]), v65);
    if (v62 != 32)
    {
      v64 = vorr_s8(veor_s8(v190, v60[4]), v64);
      v65 = vorr_s8(veor_s8(v191, v60[5]), v65);
      if (v62 != 48)
      {
        v64 = vorr_s8(veor_s8(v192, v60[6]), v64);
        v65 = vorr_s8(veor_s8(v193, v60[7]), v65);
        if (v62 != 64)
        {
          v64 = vorr_s8(veor_s8(v194, v60[8]), v64);
          v65 = vorr_s8(veor_s8(v195, v60[9]), v65);
          if (v62 != 80)
          {
            v64 = vorr_s8(veor_s8(v196, v60[10]), v64);
            v65 = vorr_s8(veor_s8(v197, v60[11]), v65);
            if (v62 != 96)
            {
              v64 = vorr_s8(veor_s8(v198, v60[12]), v64);
              v65 = vorr_s8(veor_s8(v199, v60[13]), v65);
            }
          }
        }
      }
    }
  }
  v66 = vorr_s8(v65, v64);
  v67 = *(_QWORD *)&v66 | HIDWORD(*(_QWORD *)&v66) | ((*(_QWORD *)&v66 | HIDWORD(*(_QWORD *)&v66)) >> 16);
  v63 = v67 | BYTE1(v67);
  if (v59 != v62)
    goto LABEL_127;
LABEL_129:
  if (!v63)
    goto LABEL_152;
LABEL_130:
  v74 = EC_group_p521();
  v25 = (uint64_t)v74;
  v75 = *((_QWORD *)&v171 + 1);
  v76 = (int8x8_t *)v171;
  if (*((_QWORD *)&v171 + 1))
  {
    if (*(_BYTE *)v171)
    {
LABEL_134:
      if (v75 > 0x42)
        goto LABEL_257;
    }
    else
    {
      while (--v75)
      {
        v77 = v76->u8[1];
        v76 = (int8x8_t *)((char *)v76 + 1);
        if (v77)
          goto LABEL_134;
      }
      v76 = (int8x8_t *)(v171 + *((_QWORD *)&v171 + 1));
    }
  }
  if (!BN_bn2bin_padded((char *)&v186, v75, (uint64_t)(v74 + 32)))
    goto LABEL_256;
  if (!v75)
    goto LABEL_152;
  if (v75 < 0x10)
  {
    v78 = 0;
    v79 = 0;
LABEL_149:
    v84 = v75 - v78;
    v85 = (char *)&v186 + v78;
    v86 = (char *)v76 + v78;
    do
    {
      v88 = *v86++;
      v87 = v88;
      v89 = *v85++;
      v79 |= v89 ^ v87;
      --v84;
    }
    while (v84);
    goto LABEL_151;
  }
  v78 = v75 & 0x70;
  v80 = veor_s8(v186, *v76);
  v81 = veor_s8(v187, v76[1]);
  if (v78 != 16)
  {
    v80 = vorr_s8(veor_s8(v188, v76[2]), v80);
    v81 = vorr_s8(veor_s8(v189, v76[3]), v81);
    if (v78 != 32)
    {
      v80 = vorr_s8(veor_s8(v190, v76[4]), v80);
      v81 = vorr_s8(veor_s8(v191, v76[5]), v81);
      if (v78 != 48)
      {
        v80 = vorr_s8(veor_s8(v192, v76[6]), v80);
        v81 = vorr_s8(veor_s8(v193, v76[7]), v81);
        if (v78 != 64)
        {
          v80 = vorr_s8(veor_s8(v194, v76[8]), v80);
          v81 = vorr_s8(veor_s8(v195, v76[9]), v81);
          if (v78 != 80)
          {
            v80 = vorr_s8(veor_s8(v196, v76[10]), v80);
            v81 = vorr_s8(veor_s8(v197, v76[11]), v81);
            if (v78 != 96)
            {
              v80 = vorr_s8(veor_s8(v198, v76[12]), v80);
              v81 = vorr_s8(veor_s8(v199, v76[13]), v81);
            }
          }
        }
      }
    }
  }
  v82 = vorr_s8(v81, v80);
  v83 = *(_QWORD *)&v82 | HIDWORD(*(_QWORD *)&v82) | ((*(_QWORD *)&v82 | HIDWORD(*(_QWORD *)&v82)) >> 16);
  v79 = v83 | BYTE1(v83);
  if (v75 != v78)
    goto LABEL_149;
LABEL_151:
  if (v79)
    goto LABEL_257;
LABEL_152:
  if (!ec_GFp_simple_group_get_curve(v25, (uint64_t)v19, v20, v21))
  {
LABEL_258:
    v25 = 0;
    goto LABEL_259;
  }
  v90 = *((_QWORD *)&v166 + 1);
  v91 = (int8x8_t *)v166;
  if (*((_QWORD *)&v166 + 1))
  {
    if (*(_BYTE *)v166)
    {
LABEL_157:
      if (v90 > 0x42)
        goto LABEL_257;
    }
    else
    {
      while (--v90)
      {
        v92 = v91->u8[1];
        v91 = (int8x8_t *)((char *)v91 + 1);
        if (v92)
          goto LABEL_157;
      }
      v91 = (int8x8_t *)(v166 + *((_QWORD *)&v166 + 1));
    }
  }
  if (!BN_bn2bin_padded((char *)&v186, v90, (uint64_t)v19))
    goto LABEL_256;
  if (!v90)
    goto LABEL_175;
  if (v90 < 0x10)
  {
    v93 = 0;
    v94 = 0;
LABEL_172:
    v99 = v90 - v93;
    v100 = (char *)&v186 + v93;
    v101 = (char *)v91 + v93;
    do
    {
      v103 = *v101++;
      v102 = v103;
      v104 = *v100++;
      v94 |= v104 ^ v102;
      --v99;
    }
    while (v99);
    goto LABEL_174;
  }
  v93 = v90 & 0x70;
  v95 = veor_s8(v186, *v91);
  v96 = veor_s8(v187, v91[1]);
  if (v93 != 16)
  {
    v95 = vorr_s8(veor_s8(v188, v91[2]), v95);
    v96 = vorr_s8(veor_s8(v189, v91[3]), v96);
    if (v93 != 32)
    {
      v95 = vorr_s8(veor_s8(v190, v91[4]), v95);
      v96 = vorr_s8(veor_s8(v191, v91[5]), v96);
      if (v93 != 48)
      {
        v95 = vorr_s8(veor_s8(v192, v91[6]), v95);
        v96 = vorr_s8(veor_s8(v193, v91[7]), v96);
        if (v93 != 64)
        {
          v95 = vorr_s8(veor_s8(v194, v91[8]), v95);
          v96 = vorr_s8(veor_s8(v195, v91[9]), v96);
          if (v93 != 80)
          {
            v95 = vorr_s8(veor_s8(v196, v91[10]), v95);
            v96 = vorr_s8(veor_s8(v197, v91[11]), v96);
            if (v93 != 96)
            {
              v95 = vorr_s8(veor_s8(v198, v91[12]), v95);
              v96 = vorr_s8(veor_s8(v199, v91[13]), v96);
            }
          }
        }
      }
    }
  }
  v97 = vorr_s8(v96, v95);
  v98 = *(_QWORD *)&v97 | HIDWORD(*(_QWORD *)&v97) | ((*(_QWORD *)&v97 | HIDWORD(*(_QWORD *)&v97)) >> 16);
  v94 = v98 | BYTE1(v98);
  if (v90 != v93)
    goto LABEL_172;
LABEL_174:
  if (v94)
    goto LABEL_257;
LABEL_175:
  v105 = *((_QWORD *)&v167 + 1);
  v106 = (int8x8_t *)v167;
  if (*((_QWORD *)&v167 + 1))
  {
    if (*(_BYTE *)v167)
    {
LABEL_179:
      if (v105 > 0x42)
        goto LABEL_257;
    }
    else
    {
      while (--v105)
      {
        v107 = v106->u8[1];
        v106 = (int8x8_t *)((char *)v106 + 1);
        if (v107)
          goto LABEL_179;
      }
      v106 = (int8x8_t *)(v167 + *((_QWORD *)&v167 + 1));
    }
  }
  if (!BN_bn2bin_padded((char *)&v186, v105, (uint64_t)v20))
    goto LABEL_256;
  if (!v105)
    goto LABEL_197;
  if (v105 < 0x10)
  {
    v108 = 0;
    v109 = 0;
LABEL_194:
    v114 = v105 - v108;
    v115 = (char *)&v186 + v108;
    v116 = (char *)v106 + v108;
    do
    {
      v118 = *v116++;
      v117 = v118;
      v119 = *v115++;
      v109 |= v119 ^ v117;
      --v114;
    }
    while (v114);
    goto LABEL_196;
  }
  v108 = v105 & 0x70;
  v110 = veor_s8(v186, *v106);
  v111 = veor_s8(v187, v106[1]);
  if (v108 != 16)
  {
    v110 = vorr_s8(veor_s8(v188, v106[2]), v110);
    v111 = vorr_s8(veor_s8(v189, v106[3]), v111);
    if (v108 != 32)
    {
      v110 = vorr_s8(veor_s8(v190, v106[4]), v110);
      v111 = vorr_s8(veor_s8(v191, v106[5]), v111);
      if (v108 != 48)
      {
        v110 = vorr_s8(veor_s8(v192, v106[6]), v110);
        v111 = vorr_s8(veor_s8(v193, v106[7]), v111);
        if (v108 != 64)
        {
          v110 = vorr_s8(veor_s8(v194, v106[8]), v110);
          v111 = vorr_s8(veor_s8(v195, v106[9]), v111);
          if (v108 != 80)
          {
            v110 = vorr_s8(veor_s8(v196, v106[10]), v110);
            v111 = vorr_s8(veor_s8(v197, v106[11]), v111);
            if (v108 != 96)
            {
              v110 = vorr_s8(veor_s8(v198, v106[12]), v110);
              v111 = vorr_s8(veor_s8(v199, v106[13]), v111);
            }
          }
        }
      }
    }
  }
  v112 = vorr_s8(v111, v110);
  v113 = *(_QWORD *)&v112 | HIDWORD(*(_QWORD *)&v112) | ((*(_QWORD *)&v112 | HIDWORD(*(_QWORD *)&v112)) >> 16);
  v109 = v113 | BYTE1(v113);
  if (v105 != v108)
    goto LABEL_194;
LABEL_196:
  if (v109)
    goto LABEL_257;
LABEL_197:
  v120 = *((_QWORD *)&v168 + 1);
  v121 = (int8x8_t *)v168;
  if (*((_QWORD *)&v168 + 1))
  {
    if (*(_BYTE *)v168)
    {
LABEL_201:
      if (v120 > 0x42)
        goto LABEL_257;
    }
    else
    {
      while (--v120)
      {
        v122 = v121->u8[1];
        v121 = (int8x8_t *)((char *)v121 + 1);
        if (v122)
          goto LABEL_201;
      }
      v121 = (int8x8_t *)(v168 + *((_QWORD *)&v168 + 1));
    }
  }
  if (!BN_bn2bin_padded((char *)&v186, v120, (uint64_t)v21))
    goto LABEL_256;
  if (v120)
  {
    if (v120 >= 0x10)
    {
      v123 = v120 & 0x70;
      v125 = veor_s8(v186, *v121);
      v126 = veor_s8(v187, v121[1]);
      if (v123 != 16)
      {
        v125 = vorr_s8(veor_s8(v188, v121[2]), v125);
        v126 = vorr_s8(veor_s8(v189, v121[3]), v126);
        if (v123 != 32)
        {
          v125 = vorr_s8(veor_s8(v190, v121[4]), v125);
          v126 = vorr_s8(veor_s8(v191, v121[5]), v126);
          if (v123 != 48)
          {
            v125 = vorr_s8(veor_s8(v192, v121[6]), v125);
            v126 = vorr_s8(veor_s8(v193, v121[7]), v126);
            if (v123 != 64)
            {
              v125 = vorr_s8(veor_s8(v194, v121[8]), v125);
              v126 = vorr_s8(veor_s8(v195, v121[9]), v126);
              if (v123 != 80)
              {
                v125 = vorr_s8(veor_s8(v196, v121[10]), v125);
                v126 = vorr_s8(veor_s8(v197, v121[11]), v126);
                if (v123 != 96)
                {
                  v125 = vorr_s8(veor_s8(v198, v121[12]), v125);
                  v126 = vorr_s8(veor_s8(v199, v121[13]), v126);
                }
              }
            }
          }
        }
      }
      v127 = vorr_s8(v126, v125);
      v128 = *(_QWORD *)&v127 | HIDWORD(*(_QWORD *)&v127) | ((*(_QWORD *)&v127 | HIDWORD(*(_QWORD *)&v127)) >> 16);
      v124 = v128 | BYTE1(v128);
      if (v120 == v123)
      {
LABEL_218:
        if (!v124)
          goto LABEL_219;
LABEL_257:
        ERR_put_error(15, 0, 123, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ec_extra/ec_asn1.c", 422);
        goto LABEL_258;
      }
    }
    else
    {
      v123 = 0;
      v124 = 0;
    }
    v129 = v120 - v123;
    v130 = (char *)&v186 + v123;
    v131 = (char *)v121 + v123;
    do
    {
      v133 = *v131++;
      v132 = v133;
      v134 = *v130++;
      v124 |= v134 ^ v132;
      --v129;
    }
    while (v129);
    goto LABEL_218;
  }
LABEL_219:
  if (*(_DWORD *)(v25 + 532))
    v135 = (const EC_POINT *)(v25 + 8);
  else
    v135 = 0;
  if (!EC_POINT_get_affine_coordinates_GFp((const EC_GROUP *)v25, v135, v22, v24, 0))
    goto LABEL_258;
  v136 = *((_QWORD *)&v169 + 1);
  v137 = (int8x8_t *)v169;
  if (*((_QWORD *)&v169 + 1))
  {
    if (*(_BYTE *)v169)
    {
LABEL_227:
      if (v136 > 0x42)
        goto LABEL_257;
    }
    else
    {
      while (--v136)
      {
        v138 = v137->u8[1];
        v137 = (int8x8_t *)((char *)v137 + 1);
        if (v138)
          goto LABEL_227;
      }
      v137 = (int8x8_t *)(v169 + *((_QWORD *)&v169 + 1));
    }
  }
  if (!BN_bn2bin_padded((char *)&v186, v136, (uint64_t)v22))
    goto LABEL_256;
  if (!v136)
    goto LABEL_245;
  if (v136 < 0x10)
  {
    v139 = 0;
    v140 = 0;
LABEL_242:
    v145 = v136 - v139;
    v146 = (char *)&v186 + v139;
    v147 = (char *)v137 + v139;
    do
    {
      v149 = *v147++;
      v148 = v149;
      v150 = *v146++;
      v140 |= v150 ^ v148;
      --v145;
    }
    while (v145);
    goto LABEL_244;
  }
  v139 = v136 & 0x70;
  v141 = veor_s8(v186, *v137);
  v142 = veor_s8(v187, v137[1]);
  if (v139 != 16)
  {
    v141 = vorr_s8(veor_s8(v188, v137[2]), v141);
    v142 = vorr_s8(veor_s8(v189, v137[3]), v142);
    if (v139 != 32)
    {
      v141 = vorr_s8(veor_s8(v190, v137[4]), v141);
      v142 = vorr_s8(veor_s8(v191, v137[5]), v142);
      if (v139 != 48)
      {
        v141 = vorr_s8(veor_s8(v192, v137[6]), v141);
        v142 = vorr_s8(veor_s8(v193, v137[7]), v142);
        if (v139 != 64)
        {
          v141 = vorr_s8(veor_s8(v194, v137[8]), v141);
          v142 = vorr_s8(veor_s8(v195, v137[9]), v142);
          if (v139 != 80)
          {
            v141 = vorr_s8(veor_s8(v196, v137[10]), v141);
            v142 = vorr_s8(veor_s8(v197, v137[11]), v142);
            if (v139 != 96)
            {
              v141 = vorr_s8(veor_s8(v198, v137[12]), v141);
              v142 = vorr_s8(veor_s8(v199, v137[13]), v142);
            }
          }
        }
      }
    }
  }
  v143 = vorr_s8(v142, v141);
  v144 = *(_QWORD *)&v143 | HIDWORD(*(_QWORD *)&v143) | ((*(_QWORD *)&v143 | HIDWORD(*(_QWORD *)&v143)) >> 16);
  v140 = v144 | BYTE1(v144);
  if (v136 != v139)
    goto LABEL_242;
LABEL_244:
  if (v140)
    goto LABEL_257;
LABEL_245:
  v151 = *((_QWORD *)&v170 + 1);
  v152 = (int8x8_t *)v170;
  if (*((_QWORD *)&v170 + 1))
  {
    if (*(_BYTE *)v170)
    {
LABEL_249:
      if (v151 > 0x42)
        goto LABEL_257;
    }
    else
    {
      while (--v151)
      {
        v153 = v152->u8[1];
        v152 = (int8x8_t *)((char *)v152 + 1);
        if (v153)
          goto LABEL_249;
      }
      v152 = (int8x8_t *)(v170 + *((_QWORD *)&v170 + 1));
    }
  }
  if (!BN_bn2bin_padded((char *)&v186, v151, (uint64_t)v24))
  {
LABEL_256:
    ERR_clear_error();
    goto LABEL_257;
  }
  if (v151)
  {
    if (v151 >= 0x10)
    {
      v154 = v151 & 0x70;
      v156 = veor_s8(v186, *v152);
      v157 = veor_s8(v187, v152[1]);
      if (v154 != 16)
      {
        v156 = vorr_s8(veor_s8(v188, v152[2]), v156);
        v157 = vorr_s8(veor_s8(v189, v152[3]), v157);
        if (v154 != 32)
        {
          v156 = vorr_s8(veor_s8(v190, v152[4]), v156);
          v157 = vorr_s8(veor_s8(v191, v152[5]), v157);
          if (v154 != 48)
          {
            v156 = vorr_s8(veor_s8(v192, v152[6]), v156);
            v157 = vorr_s8(veor_s8(v193, v152[7]), v157);
            if (v154 != 64)
            {
              v156 = vorr_s8(veor_s8(v194, v152[8]), v156);
              v157 = vorr_s8(veor_s8(v195, v152[9]), v157);
              if (v154 != 80)
              {
                v156 = vorr_s8(veor_s8(v196, v152[10]), v156);
                v157 = vorr_s8(veor_s8(v197, v152[11]), v157);
                if (v154 != 96)
                {
                  v156 = vorr_s8(veor_s8(v198, v152[12]), v156);
                  v157 = vorr_s8(veor_s8(v199, v152[13]), v157);
                }
              }
            }
          }
        }
      }
      v158 = vorr_s8(v157, v156);
      v159 = *(_QWORD *)&v158 | HIDWORD(*(_QWORD *)&v158) | ((*(_QWORD *)&v158 | HIDWORD(*(_QWORD *)&v158)) >> 16);
      v155 = v159 | BYTE1(v159);
      if (v151 == v154)
      {
LABEL_270:
        if (!v155)
          goto LABEL_259;
        goto LABEL_257;
      }
    }
    else
    {
      v154 = 0;
      v155 = 0;
    }
    v160 = v151 - v154;
    v161 = (char *)&v186 + v154;
    v162 = (char *)v152 + v154;
    do
    {
      v164 = *v162++;
      v163 = v164;
      v165 = *v161++;
      v155 |= v165 ^ v163;
      --v160;
    }
    while (v160);
    goto LABEL_270;
  }
LABEL_259:
  BN_free(v19);
  BN_free(v20);
  BN_free(v21);
  BN_free(v22);
  BN_free(v24);
  return (uint64_t *)v25;
}

uint64_t EC_KEY_marshal_private_key(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  char *v27;
  int8x16_t *v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;
  int8x16_t *v34;
  int8x16_t v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  unint64_t v39;
  int8x8_t v40;
  unint64_t v41;
  int8x8_t *v42;
  int8x8_t v43;
  uint64_t v44;
  unint64_t v45;
  __int8 *v46;
  char v47;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __int8 *v54;
  char v55;
  int8x16_t *v56;
  int8x16_t *v57;
  uint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  uint64_t v62;
  int8x8_t *v63;
  int8x8_t *v64;
  uint64_t v65;
  int8x8_t v66;
  _OWORD v67[3];
  void *v68[2];
  __int128 v69;
  __int128 v70;
  _OWORD v71[3];
  _OWORD v72[3];
  _BYTE *v73;

  if (!a2 || !*a2 || !a2[2])
  {
    v14 = 67;
    v15 = 202;
LABEL_52:
    ERR_put_error(15, 0, v14, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ec_extra/ec_asn1.c", v15);
    return 0;
  }
  memset(v72, 0, sizeof(v72));
  memset(v71, 0, sizeof(v71));
  if (!CBB_flush(a1))
    goto LABEL_51;
  v68[0] = 0;
  if (!CBB_add_space((uint64_t)a1, v68, 1))
    goto LABEL_51;
  *(_BYTE *)v68[0] = 48;
  if (!cbb_add_child((uint64_t)a1, (uint64_t)v72, 1u, 1))
    goto LABEL_51;
  if (!CBB_add_asn1_uint64_with_tag((uint64_t)v72, 1uLL, 2))
    goto LABEL_51;
  if (!CBB_flush((uint64_t *)v72))
    goto LABEL_51;
  v68[0] = 0;
  if (!CBB_add_space((uint64_t)v72, v68, 1))
    goto LABEL_51;
  *(_BYTE *)v68[0] = 4;
  if (!cbb_add_child((uint64_t)v72, (uint64_t)v71, 1u, 1))
    goto LABEL_51;
  v6 = *a2;
  v7 = *(unsigned int *)(*a2 + 264);
  v8 = v7 & ((int)v7 >> 31);
  v9 = 8 * v7 - 8;
  v10 = *(_DWORD *)(*a2 + 264);
  while (1)
  {
    v11 = __OFSUB__(v10--, 1);
    if (v10 < 0 != v11)
      break;
    v12 = *(_QWORD *)(v6 + 256);
    v13 = *(_QWORD *)(v12 + v9);
    v9 -= 8;
    if (v13)
    {
      v8 = v10 + 1;
      goto LABEL_19;
    }
  }
  if ((v7 & 0x80000000) == 0)
  {
    v16 = 0;
    goto LABEL_32;
  }
  v12 = *(_QWORD *)(v6 + 256);
LABEL_19:
  v17 = v8 - 1;
  v18 = *(_QWORD *)(v12 + 8 * v17);
  v19 = v18 != 0;
  v20 = HIDWORD(v18) != 0;
  if (HIDWORD(v18))
    v18 >>= 32;
  v21 = v18 >> 16 != 0;
  if (v18 >> 16)
    v18 >>= 16;
  v22 = v18 > 0xFF;
  if (v18 > 0xFF)
    v18 >>= 8;
  v23 = v18 > 0xF;
  if (v18 > 0xF)
    v18 >>= 4;
  v24 = v18 > 3;
  if (v18 > 3)
    v18 >>= 2;
  v25 = v19 | (v17 << 6) | (32 * v20) | (16 * v21) | (8 * v22) | (4 * v23) | (2 * v24);
  if (v18 > 1)
    ++v25;
  v16 = (v25 + 7) >> 3;
LABEL_32:
  v26 = a2[2];
  v68[0] = 0;
  if (!CBB_add_space((uint64_t)v71, v68, v16))
  {
LABEL_51:
    v14 = 129;
    v15 = 213;
    goto LABEL_52;
  }
  v27 = (char *)v68[0];
  v28 = *(int8x16_t **)v26;
  v29 = 8 * *(int *)(v26 + 8);
  v30 = v29 - v16;
  if (v29 > v16)
  {
    if (v30 < 8)
    {
      v31 = 0;
      v32 = v16;
      goto LABEL_47;
    }
    if (v30 >= 0x20)
    {
      v33 = v30 & 0xFFFFFFFFFFFFFFE0;
      v34 = (int8x16_t *)((char *)v28 + v16 + 16);
      v35 = 0uLL;
      v36 = v30 & 0xFFFFFFFFFFFFFFE0;
      v37 = 0uLL;
      do
      {
        v35 = vorrq_s8(v34[-1], v35);
        v37 = vorrq_s8(*v34, v37);
        v34 += 2;
        v36 -= 32;
      }
      while (v36);
      v38 = vorrq_s8(v37, v35);
      *(int8x8_t *)v38.i8 = vorr_s8(*(int8x8_t *)v38.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL));
      v39 = v38.i64[0] | HIDWORD(v38.i64[0]) | ((unint64_t)(v38.i64[0] | HIDWORD(v38.i64[0])) >> 16);
      v31 = v39 | BYTE1(v39);
      if (v30 == v33)
        goto LABEL_50;
      if ((v30 & 0x18) == 0)
      {
        v32 = v16 + v33;
LABEL_47:
        v45 = v32 - v29;
        v46 = &v28->i8[v32];
        do
        {
          v47 = *v46++;
          v31 |= v47;
        }
        while (!__CFADD__(v45++, 1));
        goto LABEL_50;
      }
    }
    else
    {
      v31 = 0;
      v33 = 0;
    }
    v32 = v16 + (v30 & 0xFFFFFFFFFFFFFFF8);
    v40 = (int8x8_t)v31;
    v41 = v33 - (v30 & 0xFFFFFFFFFFFFFFF8);
    v42 = (int8x8_t *)&v28->i8[v16 + v33];
    do
    {
      v43 = *v42++;
      v40 = vorr_s8(v43, v40);
      v41 += 8;
    }
    while (v41);
    v44 = *(_QWORD *)&v40 | HIDWORD(*(_QWORD *)&v40) | ((*(_QWORD *)&v40 | HIDWORD(*(_QWORD *)&v40)) >> 16);
    v31 = v44 | BYTE1(v44);
    if (v30 != (v30 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_47;
LABEL_50:
    if (v31)
      goto LABEL_51;
  }
  if (v29 >= v16)
    v50 = v16;
  else
    v50 = 8 * *(int *)(v26 + 8);
  if (!v50)
    goto LABEL_63;
  if (v50 < 8 || (char *)v68[0] + v16 - v50 < &v28->i8[v50] && v28 < (int8x16_t *)((char *)v68[0] + v16))
  {
    v51 = 0;
    goto LABEL_61;
  }
  if (v50 >= 0x20)
  {
    v51 = v50 & 0xFFFFFFE0;
    v56 = v28 + 1;
    v57 = (int8x16_t *)((char *)v68[0] + v16 - 16);
    v58 = v51;
    do
    {
      v59 = vrev64q_s8(v56[-1]);
      v60 = vextq_s8(v59, v59, 8uLL);
      v61 = vrev64q_s8(*v56);
      v57[-1] = vextq_s8(v61, v61, 8uLL);
      *v57 = v60;
      v56 += 2;
      v57 -= 2;
      v58 -= 32;
    }
    while (v58);
    if (v50 == v51)
      goto LABEL_63;
    if ((v50 & 0x18) == 0)
    {
LABEL_61:
      v52 = v50 - v51;
      v53 = &v27[v16 + ~v51];
      v54 = &v28->i8[v51];
      do
      {
        v55 = *v54++;
        *v53-- = v55;
        --v52;
      }
      while (v52);
      goto LABEL_63;
    }
  }
  else
  {
    v51 = 0;
  }
  v62 = v51;
  v51 = v50 & 0xFFFFFFF8;
  v63 = (int8x8_t *)&v28->i8[v62];
  v64 = (int8x8_t *)&v27[v16 - v62 - 8];
  v65 = v62 - v51;
  do
  {
    v66 = *v63++;
    *v64-- = vrev64_s8(v66);
    v65 += 8;
  }
  while (v65);
  if (v50 != v51)
    goto LABEL_61;
LABEL_63:
  if (v29 < v16)
    bzero(v27, v16 - v50);
  if ((a3 & 1) == 0)
  {
    v69 = 0u;
    v70 = 0u;
    *(_OWORD *)v68 = 0u;
    if (!CBB_add_asn1((uint64_t *)v72, (uint64_t)v68, -1610612736)
      || !EC_KEY_marshal_curve_name((uint64_t *)v68, *a2)
      || !CBB_flush((uint64_t *)v72))
    {
      v14 = 129;
      v15 = 222;
      goto LABEL_52;
    }
  }
  if ((a3 & 2) == 0)
  {
    if (a2[1])
    {
      v69 = 0u;
      v70 = 0u;
      *(_OWORD *)v68 = 0u;
      memset(v67, 0, sizeof(v67));
      if (!CBB_add_asn1((uint64_t *)v72, (uint64_t)v68, -1610612735)
        || !CBB_add_asn1((uint64_t *)v68, (uint64_t)v67, 3)
        || (v73 = 0, !CBB_add_space((uint64_t)v67, &v73, 1))
        || (*v73 = 0,
            !EC_POINT_point2cbb((uint64_t)v67, (EC_GROUP *)*a2, (EC_POINT *)a2[1], (point_conversion_form_t)*((_DWORD *)a2 + 7), 0))|| !CBB_flush((uint64_t *)v72))
      {
        v14 = 129;
        v15 = 238;
        goto LABEL_52;
      }
    }
  }
  if (!CBB_flush(a1))
  {
    v14 = 129;
    v15 = 244;
    goto LABEL_52;
  }
  return 1;
}

uint64_t EC_KEY_marshal_curve_name(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  size_t v5;
  _OWORD v6[3];
  _BYTE *v7;

  if (*(_BYTE *)(a2 + 525))
  {
    memset(v6, 0, sizeof(v6));
    result = CBB_flush(a1);
    if ((_DWORD)result)
    {
      v7 = 0;
      result = CBB_add_space((uint64_t)a1, &v7, 1);
      if ((_DWORD)result)
      {
        *v7 = 6;
        result = cbb_add_child((uint64_t)a1, (uint64_t)v6, 1u, 1);
        if ((_DWORD)result)
        {
          v5 = *(unsigned __int8 *)(a2 + 525);
          v7 = 0;
          result = CBB_add_space((uint64_t)v6, &v7, v5);
          if ((_DWORD)result)
          {
            if ((_DWORD)v5)
              memcpy(v7, (const void *)(a2 + 516), v5);
            return CBB_flush(a1) != 0;
          }
        }
      }
    }
  }
  else
  {
    ERR_put_error(15, 0, 123, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ec_extra/ec_asn1.c", 363);
    return 0;
  }
  return result;
}

uint64_t EC_POINT_point2cbb(uint64_t a1, EC_GROUP *a2, EC_POINT *a3, point_conversion_form_t form, BN_CTX *a5)
{
  uint64_t result;
  size_t v11;
  unsigned __int8 *buf;

  result = EC_POINT_point2oct(a2, a3, form, 0, 0, a5);
  if (result)
  {
    v11 = result;
    buf = 0;
    result = CBB_add_space(a1, &buf, result);
    if ((_DWORD)result)
      return EC_POINT_point2oct(a2, a3, form, buf, v11, a5) == v11;
  }
  return result;
}

uint64_t *EC_KEY_parse_curve_name(unsigned __int8 **a1)
{
  int v1;
  int v2;
  uint64_t *result;
  uint64_t v4;
  unsigned __int8 v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  unint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  int8x8_t *v12;
  int8x8_t *v13;
  uint64_t v14;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  __int8 *v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  unsigned __int8 v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  unint64_t v30;
  uint64_t v31;
  int8x8_t v32;
  int8x8_t *v33;
  int8x8_t *v34;
  uint64_t v35;
  int8x8_t v36;
  int8x8_t v37;
  int8x8_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  __int8 *v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  unsigned __int8 v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  unint64_t v51;
  uint64_t v52;
  int8x8_t v53;
  int8x8_t *v54;
  int8x8_t *v55;
  uint64_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __int8 *v63;
  char v64;
  char v65;
  char v66;
  uint64_t v67;
  unsigned __int8 v68;
  int8x16_t v69;
  int8x16_t v70;
  int8x16_t v71;
  unint64_t v72;
  uint64_t v73;
  int8x8_t v74;
  int8x8_t *v75;
  int8x8_t *v76;
  uint64_t v77;
  int8x8_t v78;
  int8x8_t v79;
  int8x8_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  __int8 *v84;
  char v85;
  char v86;
  char v87;
  int8x16_t *v88;
  unint64_t v89;
  int v90;
  unint64_t v91;

  v88 = 0;
  v89 = 0;
  v91 = 0;
  v90 = 0;
  if (!cbs_get_any_asn1_element(a1, &v88, &v90, &v91, 0, 0, 0) || v90 != 6 || v89 < v91)
  {
    v1 = 128;
    v2 = 345;
LABEL_5:
    ERR_put_error(15, 0, v1, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ec_extra/ec_asn1.c", v2);
    return 0;
  }
  v88 = (int8x16_t *)((char *)v88 + v91);
  v89 -= v91;
  if (pthread_once(&EC_group_p224_once, (void (*)(void))EC_group_p224_init))
LABEL_100:
    abort();
  if (v89 == byte_254572C55)
  {
    result = EC_group_p224_storage;
    if (!byte_254572C55)
      return result;
    if (byte_254572C55 < 8u)
    {
      v4 = 0;
      v5 = 0;
      goto LABEL_26;
    }
    if (byte_254572C55 >= 0x20u)
    {
      v4 = byte_254572C55 & 0xE0;
      v6 = veorq_s8(*(int8x16_t *)&byte_254572C4C, *v88);
      v7 = veorq_s8(*(int8x16_t *)&qword_254572C5C, v88[1]);
      if (v4 != 32)
      {
        v6 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)EC_group_p256_storage + 4), v88[2]), v6);
        v7 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&xmmword_254572C78 + 4), v88[3]), v7);
        if (v4 != 64)
        {
          v6 = vorrq_s8(veorq_s8((int8x16_t)xmmword_254572C8C, v88[4]), v6);
          v7 = vorrq_s8(veorq_s8(unk_254572C9C, v88[5]), v7);
          if (v4 != 96)
          {
            v6 = vorrq_s8(veorq_s8((int8x16_t)xmmword_254572CAC, v88[6]), v6);
            v7 = vorrq_s8(veorq_s8(unk_254572CBC, v88[7]), v7);
            if (v4 != 128)
            {
              v6 = vorrq_s8(veorq_s8((int8x16_t)xmmword_254572CCC, v88[8]), v6);
              v7 = vorrq_s8(veorq_s8(unk_254572CDC, v88[9]), v7);
              if (v4 != 160)
              {
                v6 = vorrq_s8(veorq_s8((int8x16_t)xmmword_254572CEC, v88[10]), v6);
                v7 = vorrq_s8(veorq_s8(unk_254572CFC, v88[11]), v7);
                if (v4 != 192)
                {
                  v6 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&xmmword_254572D08 + 4), v88[12]), v6);
                  v7 = vorrq_s8(veorq_s8(unk_254572D1C, v88[13]), v7);
                }
              }
            }
          }
        }
      }
      v8 = vorrq_s8(v7, v6);
      *(int8x8_t *)v8.i8 = vorr_s8(*(int8x8_t *)v8.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL));
      v9 = v8.i64[0] | HIDWORD(v8.i64[0]) | ((unint64_t)(v8.i64[0] | HIDWORD(v8.i64[0])) >> 16);
      v5 = v9 | BYTE1(v9);
      if (v4 == byte_254572C55)
        goto LABEL_28;
      if ((byte_254572C55 & 0x18) == 0)
      {
LABEL_26:
        v19 = byte_254572C55 - v4;
        v20 = (char *)&EC_group_p224_storage[64] + v4 + 4;
        v21 = &v88->i8[v4];
        do
        {
          v23 = *v21++;
          v22 = v23;
          v24 = *v20++;
          v5 |= v24 ^ v22;
          --v19;
        }
        while (v19);
        goto LABEL_28;
      }
    }
    else
    {
      v5 = 0;
      v4 = 0;
    }
    v10 = v4;
    v4 = byte_254572C55 & 0xF8;
    v11 = (int8x8_t)v5;
    v12 = (int8x8_t *)&v88->i8[v10];
    v13 = (int8x8_t *)((char *)&EC_group_p224_storage[64] + v10 + 4);
    v14 = v10 - v4;
    do
    {
      v15 = *v12++;
      v16 = v15;
      v17 = *v13++;
      v11 = vorr_s8(veor_s8(v17, v16), v11);
      v14 += 8;
    }
    while (v14);
    v18 = *(_QWORD *)&v11 | HIDWORD(*(_QWORD *)&v11) | ((*(_QWORD *)&v11 | HIDWORD(*(_QWORD *)&v11)) >> 16);
    v5 = v18 | BYTE1(v18);
    if (v4 != byte_254572C55)
      goto LABEL_26;
LABEL_28:
    if (!v5)
      return EC_group_p224_storage;
  }
  if (pthread_once(&EC_group_p256_once, (void (*)(void))EC_group_p256_init))
    goto LABEL_100;
  if (v89 == BYTE9(xmmword_254572E6C))
  {
    result = EC_group_p256_storage;
    if (!BYTE9(xmmword_254572E6C))
      return result;
    if (BYTE9(xmmword_254572E6C) < 8u)
    {
      v25 = 0;
      v26 = 0;
      goto LABEL_49;
    }
    if (BYTE9(xmmword_254572E6C) >= 0x20u)
    {
      v25 = BYTE9(xmmword_254572E6C) & 0xE0;
      v27 = veorq_s8((int8x16_t)xmmword_254572E6C, *v88);
      v28 = veorq_s8(*(int8x16_t *)&qword_254572E7C, v88[1]);
      if (v25 != 32)
      {
        v27 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)EC_group_p384_storage + 4), v88[2]), v27);
        v28 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&xmmword_254572E98 + 4), v88[3]), v28);
        if (v25 != 64)
        {
          v27 = vorrq_s8(veorq_s8((int8x16_t)xmmword_254572EAC, v88[4]), v27);
          v28 = vorrq_s8(veorq_s8(unk_254572EBC, v88[5]), v28);
          if (v25 != 96)
          {
            v27 = vorrq_s8(veorq_s8((int8x16_t)xmmword_254572ECC, v88[6]), v27);
            v28 = vorrq_s8(veorq_s8(unk_254572EDC, v88[7]), v28);
            if (v25 != 128)
            {
              v27 = vorrq_s8(veorq_s8((int8x16_t)xmmword_254572EEC, v88[8]), v27);
              v28 = vorrq_s8(veorq_s8(unk_254572EFC, v88[9]), v28);
              if (v25 != 160)
              {
                v27 = vorrq_s8(veorq_s8((int8x16_t)xmmword_254572F0C, v88[10]), v27);
                v28 = vorrq_s8(veorq_s8(unk_254572F1C, v88[11]), v28);
                if (v25 != 192)
                {
                  v27 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&xmmword_254572F28 + 4), v88[12]), v27);
                  v28 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&xmmword_254572F38 + 4), v88[13]), v28);
                }
              }
            }
          }
        }
      }
      v29 = vorrq_s8(v28, v27);
      *(int8x8_t *)v29.i8 = vorr_s8(*(int8x8_t *)v29.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL));
      v30 = v29.i64[0] | HIDWORD(v29.i64[0]) | ((unint64_t)(v29.i64[0] | HIDWORD(v29.i64[0])) >> 16);
      v26 = v30 | BYTE1(v30);
      if (v25 == BYTE9(xmmword_254572E6C))
        goto LABEL_51;
      if ((BYTE9(xmmword_254572E6C) & 0x18) == 0)
      {
LABEL_49:
        v40 = BYTE9(xmmword_254572E6C) - v25;
        v41 = (char *)&EC_group_p256_storage[64] + v25 + 4;
        v42 = &v88->i8[v25];
        do
        {
          v44 = *v42++;
          v43 = v44;
          v45 = *v41++;
          v26 |= v45 ^ v43;
          --v40;
        }
        while (v40);
        goto LABEL_51;
      }
    }
    else
    {
      v26 = 0;
      v25 = 0;
    }
    v31 = v25;
    v25 = BYTE9(xmmword_254572E6C) & 0xF8;
    v32 = (int8x8_t)v26;
    v33 = (int8x8_t *)&v88->i8[v31];
    v34 = (int8x8_t *)((char *)&EC_group_p256_storage[64] + v31 + 4);
    v35 = v31 - v25;
    do
    {
      v36 = *v33++;
      v37 = v36;
      v38 = *v34++;
      v32 = vorr_s8(veor_s8(v38, v37), v32);
      v35 += 8;
    }
    while (v35);
    v39 = *(_QWORD *)&v32 | HIDWORD(*(_QWORD *)&v32) | ((*(_QWORD *)&v32 | HIDWORD(*(_QWORD *)&v32)) >> 16);
    v26 = v39 | BYTE1(v39);
    if (v25 != BYTE9(xmmword_254572E6C))
      goto LABEL_49;
LABEL_51:
    if (!v26)
      return EC_group_p256_storage;
  }
  if (pthread_once(&EC_group_p384_once, (void (*)(void))EC_group_p384_init))
    goto LABEL_100;
  if (v89 == byte_254573095)
  {
    result = EC_group_p384_storage;
    if (!byte_254573095)
      return result;
    if (byte_254573095 < 8u)
    {
      v46 = 0;
      v47 = 0;
      goto LABEL_72;
    }
    if (byte_254573095 >= 0x20u)
    {
      v46 = byte_254573095 & 0xE0;
      v48 = veorq_s8(*(int8x16_t *)&byte_25457308C, *v88);
      v49 = veorq_s8(*(int8x16_t *)&qword_25457309C, v88[1]);
      if (v46 != 32)
      {
        v48 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)EC_group_p521_storage + 4), v88[2]), v48);
        v49 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&xmmword_2545730B8 + 4), v88[3]), v49);
        if (v46 != 64)
        {
          v48 = vorrq_s8(veorq_s8((int8x16_t)xmmword_2545730CC, v88[4]), v48);
          v49 = vorrq_s8(veorq_s8(unk_2545730DC, v88[5]), v49);
          if (v46 != 96)
          {
            v48 = vorrq_s8(veorq_s8(unk_2545730EC, v88[6]), v48);
            v49 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&qword_2545730F8 + 4), v88[7]), v49);
            if (v46 != 128)
            {
              v48 = vorrq_s8(veorq_s8((int8x16_t)xmmword_25457310C, v88[8]), v48);
              v49 = vorrq_s8(veorq_s8(unk_25457311C, v88[9]), v49);
              if (v46 != 160)
              {
                v48 = vorrq_s8(veorq_s8((int8x16_t)xmmword_25457312C, v88[10]), v48);
                v49 = vorrq_s8(veorq_s8(unk_25457313C, v88[11]), v49);
                if (v46 != 192)
                {
                  v48 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&xmmword_254573148 + 4), v88[12]), v48);
                  v49 = vorrq_s8(veorq_s8(unk_25457315C, v88[13]), v49);
                }
              }
            }
          }
        }
      }
      v50 = vorrq_s8(v49, v48);
      *(int8x8_t *)v50.i8 = vorr_s8(*(int8x8_t *)v50.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL));
      v51 = v50.i64[0] | HIDWORD(v50.i64[0]) | ((unint64_t)(v50.i64[0] | HIDWORD(v50.i64[0])) >> 16);
      v47 = v51 | BYTE1(v51);
      if (v46 == byte_254573095)
        goto LABEL_74;
      if ((byte_254573095 & 0x18) == 0)
      {
LABEL_72:
        v61 = byte_254573095 - v46;
        v62 = (char *)&EC_group_p384_storage[64] + v46 + 4;
        v63 = &v88->i8[v46];
        do
        {
          v65 = *v63++;
          v64 = v65;
          v66 = *v62++;
          v47 |= v66 ^ v64;
          --v61;
        }
        while (v61);
        goto LABEL_74;
      }
    }
    else
    {
      v47 = 0;
      v46 = 0;
    }
    v52 = v46;
    v46 = byte_254573095 & 0xF8;
    v53 = (int8x8_t)v47;
    v54 = (int8x8_t *)&v88->i8[v52];
    v55 = (int8x8_t *)((char *)&EC_group_p384_storage[64] + v52 + 4);
    v56 = v52 - v46;
    do
    {
      v57 = *v54++;
      v58 = v57;
      v59 = *v55++;
      v53 = vorr_s8(veor_s8(v59, v58), v53);
      v56 += 8;
    }
    while (v56);
    v60 = *(_QWORD *)&v53 | HIDWORD(*(_QWORD *)&v53) | ((*(_QWORD *)&v53 | HIDWORD(*(_QWORD *)&v53)) >> 16);
    v47 = v60 | BYTE1(v60);
    if (v46 != byte_254573095)
      goto LABEL_72;
LABEL_74:
    if (!v47)
      return EC_group_p384_storage;
  }
  if (pthread_once(&EC_group_p521_once, (void (*)(void))EC_group_p521_init))
    goto LABEL_100;
  if (v89 != byte_2545732B5)
  {
LABEL_98:
    v1 = 123;
    v2 = 357;
    goto LABEL_5;
  }
  result = EC_group_p521_storage;
  if (byte_2545732B5)
  {
    if (byte_2545732B5 < 8u)
    {
      v67 = 0;
      v68 = 0;
      goto LABEL_95;
    }
    if (byte_2545732B5 >= 0x20u)
    {
      v67 = byte_2545732B5 & 0xE0;
      v69 = veorq_s8(*(int8x16_t *)&byte_2545732AC, *v88);
      v70 = veorq_s8(*(int8x16_t *)&qword_2545732BC, v88[1]);
      if (v67 != 32)
      {
        v69 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&RSA_default_method_storage + 4), v88[2]), v69);
        v70 = vorrq_s8(veorq_s8(unk_2545732DC, v88[3]), v70);
        if (v67 != 64)
        {
          v69 = vorrq_s8(veorq_s8((int8x16_t)xmmword_2545732EC, v88[4]), v69);
          v70 = vorrq_s8(veorq_s8(unk_2545732FC, v88[5]), v70);
          if (v67 != 96)
          {
            v69 = vorrq_s8(veorq_s8(unk_25457330C, v88[6]), v69);
            v70 = vorrq_s8(veorq_s8(unk_25457331C, v88[7]), v70);
            if (v67 != 128)
            {
              v69 = vorrq_s8(veorq_s8(unk_25457332C, v88[8]), v69);
              v70 = vorrq_s8(veorq_s8(unk_25457333C, v88[9]), v70);
              if (v67 != 160)
              {
                v69 = vorrq_s8(veorq_s8(unk_25457334C, v88[10]), v69);
                v70 = vorrq_s8(veorq_s8(*(int8x16_t *)((char *)&xmmword_254573350 + 12), v88[11]), v70);
                if (v67 != 192)
                {
                  v69 = vorrq_s8(veorq_s8((int8x16_t)xmmword_25457336C, v88[12]), v69);
                  v70 = vorrq_s8(veorq_s8(*(int8x16_t *)&byte_25457337C, v88[13]), v70);
                }
              }
            }
          }
        }
      }
      v71 = vorrq_s8(v70, v69);
      *(int8x8_t *)v71.i8 = vorr_s8(*(int8x8_t *)v71.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL));
      v72 = v71.i64[0] | HIDWORD(v71.i64[0]) | ((unint64_t)(v71.i64[0] | HIDWORD(v71.i64[0])) >> 16);
      v68 = v72 | BYTE1(v72);
      if (v67 == byte_2545732B5)
        goto LABEL_97;
      if ((byte_2545732B5 & 0x18) == 0)
      {
LABEL_95:
        v82 = byte_2545732B5 - v67;
        v83 = (char *)&EC_group_p521_storage[64] + v67 + 4;
        v84 = &v88->i8[v67];
        do
        {
          v86 = *v84++;
          v85 = v86;
          v87 = *v83++;
          v68 |= v87 ^ v85;
          --v82;
        }
        while (v82);
        goto LABEL_97;
      }
    }
    else
    {
      v68 = 0;
      v67 = 0;
    }
    v73 = v67;
    v67 = byte_2545732B5 & 0xF8;
    v74 = (int8x8_t)v68;
    v75 = (int8x8_t *)&v88->i8[v73];
    v76 = (int8x8_t *)((char *)&EC_group_p521_storage[64] + v73 + 4);
    v77 = v73 - v67;
    do
    {
      v78 = *v75++;
      v79 = v78;
      v80 = *v76++;
      v74 = vorr_s8(veor_s8(v80, v79), v74);
      v77 += 8;
    }
    while (v77);
    v81 = *(_QWORD *)&v74 | HIDWORD(*(_QWORD *)&v74) | ((*(_QWORD *)&v74 | HIDWORD(*(_QWORD *)&v74)) >> 16);
    v68 = v81 | BYTE1(v81);
    if (v67 != byte_2545732B5)
      goto LABEL_95;
LABEL_97:
    if (!v68)
      return EC_group_p521_storage;
    goto LABEL_98;
  }
  return result;
}

EC_KEY *EC_KEY_new(void)
{
  char *v0;

  v0 = (char *)malloc_type_malloc(0x40uLL, 0x30772F57uLL);
  if (v0)
  {
    *(_QWORD *)v0 = 56;
    *(_OWORD *)(v0 + 8) = 0u;
    *(_OWORD *)(v0 + 24) = 0u;
    *(_OWORD *)(v0 + 40) = 0u;
    *((_QWORD *)v0 + 7) = 0;
    *(_QWORD *)(v0 + 36) = 0x100000004;
    return (EC_KEY *)(v0 + 8);
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

void EC_KEY_free(EC_KEY *a1)
{
  unsigned int *v2;
  unsigned int i;
  unsigned int v4;
  uint64_t v5;
  void (*v6)(EC_KEY *);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  size_t v13;

  if (a1)
  {
    v2 = (unsigned int *)((char *)a1 + 32);
    for (i = atomic_load((unsigned int *)a1 + 8); i != -1; i = v4)
    {
      if (!i)
        abort();
      v4 = __ldaxr(v2);
      if (v4 == i)
      {
        if (!__stlxr(i - 1, v2))
        {
          if (i == 1)
          {
            v5 = *((_QWORD *)a1 + 5);
            if (v5)
            {
              v6 = *(void (**)(EC_KEY *))(v5 + 24);
              if (v6)
                v6(a1);
            }
            CRYPTO_free_ex_data((int)&g_ec_ex_data_class, a1, (CRYPTO_EX_DATA *)a1 + 3);
            EC_GROUP_free(*(EC_GROUP **)a1);
            EC_POINT_free(*((EC_POINT **)a1 + 1));
            v7 = *((_QWORD *)a1 + 2);
            if (v7)
            {
              v9 = *(_QWORD *)(v7 - 8);
              v8 = (void *)(v7 - 8);
              v10 = v9 + 8;
              if (v9 != -8)
                bzero(v8, v10);
              free(v8);
            }
            v12 = *((_QWORD *)a1 - 1);
            v11 = (char *)a1 - 8;
            v13 = v12 + 8;
            if (v12 != -8)
              bzero(v11, v13);
            free(v11);
          }
          return;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
}

int EC_KEY_set_group(EC_KEY *a1, const EC_GROUP *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  char v6;

  if (!*(_QWORD *)a1)
  {
    if (!a2
      || *((_DWORD *)a2 + 128)
      || (v3 = (unsigned int *)((char *)a2 + 540), v4 = atomic_load((unsigned int *)a2 + 135), v4 == -1))
    {
LABEL_14:
      *(_QWORD *)a1 = a2;
      return a2 != 0;
    }
    while (1)
    {
      v5 = __ldaxr(v3);
      if (v5 == v4)
      {
        if (!__stlxr(v4 + 1, v3))
        {
          v6 = 1;
          goto LABEL_12;
        }
      }
      else
      {
        __clrex();
      }
      v6 = 0;
LABEL_12:
      if ((v6 & 1) == 0)
      {
        v4 = v5;
        if (v5 != -1)
          continue;
      }
      goto LABEL_14;
    }
  }
  if (!EC_GROUP_cmp(*(const EC_GROUP **)a1, a2, 0))
    return 1;
  ERR_put_error(15, 0, 130, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_key.c", 216);
  return 0;
}

int EC_KEY_set_public_key(EC_KEY *a1, const EC_POINT *a2)
{
  const EC_GROUP *v3;
  EC_POINT *v6;

  v3 = *(const EC_GROUP **)a1;
  if (v3)
  {
    if (a2 && EC_GROUP_cmp(v3, *(const EC_GROUP **)a2, 0))
    {
      ERR_put_error(15, 0, 130, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_key.c", 269);
      return 0;
    }
    else
    {
      EC_POINT_free(*((EC_POINT **)a1 + 1));
      v6 = EC_POINT_dup(a2, *(const EC_GROUP **)a1);
      *((_QWORD *)a1 + 1) = v6;
      return v6 != 0;
    }
  }
  else
  {
    ERR_put_error(15, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_key.c", 264);
    return 0;
  }
}

int EC_KEY_set_private_key(EC_KEY *a1, const BIGNUM *a2)
{
  uint64_t v2;
  int8x16_t *v5;
  int8x16_t *v6;
  uint64_t *i64;
  char *v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  size_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  uint64_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
  {
    v14 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/fipsmodule/ec/ec_key.c";
    v15 = 15;
    v16 = 114;
    v17 = 236;
LABEL_11:
    ERR_put_error(v15, 0, v16, v14, v17);
    return 0;
  }
  v5 = (int8x16_t *)malloc_type_malloc(0x68uLL, 0x30772F57uLL);
  if (!v5)
  {
    v14 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v15 = 14;
    v16 = 65;
    v17 = 247;
    goto LABEL_11;
  }
  v6 = v5;
  v5->i64[0] = 96;
  v5[2] = 0u;
  i64 = v5[2].i64;
  v5->i64[1] = (uint64_t)v5[2].i64;
  v8 = &v5->i8[8];
  v5[3] = 0u;
  v5[4] = 0u;
  v5[5] = 0u;
  v5[6].i64[0] = 0;
  v5[1] = 0u;
  v9 = *(_DWORD *)(v2 + 264);
  v5[1].i32[0] = v9;
  v5[1].i32[1] = v9;
  v5[1].i32[3] = 2;
  v10 = *(_QWORD *)a1;
  if (!bn_copy_words(&v5[2], *(int *)(*(_QWORD *)a1 + 264), (char **)a2)
    || (int)bn_cmp_words_consttime(i64, *(int *)(v10 + 264), *(uint64_t **)(v10 + 256), *(int *)(v10 + 264)) >= 0)
  {
    ERR_put_error(15, 0, 133, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/scalar.c", 32);
LABEL_24:
    ERR_put_error(15, 0, 113, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_key.c", 249);
    if (v6->i64[0] != -8)
      __memset_chk();
    free(v6);
    return 0;
  }
  v11 = *(unsigned int *)(*(_QWORD *)a1 + 264);
  if ((int)v11 < 1)
    goto LABEL_24;
  if (v11 < 4)
  {
    v12 = 0;
    v13 = 0;
LABEL_21:
    v28 = v11 - v12;
    v29 = &v6[2].i64[v12];
    do
    {
      v30 = *v29++;
      *(_QWORD *)&v13 |= v30;
      --v28;
    }
    while (v28);
    goto LABEL_23;
  }
  v12 = v11 & 0x7FFFFFFC;
  v23 = v6 + 3;
  v24 = 0uLL;
  v25 = v11 & 0xFFFFFFFC;
  v26 = 0uLL;
  do
  {
    v24 = vorrq_s8(v23[-1], v24);
    v26 = vorrq_s8(*v23, v26);
    v23 += 2;
    v25 -= 4;
  }
  while (v25);
  v27 = vorrq_s8(v26, v24);
  v13 = vorr_s8(*(int8x8_t *)v27.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL));
  if (v12 != v11)
    goto LABEL_21;
LABEL_23:
  if (!*(_QWORD *)&v13)
    goto LABEL_24;
  v19 = *((_QWORD *)a1 + 2);
  if (v19)
  {
    v21 = *(_QWORD *)(v19 - 8);
    v20 = (void *)(v19 - 8);
    v22 = v21 + 8;
    if (v21 != -8)
      bzero(v20, v22);
    free(v20);
  }
  *((_QWORD *)a1 + 2) = v8;
  return 1;
}

int EC_KEY_check_key(const EC_KEY *a1)
{
  BN_CTX *v1;
  const EC_GROUP *v3;
  const EC_GROUP **v4;
  BN_CTX *v5;
  const EC_GROUP *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  int8x8_t v13;
  uint64_t v14;
  const EC_GROUP *v15;
  int8x16_t *v16;
  int8x16_t v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  const EC_GROUP **v22;
  uint64_t v23;
  int8x16_t v24[13];
  uint64_t v25;

  if (!a1 || (v3 = *(const EC_GROUP **)a1) == 0 || (v4 = (const EC_GROUP **)*((_QWORD *)a1 + 1)) == 0)
  {
    v8 = 67;
    v9 = 294;
    goto LABEL_10;
  }
  if (EC_GROUP_cmp(*(const EC_GROUP **)a1, *v4, v1))
  {
    ERR_put_error(15, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 537);
    goto LABEL_6;
  }
  v11 = *((unsigned int *)v3 + 82);
  if ((int)v11 < 1)
  {
LABEL_25:
    v8 = 119;
    v9 = 299;
    goto LABEL_10;
  }
  if (v11 < 4)
  {
    v12 = 0;
    v13 = 0;
LABEL_22:
    v21 = v11 - v12;
    v22 = &v4[v12 + 19];
    do
    {
      v23 = (uint64_t)*v22++;
      *(_QWORD *)&v13 |= v23;
      --v21;
    }
    while (v21);
    goto LABEL_24;
  }
  v12 = v11 & 0x7FFFFFFC;
  v16 = (int8x16_t *)(v4 + 21);
  v17 = 0uLL;
  v18 = v11 & 0xFFFFFFFC;
  v19 = 0uLL;
  do
  {
    v17 = vorrq_s8(v16[-1], v17);
    v19 = vorrq_s8(*v16, v19);
    v16 += 2;
    v18 -= 4;
  }
  while (v18);
  v20 = vorrq_s8(v19, v17);
  v13 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
  if (v12 != v11)
    goto LABEL_22;
LABEL_24:
  if (!*(_QWORD *)&v13)
    goto LABEL_25;
LABEL_6:
  v6 = *(const EC_GROUP **)a1;
  v7 = *((_QWORD *)a1 + 1);
  if (EC_GROUP_cmp(*(const EC_GROUP **)a1, *(const EC_GROUP **)v7, v5))
  {
    ERR_put_error(15, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 546);
LABEL_8:
    v8 = 120;
    v9 = 305;
LABEL_10:
    ERR_put_error(15, 0, v8, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_key.c", v9);
    return 0;
  }
  if (!ec_GFp_simple_is_on_curve((uint64_t)v6, (int8x16_t *)(v7 + 8)))
    goto LABEL_8;
  v14 = *((_QWORD *)a1 + 2);
  if (v14)
  {
    v25 = 0;
    memset(v24, 0, sizeof(v24));
    v15 = *(const EC_GROUP **)a1;
    (*(void (**)(_QWORD, int8x16_t *, uint64_t))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1, v24, v14 + 24);
    if (!ec_GFp_simple_is_on_curve((uint64_t)v15, v24))
    {
      ERR_put_error(15, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 867);
      v8 = 15;
      v9 = 317;
      goto LABEL_10;
    }
    if (!ec_GFp_simple_points_equal(*(_QWORD *)a1, v24, *((_QWORD *)a1 + 1) + 8))
    {
      v8 = 113;
      v9 = 324;
      goto LABEL_10;
    }
  }
  return 1;
}

BOOL EC_KEY_oct2key(const EC_GROUP **a1, const unsigned __int8 *a2, size_t a3, BN_CTX *a4)
{
  const EC_GROUP *v4;
  char *v9;
  const EC_POINT *v10;
  int v11;
  int v12;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  EC_POINT *v19;

  v4 = *a1;
  if (!*a1)
  {
    ERR_put_error(15, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_key.c", 399);
    return 0;
  }
  v9 = (char *)malloc_type_malloc(0xE8uLL, 0x30772F57uLL);
  if (v9)
  {
    *(_QWORD *)v9 = 224;
    v10 = (const EC_POINT *)(v9 + 8);
    if (!*((_DWORD *)v4 + 128))
    {
      v15 = (unsigned int *)((char *)v4 + 540);
      v16 = atomic_load((unsigned int *)v4 + 135);
      if (v16 != -1)
      {
        while (1)
        {
          v17 = __ldaxr(v15);
          if (v17 == v16)
          {
            if (!__stlxr(v16 + 1, v15))
            {
              v18 = 1;
              goto LABEL_16;
            }
          }
          else
          {
            __clrex();
          }
          v18 = 0;
LABEL_16:
          if ((v18 & 1) == 0)
          {
            v16 = v17;
            if (v17 != -1)
              continue;
          }
          break;
        }
      }
    }
    *((_QWORD *)v9 + 1) = v4;
    *((_OWORD *)v9 + 1) = 0u;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_OWORD *)v9 + 7) = 0u;
    *((_OWORD *)v9 + 8) = 0u;
    *((_OWORD *)v9 + 9) = 0u;
    *((_OWORD *)v9 + 10) = 0u;
    *((_OWORD *)v9 + 11) = 0u;
    *((_OWORD *)v9 + 12) = 0u;
    *((_OWORD *)v9 + 13) = 0u;
    *((_QWORD *)v9 + 28) = 0;
    if (EC_POINT_oct2point(*a1, v10, a2, a3, a4))
    {
      if (*a1)
      {
        if (!EC_GROUP_cmp(*a1, *(const EC_GROUP **)v10, 0))
        {
          EC_POINT_free(a1[1]);
          v19 = EC_POINT_dup(v10, *a1);
          a1[1] = v19;
          v14 = v19 != 0;
          goto LABEL_23;
        }
        v11 = 130;
        v12 = 269;
      }
      else
      {
        v11 = 114;
        v12 = 264;
      }
      ERR_put_error(15, 0, v11, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_key.c", v12);
      v14 = 0;
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v10 = 0;
    v14 = 0;
  }
LABEL_23:
  EC_POINT_free(v10);
  return v14;
}

int EC_KEY_generate_key(EC_KEY *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  int v20;
  _OWORD *v22;
  _OWORD *v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  EC_POINT *v28;
  int8x16_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  size_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  char *v39;
  uint64_t v40;
  size_t v41;

  if (!a1 || (v2 = *(_QWORD *)a1) == 0)
  {
    v10 = 67;
    v11 = 485;
LABEL_24:
    ERR_put_error(15, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_key.c", v11);
    return 0;
  }
  v3 = *(unsigned int *)(v2 + 264);
  v4 = v3 & ((int)v3 >> 31);
  v5 = 8 * v3 - 8;
  v6 = *(_DWORD *)(v2 + 264);
  while (1)
  {
    v7 = __OFSUB__(v6--, 1);
    if (v6 < 0 != v7)
      break;
    v8 = *(_QWORD *)(v2 + 256);
    v9 = *(_QWORD *)(v8 + v5);
    v5 -= 8;
    if (v9)
    {
      v4 = v6 + 1;
      goto LABEL_10;
    }
  }
  if ((v3 & 0x80000000) == 0)
    goto LABEL_23;
  v8 = *(_QWORD *)(v2 + 256);
LABEL_10:
  v12 = v4 - 1;
  v13 = *(_QWORD *)(v8 + 8 * v12);
  v14 = v13 != 0;
  v15 = HIDWORD(v13) != 0;
  if (HIDWORD(v13))
    v13 >>= 32;
  v16 = v13 >> 16 != 0;
  if (v13 >> 16)
    v13 >>= 16;
  v17 = v13 > 0xFF;
  if (v13 > 0xFF)
    v13 >>= 8;
  v18 = v13 > 0xF;
  if (v13 > 0xF)
    v13 >>= 4;
  v19 = v13 > 3;
  if (v13 > 3)
    v13 >>= 2;
  v20 = v14 | (v12 << 6) | (32 * v15) | (16 * v16) | (8 * v17) | (4 * v18) | (2 * v19);
  if (v13 > 1)
    ++v20;
  if (v20 <= 159)
  {
LABEL_23:
    v10 = 112;
    v11 = 491;
    goto LABEL_24;
  }
  v22 = malloc_type_malloc(0x68uLL, 0x30772F57uLL);
  v23 = v22;
  if (v22)
  {
    *(_QWORD *)v22 = 96;
    v22[2] = 0u;
    *((_QWORD *)v22 + 1) = v22 + 2;
    v24 = (char *)v22 + 8;
    v22[3] = 0u;
    v22[4] = 0u;
    v22[5] = 0u;
    *((_QWORD *)v22 + 12) = 0;
    v22[1] = 0u;
    v25 = *(_DWORD *)(v2 + 264);
    *((_DWORD *)v22 + 4) = v25;
    *((_DWORD *)v22 + 5) = v25;
    *((_DWORD *)v22 + 7) = 2;
    v26 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
      goto LABEL_27;
LABEL_38:
    ERR_put_error(15, 0, 67, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 469);
    EC_POINT_free(0);
    if (!v23)
      return 0;
LABEL_54:
    v40 = *((_QWORD *)v24 - 1);
    v39 = v24 - 8;
    v41 = v40 + 8;
    if (v40 != -8)
      bzero(v39, v41);
    free(v39);
    return 0;
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  v24 = 0;
  v26 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_38;
LABEL_27:
  v27 = (char *)malloc_type_malloc(0xE8uLL, 0x30772F57uLL);
  if (!v27)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    EC_POINT_free(0);
    if (!v23)
      return 0;
    goto LABEL_54;
  }
  *(_QWORD *)v27 = 224;
  v28 = (EC_POINT *)(v27 + 8);
  if (!*(_DWORD *)(v26 + 512))
  {
    v35 = (unsigned int *)(v26 + 540);
    v36 = atomic_load((unsigned int *)(v26 + 540));
    if (v36 != -1)
    {
      while (1)
      {
        v37 = __ldaxr(v35);
        if (v37 == v36)
        {
          if (!__stlxr(v36 + 1, v35))
          {
            v38 = 1;
            goto LABEL_48;
          }
        }
        else
        {
          __clrex();
        }
        v38 = 0;
LABEL_48:
        if ((v38 & 1) == 0)
        {
          v36 = v37;
          if (v37 != -1)
            continue;
        }
        break;
      }
    }
  }
  *((_OWORD *)v27 + 1) = 0u;
  v29 = (int8x16_t *)(v27 + 16);
  *((_QWORD *)v27 + 1) = v26;
  *((_OWORD *)v27 + 2) = 0u;
  *((_OWORD *)v27 + 3) = 0u;
  *((_OWORD *)v27 + 4) = 0u;
  *((_OWORD *)v27 + 5) = 0u;
  *((_OWORD *)v27 + 6) = 0u;
  *((_OWORD *)v27 + 7) = 0u;
  *((_OWORD *)v27 + 8) = 0u;
  *((_OWORD *)v27 + 9) = 0u;
  *((_OWORD *)v27 + 10) = 0u;
  *((_OWORD *)v27 + 11) = 0u;
  *((_OWORD *)v27 + 12) = 0u;
  *((_OWORD *)v27 + 13) = 0u;
  *((_QWORD *)v27 + 28) = 0;
  if (!v23)
  {
    EC_POINT_free((EC_POINT *)(v27 + 8));
    return 0;
  }
  if (!bn_rand_range_words((uint64_t *)v24 + 3, 1uLL, *(uint64_t **)(*(_QWORD *)a1 + 256), *(int *)(*(_QWORD *)a1 + 264), (uint64_t)&EC_KEY_generate_key_kDefaultAdditionalData))goto LABEL_53;
  v30 = *(_QWORD *)a1;
  (*(void (**)(_QWORD, int8x16_t *, char *))(**(_QWORD **)a1 + 40))(*(_QWORD *)a1, v29, v24 + 24);
  if (!ec_GFp_simple_is_on_curve(v30, v29))
  {
    ERR_put_error(15, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 867);
LABEL_53:
    EC_POINT_free(v28);
    goto LABEL_54;
  }
  v31 = *((_QWORD *)a1 + 2);
  if (v31)
  {
    v33 = *(_QWORD *)(v31 - 8);
    v32 = (void *)(v31 - 8);
    v34 = v33 + 8;
    if (v33 != -8)
      bzero(v32, v34);
    free(v32);
  }
  *((_QWORD *)a1 + 2) = v24;
  EC_POINT_free(*((EC_POINT **)a1 + 1));
  *((_QWORD *)a1 + 1) = v28;
  return 1;
}

unint64_t ec_GFp_mont_felem_mul(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  return bn_mod_mul_montgomery_small(a2, a3, a4, *(int *)(a1 + 328), a1 + 296);
}

unint64_t ec_GFp_mont_felem_sqr(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  return bn_mod_mul_montgomery_small(a2, a3, a3, *(int *)(a1 + 328), a1 + 296);
}

void ec_GFp_mont_felem_to_bytes(uint64_t a1, char *a2, unint64_t *a3, uint64_t a4)
{
  int8x16_t v7[4];
  uint64_t v8;

  v8 = 0;
  memset(v7, 0, sizeof(v7));
  bn_from_montgomery_small((unint64_t *)v7, *(int *)(a1 + 328), a4, *(int *)(a1 + 328), a1 + 296);
  ec_GFp_simple_felem_to_bytes(a1, a2, a3, v7);
}

uint64_t ec_GFp_mont_felem_from_bytes(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t result;

  result = ec_GFp_simple_felem_from_bytes(a1, a2, a3, a4);
  if ((_DWORD)result)
  {
    bn_mod_mul_montgomery_small((unint64_t *)a2, (unint64_t *)a2, *(unint64_t **)(a1 + 296), *(int *)(a1 + 328), a1 + 296);
    return 1;
  }
  return result;
}

unint64_t ec_GFp_mont_felem_reduce(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;

  v6 = a1 + 296;
  bn_from_montgomery_small(a2, *(int *)(a1 + 328), a3, a4, a1 + 296);
  bn_mod_mul_montgomery_small(a2, a2, *(unint64_t **)(a1 + 296), *(int *)(a1 + 328), v6);
  return bn_mod_mul_montgomery_small(a2, a2, *(unint64_t **)(a1 + 296), *(int *)(a1 + 328), v6);
}

unint64_t *ec_GFp_mont_felem_exp(uint64_t a1, unint64_t *a2, int a3, uint64_t a4, unint64_t a5)
{
  return bn_mod_exp_mont_small(a2, a3, *(int *)(a1 + 328), a4, a5, a1 + 296);
}

unint64_t ec_GFp_mont_add(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  int8x16_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int8x8_t v12;
  unint64_t result;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  int8x16_t *v17;
  uint64_t v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  uint64_t v31;
  unint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int8x8_t v37;
  uint64_t v38;
  int8x16_t *v39;
  int8x16_t v40;
  uint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int8x8_t v49;
  uint64_t v50;
  unint64_t v51;
  int8x16_t v52;
  int8x16_t v53;
  unint64_t v54;
  int8x16_t *v55;
  int8x16_t v56;
  uint64_t v57;
  int8x16_t v58;
  int8x16_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int8x16_t *v64;
  int8x16_t *v65;
  unint64_t v66;
  int8x16_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t *v78;
  int8x16_t *v79;
  int8x16_t *v80;
  unint64_t v81;
  int8x16_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  int8x16_t *v92;
  int8x16_t *v93;
  unint64_t v94;
  int8x16_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  int8x16_t *v102;
  int8x16_t *v103;
  int8x16_t *v104;
  unint64_t v105;
  int8x16_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  int8x16_t *v117;
  int8x16_t *v118;
  unint64_t v119;
  int8x16_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  int8x16_t *v127;
  int8x16_t *v128;
  int8x16_t *v129;
  unint64_t v130;
  int8x16_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t *v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _OWORD v141[4];
  uint64_t v142;
  _OWORD v143[4];
  uint64_t v144;
  _OWORD v145[4];
  uint64_t v146;
  _OWORD v147[4];
  uint64_t v148;
  __int128 v149;
  _OWORD v150[3];
  uint64_t v151;
  _OWORD v152[4];
  uint64_t v153;
  _OWORD v154[4];
  uint64_t v155;
  __int128 v156;
  _OWORD v157[3];
  uint64_t v158;
  _OWORD v159[4];
  uint64_t v160;
  _OWORD v161[4];
  uint64_t v162;
  _OWORD v163[4];
  uint64_t v164;
  _OWORD v165[4];
  uint64_t v166;
  _OWORD v167[4];
  uint64_t v168;
  _OWORD v169[4];
  uint64_t v170;
  __int128 v171;
  _OWORD v172[3];
  uint64_t v173;
  __int128 v174;
  _OWORD v175[3];
  uint64_t v176;
  __int128 v177;
  _OWORD v178[3];
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  uint64_t v184;

  if (a3 == a4)
    return ec_GFp_mont_dbl(a1, a2, a3);
  v179 = 0;
  v8 = 0uLL;
  v177 = 0u;
  memset(v178, 0, sizeof(v178));
  v176 = 0;
  memset(v175, 0, sizeof(v175));
  v174 = 0u;
  v173 = 0;
  v9 = *(unsigned int *)(a1 + 328);
  v10 = (int)v9;
  memset(v172, 0, sizeof(v172));
  v171 = 0u;
  if ((int)v9 <= 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = a4 + 18;
    goto LABEL_25;
  }
  if (v9 < 4)
  {
    v11 = 0;
    v12 = 0;
LABEL_10:
    v21 = v9 - v11;
    v22 = &a3[v11 + 18];
    do
    {
      v23 = *v22++;
      *(_QWORD *)&v12 |= v23;
      --v21;
    }
    while (v21);
    goto LABEL_12;
  }
  v11 = v9 & 0x7FFFFFFC;
  v17 = (int8x16_t *)(a3 + 20);
  v18 = v9 & 0xFFFFFFFC;
  v19 = 0uLL;
  do
  {
    v8 = vorrq_s8(v17[-1], v8);
    v19 = vorrq_s8(*v17, v19);
    v17 += 2;
    v18 -= 4;
  }
  while (v18);
  v20 = vorrq_s8(v19, v8);
  v12 = vorr_s8(*(int8x8_t *)v20.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
  if (v11 != v9)
    goto LABEL_10;
LABEL_12:
  v16 = a4 + 18;
  if (v9 < 4)
  {
    v24 = 0;
    v25 = 0;
LABEL_17:
    v31 = v9 - v24;
    v32 = &a4[v24 + 18];
    do
    {
      v33 = *v32++;
      *(_QWORD *)&v25 |= v33;
      --v31;
    }
    while (v31);
    goto LABEL_19;
  }
  v24 = v9 & 0x7FFFFFFC;
  v26 = (int8x16_t *)(a4 + 20);
  v27 = 0uLL;
  v28 = v9 & 0xFFFFFFFC;
  v29 = 0uLL;
  do
  {
    v27 = vorrq_s8(v26[-1], v27);
    v29 = vorrq_s8(*v26, v29);
    v26 += 2;
    v28 -= 4;
  }
  while (v28);
  v30 = vorrq_s8(v29, v27);
  v25 = vorr_s8(*(int8x8_t *)v30.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL));
  if (v24 != v9)
    goto LABEL_17;
LABEL_19:
  if (v12)
    v14 = -1;
  else
    v14 = 0;
  if (v25)
    v15 = -1;
  else
    v15 = 0;
LABEL_25:
  v170 = 0;
  memset(v169, 0, sizeof(v169));
  bn_mod_mul_montgomery_small((unint64_t *)v169, a3 + 18, a3 + 18, v10, a1 + 296);
  v168 = 0;
  memset(v167, 0, sizeof(v167));
  bn_mod_mul_montgomery_small((unint64_t *)v167, v16, v16, *(int *)(a1 + 328), a1 + 296);
  v166 = 0;
  memset(v165, 0, sizeof(v165));
  bn_mod_mul_montgomery_small((unint64_t *)v165, a3, (unint64_t *)v167, *(int *)(a1 + 328), a1 + 296);
  v164 = 0;
  memset(v163, 0, sizeof(v163));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_add_words((unint64_t)v163, (uint64_t *)a3 + 18, (uint64_t *)v16, *(unint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  bn_mod_mul_montgomery_small((unint64_t *)v163, (unint64_t *)v163, (unint64_t *)v163, *(int *)(a1 + 328), a1 + 296);
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_sub_words((unint64_t)v163, (unint64_t *)v163, (unint64_t *)v169, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_sub_words((unint64_t)v163, (unint64_t *)v163, (unint64_t *)v167, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v162 = 0;
  memset(v161, 0, sizeof(v161));
  bn_mod_mul_montgomery_small((unint64_t *)v161, v16, (unint64_t *)v167, *(int *)(a1 + 328), a1 + 296);
  bn_mod_mul_montgomery_small((unint64_t *)v161, (unint64_t *)v161, a3 + 9, *(int *)(a1 + 328), a1 + 296);
  v160 = 0;
  memset(v159, 0, sizeof(v159));
  bn_mod_mul_montgomery_small((unint64_t *)v159, a4, (unint64_t *)v169, *(int *)(a1 + 328), a1 + 296);
  v158 = 0;
  v156 = 0u;
  memset(v157, 0, sizeof(v157));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_sub_words((unint64_t)&v156, (unint64_t *)v159, (unint64_t *)v165, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v34 = *(unsigned int *)(a1 + 328);
  v35 = (int)v34;
  if ((int)v34 < 1)
  {
    v38 = 0;
    goto LABEL_37;
  }
  if (v34 >= 4)
  {
    v36 = v34 & 0x7FFFFFFC;
    v39 = (int8x16_t *)v157;
    v40 = 0uLL;
    v41 = v34 & 0xFFFFFFFC;
    v42 = 0uLL;
    do
    {
      v40 = vorrq_s8(v39[-1], v40);
      v42 = vorrq_s8(*v39, v42);
      v39 += 2;
      v41 -= 4;
    }
    while (v41);
    v43 = vorrq_s8(v42, v40);
    v37 = vorr_s8(*(int8x8_t *)v43.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
    if (v36 == v34)
      goto LABEL_34;
  }
  else
  {
    v36 = 0;
    v37 = 0;
  }
  v44 = v34 - v36;
  v45 = (uint64_t *)&v157[-1] + v36;
  do
  {
    v46 = *v45++;
    *(_QWORD *)&v37 |= v46;
    --v44;
  }
  while (v44);
LABEL_34:
  if (v37)
    v38 = -1;
  else
    v38 = 0;
LABEL_37:
  bn_mod_mul_montgomery_small((unint64_t *)&v171, (unint64_t *)&v156, (unint64_t *)v163, v35, a1 + 296);
  v155 = 0;
  memset(v154, 0, sizeof(v154));
  bn_mod_mul_montgomery_small((unint64_t *)v154, a3 + 18, (unint64_t *)v169, *(int *)(a1 + 328), a1 + 296);
  v153 = 0;
  memset(v152, 0, sizeof(v152));
  bn_mod_mul_montgomery_small((unint64_t *)v152, a4 + 9, (unint64_t *)v154, *(int *)(a1 + 328), a1 + 296);
  v151 = 0;
  v149 = 0u;
  memset(v150, 0, sizeof(v150));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_sub_words((unint64_t)&v149, (unint64_t *)v152, (unint64_t *)v161, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_add_words((unint64_t)&v149, (uint64_t *)&v149, (uint64_t *)&v149, *(unint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v47 = *(unsigned int *)(a1 + 328);
  if ((int)v47 >= 1)
  {
    if (v47 >= 4)
    {
      v48 = v47 & 0x7FFFFFFC;
      v55 = (int8x16_t *)v150;
      v56 = 0uLL;
      v57 = v47 & 0xFFFFFFFC;
      v58 = 0uLL;
      do
      {
        v56 = vorrq_s8(v55[-1], v56);
        v58 = vorrq_s8(*v55, v58);
        v55 += 2;
        v57 -= 4;
      }
      while (v57);
      v59 = vorrq_s8(v58, v56);
      v49 = vorr_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
      if (v48 == v47)
        goto LABEL_49;
    }
    else
    {
      v48 = 0;
      v49 = 0;
    }
    v60 = v47 - v48;
    v61 = (uint64_t *)&v150[-1] + v48;
    do
    {
      v62 = *v61++;
      *(_QWORD *)&v49 |= v62;
      --v60;
    }
    while (v60);
LABEL_49:
    if (v49)
      v63 = -1;
    else
      v63 = 0;
    if ((v14 & ~(v63 | v38) & v15) != 0)
      return ec_GFp_mont_dbl(a1, a2, a3);
    goto LABEL_41;
  }
  if ((v14 & ~v38 & v15) != 0)
    return ec_GFp_mont_dbl(a1, a2, a3);
LABEL_41:
  v148 = 0;
  memset(v147, 0, sizeof(v147));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_add_words((unint64_t)v147, (uint64_t *)&v156, (uint64_t *)&v156, *(unint64_t **)(a1 + 320), (unint64_t)&v180, (int)v47);
  bn_mod_mul_montgomery_small((unint64_t *)v147, (unint64_t *)v147, (unint64_t *)v147, *(int *)(a1 + 328), a1 + 296);
  v146 = 0;
  memset(v145, 0, sizeof(v145));
  bn_mod_mul_montgomery_small((unint64_t *)v145, (unint64_t *)&v156, (unint64_t *)v147, *(int *)(a1 + 328), a1 + 296);
  v144 = 0;
  memset(v143, 0, sizeof(v143));
  bn_mod_mul_montgomery_small((unint64_t *)v143, (unint64_t *)v165, (unint64_t *)v147, *(int *)(a1 + 328), a1 + 296);
  bn_mod_mul_montgomery_small((unint64_t *)&v177, (unint64_t *)&v149, (unint64_t *)&v149, *(int *)(a1 + 328), a1 + 296);
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_sub_words((unint64_t)&v177, (unint64_t *)&v177, (unint64_t *)v145, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_sub_words((unint64_t)&v177, (unint64_t *)&v177, (unint64_t *)v143, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_sub_words((unint64_t)&v177, (unint64_t *)&v177, (unint64_t *)v143, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_sub_words((unint64_t)&v174, (unint64_t *)v143, (unint64_t *)&v177, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  bn_mod_mul_montgomery_small((unint64_t *)&v174, (unint64_t *)&v174, (unint64_t *)&v149, *(int *)(a1 + 328), a1 + 296);
  v142 = 0;
  memset(v141, 0, sizeof(v141));
  bn_mod_mul_montgomery_small((unint64_t *)v141, (unint64_t *)v161, (unint64_t *)v145, *(int *)(a1 + 328), a1 + 296);
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  bn_mod_sub_words((unint64_t)&v174, (unint64_t *)&v174, (unint64_t *)v141, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v184 = 0;
  v182 = 0u;
  v183 = 0u;
  v180 = 0u;
  v181 = 0u;
  result = bn_mod_sub_words((unint64_t)&v174, (unint64_t *)&v174, (unint64_t *)v141, *(uint64_t **)(a1 + 320), (unint64_t)&v180, *(int *)(a1 + 328));
  v50 = *(int *)(a1 + 328);
  if (!(_DWORD)v50)
    return result;
  v51 = ~v14;
  v52 = (int8x16_t)vdupq_n_s64(v14);
  v53 = (int8x16_t)vdupq_n_s64(~v14);
  if (v50 < 4)
  {
    v54 = 0;
LABEL_57:
    v68 = v50 - v54;
    v69 = 8 * v54;
    v70 = &a4[v54];
    v71 = (unint64_t *)((char *)&v178[-1] + v69);
    do
    {
      v72 = *v70++;
      *v71 = v72 & v51 | *v71 & v14;
      ++v71;
      --v68;
    }
    while (v68);
    goto LABEL_59;
  }
  v54 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  v64 = (int8x16_t *)v178;
  v65 = (int8x16_t *)(a4 + 2);
  v66 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v67 = vorrq_s8(vandq_s8(*v65, v53), vandq_s8(*v64, v52));
    v64[-1] = vorrq_s8(vandq_s8(v65[-1], v53), vandq_s8(v64[-1], v52));
    *v64 = v67;
    v64 += 2;
    v65 += 2;
    v66 -= 4;
  }
  while (v66);
  if (v54 != v50)
    goto LABEL_57;
LABEL_59:
  v73 = 0;
  v74 = ~v15;
  v75 = (char *)a2 - (char *)a3;
  v76 = (int8x16_t)vdupq_n_s64(v15);
  v77 = (int8x16_t)vdupq_n_s64(~v15);
  if (v50 < 4)
    goto LABEL_64;
  if (v75 < 0x20)
    goto LABEL_64;
  v73 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  v78 = (int8x16_t *)v178;
  v79 = (int8x16_t *)(a3 + 2);
  v80 = (int8x16_t *)(a2 + 2);
  v81 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v82 = vorrq_s8(vandq_s8(*v79, v77), vandq_s8(*v78, v76));
    v80[-1] = vorrq_s8(vandq_s8(v79[-1], v77), vandq_s8(v78[-1], v76));
    *v80 = v82;
    v78 += 2;
    v79 += 2;
    v80 += 2;
    v81 -= 4;
  }
  while (v81);
  if (v73 != v50)
  {
LABEL_64:
    v83 = v50 - v73;
    v84 = v73;
    v85 = &a2[v73];
    v86 = &a3[v84];
    v87 = (uint64_t *)((char *)&v178[-1] + v84 * 8);
    do
    {
      v89 = *v87++;
      v88 = v89;
      v90 = *v86++;
      *v85++ = v90 & v74 | v88 & v15;
      --v83;
    }
    while (v83);
  }
  if (v50 < 4)
  {
    v91 = 0;
LABEL_71:
    v96 = v50 - v91;
    v97 = 8 * v91;
    v98 = &a4[v91 + 9];
    v99 = (unint64_t *)((char *)&v175[-1] + v97);
    do
    {
      v100 = *v98++;
      *v99 = v100 & v51 | *v99 & v14;
      ++v99;
      --v96;
    }
    while (v96);
    goto LABEL_73;
  }
  v91 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  v92 = (int8x16_t *)v175;
  v93 = (int8x16_t *)(a4 + 11);
  v94 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v95 = vorrq_s8(vandq_s8(*v93, v53), vandq_s8(*v92, v52));
    v92[-1] = vorrq_s8(vandq_s8(v93[-1], v53), vandq_s8(v92[-1], v52));
    *v92 = v95;
    v92 += 2;
    v93 += 2;
    v94 -= 4;
  }
  while (v94);
  if (v91 != v50)
    goto LABEL_71;
LABEL_73:
  v101 = 0;
  if (v50 < 4)
    goto LABEL_78;
  if (v75 < 0x20)
    goto LABEL_78;
  v101 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  v102 = (int8x16_t *)v175;
  v103 = (int8x16_t *)(a3 + 11);
  v104 = (int8x16_t *)(a2 + 11);
  v105 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v106 = vorrq_s8(vandq_s8(*v103, v77), vandq_s8(*v102, v76));
    v104[-1] = vorrq_s8(vandq_s8(v103[-1], v77), vandq_s8(v102[-1], v76));
    *v104 = v106;
    v102 += 2;
    v103 += 2;
    v104 += 2;
    v105 -= 4;
  }
  while (v105);
  if (v101 != v50)
  {
LABEL_78:
    v107 = v50 - v101;
    v108 = 8 * v101;
    v109 = 8 * v101 + 72;
    v110 = (unint64_t *)((char *)a2 + v109);
    v111 = (uint64_t *)((char *)a3 + v109);
    v112 = (uint64_t *)((char *)&v175[-1] + v108);
    do
    {
      v114 = *v112++;
      v113 = v114;
      v115 = *v111++;
      *v110++ = v115 & v74 | v113 & v15;
      --v107;
    }
    while (v107);
  }
  if (v50 < 4)
  {
    v116 = 0;
LABEL_85:
    v121 = v50 - v116;
    v122 = 8 * v116;
    v123 = &a4[v116 + 18];
    v124 = (unint64_t *)((char *)&v172[-1] + v122);
    do
    {
      v125 = *v123++;
      *v124 = v125 & v51 | *v124 & v14;
      ++v124;
      --v121;
    }
    while (v121);
    goto LABEL_87;
  }
  v116 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  v117 = (int8x16_t *)v172;
  v118 = (int8x16_t *)(a4 + 20);
  v119 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v120 = vorrq_s8(vandq_s8(*v118, v53), vandq_s8(*v117, v52));
    v117[-1] = vorrq_s8(vandq_s8(v118[-1], v53), vandq_s8(v117[-1], v52));
    *v117 = v120;
    v117 += 2;
    v118 += 2;
    v119 -= 4;
  }
  while (v119);
  if (v116 != v50)
    goto LABEL_85;
LABEL_87:
  v126 = 0;
  if (v50 < 4)
    goto LABEL_92;
  if (v75 < 0x20)
    goto LABEL_92;
  v126 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  v127 = (int8x16_t *)v172;
  v128 = (int8x16_t *)(a3 + 20);
  v129 = (int8x16_t *)(a2 + 20);
  v130 = v50 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v131 = vorrq_s8(vandq_s8(*v128, v77), vandq_s8(*v127, v76));
    v129[-1] = vorrq_s8(vandq_s8(v128[-1], v77), vandq_s8(v127[-1], v76));
    *v129 = v131;
    v127 += 2;
    v128 += 2;
    v129 += 2;
    v130 -= 4;
  }
  while (v130);
  if (v126 != v50)
  {
LABEL_92:
    v132 = v50 - v126;
    v133 = 8 * v126;
    v134 = 8 * v126 + 144;
    v135 = (unint64_t *)((char *)a2 + v134);
    v136 = (uint64_t *)((char *)a3 + v134);
    v137 = (uint64_t *)((char *)&v172[-1] + v133);
    do
    {
      v139 = *v137++;
      v138 = v139;
      v140 = *v136++;
      *v135++ = v140 & v74 | v138 & v15;
      --v132;
    }
    while (v132);
  }
  return result;
}

unint64_t ec_GFp_mont_dbl(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  _OWORD v11[4];
  uint64_t v12;
  _OWORD v13[4];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  if (*(_DWORD *)(a1 + 528))
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v14 = 0;
    memset(v13, 0, sizeof(v13));
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    bn_mod_mul_montgomery_small((unint64_t *)&v40, a3 + 18, a3 + 18, *(int *)(a1 + 328), a1 + 296);
    bn_mod_mul_montgomery_small((unint64_t *)&v35, a3 + 9, a3 + 9, *(int *)(a1 + 328), a1 + 296);
    bn_mod_mul_montgomery_small((unint64_t *)&v30, a3, (unint64_t *)&v35, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)&v25, a3, (unint64_t *)&v40, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v20, (uint64_t *)a3, (uint64_t *)&v40, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v15, (uint64_t *)&v20, (uint64_t *)&v20, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v20, (uint64_t *)&v20, (uint64_t *)&v15, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    bn_mod_mul_montgomery_small((unint64_t *)v13, (unint64_t *)&v25, (unint64_t *)&v20, *(int *)(a1 + 328), a1 + 296);
    bn_mod_mul_montgomery_small(a2, (unint64_t *)v13, (unint64_t *)v13, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)v11, (uint64_t *)&v30, (uint64_t *)&v30, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)v11, (uint64_t *)v11, (uint64_t *)v11, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v15, (uint64_t *)v11, (uint64_t *)v11, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)a2, a2, (unint64_t *)&v15, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v40, (uint64_t *)&v35, (uint64_t *)&v40, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v25, (uint64_t *)a3 + 9, (uint64_t *)a3 + 18, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    bn_mod_mul_montgomery_small(a2 + 18, (unint64_t *)&v25, (unint64_t *)&v25, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)(a2 + 18), a2 + 18, (unint64_t *)&v40, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v6 = a2 + 9;
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)(a2 + 9), (unint64_t *)v11, a2, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v35, (uint64_t *)&v35, (uint64_t *)&v35, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    bn_mod_mul_montgomery_small((unint64_t *)&v35, (unint64_t *)&v35, (unint64_t *)&v35, *(int *)(a1 + 328), a1 + 296);
    bn_mod_mul_montgomery_small(a2 + 9, (unint64_t *)v13, a2 + 9, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v35, (uint64_t *)&v35, (uint64_t *)&v35, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v7 = *(uint64_t **)(a1 + 320);
    v8 = *(int *)(a1 + 328);
    v9 = (unint64_t *)&v35;
  }
  else
  {
    v44 = 0;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    bn_mod_mul_montgomery_small((unint64_t *)&v40, a3, a3, *(int *)(a1 + 328), a1 + 296);
    bn_mod_mul_montgomery_small((unint64_t *)&v35, a3 + 9, a3 + 9, *(int *)(a1 + 328), a1 + 296);
    bn_mod_mul_montgomery_small((unint64_t *)&v30, (unint64_t *)&v35, (unint64_t *)&v35, *(int *)(a1 + 328), a1 + 296);
    bn_mod_mul_montgomery_small((unint64_t *)&v25, a3 + 18, a3 + 18, *(int *)(a1 + 328), a1 + 296);
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v20, (uint64_t *)a3, (uint64_t *)&v35, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    bn_mod_mul_montgomery_small((unint64_t *)&v20, (unint64_t *)&v20, (unint64_t *)&v20, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)&v20, (unint64_t *)&v20, (unint64_t *)&v40, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)&v20, (unint64_t *)&v20, (unint64_t *)&v30, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v20, (uint64_t *)&v20, (uint64_t *)&v20, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    bn_mod_mul_montgomery_small((unint64_t *)&v15, (unint64_t *)&v25, (unint64_t *)&v25, *(int *)(a1 + 328), a1 + 296);
    bn_mod_mul_montgomery_small((unint64_t *)&v15, (unint64_t *)(a1 + 360), (unint64_t *)&v15, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v15, (uint64_t *)&v15, (uint64_t *)&v40, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v15, (uint64_t *)&v15, (uint64_t *)&v40, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v15, (uint64_t *)&v15, (uint64_t *)&v40, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    bn_mod_mul_montgomery_small(a2, (unint64_t *)&v15, (unint64_t *)&v15, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)a2, a2, (unint64_t *)&v20, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)a2, a2, (unint64_t *)&v20, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)(a2 + 18), (uint64_t *)a3 + 9, (uint64_t *)a3 + 18, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    bn_mod_mul_montgomery_small(a2 + 18, a2 + 18, a2 + 18, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)(a2 + 18), a2 + 18, (unint64_t *)&v35, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)(a2 + 18), a2 + 18, (unint64_t *)&v25, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v30, (uint64_t *)&v30, (uint64_t *)&v30, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v30, (uint64_t *)&v30, (uint64_t *)&v30, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_add_words((unint64_t)&v30, (uint64_t *)&v30, (uint64_t *)&v30, *(unint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    v6 = a2 + 9;
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    bn_mod_sub_words((unint64_t)(a2 + 9), (unint64_t *)&v20, a2, *(uint64_t **)(a1 + 320), (unint64_t)&v45, *(int *)(a1 + 328));
    bn_mod_mul_montgomery_small(a2 + 9, a2 + 9, (unint64_t *)&v15, *(int *)(a1 + 328), a1 + 296);
    v49 = 0;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v7 = *(uint64_t **)(a1 + 320);
    v8 = *(int *)(a1 + 328);
    v9 = (unint64_t *)&v30;
  }
  return bn_mod_sub_words((unint64_t)v6, v6, v9, v7, (unint64_t)&v45, v8);
}

void EC_GFp_mont_method_init()
{
  EC_GFp_mont_method_storage = (uint64_t)ec_GFp_mont_point_get_affine_coordinates;
  unk_253EA7990 = ec_GFp_mont_jacobian_to_affine_batch;
  qword_253EA7998 = (uint64_t)ec_GFp_mont_add;
  unk_253EA79A0 = ec_GFp_mont_dbl;
  qword_253EA79A8 = (uint64_t)ec_GFp_mont_mul;
  unk_253EA79B0 = ec_GFp_mont_mul_base;
  qword_253EA79B8 = (uint64_t)ec_GFp_mont_mul_batch;
  qword_253EA79C8 = (uint64_t)ec_GFp_mont_mul_public_batch;
  unk_253EA79D0 = ec_GFp_mont_init_precomp;
  qword_253EA79D8 = (uint64_t)ec_GFp_mont_mul_precomp;
  unk_253EA79E0 = ec_GFp_mont_felem_mul;
  qword_253EA79E8 = (uint64_t)ec_GFp_mont_felem_sqr;
  unk_253EA79F0 = ec_GFp_mont_felem_to_bytes;
  qword_253EA79F8 = (uint64_t)ec_GFp_mont_felem_from_bytes;
  unk_253EA7A00 = ec_GFp_mont_felem_reduce;
  qword_253EA7A08 = (uint64_t)ec_GFp_mont_felem_exp;
  unk_253EA7A10 = ec_simple_scalar_inv0_montgomery;
  qword_253EA7A18 = (uint64_t)ec_simple_scalar_to_montgomery_inv_vartime;
  unk_253EA7A20 = ec_GFp_mont_cmp_x_coordinate;
}

uint64_t ec_GFp_mont_point_get_affine_coordinates(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  int8x16_t *v18;
  int8x16_t v19;
  uint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  _OWORD v26[4];
  uint64_t v27;
  _OWORD v28[4];
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned int *)(a1 + 328);
  if ((int)v8 < 1)
    goto LABEL_22;
  if (v8 < 4)
  {
    v9 = 0;
    v10 = 0;
LABEL_19:
    v23 = v8 - v9;
    v24 = &a2[v9 + 18];
    do
    {
      v25 = *v24++;
      *(_QWORD *)&v10 |= v25;
      --v23;
    }
    while (v23);
    goto LABEL_21;
  }
  v9 = v8 & 0x7FFFFFFC;
  v18 = (int8x16_t *)(a2 + 20);
  v19 = 0uLL;
  v20 = v8 & 0xFFFFFFFC;
  v21 = 0uLL;
  do
  {
    v19 = vorrq_s8(v18[-1], v19);
    v21 = vorrq_s8(*v18, v21);
    v18 += 2;
    v20 -= 4;
  }
  while (v20);
  v22 = vorrq_s8(v21, v19);
  v10 = vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
  if (v9 != v8)
    goto LABEL_19;
LABEL_21:
  if (!*(_QWORD *)&v10)
  {
LABEL_22:
    ERR_put_error(15, 0, 119, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_montgomery.c", 150);
    return 0;
  }
  v29 = 0;
  memset(v28, 0, sizeof(v28));
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  if (v8 >= 0xA)
    abort();
  v11 = (int)v8;
  __memcpy_chk();
  v12 = v30;
  v30 -= 2;
  if ((_DWORD)v11 != 1 && v12 <= 1)
  {
    v13 = v11 - 2;
    v14 = v31;
    do
    {
      v15 = v13;
      if ((*v14++)-- != 0)
        break;
      --v13;
    }
    while (v15);
  }
  bn_mod_exp_mont_small((unint64_t *)v26, (_DWORD)a2 + 144, v11, (uint64_t)&v30, v11, a1 + 296);
  bn_mod_mul_montgomery_small((unint64_t *)v28, (unint64_t *)v26, (unint64_t *)v26, *(int *)(a1 + 328), a1 + 296);
  if (a3)
    bn_mod_mul_montgomery_small(a3, a2, (unint64_t *)v28, *(int *)(a1 + 328), a1 + 296);
  if (a4)
  {
    bn_mod_mul_montgomery_small((unint64_t *)v28, (unint64_t *)v28, (unint64_t *)v26, *(int *)(a1 + 328), a1 + 296);
    bn_mod_mul_montgomery_small(a4, a2 + 9, (unint64_t *)v28, *(int *)(a1 + 328), a1 + 296);
  }
  return 1;
}

uint64_t ec_GFp_mont_jacobian_to_affine_batch(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t *v34;
  unint64_t *v35;
  _OWORD v37[4];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  if (!a4)
    return 1;
  v6 = a2;
  *(_OWORD *)a2 = *(_OWORD *)(a3 + 144);
  v8 = *(_OWORD *)(a3 + 160);
  v9 = *(_OWORD *)(a3 + 176);
  v10 = *(_OWORD *)(a3 + 192);
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a3 + 208);
  *(_OWORD *)(a2 + 32) = v9;
  *(_OWORD *)(a2 + 48) = v10;
  *(_OWORD *)(a2 + 16) = v8;
  v11 = a4 - 1;
  if (a4 != 1)
  {
    v12 = (unint64_t *)(a3 + 360);
    v13 = a4 - 1;
    do
    {
      v14 = a2 + 144;
      bn_mod_mul_montgomery_small((unint64_t *)(a2 + 144), (unint64_t *)a2, v12, *(int *)(a1 + 328), a1 + 296);
      v12 += 27;
      a2 = v14;
      --v13;
    }
    while (v13);
  }
  v15 = *(unsigned int *)(a1 + 328);
  if ((int)v15 >= 1)
  {
    if (v15 >= 4)
    {
      v16 = v15 & 0x7FFFFFFC;
      v18 = 0uLL;
      v19 = v15 & 0xFFFFFFFC;
      v20 = (int8x16_t *)(v6 + 144 * v11);
      v21 = 0uLL;
      do
      {
        v22 = *v20;
        v23 = v20[1];
        v20 += 2;
        v18 = vorrq_s8(v22, v18);
        v21 = vorrq_s8(v23, v21);
        v19 -= 4;
      }
      while (v19);
      v24 = vorrq_s8(v21, v18);
      v17 = vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
      if (v16 == v15)
      {
LABEL_13:
        if (v17)
        {
          v28 = (int)v15;
          v43 = 0;
          v41 = 0u;
          v42 = 0u;
          v39 = 0u;
          v40 = 0u;
          if (v15 >= 0xA)
            abort();
          __memcpy_chk();
          v29 = v44;
          *(_QWORD *)&v44 = v44 - 2;
          if ((_DWORD)v28 != 1 && v29 <= 1)
          {
            v30 = v28 - 2;
            v31 = (_QWORD *)&v44 + 1;
            do
            {
              v32 = v30;
              if ((*v31++)-- != 0)
                break;
              --v30;
            }
            while (v32);
          }
          bn_mod_exp_mont_small((unint64_t *)&v39, v6 + 144 * v11, v28, (uint64_t)&v44, v28, a1 + 296);
          v34 = (unint64_t *)(v6 + 144 * a4 - 288);
          v35 = (unint64_t *)(a3 + 216 * a4 - 72);
          do
          {
            v48 = 0;
            v46 = 0u;
            v47 = 0u;
            v44 = 0u;
            v45 = 0u;
            v38 = 0;
            memset(v37, 0, sizeof(v37));
            if (v11)
            {
              bn_mod_mul_montgomery_small((unint64_t *)&v44, (unint64_t *)&v39, v34, *(int *)(a1 + 328), a1 + 296);
              bn_mod_mul_montgomery_small((unint64_t *)&v39, (unint64_t *)&v39, v35, *(int *)(a1 + 328), a1 + 296);
            }
            else
            {
              v46 = v41;
              v47 = v42;
              v48 = v43;
              v44 = v39;
              v45 = v40;
            }
            bn_mod_mul_montgomery_small((unint64_t *)v37, (unint64_t *)&v44, (unint64_t *)&v44, *(int *)(a1 + 328), a1 + 296);
            bn_mod_mul_montgomery_small(v34 + 18, v35 - 18, (unint64_t *)v37, *(int *)(a1 + 328), a1 + 296);
            bn_mod_mul_montgomery_small(v34 + 27, v35 - 9, (unint64_t *)v37, *(int *)(a1 + 328), a1 + 296);
            bn_mod_mul_montgomery_small(v34 + 27, v34 + 27, (unint64_t *)&v44, *(int *)(a1 + 328), a1 + 296);
            --v11;
            v34 -= 18;
            v35 -= 27;
          }
          while (v11 < a4);
          return 1;
        }
        goto LABEL_26;
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v25 = v15 - v16;
    v26 = (uint64_t *)(144 * a4 + 8 * v16 + v6 - 144);
    do
    {
      v27 = *v26++;
      *(_QWORD *)&v17 |= v27;
      --v25;
    }
    while (v25);
    goto LABEL_13;
  }
LABEL_26:
  ERR_put_error(15, 0, 119, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec_montgomery.c", 189);
  return 0;
}

uint64_t ec_GFp_mont_cmp_x_coordinate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  int8x8_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x8_t v11;
  int8x16_t *v12;
  int8x16_t v13;
  uint64_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  unint64_t v34;
  int8x16_t *v35;
  int8x16_t *v36;
  int8x16_t v37;
  unint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  unint64_t v41;
  unint64_t v42;
  int8x8_t v43;
  int8x8_t *v44;
  int8x8_t *v45;
  unint64_t v46;
  int8x8_t v47;
  int8x8_t v48;
  int8x8_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 *p_s1;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char v82;
  char v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  unint64_t v88;
  int8x16_t *v89;
  int8x16_t *v90;
  int8x16_t v91;
  unint64_t v92;
  int8x16_t v93;
  int8x16_t v94;
  unint64_t v95;
  unint64_t v96;
  int8x8_t v97;
  int8x8_t *v98;
  int8x8_t *v99;
  unint64_t v100;
  int8x8_t v101;
  int8x8_t v102;
  int8x8_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char v107;
  char v108;
  char v109;
  __int128 v110;
  _OWORD v111[3];
  uint64_t v112;
  _OWORD v113[4];
  uint64_t v114;
  __int128 __s1;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;

  if (*(_DWORD *)(a1 + 536))
  {
    v6 = *(unsigned int *)(a1 + 328);
    if ((_DWORD)v6 == *(_DWORD *)(a1 + 264))
    {
      if ((int)v6 < 1)
        return 0;
      if (v6 >= 4)
      {
        v7 = v6 & 0x7FFFFFFC;
        v22 = (int8x16_t *)(a2 + 160);
        v23 = 0uLL;
        v24 = v6 & 0xFFFFFFFC;
        v25 = 0uLL;
        do
        {
          v23 = vorrq_s8(v22[-1], v23);
          v25 = vorrq_s8(*v22, v25);
          v22 += 2;
          v24 -= 4;
        }
        while (v24);
        v26 = vorrq_s8(v25, v23);
        v8 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
        if (v7 == v6)
        {
LABEL_25:
          if (!*(_QWORD *)&v8)
            return 0;
          v119 = 0;
          v117 = 0u;
          v118 = 0u;
          __s1 = 0u;
          v116 = 0u;
          v114 = 0;
          memset(v113, 0, sizeof(v113));
          v112 = 0;
          v110 = 0u;
          memset(v111, 0, sizeof(v111));
          bn_mod_mul_montgomery_small((unint64_t *)v113, (unint64_t *)(a2 + 144), (unint64_t *)(a2 + 144), (int)v6, a1 + 296);
          v30 = *(int *)(a1 + 328);
          if ((_DWORD)v30)
            __memcpy_chk();
          bn_mod_mul_montgomery_small((unint64_t *)&__s1, (unint64_t *)&__s1, (unint64_t *)v113, v30, a1 + 296);
          bn_from_montgomery_small((unint64_t *)&v110, *(int *)(a1 + 328), a2, *(int *)(a1 + 328), a1 + 296);
          v31 = *(int *)(a1 + 328);
          if (!(_DWORD)v31)
            return 1;
          v32 = 8 * v31;
          if (8 * v31 < 0x20)
          {
            v33 = 0;
            v34 = 0;
            goto LABEL_35;
          }
          v34 = v32 & 0xFFFFFFFFFFFFFFE0;
          v35 = (int8x16_t *)&v116;
          v36 = (int8x16_t *)v111;
          v37 = 0uLL;
          v38 = v32 & 0xFFFFFFFFFFFFFFE0;
          v39 = 0uLL;
          do
          {
            v37 = vorrq_s8(veorq_s8(v36[-1], v35[-1]), v37);
            v39 = vorrq_s8(veorq_s8(*v36, *v35), v39);
            v35 += 2;
            v36 += 2;
            v38 -= 32;
          }
          while (v38);
          v40 = vorrq_s8(v39, v37);
          *(int8x8_t *)v40.i8 = vorr_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
          v41 = v40.i64[0] | HIDWORD(v40.i64[0]) | ((unint64_t)(v40.i64[0] | HIDWORD(v40.i64[0])) >> 16);
          v33 = v41 | BYTE1(v41);
          v42 = v32 - v34;
          if (v32 != v34)
          {
            if ((v31 & 3) != 0)
            {
LABEL_35:
              v43 = (int8x8_t)v33;
              v44 = (int8x8_t *)((char *)&__s1 + v34);
              v45 = (int8x8_t *)((char *)&v111[-1] + v34);
              v46 = v34 - v32;
              do
              {
                v47 = *v44++;
                v48 = v47;
                v49 = *v45++;
                v43 = vorr_s8(veor_s8(v49, v48), v43);
                v46 += 8;
              }
              while (v46);
              v50 = *(_QWORD *)&v43 | HIDWORD(*(_QWORD *)&v43) | ((*(_QWORD *)&v43 | HIDWORD(*(_QWORD *)&v43)) >> 16);
              v33 = v50 | BYTE1(v50);
              goto LABEL_38;
            }
            v80 = (char *)&v111[-1] + v34;
            v81 = (char *)&__s1 + v34;
            do
            {
              v83 = *v81++;
              v82 = v83;
              v84 = *v80++;
              v33 |= v84 ^ v82;
              --v42;
            }
            while (v42);
          }
LABEL_38:
          if (v33)
          {
            v51 = *(uint64_t **)(a1 + 256);
            if (v31 >= 4)
            {
              v52 = 0;
              p_s1 = &__s1;
              v54 = *(int *)(a1 + 328);
              do
              {
                v55 = *v51;
                v56 = a3[1];
                v57 = __CFADD__(*a3, v52);
                v58 = *a3 + v52;
                v59 = v57;
                v57 = __CFADD__(v58, v55);
                *(_QWORD *)p_s1 = v58 + v55;
                v60 = v51[1];
                v61 = v59 + v57 + v56;
                if (__CFADD__(v57, v56) | __CFADD__(v59, v57 + v56))
                  v62 = 1;
                else
                  v62 = 0;
                v57 = __CFADD__(v61, v60);
                *((_QWORD *)p_s1 + 1) = v61 + v60;
                v63 = v51[2];
                v64 = a3[2];
                v65 = a3[3];
                v67 = v57;
                v57 = __CFADD__(v57, v64);
                v66 = v67 + v64;
                v57 |= __CFADD__(v62, v66);
                v66 += v62;
                v68 = v57;
                *((_QWORD *)p_s1 + 2) = v66 + v63;
                v69 = v51[3];
                v57 = __CFADD__(v69, v65);
                v70 = v69 + v65;
                v71 = v57;
                v57 = __CFADD__(__CFADD__(v66, v63), v70);
                v72 = __CFADD__(v66, v63) + v70;
                v57 |= __CFADD__(v68, v72);
                v72 += v68;
                if (v57)
                  v52 = v71 + 1;
                else
                  v52 = v71;
                *((_QWORD *)p_s1 + 3) = v72;
                a3 += 4;
                v51 += 4;
                p_s1 += 2;
                v54 -= 4;
              }
              while (v54 >= 4);
              if (!v54)
              {
LABEL_66:
                if (v52
                  || (bn_cmp_words_consttime((uint64_t *)&__s1, v31, *(uint64_t **)(a1 + 320), v31) & 0x80000000) == 0)
                {
                  return 0;
                }
                bn_mod_mul_montgomery_small((unint64_t *)&__s1, (unint64_t *)&__s1, (unint64_t *)v113, v31, a1 + 296);
                v85 = *(int *)(a1 + 328);
                if (!(_DWORD)v85)
                  return 1;
                v86 = 8 * v85;
                if ((unint64_t)(8 * v85) < 0x20)
                {
                  v87 = 0;
                  v88 = 0;
                  goto LABEL_79;
                }
                v88 = v86 & 0xFFFFFFFFFFFFFFE0;
                v89 = (int8x16_t *)&v116;
                v90 = (int8x16_t *)v111;
                v91 = 0uLL;
                v92 = v86 & 0xFFFFFFFFFFFFFFE0;
                v93 = 0uLL;
                do
                {
                  v91 = vorrq_s8(veorq_s8(v90[-1], v89[-1]), v91);
                  v93 = vorrq_s8(veorq_s8(*v90, *v89), v93);
                  v89 += 2;
                  v90 += 2;
                  v92 -= 32;
                }
                while (v92);
                v94 = vorrq_s8(v93, v91);
                *(int8x8_t *)v94.i8 = vorr_s8(*(int8x8_t *)v94.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v94, v94, 8uLL));
                v95 = v94.i64[0] | HIDWORD(v94.i64[0]) | ((unint64_t)(v94.i64[0] | HIDWORD(v94.i64[0])) >> 16);
                v87 = v95 | BYTE1(v95);
                v96 = v86 - v88;
                if (v86 != v88)
                {
                  if ((v85 & 3) != 0)
                  {
LABEL_79:
                    v97 = (int8x8_t)v87;
                    v98 = (int8x8_t *)((char *)&__s1 + v88);
                    v99 = (int8x8_t *)((char *)&v111[-1] + v88);
                    v100 = v88 - v86;
                    do
                    {
                      v101 = *v98++;
                      v102 = v101;
                      v103 = *v99++;
                      v97 = vorr_s8(veor_s8(v103, v102), v97);
                      v100 += 8;
                    }
                    while (v100);
                    v104 = *(_QWORD *)&v97 | HIDWORD(*(_QWORD *)&v97) | ((*(_QWORD *)&v97 | HIDWORD(*(_QWORD *)&v97)) >> 16);
                    v87 = v104 | BYTE1(v104);
                    return !v87;
                  }
                  v105 = (char *)&v111[-1] + v88;
                  v106 = (char *)&__s1 + v88;
                  do
                  {
                    v108 = *v106++;
                    v107 = v108;
                    v109 = *v105++;
                    v87 |= v109 ^ v107;
                    --v96;
                  }
                  while (v96);
                }
                return !v87;
              }
            }
            else
            {
              v52 = 0;
              p_s1 = &__s1;
              v54 = *(int *)(a1 + 328);
            }
            do
            {
              v74 = *a3++;
              v73 = v74;
              v76 = *v51++;
              v75 = v76;
              v57 = __CFADD__(v73, v52);
              v77 = v73 + v52;
              v78 = v57;
              v57 = __CFADD__(v77, v75);
              v79 = v77 + v75;
              if (v57)
                v52 = v78 + 1;
              else
                v52 = v78;
              *(_QWORD *)p_s1 = v79;
              p_s1 = (__int128 *)((char *)p_s1 + 8);
              --v54;
            }
            while (v54);
            goto LABEL_66;
          }
          return 1;
        }
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      v27 = v6 - v7;
      v28 = (uint64_t *)(a2 + 8 * v7 + 144);
      do
      {
        v29 = *v28++;
        *(_QWORD *)&v8 |= v29;
        --v27;
      }
      while (v27);
      goto LABEL_25;
    }
  }
  else
  {
    LODWORD(v6) = *(_DWORD *)(a1 + 328);
  }
  if ((int)v6 < 1)
    return 0;
  v9 = v6;
  if (v6 < 4)
  {
    v10 = 0;
    v11 = 0;
LABEL_13:
    v17 = v9 - v10;
    v18 = (uint64_t *)(a2 + 8 * v10 + 144);
    do
    {
      v19 = *v18++;
      *(_QWORD *)&v11 |= v19;
      --v17;
    }
    while (v17);
    goto LABEL_15;
  }
  v10 = v6 & 0x7FFFFFFC;
  v12 = (int8x16_t *)(a2 + 160);
  v13 = 0uLL;
  v14 = v9 & 0xFFFFFFFC;
  v15 = 0uLL;
  do
  {
    v13 = vorrq_s8(v12[-1], v13);
    v15 = vorrq_s8(*v12, v15);
    v12 += 2;
    v14 -= 4;
  }
  while (v14);
  v16 = vorrq_s8(v15, v13);
  v11 = vorr_s8(*(int8x8_t *)v16.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
  if (v10 != v9)
    goto LABEL_13;
LABEL_15:
  if (!*(_QWORD *)&v11)
    return 0;
  v119 = 0;
  v117 = 0u;
  v118 = 0u;
  __s1 = 0u;
  v116 = 0u;
  result = ec_get_x_coordinate_as_scalar(a1, (unint64_t *)&__s1, a2);
  if ((_DWORD)result)
  {
    v21 = *(int *)(a1 + 264);
    if (!(_DWORD)v21)
      return 1;
    return memcmp(&__s1, a3, 8 * v21) == 0;
  }
  return result;
}

int ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key, EC_KEY *ecdh, void *(__cdecl *KDF)(const void *, size_t, void *, size_t *))
{
  uint64_t v5;
  unint64_t v8;
  const EC_GROUP *v10;
  int v11;
  int v12;
  int v13;
  size_t v15;
  int8x16_t v16[13];
  uint64_t v17;
  size_t v18;
  _BYTE __src[66];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v18 = outlen;
  v5 = *((_QWORD *)ecdh + 2);
  if (!v5)
  {
    v11 = 27;
    v12 = 101;
    v13 = 85;
    goto LABEL_13;
  }
  v8 = outlen;
  v10 = *(const EC_GROUP **)ecdh;
  if (EC_GROUP_cmp(*(const EC_GROUP **)ecdh, *(const EC_GROUP **)pub_key, 0))
  {
    v11 = 15;
    v12 = 106;
    v13 = 91;
LABEL_13:
    ERR_put_error(v11, 0, v12, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ecdh_extra/ecdh_extra.c", v13);
    LODWORD(v8) = -1;
    return v8;
  }
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  v15 = 0;
  (*(void (**)(const EC_GROUP *, int8x16_t *, char *, uint64_t))(*(_QWORD *)v10 + 32))(v10, v16, (char *)pub_key + 8, v5 + 24);
  if (!ec_GFp_simple_is_on_curve((uint64_t)v10, v16))
  {
    ERR_put_error(15, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 846);
    goto LABEL_12;
  }
  if (!ec_get_x_coordinate_as_bytes((uint64_t)v10, (uint64_t)__src, &v15, 0x42uLL, (uint64_t)v16))
  {
LABEL_12:
    v11 = 27;
    v12 = 102;
    v13 = 101;
    goto LABEL_13;
  }
  if (KDF)
  {
    if (!((uint64_t (*)(_BYTE *, size_t, void *, size_t *))KDF)(__src, v15, out, &v18))
    {
      v11 = 27;
      v12 = 100;
      v13 = 107;
      goto LABEL_13;
    }
    LODWORD(v8) = v18;
    if (v18 >> 31)
      goto LABEL_19;
  }
  else
  {
    if (v15 < v8)
    {
      v18 = v15;
      v8 = v15;
    }
    if (v8)
    {
      memcpy(out, __src, v8);
      if (v8 >> 31)
      {
LABEL_19:
        v11 = 27;
        v12 = 69;
        v13 = 119;
        goto LABEL_13;
      }
    }
  }
  return v8;
}

ECDSA_SIG *ECDSA_SIG_new(void)
{
  _QWORD *v0;
  _QWORD *v1;
  ECDSA_SIG *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  uint64_t *v13;
  uint64_t v14;
  size_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  size_t v20;
  _QWORD *v21;
  uint64_t v22;
  size_t v23;

  v0 = malloc_type_malloc(0x18uLL, 0x30772F57uLL);
  if (!v0)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v1 = v0;
  *v0 = 16;
  v2 = (ECDSA_SIG *)(v0 + 1);
  v3 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v3)
  {
    *v3 = 24;
    v3[1] = 0;
    v3[2] = 0;
    v3[3] = 0x100000000;
    v2->r = (BIGNUM *)(v3 + 1);
    v4 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (v4)
      goto LABEL_4;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v2->r = 0;
    v4 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (v4)
    {
LABEL_4:
      v4[1] = 0;
      v5 = v4 + 1;
      *v4 = 24;
      v4[2] = 0;
      v4[3] = 0x100000000;
      v1[2] = v4 + 1;
      if (v1[1])
        return v2;
      goto LABEL_20;
    }
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  v1[2] = 0;
  v7 = (uint64_t *)v1[1];
  if (!v7)
    goto LABEL_27;
  v8 = *((_DWORD *)v7 + 5);
  if ((v8 & 2) == 0)
  {
    v9 = *v7;
    if (*v7)
    {
      v11 = *(_QWORD *)(v9 - 8);
      v10 = (void *)(v9 - 8);
      v12 = v11 + 8;
      if (v11 != -8)
        bzero(v10, v12);
      free(v10);
      v8 = *((_DWORD *)v7 + 5);
    }
  }
  if ((v8 & 1) != 0)
  {
    v14 = *(v7 - 1);
    v13 = v7 - 1;
    v15 = v14 + 8;
    if (v14 != -8)
      bzero(v13, v15);
    free(v13);
    v5 = (_QWORD *)v1[2];
    if (!v5)
      goto LABEL_27;
  }
  else
  {
    *v7 = 0;
    v5 = (_QWORD *)v1[2];
    if (!v5)
      goto LABEL_27;
  }
LABEL_20:
  v16 = *((_DWORD *)v5 + 5);
  if ((v16 & 2) == 0)
  {
    v17 = *v5;
    if (*v5)
    {
      v19 = *(_QWORD *)(v17 - 8);
      v18 = (void *)(v17 - 8);
      v20 = v19 + 8;
      if (v19 != -8)
        bzero(v18, v20);
      free(v18);
      v16 = *((_DWORD *)v5 + 5);
    }
  }
  if ((v16 & 1) != 0)
  {
    v22 = *(v5 - 1);
    v21 = v5 - 1;
    v23 = v22 + 8;
    if (v22 != -8)
      bzero(v21, v23);
    free(v21);
    if (*v1 == -8)
      goto LABEL_29;
    goto LABEL_28;
  }
  *v5 = 0;
LABEL_27:
  if (*v1 != -8)
LABEL_28:
    __memset_chk();
LABEL_29:
  free(v1);
  return 0;
}

uint64_t ecdsa_do_verify_no_self_test(unsigned __int8 *a1, unint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  int8x16_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v13;
  unint64_t v14;
  int8x8_t v15;
  int v16;
  int v17;
  int8x16_t *v18;
  unint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  int8x8_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, _OWORD *, _OWORD *, uint64_t, _OWORD *);
  _OWORD v42[13];
  uint64_t v43;
  int8x16_t v44[4];
  uint64_t v45;
  _OWORD v46[4];
  uint64_t v47;
  _OWORD v48[4];
  uint64_t v49;
  _OWORD v50[4];
  uint64_t v51;
  _OWORD v52[4];
  uint64_t v53;
  _OWORD __dst[4];
  uint64_t v55;

  if (!a3 || ((v4 = *a4, v5 = a4[1], *a4) ? (v6 = v5 == 0) : (v6 = 1), v6))
  {
    v16 = 101;
    v17 = 156;
LABEL_34:
    ERR_put_error(26, 0, v16, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ecdsa/ecdsa.c", v17);
    return 0;
  }
  v55 = 0;
  v8 = 0uLL;
  memset(__dst, 0, sizeof(__dst));
  v53 = 0;
  memset(v52, 0, sizeof(v52));
  v51 = 0;
  memset(v50, 0, sizeof(v50));
  v49 = 0;
  memset(v48, 0, sizeof(v48));
  v47 = 0;
  memset(v46, 0, sizeof(v46));
  v45 = 0;
  memset(v44, 0, sizeof(v44));
  v9 = *a3;
  v10 = *(int *)(v9 + 8);
  if (!(_DWORD)v10)
    goto LABEL_33;
  v13 = *(char **)v9;
  if (v10 >= 4)
  {
    v14 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    v18 = (int8x16_t *)(v13 + 16);
    v19 = v10 & 0xFFFFFFFFFFFFFFFCLL;
    v20 = 0uLL;
    do
    {
      v8 = vorrq_s8(v18[-1], v8);
      v20 = vorrq_s8(*v18, v20);
      v18 += 2;
      v19 -= 4;
    }
    while (v19);
    v21 = vorrq_s8(v20, v8);
    v15 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
    if (v14 == v10)
      goto LABEL_15;
  }
  else
  {
    v14 = 0;
    v15 = 0;
  }
  v22 = v10 - v14;
  v23 = &v13[8 * v14];
  do
  {
    v24 = *(_QWORD *)v23;
    v23 += 8;
    *(_QWORD *)&v15 |= v24;
    --v22;
  }
  while (v22);
LABEL_15:
  if (!*(_QWORD *)&v15)
    goto LABEL_33;
  if (!bn_copy_words(__dst, *(int *)(v4 + 264), (char **)v9))
    goto LABEL_32;
  v25 = *(int *)(v4 + 264);
  if ((int)bn_cmp_words_consttime((uint64_t *)__dst, v25, *(uint64_t **)(v4 + 256), v25) >= 0)
    goto LABEL_32;
  v26 = a3[1];
  v27 = *(int *)(v26 + 8);
  if (!(_DWORD)v27)
  {
LABEL_33:
    v16 = 100;
    v17 = 165;
    goto LABEL_34;
  }
  v28 = *(char **)v26;
  if (v27 < 4)
  {
    v29 = 0;
    v30 = 0;
LABEL_24:
    v36 = v27 - v29;
    v37 = &v28[8 * v29];
    do
    {
      v38 = *(_QWORD *)v37;
      v37 += 8;
      *(_QWORD *)&v30 |= v38;
      --v36;
    }
    while (v36);
    goto LABEL_26;
  }
  v29 = v27 & 0xFFFFFFFFFFFFFFFCLL;
  v31 = (int8x16_t *)(v28 + 16);
  v32 = 0uLL;
  v33 = v27 & 0xFFFFFFFFFFFFFFFCLL;
  v34 = 0uLL;
  do
  {
    v32 = vorrq_s8(v31[-1], v32);
    v34 = vorrq_s8(*v31, v34);
    v31 += 2;
    v33 -= 4;
  }
  while (v33);
  v35 = vorrq_s8(v34, v32);
  v30 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
  if (v29 != v27)
    goto LABEL_24;
LABEL_26:
  if (!*(_QWORD *)&v30)
    goto LABEL_33;
  if (!bn_copy_words(v52, v25, (char **)v26)
    || (int)bn_cmp_words_consttime((uint64_t *)v52, *(int *)(v4 + 264), *(uint64_t **)(v4 + 256), *(int *)(v4 + 264)) >= 0)
  {
LABEL_32:
    ERR_put_error(15, 0, 133, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/scalar.c", 32);
    goto LABEL_33;
  }
  if (!(*(unsigned int (**)(uint64_t, _OWORD *, _OWORD *))(*(_QWORD *)v4 + 144))(v4, v46, v52))
  {
    v16 = 68;
    v17 = 171;
    goto LABEL_34;
  }
  digest_to_scalar(v4, v44, a1, a2);
  bn_mod_mul_montgomery_small((unint64_t *)v50, (unint64_t *)v44, (unint64_t *)v46, *(int *)(v4 + 264), v4 + 232);
  bn_mod_mul_montgomery_small((unint64_t *)v48, (unint64_t *)__dst, (unint64_t *)v46, *(int *)(v4 + 264), v4 + 232);
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  v39 = v5 + 8;
  v40 = *(void (**)(uint64_t, _OWORD *, _OWORD *, uint64_t, _OWORD *))(*(_QWORD *)v4 + 56);
  if (v40)
  {
    v40(v4, v42, v50, v39, v48);
  }
  else if (!(*(unsigned int (**)(uint64_t, _OWORD *, _OWORD *, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v4 + 64))(v4, v42, v50, v39, v48, 1))
  {
    v16 = 15;
    v17 = 186;
    goto LABEL_34;
  }
  if (!(*(unsigned int (**)(uint64_t, _OWORD *, _OWORD *))(*(_QWORD *)v4 + 152))(v4, v42, __dst))
  {
    v16 = 100;
    v17 = 191;
    goto LABEL_34;
  }
  return 1;
}

unint64_t digest_to_scalar(uint64_t a1, int8x16_t *__dst, unsigned __int8 *a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  int64x2_t v32;
  int8x16_t *v33;
  int8x16_t *v34;
  int64x2_t v35;
  uint64_t v36;
  int8x16_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t result;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t *v47;
  int8x16_t *v48;
  unint64_t v49;
  int8x16_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t *v54;
  uint64_t v55;
  unint64_t v56[2];
  _QWORD v57[8];

  v57[7] = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int *)(a1 + 264);
  v7 = (int)v6;
  v8 = v6 & ((int)v6 >> 31);
  v9 = 8 * v6 - 8;
  v10 = *(_DWORD *)(a1 + 264);
  while (1)
  {
    v11 = __OFSUB__(v10--, 1);
    if (v10 < 0 != v11)
      break;
    v12 = *(_QWORD *)(a1 + 256);
    v13 = *(_QWORD *)(v12 + v9);
    v9 -= 8;
    if (v13)
    {
      v8 = v10 + 1;
      goto LABEL_8;
    }
  }
  if ((v6 & 0x80000000) == 0)
  {
    v14 = 0;
    goto LABEL_20;
  }
  v12 = *(_QWORD *)(a1 + 256);
LABEL_8:
  v15 = v8 - 1;
  v16 = *(_QWORD *)(v12 + 8 * v15);
  v17 = v16 != 0;
  v18 = HIDWORD(v16) != 0;
  if (HIDWORD(v16))
    v16 >>= 32;
  v19 = v16 >> 16 != 0;
  if (v16 >> 16)
    v16 >>= 16;
  v20 = v16 > 0xFF;
  if (v16 > 0xFF)
    v16 >>= 8;
  v21 = v16 > 0xF;
  if (v16 > 0xF)
    v16 >>= 4;
  v22 = v16 > 3;
  if (v16 > 3)
    v16 >>= 2;
  v14 = v17 | (v15 << 6) | (32 * v18) | (16 * v19) | (8 * v20) | (4 * v21) | (2 * v22);
  if (v16 > 1)
    ++v14;
LABEL_20:
  v23 = v14;
  v24 = ((unint64_t)v14 + 7) >> 3;
  if (v24 >= a4)
    v25 = a4;
  else
    v25 = v24;
  if (v25 > 8 * (int)v6)
    abort();
  v26 = v25 - 8;
  if (v25 < 8)
  {
    v28 = (uint64_t *)__dst;
    v27 = v25;
    goto LABEL_35;
  }
  if (v26 < 0x58)
  {
    v27 = v25;
    v28 = (uint64_t *)__dst;
LABEL_33:
    v38 = v27;
    do
    {
      v27 = v38 - 8;
      *v28++ = bswap64(*(_QWORD *)&a3[v38 - 8]);
      --v7;
      v38 = v27;
    }
    while (v27 > 7);
    goto LABEL_35;
  }
  if (&a3[v25] > (unsigned __int8 *)__dst)
  {
    v27 = v25;
    v28 = (uint64_t *)__dst;
    if (&a3[v25 & 7] < &__dst->u8[v25 & 0x3FFFFFF8])
      goto LABEL_33;
  }
  v29 = (v26 >> 3) + 1;
  v30 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  v27 = v25 - v30 * 8;
  v28 = &__dst->i64[v30];
  v31 = (int64x2_t)(unint64_t)(int)v6;
  v32 = 0uLL;
  v33 = (int8x16_t *)&a3[v25 - 16];
  v34 = __dst + 1;
  v35.i64[0] = -1;
  v35.i64[1] = -1;
  v36 = v29 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v37 = vrev64q_s8(vextq_s8(v33[-1], v33[-1], 8uLL));
    v34[-1] = vrev64q_s8(vextq_s8(*v33, *v33, 8uLL));
    *v34 = v37;
    v31 = vaddq_s64(v31, v35);
    v32 = vaddq_s64(v32, v35);
    v33 -= 2;
    v34 += 2;
    v36 -= 4;
  }
  while (v36);
  v7 = vaddvq_s64(vaddq_s64(v32, v31));
  if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_33;
LABEL_35:
  if (v27)
  {
    v39 = 0;
    do
    {
      v40 = *a3++;
      v39 = v40 | (unint64_t)(v39 << 8);
      --v27;
    }
    while (v27);
    *v28++ = v39;
    --v7;
  }
  if (8 * v7)
  {
    bzero(v28, 8 * v7);
    LODWORD(v6) = *(_DWORD *)(a1 + 264);
  }
  if (v23 < 8 * v25)
  {
    bn_rshift_words(__dst, (uint64_t)__dst, 8 - (v23 & 7), (int)v6);
    LODWORD(v6) = *(_DWORD *)(a1 + 264);
  }
  result = bn_sub_words(v56, (const unint64_t *)__dst, *(const unint64_t **)(a1 + 256), v6);
  if ((_DWORD)v6)
  {
    v42 = 0;
    v43 = -(uint64_t)result;
    v44 = result - 1;
    if (v6 < 4)
      goto LABEL_48;
    v42 = (int)v6 & 0xFFFFFFFFFFFFFFFCLL;
    v45 = (int8x16_t)vdupq_n_s64(v43);
    v46 = (int8x16_t)vdupq_n_s64(v44);
    v47 = __dst + 1;
    v48 = (int8x16_t *)v57;
    v49 = v42;
    do
    {
      v50 = vorrq_s8(vandq_s8(*v48, v46), vandq_s8(*v47, v45));
      v47[-1] = vorrq_s8(vandq_s8(v48[-1], v46), vandq_s8(v47[-1], v45));
      *v47 = v50;
      v47 += 2;
      v48 += 2;
      v49 -= 4;
    }
    while (v49);
    if (v42 != (int)v6)
    {
LABEL_48:
      v51 = (int)v6 - v42;
      v52 = v42;
      v53 = &v56[v42];
      v54 = &__dst->u64[v52];
      do
      {
        v55 = *v53++;
        *v54 = v55 & v44 | *v54 & v43;
        ++v54;
        --v51;
      }
      while (v51);
    }
  }
  return result;
}

_QWORD *ecdsa_sign_impl(uint64_t a1, _DWORD *a2, unint64_t *a3, _QWORD *a4, unsigned __int8 *a5, unint64_t a6)
{
  _QWORD *v8;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _BOOL4 v25;
  _BOOL4 v26;
  unsigned int v27;
  const char *v28;
  int v29;
  int v30;
  int v31;
  uint64_t v33;
  uint64_t v34;
  int8x8_t v35;
  int8x16_t *v36;
  int8x16_t v37;
  uint64_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unint64_t v53;
  _BOOL4 v54;
  _BOOL4 v55;
  _BOOL4 v56;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int8x16_t *v64;
  uint64_t v65;
  uint64_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int8x16_t *v69;
  int8x16_t *v70;
  int64x2_t v71;
  uint64_t v72;
  int8x16_t v73;
  unint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t *v83;
  int8x16_t *v84;
  unint64_t v85;
  int8x16_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t *v90;
  uint64_t v91;
  const unint64_t *v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t *v101;
  int8x16_t *v102;
  unint64_t v103;
  int8x16_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int8x8_t v112;
  _BOOL4 v113;
  int8x16_t *v114;
  int8x16_t v115;
  uint64_t v116;
  int8x16_t v117;
  int8x16_t v118;
  uint64_t v119;
  unint64_t *v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  BIGNUM *v124;
  BIGNUM *v125;
  BOOL v126;
  int8x16_t v127;
  _OWORD v128[3];
  uint64_t v129;
  unint64_t ap[2];
  _OWORD v131[3];
  uint64_t v132;
  __int128 v133;
  _OWORD v134[3];
  uint64_t v135;
  int8x16_t v136[13];
  uint64_t v137;
  unint64_t rp[2];
  _QWORD v139[8];

  v8 = a4;
  v139[7] = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  v12 = *(unsigned int *)(a1 + 264);
  v13 = v12 & ((int)v12 >> 31);
  v14 = 8 * v12 - 8;
  v15 = *(_DWORD *)(a1 + 264);
  while (1)
  {
    v16 = __OFSUB__(v15--, 1);
    if (v15 < 0 != v16)
      break;
    v17 = *(_QWORD *)(a1 + 256);
    v18 = *(_QWORD *)(v17 + v14);
    v14 -= 8;
    if (v18)
    {
      v13 = v15 + 1;
      goto LABEL_7;
    }
  }
  if ((v12 & 0x80000000) == 0)
    goto LABEL_20;
  v17 = *(_QWORD *)(a1 + 256);
LABEL_7:
  v19 = v13 - 1;
  v20 = *(_QWORD *)(v17 + 8 * v19);
  v21 = v20 != 0;
  v22 = HIDWORD(v20) != 0;
  if (HIDWORD(v20))
    v20 >>= 32;
  v23 = v20 >> 16 != 0;
  if (v20 >> 16)
    v20 >>= 16;
  v24 = v20 > 0xFF;
  if (v20 > 0xFF)
    v20 >>= 8;
  v25 = v20 > 0xF;
  if (v20 > 0xF)
    v20 >>= 4;
  v26 = v20 > 3;
  if (v20 > 3)
    v20 >>= 2;
  v27 = v21 | (v19 << 6) | (32 * v22) | (16 * v23) | (8 * v24) | (4 * v25) | (2 * v26);
  if (v20 > 1)
    ++v27;
  if (v27 <= 0x9F)
  {
LABEL_20:
    v28 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/fipsmodule/ecdsa/ecdsa.c";
    v29 = 26;
    v30 = 112;
    v31 = 214;
LABEL_21:
    ERR_put_error(v29, 0, v30, v28, v31);
    return 0;
  }
  v137 = 0;
  memset(v136, 0, sizeof(v136));
  v135 = 0;
  v133 = 0u;
  memset(v134, 0, sizeof(v134));
  if (!a4)
  {
    ERR_put_error(15, 0, 67, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/ec.c", 856);
    return v8;
  }
  (*(void (**)(uint64_t, int8x16_t *, _QWORD *))(*(_QWORD *)a1 + 40))(a1, v136, a4);
  if (!ec_GFp_simple_is_on_curve(a1, v136))
  {
    v28 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/fipsmodule/ec/ec.c";
    v29 = 15;
    v30 = 68;
    v31 = 867;
    goto LABEL_21;
  }
  if (!ec_get_x_coordinate_as_scalar(a1, (unint64_t *)&v133, (uint64_t)v136))
    return 0;
  v33 = *(unsigned int *)(a1 + 264);
  if ((int)v33 < 1)
    goto LABEL_104;
  if (v33 < 4)
  {
    v34 = 0;
    v35 = 0;
LABEL_36:
    v41 = v33 - v34;
    v42 = (uint64_t *)&v134[-1] + v34;
    do
    {
      v43 = *v42++;
      *(_QWORD *)&v35 |= v43;
      --v41;
    }
    while (v41);
    goto LABEL_38;
  }
  v34 = v33 & 0x7FFFFFFC;
  v36 = (int8x16_t *)v134;
  v37 = 0uLL;
  v38 = v33 & 0xFFFFFFFC;
  v39 = 0uLL;
  do
  {
    v37 = vorrq_s8(v36[-1], v37);
    v39 = vorrq_s8(*v36, v39);
    v36 += 2;
    v38 -= 4;
  }
  while (v38);
  v40 = vorrq_s8(v39, v37);
  v35 = vorr_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
  if (v34 != v33)
    goto LABEL_36;
LABEL_38:
  if (!*(_QWORD *)&v35)
  {
LABEL_104:
    v8 = 0;
    *a2 = 1;
    return v8;
  }
  v132 = 0;
  *(_OWORD *)ap = 0u;
  memset(v131, 0, sizeof(v131));
  bn_mod_mul_montgomery_small(ap, (unint64_t *)&v133, *(unint64_t **)(a1 + 232), (int)v33, a1 + 232);
  bn_mod_mul_montgomery_small(ap, a3, ap, *(int *)(a1 + 264), a1 + 232);
  v129 = 0;
  v127 = 0u;
  memset(v128, 0, sizeof(v128));
  v44 = *(unsigned int *)(a1 + 264);
  v45 = (int)v44;
  v46 = v44 & ((int)v44 >> 31);
  v47 = 8 * v44 - 8;
  v48 = *(_DWORD *)(a1 + 264);
  while (1)
  {
    v16 = __OFSUB__(v48--, 1);
    if (v48 < 0 != v16)
      break;
    v49 = *(_QWORD *)(a1 + 256);
    v50 = *(_QWORD *)(v49 + v47);
    v47 -= 8;
    if (v50)
    {
      v46 = v48 + 1;
      goto LABEL_46;
    }
  }
  if ((v44 & 0x80000000) == 0)
  {
    v51 = 0;
    goto LABEL_58;
  }
  v49 = *(_QWORD *)(a1 + 256);
LABEL_46:
  v52 = v46 - 1;
  v53 = *(_QWORD *)(v49 + 8 * v52);
  v54 = v53 != 0;
  v55 = HIDWORD(v53) != 0;
  if (HIDWORD(v53))
    v53 >>= 32;
  v56 = v53 >> 16 != 0;
  if (v53 >> 16)
    v53 >>= 16;
  v57 = v53 > 0xFF;
  if (v53 > 0xFF)
    v53 >>= 8;
  v58 = v53 > 0xF;
  if (v53 > 0xF)
    v53 >>= 4;
  v59 = v53 > 3;
  if (v53 > 3)
    v53 >>= 2;
  v51 = v54 | (v52 << 6) | (32 * v55) | (16 * v56) | (8 * v57) | (4 * v58) | (2 * v59);
  if (v53 > 1)
    ++v51;
LABEL_58:
  v60 = v51;
  v61 = ((unint64_t)v51 + 7) >> 3;
  if (v61 < a6)
    a6 = v61;
  if (a6 > 8 * (int)v44)
    abort();
  v62 = a6 - 8;
  if (a6 < 8)
  {
    v64 = &v127;
    v63 = a6;
  }
  else
  {
    v63 = a6;
    v64 = &v127;
    if (v62 < 0x18)
      goto LABEL_66;
    v65 = (v62 >> 3) + 1;
    v66 = 8 * (v65 & 0x3FFFFFFFFFFFFFFCLL);
    v63 = a6 - v66;
    v64 = (int8x16_t *)((char *)&v127 + v66);
    v67 = (int64x2_t)(unint64_t)(int)v44;
    v68 = 0uLL;
    v69 = (int8x16_t *)&a5[a6 - 16];
    v70 = (int8x16_t *)v128;
    v71.i64[0] = -1;
    v71.i64[1] = -1;
    v72 = v65 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v73 = vrev64q_s8(vextq_s8(v69[-1], v69[-1], 8uLL));
      v70[-1] = vrev64q_s8(vextq_s8(*v69, *v69, 8uLL));
      *v70 = v73;
      v67 = vaddq_s64(v67, v71);
      v68 = vaddq_s64(v68, v71);
      v69 -= 2;
      v70 += 2;
      v72 -= 4;
    }
    while (v72);
    v45 = vaddvq_s64(vaddq_s64(v68, v67));
    if (v65 != (v65 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_66:
      v74 = v63;
      do
      {
        v63 = v74 - 8;
        v64->i64[0] = bswap64(*(_QWORD *)&a5[v74 - 8]);
        v64 = (int8x16_t *)((char *)v64 + 8);
        --v45;
        v74 = v63;
      }
      while (v63 > 7);
    }
  }
  if (v63)
  {
    v75 = 0;
    do
    {
      v76 = *a5++;
      v75 = v76 | (unint64_t)(v75 << 8);
      --v63;
    }
    while (v63);
    v64->i64[0] = v75;
    v64 = (int8x16_t *)((char *)v64 + 8);
    --v45;
  }
  if (8 * v45)
  {
    bzero(v64, 8 * v45);
    LODWORD(v44) = *(_DWORD *)(a1 + 264);
  }
  if (v60 < 8 * a6)
  {
    bn_rshift_words(&v127, (uint64_t)&v127, 8 - (v60 & 7), (int)v44);
    LODWORD(v44) = *(_DWORD *)(a1 + 264);
  }
  v77 = bn_sub_words(rp, (const unint64_t *)&v127, *(const unint64_t **)(a1 + 256), v44);
  if ((_DWORD)v44)
  {
    v78 = 0;
    v79 = -(uint64_t)v77;
    v80 = v77 - 1;
    if (v44 < 4)
      goto LABEL_83;
    v81 = (int8x16_t)vdupq_n_s64(v79);
    v82 = (int8x16_t)vdupq_n_s64(v80);
    v78 = (int)v44 & 0xFFFFFFFFFFFFFFFCLL;
    v83 = (int8x16_t *)v128;
    v84 = (int8x16_t *)v139;
    v85 = v78;
    do
    {
      v86 = vorrq_s8(vandq_s8(*v84, v82), vandq_s8(*v83, v81));
      v83[-1] = vorrq_s8(vandq_s8(v84[-1], v82), vandq_s8(v83[-1], v81));
      *v83 = v86;
      v83 += 2;
      v84 += 2;
      v85 -= 4;
    }
    while (v85);
    if (v78 != (int)v44)
    {
LABEL_83:
      v87 = (int)v44 - v78;
      v88 = v78;
      v89 = &rp[v78];
      v90 = &v127.u64[v88];
      do
      {
        v91 = *v89++;
        *v90 = v91 & v80 | *v90 & v79;
        ++v90;
        --v87;
      }
      while (v87);
    }
  }
  v92 = *(const unint64_t **)(a1 + 256);
  v93 = *(int *)(a1 + 264);
  v94 = bn_add_words(ap, ap, (const unint64_t *)&v127, *(_DWORD *)(a1 + 264));
  v95 = bn_sub_words(rp, ap, v92, v93);
  if ((_DWORD)v93)
  {
    v96 = v94 - v95;
    v97 = ~(v94 - v95);
    if (v93 < 4)
    {
      v98 = 0;
LABEL_91:
      v105 = v93 - v98;
      v106 = v98;
      v107 = &rp[v98];
      v108 = &ap[v106];
      do
      {
        v109 = *v107++;
        *v108 = v109 & v97 | *v108 & v96;
        ++v108;
        --v105;
      }
      while (v105);
      goto LABEL_93;
    }
    v99 = (int8x16_t)vdupq_n_s64(v96);
    v100 = (int8x16_t)vdupq_n_s64(v97);
    v98 = v93 & 0xFFFFFFFFFFFFFFFCLL;
    v101 = (int8x16_t *)v131;
    v102 = (int8x16_t *)v139;
    v103 = v93 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v104 = vorrq_s8(vandq_s8(*v102, v100), vandq_s8(*v101, v99));
      v101[-1] = vorrq_s8(vandq_s8(v102[-1], v100), vandq_s8(v101[-1], v99));
      *v101 = v104;
      v101 += 2;
      v102 += 2;
      v103 -= 4;
    }
    while (v103);
    if (v98 != v93)
      goto LABEL_91;
  }
LABEL_93:
  (*(void (**)(uint64_t, int8x16_t *, _QWORD *))(*(_QWORD *)a1 + 136))(a1, &v127, v8);
  bn_from_montgomery_small((unint64_t *)&v127, *(int *)(a1 + 264), (uint64_t)&v127, *(int *)(a1 + 264), a1 + 232);
  bn_mod_mul_montgomery_small(ap, ap, (unint64_t *)&v127, *(int *)(a1 + 264), a1 + 232);
  v110 = *(unsigned int *)(a1 + 264);
  if ((int)v110 >= 1)
  {
    if (v110 >= 4)
    {
      v111 = v110 & 0x7FFFFFFC;
      v114 = (int8x16_t *)v131;
      v115 = 0uLL;
      v116 = v110 & 0xFFFFFFFC;
      v117 = 0uLL;
      do
      {
        v115 = vorrq_s8(v114[-1], v115);
        v117 = vorrq_s8(*v114, v117);
        v114 += 2;
        v116 -= 4;
      }
      while (v116);
      v118 = vorrq_s8(v117, v115);
      v112 = vorr_s8(*(int8x8_t *)v118.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
      if (v111 == v110)
        goto LABEL_102;
    }
    else
    {
      v111 = 0;
      v112 = 0;
    }
    v119 = v110 - v111;
    v120 = &ap[v111];
    do
    {
      v121 = *v120++;
      *(_QWORD *)&v112 |= v121;
      --v119;
    }
    while (v119);
LABEL_102:
    v113 = *(_QWORD *)&v112 == 0;
    goto LABEL_103;
  }
  v113 = 1;
LABEL_103:
  if (v113)
    goto LABEL_104;
  v122 = malloc_type_malloc(0x18uLL, 0x30772F57uLL);
  if (!v122)
  {
    v28 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v29 = 14;
    v30 = 65;
    v31 = 247;
    goto LABEL_21;
  }
  v123 = v122;
  *v122 = 16;
  v122[1] = BN_new();
  v8 = v123 + 1;
  v124 = BN_new();
  v123[2] = v124;
  v125 = (BIGNUM *)v123[1];
  if (v125)
    v126 = v124 == 0;
  else
    v126 = 1;
  if (v126)
  {
LABEL_113:
    BN_free(v125);
    BN_free((BIGNUM *)v123[2]);
    OPENSSL_free(v123 + 1);
    return 0;
  }
  if (!bn_set_words((uint64_t)v125, &v133, *(int *)(a1 + 264))
    || !bn_set_words(v123[2], ap, *(int *)(a1 + 264)))
  {
    v125 = (BIGNUM *)v123[1];
    goto LABEL_113;
  }
  return v8;
}

ECDSA_SIG *__cdecl ECDSA_do_sign(const unsigned __int8 *dgst, int dgst_len, EC_KEY *eckey)
{
  size_t v3;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  size_t v11;
  int v12;
  ECDSA_SIG *v13;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _QWORD v21[8];
  SHA512_CTX c;
  uint64_t v23;

  v3 = *(_QWORD *)&dgst_len;
  v23 = *MEMORY[0x24BDAC8D0];
  v5 = *((_QWORD *)eckey + 5);
  if (v5 && *(_QWORD *)(v5 + 40))
  {
    v6 = 103;
    v7 = 312;
LABEL_14:
    ERR_put_error(26, 0, v6, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ecdsa/ecdsa.c", v7);
    return 0;
  }
  v8 = *(_QWORD *)eckey;
  if (!*(_QWORD *)eckey || (v9 = *((_QWORD *)eckey + 2)) == 0)
  {
    v6 = 67;
    v7 = 318;
    goto LABEL_14;
  }
  v10 = (unint64_t *)(v9 + 24);
  *(_OWORD *)c.h = xmmword_208F1E540;
  *(_OWORD *)&c.h[2] = xmmword_208F1E550;
  *(_OWORD *)&c.h[4] = xmmword_208F1E560;
  *(_OWORD *)&c.h[6] = xmmword_208F1E570;
  memset(&c.Nl, 0, 144);
  v11 = 8 * *(int *)(v8 + 264);
  *(_QWORD *)&c.num = 0x4000000000;
  SHA512_Update(&c, (const void *)(v9 + 24), v11);
  SHA512_Update(&c, dgst, v3);
  sha512_final_impl(v21, c.md_len, (int8x16_t *)&c);
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  if (!bn_rand_range_words((uint64_t *)&v16, 1uLL, *(uint64_t **)(v8 + 256), *(int *)(v8 + 264), (uint64_t)v21))return 0;
  v12 = 33;
  while (1)
  {
    v15 = 0;
    v13 = (ECDSA_SIG *)ecdsa_sign_impl(v8, &v15, v10, &v16, (unsigned __int8 *)dgst, v3);
    if (v13 || !v15)
      break;
    if (!--v12)
    {
      ERR_put_error(26, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ecdsa/ecdsa.c", 364);
      return v13;
    }
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    if (!bn_rand_range_words((uint64_t *)&v16, 1uLL, *(uint64_t **)(v8 + 256), *(int *)(v8 + 264), (uint64_t)v21))return 0;
  }
  return v13;
}

int ECDSA_sign(int type, const unsigned __int8 *dgst, int dgstlen, unsigned __int8 *sig, unsigned int *siglen, EC_KEY *eckey)
{
  uint64_t v9;
  uint64_t (*v10)(const unsigned __int8 *, _QWORD, unsigned __int8 *, unsigned int *, EC_KEY *);
  uint64_t **v12;
  const char *v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[3];
  _BYTE *v23;

  v9 = *((_QWORD *)eckey + 5);
  if (v9)
  {
    v10 = *(uint64_t (**)(const unsigned __int8 *, _QWORD, unsigned __int8 *, unsigned int *, EC_KEY *))(v9 + 40);
    if (v10)
      return v10(dgst, *(_QWORD *)&dgstlen, sig, siglen, eckey);
  }
  v12 = (uint64_t **)ECDSA_do_sign(dgst, dgstlen, eckey);
  if (!v12)
    goto LABEL_16;
  v19 = 0u;
  v20 = (unint64_t)sig;
  v21 = (unint64_t)ECDSA_size(eckey);
  memset(v22, 0, sizeof(v22));
  if (CBB_flush((uint64_t *)&v19)
    && (v23 = 0, CBB_add_space((uint64_t)&v19, &v23, 1))
    && (*v23 = 48, cbb_add_child((uint64_t)&v19, (uint64_t)v22, 1u, 1))
    && BN_marshal_asn1((uint64_t *)v22, *v12)
    && BN_marshal_asn1((uint64_t *)v22, v12[1])
    && CBB_flush((uint64_t *)&v19))
  {
    if (!BYTE8(v19))
    {
      if (CBB_flush((uint64_t *)&v19) && (BYTE8(v21) & 1) == 0)
      {
        v17 = DWORD2(v20);
        *(_QWORD *)&v20 = 0;
        v18 = 1;
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    v13 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/bytestring/cbb.c";
    v14 = 14;
    v15 = 66;
    v16 = 127;
  }
  else
  {
    v13 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/ecdsa_extra/ecdsa_asn1.c";
    v14 = 26;
    v15 = 105;
    v16 = 185;
  }
  ERR_put_error(v14, 0, v15, v13, v16);
LABEL_15:
  ERR_put_error(26, 0, 105, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ecdsa_extra/ecdsa_asn1.c", 88);
LABEL_16:
  v17 = 0;
  v18 = 0;
LABEL_17:
  *siglen = v17;
  BN_BLINDING_free((ECDSA_SIG *)v12);
  return v18;
}

int ECDSA_size(const EC_KEY *eckey)
{
  uint64_t v1;
  uint64_t (*v2)(void);
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  unint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;

  if (!eckey)
    return 0;
  v1 = *((_QWORD *)eckey + 5);
  if (v1)
  {
    v2 = *(uint64_t (**)(void))(v1 + 32);
    if (v2)
    {
      v3 = v2();
      v4 = v3 + 1;
      v5 = 1;
      if (v3 + 1 < 0x80)
        goto LABEL_30;
      goto LABEL_29;
    }
  }
  v6 = *(_QWORD *)eckey;
  if (!*(_QWORD *)eckey)
    return 0;
  v7 = *(unsigned int *)(v6 + 264);
  v8 = v7 & ((int)v7 >> 31);
  v9 = 8 * v7 - 8;
  v10 = *(_DWORD *)(v6 + 264);
  while (1)
  {
    v11 = __OFSUB__(v10--, 1);
    if (v10 < 0 != v11)
      break;
    v12 = *(_QWORD *)(v6 + 256);
    v13 = *(_QWORD *)(v12 + v9);
    v9 -= 8;
    if (v13)
    {
      v8 = v10 + 1;
      goto LABEL_16;
    }
  }
  if ((v7 & 0x80000000) == 0)
  {
    v3 = 0;
    v5 = 1;
    goto LABEL_30;
  }
  v12 = *(_QWORD *)(v6 + 256);
LABEL_16:
  v15 = v8 - 1;
  v16 = *(_QWORD *)(v12 + 8 * v15);
  v17 = v16 != 0;
  v18 = HIDWORD(v16) != 0;
  if (HIDWORD(v16))
    v16 >>= 32;
  v19 = v16 >> 16 != 0;
  if (v16 >> 16)
    v16 >>= 16;
  v20 = v16 > 0xFF;
  if (v16 > 0xFF)
    v16 >>= 8;
  v21 = v16 > 0xF;
  if (v16 > 0xF)
    v16 >>= 4;
  v22 = v16 > 3;
  if (v16 > 3)
    v16 >>= 2;
  v23 = v17 | (v15 << 6) | (32 * v18) | (16 * v19) | (8 * v20) | (4 * v21) | (2 * v22);
  if (v16 > 1)
    ++v23;
  v3 = (v23 + 7) >> 3;
  v4 = v3 + 1;
  v5 = 1;
  if (v3 + 1 >= 0x80)
  {
    do
    {
LABEL_29:
      ++v5;
      v24 = v4 > 0xFF;
      v4 >>= 8;
    }
    while (v24);
  }
LABEL_30:
  v25 = v3 + v5 + 2;
  if (v25 < v3 || (v25 & 0x8000000000000000) != 0)
    return 0;
  v26 = 2 * v25;
  if (v25 >= 0x40)
  {
    v27 = 1;
    v28 = v26;
    do
    {
      ++v27;
      v24 = v28 > 0xFF;
      v28 >>= 8;
    }
    while (v24);
  }
  else
  {
    v27 = 1;
  }
  v29 = v27 + (v26 | 1);
  if (v29 >= v26)
    return v29;
  else
    return 0;
}

int ECDSA_verify(int type, const unsigned __int8 *dgst, int dgstlen, const unsigned __int8 *sig, int siglen, EC_KEY *eckey)
{
  size_t v7;
  unint64_t v9;
  ECDSA_SIG *v11;
  int v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v18;
  void *__s2;
  unsigned __int8 *v20;
  uint64_t v21;

  v7 = *(_QWORD *)&siglen;
  v9 = *(_QWORD *)&dgstlen;
  __s2 = 0;
  v20 = (unsigned __int8 *)sig;
  v21 = *(_QWORD *)&siglen;
  v11 = ECDSA_SIG_parse(&v20);
  if (!v11 || v21)
  {
    ERR_put_error(26, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ecdsa_extra/ecdsa_asn1.c", 172);
    BN_BLINDING_free(v11);
    v11 = 0;
    v12 = 0;
  }
  else
  {
    v18 = 0;
    if (ECDSA_SIG_to_bytes(&__s2, &v18, (uint64_t **)v11) && v18 == v7 && (!v7 || !memcmp(sig, __s2, v7)))
    {
      v12 = ecdsa_do_verify_no_self_test((unsigned __int8 *)dgst, v9, (uint64_t *)v11, (uint64_t *)eckey);
      v13 = __s2;
      if (!__s2)
        goto LABEL_14;
    }
    else
    {
      ERR_put_error(26, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ecdsa_extra/ecdsa_asn1.c", 117);
      v12 = 0;
      v13 = __s2;
      if (!__s2)
        goto LABEL_14;
    }
    v15 = *(v13 - 1);
    v14 = (char *)(v13 - 1);
    v16 = v15 + 8;
    if (v15 != -8)
      bzero(v14, v16);
    free(v14);
  }
LABEL_14:
  BN_BLINDING_free(v11);
  return v12;
}

uint64_t ECDSA_SIG_to_bytes(void **a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v6;
  void *v7;
  const char *v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16[2];
  __int128 v17;
  uint64_t v18;
  _OWORD v19[3];
  _BYTE *v20;

  v18 = 0;
  v17 = 0u;
  *(_OWORD *)v16 = 0u;
  v6 = malloc_type_malloc(8uLL, 0x30772F57uLL);
  if (v6)
  {
    *v6 = 0;
    v7 = v6 + 1;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v7 = 0;
  }
  LOBYTE(v16[0]) = 0;
  v15 = 0;
  v17 = 0uLL;
  v16[1] = v7;
  LOBYTE(v18) = 1;
  memset(v19, 0, sizeof(v19));
  if (!CBB_flush(&v15)
    || (v20 = 0, !CBB_add_space((uint64_t)&v15, &v20, 1))
    || (*v20 = 48, !cbb_add_child((uint64_t)&v15, (uint64_t)v19, 1u, 1))
    || !BN_marshal_asn1((uint64_t *)v19, *a3)
    || !BN_marshal_asn1((uint64_t *)v19, a3[1])
    || !CBB_flush(&v15))
  {
    v8 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/ecdsa_extra/ecdsa_asn1.c";
    v9 = 26;
    v10 = 105;
    v11 = 185;
    goto LABEL_13;
  }
  if (LOBYTE(v16[0]))
  {
    v8 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/bytestring/cbb.c";
    v9 = 14;
    v10 = 66;
    v11 = 127;
LABEL_13:
    ERR_put_error(v9, 0, v10, v8, v11);
    goto LABEL_14;
  }
  if (!CBB_flush(&v15))
    goto LABEL_14;
  if ((v18 & 1) == 0)
  {
    if (!a1)
      goto LABEL_28;
    goto LABEL_27;
  }
  if (!a1 || !a2)
  {
LABEL_14:
    ERR_put_error(26, 0, 105, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ecdsa_extra/ecdsa_asn1.c", 198);
    result = 0;
    if (!LOBYTE(v16[0]))
    {
      if ((v18 & 1) != 0 && v16[1])
      {
        v14 = (char *)v16[1] - 8;
        v13 = *((_QWORD *)v16[1] - 1);
        if (v13 != -8)
          bzero(v14, v13 + 8);
        free(v14);
      }
      return 0;
    }
    return result;
  }
LABEL_27:
  *a1 = v16[1];
LABEL_28:
  if (a2)
    *a2 = v17;
  return 1;
}

ECDSA_SIG *ECDSA_SIG_parse(unsigned __int8 **a1)
{
  ECDSA_SIG *v2;
  unsigned __int8 *v4;
  unint64_t v5;
  int v6;
  unint64_t v7;

  v2 = ECDSA_SIG_new();
  if (!v2)
    return v2;
  v4 = 0;
  v5 = 0;
  v7 = 0;
  v6 = 0;
  if (cbs_get_any_asn1_element(a1, &v4, &v6, &v7, 0, 0, 0))
  {
    if (v6 == 536870928 && v5 >= v7)
    {
      v4 += v7;
      v5 -= v7;
      if (BN_parse_asn1_unsigned(&v4, v2->r) && BN_parse_asn1_unsigned(&v4, v2->s) && !v5)
        return v2;
    }
  }
  ERR_put_error(26, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/ecdsa_extra/ecdsa_asn1.c", 160);
  BN_BLINDING_free(v2);
  return 0;
}

uint64_t bssl::ssl_decode_client_hello_inner(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, _QWORD *a6)
{
  unint64_t v10;
  uint64_t i;
  uint64_t v13;
  int v14;
  BOOL v15;
  size_t v17;
  __int16 v18;
  const void *v19;
  size_t v20;
  const void *v21;
  size_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  char *v25;
  size_t v26;
  char *v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int16 *v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  BOOL v37;
  unsigned int v38;
  const void *v39;
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  void *__dst;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned __int8 v55;
  __int128 v56;
  void *v57[2];
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE v61[24];
  __int16 v62;
  const void *v63;
  size_t v64;
  const void *v65;
  size_t v66;
  const void *v67;
  size_t v68;
  const void *v69;
  size_t v70;
  const void *v71;
  size_t v72;
  _BYTE v73[56];

  v59 = a4;
  v60 = a5;
  if ((bssl::ssl_parse_client_hello_with_trailing_data(a1, &v59, (uint64_t)v61) & 1) == 0)
  {
    v14 = 133;
LABEL_12:
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/encrypted_client_hello.cc", v14);
    return 0;
  }
  v10 = v59 + 1;
  for (i = v60 - 1; i != -1; --i)
  {
    v59 = v10;
    v60 = i;
    if (*(unsigned __int8 *)(v10++ - 1))
    {
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/encrypted_client_hello.cc", 140);
      v13 = 0;
      *a2 = 47;
      return v13;
    }
  }
  if (v72)
    v15 = v66 == 0;
  else
    v15 = 0;
  if (!v15)
  {
    v14 = 150;
    goto LABEL_12;
  }
  v17 = a6[7];
  v65 = (const void *)a6[6];
  v66 = v17;
  *(_OWORD *)v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  if (!(*(unsigned int (**)(uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 88))(a1, &v56, &v51, 1))goto LABEL_54;
  v18 = v62;
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v51, &__dst, 2))
    goto LABEL_54;
  *((_BYTE *)__dst + 1) = v18;
  *(_BYTE *)__dst = HIBYTE(v18);
  v19 = v63;
  v20 = v64;
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v51, &__dst, v64))
    goto LABEL_54;
  if (v20)
    memcpy(__dst, v19, v20);
  if (!CBB_flush(&v51)
    || !cbb_add_child((uint64_t)&v51, (uint64_t)v73, 1u, 0)
    || !CBB_add_bytes((uint64_t)v73, v65, v66)
    || !CBB_add_u16_length_prefixed(&v51, (uint64_t)v73)
    || !CBB_add_bytes((uint64_t)v73, v67, v68)
    || !CBB_add_u8_length_prefixed(&v51, (uint64_t)v73)
    || !CBB_add_bytes((uint64_t)v73, v69, v70)
    || !CBB_flush(&v51)
    || !CBB_add_u16_length_prefixed(&v51, (uint64_t)v73))
  {
LABEL_54:
    v40 = 68;
    v41 = 162;
    goto LABEL_55;
  }
  v21 = v71;
  v22 = v72;
  if ((bssl::ssl_client_hello_get_extension((uint64_t)v61, (unsigned __int16 **)&__dst, 64768) & 1) == 0)
  {
    if (CBB_add_bytes((uint64_t)v73, v21, v22))
      goto LABEL_63;
    v40 = 68;
    v41 = 174;
LABEL_55:
    ERR_put_error(16, 0, v40, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/encrypted_client_hello.cc", v41);
    goto LABEL_56;
  }
  v23 = (unsigned __int8 *)__dst;
  v24 = v50;
  v25 = (char *)((_BYTE *)__dst - (_BYTE *)v21 + v50);
  v26 = v22 - (_QWORD)v25;
  if (v22 < (unint64_t)v25)
    abort();
  if (v22 >= (_BYTE *)__dst - (_BYTE *)v21 - 4)
    v27 = (char *)((_BYTE *)__dst - (_BYTE *)v21 - 4);
  else
    v27 = (char *)v22;
  if (!CBB_add_bytes((uint64_t)v73, v21, (size_t)v27))
  {
    v40 = 68;
    v41 = 185;
    goto LABEL_55;
  }
  if (!v24
    || (v30 = *v23, v29 = (unsigned __int16 *)(v23 + 1), v28 = v30, v31 = v24 - 1 - v30, v24 - 1 < (unint64_t)v30)
    || (__dst = (char *)v29 + v28, v50 = v31, !(_DWORD)v28)
    || v24 - 1 != v28)
  {
    v40 = 137;
    v41 = 193;
    goto LABEL_55;
  }
  v48 = v24 - 1;
  v47 = &v25[(_QWORD)v21];
  v32 = (unsigned __int16 *)a6[12];
  v33 = a6[13];
  while (2)
  {
    if (v48 <= 1)
    {
      v40 = 137;
      v41 = 203;
      goto LABEL_55;
    }
    v34 = *v29++;
    v35 = bswap32(v34) >> 16;
    if (v35 == 65037)
    {
      *a2 = 47;
      v40 = 320;
      v41 = 209;
      goto LABEL_55;
    }
    v48 -= 2;
    do
    {
      if (v33 == 1)
      {
LABEL_76:
        v40 = 137;
        v41 = 224;
        goto LABEL_55;
      }
      if (!v33)
      {
        *a2 = 47;
        v40 = 320;
        v41 = 219;
        goto LABEL_55;
      }
      if ((v33 & 0xFFFFFFFFFFFFFFFELL) == 2)
        goto LABEL_76;
      v36 = __rev16(v32[1]);
      v37 = v33 - 4 >= v36;
      v33 = v33 - 4 - v36;
      if (!v37)
        goto LABEL_76;
      v38 = bswap32(*v32) >> 16;
      v39 = v32 + 2;
      v32 = (unsigned __int16 *)((char *)v32 + v36 + 4);
    }
    while (v38 != v35);
    if (!CBB_add_u16((uint64_t)v73, v35)
      || !CBB_add_u16((uint64_t)v73, v36)
      || !CBB_add_bytes((uint64_t)v73, v39, v36))
    {
      v40 = 137;
      v41 = 233;
      goto LABEL_55;
    }
    if (v48)
      continue;
    break;
  }
  if (!CBB_add_bytes((uint64_t)v73, v47, v26))
  {
    v40 = 68;
    v41 = 240;
    goto LABEL_55;
  }
LABEL_63:
  if (!CBB_flush(&v51))
  {
    v40 = 68;
    v41 = 245;
    goto LABEL_55;
  }
  v44 = (unint64_t)v53;
  if (v52)
  {
    v45 = v54 + v55;
    v44 = v45 + *v53;
    v46 = v53[1] - v45;
  }
  else
  {
    v46 = v54;
  }
  if (!bssl::is_valid_client_hello_inner(a1, a2, v44, v46))
  {
LABEL_56:
    v13 = 0;
    if (BYTE8(v56))
      return v13;
    goto LABEL_57;
  }
  if (((*(uint64_t (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 96))(a1, &v56, a3) & 1) == 0)
  {
    v40 = 68;
    v41 = 255;
    goto LABEL_55;
  }
  v13 = 1;
  if (BYTE8(v56))
    return v13;
LABEL_57:
  if ((BYTE8(v58) & 1) != 0 && v57[0])
  {
    v43 = (char *)v57[0] - 8;
    v42 = *((_QWORD *)v57[0] - 1);
    if (v42 != -8)
      bzero(v43, v42 + 8);
    free(v43);
  }
  return v13;
}

uint64_t bssl::is_valid_client_hello_inner(uint64_t a1, _BYTE *a2, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  BOOL v22;
  unsigned __int16 *v23;
  unsigned int v24;
  uint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v30 = a3;
  v31 = a4;
  if (bssl::ssl_parse_client_hello_with_trailing_data(a1, &v30, (uint64_t)&v27))
  {
    if (!v31)
    {
      v5 = v29;
      if (v29)
      {
        v6 = v28;
        v7 = v29;
        v8 = v28;
        do
        {
          if (v7 < 2)
            break;
          if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 2)
            break;
          v9 = v7 - 4;
          v10 = __rev16(*((unsigned __int16 *)v8 + 1));
          if (v9 < v10)
            break;
          v12 = *(unsigned __int16 *)v8;
          v11 = v8 + 4;
          if (__rev16(v12) == 65037)
          {
            if (v10 == 1 && *v11 == 1)
            {
              while (v5 >= 2)
              {
                if ((v5 & 0xFFFFFFFFFFFFFFFELL) == 2)
                  break;
                v13 = v5 - 4;
                v14 = __rev16(*((unsigned __int16 *)v6 + 1));
                if (v13 < v14)
                  break;
                v15 = v6 + 4;
                if (__rev16(*(unsigned __int16 *)v6) == 43)
                {
                  if (v14
                    && ((v19 = v14 - 1, v20 = *v15, v19 >= v20) ? (v21 = (_DWORD)v20 == 0) : (v21 = 1),
                        !v21 ? (v22 = v19 == v20) : (v22 = 0),
                        v22))
                  {
                    v23 = (unsigned __int16 *)(v6 + 5);
                    result = 1;
                    while (v19 > 1)
                    {
                      v24 = __rev16(*v23);
                      if (v24 - 768 < 4 || v24 == 65279 || v24 == 65277)
                      {
                        *a2 = 47;
                        v16 = 314;
                        v17 = 118;
                        goto LABEL_19;
                      }
                      ++v23;
                      v19 -= 2;
                      if (!v19)
                        return result;
                    }
                    *a2 = 50;
                    v16 = 137;
                    v17 = 111;
                  }
                  else
                  {
                    *a2 = 50;
                    v16 = 137;
                    v17 = 104;
                  }
                  goto LABEL_19;
                }
                v6 = &v15[v14];
                v5 = v13 - v14;
                if (!v5)
                  goto LABEL_18;
              }
            }
            break;
          }
          v8 = &v11[v10];
          v7 = v9 - v10;
        }
        while (v7);
      }
    }
  }
LABEL_18:
  *a2 = 47;
  v16 = 314;
  v17 = 94;
LABEL_19:
  ERR_put_error(16, 0, v16, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/encrypted_client_hello.cc", v17);
  return 0;
}

uint64_t bssl::ssl_client_hello_decrypt(int8x16_t *a1, _BYTE *a2, _BYTE *a3, _QWORD *a4, _QWORD *a5, char *a6, size_t a7)
{
  const void *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD);
  uint64_t v24;
  unsigned __int16 *v25;
  char *v26;
  uint64_t v27;
  size_t v28;
  _QWORD *v29;
  uint64_t v30;
  size_t v31;
  size_t v33;

  *a3 = 0;
  v14 = (const void *)a5[1];
  v15 = a5[2];
  if (v15)
  {
    if (v15 > 0xFFFFFFFFFFFFFFF7 || (v16 = malloc_type_malloc(v15 + 8, 0x30772F57uLL)) == 0)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      v18 = 0;
      *a2 = 80;
      return v18;
    }
    *v16 = v15;
    v17 = v16 + 1;
    memmove(v16 + 1, v14, v15);
    v14 = (const void *)a5[1];
  }
  else
  {
    v17 = 0;
  }
  if (v15 < a6 - (_BYTE *)v14)
    goto LABEL_41;
  if (v15 - (a6 - (_BYTE *)v14) >= a7)
    v19 = a7;
  else
    v19 = v15 - (a6 - (_BYTE *)v14);
  if (v19)
    bzero((char *)v17 + a6 - (_BYTE *)v14, v19);
  if (a7)
  {
    if (a7 > 0xFFFFFFFFFFFFFFF7 || (v20 = malloc_type_malloc(a7 + 8, 0x30772F57uLL)) == 0)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      v18 = 0;
      *a2 = 80;
      goto LABEL_36;
    }
    *v20 = a7;
    v21 = (char *)(v20 + 1);
  }
  else
  {
    v21 = 0;
  }
  v33 = 0;
  if (EVP_HPKE_CTX_open(a1 + 45, v21, &v33, a7, a6, a7))
  {
    if (a7 >= v33)
    {
      if (bssl::ssl_decode_client_hello_inner(a1->i64[0], a2, (uint64_t)a4, (unint64_t)v21, v33, a5))
      {
        v22 = a1->i64[0];
        v23 = *(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(a1->i64[0] + 64);
        if (v23)
        {
          v24 = *(_QWORD *)(*(_QWORD *)(v22 + 48) + 280);
          if (v24 && (*(_BYTE *)(v24 + 1569) & 4) != 0 && (*(_BYTE *)(v22 + 164) & 1) == 0)
            v25 = (unsigned __int16 *)(*(_QWORD *)(v24 + 1512) + 4);
          else
            v25 = (unsigned __int16 *)(v22 + 16);
          v23(0, *v25, 257, *a4, a4[1], v22, *(_QWORD *)(v22 + 72));
        }
        v18 = 1;
        if (!v21)
          goto LABEL_36;
        goto LABEL_33;
      }
      goto LABEL_28;
    }
LABEL_41:
    abort();
  }
  *a2 = 51;
  *a3 = 1;
  ERR_put_error(16, 0, 138, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/encrypted_client_hello.cc", 316);
LABEL_28:
  v18 = 0;
  if (v21)
  {
LABEL_33:
    v27 = *((_QWORD *)v21 - 1);
    v26 = v21 - 8;
    v28 = v27 + 8;
    if (v27 != -8)
      bzero(v26, v28);
    free(v26);
  }
LABEL_36:
  if (v17)
  {
    v30 = *(v17 - 1);
    v29 = v17 - 1;
    v31 = v30 + 8;
    if (v30 != -8)
      bzero(v29, v31);
    free(v29);
  }
  return v18;
}

BOOL bssl::ssl_is_valid_ech_public_name(unsigned __int8 *a1, unint64_t a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  unint64_t v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _BOOL8 result;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 *i;
  int v18;
  unsigned int v19;
  unsigned int v20;

  if (!a2)
    return 0;
  v2 = 0;
  v3 = 0;
  while (2)
  {
    v4 = 0;
    v5 = a1;
    v6 = a2;
    while (a1[v4] != 46)
    {
      if (a2 == ++v4)
        goto LABEL_6;
    }
    v7 = v4;
    if (v4 == a2)
    {
LABEL_6:
      a1 = 0;
      a2 = 0;
      v3 = v5;
      v2 = v6;
      if (v6 - 64 < 0xFFFFFFFFFFFFFFC1)
        return 0;
    }
    else
    {
      v8 = v4 + 1;
      if (a2 < v7 + 1)
        abort();
      if (a2 < v7)
        v7 = a2;
      a2 -= v8;
      if (v6 == v8)
        return 0;
      a1 += v8;
      v6 = v7;
      if (v7 - 64 < 0xFFFFFFFFFFFFFFC1)
        return 0;
    }
    if (*v5 != 45 && v5[v6 - 1] != 45)
    {
      do
      {
        v9 = *v5;
        if (v9 != 45 && (v9 - 48) >= 0xA && (v9 & 0xFFFFFFDF) - 65 >= 0x1A)
          return 0;
        ++v5;
        --v6;
      }
      while (v6);
      if (a2)
        continue;
      if (v2 >= 2)
      {
        if (*v3 != 48 || (v3[1] | 0x20) != 0x78)
        {
LABEL_32:
          v14 = v2 - 1;
          do
          {
            v15 = *v3++;
            result = (v15 - 58) < 0xFFFFFFF6;
          }
          while ((v15 - 58) >= 0xFFFFFFF6 && v14-- != 0);
          return result;
        }
        v13 = v2 - 2;
        if (v2 == 2)
          return 0;
        for (i = v3 + 2; ; ++i)
        {
          v18 = *i;
          v19 = v18 - 58;
          v20 = (v18 & 0xFFFFFFDF) - 71;
          if (v19 <= 0xFFFFFFF5 && v20 <= 0xFFFFFFF9)
            break;
          result = 0;
          if (!--v13)
            return result;
        }
      }
      if (!v2)
        return 1;
      goto LABEL_32;
    }
    return 0;
  }
}

uint64_t bssl::parse_ech_config(uint64_t a1, uint64_t *a2, _BYTE *a3, char a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE *v42;
  unsigned __int16 *v43;
  char *v44;
  unsigned int v45;
  char v46;
  unint64_t v47;
  int v48;
  char v49;
  char v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 - 2;
  if (v4 < 2)
    goto LABEL_4;
  v6 = *(unsigned __int16 **)a1;
  *(_QWORD *)a1 += 2;
  *(_QWORD *)(a1 + 8) = v5;
  if (v5 < 2
    || (v7 = *v6,
        *(_QWORD *)a1 = v6 + 2,
        *(_QWORD *)(a1 + 8) = v4 - 4,
        v8 = __rev16(v6[1]),
        v9 = v4 - 4 - v8,
        v4 - 4 < v8))
  {
LABEL_4:
    v10 = 413;
LABEL_5:
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/encrypted_client_hello.cc", v10);
    return 0;
  }
  *(_QWORD *)a1 = (char *)v6 + v8 + 4;
  *(_QWORD *)(a1 + 8) = v9;
  if (__rev16(v7) != 65037)
    goto LABEL_44;
  v15 = *a2;
  if (*a2)
  {
    v17 = *(_QWORD *)(v15 - 8);
    v16 = (void *)(v15 - 8);
    v18 = v17 + 8;
    if (v17 != -8)
      bzero(v16, v18);
    free(v16);
  }
  *a2 = 0;
  a2[1] = 0;
  if (v4 == v9)
    goto LABEL_12;
  v19 = v4 - v9;
  if (v4 - v9 <= 0xFFFFFFFFFFFFFFF7)
  {
    v20 = malloc_type_malloc(v19 + 8, 0x30772F57uLL);
    if (v20)
    {
      *v20 = v19;
      v21 = v20 + 1;
      *a2 = (uint64_t)v21;
      a2[1] = v19;
      memmove(v21, v6, v4 - v9);
      v22 = a2[1];
      v23 = v22 - 4;
      if (v22 < 4)
        goto LABEL_12;
      v24 = *a2;
      v25 = __rev16(*(unsigned __int16 *)(*a2 + 2));
      if (v25 - 1 >= v23)
        goto LABEL_12;
      *((_BYTE *)a2 + 67) = *(_BYTE *)(v24 + 4);
      if (v25 < 3)
        goto LABEL_12;
      *((_WORD *)a2 + 32) = bswap32(*(unsigned __int16 *)(v24 + 5)) >> 16;
      if (v25 - 3 < 2)
        goto LABEL_12;
      v26 = v25 - 5;
      v27 = __rev16(*(unsigned __int16 *)(v24 + 7));
      v28 = v26 >= v27;
      v29 = v26 - v27;
      if (!v28)
        goto LABEL_12;
      if (!v27)
        goto LABEL_12;
      v30 = v29 - 2;
      if (v29 < 2)
        goto LABEL_12;
      v31 = v24 + 9;
      v32 = v31 + v27;
      v33 = *(unsigned __int8 *)(v31 + v27 + 1);
      v34 = v33 | ((unint64_t)*(unsigned __int8 *)(v31 + v27) << 8);
      if (v30 <= v34)
        goto LABEL_12;
      if (!v34)
        goto LABEL_12;
      if ((v33 & 3) != 0)
        goto LABEL_12;
      v35 = v32 + 2;
      v36 = (_BYTE *)(v32 + 2 + v34);
      *((_BYTE *)a2 + 66) = *v36;
      v37 = v30 + ~v34;
      if (!v37)
        goto LABEL_12;
      v38 = v37 - 1;
      v39 = v36[1];
      v28 = v38 >= v39;
      v40 = v38 - v39;
      if (!v28
        || !v36[1]
        || (v41 = v40 - 2, v40 < 2)
        || (v42 = v36 + 2,
            v43 = (unsigned __int16 *)&v36[v39 + 2],
            v45 = *v43,
            v44 = (char *)(v43 + 1),
            v41 != __rev16(v45)))
      {
LABEL_12:
        v10 = 444;
        goto LABEL_5;
      }
      v52 = v27;
      v53 = v34;
      v51 = v31;
      if (bssl::ssl_is_valid_ech_public_name(v36 + 2, v39))
      {
        a2[2] = v51;
        a2[3] = v52;
        a2[4] = (uint64_t)v42;
        a2[5] = v39;
        a2[6] = v35;
        a2[7] = v53;
        if (v41)
        {
          v46 = 0;
          while (v41 >= 2)
          {
            if ((v41 & 0xFFFFFFFFFFFFFFFELL) == 2)
              break;
            v47 = __rev16(*((unsigned __int16 *)v44 + 1));
            v28 = v41 - 4 >= v47;
            v41 = v41 - 4 - v47;
            if (!v28)
              break;
            v48 = *v44;
            v44 += v47 + 4;
            if (v48 < 0)
              v49 = 1;
            else
              v49 = a4;
            v46 |= v49;
            if (!v41)
            {
              v50 = v46 ^ 1;
              goto LABEL_49;
            }
          }
          v10 = 468;
          goto LABEL_5;
        }
        v50 = 1;
LABEL_49:
        *a3 = v50 & 1;
        return 1;
      }
LABEL_44:
      *a3 = 0;
      return 1;
    }
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t bssl::ECHServerConfig::SetupContext(uint64_t a1, _QWORD *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unsigned __int16 *i;
  unsigned int v13;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  const void *v21;
  size_t v22;
  void *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  void *v33[2];
  __int128 v34;
  uint64_t v35;
  void *__dst[5];

  __dst[4] = *(void **)MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 56);
  if (v6)
  {
    for (i = *(unsigned __int16 **)(a1 + 48); ; i += 2)
    {
      if (v6 < 4)
        return 0;
      v13 = __rev16(i[1]);
      if (a3 == bswap32(*i) >> 16 && v13 == a4)
        break;
      v6 -= 4;
      if (!v6)
        return 0;
    }
    v17 = *(_QWORD *)(a1 + 8);
    v18 = v17 + 8;
    v32 = 0u;
    *(_OWORD *)v33 = 0u;
    v34 = 0u;
    if ((unint64_t)(v17 + 8) >= 0xFFFFFFFFFFFFFFF8)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
LABEL_36:
      v15 = 0;
      goto LABEL_37;
    }
    v19 = malloc_type_malloc(v17 + 16, 0x30772F57uLL);
    if (v19)
    {
      *v19 = v18;
      v20 = v19 + 1;
    }
    else
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      v15 = 0;
      if (v18)
        goto LABEL_37;
      v20 = 0;
    }
    BYTE8(v32) = 0;
    *(_QWORD *)&v32 = 0;
    v33[0] = v20;
    v33[1] = 0;
    *(_QWORD *)&v34 = v18;
    BYTE8(v34) = 1;
    __dst[0] = 0;
    if (!CBB_add_space((uint64_t)&v32, __dst, 8))
      goto LABEL_36;
    *(_QWORD *)__dst[0] = 0x68636520736C74;
    v21 = *(const void **)a1;
    v22 = *(_QWORD *)(a1 + 8);
    __dst[0] = 0;
    if (!CBB_add_space((uint64_t)&v32, __dst, v22))
      goto LABEL_36;
    if (v22)
      memcpy(__dst[0], v21, v22);
    switch(a4)
    {
      case 1:
        v23 = &EVP_hpke_aes_128_gcm_kAEAD;
        break;
      case 2:
        v23 = &EVP_hpke_aes_256_gcm_kAEAD;
        break;
      case 3:
        v23 = &EVP_hpke_chacha20_poly1305_kAEAD;
        break;
      default:
        v23 = 0;
        break;
    }
    v24 = (uint64_t *)(a1 + 72);
    v25 = (char *)v33[0];
    if (BYTE8(v32))
    {
      v26 = (char *)v33[1] + v34;
      v25 = &v26[*(_QWORD *)v33[0]];
      v27 = (void *)(*((_QWORD *)v33[0] + 1) - (_QWORD)v26);
    }
    else
    {
      v27 = v33[1];
    }
    bzero(a2, 0x2C8uLL);
    v28 = a2 + 3;
    bzero(a2 + 3, 0x248uLL);
    *((_DWORD *)a2 + 176) = 0;
    v29 = *v24;
    a2[1] = v23;
    a2[2] = &EVP_hpke_hkdf_sha256_kKDF;
    *a2 = v29;
    v35 = 0;
    if ((*(unsigned int (**)(uint64_t *, void **, uint64_t *, uint64_t, uint64_t))(v29 + 64))(v24, __dst, &v35, a5, a6)&& hpke_key_schedule((__int16 **)a2, 0, __dst, v35, v25, (uint64_t)v27))
    {
      v15 = 1;
    }
    else
    {
      if (!*v28)
        goto LABEL_36;
      (*(void (**)(_QWORD *))(*v28 + 24))(a2 + 3);
      v15 = 0;
      *v28 = 0;
    }
LABEL_37:
    if (!BYTE8(v32) && (BYTE8(v34) & 1) != 0 && v33[0])
    {
      v31 = (char *)v33[0] - 8;
      v30 = *((_QWORD *)v33[0] - 1);
      if (v30 != -8)
        bzero((char *)v33[0] - 8, v30 + 8);
      free(v31);
    }
    return v15;
  }
  return 0;
}

uint64_t bssl::ssl_is_valid_ech_config_list(unsigned __int16 *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  char *v9;
  char v10;
  void *v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  int v15;
  unsigned __int16 *v16;
  unint64_t v17;

  v2 = a2 - 2;
  if (a2 < 2)
    return 0;
  v5 = __rev16(*a1);
  if (v2 < v5)
    return 0;
  v16 = a1 + 1;
  v17 = v5;
  if (v5)
    v6 = v2 == v5;
  else
    v6 = 0;
  if (v6)
  {
    do
    {
      v15 = 0;
      v13 = 0u;
      v14 = 0u;
      *(_OWORD *)v11 = 0u;
      v12 = 0u;
      v3 = bssl::parse_ech_config((uint64_t)&v16, (uint64_t *)v11, &v10, 0);
      if (v11[0])
      {
        v9 = (char *)v11[0] - 8;
        v8 = *((_QWORD *)v11[0] - 1);
        if (v8 != -8)
          bzero(v9, v8 + 8);
        free(v9);
      }
      if (v17)
        v7 = v3;
      else
        v7 = 0;
    }
    while ((v7 & 1) != 0);
    return v3;
  }
  return 0;
}

BOOL bssl::ssl_select_ech_config(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v12;
  char v16;
  unint64_t v17;
  unsigned __int16 *v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  void *v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  void *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  size_t v37;
  _QWORD *v38;
  void *v39;
  char *v40;
  char *v41;
  char *v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t **v47;
  bssl::SSLTranscript *v48;
  _QWORD *v49;
  __int128 v50;
  void *v51[2];
  __int128 v52;
  char v53;
  void *v54[2];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  unsigned __int16 *v59;
  unint64_t v60;
  uint64_t *v61[2];

  *a4 = 0;
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u || (v6 = *(_QWORD *)(a1 + 8), (v7 = *(_QWORD *)(v6 + 224)) == 0))
  {
LABEL_95:
    LOBYTE(v12) = 1;
    return v12;
  }
  if (v7 != 1)
  {
    v8 = *(unsigned __int16 **)(v6 + 216);
    v9 = v7 - 2;
    v10 = __rev16(*v8);
    if (v9 >= v10)
    {
      v59 = v8 + 1;
      v60 = v10;
      if (v10 && v9 == v10)
      {
        v48 = (bssl::SSLTranscript *)(a1 + 448);
        v49 = (_QWORD *)(a1 + 720);
        v47 = (uint64_t **)(a1 + 1528);
        while (1)
        {
          v58 = 0;
          v56 = 0u;
          v57 = 0u;
          *(_OWORD *)v54 = 0u;
          v55 = 0u;
          v53 = 0;
          v16 = 0;
          v12 = 0;
          if (bssl::parse_ech_config((uint64_t)&v59, (uint64_t *)v54, &v53, 0))
          {
            v16 = 1;
            if (!v53 || (unsigned __int16)v58 != 32 || (v17 = *((_QWORD *)&v57 + 1)) == 0)
            {
              v12 = v4;
              v26 = v54[0];
              if (v54[0])
                goto LABEL_68;
              goto LABEL_71;
            }
            v18 = (unsigned __int16 *)v57;
            if ((~*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 237) & 0x1800) != 0)
            {
              v19 = 0;
              do
              {
                if (v17 < 2 || (v17 & 0xFFFFFFFFFFFFFFFELL) == 2)
                  goto LABEL_66;
                v27 = __rev16(*v18);
                v28 = __rev16(v18[1]);
                if (v28 == 3)
                  v29 = &EVP_hpke_chacha20_poly1305_kAEAD;
                else
                  v29 = 0;
                if (v28 == 2)
                  v29 = &EVP_hpke_aes_256_gcm_kAEAD;
                if (v28 == 1)
                  v29 = &EVP_hpke_aes_128_gcm_kAEAD;
                if ((v28 == 3 || v19 == 0) && v29 != 0 && v27 == 1)
                  v19 = (uint64_t)v29;
                v18 += 2;
                v17 -= 4;
              }
              while (v17);
LABEL_63:
              if (!v19)
                goto LABEL_66;
              v33 = v54[1];
              v34 = (char *)v54[1] + 8;
              v50 = 0u;
              *(_OWORD *)v51 = 0u;
              v52 = 0u;
              if ((unint64_t)v54[1] + 8 >= 0xFFFFFFFFFFFFFFF8)
              {
                ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
                goto LABEL_86;
              }
              v38 = malloc_type_malloc((size_t)v54[1] + 16, 0x30772F57uLL);
              if (v38)
              {
                *v38 = v34;
                v39 = v38 + 1;
LABEL_76:
                BYTE8(v50) = 0;
                *(_QWORD *)&v50 = 0;
                v51[0] = v39;
                v51[1] = 0;
                *(_QWORD *)&v52 = v34;
                BYTE8(v52) = BYTE8(v52) & 0xFC | 1;
                v61[0] = 0;
                if (CBB_add_space((uint64_t)&v50, v61, 8)
                  && (*v61[0] = 0x68636520736C74, CBB_add_bytes((uint64_t)&v50, v54[0], (size_t)v33))
                  && ((v40 = (char *)v51[0], !BYTE8(v50))
                    ? (v43 = v51[1])
                    : (v41 = (char *)v51[1] + v52,
                       v42 = &v41[*(_QWORD *)v51[0]],
                       v43 = (void *)(*((_QWORD *)v51[0] + 1) - (_QWORD)v41),
                       v40 = v42),
                      EVP_HPKE_CTX_setup_sender(v49, a2, (uint64_t)a4, a3, (uint64_t)&EVP_hpke_x25519_hkdf_sha256_kKEM, (uint64_t)&EVP_hpke_hkdf_sha256_kKDF, v19, v55, *((uint64_t *)&v55 + 1), v40, (uint64_t)v43)&& bssl::SSLTranscript::Init(v48)))
                {
                  bssl::MakeUnique<bssl::ECHConfig,bssl::ECHConfig>(v61, (uint64_t)v54);
                  std::unique_ptr<bssl::ECHConfig,bssl::internal::Deleter>::operator=[abi:sn180100](v47, v61);
                  std::unique_ptr<bssl::ECHConfig,bssl::internal::Deleter>::~unique_ptr[abi:sn180100](v61);
                  v12 = *v47 != 0;
                }
                else
                {
LABEL_86:
                  v12 = 0;
                }
              }
              else
              {
                ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
                v12 = 0;
                if (!v34)
                {
                  v39 = 0;
                  goto LABEL_76;
                }
              }
              if (!BYTE8(v50) && (BYTE8(v52) & 1) != 0 && v51[0])
              {
                v45 = (char *)v51[0] - 8;
                v44 = *((_QWORD *)v51[0] - 1);
                if (v44 != -8)
                  bzero(v45, v44 + 8);
                free(v45);
              }
              v16 = 0;
              v26 = v54[0];
              if (v54[0])
                goto LABEL_68;
              goto LABEL_71;
            }
            v19 = 0;
            while (v17 >= 2 && (v17 & 0xFFFFFFFFFFFFFFFELL) != 2)
            {
              v20 = __rev16(*v18);
              v21 = __rev16(v18[1]);
              if (v21 == 3)
                v22 = &EVP_hpke_chacha20_poly1305_kAEAD;
              else
                v22 = 0;
              if (v21 == 2)
                v22 = &EVP_hpke_aes_256_gcm_kAEAD;
              if (v21 == 1)
                v23 = &EVP_hpke_aes_128_gcm_kAEAD;
              else
                v23 = v22;
              if (v19)
                v24 = v19;
              else
                v24 = (uint64_t)v23;
              if (v23)
                v25 = v20 == 1;
              else
                v25 = 0;
              if (v25)
                v19 = v24;
              v18 += 2;
              v17 -= 4;
              if (!v17)
                goto LABEL_63;
            }
LABEL_66:
            v16 = 1;
            v12 = v4;
          }
          v26 = v54[0];
          if (v54[0])
          {
LABEL_68:
            v36 = *(v26 - 1);
            v35 = (char *)(v26 - 1);
            v37 = v36 + 8;
            if (v36 != -8)
              bzero(v35, v37);
            free(v35);
          }
LABEL_71:
          if ((v16 & 1) == 0)
            return v12;
          v4 = v12;
          if (!v60)
            goto LABEL_95;
        }
      }
    }
  }
  LOBYTE(v12) = 0;
  return v12;
}

void bssl::MakeUnique<bssl::ECHConfig,bssl::ECHConfig>(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = (char *)malloc_type_malloc(0x50uLL, 0x30772F57uLL);
  if (v4)
  {
    *(_QWORD *)v4 = 72;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    v5 = *(_QWORD *)(a2 + 8);
    *((_QWORD *)v4 + 1) = *(_QWORD *)a2;
    *((_QWORD *)v4 + 2) = v5;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v6 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)(a2 + 32);
    v8 = *(_OWORD *)(a2 + 48);
    *((_DWORD *)v4 + 18) = *(_DWORD *)(a2 + 64);
    *(_OWORD *)(v4 + 56) = v8;
    *(_OWORD *)(v4 + 40) = v7;
    *(_OWORD *)(v4 + 24) = v6;
    *a1 = v4 + 8;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    *a1 = 0;
  }
}

uint64_t **std::unique_ptr<bssl::ECHConfig,bssl::internal::Deleter>::operator=[abi:sn180100](uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  size_t v8;
  uint64_t *v9;
  uint64_t v10;
  size_t v11;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    v5 = *v4;
    if (*v4)
    {
      v7 = *(_QWORD *)(v5 - 8);
      v6 = (void *)(v5 - 8);
      v8 = v7 + 8;
      if (v7 != -8)
        bzero(v6, v8);
      free(v6);
    }
    *v4 = 0;
    v4[1] = 0;
    v10 = *(v4 - 1);
    v9 = v4 - 1;
    v11 = v10 + 8;
    if (v10 != -8)
      bzero(v9, v11);
    free(v9);
  }
  return a1;
}

uint64_t **std::unique_ptr<bssl::ECHConfig,bssl::internal::Deleter>::~unique_ptr[abi:sn180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t *v7;
  uint64_t v8;
  size_t v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    if (*v2)
    {
      v5 = *(_QWORD *)(v3 - 8);
      v4 = (void *)(v3 - 8);
      v6 = v5 + 8;
      if (v5 != -8)
        bzero(v4, v6);
      free(v4);
    }
    *v2 = 0;
    v2[1] = 0;
    v8 = *(v2 - 1);
    v7 = v2 - 1;
    v9 = v8 + 8;
    if (v8 != -8)
      bzero(v7, v9);
    free(v7);
  }
  return a1;
}

uint64_t bssl::ssl_encrypt_client_hello(int8x16_t *a1, const void *a2, size_t a3)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  __int8 v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  char v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v28;
  char *v29;
  size_t v30;
  char *v31;
  unint64_t v32;
  const char *v33;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  __int16 *v37;
  uint64_t v38;
  size_t v39;
  size_t v40;
  char v41;
  uint64_t v42;
  size_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  size_t v47;
  void *v48;
  size_t v49;
  void *v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  __int128 v58;
  void *v59[4];
  __int128 v60;
  void *v61[4];
  __int128 v62;
  char v63;
  size_t v64[7];

  v64[6] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)a1->i64[0];
  if (a1[95].i64[1])
  {
    memset(v61, 0, sizeof(v61));
    v60 = 0u;
    v58 = 0u;
    memset(v59, 0, sizeof(v59));
    v52 = 0;
    v50 = 0;
    v51 = 0;
    if ((*(unsigned int (**)(_QWORD *, __int128 *, uint64_t *, uint64_t))(*v4 + 88))(v4, &v60, &v53, 1))
    {
      memset(v59, 0, sizeof(v59));
      v58 = 0u;
      v7 = malloc_type_malloc(0x108uLL, 0x30772F57uLL);
      if (v7)
      {
        *v7 = 256;
        BYTE8(v58) = 0;
        *(_QWORD *)&v58 = 0;
        v59[0] = v7 + 1;
        *(_OWORD *)&v59[1] = xmmword_208F26740;
        LOBYTE(v59[3]) = (uint64_t)v59[3] & 0xFC | 1;
        if (bssl::ssl_write_client_hello_without_extensions(a1->i64, &v53, 1, 0)
          && bssl::ssl_write_client_hello_without_extensions(a1->i64, (uint64_t *)&v58, 1, 1))
        {
          v8 = v54 ? *(_QWORD *)(v55 + 8) - (v56 + v57) : v56;
          if (bssl::ssl_add_clienthello_tlsext((uint64_t)a1, (uint64_t)&v53, (uint64_t *)&v58, &v52, 1, v8)
            && ((*(uint64_t (**)(_QWORD *, __int128 *, void **))(*v4 + 96))(v4, &v60, &v50) & 1) != 0)
          {
            if (v52)
            {
              v64[0] = 0;
              if (!bssl::tls13_write_psk_binder(a1->i64, (bssl::SSLTranscript *)&a1[28], (const ssl_cipher_st *)v50, v51, v64))goto LABEL_13;
              if (BYTE8(v58))
              {
                v28 = (char *)v59[1] + LOBYTE(v59[2]);
                v29 = (char *)(*((_QWORD *)v59[0] + 1) - (_QWORD)v28);
                v30 = v64[0];
                if ((unint64_t)v29 < v64[0])
                  goto LABEL_95;
                v31 = &v28[*(_QWORD *)v59[0]];
              }
              else
              {
                v29 = (char *)v59[1];
                v30 = v64[0];
                if (v59[1] < (void *)v64[0])
                  goto LABEL_95;
                v31 = (char *)v59[0];
              }
              if (v51 < v30)
LABEL_95:
                abort();
              if (v30)
                memcpy(&v29[(_QWORD)v31 - v30], (char *)v50 + v51 - v30, v30);
            }
            bssl::ssl_do_msg_callback((uint64_t)v4, 1, 257, (uint64_t)v50, v51);
            if (bssl::SSLTranscript::Update((uint64_t)a1[28].i64, v50, v51))
            {
              v32 = *(unsigned __int8 *)(a1[95].i64[1] + 66);
              v33 = (const char *)v4[18];
              if (v33)
              {
                v34 = strlen(v33);
                v35 = v32 - v34;
                if (v32 < v34)
                  v35 = 0;
              }
              else
              {
                v35 = v32 + 9;
              }
              if (BYTE8(v58))
                v36 = *((_QWORD *)v59[0] + 1) - ((unint64_t)v59[1] + LOBYTE(v59[2]));
              else
                LOBYTE(v36) = v59[1];
              v48 = 0;
              v49 = 0;
              if (CBB_add_zeros((uint64_t)&v58, ((-(char)v36 - (_BYTE)v35) & 0x1F) + v35))
              {
                if (bssl::CBBFinishArray((uint64_t)&v58, (uint64_t *)&v48))
                {
                  v37 = (__int16 *)a1[46].i64[0];
                  v38 = a1[45].i64[1];
                  v39 = v49;
                  v40 = v39 + *(unsigned __int8 *)((*(uint64_t (**)(void))(v38 + 8))() + 2);
                  v47 = v40;
                  if (CBB_init((uint64_t)&v60, 0x100uLL))
                  {
                    if (CBB_add_u16((uint64_t)&v60, *v37))
                    {
                      if (CBB_add_u16((uint64_t)&v60, *(_WORD *)v38))
                      {
                        v41 = *(_BYTE *)(a1[95].i64[1] + 67);
                        v64[0] = 0;
                        if (CBB_add_space((uint64_t)&v60, v64, 1))
                        {
                          *(_BYTE *)v64[0] = v41;
                          if (CBB_add_u16_length_prefixed((uint64_t *)&v60, (uint64_t)v64))
                          {
                            if (CBB_add_bytes((uint64_t)v64, a2, a3)
                              && CBB_add_u16_length_prefixed((uint64_t *)&v60, (uint64_t)&v62)
                              && CBB_add_zeros((uint64_t)&v62, v40)
                              && bssl::CBBFinishArray((uint64_t)&v60, &a1[34].i64[1]))
                            {
                              v45 = 0u;
                              v46 = 0u;
                              v44 = 0u;
                              if (!CBB_init((uint64_t)&v44, 0x100uLL)
                                || !bssl::ssl_write_client_hello_without_extensions(a1->i64, (uint64_t *)&v44, 2, 0)|| (!BYTE8(v44)? (v42 = *((_QWORD *)&v45 + 1)): (v42 = *(_QWORD *)(v45 + 8) - (*((_QWORD *)&v45 + 1) + v46)), !bssl::ssl_add_clienthello_tlsext((uint64_t)a1, (uint64_t)&v44, 0, &v52, 2, v42)))
                              {
                                ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/encrypted_client_hello.cc", 870);
                                goto LABEL_90;
                              }
                              v43 = a1[35].u64[0];
                              if (v43 >= v40)
                              {
                                if (EVP_HPKE_CTX_seal(a1 + 45, (char *)(a1[34].i64[1] + v43 - v40), &v47, v40, (char *)v48, v39))
                                {
                                  v9 = v47 == v40;
LABEL_91:
                                  CBB_cleanup((uint64_t)&v44);
                                  OPENSSL_free(v48);
                                  v10 = v50;
                                  if (!v50)
                                    goto LABEL_17;
LABEL_14:
                                  v12 = *(v10 - 1);
                                  v11 = (char *)(v10 - 1);
                                  v13 = v12 + 8;
                                  if (v12 != -8)
                                    bzero(v11, v13);
                                  free(v11);
                                  goto LABEL_17;
                                }
LABEL_90:
                                v9 = 0;
                                goto LABEL_91;
                              }
                              goto LABEL_95;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              v9 = 0;
              OPENSSL_free(v48);
              v10 = v50;
              if (v50)
                goto LABEL_14;
LABEL_17:
              if (!BYTE8(v58) && ((uint64_t)v59[3] & 1) != 0 && v59[0])
              {
                v15 = (char *)v59[0] - 8;
                v14 = *((_QWORD *)v59[0] - 1);
                if (v14 != -8)
                  bzero(v15, v14 + 8);
                free(v15);
              }
              goto LABEL_39;
            }
LABEL_13:
            v9 = 0;
            v10 = v50;
            if (v50)
              goto LABEL_14;
            goto LABEL_17;
          }
        }
      }
      else
      {
        ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      }
    }
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/encrypted_client_hello.cc", 792);
    goto LABEL_13;
  }
  if (a1[1].u16[7] < 0x304u || (*(_WORD *)(a1->i64[1] + 237) & 1) == 0)
    return 1;
  v16 = *(_WORD *)(v4[1] + 237) & 0x1800;
  v17 = a1[101].i8[4];
  RAND_bytes_with_additional_data((uint64_t)&v62, 0x20uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
  LOBYTE(v62) = v62 | 7;
  v63 = v63 & 0x3F | 0x80;
  X25519_public_from_private(v64, &v62);
  *(_QWORD *)&v60 = 0;
  v18 = RAND_bytes_with_additional_data((uint64_t)&v60, 8uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
  v19 = (uint64_t (*)(uint64_t))EVP_aead_chacha20_poly1305;
  v20 = v60;
  if (v16 == 6144)
    v19 = (uint64_t (*)(uint64_t))EVP_aead_aes_128_gcm;
  v21 = *(unsigned __int8 *)(v19(v18) + 2);
  *(_QWORD *)&v44 = 0;
  v60 = 0u;
  memset(v61, 0, sizeof(v61));
  v22 = malloc_type_malloc(0x108uLL, 0x30772F57uLL);
  if (!v22)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
LABEL_38:
    v9 = 0;
    goto LABEL_39;
  }
  *v22 = 256;
  BYTE8(v60) = 0;
  *(_QWORD *)&v60 = 0;
  v61[0] = v22 + 1;
  *(_OWORD *)&v61[1] = xmmword_208F26740;
  LOBYTE(v61[3]) = 1;
  *(_QWORD *)&v58 = 0;
  if (!CBB_add_space((uint64_t)&v60, &v58, 2))
    goto LABEL_38;
  *(_BYTE *)(v58 + 1) = 1;
  *(_BYTE *)v58 = 0;
  *(_QWORD *)&v58 = 0;
  if (!CBB_add_space((uint64_t)&v60, &v58, 2))
    goto LABEL_38;
  v23 = v16 == 6144 ? 1 : 3;
  *(_BYTE *)(v58 + 1) = v23;
  *(_BYTE *)v58 = 0;
  *(_QWORD *)&v58 = 0;
  if (!CBB_add_space((uint64_t)&v60, &v58, 1))
    goto LABEL_38;
  *(_BYTE *)v58 = v17;
  if (!CBB_add_u16_length_prefixed((uint64_t *)&v60, (uint64_t)&v58))
    goto LABEL_38;
  if (!CBB_add_bytes((uint64_t)&v58, v64, 0x20uLL))
    goto LABEL_38;
  if (!CBB_add_u16_length_prefixed((uint64_t *)&v60, (uint64_t)&v53))
    goto LABEL_38;
  v24 = v21 + 32 * (v20 & 3) + 128;
  if (!CBB_add_space((uint64_t)&v53, &v44, v24))
    goto LABEL_38;
  RAND_bytes_with_additional_data(v44, v24, (uint64_t)&RAND_bytes_kZeroAdditionalData);
  v9 = bssl::CBBFinishArray((uint64_t)&v60, &a1[34].i64[1]);
LABEL_39:
  if (!BYTE8(v60) && ((uint64_t)v61[3] & 1) != 0 && v61[0])
  {
    v26 = (char *)v61[0] - 8;
    v25 = *((_QWORD *)v61[0] - 1);
    if (v25 != -8)
      bzero(v26, v25 + 8);
    free(v26);
  }
  return v9;
}

void bssl::RefCounted<ssl_ech_keys_st>::DecRefInternal(unsigned int *a1)
{
  unsigned int i;
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t j;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  uint64_t *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  size_t v18;
  unsigned int *v19;
  uint64_t v20;
  size_t v21;

  for (i = atomic_load(a1); i != -1; i = v3)
  {
    if (!i)
      abort();
    v3 = __ldaxr(a1);
    if (v3 == i)
    {
      if (!__stlxr(i - 1, a1))
      {
        if (i == 1)
        {
          v4 = (uint64_t *)(a1 + 4);
          v5 = *((_QWORD *)a1 + 3);
          if (v5)
          {
            for (j = 0; j < v5; ++j)
            {
              v7 = *(uint64_t **)(*v4 + 8 * j);
              *(_QWORD *)(*v4 + 8 * j) = 0;
              if (v7)
              {
                v8 = *v7;
                if (*v7)
                {
                  v10 = *(_QWORD *)(v8 - 8);
                  v9 = (void *)(v8 - 8);
                  v11 = v10 + 8;
                  if (v10 != -8)
                    bzero(v9, v11);
                  free(v9);
                }
                *v7 = 0;
                v7[1] = 0;
                v13 = *(v7 - 1);
                v12 = v7 - 1;
                v14 = v13 + 8;
                if (v13 != -8)
                  bzero(v12, v14);
                free(v12);
                v5 = *((_QWORD *)a1 + 3);
              }
            }
          }
          v15 = *v4;
          if (*v4)
          {
            v17 = *(_QWORD *)(v15 - 8);
            v16 = (void *)(v15 - 8);
            v18 = v17 + 8;
            if (v17 != -8)
              bzero(v16, v18);
            free(v16);
          }
          *v4 = 0;
          *((_QWORD *)a1 + 3) = 0;
          v20 = *((_QWORD *)a1 - 1);
          v19 = a1 - 2;
          v21 = v20 + 8;
          if (v20 != -8)
            bzero(v19, v21);
          free(v19);
        }
        return;
      }
    }
    else
    {
      __clrex();
    }
  }
}

unint64_t ERR_get_error(void)
{
  _QWORD *v0;
  _OWORD *v1;
  _OWORD *v2;
  int v3;
  int v5;
  void **v6;
  unint64_t v7;

  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
    abort();
  if (!g_thread_local_key_created
    || (v0 = pthread_getspecific(g_thread_local_key)) == 0
    || (v1 = (_OWORD *)*v0) == 0)
  {
    v2 = malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
    if (!v2)
      return 0;
    v1 = v2;
    v2[23] = 0u;
    v2[24] = 0u;
    v2[21] = 0u;
    v2[22] = 0u;
    v2[19] = 0u;
    v2[20] = 0u;
    v2[17] = 0u;
    v2[18] = 0u;
    v2[15] = 0u;
    v2[16] = 0u;
    v2[13] = 0u;
    v2[14] = 0u;
    v2[11] = 0u;
    v2[12] = 0u;
    v2[9] = 0u;
    v2[10] = 0u;
    v2[7] = 0u;
    v2[8] = 0u;
    v2[5] = 0u;
    v2[6] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    *v2 = 0u;
    if (!CRYPTO_set_thread_local(0, (uint64_t)v2, (void (*)(uint64_t))err_state_free))
      return 0;
  }
  v3 = *((_DWORD *)v1 + 97);
  if (v3 == *((_DWORD *)v1 + 96))
    return 0;
  v5 = ((_BYTE)v3 + 1) & 0xF;
  v6 = (void **)v1 + 3 * ((v3 + 1) & 0xF);
  v7 = *((unsigned int *)v6 + 4);
  free(v6[1]);
  *v6 = 0;
  v6[1] = 0;
  v6[2] = 0;
  *((_DWORD *)v1 + 97) = v5;
  return v7;
}

uint64_t get_error_values(int a1, int a2, const char **a3, _DWORD *a4, _QWORD *a5, _DWORD *a6)
{
  _QWORD *v12;
  _OWORD *v13;
  _OWORD *v14;
  int v15;
  uint64_t v16;
  int v18;
  unsigned int v19;
  char *v20;
  const char *v21;
  int v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void *v27;

  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
    abort();
  if (!g_thread_local_key_created
    || (v12 = pthread_getspecific(g_thread_local_key)) == 0
    || (v13 = (_OWORD *)*v12) == 0)
  {
    v14 = malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
    if (!v14)
      return 0;
    v13 = v14;
    v14[23] = 0u;
    v14[24] = 0u;
    v14[21] = 0u;
    v14[22] = 0u;
    v14[19] = 0u;
    v14[20] = 0u;
    v14[17] = 0u;
    v14[18] = 0u;
    v14[15] = 0u;
    v14[16] = 0u;
    v14[13] = 0u;
    v14[14] = 0u;
    v14[11] = 0u;
    v14[12] = 0u;
    v14[9] = 0u;
    v14[10] = 0u;
    v14[7] = 0u;
    v14[8] = 0u;
    v14[5] = 0u;
    v14[6] = 0u;
    v14[3] = 0u;
    v14[4] = 0u;
    v14[1] = 0u;
    v14[2] = 0u;
    *v14 = 0u;
    if (!CRYPTO_set_thread_local(0, (uint64_t)v14, (void (*)(uint64_t))err_state_free))
      return 0;
  }
  v15 = *((_DWORD *)v13 + 97);
  if (v15 == *((_DWORD *)v13 + 96))
    return 0;
  v18 = ((_BYTE)v15 + 1) & 0xF;
  if (a2)
    v19 = *((_DWORD *)v13 + 96);
  else
    v19 = v18;
  v20 = (char *)v13 + 24 * v19;
  v16 = *((unsigned int *)v20 + 4);
  if (a3 && a4)
  {
    v21 = *(const char **)v20;
    if (*(_QWORD *)v20)
    {
      v22 = *((unsigned __int16 *)v13 + 12 * v19 + 10);
    }
    else
    {
      v22 = 0;
      v21 = "NA";
    }
    *a3 = v21;
    *a4 = v22;
  }
  if (!a5)
    goto LABEL_29;
  v23 = (char *)v13 + 24 * v19;
  v26 = *((_QWORD *)v23 + 1);
  v25 = v23 + 8;
  v24 = v26;
  if (!v26)
  {
    *a5 = "";
    if (a6)
      *a6 = 0;
LABEL_29:
    if (!a1)
      return v16;
    v27 = (void *)*((_QWORD *)v13 + 3 * v19 + 1);
LABEL_31:
    free(v27);
    *(_QWORD *)v20 = 0;
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
    *((_DWORD *)v13 + 97) = v19;
    return v16;
  }
  *a5 = v24;
  if (a6)
    *a6 = 3;
  if (a1)
  {
    if (*v25)
    {
      free(*((void **)v13 + 49));
      *((_QWORD *)v13 + 49) = *v25;
    }
    v27 = 0;
    *v25 = 0;
    goto LABEL_31;
  }
  return v16;
}

unint64_t ERR_peek_error(void)
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t result;
  int v3;

  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
    abort();
  if (g_thread_local_key_created)
  {
    v0 = (unint64_t *)pthread_getspecific(g_thread_local_key);
    if (v0)
    {
      v1 = *v0;
      if (*v0)
        goto LABEL_7;
    }
  }
  result = (unint64_t)malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
  if (result)
  {
    v1 = result;
    *(_OWORD *)(result + 368) = 0u;
    *(_OWORD *)(result + 384) = 0u;
    *(_OWORD *)(result + 336) = 0u;
    *(_OWORD *)(result + 352) = 0u;
    *(_OWORD *)(result + 304) = 0u;
    *(_OWORD *)(result + 320) = 0u;
    *(_OWORD *)(result + 272) = 0u;
    *(_OWORD *)(result + 288) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 256) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    result = CRYPTO_set_thread_local(0, result, (void (*)(uint64_t))err_state_free);
    if ((_DWORD)result)
    {
LABEL_7:
      v3 = *(_DWORD *)(v1 + 388);
      if (v3 == *(_DWORD *)(v1 + 384))
        return 0;
      else
        return *(unsigned int *)(v1 + 24 * (((_BYTE)v3 + 1) & 0xF) + 16);
    }
  }
  return result;
}

unint64_t ERR_peek_last_error(void)
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t result;
  unsigned int v3;

  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
    abort();
  if (g_thread_local_key_created)
  {
    v0 = (unint64_t *)pthread_getspecific(g_thread_local_key);
    if (v0)
    {
      v1 = *v0;
      if (*v0)
        goto LABEL_7;
    }
  }
  result = (unint64_t)malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
  if (result)
  {
    v1 = result;
    *(_OWORD *)(result + 368) = 0u;
    *(_OWORD *)(result + 384) = 0u;
    *(_OWORD *)(result + 336) = 0u;
    *(_OWORD *)(result + 352) = 0u;
    *(_OWORD *)(result + 304) = 0u;
    *(_OWORD *)(result + 320) = 0u;
    *(_OWORD *)(result + 272) = 0u;
    *(_OWORD *)(result + 288) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 256) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)result = 0u;
    result = CRYPTO_set_thread_local(0, result, (void (*)(uint64_t))err_state_free);
    if ((_DWORD)result)
    {
LABEL_7:
      v3 = *(_DWORD *)(v1 + 384);
      if (*(_DWORD *)(v1 + 388) == v3)
        return 0;
      else
        return *(unsigned int *)(v1 + 24 * v3 + 16);
    }
  }
  return result;
}

void ERR_clear_error(void)
{
  void ***v0;
  void **v1;
  void **v2;

  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
    abort();
  if (g_thread_local_key_created)
  {
    v0 = (void ***)pthread_getspecific(g_thread_local_key);
    if (v0)
    {
      v1 = *v0;
      if (*v0)
        goto LABEL_7;
    }
  }
  v2 = (void **)malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
  if (v2)
  {
    v1 = v2;
    *((_OWORD *)v2 + 23) = 0u;
    *((_OWORD *)v2 + 24) = 0u;
    *((_OWORD *)v2 + 21) = 0u;
    *((_OWORD *)v2 + 22) = 0u;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
    if (CRYPTO_set_thread_local(0, (uint64_t)v2, (void (*)(uint64_t))err_state_free))
    {
LABEL_7:
      free(v1[1]);
      *v1 = 0;
      v1[1] = 0;
      v1[2] = 0;
      free(v1[4]);
      v1[3] = 0;
      v1[4] = 0;
      v1[5] = 0;
      free(v1[7]);
      v1[6] = 0;
      v1[7] = 0;
      v1[8] = 0;
      free(v1[10]);
      v1[9] = 0;
      v1[10] = 0;
      v1[11] = 0;
      free(v1[13]);
      v1[12] = 0;
      v1[13] = 0;
      v1[14] = 0;
      free(v1[16]);
      v1[15] = 0;
      v1[16] = 0;
      v1[17] = 0;
      free(v1[19]);
      v1[18] = 0;
      v1[19] = 0;
      v1[20] = 0;
      free(v1[22]);
      v1[21] = 0;
      v1[22] = 0;
      v1[23] = 0;
      free(v1[25]);
      v1[24] = 0;
      v1[25] = 0;
      v1[26] = 0;
      free(v1[28]);
      v1[27] = 0;
      v1[28] = 0;
      v1[29] = 0;
      free(v1[31]);
      v1[30] = 0;
      v1[31] = 0;
      v1[32] = 0;
      free(v1[34]);
      v1[33] = 0;
      v1[34] = 0;
      v1[35] = 0;
      free(v1[37]);
      v1[36] = 0;
      v1[37] = 0;
      v1[38] = 0;
      free(v1[40]);
      v1[39] = 0;
      v1[40] = 0;
      v1[41] = 0;
      free(v1[43]);
      v1[42] = 0;
      v1[43] = 0;
      v1[44] = 0;
      free(v1[46]);
      v1[45] = 0;
      v1[46] = 0;
      v1[47] = 0;
      free(v1[49]);
      v1[48] = 0;
      v1[49] = 0;
    }
  }
}

void ERR_error_string_n(unint64_t e, char *buf, size_t len)
{
  int v5;
  unsigned int v6;
  unint64_t v7;
  const char *v8;
  char *v9;
  _DWORD *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char __str[32];
  char __key[32];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (!len)
    return;
  v5 = e;
  v6 = BYTE3(e);
  v7 = e & 0xFFF;
  if (e >> 25 > 0x10)
  {
    v8 = 0;
    if (v6 != 2)
      goto LABEL_4;
LABEL_8:
    if (v7 <= 0x7E)
    {
      v9 = strerror(e & 0xFFF);
      goto LABEL_18;
    }
LABEL_17:
    v9 = 0;
    goto LABEL_18;
  }
  v8 = (&kLibraryNames)[3 * v6];
  if (v6 == 2)
    goto LABEL_8;
LABEL_4:
  if (v7 <= 0x21)
  {
    v9 = (&kLibraryNames)[3 * (e & 0xFFF)];
    goto LABEL_18;
  }
  if (v7 <= 0x63)
  {
    if ((v7 - 65) < 5)
    {
      v9 = off_24C0C76F0[v7 - 65];
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v9 = 0;
  if (!(e >> 30) && v7 <= 0x7FF)
  {
    *(_DWORD *)__key = ((_DWORD)v7 << 15) | (v6 << 26);
    v10 = bsearch(__key, &kOpenSSLReasonValues, 0x2F2uLL, 4uLL, (int (__cdecl *)(const void *, const void *))err_string_cmp);
    if (v10)
    {
      v9 = &kOpenSSLReasonStringData[*v10 & 0x7FFF];
      goto LABEL_18;
    }
    goto LABEL_17;
  }
LABEL_18:
  if (!v8)
  {
    v8 = __key;
    snprintf(__key, 0x20uLL, "lib(%u)", v6);
    if (v9)
      goto LABEL_20;
LABEL_34:
    v9 = __str;
    snprintf(__str, 0x20uLL, "reason(%u)", v7);
    goto LABEL_20;
  }
  if (!v9)
    goto LABEL_34;
LABEL_20:
  v11 = snprintf(buf, len, "error:%08x:%s:OPENSSL_internal:%s", v5, v8, v9);
  if (len >= 5 && (v11 & 0x80000000) == 0 && v11 >= len)
  {
    v12 = &buf[len];
    v13 = &buf[len - 5];
    v14 = strchr(buf, 58);
    v15 = 4;
    if (!v14)
      goto LABEL_31;
    if (v14 > v13)
      goto LABEL_31;
    v16 = v12 - 1;
    v17 = strchr(v14 + 1, 58);
    v13 = v16 - 3;
    v15 = 3;
    if (!v17
      || v17 > v13
      || (v18 = strchr(v17 + 1, 58), v13 = v16 - 2, v15 = 2, !v18)
      || v18 > v13
      || (v19 = strchr(v18 + 1, 58), v13 = v16 - 1, v15 = 1, !v19)
      || v19 > v13)
    {
LABEL_31:
      memset(v13, 58, v15);
    }
  }
}

void ERR_put_error(int lib, int func, int reason, const char *file, int line)
{
  __int16 v5;
  _QWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  int v12;
  int v13;
  void **v14;

  v5 = line;
  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
    abort();
  if (g_thread_local_key_created)
  {
    v9 = pthread_getspecific(g_thread_local_key);
    if (v9)
    {
      v10 = (_OWORD *)*v9;
      if (*v9)
        goto LABEL_8;
    }
  }
  v11 = malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
  if (v11)
  {
    v10 = v11;
    v11[23] = 0u;
    v11[24] = 0u;
    v11[21] = 0u;
    v11[22] = 0u;
    v11[19] = 0u;
    v11[20] = 0u;
    v11[17] = 0u;
    v11[18] = 0u;
    v11[15] = 0u;
    v11[16] = 0u;
    v11[13] = 0u;
    v11[14] = 0u;
    v11[11] = 0u;
    v11[12] = 0u;
    v11[9] = 0u;
    v11[10] = 0u;
    v11[7] = 0u;
    v11[8] = 0u;
    v11[5] = 0u;
    v11[6] = 0u;
    v11[3] = 0u;
    v11[4] = 0u;
    v11[1] = 0u;
    v11[2] = 0u;
    *v11 = 0u;
    if (CRYPTO_set_thread_local(0, (uint64_t)v11, (void (*)(uint64_t))err_state_free))
    {
LABEL_8:
      if (lib == 2 && !reason)
        reason = *__error();
      v12 = *((_DWORD *)v10 + 96);
      v13 = ((_BYTE)v12 + 1) & 0xF;
      *((_DWORD *)v10 + 96) = v13;
      if (v13 == *((_DWORD *)v10 + 97))
        *((_DWORD *)v10 + 97) = ((_BYTE)v12 + 2) & 0xF;
      v14 = (void **)v10 + 3 * ((v12 + 1) & 0xF);
      free(v14[1]);
      v14[1] = 0;
      v14[2] = 0;
      *v14 = (void *)file;
      *((_WORD *)v14 + 10) = v5;
      *((_DWORD *)v14 + 4) = reason & 0xFFF | (lib << 24);
    }
  }
}

void ERR_add_error_data(int num, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  size_t v6;
  _BYTE *v7;
  void *v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  unsigned int v19;
  void **v20;
  va_list v21;
  va_list v22;
  va_list va;

  va_start(va, num);
  va_copy(v21, va);
  va_copy(v22, va);
  v2 = num;
  v3 = 0;
  if (!num)
    goto LABEL_8;
  v4 = num;
  do
  {
    v5 = va_arg(v21, const char *);
    if (v5)
    {
      v6 = strlen(v5);
      if (__CFADD__(v3, v6))
        return;
      v3 += v6;
    }
    --v4;
  }
  while (v4);
  if (v3 != -1)
  {
LABEL_8:
    v7 = malloc_type_malloc(v3 + 1, 0x8E171D9AuLL);
    if (v7)
    {
      v8 = v7;
      *v7 = 0;
      if (num)
      {
        v9 = 0;
        do
        {
          v11 = v22;
          v22 += 8;
          v12 = *v11;
          if (*v11)
          {
            v13 = v3;
            v14 = v3 + 1;
            v10 = v7;
            while (*v10)
            {
              ++v10;
              --v13;
              if (!--v14)
                goto LABEL_13;
            }
            if (v14 >= 2)
            {
              v15 = 0;
              do
              {
                if (!*(_BYTE *)(v12 + v15))
                  break;
                v10[v15] = *(_BYTE *)(v12 + v15);
                ++v15;
                --v13;
              }
              while (v13);
              v10 += v15;
            }
            *v10 = 0;
          }
LABEL_13:
          ++v9;
        }
        while (v9 != v2);
      }
      if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
        abort();
      if (!g_thread_local_key_created
        || (v16 = pthread_getspecific(g_thread_local_key)) == 0
        || (v17 = (_OWORD *)*v16) == 0)
      {
        v18 = malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
        if (!v18)
          goto LABEL_31;
        v17 = v18;
        v18[23] = 0u;
        v18[24] = 0u;
        v18[21] = 0u;
        v18[22] = 0u;
        v18[19] = 0u;
        v18[20] = 0u;
        v18[17] = 0u;
        v18[18] = 0u;
        v18[15] = 0u;
        v18[16] = 0u;
        v18[13] = 0u;
        v18[14] = 0u;
        v18[11] = 0u;
        v18[12] = 0u;
        v18[9] = 0u;
        v18[10] = 0u;
        v18[7] = 0u;
        v18[8] = 0u;
        v18[5] = 0u;
        v18[6] = 0u;
        v18[3] = 0u;
        v18[4] = 0u;
        v18[1] = 0u;
        v18[2] = 0u;
        *v18 = 0u;
        if (!CRYPTO_set_thread_local(0, (uint64_t)v18, (void (*)(uint64_t))err_state_free))
          goto LABEL_31;
      }
      v19 = *((_DWORD *)v17 + 96);
      if (v19 != *((_DWORD *)v17 + 97))
      {
        v20 = (void **)v17 + 3 * v19;
        free(v20[1]);
        v20[1] = v8;
      }
      else
      {
LABEL_31:
        free(v8);
      }
    }
  }
}

void ERR_add_error_dataf(const char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char *v10;
  char *v11;
  unsigned int v12;
  size_t v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _OWORD *v17;
  _OWORD *v18;
  unsigned int v19;
  void **v20;

  v10 = (char *)malloc(0x40uLL);
  v11 = v10;
  if (!v10)
    goto LABEL_17;
  v12 = vsnprintf(v10, 0x40uLL, a1, &a9);
  if ((v12 & 0x80000000) != 0)
    goto LABEL_17;
  if (v12 < 0x40)
  {
    v13 = 64;
  }
  else
  {
    v13 = v12 + 1;
    v14 = (char *)realloc(v11, v13);
    if (!v14)
      goto LABEL_17;
    v15 = v14;
    v12 = vsnprintf(v14, v13, a1, &a9);
    v11 = v15;
    if ((v12 & 0x80000000) != 0)
      goto LABEL_17;
  }
  if (v13 <= v12)
  {
LABEL_17:
    free(v11);
    *__error() = 12;
    return;
  }
  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
    abort();
  if (!g_thread_local_key_created
    || (v16 = pthread_getspecific(g_thread_local_key)) == 0
    || (v17 = (_OWORD *)*v16) == 0)
  {
    v18 = malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
    if (!v18)
      goto LABEL_16;
    v17 = v18;
    v18[23] = 0u;
    v18[24] = 0u;
    v18[21] = 0u;
    v18[22] = 0u;
    v18[19] = 0u;
    v18[20] = 0u;
    v18[17] = 0u;
    v18[18] = 0u;
    v18[15] = 0u;
    v18[16] = 0u;
    v18[13] = 0u;
    v18[14] = 0u;
    v18[11] = 0u;
    v18[12] = 0u;
    v18[9] = 0u;
    v18[10] = 0u;
    v18[7] = 0u;
    v18[8] = 0u;
    v18[5] = 0u;
    v18[6] = 0u;
    v18[3] = 0u;
    v18[4] = 0u;
    v18[1] = 0u;
    v18[2] = 0u;
    *v18 = 0u;
    if (!CRYPTO_set_thread_local(0, (uint64_t)v18, (void (*)(uint64_t))err_state_free))
      goto LABEL_16;
  }
  v19 = *((_DWORD *)v17 + 96);
  if (v19 != *((_DWORD *)v17 + 97))
  {
    v20 = (void **)v17 + 3 * v19;
    free(v20[1]);
    v20[1] = v11;
  }
  else
  {
LABEL_16:
    free(v11);
  }
}

_QWORD *ERR_save_state()
{
  _QWORD *v0;
  _OWORD *v1;
  _OWORD *v2;
  _QWORD *v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  if (pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
    abort();
  if (!g_thread_local_key_created
    || (v0 = pthread_getspecific(g_thread_local_key)) == 0
    || (v1 = (_OWORD *)*v0) == 0)
  {
    v2 = malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
    if (!v2)
      return 0;
    v1 = v2;
    v2[23] = 0u;
    v2[24] = 0u;
    v2[21] = 0u;
    v2[22] = 0u;
    v2[19] = 0u;
    v2[20] = 0u;
    v2[17] = 0u;
    v2[18] = 0u;
    v2[15] = 0u;
    v2[16] = 0u;
    v2[13] = 0u;
    v2[14] = 0u;
    v2[11] = 0u;
    v2[12] = 0u;
    v2[9] = 0u;
    v2[10] = 0u;
    v2[7] = 0u;
    v2[8] = 0u;
    v2[5] = 0u;
    v2[6] = 0u;
    v2[3] = 0u;
    v2[4] = 0u;
    v2[1] = 0u;
    v2[2] = 0u;
    *v2 = 0u;
    if (!CRYPTO_set_thread_local(0, (uint64_t)v2, (void (*)(uint64_t))err_state_free))
      return 0;
  }
  if (*((_DWORD *)v1 + 96) == *((_DWORD *)v1 + 97))
    return 0;
  v3 = malloc_type_malloc(0x10uLL, 0x1020040EDED9539uLL);
  if (!v3)
    return v3;
  v5 = *((_DWORD *)v1 + 96);
  v6 = *((_DWORD *)v1 + 97);
  if (v5 >= v6)
    v7 = *((_DWORD *)v1 + 96);
  else
    v7 = v5 + 16;
  v8 = v7 - v6;
  v9 = malloc_type_malloc(24 * v8, 0x10500400B811B97uLL);
  *v3 = v9;
  if (!v9)
  {
    free(v3);
    return 0;
  }
  if (v7 == v6)
  {
    v3[1] = v8;
  }
  else
  {
    bzero(v9, 24 * (v7 - v6));
    v10 = 0;
    v3[1] = v8;
    if (v8 <= 1)
      v11 = 1;
    else
      v11 = v8;
    v22 = 24 * v11;
    v12 = 1;
    do
    {
      v14 = (v12 + *((_DWORD *)v1 + 97)) & 0xF;
      v15 = *v3 + v10;
      v16 = (uint64_t *)v1 + 3 * ((v12 + *((_DWORD *)v1 + 97)) & 0xF);
      free(*(void **)(v15 + 8));
      *(_QWORD *)v15 = 0;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      v17 = *v16;
      v18 = (const char *)v16[1];
      *(_QWORD *)v15 = v17;
      if (v18)
      {
        v19 = strlen(v18) + 1;
        v20 = malloc_type_malloc(v19, 0x96AA084AuLL);
        v21 = v20;
        if (v20)
          memcpy(v20, v18, v19);
        *(_QWORD *)(v15 + 8) = v21;
      }
      v13 = (char *)v1 + 24 * v14;
      *(_DWORD *)(v15 + 16) = *((_DWORD *)v13 + 4);
      *(_WORD *)(v15 + 20) = *((_WORD *)v13 + 10);
      v10 += 24;
      ++v12;
    }
    while (v22 != v10);
  }
  return v3;
}

void ERR_restore_state(_QWORD *a1)
{
  unint64_t v2;
  _QWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  void *v13;
  void *v14;
  int v15;

  if (a1 && (v2 = a1[1]) != 0)
  {
    if (v2 >= 0x10 || pthread_once(&g_thread_local_init_once, (void (*)(void))thread_local_init))
      abort();
    if (g_thread_local_key_created)
    {
      v3 = pthread_getspecific(g_thread_local_key);
      if (v3)
      {
        v4 = (_OWORD *)*v3;
        if (*v3)
          goto LABEL_25;
      }
    }
    v5 = malloc_type_malloc(0x190uLL, 0x10D00400F8CE868uLL);
    if (v5)
    {
      v4 = v5;
      v5[23] = 0u;
      v5[24] = 0u;
      v5[21] = 0u;
      v5[22] = 0u;
      v5[19] = 0u;
      v5[20] = 0u;
      v5[17] = 0u;
      v5[18] = 0u;
      v5[15] = 0u;
      v5[16] = 0u;
      v5[13] = 0u;
      v5[14] = 0u;
      v5[11] = 0u;
      v5[12] = 0u;
      v5[9] = 0u;
      v5[10] = 0u;
      v5[7] = 0u;
      v5[8] = 0u;
      v5[5] = 0u;
      v5[6] = 0u;
      v5[3] = 0u;
      v5[4] = 0u;
      v5[1] = 0u;
      v5[2] = 0u;
      *v5 = 0u;
      if (CRYPTO_set_thread_local(0, (uint64_t)v5, (void (*)(uint64_t))err_state_free))
      {
LABEL_25:
        if (a1[1])
        {
          v6 = 0;
          v7 = 0;
          do
          {
            v9 = (char *)v4 + v6;
            v10 = *a1 + v6;
            free(*(void **)((char *)v4 + v6 + 8));
            *(_QWORD *)v9 = 0;
            *((_QWORD *)v9 + 1) = 0;
            *((_QWORD *)v9 + 2) = 0;
            v11 = *(const char **)(v10 + 8);
            *(_QWORD *)v9 = *(_QWORD *)v10;
            if (v11)
            {
              v12 = strlen(v11) + 1;
              v13 = malloc_type_malloc(v12, 0x96AA084AuLL);
              v14 = v13;
              if (v13)
                memcpy(v13, v11, v12);
              *((_QWORD *)v9 + 1) = v14;
            }
            *((_DWORD *)v9 + 4) = *(_DWORD *)(v10 + 16);
            *((_WORD *)v9 + 10) = *(_WORD *)(v10 + 20);
            ++v7;
            v8 = a1[1];
            v6 += 24;
          }
          while (v7 < v8);
          v15 = v8 - 1;
        }
        else
        {
          v15 = -1;
        }
        *((_DWORD *)v4 + 96) = v15;
        *((_DWORD *)v4 + 97) = 15;
      }
    }
  }
  else
  {
    ERR_clear_error();
  }
}

void err_state_free(void **a1)
{
  if (a1)
  {
    free(a1[1]);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    free(a1[4]);
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    free(a1[7]);
    a1[6] = 0;
    a1[7] = 0;
    a1[8] = 0;
    free(a1[10]);
    a1[9] = 0;
    a1[10] = 0;
    a1[11] = 0;
    free(a1[13]);
    a1[12] = 0;
    a1[13] = 0;
    a1[14] = 0;
    free(a1[16]);
    a1[15] = 0;
    a1[16] = 0;
    a1[17] = 0;
    free(a1[19]);
    a1[18] = 0;
    a1[19] = 0;
    a1[20] = 0;
    free(a1[22]);
    a1[21] = 0;
    a1[22] = 0;
    a1[23] = 0;
    free(a1[25]);
    a1[24] = 0;
    a1[25] = 0;
    a1[26] = 0;
    free(a1[28]);
    a1[27] = 0;
    a1[28] = 0;
    a1[29] = 0;
    free(a1[31]);
    a1[30] = 0;
    a1[31] = 0;
    a1[32] = 0;
    free(a1[34]);
    a1[33] = 0;
    a1[34] = 0;
    a1[35] = 0;
    free(a1[37]);
    a1[36] = 0;
    a1[37] = 0;
    a1[38] = 0;
    free(a1[40]);
    a1[39] = 0;
    a1[40] = 0;
    a1[41] = 0;
    free(a1[43]);
    a1[42] = 0;
    a1[43] = 0;
    a1[44] = 0;
    free(a1[46]);
    a1[45] = 0;
    a1[46] = 0;
    a1[47] = 0;
    free(a1[49]);
    free(a1);
  }
}

uint64_t err_string_cmp(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  BOOL v3;
  _BOOL4 v4;

  v2 = *a1 >> 15;
  v3 = v2 >= *a2 >> 15;
  v4 = v2 > *a2 >> 15;
  if (v3)
    return v4;
  else
    return 0xFFFFFFFFLL;
}

void EVP_PKEY_free(EVP_PKEY *pkey)
{
  unsigned int i;
  unsigned int v3;
  char *ptr;
  void (*v5)(EVP_PKEY *);
  STACK **p_attributes;
  STACK *attributes;
  size_t p_data;

  if (pkey)
  {
    for (i = atomic_load((unsigned int *)pkey); i != -1; i = v3)
    {
      if (!i)
        abort();
      v3 = __ldaxr((unsigned int *)pkey);
      if (v3 == i)
      {
        if (!__stlxr(i - 1, (unsigned int *)pkey))
        {
          if (i == 1)
          {
            ptr = pkey->pkey.ptr;
            if (ptr)
            {
              v5 = (void (*)(EVP_PKEY *))*((_QWORD *)ptr + 20);
              if (v5)
              {
                v5(pkey);
                *(_QWORD *)&pkey->references = 0;
                pkey->save_type = 0;
              }
            }
            attributes = pkey[-1].attributes;
            p_attributes = &pkey[-1].attributes;
            p_data = (size_t)&attributes->data;
            if (attributes != (STACK *)-8)
              bzero(p_attributes, p_data);
            free(p_attributes);
          }
          return;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
}

unsigned int *EVP_parse_public_key(unsigned __int8 **a1)
{
  const char *v1;
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  _QWORD *v7;
  _BYTE *v8;
  _QWORD *v9;
  char *v10;
  _QWORD *v11;
  unsigned int (*v12)(char *, unsigned __int8 **, _BYTE **);
  unsigned int i;
  unsigned int v14;
  uint64_t v15;
  void (*v16)(unsigned int *);
  _BYTE *v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  int v23;
  unint64_t v24;

  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v24 = 0;
  v23 = 0;
  if (!cbs_get_any_asn1_element(a1, &v21, &v23, &v24, 0, 0, 0))
    goto LABEL_7;
  if (v23 != 536870928)
    goto LABEL_7;
  if (v22 < v24)
    goto LABEL_7;
  v21 += v24;
  v22 -= v24;
  v24 = 0;
  v23 = 0;
  if (!cbs_get_any_asn1_element(&v21, &v19, &v23, &v24, 0, 0, 0)
    || v23 != 536870928
    || v20 < v24
    || (v19 += v24,
        v20 -= v24,
        v24 = 0,
        v23 = 0,
        !cbs_get_any_asn1_element(&v21, &v17, &v23, &v24, 0, 0, 0))
    || v23 != 3
    || v18 < v24
    || (v17 += v24, v18 -= v24, v22))
  {
LABEL_7:
    v1 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/evp/evp_asn1.c";
    v2 = 6;
    v3 = 102;
    v4 = 106;
LABEL_8:
    ERR_put_error(v2, 0, v3, v1, v4);
    return 0;
  }
  v7 = parse_key_type(&v19);
  if (!v7)
  {
    v1 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/evp/evp_asn1.c";
    v2 = 6;
    v3 = 128;
    v4 = 111;
    goto LABEL_8;
  }
  if (!v18 || (v8 = v17, ++v17, --v18, *v8))
  {
    v1 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/evp/evp_asn1.c";
    v2 = 6;
    v3 = 102;
    v4 = 118;
    goto LABEL_8;
  }
  v9 = v7;
  v10 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v10)
  {
    v1 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v2 = 14;
    v3 = 65;
    v4 = 247;
    goto LABEL_8;
  }
  v11 = v10;
  *(_QWORD *)v10 = 24;
  *((_DWORD *)v10 + 2) = 1;
  v5 = (unsigned int *)(v10 + 8);
  *((_DWORD *)v10 + 5) = 0;
  *(_QWORD *)(v10 + 12) = 0;
  *((_QWORD *)v10 + 3) = v9;
  *((_DWORD *)v10 + 3) = *(_DWORD *)v9;
  v12 = (unsigned int (*)(char *, unsigned __int8 **, _BYTE **))v9[3];
  if (v12)
  {
    if (v12(v10 + 8, &v19, &v17))
      return v5;
  }
  else
  {
    ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_asn1.c", 131);
  }
  for (i = atomic_load(v5); i != -1; i = v14)
  {
    if (!i)
      abort();
    v14 = __ldaxr(v5);
    if (v14 == i)
    {
      if (!__stlxr(i - 1, v5))
      {
        if (i == 1)
        {
          v15 = v11[3];
          if (v15)
          {
            v16 = *(void (**)(unsigned int *))(v15 + 160);
            if (v16)
              v16(v5);
          }
          if (*v11 != -8)
            __memset_chk();
          free(v11);
        }
        return 0;
      }
    }
    else
    {
      __clrex();
    }
  }
  return 0;
}

void *parse_key_type(unsigned __int8 **a1)
{
  uint64_t v1;
  void *result;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  int v8;
  int v9;
  int v12;
  int v13;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;

  v15 = 0;
  v16 = 0;
  v18 = 0;
  v17 = 0;
  if (!cbs_get_any_asn1_element(a1, &v15, &v17, &v18, 0, 0, 0))
    return 0;
  if (v17 != 6)
    return 0;
  v1 = v16 - v18;
  if (v16 < v18)
    return 0;
  v3 = (unsigned __int16 *)(v15 + v18);
  v15 += v18;
  v16 -= v18;
  switch(v1)
  {
    case 3:
      result = &ed25519_asn1_meth;
      if (*v3 != 25899 || *((_BYTE *)v3 + 2) != 112)
      {
        result = &x25519_asn1_meth;
        v8 = *v3;
        v9 = *((unsigned __int8 *)v3 + 2);
        if (v8 != 25899 || v9 != 110)
          return 0;
      }
      break;
    case 7:
      result = &ec_asn1_meth;
      if (*(_DWORD *)v3 != -834107862 || *(_DWORD *)((char *)v3 + 3) != 16924110)
      {
        result = &dsa_asn1_meth;
        v12 = *(_DWORD *)v3;
        v13 = *(_DWORD *)((char *)v3 + 3);
        if (v12 != -834107862 || v13 != 17053902)
          return 0;
      }
      break;
    case 9:
      result = &rsa_asn1_meth;
      v4 = *(_QWORD *)v3;
      v5 = *((unsigned __int8 *)v3 + 8);
      if (v4 != 0x1010DF78648862ALL || v5 != 1)
        return 0;
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t EVP_marshal_public_key(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(void);

  v2 = *(_QWORD *)(a2 + 16);
  if (v2)
  {
    v3 = *(uint64_t (**)(void))(v2 + 32);
    if (v3)
      return v3();
  }
  ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_asn1.c", 147);
  return 0;
}

unsigned int *EVP_parse_private_key(unsigned __int8 **a1)
{
  const char *v1;
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  unsigned int (*v11)(char *, unsigned __int8 **, uint64_t *);
  unsigned int i;
  unsigned int v13;
  uint64_t v14;
  void (*v15)(unsigned int *);
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  int v23;
  unint64_t v24;

  v21 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  v24 = 0;
  v23 = 0;
  if (!cbs_get_any_asn1_element(a1, &v21, &v23, &v24, 0, 0, 0))
    goto LABEL_4;
  if (v23 != 536870928)
    goto LABEL_4;
  if (v22 < v24)
    goto LABEL_4;
  v16 = 0;
  v21 += v24;
  v22 -= v24;
  if (!CBS_get_asn1_uint64(&v21, &v16)
    || v16
    || (v24 = 0, v23 = 0, !cbs_get_any_asn1_element(&v21, &v19, &v23, &v24, 0, 0, 0))
    || v23 != 536870928
    || v20 < v24
    || (v19 += v24,
        v20 -= v24,
        v24 = 0,
        v23 = 0,
        !cbs_get_any_asn1_element(&v21, &v17, &v23, &v24, 0, 0, 0))
    || v23 != 4
    || v18 < v24)
  {
LABEL_4:
    v1 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/evp/evp_asn1.c";
    v2 = 6;
    v3 = 102;
    v4 = 163;
LABEL_5:
    ERR_put_error(v2, 0, v3, v1, v4);
    return 0;
  }
  v17 += v24;
  v18 -= v24;
  v7 = parse_key_type(&v19);
  if (!v7)
  {
    v1 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/evp/evp_asn1.c";
    v2 = 6;
    v3 = 128;
    v4 = 168;
    goto LABEL_5;
  }
  v8 = v7;
  v9 = (char *)malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v9)
  {
    v1 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v2 = 14;
    v3 = 65;
    v4 = 247;
    goto LABEL_5;
  }
  v10 = v9;
  *(_QWORD *)v9 = 24;
  *((_DWORD *)v9 + 2) = 1;
  v5 = (unsigned int *)(v9 + 8);
  *((_DWORD *)v9 + 5) = 0;
  *(_QWORD *)(v9 + 12) = 0;
  *((_QWORD *)v9 + 3) = v8;
  *((_DWORD *)v9 + 3) = *(_DWORD *)v8;
  v11 = (unsigned int (*)(char *, unsigned __int8 **, uint64_t *))v8[6];
  if (v11)
  {
    if (v11(v9 + 8, &v19, &v17))
      return v5;
  }
  else
  {
    ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_asn1.c", 183);
  }
  for (i = atomic_load(v5); i != -1; i = v13)
  {
    if (!i)
      abort();
    v13 = __ldaxr(v5);
    if (v13 == i)
    {
      if (!__stlxr(i - 1, v5))
      {
        if (i == 1)
        {
          v14 = v10[3];
          if (v14)
          {
            v15 = *(void (**)(unsigned int *))(v14 + 160);
            if (v15)
              v15(v5);
          }
          if (*v10 != -8)
            __memset_chk();
          free(v10);
        }
        return 0;
      }
    }
    else
    {
      __clrex();
    }
  }
  return 0;
}

EVP_PKEY *__cdecl d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned __int8 **pp, uint64_t length)
{
  _QWORD *v8;
  _QWORD *v9;
  unsigned int *v10;
  EC_KEY *v11;
  void *v12;
  uint64_t v13;
  void (*v14)(unsigned int *);
  void *v15;
  RSA *v16;
  uint64_t v17;
  void (*v18)(unsigned int *);
  const BIGNUM **v19;
  uint64_t v20;
  void (*v21)(unsigned int *);
  unsigned int j;
  unsigned int v23;
  uint64_t v24;
  void (*v25)(unsigned int *);
  unsigned int *v26;
  EVP_PKEY *v27;
  unsigned int k;
  unsigned int v29;
  char *ptr;
  void (*v31)(EVP_PKEY *);
  STACK **p_attributes;
  STACK *attributes;
  size_t p_data;
  unsigned int i;
  unsigned int v37;
  uint64_t v38;
  void (*v39)(unsigned int *);
  unsigned int *v40;
  uint64_t v41;
  size_t v42;
  unsigned __int8 *v43;
  uint64_t v44;

  if (length < 0)
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_asn1.c", 250);
    return 0;
  }
  v43 = (unsigned __int8 *)*pp;
  v44 = length;
  v8 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v8)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
LABEL_43:
    ERR_clear_error();
    v43 = (unsigned __int8 *)*pp;
    v44 = length;
    v26 = EVP_parse_private_key(&v43);
    v10 = v26;
    if (!v26)
      return (EVP_PKEY *)v10;
    if (v26[1] == type)
      goto LABEL_45;
    ERR_put_error(6, 0, 103, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_asn1.c", 267);
    for (i = atomic_load(v10); i != -1; i = v37)
    {
      if (!i)
        goto LABEL_78;
      v37 = __ldaxr(v10);
      if (v37 == i)
      {
        if (!__stlxr(i - 1, v10))
        {
          if (i == 1)
          {
            v38 = *((_QWORD *)v10 + 2);
            if (v38)
            {
              v39 = *(void (**)(unsigned int *))(v38 + 160);
              if (v39)
              {
                v39(v10);
                *((_QWORD *)v10 + 1) = 0;
                v10[1] = 0;
              }
            }
            v41 = *((_QWORD *)v10 - 1);
            v40 = v10 - 2;
            v42 = v41 + 8;
            if (v41 != -8)
              bzero(v40, v42);
            free(v40);
          }
          return 0;
        }
      }
      else
      {
        __clrex();
      }
    }
    return 0;
  }
  v9 = v8;
  *v8 = 24;
  *((_DWORD *)v8 + 2) = 1;
  v10 = (unsigned int *)(v8 + 1);
  *(_QWORD *)((char *)v8 + 20) = 0;
  *(_QWORD *)((char *)v8 + 12) = 0;
  *((_DWORD *)v8 + 7) = 0;
  if (type == 6)
  {
    v16 = RSA_parse_private_key(&v43);
    if (v16)
    {
      v12 = v16;
      v17 = v9[3];
      if (v17)
      {
        v18 = *(void (**)(unsigned int *))(v17 + 160);
        if (v18)
          v18(v10);
      }
      v15 = &rsa_asn1_meth;
      goto LABEL_24;
    }
    RSA_free(0);
    goto LABEL_29;
  }
  if (type == 116)
  {
    v19 = DSA_parse_private_key(&v43);
    if (v19)
    {
      v12 = v19;
      v20 = v9[3];
      if (v20)
      {
        v21 = *(void (**)(unsigned int *))(v20 + 160);
        if (v21)
          v21(v10);
      }
      v15 = &dsa_asn1_meth;
      goto LABEL_24;
    }
    DSA_free(0);
    goto LABEL_29;
  }
  if (type != 408)
  {
    ERR_put_error(6, 0, 127, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_asn1.c", 238);
    goto LABEL_29;
  }
  v11 = EC_KEY_parse_private_key(&v43, 0);
  if (!v11)
  {
    EC_KEY_free(0);
LABEL_29:
    for (j = atomic_load(v10); j != -1; j = v23)
    {
      if (!j)
LABEL_78:
        abort();
      v23 = __ldaxr(v10);
      if (v23 == j)
      {
        if (!__stlxr(j - 1, v10))
        {
          if (j == 1)
          {
            v24 = v9[3];
            if (v24)
            {
              v25 = *(void (**)(unsigned int *))(v24 + 160);
              if (v25)
                v25(v10);
            }
            if (*v9 != -8)
              __memset_chk();
            free(v9);
          }
          goto LABEL_43;
        }
      }
      else
      {
        __clrex();
      }
    }
    goto LABEL_43;
  }
  v12 = v11;
  v13 = v9[3];
  if (v13)
  {
    v14 = *(void (**)(unsigned int *))(v13 + 160);
    if (v14)
      v14(v10);
  }
  v15 = &ec_asn1_meth;
LABEL_24:
  v9[2] = v12;
  v9[3] = v15;
  *((_DWORD *)v9 + 3) = type;
LABEL_45:
  if (a)
  {
    v27 = *a;
    if (*a)
    {
      for (k = atomic_load((unsigned int *)v27); k != -1; k = v29)
      {
        if (!k)
          goto LABEL_78;
        v29 = __ldaxr((unsigned int *)v27);
        if (v29 == k)
        {
          if (!__stlxr(k - 1, (unsigned int *)v27))
          {
            if (k == 1)
            {
              ptr = v27->pkey.ptr;
              if (ptr)
              {
                v31 = (void (*)(EVP_PKEY *))*((_QWORD *)ptr + 20);
                if (v31)
                {
                  v31(v27);
                  *(_QWORD *)&v27->references = 0;
                  v27->save_type = 0;
                }
              }
              attributes = v27[-1].attributes;
              p_attributes = &v27[-1].attributes;
              p_data = (size_t)&attributes->data;
              if (attributes != (STACK *)-8)
                bzero(p_attributes, p_data);
              free(p_attributes);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    *a = (EVP_PKEY *)v10;
  }
  *pp = v43;
  return (EVP_PKEY *)v10;
}

int i2d_PUBKEY(EVP_PKEY *a, unsigned __int8 **pp)
{
  EVP_PKEY *v3;
  _QWORD *v4;
  char *ptr;
  unsigned int (*v6)(_OWORD *, EVP_PKEY *);
  const char *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  void *v12;
  _OWORD v14[3];

  if (a)
  {
    v3 = a;
    memset(v14, 0, sizeof(v14));
    v4 = malloc_type_malloc(0x88uLL, 0x30772F57uLL);
    if (v4)
    {
      *v4 = 128;
      BYTE8(v14[0]) = 0;
      *(_QWORD *)&v14[0] = 0;
      *(_QWORD *)&v14[1] = v4 + 1;
      *(_OWORD *)((char *)&v14[1] + 8) = xmmword_208F2ADF0;
      BYTE8(v14[2]) = 1;
      ptr = v3->pkey.ptr;
      if (ptr)
      {
        v6 = (unsigned int (*)(_OWORD *, EVP_PKEY *))*((_QWORD *)ptr + 4);
        if (v6)
        {
          if (v6(v14, v3))
          {
            LODWORD(a) = CBB_finish_i2d((uint64_t)v14, (void **)pp);
            return (int)a;
          }
          if (BYTE8(v14[0]))
          {
LABEL_15:
            LODWORD(a) = -1;
            return (int)a;
          }
LABEL_10:
          if ((BYTE8(v14[2]) & 1) != 0 && *(_QWORD *)&v14[1])
          {
            v12 = (void *)(*(_QWORD *)&v14[1] - 8);
            v11 = *(_QWORD *)(*(_QWORD *)&v14[1] - 8);
            if (v11 != -8)
              bzero(v12, v11 + 8);
            free(v12);
          }
          goto LABEL_15;
        }
      }
      v7 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/"
           "crypto/evp/evp_asn1.c";
      v8 = 6;
      v9 = 128;
      v10 = 147;
    }
    else
    {
      v7 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
      v8 = 14;
      v9 = 65;
      v10 = 247;
    }
    ERR_put_error(v8, 0, v9, v7, v10);
    goto LABEL_10;
  }
  return (int)a;
}

char *EVP_PKEY_CTX_new(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t *v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int (*v13)(char *);
  uint64_t v14;
  unsigned int i;
  const char *v16;
  int v17;
  int v18;
  int v19;
  unsigned int v21;
  uint64_t v22;
  void (*v23)(uint64_t);
  void *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!a1 || (v3 = *(_QWORD *)(a1 + 16)) == 0)
  {
    v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/evp/evp_ctx.c";
    v17 = 6;
    v18 = 67;
    v19 = 116;
LABEL_18:
    ERR_put_error(v17, 0, v18, v16, v19);
    return 0;
  }
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    ERR_put_error(6, 0, 128, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 122);
    ERR_add_error_dataf("algorithm %d", v27, v28, v29, v30, v31, v32, v33, **(_DWORD **)(a1 + 16));
    return 0;
  }
  v6 = (char *)malloc_type_malloc(0x38uLL, 0x30772F57uLL);
  if (!v6)
  {
    v16 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v17 = 14;
    v18 = 65;
    v19 = 247;
    goto LABEL_18;
  }
  v7 = v6;
  *(_QWORD *)v6 = 48;
  *((_QWORD *)v6 + 1) = v4;
  v8 = v6 + 8;
  *(_OWORD *)(v6 + 24) = 0u;
  v9 = (uint64_t *)(v6 + 24);
  *(_OWORD *)(v6 + 40) = 0u;
  *((_QWORD *)v6 + 2) = a2;
  v10 = atomic_load((unsigned int *)a1);
  if (v10 != -1)
  {
    while (1)
    {
      v11 = __ldaxr((unsigned int *)a1);
      if (v11 == v10)
      {
        if (!__stlxr(v10 + 1, (unsigned int *)a1))
        {
          v12 = 1;
          goto LABEL_11;
        }
      }
      else
      {
        __clrex();
      }
      v12 = 0;
LABEL_11:
      if ((v12 & 1) == 0)
      {
        v10 = v11;
        if (v11 != -1)
          continue;
      }
      break;
    }
  }
  *v9 = a1;
  v13 = *(int (**)(char *))(v4 + 8);
  if (v13 && v13(v6 + 8) <= 0)
  {
    v14 = *v9;
    if (*v9)
    {
      for (i = atomic_load((unsigned int *)v14); i != -1; i = v21)
      {
        if (!i)
          abort();
        v21 = __ldaxr((unsigned int *)v14);
        if (v21 == i)
        {
          if (!__stlxr(i - 1, (unsigned int *)v14))
          {
            if (i == 1)
            {
              v22 = *(_QWORD *)(v14 + 16);
              if (v22)
              {
                v23 = *(void (**)(uint64_t))(v22 + 160);
                if (v23)
                {
                  v23(v14);
                  *(_QWORD *)(v14 + 8) = 0;
                  *(_DWORD *)(v14 + 4) = 0;
                }
              }
              v25 = *(_QWORD *)(v14 - 8);
              v24 = (void *)(v14 - 8);
              v26 = v25 + 8;
              if (v25 != -8)
                bzero(v24, v26);
              free(v24);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    if (*v7 != -8)
      __memset_chk();
    free(v7);
    return 0;
  }
  return v8;
}

void EVP_PKEY_CTX_free(_QWORD *a1)
{
  void (*v2)(_QWORD *);
  uint64_t v3;
  unsigned int i;
  unsigned int v5;
  uint64_t v6;
  unsigned int j;
  unsigned int v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  void *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  uint64_t v17;
  size_t v18;
  char *v19;
  uint64_t v20;
  size_t v21;

  if (a1)
  {
    if (*a1)
    {
      v2 = *(void (**)(_QWORD *))(*a1 + 24);
      if (v2)
        v2(a1);
    }
    v3 = a1[2];
    if (v3)
    {
      for (i = atomic_load((unsigned int *)v3); i != -1; i = v5)
      {
        if (!i)
LABEL_39:
          abort();
        v5 = __ldaxr((unsigned int *)v3);
        if (v5 == i)
        {
          if (!__stlxr(i - 1, (unsigned int *)v3))
          {
            if (i != 1)
              break;
            v14 = *(_QWORD *)(v3 + 16);
            if (v14)
            {
              v15 = *(void (**)(uint64_t))(v14 + 160);
              if (v15)
              {
                v15(v3);
                *(_QWORD *)(v3 + 8) = 0;
                *(_DWORD *)(v3 + 4) = 0;
              }
            }
            v17 = *(_QWORD *)(v3 - 8);
            v16 = (void *)(v3 - 8);
            v18 = v17 + 8;
            if (v17 != -8)
              bzero(v16, v18);
            free(v16);
            v6 = a1[3];
            if (v6)
              goto LABEL_15;
            goto LABEL_36;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
    v6 = a1[3];
    if (v6)
    {
LABEL_15:
      for (j = atomic_load((unsigned int *)v6); j != -1; j = v8)
      {
        if (!j)
          goto LABEL_39;
        v8 = __ldaxr((unsigned int *)v6);
        if (v8 == j)
        {
          if (!__stlxr(j - 1, (unsigned int *)v6))
          {
            if (j == 1)
            {
              v9 = *(_QWORD *)(v6 + 16);
              if (v9)
              {
                v10 = *(void (**)(uint64_t))(v9 + 160);
                if (v10)
                {
                  v10(v6);
                  *(_QWORD *)(v6 + 8) = 0;
                  *(_DWORD *)(v6 + 4) = 0;
                }
              }
              v12 = *(_QWORD *)(v6 - 8);
              v11 = (void *)(v6 - 8);
              v13 = v12 + 8;
              if (v12 != -8)
                bzero(v11, v13);
              free(v11);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
LABEL_36:
    v20 = *(a1 - 1);
    v19 = (char *)(a1 - 1);
    v21 = v20 + 8;
    if (v20 != -8)
      bzero(v19, v21);
    free(v19);
  }
}

char *EVP_PKEY_CTX_dup(uint64_t a1)
{
  char *v2;
  _QWORD *v3;
  char *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  const char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int i;
  unsigned int v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  unsigned int j;
  unsigned int v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  void *v31;
  uint64_t v32;
  size_t v33;

  if (*(_QWORD *)a1 && *(_QWORD *)(*(_QWORD *)a1 + 16))
  {
    v2 = (char *)malloc_type_malloc(0x38uLL, 0x30772F57uLL);
    if (v2)
    {
      v3 = v2;
      *(_QWORD *)v2 = 48;
      *(_OWORD *)(v2 + 8) = 0u;
      v4 = v2 + 8;
      *(_OWORD *)(v2 + 24) = 0u;
      *(_OWORD *)(v2 + 40) = 0u;
      *(_OWORD *)(v2 + 8) = *(_OWORD *)a1;
      *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 32);
      v5 = *(unsigned int **)(a1 + 16);
      if (v5)
      {
        v6 = atomic_load(v5);
        if (v6 != -1)
        {
          while (1)
          {
            v7 = __ldaxr(v5);
            if (v7 == v6)
            {
              if (!__stlxr(v6 + 1, v5))
              {
                v8 = 1;
                goto LABEL_11;
              }
            }
            else
            {
              __clrex();
            }
            v8 = 0;
LABEL_11:
            if ((v8 & 1) == 0)
            {
              v6 = v7;
              if (v7 != -1)
                continue;
            }
            break;
          }
        }
        *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 16);
      }
      v9 = *(unsigned int **)(a1 + 24);
      if (v9)
      {
        v10 = atomic_load(v9);
        if (v10 != -1)
        {
          while (1)
          {
            v11 = __ldaxr(v9);
            if (v11 == v10)
            {
              if (!__stlxr(v10 + 1, v9))
              {
                v12 = 1;
                goto LABEL_21;
              }
            }
            else
            {
              __clrex();
            }
            v12 = 0;
LABEL_21:
            if ((v12 & 1) == 0)
            {
              v10 = v11;
              if (v11 != -1)
                continue;
            }
            break;
          }
        }
        *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 24);
      }
      if ((*(int (**)(char *, uint64_t))(*(_QWORD *)a1 + 16))(v2 + 8, a1) > 0)
        return v4;
      v3[1] = 0;
      v18 = v3[3];
      if (v18)
      {
        for (i = atomic_load((unsigned int *)v18); i != -1; i = v20)
        {
          if (!i)
LABEL_62:
            abort();
          v20 = __ldaxr((unsigned int *)v18);
          if (v20 == i)
          {
            if (!__stlxr(i - 1, (unsigned int *)v18))
            {
              if (i == 1)
              {
                v21 = *(_QWORD *)(v18 + 16);
                if (v21)
                {
                  v22 = *(void (**)(uint64_t))(v21 + 160);
                  if (v22)
                  {
                    v22(v18);
                    *(_QWORD *)(v18 + 8) = 0;
                    *(_DWORD *)(v18 + 4) = 0;
                  }
                }
                v24 = *(_QWORD *)(v18 - 8);
                v23 = (void *)(v18 - 8);
                v25 = v24 + 8;
                if (v24 != -8)
                  bzero(v23, v25);
                free(v23);
              }
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      v26 = v3[4];
      if (v26)
      {
        for (j = atomic_load((unsigned int *)v26); j != -1; j = v28)
        {
          if (!j)
            goto LABEL_62;
          v28 = __ldaxr((unsigned int *)v26);
          if (v28 == j)
          {
            if (!__stlxr(j - 1, (unsigned int *)v26))
            {
              if (j == 1)
              {
                v29 = *(_QWORD *)(v26 + 16);
                if (v29)
                {
                  v30 = *(void (**)(uint64_t))(v29 + 160);
                  if (v30)
                  {
                    v30(v26);
                    *(_QWORD *)(v26 + 8) = 0;
                    *(_DWORD *)(v26 + 4) = 0;
                  }
                }
                v32 = *(_QWORD *)(v26 - 8);
                v31 = (void *)(v26 - 8);
                v33 = v32 + 8;
                if (v32 != -8)
                  bzero(v31, v33);
                free(v31);
              }
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      if (*v3 != -8)
        __memset_chk();
      free(v3);
      v14 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/evp/evp_ctx.c";
      v15 = 6;
      v16 = 6;
      v17 = 180;
    }
    else
    {
      v14 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
      v15 = 14;
      v16 = 65;
      v17 = 247;
    }
    ERR_put_error(v15, 0, v16, v14, v17);
  }
  return 0;
}

uint64_t EVP_PKEY_CTX_ctrl(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  int v5;

  if (a1 && (v3 = *a1) != 0 && (v4 = *(uint64_t (**)(void))(v3 + 112)) != 0)
  {
    if (a2 == -1 || *(_DWORD *)v3 == a2)
    {
      v5 = *((_DWORD *)a1 + 8);
      if (v5)
      {
        if (a3 == -1 || (v5 & a3) != 0)
        {
          return v4();
        }
        else
        {
          ERR_put_error(6, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 206);
          return 0;
        }
      }
      else
      {
        ERR_put_error(6, 0, 123, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 201);
        return 0;
      }
    }
    else
    {
      ERR_put_error(6, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 196);
      return 0;
    }
  }
  else
  {
    ERR_put_error(6, 0, 101, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/evp_ctx.c", 192);
    return 0;
  }
}

void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
{
  uint64_t v4;
  unsigned int v5;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(void *, char *, CRYPTO_EX_DATA *);
  unint64_t v12;
  STACK *sk;
  STACK *v14;
  char **data;
  char **v16;
  uint64_t v17;
  size_t v18;
  int (__cdecl **p_comp)(const char *const *, const char *const *);
  int (__cdecl *comp)(const char *const *, const char *const *);
  size_t v21;

  if (ad->sk)
  {
    v4 = *(_QWORD *)&class_index;
    v5 = atomic_load((unsigned int *)(*(_QWORD *)&class_index + 216));
    if (v5)
    {
      v7 = 0;
      v8 = *(_QWORD *)&class_index + 200;
      do
      {
        v10 = *(_QWORD *)v8;
        v11 = *(void (**)(void *, char *, CRYPTO_EX_DATA *))(*(_QWORD *)v8 + 16);
        if (v11)
        {
          v9 = 0;
          v12 = v7 + *(unsigned __int8 *)(v4 + 220);
          sk = ad->sk;
          if (ad->sk && (v12 & 0x80000000) == 0)
          {
            if (*(_QWORD *)&sk->num > v12)
              v9 = sk->data[v12];
            else
              v9 = 0;
          }
          v11(obj, v9, ad);
          v10 = *(_QWORD *)v8;
        }
        v8 = v10 + 24;
        ++v7;
      }
      while (v5 != v7);
    }
    v14 = ad->sk;
    if (ad->sk)
    {
      data = v14->data;
      if (data)
      {
        v17 = (uint64_t)*(data - 1);
        v16 = data - 1;
        v18 = v17 + 8;
        if (v17 != -8)
          bzero(v16, v18);
        free(v16);
      }
      comp = v14[-1].comp;
      p_comp = &v14[-1].comp;
      v21 = (size_t)comp + 8;
      if (comp != (int (__cdecl *)(const char *const *, const char *const *))-8)
        bzero(p_comp, v21);
      free(p_comp);
    }
    ad->sk = 0;
  }
}

int BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)
{
  uint64_t top;
  unint64_t *d;
  unint64_t v9;
  int v10;
  int v11;
  _BOOL4 v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  _BOOL4 v28;
  _BOOL4 v29;
  _BOOL4 v30;
  _BOOL4 v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int8x16_t v42;
  unsigned __int128 v43;
  int8x16_t *v44;
  unint64_t v45;
  int8x16_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  BIGNUM *v50;
  BIGNUM *v51;
  BN_MONT_CTX *v52;
  BIGNUM *v53;
  unsigned int v54;
  int v55;
  BIGNUM *v56;
  const BIGNUM *v57;
  uint64_t v58;
  BIGNUM *v59;
  char v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  BIGNUM *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x24BDAC8D0];
  top = m->top;
  if ((int)top < 1 || (d = m->d, v9 = *m->d, (v9 & 1) == 0))
  {
    v10 = 104;
    v11 = 590;
LABEL_9:
    ERR_put_error(3, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/exponentiation.c", v11);
    return 0;
  }
  if (m->neg)
  {
    v10 = 109;
    v11 = 594;
    goto LABEL_9;
  }
  if (a->neg
    || (bn_cmp_words_consttime((uint64_t *)a->d, a->top, (uint64_t *)m->d, m->top) & 0x80000000) == 0)
  {
    v10 = 107;
    v11 = 599;
    goto LABEL_9;
  }
  v19 = p->top;
  v20 = v19 & ((int)v19 >> 31);
  v21 = 8 * v19 - 8;
  v22 = p->top;
  while (1)
  {
    v23 = __OFSUB__(v22--, 1);
    if (v22 < 0 != v23)
      break;
    v24 = p->d;
    v25 = *(unint64_t *)((char *)p->d + v21);
    v21 -= 8;
    if (v25)
    {
      v20 = v22 + 1;
      goto LABEL_17;
    }
  }
  if ((v19 & 0x80000000) != 0)
  {
    v24 = p->d;
LABEL_17:
    v26 = v20 - 1;
    v27 = v24[v26];
    v28 = v27 != 0;
    v29 = HIDWORD(v27) != 0;
    if (HIDWORD(v27))
      v27 >>= 32;
    v30 = v27 >> 16 != 0;
    if (v27 >> 16)
      v27 >>= 16;
    v31 = v27 > 0xFF;
    if (v27 > 0xFF)
      v27 >>= 8;
    v32 = v27 > 0xF;
    if (v27 > 0xF)
      v27 >>= 4;
    v33 = v27 > 3;
    if (v27 > 3)
      v27 >>= 2;
    v34 = v28 | (v26 << 6) | (32 * v29) | (16 * v30) | (8 * v31) | (4 * v32) | (2 * v33);
    if (v27 > 1)
      ++v34;
    if (v34)
    {
      v77 = v34;
      v94 = 0;
      v93 = 0u;
      v92 = 0u;
      v91 = 0u;
      v90 = 0u;
      v89 = 0u;
      v88 = 0u;
      v87 = 0u;
      v86 = 0u;
      v85 = 0u;
      v84 = 0u;
      v83 = 0u;
      v82 = 0u;
      v81 = 0u;
      v80 = 0u;
      v79 = 0u;
      if (!*((_BYTE *)ctx + 40))
      {
        v35 = *((_QWORD *)ctx + 4);
        v36 = *((_QWORD *)ctx + 2);
        if (v36 == *((_QWORD *)ctx + 3))
        {
          if (v36)
            v37 = (3 * v36) >> 1;
          else
            v37 = 32;
          if (v37 <= v36 || v37 >> 61 || (v38 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v37)) == 0)
          {
            *((_WORD *)ctx + 20) = 257;
            goto LABEL_53;
          }
          *((_QWORD *)ctx + 1) = v38;
          *((_QWORD *)ctx + 3) = v37;
          v36 = *((_QWORD *)ctx + 2);
        }
        else
        {
          v38 = (_QWORD *)*((_QWORD *)ctx + 1);
        }
        v38[v36] = v35;
        ++*((_QWORD *)ctx + 2);
      }
LABEL_53:
      v50 = BN_CTX_get(ctx);
      v51 = BN_CTX_get(ctx);
      v52 = 0;
      v17 = 0;
      v78 = v51;
      if (!v50)
        goto LABEL_147;
      v53 = v51;
      if (!v51)
        goto LABEL_147;
      if (m_ctx)
      {
        v52 = 0;
      }
      else
      {
        m_ctx = (BN_MONT_CTX *)BN_MONT_CTX_new_consttime((uint64_t)m, ctx);
        v52 = m_ctx;
        if (!m_ctx)
          goto LABEL_146;
      }
      if (v77 <= 0x29F)
      {
        if (v77 <= 0xEF)
        {
          if (v77 <= 0x17)
            v55 = 1;
          else
            v55 = 3;
          if (v77 <= 0x4F)
            v54 = v55;
          else
            v54 = 4;
        }
        else
        {
          v54 = 5;
        }
      }
      else
      {
        v54 = 6;
      }
      if (BN_mod_mul_montgomery(v53, a, (const BIGNUM *)m_ctx, m_ctx, ctx))
      {
        if (v54 >= 2)
        {
          v56 = BN_CTX_get(ctx);
          if (v56)
          {
            v57 = v56;
            if (BN_mod_mul_montgomery(v56, v53, v53, m_ctx, ctx))
            {
              v58 = 0;
              while (1)
              {
                v59 = BN_CTX_get(ctx);
                *(&v78 + v58 + 1) = v59;
                if (!v59 || !BN_mod_mul_montgomery(v59, *(&v78 + v58), v57, m_ctx, ctx))
                  break;
                if ((v58++ + 2) >> (v54 - 1))
                  goto LABEL_76;
              }
            }
          }
          goto LABEL_146;
        }
LABEL_76:
        v61 = 0;
        for (LODWORD(v62) = v77 - 1; ; LODWORD(v62) = v62 - 1)
        {
          if ((v62 & 0x80000000) == 0)
          {
            v63 = p->top;
            v65 = (unint64_t)v62 >> 6;
            if (v65 < v63)
            {
              v64 = p->d;
              if (((p->d[v65] >> v62) & 1) != 0)
              {
                while (1)
                {
                  if (v54 >= 2 && (_DWORD)v62)
                  {
                    v66 = v62 - 1;
                    if ((int)v62 - 1 >= v54 - 2)
                      v66 = v54 - 2;
                    if ((int)v62 < 1 || (unint64_t)(v62 - 1) >> 6 >= (int)v63)
                      LODWORD(v67) = 0;
                    else
                      v67 = (v64[(unint64_t)(v62 - 1) >> 6] >> (v62 - 1)) & 1;
                    if ((_DWORD)v67)
                      v68 = 3;
                    else
                      v68 = 1;
                    if (v66)
                    {
                      if ((int)v62 < 2 || (unint64_t)(v62 - 2) >> 6 >= (int)v63)
                        LODWORD(v70) = 0;
                      else
                        v70 = (v64[(unint64_t)(v62 - 2) >> 6] >> (v62 - 2)) & 1;
                      v71 = v66 + 1;
                      if ((_DWORD)v70)
                      {
                        v68 = (v68 << (2 - v67)) | 1;
                        LODWORD(v67) = 2;
                      }
                      if (v71 != 2)
                      {
                        if ((int)v62 < 3 || (unint64_t)(v62 - 3) >> 6 >= (int)v63)
                          LODWORD(v72) = 0;
                        else
                          v72 = (v64[(unint64_t)(v62 - 3) >> 6] >> (v62 - 3)) & 1;
                        if ((_DWORD)v72)
                        {
                          v68 = (v68 << (v67 ^ 3)) | 1;
                          LODWORD(v67) = 3;
                        }
                        if (v71 != 3)
                        {
                          if ((int)v62 < 4 || (unint64_t)(v62 - 4) >> 6 >= (int)v63)
                            LODWORD(v73) = 0;
                          else
                            v73 = (v64[(unint64_t)(v62 - 4) >> 6] >> (v62 - 4)) & 1;
                          if ((_DWORD)v73)
                          {
                            v68 = (v68 << (4 - v67)) | 1;
                            LODWORD(v67) = 4;
                          }
                          if (v71 != 4)
                          {
                            if ((int)v62 < 5 || (unint64_t)(v62 - 5) >> 6 >= (int)v63)
                              LODWORD(v74) = 0;
                            else
                              v74 = (v64[(unint64_t)(v62 - 5) >> 6] >> (v62 - 5)) & 1;
                            if ((_DWORD)v74)
                            {
                              v68 = (v68 << (5 - v67)) | 1;
                              LODWORD(v67) = 5;
                            }
                          }
                        }
                      }
                    }
                    if ((v61 & 1) == 0)
                    {
LABEL_143:
                      if (!BN_copy(v50, *(&v78 + (v68 >> 1))))
                        goto LABEL_146;
                      goto LABEL_144;
                    }
                  }
                  else
                  {
                    LODWORD(v67) = 0;
                    v68 = 1;
                    if ((v61 & 1) == 0)
                      goto LABEL_143;
                  }
                  v69 = v68;
                  if (!BN_mod_mul_montgomery(v50, v50, v50, m_ctx, ctx)
                    || (_DWORD)v67
                    && (!BN_mod_mul_montgomery(v50, v50, v50, m_ctx, ctx)
                     || (_DWORD)v67 != 1
                     && (!BN_mod_mul_montgomery(v50, v50, v50, m_ctx, ctx)
                      || (_DWORD)v67 != 2
                      && (!BN_mod_mul_montgomery(v50, v50, v50, m_ctx, ctx)
                       || (_DWORD)v67 != 3
                       && (!BN_mod_mul_montgomery(v50, v50, v50, m_ctx, ctx)
                        || (_DWORD)v67 != 4 && !BN_mod_mul_montgomery(v50, v50, v50, m_ctx, ctx)))))
                    || !BN_mod_mul_montgomery(v50, v50, *(&v78 + (v69 >> 1)), m_ctx, ctx))
                  {
                    goto LABEL_146;
                  }
LABEL_144:
                  if ((_DWORD)v62 == (_DWORD)v67)
                    goto LABEL_145;
                  v61 = 1;
                  v62 = (v62 + ~(_DWORD)v67);
                  while (1)
                  {
                    if ((v62 & 0x80000000) == 0)
                    {
                      v63 = p->top;
                      if (v62 >> 6 < v63)
                      {
                        v64 = p->d;
                        if (((p->d[v62 >> 6] >> v62) & 1) != 0)
                          break;
                      }
                    }
                    if (!BN_mod_mul_montgomery(v50, v50, v50, m_ctx, ctx))
                      goto LABEL_146;
                    if (--v62 == -1)
                      goto LABEL_145;
                  }
                }
              }
            }
            if (!(_DWORD)v62)
            {
LABEL_145:
              v17 = BN_from_montgomery(r, v50, m_ctx, ctx) != 0;
              goto LABEL_147;
            }
          }
        }
      }
LABEL_146:
      v17 = 0;
LABEL_147:
      BN_MONT_CTX_free(v52);
      if (!*((_BYTE *)ctx + 40))
      {
        v75 = *((_QWORD *)ctx + 1);
        v76 = *((_QWORD *)ctx + 2) - 1;
        *((_QWORD *)ctx + 2) = v76;
        *((_QWORD *)ctx + 4) = *(_QWORD *)(v75 + 8 * v76);
      }
      return v17;
    }
  }
  v39 = v9 ^ 1;
  if ((int)top >= 2)
  {
    if (top < 5)
    {
      v40 = 1;
LABEL_45:
      v47 = top - v40;
      v48 = &d[v40];
      do
      {
        v49 = *v48++;
        v39 |= v49;
        --v47;
      }
      while (v47);
      goto LABEL_47;
    }
    v41 = (top - 1) & 0xFFFFFFFFFFFFFFFCLL;
    v40 = v41 | 1;
    v42 = 0uLL;
    v43 = v9 ^ (unsigned __int128)1uLL;
    v44 = (int8x16_t *)(d + 3);
    v45 = v41;
    do
    {
      v43 = (unsigned __int128)vorrq_s8(v44[-1], (int8x16_t)v43);
      v42 = vorrq_s8(*v44, v42);
      v44 += 2;
      v45 -= 4;
    }
    while (v45);
    v46 = vorrq_s8(v42, (int8x16_t)v43);
    v39 = (uint64_t)vorr_s8(*(int8x8_t *)v46.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
    if (top - 1 != v41)
      goto LABEL_45;
  }
LABEL_47:
  if (!v39)
  {
    r->neg = 0;
    r->top = 0;
    return 1;
  }
  return BN_one((uint64_t)r);
}

unint64_t *bn_mod_exp_mont_small(unint64_t *result, int a2, unint64_t num, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  BOOL v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  char v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  size_t __n;
  _BOOL8 v56;
  uint64_t v57;
  unsigned int v58;
  unint64_t v59[9];
  unint64_t v60[146];

  v60[144] = *MEMORY[0x24BDAC8D0];
  if (a5 >> 58 || num > 9 || *(_DWORD *)(a6 + 32) != num)
    abort();
  v8 = a4;
  v9 = result;
  v10 = -64 * a5;
  do
  {
    if (!a5)
      return (unint64_t *)bn_from_montgomery_small(result, num, *(_QWORD *)a6, num, a6);
    v11 = a5 - 1;
    v12 = *(_QWORD *)(a4 - 8 + 8 * a5);
    v10 += 64;
    --a5;
  }
  while (!v12);
  v13 = HIDWORD(v12);
  v14 = 33;
  if (!HIDWORD(v12))
  {
    v14 = 1;
    v13 = v12;
  }
  v15 = v13 >> 16 != 0;
  if (v13 >> 16)
    v13 >>= 16;
  v16 = v13 > 0xFF;
  if (v13 > 0xFF)
    v13 >>= 8;
  v17 = v13 > 0xF;
  if (v13 > 0xF)
    v13 >>= 4;
  v18 = v13 > 3;
  if (v13 > 3)
    v13 >>= 2;
  v19 = v13 > 1;
  v20 = v13 > 1;
  v21 = v14 & 0xFFFFFFFFFFFFFFE1 | (16 * v15) | (8 * v16) | (4 * v17) | (2 * v18);
  if (v19)
    ++v21;
  v22 = v21 - v10;
  v56 = v20;
  v57 = v14;
  if (v22 <= 0x29F)
  {
    if (v22 <= 0xEF)
    {
      if (v22 <= 0x17)
        v24 = 1;
      else
        v24 = 3;
      if (v22 <= 0x4F)
        v25 = v24;
      else
        v25 = 4;
      v58 = v25;
      v23 = 8 * num;
      if (!(8 * num))
        goto LABEL_34;
    }
    else
    {
      v58 = 5;
      v23 = 8 * num;
      if (!(8 * num))
        goto LABEL_34;
    }
  }
  else
  {
    v58 = 5;
    v23 = 8 * num;
    if (!(8 * num))
      goto LABEL_34;
  }
  v26 = v18;
  result = (unint64_t *)__memcpy_chk();
  v18 = v26;
  v8 = a4;
LABEL_34:
  __n = v23;
  v27 = 16 * v15;
  v28 = 8 * v16;
  v29 = 4 * v17;
  v30 = 2 * v18;
  v31 = v58 - 2;
  if (v58 >= 2)
  {
    v52 = 4 * v17;
    v53 = 2 * v18;
    bn_mod_mul_montgomery_small(v59, v60, v60, num, a6);
    v32 = 2;
    do
      result = (unint64_t *)bn_mod_mul_montgomery_small(&v60[9 * v32 - 9], &v60[9 * v32 - 18], v59, num, a6);
    while (!(v32++ >> (v58 - 1)));
    v27 = 16 * v15;
    v31 = v58 - 2;
    v30 = v53;
    v28 = 8 * v16;
    v29 = v52;
  }
  v34 = 0;
  v35 = v11 + 1;
  v36 = ~v10 + v30 + v56 + v57 + v27 + v28 + v29;
  while ((v34 & 1) == 0)
  {
    while (v36 >> 6 >= v35 || ((*(_QWORD *)(v8 + 8 * (v36 >> 6)) >> v36) & 1) == 0)
    {
      if (!v36)
        return result;
      --v36;
    }
LABEL_49:
    if (v58 < 2 || !v36)
    {
      v43 = v34;
      LODWORD(v41) = 0;
      v42 = 1;
      if ((v43 & 1) != 0)
        goto LABEL_61;
      goto LABEL_86;
    }
    v38 = v34;
    v39 = v36 - 1;
    if (v36 - 1 >= v31)
      v40 = v31;
    else
      v40 = v36 - 1;
    if (v39 >> 6 >= v35)
    {
      LODWORD(v41) = 0;
      v42 = 1;
      if (!v40)
        goto LABEL_85;
    }
    else
    {
      v41 = (*(_QWORD *)(v8 + 8 * (v39 >> 6)) >> v39) & 1;
      if ((_DWORD)v41)
        v42 = 3;
      else
        v42 = 1;
      if (!v40)
        goto LABEL_85;
    }
    v44 = (v36 - 2) >> 6;
    if (v44 >= v35)
      LODWORD(v45) = 0;
    else
      v45 = (*(_QWORD *)(v8 + 8 * v44) >> (v36 - 2)) & 1;
    v46 = v40 + 1;
    if ((_DWORD)v45)
    {
      v42 = (v42 << (2 - v41)) | 1;
      LODWORD(v41) = 2;
    }
    if (v46 != 2)
    {
      v47 = (v36 - 3) >> 6;
      if (v47 >= v35)
        LODWORD(v48) = 0;
      else
        v48 = (*(_QWORD *)(v8 + 8 * v47) >> (v36 - 3)) & 1;
      if ((_DWORD)v48)
      {
        v42 = (v42 << (v41 ^ 3)) | 1;
        LODWORD(v41) = 3;
      }
      if (v46 != 3)
      {
        v49 = (v36 - 4) >> 6;
        if (v49 >= v35)
          LODWORD(v50) = 0;
        else
          v50 = (*(_QWORD *)(v8 + 8 * v49) >> (v36 - 4)) & 1;
        if ((_DWORD)v50)
        {
          v42 = (v42 << (4 - v41)) | 1;
          LODWORD(v41) = 4;
        }
      }
    }
LABEL_85:
    if ((v38 & 1) != 0)
    {
LABEL_61:
      bn_mod_mul_montgomery_small(v9, v9, v9, num, a6);
      if ((_DWORD)v41)
      {
        bn_mod_mul_montgomery_small(v9, v9, v9, num, a6);
        if ((_DWORD)v41 != 1)
        {
          bn_mod_mul_montgomery_small(v9, v9, v9, num, a6);
          if ((_DWORD)v41 != 2)
          {
            bn_mod_mul_montgomery_small(v9, v9, v9, num, a6);
            if ((_DWORD)v41 != 3)
              bn_mod_mul_montgomery_small(v9, v9, v9, num, a6);
          }
        }
      }
      result = (unint64_t *)bn_mod_mul_montgomery_small(v9, v9, &v60[9 * (v42 >> 1)], num, a6);
      goto LABEL_88;
    }
LABEL_86:
    if (__n)
      result = (unint64_t *)memcpy(v9, &v60[9 * (v42 >> 1)], __n);
LABEL_88:
    v51 = v36 == v41;
    v36 -= (v41 + 1);
    v34 = 1;
    if (v51)
      return result;
  }
  v37 = v36 >> 6;
  if (v36 >> 6 >= v35)
    goto LABEL_42;
LABEL_41:
  if (((*(_QWORD *)(v8 + 8 * v37) >> v36) & 1) != 0)
    goto LABEL_49;
LABEL_42:
  while (1)
  {
    result = (unint64_t *)bn_mod_mul_montgomery_small(v9, v9, v9, num, a6);
    if (!v36)
      return result;
    v37 = --v36 >> 6;
    if (v36 >> 6 < v35)
      goto LABEL_41;
  }
}

int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)
{
  uint64_t top;
  unint64_t *d;
  unint64_t v9;
  int v10;
  int v11;
  _BOOL4 v17;
  int v19;
  BN_MONT_CTX *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  signed int v39;
  int v40;
  int v41;
  int v42;
  BN_MONT_CTX *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int8x16_t v47;
  unsigned __int128 v48;
  int8x16_t *v49;
  unint64_t v50;
  int8x16_t v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  size_t v68;
  uint64_t v69;
  _BOOL4 v70;
  int v71;
  int v72;
  int v73;
  BN_MONT_CTX *v74;
  void *__dst;
  _QWORD *v76;
  signed int v77;
  uint64_t v78;
  BIGNUM r;
  BIGNUM b;

  top = m->top;
  if ((int)top < 1 || (d = m->d, v9 = *m->d, (v9 & 1) == 0))
  {
    v10 = 104;
    v11 = 894;
LABEL_9:
    ERR_put_error(3, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/exponentiation.c", v11);
    return 0;
  }
  if (m->neg)
  {
    v10 = 109;
    v11 = 898;
    goto LABEL_9;
  }
  if (a->neg || (int)bn_cmp_words_consttime((uint64_t *)a->d, a->top, (uint64_t *)m->d, m->top) >= 0)
  {
    v10 = 107;
    v11 = 904;
    goto LABEL_9;
  }
  v19 = p->top;
  if (v19)
  {
    if (in_mont)
    {
      v20 = 0;
    }
    else
    {
      in_mont = (BN_MONT_CTX *)BN_MONT_CTX_new_consttime((uint64_t)m, ctx);
      v20 = in_mont;
      if (!in_mont)
      {
        v17 = 0;
        v33 = 0;
        BN_MONT_CTX_free(0);
        goto LABEL_109;
      }
    }
    v23 = (int)in_mont->N.d;
    v24 = v23;
    if (v19 == 1)
      v25 = 3;
    else
      v25 = 1;
    if (v19 <= 1)
      v26 = v25;
    else
      v26 = 4;
    if (v19 <= 4)
      v27 = v26;
    else
      v27 = 5;
    if (v19 > 14)
      v27 = 6;
    v77 = v27;
    v28 = 1 << v27;
    v78 = 8 * v23 * (uint64_t)((1 << v27) + 2);
    v29 = OPENSSL_malloc(v78 + 64);
    if (!v29)
    {
      v17 = 0;
      v33 = 0;
      BN_MONT_CTX_free(v20);
      goto LABEL_109;
    }
    v74 = v20;
    v30 = -(int)v29 & 0x3FLL;
    v76 = v29;
    v69 = v30;
    v31 = (char *)v29 + v30;
    if (v23)
      bzero((char *)v29 + v30, v78);
    __dst = v31;
    b.d = (unint64_t *)&v31[8 * (v23 << v77)];
    r.d = &b.d[v23];
    r.top = 0;
    r.dmax = v23;
    b.top = 0;
    b.dmax = v23;
    v73 = v23;
    *(_QWORD *)&r.neg = 0x200000000;
    *(_QWORD *)&b.neg = 0x200000000;
    if (bn_one_to_montgomery((uint64_t)&b, (uint64_t)in_mont, ctx))
    {
      v32 = bn_resize_words((uint64_t)&b, v23);
      v33 = v76;
      if (!v32
        || !BN_mod_mul_montgomery(&r, a, (const BIGNUM *)in_mont, in_mont, ctx)
        || !bn_resize_words((uint64_t)&r, v24))
      {
        v17 = 0;
        BN_MONT_CTX_free(v74);
        goto LABEL_109;
      }
      bn_copy_words(v31, v24, (char **)&b);
      bn_copy_words(&v31[8 * v24], v24, (char **)&r);
      if (v77 < 2)
      {
LABEL_44:
        v37 = v19 << 6;
        v38 = (v19 << 6) - 1;
        v39 = v77;
        v40 = 0;
        v41 = v38 % v77;
        if (v38 % v77 < 0)
        {
          v43 = v74;
          v44 = (unint64_t)__dst;
          v33 = v76;
        }
        else
        {
          v42 = v41 + 1;
          v43 = v74;
          v44 = (unint64_t)__dst;
          v33 = v76;
          do
          {
            while (1)
            {
              if ((v38 & 0x80000000) == 0)
              {
                v45 = (unint64_t)v38 >> 6;
                if (v45 < p->top)
                  break;
              }
              v40 *= 2;
              --v38;
              if (!--v42)
                goto LABEL_63;
            }
            v40 = (p->d[v45] >> v38--) & 1 | (2 * v40);
            --v42;
          }
          while (v42);
        }
LABEL_63:
        if (copy_from_prebuf((uint64_t)&b, v73, v44, v40, v77))
        {
          if (v41 >= -1)
            v55 = -1;
          else
            v55 = v41;
          v56 = v55 + v37 - v41 - 6;
          while (1)
          {
            v57 = v56 + 5;
            if ((int)(v56 + 5) < 0)
              break;
            if (!BN_mod_mul_montgomery(&b, &b, &b, in_mont, ctx))
              goto LABEL_106;
            if ((v57 & 0x80000000) != 0 || v57 >> 6 >= p->top)
              LODWORD(v58) = 0;
            else
              v58 = (p->d[(unint64_t)(v56 + 5) >> 6] >> (v56 + 5)) & 1;
            if (v39 != 1)
            {
              v59 = v58;
              if (!BN_mod_mul_montgomery(&b, &b, &b, in_mont, ctx))
                goto LABEL_106;
              v70 = (int)v57 >= 1
                 && (unint64_t)(v56 + 4) >> 6 < p->top
                 && (p->d[(unint64_t)(v56 + 4) >> 6] >> (v56 + 4)) & 1;
              if (!BN_mod_mul_montgomery(&b, &b, &b, in_mont, ctx))
                goto LABEL_106;
              if ((int)v57 < 2 || (unint64_t)(v56 + 3) >> 6 >= p->top)
                LODWORD(v60) = 0;
              else
                v60 = (p->d[(unint64_t)(v56 + 3) >> 6] >> (v56 + 3)) & 1;
              LODWORD(v58) = v60 | (2 * (v70 | (2 * v59)));
              v39 = v77;
              if (v77 != 3)
              {
                v71 = v58;
                if (!BN_mod_mul_montgomery(&b, &b, &b, in_mont, ctx))
                  goto LABEL_106;
                if ((int)v57 < 3 || (unint64_t)(v56 + 2) >> 6 >= p->top)
                  LODWORD(v61) = 0;
                else
                  v61 = (p->d[(unint64_t)(v56 + 2) >> 6] >> (v56 + 2)) & 1;
                LODWORD(v58) = v61 | (2 * v71);
                if (v77 != 4)
                {
                  v72 = v61 | (2 * v71);
                  if (!BN_mod_mul_montgomery(&b, &b, &b, in_mont, ctx))
                    goto LABEL_106;
                  if ((int)v57 < 4 || (unint64_t)(v56 + 1) >> 6 >= p->top)
                    LODWORD(v62) = 0;
                  else
                    v62 = (p->d[(unint64_t)(v56 + 1) >> 6] >> (v56 + 1)) & 1;
                  LODWORD(v58) = v62 | (2 * v72);
                  if (v77 != 5)
                  {
                    v63 = v62 | (2 * v72);
                    if (!BN_mod_mul_montgomery(&b, &b, &b, in_mont, ctx))
                      goto LABEL_107;
                    if ((int)v57 < 5 || (v64 = (unint64_t)v56 >> 6, v64 >= p->top))
                      LODWORD(v65) = 0;
                    else
                      v65 = (p->d[v64] >> v56) & 1;
                    LODWORD(v58) = v65 | (2 * v63);
                    v43 = v74;
                    v44 = (unint64_t)__dst;
                    v33 = v76;
                    v39 = v77;
                  }
                }
              }
            }
            if (copy_from_prebuf((uint64_t)&r, v73, v44, v58, v39))
            {
              v56 -= v39;
              if (BN_mod_mul_montgomery(&b, &b, &r, in_mont, ctx))
                continue;
            }
            goto LABEL_106;
          }
          v17 = BN_from_montgomery(rr, &b, in_mont, ctx) != 0;
          BN_MONT_CTX_free(v43);
        }
        else
        {
LABEL_106:
          v17 = 0;
          BN_MONT_CTX_free(v43);
        }
        goto LABEL_109;
      }
      if (BN_mod_mul_montgomery(&b, &r, &r, in_mont, ctx))
      {
        bn_copy_words(&v31[16 * v24], v24, (char **)&b);
        if (v28 <= 4)
          v34 = 4;
        else
          v34 = v28;
        v35 = v34 - 3;
        v36 = (char *)&v76[3 * (int)v24] + v69;
        while (BN_mod_mul_montgomery(&b, &r, &b, in_mont, ctx))
        {
          bn_copy_words(v36, v24, (char **)&b);
          v36 += 8 * v24;
          if (!--v35)
            goto LABEL_44;
        }
      }
    }
LABEL_107:
    v17 = 0;
    v33 = v76;
    BN_MONT_CTX_free(v74);
LABEL_109:
    if (v33)
    {
      v67 = *(v33 - 1);
      v66 = v33 - 1;
      v68 = v67 + 8;
      if (v67 != -8)
        bzero(v66, v68);
      free(v66);
    }
    return v17;
  }
  v21 = v9 ^ 1;
  if (top >= 2)
  {
    if (top < 5)
    {
      v22 = 1;
LABEL_56:
      v52 = top - v22;
      v53 = &d[v22];
      do
      {
        v54 = *v53++;
        v21 |= v54;
        --v52;
      }
      while (v52);
      goto LABEL_58;
    }
    v46 = (top - 1) & 0xFFFFFFFFFFFFFFFCLL;
    v22 = v46 | 1;
    v47 = 0uLL;
    v48 = v9 ^ (unsigned __int128)1uLL;
    v49 = (int8x16_t *)(d + 3);
    v50 = v46;
    do
    {
      v48 = (unsigned __int128)vorrq_s8(v49[-1], (int8x16_t)v48);
      v47 = vorrq_s8(*v49, v47);
      v49 += 2;
      v50 -= 4;
    }
    while (v50);
    v51 = vorrq_s8(v47, (int8x16_t)v48);
    v21 = (uint64_t)vorr_s8(*(int8x8_t *)v51.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL));
    if (top - 1 != v46)
      goto LABEL_56;
  }
LABEL_58:
  if (!v21)
  {
    rr->neg = 0;
    rr->top = 0;
    return 1;
  }
  return BN_one((uint64_t)rr);
}

uint64_t copy_from_prebuf(uint64_t a1, int a2, unint64_t a3, int a4, char a5)
{
  uint64_t v10;
  uint64_t result;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int8x16_t v20;
  int8x16_t *v21;
  int8x16_t v22;
  unsigned int v23;

  v10 = a2;
  result = bn_wexpand(a1, a2);
  if ((_DWORD)result)
  {
    if (a2)
    {
      v12 = 8 * v10;
      bzero(*(void **)a1, v12);
      if (a2 >= 1)
      {
        v13 = 0;
        v14 = 8 * a2;
        v15 = a3;
        while (1)
        {
          v16 = (((int)(v13 ^ a4) - 1) & ~(uint64_t)(int)(v13 ^ a4)) >> 63;
          v17 = *(_QWORD **)a1;
          if (a2 >= 4)
          {
            v18 = 0;
            if ((unint64_t)v17 >= a3 + v14 + v12 * v13
              || v15 >= (unint64_t)&v17[(unint64_t)v14 / 8])
            {
              v20 = (int8x16_t)vdupq_n_s64(v16);
              do
              {
                v21 = (int8x16_t *)((char *)v17 + v18);
                v22 = vorrq_s8(*(int8x16_t *)((char *)v17 + v18 + 16), vandq_s8(*(int8x16_t *)(v15 + v18 + 16), v20));
                *v21 = vorrq_s8(*(int8x16_t *)((char *)v17 + v18), vandq_s8(*(int8x16_t *)(v15 + v18), v20));
                v21[1] = v22;
                v18 += 32;
              }
              while ((v14 & 0x7FFFFFFE0) != v18);
              v18 = a2 & 0xFFFFFFFC;
              if (v18 == a2)
                goto LABEL_5;
            }
          }
          else
          {
            v18 = 0;
          }
          do
          {
            v17[v18] |= *(_QWORD *)(v15 + 8 * v18) & v16;
            ++v18;
          }
          while (a2 != v18);
LABEL_5:
          ++v13;
          v15 += v12;
          if (v13 >> a5)
            goto LABEL_20;
        }
      }
    }
    v23 = 1;
    while (!(v23++ >> a5))
      ;
LABEL_20:
    *(_DWORD *)(a1 + 8) = a2;
    return 1;
  }
  return result;
}

uint64_t bssl::ssl_parse_client_hello_with_trailing_data(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t result;
  unsigned __int16 *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned __int16 *v36;
  unint64_t v37;
  unsigned __int16 *v39[2];

  *(_QWORD *)(a3 + 104) = 0;
  *(_OWORD *)(a3 + 88) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_QWORD *)a3 = a1;
  v3 = a2[1];
  v4 = v3 - 2;
  if (v3 < 2)
    return 0;
  v6 = (unsigned __int16 *)*a2;
  v7 = *a2 + 2;
  *a2 = v7;
  a2[1] = v4;
  *(_WORD *)(a3 + 24) = bswap32(*v6) >> 16;
  if (v4 < 0x20)
    return 0;
  *a2 = (unint64_t)(v6 + 17);
  a2[1] = v3 - 34;
  if (v3 == 34)
    return 0;
  v8 = (char *)v6 + 35;
  *a2 = (unint64_t)v6 + 35;
  a2[1] = v3 - 35;
  v9 = *((unsigned __int8 *)v6 + 34);
  if (v3 - 35 < v9)
    return 0;
  *a2 = (unint64_t)&v8[v9];
  a2[1] = v3 - 35 - v9;
  if (v9 > 0x20)
    return 0;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 40) = 32;
  *(_QWORD *)(a3 + 48) = v8;
  *(_QWORD *)(a3 + 56) = v9;
  v10 = a2[1];
  if (***(_BYTE ***)a3)
  {
    if (!v10)
      return 0;
    v11 = (unsigned __int8 *)*a2;
    v12 = *a2 + 1;
    v13 = v10 - 1;
    *a2 = v12;
    a2[1] = v13;
    v14 = *v11;
    v15 = v13 >= v14;
    v10 = v13 - v14;
    if (!v15)
      return 0;
    *a2 = v12 + v14;
    a2[1] = v10;
  }
  v16 = v10 - 2;
  if (v10 < 2)
    return 0;
  v17 = (unsigned __int8 *)*a2;
  v18 = *a2 + 2;
  *a2 = v18;
  a2[1] = v16;
  v19 = v17[1];
  v20 = v19 | ((unint64_t)*v17 << 8);
  result = 0;
  v21 = v16 - v20;
  if (v16 >= v20)
  {
    v22 = (unsigned __int8 *)(v18 + v20);
    *a2 = v18 + v20;
    a2[1] = v21;
    if (v20 >= 2 && (v19 & 1) == 0 && v16 != v20)
    {
      v23 = v22 + 1;
      v24 = v21 - 1;
      *a2 = (unint64_t)(v22 + 1);
      a2[1] = v24;
      v25 = *v22;
      if (v24 >= v25)
      {
        *a2 = (unint64_t)&v23[v25];
        a2[1] = v24 - v25;
        if ((_DWORD)v25)
        {
          *(_QWORD *)(a3 + 64) = v18;
          *(_QWORD *)(a3 + 72) = v20;
          *(_QWORD *)(a3 + 80) = v23;
          *(_QWORD *)(a3 + 88) = v25;
          if (v24 == v25)
          {
            *(_QWORD *)(a3 + 96) = 0;
            *(_QWORD *)(a3 + 104) = 0;
            *(_QWORD *)(a3 + 8) = v6;
            *(_QWORD *)(a3 + 16) = v3;
            return 1;
          }
          v26 = a2[1];
          v27 = v26 - 2;
          if (v26 >= 2)
          {
            v28 = (unsigned __int16 *)*a2;
            v29 = (unsigned __int16 *)(*a2 + 2);
            *a2 = (unint64_t)v29;
            a2[1] = v27;
            v30 = (unsigned __int16 *)__rev16(*v28);
            v15 = v27 >= (unint64_t)v30;
            v31 = v27 - (_QWORD)v30;
            if (v15)
            {
              *a2 = (unint64_t)v30 + (_QWORD)v29;
              a2[1] = v31;
              v39[0] = v29;
              v39[1] = v30;
              v34 = v6;
              v36 = v29;
              v37 = v3;
              v33 = v30;
              if (bssl::tls1_check_duplicate_extensions(v39))
              {
                *(_QWORD *)(a3 + 96) = v36;
                *(_QWORD *)(a3 + 104) = v33;
                v32 = v37 - a2[1];
                *(_QWORD *)(a3 + 8) = v34;
                *(_QWORD *)(a3 + 16) = v32;
                return 1;
              }
            }
          }
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t bssl::tls1_check_duplicate_extensions(unsigned __int16 **a1)
{
  uint64_t v2;
  size_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  void *v12;
  unsigned __int16 *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL8 v17;
  size_t v18;
  const char *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v28;
  BOOL v29;

  v2 = 0;
  v3 = 0;
  v4 = *a1;
  v5 = (unint64_t)a1[1];
  if (!v5)
  {
LABEL_7:
    if (!v3)
      return 1;
    if ((v3 & 0x8000000000000000) != 0)
    {
      v20 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/internal.h";
      v21 = 16;
      v22 = 69;
      v23 = 297;
    }
    else
    {
      if (v3 <= 0x7FFFFFFFFFFFFFFBLL)
      {
        v9 = (unsigned __int16 *)malloc_type_malloc(v2 + 8, 0x30772F57uLL);
        if (v9)
        {
          v10 = v9;
          v11 = 0;
          *(_QWORD *)v9 = v2;
          v12 = v9 + 4;
          v13 = *a1;
          v14 = (unint64_t)a1[1];
          do
          {
            if (v14 < 2)
              goto LABEL_26;
            v10[v11 + 4] = bswap32(*v13) >> 16;
            if ((v14 & 0xFFFFFFFFFFFFFFFELL) == 2)
              goto LABEL_26;
            v15 = v14 - 4;
            v16 = __rev16(v13[1]);
            v8 = v15 >= v16;
            v14 = v15 - v16;
            if (!v8)
              goto LABEL_26;
            v13 = (unsigned __int16 *)((char *)v13 + v16 + 4);
            ++v11;
          }
          while (v3 != v11);
          qsort(v12, v3, 2uLL, (int (__cdecl *)(const void *, const void *))bssl::compare_uint16_t);
          if (v3 >= 2)
          {
            v24 = v10[5];
            if (v10[4] == v24)
            {
LABEL_26:
              v17 = 0;
              v18 = *(_QWORD *)v10 + 8;
              if (*(_QWORD *)v10 == -8)
                goto LABEL_28;
            }
            else
            {
              v25 = 0;
              v26 = v10 + 6;
              do
              {
                v27 = v25;
                if (v3 - 2 == v25)
                  break;
                v28 = v26[v25++];
                v29 = v24 == v28;
                v24 = v26[v27];
              }
              while (!v29);
              v17 = v27 + 2 >= v3;
              v18 = *(_QWORD *)v10 + 8;
              if (*(_QWORD *)v10 == -8)
              {
LABEL_28:
                free(v10);
                return v17;
              }
            }
          }
          else
          {
            v17 = 1;
            v18 = *(_QWORD *)v10 + 8;
            if (*(_QWORD *)v10 == -8)
              goto LABEL_28;
          }
          bzero(v10, v18);
          goto LABEL_28;
        }
      }
      v20 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
      v21 = 14;
      v22 = 65;
      v23 = 247;
    }
    ERR_put_error(v21, 0, v22, v20, v23);
    return 0;
  }
  while (v5 != 1)
  {
    if ((v5 & 0xFFFFFFFFFFFFFFFELL) == 2)
      break;
    v6 = v5 - 4;
    v7 = __rev16(v4[1]);
    v8 = v6 >= v7;
    v5 = v6 - v7;
    if (!v8)
      break;
    v4 = (unsigned __int16 *)((char *)v4 + v7 + 4);
    ++v3;
    v2 += 2;
    if (!v5)
      goto LABEL_7;
  }
  return 0;
}

uint64_t bssl::ssl_client_hello_get_extension(uint64_t a1, unsigned __int16 **a2, int a3)
{
  unint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;

  v3 = *(_QWORD *)(a1 + 104);
  if (v3)
  {
    v4 = *(unsigned __int16 **)(a1 + 96);
    do
    {
      if (v3 < 2)
        break;
      if ((v3 & 0xFFFFFFFFFFFFFFFELL) == 2)
        break;
      v5 = v3 - 4;
      v6 = __rev16(v4[1]);
      if (v5 < v6)
        break;
      v8 = *v4;
      v7 = v4 + 2;
      if (__rev16(v8) == a3)
      {
        *a2 = v7;
        a2[1] = (unsigned __int16 *)v6;
        return 1;
      }
      v4 = (unsigned __int16 *)((char *)v7 + v6);
      v3 = v5 - v6;
    }
    while (v3);
  }
  return 0;
}

BOOL bssl::tls1_check_group_id(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 *v4;
  _BOOL8 result;
  uint64_t v6;
  int v7;
  BOOL v8;

  if (!a2 || a2 == 25497 && *(_WORD *)(*a1 + 16) != 772)
    return 0;
  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 104);
  if (v3)
  {
    v4 = *(__int16 **)(v2 + 96);
  }
  else
  {
    v4 = &bssl::kDefaultGroups;
    v3 = 3;
  }
  v6 = 2 * v3 - 2;
  do
  {
    v7 = (unsigned __int16)*v4++;
    result = v7 == a2;
    v8 = v7 == a2 || v6 == 0;
    v6 -= 2;
  }
  while (!v8);
  return result;
}

BOOL bssl::tls12_add_verify_sigalgs(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int16 *v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  _BYTE *v10;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(v3 + 200);
  if (v4)
  {
    v5 = *(__int16 **)(v3 + 192);
  }
  else
  {
    v5 = &bssl::kVerifySignatureAlgorithms;
    v4 = 9;
  }
  v6 = 2 * v4;
  do
  {
    v7 = *v5;
    v10 = 0;
    v8 = CBB_add_space(a2, &v10, 2);
    if (!v8)
      break;
    v10[1] = v7;
    *v10 = HIBYTE(v7);
    ++v5;
    v6 -= 2;
  }
  while (v6);
  return v8 != 0;
}

BOOL bssl::tls12_check_peer_sigalg(uint64_t a1, _BYTE *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  int v9;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(v5 + 200);
  if (v6)
  {
    v7 = *(__int16 **)(v5 + 192);
    v8 = 2 * v6;
  }
  else
  {
    v7 = &bssl::kVerifySignatureAlgorithms;
    v8 = 18;
  }
  while (1)
  {
    v9 = (unsigned __int16)*v7;
    if (v9 == a3)
      break;
    ++v7;
    v8 -= 2;
    if (!v8)
    {
      ERR_put_error(16, 0, 245, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 451);
      *a2 = 47;
      return v9 == a3;
    }
  }
  return v9 == a3;
}

uint64_t bssl::ssl_is_alpn_protocol_allowed(_QWORD *a1, void *__s2, size_t __n)
{
  uint64_t v3;
  uint64_t v4;
  char *v7;
  char *v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;

  v3 = a1[1];
  v4 = *(_QWORD *)(v3 + 128);
  if (v4)
  {
    if ((*(_WORD *)(*(_QWORD *)(*a1 + 104) + 760) & 0x80) != 0)
      return 1;
    v7 = *(char **)(v3 + 120);
    do
    {
      v10 = *v7;
      v8 = v7 + 1;
      v9 = v10;
      v11 = v4 - 1 >= (unint64_t)v10;
      v4 = v4 - 1 - v10;
      if (!v11)
        break;
      if (__n == v9 && !memcmp(v8, __s2, __n))
        return 1;
      v7 = &v8[v9];
    }
    while (v4);
  }
  return 0;
}

uint64_t bssl::ssl_negotiate_alpn(_DWORD *a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v19;
  int v20;
  int v21;
  unsigned __int8 v22;
  const void *v23;

  v4 = *(_QWORD **)a1;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 592))
  {
    v5 = *(_QWORD *)(a3 + 104);
    if (v5)
    {
      v6 = *(unsigned __int16 **)(a3 + 96);
      do
      {
        if (v5 < 2)
          break;
        if ((v5 & 0xFFFFFFFFFFFFFFFELL) == 2)
          break;
        v7 = v5 - 4;
        v8 = __rev16(v6[1]);
        if (v7 < v8)
          break;
        if (__rev16(*v6) == 16)
        {
          a1[392] &= ~0x4000u;
          v10 = v8 - 2;
          if (v8 >= 2)
          {
            v11 = __rev16(v6[2]);
            v12 = v10 >= v11 && v10 == v11;
            if (v12 && v11 != 0)
            {
              v14 = v6 + 3;
              v15 = v10;
              while (1)
              {
                v16 = v15 - 1;
                v17 = *v14;
                if (!*v14 || v16 < v17)
                  break;
                v14 += v17 + 1;
                v15 = v16 - v17;
                if (!v15)
                {
                  v23 = 0;
                  v22 = 0;
                  v19 = (*(uint64_t (**)(_QWORD *, const void **, unsigned __int8 *))(v4[13] + 592))(v4, &v23, &v22);
                  if ((v19 & 0xFFFFFFFD) == 1)
                    v20 = 2;
                  else
                    v20 = v19;
                  if (v4[19])
                    v21 = v20;
                  else
                    v21 = v19;
                  result = 1;
                  switch(v21)
                  {
                    case 0:
                      if (v22)
                      {
                        if ((bssl::Array<unsigned char>::CopyFrom((uint64_t *)(v4[6] + 488), v23, v22) & 1) != 0)
                          return 1;
                      }
                      else
                      {
                        ERR_put_error(16, 0, 259, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1540);
                      }
                      result = 0;
                      *a2 = 80;
                      break;
                    case 1:
                    case 3:
                      return result;
                    case 2:
                      *a2 = 120;
                      ERR_put_error(16, 0, 307, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1555);
                      result = 0;
                      break;
                    default:
                      *a2 = 80;
                      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1560);
                      result = 0;
                      break;
                  }
                  return result;
                }
              }
            }
          }
          ERR_put_error(16, 0, 190, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1519);
          result = 0;
          *a2 = 50;
          return result;
        }
        v6 = (unsigned __int16 *)((char *)v6 + v8 + 4);
        v5 = v7 - v8;
      }
      while (v5);
    }
  }
  if (!v4[19])
    return 1;
  ERR_put_error(16, 0, 307, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1504);
  result = 0;
  *a2 = 120;
  return result;
}

uint64_t bssl::Array<unsigned char>::CopyFrom(uint64_t *a1, const void *a2, size_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  void *v11;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v8 = *(_QWORD *)(v6 - 8);
    v7 = (void *)(v6 - 8);
    v9 = v8 + 8;
    if (v8 != -8)
      bzero(v7, v9);
    free(v7);
  }
  *a1 = 0;
  a1[1] = 0;
  if (!a3)
    return 1;
  if (a3 <= 0xFFFFFFFFFFFFFFF7)
  {
    v10 = malloc_type_malloc(a3 + 8, 0x30772F57uLL);
    if (v10)
    {
      *v10 = a3;
      v11 = v10 + 1;
      *a1 = (uint64_t)v11;
      a1[1] = a3;
      memmove(v11, a2, a3);
      return 1;
    }
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  result = 0;
  *a1 = 0;
  return result;
}

uint64_t bssl::ssl_ext_pre_shared_key_parse_serverhello(uint64_t a1, _BYTE *a2, unsigned __int16 **a3)
{
  unint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  uint64_t result;

  v4 = (unint64_t)a3[1];
  if (v4 < 2 || (v5 = *a3, v6 = v4 - 2, ++*a3, (a3[1] = (unsigned __int16 *)v6) != 0))
  {
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1972);
    result = 0;
    *a2 = 50;
  }
  else if (__rev16(*v5))
  {
    ERR_put_error(16, 0, 195, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1979);
    result = 0;
    *a2 = 115;
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t bssl::ssl_ext_pre_shared_key_parse_clienthello(uint64_t a1, unsigned __int16 **a2, _QWORD *a3, _DWORD *a4, _BYTE *a5, uint64_t a6, unint64_t *a7)
{
  unsigned __int16 *v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t result;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  unsigned __int16 *v25;
  unsigned __int8 *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;

  v8 = (unsigned __int16 *)*a7;
  v9 = a7[1];
  if (*a7 + v9 != *(_QWORD *)(a6 + 96) + *(_QWORD *)(a6 + 104))
  {
    v10 = 267;
    v11 = 1995;
LABEL_3:
    ERR_put_error(16, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v11);
    result = 0;
    *a5 = 47;
    return result;
  }
  v13 = v9 >= 2;
  v14 = v9 - 2;
  if (!v13)
    goto LABEL_24;
  *a7 = (unint64_t)(v8 + 1);
  a7[1] = v14;
  v15 = __rev16(*v8);
  v13 = v14 >= v15;
  v16 = v14 - v15;
  if (!v13)
    goto LABEL_24;
  *a7 = (unint64_t)v8 + v15 + 2;
  a7[1] = v16;
  v17 = v15 - 2;
  if (v15 < 2)
    goto LABEL_24;
  v18 = __rev16(v8[1]);
  v13 = v17 >= v18;
  v19 = v17 - v18;
  if (!v13)
    goto LABEL_24;
  v20 = v8 + 2;
  *a2 = v20;
  a2[1] = (unsigned __int16 *)v18;
  v21 = v19 - 4;
  if (v19 < 4)
    goto LABEL_24;
  v22 = (char *)v20 + v18;
  *a4 = bswap32(*(_DWORD *)((char *)v20 + v18));
  v23 = a7[1];
  v24 = v23 - 2;
  if (v23 < 2)
    goto LABEL_24;
  v25 = (unsigned __int16 *)*a7;
  v26 = (unsigned __int8 *)(*a7 + 2);
  *a7 = (unint64_t)v26;
  a7[1] = v24;
  v27 = __rev16(*v25);
  if (v24 >= v27 && (*a7 = (unint64_t)&v26[v27], a7[1] = v24 - v27, v27) && v24 == v27)
  {
    *a3 = v26;
    a3[1] = v27;
    v28 = 1;
    if (!v21)
      goto LABEL_27;
    do
    {
      v13 = v21 >= 2;
      v29 = v21 - 2;
      if (!v13 || (v30 = __rev16(*((unsigned __int16 *)v22 + 2)), v13 = v29 >= v30, v31 = v29 - v30, !v13) || v31 <= 3)
      {
        v32 = 2022;
        goto LABEL_25;
      }
      v22 += v30 + 6;
      ++v28;
      v21 = v31 - 4;
    }
    while (v21);
    do
    {
LABEL_27:
      v33 = v27 - 1;
      v34 = *v26;
      v13 = v33 >= v34;
      v27 = v33 - v34;
      if (!v13)
      {
        v32 = 2036;
        goto LABEL_25;
      }
      v26 += v34 + 1;
      --v28;
    }
    while (v27);
    if (v28)
    {
      v10 = 271;
      v11 = 2045;
      goto LABEL_3;
    }
    return 1;
  }
  else
  {
LABEL_24:
    v32 = 2008;
LABEL_25:
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v32);
    result = 0;
    *a5 = 50;
  }
  return result;
}

uint64_t bssl::ssl_ext_pre_shared_key_add_serverhello(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _QWORD v4[6];
  _BYTE *v5;

  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 220) & 0x40) == 0)
    return 1;
  v4[0] = 0;
  result = CBB_add_space((uint64_t)a2, v4, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v4[0] + 1) = 41;
    *(_BYTE *)v4[0] = 0;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v4, 2u, 0);
      if ((_DWORD)result)
      {
        v5 = 0;
        result = CBB_add_space((uint64_t)v4, &v5, 2);
        if ((_DWORD)result)
        {
          v5[1] = 0;
          *v5 = 0;
          return CBB_flush(a2) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ssl_setup_key_shares(bssl *this, unint64_t a2)
{
  uint64_t v4;
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  uint64_t v7;
  size_t v8;
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  _QWORD *v18;
  bssl::SSLKeyShare *v19;
  uint64_t v20;
  void (***v21)(_QWORD);
  void (***v22)(_QWORD);
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v30;
  unint64_t v31;
  __int16 *v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v36[6];
  _OWORD v37[3];

  v4 = *(_QWORD *)this;
  v5 = (void (***)(_QWORD))*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = 0;
  if (v5)
  {
    (**v5)(v5);
    v7 = (uint64_t)*(v5 - 1);
    v6 = v5 - 1;
    v8 = v7 + 8;
    if (v7 != -8)
      bzero(v6, v8);
    free(v6);
  }
  v9 = (void (***)(_QWORD))*((_QWORD *)this + 50);
  *((_QWORD *)this + 50) = 0;
  if (v9)
  {
    (**v9)(v9);
    v11 = (uint64_t)*(v9 - 1);
    v10 = v9 - 1;
    v12 = v11 + 8;
    if (v11 != -8)
      bzero(v10, v12);
    free(v10);
  }
  v13 = *((_QWORD *)this + 75);
  if (v13)
  {
    v15 = *(_QWORD *)(v13 - 8);
    v14 = (void *)(v13 - 8);
    v16 = v15 + 8;
    if (v15 != -8)
      bzero(v14, v16);
    free(v14);
  }
  *((_QWORD *)this + 75) = 0;
  *((_QWORD *)this + 76) = 0;
  if (*((unsigned __int16 *)this + 15) < 0x304u)
    return 1;
  memset(v37, 0, sizeof(v37));
  v18 = malloc_type_malloc(0x48uLL, 0x30772F57uLL);
  if (!v18)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    goto LABEL_35;
  }
  v19 = 0;
  *v18 = 64;
  BYTE8(v37[0]) = 0;
  *(_QWORD *)&v37[0] = 0;
  *(_QWORD *)&v37[1] = v18 + 1;
  *(_OWORD *)((char *)&v37[1] + 8) = xmmword_208F05A00;
  BYTE8(v37[2]) = 1;
  if ((_DWORD)a2)
    goto LABEL_17;
  if ((*(_WORD *)(*(_QWORD *)(v4 + 104) + 760) & 0x20) == 0)
  {
    v30 = *((_QWORD *)this + 1);
    v31 = *(_QWORD *)(v30 + 104);
    if (v31)
      goto LABEL_45;
LABEL_51:
    v32 = &bssl::kDefaultGroups;
    a2 = 29;
    v31 = 3;
    goto LABEL_52;
  }
  v33 = *((_BYTE *)this + 1615);
  v36[0] = 0;
  if (!CBB_add_space((uint64_t)v37, v36, 2)
    || (*(_BYTE *)(v36[0] + 1) = v33 & 0xF0 | 0xA,
        *(_BYTE *)v36[0] = v33 & 0xF0 | 0xA,
        v36[0] = 0,
        !CBB_add_space((uint64_t)v37, v36, 2))
    || (*(_BYTE *)(v36[0] + 1) = 1,
        *(_BYTE *)v36[0] = 0,
        v36[0] = 0,
        !CBB_add_space((uint64_t)v37, v36, 1)))
  {
LABEL_35:
    v17 = 0;
    goto LABEL_36;
  }
  *(_BYTE *)v36[0] = 0;
  v30 = *((_QWORD *)this + 1);
  v31 = *(_QWORD *)(v30 + 104);
  if (!v31)
    goto LABEL_51;
LABEL_45:
  v32 = *(__int16 **)(v30 + 96);
  a2 = (unsigned __int16)*v32;
  if (v31 == 1)
  {
    v19 = 0;
    goto LABEL_17;
  }
LABEL_52:
  v34 = 1;
  do
  {
    if (((_DWORD)a2 == 25497) != (v32[v34] == 25497))
      v19 = (bssl::SSLKeyShare *)(unsigned __int16)v32[v34];
    else
      v19 = 0;
    ++v34;
  }
  while (v34 < v31 && !(_DWORD)v19);
LABEL_17:
  bssl::SSLKeyShare::Create((bssl::SSLKeyShare *)a2, v36);
  v20 = v36[0];
  v21 = (void (***)(_QWORD))*((_QWORD *)this + 49);
  *((_QWORD *)this + 49) = v36[0];
  if (v21)
  {
    (**v21)(v21);
    v23 = (uint64_t)*(v21 - 1);
    v22 = v21 - 1;
    v24 = v23 + 8;
    if (v23 != -8)
      bzero(v22, v24);
    free(v22);
    v20 = *((_QWORD *)this + 49);
  }
  if (!v20)
    goto LABEL_35;
  v36[0] = 0;
  if (!CBB_add_space((uint64_t)v37, v36, 2))
    goto LABEL_35;
  *(_BYTE *)(v36[0] + 1) = a2;
  *(_BYTE *)v36[0] = BYTE1(a2);
  if (!CBB_flush((uint64_t *)v37)
    || !cbb_add_child((uint64_t)v37, (uint64_t)v36, 2u, 0)
    || !(*(unsigned int (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 49) + 24))(*((_QWORD *)this + 49), v36))
  {
    goto LABEL_35;
  }
  if ((_DWORD)v19)
  {
    bssl::SSLKeyShare::Create(v19, &v35);
    v25 = v35;
    v26 = (_QWORD *)*((_QWORD *)this + 50);
    *((_QWORD *)this + 50) = v35;
    if (v26)
    {
      (*(void (**)(_QWORD *))*v26)(v26);
      OPENSSL_free(v26);
      v25 = *((_QWORD *)this + 50);
    }
    if (!v25
      || !CBB_add_u16((uint64_t)v37, (__int16)v19)
      || !CBB_add_u16_length_prefixed((uint64_t *)v37, (uint64_t)v36)
      || !(*(unsigned int (**)(_QWORD, _QWORD *))(**((_QWORD **)this + 50) + 24))(*((_QWORD *)this + 50), v36))
    {
      goto LABEL_35;
    }
  }
  v17 = bssl::CBBFinishArray((uint64_t)v37, (uint64_t *)this + 75);
LABEL_36:
  if (!BYTE8(v37[0]) && (BYTE8(v37[2]) & 1) != 0 && *(_QWORD *)&v37[1])
  {
    v28 = (void *)(*(_QWORD *)&v37[1] - 8);
    v27 = *(_QWORD *)(*(_QWORD *)&v37[1] - 8);
    if (v27 != -8)
      bzero(v28, v27 + 8);
    free(v28);
  }
  return v17;
}

uint64_t bssl::ssl_ext_key_share_parse_serverhello(_QWORD *a1, uint64_t a2, char *a3, unsigned __int16 **a4)
{
  unint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  unsigned int v8;
  unsigned __int16 *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  void (***v18)(_QWORD);
  uint64_t v19;
  size_t v20;
  void (***v21)(_QWORD);
  void (***v22)(_QWORD);
  uint64_t v23;
  size_t v24;
  uint64_t result;
  char v26;

  v5 = (unint64_t)a4[1];
  v6 = v5 - 2;
  if (v5 < 2)
    goto LABEL_19;
  v7 = (*a4)++;
  a4[1] = (unsigned __int16 *)v6;
  if (v6 < 2)
    goto LABEL_19;
  v8 = *v7;
  v9 = v7 + 2;
  v10 = v5 - 4;
  *a4 = v7 + 2;
  a4[1] = (unsigned __int16 *)(v5 - 4);
  v11 = __rev16(v7[1]);
  if (v10 < v11 || (*a4 = (unsigned __int16 *)((char *)v9 + v11), a4[1] = (unsigned __int16 *)(v10 - v11), v10 != v11))
  {
LABEL_19:
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2319);
    result = 0;
    v26 = 50;
LABEL_20:
    *a3 = v26;
    return result;
  }
  v14 = bswap32(v8) >> 16;
  v15 = a1[49];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15) != v14)
  {
    v16 = a1[50];
    if (!v16 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16) != v14)
    {
      *a3 = 47;
      ERR_put_error(16, 0, 243, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2328);
      return 0;
    }
    v15 = a1[50];
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, char *, unsigned __int16 *, unint64_t))(*(_QWORD *)v15 + 40))(v15, a2, a3, v9, v10) & 1) == 0)
  {
    result = 0;
    v26 = 80;
    goto LABEL_20;
  }
  *(_WORD *)(a1[188] + 6) = v14;
  v17 = (void (***)(_QWORD))a1[49];
  a1[49] = 0;
  if (v17)
  {
    (**v17)(v17);
    v19 = (uint64_t)*(v17 - 1);
    v18 = v17 - 1;
    v20 = v19 + 8;
    if (v19 != -8)
      bzero(v18, v20);
    free(v18);
  }
  v21 = (void (***)(_QWORD))a1[50];
  a1[50] = 0;
  if (v21)
  {
    (**v21)(v21);
    v23 = (uint64_t)*(v21 - 1);
    v22 = v21 - 1;
    v24 = v23 + 8;
    if (v23 != -8)
      bzero(v22, v24);
    free(v22);
  }
  return 1;
}

uint64_t bssl::ssl_ext_key_share_parse_clienthello(uint64_t a1, BOOL *a2, unsigned __int16 **a3, _BYTE *a4, uint64_t a5)
{
  unint64_t v6;
  unsigned __int16 *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t v11;
  unsigned __int16 *v12;
  unint64_t v13;
  unsigned __int16 *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unsigned __int16 *v19;
  unsigned int v20;

  v6 = *(_QWORD *)(a5 + 104);
  if (v6)
  {
    v7 = *(unsigned __int16 **)(a5 + 96);
    do
    {
      if (v6 < 2)
        break;
      if ((v6 & 0xFFFFFFFFFFFFFFFELL) == 2)
        break;
      v8 = v6 - 4;
      v9 = __rev16(v7[1]);
      if (v8 < v9)
        break;
      if (__rev16(*v7) == 51)
      {
        v11 = v9 - 2;
        if (v9 >= 2 && v11 == __rev16(v7[2]))
        {
          if (v9 == 2)
          {
            v15 = 0;
            v12 = 0;
LABEL_26:
            if (a3)
            {
              *a3 = v12;
              a3[1] = (unsigned __int16 *)v15;
            }
            *a2 = v15 != 0;
            return 1;
          }
          else
          {
            v12 = 0;
            v13 = 0;
            v14 = v7 + 3;
            while (v11 >= 2)
            {
              if ((v11 & 0xFFFFFFFFFFFFFFFELL) == 2)
                break;
              v16 = v11 - 4;
              v17 = __rev16(v14[1]);
              v18 = v16 >= v17;
              v11 = v16 - v17;
              if (!v18 || !v17)
                break;
              v20 = *v14;
              v19 = v14 + 2;
              if (__rev16(v20) == *(unsigned __int16 *)(*(_QWORD *)(a1 + 1504) + 6))
              {
                v15 = v17;
                v12 = v19;
                if (v13)
                {
                  ERR_put_error(16, 0, 264, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2381);
                  result = 0;
                  *a4 = 47;
                  return result;
                }
              }
              else
              {
                v15 = v13;
              }
              v14 = (unsigned __int16 *)((char *)v19 + v17);
              v13 = v15;
              if (!v11)
                goto LABEL_26;
            }
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2375);
            return 0;
          }
        }
        else
        {
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2361);
          return 0;
        }
      }
      v7 = (unsigned __int16 *)((char *)v7 + v9 + 4);
      v6 = v8 - v9;
    }
    while (v6);
  }
  ERR_put_error(16, 0, 258, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2353);
  result = 0;
  *a4 = 109;
  return result;
}

uint64_t bssl::ssl_ext_key_share_add_serverhello(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  __int16 v5;
  const void *v6;
  size_t v7;
  _QWORD v8[6];
  uint64_t v9[6];
  void *v10;

  v9[0] = 0;
  result = CBB_add_space((uint64_t)a2, v9, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v9[0] + 1) = 51;
    *(_BYTE *)v9[0] = 0;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v9, 2u, 0);
      if ((_DWORD)result)
      {
        v5 = *(_WORD *)(a1[188] + 6);
        v8[0] = 0;
        result = CBB_add_space((uint64_t)v9, v8, 2);
        if ((_DWORD)result)
        {
          *(_BYTE *)(v8[0] + 1) = v5;
          *(_BYTE *)v8[0] = HIBYTE(v5);
          result = CBB_flush(v9);
          if ((_DWORD)result)
          {
            result = cbb_add_child((uint64_t)v9, (uint64_t)v8, 2u, 0);
            if ((_DWORD)result)
            {
              v6 = (const void *)a1[77];
              v7 = a1[78];
              v10 = 0;
              result = CBB_add_space((uint64_t)v8, &v10, v7);
              if ((_DWORD)result)
              {
                if (v7)
                  memcpy(v10, v6, v7);
                return CBB_flush(a2) != 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ssl_get_local_application_settings(uint64_t a1, _QWORD *a2, void *__s1, size_t __n)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 136);
  if (!v5)
    return 0;
  v9 = (_QWORD *)(*(_QWORD *)(v4 + 144) + 16);
  v10 = 32 * v5;
  while (__n != *(v9 - 1) || memcmp(__s1, (const void *)*(v9 - 2), __n))
  {
    v9 += 4;
    v10 -= 32;
    if (!v10)
      return 0;
  }
  v11 = v9[1];
  *a2 = *v9;
  a2[1] = v11;
  return 1;
}

uint64_t bssl::ssl_negotiate_alps(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  size_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  size_t v16;
  unsigned __int16 *v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  char v24;
  char *v25;
  BOOL v26;
  char *v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  char v31;

  v3 = *(_QWORD *)(*a1 + 48);
  v4 = *(_QWORD *)(v3 + 496);
  if (v4)
  {
    v6 = a1[1];
    v7 = (*(_WORD *)(v6 + 237) & 0x2000) != 0 ? 17613 : 17513;
    if (*(_WORD *)(*a1 + 16) == 772)
    {
      v8 = *(_QWORD *)(v6 + 136);
      if (v8)
      {
        v11 = *(const void **)(v3 + 488);
        v12 = *(_QWORD *)(v6 + 144) + 16;
        v13 = 32 * v8;
        while (v4 != *(_QWORD *)(v12 - 8) || memcmp(v11, *(const void **)(v12 - 16), v4))
        {
          v12 += 32;
          v13 -= 32;
          if (!v13)
            return 1;
        }
        v14 = *(_QWORD *)(a3 + 104);
        if (v14)
        {
          v15 = *(const void **)v12;
          v16 = *(_QWORD *)(v12 + 8);
          v17 = *(unsigned __int16 **)(a3 + 96);
          result = 1;
          while (1)
          {
            if (v14 < 2)
              return 1;
            if ((v14 & 0xFFFFFFFFFFFFFFFELL) == 2)
              return 1;
            v19 = v14 - 4;
            v20 = __rev16(v17[1]);
            if (v19 < v20)
              return 1;
            if (bswap32(*v17) >> 16 == v7)
              break;
            v17 = (unsigned __int16 *)((char *)v17 + v20 + 4);
            v14 = v19 - v20;
            if (!v14)
              return result;
          }
          v21 = v20 - 2;
          if (v20 < 2)
          {
            v22 = 3080;
LABEL_35:
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v22);
            v31 = 50;
LABEL_36:
            result = 0;
            *a2 = v31;
            return result;
          }
          v23 = __rev16(v17[2]);
          v22 = 3080;
          if (v21 < v23 || v21 != v23 || !v23)
            goto LABEL_35;
          v24 = 0;
          v25 = (char *)(v17 + 3);
          do
          {
            while (1)
            {
              v29 = *v25;
              v27 = v25 + 1;
              v28 = v29;
              v30 = v21 - 1 >= v29;
              v21 = v21 - 1 - v29;
              if (!v30 || !(_DWORD)v28)
              {
                v22 = 3089;
                goto LABEL_35;
              }
              if (v4 != v28)
                break;
              v26 = memcmp(v27, v11, v4) == 0;
              v25 = &v27[v28];
              v24 |= v26;
              if (!v21)
                goto LABEL_31;
            }
            v25 = &v27[v28];
          }
          while (v21);
LABEL_31:
          if ((v24 & 1) != 0)
          {
            *(_BYTE *)(a1[188] + 424) |= 0x40u;
            if ((bssl::Array<unsigned char>::CopyFrom((uint64_t *)(a1[188] + 392), v15, v16) & 1) == 0)
            {
              v31 = 80;
              goto LABEL_36;
            }
          }
        }
      }
    }
  }
  return 1;
}

BOOL bssl::ssl_setup_extension_permutation(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  _BOOL8 v2;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  size_t v46;
  _DWORD v48[2];
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  if ((*(_WORD *)(*((_QWORD *)this + 1) + 237) & 0x400) == 0)
    return 1;
  RAND_bytes_with_additional_data((uint64_t)v48, 0x60uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
  v4 = (char *)malloc_type_malloc(0x21uLL, 0x30772F57uLL);
  v2 = v4 != 0;
  if (v4)
  {
    *(_QWORD *)v4 = 25;
    *(_OWORD *)(v4 + 8) = xmmword_208F2AEA0;
    v5 = v4 + 8;
    *((_QWORD *)v4 + 3) = 0x1716151413121110;
    v4[32] = 24;
    v6 = v70 % 0x19;
    v4[32] = v4[v6 + 8];
    v5[v6] = 24;
    v7 = v69 % 0x18;
    v8 = v4[31];
    v4[31] = v4[v7 + 8];
    v5[v7] = v8;
    v9 = v68 % 0x17;
    v10 = v4[30];
    v4[30] = v4[v9 + 8];
    v5[v9] = v10;
    v11 = v67 % 0x16;
    v12 = v4[29];
    v4[29] = v4[v11 + 8];
    v5[v11] = v12;
    v13 = v66 % 0x15;
    v14 = v4[28];
    v4[28] = v4[v13 + 8];
    v5[v13] = v14;
    v15 = v65 % 0x14;
    v16 = v4[27];
    v4[27] = v4[v15 + 8];
    v5[v15] = v16;
    v17 = v64 % 0x13;
    v18 = v4[26];
    v4[26] = v4[v17 + 8];
    v5[v17] = v18;
    v19 = v63 % 0x12;
    v20 = v4[25];
    v4[25] = v4[v19 + 8];
    v5[v19] = v20;
    v21 = v62 % 0x11;
    v22 = v4[24];
    v4[24] = v4[v21 + 8];
    v5[v21] = v22;
    v23 = v61 & 0xF;
    v24 = v4[23];
    v4[23] = v4[v23 + 8];
    v5[v23] = v24;
    v25 = v60 % 0xF;
    v26 = v4[22];
    v4[22] = v4[v25 + 8];
    v5[v25] = v26;
    v27 = v59 % 0xE;
    v28 = v4[21];
    v4[21] = v4[v27 + 8];
    v5[v27] = v28;
    v29 = v58 % 0xD;
    v30 = v4[20];
    v4[20] = v4[v29 + 8];
    v5[v29] = v30;
    v31 = v57 % 0xC;
    v32 = v4[19];
    v4[19] = v4[v31 + 8];
    v5[v31] = v32;
    v33 = v56 % 0xB;
    LOBYTE(v31) = v4[18];
    v4[18] = v4[v33 + 8];
    v5[v33] = v31;
    v34 = v55 % 0xA;
    LOBYTE(v31) = v4[17];
    v4[17] = v4[v34 + 8];
    v5[v34] = v31;
    v35 = v54 % 9;
    LOBYTE(v31) = v4[16];
    v4[16] = v4[v35 + 8];
    v5[v35] = v31;
    v36 = v53 & 7;
    LOBYTE(v17) = v4[15];
    v4[15] = v4[v36 + 8];
    v5[v36] = v17;
    v37 = v52 % 7;
    LOBYTE(v31) = v4[14];
    v4[14] = v4[v37 + 8];
    v5[v37] = v31;
    v38 = v51 % 6;
    LOBYTE(v17) = v4[13];
    v4[13] = v4[v38 + 8];
    v5[v38] = v17;
    v39 = v50 % 5;
    LOBYTE(v38) = v4[12];
    v4[12] = v4[v39 + 8];
    v5[v39] = v38;
    v40 = v49 & 3;
    LOBYTE(v17) = v4[11];
    v4[11] = v4[v40 + 8];
    v5[v40] = v17;
    v41 = v48[1] % 3u;
    LOBYTE(v40) = v4[10];
    v4[10] = v4[v41 + 8];
    v5[v41] = v40;
    v42 = v48[0] & 1;
    LOBYTE(v40) = v4[9];
    v4[9] = v4[v42 + 8];
    v5[v42] = v40;
    v43 = *((_QWORD *)this + 87);
    if (v43)
    {
      v45 = *(_QWORD *)(v43 - 8);
      v44 = (void *)(v43 - 8);
      v46 = v45 + 8;
      if (v45 != -8)
        bzero(v44, v46);
      free(v44);
    }
    *((_QWORD *)this + 87) = v5;
    *((_QWORD *)this + 88) = 25;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  }
  return v2;
}

BOOL bssl::ssl_add_clienthello_tlsext(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const ssl_session_st *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)(uint64_t, uint64_t *, __int128 *, uint64_t);
  size_t v28;
  uint64_t v29;
  BOOL v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  _BOOL8 v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  void *v47;
  char v48;
  char v49;
  int v50;
  __int16 v51;
  char v53;
  unsigned __int8 v54;
  uint64_t v55;
  bssl *v56;
  unsigned int v57;
  const ssl_session_st *v58;
  const ssl_cipher_st *v59;
  bssl *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const void *v68;
  size_t v69;
  size_t v70;
  uint64_t v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  size_t v76;
  const void *v77;
  char *v78;
  char *v79;
  void *v80;
  uint64_t v81;
  unint64_t v82;
  _BOOL4 v83;
  unint64_t v84;
  size_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  size_t v90;
  _QWORD *v91;
  size_t v92;
  _QWORD *v93;
  size_t v94;
  _BYTE *v95;
  _QWORD v96[6];
  uint64_t v97[6];
  uint64_t v98;
  char v99;
  _QWORD *v100;
  size_t v101;
  unsigned __int8 v102;
  __int128 v103;
  void *v104[4];
  __int128 v105;
  _OWORD v106[2];
  uint64_t v107[8];

  *a4 = 0;
  v9 = *(_QWORD *)a1;
  if ((_DWORD)a5 != 1)
  {
    if (!CBB_flush((uint64_t *)a2) || !cbb_add_child(a2, (uint64_t)&v105, 2u, 0))
    {
      v21 = 3474;
      goto LABEL_85;
    }
    *(_DWORD *)(a1 + 376) = 0;
    if ((*(_WORD *)(*(_QWORD *)(v9 + 104) + 760) & 0x20) != 0)
    {
      v22 = *(_BYTE *)(a1 + 1616);
      *(_QWORD *)&v103 = 0;
      if (!CBB_add_space((uint64_t)&v105, &v103, 2))
        goto LABEL_84;
      *(_BYTE *)(v103 + 1) = v22 & 0xF0 | 0xA;
      *(_BYTE *)v103 = v22 & 0xF0 | 0xA;
      if (!CBB_flush((uint64_t *)&v105))
        goto LABEL_84;
      if (!cbb_add_child((uint64_t)&v105, (uint64_t)v107, 2u, 0))
        goto LABEL_84;
      *(_QWORD *)&v103 = 0;
      if (!CBB_add_space((uint64_t)v107, &v103, 0))
        goto LABEL_84;
      if (!CBB_flush((uint64_t *)&v105))
        return 0;
    }
    v95 = a4;
    v16 = 0;
    while (1)
    {
      v17 = v16;
      if (*(_QWORD *)(a1 + 704))
        v17 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 696) + v16);
      if (BYTE8(v105))
        v18 = *(_QWORD *)(*(_QWORD *)&v106[0] + 8) - (*((_QWORD *)&v106[0] + 1) + LOBYTE(v106[1]));
      else
        v18 = *((_QWORD *)&v106[0] + 1);
      if (!(*((unsigned int (**)(uint64_t, __int128 *, __int128 *, uint64_t))&bssl::kExtensions + 5 * v17 + 1))(a1, &v105, &v105, a5))
      {
        ERR_put_error(16, 0, 147, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3497);
        ERR_add_error_dataf("extension %u", v32, v33, v34, v35, v36, v37, v38, *((_WORD *)&bssl::kExtensions + 20 * v17));
        return 0;
      }
      if (BYTE8(v105))
      {
        v20 = *(_QWORD *)(*(_QWORD *)&v106[0] + 8) - (*((_QWORD *)&v106[0] + 1) + LOBYTE(v106[1])) - v18;
        if (!v20)
          goto LABEL_15;
      }
      else
      {
        v20 = *((_QWORD *)&v106[0] + 1) - v18;
        if (*((_QWORD *)&v106[0] + 1) == v18)
          goto LABEL_15;
      }
      *(_DWORD *)(a1 + 376) |= 1 << v17;
LABEL_15:
      if (++v16 == 25)
      {
        v39 = v20 == 4;
        if ((*(_WORD *)(*(_QWORD *)(v9 + 104) + 760) & 0x20) == 0)
          goto LABEL_57;
        v48 = *(_BYTE *)(a1 + 1617);
        v49 = *(_BYTE *)(a1 + 1616);
        *(_QWORD *)&v103 = 0;
        if (CBB_add_space((uint64_t)&v105, &v103, 2))
        {
          v50 = v48 & 0xF0 | 0xA;
          v51 = v50 == (v49 & 0xF0 | 0xA) ? (v50 | ((_WORD)v50 << 8)) ^ 0x1010 : v50 | ((_WORD)v50 << 8);
          *(_BYTE *)(v103 + 1) = v51;
          *(_BYTE *)v103 = HIBYTE(v51);
          if (CBB_flush((uint64_t *)&v105))
          {
            if (cbb_add_child((uint64_t)&v105, (uint64_t)v107, 2u, 0)
              && CBB_add_zeros((uint64_t)v107, 1uLL))
            {
              v39 = 0;
              v43 = 0;
              if (!CBB_flush((uint64_t *)&v105))
                return v43;
LABEL_57:
              if (*(unsigned __int16 *)(a1 + 30) < 0x304u)
              {
                v40 = 0;
                v41 = v95;
                if (!**(_BYTE **)v9)
                  goto LABEL_109;
                goto LABEL_149;
              }
              v55 = *(_QWORD *)a1;
              v56 = *(bssl **)(*(_QWORD *)a1 + 88);
              v41 = v95;
              if (v56)
              {
                v57 = bssl::ssl_session_protocol_version(v56, v19);
                v40 = 0;
                if ((_DWORD)a5 != 2 && v57 >= 0x304)
                {
                  v60 = *(bssl **)(v55 + 88);
                  if ((*(_WORD *)(*(_QWORD *)(v55 + 48) + 220) & 0x2000) != 0
                    && *(_DWORD *)(*((_QWORD *)v60 + 25) + 36) != *(_DWORD *)(*(_QWORD *)(a1 + 1536) + 36))
                  {
                    v40 = 0;
                    if (!**(_BYTE **)v9)
                      goto LABEL_109;
                  }
                  else
                  {
                    v40 = *((unsigned int *)bssl::ssl_session_get_digest(v60, v58, v59) + 1)
                        + *(_QWORD *)(*(_QWORD *)(v55 + 88) + 240)
                        + 15;
                    if (!**(_BYTE **)v9)
                      goto LABEL_109;
                  }
                  goto LABEL_149;
                }
              }
              else
              {
                v40 = 0;
              }
              if (**(_BYTE **)v9)
                goto LABEL_149;
LABEL_109:
              if (!*(_QWORD *)(v9 + 152) && (*(_WORD *)(*(_QWORD *)(v9 + 48) + 220) & 0x2000) == 0)
              {
                if (BYTE8(v105))
                  v71 = *(_QWORD *)(*(_QWORD *)&v106[0] + 8) - (*((_QWORD *)&v106[0] + 1) + LOBYTE(v106[1]));
                else
                  v71 = *((_QWORD *)&v106[0] + 1);
                v81 = a6 + v40 + v71;
                v82 = v81 + 6;
                v83 = v40 == 0;
                v84 = v81 + 11;
                v85 = v39 & v83;
                if (v39 && v83)
                  v86 = v84;
                else
                  v86 = v82;
                if ((v86 & 0xFFFFFFFFFFFFFF00) != 0x100)
                  goto LABEL_145;
                if (v82 > 0x1FB)
                {
                  v85 = 1;
                }
                else
                {
                  v85 = 508 - v82;
LABEL_145:
                  if (!v85)
                    goto LABEL_149;
                }
                if (bssl::add_padding_extension((uint64_t *)&v105, v85))
                  goto LABEL_149;
                return 0;
              }
LABEL_149:
              if ((bssl::ext_pre_shared_key_add_clienthello(a1, (uint64_t *)&v105, v41, a5) & 1) != 0)
              {
                if (BYTE8(v105))
                  v87 = *(_QWORD *)(*(_QWORD *)&v106[0] + 8) - (*((_QWORD *)&v106[0] + 1) + LOBYTE(v106[1]));
                else
                  v87 = *((_QWORD *)&v106[0] + 1);
                if (!v87)
                {
                  v88 = *(_QWORD *)a2;
                  if (*(_QWORD *)a2)
                  {
                    v89 = (_QWORD *)(a2 + 16);
                    if (*(_BYTE *)(a2 + 8))
                      v89 = (_QWORD *)*v89;
                    v89[1] = *(_QWORD *)(v88 + 24);
                    *(_QWORD *)(v88 + 16) = 0;
                    *(_QWORD *)a2 = 0;
                  }
                }
                return CBB_flush((uint64_t *)a2) != 0;
              }
              v21 = 3571;
LABEL_85:
              ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v21);
              return 0;
            }
          }
        }
LABEL_84:
        v21 = 3345;
        goto LABEL_85;
      }
    }
  }
  memset(v106, 0, sizeof(v106));
  v105 = 0u;
  memset(v104, 0, sizeof(v104));
  v103 = 0u;
  if (!CBB_flush((uint64_t *)a2)
    || !cbb_add_child(a2, (uint64_t)&v98, 2u, 0)
    || !CBB_flush(a3)
    || !cbb_add_child((uint64_t)a3, (uint64_t)v97, 2u, 0))
  {
    goto LABEL_61;
  }
  memset(v106, 0, sizeof(v106));
  v105 = 0u;
  v11 = malloc_type_malloc(0x48uLL, 0x30772F57uLL);
  if (!v11)
    goto LABEL_60;
  *v11 = 64;
  BYTE8(v105) = 0;
  *(_QWORD *)&v105 = 0;
  *(_QWORD *)&v106[0] = v11 + 1;
  *(_OWORD *)((char *)v106 + 8) = xmmword_208F05A00;
  BYTE8(v106[1]) = BYTE8(v106[1]) & 0xFC | 1;
  v103 = 0u;
  memset(v104, 0, sizeof(v104));
  v12 = malloc_type_malloc(0x48uLL, 0x30772F57uLL);
  if (!v12)
  {
LABEL_60:
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
LABEL_61:
    v42 = 3366;
    goto LABEL_62;
  }
  *v12 = 64;
  BYTE8(v103) = 0;
  *(_QWORD *)&v103 = 0;
  v104[0] = v12 + 1;
  *(_OWORD *)&v104[1] = xmmword_208F05A00;
  LOBYTE(v104[3]) = (uint64_t)v104[3] & 0xFC | 1;
  *(_DWORD *)(a1 + 380) = 0;
  if ((*(_BYTE *)(*(_QWORD *)(v9 + 104) + 760) & 0x20) != 0)
  {
    v53 = *(_BYTE *)(a1 + 1616);
    v96[0] = 0;
    if (CBB_add_space((uint64_t)&v105, v96, 2))
    {
      v54 = v53 & 0xF0 | 0xA;
      *(_BYTE *)(v96[0] + 1) = v54 & 0xFE;
      *(_BYTE *)v96[0] = v54;
      if (CBB_flush((uint64_t *)&v105))
      {
        if (cbb_add_child((uint64_t)&v105, (uint64_t)v107, 2u, 0))
        {
          v96[0] = 0;
          if (CBB_add_space((uint64_t)v107, v96, 0))
          {
            if (CBB_flush((uint64_t *)&v105)
              && CBB_add_u16((uint64_t)&v103, 257 * (v54 & 0xFEu)))
            {
              goto LABEL_9;
            }
LABEL_63:
            v43 = 0;
            if (!BYTE8(v103))
              goto LABEL_64;
            goto LABEL_69;
          }
        }
      }
    }
LABEL_122:
    v42 = 3345;
LABEL_62:
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v42);
    goto LABEL_63;
  }
LABEL_9:
  for (i = 0; i != 25; ++i)
  {
    v23 = i;
    if (*(_QWORD *)(a1 + 704))
      v23 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 696) + i);
    if (v99)
    {
      v24 = v100[1] - (v101 + v102);
      v25 = v9;
      if (BYTE8(v105))
        goto LABEL_40;
    }
    else
    {
      v24 = v101;
      v25 = v9;
      if (BYTE8(v105))
      {
LABEL_40:
        v26 = *(_QWORD *)(*(_QWORD *)&v106[0] + 8) - (*((_QWORD *)&v106[0] + 1) + LOBYTE(v106[1]));
        goto LABEL_43;
      }
    }
    v26 = *((_QWORD *)&v106[0] + 1);
LABEL_43:
    v27 = (uint64_t (**)(uint64_t, uint64_t *, __int128 *, uint64_t))((char *)&bssl::kExtensions + 40 * v23);
    if ((v27[1](a1, &v98, &v105, 1) & 1) == 0)
    {
      ERR_put_error(16, 0, 147, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3390);
      ERR_add_error_dataf("extension %u", v61, v62, v63, v64, v65, v66, v67, *(_WORD *)v27);
      v43 = 0;
      if (BYTE8(v103))
        goto LABEL_69;
      goto LABEL_64;
    }
    if (v99)
    {
      v28 = v100[1] - (v101 + v102);
      if (BYTE8(v105))
        goto LABEL_46;
    }
    else
    {
      v28 = v101;
      if (BYTE8(v105))
      {
LABEL_46:
        v29 = *(_QWORD *)(*(_QWORD *)&v106[0] + 8) - (*((_QWORD *)&v106[0] + 1) + LOBYTE(v106[1]));
        if (v28 == v24)
          goto LABEL_50;
        goto LABEL_51;
      }
    }
    v29 = *((_QWORD *)&v106[0] + 1);
    if (v28 == v24)
    {
LABEL_50:
      if (v29 == v26)
        goto LABEL_52;
    }
LABEL_51:
    *(_DWORD *)(a1 + 380) |= 1 << v23;
LABEL_52:
    v30 = v29 == v26;
    v9 = v25;
    if (!v30)
    {
      v31 = *(_WORD *)v27;
      v107[0] = 0;
      if (!CBB_add_space((uint64_t)&v103, v107, 2))
        goto LABEL_63;
      *(_BYTE *)(v107[0] + 1) = v31;
      *(_BYTE *)v107[0] = HIBYTE(v31);
    }
  }
  if ((*(_WORD *)(*(_QWORD *)(v9 + 104) + 760) & 0x20) != 0)
  {
    v72 = *(_BYTE *)(a1 + 1617) & 0xF0 | 0xA;
    if (v72 == (*(_BYTE *)(a1 + 1616) & 0xF0 | 0xA))
      v73 = (v72 | ((_WORD)v72 << 8)) ^ 0x1010;
    else
      v73 = v72 | ((_WORD)v72 << 8);
    if (!CBB_add_u16((uint64_t)&v105, v73)
      || !CBB_add_u16_length_prefixed((uint64_t *)&v105, (uint64_t)v107)
      || !CBB_add_zeros((uint64_t)v107, 1uLL))
    {
      goto LABEL_122;
    }
    if (!CBB_flush((uint64_t *)&v105) || !CBB_add_u16((uint64_t)&v103, v73))
      goto LABEL_63;
  }
  v68 = v100;
  if (v99)
  {
    v69 = v101 + v102;
    v68 = (const void *)(v69 + *v100);
    v70 = v100[1] - v69;
  }
  else
  {
    v70 = v101;
  }
  if (!CBB_add_bytes((uint64_t)v97, v68, v70))
    goto LABEL_63;
  if (BYTE8(v105))
  {
    v74 = *(_QWORD *)(*(_QWORD *)&v106[0] + 8);
    v75 = *((_QWORD *)&v106[0] + 1) + LOBYTE(v106[1]);
    v76 = v74 - v75;
    if (v74 != v75)
    {
      v77 = (const void *)(**(_QWORD **)&v106[0] + v75);
LABEL_132:
      if (!CBB_add_bytes((uint64_t)&v98, v77, v76)
        || !CBB_add_u16((uint64_t)v97, 64768)
        || !CBB_add_u16_length_prefixed(v97, (uint64_t)v107)
        || !CBB_add_u8_length_prefixed(v107, (uint64_t)v96))
      {
        goto LABEL_63;
      }
      v78 = (char *)v104[0];
      if (BYTE8(v103))
      {
        v79 = (char *)v104[1] + LOBYTE(v104[2]);
        v78 = &v79[*(_QWORD *)v104[0]];
        v80 = (void *)(*((_QWORD *)v104[0] + 1) - (_QWORD)v79);
      }
      else
      {
        v80 = v104[1];
      }
      if (!CBB_add_bytes((uint64_t)v96, v78, (size_t)v80) || !CBB_flush(v97))
        goto LABEL_63;
    }
  }
  else
  {
    v76 = *((_QWORD *)&v106[0] + 1);
    if (*((_QWORD *)&v106[0] + 1))
    {
      v77 = *(const void **)&v106[0];
      goto LABEL_132;
    }
  }
  if (v99)
    v90 = v100[1] - (v101 + v102);
  else
    v90 = v101;
  if (!bssl::ext_pre_shared_key_add_clienthello(a1, &v98, a4, 1))
    goto LABEL_63;
  v91 = v100;
  if (v99)
  {
    v92 = v101 + v102;
    v93 = (_QWORD *)(v92 + *v100);
    v94 = v100[1] - v92;
    v91 = v93;
  }
  else
  {
    v94 = v101;
  }
  if (!CBB_add_bytes((uint64_t)v97, (char *)v91 + v90, v94 - v90)
    || !CBB_flush((uint64_t *)a2))
  {
    goto LABEL_63;
  }
  v43 = CBB_flush(a3) != 0;
  if (BYTE8(v103))
    goto LABEL_69;
LABEL_64:
  if (((uint64_t)v104[3] & 1) != 0 && v104[0])
  {
    v45 = (char *)v104[0] - 8;
    v44 = *((_QWORD *)v104[0] - 1);
    if (v44 != -8)
      bzero((char *)v104[0] - 8, v44 + 8);
    free(v45);
  }
LABEL_69:
  if (!BYTE8(v105) && (BYTE8(v106[1]) & 1) != 0 && *(_QWORD *)&v106[0])
  {
    v47 = (void *)(*(_QWORD *)&v106[0] - 8);
    v46 = *(_QWORD *)(*(_QWORD *)&v106[0] - 8);
    if (v46 != -8)
      bzero(v47, v46 + 8);
    free(v47);
  }
  return v43;
}

BOOL bssl::add_padding_extension(uint64_t *a1, size_t a2)
{
  _QWORD v5[6];
  void *v6;

  v5[0] = 0;
  if (CBB_add_space((uint64_t)a1, v5, 2)
    && (*(_BYTE *)(v5[0] + 1) = 21, *(_BYTE *)v5[0] = 0, CBB_flush(a1))
    && cbb_add_child((uint64_t)a1, (uint64_t)v5, 2u, 0)
    && (v6 = 0, CBB_add_space((uint64_t)v5, &v6, a2)))
  {
    if (a2)
      bzero(v6, a2);
    return CBB_flush(a1) != 0;
  }
  else
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3345);
    return 0;
  }
}

uint64_t bssl::ext_pre_shared_key_add_clienthello(uint64_t a1, uint64_t *a2, _BYTE *a3, int a4)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t result;
  void (*v11)(_QWORD, timeval *);
  const ssl_cipher_st *v12;
  __darwin_time_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  size_t v18;
  _BYTE v19[48];
  uint64_t v20[6];
  _BYTE v21[48];
  uint64_t v22[6];
  timeval v23;

  v4 = *(_QWORD **)a1;
  *a3 = 0;
  if (*(unsigned __int16 *)(a1 + 30) < 0x304u)
    return 1;
  v5 = v4[11];
  if (!v5)
    return 1;
  v6 = *(unsigned __int16 *)(v5 + 4);
  if (v6 - 769 > 3)
    return 1;
  result = 1;
  if (a4 != 2
    && v6 >= 0x304
    && ((*(_WORD *)(v4[6] + 220) & 0x2000) == 0
     || *(_DWORD *)(*(_QWORD *)(v5 + 200) + 36) == *(_DWORD *)(*(_QWORD *)(a1 + 1536) + 36)))
  {
    v11 = *(void (**)(_QWORD, timeval *))(v4[13] + 696);
    if (v11)
      v11(0, &v23);
    else
      gettimeofday(&v23, 0);
    v13 = v23.tv_sec & ~(v23.tv_sec >> 63);
    v14 = v4[11];
    v15 = *(unsigned __int16 *)(v14 + 4);
    if ((v15 - 769) >= 4)
    {
      if ((_DWORD)v15 == 65277)
      {
        v15 = 771;
      }
      else if ((_DWORD)v15 == 65279)
      {
        v15 = 770;
      }
      else
      {
        v15 = 0;
      }
    }
    v16 = *(_DWORD *)(v14 + 192);
    v17 = *(_DWORD *)(v14 + 368);
    v18 = *((unsigned int *)bssl::ssl_get_handshake_digest((bssl *)v15, *(_QWORD *)(v14 + 200), v12) + 1);
    v23.tv_sec = 0;
    result = CBB_add_space((uint64_t)a2, &v23, 2);
    if ((_DWORD)result)
    {
      *(_BYTE *)(v23.tv_sec + 1) = 41;
      *(_BYTE *)v23.tv_sec = 0;
      result = CBB_flush(a2);
      if ((_DWORD)result)
      {
        result = cbb_add_child((uint64_t)a2, (uint64_t)&v23, 2u, 0);
        if ((_DWORD)result)
        {
          result = CBB_flush(&v23.tv_sec);
          if ((_DWORD)result)
          {
            result = cbb_add_child((uint64_t)&v23, (uint64_t)v22, 2u, 0);
            if ((_DWORD)result)
            {
              result = CBB_flush(v22);
              if ((_DWORD)result)
              {
                result = cbb_add_child((uint64_t)v22, (uint64_t)v21, 2u, 0);
                if ((_DWORD)result)
                {
                  result = CBB_add_bytes((uint64_t)v21, *(const void **)(v4[11] + 232), *(_QWORD *)(v4[11] + 240));
                  if ((_DWORD)result)
                  {
                    result = CBB_add_u32((uint64_t)v22, v17 + 1000 * ((int)v13 - v16));
                    if ((_DWORD)result)
                    {
                      result = CBB_add_u16_length_prefixed(&v23.tv_sec, (uint64_t)v20);
                      if ((_DWORD)result)
                      {
                        result = CBB_add_u8_length_prefixed(v20, (uint64_t)v19);
                        if ((_DWORD)result)
                        {
                          result = CBB_add_zeros((uint64_t)v19, v18);
                          if ((_DWORD)result)
                          {
                            *a3 = 1;
                            return CBB_flush(a2) != 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL bssl::ssl_add_serverhello_tlsext(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;

  v4 = *a1;
  if (!CBB_flush((uint64_t *)a2) || !cbb_add_child(a2, (uint64_t)v17, 2u, 0))
  {
LABEL_8:
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3614);
    return 0;
  }
  v5 = 0;
  v6 = &off_24C0C7738;
  do
  {
    if (((*((_DWORD *)a1 + 94) >> v5) & 1) != 0 && !((unsigned int (*)(uint64_t *, _BYTE *))*v6)(a1, v17))
    {
      ERR_put_error(16, 0, 147, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3599);
      ERR_add_error_dataf("extension %u", v7, v8, v9, v10, v11, v12, v13, *((_WORD *)v6 - 16));
      goto LABEL_8;
    }
    ++v5;
    v6 += 5;
  }
  while (v5 != 25);
  if (*(_WORD *)(v4 + 16) != 772)
  {
    if (v17[8])
    {
      if (*(_QWORD *)(v18 + 8) == v19 + v20)
      {
LABEL_14:
        v15 = *(_QWORD *)a2;
        if (*(_QWORD *)a2)
        {
          v16 = (_QWORD *)(a2 + 16);
          if (*(_BYTE *)(a2 + 8))
            v16 = (_QWORD *)*v16;
          v16[1] = *(_QWORD *)(v15 + 24);
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)a2 = 0;
        }
      }
    }
    else if (!v19)
    {
      goto LABEL_14;
    }
  }
  return CBB_flush((uint64_t *)a2) != 0;
}

uint64_t bssl::ssl_parse_clienthello_tlsext(uint64_t a1, _QWORD *a2)
{
  bssl *v4;
  unint64_t v5;
  unsigned __int16 *v6;
  unint64_t v7;
  BOOL v8;
  unsigned int *v9;
  unsigned __int16 *v10;
  uint64_t (**v11)(_QWORD, unsigned __int8 *, int *);
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  int *v21;
  int v22;
  int v23;
  unint64_t v24;
  unsigned __int16 *v25;
  bssl *v26;
  uint64_t v27;
  uint64_t (*v28)(bssl *, int *, _QWORD);
  int v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  int v39;
  int v40[2];
  uint64_t v41;

  v4 = *(bssl **)a1;
  *(_DWORD *)(a1 + 376) = 0;
  v5 = a2[13];
  if (v5)
  {
    v6 = (unsigned __int16 *)a2[12];
    while (v5 >= 2)
    {
      if ((v5 & 0xFFFFFFFFFFFFFFFELL) == 2)
        break;
      v7 = __rev16(v6[1]);
      v8 = v5 - 4 >= v7;
      v5 = v5 - 4 - v7;
      if (!v8)
        break;
      v9 = (unsigned int *)__rev16(*v6);
      v10 = v6 + 2;
      *(_QWORD *)v40 = v6 + 2;
      v41 = v7;
      v39 = 0;
      v11 = (uint64_t (**)(_QWORD, unsigned __int8 *, int *))bssl::tls_extension_find((bssl *)&v39, v9);
      if (v11)
      {
        *(_DWORD *)(a1 + 376) |= 1 << v39;
        v38 = 50;
        if ((v11[3](a1, &v38, v40) & 1) == 0)
        {
          v12 = v38;
          ERR_put_error(16, 0, 149, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3646);
          ERR_add_error_dataf("extension %u", v13, v14, v15, v16, v17, v18, v19, (char)v9);
          goto LABEL_32;
        }
      }
      v6 = (unsigned __int16 *)((char *)v10 + v7);
      if (!v5)
        goto LABEL_11;
    }
    v12 = 50;
LABEL_32:
    bssl::ssl_send_alert(v4, (ssl_st *)2, v12);
  }
  else
  {
LABEL_11:
    for (i = 0; i != 25; ++i)
    {
      v22 = *(_DWORD *)(a1 + 376);
      if (((1 << i) & v22) == 0)
      {
        v23 = *((unsigned __int16 *)&bssl::kExtensions + 20 * i);
        if (v23 == 65281)
        {
          v24 = a2[9];
          if (v24)
          {
            v25 = (unsigned __int16 *)a2[8];
            while (v24 >= 2)
            {
              if (__rev16(*v25) == 255)
              {
                *(_QWORD *)v40 = &bssl::ssl_scan_clienthello_tlsext(bssl::SSL_HANDSHAKE *,ssl_early_callback_ctx const*,int *)::kFakeRenegotiateExtension;
                v41 = 1;
                *(_DWORD *)(a1 + 376) = (1 << i) | v22;
                v21 = v40;
                goto LABEL_13;
              }
              ++v25;
              v24 -= 2;
              if (!v24)
                break;
            }
          }
        }
        v21 = 0;
LABEL_13:
        LOBYTE(v39) = 50;
        if (((*((uint64_t (**)(uint64_t, int *, int *))&bssl::kExtensions + 5 * i + 3))(a1, &v39, v21) & 1) == 0)
        {
          ERR_put_error(16, 0, 164, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3674);
          ERR_add_error_dataf("extension %u", v31, v32, v33, v34, v35, v36, v37, v23);
          v12 = v39;
          goto LABEL_32;
        }
      }
    }
    v26 = *(bssl **)a1;
    v40[0] = 112;
    v27 = *((_QWORD *)v26 + 13);
    v28 = *(uint64_t (**)(bssl *, int *, _QWORD))(v27 + 496);
    if (!v28)
    {
      v27 = *((_QWORD *)v26 + 14);
      v28 = *(uint64_t (**)(bssl *, int *, _QWORD))(v27 + 496);
      if (!v28)
      {
LABEL_29:
        *(_DWORD *)(a1 + 1568) &= ~0x100u;
        return 1;
      }
    }
    v29 = v28(v26, v40, *(_QWORD *)(v27 + 504));
    if (v29 != 2)
    {
      if (v29 == 3)
        goto LABEL_29;
      return 1;
    }
    bssl::ssl_send_alert(v26, (ssl_st *)2, v40[0]);
    ERR_put_error(16, 0, 132, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3694);
  }
  return 0;
}

uint64_t bssl::ssl_parse_serverhello_tlsext(uint64_t a1, __int128 *a2)
{
  bssl *v3;
  unint64_t v4;
  int v5;
  bssl *v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unint64_t v19;
  BOOL v20;
  unsigned int *v21;
  unsigned __int16 *v22;
  uint64_t (**v23)(uint64_t, unsigned __int8 *, _QWORD *);
  int v24;
  uint64_t v25;
  bssl *v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  unint64_t v35;
  _QWORD *v36;
  int v37;
  int v38;
  int v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  int v56;
  _QWORD v57[2];
  __int128 v58;

  v3 = *(bssl **)a1;
  v58 = *a2;
  if (!bssl::tls1_check_duplicate_extensions((unsigned __int16 **)&v58))
    goto LABEL_4;
  v4 = *((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    if (*((_QWORD *)&v58 + 1) != 1)
    {
      v8 = 0;
      v18 = (unsigned __int16 *)v58;
      while (1)
      {
        if ((v4 & 0xFFFFFFFFFFFFFFFELL) == 2)
          goto LABEL_4;
        v19 = __rev16(v18[1]);
        v20 = v4 - 4 >= v19;
        v4 = v4 - 4 - v19;
        if (!v20)
          goto LABEL_4;
        v21 = (unsigned int *)__rev16(*v18);
        v22 = v18 + 2;
        v57[0] = v18 + 2;
        v57[1] = v19;
        v56 = 0;
        v23 = (uint64_t (**)(uint64_t, unsigned __int8 *, _QWORD *))bssl::tls_extension_find((bssl *)&v56, v21);
        if (!v23)
          break;
        v24 = 1 << v56;
        if (((1 << v56) & *(_DWORD *)(a1 + 376)) == 0)
        {
          v39 = 3737;
          v40 = "extension :%u";
          goto LABEL_38;
        }
        v55 = 50;
        if ((v23[2](a1, &v55, v57) & 1) == 0)
        {
          ERR_put_error(16, 0, 149, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3747);
          ERR_add_error_dataf("extension %u", v48, v49, v50, v51, v52, v53, v54, (char)v21);
          v5 = v55;
LABEL_5:
          v6 = v3;
LABEL_6:
          bssl::ssl_send_alert(v6, (ssl_st *)2, v5);
          return 0;
        }
        v8 |= v24;
        if (!v4)
          goto LABEL_8;
        v18 = (unsigned __int16 *)((char *)v22 + v19);
        if (v4 == 1)
          goto LABEL_4;
      }
      v39 = 3726;
      v40 = "extension %u";
LABEL_38:
      ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v39);
      ERR_add_error_dataf(v40, v41, v42, v43, v44, v45, v46, v47, (char)v21);
      v5 = 110;
      goto LABEL_5;
    }
LABEL_4:
    v5 = 50;
    goto LABEL_5;
  }
  v8 = 0;
LABEL_8:
  v9 = 0;
  v10 = off_24C0C7728;
  do
  {
    if (((v8 >> v9) & 1) == 0)
    {
      LOBYTE(v57[0]) = 50;
      if ((((uint64_t (*)(uint64_t, _QWORD *, _QWORD))*v10)(a1, v57, 0) & 1) == 0)
      {
        ERR_put_error(16, 0, 164, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 3760);
        ERR_add_error_dataf("extension %u", v11, v12, v13, v14, v15, v16, v17, *((_WORD *)v10 - 8));
        v5 = LOBYTE(v57[0]);
        goto LABEL_5;
      }
    }
    ++v9;
    v10 += 5;
  }
  while (v9 != 25);
  v25 = *(_QWORD *)(a1 + 1504);
  if (!v25 || (*(_BYTE *)(v25 + 424) & 0x40) == 0)
    return 1;
  v26 = *(bssl **)a1;
  v27 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  v28 = *(_QWORD *)(v27 + 496);
  if (!v28)
  {
    v37 = 308;
    v38 = 3803;
    goto LABEL_41;
  }
  v29 = *(_QWORD *)(a1 + 8);
  v30 = *(_QWORD *)(v29 + 136);
  if (!v30)
  {
LABEL_35:
    v37 = 259;
    v38 = 3812;
LABEL_41:
    ERR_put_error(16, 0, v37, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v38);
    v6 = v26;
    v5 = 47;
    goto LABEL_6;
  }
  v31 = *(const void **)(v27 + 488);
  v32 = *(_QWORD *)(v29 + 144) + 16;
  v33 = 32 * v30;
  while (v28 != *(_QWORD *)(v32 - 8) || memcmp(v31, *(const void **)(v32 - 16), v28))
  {
    v32 += 32;
    v33 -= 32;
    if (!v33)
      goto LABEL_35;
  }
  v34 = *(const void **)v32;
  v35 = *(_QWORD *)(v32 + 8);
  OPENSSL_free(*(_QWORD **)(v25 + 392));
  *(_QWORD *)(v25 + 392) = 0;
  *(_QWORD *)(v25 + 400) = 0;
  if (!v35)
    return 1;
  v36 = OPENSSL_malloc(v35);
  *(_QWORD *)(v25 + 392) = v36;
  if (!v36)
  {
    v6 = v26;
    v5 = 80;
    goto LABEL_6;
  }
  *(_QWORD *)(v25 + 400) = v35;
  memmove(v36, v34, v35);
  return 1;
}

uint64_t bssl::ssl_process_ticket(uint64_t *a1, ssl_ctx_st *a2, _BYTE *a3, void *a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  void *v9;
  uint64_t v13;
  ssl_session_st *method;
  unsigned int i;
  unsigned int v16;
  uint64_t *p_tlsext_tick_lifetime_hint;
  uint64_t tlsext_tick_lifetime_hint;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _BOOL4 v24;
  uint64_t v25;
  _BOOL4 v26;
  size_t v28;
  const void *v29;
  _QWORD *v30;
  size_t v32;
  const void *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  BOOL v45;
  ENGINE *v46;
  int v47;
  int v48;
  void (*v49)(unsigned __int8 *);
  char *v50;
  uint64_t v51;
  size_t v52;
  void *v53;
  size_t v54;
  ssl_session_st *v55;
  ssl_session_st *v56;
  unsigned __int8 *v57;
  ssl_session_st *v58;
  unsigned int j;
  unsigned int v60;
  uint64_t *v61;
  uint64_t v62;
  size_t v63;
  _QWORD *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  size_t v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  size_t v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  char *v78;
  pthread_rwlock_t *v80;
  void *data;
  void *v82;
  size_t v83;
  HMAC_CTX ctx;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v9 = a4;
  v87 = *MEMORY[0x24BDAC8D0];
  v13 = *a1;
  *a3 = 0;
  method = (ssl_session_st *)a2->method;
  a2->method = 0;
  if (method)
  {
    for (i = atomic_load((unsigned int *)method); i != -1; i = v16)
    {
      if (!i)
        goto LABEL_144;
      v16 = __ldaxr((unsigned int *)method);
      if (v16 == i)
      {
        if (!__stlxr(i - 1, (unsigned int *)method))
        {
          if (i == 1)
          {
            ssl_session_st::~ssl_session_st(method);
            tlsext_tick_lifetime_hint = method[-1].tlsext_tick_lifetime_hint;
            p_tlsext_tick_lifetime_hint = &method[-1].tlsext_tick_lifetime_hint;
            v20 = tlsext_tick_lifetime_hint + 8;
            if (tlsext_tick_lifetime_hint != -8)
              bzero(p_tlsext_tick_lifetime_hint, v20);
            free(p_tlsext_tick_lifetime_hint);
            v9 = a4;
          }
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v21 = *a1;
  v22 = 2;
  if ((*(_BYTE *)(*a1 + 129) & 0x40) == 0 && a7 <= 0x20)
  {
    v23 = *(unsigned __int16 *)(v13 + 16);
    data = v9;
    if (v23 - 769 >= 4)
    {
      v24 = 0;
      v82 = 0;
      v83 = 0;
      v25 = a1[195];
      v26 = v25 != 0;
    }
    else
    {
      v24 = v23 > 0x303;
      v82 = 0;
      v83 = 0;
      v25 = a1[195];
      v26 = v25 != 0;
      if (v23 >= 0x304 && v25 != 0)
      {
        if ((*((_BYTE *)a1 + 1570) & 8) == 0)
        {
          v28 = *(_QWORD *)(v25 + 136);
          if (v28)
          {
            if (v28 <= 0xFFFFFFFFFFFFFFF7
              && (v29 = *(const void **)(v25 + 128), (v30 = malloc_type_malloc(v28 + 8, 0x30772F57uLL)) != 0))
            {
              *v30 = v28;
              v82 = v30 + 1;
              v83 = v28;
              memmove(v30 + 1, v29, v28);
              v22 = 0;
              v24 = 1;
            }
            else
            {
              ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
              v82 = 0;
              v22 = 3;
              v24 = 1;
            }
            goto LABEL_96;
          }
          v24 = 1;
          if (!*(_BYTE *)(v25 + 144))
            goto LABEL_52;
          goto LABEL_49;
        }
        v26 = 1;
        v24 = 1;
        goto LABEL_36;
      }
    }
    if (!v24 && v26)
    {
      if ((*((_BYTE *)a1 + 1570) & 8) != 0)
        goto LABEL_52;
      v32 = *(_QWORD *)(v25 + 232);
      if (v32)
      {
        v33 = *(const void **)(v25 + 224);
        v83 = 0;
        if (v32 <= 0xFFFFFFFFFFFFFFF7 && (v34 = malloc_type_malloc(v32 + 8, 0x30772F57uLL)) != 0)
        {
          *v34 = v32;
          v82 = v34 + 1;
          v83 = v32;
          memmove(v34 + 1, v33, v32);
          v22 = 0;
          *a3 = *(_BYTE *)(v25 + 240);
        }
        else
        {
          ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
          v82 = 0;
          v22 = 3;
        }
        goto LABEL_96;
      }
      if (!*(_BYTE *)(v25 + 241))
      {
LABEL_52:
        v26 = 1;
        v35 = *(_QWORD *)(v13 + 112);
        if (!*(_QWORD *)(v35 + 712))
        {
LABEL_53:
          if (a5 < 0x20)
          {
            v22 = 2;
            goto LABEL_95;
          }
          if (*(_QWORD *)(v35 + 528))
          {
            v86 = 0;
            v85 = 0u;
            memset(&ctx.key[4], 0, 128);
            memset(&ctx, 0, 104);
            v39 = (*(uint64_t (**)(void))(*(_QWORD *)(v21 + 112) + 528))();
            if ((v39 & 0x80000000) == 0)
            {
              if (!v39)
              {
                v22 = 2;
                HMAC_CTX_cleanup(&ctx);
                v41 = *(_QWORD *)&ctx.key[4];
                if (!*(_QWORD *)&ctx.key[4])
                  goto LABEL_91;
                goto LABEL_89;
              }
              if (v39 == 2)
                *a3 = 1;
              v40 = (uint64_t)data;
              goto LABEL_61;
            }
            goto LABEL_81;
          }
          v42 = *(_QWORD *)(v21 + 112);
          if (!bssl::ssl_ctx_rotate_ticket_encryption_key((bssl *)v42, a2))
          {
            v22 = 3;
            goto LABEL_95;
          }
          if (!pthread_once(&EVP_aes_128_cbc_once, (void (*)(void))EVP_aes_128_cbc_init))
          {
            v86 = 0;
            v85 = 0u;
            memset(&ctx.key[4], 0, 128);
            memset(&ctx, 0, 104);
            v80 = (pthread_rwlock_t *)(v42 + 24);
            if (!pthread_rwlock_rdlock((pthread_rwlock_t *)(v42 + 24)))
            {
              v43 = *(_QWORD *)(v42 + 512);
              if (!v43
                || (*(_QWORD *)data == *(_QWORD *)v43
                  ? (v44 = *((_QWORD *)data + 1) == *(_QWORD *)(v43 + 8))
                  : (v44 = 0),
                    !v44))
              {
                v43 = *(_QWORD *)(v42 + 520);
                v22 = 2;
                if (!v43
                  || (*(_QWORD *)data == *(_QWORD *)v43
                    ? (v45 = *((_QWORD *)data + 1) == *(_QWORD *)(v43 + 8))
                    : (v45 = 0),
                      !v45))
                {
LABEL_87:
                  if (!pthread_rwlock_unlock(v80))
                  {
                    HMAC_CTX_cleanup(&ctx);
                    v41 = *(_QWORD *)&ctx.key[4];
                    if (!*(_QWORD *)&ctx.key[4])
                      goto LABEL_91;
LABEL_89:
                    v49 = *(void (**)(unsigned __int8 *))(v41 + 40);
                    if (v49)
                      v49(&ctx.key[4]);
LABEL_91:
                    v37 = *(char **)&ctx.key[20];
                    if (!*(_QWORD *)&ctx.key[20])
                      goto LABEL_95;
                    goto LABEL_92;
                  }
                  goto LABEL_144;
                }
              }
              if (pthread_once(&EVP_sha256_once, (void (*)(void))EVP_sha256_init))
                goto LABEL_144;
              HMAC_Init_ex(&ctx, (const void *)(v43 + 16), 16, (const EVP_MD *)&EVP_sha256_storage, 0);
              if (!v47)
              {
                v22 = 3;
                goto LABEL_87;
              }
              v48 = EVP_CipherInit_ex((EVP_CIPHER_CTX *)&ctx.key[4], (const EVP_CIPHER *)&EVP_aes_128_cbc_storage, v46, (const unsigned __int8 *)(v43 + 32), (const unsigned __int8 *)data + 16, 0);
              if (!pthread_rwlock_unlock(v80))
              {
                v40 = (uint64_t)data;
                if (v48)
                {
LABEL_61:
                  v22 = bssl::decrypt_ticket_with_cipher_ctx((unsigned __int8 **)&v82, (EVP_CIPHER_CTX *)&ctx.key[4], &ctx, v40, a5);
                  HMAC_CTX_cleanup(&ctx);
                  v41 = *(_QWORD *)&ctx.key[4];
                  if (!*(_QWORD *)&ctx.key[4])
                    goto LABEL_91;
                  goto LABEL_89;
                }
LABEL_81:
                v22 = 3;
                HMAC_CTX_cleanup(&ctx);
                v41 = *(_QWORD *)&ctx.key[4];
                if (!*(_QWORD *)&ctx.key[4])
                  goto LABEL_91;
                goto LABEL_89;
              }
            }
          }
LABEL_144:
          abort();
        }
LABEL_37:
        if (a5)
        {
          if (a5 > 0xFFFFFFFFFFFFFFF7 || (v36 = malloc_type_malloc(a5 + 8, 0x30772F57uLL)) == 0)
          {
            ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
            v22 = 3;
            goto LABEL_95;
          }
          *v36 = a5;
          v37 = (char *)(v36 + 1);
          v21 = *a1;
        }
        else
        {
          v37 = 0;
        }
        *(_QWORD *)&ctx.key[4] = 0;
        v38 = (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(v21 + 112) + 712) + 16))();
        if (!(_DWORD)v38)
        {
          v22 = 0;
          v82 = v37;
          v83 = *(_QWORD *)&ctx.key[4];
          goto LABEL_95;
        }
        v22 = v38;
        if (!v37)
        {
LABEL_95:
          if (!v26)
            goto LABEL_97;
LABEL_96:
          if ((*((_BYTE *)a1 + 1570) & 8) == 0)
          {
LABEL_97:
            if (!(_DWORD)v22)
            {
              v53 = v82;
              v54 = v83;
              goto LABEL_99;
            }
LABEL_139:
            if (v82)
            {
              v78 = (char *)v82 - 8;
              v77 = *((_QWORD *)v82 - 1);
              if (v77 != -8)
                bzero((char *)v82 - 8, v77 + 8);
              free(v78);
            }
            return v22;
          }
          if ((_DWORD)v22)
          {
            if ((_DWORD)v22 == 2)
            {
              if (v24)
                *(_BYTE *)(v25 + 144) = 1;
              else
                *(_BYTE *)(v25 + 241) = 1;
              v22 = 2;
            }
            goto LABEL_139;
          }
          v53 = v82;
          v54 = v83;
          if (v24)
          {
            v64 = (_QWORD *)(v25 + 128);
            v65 = *(_QWORD *)(v25 + 128);
            if (v65)
            {
              v67 = *(_QWORD *)(v65 - 8);
              v66 = (void *)(v65 - 8);
              v68 = v67 + 8;
              if (v67 != -8)
                bzero(v66, v68);
              free(v66);
            }
            *v64 = 0;
            *(_QWORD *)(v25 + 136) = 0;
            if (v54)
            {
              if (v54 <= 0xFFFFFFFFFFFFFFF7)
              {
                v69 = malloc_type_malloc(v54 + 8, 0x30772F57uLL);
                if (v69)
                {
                  *v69 = v54;
                  v70 = v69 + 1;
                  *(_QWORD *)(v25 + 128) = v70;
                  *(_QWORD *)(v25 + 136) = v54;
                  memmove(v70, v53, v54);
                  goto LABEL_99;
                }
              }
LABEL_138:
              ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
              *v64 = 0;
              v22 = 3;
              goto LABEL_139;
            }
          }
          else
          {
            v64 = (_QWORD *)(v25 + 224);
            v71 = *(_QWORD *)(v25 + 224);
            if (v71)
            {
              v73 = *(_QWORD *)(v71 - 8);
              v72 = (void *)(v71 - 8);
              v74 = v73 + 8;
              if (v73 != -8)
                bzero(v72, v74);
              free(v72);
            }
            *v64 = 0;
            *(_QWORD *)(v25 + 232) = 0;
            if (v54)
            {
              if (v54 > 0xFFFFFFFFFFFFFFF7)
                goto LABEL_138;
              v75 = malloc_type_malloc(v54 + 8, 0x30772F57uLL);
              if (!v75)
                goto LABEL_138;
              *v75 = v54;
              v76 = v75 + 1;
              *(_QWORD *)(v25 + 224) = v76;
              *(_QWORD *)(v25 + 232) = v54;
              memmove(v76, v53, v54);
            }
            *(_BYTE *)(v25 + 240) = *a3;
          }
LABEL_99:
          v55 = SSL_SESSION_from_bytes((unsigned __int8 *)v53, v54, *(_QWORD *)(v13 + 104));
          if (v55)
          {
            v56 = v55;
            v57 = &v55->master_key[40];
            memset(&ctx.key[36], 0, 76);
            *(_OWORD *)&ctx.key[4] = xmmword_208F25B20;
            *(_OWORD *)&ctx.key[20] = xmmword_208F25B30;
            *(_DWORD *)&ctx.key[112] = 32;
            SHA256_Update((SHA256_CTX *)&ctx.key[4], data, a5);
            sha256_final_impl(v57, *(unsigned int *)&ctx.key[112], (int32x2_t *)&ctx.key[4]);
            v56->master_key[39] = 32;
            v58 = (ssl_session_st *)a2->method;
            a2->method = (SSL_METHOD *)v56;
            if (v58)
            {
              for (j = atomic_load((unsigned int *)v58); j != -1; j = v60)
              {
                if (!j)
                  goto LABEL_144;
                v60 = __ldaxr((unsigned int *)v58);
                if (v60 == j)
                {
                  if (!__stlxr(j - 1, (unsigned int *)v58))
                  {
                    if (j == 1)
                    {
                      ssl_session_st::~ssl_session_st(v58);
                      v62 = v58[-1].tlsext_tick_lifetime_hint;
                      v61 = &v58[-1].tlsext_tick_lifetime_hint;
                      v63 = v62 + 8;
                      if (v62 != -8)
                        bzero(v61, v63);
                      free(v61);
                    }
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v22 = 0;
          }
          else
          {
            ERR_clear_error();
            v22 = 2;
          }
          goto LABEL_139;
        }
LABEL_92:
        v51 = *((_QWORD *)v37 - 1);
        v50 = v37 - 8;
        v52 = v51 + 8;
        if (v51 != -8)
          bzero(v50, v52);
        free(v50);
        goto LABEL_95;
      }
LABEL_49:
      v22 = 2;
      goto LABEL_96;
    }
LABEL_36:
    v35 = *(_QWORD *)(v13 + 112);
    if (!*(_QWORD *)(v35 + 712))
      goto LABEL_53;
    goto LABEL_37;
  }
  return v22;
}

uint64_t bssl::tls1_parse_peer_sigalgs(unint64_t *a1, uint64_t a2)
{
  unsigned int v2;

  v2 = *(unsigned __int16 *)(*a1 + 16);
  if (v2 - 769 >= 4)
  {
    if (v2 != 65277)
      return 1;
  }
  else if (v2 < 0x303)
  {
    return 1;
  }
  if (*(_QWORD *)(a2 + 8))
    return bssl::parse_u16_array(a2, a1 + 79);
  else
    return 0;
}

uint64_t bssl::parse_u16_array(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  size_t v9;
  const char *v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  const char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  const char *v27;
  unint64_t v28;
  int8x16_t *v29;
  unsigned int v34;
  int8x16x2_t v35;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 1) != 0)
  {
    v11 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/s"
          "sl/extensions.cc";
    v12 = 16;
    v13 = 137;
    v14 = 2528;
LABEL_21:
    ERR_put_error(v12, 0, v13, v11, v14);
    return 0;
  }
  v4 = v2 >> 1;
  if (v2 < 2)
  {
    v5 = 0;
LABEL_4:
    v6 = *a2;
    if (*a2)
    {
      v8 = *(_QWORD *)(v6 - 8);
      v7 = (void *)(v6 - 8);
      v9 = v8 + 8;
      if (v8 != -8)
        bzero(v7, v9);
      free(v7);
    }
    *a2 = v5;
    a2[1] = v4;
    return 1;
  }
  v15 = v2 & 0xFFFFFFFFFFFFFFFELL;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) > 0xFFFFFFFFFFFFFFF7
    || (v16 = *(const char **)a1, (v17 = malloc_type_malloc(v15 + 8, 0x30772F57uLL)) == 0))
  {
    v11 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v12 = 14;
    v13 = 65;
    v14 = 247;
    goto LABEL_21;
  }
  v18 = v17;
  *v17 = v15;
  v5 = (unint64_t)(v17 + 1);
  if (v4 <= 1)
    v19 = 1;
  else
    v19 = v4;
  v20 = v19 - 1;
  if (v4 >= v19 - 1)
    v21 = v19 - 1;
  else
    v21 = v4;
  if (v21 >= 0x10)
  {
    if (v4 < v20)
      v20 = v4;
    v23 = 2 * v20;
    if (v5 >= (unint64_t)&v16[v23 + 2] || v16 >= (const char *)v17 + v23 + 10)
    {
      v25 = v21 + 1;
      v26 = v25 & 0xF;
      if ((v25 & 0xF) == 0)
        v26 = 16;
      v22 = v25 - v26;
      v27 = &v16[2 * v22];
      v28 = v22;
      v29 = (int8x16_t *)(v17 + 1);
      do
      {
        v35 = vld2q_s8(v16);
        v16 += 32;
        __asm { SHLL2           V2.8H, V0.16B, #8 }
        *v29 = vorrq_s8((int8x16_t)vshll_n_s8(*(int8x8_t *)v35.val[0].i8, 8uLL), (int8x16_t)vmovl_u8(*(uint8x8_t *)v35.val[1].i8));
        v29[1] = vorrq_s8(_Q2, (int8x16_t)vmovl_high_u8((uint8x16_t)v35.val[1]));
        v29 += 2;
        v28 -= 16;
      }
      while (v28);
      v16 = v27;
    }
    else
    {
      v22 = 0;
    }
  }
  else
  {
    v22 = 0;
  }
  while (v4 != v22)
  {
    v34 = *(unsigned __int16 *)v16;
    v16 += 2;
    *((_WORD *)v17 + v22++ + 4) = bswap32(v34) >> 16;
    if (v19 == v22)
      goto LABEL_4;
  }
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2538);
  if (*v18 != -8)
    bzero(v18, *v18 + 8);
  free(v18);
  return 0;
}

uint64_t bssl::tls1_choose_signature_algorithm(bssl **a1, uint64_t a2, __int16 *a3)
{
  bssl *v5;
  unsigned int v6;
  bssl *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  __int16 *v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  int v21;
  __int16 v22;

  v5 = *a1;
  v6 = *((unsigned __int16 *)*a1 + 8);
  if (v6 - 769 < 4)
  {
    if (v6 > 0x302)
    {
      if (*(_DWORD *)(a2 + 4) == 1)
        goto LABEL_4;
      goto LABEL_16;
    }
LABEL_27:
    v21 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4);
    if (v21 == 6)
    {
      v22 = -255;
    }
    else
    {
      if (v21 != 408)
      {
        v20 = 4122;
LABEL_33:
        ERR_put_error(16, 0, 253, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v20);
        return 0;
      }
      v22 = 515;
    }
    *a3 = v22;
    return 1;
  }
  if (v6 != 65277)
    goto LABEL_27;
  v6 = 771;
  if (*(_DWORD *)(a2 + 4) == 1)
  {
LABEL_4:
    v7 = a1[83];
    v8 = (uint64_t)a1[84];
    v9 = *(_QWORD *)(a2 + 40);
    if (v9)
      goto LABEL_5;
    goto LABEL_23;
  }
LABEL_16:
  v16 = a1[80] == 0;
  v17 = v6 == 771;
  if (v17 && v16)
    v8 = 2;
  else
    v8 = (uint64_t)a1[80];
  if (v17 && v16)
    v7 = (bssl *)&bssl::tls1_choose_signature_algorithm(bssl::SSL_HANDSHAKE *,ssl_credential_st const*,unsigned short *)::kTLS12Default;
  else
    v7 = a1[79];
  v9 = *(_QWORD *)(a2 + 40);
  if (v9)
  {
LABEL_5:
    v10 = *(__int16 **)(a2 + 32);
    if (v8)
      goto LABEL_6;
    goto LABEL_24;
  }
LABEL_23:
  v10 = &bssl::kSignSignatureAlgorithms;
  v9 = 12;
  if (!v8)
  {
LABEL_24:
    v18 = 2 * v9;
    do
    {
      v19 = (unsigned __int16)*v10++;
      bssl::ssl_pkey_supports_algorithm(v5, *(const ssl_st **)(a2 + 8), (evp_pkey_st *)v19);
      v18 -= 2;
    }
    while (v18);
LABEL_26:
    v20 = 4158;
    goto LABEL_33;
  }
LABEL_6:
  v11 = &v10[v9];
  while (1)
  {
    v12 = (unsigned __int16)*v10;
    bssl::ssl_pkey_supports_algorithm(v5, *(const ssl_st **)(a2 + 8), (evp_pkey_st *)(unsigned __int16)*v10);
    if (v13)
    {
      v14 = 2 * v8;
      v15 = (char *)v7;
      while (*(unsigned __int16 *)v15 != v12)
      {
        v15 += 2;
        v14 -= 2;
        if (!v14)
        {
          v15 = (char *)v7 + 2 * v8;
          break;
        }
      }
      if (v8 != (v15 - (char *)v7) >> 1)
        break;
    }
    if (++v10 == v11)
      goto LABEL_26;
  }
  *a3 = v12;
  return 1;
}

uint64_t bssl::tls1_verify_channel_id(bssl *a1, uint64_t a2)
{
  bssl *v2;
  unint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  BOOL v8;
  ECDSA_SIG *v10;
  _QWORD *v11;
  const BIGNUM *v12;
  _QWORD *v13;
  const BIGNUM *v14;
  uint64_t v15;
  unint64_t *d;
  unint64_t *v18;
  EC_KEY *v19;
  EC_POINT *v20;
  EC_POINT *v21;
  unint64_t *v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int flags;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  size_t v31;
  int *p_neg;
  uint64_t v33;
  size_t v34;
  int v35;
  unint64_t *v36;
  unint64_t *v37;
  uint64_t v38;
  size_t v39;
  int *v40;
  uint64_t v41;
  size_t v42;
  unint64_t v43;
  unsigned __int8 v44[64];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v2 = *(bssl **)a1;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 < 2
    || (v3 & 0xFFFFFFFFFFFFFFFELL) == 2
    || (v4 = *(unsigned __int16 **)(a2 + 8), v5 = v3 - 4, v6 = __rev16(v4[1]), v5 < v6)
    || v5 != 128
    || ((v7 = __rev16(*v4), v6 == 128) ? (v8 = v7 == 30032) : (v8 = 0), !v8))
  {
    ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 4173);
    bssl::ssl_send_alert(v2, (ssl_st *)2, 50);
    return 0;
  }
  if (pthread_once(&EC_group_p256_once, (void (*)(void))EC_group_p256_init))
    abort();
  v10 = ECDSA_SIG_new();
  v11 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v11)
  {
    *v11 = 24;
    v11[1] = 0;
    v12 = (const BIGNUM *)(v11 + 1);
    v11[2] = 0;
    v11[3] = 0x100000000;
    v13 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (v13)
      goto LABEL_13;
LABEL_18:
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v14 = 0;
    if (!v10)
      goto LABEL_33;
LABEL_19:
    if (!v12)
      goto LABEL_33;
    if (!v14)
    {
      v15 = 0;
      goto LABEL_51;
    }
    if (bn_wexpand((uint64_t)v12, 4uLL))
    {
      v12->top = 4;
      v12->neg = 0;
      d = v12->d;
      *d = bswap64(*(_QWORD *)(v4 + 14));
      d[1] = bswap64(*(_QWORD *)(v4 + 10));
      d[2] = bswap64(*(_QWORD *)(v4 + 6));
      d[3] = bswap64(*(_QWORD *)(v4 + 2));
      if (bn_wexpand((uint64_t)v14, 4uLL))
      {
        v14->top = 4;
        v14->neg = 0;
        v18 = v14->d;
        *v18 = bswap64(*(_QWORD *)(v4 + 30));
        v18[1] = bswap64(*(_QWORD *)(v4 + 26));
        v18[2] = bswap64(*(_QWORD *)(v4 + 22));
        v18[3] = bswap64(*(_QWORD *)(v4 + 18));
        if (BN_bin2bn((const unsigned __int8 *)v4 + 68, 32, v10->r))
        {
          if (BN_bin2bn((const unsigned __int8 *)v4 + 100, 32, v10->s))
          {
            v19 = EC_KEY_new();
            v20 = EC_POINT_new((const EC_GROUP *)EC_group_p256_storage);
            v21 = v20;
            if (v19)
            {
              if (!v20)
              {
                v15 = 0;
                goto LABEL_67;
              }
              if (EC_POINT_set_affine_coordinates_GFp((const EC_GROUP *)EC_group_p256_storage, v20, v12, v14, 0))
              {
                if (EC_KEY_set_group(v19, (const EC_GROUP *)EC_group_p256_storage))
                {
                  if (EC_KEY_set_public_key(v19, v21))
                  {
                    v43 = 0;
                    if (bssl::tls1_channel_id_hash(a1, (bssl::SSL_HANDSHAKE *)v44, (unsigned __int8 *)&v43, v22))
                    {
                      if (ecdsa_do_verify_no_self_test(v44, v43, (uint64_t *)v10, (uint64_t *)v19))
                      {
                        v23 = (_OWORD *)*((_QWORD *)v2 + 6);
                        v24 = *(_OWORD *)(v4 + 2);
                        v25 = *(_OWORD *)(v4 + 10);
                        v26 = *(_OWORD *)(v4 + 26);
                        v23[34] = *(_OWORD *)(v4 + 18);
                        v23[35] = v26;
                        v23[32] = v24;
                        v23[33] = v25;
                        *(_WORD *)(*((_QWORD *)v2 + 6) + 220) |= 0x100u;
                        v15 = 1;
LABEL_66:
                        EC_POINT_free(v21);
LABEL_67:
                        EC_KEY_free(v19);
                        flags = v14->flags;
                        if ((flags & 2) != 0)
                          goto LABEL_45;
LABEL_41:
                        v28 = v14->d;
                        if (v14->d)
                        {
                          v30 = *(v28 - 1);
                          v29 = v28 - 1;
                          v31 = v30 + 8;
                          if (v30 != -8)
                            bzero(v29, v31);
                          free(v29);
                          flags = v14->flags;
                        }
                        goto LABEL_45;
                      }
                      ERR_put_error(16, 0, 129, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 4215);
                      bssl::ssl_send_alert(v2, (ssl_st *)2, 51);
                    }
                  }
                }
              }
              v15 = 0;
              goto LABEL_66;
            }
            if (v20)
            {
              EC_POINT_free(v20);
              v15 = 0;
              flags = v14->flags;
              if ((flags & 2) != 0)
                goto LABEL_45;
              goto LABEL_41;
            }
          }
        }
      }
    }
    v15 = 0;
    goto LABEL_40;
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  v12 = 0;
  v13 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (!v13)
    goto LABEL_18;
LABEL_13:
  *v13 = 24;
  v13[1] = 0;
  v14 = (const BIGNUM *)(v13 + 1);
  v13[2] = 0;
  v13[3] = 0x100000000;
  if (v10)
    goto LABEL_19;
LABEL_33:
  v15 = 0;
  if (!v14)
    goto LABEL_50;
LABEL_40:
  flags = v14->flags;
  if ((flags & 2) == 0)
    goto LABEL_41;
LABEL_45:
  if ((flags & 1) != 0)
  {
    v33 = *(_QWORD *)&v14[-1].neg;
    p_neg = &v14[-1].neg;
    v34 = v33 + 8;
    if (v33 != -8)
      bzero(p_neg, v34);
    free(p_neg);
  }
  else
  {
    v14->d = 0;
  }
LABEL_50:
  if (v12)
  {
LABEL_51:
    v35 = v12->flags;
    if ((v35 & 2) == 0)
    {
      v36 = v12->d;
      if (v12->d)
      {
        v38 = *(v36 - 1);
        v37 = v36 - 1;
        v39 = v38 + 8;
        if (v38 != -8)
          bzero(v37, v39);
        free(v37);
        v35 = v12->flags;
      }
    }
    if ((v35 & 1) != 0)
    {
      v41 = *(_QWORD *)&v12[-1].neg;
      v40 = &v12[-1].neg;
      v42 = v41 + 8;
      if (v41 != -8)
        bzero(v40, v42);
      free(v40);
    }
    else
    {
      v12->d = 0;
    }
  }
  if (v10)
    BN_BLINDING_free(v10);
  return v15;
}

uint64_t bssl::tls1_channel_id_hash(bssl *this, bssl::SSL_HANDSHAKE *a2, unsigned __int8 *a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t cert_verify_signature_input;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  size_t len;
  void *data;
  size_t v15;
  SHA256_CTX c;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)this;
  if (*(_WORD *)(*(_QWORD *)this + 16) == 772)
  {
    data = 0;
    v15 = 0;
    cert_verify_signature_input = bssl::tls13_get_cert_verify_signature_input((uint64_t)this, (uint64_t *)&data, 2u);
    if ((_DWORD)cert_verify_signature_input)
    {
      memset(&c.Nl, 0, 76);
      *(_OWORD *)c.h = xmmword_208F25B20;
      *(_OWORD *)&c.h[4] = xmmword_208F25B30;
      c.md_len = 32;
      SHA256_Update(&c, data, v15);
      sha256_final_impl(a2, c.md_len, (int32x2_t *)&c);
      *(_QWORD *)a3 = 32;
    }
    if (data)
    {
      v10 = (char *)data - 8;
      v9 = *((_QWORD *)data - 1);
      if (v9 != -8)
        bzero(v10, v9 + 8);
      free(v10);
    }
  }
  else
  {
    memset(&c.Nl, 0, 76);
    *(_OWORD *)c.h = xmmword_208F25B20;
    *(_OWORD *)&c.h[4] = xmmword_208F25B30;
    c.md_len = 32;
    SHA256_Update(&c, "TLS Channel ID signature", 0x19uLL);
    if (*(_QWORD *)(v7 + 88))
    {
      SHA256_Update(&c, "Resumption", 0xBuLL);
      v11 = *(_QWORD *)(v7 + 88);
      if (!*(_BYTE *)(v11 + 360))
      {
        ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 4288);
        return 0;
      }
      SHA256_Update(&c, (const void *)(v11 + 296), *(unsigned __int8 *)(v11 + 360));
    }
    len = 0;
    cert_verify_signature_input = bssl::SSLTranscript::GetHash((bssl *)((char *)this + 408), (unsigned __int8 *)&data, &len);
    if ((_DWORD)cert_verify_signature_input)
    {
      SHA256_Update(&c, &data, len);
      sha256_final_impl(a2, c.md_len, (int32x2_t *)&c);
      *(_QWORD *)a3 = 32;
    }
  }
  return cert_verify_signature_input;
}

BOOL bssl::tls1_write_channel_id(bssl *a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  const EC_GROUP **v7;
  _QWORD *v8;
  BIGNUM *v9;
  _QWORD *v10;
  BIGNUM *v11;
  ECDSA_SIG *v12;
  uint64_t *v13;
  _BOOL8 v14;
  int flags;
  unint64_t *d;
  unint64_t *v18;
  uint64_t v19;
  size_t v20;
  int v21;
  unint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  size_t v25;
  int *v26;
  uint64_t v27;
  size_t v28;
  int v29;
  unint64_t *v30;
  unint64_t *v31;
  uint64_t v32;
  size_t v33;
  int *v34;
  uint64_t v35;
  size_t v36;
  int *p_neg;
  uint64_t v38;
  size_t v39;
  _QWORD v40[6];
  int dgst_len[2];
  unsigned __int8 dgst[64];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)dgst_len = 0;
  if (!bssl::tls1_channel_id_hash(a1, (bssl::SSL_HANDSHAKE *)dgst, (unsigned __int8 *)dgst_len, a4))
    return 0;
  v6 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 112);
  if (*(_DWORD *)(v6 + 4) != 408)
  {
    ERR_put_error(6, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/p_ec_asn1.c", 320);
    goto LABEL_19;
  }
  v7 = *(const EC_GROUP ***)(v6 + 8);
  if (!v7)
  {
LABEL_19:
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 4234);
    return 0;
  }
  v8 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
  if (v8)
  {
    *v8 = 24;
    v8[1] = 0;
    v9 = (BIGNUM *)(v8 + 1);
    v8[2] = 0;
    v8[3] = 0x100000000;
    v10 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (v10)
      goto LABEL_6;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v9 = 0;
    v10 = malloc_type_malloc(0x20uLL, 0x30772F57uLL);
    if (v10)
    {
LABEL_6:
      *v10 = 24;
      v10[1] = 0;
      v11 = (BIGNUM *)(v10 + 1);
      v10[2] = 0;
      v10[3] = 0x100000000;
      if (v9)
        goto LABEL_7;
      goto LABEL_24;
    }
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  v11 = 0;
  if (!v9)
  {
LABEL_24:
    if (v11)
    {
      flags = v11->flags;
      if ((flags & 2) == 0)
      {
        d = v11->d;
        if (v11->d)
        {
          v19 = *(d - 1);
          v18 = d - 1;
          v20 = v19 + 8;
          if (v19 != -8)
            bzero(v18, v20);
          free(v18);
          flags = v11->flags;
        }
      }
      if ((flags & 1) == 0)
      {
        v14 = 0;
        v11->d = 0;
        return v14;
      }
      v38 = *(_QWORD *)&v11[-1].neg;
      p_neg = &v11[-1].neg;
      v39 = v38 + 8;
      if (v38 != -8)
        bzero(p_neg, v39);
      free(p_neg);
    }
    return 0;
  }
LABEL_7:
  if (v11)
  {
    if (EC_POINT_get_affine_coordinates_GFp(*v7, v7[1], v9, v11, 0)
      && (v12 = ECDSA_do_sign(dgst, dgst_len[0], (EC_KEY *)v7)) != 0)
    {
      v13 = (uint64_t *)v12;
      v40[0] = 0;
      v14 = CBB_add_space((uint64_t)a2, v40, 2)
         && (*(_BYTE *)(v40[0] + 1) = 80, *(_BYTE *)v40[0] = 117, CBB_flush(a2))
         && cbb_add_child((uint64_t)a2, (uint64_t)v40, 2u, 0)
         && BN_bn2cbb_padded((uint64_t)v40, 0x20uLL, (uint64_t)v9)
         && BN_bn2cbb_padded((uint64_t)v40, 0x20uLL, (uint64_t)v11)
         && BN_bn2cbb_padded((uint64_t)v40, 0x20uLL, *v13)
         && BN_bn2cbb_padded((uint64_t)v40, 0x20uLL, v13[1])
         && CBB_flush(a2) != 0;
      BN_BLINDING_free((ECDSA_SIG *)v13);
      v21 = v11->flags;
      if ((v21 & 2) == 0)
      {
LABEL_37:
        v22 = v11->d;
        if (v11->d)
        {
          v24 = *(v22 - 1);
          v23 = v22 - 1;
          v25 = v24 + 8;
          if (v24 != -8)
            bzero(v23, v25);
          free(v23);
          v21 = v11->flags;
        }
      }
    }
    else
    {
      v14 = 0;
      v21 = v11->flags;
      if ((v21 & 2) == 0)
        goto LABEL_37;
    }
    if ((v21 & 1) != 0)
    {
      v27 = *(_QWORD *)&v11[-1].neg;
      v26 = &v11[-1].neg;
      v28 = v27 + 8;
      if (v27 != -8)
        bzero(v26, v28);
      free(v26);
    }
    else
    {
      v11->d = 0;
    }
    goto LABEL_46;
  }
  v14 = 0;
LABEL_46:
  v29 = v9->flags;
  if ((v29 & 2) == 0)
  {
    v30 = v9->d;
    if (v9->d)
    {
      v32 = *(v30 - 1);
      v31 = v30 - 1;
      v33 = v32 + 8;
      if (v32 != -8)
        bzero(v31, v33);
      free(v31);
      v29 = v9->flags;
    }
  }
  if ((v29 & 1) != 0)
  {
    v35 = *(_QWORD *)&v9[-1].neg;
    v34 = &v9[-1].neg;
    v36 = v35 + 8;
    if (v35 != -8)
      bzero(v34, v36);
    free(v34);
  }
  else
  {
    v9->d = 0;
  }
  return v14;
}

uint64_t bssl::compare_uint16_t(bssl *this, unsigned __int16 *a2, const void *a3)
{
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  _BOOL4 v6;

  v3 = *(unsigned __int16 *)this;
  v4 = *a2;
  v5 = v3 >= v4;
  v6 = v3 > v4;
  if (v5)
    return v6;
  else
    return 0xFFFFFFFFLL;
}

uint64_t bssl::ext_sni_add_clienthello(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  const void *v6;
  size_t v7;
  uint64_t result;
  _QWORD v9[6];
  uint64_t v10[6];
  uint64_t v11[6];
  void *v12;

  if (a4 == 2)
  {
    v5 = a1[191];
    v6 = *(const void **)(v5 + 32);
    v7 = *(_QWORD *)(v5 + 40);
    v11[0] = 0;
    result = CBB_add_space((uint64_t)a2, v11, 2);
    if (!(_DWORD)result)
      return result;
    goto LABEL_6;
  }
  v6 = *(const void **)(*a1 + 144);
  if (!v6)
    return 1;
  v7 = strlen(*(const char **)(*a1 + 144));
  v11[0] = 0;
  result = CBB_add_space((uint64_t)a2, v11, 2);
  if ((_DWORD)result)
  {
LABEL_6:
    *(_BYTE *)(v11[0] + 1) = 0;
    *(_BYTE *)v11[0] = 0;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v11, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v11);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v11, (uint64_t)v10, 2u, 0);
          if ((_DWORD)result)
          {
            v9[0] = 0;
            result = CBB_add_space((uint64_t)v10, v9, 1);
            if ((_DWORD)result)
            {
              *(_BYTE *)v9[0] = 0;
              result = CBB_flush(v10);
              if ((_DWORD)result)
              {
                result = cbb_add_child((uint64_t)v10, (uint64_t)v9, 2u, 0);
                if ((_DWORD)result)
                {
                  v12 = 0;
                  result = CBB_add_space((uint64_t)v9, &v12, v7);
                  if ((_DWORD)result)
                  {
                    if (v7)
                      memcpy(v12, v6, v7);
                    return CBB_flush(a2) != 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL bssl::ext_sni_parse_serverhello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return !a3 || *(_QWORD *)(a3 + 8) == 0;
}

uint64_t bssl::ext_sni_parse_clienthello()
{
  return 1;
}

uint64_t bssl::ext_sni_add_serverhello(_BYTE *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _BYTE *v5;

  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 220) & 0x40) != 0)
    return 1;
  if ((a1[1569] & 1) == 0)
    return 1;
  v5 = 0;
  result = CBB_add_space(a2, &v5, 2);
  if ((_DWORD)result)
  {
    v5[1] = 0;
    *v5 = 0;
    v5 = 0;
    v4 = CBB_add_space(a2, &v5, 2);
    result = v4 != 0;
    if (v4)
    {
      v5[1] = 0;
      *v5 = 0;
    }
  }
  return result;
}

uint64_t bssl::ext_ech_add_clienthello(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t result;
  int v6;
  const void *v8;
  size_t v9;
  _QWORD v10[6];
  _BYTE *v11;

  if (a4 == 1)
  {
    v10[0] = 0;
    result = CBB_add_space((uint64_t)a2, v10, 2);
    if ((_DWORD)result)
    {
      *(_BYTE *)(v10[0] + 1) = 13;
      *(_BYTE *)v10[0] = -2;
      v10[0] = 0;
      result = CBB_add_space((uint64_t)a2, v10, 2);
      if ((_DWORD)result)
      {
        *(_BYTE *)(v10[0] + 1) = 1;
        *(_BYTE *)v10[0] = 0;
        v10[0] = 0;
        v6 = CBB_add_space((uint64_t)a2, v10, 1);
        result = v6 != 0;
        if (v6)
          *(_BYTE *)v10[0] = 1;
      }
    }
  }
  else if (*(_QWORD *)(a1 + 560))
  {
    v10[0] = 0;
    result = CBB_add_space((uint64_t)a2, v10, 2);
    if ((_DWORD)result)
    {
      *(_BYTE *)(v10[0] + 1) = 13;
      *(_BYTE *)v10[0] = -2;
      result = CBB_flush(a2);
      if ((_DWORD)result)
      {
        result = cbb_add_child((uint64_t)a2, (uint64_t)v10, 2u, 0);
        if ((_DWORD)result)
        {
          v11 = 0;
          result = CBB_add_space((uint64_t)v10, &v11, 1);
          if ((_DWORD)result)
          {
            *v11 = 0;
            v8 = *(const void **)(a1 + 552);
            v9 = *(_QWORD *)(a1 + 560);
            v11 = 0;
            result = CBB_add_space((uint64_t)v10, &v11, v9);
            if ((_DWORD)result)
            {
              if (v9)
                memcpy(v11, v8, v9);
              return CBB_flush(a2) != 0;
            }
          }
        }
      }
    }
  }
  else
  {
    return 1;
  }
  return result;
}

uint64_t bssl::ext_ech_parse_serverhello(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD *v8;
  size_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  _QWORD *v15;
  void *v16;

  if (!a3)
    return 1;
  v5 = *a1;
  if (*(_WORD *)(*a1 + 16) == 772 && *(_DWORD *)(*(_QWORD *)(v5 + 48) + 216) != 1)
  {
    if ((bssl::ssl_is_valid_ech_config_list(*(unsigned __int16 **)a3, *(_QWORD *)(a3 + 8)) & 1) != 0)
    {
      if (*(_DWORD *)(*(_QWORD *)(v5 + 48) + 216) != 2)
        return 1;
      v8 = a1 + 71;
      v10 = *(unsigned __int16 **)a3;
      v9 = *(_QWORD *)(a3 + 8);
      v11 = a1[71];
      if (v11)
      {
        v13 = *(_QWORD *)(v11 - 8);
        v12 = (void *)(v11 - 8);
        v14 = v13 + 8;
        if (v13 != -8)
          bzero(v12, v14);
        free(v12);
      }
      *v8 = 0;
      a1[72] = 0;
      if (v9)
      {
        if (v9 <= 0xFFFFFFFFFFFFFFF7 && (v15 = malloc_type_malloc(v9 + 8, 0x30772F57uLL)) != 0)
        {
          *v15 = v9;
          v16 = v15 + 1;
          a1[71] = v16;
          a1[72] = v9;
          memmove(v16, v10, v9);
          return 1;
        }
        else
        {
          ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
          result = 0;
          *v8 = 0;
          *a2 = 80;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      result = 0;
      *a2 = 50;
    }
  }
  else
  {
    *a2 = 110;
    ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 625);
    return 0;
  }
  return result;
}

uint64_t bssl::ext_ech_parse_clienthello(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;

  if (a3)
  {
    v3 = a3[1];
    if (!v3)
      return 0;
    v4 = *a3;
    v5 = v3 - 1;
    ++*a3;
    a3[1] = v5;
    v6 = *v4;
    if (v6)
    {
      if (v6 != 1 || v5 != 0)
        return 0;
      *(_DWORD *)(a1 + 1568) |= 1u;
    }
  }
  return 1;
}

uint64_t bssl::ext_ech_add_serverhello(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t i;
  uint64_t v9;
  const void *v10;
  size_t v11;
  _BYTE v12[48];
  uint64_t v13[6];
  void *v14;

  if (*(_WORD *)(*a1 + 16) != 772)
    return 1;
  if (*(_DWORD *)(*(_QWORD *)(*a1 + 48) + 216) == 1)
    return 1;
  if (!a1[190])
    return 1;
  v13[0] = 0;
  result = CBB_add_space((uint64_t)a2, v13, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v13[0] + 1) = 13;
    *(_BYTE *)v13[0] = -2;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v13, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v13);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v13, (uint64_t)v12, 2u, 0);
          if ((_DWORD)result)
          {
            v5 = a1[190];
            v6 = *(_QWORD *)(v5 + 8);
            if (v6)
            {
              v7 = *(uint64_t **)(v5 + 16);
              for (i = 8 * v6; i; i -= 8)
              {
                v9 = *v7;
                if (*(_BYTE *)(*v7 + 144))
                {
                  v10 = *(const void **)v9;
                  v11 = *(_QWORD *)(v9 + 8);
                  v14 = 0;
                  result = CBB_add_space((uint64_t)v12, &v14, v11);
                  if (!(_DWORD)result)
                    return result;
                  if (v11)
                    memcpy(v14, v10, v11);
                }
                ++v7;
              }
            }
            return CBB_flush(a2) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ems_add_clienthello(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v9;
  _QWORD v10[5];

  result = 1;
  if (a4 != 1)
  {
    v10[3] = v4;
    v10[4] = v5;
    if (*(unsigned __int16 *)(a1 + 28) <= 0x303u)
    {
      v10[0] = 0;
      result = CBB_add_space(a2, v10, 2);
      if ((_DWORD)result)
      {
        *(_BYTE *)(v10[0] + 1) = 23;
        *(_BYTE *)v10[0] = 0;
        v10[0] = 0;
        v9 = CBB_add_space(a2, v10, 2);
        result = v9 != 0;
        if (v9)
        {
          *(_BYTE *)(v10[0] + 1) = 0;
          *(_BYTE *)v10[0] = 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ems_parse_serverhello(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a1;
  if (a3)
  {
    if (*(_WORD *)(v4 + 16) == 772 || *(_QWORD *)(a3 + 8))
      return 0;
    *((_DWORD *)a1 + 392) |= 0x10000u;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 464);
  if (!v6 || (HIWORD(*((_DWORD *)a1 + 392)) & 1) == (*(_BYTE *)(v6 + 424) & 1))
    return 1;
  ERR_put_error(16, 0, 263, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 899);
  result = 0;
  *a2 = 47;
  return result;
}

uint64_t bssl::ext_ems_parse_clienthello(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;

  v3 = *(unsigned __int16 *)(*(_QWORD *)a1 + 16);
  if (v3 - 769 < 4)
  {
LABEL_7:
    if (!a3)
      return 1;
    goto LABEL_8;
  }
  if (v3 == 65277)
  {
    v3 = 771;
    goto LABEL_7;
  }
  if (v3 == 65279)
  {
    v3 = 770;
    if (!a3)
      return 1;
  }
  else
  {
    v3 = 0;
    if (!a3)
      return 1;
  }
LABEL_8:
  if (v3 <= 0x303)
  {
    if (*(_QWORD *)(a3 + 8))
      return 0;
    a1[392] |= 0x10000u;
  }
  return 1;
}

uint64_t bssl::ext_ems_add_serverhello(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _BYTE *v5;

  if ((*(_BYTE *)(a1 + 1570) & 1) == 0)
    return 1;
  v5 = 0;
  result = CBB_add_space(a2, &v5, 2);
  if ((_DWORD)result)
  {
    v5[1] = 23;
    *v5 = 0;
    v5 = 0;
    v4 = CBB_add_space(a2, &v5, 2);
    result = v4 != 0;
    if (v4)
    {
      v5[1] = 0;
      *v5 = 0;
    }
  }
  return result;
}

uint64_t bssl::ext_ri_add_clienthello(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  void *v4;
  void *v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  _BYTE v12[48];
  uint64_t v13[6];
  void *v14[7];

  result = 1;
  if (a4 != 1)
  {
    v14[5] = v4;
    v14[6] = v5;
    if (*((unsigned __int16 *)a1 + 14) <= 0x303u)
    {
      v9 = *a1;
      v13[0] = 0;
      result = CBB_add_space((uint64_t)a2, v13, 2);
      if ((_DWORD)result)
      {
        *(_BYTE *)(v13[0] + 1) = 1;
        *(_BYTE *)v13[0] = -1;
        result = CBB_flush(a2);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)a2, (uint64_t)v13, 2u, 0);
          if ((_DWORD)result)
          {
            result = CBB_flush(v13);
            if ((_DWORD)result)
            {
              result = cbb_add_child((uint64_t)v13, (uint64_t)v12, 1u, 0);
              if ((_DWORD)result)
              {
                v10 = *(_QWORD *)(v9 + 48);
                v11 = *(unsigned __int8 *)(v10 + 447);
                v14[0] = 0;
                result = CBB_add_space((uint64_t)v12, v14, v11);
                if ((_DWORD)result)
                {
                  if ((_DWORD)v11)
                    memcpy(v14[0], (const void *)(v10 + 435), v11);
                  return CBB_flush(a2) != 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ri_parse_serverhello(uint64_t *a1, _BYTE *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t result;
  int v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unint64_t v23;
  uint64_t v24;
  int8x8_t v25;
  int8x8_t *v26;
  int8x8_t *v27;
  uint64_t v28;
  int8x8_t v29;
  int8x8_t v30;
  int8x8_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned __int8 *v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  int8x16_t *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  unint64_t v46;
  uint64_t v47;
  int8x8_t v48;
  int8x8_t *v49;
  int8x8_t *v50;
  uint64_t v51;
  int8x8_t v52;
  int8x8_t v53;
  int8x8_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unsigned __int8 *v58;
  char v59;
  char v60;
  char v61;

  v4 = *a1;
  if (a3 && *(_WORD *)(v4 + 16) == 772)
    goto LABEL_14;
  v5 = *(_QWORD *)(v4 + 48);
  v6 = *(_WORD *)(v5 + 220);
  if ((v6 & 0x20) != 0 && (a3 != 0) == ((v6 & 0x80) == 0))
  {
    *a2 = 40;
    ERR_put_error(16, 0, 202, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 737);
    return 0;
  }
  if (!a3)
    return 1;
  v7 = (unsigned __int8 *)a3[1];
  if (!v7)
    goto LABEL_13;
  v8 = *(unsigned __int8 *)(v5 + 447);
  v9 = *(unsigned __int8 *)(v5 + 448);
  v10 = (unsigned __int8 *)*a3;
  v11 = *a3 + 1;
  v12 = v7 - 1;
  *a3 = v11;
  a3[1] = (uint64_t)v12;
  v13 = (unsigned __int8 *)*v10;
  if (v12 < v13 || (*a3 = (uint64_t)&v13[v11], a3[1] = v12 - v13, v12 != v13))
  {
LABEL_13:
    ERR_put_error(16, 0, 201, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 767);
LABEL_14:
    result = 0;
    *a2 = 47;
    return result;
  }
  if ((unsigned __int8 *)(v9 + v8) != v12)
  {
    v19 = 774;
LABEL_56:
    ERR_put_error(16, 0, 202, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v19);
    result = 0;
    *a2 = 40;
    return result;
  }
  v14 = *(_QWORD *)(v4 + 48);
  v15 = *(unsigned __int8 *)(v14 + 447);
  if (*(_BYTE *)(v14 + 447))
  {
    if (v15 < 8)
    {
      v16 = 0;
      v17 = 0;
      goto LABEL_31;
    }
    if (v15 >= 0x20)
    {
      v16 = v15 & 0xE0;
      v20 = veorq_s8(*(int8x16_t *)(v14 + 435), *(int8x16_t *)(v10 + 1));
      v21 = veorq_s8(*(int8x16_t *)(v14 + 451), *(int8x16_t *)(v10 + 17));
      if (v16 != 32)
      {
        v20 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 467), *(int8x16_t *)(v10 + 33)), v20);
        v21 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 483), *(int8x16_t *)(v10 + 49)), v21);
        if (v16 != 64)
        {
          v20 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 499), *(int8x16_t *)(v10 + 65)), v20);
          v21 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 515), *(int8x16_t *)(v10 + 81)), v21);
          if (v16 != 96)
          {
            v20 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 531), *(int8x16_t *)(v10 + 97)), v20);
            v21 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 547), *(int8x16_t *)(v10 + 113)), v21);
            if (v16 != 128)
            {
              v20 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 563), *(int8x16_t *)(v10 + 129)), v20);
              v21 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 579), *(int8x16_t *)(v10 + 145)), v21);
              if (v16 != 160)
              {
                v20 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 595), *(int8x16_t *)(v10 + 161)), v20);
                v21 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 611), *(int8x16_t *)(v10 + 177)), v21);
                if (v16 != 192)
                {
                  v20 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 627), *(int8x16_t *)(v10 + 193)), v20);
                  v21 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 643), *(int8x16_t *)(v10 + 209)), v21);
                }
              }
            }
          }
        }
      }
      v22 = vorrq_s8(v21, v20);
      *(int8x8_t *)v22.i8 = vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
      v23 = v22.i64[0] | HIDWORD(v22.i64[0]) | ((unint64_t)(v22.i64[0] | HIDWORD(v22.i64[0])) >> 16);
      v17 = v23 | BYTE1(v23);
      if (v16 == v15)
        goto LABEL_33;
      if ((v15 & 0x18) == 0)
      {
LABEL_31:
        v33 = v15 - v16;
        v34 = (char *)(v16 + v14 + 435);
        v35 = &v10[v16 + 1];
        do
        {
          v37 = *v35++;
          v36 = v37;
          v38 = *v34++;
          v17 |= v38 ^ v36;
          --v33;
        }
        while (v33);
        goto LABEL_33;
      }
    }
    else
    {
      v17 = 0;
      v16 = 0;
    }
    v24 = v16;
    v25 = (int8x8_t)v17;
    v16 = v15 & 0xF8;
    v26 = (int8x8_t *)&v10[v24 + 1];
    v27 = (int8x8_t *)(v24 + v14 + 435);
    v28 = v24 - v16;
    do
    {
      v29 = *v26++;
      v30 = v29;
      v31 = *v27++;
      v25 = vorr_s8(veor_s8(v31, v30), v25);
      v28 += 8;
    }
    while (v28);
    v32 = *(_QWORD *)&v25 | HIDWORD(*(_QWORD *)&v25) | ((*(_QWORD *)&v25 | HIDWORD(*(_QWORD *)&v25)) >> 16);
    v17 = v32 | BYTE1(v32);
    if (v16 != v15)
      goto LABEL_31;
LABEL_33:
    if (v17)
    {
      v19 = 786;
      goto LABEL_56;
    }
  }
  v39 = *(unsigned __int8 *)(v14 + 448);
  if (*(_BYTE *)(v14 + 448))
  {
    if (v39 < 8)
    {
      v40 = 0;
      v41 = 0;
      goto LABEL_52;
    }
    if (v39 >= 0x20)
    {
      v42 = (int8x16_t *)(v11 + v15);
      v40 = v39 & 0xE0;
      v43 = veorq_s8(*(int8x16_t *)(v14 + 449), *v42);
      v44 = veorq_s8(*(int8x16_t *)(v14 + 465), v42[1]);
      if (v40 != 32)
      {
        v43 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 481), v42[2]), v43);
        v44 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 497), v42[3]), v44);
        if (v40 != 64)
        {
          v43 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 513), v42[4]), v43);
          v44 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 529), v42[5]), v44);
          if (v40 != 96)
          {
            v43 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 545), v42[6]), v43);
            v44 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 561), v42[7]), v44);
            if (v40 != 128)
            {
              v43 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 577), v42[8]), v43);
              v44 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 593), v42[9]), v44);
              if (v40 != 160)
              {
                v43 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 609), v42[10]), v43);
                v44 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 625), v42[11]), v44);
                if (v40 != 192)
                {
                  v43 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 641), v42[12]), v43);
                  v44 = vorrq_s8(veorq_s8(*(int8x16_t *)(v14 + 657), v42[13]), v44);
                }
              }
            }
          }
        }
      }
      v45 = vorrq_s8(v44, v43);
      *(int8x8_t *)v45.i8 = vorr_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
      v46 = v45.i64[0] | HIDWORD(v45.i64[0]) | ((unint64_t)(v45.i64[0] | HIDWORD(v45.i64[0])) >> 16);
      v41 = v46 | BYTE1(v46);
      if (v40 == v39)
        goto LABEL_54;
      if ((v39 & 0x18) == 0)
      {
LABEL_52:
        v56 = v39 - v40;
        v57 = (char *)(v40 + v14 + 449);
        v58 = &v10[v40 + 1 + v15];
        do
        {
          v60 = *v58++;
          v59 = v60;
          v61 = *v57++;
          v41 |= v61 ^ v59;
          --v56;
        }
        while (v56);
        goto LABEL_54;
      }
    }
    else
    {
      v41 = 0;
      v40 = 0;
    }
    v47 = v40;
    v40 = v39 & 0xF8;
    v48 = (int8x8_t)v41;
    v49 = (int8x8_t *)&v10[v47 + 1 + v15];
    v50 = (int8x8_t *)(v47 + v14 + 449);
    v51 = v47 - v40;
    do
    {
      v52 = *v49++;
      v53 = v52;
      v54 = *v50++;
      v48 = vorr_s8(veor_s8(v54, v53), v48);
      v51 += 8;
    }
    while (v51);
    v55 = *(_QWORD *)&v48 | HIDWORD(*(_QWORD *)&v48) | ((*(_QWORD *)&v48 | HIDWORD(*(_QWORD *)&v48)) >> 16);
    v41 = v55 | BYTE1(v55);
    if (v40 != v39)
      goto LABEL_52;
LABEL_54:
    if (v41)
    {
      v19 = 798;
      goto LABEL_56;
    }
  }
  *(_WORD *)(v14 + 220) |= 0x80u;
  return 1;
}

uint64_t bssl::ext_ri_parse_clienthello(uint64_t *a1, _BYTE *a2, uint64_t *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;

  v4 = *a1;
  v5 = *(unsigned __int16 *)(*a1 + 16);
  if (v5 - 769 < 4)
  {
LABEL_7:
    result = 1;
    if (!a3)
      return result;
    goto LABEL_8;
  }
  if (v5 == 65277)
  {
    v5 = 771;
    goto LABEL_7;
  }
  if (v5 == 65279)
  {
    v5 = 770;
    result = 1;
    if (!a3)
      return result;
  }
  else
  {
    v5 = 0;
    result = 1;
    if (!a3)
      return result;
  }
LABEL_8:
  if (v5 <= 0x303)
  {
    v7 = (unsigned __int8 *)a3[1];
    if (!v7)
      goto LABEL_15;
    v8 = (unsigned __int8 *)*a3;
    v9 = *a3 + 1;
    v10 = v7 - 1;
    *a3 = v9;
    a3[1] = (uint64_t)(v7 - 1);
    v11 = *v8;
    if ((unint64_t)v10 < v11)
      goto LABEL_15;
    *a3 = v9 + v11;
    a3[1] = (uint64_t)&v10[-v11];
    if (v10 == (unsigned __int8 *)v11)
    {
      if ((_DWORD)v11)
      {
        ERR_put_error(16, 0, 202, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 832);
        result = 0;
        *a2 = 40;
      }
      else
      {
        *(_WORD *)(*(_QWORD *)(v4 + 48) + 220) |= 0x80u;
      }
    }
    else
    {
LABEL_15:
      ERR_put_error(16, 0, 201, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 825);
      return 0;
    }
  }
  return result;
}

uint64_t bssl::ext_ri_add_serverhello(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _BYTE *v5;

  if (*(_WORD *)(*(_QWORD *)a1 + 16) == 772)
    return 1;
  v5 = 0;
  result = CBB_add_space(a2, &v5, 2);
  if ((_DWORD)result)
  {
    v5[1] = 1;
    *v5 = -1;
    v5 = 0;
    result = CBB_add_space(a2, &v5, 2);
    if ((_DWORD)result)
    {
      v5[1] = 1;
      *v5 = 0;
      v5 = 0;
      v4 = CBB_add_space(a2, &v5, 1);
      result = v4 != 0;
      if (v4)
        *v5 = 0;
    }
  }
  return result;
}

uint64_t bssl::ext_supported_groups_add_clienthello(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  uint64_t v11;
  int v12;
  _BYTE v13[48];
  uint64_t v14[6];
  _BYTE *v15;

  v5 = *a1;
  v14[0] = 0;
  result = CBB_add_space((uint64_t)a3, v14, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v14[0] + 1) = 10;
    *(_BYTE *)v14[0] = 0;
    result = CBB_flush(a3);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a3, (uint64_t)v14, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v14);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v14, (uint64_t)v13, 2u, 0);
          if ((_DWORD)result)
          {
            if ((*(_WORD *)(*(_QWORD *)(v5 + 104) + 760) & 0x20) != 0)
            {
              v7 = *((_BYTE *)a1 + 1615);
              v15 = 0;
              result = CBB_add_space((uint64_t)v13, &v15, 2);
              if (!(_DWORD)result)
                return result;
              v15[1] = v7 & 0xF0 | 0xA;
              *v15 = v7 & 0xF0 | 0xA;
            }
            v8 = a1[1];
            v9 = *(_QWORD *)(v8 + 104);
            if (v9)
            {
              v10 = *(__int16 **)(v8 + 96);
            }
            else
            {
              v10 = &bssl::kDefaultGroups;
              v9 = 3;
            }
            v11 = 2 * v9;
            do
            {
              v12 = (unsigned __int16)*v10;
              if (v12 != 25497 || *((unsigned __int16 *)a1 + 15) >= 0x304u)
              {
                v15 = 0;
                result = CBB_add_space((uint64_t)v13, &v15, 2);
                if (!(_DWORD)result)
                  return result;
                v15[1] = v12;
                *v15 = BYTE1(v12);
              }
              ++v10;
              v11 -= 2;
            }
            while (v11);
            return CBB_flush(a3) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_supported_groups_parse_serverhello()
{
  return 1;
}

uint64_t bssl::ext_supported_groups_parse_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD v11[2];

  if (!a3)
    return 1;
  v3 = a3[1];
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    return 0;
  v7 = (unsigned __int16 *)*a3;
  v8 = *a3 + 2;
  *a3 = v8;
  a3[1] = v5;
  v9 = __rev16(*v7);
  if (v5 < v9)
    return 0;
  *a3 = v8 + v9;
  a3[1] = v5 - v9;
  v11[0] = v8;
  v11[1] = v9;
  if (v9)
    v10 = v5 == v9;
  else
    v10 = 0;
  if (v10)
    return bssl::parse_u16_array((uint64_t)v11, (unint64_t *)(a1 + 648));
  else
    return 0;
}

uint64_t bssl::dont_add_serverhello()
{
  return 1;
}

uint64_t bssl::ext_ec_point_add_clienthello(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v9[48];
  uint64_t v10[6];
  _QWORD v11[5];

  result = 1;
  if (a4 != 1)
  {
    v11[3] = v4;
    v11[4] = v5;
    if (*(unsigned __int16 *)(a1 + 28) <= 0x303u)
    {
      v10[0] = 0;
      result = CBB_add_space((uint64_t)a2, v10, 2);
      if ((_DWORD)result)
      {
        *(_BYTE *)(v10[0] + 1) = 11;
        *(_BYTE *)v10[0] = 0;
        result = CBB_flush(a2);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)a2, (uint64_t)v10, 2u, 0);
          if ((_DWORD)result)
          {
            result = CBB_flush(v10);
            if ((_DWORD)result)
            {
              result = cbb_add_child((uint64_t)v10, (uint64_t)v9, 1u, 0);
              if ((_DWORD)result)
              {
                v11[0] = 0;
                result = CBB_add_space((uint64_t)v9, v11, 1);
                if ((_DWORD)result)
                {
                  *(_BYTE *)v11[0] = 0;
                  return CBB_flush(a2) != 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ec_point_parse_serverhello(uint64_t a1, _BYTE *a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  char *v5;
  size_t v6;
  size_t v7;
  uint64_t result;

  if (!a3)
    return 1;
  if (*(_WORD *)(*(_QWORD *)a1 + 16) == 772)
    return 0;
  v3 = a3[1];
  if (!v3)
    return 0;
  v4 = *a3;
  v5 = (char *)(*a3 + 1);
  v6 = (size_t)(v3 - 1);
  *a3 = (unsigned __int8 *)v5;
  a3[1] = (unsigned __int8 *)v6;
  v7 = *v4;
  if (v6 < v7)
    return 0;
  *a3 = (unsigned __int8 *)&v5[v7];
  a3[1] = (unsigned __int8 *)(v6 - v7);
  if (v6 != v7)
    return 0;
  if ((_DWORD)v7 && memchr(v5, 0, v6))
    return 1;
  result = 0;
  *a2 = 47;
  return result;
}

uint64_t bssl::ext_ec_point_parse_clienthello(uint64_t a1, _BYTE *a2, unsigned __int8 **a3)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  size_t v10;
  size_t v11;

  v4 = *(unsigned __int16 *)(*(_QWORD *)a1 + 16);
  v5 = v4;
  if (v4 - 769 >= 4)
  {
    if (v4 == 65277)
    {
      v5 = 771;
      result = 1;
      if (!a3)
        return result;
    }
    else if (v4 == 65279)
    {
      v5 = 770;
      result = 1;
      if (!a3)
        return result;
    }
    else
    {
      v5 = 0;
      result = 1;
      if (!a3)
        return result;
    }
  }
  else
  {
    result = 1;
    if (!a3)
      return result;
  }
  if (v5 <= 0x303)
  {
    if (v4 == 772)
    {
      return 0;
    }
    else
    {
      v7 = a3[1];
      if (!v7)
        return 0;
      v8 = *a3;
      v9 = (char *)(*a3 + 1);
      v10 = (size_t)(v7 - 1);
      *a3 = (unsigned __int8 *)v9;
      a3[1] = (unsigned __int8 *)v10;
      v11 = *v8;
      if (v10 < v11)
        return 0;
      *a3 = (unsigned __int8 *)&v9[v11];
      a3[1] = (unsigned __int8 *)(v10 - v11);
      if (v10 == v11)
      {
        if ((_DWORD)v11 && memchr(v9, 0, v10))
        {
          return 1;
        }
        else
        {
          result = 0;
          *a2 = 47;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ec_point_add_serverhello(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  _BYTE v4[48];
  uint64_t v5[6];
  _BYTE *v6;

  if (*(_WORD *)(*a1 + 16) == 772)
    return 1;
  if (!(*(_DWORD *)(a1[192] + 20) & 2 | *(_DWORD *)(a1[192] + 24) & 4))
    return 1;
  v5[0] = 0;
  result = CBB_add_space((uint64_t)a2, v5, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v5[0] + 1) = 11;
    *(_BYTE *)v5[0] = 0;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v5, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v5);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v5, (uint64_t)v4, 1u, 0);
          if ((_DWORD)result)
          {
            v6 = 0;
            result = CBB_add_space((uint64_t)v4, &v6, 1);
            if ((_DWORD)result)
            {
              *v6 = 0;
              return CBB_flush(a2) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ticket_add_clienthello(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4)
{
  void *v4;
  void *v5;
  uint64_t result;
  uint64_t v8;
  uint64_t v10;
  size_t v11;
  const void *v12;
  _QWORD v13[6];
  void *v14[7];

  result = 1;
  if (a4 == 1)
    return result;
  v14[5] = v4;
  v14[6] = v5;
  if (*((unsigned __int16 *)a1 + 14) > 0x303u)
    return result;
  v8 = *a1;
  if ((*(_BYTE *)(v8 + 129) & 0x40) != 0)
    return 1;
  if ((*(_WORD *)(*(_QWORD *)(v8 + 48) + 220) & 0x20) != 0)
    goto LABEL_8;
  v10 = *(_QWORD *)(v8 + 88);
  if (!v10)
    goto LABEL_8;
  v11 = *(_QWORD *)(v10 + 240);
  if (!v11)
    goto LABEL_9;
  if (*(_WORD *)(v10 + 4) == 772)
  {
LABEL_8:
    v11 = 0;
LABEL_9:
    v12 = 0;
    v13[0] = 0;
    result = CBB_add_space((uint64_t)a2, v13, 2);
    if (!(_DWORD)result)
      return result;
    goto LABEL_10;
  }
  v12 = *(const void **)(v10 + 232);
  v13[0] = 0;
  result = CBB_add_space((uint64_t)a2, v13, 2);
  if (!(_DWORD)result)
    return result;
LABEL_10:
  *(_BYTE *)(v13[0] + 1) = 35;
  *(_BYTE *)v13[0] = 0;
  result = CBB_flush(a2);
  if ((_DWORD)result)
  {
    result = cbb_add_child((uint64_t)a2, (uint64_t)v13, 2u, 0);
    if ((_DWORD)result)
    {
      v14[0] = 0;
      result = CBB_add_space((uint64_t)v13, v14, v11);
      if ((_DWORD)result)
      {
        if (v11)
          memcpy(v14[0], v12, v11);
        return CBB_flush(a2) != 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ticket_parse_serverhello(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
    return 1;
  if (*(_WORD *)(*(_QWORD *)a1 + 16) == 772)
    return 0;
  if (*(_QWORD *)(a3 + 8))
    return 0;
  a1[392] |= 0x8000u;
  return 1;
}

uint64_t bssl::ignore_parse_clienthello()
{
  return 1;
}

uint64_t bssl::ext_ticket_add_serverhello(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _BYTE *v5;

  if ((*(_BYTE *)(a1 + 1569) & 0x80) == 0)
    return 1;
  v5 = 0;
  result = CBB_add_space(a2, &v5, 2);
  if ((_DWORD)result)
  {
    v5[1] = 35;
    *v5 = 0;
    v5 = 0;
    v4 = CBB_add_space(a2, &v5, 2);
    result = v4 != 0;
    if (v4)
    {
      v5[1] = 0;
      *v5 = 0;
    }
  }
  return result;
}

uint64_t bssl::ext_alpn_add_clienthello(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  const void *v8;
  size_t v9;
  _BYTE v10[48];
  uint64_t v11[6];
  void *v12;

  v3 = *a1;
  if (!*(_QWORD *)(a1[1] + 128))
  {
    if (*(_QWORD *)(v3 + 152))
    {
      ERR_put_error(16, 0, 307, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1378);
      return 0;
    }
    return 1;
  }
  if ((*(_WORD *)(*(_QWORD *)(v3 + 48) + 220) & 0x20) != 0)
    return 1;
  v11[0] = 0;
  result = CBB_add_space((uint64_t)a3, v11, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v11[0] + 1) = 16;
    *(_BYTE *)v11[0] = 0;
    result = CBB_flush(a3);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a3, (uint64_t)v11, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v11);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v11, (uint64_t)v10, 2u, 0);
          if ((_DWORD)result)
          {
            v7 = a1[1];
            v8 = *(const void **)(v7 + 120);
            v9 = *(_QWORD *)(v7 + 128);
            v12 = 0;
            result = CBB_add_space((uint64_t)v10, &v12, v9);
            if ((_DWORD)result)
            {
              if (v9)
                memcpy(v12, v8, v9);
              return CBB_flush(a3) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_alpn_parse_serverhello(uint64_t *a1, char *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unsigned __int16 *v11;
  size_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  char *v19;
  uint64_t result;
  char v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;

  v4 = *a1;
  if (a3)
  {
    if ((*((_BYTE *)a1 + 1569) & 0x40) != 0)
    {
      *a2 = 47;
      ERR_put_error(16, 0, 170, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1420);
      return 0;
    }
    v5 = a3[1];
    v6 = v5 - 2;
    if (v5 < 2)
      return 0;
    v7 = (unsigned __int16 *)*a3;
    v8 = *a3 + 2;
    *a3 = v8;
    a3[1] = v6;
    v9 = __rev16(*v7);
    v10 = v6 >= v9;
    v11 = (unsigned __int16 *)(v6 - v9);
    if (!v10)
      return 0;
    *a3 = v8 + v9;
    a3[1] = (uint64_t)v11;
    if (v11 || v9 == 0)
      return 0;
    v13 = v5 - 3;
    v14 = *((unsigned __int8 *)v7 + 2);
    if (v5 - 3 < v14)
      return 0;
    if (!*((_BYTE *)v7 + 2) || v13 != v14)
      return 0;
    v16 = a1[1];
    v17 = *(_QWORD *)(v16 + 128);
    if (!v17)
      goto LABEL_31;
    v18 = (char *)v7 + 3;
    if ((*(_WORD *)(*(_QWORD *)(*a1 + 104) + 760) & 0x80) == 0)
    {
      v19 = *(char **)(v16 + 120);
      do
      {
        v24 = *v19;
        v22 = v19 + 1;
        v23 = v24;
        v10 = v17 - 1 >= (unint64_t)v24;
        v17 = v17 - 1 - v24;
        if (!v10)
          break;
        if ((_DWORD)v14 == (_DWORD)v23 && !memcmp(v22, v18, v13))
          goto LABEL_29;
        v19 = &v22[v23];
      }
      while (v17);
LABEL_31:
      ERR_put_error(16, 0, 259, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1437);
      v21 = 47;
LABEL_33:
      result = 0;
      goto LABEL_21;
    }
LABEL_29:
    if ((bssl::Array<unsigned char>::CopyFrom((uint64_t *)(*(_QWORD *)(v4 + 48) + 488), v18, v13) & 1) == 0)
    {
      v21 = 80;
      goto LABEL_33;
    }
  }
  else if (*(_QWORD *)(v4 + 152))
  {
    ERR_put_error(16, 0, 307, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1407);
    result = 0;
    v21 = 120;
LABEL_21:
    *a2 = v21;
    return result;
  }
  return 1;
}

uint64_t bssl::ext_alpn_add_serverhello(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  const void *v6;
  size_t v7;
  _BYTE v8[48];
  uint64_t v9[6];
  uint64_t v10[6];
  void *v11;

  v2 = *a1;
  if (!*(_QWORD *)(*(_QWORD *)(*a1 + 48) + 496))
    return 1;
  v10[0] = 0;
  result = CBB_add_space((uint64_t)a2, v10, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v10[0] + 1) = 16;
    *(_BYTE *)v10[0] = 0;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v10, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v10);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v10, (uint64_t)v9, 2u, 0);
          if ((_DWORD)result)
          {
            result = CBB_flush(v9);
            if ((_DWORD)result)
            {
              result = cbb_add_child((uint64_t)v9, (uint64_t)v8, 1u, 0);
              if ((_DWORD)result)
              {
                v5 = *(_QWORD *)(v2 + 48);
                v6 = *(const void **)(v5 + 488);
                v7 = *(_QWORD *)(v5 + 496);
                v11 = 0;
                result = CBB_add_space((uint64_t)v8, &v11, v7);
                if ((_DWORD)result)
                {
                  if (v7)
                    memcpy(v11, v6, v7);
                  return CBB_flush(a2) != 0;
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ocsp_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD v5[6];
  _BYTE *v6;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 8) + 237) & 4) == 0)
    return 1;
  v5[0] = 0;
  result = CBB_add_space((uint64_t)a3, v5, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v5[0] + 1) = 5;
    *(_BYTE *)v5[0] = 0;
    result = CBB_flush(a3);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a3, (uint64_t)v5, 2u, 0);
      if ((_DWORD)result)
      {
        v6 = 0;
        result = CBB_add_space((uint64_t)v5, &v6, 1);
        if ((_DWORD)result)
        {
          *v6 = 1;
          v6 = 0;
          result = CBB_add_space((uint64_t)v5, &v6, 2);
          if ((_DWORD)result)
          {
            v6[1] = 0;
            *v6 = 0;
            v6 = 0;
            result = CBB_add_space((uint64_t)v5, &v6, 2);
            if ((_DWORD)result)
            {
              v6[1] = 0;
              *v6 = 0;
              return CBB_flush(a3) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_ocsp_parse_serverhello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
    return 1;
  if (*(_WORD *)(*(_QWORD *)a1 + 16) == 772
    || *(_QWORD *)(a3 + 8)
    || (*(_BYTE *)(*(_QWORD *)(a1 + 1536) + 24) & 7) == 0)
  {
    return 0;
  }
  *(_DWORD *)(a1 + 1568) |= 0x40u;
  return 1;
}

uint64_t bssl::ext_ocsp_parse_clienthello(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  _BYTE *v4;

  if (!a3)
    return 1;
  v3 = a3[1];
  if (v3)
  {
    v4 = (_BYTE *)(*a3)++;
    a3[1] = v3 - 1;
    *(_DWORD *)(a1 + 1568) = *(_DWORD *)(a1 + 1568) & 0xFFFFFF7F | ((*v4 == 1) << 7);
    return 1;
  }
  return 0;
}

uint64_t bssl::ext_ocsp_add_serverhello(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;
  int v5;
  _BYTE *v6;

  if (*(_WORD *)(*(_QWORD *)a1 + 16) == 772)
    return 1;
  v3 = *(_DWORD *)(a1 + 1568);
  if ((v3 & 0x80) == 0
    || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 220) & 0x40) != 0
    || (*(_BYTE *)(*(_QWORD *)(a1 + 1536) + 24) & 7) == 0
    || !*(_QWORD *)(*(_QWORD *)(a1 + 1488) + 80))
  {
    return 1;
  }
  *(_DWORD *)(a1 + 1568) = v3 | 0x40;
  v6 = 0;
  result = CBB_add_space(a2, &v6, 2);
  if ((_DWORD)result)
  {
    v6[1] = 5;
    *v6 = 0;
    v6 = 0;
    v5 = CBB_add_space(a2, &v6, 2);
    result = v5 != 0;
    if (v5)
    {
      v6[1] = 0;
      *v6 = 0;
    }
  }
  return result;
}

uint64_t bssl::ext_sigalgs_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  __int16 *v8;
  uint64_t v9;
  __int16 v10;
  _BYTE v11[48];
  uint64_t v12[6];
  _BYTE *v13;

  if (*(unsigned __int16 *)(a1 + 30) < 0x303u)
    return 1;
  v12[0] = 0;
  result = CBB_add_space((uint64_t)a3, v12, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v12[0] + 1) = 13;
    *(_BYTE *)v12[0] = 0;
    result = CBB_flush(a3);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a3, (uint64_t)v12, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v12);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v12, (uint64_t)v11, 2u, 0);
          if ((_DWORD)result)
          {
            v6 = *(_QWORD *)(a1 + 8);
            v7 = *(_QWORD *)(v6 + 200);
            if (v7)
            {
              v8 = *(__int16 **)(v6 + 192);
            }
            else
            {
              v8 = &bssl::kVerifySignatureAlgorithms;
              v7 = 9;
            }
            v9 = 2 * v7;
            while (1)
            {
              v10 = *v8;
              v13 = 0;
              result = CBB_add_space((uint64_t)v11, &v13, 2);
              if (!(_DWORD)result)
                break;
              v13[1] = v10;
              *v13 = HIBYTE(v10);
              ++v8;
              v9 -= 2;
              if (!v9)
                return CBB_flush(a3) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL bssl::forbid_parse_serverhello(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  if (a3)
  {
    *a2 = 110;
    ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 500);
  }
  return a3 == 0;
}

uint64_t bssl::ext_sigalgs_parse_clienthello(unint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  size_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  unsigned __int16 *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  _QWORD v18[2];

  v5 = a1 + 79;
  v6 = a1[79];
  if (v6)
  {
    v8 = *(_QWORD *)(v6 - 8);
    v7 = (void *)(v6 - 8);
    v9 = v8 + 8;
    if (v8 != -8)
      bzero(v7, v9);
    free(v7);
  }
  *v5 = 0;
  v5[1] = 0;
  if (!a3)
    return 1;
  v10 = a3[1];
  v11 = v10 >= 2;
  v12 = v10 - 2;
  if (!v11)
    return 0;
  v13 = (unsigned __int16 *)*a3;
  v14 = *a3 + 2;
  *a3 = v14;
  a3[1] = v12;
  v15 = __rev16(*v13);
  if (v12 < v15)
    return 0;
  *a3 = v14 + v15;
  a3[1] = v12 - v15;
  v18[0] = v14;
  v18[1] = v15;
  if (v12 != v15)
    return 0;
  v16 = *(unsigned __int16 *)(*a1 + 16);
  if (v16 - 769 >= 4)
  {
    if (v16 != 65277)
      return 1;
  }
  else if (v16 < 0x303)
  {
    return 1;
  }
  if (v12)
    return bssl::parse_u16_array((uint64_t)v18, v5);
  else
    return 0;
}

uint64_t bssl::ext_npn_add_clienthello(unsigned __int16 *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t result;
  int v8;
  _BYTE *v9;

  v4 = *(_QWORD *)a1;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 104) + 576)
    || (*(_WORD *)(*(_QWORD *)(v4 + 48) + 220) & 0x20) != 0)
  {
    return 1;
  }
  if (**(_BYTE **)v4)
    return 1;
  result = 1;
  if (a4 != 1 && a1[14] <= 0x303u)
  {
    v9 = 0;
    result = CBB_add_space(a2, &v9, 2);
    if ((_DWORD)result)
    {
      v9[1] = 116;
      *v9 = 51;
      v9 = 0;
      v8 = CBB_add_space(a2, &v9, 2);
      result = v8 != 0;
      if (v8)
      {
        v9[1] = 0;
        *v9 = 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_npn_parse_serverhello(_DWORD *a1, _BYTE *a2, unsigned __int8 **a3)
{
  uint64_t v4;
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  _QWORD *v15;
  const void *v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  size_t v21;
  _QWORD *v22;
  unsigned __int8 v23;
  const void *v24;

  if (!a3)
    return 1;
  v4 = *(_QWORD *)a1;
  if (*(_WORD *)(*(_QWORD *)a1 + 16) == 772)
    return 0;
  if (!*(_QWORD *)(*(_QWORD *)(v4 + 48) + 496))
  {
    v7 = *a3;
    if (a3[1])
    {
      v8 = *a3;
      v9 = a3[1];
      do
      {
        v10 = v8 + 1;
        v11 = (unint64_t)(v9 - 1);
        *a3 = v8 + 1;
        a3[1] = (unsigned __int8 *)v11;
        v12 = *v8;
        v13 = v11 >= v12;
        v9 = (unsigned __int8 *)(v11 - v12);
        if (!v13)
          return 0;
        v8 = &v10[v12];
        *a3 = &v10[v12];
        a3[1] = v9;
        if (!(_DWORD)v12)
          return 0;
      }
      while (v9);
    }
    v24 = 0;
    v23 = 0;
    if ((*(unsigned int (**)(uint64_t, const void **, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)(v4 + 104) + 576))(v4, &v24, &v23, v7))
    {
LABEL_15:
      result = 0;
      *a2 = 80;
      return result;
    }
    v14 = *(_QWORD *)(v4 + 48);
    v15 = (_QWORD *)(v14 + 472);
    v16 = v24;
    v17 = v23;
    v18 = *(_QWORD *)(v14 + 472);
    if (v18)
    {
      v20 = *(_QWORD *)(v18 - 8);
      v19 = (void *)(v18 - 8);
      v21 = v20 + 8;
      if (v20 != -8)
        bzero(v19, v21);
      free(v19);
    }
    *v15 = 0;
    *(_QWORD *)(v14 + 480) = 0;
    if ((_DWORD)v17)
    {
      v22 = OPENSSL_malloc(v17);
      *v15 = v22;
      if (!v22)
        goto LABEL_15;
      *(_QWORD *)(v14 + 480) = v17;
      memmove(v22, v16, v17);
    }
    a1[392] |= 0x4000u;
    return 1;
  }
  *a2 = 47;
  ERR_put_error(16, 0, 170, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1190);
  return 0;
}

uint64_t bssl::ext_npn_parse_clienthello(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v4;

  v3 = *(_QWORD *)a1;
  v4 = *(unsigned __int16 *)(*(_QWORD *)a1 + 16);
  if (v4 - 769 < 4)
  {
LABEL_7:
    if (!a3)
      return 1;
    goto LABEL_8;
  }
  if (v4 == 65277)
  {
    v4 = 771;
    goto LABEL_7;
  }
  if (v4 == 65279)
  {
    v4 = 770;
    if (!a3)
      return 1;
  }
  else
  {
    v4 = 0;
    if (!a3)
      return 1;
  }
LABEL_8:
  if (v4 <= 0x303)
  {
    if (*(_QWORD *)(a3 + 8))
      return 0;
    if ((*(_WORD *)(*(_QWORD *)(v3 + 48) + 220) & 0x20) == 0
      && *(_QWORD *)(*(_QWORD *)(v3 + 104) + 560)
      && !**(_BYTE **)v3)
    {
      a1[392] |= 0x4000u;
    }
  }
  return 1;
}

uint64_t bssl::ext_npn_add_serverhello(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  const void *v6;
  size_t v7;
  _QWORD v8[6];
  unsigned int v9;
  const void *v10;
  void *v11;

  if ((*((_BYTE *)a1 + 1569) & 0x40) == 0)
    return 1;
  v5 = *a1;
  v10 = 0;
  v9 = 0;
  if ((*(unsigned int (**)(void))(*(_QWORD *)(v5 + 104) + 560))())
  {
    *((_DWORD *)a1 + 392) &= ~0x4000u;
    return 1;
  }
  else
  {
    v8[0] = 0;
    result = CBB_add_space((uint64_t)a2, v8, 2);
    if ((_DWORD)result)
    {
      *(_BYTE *)(v8[0] + 1) = 116;
      *(_BYTE *)v8[0] = 51;
      result = CBB_flush(a2);
      if ((_DWORD)result)
      {
        result = cbb_add_child((uint64_t)a2, (uint64_t)v8, 2u, 0);
        if ((_DWORD)result)
        {
          v6 = v10;
          v7 = v9;
          v11 = 0;
          result = CBB_add_space((uint64_t)v8, &v11, v9);
          if ((_DWORD)result)
          {
            if ((_DWORD)v7)
              memcpy(v11, v6, v7);
            return CBB_flush(a2) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_sct_add_clienthello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  _BYTE *v6;

  if ((*(_WORD *)(*(_QWORD *)(a1 + 8) + 237) & 2) == 0)
    return 1;
  v6 = 0;
  result = CBB_add_space(a3, &v6, 2);
  if ((_DWORD)result)
  {
    v6[1] = 18;
    *v6 = 0;
    v6 = 0;
    v5 = CBB_add_space(a3, &v6, 2);
    result = v5 != 0;
    if (v5)
    {
      v6[1] = 0;
      *v6 = 0;
    }
  }
  return result;
}

uint64_t bssl::ext_sct_parse_serverhello(_QWORD *a1, _BYTE *a2, unsigned __int16 **a3)
{
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  unsigned __int16 *v8;
  unint64_t v9;
  uint64_t result;
  unsigned __int16 *v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int *v18;

  if (!a3)
    return 1;
  v5 = *a1;
  if (*(_WORD *)(*a1 + 16) != 772)
  {
    v6 = (size_t)a3[1];
    v7 = v6 - 2;
    if (v6 >= 2)
    {
      v8 = *a3;
      v9 = __rev16(**a3);
      if (v7 >= v9 && v7 == v9 && v9 != 0)
      {
        v12 = v8 + 1;
        while (1)
        {
          v13 = v7 >= 2;
          v14 = v7 - 2;
          if (!v13)
            break;
          v15 = __rev16(*v12);
          if (v15 - 1 >= v14)
            break;
          v12 = (unsigned __int16 *)((char *)v12 + v15 + 2);
          v7 = v14 - v15;
          if (!v7)
          {
            if ((*(_WORD *)(*(_QWORD *)(v5 + 48) + 220) & 0x40) != 0)
              return 1;
            v16 = a1[188];
            v17 = crypto_buffer_new(v8, v6, 0, *(uint64_t **)(*(_QWORD *)(v5 + 104) + 704));
            v18 = *(unsigned int **)(v16 + 248);
            *(_QWORD *)(v16 + 248) = v17;
            if (v18)
              CRYPTO_BUFFER_free(v18);
            if (*(_QWORD *)(a1[188] + 248))
              return 1;
            result = 0;
            *a2 = 80;
            return result;
          }
        }
      }
    }
  }
  result = 0;
  *a2 = 50;
  return result;
}

uint64_t bssl::ext_sct_parse_clienthello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
    return 1;
  if (*(_QWORD *)(a3 + 8))
    return 0;
  *(_DWORD *)(a1 + 1568) |= 4u;
  return 1;
}

uint64_t bssl::ext_sct_add_serverhello(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  const void *v6;
  size_t v7;
  _QWORD v8[6];
  void *v9;

  if (*(_WORD *)(*a1 + 16) == 772)
    return 1;
  if ((*(_WORD *)(*(_QWORD *)(*a1 + 48) + 220) & 0x40) != 0
    || (*(_BYTE *)(a1[192] + 24) & 7) == 0
    || !*(_QWORD *)(a1[186] + 72))
  {
    return 1;
  }
  v8[0] = 0;
  result = CBB_add_space((uint64_t)a2, v8, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v8[0] + 1) = 18;
    *(_BYTE *)v8[0] = 0;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v8, 2u, 0);
      if ((_DWORD)result)
      {
        v5 = *(_QWORD *)(a1[186] + 72);
        v6 = *(const void **)(v5 + 8);
        v7 = *(_QWORD *)(v5 + 16);
        v9 = 0;
        result = CBB_add_space((uint64_t)v8, &v9, v7);
        if ((_DWORD)result)
        {
          if (v7)
            memcpy(v9, v6, v7);
          return CBB_flush(a2) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_channel_id_add_clienthello(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;
  int v7;
  _BYTE *v8;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 8) + 112))
    return 1;
  result = 1;
  if (a4 != 2 && !***(_BYTE ***)a1)
  {
    v8 = 0;
    result = CBB_add_space(a2, &v8, 2);
    if ((_DWORD)result)
    {
      v8[1] = 80;
      *v8 = 117;
      v8 = 0;
      v7 = CBB_add_space(a2, &v8, 2);
      result = v7 != 0;
      if (v7)
      {
        v8[1] = 0;
        *v8 = 0;
      }
    }
  }
  return result;
}

uint64_t bssl::ext_channel_id_parse_serverhello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
    return 1;
  if (*(_QWORD *)(a3 + 8))
    return 0;
  *(_DWORD *)(a1 + 1568) |= 0x800000u;
  return 1;
}

uint64_t bssl::ext_channel_id_parse_clienthello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3 || (*(_WORD *)(*(_QWORD *)(a1 + 8) + 237) & 8) == 0 || ***(_BYTE ***)a1)
    return 1;
  if (*(_QWORD *)(a3 + 8))
    return 0;
  *(_DWORD *)(a1 + 1568) |= 0x800000u;
  return 1;
}

uint64_t bssl::ext_channel_id_add_serverhello(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _BYTE *v5;

  if ((*(_BYTE *)(a1 + 1570) & 0x80) == 0)
    return 1;
  v5 = 0;
  result = CBB_add_space(a2, &v5, 2);
  if ((_DWORD)result)
  {
    v5[1] = 80;
    *v5 = 117;
    v5 = 0;
    v4 = CBB_add_space(a2, &v5, 2);
    result = v4 != 0;
    if (v4)
    {
      v5[1] = 0;
      *v5 = 0;
    }
  }
  return result;
}

uint64_t bssl::ext_srtp_add_clienthello(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  uint64_t v12[6];
  _BYTE *v13;

  v3 = *a1;
  if (!*a1)
    return 1;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 1;
  v6 = *(uint64_t **)(v4 + 208);
  if (!v6)
  {
    v6 = *(uint64_t **)(*(_QWORD *)(v3 + 104) + 624);
    if (!v6)
      return 1;
  }
  if (!*v6 || !**(_BYTE **)v3)
    return 1;
  v12[0] = 0;
  result = CBB_add_space((uint64_t)a3, v12, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v12[0] + 1) = 14;
    *(_BYTE *)v12[0] = 0;
    result = CBB_flush(a3);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a3, (uint64_t)v12, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v12);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v12, (uint64_t)v11, 2u, 0);
          if ((_DWORD)result)
          {
            v8 = *v6;
            if (*v6)
            {
              v9 = 0;
              while (1)
              {
                v10 = *(_QWORD *)(*(_QWORD *)(v6[1] + 8 * v9) + 8);
                v13 = 0;
                result = CBB_add_space((uint64_t)v11, &v13, 2);
                if (!(_DWORD)result)
                  break;
                v13[1] = v10;
                *v13 = BYTE1(v10);
                if (v8 == ++v9)
                  goto LABEL_16;
              }
            }
            else
            {
LABEL_16:
              v13 = 0;
              result = CBB_add_space((uint64_t)v12, &v13, 1);
              if ((_DWORD)result)
              {
                *v13 = 0;
                return CBB_flush(a3) != 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_srtp_parse_serverhello(_QWORD *a1, _BYTE *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned __int8 *v10;
  unsigned int v12;
  unsigned __int16 *v13;
  unint64_t v14;
  BOOL v15;
  unsigned __int16 *v16;
  int v18;
  int v19;
  uint64_t result;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!a3)
    return 1;
  v3 = a3[1];
  v4 = v3 - 2;
  if (v3 < 2)
    goto LABEL_14;
  v5 = (_QWORD *)*a1;
  v6 = (unsigned __int16 *)*a3;
  v7 = *a3 + 2;
  *a3 = v7;
  a3[1] = v4;
  v8 = __rev16(*v6);
  v9 = (unsigned __int16 *)(v4 - v8);
  if (v4 < v8)
    goto LABEL_14;
  v10 = (unsigned __int8 *)(v7 + v8);
  *a3 = (uint64_t)v10;
  a3[1] = (uint64_t)v9;
  if (v8 < 2)
    goto LABEL_14;
  if (v8 != 2 || v4 == 2)
    goto LABEL_14;
  v12 = v6[1];
  v13 = (unsigned __int16 *)((char *)v9 - 1);
  *a3 = (uint64_t)(v10 + 1);
  a3[1] = (uint64_t)v13;
  v14 = *v10;
  v15 = (unint64_t)v13 >= v14;
  v16 = (unsigned __int16 *)((char *)v13 - v14);
  if (!v15 || (*a3 = (uint64_t)&v10[v14 + 1], (a3[1] = (uint64_t)v16) != 0))
  {
LABEL_14:
    ERR_put_error(16, 0, 116, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1721);
    return 0;
  }
  if ((_DWORD)v14)
  {
    v18 = 115;
    v19 = 1727;
LABEL_25:
    ERR_put_error(16, 0, v18, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", v19);
    result = 0;
    *a2 = 47;
    return result;
  }
  if (!v5
    || (v21 = v5[1]) == 0
    || (v22 = *(uint64_t **)(v21 + 208)) == 0 && (v22 = *(uint64_t **)(v5[13] + 624)) == 0
    || (v23 = *v22) == 0)
  {
LABEL_24:
    v18 = 116;
    v19 = 1740;
    goto LABEL_25;
  }
  v24 = 0;
  v25 = __rev16(v12);
  v26 = v22[1];
  while (1)
  {
    v27 = *(_QWORD *)(v26 + 8 * v24);
    if (*(_QWORD *)(v27 + 8) == v25)
      break;
    if (v23 == ++v24)
      goto LABEL_24;
  }
  *(_QWORD *)(v5[6] + 592) = v27;
  return 1;
}

uint64_t bssl::ext_srtp_parse_clienthello(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _BYTE **v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int16 *v9;
  unsigned __int8 *v10;
  BOOL v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int16 *v20;
  int v21;

  if (!a3)
    return 1;
  v3 = (_BYTE **)*a1;
  if (!**(_BYTE **)*a1)
    return 1;
  v4 = a3[1];
  v5 = v4 - 2;
  if (v4 < 2)
    goto LABEL_25;
  v6 = (unsigned __int16 *)*a3;
  v7 = *a3 + 2;
  *a3 = v7;
  a3[1] = v5;
  v8 = __rev16(*v6);
  v9 = (unsigned __int16 *)(v5 - v8);
  if (v5 < v8)
    goto LABEL_25;
  v10 = (unsigned __int8 *)(v7 + v8);
  *a3 = v7 + v8;
  a3[1] = (uint64_t)v9;
  v11 = v8 < 2 || v5 == v8;
  if (v11
    || (v12 = (unint64_t)v9 - 1, *a3 = (uint64_t)(v10 + 1), a3[1] = (uint64_t)v9 - 1, v13 = *v10, v12 < v13)
    || (*a3 = (uint64_t)&v10[v13 + 1], a3[1] = v12 - v13, v12 != v13))
  {
LABEL_25:
    ERR_put_error(16, 0, 116, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 1758);
    return 0;
  }
  else
  {
    v14 = v3[1];
    if (v14
      && ((v15 = (unint64_t *)*((_QWORD *)v14 + 26)) != 0
       || (v15 = (unint64_t *)*((_QWORD *)v3[13] + 78)) != 0)
      && (v16 = *v15) != 0)
    {
      v17 = 0;
      while (2)
      {
        if (v16 <= v17)
          v18 = 0;
        else
          v18 = *(_QWORD *)(v15[1] + 8 * v17);
        v19 = v8;
        v20 = (unsigned __int16 *)v7;
        do
        {
          if (v19 < 2)
            return 0;
          if (*(_QWORD *)(v18 + 8) == __rev16(*v20))
          {
            v21 = 0;
            *((_QWORD *)v3[6] + 74) = v18;
            LODWORD(v18) = 1;
            return (v21 | v18) & 1;
          }
          ++v20;
          v19 -= 2;
        }
        while (v19);
        ++v17;
        v21 = 1;
        if (v17 != v16)
          continue;
        break;
      }
      return (v21 | v18) & 1;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t bssl::ext_srtp_add_serverhello(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[48];
  uint64_t v7[6];
  _BYTE *v8;

  v2 = *a1;
  if (!*(_QWORD *)(*(_QWORD *)(*a1 + 48) + 592))
    return 1;
  v7[0] = 0;
  result = CBB_add_space((uint64_t)a2, v7, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v7[0] + 1) = 14;
    *(_BYTE *)v7[0] = 0;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v7, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v7);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v7, (uint64_t)v6, 2u, 0);
          if ((_DWORD)result)
          {
            v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 592) + 8);
            v8 = 0;
            result = CBB_add_space((uint64_t)v6, &v8, 2);
            if ((_DWORD)result)
            {
              v8[1] = v5;
              *v8 = BYTE1(v5);
              v8 = 0;
              result = CBB_add_space((uint64_t)v7, &v8, 1);
              if ((_DWORD)result)
              {
                *v8 = 0;
                return CBB_flush(a2) != 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_key_share_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  const void *v6;
  size_t v7;
  _BYTE v8[48];
  uint64_t v9[6];
  void *v10;

  if (*(unsigned __int16 *)(a1 + 30) < 0x304u)
    return 1;
  v9[0] = 0;
  result = CBB_add_space((uint64_t)a3, v9, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v9[0] + 1) = 51;
    *(_BYTE *)v9[0] = 0;
    result = CBB_flush(a3);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a3, (uint64_t)v9, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v9);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v9, (uint64_t)v8, 2u, 0);
          if ((_DWORD)result)
          {
            v6 = *(const void **)(a1 + 600);
            v7 = *(_QWORD *)(a1 + 608);
            v10 = 0;
            result = CBB_add_space((uint64_t)v8, &v10, v7);
            if ((_DWORD)result)
            {
              if (v7)
                memcpy(v10, v6, v7);
              return CBB_flush(a3) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_psk_key_exchange_modes_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _BYTE v5[48];
  uint64_t v6[6];
  _BYTE *v7;

  if (*(unsigned __int16 *)(a1 + 30) < 0x304u)
    return 1;
  v6[0] = 0;
  result = CBB_add_space((uint64_t)a3, v6, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v6[0] + 1) = 45;
    *(_BYTE *)v6[0] = 0;
    result = CBB_flush(a3);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a3, (uint64_t)v6, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v6);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v6, (uint64_t)v5, 1u, 0);
          if ((_DWORD)result)
          {
            v7 = 0;
            result = CBB_add_space((uint64_t)v5, &v7, 1);
            if ((_DWORD)result)
            {
              *v7 = 1;
              return CBB_flush(a3) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_psk_key_exchange_modes_parse_clienthello(uint64_t a1, _BYTE *a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  char *v6;
  size_t v7;
  size_t v8;

  if (!a3)
    return 1;
  v3 = a3[1];
  if (!v3)
    goto LABEL_8;
  v5 = *a3;
  v6 = (char *)(*a3 + 1);
  v7 = (size_t)(v3 - 1);
  *a3 = (unsigned __int8 *)v6;
  a3[1] = v3 - 1;
  v8 = *v5;
  if (v7 < v8)
    goto LABEL_8;
  *a3 = (unsigned __int8 *)&v6[v8];
  a3[1] = (unsigned __int8 *)(v7 - v8);
  if ((_DWORD)v8 && v7 == v8)
  {
    *(_DWORD *)(a1 + 1568) = *(_DWORD *)(a1 + 1568) & 0xFFFFFFEF | (16 * (memchr(v6, 1, v8) != 0));
    return 1;
  }
  else
  {
LABEL_8:
    *a2 = 50;
    return 0;
  }
}

uint64_t bssl::ext_early_data_add_clienthello(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _BYTE *v5;

  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 220) & 0x2000) != 0)
    return 1;
  if ((a1[1569] & 8) == 0)
    return 1;
  v5 = 0;
  result = CBB_add_space((uint64_t)a3, &v5, 2);
  if ((_DWORD)result)
  {
    v5[1] = 42;
    *v5 = 0;
    v5 = 0;
    result = CBB_add_space((uint64_t)a3, &v5, 2);
    if ((_DWORD)result)
    {
      v5[1] = 0;
      *v5 = 0;
      return CBB_flush(a3) != 0;
    }
  }
  return result;
}

uint64_t bssl::ext_early_data_parse_serverhello(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  int v7;
  uint64_t v8;
  __int16 v9;

  v3 = *a1;
  if (a3)
  {
    if (*(_QWORD *)(a3 + 8))
    {
      result = 0;
      *a2 = 50;
    }
    else
    {
      v8 = *(_QWORD *)(v3 + 48);
      v9 = *(_WORD *)(v8 + 220);
      if ((v9 & 0x40) != 0)
      {
        *(_DWORD *)(v8 + 256) = 2;
        *(_WORD *)(v8 + 220) = v9 | 0x400;
        return 1;
      }
      else
      {
        *a2 = 110;
        ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2177);
        return 0;
      }
    }
  }
  else
  {
    if ((*((_BYTE *)a1 + 1569) & 8) != 0)
    {
      v5 = *(_QWORD *)(v3 + 48);
      v6 = *(_WORD *)(v5 + 220);
      if ((v6 & 0x2000) == 0)
      {
        if ((v6 & 0x40) != 0)
          v7 = 4;
        else
          v7 = 6;
        *(_DWORD *)(v5 + 256) = v7;
      }
    }
    return 1;
  }
  return result;
}

uint64_t bssl::ext_early_data_parse_clienthello(_DWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;

  if (!a3 || *(_WORD *)(*(_QWORD *)a1 + 16) != 772)
    return 1;
  if (*(_QWORD *)(a3 + 8))
  {
    result = 0;
    *a2 = 50;
  }
  else
  {
    a1[392] |= 0x800u;
    return 1;
  }
  return result;
}

uint64_t bssl::ext_early_data_add_serverhello(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  _BYTE *v4;

  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 220) & 0x400) == 0)
    return 1;
  v4 = 0;
  result = CBB_add_space((uint64_t)a2, &v4, 2);
  if ((_DWORD)result)
  {
    v4[1] = 42;
    *v4 = 0;
    v4 = 0;
    result = CBB_add_space((uint64_t)a2, &v4, 2);
    if ((_DWORD)result)
    {
      v4[1] = 0;
      *v4 = 0;
      return CBB_flush(a2) != 0;
    }
  }
  return result;
}

uint64_t bssl::ext_supported_versions_add_clienthello(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t result;
  uint64_t v7;
  char v9;
  unsigned int v10;
  int v11;
  _BYTE v12[48];
  uint64_t v13[6];
  _BYTE *v14;

  if (*(unsigned __int16 *)(a1 + 30) < 0x304u)
    return 1;
  v7 = *(_QWORD *)a1;
  if (*(unsigned __int16 *)(a1 + 28) <= 0x303u)
    a3 = a2;
  v13[0] = 0;
  result = CBB_add_space((uint64_t)a3, v13, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v13[0] + 1) = 43;
    *(_BYTE *)v13[0] = 0;
    result = CBB_flush(a3);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a3, (uint64_t)v13, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v13);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v13, (uint64_t)v12, 1u, 0);
          if ((_DWORD)result)
          {
            if ((*(_WORD *)(*(_QWORD *)(v7 + 104) + 760) & 0x20) != 0)
            {
              v9 = *(_BYTE *)(a1 + 1618);
              v14 = 0;
              result = CBB_add_space((uint64_t)v12, &v14, 2);
              if (!(_DWORD)result)
                return result;
              v14[1] = v9 & 0xF0 | 0xA;
              *v14 = v9 & 0xF0 | 0xA;
            }
            if (a4 == 1)
              v10 = 772;
            else
              v10 = 0;
            v11 = bssl::ssl_add_supported_versions(a1, (uint64_t)v12, v10);
            result = 0;
            if (v11)
              return CBB_flush(a3) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_cookie_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  const void *v6;
  size_t v7;
  _BYTE v8[48];
  uint64_t v9[6];
  void *v10;

  if (!*(_QWORD *)(a1 + 528))
    return 1;
  v9[0] = 0;
  result = CBB_add_space((uint64_t)a3, v9, 2);
  if ((_DWORD)result)
  {
    *(_BYTE *)(v9[0] + 1) = 44;
    *(_BYTE *)v9[0] = 0;
    result = CBB_flush(a3);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a3, (uint64_t)v9, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_flush(v9);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)v9, (uint64_t)v8, 2u, 0);
          if ((_DWORD)result)
          {
            v6 = *(const void **)(a1 + 520);
            v7 = *(_QWORD *)(a1 + 528);
            v10 = 0;
            result = CBB_add_space((uint64_t)v8, &v10, v7);
            if ((_DWORD)result)
            {
              if (v7)
                memcpy(v10, v6, v7);
              return CBB_flush(a3) != 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_quic_transport_params_add_clienthello(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return bssl::ext_quic_transport_params_add_clienthello_impl(a1, a3, 0);
}

uint64_t bssl::ext_quic_transport_params_parse_serverhello(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t result;

  v3 = *a1;
  if (!a3)
  {
    if ((*(_WORD *)(a1[1] + 237) & 0x200) == 0 && *(_QWORD *)(v3 + 152))
    {
      result = 0;
      *a2 = 109;
      return result;
    }
    return 1;
  }
  v4 = *(_QWORD *)(v3 + 48);
  v5 = (_QWORD *)(v4 + 576);
  v7 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(v4 + 576);
  if (v8)
  {
    v10 = *(_QWORD *)(v8 - 8);
    v9 = (void *)(v8 - 8);
    v11 = v10 + 8;
    if (v10 != -8)
      bzero(v9, v11);
    free(v9);
  }
  *v5 = 0;
  *(_QWORD *)(v4 + 584) = 0;
  if (!v6)
    return 1;
  if (v6 <= 0xFFFFFFFFFFFFFFF7)
  {
    v12 = malloc_type_malloc(v6 + 8, 0x30772F57uLL);
    if (v12)
    {
      *v12 = v6;
      v13 = v12 + 1;
      *(_QWORD *)(v4 + 576) = v13;
      *(_QWORD *)(v4 + 584) = v6;
      memmove(v13, v7, v6);
      return 1;
    }
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  result = 0;
  *v5 = 0;
  return result;
}

uint64_t bssl::ext_quic_transport_params_parse_clienthello(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  return bssl::ext_quic_transport_params_parse_clienthello_impl(a1, a2, a3, 0);
}

uint64_t bssl::ext_quic_transport_params_add_serverhello(_QWORD *a1, uint64_t *a2)
{
  return bssl::ext_quic_transport_params_add_serverhello_impl(a1, a2, 0);
}

uint64_t bssl::ext_quic_transport_params_add_clienthello_legacy(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  return bssl::ext_quic_transport_params_add_clienthello_impl(a1, a3, 1);
}

uint64_t bssl::ext_quic_transport_params_parse_serverhello_legacy(uint64_t *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  _QWORD *v12;
  void *v13;
  uint64_t result;

  v3 = *a1;
  if (!a3)
  {
    if ((*(_WORD *)(a1[1] + 237) & 0x200) != 0 && *(_QWORD *)(v3 + 152))
    {
      result = 0;
      *a2 = 109;
      return result;
    }
    return 1;
  }
  v4 = *(_QWORD *)(v3 + 48);
  v5 = (_QWORD *)(v4 + 576);
  v7 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)(v4 + 576);
  if (v8)
  {
    v10 = *(_QWORD *)(v8 - 8);
    v9 = (void *)(v8 - 8);
    v11 = v10 + 8;
    if (v10 != -8)
      bzero(v9, v11);
    free(v9);
  }
  *v5 = 0;
  *(_QWORD *)(v4 + 584) = 0;
  if (!v6)
    return 1;
  if (v6 <= 0xFFFFFFFFFFFFFFF7)
  {
    v12 = malloc_type_malloc(v6 + 8, 0x30772F57uLL);
    if (v12)
    {
      *v12 = v6;
      v13 = v12 + 1;
      *(_QWORD *)(v4 + 576) = v13;
      *(_QWORD *)(v4 + 584) = v6;
      memmove(v13, v7, v6);
      return 1;
    }
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  result = 0;
  *v5 = 0;
  return result;
}

uint64_t bssl::ext_quic_transport_params_parse_clienthello_legacy(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  return bssl::ext_quic_transport_params_parse_clienthello_impl(a1, a2, a3, 1);
}

uint64_t bssl::ext_quic_transport_params_add_serverhello_legacy(_QWORD *a1, uint64_t *a2)
{
  return bssl::ext_quic_transport_params_add_serverhello_impl(a1, a2, 1);
}

uint64_t bssl::cert_compression_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  __int16 v11;
  _BYTE v12[48];
  uint64_t v13[6];
  _BYTE *v14;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 104);
  v4 = *(_QWORD *)(v3 + 632);
  if (!v4)
    return 1;
  v6 = *(_QWORD *)(v3 + 640);
  v7 = v6 + 24 * v4;
  v8 = 1;
  while (2)
  {
    for (v6 += 24; !*(_QWORD *)(v6 - 16); v6 += 24)
    {
      if (v6 == v7)
      {
        if ((v8 & 1) != 0)
          return 1;
        return CBB_flush(a3) != 0;
      }
    }
    if ((v8 & 1) == 0)
      goto LABEL_23;
    v14 = 0;
    result = CBB_add_space((uint64_t)a3, &v14, 2);
    if ((_DWORD)result)
    {
      v14[1] = 27;
      *v14 = 0;
      result = CBB_flush(a3);
      if ((_DWORD)result)
      {
        result = cbb_add_child((uint64_t)a3, (uint64_t)v13, 2u, 0);
        if ((_DWORD)result)
        {
          result = CBB_flush(v13);
          if ((_DWORD)result)
          {
            result = cbb_add_child((uint64_t)v13, (uint64_t)v12, 1u, 0);
            if ((_DWORD)result)
            {
LABEL_23:
              v11 = *(_WORD *)(v6 - 8);
              v14 = 0;
              result = CBB_add_space((uint64_t)v12, &v14, 2);
              if ((_DWORD)result)
              {
                v8 = 0;
                v14[1] = v11;
                *v14 = HIBYTE(v11);
                if (v6 != v7)
                  continue;
                return CBB_flush(a3) != 0;
              }
            }
          }
        }
      }
    }
    return result;
  }
}

BOOL bssl::cert_compression_parse_serverhello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 == 0;
}

uint64_t bssl::cert_compression_parse_clienthello(bssl **a1, uint64_t a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v14;
  unsigned __int16 *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  _QWORD *v26;
  _WORD *v27;
  size_t v28;
  unsigned int v29;
  const ssl_st *v30;
  uint64_t v31;
  unsigned __int16 *v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned __int16 *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;

  if (!a3)
    return 1;
  v3 = a3[1];
  if (!v3)
    return 0;
  v5 = *((_QWORD *)*a1 + 13);
  v6 = *(_QWORD *)(v5 + 632);
  v7 = *a3;
  v8 = *a3 + 1;
  v9 = v3 - 1;
  *a3 = v8;
  a3[1] = v3 - 1;
  v10 = *v7;
  v11 = (unint64_t)(v3 - 1) >= v10;
  v12 = (unint64_t)&v3[-v10 - 1];
  if (!v11)
    return 0;
  *a3 = &v8[v10];
  a3[1] = (unsigned __int8 *)v12;
  if (v12)
    return 0;
  if (!(_DWORD)v10 || (v9 & 1) != 0)
    return 0;
  if (v10 >= 2)
  {
    v26 = malloc_type_malloc((v9 & 0xFE) + 8, 0x30772F57uLL);
    if (!v26)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      return 0;
    }
    *v26 = v9 & 0xFE;
    v16 = (unsigned __int16 *)(v26 + 1);
    v17 = (unint64_t)v9 >> 1;
    if (v6)
      goto LABEL_15;
LABEL_30:
    v27 = v16;
    v28 = v17;
    while (v28)
    {
      v29 = *(unsigned __int16 *)v8;
      v8 += 2;
      *v27++ = bswap32(v29) >> 16;
      --v28;
      v9 -= 2;
      if (!v9)
      {
        v19 = 0;
LABEL_34:
        qsort(v16, v17, 2uLL, (int (__cdecl *)(const void *, const void *))bssl::compare_uint16_t);
        if (v10 < 4)
        {
LABEL_41:
          if (v19 < v6 && bssl::ssl_protocol_version(*a1, v30) >= 0x304)
          {
            *((_DWORD *)a1 + 392) |= 0x100000u;
            *((_WORD *)a1 + 356) = *(_WORD *)(*(_QWORD *)(v5 + 640) + 24 * v19 + 16);
          }
          v14 = 1;
          goto LABEL_46;
        }
        if (v17 <= 2)
          v31 = 2;
        else
          v31 = v17;
        v32 = v16 + 1;
        v33 = *v16;
        v34 = v31 - 1;
        while (1)
        {
          v36 = *v32++;
          v35 = v36;
          if (v33 == v36)
            break;
          v33 = v35;
          if (!--v34)
            goto LABEL_41;
        }
        v14 = 0;
        v40 = *((_QWORD *)v16 - 1);
        v37 = v16 - 4;
        v39 = v40 + 8;
        if (v40 != -8)
          goto LABEL_48;
        goto LABEL_49;
      }
    }
    goto LABEL_45;
  }
  v16 = 0;
  v17 = (unint64_t)v9 >> 1;
  if (!v6)
    goto LABEL_30;
LABEL_15:
  v18 = 0;
  v19 = v6;
  while (v18 != v17)
  {
    v20 = 0;
    v21 = *(unsigned __int16 *)v8;
    v8 += 2;
    v9 -= 2;
    v22 = __rev16(v21);
    v23 = v18 + 1;
    v16[v18] = v22;
    v24 = (unsigned __int16 *)(*(_QWORD *)(v5 + 640) + 16);
    while (*v24 != v22 || *((_QWORD *)v24 - 2) == 0)
    {
      v24 += 12;
      if (v6 == ++v20)
        goto LABEL_18;
    }
    if (v20 < v19)
      v19 = v20;
LABEL_18:
    v18 = v23;
    if (!v9)
      goto LABEL_34;
  }
LABEL_45:
  v14 = 0;
LABEL_46:
  if (v16)
  {
    v38 = *((_QWORD *)v16 - 1);
    v37 = v16 - 4;
    v39 = v38 + 8;
    if (v38 != -8)
LABEL_48:
      bzero(v37, v39);
LABEL_49:
    free(v37);
  }
  return v14;
}

uint64_t bssl::cert_compression_add_serverhello()
{
  return 1;
}

uint64_t bssl::ext_delegated_credential_add_clienthello()
{
  return 1;
}

uint64_t bssl::ext_delegated_credential_parse_clienthello(unint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned __int16 *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD v11[2];

  if (!a3)
    return 1;
  if (*(_WORD *)(*a1 + 16) != 772)
    return 1;
  v3 = a3[1];
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    return 0;
  v7 = (unsigned __int16 *)*a3;
  v8 = *a3 + 2;
  *a3 = v8;
  a3[1] = v5;
  v9 = __rev16(*v7);
  if (v5 < v9)
    return 0;
  *a3 = v8 + v9;
  a3[1] = v5 - v9;
  v11[0] = v8;
  v11[1] = v9;
  if (v9)
    v10 = v5 == v9;
  else
    v10 = 0;
  if (v10)
    return bssl::parse_u16_array((uint64_t)v11, a1 + 83);
  else
    return 0;
}

uint64_t bssl::ext_alps_add_clienthello(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return bssl::ext_alps_add_clienthello_impl(a1, a3, 1);
}

uint64_t bssl::ext_alps_parse_serverhello(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t result;

  if (!a3)
    return 1;
  if (*(_WORD *)(*a1 + 16) == 772)
  {
    v5 = a1[188];
    v6 = (_QWORD *)(v5 + 408);
    v7 = *(const void **)a3;
    v8 = *(_QWORD *)(a3 + 8);
    v9 = *(_QWORD *)(v5 + 408);
    if (v9)
    {
      v11 = *(_QWORD *)(v9 - 8);
      v10 = (void *)(v9 - 8);
      v12 = v11 + 8;
      if (v11 != -8)
        bzero(v10, v12);
      free(v10);
    }
    *v6 = 0;
    *(_QWORD *)(v5 + 416) = 0;
    if (!v8)
      goto LABEL_11;
    if (v8 <= 0xFFFFFFFFFFFFFFF7)
    {
      v13 = malloc_type_malloc(v8 + 8, 0x30772F57uLL);
      if (v13)
      {
        *v13 = v8;
        v14 = v13 + 1;
        *(_QWORD *)(v5 + 408) = v14;
        *(_QWORD *)(v5 + 416) = v8;
        memmove(v14, v7, v8);
LABEL_11:
        *(_BYTE *)(a1[188] + 424) |= 0x40u;
        return 1;
      }
    }
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    result = 0;
    *v6 = 0;
    *a2 = 80;
  }
  else
  {
    *a2 = 110;
    ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2984);
    return 0;
  }
  return result;
}

uint64_t bssl::ext_alps_add_serverhello(_QWORD *a1, uint64_t *a2)
{
  return bssl::ext_alps_add_serverhello_impl(a1, a2, 1);
}

uint64_t bssl::ext_alps_add_clienthello_old(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return bssl::ext_alps_add_clienthello_impl(a1, a3, 0);
}

uint64_t bssl::ext_alps_parse_serverhello_old(_QWORD *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t result;

  if (!a3)
    return 1;
  if (*(_WORD *)(*a1 + 16) == 772)
  {
    v5 = a1[188];
    v6 = (_QWORD *)(v5 + 408);
    v7 = *(const void **)a3;
    v8 = *(_QWORD *)(a3 + 8);
    v9 = *(_QWORD *)(v5 + 408);
    if (v9)
    {
      v11 = *(_QWORD *)(v9 - 8);
      v10 = (void *)(v9 - 8);
      v12 = v11 + 8;
      if (v11 != -8)
        bzero(v10, v12);
      free(v10);
    }
    *v6 = 0;
    *(_QWORD *)(v5 + 416) = 0;
    if (!v8)
      goto LABEL_11;
    if (v8 <= 0xFFFFFFFFFFFFFFF7)
    {
      v13 = malloc_type_malloc(v8 + 8, 0x30772F57uLL);
      if (v13)
      {
        *v13 = v8;
        v14 = v13 + 1;
        *(_QWORD *)(v5 + 408) = v14;
        *(_QWORD *)(v5 + 416) = v8;
        memmove(v14, v7, v8);
LABEL_11:
        *(_BYTE *)(a1[188] + 424) |= 0x40u;
        return 1;
      }
    }
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    result = 0;
    *v6 = 0;
    *a2 = 80;
  }
  else
  {
    *a2 = 110;
    ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2984);
    return 0;
  }
  return result;
}

uint64_t bssl::ext_alps_add_serverhello_old(_QWORD *a1, uint64_t *a2)
{
  return bssl::ext_alps_add_serverhello_impl(a1, a2, 0);
}

uint64_t bssl::ext_quic_transport_params_add_clienthello_impl(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t result;
  __int16 v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  _QWORD v13[6];
  void *v14;

  v3 = a1[1];
  v4 = *(_QWORD *)(*a1 + 152);
  if (!*(_QWORD *)(v3 + 168))
  {
    if (!v4)
      return 1;
LABEL_16:
    ERR_put_error(16, 0, 305, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2578);
    return 0;
  }
  if (!v4)
    goto LABEL_16;
  v5 = *(_WORD *)(v3 + 237) & 0x200;
  if (a3 != v5 >> 9)
    return 1;
  v13[0] = 0;
  result = CBB_add_space((uint64_t)a2, v13, 2);
  if ((_DWORD)result)
  {
    v9 = v5 ? -91 : 57;
    *(_BYTE *)(v13[0] + 1) = v9;
    *(_BYTE *)v13[0] = HIBYTE(v9);
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v13, 2u, 0);
      if ((_DWORD)result)
      {
        v10 = a1[1];
        v11 = *(const void **)(v10 + 160);
        v12 = *(_QWORD *)(v10 + 168);
        v14 = 0;
        result = CBB_add_space((uint64_t)v13, &v14, v12);
        if ((_DWORD)result)
        {
          if (v12)
            memcpy(v14, v11, v12);
          return CBB_flush(a2) != 0;
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_quic_transport_params_parse_clienthello_impl(_QWORD *a1, _BYTE *a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t result;

  v5 = *(_QWORD *)(*a1 + 152);
  if (!a3)
  {
    v16 = a1[1];
    if (v5)
    {
      if (((*(_WORD *)(v16 + 237) & 0x200) == 0) != a4)
      {
        result = 0;
        *a2 = 109;
        return result;
      }
    }
    else if (*(_QWORD *)(v16 + 168))
    {
      ERR_put_error(16, 0, 305, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2664);
      result = 0;
      *a2 = 80;
      return result;
    }
    return 1;
  }
  if (!v5)
  {
    if ((a4 & 1) == 0)
    {
      result = 0;
      *a2 = 110;
      return result;
    }
    return 1;
  }
  if (((*(_WORD *)(a1[1] + 237) & 0x200) == 0) == a4)
    return 1;
  v6 = *(_QWORD *)(*a1 + 48);
  v7 = (_QWORD *)(v6 + 576);
  v9 = *(const void **)a3;
  v8 = *(_QWORD *)(a3 + 8);
  v10 = *(_QWORD *)(v6 + 576);
  if (v10)
  {
    v12 = *(_QWORD *)(v10 - 8);
    v11 = (void *)(v10 - 8);
    v13 = v12 + 8;
    if (v12 != -8)
      bzero(v11, v13);
    free(v11);
  }
  *v7 = 0;
  *(_QWORD *)(v6 + 584) = 0;
  if (!v8)
    return 1;
  if (v8 <= 0xFFFFFFFFFFFFFFF7)
  {
    v14 = malloc_type_malloc(v8 + 8, 0x30772F57uLL);
    if (v14)
    {
      *v14 = v8;
      v15 = v14 + 1;
      *(_QWORD *)(v6 + 576) = v15;
      *(_QWORD *)(v6 + 584) = v8;
      memmove(v15, v9, v8);
      return 1;
    }
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  result = 0;
  *v7 = 0;
  return result;
}

uint64_t bssl::ext_quic_transport_params_add_serverhello_impl(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  __int16 v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  _QWORD v12[6];
  void *v13;

  if (!*(_QWORD *)(*a1 + 152) && (a3 & 1) != 0)
    return 1;
  v6 = a1[1];
  if (*(_QWORD *)(v6 + 168))
  {
    v7 = *(_WORD *)(v6 + 237) & 0x200;
    if (a3 == v7 >> 9)
    {
      v12[0] = 0;
      result = CBB_add_space((uint64_t)a2, v12, 2);
      if ((_DWORD)result)
      {
        v8 = v7 ? -91 : 57;
        *(_BYTE *)(v12[0] + 1) = v8;
        *(_BYTE *)v12[0] = HIBYTE(v8);
        result = CBB_flush(a2);
        if ((_DWORD)result)
        {
          result = cbb_add_child((uint64_t)a2, (uint64_t)v12, 2u, 0);
          if ((_DWORD)result)
          {
            v9 = a1[1];
            v10 = *(const void **)(v9 + 160);
            v11 = *(_QWORD *)(v9 + 168);
            v13 = 0;
            result = CBB_add_space((uint64_t)v12, &v13, v11);
            if ((_DWORD)result)
            {
              if (v11)
                memcpy(v13, v10, v11);
              return CBB_flush(a2) != 0;
            }
          }
        }
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    ERR_put_error(16, 0, 305, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/extensions.cc", 2717);
    return 0;
  }
  return result;
}

uint64_t bssl::ext_alps_add_clienthello_impl(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  size_t v14;
  _BYTE v15[48];
  uint64_t v16[6];
  uint64_t v17[6];
  void *v18;

  if (*(unsigned __int16 *)(a1 + 30) < 0x304u)
    return 1;
  v5 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v5 + 128))
    return 1;
  if (!*(_QWORD *)(v5 + 136))
    return 1;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)a1 + 48) + 220) & 0x20) != 0)
    return 1;
  v6 = *(_WORD *)(v5 + 237) & 0x2000;
  if (a3 != v6 >> 13)
    return 1;
  v17[0] = 0;
  result = CBB_add_space((uint64_t)a2, v17, 2);
  if ((_DWORD)result)
  {
    v8 = v6 ? -51 : 105;
    *(_BYTE *)(v17[0] + 1) = v8;
    *(_BYTE *)v17[0] = 68;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v17, 2u, 0);
      if ((_DWORD)result)
      {
        result = CBB_add_u16_length_prefixed(v17, (uint64_t)v16);
        if ((_DWORD)result)
        {
          v9 = *(_QWORD *)(a1 + 8);
          v10 = *(_QWORD *)(v9 + 136);
          if (v10)
          {
            v11 = *(_QWORD *)(v9 + 144);
            v12 = v11 + 32 * v10;
            while (1)
            {
              result = CBB_flush(v16);
              if (!(_DWORD)result)
                break;
              result = cbb_add_child((uint64_t)v16, (uint64_t)v15, 1u, 0);
              if (!(_DWORD)result)
                break;
              v13 = *(const void **)v11;
              v14 = *(_QWORD *)(v11 + 8);
              v18 = 0;
              result = CBB_add_space((uint64_t)v15, &v18, v14);
              if (!(_DWORD)result)
                break;
              if (v14)
                memcpy(v18, v13, v14);
              v11 += 32;
              if (v11 == v12)
                return CBB_flush(a2) != 0;
            }
          }
          else
          {
            return CBB_flush(a2) != 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ext_alps_add_serverhello_impl(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t result;
  unsigned int v6;
  char v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  _QWORD v12[6];
  void *v13;

  v3 = a1[188];
  if (!v3)
    return 1;
  if ((*(_BYTE *)(v3 + 424) & 0x40) == 0)
    return 1;
  if ((*(_WORD *)(*(_QWORD *)(*a1 + 48) + 220) & 0x400) != 0)
    return 1;
  v6 = *(_WORD *)(a1[1] + 237) & 0x2000;
  if (a3 != v6 >> 13)
    return 1;
  v12[0] = 0;
  result = CBB_add_space((uint64_t)a2, v12, 2);
  if ((_DWORD)result)
  {
    v8 = v6 ? -51 : 105;
    *(_BYTE *)(v12[0] + 1) = v8;
    *(_BYTE *)v12[0] = 68;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v12, 2u, 0);
      if ((_DWORD)result)
      {
        v9 = a1[188];
        v10 = *(const void **)(v9 + 392);
        v11 = *(_QWORD *)(v9 + 400);
        v13 = 0;
        result = CBB_add_space((uint64_t)v12, &v13, v11);
        if ((_DWORD)result)
        {
          if (v11)
            memcpy(v13, v10, v11);
          return CBB_flush(a2) != 0;
        }
      }
    }
  }
  return result;
}

void *bssl::tls_extension_find(bssl *this, unsigned int *a2)
{
  uint64_t v2;
  void *v3;

  v2 = 0;
  if ((int)a2 > 13171)
  {
    if ((int)a2 <= 30031)
    {
      switch((_DWORD)a2)
      {
        case 0x3374:
          v3 = &unk_24C0C78A8;
          LODWORD(a2) = 10;
          break;
        case 0x4469:
          v3 = &unk_24C0C7AD8;
          LODWORD(a2) = 24;
          break;
        case 0x44CD:
          v3 = &unk_24C0C7AB0;
          LODWORD(a2) = 23;
          break;
        default:
          return (void *)v2;
      }
    }
    else if ((int)a2 > 65280)
    {
      if ((_DWORD)a2 == 65281)
      {
        v3 = &unk_24C0C7790;
        LODWORD(a2) = 3;
      }
      else
      {
        if ((_DWORD)a2 != 65445)
          return (void *)v2;
        v3 = &unk_24C0C7A38;
        LODWORD(a2) = 20;
      }
    }
    else if ((_DWORD)a2 == 30032)
    {
      v3 = &unk_24C0C78F8;
      LODWORD(a2) = 12;
    }
    else
    {
      if ((_DWORD)a2 != 65037)
        return (void *)v2;
      v3 = &unk_24C0C7740;
      LODWORD(a2) = 1;
    }
LABEL_36:
    *(_DWORD *)this = (_DWORD)a2;
    return v3;
  }
  v3 = &bssl::kExtensions;
  switch((int)a2)
  {
    case 0:
      goto LABEL_36;
    case 5:
      v3 = &unk_24C0C7858;
      LODWORD(a2) = 8;
      goto LABEL_36;
    case 10:
      v3 = &unk_24C0C77B8;
      LODWORD(a2) = 4;
      goto LABEL_36;
    case 11:
      v3 = &unk_24C0C77E0;
      LODWORD(a2) = 5;
      goto LABEL_36;
    case 13:
      v3 = &unk_24C0C7880;
      LODWORD(a2) = 9;
      goto LABEL_36;
    case 14:
      v3 = &unk_24C0C7920;
      LODWORD(a2) = 13;
      goto LABEL_36;
    case 16:
      v3 = &unk_24C0C7830;
      LODWORD(a2) = 7;
      goto LABEL_36;
    case 18:
      v3 = &unk_24C0C78D0;
      LODWORD(a2) = 11;
      goto LABEL_36;
    case 23:
      v3 = &unk_24C0C7768;
      LODWORD(a2) = 2;
      goto LABEL_36;
    case 27:
      v3 = &unk_24C0C7A60;
      LODWORD(a2) = 21;
      goto LABEL_36;
    case 34:
      v3 = &unk_24C0C7A88;
      LODWORD(a2) = 22;
      goto LABEL_36;
    case 35:
      v3 = &unk_24C0C7808;
      LODWORD(a2) = 6;
      goto LABEL_36;
    case 42:
      v3 = &unk_24C0C7998;
      LODWORD(a2) = 16;
      goto LABEL_36;
    case 43:
      v3 = &unk_24C0C79C0;
      LODWORD(a2) = 17;
      goto LABEL_36;
    case 44:
      v3 = &unk_24C0C79E8;
      LODWORD(a2) = 18;
      goto LABEL_36;
    case 45:
      v3 = &unk_24C0C7970;
      LODWORD(a2) = 15;
      goto LABEL_36;
    case 51:
      v3 = &unk_24C0C7948;
      LODWORD(a2) = 14;
      goto LABEL_36;
    case 57:
      v3 = &unk_24C0C7A10;
      LODWORD(a2) = 19;
      goto LABEL_36;
    default:
      return (void *)v2;
  }
  return (void *)v2;
}

uint64_t bssl::decrypt_ticket_with_cipher_ctx(unsigned __int8 **a1, EVP_CIPHER_CTX *a2, HMAC_CTX *a3, uint64_t a4, unint64_t a5)
{
  const EVP_CIPHER *cipher;
  uint64_t (*v11)(EVP_CIPHER_CTX *, uint64_t, _QWORD, unsigned __int8 *);
  int v12;
  unsigned int iv_len;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t pkey_type;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  uint64_t v28;
  int8x8_t v29;
  unsigned __int8 *v30;
  int8x8_t *v31;
  uint64_t v32;
  int8x8_t v33;
  int8x8_t v34;
  int8x8_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  char v39;
  unint64_t v41;
  unint64_t v42;
  unsigned __int8 *v43;
  _QWORD *v44;
  unint64_t v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  size_t v49;
  uint64_t result;
  unsigned __int8 *v51;
  uint64_t v52;
  size_t v53;
  int outl[2];
  unsigned __int8 md[16];
  _QWORD v56[7];

  v56[6] = *MEMORY[0x24BDAC8D0];
  cipher = a2->cipher;
  if ((HIDWORD(a2->cipher->flags) & 0x3F) != 6)
    goto LABEL_9;
  *(_DWORD *)md = 0;
  v11 = *(uint64_t (**)(EVP_CIPHER_CTX *, uint64_t, _QWORD, unsigned __int8 *))&cipher->ctx_size;
  if (!v11)
  {
    v14 = 104;
    v15 = 625;
LABEL_8:
    ERR_put_error(30, 0, v14, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/cipher/cipher.c", v15);
    goto LABEL_9;
  }
  v12 = v11(a2, 25, 0, md);
  if (v12 == -1)
  {
    v14 = 105;
    v15 = 631;
    goto LABEL_8;
  }
  if (v12 == 1)
  {
    iv_len = *(_DWORD *)md;
    goto LABEL_10;
  }
LABEL_9:
  iv_len = a2->cipher->iv_len;
LABEL_10:
  v16 = iv_len;
  pkey_type = a3->md->pkey_type;
  if (a5 < iv_len + pkey_type + 17)
    return 2;
  v18 = a5 - pkey_type;
  if (a5 < pkey_type)
    goto LABEL_49;
  ((void (*)(EVP_MD_CTX *, uint64_t, unint64_t))a3->md_ctx.digest->init)(&a3->md_ctx, a4, a5 - pkey_type);
  HMAC_Final(a3, md, 0);
  if (!(_DWORD)pkey_type)
    goto LABEL_28;
  if (pkey_type < 8)
  {
    v19 = 0;
    v20 = 0;
    goto LABEL_24;
  }
  if (pkey_type >= 0x20)
  {
    v19 = pkey_type & 0xFFFFFFE0;
    v21 = (int8x16_t *)v56;
    v22 = (int8x16_t *)(v18 + a4 + 16);
    v23 = 0uLL;
    v24 = v19;
    v25 = 0uLL;
    do
    {
      v23 = vorrq_s8(veorq_s8(v22[-1], v21[-1]), v23);
      v25 = vorrq_s8(veorq_s8(*v22, *v21), v25);
      v21 += 2;
      v22 += 2;
      v24 -= 32;
    }
    while (v24);
    v26 = vorrq_s8(v25, v23);
    *(int8x8_t *)v26.i8 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
    v27 = v26.i64[0] | HIDWORD(v26.i64[0]) | ((unint64_t)(v26.i64[0] | HIDWORD(v26.i64[0])) >> 16);
    v20 = v27 | BYTE1(v27);
    if (v19 == pkey_type)
      goto LABEL_27;
    if ((pkey_type & 0x18) == 0)
    {
LABEL_24:
      v37 = v19 - pkey_type;
      v38 = &md[v19];
      do
      {
        v39 = *v38++;
        v20 |= *(_BYTE *)(a4 + a5 + v37) ^ v39;
      }
      while (!__CFADD__(v37++, 1));
      goto LABEL_27;
    }
  }
  else
  {
    v20 = 0;
    v19 = 0;
  }
  v28 = v19;
  v19 = pkey_type & 0xFFFFFFF8;
  v29 = (int8x8_t)v20;
  v30 = &md[v28];
  v31 = (int8x8_t *)(a4 + a5 + v28 - pkey_type);
  v32 = v28 - v19;
  do
  {
    v33 = *(int8x8_t *)v30;
    v30 += 8;
    v34 = v33;
    v35 = *v31++;
    v29 = vorr_s8(veor_s8(v35, v34), v29);
    v32 += 8;
  }
  while (v32);
  v36 = *(_QWORD *)&v29 | HIDWORD(*(_QWORD *)&v29) | ((*(_QWORD *)&v29 | HIDWORD(*(_QWORD *)&v29)) >> 16);
  v20 = v36 | BYTE1(v36);
  if (v19 != pkey_type)
    goto LABEL_24;
LABEL_27:
  if (v20)
    return 2;
LABEL_28:
  v41 = v16 + 16;
  v42 = v18 - v41;
  if (v18 < v41)
    goto LABEL_49;
  if (v42 > 0x7FFFFFFE)
    return 2;
  if (v18 == v41)
  {
    v43 = 0;
  }
  else
  {
    v44 = malloc_type_malloc(v42 + 8, 0x30772F57uLL);
    if (!v44)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      return 3;
    }
    *v44 = v42;
    v43 = (unsigned __int8 *)(v44 + 1);
  }
  *(_QWORD *)outl = 0;
  if (!EVP_DecryptUpdate(a2, v43, &outl[1], (const unsigned __int8 *)(a4 + v41), v18 - v41)
    || !EVP_DecryptFinal_ex(a2, &v43[outl[1]], outl))
  {
    ERR_clear_error();
    if (v43)
    {
      v52 = *((_QWORD *)v43 - 1);
      v51 = v43 - 8;
      v53 = v52 + 8;
      if (v52 != -8)
        bzero(v51, v53);
      free(v51);
    }
    return 2;
  }
  v45 = outl[0] + (uint64_t)outl[1];
  if (v42 < v45)
LABEL_49:
    abort();
  v46 = *a1;
  if (*a1)
  {
    v48 = *((_QWORD *)v46 - 1);
    v47 = v46 - 8;
    v49 = v48 + 8;
    if (v48 != -8)
      bzero(v47, v49);
    free(v47);
  }
  result = 0;
  *a1 = v43;
  a1[1] = (unsigned __int8 *)v45;
  return result;
}

uint64_t ec_bignum_to_felem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  unint64_t v30;
  int8x16_t *v31;
  int8x16_t v32;
  unint64_t v33;
  int8x16_t v34;
  int8x16_t v35;
  unint64_t v36;
  int8x8_t v37;
  unint64_t v38;
  int8x8_t *v39;
  int8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  char *v50;
  char v51;
  int8x16_t *v52;
  int8x16_t *v53;
  uint64_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint64_t v58;
  int8x8_t *v59;
  int8x8_t *v60;
  uint64_t v61;
  int8x8_t v62;
  _BYTE v63[66];
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v5 = *(unsigned int *)(a1 + 328);
  v6 = (int)v5;
  v7 = v5 & ((int)v5 >> 31);
  v8 = 8 * v5 - 8;
  v9 = *(_DWORD *)(a1 + 328);
  while (1)
  {
    v10 = __OFSUB__(v9--, 1);
    if (v9 < 0 != v10)
      break;
    v11 = *(_QWORD *)(a1 + 320);
    v12 = *(_QWORD *)(v11 + v8);
    v8 -= 8;
    if (v12)
    {
      v7 = v9 + 1;
      goto LABEL_9;
    }
  }
  if ((v5 & 0x80000000) != 0)
  {
    v11 = *(_QWORD *)(a1 + 320);
LABEL_9:
    v14 = v7 - 1;
    v15 = *(_QWORD *)(v11 + 8 * v14);
    v16 = v15 != 0;
    v17 = HIDWORD(v15) != 0;
    if (HIDWORD(v15))
      v15 >>= 32;
    v18 = v15 >> 16 != 0;
    if (v15 >> 16)
      v15 >>= 16;
    v19 = v15 > 0xFF;
    if (v15 > 0xFF)
      v15 >>= 8;
    v20 = v15 > 0xF;
    if (v15 > 0xF)
      v15 >>= 4;
    v21 = v15 > 3;
    if (v15 > 3)
      v15 >>= 2;
    v22 = v16 | (v14 << 6) | (32 * v17) | (16 * v18) | (8 * v19) | (4 * v20) | (2 * v21);
    if (v15 > 1)
      ++v22;
    v13 = (v22 + 7) >> 3;
    if (*(_DWORD *)(a3 + 16))
      goto LABEL_24;
  }
  else
  {
    v13 = 0;
    if (*(_DWORD *)(a3 + 16))
      goto LABEL_24;
  }
  if (*(_DWORD *)(a1 + 336))
    goto LABEL_24;
  v23 = *(uint64_t **)a3;
  v24 = *(int *)(a3 + 8);
  if ((bn_cmp_words_consttime(*(uint64_t **)a3, v24, *(uint64_t **)(a1 + 320), v6) & 0x80000000) == 0)
    goto LABEL_24;
  v26 = 8 * v24;
  v27 = 8 * v24 - v13;
  if (8 * v24 > v13)
  {
    if (v27 < 8)
    {
      v28 = 0;
      v29 = v13;
      goto LABEL_39;
    }
    if (v27 >= 0x20)
    {
      v30 = v27 & 0xFFFFFFFFFFFFFFE0;
      v31 = (int8x16_t *)((char *)v23 + v13 + 16);
      v32 = 0uLL;
      v33 = v27 & 0xFFFFFFFFFFFFFFE0;
      v34 = 0uLL;
      do
      {
        v32 = vorrq_s8(v31[-1], v32);
        v34 = vorrq_s8(*v31, v34);
        v31 += 2;
        v33 -= 32;
      }
      while (v33);
      v35 = vorrq_s8(v34, v32);
      *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL));
      v36 = v35.i64[0] | HIDWORD(v35.i64[0]) | ((unint64_t)(v35.i64[0] | HIDWORD(v35.i64[0])) >> 16);
      v28 = v36 | BYTE1(v36);
      if (v27 == v30)
        goto LABEL_42;
      if ((v27 & 0x18) == 0)
      {
        v29 = v13 + v30;
LABEL_39:
        v42 = v29 - v26;
        v43 = (char *)v23 + v29;
        do
        {
          v44 = *v43++;
          v28 |= v44;
        }
        while (!__CFADD__(v42++, 1));
        goto LABEL_42;
      }
    }
    else
    {
      v28 = 0;
      v30 = 0;
    }
    v29 = v13 + (v27 & 0xFFFFFFFFFFFFFFF8);
    v37 = (int8x8_t)v28;
    v38 = v30 - (v27 & 0xFFFFFFFFFFFFFFF8);
    v39 = (int8x8_t *)((char *)v23 + v13 + v30);
    do
    {
      v40 = *v39++;
      v37 = vorr_s8(v40, v37);
      v38 += 8;
    }
    while (v38);
    v41 = *(_QWORD *)&v37 | HIDWORD(*(_QWORD *)&v37) | ((*(_QWORD *)&v37 | HIDWORD(*(_QWORD *)&v37)) >> 16);
    v28 = v41 | BYTE1(v41);
    if (v27 != (v27 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_39;
LABEL_42:
    if (!v28)
      goto LABEL_43;
LABEL_24:
    ERR_put_error(15, 0, 101, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/felem.c", 37);
    return 0;
  }
LABEL_43:
  if (v26 >= v13)
    v46 = v13;
  else
    v46 = 8 * v24;
  if (!v46)
    goto LABEL_53;
  if (v46 < 8 || &v63[v13 - v46] < (_BYTE *)v23 + v46 && v23 < (uint64_t *)&v63[v13])
  {
    v47 = 0;
    goto LABEL_51;
  }
  if (v46 >= 0x20)
  {
    v47 = v46 & 0xFFFFFFE0;
    v52 = (int8x16_t *)(v23 + 2);
    v53 = (int8x16_t *)&v63[v13 - 16];
    v54 = v47;
    do
    {
      v55 = vrev64q_s8(v52[-1]);
      v56 = vextq_s8(v55, v55, 8uLL);
      v57 = vrev64q_s8(*v52);
      v53[-1] = vextq_s8(v57, v57, 8uLL);
      *v53 = v56;
      v52 += 2;
      v53 -= 2;
      v54 -= 32;
    }
    while (v54);
    if (v46 == v47)
      goto LABEL_53;
    if ((v46 & 0x18) == 0)
    {
LABEL_51:
      v48 = v46 - v47;
      v49 = &v63[~v47 + v13];
      v50 = (char *)v23 + v47;
      do
      {
        v51 = *v50++;
        *v49-- = v51;
        --v48;
      }
      while (v48);
      goto LABEL_53;
    }
  }
  else
  {
    v47 = 0;
  }
  v58 = v47;
  v47 = v46 & 0xFFFFFFF8;
  v59 = (int8x8_t *)((char *)v23 + v58);
  v60 = (int8x8_t *)&v63[v13 - v58 - 8];
  v61 = v58 - v47;
  do
  {
    v62 = *v59++;
    *v60-- = vrev64_s8(v62);
    v61 += 8;
  }
  while (v61);
  if (v46 != v47)
    goto LABEL_51;
LABEL_53:
  if (v26 < v13)
    __memset_chk();
  return (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, unint64_t))(*(_QWORD *)a1 + 112))(a1, a2, v63, v13);
}

uint64_t init_pthread_fork_detection()
{
  uint64_t result;

  result = pthread_atfork(0, 0, we_are_forked);
  if ((_DWORD)result)
    abort();
  g_atfork_fork_generation = 1;
  return result;
}

void we_are_forked()
{
  uint64_t v0;

  if ((unint64_t)(g_atfork_fork_generation + 1) > 1)
    v0 = g_atfork_fork_generation + 1;
  else
    v0 = 1;
  g_atfork_fork_generation = v0;
}

uint64_t BN_mod_inverse_odd(BIGNUM *a1, _DWORD *a2, BIGNUM *a3, const BIGNUM *a4, uint64_t a5)
{
  unint64_t top;
  int v8;
  int v9;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  BIGNUM *v18;
  BIGNUM *v19;
  BIGNUM *v20;
  BIGNUM *v21;
  uint64_t v22;
  uint64_t v23;
  signed int v24;
  int8x16_t *d;
  unint64_t v26;
  int8x8_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  unint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  int v39;
  BIGNUM *v40;
  const BIGNUM *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  int v53;
  BOOL v54;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int8x16_t v61;
  unint64_t *v62;
  unint64_t v63;
  int8x16_t v64;
  uint64x2_t v65;
  unint64_t v66;
  unint64_t *v67;
  __int128 v68;
  unint64_t *v69;
  int v70;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  int v75;
  int v76;
  BIGNUM *v77;
  const BIGNUM *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  int v90;
  unint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  int8x16_t v97;
  unint64_t *v98;
  unint64_t v99;
  int8x16_t v100;
  uint64x2_t v101;
  unint64_t v102;
  unint64_t *v103;
  __int128 v104;
  unint64_t *v105;
  int v106;
  BIGNUM *v108;
  const BIGNUM *v109;
  const BIGNUM *v110;
  uint64_t v111;
  uint64_t v112;
  BIGNUM *v113;
  BIGNUM *v114;
  BIGNUM *v115;
  BIGNUM *v116;
  unint64_t v117;
  unint64_t v118;

  *a2 = 0;
  top = a4->top;
  if ((int)top < 1 || (*(_BYTE *)a4->d & 1) == 0)
  {
    v8 = 104;
    v9 = 121;
LABEL_8:
    ERR_put_error(3, 0, v8, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/gcd.c", v9);
    return 0;
  }
  if (a3->neg
    || a4->neg
    || (bn_cmp_words_consttime((uint64_t *)a3->d, a3->top, (uint64_t *)a4->d, top) & 0x80000000) == 0)
  {
    v8 = 107;
    v9 = 126;
    goto LABEL_8;
  }
  if (!*(_BYTE *)(a5 + 40))
  {
    v14 = *(_QWORD *)(a5 + 32);
    v15 = *(_QWORD *)(a5 + 16);
    if (v15 != *(_QWORD *)(a5 + 24))
    {
      v17 = *(_QWORD **)(a5 + 8);
      goto LABEL_20;
    }
    if (v15)
      v16 = (3 * v15) >> 1;
    else
      v16 = 32;
    if (v16 > v15 && !(v16 >> 61))
    {
      v17 = OPENSSL_realloc(*(_QWORD **)(a5 + 8), 8 * v16);
      if (v17)
      {
        *(_QWORD *)(a5 + 8) = v17;
        *(_QWORD *)(a5 + 24) = v16;
        v15 = *(_QWORD *)(a5 + 16);
LABEL_20:
        v17[v15] = v14;
        ++*(_QWORD *)(a5 + 16);
        goto LABEL_22;
      }
    }
    *(_WORD *)(a5 + 40) = 257;
  }
LABEL_22:
  v18 = BN_CTX_get((BN_CTX *)a5);
  v19 = BN_CTX_get((BN_CTX *)a5);
  v20 = BN_CTX_get((BN_CTX *)a5);
  result = (uint64_t)BN_CTX_get((BN_CTX *)a5);
  if (!result)
    goto LABEL_152;
  v21 = (BIGNUM *)result;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 8) = 0;
  result = BN_one((uint64_t)v20);
  if (!(_DWORD)result)
    goto LABEL_152;
  if (v19 != a3)
  {
    result = bn_wexpand((uint64_t)v19, a3->top);
    if (!(_DWORD)result)
      goto LABEL_152;
    v22 = a3->top;
    if ((_DWORD)v22)
    {
      memcpy(v19->d, a3->d, 8 * v22);
      LODWORD(v22) = a3->top;
    }
    v19->top = v22;
    v19->neg = a3->neg;
  }
  if (v18 != a4)
  {
    result = bn_wexpand((uint64_t)v18, a4->top);
    if (!(_DWORD)result)
      goto LABEL_152;
    v23 = a4->top;
    if ((_DWORD)v23)
    {
      memcpy(v18->d, a4->d, 8 * v23);
      LODWORD(v23) = a4->top;
    }
    v18->top = v23;
  }
  v18->neg = 0;
  v24 = v19->top;
  if (!v24)
    goto LABEL_145;
  v115 = v19;
  v116 = v18;
  v113 = v21;
  v114 = v20;
  while (2)
  {
    d = (int8x16_t *)v19->d;
    if (v24 >= 4)
    {
      v26 = v24 & 0xFFFFFFFFFFFFFFFCLL;
      v28 = d + 1;
      v29 = 0uLL;
      v30 = v26;
      v31 = 0uLL;
      do
      {
        v29 = vorrq_s8(v28[-1], v29);
        v31 = vorrq_s8(*v28, v31);
        v28 += 2;
        v30 -= 4;
      }
      while (v30);
      v32 = vorrq_s8(v31, v29);
      v27 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
      if (v26 == v24)
        goto LABEL_43;
    }
    else
    {
      v26 = 0;
      v27 = 0;
    }
    v33 = v24 - v26;
    v34 = &d->i64[v26];
    do
    {
      v35 = *v34++;
      *(_QWORD *)&v27 |= v35;
      --v33;
    }
    while (v33);
LABEL_43:
    if (!*(_QWORD *)&v27)
      goto LABEL_145;
    v36 = 0;
    v37 = 0;
LABEL_46:
    while (((v19->d[v37] >> v36) & 1) == 0)
    {
LABEL_47:
      while (2)
      {
        v38 = v20->top;
        if (v38 >= 1 && (*(_BYTE *)v20->d & 1) != 0)
        {
          v117 = v36;
          v39 = a4->top;
          if (v38 >= v39)
            v40 = v20;
          else
            v40 = (BIGNUM *)a4;
          if (v38 >= v39)
            v41 = a4;
          else
            v41 = v20;
          v42 = v40->top;
          v43 = v41->top;
          result = bn_wexpand((uint64_t)v20, v42 + 1);
          if (!(_DWORD)result)
            goto LABEL_152;
          v20->top = v42 + 1;
          v44 = bn_add_words(v20->d, v40->d, v41->d, v43);
          v45 = v20->d;
          if ((int)v43 >= (int)v42)
          {
            v21 = v113;
            v19 = v115;
            v18 = v116;
          }
          else
          {
            v46 = v42 - v43;
            v47 = &v45[v43];
            v48 = &v40->d[v43];
            v21 = v113;
            v19 = v115;
            do
            {
              v49 = *v48++;
              v50 = v49 + v44;
              v44 = __CFADD__(v49, v44);
              *v47++ = v50;
              --v46;
            }
            while (v46);
            v18 = v116;
          }
          v20 = v114;
          v45[v42] = v44;
          v51 = v114->top;
          v38 = v51 & ((int)v51 >> 31);
          v52 = &v45[v51 - 1];
          v53 = v114->top;
          v36 = v117;
          while (1)
          {
            v54 = __OFSUB__(v53--, 1);
            if (v53 < 0 != v54)
              break;
            if (*v52--)
            {
              v38 = v53 + 1;
              v114->top = v53 + 1;
              goto LABEL_70;
            }
          }
          v114->top = v38;
          if ((v51 & 0x80000000) == 0)
            v114->neg = 0;
        }
LABEL_70:
        result = bn_wexpand((uint64_t)v20, v38);
        if (!(_DWORD)result)
          goto LABEL_152;
        v56 = v20->d;
        v57 = v20->top;
        if ((_DWORD)v57)
        {
          v58 = (int)v57 - 1;
          if ((int)v57 != 1)
          {
            v59 = *v56;
            if (v57 >= 5)
            {
              v60 = v58 & 0xFFFFFFFFFFFFFFFCLL;
              v61 = (int8x16_t)vdupq_n_s64(v59);
              v62 = v56 + 2;
              v63 = v58 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v64 = *(int8x16_t *)(v62 - 1);
                v65 = (uint64x2_t)vextq_s8(v61, v64, 8uLL);
                v61 = *(int8x16_t *)(v62 + 1);
                *((int8x16_t *)v62 - 1) = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v64, 0x3FuLL), (int8x16_t)vshrq_n_u64(v65, 1uLL));
                *(int8x16_t *)v62 = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v61, 0x3FuLL), (int8x16_t)vshrq_n_u64((uint64x2_t)vextq_s8(v64, v61, 8uLL), 1uLL));
                v62 += 4;
                v63 -= 4;
              }
              while (v63);
              if (v58 != v60)
              {
                v59 = v61.u64[1];
                goto LABEL_79;
              }
            }
            else
            {
              v60 = 0;
LABEL_79:
              v66 = ~v60 + (int)v57;
              v67 = &v56[v60 + 1];
              do
              {
                *((_QWORD *)&v68 + 1) = *v67;
                *(_QWORD *)&v68 = v59;
                *(v67++ - 1) = v68 >> 1;
                v59 = *((_QWORD *)&v68 + 1);
                --v66;
              }
              while (v66);
            }
          }
          v56[v58] >>= 1;
        }
        ++v36;
        v69 = &v56[v57 - 1];
        v70 = v57;
        while (1)
        {
          v54 = __OFSUB__(v70--, 1);
          if (v70 < 0 != v54)
            break;
          if (*v69--)
          {
            v20->top = v70 + 1;
            v37 = v36 >> 6;
            if (v36 >> 6 < v19->top)
              goto LABEL_46;
            goto LABEL_47;
          }
        }
        v20->top = v57 & ((int)v57 >> 31);
        if ((v57 & 0x80000000) == 0)
          v20->neg = 0;
        v37 = v36 >> 6;
        if (v36 >> 6 >= v19->top)
          continue;
        break;
      }
    }
    if ((_DWORD)v36)
    {
      result = BN_rshift(v19, v19, v36);
      if (!(_DWORD)result)
        break;
    }
    v72 = 0;
LABEL_92:
    while (2)
    {
      v73 = v18->top;
      if (v72 >> 6 >= v73 || (v74 = (uint64_t *)v18->d, ((v18->d[v72 >> 6] >> v72) & 1) == 0))
      {
        v75 = v21->top;
        if (v75 >= 1 && (*(_BYTE *)v21->d & 1) != 0)
        {
          v118 = v72;
          v76 = a4->top;
          if (v75 >= v76)
            v77 = v21;
          else
            v77 = (BIGNUM *)a4;
          if (v75 >= v76)
            v78 = a4;
          else
            v78 = v21;
          v79 = v77->top;
          v80 = v78->top;
          result = bn_wexpand((uint64_t)v21, v79 + 1);
          if (!(_DWORD)result)
            goto LABEL_152;
          v21->top = v79 + 1;
          v81 = bn_add_words(v21->d, v77->d, v78->d, v80);
          v82 = v21->d;
          if ((int)v80 >= (int)v79)
          {
            v19 = v115;
            v18 = v116;
            v20 = v114;
            v72 = v118;
          }
          else
          {
            v83 = v79 - v80;
            v84 = &v82[v80];
            v85 = &v77->d[v80];
            v19 = v115;
            v72 = v118;
            do
            {
              v86 = *v85++;
              v87 = v86 + v81;
              v81 = __CFADD__(v86, v81);
              *v84++ = v87;
              --v83;
            }
            while (v83);
            v18 = v116;
            v20 = v114;
          }
          v82[v79] = v81;
          v88 = v21->top;
          v75 = v88 & ((int)v88 >> 31);
          v89 = &v82[v88 - 1];
          v90 = v21->top;
          while (1)
          {
            v54 = __OFSUB__(v90--, 1);
            if (v90 < 0 != v54)
              break;
            if (*v89--)
            {
              v75 = v90 + 1;
              v21->top = v90 + 1;
              goto LABEL_117;
            }
          }
          v21->top = v75;
          if ((v88 & 0x80000000) == 0)
            v21->neg = 0;
        }
LABEL_117:
        result = bn_wexpand((uint64_t)v21, v75);
        if (!(_DWORD)result)
          goto LABEL_152;
        v92 = v21->d;
        v93 = v21->top;
        if ((_DWORD)v93)
        {
          v94 = (int)v93 - 1;
          if ((int)v93 != 1)
          {
            v95 = *v92;
            if (v93 >= 5)
            {
              v96 = v94 & 0xFFFFFFFFFFFFFFFCLL;
              v97 = (int8x16_t)vdupq_n_s64(v95);
              v98 = v92 + 2;
              v99 = v94 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v100 = *(int8x16_t *)(v98 - 1);
                v101 = (uint64x2_t)vextq_s8(v97, v100, 8uLL);
                v97 = *(int8x16_t *)(v98 + 1);
                *((int8x16_t *)v98 - 1) = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v100, 0x3FuLL), (int8x16_t)vshrq_n_u64(v101, 1uLL));
                *(int8x16_t *)v98 = vorrq_s8((int8x16_t)vshlq_n_s64((int64x2_t)v97, 0x3FuLL), (int8x16_t)vshrq_n_u64((uint64x2_t)vextq_s8(v100, v97, 8uLL), 1uLL));
                v98 += 4;
                v99 -= 4;
              }
              while (v99);
              if (v94 != v96)
              {
                v95 = v97.u64[1];
                goto LABEL_126;
              }
            }
            else
            {
              v96 = 0;
LABEL_126:
              v102 = ~v96 + (int)v93;
              v103 = &v92[v96 + 1];
              do
              {
                *((_QWORD *)&v104 + 1) = *v103;
                *(_QWORD *)&v104 = v95;
                *(v103++ - 1) = v104 >> 1;
                v95 = *((_QWORD *)&v104 + 1);
                --v102;
              }
              while (v102);
            }
          }
          v92[v94] >>= 1;
        }
        ++v72;
        v105 = &v92[v93 - 1];
        v106 = v93;
        while (1)
        {
          v54 = __OFSUB__(v106--, 1);
          if (v106 < 0 != v54)
            break;
          if (*v105--)
          {
            v21->top = v106 + 1;
            goto LABEL_92;
          }
        }
        v21->top = v93 & ((int)v93 >> 31);
        if ((v93 & 0x80000000) == 0)
          v21->neg = 0;
        continue;
      }
      break;
    }
    if (!(_DWORD)v72)
      goto LABEL_138;
    result = BN_rshift(v18, v18, v72);
    if (!(_DWORD)result)
      break;
    v74 = (uint64_t *)v18->d;
    v73 = v18->top;
LABEL_138:
    if ((bn_cmp_words_consttime((uint64_t *)v19->d, v19->top, v74, v73) & 0x80000000) == 0)
    {
      result = BN_uadd(v20, v20, v21);
      if ((_DWORD)result)
      {
        v108 = v19;
        v109 = v19;
        v110 = v18;
        goto LABEL_143;
      }
      break;
    }
    result = BN_uadd(v21, v21, v20);
    if ((_DWORD)result)
    {
      v108 = v18;
      v109 = v18;
      v110 = v19;
LABEL_143:
      result = BN_usub(v108, v109, v110);
      if ((_DWORD)result)
      {
        v24 = v19->top;
        if (!v24)
        {
LABEL_145:
          if (BN_is_one(&v18->d))
          {
            result = BN_sub(v21, a4, v21);
            if ((_DWORD)result)
            {
              if (!v21->neg
                && (bn_cmp_words_consttime((uint64_t *)v21->d, v21->top, (uint64_t *)a4->d, a4->top) & 0x80000000) != 0
                || (result = BN_nnmod(v21, v21, a4, (BN_CTX *)a5), (_DWORD)result))
              {
                result = BN_copy(a1, v21) != 0;
              }
            }
          }
          else
          {
            *a2 = 1;
            ERR_put_error(3, 0, 112, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/gcd.c", 248);
            result = 0;
          }
          break;
        }
        continue;
      }
    }
    break;
  }
LABEL_152:
  if (!*(_BYTE *)(a5 + 40))
  {
    v111 = *(_QWORD *)(a5 + 8);
    v112 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v112;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v111 + 8 * v112);
  }
  return result;
}

BOOL BN_mod_inverse_blinded(BIGNUM *a1, _DWORD *a2, const BIGNUM *a3, uint64_t a4, BN_CTX *a5)
{
  _BOOL8 v5;
  int v12;
  char flags;
  uint64_t v14;
  unint64_t *v15;
  uint64_t v16;
  BIGNUM a;

  *a2 = 0;
  if (a3->neg
    || *(_DWORD *)(a4 + 40)
    || (int)bn_cmp_words_consttime((uint64_t *)a3->d, a3->top, *(uint64_t **)(a4 + 24), *(int *)(a4 + 32)) >= 0)
  {
    ERR_put_error(3, 0, 107, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/gcd.c", 334);
    return 0;
  }
  else
  {
    memset(&a, 0, sizeof(a));
    v5 = bn_wexpand((uint64_t)&a, *(int *)(a4 + 32))
      && bn_rand_range_words((uint64_t *)a.d, 1uLL, *(uint64_t **)(a4 + 24), *(int *)(a4 + 32), (uint64_t)&BN_rand_range_ex_kDefaultAdditionalData)&& (v12 = *(_DWORD *)(a4 + 32), a.neg = 0, a.top = v12, BN_mod_mul_montgomery(a1, &a, a3, (BN_MONT_CTX *)a4, a5))&& BN_mod_inverse_odd(a1, a2, a1, (const BIGNUM *)(a4 + 24), (uint64_t)a5)&& BN_mod_mul_montgomery(a1, &a, a1, (BN_MONT_CTX *)a4, a5) != 0;
    flags = a.flags;
    if ((a.flags & 2) == 0 && a.d)
    {
      v15 = a.d - 1;
      v14 = *(a.d - 1);
      if (v14 != -8)
        bzero(v15, v14 + 8);
      free(v15);
      flags = a.flags;
    }
    if ((flags & 1) != 0)
    {
      if (v16 != -8)
        __memset_chk();
      free(&v16);
    }
  }
  return v5;
}

uint64_t bn_mod_inverse_secret_prime(BIGNUM *a1, const BIGNUM *a2, const BIGNUM *a3, BN_CTX *ctx, BN_MONT_CTX *a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t result;
  BIGNUM *v16;
  uint64_t top;
  uint64_t v18;
  uint64_t v19;

  if (!*((_BYTE *)ctx + 40))
  {
    v10 = *((_QWORD *)ctx + 4);
    v11 = *((_QWORD *)ctx + 2);
    if (v11 == *((_QWORD *)ctx + 3))
    {
      if (v11)
        v12 = (3 * v11) >> 1;
      else
        v12 = 32;
      v13 = v12 > v11 && v12 >> 61 == 0;
      if (!v13 || (v14 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v12)) == 0)
      {
        *((_WORD *)ctx + 20) = 257;
        result = (uint64_t)BN_CTX_get(ctx);
        if (!result)
          goto LABEL_23;
        goto LABEL_16;
      }
      *((_QWORD *)ctx + 1) = v14;
      *((_QWORD *)ctx + 3) = v12;
      v11 = *((_QWORD *)ctx + 2);
    }
    else
    {
      v14 = (_QWORD *)*((_QWORD *)ctx + 1);
    }
    v14[v11] = v10;
    ++*((_QWORD *)ctx + 2);
  }
  result = (uint64_t)BN_CTX_get(ctx);
  if (!result)
    goto LABEL_23;
LABEL_16:
  v16 = (BIGNUM *)result;
  if ((const BIGNUM *)result != a3)
  {
    result = bn_wexpand(result, a3->top);
    if (!(_DWORD)result)
      goto LABEL_23;
    top = a3->top;
    if ((_DWORD)top)
    {
      memcpy(v16->d, a3->d, 8 * top);
      LODWORD(top) = a3->top;
    }
    v16->top = top;
    v16->neg = a3->neg;
  }
  result = BN_sub_word(v16, 2uLL);
  if ((_DWORD)result)
    result = BN_mod_exp_mont_consttime(a1, a2, v16, a3, ctx, a5) != 0;
LABEL_23:
  if (!*((_BYTE *)ctx + 40))
  {
    v18 = *((_QWORD *)ctx + 1);
    v19 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v19;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v18 + 8 * v19);
  }
  return result;
}

int BN_gcd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
{
  int result;
  int n;

  n = 0;
  result = bn_gcd_consttime((uint64_t)r, &n, (BIGNUM *)a, (BIGNUM *)b, ctx);
  if (result)
    return BN_lshift(r, r, n) != 0;
  return result;
}

uint64_t bn_gcd_consttime(uint64_t a1, _DWORD *a2, BIGNUM *a3, BIGNUM *a4, BN_CTX *ctx)
{
  signed int top;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  _QWORD *v15;
  uint64_t result;
  BIGNUM *v17;
  BIGNUM *v18;
  BIGNUM *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *d;
  unint64_t v24;
  int8x8_t v25;
  unint64_t v26;
  uint64_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  unint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  int8x8_t v39;
  unint64_t v40;
  uint64_t v41;
  int8x16_t *v42;
  int8x16_t v43;
  unint64_t v44;
  int8x16_t v45;
  int8x16_t v46;
  uint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int8x8_t v53;
  unint64_t v54;
  uint64_t v55;
  int8x16_t *v56;
  int8x16_t v57;
  unint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  unint64_t *v62;
  uint64_t v63;
  const char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  int8x16_t *v70;
  int8x16_t *v71;
  int v72;
  int v73;
  int8x16_t *v74;
  uint64_t v75;
  int8x16_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  BOOL v80;
  BOOL v81;
  unint64_t v82;
  BOOL v83;
  BOOL v84;
  char v85;
  char v86;
  unint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  char v114;
  unint64_t v115;
  int8x16_t v116;
  int8x16_t v117;
  unint64_t v118;
  int8x16_t *v119;
  int8x16_t *v120;
  int8x16_t v121;
  unint64_t v122;
  unint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  char v148;
  unint64_t v149;
  int8x16_t v150;
  int8x16_t v151;
  unint64_t v152;
  int8x16_t *v153;
  int8x16_t *v154;
  int8x16_t v155;
  unint64_t v156;
  unint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  unint64_t v163;
  unint64_t v164;
  int8x16_t *v165;
  int8x16_t *v166;
  int8x16_t v167;
  uint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  __int8 *v171;
  int v172;
  unint64_t v173;
  unint64_t v174;
  char v175;
  unint64_t v176;
  int8x16_t v177;
  int8x16_t v178;
  unint64_t v179;
  int8x16_t *v180;
  int8x16_t *v181;
  int8x16_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  uint64_t *v186;
  uint64_t v187;
  char v188;
  unint64_t v189;
  unint64_t v190;
  int8x16_t *v191;
  int8x16_t *v192;
  int8x16_t v193;
  uint64_t v194;
  uint64_t *v195;
  unint64_t v196;
  uint64_t *v197;
  int v198;
  unint64_t v199;
  unint64_t v200;
  char v201;
  unint64_t v202;
  int8x16_t v203;
  int8x16_t v204;
  unint64_t v205;
  int8x16_t *v206;
  int8x16_t *v207;
  int8x16_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  int8x16_t *v221;
  int8x16_t *v222;
  unint64_t v223;
  int8x16_t v224;
  char v225;
  unsigned int v226;

  if (a3->top <= a4->top)
    top = a4->top;
  else
    top = a3->top;
  if (!top)
  {
    *a2 = 0;
    *(_DWORD *)(a1 + 16) = 0;
    result = 1;
    *(_DWORD *)(a1 + 8) = 0;
    return result;
  }
  if (!*((_BYTE *)ctx + 40))
  {
    v11 = *((_QWORD *)ctx + 4);
    v12 = *((_QWORD *)ctx + 2);
    if (v12 == *((_QWORD *)ctx + 3))
    {
      if (v12)
        v13 = (3 * v12) >> 1;
      else
        v13 = 32;
      v14 = v13 > v12 && v13 >> 61 == 0;
      if (!v14 || (v15 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v13)) == 0)
      {
        *((_WORD *)ctx + 20) = 257;
        goto LABEL_21;
      }
      *((_QWORD *)ctx + 1) = v15;
      *((_QWORD *)ctx + 3) = v13;
      v12 = *((_QWORD *)ctx + 2);
    }
    else
    {
      v15 = (_QWORD *)*((_QWORD *)ctx + 1);
    }
    v15[v12] = v11;
    ++*((_QWORD *)ctx + 2);
  }
LABEL_21:
  v17 = BN_CTX_get(ctx);
  v18 = BN_CTX_get(ctx);
  v19 = BN_CTX_get(ctx);
  result = 0;
  if (!v17 || !v18 || !v19)
  {
LABEL_72:
    if (*((_BYTE *)ctx + 40))
      return result;
    goto LABEL_73;
  }
  if (v17 != a3)
  {
    result = bn_wexpand((uint64_t)v17, a3->top);
    if (!(_DWORD)result)
      goto LABEL_72;
    v20 = a3->top;
    if ((_DWORD)v20)
    {
      memcpy(v17->d, a3->d, 8 * v20);
      LODWORD(v20) = a3->top;
    }
    v17->top = v20;
    v17->neg = a3->neg;
  }
  if (v18 != a4)
  {
    result = bn_wexpand((uint64_t)v18, a4->top);
    if (!(_DWORD)result)
      goto LABEL_72;
    v21 = a4->top;
    if ((_DWORD)v21)
    {
      memcpy(v18->d, a4->d, 8 * v21);
      LODWORD(v21) = a4->top;
    }
    v18->top = v21;
    v18->neg = a4->neg;
  }
  v22 = v17->top;
  if (v22 <= top)
  {
    result = bn_wexpand((uint64_t)v17, top);
    if (!(_DWORD)result)
      goto LABEL_72;
    v27 = v17->top;
    if (top != (_DWORD)v27)
      bzero(&v17->d[v27], 8 * (top - v27));
    goto LABEL_46;
  }
  d = v17->d;
  v24 = v22 - top;
  if (v24 < 4)
  {
    v25 = 0;
    v26 = top;
LABEL_43:
    v33 = v22 - v26;
    v34 = &d[v26];
    do
    {
      v35 = *v34++;
      *(_QWORD *)&v25 |= v35;
      --v33;
    }
    while (v33);
    goto LABEL_45;
  }
  v26 = (v24 & 0xFFFFFFFFFFFFFFFCLL) + top;
  v28 = (int8x16_t *)&d[top + 2];
  v29 = 0uLL;
  v30 = v24 & 0xFFFFFFFFFFFFFFFCLL;
  v31 = 0uLL;
  do
  {
    v29 = vorrq_s8(v28[-1], v29);
    v31 = vorrq_s8(*v28, v31);
    v28 += 2;
    v30 -= 4;
  }
  while (v30);
  v32 = vorrq_s8(v31, v29);
  v25 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
  if (v24 != (v24 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_43;
LABEL_45:
  if (v25)
    goto LABEL_70;
LABEL_46:
  v17->top = top;
  v36 = v18->top;
  if (v36 > top)
  {
    v37 = v18->d;
    v38 = v36 - top;
    if (v38 >= 4)
    {
      v40 = (v38 & 0xFFFFFFFFFFFFFFFCLL) + top;
      v42 = (int8x16_t *)&v37[top + 2];
      v43 = 0uLL;
      v44 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      v45 = 0uLL;
      do
      {
        v43 = vorrq_s8(v42[-1], v43);
        v45 = vorrq_s8(*v42, v45);
        v42 += 2;
        v44 -= 4;
      }
      while (v44);
      v46 = vorrq_s8(v45, v43);
      v39 = vorr_s8(*(int8x8_t *)v46.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
      if (v38 == (v38 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_57:
        if (!*(_QWORD *)&v39)
          goto LABEL_58;
LABEL_70:
        v64 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/s"
              "rc/crypto/fipsmodule/bn/bn.c";
        v65 = 399;
LABEL_71:
        ERR_put_error(3, 0, 102, v64, v65);
        result = 0;
        goto LABEL_72;
      }
    }
    else
    {
      v39 = 0;
      v40 = top;
    }
    v47 = v36 - v40;
    v48 = &v37[v40];
    do
    {
      v49 = *v48++;
      *(_QWORD *)&v39 |= v49;
      --v47;
    }
    while (v47);
    goto LABEL_57;
  }
  result = bn_wexpand((uint64_t)v18, top);
  if (!(_DWORD)result)
    goto LABEL_72;
  v41 = v18->top;
  if (top != (_DWORD)v41)
    bzero(&v18->d[v41], 8 * (top - v41));
LABEL_58:
  v18->top = top;
  v50 = v19->top;
  if (v50 <= top)
  {
    result = bn_wexpand((uint64_t)v19, top);
    if (!(_DWORD)result)
      goto LABEL_72;
    v55 = v19->top;
    if (top != (_DWORD)v55)
      bzero(&v19->d[v55], 8 * (top - v55));
    goto LABEL_75;
  }
  v51 = v19->d;
  v52 = v50 - top;
  if (v52 < 4)
  {
    v53 = 0;
    v54 = top;
LABEL_67:
    v61 = v50 - v54;
    v62 = &v51[v54];
    do
    {
      v63 = *v62++;
      *(_QWORD *)&v53 |= v63;
      --v61;
    }
    while (v61);
    goto LABEL_69;
  }
  v54 = (v52 & 0xFFFFFFFFFFFFFFFCLL) + top;
  v56 = (int8x16_t *)&v51[top + 2];
  v57 = 0uLL;
  v58 = v52 & 0xFFFFFFFFFFFFFFFCLL;
  v59 = 0uLL;
  do
  {
    v57 = vorrq_s8(v56[-1], v57);
    v59 = vorrq_s8(*v56, v59);
    v56 += 2;
    v58 -= 4;
  }
  while (v58);
  v60 = vorrq_s8(v59, v57);
  v53 = vorr_s8(*(int8x8_t *)v60.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL));
  if (v52 != (v52 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_67;
LABEL_69:
  if (v53)
    goto LABEL_70;
LABEL_75:
  v19->top = top;
  v68 = a3->top;
  v69 = (a4->top + v68) << 6;
  if (v69 < v68 << 6)
  {
    v64 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/fipsmodule/bn/gcd_extra.c";
    v65 = 78;
    goto LABEL_71;
  }
  v70 = (int8x16_t *)v17->d;
  v71 = (int8x16_t *)v18->d;
  if (v69)
  {
    v72 = 0;
    v73 = 0;
    v74 = (int8x16_t *)v19->d;
    v75 = top - 1;
    v76 = (int8x16_t *)((char *)v71 + 8 * top);
    v77 = (unint64_t)&v19->d[top];
    v78 = v77 - 8;
    v79 = (unint64_t *)v70 + top;
    v80 = v19->d < v79;
    v81 = v19->d < v79 && (unint64_t)v70 < v77;
    v82 = top & 0xFFFFFFFFFFFFFFFCLL;
    v83 = (unint64_t)v71 < v77;
    v84 = v74 < v76;
    v85 = v74 < v76 && v83;
    v86 = (unint64_t)v70 < v78 && v80;
    v87 = v75 & 0xFFFFFFFFFFFFFFFCLL;
    v88 = (unint64_t)v71 < v78 && v84;
    v225 = v88;
    v226 = v69;
    while (1)
    {
      v89 = 0;
      if ((v70->i8[0] & 1) != 0)
        v90 = -(v71->i64[0] & 1);
      else
        v90 = 0;
      v91 = top;
      v92 = (uint64_t *)v71;
      v93 = (uint64_t *)v70;
      v94 = (uint64_t *)v74;
      if (top < 4)
        goto LABEL_221;
      v89 = 0;
      v91 = top;
      v92 = (uint64_t *)v71;
      v93 = (uint64_t *)v70;
      v94 = (uint64_t *)v74;
      do
      {
        v95 = v89 & (*v93 == *v92);
        if (*v93 < (unint64_t)*v92)
          v95 = 1;
        *v94 = *v93 - (v89 + *v92);
        v96 = v93[1];
        v97 = v92[1];
        v98 = v96 - (v97 + v95);
        v99 = v96 >= v97;
        if (v96 == v97)
          v100 = v95;
        else
          v100 = 0;
        if (!v99)
          v100 = 1;
        v94[1] = v98;
        v101 = v93[2];
        v102 = v92[2];
        v103 = v101 - (v102 + v100);
        if (v101 != v102)
          v100 = 0;
        if (v101 < v102)
          v100 = 1;
        v94[2] = v103;
        v104 = v93[3];
        v105 = v92[3];
        v106 = v104 - (v105 + v100);
        if (v104 != v105)
          v100 = 0;
        if (v104 < v105)
          v89 = 1;
        else
          v89 = v100;
        v94[3] = v106;
        v93 += 4;
        v92 += 4;
        v94 += 4;
        v91 -= 4;
      }
      while (v91 >= 4);
      if (v91)
      {
LABEL_221:
        do
        {
          v108 = *v93++;
          v107 = v108;
          v109 = *v92++;
          v110 = v107 - (v89 + v109);
          v99 = v107 >= v109;
          v111 = v89 & (v107 == v109);
          if (v99)
            v89 = v111;
          else
            v89 = 1;
          *v94++ = v110;
          --v91;
        }
        while (v91);
      }
      v112 = (v89 - 1) & v90;
      v113 = ~v112;
      v114 = top < 4 || v81;
      if ((v114 & 1) != 0)
      {
        v115 = 0;
      }
      else
      {
        v116 = (int8x16_t)vdupq_n_s64(v112);
        v117 = (int8x16_t)vdupq_n_s64(v113);
        v118 = top & 0xFFFFFFFFFFFFFFFCLL;
        v119 = v70 + 1;
        v120 = v74 + 1;
        do
        {
          v121 = vorrq_s8(vandq_s8(*v119, v117), vandq_s8(*v120, v116));
          v119[-1] = vorrq_s8(vandq_s8(v119[-1], v117), vandq_s8(v120[-1], v116));
          *v119 = v121;
          v120 += 2;
          v119 += 2;
          v118 -= 4;
        }
        while (v118);
        v115 = top & 0xFFFFFFFFFFFFFFFCLL;
        if (v82 == top)
          goto LABEL_129;
      }
      v122 = top - v115;
      v123 = (unint64_t *)v70 + v115;
      v124 = &v74->i64[v115];
      do
      {
        v125 = *v124++;
        *v123 = *v123 & v113 | v125 & v112;
        ++v123;
        --v122;
      }
      while (v122);
LABEL_129:
      v126 = 0;
      v127 = top;
      v128 = (uint64_t *)v70;
      v129 = (uint64_t *)v71;
      v130 = (uint64_t *)v74;
      if (top < 4)
        goto LABEL_222;
      v126 = 0;
      v127 = top;
      v128 = (uint64_t *)v70;
      v129 = (uint64_t *)v71;
      v130 = (uint64_t *)v74;
      do
      {
        v131 = v126 & (*v129 == *v128);
        if (*v129 < (unint64_t)*v128)
          v131 = 1;
        *v130 = *v129 - (v126 + *v128);
        v132 = v129[1];
        v133 = v128[1];
        v134 = v132 - (v133 + v131);
        if (v132 != v133)
          v131 = 0;
        if (v132 < v133)
          v131 = 1;
        v130[1] = v134;
        v135 = v129[2];
        v136 = v128[2];
        v137 = v135 - (v136 + v131);
        if (v135 != v136)
          v131 = 0;
        if (v135 < v136)
          v131 = 1;
        v130[2] = v137;
        v138 = v129[3];
        v139 = v128[3];
        v140 = v138 - (v139 + v131);
        if (v138 != v139)
          v131 = 0;
        if (v138 < v139)
          v126 = 1;
        else
          v126 = v131;
        v130[3] = v140;
        v129 += 4;
        v128 += 4;
        v130 += 4;
        v127 -= 4;
      }
      while (v127 >= 4);
      if (v127)
      {
LABEL_222:
        do
        {
          v142 = *v129++;
          v141 = v142;
          v143 = *v128++;
          v144 = v141 - (v126 + v143);
          v99 = v141 >= v143;
          v145 = v126 & (v141 == v143);
          if (v99)
            v126 = v145;
          else
            v126 = 1;
          *v130++ = v144;
          --v127;
        }
        while (v127);
      }
      v146 = v90 & -v89;
      v147 = ~v146;
      if (top < 4)
        v148 = 1;
      else
        v148 = v85;
      if ((v148 & 1) != 0)
      {
        v149 = 0;
LABEL_160:
        v156 = top - v149;
        v157 = (unint64_t *)v71 + v149;
        v158 = &v74->i64[v149];
        do
        {
          v159 = *v158++;
          *v157 = *v157 & v147 | v159 & v146;
          ++v157;
          --v156;
        }
        while (v156);
        goto LABEL_162;
      }
      v150 = (int8x16_t)vdupq_n_s64(v146);
      v151 = (int8x16_t)vdupq_n_s64(v147);
      v152 = top & 0xFFFFFFFFFFFFFFFCLL;
      v153 = v71 + 1;
      v154 = v74 + 1;
      do
      {
        v155 = vorrq_s8(vandq_s8(*v153, v151), vandq_s8(*v154, v150));
        v153[-1] = vorrq_s8(vandq_s8(v153[-1], v151), vandq_s8(v154[-1], v150));
        *v153 = v155;
        v154 += 2;
        v153 += 2;
        v152 -= 4;
      }
      while (v152);
      v149 = top & 0xFFFFFFFFFFFFFFFCLL;
      if (v82 != top)
        goto LABEL_160;
LABEL_162:
      v160 = v70->i64[0];
      v161 = v71->i64[0];
      if (top != 1)
      {
        v162 = v86;
        if (top < 5)
          v162 = 1;
        if ((v162 & 1) != 0)
        {
          v163 = 0;
        }
        else
        {
          v164 = v75 & 0xFFFFFFFFFFFFFFFCLL;
          v165 = v74 + 1;
          v166 = v70 + 1;
          do
          {
            v167 = vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)v166 + 8), 0x3FuLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)v166, 1uLL));
            v165[-1] = vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)&v166[-1] + 8), 0x3FuLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v166[-1], 1uLL));
            *v165 = v167;
            v166 += 2;
            v165 += 2;
            v164 -= 4;
          }
          while (v164);
          v163 = v75 & 0xFFFFFFFFFFFFFFFCLL;
          if (v75 == v87)
            goto LABEL_172;
        }
        v168 = 8 * v163;
        v169 = &v74->i64[v163];
        v170 = v75 - v163;
        v171 = &v70->i8[v168 + 8];
        do
        {
          *v169++ = *(__int128 *)(v171 - 8) >> 1;
          v171 += 8;
          --v170;
        }
        while (v170);
      }
LABEL_172:
      v172 = (v160 & 1) - 1;
      v74->i64[v75] = (unint64_t)v70->i64[v75] >> 1;
      v173 = (v160 & 1) - 1;
      v174 = ~v173;
      v175 = top < 4 || v81;
      if ((v175 & 1) != 0)
      {
        v176 = 0;
LABEL_180:
        v183 = top - v176;
        v184 = v176;
        v185 = (unint64_t *)v70 + v176;
        v186 = &v74->i64[v184];
        do
        {
          v187 = *v186++;
          *v185 = *v185 & v174 | v187 & v173;
          ++v185;
          --v183;
        }
        while (v183);
        goto LABEL_182;
      }
      v177 = (int8x16_t)vdupq_n_s64(v173);
      v178 = (int8x16_t)vdupq_n_s64(v174);
      v179 = top & 0xFFFFFFFFFFFFFFFCLL;
      v180 = v70 + 1;
      v181 = v74 + 1;
      do
      {
        v182 = vorrq_s8(vandq_s8(*v180, v178), vandq_s8(*v181, v177));
        v180[-1] = vorrq_s8(vandq_s8(v180[-1], v178), vandq_s8(v181[-1], v177));
        *v180 = v182;
        v181 += 2;
        v180 += 2;
        v179 -= 4;
      }
      while (v179);
      v176 = top & 0xFFFFFFFFFFFFFFFCLL;
      if (v82 != top)
        goto LABEL_180;
LABEL_182:
      if (top != 1)
      {
        v188 = v225;
        if (top < 5)
          v188 = 1;
        if ((v188 & 1) != 0)
        {
          v189 = 0;
        }
        else
        {
          v190 = v75 & 0xFFFFFFFFFFFFFFFCLL;
          v191 = v74 + 1;
          v192 = v71 + 1;
          do
          {
            v193 = vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)v192 + 8), 0x3FuLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)v192, 1uLL));
            v191[-1] = vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)&v192[-1] + 8), 0x3FuLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v192[-1], 1uLL));
            *v191 = v193;
            v192 += 2;
            v191 += 2;
            v190 -= 4;
          }
          while (v190);
          v189 = v75 & 0xFFFFFFFFFFFFFFFCLL;
          if (v75 == v87)
            goto LABEL_192;
        }
        v194 = v189;
        v195 = &v74->i64[v189];
        v196 = v75 - v189;
        v197 = &v71->i64[v194 + 1];
        do
        {
          *v195++ = *(__int128 *)(v197++ - 1) >> 1;
          --v196;
        }
        while (v196);
      }
LABEL_192:
      v198 = (v161 & 1) - 1;
      v74->i64[v75] = (unint64_t)v71->i64[v75] >> 1;
      v199 = (v161 & 1) - 1;
      v200 = ~v199;
      if (top < 4)
        v201 = 1;
      else
        v201 = v85;
      if ((v201 & 1) != 0)
      {
        v202 = 0;
      }
      else
      {
        v203 = (int8x16_t)vdupq_n_s64(v199);
        v204 = (int8x16_t)vdupq_n_s64(v200);
        v205 = top & 0xFFFFFFFFFFFFFFFCLL;
        v206 = v71 + 1;
        v207 = v74 + 1;
        do
        {
          v208 = vorrq_s8(vandq_s8(*v206, v204), vandq_s8(*v207, v203));
          v206[-1] = vorrq_s8(vandq_s8(v206[-1], v204), vandq_s8(v207[-1], v203));
          *v206 = v208;
          v207 += 2;
          v206 += 2;
          v205 -= 4;
        }
        while (v205);
        v202 = top & 0xFFFFFFFFFFFFFFFCLL;
        if (v82 == top)
          goto LABEL_91;
      }
      v209 = top - v202;
      v210 = v202;
      v211 = (unint64_t *)v71 + v202;
      v212 = &v74->i64[v210];
      do
      {
        v213 = *v212++;
        *v211 = *v211 & v200 | v213 & v199;
        ++v211;
        --v209;
      }
      while (v209);
LABEL_91:
      v73 -= v198 & v172;
      if (++v72 == v226)
        goto LABEL_204;
    }
  }
  v73 = 0;
LABEL_204:
  if ((unint64_t)top <= 1)
    v214 = 1;
  else
    v214 = top;
  if (v214 < 6 || v71 < (int8x16_t *)((char *)v70 + 8 * v214) && v70 < (int8x16_t *)((char *)v71 + 8 * v214))
  {
    v215 = 0;
LABEL_211:
    v216 = v214 - v215;
    v217 = v215;
    v218 = &v71->i64[v215];
    v219 = &v70->i64[v217];
    do
    {
      v220 = *v219++;
      *v218++ |= v220;
      --v216;
    }
    while (v216);
    goto LABEL_213;
  }
  v215 = v214 & 0xFFFFFFFFFFFFFFFCLL;
  v221 = v70 + 1;
  v222 = v71 + 1;
  v223 = v214 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v224 = vorrq_s8(*v222, *v221);
    v222[-1] = vorrq_s8(v222[-1], v221[-1]);
    *v222 = v224;
    v221 += 2;
    v222 += 2;
    v223 -= 4;
  }
  while (v223);
  if (v214 != v215)
    goto LABEL_211;
LABEL_213:
  *a2 = v73;
  result = bn_set_words(a1, v71, top);
  if (!*((_BYTE *)ctx + 40))
  {
LABEL_73:
    v66 = *((_QWORD *)ctx + 1);
    v67 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v67;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v66 + 8 * v67);
  }
  return result;
}

uint64_t bn_is_relatively_prime(_DWORD *a1, BIGNUM *a2, BIGNUM *a3, BN_CTX *ctx)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int8x16_t v20;
  unsigned __int128 v21;
  int8x16_t *v22;
  unint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;

  if (*((_BYTE *)ctx + 40))
  {
LABEL_15:
    result = (uint64_t)BN_CTX_get(ctx);
    if (!result)
      goto LABEL_30;
LABEL_16:
    v14 = result;
    v30 = 0;
    result = bn_gcd_consttime(result, &v30, a2, a3, ctx);
    if (!(_DWORD)result)
      goto LABEL_30;
    v15 = *(unsigned int *)(v14 + 8);
    if (!(_DWORD)v15)
      goto LABEL_29;
    v16 = *(_QWORD **)v14;
    v17 = **(_QWORD **)v14 ^ 1 | v30;
    if ((int)v15 >= 2)
    {
      if (v15 >= 5)
      {
        v19 = (v15 - 1) & 0xFFFFFFFFFFFFFFFCLL;
        v18 = v19 | 1;
        v20 = 0uLL;
        v21 = **(_QWORD **)v14 ^ 1uLL | (unsigned __int128)v30;
        v22 = (int8x16_t *)(v16 + 3);
        v23 = v19;
        do
        {
          v21 = (unsigned __int128)vorrq_s8(v22[-1], (int8x16_t)v21);
          v20 = vorrq_s8(*v22, v20);
          v22 += 2;
          v23 -= 4;
        }
        while (v23);
        v24 = vorrq_s8(v20, (int8x16_t)v21);
        v17 = (uint64_t)vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
        if (v15 - 1 == v19)
          goto LABEL_28;
      }
      else
      {
        v18 = 1;
      }
      v25 = v15 - v18;
      v26 = &v16[v18];
      do
      {
        v27 = *v26++;
        v17 |= v27;
        --v25;
      }
      while (v25);
    }
LABEL_28:
    LODWORD(v15) = v17 == 0;
LABEL_29:
    *a1 = v15;
    result = 1;
    goto LABEL_30;
  }
  v8 = *((_QWORD *)ctx + 4);
  v9 = *((_QWORD *)ctx + 2);
  if (v9 != *((_QWORD *)ctx + 3))
  {
    v12 = (_QWORD *)*((_QWORD *)ctx + 1);
    goto LABEL_14;
  }
  if (v9)
    v10 = (3 * v9) >> 1;
  else
    v10 = 32;
  if (v10 > v9 && v10 >> 61 == 0)
  {
    v12 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v10);
    if (v12)
    {
      *((_QWORD *)ctx + 1) = v12;
      *((_QWORD *)ctx + 3) = v10;
      v9 = *((_QWORD *)ctx + 2);
LABEL_14:
      v12[v9] = v8;
      ++*((_QWORD *)ctx + 2);
      goto LABEL_15;
    }
  }
  *((_WORD *)ctx + 20) = 257;
  result = (uint64_t)BN_CTX_get(ctx);
  if (result)
    goto LABEL_16;
LABEL_30:
  if (!*((_BYTE *)ctx + 40))
  {
    v28 = *((_QWORD *)ctx + 1);
    v29 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v29;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v28 + 8 * v29);
  }
  return result;
}

uint64_t bn_lcm_consttime(BIGNUM *a1, BIGNUM *a2, BIGNUM *a3, BN_CTX *ctx)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  BIGNUM *v16;
  int v17;

  if (!*((_BYTE *)ctx + 40))
  {
    v8 = *((_QWORD *)ctx + 4);
    v9 = *((_QWORD *)ctx + 2);
    if (v9 == *((_QWORD *)ctx + 3))
    {
      if (v9)
        v10 = (3 * v9) >> 1;
      else
        v10 = 32;
      v11 = v10 > v9 && v10 >> 61 == 0;
      if (!v11 || (v12 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v10)) == 0)
      {
        *((_WORD *)ctx + 20) = 257;
        result = (uint64_t)BN_CTX_get(ctx);
        if (!result)
          goto LABEL_19;
        goto LABEL_16;
      }
      *((_QWORD *)ctx + 1) = v12;
      *((_QWORD *)ctx + 3) = v10;
      v9 = *((_QWORD *)ctx + 2);
    }
    else
    {
      v12 = (_QWORD *)*((_QWORD *)ctx + 1);
    }
    v12[v9] = v8;
    ++*((_QWORD *)ctx + 2);
  }
  result = (uint64_t)BN_CTX_get(ctx);
  if (!result)
    goto LABEL_19;
LABEL_16:
  if (a2->neg || a3->neg)
  {
    ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/mul.c", 524);
    result = 0;
  }
  else
  {
    v16 = (BIGNUM *)result;
    result = bn_mul_impl((uint64_t)a1, (uint64_t)a2, (uint64_t)a3, ctx);
    if ((_DWORD)result)
    {
      v17 = 0;
      result = bn_gcd_consttime((uint64_t)v16, &v17, a2, a3, ctx);
      if ((_DWORD)result)
      {
        result = bn_div_consttime(a1, 0, a1, v16, 0, ctx);
        if ((_DWORD)result)
          result = bn_rshift_secret_shift((uint64_t)a1, (uint64_t)a1, v17, ctx) != 0;
      }
    }
  }
LABEL_19:
  if (!*((_BYTE *)ctx + 40))
  {
    v14 = *((_QWORD *)ctx + 1);
    v15 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v15;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v14 + 8 * v15);
  }
  return result;
}

uint64_t bn_mod_inverse_consttime(BIGNUM *a1, _DWORD *a2, BIGNUM *a3, const BIGNUM *a4, uint64_t a5)
{
  uint64_t *d;
  unint64_t top;
  uint64_t *v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t result;
  unint64_t v17;
  int8x8_t v18;
  int8x16_t *v19;
  int8x16_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  _QWORD *v34;
  unint64_t v35;
  int8x16_t v36;
  unsigned __int128 v37;
  int8x16_t *v38;
  unint64_t v39;
  int8x16_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  BIGNUM *v44;
  BIGNUM *v45;
  BIGNUM *v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  const unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t *v62;
  int8x16_t *v63;
  unint64_t v64;
  int8x16_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  int8x16_t *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t *v80;
  unint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t *v93;
  uint64_t v94;
  const unint64_t *v95;
  unint64_t v96;
  BOOL v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t *v100;
  int8x16_t *v101;
  unint64_t v102;
  int8x16_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  const unint64_t *v110;
  unint64_t v111;
  BOOL v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t *v115;
  int8x16_t *v116;
  unint64_t v117;
  int8x16_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t *v122;
  unint64_t *v123;
  uint64_t v124;
  int8x16_t *v125;
  unint64_t *v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  BOOL v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t *v133;
  int8x16_t *v134;
  unint64_t v135;
  int8x16_t v136;
  int8x16_t v137;
  int8x16_t v138;
  int8x16_t *v139;
  int8x16_t *v140;
  unint64_t v141;
  int8x16_t v142;
  int8x16_t v143;
  int8x16_t v144;
  int8x16_t *v145;
  int8x16_t *v146;
  unint64_t v147;
  int8x16_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t *v152;
  uint64_t v153;
  const unint64_t *v154;
  unint64_t v155;
  BOOL v156;
  int8x16_t v157;
  int8x16_t v158;
  int8x16_t *v159;
  int8x16_t *v160;
  unint64_t v161;
  int8x16_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t *v166;
  uint64_t *v167;
  uint64_t v168;
  const unint64_t *v169;
  unint64_t v170;
  BOOL v171;
  int8x16_t v172;
  int8x16_t v173;
  int8x16_t *v174;
  int8x16_t *v175;
  unint64_t v176;
  int8x16_t v177;
  unint64_t v178;
  unint64_t v179;
  uint64_t v180;
  unint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t v195;
  const unint64_t **v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t num;
  unint64_t **p_d;
  BIGNUM *v205;
  BIGNUM *v206;
  BIGNUM *v207;
  BIGNUM *v208;
  BIGNUM *v209;

  *a2 = 0;
  if (a3->neg
    || (d = (uint64_t *)a3->d,
        top = a3->top,
        v12 = (uint64_t *)a4->d,
        v13 = a4->top,
        (bn_cmp_words_consttime((uint64_t *)a3->d, top, (uint64_t *)a4->d, v13) & 0x80000000) == 0))
  {
    v14 = 107;
    v15 = 174;
LABEL_4:
    ERR_put_error(3, 0, v14, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/gcd_extra.c", v15);
    return 0;
  }
  if (!(_DWORD)top)
  {
LABEL_20:
    if (!(_DWORD)v13 || a4->neg)
    {
LABEL_46:
      *a2 = 1;
      v14 = 112;
      v15 = 183;
      goto LABEL_4;
    }
    v27 = *v12 ^ 1;
    if ((int)v13 >= 2)
    {
      if (v13 < 5)
      {
        v28 = 1;
LABEL_43:
        v41 = v13 - v28;
        v42 = &v12[v28];
        do
        {
          v43 = *v42++;
          v27 |= v43;
          --v41;
        }
        while (v41);
        goto LABEL_45;
      }
      v35 = (v13 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v28 = v35 | 1;
      v36 = 0uLL;
      v37 = (unint64_t)*v12 ^ (unsigned __int128)1uLL;
      v38 = (int8x16_t *)(v12 + 3);
      v39 = v35;
      do
      {
        v37 = (unsigned __int128)vorrq_s8(v38[-1], (int8x16_t)v37);
        v36 = vorrq_s8(*v38, v36);
        v38 += 2;
        v39 -= 4;
      }
      while (v39);
      v40 = vorrq_s8(v36, (int8x16_t)v37);
      v27 = (uint64_t)vorr_s8(*(int8x8_t *)v40.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
      if (v13 - 1 != v35)
        goto LABEL_43;
    }
LABEL_45:
    if (!v27)
    {
      a1->neg = 0;
      a1->top = 0;
      return 1;
    }
    goto LABEL_46;
  }
  if (top < 4)
  {
    v17 = 0;
    v18 = 0;
LABEL_12:
    v24 = top - v17;
    v25 = &d[v17];
    do
    {
      v26 = *v25++;
      *(_QWORD *)&v18 |= v26;
      --v24;
    }
    while (v24);
    goto LABEL_14;
  }
  v17 = top & 0xFFFFFFFFFFFFFFFCLL;
  v19 = (int8x16_t *)(d + 2);
  v20 = 0uLL;
  v21 = top & 0xFFFFFFFFFFFFFFFCLL;
  v22 = 0uLL;
  do
  {
    v20 = vorrq_s8(v19[-1], v20);
    v22 = vorrq_s8(*v19, v22);
    v19 += 2;
    v21 -= 4;
  }
  while (v21);
  v23 = vorrq_s8(v22, v20);
  v18 = vorr_s8(*(int8x8_t *)v23.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL));
  if (v17 != top)
    goto LABEL_12;
LABEL_14:
  if (!*(_QWORD *)&v18)
    goto LABEL_20;
  if (((int)top < 1 || (*(_BYTE *)d & 1) == 0) && ((int)v13 < 1 || (*(_BYTE *)v12 & 1) == 0))
  {
    *a2 = 1;
    v14 = 112;
    v15 = 199;
    goto LABEL_4;
  }
  if (top >= v13)
    v29 = v13;
  else
    v29 = top;
  if (!*(_BYTE *)(a5 + 40))
  {
    v30 = *(_QWORD *)(a5 + 32);
    v31 = *(_QWORD *)(a5 + 16);
    if (v31 == *(_QWORD *)(a5 + 24))
    {
      if (v31)
        v32 = (3 * v31) >> 1;
      else
        v32 = 32;
      v33 = v32 > v31 && v32 >> 61 == 0;
      if (!v33 || (v34 = OPENSSL_realloc(*(_QWORD **)(a5 + 8), 8 * v32)) == 0)
      {
        *(_WORD *)(a5 + 40) = 257;
        goto LABEL_51;
      }
      *(_QWORD *)(a5 + 8) = v34;
      *(_QWORD *)(a5 + 24) = v32;
      v31 = *(_QWORD *)(a5 + 16);
    }
    else
    {
      v34 = *(_QWORD **)(a5 + 8);
    }
    v34[v31] = v30;
    ++*(_QWORD *)(a5 + 16);
  }
LABEL_51:
  v44 = BN_CTX_get((BN_CTX *)a5);
  v45 = BN_CTX_get((BN_CTX *)a5);
  v209 = BN_CTX_get((BN_CTX *)a5);
  v207 = BN_CTX_get((BN_CTX *)a5);
  v206 = BN_CTX_get((BN_CTX *)a5);
  v208 = BN_CTX_get((BN_CTX *)a5);
  v205 = BN_CTX_get((BN_CTX *)a5);
  v46 = BN_CTX_get((BN_CTX *)a5);
  result = 0;
  if (!v44 || !v45 || !v209 || !v207 || !v206 || !v208 || !v205 || !v46)
    goto LABEL_190;
  p_d = &v46->d;
  if (v44 != a3)
  {
    result = bn_wexpand((uint64_t)v44, a3->top);
    if (!(_DWORD)result)
      goto LABEL_190;
    v47 = a3->top;
    if ((_DWORD)v47)
    {
      memcpy(v44->d, a3->d, 8 * v47);
      LODWORD(v47) = a3->top;
    }
    v44->top = v47;
    v44->neg = a3->neg;
  }
  result = (uint64_t)BN_copy(v45, a4);
  if (!result)
    goto LABEL_190;
  result = BN_one((uint64_t)v209);
  if (!(_DWORD)result)
    goto LABEL_190;
  result = BN_one((uint64_t)v208);
  if (!(_DWORD)result)
    goto LABEL_190;
  result = bn_resize_words((uint64_t)v44, v13);
  if (!(_DWORD)result)
    goto LABEL_190;
  result = bn_resize_words((uint64_t)v45, v13);
  if (!(_DWORD)result)
    goto LABEL_190;
  result = bn_resize_words((uint64_t)v209, v13);
  if (!(_DWORD)result)
    goto LABEL_190;
  result = bn_resize_words((uint64_t)v206, v13);
  if (!(_DWORD)result)
    goto LABEL_190;
  result = bn_resize_words((uint64_t)v207, v29);
  if (!(_DWORD)result)
    goto LABEL_190;
  result = bn_resize_words((uint64_t)v208, v29);
  if (!(_DWORD)result)
    goto LABEL_190;
  result = bn_resize_words((uint64_t)v205, v13);
  if (!(_DWORD)result)
    goto LABEL_190;
  result = bn_resize_words((uint64_t)p_d, v13);
  if (!(_DWORD)result)
    goto LABEL_190;
  v48 = (v29 + v13) << 6;
  num = v29;
  if (v48 < (uint64_t)v29 << 6)
  {
    v49 = 102;
    v50 = 248;
LABEL_188:
    ERR_put_error(3, 0, v49, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/gcd_extra.c", v50);
    result = 0;
    goto LABEL_190;
  }
  v196 = (const unint64_t **)&v45->d;
  if (v29 + v13)
  {
    v195 = 0;
    if (v48 <= 1)
      v51 = 1;
    else
      v51 = (v29 + v13) << 6;
    v187 = v29;
    v188 = v51;
    v197 = v13;
    v189 = v13 & 0xFFFFFFFFFFFFFFFCLL;
    v186 = v29 & 0xFFFFFFFFFFFFFFFCLL;
    while (1)
    {
      v53 = ((uint64_t)(*v44->d << 63) >> 63) & -(uint64_t)(**v196 & 1);
      v54 = bn_sub_words(v205->d, *v196, v44->d, v13);
      v55 = *v196;
      v199 = v53;
      v56 = (v54 - 1) & v53;
      v57 = v205->d;
      if (!(_DWORD)v13)
        goto LABEL_97;
      v58 = ~v56;
      if (v13 < 4)
        break;
      if (v55 < &v57[v197] && v57 < &v55[v197])
        break;
      v60 = (int8x16_t)vdupq_n_s64(v56);
      v61 = (int8x16_t)vdupq_n_s64(v58);
      v62 = (int8x16_t *)(v57 + 2);
      v63 = (int8x16_t *)(v55 + 2);
      v64 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v65 = vorrq_s8(vandq_s8(*v63, v61), vandq_s8(*v62, v60));
        v63[-1] = vorrq_s8(vandq_s8(v63[-1], v61), vandq_s8(v62[-1], v60));
        *v63 = v65;
        v62 += 2;
        v63 += 2;
        v64 -= 4;
      }
      while (v64);
      v66 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      if (v189 != v13)
        goto LABEL_95;
LABEL_97:
      v202 = (v54 - 1) & v53;
      v72 = -(uint64_t)v54;
      bn_sub_words(v57, v44->d, v55, v13);
      v73 = v199 & v72;
      v74 = v205->d;
      if (!(_DWORD)v13)
        goto LABEL_104;
      v75 = (int8x16_t *)v44->d;
      v76 = ~v73;
      if (v13 < 4 || v75 < (int8x16_t *)&v74[v197] && v74 < &v75->u64[v197])
      {
        v77 = 0;
LABEL_102:
        v78 = v13 - v77;
        v79 = v77;
        v80 = &v75->u64[v79];
        v81 = &v74[v79];
        do
        {
          v82 = *v81++;
          *v80 = *v80 & v76 | v82 & v73;
          ++v80;
          --v78;
        }
        while (v78);
        goto LABEL_104;
      }
      v137 = (int8x16_t)vdupq_n_s64(v73);
      v138 = (int8x16_t)vdupq_n_s64(v76);
      v139 = (int8x16_t *)(v74 + 2);
      v140 = v75 + 1;
      v141 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v142 = vorrq_s8(vandq_s8(*v140, v138), vandq_s8(*v139, v137));
        v140[-1] = vorrq_s8(vandq_s8(v140[-1], v138), vandq_s8(v139[-1], v137));
        *v140 = v142;
        v139 += 2;
        v140 += 2;
        v141 -= 4;
      }
      while (v141);
      v77 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      if (v189 != v13)
        goto LABEL_102;
LABEL_104:
      v200 = v199 & v72;
      v193 = bn_add_words(v74, v209->d, v206->d, v13);
      v83 = v193 - bn_sub_words(*p_d, v205->d, a4->d, v13);
      v84 = v205->d;
      if (!(_DWORD)v13)
        goto LABEL_137;
      v85 = *p_d;
      v86 = ~v83;
      if (v13 >= 4 && (v84 >= &v85[v197] || v85 >= &v84[v197]))
      {
        v143 = (int8x16_t)vdupq_n_s64(v83);
        v144 = (int8x16_t)vdupq_n_s64(v86);
        v145 = (int8x16_t *)(v84 + 2);
        v146 = (int8x16_t *)(v85 + 2);
        v147 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v148 = vorrq_s8(vandq_s8(*v146, v144), vandq_s8(*v145, v143));
          v145[-1] = vorrq_s8(vandq_s8(v146[-1], v144), vandq_s8(v145[-1], v143));
          *v145 = v148;
          v145 += 2;
          v146 += 2;
          v147 -= 4;
        }
        while (v147);
        v87 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        v89 = v200;
        v88 = v202;
        if (v189 == v13)
          goto LABEL_111;
      }
      else
      {
        v87 = 0;
        v89 = v200;
        v88 = v202;
      }
      v90 = v13 - v87;
      v91 = v87;
      v92 = &v85[v91];
      v93 = &v84[v91];
      do
      {
        v94 = *v92++;
        *v93 = v94 & v86 | *v93 & v83;
        ++v93;
        --v90;
      }
      while (v90);
LABEL_111:
      v95 = v209->d;
      v96 = ~v89;
      if (v13 >= 4 && (v95 < &v84[v197] ? (v97 = v84 >= &v95[v197]) : (v97 = 1), v97))
      {
        v98 = (int8x16_t)vdupq_n_s64(v89);
        v99 = (int8x16_t)vdupq_n_s64(v96);
        v100 = (int8x16_t *)(v84 + 2);
        v101 = (int8x16_t *)(v95 + 2);
        v102 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v103 = vorrq_s8(vandq_s8(*v101, v99), vandq_s8(*v100, v98));
          v101[-1] = vorrq_s8(vandq_s8(v101[-1], v99), vandq_s8(v100[-1], v98));
          *v101 = v103;
          v100 += 2;
          v101 += 2;
          v102 -= 4;
        }
        while (v102);
        v104 = v13 & 0xFFFFFFFFFFFFFFFCLL;
        if (v189 == v13)
          goto LABEL_124;
      }
      else
      {
        v104 = 0;
      }
      v105 = v13 - v104;
      v106 = v104;
      v107 = (unint64_t *)&v95[v106];
      v108 = &v84[v106];
      do
      {
        v109 = *v108++;
        *v107 = *v107 & v96 | v109 & v89;
        ++v107;
        --v105;
      }
      while (v105);
LABEL_124:
      v110 = v206->d;
      v111 = ~v88;
      if (v13 < 4 || (v110 < &v84[v197] ? (v112 = v84 >= &v110[v197]) : (v112 = 1), !v112))
      {
        v119 = 0;
LABEL_135:
        v120 = v13 - v119;
        v121 = v119;
        v122 = (unint64_t *)&v110[v121];
        v123 = &v84[v121];
        do
        {
          v124 = *v123++;
          *v122 = *v122 & v111 | v124 & v88;
          ++v122;
          --v120;
        }
        while (v120);
        goto LABEL_137;
      }
      v113 = (int8x16_t)vdupq_n_s64(v88);
      v114 = (int8x16_t)vdupq_n_s64(v111);
      v115 = (int8x16_t *)(v84 + 2);
      v116 = (int8x16_t *)(v110 + 2);
      v117 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v118 = vorrq_s8(vandq_s8(*v116, v114), vandq_s8(*v115, v113));
        v116[-1] = vorrq_s8(vandq_s8(v116[-1], v114), vandq_s8(v115[-1], v113));
        *v116 = v118;
        v115 += 2;
        v116 += 2;
        v117 -= 4;
      }
      while (v117);
      v119 = v13 & 0xFFFFFFFFFFFFFFFCLL;
      if (v189 != v13)
        goto LABEL_135;
LABEL_137:
      v194 = v83;
      bn_add_words(v84, v207->d, v208->d, num);
      bn_sub_words(*p_d, v205->d, a3->d, num);
      v125 = (int8x16_t *)v205->d;
      if (!(_DWORD)num)
        goto LABEL_82;
      v126 = *p_d;
      v127 = ~v194;
      if (num >= 4)
      {
        v130 = v125 >= (int8x16_t *)&v126[v187] || v126 >= &v125->u64[v187];
        v129 = v200;
        if (v130)
        {
          v131 = (int8x16_t)vdupq_n_s64(v194);
          v132 = (int8x16_t)vdupq_n_s64(v127);
          v133 = v125 + 1;
          v134 = (int8x16_t *)(v126 + 2);
          v135 = v186;
          do
          {
            v136 = vorrq_s8(vandq_s8(*v134, v132), vandq_s8(*v133, v131));
            v133[-1] = vorrq_s8(vandq_s8(v134[-1], v132), vandq_s8(v133[-1], v131));
            *v133 = v136;
            v133 += 2;
            v134 += 2;
            v135 -= 4;
          }
          while (v135);
          v128 = v186;
          if (v186 == num)
            goto LABEL_159;
        }
        else
        {
          v128 = 0;
        }
      }
      else
      {
        v128 = 0;
        v129 = v200;
      }
      v149 = num - v128;
      v150 = v128;
      v151 = &v126[v150];
      v152 = &v125->u64[v150];
      do
      {
        v153 = *v151++;
        *v152 = v153 & v127 | *v152 & v194;
        ++v152;
        --v149;
      }
      while (v149);
LABEL_159:
      v154 = v207->d;
      v155 = ~v129;
      if (num < 4
        || (v154 < &v125->u64[v187] ? (v156 = v125 >= (int8x16_t *)&v154[v187]) : (v156 = 1), !v156))
      {
        v163 = 0;
LABEL_170:
        v164 = num - v163;
        v165 = v163;
        v166 = (unint64_t *)&v154[v165];
        v167 = &v125->i64[v165];
        do
        {
          v168 = *v167++;
          *v166 = *v166 & v155 | v168 & v129;
          ++v166;
          --v164;
        }
        while (v164);
        goto LABEL_172;
      }
      v157 = (int8x16_t)vdupq_n_s64(v129);
      v158 = (int8x16_t)vdupq_n_s64(v155);
      v159 = v125 + 1;
      v160 = (int8x16_t *)(v154 + 2);
      v161 = v186;
      do
      {
        v162 = vorrq_s8(vandq_s8(*v160, v158), vandq_s8(*v159, v157));
        v160[-1] = vorrq_s8(vandq_s8(v160[-1], v158), vandq_s8(v159[-1], v157));
        *v160 = v162;
        v159 += 2;
        v160 += 2;
        v161 -= 4;
      }
      while (v161);
      v163 = v186;
      if (v186 != num)
        goto LABEL_170;
LABEL_172:
      v169 = v208->d;
      v170 = ~v202;
      if (num >= 4
        && (v169 < &v125->u64[v187] ? (v171 = v125 >= (int8x16_t *)&v169[v187]) : (v171 = 1), v171))
      {
        v172 = (int8x16_t)vdupq_n_s64(v202);
        v173 = (int8x16_t)vdupq_n_s64(v170);
        v174 = v125 + 1;
        v175 = (int8x16_t *)(v169 + 2);
        v176 = v186;
        do
        {
          v177 = vorrq_s8(vandq_s8(*v175, v173), vandq_s8(*v174, v172));
          v175[-1] = vorrq_s8(vandq_s8(v175[-1], v173), vandq_s8(v174[-1], v172));
          *v175 = v177;
          v174 += 2;
          v175 += 2;
          v176 -= 4;
        }
        while (v176);
        v178 = v186;
        if (v186 == num)
          goto LABEL_82;
      }
      else
      {
        v178 = 0;
      }
      v179 = num - v178;
      v180 = v178;
      v181 = (unint64_t *)&v169[v180];
      v182 = &v125->i64[v180];
      do
      {
        v183 = *v182++;
        *v181 = *v181 & v170 | v183 & v202;
        ++v181;
        --v179;
      }
      while (v179);
LABEL_82:
      v198 = (*v44->d & 1) - 1;
      v201 = (**v196 & 1) - 1;
      maybe_rshift1_words((int8x16_t *)v44->d, v198, v125, v13);
      v190 = (-(*v207->d & 1) | -(*v209->d & 1)) & v198;
      v191 = maybe_add_words((unint64_t)v209->d, v190, (uint64_t *)a4->d, (unint64_t)v205->d, v13);
      LODWORD(v190) = maybe_add_words((unint64_t)v207->d, v190, (uint64_t *)a3->d, (unint64_t)v205->d, num);
      maybe_rshift1_words_carry((int8x16_t *)v209->d, v191, v198, (int8x16_t *)v205->d, v13);
      maybe_rshift1_words_carry((int8x16_t *)v207->d, v190, v198, (int8x16_t *)v205->d, num);
      maybe_rshift1_words((int8x16_t *)*v196, v201, (int8x16_t *)v205->d, v13);
      v52 = (-(*v208->d & 1) | -(*v206->d & 1)) & v201;
      LODWORD(v198) = maybe_add_words((unint64_t)v206->d, v52, (uint64_t *)a4->d, (unint64_t)v205->d, v13);
      v192 = maybe_add_words((unint64_t)v208->d, v52, (uint64_t *)a3->d, (unint64_t)v205->d, num);
      maybe_rshift1_words_carry((int8x16_t *)v206->d, v198, v201, (int8x16_t *)v205->d, v13);
      maybe_rshift1_words_carry((int8x16_t *)v208->d, v192, v201, (int8x16_t *)v205->d, num);
      if (++v195 == v188)
        goto LABEL_186;
    }
    v66 = 0;
LABEL_95:
    v67 = v13 - v66;
    v68 = v66;
    v69 = (unint64_t *)&v55[v66];
    v70 = &v57[v68];
    do
    {
      v71 = *v70++;
      *v69 = *v69 & v58 | v71 & v56;
      ++v69;
      --v67;
    }
    while (v67);
    goto LABEL_97;
  }
LABEL_186:
  if (!BN_is_one(&v44->d))
  {
    *a2 = 1;
    v49 = 112;
    v50 = 322;
    goto LABEL_188;
  }
  result = BN_copy(a1, v209) != 0;
LABEL_190:
  if (!*(_BYTE *)(a5 + 40))
  {
    v184 = *(_QWORD *)(a5 + 8);
    v185 = *(_QWORD *)(a5 + 16) - 1;
    *(_QWORD *)(a5 + 16) = v185;
    *(_QWORD *)(a5 + 32) = *(_QWORD *)(v184 + 8 * v185);
  }
  return result;
}

int8x16_t *maybe_rshift1_words(int8x16_t *result, unint64_t a2, int8x16_t *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t *v19;
  int8x16_t *v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  int8x16_t *v24;
  unint64_t v25;
  int8x16_t v26;

  if (!a4)
    return result;
  v4 = a4 - 1;
  if (a4 == 1)
  {
    a3->i64[0] = (unint64_t)result->i64[0] >> 1;
    v10 = ~a2;
LABEL_14:
    v11 = 0;
LABEL_15:
    v12 = a4 - v11;
    v13 = v11;
    v14 = (unint64_t *)result + v11;
    v15 = &a3->i64[v13];
    do
    {
      v16 = *v15++;
      *v14 = *v14 & v10 | v16 & a2;
      ++v14;
      --v12;
    }
    while (v12);
    return result;
  }
  if (a4 >= 7 && ((int8x16_t *)((char *)result + 8 * a4) <= a3 || (int8x16_t *)((char *)a3 + 8 * a4 - 8) <= result))
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    v23 = result + 1;
    v24 = a3 + 1;
    v25 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v26 = vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)v23 + 8), 0x3FuLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)v23, 1uLL));
      v24[-1] = vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)&v23[-1] + 8), 0x3FuLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v23[-1], 1uLL));
      *v24 = v26;
      v23 += 2;
      v24 += 2;
      v25 -= 4;
    }
    while (v25);
    if (v4 == v5)
      goto LABEL_9;
  }
  else
  {
    v5 = 0;
  }
  v6 = v5;
  v7 = &a3->i64[v5];
  v8 = ~v5 + a4;
  v9 = (uint64_t)&result->i64[v6 + 1];
  do
  {
    *v7++ = *(__int128 *)(v9 - 8) >> 1;
    v9 += 8;
    --v8;
  }
  while (v8);
LABEL_9:
  a3->i64[v4] = (unint64_t)result->i64[v4] >> 1;
  v10 = ~a2;
  if (a4 < 4 || (int8x16_t *)((char *)a3 + 8 * a4) > result && (int8x16_t *)((char *)result + 8 * a4) > a3)
    goto LABEL_14;
  v17 = (int8x16_t)vdupq_n_s64(a2);
  v11 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v18 = (int8x16_t)vdupq_n_s64(v10);
  v19 = a3 + 1;
  v20 = result + 1;
  v21 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v22 = vorrq_s8(vandq_s8(*v20, v18), vandq_s8(*v19, v17));
    v20[-1] = vorrq_s8(vandq_s8(v20[-1], v18), vandq_s8(v19[-1], v17));
    *v20 = v22;
    v19 += 2;
    v20 += 2;
    v21 -= 4;
  }
  while (v21);
  if (v11 != a4)
    goto LABEL_15;
  return result;
}

unint64_t maybe_add_words(unint64_t a1, unint64_t a2, uint64_t *a3, unint64_t a4, unint64_t a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t *v45;
  int8x16_t *v46;
  unint64_t v47;
  int8x16_t v48;

  if (!a5)
    return 0;
  if (a5 < 4)
  {
    v5 = 0;
    v6 = a5;
    v7 = (uint64_t *)a1;
    v8 = (_QWORD *)a4;
    do
    {
LABEL_23:
      v30 = *v7++;
      v29 = v30;
      v32 = *a3++;
      v31 = v32;
      v11 = __CFADD__(v29, v5);
      v33 = v29 + v5;
      v34 = v11;
      v11 = __CFADD__(v33, v31);
      v35 = v33 + v31;
      if (v11)
        v5 = v34 + 1;
      else
        v5 = v34;
      *v8++ = v35;
      --v6;
    }
    while (v6);
    goto LABEL_30;
  }
  v5 = 0;
  v6 = a5;
  v7 = (uint64_t *)a1;
  v8 = (_QWORD *)a4;
  do
  {
    v10 = *a3;
    v11 = __CFADD__(*v7, v5);
    v12 = *v7 + v5;
    v13 = v11;
    v11 = __CFADD__(v12, v10);
    *v8 = v12 + v10;
    v14 = v7[1];
    v15 = a3[1];
    v17 = v11;
    v11 = __CFADD__(v11, v14);
    v16 = v17 + v14;
    v11 |= __CFADD__(v13, v16);
    v16 += v13;
    v18 = v11;
    v11 = __CFADD__(v16, v15);
    v8[1] = v16 + v15;
    v19 = v7[2];
    v20 = a3[2];
    v22 = v11;
    v11 = __CFADD__(v11, v19);
    v21 = v22 + v19;
    v11 |= __CFADD__(v18, v21);
    v21 += v18;
    v23 = v11;
    v8[2] = v21 + v20;
    v24 = v7[3];
    v25 = a3[3];
    v11 = __CFADD__(v25, v24);
    v26 = v25 + v24;
    v27 = v11;
    v11 = __CFADD__(__CFADD__(v21, v20), v26) | __CFADD__(v23, __CFADD__(v21, v20) + v26);
    v28 = v23 + __CFADD__(v21, v20) + v26;
    if (v11)
      v5 = v27 + 1;
    else
      v5 = v27;
    v8[3] = v28;
    v7 += 4;
    a3 += 4;
    v8 += 4;
    v6 -= 4;
  }
  while (v6 >= 4);
  if (v6)
    goto LABEL_23;
LABEL_30:
  v36 = ~a2;
  if (a5 >= 4 && (a4 + 8 * a5 <= a1 || a1 + 8 * a5 <= a4))
  {
    v43 = (int8x16_t)vdupq_n_s64(a2);
    v37 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    v44 = (int8x16_t)vdupq_n_s64(v36);
    v45 = (int8x16_t *)(a4 + 16);
    v46 = (int8x16_t *)(a1 + 16);
    v47 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v48 = vorrq_s8(vandq_s8(*v46, v44), vandq_s8(*v45, v43));
      v46[-1] = vorrq_s8(vandq_s8(v46[-1], v44), vandq_s8(v45[-1], v43));
      *v46 = v48;
      v45 += 2;
      v46 += 2;
      v47 -= 4;
    }
    while (v47);
    if (v37 == a5)
      return v5 & a2;
  }
  else
  {
    v37 = 0;
  }
  v38 = a5 - v37;
  v39 = 8 * v37;
  v40 = (unint64_t *)(a1 + 8 * v37);
  v41 = (uint64_t *)(a4 + v39);
  do
  {
    v42 = *v41++;
    *v40 = *v40 & v36 | v42 & a2;
    ++v40;
    --v38;
  }
  while (v38);
  return v5 & a2;
}

int8x16_t *maybe_rshift1_words_carry(int8x16_t *result, int a2, unint64_t a3, int8x16_t *a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t *v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t *v26;
  int8x16_t *v27;
  unint64_t v28;
  int8x16_t v29;

  if (a5)
  {
    v5 = a5 - 1;
    v6 = a5 - 1;
    if (a5 == 1)
    {
      a4->i64[0] = (unint64_t)result->i64[0] >> 1;
      v12 = a3;
      v13 = ~a3;
      goto LABEL_14;
    }
    if (a5 >= 7 && ((int8x16_t *)((char *)result + 8 * a5) <= a4 || (int8x16_t *)((char *)a4 + 8 * a5 - 8) <= result))
    {
      v7 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      v26 = result + 1;
      v27 = a4 + 1;
      v28 = v5 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v29 = vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)v26 + 8), 0x3FuLL), (int8x16_t)vshrq_n_u64(*(uint64x2_t *)v26, 1uLL));
        v27[-1] = vorrq_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)((char *)&v26[-1] + 8), 0x3FuLL), (int8x16_t)vshrq_n_u64((uint64x2_t)v26[-1], 1uLL));
        *v27 = v29;
        v26 += 2;
        v27 += 2;
        v28 -= 4;
      }
      while (v28);
      if (v5 == v7)
      {
LABEL_9:
        a4->i64[v6] = (unint64_t)result->i64[v6] >> 1;
        v12 = a3;
        v13 = ~a3;
        if (a5 >= 4 && ((int8x16_t *)((char *)a4 + 8 * a5) <= result || (int8x16_t *)((char *)result + 8 * a5) <= a4))
        {
          v20 = (int8x16_t)vdupq_n_s64(a3);
          v14 = a5 & 0xFFFFFFFFFFFFFFFCLL;
          v21 = (int8x16_t)vdupq_n_s64(v13);
          v22 = a4 + 1;
          v23 = result + 1;
          v24 = a5 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v25 = vorrq_s8(vandq_s8(*v23, v21), vandq_s8(*v22, v20));
            v23[-1] = vorrq_s8(vandq_s8(v23[-1], v21), vandq_s8(v22[-1], v20));
            *v23 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 4;
          }
          while (v24);
          if (v14 == a5)
            goto LABEL_17;
          goto LABEL_15;
        }
LABEL_14:
        v14 = 0;
LABEL_15:
        v15 = a5 - v14;
        v16 = v14;
        v17 = (unint64_t *)result + v14;
        v18 = &a4->i64[v16];
        do
        {
          v19 = *v18++;
          *v17 = *v17 & v13 | v19 & v12;
          ++v17;
          --v15;
        }
        while (v15);
LABEL_17:
        result->i64[v6] |= (unint64_t)(a3 & a2) << 63;
        return result;
      }
    }
    else
    {
      v7 = 0;
    }
    v8 = v7;
    v9 = &a4->i64[v7];
    v10 = ~v7 + a5;
    v11 = (uint64_t)&result->i64[v8 + 1];
    do
    {
      *v9++ = *(__int128 *)(v11 - 8) >> 1;
      v11 += 8;
      --v10;
    }
    while (v10);
    goto LABEL_9;
  }
  return result;
}

uint64_t CRYPTO_gcm128_setiv(unint64_t a1, uint64_t a2, int8x8_t *a3, unint64_t a4)
{
  int8x8_t *v4;
  int8x8_t v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int8x16_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  char v21;
  int8x16_t v22;
  int8x16_t v23;
  unint64_t v24;
  unint64_t v25;
  int8x16_t v26;
  uint64_t result;
  unint64_t v28;
  int8x8_t *v29;
  int8x8_t *v30;
  int8x8_t v31;
  int8x16_t v32;
  uint64_t v33;

  v4 = a3;
  v33 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  if (a4 != 12)
  {
    if (a4 < 0x10)
    {
      i = a4;
      if (!a4)
      {
LABEL_16:
        v24 = *(_QWORD *)a1;
        v25 = *(_QWORD *)(a1 + 8) ^ bswap64(8 * a4);
        *(_QWORD *)(a1 + 8) = v25;
        v32.i64[0] = bswap64(v25);
        v32.i64[1] = bswap64(v24);
        gcm_polyval_nohw((unint64_t *)&v32, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
        v26 = vrev64q_s8(v32);
        *(int8x16_t *)a1 = vextq_s8(v26, v26, 8uLL);
        v8 = bswap32(*(_DWORD *)(a1 + 12)) + 1;
        goto LABEL_17;
      }
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 80);
      v11 = *(_QWORD *)(a1 + 88);
      for (i = a4; i > 0xF; i -= 16)
      {
        v13 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)a1 ^= *(_QWORD *)v4;
        v14 = *(_QWORD *)&v4[1] ^ v13;
        *(_QWORD *)(a1 + 8) = v14;
        v15 = bswap64(*(_QWORD *)a1);
        v32.i64[0] = bswap64(v14);
        v32.i64[1] = v15;
        gcm_polyval_nohw((unint64_t *)&v32, v10, v11);
        v16 = vrev64q_s8(v32);
        *(int8x16_t *)a1 = vextq_s8(v16, v16, 8uLL);
        v4 += 2;
      }
      if (!i)
        goto LABEL_16;
    }
    if (i >= 8 && ((unint64_t)v4 + i <= a1 || (unint64_t)v4 >= a1 + i))
    {
      v17 = i & 8;
      v28 = v17;
      v29 = (int8x8_t *)a1;
      v30 = v4;
      do
      {
        v31 = *v30++;
        *v29 = veor_s8(*v29, v31);
        ++v29;
        v28 -= 8;
      }
      while (v28);
      if (i == v17)
        goto LABEL_15;
    }
    else
    {
      v17 = 0;
    }
    v18 = i - v17;
    v19 = (_BYTE *)(a1 + v17);
    v20 = (char *)v4 + v17;
    do
    {
      v21 = *v20++;
      *v19++ ^= v21;
      --v18;
    }
    while (v18);
LABEL_15:
    v22 = vrev64q_s8(*(int8x16_t *)a1);
    v32 = vextq_s8(v22, v22, 8uLL);
    gcm_polyval_nohw((unint64_t *)&v32, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
    v23 = vrev64q_s8(v32);
    *(int8x16_t *)a1 = vextq_s8(v23, v23, 8uLL);
    goto LABEL_16;
  }
  v7 = *a3;
  *(_DWORD *)(a1 + 8) = a3[1].i32[0];
  *(int8x8_t *)a1 = v7;
  *(_BYTE *)(a1 + 15) = 1;
  v8 = 2;
LABEL_17:
  result = (*(uint64_t (**)(unint64_t, unint64_t, uint64_t))(a1 + 352))(a1, a1 + 32, a2);
  *(_DWORD *)(a1 + 12) = bswap32(v8);
  return result;
}

uint64_t CRYPTO_gcm128_aad(int8x16_t *a1, int8x16_t *a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  char v8;
  unsigned int v10;
  __int8 v11;
  unint64_t v12;
  int8x16_t v13;
  int8x16_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int8 *v19;
  __int8 *v20;
  char v21;
  int8x16_t *v22;
  int8x16_t *v23;
  unint64_t v24;
  int8x16_t v25;
  unint64_t v26;
  int8x8_t *v27;
  int8x8_t *v28;
  unint64_t v29;
  int8x8_t v30;
  int8x16_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a1[3].i64[1])
    return 0;
  result = 0;
  v5 = a1[3].i64[0];
  v6 = __CFADD__(v5, a3);
  v7 = v5 + a3;
  v8 = v6;
  if (v7 <= 0x2000000000000000 && (v8 & 1) == 0)
  {
    a1[3].i64[0] = v7;
    v10 = a1[23].u32[1];
    if (v10)
    {
      if (!a3)
        goto LABEL_25;
      do
      {
        v11 = a2->i8[0];
        a2 = (int8x16_t *)((char *)a2 + 1);
        a1[4].i8[v10] ^= v11;
        v12 = a3 - 1;
        v10 = ((_BYTE)v10 + 1) & 0xF;
        if (!v10)
          break;
        --a3;
      }
      while (a3);
      if (v10)
        goto LABEL_25;
      v13 = vrev64q_s8(a1[4]);
      v31 = vextq_s8(v13, v13, 8uLL);
      gcm_polyval_nohw((unint64_t *)&v31, a1[5].i64[0], a1[5].i64[1]);
      v14 = vrev64q_s8(v31);
      a1[4] = vextq_s8(v14, v14, 8uLL);
      v15 = v12 & 0xFFFFFFFFFFFFFFF0;
      if ((v12 & 0xFFFFFFFFFFFFFFF0) == 0)
      {
LABEL_14:
        v16 = (unint64_t)a2;
        if (!v12)
        {
LABEL_15:
          v10 = 0;
LABEL_25:
          a1[23].i32[1] = v10;
          return 1;
        }
LABEL_18:
        if (v12 < 8 || &a1[4] < (int8x16_t *)&a2->i8[v12 + v15] && v16 < (unint64_t)a1[4].u64 + v12)
        {
          v17 = 0;
LABEL_22:
          v18 = v12 - v17;
          v19 = &a1[4].i8[v17];
          v20 = &a2->i8[v17 + v15];
          do
          {
            v21 = *v20++;
            *v19++ ^= v21;
            --v18;
          }
          while (v18);
LABEL_24:
          v10 = v12;
          goto LABEL_25;
        }
        if (v12 >= 0x20)
        {
          v17 = v12 & 0xFFFFFFFFFFFFFFE0;
          v22 = (int8x16_t *)((char *)a2 + v15 + 16);
          v23 = a1 + 5;
          v24 = v12 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v25 = veorq_s8(*v23, *v22);
            v23[-1] = veorq_s8(v23[-1], v22[-1]);
            *v23 = v25;
            v22 += 2;
            v23 += 2;
            v24 -= 32;
          }
          while (v24);
          if (v12 == v17)
            goto LABEL_24;
          if ((v12 & 0x18) == 0)
            goto LABEL_22;
        }
        else
        {
          v17 = 0;
        }
        v26 = v17;
        v17 = v12 & 0xFFFFFFFFFFFFFFF8;
        v27 = (int8x8_t *)&a2->i8[v26 + v15];
        v28 = (int8x8_t *)&a1[4].i8[v26];
        v29 = v26 - (v12 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v30 = *v27++;
          *v28 = veor_s8(*v28, v30);
          ++v28;
          v29 += 8;
        }
        while (v29);
        if (v12 == v17)
          goto LABEL_24;
        goto LABEL_22;
      }
    }
    else
    {
      v12 = a3;
      v15 = a3 & 0xFFFFFFFFFFFFFFF0;
      if ((a3 & 0xFFFFFFFFFFFFFFF0) == 0)
        goto LABEL_14;
    }
    gcm_ghash_nohw(a1 + 4, a1[5].i64, a2, v15);
    v16 = (unint64_t)a2->u64 + v15;
    v12 &= 0xFu;
    if (!v12)
      goto LABEL_15;
    goto LABEL_18;
  }
  return result;
}

uint64_t CRYPTO_gcm128_encrypt(int8x16_t *a1, uint64_t a2, int8x16_t *a3, uint64_t *a4, unint64_t a5, int8x16_t a6)
{
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  void (*v14)(int8x16_t *, int8x16_t *, uint64_t);
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  __int8 v18;
  __int8 *v19;
  char v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  void (*v25)(int8x16_t *, int8x16_t *, uint64_t);
  int8x16_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  int8x16_t *v32;
  int8x16_t *v33;
  uint64_t *v34;
  int8x16_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  unint64_t v40;
  int8x16_t *v41;
  unint64_t v42;
  int8x16_t *v43;
  unint64_t v44;
  BOOL v45;
  char v46;
  BOOL v48;
  int8x16_t *v50;
  unint64_t v51;
  int8x16_t *v52;
  int8x16_t *v53;
  int8x16_t v54;
  int8x16_t v55;
  __int8 *v56;
  char v57;
  void (*v58)(int8x16_t *, int8x16_t *, uint64_t);
  unint64_t v59;
  int8x16_t v61;
  uint64_t v62;

  result = 0;
  v62 = *MEMORY[0x24BDAC8D0];
  v8 = a1[3].i64[1];
  v45 = __CFADD__(v8, a5);
  v9 = v8 + a5;
  v10 = v45;
  if (v9 <= 0xFFFFFFFE0 && (v10 & 1) == 0)
  {
    v11 = a5;
    v14 = (void (*)(int8x16_t *, int8x16_t *, uint64_t))a1[22].i64[0];
    a1[3].i64[1] = v9;
    if (a1[23].i32[1])
    {
      v15 = vrev64q_s8(a1[4]);
      v61 = vextq_s8(v15, v15, 8uLL);
      gcm_polyval_nohw((unint64_t *)&v61, a1[5].i64[0], a1[5].i64[1]);
      v16 = vrev64q_s8(v61);
      a6 = vextq_s8(v16, v16, 8uLL);
      a1[4] = a6;
      a1[23].i32[1] = 0;
    }
    LODWORD(v17) = a1[23].i32[0];
    if ((_DWORD)v17)
    {
      if (!v11)
        goto LABEL_56;
      do
      {
        v18 = a3->i8[0];
        a3 = (int8x16_t *)((char *)a3 + 1);
        v19 = &a1->i8[v17];
        v20 = v19[16] ^ v18;
        *(_BYTE *)a4 = v20;
        a4 = (uint64_t *)((char *)a4 + 1);
        v19[64] ^= v20;
        v21 = v11 - 1;
        LODWORD(v17) = ((_BYTE)v17 + 1) & 0xF;
        if (!(_DWORD)v17)
          break;
        --v11;
      }
      while (v11);
      if ((_DWORD)v17)
        goto LABEL_56;
      v22 = vrev64q_s8(a1[4]);
      v61 = vextq_s8(v22, v22, 8uLL);
      gcm_polyval_nohw((unint64_t *)&v61, a1[5].i64[0], a1[5].i64[1]);
      v23 = vrev64q_s8(v61);
      a6 = vextq_s8(v23, v23, 8uLL);
      a1[4] = a6;
      v24 = bswap32(a1->u32[3]);
      if (v21 < 0xC00)
      {
LABEL_23:
        v40 = v21 & 0xFF0;
        if ((v21 & 0xFF0) != 0)
        {
          do
          {
            v14(a1, a1 + 1, a2);
            a1->i32[3] = bswap32(++v24);
            *a4 = a1[1].i64[0] ^ a3->i64[0];
            a4[1] = a1[1].i64[1] ^ a3->i64[1];
            a4 += 2;
            ++a3;
            v21 -= 16;
          }
          while (v21 > 0xF);
          a6 = gcm_ghash_nohw(a1 + 4, a1[5].i64, (int8x16_t *)((char *)a4 - v40), v40);
        }
        if (v21)
        {
          v41 = a1 + 1;
          ((void (*)(int8x16_t *, int8x16_t *, uint64_t, __n128))v14)(a1, &a1[1], a2, (__n128)a6);
          a1->i32[3] = bswap32(v24 + 1);
          if (v21 - 0x100000001 >= 0xFFFFFFFF0000000FLL)
          {
            LODWORD(v17) = 0;
            v43 = (int8x16_t *)((char *)a4 + v21);
            v44 = (unint64_t)a1[4].u64 + v21;
            v45 = a4 >= (uint64_t *)((char *)a3->i64 + v21) || a3 >= v43;
            v46 = !v45;
            v48 = v41 < (int8x16_t *)&a3->i8[v21] && (unint64_t)a3 < v44;
            if (v41 >= v43 || (unint64_t)a4 >= v44)
            {
              if ((v46 & 1) != 0)
              {
                v42 = v21;
              }
              else if (v48)
              {
                v42 = v21;
              }
              else
              {
                v17 = v21 & 0xFFFFFFFFFFFFFFF0;
                v42 = v21 & 0xF;
                v50 = a1 + 4;
                v51 = v21 & 0xFFFFFFFFFFFFFFF0;
                v52 = (int8x16_t *)a4;
                v53 = a3;
                do
                {
                  v54 = *v53++;
                  v55 = veorq_s8(v50[-3], v54);
                  *v52++ = v55;
                  *v50 = veorq_s8(*v50, v55);
                  ++v50;
                  v51 -= 16;
                }
                while (v51);
                if (v21 == v17)
                  goto LABEL_56;
              }
            }
            else
            {
              v42 = v21;
            }
          }
          else
          {
            LODWORD(v17) = 0;
            v42 = v21;
          }
          do
          {
            v56 = &a1->i8[v17];
            v57 = v56[16] ^ a3->i8[v17];
            *((_BYTE *)a4 + v17) = v57;
            v56[64] ^= v57;
            LODWORD(v17) = v17 + 1;
            --v42;
          }
          while (v42);
        }
        else
        {
          LODWORD(v17) = 0;
        }
LABEL_56:
        a1[23].i32[0] = v17;
        return 1;
      }
    }
    else
    {
      v21 = v11;
      v24 = bswap32(a1->u32[3]);
      if (v11 < 0xC00)
        goto LABEL_23;
    }
    v59 = v21;
    v58 = v14;
    v25 = v14;
    do
    {
      v26 = a3;
      v27 = a4;
      v28 = a4 + 2;
      v29 = -3072;
      do
      {
        v30 = v28;
        v31 = &v27[(unint64_t)v29 / 8];
        v32 = &v26[(unint64_t)v29 / 0x10];
        v33 = v26;
        v34 = v27;
        v25(a1, a1 + 1, a2);
        v27 = v34;
        a1->i32[3] = bswap32(++v24);
        v31[384] = a1[1].i64[0] ^ v32[192].i64[0];
        v26 = v33;
        v31[385] = a1[1].i64[1] ^ v32[192].i64[1];
        v28 = v30 + 2;
        v29 += 16;
      }
      while (v29);
      v35 = vrev64q_s8(a1[4]);
      v61 = vextq_s8(v35, v35, 8uLL);
      v36 = a1[5].i64[0];
      v37 = a1[5].i64[1];
      v38 = 3072;
      do
      {
        v61.i64[0] ^= bswap64(*(v30 - 383));
        v61.i64[1] ^= bswap64(*(v30 - 384));
        gcm_polyval_nohw((unint64_t *)&v61, v36, v37);
        v30 += 2;
        v38 -= 16;
      }
      while (v38);
      v39 = vrev64q_s8(v61);
      a6 = vextq_s8(v39, v39, 8uLL);
      a1[4] = a6;
      a4 = v34 + 384;
      v59 -= 3072;
      a3 = v33 + 192;
    }
    while (v59 > 0xBFF);
    a4 = v34 + 384;
    a3 = v33 + 192;
    v21 = v59;
    v14 = v58;
    goto LABEL_23;
  }
  return result;
}

uint64_t CRYPTO_gcm128_decrypt(int8x16_t *a1, uint64_t a2, int8x16_t *a3, uint64_t *a4, unint64_t a5)
{
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  void (*v14)(int8x16_t *, int8x16_t *, uint64_t, __n128);
  int8x16_t v15;
  int8x16_t v16;
  unint64_t v17;
  __int8 v18;
  __int8 *v19;
  unint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  unsigned int v23;
  uint64_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int8x16_t v29;
  uint64_t *v30;
  unint64_t v31;
  __n128 v32;
  int8x16_t *v33;
  unint64_t v34;
  unint64_t v35;
  int8x16_t *v36;
  BOOL v37;
  char v38;
  BOOL v40;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t *v44;
  unint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  __int8 v50;
  __int8 *v51;
  unint64_t v52;
  int8x16_t v53;
  uint64_t v54;

  result = 0;
  v54 = *MEMORY[0x24BDAC8D0];
  v7 = a1[3].i64[1];
  v37 = __CFADD__(v7, a5);
  v8 = v7 + a5;
  v9 = v37;
  if (v8 <= 0xFFFFFFFE0 && (v9 & 1) == 0)
  {
    v10 = a5;
    v14 = (void (*)(int8x16_t *, int8x16_t *, uint64_t, __n128))a1[22].i64[0];
    a1[3].i64[1] = v8;
    if (a1[23].i32[1])
    {
      v15 = vrev64q_s8(a1[4]);
      v53 = vextq_s8(v15, v15, 8uLL);
      gcm_polyval_nohw((unint64_t *)&v53, a1[5].i64[0], a1[5].i64[1]);
      v16 = vrev64q_s8(v53);
      a1[4] = vextq_s8(v16, v16, 8uLL);
      a1[23].i32[1] = 0;
    }
    LODWORD(v17) = a1[23].i32[0];
    if ((_DWORD)v17)
    {
      if (!v10)
        goto LABEL_54;
      do
      {
        v18 = a3->i8[0];
        a3 = (int8x16_t *)((char *)a3 + 1);
        v19 = &a1->i8[v17];
        *(_BYTE *)a4 = v19[16] ^ v18;
        a4 = (uint64_t *)((char *)a4 + 1);
        v19[64] ^= v18;
        v20 = v10 - 1;
        LODWORD(v17) = ((_BYTE)v17 + 1) & 0xF;
        if (!(_DWORD)v17)
          break;
        --v10;
      }
      while (v10);
      if ((_DWORD)v17)
        goto LABEL_54;
      v21 = vrev64q_s8(a1[4]);
      v53 = vextq_s8(v21, v21, 8uLL);
      gcm_polyval_nohw((unint64_t *)&v53, a1[5].i64[0], a1[5].i64[1]);
      v22 = vrev64q_s8(v53);
      a1[4] = vextq_s8(v22, v22, 8uLL);
      v23 = bswap32(a1->u32[3]);
      if (v20 < 0xC00)
      {
LABEL_21:
        v31 = v20 & 0xFF0;
        if ((v20 & 0xFF0) != 0)
        {
          v32 = (__n128)gcm_ghash_nohw(a1 + 4, a1[5].i64, a3, v31);
          do
          {
            v14(a1, a1 + 1, a2, v32);
            a1->i32[3] = bswap32(++v23);
            *a4 = a1[1].i64[0] ^ a3->i64[0];
            a4[1] = a1[1].i64[1] ^ a3->i64[1];
            a4 += 2;
            ++a3;
            v20 -= 16;
          }
          while (v20 > 0xF);
        }
        if (v20)
        {
          v33 = a1 + 1;
          ((void (*)(int8x16_t *, int8x16_t *, uint64_t, unint64_t))v14)(a1, &a1[1], a2, v31);
          a1->i32[3] = bswap32(v23 + 1);
          if (v20 - 0x100000001 >= 0xFFFFFFFF0000001FLL)
          {
            LODWORD(v17) = 0;
            v35 = (unint64_t)a1[4].u64 + v20;
            v36 = (int8x16_t *)((char *)a4 + v20);
            v37 = v33 >= (int8x16_t *)&a3->i8[v20] || (unint64_t)a3 >= v35;
            v38 = !v37;
            v40 = a4 < (uint64_t *)((char *)a3->i64 + v20) && a3 < v36;
            if ((unint64_t)a4 >= v35 || v33 >= v36)
            {
              if ((v38 & 1) != 0)
              {
                v34 = v20;
              }
              else if (v40)
              {
                v34 = v20;
              }
              else
              {
                v17 = v20 & 0xFFFFFFFFFFFFFFE0;
                v34 = v20 & 0x1F;
                v42 = a3 + 1;
                v43 = a1 + 5;
                v44 = (int8x16_t *)(a4 + 2);
                v45 = v20 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v46 = v42[-1];
                  v47 = *v42;
                  v48 = veorq_s8(*v43, *v42);
                  v43[-1] = veorq_s8(v43[-1], v46);
                  *v43 = v48;
                  v49 = veorq_s8(v43[-3], v47);
                  v44[-1] = veorq_s8(v43[-4], v46);
                  *v44 = v49;
                  v42 += 2;
                  v43 += 2;
                  v44 += 2;
                  v45 -= 32;
                }
                while (v45);
                if (v20 == v17)
                  goto LABEL_54;
              }
            }
            else
            {
              v34 = v20;
            }
          }
          else
          {
            LODWORD(v17) = 0;
            v34 = v20;
          }
          do
          {
            v50 = a3->i8[v17];
            v51 = &a1->i8[v17];
            v51[64] ^= v50;
            *((_BYTE *)a4 + v17) = v51[16] ^ v50;
            LODWORD(v17) = v17 + 1;
            --v34;
          }
          while (v34);
        }
        else
        {
          LODWORD(v17) = 0;
        }
LABEL_54:
        a1[23].i32[0] = v17;
        return 1;
      }
    }
    else
    {
      v20 = v10;
      v23 = bswap32(a1->u32[3]);
      if (v10 < 0xC00)
        goto LABEL_21;
    }
    do
    {
      v52 = v20;
      v24 = 0;
      v25 = vrev64q_s8(a1[4]);
      v53 = vextq_s8(v25, v25, 8uLL);
      v26 = a1[5].i64[0];
      v27 = a1[5].i64[1];
      do
      {
        v53.i64[0] ^= bswap64(a3[v24].u64[1]);
        v53.i64[1] ^= bswap64(a3[v24].u64[0]);
        gcm_polyval_nohw((unint64_t *)&v53, v26, v27);
        ++v24;
      }
      while (v24 != 192);
      v28 = 0;
      v29 = vrev64q_s8(v53);
      a1[4] = vextq_s8(v29, v29, 8uLL);
      do
      {
        v30 = &a4[v28 / 8];
        ((void (*)(int8x16_t *, int8x16_t *, uint64_t))v14)(a1, &a1[1], a2);
        a1->i32[3] = bswap32(++v23);
        *v30 = a1[1].i64[0] ^ a3[v28 / 0x10].i64[0];
        v30[1] = a1[1].i64[1] ^ a3[v28 / 0x10].i64[1];
        v28 += 16;
      }
      while (v28 != 3072);
      v20 = v52 - 3072;
      a3 += 192;
      a4 += 384;
    }
    while (v52 - 3072 > 0xBFF);
    goto LABEL_21;
  }
  return result;
}

uint64_t CRYPTO_gcm128_encrypt_ctr32(uint64_t a1, uint64_t a2, int8x16_t *a3, int8x16_t *a4, unint64_t a5, void (*a6)(int8x16_t *, int8x16_t *, unint64_t, uint64_t, uint64_t), int8x16_t a7)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v13;
  int8x16_t v17;
  int8x16_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  __int8 v22;
  unint64_t v23;
  int8x16_t v24;
  int8x16_t v25;
  unsigned int v26;
  uint64_t v27;
  int8x16_t v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  unint64_t v32;
  int8x16_t *v33;
  int8x16_t *v34;
  unint64_t v35;
  unint64_t v36;
  __int8 *v37;
  unint64_t v38;
  int8x16_t *v39;
  BOOL v40;
  char v41;
  BOOL v43;
  int8x16_t *v45;
  unint64_t v46;
  int8x16_t *v47;
  int8x16_t *v48;
  int8x16_t v49;
  int8x16_t v50;
  uint64_t v51;
  __int8 v52;
  int8x16_t v53;
  uint64_t v54;

  result = 0;
  v54 = *MEMORY[0x24BDAC8D0];
  v9 = *(_QWORD *)(a1 + 56);
  v40 = __CFADD__(v9, a5);
  v10 = v9 + a5;
  v11 = v40;
  if (v10 <= 0xFFFFFFFE0 && (v11 & 1) == 0)
  {
    v13 = a5;
    *(_QWORD *)(a1 + 56) = v10;
    if (*(_DWORD *)(a1 + 372))
    {
      v17 = vrev64q_s8(*(int8x16_t *)(a1 + 64));
      v53 = vextq_s8(v17, v17, 8uLL);
      gcm_polyval_nohw((unint64_t *)&v53, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
      v18 = vrev64q_s8(v53);
      a7 = vextq_s8(v18, v18, 8uLL);
      *(int8x16_t *)(a1 + 64) = a7;
      *(_DWORD *)(a1 + 372) = 0;
    }
    LODWORD(v19) = *(_DWORD *)(a1 + 368);
    if ((_DWORD)v19)
    {
      if (!v13)
        goto LABEL_51;
      do
      {
        v20 = a3->i8[0];
        a3 = (int8x16_t *)((char *)a3 + 1);
        v21 = a1 + v19;
        v22 = *(_BYTE *)(v21 + 16) ^ v20;
        a4->i8[0] = v22;
        a4 = (int8x16_t *)((char *)a4 + 1);
        *(_BYTE *)(v21 + 64) ^= v22;
        v23 = v13 - 1;
        LODWORD(v19) = ((_BYTE)v19 + 1) & 0xF;
        if (!(_DWORD)v19)
          break;
        --v13;
      }
      while (v13);
      if ((_DWORD)v19)
        goto LABEL_51;
      v24 = vrev64q_s8(*(int8x16_t *)(a1 + 64));
      v53 = vextq_s8(v24, v24, 8uLL);
      gcm_polyval_nohw((unint64_t *)&v53, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
      v25 = vrev64q_s8(v53);
      a7 = vextq_s8(v25, v25, 8uLL);
      *(int8x16_t *)(a1 + 64) = a7;
      v26 = bswap32(*(_DWORD *)(a1 + 12));
      if (v23 < 0xC00)
      {
LABEL_19:
        v32 = v23 & 0xFF0;
        if ((v23 & 0xFF0) != 0)
        {
          a6(a3, a4, v23 >> 4, a2, a1);
          v26 += v23 >> 4;
          *(_DWORD *)(a1 + 12) = bswap32(v26);
          v33 = (int8x16_t *)((char *)a3 + v32);
          v23 &= 0xFu;
          a7 = gcm_ghash_nohw((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80), a4, v32);
          v34 = (int8x16_t *)((char *)a4 + v32);
          if (v23)
          {
LABEL_21:
            v35 = a1 + 16;
            (*(void (**)(uint64_t, uint64_t, uint64_t, int8x16_t))(a1 + 352))(a1, a1 + 16, a2, a7);
            *(_DWORD *)(a1 + 12) = bswap32(v26 + 1);
            if (v23 - 0x100000001 >= 0xFFFFFFFF0000000FLL)
            {
              LODWORD(v19) = 0;
              v37 = &a4->i8[v23 + v32];
              v38 = v23 + a1 + 64;
              v39 = (int8x16_t *)((char *)a3 + v23 + v32);
              v40 = v34 >= v39 || v33 >= (int8x16_t *)v37;
              v41 = !v40;
              v43 = v35 < (unint64_t)v39 && (unint64_t)v33 < v38;
              if (v35 >= (unint64_t)v37 || (unint64_t)v34 >= v38)
              {
                if ((v41 & 1) != 0)
                {
                  v36 = v23;
                }
                else if (v43)
                {
                  v36 = v23;
                }
                else
                {
                  v19 = v23 & 0xFFFFFFFFFFFFFFF0;
                  v36 = v23 & 0xF;
                  v45 = (int8x16_t *)(a1 + 64);
                  v46 = v23 & 0xFFFFFFFFFFFFFFF0;
                  v47 = v34;
                  v48 = v33;
                  do
                  {
                    v49 = *v48++;
                    v50 = veorq_s8(v45[-3], v49);
                    *v47++ = v50;
                    *v45 = veorq_s8(*v45, v50);
                    ++v45;
                    v46 -= 16;
                  }
                  while (v46);
                  if (v23 == v19)
                    goto LABEL_51;
                }
              }
              else
              {
                v36 = v23;
              }
            }
            else
            {
              LODWORD(v19) = 0;
              v36 = v23;
            }
            do
            {
              v51 = a1 + v19;
              v52 = *(_BYTE *)(v51 + 16) ^ v33->i8[v19];
              v34->i8[v19] = v52;
              *(_BYTE *)(v51 + 64) ^= v52;
              LODWORD(v19) = v19 + 1;
              --v36;
            }
            while (v36);
LABEL_51:
            *(_DWORD *)(a1 + 368) = v19;
            return 1;
          }
        }
        else
        {
          v34 = a4;
          v33 = a3;
          if (v23)
            goto LABEL_21;
        }
        LODWORD(v19) = 0;
        goto LABEL_51;
      }
    }
    else
    {
      v23 = v13;
      v26 = bswap32(*(_DWORD *)(a1 + 12));
      if (v13 < 0xC00)
        goto LABEL_19;
    }
    do
    {
      a6(a3, a4, 192uLL, a2, a1);
      v27 = 0;
      v26 += 192;
      *(_DWORD *)(a1 + 12) = bswap32(v26);
      v28 = vrev64q_s8(*(int8x16_t *)(a1 + 64));
      v53 = vextq_s8(v28, v28, 8uLL);
      v29 = *(_QWORD *)(a1 + 80);
      v30 = *(_QWORD *)(a1 + 88);
      do
      {
        v53.i64[0] ^= bswap64(a4[v27].u64[1]);
        v53.i64[1] ^= bswap64(a4[v27].u64[0]);
        gcm_polyval_nohw((unint64_t *)&v53, v29, v30);
        ++v27;
      }
      while (v27 != 192);
      v31 = vrev64q_s8(v53);
      a7 = vextq_s8(v31, v31, 8uLL);
      *(int8x16_t *)(a1 + 64) = a7;
      a4 += 192;
      a3 += 192;
      v23 -= 3072;
    }
    while (v23 > 0xBFF);
    goto LABEL_19;
  }
  return result;
}

uint64_t CRYPTO_gcm128_decrypt_ctr32(uint64_t a1, uint64_t a2, int8x16_t *a3, __int8 *a4, unint64_t a5, void (*a6)(int8x16_t *, __int8 *, unint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v12;
  int8x16_t v16;
  int8x16_t v17;
  unint64_t v18;
  __int8 v19;
  uint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  unsigned int v24;
  uint64_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  unint64_t v30;
  __n128 v31;
  __int8 *v32;
  int8x16_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int8x16_t *v37;
  __int8 *v38;
  BOOL v39;
  char v40;
  BOOL v42;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  __int8 v52;
  uint64_t v53;
  int8x16_t v54;
  uint64_t v55;

  result = 0;
  v55 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 56);
  v39 = __CFADD__(v8, a5);
  v9 = v8 + a5;
  v10 = v39;
  if (v9 <= 0xFFFFFFFE0 && (v10 & 1) == 0)
  {
    v12 = a5;
    *(_QWORD *)(a1 + 56) = v9;
    if (*(_DWORD *)(a1 + 372))
    {
      v16 = vrev64q_s8(*(int8x16_t *)(a1 + 64));
      v54 = vextq_s8(v16, v16, 8uLL);
      gcm_polyval_nohw((unint64_t *)&v54, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
      v17 = vrev64q_s8(v54);
      *(int8x16_t *)(a1 + 64) = vextq_s8(v17, v17, 8uLL);
      *(_DWORD *)(a1 + 372) = 0;
    }
    LODWORD(v18) = *(_DWORD *)(a1 + 368);
    if ((_DWORD)v18)
    {
      if (!v12)
        goto LABEL_51;
      do
      {
        v19 = a3->i8[0];
        a3 = (int8x16_t *)((char *)a3 + 1);
        v20 = a1 + v18;
        *a4++ = *(_BYTE *)(v20 + 16) ^ v19;
        *(_BYTE *)(v20 + 64) ^= v19;
        v21 = v12 - 1;
        LODWORD(v18) = ((_BYTE)v18 + 1) & 0xF;
        if (!(_DWORD)v18)
          break;
        --v12;
      }
      while (v12);
      if ((_DWORD)v18)
        goto LABEL_51;
      v22 = vrev64q_s8(*(int8x16_t *)(a1 + 64));
      v54 = vextq_s8(v22, v22, 8uLL);
      gcm_polyval_nohw((unint64_t *)&v54, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
      v23 = vrev64q_s8(v54);
      *(int8x16_t *)(a1 + 64) = vextq_s8(v23, v23, 8uLL);
      v24 = bswap32(*(_DWORD *)(a1 + 12));
      if (v21 < 0xC00)
      {
LABEL_19:
        v30 = v21 & 0xFF0;
        if ((v21 & 0xFF0) != 0)
        {
          v31 = (__n128)gcm_ghash_nohw((int8x16_t *)(a1 + 64), (uint64_t *)(a1 + 80), a3, v21 & 0xFF0);
          a6(a3, a4, v21 >> 4, a2, a1, v31);
          v24 += v21 >> 4;
          *(_DWORD *)(a1 + 12) = bswap32(v24);
          v32 = &a4[v30];
          v33 = (int8x16_t *)((char *)a3 + v30);
          v21 &= 0xFu;
          if (v21)
          {
LABEL_21:
            v34 = a1 + 16;
            (*(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 352))(a1, a1 + 16, a2);
            *(_DWORD *)(a1 + 12) = bswap32(v24 + 1);
            if (v21 - 0x100000001 >= 0xFFFFFFFF0000001FLL)
            {
              LODWORD(v18) = 0;
              v36 = v21 + a1 + 64;
              v37 = (int8x16_t *)&a4[v21 + v30];
              v38 = &a3->i8[v21 + v30];
              v39 = v34 >= (unint64_t)v38 || (unint64_t)v33 >= v36;
              v40 = !v39;
              v42 = v32 < v38 && v33 < v37;
              if ((unint64_t)v32 >= v36 || v34 >= (unint64_t)v37)
              {
                if ((v40 & 1) != 0)
                {
                  v35 = v21;
                }
                else if (v42)
                {
                  v35 = v21;
                }
                else
                {
                  v18 = v21 & 0xFFFFFFFFFFFFFFE0;
                  v35 = v21 & 0x1F;
                  v44 = (int8x16_t *)((char *)a3 + v30 + 16);
                  v45 = (int8x16_t *)(a1 + 80);
                  v46 = (int8x16_t *)&a4[v30 + 16];
                  v47 = v21 & 0xFFFFFFFFFFFFFFE0;
                  do
                  {
                    v48 = v44[-1];
                    v49 = *v44;
                    v50 = veorq_s8(*v45, *v44);
                    v45[-1] = veorq_s8(v45[-1], v48);
                    *v45 = v50;
                    v51 = veorq_s8(v45[-3], v49);
                    v46[-1] = veorq_s8(v45[-4], v48);
                    *v46 = v51;
                    v44 += 2;
                    v45 += 2;
                    v46 += 2;
                    v47 -= 32;
                  }
                  while (v47);
                  if (v21 == v18)
                    goto LABEL_51;
                }
              }
              else
              {
                v35 = v21;
              }
            }
            else
            {
              LODWORD(v18) = 0;
              v35 = v21;
            }
            do
            {
              v52 = v33->i8[v18];
              v53 = a1 + v18;
              *(_BYTE *)(v53 + 64) ^= v52;
              v32[v18] = *(_BYTE *)(v53 + 16) ^ v52;
              LODWORD(v18) = v18 + 1;
              --v35;
            }
            while (v35);
LABEL_51:
            *(_DWORD *)(a1 + 368) = v18;
            return 1;
          }
        }
        else
        {
          v32 = a4;
          v33 = a3;
          if (v21)
            goto LABEL_21;
        }
        LODWORD(v18) = 0;
        goto LABEL_51;
      }
    }
    else
    {
      v21 = v12;
      v24 = bswap32(*(_DWORD *)(a1 + 12));
      if (v12 < 0xC00)
        goto LABEL_19;
    }
    do
    {
      v25 = 0;
      v26 = vrev64q_s8(*(int8x16_t *)(a1 + 64));
      v54 = vextq_s8(v26, v26, 8uLL);
      v27 = *(_QWORD *)(a1 + 80);
      v28 = *(_QWORD *)(a1 + 88);
      do
      {
        v54.i64[0] ^= bswap64(a3[v25].u64[1]);
        v54.i64[1] ^= bswap64(a3[v25].u64[0]);
        gcm_polyval_nohw((unint64_t *)&v54, v27, v28);
        ++v25;
      }
      while (v25 != 192);
      v29 = vrev64q_s8(v54);
      *(int8x16_t *)(a1 + 64) = vextq_s8(v29, v29, 8uLL);
      ((void (*)(int8x16_t *, __int8 *, uint64_t, uint64_t, uint64_t))a6)(a3, a4, 192, a2, a1);
      v24 += 192;
      *(_DWORD *)(a1 + 12) = bswap32(v24);
      a4 += 3072;
      a3 += 192;
      v21 -= 3072;
    }
    while (v21 > 0xBFF);
    goto LABEL_19;
  }
  return result;
}

uint64_t CRYPTO_gcm128_finish(uint64_t a1, int8x16_t *a2, unint64_t a3)
{
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t result;
  int8x16_t v10;
  int8x16_t v11;
  unint64_t v12;
  char v13;
  int8x16_t v14;
  unint64_t v15;
  int8x8_t v16;
  int8x8_t *v17;
  int8x8_t *v18;
  uint64_t v19;
  int8x8_t v20;
  int8x8_t v21;
  int8x8_t v22;
  uint64_t v23;
  unint64_t v24;
  __int8 *v25;
  char *v26;
  char v27;
  char v28;
  char v29;
  int8x16_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a1 + 368) || *(_DWORD *)(a1 + 372))
  {
    v6 = vrev64q_s8(*(int8x16_t *)(a1 + 64));
    v30 = vextq_s8(v6, v6, 8uLL);
    gcm_polyval_nohw((unint64_t *)&v30, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
    v7 = vrev64q_s8(v30);
    *(int8x16_t *)(a1 + 64) = vextq_s8(v7, v7, 8uLL);
  }
  v8 = veorq_s8(vrev64q_s8((int8x16_t)vshlq_n_s64(*(int64x2_t *)(a1 + 48), 3uLL)), *(int8x16_t *)(a1 + 64));
  *(int8x16_t *)(a1 + 64) = v8;
  v8.i64[0] = vdupq_laneq_s64((int64x2_t)v8, 1).u64[0];
  v8.i64[1] = *(_QWORD *)(a1 + 64);
  v30 = vrev64q_s8(v8);
  gcm_polyval_nohw((unint64_t *)&v30, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  result = 0;
  v10 = vrev64q_s8(v30);
  v11 = vextq_s8(v10, v10, 8uLL);
  *(int8x16_t *)(a1 + 64) = v11;
  *(int8x16_t *)(a1 + 64) = veorq_s8(*(int8x16_t *)(a1 + 32), v11);
  if (a2 && a3 <= 0x10)
  {
    if (!a3)
      return 1;
    if (a3 >= 8)
    {
      if (a3 >= 0x10)
      {
        v14 = veorq_s8(*a2, *(int8x16_t *)(a1 + 64));
        *(int8x8_t *)v14.i8 = vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL));
        v15 = v14.i64[0] | HIDWORD(v14.i64[0]) | ((unint64_t)(v14.i64[0] | HIDWORD(v14.i64[0])) >> 16);
        v13 = v15 | BYTE1(v15);
        return v13 == 0;
      }
      v12 = a3 & 0xFFFFFFFFFFFFFFF8;
      v16 = 0;
      v17 = (int8x8_t *)(a1 + 64);
      v18 = (int8x8_t *)a2;
      v19 = -(uint64_t)(a3 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v20 = *v17++;
        v21 = v20;
        v22 = *v18++;
        v16 = vorr_s8(veor_s8(v22, v21), v16);
        v19 += 8;
      }
      while (v19);
      v23 = *(_QWORD *)&v16 | HIDWORD(*(_QWORD *)&v16) | ((*(_QWORD *)&v16 | HIDWORD(*(_QWORD *)&v16)) >> 16);
      v13 = v23 | BYTE1(v23);
      if (v12 == a3)
        return v13 == 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
    v24 = a3 - v12;
    v25 = &a2->i8[v12];
    v26 = (char *)(v12 + a1 + 64);
    do
    {
      v28 = *v26++;
      v27 = v28;
      v29 = *v25++;
      v13 |= v29 ^ v27;
      --v24;
    }
    while (v24);
    return v13 == 0;
  }
  return result;
}

int8x16_t gcm_gmult_nohw(int8x16_t *a1, uint64_t *a2)
{
  int8x16_t v3;
  int8x16_t v4;
  int8x16_t result;
  int8x16_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v3 = vrev64q_s8(*a1);
  v6 = vextq_s8(v3, v3, 8uLL);
  gcm_polyval_nohw((unint64_t *)&v6, *a2, a2[1]);
  v4 = vrev64q_s8(v6);
  result = vextq_s8(v4, v4, 8uLL);
  *a1 = result;
  return result;
}

unint64_t *gcm_polyval_nohw(unint64_t *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v3 = result[1];
  v4 = *result & 0x1111111111111110;
  v5 = *result & 0x2222222222222220;
  v6 = *result & 0x4444444444444440;
  v7 = *result & 0x8888888888888880;
  v8 = (((unint64_t)v4 * (unsigned __int128)(a3 & 0x1111111111111111)) >> 64) ^ (((unint64_t)v5
                                                                                         * (unsigned __int128)(a3 & 0x8888888888888888)) >> 64) ^ (((unint64_t)v6 * (unsigned __int128)(a3 & 0x4444444444444444)) >> 64) ^ ((v7 * (unsigned __int128)(a3 & 0x2222222222222222)) >> 64);
  v9 = (v4 * (a3 & 0x1111111111111111)) ^ (v5 * (a3 & 0x8888888888888888)) ^ (v6 * (a3 & 0x4444444444444444)) ^ (v7 * (a3 & 0x2222222222222222));
  v10 = (((unint64_t)v4 * (unsigned __int128)(a3 & 0x2222222222222222)) >> 64) ^ (((unint64_t)v5
                                                                                          * (unsigned __int128)(a3 & 0x1111111111111111)) >> 64) ^ (((unint64_t)v6 * (unsigned __int128)(a3 & 0x8888888888888888)) >> 64) ^ ((v7 * (unsigned __int128)(a3 & 0x4444444444444444)) >> 64);
  v11 = (v4 * (a3 & 0x2222222222222222)) ^ (v5 * (a3 & 0x1111111111111111)) ^ (v6 * (a3 & 0x8888888888888888)) ^ (v7 * (a3 & 0x4444444444444444));
  v12 = (((unint64_t)v4 * (unsigned __int128)(a3 & 0x4444444444444444)) >> 64) ^ (((unint64_t)v5
                                                                                          * (unsigned __int128)(a3 & 0x2222222222222222)) >> 64) ^ (((unint64_t)v6 * (unsigned __int128)(a3 & 0x1111111111111111)) >> 64) ^ ((v7 * (unsigned __int128)(a3 & 0x8888888888888888)) >> 64);
  v13 = (v4 * (a3 & 0x4444444444444444)) ^ (v5 * (a3 & 0x2222222222222222)) ^ (v6 * (a3 & 0x1111111111111111)) ^ (v7 * (a3 & 0x8888888888888888));
  v14 = a3 & ((uint64_t)(*result << 62) >> 63);
  v15 = (((unint64_t)v4 * (unsigned __int128)(a3 & 0x8888888888888888)) >> 64) ^ (((unint64_t)v5
                                                                                          * (unsigned __int128)(a3 & 0x4444444444444444)) >> 64);
  v16 = ((uint64_t)(*result << 63) >> 63) & a3;
  v17 = v16 ^ (2 * v14);
  v18 = a3 & ((uint64_t)(*result << 61) >> 63);
  v19 = (v4 * (a3 & 0x8888888888888888)) ^ (v5 * (a3 & 0x4444444444444444));
  v20 = v14 >> 63;
  v21 = a3 & ((uint64_t)(*result << 60) >> 63);
  v22 = (v9 & 0x1111111111111111 | v11 & 0x2222222222222222 | v13 & 0x4444444444444444 | (v19 ^ (v6 * (a3 & 0x2222222222222222)) ^ (v7 * (a3 & 0x1111111111111111))) & 0x8888888888888888) ^ v17 ^ (4 * v18) ^ (8 * v21);
  v23 = (v8 & 0x1111111111111111 | v10 & 0x2222222222222222 | v12 & 0x4444444444444444 | (v15 ^ (((unint64_t)v6 * (unsigned __int128)(a3 & 0x2222222222222222)) >> 64) ^ ((v7 * (unsigned __int128)(a3 & 0x1111111111111111)) >> 64)) & 0x8888888888888888) ^ v20 ^ (v18 >> 62) ^ (v21 >> 61);
  v24 = a2 & ((uint64_t)(v3 << 62) >> 63);
  v25 = a2 & ((uint64_t)(v3 << 61) >> 63);
  v26 = ((uint64_t)(v3 << 63) >> 63) & a2 ^ (2 * v24) ^ (4 * v25);
  v27 = (v24 >> 63) ^ (v25 >> 62);
  v28 = a2 & ((uint64_t)(v3 << 60) >> 63);
  v29 = ((((v3 & 0x1111111111111110) * (a2 & 0x1111111111111111)) ^ ((v3 & 0x2222222222222220)
                                                                       * (a2 & 0x8888888888888888)) ^ ((v3 & 0x4444444444444440) * (a2 & 0x4444444444444444)) ^ ((v3 & 0x8888888888888880) * (a2 & 0x2222222222222222))) & 0x1111111111111111 | (((v3 & 0x1111111111111110) * (a2 & 0x2222222222222222)) ^ ((v3 & 0x2222222222222220) * (a2 & 0x1111111111111111)) ^ ((v3 & 0x4444444444444440) * (a2 & 0x8888888888888888)) ^ ((v3 & 0x8888888888888880) * (a2 & 0x4444444444444444))) & 0x2222222222222222 | (((v3 & 0x1111111111111110) * (a2 & 0x4444444444444444)) ^ ((v3 & 0x2222222222222220) * (a2 & 0x2222222222222222)) ^ ((v3 & 0x4444444444444440) * (a2 & 0x1111111111111111)) ^ ((v3 & 0x8888888888888880) * (a2 & 0x8888888888888888))) & 0x4444444444444444 | (((v3 & 0x1111111111111110) * (a2 & 0x8888888888888888)) ^ ((v3 & 0x2222222222222220) * (a2 & 0x4444444444444444)) ^ ((v3 & 0x4444444444444440) * (a2 & 0x2222222222222222)) ^ ((v3 & 0x8888888888888880) * (a2 & 0x1111111111111111))) & 0x8888888888888888) ^ v26 ^ (8 * v28);
  v30 = (((((v3 & 0x1111111111111110) * (unsigned __int128)(a2 & 0x1111111111111111)) >> 64) ^ (((v3 & 0x2222222222222220) * (unsigned __int128)(a2 & 0x8888888888888888)) >> 64) ^ (((v3 & 0x4444444444444440) * (unsigned __int128)(a2 & 0x4444444444444444)) >> 64) ^ (((v3 & 0x8888888888888880) * (unsigned __int128)(a2 & 0x2222222222222222)) >> 64)) & 0x1111111111111111 | ((((v3 & 0x1111111111111110) * (unsigned __int128)(a2 & 0x2222222222222222)) >> 64) ^ (((v3 & 0x2222222222222220) * (unsigned __int128)(a2 & 0x1111111111111111)) >> 64) ^ (((v3 & 0x4444444444444440) * (unsigned __int128)(a2 & 0x8888888888888888)) >> 64) ^ (((v3 & 0x8888888888888880) * (unsigned __int128)(a2 & 0x4444444444444444)) >> 64)) & 0x2222222222222222 | ((((v3 & 0x1111111111111110) * (unsigned __int128)(a2 & 0x4444444444444444)) >> 64) ^ (((v3 & 0x2222222222222220) * (unsigned __int128)(a2 & 0x2222222222222222)) >> 64) ^ (((v3 & 0x4444444444444440) * (unsigned __int128)(a2 & 0x1111111111111111)) >> 64) ^ (((v3 & 0x8888888888888880) * (unsigned __int128)(a2 & 0x8888888888888888)) >> 64)) & 0x4444444444444444 | ((((v3 & 0x1111111111111110) * (unsigned __int128)(a2 & 0x8888888888888888)) >> 64) ^ (((v3 & 0x2222222222222220) * (unsigned __int128)(a2 & 0x4444444444444444)) >> 64) ^ (((v3 & 0x4444444444444440) * (unsigned __int128)(a2 & 0x2222222222222222)) >> 64) ^ (((v3 & 0x8888888888888880) * (unsigned __int128)(a2 & 0x1111111111111111)) >> 64)) & 0x8888888888888888) ^ v27 ^ (v28 >> 61);
  v31 = v3 ^ *result;
  v32 = a3 ^ a2;
  v33 = (a3 ^ a2) & 0x1111111111111111;
  v34 = (((v31 & 0x1111111111111110) * (unsigned __int128)(unint64_t)v33) >> 64) ^ (((v31 & 0x2222222222222220)
                                                                                            * (unsigned __int128)(v32 & 0x8888888888888888)) >> 64) ^ (((v31 & 0x4444444444444440) * (unsigned __int128)(v32 & 0x4444444444444444)) >> 64) ^ (((v31 & 0x8888888888888880) * (unsigned __int128)(v32 & 0x2222222222222222)) >> 64);
  v35 = ((v31 & 0x1111111111111110) * v33) ^ ((v31 & 0x2222222222222220) * (v32 & 0x8888888888888888)) ^ ((v31 & 0x4444444444444440) * (v32 & 0x4444444444444444)) ^ ((v31 & 0x8888888888888880) * (v32 & 0x2222222222222222));
  v36 = (((v31 & 0x1111111111111110) * (unsigned __int128)(v32 & 0x2222222222222222)) >> 64) ^ (((v31 & 0x2222222222222220) * (unsigned __int128)(unint64_t)v33) >> 64) ^ (((v31 & 0x4444444444444440) * (unsigned __int128)(v32 & 0x8888888888888888)) >> 64) ^ (((v31 & 0x8888888888888880) * (unsigned __int128)(v32 & 0x4444444444444444)) >> 64);
  v37 = ((v31 & 0x1111111111111110) * (v32 & 0x2222222222222222)) ^ ((v31 & 0x2222222222222220) * v33) ^ ((v31 & 0x4444444444444440) * (v32 & 0x8888888888888888)) ^ ((v31 & 0x8888888888888880) * (v32 & 0x4444444444444444));
  v38 = (((v31 & 0x1111111111111110) * (unsigned __int128)(v32 & 0x4444444444444444)) >> 64) ^ (((v31 & 0x2222222222222220) * (unsigned __int128)(v32 & 0x2222222222222222)) >> 64) ^ (((v31 & 0x4444444444444440) * (unsigned __int128)(unint64_t)v33) >> 64) ^ (((v31 & 0x8888888888888880) * (unsigned __int128)(v32 & 0x8888888888888888)) >> 64);
  v39 = ((v31 & 0x1111111111111110) * (v32 & 0x4444444444444444)) ^ ((v31 & 0x2222222222222220)
                                                                       * (v32 & 0x2222222222222222)) ^ ((v31 & 0x4444444444444440) * v33) ^ ((v31 & 0x8888888888888880) * (v32 & 0x8888888888888888));
  v40 = (((v31 & 0x1111111111111110) * (unsigned __int128)(v32 & 0x8888888888888888)) >> 64) ^ (((v31 & 0x2222222222222220) * (unsigned __int128)(v32 & 0x4444444444444444)) >> 64) ^ (((v31 & 0x4444444444444440) * (unsigned __int128)(v32 & 0x2222222222222222)) >> 64) ^ (((v31 & 0x8888888888888880) * (unsigned __int128)(unint64_t)v33) >> 64);
  v41 = ((v31 & 0x1111111111111110) * (v32 & 0x8888888888888888)) ^ ((v31 & 0x2222222222222220)
                                                                       * (v32 & 0x4444444444444444)) ^ ((v31 & 0x4444444444444440) * (v32 & 0x2222222222222222)) ^ ((v31 & 0x8888888888888880) * v33);
  v42 = v32 & ((uint64_t)(v31 << 62) >> 63);
  v43 = v42 >> 63;
  v44 = ((uint64_t)(v31 << 63) >> 63) & v32 ^ (2 * v42);
  v45 = v32 & ((uint64_t)(v31 << 61) >> 63);
  v46 = v32 & ((uint64_t)(v31 << 60) >> 63);
  v47 = v43 ^ (v45 >> 62) ^ (v46 >> 61);
  v48 = (v35 & 0x1111111111111111 | v37 & 0x2222222222222222 | v39 & 0x4444444444444444 | v41 & 0x8888888888888888) ^ v44 ^ (4 * v45) ^ (8 * v46) ^ (v17 << 62) ^ (v16 << 63) ^ (v22 << 57) ^ v22 ^ v29 ^ v23;
  *result = v47 ^ (v22 >> 1) ^ (v22 >> 2) ^ (v22 >> 7) ^ (v34 & 0x1111111111111111 | v36 & 0x2222222222222222 | v38 & 0x4444444444444444 | v40 & 0x8888888888888888) ^ (v48 << 63) ^ (v48 << 62) ^ (v48 << 57) ^ v22 ^ v23 ^ v29 ^ v30;
  result[1] = (v48 >> 1) ^ (v48 >> 2) ^ (v48 >> 7) ^ v30 ^ v48;
  return result;
}

int8x16_t gcm_ghash_nohw(int8x16_t *a1, uint64_t *a2, int8x16_t *a3, unint64_t a4)
{
  int8x16_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t result;
  int8x16_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v5 = vrev64q_s8(*a1);
  v13 = vextq_s8(v5, v5, 8uLL);
  if (a4 >= 0x10)
  {
    v6 = a4;
    v8 = *a2;
    v9 = a2[1];
    do
    {
      v10 = *a3++;
      v11 = vrev64q_s8(v10);
      v13 = veorq_s8(v13, vextq_s8(v11, v11, 8uLL));
      gcm_polyval_nohw((unint64_t *)&v13, v8, v9);
      v6 -= 16;
    }
    while (v6 > 0xF);
    v5 = vextq_s8(v13, v13, 8uLL);
  }
  result = vrev64q_s8(v5);
  *a1 = result;
  return result;
}

unint64_t bn_mul_add_words(unint64_t *rp, const unint64_t *ap, int num, unint64_t w)
{
  uint64_t v4;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int128 v33;

  if (!*(_QWORD *)&num)
    return 0;
  if (*(_QWORD *)&num >= 4uLL)
  {
    v4 = 0;
    do
    {
      v6 = rp[1];
      v7 = __CFADD__(*rp, v4);
      v8 = *rp + v4;
      v9 = v7;
      v10 = __PAIR128__(v9, v8) + *ap * (unsigned __int128)w;
      *rp = v10;
      v11 = ap[1];
      v12 = (v11 * (unsigned __int128)w) >> 64;
      v13 = v11 * w;
      v7 = __CFADD__(v13, v6);
      v14 = v13 + v6;
      if (v7)
        ++v12;
      v7 = __CFADD__(v14, *((_QWORD *)&v10 + 1));
      v15 = v14 + *((_QWORD *)&v10 + 1);
      if (v7)
        v16 = v12 + 1;
      else
        v16 = v12;
      rp[1] = v15;
      v17 = ap[2];
      v18 = rp[2];
      v19 = rp[3];
      v7 = __CFADD__(v17 * w, v18);
      v20 = v17 * w + v18;
      v21 = (v17 * (unsigned __int128)w) >> 64;
      if (v7)
        ++v21;
      v7 = __CFADD__(v20, v16);
      v22 = v20 + v16;
      if (v7)
        ++v21;
      rp[2] = v22;
      v23 = ap[3];
      v24 = (v23 * (unsigned __int128)w) >> 64;
      v25 = v23 * w;
      v7 = __CFADD__(v25, v19);
      v26 = v25 + v19;
      if (v7)
        ++v24;
      v7 = __CFADD__(v26, v21);
      v27 = v26 + v21;
      if (v7)
        v4 = v24 + 1;
      else
        v4 = v24;
      rp[3] = v27;
      ap += 4;
      rp += 4;
      *(_QWORD *)&num -= 4;
    }
    while (*(_QWORD *)&num >= 4uLL);
    if (!*(_QWORD *)&num)
      return v4;
  }
  else
  {
    v4 = 0;
  }
  do
  {
    v28 = *ap++;
    v29 = (w * (unsigned __int128)v28) >> 64;
    v30 = w * v28;
    v7 = __CFADD__(*rp, v4);
    v31 = *rp + v4;
    v32 = v7;
    v33 = __PAIR128__(v32, v31) + __PAIR128__(v29, v30);
    v4 = (__PAIR128__(v32, v31) + __PAIR128__(v29, v30)) >> 64;
    *rp++ = v33;
    --*(_QWORD *)&num;
  }
  while (*(_QWORD *)&num);
  return v4;
}

unint64_t bn_mul_words(unint64_t *rp, const unint64_t *ap, int num, unint64_t w)
{
  unint64_t v4;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;

  if (!*(_QWORD *)&num)
    return 0;
  if (*(_QWORD *)&num >= 4uLL)
  {
    v4 = 0;
    do
    {
      v6 = *ap * w;
      v7 = __CFADD__(v6, v4);
      v8 = v6 + v4;
      if (v7)
        v9 = ((*ap * (unsigned __int128)w) >> 64) + 1;
      else
        v9 = (*ap * (unsigned __int128)w) >> 64;
      *rp = v8;
      v10 = ap[1];
      v11 = (v10 * (unsigned __int128)w) >> 64;
      v12 = v10 * w;
      v7 = __CFADD__(v12, v9);
      v13 = v12 + v9;
      if (v7)
        v14 = v11 + 1;
      else
        v14 = v11;
      rp[1] = v13;
      v15 = ap[2];
      v16 = (v15 * (unsigned __int128)w) >> 64;
      v17 = v15 * w;
      v7 = __CFADD__(v17, v14);
      v18 = v17 + v14;
      if (v7)
        v19 = v16 + 1;
      else
        v19 = v16;
      rp[2] = v18;
      v20 = ap[3];
      v21 = (v20 * (unsigned __int128)w) >> 64;
      v22 = v20 * w;
      v7 = __CFADD__(v22, v19);
      v23 = v22 + v19;
      if (v7)
        v4 = v21 + 1;
      else
        v4 = v21;
      rp[3] = v23;
      ap += 4;
      rp += 4;
      *(_QWORD *)&num -= 4;
    }
    while (*(_QWORD *)&num >= 4uLL);
    if (!*(_QWORD *)&num)
      return v4;
  }
  else
  {
    v4 = 0;
  }
  do
  {
    v24 = *ap++;
    v25 = (w * (unsigned __int128)v24) >> 64;
    v26 = w * v24 + v4;
    if (__CFADD__(w * v24, v4))
      v4 = v25 + 1;
    else
      v4 = v25;
    *rp++ = v26;
    --*(_QWORD *)&num;
  }
  while (*(_QWORD *)&num);
  return v4;
}

_QWORD *bn_mul_comba8(_QWORD *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int128 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BOOL8 v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unsigned __int128 v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unsigned __int128 v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned __int128 v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _BOOL8 v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unsigned __int128 v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BOOL8 v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unsigned __int128 v189;
  unint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  unsigned __int128 v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  _BOOL8 v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unsigned __int128 v229;
  unint64_t v230;
  unint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  _BOOL8 v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  unsigned __int128 v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _BOOL8 v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  uint64_t v268;
  uint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  unint64_t v275;
  uint64_t v276;
  unint64_t v277;
  unsigned __int128 v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  _BOOL8 v285;
  unint64_t v286;
  unint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unsigned __int128 v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v314;
  uint64_t v315;
  unint64_t v316;
  unsigned __int128 v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  _BOOL8 v326;
  unint64_t v327;
  unint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unsigned __int128 v331;
  unint64_t v332;
  uint64_t v333;
  uint64_t v334;
  _BOOL8 v335;
  unint64_t v336;
  unint64_t v337;
  uint64_t v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  unint64_t v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  uint64_t v354;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  unint64_t v360;
  unint64_t v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  unsigned __int128 v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  unint64_t v384;
  uint64_t v385;
  unint64_t v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unsigned __int128 v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  _BOOL8 v394;
  unint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  unint64_t v403;
  uint64_t v404;
  unint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unint64_t v425;
  unint64_t v426;
  uint64_t v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;

  v4 = *a3;
  v5 = *a2;
  v3 = ((unsigned __int128)*a3 * v5) >> 64;
  *result = *a3 * *a2;
  v6 = a2[1];
  v8 = *a3;
  v7 = a3[1];
  v9 = (__PAIR128__(v7, v4) * v5) >> 64;
  if (__CFADD__(v7 * *a2, v3))
    v10 = ((v7 * (unsigned __int128)*a2) >> 64) + 1;
  else
    v10 = (v7 * (unsigned __int128)*a2) >> 64;
  v11 = (v8 * (unsigned __int128)v6) >> 64;
  v12 = v8 * v6;
  v13 = __CFADD__(v12, v9);
  v14 = v12 + v9;
  if (v13)
    v15 = v11 + 1;
  else
    v15 = v11;
  result[1] = v14;
  v16 = a2[2];
  v17 = a3[1];
  v18 = (*a3 * (unsigned __int128)v16) >> 64;
  v19 = *a3 * v16;
  v13 = __CFADD__(v19, v15 + v10);
  v20 = v19 + v15 + v10;
  if (v13)
    v21 = v18 + 1;
  else
    v21 = v18;
  v13 = __CFADD__(__CFADD__(v15, v10), v21);
  v22 = __CFADD__(v15, v10) + v21;
  v23 = v13;
  v25 = *a2;
  v24 = a2[1];
  v26 = (v17 * (unsigned __int128)v24) >> 64;
  v27 = v17 * v24;
  v13 = __CFADD__(v20, v27);
  v28 = v20 + v27;
  if (v13)
    v29 = v26 + 1;
  else
    v29 = v26;
  v13 = __CFADD__(v22, v29);
  v30 = v22 + v29;
  v31 = v13;
  v32 = a3[2];
  v33 = (v32 * (unsigned __int128)v25) >> 64;
  v34 = v32 * v25;
  v13 = __CFADD__(v28, v34);
  v35 = v28 + v34;
  if (v13)
    v36 = v33 + 1;
  else
    v36 = v33;
  v13 = __CFADD__(v30, v36);
  v37 = v30 + v36;
  v38 = v23 + v13 + v31;
  result[2] = v35;
  v39 = a2[1];
  v41 = a3[2];
  v40 = a3[3];
  v42 = v40 * *a2;
  v13 = __CFADD__(v42, v37);
  v43 = v42 + v37;
  if (v13)
    v44 = ((v40 * (unsigned __int128)*a2) >> 64) + 1;
  else
    v44 = (v40 * (unsigned __int128)*a2) >> 64;
  v45 = v38 + v44;
  v46 = (v41 * (unsigned __int128)v39) >> 64;
  v47 = v41 * v39;
  v13 = __CFADD__(v43, v47);
  v48 = v43 + v47;
  if (v13)
    v49 = v46 + 1;
  else
    v49 = v46;
  v13 = __CFADD__(v45, v49);
  v50 = v45 + v49;
  v51 = v13;
  if (__CFADD__(v38, v44))
    v52 = v51 + 1;
  else
    v52 = v51;
  v53 = a2[2];
  v54 = a2[3];
  v56 = *a3;
  v55 = a3[1];
  v57 = (v55 * (unsigned __int128)v53) >> 64;
  v58 = v55 * v53;
  v13 = __CFADD__(v48, v58);
  v59 = v48 + v58;
  if (v13)
    v60 = v57 + 1;
  else
    v60 = v57;
  v13 = __CFADD__(v50, v60);
  v61 = v50 + v60;
  v62 = v13;
  v63 = (v56 * (unsigned __int128)v54) >> 64;
  v64 = v56 * v54;
  v13 = __CFADD__(v59, v64);
  v65 = v59 + v64;
  if (v13)
    v66 = v63 + 1;
  else
    v66 = v63;
  v67 = __PAIR128__(v52, v61) + __PAIR128__(v62, v66);
  result[3] = v65;
  v68 = a3[1];
  v69 = *a3 * a2[4] + v67;
  v70 = *((_QWORD *)&v67 + 1) + v67;
  v71 = __CFADD__(*((_QWORD *)&v67 + 1), (_QWORD)v67);
  v73 = a2[2];
  v72 = a2[3];
  v74 = (v68 * (unsigned __int128)v72) >> 64;
  v75 = v68 * v72;
  v13 = __CFADD__(v69, v75);
  v76 = v69 + v75;
  if (v13)
    v77 = v74 + 1;
  else
    v77 = v74;
  v13 = __CFADD__(v70, v77);
  v78 = v70 + v77;
  v79 = v13;
  v80 = a3[2];
  v81 = a3[3];
  v82 = (v80 * (unsigned __int128)v73) >> 64;
  v83 = v80 * v73;
  v13 = __CFADD__(v76, v83);
  v84 = v76 + v83;
  if (v13)
    v85 = v82 + 1;
  else
    v85 = v82;
  v13 = __CFADD__(v78, v85);
  v86 = v78 + v85;
  v87 = v71 + v13 + v79;
  v89 = *a2;
  v88 = a2[1];
  v90 = (v81 * (unsigned __int128)v88) >> 64;
  v91 = v81 * v88;
  v13 = __CFADD__(v84, v91);
  v92 = v84 + v91;
  if (v13)
    v93 = v90 + 1;
  else
    v93 = v90;
  v13 = __CFADD__(v86, v93);
  v94 = v86 + v93;
  v95 = v13;
  v96 = a3[4];
  v97 = (v96 * (unsigned __int128)v89) >> 64;
  v98 = v96 * v89;
  v13 = __CFADD__(v92, v98);
  v99 = v92 + v98;
  if (v13)
    v100 = v97 + 1;
  else
    v100 = v97;
  v101 = __PAIR128__(v87, v94) + __PAIR128__(v95, v100);
  result[4] = v99;
  v102 = a2[1];
  v103 = a3[4];
  v104 = a3[5] * *a2 + v101;
  v105 = *((_QWORD *)&v101 + 1) + v101;
  v106 = (v103 * (unsigned __int128)v102) >> 64;
  v107 = v103 * v102;
  v13 = __CFADD__(v104, v107);
  v108 = v104 + v107;
  if (v13)
    v109 = v106 + 1;
  else
    v109 = v106;
  v13 = __CFADD__(v105, v109);
  v110 = v105 + v109;
  v111 = v13;
  if (__CFADD__(*((_QWORD *)&v101 + 1), (_QWORD)v101))
    v112 = v111 + 1;
  else
    v112 = v111;
  v113 = a2[2];
  v114 = a2[3];
  v116 = a3[2];
  v115 = a3[3];
  v117 = (v115 * (unsigned __int128)v113) >> 64;
  v118 = v115 * v113;
  v13 = __CFADD__(v108, v118);
  v119 = v108 + v118;
  if (v13)
    v120 = v117 + 1;
  else
    v120 = v117;
  v13 = __CFADD__(v110, v120);
  v121 = v110 + v120;
  v122 = v13;
  v123 = (v116 * (unsigned __int128)v114) >> 64;
  v124 = v116 * v114;
  v13 = __CFADD__(v119, v124);
  v125 = v119 + v124;
  if (v13)
    v126 = v123 + 1;
  else
    v126 = v123;
  v127 = __PAIR128__(v112, v121) + __PAIR128__(v122, v126);
  v128 = a2[4];
  v129 = a2[5];
  v131 = *a3;
  v130 = a3[1];
  v132 = (v130 * (unsigned __int128)v128) >> 64;
  v133 = v130 * v128;
  v13 = __CFADD__(v125, v133);
  v134 = v125 + v133;
  if (v13)
    v135 = v132 + 1;
  else
    v135 = v132;
  v136 = __CFADD__((_QWORD)v127, v135);
  v137 = (v131 * (unsigned __int128)v129) >> 64;
  v138 = v131 * v129;
  v13 = __CFADD__(v134, v138);
  v139 = v134 + v138;
  if (v13)
    v140 = v137 + 1;
  else
    v140 = v137;
  v141 = v127 + __PAIR128__(v136, v140);
  result[5] = v139;
  v142 = a3[1];
  v143 = *a3 * a2[6] + v141;
  v144 = *((_QWORD *)&v141 + 1) + v141;
  v145 = __CFADD__(*((_QWORD *)&v141 + 1), (_QWORD)v141);
  v147 = a2[4];
  v146 = a2[5];
  v148 = (v142 * (unsigned __int128)v146) >> 64;
  v149 = v142 * v146;
  v13 = __CFADD__(v143, v149);
  v150 = v143 + v149;
  if (v13)
    v151 = v148 + 1;
  else
    v151 = v148;
  v13 = __CFADD__(v144, v151);
  v152 = v144 + v151;
  v153 = v13;
  v154 = a3[2];
  v155 = a3[3];
  v156 = (v154 * (unsigned __int128)v147) >> 64;
  v157 = v154 * v147;
  v13 = __CFADD__(v150, v157);
  v158 = v150 + v157;
  if (v13)
    v159 = v156 + 1;
  else
    v159 = v156;
  v13 = __CFADD__(v152, v159);
  v160 = v152 + v159;
  v161 = v145 + v13 + v153;
  v163 = a2[2];
  v162 = a2[3];
  v164 = (v155 * (unsigned __int128)v162) >> 64;
  v165 = v155 * v162;
  v13 = __CFADD__(v158, v165);
  v166 = v158 + v165;
  if (v13)
    v167 = v164 + 1;
  else
    v167 = v164;
  v13 = __CFADD__(v160, v167);
  v168 = v160 + v167;
  v169 = v13;
  v170 = a3[4];
  v171 = a3[5];
  v172 = (v170 * (unsigned __int128)v163) >> 64;
  v173 = v170 * v163;
  v13 = __CFADD__(v166, v173);
  v174 = v166 + v173;
  if (v13)
    v175 = v172 + 1;
  else
    v175 = v172;
  v176 = __PAIR128__(v161, v168) + __PAIR128__(v169, v175);
  v178 = *a2;
  v177 = a2[1];
  v179 = (v171 * (unsigned __int128)v177) >> 64;
  v180 = v171 * v177;
  v13 = __CFADD__(v174, v180);
  v181 = v174 + v180;
  if (v13)
    v182 = v179 + 1;
  else
    v182 = v179;
  v183 = __CFADD__((_QWORD)v176, v182);
  v184 = a3[6];
  v185 = (v184 * (unsigned __int128)v178) >> 64;
  v186 = v184 * v178;
  v13 = __CFADD__(v181, v186);
  v187 = v181 + v186;
  if (v13)
    v188 = v185 + 1;
  else
    v188 = v185;
  v189 = v176 + __PAIR128__(v183, v188);
  result[6] = v187;
  v190 = a2[1];
  v191 = a3[6];
  v192 = a3[7] * *a2 + v189;
  v193 = *((_QWORD *)&v189 + 1) + v189;
  v194 = (v191 * (unsigned __int128)v190) >> 64;
  v195 = v191 * v190;
  v13 = __CFADD__(v192, v195);
  v196 = v192 + v195;
  if (v13)
    v197 = v194 + 1;
  else
    v197 = v194;
  v13 = __CFADD__(v193, v197);
  v198 = v193 + v197;
  v199 = v13;
  if (__CFADD__(*((_QWORD *)&v189 + 1), (_QWORD)v189))
    v200 = v199 + 1;
  else
    v200 = v199;
  v201 = a2[2];
  v202 = a2[3];
  v204 = a3[4];
  v203 = a3[5];
  v205 = (v203 * (unsigned __int128)v201) >> 64;
  v206 = v203 * v201;
  v13 = __CFADD__(v196, v206);
  v207 = v196 + v206;
  if (v13)
    v208 = v205 + 1;
  else
    v208 = v205;
  v13 = __CFADD__(v198, v208);
  v209 = v198 + v208;
  v210 = v13;
  v211 = (v204 * (unsigned __int128)v202) >> 64;
  v212 = v204 * v202;
  v13 = __CFADD__(v207, v212);
  v213 = v207 + v212;
  if (v13)
    v214 = v211 + 1;
  else
    v214 = v211;
  v215 = __PAIR128__(v200, v209) + __PAIR128__(v210, v214);
  v216 = a2[4];
  v217 = a2[5];
  v219 = a3[2];
  v218 = a3[3];
  v220 = (v218 * (unsigned __int128)v216) >> 64;
  v221 = v218 * v216;
  v13 = __CFADD__(v213, v221);
  v222 = v213 + v221;
  if (v13)
    v223 = v220 + 1;
  else
    v223 = v220;
  v224 = __CFADD__((_QWORD)v215, v223);
  v225 = (v219 * (unsigned __int128)v217) >> 64;
  v226 = v219 * v217;
  v13 = __CFADD__(v222, v226);
  v227 = v222 + v226;
  if (v13)
    v228 = v225 + 1;
  else
    v228 = v225;
  v229 = v215 + __PAIR128__(v224, v228);
  v230 = a2[6];
  v231 = a2[7];
  v233 = *a3;
  v232 = a3[1];
  v234 = (v232 * (unsigned __int128)v230) >> 64;
  v235 = v232 * v230;
  v13 = __CFADD__(v227, v235);
  v236 = v227 + v235;
  if (v13)
    v237 = v234 + 1;
  else
    v237 = v234;
  v238 = __CFADD__((_QWORD)v229, v237);
  v239 = (v233 * (unsigned __int128)v231) >> 64;
  v240 = v233 * v231;
  v13 = __CFADD__(v236, v240);
  v241 = v236 + v240;
  if (v13)
    v242 = v239 + 1;
  else
    v242 = v239;
  v243 = v229 + __PAIR128__(v238, v242);
  result[7] = v241;
  v244 = a3[2];
  v245 = a3[1] * a2[7] + v243;
  v246 = *((_QWORD *)&v243 + 1) + v243;
  v247 = __CFADD__(*((_QWORD *)&v243 + 1), (_QWORD)v243);
  v249 = a2[5];
  v248 = a2[6];
  v250 = (v244 * (unsigned __int128)v248) >> 64;
  v251 = v244 * v248;
  v13 = __CFADD__(v245, v251);
  v252 = v245 + v251;
  if (v13)
    v253 = v250 + 1;
  else
    v253 = v250;
  v13 = __CFADD__(v246, v253);
  v254 = v246 + v253;
  v255 = v13;
  v256 = a3[3];
  v257 = a3[4];
  v258 = (v256 * (unsigned __int128)v249) >> 64;
  v259 = v256 * v249;
  v13 = __CFADD__(v252, v259);
  v260 = v252 + v259;
  if (v13)
    v261 = v258 + 1;
  else
    v261 = v258;
  v13 = __CFADD__(v254, v261);
  v262 = v254 + v261;
  v263 = v247 + v13 + v255;
  v265 = a2[3];
  v264 = a2[4];
  v266 = (v257 * (unsigned __int128)v264) >> 64;
  v267 = v257 * v264;
  v13 = __CFADD__(v260, v267);
  v268 = v260 + v267;
  if (v13)
    v269 = v266 + 1;
  else
    v269 = v266;
  v13 = __CFADD__(v262, v269);
  v270 = v262 + v269;
  v271 = v13;
  v272 = a3[5];
  v273 = a3[6];
  v274 = (v272 * (unsigned __int128)v265) >> 64;
  v275 = v272 * v265;
  v13 = __CFADD__(v268, v275);
  v276 = v268 + v275;
  if (v13)
    v277 = v274 + 1;
  else
    v277 = v274;
  v278 = __PAIR128__(v263, v270) + __PAIR128__(v271, v277);
  v280 = a2[1];
  v279 = a2[2];
  v281 = (v273 * (unsigned __int128)v279) >> 64;
  v282 = v273 * v279;
  v13 = __CFADD__(v276, v282);
  v283 = v276 + v282;
  if (v13)
    v284 = v281 + 1;
  else
    v284 = v281;
  v285 = __CFADD__((_QWORD)v278, v284);
  v286 = a3[7];
  v287 = (v286 * (unsigned __int128)v280) >> 64;
  v288 = v286 * v280;
  v13 = __CFADD__(v283, v288);
  v289 = v283 + v288;
  if (v13)
    v290 = v287 + 1;
  else
    v290 = v287;
  v291 = v278 + __PAIR128__(v285, v290);
  result[8] = v289;
  v292 = a2[3];
  v293 = a3[6];
  v294 = a3[7] * a2[2] + v291;
  v295 = *((_QWORD *)&v291 + 1) + v291;
  v296 = (v293 * (unsigned __int128)v292) >> 64;
  v297 = v293 * v292;
  v13 = __CFADD__(v294, v297);
  v298 = v294 + v297;
  if (v13)
    v299 = v296 + 1;
  else
    v299 = v296;
  v13 = __CFADD__(v295, v299);
  v300 = v295 + v299;
  v301 = v13;
  if (__CFADD__(*((_QWORD *)&v291 + 1), (_QWORD)v291))
    v302 = v301 + 1;
  else
    v302 = v301;
  v303 = a2[4];
  v304 = a2[5];
  v306 = a3[4];
  v305 = a3[5];
  v307 = (v305 * (unsigned __int128)v303) >> 64;
  v308 = v305 * v303;
  v13 = __CFADD__(v298, v308);
  v309 = v298 + v308;
  if (v13)
    v310 = v307 + 1;
  else
    v310 = v307;
  v13 = __CFADD__(v300, v310);
  v311 = v300 + v310;
  v312 = v13;
  v313 = (v306 * (unsigned __int128)v304) >> 64;
  v314 = v306 * v304;
  v13 = __CFADD__(v309, v314);
  v315 = v309 + v314;
  if (v13)
    v316 = v313 + 1;
  else
    v316 = v313;
  v317 = __PAIR128__(v302, v311) + __PAIR128__(v312, v316);
  v318 = a2[6];
  v319 = a2[7];
  v321 = a3[2];
  v320 = a3[3];
  v322 = (v320 * (unsigned __int128)v318) >> 64;
  v323 = v320 * v318;
  v13 = __CFADD__(v315, v323);
  v324 = v315 + v323;
  if (v13)
    v325 = v322 + 1;
  else
    v325 = v322;
  v326 = __CFADD__((_QWORD)v317, v325);
  v327 = (v321 * (unsigned __int128)v319) >> 64;
  v328 = v321 * v319;
  v13 = __CFADD__(v324, v328);
  v329 = v324 + v328;
  if (v13)
    v330 = v327 + 1;
  else
    v330 = v327;
  v331 = v317 + __PAIR128__(v326, v330);
  result[9] = v329;
  v332 = a3[4];
  v333 = a3[3] * a2[7] + v331;
  v334 = *((_QWORD *)&v331 + 1) + v331;
  v335 = __CFADD__(*((_QWORD *)&v331 + 1), (_QWORD)v331);
  v337 = a2[5];
  v336 = a2[6];
  v338 = (v332 * (unsigned __int128)v336) >> 64;
  v339 = v332 * v336;
  v13 = __CFADD__(v333, v339);
  v340 = v333 + v339;
  if (v13)
    v341 = v338 + 1;
  else
    v341 = v338;
  v13 = __CFADD__(v334, v341);
  v342 = v334 + v341;
  v343 = v13;
  v344 = a3[5];
  v345 = a3[6];
  v346 = (v344 * (unsigned __int128)v337) >> 64;
  v347 = v344 * v337;
  v13 = __CFADD__(v340, v347);
  v348 = v340 + v347;
  if (v13)
    v349 = v346 + 1;
  else
    v349 = v346;
  v13 = __CFADD__(v342, v349);
  v350 = v342 + v349;
  v351 = v335 + v13 + v343;
  v353 = a2[3];
  v352 = a2[4];
  v354 = (v345 * (unsigned __int128)v352) >> 64;
  v355 = v345 * v352;
  v13 = __CFADD__(v348, v355);
  v356 = v348 + v355;
  if (v13)
    v357 = v354 + 1;
  else
    v357 = v354;
  v13 = __CFADD__(v350, v357);
  v358 = v350 + v357;
  v359 = v13;
  v360 = a3[7];
  v361 = (v360 * (unsigned __int128)v353) >> 64;
  v362 = v360 * v353;
  v13 = __CFADD__(v356, v362);
  v363 = v356 + v362;
  if (v13)
    v364 = v361 + 1;
  else
    v364 = v361;
  v365 = __PAIR128__(v351, v358) + __PAIR128__(v359, v364);
  result[10] = v363;
  v366 = a2[5];
  v367 = a3[6];
  v368 = a3[7] * a2[4] + v365;
  v369 = *((_QWORD *)&v365 + 1) + v365;
  v370 = (v367 * (unsigned __int128)v366) >> 64;
  v371 = v367 * v366;
  v13 = __CFADD__(v368, v371);
  v372 = v368 + v371;
  if (v13)
    v373 = v370 + 1;
  else
    v373 = v370;
  v13 = __CFADD__(v369, v373);
  v374 = v369 + v373;
  v375 = v13;
  v376 = a2[6];
  v377 = a2[7];
  v379 = a3[4];
  v378 = a3[5];
  v380 = (v378 * (unsigned __int128)v376) >> 64;
  v381 = v378 * v376;
  if (__CFADD__(*((_QWORD *)&v365 + 1), (_QWORD)v365))
    ++v375;
  v13 = __CFADD__(v372, v381);
  v382 = v372 + v381;
  if (v13)
    v383 = v380 + 1;
  else
    v383 = v380;
  v13 = __CFADD__(v374, v383);
  v384 = v374 + v383;
  v385 = v13;
  v386 = (v379 * (unsigned __int128)v377) >> 64;
  v387 = v379 * v377;
  v13 = __CFADD__(v382, v387);
  v388 = v382 + v387;
  if (v13)
    v389 = v386 + 1;
  else
    v389 = v386;
  v390 = __PAIR128__(v375, v384) + __PAIR128__(v385, v389);
  result[11] = v388;
  v391 = a3[6];
  v392 = a3[5] * a2[7] + v390;
  v393 = *((_QWORD *)&v390 + 1) + v390;
  v394 = __CFADD__(*((_QWORD *)&v390 + 1), (_QWORD)v390);
  v396 = a2[5];
  v395 = a2[6];
  v397 = (v391 * (unsigned __int128)v395) >> 64;
  v398 = v391 * v395;
  v13 = __CFADD__(v392, v398);
  v399 = v392 + v398;
  if (v13)
    v400 = v397 + 1;
  else
    v400 = v397;
  v13 = __CFADD__(v393, v400);
  v401 = v393 + v400;
  v402 = v13;
  v403 = a3[7];
  v404 = (v403 * (unsigned __int128)v396) >> 64;
  v405 = v403 * v396;
  v13 = __CFADD__(v399, v405);
  v406 = v399 + v405;
  if (v13)
    v407 = v404 + 1;
  else
    v407 = v404;
  v13 = __CFADD__(v401, v407);
  v408 = v401 + v407;
  v409 = v394 + v13 + v402;
  result[12] = v406;
  v410 = a2[6];
  v411 = a2[7];
  v413 = a3[6];
  v412 = a3[7];
  v414 = (v412 * (unsigned __int128)v410) >> 64;
  v415 = v412 * v410;
  v13 = __CFADD__(v415, v408);
  v416 = v415 + v408;
  if (v13)
    v417 = v414 + 1;
  else
    v417 = v414;
  v418 = v409 + v417;
  v419 = (v413 * (unsigned __int128)v411) >> 64;
  v420 = v413 * v411;
  v13 = __CFADD__(v416, v420);
  v421 = v416 + v420;
  if (v13)
    v422 = v419 + 1;
  else
    v422 = v419;
  v13 = __CFADD__(v418, v422);
  v423 = v418 + v422;
  v424 = v13;
  result[13] = v421;
  v425 = a2[7];
  v426 = a3[7];
  v427 = (v426 * (unsigned __int128)v425) >> 64;
  v428 = v426 * v425;
  v13 = __CFADD__(v428, v423);
  v429 = v428 + v423;
  if (v13)
    v430 = v427 + 1;
  else
    v430 = v427;
  result[14] = v429;
  result[15] = v424 + __CFADD__(v409, v417) + v430;
  return result;
}

_QWORD *bn_sqr_comba8(_QWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unsigned __int128 v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned __int128 v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _BOOL8 v106;
  uint64_t v107;
  unint64_t v108;
  unsigned __int128 v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL8 v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unsigned __int128 v136;
  unint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  _BOOL8 v142;
  uint64_t v143;
  unint64_t v144;
  unsigned __int128 v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unsigned __int128 v167;
  unint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  _BOOL8 v176;
  uint64_t v177;
  unint64_t v178;
  unsigned __int128 v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  unint64_t v183;
  _BOOL8 v184;
  uint64_t v185;
  unsigned __int128 v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _BOOL8 v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unint64_t v212;
  unsigned __int128 v213;
  unint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  unint64_t v218;
  _BOOL8 v219;
  uint64_t v220;
  unint64_t v221;
  unsigned __int128 v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unsigned __int128 v245;
  unint64_t v246;
  unint64_t v247;
  unint64_t v248;
  unint64_t v249;
  uint64_t v250;
  unint64_t v251;
  _BOOL8 v252;
  uint64_t v253;
  unint64_t v254;
  unsigned __int128 v255;
  unint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _BOOL8 v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unsigned __int128 v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  unsigned __int128 v304;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  _BOOL8 v308;
  unint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t v322;
  unint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  unint64_t v331;
  uint64_t v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;

  v2 = (*a2 * (unsigned __int128)*a2) >> 64;
  *result = *a2 * *a2;
  v3 = a2[1];
  v4 = (*a2 * (unsigned __int128)v3) >> 64;
  v5 = *a2 * v3;
  v6 = __CFADD__(v5, v2);
  v7 = v5 + v2;
  if (v6)
    v8 = v4 + 1;
  else
    v8 = v4;
  v6 = __CFADD__(v7, v5);
  v9 = v7 + v5;
  if (v6)
    v10 = v4 + 1;
  else
    v10 = v4;
  result[1] = v9;
  v12 = *a2;
  v11 = a2[1];
  v13 = (v11 * (unsigned __int128)v11) >> 64;
  v14 = v11 * v11;
  v6 = __CFADD__(v14, v10 + v8);
  v15 = v14 + v10 + v8;
  if (v6)
    v16 = v13 + 1;
  else
    v16 = v13;
  v6 = __CFADD__(__CFADD__(v10, v8), v16);
  v17 = __CFADD__(v10, v8) + v16;
  v18 = v6;
  v19 = a2[2];
  v20 = (v12 * (unsigned __int128)v19) >> 64;
  v21 = v12 * v19;
  v6 = __CFADD__(v15, v21);
  v22 = v15 + v21;
  if (v6)
    v23 = v20 + 1;
  else
    v23 = v20;
  v6 = __CFADD__(v17, v23);
  v24 = v17 + v23;
  v25 = v6;
  v6 = __CFADD__(v22, v21);
  v26 = v22 + v21;
  if (v6)
    v27 = v20 + 1;
  else
    v27 = v20;
  v6 = __CFADD__(v24, v27);
  v28 = v24 + v27;
  v29 = v18 + v6 + v25;
  result[2] = v26;
  v31 = a2[2];
  v30 = a2[3];
  v32 = a2[1];
  v33 = (*a2 * (unsigned __int128)v30) >> 64;
  v34 = *a2 * v30;
  v6 = __CFADD__(v34, v28);
  v35 = v34 + v28;
  if (v6)
    v36 = v33 + 1;
  else
    v36 = v33;
  v37 = v29 + v36;
  v6 = __CFADD__(v35, v34);
  v38 = v35 + v34;
  if (v6)
    v39 = v33 + 1;
  else
    v39 = v33;
  v6 = __CFADD__(v37, v39);
  v40 = v37 + v39;
  v41 = v6;
  if (__CFADD__(v29, v36))
    v42 = v41 + 1;
  else
    v42 = v41;
  v43 = (v32 * (unsigned __int128)v31) >> 64;
  v44 = v32 * v31;
  v6 = __CFADD__(v38, v44);
  v45 = v38 + v44;
  if (v6)
    v46 = v43 + 1;
  else
    v46 = v43;
  v6 = __CFADD__(v40, v46);
  v47 = v40 + v46;
  v48 = v6;
  v6 = __CFADD__(v45, v44);
  v49 = v45 + v44;
  if (v6)
    v50 = v43 + 1;
  else
    v50 = v43;
  v51 = __PAIR128__(v42, v47) + __PAIR128__(v48, v50);
  result[3] = v49;
  v52 = a2[3];
  v53 = a2[2] * a2[2] + v51;
  v54 = *((_QWORD *)&v51 + 1) + v51;
  v55 = __CFADD__(*((_QWORD *)&v51 + 1), (_QWORD)v51);
  v57 = *a2;
  v56 = a2[1];
  v58 = (v56 * (unsigned __int128)v52) >> 64;
  v59 = v56 * v52;
  v6 = __CFADD__(v53, v59);
  v60 = v53 + v59;
  if (v6)
    v61 = v58 + 1;
  else
    v61 = v58;
  v6 = __CFADD__(v54, v61);
  v62 = v54 + v61;
  v63 = v6;
  v6 = __CFADD__(v60, v59);
  v64 = v60 + v59;
  if (v6)
    v65 = v58 + 1;
  else
    v65 = v58;
  v6 = __CFADD__(v62, v65);
  v66 = v62 + v65;
  v67 = v55 + v6 + v63;
  v68 = a2[4];
  v69 = (v57 * (unsigned __int128)v68) >> 64;
  v70 = v57 * v68;
  v6 = __CFADD__(v64, v70);
  v71 = v64 + v70;
  if (v6)
    v72 = v69 + 1;
  else
    v72 = v69;
  v6 = __CFADD__(v66, v72);
  v73 = v66 + v72;
  v74 = v6;
  v6 = __CFADD__(v71, v70);
  v75 = v71 + v70;
  if (v6)
    v76 = v69 + 1;
  else
    v76 = v69;
  v77 = __PAIR128__(v67, v73) + __PAIR128__(v74, v76);
  result[4] = v75;
  v79 = a2[4];
  v78 = a2[5];
  v80 = a2[1];
  v81 = (*a2 * (unsigned __int128)v78) >> 64;
  v82 = *a2 * v78;
  v83 = v82 + v77;
  if (__CFADD__(v82, (_QWORD)v77))
    v84 = v81 + 1;
  else
    v84 = v81;
  v85 = *((_QWORD *)&v77 + 1) + v84;
  v6 = __CFADD__(v83, v82);
  v86 = v83 + v82;
  if (v6)
    v87 = v81 + 1;
  else
    v87 = v81;
  v6 = __CFADD__(v85, v87);
  v88 = v85 + v87;
  v89 = v6;
  if (__CFADD__(*((_QWORD *)&v77 + 1), v84))
    v90 = v89 + 1;
  else
    v90 = v89;
  v91 = (v80 * (unsigned __int128)v79) >> 64;
  v92 = v80 * v79;
  v6 = __CFADD__(v86, v92);
  v93 = v86 + v92;
  if (v6)
    v94 = v91 + 1;
  else
    v94 = v91;
  v6 = __CFADD__(v88, v94);
  v95 = v88 + v94;
  v96 = v6;
  v6 = __CFADD__(v93, v92);
  v97 = v93 + v92;
  if (v6)
    v98 = v91 + 1;
  else
    v98 = v91;
  v99 = __PAIR128__(v90, v95) + __PAIR128__(v96, v98);
  v101 = a2[2];
  v100 = a2[3];
  v102 = (v101 * (unsigned __int128)v100) >> 64;
  v103 = v101 * v100;
  v6 = __CFADD__(v97, v103);
  v104 = v97 + v103;
  if (v6)
    v105 = v102 + 1;
  else
    v105 = v102;
  v106 = __CFADD__((_QWORD)v99, v105);
  v6 = __CFADD__(v104, v103);
  v107 = v104 + v103;
  if (v6)
    v108 = v102 + 1;
  else
    v108 = v102;
  v109 = v99 + __PAIR128__(v106, v108);
  result[5] = v107;
  v110 = a2[2];
  v111 = a2[3] * a2[3] + v109;
  v112 = *((_QWORD *)&v109 + 1) + v109;
  v113 = __CFADD__(*((_QWORD *)&v109 + 1), (_QWORD)v109);
  v114 = a2[4];
  v115 = a2[5];
  v116 = (v110 * (unsigned __int128)v114) >> 64;
  v117 = v110 * v114;
  v6 = __CFADD__(v111, v117);
  v118 = v111 + v117;
  if (v6)
    v119 = v116 + 1;
  else
    v119 = v116;
  v6 = __CFADD__(v112, v119);
  v120 = v112 + v119;
  v121 = v6;
  v6 = __CFADD__(v118, v117);
  v122 = v118 + v117;
  if (v6)
    v123 = v116 + 1;
  else
    v123 = v116;
  v6 = __CFADD__(v120, v123);
  v124 = v120 + v123;
  v125 = v113 + v6 + v121;
  v127 = *a2;
  v126 = a2[1];
  v128 = (v126 * (unsigned __int128)v115) >> 64;
  v129 = v126 * v115;
  v6 = __CFADD__(v122, v129);
  v130 = v122 + v129;
  if (v6)
    v131 = v128 + 1;
  else
    v131 = v128;
  v6 = __CFADD__(v124, v131);
  v132 = v124 + v131;
  v133 = v6;
  v6 = __CFADD__(v130, v129);
  v134 = v130 + v129;
  if (v6)
    v135 = v128 + 1;
  else
    v135 = v128;
  v136 = __PAIR128__(v125, v132) + __PAIR128__(v133, v135);
  v137 = a2[6];
  v138 = (v127 * (unsigned __int128)v137) >> 64;
  v139 = v127 * v137;
  v6 = __CFADD__(v134, v139);
  v140 = v134 + v139;
  if (v6)
    v141 = v138 + 1;
  else
    v141 = v138;
  v142 = __CFADD__((_QWORD)v136, v141);
  v6 = __CFADD__(v140, v139);
  v143 = v140 + v139;
  if (v6)
    v144 = v138 + 1;
  else
    v144 = v138;
  v145 = v136 + __PAIR128__(v142, v144);
  result[6] = v143;
  v147 = a2[6];
  v146 = a2[7];
  v148 = a2[1];
  v149 = (*a2 * (unsigned __int128)v146) >> 64;
  v150 = *a2 * v146;
  v151 = v150 + v145;
  if (__CFADD__(v150, (_QWORD)v145))
    v152 = v149 + 1;
  else
    v152 = v149;
  v153 = *((_QWORD *)&v145 + 1) + v152;
  v6 = __CFADD__(v151, v150);
  v154 = v151 + v150;
  if (v6)
    v155 = v149 + 1;
  else
    v155 = v149;
  v6 = __CFADD__(v153, v155);
  v156 = v153 + v155;
  v157 = v6;
  if (__CFADD__(*((_QWORD *)&v145 + 1), v152))
    v158 = v157 + 1;
  else
    v158 = v157;
  v159 = (v148 * (unsigned __int128)v147) >> 64;
  v160 = v148 * v147;
  v6 = __CFADD__(v154, v160);
  v161 = v154 + v160;
  if (v6)
    v162 = v159 + 1;
  else
    v162 = v159;
  v6 = __CFADD__(v156, v162);
  v163 = v156 + v162;
  v164 = v6;
  v6 = __CFADD__(v161, v160);
  v165 = v161 + v160;
  if (v6)
    v166 = v159 + 1;
  else
    v166 = v159;
  v167 = __PAIR128__(v158, v163) + __PAIR128__(v164, v166);
  v169 = a2[4];
  v168 = a2[5];
  v170 = a2[2];
  v171 = a2[3];
  v172 = (v170 * (unsigned __int128)v168) >> 64;
  v173 = v170 * v168;
  v6 = __CFADD__(v165, v173);
  v174 = v165 + v173;
  if (v6)
    v175 = v172 + 1;
  else
    v175 = v172;
  v176 = __CFADD__((_QWORD)v167, v175);
  v6 = __CFADD__(v174, v173);
  v177 = v174 + v173;
  if (v6)
    v178 = v172 + 1;
  else
    v178 = v172;
  v179 = v167 + __PAIR128__(v176, v178);
  v180 = (v171 * (unsigned __int128)v169) >> 64;
  v181 = v171 * v169;
  v6 = __CFADD__(v177, v181);
  v182 = v177 + v181;
  if (v6)
    v183 = v180 + 1;
  else
    v183 = v180;
  v184 = __CFADD__((_QWORD)v179, v183);
  v6 = __CFADD__(v182, v181);
  v185 = v182 + v181;
  if (v6)
    ++v180;
  v186 = v179 + __PAIR128__(v184, v180);
  result[7] = v185;
  v187 = a2[3];
  v188 = a2[4] * a2[4] + v186;
  v189 = *((_QWORD *)&v186 + 1) + v186;
  v190 = __CFADD__(*((_QWORD *)&v186 + 1), (_QWORD)v186);
  v191 = a2[5];
  v192 = a2[6];
  v193 = (v187 * (unsigned __int128)v191) >> 64;
  v194 = v187 * v191;
  v6 = __CFADD__(v188, v194);
  v195 = v188 + v194;
  if (v6)
    v196 = v193 + 1;
  else
    v196 = v193;
  v6 = __CFADD__(v189, v196);
  v197 = v189 + v196;
  v198 = v6;
  v6 = __CFADD__(v195, v194);
  v199 = v195 + v194;
  if (v6)
    v200 = v193 + 1;
  else
    v200 = v193;
  v6 = __CFADD__(v197, v200);
  v201 = v197 + v200;
  v202 = v190 + v6 + v198;
  v204 = a2[1];
  v203 = a2[2];
  v205 = (v203 * (unsigned __int128)v192) >> 64;
  v206 = v203 * v192;
  v6 = __CFADD__(v199, v206);
  v207 = v199 + v206;
  if (v6)
    v208 = v205 + 1;
  else
    v208 = v205;
  v6 = __CFADD__(v201, v208);
  v209 = v201 + v208;
  v210 = v6;
  v6 = __CFADD__(v207, v206);
  v211 = v207 + v206;
  if (v6)
    v212 = v205 + 1;
  else
    v212 = v205;
  v213 = __PAIR128__(v202, v209) + __PAIR128__(v210, v212);
  v214 = a2[7];
  v215 = (v204 * (unsigned __int128)v214) >> 64;
  v216 = v204 * v214;
  v6 = __CFADD__(v211, v216);
  v217 = v211 + v216;
  if (v6)
    v218 = v215 + 1;
  else
    v218 = v215;
  v219 = __CFADD__((_QWORD)v213, v218);
  v6 = __CFADD__(v217, v216);
  v220 = v217 + v216;
  if (v6)
    v221 = v215 + 1;
  else
    v221 = v215;
  v222 = v213 + __PAIR128__(v219, v221);
  result[8] = v220;
  v224 = a2[6];
  v223 = a2[7];
  v225 = a2[2];
  v226 = a2[3];
  v227 = (v225 * (unsigned __int128)v223) >> 64;
  v228 = v225 * v223;
  v229 = v228 + v222;
  if (__CFADD__(v228, (_QWORD)v222))
    v230 = v227 + 1;
  else
    v230 = v227;
  v231 = *((_QWORD *)&v222 + 1) + v230;
  v6 = __CFADD__(v229, v228);
  v232 = v229 + v228;
  if (v6)
    v233 = v227 + 1;
  else
    v233 = v227;
  v6 = __CFADD__(v231, v233);
  v234 = v231 + v233;
  v235 = v6;
  if (__CFADD__(*((_QWORD *)&v222 + 1), v230))
    v236 = v235 + 1;
  else
    v236 = v235;
  v237 = (v226 * (unsigned __int128)v224) >> 64;
  v238 = v226 * v224;
  v6 = __CFADD__(v232, v238);
  v239 = v232 + v238;
  if (v6)
    v240 = v237 + 1;
  else
    v240 = v237;
  v6 = __CFADD__(v234, v240);
  v241 = v234 + v240;
  v242 = v6;
  v6 = __CFADD__(v239, v238);
  v243 = v239 + v238;
  if (v6)
    v244 = v237 + 1;
  else
    v244 = v237;
  v245 = __PAIR128__(v236, v241) + __PAIR128__(v242, v244);
  v247 = a2[4];
  v246 = a2[5];
  v248 = (v247 * (unsigned __int128)v246) >> 64;
  v249 = v247 * v246;
  v6 = __CFADD__(v243, v249);
  v250 = v243 + v249;
  if (v6)
    v251 = v248 + 1;
  else
    v251 = v248;
  v252 = __CFADD__((_QWORD)v245, v251);
  v6 = __CFADD__(v250, v249);
  v253 = v250 + v249;
  if (v6)
    v254 = v248 + 1;
  else
    v254 = v248;
  v255 = v245 + __PAIR128__(v252, v254);
  result[9] = v253;
  v256 = a2[6];
  v257 = a2[5] * a2[5] + v255;
  v258 = *((_QWORD *)&v255 + 1) + v255;
  v259 = __CFADD__(*((_QWORD *)&v255 + 1), (_QWORD)v255);
  v261 = a2[3];
  v260 = a2[4];
  v262 = (v260 * (unsigned __int128)v256) >> 64;
  v263 = v260 * v256;
  v6 = __CFADD__(v257, v263);
  v264 = v257 + v263;
  if (v6)
    v265 = v262 + 1;
  else
    v265 = v262;
  v6 = __CFADD__(v258, v265);
  v266 = v258 + v265;
  v267 = v6;
  v6 = __CFADD__(v264, v263);
  v268 = v264 + v263;
  if (v6)
    v269 = v262 + 1;
  else
    v269 = v262;
  v6 = __CFADD__(v266, v269);
  v270 = v266 + v269;
  v271 = v259 + v6 + v267;
  v272 = a2[7];
  v273 = (v261 * (unsigned __int128)v272) >> 64;
  v274 = v261 * v272;
  v6 = __CFADD__(v268, v274);
  v275 = v268 + v274;
  if (v6)
    v276 = v273 + 1;
  else
    v276 = v273;
  v6 = __CFADD__(v270, v276);
  v277 = v270 + v276;
  v278 = v6;
  v6 = __CFADD__(v275, v274);
  v279 = v275 + v274;
  if (v6)
    v280 = v273 + 1;
  else
    v280 = v273;
  v281 = __PAIR128__(v271, v277) + __PAIR128__(v278, v280);
  result[10] = v279;
  v283 = a2[6];
  v282 = a2[7];
  v284 = a2[4];
  v285 = a2[5];
  v286 = (v284 * (unsigned __int128)v282) >> 64;
  v287 = v284 * v282;
  v288 = v287 + v281;
  if (__CFADD__(v287, (_QWORD)v281))
    v289 = v286 + 1;
  else
    v289 = v286;
  v290 = *((_QWORD *)&v281 + 1) + v289;
  v6 = __CFADD__(v288, v287);
  v291 = v288 + v287;
  if (v6)
    v292 = v286 + 1;
  else
    v292 = v286;
  v6 = __CFADD__(v290, v292);
  v293 = v290 + v292;
  v294 = v6;
  if (__CFADD__(*((_QWORD *)&v281 + 1), v289))
    v295 = v294 + 1;
  else
    v295 = v294;
  v296 = (v285 * (unsigned __int128)v283) >> 64;
  v297 = v285 * v283;
  v6 = __CFADD__(v291, v297);
  v298 = v291 + v297;
  if (v6)
    v299 = v296 + 1;
  else
    v299 = v296;
  v6 = __CFADD__(v293, v299);
  v300 = v293 + v299;
  v301 = v6;
  v6 = __CFADD__(v298, v297);
  v302 = v298 + v297;
  if (v6)
    v303 = v296 + 1;
  else
    v303 = v296;
  v304 = __PAIR128__(v295, v300) + __PAIR128__(v301, v303);
  result[11] = v302;
  v305 = a2[5];
  v306 = a2[6] * a2[6] + v304;
  v307 = *((_QWORD *)&v304 + 1) + v304;
  v308 = __CFADD__(*((_QWORD *)&v304 + 1), (_QWORD)v304);
  v309 = a2[7];
  v310 = (v305 * (unsigned __int128)v309) >> 64;
  v311 = v305 * v309;
  v6 = __CFADD__(v306, v311);
  v312 = v306 + v311;
  if (v6)
    v313 = v310 + 1;
  else
    v313 = v310;
  v6 = __CFADD__(v307, v313);
  v314 = v307 + v313;
  v315 = v6;
  v6 = __CFADD__(v312, v311);
  v316 = v312 + v311;
  if (v6)
    v317 = v310 + 1;
  else
    v317 = v310;
  v6 = __CFADD__(v314, v317);
  v318 = v314 + v317;
  v319 = v308 + v6 + v315;
  result[12] = v316;
  v321 = a2[6];
  v320 = a2[7];
  v322 = (v321 * (unsigned __int128)v320) >> 64;
  v323 = v321 * v320;
  v6 = __CFADD__(v323, v318);
  v324 = v323 + v318;
  if (v6)
    v325 = v322 + 1;
  else
    v325 = v322;
  v326 = v319 + v325;
  v6 = __CFADD__(v324, v323);
  v327 = v324 + v323;
  if (v6)
    v328 = v322 + 1;
  else
    v328 = v322;
  v6 = __CFADD__(v326, v328);
  v329 = v326 + v328;
  v330 = v6;
  result[13] = v327;
  v331 = a2[7];
  v332 = (v331 * (unsigned __int128)v331) >> 64;
  v333 = v331 * v331;
  v6 = __CFADD__(v333, v329);
  v334 = v333 + v329;
  if (v6)
    v335 = v332 + 1;
  else
    v335 = v332;
  result[14] = v334;
  result[15] = v330 + __CFADD__(v319, v325) + v335;
  return result;
}

_QWORD *bn_sqr_comba4(_QWORD *result, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned __int128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v2 = (*a2 * (unsigned __int128)*a2) >> 64;
  *result = *a2 * *a2;
  v3 = a2[1];
  v4 = (*a2 * (unsigned __int128)v3) >> 64;
  v5 = *a2 * v3;
  v6 = __CFADD__(v5, v2);
  v7 = v5 + v2;
  if (v6)
    v8 = v4 + 1;
  else
    v8 = v4;
  v6 = __CFADD__(v7, v5);
  v9 = v7 + v5;
  if (v6)
    v10 = v4 + 1;
  else
    v10 = v4;
  result[1] = v9;
  v12 = *a2;
  v11 = a2[1];
  v13 = (v11 * (unsigned __int128)v11) >> 64;
  v14 = v11 * v11;
  v6 = __CFADD__(v14, v10 + v8);
  v15 = v14 + v10 + v8;
  if (v6)
    v16 = v13 + 1;
  else
    v16 = v13;
  v6 = __CFADD__(__CFADD__(v10, v8), v16);
  v17 = __CFADD__(v10, v8) + v16;
  v18 = v6;
  v19 = a2[2];
  v20 = (v12 * (unsigned __int128)v19) >> 64;
  v21 = v12 * v19;
  v6 = __CFADD__(v15, v21);
  v22 = v15 + v21;
  if (v6)
    v23 = v20 + 1;
  else
    v23 = v20;
  v6 = __CFADD__(v17, v23);
  v24 = v17 + v23;
  v25 = v6;
  v6 = __CFADD__(v22, v21);
  v26 = v22 + v21;
  if (v6)
    v27 = v20 + 1;
  else
    v27 = v20;
  v6 = __CFADD__(v24, v27);
  v28 = v24 + v27;
  v29 = v18 + v6 + v25;
  result[2] = v26;
  v31 = a2[2];
  v30 = a2[3];
  v32 = a2[1];
  v33 = (*a2 * (unsigned __int128)v30) >> 64;
  v34 = *a2 * v30;
  v6 = __CFADD__(v34, v28);
  v35 = v34 + v28;
  if (v6)
    v36 = v33 + 1;
  else
    v36 = v33;
  v37 = v29 + v36;
  v6 = __CFADD__(v35, v34);
  v38 = v35 + v34;
  if (v6)
    v39 = v33 + 1;
  else
    v39 = v33;
  v6 = __CFADD__(v37, v39);
  v40 = v37 + v39;
  v41 = v6;
  if (__CFADD__(v29, v36))
    v42 = v41 + 1;
  else
    v42 = v41;
  v43 = (v32 * (unsigned __int128)v31) >> 64;
  v44 = v32 * v31;
  v6 = __CFADD__(v38, v44);
  v45 = v38 + v44;
  if (v6)
    v46 = v43 + 1;
  else
    v46 = v43;
  v6 = __CFADD__(v40, v46);
  v47 = v40 + v46;
  v48 = v6;
  v6 = __CFADD__(v45, v44);
  v49 = v45 + v44;
  if (v6)
    v50 = v43 + 1;
  else
    v50 = v43;
  v51 = __PAIR128__(v42, v47) + __PAIR128__(v48, v50);
  result[3] = v49;
  v52 = a2[1];
  v53 = a2[2] * a2[2] + v51;
  v54 = *((_QWORD *)&v51 + 1) + v51;
  v55 = __CFADD__(*((_QWORD *)&v51 + 1), (_QWORD)v51);
  v56 = a2[3];
  v57 = (v52 * (unsigned __int128)v56) >> 64;
  v58 = v52 * v56;
  v6 = __CFADD__(v53, v58);
  v59 = v53 + v58;
  if (v6)
    v60 = v57 + 1;
  else
    v60 = v57;
  v6 = __CFADD__(v54, v60);
  v61 = v54 + v60;
  v62 = v6;
  v6 = __CFADD__(v59, v58);
  v63 = v59 + v58;
  if (v6)
    v64 = v57 + 1;
  else
    v64 = v57;
  v6 = __CFADD__(v61, v64);
  v65 = v61 + v64;
  v66 = v55 + v6 + v62;
  result[4] = v63;
  v68 = a2[2];
  v67 = a2[3];
  v69 = (v68 * (unsigned __int128)v67) >> 64;
  v70 = v68 * v67;
  v6 = __CFADD__(v70, v65);
  v71 = v70 + v65;
  if (v6)
    v72 = v69 + 1;
  else
    v72 = v69;
  v73 = v66 + v72;
  v6 = __CFADD__(v71, v70);
  v74 = v71 + v70;
  if (v6)
    v75 = v69 + 1;
  else
    v75 = v69;
  v6 = __CFADD__(v73, v75);
  v76 = v73 + v75;
  v77 = v6;
  result[5] = v74;
  v78 = a2[3];
  v79 = (v78 * (unsigned __int128)v78) >> 64;
  v80 = v78 * v78;
  v6 = __CFADD__(v80, v76);
  v81 = v80 + v76;
  if (v6)
    v82 = v79 + 1;
  else
    v82 = v79;
  result[6] = v81;
  result[7] = v77 + __CFADD__(v66, v72) + v82;
  return result;
}

unint64_t bn_add_words(unint64_t *rp, const unint64_t *ap, const unint64_t *bp, int num)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t StatusReg;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  if (!*(_QWORD *)&num)
    return 0;
  if (*(_QWORD *)&num >= 4uLL)
  {
    v4 = 0;
    do
    {
      v6 = *bp;
      v22 = __CFADD__(*ap, v4);
      v7 = *ap + v4;
      v8 = v22;
      v22 = __CFADD__(v7, v6);
      *rp = v7 + v6;
      v9 = ap[1];
      v10 = bp[1];
      v12 = v22;
      v22 = __CFADD__(v22, v9);
      v11 = v12 + v9;
      v22 |= __CFADD__(v8, v11);
      v11 += v8;
      v13 = v22;
      rp[1] = v11 + v10;
      v14 = ap[2];
      v15 = bp[2];
      v22 = __CFADD__(v15, v14);
      v16 = v15 + v14;
      v17 = v22;
      v18 = v13 + __CFADD__(v11, v10) + v16;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
      rp[2] = v18;
      v20 = ap[3];
      v21 = bp[3];
      v22 = __CFADD__(v21, v20);
      v23 = v21 + v20;
      v24 = v22;
      _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
      v25 = v17 + v22 + v23;
      if (__CFADD__(v22, v23) | __CFADD__(v17, v22 + v23))
        v4 = v24 + 1;
      else
        v4 = v24;
      rp[3] = v25;
      ap += 4;
      bp += 4;
      rp += 4;
      *(_QWORD *)&num -= 4;
    }
    while (*(_QWORD *)&num >= 4uLL);
    if (!*(_QWORD *)&num)
      return v4;
  }
  else
  {
    v4 = 0;
  }
  do
  {
    v27 = *ap++;
    v26 = v27;
    v29 = *bp++;
    v28 = v29;
    v22 = __CFADD__(v26, v4);
    v30 = v26 + v4;
    v31 = v22;
    v22 = __CFADD__(v30, v28);
    v32 = v30 + v28;
    if (v22)
      v4 = v31 + 1;
    else
      v4 = v31;
    *rp++ = v32;
    --*(_QWORD *)&num;
  }
  while (*(_QWORD *)&num);
  return v4;
}

unint64_t bn_sub_words(unint64_t *rp, const unint64_t *ap, const unint64_t *bp, int num)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  if (!*(_QWORD *)&num)
    return 0;
  if (*(_QWORD *)&num >= 4uLL)
  {
    v4 = 0;
    do
    {
      v6 = *ap - (v4 + *bp);
      v4 = v4 & (*ap == *bp);
      if (*ap < *bp)
        v4 = 1;
      *rp = v6;
      v7 = ap[1];
      v8 = bp[1];
      v9 = v7 - (v8 + v4);
      if (v7 != v8)
        v4 = 0;
      if (v7 < v8)
        v4 = 1;
      rp[1] = v9;
      v10 = ap[2];
      v11 = bp[2];
      v12 = v10 - (v11 + v4);
      if (v10 != v11)
        v4 = 0;
      if (v10 < v11)
        v4 = 1;
      rp[2] = v12;
      v13 = ap[3];
      v14 = bp[3];
      v15 = v13 - (v14 + v4);
      if (v13 != v14)
        v4 = 0;
      if (v13 < v14)
        v4 = 1;
      rp[3] = v15;
      ap += 4;
      bp += 4;
      rp += 4;
      *(_QWORD *)&num -= 4;
    }
    while (*(_QWORD *)&num >= 4uLL);
    if (!*(_QWORD *)&num)
      return v4;
  }
  else
  {
    v4 = 0;
  }
  do
  {
    v17 = *ap++;
    v16 = v17;
    v18 = *bp++;
    v19 = v16 - (v4 + v18);
    v4 = v4 & (v16 == v18);
    if (v16 < v18)
      v4 = 1;
    *rp++ = v19;
    --*(_QWORD *)&num;
  }
  while (*(_QWORD *)&num);
  return v4;
}

void bssl::SSL_HANDSHAKE::~SSL_HANDSHAKE(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  size_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  size_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  size_t v54;
  uint64_t *v55;
  uint64_t v56;
  size_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  size_t v61;
  uint64_t *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  size_t v66;
  uint64_t *v67;
  uint64_t v68;
  size_t v69;
  unsigned int *v70;
  ssl_session_st *v71;
  unsigned int i;
  unsigned int v73;
  ssl_session_st *v74;
  unsigned int j;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v78;
  size_t v79;
  uint64_t *p_tlsext_tick_lifetime_hint;
  uint64_t tlsext_tick_lifetime_hint;
  size_t v82;
  uint64_t *v83;
  unsigned int k;
  unsigned int v85;
  unsigned int *v86;
  unsigned int m;
  unsigned int v88;
  unsigned int *v89;
  uint64_t v90;
  size_t v91;
  uint64_t v92;
  void (*v93)(uint64_t *);
  uint64_t *v94;
  uint64_t v95;
  size_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  size_t v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  size_t v108;
  unint64_t *v109;
  uint64_t v110;
  size_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  size_t v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  size_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  size_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  size_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  size_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  size_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  size_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  size_t v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  size_t v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  size_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  size_t v156;
  uint64_t *v157;
  uint64_t *v158;
  uint64_t v159;
  size_t v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  size_t v164;
  uint64_t *v165;
  uint64_t *v166;
  uint64_t v167;
  size_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t v171;
  size_t v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t v175;
  size_t v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;

  (*(void (**)(void))(*(_QWORD *)((*this)[13] + 16) + 80))();
  v2 = this[195];
  this[195] = 0;
  if (v2)
  {
    v3 = v2[28];
    if (v3)
    {
      v5 = *(_QWORD *)(v3 - 8);
      v4 = (void *)(v3 - 8);
      v6 = v5 + 8;
      if (v5 != -8)
        bzero(v4, v6);
      free(v4);
    }
    v2[28] = 0;
    v2[29] = 0;
    v7 = v2[26];
    if (v7)
    {
      v9 = *(_QWORD *)(v7 - 8);
      v8 = (void *)(v7 - 8);
      v10 = v9 + 8;
      if (v9 != -8)
        bzero(v8, v10);
      free(v8);
    }
    v2[26] = 0;
    v2[27] = 0;
    v11 = v2[24];
    if (v11)
    {
      v13 = *(_QWORD *)(v11 - 8);
      v12 = (void *)(v11 - 8);
      v14 = v13 + 8;
      if (v13 != -8)
        bzero(v12, v14);
      free(v12);
    }
    v2[24] = 0;
    v2[25] = 0;
    v15 = v2[21];
    if (v15)
    {
      v17 = *(_QWORD *)(v15 - 8);
      v16 = (void *)(v15 - 8);
      v18 = v17 + 8;
      if (v17 != -8)
        bzero(v16, v18);
      free(v16);
    }
    v2[21] = 0;
    v2[22] = 0;
    v19 = v2[19];
    if (v19)
    {
      v21 = *(_QWORD *)(v19 - 8);
      v20 = (void *)(v19 - 8);
      v22 = v21 + 8;
      if (v21 != -8)
        bzero(v20, v22);
      free(v20);
    }
    v2[19] = 0;
    v2[20] = 0;
    v23 = v2[16];
    if (v23)
    {
      v25 = *(_QWORD *)(v23 - 8);
      v24 = (void *)(v23 - 8);
      v26 = v25 + 8;
      if (v25 != -8)
        bzero(v24, v26);
      free(v24);
    }
    v2[16] = 0;
    v2[17] = 0;
    v27 = v2[14];
    if (v27)
    {
      v29 = *(_QWORD *)(v27 - 8);
      v28 = (void *)(v27 - 8);
      v30 = v29 + 8;
      if (v29 != -8)
        bzero(v28, v30);
      free(v28);
    }
    v2[14] = 0;
    v2[15] = 0;
    v31 = v2[12];
    if (v31)
    {
      v33 = *(_QWORD *)(v31 - 8);
      v32 = (void *)(v31 - 8);
      v34 = v33 + 8;
      if (v33 != -8)
        bzero(v32, v34);
      free(v32);
    }
    v2[12] = 0;
    v2[13] = 0;
    v35 = v2[10];
    if (v35)
    {
      v37 = *(_QWORD *)(v35 - 8);
      v36 = (void *)(v35 - 8);
      v38 = v37 + 8;
      if (v37 != -8)
        bzero(v36, v38);
      free(v36);
    }
    v2[10] = 0;
    v2[11] = 0;
    v39 = v2[7];
    if (v39)
    {
      v41 = *(_QWORD *)(v39 - 8);
      v40 = (void *)(v39 - 8);
      v42 = v41 + 8;
      if (v41 != -8)
        bzero(v40, v42);
      free(v40);
    }
    v2[7] = 0;
    v2[8] = 0;
    v43 = v2[5];
    if (v43)
    {
      v45 = *(_QWORD *)(v43 - 8);
      v44 = (void *)(v43 - 8);
      v46 = v45 + 8;
      if (v45 != -8)
        bzero(v44, v46);
      free(v44);
    }
    v2[5] = 0;
    v2[6] = 0;
    v47 = v2[2];
    if (v47)
    {
      v49 = *(_QWORD *)(v47 - 8);
      v48 = (void *)(v47 - 8);
      v50 = v49 + 8;
      if (v49 != -8)
        bzero(v48, v50);
      free(v48);
    }
    v2[2] = 0;
    v2[3] = 0;
    v51 = *v2;
    if (*v2)
    {
      v53 = *(_QWORD *)(v51 - 8);
      v52 = (void *)(v51 - 8);
      v54 = v53 + 8;
      if (v53 != -8)
        bzero(v52, v54);
      free(v52);
    }
    *v2 = 0;
    v2[1] = 0;
    v56 = *(v2 - 1);
    v55 = v2 - 1;
    v57 = v56 + 8;
    if (v56 != -8)
      bzero(v55, v57);
    free(v55);
  }
  v58 = this[193];
  if (v58)
  {
    v60 = *(v58 - 1);
    v59 = v58 - 1;
    v61 = v60 + 8;
    if (v60 != -8)
      bzero(v59, v61);
    free(v59);
  }
  this[193] = 0;
  this[194] = 0;
  v62 = this[191];
  this[191] = 0;
  if (v62)
  {
    v63 = *v62;
    if (*v62)
    {
      v65 = *(_QWORD *)(v63 - 8);
      v64 = (void *)(v63 - 8);
      v66 = v65 + 8;
      if (v65 != -8)
        bzero(v64, v66);
      free(v64);
    }
    *v62 = 0;
    v62[1] = 0;
    v68 = *(v62 - 1);
    v67 = v62 - 1;
    v69 = v68 + 8;
    if (v68 != -8)
      bzero(v67, v69);
    free(v67);
  }
  v70 = (unsigned int *)this[190];
  this[190] = 0;
  if (v70)
    bssl::RefCounted<ssl_ech_keys_st>::DecRefInternal(v70);
  v71 = (ssl_session_st *)this[189];
  this[189] = 0;
  if (v71)
  {
    for (i = atomic_load((unsigned int *)v71); i != -1; i = v73)
    {
      if (!i)
LABEL_211:
        abort();
      v73 = __ldaxr((unsigned int *)v71);
      if (v73 == i)
      {
        if (!__stlxr(i - 1, (unsigned int *)v71))
        {
          if (i != 1)
            break;
          ssl_session_st::~ssl_session_st(v71);
          tlsext_tick_lifetime_hint = v71[-1].tlsext_tick_lifetime_hint;
          p_tlsext_tick_lifetime_hint = &v71[-1].tlsext_tick_lifetime_hint;
          v82 = tlsext_tick_lifetime_hint + 8;
          if (tlsext_tick_lifetime_hint != -8)
            bzero(p_tlsext_tick_lifetime_hint, v82);
          free(p_tlsext_tick_lifetime_hint);
          v74 = (ssl_session_st *)this[188];
          this[188] = 0;
          if (v74)
            goto LABEL_81;
          goto LABEL_95;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v74 = (ssl_session_st *)this[188];
  this[188] = 0;
  if (v74)
  {
LABEL_81:
    for (j = atomic_load((unsigned int *)v74); j != -1; j = v76)
    {
      if (!j)
        goto LABEL_211;
      v76 = __ldaxr((unsigned int *)v74);
      if (v76 == j)
      {
        if (!__stlxr(j - 1, (unsigned int *)v74))
        {
          if (j == 1)
          {
            ssl_session_st::~ssl_session_st(v74);
            v78 = v74[-1].tlsext_tick_lifetime_hint;
            v77 = &v74[-1].tlsext_tick_lifetime_hint;
            v79 = v78 + 8;
            if (v78 != -8)
              bzero(v77, v79);
            free(v77);
          }
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
LABEL_95:
  v83 = this[187];
  this[187] = 0;
  if (v83)
  {
    for (k = atomic_load((unsigned int *)v83); k != -1; k = v85)
    {
      if (!k)
        goto LABEL_211;
      v85 = __ldaxr((unsigned int *)v83);
      if (v85 == k)
      {
        if (!__stlxr(k - 1, (unsigned int *)v83))
        {
          if (k != 1)
            break;
          v92 = v83[2];
          if (v92)
          {
            v93 = *(void (**)(uint64_t *))(v92 + 160);
            if (v93)
            {
              v93(v83);
              v83[1] = 0;
              *((_DWORD *)v83 + 1) = 0;
            }
          }
          v95 = *(v83 - 1);
          v94 = v83 - 1;
          v96 = v95 + 8;
          if (v95 != -8)
            bzero(v94, v96);
          free(v94);
          v86 = (unsigned int *)this[186];
          this[186] = 0;
          if (v86)
            goto LABEL_105;
          goto LABEL_122;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v86 = (unsigned int *)this[186];
  this[186] = 0;
  if (v86)
  {
LABEL_105:
    for (m = atomic_load(v86); m != -1; m = v88)
    {
      if (!m)
        goto LABEL_211;
      v88 = __ldaxr(v86);
      if (v88 == m)
      {
        if (!__stlxr(m - 1, v86))
        {
          if (m == 1)
          {
            ssl_credential_st::~ssl_credential_st((ssl_credential_st *)v86);
            v90 = *((_QWORD *)v86 - 1);
            v89 = v86 - 2;
            v91 = v90 + 8;
            if (v90 != -8)
              bzero(v89, v91);
            free(v89);
          }
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
LABEL_122:
  v97 = this[184];
  if (v97)
  {
    v99 = *(v97 - 1);
    v98 = v97 - 1;
    v100 = v99 + 8;
    if (v99 != -8)
      bzero(v98, v100);
    free(v98);
  }
  this[184] = 0;
  this[185] = 0;
  v101 = (unint64_t *)this[182];
  this[182] = 0;
  if (v101)
  {
    v102 = *v101;
    if (*v101)
    {
      v103 = 0;
      do
      {
        v104 = *(unsigned int **)(v101[1] + 8 * v103);
        if (v104)
        {
          CRYPTO_BUFFER_free(v104);
          v102 = *v101;
        }
        ++v103;
      }
      while (v103 < v102);
    }
    v105 = v101[1];
    if (v105)
    {
      v107 = *(_QWORD *)(v105 - 8);
      v106 = (void *)(v105 - 8);
      v108 = v107 + 8;
      if (v107 != -8)
        bzero(v106, v108);
      free(v106);
    }
    v110 = *(v101 - 1);
    v109 = v101 - 1;
    v111 = v110 + 8;
    if (v110 != -8)
      bzero(v109, v111);
    free(v109);
  }
  v112 = this[181];
  this[181] = 0;
  if (v112)
  {
    v114 = *(v112 - 1);
    v113 = v112 - 1;
    v115 = v114 + 8;
    if (v114 != -8)
      bzero(v113, v115);
    free(v113);
  }
  v116 = this[179];
  if (v116)
  {
    v118 = *(v116 - 1);
    v117 = v116 - 1;
    v119 = v118 + 8;
    if (v118 != -8)
      bzero(v117, v119);
    free(v117);
  }
  this[179] = 0;
  this[180] = 0;
  v120 = this[93];
  if (v120)
  {
    ((void (*)(char *))v120[3])((char *)this + 744);
    this[93] = 0;
  }
  v121 = this[87];
  if (v121)
  {
    v123 = *(v121 - 1);
    v122 = v121 - 1;
    v124 = v123 + 8;
    if (v123 != -8)
      bzero(v122, v124);
    free(v122);
  }
  this[87] = 0;
  this[88] = 0;
  v125 = this[85];
  if (v125)
  {
    v127 = *(v125 - 1);
    v126 = v125 - 1;
    v128 = v127 + 8;
    if (v127 != -8)
      bzero(v126, v128);
    free(v126);
  }
  this[85] = 0;
  this[86] = 0;
  v129 = this[83];
  if (v129)
  {
    v131 = *(v129 - 1);
    v130 = v129 - 1;
    v132 = v131 + 8;
    if (v131 != -8)
      bzero(v130, v132);
    free(v130);
  }
  this[83] = 0;
  this[84] = 0;
  v133 = this[81];
  if (v133)
  {
    v135 = *(v133 - 1);
    v134 = v133 - 1;
    v136 = v135 + 8;
    if (v135 != -8)
      bzero(v134, v136);
    free(v134);
  }
  this[81] = 0;
  this[82] = 0;
  v137 = this[79];
  if (v137)
  {
    v139 = *(v137 - 1);
    v138 = v137 - 1;
    v140 = v139 + 8;
    if (v139 != -8)
      bzero(v138, v140);
    free(v138);
  }
  this[79] = 0;
  this[80] = 0;
  v141 = this[77];
  if (v141)
  {
    v143 = *(v141 - 1);
    v142 = v141 - 1;
    v144 = v143 + 8;
    if (v143 != -8)
      bzero(v142, v144);
    free(v142);
  }
  this[77] = 0;
  this[78] = 0;
  v145 = this[75];
  if (v145)
  {
    v147 = *(v145 - 1);
    v146 = v145 - 1;
    v148 = v147 + 8;
    if (v147 != -8)
      bzero(v146, v148);
    free(v146);
  }
  this[75] = 0;
  this[76] = 0;
  v149 = this[73];
  if (v149)
  {
    v151 = *(v149 - 1);
    v150 = v149 - 1;
    v152 = v151 + 8;
    if (v151 != -8)
      bzero(v150, v152);
    free(v150);
  }
  this[73] = 0;
  this[74] = 0;
  v153 = this[71];
  if (v153)
  {
    v155 = *(v153 - 1);
    v154 = v153 - 1;
    v156 = v155 + 8;
    if (v155 != -8)
      bzero(v154, v156);
    free(v154);
  }
  this[71] = 0;
  this[72] = 0;
  v157 = this[69];
  if (v157)
  {
    v159 = *(v157 - 1);
    v158 = v157 - 1;
    v160 = v159 + 8;
    if (v159 != -8)
      bzero(v158, v160);
    free(v158);
  }
  this[69] = 0;
  this[70] = 0;
  v161 = this[67];
  if (v161)
  {
    v163 = *(v161 - 1);
    v162 = v161 - 1;
    v164 = v163 + 8;
    if (v163 != -8)
      bzero(v162, v164);
    free(v162);
  }
  this[67] = 0;
  this[68] = 0;
  v165 = this[65];
  if (v165)
  {
    v167 = *(v165 - 1);
    v166 = v165 - 1;
    v168 = v167 + 8;
    if (v167 != -8)
      bzero(v166, v168);
    free(v166);
  }
  this[65] = 0;
  this[66] = 0;
  bssl::SSLTranscript::~SSLTranscript((bssl::SSLTranscript *)(this + 56));
  bssl::SSLTranscript::~SSLTranscript((bssl::SSLTranscript *)(this + 51));
  v169 = this[50];
  this[50] = 0;
  if (v169)
  {
    (*(void (**)(uint64_t *))*v169)(v169);
    v171 = *(v169 - 1);
    v170 = v169 - 1;
    v172 = v171 + 8;
    if (v171 != -8)
      bzero(v170, v172);
    free(v170);
  }
  v173 = this[49];
  this[49] = 0;
  if (v173)
  {
    (*(void (**)(uint64_t *))*v173)(v173);
    v175 = *(v173 - 1);
    v174 = v173 - 1;
    v176 = v175 + 8;
    if (v175 != -8)
      bzero(v174, v176);
    free(v174);
  }
  v177 = this[48];
  this[48] = 0;
  if (v177)
  {
    if (v177[1])
    {
      v178 = 0;
      v179 = 0;
      do
      {
        v180 = *v177 + v178;
        free(*(void **)(v180 + 8));
        *(_QWORD *)v180 = 0;
        *(_QWORD *)(v180 + 8) = 0;
        *(_QWORD *)(v180 + 16) = 0;
        ++v179;
        v178 += 24;
      }
      while (v179 < v177[1]);
    }
    free((void *)*v177);
    free(v177);
  }
}

uint64_t bssl::SSL_HANDSHAKE::GetClientHello(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  bssl *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v6 = *(_QWORD *)(a1 + 592);
  if (v6)
  {
    *(_WORD *)a2 = 256;
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 584);
    *(_QWORD *)(a2 + 32) = v6;
    v7 = *(_QWORD *)(a1 + 592);
    if (v7 <= 3)
      abort();
    v8 = *(_QWORD *)(a1 + 584) + 4;
    v9 = v7 - 4;
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v9;
    v10 = *(bssl **)a1;
    v14 = v8;
    v15 = v9;
    if (!bssl::ssl_parse_client_hello_with_trailing_data((uint64_t)v10, (unint64_t *)&v14, a3))
      goto LABEL_9;
    goto LABEL_7;
  }
  if ((*(unsigned int (**)(void))(**(_QWORD **)a1 + 24))())
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_QWORD *)a1;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = v11;
    if (!bssl::ssl_parse_client_hello_with_trailing_data(v12, (unint64_t *)&v14, a3))
    {
LABEL_9:
      ERR_put_error(16, 0, 131, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 188);
      bssl::ssl_send_alert(*(bssl **)a1, (ssl_st *)2, 50);
      return 0;
    }
LABEL_7:
    if (!v15)
      return 1;
    goto LABEL_9;
  }
  ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 183);
  return 0;
}

void bssl::ssl_handshake_new(bssl *this@<X0>, uint64_t ***a2@<X8>)
{
  char *v5;
  _QWORD *v6;
  uint64_t **v7;
  uint64_t v8;

  v5 = (char *)malloc_type_malloc(0x660uLL, 0x30772F57uLL);
  if (v5)
  {
    v6 = v5;
    *((_QWORD *)v5 + 1) = this;
    v7 = (uint64_t **)(v5 + 8);
    *(_QWORD *)v5 = 1624;
    *((_DWORD *)v5 + 6) = 1;
    bzero(v5 + 28, 0x2B4uLL);
    bzero(v6 + 91, 0x350uLL);
    *((_DWORD *)v6 + 394) = *((unsigned __int8 *)v6 + 1579) << 24;
    *(_OWORD *)((char *)v6 + 1580) = 0u;
    *(_OWORD *)((char *)v6 + 1596) = 0u;
    *(_OWORD *)((char *)v6 + 1612) = 0u;
    *((_BYTE *)v6 + 1628) = 0;
    RAND_bytes_with_additional_data((uint64_t)v6 + 1622, 7uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
    if (bssl::SSLTranscript::Init((bssl::SSLTranscript *)(v6 + 52))
      && (v8 = *((_QWORD *)this + 1), (v6[2] = v8) != 0))
    {
      *a2 = v7;
    }
    else
    {
      *a2 = 0;
      bssl::SSL_HANDSHAKE::~SSL_HANDSHAKE(v7);
      if (*v6 != -8)
        __memset_chk();
      free(v6);
    }
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    *a2 = 0;
  }
}

uint64_t bssl::ssl_add_message_cbb(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, void **);
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 96))(a1, a2, &v14))
  {
    v3 = *(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 104);
    v12 = v14;
    v13 = v15;
    v14 = 0;
    v15 = 0;
    v4 = v3(a1, &v12);
    if (v12)
    {
      v6 = (char *)v12 - 8;
      v5 = *((_QWORD *)v12 - 1);
      if (v5 != -8)
        bzero(v6, v5 + 8);
      free(v6);
    }
    v12 = 0;
    v13 = 0;
    v7 = v14;
    if (!v14)
      return v4;
  }
  else
  {
    v4 = 0;
    v7 = v14;
    if (!v14)
      return v4;
  }
  v10 = *(v7 - 1);
  v9 = (char *)(v7 - 1);
  v11 = v10 + 8;
  if (v10 != -8)
    bzero(v9, v11);
  free(v9);
  return v4;
}

uint64_t bssl::ssl_hash_message(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  unint64_t *v5;
  uint64_t result;
  uint64_t v7;

  if (*(_BYTE *)a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(unint64_t **)(a1 + 408);
  if (!v5 || (result = BUF_MEM_append(v5, *(void **)(a2 + 24), v4), (_DWORD)result))
  {
    v7 = *(_QWORD *)(a1 + 416);
    if (v7)
      (*(void (**)(uint64_t, uint64_t, size_t))(v7 + 24))(a1 + 416, v3, v4);
    return 1;
  }
  return result;
}

uint64_t bssl::ssl_parse_extensions(unsigned __int16 **a1, _BYTE *a2, uint64_t *a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned __int16 **v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  unsigned __int16 *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int v26;
  unsigned __int16 *v27;
  uint64_t v28;
  unsigned __int16 **v29;
  uint64_t v30;
  unint64_t v31;

  if (a4)
  {
    v6 = 8 * a4;
    v7 = a3;
    do
    {
      v8 = *v7++;
      *(_BYTE *)(v8 + 3) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      v6 -= 8;
    }
    while (v6);
    v9 = (unint64_t)a1[1];
    if (v9)
    {
      v10 = *a1;
      if ((a5 & 1) != 0)
      {
        while (v9 >= 2)
        {
          if ((v9 & 0xFFFFFFFFFFFFFFFELL) == 2)
            break;
          v11 = v9 - 4;
          v12 = __rev16(v10[1]);
          v13 = v11 >= v12;
          v9 = v11 - v12;
          if (!v13)
            break;
          v14 = __rev16(*v10);
          v15 = v10 + 2;
          v10 = (unsigned __int16 *)((char *)v10 + v12 + 4);
          v16 = 8 * a4;
          v17 = (unsigned __int16 **)a3;
          while (1)
          {
            v18 = (uint64_t)*v17;
            if (v14 == **v17)
            {
              if (*(_BYTE *)(v18 + 2))
                break;
            }
            ++v17;
            v16 -= 8;
            if (!v16)
              goto LABEL_8;
          }
          if (*(_BYTE *)(v18 + 3))
            goto LABEL_18;
          *(_BYTE *)(v18 + 3) = 1;
          *(_QWORD *)(v18 + 8) = v15;
          *(_QWORD *)(v18 + 16) = v12;
LABEL_8:
          if (!v9)
            return 1;
        }
      }
      else
      {
        result = 1;
        while (v9 >= 2)
        {
          if ((v9 & 0xFFFFFFFFFFFFFFFELL) == 2)
            break;
          v24 = v9 - 4;
          v25 = __rev16(v10[1]);
          v13 = v24 >= v25;
          v9 = v24 - v25;
          if (!v13)
            break;
          v26 = __rev16(*v10);
          v27 = v10 + 2;
          v10 = (unsigned __int16 *)((char *)v10 + v25 + 4);
          v28 = 8 * a4;
          v29 = (unsigned __int16 **)a3;
          while (1)
          {
            v30 = (uint64_t)*v29;
            if (v26 == **v29)
            {
              if (*(_BYTE *)(v30 + 2))
                break;
            }
            ++v29;
            v28 -= 8;
            if (!v28)
              goto LABEL_43;
          }
          if (*(_BYTE *)(v30 + 3))
          {
LABEL_18:
            ERR_put_error(16, 0, 257, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 310);
            result = 0;
            *a2 = 47;
            return result;
          }
          *(_BYTE *)(v30 + 3) = 1;
          *(_QWORD *)(v30 + 8) = v27;
          *(_QWORD *)(v30 + 16) = v25;
          if (!v9)
            return result;
        }
      }
      goto LABEL_42;
    }
    return 1;
  }
  v20 = (unint64_t)a1[1];
  if (!v20)
    return 1;
  v21 = *a1;
  if (a5)
  {
    while (1)
    {
      v13 = v20 >= 4;
      v22 = v20 - 4;
      if (!v13)
        break;
      v23 = __rev16(v21[1]);
      if (v22 < v23)
        break;
      v21 = (unsigned __int16 *)((char *)v21 + v23 + 4);
      v20 = v22 - v23;
      if (!v20)
        return 1;
    }
    goto LABEL_42;
  }
  v13 = v20 >= 4;
  v31 = v20 - 4;
  if (!v13 || v31 < __rev16(v21[1]))
  {
LABEL_42:
    ERR_put_error(16, 0, 190, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 286);
    result = 0;
    *a2 = 50;
    return result;
  }
LABEL_43:
  ERR_put_error(16, 0, 222, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 303);
  result = 0;
  *a2 = 110;
  return result;
}

uint64_t bssl::ssl_verify_peer_cert(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  int v12;
  uint64_t (*v13)(uint64_t, unsigned __int8 *);
  uint64_t result;
  bssl *v15;
  int v16;
  unint64_t v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _QWORD);
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  unsigned int *v38;
  int v39;
  unsigned __int8 v40;

  v3 = *(_QWORD *)this;
  v4 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)this + 48) + 464);
  if (!v4)
  {
    v40 = 46;
    v13 = *(uint64_t (**)(uint64_t, unsigned __int8 *))(*((_QWORD *)this + 1) + 48);
    if (v13)
    {
      result = v13(v3, &v40);
      if ((_DWORD)result == 1)
      {
        if (*(_BYTE *)(*((_QWORD *)this + 1) + 236))
        {
          result = 1;
          *(_QWORD *)(*((_QWORD *)this + 188) + 176) = 50;
          goto LABEL_33;
        }
        ERR_clear_error();
        *(_QWORD *)(*((_QWORD *)this + 188) + 176) = 50;
LABEL_49:
        if ((*(_BYTE *)(v3 + 164) & 1) != 0)
          return 0;
        if ((*(_WORD *)(*((_QWORD *)this + 1) + 237) & 4) == 0)
          return 0;
        v21 = *(_QWORD *)(v3 + 104);
        v22 = *(uint64_t (**)(uint64_t, _QWORD))(v21 + 720);
        if (!v22)
          return 0;
        v23 = v22(v3, *(_QWORD *)(v21 + 728));
        if (v23 > 0)
          return 0;
        v39 = v23;
        ERR_put_error(16, 0, 289, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 404);
        if (v39)
          v16 = 80;
        else
          v16 = 113;
LABEL_35:
        v15 = (bssl *)v3;
        goto LABEL_30;
      }
      if (!(_DWORD)result)
      {
        *(_QWORD *)(*((_QWORD *)this + 188) + 176) = 0;
        goto LABEL_49;
      }
    }
    else
    {
      result = (*(unsigned int (**)(_QWORD, bssl *, unsigned __int8 *))(*(_QWORD *)(*(_QWORD *)(v3 + 104)
                                                                                             + 16)
                                                                                 + 72))(*((_QWORD *)this + 188), this, &v40) ^ 1;
    }
    if ((_DWORD)result)
    {
LABEL_33:
      if ((_DWORD)result != 1)
        return result;
      ERR_put_error(16, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 392);
      v16 = v40;
      goto LABEL_35;
    }
    goto LABEL_49;
  }
  v5 = (unint64_t *)v4[17];
  if (v5)
  {
    v6 = *v5;
    v7 = *(unint64_t **)(*((_QWORD *)this + 188) + 136);
    if (v7)
      goto LABEL_4;
  }
  else
  {
    v6 = 0;
    v7 = *(unint64_t **)(*((_QWORD *)this + 188) + 136);
    if (v7)
    {
LABEL_4:
      if (v6 == *v7)
        goto LABEL_5;
LABEL_28:
      v12 = 333;
LABEL_29:
      ERR_put_error(16, 0, 273, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", v12);
      v15 = (bssl *)v3;
      v16 = 47;
LABEL_30:
      bssl::ssl_send_alert(v15, (ssl_st *)2, v16);
      return 1;
    }
  }
  if (v6)
    goto LABEL_28;
LABEL_5:
  if (v5)
  {
    for (i = 0; v7 && i < *v7; ++i)
    {
      if (*v5 <= i)
        v9 = 0;
      else
        v9 = *(_QWORD *)(v5[1] + 8 * i);
      if (*v7 <= i)
      {
        v10 = 0;
        v11 = *(_QWORD *)(v9 + 16);
        if (v11 != MEMORY[0x10])
          goto LABEL_21;
      }
      else
      {
        v10 = *(_QWORD *)(v7[1] + 8 * i);
        v11 = *(_QWORD *)(v9 + 16);
        if (v11 != *(_QWORD *)(v10 + 16))
          goto LABEL_21;
      }
      if (v11 && memcmp(*(const void **)(v9 + 8), *(const void **)(v10 + 8), v11))
        goto LABEL_21;
    }
    goto LABEL_58;
  }
  if (v7)
  {
    v17 = *v7;
    if (*v7)
    {
      v18 = MEMORY[0x10];
      if (MEMORY[0x10])
      {
        v19 = 0;
        while (1)
        {
          v20 = v17 <= v19 ? 0 : *(_QWORD *)(v7[1] + 8 * v19);
          if (v18 != *(_QWORD *)(v20 + 16) || memcmp(MEMORY[8], *(const void **)(v20 + 8), v18))
            break;
          if (v17 == ++v19)
            goto LABEL_58;
        }
      }
      else
      {
        v24 = 0;
        while (!*(_QWORD *)(*(_QWORD *)(v7[1] + 8 * v24) + 16))
        {
          if (v17 == ++v24)
            goto LABEL_58;
        }
      }
LABEL_21:
      v12 = 348;
      goto LABEL_29;
    }
  }
LABEL_58:
  v25 = v4[32];
  if (v25)
  {
    v26 = (unsigned int *)(v25 + 24);
    v27 = atomic_load((unsigned int *)(v25 + 24));
    if (v27 != -1)
    {
      while (1)
      {
        v28 = __ldaxr(v26);
        if (v28 == v27)
        {
          if (!__stlxr(v27 + 1, v26))
          {
            v29 = 1;
            goto LABEL_65;
          }
        }
        else
        {
          __clrex();
        }
        v29 = 0;
LABEL_65:
        if ((v29 & 1) == 0)
        {
          v27 = v28;
          if (v28 != -1)
            continue;
        }
        break;
      }
    }
  }
  v30 = *((_QWORD *)this + 188);
  v31 = *(unsigned int **)(v30 + 256);
  *(_QWORD *)(v30 + 256) = v25;
  if (v31)
    CRYPTO_BUFFER_free(v31);
  v32 = v4[31];
  if (v32)
  {
    v33 = (unsigned int *)(v32 + 24);
    v34 = atomic_load((unsigned int *)(v32 + 24));
    if (v34 != -1)
    {
      while (1)
      {
        v35 = __ldaxr(v33);
        if (v35 == v34)
        {
          if (!__stlxr(v34 + 1, v33))
          {
            v36 = 1;
            goto LABEL_76;
          }
        }
        else
        {
          __clrex();
        }
        v36 = 0;
LABEL_76:
        if ((v36 & 1) == 0)
        {
          v34 = v35;
          if (v35 != -1)
            continue;
        }
        break;
      }
    }
  }
  v37 = *((_QWORD *)this + 188);
  v38 = *(unsigned int **)(v37 + 248);
  *(_QWORD *)(v37 + 248) = v32;
  if (v38)
    CRYPTO_BUFFER_free(v38);
  result = 0;
  *(_QWORD *)(*((_QWORD *)this + 188) + 176) = v4[22];
  return result;
}

uint64_t bssl::ssl_get_finished(const ssl_session_st **this, bssl::SSL_HANDSHAKE *a2)
{
  bssl *v3;
  unint64_t **v4;
  const ssl_session_st *v5;
  uint64_t result;
  void *v7;
  size_t v8;
  const ssl_session_st *v9;
  char v10;
  size_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int8x16_t *v21;
  int8x16_t *v22;
  int8x16_t v23;
  size_t v24;
  int8x16_t v25;
  int8x16_t v26;
  unint64_t v27;
  size_t v28;
  int8x8_t v29;
  int8x8_t *v30;
  int8x8_t *v31;
  size_t v32;
  int8x8_t v33;
  int8x8_t v34;
  int8x8_t v35;
  uint64_t v36;
  size_t v37;
  __int8 *v38;
  __int8 *v39;
  char v40;
  char v41;
  char v42;
  int v43;
  int v44;
  size_t __n;
  char v46;
  char v47;
  int8x16_t *v48;
  uint64_t v49;
  void *v50;
  size_t v51;
  int8x16_t __src;
  _QWORD v53[7];

  v53[6] = *MEMORY[0x24BDAC8D0];
  v3 = (bssl *)*this;
  if (!(*(unsigned int (**)(const ssl_session_st *, char *))(*(_QWORD *)&(*this)->ssl_version + 24))(*this, &v46))return 3;
  if (v47 != 20)
  {
    bssl::ssl_send_alert(v3, (ssl_st *)2, 10);
    ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 211);
    ERR_add_error_dataf("got type %d, wanted type %d", v13, v14, v15, v16, v17, v18, v19, v47);
    return 0;
  }
  __n = 0;
  v4 = (unint64_t **)(this + 51);
  v5 = this[188];
  if (!v5)
    v5 = *(const ssl_session_st **)&(*this)->session_id[16];
  result = bssl::SSLTranscript::GetFinishedMAC((bssl::SSLTranscript *)(this + 51), &__src, &__n, v5, (*((_BYTE *)v3 + 164) & 1) == 0);
  if ((_DWORD)result)
  {
    if (v46)
      goto LABEL_11;
    v7 = v50;
    v8 = v51;
    if (!*v4 || (result = BUF_MEM_append(*v4, v50, v51), (_DWORD)result))
    {
      v9 = this[52];
      if (v9)
        (*(void (**)(char *, void *, size_t))&v9->master_key[4])((char *)this + 416, v7, v8);
LABEL_11:
      v10 = __n;
      if (v49 != __n)
      {
LABEL_31:
        bssl::ssl_send_alert(v3, (ssl_st *)2, 51);
        v43 = 142;
        v44 = 492;
LABEL_32:
        ERR_put_error(16, 0, v43, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", v44);
        return 0;
      }
      if (!__n)
      {
        v20 = (char *)v3 + 48;
        if ((*((_BYTE *)v3 + 164) & 1) == 0)
        {
LABEL_18:
          *(_BYTE *)(*(_QWORD *)v20 + 448) = v10;
LABEL_40:
          if (!(*(unsigned int (**)(bssl *))(*(_QWORD *)v3 + 40))(v3))
          {
            (*(void (**)(bssl *))(*(_QWORD *)v3 + 32))(v3);
            return 1;
          }
          bssl::ssl_send_alert(v3, (ssl_st *)2, 10);
          v43 = 255;
          v44 = 514;
          goto LABEL_32;
        }
LABEL_39:
        *(_BYTE *)(*(_QWORD *)v20 + 447) = v10;
        goto LABEL_40;
      }
      if (__n < 8)
      {
        v11 = 0;
        v12 = 0;
LABEL_28:
        v37 = __n - v11;
        v38 = &__src.i8[v11];
        v39 = &v48->i8[v11];
        do
        {
          v41 = *v39++;
          v40 = v41;
          v42 = *v38++;
          v12 |= v42 ^ v40;
          --v37;
        }
        while (v37);
LABEL_30:
        if (v12)
          goto LABEL_31;
        if (__n >= 0xD)
        {
          v43 = 68;
          v44 = 499;
          goto LABEL_32;
        }
        v20 = (char *)v3 + 48;
        if ((*((_BYTE *)v3 + 164) & 1) == 0)
        {
          memcpy((void *)(*(_QWORD *)v20 + 449), &__src, __n);
          goto LABEL_18;
        }
        memcpy((void *)(*(_QWORD *)v20 + 435), &__src, __n);
        goto LABEL_39;
      }
      if (__n >= 0x20)
      {
        v11 = __n & 0xFFFFFFFFFFFFFFE0;
        v21 = v48 + 1;
        v22 = (int8x16_t *)v53;
        v23 = 0uLL;
        v24 = __n & 0xFFFFFFFFFFFFFFE0;
        v25 = 0uLL;
        do
        {
          v23 = vorrq_s8(veorq_s8(v22[-1], v21[-1]), v23);
          v25 = vorrq_s8(veorq_s8(*v22, *v21), v25);
          v21 += 2;
          v22 += 2;
          v24 -= 32;
        }
        while (v24);
        v26 = vorrq_s8(v25, v23);
        *(int8x8_t *)v26.i8 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
        v27 = v26.i64[0] | HIDWORD(v26.i64[0]) | ((unint64_t)(v26.i64[0] | HIDWORD(v26.i64[0])) >> 16);
        v12 = v27 | BYTE1(v27);
        if (__n == v11)
          goto LABEL_30;
        if ((__n & 0x18) == 0)
          goto LABEL_28;
      }
      else
      {
        v12 = 0;
        v11 = 0;
      }
      v28 = v11;
      v11 = __n & 0xFFFFFFFFFFFFFFF8;
      v29 = (int8x8_t)v12;
      v30 = (int8x8_t *)&v48->i8[v28];
      v31 = (int8x8_t *)&__src.i8[v28];
      v32 = v28 - (__n & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v33 = *v30++;
        v34 = v33;
        v35 = *v31++;
        v29 = vorr_s8(veor_s8(v35, v34), v29);
        v32 += 8;
      }
      while (v32);
      v36 = *(_QWORD *)&v29 | HIDWORD(*(_QWORD *)&v29) | ((*(_QWORD *)&v29 | HIDWORD(*(_QWORD *)&v29)) >> 16);
      v12 = v36 | BYTE1(v36);
      if (__n == v11)
        goto LABEL_30;
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t bssl::ssl_send_finished(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v2;
  const ssl_session_st *v3;
  size_t v4;
  uint64_t v5;
  uint64_t (*v7)(uint64_t, void **);
  char v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  char *v18;
  _BYTE v19[48];
  __int128 v20;
  void *v21[2];
  __int128 v22;
  size_t __n;
  void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int8x16_t __src[4];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)this;
  v3 = (const ssl_session_st *)*((_QWORD *)this + 188);
  if (!v3)
    v3 = *(const ssl_session_st **)(v2 + 88);
  __n = 0;
  if (!bssl::SSLTranscript::GetFinishedMAC((bssl *)((char *)this + 408), __src, &__n, v3, *(_BYTE *)(v2 + 164) & 1)|| !bssl::ssl_log_secret(v2, "CLIENT_RANDOM", &v3->key_arg[3], v3->key_arg[2]))
  {
    return 0;
  }
  v4 = __n;
  if (__n >= 0xD)
  {
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 542);
    return 0;
  }
  if ((*(_BYTE *)(v2 + 164) & 1) != 0)
  {
    if (__n)
      memcpy((void *)(*(_QWORD *)(v2 + 48) + 449), __src, __n);
    *(_BYTE *)(*(_QWORD *)(v2 + 48) + 448) = v4;
  }
  else
  {
    if (__n)
      memcpy((void *)(*(_QWORD *)(v2 + 48) + 435), __src, __n);
    *(_BYTE *)(*(_QWORD *)(v2 + 48) + 447) = v4;
  }
  *(_OWORD *)v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  if (!(*(unsigned int (**)(uint64_t, __int128 *, _BYTE *, uint64_t))(*(_QWORD *)v2 + 88))(v2, &v20, v19, 20))goto LABEL_35;
  v26 = 0;
  if (!CBB_add_space((uint64_t)v19, &v26, v4))
    goto LABEL_35;
  if (v4)
    memcpy(v26, __src, v4);
  v26 = 0;
  v27 = 0;
  if (((*(uint64_t (**)(uint64_t, __int128 *, char **))(*(_QWORD *)v2 + 96))(v2, &v20, &v26) & 1) == 0)
  {
    if (v26)
    {
      v15 = *((_QWORD *)v26 - 1);
      v14 = v26 - 8;
      v16 = v15 + 8;
      if (v15 != -8)
        bzero(v14, v16);
      free(v14);
    }
    goto LABEL_35;
  }
  v7 = *(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 104);
  v24 = v26;
  v25 = v27;
  v26 = 0;
  v27 = 0;
  v8 = v7(v2, &v24);
  if (v24)
  {
    v10 = (char *)v24 - 8;
    v9 = *((_QWORD *)v24 - 1);
    if (v9 != -8)
      bzero(v10, v9 + 8);
    free(v10);
  }
  v24 = 0;
  v25 = 0;
  if (v26)
  {
    v12 = *((_QWORD *)v26 - 1);
    v11 = v26 - 8;
    v13 = v12 + 8;
    if (v12 != -8)
      bzero(v11, v13);
    free(v11);
  }
  if ((v8 & 1) == 0)
  {
LABEL_35:
    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 559);
    v5 = 0;
    goto LABEL_36;
  }
  v5 = 1;
LABEL_36:
  if (!BYTE8(v20) && (BYTE8(v22) & 1) != 0 && v21[0])
  {
    v18 = (char *)v21[0] - 8;
    v17 = *((_QWORD *)v21[0] - 1);
    if (v17 != -8)
      bzero(v18, v17 + 8);
    free(v18);
  }
  return v5;
}

uint64_t bssl::ssl_send_tls12_certificate(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  size_t v13;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, _QWORD **);
  char *v17;
  uint64_t v18;
  size_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  size_t v23;
  _BYTE v24[48];
  uint64_t v25[6];
  uint64_t v26[6];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  v28 = 0u;
  v29 = 0u;
  v27 = 0u;
  if (!(*(unsigned int (**)(_QWORD, __int128 *, uint64_t *, uint64_t))(**(_QWORD **)this + 88))(*(_QWORD *)this, &v27, v26, 11)|| !CBB_flush(v26)|| !cbb_add_child((uint64_t)v26, (uint64_t)v25, 3u, 0))
  {
LABEL_17:
    v10 = 0;
    goto LABEL_18;
  }
  v3 = *((_QWORD *)this + 186);
  if (v3)
  {
    v4 = *(unint64_t **)(v3 + 48);
    if (v4)
    {
      v5 = *v4;
      if (*v4)
      {
        v6 = 0;
        do
        {
          v7 = v5 <= v6 ? 0 : *(_QWORD *)(v4[1] + 8 * v6);
          if (!CBB_flush(v25))
            goto LABEL_17;
          if (!cbb_add_child((uint64_t)v25, (uint64_t)v24, 3u, 0))
            goto LABEL_17;
          v8 = *(const void **)(v7 + 8);
          v9 = *(_QWORD *)(v7 + 16);
          v32 = 0;
          if (!CBB_add_space((uint64_t)v24, &v32, v9))
            goto LABEL_17;
          if (v9)
            memcpy(v32, v8, v9);
          ++v6;
          v5 = *v4;
        }
        while (v6 < *v4);
      }
    }
  }
  v15 = *(_QWORD *)this;
  v32 = 0;
  v33 = 0;
  if (!(*(unsigned int (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v15 + 96))(v15, &v27, &v32))
  {
    v10 = 0;
    v20 = v32;
    if (!v32)
      goto LABEL_18;
    goto LABEL_33;
  }
  v16 = *(uint64_t (**)(uint64_t, _QWORD **))(*(_QWORD *)v15 + 104);
  v30 = v32;
  v31 = v33;
  v32 = 0;
  v33 = 0;
  v10 = v16(v15, &v30);
  if (v30)
  {
    v18 = *(v30 - 1);
    v17 = (char *)(v30 - 1);
    v19 = v18 + 8;
    if (v18 != -8)
      bzero(v17, v19);
    free(v17);
  }
  v30 = 0;
  v31 = 0;
  v20 = v32;
  if (v32)
  {
LABEL_33:
    v22 = *(v20 - 1);
    v21 = (char *)(v20 - 1);
    v23 = v22 + 8;
    if (v22 != -8)
      bzero(v21, v23);
    free(v21);
  }
LABEL_18:
  if (!BYTE8(v27) && (BYTE8(v29) & 1) != 0 && (_QWORD)v28)
  {
    v12 = *(_QWORD *)(v28 - 8);
    v11 = (void *)(v28 - 8);
    v13 = v12 + 8;
    if (v12 != -8)
      bzero(v11, v13);
    free(v11);
  }
  return v10;
}

uint64_t bssl::ssl_run_handshake(bssl *this, bssl::SSL_HANDSHAKE *a2, BOOL *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;
  ssl_st *v22;
  unsigned __int8 v23[9];

  v5 = *(_QWORD *)this;
  while (2)
  {
    v6 = *((_DWORD *)this + 4);
    switch(v6)
    {
      case 0:
        ERR_restore_state(*((_QWORD **)this + 48));
        return 0xFFFFFFFFLL;
      case 2:
      case 3:
      case 15:
        if (*(_QWORD *)(v5 + 152))
        {
          v16 = *(_QWORD *)(v5 + 48);
          v17 = 2;
LABEL_43:
          *(_DWORD *)(v16 + 196) = v17;
          v18 = 1;
LABEL_44:
          *((_DWORD *)this + 4) = v18;
          return 0xFFFFFFFFLL;
        }
        v23[0] = 50;
        v22 = 0;
        if (v6 == 15)
        {
          v7 = bssl::ssl_open_change_cipher_spec((_QWORD *)v5, &v22, v23);
          if (v7 != 4)
            goto LABEL_11;
        }
        else
        {
          v7 = bssl::ssl_open_handshake((_QWORD *)v5, &v22, v23);
          if (v7 != 4)
            goto LABEL_11;
        }
        if (*((_DWORD *)this + 4) == 2 && (ERR_peek_error() & 0xFF000FFF) == 0x10000410)
          ERR_put_error(16, 0, 154, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 654);
LABEL_11:
        v21 = 0;
        result = bssl::ssl_handle_open_record((bssl *)v5, &v21, v7, v22, v23[0]);
        if ((int)result <= 0)
          return result;
        if (v21)
          continue;
        v9 = *(_QWORD *)(v5 + 48);
        if (*(_WORD *)(v9 + 90))
        {
LABEL_19:
          result = (*(uint64_t (**)(bssl *, bssl::SSL_HANDSHAKE *, BOOL *))(v5 + 40))(this, a2, a3);
          *((_DWORD *)this + 4) = result;
          if ((_DWORD)result == 1)
            goto LABEL_24;
        }
        else
        {
          v10 = (void **)(v9 + 80);
          if (*(_BYTE *)(v9 + 99))
            free(*v10);
          *(_BYTE *)(v9 + 99) = 0;
          *v10 = 0;
          *(_QWORD *)(v9 + 86) = 0;
          result = (*(uint64_t (**)(bssl *))(v5 + 40))(this);
          *((_DWORD *)this + 4) = result;
          if ((_DWORD)result == 1)
          {
LABEL_24:
            *(_BYTE *)a2 = 0;
            return result;
          }
        }
LABEL_20:
        if ((_DWORD)result)
          continue;
        v11 = ERR_save_state();
        v12 = *((_QWORD *)this + 48);
        *((_QWORD *)this + 48) = v11;
        if (v12)
        {
          if (*(_QWORD *)(v12 + 8))
          {
            v13 = 0;
            v14 = 0;
            do
            {
              v15 = *(_QWORD *)v12 + v13;
              free(*(void **)(v15 + 8));
              *(_QWORD *)v15 = 0;
              *(_QWORD *)(v15 + 8) = 0;
              *(_QWORD *)(v15 + 16) = 0;
              ++v14;
              v13 += 24;
            }
            while (v14 < *(_QWORD *)(v12 + 8));
          }
          free(*(void **)v12);
          free((void *)v12);
        }
        return 0xFFFFFFFFLL;
      case 4:
        result = (*(uint64_t (**)(uint64_t, bssl::SSL_HANDSHAKE *, BOOL *))(*(_QWORD *)v5 + 120))(v5, a2, a3);
        if ((int)result > 0)
          goto LABEL_19;
        return result;
      case 5:
        v16 = *(_QWORD *)(v5 + 48);
        v17 = 12;
        goto LABEL_43;
      case 6:
        v16 = *(_QWORD *)(v5 + 48);
        v17 = 17;
        goto LABEL_43;
      case 7:
        result = (*(uint64_t (**)(uint64_t, bssl::SSL_HANDSHAKE *, BOOL *))(*(_QWORD *)v5 + 120))(v5, a2, a3);
        if ((int)result < 1)
          return result;
        *(_DWORD *)(*(_QWORD *)(v5 + 48) + 196) = 18;
        v18 = 7;
        goto LABEL_44;
      case 8:
        v16 = *(_QWORD *)(v5 + 48);
        v17 = 4;
        goto LABEL_43;
      case 9:
        v16 = *(_QWORD *)(v5 + 48);
        v17 = 13;
        goto LABEL_43;
      case 10:
        v16 = *(_QWORD *)(v5 + 48);
        v17 = 11;
        goto LABEL_43;
      case 11:
        v16 = *(_QWORD *)(v5 + 48);
        v17 = 14;
        goto LABEL_43;
      case 12:
        result = 1;
        *(_BYTE *)a2 = 1;
        *((_DWORD *)this + 4) = 1;
        return result;
      case 13:
        v19 = *(_QWORD *)(v5 + 48);
        v20 = 15;
        goto LABEL_48;
      case 14:
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 280) + 1569) & 0x10) != 0)
        {
          result = 1;
          *(_BYTE *)a2 = 1;
          return result;
        }
        *((_DWORD *)this + 4) = 1;
        result = (*(uint64_t (**)(bssl *, bssl::SSL_HANDSHAKE *, BOOL *))(v5 + 40))(this, a2, a3);
        *((_DWORD *)this + 4) = result;
        if ((_DWORD)result == 1)
          goto LABEL_24;
        goto LABEL_20;
      case 16:
        v16 = *(_QWORD *)(v5 + 48);
        v17 = 16;
        goto LABEL_43;
      case 17:
        v19 = *(_QWORD *)(v5 + 48);
        v20 = 20;
LABEL_48:
        *(_DWORD *)(v19 + 196) = v20;
        return 0xFFFFFFFFLL;
      default:
        goto LABEL_19;
    }
  }
}

void bssl::internal::DeleterImpl<stack_st_CRYPTO_BUFFER,void>::Free(stack_st_CRYPTO_BUFFER*)::{lambda(void (*)(void *),void *)#1}::__invoke(int a1, unsigned int *a2)
{
  CRYPTO_BUFFER_free(a2);
}

uint64_t bssl::ssl_write_client_hello_without_extensions(uint64_t *a1, uint64_t *a2, int a3, char a4)
{
  uint64_t v8;
  __int16 v9;
  uint64_t result;
  _OWORD *v11;
  _OWORD *v12;
  __int128 v13;
  size_t v14;
  const void *v15;
  size_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t **v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  unsigned __int16 v35;
  unsigned int v36;
  BOOL v37;
  int v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  _BYTE v42[48];
  void *__dst[6];
  _BYTE *v44;

  v8 = *a1;
  v9 = *((_WORD *)a1 + 786);
  __dst[0] = 0;
  result = CBB_add_space((uint64_t)a2, __dst, 2);
  if ((_DWORD)result)
  {
    *((_BYTE *)__dst[0] + 1) = v9;
    *(_BYTE *)__dst[0] = HIBYTE(v9);
    if (a3 == 1)
    {
      v11 = a1 + 61;
      __dst[0] = 0;
      result = CBB_add_space((uint64_t)a2, __dst, 32);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      v11 = (_OWORD *)(*(_QWORD *)(v8 + 48) + 48);
      __dst[0] = 0;
      result = CBB_add_space((uint64_t)a2, __dst, 32);
      if (!(_DWORD)result)
        return result;
    }
    v12 = __dst[0];
    v13 = v11[1];
    *(_OWORD *)__dst[0] = *v11;
    v12[1] = v13;
    result = CBB_flush(a2);
    if ((_DWORD)result)
    {
      result = cbb_add_child((uint64_t)a2, (uint64_t)v42, 1u, 0);
      if ((_DWORD)result)
      {
        if ((*(_WORD *)(*(_QWORD *)(v8 + 48) + 220) & 0x20) == 0 && (a4 & 1) == 0)
        {
          v14 = *((unsigned __int8 *)a1 + 1613);
          __dst[0] = 0;
          result = CBB_add_space((uint64_t)v42, __dst, v14);
          if (!(_DWORD)result)
            return result;
          if ((_DWORD)v14)
            memcpy(__dst[0], (char *)a1 + 1581, v14);
        }
        if (**(_BYTE **)v8)
        {
          result = CBB_flush(a2);
          if (!(_DWORD)result)
            return result;
          result = cbb_add_child((uint64_t)a2, (uint64_t)v42, 1u, 0);
          if (!(_DWORD)result)
            return result;
          v15 = (const void *)a1[67];
          v16 = a1[68];
          __dst[0] = 0;
          result = CBB_add_space((uint64_t)v42, __dst, v16);
          if (!(_DWORD)result)
            return result;
          if (v16)
            memcpy(__dst[0], v15, v16);
        }
        v17 = *a1;
        v18 = *(_QWORD *)(a1[1] + 64) == 0;
        if (!CBB_flush(a2) || !cbb_add_child((uint64_t)a2, (uint64_t)__dst, 2u, 0))
          return 0;
        if ((*(_WORD *)(*(_QWORD *)(v17 + 104) + 760) & 0x20) != 0)
        {
          v19 = *((_BYTE *)a1 + 1614);
          v44 = 0;
          if (!CBB_add_space((uint64_t)__dst, &v44, 2))
            return 0;
          v44[1] = v19 & 0xF0 | 0xA;
          *v44 = v19 & 0xF0 | 0xA;
        }
        if (*((unsigned __int16 *)a1 + 15) >= 0x304u)
        {
          v20 = *(_QWORD *)(v17 + 8);
          v21 = *(_WORD *)(v20 + 237) & 0x1800;
          if (v21 != 6144 && !*(_DWORD *)(v20 + 232))
          {
            if (!CBB_add_u16((uint64_t)__dst, 4867))
              return 0;
            v20 = *(_QWORD *)(v17 + 8);
          }
          v22 = *(_DWORD *)(v20 + 232);
          if (v22 <= 1)
          {
            if (!CBB_add_u16((uint64_t)__dst, 4865))
              return 0;
            v22 = *(_DWORD *)(*(_QWORD *)(v17 + 8) + 232);
          }
          if (v22 <= 2 && !CBB_add_u16((uint64_t)__dst, 4866)
            || v21 == 6144
            && !*(_DWORD *)(*(_QWORD *)(v17 + 8) + 232)
            && !CBB_add_u16((uint64_t)__dst, 4867))
          {
            return 0;
          }
        }
        if (a3 == 1 || *((unsigned __int16 *)a1 + 14) > 0x303u)
          goto LABEL_71;
        v23 = *(_QWORD *)(v17 + 8);
        if (!v23)
          goto LABEL_69;
        v24 = *(unint64_t ***)(v23 + 24);
        if (!v24)
          v24 = *(unint64_t ***)(*(_QWORD *)(v17 + 104) + 240);
        v25 = *v24;
        if (!*v24 || (v26 = *v25) == 0)
        {
LABEL_69:
          if (*((unsigned __int16 *)a1 + 15) > 0x303u)
            goto LABEL_71;
          ERR_put_error(16, 0, 175, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 287);
          return 0;
        }
        v27 = 0;
        v28 = 0;
        v29 = 4 * v18;
        v30 = 8 * v18;
        v31 = v26 - 1;
        while (1)
        {
          if (*v25 <= v28)
            v32 = 0;
          else
            v32 = *(_QWORD *)(v25[1] + 8 * v28);
          v33 = *(_DWORD *)(v32 + 20);
          if ((v33 & v29) != 0)
            goto LABEL_46;
          v34 = *(_DWORD *)(v32 + 24);
          if ((v34 & v30) != 0)
            goto LABEL_46;
          if (v33 == 8)
          {
            if (*((unsigned __int16 *)a1 + 15) < 0x304u)
              goto LABEL_46;
            v35 = 772;
          }
          else
          {
            if (v34 == 16)
            {
              v36 = 772;
            }
            else if (*(_DWORD *)(v32 + 36) == 1)
            {
              v36 = 768;
            }
            else
            {
              v36 = 771;
            }
            if (v36 > *((unsigned __int16 *)a1 + 15))
              goto LABEL_46;
            if (v34 == 16)
              v35 = 772;
            else
              v35 = 771;
          }
          if (*((unsigned __int16 *)a1 + 14) <= v35)
          {
            v39 = v31;
            v40 = v26;
            v41 = v29;
            if (!CBB_add_u16((uint64_t)__dst, *(_WORD *)(v32 + 16)))
              return 0;
            v27 = 1;
            v31 = v39;
            v37 = v39 == v28++;
            v26 = v40;
            v29 = v41;
            if (v37)
              goto LABEL_71;
          }
          else
          {
LABEL_46:
            if (v26 == ++v28)
            {
              if ((v27 & 1) == 0)
                goto LABEL_69;
LABEL_71:
              if ((*(_BYTE *)(v17 + 133) & 4) == 0 || CBB_add_u16((uint64_t)__dst, 22016))
              {
                result = CBB_flush(a2);
                if ((_DWORD)result)
                {
                  __dst[0] = 0;
                  result = CBB_add_space((uint64_t)a2, __dst, 1);
                  if ((_DWORD)result)
                  {
                    *(_BYTE *)__dst[0] = 1;
                    __dst[0] = 0;
                    v38 = CBB_add_space((uint64_t)a2, __dst, 1);
                    result = v38 != 0;
                    if (v38)
                      *(_BYTE *)__dst[0] = 0;
                  }
                }
                return result;
              }
              return 0;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bssl::ssl_add_client_hello(bssl *this, bssl::SSL_HANDSHAKE *a2)
{
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, void **);
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  size_t v17;
  void *v19;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v3 = *(_QWORD *)this;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  v4 = *((_QWORD *)this + 191) != 0;
  v23 = 0;
  v21 = 0;
  v22 = 0;
  v5 = 0;
  if (!(*(unsigned int (**)(uint64_t, __int128 *, uint64_t *, uint64_t))(*(_QWORD *)v3 + 88))(v3, &v29, &v24, 1)|| (v6 = (2 * v4), v5 = 0, !bssl::ssl_write_client_hello_without_extensions((uint64_t *)this, &v24, v6, 0)))
  {
LABEL_19:
    v11 = v21;
    if (!v21)
      goto LABEL_23;
    goto LABEL_20;
  }
  if (v25)
    v7 = *(_QWORD *)(v26 + 8) - (v27 + v28);
  else
    v7 = v27;
  if (!bssl::ssl_add_clienthello_tlsext((uint64_t)this, (uint64_t)&v24, 0, &v23, v6, v7))
  {
LABEL_16:
    v5 = 0;
    v11 = v21;
    if (!v21)
      goto LABEL_23;
    goto LABEL_20;
  }
  if (!(*(unsigned int (**)(uint64_t, __int128 *, void **))(*(_QWORD *)v3 + 96))(v3, &v29, &v21))
  {
    v5 = 0;
    goto LABEL_19;
  }
  if (v23
    && !bssl::tls13_write_psk_binder((uint64_t *)this, (bssl *)((char *)this + 408), (const ssl_cipher_st *)v21, v22, 0))
  {
    goto LABEL_16;
  }
  v8 = *(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v3 + 104);
  v19 = v21;
  v20 = v22;
  v21 = 0;
  v22 = 0;
  v5 = v8(v3, &v19);
  if (v19)
  {
    v10 = (char *)v19 - 8;
    v9 = *((_QWORD *)v19 - 1);
    if (v9 != -8)
      bzero(v10, v9 + 8);
    free(v10);
  }
  v19 = 0;
  v20 = 0;
  v11 = v21;
  if (v21)
  {
LABEL_20:
    v13 = *(v11 - 1);
    v12 = (char *)(v11 - 1);
    v14 = v13 + 8;
    if (v13 != -8)
      bzero(v12, v14);
    free(v12);
  }
LABEL_23:
  if (BYTE8(v29) || (BYTE8(v31) & 1) == 0 || !(_QWORD)v30)
    return v5;
  v16 = *(_QWORD *)(v30 - 8);
  v15 = (void *)(v30 - 8);
  v17 = v16 + 8;
  if (v16 != -8)
    bzero(v15, v17);
  free(v15);
  return v5;
}

void bssl::ssl_done_writing_client_hello(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;

  v2 = a1 + 69;
  v3 = a1[69];
  if (v3)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v4 = (void *)(v3 - 8);
    v6 = v5 + 8;
    if (v5 != -8)
      bzero(v4, v6);
    free(v4);
  }
  *v2 = 0;
  v2[1] = 0;
  v7 = a1[65];
  if (v7)
  {
    v9 = *(_QWORD *)(v7 - 8);
    v8 = (void *)(v7 - 8);
    v10 = v9 + 8;
    if (v9 != -8)
      bzero(v8, v10);
    free(v8);
  }
  a1[65] = 0;
  a1[66] = 0;
  v11 = a1 + 75;
  v12 = a1[75];
  if (v12)
  {
    v14 = *(_QWORD *)(v12 - 8);
    v13 = (void *)(v12 - 8);
    v15 = v14 + 8;
    if (v14 != -8)
      bzero(v13, v15);
    free(v13);
  }
  *v11 = 0;
  v11[1] = 0;
}

uint64_t bssl::ssl_parse_server_hello(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  char *v11;
  int v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;

  if (*(_BYTE *)(a3 + 1) == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)(a3 + 24);
    v4 = *(_QWORD *)(a3 + 16);
    if (v4 < 2)
      goto LABEL_13;
    v5 = *(unsigned __int16 **)(a3 + 8);
    *(_WORD *)(a1 + 16) = bswap32(*v5) >> 16;
    if (v4 - 2 < 0x20)
      goto LABEL_13;
    *(_QWORD *)(a1 + 24) = v5 + 1;
    *(_QWORD *)(a1 + 32) = 32;
    if (v4 == 34)
      goto LABEL_13;
    v6 = v4 - 35;
    v7 = *((unsigned __int8 *)v5 + 34);
    v10 = v6 >= v7;
    v8 = v6 - v7;
    if (!v10)
      goto LABEL_13;
    v9 = (char *)v5 + 35;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v7;
    v10 = v7 <= 0x20 && v8 >= 2;
    if (!v10 || (v11 = &v9[v7], *(_WORD *)(a1 + 56) = bswap32(*(unsigned __int16 *)v11) >> 16, v8 == 2))
    {
LABEL_13:
      v12 = 680;
LABEL_14:
      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", v12);
      result = 0;
      *a2 = 50;
      return result;
    }
    *(_BYTE *)(a1 + 58) = v11[2];
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    if (v8 != 3)
    {
      if (v8 == 4
        || (v14 = v8 - 5, v15 = __rev16(*(unsigned __int16 *)(v11 + 3)), v14 < v15)
        || (*(_QWORD *)(a1 + 64) = v11 + 5, *(_QWORD *)(a1 + 72) = v15, v14 != v15))
      {
        v12 = 690;
        goto LABEL_14;
      }
    }
    return 1;
  }
  else
  {
    ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 668);
    result = 0;
    *a2 = 10;
  }
  return result;
}

uint64_t bssl::ssl_client_handshake(uint64_t **this, ssl_session_st *a2)
{
  __int16 *v2;
  unsigned __int8 *v4;
  const void **v5;
  int v6;
  int v7;
  uint64_t *v8;
  void (*v9)(uint64_t *, uint64_t, uint64_t);
  const ssl_session_st *v10;
  uint64_t *v11;
  unsigned int v12;
  __int16 v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v26;
  _BOOL4 is_time_valid;
  bssl *v28;
  uint64_t *v29;
  int v30;
  int v31;
  uint64_t v32;
  ssl_session_st *v33;
  ssl_session_st *v34;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  int v44;
  int v45;
  const char *v46;
  int v47;
  uint64_t finished;
  bssl *v49;
  const void **v50;
  unsigned __int8 *v51;
  ssl_session_st *v52;
  char *v53;
  ssl_session_st *v54;
  char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  size_t v59;
  _QWORD *v60;
  uint64_t *v61;
  uint64_t *v62;
  unsigned int v63;
  SSL_SESSION *v64;
  int v65;
  bssl *v66;
  bssl *v67;
  ssl_session_st *v68;
  void *v69;
  _QWORD *v70;
  BOOL v71;
  int v72;
  int v73;
  bssl *v74;
  uint64_t (*v75)(uint64_t *, ssl_session_st **);
  int v76;
  bssl *v77;
  uint64_t v78;
  uint64_t v79;
  __int16 *v80;
  const void **v81;
  unsigned __int8 *v82;
  uint64_t *v83;
  int v84;
  SSL_SESSION *v85;
  unint64_t v86;
  bssl *v87;
  int v88;
  unint64_t *v89;
  unint64_t v90;
  void *v91;
  uint64_t v92;
  size_t v93;
  unint64_t *v94;
  uint64_t v95;
  size_t v96;
  int v97;
  bssl *v98;
  ssl_session_st *v99;
  void *v100;
  int v101;
  int v102;
  unsigned __int16 *v103;
  unsigned int v104;
  __int16 v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t *v108;
  int v109;
  bssl *v110;
  uint64_t v111;
  uint64_t v112;
  ssl_session_st *v113;
  void *v114;
  char *v115;
  unint64_t v116;
  BOOL v117;
  BOOL v118;
  int v119;
  bssl *v120;
  ssl_session_st *v121;
  ssl_session_st *v122;
  void *v123;
  ssl_session_st *v124;
  char *v125;
  unsigned int ssl_version;
  bssl *v127;
  SSL_SESSION *v128;
  SSL_SESSION *v129;
  uint64_t *v130;
  uint64_t v131;
  ssl_session_st *v132;
  ssl_session_st *v133;
  unsigned int j;
  unsigned int v135;
  uint64_t *v136;
  uint64_t v137;
  size_t v138;
  ssl_session_st *v139;
  unsigned int k;
  unsigned int v141;
  uint64_t *v142;
  uint64_t v143;
  size_t v144;
  uint64_t v145;
  uint64_t v146;
  ssl_session_st *v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  _WORD *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t (*v161)(uint64_t *, _QWORD);
  int v162;
  uint64_t *p_ssl_version;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  unsigned __int8 *v168;
  int v169;
  char *v170;
  size_t v171;
  char *v172;
  char *v173;
  uint64_t *v174;
  unsigned int v175;
  unsigned __int8 *v176;
  uint64_t *v177;
  size_t v178;
  size_t v179;
  _QWORD *v180;
  _QWORD *v181;
  int v182;
  bssl *v183;
  int v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  char v188;
  uint64_t v189;
  unsigned int m;
  unsigned int v191;
  uint64_t *v192;
  uint64_t v193;
  size_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  const void *v198;
  size_t v199;
  uint64_t v200;
  unint64_t *v201;
  bssl::SSL_HANDSHAKE *v202;
  unint64_t v203;
  size_t v204;
  int v205;
  ssl_session_st *v206;
  void *v207;
  SSL_SESSION *v208;
  char *v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  uint64_t **v221;
  uint64_t (*v222)(uint64_t **);
  unsigned int v223;
  unint64_t *v224;
  int v225;
  unint64_t v226;
  void *v227;
  uint64_t v228;
  size_t v229;
  unint64_t *v230;
  uint64_t v231;
  size_t v232;
  int v233;
  bssl *v234;
  unsigned __int8 *v235;
  uint64_t v236;
  bssl::SSLTranscript *v237;
  uint64_t v238;
  EVP_MD *v239;
  unsigned int *v240;
  unsigned int v241;
  unsigned int v242;
  char v243;
  SSL_SESSION *v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t (*v248)(void);
  int v249;
  int v250;
  unint64_t *v251;
  unint64_t v252;
  BOOL v253;
  unint64_t *v254;
  int v255;
  ssl_session_st *v256;
  _QWORD *v257;
  _QWORD *v258;
  const ssl_st *v259;
  _QWORD *v260;
  char *v261;
  SSL_SESSION *v262;
  char *v263;
  unint64_t v264;
  BOOL v265;
  SSL_SESSION *v266;
  unint64_t *v267;
  uint64_t *v268;
  char *v269;
  unsigned int v270;
  unsigned int v271;
  char v272;
  ssl_credential_st *v273;
  uint64_t v274;
  void *v275;
  uint64_t v276;
  size_t v277;
  unint64_t i;
  uint64_t v279;
  _QWORD *v280;
  char master_secret;
  uint64_t *v282;
  unsigned int v283;
  unsigned int v284;
  void *v285;
  uint64_t v286;
  size_t v287;
  const ssl_session_st *v288;
  uint64_t v289;
  size_t v290;
  uint64_t v291;
  uint64_t *v292;
  int v293;
  bssl *v294;
  uint64_t v295;
  size_t v296;
  uint64_t v297;
  uint64_t *v298;
  char *v299;
  unsigned int *v300;
  uint64_t v301;
  unsigned __int16 *v302;
  uint64_t v303;
  int v304;
  int v305;
  BOOL v306;
  unsigned int v307;
  int v308;
  int v309;
  uint64_t v310;
  uint64_t v311;
  char v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  void *v316;
  uint64_t v317;
  size_t v318;
  uint64_t v319;
  void *v320;
  uint64_t v321;
  size_t v322;
  uint64_t v323;
  void *v324;
  uint64_t v325;
  size_t v326;
  int v327;
  uint64_t v328;
  __int128 v329;
  uint64_t v330;
  _DWORD *v331;
  const ssl_st *v332;
  uint64_t v333;
  _BOOL4 v334;
  uint64_t v335;
  _BOOL4 v336;
  int v337;
  int v338;
  uint64_t *v339;
  uint64_t (*v340)(uint64_t **);
  unsigned int v341;
  const unsigned __int8 *v342;
  uint64_t *v343;
  uint64_t *v344;
  size_t ssl_version_high;
  void (*v346)(void);
  unsigned int v347;
  unsigned int *p_key_arg_length;
  SSL_SESSION *v349;
  uint64_t v350;
  int v351;
  int v352;
  unsigned int v353;
  unsigned int v354;
  unint64_t v355;
  unint64_t v356;
  int v357;
  unsigned int ssl_version_low;
  size_t v359;
  int v360;
  _QWORD *v361;
  unint64_t *v362;
  _QWORD *v363;
  char *v364;
  BOOL v365;
  _QWORD *v366;
  char *v367;
  uint64_t v368;
  size_t v369;
  uint64_t *p_tlsext_tick_lifetime_hint;
  uint64_t tlsext_tick_lifetime_hint;
  size_t v372;
  SSL_SESSION *v373;
  int v374;
  unsigned int v375;
  unsigned __int16 v376;
  unsigned int v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  ssl_session_st *v381;
  uint64_t v382;
  uint64_t v383;
  unsigned __int8 v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  unint64_t v388;
  uint64_t v389;
  int8x8_t v390;
  int8x8_t *v391;
  int8x8_t *v392;
  uint64_t v393;
  int8x8_t v394;
  int8x8_t v395;
  int8x8_t v396;
  uint64_t v397;
  uint64_t v398;
  __int8 *v399;
  char *v400;
  char v401;
  char v402;
  char v403;
  bssl::SSL_HANDSHAKE *v404;
  const ssl_st *v405;
  size_t v406;
  uint64_t *v407;
  const ssl_cipher_st *v408;
  bssl *v409;
  bssl *v410;
  int v411;
  uint64_t v412;
  uint64_t v413;
  int v414;
  int v415;
  uint64_t v416;
  int v417;
  int v418;
  int v419;
  int v420;
  void (*v421)(void);
  unsigned int v423;
  SSL_SESSION *v424;
  unsigned int v425;
  char *v426;
  uint64_t v427;
  const void **v428;
  const void **v429;
  int v430;
  int v431;
  uint64_t *v432;
  uint64_t *v433;
  uint64_t *v434;
  uint64_t *v435;
  char *v436;
  bssl::SSLTranscript *v437;
  char *v438;
  int8x16_t *v439;
  uint64_t *v440;
  char *v441;
  unsigned int **v442;
  char *v443;
  bssl::SSLTranscript *v444;
  _WORD *v445;
  __int16 *v446;
  void *v447;
  size_t v448;
  void *__dst[2];
  __int128 v450;
  __int128 v451;
  __int128 v452;
  void *v453;
  uint64_t v454[6];
  SSL_SESSION *ses[2];
  __int128 v456;
  _OWORD v457[6];
  char v458;
  ssl_session_st *v459[4];
  void *__src[2];
  size_t __n;
  unsigned __int16 v462;
  char v463;
  __int128 v464[12];
  uint64_t v465;

  v439 = (int8x16_t *)((char *)this + 1581);
  v444 = (bssl::SSLTranscript *)(this + 51);
  v442 = (unsigned int **)(this + 187);
  v465 = *MEMORY[0x24BDAC8D0];
  v432 = (uint64_t *)(this + 85);
  v438 = (char *)(this + 184);
  v434 = (uint64_t *)(this + 65);
  v435 = (uint64_t *)(this + 69);
  v433 = (uint64_t *)(this + 75);
  v440 = (uint64_t *)(this + 67);
  v4 = (unsigned __int8 *)(this + 11);
  v445 = (_WORD *)this + 14;
  v446 = (__int16 *)this + 15;
  v441 = (char *)(this + 61);
  v5 = (const void **)(this + 193);
  v443 = (char *)(this + 52);
  v436 = (char *)(this + 5);
  v437 = (bssl::SSLTranscript *)(this + 56);
  while (2)
  {
    v6 = *((_DWORD *)this + 5);
    switch(v6)
    {
      case 0:
        v7 = *((_DWORD *)this + 5);
        v8 = *this;
        v9 = (void (*)(uint64_t *, uint64_t, uint64_t))(*this)[12];
        if (v9 || (v9 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v8[13] + 384)) != 0)
          v9(*this, 16, 1);
        *(_WORD *)(v8[6] + 220) &= ~0x40u;
        if (!bssl::ssl_get_version_range(this, v445, v446))
          goto LABEL_430;
        *(_QWORD *)&v450 = 0;
        if (!bssl::ssl_select_ech_config((uint64_t)this, (uint64_t)v459, 32, &v450))
          goto LABEL_430;
        v11 = *this;
        v12 = *((unsigned __int16 *)this + 15);
        if (v12 >= 0x303)
          v13 = 771;
        else
          v13 = *((_WORD *)this + 15);
        if (v12 <= 0x302)
          v14 = -257;
        else
          v14 = -259;
        if (*(_BYTE *)**this)
          v15 = v14;
        else
          v15 = v13;
        *((_WORD *)this + 786) = v15;
        v16 = v8[11];
        if (!v16)
          goto LABEL_575;
        if ((*(_BYTE *)(v16 + 424) & 0x10) != 0)
          goto LABEL_564;
        v17 = *(unsigned __int16 *)(v16 + 4);
        v18 = *(_BYTE *)*v11 == 0;
        if (*(_BYTE *)*v11)
          v19 = 4;
        else
          v19 = 8;
        v20 = (unsigned __int16 *)&bssl::kDTLSVersions;
        if (v18)
          v20 = (unsigned __int16 *)&bssl::kTLSVersions;
        v21 = v19 - 2;
        do
        {
          v23 = *v20++;
          v22 = v23;
          v24 = v23 == v17 || v21 == 0;
          v21 -= 2;
        }
        while (!v24);
        if (v22 != v17)
          goto LABEL_563;
        if (v17 - 769 < 4)
          goto LABEL_34;
        if (v17 == 65277)
        {
          v17 = 771;
        }
        else
        {
          if (v17 != 65279)
            goto LABEL_563;
          v17 = 770;
        }
LABEL_34:
        if ((unsigned __int16)*v445 > v17 || v17 > v12)
          goto LABEL_563;
        if (this[191])
        {
          v26 = bssl::ssl_session_protocol_version((bssl *)v8[11], a2);
          v16 = v8[11];
          if (v26 < 0x304)
            goto LABEL_563;
        }
        if ((*(_BYTE *)(v16 + 424) & 4) != 0 || !*(_BYTE *)(v16 + 59) && !*(_QWORD *)(v16 + 240))
          goto LABEL_564;
        is_time_valid = bssl::ssl_session_is_time_valid((bssl *)v8, (const ssl_st *)v16, v10);
        v16 = v8[11];
        if (!is_time_valid)
        {
LABEL_563:
          if (!v16)
            goto LABEL_575;
          goto LABEL_564;
        }
        if ((v8[19] == 0) != (*(_BYTE *)(v16 + 424) & 0x20) >> 5
          && (*(_WORD *)(v8[6] + 220) & 0x20) == 0)
        {
          goto LABEL_575;
        }
LABEL_564:
        v8[11] = 0;
        v283 = atomic_load((unsigned int *)v16);
        while (2)
        {
          if (v283 == -1)
            goto LABEL_575;
          if (!v283)
            goto LABEL_886;
          v284 = __ldaxr((unsigned int *)v16);
          if (v284 != v283)
          {
            __clrex();
LABEL_566:
            v283 = v284;
            continue;
          }
          break;
        }
        if (__stlxr(v283 - 1, (unsigned int *)v16))
          goto LABEL_566;
        if (v283 == 1)
        {
          ssl_session_st::~ssl_session_st((ssl_session_st *)v16);
          v286 = *(_QWORD *)(v16 - 8);
          v285 = (void *)(v16 - 8);
          v287 = v286 + 8;
          if (v286 != -8)
            bzero(v285, v287);
          free(v285);
        }
LABEL_575:
        RAND_bytes_with_additional_data(v8[6] + 48, 0x20uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
        if (this[191])
          RAND_bytes_with_additional_data((uint64_t)v441, 0x20uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
        if (v8[19])
          goto LABEL_585;
        v289 = v8[11];
        if (!v289)
          goto LABEL_583;
        v290 = *(unsigned __int8 *)(v289 + 59);
        v291 = *(_QWORD *)(v289 + 240);
        if (!*(_BYTE *)(v289 + 59))
        {
          if (v291)
            goto LABEL_584;
LABEL_583:
          if ((unsigned __int16)*v446 >= 0x304u)
            goto LABEL_584;
          goto LABEL_585;
        }
        if (!v291)
        {
          *((_BYTE *)this + 1613) = v290;
          memcpy(v439, (const void *)(v289 + 60), v290);
          goto LABEL_585;
        }
LABEL_584:
        *((_BYTE *)this + 1613) = 32;
        RAND_bytes_with_additional_data((uint64_t)v439, 0x20uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
LABEL_585:
        v292 = *this;
        if ((*((_BYTE *)*this + 164) & 4) == 0)
        {
          v293 = 1;
          goto LABEL_598;
        }
        if ((unsigned __int16)*v446 < 0x304u)
        {
          v293 = 3;
          goto LABEL_598;
        }
        v294 = (bssl *)v292[11];
        if (!v294)
        {
          v293 = 5;
          goto LABEL_598;
        }
        if (bssl::ssl_session_protocol_version(v294, v288) < 0x304
          || (v295 = v292[11], !*(_DWORD *)(v295 + 372)))
        {
          v293 = 7;
          goto LABEL_598;
        }
        v296 = *(_QWORD *)(v295 + 384);
        if (!v296)
          goto LABEL_595;
        if (!bssl::ssl_is_alpn_protocol_allowed(this, *(void **)(v295 + 376), v296))
        {
          v293 = 9;
          goto LABEL_598;
        }
        v297 = v292[11];
        if ((*(_BYTE *)(v297 + 424) & 0x40) == 0
          || (ses[0] = 0,
              ses[1] = 0,
              bssl::ssl_get_local_application_settings((uint64_t)this, ses, *(void **)(v297 + 376), *(_QWORD *)(v297 + 384)))&& (v373 = *(SSL_SESSION **)(v297 + 400), ses[1] == v373)&& !memcmp(ses[0], *(const void **)(v297 + 392), (size_t)v373))
        {
LABEL_595:
          *((_DWORD *)this + 392) |= 0x800u;
        }
        else
        {
          v293 = 14;
LABEL_598:
          *(_DWORD *)(v8[6] + 256) = v293;
        }
        finished = 0;
        v6 = v7;
        if (bssl::ssl_setup_key_shares((bssl *)this, 0))
        {
          if (bssl::ssl_setup_extension_permutation((bssl *)this, (bssl::SSL_HANDSHAKE *)a2)
            && bssl::ssl_encrypt_client_hello((int8x16_t *)this, v459, v450)
            && bssl::ssl_add_client_hello((bssl *)this, (bssl::SSL_HANDSHAKE *)a2))
          {
            *((_DWORD *)this + 5) = 1;
            finished = 4;
            goto LABEL_723;
          }
LABEL_604:
          finished = 0;
        }
LABEL_723:
        if (*((_DWORD *)this + 5) != v6)
        {
          v346 = (void (*)(void))(*this)[12];
          if (v346 || (v346 = *(void (**)(void))((*this)[13] + 384)) != 0)
            v346();
        }
        if ((_DWORD)finished == 1)
          continue;
        return finished;
      case 1:
        v39 = *this;
        v40 = **this;
        if (*(_BYTE *)v40)
        {
          v41 = 3;
          goto LABEL_263;
        }
        if ((*((_BYTE *)this + 1569) & 8) == 0)
        {
          v41 = 4;
          goto LABEL_263;
        }
        v195 = *(_QWORD *)(v39[6] + 272);
        if (*(_QWORD *)v195)
        {
          if (!(*(unsigned int (**)(uint64_t *, ssl_session_st *))(v40 + 112))(*this, a2))
            goto LABEL_604;
        }
        else
        {
          *(_WORD *)(v195 + 606) = *(_WORD *)(v39[11] + 4);
          if (!(*(unsigned int (**)(uint64_t *, ssl_session_st *))(v40 + 112))(v39, a2))
            goto LABEL_604;
        }
        if (!bssl::tls13_init_early_key_schedule((unsigned __int8 *)this, v39[11]))
          goto LABEL_604;
        v7 = v6;
        v235 = v4;
        v236 = (uint64_t)*this;
        v237 = v444;
        if ((*((_BYTE *)*this + 164) & 1) == 0)
        {
          if (this[191])
            v237 = v437;
          else
            v237 = v444;
        }
        v238 = (uint64_t)this[4];
        ses[0] = 0;
        if (!bssl::SSLTranscript::GetHash(v237, (unsigned __int8 *)v459, (unint64_t *)ses))
        {
          finished = 0;
          v4 = v235;
          goto LABEL_722;
        }
        v239 = (EVP_MD *)*((_QWORD *)v237 + 1);
        v4 = v235;
        if (CRYPTO_tls13_hkdf_expand_label((uint64_t)v235, v238, v239, v436, (int)this[4], "c e traffic", 0xBuLL, v459, (size_t)ses[0]) != 1)goto LABEL_706;
        if (!bssl::ssl_log_secret(v236, "CLIENT_EARLY_TRAFFIC_SECRET", v235, (uint64_t)this[4]))
          goto LABEL_430;
        v240 = (unsigned int *)v39[11];
        v6 = v7;
        if (!v240)
          goto LABEL_427;
        v241 = atomic_load(v240);
        if (v241 == -1)
          goto LABEL_427;
        while (1)
        {
          v242 = __ldaxr(v240);
          if (v242 == v241)
          {
            if (!__stlxr(v241 + 1, v240))
            {
              v243 = 1;
              goto LABEL_425;
            }
          }
          else
          {
            __clrex();
          }
          v243 = 0;
LABEL_425:
          if ((v243 & 1) == 0)
          {
            v241 = v242;
            if (v242 != -1)
              continue;
          }
LABEL_427:
          v244 = (SSL_SESSION *)this[189];
          this[189] = (uint64_t *)v240;
          if (v244)
            SSL_SESSION_free(v244);
          v41 = 2;
          goto LABEL_263;
        }
      case 2:
        v42 = (uint64_t)*this;
        if (!*(_BYTE *)((*this)[13] + 488))
          goto LABEL_395;
        LOBYTE(v459[0]) = 46;
        v43 = (uint64_t (*)(void))this[1][6];
        if (!v43 || (v44 = v43(), v44 == 1))
        {
          v45 = 125;
          v46 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl"
                "/src/ssl/handshake.cc";
          v47 = 435;
          goto LABEL_69;
        }
        if (v44 == 2)
        {
          finished = 16;
          *((_DWORD *)this + 5) = 2;
          goto LABEL_723;
        }
        v42 = (uint64_t)*this;
LABEL_395:
        if (!bssl::tls13_set_traffic_key(v42, 1, 1u, (uint64_t)this[189], v4, (size_t)this[4]))
          goto LABEL_604;
        *((_DWORD *)this + 392) |= 0x2400u;
        finished = 12;
        *((_DWORD *)this + 5) = 4;
        goto LABEL_723;
      case 3:
        v7 = *((_DWORD *)this + 5);
        v49 = (bssl *)*this;
        if (!(*(unsigned int (**)(uint64_t *, ssl_session_st **))(**this + 24))(*this, v459))
          goto LABEL_227;
        if (BYTE1(v459[0]) != 3)
        {
          *((_DWORD *)this + 5) = 4;
          goto LABEL_626;
        }
        v50 = v5;
        v51 = v4;
        v52 = v459[2];
        v53 = (char *)&v459[2][-1].tlsext_tick_lifetime_hint + 5;
        if (v459[2] >= (ssl_session_st *)3 && (v54 = v459[1], v55 = (char *)BYTE2(v459[1]->ssl_version), v53 == v55))
        {
          v56 = *v440;
          if (*v440)
          {
            v58 = *(_QWORD *)(v56 - 8);
            v57 = (void *)(v56 - 8);
            v59 = v58 + 8;
            if (v58 != -8)
              bzero(v57, v59);
            free(v57);
          }
          *v440 = 0;
          v440[1] = 0;
          if (!(_DWORD)v55)
          {
LABEL_81:
            (*(void (**)(bssl *))(*(_QWORD *)v49 + 32))(v49);
            if (bssl::SSLTranscript::Init(v444))
            {
              v4 = v51;
              v6 = v7;
              if (bssl::ssl_add_client_hello((bssl *)this, (bssl::SSL_HANDSHAKE *)a2))
              {
                finished = 4;
                *((_DWORD *)this + 5) = 4;
              }
              else
              {
                finished = 0;
              }
              v5 = v50;
              v2 = &jpt_2089978E4;
              goto LABEL_723;
            }
LABEL_322:
            finished = 0;
            v4 = v51;
            v5 = v50;
            v2 = &jpt_2089978E4;
            goto LABEL_722;
          }
          v60 = malloc_type_malloc((size_t)&v52->key_arg_length + 1, 0x30772F57uLL);
          if (v60)
          {
            *v60 = v53;
            v61 = v60 + 1;
            this[67] = v61;
            this[68] = (uint64_t *)v53;
            memmove(v61, (char *)&v54->ssl_version + 3, (size_t)v53);
            goto LABEL_81;
          }
          ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
          *v440 = 0;
          v183 = v49;
          v184 = 80;
        }
        else
        {
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 640);
          v183 = v49;
          v184 = 50;
        }
        bssl::ssl_send_alert(v183, (ssl_st *)2, v184);
        goto LABEL_322;
      case 4:
        v62 = *this;
        if (!(*(unsigned int (**)(uint64_t *, __int128 *))(**this + 24))(*this, &v450))
        {
          finished = 2;
          goto LABEL_723;
        }
        LOWORD(v459[2]) = 0;
        v462 = 0;
        v463 = 0;
        LOBYTE(v447) = 50;
        if (!bssl::ssl_parse_server_hello((uint64_t)v459, &v447, (uint64_t)&v450))
          goto LABEL_92;
        v63 = LOWORD(v459[2]);
        if (LOWORD(v459[2]) != 771)
          goto LABEL_628;
        LODWORD(ses[0]) = 65579;
        ses[1] = 0;
        *(_QWORD *)&v456 = 0;
        *(_OWORD *)__dst = v464[0];
        v454[0] = (uint64_t)ses;
        if (!bssl::ssl_parse_extensions((unsigned __int16 **)__dst, &v447, v454, 1, 1))
          goto LABEL_92;
        if (BYTE3(ses[0]))
        {
          if ((unint64_t)v456 < 2
            || (v64 = ses[1], ses[1] = (SSL_SESSION *)((char *)ses[1] + 2), *(_QWORD *)&v456 = v456 - 2, (_QWORD)v456))
          {
            LOBYTE(v447) = 50;
LABEL_92:
            v65 = v447;
            v66 = (bssl *)v62;
            goto LABEL_126;
          }
          v63 = __rev16(LOWORD(v64->ssl_version));
        }
        else
        {
          v63 = LOWORD(v459[2]);
        }
LABEL_628:
        if (*(_BYTE *)**this)
          v301 = 4;
        else
          v301 = 8;
        v302 = (unsigned __int16 *)&bssl::kDTLSVersions;
        if (!*(_BYTE *)**this)
          v302 = (unsigned __int16 *)&bssl::kTLSVersions;
        v303 = v301 - 2;
        do
        {
          v305 = *v302++;
          v304 = v305;
          v306 = v305 == v63 || v303 == 0;
          v303 -= 2;
        }
        while (!v306);
        if (v304 != v63)
          goto LABEL_647;
        v307 = v63;
        if (v63 - 769 < 4)
          goto LABEL_645;
        if (v63 == 65277)
        {
          v307 = 771;
        }
        else
        {
          if (v63 != 65279)
          {
LABEL_647:
            v308 = 240;
            v309 = 714;
LABEL_648:
            ERR_put_error(16, 0, v308, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", v309);
            v66 = (bssl *)v62;
            v65 = 70;
LABEL_126:
            bssl::ssl_send_alert(v66, (ssl_st *)2, v65);
            finished = 0;
            goto LABEL_723;
          }
          v307 = 770;
        }
LABEL_645:
        if ((unsigned __int16)*v445 > v307 || v307 > (unsigned __int16)*v446)
          goto LABEL_647;
        v310 = v62[6];
        if ((*(_WORD *)(v310 + 220) & 2) != 0)
        {
          if (v63 != *((unsigned __int16 *)v62 + 8))
          {
            v308 = 246;
            v309 = 727;
            goto LABEL_648;
          }
        }
        else
        {
          *((_WORD *)v62 + 8) = v63;
          *(_WORD *)(v310 + 220) |= 2u;
          v311 = *(_QWORD *)(v62[6] + 272);
          v63 = *((unsigned __int16 *)v62 + 8);
          if (!*(_QWORD *)v311)
            *(_WORD *)(v311 + 606) = v63;
        }
        if (v63 == 772)
        {
          v41 = 5;
LABEL_263:
          *((_DWORD *)this + 5) = v41;
          finished = 1;
          goto LABEL_723;
        }
        v313 = this[49];
        this[49] = 0;
        if (v313)
        {
          (*(void (**)(uint64_t *))*v313)(v313);
          OPENSSL_free(v313);
        }
        v314 = this[50];
        this[50] = 0;
        if (v314)
        {
          (*(void (**)(uint64_t *))*v314)(v314);
          OPENSSL_free(v314);
        }
        v315 = *v435;
        if (*v435)
        {
          v317 = *(_QWORD *)(v315 - 8);
          v316 = (void *)(v315 - 8);
          v318 = v317 + 8;
          if (v317 != -8)
            bzero(v316, v318);
          free(v316);
        }
        *v435 = 0;
        v435[1] = 0;
        v319 = *v434;
        if (*v434)
        {
          v321 = *(_QWORD *)(v319 - 8);
          v320 = (void *)(v319 - 8);
          v322 = v321 + 8;
          if (v321 != -8)
            bzero(v320, v322);
          free(v320);
        }
        *v434 = 0;
        v434[1] = 0;
        v323 = *v433;
        if (*v433)
        {
          v325 = *(_QWORD *)(v323 - 8);
          v324 = (void *)(v323 - 8);
          v326 = v325 + 8;
          if (v325 != -8)
            bzero(v324, v326);
          free(v324);
        }
        *v433 = 0;
        v433[1] = 0;
        v327 = *((_DWORD *)this + 392);
        if ((v327 & 0x800) != 0)
        {
          *((_DWORD *)this + 392) = v327 & 0xFFFFDFFF;
          v308 = 278;
          v309 = 752;
          goto LABEL_648;
        }
        v328 = v62[6];
        if (this[191])
          *(_DWORD *)(v328 + 216) = 2;
        v329 = *(_OWORD *)&v459[3]->master_key_length;
        *(_OWORD *)(v328 + 16) = *(_OWORD *)v459[3];
        *(_OWORD *)(v328 + 32) = v329;
        v330 = v62[6];
        if ((*(_WORD *)(v330 + 220) & 0x20) == 0
          && bssl::ssl_supports_version((uint64_t)this, 0x304u)
          && (*(_QWORD *)(v330 + 40) == *(_QWORD *)"DOWNGRD"
           || *(_QWORD *)(v330 + 40) == 0x14452474E574F44
           || *(_QWORD *)(v330 + 40) == 0xFF1047C2A8B4BFEDLL))
        {
          ERR_put_error(16, 0, 297, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 780);
          bssl::ssl_send_alert((bssl *)v62, (ssl_st *)2, 47);
          finished = 0;
          goto LABEL_723;
        }
        v431 = v6;
        LODWORD(v456) = v462 | 0x3000000;
        v331 = bsearch(ses, bssl::kCiphers, 0x18uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
        v333 = this[1][8];
        v334 = v333 == 0;
        if (!v331)
          goto LABEL_687;
        v335 = (uint64_t)v331;
        v336 = v333 == 0;
        v337 = v331[5];
        if ((v337 & (4 * v336)) != 0)
          goto LABEL_687;
        v338 = v331[6];
        if ((v338 & (8 * v334)) != 0)
          goto LABEL_687;
        if (v337 == 8)
        {
          v375 = bssl::ssl_protocol_version((bssl *)v62, v332);
          if (v375 < 0x304)
            goto LABEL_687;
          v376 = 772;
        }
        else
        {
          if (v338 == 16)
          {
            v377 = 772;
          }
          else if (v331[9] == 1)
          {
            v377 = 768;
          }
          else
          {
            v377 = 771;
          }
          v375 = bssl::ssl_protocol_version((bssl *)v62, v332);
          v2 = &jpt_2089978E4;
          if (v377 > v375)
            goto LABEL_687;
          if (v338 == 16)
            v376 = 772;
          else
            v376 = 771;
        }
        if (v375 <= v376)
        {
          v378 = v62[1];
          if (v378)
          {
            v379 = *(uint64_t **)(v378 + 24);
            if (!v379)
              v379 = *(uint64_t **)(v62[13] + 240);
            v380 = *v379;
          }
          else
          {
            v380 = 0;
          }
          v2 = &jpt_2089978E4;
          if (OPENSSL_sk_find(v380, 0, v335, (uint64_t (*)(_QWORD, uint64_t, _QWORD))sk_SSL_CIPHER_call_cmp_func))
          {
            this[192] = (uint64_t *)v335;
            v382 = *((unsigned __int8 *)this + 1613);
            if (!*((_BYTE *)this + 1613) || __n != v382)
              goto LABEL_840;
            if (v382 < 8)
            {
              v383 = 0;
              v384 = 0;
              goto LABEL_837;
            }
            if (v382 >= 0x20)
            {
              v383 = v382 & 0xE0;
              v385 = veorq_s8(*v439, *(int8x16_t *)__src[1]);
              v386 = veorq_s8(v439[1], *((int8x16_t *)__src[1] + 1));
              if (v383 != 32)
              {
                v385 = vorrq_s8(veorq_s8(v439[2], *((int8x16_t *)__src[1] + 2)), v385);
                v386 = vorrq_s8(veorq_s8(v439[3], *((int8x16_t *)__src[1] + 3)), v386);
                if (v383 != 64)
                {
                  v385 = vorrq_s8(veorq_s8(v439[4], *((int8x16_t *)__src[1] + 4)), v385);
                  v386 = vorrq_s8(veorq_s8(v439[5], *((int8x16_t *)__src[1] + 5)), v386);
                  if (v383 != 96)
                  {
                    v385 = vorrq_s8(veorq_s8(v439[6], *((int8x16_t *)__src[1] + 6)), v385);
                    v386 = vorrq_s8(veorq_s8(v439[7], *((int8x16_t *)__src[1] + 7)), v386);
                    if (v383 != 128)
                    {
                      v385 = vorrq_s8(veorq_s8(v439[8], *((int8x16_t *)__src[1] + 8)), v385);
                      v386 = vorrq_s8(veorq_s8(v439[9], *((int8x16_t *)__src[1] + 9)), v386);
                      if (v383 != 160)
                      {
                        v385 = vorrq_s8(veorq_s8(v439[10], *((int8x16_t *)__src[1] + 10)), v385);
                        v386 = vorrq_s8(veorq_s8(v439[11], *((int8x16_t *)__src[1] + 11)), v386);
                        if (v383 != 192)
                        {
                          v385 = vorrq_s8(veorq_s8(v439[12], *((int8x16_t *)__src[1] + 12)), v385);
                          v386 = vorrq_s8(veorq_s8(v439[13], *((int8x16_t *)__src[1] + 13)), v386);
                        }
                      }
                    }
                  }
                }
              }
              v387 = vorrq_s8(v386, v385);
              *(int8x8_t *)v387.i8 = vorr_s8(*(int8x8_t *)v387.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v387, v387, 8uLL));
              v388 = v387.i64[0] | HIDWORD(v387.i64[0]) | ((unint64_t)(v387.i64[0] | HIDWORD(v387.i64[0])) >> 16);
              v384 = v388 | BYTE1(v388);
              if (v383 == v382)
                goto LABEL_839;
              if ((v382 & 0x18) == 0)
              {
LABEL_837:
                v398 = v382 - v383;
                v399 = &v439->i8[v383];
                v400 = (char *)__src[1] + v383;
                do
                {
                  v402 = *v400++;
                  v401 = v402;
                  v403 = *v399++;
                  v384 |= v403 ^ v401;
                  --v398;
                }
                while (v398);
                goto LABEL_839;
              }
            }
            else
            {
              v384 = 0;
              v383 = 0;
            }
            v389 = v383;
            v383 = v382 & 0xF8;
            v390 = (int8x8_t)v384;
            v391 = (int8x8_t *)((char *)__src[1] + v389);
            v392 = (int8x8_t *)&v439->i8[v389];
            v393 = v389 - v383;
            do
            {
              v394 = *v391++;
              v395 = v394;
              v396 = *v392++;
              v390 = vorr_s8(veor_s8(v396, v395), v390);
              v393 += 8;
            }
            while (v393);
            v397 = *(_QWORD *)&v390 | HIDWORD(*(_QWORD *)&v390) | ((*(_QWORD *)&v390 | HIDWORD(*(_QWORD *)&v390)) >> 16);
            v384 = v397 | BYTE1(v397);
            if (v383 != v382)
              goto LABEL_837;
LABEL_839:
            if (!v384)
            {
              v412 = v62[11];
              if (!v412 || (v413 = v62[6], *(_DWORD *)(v413 + 216) == 2))
              {
                v414 = 286;
                v415 = 814;
LABEL_870:
                ERR_put_error(16, 0, v414, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", v415);
                v410 = (bssl *)v62;
                v411 = 47;
                goto LABEL_849;
              }
              if (*(unsigned __int16 *)(v412 + 4) != *((unsigned __int16 *)v62 + 8))
              {
                v414 = 188;
                v415 = 819;
                goto LABEL_870;
              }
              if (*(_QWORD *)(v412 + 200) != v335)
              {
                v414 = 187;
                v415 = 824;
                goto LABEL_870;
              }
              if (!bssl::ssl_session_is_context_valid((uint64_t)this, v412))
              {
                v414 = 101;
                v415 = 831;
                goto LABEL_870;
              }
              *(_WORD *)(v413 + 220) |= 0x40u;
              v408 = (const ssl_cipher_st *)this[192];
              goto LABEL_844;
            }
LABEL_840:
            bssl::ssl_set_session((bssl *)v62, 0, v381);
            if ((bssl::ssl_get_new_session((bssl *)this, v404) & 1) == 0)
              goto LABEL_848;
            v406 = __n;
            v407 = this[188];
            *((_BYTE *)v407 + 59) = __n;
            if (v406)
            {
              memcpy((char *)v407 + 60, __src[1], v406);
              v407 = this[188];
            }
            v408 = (const ssl_cipher_st *)this[192];
            v407[25] = (uint64_t)v408;
LABEL_844:
            v409 = (bssl *)bssl::ssl_protocol_version((bssl *)v62, v405);
            if (bssl::SSLTranscript::InitHash((uint64_t **)v444, v409, v408)
              && (bssl::ssl_hash_message((uint64_t)this, (uint64_t)&v450) & 1) != 0)
            {
              if (v62[11] || (this[192][3] & 7) == 0)
                bssl::SSLTranscript::FreeBuffer(v444);
              if (v463)
              {
                v414 = 238;
                v415 = 878;
                goto LABEL_870;
              }
              if ((bssl::ssl_parse_serverhello_tlsext((uint64_t)this, v464) & 1) == 0)
              {
                ERR_put_error(16, 0, 190, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 884);
                goto LABEL_850;
              }
              v416 = v62[11];
              if (!v416 || (v417 = *(_BYTE *)(v416 + 424) & 1, (HIWORD(*((_DWORD *)this + 392)) & 1) == v417))
              {
                (*(void (**)(uint64_t *))(*v62 + 32))(v62);
                if (v62[11])
                {
                  if (*(_BYTE *)(v62[13] + 488) && (this[192][3] & 7) != 0)
                    v418 = 9;
                  else
                    v418 = 18;
                }
                else
                {
                  v418 = 6;
                }
                *((_DWORD *)this + 5) = v418;
                finished = 1;
                goto LABEL_851;
              }
              if (v417)
              {
                v419 = 204;
                v420 = 891;
              }
              else
              {
                v419 = 205;
                v420 = 893;
              }
              ERR_put_error(16, 0, v419, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", v420);
              v410 = (bssl *)v62;
              v411 = 40;
LABEL_849:
              bssl::ssl_send_alert(v410, (ssl_st *)2, v411);
LABEL_850:
              finished = 0;
LABEL_851:
              v2 = &jpt_2089978E4;
              goto LABEL_688;
            }
LABEL_848:
            v410 = (bssl *)v62;
            v411 = 80;
            goto LABEL_849;
          }
        }
LABEL_687:
        ERR_put_error(16, 0, 242, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 796);
        bssl::ssl_send_alert((bssl *)v62, (ssl_st *)2, 47);
        finished = 0;
LABEL_688:
        v6 = v431;
        goto LABEL_723;
      case 5:
        finished = bssl::tls13_client_handshake((bssl *)this, (ssl_st *)a2);
        if ((_DWORD)finished == 1)
          *((_DWORD *)this + 5) = 21;
        goto LABEL_723;
      case 6:
        if ((this[192][3] & 7) == 0)
        {
          v41 = 7;
          goto LABEL_263;
        }
        v7 = *((_DWORD *)this + 5);
        v67 = (bssl *)*this;
        if (!(*(unsigned int (**)(uint64_t *, ssl_session_st **))(**this + 24))(*this, v459))
          goto LABEL_227;
        if (BYTE1(v459[0]) != 11)
          goto LABEL_382;
        if (LOBYTE(v459[0]))
          goto LABEL_103;
        v68 = v459[3];
        v69 = __src[0];
        if (*(_QWORD *)v444 && !BUF_MEM_append(*(unint64_t **)v444, v459[3], (size_t)__src[0]))
          goto LABEL_430;
        if (*(_QWORD *)v443)
          (*(void (**)(char *, ssl_session_st *, void *))(*(_QWORD *)v443 + 24))(v443, v68, v69);
LABEL_103:
        *(_OWORD *)ses = *(_OWORD *)&v459[1];
        LOBYTE(v450) = 50;
        if ((bssl::ssl_parse_cert_chain(&v450, (unint64_t **)this[188] + 17, v442, 0, (unint64_t *)ses, *(uint64_t **)(*((_QWORD *)v67 + 13) + 704)) & 1) == 0)
        {
          v233 = v450;
          v234 = v67;
          goto LABEL_433;
        }
        v70 = (_QWORD *)this[188][17];
        if (!v70
          || (*v70 ? (v71 = ses[1] == 0) : (v71 = 0),
              !v71 || ((*(uint64_t (**)(void))(*(_QWORD *)(*((_QWORD *)v67 + 13) + 16) + 48))() & 1) == 0))
        {
          v119 = 954;
          goto LABEL_432;
        }
        v312 = bssl::ssl_check_leaf_certificate(this, (uint64_t)this[187]);
        if ((v312 & 1) != 0)
        {
          (*(void (**)(bssl *))(*(_QWORD *)v67 + 32))(v67);
          v97 = 7;
          goto LABEL_347;
        }
        v234 = v67;
        v233 = 47;
        goto LABEL_433;
      case 7:
        if (((_BYTE)this[196] & 0x40) == 0)
        {
          *((_DWORD *)this + 5) = 8;
          finished = 1;
          goto LABEL_723;
        }
        v7 = *((_DWORD *)this + 5);
        v67 = (bssl *)*this;
        if (!(*(unsigned int (**)(uint64_t *, ssl_session_st **))(**this + 24))(*this, v459))
          goto LABEL_227;
        if (BYTE1(v459[0]) != 22)
          goto LABEL_625;
        if (LOBYTE(v459[0]))
          goto LABEL_196;
        v113 = v459[3];
        v114 = __src[0];
        if (*(_QWORD *)v444 && !BUF_MEM_append(*(unint64_t **)v444, v459[3], (size_t)__src[0]))
          goto LABEL_430;
        if (*(_QWORD *)v443)
          (*(void (**)(char *, ssl_session_st *, void *))(*(_QWORD *)v443 + 24))(v443, v113, v114);
LABEL_196:
        if (v459[2]
          && (v115 = (char *)&v459[2][-1].tlsext_tick_lifetime_hint + 4, v459[2] >= (ssl_session_st *)4)
          && v459[1]->ssl_version == 1
          && ((v116 = ((unint64_t)BYTE1(v459[1]->ssl_version) << 16) | ((unint64_t)BYTE2(v459[1]->ssl_version) << 8) | HIBYTE(v459[1]->ssl_version),
               (unint64_t)v115 >= v116)
            ? (v117 = v116 == 0)
            : (v117 = 1),
              !v117 ? (v118 = v115 == (char *)v116) : (v118 = 0),
              v118))
        {
          v298 = this[188];
          v299 = crypto_buffer_new(&v459[1]->key_arg_length, (size_t)v115, 0, *(uint64_t **)(*((_QWORD *)v67 + 13) + 704));
          v300 = (unsigned int *)v298[32];
          v298[32] = (uint64_t)v299;
          if (v300)
            CRYPTO_BUFFER_free(v300);
          if (this[188][32])
          {
            (*(void (**)(bssl *))(*(_QWORD *)v67 + 32))(v67);
LABEL_625:
            *((_DWORD *)this + 5) = 8;
LABEL_626:
            finished = 1;
            goto LABEL_722;
          }
          v234 = v67;
          v233 = 80;
        }
        else
        {
          v119 = 1003;
LABEL_432:
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", v119);
          v234 = v67;
          v233 = 50;
        }
LABEL_433:
        bssl::ssl_send_alert(v234, (ssl_st *)2, v233);
        finished = 0;
        goto LABEL_722;
      case 8:
        if ((this[192][3] & 7) != 0)
        {
          v72 = bssl::ssl_verify_peer_cert((bssl *)this, (bssl::SSL_HANDSHAKE *)a2);
          if (v72 == 1)
            goto LABEL_604;
          if (v72 == 2)
            v73 = 8;
          else
            v73 = 10;
          if (v72 == 2)
            finished = 16;
          else
            finished = 1;
          *((_DWORD *)this + 5) = v73;
        }
        else
        {
          finished = 1;
          *((_DWORD *)this + 5) = 10;
        }
        goto LABEL_723;
      case 9:
        LOBYTE(v459[0]) = 46;
        v74 = (bssl *)*this;
        v75 = (uint64_t (*)(uint64_t *, ssl_session_st **))this[1][6];
        if (!v75 || (v76 = v75(*this, v459), v76 == 1))
        {
          ERR_put_error(16, 0, 125, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 435);
          v65 = LOBYTE(v459[0]);
          v66 = v74;
          goto LABEL_126;
        }
        if (v76 == 2)
          v152 = 9;
        else
          v152 = 18;
        if (v76 == 2)
          finished = 16;
        else
          finished = 1;
        *((_DWORD *)this + 5) = v152;
        goto LABEL_723;
      case 10:
        v77 = (bssl *)*this;
        if (!(*(unsigned int (**)(uint64_t *, SSL_SESSION **))(**this + 24))(*this, ses))
          goto LABEL_185;
        if (BYTE1(ses[0]) != 12)
        {
          if ((*((_BYTE *)this[192] + 20) & 2) == 0)
          {
            v101 = 11;
            goto LABEL_477;
          }
          ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1068);
          v66 = v77;
          v65 = 10;
          goto LABEL_126;
        }
        v7 = v6;
        if (!LOBYTE(ses[0]))
        {
          v78 = *((_QWORD *)&v456 + 1);
          v79 = *(_QWORD *)&v457[0];
          if (*(_QWORD *)v444
            && !BUF_MEM_append(*(unint64_t **)v444, *((void **)&v456 + 1), *(size_t *)&v457[0]))
          {
            goto LABEL_430;
          }
          if (*(_QWORD *)v443)
            (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v443 + 24))(v443, v78, v79);
        }
        v80 = v2;
        v81 = v5;
        v82 = v4;
        v83 = this[192];
        v84 = *((_DWORD *)v83 + 5);
        v85 = ses[1];
        v86 = v456;
        if ((v83[3] & 8) == 0)
        {
          if ((v84 & 2) == 0)
            goto LABEL_136;
LABEL_712:
          if (v86)
          {
            if (LOBYTE(v85->ssl_version) == 3 && v86 >= 4)
            {
              ssl_version_high = HIBYTE(v85->ssl_version);
              v265 = v86 - 4 >= ssl_version_high;
              v86 = v86 - 4 - ssl_version_high;
              if (v265)
              {
                v347 = bswap32(*(unsigned __int16 *)((char *)&v85->ssl_version + 1)) >> 16;
                if (!bssl::tls1_check_group_id(this, v347))
                {
                  ERR_put_error(16, 0, 243, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1139);
                  v88 = 47;
                  goto LABEL_718;
                }
                p_key_arg_length = &v85->key_arg_length;
                *((_WORD *)this[188] + 3) = v347;
                if ((bssl::Array<unsigned char>::CopyFrom(v432, p_key_arg_length, ssl_version_high) & 1) == 0)
                  goto LABEL_720;
                v85 = (SSL_SESSION *)((char *)p_key_arg_length + ssl_version_high);
                goto LABEL_730;
              }
            }
          }
          v205 = 1132;
LABEL_717:
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", v205);
          v88 = 50;
          goto LABEL_718;
        }
        v203 = v456 - 2;
        if ((unint64_t)v456 < 2
          || (v204 = __rev16((unsigned __int16)ses[1]->ssl_version), v86 = v203 - v204, v203 < v204))
        {
          v205 = 1090;
          goto LABEL_717;
        }
        v269 = (char *)&ses[1]->ssl_version + 2;
        v459[0] = (ssl_session_st *)((char *)&ses[1]->ssl_version + 2);
        v459[1] = (ssl_session_st *)v204;
        if (v204 > 0x80)
          goto LABEL_509;
        if (v204)
        {
          if (memchr((char *)&ses[1]->ssl_version + 2, 0, v204))
          {
LABEL_509:
            ERR_put_error(16, 0, 136, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1104);
            v88 = 40;
            goto LABEL_718;
          }
          *(_QWORD *)&v450 = 0;
          if (!CBS_strdup((uint64_t)v459, (uint64_t *)&v450))
          {
            v87 = v77;
            v88 = 80;
            goto LABEL_719;
          }
          v339 = (uint64_t *)v450;
        }
        else
        {
          v339 = 0;
        }
        v344 = this[181];
        this[181] = v339;
        if (v344)
          OPENSSL_free(v344);
        v85 = (SSL_SESSION *)&v269[v204];
        if ((v84 & 2) == 0)
        {
LABEL_136:
          if ((v84 & 4) == 0)
          {
            ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1150);
            v87 = v77;
            v88 = 10;
LABEL_719:
            bssl::ssl_send_alert(v87, (ssl_st *)2, v88);
LABEL_720:
            finished = 0;
LABEL_721:
            v4 = v82;
            v5 = v81;
            v2 = v80;
            goto LABEL_722;
          }
LABEL_730:
          if ((this[192][3] & 7) == 0)
          {
            if (v86)
            {
              v351 = 151;
              v352 = 1221;
              goto LABEL_755;
            }
LABEL_753:
            (*(void (**)(bssl *))(*(_QWORD *)v77 + 32))(v77);
            *((_DWORD *)this + 5) = 11;
            finished = 1;
            goto LABEL_721;
          }
          v349 = ses[1];
          v350 = v456;
          if (bssl::ssl_protocol_version(v77, (const ssl_st *)a2) < 0x303)
          {
            v353 = (*v442)[1];
            if (v353 == 6)
            {
              v424 = v349;
              v427 = v350;
              v354 = 65281;
            }
            else
            {
              if (v353 != 408)
              {
                ERR_put_error(16, 0, 193, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1179);
                v87 = v77;
                v88 = 43;
                goto LABEL_719;
              }
              v424 = v349;
              v427 = v350;
              v354 = 515;
            }
            v355 = v86;
LABEL_744:
            v356 = v355 - 2;
            if (v355 < 2
              || (ssl_version_low = LOWORD(v85->ssl_version), v357 = (_DWORD)v85 + 2, v356 != __rev16(ssl_version_low)))
            {
              v351 = 137;
              v352 = 1188;
              goto LABEL_755;
            }
            v423 = v354;
            v359 = v427 - v86;
            *(_OWORD *)__src = 0u;
            memset(v459, 0, sizeof(v459));
            v450 = 0uLL;
            if (CBB_init((uint64_t)v459, v359 + 64))
            {
              v4 = v82;
              if (CBB_add_bytes((uint64_t)v459, (const void *)(*((_QWORD *)v77 + 6) + 48), 0x20uLL)
                && CBB_add_bytes((uint64_t)v459, (const void *)(*((_QWORD *)v77 + 6) + 16), 0x20uLL)
                && CBB_add_bytes((uint64_t)v459, v424, v359))
              {
                if ((bssl::CBBFinishArray((uint64_t)v459, (uint64_t *)&v450) & 1) != 0)
                {
                  v360 = v356;
                  v361 = (_QWORD *)v450;
                  if (bssl::ssl_public_key_verify(v77, v357, v360, (evp_pkey_st *)v423, (const ssl_st *)*v442, v450, *((uint64_t *)&v450 + 1)))
                  {
                    OPENSSL_free(v361);
                    CBB_cleanup((uint64_t)v459);
                    goto LABEL_753;
                  }
                  ERR_put_error(16, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1212);
                  v374 = 51;
LABEL_796:
                  v5 = v81;
                  v6 = v7;
                  bssl::ssl_send_alert(v77, (ssl_st *)2, v374);
                  OPENSSL_free(v361);
                  CBB_cleanup((uint64_t)v459);
                  finished = 0;
                  v2 = v80;
                  goto LABEL_723;
                }
                v361 = (_QWORD *)v450;
              }
              else
              {
                v361 = 0;
              }
            }
            else
            {
              v361 = 0;
              v4 = v82;
            }
            ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1204);
            v374 = 80;
            goto LABEL_796;
          }
          if (v86 <= 1)
          {
            v351 = 137;
            v352 = 1167;
LABEL_755:
            ERR_put_error(16, 0, v351, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", v352);
            v87 = v77;
            v88 = 50;
            goto LABEL_719;
          }
          v427 = v350;
          v354 = bswap32(LOWORD(v85->ssl_version)) >> 16;
          LOBYTE(v459[0]) = 50;
          if (bssl::tls12_check_peer_sigalg((uint64_t)this, v459, v354))
          {
            v424 = v349;
            v355 = v86 - 2;
            v85 = (SSL_SESSION *)((char *)v85 + 2);
            *((_WORD *)this[188] + 4) = v354;
            goto LABEL_744;
          }
          v88 = LOBYTE(v459[0]);
LABEL_718:
          v87 = v77;
          goto LABEL_719;
        }
        goto LABEL_712;
      case 11:
        if ((this[192][3] & 7) == 0)
        {
          v41 = 12;
          goto LABEL_263;
        }
        v7 = *((_DWORD *)this + 5);
        v67 = (bssl *)*this;
        if (!(*(unsigned int (**)(uint64_t *, ssl_session_st **))(**this + 24))(*this, v459))
          goto LABEL_227;
        if (BYTE1(v459[0]) == 13)
        {
          if (!LOBYTE(v459[0]))
          {
            v206 = v459[3];
            v207 = __src[0];
            if (*(_QWORD *)v444 && !BUF_MEM_append(*(unint64_t **)v444, v459[3], (size_t)__src[0]))
              goto LABEL_430;
            if (*(_QWORD *)v443)
              (*(void (**)(char *, ssl_session_st *, void *))(*(_QWORD *)v443 + 24))(v443, v206, v207);
          }
          *(_OWORD *)ses = *(_OWORD *)&v459[1];
          if (!v459[2]
            || (v208 = ses[0],
                v209 = (char *)&ses[0]->ssl_version + 1,
                ++ses[0],
                --ses[1],
                v210 = LOBYTE(v208->ssl_version),
                (uint64_t *)((char *)&v459[2][-1].tlsext_tick_lifetime_hint + 7) < (uint64_t *)v210))
          {
            bssl::ssl_send_alert(v67, (ssl_st *)2, 50);
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1262);
            finished = 0;
            goto LABEL_722;
          }
          ses[0] = (SSL_SESSION *)&v209[v210];
          ses[1] = (SSL_SESSION *)((char *)&v459[2]->tlsext_tick_lifetime_hint - v210 - 281);
          OPENSSL_free(*(_QWORD **)v438);
          *(_QWORD *)v438 = 0;
          *((_QWORD *)v438 + 1) = 0;
          if ((_DWORD)v210)
          {
            v260 = OPENSSL_malloc(v210);
            *(_QWORD *)v438 = v260;
            if (!v260)
            {
              bssl::ssl_send_alert(v67, (ssl_st *)2, 80);
              finished = 0;
              goto LABEL_722;
            }
            this[185] = (uint64_t *)v210;
            memmove(v260, v209, v210);
          }
          if (bssl::ssl_protocol_version(v67, v259) >= 0x303)
          {
            v261 = (char *)&ses[1][-1].tlsext_tick_lifetime_hint + 6;
            if (ses[1] < (SSL_SESSION *)2)
              goto LABEL_620;
            v262 = ses[0];
            v263 = (char *)&ses[0]->ssl_version + 2;
            ses[0] = (SSL_SESSION *)((char *)ses[0] + 2);
            ses[1] = (SSL_SESSION *)((char *)ses[1] - 2);
            v264 = __rev16(LOWORD(v262->ssl_version));
            v265 = (unint64_t)v261 >= v264;
            v266 = (SSL_SESSION *)&v261[-v264];
            if (!v265
              || (ses[0] = (SSL_SESSION *)&v263[v264],
                  ses[1] = v266,
                  *(_QWORD *)&v450 = v263,
                  *((_QWORD *)&v450 + 1) = v264,
                  (bssl::tls1_parse_peer_sigalgs((unint64_t *)this, (uint64_t)&v450) & 1) == 0))
            {
LABEL_620:
              bssl::ssl_send_alert(v67, (ssl_st *)2, 50);
              ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1276);
              finished = 0;
              goto LABEL_722;
            }
          }
          LOBYTE(__dst[0]) = 50;
          bssl::ssl_parse_client_CA_list((uint64_t)v67, __dst, ses, (unint64_t **)&v450);
          v267 = (unint64_t *)v450;
          if (!(_QWORD)v450)
          {
            bssl::ssl_send_alert(v67, (ssl_st *)2, LOBYTE(__dst[0]));
            finished = 0;
            goto LABEL_722;
          }
          if (ses[1])
          {
            bssl::ssl_send_alert(v67, (ssl_st *)2, 50);
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1291);
            OPENSSL_sk_pop_free_ex(v267, (void (*)(uint64_t))bssl::internal::DeleterImpl<stack_st_CRYPTO_BUFFER,void>::Free(stack_st_CRYPTO_BUFFER*)::{lambda(void (*)(void *),void *)#1}::__invoke, 0);
            finished = 0;
            goto LABEL_722;
          }
          *((_DWORD *)this + 392) |= 0x20u;
          v362 = (unint64_t *)this[182];
          this[182] = (uint64_t *)v267;
          if (v362)
            OPENSSL_sk_pop_free_ex(v362, (void (*)(uint64_t))bssl::internal::DeleterImpl<stack_st_CRYPTO_BUFFER,void>::Free(stack_st_CRYPTO_BUFFER*)::{lambda(void (*)(void *),void *)#1}::__invoke, 0);
          (*(void (**)(uint64_t **))(*(_QWORD *)(*((_QWORD *)v67 + 13) + 16) + 80))(this);
          (*(void (**)(bssl *))(*(_QWORD *)v67 + 32))(v67);
          v97 = 12;
        }
        else
        {
          if (BYTE1(v459[0]) != 14)
            goto LABEL_382;
          v89 = *(unint64_t **)v444;
          *(_QWORD *)v444 = 0;
          if (v89)
          {
            v90 = v89[1];
            if (v90)
            {
              v92 = *(_QWORD *)(v90 - 8);
              v91 = (void *)(v90 - 8);
              v93 = v92 + 8;
              if (v92 != -8)
                bzero(v91, v93);
              free(v91);
            }
            v95 = *(v89 - 1);
            v94 = v89 - 1;
            v96 = v95 + 8;
            if (v95 != -8)
              bzero(v94, v96);
            free(v94);
          }
          v97 = 12;
        }
        goto LABEL_347;
      case 12:
        v98 = (bssl *)*this;
        if (!(*(unsigned int (**)(uint64_t *, ssl_session_st **))(**this + 24))(*this, v459))
        {
LABEL_185:
          finished = 3;
          goto LABEL_723;
        }
        if (BYTE1(v459[0]) != 14)
        {
          bssl::ssl_send_alert(v98, (ssl_st *)2, 10);
          ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 211);
          ERR_add_error_dataf("got type %d, wanted type %d", v153, v154, v155, v156, v157, v158, v159, SBYTE1(v459[0]));
          finished = 0;
          goto LABEL_723;
        }
        v7 = v6;
        if (LOBYTE(v459[0]))
          goto LABEL_158;
        v99 = v459[3];
        v100 = __src[0];
        if (*(_QWORD *)v444 && !BUF_MEM_append(*(unint64_t **)v444, v459[3], (size_t)__src[0]))
          goto LABEL_430;
        if (*(_QWORD *)v443)
          (*(void (**)(char *, ssl_session_st *, void *))(*(_QWORD *)v443 + 24))(v443, v99, v100);
LABEL_158:
        if (v459[2])
        {
          bssl::ssl_send_alert(v98, (ssl_st *)2, 50);
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1319);
          finished = 0;
          goto LABEL_722;
        }
        v6 = v7;
        if ((*(unsigned int (**)(bssl *))(*(_QWORD *)v98 + 40))(v98))
        {
          bssl::ssl_send_alert(v98, (ssl_st *)2, 10);
          v45 = 255;
          v46 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl"
                "/src/ssl/handshake_client.cc";
          v47 = 1326;
          goto LABEL_69;
        }
        (*(void (**)(bssl *))(*(_QWORD *)v98 + 32))(v98);
        v101 = 13;
        goto LABEL_477;
      case 13:
        if (((_BYTE)this[196] & 0x20) == 0)
        {
          v101 = 14;
LABEL_477:
          *((_DWORD *)this + 5) = v101;
          finished = 1;
          goto LABEL_723;
        }
        v120 = (bssl *)*this;
        if (*(_DWORD *)((*this)[6] + 216) == 2)
        {
          SSL_certs_clear((uint64_t)*this);
        }
        else
        {
          v160 = this[1][4];
          v161 = *(uint64_t (**)(uint64_t *, _QWORD))(v160 + 64);
          if (v161)
          {
            v162 = v161(*this, *(_QWORD *)(v160 + 72));
            if (!v162)
            {
              bssl::ssl_send_alert(v120, (ssl_st *)2, 80);
              v45 = 126;
              v46 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/borin"
                    "gssl/src/ssl/handshake_client.cc";
              v47 = 1389;
LABEL_69:
              ERR_put_error(16, 0, v45, v46, v47);
              finished = 0;
              goto LABEL_723;
            }
            if (v162 < 0)
            {
              *((_DWORD *)this + 5) = 13;
              finished = 8;
              goto LABEL_723;
            }
          }
        }
        v459[1] = 0;
        v459[0] = 0;
        if (!bssl::ssl_get_credential_list((uint64_t)this, (uint64_t *)v459))
          goto LABEL_525;
        if (!v459[1])
        {
          v224 = *(unint64_t **)v444;
          *(_QWORD *)v444 = 0;
          if (v224)
          {
            v225 = v6;
            v226 = v224[1];
            if (v226)
            {
              v228 = *(_QWORD *)(v226 - 8);
              v227 = (void *)(v226 - 8);
              v229 = v228 + 8;
              if (v228 != -8)
                bzero(v227, v229);
              free(v227);
            }
            v231 = *(v224 - 1);
            v230 = v224 - 1;
            v232 = v231 + 8;
            if (v231 != -8)
              bzero(v230, v232);
            free(v230);
            v6 = v225;
          }
          goto LABEL_522;
        }
        p_ssl_version = (uint64_t *)&v459[0]->ssl_version;
        v164 = 8 * (uint64_t)v459[1];
        v428 = v5;
        v430 = v6;
        while (1)
        {
          while (1)
          {
            v165 = *p_ssl_version;
            ERR_clear_error();
            LOWORD(ses[0]) = 0;
            if (!*(_DWORD *)(v165 + 4))
              break;
            v166 = 1338;
LABEL_292:
            ERR_put_error(16, 0, 228, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", v166);
            ++p_ssl_version;
            v164 -= 8;
            if (!v164)
              goto LABEL_521;
          }
          if ((*(_WORD *)((_BYTE *)this[1] + 237) & 0x4000) != 0)
          {
            v167 = *(_DWORD *)(*(_QWORD *)(v165 + 8) + 4);
            if (v167 == 6)
            {
              v168 = v4;
              v169 = 1;
            }
            else
            {
              if (v167 != 949 && v167 != 408)
              {
                v166 = 1354;
                goto LABEL_292;
              }
              v168 = v4;
              v169 = 64;
            }
            v170 = (char *)this[184];
            v171 = (size_t)this[185];
            v172 = (char *)memchr(v170, v169, v171);
            v173 = v172 ? v172 : &v170[v171];
            v18 = v173 - v170 == v171;
            v4 = v168;
            v5 = v428;
            v6 = v430;
            v2 = &jpt_2089978E4;
            if (v18)
            {
              v166 = 1359;
              goto LABEL_292;
            }
          }
          if (bssl::tls1_choose_signature_algorithm((bssl **)this, v165, (__int16 *)ses))
          {
            v270 = atomic_load((unsigned int *)v165);
            if (v270 == -1)
            {
LABEL_518:
              v273 = (ssl_credential_st *)this[186];
              this[186] = (uint64_t *)v165;
              if (v273)
                SSL_CREDENTIAL_free(v273);
              *((_WORD *)this + 789) = ses[0];
LABEL_521:
              if (!this[186])
              {
                bssl::ssl_send_alert(v120, (ssl_st *)2, 40);
                finished = 0;
                v256 = v459[0];
                if (v459[0])
                  goto LABEL_781;
                goto LABEL_723;
              }
LABEL_522:
              if (bssl::ssl_send_tls12_certificate((bssl *)this, (bssl::SSL_HANDSHAKE *)a2))
              {
                *((_DWORD *)this + 5) = 14;
                finished = 1;
                v256 = v459[0];
                if (v459[0])
                  goto LABEL_781;
              }
              else
              {
LABEL_525:
                finished = 0;
                v256 = v459[0];
                if (v459[0])
                  goto LABEL_781;
              }
              goto LABEL_723;
            }
            while (2)
            {
              v271 = __ldaxr((unsigned int *)v165);
              if (v271 == v270)
              {
                if (!__stlxr(v270 + 1, (unsigned int *)v165))
                {
                  v272 = 1;
LABEL_516:
                  if ((v272 & 1) != 0)
                    goto LABEL_518;
                  v270 = v271;
                  if (v271 == -1)
                    goto LABEL_518;
                  continue;
                }
              }
              else
              {
                __clrex();
              }
              break;
            }
            v272 = 0;
            goto LABEL_516;
          }
          ++p_ssl_version;
          v164 -= 8;
          if (!v164)
            goto LABEL_521;
        }
      case 14:
        v28 = (bssl *)*this;
        v451 = 0u;
        v452 = 0u;
        v450 = 0u;
        if (!(*(unsigned int (**)(bssl *, __int128 *, void **, uint64_t))(*(_QWORD *)v28 + 88))(v28, &v450, __dst, 16))
        {
          finished = 0;
          goto LABEL_778;
        }
        v447 = 0;
        v448 = 0;
        v29 = this[192];
        v31 = *((_DWORD *)v29 + 5);
        v30 = *((_DWORD *)v29 + 6);
        if ((v30 & 7) == 0)
          goto LABEL_53;
        v32 = **(_QWORD **)(this[188][17] + 8);
        v34 = *(ssl_session_st **)(v32 + 8);
        v33 = *(ssl_session_st **)(v32 + 16);
        v459[0] = v34;
        v459[1] = v33;
        if ((bssl::ssl_cert_check_key_usage((__int128 *)v459, 2 * (v31 & 1u)) & 1) != 0)
          goto LABEL_53;
        if ((*(_WORD *)((_BYTE *)this[1] + 237) & 0x10) != 0 || (*v442)[1] != 6)
          goto LABEL_548;
        ERR_clear_error();
        *(_WORD *)(*((_QWORD *)v28 + 6) + 220) |= 0x4000u;
LABEL_53:
        if ((v30 & 8) == 0)
        {
          v35 = 0;
LABEL_55:
          if ((v31 & 1) != 0)
          {
            if (v447)
            {
              v219 = (char *)v447 - 8;
              v218 = *((_QWORD *)v447 - 1);
              if (v218 != -8)
                bzero((char *)v447 - 8, v218 + 8);
              free(v219);
            }
            v447 = 0;
            v448 = 0;
            v220 = (char *)malloc_type_malloc(0x38uLL, 0x30772F57uLL);
            if (!v220)
            {
              ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
              finished = 0;
              v447 = 0;
              goto LABEL_778;
            }
            *(_QWORD *)v220 = 48;
            v447 = v220 + 8;
            v448 = 48;
            if ((*v442)[1] == 6)
            {
              v221 = (uint64_t **)*((_QWORD *)*v442 + 1);
              if (v221)
              {
                v220[8] = *((_BYTE *)this + 1573);
                v220[9] = *((_BYTE *)this + 1572);
                RAND_bytes_with_additional_data((uint64_t)(v220 + 10), 0x2EuLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
                v453 = 0;
                v454[0] = 0;
                if (!CBB_add_u16_length_prefixed((uint64_t *)__dst, (uint64_t)ses))
                  goto LABEL_774;
                v222 = (uint64_t (*)(uint64_t **))(*v221)[4];
                v223 = v222 ? v222(v221) : BN_num_bytes(v221[1]);
                if (!CBB_reserve((uint64_t)ses, v454, v223))
                  goto LABEL_774;
                v426 = (char *)v454[0];
                v340 = (uint64_t (*)(uint64_t **))(*v221)[4];
                v341 = v340 ? v340(v221) : BN_num_bytes(v221[1]);
                if (!RSA_encrypt((uint64_t)v221, (unint64_t *)&v453, v426, v341, v447, v448, 1))
                  goto LABEL_774;
                v363 = (_QWORD *)(v456 + 8);
                if (!LOBYTE(ses[1]))
                  v363 = (_QWORD *)&v456 + 1;
                v364 = (char *)v453 + *v363;
                v365 = __CFADD__(*v363, v453);
                if (ses[0] || v365)
                  goto LABEL_774;
                v366 = v457;
                if (LOBYTE(ses[1]))
                  v366 = (_QWORD *)(v456 + 16);
                if ((unint64_t)v364 > *v366)
                  goto LABEL_774;
                *v363 = v364;
                if (!CBB_flush((uint64_t *)__dst))
                  goto LABEL_774;
                goto LABEL_553;
              }
            }
            else
            {
              ERR_put_error(6, 0, 107, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/evp/p_rsa_asn1.c", 229);
            }
            ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1516);
            finished = 0;
            v258 = v447;
            if (!v447)
              goto LABEL_778;
            goto LABEL_775;
          }
          if ((v31 & 2) == 0)
          {
            if ((v31 & 4) == 0)
            {
              bssl::ssl_send_alert(v28, (ssl_st *)2, 40);
              ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1566);
              goto LABEL_548;
            }
            OPENSSL_free(v447);
            v447 = 0;
            v448 = 0;
            if (v35)
            {
              v280 = OPENSSL_malloc(v35);
              v447 = v280;
              if (!v280)
                goto LABEL_774;
              v448 = v35;
              bzero(v280, v35);
            }
            goto LABEL_553;
          }
          if (CBB_flush((uint64_t *)__dst)
            && cbb_add_child((uint64_t)__dst, (uint64_t)ses, 1u, 0))
          {
            bssl::SSLKeyShare::Create((bssl::SSLKeyShare *)*((unsigned __int16 *)this[188] + 3), v454);
            LOBYTE(v453) = 50;
            v257 = (_QWORD *)v454[0];
            if (!v454[0])
            {
              bssl::ssl_send_alert(v28, (ssl_st *)2, 50);
              finished = 0;
              v258 = v447;
              if (!v447)
                goto LABEL_778;
              goto LABEL_775;
            }
            if ((*(unsigned int (**)(uint64_t, SSL_SESSION **, void **, void **, uint64_t *, uint64_t *))(*(_QWORD *)v454[0] + 32))(v454[0], ses, &v447, &v453, this[85], this[86]))
            {
              if (CBB_flush((uint64_t *)__dst))
              {
                OPENSSL_free((_QWORD *)*v432);
                *v432 = 0;
                v432[1] = 0;
                (*(void (**)(_QWORD *))*v257)(v257);
                OPENSSL_free(v257);
LABEL_553:
                if ((v30 & 8) != 0)
                {
                  v456 = 0u;
                  v457[0] = 0u;
                  *(_OWORD *)ses = 0u;
                  if (!CBB_init((uint64_t)ses, v448 + v35 + 4)
                    || !CBB_add_u16_length_prefixed((uint64_t *)ses, (uint64_t)v454)
                    || !CBB_add_bytes((uint64_t)v454, v447, v448)
                    || !CBB_add_u16_length_prefixed((uint64_t *)ses, (uint64_t)v454)
                    || !CBB_add_bytes((uint64_t)v454, v459, v35)
                    || !bssl::CBBFinishArray((uint64_t)ses, (uint64_t *)&v447))
                  {
                    CBB_cleanup((uint64_t)ses);
                    finished = 0;
                    v258 = v447;
                    if (!v447)
                      goto LABEL_778;
                    goto LABEL_775;
                  }
                  CBB_cleanup((uint64_t)ses);
                  if (bssl::ssl_add_message_cbb((uint64_t)v28, (uint64_t)&v450))
                    goto LABEL_555;
                }
                else if (bssl::ssl_add_message_cbb((uint64_t)v28, (uint64_t)&v450))
                {
LABEL_555:
                  master_secret = bssl::tls1_generate_master_secret((uint64_t)this, (int8x16_t *)((char *)this[188] + 11), (char *)v447, v448);
                  v282 = this[188];
                  *((_BYTE *)v282 + 10) = master_secret;
                  if (master_secret)
                  {
                    *((_BYTE *)v282 + 424) = v282[53] & 0xFE | *((_BYTE *)this + 1570) & 1;
                    *((_DWORD *)this + 5) = 15;
                    finished = 1;
                    v258 = v447;
                    if (!v447)
                      goto LABEL_778;
                  }
                  else
                  {
                    finished = 0;
                    v258 = v447;
                    if (!v447)
                      goto LABEL_778;
                  }
LABEL_775:
                  v368 = *(v258 - 1);
                  v367 = (char *)(v258 - 1);
                  v369 = v368 + 8;
                  if (v368 != -8)
                    bzero(v367, v369);
                  free(v367);
LABEL_778:
                  if (BYTE8(v450))
                    goto LABEL_723;
                  if ((BYTE8(v452) & 1) == 0)
                    goto LABEL_723;
                  v256 = (ssl_session_st *)v451;
                  if (!(_QWORD)v451)
                    goto LABEL_723;
LABEL_781:
                  tlsext_tick_lifetime_hint = v256[-1].tlsext_tick_lifetime_hint;
                  p_tlsext_tick_lifetime_hint = &v256[-1].tlsext_tick_lifetime_hint;
                  v372 = tlsext_tick_lifetime_hint + 8;
                  if (tlsext_tick_lifetime_hint != -8)
                    bzero(p_tlsext_tick_lifetime_hint, v372);
                  free(p_tlsext_tick_lifetime_hint);
                  goto LABEL_723;
                }
LABEL_774:
                finished = 0;
                v258 = v447;
                if (!v447)
                  goto LABEL_778;
                goto LABEL_775;
              }
            }
            else
            {
              bssl::ssl_send_alert(v28, (ssl_st *)2, v453);
            }
            (*(void (**)(_QWORD *))*v257)(v257);
            OPENSSL_free(v257);
            finished = 0;
            v258 = v447;
            if (!v447)
              goto LABEL_778;
            goto LABEL_775;
          }
LABEL_548:
          finished = 0;
          v258 = v447;
          if (!v447)
            goto LABEL_778;
          goto LABEL_775;
        }
        v174 = this[1];
        if (!v174[8])
        {
          ERR_put_error(16, 0, 196, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1477);
          goto LABEL_548;
        }
        v458 = 0;
        memset(v457, 0, sizeof(v457));
        *(_OWORD *)ses = 0u;
        v456 = 0u;
        v175 = ((uint64_t (*)(bssl *, uint64_t *, SSL_SESSION **, uint64_t, ssl_session_st **, uint64_t))v174[8])(v28, this[181], ses, 129, v459, 256);
        if (!v175)
        {
          ERR_put_error(16, 0, 195, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1487);
          bssl::ssl_send_alert(v28, (ssl_st *)2, 40);
          goto LABEL_548;
        }
        v425 = v175;
        v429 = v5;
        v176 = v4;
        v177 = this[188];
        v178 = strlen((const char *)ses);
        v179 = v178 + 1;
        if (v178 == -1)
          goto LABEL_530;
        if (v179 <= 0xFFFFFFFFFFFFFFF7 && (v180 = malloc_type_malloc(v178 + 9, 0x30772F57uLL)) != 0)
        {
          *v180 = v179;
          v181 = v180 + 1;
          memcpy(v180 + 1, ses, v179);
        }
        else
        {
          ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
LABEL_530:
          v181 = 0;
        }
        v274 = v177[16];
        v177[16] = (uint64_t)v181;
        v4 = v176;
        v5 = v429;
        v2 = &jpt_2089978E4;
        v35 = v425;
        if (v274)
        {
          v276 = *(_QWORD *)(v274 - 8);
          v275 = (void *)(v274 - 8);
          v277 = v276 + 8;
          if (v276 != -8)
            bzero(v275, v277);
          free(v275);
        }
        if (!this[188][16]
          || !CBB_flush((uint64_t *)__dst)
          || !cbb_add_child((uint64_t)__dst, (uint64_t)v454, 2u, 0))
        {
          goto LABEL_548;
        }
        for (i = 0; i != 129; ++i)
        {
          if (!*((_BYTE *)ses + i))
            break;
        }
        v279 = i >= 0x81 ? 129 : i;
        v453 = 0;
        if (!CBB_add_space((uint64_t)v454, &v453, v279))
          goto LABEL_548;
        if (v279)
          memcpy(v453, ses, v279);
        if (!CBB_flush((uint64_t *)__dst))
          goto LABEL_548;
        goto LABEL_55;
      case 15:
        if (((_BYTE)this[196] & 0x20) == 0 || !this[186])
        {
          *((_DWORD *)this + 5) = 16;
          finished = 1;
          goto LABEL_723;
        }
        v102 = *((_DWORD *)this + 5);
        v103 = (unsigned __int16 *)*this;
        *(_OWORD *)__src = 0u;
        memset(v459, 0, sizeof(v459));
        if (!(*(unsigned int (**)(unsigned __int16 *, ssl_session_st **, SSL_SESSION **, uint64_t))(*(_QWORD *)v103 + 88))(v103, v459, ses, 15))goto LABEL_464;
        v104 = v103[8];
        if (v104 - 769 >= 4)
        {
          if (v104 == 65277)
          {
LABEL_167:
            v105 = *((_WORD *)this + 789);
            __dst[0] = 0;
            if (!CBB_add_space((uint64_t)ses, __dst, 2))
            {
              ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1621);
              finished = 0;
              goto LABEL_465;
            }
            *((_BYTE *)__dst[0] + 1) = v105;
            *(_BYTE *)__dst[0] = HIBYTE(v105);
            v106 = this[186][1];
            if (!v106)
              goto LABEL_446;
LABEL_443:
            v247 = *(_QWORD *)(v106 + 16);
            if (v247)
            {
              v248 = *(uint64_t (**)(void))(v247 + 120);
              if (v248)
              {
                v249 = v248();
LABEL_447:
                __dst[0] = 0;
                if (!CBB_flush((uint64_t *)ses)
                  || !cbb_add_child((uint64_t)ses, (uint64_t)&v450, 2u, 0)
                  || !CBB_reserve((uint64_t)&v450, __dst, v249))
                {
                  goto LABEL_464;
                }
                v454[0] = v249;
                v250 = bssl::ssl_private_key_sign((uint64_t)this, __dst[0], (unint64_t *)v454, v249, (evp_pkey_st *)*((unsigned __int16 *)this + 789), (const void *)this[51][1], *this[51]);
                if (v250 == 1)
                {
                  finished = 9;
                  v255 = 15;
                  goto LABEL_619;
                }
                if (v250 == 2)
                {
LABEL_464:
                  finished = 0;
                  goto LABEL_465;
                }
                finished = 0;
                v251 = (unint64_t *)(v451 + 8);
                if (!BYTE8(v450))
                  v251 = (unint64_t *)&v451 + 1;
                v252 = *v251 + v454[0];
                v253 = __CFADD__(*v251, v454[0]);
                if (!(_QWORD)v450 && !v253)
                {
                  v254 = (unint64_t *)&v452;
                  if (BYTE8(v450))
                    v254 = (unint64_t *)(v451 + 16);
                  if (v252 <= *v254)
                  {
                    *v251 = v252;
                    if (bssl::ssl_add_message_cbb((uint64_t)v103, (uint64_t)v459))
                    {
                      bssl::SSLTranscript::FreeBuffer(v444);
                      finished = 1;
                      v255 = 16;
LABEL_619:
                      *((_DWORD *)this + 5) = v255;
                      goto LABEL_465;
                    }
                  }
                  goto LABEL_464;
                }
LABEL_465:
                v6 = v102;
                if (LOBYTE(v459[1]))
                  goto LABEL_723;
                if (((uint64_t)__src[1] & 1) == 0)
                  goto LABEL_723;
                v256 = v459[2];
                if (!v459[2])
                  goto LABEL_723;
                goto LABEL_781;
              }
            }
LABEL_446:
            v249 = 0;
            goto LABEL_447;
          }
        }
        else if (v104 >= 0x303)
        {
          goto LABEL_167;
        }
        v106 = this[186][1];
        if (!v106)
          goto LABEL_446;
        goto LABEL_443;
      case 16:
        v7 = *((_DWORD *)this + 5);
        v36 = *this;
        *((_DWORD *)this + 392) |= 0x400000u;
        if (!(*(unsigned int (**)(uint64_t *, ssl_session_st *))(*v36 + 112))(v36, a2))
          goto LABEL_430;
        v37 = (uint64_t)*this;
        v38 = (uint64_t)this[188];
        if (v38)
        {
          if (!bssl::tls1_configure_aead(v37, 1u, v5, v38, 0, 0))
            goto LABEL_430;
        }
        else if (!bssl::tls1_configure_aead(v37, 1u, v5, *(_QWORD *)(v37 + 88), 0, 0))
        {
          goto LABEL_430;
        }
        v182 = *((_DWORD *)this + 392);
        if ((v182 & 0x4000) != 0)
        {
          v196 = *(_DWORD *)(v36[6] + 480);
          *(_OWORD *)__src = 0u;
          memset(v459, 0, sizeof(v459));
          if (!(*(unsigned int (**)(uint64_t *, ssl_session_st **, SSL_SESSION **, uint64_t))(*v36 + 88))(v36, v459, ses, 67))goto LABEL_369;
          if (!CBB_flush((uint64_t *)ses))
            goto LABEL_369;
          if (!cbb_add_child((uint64_t)ses, (uint64_t)&v450, 1u, 0))
            goto LABEL_369;
          v197 = v36[6];
          v198 = *(const void **)(v197 + 472);
          v199 = *(_QWORD *)(v197 + 480);
          __dst[0] = 0;
          if (!CBB_add_space((uint64_t)&v450, __dst, v199))
            goto LABEL_369;
          if (v199)
            memcpy(__dst[0], v198, v199);
          if (!CBB_add_u8_length_prefixed((uint64_t *)ses, (uint64_t)&v450)
            || !CBB_add_bytes((uint64_t)&v450, &bssl::do_send_client_finished(bssl::SSL_HANDSHAKE *)::kZero, 32 - (((_BYTE)v196 + 2) & 0x1F))|| (bssl::ssl_add_message_cbb((uint64_t)v36, (uint64_t)v459) & 1) == 0)
          {
LABEL_369:
            ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1681);
            v6 = v7;
            if (LOBYTE(v459[1]))
              goto LABEL_604;
            goto LABEL_436;
          }
          CBB_cleanup((uint64_t)v459);
          if (((_DWORD)this[196] & 0x800000) == 0)
          {
LABEL_318:
            if (!bssl::ssl_send_finished((bssl *)this, (bssl::SSL_HANDSHAKE *)a2))
              goto LABEL_430;
            goto LABEL_319;
          }
        }
        else if ((v182 & 0x800000) == 0)
        {
          goto LABEL_318;
        }
        *(_OWORD *)__src = 0u;
        memset(v459, 0, sizeof(v459));
        if ((*(unsigned int (**)(uint64_t *, ssl_session_st **, SSL_SESSION **, uint64_t))(*v36 + 88))(v36, v459, ses, 203)&& bssl::tls1_write_channel_id((bssl *)this, (uint64_t *)ses, v200, v201)&& (bssl::ssl_add_message_cbb((uint64_t)v36, (uint64_t)v459) & 1) != 0)
        {
          CBB_cleanup((uint64_t)v459);
          if (!bssl::ssl_send_finished((bssl *)this, v202))
            goto LABEL_430;
LABEL_319:
          *((_DWORD *)this + 5) = 17;
          finished = 4;
          goto LABEL_722;
        }
        ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1692);
        v6 = v7;
        if (LOBYTE(v459[1]))
          goto LABEL_604;
LABEL_436:
        if (((uint64_t)__src[1] & 1) != 0 && v459[2])
        {
          v246 = &v459[2][-1].tlsext_tick_lifetime_hint;
          v245 = v459[2][-1].tlsext_tick_lifetime_hint;
          if (v245 != -8)
            bzero(&v459[2][-1].tlsext_tick_lifetime_hint, v245 + 8);
          free(v246);
        }
        goto LABEL_604;
      case 17:
        v107 = *this;
        if ((*this)[11])
        {
          v41 = 21;
          goto LABEL_263;
        }
        v459[0] = 0;
        if (!bssl::SSLTranscript::GetHash(v444, (unsigned __int8 *)this[188] + 296, (unint64_t *)v459))
          goto LABEL_604;
        *((_BYTE *)this[188] + 360) = v459[0];
        *((_DWORD *)this + 5) = 18;
        if ((*((_BYTE *)v107 + 132) & 0x80) != 0
          && (v148 = *this, !*(_BYTE *)**this)
          && ((v149 = v148[6], (v150 = *(_QWORD *)(v149 + 280)) == 0)
           || (*(_BYTE *)(v150 + 1569) & 4) == 0
           || (*((_BYTE *)v148 + 164) & 1) != 0
            ? (v151 = v148 + 2)
            : (v151 = (_WORD *)(*(_QWORD *)(v150 + 1512) + 4)),
              *v151 == 771
           && (v268 = this[192], *((_DWORD *)v268 + 5) == 2)
           && *((_DWORD *)v268 + 8) == 4
           && *(_DWORD *)(v149 + 216) != 2
           && ((*(_WORD *)(v148[13] + 760) & 0x100) != 0 || *(_QWORD *)(v149 + 496) || *(_QWORD *)(v149 + 480))
           && (*(_WORD *)(v107[6] + 220) & 0x20) == 0))
        {
          *((_DWORD *)this + 392) |= 0x2200u;
          finished = 12;
        }
        else
        {
          finished = 1;
        }
        goto LABEL_723;
      case 18:
        if ((*((_BYTE *)this + 1569) & 0x80) == 0)
        {
          *((_DWORD *)this + 5) = 19;
          finished = 15;
          goto LABEL_723;
        }
        v7 = *((_DWORD *)this + 5);
        v67 = (bssl *)*this;
        if (!(*(unsigned int (**)(uint64_t *, ssl_session_st **))(**this + 24))(*this, v459))
        {
LABEL_227:
          finished = 3;
          goto LABEL_722;
        }
        if (BYTE1(v459[0]) != 4)
        {
LABEL_382:
          bssl::ssl_send_alert(v67, (ssl_st *)2, 10);
          ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 211);
          ERR_add_error_dataf("got type %d, wanted type %d", v211, v212, v213, v214, v215, v216, v217, SBYTE1(v459[0]));
          finished = 0;
          goto LABEL_722;
        }
        if (LOBYTE(v459[0]))
          goto LABEL_216;
        v122 = v459[3];
        v123 = __src[0];
        if (*(_QWORD *)v444 && !BUF_MEM_append(*(unint64_t **)v444, v459[3], (size_t)__src[0]))
          goto LABEL_430;
        if (*(_QWORD *)v443)
          (*(void (**)(char *, ssl_session_st *, void *))(*(_QWORD *)v443 + 24))(v443, v122, v123);
LABEL_216:
        if (v459[2] < (ssl_session_st *)4
          || ((unint64_t)v459[2] & 0xFFFFFFFFFFFFFFFELL) == 4
          || (v124 = v459[1],
              v125 = (char *)&v459[2][-1].tlsext_tick_lifetime_hint + 2,
              (uint64_t *)((char *)&v459[2][-1].tlsext_tick_lifetime_hint + 2) != (uint64_t *)__rev16(LOWORD(v459[1]->key_arg_length))))
        {
          bssl::ssl_send_alert(v67, (ssl_st *)2, 50);
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1796);
          finished = 0;
          goto LABEL_722;
        }
        if (v459[2] == (ssl_session_st *)6)
        {
          *((_DWORD *)this + 392) &= ~0x8000u;
          (*(void (**)(bssl *))(*(_QWORD *)v67 + 32))(v67);
          *((_DWORD *)this + 5) = 19;
          finished = 15;
          goto LABEL_722;
        }
        ssl_version = v459[1]->ssl_version;
        v127 = (bssl *)*((_QWORD *)v67 + 11);
        if (v127)
        {
          bssl::SSL_SESSION_dup(v127, (ssl_session_st *)2, ses);
          a2 = ses[0];
          ses[0] = 0;
          v128 = (SSL_SESSION *)this[188];
          this[188] = (uint64_t *)&a2->ssl_version;
          if (v128)
          {
            SSL_SESSION_free(v128);
            v129 = ses[0];
            ses[0] = 0;
            if (v129)
              SSL_SESSION_free(v129);
            a2 = (ssl_session_st *)this[188];
          }
          if (!a2)
            goto LABEL_706;
        }
        else
        {
          a2 = (ssl_session_st *)this[188];
        }
        v342 = (const unsigned __int8 *)&v124->key_arg_length + 2;
        bssl::ssl_session_rebase_time(v67, (ssl_st *)a2, v121);
        if (bssl::Array<unsigned char>::CopyFrom(this[188] + 29, v342, (size_t)v125))
        {
          v343 = this[188];
          *((_DWORD *)v343 + 91) = bswap32(ssl_version);
          SHA256(v342, (size_t)v125, (unsigned __int8 *)v343 + 60);
          *((_BYTE *)this[188] + 59) = 32;
          (*(void (**)(bssl *))(*(_QWORD *)v67 + 32))(v67);
          *((_DWORD *)this + 5) = 19;
          finished = 15;
          goto LABEL_722;
        }
LABEL_706:
        finished = 0;
        goto LABEL_722;
      case 19:
        v111 = (uint64_t)*this;
        v112 = (uint64_t)this[188];
        if (!v112)
          v112 = *(_QWORD *)(v111 + 88);
        finished = 0;
        if (!bssl::tls1_configure_aead(v111, 0, v5, v112, 0, 0))
          goto LABEL_723;
        v41 = 20;
        goto LABEL_263;
      case 20:
        v108 = *this;
        finished = bssl::ssl_get_finished((const ssl_session_st **)this, (bssl::SSL_HANDSHAKE *)a2);
        if ((_DWORD)finished == 1)
        {
          if (v108[11])
            v109 = 16;
          else
            v109 = 21;
          *((_DWORD *)this + 5) = v109;
        }
        goto LABEL_723;
      case 21:
        v7 = *((_DWORD *)this + 5);
        v110 = (bssl *)*this;
        if (*(_DWORD *)((*this)[6] + 216) == 2)
        {
          *((_DWORD *)this + 392) |= 2u;
          bssl::ssl_send_alert(v110, (ssl_st *)2, 121);
          ERR_put_error(16, 0, 319, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_client.cc", 1871);
          finished = 0;
          goto LABEL_722;
        }
        (*(void (**)(uint64_t *, ssl_session_st *))(*(_QWORD *)v110 + 128))(*this, a2);
        v130 = this[188];
        if (v130)
        {
          bssl::SSL_SESSION_dup((bssl *)this[188], (ssl_session_st *)3, v459);
          v131 = *((_QWORD *)v110 + 6);
          v132 = v459[0];
          v459[0] = 0;
          v133 = *(ssl_session_st **)(v131 + 464);
          *(_QWORD *)(v131 + 464) = v132;
          if (!v133)
            goto LABEL_253;
          for (j = atomic_load((unsigned int *)v133); ; j = v135)
          {
            if (j == -1)
              goto LABEL_241;
            if (!j)
LABEL_886:
              abort();
            v135 = __ldaxr((unsigned int *)v133);
            if (v135 == j)
            {
              if (!__stlxr(j - 1, (unsigned int *)v133))
              {
                if (j == 1)
                {
                  ssl_session_st::~ssl_session_st(v133);
                  v137 = v133[-1].tlsext_tick_lifetime_hint;
                  v136 = &v133[-1].tlsext_tick_lifetime_hint;
                  v138 = v137 + 8;
                  if (v137 != -8)
                    bzero(v136, v138);
                  free(v136);
                }
LABEL_241:
                v139 = v459[0];
                v459[0] = 0;
                if (!v139)
                  goto LABEL_253;
                for (k = atomic_load((unsigned int *)v139); ; k = v141)
                {
                  if (k == -1)
                    goto LABEL_253;
                  if (!k)
                    goto LABEL_886;
                  v141 = __ldaxr((unsigned int *)v139);
                  if (v141 == k)
                  {
                    if (!__stlxr(k - 1, (unsigned int *)v139))
                    {
                      if (k == 1)
                      {
                        ssl_session_st::~ssl_session_st(v139);
                        v143 = v139[-1].tlsext_tick_lifetime_hint;
                        v142 = &v139[-1].tlsext_tick_lifetime_hint;
                        v144 = v143 + 8;
                        if (v143 != -8)
                          bzero(v142, v144);
                        free(v142);
                      }
LABEL_253:
                      v145 = *((_QWORD *)v110 + 6);
                      v146 = *(_QWORD *)(v145 + 464);
                      if (v146)
                      {
                        if ((*(_WORD *)(v145 + 220) & 0x20) == 0)
                          *(_BYTE *)(v146 + 424) &= ~4u;
                        v147 = (ssl_session_st *)this[188];
                        this[188] = 0;
                        if (!v147)
                          goto LABEL_344;
                        goto LABEL_333;
                      }
LABEL_430:
                      finished = 0;
LABEL_722:
                      v6 = v7;
                      goto LABEL_723;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        v185 = (unsigned int *)*((_QWORD *)v110 + 11);
        if (!v185)
          goto LABEL_332;
        v186 = atomic_load(v185);
        if (v186 == -1)
          goto LABEL_332;
        break;
      case 22:
        v421 = (void (*)(void))(*this)[12];
        if (!v421)
        {
          v421 = *(void (**)(void))((*this)[13] + 384);
          if (!v421)
            return 1;
        }
        finished = 1;
        v421();
        return finished;
      default:
        goto LABEL_604;
    }
    break;
  }
  while (1)
  {
    v187 = __ldaxr(v185);
    if (v187 == v186)
    {
      if (!__stlxr(v186 + 1, v185))
      {
        v188 = 1;
        goto LABEL_330;
      }
    }
    else
    {
      __clrex();
    }
    v188 = 0;
LABEL_330:
    if ((v188 & 1) == 0)
    {
      v186 = v187;
      if (v187 != -1)
        continue;
    }
LABEL_332:
    v189 = *((_QWORD *)v110 + 6);
    v147 = *(ssl_session_st **)(v189 + 464);
    *(_QWORD *)(v189 + 464) = v185;
    if (v147)
    {
LABEL_333:
      for (m = atomic_load((unsigned int *)v147); m != -1; m = v191)
      {
        if (!m)
          goto LABEL_886;
        v191 = __ldaxr((unsigned int *)v147);
        if (v191 == m)
        {
          if (!__stlxr(m - 1, (unsigned int *)v147))
          {
            if (m == 1)
            {
              ssl_session_st::~ssl_session_st(v147);
              v193 = v147[-1].tlsext_tick_lifetime_hint;
              v192 = &v147[-1].tlsext_tick_lifetime_hint;
              v194 = v193 + 8;
              if (v193 != -8)
                bzero(v192, v194);
              free(v192);
            }
            break;
          }
        }
        else
        {
          __clrex();
        }
      }
    }
LABEL_344:
    *((_DWORD *)this + 392) |= 8u;
    *(_WORD *)(*((_QWORD *)v110 + 6) + 220) |= 0x20u;
    if (v130)
      bssl::ssl_update_cache(v110, (ssl_st *)a2);
    v97 = 22;
LABEL_347:
    *((_DWORD *)this + 5) = v97;
    goto LABEL_626;
  }
}

uint64_t sk_SSL_CIPHER_call_cmp_func(uint64_t (*a1)(uint64_t *, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a3;
  v5 = a2;
  return a1(&v5, &v4);
}

uint64_t bssl::ssl_server_handshake(bssl *this, bssl::SSL_HANDSHAKE *a2, BOOL *a3)
{
  unsigned int **v4;
  unint64_t **v5;
  int v6;
  void (*v7)(void);
  uint64_t prev_session;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t (*v12)(timeval *);
  int v13;
  int v14;
  int v15;
  bssl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD, _QWORD);
  int v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, _QWORD);
  int v24;
  bssl *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  int v38;
  _QWORD *v39;
  unsigned int **v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  bssl *v47;
  unint64_t v48;
  size_t v49;
  uint64_t v50;
  const ssl_st *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(void);
  int v55;
  int v56;
  unsigned __int16 *v57;
  int v58;
  _QWORD *v59;
  int v60;
  bssl *v61;
  unint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int v65;
  int v66;
  bssl *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned __int16 *v72;
  unint64_t v73;
  unsigned int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t finished;
  _QWORD *v81;
  bssl *v82;
  void (*v83)(_QWORD, timeval *);
  unint64_t v84;
  unint64_t v85;
  BOOL v86;
  unint64_t v87;
  uint64_t v88;
  bssl *v89;
  uint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v93;
  unsigned int *v94;
  uint64_t v95;
  __darwin_time_t v96;
  unsigned __int8 *v97;
  unint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  __darwin_time_t v102;
  uint64_t v103;
  __darwin_time_t v104;
  uint64_t v105;
  unint64_t **v106;
  _DWORD *v107;
  _DWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  unint64_t *v111;
  unint64_t v112;
  void *v113;
  uint64_t v114;
  size_t v115;
  unint64_t *v116;
  uint64_t v117;
  size_t v118;
  uint64_t v119;
  unint64_t v120;
  unsigned __int16 *v121;
  unint64_t v122;
  unint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  const ssl_st *v128;
  uint64_t v129;
  unint64_t v130;
  unsigned __int16 *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  unsigned int v140;
  int v141;
  int v142;
  void (*v143)(_QWORD, timeval *);
  uint64_t v144;
  _OWORD *v145;
  char *v146;
  uint64_t v147;
  size_t v148;
  char *v149;
  __int128 v150;
  uint64_t v151;
  unsigned __int16 *v152;
  uint64_t v153;
  int v154;
  int v155;
  BOOL v156;
  int v157;
  uint64_t *v158;
  unsigned __int8 *v159;
  const void *v160;
  uint64_t v161;
  size_t v162;
  __int16 v163;
  uint64_t v164;
  _OWORD *v165;
  __int128 v166;
  int v167;
  int v168;
  __int16 *v169;
  uint64_t v170;
  __int16 *v171;
  __int16 *v172;
  __int16 *v173;
  unsigned __int16 v174;
  unsigned __int16 *v175;
  __int16 *v176;
  int v177;
  unsigned __int16 *v178;
  unint64_t v179;
  char *v180;
  unint64_t *v181;
  unsigned int **v182;
  uint64_t v183;
  unsigned int *v184;
  uint64_t v185;
  __int16 v186;
  void *v187;
  int32x2_t *v188;
  void (*v189)(_QWORD, timeval *);
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  size_t v194;
  unsigned __int16 *v195;
  int v196;
  bssl *v197;
  unint64_t v198;
  void *v199;
  uint64_t v200;
  size_t v201;
  unint64_t *v202;
  uint64_t v203;
  size_t v204;
  uint64_t v205;
  ssl_session_st *v206;
  unsigned int k;
  unsigned int v208;
  uint64_t *v209;
  uint64_t v210;
  size_t v211;
  unsigned int *v212;
  unsigned int v213;
  unsigned int v214;
  char v215;
  uint64_t v216;
  ssl_session_st *v217;
  unsigned int m;
  unsigned int v219;
  uint64_t *v220;
  uint64_t v221;
  size_t v222;
  unint64_t v223;
  void *v224;
  uint64_t v225;
  size_t v226;
  unint64_t *v227;
  uint64_t v228;
  size_t v229;
  unint64_t v230;
  int32x2_t v231;
  uint64x2_t v232;
  unint64_t v233;
  unsigned __int16 *v234;
  uint64_t v235;
  int v236;
  int v237;
  size_t v238;
  unsigned __int16 *v239;
  size_t v240;
  unsigned __int16 *v241;
  unsigned __int16 *v242;
  unint64_t v243;
  unsigned int v244;
  unint64_t v245;
  size_t v246;
  unsigned __int16 *v247;
  unint64_t v248;
  int32x2_t v249;
  uint64x2_t v250;
  int v251;
  int v252;
  void *v253;
  uint64_t v254;
  size_t v255;
  unsigned int j;
  unsigned int v257;
  void *v258;
  uint64_t v259;
  size_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  unint64_t v264;
  uint64_t v265;
  unsigned __int16 *v266;
  unint64_t v267;
  unint64_t v268;
  const char *v269;
  size_t v270;
  uint64_t v271;
  __int16 v272;
  uint64_t v273;
  __int16 v274;
  char v275;
  _QWORD *v276;
  _QWORD *v277;
  char master_secret;
  uint64_t v279;
  int v280;
  unsigned int v281;
  unsigned int v282;
  char v283;
  ssl_credential_st *v284;
  unsigned __int8 v285;
  ssl_session_st *v286;
  bssl *v287;
  int v288;
  void *v289;
  _QWORD *v290;
  uint64_t v291;
  void *v292;
  unsigned int v293;
  uint64_t v294;
  unsigned int v295;
  int v296;
  _QWORD *v297;
  char *v298;
  BOOL v299;
  __int128 *v300;
  void *v301;
  void *v302;
  BOOL v303;
  int v304;
  const void *v305;
  char v306;
  void *v307;
  uint64_t v308;
  __int128 v309;
  size_t v310;
  const ssl_st *v311;
  unsigned int v312;
  unint64_t v313;
  int is_resumable;
  SSL_SESSION *v315;
  unsigned int v316;
  __darwin_time_t tv_sec;
  void *v318;
  uint64_t v319;
  size_t v320;
  void (*v321)(void);
  SSL_SESSION *v322;
  bssl::SSL_HANDSHAKE *v323;
  uint64_t v324;
  unsigned int (*v325)(timeval *);
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  unsigned int v330;
  unsigned int v331;
  int v332;
  unsigned int v334;
  const ssl_st *v335;
  bssl *v336;
  uint64_t v337;
  _QWORD *v338;
  unint64_t v339;
  const unsigned __int8 *v340;
  unsigned int v341;
  uint64_t v342;
  unsigned __int8 *v343;
  int v344;
  unint64_t v345;
  unsigned __int8 *v346;
  unsigned __int8 *v347;
  int v348;
  int v349;
  const void *v350;
  uint64_t v351;
  size_t v352;
  ssl_session_st *v353;
  unsigned int i;
  unsigned int v355;
  uint64_t *p_tlsext_tick_lifetime_hint;
  uint64_t tlsext_tick_lifetime_hint;
  size_t v358;
  uint64_t v359;
  void *v360;
  unint64_t v361;
  void *v362;
  uint64_t v363;
  size_t v364;
  uint64_t v365;
  size_t v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unsigned __int16 *v371;
  unsigned int v372;
  unsigned int v373;
  int v374;
  pthread_rwlock_t *v375;
  unsigned int *v376;
  unsigned int v377;
  unsigned int v378;
  char v379;
  unsigned int *v380;
  uint64_t v381;
  uint64_t v382;
  unsigned int v383;
  uint64_t *v384;
  uint64_t v385;
  size_t v386;
  _QWORD *v387;
  unint64_t v388;
  size_t v389;
  unint64_t v390;
  unint64_t v391;
  unint64_t v392;
  int8x16_t v393;
  int8x16_t v394;
  uint8x16_t *v395;
  unint64_t v396;
  uint64x2_t v397;
  uint8x16_t v398;
  uint16x8_t v399;
  uint32x4_t v400;
  uint32x4_t v401;
  uint16x8_t v402;
  uint32x4_t v403;
  int8x16_t v404;
  uint16x8_t v405;
  uint32x4_t v406;
  uint32x4_t v407;
  uint16x8_t v408;
  uint32x4_t v409;
  int8x16_t v410;
  int8x16_t v411;
  uint64_t v412;
  int v413;
  int8x8_t v414;
  uint8x8_t *v415;
  unint64_t v416;
  uint64x2_t v417;
  uint8x8_t v418;
  uint16x8_t v419;
  uint32x4_t v420;
  uint32x4_t v421;
  unint64_t v422;
  size_t v423;
  unsigned __int8 *v424;
  unsigned int v425;
  size_t v426;
  unsigned __int8 *v427;
  char v428;
  uint64_t (*v429)(bssl *, _QWORD, timeval *, uint64_t);
  char v430;
  unsigned int v431;
  int v432;
  unsigned int v433;
  void (*v434)(void);
  size_t v436;
  char *v437;
  unsigned int v438;
  bssl *v439;
  bssl *v440;
  unsigned int **v441;
  char v442;
  char v443;
  unsigned int **v444;
  unsigned __int16 *v445;
  size_t v446;
  _QWORD *v447;
  _QWORD *v448;
  char *v449;
  char *v450;
  bssl::SSLTranscript *v451;
  unint64_t **v452;
  uint64_t *v453;
  __int16 *v454;
  _WORD *v455;
  char *v456;
  char *v457;
  const void **v458;
  unsigned __int8 v459;
  unsigned __int16 v460;
  void *__dst;
  unsigned __int8 *v462;
  unint64_t v463;
  void *v464;
  size_t v465;
  void *v466[2];
  __int128 v467;
  __int128 v468;
  __int128 __key;
  __int128 v470;
  __int128 v471;
  timeval v472[3];
  const void *v473;
  unsigned __int8 v474;
  unsigned __int16 *v475;
  unint64_t v476;
  void *v477;
  size_t v478;
  unsigned __int16 *v479;
  unint64_t v480;
  uint64_t v481;
  int8x16x4_t v482;
  int8x16x4_t v483;
  int8x16x4_t v484;
  int8x16x4_t v485;
  int8x16x4_t v486;

  v4 = (unsigned int **)((char *)this + 1496);
  v5 = (unint64_t **)((char *)this + 408);
  v481 = *MEMORY[0x24BDAC8D0];
  v453 = (uint64_t *)((char *)this + 1432);
  v456 = (char *)this + 1613;
  v457 = (char *)this + 1581;
  v454 = (__int16 *)((char *)this + 30);
  v455 = (_WORD *)((char *)this + 28);
  v447 = (_QWORD *)((char *)this + 584);
  v458 = (const void **)((char *)this + 1544);
  v450 = (char *)this + 416;
  v448 = (_QWORD *)((char *)this + 720);
  v449 = (char *)this + 744;
  while (2)
  {
    v6 = *((_DWORD *)this + 5);
    switch(v6)
    {
      case 0:
        v7 = *(void (**)(void))(*(_QWORD *)this + 96);
        if (v7 || (v7 = *(void (**)(void))(*(_QWORD *)(*(_QWORD *)this + 104) + 384)) != 0)
          v7();
        prev_session = 1;
        *((_DWORD *)this + 5) = 1;
        if (v6 != 1)
          goto LABEL_629;
        goto LABEL_3;
      case 1:
        v9 = *(_QWORD *)this;
        if (!(*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)this + 24))(*(_QWORD *)this, &__key))
          goto LABEL_179;
        if (BYTE1(__key) == 1)
        {
          v466[0] = *((void **)&__key + 1);
          v466[1] = (void *)v470;
          if (bssl::ssl_parse_client_hello_with_trailing_data(v9, (unint64_t *)v466, (uint64_t)v472)&& !v466[1])
          {
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9))
            {
              bssl::ssl_send_alert((bssl *)v9, (ssl_st *)2, 10);
              v10 = 255;
              v11 = 680;
              goto LABEL_812;
            }
            if ((*(_WORD *)(*((_QWORD *)this + 1) + 237) & 0x40) != 0)
            {
              prev_session = 6;
              if (*((_DWORD *)this + 5) == v6)
                goto LABEL_3;
              goto LABEL_629;
            }
            LOBYTE(__dst) = 50;
            v264 = v480;
            if (!v480)
            {
LABEL_707:
              if ((bssl::SSL_HANDSHAKE::GetClientHello((uint64_t)this, (uint64_t)&__key, (uint64_t)v472) & 1) != 0)
              {
LABEL_708:
                if ((bssl::extract_sni((uint64_t *)this, (char *)&__dst, v479, v480) & 1) != 0)
                {
                  *((_DWORD *)this + 5) = 2;
LABEL_392:
                  prev_session = 1;
                  if (*((_DWORD *)this + 5) == v6)
                    goto LABEL_3;
                  goto LABEL_629;
                }
LABEL_710:
                v17 = __dst;
                goto LABEL_711;
              }
LABEL_811:
              v10 = 68;
              v11 = 697;
LABEL_812:
              ERR_put_error(16, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", v11);
              prev_session = 0;
              if (*((_DWORD *)this + 5) == v6)
                goto LABEL_3;
              goto LABEL_629;
            }
            v265 = *(_QWORD *)this;
            v266 = v479;
            while (1)
            {
              if (v264 < 2)
                goto LABEL_707;
              if ((v264 & 0xFFFFFFFFFFFFFFFELL) == 2)
                goto LABEL_707;
              v267 = v264 - 4;
              v268 = __rev16(v266[1]);
              if (v267 < v268)
                goto LABEL_707;
              if (__rev16(*v266) == 65037)
                break;
              v266 = (unsigned __int16 *)((char *)v266 + v268 + 4);
              v264 = v267 - v268;
              if (!v264)
                goto LABEL_707;
            }
            if (v268)
            {
              if (*((_BYTE *)v266 + 4))
                goto LABEL_707;
              if (v268 >= 3 && v268 - 3 >= 2 && v268 != 5 && (v268 & 0xFFFE) != 6)
              {
                v367 = v268 - 8;
                v368 = __rev16(v266[5]);
                v86 = v367 >= v368;
                v369 = v367 - v368;
                if (v86)
                {
                  v86 = v369 >= 2;
                  v370 = v369 - 2;
                  if (v86)
                  {
                    v440 = (bssl *)(v266 + 6);
                    v371 = (unsigned __int16 *)((char *)v266 + v368 + 12);
                    v436 = __rev16(*v371);
                    v437 = (char *)(v371 + 1);
                    if (v370 == v436)
                    {
                      v452 = v5;
                      v444 = v4;
                      v372 = *(unsigned __int16 *)((char *)v266 + 5);
                      v373 = *(unsigned __int16 *)((char *)v266 + 7);
                      v374 = *((unsigned __int8 *)v266 + 9);
                      v375 = (pthread_rwlock_t *)(*(_QWORD *)(v265 + 104) + 24);
                      if (pthread_rwlock_rdlock(v375))
                        goto LABEL_855;
                      v376 = *(unsigned int **)(*(_QWORD *)(v265 + 104) + 680);
                      if (v376)
                      {
                        v377 = atomic_load(v376);
                        if (v377 != -1)
                        {
                          while (1)
                          {
                            v378 = __ldaxr(v376);
                            if (v378 == v377)
                            {
                              if (!__stlxr(v377 + 1, v376))
                              {
                                v379 = 1;
                                goto LABEL_775;
                              }
                            }
                            else
                            {
                              __clrex();
                            }
                            v379 = 0;
LABEL_775:
                            if ((v379 & 1) == 0)
                            {
                              v377 = v378;
                              if (v378 != -1)
                                continue;
                            }
                            break;
                          }
                        }
                      }
                      v380 = (unsigned int *)*((_QWORD *)this + 190);
                      *((_QWORD *)this + 190) = v376;
                      if (v380)
                        bssl::RefCounted<ssl_ech_keys_st>::DecRefInternal(v380);
                      if (pthread_rwlock_unlock(v375))
LABEL_855:
                        abort();
                      v381 = *((_QWORD *)this + 190);
                      if (!v381 || (v382 = *(_QWORD *)(v381 + 8)) == 0)
                      {
LABEL_809:
                        v412 = *(_QWORD *)(v265 + 48);
                        v413 = 2;
LABEL_810:
                        *(_DWORD *)(v412 + 216) = v413;
                        v4 = v444;
                        v5 = v452;
                        if ((bssl::SSL_HANDSHAKE::GetClientHello((uint64_t)this, (uint64_t)&__key, (uint64_t)v472) & 1) != 0)
                          goto LABEL_708;
                        goto LABEL_811;
                      }
                      v438 = bswap32(v372) >> 16;
                      v383 = bswap32(v373) >> 16;
                      v384 = *(uint64_t **)(v381 + 16);
                      v385 = 8 * v382;
                      while (1)
                      {
                        while (1)
                        {
                          if (*(_QWORD *)v449)
                          {
                            (*(void (**)(char *))(*(_QWORD *)v449 + 24))(v449);
                            *(_QWORD *)v449 = 0;
                          }
                          EVP_HPKE_CTX_zero((uint64_t)v448);
                          if (v374 == *(unsigned __int8 *)(*v384 + 67)
                            && (bssl::ECHServerConfig::SetupContext(*v384, v448, v438, v383, (uint64_t)v440, v368) & 1) != 0)
                          {
                            break;
                          }
                          ERR_clear_error();
                          ++v384;
                          v385 -= 8;
                          if (!v385)
                            goto LABEL_809;
                        }
                        LOBYTE(v466[0]) = 0;
                        if ((bssl::ssl_client_hello_decrypt((int8x16_t *)this, &__dst, v466, v447, v472, v437, v436) & 1) != 0)
                        {
                          *((_BYTE *)this + 1580) = v374;
                          v412 = *(_QWORD *)(v265 + 48);
                          v413 = 1;
                          goto LABEL_810;
                        }
                        if (!LOBYTE(v466[0]))
                          break;
                        ERR_clear_error();
                        LOBYTE(__dst) = 50;
                        ++v384;
                        v385 -= 8;
                        if (!v385)
                          goto LABEL_809;
                      }
                      ERR_put_error(16, 0, 138, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 594);
                      v17 = __dst;
                      v4 = v444;
                      v5 = v452;
LABEL_711:
                      v16 = (bssl *)v9;
                      goto LABEL_712;
                    }
                  }
                }
              }
              v304 = 558;
            }
            else
            {
              v304 = 541;
            }
LABEL_579:
            ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", v304);
            v17 = 50;
LABEL_592:
            LOBYTE(__dst) = v17;
            goto LABEL_711;
          }
          v75 = 671;
LABEL_609:
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", v75);
          v16 = (bssl *)v9;
          v17 = 50;
LABEL_712:
          bssl::ssl_send_alert(v16, (ssl_st *)2, v17);
          prev_session = 0;
          if (*((_DWORD *)this + 5) == v6)
            goto LABEL_3;
          goto LABEL_629;
        }
        bssl::ssl_send_alert((bssl *)v9, (ssl_st *)2, 10);
        ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 211);
        v139 = BYTE1(__key);
LABEL_397:
        ERR_add_error_dataf("got type %d, wanted type %d", v132, v133, v134, v135, v136, v137, v138, v139);
        prev_session = 0;
        if (*((_DWORD *)this + 5) != v6)
          goto LABEL_629;
LABEL_3:
        if ((_DWORD)prev_session == 1)
          continue;
        return prev_session;
      case 2:
        v9 = *(_QWORD *)this;
        if (!bssl::SSL_HANDSHAKE::GetClientHello((uint64_t)this, (uint64_t)&__key, (uint64_t)v472))
          goto LABEL_606;
        v12 = *(uint64_t (**)(timeval *))(*(_QWORD *)(v9 + 104) + 472);
        if (!v12)
          goto LABEL_192;
        v13 = v12(v472);
        if (!v13)
        {
          prev_session = 5;
          if (*((_DWORD *)this + 5) == v6)
            goto LABEL_3;
          goto LABEL_629;
        }
        if (v13 == -1)
        {
          v14 = 133;
          v15 = 727;
          goto LABEL_21;
        }
LABEL_192:
        if (!bssl::ssl_get_version_range(this, v455, v454))
          goto LABEL_606;
        if ((*(_WORD *)(*((_QWORD *)this + 1) + 237) & 0x100) == 0)
          goto LABEL_194;
        v233 = v476;
        if (!v476)
          goto LABEL_417;
        v234 = v475;
        do
        {
          if (v233 < 2)
            break;
          if (bswap32(*v234) >> 16 == 4867)
            goto LABEL_194;
          ++v234;
          v233 -= 2;
        }
        while (v233);
LABEL_417:
        v235 = 0;
        v236 = 0;
        v237 = 0;
        v238 = 0;
        v239 = 0;
        v240 = 0;
        v241 = 0;
        v242 = v479;
        v243 = v480;
        do
        {
          if (v243 >= 2
            && (v244 = __rev16(*v242),
                v244 == (unsigned __int16)bssl::is_probably_jdk11_with_tls13(ssl_early_callback_ctx const*)::kJavaExtensions[v235]))
          {
            if ((v243 & 0xFFFFFFFFFFFFFFFELL) == 2)
              goto LABEL_194;
            v245 = v243 - 4;
            v246 = __rev16(v242[1]);
            v86 = v245 >= v246;
            v243 = v245 - v246;
            if (!v86)
              goto LABEL_194;
            v247 = v242 + 2;
            v242 = (unsigned __int16 *)((char *)v242 + v246 + 4);
            switch(v244)
            {
              case 5u:
                v236 = 1;
                break;
              case 0xAu:
                v445 = v247;
                v446 = v246;
                break;
              case 0xDu:
                v241 = v247;
                v240 = v246;
                break;
              case 0x11u:
                v237 = 1;
                break;
              case 0x32u:
                v239 = v247;
                v238 = v246;
                break;
              default:
                break;
            }
          }
          else if (LOBYTE(bssl::is_probably_jdk11_with_tls13(ssl_early_callback_ctx const*)::kJavaExtensions[v235 + 1]))
          {
            goto LABEL_194;
          }
          v235 += 2;
        }
        while (v235 != 32);
        if (!v243)
        {
          while (v446)
          {
            if (v446 != 1)
            {
              v295 = *v445++;
              v446 -= 2;
              if (__rev16(v295) != 29)
                continue;
            }
            goto LABEL_194;
          }
          if (v240 == v238)
          {
            if (memcmp(v241, v239, v240) || ((v237 ^ v236) & 1) != 0)
            {
              v446 = 0;
            }
            else
            {
              v446 = 0;
              *((_DWORD *)this + 392) |= 0x200000u;
            }
          }
          else
          {
            v446 = 0;
          }
        }
LABEL_194:
        LOBYTE(__dst) = 50;
        v119 = *(_QWORD *)this;
        v120 = v480;
        if (v480)
        {
          v121 = v479;
          do
          {
            if (v120 < 2)
              break;
            if ((v120 & 0xFFFFFFFFFFFFFFFELL) == 2)
              break;
            v122 = v120 - 4;
            v123 = __rev16(v121[1]);
            if (v122 < v123)
              break;
            v124 = (unsigned __int8 *)(v121 + 2);
            if (__rev16(*v121) == 43)
            {
              if (!v123
                || (v301 = (void *)(v123 - 1), v302 = (void *)*v124, v301 < v302)
                || ((v466[0] = (char *)v121 + 5, v466[1] = v302, v301 == v302) ? (v303 = (_DWORD)v302 == 0) : (v303 = 1),
                    v303))
              {
                v304 = 206;
                goto LABEL_579;
              }
              goto LABEL_214;
            }
            v121 = (unsigned __int16 *)&v124[v123];
            v120 = v122 - v123;
          }
          while (v120);
        }
        v125 = 2 * (LOWORD(v472[1].tv_usec) > 0x300u);
        if (LOWORD(v472[1].tv_usec) == 770)
          v125 = 4;
        if (LOWORD(v472[1].tv_usec) > 0x302u)
          v125 = 6;
        if (LOWORD(v472[1].tv_usec) >= 0xFEFEu)
          v126 = 2 * (HIBYTE(LOWORD(v472[1].tv_usec)) < 0xFFu);
        else
          v126 = 4;
        if (**(_BYTE **)v119)
          v127 = (char *)&bssl::negotiate_version(bssl::SSL_HANDSHAKE *,unsigned char *,ssl_early_callback_ctx const*)::kDTLSVersions
               - v126
               + 4;
        else
          v127 = (char *)&bssl::negotiate_version(bssl::SSL_HANDSHAKE *,unsigned char *,ssl_early_callback_ctx const*)::kTLSVersions
               - v125
               + 6;
        if (!**(_BYTE **)v119)
          v126 = v125;
        v466[0] = v127;
        v466[1] = (void *)v126;
LABEL_214:
        if ((bssl::ssl_negotiate_version((uint64_t)this, &__dst, (_WORD *)(v119 + 16), (unsigned __int16 **)v466) & 1) == 0)
          goto LABEL_710;
        *(_WORD *)(*(_QWORD *)(v119 + 48) + 220) |= 2u;
        v129 = *(_QWORD *)(*(_QWORD *)(v119 + 48) + 272);
        if (!*(_QWORD *)v129)
          *(_WORD *)(v129 + 606) = *(_WORD *)(v119 + 16);
        v130 = v476;
        if (v476)
        {
          v131 = v475;
          while (v130 >= 2)
          {
            if (bswap32(*v131) >> 16 == 22016)
            {
              if (bssl::ssl_protocol_version((bssl *)v119, v128) < (unsigned __int16)*v454)
              {
                ERR_put_error(16, 0, 157, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 257);
                v17 = 86;
                goto LABEL_592;
              }
              break;
            }
            ++v131;
            v130 -= 2;
            if (!v130)
              break;
          }
        }
        *((_WORD *)this + 786) = v472[1].tv_usec;
        if (*(_QWORD *)&v472[2].tv_usec != 32)
        {
          v10 = 68;
          v11 = 754;
          goto LABEL_812;
        }
        v308 = *(_QWORD *)(v9 + 48);
        v309 = *(_OWORD *)(v472[2].tv_sec + 16);
        *(_OWORD *)(v308 + 48) = *(_OWORD *)v472[2].tv_sec;
        *(_OWORD *)(v308 + 64) = v309;
        v310 = v478;
        if (!v478
          || !memchr(v477, 0, v478)
          || (v312 = bssl::ssl_protocol_version((bssl *)v9, v311), v310 != 1) && v312 >= 0x304)
        {
          ERR_put_error(16, 0, 256, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 766);
          v16 = (bssl *)v9;
          v17 = 47;
          goto LABEL_712;
        }
        if ((bssl::ssl_parse_clienthello_tlsext((uint64_t)this, v472) & 1) != 0)
        {
          *((_DWORD *)this + 5) = 3;
          goto LABEL_392;
        }
        v10 = 190;
        v11 = 773;
        goto LABEL_812;
      case 3:
        v18 = *(_QWORD *)this;
        v19 = *(_QWORD *)(*((_QWORD *)this + 1) + 32);
        v20 = *(uint64_t (**)(_QWORD, _QWORD))(v19 + 64);
        if (!v20)
          goto LABEL_25;
        v21 = v20(*(_QWORD *)this, *(_QWORD *)(v19 + 72));
        if (!v21)
        {
          v141 = 126;
          v142 = 788;
          goto LABEL_473;
        }
        if ((v21 & 0x80000000) == 0)
        {
LABEL_25:
          if ((*((_BYTE *)this + 1568) & 0x80) == 0)
            goto LABEL_30;
          v22 = *(_QWORD *)(v18 + 104);
          v23 = *(uint64_t (**)(uint64_t, _QWORD))(v22 + 720);
          if (!v23)
            goto LABEL_30;
          v24 = v23(v18, *(_QWORD *)(v22 + 728));
          if (!v24)
            goto LABEL_30;
          if (v24 == 3)
          {
            *((_DWORD *)this + 392) &= ~0x80u;
LABEL_30:
            if (*(_WORD *)(v18 + 16) == 772)
            {
              *((_DWORD *)this + 5) = 4;
              goto LABEL_392;
            }
            *(_DWORD *)(*(_QWORD *)(v18 + 48) + 256) = 3;
            v78 = 5;
LABEL_391:
            *((_DWORD *)this + 5) = v78;
            goto LABEL_392;
          }
          v141 = 289;
          v142 = 807;
LABEL_473:
          ERR_put_error(16, 0, v141, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", v142);
          v16 = (bssl *)v18;
          v17 = 80;
          goto LABEL_712;
        }
        prev_session = 8;
        if (*((_DWORD *)this + 5) == v6)
          goto LABEL_3;
        goto LABEL_629;
      case 4:
        prev_session = bssl::tls13_server_handshake(this, a2, a3);
        if ((_DWORD)prev_session != 1)
          goto LABEL_628;
        *((_DWORD *)this + 5) = 20;
        if (v6 != 20)
          goto LABEL_629;
        goto LABEL_3;
      case 5:
        v25 = *(bssl **)this;
        if (!bssl::SSL_HANDSHAKE::GetClientHello((uint64_t)this, (uint64_t)v466, (uint64_t)v472))
          goto LABEL_606;
        v26 = *((_QWORD *)this + 1);
        v27 = *(_QWORD *)(v26 + 104);
        if (v27)
        {
          v28 = *(__int16 **)(v26 + 96);
        }
        else
        {
          v27 = 3;
          v28 = &bssl::kDefaultGroups;
        }
        v169 = (__int16 *)*((_QWORD *)this + 81);
        v170 = *((_QWORD *)this + 82);
        v451 = (bssl::SSLTranscript *)v5;
        if ((*(_BYTE *)(*(_QWORD *)this + 130) & 0x40) == 0)
        {
          if (v170)
          {
            v171 = &v169[v170];
            v172 = v28;
            v173 = &v28[v27];
            goto LABEL_291;
          }
LABEL_300:
          v174 = 0;
          v177 = 0;
          v178 = v475;
          v179 = v476;
          v180 = OPENSSL_sk_new_null();
          if (!v180)
            goto LABEL_321;
          goto LABEL_301;
        }
        if (!v170)
          goto LABEL_300;
        v173 = &v169[v170];
        v172 = (__int16 *)*((_QWORD *)this + 81);
        v169 = v28;
        v171 = &v28[v27];
LABEL_291:
        v174 = *v169;
        v175 = (unsigned __int16 *)v172;
        v176 = v172;
        if (*v169 == 25497)
        {
          while (*v176 != 25497 || *(_WORD *)(*(_QWORD *)this + 16) != 772)
          {
            if (++v176 == v173)
            {
LABEL_290:
              if (++v169 == v171)
                goto LABEL_300;
              goto LABEL_291;
            }
          }
          v177 = 1;
          v174 = 25497;
          v178 = v475;
          v179 = v476;
          v180 = OPENSSL_sk_new_null();
          if (!v180)
            goto LABEL_321;
        }
        else
        {
          while (*v175 != v174)
          {
            if (++v175 == (unsigned __int16 *)v173)
              goto LABEL_290;
          }
          v177 = 1;
          v178 = v475;
          v179 = v476;
          v180 = OPENSSL_sk_new_null();
          if (!v180)
          {
LABEL_321:
            prev_session = 0;
            v5 = (unint64_t **)v451;
            if (*((_DWORD *)this + 5) == v6)
              goto LABEL_3;
            goto LABEL_629;
          }
        }
LABEL_301:
        v181 = (unint64_t *)v180;
        if (v179)
        {
          while (v179 > 1)
          {
            LODWORD(v470) = (bswap32(*v178) >> 16) | 0x3000000;
            v187 = bsearch(&__key, bssl::kCiphers, 0x18uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
            if (v187 && !OPENSSL_sk_insert(v181, (uint64_t)v187, *v181))
              goto LABEL_402;
            ++v178;
            v179 -= 2;
            if (!v179)
              goto LABEL_302;
          }
          ERR_put_error(16, 0, 148, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 280);
LABEL_402:
          v223 = v181[1];
          v5 = (unint64_t **)v451;
          if (v223)
          {
            v225 = *(_QWORD *)(v223 - 8);
            v224 = (void *)(v223 - 8);
            v226 = v225 + 8;
            if (v225 != -8)
              bzero(v224, v226);
            free(v224);
          }
          v228 = *(v181 - 1);
          v227 = v181 - 1;
          v229 = v228 + 8;
          if (v228 != -8)
            bzero(v227, v229);
          prev_session = 0;
          goto LABEL_740;
        }
LABEL_302:
        __key = 0uLL;
        if (bssl::ssl_get_credential_list((uint64_t)this, (uint64_t *)&__key))
        {
          v439 = v25;
          v441 = v4;
          if (*((_QWORD *)&__key + 1))
          {
            v182 = (unsigned int **)__key;
            v183 = 8 * *((_QWORD *)&__key + 1);
            while (1)
            {
              v184 = *v182;
              ERR_clear_error();
              v185 = bssl::choose_params((uint64_t)this, (uint64_t)v184, v181, v177);
              if (v185)
                break;
              ++v182;
              v183 -= 8;
              if (!v183)
                goto LABEL_488;
            }
            v273 = v185;
            v274 = v186;
            v4 = v441;
            if (v184)
            {
              v281 = atomic_load(v184);
              if (v281 != -1)
              {
                while (1)
                {
                  v282 = __ldaxr(v184);
                  if (v282 == v281)
                  {
                    if (!__stlxr(v281 + 1, v184))
                    {
                      v283 = 1;
                      goto LABEL_513;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  v283 = 0;
LABEL_513:
                  if ((v283 & 1) == 0)
                  {
                    v281 = v282;
                    if (v282 != -1)
                      continue;
                  }
                  break;
                }
              }
            }
            v284 = (ssl_credential_st *)*((_QWORD *)this + 186);
            *((_QWORD *)this + 186) = v184;
            if (v284)
              SSL_CREDENTIAL_free(v284);
LABEL_517:
            *((_QWORD *)this + 192) = v273;
            *((_WORD *)this + 789) = v274;
            v285 = v474;
            *((_BYTE *)this + 1613) = v474;
            if (v285)
              memcpy(v457, v473, v285);
            __dst = 0;
            LOBYTE(v464) = 0;
            LOBYTE(v460) = 0;
            prev_session = bssl::ssl_get_prev_session((uint64_t *)this, (ssl_session_st **)&__dst, (char *)&v464, &v460, v472);
            v5 = (unint64_t **)v451;
            if ((_DWORD)prev_session != 1)
            {
LABEL_718:
              v353 = (ssl_session_st *)__dst;
              __dst = 0;
              if (v353)
              {
                for (i = atomic_load((unsigned int *)v353); i != -1; i = v355)
                {
                  if (!i)
                    goto LABEL_855;
                  v355 = __ldaxr((unsigned int *)v353);
                  if (v355 == i)
                  {
                    if (!__stlxr(i - 1, (unsigned int *)v353))
                    {
                      if (i == 1)
                      {
                        ssl_session_st::~ssl_session_st(v353);
                        tlsext_tick_lifetime_hint = v353[-1].tlsext_tick_lifetime_hint;
                        p_tlsext_tick_lifetime_hint = &v353[-1].tlsext_tick_lifetime_hint;
                        v358 = tlsext_tick_lifetime_hint + 8;
                        if (tlsext_tick_lifetime_hint != -8)
                          bzero(p_tlsext_tick_lifetime_hint, v358);
                        free(p_tlsext_tick_lifetime_hint);
                      }
                      goto LABEL_730;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                }
              }
              goto LABEL_730;
            }
            if (!__dst)
              goto LABEL_638;
            if ((*((_BYTE *)__dst + 424) & 1) != 0 && (*((_BYTE *)this + 1570) & 1) == 0)
            {
              ERR_put_error(16, 0, 204, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 909);
              v287 = v439;
              v288 = 40;
LABEL_716:
              bssl::ssl_send_alert(v287, (ssl_st *)2, v288);
              goto LABEL_717;
            }
            is_resumable = bssl::ssl_session_is_resumable(this, (uint64_t)__dst);
            v315 = (SSL_SESSION *)__dst;
            if (is_resumable)
            {
              v316 = *((_DWORD *)this + 392);
              if ((HIWORD(v316) & 1) == (*((_BYTE *)__dst + 424) & 1))
              {
LABEL_635:
                *((_DWORD *)this + 392) = v316 & 0xFFFF7FFF | (v460 << 15);
                __dst = 0;
                v322 = (SSL_SESSION *)*((_QWORD *)v439 + 11);
                *((_QWORD *)v439 + 11) = v315;
                if (v322)
                  SSL_SESSION_free(v322);
                *(_WORD *)(*((_QWORD *)v439 + 6) + 220) |= 0x40u;
                *((_DWORD *)this + 392) |= 0x400000u;
                goto LABEL_642;
              }
              __dst = 0;
            }
            else
            {
              __dst = 0;
              if (!v315)
                goto LABEL_638;
            }
            SSL_SESSION_free(v315);
            v315 = (SSL_SESSION *)__dst;
            if (__dst)
            {
              v316 = *((_DWORD *)this + 392);
              goto LABEL_635;
            }
LABEL_638:
            *((_DWORD *)this + 392) = *((_DWORD *)this + 392) & 0xFFFF7FFF | (v464 << 15);
            bssl::ssl_set_session(v439, 0, v286);
            if (!bssl::ssl_get_new_session(this, v323))
            {
LABEL_717:
              prev_session = 0;
              goto LABEL_718;
            }
            if ((*((_BYTE *)this + 1569) & 0x80) == 0 && (*(_BYTE *)(*((_QWORD *)v439 + 13) + 292) & 2) != 0)
            {
              v324 = *((_QWORD *)this + 188);
              *(_BYTE *)(v324 + 59) = 32;
              RAND_bytes_with_additional_data(v324 + 60, 0x20uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
            }
LABEL_642:
            v325 = *(unsigned int (**)(timeval *))(*((_QWORD *)v439 + 13) + 480);
            if (v325 && !v325(v472))
            {
              ERR_put_error(16, 0, 133, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 947);
            }
            else
            {
              if (!*((_QWORD *)v439 + 11))
              {
                v326 = *((_QWORD *)this + 192);
                *(_QWORD *)(*((_QWORD *)this + 188) + 200) = v326;
                v327 = *((_QWORD *)this + 188);
                if ((*(_BYTE *)(*(_QWORD *)(v327 + 200) + 20) & 2) != 0)
                  *(_WORD *)(v327 + 6) = v174;
                v328 = *((_QWORD *)this + 1);
                v329 = *((_DWORD *)this + 392);
                v330 = v329 & 0xFFFFFFDF;
                v156 = (v329 & 0x800000) == 0;
                v331 = v329 & 0xFFFFFFDF | (32 * (*(_BYTE *)(v328 + 236) & 1));
                *((_DWORD *)this + 392) = v331;
                v332 = *(_BYTE *)(v328 + 236) & 4;
                if (v156 || v332 == 0)
                  v334 = v331;
                else
                  v334 = v330;
                *((_DWORD *)this + 392) = v334;
                if ((*(_BYTE *)(v326 + 24) & 7) == 0)
                {
                  v334 &= ~0x20u;
                  *((_DWORD *)this + 392) = v334;
                }
                if ((v334 & 0x20) == 0)
                  *(_QWORD *)(v327 + 176) = 0;
              }
              v459 = 50;
              if ((bssl::ssl_negotiate_alpn(this, &v459, (uint64_t)v472) & 1) == 0)
              {
                v288 = v459;
                v287 = v439;
                goto LABEL_716;
              }
              v336 = (bssl *)bssl::ssl_protocol_version(v439, v335);
              if (bssl::SSLTranscript::InitHash((uint64_t **)v451, v336, *((const ssl_cipher_st **)this + 192))&& (bssl::ssl_hash_message((uint64_t)this, (uint64_t)v466) & 1) != 0)
              {
                if ((*((_DWORD *)this + 392) & 0x40020) == 0)
                  bssl::SSLTranscript::FreeBuffer(v451);
                (*(void (**)(bssl *))(*(_QWORD *)v439 + 32))(v439);
                *((_DWORD *)this + 5) = 6;
                prev_session = 1;
                goto LABEL_718;
              }
            }
            v287 = v439;
            v288 = 80;
            goto LABEL_716;
          }
          v271 = bssl::choose_params((uint64_t)this, 0, v181, v177);
          if (v271)
          {
            v273 = v271;
            v274 = v272;
            goto LABEL_517;
          }
LABEL_488:
          bssl::ssl_send_alert(v439, (ssl_st *)2, 40);
          prev_session = 0;
          v4 = v441;
          v5 = (unint64_t **)v451;
        }
        else
        {
          prev_session = 0;
          v5 = (unint64_t **)v451;
        }
LABEL_730:
        if ((_QWORD)__key)
        {
          v360 = (void *)(__key - 8);
          v359 = *(_QWORD *)(__key - 8);
          if (v359 != -8)
            bzero((void *)(__key - 8), v359 + 8);
          free(v360);
        }
        v361 = v181[1];
        if (v361)
        {
          v363 = *(_QWORD *)(v361 - 8);
          v362 = (void *)(v361 - 8);
          v364 = v363 + 8;
          if (v363 != -8)
            bzero(v362, v364);
          free(v362);
        }
        v365 = *(v181 - 1);
        v227 = v181 - 1;
        v366 = v365 + 8;
        if (v365 != -8)
          bzero(v227, v366);
LABEL_740:
        free(v227);
        if (*((_DWORD *)this + 5) == v6)
          goto LABEL_3;
        goto LABEL_629;
      case 6:
        v29 = *((_DWORD *)this + 392);
        if ((v29 & 0x800000) != 0 && (*(_BYTE *)(*((_QWORD *)this + 192) + 20) & 2) == 0)
        {
          v29 &= ~0x800000u;
          *((_DWORD *)this + 392) = v29;
        }
        v30 = *(_QWORD *)this;
        v31 = *(_QWORD *)(*(_QWORD *)this + 88);
        if (v31 && !*(_BYTE *)(v31 + 360))
        {
          v29 &= ~0x800000u;
          *((_DWORD *)this + 392) = v29;
          v32 = *((_QWORD *)this + 195);
          if (!v32)
            goto LABEL_236;
        }
        else
        {
          v32 = *((_QWORD *)this + 195);
          if (!v32)
            goto LABEL_236;
        }
        if ((v29 & 0x80000) == 0 && *(_QWORD *)(v32 + 8) == 32)
        {
          v33 = *(_QWORD *)(v30 + 48);
          v34 = *(_OWORD *)(*(_QWORD *)v32 + 16);
          *(_OWORD *)(v33 + 16) = *(_OWORD *)*(_QWORD *)v32;
          *(_OWORD *)(v33 + 32) = v34;
          goto LABEL_247;
        }
LABEL_236:
        v143 = *(void (**)(_QWORD, timeval *))(*(_QWORD *)(v30 + 104) + 696);
        if (v143)
          v143(0, v472);
        else
          gettimeofday(v472, 0);
        *(_DWORD *)(*(_QWORD *)(v30 + 48) + 16) = bswap32(v472[0].tv_sec & ~(v472[0].tv_sec >> 63));
        RAND_bytes_with_additional_data(*(_QWORD *)(v30 + 48) + 20, 0x1CuLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
        if (!v32 || (*((_BYTE *)this + 1570) & 8) == 0)
          goto LABEL_247;
        v144 = *(_QWORD *)(v30 + 48);
        v145 = *(_OWORD **)v32;
        if (*(_QWORD *)v32)
        {
          v147 = *((_QWORD *)v145 - 1);
          v146 = (char *)v145 - 8;
          v148 = v147 + 8;
          if (v147 != -8)
            bzero(v146, v148);
          free(v146);
        }
        *(_QWORD *)v32 = 0;
        *(_QWORD *)(v32 + 8) = 0;
        v149 = (char *)malloc_type_malloc(0x28uLL, 0x30772F57uLL);
        if (!v149)
        {
          ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
          prev_session = 0;
          *(_QWORD *)v32 = 0;
          if (*((_DWORD *)this + 5) == v6)
            goto LABEL_3;
LABEL_629:
          v321 = *(void (**)(void))(*(_QWORD *)this + 96);
          if (v321 || (v321 = *(void (**)(void))(*(_QWORD *)(*(_QWORD *)this + 104) + 384)) != 0)
            v321();
          goto LABEL_3;
        }
        *(_QWORD *)v149 = 32;
        *(_QWORD *)v32 = v149 + 8;
        *(_QWORD *)(v32 + 8) = 32;
        v150 = *(_OWORD *)(v144 + 16);
        *(_OWORD *)(v149 + 24) = *(_OWORD *)(v144 + 32);
        *(_OWORD *)(v149 + 8) = v150;
LABEL_247:
        v151 = 8;
        if (***(_BYTE ***)this)
          v151 = 4;
        v152 = (unsigned __int16 *)&bssl::kDTLSVersions;
        if (!***(_BYTE ***)this)
          v152 = (unsigned __int16 *)&bssl::kTLSVersions;
        v153 = v151 - 2;
        do
        {
          v155 = *v152++;
          v154 = v155;
          v156 = v155 == 772 || v153 == 0;
          v153 -= 2;
        }
        while (!v156);
        if (v154 == 772 && (unsigned __int16)*v455 <= 0x304u && (unsigned __int16)*v454 >= 0x304u)
        {
          v157 = *(unsigned __int16 *)(v30 + 16);
          if (v157 == 65277 || (v158 = (uint64_t *)"DOWNGRD", v157 == 771))
          {
            v158 = &bssl::kJDK11DowngradeRandom;
            if ((*((_BYTE *)this + 1570) & 0x20) == 0)
              v158 = &bssl::kTLS13DowngradeRandom;
          }
          *(_QWORD *)(*(_QWORD *)(v30 + 48) + 40) = *v158;
        }
        v159 = (unsigned __int8 *)v456;
        v160 = v457;
        if (!*(_QWORD *)(v30 + 88))
        {
          v161 = *((_QWORD *)this + 188);
          v160 = (const void *)(v161 + 60);
          v159 = (unsigned __int8 *)(v161 + 59);
        }
        v162 = *v159;
        memset(v472, 0, sizeof(v472));
        if (!(*(unsigned int (**)(uint64_t, timeval *, __int128 *, uint64_t))(*(_QWORD *)v30 + 88))(v30, v472, &__key, 2))goto LABEL_282;
        v163 = *(_WORD *)(v30 + 16);
        v466[0] = 0;
        if (!CBB_add_space((uint64_t)&__key, v466, 2))
          goto LABEL_282;
        *((_BYTE *)v466[0] + 1) = v163;
        *(_BYTE *)v466[0] = HIBYTE(v163);
        v164 = *(_QWORD *)(v30 + 48);
        v466[0] = 0;
        if (!CBB_add_space((uint64_t)&__key, v466, 32))
          goto LABEL_282;
        v165 = v466[0];
        v166 = *(_OWORD *)(v164 + 32);
        *(_OWORD *)v466[0] = *(_OWORD *)(v164 + 16);
        v165[1] = v166;
        if (!CBB_flush((uint64_t *)&__key))
          goto LABEL_282;
        if (!cbb_add_child((uint64_t)&__key, (uint64_t)v466, 1u, 0))
          goto LABEL_282;
        __dst = 0;
        if (!CBB_add_space((uint64_t)v466, &__dst, v162))
          goto LABEL_282;
        if ((_DWORD)v162)
          memcpy(__dst, v160, v162);
        v167 = *(_DWORD *)(*((_QWORD *)this + 192) + 16);
        __dst = 0;
        if (CBB_add_space((uint64_t)&__key, &__dst, 2)
          && (*((_BYTE *)__dst + 1) = v167,
              *(_BYTE *)__dst = BYTE1(v167),
              __dst = 0,
              CBB_add_space((uint64_t)&__key, &__dst, 1))
          && (*(_BYTE *)__dst = 0, bssl::ssl_add_serverhello_tlsext((uint64_t *)this, (uint64_t)&__key))
          && (bssl::ssl_add_message_cbb(v30, (uint64_t)v472) & 1) != 0)
        {
          if (*(_QWORD *)(v30 + 88))
          {
            if ((*((_BYTE *)this + 1570) & 8) != 0)
            {
              prev_session = 17;
            }
            else
            {
              *((_DWORD *)this + 5) = 19;
              prev_session = 1;
            }
          }
          else
          {
            *((_DWORD *)this + 5) = 7;
            prev_session = 1;
          }
        }
        else
        {
LABEL_282:
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1086);
          prev_session = 0;
        }
        goto LABEL_622;
      case 7:
        v35 = *(_QWORD **)this;
        memset(v472, 0, sizeof(v472));
        if ((*(_BYTE *)(*((_QWORD *)this + 192) + 24) & 7) == 0)
          goto LABEL_50;
        if (!bssl::ssl_send_tls12_certificate(this, a2))
          goto LABEL_621;
        if ((*((_BYTE *)this + 1568) & 0x40) != 0)
        {
          if (!(*(unsigned int (**)(_QWORD *, timeval *, __int128 *, uint64_t))(*v35 + 88))(v35, v472, &__key, 22)|| (__dst = 0, !CBB_add_space((uint64_t)&__key, &__dst, 1))|| (*(_BYTE *)__dst = 1, !CBB_flush((uint64_t *)&__key))|| !cbb_add_child((uint64_t)&__key, (uint64_t)v466, 3u, 0)|| !CBB_add_bytes((uint64_t)v466, *(const void **)(*(_QWORD *)(*((_QWORD *)this + 186) + 80) + 8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 186) + 80) + 16))|| (bssl::ssl_add_message_cbb((uint64_t)v35, (uint64_t)v472) & 1) == 0)
          {
            ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1123);
            goto LABEL_621;
          }
        }
LABEL_50:
        v36 = *((_QWORD *)this + 192);
        v37 = *(_DWORD *)(v36 + 20);
        v38 = *(_DWORD *)(v36 + 24);
        if ((v37 & 2) == 0 && ((v38 & 8) == 0 || !*(_QWORD *)(*((_QWORD *)this + 1) + 56)))
          goto LABEL_59;
        memset(v472, 0, sizeof(v472));
        v39 = malloc_type_malloc(0xC8uLL, 0x30772F57uLL);
        if (!v39)
        {
          ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
          goto LABEL_621;
        }
        v40 = v4;
        *v39 = 192;
        LOBYTE(v472[0].tv_usec) = 0;
        v472[0].tv_sec = 0;
        v472[1].tv_sec = (__darwin_time_t)(v39 + 1);
        *(_OWORD *)&v472[1].tv_usec = xmmword_208F2AF40;
        LOBYTE(v472[2].tv_usec) = v472[2].tv_usec & 0xFC | 1;
        v41 = v35[6];
        v466[0] = 0;
        if (!CBB_add_space((uint64_t)v472, v466, 32)
          || (v42 = v466[0],
              v43 = *(_OWORD *)(v41 + 64),
              *(_OWORD *)v466[0] = *(_OWORD *)(v41 + 48),
              v42[1] = v43,
              v44 = v35[6],
              v466[0] = 0,
              !CBB_add_space((uint64_t)v472, v466, 32)))
        {
          v4 = v40;
          goto LABEL_621;
        }
        v45 = v466[0];
        v46 = *(_OWORD *)(v44 + 32);
        *(_OWORD *)v466[0] = *(_OWORD *)(v44 + 16);
        v45[1] = v46;
        v4 = v40;
        if ((v38 & 8) == 0)
          goto LABEL_57;
        v269 = *(const char **)(*((_QWORD *)this + 1) + 56);
        if (v269)
          v270 = strlen(v269);
        else
          v270 = 0;
        if (CBB_flush(&v472[0].tv_sec))
        {
          if (cbb_add_child((uint64_t)v472, (uint64_t)&__key, 2u, 0))
          {
            v305 = *(const void **)(*((_QWORD *)this + 1) + 56);
            v466[0] = 0;
            if (CBB_add_space((uint64_t)&__key, v466, v270))
            {
              if (v270)
                memcpy(v466[0], v305, v270);
LABEL_57:
              if ((v37 & 2) == 0)
                goto LABEL_58;
              bssl::SSLKeyShare::Create((bssl::SSLKeyShare *)*(unsigned __int16 *)(*((_QWORD *)this + 188) + 6), v466);
              v289 = v466[0];
              v290 = (_QWORD *)*((_QWORD *)this + 49);
              *((void **)this + 49) = v466[0];
              if (v290)
              {
                (*(void (**)(_QWORD *))*v290)(v290);
                OPENSSL_free(v290);
                v289 = (void *)*((_QWORD *)this + 49);
              }
              if (v289)
              {
                v466[0] = 0;
                if (CBB_add_space((uint64_t)v472, v466, 1))
                {
                  *(_BYTE *)v466[0] = 3;
                  if (CBB_add_u16((uint64_t)v472, *(_WORD *)(*((_QWORD *)this + 188) + 6)))
                  {
                    if (CBB_add_u8_length_prefixed(&v472[0].tv_sec, (uint64_t)&__key))
                    {
                      v291 = *((_QWORD *)this + 195);
                      if (v291
                        && (*((_BYTE *)this + 1570) & 8) == 0
                        && *(unsigned __int16 *)(v291 + 184) == *(unsigned __int16 *)(*((_QWORD *)this + 188) + 6)
                        && *(_QWORD *)(v291 + 200)
                        && (v292 = *(void **)(v291 + 216)) != 0
                        && (v466[0] = *(void **)(v291 + 208),
                            v466[1] = v292,
                            (*(unsigned int (**)(_QWORD, void **))(**((_QWORD **)this + 49) + 56))(*((_QWORD *)this + 49), v466)))
                      {
                        if (CBB_add_bytes((uint64_t)&__key, *(const void **)(v291 + 192), *(_QWORD *)(v291 + 200)))goto LABEL_58;
                      }
                      else if ((*(unsigned int (**)(_QWORD, __int128 *))(**((_QWORD **)this + 49) + 24))(*((_QWORD *)this + 49), &__key))
                      {
                        if (!v291 || (*((_BYTE *)this + 1570) & 8) == 0)
                          goto LABEL_58;
                        v467 = 0u;
                        v468 = 0u;
                        *(_OWORD *)v466 = 0u;
                        v350 = (const void *)v470;
                        if (BYTE8(__key))
                        {
                          v351 = *((_QWORD *)&v470 + 1) + v471;
                          v350 = (const void *)(v351 + *(_QWORD *)v470);
                          v352 = *(_QWORD *)(v470 + 8) - v351;
                        }
                        else
                        {
                          v352 = *((_QWORD *)&v470 + 1);
                        }
                        if (bssl::Array<unsigned char>::CopyFrom((uint64_t *)(v291 + 192), v350, v352)
                          && CBB_init((uint64_t)v466, 0x20uLL)
                          && (*(unsigned int (**)(_QWORD, void **))(**((_QWORD **)this + 49) + 48))(*((_QWORD *)this + 49), v466)&& bssl::CBBFinishArray((uint64_t)v466, (uint64_t *)(v291 + 208)))
                        {
                          *(_WORD *)(v291 + 184) = *(_WORD *)(*((_QWORD *)this + 188) + 6);
                          CBB_cleanup((uint64_t)v466);
LABEL_58:
                          if (!bssl::CBBFinishArray((uint64_t)v472, v453))
                            goto LABEL_621;
LABEL_59:
                          *((_DWORD *)this + 5) = 8;
                          prev_session = 1;
                          goto LABEL_622;
                        }
                        CBB_cleanup((uint64_t)v466);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        goto LABEL_621;
      case 8:
        if (!*((_QWORD *)this + 180))
        {
          v78 = 9;
          goto LABEL_391;
        }
        v47 = *(bssl **)this;
        memset(v472, 0, sizeof(v472));
        if (!(*(unsigned int (**)(bssl *, timeval *, __int128 *, uint64_t))(*(_QWORD *)v47 + 88))(v47, v472, &__key, 12))goto LABEL_621;
        v48 = *((_QWORD *)this + 180);
        v49 = v48 - 64;
        if (v48 < 0x40)
          goto LABEL_621;
        v50 = *v453;
        __dst = 0;
        if (!CBB_add_space((uint64_t)&__key, &__dst, v49))
          goto LABEL_621;
        if (v49)
          memcpy(__dst, (const void *)(v50 + 64), v49);
        if ((*(_BYTE *)(*((_QWORD *)this + 192) + 24) & 7) == 0)
          goto LABEL_569;
        v460 = 0;
        if (bssl::tls1_choose_signature_algorithm((bssl **)this, *((_QWORD *)this + 186), (__int16 *)&v460))
        {
          if (bssl::ssl_protocol_version(v47, v51) < 0x303
            || CBB_add_u16((uint64_t)&__key, v460))
          {
            v52 = *(_QWORD *)(*((_QWORD *)this + 186) + 8);
            if (v52 && (v53 = *(_QWORD *)(v52 + 16)) != 0 && (v54 = *(uint64_t (**)(void))(v53 + 120)) != 0)
              v55 = v54();
            else
              v55 = 0;
            __dst = 0;
            if (!CBB_add_u16_length_prefixed((uint64_t *)&__key, (uint64_t)v466))
              goto LABEL_621;
            if (!CBB_reserve((uint64_t)v466, &__dst, v55))
              goto LABEL_621;
            v464 = 0;
            v296 = bssl::ssl_private_key_sign((uint64_t)this, __dst, (unint64_t *)&v464, v55, (evp_pkey_st *)v460, *((const void **)this + 179), *((_QWORD *)this + 180));
            switch(v296)
            {
              case 2:
                goto LABEL_621;
              case 1:
                prev_session = 9;
                goto LABEL_622;
              case 0:
                prev_session = 0;
                v297 = (_QWORD *)(v467 + 8);
                if (!LOBYTE(v466[1]))
                  v297 = (_QWORD *)&v467 + 1;
                v298 = (char *)v464 + *v297;
                v299 = __CFADD__(*v297, v464);
                if (v466[0] || v299)
                {
LABEL_622:
                  if (!LOBYTE(v472[0].tv_usec) && (v472[2].tv_usec & 1) != 0)
                  {
                    tv_sec = v472[1].tv_sec;
                    if (v472[1].tv_sec)
                    {
LABEL_625:
                      v319 = *(_QWORD *)(tv_sec - 8);
                      v318 = (void *)(tv_sec - 8);
                      v320 = v319 + 8;
                      if (v319 != -8)
                        bzero(v318, v320);
                      free(v318);
                    }
                  }
LABEL_628:
                  if (*((_DWORD *)this + 5) == v6)
                    goto LABEL_3;
                  goto LABEL_629;
                }
                v300 = &v468;
                if (LOBYTE(v466[1]))
                  v300 = (__int128 *)(v467 + 16);
                if ((unint64_t)v298 > *(_QWORD *)v300)
                {
LABEL_621:
                  prev_session = 0;
                  goto LABEL_622;
                }
                *v297 = v298;
                break;
            }
LABEL_569:
            *((_DWORD *)this + 392) |= 0x400000u;
            if (bssl::ssl_add_message_cbb((uint64_t)v47, (uint64_t)v472))
            {
              OPENSSL_free(*((_QWORD **)this + 179));
              *v453 = 0;
              v453[1] = 0;
              prev_session = 1;
              *((_DWORD *)this + 5) = 9;
              goto LABEL_622;
            }
            goto LABEL_621;
          }
          ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1243);
          v280 = 80;
        }
        else
        {
          v280 = 40;
        }
        bssl::ssl_send_alert(v47, (ssl_st *)2, v280);
        goto LABEL_621;
      case 9:
        v56 = *((_DWORD *)this + 392);
        if ((v56 & 0x80000) != 0)
        {
          prev_session = 17;
          goto LABEL_3;
        }
        v57 = *(unsigned __int16 **)this;
        memset(v472, 0, sizeof(v472));
        if ((v56 & 0x20) == 0)
          goto LABEL_76;
        if (!(*(unsigned int (**)(unsigned __int16 *, timeval *, __int128 *, uint64_t))(*(_QWORD *)v57 + 88))(v57, v472, &__key, 13))goto LABEL_619;
        if (!CBB_flush((uint64_t *)&__key))
          goto LABEL_619;
        if (!cbb_add_child((uint64_t)&__key, (uint64_t)v466, 1u, 0))
          goto LABEL_619;
        v464 = 0;
        if (!CBB_add_space((uint64_t)v466, &v464, 1))
          goto LABEL_619;
        *(_BYTE *)v464 = 1;
        v464 = 0;
        if (!CBB_add_space((uint64_t)v466, &v464, 1))
          goto LABEL_619;
        *(_BYTE *)v464 = 64;
        v140 = v57[8];
        if (v140 - 769 >= 4)
        {
          if (v140 != 65277)
            goto LABEL_617;
        }
        else if (v140 < 0x303)
        {
          goto LABEL_617;
        }
        if (!CBB_add_u16_length_prefixed((uint64_t *)&__key, (uint64_t)&__dst)
          || !bssl::tls12_add_verify_sigalgs((uint64_t)this, (uint64_t)&__dst))
        {
LABEL_619:
          v168 = 1304;
          goto LABEL_620;
        }
LABEL_617:
        if (!bssl::ssl_add_client_CA_list(this, (uint64_t *)&__key)
          || (bssl::ssl_add_message_cbb((uint64_t)v57, (uint64_t)v472) & 1) == 0)
        {
          goto LABEL_619;
        }
LABEL_76:
        if ((*(unsigned int (**)(unsigned __int16 *, timeval *, __int128 *, uint64_t))(*(_QWORD *)v57 + 88))(v57, v472, &__key, 14)&& (bssl::ssl_add_message_cbb((uint64_t)v57, (uint64_t)v472) & 1) != 0)
        {
          *((_DWORD *)this + 5) = 10;
          prev_session = 4;
          goto LABEL_622;
        }
        v168 = 1312;
LABEL_620:
        ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", v168);
        goto LABEL_621;
      case 10:
        v9 = *(_QWORD *)this;
        v58 = *((_DWORD *)this + 392);
        if ((v58 & 0x40000) != 0 && *(_DWORD *)(*((_QWORD *)this + 192) + 20) == 2)
          goto LABEL_133;
        if ((v58 & 0x20) == 0)
        {
          *((_DWORD *)this + 5) = 11;
          goto LABEL_392;
        }
        if (!(*(unsigned int (**)(_QWORD, timeval *))(*(_QWORD *)v9 + 24))(*(_QWORD *)this, v472))
          goto LABEL_179;
        if (BYTE1(v472[0].tv_sec) != 11)
          goto LABEL_396;
        if (LOBYTE(v472[0].tv_sec))
          goto LABEL_169;
        v103 = *(_QWORD *)&v472[1].tv_usec;
        v104 = v472[2].tv_sec;
        if (*v5 && !BUF_MEM_append(*v5, *(void **)&v472[1].tv_usec, v472[2].tv_sec))
          goto LABEL_606;
        if (*(_QWORD *)v450)
          (*(void (**)(char *, uint64_t, __darwin_time_t))(*(_QWORD *)v450 + 24))(v450, v103, v104);
LABEL_169:
        __key = *(_OWORD *)&v472[0].tv_usec;
        LOBYTE(v466[0]) = 50;
        v105 = *((_QWORD *)this + 188);
        v106 = (unint64_t **)(v105 + 136);
        v107 = (_DWORD *)(v105 + 264);
        if ((*(_WORD *)(*((_QWORD *)this + 1) + 237) & 0x20) != 0)
          v108 = v107;
        else
          v108 = 0;
        if ((bssl::ssl_parse_cert_chain(v466, v106, v4, v108, (unint64_t *)&__key, *(uint64_t **)(*(_QWORD *)(v9 + 104) + 704)) & 1) == 0)goto LABEL_551;
        if (*((_QWORD *)&__key + 1)
          || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v9 + 104) + 16) + 48))(*((_QWORD *)this + 188)) & 1) == 0)
        {
          v75 = 1357;
          goto LABEL_609;
        }
        v109 = *((_QWORD *)this + 188);
        v110 = *(_QWORD **)(v109 + 136);
        if (v110 && *v110)
        {
          if ((*(_WORD *)(*((_QWORD *)this + 1) + 237) & 0x20) != 0)
            *(_BYTE *)(v109 + 424) |= 2u;
        }
        else
        {
          bssl::SSLTranscript::FreeBuffer((bssl::SSLTranscript *)v5);
          if ((*(_BYTE *)(*((_QWORD *)this + 1) + 236) & 2) != 0)
          {
            v14 = 192;
            v15 = 1368;
LABEL_21:
            ERR_put_error(16, 0, v14, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", v15);
            v16 = (bssl *)v9;
            v17 = 40;
            goto LABEL_712;
          }
          *(_QWORD *)(*((_QWORD *)this + 188) + 176) = 0;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
        *((_DWORD *)this + 5) = 11;
        goto LABEL_392;
      case 11:
        v59 = *(_QWORD **)(*((_QWORD *)this + 188) + 136);
        if (!v59 || !*v59)
          goto LABEL_134;
        v60 = bssl::ssl_verify_peer_cert(this, a2);
        if (v60 == 1)
          goto LABEL_606;
        if (v60 != 2)
        {
LABEL_134:
          v78 = 12;
          goto LABEL_391;
        }
        prev_session = 16;
        if (*((_DWORD *)this + 5) == v6)
          goto LABEL_3;
        goto LABEL_629;
      case 12:
        v61 = *(bssl **)this;
        if (!(*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)this + 24))(*(_QWORD *)this, &__dst))
          goto LABEL_179;
        if (BYTE1(__dst) != 16)
        {
          bssl::ssl_send_alert(v61, (ssl_st *)2, 10);
          ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 211);
          v139 = BYTE1(__dst);
          goto LABEL_397;
        }
        v63 = v462;
        v62 = v463;
        v64 = *((_QWORD *)this + 192);
        v65 = *(_DWORD *)(v64 + 20);
        v66 = *(_DWORD *)(v64 + 24);
        if ((v66 & 8) == 0)
        {
          v464 = 0;
          v465 = 0;
          if ((v65 & 1) == 0)
            goto LABEL_93;
          goto LABEL_675;
        }
        v193 = v463 - 2;
        if (v463 < 2
          || (v194 = __rev16(*(unsigned __int16 *)v462), v62 = v193 - v194, v193 < v194)
          || (v195 = (unsigned __int16 *)(v462 + 2),
              v472[0].tv_sec = (__darwin_time_t)(v462 + 2),
              *(_QWORD *)&v472[0].tv_usec = v194,
              (v65 & 4) != 0)
          && v62)
        {
          ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1425);
          v196 = 50;
        }
        else
        {
          if (v194 <= 0x80)
          {
            if (!v194 || (v306 = v65, v307 = memchr(v462 + 2, 0, v194), LOBYTE(v65) = v306, !v307))
            {
              v442 = v65;
              *(_QWORD *)&__key = 0;
              if (CBS_strdup((uint64_t)v472, (uint64_t *)&__key))
              {
                v337 = *((_QWORD *)this + 188);
                v338 = *(_QWORD **)(v337 + 128);
                *(_QWORD *)(v337 + 128) = __key;
                if (v338)
                  OPENSSL_free(v338);
                v63 = (unsigned __int8 *)v195 + v194;
                LOBYTE(v65) = v442;
                v464 = 0;
                v465 = 0;
                if ((v442 & 1) == 0)
                {
LABEL_93:
                  if ((v65 & 2) != 0)
                  {
                    if (!v62 || v62 - 1 != *v63)
                    {
                      ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1526);
                      v67 = v61;
                      v68 = 50;
                      goto LABEL_548;
                    }
                    v275 = v65;
                    LOBYTE(v472[0].tv_sec) = 50;
                    if (!(*(unsigned int (**)(_QWORD, void **, timeval *, unsigned __int8 *))(**((_QWORD **)this + 49) + 40))(*((_QWORD *)this + 49), &v464, v472, v63 + 1))
                    {
                      bssl::ssl_send_alert(v61, (ssl_st *)2, LOBYTE(v472[0].tv_sec));
                      prev_session = 0;
                      goto LABEL_685;
                    }
                    v276 = (_QWORD *)*((_QWORD *)this + 49);
                    *((_QWORD *)this + 49) = 0;
                    if (v276)
                    {
                      (*(void (**)(_QWORD *))*v276)(v276);
                      OPENSSL_free(v276);
                    }
                    v277 = (_QWORD *)*((_QWORD *)this + 50);
                    *((_QWORD *)this + 50) = 0;
                    if (v277)
                    {
                      (*(void (**)(_QWORD *))*v277)(v277);
                      OPENSSL_free(v277);
                    }
                    LOBYTE(v65) = v275;
                  }
                  else if ((v65 & 4) == 0)
                  {
                    ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1542);
                    v67 = v61;
                    v68 = 40;
LABEL_548:
                    bssl::ssl_send_alert(v67, (ssl_st *)2, v68);
                    prev_session = 0;
                    goto LABEL_685;
                  }
                  if ((v66 & 8) == 0)
                    goto LABEL_499;
                  goto LABEL_828;
                }
LABEL_675:
                v339 = v62 - 2;
                if (v62 < 2 || (v341 = *(unsigned __int16 *)v63, v340 = v63 + 2, v339 != __rev16(v341)))
                {
                  ERR_put_error(16, 0, 137, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1451);
                  bssl::ssl_send_alert(v61, (ssl_st *)2, 50);
                  goto LABEL_684;
                }
                v342 = *(_QWORD *)(*((_QWORD *)this + 186) + 8);
                v443 = v65;
                if (v342)
                {
                  v343 = *(unsigned __int8 **)(v342 + 16);
                  if (!v343 || (v343 = (unsigned __int8 *)*((_QWORD *)v343 + 15)) == 0)
                  {
                    v345 = 0;
LABEL_689:
                    v472[0].tv_sec = 0;
                    v347 = v343;
                    v348 = bssl::ssl_private_key_decrypt((uint64_t *)this, v343, (unint64_t *)v472, v345, v340, v339);
                    if (v348 == 2)
                    {
                      prev_session = 0;
                      goto LABEL_750;
                    }
                    if (v348 == 1)
                    {
                      prev_session = 9;
LABEL_750:
                      OPENSSL_free(v347);
                      goto LABEL_685;
                    }
                    if (v472[0].tv_sec != v345)
                    {
                      v349 = 1477;
                      goto LABEL_748;
                    }
                    if (!bssl::Array<unsigned char>::Init((uint64_t *)&v464, 0x30uLL))
                    {
LABEL_749:
                      prev_session = 0;
                      goto LABEL_750;
                    }
                    RAND_bytes_with_additional_data((uint64_t)v464, v465, (uint64_t)&RAND_bytes_kZeroAdditionalData);
                    if (v472[0].tv_sec < v465 + 11)
                    {
                      v349 = 1494;
LABEL_748:
                      ERR_put_error(16, 0, 138, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", v349);
                      bssl::ssl_send_alert(v61, (ssl_st *)2, 51);
                      goto LABEL_749;
                    }
                    v386 = v472[0].tv_sec - v465;
                    v387 = v347;
                    v388 = (((v347[1] ^ 2) - 1) & (*v347 - 1)) >> 63;
                    v389 = v472[0].tv_sec - v465 - 1;
                    if (v389 >= 3)
                    {
                      v390 = v386 - 3;
                      if (v386 - 3 < 8)
                      {
                        v391 = 2;
                        goto LABEL_821;
                      }
                      if (v390 >= 0x20)
                      {
                        v392 = v390 & 0xFFFFFFFFFFFFFFE0;
                        v393.i64[0] = -1;
                        v393.i64[1] = -1;
                        v394.i64[0] = -1;
                        v394.i64[1] = -1;
                        v394.i8[0] = (((v347[1] ^ 2) - 1) & (*v347 - 1)) >> 63;
                        v395 = (uint8x16_t *)(v347 + 18);
                        v396 = v390 & 0xFFFFFFFFFFFFFFE0;
                        v397.i64[0] = -1;
                        v397.i64[1] = -1;
                        do
                        {
                          v398 = v395[-1];
                          v399 = vmovl_high_u8(v398);
                          v400 = vmovl_high_u16(v399);
                          v401 = vmovl_u16(*(uint16x4_t *)v399.i8);
                          v402 = vmovl_u8(*(uint8x8_t *)v398.i8);
                          v403 = vmovl_high_u16(v402);
                          v404 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v402.i8);
                          v405 = vmovl_high_u8(*v395);
                          v406 = vmovl_high_u16(v405);
                          v407 = vmovl_u16(*(uint16x4_t *)v405.i8);
                          v408 = vmovl_u8(*(uint8x8_t *)v395->i8);
                          v409 = vmovl_high_u16(v408);
                          v410 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v408.i8);
                          v486.val[3] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v397, v400));
                          v486.val[2] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v397, *(uint32x2_t *)v400.i8));
                          v486.val[1] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v397, v401));
                          v486.val[0] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v397, *(uint32x2_t *)v401.i8));
                          v483.val[3] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v397, v403));
                          v483.val[2] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v397, *(uint32x2_t *)v403.i8));
                          v483.val[1] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v397, (uint32x4_t)v404));
                          v483.val[0] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v397, *(uint32x2_t *)v404.i8));
                          v485.val[3] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v397, v406));
                          v485.val[2] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v397, *(uint32x2_t *)v406.i8));
                          v485.val[1] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v397, v407));
                          v485.val[0] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v397, *(uint32x2_t *)v407.i8));
                          v482.val[3] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v397, v409));
                          v482.val[2] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v397, *(uint32x2_t *)v409.i8));
                          v482.val[1] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v397, (uint32x4_t)v410));
                          v482.val[0] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v397, *(uint32x2_t *)v410.i8));
                          v404.i64[0] = vqtbl4q_s8(v483, (int8x16_t)xmmword_208F2AF20).u64[0];
                          v404.i64[1] = vqtbl4q_s8(v486, (int8x16_t)xmmword_208F2AF20).u64[0];
                          v410.i64[0] = vqtbl4q_s8(v482, (int8x16_t)xmmword_208F2AF20).u64[0];
                          v410.i64[1] = vqtbl4q_s8(v485, (int8x16_t)xmmword_208F2AF20).u64[0];
                          v394 = vbicq_s8(v394, v404);
                          v393 = vbicq_s8(v393, v410);
                          v395 += 2;
                          v396 -= 32;
                        }
                        while (v396);
                        v411 = vandq_s8(v393, v394);
                        *(int8x8_t *)v411.i8 = vand_s8(*(int8x8_t *)v411.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v411, v411, 8uLL));
                        v388 = v411.i64[0] & HIDWORD(v411.i64[0]) & ((unint64_t)(v411.i64[0] & HIDWORD(v411.i64[0])) >> 16);
                        LODWORD(v388) = v388 & (v388 >> 8);
                        if (v390 == v392)
                        {
                          v387 = v347;
                          goto LABEL_824;
                        }
                        if ((v390 & 0x18) == 0)
                        {
                          v391 = v392 | 2;
                          v387 = v347;
LABEL_821:
                          v423 = v391 + v465 - v472[0].tv_sec + 1;
                          v424 = (unsigned __int8 *)v387 + v391;
                          do
                          {
                            v425 = *v424++;
                            LODWORD(v388) = v388 & ~((v425 - 1) >> 63);
                            v86 = __CFADD__(v423++, 1);
                          }
                          while (!v86);
                          goto LABEL_824;
                        }
                        v387 = v347;
                      }
                      else
                      {
                        v392 = 0;
                      }
                      v391 = v390 & 0xFFFFFFFFFFFFFFF8 | 2;
                      v414 = (int8x8_t)-1;
                      v414.i8[0] = v388;
                      v415 = (uint8x8_t *)((char *)v387 + v392 + 2);
                      v416 = v392 - (v390 & 0xFFFFFFFFFFFFFFF8);
                      v417.i64[0] = -1;
                      v417.i64[1] = -1;
                      do
                      {
                        v418 = *v415++;
                        v419 = vmovl_u8(v418);
                        v420 = vmovl_high_u16(v419);
                        v421 = vmovl_u16(*(uint16x4_t *)v419.i8);
                        v484.val[3] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v417, v420));
                        v484.val[2] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v417, *(uint32x2_t *)v420.i8));
                        v484.val[1] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_high_u32(v417, v421));
                        v484.val[0] = (int8x16_t)vcltzq_s64((int64x2_t)vaddw_u32(v417, *(uint32x2_t *)v421.i8));
                        v414 = vbic_s8(v414, (int8x8_t)*(_OWORD *)&vqtbl4q_s8(v484, (int8x16_t)xmmword_208F2AF30));
                        v416 += 8;
                      }
                      while (v416);
                      v422 = *(_QWORD *)&v414 & HIDWORD(*(_QWORD *)&v414) & ((*(_QWORD *)&v414 & HIDWORD(*(_QWORD *)&v414)) >> 16);
                      LODWORD(v388) = v422 & (v422 >> 8);
                      if (v390 != (v390 & 0xFFFFFFFFFFFFFFF8))
                        goto LABEL_821;
                    }
LABEL_824:
                    if (v465)
                    {
                      v426 = 0;
                      v427 = (unsigned __int8 *)v387 + v386;
                      v428 = v388 & ((((*v427 ^ HIBYTE(*((unsigned __int16 *)this + 786))) - 1) & (*((unsigned __int8 *)v387 + v389) - 1) & ((*((_WORD *)this + 786) ^ v427[1]) - 1)) >> 63);
                      do
                      {
                        *((_BYTE *)v464 + v426) = *((_BYTE *)v464 + v426) & ~v428 | v427[v426] & v428;
                        ++v426;
                      }
                      while (v426 < v465);
                    }
                    OPENSSL_free(v387);
                    LOBYTE(v65) = v443;
                    if ((v66 & 8) == 0)
                    {
LABEL_499:
                      if (bssl::ssl_hash_message((uint64_t)this, (uint64_t)&__dst))
                      {
                        master_secret = bssl::tls1_generate_master_secret((uint64_t)this, (int8x16_t *)(*((_QWORD *)this + 188) + 11), (char *)v464, v465);
                        v279 = *((_QWORD *)this + 188);
                        *(_BYTE *)(v279 + 10) = master_secret;
                        if (master_secret)
                        {
                          *(_BYTE *)(v279 + 424) = *(_BYTE *)(v279 + 424) & 0xFE | *((_BYTE *)this + 1570) & 1;
                          *((_DWORD *)this + 392) |= 0x400000u;
                          (*(void (**)(bssl *))(*(_QWORD *)v61 + 32))(v61);
                          *((_DWORD *)this + 5) = 13;
                          prev_session = 1;
                          goto LABEL_685;
                        }
                      }
                      goto LABEL_847;
                    }
LABEL_828:
                    v429 = *(uint64_t (**)(bssl *, _QWORD, timeval *, uint64_t))(*((_QWORD *)this + 1) + 72);
                    if (!v429)
                    {
                      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1551);
                      bssl::ssl_send_alert(v61, (ssl_st *)2, 80);
                      prev_session = 0;
                      goto LABEL_685;
                    }
                    v430 = v65;
                    v431 = v429(v61, *(_QWORD *)(*((_QWORD *)this + 188) + 128), v472, 256);
                    if (v431 < 0x101)
                    {
                      v433 = v431;
                      if (v431)
                      {
                        if ((v430 & 4) != 0)
                        {
                          if (!bssl::Array<unsigned char>::Init((uint64_t *)&v464, v431))
                          {
LABEL_847:
                            prev_session = 0;
LABEL_685:
                            tv_sec = (__darwin_time_t)v464;
                            if (v464)
                              goto LABEL_625;
                            goto LABEL_628;
                          }
                          if (v465)
                            bzero(v464, v465);
                        }
                        v470 = 0u;
                        v471 = 0u;
                        __key = 0u;
                        if (!CBB_init((uint64_t)&__key, v465 + v433 + 4)
                          || !CBB_add_u16_length_prefixed((uint64_t *)&__key, (uint64_t)v466)
                          || !CBB_add_bytes((uint64_t)v466, v464, v465)
                          || !CBB_add_u16_length_prefixed((uint64_t *)&__key, (uint64_t)v466)
                          || !CBB_add_bytes((uint64_t)v466, v472, v433)
                          || (bssl::CBBFinishArray((uint64_t)&__key, (uint64_t *)&v464) & 1) == 0)
                        {
                          CBB_cleanup((uint64_t)&__key);
                          prev_session = 0;
                          goto LABEL_685;
                        }
                        CBB_cleanup((uint64_t)&__key);
                        goto LABEL_499;
                      }
                      ERR_put_error(16, 0, 195, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1566);
                      v432 = 115;
                    }
                    else
                    {
                      ERR_put_error(16, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1561);
                      v432 = 80;
                    }
                    bssl::ssl_send_alert(v61, (ssl_st *)2, v432);
                    goto LABEL_847;
                  }
                  v344 = ((uint64_t (*)(void))v343)();
                  if (v344)
                  {
                    v345 = v344;
                    v346 = (unsigned __int8 *)OPENSSL_malloc(v344);
                    if (v346)
                    {
                      v343 = v346;
                      goto LABEL_689;
                    }
LABEL_684:
                    prev_session = 0;
                    goto LABEL_685;
                  }
                }
                v345 = 0;
                v343 = 0;
                goto LABEL_689;
              }
              v197 = v61;
              v196 = 80;
LABEL_342:
              bssl::ssl_send_alert(v197, (ssl_st *)2, v196);
              prev_session = 0;
              if (*((_DWORD *)this + 5) == v6)
                goto LABEL_3;
              goto LABEL_629;
            }
          }
          ERR_put_error(16, 0, 136, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1432);
          v196 = 47;
        }
        v197 = v61;
        goto LABEL_342;
      case 13:
        if (!*((_QWORD *)this + 187))
        {
          v111 = *v5;
          *v5 = 0;
          if (v111)
          {
            v112 = v111[1];
            if (v112)
            {
              v114 = *(_QWORD *)(v112 - 8);
              v113 = (void *)(v112 - 8);
              v115 = v114 + 8;
              if (v114 != -8)
                bzero(v113, v115);
              free(v113);
            }
            v117 = *(v111 - 1);
            v116 = v111 - 1;
            v118 = v117 + 8;
            if (v117 != -8)
              bzero(v116, v118);
            free(v116);
          }
          v78 = 14;
          goto LABEL_391;
        }
        v9 = *(_QWORD *)this;
        if (!(*(unsigned int (**)(_QWORD, timeval *))(**(_QWORD **)this + 24))(*(_QWORD *)this, v472))
          goto LABEL_179;
        if (BYTE1(v472[0].tv_sec) != 15)
          goto LABEL_396;
        v69 = **(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 188) + 136) + 8);
        v71 = *(_QWORD *)(v69 + 8);
        v70 = *(_QWORD *)(v69 + 16);
        *(_QWORD *)&__key = v71;
        *((_QWORD *)&__key + 1) = v70;
        prev_session = 0;
        if (!bssl::ssl_cert_check_key_usage(&__key, 0))
          goto LABEL_628;
        v72 = *(unsigned __int16 **)&v472[0].tv_usec;
        v73 = v472[1].tv_sec;
        v74 = *(unsigned __int16 *)(v9 + 16);
        if (v74 - 769 >= 4)
        {
          if (v74 == 65277)
          {
LABEL_102:
            if (v472[1].tv_sec <= 1uLL)
            {
              v75 = 1648;
              goto LABEL_609;
            }
            v294 = bswap32((unsigned __int16)**(_WORD **)&v472[0].tv_usec) >> 16;
            LOBYTE(v466[0]) = 50;
            if (!bssl::tls12_check_peer_sigalg((uint64_t)this, v466, v294))
            {
LABEL_551:
              v17 = LOBYTE(v466[0]);
              goto LABEL_711;
            }
            v73 -= 2;
            ++v72;
            *(_WORD *)(*((_QWORD *)this + 188) + 8) = v294;
            goto LABEL_601;
          }
        }
        else if (v74 >= 0x303)
        {
          goto LABEL_102;
        }
        v293 = (*v4)[1];
        if (v293 == 6)
        {
          v294 = 65281;
        }
        else
        {
          if (v293 != 408)
          {
            ERR_put_error(16, 0, 193, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1660);
            v16 = (bssl *)v9;
            v17 = 43;
            goto LABEL_712;
          }
          v294 = 515;
        }
LABEL_601:
        v313 = v73 - 2;
        if (v73 < 2 || v313 != __rev16(*v72))
        {
          v75 = 1668;
          goto LABEL_609;
        }
        if (!bssl::ssl_public_key_verify((bssl *)v9, (_DWORD)v72 + 2, v313, (evp_pkey_st *)v294, (const ssl_st *)*v4, (*v5)[1], **v5))
        {
          ERR_put_error(16, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", 1675);
          v16 = (bssl *)v9;
          v17 = 51;
          goto LABEL_712;
        }
        bssl::SSLTranscript::FreeBuffer((bssl::SSLTranscript *)v5);
        if (!bssl::ssl_hash_message((uint64_t)this, (uint64_t)v472))
          goto LABEL_606;
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
        v78 = 14;
        goto LABEL_391;
      case 14:
        if ((*((_BYTE *)this + 1570) & 4) != 0 && *(_QWORD *)(*(_QWORD *)this + 88))
          goto LABEL_133;
        prev_session = 15;
        *((_DWORD *)this + 5) = 15;
        if (v6 != 15)
          goto LABEL_629;
        goto LABEL_3;
      case 15:
        v76 = *(_QWORD *)this;
        v77 = *((_QWORD *)this + 188);
        if (v77)
        {
          if (!bssl::tls1_configure_aead(v76, 0, v458, v77, 0, 0))
            goto LABEL_606;
        }
        else if (!bssl::tls1_configure_aead(v76, 0, v458, *(_QWORD *)(v76 + 88), 0, 0))
        {
          goto LABEL_606;
        }
        *((_DWORD *)this + 5) = 16;
        goto LABEL_392;
      case 16:
        if ((*((_BYTE *)this + 1569) & 0x40) == 0)
        {
          v78 = 17;
          goto LABEL_391;
        }
        v9 = *(_QWORD *)this;
        if (!(*(unsigned int (**)(_QWORD, timeval *))(**(_QWORD **)this + 24))(*(_QWORD *)this, v472))
          goto LABEL_179;
        if (BYTE1(v472[0].tv_sec) != 67)
          goto LABEL_396;
        if (LOBYTE(v472[0].tv_sec))
          goto LABEL_143;
        v95 = *(_QWORD *)&v472[1].tv_usec;
        v96 = v472[2].tv_sec;
        if (*v5 && !BUF_MEM_append(*v5, *(void **)&v472[1].tv_usec, v472[2].tv_sec))
          goto LABEL_606;
        if (*(_QWORD *)v450)
          (*(void (**)(char *, uint64_t, __darwin_time_t))(*(_QWORD *)v450 + 24))(v450, v95, v96);
LABEL_143:
        if (!v472[1].tv_sec
          || (v97 = (unsigned __int8 *)(*(_QWORD *)&v472[0].tv_usec + 1),
              v98 = **(_BYTE **)&v472[0].tv_usec,
              v472[1].tv_sec - 1 <= v98)
          || v472[1].tv_sec - 1 + ~v98 != v97[v98])
        {
          v75 = 1731;
          goto LABEL_609;
        }
        v99 = *(_QWORD *)(v9 + 48);
        OPENSSL_free(*(_QWORD **)(v99 + 472));
        *(_QWORD *)(v99 + 472) = 0;
        *(_QWORD *)(v99 + 480) = 0;
        if (!(_DWORD)v98)
          goto LABEL_149;
        v100 = OPENSSL_malloc(v98);
        *(_QWORD *)(v99 + 472) = v100;
        if (v100)
        {
          *(_QWORD *)(v99 + 480) = v98;
          memmove(v100, v97, v98);
LABEL_149:
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
          v78 = 17;
          goto LABEL_391;
        }
        prev_session = 0;
        if (*((_DWORD *)this + 5) != v6)
          goto LABEL_629;
        goto LABEL_3;
      case 17:
        if ((*((_BYTE *)this + 1570) & 0x80) == 0)
        {
          v78 = 18;
          goto LABEL_391;
        }
        v9 = *(_QWORD *)this;
        if (!(*(unsigned int (**)(_QWORD, timeval *))(**(_QWORD **)this + 24))(*(_QWORD *)this, v472))
        {
LABEL_179:
          prev_session = 3;
          if (*((_DWORD *)this + 5) == v6)
            goto LABEL_3;
          goto LABEL_629;
        }
        if (BYTE1(v472[0].tv_sec) != 203)
        {
LABEL_396:
          bssl::ssl_send_alert((bssl *)v9, (ssl_st *)2, 10);
          ERR_put_error(16, 0, 223, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake.cc", 211);
          v139 = BYTE1(v472[0].tv_sec);
          goto LABEL_397;
        }
        if (!bssl::tls1_verify_channel_id(this, (uint64_t)v472))
          goto LABEL_606;
        if (LOBYTE(v472[0].tv_sec))
          goto LABEL_158;
        v101 = *(_QWORD *)&v472[1].tv_usec;
        v102 = v472[2].tv_sec;
        if (!*v5 || BUF_MEM_append(*v5, *(void **)&v472[1].tv_usec, v472[2].tv_sec))
        {
          if (*(_QWORD *)v450)
            (*(void (**)(char *, uint64_t, __darwin_time_t))(*(_QWORD *)v450 + 24))(v450, v101, v102);
LABEL_158:
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
          v78 = 18;
          goto LABEL_391;
        }
        goto LABEL_606;
      case 18:
        v79 = *(_QWORD *)this;
        finished = bssl::ssl_get_finished((const ssl_session_st **)this, a2);
        if ((_DWORD)finished != 1)
        {
          prev_session = finished;
          if (*((_DWORD *)this + 5) == v6)
            goto LABEL_3;
          goto LABEL_629;
        }
        if (*(_QWORD *)(v79 + 88))
        {
          v78 = 20;
          goto LABEL_391;
        }
        *((_DWORD *)this + 5) = 19;
        if ((*(_WORD *)(*(_QWORD *)(v79 + 48) + 220) & 0x100) == 0)
          goto LABEL_392;
        if (!*(_QWORD *)(*(_QWORD *)this + 88))
        {
          v472[0].tv_sec = 0;
          if (bssl::SSLTranscript::GetHash((bssl::SSLTranscript *)v5, (unsigned __int8 *)(*((_QWORD *)this + 188) + 296), (unint64_t *)v472))
          {
            *(_BYTE *)(*((_QWORD *)this + 188) + 360) = v472[0].tv_sec;
            goto LABEL_392;
          }
        }
        goto LABEL_606;
      case 19:
        v81 = *(_QWORD **)this;
        if ((*((_BYTE *)this + 1569) & 0x80) == 0)
          goto LABEL_461;
        v82 = (bssl *)v81[11];
        if (!v82)
        {
          v188 = (int32x2_t *)*((_QWORD *)this + 188);
          v189 = *(void (**)(_QWORD, timeval *))(v81[13] + 696);
          if (v189)
          {
            v189(0, v472);
            v190 = v472[0].tv_sec & ~(v472[0].tv_sec >> 63);
            v191 = (unint64_t)v188[24];
            v86 = v190 >= v191;
            v192 = v190 - v191;
            if (!v86)
              goto LABEL_319;
LABEL_433:
            v188[24] = (int32x2_t)v190;
            v249 = v188[23];
            v250.i64[0] = v249.u32[0];
            v250.i64[1] = v249.u32[1];
            v188[23] = (int32x2_t)vbic_s8((int8x8_t)vsub_s32(v249, vdup_n_s32(v192)), (int8x8_t)vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v192), v250)));
          }
          else
          {
            gettimeofday(v472, 0);
            v190 = v472[0].tv_sec & ~(v472[0].tv_sec >> 63);
            v248 = (unint64_t)v188[24];
            v86 = v190 >= v248;
            v192 = v190 - v248;
            if (v86)
              goto LABEL_433;
LABEL_319:
            v188[23] = 0;
            v188[24] = (int32x2_t)v190;
          }
          prev_session = 0;
          v88 = *((_QWORD *)this + 188);
          goto LABEL_435;
        }
        bssl::SSL_SESSION_dup(v82, (ssl_session_st *)2, (ssl_session_st **)v472);
        prev_session = v472[0].tv_sec;
        if (!v472[0].tv_sec)
          goto LABEL_628;
        v83 = *(void (**)(_QWORD, timeval *))(v81[13] + 696);
        if (v83)
        {
          v83(0, v472);
          v84 = v472[0].tv_sec & ~(v472[0].tv_sec >> 63);
          v85 = *(_QWORD *)(prev_session + 192);
          v86 = v84 >= v85;
          v87 = v84 - v85;
          if (!v86)
            goto LABEL_123;
        }
        else
        {
          gettimeofday(v472, 0);
          v84 = v472[0].tv_sec & ~(v472[0].tv_sec >> 63);
          v230 = *(_QWORD *)(prev_session + 192);
          v86 = v84 >= v230;
          v87 = v84 - v230;
          if (!v86)
          {
LABEL_123:
            *(_QWORD *)(prev_session + 184) = 0;
            *(_QWORD *)(prev_session + 192) = v84;
            v88 = prev_session;
            goto LABEL_435;
          }
        }
        *(_QWORD *)(prev_session + 192) = v84;
        v231 = *(int32x2_t *)(prev_session + 184);
        v232.i64[0] = v231.u32[0];
        v232.i64[1] = v231.u32[1];
        *(int8x8_t *)(prev_session + 184) = vbic_s8((int8x8_t)vsub_s32(v231, vdup_n_s32(v87)), (int8x8_t)vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(v87), v232)));
        v88 = prev_session;
LABEL_435:
        memset(v472, 0, sizeof(v472));
        if ((*(unsigned int (**)(_QWORD *, timeval *, __int128 *, uint64_t))(*v81 + 88))(v81, v472, &__key, 4)&& (v251 = *(_DWORD *)(v88 + 184), v466[0] = 0, CBB_add_space((uint64_t)&__key, v466, 4))&& (*((_BYTE *)v466[0] + 3) = v251, *((_BYTE *)v466[0] + 2) = BYTE1(v251), *((_BYTE *)v466[0] + 1) = BYTE2(v251), *(_BYTE *)v466[0] = HIBYTE(v251), CBB_flush((uint64_t *)&__key))&& cbb_add_child((uint64_t)&__key, (uint64_t)v466, 2u, 0)&& bssl::ssl_encrypt_ticket((uint64_t *)this, (uint64_t)v466, v88))
        {
          v252 = bssl::ssl_add_message_cbb((uint64_t)v81, (uint64_t)v472) ^ 1;
        }
        else
        {
          v252 = 1;
        }
        if (!LOBYTE(v472[0].tv_usec) && (v472[2].tv_usec & 1) != 0 && v472[1].tv_sec)
        {
          v254 = *(_QWORD *)(v472[1].tv_sec - 8);
          v253 = (void *)(v472[1].tv_sec - 8);
          v255 = v254 + 8;
          if (v254 != -8)
            bzero(v253, v255);
          free(v253);
        }
        if (prev_session)
        {
          for (j = atomic_load((unsigned int *)prev_session); j != -1; j = v257)
          {
            if (!j)
              goto LABEL_855;
            v257 = __ldaxr((unsigned int *)prev_session);
            if (v257 == j)
            {
              if (!__stlxr(j - 1, (unsigned int *)prev_session))
              {
                if (j == 1)
                {
                  ssl_session_st::~ssl_session_st((ssl_session_st *)prev_session);
                  v259 = *(_QWORD *)(prev_session - 8);
                  v258 = (void *)(prev_session - 8);
                  v260 = v259 + 8;
                  if (v259 != -8)
                    bzero(v258, v260);
                  free(v258);
                }
                break;
              }
            }
            else
            {
              __clrex();
            }
          }
        }
        if (v252)
          goto LABEL_606;
LABEL_461:
        if (!(*(unsigned int (**)(_QWORD *, bssl::SSL_HANDSHAKE *))(*v81 + 112))(v81, a2))
          goto LABEL_606;
        v261 = *(_QWORD *)this;
        v262 = *((_QWORD *)this + 188);
        if (v262)
        {
          if (!bssl::tls1_configure_aead(v261, 1u, v458, v262, 0, 0))
            goto LABEL_606;
        }
        else if (!bssl::tls1_configure_aead(v261, 1u, v458, *(_QWORD *)(v261 + 88), 0, 0))
        {
          goto LABEL_606;
        }
        if (!bssl::ssl_send_finished(this, a2))
        {
LABEL_606:
          prev_session = 0;
          if (*((_DWORD *)this + 5) == v6)
            goto LABEL_3;
          goto LABEL_629;
        }
        if (v81[11])
          v263 = 14;
        else
          v263 = 20;
        *((_DWORD *)this + 5) = v263;
        prev_session = 4;
        if (v263 != v6)
          goto LABEL_629;
        goto LABEL_3;
      case 20:
        if ((*((_BYTE *)this + 1570) & 4) != 0)
        {
LABEL_133:
          prev_session = 7;
          goto LABEL_3;
        }
        v89 = *(bssl **)this;
        (*(void (**)(_QWORD, bssl::SSL_HANDSHAKE *))(**(_QWORD **)this + 128))(*(_QWORD *)this, a2);
        v90 = *((_QWORD *)this + 188);
        if (v90)
        {
          if ((*(_WORD *)(*((_QWORD *)this + 1) + 237) & 0x20) == 0)
            goto LABEL_355;
          v91 = *(unint64_t **)(v90 + 136);
          *(_QWORD *)(v90 + 136) = 0;
          if (v91)
          {
            v92 = *v91;
            if (*v91)
            {
              v93 = 0;
              do
              {
                v94 = *(unsigned int **)(v91[1] + 8 * v93);
                if (v94)
                {
                  CRYPTO_BUFFER_free(v94);
                  v92 = *v91;
                }
                ++v93;
              }
              while (v93 < v92);
            }
            v198 = v91[1];
            if (v198)
            {
              v200 = *(_QWORD *)(v198 - 8);
              v199 = (void *)(v198 - 8);
              v201 = v200 + 8;
              if (v200 != -8)
                bzero(v199, v201);
              free(v199);
            }
            v203 = *(v91 - 1);
            v202 = v91 - 1;
            v204 = v203 + 8;
            if (v203 != -8)
              bzero(v202, v204);
            free(v202);
          }
          (*(void (**)(_QWORD))(*(_QWORD *)(*((_QWORD *)v89 + 13) + 16) + 64))(*((_QWORD *)this + 188));
          v90 = *((_QWORD *)this + 188);
          if (v90)
          {
LABEL_355:
            v205 = *((_QWORD *)v89 + 6);
            *((_QWORD *)this + 188) = 0;
            v206 = *(ssl_session_st **)(v205 + 464);
            *(_QWORD *)(v205 + 464) = v90;
            if (v206)
            {
              for (k = atomic_load((unsigned int *)v206); k != -1; k = v208)
              {
                if (!k)
                  goto LABEL_855;
                v208 = __ldaxr((unsigned int *)v206);
                if (v208 == k)
                {
                  if (!__stlxr(k - 1, (unsigned int *)v206))
                  {
                    if (k == 1)
                    {
                      ssl_session_st::~ssl_session_st(v206);
                      v210 = v206[-1].tlsext_tick_lifetime_hint;
                      v209 = &v206[-1].tlsext_tick_lifetime_hint;
                      v211 = v210 + 8;
                      if (v210 != -8)
                        bzero(v209, v211);
                      free(v209);
                    }
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v89 + 6) + 464) + 424) &= ~4u;
            *((_DWORD *)this + 392) |= 8u;
            *(_WORD *)(*((_QWORD *)v89 + 6) + 220) |= 0x20u;
            bssl::ssl_update_cache(v89, (ssl_st *)a2);
LABEL_390:
            v78 = 21;
            goto LABEL_391;
          }
        }
        v212 = (unsigned int *)*((_QWORD *)v89 + 11);
        if (!v212 || (v213 = atomic_load(v212), v213 == -1))
        {
LABEL_377:
          v216 = *((_QWORD *)v89 + 6);
          v217 = *(ssl_session_st **)(v216 + 464);
          *(_QWORD *)(v216 + 464) = v212;
          if (v217)
          {
            for (m = atomic_load((unsigned int *)v217); m != -1; m = v219)
            {
              if (!m)
                goto LABEL_855;
              v219 = __ldaxr((unsigned int *)v217);
              if (v219 == m)
              {
                if (!__stlxr(m - 1, (unsigned int *)v217))
                {
                  if (m == 1)
                  {
                    ssl_session_st::~ssl_session_st(v217);
                    v221 = v217[-1].tlsext_tick_lifetime_hint;
                    v220 = &v217[-1].tlsext_tick_lifetime_hint;
                    v222 = v221 + 8;
                    if (v221 != -8)
                      bzero(v220, v222);
                    free(v220);
                  }
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          *((_DWORD *)this + 392) |= 8u;
          *(_WORD *)(*((_QWORD *)v89 + 6) + 220) |= 0x20u;
          goto LABEL_390;
        }
        break;
      case 21:
        v434 = *(void (**)(void))(*(_QWORD *)this + 96);
        if (!v434)
        {
          v434 = *(void (**)(void))(*(_QWORD *)(*(_QWORD *)this + 104) + 384);
          if (!v434)
            return 1;
        }
        prev_session = 1;
        v434();
        return prev_session;
      default:
        goto LABEL_606;
    }
    break;
  }
  while (1)
  {
    v214 = __ldaxr(v212);
    if (v214 == v213)
    {
      if (!__stlxr(v213 + 1, v212))
      {
        v215 = 1;
        goto LABEL_375;
      }
    }
    else
    {
      __clrex();
    }
    v215 = 0;
LABEL_375:
    if ((v215 & 1) == 0)
    {
      v213 = v214;
      if (v214 != -1)
        continue;
    }
    goto LABEL_377;
  }
}

uint64_t bssl::extract_sni(uint64_t *a1, char *a2, unsigned __int16 *a3, unint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  size_t v13;
  _BOOL8 v14;
  char v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD v21[2];

  if (!a4)
    return 1;
  v6 = *a1;
  while (1)
  {
    if (a4 < 2)
      return 1;
    if ((a4 & 0xFFFFFFFFFFFFFFFELL) == 2)
      return 1;
    v7 = a4 - 4;
    v8 = __rev16(a3[1]);
    if (a4 - 4 < v8)
      return 1;
    if (!__rev16(*a3))
      break;
    a3 = (unsigned __int16 *)((char *)a3 + v8 + 4);
    a4 = v7 - v8;
    if (v7 == v8)
      return 1;
  }
  v10 = v8 - 2;
  if (v8 < 2
    || (v11 = __rev16(a3[2]), v11 - 1 >= v10)
    || (v12 = v11 - 3, v11 < 3)
    || (v13 = __rev16(*(unsigned __int16 *)((char *)a3 + 7)), v12 < v13)
    || (v16 = *((unsigned __int8 *)a3 + 6), v21[0] = (char *)a3 + 9, v21[1] = v13, v10 != v11)
    || v12 != v13)
  {
    v14 = 0;
    v15 = 50;
LABEL_14:
    *a2 = v15;
    return v14;
  }
  if (v16 || v11 - 259 < 0xFFFFFFFFFFFFFF01 || memchr((char *)a3 + 9, 0, v12))
  {
    v14 = 0;
    v15 = 112;
    goto LABEL_14;
  }
  v20 = 0;
  v17 = CBS_strdup((uint64_t)v21, &v20);
  v14 = v17;
  if (!v17)
  {
    v15 = 80;
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(v6 + 48);
  v19 = *(_QWORD **)(v18 + 504);
  *(_QWORD *)(v18 + 504) = v20;
  if (v19)
    OPENSSL_free(v19);
  *((_DWORD *)a1 + 392) |= 0x100u;
  return v14;
}

uint64_t bssl::choose_params(uint64_t a1, uint64_t a2, unint64_t *a3, int a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  bssl *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int16 *v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned __int16 v36;
  unint64_t v37;
  unint64_t v38;
  unsigned int (*v39)(_DWORD **, uint64_t *);
  BOOL v40;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t (*v44)(_DWORD **, uint64_t *);
  int v45;
  uint64_t v47;
  _DWORD *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int16 v54;
  unint64_t v55;
  unsigned int (*v56)(_DWORD **, uint64_t *);
  unint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  _DWORD *v60;
  unint64_t v61;
  uint64_t (*v62)(_DWORD **, uint64_t *);
  int v63;
  int v64;
  int v65;
  _QWORD *v67;
  unint64_t v68;
  _QWORD *v69;
  _DWORD *v70;
  int v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  _DWORD *v75;

  if (a4)
    v6 = 2;
  else
    v6 = 0;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(v7 + 72);
  if (v8)
    v6 |= 4u;
  v71 = 8 * (v8 != 0);
  v72 = v6;
  v73 = 0;
  if (!a2 || *(_DWORD *)(a2 + 4))
  {
    v10 = *(bssl **)a1;
    v11 = *(_QWORD *)(v7 + 24);
    if (v11)
      goto LABEL_9;
    goto LABEL_51;
  }
  v14 = bssl::tls1_choose_signature_algorithm((bssl **)a1, a2, &v73);
  ERR_clear_error();
  v15 = *(_QWORD *)(a2 + 8);
  v16 = *(_DWORD *)(v15 + 4);
  v17 = *(_QWORD *)(a1 + 8);
  if (*(__int16 *)(v17 + 237) < 0 && v16 == 408)
  {
    v18 = *(_DWORD *)(**(_QWORD **)(v15 + 8) + 512);
    if (v18 > 715)
    {
      switch(v18)
      {
        case 716:
          v19 = (unsigned __int16 *)&unk_208F30798;
          break;
        case 948:
          v19 = (unsigned __int16 *)&unk_208F307E0;
          break;
        case 964:
          v19 = (unsigned __int16 *)&unk_208F30828;
          break;
        default:
          goto LABEL_48;
      }
    }
    else
    {
      switch(v18)
      {
        case 415:
          v19 = (unsigned __int16 *)&unk_208F30708;
          break;
        case 713:
          break;
        case 715:
          v19 = (unsigned __int16 *)&unk_208F30750;
          break;
        default:
LABEL_48:
          if (v8)
            goto LABEL_49;
          goto LABEL_188;
      }
    }
    v20 = *(_QWORD *)(a1 + 648);
    v21 = *(_QWORD *)(a1 + 656);
    if (v21)
    {
      v22 = v19[2];
      v23 = 2 * v21;
      v24 = *(unsigned __int16 **)(a1 + 648);
      while (*v24 != v22)
      {
        ++v24;
        v23 -= 2;
        if (!v23)
        {
          v24 = (unsigned __int16 *)(v20 + 2 * v21);
          break;
        }
      }
      if (((uint64_t)v24 - v20) >> 1 == v21)
      {
        v14 = 0;
        v25 = v8 == 0;
      }
      else
      {
        v25 = 0;
      }
      if (!v25)
        goto LABEL_39;
    }
    else
    {
      v14 = 0;
      if (v8)
        goto LABEL_39;
    }
LABEL_188:
    v64 = 243;
    v65 = 399;
    goto LABEL_186;
  }
LABEL_39:
  if (v16 != 949 && v16 != 408)
  {
    if (v16 == 6)
    {
      if (v14)
        v26 = 3;
      else
        v26 = 2;
      goto LABEL_50;
    }
LABEL_49:
    v26 = 0;
    goto LABEL_50;
  }
  if (v14)
    v26 = 4;
  else
    v26 = 0;
LABEL_50:
  v71 |= v26;
  v72 |= v16 == 6;
  v10 = *(bssl **)a1;
  v11 = *(_QWORD *)(v17 + 24);
  if (v11)
  {
LABEL_9:
    v12 = *(unint64_t **)v11;
    if ((*((_BYTE *)v10 + 130) & 0x40) == 0)
      goto LABEL_10;
    goto LABEL_52;
  }
LABEL_51:
  v11 = *(_QWORD *)(*((_QWORD *)v10 + 13) + 240);
  v12 = *(unint64_t **)v11;
  if ((*((_BYTE *)v10 + 130) & 0x40) != 0)
  {
LABEL_52:
    v27 = *(_QWORD *)(v11 + 8);
    if (!v27)
    {
      v13 = a3;
      a3 = v12;
      if (!v12)
      {
LABEL_185:
        v64 = 184;
        v65 = 353;
LABEL_186:
        ERR_put_error(16, 0, v64, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/ssl/handshake_server.cc", v65);
        return 0;
      }
      goto LABEL_128;
    }
    if (!v12 || !*v12)
      goto LABEL_185;
    v28 = 0;
    v69 = a3 + 1;
    LODWORD(v29) = -1;
    while (1)
    {
      v30 = *(_DWORD **)(v12[1] + 8 * v28);
      v31 = v30[5];
      if (v31 == 8 || v30[6] == 16)
      {
        v32 = 772;
        v33 = *((unsigned __int16 *)v10 + 8);
        v34 = v33 - 769;
        v35 = v33;
        if (v33 - 769 < 4)
          goto LABEL_59;
      }
      else
      {
        if (v30[9] == 1)
          v32 = 768;
        else
          v32 = 771;
        v33 = *((unsigned __int16 *)v10 + 8);
        v34 = v33 - 769;
        v35 = v33;
        if (v33 - 769 < 4)
        {
LABEL_59:
          if (v32 > v35)
            goto LABEL_90;
          goto LABEL_60;
        }
      }
      if (v33 == 65277)
      {
        if (v32 > 0x303)
          goto LABEL_90;
      }
      else if (v33 != 65279 || v32 > 0x302)
      {
        goto LABEL_90;
      }
LABEL_60:
      if (v34 >= 4)
      {
        if (v33 == 65277)
        {
          v33 = 771;
        }
        else if (v33 == 65279)
        {
          v33 = 770;
        }
        else
        {
          v33 = 0;
        }
      }
      if (v31 == 8)
      {
        if (v33 > 0x304)
          goto LABEL_90;
      }
      else
      {
        if (v30[6] == 16)
          v36 = 772;
        else
          v36 = 771;
        if (v33 > v36)
          goto LABEL_90;
      }
      if ((v31 & v72) == 0 || (v30[6] & v71) == 0)
        goto LABEL_90;
      if (a3)
      {
        if (a3[4])
        {
          v37 = *a3;
          v70 = *(_DWORD **)(v12[1] + 8 * v28);
          if (*((_DWORD *)a3 + 4) || v37 < 2)
          {
            if (v37)
            {
              v43 = 0;
              do
              {
                while (1)
                {
                  while (1)
                  {
                    v38 = v43 + ((v37 - v43 - 1) >> 1);
                    v44 = (uint64_t (*)(_DWORD **, uint64_t *))a3[4];
                    v74 = *(_QWORD *)(a3[1] + 8 * v38);
                    v75 = v30;
                    v45 = v44(&v75, &v74);
                    if (v45 < 1)
                      break;
                    v43 = v38 + 1;
                    v30 = v70;
                    if (v38 + 1 >= v37)
                      goto LABEL_90;
                  }
                  if ((v45 & 0x80000000) == 0)
                    break;
                  v37 = v43 + ((v37 - v43 - 1) >> 1);
                  v30 = v70;
                  if (v43 >= v38)
                    goto LABEL_90;
                }
                v30 = v70;
                if (v37 - v43 == 1)
                  goto LABEL_120;
                v37 = v38 + 1;
              }
              while (v43 < v38 + 1);
            }
LABEL_90:
            if (*(_BYTE *)(v27 + v28))
              v40 = 1;
            else
              v40 = (_DWORD)v29 == -1;
            if (!v40)
            {
              if (!a3)
                return 0;
              v29 = (int)v29;
              v67 = a3 + 1;
              if (*a3 <= (int)v29)
                return 0;
              return *(_QWORD *)(*v67 + 8 * v29);
            }
            goto LABEL_95;
          }
          v38 = 0;
          while (1)
          {
            v39 = (unsigned int (*)(_DWORD **, uint64_t *))a3[4];
            v74 = *(_QWORD *)(a3[1] + 8 * v38);
            v75 = v30;
            if (!v39(&v75, &v74))
              break;
            ++v38;
            v30 = v70;
            if (v38 >= *a3)
              goto LABEL_90;
          }
        }
        else
        {
          v41 = *a3;
          if (!*a3)
            goto LABEL_90;
          if (*(_DWORD **)*v69 == v30)
          {
            v38 = 0;
          }
          else
          {
            v38 = 0;
            do
            {
              if (v41 - 1 == v38)
                goto LABEL_90;
              v42 = *(_DWORD **)(*v69 + 8 + 8 * v38++);
            }
            while (v42 != v30);
            if (v38 >= v41)
              goto LABEL_90;
          }
        }
LABEL_120:
        if (!*(_BYTE *)(v27 + v28))
        {
          v68 = (int)v29;
          if (v38 < (int)v29)
            v68 = v38;
          if ((_DWORD)v29 == -1)
            v29 = v38;
          else
            v29 = v68;
          v13 = a3;
          goto LABEL_199;
        }
        if (v38 < (int)v29 || (_DWORD)v29 == -1)
          LODWORD(v29) = v38;
      }
      else if (!*(_BYTE *)(v27 + v28) && (_DWORD)v29 != -1)
      {
        return 0;
      }
LABEL_95:
      if (++v28 >= *v12)
        goto LABEL_185;
    }
  }
LABEL_10:
  v13 = v12;
  if (!a3)
    goto LABEL_185;
LABEL_128:
  if (!v13 || !*a3)
    goto LABEL_185;
  v47 = 0;
  while (1)
  {
    v48 = *(_DWORD **)(a3[1] + 8 * v47);
    v49 = v48[5];
    if (v49 == 8 || v48[6] == 16)
    {
      v50 = 772;
      v51 = *((unsigned __int16 *)v10 + 8);
      v52 = v51 - 769;
      v53 = v51;
      if (v51 - 769 >= 4)
        goto LABEL_144;
    }
    else
    {
      if (v48[9] == 1)
        v50 = 768;
      else
        v50 = 771;
      v51 = *((unsigned __int16 *)v10 + 8);
      v52 = v51 - 769;
      v53 = v51;
      if (v51 - 769 >= 4)
      {
LABEL_144:
        if (v51 == 65277)
        {
          if (v50 > 0x303)
            goto LABEL_131;
        }
        else if (v51 != 65279 || v50 > 0x302)
        {
          goto LABEL_131;
        }
        goto LABEL_136;
      }
    }
    if (v50 > v53)
      goto LABEL_131;
LABEL_136:
    if (v52 >= 4)
    {
      if (v51 == 65277)
      {
        v51 = 771;
      }
      else if (v51 == 65279)
      {
        v51 = 770;
      }
      else
      {
        v51 = 0;
      }
    }
    if (v49 == 8)
    {
      if (v51 > 0x304)
        goto LABEL_131;
    }
    else
    {
      if (v48[6] == 16)
        v54 = 772;
      else
        v54 = 771;
      if (v51 > v54)
        goto LABEL_131;
    }
    if ((v49 & v72) == 0 || (v48[6] & v71) == 0)
      goto LABEL_131;
    if (v13[4])
      break;
    v57 = *v13;
    if (*v13)
    {
      v58 = (_QWORD *)v13[1];
      if ((_DWORD *)*v58 == v48)
      {
        v29 = 0;
        goto LABEL_199;
      }
      v29 = 0;
      v59 = v58 + 1;
      while (v57 - 1 != v29)
      {
        v60 = (_DWORD *)v59[v29++];
        if (v60 == v48)
        {
          if (v29 >= v57)
            break;
          goto LABEL_199;
        }
      }
    }
LABEL_131:
    if (++v47 >= *a3)
      goto LABEL_185;
  }
  v55 = *v13;
  if (*((_DWORD *)v13 + 4) || v55 < 2)
  {
    if (v55)
    {
      v61 = 0;
      while (1)
      {
        v29 = v61 + ((v55 - v61 - 1) >> 1);
        v62 = (uint64_t (*)(_DWORD **, uint64_t *))v13[4];
        v74 = *(_QWORD *)(v13[1] + 8 * v29);
        v75 = v48;
        v63 = v62(&v75, &v74);
        if (v63 >= 1)
        {
          v61 = v29 + 1;
        }
        else if (v63 < 0)
        {
          v55 = v61 + ((v55 - v61 - 1) >> 1);
        }
        else
        {
          if (v55 - v61 == 1)
            goto LABEL_199;
          v55 = v29 + 1;
        }
        if (v61 >= v55)
          goto LABEL_131;
      }
    }
    goto LABEL_131;
  }
  v29 = 0;
  while (1)
  {
    v56 = (unsigned int (*)(_DWORD **, uint64_t *))v13[4];
    v74 = *(_QWORD *)(v13[1] + 8 * v29);
    v75 = v48;
    if (!v56(&v75, &v74))
      break;
    if (++v29 >= *v13)
      goto LABEL_131;
  }
LABEL_199:
  if (*v13 > v29)
  {
    v67 = v13 + 1;
    return *(_QWORD *)(*v67 + 8 * v29);
  }
  return 0;
}

uint64_t bssl::Array<unsigned char>::Init(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  uint64_t result;

  v4 = *a1;
  if (*a1)
  {
    v6 = *(_QWORD *)(v4 - 8);
    v5 = (void *)(v4 - 8);
    v7 = v6 + 8;
    if (v6 != -8)
      bzero(v5, v7);
    free(v5);
  }
  *a1 = 0;
  a1[1] = 0;
  if (!a2)
    return 1;
  if (a2 <= 0xFFFFFFFFFFFFFFF7)
  {
    v8 = malloc_type_malloc(a2 + 8, 0x30772F57uLL);
    if (v8)
    {
      *v8 = a2;
      *a1 = (uint64_t)(v8 + 1);
      a1[1] = a2;
      return 1;
    }
  }
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
  result = 0;
  *a1 = 0;
  return result;
}

uint64_t HKDF_expand(uint64_t a1, uint64_t a2, EVP_MD *md, void *key, int len, uint64_t a6, uint64_t a7)
{
  size_t pkey_type;
  size_t v8;
  size_t v9;
  unint64_t v10;
  int v15;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  int v22;
  int v23;
  size_t v24;
  char v25;
  HMAC_CTX ctx;

  *(_QWORD *)&ctx.key[68] = *MEMORY[0x24BDAC8D0];
  pkey_type = md->pkey_type;
  v8 = pkey_type + a2;
  if (__CFADD__(pkey_type, a2) || (v9 = v8 - 1, v10 = (v8 - 1) / pkey_type, v10 >= 0x100))
  {
    v17 = 100;
    v18 = 73;
  }
  else
  {
    memset(&ctx, 0, 104);
    HMAC_Init_ex(&ctx, key, len, md, 0);
    if (v15)
    {
      if (v9 < pkey_type)
      {
LABEL_5:
        HMAC_CTX_cleanup(&ctx);
        return 1;
      }
      v19 = 0;
      v20 = 1;
      while (1)
      {
        v25 = v20;
        if (v20 != 1)
        {
          HMAC_Init_ex(&ctx, 0, 0, 0, 0);
          if (!v22)
            break;
          ((void (*)(EVP_MD_CTX *, unsigned __int8 *, size_t))ctx.md_ctx.digest->init)(&ctx.md_ctx, &ctx.key[4], pkey_type);
        }
        ((void (*)(EVP_MD_CTX *, uint64_t, uint64_t))ctx.md_ctx.digest->init)(&ctx.md_ctx, a6, a7);
        ((void (*)(EVP_MD_CTX *, char *, uint64_t))ctx.md_ctx.digest->init)(&ctx.md_ctx, &v25, 1);
        HMAC_Final(&ctx, &ctx.key[4], 0);
        if (!v23)
          break;
        if (pkey_type >= a2 - v19)
          v24 = a2 - v19;
        else
          v24 = pkey_type;
        if (v24)
          memcpy((void *)(a1 + v19), &ctx.key[4], v24);
        v19 += v24;
        if (v10 <= v20++)
          goto LABEL_5;
      }
    }
    HMAC_CTX_cleanup(&ctx);
    v17 = 28;
    v18 = 109;
  }
  ERR_put_error(31, 0, v17, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/hkdf/hkdf.c", v18);
  return 0;
}

unsigned __int8 *__cdecl HMAC(const EVP_MD *evp_md, const void *key, int key_len, const unsigned __int8 *d, size_t n, unsigned __int8 *md, unsigned int *md_len)
{
  int v11;
  uint64_t pkey_type;
  size_t final_high;
  const EVP_MD *digest;
  size_t v15;
  ENGINE *engine;
  char *v17;
  uint64_t v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  HMAC_CTX v25;

  *(_QWORD *)&v25.key[60] = *MEMORY[0x24BDAC8D0];
  memset(&v25, 0, 104);
  HMAC_Init_ex(&v25, key, key_len, evp_md, (ENGINE *)n);
  if (v11)
  {
    ((void (*)(EVP_MD_CTX *, const unsigned __int8 *, size_t))v25.md_ctx.digest->init)(&v25.md_ctx, d, n);
    ((void (*)(EVP_MD_CTX *, unsigned int *))v25.md_ctx.digest->update)(&v25.md_ctx, &v25.key_length);
    pkey_type = v25.md_ctx.digest->pkey_type;
    final_high = HIDWORD(v25.md_ctx.digest->final);
    if ((_DWORD)final_high)
      bzero(v25.md_ctx.engine, final_high);
    if (!EVP_MD_CTX_copy_ex(&v25.md_ctx, &v25.o_ctx))
    {
      md = 0;
      *md_len = 0;
      engine = v25.i_ctx.engine;
      if (!v25.i_ctx.engine)
        goto LABEL_15;
      goto LABEL_12;
    }
    ((void (*)(EVP_MD_CTX *, unsigned int *, uint64_t))v25.md_ctx.digest->init)(&v25.md_ctx, &v25.key_length, pkey_type);
    ((void (*)(EVP_MD_CTX *, unsigned __int8 *))v25.md_ctx.digest->update)(&v25.md_ctx, md);
    digest = v25.md_ctx.digest;
    if (md_len)
      *md_len = v25.md_ctx.digest->pkey_type;
    v15 = HIDWORD(digest->final);
    if ((_DWORD)v15)
    {
      bzero(v25.md_ctx.engine, v15);
      engine = v25.i_ctx.engine;
      if (!v25.i_ctx.engine)
        goto LABEL_15;
      goto LABEL_12;
    }
  }
  else
  {
    md = 0;
  }
  engine = v25.i_ctx.engine;
  if (!v25.i_ctx.engine)
    goto LABEL_15;
LABEL_12:
  v18 = *((_QWORD *)engine - 1);
  v17 = (char *)engine - 8;
  v19 = v18 + 8;
  if (v18 != -8)
    bzero(v17, v19);
  free(v17);
LABEL_15:
  if (v25.i_ctx.md_data)
    (*(void (**)(unint64_t))v25.i_ctx.md_data)(v25.i_ctx.flags);
  memset(&v25.i_ctx, 0, sizeof(v25.i_ctx));
  if (v25.o_ctx.engine)
  {
    v21 = (char *)v25.o_ctx.engine - 8;
    v20 = *((_QWORD *)v25.o_ctx.engine - 1);
    if (v20 != -8)
      bzero(v21, v20 + 8);
    free(v21);
  }
  if (v25.o_ctx.md_data)
    (*(void (**)(unint64_t))v25.o_ctx.md_data)(v25.o_ctx.flags);
  memset(&v25.o_ctx, 0, sizeof(v25.o_ctx));
  if (v25.md_ctx.engine)
  {
    v23 = (char *)v25.md_ctx.engine - 8;
    v22 = *((_QWORD *)v25.md_ctx.engine - 1);
    if (v22 != -8)
      bzero(v23, v22 + 8);
    free(v23);
  }
  if (v25.md_ctx.md_data)
    (*(void (**)(unint64_t))v25.md_ctx.md_data)(v25.md_ctx.flags);
  return md;
}

void HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md, ENGINE *impl)
{
  uint64_t v5;
  const EVP_MD *v8;
  unint64_t final_low;
  EVP_MD_CTX *p_md_ctx;
  uint64_t final_high;
  _QWORD *v12;
  ENGINE *v13;
  ENGINE *engine;
  char *v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  int8x16_t *v20;
  int8x16_t *v21;
  int8x16_t v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  int8x8_t *v26;
  int8x8_t *v27;
  uint64_t v28;
  int8x8_t v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  ENGINE *v36;
  ENGINE *v37;
  char *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  int8x16_t *v42;
  int8x16_t *v43;
  int8x16_t v44;
  uint64_t v45;
  int8x16_t v46;
  uint64_t v47;
  int8x8_t *v48;
  int8x8_t *v49;
  uint64_t v50;
  int8x8_t v51;
  uint64_t v52;
  _BYTE *v53;
  char *v54;
  char v55;
  uint64_t v56;
  _QWORD *v57;
  ENGINE *v58;
  ENGINE *v59;
  char *v60;
  uint64_t v61;
  size_t v62;
  _BYTE v63[16];
  _BYTE v64[112];
  _BYTE v65[16];
  _QWORD v66[15];

  v5 = *(_QWORD *)&len;
  v66[14] = *MEMORY[0x24BDAC8D0];
  if (md)
    v8 = md;
  else
    v8 = ctx->md;
  if (!key && v8 == ctx->md)
    goto LABEL_63;
  final_low = LODWORD(v8->final);
  if (final_low >= *(_QWORD *)&len)
  {
    if (*(_QWORD *)&len)
      __memcpy_chk();
  }
  else
  {
    p_md_ctx = &ctx->md_ctx;
    if (ctx->md_ctx.digest != v8)
    {
      final_high = HIDWORD(v8->final);
      v12 = malloc_type_malloc(final_high + 8, 0x30772F57uLL);
      if (!v12)
        goto LABEL_64;
      *v12 = final_high;
      v13 = (ENGINE *)(v12 + 1);
      engine = ctx->md_ctx.engine;
      if (engine)
      {
        v16 = *((_QWORD *)engine - 1);
        v15 = (char *)engine - 8;
        v17 = v16 + 8;
        if (v16 != -8)
          bzero(v15, v17);
        free(v15);
      }
      ctx->md_ctx.digest = v8;
      ctx->md_ctx.engine = v13;
    }
    ((void (*)(EVP_MD_CTX *))v8->flags)(&ctx->md_ctx);
    ((void (*)(EVP_MD_CTX *, const void *, uint64_t))p_md_ctx->digest->init)(&ctx->md_ctx, key, v5);
    ((void (*)(EVP_MD_CTX *, _BYTE *))p_md_ctx->digest->update)(&ctx->md_ctx, v63);
    LODWORD(v5) = p_md_ctx->digest->pkey_type;
    v18 = HIDWORD(p_md_ctx->digest->final);
    if ((_DWORD)v18)
      bzero(ctx->md_ctx.engine, v18);
  }
  if ((_DWORD)final_low != (_DWORD)v5)
    bzero(&v63[v5], final_low - v5);
  if ((_DWORD)final_low)
  {
    if (final_low < 8)
    {
      v19 = 0;
      goto LABEL_32;
    }
    if (final_low >= 0x20)
    {
      v19 = final_low & 0xFFFFFFE0;
      v20 = (int8x16_t *)v64;
      v21 = (int8x16_t *)v66;
      v22.i64[0] = 0x3636363636363636;
      v22.i64[1] = 0x3636363636363636;
      v23 = v19;
      do
      {
        v24 = veorq_s8(*v20, v22);
        v21[-1] = veorq_s8(v20[-1], v22);
        *v21 = v24;
        v20 += 2;
        v21 += 2;
        v23 -= 32;
      }
      while (v23);
      if (v19 == final_low)
        goto LABEL_34;
      if ((final_low & 0x18) == 0)
      {
LABEL_32:
        v30 = final_low - v19;
        v31 = &v65[v19];
        v32 = &v63[v19];
        do
        {
          v33 = *v32++;
          *v31++ = v33 ^ 0x36;
          --v30;
        }
        while (v30);
        goto LABEL_34;
      }
    }
    else
    {
      v19 = 0;
    }
    v25 = v19;
    v19 = final_low & 0xFFFFFFF8;
    v26 = (int8x8_t *)&v63[v25];
    v27 = (int8x8_t *)&v65[v25];
    v28 = v25 - v19;
    do
    {
      v29 = *v26++;
      *v27++ = veor_s8(v29, (int8x8_t)0x3636363636363636);
      v28 += 8;
    }
    while (v28);
    if (v19 != final_low)
      goto LABEL_32;
  }
LABEL_34:
  if (ctx->i_ctx.digest != v8)
  {
    v34 = HIDWORD(v8->final);
    v35 = malloc_type_malloc(v34 + 8, 0x30772F57uLL);
    if (!v35)
      goto LABEL_64;
    *v35 = v34;
    v36 = (ENGINE *)(v35 + 1);
    v37 = ctx->i_ctx.engine;
    if (v37)
    {
      v39 = *((_QWORD *)v37 - 1);
      v38 = (char *)v37 - 8;
      v40 = v39 + 8;
      if (v39 != -8)
        bzero(v38, v40);
      free(v38);
    }
    ctx->i_ctx.digest = v8;
    ctx->i_ctx.engine = v36;
  }
  ((void (*)(EVP_MD_CTX *))v8->flags)(&ctx->i_ctx);
  ((void (*)(EVP_MD_CTX *, _BYTE *, unint64_t))ctx->i_ctx.digest->init)(&ctx->i_ctx, v65, final_low);
  if (!(_DWORD)final_low)
    goto LABEL_55;
  if (final_low >= 8)
  {
    if (final_low >= 0x20)
    {
      v41 = final_low & 0xFFFFFFE0;
      v42 = (int8x16_t *)v64;
      v43 = (int8x16_t *)v66;
      v44.i64[0] = 0x5C5C5C5C5C5C5C5CLL;
      v44.i64[1] = 0x5C5C5C5C5C5C5C5CLL;
      v45 = v41;
      do
      {
        v46 = veorq_s8(*v42, v44);
        v43[-1] = veorq_s8(v42[-1], v44);
        *v43 = v46;
        v42 += 2;
        v43 += 2;
        v45 -= 32;
      }
      while (v45);
      if (v41 == final_low)
        goto LABEL_55;
      if ((final_low & 0x18) == 0)
        goto LABEL_53;
    }
    else
    {
      v41 = 0;
    }
    v47 = v41;
    v41 = final_low & 0xFFFFFFF8;
    v48 = (int8x8_t *)&v63[v47];
    v49 = (int8x8_t *)&v65[v47];
    v50 = v47 - v41;
    do
    {
      v51 = *v48++;
      *v49++ = veor_s8(v51, (int8x8_t)0x5C5C5C5C5C5C5C5CLL);
      v50 += 8;
    }
    while (v50);
    if (v41 == final_low)
      goto LABEL_55;
    goto LABEL_53;
  }
  v41 = 0;
LABEL_53:
  v52 = final_low - v41;
  v53 = &v65[v41];
  v54 = &v63[v41];
  do
  {
    v55 = *v54++;
    *v53++ = v55 ^ 0x5C;
    --v52;
  }
  while (v52);
LABEL_55:
  if (ctx->o_ctx.digest == v8)
  {
LABEL_62:
    ((void (*)(EVP_MD_CTX *))v8->flags)(&ctx->o_ctx);
    ((void (*)(EVP_MD_CTX *, _BYTE *, unint64_t))ctx->o_ctx.digest->init)(&ctx->o_ctx, v65, final_low);
    ctx->md = v8;
LABEL_63:
    EVP_MD_CTX_copy_ex(&ctx->md_ctx, &ctx->i_ctx);
    return;
  }
  v56 = HIDWORD(v8->final);
  v57 = malloc_type_malloc(v56 + 8, 0x30772F57uLL);
  if (v57)
  {
    *v57 = v56;
    v58 = (ENGINE *)(v57 + 1);
    v59 = ctx->o_ctx.engine;
    if (v59)
    {
      v61 = *((_QWORD *)v59 - 1);
      v60 = (char *)v59 - 8;
      v62 = v61 + 8;
      if (v61 != -8)
        bzero(v60, v62);
      free(v60);
    }
    ctx->o_ctx.digest = v8;
    ctx->o_ctx.engine = v58;
    goto LABEL_62;
  }
LABEL_64:
  ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
}

void HMAC_Final(HMAC_CTX *ctx, unsigned __int8 *md, unsigned int *len)
{
  EVP_MD_CTX *p_md_ctx;
  uint64_t pkey_type;
  size_t final_high;
  const EVP_MD *digest;
  size_t v10;
  _BYTE v11[64];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  p_md_ctx = &ctx->md_ctx;
  ((void (*)(EVP_MD_CTX *, _BYTE *))ctx->md_ctx.digest->update)(&ctx->md_ctx, v11);
  pkey_type = p_md_ctx->digest->pkey_type;
  final_high = HIDWORD(p_md_ctx->digest->final);
  if ((_DWORD)final_high)
    bzero(ctx->md_ctx.engine, final_high);
  if (EVP_MD_CTX_copy_ex(p_md_ctx, &ctx->o_ctx))
  {
    ((void (*)(EVP_MD_CTX *, _BYTE *, uint64_t))p_md_ctx->digest->init)(p_md_ctx, v11, pkey_type);
    ((void (*)(EVP_MD_CTX *, unsigned __int8 *))p_md_ctx->digest->update)(p_md_ctx, md);
    digest = p_md_ctx->digest;
    if (len)
      *len = digest->pkey_type;
    v10 = HIDWORD(digest->final);
    if ((_DWORD)v10)
      bzero(ctx->md_ctx.engine, v10);
  }
  else
  {
    *len = 0;
  }
}

void HMAC_CTX_cleanup(HMAC_CTX *ctx)
{
  ENGINE *engine;
  char *v3;
  uint64_t v4;
  size_t v5;
  void (**md_data)(unint64_t);
  ENGINE *v7;
  char *v8;
  uint64_t v9;
  size_t v10;
  void (**v11)(unint64_t);
  ENGINE *v12;
  char *v13;
  uint64_t v14;
  size_t v15;
  void (**v16)(unint64_t);

  engine = ctx->i_ctx.engine;
  if (engine)
  {
    v4 = *((_QWORD *)engine - 1);
    v3 = (char *)engine - 8;
    v5 = v4 + 8;
    if (v4 != -8)
      bzero(v3, v5);
    free(v3);
  }
  md_data = (void (**)(unint64_t))ctx->i_ctx.md_data;
  if (md_data)
    (*md_data)(ctx->i_ctx.flags);
  *(_OWORD *)&ctx->i_ctx.digest = 0u;
  *(_OWORD *)&ctx->i_ctx.flags = 0u;
  v7 = ctx->o_ctx.engine;
  if (v7)
  {
    v9 = *((_QWORD *)v7 - 1);
    v8 = (char *)v7 - 8;
    v10 = v9 + 8;
    if (v9 != -8)
      bzero(v8, v10);
    free(v8);
  }
  v11 = (void (**)(unint64_t))ctx->o_ctx.md_data;
  if (v11)
    (*v11)(ctx->o_ctx.flags);
  *(_OWORD *)&ctx->o_ctx.digest = 0u;
  *(_OWORD *)&ctx->o_ctx.flags = 0u;
  v12 = ctx->md_ctx.engine;
  if (v12)
  {
    v14 = *((_QWORD *)v12 - 1);
    v13 = (char *)v12 - 8;
    v15 = v14 + 8;
    if (v14 != -8)
      bzero(v13, v15);
    free(v13);
  }
  v16 = (void (**)(unint64_t))ctx->md_ctx.md_data;
  if (v16)
    (*v16)(ctx->md_ctx.flags);
  *(_OWORD *)&ctx->md_ctx.digest = 0u;
  *(_OWORD *)&ctx->md_ctx.flags = 0u;
  *(_OWORD *)&ctx->i_ctx.md_data = 0u;
  *(_OWORD *)&ctx->o_ctx.engine = 0u;
  ctx->o_ctx.md_data = 0;
  *(_OWORD *)&ctx->md_ctx.md_data = 0u;
  *(_OWORD *)&ctx->i_ctx.engine = 0u;
  *(_OWORD *)&ctx->md = 0u;
  *(_OWORD *)&ctx->md_ctx.engine = 0u;
}

void HMAC_CTX_free(char *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  size_t v5;
  void (**v6)(_QWORD);
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  void (**v11)(_QWORD);
  uint64_t v12;
  void *v13;
  uint64_t v14;
  size_t v15;
  void (**v16)(_QWORD);
  char *v17;
  uint64_t v18;
  size_t v19;

  if (a1)
  {
    v2 = *((_QWORD *)a1 + 6);
    if (v2)
    {
      v4 = *(_QWORD *)(v2 - 8);
      v3 = (void *)(v2 - 8);
      v5 = v4 + 8;
      if (v4 != -8)
        bzero(v3, v5);
      free(v3);
    }
    v6 = (void (**)(_QWORD))*((_QWORD *)a1 + 8);
    if (v6)
      (*v6)(*((_QWORD *)a1 + 7));
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    v7 = *((_QWORD *)a1 + 10);
    if (v7)
    {
      v9 = *(_QWORD *)(v7 - 8);
      v8 = (void *)(v7 - 8);
      v10 = v9 + 8;
      if (v9 != -8)
        bzero(v8, v10);
      free(v8);
    }
    v11 = (void (**)(_QWORD))*((_QWORD *)a1 + 12);
    if (v11)
      (*v11)(*((_QWORD *)a1 + 11));
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    v12 = *((_QWORD *)a1 + 2);
    if (v12)
    {
      v14 = *(_QWORD *)(v12 - 8);
      v13 = (void *)(v12 - 8);
      v15 = v14 + 8;
      if (v14 != -8)
        bzero(v13, v15);
      free(v13);
    }
    v16 = (void (**)(_QWORD))*((_QWORD *)a1 + 4);
    if (v16)
      (*v16)(*((_QWORD *)a1 + 3));
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *((_QWORD *)a1 + 12) = 0;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    v18 = *((_QWORD *)a1 - 1);
    v17 = a1 - 8;
    v19 = v18 + 8;
    if (v18 != -8)
      bzero(v17, v19);
    free(v17);
  }
}

uint64_t x25519_init_key(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v3;

  if (a3 == 32)
  {
    v3 = *a2;
    *(_OWORD *)(a1 + 24) = a2[1];
    *(_OWORD *)(a1 + 8) = v3;
    X25519_public_from_private((_BYTE *)(a1 + 40), a2);
    return 1;
  }
  else
  {
    ERR_put_error(6, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c", 150);
    return 0;
  }
}

uint64_t x25519_generate_key(uint64_t a1)
{
  _BYTE *v2;
  __int128 *v3;

  v2 = (_BYTE *)(a1 + 40);
  v3 = (__int128 *)(a1 + 8);
  RAND_bytes_with_additional_data(a1 + 8, 0x20uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
  *(_BYTE *)(a1 + 8) |= 7u;
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a1 + 39) & 0x3F | 0x80;
  X25519_public_from_private(v2, v3);
  return 1;
}

uint64_t x25519_encap_with_seed(__int16 *a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, unint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, uint64_t a10)
{
  int v10;
  int v11;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  uint64_t result;
  int v23[2];
  _BYTE v24[3];
  char v25;
  char v26;
  _OWORD v27[4];
  int8x16_t __src[2];
  unsigned __int8 v29[64];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  if (a6 <= 0x1F)
  {
    v10 = 137;
    v11 = 170;
LABEL_12:
    ERR_put_error(6, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c", v11);
    return 0;
  }
  if (a10 != 32)
  {
    v10 = 102;
    v11 = 174;
    goto LABEL_12;
  }
  X25519_public_from_private((_BYTE *)a4, a9);
  if (a8 != 32 || !X25519(__src, a9, (unsigned int *)a7))
  {
    v10 = 134;
    v11 = 182;
    goto LABEL_12;
  }
  v19 = *(_OWORD *)(a4 + 16);
  v27[0] = *(_OWORD *)a4;
  v27[1] = v19;
  v20 = *(_OWORD *)(a7 + 16);
  v27[2] = *(_OWORD *)a7;
  v27[3] = v20;
  v21 = *a1;
  if (pthread_once(&EVP_sha256_once, (void (*)(void))EVP_sha256_init))
    abort();
  qmemcpy(v24, "KEM", sizeof(v24));
  v25 = HIBYTE(v21);
  v26 = v21;
  *(_QWORD *)v23 = 0;
  result = hpke_labeled_extract((const EVP_MD *)&EVP_sha256_storage, v29, v23, 0, 0, v24, 5uLL, "eae_prk", __src, 32);
  if ((_DWORD)result)
  {
    result = hpke_labeled_expand((EVP_MD *)&EVP_sha256_storage, a2, 32, v29, v23[0], v24, 5uLL, "shared_secret", v27, 64);
    if ((_DWORD)result)
    {
      *a5 = 32;
      *a3 = 32;
      return 1;
    }
  }
  return result;
}

uint64_t x25519_decap(__int16 **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  __int128 v9;
  __int128 v10;
  __int16 v11;
  uint64_t result;
  int v13[2];
  _BYTE v14[3];
  char v15;
  char v16;
  _OWORD v17[4];
  int8x16_t __src[2];
  unsigned __int8 v19[64];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (a5 == 32 && X25519(__src, (__int128 *)(a1 + 1), (unsigned int *)a4))
  {
    v9 = *(_OWORD *)(a4 + 16);
    v17[0] = *(_OWORD *)a4;
    v17[1] = v9;
    v10 = *(_OWORD *)(a1 + 7);
    v17[2] = *(_OWORD *)(a1 + 5);
    v17[3] = v10;
    v11 = **a1;
    if (pthread_once(&EVP_sha256_once, (void (*)(void))EVP_sha256_init))
      abort();
    qmemcpy(v14, "KEM", sizeof(v14));
    v15 = HIBYTE(v11);
    v16 = v11;
    *(_QWORD *)v13 = 0;
    result = hpke_labeled_extract((const EVP_MD *)&EVP_sha256_storage, v19, v13, 0, 0, v14, 5uLL, "eae_prk", __src, 32);
    if ((_DWORD)result)
    {
      result = hpke_labeled_expand((EVP_MD *)&EVP_sha256_storage, a2, 32, v19, v13[0], v14, 5uLL, "shared_secret", v17, 64);
      if ((_DWORD)result)
      {
        *a3 = 32;
        return 1;
      }
    }
  }
  else
  {
    ERR_put_error(6, 0, 134, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c", 207);
    return 0;
  }
  return result;
}

uint64_t x25519_auth_encap_with_seed(__int16 **a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, unint64_t a6, uint64_t a7, uint64_t a8, __int128 *a9, uint64_t a10)
{
  int v10;
  int v11;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int16 v22;
  uint64_t result;
  int v24[2];
  _BYTE v25[3];
  char v26;
  char v27;
  _OWORD v28[6];
  int8x16_t __src[2];
  int8x16_t v30[2];
  unsigned __int8 v31[64];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a6 <= 0x1F)
  {
    v10 = 137;
    v11 = 231;
LABEL_13:
    ERR_put_error(6, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c", v11);
    return 0;
  }
  if (a10 != 32)
  {
    v10 = 102;
    v11 = 235;
    goto LABEL_13;
  }
  X25519_public_from_private((_BYTE *)a4, a9);
  if (a8 != 32 || !X25519(__src, a9, (unsigned int *)a7) || !X25519(v30, (__int128 *)(a1 + 1), (unsigned int *)a7))
  {
    v10 = 134;
    v11 = 244;
    goto LABEL_13;
  }
  v19 = *(_OWORD *)(a4 + 16);
  v28[0] = *(_OWORD *)a4;
  v28[1] = v19;
  v20 = *(_OWORD *)(a7 + 16);
  v28[2] = *(_OWORD *)a7;
  v28[3] = v20;
  v21 = *(_OWORD *)(a1 + 7);
  v28[4] = *(_OWORD *)(a1 + 5);
  v28[5] = v21;
  v22 = **a1;
  if (pthread_once(&EVP_sha256_once, (void (*)(void))EVP_sha256_init))
    abort();
  qmemcpy(v25, "KEM", sizeof(v25));
  v26 = HIBYTE(v22);
  v27 = v22;
  *(_QWORD *)v24 = 0;
  result = hpke_labeled_extract((const EVP_MD *)&EVP_sha256_storage, v31, v24, 0, 0, v25, 5uLL, "eae_prk", __src, 64);
  if ((_DWORD)result)
  {
    result = hpke_labeled_expand((EVP_MD *)&EVP_sha256_storage, a2, 32, v31, v24[0], v25, 5uLL, "shared_secret", v28, 96);
    if ((_DWORD)result)
    {
      *a5 = 32;
      *a3 = 32;
      return 1;
    }
  }
  return result;
}

uint64_t x25519_auth_decap(__int16 **a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int16 v16;
  uint64_t result;
  int v18[2];
  _BYTE v19[3];
  char v20;
  char v21;
  _OWORD v22[6];
  int8x16_t __src[2];
  int8x16_t v24[2];
  unsigned __int8 v25[64];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (a5 == 32
    && a7 == 32
    && (v12 = (__int128 *)(a1 + 1), X25519(__src, (__int128 *)(a1 + 1), (unsigned int *)a4))
    && X25519(v24, v12, (unsigned int *)a6))
  {
    v13 = *(_OWORD *)(a4 + 16);
    v22[0] = *(_OWORD *)a4;
    v22[1] = v13;
    v14 = *(_OWORD *)(a1 + 7);
    v22[2] = *(_OWORD *)(a1 + 5);
    v22[3] = v14;
    v15 = *(_OWORD *)(a6 + 16);
    v22[4] = *(_OWORD *)a6;
    v22[5] = v15;
    v16 = **a1;
    if (pthread_once(&EVP_sha256_once, (void (*)(void))EVP_sha256_init))
      abort();
    qmemcpy(v19, "KEM", sizeof(v19));
    v20 = HIBYTE(v16);
    v21 = v16;
    *(_QWORD *)v18 = 0;
    result = hpke_labeled_extract((const EVP_MD *)&EVP_sha256_storage, v25, v18, 0, 0, v19, 5uLL, "eae_prk", __src, 64);
    if ((_DWORD)result)
    {
      result = hpke_labeled_expand((EVP_MD *)&EVP_sha256_storage, a2, 32, v25, v18[0], v19, 5uLL, "shared_secret", v22, 96);
      if ((_DWORD)result)
      {
        *a3 = 32;
        return 1;
      }
    }
  }
  else
  {
    ERR_put_error(6, 0, 134, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c", 275);
    return 0;
  }
  return result;
}

void EVP_HPKE_CTX_zero(uint64_t a1)
{
  bzero((void *)a1, 0x2C8uLL);
  bzero((void *)(a1 + 24), 0x248uLL);
}

uint64_t EVP_HPKE_CTX_setup_sender(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11)
{
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  uint64_t v22;
  _BYTE v23[32];
  _BYTE v24[32];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  RAND_bytes_with_additional_data((uint64_t)v23, *(_QWORD *)(a5 + 24), (uint64_t)&RAND_bytes_kZeroAdditionalData);
  v18 = *(_QWORD *)(a5 + 24);
  bzero(a1, 0x2C8uLL);
  v19 = a1 + 3;
  bzero(a1 + 3, 0x248uLL);
  *((_DWORD *)a1 + 176) = 1;
  a1[1] = a7;
  a1[2] = a6;
  *a1 = a5;
  v22 = 0;
  if ((*(unsigned int (**)(uint64_t, _BYTE *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(a5 + 56))(a5, v24, &v22, a2, a3, a4, a8, a9, v23, v18)&& hpke_key_schedule((__int16 **)a1, 0, v24, v22, a10, a11))
  {
    return 1;
  }
  if (!*v19)
    return 0;
  (*(void (**)(_QWORD *))(*v19 + 24))(a1 + 3);
  result = 0;
  *v19 = 0;
  return result;
}

uint64_t hpke_key_schedule(__int16 **a1, char a2, const void *a3, int a4, void *a5, uint64_t a6)
{
  __int16 v12;
  __int16 v13;
  __int16 v14;
  uint64_t result;
  EVP_MD *v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  int v23[2];
  __int128 v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  size_t v28;
  size_t v29;
  void *__dst[10];
  unsigned __int8 v31[64];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  unsigned __int8 v35[64];
  unsigned __int8 __src[64];
  _BYTE v37[10];
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  *(_QWORD *)&v33 = v37;
  *(_QWORD *)&v34 = 10;
  __dst[0] = 0;
  if (!CBB_add_space((uint64_t)&v32, __dst, 4))
    return 0;
  *(_DWORD *)__dst[0] = 1162563656;
  v12 = **a1;
  __dst[0] = 0;
  if (!CBB_add_space((uint64_t)&v32, __dst, 2))
    return 0;
  *((_BYTE *)__dst[0] + 1) = v12;
  *(_BYTE *)__dst[0] = HIBYTE(v12);
  v13 = *a1[2];
  __dst[0] = 0;
  if (!CBB_add_space((uint64_t)&v32, __dst, 2))
    return 0;
  *((_BYTE *)__dst[0] + 1) = v13;
  *(_BYTE *)__dst[0] = HIBYTE(v13);
  v14 = *a1[1];
  __dst[0] = 0;
  result = CBB_add_space((uint64_t)&v32, __dst, 2);
  if ((_DWORD)result)
  {
    *((_BYTE *)__dst[0] + 1) = v14;
    *(_BYTE *)__dst[0] = HIBYTE(v14);
    v16 = (EVP_MD *)(*((uint64_t (**)(void))a1[2] + 1))();
    v29 = 0;
    result = hpke_labeled_extract(v16, __src, &v29, 0, 0, v37, 0xAuLL, "psk_id_hash", 0, 0);
    if ((_DWORD)result)
    {
      v28 = 0;
      result = hpke_labeled_extract(v16, v35, &v28, 0, 0, v37, 0xAuLL, "info_hash", a5, a6);
      if ((_DWORD)result)
      {
        v26 = 0;
        v24 = 0u;
        v25 = &v32;
        v27 = 0x81uLL;
        __dst[0] = 0;
        result = CBB_add_space((uint64_t)&v24, __dst, 1);
        if ((_DWORD)result)
        {
          *(_BYTE *)__dst[0] = a2;
          v17 = v29;
          __dst[0] = 0;
          result = CBB_add_space((uint64_t)&v24, __dst, v29);
          if ((_DWORD)result)
          {
            if (v17)
              memcpy(__dst[0], __src, v17);
            v18 = v28;
            __dst[0] = 0;
            result = CBB_add_space((uint64_t)&v24, __dst, v28);
            if ((_DWORD)result)
            {
              if (v18)
                memcpy(__dst[0], v35, v18);
              if (BYTE8(v24))
              {
                ERR_put_error(14, 0, 66, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bytestring/cbb.c", 127);
                return 0;
              }
              result = CBB_flush((uint64_t *)&v24);
              if ((_DWORD)result)
              {
                if ((BYTE8(v27) & 1) != 0)
                  return 0;
                v19 = v26;
                v25 = 0;
                *(_QWORD *)v23 = 0;
                result = hpke_labeled_extract(v16, v31, v23, a3, a4, v37, 0xAuLL, "secret", 0, 0);
                if ((_DWORD)result)
                {
                  v20 = (unsigned __int8 *)(*((uint64_t (**)(void))a1[1] + 1))();
                  v21 = *v20;
                  v22 = v23[0];
                  result = hpke_labeled_expand(v16, (uint64_t)__dst, v21, v31, v23[0], v37, 0xAuLL, "key", &v32, v19);
                  if ((_DWORD)result)
                  {
                    result = EVP_AEAD_CTX_init(a1 + 3, v20, (uint64_t)__dst, v21, 0);
                    if ((_DWORD)result)
                    {
                      result = hpke_labeled_expand(v16, (uint64_t)(a1 + 76), v20[1], v31, v22, v37, 0xAuLL, "base_nonce", &v32, v19);
                      if ((_DWORD)result)
                        return hpke_labeled_expand(v16, (uint64_t)(a1 + 79), v16->pkey_type, v31, v22, v37, 0xAuLL, "exp", &v32, v19);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t EVP_HPKE_CTX_open(int8x16_t *a1, char *a2, size_t *a3, size_t a4, char *a5, unint64_t a6)
{
  int v6;
  int v7;
  uint64_t result;
  unint64_t v10;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t *v17;
  size_t v18;
  __int8 *v19;
  uint64x2_t v20;
  int16x8_t v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  int8x8_t *v28;
  int8x8_t *v29;
  uint64_t v30;
  int8x8_t v31;
  uint64_t v32;
  __int8 *v33;
  __int8 *v34;
  char v35;
  __int8 *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t vars0;

  v38.i64[1] = *MEMORY[0x24BDAC8D0];
  if (a1[44].i32[0])
  {
    v6 = 66;
    v7 = 726;
LABEL_3:
    ERR_put_error(6, 0, v6, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c", v7);
    return 0;
  }
  v10 = a1[43].u64[1];
  if (v10 == -1)
  {
    v6 = 69;
    v7 = 730;
    goto LABEL_3;
  }
  v13 = &a1[1].u8[8];
  v14 = a1[1].i64[1];
  v15 = *(unsigned __int8 *)(v14 + 1);
  if (*(_BYTE *)(v14 + 1))
  {
    v36 = &a1[1].i8[8];
    v16 = a2;
    v17 = a3;
    v18 = a4;
    __memset_chk();
    a2 = v16;
    a3 = v17;
    a4 = v18;
    v13 = &a1[1].u8[8];
  }
  v19 = &v37.i8[v15];
  *((_DWORD *)v19 - 1) = bswap32(v10);
  v20 = (uint64x2_t)vdupq_n_s64(v10);
  v21 = (int16x8_t)vshlq_u64(v20, (uint64x2_t)xmmword_208F2AFA0);
  *(int32x2_t *)v20.i8 = vmovn_s64((int64x2_t)vshlq_u64(v20, (uint64x2_t)xmmword_208F2AFB0));
  *(int32x2_t *)v21.i8 = vmovn_s64((int64x2_t)v21);
  v21.i16[1] = v21.i16[2];
  v21.i16[2] = v20.i16[0];
  v21.i16[3] = v20.i16[2];
  *((_DWORD *)v19 - 2) = vmovn_s16(v21).u32[0];
  if ((_DWORD)v15)
  {
    if (v15 < 8)
    {
      v22 = 0;
LABEL_23:
      v32 = v15 - v22;
      v33 = &v37.i8[v22];
      v34 = &a1[38].i8[v22];
      do
      {
        v35 = *v34++;
        *v33++ ^= v35;
        --v32;
      }
      while (v32);
      goto LABEL_25;
    }
    if (v15 >= 0x20)
    {
      v22 = v15 & 0xE0;
      v23 = veorq_s8(v38, a1[39]);
      v37 = veorq_s8(v37, a1[38]);
      v38 = v23;
      if (v22 != 32)
      {
        v24 = veorq_s8(v40, a1[41]);
        v39 = veorq_s8(v39, a1[40]);
        v40 = v24;
        if (v22 != 64)
        {
          v25 = veorq_s8(v42, a1[43]);
          v41 = veorq_s8(v41, a1[42]);
          v42 = v25;
          if (v22 != 96)
          {
            v26 = veorq_s8(vars0, a1[45]);
            v43 = veorq_s8(v43, a1[44]);
            vars0 = v26;
          }
        }
      }
      if (v22 == v15)
        goto LABEL_25;
      if ((v15 & 0x18) == 0)
        goto LABEL_23;
    }
    else
    {
      v22 = 0;
    }
    v27 = v22;
    v22 = v15 & 0xF8;
    v28 = (int8x8_t *)&a1[38].i8[v27];
    v29 = (int8x8_t *)&v37.i8[v27];
    v30 = v27 - v22;
    do
    {
      v31 = *v28++;
      *v29 = veor_s8(*v29, v31);
      ++v29;
      v30 += 8;
    }
    while (v30);
    if (v22 == v15)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_25:
  result = EVP_AEAD_CTX_open(v13, a2, a3, a4, (uint64_t)&v37, v15, a5, a6);
  if ((_DWORD)result)
  {
    ++a1[43].i64[1];
    return 1;
  }
  return result;
}

uint64_t EVP_HPKE_CTX_seal(int8x16_t *a1, char *a2, _QWORD *a3, size_t a4, char *a5, size_t a6)
{
  unint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  __int8 *v17;
  uint64x2_t v18;
  int16x8_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t result;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  uint64_t v28;
  int8x8_t *v29;
  int8x8_t *v30;
  uint64_t v31;
  int8x8_t v32;
  uint64_t v33;
  __int8 *v34;
  __int8 *v35;
  char v36;
  __int8 *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t vars0;

  v39.i64[1] = *MEMORY[0x24BDAC8D0];
  if (!a1[44].i32[0])
  {
    v21 = 66;
    v22 = 750;
LABEL_10:
    ERR_put_error(6, 0, v21, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/hpke/hpke.c", v22);
    return 0;
  }
  v7 = a1[43].u64[1];
  if (v7 == -1)
  {
    v21 = 69;
    v22 = 754;
    goto LABEL_10;
  }
  v10 = (uint64_t)&a1[1].i64[1];
  v11 = a1[1].i64[1];
  v12 = *(unsigned __int8 *)(v11 + 1);
  if (*(_BYTE *)(v11 + 1))
  {
    v37 = &a1[1].i8[8];
    v13 = a2;
    v14 = a3;
    v15 = a4;
    v16 = v12;
    __memset_chk();
    v12 = v16;
    v10 = (uint64_t)&a1[1].i64[1];
    a2 = v13;
    a3 = v14;
    a4 = v15;
  }
  v17 = &v38.i8[v12];
  *((_DWORD *)v17 - 1) = bswap32(v7);
  v18 = (uint64x2_t)vdupq_n_s64(v7);
  v19 = (int16x8_t)vshlq_u64(v18, (uint64x2_t)xmmword_208F2AFA0);
  *(int32x2_t *)v18.i8 = vmovn_s64((int64x2_t)vshlq_u64(v18, (uint64x2_t)xmmword_208F2AFB0));
  *(int32x2_t *)v19.i8 = vmovn_s64((int64x2_t)v19);
  v19.i16[1] = v19.i16[2];
  v19.i16[2] = v18.i16[0];
  v19.i16[3] = v18.i16[2];
  *((_DWORD *)v17 - 2) = vmovn_s16(v19).u32[0];
  if (!(_DWORD)v12)
    goto LABEL_24;
  if (v12 >= 8)
  {
    if (v12 >= 0x20)
    {
      v20 = v12 & 0xE0;
      v24 = veorq_s8(v39, a1[39]);
      v38 = veorq_s8(v38, a1[38]);
      v39 = v24;
      if (v20 != 32)
      {
        v25 = veorq_s8(v41, a1[41]);
        v40 = veorq_s8(v40, a1[40]);
        v41 = v25;
        if (v20 != 64)
        {
          v26 = veorq_s8(v43, a1[43]);
          v42 = veorq_s8(v42, a1[42]);
          v43 = v26;
          if (v20 != 96)
          {
            v27 = veorq_s8(vars0, a1[45]);
            v44 = veorq_s8(v44, a1[44]);
            vars0 = v27;
          }
        }
      }
      if (v20 == v12)
        goto LABEL_24;
      if ((v12 & 0x18) == 0)
        goto LABEL_22;
    }
    else
    {
      v20 = 0;
    }
    v28 = v20;
    v20 = v12 & 0xF8;
    v29 = (int8x8_t *)&a1[38].i8[v28];
    v30 = (int8x8_t *)&v38.i8[v28];
    v31 = v28 - v20;
    do
    {
      v32 = *v29++;
      *v30 = veor_s8(*v30, v32);
      ++v30;
      v31 += 8;
    }
    while (v31);
    if (v20 == v12)
      goto LABEL_24;
    goto LABEL_22;
  }
  v20 = 0;
LABEL_22:
  v33 = v12 - v20;
  v34 = &v38.i8[v20];
  v35 = &a1[38].i8[v20];
  do
  {
    v36 = *v35++;
    *v34++ ^= v36;
    --v33;
  }
  while (v33);
LABEL_24:
  result = EVP_AEAD_CTX_seal(v10, a2, a3, a4, (uint64_t)&v38, v12, a5, a6);
  if ((_DWORD)result)
  {
    ++a1[43].i64[1];
    return 1;
  }
  return result;
}

BOOL hpke_labeled_expand(EVP_MD *a1, uint64_t a2, uint64_t a3, void *a4, int a5, const void *a6, size_t a7, const char *a8, void *__src, uint64_t a10)
{
  _QWORD *v18;
  void *v19;
  _DWORD *v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  void *v30[2];
  __int128 v31;
  uint64_t v32;
  void *__dst;

  v32 = 0;
  *(_OWORD *)v30 = 0u;
  v31 = 0u;
  v18 = malloc_type_malloc(8uLL, 0x30772F57uLL);
  if (v18)
  {
    *v18 = 0;
    v19 = v18 + 1;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v19 = 0;
  }
  LOBYTE(v30[0]) = 0;
  v29 = 0;
  v31 = 0uLL;
  v30[1] = v19;
  LOBYTE(v32) = 1;
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v29, &__dst, 2))
    goto LABEL_17;
  *((_BYTE *)__dst + 1) = a3;
  *(_BYTE *)__dst = BYTE1(a3);
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v29, &__dst, 7))
    goto LABEL_17;
  v20 = __dst;
  *(_DWORD *)((char *)__dst + 3) = 829828421;
  *v20 = 1162563656;
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v29, &__dst, a7))
    goto LABEL_17;
  if (a7)
    memcpy(__dst, a6, a7);
  v21 = strlen(a8);
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v29, &__dst, v21))
    goto LABEL_17;
  if (v21)
    memcpy(__dst, a8, v21);
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v29, &__dst, a10))
  {
LABEL_17:
    v25 = 0;
    if (LOBYTE(v30[0]))
      return v25;
    goto LABEL_18;
  }
  if (a10)
    memcpy(__dst, __src, a10);
  v22 = v30[1];
  if (LOBYTE(v30[0]))
  {
    v23 = v31 + BYTE8(v31);
    v22 = (void *)(v23 + *(_QWORD *)v30[1]);
    v24 = *((_QWORD *)v30[1] + 1) - v23;
  }
  else
  {
    v24 = v31;
  }
  v25 = HKDF_expand(a2, a3, a1, a4, a5, (uint64_t)v22, v24) != 0;
  if (!LOBYTE(v30[0]))
  {
LABEL_18:
    if ((v32 & 1) != 0 && v30[1])
    {
      v27 = (char *)v30[1] - 8;
      v26 = *((_QWORD *)v30[1] - 1);
      if (v26 != -8)
        bzero(v27, v26 + 8);
      free(v27);
    }
  }
  return v25;
}

uint64_t hpke_labeled_extract(const EVP_MD *a1, unsigned __int8 *a2, _QWORD *a3, const void *a4, int a5, const void *a6, size_t a7, const char *a8, void *__src, uint64_t a10)
{
  _QWORD *v18;
  unsigned __int8 *v19;
  _DWORD *v20;
  size_t v21;
  const unsigned __int8 *v22;
  size_t v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v29;
  unsigned __int8 *d[2];
  size_t n[2];
  uint64_t v32;
  void *__dst;

  v32 = 0;
  *(_OWORD *)d = 0u;
  *(_OWORD *)n = 0u;
  v18 = malloc_type_malloc(8uLL, 0x30772F57uLL);
  if (v18)
  {
    *v18 = 0;
    v19 = (unsigned __int8 *)(v18 + 1);
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    v19 = 0;
  }
  LOBYTE(d[0]) = 0;
  v29 = 0;
  n[0] = 0;
  n[1] = 0;
  d[1] = v19;
  LOBYTE(v32) = 1;
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v29, &__dst, 7))
    goto LABEL_16;
  v20 = __dst;
  *(_DWORD *)((char *)__dst + 3) = 829828421;
  *v20 = 1162563656;
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v29, &__dst, a7))
    goto LABEL_16;
  if (a7)
    memcpy(__dst, a6, a7);
  v21 = strlen(a8);
  __dst = 0;
  if (!CBB_add_space((uint64_t)&v29, &__dst, v21))
    goto LABEL_16;
  if (v21)
    memcpy(__dst, a8, v21);
  __dst = 0;
  if (CBB_add_space((uint64_t)&v29, &__dst, a10))
  {
    if (a10)
      memcpy(__dst, __src, a10);
    v22 = d[1];
    if (LOBYTE(d[0]))
    {
      v23 = n[0] + LOBYTE(n[1]);
      v22 = (const unsigned __int8 *)(v23 + *(_QWORD *)d[1]);
      v24 = *((_QWORD *)d[1] + 1) - v23;
    }
    else
    {
      v24 = n[0];
    }
    LODWORD(__dst) = 0;
    if (HMAC(a1, a4, a5, v22, v24, a2, (unsigned int *)&__dst))
    {
      *a3 = __dst;
      v25 = 1;
      if (LOBYTE(d[0]))
        return v25;
    }
    else
    {
      ERR_put_error(31, 0, 28, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/hkdf/hkdf.c", 51);
      v25 = 0;
      if (LOBYTE(d[0]))
        return v25;
    }
  }
  else
  {
LABEL_16:
    v25 = 0;
    if (LOBYTE(d[0]))
      return v25;
  }
  if ((v32 & 1) != 0 && d[1])
  {
    v27 = d[1] - 8;
    v26 = *((_QWORD *)d[1] - 1);
    if (v26 != -8)
      bzero(v27, v26 + 8);
    free(v27);
  }
  return v25;
}

uint64_t bn_jacobi(BIGNUM *a1, const BIGNUM *a2, BN_CTX *ctx)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  BIGNUM *v15;
  BIGNUM *v16;
  const BIGNUM *v17;
  uint64_t top;
  uint64_t v19;
  signed int v20;
  int *p_top;
  BIGNUM *v22;
  unint64_t v23;
  int8x16_t *d;
  unint64_t v25;
  int8x8_t v26;
  int8x16_t *v27;
  int8x16_t v28;
  unint64_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int8x16_t v55;
  unsigned __int128 v56;
  int8x16_t *v57;
  unint64_t v58;
  int8x16_t v59;
  uint64_t v60;
  unint64_t *v61;
  uint64_t v62;

  if (a2->top < 1 || (*(_BYTE *)a2->d & 1) == 0)
  {
    v4 = 104;
    v5 = 73;
LABEL_6:
    ERR_put_error(3, 0, v4, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/jacobi.c", v5);
    return 4294967294;
  }
  if (a2->neg)
  {
    v4 = 109;
    v5 = 79;
    goto LABEL_6;
  }
  if (!*((_BYTE *)ctx + 40))
  {
    v10 = *((_QWORD *)ctx + 4);
    v11 = *((_QWORD *)ctx + 2);
    if (v11 == *((_QWORD *)ctx + 3))
    {
      if (v11)
        v12 = (3 * v11) >> 1;
      else
        v12 = 32;
      v13 = v12 > v11 && v12 >> 61 == 0;
      if (!v13 || (v14 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v12)) == 0)
      {
        *((_WORD *)ctx + 20) = 257;
        v15 = BN_CTX_get(ctx);
        v16 = BN_CTX_get(ctx);
        if (!v16)
          goto LABEL_83;
        goto LABEL_23;
      }
      *((_QWORD *)ctx + 1) = v14;
      *((_QWORD *)ctx + 3) = v12;
      v11 = *((_QWORD *)ctx + 2);
    }
    else
    {
      v14 = (_QWORD *)*((_QWORD *)ctx + 1);
    }
    v14[v11] = v10;
    ++*((_QWORD *)ctx + 2);
  }
  v15 = BN_CTX_get(ctx);
  v16 = BN_CTX_get(ctx);
  if (!v16)
    goto LABEL_83;
LABEL_23:
  v17 = v16;
  if (v15 == a1)
  {
    if (!a1)
      goto LABEL_83;
  }
  else
  {
    if (!bn_wexpand((uint64_t)v15, a1->top))
      goto LABEL_83;
    top = a1->top;
    if ((_DWORD)top)
    {
      memcpy(v15->d, a1->d, 8 * top);
      LODWORD(top) = a1->top;
    }
    v15->top = top;
    v15->neg = a1->neg;
  }
  if (v17 == a2)
    goto LABEL_34;
  if (!bn_wexpand((uint64_t)v17, a2->top))
  {
LABEL_83:
    v6 = 4294967294;
    goto LABEL_84;
  }
  v19 = a2->top;
  if ((_DWORD)v19)
  {
    memcpy(v17->d, a2->d, 8 * v19);
    LODWORD(v19) = a2->top;
  }
  v17->top = v19;
  v17->neg = a2->neg;
LABEL_34:
  p_top = &v15->top;
  v20 = v15->top;
  if (v20)
  {
    v6 = 1;
    v22 = (BIGNUM *)v17;
    while (1)
    {
      v17 = v15;
      v15 = v22;
      v23 = v20;
      d = (int8x16_t *)v17->d;
      if (v20 < 4)
        break;
      v25 = v20 & 0xFFFFFFFFFFFFFFFCLL;
      v27 = d + 1;
      v28 = 0uLL;
      v29 = v23 & 0xFFFFFFFFFFFFFFFCLL;
      v30 = 0uLL;
      do
      {
        v28 = vorrq_s8(v27[-1], v28);
        v30 = vorrq_s8(*v27, v30);
        v27 += 2;
        v29 -= 4;
      }
      while (v29);
      v31 = vorrq_s8(v30, v28);
      v26 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
      if (v25 != v23)
        goto LABEL_45;
LABEL_47:
      if (!*(_QWORD *)&v26)
      {
        v17 = v15;
        goto LABEL_88;
      }
      v35 = 0;
      do
      {
        while (v35 >> 6 >= v23)
          ++v35;
        v36 = ((unint64_t)d->i64[v35 >> 6] >> v35) & 1;
        ++v35;
      }
      while (!(_DWORD)v36);
      if (!bn_wexpand((uint64_t)v17, v23))
        goto LABEL_83;
      v37 = v35 - 1;
      bn_rshift_words((int8x16_t *)v17->d, (uint64_t)v17->d, v37, *p_top);
      v38 = *p_top;
      v39 = v38 & ((int)v38 >> 31);
      v40 = 8 * v38 - 8;
      v41 = *p_top;
      while (1)
      {
        v42 = __OFSUB__(v41--, 1);
        if (v41 < 0 != v42)
          break;
        v43 = *(unint64_t *)((char *)v17->d + v40);
        v40 -= 8;
        if (v43)
        {
          *p_top = v41 + 1;
          v39 = 1;
          goto LABEL_59;
        }
      }
      *p_top = v39;
      if ((v38 & 0x80000000) == 0)
        v17->neg = 0;
LABEL_59:
      if ((v37 & 1) != 0)
      {
        if (v15->top)
          v44 = *v15->d;
        else
          LOBYTE(v44) = 0;
        LODWORD(v6) = bn_jacobi_tab[v44 & 7] * v6;
      }
      if (v17->neg)
      {
        if (v39)
        {
          v45 = ~*v17->d;
          p_top = &v15->top;
          if (!v15->top)
            goto LABEL_74;
        }
        else
        {
          LOBYTE(v45) = -1;
          p_top = &v15->top;
          if (!v15->top)
            goto LABEL_74;
        }
      }
      else if (v39)
      {
        v45 = *v17->d;
        p_top = &v15->top;
        if (!v15->top)
          goto LABEL_74;
      }
      else
      {
        LOBYTE(v45) = 0;
        p_top = &v15->top;
        if (!v15->top)
        {
LABEL_74:
          LOBYTE(v46) = 0;
          goto LABEL_75;
        }
      }
      v46 = *v15->d;
LABEL_75:
      if (!BN_div(0, v15, v15, v17, ctx))
        goto LABEL_83;
      if (v15->neg)
      {
        if (!(v17->neg
             ? ((uint64_t (*)(BIGNUM *, BIGNUM *, const BIGNUM *))BN_sub)(v15, v15, v17)
             : ((uint64_t (*)(BIGNUM *, BIGNUM *, const BIGNUM *))BN_add)(v15, v15, v17)))
          goto LABEL_83;
      }
      if ((v45 & v46 & 2) != 0)
        v6 = -(int)v6;
      else
        v6 = v6;
      v17->neg = 0;
      v20 = *p_top;
      v22 = (BIGNUM *)v17;
      if (!*p_top)
        goto LABEL_88;
    }
    v25 = 0;
    v26 = 0;
LABEL_45:
    v32 = v23 - v25;
    v33 = &d->i64[v25];
    do
    {
      v34 = *v33++;
      *(_QWORD *)&v26 |= v34;
      --v32;
    }
    while (v32);
    goto LABEL_47;
  }
  v6 = 1;
LABEL_88:
  if (v17->neg)
    goto LABEL_89;
  v50 = v17->top;
  if (!(_DWORD)v50)
    goto LABEL_89;
  v51 = v17->d;
  v52 = *v17->d ^ 1;
  if ((int)v50 < 2)
    goto LABEL_99;
  if (v50 < 5)
  {
    v53 = 1;
LABEL_97:
    v60 = v50 - v53;
    v61 = &v51[v53];
    do
    {
      v62 = *v61++;
      v52 |= v62;
      --v60;
    }
    while (v60);
    goto LABEL_99;
  }
  v54 = (v50 - 1) & 0xFFFFFFFFFFFFFFFCLL;
  v53 = v54 | 1;
  v55 = 0uLL;
  v56 = *v17->d ^ (unsigned __int128)1uLL;
  v57 = (int8x16_t *)(v51 + 3);
  v58 = v54;
  do
  {
    v56 = (unsigned __int128)vorrq_s8(v57[-1], (int8x16_t)v56);
    v55 = vorrq_s8(*v57, v55);
    v57 += 2;
    v58 -= 4;
  }
  while (v58);
  v59 = vorrq_s8(v55, (int8x16_t)v56);
  v52 = (uint64_t)vorr_s8(*(int8x8_t *)v59.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
  if (v50 - 1 != v54)
    goto LABEL_97;
LABEL_99:
  if (v52)
LABEL_89:
    v6 = 0;
LABEL_84:
  if (!*((_BYTE *)ctx + 40))
  {
    v48 = *((_QWORD *)ctx + 1);
    v49 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v49;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v48 + 8 * v49);
  }
  return v6;
}

uint64_t CRYPTO_tls1_prf(EVP_MD *a1, int8x16_t *a2, size_t a3, char *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v19;
  uint64_t result;

  if (!a3)
    return 1;
  bzero(a2, a3);
  if (pthread_once(&EVP_md5_sha1_once, (void (*)(void))EVP_md5_sha1_init))
    goto LABEL_11;
  if (a1 != (EVP_MD *)&EVP_md5_sha1_storage)
    return tls1_P_hash(a2, a3, a1, a4, a5, a6, a7, a8, a9, a10, a11);
  if (pthread_once(&EVP_md5_once, (void (*)(void))EVP_md5_init))
LABEL_11:
    abort();
  v19 = a5 >> 1;
  a5 -= a5 >> 1;
  result = tls1_P_hash(a2, a3, (EVP_MD *)&EVP_md5_storage, a4, a5, a6, a7, a8, a9, a10, a11);
  if ((_DWORD)result)
  {
    if (!pthread_once(&EVP_sha1_once, (void (*)(void))EVP_sha1_init))
    {
      a4 += v19;
      a1 = (EVP_MD *)&EVP_sha1_storage;
      return tls1_P_hash(a2, a3, a1, a4, a5, a6, a7, a8, a9, a10, a11);
    }
    goto LABEL_11;
  }
  return result;
}

uint64_t tls1_P_hash(int8x16_t *a1, unint64_t a2, EVP_MD *md, void *key, int len, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t pkey_type;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  int8x16_t *v22;
  uint64_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int8x8_t *v28;
  uint64_t v29;
  int8x8_t v30;
  uint64_t v31;
  __int8 *v32;
  unsigned __int8 *v33;
  char v34;
  int v35;
  uint64_t v36;
  unsigned int v38;
  unsigned int lena;
  HMAC_CTX ctx;
  __int128 v41;
  _QWORD v42[10];
  unsigned __int8 v43[16];
  uint64_t v44;
  _OWORD mda[4];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  lena = 0;
  pkey_type = md->pkey_type;
  *(_OWORD *)&ctx.key[116] = 0u;
  v41 = 0u;
  memset(v42, 0, 72);
  memset(&ctx.key[4], 0, 104);
  memset(&ctx, 0, 104);
  HMAC_Init_ex(&ctx, key, len, md, 0);
  if (v17)
  {
    if (EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&v42[1], &ctx.i_ctx))
    {
      if (EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&v42[5], &ctx.o_ctx))
      {
        if (EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&ctx.key[124], &ctx.md_ctx))
        {
          *(_QWORD *)&ctx.key[116] = ctx.md;
          (*(void (**)(unsigned __int8 *))(*(_QWORD *)&ctx.key[124] + 24))(&ctx.key[124]);
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)&ctx.key[124] + 24))(&ctx.key[124], a8, a9);
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)&ctx.key[124] + 24))(&ctx.key[124], a10, a11);
          HMAC_Final((HMAC_CTX *)&ctx.key[116], (unsigned __int8 *)mda, &lena);
          if (v18)
          {
            v38 = 0;
            if (EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&v42[1], &ctx.i_ctx))
            {
              while (EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&v42[5], &ctx.o_ctx)
                   && EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&ctx.key[124], &ctx.md_ctx))
              {
                *(_QWORD *)&ctx.key[116] = ctx.md;
                (*(void (**)(unsigned __int8 *, _OWORD *, _QWORD))(*(_QWORD *)&ctx.key[124] + 24))(&ctx.key[124], mda, lena);
                if (a2 > pkey_type)
                {
                  if (!EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&ctx.key[44], (const EVP_MD_CTX *)&v42[1])
                    || !EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&ctx.key[76], (const EVP_MD_CTX *)&v42[5])
                    || !EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&ctx.key[12], (const EVP_MD_CTX *)&ctx.key[124]))
                  {
                    break;
                  }
                  *(_QWORD *)&ctx.key[4] = *(_QWORD *)&ctx.key[116];
                }
                (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)&ctx.key[124] + 24))(&ctx.key[124], a6, a7);
                (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)&ctx.key[124] + 24))(&ctx.key[124], a8, a9);
                (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)&ctx.key[124] + 24))(&ctx.key[124], a10, a11);
                HMAC_Final((HMAC_CTX *)&ctx.key[116], v43, &v38);
                if (!v19)
                  break;
                if (a2 >= v38)
                  v20 = v38;
                else
                  v20 = a2;
                if (v20)
                {
                  if (v20 < 8)
                  {
                    v21 = 0;
LABEL_30:
                    v31 = v20 - v21;
                    v32 = &a1->i8[v21];
                    v33 = &v43[v21];
                    do
                    {
                      v34 = *v33++;
                      *v32++ ^= v34;
                      --v31;
                    }
                    while (v31);
                    goto LABEL_32;
                  }
                  if (v20 >= 0x20)
                  {
                    v21 = v20 & 0xFFFFFFE0;
                    v22 = a1 + 1;
                    v23 = v21;
                    v24 = (int8x16_t *)&v44;
                    do
                    {
                      v25 = veorq_s8(*v22, *v24);
                      v22[-1] = veorq_s8(v22[-1], v24[-1]);
                      *v22 = v25;
                      v24 += 2;
                      v22 += 2;
                      v23 -= 32;
                    }
                    while (v23);
                    if (v20 == v21)
                      goto LABEL_32;
                    if ((v20 & 0x18) == 0)
                      goto LABEL_30;
                  }
                  else
                  {
                    v21 = 0;
                  }
                  v26 = v21;
                  v21 = v20 & 0xFFFFFFF8;
                  v27 = &v43[v26];
                  v28 = (int8x8_t *)&a1->i8[v26];
                  v29 = v26 - v21;
                  do
                  {
                    v30 = *(int8x8_t *)v27;
                    v27 += 8;
                    *v28 = veor_s8(*v28, v30);
                    ++v28;
                    v29 += 8;
                  }
                  while (v29);
                  if (v20 != v21)
                    goto LABEL_30;
                }
LABEL_32:
                a2 -= v20;
                if (!a2)
                {
                  v36 = 1;
                  goto LABEL_36;
                }
                HMAC_Final((HMAC_CTX *)&ctx.key[4], (unsigned __int8 *)mda, &lena);
                if (v35)
                {
                  a1 = (int8x16_t *)((char *)a1 + v20);
                  v38 = 0;
                  if (EVP_MD_CTX_copy_ex((EVP_MD_CTX *)&v42[1], &ctx.i_ctx))
                    continue;
                }
                break;
              }
            }
          }
        }
      }
    }
  }
  v36 = 0;
LABEL_36:
  memset(mda, 0, sizeof(mda));
  HMAC_CTX_cleanup((HMAC_CTX *)&ctx.key[116]);
  HMAC_CTX_cleanup((HMAC_CTX *)&ctx.key[4]);
  HMAC_CTX_cleanup(&ctx);
  return v36;
}

uint64_t CRYPTO_tls13_hkdf_expand_label(uint64_t a1, uint64_t a2, EVP_MD *a3, void *a4, int a5, const void *a6, size_t a7, const void *a8, size_t a9)
{
  unint64_t v9;
  const char *v10;
  int v11;
  int v12;
  _QWORD *v21;
  void *v22;
  _DWORD *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v28;
  uint64_t v29;
  size_t v30;
  _OWORD v31[3];
  __int128 v32;
  void *v33[2];
  __int128 v34;
  _BYTE *v35;

  memset(v31, 0, sizeof(v31));
  v9 = a7 + a9 + 10;
  v32 = 0u;
  *(_OWORD *)v33 = 0u;
  v34 = 0u;
  if (v9 >= 0xFFFFFFFFFFFFFFF8)
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v11 = 65;
    v12 = 247;
LABEL_3:
    ERR_put_error(14, 0, v11, v10, v12);
    goto LABEL_21;
  }
  v21 = malloc_type_malloc(a7 + a9 + 18, 0x30772F57uLL);
  if (v21)
  {
    *v21 = v9;
    v22 = v21 + 1;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    if (v9)
      goto LABEL_21;
    v22 = 0;
  }
  BYTE8(v32) = 0;
  *(_QWORD *)&v32 = 0;
  v33[0] = v22;
  v33[1] = 0;
  *(_QWORD *)&v34 = v9;
  BYTE8(v34) = 1;
  v35 = 0;
  if (!CBB_add_space((uint64_t)&v32, &v35, 2))
    goto LABEL_21;
  v35[1] = a2;
  *v35 = BYTE1(a2);
  if (!CBB_flush((uint64_t *)&v32))
    goto LABEL_21;
  if (!cbb_add_child((uint64_t)&v32, (uint64_t)v31, 1u, 0))
    goto LABEL_21;
  v35 = 0;
  if (!CBB_add_space((uint64_t)v31, &v35, 6))
    goto LABEL_21;
  v23 = v35;
  *((_WORD *)v35 + 2) = 8243;
  *v23 = 829647988;
  v35 = 0;
  if (!CBB_add_space((uint64_t)v31, &v35, a7))
    goto LABEL_21;
  if (a7)
    memcpy(v35, a6, a7);
  if (!CBB_flush((uint64_t *)&v32))
    goto LABEL_21;
  if (!cbb_add_child((uint64_t)&v32, (uint64_t)v31, 1u, 0))
    goto LABEL_21;
  v35 = 0;
  if (!CBB_add_space((uint64_t)v31, &v35, a9))
    goto LABEL_21;
  if (a9)
    memcpy(v35, a8, a9);
  if (BYTE8(v32))
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/bytestring/cbb.c";
    v11 = 66;
    v12 = 127;
    goto LABEL_3;
  }
  if (CBB_flush((uint64_t *)&v32))
  {
    v28 = v33[0];
    v33[0] = 0;
    v26 = HKDF_expand(a1, a2, a3, a4, a5, (uint64_t)v28, (uint64_t)v33[1]);
    if (!v28)
      return v26;
    v29 = *(v28 - 1);
    v25 = (char *)(v28 - 1);
    v30 = v29 + 8;
    if (v29 != -8)
      bzero(v25, v30);
    goto LABEL_27;
  }
LABEL_21:
  if (BYTE8(v32) || (BYTE8(v34) & 1) == 0 || !v33[0])
    return 0;
  v25 = (char *)v33[0] - 8;
  v24 = *((_QWORD *)v33[0] - 1);
  if (v24 != -8)
    bzero(v25, v24 + 8);
  v26 = 0;
LABEL_27:
  free(v25);
  return v26;
}

uint64_t BORINGSSL_keccak_absorb(uint64_t result, char *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  int8x16_t *v26;
  uint64_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t *v30;
  int8x16_t *v31;
  unint64_t v32;
  int8x16_t v33;
  unint64_t v34;
  int8x8_t *v35;
  int8x8_t *v36;
  unint64_t v37;
  int8x8_t v38;

  if (*(_DWORD *)(result + 4) == 1)
    abort();
  v3 = a3;
  v4 = (unint64_t)a2;
  v5 = result;
  v6 = (uint64_t *)(result + 8);
  v8 = *(_QWORD *)(result + 208);
  v7 = *(_QWORD *)(result + 216);
  if (!v7)
  {
    if (a3 < v8)
      goto LABEL_16;
    goto LABEL_14;
  }
  v9 = v8 - v7;
  if (v8 - v7 >= a3)
    v10 = a3;
  else
    v10 = v8 - v7;
  if (v10)
  {
    v11 = a2;
    v12 = result + 8;
    do
    {
      v13 = *v11++;
      *(_BYTE *)(v12 + *(_QWORD *)(result + 216)) ^= v13;
      ++v12;
      --v10;
    }
    while (v10);
  }
  v14 = a3 - v9;
  if (a3 < v9)
  {
    v3 = *(_QWORD *)(result + 216) + a3;
    goto LABEL_51;
  }
  result = keccak_f((uint64_t *)(result + 8));
  v4 += v9;
  v3 -= v9;
  if (v14 >= *(_QWORD *)(v5 + 208))
  {
LABEL_14:
    if (v8 <= 7)
    {
      do
      {
        result = keccak_f(v6);
        v15 = *(_QWORD *)(v5 + 208);
        v4 += v15;
        v3 -= v15;
      }
      while (v3 >= v15);
      goto LABEL_16;
    }
    if (v8 >> 3 <= 1)
      v18 = 1;
    else
      v18 = v8 >> 3;
    do
    {
      if (v18 >= 4 && ((unint64_t)v6 >= v4 + 8 * v18 || v4 >= v5 + 8 + 8 * v18))
      {
        v26 = (int8x16_t *)(v4 + 16);
        v27 = v18 & 0x1FFFFFFFFFFFFFFCLL;
        v28 = (int8x16_t *)(v5 + 24);
        do
        {
          v29 = veorq_s8(*v28, *v26);
          v28[-1] = veorq_s8(v28[-1], v26[-1]);
          *v28 = v29;
          v26 += 2;
          v28 += 2;
          v27 -= 4;
        }
        while (v27);
        v20 = v18 & 0x1FFFFFFFFFFFFFFCLL;
        if (v18 == (v18 & 0x1FFFFFFFFFFFFFFCLL))
          goto LABEL_29;
      }
      else
      {
        v20 = 0;
      }
      v21 = v18 - v20;
      v22 = 8 * v20;
      v23 = (_QWORD *)(v5 + 8 + 8 * v20);
      v24 = (uint64_t *)(v4 + v22);
      do
      {
        v25 = *v24++;
        *v23++ ^= v25;
        --v21;
      }
      while (v21);
LABEL_29:
      result = keccak_f(v6);
      v19 = *(_QWORD *)(v5 + 208);
      v4 += v19;
      v3 -= v19;
    }
    while (v3 >= v19);
  }
LABEL_16:
  if (!v3)
    goto LABEL_51;
  if (v3 < 8 || ((unint64_t)v6 < v4 + v3 ? (v16 = v4 >= v3 + v5 + 8) : (v16 = 1), !v16))
  {
    v17 = 0;
    goto LABEL_49;
  }
  if (v3 < 0x20)
  {
    v17 = 0;
    goto LABEL_45;
  }
  v17 = v3 & 0xFFFFFFFFFFFFFFE0;
  v30 = (int8x16_t *)(v4 + 16);
  v31 = (int8x16_t *)(v5 + 24);
  v32 = v3 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = veorq_s8(*v31, *v30);
    v31[-1] = veorq_s8(v31[-1], v30[-1]);
    *v31 = v33;
    v30 += 2;
    v31 += 2;
    v32 -= 32;
  }
  while (v32);
  if (v3 == v17)
    goto LABEL_51;
  if ((v3 & 0x18) != 0)
  {
LABEL_45:
    v34 = v17;
    v17 = v3 & 0xFFFFFFFFFFFFFFF8;
    v35 = (int8x8_t *)(v4 + v34);
    v36 = (int8x8_t *)(v34 + v5 + 8);
    v37 = v34 - (v3 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v38 = *v35++;
      *v36 = veor_s8(*v36, v38);
      ++v36;
      v37 += 8;
    }
    while (v37);
    goto LABEL_50;
  }
  do
  {
LABEL_49:
    *((_BYTE *)v6 + v17) ^= *(_BYTE *)(v4 + v17);
    ++v17;
LABEL_50:
    ;
  }
  while (v3 != v17);
LABEL_51:
  *(_QWORD *)(v5 + 216) = v3;
  return result;
}

_DWORD *BORINGSSL_keccak_squeeze(_DWORD *result, char *__dst, size_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  size_t v11;

  v5 = result;
  if (!result[1])
  {
    v6 = *result;
    if (*result >= 4u)
      abort();
    v7 = (uint64_t *)(result + 2);
    *((_BYTE *)v7 + *((_QWORD *)v5 + 27)) = *((_BYTE *)v5 + *((_QWORD *)v5 + 27) + 8) ^ (0x1F1F0606u >> (8 * v6));
    *((_BYTE *)v5 + *((_QWORD *)v5 + 26) + 7) ^= 0x80u;
    result = (_DWORD *)keccak_f(v7);
    v5[1] = 1;
  }
  if (a3)
  {
    v8 = *((_QWORD *)v5 + 28);
    do
    {
      v9 = *((_QWORD *)v5 + 26);
      if (v8 == v9)
      {
        result = (_DWORD *)keccak_f((uint64_t *)v5 + 1);
        v8 = 0;
        *((_QWORD *)v5 + 28) = 0;
        v9 = *((_QWORD *)v5 + 26);
      }
      v10 = v9 - v8;
      if (a3 >= v10)
        v11 = v10;
      else
        v11 = a3;
      if (v11)
      {
        result = memcpy(__dst, (char *)v5 + v8 + 8, v11);
        v8 = *((_QWORD *)v5 + 28);
      }
      __dst += v11;
      v8 += v11;
      *((_QWORD *)v5 + 28) = v8;
      a3 -= v11;
    }
    while (a3);
  }
  return result;
}

uint64_t keccak_f(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v1 = 0;
  v3 = a1[10];
  v2 = a1[11];
  v4 = a1[20];
  v5 = a1[21];
  v7 = a1[16];
  v6 = a1[17];
  v8 = a1[12];
  v89 = a1[13];
  v10 = a1[22];
  v9 = a1[23];
  v11 = a1[14];
  v12 = a1[15];
  v14 = a1[18];
  v13 = a1[19];
  v15 = a1[24];
  v16 = a1[7];
  v17 = a1[8];
  v18 = a1[9];
  v19 = a1[4];
  v20 = a1[5];
  v22 = *a1;
  v21 = a1[1];
  v23 = a1[3];
  v90 = a1[2];
  result = a1[6];
  do
  {
    v82 = v22;
    v84 = v10;
    v85 = v4;
    v86 = result;
    v88 = v1;
    v25 = v4 ^ v20 ^ v12 ^ v3 ^ v22;
    v26 = result ^ v21 ^ v5 ^ v7 ^ v2;
    v27 = v16 ^ v90 ^ v10 ^ v6 ^ v8;
    v28 = v23 ^ v17 ^ v9 ^ v14 ^ v89;
    v29 = v11;
    v83 = v18;
    v30 = v13 ^ v15 ^ v11 ^ v19 ^ v18;
    v31 = v30 ^ __ROR8__(v26, 63);
    v32 = v27 ^ __ROR8__(v30, 63);
    v33 = v25 ^ __ROR8__(v27, 63);
    v34 = v26 ^ __ROR8__(v28, 63);
    v35 = v28 ^ __ROR8__(v25, 63);
    v36 = v31 ^ v20;
    v37 = v33 ^ v21;
    v38 = v33 ^ v7;
    v39 = v13;
    v40 = v32 ^ v17;
    v41 = v32 ^ v14;
    v42 = __ROR8__(v37, 63);
    v43 = __ROR8__(v31 ^ v3, 61);
    v44 = __ROR8__(v34 ^ v16, 58);
    v45 = v12;
    v46 = __ROR8__(v33 ^ v2, 54);
    v47 = __ROR8__(v34 ^ v6, 49);
    v48 = __ROR8__(v41, 43);
    v49 = v8;
    v50 = __ROR8__(v32 ^ v23, 36);
    v51 = __ROR8__(v36, 28);
    v52 = __ROR8__(v38, 19);
    v53 = __ROR8__(v40, 9);
    v54 = __ROR8__(v33 ^ v5, 62);
    v55 = __ROR8__(v35 ^ v15, 50);
    v56 = __ROR8__(v35 ^ v19, 37);
    v57 = __ROR8__(v31 ^ v45, 23);
    v58 = __ROR8__(v32 ^ v9, 8);
    v59 = __ROR8__(v35 ^ v39, 56);
    v60 = __ROR8__(v32 ^ v89, 39);
    v61 = __ROR8__(v34 ^ v49, 21);
    v62 = __ROR8__(v34 ^ v90, 2);
    v63 = __ROR8__(v31 ^ v85, 46);
    v64 = __ROR8__(v35 ^ v29, 25);
    v65 = __ROR8__(v34 ^ v84, 3);
    v66 = __ROR8__(v35 ^ v83, 44);
    v67 = __ROR8__(v33 ^ v86, 20);
    v68 = v31 ^ v82;
    v87 = v61 & ~v67;
    v69 = v67 ^ v48 & ~v61;
    v90 = v55 & ~v48 ^ v61;
    v70 = v68 & ~v55 ^ v48;
    v71 = v52 & ~v43;
    v72 = v52 ^ v50 & ~v65;
    v73 = v65 & ~v52 ^ v43;
    v20 = v43 & ~v66 ^ v50;
    result = v71 ^ v66;
    v18 = v66 & ~v50 ^ v65;
    v74 = v59 & ~v60;
    v89 = v42 & ~v63 ^ v59;
    v8 = v63 & ~v59 ^ v60;
    v3 = v42 ^ v60 & ~v44;
    v2 = v74 ^ v44;
    v11 = v44 & ~v42 ^ v63;
    v75 = v47 & ~v46;
    v14 = v56 & ~v58 ^ v47;
    v6 = v46 ^ v58 & ~v47;
    v12 = v46 & ~v51 ^ v56;
    v7 = v75 ^ v51;
    v76 = v51 & ~v56;
    v17 = v72;
    v13 = v76 ^ v58;
    v77 = v57 & ~v64;
    v9 = v62 & ~v54 ^ v57;
    v78 = v54 & ~v57;
    v19 = v55 ^ v67 & ~v68;
    v10 = v78 ^ v64;
    v79 = v64 & ~v53;
    v23 = v70;
    v4 = v79 ^ v62;
    v5 = v77 ^ v53;
    v80 = v53 & ~v62;
    v16 = v73;
    v21 = v69;
    v15 = v54 ^ v80;
    v22 = *(_QWORD *)((char *)&keccak_f_kRoundConstants + v88) ^ v68 ^ v87;
    v1 = v88 + 8;
  }
  while (v88 != 184);
  *a1 = v22;
  a1[1] = v69;
  a1[24] = v15;
  a1[18] = v14;
  a1[19] = v13;
  a1[2] = v90;
  a1[3] = v23;
  a1[4] = v19;
  a1[5] = v20;
  a1[6] = result;
  a1[7] = v16;
  a1[8] = v17;
  a1[9] = v18;
  a1[10] = v3;
  a1[11] = v2;
  a1[12] = v8;
  a1[13] = v89;
  a1[14] = v11;
  a1[15] = v12;
  a1[16] = v7;
  a1[17] = v6;
  a1[20] = v4;
  a1[21] = v5;
  a1[22] = v10;
  a1[23] = v9;
  return result;
}

__n128 KYBER_generate_key_external_entropy(char *a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint32x4_t v10;
  int32x4_t v11;
  int16x8_t v12;
  uint64_t v13;
  __int128 *v14;
  const __int16 *v15;
  const __int16 *v16;
  uint32x4_t v17;
  uint32x4_t v18;
  int8x16_t v19;
  int16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  int8x16_t v26;
  int16x8_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  __int16 *v32;
  uint64_t v33;
  uint64_t i;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int16x8_t v38;
  uint64_t v39;
  __int128 *v40;
  const __int16 *v41;
  const __int16 *v42;
  uint32x4_t v43;
  uint32x4_t v44;
  int8x16_t v45;
  int16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  int8x16_t v52;
  int16x8_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  int8x16_t v56;
  int8x16_t v57;
  __int16 *v58;
  uint64_t v59;
  uint64_t j;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint64_t v65;
  __int128 *v66;
  const __int16 *v67;
  const __int16 *v68;
  uint32x4_t v69;
  uint32x4_t v70;
  int8x16_t v71;
  int16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  int8x16_t v78;
  int16x8_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  int8x16_t v82;
  int8x16_t v83;
  __int16 *v84;
  uint64_t v85;
  uint64_t k;
  int8x16_t v87;
  int8x16_t v88;
  int16x8_t v89;
  int16x8_t v90;
  uint64_t v91;
  int16x8_t v92;
  int8x16_t *v93;
  int8x16_t v94;
  int8x16_t v95;
  int16x8_t v96;
  int16x8_t v97;
  uint64_t v98;
  int16x8_t v99;
  int8x16_t *v100;
  int8x16_t v101;
  int8x16_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int8x16_t *v106;
  int8x16_t v107;
  int8x16_t v108;
  int16x8_t v109;
  int16x8_t v110;
  uint64_t v111;
  __int128 v112;
  __n128 result;
  _OWORD v114[2];
  __int128 v115;
  _BYTE v116[1551];
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  _BYTE *v150;
  _OWORD __dst[2];
  _OWORD v152[2];
  uint64_t v153;
  int16x8x2_t v154;
  int16x8x2_t v155;
  int16x8x2_t v156;
  int16x8x2_t v157;
  int16x8x2_t v158;
  int16x8x2_t v159;

  v153 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)&v116[216] = 0u;
  memset(&v116[8], 0, 200);
  *(_QWORD *)v116 = 1;
  *(_QWORD *)&v116[208] = 72;
  BORINGSSL_keccak_absorb((uint64_t)v116, (char *)a3, 0x20uLL);
  BORINGSSL_keccak_squeeze(v116, (char *)__dst, 0x40uLL);
  v6 = __dst[1];
  *(_OWORD *)(a2 + 1536) = __dst[0];
  *(_OWORD *)(a2 + 1552) = v6;
  matrix_expand(a2 + 1600, __dst);
  v117 = 0;
  vector_generate_secret_eta_2((__int16 *)(a2 + 6208), &v117, v152);
  vector_ntt((int16x8_t *)(a2 + 6208));
  memset(v116, 0, 512);
  vector_generate_secret_eta_2((__int16 *)v116, &v117, v152);
  vector_ntt((int16x8_t *)v116);
  bzero((void *)a2, 0x600uLL);
  v7 = 0;
  v8 = 0;
  v9 = 1600;
  v10 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v11.i64[0] = 0xF2000000F2;
  v11.i64[1] = 0xF2000000F2;
  v12.i64[0] = 0xD000D000D000D00;
  v12.i64[1] = 0xD000D000D000D00;
  do
  {
    v13 = 0;
    v149 = 0uLL;
    v148 = 0uLL;
    v147 = 0uLL;
    v146 = 0uLL;
    v145 = 0uLL;
    v144 = 0uLL;
    v143 = 0uLL;
    v142 = 0uLL;
    v141 = 0uLL;
    v140 = 0uLL;
    v139 = 0uLL;
    v138 = 0uLL;
    v137 = 0uLL;
    v136 = 0uLL;
    v135 = 0uLL;
    v134 = 0uLL;
    v133 = 0uLL;
    v132 = 0uLL;
    v131 = 0uLL;
    v130 = 0uLL;
    v129 = 0uLL;
    v128 = 0uLL;
    v127 = 0uLL;
    v126 = 0uLL;
    v125 = 0uLL;
    v124 = 0uLL;
    v123 = 0uLL;
    v122 = 0uLL;
    v121 = 0uLL;
    v120 = 0uLL;
    v14 = &kModRoots;
    v119 = 0uLL;
    v118 = 0uLL;
    do
    {
      v15 = (const __int16 *)(a2 + v9 + v13);
      v154 = vld2q_s16(v15);
      v16 = (const __int16 *)(a2 + v13 + 6208);
      v157 = vld2q_s16(v16);
      v17 = vmull_u16(*(uint16x4_t *)v157.val[1].i8, *(uint16x4_t *)v154.val[1].i8);
      v18 = vmull_high_u16((uint16x8_t)v157.val[1], (uint16x8_t)v154.val[1]);
      v19 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v17.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v17, v10), 0x18uLL), v11), *(uint16x4_t *)v157.val[1].i8, *(uint16x4_t *)v154.val[1].i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v18.i8,
                                                                     *(uint32x2_t *)v10.i8),
                                                        0x18uLL),
                                                      (int64x2_t)vmull_high_u32(v18, v10),
                                                      0x18uLL),
                                                    v11),
                                      (uint16x8_t)v157.val[1],
                                      (uint16x8_t)v154.val[1]));
      v20 = vaddq_s16((int16x8_t)v19, v12);
      v21 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v20), v19), (int8x16_t)vmaxq_s16(v20, (int16x8_t)0));
      v22 = (uint16x8_t)*v14++;
      v23 = vmull_high_u16(v21, v22);
      v24 = vmlal_u16(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v22.i8), *(uint16x4_t *)v157.val[0].i8, *(uint16x4_t *)v154.val[0].i8);
      v25 = vmlal_high_u16(v23, (uint16x8_t)v157.val[0], (uint16x8_t)v154.val[0]);
      v26 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v24, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v24.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v24, v10), 0x18uLL), v11), (int16x8_t)vmlaq_s32((int32x4_t)v25, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v25.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v25, v10), 0x18uLL), v11));
      v27 = vaddq_s16((int16x8_t)v26, v12);
      v28 = vmlal_u16(vmull_u16(*(uint16x4_t *)v157.val[1].i8, *(uint16x4_t *)v154.val[0].i8), *(uint16x4_t *)v154.val[1].i8, *(uint16x4_t *)v157.val[0].i8);
      v29 = vmlal_high_u16(vmull_high_u16((uint16x8_t)v157.val[1], (uint16x8_t)v154.val[0]), (uint16x8_t)v154.val[1], (uint16x8_t)v157.val[0]);
      v30 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v28, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v28.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v28, v10), 0x18uLL), v11), (int16x8_t)vmlaq_s32((int32x4_t)v29, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v29.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v29, v10), 0x18uLL), v11));
      v31 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v27), v26), (int8x16_t)vmaxq_s16(v27, (int16x8_t)0));
      v154.val[1] = vaddq_s16((int16x8_t)v30, v12);
      v154.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v154.val[1]), v30), (int8x16_t)vmaxq_s16(v154.val[1], (int16x8_t)0));
      v32 = (__int16 *)((char *)&v118 + v13);
      vst2q_s16(v32, v154);
      v13 += 32;
    }
    while (v13 != 512);
    v33 = a2 + v7;
    for (i = 16; i != 528; i += 32)
    {
      v35 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v116[i + 1536], *(int16x8_t *)(v33 + i - 16));
      v36 = (int8x16_t)vaddq_s16(*(int16x8_t *)((char *)&v118 + i), *(int16x8_t *)(v33 + i));
      v37 = vaddq_s16((int16x8_t)v35, v12);
      v38 = vaddq_s16((int16x8_t)v36, v12);
      *(int8x16_t *)(v33 + i - 16) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v37), v35), (int8x16_t)vmaxq_s16(v37, (int16x8_t)0));
      *(int8x16_t *)(v33 + i) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v38), v36), (int8x16_t)vmaxq_s16(v38, (int16x8_t)0));
    }
    v39 = 0;
    v149 = 0uLL;
    v148 = 0uLL;
    v147 = 0uLL;
    v146 = 0uLL;
    v145 = 0uLL;
    v144 = 0uLL;
    v143 = 0uLL;
    v142 = 0uLL;
    v141 = 0uLL;
    v140 = 0uLL;
    v139 = 0uLL;
    v138 = 0uLL;
    v137 = 0uLL;
    v136 = 0uLL;
    v135 = 0uLL;
    v134 = 0uLL;
    v133 = 0uLL;
    v132 = 0uLL;
    v131 = 0uLL;
    v130 = 0uLL;
    v129 = 0uLL;
    v128 = 0uLL;
    v127 = 0uLL;
    v126 = 0uLL;
    v125 = 0uLL;
    v124 = 0uLL;
    v123 = 0uLL;
    v122 = 0uLL;
    v121 = 0uLL;
    v120 = 0uLL;
    v40 = &kModRoots;
    v119 = 0uLL;
    v118 = 0uLL;
    do
    {
      v41 = (const __int16 *)(a2 + v7 + v39 + 3136);
      v155 = vld2q_s16(v41);
      v42 = (const __int16 *)(a2 + v39 + 6720);
      v158 = vld2q_s16(v42);
      v43 = vmull_u16(*(uint16x4_t *)v158.val[1].i8, *(uint16x4_t *)v155.val[1].i8);
      v44 = vmull_high_u16((uint16x8_t)v158.val[1], (uint16x8_t)v155.val[1]);
      v45 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v43.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v43, v10), 0x18uLL), v11), *(uint16x4_t *)v158.val[1].i8, *(uint16x4_t *)v155.val[1].i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v44.i8,
                                                                     *(uint32x2_t *)v10.i8),
                                                        0x18uLL),
                                                      (int64x2_t)vmull_high_u32(v44, v10),
                                                      0x18uLL),
                                                    v11),
                                      (uint16x8_t)v158.val[1],
                                      (uint16x8_t)v155.val[1]));
      v46 = vaddq_s16((int16x8_t)v45, v12);
      v47 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v46), v45), (int8x16_t)vmaxq_s16(v46, (int16x8_t)0));
      v48 = (uint16x8_t)*v40++;
      v49 = vmull_high_u16(v47, v48);
      v50 = vmlal_u16(vmull_u16(*(uint16x4_t *)v47.i8, *(uint16x4_t *)v48.i8), *(uint16x4_t *)v158.val[0].i8, *(uint16x4_t *)v155.val[0].i8);
      v51 = vmlal_high_u16(v49, (uint16x8_t)v158.val[0], (uint16x8_t)v155.val[0]);
      v52 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v50, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v50.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v50, v10), 0x18uLL), v11), (int16x8_t)vmlaq_s32((int32x4_t)v51, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v51.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v51, v10), 0x18uLL), v11));
      v53 = vaddq_s16((int16x8_t)v52, v12);
      v54 = vmlal_u16(vmull_u16(*(uint16x4_t *)v158.val[1].i8, *(uint16x4_t *)v155.val[0].i8), *(uint16x4_t *)v155.val[1].i8, *(uint16x4_t *)v158.val[0].i8);
      v55 = vmlal_high_u16(vmull_high_u16((uint16x8_t)v158.val[1], (uint16x8_t)v155.val[0]), (uint16x8_t)v155.val[1], (uint16x8_t)v158.val[0]);
      v56 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v54, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v54.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v54, v10), 0x18uLL), v11), (int16x8_t)vmlaq_s32((int32x4_t)v55, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v55.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v55, v10), 0x18uLL), v11));
      v57 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v53), v52), (int8x16_t)vmaxq_s16(v53, (int16x8_t)0));
      v155.val[1] = vaddq_s16((int16x8_t)v56, v12);
      v155.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v155.val[1]), v56), (int8x16_t)vmaxq_s16(v155.val[1], (int16x8_t)0));
      v58 = (__int16 *)((char *)&v118 + v39);
      vst2q_s16(v58, v155);
      v39 += 32;
    }
    while (v39 != 512);
    v59 = a2 + v7;
    for (j = 16; j != 528; j += 32)
    {
      v61 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v116[j + 1536], *(int16x8_t *)(v59 + j - 16));
      v62 = (int8x16_t)vaddq_s16(*(int16x8_t *)((char *)&v118 + j), *(int16x8_t *)(v59 + j));
      v63 = vaddq_s16((int16x8_t)v61, v12);
      v64 = vaddq_s16((int16x8_t)v62, v12);
      *(int8x16_t *)(v59 + j - 16) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v63), v61), (int8x16_t)vmaxq_s16(v63, (int16x8_t)0));
      *(int8x16_t *)(v59 + j) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v64), v62), (int8x16_t)vmaxq_s16(v64, (int16x8_t)0));
    }
    v65 = 0;
    v149 = 0uLL;
    v148 = 0uLL;
    v147 = 0uLL;
    v146 = 0uLL;
    v145 = 0uLL;
    v144 = 0uLL;
    v143 = 0uLL;
    v142 = 0uLL;
    v141 = 0uLL;
    v140 = 0uLL;
    v139 = 0uLL;
    v138 = 0uLL;
    v137 = 0uLL;
    v136 = 0uLL;
    v135 = 0uLL;
    v134 = 0uLL;
    v133 = 0uLL;
    v132 = 0uLL;
    v131 = 0uLL;
    v130 = 0uLL;
    v129 = 0uLL;
    v128 = 0uLL;
    v127 = 0uLL;
    v126 = 0uLL;
    v125 = 0uLL;
    v124 = 0uLL;
    v123 = 0uLL;
    v122 = 0uLL;
    v121 = 0uLL;
    v120 = 0uLL;
    v66 = &kModRoots;
    v119 = 0uLL;
    v118 = 0uLL;
    do
    {
      v67 = (const __int16 *)(a2 + v7 + v65 + 4672);
      v156 = vld2q_s16(v67);
      v68 = (const __int16 *)(a2 + v65 + 7232);
      v159 = vld2q_s16(v68);
      v69 = vmull_u16(*(uint16x4_t *)v159.val[1].i8, *(uint16x4_t *)v156.val[1].i8);
      v70 = vmull_high_u16((uint16x8_t)v159.val[1], (uint16x8_t)v156.val[1]);
      v71 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v69.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v69, v10), 0x18uLL), v11), *(uint16x4_t *)v159.val[1].i8, *(uint16x4_t *)v156.val[1].i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v70.i8,
                                                                     *(uint32x2_t *)v10.i8),
                                                        0x18uLL),
                                                      (int64x2_t)vmull_high_u32(v70, v10),
                                                      0x18uLL),
                                                    v11),
                                      (uint16x8_t)v159.val[1],
                                      (uint16x8_t)v156.val[1]));
      v72 = vaddq_s16((int16x8_t)v71, v12);
      v73 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v72), v71), (int8x16_t)vmaxq_s16(v72, (int16x8_t)0));
      v74 = (uint16x8_t)*v66++;
      v75 = vmull_high_u16(v73, v74);
      v76 = vmlal_u16(vmull_u16(*(uint16x4_t *)v73.i8, *(uint16x4_t *)v74.i8), *(uint16x4_t *)v159.val[0].i8, *(uint16x4_t *)v156.val[0].i8);
      v77 = vmlal_high_u16(v75, (uint16x8_t)v159.val[0], (uint16x8_t)v156.val[0]);
      v78 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v76, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v76.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v76, v10), 0x18uLL), v11), (int16x8_t)vmlaq_s32((int32x4_t)v77, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v77.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v77, v10), 0x18uLL), v11));
      v79 = vaddq_s16((int16x8_t)v78, v12);
      v80 = vmlal_u16(vmull_u16(*(uint16x4_t *)v159.val[1].i8, *(uint16x4_t *)v156.val[0].i8), *(uint16x4_t *)v156.val[1].i8, *(uint16x4_t *)v159.val[0].i8);
      v81 = vmlal_high_u16(vmull_high_u16((uint16x8_t)v159.val[1], (uint16x8_t)v156.val[0]), (uint16x8_t)v156.val[1], (uint16x8_t)v159.val[0]);
      v82 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v80, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v80.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v80, v10), 0x18uLL), v11), (int16x8_t)vmlaq_s32((int32x4_t)v81, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v81.i8, *(uint32x2_t *)v10.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v81, v10), 0x18uLL), v11));
      v83 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v79), v78), (int8x16_t)vmaxq_s16(v79, (int16x8_t)0));
      v156.val[1] = vaddq_s16((int16x8_t)v82, v12);
      v156.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v156.val[1]), v82), (int8x16_t)vmaxq_s16(v156.val[1], (int16x8_t)0));
      v84 = (__int16 *)((char *)&v118 + v65);
      vst2q_s16(v84, v156);
      v65 += 32;
    }
    while (v65 != 512);
    v85 = a2 + v7;
    for (k = 16; k != 528; k += 32)
    {
      v87 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v116[k + 1536], *(int16x8_t *)(v85 + k - 16));
      v88 = (int8x16_t)vaddq_s16(*(int16x8_t *)((char *)&v118 + k), *(int16x8_t *)(v85 + k));
      v89 = vaddq_s16((int16x8_t)v87, v12);
      v90 = vaddq_s16((int16x8_t)v88, v12);
      *(int8x16_t *)(v85 + k - 16) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v89), v87), (int8x16_t)vmaxq_s16(v89, (int16x8_t)0));
      *(int8x16_t *)(v85 + k) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v90), v88), (int8x16_t)vmaxq_s16(v90, (int16x8_t)0));
    }
    ++v8;
    v9 += 512;
    v7 += 512;
  }
  while (v8 != 3);
  v91 = 0;
  v92.i64[0] = 0xD000D000D000D00;
  v92.i64[1] = 0xD000D000D000D00;
  do
  {
    v93 = (int8x16_t *)(a2 + v91);
    v94 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v116[v91], *(int16x8_t *)(a2 + v91));
    v95 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v116[v91 + 16], *(int16x8_t *)(a2 + v91 + 16));
    v96 = vaddq_s16((int16x8_t)v94, v92);
    v97 = vaddq_s16((int16x8_t)v95, v92);
    *v93 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v96), v94), (int8x16_t)vmaxq_s16(v96, (int16x8_t)0));
    v93[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v97), v95), (int8x16_t)vmaxq_s16(v97, (int16x8_t)0));
    v91 += 32;
  }
  while (v91 != 512);
  v98 = 528;
  v99.i64[0] = 0xD000D000D000D00;
  v99.i64[1] = 0xD000D000D000D00;
  do
  {
    v100 = (int8x16_t *)(a2 + v98);
    v101 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v116[v98 - 16], *(int16x8_t *)(a2 + v98 - 16));
    v102 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v116[v98], *(int16x8_t *)(a2 + v98));
    v103 = vaddq_s16((int16x8_t)v101, v99);
    v104 = vaddq_s16((int16x8_t)v102, v99);
    v100[-1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v103), v101), (int8x16_t)vmaxq_s16(v103, (int16x8_t)0));
    *v100 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v104), v102), (int8x16_t)vmaxq_s16(v104, (int16x8_t)0));
    v98 += 32;
  }
  while (v98 != 1040);
  v105.i64[0] = 0xD000D000D000D00;
  v105.i64[1] = 0xD000D000D000D00;
  do
  {
    v106 = (int8x16_t *)(a2 + v98);
    v107 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v116[v98 - 16], *(int16x8_t *)(a2 + v98 - 16));
    v108 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v116[v98], *(int16x8_t *)(a2 + v98));
    v109 = vaddq_s16((int16x8_t)v107, v105);
    v110 = vaddq_s16((int16x8_t)v108, v105);
    v106[-1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v109), v107), (int8x16_t)vmaxq_s16(v109, (int16x8_t)0));
    *v106 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v110), v108), (int8x16_t)vmaxq_s16(v110, (int16x8_t)0));
    v98 += 32;
  }
  while (v98 != 1552);
  v114[0] = 0u;
  v114[1] = (unint64_t)a1;
  v115 = 0x4A0uLL;
  v150 = 0;
  if (!CBB_add_space((uint64_t)v114, &v150, 1152)
    || (vector_encode(v150, a2, 12), *(_QWORD *)&v118 = 0, !CBB_add_space((uint64_t)v114, &v118, 32)))
  {
    abort();
  }
  v111 = v118;
  v112 = *(_OWORD *)(a2 + 1552);
  *(_OWORD *)v118 = *(_OWORD *)(a2 + 1536);
  *(_OWORD *)(v111 + 16) = v112;
  v130 = 0u;
  v129 = 0u;
  v128 = 0u;
  v127 = 0u;
  v126 = 0u;
  v125 = 0u;
  v124 = 0u;
  v123 = 0u;
  v122 = 0u;
  v121 = 0u;
  v120 = 0u;
  v119 = 0u;
  v118 = 0u;
  *(_QWORD *)&v132 = 0;
  v131 = 0x88uLL;
  BORINGSSL_keccak_absorb((uint64_t)&v118, a1, 0x4A0uLL);
  BORINGSSL_keccak_squeeze(&v118, (char *)(a2 + 1568), 0x20uLL);
  result = *(__n128 *)(a3 + 32);
  *(_OWORD *)(a2 + 7760) = *(_OWORD *)(a3 + 48);
  *(__n128 *)(a2 + 7744) = result;
  return result;
}

uint64_t matrix_expand(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  __int128 v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  uint64_t result;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  size_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;
  unsigned int v40;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  _OWORD v59[2];
  char v60;
  char v61;
  _BYTE __dst[168];
  uint64_t v63;

  v2 = 0;
  v63 = *MEMORY[0x24BDAC8D0];
  v3 = a2[1];
  v59[0] = *a2;
  v59[1] = v3;
  do
  {
    v60 = v2;
    v61 = 0;
    v56 = 0;
    v58 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 2;
    v57 = 168;
    BORINGSSL_keccak_absorb((uint64_t)&v43, (char *)v59, 0x22uLL);
    v4 = 0;
    v42 = v2;
    v5 = a1 + 1536 * v2;
    do
    {
      if (!HIDWORD(v43))
      {
        if (v43 >= 4)
LABEL_73:
          abort();
        *((_BYTE *)&v44 + v58) ^= 0x1F1F0606u >> (8 * v43);
        *((_BYTE *)&v44 + v57 - 1) ^= 0x80u;
        keccak_f((uint64_t *)&v44);
        HIDWORD(v43) = 1;
      }
      v6 = __dst;
      v7 = *((_QWORD *)&v58 + 1);
      v8 = v57;
      v9 = 168;
      do
      {
        if (v7 == v8)
        {
          keccak_f((uint64_t *)&v44);
          v7 = 0;
          *((_QWORD *)&v58 + 1) = 0;
          v8 = v57;
        }
        if (v9 >= v8 - v7)
          v10 = v8 - v7;
        else
          v10 = v9;
        if (v10)
          memcpy(v6, (char *)&v44 + v7, v10);
        v6 += v10;
        v7 += v10;
        *((_QWORD *)&v58 + 1) = v7;
        v9 -= v10;
      }
      while (v9);
      v11 = 0;
      do
      {
        v12 = __dst[v11 + 1];
        v13 = __dst[v11] | ((v12 & 0xF) << 8);
        v14 = __dst[v11 + 2];
        if (v13 <= 0xD00)
          *(_WORD *)(v5 + 2 * v4++) = v13;
        v15 = (v12 >> 4) | (16 * v14);
        if (v15 <= 0xD00 && v4 <= 255)
          *(_WORD *)(v5 + 2 * v4++) = v15;
        if (v11 > 0xA4)
          break;
        v11 += 3;
      }
      while (v4 < 256);
    }
    while (v4 < 256);
    v60 = v42;
    v61 = 1;
    v56 = 0;
    v58 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 2;
    v57 = 168;
    BORINGSSL_keccak_absorb((uint64_t)&v43, (char *)v59, 0x22uLL);
    v16 = 0;
    v17 = a1 + 1536 * v42 + 512;
    do
    {
      if (!HIDWORD(v43))
      {
        if (v43 >= 4)
          goto LABEL_73;
        *((_BYTE *)&v44 + v58) ^= 0x1F1F0606u >> (8 * v43);
        *((_BYTE *)&v44 + v57 - 1) ^= 0x80u;
        keccak_f((uint64_t *)&v44);
        HIDWORD(v43) = 1;
      }
      v18 = __dst;
      v19 = *((_QWORD *)&v58 + 1);
      v20 = v57;
      v21 = 168;
      do
      {
        if (v19 == v20)
        {
          keccak_f((uint64_t *)&v44);
          v19 = 0;
          *((_QWORD *)&v58 + 1) = 0;
          v20 = v57;
        }
        if (v21 >= v20 - v19)
          v22 = v20 - v19;
        else
          v22 = v21;
        if (v22)
          memcpy(v18, (char *)&v44 + v19, v22);
        v18 += v22;
        v19 += v22;
        *((_QWORD *)&v58 + 1) = v19;
        v21 -= v22;
      }
      while (v21);
      v23 = 0;
      do
      {
        v24 = __dst[v23 + 1];
        v25 = __dst[v23] | ((v24 & 0xF) << 8);
        v26 = __dst[v23 + 2];
        if (v25 <= 0xD00)
          *(_WORD *)(v17 + 2 * v16++) = v25;
        v27 = (v24 >> 4) | (16 * v26);
        if (v27 <= 0xD00 && v16 <= 255)
          *(_WORD *)(v17 + 2 * v16++) = v27;
        if (v23 > 0xA4)
          break;
        v23 += 3;
      }
      while (v16 < 256);
    }
    while (v16 < 256);
    v60 = v42;
    v61 = 2;
    v56 = 0;
    v58 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 2;
    v57 = 168;
    result = BORINGSSL_keccak_absorb((uint64_t)&v43, (char *)v59, 0x22uLL);
    v29 = 0;
    v30 = a1 + 1536 * v42 + 1024;
    do
    {
      if (!HIDWORD(v43))
      {
        if (v43 >= 4)
          goto LABEL_73;
        *((_BYTE *)&v44 + v58) ^= 0x1F1F0606u >> (8 * v43);
        *((_BYTE *)&v44 + v57 - 1) ^= 0x80u;
        result = keccak_f((uint64_t *)&v44);
        HIDWORD(v43) = 1;
      }
      v31 = __dst;
      v32 = *((_QWORD *)&v58 + 1);
      v33 = v57;
      v34 = 168;
      do
      {
        if (v32 == v33)
        {
          result = keccak_f((uint64_t *)&v44);
          v32 = 0;
          *((_QWORD *)&v58 + 1) = 0;
          v33 = v57;
        }
        if (v34 >= v33 - v32)
          v35 = v33 - v32;
        else
          v35 = v34;
        if (v35)
          result = (uint64_t)memcpy(v31, (char *)&v44 + v32, v35);
        v31 += v35;
        v32 += v35;
        *((_QWORD *)&v58 + 1) = v32;
        v34 -= v35;
      }
      while (v34);
      v36 = 0;
      do
      {
        v37 = __dst[v36 + 1];
        v38 = __dst[v36] | ((v37 & 0xF) << 8);
        v39 = __dst[v36 + 2];
        if (v38 <= 0xD00)
          *(_WORD *)(v30 + 2 * v29++) = v38;
        v40 = (v37 >> 4) | (16 * v39);
        if (v40 <= 0xD00 && v29 <= 255)
          *(_WORD *)(v30 + 2 * v29++) = v40;
        if (v36 > 0xA4)
          break;
        v36 += 3;
      }
      while (v29 < 256);
    }
    while (v29 < 256);
    v2 = v42 + 1;
  }
  while (v42 != 2);
  return result;
}

_DWORD *vector_generate_secret_eta_2(__int16 *a1, _BYTE *a2, _OWORD *a3)
{
  __int128 v5;
  char v6;
  uint64_t v7;
  int16x8_t v8;
  __int16 *v9;
  int16x8_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  uint32x4_t v15;
  int8x16_t v16;
  uint32x4_t v17;
  uint32x4_t v18;
  int16x8_t v19;
  uint32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  __int16 *v23;
  __int16 *v24;
  char v25;
  __int16 *v26;
  uint64_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint32x4_t v34;
  int8x16_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  int16x8_t v38;
  uint32x4_t v39;
  int8x16_t v40;
  int8x16_t v41;
  __int16 *v42;
  __int16 *v43;
  char v44;
  __int16 *v45;
  _DWORD *result;
  uint64_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  uint32x4_t v54;
  int8x16_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  int16x8_t v58;
  uint32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  __int16 *v62;
  __int16 *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  _OWORD v80[2];
  char v81;
  char __dst[128];
  uint64_t v83;
  int16x8x2_t v84;
  int16x8x2_t v85;
  int16x8x2_t v86;
  int16x8x2_t v87;
  int16x8x2_t v88;
  int16x8x2_t v89;

  v83 = *MEMORY[0x24BDAC8D0];
  v5 = a3[1];
  v80[0] = *a3;
  v80[1] = v5;
  v6 = (*a2)++;
  v81 = v6;
  v77 = 0;
  v79 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v64 = 3;
  v78 = 136;
  BORINGSSL_keccak_absorb((uint64_t)&v64, (char *)v80, 0x21uLL);
  BORINGSSL_keccak_squeeze(&v64, __dst, 0x80uLL);
  v7 = 0;
  v8.i64[0] = 0xD000D000D000D00;
  v8.i64[1] = 0xD000D000D000D00;
  v9 = a1;
  v10 = vdupq_n_s16(0xD01u);
  do
  {
    v11 = *(int8x16_t *)&__dst[v7];
    v12 = vqtbl1q_s8(v11, (int8x16_t)xmmword_208F04F30);
    v13 = vqtbl1q_s8(v11, (int8x16_t)xmmword_208F04F20);
    v14 = vqtbl1q_s8(v11, (int8x16_t)xmmword_208F04F50);
    v15 = (uint32x4_t)vqtbl1q_s8(v11, (int8x16_t)xmmword_208F04F40);
    *(int16x4_t *)v14.i8 = vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v14 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v14, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v14, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v14, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v10.i8);
    *(int16x4_t *)v12.i8 = vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v12 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v12, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v12, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v12, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v10.i8);
    v16 = (int8x16_t)vshrq_n_u8((uint8x16_t)v11, 4uLL);
    v14.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v15 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v15, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v15, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v15, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v10.i8);
    v17 = (uint32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_208F04F20);
    v18 = (uint32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_208F04F30);
    v12.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v13 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v13, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v13, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v13, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v10.i8);
    *(int16x4_t *)v13.i8 = vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v18 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v18, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v18, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v18, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v10.i8);
    v13.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v17 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v17, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v17, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v17, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v10.i8);
    v19 = vmaxq_s16((int16x8_t)v13, v10);
    v20 = (uint32x4_t)vqtbl1q_s8(v16, (int8x16_t)xmmword_208F04F40);
    v21 = vqtbl1q_s8(v16, (int8x16_t)xmmword_208F04F50);
    v87.val[0] = (int16x8_t)vorrq_s8(vandq_s8(v12, (int8x16_t)vcgtq_u16((uint16x8_t)v10, (uint16x8_t)v12)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v12, v10), v8));
    *(int16x4_t *)v21.i8 = vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v21 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32((uint32x4_t)v21, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v21, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v21, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v10.i8);
    v21.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v20 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v20, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v20, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v20, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v10.i8);
    v22 = vandq_s8(v13, (int8x16_t)vcgtq_u16((uint16x8_t)v10, (uint16x8_t)v13));
    v84.val[0] = (int16x8_t)vorrq_s8(vandq_s8(v14, (int8x16_t)vcgtq_u16((uint16x8_t)v10, (uint16x8_t)v14)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v14, v10), v8));
    v84.val[1] = (int16x8_t)vorrq_s8(vandq_s8(v21, (int8x16_t)vcgtq_u16((uint16x8_t)v10, (uint16x8_t)v21)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v21, v10), v8));
    v23 = v9 + 32;
    vst2q_s16(v9, v84);
    v24 = v9 + 16;
    v87.val[1] = (int16x8_t)vorrq_s8(v22, (int8x16_t)vaddq_s16(v19, v8));
    vst2q_s16(v24, v87);
    v7 += 16;
    v9 = v23;
  }
  while (v7 != 128);
  v25 = (*a2)++;
  v81 = v25;
  v26 = a1 + 256;
  v77 = 0;
  v79 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v64 = 3;
  v78 = 136;
  BORINGSSL_keccak_absorb((uint64_t)&v64, (char *)v80, 0x21uLL);
  BORINGSSL_keccak_squeeze(&v64, __dst, 0x80uLL);
  v27 = 0;
  v28 = vdupq_n_s16(0xD01u);
  v29.i64[0] = 0xD000D000D000D00;
  v29.i64[1] = 0xD000D000D000D00;
  do
  {
    v30 = *(int8x16_t *)&__dst[v27];
    v31 = vqtbl1q_s8(v30, (int8x16_t)xmmword_208F04F30);
    v32 = vqtbl1q_s8(v30, (int8x16_t)xmmword_208F04F20);
    v33 = vqtbl1q_s8(v30, (int8x16_t)xmmword_208F04F50);
    v34 = (uint32x4_t)vqtbl1q_s8(v30, (int8x16_t)xmmword_208F04F40);
    *(int16x4_t *)v33.i8 = vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v33 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v33, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v33, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v33, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v28.i8);
    *(int16x4_t *)v31.i8 = vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v31 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v31, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v31, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v31, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v28.i8);
    v35 = (int8x16_t)vshrq_n_u8((uint8x16_t)v30, 4uLL);
    v33.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v34 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v34, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v34, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v34, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v28.i8);
    v36 = (uint32x4_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_208F04F20);
    v37 = (uint32x4_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_208F04F30);
    v31.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v32 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v32, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v32, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v32, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v28.i8);
    *(int16x4_t *)v32.i8 = vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v37 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v37, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v37, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v37, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v28.i8);
    v32.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v36 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v36, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v36, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v36, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v28.i8);
    v38 = vmaxq_s16((int16x8_t)v32, v28);
    v39 = (uint32x4_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_208F04F40);
    v40 = vqtbl1q_s8(v35, (int8x16_t)xmmword_208F04F50);
    v88.val[0] = (int16x8_t)vorrq_s8(vandq_s8(v31, (int8x16_t)vcgtq_u16((uint16x8_t)v28, (uint16x8_t)v31)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v31, v28), v29));
    *(int16x4_t *)v40.i8 = vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v40 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32((uint32x4_t)v40, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v40, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v40, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v28.i8);
    v40.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v39 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v39, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v39, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v39, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v28.i8);
    v41 = vandq_s8(v32, (int8x16_t)vcgtq_u16((uint16x8_t)v28, (uint16x8_t)v32));
    v85.val[0] = (int16x8_t)vorrq_s8(vandq_s8(v33, (int8x16_t)vcgtq_u16((uint16x8_t)v28, (uint16x8_t)v33)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v33, v28), v29));
    v85.val[1] = (int16x8_t)vorrq_s8(vandq_s8(v40, (int8x16_t)vcgtq_u16((uint16x8_t)v28, (uint16x8_t)v40)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v40, v28), v29));
    v42 = v26 + 32;
    vst2q_s16(v26, v85);
    v43 = v26 + 16;
    v88.val[1] = (int16x8_t)vorrq_s8(v41, (int8x16_t)vaddq_s16(v38, v29));
    vst2q_s16(v43, v88);
    v27 += 16;
    v26 = v42;
  }
  while (v27 != 128);
  v44 = (*a2)++;
  v81 = v44;
  v45 = a1 + 512;
  v77 = 0;
  v79 = 0u;
  v76 = 0u;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v64 = 3;
  v78 = 136;
  BORINGSSL_keccak_absorb((uint64_t)&v64, (char *)v80, 0x21uLL);
  result = BORINGSSL_keccak_squeeze(&v64, __dst, 0x80uLL);
  v47 = 0;
  v48 = vdupq_n_s16(0xD01u);
  v49.i64[0] = 0xD000D000D000D00;
  v49.i64[1] = 0xD000D000D000D00;
  do
  {
    v50 = *(int8x16_t *)&__dst[v47];
    v51 = vqtbl1q_s8(v50, (int8x16_t)xmmword_208F04F30);
    v52 = vqtbl1q_s8(v50, (int8x16_t)xmmword_208F04F20);
    v53 = vqtbl1q_s8(v50, (int8x16_t)xmmword_208F04F50);
    v54 = (uint32x4_t)vqtbl1q_s8(v50, (int8x16_t)xmmword_208F04F40);
    *(int16x4_t *)v53.i8 = vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v53 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v53, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v53, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v53, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v48.i8);
    *(int16x4_t *)v51.i8 = vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v51 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v51, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v51, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v51, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v48.i8);
    v55 = (int8x16_t)vshrq_n_u8((uint8x16_t)v50, 4uLL);
    v53.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v54 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v54, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v54, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v54, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v48.i8);
    v56 = (uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_208F04F20);
    v57 = (uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_208F04F30);
    v51.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v52 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v52, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v52, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v52, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v48.i8);
    *(int16x4_t *)v52.i8 = vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v57 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v57, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v57, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v57, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v48.i8);
    v52.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v56 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v56, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v56, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v56, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v48.i8);
    v58 = vmaxq_s16((int16x8_t)v52, v48);
    v59 = (uint32x4_t)vqtbl1q_s8(v55, (int8x16_t)xmmword_208F04F40);
    v60 = vqtbl1q_s8(v55, (int8x16_t)xmmword_208F04F50);
    v89.val[0] = (int16x8_t)vorrq_s8(vandq_s8(v51, (int8x16_t)vcgtq_u16((uint16x8_t)v48, (uint16x8_t)v51)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v51, v48), v49));
    *(int16x4_t *)v60.i8 = vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v60 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32((uint32x4_t)v60, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v60, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v60, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v48.i8);
    v60.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v59 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v59, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v59, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v59, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v48.i8);
    v61 = vandq_s8(v52, (int8x16_t)vcgtq_u16((uint16x8_t)v48, (uint16x8_t)v52));
    v86.val[0] = (int16x8_t)vorrq_s8(vandq_s8(v53, (int8x16_t)vcgtq_u16((uint16x8_t)v48, (uint16x8_t)v53)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v53, v48), v49));
    v86.val[1] = (int16x8_t)vorrq_s8(vandq_s8(v60, (int8x16_t)vcgtq_u16((uint16x8_t)v48, (uint16x8_t)v60)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v60, v48), v49));
    v62 = v45 + 32;
    vst2q_s16(v45, v86);
    v63 = v45 + 16;
    v89.val[1] = (int16x8_t)vorrq_s8(v61, (int8x16_t)vaddq_s16(v58, v49));
    vst2q_s16(v63, v89);
    v47 += 16;
    v45 = v62;
  }
  while (v47 != 128);
  return result;
}

int16x8_t *vector_ntt(int16x8_t *result)
{
  int v1;
  unsigned int v2;
  uint32x4_t v3;
  int32x4_t v4;
  int16x8_t v5;
  int16x8_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int16x8_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int16x8_t *v17;
  uint64_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  int v33;
  __int16 v34;
  int v35;
  unint64_t v36;
  uint32x4_t v37;
  int32x4_t v38;
  int16x8_t v39;
  int16x8_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  int16x8_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  unint64_t v61;
  int16x8_t *v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  uint64_t v74;
  int v75;
  int v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  unsigned int v80;
  uint32x4_t v81;
  int32x4_t v82;
  int16x8_t v83;
  int16x8_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int16x8_t *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  BOOL v106;
  unint64_t v107;
  int16x8_t *v108;
  uint16x8_t v109;
  uint16x8_t v110;
  uint32x4_t v111;
  uint32x4_t v112;
  int16x8_t v113;
  int16x8_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int16x8_t v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  __int16 v124;

  v1 = 1;
  v2 = 256;
  v3 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v4.i64[0] = 0xF2000000F2;
  v4.i64[1] = 0xF2000000F2;
  v5.i64[0] = 0xD000D000D000D00;
  v5.i64[1] = 0xD000D000D000D00;
  v6 = vdupq_n_s16(0xD01u);
  do
  {
    v7 = 0;
    v8 = 0;
    v9 = v2 >> 1;
    v10 = v2 & 0x1FE;
    v11 = v9 & 0xF8;
    v12 = (uint64_t)result->i64 + v10;
    v13 = result;
    v14 = v9;
    do
    {
      v15 = kNTTRoots[v7 + v1];
      v16 = v8;
      if (v2 < 0x10)
        goto LABEL_62;
      v16 = v8 + v11;
      v17 = v13;
      v18 = v9 & 0xF8;
      do
      {
        v19 = *(uint16x8_t *)((char *)v17 + v10);
        v20 = (uint16x8_t)vdupq_n_s16(v15);
        v21 = vmull_u16(*(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8);
        v22 = vmull_high_u16(v20, v19);
        v23 = vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v21.i8, *(uint32x2_t *)v3.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v21, v3), 0x18uLL), v4), *(uint16x4_t *)v20.i8, *(uint16x4_t *)v19.i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v22.i8, *(uint32x2_t *)v3.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v22, v3), 0x18uLL),
                                           v4),
                             v20,
                             v19));
        v24 = vaddq_s16(v23, v5);
        v25 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v24), (int8x16_t)v23), (int8x16_t)vmaxq_s16(v24, (int16x8_t)0));
        v26 = *v17;
        v27 = vaddq_s16(v25, *v17);
        v28 = vaddq_s16(v27, v5);
        *(int8x16_t *)v17 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v28), (int8x16_t)v27), (int8x16_t)vmaxq_s16(v28, (int16x8_t)0));
        v29 = vsubq_s16(v26, v25);
        *(int8x16_t *)((char *)v17++ + v10) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v29), (int8x16_t)vaddq_s16(v29, v6)), (int8x16_t)vmaxq_s16(v29, (int16x8_t)0));
        v18 -= 8;
      }
      while (v18);
      if (v11 != v9)
      {
LABEL_62:
        do
        {
          v30 = v16;
          v31 = *(unsigned __int16 *)(v12 + 2 * v16) * v15;
          v32 = v31 + 62207 * ((5039 * (unint64_t)v31) >> 24);
          v33 = v32 & ((__int16)(v32 - 3329) >> 15) | (__int16)(v32 - 3329) & ~((__int16)(v32 - 3329) >> 31);
          v34 = result->i16[v16];
          result->i16[v30] = (v33 + v34) & ((__int16)(v33 + v34 - 3329) >> 15) | (v33 + v34 - 3329) & ~((__int16)(v33 + v34 - 3329) >> 15);
          *(_WORD *)(v12 + v30 * 2) = (v34 - v33 + 3329) & ((__int16)(v34 - v33) >> 15) | (v34 - v33) & ~((__int16)(v34 - v33) >> 15);
          ++v16;
        }
        while (v14 != v16);
      }
      v8 += v10;
      ++v7;
      v14 += v10;
      v13 = (int16x8_t *)((char *)v13 + 4 * (v2 >> 1));
    }
    while (v7 != v1);
    v1 *= 2;
    v2 >>= 1;
  }
  while (v1 < 128);
  v35 = 1;
  LODWORD(v36) = 256;
  v37 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v38.i64[0] = 0xF2000000F2;
  v38.i64[1] = 0xF2000000F2;
  v39.i64[0] = 0xD000D000D000D00;
  v39.i64[1] = 0xD000D000D000D00;
  v40 = vdupq_n_s16(0xD01u);
  do
  {
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = v36 & 0x1FE;
    v36 = v36 >> 1;
    v45 = 4 * v36;
    v46 = result + 32;
    v47 = 1;
    v48 = v36;
    do
    {
      if (v48 <= v47)
        v49 = v47;
      else
        v49 = v48;
      v50 = v43 + v36;
      if (v43 + v36 <= (v43 | 1))
        v51 = v43 | 1;
      else
        v51 = v43 + v36;
      v52 = v51 + -2 * v36 * v42;
      v53 = kNTTRoots[v42 + v35];
      v54 = v43;
      if (v52 < 8)
        goto LABEL_63;
      v55 = v50 <= (v43 | 1) ? v43 | 1 : v43 + v36;
      v56 = (uint64_t)result->i64 + v45 * v42;
      v57 = v56 + 2 * (v55 + ((v36 << 63) - 2 * v36) * v42);
      v58 = v57 - 2 + v44 + 514;
      v59 = v57 + 512;
      v60 = v56 + 512 >= v58 || v56 + (v44 | 0x200) >= v59;
      v54 = v43;
      if (!v60)
        goto LABEL_63;
      v61 = (v49 + v41) & 0xFFFFFFFFFFFFFFF8;
      v54 = v43 + (v52 & 0xFFFFFFFFFFFFFFF8);
      v62 = v46;
      do
      {
        v63 = *(uint16x8_t *)((char *)v62 + v44);
        v64 = (uint16x8_t)vdupq_n_s16(v53);
        v65 = vmull_u16(*(uint16x4_t *)v64.i8, *(uint16x4_t *)v63.i8);
        v66 = vmull_high_u16(v64, v63);
        v67 = vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v65.i8, *(uint32x2_t *)v37.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v65, v37), 0x18uLL), v38), *(uint16x4_t *)v64.i8, *(uint16x4_t *)v63.i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v66.i8, *(uint32x2_t *)v37.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v66, v37), 0x18uLL),
                                           v38),
                             v64,
                             v63));
        v68 = vaddq_s16(v67, v39);
        v69 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v68), (int8x16_t)v67), (int8x16_t)vmaxq_s16(v68, (int16x8_t)0));
        v70 = *v62;
        v71 = vaddq_s16(v69, *v62);
        v72 = vaddq_s16(v71, v39);
        *(int8x16_t *)v62 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v72), (int8x16_t)v71), (int8x16_t)vmaxq_s16(v72, (int16x8_t)0));
        v73 = vsubq_s16(v70, v69);
        *(int8x16_t *)((char *)v62++ + v44) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v73), (int8x16_t)vaddq_s16(v73, v40)), (int8x16_t)vmaxq_s16(v73, (int16x8_t)0));
        v61 -= 8;
      }
      while (v61);
      if (v52 != (v52 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_63:
        do
        {
          v74 = (uint64_t)result->i64 + 2 * v54 + v44;
          v75 = *(unsigned __int16 *)(v74 + 512) * v53
              + 62207 * ((5039 * (unint64_t)(*(unsigned __int16 *)(v74 + 512) * v53)) >> 24);
          v76 = v75 & ((__int16)(v75 - 3329) >> 15) | (__int16)(v75 - 3329) & ~((__int16)(v75 - 3329) >> 31);
          v77 = (uint64_t)result->i64 + 2 * v54;
          v78 = *(_WORD *)(v77 + 512);
          *(_WORD *)(v77 + 512) = (v76 + v78) & ((__int16)(v76 + v78 - 3329) >> 15) | (v76 + v78 - 3329) & ~((__int16)(v76 + v78 - 3329) >> 15);
          *(_WORD *)(v74 + 512) = (v78 - v76 + 3329) & ((__int16)(v78 - v76) >> 15) | (v78 - v76) & ~((__int16)(v78 - v76) >> 15);
          ++v54;
        }
        while (v54 < v50);
      }
      v43 += v44;
      ++v42;
      v48 += v44;
      v47 += v44;
      v41 -= v44;
      v46 = (int16x8_t *)((char *)v46 + v45);
    }
    while (v42 != v35);
    v35 *= 2;
  }
  while (v35 < 128);
  v79 = 1;
  v80 = 256;
  v81 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v82.i64[0] = 0xF2000000F2;
  v82.i64[1] = 0xF2000000F2;
  v83.i64[0] = 0xD000D000D000D00;
  v83.i64[1] = 0xD000D000D000D00;
  v84 = vdupq_n_s16(0xD01u);
  do
  {
    v85 = v80 >> 1;
    if (v79 >= 1)
    {
      v86 = 0;
      v87 = v80 & 0x1FE;
      v88 = 4 * v85;
      v89 = result + 64;
      v90 = 1;
      v91 = v85;
      v92 = 0;
      v93 = 0;
      v94 = -2 * v85;
      do
      {
        if (v91 <= v90)
          v95 = v90;
        else
          v95 = v91;
        v96 = v93 + v85;
        if (v93 + v85 <= (v93 | 1))
          v97 = v93 | 1;
        else
          v97 = v93 + v85;
        v98 = v97 + v94 * v92;
        v99 = kNTTRoots[v92 + v79];
        v100 = v93;
        if (v98 < 8)
          goto LABEL_64;
        v101 = v96 <= (v93 | 1) ? v93 | 1 : v93 + v85;
        v102 = (uint64_t)result->i64 + v88 * v92;
        v103 = v102 + 2 * (v101 + v94 * v92);
        v104 = v103 - 2 + v87 + 1026;
        v105 = v103 + 1024;
        v106 = v102 + 1024 >= v104 || v102 + (v87 | 0x400uLL) >= v105;
        v100 = v93;
        if (!v106)
          goto LABEL_64;
        v107 = (v95 + v86) & 0xFFFFFFFFFFFFFFF8;
        v100 = v93 + (v98 & 0xFFFFFFFFFFFFFFF8);
        v108 = v89;
        do
        {
          v109 = *(uint16x8_t *)((char *)v108 + v87);
          v110 = (uint16x8_t)vdupq_n_s16(v99);
          v111 = vmull_u16(*(uint16x4_t *)v110.i8, *(uint16x4_t *)v109.i8);
          v112 = vmull_high_u16(v110, v109);
          v113 = vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v111.i8, *(uint32x2_t *)v81.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v111, v81), 0x18uLL), v82), *(uint16x4_t *)v110.i8, *(uint16x4_t *)v109.i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v112.i8, *(uint32x2_t *)v81.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v112, v81), 0x18uLL),
                                              v82),
                                v110,
                                v109));
          v114 = vaddq_s16(v113, v83);
          v115 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v114), (int8x16_t)v113), (int8x16_t)vmaxq_s16(v114, (int16x8_t)0));
          v116 = *v108;
          v117 = vaddq_s16(v115, *v108);
          v118 = vaddq_s16(v117, v83);
          *(int8x16_t *)v108 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v118), (int8x16_t)v117), (int8x16_t)vmaxq_s16(v118, (int16x8_t)0));
          v119 = vsubq_s16(v116, v115);
          *(int8x16_t *)((char *)v108++ + v87) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v119), (int8x16_t)vaddq_s16(v119, v84)), (int8x16_t)vmaxq_s16(v119, (int16x8_t)0));
          v107 -= 8;
        }
        while (v107);
        if (v98 != (v98 & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_64:
          do
          {
            v120 = (uint64_t)result->i64 + 2 * v100 + v87;
            v121 = *(unsigned __int16 *)(v120 + 1024) * v99
                 + 62207 * ((5039 * (unint64_t)(*(unsigned __int16 *)(v120 + 1024) * v99)) >> 24);
            v122 = v121 & ((__int16)(v121 - 3329) >> 15) | (__int16)(v121 - 3329) & ~((__int16)(v121 - 3329) >> 31);
            v123 = (uint64_t)result->i64 + 2 * v100;
            v124 = *(_WORD *)(v123 + 1024);
            *(_WORD *)(v123 + 1024) = (v122 + v124) & ((__int16)(v122 + v124 - 3329) >> 15) | (v122 + v124 - 3329) & ~((__int16)(v122 + v124 - 3329) >> 15);
            *(_WORD *)(v120 + 1024) = (v124 - v122 + 3329) & ((__int16)(v124 - v122) >> 15) | (v124 - v122) & ~((__int16)(v124 - v122) >> 15);
            ++v100;
          }
          while (v100 < v96);
        }
        v93 += v87;
        ++v92;
        v91 += v87;
        v90 += v87;
        v86 -= v87;
        v89 = (int16x8_t *)((char *)v89 + v88);
      }
      while (v92 != v79);
    }
    v79 *= 2;
    v80 = v85;
  }
  while (v79 < 128);
  return result;
}

_DWORD *KYBER_encap(char *a1, char *a2, uint64_t a3)
{
  __int128 v6;
  _OWORD v8[13];
  uint64_t v9;
  __int128 v10;
  _OWORD v11[2];
  char __dst[32];
  char v13[32];
  _OWORD v14[4];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  RAND_bytes_with_additional_data((uint64_t)v11, 0x20uLL, (uint64_t)&RAND_bytes_kZeroAdditionalData);
  v14[0] = v11[0];
  v14[1] = v11[1];
  v6 = *(_OWORD *)(a3 + 1584);
  v14[2] = *(_OWORD *)(a3 + 1568);
  v14[3] = v6;
  v10 = 0u;
  memset((char *)v8 + 8, 0, 200);
  *(_QWORD *)&v8[0] = 1;
  v9 = 72;
  BORINGSSL_keccak_absorb((uint64_t)v8, (char *)v14, 0x40uLL);
  BORINGSSL_keccak_squeeze(v8, __dst, 0x40uLL);
  encrypt_cpa((uint64_t)a1, a3);
  v10 = 0u;
  memset(v8, 0, sizeof(v8));
  v9 = 136;
  BORINGSSL_keccak_absorb((uint64_t)v8, a1, 0x440uLL);
  BORINGSSL_keccak_squeeze(v8, v13, 0x20uLL);
  v10 = 0u;
  memset((char *)v8 + 8, 0, 200);
  *(_QWORD *)&v8[0] = 3;
  v9 = 136;
  BORINGSSL_keccak_absorb((uint64_t)v8, __dst, 0x40uLL);
  return BORINGSSL_keccak_squeeze(v8, a2, 0x20uLL);
}

uint64_t encrypt_cpa(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  int8x16_t *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int16 *v10;
  int16x8_t v11;
  int16x8_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  uint32x4_t v17;
  int8x16_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  int16x8_t v21;
  uint32x4_t v22;
  int8x16_t v23;
  int8x16_t v24;
  __int16 *v25;
  __int16 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint32x4_t v32;
  int32x4_t v33;
  int16x8_t v34;
  unint64_t v35;
  __int128 *v36;
  const __int16 *v37;
  int16x8_t *v38;
  uint32x4_t v39;
  uint32x4_t v40;
  int8x16_t v41;
  int16x8_t v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  int8x16_t v48;
  int16x8_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  __int16 *v54;
  _QWORD *v55;
  uint64_t i;
  int8x16_t v57;
  int8x16_t v58;
  int16x8_t v59;
  int16x8_t v60;
  unint64_t v61;
  __int128 *v62;
  const __int16 *v63;
  int16x8_t *v64;
  uint32x4_t v65;
  uint32x4_t v66;
  int8x16_t v67;
  int16x8_t v68;
  uint16x8_t v69;
  uint16x8_t v70;
  uint32x4_t v71;
  uint32x4_t v72;
  uint32x4_t v73;
  int8x16_t v74;
  int16x8_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  int8x16_t v78;
  int8x16_t v79;
  __int16 *v80;
  _QWORD *v81;
  uint64_t j;
  int8x16_t v83;
  int8x16_t v84;
  int16x8_t v85;
  int16x8_t v86;
  unint64_t v87;
  __int128 *v88;
  const __int16 *v89;
  int16x8_t *v90;
  uint32x4_t v91;
  uint32x4_t v92;
  int8x16_t v93;
  int16x8_t v94;
  uint16x8_t v95;
  uint16x8_t v96;
  uint32x4_t v97;
  uint32x4_t v98;
  uint32x4_t v99;
  int8x16_t v100;
  int16x8_t v101;
  uint32x4_t v102;
  uint32x4_t v103;
  int8x16_t v104;
  int8x16_t v105;
  __int16 *v106;
  _QWORD *v107;
  uint64_t k;
  int8x16_t v109;
  int8x16_t v110;
  int16x8_t v111;
  int16x8_t v112;
  uint64_t v113;
  int16x8_t v114;
  int16x8_t v115;
  uint32x4_t v116;
  int8x16_t v117;
  int8x16_t v118;
  int8x16_t v119;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  int8x16_t v123;
  int8x16_t v124;
  __int128 v125;
  __int16 *v126;
  uint64_t v127;
  int16x8_t *v128;
  __int16 *v129;
  uint16x8_t v130;
  int32x4_t v131;
  int32x4_t v132;
  int8x16_t v133;
  int16x8_t v134;
  uint32x4_t v135;
  uint32x4_t v136;
  int32x4_t v137;
  int8x16_t v138;
  int16x8_t v139;
  int8x16_t v140;
  int16x8_t v141;
  uint32x4_t v142;
  uint32x4_t v143;
  int8x16_t v144;
  int16x8_t v145;
  uint64_t v146;
  __int128 *v147;
  __int128 v148;
  int8x16_t v149;
  int8x16_t *v150;
  int8x16_t v151;
  int16x8_t v152;
  int8x16_t v153;
  int16x8_t v154;
  __int32 v155;
  int8x16_t v156;
  int16x8_t v157;
  int8x16_t v158;
  int8x16_t v159;
  uint64_t v160;
  int16x8_t v161;
  uint16x4_t v162;
  uint16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  uint16x4_t v166;
  int8x16_t v167;
  int16x8_t v168;
  unsigned int v169;
  int16x8_t v170;
  unint64_t v171;
  int16x8_t v172;
  int16x8_t v173;
  uint16x4_t v174;
  int32x4_t v175;
  int32x4_t v176;
  uint32x4_t v177;
  int32x4_t v178;
  uint32x4_t v179;
  int8x16_t v180;
  int8x16_t v181;
  int16x8_t v182;
  int16x8_t v183;
  int32x4_t v184;
  int16x8_t v185;
  uint32x4_t v186;
  uint32x4_t v187;
  uint16x4_t v188;
  int8x16_t v189;
  int16x8_t v190;
  int8x16_t v191;
  uint32x4_t v192;
  uint32x4_t v193;
  int8x16_t v194;
  int8x16_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int8x16_t v199;
  uint32x4_t v200;
  uint32x4_t v201;
  int16x8_t v202;
  int8x16_t v203;
  int16x8_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int16x8_t v210;
  uint64_t v211;
  int32x4_t v212;
  int16x8_t *v213;
  int16x8_t v214;
  int8x16_t v215;
  int16x8_t v216;
  int32x4_t v217;
  uint32x4_t v218;
  uint32x4_t v219;
  int8x16_t v220;
  int16x8_t v221;
  uint64_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int8x16_t v226;
  int16x8_t v227;
  int8x16_t v228;
  uint16x8_t v229;
  int32x4_t v230;
  int32x4_t v231;
  int32x4_t v232;
  uint32x4_t v233;
  uint32x4_t v234;
  int8x16_t v235;
  int16x8_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int16x8_t v239;
  int32x4_t v240;
  uint32x4_t v241;
  uint32x4_t v242;
  int8x16_t v243;
  int16x8_t v244;
  int16x8_t v245;
  int16x8_t v246;
  int16x8_t v247;
  int16x8_t v248;
  int8x16_t v249;
  int16x8_t v250;
  int8x16_t v251;
  uint16x8_t v252;
  int32x4_t v253;
  int32x4_t v254;
  int32x4_t v255;
  uint32x4_t v256;
  uint32x4_t v257;
  int8x16_t v258;
  int16x8_t v259;
  int8x16_t v260;
  int8x16_t v261;
  int16x8_t v262;
  int32x4_t v263;
  uint32x4_t v264;
  uint32x4_t v265;
  int8x16_t v266;
  int16x8_t v267;
  int16x8_t v268;
  int16x8_t v269;
  int16x8_t v270;
  int16x8_t v271;
  int8x16_t v272;
  int16x8_t v273;
  int8x16_t v274;
  uint16x8_t v275;
  int32x4_t v276;
  int32x4_t v277;
  int32x4_t v278;
  uint32x4_t v279;
  uint32x4_t v280;
  int8x16_t v281;
  int16x8_t v282;
  int8x16_t v283;
  int8x16_t v284;
  int16x8_t v285;
  int32x4_t v286;
  uint32x4_t v287;
  uint32x4_t v288;
  int8x16_t v289;
  int16x8_t v290;
  int16x8_t v291;
  int16x8_t v292;
  int16x8_t v293;
  int16x8_t v294;
  int8x16_t v295;
  int16x8_t v296;
  int8x16_t v297;
  uint16x8_t v298;
  int32x4_t v299;
  int32x4_t v300;
  int32x4_t v301;
  uint32x4_t v302;
  uint32x4_t v303;
  int8x16_t v304;
  int16x8_t v305;
  int8x16_t v306;
  int8x16_t v307;
  int16x8_t v308;
  int32x4_t v309;
  uint32x4_t v310;
  uint32x4_t v311;
  int8x16_t v312;
  int16x8_t v313;
  int16x8_t v314;
  int16x8_t v315;
  int16x8_t v316;
  int16x8_t v317;
  int8x16_t v318;
  int16x8_t v319;
  int8x16_t v320;
  uint16x8_t v321;
  int32x4_t v322;
  int32x4_t v323;
  int32x4_t v324;
  uint32x4_t v325;
  uint32x4_t v326;
  int8x16_t v327;
  int16x8_t v328;
  int8x16_t v329;
  int8x16_t v330;
  int16x8_t v331;
  int32x4_t v332;
  uint32x4_t v333;
  uint32x4_t v334;
  int8x16_t v335;
  int16x8_t v336;
  int16x8_t v337;
  int16x8_t v338;
  int16x8_t v339;
  int16x8_t v340;
  int8x16_t v341;
  int16x8_t v342;
  int8x16_t v343;
  uint16x8_t v344;
  int32x4_t v345;
  int32x4_t v346;
  int32x4_t v347;
  uint32x4_t v348;
  uint32x4_t v349;
  int8x16_t v350;
  int16x8_t v351;
  int8x16_t v352;
  int8x16_t v353;
  int16x8_t v354;
  int32x4_t v355;
  uint32x4_t v356;
  uint32x4_t v357;
  int8x16_t v358;
  int16x8_t v359;
  int16x8_t v360;
  int16x8_t v361;
  int16x8_t v362;
  int16x8_t v363;
  int8x16_t v364;
  int16x8_t v365;
  int8x16_t v366;
  uint16x8_t v367;
  int32x4_t v368;
  int32x4_t v369;
  int32x4_t v370;
  uint32x4_t v371;
  uint32x4_t v372;
  int8x16_t v373;
  int16x8_t v374;
  int8x16_t v375;
  int8x16_t v376;
  int16x8_t v377;
  int32x4_t v378;
  uint32x4_t v379;
  uint32x4_t v380;
  int8x16_t v381;
  int16x8_t v382;
  int16x8_t v383;
  int16x8_t v384;
  int16x8_t v385;
  int16x8_t v386;
  int8x16_t v387;
  int16x8_t v388;
  int8x16_t v389;
  uint16x8_t v390;
  int32x4_t v391;
  int32x4_t v392;
  int32x4_t v393;
  uint32x4_t v394;
  uint32x4_t v395;
  int8x16_t v396;
  int16x8_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int16x8_t v400;
  int32x4_t v401;
  uint32x4_t v402;
  uint32x4_t v403;
  int8x16_t v404;
  int16x8_t v405;
  int16x8_t v406;
  int16x8_t v407;
  int16x8_t v408;
  int8x16_t v409;
  int16x8_t v410;
  int8x16_t v411;
  uint16x8_t v412;
  int32x4_t v413;
  int32x4_t v414;
  uint32x4_t v415;
  uint32x4_t v416;
  int8x16_t v417;
  int16x8_t v418;
  int8x16_t v419;
  int8x16_t v420;
  int16x8_t v421;
  int32x4_t v422;
  uint32x4_t v423;
  uint32x4_t v424;
  int8x16_t v425;
  int16x8_t v426;
  int16x8_t v427;
  int16x8_t v428;
  int16x8_t v429;
  int16x8_t v430;
  int8x16_t v431;
  int16x8_t v432;
  int8x16_t v433;
  int32x4_t v434;
  uint32x4_t v435;
  uint32x4_t v436;
  int8x16_t v437;
  int16x8_t v438;
  int8x16_t v439;
  int8x16_t v440;
  int16x8_t v441;
  int32x4_t v442;
  uint32x4_t v443;
  uint32x4_t v444;
  int8x16_t v445;
  int16x8_t v446;
  int16x8_t v447;
  int16x8_t v448;
  int16x8_t v449;
  int16x8_t v450;
  int8x16_t v451;
  int16x8_t v452;
  int8x16_t v453;
  uint16x8_t v454;
  int32x4_t v455;
  int32x4_t v456;
  int32x4_t v457;
  uint32x4_t v458;
  uint32x4_t v459;
  int8x16_t v460;
  int16x8_t v461;
  int8x16_t v462;
  int8x16_t v463;
  int16x8_t v464;
  int32x4_t v465;
  uint32x4_t v466;
  uint32x4_t v467;
  int8x16_t v468;
  int16x8_t v469;
  int16x8_t v470;
  int16x8_t v471;
  int16x8_t v472;
  int16x8_t v473;
  int8x16_t v474;
  int16x8_t v475;
  int8x16_t v476;
  int32x4_t v477;
  uint32x4_t v478;
  uint32x4_t v479;
  int8x16_t v480;
  int16x8_t v481;
  int8x16_t v482;
  int8x16_t v483;
  int16x8_t v484;
  int32x4_t v485;
  uint32x4_t v486;
  uint32x4_t v487;
  int8x16_t v488;
  int16x8_t v489;
  int16x8_t v490;
  int16x8_t v491;
  int16x8_t v492;
  int16x8_t v493;
  int8x16_t v494;
  int16x8_t v495;
  int8x16_t v496;
  uint16x8_t v497;
  int32x4_t v498;
  int32x4_t v499;
  int32x4_t v500;
  uint32x4_t v501;
  uint32x4_t v502;
  int8x16_t v503;
  int16x8_t v504;
  int8x16_t v505;
  int8x16_t v506;
  int16x8_t v507;
  int32x4_t v508;
  uint32x4_t v509;
  uint32x4_t v510;
  int8x16_t v511;
  int16x8_t v512;
  int16x8_t v513;
  int16x8_t v514;
  int16x8_t v515;
  int16x8_t v516;
  int8x16_t v517;
  int16x8_t v518;
  int8x16_t v519;
  int32x4_t v520;
  uint32x4_t v521;
  uint32x4_t v522;
  int8x16_t v523;
  int16x8_t v524;
  int8x16_t v525;
  int8x16_t v526;
  int16x8_t v527;
  int32x4_t v528;
  uint32x4_t v529;
  uint32x4_t v530;
  int8x16_t v531;
  int16x8_t v532;
  int16x8_t v533;
  int16x8_t v534;
  int16x8_t v535;
  int16x8_t v536;
  int8x16_t v537;
  int16x8_t v538;
  int8x16_t v539;
  uint16x8_t v540;
  int32x4_t v541;
  int32x4_t v542;
  int32x4_t v543;
  uint32x4_t v544;
  uint32x4_t v545;
  int8x16_t v546;
  int16x8_t v547;
  int8x16_t v548;
  int8x16_t v549;
  int16x8_t v550;
  int32x4_t v551;
  uint32x4_t v552;
  uint32x4_t v553;
  int8x16_t v554;
  int16x8_t v555;
  int16x8_t v556;
  int16x8_t v557;
  int16x8_t v558;
  int16x8_t v559;
  int8x16_t v560;
  int16x8_t v561;
  int8x16_t v562;
  int32x4_t v563;
  uint32x4_t v564;
  uint32x4_t v565;
  int8x16_t v566;
  int16x8_t v567;
  int8x16_t v568;
  int8x16_t v569;
  int16x8_t v570;
  int32x4_t v571;
  uint32x4_t v572;
  uint32x4_t v573;
  int8x16_t v574;
  int16x8_t v575;
  int16x8_t v576;
  int16x8_t v577;
  int16x8_t v578;
  int8x16_t v579;
  int16x8_t v580;
  int8x16_t v581;
  int32x4_t v582;
  int32x4_t v583;
  uint32x4_t v584;
  uint32x4_t v585;
  int8x16_t v586;
  int16x8_t v587;
  int8x16_t v588;
  int8x16_t v589;
  int16x8_t v590;
  int32x4_t v591;
  uint32x4_t v592;
  uint32x4_t v593;
  int8x16_t v594;
  int16x8_t v595;
  int16x8_t v596;
  int16x8_t v597;
  int16x8_t v598;
  int16x8_t v599;
  int8x16_t v600;
  int16x8_t v601;
  int8x16_t v602;
  int32x4_t v603;
  uint32x4_t v604;
  uint32x4_t v605;
  int8x16_t v606;
  int16x8_t v607;
  int8x16_t v608;
  int8x16_t v609;
  int16x8_t v610;
  int32x4_t v611;
  uint32x4_t v612;
  uint32x4_t v613;
  int8x16_t v614;
  int16x8_t v615;
  int16x8_t v616;
  int16x8_t v617;
  int16x8_t v618;
  int16x8_t v619;
  int8x16_t v620;
  int16x8_t v621;
  int8x16_t v622;
  int32x4_t v623;
  uint32x4_t v624;
  uint32x4_t v625;
  int8x16_t v626;
  int16x8_t v627;
  int8x16_t v628;
  int8x16_t v629;
  int16x8_t v630;
  int32x4_t v631;
  uint32x4_t v632;
  uint32x4_t v633;
  int8x16_t v634;
  int16x8_t v635;
  int16x8_t v636;
  int16x8_t v637;
  int16x8_t v638;
  int16x8_t v639;
  int8x16_t v640;
  int16x8_t v641;
  int8x16_t v642;
  int32x4_t v643;
  uint32x4_t v644;
  uint32x4_t v645;
  int8x16_t v646;
  int16x8_t v647;
  int8x16_t v648;
  int8x16_t v649;
  int16x8_t v650;
  int32x4_t v651;
  uint32x4_t v652;
  uint32x4_t v653;
  int8x16_t v654;
  int16x8_t v655;
  int16x8_t v656;
  int16x8_t v657;
  int16x8_t v658;
  int16x8_t v659;
  int8x16_t v660;
  int16x8_t v661;
  int8x16_t v662;
  uint16x8_t v663;
  int32x4_t v664;
  int32x4_t v665;
  uint32x4_t v666;
  uint32x4_t v667;
  int8x16_t v668;
  int16x8_t v669;
  int8x16_t v670;
  int8x16_t v671;
  int16x8_t v672;
  int32x4_t v673;
  uint32x4_t v674;
  uint32x4_t v675;
  int8x16_t v676;
  int16x8_t v677;
  int16x8_t v678;
  int16x8_t v679;
  int16x8_t v680;
  int16x8_t v681;
  int8x16_t v682;
  int16x8_t v683;
  int8x16_t v684;
  int32x4_t v685;
  uint32x4_t v686;
  uint32x4_t v687;
  int8x16_t v688;
  int16x8_t v689;
  int8x16_t v690;
  int8x16_t v691;
  int16x8_t v692;
  int32x4_t v693;
  uint32x4_t v694;
  uint32x4_t v695;
  int8x16_t v696;
  int16x8_t v697;
  int16x8_t v698;
  int16x8_t v699;
  int16x8_t v700;
  int16x8_t v701;
  int8x16_t v702;
  int16x8_t v703;
  int8x16_t v704;
  int32x4_t v705;
  uint32x4_t v706;
  uint32x4_t v707;
  int8x16_t v708;
  int16x8_t v709;
  int8x16_t v710;
  int8x16_t v711;
  int16x8_t v712;
  int32x4_t v713;
  uint32x4_t v714;
  uint32x4_t v715;
  int8x16_t v716;
  int16x8_t v717;
  int16x8_t v718;
  int16x8_t v719;
  int16x8_t v720;
  int16x8_t v721;
  int8x16_t v722;
  int16x8_t v723;
  int8x16_t v724;
  int32x4_t v725;
  uint32x4_t v726;
  uint32x4_t v727;
  int8x16_t v728;
  int16x8_t v729;
  int8x16_t v730;
  int8x16_t v731;
  int16x8_t v732;
  int32x4_t v733;
  uint32x4_t v734;
  uint32x4_t v735;
  int8x16_t v736;
  int16x8_t v737;
  int8x16_t *v738;
  int16x8_t v739;
  int16x8_t v740;
  int8x16_t v741;
  int16x8_t v742;
  uint16x8_t v743;
  int32x4_t v744;
  int32x4_t v745;
  int32x4_t v746;
  uint32x4_t v747;
  uint32x4_t v748;
  int8x16_t v749;
  int16x8_t v750;
  uint64_t m;
  uint16x8_t v752;
  uint16x8_t v753;
  uint32x4_t v754;
  uint32x4_t v755;
  int8x16_t v756;
  int16x8_t v757;
  unint64_t v758;
  int16x8_t v759;
  int8x16_t *v760;
  int8x16_t v761;
  int8x16_t v762;
  int16x8_t v763;
  int16x8_t v764;
  unint64_t v765;
  int16x8_t v766;
  int8x16_t *v767;
  int8x16_t v768;
  int8x16_t v769;
  int16x8_t v770;
  int16x8_t v771;
  int16x8_t v772;
  int8x16_t *v773;
  int8x16_t v774;
  int8x16_t v775;
  int16x8_t v776;
  int16x8_t v777;
  uint64_t v778;
  __int128 *v779;
  int16x8_t v780;
  int32x4_t v781;
  uint32x4_t v782;
  int32x4_t v783;
  __int16 *v784;
  uint16x8_t v785;
  int32x4_t v786;
  int32x4_t v787;
  int8x16_t v788;
  int16x8_t v789;
  uint32x4_t v790;
  uint32x4_t v791;
  int8x16_t v792;
  int16x8_t v793;
  int8x16_t v794;
  int16x8_t v795;
  uint64_t v796;
  __int128 *v797;
  int8x16_t v798;
  int8x16_t v799;
  int8x16_t v800;
  int8x16_t v801;
  int8x16_t v802;
  int8x16_t v803;
  int8x16_t v804;
  int8x16_t v805;
  int8x16_t v806;
  int8x16_t v807;
  int8x16_t v808;
  uint16x8_t v809;
  __int8 *v810;
  int8x16_t v811;
  int16x8_t v812;
  int8x16_t v813;
  int16x8_t v814;
  int8x16_t v815;
  int v816;
  uint64_t v817;
  int16x8_t v818;
  uint64_t v819;
  uint64_t v820;
  int16x8_t v821;
  int16x8_t v822;
  uint16x4_t v823;
  int16x8_t v824;
  int16x8_t v825;
  int16x8_t v826;
  uint16x4_t v827;
  int16x8_t v828;
  unsigned int v829;
  int16x8_t v830;
  int8x16_t v831;
  int16x8_t v832;
  int8x16_t v833;
  int8x8_t v834;
  uint16x4_t v835;
  int32x4_t v836;
  int32x4_t v837;
  uint32x4_t v838;
  uint32x4_t v839;
  uint32x4_t v840;
  uint16x4_t v841;
  int8x16_t v842;
  int8x16_t v843;
  int16x8_t v844;
  int8x16_t v845;
  int16x8_t v846;
  uint32x4_t v847;
  uint32x4_t v848;
  int32x4_t v849;
  uint16x4_t v850;
  int8x16_t v851;
  int16x8_t v852;
  int32x4_t v853;
  int8x16_t v854;
  uint32x4_t v855;
  uint32x4_t v856;
  int8x16_t v857;
  int16x8_t v858;
  int8x16_t v859;
  int8x16_t v860;
  int8x16_t v861;
  int16x8_t v862;
  int16x8_t v863;
  int32x4_t v864;
  int32x4_t v865;
  uint32x4_t v866;
  uint32x4_t v867;
  int64x2_t v868;
  int64x2_t v869;
  int64x2_t v870;
  int16x8_t v871;
  int16x8_t v872;
  int8x16_t v873;
  int16x8_t v874;
  int8x16_t v875;
  int8x16_t v876;
  int8x16_t v877;
  int8x16_t v878;
  int16x8_t v879;
  int16x8_t v880;
  uint64_t v881;
  int16x8_t v882;
  int32x4_t v883;
  int16x8_t *v884;
  int16x8_t v885;
  int8x16_t v886;
  int16x8_t v887;
  int32x4_t v888;
  int32x4_t v889;
  int32x4_t v890;
  int32x4_t v891;
  int32x4_t v892;
  uint32x4_t v893;
  uint32x4_t v894;
  uint32x4_t v895;
  int8x16_t v896;
  int16x8_t v897;
  uint64_t v898;
  uint16x8_t v899;
  int8x16_t v900;
  int16x8_t v901;
  int16x8_t v902;
  int8x16_t v903;
  uint16x8_t v904;
  int32x4_t v905;
  uint32x4_t v906;
  uint32x4_t v907;
  uint32x4_t v908;
  int32x4_t v909;
  int8x16_t v910;
  int16x8_t v911;
  int8x16_t v912;
  int8x16_t v913;
  int16x8_t v914;
  uint32x4_t v915;
  uint32x4_t v916;
  int8x16_t v917;
  int16x8_t v918;
  uint16x8_t v919;
  int8x16_t v920;
  int16x8_t v921;
  int8x16_t v922;
  uint16x8_t v923;
  int32x4_t v924;
  uint32x4_t v925;
  uint32x4_t v926;
  int8x16_t v927;
  int16x8_t v928;
  int8x16_t v929;
  int8x16_t v930;
  int16x8_t v931;
  uint32x4_t v932;
  uint32x4_t v933;
  int8x16_t v934;
  int16x8_t v935;
  uint16x8_t v936;
  int8x16_t v937;
  int16x8_t v938;
  int8x16_t v939;
  int32x4_t v940;
  uint32x4_t v941;
  uint32x4_t v942;
  int8x16_t v943;
  int16x8_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int16x8_t v947;
  uint32x4_t v948;
  uint32x4_t v949;
  int8x16_t v950;
  int16x8_t v951;
  uint16x8_t v952;
  int8x16_t v953;
  int16x8_t v954;
  int8x16_t v955;
  uint16x8_t v956;
  int32x4_t v957;
  uint32x4_t v958;
  uint32x4_t v959;
  int8x16_t v960;
  int16x8_t v961;
  int8x16_t v962;
  int8x16_t v963;
  int16x8_t v964;
  uint32x4_t v965;
  uint32x4_t v966;
  int8x16_t v967;
  int16x8_t v968;
  uint16x8_t v969;
  int8x16_t v970;
  int16x8_t v971;
  int8x16_t v972;
  uint16x8_t v973;
  int32x4_t v974;
  uint32x4_t v975;
  uint32x4_t v976;
  int8x16_t v977;
  int16x8_t v978;
  int8x16_t v979;
  int8x16_t v980;
  int16x8_t v981;
  uint32x4_t v982;
  uint32x4_t v983;
  int8x16_t v984;
  int16x8_t v985;
  uint16x8_t v986;
  int8x16_t v987;
  int16x8_t v988;
  uint16x8_t v989;
  int8x16_t v990;
  int32x4_t v991;
  uint32x4_t v992;
  uint32x4_t v993;
  int8x16_t v994;
  int16x8_t v995;
  int8x16_t v996;
  int8x16_t v997;
  int16x8_t v998;
  uint32x4_t v999;
  uint32x4_t v1000;
  int8x16_t v1001;
  int16x8_t v1002;
  uint16x8_t v1003;
  int8x16_t v1004;
  int16x8_t v1005;
  int8x16_t v1006;
  uint16x8_t v1007;
  int32x4_t v1008;
  uint32x4_t v1009;
  uint32x4_t v1010;
  int8x16_t v1011;
  int16x8_t v1012;
  int8x16_t v1013;
  int8x16_t v1014;
  int16x8_t v1015;
  uint32x4_t v1016;
  uint32x4_t v1017;
  int8x16_t v1018;
  int16x8_t v1019;
  uint16x8_t v1020;
  int8x16_t v1021;
  int16x8_t v1022;
  int8x16_t v1023;
  uint16x8_t v1024;
  int32x4_t v1025;
  uint32x4_t v1026;
  uint32x4_t v1027;
  int8x16_t v1028;
  int16x8_t v1029;
  int8x16_t v1030;
  int8x16_t v1031;
  int16x8_t v1032;
  uint32x4_t v1033;
  uint32x4_t v1034;
  int8x16_t v1035;
  int16x8_t v1036;
  uint16x8_t v1037;
  int8x16_t v1038;
  int16x8_t v1039;
  int8x16_t v1040;
  uint16x8_t v1041;
  int8x16_t v1042;
  int32x4_t v1043;
  uint32x4_t v1044;
  uint32x4_t v1045;
  int8x16_t v1046;
  int16x8_t v1047;
  int8x16_t v1048;
  int8x16_t v1049;
  int16x8_t v1050;
  uint32x4_t v1051;
  uint32x4_t v1052;
  int8x16_t v1053;
  int16x8_t v1054;
  uint16x8_t v1055;
  int8x16_t v1056;
  int16x8_t v1057;
  int8x16_t v1058;
  uint32x4_t v1059;
  uint32x4_t v1060;
  int8x16_t v1061;
  int16x8_t v1062;
  int8x16_t v1063;
  int8x16_t v1064;
  int16x8_t v1065;
  int32x4_t v1066;
  uint32x4_t v1067;
  uint32x4_t v1068;
  int8x16_t v1069;
  int16x8_t v1070;
  uint16x8_t v1071;
  int8x16_t v1072;
  int16x8_t v1073;
  int8x16_t v1074;
  uint16x8_t v1075;
  int32x4_t v1076;
  uint32x4_t v1077;
  uint32x4_t v1078;
  int8x16_t v1079;
  int16x8_t v1080;
  int8x16_t v1081;
  int8x16_t v1082;
  int16x8_t v1083;
  uint32x4_t v1084;
  uint32x4_t v1085;
  int8x16_t v1086;
  int16x8_t v1087;
  uint16x8_t v1088;
  int8x16_t v1089;
  int16x8_t v1090;
  int8x16_t v1091;
  uint32x4_t v1092;
  uint32x4_t v1093;
  int8x16_t v1094;
  int16x8_t v1095;
  int8x16_t v1096;
  int8x16_t v1097;
  int16x8_t v1098;
  int32x4_t v1099;
  uint32x4_t v1100;
  uint32x4_t v1101;
  int8x16_t v1102;
  int16x8_t v1103;
  uint16x8_t v1104;
  int8x16_t v1105;
  int16x8_t v1106;
  int8x16_t v1107;
  uint16x8_t v1108;
  int32x4_t v1109;
  uint32x4_t v1110;
  uint32x4_t v1111;
  int8x16_t v1112;
  int16x8_t v1113;
  int8x16_t v1114;
  int8x16_t v1115;
  int16x8_t v1116;
  uint32x4_t v1117;
  uint32x4_t v1118;
  int8x16_t v1119;
  int16x8_t v1120;
  uint16x8_t v1121;
  int8x16_t v1122;
  int16x8_t v1123;
  int8x16_t v1124;
  uint32x4_t v1125;
  uint32x4_t v1126;
  int8x16_t v1127;
  int16x8_t v1128;
  int8x16_t v1129;
  int8x16_t v1130;
  int16x8_t v1131;
  int32x4_t v1132;
  uint32x4_t v1133;
  uint32x4_t v1134;
  int8x16_t v1135;
  int16x8_t v1136;
  uint16x8_t v1137;
  int8x16_t v1138;
  int16x8_t v1139;
  int8x16_t v1140;
  uint16x8_t v1141;
  int8x16_t v1142;
  int32x4_t v1143;
  uint32x4_t v1144;
  uint32x4_t v1145;
  int8x16_t v1146;
  int16x8_t v1147;
  int8x16_t v1148;
  int8x16_t v1149;
  int16x8_t v1150;
  uint32x4_t v1151;
  uint32x4_t v1152;
  int8x16_t v1153;
  int16x8_t v1154;
  uint16x8_t v1155;
  int8x16_t v1156;
  int16x8_t v1157;
  int8x16_t v1158;
  uint32x4_t v1159;
  uint32x4_t v1160;
  int8x16_t v1161;
  int16x8_t v1162;
  int8x16_t v1163;
  int8x16_t v1164;
  int16x8_t v1165;
  int32x4_t v1166;
  uint32x4_t v1167;
  uint32x4_t v1168;
  int8x16_t v1169;
  int16x8_t v1170;
  uint16x8_t v1171;
  int8x16_t v1172;
  int16x8_t v1173;
  int8x16_t v1174;
  int32x4_t v1175;
  uint32x4_t v1176;
  uint32x4_t v1177;
  int8x16_t v1178;
  int16x8_t v1179;
  int8x16_t v1180;
  int8x16_t v1181;
  int16x8_t v1182;
  uint32x4_t v1183;
  uint32x4_t v1184;
  int8x16_t v1185;
  int16x8_t v1186;
  uint16x8_t v1187;
  int8x16_t v1188;
  int16x8_t v1189;
  int8x16_t v1190;
  uint32x4_t v1191;
  uint32x4_t v1192;
  int8x16_t v1193;
  int16x8_t v1194;
  int8x16_t v1195;
  int8x16_t v1196;
  int16x8_t v1197;
  uint32x4_t v1198;
  uint32x4_t v1199;
  int8x16_t v1200;
  int16x8_t v1201;
  uint16x8_t v1202;
  int8x16_t v1203;
  int16x8_t v1204;
  int8x16_t v1205;
  uint32x4_t v1206;
  uint32x4_t v1207;
  int8x16_t v1208;
  int16x8_t v1209;
  int8x16_t v1210;
  int8x16_t v1211;
  int16x8_t v1212;
  uint32x4_t v1213;
  uint32x4_t v1214;
  int8x16_t v1215;
  int16x8_t v1216;
  uint16x8_t v1217;
  int8x16_t v1218;
  int16x8_t v1219;
  int8x16_t v1220;
  uint32x4_t v1221;
  uint32x4_t v1222;
  int8x16_t v1223;
  int16x8_t v1224;
  int8x16_t v1225;
  int8x16_t v1226;
  int16x8_t v1227;
  int32x4_t v1228;
  uint32x4_t v1229;
  uint32x4_t v1230;
  int8x16_t v1231;
  int16x8_t v1232;
  uint16x8_t v1233;
  int8x16_t v1234;
  int16x8_t v1235;
  int8x16_t v1236;
  uint16x8_t v1237;
  int32x4_t v1238;
  uint32x4_t v1239;
  uint32x4_t v1240;
  int8x16_t v1241;
  int16x8_t v1242;
  int8x16_t v1243;
  int8x16_t v1244;
  int16x8_t v1245;
  uint32x4_t v1246;
  uint32x4_t v1247;
  int8x16_t v1248;
  int16x8_t v1249;
  uint16x8_t v1250;
  int8x16_t v1251;
  int16x8_t v1252;
  int8x16_t v1253;
  uint32x4_t v1254;
  uint32x4_t v1255;
  int8x16_t v1256;
  int16x8_t v1257;
  int8x16_t v1258;
  int8x16_t v1259;
  int16x8_t v1260;
  uint32x4_t v1261;
  uint32x4_t v1262;
  int8x16_t v1263;
  int16x8_t v1264;
  uint16x8_t v1265;
  int8x16_t v1266;
  int16x8_t v1267;
  int8x16_t v1268;
  uint32x4_t v1269;
  uint32x4_t v1270;
  int8x16_t v1271;
  int16x8_t v1272;
  int8x16_t v1273;
  int8x16_t v1274;
  int16x8_t v1275;
  uint32x4_t v1276;
  uint32x4_t v1277;
  int8x16_t v1278;
  int16x8_t v1279;
  uint16x8_t v1280;
  int8x16_t v1281;
  int16x8_t v1282;
  int8x16_t v1283;
  uint32x4_t v1284;
  uint32x4_t v1285;
  int8x16_t v1286;
  int16x8_t v1287;
  int8x16_t v1288;
  int8x16_t v1289;
  int16x8_t v1290;
  int32x4_t v1291;
  uint32x4_t v1292;
  uint32x4_t v1293;
  int8x16_t v1294;
  int16x8_t v1295;
  int8x16_t *v1296;
  int16x8_t v1297;
  int16x8_t v1298;
  int8x16_t v1299;
  int16x8_t v1300;
  uint16x8_t v1301;
  int32x4_t v1302;
  int32x4_t v1303;
  int32x4_t v1304;
  uint32x4_t v1305;
  uint32x4_t v1306;
  int8x16_t v1307;
  int16x8_t v1308;
  uint64_t v1309;
  uint16x8_t v1310;
  uint32x4_t v1311;
  int32x4_t v1312;
  int16x8_t v1313;
  uint16x8_t v1314;
  uint32x4_t v1315;
  uint32x4_t v1316;
  int8x16_t v1317;
  int16x8_t v1318;
  uint64_t v1319;
  int16x8_t v1320;
  int8x16_t *v1321;
  int8x16_t v1322;
  int8x16_t v1323;
  int16x8_t v1324;
  int16x8_t v1325;
  uint64_t v1326;
  int8x16_t v1327;
  int8x16_t v1328;
  uint8x16_t v1329;
  uint8x16_t v1330;
  uint8x16_t v1331;
  uint8x16_t v1332;
  int8x16_t v1333;
  uint8x16_t v1334;
  uint8x16_t v1335;
  uint8x16_t v1336;
  uint8x16_t v1337;
  int8x16_t v1338;
  int8x16_t v1339;
  int8x16_t v1340;
  int8x16_t v1341;
  uint64_t v1342;
  int16x8_t v1343;
  int16x8_t v1344;
  int8x16_t v1345;
  int8x16_t v1346;
  int8x16_t v1347;
  int8x16_t v1348;
  int8x16_t v1349;
  uint16x8_t v1350;
  uint16x8_t v1351;
  int16x8_t v1352;
  int8x16_t v1353;
  uint16x8_t v1354;
  uint64_t v1355;
  uint16x8_t v1356;
  int16x8_t v1357;
  int8x16_t *v1358;
  int8x16_t v1359;
  int8x16_t v1360;
  int16x8_t v1361;
  int16x8_t v1362;
  uint64_t v1363;
  uint32x4_t v1364;
  int32x4_t v1365;
  uint32x4_t v1366;
  int8x16_t v1367;
  uint32x4_t v1368;
  uint16x8_t v1369;
  uint32x4_t v1370;
  uint32x4_t v1371;
  int64x2_t v1372;
  int64x2_t v1373;
  int64x2_t v1374;
  int64x2_t v1375;
  uint32x4_t v1376;
  uint32x4_t v1377;
  uint32x4_t v1378;
  int8x16_t v1379;
  uint64x2_t v1380;
  uint64x2_t v1381;
  uint32x4_t v1382;
  uint64x2_t v1383;
  int64x2_t v1384;
  int64x2_t v1385;
  int64x2_t v1386;
  uint32x4_t v1387;
  int64x2_t v1388;
  int64x2_t v1389;
  uint32x4_t v1390;
  int64x2_t v1391;
  uint32x4_t v1392;
  int32x4_t v1393;
  uint32x4_t v1394;
  int8x16_t v1395;
  uint32x4_t v1396;
  uint16x8_t v1397;
  uint32x4_t v1398;
  uint32x4_t v1399;
  int64x2_t v1400;
  int64x2_t v1401;
  int64x2_t v1402;
  int64x2_t v1403;
  uint32x4_t v1404;
  uint32x4_t v1405;
  uint32x4_t v1406;
  int8x16_t v1407;
  uint64x2_t v1408;
  uint64x2_t v1409;
  uint32x4_t v1410;
  uint64x2_t v1411;
  int64x2_t v1412;
  int64x2_t v1413;
  int64x2_t v1414;
  uint32x4_t v1415;
  int64x2_t v1416;
  int64x2_t v1417;
  uint32x4_t v1418;
  int64x2_t v1419;
  uint32x4_t v1420;
  int32x4_t v1421;
  uint32x4_t v1422;
  int8x16_t v1423;
  uint32x4_t v1424;
  uint16x8_t v1425;
  uint32x4_t v1426;
  uint32x4_t v1427;
  int64x2_t v1428;
  int64x2_t v1429;
  int64x2_t v1430;
  int64x2_t v1431;
  uint32x4_t v1432;
  uint32x4_t v1433;
  uint32x4_t v1434;
  int8x16_t v1435;
  uint64x2_t v1436;
  uint64x2_t v1437;
  uint32x4_t v1438;
  uint64x2_t v1439;
  int64x2_t v1440;
  int64x2_t v1441;
  int64x2_t v1442;
  uint32x4_t v1443;
  int64x2_t v1444;
  int64x2_t v1445;
  uint32x4_t v1446;
  int64x2_t v1447;
  uint64_t v1448;
  uint32x4_t v1449;
  int32x4_t v1450;
  uint32x4_t v1451;
  int8x16_t v1452;
  uint32x4_t v1453;
  int8x16_t v1454;
  uint16x8_t v1455;
  uint32x4_t v1456;
  uint32x4_t v1457;
  int64x2_t v1458;
  int64x2_t v1459;
  int64x2_t v1460;
  int64x2_t v1461;
  uint32x4_t v1462;
  uint32x4_t v1463;
  uint32x4_t v1464;
  int8x16_t v1465;
  uint64x2_t v1466;
  uint64x2_t v1467;
  uint32x4_t v1468;
  uint64x2_t v1469;
  int64x2_t v1470;
  int64x2_t v1471;
  int64x2_t v1472;
  uint32x4_t v1473;
  int64x2_t v1474;
  int64x2_t v1475;
  uint32x4_t v1476;
  int64x2_t v1477;
  uint64_t v1478;
  int v1479;
  int v1480;
  _BYTE *v1481;
  uint64_t result;
  unsigned int v1483;
  int v1484;
  int v1485;
  uint16x8_t v1486;
  uint16x8_t v1487;
  uint16x8_t v1488;
  int8x16_t *v1489;
  uint16x8_t v1490;
  _BYTE *v1491;
  uint32x4_t v1492;
  uint16x8_t v1493;
  int32x4_t v1494;
  uint16x8_t v1495;
  uint16x8_t v1496;
  int32x4_t v1497;
  uint16x8_t v1498;
  int16x8_t v1499;
  int32x4_t v1500;
  uint16x8_t v1501;
  int16x8_t v1502;
  int16x8_t v1503;
  uint16x8_t v1504;
  int8x16_t v1505;
  uint16x8_t v1506;
  unsigned __int32 v1507;
  uint16x8_t v1508;
  int16x8_t v1509;
  uint16x8_t v1510;
  _OWORD v1511[14];
  uint16x8_t v1512;
  uint16x8_t v1513;
  int16x8_t v1514;
  int16x8_t v1515;
  int16x8_t v1516;
  int16x8_t v1517;
  int16x8_t v1518;
  int16x8_t v1519;
  int16x8_t v1520;
  int16x8_t v1521;
  int16x8_t v1522;
  uint16x8_t v1523;
  uint16x8_t v1524;
  int16x8_t v1525;
  uint16x8_t v1526;
  uint16x8_t v1527;
  uint16x8_t v1528;
  uint16x8_t v1529;
  _QWORD v1530[27];
  __int128 v1531;
  _OWORD v1532[31];
  __int128 v1533;
  _OWORD v1534[96];
  int16x8_t v1535[96];
  char v1536;
  _OWORD v1537[2];
  _BYTE v1538[16];
  int16x8_t v1539;
  int16x8_t v1540;
  int16x8_t v1541;
  int8x16_t v1542;
  int16x8_t v1543;
  int8x16_t v1544;
  int16x8_t v1545;
  int8x16_t v1546;
  int16x8_t v1547;
  int8x16_t v1548;
  int16x8_t v1549;
  int8x16_t v1550;
  int16x8_t v1551;
  int8x16_t v1552;
  int16x8_t v1553;
  int8x16_t v1554;
  int16x8_t v1555;
  int16x8_t v1556;
  int16x8_t v1557;
  int8x16_t v1558;
  int16x8_t v1559;
  int8x16_t v1560;
  int16x8_t v1561;
  int8x16_t v1562;
  int16x8_t v1563;
  int8x16_t v1564;
  int16x8_t v1565;
  int8x16_t v1566;
  int16x8_t v1567;
  int8x16_t v1568;
  int16x8_t v1569;
  int8x16_t v1570;
  uint64_t v1571;
  uint64_t v1572;
  int8x16x2_t v1573;
  int8x16x2_t v1574;
  int8x16x2_t v1575;
  int8x16x2_t v1576;
  int16x8x2_t v1577;
  int16x8x2_t v1578;
  int16x8x2_t v1579;
  int8x16x2_t v1580;
  int8x16x2_t v1581;
  int8x16x2_t v1582;
  int8x16x2_t v1583;
  int8x16x2_t v1584;
  int16x8x2_t v1585;
  int16x8x2_t v1586;
  int16x8x2_t v1587;
  int16x8x2_t v1588;
  int8x16x2_t v1589;
  int8x16x2_t v1590;
  int8x16x2_t v1591;
  int8x16x2_t v1592;
  int8x16x2_t v1593;
  int8x16x2_t v1594;
  int8x16x2_t v1595;
  int8x16x2_t v1596;
  int8x16x2_t v1597;
  int16x8x2_t v1598;
  int8x16x2_t v1599;
  int8x16x2_t v1600;
  int8x16x2_t v1601;
  int8x16x2_t v1602;
  int8x16x2_t v1603;
  int8x16x2_t v1604;
  int16x8x4_t v1605;
  int16x8x4_t v1606;
  int16x8x4_t v1607;
  int16x8x4_t v1608;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v1489 = v5;
  v7 = v6;
  v1491 = (_BYTE *)v2;
  v1571 = *MEMORY[0x24BDAC8D0];
  v1536 = 0;
  memset(v1535, 0, 512);
  vector_generate_secret_eta_2(v1535[0].i16, &v1536, v3);
  vector_ntt(v1535);
  memset(v1534, 0, 512);
  vector_generate_secret_eta_2((__int16 *)v1534, &v1536, v4);
  v8 = v4[1];
  v1537[0] = *v4;
  v1537[1] = v8;
  v1538[0] = v1536;
  v1533 = 0u;
  memset(v1532, 0, sizeof(v1532));
  v1531 = 0u;
  memset(&v1530[1], 0, 200);
  v1530[0] = 3;
  v1530[26] = 136;
  BORINGSSL_keccak_absorb((uint64_t)v1530, (char *)v1537, 0x21uLL);
  BORINGSSL_keccak_squeeze(v1530, v1539.i8, 0x80uLL);
  v9 = 0;
  v10 = (__int16 *)v1532;
  v11.i64[0] = 0xD000D000D000D00;
  v11.i64[1] = 0xD000D000D000D00;
  v12 = vdupq_n_s16(0xD01u);
  do
  {
    v13 = *(int8x16_t *)((char *)&v1539 + v9);
    v14 = vqtbl1q_s8(v13, (int8x16_t)xmmword_208F04F30);
    v15 = vqtbl1q_s8(v13, (int8x16_t)xmmword_208F04F20);
    v16 = vqtbl1q_s8(v13, (int8x16_t)xmmword_208F04F50);
    v17 = (uint32x4_t)vqtbl1q_s8(v13, (int8x16_t)xmmword_208F04F40);
    *(int16x4_t *)v16.i8 = vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v16 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v16, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v16, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v16, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v12.i8);
    *(int16x4_t *)v14.i8 = vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v14 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v14, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v14, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v14, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v12.i8);
    v18 = (int8x16_t)vshrq_n_u8((uint8x16_t)v13, 4uLL);
    v16.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v17 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v17, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v17, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v17, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v12.i8);
    v19 = (uint32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_208F04F20);
    v20 = (uint32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_208F04F30);
    v14.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vaddq_s32(vsraq_n_s32(vsraq_n_s32((int32x4_t)(*(_OWORD *)&v15 & __PAIR128__(0xFFFFFF01FFFFFF01, 0xFFFFFF01FFFFFF01)), vshlq_n_s32((int32x4_t)v15, 0x1CuLL), 0x1FuLL), vshlq_n_s32((int32x4_t)v15, 0x1DuLL), 0x1FuLL), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v15, 1uLL) & __PAIR128__(0xFFFFFF81FFFFFF81, 0xFFFFFF81FFFFFF81)))), *(int16x4_t *)v12.i8);
    *(int16x4_t *)v15.i8 = vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v20 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v20, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v20, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v20, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v12.i8);
    v15.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v19 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v19, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v19, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v19, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v12.i8);
    v21 = vmaxq_s16((int16x8_t)v15, v12);
    v22 = (uint32x4_t)vqtbl1q_s8(v18, (int8x16_t)xmmword_208F04F40);
    v23 = vqtbl1q_s8(v18, (int8x16_t)xmmword_208F04F50);
    v1598.val[0] = (int16x8_t)vorrq_s8(vandq_s8(v14, (int8x16_t)vcgtq_u16((uint16x8_t)v12, (uint16x8_t)v14)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v14, v12), v11));
    *(int16x4_t *)v23.i8 = vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v23 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32((uint32x4_t)v23, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v23, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v23, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v12.i8);
    v23.u64[1] = (unint64_t)vadd_s16(vmovn_s32(vsraq_n_s32(vaddq_s32(vsubq_s32((int32x4_t)(*(_OWORD *)&v22 & __PAIR128__(0xFFFFFFF1FFFFFFF1, 0xFFFFFFF1FFFFFFF1)), (int32x4_t)vshrq_n_u32(v22, 3uLL)), (int32x4_t)(*(_OWORD *)&vshrq_n_u32(v22, 1uLL) & __PAIR128__(0xFFFFFFF9FFFFFFF9, 0xFFFFFFF9FFFFFFF9))), vshlq_n_s32((int32x4_t)v22, 0x1DuLL), 0x1FuLL)), *(int16x4_t *)v12.i8);
    v24 = vandq_s8(v15, (int8x16_t)vcgtq_u16((uint16x8_t)v12, (uint16x8_t)v15));
    v1585.val[0] = (int16x8_t)vorrq_s8(vandq_s8(v16, (int8x16_t)vcgtq_u16((uint16x8_t)v12, (uint16x8_t)v16)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v16, v12), v11));
    v1585.val[1] = (int16x8_t)vorrq_s8(vandq_s8(v23, (int8x16_t)vcgtq_u16((uint16x8_t)v12, (uint16x8_t)v23)), (int8x16_t)vaddq_s16(vmaxq_s16((int16x8_t)v23, v12), v11));
    v25 = v10 + 32;
    vst2q_s16(v10, v1585);
    v26 = v10 + 16;
    v1598.val[1] = (int16x8_t)vorrq_s8(v24, (int8x16_t)vaddq_s16(v21, v11));
    vst2q_s16(v26, v1598);
    v9 += 16;
    v10 = v25;
  }
  while (v9 != 128);
  v27 = v7 + 1600;
  bzero(v1530, 0x600uLL);
  v28 = 0;
  v29 = 0;
  v30 = v7 + 2112;
  v31 = v7 + 2624;
  v32 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v33.i64[0] = 0xF2000000F2;
  v33.i64[1] = 0xF2000000F2;
  v34.i64[0] = 0xD000D000D000D00;
  v34.i64[1] = 0xD000D000D000D00;
  do
  {
    v35 = 0;
    v1570 = 0uLL;
    v1569 = 0uLL;
    v1568 = 0uLL;
    v1567 = 0uLL;
    v1566 = 0uLL;
    v1565 = 0uLL;
    v1564 = 0uLL;
    v1563 = 0uLL;
    v1562 = 0uLL;
    v1561 = 0uLL;
    v1560 = 0uLL;
    v1559 = 0uLL;
    v1558 = 0uLL;
    v1557 = 0uLL;
    v1556 = 0uLL;
    v1555 = 0uLL;
    v1554 = 0uLL;
    v1553 = 0uLL;
    v1552 = 0uLL;
    v1551 = 0uLL;
    v1550 = 0uLL;
    v1549 = 0uLL;
    v1548 = 0uLL;
    v1547 = 0uLL;
    v1546 = 0uLL;
    v1545 = 0uLL;
    v1544 = 0uLL;
    v1543 = 0uLL;
    v1542 = 0uLL;
    v1541 = 0uLL;
    v36 = &kModRoots;
    v1540 = 0uLL;
    v1539 = 0uLL;
    do
    {
      v37 = (const __int16 *)(v27 + v35 * 2);
      v1577 = vld2q_s16(v37);
      v38 = &v1535[v35 / 8];
      v1586 = vld2q_s16(v38->i16);
      v39 = vmull_u16(*(uint16x4_t *)v1586.val[1].i8, *(uint16x4_t *)v1577.val[1].i8);
      v40 = vmull_high_u16((uint16x8_t)v1586.val[1], (uint16x8_t)v1577.val[1]);
      v41 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v39.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v39, v32), 0x18uLL), v33), *(uint16x4_t *)v1586.val[1].i8, *(uint16x4_t *)v1577.val[1].i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v40.i8,
                                                                     *(uint32x2_t *)v32.i8),
                                                        0x18uLL),
                                                      (int64x2_t)vmull_high_u32(v40, v32),
                                                      0x18uLL),
                                                    v33),
                                      (uint16x8_t)v1586.val[1],
                                      (uint16x8_t)v1577.val[1]));
      v42 = vaddq_s16((int16x8_t)v41, v34);
      v43 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v42), v41), (int8x16_t)vmaxq_s16(v42, (int16x8_t)0));
      v44 = (uint16x8_t)*v36++;
      v45 = vmull_high_u16(v43, v44);
      v46 = vmlal_u16(vmull_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v44.i8), *(uint16x4_t *)v1586.val[0].i8, *(uint16x4_t *)v1577.val[0].i8);
      v47 = vmlal_high_u16(v45, (uint16x8_t)v1586.val[0], (uint16x8_t)v1577.val[0]);
      v48 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v46, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v46.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v46, v32), 0x18uLL), v33), (int16x8_t)vmlaq_s32((int32x4_t)v47, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v47.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v47, v32), 0x18uLL), v33));
      v49 = vaddq_s16((int16x8_t)v48, v34);
      v50 = vmlal_u16(vmull_u16(*(uint16x4_t *)v1586.val[1].i8, *(uint16x4_t *)v1577.val[0].i8), *(uint16x4_t *)v1577.val[1].i8, *(uint16x4_t *)v1586.val[0].i8);
      v51 = vmlal_high_u16(vmull_high_u16((uint16x8_t)v1586.val[1], (uint16x8_t)v1577.val[0]), (uint16x8_t)v1577.val[1], (uint16x8_t)v1586.val[0]);
      v52 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v50, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v50.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v50, v32), 0x18uLL), v33), (int16x8_t)vmlaq_s32((int32x4_t)v51, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v51.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v51, v32), 0x18uLL), v33));
      v53 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v49), v48), (int8x16_t)vmaxq_s16(v49, (int16x8_t)0));
      v1577.val[1] = vaddq_s16((int16x8_t)v52, v34);
      v1577.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1577.val[1]), v52), (int8x16_t)vmaxq_s16(v1577.val[1], (int16x8_t)0));
      v54 = &v1539.i16[v35];
      vst2q_s16(v54, v1577);
      v35 += 16;
    }
    while (v35 != 256);
    v55 = &v1530[v28];
    for (i = 2; i != 66; i += 4)
    {
      v57 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v1538[i * 8], *(int16x8_t *)&v55[i - 2]);
      v58 = (int8x16_t)vaddq_s16(*(int16x8_t *)((char *)&v1539 + i * 8), *(int16x8_t *)&v55[i]);
      v59 = vaddq_s16((int16x8_t)v57, v34);
      v60 = vaddq_s16((int16x8_t)v58, v34);
      *(int8x16_t *)&v55[i - 2] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v59), v57), (int8x16_t)vmaxq_s16(v59, (int16x8_t)0));
      *(int8x16_t *)&v55[i] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v60), v58), (int8x16_t)vmaxq_s16(v60, (int16x8_t)0));
    }
    v61 = 0;
    v1570 = 0uLL;
    v1569 = 0uLL;
    v1568 = 0uLL;
    v1567 = 0uLL;
    v1566 = 0uLL;
    v1565 = 0uLL;
    v1564 = 0uLL;
    v1563 = 0uLL;
    v1562 = 0uLL;
    v1561 = 0uLL;
    v1560 = 0uLL;
    v1559 = 0uLL;
    v1558 = 0uLL;
    v1557 = 0uLL;
    v1556 = 0uLL;
    v1555 = 0uLL;
    v1554 = 0uLL;
    v1553 = 0uLL;
    v1552 = 0uLL;
    v1551 = 0uLL;
    v1550 = 0uLL;
    v1549 = 0uLL;
    v1548 = 0uLL;
    v1547 = 0uLL;
    v1546 = 0uLL;
    v1545 = 0uLL;
    v1544 = 0uLL;
    v1543 = 0uLL;
    v1542 = 0uLL;
    v1541 = 0uLL;
    v62 = &kModRoots;
    v1540 = 0uLL;
    v1539 = 0uLL;
    do
    {
      v63 = (const __int16 *)(v30 + v61 * 2);
      v1578 = vld2q_s16(v63);
      v64 = &v1535[v61 / 8 + 32];
      v1587 = vld2q_s16(v64->i16);
      v65 = vmull_u16(*(uint16x4_t *)v1587.val[1].i8, *(uint16x4_t *)v1578.val[1].i8);
      v66 = vmull_high_u16((uint16x8_t)v1587.val[1], (uint16x8_t)v1578.val[1]);
      v67 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v65.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v65, v32), 0x18uLL), v33), *(uint16x4_t *)v1587.val[1].i8, *(uint16x4_t *)v1578.val[1].i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v66.i8,
                                                                     *(uint32x2_t *)v32.i8),
                                                        0x18uLL),
                                                      (int64x2_t)vmull_high_u32(v66, v32),
                                                      0x18uLL),
                                                    v33),
                                      (uint16x8_t)v1587.val[1],
                                      (uint16x8_t)v1578.val[1]));
      v68 = vaddq_s16((int16x8_t)v67, v34);
      v69 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v68), v67), (int8x16_t)vmaxq_s16(v68, (int16x8_t)0));
      v70 = (uint16x8_t)*v62++;
      v71 = vmull_high_u16(v69, v70);
      v72 = vmlal_u16(vmull_u16(*(uint16x4_t *)v69.i8, *(uint16x4_t *)v70.i8), *(uint16x4_t *)v1587.val[0].i8, *(uint16x4_t *)v1578.val[0].i8);
      v73 = vmlal_high_u16(v71, (uint16x8_t)v1587.val[0], (uint16x8_t)v1578.val[0]);
      v74 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v72, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v72.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v72, v32), 0x18uLL), v33), (int16x8_t)vmlaq_s32((int32x4_t)v73, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v73.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v73, v32), 0x18uLL), v33));
      v75 = vaddq_s16((int16x8_t)v74, v34);
      v76 = vmlal_u16(vmull_u16(*(uint16x4_t *)v1587.val[1].i8, *(uint16x4_t *)v1578.val[0].i8), *(uint16x4_t *)v1578.val[1].i8, *(uint16x4_t *)v1587.val[0].i8);
      v77 = vmlal_high_u16(vmull_high_u16((uint16x8_t)v1587.val[1], (uint16x8_t)v1578.val[0]), (uint16x8_t)v1578.val[1], (uint16x8_t)v1587.val[0]);
      v78 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v76, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v76.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v76, v32), 0x18uLL), v33), (int16x8_t)vmlaq_s32((int32x4_t)v77, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v77.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v77, v32), 0x18uLL), v33));
      v79 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v75), v74), (int8x16_t)vmaxq_s16(v75, (int16x8_t)0));
      v1578.val[1] = vaddq_s16((int16x8_t)v78, v34);
      v1578.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1578.val[1]), v78), (int8x16_t)vmaxq_s16(v1578.val[1], (int16x8_t)0));
      v80 = &v1539.i16[v61];
      vst2q_s16(v80, v1578);
      v61 += 16;
    }
    while (v61 != 256);
    v81 = &v1530[v28];
    for (j = 2; j != 66; j += 4)
    {
      v83 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v1538[j * 8], *(int16x8_t *)&v81[j - 2]);
      v84 = (int8x16_t)vaddq_s16(*(int16x8_t *)((char *)&v1539 + j * 8), *(int16x8_t *)&v81[j]);
      v85 = vaddq_s16((int16x8_t)v83, v34);
      v86 = vaddq_s16((int16x8_t)v84, v34);
      *(int8x16_t *)&v81[j - 2] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v85), v83), (int8x16_t)vmaxq_s16(v85, (int16x8_t)0));
      *(int8x16_t *)&v81[j] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v86), v84), (int8x16_t)vmaxq_s16(v86, (int16x8_t)0));
    }
    v87 = 0;
    v1570 = 0uLL;
    v1569 = 0uLL;
    v1568 = 0uLL;
    v1567 = 0uLL;
    v1566 = 0uLL;
    v1565 = 0uLL;
    v1564 = 0uLL;
    v1563 = 0uLL;
    v1562 = 0uLL;
    v1561 = 0uLL;
    v1560 = 0uLL;
    v1559 = 0uLL;
    v1558 = 0uLL;
    v1557 = 0uLL;
    v1556 = 0uLL;
    v1555 = 0uLL;
    v1554 = 0uLL;
    v1553 = 0uLL;
    v1552 = 0uLL;
    v1551 = 0uLL;
    v1550 = 0uLL;
    v1549 = 0uLL;
    v1548 = 0uLL;
    v1547 = 0uLL;
    v1546 = 0uLL;
    v1545 = 0uLL;
    v1544 = 0uLL;
    v1543 = 0uLL;
    v1542 = 0uLL;
    v1541 = 0uLL;
    v88 = &kModRoots;
    v1540 = 0uLL;
    v1539 = 0uLL;
    do
    {
      v89 = (const __int16 *)(v31 + v87 * 2);
      v1579 = vld2q_s16(v89);
      v90 = &v1535[v87 / 8 + 64];
      v1588 = vld2q_s16(v90->i16);
      v91 = vmull_u16(*(uint16x4_t *)v1588.val[1].i8, *(uint16x4_t *)v1579.val[1].i8);
      v92 = vmull_high_u16((uint16x8_t)v1588.val[1], (uint16x8_t)v1579.val[1]);
      v93 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v91.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v91, v32), 0x18uLL), v33), *(uint16x4_t *)v1588.val[1].i8, *(uint16x4_t *)v1579.val[1].i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v92.i8,
                                                                     *(uint32x2_t *)v32.i8),
                                                        0x18uLL),
                                                      (int64x2_t)vmull_high_u32(v92, v32),
                                                      0x18uLL),
                                                    v33),
                                      (uint16x8_t)v1588.val[1],
                                      (uint16x8_t)v1579.val[1]));
      v94 = vaddq_s16((int16x8_t)v93, v34);
      v95 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v94), v93), (int8x16_t)vmaxq_s16(v94, (int16x8_t)0));
      v96 = (uint16x8_t)*v88++;
      v97 = vmull_high_u16(v95, v96);
      v98 = vmlal_u16(vmull_u16(*(uint16x4_t *)v95.i8, *(uint16x4_t *)v96.i8), *(uint16x4_t *)v1588.val[0].i8, *(uint16x4_t *)v1579.val[0].i8);
      v99 = vmlal_high_u16(v97, (uint16x8_t)v1588.val[0], (uint16x8_t)v1579.val[0]);
      v100 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v98, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v98.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v98, v32), 0x18uLL), v33), (int16x8_t)vmlaq_s32((int32x4_t)v99, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v99.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v99, v32), 0x18uLL), v33));
      v101 = vaddq_s16((int16x8_t)v100, v34);
      v102 = vmlal_u16(vmull_u16(*(uint16x4_t *)v1588.val[1].i8, *(uint16x4_t *)v1579.val[0].i8), *(uint16x4_t *)v1579.val[1].i8, *(uint16x4_t *)v1588.val[0].i8);
      v103 = vmlal_high_u16(vmull_high_u16((uint16x8_t)v1588.val[1], (uint16x8_t)v1579.val[0]), (uint16x8_t)v1579.val[1], (uint16x8_t)v1588.val[0]);
      v104 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v102, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v102.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v102, v32), 0x18uLL), v33), (int16x8_t)vmlaq_s32((int32x4_t)v103, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v103.i8, *(uint32x2_t *)v32.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v103, v32), 0x18uLL), v33));
      v105 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v101), v100), (int8x16_t)vmaxq_s16(v101, (int16x8_t)0));
      v1579.val[1] = vaddq_s16((int16x8_t)v104, v34);
      v1579.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1579.val[1]), v104), (int8x16_t)vmaxq_s16(v1579.val[1], (int16x8_t)0));
      v106 = &v1539.i16[v87];
      vst2q_s16(v106, v1579);
      v87 += 16;
    }
    while (v87 != 256);
    v107 = &v1530[v28];
    for (k = 2; k != 66; k += 4)
    {
      v109 = (int8x16_t)vaddq_s16(*(int16x8_t *)&v1538[k * 8], *(int16x8_t *)&v107[k - 2]);
      v110 = (int8x16_t)vaddq_s16(*(int16x8_t *)((char *)&v1539 + k * 8), *(int16x8_t *)&v107[k]);
      v111 = vaddq_s16((int16x8_t)v109, v34);
      v112 = vaddq_s16((int16x8_t)v110, v34);
      *(int8x16_t *)&v107[k - 2] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v111), v109), (int8x16_t)vmaxq_s16(v111, (int16x8_t)0));
      *(int8x16_t *)&v107[k] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v112), v110), (int8x16_t)vmaxq_s16(v112, (int16x8_t)0));
    }
    ++v29;
    v27 += 1536;
    v28 += 64;
    v30 += 1536;
    v31 += 1536;
  }
  while (v29 != 3);
  v113 = 0;
  v114.i64[0] = 0xD000D000D000D00;
  v114.i64[1] = 0xD000D000D000D00;
  v115 = 0uLL;
  v1494 = vdupq_n_s32(0xD01u);
  v116 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v117 = (int8x16_t)xmmword_208F2B0A0;
  v118 = (int8x16_t)xmmword_208F2B0B0;
  v119 = (int8x16_t)xmmword_208F2B0D0;
  v120 = (int8x16_t)xmmword_208F2B0E0;
  v121 = (int8x16_t)xmmword_208F2B100;
  v122 = (int8x16_t)xmmword_208F2B130;
  v123 = (int8x16_t)xmmword_208F2B140;
  v124 = (int8x16_t)xmmword_208F2B160;
  v125 = xmmword_208F2B1A0;
  v126 = (__int16 *)v1530;
  v1492 = v116;
  do
  {
    v127 = 0;
    v128 = (int16x8_t *)&v1530[64 * v113];
    v129 = v126;
    do
    {
      v1607 = vld4q_s16(v129);
      v130 = *(uint16x8_t *)((char *)&kInverseNTTRoots + v127 + 128);
      v131 = (int32x4_t)vmovl_high_u16(v130);
      v132 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v130.i8);
      v133 = (int8x16_t)vaddq_s16(v1607.val[0], v1607.val[2]);
      v134 = vaddq_s16((int16x8_t)v133, v114);
      v1606.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v134), v133), (int8x16_t)vmaxq_s16(v134, v115));
      v135 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v1607.val[0].i8, *(uint16x4_t *)v1607.val[2].i8), v1494), v132);
      v136 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_high_u16((uint16x8_t)v1607.val[0], (uint16x8_t)v1607.val[2]), v1494), v131);
      v137.i64[0] = 0xF2000000F2;
      v137.i64[1] = 0xF2000000F2;
      v115 = 0uLL;
      v138 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v135, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v135.i8, *(uint32x2_t *)v116.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v135, v116), 0x18uLL), v137), (int16x8_t)vmlaq_s32((int32x4_t)v136, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v136.i8, *(uint32x2_t *)v116.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v136, v116), 0x18uLL), v137));
      v139 = vaddq_s16((int16x8_t)v138, v114);
      v1606.val[2] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v139), v138), (int8x16_t)vmaxq_s16(v139, (int16x8_t)0));
      v140 = (int8x16_t)vaddq_s16(v1607.val[1], v1607.val[3]);
      v141 = vaddq_s16((int16x8_t)v140, v114);
      v1606.val[1] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v141), v140), (int8x16_t)vmaxq_s16(v141, (int16x8_t)0));
      v142 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v1607.val[1].i8, *(uint16x4_t *)v1607.val[3].i8), v1494), v132);
      v143 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_high_u16((uint16x8_t)v1607.val[1], (uint16x8_t)v1607.val[3]), v1494), v131);
      v144 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v142, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v142.i8, *(uint32x2_t *)v116.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v142, v116), 0x18uLL), v137), (int16x8_t)vmlaq_s32((int32x4_t)v143, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v143.i8, *(uint32x2_t *)v116.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v143, v116), 0x18uLL), v137));
      v145 = vaddq_s16((int16x8_t)v144, v114);
      v1606.val[3] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v145), v144), (int8x16_t)vmaxq_s16(v145, (int16x8_t)0));
      vst4q_s16(v129, v1606);
      v129 += 32;
      v127 += 16;
    }
    while (v127 != 128);
    v146 = 0;
    v147 = &xmmword_208F2B430;
    v148 = xmmword_208F2B180;
    do
    {
      v149 = (int8x16_t)v148;
      v150 = (int8x16_t *)&v126[v146];
      v1591 = *(int8x16x2_t *)&v126[v146 + 48];
      v1595 = *(int8x16x2_t *)&v126[v146 + 32];
      v1599 = *(int8x16x2_t *)&v126[v146 + 16];
      v151 = vqtbl2q_s8(v1595, v118);
      v151.i32[3] = vqtbl2q_s8(v1591, v117).i32[3];
      v1601 = *(int8x16x2_t *)&v126[v146];
      v152.i32[0] = vzip1q_s16((int16x8_t)v1601.val[0], (int16x8_t)v1601.val[1]).u32[0];
      v152.i32[1] = vqtbl2q_s8(v1599, (int8x16_t)xmmword_208F2B0C0).i32[1];
      v153 = vqtbl2q_s8(v1595, v120);
      v154.i32[0] = vtrn2q_s16((int16x8_t)v1601.val[0], (int16x8_t)v1601.val[1]).u32[0];
      v153.i32[3] = vqtbl2q_s8(v1591, v119).i32[3];
      LOWORD(v155) = WORD2(*(_QWORD *)&v126[v146 + 16]);
      HIWORD(v155) = WORD2(*(_QWORD *)&v126[v146 + 24]);
      v154.i32[1] = vqtbl2q_s8(v1599, (int8x16_t)xmmword_208F2B0F0).i32[1];
      v156 = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B110);
      v157.i32[0] = vqtbl2q_s8(v1601, (int8x16_t)xmmword_208F2B120).u32[0];
      v158 = vqtbl2q_s8(v1591, v122);
      v159 = vqtbl2q_s8(v1595, v123);
      v156.i32[3] = vqtbl2q_s8(v1591, v121).i32[3];
      LOWORD(v160) = *(_QWORD *)&v126[v146 + 36];
      WORD1(v160) = *(_QWORD *)&v126[v146 + 44];
      v159.i32[3] = v158.i32[3];
      v161.i32[0] = vqtbl2q_s8(v1601, (int8x16_t)xmmword_208F2B150).u32[0];
      v162.i32[0] = vzip2q_s16((int16x8_t)v1601.val[0], (int16x8_t)v1601.val[1]).u32[0];
      v161.i32[1] = vtrn2q_s16(*(int16x8_t *)&v1599, *(int16x8_t *)(&v1599 + 16)).i32[1];
      v163 = (uint16x8_t)*v147++;
      v164.i32[0] = v162.i32[0];
      v165 = vtrn2q_s16((int16x8_t)v1595.val[0], (int16x8_t)v1595.val[1]);
      v164.i32[1] = vqtbl2q_s8(v1599, (int8x16_t)xmmword_208F2B170).i32[1];
      v165.i32[3] = vqtbl2q_s8(v1591, v149).i32[3];
      v157.i32[1] = v155;
      v166.i32[0] = vqtbl2q_s8(v1601, (int8x16_t)xmmword_208F2B190).u32[0];
      v167 = (int8x16_t)v125;
      v168.i32[0] = v166.i32[0];
      v168.i32[1] = vzip2q_s16(*(int16x8_t *)&v1599, *(int16x8_t *)(&v1599 + 16)).i32[1];
      HIDWORD(v160) = vqtbl2q_s8(v1591, v124).i32[3];
      LOWORD(v169) = v1591.val[0].i16[6];
      HIWORD(v169) = v1591.val[1].i16[6];
      v152.i64[1] = v151.i64[1];
      v170 = vzip2q_s16((int16x8_t)v1595.val[0], (int16x8_t)v1595.val[1]);
      v171 = __PAIR64__(v169, v170.u32[2]);
      v154.i64[1] = v153.i64[1];
      v172 = (int16x8_t)vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B1C0);
      v173 = vzip2q_s16((int16x8_t)v1591.val[0], (int16x8_t)v1591.val[1]);
      v172.i32[3] = v173.i32[3];
      v161.i64[1] = v159.i64[1];
      v1505 = vqtbl2q_s8(v1599, (int8x16_t)xmmword_208F2B1D0);
      v1507 = vqtbl2q_s8(v1601, (int8x16_t)xmmword_208F2B1E0).u32[0];
      v1509 = v161;
      v161.i64[0] = __PAIR64__(v1505.u32[1], v1507);
      v170.i32[1] = vqtbl2q_s8(v1591, (int8x16_t)xmmword_208F2B170).i32[1];
      v162.i32[1] = v164.i32[1];
      v168.i64[1] = v165.i64[1];
      *(int16x4_t *)v151.i8 = vzip1_s16(*(int16x4_t *)v1591.val[0].i8, *(int16x4_t *)v1591.val[1].i8);
      v174.i32[0] = vzip1_s16(*(int16x4_t *)v1595.val[0].i8, *(int16x4_t *)v1595.val[1].i8).u32[0];
      v161.i64[1] = v172.i64[1];
      v174.i32[1] = vext_s8(*(int8x8_t *)&v1591, *(int8x8_t *)&v151, 4uLL).i32[1];
      *(int16x4_t *)v165.i8 = vzip1_s16(*(int16x4_t *)v1599.val[0].i8, *(int16x4_t *)v1599.val[1].i8);
      v157.i64[1] = v156.i64[1];
      v1499 = v157;
      v1502 = v161;
      v1603 = v1601;
      v156.i32[0] = vzip1_s16(*(int16x4_t *)v1601.val[0].i8, *(int16x4_t *)v1601.val[1].i8).u32[0];
      v156.i32[1] = vext_s8(*(int8x8_t *)&v1599, *(int8x8_t *)&v165, 4uLL).i32[1];
      v175 = (int32x4_t)vmovl_high_u16(v163);
      v164.i64[1] = v160;
      v1601.val[1] = (int8x16_t)vmovl_u16(*(uint16x4_t *)v163.i8);
      v176 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v156.i8, v162);
      v156.i32[0] = vqtbl2q_s8(v1603, (int8x16_t)xmmword_208F2B1B0).u32[0];
      v1572 = v113;
      v172.i32[0] = v156.i32[0];
      v172.i32[1] = vqtbl2q_s8(v1599, v167).i32[1];
      v172.i64[1] = v171;
      v177 = (uint32x4_t)vmulq_s32(vaddq_s32(v176, v1494), (int32x4_t)v1601.val[1]);
      v178 = (int32x4_t)v1601.val[1];
      v179 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(v174, *(uint16x4_t *)v170.i8), v1494), v175);
      v174.i32[0] = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B190).u32[0];
      v174.i32[1] = v173.i32[1];
      v166.i32[1] = v168.i32[1];
      v158.i32[0] = vtrn2_s16(*(int16x4_t *)v1595.val[0].i8, *(int16x4_t *)v1595.val[1].i8).u32[0];
      v158.i32[1] = v151.i32[1];
      v180 = (int8x16_t)vaddq_s16(v152, v164);
      v1601.val[1].i32[0] = vtrn2_s16(*(int16x4_t *)v1601.val[0].i8, *(int16x4_t *)v1603.val[1].i8).u32[0];
      v1601.val[1].i32[1] = v165.i32[1];
      v181 = (int8x16_t)vaddq_s16(v154, v168);
      v157.i64[0] = 0xD000D000D000D00;
      v157.i64[1] = 0xD000D000D000D00;
      v182 = vaddq_s16((int16x8_t)v181, v157);
      v183 = vaddq_s16((int16x8_t)v180, v157);
      v184 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v1601.val[1].i8, v166);
      v1601.val[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v183), v180), (int8x16_t)vmaxq_s16(v183, (int16x8_t)0));
      v185 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v182), v181), (int8x16_t)vmaxq_s16(v182, (int16x8_t)0));
      v186 = (uint32x4_t)vmulq_s32(vaddq_s32(v184, v1494), v178);
      v187 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v158.i8, v174), v1494), v175);
      v168.i64[0] = 0xF2000000F2;
      v168.i64[1] = 0xF2000000F2;
      v174.i32[0] = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B1B0).u32[0];
      v174.i32[1] = vqtbl2q_s8(v1591, (int8x16_t)xmmword_208F2B1A0).i32[1];
      v156.i32[1] = v172.i32[1];
      v180.i16[2] = v1591.val[0].i16[2];
      v183.i32[0] = vzip2_s16(*(int16x4_t *)v1595.val[0].i8, *(int16x4_t *)v1595.val[1].i8).u32[0];
      v180.i16[3] = v1591.val[1].i16[2];
      v183.i32[1] = v180.i32[1];
      v180.i16[2] = v1599.val[0].i16[2];
      v180.i16[3] = v1599.val[1].i16[2];
      v188.i32[0] = vzip2_s16(*(int16x4_t *)v1601.val[0].i8, *(int16x4_t *)v1603.val[1].i8).u32[0];
      v188.i32[1] = v180.i32[1];
      v189 = (int8x16_t)vaddq_s16(v1499, v172);
      v190 = vaddq_s16((int16x8_t)v189, v157);
      v191 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v186, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v186.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v186, v1492), 0x18uLL), (int32x4_t)v168), (int16x8_t)vmlaq_s32((int32x4_t)v187, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v187.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v187, v1492), 0x18uLL), (int32x4_t)v168));
      v192 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(v188, *(uint16x4_t *)v156.i8), v1494), v178);
      v193 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v183.i8, v174), v1494), v175);
      v183.i32[0] = vuzp2_s16(vuzp2_s16(*(int16x4_t *)v1601.val[0].i8, *(int16x4_t *)v1603.val[1].i8), *(int16x4_t *)v1601.val[0].i8).u32[0];
      v194 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v177, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v177.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v177, v1492), 0x18uLL), (int32x4_t)v168), (int16x8_t)vmlaq_s32((int32x4_t)v179, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v179.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v179, v1492), 0x18uLL), (int32x4_t)v168));
      v156.i32[0] = vuzp2_s16(vuzp2_s16(*(int16x4_t *)v1595.val[0].i8, *(int16x4_t *)v1595.val[1].i8), *(int16x4_t *)v1595.val[0].i8).u32[0];
      v1595.val[0].i32[0] = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B1E0).u32[0];
      v1595.val[0].i32[1] = vqtbl2q_s8(v1591, (int8x16_t)xmmword_208F2B1D0).i32[1];
      v195 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v192, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v192.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v192, v1492), 0x18uLL), (int32x4_t)v168), (int16x8_t)vmlaq_s32((int32x4_t)v193, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v193.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v193, v1492), 0x18uLL), (int32x4_t)v168));
      v196 = vaddq_s16((int16x8_t)v191, v157);
      v156.i32[1] = vzip2_s16(*(int16x4_t *)&v1591, *(int16x4_t *)(&v1591 + 16)).i32[1];
      v197 = vaddq_s16((int16x8_t)v194, v157);
      v1581.val[0] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v190), v189), (int8x16_t)vmaxq_s16(v190, (int16x8_t)0));
      v183.i32[1] = vzip2_s16(*(int16x4_t *)&v1599, *(int16x4_t *)(&v1599 + 16)).i32[1];
      v198 = vaddq_s16((int16x8_t)v195, v157);
      v199 = (int8x16_t)vaddq_s16(v1509, v1502);
      v1591.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v199, v157);
      v1581.val[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16((int16x8_t)v1591.val[1]), v199), (int8x16_t)vmaxq_s16((int16x8_t)v1591.val[1], (int16x8_t)0));
      v1591.val[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v197), v194), (int8x16_t)vmaxq_s16(v197, (int16x8_t)0));
      v200 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v183.i8, (uint16x4_t)__PAIR64__(v1505.u32[1], v1507)), v1494), v178);
      v201 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v156.i8, *(uint16x4_t *)v1595.val[0].i8), v1494), v175);
      v117 = (int8x16_t)xmmword_208F2B0A0;
      v124 = (int8x16_t)xmmword_208F2B160;
      v202 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v196), v191), (int8x16_t)vmaxq_s16(v196, (int16x8_t)0));
      v203 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v200, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v200.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v200, v1492), 0x18uLL), (int32x4_t)v168), (int16x8_t)vmlaq_s32((int32x4_t)v201, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v201.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v201, v1492), 0x18uLL), (int32x4_t)v168));
      v204 = vaddq_s16((int16x8_t)v203, v157);
      v1595.val[0] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v198), v195), (int8x16_t)vmaxq_s16(v198, (int16x8_t)0));
      v121 = (int8x16_t)xmmword_208F2B100;
      v1595.val[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v204), v203), (int8x16_t)vmaxq_s16(v204, (int16x8_t)0));
      v1599.val[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1591 + 16), (int8x16_t)xmmword_208F2B0E0);
      v156.i32[0] = vtrn2q_s16((int16x8_t)v1601.val[1], v185).u32[0];
      v156.i32[1] = vqtbl2q_s8(v1581, (int8x16_t)xmmword_208F2B0F0).i32[1];
      v205 = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1591 + 16), (int8x16_t)xmmword_208F2B0B0);
      v194.i32[0] = vzip1q_s16((int16x8_t)v1601.val[1], v185).u32[0];
      v194.i32[1] = vqtbl2q_s8(v1581, (int8x16_t)xmmword_208F2B0C0).i32[1];
      v123 = (int8x16_t)xmmword_208F2B140;
      v122 = (int8x16_t)xmmword_208F2B130;
      v206 = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1591 + 16), (int8x16_t)xmmword_208F2B140);
      v1599.val[0].i32[3] = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B0D0).i32[3];
      v198.i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1601 + 16), (int8x16_t)xmmword_208F2B150).u32[0];
      v198.i32[1] = vtrn2q_s16(*(int16x8_t *)&v1581, *(int16x8_t *)(&v1581 + 16)).i32[1];
      v205.i32[3] = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B0A0).i32[3];
      v207 = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B100);
      v208 = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B180);
      v209 = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B160);
      v206.i32[3] = vqtbl2q_s8(v1595, (int8x16_t)xmmword_208F2B130).i32[3];
      v210 = vzip2q_s16((int16x8_t)v1595.val[0], (int16x8_t)v1595.val[1]);
      v1599.val[1] = (int8x16_t)vzip2q_s16((int16x8_t)v1591.val[1], v202);
      v1595.val[0].i16[7] = v1595.val[1].i16[6];
      v1599.val[1].i32[3] = v1595.val[0].i32[3];
      v1595.val[0].i16[2] = v1581.val[0].i16[2];
      v1595.val[1] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1591 + 16), (int8x16_t)xmmword_208F2B110);
      v1595.val[0].i16[3] = v1581.val[1].i16[2];
      v1595.val[1].i32[3] = v207.i32[3];
      v207.i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1601 + 16), (int8x16_t)xmmword_208F2B120).u32[0];
      v207.i32[1] = v1595.val[0].i32[1];
      v156.i64[1] = v1599.val[0].i64[1];
      v1595.val[0] = (int8x16_t)vtrn2q_s16((int16x8_t)v1591.val[1], v202);
      v1595.val[0].i32[3] = v208.i32[3];
      v198.i64[1] = v206.i64[1];
      v208.i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1601 + 16), (int8x16_t)xmmword_208F2B190).u32[0];
      v208.i32[1] = vzip2q_s16(*(int16x8_t *)&v1581, *(int16x8_t *)(&v1581 + 16)).i32[1];
      v206.i16[4] = v1591.val[1].i16[4];
      v206.i16[5] = v202.i16[4];
      v206.i32[3] = v209.i32[3];
      v207.i64[1] = v1595.val[1].i64[1];
      v209.i32[0] = vzip2q_s16((int16x8_t)v1601.val[1], v185).u32[0];
      v119 = (int8x16_t)xmmword_208F2B0D0;
      v148 = xmmword_208F2B180;
      v209.i32[1] = vqtbl2q_s8(v1581, (int8x16_t)xmmword_208F2B170).i32[1];
      v120 = (int8x16_t)xmmword_208F2B0E0;
      v208.i64[1] = v1595.val[0].i64[1];
      v1591.val[1] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1591 + 16), (int8x16_t)xmmword_208F2B1C0);
      v1591.val[1].i32[3] = v210.i32[3];
      v209.i64[1] = v206.i64[1];
      v206.i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1601 + 16), (int8x16_t)xmmword_208F2B1E0).u32[0];
      v118 = (int8x16_t)xmmword_208F2B0B0;
      v206.i32[1] = vqtbl2q_s8(v1581, (int8x16_t)xmmword_208F2B1D0).i32[1];
      v150[2] = v207;
      v150[3] = (int8x16_t)v198;
      v125 = xmmword_208F2B1A0;
      v206.i64[1] = v1591.val[1].i64[1];
      v210.i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1601 + 16), (int8x16_t)xmmword_208F2B1B0).u32[0];
      v150[4] = v209;
      v150[5] = v208;
      v210.i32[1] = vqtbl2q_s8(v1581, (int8x16_t)xmmword_208F2B1A0).i32[1];
      v210.i64[1] = v1599.val[1].i64[1];
      v150[6] = (int8x16_t)v210;
      v150[7] = v206;
      v194.i64[1] = v205.i64[1];
      *v150 = v194;
      v150[1] = v156;
      v146 += 64;
    }
    while (v146 != 256);
    v211 = 0;
    v114.i64[0] = 0xD000D000D000D00;
    v114.i64[1] = 0xD000D000D000D00;
    v115 = 0uLL;
    v116 = v1492;
    v212.i64[0] = 0xF2000000F2;
    v212.i64[1] = 0xF2000000F2;
    do
    {
      v213 = (int16x8_t *)&v126[8 * v211];
      v214 = v213[1];
      v215 = (int8x16_t)vaddq_s16(*v213, v214);
      v216 = vaddq_s16((int16x8_t)v215, v114);
      v217 = vdupq_n_s32(*(unsigned __int16 *)((char *)&kInverseNTTRoots + v211 + 32));
      v218 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v213->i8, *(uint16x4_t *)v214.i8), v1494), v217);
      v219 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_high_u16(*(uint16x8_t *)v213, (uint16x8_t)v214), v1494), v217);
      v220 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v218, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v218.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v218, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v219, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v219.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v219, v1492), 0x18uLL), v212));
      v221 = vaddq_s16((int16x8_t)v220, v114);
      *(int8x16_t *)v213 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v216), v215), (int8x16_t)vmaxq_s16(v216, (int16x8_t)0));
      v213[1] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v221), v220), (int8x16_t)vmaxq_s16(v221, (int16x8_t)0));
      v211 += 2;
    }
    while (v211 != 32);
    v222 = 0;
    v223 = v128[2];
    v224 = v128[3];
    v225 = v128[1];
    v226 = (int8x16_t)vaddq_s16(*v128, v223);
    v227 = vaddq_s16((int16x8_t)v226, v114);
    v228 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v227), v226), (int8x16_t)vmaxq_s16(v227, (int16x8_t)0));
    v229 = (uint16x8_t)vdupq_n_s16(0x62Fu);
    v230 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(*(uint16x8_t *)v128, v229), (uint16x8_t)v223, v229);
    v231 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v128->i8, *(uint16x4_t *)v229.i8), *(uint16x4_t *)v223.i8, *(uint16x4_t *)v229.i8);
    v232 = vdupq_n_s32(0x50692Fu);
    v233 = (uint32x4_t)vaddq_s32(v231, v232);
    v234 = (uint32x4_t)vaddq_s32(v230, v232);
    v235 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v233, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v233.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v233, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v234, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v234.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v234, v1492), 0x18uLL), v212));
    v236 = vaddq_s16((int16x8_t)v235, v114);
    v237 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v236), v235), (int8x16_t)vmaxq_s16(v236, (int16x8_t)0));
    v238 = (int8x16_t)vaddq_s16(v225, v224);
    v239 = vaddq_s16((int16x8_t)v238, v114);
    *v128 = (int16x8_t)v228;
    v128[1] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v239), v238), (int8x16_t)vmaxq_s16(v239, (int16x8_t)0));
    v240 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v225, v229), (uint16x8_t)v224, v229);
    v241 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v225.i8, *(uint16x4_t *)v229.i8), *(uint16x4_t *)v224.i8, *(uint16x4_t *)v229.i8), v232);
    v242 = (uint32x4_t)vaddq_s32(v240, v232);
    v243 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v241, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v241.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v241, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v242, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v242.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v242, v1492), 0x18uLL), v212));
    v244 = vaddq_s16((int16x8_t)v243, v114);
    v128[2] = (int16x8_t)v237;
    v128[3] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v244), v243), (int8x16_t)vmaxq_s16(v244, (int16x8_t)0));
    v245 = v128[6];
    v246 = v128[7];
    v247 = v128[4];
    v248 = v128[5];
    v249 = (int8x16_t)vaddq_s16(v247, v245);
    v250 = vaddq_s16((int16x8_t)v249, v114);
    v251 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v250), v249), (int8x16_t)vmaxq_s16(v250, (int16x8_t)0));
    v252 = (uint16x8_t)vdupq_n_s16(0xAC8u);
    v253 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v247, v252), (uint16x8_t)v245, v252);
    v254 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v247.i8, *(uint16x4_t *)v252.i8), *(uint16x4_t *)v245.i8, *(uint16x4_t *)v252.i8);
    v255 = vdupq_n_s32(0x8C32C8u);
    v256 = (uint32x4_t)vaddq_s32(v254, v255);
    v257 = (uint32x4_t)vaddq_s32(v253, v255);
    v258 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v256, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v256.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v256, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v257, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v257.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v257, v1492), 0x18uLL), v212));
    v259 = vaddq_s16((int16x8_t)v258, v114);
    v260 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v259), v258), (int8x16_t)vmaxq_s16(v259, (int16x8_t)0));
    v261 = (int8x16_t)vaddq_s16(v248, v246);
    v262 = vaddq_s16((int16x8_t)v261, v114);
    v128[4] = (int16x8_t)v251;
    v128[5] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v262), v261), (int8x16_t)vmaxq_s16(v262, (int16x8_t)0));
    v263 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v248, v252), (uint16x8_t)v246, v252);
    v264 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v248.i8, *(uint16x4_t *)v252.i8), *(uint16x4_t *)v246.i8, *(uint16x4_t *)v252.i8), v255);
    v265 = (uint32x4_t)vaddq_s32(v263, v255);
    v266 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v264, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v264.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v264, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v265, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v265.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v265, v1492), 0x18uLL), v212));
    v267 = vaddq_s16((int16x8_t)v266, v114);
    v128[6] = (int16x8_t)v260;
    v128[7] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v267), v266), (int8x16_t)vmaxq_s16(v267, (int16x8_t)0));
    v268 = v128[10];
    v269 = v128[11];
    v270 = v128[8];
    v271 = v128[9];
    v272 = (int8x16_t)vaddq_s16(v270, v268);
    v273 = vaddq_s16((int16x8_t)v272, v114);
    v274 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v273), v272), (int8x16_t)vmaxq_s16(v273, (int16x8_t)0));
    v275.i64[0] = 0x45004500450045;
    v275.i64[1] = 0x45004500450045;
    v276 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v270, v275), (uint16x8_t)v268, v275);
    v277 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v270.i8, (uint16x4_t)0x45004500450045), *(uint16x4_t *)v268.i8, (uint16x4_t)0x45004500450045);
    v278 = vdupq_n_s32(0x38145u);
    v279 = (uint32x4_t)vaddq_s32(v277, v278);
    v280 = (uint32x4_t)vaddq_s32(v276, v278);
    v281 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v279, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v279.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v279, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v280, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v280.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v280, v1492), 0x18uLL), v212));
    v282 = vaddq_s16((int16x8_t)v281, v114);
    v283 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v282), v281), (int8x16_t)vmaxq_s16(v282, (int16x8_t)0));
    v284 = (int8x16_t)vaddq_s16(v271, v269);
    v285 = vaddq_s16((int16x8_t)v284, v114);
    v128[8] = (int16x8_t)v274;
    v128[9] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v285), v284), (int8x16_t)vmaxq_s16(v285, (int16x8_t)0));
    v286 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v271, v275), (uint16x8_t)v269, v275);
    v287 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v271.i8, (uint16x4_t)0x45004500450045), *(uint16x4_t *)v269.i8, (uint16x4_t)0x45004500450045), v278);
    v288 = (uint32x4_t)vaddq_s32(v286, v278);
    v289 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v287, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v287.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v287, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v288, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v288.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v288, v1492), 0x18uLL), v212));
    v290 = vaddq_s16((int16x8_t)v289, v114);
    v128[10] = (int16x8_t)v283;
    v128[11] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v290), v289), (int8x16_t)vmaxq_s16(v290, (int16x8_t)0));
    v291 = v128[14];
    v292 = v128[15];
    v293 = v128[12];
    v294 = v128[13];
    v295 = (int8x16_t)vaddq_s16(v293, v291);
    v296 = vaddq_s16((int16x8_t)v295, v114);
    v297 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v296), v295), (int8x16_t)vmaxq_s16(v296, (int16x8_t)0));
    v298 = (uint16x8_t)vdupq_n_s16(0x21Fu);
    v299 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v293, v298), (uint16x8_t)v291, v298);
    v300 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v293.i8, *(uint16x4_t *)v298.i8), *(uint16x4_t *)v291.i8, *(uint16x4_t *)v298.i8);
    v301 = vdupq_n_s32(0x1B951Fu);
    v302 = (uint32x4_t)vaddq_s32(v300, v301);
    v303 = (uint32x4_t)vaddq_s32(v299, v301);
    v304 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v302, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v302.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v302, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v303, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v303.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v303, v1492), 0x18uLL), v212));
    v305 = vaddq_s16((int16x8_t)v304, v114);
    v306 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v305), v304), (int8x16_t)vmaxq_s16(v305, (int16x8_t)0));
    v307 = (int8x16_t)vaddq_s16(v294, v292);
    v308 = vaddq_s16((int16x8_t)v307, v114);
    v128[12] = (int16x8_t)v297;
    v128[13] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v308), v307), (int8x16_t)vmaxq_s16(v308, (int16x8_t)0));
    v309 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v294, v298), (uint16x8_t)v292, v298);
    v310 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v294.i8, *(uint16x4_t *)v298.i8), *(uint16x4_t *)v292.i8, *(uint16x4_t *)v298.i8), v301);
    v311 = (uint32x4_t)vaddq_s32(v309, v301);
    v312 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v310, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v310.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v310, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v311, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v311.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v311, v1492), 0x18uLL), v212));
    v313 = vaddq_s16((int16x8_t)v312, v114);
    v128[14] = (int16x8_t)v306;
    v128[15] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v313), v312), (int8x16_t)vmaxq_s16(v313, (int16x8_t)0));
    v314 = v128[18];
    v315 = v128[19];
    v316 = v128[16];
    v317 = v128[17];
    v318 = (int8x16_t)vaddq_s16(v316, v314);
    v319 = vaddq_s16((int16x8_t)v318, v114);
    v320 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v319), v318), (int8x16_t)vmaxq_s16(v319, (int16x8_t)0));
    v321 = (uint16x8_t)vdupq_n_s16(0x9E4u);
    v322 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v316, v321), (uint16x8_t)v314, v321);
    v323 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v316.i8, *(uint16x4_t *)v321.i8), *(uint16x4_t *)v314.i8, *(uint16x4_t *)v321.i8);
    v324 = vdupq_n_s32(0x809DE4u);
    v325 = (uint32x4_t)vaddq_s32(v323, v324);
    v326 = (uint32x4_t)vaddq_s32(v322, v324);
    v327 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v325, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v325.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v325, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v326, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v326.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v326, v1492), 0x18uLL), v212));
    v328 = vaddq_s16((int16x8_t)v327, v114);
    v329 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v328), v327), (int8x16_t)vmaxq_s16(v328, (int16x8_t)0));
    v330 = (int8x16_t)vaddq_s16(v317, v315);
    v331 = vaddq_s16((int16x8_t)v330, v114);
    v128[16] = (int16x8_t)v320;
    v128[17] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v331), v330), (int8x16_t)vmaxq_s16(v331, (int16x8_t)0));
    v332 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v317, v321), (uint16x8_t)v315, v321);
    v333 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v317.i8, *(uint16x4_t *)v321.i8), *(uint16x4_t *)v315.i8, *(uint16x4_t *)v321.i8), v324);
    v334 = (uint32x4_t)vaddq_s32(v332, v324);
    v335 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v333, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v333.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v333, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v334, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v334.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v334, v1492), 0x18uLL), v212));
    v336 = vaddq_s16((int16x8_t)v335, v114);
    v128[18] = (int16x8_t)v329;
    v128[19] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v336), v335), (int8x16_t)vmaxq_s16(v336, (int16x8_t)0));
    v337 = v128[22];
    v338 = v128[23];
    v339 = v128[20];
    v340 = v128[21];
    v341 = (int8x16_t)vaddq_s16(v339, v337);
    v342 = vaddq_s16((int16x8_t)v341, v114);
    v343 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v342), v341), (int8x16_t)vmaxq_s16(v342, (int16x8_t)0));
    v344 = (uint16x8_t)vdupq_n_s16(0xC40u);
    v345 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v339, v344), (uint16x8_t)v337, v344);
    v346 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v339.i8, *(uint16x4_t *)v344.i8), *(uint16x4_t *)v337.i8, *(uint16x4_t *)v344.i8);
    v347 = vdupq_n_s32(0x9F4C40u);
    v348 = (uint32x4_t)vaddq_s32(v346, v347);
    v349 = (uint32x4_t)vaddq_s32(v345, v347);
    v350 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v348, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v348.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v348, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v349, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v349.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v349, v1492), 0x18uLL), v212));
    v351 = vaddq_s16((int16x8_t)v350, v114);
    v352 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v351), v350), (int8x16_t)vmaxq_s16(v351, (int16x8_t)0));
    v353 = (int8x16_t)vaddq_s16(v340, v338);
    v354 = vaddq_s16((int16x8_t)v353, v114);
    v128[20] = (int16x8_t)v343;
    v128[21] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v354), v353), (int8x16_t)vmaxq_s16(v354, (int16x8_t)0));
    v355 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v340, v344), (uint16x8_t)v338, v344);
    v356 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v340.i8, *(uint16x4_t *)v344.i8), *(uint16x4_t *)v338.i8, *(uint16x4_t *)v344.i8), v347);
    v357 = (uint32x4_t)vaddq_s32(v355, v347);
    v358 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v356, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v356.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v356, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v357, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v357.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v357, v1492), 0x18uLL), v212));
    v359 = vaddq_s16((int16x8_t)v358, v114);
    v128[22] = (int16x8_t)v352;
    v128[23] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v359), v358), (int8x16_t)vmaxq_s16(v359, (int16x8_t)0));
    v360 = v128[26];
    v361 = v128[27];
    v362 = v128[24];
    v363 = v128[25];
    v364 = (int8x16_t)vaddq_s16(v362, v360);
    v365 = vaddq_s16((int16x8_t)v364, v114);
    v366 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v365), v364), (int8x16_t)vmaxq_s16(v365, (int16x8_t)0));
    v367 = (uint16x8_t)vdupq_n_s16(0x582u);
    v368 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v362, v367), (uint16x8_t)v360, v367);
    v369 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v362.i8, *(uint16x4_t *)v367.i8), *(uint16x4_t *)v360.i8, *(uint16x4_t *)v367.i8);
    v370 = vdupq_n_s32(0x479F82u);
    v371 = (uint32x4_t)vaddq_s32(v369, v370);
    v372 = (uint32x4_t)vaddq_s32(v368, v370);
    v373 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v371, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v371.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v371, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v372, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v372.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v372, v1492), 0x18uLL), v212));
    v374 = vaddq_s16((int16x8_t)v373, v114);
    v375 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v374), v373), (int8x16_t)vmaxq_s16(v374, (int16x8_t)0));
    v376 = (int8x16_t)vaddq_s16(v363, v361);
    v377 = vaddq_s16((int16x8_t)v376, v114);
    v128[24] = (int16x8_t)v366;
    v128[25] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v377), v376), (int8x16_t)vmaxq_s16(v377, (int16x8_t)0));
    v378 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v363, v367), (uint16x8_t)v361, v367);
    v379 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v363.i8, *(uint16x4_t *)v367.i8), *(uint16x4_t *)v361.i8, *(uint16x4_t *)v367.i8), v370);
    v380 = (uint32x4_t)vaddq_s32(v378, v370);
    v381 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v379, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v379.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v379, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v380, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v380.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v380, v1492), 0x18uLL), v212));
    v382 = vaddq_s16((int16x8_t)v381, v114);
    v128[26] = (int16x8_t)v375;
    v128[27] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v382), v381), (int8x16_t)vmaxq_s16(v382, (int16x8_t)0));
    v383 = v128[30];
    v384 = v128[31];
    v385 = v128[28];
    v386 = v128[29];
    v387 = (int8x16_t)vaddq_s16(v385, v383);
    v388 = vaddq_s16((int16x8_t)v387, v114);
    v389 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v388), v387), (int8x16_t)vmaxq_s16(v388, (int16x8_t)0));
    v390 = (uint16x8_t)vdupq_n_s16(0x8DBu);
    v391 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v385, v390), (uint16x8_t)v383, v390);
    v392 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v385.i8, *(uint16x4_t *)v390.i8), *(uint16x4_t *)v383.i8, *(uint16x4_t *)v390.i8);
    v393 = vdupq_n_s32(0x7327DBu);
    v394 = (uint32x4_t)vaddq_s32(v392, v393);
    v395 = (uint32x4_t)vaddq_s32(v391, v393);
    v396 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v394, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v394.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v394, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v395, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v395.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v395, v1492), 0x18uLL), v212));
    v397 = vaddq_s16((int16x8_t)v396, v114);
    v398 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v397), v396), (int8x16_t)vmaxq_s16(v397, (int16x8_t)0));
    v399 = (int8x16_t)vaddq_s16(v386, v384);
    v400 = vaddq_s16((int16x8_t)v399, v114);
    v128[28] = (int16x8_t)v389;
    v128[29] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v400), v399), (int8x16_t)vmaxq_s16(v400, (int16x8_t)0));
    v401 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v386, v390), (uint16x8_t)v384, v390);
    v402 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v386.i8, *(uint16x4_t *)v390.i8), *(uint16x4_t *)v384.i8, *(uint16x4_t *)v390.i8), v393);
    v403 = (uint32x4_t)vaddq_s32(v401, v393);
    v404 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v402, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v402.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v402, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v403, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v403.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v403, v1492), 0x18uLL), v212));
    v405 = vaddq_s16((int16x8_t)v404, v114);
    v128[30] = (int16x8_t)v398;
    v128[31] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v405), v404), (int8x16_t)vmaxq_s16(v405, (int16x8_t)0));
    v406 = v128[4];
    v407 = v128[5];
    v408 = v128[1];
    v409 = (int8x16_t)vaddq_s16(*v128, v406);
    v410 = vaddq_s16((int16x8_t)v409, v114);
    v411 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v410), v409), (int8x16_t)vmaxq_s16(v410, (int16x8_t)0));
    v412 = (uint16x8_t)vdupq_n_s16(0x9B1u);
    v413 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(*(uint16x8_t *)v128, v412), (uint16x8_t)v406, v412);
    v414 = vdupq_n_s32(0x7E06B1u);
    v415 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v128->i8, *(uint16x4_t *)v412.i8), *(uint16x4_t *)v406.i8, *(uint16x4_t *)v412.i8), v414);
    v416 = (uint32x4_t)vaddq_s32(v413, v414);
    v417 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v415, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v415.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v415, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v416, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v416.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v416, v1492), 0x18uLL), v212));
    v418 = vaddq_s16((int16x8_t)v417, v114);
    v419 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v418), v417), (int8x16_t)vmaxq_s16(v418, (int16x8_t)0));
    v420 = (int8x16_t)vaddq_s16(v408, v407);
    v421 = vaddq_s16((int16x8_t)v420, v114);
    *v128 = (int16x8_t)v411;
    v128[1] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v421), v420), (int8x16_t)vmaxq_s16(v421, (int16x8_t)0));
    v422 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v408, v412), (uint16x8_t)v407, v412);
    v423 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v408.i8, *(uint16x4_t *)v412.i8), *(uint16x4_t *)v407.i8, *(uint16x4_t *)v412.i8), v414);
    v424 = (uint32x4_t)vaddq_s32(v422, v414);
    v425 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v423, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v423.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v423, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v424, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v424.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v424, v1492), 0x18uLL), v212));
    v426 = vaddq_s16((int16x8_t)v425, v114);
    v128[4] = (int16x8_t)v419;
    v128[5] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v426), v425), (int8x16_t)vmaxq_s16(v426, (int16x8_t)0));
    v427 = v128[6];
    v428 = v128[7];
    v429 = v128[2];
    v430 = v128[3];
    v431 = (int8x16_t)vaddq_s16(v429, v427);
    v432 = vaddq_s16((int16x8_t)v431, v114);
    v433 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v432), v431), (int8x16_t)vmaxq_s16(v432, (int16x8_t)0));
    v434 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v429, v412), (uint16x8_t)v427, v412);
    v435 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v429.i8, *(uint16x4_t *)v412.i8), *(uint16x4_t *)v427.i8, *(uint16x4_t *)v412.i8), v414);
    v436 = (uint32x4_t)vaddq_s32(v434, v414);
    v437 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v435, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v435.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v435, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v436, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v436.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v436, v1492), 0x18uLL), v212));
    v438 = vaddq_s16((int16x8_t)v437, v114);
    v439 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v438), v437), (int8x16_t)vmaxq_s16(v438, (int16x8_t)0));
    v440 = (int8x16_t)vaddq_s16(v430, v428);
    v441 = vaddq_s16((int16x8_t)v440, v114);
    v128[2] = (int16x8_t)v433;
    v128[3] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v441), v440), (int8x16_t)vmaxq_s16(v441, (int16x8_t)0));
    v442 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v430, v412), (uint16x8_t)v428, v412);
    v443 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v430.i8, *(uint16x4_t *)v412.i8), *(uint16x4_t *)v428.i8, *(uint16x4_t *)v412.i8), v414);
    v444 = (uint32x4_t)vaddq_s32(v442, v414);
    v445 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v443, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v443.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v443, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v444, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v444.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v444, v1492), 0x18uLL), v212));
    v446 = vaddq_s16((int16x8_t)v445, v114);
    v128[6] = (int16x8_t)v439;
    v128[7] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v446), v445), (int8x16_t)vmaxq_s16(v446, (int16x8_t)0));
    v447 = v128[12];
    v448 = v128[13];
    v449 = v128[8];
    v450 = v128[9];
    v451 = (int8x16_t)vaddq_s16(v449, v447);
    v452 = vaddq_s16((int16x8_t)v451, v114);
    v453 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v452), v451), (int8x16_t)vmaxq_s16(v452, (int16x8_t)0));
    v454 = (uint16x8_t)vdupq_n_s16(0x598u);
    v455 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v449, v454), (uint16x8_t)v447, v454);
    v456 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v449.i8, *(uint16x4_t *)v454.i8), *(uint16x4_t *)v447.i8, *(uint16x4_t *)v454.i8);
    v457 = vdupq_n_s32(0x48BD98u);
    v458 = (uint32x4_t)vaddq_s32(v456, v457);
    v459 = (uint32x4_t)vaddq_s32(v455, v457);
    v460 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v458, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v458.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v458, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v459, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v459.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v459, v1492), 0x18uLL), v212));
    v461 = vaddq_s16((int16x8_t)v460, v114);
    v462 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v461), v460), (int8x16_t)vmaxq_s16(v461, (int16x8_t)0));
    v463 = (int8x16_t)vaddq_s16(v450, v448);
    v464 = vaddq_s16((int16x8_t)v463, v114);
    v128[8] = (int16x8_t)v453;
    v128[9] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v464), v463), (int8x16_t)vmaxq_s16(v464, (int16x8_t)0));
    v465 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v450, v454), (uint16x8_t)v448, v454);
    v466 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v450.i8, *(uint16x4_t *)v454.i8), *(uint16x4_t *)v448.i8, *(uint16x4_t *)v454.i8), v457);
    v467 = (uint32x4_t)vaddq_s32(v465, v457);
    v468 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v466, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v466.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v466, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v467, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v467.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v467, v1492), 0x18uLL), v212));
    v469 = vaddq_s16((int16x8_t)v468, v114);
    v128[12] = (int16x8_t)v462;
    v128[13] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v469), v468), (int8x16_t)vmaxq_s16(v469, (int16x8_t)0));
    v470 = v128[14];
    v471 = v128[15];
    v472 = v128[10];
    v473 = v128[11];
    v474 = (int8x16_t)vaddq_s16(v472, v470);
    v475 = vaddq_s16((int16x8_t)v474, v114);
    v476 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v475), v474), (int8x16_t)vmaxq_s16(v475, (int16x8_t)0));
    v477 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v472, v454), (uint16x8_t)v470, v454);
    v478 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v472.i8, *(uint16x4_t *)v454.i8), *(uint16x4_t *)v470.i8, *(uint16x4_t *)v454.i8), v457);
    v479 = (uint32x4_t)vaddq_s32(v477, v457);
    v480 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v478, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v478.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v478, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v479, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v479.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v479, v1492), 0x18uLL), v212));
    v481 = vaddq_s16((int16x8_t)v480, v114);
    v482 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v481), v480), (int8x16_t)vmaxq_s16(v481, (int16x8_t)0));
    v483 = (int8x16_t)vaddq_s16(v473, v471);
    v484 = vaddq_s16((int16x8_t)v483, v114);
    v128[10] = (int16x8_t)v476;
    v128[11] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v484), v483), (int8x16_t)vmaxq_s16(v484, (int16x8_t)0));
    v485 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v473, v454), (uint16x8_t)v471, v454);
    v486 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v473.i8, *(uint16x4_t *)v454.i8), *(uint16x4_t *)v471.i8, *(uint16x4_t *)v454.i8), v457);
    v487 = (uint32x4_t)vaddq_s32(v485, v457);
    v488 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v486, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v486.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v486, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v487, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v487.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v487, v1492), 0x18uLL), v212));
    v489 = vaddq_s16((int16x8_t)v488, v114);
    v128[14] = (int16x8_t)v482;
    v128[15] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v489), v488), (int8x16_t)vmaxq_s16(v489, (int16x8_t)0));
    v490 = v128[20];
    v491 = v128[21];
    v492 = v128[16];
    v493 = v128[17];
    v494 = (int8x16_t)vaddq_s16(v492, v490);
    v495 = vaddq_s16((int16x8_t)v494, v114);
    v496 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v495), v494), (int8x16_t)vmaxq_s16(v495, (int16x8_t)0));
    v497 = (uint16x8_t)vdupq_n_s16(0xA8Bu);
    v498 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v492, v497), (uint16x8_t)v490, v497);
    v499 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v492.i8, *(uint16x4_t *)v497.i8), *(uint16x4_t *)v490.i8, *(uint16x4_t *)v497.i8);
    v500 = vdupq_n_s32(0x89198Bu);
    v501 = (uint32x4_t)vaddq_s32(v499, v500);
    v502 = (uint32x4_t)vaddq_s32(v498, v500);
    v503 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v501, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v501.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v501, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v502, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v502.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v502, v1492), 0x18uLL), v212));
    v504 = vaddq_s16((int16x8_t)v503, v114);
    v505 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v504), v503), (int8x16_t)vmaxq_s16(v504, (int16x8_t)0));
    v506 = (int8x16_t)vaddq_s16(v493, v491);
    v507 = vaddq_s16((int16x8_t)v506, v114);
    v128[16] = (int16x8_t)v496;
    v128[17] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v507), v506), (int8x16_t)vmaxq_s16(v507, (int16x8_t)0));
    v508 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v493, v497), (uint16x8_t)v491, v497);
    v509 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v493.i8, *(uint16x4_t *)v497.i8), *(uint16x4_t *)v491.i8, *(uint16x4_t *)v497.i8), v500);
    v510 = (uint32x4_t)vaddq_s32(v508, v500);
    v511 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v509, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v509.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v509, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v510, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v510.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v510, v1492), 0x18uLL), v212));
    v512 = vaddq_s16((int16x8_t)v511, v114);
    v128[20] = (int16x8_t)v505;
    v128[21] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v512), v511), (int8x16_t)vmaxq_s16(v512, (int16x8_t)0));
    v513 = v128[22];
    v514 = v128[23];
    v515 = v128[18];
    v516 = v128[19];
    v517 = (int8x16_t)vaddq_s16(v515, v513);
    v518 = vaddq_s16((int16x8_t)v517, v114);
    v519 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v518), v517), (int8x16_t)vmaxq_s16(v518, (int16x8_t)0));
    v520 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v515, v497), (uint16x8_t)v513, v497);
    v521 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v515.i8, *(uint16x4_t *)v497.i8), *(uint16x4_t *)v513.i8, *(uint16x4_t *)v497.i8), v500);
    v522 = (uint32x4_t)vaddq_s32(v520, v500);
    v523 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v521, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v521.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v521, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v522, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v522.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v522, v1492), 0x18uLL), v212));
    v524 = vaddq_s16((int16x8_t)v523, v114);
    v525 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v524), v523), (int8x16_t)vmaxq_s16(v524, (int16x8_t)0));
    v526 = (int8x16_t)vaddq_s16(v516, v514);
    v527 = vaddq_s16((int16x8_t)v526, v114);
    v128[18] = (int16x8_t)v519;
    v128[19] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v527), v526), (int8x16_t)vmaxq_s16(v527, (int16x8_t)0));
    v528 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v516, v497), (uint16x8_t)v514, v497);
    v529 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v516.i8, *(uint16x4_t *)v497.i8), *(uint16x4_t *)v514.i8, *(uint16x4_t *)v497.i8), v500);
    v530 = (uint32x4_t)vaddq_s32(v528, v500);
    v531 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v529, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v529.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v529, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v530, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v530.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v530, v1492), 0x18uLL), v212));
    v532 = vaddq_s16((int16x8_t)v531, v114);
    v128[22] = (int16x8_t)v525;
    v128[23] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v532), v531), (int8x16_t)vmaxq_s16(v532, (int16x8_t)0));
    v533 = v128[28];
    v534 = v128[29];
    v535 = v128[24];
    v536 = v128[25];
    v537 = (int8x16_t)vaddq_s16(v535, v533);
    v538 = vaddq_s16((int16x8_t)v537, v114);
    v539 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v538), v537), (int8x16_t)vmaxq_s16(v538, (int16x8_t)0));
    v540 = (uint16x8_t)vdupq_n_s16(0x2AFu);
    v541 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v535, v540), (uint16x8_t)v533, v540);
    v542 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v535.i8, *(uint16x4_t *)v540.i8), *(uint16x4_t *)v533.i8, *(uint16x4_t *)v540.i8);
    v543 = vdupq_n_s32(0x22E5AFu);
    v544 = (uint32x4_t)vaddq_s32(v542, v543);
    v545 = (uint32x4_t)vaddq_s32(v541, v543);
    v546 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v544, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v544.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v544, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v545, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v545.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v545, v1492), 0x18uLL), v212));
    v547 = vaddq_s16((int16x8_t)v546, v114);
    v548 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v547), v546), (int8x16_t)vmaxq_s16(v547, (int16x8_t)0));
    v549 = (int8x16_t)vaddq_s16(v536, v534);
    v550 = vaddq_s16((int16x8_t)v549, v114);
    v128[24] = (int16x8_t)v539;
    v128[25] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v550), v549), (int8x16_t)vmaxq_s16(v550, (int16x8_t)0));
    v551 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v536, v540), (uint16x8_t)v534, v540);
    v552 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v536.i8, *(uint16x4_t *)v540.i8), *(uint16x4_t *)v534.i8, *(uint16x4_t *)v540.i8), v543);
    v553 = (uint32x4_t)vaddq_s32(v551, v543);
    v554 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v552, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v552.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v552, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v553, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v553.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v553, v1492), 0x18uLL), v212));
    v555 = vaddq_s16((int16x8_t)v554, v114);
    v128[28] = (int16x8_t)v548;
    v128[29] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v555), v554), (int8x16_t)vmaxq_s16(v555, (int16x8_t)0));
    v556 = v128[30];
    v557 = v128[31];
    v558 = v128[26];
    v559 = v128[27];
    v560 = (int8x16_t)vaddq_s16(v558, v556);
    v561 = vaddq_s16((int16x8_t)v560, v114);
    v562 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v561), v560), (int8x16_t)vmaxq_s16(v561, (int16x8_t)0));
    v563 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v558, v540), (uint16x8_t)v556, v540);
    v564 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v558.i8, *(uint16x4_t *)v540.i8), *(uint16x4_t *)v556.i8, *(uint16x4_t *)v540.i8), v543);
    v565 = (uint32x4_t)vaddq_s32(v563, v543);
    v566 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v564, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v564.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v564, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v565, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v565.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v565, v1492), 0x18uLL), v212));
    v567 = vaddq_s16((int16x8_t)v566, v114);
    v568 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v567), v566), (int8x16_t)vmaxq_s16(v567, (int16x8_t)0));
    v569 = (int8x16_t)vaddq_s16(v559, v557);
    v570 = vaddq_s16((int16x8_t)v569, v114);
    v128[26] = (int16x8_t)v562;
    v128[27] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v570), v569), (int8x16_t)vmaxq_s16(v570, (int16x8_t)0));
    v571 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v559, v540), (uint16x8_t)v557, v540);
    v572 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v559.i8, *(uint16x4_t *)v540.i8), *(uint16x4_t *)v557.i8, *(uint16x4_t *)v540.i8), v543);
    v573 = (uint32x4_t)vaddq_s32(v571, v543);
    v574 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v572, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v572.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v572, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v573, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v573.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v573, v1492), 0x18uLL), v212));
    v575 = vaddq_s16((int16x8_t)v574, v114);
    v128[30] = (int16x8_t)v568;
    v128[31] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v575), v574), (int8x16_t)vmaxq_s16(v575, (int16x8_t)0));
    v576 = v128[8];
    v577 = v128[9];
    v578 = v128[1];
    v579 = (int8x16_t)vaddq_s16(*v128, v576);
    v580 = vaddq_s16((int16x8_t)v579, v114);
    v581 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v580), v579), (int8x16_t)vmaxq_s16(v580, (int16x8_t)0));
    v275.i64[0] = 0x28002800280028;
    v275.i64[1] = 0x28002800280028;
    v582 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(*(uint16x8_t *)v128, v275), (uint16x8_t)v576, v275);
    v583 = vdupq_n_s32(0x20828u);
    v584 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v128->i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v576.i8, (uint16x4_t)0x28002800280028), v583);
    v585 = (uint32x4_t)vaddq_s32(v582, v583);
    v586 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v584, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v584.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v584, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v585, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v585.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v585, v1492), 0x18uLL), v212));
    v587 = vaddq_s16((int16x8_t)v586, v114);
    v588 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v587), v586), (int8x16_t)vmaxq_s16(v587, (int16x8_t)0));
    v589 = (int8x16_t)vaddq_s16(v578, v577);
    v590 = vaddq_s16((int16x8_t)v589, v114);
    *v128 = (int16x8_t)v581;
    v128[1] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v590), v589), (int8x16_t)vmaxq_s16(v590, (int16x8_t)0));
    v591 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v578, v275), (uint16x8_t)v577, v275);
    v592 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v578.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v577.i8, (uint16x4_t)0x28002800280028), v583);
    v593 = (uint32x4_t)vaddq_s32(v591, v583);
    v594 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v592, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v592.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v592, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v593, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v593.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v593, v1492), 0x18uLL), v212));
    v595 = vaddq_s16((int16x8_t)v594, v114);
    v128[8] = (int16x8_t)v588;
    v128[9] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v595), v594), (int8x16_t)vmaxq_s16(v595, (int16x8_t)0));
    v596 = v128[10];
    v597 = v128[11];
    v598 = v128[2];
    v599 = v128[3];
    v600 = (int8x16_t)vaddq_s16(v598, v596);
    v601 = vaddq_s16((int16x8_t)v600, v114);
    v602 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v601), v600), (int8x16_t)vmaxq_s16(v601, (int16x8_t)0));
    v603 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v598, v275), (uint16x8_t)v596, v275);
    v604 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v598.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v596.i8, (uint16x4_t)0x28002800280028), v583);
    v605 = (uint32x4_t)vaddq_s32(v603, v583);
    v606 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v604, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v604.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v604, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v605, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v605.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v605, v1492), 0x18uLL), v212));
    v607 = vaddq_s16((int16x8_t)v606, v114);
    v608 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v607), v606), (int8x16_t)vmaxq_s16(v607, (int16x8_t)0));
    v609 = (int8x16_t)vaddq_s16(v599, v597);
    v610 = vaddq_s16((int16x8_t)v609, v114);
    v128[2] = (int16x8_t)v602;
    v128[3] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v610), v609), (int8x16_t)vmaxq_s16(v610, (int16x8_t)0));
    v611 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v599, v275), (uint16x8_t)v597, v275);
    v612 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v599.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v597.i8, (uint16x4_t)0x28002800280028), v583);
    v613 = (uint32x4_t)vaddq_s32(v611, v583);
    v614 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v612, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v612.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v612, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v613, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v613.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v613, v1492), 0x18uLL), v212));
    v615 = vaddq_s16((int16x8_t)v614, v114);
    v128[10] = (int16x8_t)v608;
    v128[11] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v615), v614), (int8x16_t)vmaxq_s16(v615, (int16x8_t)0));
    v616 = v128[12];
    v617 = v128[13];
    v618 = v128[4];
    v619 = v128[5];
    v620 = (int8x16_t)vaddq_s16(v618, v616);
    v621 = vaddq_s16((int16x8_t)v620, v114);
    v622 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v621), v620), (int8x16_t)vmaxq_s16(v621, (int16x8_t)0));
    v623 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v618, v275), (uint16x8_t)v616, v275);
    v624 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v618.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v616.i8, (uint16x4_t)0x28002800280028), v583);
    v625 = (uint32x4_t)vaddq_s32(v623, v583);
    v626 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v624, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v624.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v624, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v625, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v625.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v625, v1492), 0x18uLL), v212));
    v627 = vaddq_s16((int16x8_t)v626, v114);
    v628 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v627), v626), (int8x16_t)vmaxq_s16(v627, (int16x8_t)0));
    v629 = (int8x16_t)vaddq_s16(v619, v617);
    v630 = vaddq_s16((int16x8_t)v629, v114);
    v128[4] = (int16x8_t)v622;
    v128[5] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v630), v629), (int8x16_t)vmaxq_s16(v630, (int16x8_t)0));
    v631 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v619, v275), (uint16x8_t)v617, v275);
    v632 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v619.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v617.i8, (uint16x4_t)0x28002800280028), v583);
    v633 = (uint32x4_t)vaddq_s32(v631, v583);
    v634 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v632, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v632.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v632, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v633, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v633.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v633, v1492), 0x18uLL), v212));
    v635 = vaddq_s16((int16x8_t)v634, v114);
    v128[12] = (int16x8_t)v628;
    v128[13] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v635), v634), (int8x16_t)vmaxq_s16(v635, (int16x8_t)0));
    v636 = v128[14];
    v637 = v128[15];
    v638 = v128[6];
    v639 = v128[7];
    v640 = (int8x16_t)vaddq_s16(v638, v636);
    v641 = vaddq_s16((int16x8_t)v640, v114);
    v642 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v641), v640), (int8x16_t)vmaxq_s16(v641, (int16x8_t)0));
    v643 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v638, v275), (uint16x8_t)v636, v275);
    v644 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v638.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v636.i8, (uint16x4_t)0x28002800280028), v583);
    v645 = (uint32x4_t)vaddq_s32(v643, v583);
    v646 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v644, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v644.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v644, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v645, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v645.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v645, v1492), 0x18uLL), v212));
    v647 = vaddq_s16((int16x8_t)v646, v114);
    v648 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v647), v646), (int8x16_t)vmaxq_s16(v647, (int16x8_t)0));
    v649 = (int8x16_t)vaddq_s16(v639, v637);
    v650 = vaddq_s16((int16x8_t)v649, v114);
    v128[6] = (int16x8_t)v642;
    v128[7] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v650), v649), (int8x16_t)vmaxq_s16(v650, (int16x8_t)0));
    v651 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v639, v275), (uint16x8_t)v637, v275);
    v652 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v639.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v637.i8, (uint16x4_t)0x28002800280028), v583);
    v653 = (uint32x4_t)vaddq_s32(v651, v583);
    v654 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v652, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v652.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v652, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v653, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v653.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v653, v1492), 0x18uLL), v212));
    v655 = vaddq_s16((int16x8_t)v654, v114);
    v128[14] = (int16x8_t)v648;
    v128[15] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v655), v654), (int8x16_t)vmaxq_s16(v655, (int16x8_t)0));
    v656 = v128[24];
    v657 = v128[25];
    v658 = v128[16];
    v659 = v128[17];
    v660 = (int8x16_t)vaddq_s16(v658, v656);
    v661 = vaddq_s16((int16x8_t)v660, v114);
    v662 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v661), v660), (int8x16_t)vmaxq_s16(v661, (int16x8_t)0));
    v663 = (uint16x8_t)vdupq_n_s16(0x2EDu);
    v664 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v658, v663), (uint16x8_t)v656, v663);
    v665 = vdupq_n_s32(0x260BEDu);
    v666 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v658.i8, *(uint16x4_t *)v663.i8), *(uint16x4_t *)v656.i8, *(uint16x4_t *)v663.i8), v665);
    v667 = (uint32x4_t)vaddq_s32(v664, v665);
    v668 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v666, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v666.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v666, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v667, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v667.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v667, v1492), 0x18uLL), v212));
    v669 = vaddq_s16((int16x8_t)v668, v114);
    v670 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v669), v668), (int8x16_t)vmaxq_s16(v669, (int16x8_t)0));
    v671 = (int8x16_t)vaddq_s16(v659, v657);
    v672 = vaddq_s16((int16x8_t)v671, v114);
    v128[16] = (int16x8_t)v662;
    v128[17] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v672), v671), (int8x16_t)vmaxq_s16(v672, (int16x8_t)0));
    v673 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v659, v663), (uint16x8_t)v657, v663);
    v674 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v659.i8, *(uint16x4_t *)v663.i8), *(uint16x4_t *)v657.i8, *(uint16x4_t *)v663.i8), v665);
    v675 = (uint32x4_t)vaddq_s32(v673, v665);
    v676 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v674, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v674.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v674, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v675, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v675.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v675, v1492), 0x18uLL), v212));
    v677 = vaddq_s16((int16x8_t)v676, v114);
    v128[24] = (int16x8_t)v670;
    v128[25] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v677), v676), (int8x16_t)vmaxq_s16(v677, (int16x8_t)0));
    v678 = v128[26];
    v679 = v128[27];
    v680 = v128[18];
    v681 = v128[19];
    v682 = (int8x16_t)vaddq_s16(v680, v678);
    v683 = vaddq_s16((int16x8_t)v682, v114);
    v684 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v683), v682), (int8x16_t)vmaxq_s16(v683, (int16x8_t)0));
    v685 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v680, v663), (uint16x8_t)v678, v663);
    v686 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v680.i8, *(uint16x4_t *)v663.i8), *(uint16x4_t *)v678.i8, *(uint16x4_t *)v663.i8), v665);
    v687 = (uint32x4_t)vaddq_s32(v685, v665);
    v688 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v686, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v686.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v686, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v687, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v687.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v687, v1492), 0x18uLL), v212));
    v689 = vaddq_s16((int16x8_t)v688, v114);
    v690 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v689), v688), (int8x16_t)vmaxq_s16(v689, (int16x8_t)0));
    v691 = (int8x16_t)vaddq_s16(v681, v679);
    v692 = vaddq_s16((int16x8_t)v691, v114);
    v128[18] = (int16x8_t)v684;
    v128[19] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v692), v691), (int8x16_t)vmaxq_s16(v692, (int16x8_t)0));
    v693 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v681, v663), (uint16x8_t)v679, v663);
    v694 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v681.i8, *(uint16x4_t *)v663.i8), *(uint16x4_t *)v679.i8, *(uint16x4_t *)v663.i8), v665);
    v695 = (uint32x4_t)vaddq_s32(v693, v665);
    v696 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v694, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v694.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v694, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v695, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v695.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v695, v1492), 0x18uLL), v212));
    v697 = vaddq_s16((int16x8_t)v696, v114);
    v128[26] = (int16x8_t)v690;
    v128[27] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v697), v696), (int8x16_t)vmaxq_s16(v697, (int16x8_t)0));
    v698 = v128[28];
    v699 = v128[29];
    v700 = v128[20];
    v701 = v128[21];
    v702 = (int8x16_t)vaddq_s16(v700, v698);
    v703 = vaddq_s16((int16x8_t)v702, v114);
    v704 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v703), v702), (int8x16_t)vmaxq_s16(v703, (int16x8_t)0));
    v705 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v700, v663), (uint16x8_t)v698, v663);
    v706 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v700.i8, *(uint16x4_t *)v663.i8), *(uint16x4_t *)v698.i8, *(uint16x4_t *)v663.i8), v665);
    v707 = (uint32x4_t)vaddq_s32(v705, v665);
    v708 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v706, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v706.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v706, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v707, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v707.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v707, v1492), 0x18uLL), v212));
    v709 = vaddq_s16((int16x8_t)v708, v114);
    v710 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v709), v708), (int8x16_t)vmaxq_s16(v709, (int16x8_t)0));
    v711 = (int8x16_t)vaddq_s16(v701, v699);
    v712 = vaddq_s16((int16x8_t)v711, v114);
    v128[20] = (int16x8_t)v704;
    v128[21] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v712), v711), (int8x16_t)vmaxq_s16(v712, (int16x8_t)0));
    v713 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v701, v663), (uint16x8_t)v699, v663);
    v714 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v701.i8, *(uint16x4_t *)v663.i8), *(uint16x4_t *)v699.i8, *(uint16x4_t *)v663.i8), v665);
    v715 = (uint32x4_t)vaddq_s32(v713, v665);
    v716 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v714, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v714.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v714, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v715, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v715.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v715, v1492), 0x18uLL), v212));
    v717 = vaddq_s16((int16x8_t)v716, v114);
    v128[28] = (int16x8_t)v710;
    v128[29] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v717), v716), (int8x16_t)vmaxq_s16(v717, (int16x8_t)0));
    v718 = v128[30];
    v719 = v128[31];
    v720 = v128[22];
    v721 = v128[23];
    v722 = (int8x16_t)vaddq_s16(v720, v718);
    v723 = vaddq_s16((int16x8_t)v722, v114);
    v724 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v723), v722), (int8x16_t)vmaxq_s16(v723, (int16x8_t)0));
    v725 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v720, v663), (uint16x8_t)v718, v663);
    v726 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v720.i8, *(uint16x4_t *)v663.i8), *(uint16x4_t *)v718.i8, *(uint16x4_t *)v663.i8), v665);
    v727 = (uint32x4_t)vaddq_s32(v725, v665);
    v728 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v726, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v726.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v726, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v727, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v727.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v727, v1492), 0x18uLL), v212));
    v729 = vaddq_s16((int16x8_t)v728, v114);
    v730 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v729), v728), (int8x16_t)vmaxq_s16(v729, (int16x8_t)0));
    v731 = (int8x16_t)vaddq_s16(v721, v719);
    v732 = vaddq_s16((int16x8_t)v731, v114);
    v128[22] = (int16x8_t)v724;
    v128[23] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v732), v731), (int8x16_t)vmaxq_s16(v732, (int16x8_t)0));
    v733 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v721, v663), (uint16x8_t)v719, v663);
    v734 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v721.i8, *(uint16x4_t *)v663.i8), *(uint16x4_t *)v719.i8, *(uint16x4_t *)v663.i8), v665);
    v735 = (uint32x4_t)vaddq_s32(v733, v665);
    v736 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v734, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v734.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v734, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v735, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v735.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v735, v1492), 0x18uLL), v212));
    v737 = vaddq_s16((int16x8_t)v736, v114);
    v128[30] = (int16x8_t)v730;
    v128[31] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v737), v736), (int8x16_t)vmaxq_s16(v737, (int16x8_t)0));
    do
    {
      v738 = (int8x16_t *)&v126[v222];
      v739 = *(int16x8_t *)&v126[v222 + 128];
      v740 = *(int16x8_t *)&v126[v222];
      v741 = (int8x16_t)vaddq_s16(v740, v739);
      v742 = vaddq_s16((int16x8_t)v741, v114);
      v743 = (uint16x8_t)vdupq_n_s16(0x640u);
      v744 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v740, v743), (uint16x8_t)v739, v743);
      v745 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v740.i8, *(uint16x4_t *)v743.i8), *(uint16x4_t *)v739.i8, *(uint16x4_t *)v743.i8);
      v746 = vdupq_n_s32(0x514640u);
      v747 = (uint32x4_t)vaddq_s32(v745, v746);
      v748 = (uint32x4_t)vaddq_s32(v744, v746);
      v749 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v747, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v747.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v747, v1492), 0x18uLL), v212), (int16x8_t)vmlaq_s32((int32x4_t)v748, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v748.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v748, v1492), 0x18uLL), v212));
      v750 = vaddq_s16((int16x8_t)v749, v114);
      *v738 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v742), v741), (int8x16_t)vmaxq_s16(v742, (int16x8_t)0));
      v738[16] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v750), v749), (int8x16_t)vmaxq_s16(v750, (int16x8_t)0));
      v222 += 8;
    }
    while (v222 != 128);
    for (m = 0; m != 256; m += 8)
    {
      v752 = *(uint16x8_t *)&v126[m];
      v753 = (uint16x8_t)vdupq_n_s16(0xCE7u);
      v754 = vmull_u16(*(uint16x4_t *)v752.i8, *(uint16x4_t *)v753.i8);
      v755 = vmull_high_u16(v752, v753);
      v756 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v754.i8, *(uint32x2_t *)v1492.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v754, v1492), 0x18uLL), v212), *(uint16x4_t *)v752.i8, *(uint16x4_t *)v753.i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v755.i8,
                                                                      *(uint32x2_t *)v1492.i8),
                                                         0x18uLL),
                                                       (int64x2_t)vmull_high_u32(v755, v1492),
                                                       0x18uLL),
                                                     v212),
                                       v752,
                                       v753));
      v757 = vaddq_s16((int16x8_t)v756, v114);
      *(int8x16_t *)&v126[m] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v757), v756), (int8x16_t)vmaxq_s16(v757, (int16x8_t)0));
    }
    ++v113;
    v126 += 256;
  }
  while (v113 != 3);
  v758 = 0;
  v759.i64[0] = 0xD000D000D000D00;
  v759.i64[1] = 0xD000D000D000D00;
  do
  {
    v760 = (int8x16_t *)&v1530[v758 / 8];
    v761 = (int8x16_t)vaddq_s16((int16x8_t)v1534[v758 / 0x10], *(int16x8_t *)&v1530[v758 / 8]);
    v762 = (int8x16_t)vaddq_s16((int16x8_t)v1534[v758 / 0x10 + 1], *(int16x8_t *)&v1530[v758 / 8 + 2]);
    v763 = vaddq_s16((int16x8_t)v761, v759);
    v764 = vaddq_s16((int16x8_t)v762, v759);
    *v760 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v763), v761), (int8x16_t)vmaxq_s16(v763, (int16x8_t)0));
    v760[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v764), v762), (int8x16_t)vmaxq_s16(v764, (int16x8_t)0));
    v758 += 32;
  }
  while (v758 != 512);
  v765 = 528;
  v766.i64[0] = 0xD000D000D000D00;
  v766.i64[1] = 0xD000D000D000D00;
  do
  {
    v767 = (int8x16_t *)&v1530[v765 / 8];
    v768 = (int8x16_t)vaddq_s16((int16x8_t)v1534[v765 / 0x10 - 1], *(int16x8_t *)((char *)&v1529 + v765));
    v769 = (int8x16_t)vaddq_s16((int16x8_t)v1534[v765 / 0x10], *(int16x8_t *)&v1530[v765 / 8]);
    v770 = vaddq_s16((int16x8_t)v768, v766);
    v771 = vaddq_s16((int16x8_t)v769, v766);
    v767[-1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v770), v768), (int8x16_t)vmaxq_s16(v770, (int16x8_t)0));
    *v767 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v771), v769), (int8x16_t)vmaxq_s16(v771, (int16x8_t)0));
    v765 += 32;
  }
  while (v765 != 1040);
  v772.i64[0] = 0xD000D000D000D00;
  v772.i64[1] = 0xD000D000D000D00;
  do
  {
    v773 = (int8x16_t *)&v1530[v765 / 8];
    v774 = (int8x16_t)vaddq_s16((int16x8_t)v1534[v765 / 0x10 - 1], *(int16x8_t *)((char *)&v1529 + v765));
    v775 = (int8x16_t)vaddq_s16((int16x8_t)v1534[v765 / 0x10], *(int16x8_t *)&v1530[v765 / 8]);
    v776 = vaddq_s16((int16x8_t)v774, v772);
    v777 = vaddq_s16((int16x8_t)v775, v772);
    v773[-1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v776), v774), (int8x16_t)vmaxq_s16(v776, (int16x8_t)0));
    *v773 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v777), v775), (int8x16_t)vmaxq_s16(v777, (int16x8_t)0));
    v765 += 32;
  }
  while (v765 != 1552);
  v1570 = 0u;
  v1569 = 0u;
  v1568 = 0u;
  v1567 = 0u;
  v1566 = 0u;
  v1565 = 0u;
  v1564 = 0u;
  v1563 = 0u;
  v1562 = 0u;
  v1561 = 0u;
  v1560 = 0u;
  v1559 = 0u;
  v1558 = 0u;
  v1557 = 0u;
  v1556 = 0u;
  v1555 = 0u;
  v1554 = 0u;
  v1553 = 0u;
  v1552 = 0u;
  v1551 = 0u;
  v1550 = 0u;
  v1549 = 0u;
  v1548 = 0u;
  v1547 = 0u;
  v1546 = 0u;
  v1545 = 0u;
  v1544 = 0u;
  v1543 = 0u;
  v1542 = 0u;
  v1541 = 0u;
  v1540 = 0u;
  v1539 = 0u;
  scalar_inner_product(&v1539, v7, (uint64_t)v1535);
  v778 = 0;
  v779 = &xmmword_208F2B470;
  v780.i64[0] = 0xD000D000D000D00;
  v780.i64[1] = 0xD000D000D000D00;
  v781 = vdupq_n_s32(0xD01u);
  v782 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v783.i64[0] = 0xF2000000F2;
  v783.i64[1] = 0xF2000000F2;
  do
  {
    v784 = &v1539.i16[v778];
    v1605 = vld4q_s16(v784);
    v785 = (uint16x8_t)*v779++;
    v786 = (int32x4_t)vmovl_high_u16(v785);
    v787 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v785.i8);
    v788 = (int8x16_t)vaddq_s16(v1605.val[0], v1605.val[2]);
    v789 = vaddq_s16((int16x8_t)v788, v780);
    v790 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v1605.val[0].i8, *(uint16x4_t *)v1605.val[2].i8), v781), v787);
    v791 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_high_u16((uint16x8_t)v1605.val[0], (uint16x8_t)v1605.val[2]), v781), v786);
    v1608.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v789), v788), (int8x16_t)vmaxq_s16(v789, (int16x8_t)0));
    v792 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v790, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v790.i8, *(uint32x2_t *)v782.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v790, v782), 0x18uLL), v783), (int16x8_t)vmlaq_s32((int32x4_t)v791, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v791.i8, *(uint32x2_t *)v782.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v791, v782), 0x18uLL), v783));
    v793 = vaddq_s16((int16x8_t)v792, v780);
    v794 = (int8x16_t)vaddq_s16(v1605.val[1], v1605.val[3]);
    v795 = vaddq_s16((int16x8_t)v794, v780);
    v1605.val[0] = (int16x8_t)vaddq_s32((int32x4_t)vsubl_high_u16((uint16x8_t)v1605.val[1], (uint16x8_t)v1605.val[3]), v781);
    v1605.val[1] = (int16x8_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v1605.val[1].i8, *(uint16x4_t *)v1605.val[3].i8), v781), v787);
    v1605.val[0] = (int16x8_t)vmulq_s32((int32x4_t)v1605.val[0], v786);
    v1608.val[2] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v793), v792), (int8x16_t)vmaxq_s16(v793, (int16x8_t)0));
    v1608.val[1] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v795), v794), (int8x16_t)vmaxq_s16(v795, (int16x8_t)0));
    v1605.val[0] = vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1605.val[1], vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1605.val[1].i8, *(uint32x2_t *)v782.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v1605.val[1], v782), 0x18uLL), v783), (int16x8_t)vmlaq_s32((int32x4_t)v1605.val[0], vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1605.val[0].i8, *(uint32x2_t *)v782.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v1605.val[0], v782), 0x18uLL), v783));
    v1605.val[1] = vaddq_s16(v1605.val[0], v780);
    v1608.val[3] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1605.val[1]), (int8x16_t)v1605.val[0]), (int8x16_t)vmaxq_s16(v1605.val[1], (int16x8_t)0));
    vst4q_s16(v784, v1608);
    v778 += 32;
  }
  while (v778 != 256);
  v796 = 0;
  v797 = &xmmword_208F2B430;
  v799 = (int8x16_t)xmmword_208F2B0B0;
  v798 = (int8x16_t)xmmword_208F2B160;
  v800 = (int8x16_t)xmmword_208F2B180;
  v801 = (int8x16_t)xmmword_208F2B0E0;
  v802 = (int8x16_t)xmmword_208F2B100;
  v803 = (int8x16_t)xmmword_208F2B0F0;
  v804 = (int8x16_t)xmmword_208F2B0C0;
  v806 = (int8x16_t)xmmword_208F2B140;
  v805 = (int8x16_t)xmmword_208F2B130;
  v807 = (int8x16_t)xmmword_208F2B110;
  v808 = (int8x16_t)xmmword_208F2B120;
  do
  {
    v809 = (uint16x8_t)*v797++;
    v810 = &v1539.i8[v796 * 8];
    v1576.val[0] = *(int8x16_t *)((char *)&v1545 + v796 * 8);
    v1576.val[1] = *(int8x16_t *)((char *)&v1546 + v796 * 8);
    v1592.val[0] = *(int8x16_t *)((char *)&v1543 + v796 * 8);
    v1592.val[1] = *(int8x16_t *)((char *)&v1544 + v796 * 8);
    v1497 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v809.i8);
    v1500 = (int32x4_t)vmovl_high_u16(v809);
    v1589.val[0] = *(int8x16_t *)((char *)&v1541 + v796 * 8);
    v1589.val[1] = *(int8x16_t *)((char *)&v1542 + v796 * 8);
    v811 = vqtbl2q_s8(v1592, v799);
    v1594 = *(int8x16x2_t *)&v1539.i8[v796 * 8];
    v812.i32[0] = vzip1q_s16((int16x8_t)v1594.val[0], (int16x8_t)v1594.val[1]).u32[0];
    v811.i32[3] = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B0A0).i32[3];
    v812.i32[1] = vqtbl2q_s8(v1589, v804).i32[1];
    v813 = vqtbl2q_s8(v1592, v801);
    v813.i32[3] = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B0D0).i32[3];
    v814.i32[0] = vtrn2q_s16((int16x8_t)v1594.val[0], (int16x8_t)v1594.val[1]).u32[0];
    v815 = vqtbl2q_s8(v1592, v807);
    v814.i32[1] = vqtbl2q_s8(v1589, v803).i32[1];
    LOWORD(v816) = WORD2(v1541.i64[v796]);
    HIWORD(v816) = WORD2(v1542.i64[v796]);
    LODWORD(v817) = vqtbl2q_s8(v1594, v808).u32[0];
    v815.i32[3] = vqtbl2q_s8(v1576, v802).i32[3];
    v818 = (int16x8_t)vqtbl2q_s8(v1592, v806);
    LODWORD(v819) = vqtbl2q_s8(v1594, (int8x16_t)xmmword_208F2B150).u32[0];
    v818.i32[3] = vqtbl2q_s8(v1576, v805).i32[3];
    LOWORD(v820) = v1543.i64[v796 + 1];
    WORD1(v820) = v1544.i64[v796 + 1];
    v821 = (int16x8_t)vqtbl2q_s8(v1576, v798);
    HIDWORD(v819) = vtrn2q_s16(*(int16x8_t *)&v1589, *(int16x8_t *)(&v1589 + 16)).i32[1];
    v822.i64[0] = v819;
    v823.i32[0] = vzip2q_s16((int16x8_t)v1594.val[0], (int16x8_t)v1594.val[1]).u32[0];
    v824.i32[0] = v823.i32[0];
    v825 = vtrn2q_s16((int16x8_t)v1592.val[0], (int16x8_t)v1592.val[1]);
    v824.i32[1] = vqtbl2q_s8(v1589, (int8x16_t)xmmword_208F2B170).i32[1];
    v825.i32[3] = vqtbl2q_s8(v1576, v800).i32[3];
    HIDWORD(v817) = v816;
    v826.i64[0] = v817;
    v827.i32[0] = vqtbl2q_s8(v1594, (int8x16_t)xmmword_208F2B190).u32[0];
    v828.i32[0] = v827.i32[0];
    v828.i32[1] = vzip2q_s16(*(int16x8_t *)&v1589, *(int16x8_t *)(&v1589 + 16)).i32[1];
    HIDWORD(v820) = v821.i32[3];
    LOWORD(v829) = v1576.val[0].i16[6];
    HIWORD(v829) = v1576.val[1].i16[6];
    v830 = vzip2q_s16((int16x8_t)v1592.val[0], (int16x8_t)v1592.val[1]);
    v812.i64[1] = v811.i64[1];
    v811.i64[1] = __PAIR64__(v829, v830.u32[2]);
    v831 = vqtbl2q_s8(v1592, (int8x16_t)xmmword_208F2B1C0);
    v814.i64[1] = v813.i64[1];
    v832 = vzip2q_s16((int16x8_t)v1576.val[0], (int16x8_t)v1576.val[1]);
    v831.i32[3] = v832.i32[3];
    v833 = vqtbl2q_s8(v1589, (int8x16_t)xmmword_208F2B1D0);
    v822.i64[1] = v818.i64[1];
    v818.i32[0] = vqtbl2q_s8(v1594, (int8x16_t)xmmword_208F2B1E0).u32[0];
    v818.i32[1] = v833.i32[1];
    v828.i64[1] = v825.i64[1];
    v830.i32[1] = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B170).i32[1];
    v818.i64[1] = v831.i64[1];
    v825.i32[0] = vqtbl2q_s8(v1594, (int8x16_t)xmmword_208F2B1B0).u32[0];
    v823.i32[1] = v824.i32[1];
    v834 = (int8x8_t)vzip1_s16(*(int16x4_t *)v1576.val[0].i8, *(int16x4_t *)v1576.val[1].i8);
    v826.i64[1] = v815.i64[1];
    v1503 = v826;
    v815.i32[0] = vzip1_s16(*(int16x4_t *)v1592.val[0].i8, *(int16x4_t *)v1592.val[1].i8).u32[0];
    v815.i32[1] = vext_s8(*(int8x8_t *)&v1576, v834, 4uLL).i32[1];
    v824.i64[1] = v820;
    *(int16x4_t *)v831.i8 = vzip1_s16(*(int16x4_t *)v1589.val[0].i8, *(int16x4_t *)v1589.val[1].i8);
    v835.i32[0] = vzip1_s16(*(int16x4_t *)v1594.val[0].i8, *(int16x4_t *)v1594.val[1].i8).u32[0];
    v835.i32[1] = vext_s8(*(int8x8_t *)&v1589, *(int8x8_t *)&v831, 4uLL).i32[1];
    v826.i32[0] = v825.i32[0];
    v826.i32[1] = vqtbl2q_s8(v1589, (int8x16_t)xmmword_208F2B1A0).i32[1];
    v836 = (int32x4_t)vsubl_u16(v835, v823);
    v826.i64[1] = v811.i64[1];
    v837 = vdupq_n_s32(0xD01u);
    v838 = (uint32x4_t)vmulq_s32(vaddq_s32(v836, v837), v1497);
    v839 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v815.i8, *(uint16x4_t *)v830.i8), v837), v1500);
    v840 = (uint32x4_t)vdupq_n_s32(0x13AFu);
    v811.i32[0] = vqtbl2q_s8(v1592, (int8x16_t)xmmword_208F2B190).u32[0];
    v811.i32[1] = v832.i32[1];
    v827.i32[1] = v828.i32[1];
    v841.i32[0] = vtrn2_s16(*(int16x4_t *)v1592.val[0].i8, *(int16x4_t *)v1592.val[1].i8).u32[0];
    v841.i32[1] = v834.i32[1];
    v842 = (int8x16_t)vaddq_s16(v812, v824);
    v824.i32[0] = vtrn2_s16(*(int16x4_t *)v1594.val[0].i8, *(int16x4_t *)v1594.val[1].i8).u32[0];
    v824.i32[1] = v831.i32[1];
    v843 = (int8x16_t)vaddq_s16(v814, v828);
    v821.i64[0] = 0xD000D000D000D00;
    v821.i64[1] = 0xD000D000D000D00;
    v844 = vaddq_s16((int16x8_t)v843, v821);
    v845 = vandq_s8((int8x16_t)vcltzq_s16(v844), v843);
    v846 = vaddq_s16((int16x8_t)v842, v821);
    v1597.val[0] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v846), v842), (int8x16_t)vmaxq_s16(v846, (int16x8_t)0));
    v1597.val[1] = vorrq_s8(v845, (int8x16_t)vmaxq_s16(v844, (int16x8_t)0));
    v847 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v824.i8, v827), v837), v1497);
    v848 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(v841, *(uint16x4_t *)v811.i8), v837), v1500);
    v849.i64[0] = 0xF2000000F2;
    v849.i64[1] = 0xF2000000F2;
    v845.i32[0] = vqtbl2q_s8(v1592, (int8x16_t)xmmword_208F2B1B0).u32[0];
    v845.i32[1] = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B1A0).i32[1];
    v825.i32[1] = v826.i32[1];
    v811.i16[2] = WORD2(v1545.i64[v796]);
    v842.i32[0] = vzip2_s16(*(int16x4_t *)v1592.val[0].i8, *(int16x4_t *)v1592.val[1].i8).u32[0];
    v811.i16[3] = WORD2(v1546.i64[v796]);
    v842.i32[1] = v811.i32[1];
    v811.i16[2] = WORD2(v1541.i64[v796]);
    v811.i16[3] = WORD2(v1542.i64[v796]);
    v850.i32[0] = vzip2_s16(*(int16x4_t *)v1594.val[0].i8, *(int16x4_t *)v1594.val[1].i8).u32[0];
    v850.i32[1] = v811.i32[1];
    v851 = (int8x16_t)vaddq_s16(v1503, v826);
    v852 = vaddq_s16((int16x8_t)v851, v821);
    v853 = vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v842.i8, *(uint16x4_t *)v845.i8), v837);
    v854 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v847, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v847.i8, *(uint32x2_t *)v840.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v847, v840), 0x18uLL), v849), (int16x8_t)vmlaq_s32((int32x4_t)v848, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v848.i8, *(uint32x2_t *)v840.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v848, v840), 0x18uLL), v849));
    v802 = (int8x16_t)xmmword_208F2B100;
    v855 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(v850, *(uint16x4_t *)v825.i8), v837), v1497);
    v856 = (uint32x4_t)vmulq_s32(v853, v1500);
    v825.i32[0] = vuzp2_s16(vuzp2_s16(*(int16x4_t *)v1594.val[0].i8, *(int16x4_t *)v1594.val[1].i8), *(int16x4_t *)v1594.val[0].i8).u32[0];
    v857 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v838, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v838.i8, *(uint32x2_t *)v840.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v838, v840), 0x18uLL), v849), (int16x8_t)vmlaq_s32((int32x4_t)v839, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v839.i8, *(uint32x2_t *)v840.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v839, v840), 0x18uLL), v849));
    v858 = vaddq_s16((int16x8_t)v854, v821);
    v859 = vandq_s8((int8x16_t)vcltzq_s16(v858), v854);
    v860 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v855, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v855.i8, *(uint32x2_t *)v840.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v855, v840), 0x18uLL), v849), (int16x8_t)vmlaq_s32((int32x4_t)v856, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v856.i8, *(uint32x2_t *)v840.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v856, v840), 0x18uLL), v849));
    v861 = (int8x16_t)vaddq_s16(v822, v818);
    v862 = vaddq_s16((int16x8_t)v861, v821);
    v1594.val[0] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v852), v851), (int8x16_t)vmaxq_s16(v852, (int16x8_t)0));
    v1594.val[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v862), v861), (int8x16_t)vmaxq_s16(v862, (int16x8_t)0));
    v852.i32[0] = vuzp2_s16(vuzp2_s16(*(int16x4_t *)v1592.val[0].i8, *(int16x4_t *)v1592.val[1].i8), *(int16x4_t *)v1592.val[0].i8).u32[0];
    v863 = vaddq_s16((int16x8_t)v857, v821);
    v861.i32[0] = vqtbl2q_s8(v1592, (int8x16_t)xmmword_208F2B1E0).u32[0];
    v861.i32[1] = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B1D0).i32[1];
    v852.i32[1] = vzip2_s16(*(int16x4_t *)&v1576, *(int16x4_t *)(&v1576 + 16)).i32[1];
    v1592.val[0] = (int8x16_t)vmaxq_s16(v858, (int16x8_t)0);
    v808 = (int8x16_t)xmmword_208F2B120;
    v1576.val[1] = (int8x16_t)vaddq_s16((int16x8_t)v860, v821);
    v825.i32[1] = vzip2_s16(*(int16x4_t *)&v1589, *(int16x4_t *)(&v1589 + 16)).i32[1];
    v1589.val[0] = (int8x16_t)vcltzq_s16((int16x8_t)v1576.val[1]);
    v1589.val[1] = (int8x16_t)vmaxq_s16((int16x8_t)v1576.val[1], (int16x8_t)0);
    v1576.val[0] = (int8x16_t)vsubl_u16(*(uint16x4_t *)v825.i8, (uint16x4_t)__PAIR64__(v833.u32[1], v818.u32[0]));
    v798 = (int8x16_t)xmmword_208F2B160;
    v864 = vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v852.i8, *(uint16x4_t *)v861.i8), v837);
    v865 = vaddq_s32((int32x4_t)v1576.val[0], v837);
    v1576.val[0] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v863), v857), (int8x16_t)vmaxq_s16(v863, (int16x8_t)0));
    v866 = (uint32x4_t)vmulq_s32(v865, v1497);
    v805 = (int8x16_t)xmmword_208F2B130;
    v801 = (int8x16_t)xmmword_208F2B0E0;
    v799 = (int8x16_t)xmmword_208F2B0B0;
    v867 = (uint32x4_t)vmulq_s32(v864, v1500);
    v868 = (int64x2_t)vmull_high_u32(v866, v840);
    v869 = (int64x2_t)vmull_u32(*(uint32x2_t *)v866.i8, *(uint32x2_t *)v840.i8);
    v870 = (int64x2_t)vmull_high_u32(v867, v840);
    v1576.val[1] = vorrq_s8(v859, v1592.val[0]);
    v1592.val[0] = (int8x16_t)vmull_u32(*(uint32x2_t *)v867.i8, *(uint32x2_t *)v840.i8);
    v807 = (int8x16_t)xmmword_208F2B110;
    v803 = (int8x16_t)xmmword_208F2B0F0;
    v804 = (int8x16_t)xmmword_208F2B0C0;
    v871 = (int16x8_t)vmlaq_s32((int32x4_t)v867, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)v1592.val[0], 0x18uLL), v870, 0x18uLL), v849);
    v872 = (int16x8_t)vmlaq_s32((int32x4_t)v866, vshrn_high_n_s64(vshrn_n_s64(v869, 0x18uLL), v868, 0x18uLL), v849);
    v806 = (int8x16_t)xmmword_208F2B140;
    v873 = (int8x16_t)vuzp1q_s16(v872, v871);
    v874 = vaddq_s16((int16x8_t)v873, v821);
    v1589.val[0] = vorrq_s8(vandq_s8(v1589.val[0], v860), v1589.val[1]);
    v1589.val[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v874), v873), (int8x16_t)vmaxq_s16(v874, (int16x8_t)0));
    v1592.val[0] = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B0E0);
    v868.i32[0] = vtrn2q_s16((int16x8_t)v1597.val[0], (int16x8_t)v1597.val[1]).u32[0];
    v800 = (int8x16_t)xmmword_208F2B180;
    v868.i32[1] = vqtbl2q_s8(v1594, (int8x16_t)xmmword_208F2B0F0).i32[1];
    v875 = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B0B0);
    v870.i32[0] = vzip1q_s16((int16x8_t)v1597.val[0], (int16x8_t)v1597.val[1]).u32[0];
    v870.i32[1] = vqtbl2q_s8(v1594, (int8x16_t)xmmword_208F2B0C0).i32[1];
    v876 = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B140);
    v1592.val[0].i32[3] = vqtbl2q_s8(v1589, (int8x16_t)xmmword_208F2B0D0).i32[3];
    v873.i32[0] = vqtbl2q_s8(v1597, (int8x16_t)xmmword_208F2B150).u32[0];
    v873.i32[1] = vtrn2q_s16(*(int16x8_t *)&v1594, *(int16x8_t *)(&v1594 + 16)).i32[1];
    v875.i32[3] = vqtbl2q_s8(v1589, (int8x16_t)xmmword_208F2B0A0).i32[3];
    v1592.val[1] = vqtbl2q_s8(v1589, (int8x16_t)xmmword_208F2B100);
    v877 = vqtbl2q_s8(v1589, (int8x16_t)xmmword_208F2B180);
    v878 = vqtbl2q_s8(v1589, (int8x16_t)xmmword_208F2B160);
    v876.i32[3] = vqtbl2q_s8(v1589, (int8x16_t)xmmword_208F2B130).i32[3];
    v879 = vzip2q_s16((int16x8_t)v1589.val[0], (int16x8_t)v1589.val[1]);
    v880 = vzip2q_s16((int16x8_t)v1576.val[0], (int16x8_t)v1576.val[1]);
    v1589.val[0].i16[7] = v1589.val[1].i16[6];
    v880.i32[3] = v1589.val[0].i32[3];
    v1589.val[0].i16[2] = v1594.val[0].i16[2];
    v1589.val[1] = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B110);
    v1589.val[0].i16[3] = v1594.val[1].i16[2];
    v1589.val[1].i32[3] = v1592.val[1].i32[3];
    v1592.val[1].i32[0] = vqtbl2q_s8(v1597, (int8x16_t)xmmword_208F2B120).u32[0];
    v1592.val[1].i32[1] = v1589.val[0].i32[1];
    v868.i64[1] = v1592.val[0].i64[1];
    v1589.val[0] = (int8x16_t)vtrn2q_s16((int16x8_t)v1576.val[0], (int16x8_t)v1576.val[1]);
    v1589.val[0].i32[3] = v877.i32[3];
    v873.i64[1] = v876.i64[1];
    v1592.val[0].i32[0] = vqtbl2q_s8(v1597, (int8x16_t)xmmword_208F2B190).u32[0];
    v1592.val[0].i32[1] = vzip2q_s16(*(int16x8_t *)&v1594, *(int16x8_t *)(&v1594 + 16)).i32[1];
    v876.i16[4] = v1576.val[0].i16[4];
    v876.i16[5] = v1576.val[1].i16[4];
    v876.i32[3] = v878.i32[3];
    v1592.val[1].i64[1] = v1589.val[1].i64[1];
    v1589.val[1].i32[0] = vzip2q_s16((int16x8_t)v1597.val[0], (int16x8_t)v1597.val[1]).u32[0];
    v1589.val[1].i32[1] = vqtbl2q_s8(v1594, (int8x16_t)xmmword_208F2B170).i32[1];
    v1592.val[0].i64[1] = v1589.val[0].i64[1];
    v1576.val[0] = vqtbl2q_s8(v1576, (int8x16_t)xmmword_208F2B1C0);
    v1576.val[0].i32[3] = v879.i32[3];
    v1589.val[1].i64[1] = v876.i64[1];
    v876.i32[0] = vqtbl2q_s8(v1597, (int8x16_t)xmmword_208F2B1E0).u32[0];
    v876.i32[1] = vqtbl2q_s8(v1594, (int8x16_t)xmmword_208F2B1D0).i32[1];
    *((_OWORD *)v810 + 2) = v1592.val[1];
    *((int8x16_t *)v810 + 3) = v873;
    v876.i64[1] = v1576.val[0].i64[1];
    v879.i32[0] = vqtbl2q_s8(v1597, (int8x16_t)xmmword_208F2B1B0).u32[0];
    *((_OWORD *)v810 + 4) = v1589.val[1];
    *((_OWORD *)v810 + 5) = v1592.val[0];
    v879.i32[1] = vqtbl2q_s8(v1594, (int8x16_t)xmmword_208F2B1A0).i32[1];
    v879.i64[1] = v880.i64[1];
    *((int16x8_t *)v810 + 6) = v879;
    *((int8x16_t *)v810 + 7) = v876;
    v870.i64[1] = v875.i64[1];
    *(int64x2_t *)v810 = v870;
    *((int64x2_t *)v810 + 1) = v868;
    v796 += 16;
  }
  while (v796 != 64);
  v881 = 0;
  v882.i64[0] = 0xD000D000D000D00;
  v882.i64[1] = 0xD000D000D000D00;
  v883.i64[0] = 0xF2000000F2;
  v883.i64[1] = 0xF2000000F2;
  do
  {
    v884 = &v1539 + v881;
    v885 = v884[1];
    v886 = (int8x16_t)vaddq_s16(*v884, v885);
    v887 = vaddq_s16((int16x8_t)v886, v882);
    v888 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v884->i8, *(uint16x4_t *)v885.i8);
    v889 = vdupq_n_s32(0xD01u);
    v890 = vaddq_s32((int32x4_t)vsubl_high_u16(*(uint16x8_t *)v884, (uint16x8_t)v885), v889);
    v891 = vaddq_s32(v888, v889);
    v892 = vdupq_n_s32(*(unsigned __int16 *)((char *)&kInverseNTTRoots + v881 + 32));
    v893 = (uint32x4_t)vmulq_s32(v891, v892);
    v894 = (uint32x4_t)vmulq_s32(v890, v892);
    v895 = (uint32x4_t)vdupq_n_s32(0x13AFu);
    v896 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v893, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v893.i8, *(uint32x2_t *)v895.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v893, v895), 0x18uLL), v883), (int16x8_t)vmlaq_s32((int32x4_t)v894, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v894.i8, *(uint32x2_t *)v895.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v894, v895), 0x18uLL), v883));
    v897 = vaddq_s16((int16x8_t)v896, v882);
    *(int8x16_t *)v884 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v887), v886), (int8x16_t)vmaxq_s16(v887, (int16x8_t)0));
    v884[1] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v897), v896), (int8x16_t)vmaxq_s16(v897, (int16x8_t)0));
    v881 += 2;
  }
  while (v881 != 32);
  v898 = 0;
  v899 = (uint16x8_t)v1540;
  v900 = (int8x16_t)vaddq_s16(v1539, v1541);
  v901.i64[0] = 0xD000D000D000D00;
  v901.i64[1] = 0xD000D000D000D00;
  v902 = vaddq_s16((int16x8_t)v900, v901);
  v903 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v902), v900), (int8x16_t)vmaxq_s16(v902, (int16x8_t)0));
  v904 = (uint16x8_t)vdupq_n_s16(0x62Fu);
  v905 = vdupq_n_s32(0x50692Fu);
  v906 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1539.i8, *(uint16x4_t *)v904.i8), *(uint16x4_t *)v1541.i8, *(uint16x4_t *)v904.i8), v905);
  v907 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1539, v904), (uint16x8_t)v1541, v904), v905);
  v908 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v909.i64[0] = 0xF2000000F2;
  v909.i64[1] = 0xF2000000F2;
  v910 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v906, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v906.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v906, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v907, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v907.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v907, v908), 0x18uLL), v909));
  v911 = vaddq_s16((int16x8_t)v910, v901);
  v912 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v911), v910), (int8x16_t)vmaxq_s16(v911, (int16x8_t)0));
  v913 = (int8x16_t)vaddq_s16(v1540, (int16x8_t)v1542);
  v914 = vaddq_s16((int16x8_t)v913, v901);
  v1539 = (int16x8_t)v903;
  v1540 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v914), v913), (int8x16_t)vmaxq_s16(v914, (int16x8_t)0));
  v915 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v899.i8, *(uint16x4_t *)v904.i8), *(uint16x4_t *)v1542.i8, *(uint16x4_t *)v904.i8), v905);
  v916 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v899, v904), (uint16x8_t)v1542, v904), v905);
  v917 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v915, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v915.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v915, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v916, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v916.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v916, v908), 0x18uLL), v909));
  v918 = vaddq_s16((int16x8_t)v917, v901);
  v1541 = (int16x8_t)v912;
  v1542 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v918), v917), (int8x16_t)vmaxq_s16(v918, (int16x8_t)0));
  v919 = (uint16x8_t)v1544;
  v920 = (int8x16_t)vaddq_s16(v1543, v1545);
  v921 = vaddq_s16((int16x8_t)v920, v901);
  v922 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v921), v920), (int8x16_t)vmaxq_s16(v921, (int16x8_t)0));
  v923 = (uint16x8_t)vdupq_n_s16(0xAC8u);
  v924 = vdupq_n_s32(0x8C32C8u);
  v925 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1543.i8, *(uint16x4_t *)v923.i8), *(uint16x4_t *)v1545.i8, *(uint16x4_t *)v923.i8), v924);
  v926 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1543, v923), (uint16x8_t)v1545, v923), v924);
  v927 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v925, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v925.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v925, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v926, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v926.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v926, v908), 0x18uLL), v909));
  v928 = vaddq_s16((int16x8_t)v927, v901);
  v929 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v928), v927), (int8x16_t)vmaxq_s16(v928, (int16x8_t)0));
  v930 = (int8x16_t)vaddq_s16((int16x8_t)v1544, (int16x8_t)v1546);
  v931 = vaddq_s16((int16x8_t)v930, v901);
  v1543 = (int16x8_t)v922;
  v1544 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v931), v930), (int8x16_t)vmaxq_s16(v931, (int16x8_t)0));
  v932 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v919.i8, *(uint16x4_t *)v923.i8), *(uint16x4_t *)v1546.i8, *(uint16x4_t *)v923.i8), v924);
  v933 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v919, v923), (uint16x8_t)v1546, v923), v924);
  v934 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v932, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v932.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v932, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v933, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v933.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v933, v908), 0x18uLL), v909));
  v935 = vaddq_s16((int16x8_t)v934, v901);
  v1545 = (int16x8_t)v929;
  v1546 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v935), v934), (int8x16_t)vmaxq_s16(v935, (int16x8_t)0));
  v936 = (uint16x8_t)v1548;
  v937 = (int8x16_t)vaddq_s16(v1547, v1549);
  v938 = vaddq_s16((int16x8_t)v937, v901);
  v939 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v938), v937), (int8x16_t)vmaxq_s16(v938, (int16x8_t)0));
  v938.i64[0] = 0x45004500450045;
  v938.i64[1] = 0x45004500450045;
  v940 = vdupq_n_s32(0x38145u);
  v941 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1547.i8, (uint16x4_t)0x45004500450045), *(uint16x4_t *)v1549.i8, (uint16x4_t)0x45004500450045), v940);
  v942 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1547, (uint16x8_t)v938), (uint16x8_t)v1549, (uint16x8_t)v938), v940);
  v943 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v941, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v941.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v941, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v942, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v942.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v942, v908), 0x18uLL), v909));
  v944 = vaddq_s16((int16x8_t)v943, v901);
  v945 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v944), v943), (int8x16_t)vmaxq_s16(v944, (int16x8_t)0));
  v946 = (int8x16_t)vaddq_s16((int16x8_t)v1548, (int16x8_t)v1550);
  v947 = vaddq_s16((int16x8_t)v946, v901);
  v1547 = (int16x8_t)v939;
  v1548 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v947), v946), (int8x16_t)vmaxq_s16(v947, (int16x8_t)0));
  v948 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v936.i8, (uint16x4_t)0x45004500450045), *(uint16x4_t *)v1550.i8, (uint16x4_t)0x45004500450045), v940);
  v949 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v936, (uint16x8_t)v938), (uint16x8_t)v1550, (uint16x8_t)v938), v940);
  v950 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v948, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v948.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v948, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v949, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v949.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v949, v908), 0x18uLL), v909));
  v951 = vaddq_s16((int16x8_t)v950, v901);
  v1549 = (int16x8_t)v945;
  v1550 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v951), v950), (int8x16_t)vmaxq_s16(v951, (int16x8_t)0));
  v952 = (uint16x8_t)v1552;
  v953 = (int8x16_t)vaddq_s16(v1551, v1553);
  v954 = vaddq_s16((int16x8_t)v953, v901);
  v955 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v954), v953), (int8x16_t)vmaxq_s16(v954, (int16x8_t)0));
  v956 = (uint16x8_t)vdupq_n_s16(0x21Fu);
  v957 = vdupq_n_s32(0x1B951Fu);
  v958 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1551.i8, *(uint16x4_t *)v956.i8), *(uint16x4_t *)v1553.i8, *(uint16x4_t *)v956.i8), v957);
  v959 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1551, v956), (uint16x8_t)v1553, v956), v957);
  v960 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v958, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v958.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v958, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v959, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v959.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v959, v908), 0x18uLL), v909));
  v961 = vaddq_s16((int16x8_t)v960, v901);
  v962 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v961), v960), (int8x16_t)vmaxq_s16(v961, (int16x8_t)0));
  v963 = (int8x16_t)vaddq_s16((int16x8_t)v1552, (int16x8_t)v1554);
  v964 = vaddq_s16((int16x8_t)v963, v901);
  v1551 = (int16x8_t)v955;
  v1552 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v964), v963), (int8x16_t)vmaxq_s16(v964, (int16x8_t)0));
  v965 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v952.i8, *(uint16x4_t *)v956.i8), *(uint16x4_t *)v1554.i8, *(uint16x4_t *)v956.i8), v957);
  v966 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v952, v956), (uint16x8_t)v1554, v956), v957);
  v967 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v965, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v965.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v965, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v966, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v966.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v966, v908), 0x18uLL), v909));
  v968 = vaddq_s16((int16x8_t)v967, v901);
  v1553 = (int16x8_t)v962;
  v1554 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v968), v967), (int8x16_t)vmaxq_s16(v968, (int16x8_t)0));
  v969 = (uint16x8_t)v1556;
  v970 = (int8x16_t)vaddq_s16(v1555, v1557);
  v971 = vaddq_s16((int16x8_t)v970, v901);
  v972 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v971), v970), (int8x16_t)vmaxq_s16(v971, (int16x8_t)0));
  v973 = (uint16x8_t)vdupq_n_s16(0x9E4u);
  v974 = vdupq_n_s32(0x809DE4u);
  v975 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1555.i8, *(uint16x4_t *)v973.i8), *(uint16x4_t *)v1557.i8, *(uint16x4_t *)v973.i8), v974);
  v976 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1555, v973), (uint16x8_t)v1557, v973), v974);
  v977 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v975, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v975.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v975, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v976, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v976.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v976, v908), 0x18uLL), v909));
  v978 = vaddq_s16((int16x8_t)v977, v901);
  v979 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v978), v977), (int8x16_t)vmaxq_s16(v978, (int16x8_t)0));
  v980 = (int8x16_t)vaddq_s16(v1556, (int16x8_t)v1558);
  v981 = vaddq_s16((int16x8_t)v980, v901);
  v1555 = (int16x8_t)v972;
  v1556 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v981), v980), (int8x16_t)vmaxq_s16(v981, (int16x8_t)0));
  v982 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v969.i8, *(uint16x4_t *)v973.i8), *(uint16x4_t *)v1558.i8, *(uint16x4_t *)v973.i8), v974);
  v983 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v969, v973), (uint16x8_t)v1558, v973), v974);
  v984 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v982, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v982.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v982, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v983, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v983.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v983, v908), 0x18uLL), v909));
  v985 = vaddq_s16((int16x8_t)v984, v901);
  v1557 = (int16x8_t)v979;
  v1558 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v985), v984), (int8x16_t)vmaxq_s16(v985, (int16x8_t)0));
  v986 = (uint16x8_t)v1560;
  v987 = (int8x16_t)vaddq_s16(v1559, v1561);
  v988 = vaddq_s16((int16x8_t)v987, v901);
  v989 = (uint16x8_t)vdupq_n_s16(0xC40u);
  v990 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v988), v987), (int8x16_t)vmaxq_s16(v988, (int16x8_t)0));
  v991 = vdupq_n_s32(0x9F4C40u);
  v992 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1559.i8, *(uint16x4_t *)v989.i8), *(uint16x4_t *)v1561.i8, *(uint16x4_t *)v989.i8), v991);
  v993 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1559, v989), (uint16x8_t)v1561, v989), v991);
  v994 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v992, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v992.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v992, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v993, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v993.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v993, v908), 0x18uLL), v909));
  v995 = vaddq_s16((int16x8_t)v994, v901);
  v996 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v995), v994), (int8x16_t)vmaxq_s16(v995, (int16x8_t)0));
  v997 = (int8x16_t)vaddq_s16((int16x8_t)v1560, (int16x8_t)v1562);
  v998 = vaddq_s16((int16x8_t)v997, v901);
  v1559 = (int16x8_t)v990;
  v1560 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v998), v997), (int8x16_t)vmaxq_s16(v998, (int16x8_t)0));
  v999 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v986.i8, *(uint16x4_t *)v989.i8), *(uint16x4_t *)v1562.i8, *(uint16x4_t *)v989.i8), v991);
  v1000 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v986, v989), (uint16x8_t)v1562, v989), v991);
  v1001 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v999, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v999.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v999, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1000, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1000.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1000, v908), 0x18uLL), v909));
  v1002 = vaddq_s16((int16x8_t)v1001, v901);
  v1561 = (int16x8_t)v996;
  v1562 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1002), v1001), (int8x16_t)vmaxq_s16(v1002, (int16x8_t)0));
  v1003 = (uint16x8_t)v1564;
  v1004 = (int8x16_t)vaddq_s16(v1563, v1565);
  v1005 = vaddq_s16((int16x8_t)v1004, v901);
  v1006 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1005), v1004), (int8x16_t)vmaxq_s16(v1005, (int16x8_t)0));
  v1007 = (uint16x8_t)vdupq_n_s16(0x582u);
  v1008 = vdupq_n_s32(0x479F82u);
  v1009 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1563.i8, *(uint16x4_t *)v1007.i8), *(uint16x4_t *)v1565.i8, *(uint16x4_t *)v1007.i8), v1008);
  v1010 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1563, v1007), (uint16x8_t)v1565, v1007), v1008);
  v1011 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1009, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1009.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1009, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1010, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1010.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1010, v908), 0x18uLL), v909));
  v1012 = vaddq_s16((int16x8_t)v1011, v901);
  v1013 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1012), v1011), (int8x16_t)vmaxq_s16(v1012, (int16x8_t)0));
  v1014 = (int8x16_t)vaddq_s16((int16x8_t)v1564, (int16x8_t)v1566);
  v1015 = vaddq_s16((int16x8_t)v1014, v901);
  v1563 = (int16x8_t)v1006;
  v1564 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1015), v1014), (int8x16_t)vmaxq_s16(v1015, (int16x8_t)0));
  v1016 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1003.i8, *(uint16x4_t *)v1007.i8), *(uint16x4_t *)v1566.i8, *(uint16x4_t *)v1007.i8), v1008);
  v1017 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1003, v1007), (uint16x8_t)v1566, v1007), v1008);
  v1018 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1016, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1016.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1016, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1017, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1017.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1017, v908), 0x18uLL), v909));
  v1019 = vaddq_s16((int16x8_t)v1018, v901);
  v1565 = (int16x8_t)v1013;
  v1566 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1019), v1018), (int8x16_t)vmaxq_s16(v1019, (int16x8_t)0));
  v1020 = (uint16x8_t)v1568;
  v1021 = (int8x16_t)vaddq_s16(v1567, v1569);
  v1022 = vaddq_s16((int16x8_t)v1021, v901);
  v1023 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1022), v1021), (int8x16_t)vmaxq_s16(v1022, (int16x8_t)0));
  v1024 = (uint16x8_t)vdupq_n_s16(0x8DBu);
  v1025 = vdupq_n_s32(0x7327DBu);
  v1026 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1567.i8, *(uint16x4_t *)v1024.i8), *(uint16x4_t *)v1569.i8, *(uint16x4_t *)v1024.i8), v1025);
  v1027 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1567, v1024), (uint16x8_t)v1569, v1024), v1025);
  v1028 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1026, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1026.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1026, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1027, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1027.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1027, v908), 0x18uLL), v909));
  v1029 = vaddq_s16((int16x8_t)v1028, v901);
  v1030 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1029), v1028), (int8x16_t)vmaxq_s16(v1029, (int16x8_t)0));
  v1031 = (int8x16_t)vaddq_s16((int16x8_t)v1568, (int16x8_t)v1570);
  v1032 = vaddq_s16((int16x8_t)v1031, v901);
  v1567 = (int16x8_t)v1023;
  v1568 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1032), v1031), (int8x16_t)vmaxq_s16(v1032, (int16x8_t)0));
  v1033 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1020.i8, *(uint16x4_t *)v1024.i8), *(uint16x4_t *)v1570.i8, *(uint16x4_t *)v1024.i8), v1025);
  v1034 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1020, v1024), (uint16x8_t)v1570, v1024), v1025);
  v1035 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1033, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1033.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1033, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1034, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1034.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1034, v908), 0x18uLL), v909));
  v1036 = vaddq_s16((int16x8_t)v1035, v901);
  v1569 = (int16x8_t)v1030;
  v1570 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1036), v1035), (int8x16_t)vmaxq_s16(v1036, (int16x8_t)0));
  v1037 = (uint16x8_t)v1540;
  v1038 = (int8x16_t)vaddq_s16(v1539, v1543);
  v1039 = vaddq_s16((int16x8_t)v1038, v901);
  v1040 = vandq_s8((int8x16_t)vcltzq_s16(v1039), v1038);
  v1041 = (uint16x8_t)vdupq_n_s16(0x9B1u);
  v1042 = vorrq_s8(v1040, (int8x16_t)vmaxq_s16(v1039, (int16x8_t)0));
  v1043 = vdupq_n_s32(0x7E06B1u);
  v1044 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1539.i8, *(uint16x4_t *)v1041.i8), *(uint16x4_t *)v1543.i8, *(uint16x4_t *)v1041.i8), v1043);
  v1045 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1539, v1041), (uint16x8_t)v1543, v1041), v1043);
  v1046 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1044, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1044.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1044, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1045, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1045.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1045, v908), 0x18uLL), v909));
  v1047 = vaddq_s16((int16x8_t)v1046, v901);
  v1048 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1047), v1046), (int8x16_t)vmaxq_s16(v1047, (int16x8_t)0));
  v1049 = (int8x16_t)vaddq_s16(v1540, (int16x8_t)v1544);
  v1050 = vaddq_s16((int16x8_t)v1049, v901);
  v1539 = (int16x8_t)v1042;
  v1540 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1050), v1049), (int8x16_t)vmaxq_s16(v1050, (int16x8_t)0));
  v1051 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1037.i8, *(uint16x4_t *)v1041.i8), *(uint16x4_t *)v1544.i8, *(uint16x4_t *)v1041.i8), v1043);
  v1052 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1037, v1041), (uint16x8_t)v1544, v1041), v1043);
  v1053 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1051, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1051.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1051, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1052, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1052.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1052, v908), 0x18uLL), v909));
  v1054 = vaddq_s16((int16x8_t)v1053, v901);
  v1543 = (int16x8_t)v1048;
  v1544 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1054), v1053), (int8x16_t)vmaxq_s16(v1054, (int16x8_t)0));
  v1055 = (uint16x8_t)v1542;
  v1056 = (int8x16_t)vaddq_s16(v1541, v1545);
  v1057 = vaddq_s16((int16x8_t)v1056, v901);
  v1058 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1057), v1056), (int8x16_t)vmaxq_s16(v1057, (int16x8_t)0));
  v1059 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1541.i8, *(uint16x4_t *)v1041.i8), *(uint16x4_t *)v1545.i8, *(uint16x4_t *)v1041.i8), v1043);
  v1060 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1541, v1041), (uint16x8_t)v1545, v1041), v1043);
  v1061 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1059, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1059.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1059, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1060, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1060.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1060, v908), 0x18uLL), v909));
  v1062 = vaddq_s16((int16x8_t)v1061, v901);
  v1063 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1062), v1061), (int8x16_t)vmaxq_s16(v1062, (int16x8_t)0));
  v1064 = (int8x16_t)vaddq_s16((int16x8_t)v1542, (int16x8_t)v1546);
  v1065 = vaddq_s16((int16x8_t)v1064, v901);
  v1541 = (int16x8_t)v1058;
  v1542 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1065), v1064), (int8x16_t)vmaxq_s16(v1065, (int16x8_t)0));
  v1066 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v1055, v1041), (uint16x8_t)v1546, v1041);
  v1067 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1055.i8, *(uint16x4_t *)v1041.i8), *(uint16x4_t *)v1546.i8, *(uint16x4_t *)v1041.i8), v1043);
  v1068 = (uint32x4_t)vaddq_s32(v1066, v1043);
  v1069 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1067, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1067.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1067, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1068, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1068.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1068, v908), 0x18uLL), v909));
  v1070 = vaddq_s16((int16x8_t)v1069, v901);
  v1545 = (int16x8_t)v1063;
  v1546 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1070), v1069), (int8x16_t)vmaxq_s16(v1070, (int16x8_t)0));
  v1071 = (uint16x8_t)v1548;
  v1072 = (int8x16_t)vaddq_s16(v1547, v1551);
  v1073 = vaddq_s16((int16x8_t)v1072, v901);
  v1074 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1073), v1072), (int8x16_t)vmaxq_s16(v1073, (int16x8_t)0));
  v1075 = (uint16x8_t)vdupq_n_s16(0x598u);
  v1076 = vdupq_n_s32(0x48BD98u);
  v1077 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1547.i8, *(uint16x4_t *)v1075.i8), *(uint16x4_t *)v1551.i8, *(uint16x4_t *)v1075.i8), v1076);
  v1078 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1547, v1075), (uint16x8_t)v1551, v1075), v1076);
  v1079 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1077, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1077.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1077, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1078, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1078.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1078, v908), 0x18uLL), v909));
  v1080 = vaddq_s16((int16x8_t)v1079, v901);
  v1081 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1080), v1079), (int8x16_t)vmaxq_s16(v1080, (int16x8_t)0));
  v1082 = (int8x16_t)vaddq_s16((int16x8_t)v1548, (int16x8_t)v1552);
  v1083 = vaddq_s16((int16x8_t)v1082, v901);
  v1547 = (int16x8_t)v1074;
  v1548 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1083), v1082), (int8x16_t)vmaxq_s16(v1083, (int16x8_t)0));
  v1084 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1071.i8, *(uint16x4_t *)v1075.i8), *(uint16x4_t *)v1552.i8, *(uint16x4_t *)v1075.i8), v1076);
  v1085 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1071, v1075), (uint16x8_t)v1552, v1075), v1076);
  v1086 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1084, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1084.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1084, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1085, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1085.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1085, v908), 0x18uLL), v909));
  v1087 = vaddq_s16((int16x8_t)v1086, v901);
  v1551 = (int16x8_t)v1081;
  v1552 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1087), v1086), (int8x16_t)vmaxq_s16(v1087, (int16x8_t)0));
  v1088 = (uint16x8_t)v1550;
  v1089 = (int8x16_t)vaddq_s16(v1549, v1553);
  v1090 = vaddq_s16((int16x8_t)v1089, v901);
  v1091 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1090), v1089), (int8x16_t)vmaxq_s16(v1090, (int16x8_t)0));
  v1092 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1549.i8, *(uint16x4_t *)v1075.i8), *(uint16x4_t *)v1553.i8, *(uint16x4_t *)v1075.i8), v1076);
  v1093 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1549, v1075), (uint16x8_t)v1553, v1075), v1076);
  v1094 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1092, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1092.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1092, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1093, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1093.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1093, v908), 0x18uLL), v909));
  v1095 = vaddq_s16((int16x8_t)v1094, v901);
  v1096 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1095), v1094), (int8x16_t)vmaxq_s16(v1095, (int16x8_t)0));
  v1097 = (int8x16_t)vaddq_s16((int16x8_t)v1550, (int16x8_t)v1554);
  v1098 = vaddq_s16((int16x8_t)v1097, v901);
  v1549 = (int16x8_t)v1091;
  v1550 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1098), v1097), (int8x16_t)vmaxq_s16(v1098, (int16x8_t)0));
  v1099 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v1088, v1075), (uint16x8_t)v1554, v1075);
  v1100 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1088.i8, *(uint16x4_t *)v1075.i8), *(uint16x4_t *)v1554.i8, *(uint16x4_t *)v1075.i8), v1076);
  v1101 = (uint32x4_t)vaddq_s32(v1099, v1076);
  v1102 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1100, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1100.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1100, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1101, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1101.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1101, v908), 0x18uLL), v909));
  v1103 = vaddq_s16((int16x8_t)v1102, v901);
  v1553 = (int16x8_t)v1096;
  v1554 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1103), v1102), (int8x16_t)vmaxq_s16(v1103, (int16x8_t)0));
  v1104 = (uint16x8_t)v1556;
  v1105 = (int8x16_t)vaddq_s16(v1555, v1559);
  v1106 = vaddq_s16((int16x8_t)v1105, v901);
  v1107 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1106), v1105), (int8x16_t)vmaxq_s16(v1106, (int16x8_t)0));
  v1108 = (uint16x8_t)vdupq_n_s16(0xA8Bu);
  v1109 = vdupq_n_s32(0x89198Bu);
  v1110 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1555.i8, *(uint16x4_t *)v1108.i8), *(uint16x4_t *)v1559.i8, *(uint16x4_t *)v1108.i8), v1109);
  v1111 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1555, v1108), (uint16x8_t)v1559, v1108), v1109);
  v1112 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1110, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1110.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1110, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1111, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1111.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1111, v908), 0x18uLL), v909));
  v1113 = vaddq_s16((int16x8_t)v1112, v901);
  v1114 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1113), v1112), (int8x16_t)vmaxq_s16(v1113, (int16x8_t)0));
  v1115 = (int8x16_t)vaddq_s16(v1556, (int16x8_t)v1560);
  v1116 = vaddq_s16((int16x8_t)v1115, v901);
  v1555 = (int16x8_t)v1107;
  v1556 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1116), v1115), (int8x16_t)vmaxq_s16(v1116, (int16x8_t)0));
  v1117 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1104.i8, *(uint16x4_t *)v1108.i8), *(uint16x4_t *)v1560.i8, *(uint16x4_t *)v1108.i8), v1109);
  v1118 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1104, v1108), (uint16x8_t)v1560, v1108), v1109);
  v1119 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1117, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1117.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1117, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1118, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1118.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1118, v908), 0x18uLL), v909));
  v1120 = vaddq_s16((int16x8_t)v1119, v901);
  v1559 = (int16x8_t)v1114;
  v1560 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1120), v1119), (int8x16_t)vmaxq_s16(v1120, (int16x8_t)0));
  v1121 = (uint16x8_t)v1558;
  v1122 = (int8x16_t)vaddq_s16(v1557, v1561);
  v1123 = vaddq_s16((int16x8_t)v1122, v901);
  v1124 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1123), v1122), (int8x16_t)vmaxq_s16(v1123, (int16x8_t)0));
  v1125 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1557.i8, *(uint16x4_t *)v1108.i8), *(uint16x4_t *)v1561.i8, *(uint16x4_t *)v1108.i8), v1109);
  v1126 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1557, v1108), (uint16x8_t)v1561, v1108), v1109);
  v1127 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1125, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1125.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1125, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1126, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1126.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1126, v908), 0x18uLL), v909));
  v1128 = vaddq_s16((int16x8_t)v1127, v901);
  v1129 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1128), v1127), (int8x16_t)vmaxq_s16(v1128, (int16x8_t)0));
  v1130 = (int8x16_t)vaddq_s16((int16x8_t)v1558, (int16x8_t)v1562);
  v1131 = vaddq_s16((int16x8_t)v1130, v901);
  v1557 = (int16x8_t)v1124;
  v1558 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1131), v1130), (int8x16_t)vmaxq_s16(v1131, (int16x8_t)0));
  v1132 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v1121, v1108), (uint16x8_t)v1562, v1108);
  v1133 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1121.i8, *(uint16x4_t *)v1108.i8), *(uint16x4_t *)v1562.i8, *(uint16x4_t *)v1108.i8), v1109);
  v1134 = (uint32x4_t)vaddq_s32(v1132, v1109);
  v1135 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1133, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1133.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1133, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1134, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1134.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1134, v908), 0x18uLL), v909));
  v1136 = vaddq_s16((int16x8_t)v1135, v901);
  v1561 = (int16x8_t)v1129;
  v1562 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1136), v1135), (int8x16_t)vmaxq_s16(v1136, (int16x8_t)0));
  v1137 = (uint16x8_t)v1564;
  v1138 = (int8x16_t)vaddq_s16(v1563, v1567);
  v1139 = vaddq_s16((int16x8_t)v1138, v901);
  v1140 = vandq_s8((int8x16_t)vcltzq_s16(v1139), v1138);
  v1141 = (uint16x8_t)vdupq_n_s16(0x2AFu);
  v1142 = vorrq_s8(v1140, (int8x16_t)vmaxq_s16(v1139, (int16x8_t)0));
  v1143 = vdupq_n_s32(0x22E5AFu);
  v1144 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1563.i8, *(uint16x4_t *)v1141.i8), *(uint16x4_t *)v1567.i8, *(uint16x4_t *)v1141.i8), v1143);
  v1145 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1563, v1141), (uint16x8_t)v1567, v1141), v1143);
  v1146 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1144, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1144.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1144, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1145, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1145.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1145, v908), 0x18uLL), v909));
  v1147 = vaddq_s16((int16x8_t)v1146, v901);
  v1148 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1147), v1146), (int8x16_t)vmaxq_s16(v1147, (int16x8_t)0));
  v1149 = (int8x16_t)vaddq_s16((int16x8_t)v1564, (int16x8_t)v1568);
  v1150 = vaddq_s16((int16x8_t)v1149, v901);
  v1563 = (int16x8_t)v1142;
  v1564 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1150), v1149), (int8x16_t)vmaxq_s16(v1150, (int16x8_t)0));
  v1151 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1137.i8, *(uint16x4_t *)v1141.i8), *(uint16x4_t *)v1568.i8, *(uint16x4_t *)v1141.i8), v1143);
  v1152 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1137, v1141), (uint16x8_t)v1568, v1141), v1143);
  v1153 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1151, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1151.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1151, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1152, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1152.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1152, v908), 0x18uLL), v909));
  v1154 = vaddq_s16((int16x8_t)v1153, v901);
  v1567 = (int16x8_t)v1148;
  v1568 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1154), v1153), (int8x16_t)vmaxq_s16(v1154, (int16x8_t)0));
  v1155 = (uint16x8_t)v1566;
  v1156 = (int8x16_t)vaddq_s16(v1565, v1569);
  v1157 = vaddq_s16((int16x8_t)v1156, v901);
  v1158 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1157), v1156), (int8x16_t)vmaxq_s16(v1157, (int16x8_t)0));
  v1159 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1565.i8, *(uint16x4_t *)v1141.i8), *(uint16x4_t *)v1569.i8, *(uint16x4_t *)v1141.i8), v1143);
  v1160 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1565, v1141), (uint16x8_t)v1569, v1141), v1143);
  v1161 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1159, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1159.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1159, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1160, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1160.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1160, v908), 0x18uLL), v909));
  v1162 = vaddq_s16((int16x8_t)v1161, v901);
  v1163 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1162), v1161), (int8x16_t)vmaxq_s16(v1162, (int16x8_t)0));
  v1164 = (int8x16_t)vaddq_s16((int16x8_t)v1566, (int16x8_t)v1570);
  v1165 = vaddq_s16((int16x8_t)v1164, v901);
  v1565 = (int16x8_t)v1158;
  v1566 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1165), v1164), (int8x16_t)vmaxq_s16(v1165, (int16x8_t)0));
  v1166 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v1155, v1141), (uint16x8_t)v1570, v1141);
  v1167 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1155.i8, *(uint16x4_t *)v1141.i8), *(uint16x4_t *)v1570.i8, *(uint16x4_t *)v1141.i8), v1143);
  v1168 = (uint32x4_t)vaddq_s32(v1166, v1143);
  v1169 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1167, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1167.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1167, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1168, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1168.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1168, v908), 0x18uLL), v909));
  v1170 = vaddq_s16((int16x8_t)v1169, v901);
  v1569 = (int16x8_t)v1163;
  v1570 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1170), v1169), (int8x16_t)vmaxq_s16(v1170, (int16x8_t)0));
  v1171 = (uint16x8_t)v1540;
  v1172 = (int8x16_t)vaddq_s16(v1539, v1547);
  v1173 = vaddq_s16((int16x8_t)v1172, v901);
  v1174 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1173), v1172), (int8x16_t)vmaxq_s16(v1173, (int16x8_t)0));
  v1172.i64[0] = 0x28002800280028;
  v1172.i64[1] = 0x28002800280028;
  v1175 = vdupq_n_s32(0x20828u);
  v1176 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1539.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v1547.i8, (uint16x4_t)0x28002800280028), v1175);
  v1177 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1539, (uint16x8_t)v1172), (uint16x8_t)v1547, (uint16x8_t)v1172), v1175);
  v1178 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1176, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1176.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1176, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1177, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1177.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1177, v908), 0x18uLL), v909));
  v1179 = vaddq_s16((int16x8_t)v1178, v901);
  v1180 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1179), v1178), (int8x16_t)vmaxq_s16(v1179, (int16x8_t)0));
  v1181 = (int8x16_t)vaddq_s16(v1540, (int16x8_t)v1548);
  v1182 = vaddq_s16((int16x8_t)v1181, v901);
  v1539 = (int16x8_t)v1174;
  v1540 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1182), v1181), (int8x16_t)vmaxq_s16(v1182, (int16x8_t)0));
  v1183 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1171.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v1548.i8, (uint16x4_t)0x28002800280028), v1175);
  v1184 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1171, (uint16x8_t)v1172), (uint16x8_t)v1548, (uint16x8_t)v1172), v1175);
  v1185 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1183, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1183.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1183, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1184, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1184.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1184, v908), 0x18uLL), v909));
  v1186 = vaddq_s16((int16x8_t)v1185, v901);
  v1547 = (int16x8_t)v1180;
  v1548 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1186), v1185), (int8x16_t)vmaxq_s16(v1186, (int16x8_t)0));
  v1187 = (uint16x8_t)v1542;
  v1188 = (int8x16_t)vaddq_s16(v1541, v1549);
  v1189 = vaddq_s16((int16x8_t)v1188, v901);
  v1190 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1189), v1188), (int8x16_t)vmaxq_s16(v1189, (int16x8_t)0));
  v1191 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1541.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v1549.i8, (uint16x4_t)0x28002800280028), v1175);
  v1192 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1541, (uint16x8_t)v1172), (uint16x8_t)v1549, (uint16x8_t)v1172), v1175);
  v1193 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1191, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1191.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1191, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1192, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1192.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1192, v908), 0x18uLL), v909));
  v1194 = vaddq_s16((int16x8_t)v1193, v901);
  v1195 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1194), v1193), (int8x16_t)vmaxq_s16(v1194, (int16x8_t)0));
  v1196 = (int8x16_t)vaddq_s16((int16x8_t)v1542, (int16x8_t)v1550);
  v1197 = vaddq_s16((int16x8_t)v1196, v901);
  v1541 = (int16x8_t)v1190;
  v1542 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1197), v1196), (int8x16_t)vmaxq_s16(v1197, (int16x8_t)0));
  v1198 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1187.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v1550.i8, (uint16x4_t)0x28002800280028), v1175);
  v1199 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1187, (uint16x8_t)v1172), (uint16x8_t)v1550, (uint16x8_t)v1172), v1175);
  v1200 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1198, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1198.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1198, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1199, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1199.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1199, v908), 0x18uLL), v909));
  v1201 = vaddq_s16((int16x8_t)v1200, v901);
  v1549 = (int16x8_t)v1195;
  v1550 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1201), v1200), (int8x16_t)vmaxq_s16(v1201, (int16x8_t)0));
  v1202 = (uint16x8_t)v1544;
  v1203 = (int8x16_t)vaddq_s16(v1543, v1551);
  v1204 = vaddq_s16((int16x8_t)v1203, v901);
  v1205 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1204), v1203), (int8x16_t)vmaxq_s16(v1204, (int16x8_t)0));
  v1206 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1543.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v1551.i8, (uint16x4_t)0x28002800280028), v1175);
  v1207 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1543, (uint16x8_t)v1172), (uint16x8_t)v1551, (uint16x8_t)v1172), v1175);
  v1208 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1206, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1206.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1206, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1207, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1207.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1207, v908), 0x18uLL), v909));
  v1209 = vaddq_s16((int16x8_t)v1208, v901);
  v1210 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1209), v1208), (int8x16_t)vmaxq_s16(v1209, (int16x8_t)0));
  v1211 = (int8x16_t)vaddq_s16((int16x8_t)v1544, (int16x8_t)v1552);
  v1212 = vaddq_s16((int16x8_t)v1211, v901);
  v1543 = (int16x8_t)v1205;
  v1544 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1212), v1211), (int8x16_t)vmaxq_s16(v1212, (int16x8_t)0));
  v1213 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1202.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v1552.i8, (uint16x4_t)0x28002800280028), v1175);
  v1214 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1202, (uint16x8_t)v1172), (uint16x8_t)v1552, (uint16x8_t)v1172), v1175);
  v1215 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1213, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1213.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1213, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1214, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1214.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1214, v908), 0x18uLL), v909));
  v1216 = vaddq_s16((int16x8_t)v1215, v901);
  v1551 = (int16x8_t)v1210;
  v1552 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1216), v1215), (int8x16_t)vmaxq_s16(v1216, (int16x8_t)0));
  v1217 = (uint16x8_t)v1546;
  v1218 = (int8x16_t)vaddq_s16(v1545, v1553);
  v1219 = vaddq_s16((int16x8_t)v1218, v901);
  v1220 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1219), v1218), (int8x16_t)vmaxq_s16(v1219, (int16x8_t)0));
  v1221 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1545.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v1553.i8, (uint16x4_t)0x28002800280028), v1175);
  v1222 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1545, (uint16x8_t)v1172), (uint16x8_t)v1553, (uint16x8_t)v1172), v1175);
  v1223 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1221, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1221.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1221, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1222, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1222.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1222, v908), 0x18uLL), v909));
  v1224 = vaddq_s16((int16x8_t)v1223, v901);
  v1225 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1224), v1223), (int8x16_t)vmaxq_s16(v1224, (int16x8_t)0));
  v1226 = (int8x16_t)vaddq_s16((int16x8_t)v1546, (int16x8_t)v1554);
  v1227 = vaddq_s16((int16x8_t)v1226, v901);
  v1545 = (int16x8_t)v1220;
  v1546 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1227), v1226), (int8x16_t)vmaxq_s16(v1227, (int16x8_t)0));
  v1228 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v1217, (uint16x8_t)v1172), (uint16x8_t)v1554, (uint16x8_t)v1172);
  v1229 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1217.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v1554.i8, (uint16x4_t)0x28002800280028), v1175);
  v1230 = (uint32x4_t)vaddq_s32(v1228, v1175);
  v1231 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1229, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1229.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1229, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1230, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1230.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1230, v908), 0x18uLL), v909));
  v1232 = vaddq_s16((int16x8_t)v1231, v901);
  v1553 = (int16x8_t)v1225;
  v1554 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1232), v1231), (int8x16_t)vmaxq_s16(v1232, (int16x8_t)0));
  v1233 = (uint16x8_t)v1556;
  v1234 = (int8x16_t)vaddq_s16(v1555, v1563);
  v1235 = vaddq_s16((int16x8_t)v1234, v901);
  v1236 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1235), v1234), (int8x16_t)vmaxq_s16(v1235, (int16x8_t)0));
  v1237 = (uint16x8_t)vdupq_n_s16(0x2EDu);
  v1238 = vdupq_n_s32(0x260BEDu);
  v1239 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1555.i8, *(uint16x4_t *)v1237.i8), *(uint16x4_t *)v1563.i8, *(uint16x4_t *)v1237.i8), v1238);
  v1240 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1555, v1237), (uint16x8_t)v1563, v1237), v1238);
  v1241 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1239, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1239.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1239, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1240, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1240.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1240, v908), 0x18uLL), v909));
  v1242 = vaddq_s16((int16x8_t)v1241, v901);
  v1243 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1242), v1241), (int8x16_t)vmaxq_s16(v1242, (int16x8_t)0));
  v1244 = (int8x16_t)vaddq_s16(v1556, (int16x8_t)v1564);
  v1245 = vaddq_s16((int16x8_t)v1244, v901);
  v1555 = (int16x8_t)v1236;
  v1556 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1245), v1244), (int8x16_t)vmaxq_s16(v1245, (int16x8_t)0));
  v1246 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1233.i8, *(uint16x4_t *)v1237.i8), *(uint16x4_t *)v1564.i8, *(uint16x4_t *)v1237.i8), v1238);
  v1247 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1233, v1237), (uint16x8_t)v1564, v1237), v1238);
  v1248 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1246, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1246.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1246, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1247, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1247.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1247, v908), 0x18uLL), v909));
  v1249 = vaddq_s16((int16x8_t)v1248, v901);
  v1563 = (int16x8_t)v1243;
  v1564 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1249), v1248), (int8x16_t)vmaxq_s16(v1249, (int16x8_t)0));
  v1250 = (uint16x8_t)v1558;
  v1251 = (int8x16_t)vaddq_s16(v1557, v1565);
  v1252 = vaddq_s16((int16x8_t)v1251, v901);
  v1253 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1252), v1251), (int8x16_t)vmaxq_s16(v1252, (int16x8_t)0));
  v1254 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1557.i8, *(uint16x4_t *)v1237.i8), *(uint16x4_t *)v1565.i8, *(uint16x4_t *)v1237.i8), v1238);
  v1255 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1557, v1237), (uint16x8_t)v1565, v1237), v1238);
  v1256 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1254, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1254.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1254, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1255, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1255.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1255, v908), 0x18uLL), v909));
  v1257 = vaddq_s16((int16x8_t)v1256, v901);
  v1258 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1257), v1256), (int8x16_t)vmaxq_s16(v1257, (int16x8_t)0));
  v1259 = (int8x16_t)vaddq_s16((int16x8_t)v1558, (int16x8_t)v1566);
  v1260 = vaddq_s16((int16x8_t)v1259, v901);
  v1557 = (int16x8_t)v1253;
  v1558 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1260), v1259), (int8x16_t)vmaxq_s16(v1260, (int16x8_t)0));
  v1261 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1250.i8, *(uint16x4_t *)v1237.i8), *(uint16x4_t *)v1566.i8, *(uint16x4_t *)v1237.i8), v1238);
  v1262 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1250, v1237), (uint16x8_t)v1566, v1237), v1238);
  v1263 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1261, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1261.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1261, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1262, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1262.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1262, v908), 0x18uLL), v909));
  v1264 = vaddq_s16((int16x8_t)v1263, v901);
  v1565 = (int16x8_t)v1258;
  v1566 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1264), v1263), (int8x16_t)vmaxq_s16(v1264, (int16x8_t)0));
  v1265 = (uint16x8_t)v1560;
  v1266 = (int8x16_t)vaddq_s16(v1559, v1567);
  v1267 = vaddq_s16((int16x8_t)v1266, v901);
  v1268 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1267), v1266), (int8x16_t)vmaxq_s16(v1267, (int16x8_t)0));
  v1269 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1559.i8, *(uint16x4_t *)v1237.i8), *(uint16x4_t *)v1567.i8, *(uint16x4_t *)v1237.i8), v1238);
  v1270 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1559, v1237), (uint16x8_t)v1567, v1237), v1238);
  v1271 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1269, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1269.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1269, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1270, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1270.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1270, v908), 0x18uLL), v909));
  v1272 = vaddq_s16((int16x8_t)v1271, v901);
  v1273 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1272), v1271), (int8x16_t)vmaxq_s16(v1272, (int16x8_t)0));
  v1274 = (int8x16_t)vaddq_s16((int16x8_t)v1560, (int16x8_t)v1568);
  v1275 = vaddq_s16((int16x8_t)v1274, v901);
  v1559 = (int16x8_t)v1268;
  v1560 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1275), v1274), (int8x16_t)vmaxq_s16(v1275, (int16x8_t)0));
  v1276 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1265.i8, *(uint16x4_t *)v1237.i8), *(uint16x4_t *)v1568.i8, *(uint16x4_t *)v1237.i8), v1238);
  v1277 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v1265, v1237), (uint16x8_t)v1568, v1237), v1238);
  v1278 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1276, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1276.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1276, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1277, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1277.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1277, v908), 0x18uLL), v909));
  v1279 = vaddq_s16((int16x8_t)v1278, v901);
  v1567 = (int16x8_t)v1273;
  v1568 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1279), v1278), (int8x16_t)vmaxq_s16(v1279, (int16x8_t)0));
  v1280 = (uint16x8_t)v1562;
  v1281 = (int8x16_t)vaddq_s16(v1561, v1569);
  v1282 = vaddq_s16((int16x8_t)v1281, v901);
  v1283 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1282), v1281), (int8x16_t)vmaxq_s16(v1282, (int16x8_t)0));
  v1284 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1561.i8, *(uint16x4_t *)v1237.i8), *(uint16x4_t *)v1569.i8, *(uint16x4_t *)v1237.i8), v1238);
  v1285 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1561, v1237), (uint16x8_t)v1569, v1237), v1238);
  v1286 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1284, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1284.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1284, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1285, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1285.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1285, v908), 0x18uLL), v909));
  v1287 = vaddq_s16((int16x8_t)v1286, v901);
  v1288 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1287), v1286), (int8x16_t)vmaxq_s16(v1287, (int16x8_t)0));
  v1289 = (int8x16_t)vaddq_s16((int16x8_t)v1562, (int16x8_t)v1570);
  v1290 = vaddq_s16((int16x8_t)v1289, v901);
  v1561 = (int16x8_t)v1283;
  v1562 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1290), v1289), (int8x16_t)vmaxq_s16(v1290, (int16x8_t)0));
  v1291 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v1280, v1237), (uint16x8_t)v1570, v1237);
  v1292 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1280.i8, *(uint16x4_t *)v1237.i8), *(uint16x4_t *)v1570.i8, *(uint16x4_t *)v1237.i8), v1238);
  v1293 = (uint32x4_t)vaddq_s32(v1291, v1238);
  v1294 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1292, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1292.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1292, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1293, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1293.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1293, v908), 0x18uLL), v909));
  v1295 = vaddq_s16((int16x8_t)v1294, v901);
  v1569 = (int16x8_t)v1288;
  v1570 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1295), v1294), (int8x16_t)vmaxq_s16(v1295, (int16x8_t)0));
  do
  {
    v1296 = (int8x16_t *)&v1539.i8[v898];
    v1297 = *(int16x8_t *)((char *)&v1555 + v898);
    v1298 = *(int16x8_t *)((char *)&v1539 + v898);
    v1299 = (int8x16_t)vaddq_s16(v1298, v1297);
    v1300 = vaddq_s16((int16x8_t)v1299, v901);
    v1301 = (uint16x8_t)vdupq_n_s16(0x640u);
    v1302 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v1298, v1301), (uint16x8_t)v1297, v1301);
    v1303 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v1298.i8, *(uint16x4_t *)v1301.i8), *(uint16x4_t *)v1297.i8, *(uint16x4_t *)v1301.i8);
    v1304 = vdupq_n_s32(0x514640u);
    v1305 = (uint32x4_t)vaddq_s32(v1303, v1304);
    v1306 = (uint32x4_t)vaddq_s32(v1302, v1304);
    v1307 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1305, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1305.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1305, v908), 0x18uLL), v909), (int16x8_t)vmlaq_s32((int32x4_t)v1306, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1306.i8, *(uint32x2_t *)v908.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1306, v908), 0x18uLL), v909));
    v1308 = vaddq_s16((int16x8_t)v1307, v901);
    *v1296 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1300), v1299), (int8x16_t)vmaxq_s16(v1300, (int16x8_t)0));
    v1296[16] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1308), v1307), (int8x16_t)vmaxq_s16(v1308, (int16x8_t)0));
    v898 += 16;
  }
  while (v898 != 256);
  v1309 = 0;
  v1310 = (uint16x8_t)vdupq_n_s16(0xCE7u);
  v1311 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v1312.i64[0] = 0xF2000000F2;
  v1312.i64[1] = 0xF2000000F2;
  v1313.i64[0] = 0xD000D000D000D00;
  v1313.i64[1] = 0xD000D000D000D00;
  do
  {
    v1314 = *(uint16x8_t *)((char *)&v1539 + v1309);
    v1315 = vmull_u16(*(uint16x4_t *)v1314.i8, *(uint16x4_t *)v1310.i8);
    v1316 = vmull_high_u16(v1314, v1310);
    v1317 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1315.i8, *(uint32x2_t *)v1311.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v1315, v1311), 0x18uLL), v1312), *(uint16x4_t *)v1314.i8, *(uint16x4_t *)v1310.i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1316.i8,
                                                                     *(uint32x2_t *)v1311.i8),
                                                        0x18uLL),
                                                      (int64x2_t)vmull_high_u32(v1316, v1311),
                                                      0x18uLL),
                                                    v1312),
                                      v1314,
                                      v1310));
    v1318 = vaddq_s16((int16x8_t)v1317, v1313);
    *(int8x16_t *)((char *)&v1539 + v1309) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1318), v1317), (int8x16_t)vmaxq_s16(v1318, (int16x8_t)0));
    v1309 += 16;
  }
  while (v1309 != 512);
  v1319 = 0;
  v1320.i64[0] = 0xD000D000D000D00;
  v1320.i64[1] = 0xD000D000D000D00;
  do
  {
    v1321 = (int8x16_t *)&v1539.i8[v1319 * 16];
    v1322 = (int8x16_t)vaddq_s16((int16x8_t)v1532[v1319], *(int16x8_t *)((char *)&v1539 + v1319 * 16));
    v1323 = (int8x16_t)vaddq_s16((int16x8_t)v1532[v1319 + 1], *(int16x8_t *)((char *)&v1539 + v1319 * 16 + 16));
    v1324 = vaddq_s16((int16x8_t)v1322, v1320);
    v1325 = vaddq_s16((int16x8_t)v1323, v1320);
    *v1321 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1324), v1322), (int8x16_t)vmaxq_s16(v1324, (int16x8_t)0));
    v1321[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1325), v1323), (int8x16_t)vmaxq_s16(v1325, (int16x8_t)0));
    v1319 += 2;
  }
  while (v1319 != 32);
  v1326 = 0;
  v1327.i64[0] = 0x101010101010101;
  v1327.i64[1] = 0x101010101010101;
  v1328 = v1489[1];
  v1329 = (uint8x16_t)vandq_s8(*v1489, v1327);
  v1596.val[0] = (int8x16_t)vmovl_high_u8(v1329);
  v1590.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1329.i8);
  v1330 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8(*(uint8x16_t *)v1489, 1uLL), v1327);
  v1596.val[1] = (int8x16_t)vmovl_high_u8(v1330);
  v1590.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1330.i8);
  v1331 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8(*(uint8x16_t *)v1489, 2uLL), v1327);
  v1600.val[0] = (int8x16_t)vmovl_high_u8(v1331);
  v1332 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8(*(uint8x16_t *)v1489, 3uLL), v1327);
  v1600.val[1] = (int8x16_t)vmovl_high_u8(v1332);
  v1593.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1331.i8);
  v1593.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1332.i8);
  v1333.i32[0] = vzip1q_s16((int16x8_t)v1590.val[0], (int16x8_t)v1590.val[1]).u32[0];
  v1333.i32[1] = vqtbl2q_s8(v1593, (int8x16_t)xmmword_208F2B0C0).i32[1];
  v1334 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8(*(uint8x16_t *)v1489, 4uLL), v1327);
  v1335 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8(*(uint8x16_t *)v1489, 5uLL), v1327);
  v1602.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1334.i8);
  v1602.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1335.i8);
  v1336 = (uint8x16_t)vandq_s8((int8x16_t)vshrq_n_u8(*(uint8x16_t *)v1489, 6uLL), v1327);
  v1337 = vshrq_n_u8(*(uint8x16_t *)v1489, 7uLL);
  v1604.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1336.i8);
  v1604.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1337.i8);
  v1338 = vqtbl2q_s8(v1602, (int8x16_t)xmmword_208F2B0B0);
  v1338.i32[3] = vqtbl2q_s8(v1604, (int8x16_t)xmmword_208F2B0A0).i32[3];
  v1333.i64[1] = v1338.i64[1];
  v1510 = (uint16x8_t)v1333;
  v1333.i32[0] = vtrn2q_s16((int16x8_t)v1590.val[0], (int16x8_t)v1590.val[1]).u32[0];
  v1333.i32[1] = vqtbl2q_s8(v1593, (int8x16_t)xmmword_208F2B0F0).i32[1];
  v1339 = vqtbl2q_s8(v1602, (int8x16_t)xmmword_208F2B0E0);
  v1339.i32[3] = vqtbl2q_s8(v1604, (int8x16_t)xmmword_208F2B0D0).i32[3];
  v1333.i64[1] = v1339.i64[1];
  v1508 = (uint16x8_t)v1333;
  v1327.i16[2] = v1593.val[0].i16[2];
  v1327.i16[3] = v1593.val[1].i16[2];
  v1333.i32[0] = vqtbl2q_s8(v1590, (int8x16_t)xmmword_208F2B120).u32[0];
  v1333.i32[1] = v1327.i32[1];
  v1340 = vqtbl2q_s8(v1602, (int8x16_t)xmmword_208F2B110);
  v1340.i32[3] = vqtbl2q_s8(v1604, (int8x16_t)xmmword_208F2B100).i32[3];
  v1333.i64[1] = v1340.i64[1];
  v1506 = (uint16x8_t)v1333;
  v1333.i32[0] = vqtbl2q_s8(v1590, (int8x16_t)xmmword_208F2B150).u32[0];
  v1333.i32[1] = vtrn2q_s16(*(int16x8_t *)&v1593, *(int16x8_t *)(&v1593 + 16)).i32[1];
  v1341 = vqtbl2q_s8(v1602, (int8x16_t)xmmword_208F2B140);
  v1341.i32[3] = vqtbl2q_s8(v1604, (int8x16_t)xmmword_208F2B130).i32[3];
  v1333.i64[1] = v1341.i64[1];
  v1504 = (uint16x8_t)v1333;
  v1333.i32[0] = vzip2q_s16((int16x8_t)v1590.val[0], (int16x8_t)v1590.val[1]).u32[0];
  v1333.i32[1] = vqtbl2q_s8(v1593, (int8x16_t)xmmword_208F2B170).i32[1];
  LOWORD(v1342) = v1602.val[0].i16[4];
  WORD1(v1342) = v1602.val[1].i16[4];
  v1582.val[0] = (int8x16_t)vmovl_high_u8(v1334);
  v1582.val[1] = (int8x16_t)vmovl_high_u8(v1335);
  HIDWORD(v1342) = vqtbl2q_s8(v1604, (int8x16_t)xmmword_208F2B160).i32[3];
  v1333.i64[1] = v1342;
  v1501 = (uint16x8_t)v1333;
  v1333.i32[0] = vqtbl2q_s8(v1590, (int8x16_t)xmmword_208F2B190).u32[0];
  v1333.i32[1] = vzip2q_s16(*(int16x8_t *)&v1593, *(int16x8_t *)(&v1593 + 16)).i32[1];
  v1343 = vtrn2q_s16((int16x8_t)v1602.val[0], (int16x8_t)v1602.val[1]);
  v1343.i32[3] = vqtbl2q_s8(v1604, (int8x16_t)xmmword_208F2B180).i32[3];
  v1333.i64[1] = v1343.i64[1];
  v1498 = (uint16x8_t)v1333;
  v1333.i32[0] = vqtbl2q_s8(v1590, (int8x16_t)xmmword_208F2B1B0).u32[0];
  v1333.i32[1] = vqtbl2q_s8(v1593, (int8x16_t)xmmword_208F2B1A0).i32[1];
  v1343.i16[6] = v1604.val[0].i16[6];
  v1343.i16[7] = v1604.val[1].i16[6];
  v1583.val[0] = (int8x16_t)vmovl_high_u8(v1336);
  v1583.val[1] = (int8x16_t)vmovl_high_u8(v1337);
  v1344 = vzip2q_s16((int16x8_t)v1602.val[0], (int16x8_t)v1602.val[1]);
  v1344.i32[3] = v1343.i32[3];
  v1333.i64[1] = v1344.i64[1];
  v1496 = (uint16x8_t)v1333;
  v1340.i32[0] = vqtbl2q_s8(v1590, (int8x16_t)xmmword_208F2B1E0).u32[0];
  v1340.i32[1] = vqtbl2q_s8(v1593, (int8x16_t)xmmword_208F2B1D0).i32[1];
  v1345 = vqtbl2q_s8(v1602, (int8x16_t)xmmword_208F2B1C0);
  v1345.i32[3] = vzip2q_s16(*(int16x8_t *)&v1604, *(int16x8_t *)(&v1604 + 16)).i32[3];
  v1340.i64[1] = v1345.i64[1];
  v1495 = (uint16x8_t)v1340;
  v1340.i32[0] = vzip1q_s16((int16x8_t)v1596.val[0], (int16x8_t)v1596.val[1]).u32[0];
  v1340.i32[1] = vqtbl2q_s8(v1600, (int8x16_t)xmmword_208F2B0C0).i32[1];
  v1346 = vqtbl2q_s8(v1582, (int8x16_t)xmmword_208F2B0B0);
  v1346.i32[3] = vqtbl2q_s8(v1583, (int8x16_t)xmmword_208F2B0A0).i32[3];
  v1340.i64[1] = v1346.i64[1];
  v1493 = (uint16x8_t)v1340;
  v1340.i32[0] = vtrn2q_s16((int16x8_t)v1596.val[0], (int16x8_t)v1596.val[1]).u32[0];
  v1340.i32[1] = vqtbl2q_s8(v1600, (int8x16_t)xmmword_208F2B0F0).i32[1];
  v1347 = vqtbl2q_s8(v1582, (int8x16_t)xmmword_208F2B0E0);
  v1347.i32[3] = vqtbl2q_s8(v1583, (int8x16_t)xmmword_208F2B0D0).i32[3];
  v1340.i64[1] = v1347.i64[1];
  v1490 = (uint16x8_t)v1340;
  v1347.i16[2] = v1600.val[0].i16[2];
  v1347.i16[3] = v1600.val[1].i16[2];
  v1340.i32[0] = vqtbl2q_s8(v1596, (int8x16_t)xmmword_208F2B120).u32[0];
  v1340.i32[1] = v1347.i32[1];
  v1348 = vqtbl2q_s8(v1582, (int8x16_t)xmmword_208F2B110);
  v1348.i32[3] = vqtbl2q_s8(v1583, (int8x16_t)xmmword_208F2B100).i32[3];
  v1340.i64[1] = v1348.i64[1];
  v1487 = (uint16x8_t)v1340;
  v1341.i32[0] = vqtbl2q_s8(v1596, (int8x16_t)xmmword_208F2B150).u32[0];
  v1341.i32[1] = vtrn2q_s16(*(int16x8_t *)&v1600, *(int16x8_t *)(&v1600 + 16)).i32[1];
  v1349 = vqtbl2q_s8(v1582, (int8x16_t)xmmword_208F2B140);
  v1349.i32[3] = vqtbl2q_s8(v1583, (int8x16_t)xmmword_208F2B130).i32[3];
  v1341.i64[1] = v1349.i64[1];
  v1486 = (uint16x8_t)v1341;
  v1350.i32[0] = vzip2q_s16((int16x8_t)v1596.val[0], (int16x8_t)v1596.val[1]).u32[0];
  v1350.i32[1] = vqtbl2q_s8(v1600, (int8x16_t)xmmword_208F2B170).i32[1];
  v1349.i16[4] = v1582.val[0].i16[4];
  v1349.i16[5] = v1582.val[1].i16[4];
  v1349.i32[3] = vqtbl2q_s8(v1583, (int8x16_t)xmmword_208F2B160).i32[3];
  v1350.i64[1] = v1349.i64[1];
  v1351.i32[0] = vqtbl2q_s8(v1596, (int8x16_t)xmmword_208F2B190).u32[0];
  v1351.i32[1] = vzip2q_s16(*(int16x8_t *)&v1600, *(int16x8_t *)(&v1600 + 16)).i32[1];
  v1352 = vtrn2q_s16((int16x8_t)v1582.val[0], (int16x8_t)v1582.val[1]);
  v1352.i32[3] = vqtbl2q_s8(v1583, (int8x16_t)xmmword_208F2B180).i32[3];
  v1351.i64[1] = v1352.i64[1];
  v1604.val[1].i32[0] = vqtbl2q_s8(v1596, (int8x16_t)xmmword_208F2B1B0).u32[0];
  v1604.val[1].i32[1] = vqtbl2q_s8(v1600, (int8x16_t)xmmword_208F2B1A0).i32[1];
  v1352.i16[6] = v1583.val[0].i16[6];
  v1352.i16[7] = v1583.val[1].i16[6];
  v1593.val[1] = (int8x16_t)vzip2q_s16((int16x8_t)v1582.val[0], (int16x8_t)v1582.val[1]);
  v1593.val[1].i32[3] = v1352.i32[3];
  v1604.val[1].i64[1] = v1593.val[1].i64[1];
  v1590.val[1].i32[0] = vqtbl2q_s8(v1596, (int8x16_t)xmmword_208F2B1E0).u32[0];
  v1590.val[1].i32[1] = vqtbl2q_s8(v1600, (int8x16_t)xmmword_208F2B1D0).i32[1];
  v1593.val[1] = vqtbl2q_s8(v1582, (int8x16_t)xmmword_208F2B1C0);
  v1593.val[1].i32[3] = vzip2q_s16(*(int16x8_t *)&v1583, *(int16x8_t *)(&v1583 + 16)).i32[3];
  v1590.val[1].i64[1] = v1593.val[1].i64[1];
  v1333.i64[0] = 0x101010101010101;
  v1333.i64[1] = 0x101010101010101;
  v1593.val[1] = vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v1328, 1uLL), v1333);
  v1596.val[0] = vandq_s8(v1328, v1333);
  v1600.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v1596.val[0]);
  v1602.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v1593.val[1]);
  v1580.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1596.val[0].i8);
  v1580.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1593.val[1].i8);
  v1593.val[1] = vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v1328, 2uLL), v1333);
  v1596.val[0] = vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v1328, 3uLL), v1333);
  v1596.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v1593.val[1]);
  v1600.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v1596.val[0]);
  v1575.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1593.val[1].i8);
  v1575.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1596.val[0].i8);
  v1604.val[0] = vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v1328, 4uLL), v1333);
  v1582.val[0] = vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v1328, 5uLL), v1333);
  v1583.val[1] = vandq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v1328, 6uLL), v1333);
  v1593.val[1].i32[0] = vzip1q_s16((int16x8_t)v1580.val[0], (int16x8_t)v1580.val[1]).u32[0];
  v1593.val[1].i32[1] = vqtbl2q_s8(v1575, (int8x16_t)xmmword_208F2B0C0).i32[1];
  v1574.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1604.val[0].i8);
  v1574.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1582.val[0].i8);
  v1593.val[0] = (int8x16_t)vshrq_n_u8((uint8x16_t)v1328, 7uLL);
  v1573.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1583.val[1].i8);
  v1573.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v1593.val[0].i8);
  v1353 = vqtbl2q_s8(v1574, (int8x16_t)xmmword_208F2B0B0);
  v1353.i32[3] = vqtbl2q_s8(v1573, (int8x16_t)xmmword_208F2B0A0).i32[3];
  v1593.val[1].i64[1] = v1353.i64[1];
  v1488 = (uint16x8_t)v1593.val[1];
  v1593.val[1].i32[0] = vtrn2q_s16((int16x8_t)v1580.val[0], (int16x8_t)v1580.val[1]).u32[0];
  v1593.val[1].i32[1] = vqtbl2q_s8(v1575, (int8x16_t)xmmword_208F2B0F0).i32[1];
  v1596.val[0] = vqtbl2q_s8(v1574, (int8x16_t)xmmword_208F2B0E0);
  v1596.val[0].i32[3] = vqtbl2q_s8(v1573, (int8x16_t)xmmword_208F2B0D0).i32[3];
  v1593.val[1].i64[1] = v1596.val[0].i64[1];
  v1602.val[1].i16[2] = v1575.val[0].i16[2];
  v1602.val[1].i16[3] = v1575.val[1].i16[2];
  v1596.val[0].i32[0] = vqtbl2q_s8(v1580, (int8x16_t)xmmword_208F2B120).u32[0];
  v1596.val[0].i32[1] = v1602.val[1].i32[1];
  v1602.val[1] = vqtbl2q_s8(v1574, (int8x16_t)xmmword_208F2B110);
  v1602.val[1].i32[3] = vqtbl2q_s8(v1573, (int8x16_t)xmmword_208F2B100).i32[3];
  v1596.val[0].i64[1] = v1602.val[1].i64[1];
  v1602.val[1].i32[0] = vqtbl2q_s8(v1580, (int8x16_t)xmmword_208F2B150).u32[0];
  v1602.val[1].i32[1] = vtrn2q_s16(*(int16x8_t *)&v1575, *(int16x8_t *)(&v1575 + 16)).i32[1];
  v1354 = (uint16x8_t)vqtbl2q_s8(v1574, (int8x16_t)xmmword_208F2B140);
  v1354.i32[3] = vqtbl2q_s8(v1573, (int8x16_t)xmmword_208F2B130).i32[3];
  v1602.val[1].i64[1] = v1354.i64[1];
  v1354.i32[0] = vzip2q_s16((int16x8_t)v1580.val[0], (int16x8_t)v1580.val[1]).u32[0];
  v1354.i32[1] = vqtbl2q_s8(v1575, (int8x16_t)xmmword_208F2B170).i32[1];
  LOWORD(v1355) = v1574.val[0].i16[4];
  WORD1(v1355) = v1574.val[1].i16[4];
  v1582.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v1604.val[0]);
  v1583.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v1582.val[0]);
  HIDWORD(v1355) = vqtbl2q_s8(v1573, (int8x16_t)xmmword_208F2B160).i32[3];
  v1354.i64[1] = v1355;
  v1604.val[0].i32[0] = vqtbl2q_s8(v1580, (int8x16_t)xmmword_208F2B190).u32[0];
  v1604.val[0].i32[1] = vzip2q_s16(*(int16x8_t *)&v1575, *(int16x8_t *)(&v1575 + 16)).i32[1];
  v1356 = (uint16x8_t)vtrn2q_s16((int16x8_t)v1574.val[0], (int16x8_t)v1574.val[1]);
  v1356.i32[3] = vqtbl2q_s8(v1573, (int8x16_t)xmmword_208F2B180).i32[3];
  v1604.val[0].i64[1] = v1356.i64[1];
  v1356.i32[0] = vqtbl2q_s8(v1580, (int8x16_t)xmmword_208F2B1B0).u32[0];
  v1356.i32[1] = vqtbl2q_s8(v1575, (int8x16_t)xmmword_208F2B1A0).i32[1];
  v1582.val[0].i16[6] = v1573.val[0].i16[6];
  v1582.val[0].i16[7] = v1573.val[1].i16[6];
  v1584.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v1583.val[1]);
  v1584.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v1593.val[0]);
  v1593.val[0] = (int8x16_t)vzip2q_s16((int16x8_t)v1574.val[0], (int16x8_t)v1574.val[1]);
  v1593.val[0].i32[3] = v1582.val[0].i32[3];
  v1356.i64[1] = v1593.val[0].i64[1];
  v1582.val[0].i32[0] = vqtbl2q_s8(v1580, (int8x16_t)xmmword_208F2B1E0).u32[0];
  v1582.val[0].i32[1] = vqtbl2q_s8(v1575, (int8x16_t)xmmword_208F2B1D0).i32[1];
  v1574.val[0] = vqtbl2q_s8(v1574, (int8x16_t)xmmword_208F2B1C0);
  v1574.val[0].i32[3] = vzip2q_s16(*(int16x8_t *)&v1573, *(int16x8_t *)(&v1573 + 16)).i32[3];
  v1582.val[0].i64[1] = v1574.val[0].i64[1];
  v1583.val[1].i32[0] = vzip1q_s16((int16x8_t)v1600.val[1], (int16x8_t)v1602.val[0]).u32[0];
  v1583.val[1].i32[1] = vqtbl2q_s8(*(&v1596 + 16), (int8x16_t)xmmword_208F2B0C0).i32[1];
  v1573.val[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1582 + 16), (int8x16_t)xmmword_208F2B0B0);
  v1573.val[0].i32[3] = vqtbl2q_s8(v1584, (int8x16_t)xmmword_208F2B0A0).i32[3];
  v1583.val[1].i64[1] = v1573.val[0].i64[1];
  v1512 = (uint16x8_t)v1604.val[1];
  v1513 = (uint16x8_t)v1590.val[1];
  v1573.val[1].i32[0] = vtrn2q_s16((int16x8_t)v1600.val[1], (int16x8_t)v1602.val[0]).u32[0];
  v1573.val[1].i32[1] = vqtbl2q_s8(*(&v1596 + 16), (int8x16_t)xmmword_208F2B0F0).i32[1];
  v1574.val[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1582 + 16), (int8x16_t)xmmword_208F2B0E0);
  v1574.val[0].i32[3] = vqtbl2q_s8(v1584, (int8x16_t)xmmword_208F2B0D0).i32[3];
  v1573.val[1].i64[1] = v1574.val[0].i64[1];
  v1574.val[1].i16[2] = v1596.val[1].i16[2];
  v1574.val[1].i16[3] = v1600.val[0].i16[2];
  v1574.val[0].i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1600 + 16), (int8x16_t)xmmword_208F2B120).u32[0];
  v1574.val[0].i32[1] = v1574.val[1].i32[1];
  v1574.val[1] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1582 + 16), (int8x16_t)xmmword_208F2B110);
  v1574.val[1].i32[3] = vqtbl2q_s8(v1584, (int8x16_t)xmmword_208F2B100).i32[3];
  v1574.val[0].i64[1] = v1574.val[1].i64[1];
  v1604.val[1].i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1600 + 16), (int8x16_t)xmmword_208F2B150).u32[0];
  v1604.val[1].i32[1] = vtrn2q_s16(*(int16x8_t *)(&v1596 + 16), *(int16x8_t *)&v1600).i32[1];
  v1574.val[1] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1582 + 16), (int8x16_t)xmmword_208F2B140);
  v1574.val[1].i32[3] = vqtbl2q_s8(v1584, (int8x16_t)xmmword_208F2B130).i32[3];
  v1604.val[1].i64[1] = v1574.val[1].i64[1];
  v1574.val[1].i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1600 + 16), (int8x16_t)xmmword_208F2B190).u32[0];
  v1575.val[0].i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1600 + 16), (int8x16_t)xmmword_208F2B1B0).u32[0];
  v1575.val[1].i32[0] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1600 + 16), (int8x16_t)xmmword_208F2B1E0).u32[0];
  v1580.val[0].i32[0] = vzip2q_s16((int16x8_t)v1600.val[1], (int16x8_t)v1602.val[0]).u32[0];
  v1580.val[0].i32[1] = vqtbl2q_s8(*(&v1596 + 16), (int8x16_t)xmmword_208F2B170).i32[1];
  v1580.val[1].i16[4] = v1582.val[1].i16[4];
  v1580.val[1].i16[5] = v1583.val[0].i16[4];
  v1580.val[1].i32[3] = vqtbl2q_s8(v1584, (int8x16_t)xmmword_208F2B160).i32[3];
  v1580.val[0].i64[1] = v1580.val[1].i64[1];
  v1574.val[1].i32[1] = vzip2q_s16(*(int16x8_t *)(&v1596 + 16), *(int16x8_t *)&v1600).i32[1];
  v1593.val[0] = (int8x16_t)vtrn2q_s16((int16x8_t)v1582.val[1], (int16x8_t)v1583.val[0]);
  v1593.val[0].i32[3] = vqtbl2q_s8(v1584, (int8x16_t)xmmword_208F2B180).i32[3];
  v1574.val[1].i64[1] = v1593.val[0].i64[1];
  v1575.val[0].i32[1] = vqtbl2q_s8(*(&v1596 + 16), (int8x16_t)xmmword_208F2B1A0).i32[1];
  v1580.val[1] = vqtbl2q_s8(*(int8x16x2_t *)((char *)&v1582 + 16), (int8x16_t)xmmword_208F2B1C0);
  v1590.val[1] = (int8x16_t)vzip2q_s16((int16x8_t)v1582.val[1], (int16x8_t)v1583.val[0]);
  v1593.val[0].i16[6] = v1584.val[0].i16[6];
  v1593.val[0].i16[7] = v1584.val[1].i16[6];
  v1590.val[1].i32[3] = v1593.val[0].i32[3];
  v1575.val[0].i64[1] = v1590.val[1].i64[1];
  v1575.val[1].i32[1] = vqtbl2q_s8(*(&v1596 + 16), (int8x16_t)xmmword_208F2B1D0).i32[1];
  v1580.val[1].i32[3] = vzip2q_s16(*(int16x8_t *)&v1584, *(int16x8_t *)(&v1584 + 16)).i32[3];
  v1575.val[1].i64[1] = v1580.val[1].i64[1];
  v1529 = (uint16x8_t)v1575.val[1];
  v1528 = (uint16x8_t)v1575.val[0];
  v1527 = (uint16x8_t)v1574.val[1];
  v1526 = (uint16x8_t)v1580.val[0];
  v1524 = (uint16x8_t)v1574.val[0];
  v1523 = (uint16x8_t)v1573.val[1];
  v1574.val[0] = (int8x16_t)vdupq_n_s16(0xD01u);
  v1575.val[0] = (int8x16_t)vmull_high_u16(v1510, (uint16x8_t)v1574.val[0]);
  v1575.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1510.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1508, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1508.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1573.val[1].i64[0] = 0x100000001;
  v1573.val[1].i64[1] = 0x100000001;
  v1511[0] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL));
  v1511[1] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1506, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1506.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1504, (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1504.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1511[2] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1511[3] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1501, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1501.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1498, (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1498.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1511[4] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1511[5] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1496, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1496.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1495, (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1495.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1511[6] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1511[7] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1493, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1493.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1490, (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1490.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1511[8] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1511[9] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1487, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1487.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1486, (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1486.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1511[10] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1511[11] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1350, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1350.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1351, (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1351.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1511[12] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1511[13] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1512, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1512.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1513, (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1513.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1512 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1513 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1488, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1488.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16((uint16x8_t)v1593.val[1], (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1593.val[1].i8, *(uint16x4_t *)v1574.val[0].i8);
  v1514 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1515 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16((uint16x8_t)v1596.val[0], (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1596.val[0].i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16((uint16x8_t)v1602.val[1], (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1602.val[1].i8, *(uint16x4_t *)v1574.val[0].i8);
  v1516 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1517 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1354, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1354.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16((uint16x8_t)v1604.val[0], (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1604.val[0].i8, *(uint16x4_t *)v1574.val[0].i8);
  v1518 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1519 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1356, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1356.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16((uint16x8_t)v1582.val[0], (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1582.val[0].i8, *(uint16x4_t *)v1574.val[0].i8);
  v1520 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1521 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16((uint16x8_t)v1583.val[1], (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1583.val[1].i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1523, (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1523.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1522 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1523 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1524, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1524.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16((uint16x8_t)v1604.val[1], (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1604.val[1].i8, *(uint16x4_t *)v1574.val[0].i8);
  v1524 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1525 = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1526, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1526.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1527, (uint16x8_t)v1574.val[0]);
  v1575.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1527.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1526 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1527 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[0], v1573.val[1]), (uint32x4_t)v1575.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1575.val[1] = (int8x16_t)vmull_high_u16(v1528, (uint16x8_t)v1574.val[0]);
  v1574.val[1] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1528.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1580.val[0] = (int8x16_t)vmull_high_u16(v1529, (uint16x8_t)v1574.val[0]);
  v1574.val[0] = (int8x16_t)vmull_u16(*(uint16x4_t *)v1529.i8, *(uint16x4_t *)v1574.val[0].i8);
  v1528 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[1], v1573.val[1]), (uint32x4_t)v1574.val[1], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1575.val[1], v1573.val[1]), (uint32x4_t)v1575.val[1], 1uLL));
  v1529 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1574.val[0], v1573.val[1]), (uint32x4_t)v1574.val[0], 1uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8(v1580.val[0], v1573.val[1]), (uint32x4_t)v1580.val[0], 1uLL));
  v1357.i64[0] = 0xD000D000D000D00;
  v1357.i64[1] = 0xD000D000D000D00;
  do
  {
    v1358 = (int8x16_t *)&v1539.i8[v1326 * 16];
    v1359 = (int8x16_t)vaddq_s16((int16x8_t)v1511[v1326], *(int16x8_t *)((char *)&v1539 + v1326 * 16));
    v1360 = (int8x16_t)vaddq_s16((int16x8_t)v1511[v1326 + 1], *(int16x8_t *)((char *)&v1539 + v1326 * 16 + 16));
    v1361 = vaddq_s16((int16x8_t)v1359, v1357);
    v1362 = vaddq_s16((int16x8_t)v1360, v1357);
    *v1358 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1361), v1359), (int8x16_t)vmaxq_s16(v1361, (int16x8_t)0));
    v1358[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1362), v1360), (int8x16_t)vmaxq_s16(v1362, (int16x8_t)0));
    v1326 += 2;
  }
  while (v1326 != 32);
  v1363 = 0;
  v1364 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v1365.i64[0] = 0xD0000000D00;
  v1365.i64[1] = 0xD0000000D00;
  v1366 = (uint32x4_t)vdupq_n_s32(0x680u);
  v1367 = (int8x16_t)vdupq_n_s64(1uLL);
  v1368 = (uint32x4_t)vdupq_n_s32(0x1381u);
  do
  {
    v1369 = *(uint16x8_t *)&v1530[v1363];
    v1370 = vshll_n_u16(*(uint16x4_t *)v1369.i8, 0xAuLL);
    v1371 = vshll_high_n_u16(v1369, 0xAuLL);
    v1372 = (int64x2_t)vmull_high_u32(v1370, v1364);
    v1373 = (int64x2_t)vmull_u32(*(uint32x2_t *)v1370.i8, *(uint32x2_t *)v1364.i8);
    v1374 = (int64x2_t)vmull_high_u32(v1371, v1364);
    v1375 = (int64x2_t)vmull_u32(*(uint32x2_t *)v1371.i8, *(uint32x2_t *)v1364.i8);
    v1376 = (uint32x4_t)vmlaq_s32((int32x4_t)v1371, vshrn_high_n_s64(vshrn_n_s64(v1375, 0x18uLL), v1374, 0x18uLL), v1365);
    v1377 = (uint32x4_t)vmlaq_s32((int32x4_t)v1370, vshrn_high_n_s64(vshrn_n_s64(v1373, 0x18uLL), v1372, 0x18uLL), v1365);
    v1378 = vcgtq_u32(v1377, v1366);
    v1379.i64[0] = v1378.u32[2];
    v1379.i64[1] = v1378.u32[3];
    v1380 = (uint64x2_t)vandq_s8(v1379, v1367);
    v1379.i64[0] = v1378.u32[0];
    v1379.i64[1] = v1378.u32[1];
    v1381 = (uint64x2_t)vandq_s8(v1379, v1367);
    v1382 = vcgtq_u32(v1376, v1366);
    v1379.i64[0] = v1382.u32[2];
    v1379.i64[1] = v1382.u32[3];
    v1383 = (uint64x2_t)vandq_s8(v1379, v1367);
    v1379.i64[0] = v1382.u32[0];
    v1379.i64[1] = v1382.u32[1];
    v1384 = (int64x2_t)vsraq_n_u64((uint64x2_t)vandq_s8(v1379, v1367), (uint64x2_t)v1375, 0x18uLL);
    v1385 = (int64x2_t)vsraq_n_u64(v1381, (uint64x2_t)v1373, 0x18uLL);
    v1386 = (int64x2_t)vsraq_n_u64(v1380, (uint64x2_t)v1372, 0x18uLL);
    v1387 = vcgtq_u32(v1376, v1368);
    v1379.i64[0] = v1387.u32[0];
    v1379.i64[1] = v1387.u32[1];
    v1388 = (int64x2_t)vandq_s8(v1379, v1367);
    v1379.i64[0] = v1387.u32[2];
    v1379.i64[1] = v1387.u32[3];
    v1389 = (int64x2_t)vandq_s8(v1379, v1367);
    v1390 = vcgtq_u32(v1377, v1368);
    v1379.i64[0] = v1390.u32[0];
    v1379.i64[1] = v1390.u32[1];
    v1391 = (int64x2_t)vandq_s8(v1379, v1367);
    v1379.i64[0] = v1390.u32[2];
    v1379.i64[1] = v1390.u32[3];
    *(_OWORD *)&v1530[v1363] = *(_OWORD *)&vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v1385, v1391), (int32x4_t)vaddq_s64(v1386, (int64x2_t)vandq_s8(v1379, v1367))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v1384, v1388), (int32x4_t)vaddq_s64((int64x2_t)vsraq_n_u64(v1383, (uint64x2_t)v1374, 0x18uLL), v1389))) & __PAIR128__(0x3FF03FF03FF03FFLL, 0x3FF03FF03FF03FFLL);
    v1363 += 2;
  }
  while (v1363 != 64);
  v1392 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v1393.i64[0] = 0xD0000000D00;
  v1393.i64[1] = 0xD0000000D00;
  v1394 = (uint32x4_t)vdupq_n_s32(0x680u);
  v1395 = (int8x16_t)vdupq_n_s64(1uLL);
  v1396 = (uint32x4_t)vdupq_n_s32(0x1381u);
  do
  {
    v1397 = *(uint16x8_t *)&v1530[v1363];
    v1398 = vshll_n_u16(*(uint16x4_t *)v1397.i8, 0xAuLL);
    v1399 = vshll_high_n_u16(v1397, 0xAuLL);
    v1400 = (int64x2_t)vmull_high_u32(v1398, v1392);
    v1401 = (int64x2_t)vmull_u32(*(uint32x2_t *)v1398.i8, *(uint32x2_t *)v1392.i8);
    v1402 = (int64x2_t)vmull_high_u32(v1399, v1392);
    v1403 = (int64x2_t)vmull_u32(*(uint32x2_t *)v1399.i8, *(uint32x2_t *)v1392.i8);
    v1404 = (uint32x4_t)vmlaq_s32((int32x4_t)v1399, vshrn_high_n_s64(vshrn_n_s64(v1403, 0x18uLL), v1402, 0x18uLL), v1393);
    v1405 = (uint32x4_t)vmlaq_s32((int32x4_t)v1398, vshrn_high_n_s64(vshrn_n_s64(v1401, 0x18uLL), v1400, 0x18uLL), v1393);
    v1406 = vcgtq_u32(v1405, v1394);
    v1407.i64[0] = v1406.u32[2];
    v1407.i64[1] = v1406.u32[3];
    v1408 = (uint64x2_t)vandq_s8(v1407, v1395);
    v1407.i64[0] = v1406.u32[0];
    v1407.i64[1] = v1406.u32[1];
    v1409 = (uint64x2_t)vandq_s8(v1407, v1395);
    v1410 = vcgtq_u32(v1404, v1394);
    v1407.i64[0] = v1410.u32[2];
    v1407.i64[1] = v1410.u32[3];
    v1411 = (uint64x2_t)vandq_s8(v1407, v1395);
    v1407.i64[0] = v1410.u32[0];
    v1407.i64[1] = v1410.u32[1];
    v1412 = (int64x2_t)vsraq_n_u64((uint64x2_t)vandq_s8(v1407, v1395), (uint64x2_t)v1403, 0x18uLL);
    v1413 = (int64x2_t)vsraq_n_u64(v1409, (uint64x2_t)v1401, 0x18uLL);
    v1414 = (int64x2_t)vsraq_n_u64(v1408, (uint64x2_t)v1400, 0x18uLL);
    v1415 = vcgtq_u32(v1404, v1396);
    v1407.i64[0] = v1415.u32[0];
    v1407.i64[1] = v1415.u32[1];
    v1416 = (int64x2_t)vandq_s8(v1407, v1395);
    v1407.i64[0] = v1415.u32[2];
    v1407.i64[1] = v1415.u32[3];
    v1417 = (int64x2_t)vandq_s8(v1407, v1395);
    v1418 = vcgtq_u32(v1405, v1396);
    v1407.i64[0] = v1418.u32[0];
    v1407.i64[1] = v1418.u32[1];
    v1419 = (int64x2_t)vandq_s8(v1407, v1395);
    v1407.i64[0] = v1418.u32[2];
    v1407.i64[1] = v1418.u32[3];
    *(_OWORD *)&v1530[v1363] = *(_OWORD *)&vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v1413, v1419), (int32x4_t)vaddq_s64(v1414, (int64x2_t)vandq_s8(v1407, v1395))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v1412, v1416), (int32x4_t)vaddq_s64((int64x2_t)vsraq_n_u64(v1411, (uint64x2_t)v1402, 0x18uLL), v1417))) & __PAIR128__(0x3FF03FF03FF03FFLL, 0x3FF03FF03FF03FFLL);
    v1363 += 2;
  }
  while (v1363 != 128);
  v1420 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v1421.i64[0] = 0xD0000000D00;
  v1421.i64[1] = 0xD0000000D00;
  v1422 = (uint32x4_t)vdupq_n_s32(0x680u);
  v1423 = (int8x16_t)vdupq_n_s64(1uLL);
  v1424 = (uint32x4_t)vdupq_n_s32(0x1381u);
  do
  {
    v1425 = *(uint16x8_t *)&v1530[v1363];
    v1426 = vshll_n_u16(*(uint16x4_t *)v1425.i8, 0xAuLL);
    v1427 = vshll_high_n_u16(v1425, 0xAuLL);
    v1428 = (int64x2_t)vmull_high_u32(v1426, v1420);
    v1429 = (int64x2_t)vmull_u32(*(uint32x2_t *)v1426.i8, *(uint32x2_t *)v1420.i8);
    v1430 = (int64x2_t)vmull_high_u32(v1427, v1420);
    v1431 = (int64x2_t)vmull_u32(*(uint32x2_t *)v1427.i8, *(uint32x2_t *)v1420.i8);
    v1432 = (uint32x4_t)vmlaq_s32((int32x4_t)v1427, vshrn_high_n_s64(vshrn_n_s64(v1431, 0x18uLL), v1430, 0x18uLL), v1421);
    v1433 = (uint32x4_t)vmlaq_s32((int32x4_t)v1426, vshrn_high_n_s64(vshrn_n_s64(v1429, 0x18uLL), v1428, 0x18uLL), v1421);
    v1434 = vcgtq_u32(v1433, v1422);
    v1435.i64[0] = v1434.u32[2];
    v1435.i64[1] = v1434.u32[3];
    v1436 = (uint64x2_t)vandq_s8(v1435, v1423);
    v1435.i64[0] = v1434.u32[0];
    v1435.i64[1] = v1434.u32[1];
    v1437 = (uint64x2_t)vandq_s8(v1435, v1423);
    v1438 = vcgtq_u32(v1432, v1422);
    v1435.i64[0] = v1438.u32[2];
    v1435.i64[1] = v1438.u32[3];
    v1439 = (uint64x2_t)vandq_s8(v1435, v1423);
    v1435.i64[0] = v1438.u32[0];
    v1435.i64[1] = v1438.u32[1];
    v1440 = (int64x2_t)vsraq_n_u64((uint64x2_t)vandq_s8(v1435, v1423), (uint64x2_t)v1431, 0x18uLL);
    v1441 = (int64x2_t)vsraq_n_u64(v1437, (uint64x2_t)v1429, 0x18uLL);
    v1442 = (int64x2_t)vsraq_n_u64(v1436, (uint64x2_t)v1428, 0x18uLL);
    v1443 = vcgtq_u32(v1432, v1424);
    v1435.i64[0] = v1443.u32[0];
    v1435.i64[1] = v1443.u32[1];
    v1444 = (int64x2_t)vandq_s8(v1435, v1423);
    v1435.i64[0] = v1443.u32[2];
    v1435.i64[1] = v1443.u32[3];
    v1445 = (int64x2_t)vandq_s8(v1435, v1423);
    v1446 = vcgtq_u32(v1433, v1424);
    v1435.i64[0] = v1446.u32[0];
    v1435.i64[1] = v1446.u32[1];
    v1447 = (int64x2_t)vandq_s8(v1435, v1423);
    v1435.i64[0] = v1446.u32[2];
    v1435.i64[1] = v1446.u32[3];
    *(_OWORD *)&v1530[v1363] = *(_OWORD *)&vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v1441, v1447), (int32x4_t)vaddq_s64(v1442, (int64x2_t)vandq_s8(v1435, v1423))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v1440, v1444), (int32x4_t)vaddq_s64((int64x2_t)vsraq_n_u64(v1439, (uint64x2_t)v1430, 0x18uLL), v1445))) & __PAIR128__(0x3FF03FF03FF03FFLL, 0x3FF03FF03FF03FFLL);
    v1363 += 2;
  }
  while (v1363 != 192);
  vector_encode(v1491, (uint64_t)v1530, 10);
  v1448 = 0;
  v1449 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v1450.i64[0] = 0xD0000000D00;
  v1450.i64[1] = 0xD0000000D00;
  v1451 = (uint32x4_t)vdupq_n_s32(0x680u);
  v1452 = (int8x16_t)vdupq_n_s64(1uLL);
  v1453 = (uint32x4_t)vdupq_n_s32(0x1381u);
  v1454.i64[0] = 0xF000F000F000FLL;
  v1454.i64[1] = 0xF000F000F000FLL;
  do
  {
    v1455 = *(uint16x8_t *)((char *)&v1539 + v1448);
    v1456 = vshll_n_u16(*(uint16x4_t *)v1455.i8, 4uLL);
    v1457 = vshll_high_n_u16(v1455, 4uLL);
    v1458 = (int64x2_t)vmull_high_u32(v1456, v1449);
    v1459 = (int64x2_t)vmull_u32(*(uint32x2_t *)v1456.i8, *(uint32x2_t *)v1449.i8);
    v1460 = (int64x2_t)vmull_high_u32(v1457, v1449);
    v1461 = (int64x2_t)vmull_u32(*(uint32x2_t *)v1457.i8, *(uint32x2_t *)v1449.i8);
    v1462 = (uint32x4_t)vmlaq_s32((int32x4_t)v1457, vshrn_high_n_s64(vshrn_n_s64(v1461, 0x18uLL), v1460, 0x18uLL), v1450);
    v1463 = (uint32x4_t)vmlaq_s32((int32x4_t)v1456, vshrn_high_n_s64(vshrn_n_s64(v1459, 0x18uLL), v1458, 0x18uLL), v1450);
    v1464 = vcgtq_u32(v1463, v1451);
    v1465.i64[0] = v1464.u32[2];
    v1465.i64[1] = v1464.u32[3];
    v1466 = (uint64x2_t)vandq_s8(v1465, v1452);
    v1465.i64[0] = v1464.u32[0];
    v1465.i64[1] = v1464.u32[1];
    v1467 = (uint64x2_t)vandq_s8(v1465, v1452);
    v1468 = vcgtq_u32(v1462, v1451);
    v1465.i64[0] = v1468.u32[2];
    v1465.i64[1] = v1468.u32[3];
    v1469 = (uint64x2_t)vandq_s8(v1465, v1452);
    v1465.i64[0] = v1468.u32[0];
    v1465.i64[1] = v1468.u32[1];
    v1470 = (int64x2_t)vsraq_n_u64((uint64x2_t)vandq_s8(v1465, v1452), (uint64x2_t)v1461, 0x18uLL);
    v1471 = (int64x2_t)vsraq_n_u64(v1467, (uint64x2_t)v1459, 0x18uLL);
    v1472 = (int64x2_t)vsraq_n_u64(v1466, (uint64x2_t)v1458, 0x18uLL);
    v1473 = vcgtq_u32(v1462, v1453);
    v1465.i64[0] = v1473.u32[0];
    v1465.i64[1] = v1473.u32[1];
    v1474 = (int64x2_t)vandq_s8(v1465, v1452);
    v1465.i64[0] = v1473.u32[2];
    v1465.i64[1] = v1473.u32[3];
    v1475 = (int64x2_t)vandq_s8(v1465, v1452);
    v1476 = vcgtq_u32(v1463, v1453);
    v1465.i64[0] = v1476.u32[0];
    v1465.i64[1] = v1476.u32[1];
    v1477 = (int64x2_t)vandq_s8(v1465, v1452);
    v1465.i64[0] = v1476.u32[2];
    v1465.i64[1] = v1476.u32[3];
    *(int8x16_t *)((char *)&v1539 + v1448) = vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v1471, v1477), (int32x4_t)vaddq_s64(v1472, (int64x2_t)vandq_s8(v1465, v1452))), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v1470, v1474), (int32x4_t)vaddq_s64((int64x2_t)vsraq_n_u64(v1469, (uint64x2_t)v1460, 0x18uLL), v1475))), v1454);
    v1448 += 16;
  }
  while (v1448 != 512);
  v1478 = 0;
  v1479 = 0;
  v1480 = 0;
  v1481 = v1491 + 960;
  do
  {
    LODWORD(result) = 0;
    v1483 = v1539.u16[v1478];
    while (1)
    {
      v1484 = 8 - v1479;
      if (4 - (int)result < 8 - v1479)
        break;
      v1485 = (v1483 & kMasks[7 - v1479]) << v1479;
      v1479 = 0;
      *v1481++ = v1480 | v1485;
      v1480 = 0;
      result = (v1484 + result);
      LOBYTE(v1483) = v1483 >> v1484;
      if ((int)result >= 4)
        goto LABEL_58;
    }
    v1480 |= (v1483 & kMasks[(3 - result)]) << v1479;
    v1479 += 4 - result;
    result = 4;
LABEL_58:
    ++v1478;
  }
  while (v1478 != 256);
  if (v1479 >= 1)
    *v1481 = v1480;
  return result;
}

_DWORD *KYBER_decap(char *a1, unsigned __int8 *a2, uint8x16_t *a3)
{
  uint16x8_t v6;
  uint32x4_t v7;
  uint32x4_t v8;
  uint32x4_t v9;
  uint32x4_t v10;
  int8x16_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  uint32x4_t v15;
  uint32x4_t v16;
  uint32x4_t v17;
  uint32x4_t v18;
  uint32x4_t v19;
  uint32x4_t v20;
  uint32x4_t v21;
  uint32x4_t v22;
  uint32x4_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint32x4_t v31;
  uint32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint32x4_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint32x4_t v51;
  uint32x4_t v52;
  uint32x4_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  uint32x4_t v57;
  uint32x4_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  uint32x4_t v63;
  uint32x4_t v64;
  uint32x4_t v65;
  uint32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  uint32x4_t v69;
  uint32x4_t v70;
  uint32x4_t v71;
  uint32x4_t v72;
  uint32x4_t v73;
  uint32x4_t v74;
  uint32x4_t v75;
  uint32x4_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  uint32x4_t v79;
  uint32x4_t v80;
  uint32x4_t v81;
  uint32x4_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  uint32x4_t v85;
  uint32x4_t v86;
  uint32x4_t v87;
  uint32x4_t v88;
  uint32x4_t v89;
  uint32x4_t v90;
  uint32x4_t v91;
  uint32x4_t v92;
  uint32x4_t v93;
  uint32x4_t v94;
  uint32x4_t v95;
  uint32x4_t v96;
  uint32x4_t v97;
  uint32x4_t v98;
  uint32x4_t v99;
  uint32x4_t v100;
  uint32x4_t v101;
  uint32x4_t v102;
  uint32x4_t v103;
  uint32x4_t v104;
  uint32x4_t v105;
  uint32x4_t v106;
  uint32x4_t v107;
  uint32x4_t v108;
  uint32x4_t v109;
  uint32x4_t v110;
  uint32x4_t v111;
  uint32x4_t v112;
  uint32x4_t v113;
  uint32x4_t v114;
  uint32x4_t v115;
  uint32x4_t v116;
  uint32x4_t v117;
  uint32x4_t v118;
  uint32x4_t v119;
  uint32x4_t v120;
  uint32x4_t v121;
  uint32x4_t v122;
  uint32x4_t v123;
  uint32x4_t v124;
  uint32x4_t v125;
  uint32x4_t v126;
  uint32x4_t v127;
  uint32x4_t v128;
  uint32x4_t v129;
  uint32x4_t v130;
  uint32x4_t v131;
  uint32x4_t v132;
  uint32x4_t v133;
  uint32x4_t v134;
  uint32x4_t v135;
  uint32x4_t v136;
  uint32x4_t v137;
  uint32x4_t v138;
  uint32x4_t v139;
  uint32x4_t v140;
  uint32x4_t v141;
  uint32x4_t v142;
  uint32x4_t v143;
  uint32x4_t v144;
  uint32x4_t v145;
  uint32x4_t v146;
  uint32x4_t v147;
  uint32x4_t v148;
  uint32x4_t v149;
  uint32x4_t v150;
  uint32x4_t v151;
  uint32x4_t v152;
  uint32x4_t v153;
  uint32x4_t v154;
  uint32x4_t v155;
  uint32x4_t v156;
  uint32x4_t v157;
  uint32x4_t v158;
  uint32x4_t v159;
  uint32x4_t v160;
  uint32x4_t v161;
  uint32x4_t v162;
  uint32x4_t v163;
  uint32x4_t v164;
  uint32x4_t v165;
  uint32x4_t v166;
  uint32x4_t v167;
  uint32x4_t v168;
  uint32x4_t v169;
  uint32x4_t v170;
  uint32x4_t v171;
  uint32x4_t v172;
  uint32x4_t v173;
  uint32x4_t v174;
  uint32x4_t v175;
  uint32x4_t v176;
  uint32x4_t v177;
  uint32x4_t v178;
  uint32x4_t v179;
  uint32x4_t v180;
  uint32x4_t v181;
  uint32x4_t v182;
  uint32x4_t v183;
  uint32x4_t v184;
  uint32x4_t v185;
  uint32x4_t v186;
  uint32x4_t v187;
  uint32x4_t v188;
  uint32x4_t v189;
  uint32x4_t v190;
  uint32x4_t v191;
  uint32x4_t v192;
  uint32x4_t v193;
  uint32x4_t v194;
  uint32x4_t v195;
  uint32x4_t v196;
  uint32x4_t v197;
  uint32x4_t v198;
  uint32x4_t v199;
  uint64_t v200;
  int v201;
  unsigned int v202;
  unsigned __int8 *v203;
  int v204;
  unsigned int v205;
  int v206;
  unsigned int v207;
  uint16x8_t v208;
  uint32x4_t v209;
  uint32x4_t v210;
  uint32x4_t v211;
  uint32x4_t v212;
  int8x16_t v213;
  uint32x4_t v214;
  uint32x4_t v215;
  uint32x4_t v216;
  uint32x4_t v217;
  uint32x4_t v218;
  uint32x4_t v219;
  uint32x4_t v220;
  uint32x4_t v221;
  uint32x4_t v222;
  uint32x4_t v223;
  uint32x4_t v224;
  uint32x4_t v225;
  uint32x4_t v226;
  uint32x4_t v227;
  uint32x4_t v228;
  uint32x4_t v229;
  uint32x4_t v230;
  uint32x4_t v231;
  uint32x4_t v232;
  uint32x4_t v233;
  uint32x4_t v234;
  uint32x4_t v235;
  uint32x4_t v236;
  uint32x4_t v237;
  uint32x4_t v238;
  uint32x4_t v239;
  uint32x4_t v240;
  uint32x4_t v241;
  uint32x4_t v242;
  uint32x4_t v243;
  uint32x4_t v244;
  uint32x4_t v245;
  uint32x4_t v246;
  uint32x4_t v247;
  uint32x4_t v248;
  uint32x4_t v249;
  uint32x4_t v250;
  uint32x4_t v251;
  uint32x4_t v252;
  uint32x4_t v253;
  uint32x4_t v254;
  uint32x4_t v255;
  uint32x4_t v256;
  uint32x4_t v257;
  uint32x4_t v258;
  uint32x4_t v259;
  uint32x4_t v260;
  uint32x4_t v261;
  uint32x4_t v262;
  uint32x4_t v263;
  uint32x4_t v264;
  uint32x4_t v265;
  uint32x4_t v266;
  uint32x4_t v267;
  uint32x4_t v268;
  uint32x4_t v269;
  uint32x4_t v270;
  uint32x4_t v271;
  uint32x4_t v272;
  uint32x4_t v273;
  uint64_t v274;
  __int128 *v275;
  int16x8_t v276;
  int32x4_t v277;
  __int16 *v278;
  uint16x8_t v279;
  int32x4_t v280;
  int32x4_t v281;
  int8x16_t v282;
  int16x8_t v283;
  int32x4_t v284;
  uint32x4_t v285;
  uint32x4_t v286;
  uint32x4_t v287;
  int8x16_t v288;
  int16x8_t v289;
  int8x16_t v290;
  int16x8_t v291;
  uint64_t v292;
  __int128 *v293;
  uint16x8_t v294;
  int8x16_t *v295;
  int8x16_t v296;
  int16x8_t v297;
  int8x16_t v298;
  int16x8_t v299;
  int8x16_t v300;
  __int32 v301;
  int16x8_t v302;
  int8x16_t v303;
  uint16x4_t v304;
  uint64_t v305;
  int16x8_t v306;
  uint16x4_t v307;
  int16x8_t v308;
  int16x8_t v309;
  int16x8_t v310;
  unsigned int v311;
  int16x8_t v312;
  int8x16_t v313;
  int16x8_t v314;
  int8x8_t v315;
  uint16x4_t v316;
  int16x8_t v317;
  int32x4_t v318;
  int32x4_t v319;
  int32x4_t v320;
  uint32x4_t v321;
  uint32x4_t v322;
  uint32x4_t v323;
  uint16x4_t v324;
  int8x16_t v325;
  int8x16_t v326;
  int16x8_t v327;
  int16x8_t v328;
  int8x16_t v329;
  int16x8_t v330;
  uint32x4_t v331;
  uint32x4_t v332;
  int32x4_t v333;
  int8x16_t v334;
  int16x8_t v335;
  int8x16_t v336;
  int32x4_t v337;
  int8x16_t v338;
  uint32x4_t v339;
  uint32x4_t v340;
  int8x16_t v341;
  int16x8_t v342;
  int8x16_t v343;
  int8x16_t v344;
  int8x16_t v345;
  int16x8_t v346;
  int8x16_t v347;
  int16x8_t v348;
  int8x16_t v349;
  int8x16_t v350;
  int16x8_t v351;
  uint32x4_t v352;
  uint32x4_t v353;
  int8x16_t v354;
  int16x8_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  int16x8_t v361;
  uint64_t v362;
  int16x8_t v363;
  int32x4_t v364;
  int16x8_t *v365;
  int16x8_t v366;
  int8x16_t v367;
  int16x8_t v368;
  int32x4_t v369;
  int32x4_t v370;
  int32x4_t v371;
  int32x4_t v372;
  int32x4_t v373;
  uint32x4_t v374;
  uint32x4_t v375;
  uint32x4_t v376;
  int8x16_t v377;
  int16x8_t v378;
  uint64_t v379;
  uint16x8_t v380;
  int8x16_t v381;
  int16x8_t v382;
  int16x8_t v383;
  int8x16_t v384;
  uint16x8_t v385;
  int32x4_t v386;
  uint32x4_t v387;
  uint32x4_t v388;
  uint32x4_t v389;
  int32x4_t v390;
  int8x16_t v391;
  int16x8_t v392;
  int8x16_t v393;
  int8x16_t v394;
  int16x8_t v395;
  uint32x4_t v396;
  uint32x4_t v397;
  int8x16_t v398;
  int16x8_t v399;
  uint16x8_t v400;
  int8x16_t v401;
  int16x8_t v402;
  int8x16_t v403;
  uint16x8_t v404;
  int32x4_t v405;
  uint32x4_t v406;
  uint32x4_t v407;
  int8x16_t v408;
  int16x8_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int16x8_t v412;
  uint32x4_t v413;
  uint32x4_t v414;
  int8x16_t v415;
  int16x8_t v416;
  uint16x8_t v417;
  int8x16_t v418;
  int16x8_t v419;
  int8x16_t v420;
  int32x4_t v421;
  uint32x4_t v422;
  uint32x4_t v423;
  int8x16_t v424;
  int16x8_t v425;
  int8x16_t v426;
  int8x16_t v427;
  int16x8_t v428;
  uint32x4_t v429;
  uint32x4_t v430;
  int8x16_t v431;
  int16x8_t v432;
  uint16x8_t v433;
  int8x16_t v434;
  int16x8_t v435;
  int8x16_t v436;
  uint16x8_t v437;
  int32x4_t v438;
  uint32x4_t v439;
  uint32x4_t v440;
  int8x16_t v441;
  int16x8_t v442;
  int8x16_t v443;
  int8x16_t v444;
  int16x8_t v445;
  uint32x4_t v446;
  uint32x4_t v447;
  int8x16_t v448;
  int16x8_t v449;
  uint16x8_t v450;
  int8x16_t v451;
  int16x8_t v452;
  int8x16_t v453;
  uint16x8_t v454;
  int32x4_t v455;
  uint32x4_t v456;
  uint32x4_t v457;
  int8x16_t v458;
  int16x8_t v459;
  int8x16_t v460;
  int8x16_t v461;
  int16x8_t v462;
  uint32x4_t v463;
  uint32x4_t v464;
  int8x16_t v465;
  int16x8_t v466;
  uint16x8_t v467;
  int8x16_t v468;
  int16x8_t v469;
  uint16x8_t v470;
  int8x16_t v471;
  int32x4_t v472;
  uint32x4_t v473;
  uint32x4_t v474;
  int8x16_t v475;
  int16x8_t v476;
  int8x16_t v477;
  int8x16_t v478;
  int16x8_t v479;
  uint32x4_t v480;
  uint32x4_t v481;
  int8x16_t v482;
  int16x8_t v483;
  uint16x8_t v484;
  int8x16_t v485;
  int16x8_t v486;
  int8x16_t v487;
  uint16x8_t v488;
  int32x4_t v489;
  uint32x4_t v490;
  uint32x4_t v491;
  int8x16_t v492;
  int16x8_t v493;
  int8x16_t v494;
  int8x16_t v495;
  int16x8_t v496;
  uint32x4_t v497;
  uint32x4_t v498;
  int8x16_t v499;
  int16x8_t v500;
  uint16x8_t v501;
  int8x16_t v502;
  int16x8_t v503;
  int8x16_t v504;
  uint16x8_t v505;
  int32x4_t v506;
  uint32x4_t v507;
  uint32x4_t v508;
  int8x16_t v509;
  int16x8_t v510;
  int8x16_t v511;
  int8x16_t v512;
  int16x8_t v513;
  uint32x4_t v514;
  uint32x4_t v515;
  int8x16_t v516;
  int16x8_t v517;
  uint16x8_t v518;
  int8x16_t v519;
  int16x8_t v520;
  int8x16_t v521;
  uint16x8_t v522;
  int8x16_t v523;
  int32x4_t v524;
  uint32x4_t v525;
  uint32x4_t v526;
  int8x16_t v527;
  int16x8_t v528;
  int8x16_t v529;
  int8x16_t v530;
  int16x8_t v531;
  uint32x4_t v532;
  uint32x4_t v533;
  int8x16_t v534;
  int16x8_t v535;
  uint16x8_t v536;
  int8x16_t v537;
  int16x8_t v538;
  int8x16_t v539;
  uint32x4_t v540;
  uint32x4_t v541;
  int8x16_t v542;
  int16x8_t v543;
  int8x16_t v544;
  int8x16_t v545;
  int16x8_t v546;
  int32x4_t v547;
  uint32x4_t v548;
  uint32x4_t v549;
  int8x16_t v550;
  int16x8_t v551;
  uint16x8_t v552;
  int8x16_t v553;
  int16x8_t v554;
  int8x16_t v555;
  uint16x8_t v556;
  int32x4_t v557;
  uint32x4_t v558;
  uint32x4_t v559;
  int8x16_t v560;
  int16x8_t v561;
  int8x16_t v562;
  int8x16_t v563;
  int16x8_t v564;
  uint32x4_t v565;
  uint32x4_t v566;
  int8x16_t v567;
  int16x8_t v568;
  uint16x8_t v569;
  int8x16_t v570;
  int16x8_t v571;
  int8x16_t v572;
  uint32x4_t v573;
  uint32x4_t v574;
  int8x16_t v575;
  int16x8_t v576;
  int8x16_t v577;
  int8x16_t v578;
  int16x8_t v579;
  int32x4_t v580;
  uint32x4_t v581;
  uint32x4_t v582;
  int8x16_t v583;
  int16x8_t v584;
  uint16x8_t v585;
  int8x16_t v586;
  int16x8_t v587;
  int8x16_t v588;
  uint16x8_t v589;
  int32x4_t v590;
  uint32x4_t v591;
  uint32x4_t v592;
  int8x16_t v593;
  int16x8_t v594;
  int8x16_t v595;
  int8x16_t v596;
  int16x8_t v597;
  uint32x4_t v598;
  uint32x4_t v599;
  int8x16_t v600;
  int16x8_t v601;
  uint16x8_t v602;
  int8x16_t v603;
  int16x8_t v604;
  int8x16_t v605;
  uint32x4_t v606;
  uint32x4_t v607;
  int8x16_t v608;
  int16x8_t v609;
  int8x16_t v610;
  int8x16_t v611;
  int16x8_t v612;
  int32x4_t v613;
  uint32x4_t v614;
  uint32x4_t v615;
  int8x16_t v616;
  int16x8_t v617;
  uint16x8_t v618;
  int8x16_t v619;
  int16x8_t v620;
  int8x16_t v621;
  uint16x8_t v622;
  int8x16_t v623;
  int32x4_t v624;
  uint32x4_t v625;
  uint32x4_t v626;
  int8x16_t v627;
  int16x8_t v628;
  int8x16_t v629;
  int8x16_t v630;
  int16x8_t v631;
  uint32x4_t v632;
  uint32x4_t v633;
  int8x16_t v634;
  int16x8_t v635;
  uint16x8_t v636;
  int8x16_t v637;
  int16x8_t v638;
  int8x16_t v639;
  uint32x4_t v640;
  uint32x4_t v641;
  int8x16_t v642;
  int16x8_t v643;
  int8x16_t v644;
  int8x16_t v645;
  int16x8_t v646;
  int32x4_t v647;
  uint32x4_t v648;
  uint32x4_t v649;
  int8x16_t v650;
  int16x8_t v651;
  uint16x8_t v652;
  int8x16_t v653;
  int16x8_t v654;
  int8x16_t v655;
  int32x4_t v656;
  uint32x4_t v657;
  uint32x4_t v658;
  int8x16_t v659;
  int16x8_t v660;
  int8x16_t v661;
  int8x16_t v662;
  int16x8_t v663;
  uint32x4_t v664;
  uint32x4_t v665;
  int8x16_t v666;
  int16x8_t v667;
  uint16x8_t v668;
  int8x16_t v669;
  int16x8_t v670;
  int8x16_t v671;
  uint32x4_t v672;
  uint32x4_t v673;
  int8x16_t v674;
  int16x8_t v675;
  int8x16_t v676;
  int8x16_t v677;
  int16x8_t v678;
  uint32x4_t v679;
  uint32x4_t v680;
  int8x16_t v681;
  int16x8_t v682;
  uint16x8_t v683;
  int8x16_t v684;
  int16x8_t v685;
  int8x16_t v686;
  uint32x4_t v687;
  uint32x4_t v688;
  int8x16_t v689;
  int16x8_t v690;
  int8x16_t v691;
  int8x16_t v692;
  int16x8_t v693;
  uint32x4_t v694;
  uint32x4_t v695;
  int8x16_t v696;
  int16x8_t v697;
  uint16x8_t v698;
  int8x16_t v699;
  int16x8_t v700;
  int8x16_t v701;
  uint32x4_t v702;
  uint32x4_t v703;
  int8x16_t v704;
  int16x8_t v705;
  int8x16_t v706;
  int8x16_t v707;
  int16x8_t v708;
  int32x4_t v709;
  uint32x4_t v710;
  uint32x4_t v711;
  int8x16_t v712;
  int16x8_t v713;
  uint16x8_t v714;
  int8x16_t v715;
  int16x8_t v716;
  int8x16_t v717;
  uint16x8_t v718;
  int32x4_t v719;
  uint32x4_t v720;
  uint32x4_t v721;
  int8x16_t v722;
  int16x8_t v723;
  int8x16_t v724;
  int8x16_t v725;
  int16x8_t v726;
  uint32x4_t v727;
  uint32x4_t v728;
  int8x16_t v729;
  int16x8_t v730;
  uint16x8_t v731;
  int8x16_t v732;
  int16x8_t v733;
  int8x16_t v734;
  uint32x4_t v735;
  uint32x4_t v736;
  int8x16_t v737;
  int16x8_t v738;
  int8x16_t v739;
  int8x16_t v740;
  int16x8_t v741;
  uint32x4_t v742;
  uint32x4_t v743;
  int8x16_t v744;
  int16x8_t v745;
  uint16x8_t v746;
  int8x16_t v747;
  int16x8_t v748;
  int8x16_t v749;
  uint32x4_t v750;
  uint32x4_t v751;
  int8x16_t v752;
  int16x8_t v753;
  int8x16_t v754;
  int8x16_t v755;
  int16x8_t v756;
  uint32x4_t v757;
  uint32x4_t v758;
  int8x16_t v759;
  int16x8_t v760;
  uint16x8_t v761;
  int8x16_t v762;
  int16x8_t v763;
  int8x16_t v764;
  uint32x4_t v765;
  uint32x4_t v766;
  int8x16_t v767;
  int16x8_t v768;
  int8x16_t v769;
  int8x16_t v770;
  int16x8_t v771;
  int32x4_t v772;
  uint32x4_t v773;
  uint32x4_t v774;
  int8x16_t v775;
  int16x8_t v776;
  int8x16_t *v777;
  int16x8_t v778;
  int16x8_t v779;
  int8x16_t v780;
  int16x8_t v781;
  uint16x8_t v782;
  int32x4_t v783;
  int32x4_t v784;
  int32x4_t v785;
  uint32x4_t v786;
  uint32x4_t v787;
  int8x16_t v788;
  int16x8_t v789;
  uint64_t v790;
  uint16x8_t v791;
  uint32x4_t v792;
  int32x4_t v793;
  int16x8_t v794;
  uint16x8_t v795;
  uint32x4_t v796;
  uint32x4_t v797;
  int8x16_t v798;
  int16x8_t v799;
  uint64_t v800;
  int16x8_t v801;
  int8x16_t *v802;
  int16x8_t v803;
  int16x8_t v804;
  uint64_t v805;
  uint16x8_t v806;
  uint32x4_t v807;
  int32x4_t v808;
  uint32x4_t v809;
  int8x16_t v810;
  int8x16_t v811;
  uint16x8_t v812;
  int32x4_t v813;
  int32x4_t v814;
  int8x16_t v815;
  int8x16_t v816;
  uint32x4_t v817;
  uint32x4_t v818;
  uint64_t v819;
  int8x16_t v820;
  uint16x8_t *v821;
  int8x16_t v822;
  int8x16_t v823;
  int8x16_t v824;
  int8x16_t v825;
  int8x16_t v826;
  int8x16_t v827;
  int8x16_t v828;
  int8x16_t v829;
  int8x16_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int8x16_t v834;
  int8x16_t v835;
  uint8x16_t v836;
  int8x16_t v837;
  uint64_t v838;
  int8x16_t v839;
  int8x16_t v840;
  unsigned int v841;
  uint16x8_t v842;
  int8x16_t v843;
  int8x16_t v844;
  uint16x8_t v845;
  uint8x16_t v846;
  int8x16_t v847;
  uint16x8_t v848;
  uint16x8_t v849;
  int8x16_t v850;
  int8x16_t v851;
  uint8x16_t v852;
  uint16x8_t v853;
  int8x16_t v854;
  uint16x8_t v855;
  int8x16_t v856;
  int8x16_t v857;
  int8x16_t v858;
  int8x16_t v859;
  int8x16_t v860;
  uint16x8_t v861;
  uint16x8_t v862;
  int32x4_t v864;
  int16x8_t v865;
  int32x4_t v866;
  int8x16_t v867;
  uint16x8_t v868[15];
  uint16x8_t v869;
  uint16x8_t v870;
  uint16x8_t v871;
  uint16x8_t v872;
  uint16x8_t v873;
  uint16x8_t v874;
  uint16x8_t v875;
  uint16x8_t v876;
  uint16x8_t v877;
  uint16x8_t v878;
  uint16x8_t v879;
  uint16x8_t v880;
  uint16x8_t v881;
  uint16x8_t v882;
  uint16x8_t v883;
  uint16x8_t v884;
  uint16x8_t v885;
  _OWORD v886[2];
  char v887[32];
  char v888[32];
  uint8x16_t v889;
  uint8x16_t v890;
  int16x8_t __dst;
  int8x16_t v892;
  int16x8_t v893;
  int8x16_t v894;
  int16x8_t v895;
  int8x16_t v896;
  int16x8_t v897;
  int8x16_t v898;
  int16x8_t v899;
  int8x16_t v900;
  int16x8_t v901;
  int8x16_t v902;
  int16x8_t v903;
  int8x16_t v904;
  int16x8_t v905;
  int8x16_t v906;
  int16x8_t v907;
  int16x8_t v908;
  int16x8_t v909;
  int8x16_t v910;
  int16x8_t v911;
  int8x16_t v912;
  int16x8_t v913;
  int8x16_t v914;
  int16x8_t v915;
  int8x16_t v916;
  int16x8_t v917;
  int8x16_t v918;
  int16x8_t v919;
  int8x16_t v920;
  int16x8_t v921;
  int8x16_t v922;
  int16x8_t v923[15];
  uint16x8_t v924;
  uint16x8_t v925;
  uint16x8_t v926;
  uint16x8_t v927;
  uint16x8_t v928;
  uint16x8_t v929;
  uint16x8_t v930;
  uint16x8_t v931;
  uint16x8_t v932;
  uint16x8_t v933;
  uint16x8_t v934;
  uint16x8_t v935;
  uint16x8_t v936;
  uint16x8_t v937;
  uint16x8_t v938;
  uint16x8_t v939;
  uint16x8_t v940;
  uint16x8_t v941;
  uint16x8_t v942;
  uint16x8_t v943;
  uint16x8_t v944;
  uint16x8_t v945;
  uint16x8_t v946;
  uint16x8_t v947;
  uint16x8_t v948;
  uint16x8_t v949;
  uint16x8_t v950;
  uint16x8_t v951;
  uint16x8_t v952;
  uint16x8_t v953;
  uint16x8_t v954;
  uint16x8_t v955;
  uint16x8_t v956;
  uint16x8_t v957;
  uint16x8_t v958;
  uint16x8_t v959;
  uint16x8_t v960;
  uint16x8_t v961;
  uint16x8_t v962;
  uint16x8_t v963;
  uint16x8_t v964;
  uint16x8_t v965;
  uint16x8_t v966;
  uint16x8_t v967;
  uint16x8_t v968;
  uint16x8_t v969;
  uint16x8_t v970;
  uint16x8_t v971;
  uint16x8_t v972;
  uint16x8_t v973;
  uint16x8_t v974;
  uint16x8_t v975;
  uint16x8_t v976;
  uint16x8_t v977;
  uint16x8_t v978;
  uint16x8_t v979;
  uint16x8_t v980;
  uint16x8_t v981;
  uint16x8_t v982;
  uint16x8_t v983;
  uint16x8_t v984;
  uint16x8_t v985;
  uint16x8_t v986;
  uint16x8_t v987;
  uint16x8_t v988;
  uint16x8_t v989;
  uint16x8_t v990;
  uint16x8_t v991;
  uint16x8_t v992;
  uint16x8_t v993;
  uint16x8_t v994;
  uint16x8_t v995;
  uint16x8_t v996;
  uint16x8_t v997;
  uint16x8_t v998;
  uint16x8_t v999;
  uint16x8_t v1000;
  uint16x8_t v1001;
  uint16x8_t v1002;
  uint16x8_t v1003;
  uint16x8_t v1004;
  uint64_t v1005;
  int8x16x2_t v1006;
  int8x16x2_t v1007;
  int8x16x2_t v1008;
  int8x16x2_t v1009;
  int8x16x2_t v1010;
  int8x16x2_t v1011;
  int8x16x2_t v1012;
  int8x16x2_t v1013;
  int16x8x4_t v1014;
  int16x8x4_t v1015;

  v1005 = *MEMORY[0x24BDAC8D0];
  v940 = 0u;
  v939 = 0u;
  v938 = 0u;
  v937 = 0u;
  v936 = 0u;
  v935 = 0u;
  v934 = 0u;
  v933 = 0u;
  v932 = 0u;
  v931 = 0u;
  v930 = 0u;
  v929 = 0u;
  v928 = 0u;
  v927 = 0u;
  v926 = 0u;
  v925 = 0u;
  v924 = 0u;
  memset(v923, 0, sizeof(v923));
  vector_decode(v923, a2, 10);
  v6 = (uint16x8_t)vdupq_n_s16(0xD01u);
  v7 = vmull_u16(*(uint16x4_t *)v923[0].i8, *(uint16x4_t *)v6.i8);
  v8 = vmull_high_u16((uint16x8_t)v923[0], v6);
  v9 = vmull_u16(*(uint16x4_t *)v923[1].i8, *(uint16x4_t *)v6.i8);
  v10 = vmull_high_u16((uint16x8_t)v923[1], v6);
  v11.i64[0] = 0x100000001;
  v11.i64[1] = 0x100000001;
  v923[0] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v7, 9uLL), v11), v7, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v8, 9uLL), v11), v8, 0xAuLL));
  v923[1] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v9, 9uLL), v11), v9, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v10, 9uLL), v11), v10, 0xAuLL));
  v12 = vmull_u16(*(uint16x4_t *)v923[2].i8, *(uint16x4_t *)v6.i8);
  v13 = vmull_high_u16((uint16x8_t)v923[2], v6);
  v14 = vmull_u16(*(uint16x4_t *)v923[3].i8, *(uint16x4_t *)v6.i8);
  v15 = vmull_high_u16((uint16x8_t)v923[3], v6);
  v923[2] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v12, 9uLL), v11), v12, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v13, 9uLL), v11), v13, 0xAuLL));
  v923[3] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v14, 9uLL), v11), v14, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v15, 9uLL), v11), v15, 0xAuLL));
  v16 = vmull_u16(*(uint16x4_t *)v923[4].i8, *(uint16x4_t *)v6.i8);
  v17 = vmull_high_u16((uint16x8_t)v923[4], v6);
  v18 = vmull_u16(*(uint16x4_t *)v923[5].i8, *(uint16x4_t *)v6.i8);
  v19 = vmull_high_u16((uint16x8_t)v923[5], v6);
  v923[4] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v16, 9uLL), v11), v16, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v17, 9uLL), v11), v17, 0xAuLL));
  v923[5] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v18, 9uLL), v11), v18, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v19, 9uLL), v11), v19, 0xAuLL));
  v20 = vmull_u16(*(uint16x4_t *)v923[6].i8, *(uint16x4_t *)v6.i8);
  v21 = vmull_high_u16((uint16x8_t)v923[6], v6);
  v22 = vmull_u16(*(uint16x4_t *)v923[7].i8, *(uint16x4_t *)v6.i8);
  v23 = vmull_high_u16((uint16x8_t)v923[7], v6);
  v923[6] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v20, 9uLL), v11), v20, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v21, 9uLL), v11), v21, 0xAuLL));
  v923[7] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v22, 9uLL), v11), v22, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v23, 9uLL), v11), v23, 0xAuLL));
  v24 = vmull_u16(*(uint16x4_t *)v923[8].i8, *(uint16x4_t *)v6.i8);
  v25 = vmull_high_u16((uint16x8_t)v923[8], v6);
  v26 = vmull_u16(*(uint16x4_t *)v923[9].i8, *(uint16x4_t *)v6.i8);
  v27 = vmull_high_u16((uint16x8_t)v923[9], v6);
  v923[8] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v24, 9uLL), v11), v24, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v25, 9uLL), v11), v25, 0xAuLL));
  v923[9] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v26, 9uLL), v11), v26, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v27, 9uLL), v11), v27, 0xAuLL));
  v28 = vmull_u16(*(uint16x4_t *)v923[10].i8, *(uint16x4_t *)v6.i8);
  v29 = vmull_high_u16((uint16x8_t)v923[10], v6);
  v30 = vmull_u16(*(uint16x4_t *)v923[11].i8, *(uint16x4_t *)v6.i8);
  v31 = vmull_high_u16((uint16x8_t)v923[11], v6);
  v923[10] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v28, 9uLL), v11), v28, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v29, 9uLL), v11), v29, 0xAuLL));
  v923[11] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v30, 9uLL), v11), v30, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v31, 9uLL), v11), v31, 0xAuLL));
  v32 = vmull_u16(*(uint16x4_t *)v923[12].i8, *(uint16x4_t *)v6.i8);
  v33 = vmull_high_u16((uint16x8_t)v923[12], v6);
  v34 = vmull_u16(*(uint16x4_t *)v923[13].i8, *(uint16x4_t *)v6.i8);
  v35 = vmull_high_u16((uint16x8_t)v923[13], v6);
  v923[12] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v32, 9uLL), v11), v32, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v33, 9uLL), v11), v33, 0xAuLL));
  v923[13] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v34, 9uLL), v11), v34, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v35, 9uLL), v11), v35, 0xAuLL));
  v36 = vmull_u16(*(uint16x4_t *)v923[14].i8, *(uint16x4_t *)v6.i8);
  v37 = vmull_high_u16((uint16x8_t)v923[14], v6);
  v38 = vmull_u16(*(uint16x4_t *)v924.i8, *(uint16x4_t *)v6.i8);
  v39 = vmull_high_u16(v924, v6);
  v923[14] = vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v36, 9uLL), v11), v36, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v37, 9uLL), v11), v37, 0xAuLL));
  v924 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v38, 9uLL), v11), v38, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v39, 9uLL), v11), v39, 0xAuLL));
  v40 = vmull_u16(*(uint16x4_t *)v925.i8, *(uint16x4_t *)v6.i8);
  v41 = vmull_high_u16(v925, v6);
  v42 = vmull_u16(*(uint16x4_t *)v926.i8, *(uint16x4_t *)v6.i8);
  v43 = vmull_high_u16(v926, v6);
  v925 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v40, 9uLL), v11), v40, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v41, 9uLL), v11), v41, 0xAuLL));
  v926 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v42, 9uLL), v11), v42, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v43, 9uLL), v11), v43, 0xAuLL));
  v44 = vmull_u16(*(uint16x4_t *)v927.i8, *(uint16x4_t *)v6.i8);
  v45 = vmull_high_u16(v927, v6);
  v46 = vmull_u16(*(uint16x4_t *)v928.i8, *(uint16x4_t *)v6.i8);
  v47 = vmull_high_u16(v928, v6);
  v927 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v44, 9uLL), v11), v44, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v45, 9uLL), v11), v45, 0xAuLL));
  v928 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v46, 9uLL), v11), v46, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v47, 9uLL), v11), v47, 0xAuLL));
  v48 = vmull_u16(*(uint16x4_t *)v929.i8, *(uint16x4_t *)v6.i8);
  v49 = vmull_high_u16(v929, v6);
  v50 = vmull_u16(*(uint16x4_t *)v930.i8, *(uint16x4_t *)v6.i8);
  v51 = vmull_high_u16(v930, v6);
  v929 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v48, 9uLL), v11), v48, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v49, 9uLL), v11), v49, 0xAuLL));
  v930 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v50, 9uLL), v11), v50, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v51, 9uLL), v11), v51, 0xAuLL));
  v52 = vmull_u16(*(uint16x4_t *)v931.i8, *(uint16x4_t *)v6.i8);
  v53 = vmull_high_u16(v931, v6);
  v54 = vmull_u16(*(uint16x4_t *)v932.i8, *(uint16x4_t *)v6.i8);
  v55 = vmull_high_u16(v932, v6);
  v931 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v52, 9uLL), v11), v52, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v53, 9uLL), v11), v53, 0xAuLL));
  v932 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v54, 9uLL), v11), v54, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v55, 9uLL), v11), v55, 0xAuLL));
  v56 = vmull_u16(*(uint16x4_t *)v933.i8, *(uint16x4_t *)v6.i8);
  v57 = vmull_high_u16(v933, v6);
  v58 = vmull_u16(*(uint16x4_t *)v934.i8, *(uint16x4_t *)v6.i8);
  v59 = vmull_high_u16(v934, v6);
  v933 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v56, 9uLL), v11), v56, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v57, 9uLL), v11), v57, 0xAuLL));
  v934 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v58, 9uLL), v11), v58, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v59, 9uLL), v11), v59, 0xAuLL));
  v60 = vmull_u16(*(uint16x4_t *)v935.i8, *(uint16x4_t *)v6.i8);
  v61 = vmull_high_u16(v935, v6);
  v62 = vmull_u16(*(uint16x4_t *)v936.i8, *(uint16x4_t *)v6.i8);
  v63 = vmull_high_u16(v936, v6);
  v935 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v60, 9uLL), v11), v60, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v61, 9uLL), v11), v61, 0xAuLL));
  v936 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v62, 9uLL), v11), v62, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v63, 9uLL), v11), v63, 0xAuLL));
  v64 = vmull_u16(*(uint16x4_t *)v937.i8, *(uint16x4_t *)v6.i8);
  v65 = vmull_high_u16(v937, v6);
  v66 = vmull_u16(*(uint16x4_t *)v938.i8, *(uint16x4_t *)v6.i8);
  v67 = vmull_high_u16(v938, v6);
  v937 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v64, 9uLL), v11), v64, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v65, 9uLL), v11), v65, 0xAuLL));
  v938 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v66, 9uLL), v11), v66, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v67, 9uLL), v11), v67, 0xAuLL));
  v68 = vmull_u16(*(uint16x4_t *)v939.i8, *(uint16x4_t *)v6.i8);
  v69 = vmull_high_u16(v939, v6);
  v70 = vmull_u16(*(uint16x4_t *)v940.i8, *(uint16x4_t *)v6.i8);
  v71 = vmull_high_u16(v940, v6);
  v939 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v68, 9uLL), v11), v68, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v69, 9uLL), v11), v69, 0xAuLL));
  v940 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v70, 9uLL), v11), v70, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v71, 9uLL), v11), v71, 0xAuLL));
  v72 = vmull_u16(*(uint16x4_t *)v941.i8, *(uint16x4_t *)v6.i8);
  v73 = vmull_high_u16(v941, v6);
  v74 = vmull_u16(*(uint16x4_t *)v942.i8, *(uint16x4_t *)v6.i8);
  v75 = vmull_high_u16(v942, v6);
  v941 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v72, 9uLL), v11), v72, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v73, 9uLL), v11), v73, 0xAuLL));
  v942 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v74, 9uLL), v11), v74, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v75, 9uLL), v11), v75, 0xAuLL));
  v76 = vmull_u16(*(uint16x4_t *)v943.i8, *(uint16x4_t *)v6.i8);
  v77 = vmull_high_u16(v943, v6);
  v78 = vmull_u16(*(uint16x4_t *)v944.i8, *(uint16x4_t *)v6.i8);
  v79 = vmull_high_u16(v944, v6);
  v943 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v76, 9uLL), v11), v76, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v77, 9uLL), v11), v77, 0xAuLL));
  v944 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v78, 9uLL), v11), v78, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v79, 9uLL), v11), v79, 0xAuLL));
  v80 = vmull_u16(*(uint16x4_t *)v945.i8, *(uint16x4_t *)v6.i8);
  v81 = vmull_high_u16(v945, v6);
  v82 = vmull_u16(*(uint16x4_t *)v946.i8, *(uint16x4_t *)v6.i8);
  v83 = vmull_high_u16(v946, v6);
  v945 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v80, 9uLL), v11), v80, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v81, 9uLL), v11), v81, 0xAuLL));
  v946 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v82, 9uLL), v11), v82, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v83, 9uLL), v11), v83, 0xAuLL));
  v84 = vmull_u16(*(uint16x4_t *)v947.i8, *(uint16x4_t *)v6.i8);
  v85 = vmull_high_u16(v947, v6);
  v86 = vmull_u16(*(uint16x4_t *)v948.i8, *(uint16x4_t *)v6.i8);
  v87 = vmull_high_u16(v948, v6);
  v947 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v84, 9uLL), v11), v84, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v85, 9uLL), v11), v85, 0xAuLL));
  v948 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v86, 9uLL), v11), v86, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v87, 9uLL), v11), v87, 0xAuLL));
  v88 = vmull_u16(*(uint16x4_t *)v949.i8, *(uint16x4_t *)v6.i8);
  v89 = vmull_high_u16(v949, v6);
  v90 = vmull_u16(*(uint16x4_t *)v950.i8, *(uint16x4_t *)v6.i8);
  v91 = vmull_high_u16(v950, v6);
  v949 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v88, 9uLL), v11), v88, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v89, 9uLL), v11), v89, 0xAuLL));
  v950 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v90, 9uLL), v11), v90, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v91, 9uLL), v11), v91, 0xAuLL));
  v92 = vmull_u16(*(uint16x4_t *)v951.i8, *(uint16x4_t *)v6.i8);
  v93 = vmull_high_u16(v951, v6);
  v94 = vmull_u16(*(uint16x4_t *)v952.i8, *(uint16x4_t *)v6.i8);
  v95 = vmull_high_u16(v952, v6);
  v951 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v92, 9uLL), v11), v92, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v93, 9uLL), v11), v93, 0xAuLL));
  v952 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v94, 9uLL), v11), v94, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v95, 9uLL), v11), v95, 0xAuLL));
  v96 = vmull_u16(*(uint16x4_t *)v953.i8, *(uint16x4_t *)v6.i8);
  v97 = vmull_high_u16(v953, v6);
  v98 = vmull_u16(*(uint16x4_t *)v954.i8, *(uint16x4_t *)v6.i8);
  v99 = vmull_high_u16(v954, v6);
  v953 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v96, 9uLL), v11), v96, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v97, 9uLL), v11), v97, 0xAuLL));
  v954 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v98, 9uLL), v11), v98, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v99, 9uLL), v11), v99, 0xAuLL));
  v100 = vmull_u16(*(uint16x4_t *)v955.i8, *(uint16x4_t *)v6.i8);
  v101 = vmull_high_u16(v955, v6);
  v102 = vmull_u16(*(uint16x4_t *)v956.i8, *(uint16x4_t *)v6.i8);
  v103 = vmull_high_u16(v956, v6);
  v955 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v100, 9uLL), v11), v100, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v101, 9uLL), v11), v101, 0xAuLL));
  v956 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v102, 9uLL), v11), v102, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v103, 9uLL), v11), v103, 0xAuLL));
  v104 = vmull_u16(*(uint16x4_t *)v957.i8, *(uint16x4_t *)v6.i8);
  v105 = vmull_high_u16(v957, v6);
  v106 = vmull_u16(*(uint16x4_t *)v958.i8, *(uint16x4_t *)v6.i8);
  v107 = vmull_high_u16(v958, v6);
  v957 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v104, 9uLL), v11), v104, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v105, 9uLL), v11), v105, 0xAuLL));
  v958 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v106, 9uLL), v11), v106, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v107, 9uLL), v11), v107, 0xAuLL));
  v108 = vmull_u16(*(uint16x4_t *)v959.i8, *(uint16x4_t *)v6.i8);
  v109 = vmull_high_u16(v959, v6);
  v110 = vmull_u16(*(uint16x4_t *)v960.i8, *(uint16x4_t *)v6.i8);
  v111 = vmull_high_u16(v960, v6);
  v959 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v108, 9uLL), v11), v108, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v109, 9uLL), v11), v109, 0xAuLL));
  v960 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v110, 9uLL), v11), v110, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v111, 9uLL), v11), v111, 0xAuLL));
  v112 = vmull_u16(*(uint16x4_t *)v961.i8, *(uint16x4_t *)v6.i8);
  v113 = vmull_high_u16(v961, v6);
  v114 = vmull_u16(*(uint16x4_t *)v962.i8, *(uint16x4_t *)v6.i8);
  v115 = vmull_high_u16(v962, v6);
  v961 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v112, 9uLL), v11), v112, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v113, 9uLL), v11), v113, 0xAuLL));
  v962 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v114, 9uLL), v11), v114, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v115, 9uLL), v11), v115, 0xAuLL));
  v116 = vmull_u16(*(uint16x4_t *)v963.i8, *(uint16x4_t *)v6.i8);
  v117 = vmull_high_u16(v963, v6);
  v118 = vmull_u16(*(uint16x4_t *)v964.i8, *(uint16x4_t *)v6.i8);
  v119 = vmull_high_u16(v964, v6);
  v963 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v116, 9uLL), v11), v116, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v117, 9uLL), v11), v117, 0xAuLL));
  v964 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v118, 9uLL), v11), v118, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v119, 9uLL), v11), v119, 0xAuLL));
  v120 = vmull_u16(*(uint16x4_t *)v965.i8, *(uint16x4_t *)v6.i8);
  v121 = vmull_high_u16(v965, v6);
  v122 = vmull_u16(*(uint16x4_t *)v966.i8, *(uint16x4_t *)v6.i8);
  v123 = vmull_high_u16(v966, v6);
  v965 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v120, 9uLL), v11), v120, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v121, 9uLL), v11), v121, 0xAuLL));
  v966 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v122, 9uLL), v11), v122, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v123, 9uLL), v11), v123, 0xAuLL));
  v124 = vmull_u16(*(uint16x4_t *)v967.i8, *(uint16x4_t *)v6.i8);
  v125 = vmull_high_u16(v967, v6);
  v126 = vmull_u16(*(uint16x4_t *)v968.i8, *(uint16x4_t *)v6.i8);
  v127 = vmull_high_u16(v968, v6);
  v967 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v124, 9uLL), v11), v124, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v125, 9uLL), v11), v125, 0xAuLL));
  v968 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v126, 9uLL), v11), v126, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v127, 9uLL), v11), v127, 0xAuLL));
  v128 = vmull_u16(*(uint16x4_t *)v969.i8, *(uint16x4_t *)v6.i8);
  v129 = vmull_high_u16(v969, v6);
  v130 = vmull_u16(*(uint16x4_t *)v970.i8, *(uint16x4_t *)v6.i8);
  v131 = vmull_high_u16(v970, v6);
  v969 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v128, 9uLL), v11), v128, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v129, 9uLL), v11), v129, 0xAuLL));
  v970 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v130, 9uLL), v11), v130, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v131, 9uLL), v11), v131, 0xAuLL));
  v132 = vmull_u16(*(uint16x4_t *)v971.i8, *(uint16x4_t *)v6.i8);
  v133 = vmull_high_u16(v971, v6);
  v134 = vmull_u16(*(uint16x4_t *)v972.i8, *(uint16x4_t *)v6.i8);
  v135 = vmull_high_u16(v972, v6);
  v971 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v132, 9uLL), v11), v132, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v133, 9uLL), v11), v133, 0xAuLL));
  v972 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v134, 9uLL), v11), v134, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v135, 9uLL), v11), v135, 0xAuLL));
  v136 = vmull_u16(*(uint16x4_t *)v973.i8, *(uint16x4_t *)v6.i8);
  v137 = vmull_high_u16(v973, v6);
  v138 = vmull_u16(*(uint16x4_t *)v974.i8, *(uint16x4_t *)v6.i8);
  v139 = vmull_high_u16(v974, v6);
  v973 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v136, 9uLL), v11), v136, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v137, 9uLL), v11), v137, 0xAuLL));
  v974 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v138, 9uLL), v11), v138, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v139, 9uLL), v11), v139, 0xAuLL));
  v140 = vmull_u16(*(uint16x4_t *)v975.i8, *(uint16x4_t *)v6.i8);
  v141 = vmull_high_u16(v975, v6);
  v142 = vmull_u16(*(uint16x4_t *)v976.i8, *(uint16x4_t *)v6.i8);
  v143 = vmull_high_u16(v976, v6);
  v975 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v140, 9uLL), v11), v140, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v141, 9uLL), v11), v141, 0xAuLL));
  v976 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v142, 9uLL), v11), v142, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v143, 9uLL), v11), v143, 0xAuLL));
  v144 = vmull_u16(*(uint16x4_t *)v977.i8, *(uint16x4_t *)v6.i8);
  v145 = vmull_high_u16(v977, v6);
  v146 = vmull_u16(*(uint16x4_t *)v978.i8, *(uint16x4_t *)v6.i8);
  v147 = vmull_high_u16(v978, v6);
  v977 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v144, 9uLL), v11), v144, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v145, 9uLL), v11), v145, 0xAuLL));
  v978 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v146, 9uLL), v11), v146, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v147, 9uLL), v11), v147, 0xAuLL));
  v148 = vmull_u16(*(uint16x4_t *)v979.i8, *(uint16x4_t *)v6.i8);
  v149 = vmull_high_u16(v979, v6);
  v150 = vmull_u16(*(uint16x4_t *)v980.i8, *(uint16x4_t *)v6.i8);
  v151 = vmull_high_u16(v980, v6);
  v979 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v148, 9uLL), v11), v148, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v149, 9uLL), v11), v149, 0xAuLL));
  v980 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v150, 9uLL), v11), v150, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v151, 9uLL), v11), v151, 0xAuLL));
  v152 = vmull_u16(*(uint16x4_t *)v981.i8, *(uint16x4_t *)v6.i8);
  v153 = vmull_high_u16(v981, v6);
  v154 = vmull_u16(*(uint16x4_t *)v982.i8, *(uint16x4_t *)v6.i8);
  v155 = vmull_high_u16(v982, v6);
  v981 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v152, 9uLL), v11), v152, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v153, 9uLL), v11), v153, 0xAuLL));
  v982 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v154, 9uLL), v11), v154, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v155, 9uLL), v11), v155, 0xAuLL));
  v156 = vmull_u16(*(uint16x4_t *)v983.i8, *(uint16x4_t *)v6.i8);
  v157 = vmull_high_u16(v983, v6);
  v158 = vmull_u16(*(uint16x4_t *)v984.i8, *(uint16x4_t *)v6.i8);
  v159 = vmull_high_u16(v984, v6);
  v983 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v156, 9uLL), v11), v156, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v157, 9uLL), v11), v157, 0xAuLL));
  v984 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v158, 9uLL), v11), v158, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v159, 9uLL), v11), v159, 0xAuLL));
  v160 = vmull_u16(*(uint16x4_t *)v985.i8, *(uint16x4_t *)v6.i8);
  v161 = vmull_high_u16(v985, v6);
  v162 = vmull_u16(*(uint16x4_t *)v986.i8, *(uint16x4_t *)v6.i8);
  v163 = vmull_high_u16(v986, v6);
  v985 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v160, 9uLL), v11), v160, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v161, 9uLL), v11), v161, 0xAuLL));
  v986 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v162, 9uLL), v11), v162, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v163, 9uLL), v11), v163, 0xAuLL));
  v164 = vmull_u16(*(uint16x4_t *)v987.i8, *(uint16x4_t *)v6.i8);
  v165 = vmull_high_u16(v987, v6);
  v166 = vmull_u16(*(uint16x4_t *)v988.i8, *(uint16x4_t *)v6.i8);
  v167 = vmull_high_u16(v988, v6);
  v987 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v164, 9uLL), v11), v164, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v165, 9uLL), v11), v165, 0xAuLL));
  v988 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v166, 9uLL), v11), v166, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v167, 9uLL), v11), v167, 0xAuLL));
  v168 = vmull_u16(*(uint16x4_t *)v989.i8, *(uint16x4_t *)v6.i8);
  v169 = vmull_high_u16(v989, v6);
  v170 = vmull_u16(*(uint16x4_t *)v990.i8, *(uint16x4_t *)v6.i8);
  v171 = vmull_high_u16(v990, v6);
  v989 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v168, 9uLL), v11), v168, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v169, 9uLL), v11), v169, 0xAuLL));
  v990 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v170, 9uLL), v11), v170, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v171, 9uLL), v11), v171, 0xAuLL));
  v172 = vmull_u16(*(uint16x4_t *)v991.i8, *(uint16x4_t *)v6.i8);
  v173 = vmull_high_u16(v991, v6);
  v174 = vmull_u16(*(uint16x4_t *)v992.i8, *(uint16x4_t *)v6.i8);
  v175 = vmull_high_u16(v992, v6);
  v991 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v172, 9uLL), v11), v172, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v173, 9uLL), v11), v173, 0xAuLL));
  v992 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v174, 9uLL), v11), v174, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v175, 9uLL), v11), v175, 0xAuLL));
  v176 = vmull_u16(*(uint16x4_t *)v993.i8, *(uint16x4_t *)v6.i8);
  v177 = vmull_high_u16(v993, v6);
  v178 = vmull_u16(*(uint16x4_t *)v994.i8, *(uint16x4_t *)v6.i8);
  v179 = vmull_high_u16(v994, v6);
  v993 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v176, 9uLL), v11), v176, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v177, 9uLL), v11), v177, 0xAuLL));
  v994 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v178, 9uLL), v11), v178, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v179, 9uLL), v11), v179, 0xAuLL));
  v180 = vmull_u16(*(uint16x4_t *)v995.i8, *(uint16x4_t *)v6.i8);
  v181 = vmull_high_u16(v995, v6);
  v182 = vmull_u16(*(uint16x4_t *)v996.i8, *(uint16x4_t *)v6.i8);
  v183 = vmull_high_u16(v996, v6);
  v995 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v180, 9uLL), v11), v180, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v181, 9uLL), v11), v181, 0xAuLL));
  v996 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v182, 9uLL), v11), v182, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v183, 9uLL), v11), v183, 0xAuLL));
  v184 = vmull_u16(*(uint16x4_t *)v997.i8, *(uint16x4_t *)v6.i8);
  v185 = vmull_high_u16(v997, v6);
  v186 = vmull_u16(*(uint16x4_t *)v998.i8, *(uint16x4_t *)v6.i8);
  v187 = vmull_high_u16(v998, v6);
  v997 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v184, 9uLL), v11), v184, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v185, 9uLL), v11), v185, 0xAuLL));
  v998 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v186, 9uLL), v11), v186, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v187, 9uLL), v11), v187, 0xAuLL));
  v188 = vmull_u16(*(uint16x4_t *)v999.i8, *(uint16x4_t *)v6.i8);
  v189 = vmull_high_u16(v999, v6);
  v190 = vmull_u16(*(uint16x4_t *)v1000.i8, *(uint16x4_t *)v6.i8);
  v191 = vmull_high_u16(v1000, v6);
  v999 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v188, 9uLL), v11), v188, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v189, 9uLL), v11), v189, 0xAuLL));
  v1000 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v190, 9uLL), v11), v190, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v191, 9uLL), v11), v191, 0xAuLL));
  v192 = vmull_u16(*(uint16x4_t *)v1001.i8, *(uint16x4_t *)v6.i8);
  v193 = vmull_high_u16(v1001, v6);
  v194 = vmull_u16(*(uint16x4_t *)v1002.i8, *(uint16x4_t *)v6.i8);
  v195 = vmull_high_u16(v1002, v6);
  v1001 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v192, 9uLL), v11), v192, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v193, 9uLL), v11), v193, 0xAuLL));
  v1002 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v194, 9uLL), v11), v194, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v195, 9uLL), v11), v195, 0xAuLL));
  v196 = vmull_u16(*(uint16x4_t *)v1003.i8, *(uint16x4_t *)v6.i8);
  v197 = vmull_high_u16(v1003, v6);
  v198 = vmull_u16(*(uint16x4_t *)v1004.i8, *(uint16x4_t *)v6.i8);
  v199 = vmull_high_u16(v1004, v6);
  v1003 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v196, 9uLL), v11), v196, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v197, 9uLL), v11), v197, 0xAuLL));
  v1004 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v198, 9uLL), v11), v198, 0xAuLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v199, 9uLL), v11), v199, 0xAuLL));
  vector_ntt(v923);
  v200 = 0;
  v201 = 0;
  v202 = 0;
  v884 = 0u;
  v885 = 0u;
  v882 = 0u;
  v883 = 0u;
  v880 = 0u;
  v881 = 0u;
  v878 = 0u;
  v879 = 0u;
  v876 = 0u;
  v877 = 0u;
  v874 = 0u;
  v875 = 0u;
  v872 = 0u;
  v873 = 0u;
  v870 = 0u;
  v871 = 0u;
  v869 = 0u;
  v203 = a2 + 960;
  memset(v868, 0, sizeof(v868));
  do
  {
    v204 = 0;
    v205 = 0;
    do
    {
      if (!v201)
      {
        v207 = *v203++;
        v202 = v207;
        v201 = 8;
      }
      v206 = 4 - v204;
      if (4 - v204 >= v201)
        v206 = v201;
      v205 |= (unsigned __int16)((kMasks[v206 - 1] & v202) << v204);
      v201 -= v206;
      v202 = (v202 >> v206);
      v204 += v206;
    }
    while (v204 < 4);
    if (v205 >= 0xD01)
      break;
    v868[0].i16[v200++] = v205;
  }
  while (v200 != 256);
  v208 = (uint16x8_t)vdupq_n_s16(0xD01u);
  v209 = vmull_u16(*(uint16x4_t *)v868[0].i8, *(uint16x4_t *)v208.i8);
  v210 = vmull_high_u16(v868[0], v208);
  v211 = vmull_u16(*(uint16x4_t *)v868[1].i8, *(uint16x4_t *)v208.i8);
  v212 = vmull_high_u16(v868[1], v208);
  v213.i64[0] = 0x100000001;
  v213.i64[1] = 0x100000001;
  v868[0] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v209, 3uLL), v213), v209, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v210, 3uLL), v213), v210, 4uLL));
  v868[1] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v211, 3uLL), v213), v211, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v212, 3uLL), v213), v212, 4uLL));
  v214 = vmull_u16(*(uint16x4_t *)v868[2].i8, *(uint16x4_t *)v208.i8);
  v215 = vmull_high_u16(v868[2], v208);
  v216 = vmull_u16(*(uint16x4_t *)v868[3].i8, *(uint16x4_t *)v208.i8);
  v217 = vmull_high_u16(v868[3], v208);
  v868[2] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v214, 3uLL), v213), v214, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v215, 3uLL), v213), v215, 4uLL));
  v868[3] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v216, 3uLL), v213), v216, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v217, 3uLL), v213), v217, 4uLL));
  v218 = vmull_u16(*(uint16x4_t *)v868[4].i8, *(uint16x4_t *)v208.i8);
  v219 = vmull_high_u16(v868[4], v208);
  v220 = vmull_u16(*(uint16x4_t *)v868[5].i8, *(uint16x4_t *)v208.i8);
  v221 = vmull_high_u16(v868[5], v208);
  v868[4] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v218, 3uLL), v213), v218, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v219, 3uLL), v213), v219, 4uLL));
  v868[5] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v220, 3uLL), v213), v220, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v221, 3uLL), v213), v221, 4uLL));
  v222 = vmull_u16(*(uint16x4_t *)v868[6].i8, *(uint16x4_t *)v208.i8);
  v223 = vmull_high_u16(v868[6], v208);
  v224 = vmull_u16(*(uint16x4_t *)v868[7].i8, *(uint16x4_t *)v208.i8);
  v225 = vmull_high_u16(v868[7], v208);
  v868[6] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v222, 3uLL), v213), v222, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v223, 3uLL), v213), v223, 4uLL));
  v868[7] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v224, 3uLL), v213), v224, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v225, 3uLL), v213), v225, 4uLL));
  v226 = vmull_u16(*(uint16x4_t *)v868[8].i8, *(uint16x4_t *)v208.i8);
  v227 = vmull_high_u16(v868[8], v208);
  v228 = vmull_u16(*(uint16x4_t *)v868[9].i8, *(uint16x4_t *)v208.i8);
  v229 = vmull_high_u16(v868[9], v208);
  v868[8] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v226, 3uLL), v213), v226, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v227, 3uLL), v213), v227, 4uLL));
  v868[9] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v228, 3uLL), v213), v228, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v229, 3uLL), v213), v229, 4uLL));
  v230 = vmull_u16(*(uint16x4_t *)v868[10].i8, *(uint16x4_t *)v208.i8);
  v231 = vmull_high_u16(v868[10], v208);
  v232 = vmull_u16(*(uint16x4_t *)v868[11].i8, *(uint16x4_t *)v208.i8);
  v233 = vmull_high_u16(v868[11], v208);
  v868[10] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v230, 3uLL), v213), v230, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v231, 3uLL), v213), v231, 4uLL));
  v868[11] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v232, 3uLL), v213), v232, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v233, 3uLL), v213), v233, 4uLL));
  v234 = vmull_u16(*(uint16x4_t *)v868[12].i8, *(uint16x4_t *)v208.i8);
  v235 = vmull_high_u16(v868[12], v208);
  v236 = vmull_u16(*(uint16x4_t *)v868[13].i8, *(uint16x4_t *)v208.i8);
  v237 = vmull_high_u16(v868[13], v208);
  v868[12] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v234, 3uLL), v213), v234, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v235, 3uLL), v213), v235, 4uLL));
  v868[13] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v236, 3uLL), v213), v236, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v237, 3uLL), v213), v237, 4uLL));
  v238 = vmull_u16(*(uint16x4_t *)v868[14].i8, *(uint16x4_t *)v208.i8);
  v239 = vmull_high_u16(v868[14], v208);
  v240 = vmull_u16(*(uint16x4_t *)v869.i8, *(uint16x4_t *)v208.i8);
  v241 = vmull_high_u16(v869, v208);
  v868[14] = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v238, 3uLL), v213), v238, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v239, 3uLL), v213), v239, 4uLL));
  v869 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v240, 3uLL), v213), v240, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v241, 3uLL), v213), v241, 4uLL));
  v242 = vmull_u16(*(uint16x4_t *)v870.i8, *(uint16x4_t *)v208.i8);
  v243 = vmull_high_u16(v870, v208);
  v244 = vmull_u16(*(uint16x4_t *)v871.i8, *(uint16x4_t *)v208.i8);
  v245 = vmull_high_u16(v871, v208);
  v870 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v242, 3uLL), v213), v242, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v243, 3uLL), v213), v243, 4uLL));
  v871 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v244, 3uLL), v213), v244, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v245, 3uLL), v213), v245, 4uLL));
  v246 = vmull_u16(*(uint16x4_t *)v872.i8, *(uint16x4_t *)v208.i8);
  v247 = vmull_high_u16(v872, v208);
  v248 = vmull_u16(*(uint16x4_t *)v873.i8, *(uint16x4_t *)v208.i8);
  v249 = vmull_high_u16(v873, v208);
  v872 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v246, 3uLL), v213), v246, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v247, 3uLL), v213), v247, 4uLL));
  v873 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v248, 3uLL), v213), v248, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v249, 3uLL), v213), v249, 4uLL));
  v250 = vmull_u16(*(uint16x4_t *)v874.i8, *(uint16x4_t *)v208.i8);
  v251 = vmull_high_u16(v874, v208);
  v252 = vmull_u16(*(uint16x4_t *)v875.i8, *(uint16x4_t *)v208.i8);
  v253 = vmull_high_u16(v875, v208);
  v874 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v250, 3uLL), v213), v250, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v251, 3uLL), v213), v251, 4uLL));
  v875 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v252, 3uLL), v213), v252, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v253, 3uLL), v213), v253, 4uLL));
  v254 = vmull_u16(*(uint16x4_t *)v876.i8, *(uint16x4_t *)v208.i8);
  v255 = vmull_high_u16(v876, v208);
  v256 = vmull_u16(*(uint16x4_t *)v877.i8, *(uint16x4_t *)v208.i8);
  v257 = vmull_high_u16(v877, v208);
  v876 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v254, 3uLL), v213), v254, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v255, 3uLL), v213), v255, 4uLL));
  v877 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v256, 3uLL), v213), v256, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v257, 3uLL), v213), v257, 4uLL));
  v258 = vmull_u16(*(uint16x4_t *)v878.i8, *(uint16x4_t *)v208.i8);
  v259 = vmull_high_u16(v878, v208);
  v260 = vmull_u16(*(uint16x4_t *)v879.i8, *(uint16x4_t *)v208.i8);
  v261 = vmull_high_u16(v879, v208);
  v878 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v258, 3uLL), v213), v258, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v259, 3uLL), v213), v259, 4uLL));
  v879 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v260, 3uLL), v213), v260, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v261, 3uLL), v213), v261, 4uLL));
  v262 = vmull_u16(*(uint16x4_t *)v880.i8, *(uint16x4_t *)v208.i8);
  v263 = vmull_high_u16(v880, v208);
  v264 = vmull_u16(*(uint16x4_t *)v881.i8, *(uint16x4_t *)v208.i8);
  v265 = vmull_high_u16(v881, v208);
  v880 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v262, 3uLL), v213), v262, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v263, 3uLL), v213), v263, 4uLL));
  v881 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v264, 3uLL), v213), v264, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v265, 3uLL), v213), v265, 4uLL));
  v266 = vmull_u16(*(uint16x4_t *)v882.i8, *(uint16x4_t *)v208.i8);
  v267 = vmull_high_u16(v882, v208);
  v268 = vmull_u16(*(uint16x4_t *)v883.i8, *(uint16x4_t *)v208.i8);
  v269 = vmull_high_u16(v883, v208);
  v882 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v266, 3uLL), v213), v266, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v267, 3uLL), v213), v267, 4uLL));
  v883 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v268, 3uLL), v213), v268, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v269, 3uLL), v213), v269, 4uLL));
  v270 = vmull_u16(*(uint16x4_t *)v884.i8, *(uint16x4_t *)v208.i8);
  v271 = vmull_high_u16(v884, v208);
  v272 = vmull_u16(*(uint16x4_t *)v885.i8, *(uint16x4_t *)v208.i8);
  v273 = vmull_high_u16(v885, v208);
  v884 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v270, 3uLL), v213), v270, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v271, 3uLL), v213), v271, 4uLL));
  v885 = (uint16x8_t)vuzp1q_s16((int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v272, 3uLL), v213), v272, 4uLL), (int16x8_t)vsraq_n_u32((uint32x4_t)vandq_s8((int8x16_t)vshrq_n_u32(v273, 3uLL), v213), v273, 4uLL));
  v922 = 0u;
  v921 = 0u;
  v920 = 0u;
  v919 = 0u;
  v918 = 0u;
  v917 = 0u;
  v916 = 0u;
  v915 = 0u;
  v914 = 0u;
  v913 = 0u;
  v912 = 0u;
  v911 = 0u;
  v910 = 0u;
  v909 = 0u;
  v908 = 0u;
  v907 = 0u;
  v906 = 0u;
  v905 = 0u;
  v904 = 0u;
  v903 = 0u;
  v902 = 0u;
  v901 = 0u;
  v900 = 0u;
  v899 = 0u;
  v898 = 0u;
  v897 = 0u;
  v896 = 0u;
  v895 = 0u;
  v894 = 0u;
  v893 = 0u;
  v892 = 0u;
  __dst = 0u;
  scalar_inner_product(&__dst, (uint64_t)a3[388].i64, (uint64_t)v923);
  v274 = 0;
  v275 = &xmmword_208F2B470;
  v276.i64[0] = 0xD000D000D000D00;
  v276.i64[1] = 0xD000D000D000D00;
  v277.i64[0] = 0xF2000000F2;
  v277.i64[1] = 0xF2000000F2;
  do
  {
    v278 = &__dst.i16[v274];
    v1014 = vld4q_s16(v278);
    v279 = (uint16x8_t)*v275++;
    v280 = (int32x4_t)vmovl_high_u16(v279);
    v281 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v279.i8);
    v282 = (int8x16_t)vaddq_s16(v1014.val[0], v1014.val[2]);
    v283 = vaddq_s16((int16x8_t)v282, v276);
    v284 = vdupq_n_s32(0xD01u);
    v285 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v1014.val[0].i8, *(uint16x4_t *)v1014.val[2].i8), v284), v281);
    v286 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_high_u16((uint16x8_t)v1014.val[0], (uint16x8_t)v1014.val[2]), v284), v280);
    v287 = (uint32x4_t)vdupq_n_s32(0x13AFu);
    v1015.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v283), v282), (int8x16_t)vmaxq_s16(v283, (int16x8_t)0));
    v288 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v285, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v285.i8, *(uint32x2_t *)v287.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v285, v287), 0x18uLL), v277), (int16x8_t)vmlaq_s32((int32x4_t)v286, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v286.i8, *(uint32x2_t *)v287.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v286, v287), 0x18uLL), v277));
    v289 = vaddq_s16((int16x8_t)v288, v276);
    v290 = (int8x16_t)vaddq_s16(v1014.val[1], v1014.val[3]);
    v291 = vaddq_s16((int16x8_t)v290, v276);
    v1014.val[0] = (int16x8_t)vaddq_s32((int32x4_t)vsubl_high_u16((uint16x8_t)v1014.val[1], (uint16x8_t)v1014.val[3]), v284);
    v1014.val[1] = (int16x8_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v1014.val[1].i8, *(uint16x4_t *)v1014.val[3].i8), v284), v281);
    v1014.val[0] = (int16x8_t)vmulq_s32((int32x4_t)v1014.val[0], v280);
    v1015.val[2] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v289), v288), (int8x16_t)vmaxq_s16(v289, (int16x8_t)0));
    v1015.val[1] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v291), v290), (int8x16_t)vmaxq_s16(v291, (int16x8_t)0));
    v1014.val[0] = vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v1014.val[1], vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1014.val[1].i8, *(uint32x2_t *)v287.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v1014.val[1], v287), 0x18uLL), v277), (int16x8_t)vmlaq_s32((int32x4_t)v1014.val[0], vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v1014.val[0].i8, *(uint32x2_t *)v287.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v1014.val[0], v287), 0x18uLL), v277));
    v1014.val[1] = vaddq_s16(v1014.val[0], v276);
    v1015.val[3] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v1014.val[1]), (int8x16_t)v1014.val[0]), (int8x16_t)vmaxq_s16(v1014.val[1], (int16x8_t)0));
    vst4q_s16(v278, v1015);
    v274 += 32;
  }
  while (v274 != 256);
  v292 = 0;
  v293 = &xmmword_208F2B430;
  do
  {
    v294 = (uint16x8_t)*v293++;
    v866 = (int32x4_t)vmovl_high_u16(v294);
    v295 = (int8x16_t *)&__dst.i8[v292 * 8];
    v1009.val[0] = *(int8x16_t *)((char *)&v897 + v292 * 8);
    v1009.val[1] = *(int8x16_t *)((char *)&v898 + v292 * 8);
    v1011.val[0] = *(int8x16_t *)((char *)&v895 + v292 * 8);
    v1011.val[1] = *(int8x16_t *)((char *)&v896 + v292 * 8);
    v864 = (int32x4_t)vmovl_u16(*(uint16x4_t *)v294.i8);
    v1010.val[0] = *(int8x16_t *)((char *)&v893 + v292 * 8);
    v1010.val[1] = *(int8x16_t *)((char *)&v894 + v292 * 8);
    v296 = vqtbl2q_s8(v1011, (int8x16_t)xmmword_208F2B0B0);
    v1013 = *(int8x16x2_t *)&__dst.i8[v292 * 8];
    v297.i32[0] = vzip1q_s16((int16x8_t)v1013.val[0], (int16x8_t)v1013.val[1]).u32[0];
    v296.i32[3] = vqtbl2q_s8(v1009, (int8x16_t)xmmword_208F2B0A0).i32[3];
    v297.i32[1] = vqtbl2q_s8(v1010, (int8x16_t)xmmword_208F2B0C0).i32[1];
    v298 = vqtbl2q_s8(v1011, (int8x16_t)xmmword_208F2B0E0);
    v298.i32[3] = vqtbl2q_s8(v1009, (int8x16_t)xmmword_208F2B0D0).i32[3];
    v299.i32[0] = vtrn2q_s16((int16x8_t)v1013.val[0], (int16x8_t)v1013.val[1]).u32[0];
    v300 = vqtbl2q_s8(v1011, (int8x16_t)xmmword_208F2B110);
    v299.i32[1] = vqtbl2q_s8(v1010, (int8x16_t)xmmword_208F2B0F0).i32[1];
    LOWORD(v301) = WORD2(v893.i64[v292]);
    HIWORD(v301) = WORD2(v894.i64[v292]);
    v302.i32[0] = vqtbl2q_s8(v1013, (int8x16_t)xmmword_208F2B120).u32[0];
    v300.i32[3] = vqtbl2q_s8(v1009, (int8x16_t)xmmword_208F2B100).i32[3];
    v303 = vqtbl2q_s8(v1011, (int8x16_t)xmmword_208F2B140);
    v304.i32[0] = vqtbl2q_s8(v1013, (int8x16_t)xmmword_208F2B150).u32[0];
    v303.i32[3] = vqtbl2q_s8(v1009, (int8x16_t)xmmword_208F2B130).i32[3];
    LOWORD(v305) = v895.i64[v292 + 1];
    WORD1(v305) = v896.i64[v292 + 1];
    v304.i32[1] = vtrn2q_s16(*(int16x8_t *)&v1010, *(int16x8_t *)(&v1010 + 16)).i32[1];
    *(uint16x4_t *)v306.i8 = v304;
    v307.i32[0] = vzip2q_s16((int16x8_t)v1013.val[0], (int16x8_t)v1013.val[1]).u32[0];
    v308.i32[0] = v307.i32[0];
    v309 = vtrn2q_s16((int16x8_t)v1011.val[0], (int16x8_t)v1011.val[1]);
    v308.i32[1] = vqtbl2q_s8(v1010, (int8x16_t)xmmword_208F2B170).i32[1];
    v309.i32[3] = vqtbl2q_s8(v1009, (int8x16_t)xmmword_208F2B180).i32[3];
    v302.i32[1] = v301;
    v304.i32[0] = vqtbl2q_s8(v1013, (int8x16_t)xmmword_208F2B190).u32[0];
    v310.i32[0] = v304.i32[0];
    v310.i32[1] = vzip2q_s16(*(int16x8_t *)&v1010, *(int16x8_t *)(&v1010 + 16)).i32[1];
    HIDWORD(v305) = vqtbl2q_s8(v1009, (int8x16_t)xmmword_208F2B160).i32[3];
    LOWORD(v311) = v1009.val[0].i16[6];
    HIWORD(v311) = v1009.val[1].i16[6];
    v312 = vzip2q_s16((int16x8_t)v1011.val[0], (int16x8_t)v1011.val[1]);
    v297.i64[1] = v296.i64[1];
    v313 = vqtbl2q_s8(v1011, (int8x16_t)xmmword_208F2B1C0);
    v299.i64[1] = v298.i64[1];
    v314 = vzip2q_s16((int16x8_t)v1009.val[0], (int16x8_t)v1009.val[1]);
    v313.i32[3] = v314.i32[3];
    v306.i64[1] = v303.i64[1];
    v865 = v306;
    v306.i32[0] = vqtbl2q_s8(v1013, (int8x16_t)xmmword_208F2B1E0).u32[0];
    v867 = vqtbl2q_s8(v1010, (int8x16_t)xmmword_208F2B1D0);
    v306.i32[1] = v867.i32[1];
    v310.i64[1] = v309.i64[1];
    v312.i32[1] = vqtbl2q_s8(v1009, (int8x16_t)xmmword_208F2B170).i32[1];
    v306.i64[1] = v313.i64[1];
    v309.i32[0] = vqtbl2q_s8(v1013, (int8x16_t)xmmword_208F2B1B0).u32[0];
    v307.i32[1] = v308.i32[1];
    v315 = (int8x8_t)vzip1_s16(*(int16x4_t *)v1009.val[0].i8, *(int16x4_t *)v1009.val[1].i8);
    v302.i64[1] = v300.i64[1];
    v303.i32[0] = vzip1_s16(*(int16x4_t *)v1011.val[0].i8, *(int16x4_t *)v1011.val[1].i8).u32[0];
    v303.i32[1] = vext_s8(*(int8x8_t *)&v1009, v315, 4uLL).i32[1];
    v308.i64[1] = v305;
    *(int16x4_t *)v313.i8 = vzip1_s16(*(int16x4_t *)v1010.val[0].i8, *(int16x4_t *)v1010.val[1].i8);
    v316.i32[0] = vzip1_s16(*(int16x4_t *)v1013.val[0].i8, *(int16x4_t *)v1013.val[1].i8).u32[0];
    v316.i32[1] = vext_s8(*(int8x8_t *)&v1010, *(int8x8_t *)&v313, 4uLL).i32[1];
    v317.i32[0] = v309.i32[0];
    v317.i32[1] = vqtbl2q_s8(v1010, (int8x16_t)xmmword_208F2B1A0).i32[1];
    v318 = (int32x4_t)vsubl_u16(v316, v307);
    v317.i64[1] = __PAIR64__(v311, v312.u32[2]);
    v319 = vdupq_n_s32(0xD01u);
    v320 = vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v303.i8, *(uint16x4_t *)v312.i8), v319);
    v321 = (uint32x4_t)vmulq_s32(vaddq_s32(v318, v319), v864);
    v322 = (uint32x4_t)vmulq_s32(v320, v866);
    v323 = (uint32x4_t)vdupq_n_s32(0x13AFu);
    v318.i32[0] = vqtbl2q_s8(v1011, (int8x16_t)xmmword_208F2B190).u32[0];
    v318.i32[1] = v314.i32[1];
    v304.i32[1] = v310.i32[1];
    v324.i32[0] = vtrn2_s16(*(int16x4_t *)v1011.val[0].i8, *(int16x4_t *)v1011.val[1].i8).u32[0];
    v324.i32[1] = v315.i32[1];
    v325 = (int8x16_t)vaddq_s16(v297, v308);
    v315.i32[0] = vtrn2_s16(*(int16x4_t *)v1013.val[0].i8, *(int16x4_t *)v1013.val[1].i8).u32[0];
    v315.i32[1] = v313.i32[1];
    v326 = (int8x16_t)vaddq_s16(v299, v310);
    v327.i64[0] = 0xD000D000D000D00;
    v327.i64[1] = 0xD000D000D000D00;
    v328 = vaddq_s16((int16x8_t)v326, v327);
    v329 = vandq_s8((int8x16_t)vcltzq_s16(v328), v326);
    v330 = vaddq_s16((int16x8_t)v325, v327);
    v1007.val[0] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v330), v325), (int8x16_t)vmaxq_s16(v330, (int16x8_t)0));
    v1007.val[1] = vorrq_s8(v329, (int8x16_t)vmaxq_s16(v328, (int16x8_t)0));
    v331 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16((uint16x4_t)v315, v304), v319), v864);
    v332 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(v324, *(uint16x4_t *)v318.i8), v319), v866);
    v333.i64[0] = 0xF2000000F2;
    v333.i64[1] = 0xF2000000F2;
    v304.i32[0] = vqtbl2q_s8(v1011, (int8x16_t)xmmword_208F2B1B0).u32[0];
    v304.i32[1] = vqtbl2q_s8(v1009, (int8x16_t)xmmword_208F2B1A0).i32[1];
    v309.i32[1] = v317.i32[1];
    v318.i16[2] = WORD2(v897.i64[v292]);
    v298.i32[0] = vzip2_s16(*(int16x4_t *)v1011.val[0].i8, *(int16x4_t *)v1011.val[1].i8).u32[0];
    v318.i16[3] = WORD2(v898.i64[v292]);
    v298.i32[1] = v318.i32[1];
    v318.i16[2] = WORD2(v893.i64[v292]);
    v318.i16[3] = WORD2(v894.i64[v292]);
    v315.i32[0] = vzip2_s16(*(int16x4_t *)v1013.val[0].i8, *(int16x4_t *)v1013.val[1].i8).u32[0];
    v315.i32[1] = v318.i32[1];
    v334 = (int8x16_t)vaddq_s16(v302, v317);
    v335 = vaddq_s16((int16x8_t)v334, v327);
    v336 = vandq_s8((int8x16_t)vcltzq_s16(v335), v334);
    v337 = vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v298.i8, v304), v319);
    v338 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v331, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v331.i8, *(uint32x2_t *)v323.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v331, v323), 0x18uLL), v333), (int16x8_t)vmlaq_s32((int32x4_t)v332, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v332.i8, *(uint32x2_t *)v323.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v332, v323), 0x18uLL), v333));
    v339 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16((uint16x4_t)v315, *(uint16x4_t *)v309.i8), v319), v864);
    v340 = (uint32x4_t)vmulq_s32(v337, v866);
    v309.i32[0] = vuzp2_s16(vuzp2_s16(*(int16x4_t *)v1013.val[0].i8, *(int16x4_t *)v1013.val[1].i8), *(int16x4_t *)v1013.val[0].i8).u32[0];
    v341 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v321, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v321.i8, *(uint32x2_t *)v323.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v321, v323), 0x18uLL), v333), (int16x8_t)vmlaq_s32((int32x4_t)v322, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v322.i8, *(uint32x2_t *)v323.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v322, v323), 0x18uLL), v333));
    v342 = vaddq_s16((int16x8_t)v338, v327);
    v343 = vandq_s8((int8x16_t)vcltzq_s16(v342), v338);
    v344 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v339, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v339.i8, *(uint32x2_t *)v323.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v339, v323), 0x18uLL), v333), (int16x8_t)vmlaq_s32((int32x4_t)v340, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v340.i8, *(uint32x2_t *)v323.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v340, v323), 0x18uLL), v333));
    v345 = (int8x16_t)vaddq_s16(v865, v306);
    v346 = vaddq_s16((int16x8_t)v345, v327);
    v347 = vandq_s8((int8x16_t)vcltzq_s16(v346), v345);
    v1006.val[0] = vorrq_s8(v336, (int8x16_t)vmaxq_s16(v335, (int16x8_t)0));
    v1006.val[1] = vorrq_s8(v347, (int8x16_t)vmaxq_s16(v346, (int16x8_t)0));
    v346.i32[0] = vuzp2_s16(vuzp2_s16(*(int16x4_t *)v1011.val[0].i8, *(int16x4_t *)v1011.val[1].i8), *(int16x4_t *)v1011.val[0].i8).u32[0];
    v348 = vaddq_s16((int16x8_t)v341, v327);
    v338.i32[0] = vqtbl2q_s8(v1011, (int8x16_t)xmmword_208F2B1E0).u32[0];
    v338.i32[1] = vqtbl2q_s8(v1009, (int8x16_t)xmmword_208F2B1D0).i32[1];
    v349 = vandq_s8((int8x16_t)vcltzq_s16(v348), v341);
    v346.i32[1] = vzip2_s16(*(int16x4_t *)&v1009, *(int16x4_t *)(&v1009 + 16)).i32[1];
    v350 = (int8x16_t)vmaxq_s16(v342, (int16x8_t)0);
    v351 = vaddq_s16((int16x8_t)v344, v327);
    v309.i32[1] = vzip2_s16(*(int16x4_t *)&v1010, *(int16x4_t *)(&v1010 + 16)).i32[1];
    v1008.val[0] = vorrq_s8(v349, (int8x16_t)vmaxq_s16(v348, (int16x8_t)0));
    v352 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v309.i8, (uint16x4_t)__PAIR64__(v867.u32[1], v306.u32[0])), v319), v864);
    v353 = (uint32x4_t)vmulq_s32(vaddq_s32((int32x4_t)vsubl_u16(*(uint16x4_t *)v346.i8, *(uint16x4_t *)v338.i8), v319), v866);
    v1008.val[1] = vorrq_s8(v343, v350);
    v354 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v352, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v352.i8, *(uint32x2_t *)v323.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v352, v323), 0x18uLL), v333), (int16x8_t)vmlaq_s32((int32x4_t)v353, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v353.i8, *(uint32x2_t *)v323.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v353, v323), 0x18uLL), v333));
    v355 = vaddq_s16((int16x8_t)v354, v327);
    v1012.val[0] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v351), v344), (int8x16_t)vmaxq_s16(v351, (int16x8_t)0));
    v1012.val[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v355), v354), (int8x16_t)vmaxq_s16(v355, (int16x8_t)0));
    v356 = vqtbl2q_s8(v1008, (int8x16_t)xmmword_208F2B0E0);
    v354.i32[0] = vtrn2q_s16((int16x8_t)v1007.val[0], (int16x8_t)v1007.val[1]).u32[0];
    v354.i32[1] = vqtbl2q_s8(v1006, (int8x16_t)xmmword_208F2B0F0).i32[1];
    v357 = vqtbl2q_s8(v1008, (int8x16_t)xmmword_208F2B0B0);
    v349.i32[0] = vzip1q_s16((int16x8_t)v1007.val[0], (int16x8_t)v1007.val[1]).u32[0];
    v349.i32[1] = vqtbl2q_s8(v1006, (int8x16_t)xmmword_208F2B0C0).i32[1];
    v358 = vqtbl2q_s8(v1008, (int8x16_t)xmmword_208F2B140);
    v356.i32[3] = vqtbl2q_s8(v1012, (int8x16_t)xmmword_208F2B0D0).i32[3];
    v343.i32[0] = vqtbl2q_s8(v1007, (int8x16_t)xmmword_208F2B150).u32[0];
    v343.i32[1] = vtrn2q_s16(*(int16x8_t *)&v1006, *(int16x8_t *)(&v1006 + 16)).i32[1];
    v357.i32[3] = vqtbl2q_s8(v1012, (int8x16_t)xmmword_208F2B0A0).i32[3];
    v359 = vqtbl2q_s8(v1012, (int8x16_t)xmmword_208F2B100);
    v360 = vqtbl2q_s8(v1012, (int8x16_t)xmmword_208F2B180);
    v1013.val[0] = vqtbl2q_s8(v1012, (int8x16_t)xmmword_208F2B160);
    v358.i32[3] = vqtbl2q_s8(v1012, (int8x16_t)xmmword_208F2B130).i32[3];
    v361 = vzip2q_s16((int16x8_t)v1012.val[0], (int16x8_t)v1012.val[1]);
    v1013.val[1] = (int8x16_t)vzip2q_s16((int16x8_t)v1008.val[0], (int16x8_t)v1008.val[1]);
    v1012.val[0].i16[7] = v1012.val[1].i16[6];
    v1013.val[1].i32[3] = v1012.val[0].i32[3];
    v1012.val[0].i16[2] = v1006.val[0].i16[2];
    v1012.val[1] = vqtbl2q_s8(v1008, (int8x16_t)xmmword_208F2B110);
    v1012.val[0].i16[3] = v1006.val[1].i16[2];
    v1012.val[1].i32[3] = v359.i32[3];
    v359.i32[0] = vqtbl2q_s8(v1007, (int8x16_t)xmmword_208F2B120).u32[0];
    v359.i32[1] = v1012.val[0].i32[1];
    v354.i64[1] = v356.i64[1];
    v1012.val[0] = (int8x16_t)vtrn2q_s16((int16x8_t)v1008.val[0], (int16x8_t)v1008.val[1]);
    v1012.val[0].i32[3] = v360.i32[3];
    v343.i64[1] = v358.i64[1];
    v358.i32[0] = vqtbl2q_s8(v1007, (int8x16_t)xmmword_208F2B190).u32[0];
    v358.i32[1] = vzip2q_s16(*(int16x8_t *)&v1006, *(int16x8_t *)(&v1006 + 16)).i32[1];
    v356.i16[4] = v1008.val[0].i16[4];
    v356.i16[5] = v1008.val[1].i16[4];
    v356.i32[3] = v1013.val[0].i32[3];
    v359.i64[1] = v1012.val[1].i64[1];
    v1012.val[1].i32[0] = vzip2q_s16((int16x8_t)v1007.val[0], (int16x8_t)v1007.val[1]).u32[0];
    v1012.val[1].i32[1] = vqtbl2q_s8(v1006, (int8x16_t)xmmword_208F2B170).i32[1];
    v358.i64[1] = v1012.val[0].i64[1];
    v1008.val[0] = vqtbl2q_s8(v1008, (int8x16_t)xmmword_208F2B1C0);
    v1008.val[0].i32[3] = v361.i32[3];
    v1012.val[1].i64[1] = v356.i64[1];
    v1012.val[0].i32[0] = vqtbl2q_s8(v1007, (int8x16_t)xmmword_208F2B1E0).u32[0];
    v1012.val[0].i32[1] = vqtbl2q_s8(v1006, (int8x16_t)xmmword_208F2B1D0).i32[1];
    v295[2] = v359;
    v295[3] = v343;
    v1012.val[0].i64[1] = v1008.val[0].i64[1];
    v1006.val[0] = vqtbl2q_s8(v1006, (int8x16_t)xmmword_208F2B1A0);
    v1006.val[1].i32[0] = vqtbl2q_s8(v1007, (int8x16_t)xmmword_208F2B1B0).u32[0];
    v295[4] = v1012.val[1];
    v295[5] = v358;
    v1006.val[1].i32[1] = v1006.val[0].i32[1];
    v1006.val[1].i64[1] = v1013.val[1].i64[1];
    v295[6] = v1006.val[1];
    v295[7] = v1012.val[0];
    v349.i64[1] = v357.i64[1];
    *v295 = v349;
    v295[1] = v354;
    v292 += 16;
  }
  while (v292 != 64);
  v362 = 0;
  v363.i64[0] = 0xD000D000D000D00;
  v363.i64[1] = 0xD000D000D000D00;
  v364.i64[0] = 0xF2000000F2;
  v364.i64[1] = 0xF2000000F2;
  do
  {
    v365 = &__dst + v362;
    v366 = v365[1];
    v367 = (int8x16_t)vaddq_s16(*v365, v366);
    v368 = vaddq_s16((int16x8_t)v367, v363);
    v369 = (int32x4_t)vsubl_u16(*(uint16x4_t *)v365->i8, *(uint16x4_t *)v366.i8);
    v370 = vdupq_n_s32(0xD01u);
    v371 = vaddq_s32((int32x4_t)vsubl_high_u16(*(uint16x8_t *)v365, (uint16x8_t)v366), v370);
    v372 = vaddq_s32(v369, v370);
    v373 = vdupq_n_s32(*(unsigned __int16 *)((char *)&kInverseNTTRoots + v362 + 32));
    v374 = (uint32x4_t)vmulq_s32(v372, v373);
    v375 = (uint32x4_t)vmulq_s32(v371, v373);
    v376 = (uint32x4_t)vdupq_n_s32(0x13AFu);
    v377 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v374, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v374.i8, *(uint32x2_t *)v376.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v374, v376), 0x18uLL), v364), (int16x8_t)vmlaq_s32((int32x4_t)v375, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v375.i8, *(uint32x2_t *)v376.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v375, v376), 0x18uLL), v364));
    v378 = vaddq_s16((int16x8_t)v377, v363);
    *(int8x16_t *)v365 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v368), v367), (int8x16_t)vmaxq_s16(v368, (int16x8_t)0));
    v365[1] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v378), v377), (int8x16_t)vmaxq_s16(v378, (int16x8_t)0));
    v362 += 2;
  }
  while (v362 != 32);
  v379 = 0;
  v380 = (uint16x8_t)v892;
  v381 = (int8x16_t)vaddq_s16(__dst, v893);
  v382.i64[0] = 0xD000D000D000D00;
  v382.i64[1] = 0xD000D000D000D00;
  v383 = vaddq_s16((int16x8_t)v381, v382);
  v384 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v383), v381), (int8x16_t)vmaxq_s16(v383, (int16x8_t)0));
  v385 = (uint16x8_t)vdupq_n_s16(0x62Fu);
  v386 = vdupq_n_s32(0x50692Fu);
  v387 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)__dst.i8, *(uint16x4_t *)v385.i8), *(uint16x4_t *)v893.i8, *(uint16x4_t *)v385.i8), v386);
  v388 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)__dst, v385), (uint16x8_t)v893, v385), v386);
  v389 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v390.i64[0] = 0xF2000000F2;
  v390.i64[1] = 0xF2000000F2;
  v391 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v387, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v387.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v387, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v388, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v388.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v388, v389), 0x18uLL), v390));
  v392 = vaddq_s16((int16x8_t)v391, v382);
  v393 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v392), v391), (int8x16_t)vmaxq_s16(v392, (int16x8_t)0));
  v394 = (int8x16_t)vaddq_s16((int16x8_t)v892, (int16x8_t)v894);
  v395 = vaddq_s16((int16x8_t)v394, v382);
  __dst = (int16x8_t)v384;
  v892 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v395), v394), (int8x16_t)vmaxq_s16(v395, (int16x8_t)0));
  v396 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v380.i8, *(uint16x4_t *)v385.i8), *(uint16x4_t *)v894.i8, *(uint16x4_t *)v385.i8), v386);
  v397 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v380, v385), (uint16x8_t)v894, v385), v386);
  v398 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v396, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v396.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v396, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v397, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v397.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v397, v389), 0x18uLL), v390));
  v399 = vaddq_s16((int16x8_t)v398, v382);
  v893 = (int16x8_t)v393;
  v894 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v399), v398), (int8x16_t)vmaxq_s16(v399, (int16x8_t)0));
  v400 = (uint16x8_t)v896;
  v401 = (int8x16_t)vaddq_s16(v895, v897);
  v402 = vaddq_s16((int16x8_t)v401, v382);
  v403 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v402), v401), (int8x16_t)vmaxq_s16(v402, (int16x8_t)0));
  v404 = (uint16x8_t)vdupq_n_s16(0xAC8u);
  v405 = vdupq_n_s32(0x8C32C8u);
  v406 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v895.i8, *(uint16x4_t *)v404.i8), *(uint16x4_t *)v897.i8, *(uint16x4_t *)v404.i8), v405);
  v407 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v895, v404), (uint16x8_t)v897, v404), v405);
  v408 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v406, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v406.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v406, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v407, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v407.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v407, v389), 0x18uLL), v390));
  v409 = vaddq_s16((int16x8_t)v408, v382);
  v410 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v409), v408), (int8x16_t)vmaxq_s16(v409, (int16x8_t)0));
  v411 = (int8x16_t)vaddq_s16((int16x8_t)v896, (int16x8_t)v898);
  v412 = vaddq_s16((int16x8_t)v411, v382);
  v895 = (int16x8_t)v403;
  v896 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v412), v411), (int8x16_t)vmaxq_s16(v412, (int16x8_t)0));
  v413 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v400.i8, *(uint16x4_t *)v404.i8), *(uint16x4_t *)v898.i8, *(uint16x4_t *)v404.i8), v405);
  v414 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v400, v404), (uint16x8_t)v898, v404), v405);
  v415 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v413, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v413.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v413, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v414, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v414.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v414, v389), 0x18uLL), v390));
  v416 = vaddq_s16((int16x8_t)v415, v382);
  v897 = (int16x8_t)v410;
  v898 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v416), v415), (int8x16_t)vmaxq_s16(v416, (int16x8_t)0));
  v417 = (uint16x8_t)v900;
  v418 = (int8x16_t)vaddq_s16(v899, v901);
  v419 = vaddq_s16((int16x8_t)v418, v382);
  v420 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v419), v418), (int8x16_t)vmaxq_s16(v419, (int16x8_t)0));
  v419.i64[0] = 0x45004500450045;
  v419.i64[1] = 0x45004500450045;
  v421 = vdupq_n_s32(0x38145u);
  v422 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v899.i8, (uint16x4_t)0x45004500450045), *(uint16x4_t *)v901.i8, (uint16x4_t)0x45004500450045), v421);
  v423 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v899, (uint16x8_t)v419), (uint16x8_t)v901, (uint16x8_t)v419), v421);
  v424 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v422, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v422.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v422, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v423, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v423.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v423, v389), 0x18uLL), v390));
  v425 = vaddq_s16((int16x8_t)v424, v382);
  v426 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v425), v424), (int8x16_t)vmaxq_s16(v425, (int16x8_t)0));
  v427 = (int8x16_t)vaddq_s16((int16x8_t)v900, (int16x8_t)v902);
  v428 = vaddq_s16((int16x8_t)v427, v382);
  v899 = (int16x8_t)v420;
  v900 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v428), v427), (int8x16_t)vmaxq_s16(v428, (int16x8_t)0));
  v429 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v417.i8, (uint16x4_t)0x45004500450045), *(uint16x4_t *)v902.i8, (uint16x4_t)0x45004500450045), v421);
  v430 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v417, (uint16x8_t)v419), (uint16x8_t)v902, (uint16x8_t)v419), v421);
  v431 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v429, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v429.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v429, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v430, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v430.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v430, v389), 0x18uLL), v390));
  v432 = vaddq_s16((int16x8_t)v431, v382);
  v901 = (int16x8_t)v426;
  v902 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v432), v431), (int8x16_t)vmaxq_s16(v432, (int16x8_t)0));
  v433 = (uint16x8_t)v904;
  v434 = (int8x16_t)vaddq_s16(v903, v905);
  v435 = vaddq_s16((int16x8_t)v434, v382);
  v436 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v435), v434), (int8x16_t)vmaxq_s16(v435, (int16x8_t)0));
  v437 = (uint16x8_t)vdupq_n_s16(0x21Fu);
  v438 = vdupq_n_s32(0x1B951Fu);
  v439 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v903.i8, *(uint16x4_t *)v437.i8), *(uint16x4_t *)v905.i8, *(uint16x4_t *)v437.i8), v438);
  v440 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v903, v437), (uint16x8_t)v905, v437), v438);
  v441 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v439, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v439.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v439, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v440, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v440.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v440, v389), 0x18uLL), v390));
  v442 = vaddq_s16((int16x8_t)v441, v382);
  v443 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v442), v441), (int8x16_t)vmaxq_s16(v442, (int16x8_t)0));
  v444 = (int8x16_t)vaddq_s16((int16x8_t)v904, (int16x8_t)v906);
  v445 = vaddq_s16((int16x8_t)v444, v382);
  v903 = (int16x8_t)v436;
  v904 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v445), v444), (int8x16_t)vmaxq_s16(v445, (int16x8_t)0));
  v446 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v433.i8, *(uint16x4_t *)v437.i8), *(uint16x4_t *)v906.i8, *(uint16x4_t *)v437.i8), v438);
  v447 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v433, v437), (uint16x8_t)v906, v437), v438);
  v448 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v446, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v446.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v446, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v447, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v447.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v447, v389), 0x18uLL), v390));
  v449 = vaddq_s16((int16x8_t)v448, v382);
  v905 = (int16x8_t)v443;
  v906 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v449), v448), (int8x16_t)vmaxq_s16(v449, (int16x8_t)0));
  v450 = (uint16x8_t)v908;
  v451 = (int8x16_t)vaddq_s16(v907, v909);
  v452 = vaddq_s16((int16x8_t)v451, v382);
  v453 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v452), v451), (int8x16_t)vmaxq_s16(v452, (int16x8_t)0));
  v454 = (uint16x8_t)vdupq_n_s16(0x9E4u);
  v455 = vdupq_n_s32(0x809DE4u);
  v456 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v907.i8, *(uint16x4_t *)v454.i8), *(uint16x4_t *)v909.i8, *(uint16x4_t *)v454.i8), v455);
  v457 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v907, v454), (uint16x8_t)v909, v454), v455);
  v458 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v456, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v456.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v456, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v457, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v457.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v457, v389), 0x18uLL), v390));
  v459 = vaddq_s16((int16x8_t)v458, v382);
  v460 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v459), v458), (int8x16_t)vmaxq_s16(v459, (int16x8_t)0));
  v461 = (int8x16_t)vaddq_s16(v908, (int16x8_t)v910);
  v462 = vaddq_s16((int16x8_t)v461, v382);
  v907 = (int16x8_t)v453;
  v908 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v462), v461), (int8x16_t)vmaxq_s16(v462, (int16x8_t)0));
  v463 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v450.i8, *(uint16x4_t *)v454.i8), *(uint16x4_t *)v910.i8, *(uint16x4_t *)v454.i8), v455);
  v464 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v450, v454), (uint16x8_t)v910, v454), v455);
  v465 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v463, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v463.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v463, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v464, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v464.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v464, v389), 0x18uLL), v390));
  v466 = vaddq_s16((int16x8_t)v465, v382);
  v909 = (int16x8_t)v460;
  v910 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v466), v465), (int8x16_t)vmaxq_s16(v466, (int16x8_t)0));
  v467 = (uint16x8_t)v912;
  v468 = (int8x16_t)vaddq_s16(v911, v913);
  v469 = vaddq_s16((int16x8_t)v468, v382);
  v470 = (uint16x8_t)vdupq_n_s16(0xC40u);
  v471 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v469), v468), (int8x16_t)vmaxq_s16(v469, (int16x8_t)0));
  v472 = vdupq_n_s32(0x9F4C40u);
  v473 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v911.i8, *(uint16x4_t *)v470.i8), *(uint16x4_t *)v913.i8, *(uint16x4_t *)v470.i8), v472);
  v474 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v911, v470), (uint16x8_t)v913, v470), v472);
  v475 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v473, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v473.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v473, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v474, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v474.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v474, v389), 0x18uLL), v390));
  v476 = vaddq_s16((int16x8_t)v475, v382);
  v477 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v476), v475), (int8x16_t)vmaxq_s16(v476, (int16x8_t)0));
  v478 = (int8x16_t)vaddq_s16((int16x8_t)v912, (int16x8_t)v914);
  v479 = vaddq_s16((int16x8_t)v478, v382);
  v911 = (int16x8_t)v471;
  v912 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v479), v478), (int8x16_t)vmaxq_s16(v479, (int16x8_t)0));
  v480 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v467.i8, *(uint16x4_t *)v470.i8), *(uint16x4_t *)v914.i8, *(uint16x4_t *)v470.i8), v472);
  v481 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v467, v470), (uint16x8_t)v914, v470), v472);
  v482 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v480, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v480.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v480, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v481, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v481.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v481, v389), 0x18uLL), v390));
  v483 = vaddq_s16((int16x8_t)v482, v382);
  v913 = (int16x8_t)v477;
  v914 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v483), v482), (int8x16_t)vmaxq_s16(v483, (int16x8_t)0));
  v484 = (uint16x8_t)v916;
  v485 = (int8x16_t)vaddq_s16(v915, v917);
  v486 = vaddq_s16((int16x8_t)v485, v382);
  v487 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v486), v485), (int8x16_t)vmaxq_s16(v486, (int16x8_t)0));
  v488 = (uint16x8_t)vdupq_n_s16(0x582u);
  v489 = vdupq_n_s32(0x479F82u);
  v490 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v915.i8, *(uint16x4_t *)v488.i8), *(uint16x4_t *)v917.i8, *(uint16x4_t *)v488.i8), v489);
  v491 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v915, v488), (uint16x8_t)v917, v488), v489);
  v492 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v490, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v490.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v490, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v491, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v491.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v491, v389), 0x18uLL), v390));
  v493 = vaddq_s16((int16x8_t)v492, v382);
  v494 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v493), v492), (int8x16_t)vmaxq_s16(v493, (int16x8_t)0));
  v495 = (int8x16_t)vaddq_s16((int16x8_t)v916, (int16x8_t)v918);
  v496 = vaddq_s16((int16x8_t)v495, v382);
  v915 = (int16x8_t)v487;
  v916 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v496), v495), (int8x16_t)vmaxq_s16(v496, (int16x8_t)0));
  v497 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v484.i8, *(uint16x4_t *)v488.i8), *(uint16x4_t *)v918.i8, *(uint16x4_t *)v488.i8), v489);
  v498 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v484, v488), (uint16x8_t)v918, v488), v489);
  v499 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v497, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v497.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v497, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v498, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v498.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v498, v389), 0x18uLL), v390));
  v500 = vaddq_s16((int16x8_t)v499, v382);
  v917 = (int16x8_t)v494;
  v918 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v500), v499), (int8x16_t)vmaxq_s16(v500, (int16x8_t)0));
  v501 = (uint16x8_t)v920;
  v502 = (int8x16_t)vaddq_s16(v919, v921);
  v503 = vaddq_s16((int16x8_t)v502, v382);
  v504 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v503), v502), (int8x16_t)vmaxq_s16(v503, (int16x8_t)0));
  v505 = (uint16x8_t)vdupq_n_s16(0x8DBu);
  v506 = vdupq_n_s32(0x7327DBu);
  v507 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v919.i8, *(uint16x4_t *)v505.i8), *(uint16x4_t *)v921.i8, *(uint16x4_t *)v505.i8), v506);
  v508 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v919, v505), (uint16x8_t)v921, v505), v506);
  v509 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v507, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v507.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v507, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v508, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v508.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v508, v389), 0x18uLL), v390));
  v510 = vaddq_s16((int16x8_t)v509, v382);
  v511 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v510), v509), (int8x16_t)vmaxq_s16(v510, (int16x8_t)0));
  v512 = (int8x16_t)vaddq_s16((int16x8_t)v920, (int16x8_t)v922);
  v513 = vaddq_s16((int16x8_t)v512, v382);
  v919 = (int16x8_t)v504;
  v920 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v513), v512), (int8x16_t)vmaxq_s16(v513, (int16x8_t)0));
  v514 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v501.i8, *(uint16x4_t *)v505.i8), *(uint16x4_t *)v922.i8, *(uint16x4_t *)v505.i8), v506);
  v515 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v501, v505), (uint16x8_t)v922, v505), v506);
  v516 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v514, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v514.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v514, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v515, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v515.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v515, v389), 0x18uLL), v390));
  v517 = vaddq_s16((int16x8_t)v516, v382);
  v921 = (int16x8_t)v511;
  v922 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v517), v516), (int8x16_t)vmaxq_s16(v517, (int16x8_t)0));
  v518 = (uint16x8_t)v892;
  v519 = (int8x16_t)vaddq_s16(__dst, v895);
  v520 = vaddq_s16((int16x8_t)v519, v382);
  v521 = vandq_s8((int8x16_t)vcltzq_s16(v520), v519);
  v522 = (uint16x8_t)vdupq_n_s16(0x9B1u);
  v523 = vorrq_s8(v521, (int8x16_t)vmaxq_s16(v520, (int16x8_t)0));
  v524 = vdupq_n_s32(0x7E06B1u);
  v525 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)__dst.i8, *(uint16x4_t *)v522.i8), *(uint16x4_t *)v895.i8, *(uint16x4_t *)v522.i8), v524);
  v526 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)__dst, v522), (uint16x8_t)v895, v522), v524);
  v527 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v525, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v525.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v525, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v526, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v526.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v526, v389), 0x18uLL), v390));
  v528 = vaddq_s16((int16x8_t)v527, v382);
  v529 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v528), v527), (int8x16_t)vmaxq_s16(v528, (int16x8_t)0));
  v530 = (int8x16_t)vaddq_s16((int16x8_t)v892, (int16x8_t)v896);
  v531 = vaddq_s16((int16x8_t)v530, v382);
  __dst = (int16x8_t)v523;
  v892 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v531), v530), (int8x16_t)vmaxq_s16(v531, (int16x8_t)0));
  v532 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v518.i8, *(uint16x4_t *)v522.i8), *(uint16x4_t *)v896.i8, *(uint16x4_t *)v522.i8), v524);
  v533 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v518, v522), (uint16x8_t)v896, v522), v524);
  v534 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v532, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v532.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v532, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v533, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v533.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v533, v389), 0x18uLL), v390));
  v535 = vaddq_s16((int16x8_t)v534, v382);
  v895 = (int16x8_t)v529;
  v896 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v535), v534), (int8x16_t)vmaxq_s16(v535, (int16x8_t)0));
  v536 = (uint16x8_t)v894;
  v537 = (int8x16_t)vaddq_s16(v893, v897);
  v538 = vaddq_s16((int16x8_t)v537, v382);
  v539 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v538), v537), (int8x16_t)vmaxq_s16(v538, (int16x8_t)0));
  v540 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v893.i8, *(uint16x4_t *)v522.i8), *(uint16x4_t *)v897.i8, *(uint16x4_t *)v522.i8), v524);
  v541 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v893, v522), (uint16x8_t)v897, v522), v524);
  v542 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v540, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v540.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v540, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v541, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v541.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v541, v389), 0x18uLL), v390));
  v543 = vaddq_s16((int16x8_t)v542, v382);
  v544 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v543), v542), (int8x16_t)vmaxq_s16(v543, (int16x8_t)0));
  v545 = (int8x16_t)vaddq_s16((int16x8_t)v894, (int16x8_t)v898);
  v546 = vaddq_s16((int16x8_t)v545, v382);
  v893 = (int16x8_t)v539;
  v894 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v546), v545), (int8x16_t)vmaxq_s16(v546, (int16x8_t)0));
  v547 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v536, v522), (uint16x8_t)v898, v522);
  v548 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v536.i8, *(uint16x4_t *)v522.i8), *(uint16x4_t *)v898.i8, *(uint16x4_t *)v522.i8), v524);
  v549 = (uint32x4_t)vaddq_s32(v547, v524);
  v550 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v548, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v548.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v548, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v549, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v549.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v549, v389), 0x18uLL), v390));
  v551 = vaddq_s16((int16x8_t)v550, v382);
  v897 = (int16x8_t)v544;
  v898 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v551), v550), (int8x16_t)vmaxq_s16(v551, (int16x8_t)0));
  v552 = (uint16x8_t)v900;
  v553 = (int8x16_t)vaddq_s16(v899, v903);
  v554 = vaddq_s16((int16x8_t)v553, v382);
  v555 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v554), v553), (int8x16_t)vmaxq_s16(v554, (int16x8_t)0));
  v556 = (uint16x8_t)vdupq_n_s16(0x598u);
  v557 = vdupq_n_s32(0x48BD98u);
  v558 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v899.i8, *(uint16x4_t *)v556.i8), *(uint16x4_t *)v903.i8, *(uint16x4_t *)v556.i8), v557);
  v559 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v899, v556), (uint16x8_t)v903, v556), v557);
  v560 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v558, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v558.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v558, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v559, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v559.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v559, v389), 0x18uLL), v390));
  v561 = vaddq_s16((int16x8_t)v560, v382);
  v562 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v561), v560), (int8x16_t)vmaxq_s16(v561, (int16x8_t)0));
  v563 = (int8x16_t)vaddq_s16((int16x8_t)v900, (int16x8_t)v904);
  v564 = vaddq_s16((int16x8_t)v563, v382);
  v899 = (int16x8_t)v555;
  v900 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v564), v563), (int8x16_t)vmaxq_s16(v564, (int16x8_t)0));
  v565 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v552.i8, *(uint16x4_t *)v556.i8), *(uint16x4_t *)v904.i8, *(uint16x4_t *)v556.i8), v557);
  v566 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v552, v556), (uint16x8_t)v904, v556), v557);
  v567 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v565, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v565.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v565, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v566, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v566.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v566, v389), 0x18uLL), v390));
  v568 = vaddq_s16((int16x8_t)v567, v382);
  v903 = (int16x8_t)v562;
  v904 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v568), v567), (int8x16_t)vmaxq_s16(v568, (int16x8_t)0));
  v569 = (uint16x8_t)v902;
  v570 = (int8x16_t)vaddq_s16(v901, v905);
  v571 = vaddq_s16((int16x8_t)v570, v382);
  v572 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v571), v570), (int8x16_t)vmaxq_s16(v571, (int16x8_t)0));
  v573 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v901.i8, *(uint16x4_t *)v556.i8), *(uint16x4_t *)v905.i8, *(uint16x4_t *)v556.i8), v557);
  v574 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v901, v556), (uint16x8_t)v905, v556), v557);
  v575 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v573, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v573.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v573, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v574, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v574.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v574, v389), 0x18uLL), v390));
  v576 = vaddq_s16((int16x8_t)v575, v382);
  v577 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v576), v575), (int8x16_t)vmaxq_s16(v576, (int16x8_t)0));
  v578 = (int8x16_t)vaddq_s16((int16x8_t)v902, (int16x8_t)v906);
  v579 = vaddq_s16((int16x8_t)v578, v382);
  v901 = (int16x8_t)v572;
  v902 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v579), v578), (int8x16_t)vmaxq_s16(v579, (int16x8_t)0));
  v580 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v569, v556), (uint16x8_t)v906, v556);
  v581 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v569.i8, *(uint16x4_t *)v556.i8), *(uint16x4_t *)v906.i8, *(uint16x4_t *)v556.i8), v557);
  v582 = (uint32x4_t)vaddq_s32(v580, v557);
  v583 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v581, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v581.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v581, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v582, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v582.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v582, v389), 0x18uLL), v390));
  v584 = vaddq_s16((int16x8_t)v583, v382);
  v905 = (int16x8_t)v577;
  v906 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v584), v583), (int8x16_t)vmaxq_s16(v584, (int16x8_t)0));
  v585 = (uint16x8_t)v908;
  v586 = (int8x16_t)vaddq_s16(v907, v911);
  v587 = vaddq_s16((int16x8_t)v586, v382);
  v588 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v587), v586), (int8x16_t)vmaxq_s16(v587, (int16x8_t)0));
  v589 = (uint16x8_t)vdupq_n_s16(0xA8Bu);
  v590 = vdupq_n_s32(0x89198Bu);
  v591 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v907.i8, *(uint16x4_t *)v589.i8), *(uint16x4_t *)v911.i8, *(uint16x4_t *)v589.i8), v590);
  v592 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v907, v589), (uint16x8_t)v911, v589), v590);
  v593 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v591, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v591.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v591, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v592, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v592.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v592, v389), 0x18uLL), v390));
  v594 = vaddq_s16((int16x8_t)v593, v382);
  v595 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v594), v593), (int8x16_t)vmaxq_s16(v594, (int16x8_t)0));
  v596 = (int8x16_t)vaddq_s16(v908, (int16x8_t)v912);
  v597 = vaddq_s16((int16x8_t)v596, v382);
  v907 = (int16x8_t)v588;
  v908 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v597), v596), (int8x16_t)vmaxq_s16(v597, (int16x8_t)0));
  v598 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v585.i8, *(uint16x4_t *)v589.i8), *(uint16x4_t *)v912.i8, *(uint16x4_t *)v589.i8), v590);
  v599 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v585, v589), (uint16x8_t)v912, v589), v590);
  v600 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v598, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v598.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v598, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v599, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v599.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v599, v389), 0x18uLL), v390));
  v601 = vaddq_s16((int16x8_t)v600, v382);
  v911 = (int16x8_t)v595;
  v912 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v601), v600), (int8x16_t)vmaxq_s16(v601, (int16x8_t)0));
  v602 = (uint16x8_t)v910;
  v603 = (int8x16_t)vaddq_s16(v909, v913);
  v604 = vaddq_s16((int16x8_t)v603, v382);
  v605 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v604), v603), (int8x16_t)vmaxq_s16(v604, (int16x8_t)0));
  v606 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v909.i8, *(uint16x4_t *)v589.i8), *(uint16x4_t *)v913.i8, *(uint16x4_t *)v589.i8), v590);
  v607 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v909, v589), (uint16x8_t)v913, v589), v590);
  v608 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v606, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v606.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v606, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v607, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v607.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v607, v389), 0x18uLL), v390));
  v609 = vaddq_s16((int16x8_t)v608, v382);
  v610 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v609), v608), (int8x16_t)vmaxq_s16(v609, (int16x8_t)0));
  v611 = (int8x16_t)vaddq_s16((int16x8_t)v910, (int16x8_t)v914);
  v612 = vaddq_s16((int16x8_t)v611, v382);
  v909 = (int16x8_t)v605;
  v910 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v612), v611), (int8x16_t)vmaxq_s16(v612, (int16x8_t)0));
  v613 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v602, v589), (uint16x8_t)v914, v589);
  v614 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v602.i8, *(uint16x4_t *)v589.i8), *(uint16x4_t *)v914.i8, *(uint16x4_t *)v589.i8), v590);
  v615 = (uint32x4_t)vaddq_s32(v613, v590);
  v616 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v614, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v614.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v614, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v615, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v615.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v615, v389), 0x18uLL), v390));
  v617 = vaddq_s16((int16x8_t)v616, v382);
  v913 = (int16x8_t)v610;
  v914 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v617), v616), (int8x16_t)vmaxq_s16(v617, (int16x8_t)0));
  v618 = (uint16x8_t)v916;
  v619 = (int8x16_t)vaddq_s16(v915, v919);
  v620 = vaddq_s16((int16x8_t)v619, v382);
  v621 = vandq_s8((int8x16_t)vcltzq_s16(v620), v619);
  v622 = (uint16x8_t)vdupq_n_s16(0x2AFu);
  v623 = vorrq_s8(v621, (int8x16_t)vmaxq_s16(v620, (int16x8_t)0));
  v624 = vdupq_n_s32(0x22E5AFu);
  v625 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v915.i8, *(uint16x4_t *)v622.i8), *(uint16x4_t *)v919.i8, *(uint16x4_t *)v622.i8), v624);
  v626 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v915, v622), (uint16x8_t)v919, v622), v624);
  v627 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v625, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v625.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v625, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v626, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v626.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v626, v389), 0x18uLL), v390));
  v628 = vaddq_s16((int16x8_t)v627, v382);
  v629 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v628), v627), (int8x16_t)vmaxq_s16(v628, (int16x8_t)0));
  v630 = (int8x16_t)vaddq_s16((int16x8_t)v916, (int16x8_t)v920);
  v631 = vaddq_s16((int16x8_t)v630, v382);
  v915 = (int16x8_t)v623;
  v916 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v631), v630), (int8x16_t)vmaxq_s16(v631, (int16x8_t)0));
  v632 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v618.i8, *(uint16x4_t *)v622.i8), *(uint16x4_t *)v920.i8, *(uint16x4_t *)v622.i8), v624);
  v633 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v618, v622), (uint16x8_t)v920, v622), v624);
  v634 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v632, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v632.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v632, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v633, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v633.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v633, v389), 0x18uLL), v390));
  v635 = vaddq_s16((int16x8_t)v634, v382);
  v919 = (int16x8_t)v629;
  v920 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v635), v634), (int8x16_t)vmaxq_s16(v635, (int16x8_t)0));
  v636 = (uint16x8_t)v918;
  v637 = (int8x16_t)vaddq_s16(v917, v921);
  v638 = vaddq_s16((int16x8_t)v637, v382);
  v639 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v638), v637), (int8x16_t)vmaxq_s16(v638, (int16x8_t)0));
  v640 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v917.i8, *(uint16x4_t *)v622.i8), *(uint16x4_t *)v921.i8, *(uint16x4_t *)v622.i8), v624);
  v641 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v917, v622), (uint16x8_t)v921, v622), v624);
  v642 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v640, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v640.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v640, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v641, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v641.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v641, v389), 0x18uLL), v390));
  v643 = vaddq_s16((int16x8_t)v642, v382);
  v644 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v643), v642), (int8x16_t)vmaxq_s16(v643, (int16x8_t)0));
  v645 = (int8x16_t)vaddq_s16((int16x8_t)v918, (int16x8_t)v922);
  v646 = vaddq_s16((int16x8_t)v645, v382);
  v917 = (int16x8_t)v639;
  v918 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v646), v645), (int8x16_t)vmaxq_s16(v646, (int16x8_t)0));
  v647 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v636, v622), (uint16x8_t)v922, v622);
  v648 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v636.i8, *(uint16x4_t *)v622.i8), *(uint16x4_t *)v922.i8, *(uint16x4_t *)v622.i8), v624);
  v649 = (uint32x4_t)vaddq_s32(v647, v624);
  v650 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v648, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v648.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v648, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v649, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v649.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v649, v389), 0x18uLL), v390));
  v651 = vaddq_s16((int16x8_t)v650, v382);
  v921 = (int16x8_t)v644;
  v922 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v651), v650), (int8x16_t)vmaxq_s16(v651, (int16x8_t)0));
  v652 = (uint16x8_t)v892;
  v653 = (int8x16_t)vaddq_s16(__dst, v899);
  v654 = vaddq_s16((int16x8_t)v653, v382);
  v655 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v654), v653), (int8x16_t)vmaxq_s16(v654, (int16x8_t)0));
  v653.i64[0] = 0x28002800280028;
  v653.i64[1] = 0x28002800280028;
  v656 = vdupq_n_s32(0x20828u);
  v657 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)__dst.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v899.i8, (uint16x4_t)0x28002800280028), v656);
  v658 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)__dst, (uint16x8_t)v653), (uint16x8_t)v899, (uint16x8_t)v653), v656);
  v659 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v657, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v657.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v657, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v658, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v658.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v658, v389), 0x18uLL), v390));
  v660 = vaddq_s16((int16x8_t)v659, v382);
  v661 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v660), v659), (int8x16_t)vmaxq_s16(v660, (int16x8_t)0));
  v662 = (int8x16_t)vaddq_s16((int16x8_t)v892, (int16x8_t)v900);
  v663 = vaddq_s16((int16x8_t)v662, v382);
  __dst = (int16x8_t)v655;
  v892 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v663), v662), (int8x16_t)vmaxq_s16(v663, (int16x8_t)0));
  v664 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v652.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v900.i8, (uint16x4_t)0x28002800280028), v656);
  v665 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v652, (uint16x8_t)v653), (uint16x8_t)v900, (uint16x8_t)v653), v656);
  v666 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v664, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v664.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v664, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v665, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v665.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v665, v389), 0x18uLL), v390));
  v667 = vaddq_s16((int16x8_t)v666, v382);
  v899 = (int16x8_t)v661;
  v900 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v667), v666), (int8x16_t)vmaxq_s16(v667, (int16x8_t)0));
  v668 = (uint16x8_t)v894;
  v669 = (int8x16_t)vaddq_s16(v893, v901);
  v670 = vaddq_s16((int16x8_t)v669, v382);
  v671 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v670), v669), (int8x16_t)vmaxq_s16(v670, (int16x8_t)0));
  v672 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v893.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v901.i8, (uint16x4_t)0x28002800280028), v656);
  v673 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v893, (uint16x8_t)v653), (uint16x8_t)v901, (uint16x8_t)v653), v656);
  v674 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v672, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v672.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v672, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v673, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v673.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v673, v389), 0x18uLL), v390));
  v675 = vaddq_s16((int16x8_t)v674, v382);
  v676 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v675), v674), (int8x16_t)vmaxq_s16(v675, (int16x8_t)0));
  v677 = (int8x16_t)vaddq_s16((int16x8_t)v894, (int16x8_t)v902);
  v678 = vaddq_s16((int16x8_t)v677, v382);
  v893 = (int16x8_t)v671;
  v894 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v678), v677), (int8x16_t)vmaxq_s16(v678, (int16x8_t)0));
  v679 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v668.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v902.i8, (uint16x4_t)0x28002800280028), v656);
  v680 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v668, (uint16x8_t)v653), (uint16x8_t)v902, (uint16x8_t)v653), v656);
  v681 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v679, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v679.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v679, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v680, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v680.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v680, v389), 0x18uLL), v390));
  v682 = vaddq_s16((int16x8_t)v681, v382);
  v901 = (int16x8_t)v676;
  v902 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v682), v681), (int8x16_t)vmaxq_s16(v682, (int16x8_t)0));
  v683 = (uint16x8_t)v896;
  v684 = (int8x16_t)vaddq_s16(v895, v903);
  v685 = vaddq_s16((int16x8_t)v684, v382);
  v686 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v685), v684), (int8x16_t)vmaxq_s16(v685, (int16x8_t)0));
  v687 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v895.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v903.i8, (uint16x4_t)0x28002800280028), v656);
  v688 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v895, (uint16x8_t)v653), (uint16x8_t)v903, (uint16x8_t)v653), v656);
  v689 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v687, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v687.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v687, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v688, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v688.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v688, v389), 0x18uLL), v390));
  v690 = vaddq_s16((int16x8_t)v689, v382);
  v691 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v690), v689), (int8x16_t)vmaxq_s16(v690, (int16x8_t)0));
  v692 = (int8x16_t)vaddq_s16((int16x8_t)v896, (int16x8_t)v904);
  v693 = vaddq_s16((int16x8_t)v692, v382);
  v895 = (int16x8_t)v686;
  v896 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v693), v692), (int8x16_t)vmaxq_s16(v693, (int16x8_t)0));
  v694 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v683.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v904.i8, (uint16x4_t)0x28002800280028), v656);
  v695 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v683, (uint16x8_t)v653), (uint16x8_t)v904, (uint16x8_t)v653), v656);
  v696 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v694, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v694.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v694, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v695, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v695.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v695, v389), 0x18uLL), v390));
  v697 = vaddq_s16((int16x8_t)v696, v382);
  v903 = (int16x8_t)v691;
  v904 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v697), v696), (int8x16_t)vmaxq_s16(v697, (int16x8_t)0));
  v698 = (uint16x8_t)v898;
  v699 = (int8x16_t)vaddq_s16(v897, v905);
  v700 = vaddq_s16((int16x8_t)v699, v382);
  v701 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v700), v699), (int8x16_t)vmaxq_s16(v700, (int16x8_t)0));
  v702 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v897.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v905.i8, (uint16x4_t)0x28002800280028), v656);
  v703 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v897, (uint16x8_t)v653), (uint16x8_t)v905, (uint16x8_t)v653), v656);
  v704 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v702, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v702.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v702, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v703, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v703.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v703, v389), 0x18uLL), v390));
  v705 = vaddq_s16((int16x8_t)v704, v382);
  v706 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v705), v704), (int8x16_t)vmaxq_s16(v705, (int16x8_t)0));
  v707 = (int8x16_t)vaddq_s16((int16x8_t)v898, (int16x8_t)v906);
  v708 = vaddq_s16((int16x8_t)v707, v382);
  v897 = (int16x8_t)v701;
  v898 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v708), v707), (int8x16_t)vmaxq_s16(v708, (int16x8_t)0));
  v709 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v698, (uint16x8_t)v653), (uint16x8_t)v906, (uint16x8_t)v653);
  v710 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v698.i8, (uint16x4_t)0x28002800280028), *(uint16x4_t *)v906.i8, (uint16x4_t)0x28002800280028), v656);
  v711 = (uint32x4_t)vaddq_s32(v709, v656);
  v712 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v710, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v710.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v710, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v711, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v711.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v711, v389), 0x18uLL), v390));
  v713 = vaddq_s16((int16x8_t)v712, v382);
  v905 = (int16x8_t)v706;
  v906 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v713), v712), (int8x16_t)vmaxq_s16(v713, (int16x8_t)0));
  v714 = (uint16x8_t)v908;
  v715 = (int8x16_t)vaddq_s16(v907, v915);
  v716 = vaddq_s16((int16x8_t)v715, v382);
  v717 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v716), v715), (int8x16_t)vmaxq_s16(v716, (int16x8_t)0));
  v718 = (uint16x8_t)vdupq_n_s16(0x2EDu);
  v719 = vdupq_n_s32(0x260BEDu);
  v720 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v907.i8, *(uint16x4_t *)v718.i8), *(uint16x4_t *)v915.i8, *(uint16x4_t *)v718.i8), v719);
  v721 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v907, v718), (uint16x8_t)v915, v718), v719);
  v722 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v720, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v720.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v720, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v721, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v721.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v721, v389), 0x18uLL), v390));
  v723 = vaddq_s16((int16x8_t)v722, v382);
  v724 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v723), v722), (int8x16_t)vmaxq_s16(v723, (int16x8_t)0));
  v725 = (int8x16_t)vaddq_s16(v908, (int16x8_t)v916);
  v726 = vaddq_s16((int16x8_t)v725, v382);
  v907 = (int16x8_t)v717;
  v908 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v726), v725), (int8x16_t)vmaxq_s16(v726, (int16x8_t)0));
  v727 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v714.i8, *(uint16x4_t *)v718.i8), *(uint16x4_t *)v916.i8, *(uint16x4_t *)v718.i8), v719);
  v728 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v714, v718), (uint16x8_t)v916, v718), v719);
  v729 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v727, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v727.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v727, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v728, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v728.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v728, v389), 0x18uLL), v390));
  v730 = vaddq_s16((int16x8_t)v729, v382);
  v915 = (int16x8_t)v724;
  v916 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v730), v729), (int8x16_t)vmaxq_s16(v730, (int16x8_t)0));
  v731 = (uint16x8_t)v910;
  v732 = (int8x16_t)vaddq_s16(v909, v917);
  v733 = vaddq_s16((int16x8_t)v732, v382);
  v734 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v733), v732), (int8x16_t)vmaxq_s16(v733, (int16x8_t)0));
  v735 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v909.i8, *(uint16x4_t *)v718.i8), *(uint16x4_t *)v917.i8, *(uint16x4_t *)v718.i8), v719);
  v736 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v909, v718), (uint16x8_t)v917, v718), v719);
  v737 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v735, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v735.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v735, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v736, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v736.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v736, v389), 0x18uLL), v390));
  v738 = vaddq_s16((int16x8_t)v737, v382);
  v739 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v738), v737), (int8x16_t)vmaxq_s16(v738, (int16x8_t)0));
  v740 = (int8x16_t)vaddq_s16((int16x8_t)v910, (int16x8_t)v918);
  v741 = vaddq_s16((int16x8_t)v740, v382);
  v909 = (int16x8_t)v734;
  v910 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v741), v740), (int8x16_t)vmaxq_s16(v741, (int16x8_t)0));
  v742 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v731.i8, *(uint16x4_t *)v718.i8), *(uint16x4_t *)v918.i8, *(uint16x4_t *)v718.i8), v719);
  v743 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v731, v718), (uint16x8_t)v918, v718), v719);
  v744 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v742, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v742.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v742, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v743, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v743.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v743, v389), 0x18uLL), v390));
  v745 = vaddq_s16((int16x8_t)v744, v382);
  v917 = (int16x8_t)v739;
  v918 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v745), v744), (int8x16_t)vmaxq_s16(v745, (int16x8_t)0));
  v746 = (uint16x8_t)v912;
  v747 = (int8x16_t)vaddq_s16(v911, v919);
  v748 = vaddq_s16((int16x8_t)v747, v382);
  v749 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v748), v747), (int8x16_t)vmaxq_s16(v748, (int16x8_t)0));
  v750 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v911.i8, *(uint16x4_t *)v718.i8), *(uint16x4_t *)v919.i8, *(uint16x4_t *)v718.i8), v719);
  v751 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v911, v718), (uint16x8_t)v919, v718), v719);
  v752 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v750, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v750.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v750, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v751, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v751.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v751, v389), 0x18uLL), v390));
  v753 = vaddq_s16((int16x8_t)v752, v382);
  v754 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v753), v752), (int8x16_t)vmaxq_s16(v753, (int16x8_t)0));
  v755 = (int8x16_t)vaddq_s16((int16x8_t)v912, (int16x8_t)v920);
  v756 = vaddq_s16((int16x8_t)v755, v382);
  v911 = (int16x8_t)v749;
  v912 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v756), v755), (int8x16_t)vmaxq_s16(v756, (int16x8_t)0));
  v757 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v746.i8, *(uint16x4_t *)v718.i8), *(uint16x4_t *)v920.i8, *(uint16x4_t *)v718.i8), v719);
  v758 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16(v746, v718), (uint16x8_t)v920, v718), v719);
  v759 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v757, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v757.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v757, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v758, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v758.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v758, v389), 0x18uLL), v390));
  v760 = vaddq_s16((int16x8_t)v759, v382);
  v919 = (int16x8_t)v754;
  v920 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v760), v759), (int8x16_t)vmaxq_s16(v760, (int16x8_t)0));
  v761 = (uint16x8_t)v914;
  v762 = (int8x16_t)vaddq_s16(v913, v921);
  v763 = vaddq_s16((int16x8_t)v762, v382);
  v764 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v763), v762), (int8x16_t)vmaxq_s16(v763, (int16x8_t)0));
  v765 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v913.i8, *(uint16x4_t *)v718.i8), *(uint16x4_t *)v921.i8, *(uint16x4_t *)v718.i8), v719);
  v766 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v913, v718), (uint16x8_t)v921, v718), v719);
  v767 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v765, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v765.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v765, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v766, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v766.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v766, v389), 0x18uLL), v390));
  v768 = vaddq_s16((int16x8_t)v767, v382);
  v769 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v768), v767), (int8x16_t)vmaxq_s16(v768, (int16x8_t)0));
  v770 = (int8x16_t)vaddq_s16((int16x8_t)v914, (int16x8_t)v922);
  v771 = vaddq_s16((int16x8_t)v770, v382);
  v913 = (int16x8_t)v764;
  v914 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v771), v770), (int8x16_t)vmaxq_s16(v771, (int16x8_t)0));
  v772 = (int32x4_t)vmlsl_high_u16(vmull_high_u16(v761, v718), (uint16x8_t)v922, v718);
  v773 = (uint32x4_t)vaddq_s32((int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v761.i8, *(uint16x4_t *)v718.i8), *(uint16x4_t *)v922.i8, *(uint16x4_t *)v718.i8), v719);
  v774 = (uint32x4_t)vaddq_s32(v772, v719);
  v775 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v773, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v773.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v773, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v774, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v774.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v774, v389), 0x18uLL), v390));
  v776 = vaddq_s16((int16x8_t)v775, v382);
  v921 = (int16x8_t)v769;
  v922 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v776), v775), (int8x16_t)vmaxq_s16(v776, (int16x8_t)0));
  do
  {
    v777 = (int8x16_t *)&__dst.i8[v379];
    v778 = *(int16x8_t *)((char *)&v907 + v379);
    v779 = *(int16x8_t *)((char *)&__dst + v379);
    v780 = (int8x16_t)vaddq_s16(v779, v778);
    v781 = vaddq_s16((int16x8_t)v780, v382);
    v782 = (uint16x8_t)vdupq_n_s16(0x640u);
    v783 = (int32x4_t)vmlsl_high_u16(vmull_high_u16((uint16x8_t)v779, v782), (uint16x8_t)v778, v782);
    v784 = (int32x4_t)vmlsl_u16(vmull_u16(*(uint16x4_t *)v779.i8, *(uint16x4_t *)v782.i8), *(uint16x4_t *)v778.i8, *(uint16x4_t *)v782.i8);
    v785 = vdupq_n_s32(0x514640u);
    v786 = (uint32x4_t)vaddq_s32(v784, v785);
    v787 = (uint32x4_t)vaddq_s32(v783, v785);
    v788 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlaq_s32((int32x4_t)v786, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v786.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v786, v389), 0x18uLL), v390), (int16x8_t)vmlaq_s32((int32x4_t)v787, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v787.i8, *(uint32x2_t *)v389.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v787, v389), 0x18uLL), v390));
    v789 = vaddq_s16((int16x8_t)v788, v382);
    *v777 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v781), v780), (int8x16_t)vmaxq_s16(v781, (int16x8_t)0));
    v777[16] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v789), v788), (int8x16_t)vmaxq_s16(v789, (int16x8_t)0));
    v379 += 16;
  }
  while (v379 != 256);
  v790 = 0;
  v791 = (uint16x8_t)vdupq_n_s16(0xCE7u);
  v792 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v793.i64[0] = 0xF2000000F2;
  v793.i64[1] = 0xF2000000F2;
  v794.i64[0] = 0xD000D000D000D00;
  v794.i64[1] = 0xD000D000D000D00;
  do
  {
    v795 = *(uint16x8_t *)((char *)&__dst + v790);
    v796 = vmull_u16(*(uint16x4_t *)v795.i8, *(uint16x4_t *)v791.i8);
    v797 = vmull_high_u16(v795, v791);
    v798 = (int8x16_t)vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v796.i8, *(uint32x2_t *)v792.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v796, v792), 0x18uLL), v793), *(uint16x4_t *)v795.i8, *(uint16x4_t *)v791.i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v797.i8,
                                                                    *(uint32x2_t *)v792.i8),
                                                       0x18uLL),
                                                     (int64x2_t)vmull_high_u32(v797, v792),
                                                     0x18uLL),
                                                   v793),
                                     v795,
                                     v791));
    v799 = vaddq_s16((int16x8_t)v798, v794);
    *(int8x16_t *)((char *)&__dst + v790) = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v799), v798), (int8x16_t)vmaxq_s16(v799, (int16x8_t)0));
    v790 += 16;
  }
  while (v790 != 512);
  v800 = 0;
  v801 = vdupq_n_s16(0xD01u);
  do
  {
    v802 = (int8x16_t *)&v868[v800];
    v803 = vsubq_s16((int16x8_t)v868[v800], *(int16x8_t *)((char *)&__dst + v800 * 16));
    v804 = vsubq_s16((int16x8_t)v868[v800 + 1], *(int16x8_t *)((char *)&__dst + v800 * 16 + 16));
    *v802 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v803), (int8x16_t)vaddq_s16(v803, v801)), (int8x16_t)vmaxq_s16(v803, (int16x8_t)0));
    v802[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v804), (int8x16_t)vaddq_s16(v804, v801)), (int8x16_t)vmaxq_s16(v804, (int16x8_t)0));
    v800 += 2;
  }
  while (v800 != 32);
  v805 = 0;
  v806 = (uint16x8_t)vdupq_n_s16(0x275Eu);
  v807 = (uint32x4_t)vdupq_n_s32(0x680u);
  v808.i64[0] = 0xD0000000D00;
  v808.i64[1] = 0xD0000000D00;
  v809 = (uint32x4_t)vdupq_n_s32(0x1381u);
  v810.i64[0] = 0x100000001000000;
  v810.i64[1] = 0x100000001000000;
  v811.i64[0] = 0x1000100010001;
  v811.i64[1] = 0x1000100010001;
  do
  {
    v812 = v868[v805];
    v813 = (int32x4_t)vshll_high_n_u16(v812, 1uLL);
    v814 = (int32x4_t)vshll_n_u16(*(uint16x4_t *)v812.i8, 1uLL);
    v815 = (int8x16_t)vmull_high_u16(v812, v806);
    v816 = (int8x16_t)vmull_u16(*(uint16x4_t *)v812.i8, *(uint16x4_t *)v806.i8);
    v817 = (uint32x4_t)vmlaq_s32(v814, (int32x4_t)vshrq_n_u32((uint32x4_t)v816, 0x18uLL), v808);
    v818 = (uint32x4_t)vmlaq_s32(v813, (int32x4_t)vshrq_n_u32((uint32x4_t)v815, 0x18uLL), v808);
    v868[v805++] = (uint16x8_t)vbicq_s8(v811, veorq_s8(veorq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v816, v810)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v815, v810))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v817, v807), (int16x8_t)vcgtq_u32(v818, v807))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_u32(v817, v809), (int16x8_t)vcgtq_u32(v818, v809))));
  }
  while (v805 != 32);
  v819 = 0;
  v820.i64[0] = 0x101010101010101;
  v820.i64[1] = 0x101010101010101;
  v821 = &v868[8];
  v822.i64[0] = 0x202020202020202;
  v822.i64[1] = 0x202020202020202;
  v823.i64[0] = 0x404040404040404;
  v823.i64[1] = 0x404040404040404;
  v824.i64[0] = 0x808080808080808;
  v824.i64[1] = 0x808080808080808;
  v825.i64[0] = 0x1010101010101010;
  v825.i64[1] = 0x1010101010101010;
  v826.i64[0] = 0x2020202020202020;
  v826.i64[1] = 0x2020202020202020;
  v827.i64[0] = 0x4040404040404040;
  v827.i64[1] = 0x4040404040404040;
  do
  {
    v828.i8[0] = v821[-8].i8[0];
    v828.i8[1] = v821[-7].i8[0];
    v829.i8[0] = v821[-8].i8[2];
    v829.i8[1] = v821[-7].i8[2];
    v828.i8[2] = v821[-6].i8[0];
    v829.i8[2] = v821[-6].i8[2];
    v828.i8[3] = v821[-5].i8[0];
    v829.i8[3] = v821[-5].i8[2];
    v828.i8[4] = v821[-4].i8[0];
    v830.i8[0] = v821[-8].i8[4];
    v829.i8[4] = v821[-4].i8[2];
    v830.i8[1] = v821[-7].i8[4];
    v828.i8[5] = v821[-3].i8[0];
    v830.i8[2] = v821[-6].i8[4];
    v829.i8[5] = v821[-3].i8[2];
    v830.i8[3] = v821[-5].i8[4];
    v828.i8[6] = v821[-2].i8[0];
    v830.i8[4] = v821[-4].i8[4];
    v829.i8[6] = v821[-2].i8[2];
    v830.i8[5] = v821[-3].i8[4];
    v828.i8[7] = v821[-1].i8[0];
    v830.i8[6] = v821[-2].i8[4];
    v829.i8[7] = v821[-1].i8[2];
    v831.i8[0] = v821[-8].i8[6];
    v831.i8[1] = v821[-7].i8[6];
    v830.i8[7] = v821[-1].i8[4];
    v831.i8[2] = v821[-6].i8[6];
    v828.i8[8] = v821->i8[0];
    v831.i8[3] = v821[-5].i8[6];
    v829.i8[8] = v821->i8[2];
    v831.i8[4] = v821[-4].i8[6];
    v830.i8[8] = v821->i8[4];
    v831.i8[5] = v821[-3].i8[6];
    v828.i8[9] = v821[1].i8[0];
    v831.i8[6] = v821[-2].i8[6];
    v829.i8[9] = v821[1].i8[2];
    v831.i8[7] = v821[-1].i8[6];
    v830.i8[9] = v821[1].i8[4];
    v831.i8[8] = v821->i8[6];
    v828.i8[10] = v821[2].i8[0];
    v831.i8[9] = v821[1].i8[6];
    v829.i8[10] = v821[2].i8[2];
    v832.i8[0] = v821[-8].i8[8];
    v832.i8[1] = v821[-7].i8[8];
    v830.i8[10] = v821[2].i8[4];
    v832.i8[2] = v821[-6].i8[8];
    v831.i8[10] = v821[2].i8[6];
    v832.i8[3] = v821[-5].i8[8];
    v828.i8[11] = v821[3].i8[0];
    v832.i8[4] = v821[-4].i8[8];
    v829.i8[11] = v821[3].i8[2];
    v832.i8[5] = v821[-3].i8[8];
    v830.i8[11] = v821[3].i8[4];
    v832.i8[6] = v821[-2].i8[8];
    v831.i8[11] = v821[3].i8[6];
    v832.i8[7] = v821[-1].i8[8];
    v828.i8[12] = v821[4].i8[0];
    v832.i8[8] = v821->i8[8];
    v829.i8[12] = v821[4].i8[2];
    v832.i8[9] = v821[1].i8[8];
    v830.i8[12] = v821[4].i8[4];
    v832.i8[10] = v821[2].i8[8];
    v831.i8[12] = v821[4].i8[6];
    v832.i8[11] = v821[3].i8[8];
    v828.i8[13] = v821[5].i8[0];
    v832.i8[12] = v821[4].i8[8];
    v829.i8[13] = v821[5].i8[2];
    v833.i8[0] = v821[-8].i8[10];
    v830.i8[13] = v821[5].i8[4];
    v833.i8[1] = v821[-7].i8[10];
    v831.i8[13] = v821[5].i8[6];
    v833.i8[2] = v821[-6].i8[10];
    v832.i8[13] = v821[5].i8[8];
    v833.i8[3] = v821[-5].i8[10];
    v828.i8[14] = v821[6].i8[0];
    v833.i8[4] = v821[-4].i8[10];
    v829.i8[14] = v821[6].i8[2];
    v833.i8[5] = v821[-3].i8[10];
    v830.i8[14] = v821[6].i8[4];
    v833.i8[6] = v821[-2].i8[10];
    v831.i8[14] = v821[6].i8[6];
    v833.i8[7] = v821[-1].i8[10];
    v833.i8[8] = v821->i8[10];
    v832.i8[14] = v821[6].i8[8];
    v833.i8[9] = v821[1].i8[10];
    v833.i8[10] = v821[2].i8[10];
    v828.i8[15] = v821[7].i8[0];
    v833.i8[11] = v821[3].i8[10];
    v833.i8[12] = v821[4].i8[10];
    v829.i8[15] = v821[7].i8[2];
    v833.i8[13] = v821[5].i8[10];
    v830.i8[15] = v821[7].i8[4];
    v833.i8[14] = v821[6].i8[10];
    v831.i8[15] = v821[7].i8[6];
    v832.i8[15] = v821[7].i8[8];
    v834.i8[0] = v821[-8].i8[12];
    v834.i8[1] = v821[-7].i8[12];
    v833.i8[15] = v821[7].i8[10];
    v834.i8[2] = v821[-6].i8[12];
    v834.i8[3] = v821[-5].i8[12];
    v834.i8[4] = v821[-4].i8[12];
    v834.i8[5] = v821[-3].i8[12];
    v834.i8[6] = v821[-2].i8[12];
    v834.i8[7] = v821[-1].i8[12];
    v834.i8[8] = v821->i8[12];
    v834.i8[9] = v821[1].i8[12];
    v834.i8[10] = v821[2].i8[12];
    v834.i8[11] = v821[3].i8[12];
    v834.i8[12] = v821[4].i8[12];
    v834.i8[13] = v821[5].i8[12];
    v834.i8[14] = v821[6].i8[12];
    v834.i8[15] = v821[7].i8[12];
    v835.i8[0] = v821[-8].i8[14];
    v835.i8[1] = v821[-7].i8[14];
    v835.i8[2] = v821[-6].i8[14];
    v835.i8[3] = v821[-5].i8[14];
    v835.i8[4] = v821[-4].i8[14];
    v835.i8[5] = v821[-3].i8[14];
    v835.i8[6] = v821[-2].i8[14];
    v835.i8[7] = v821[-1].i8[14];
    v835.i8[8] = v821->i8[14];
    v835.i8[9] = v821[1].i8[14];
    v835.i8[10] = v821[2].i8[14];
    v835.i8[11] = v821[3].i8[14];
    v835.i8[12] = v821[4].i8[14];
    v835.i8[13] = v821[5].i8[14];
    v835.i8[14] = v821[6].i8[14];
    v835.i8[15] = v821[7].i8[14];
    *(int8x16_t *)&v888[v819] = vorrq_s8(vorrq_s8(vorrq_s8(vorrq_s8(vandq_s8(vaddq_s8(v829, v829), v822), vandq_s8(v828, v820)), vorrq_s8(vandq_s8(vshlq_n_s8(v830, 2uLL), v823), vandq_s8(vshlq_n_s8(v831, 3uLL), v824))), vorrq_s8(vorrq_s8(vandq_s8(vshlq_n_s8(v832, 4uLL), v825), vandq_s8(vshlq_n_s8(v833, 5uLL), v826)), vandq_s8(vshlq_n_s8(v834, 6uLL), v827))), vshlq_n_s8(v835, 7uLL));
    v819 += 16;
    v821 += 16;
  }
  while (v819 != 32);
  v836 = a3[99];
  v889 = a3[98];
  v890 = v836;
  *(int16x8_t *)((char *)&v923[13] + 8) = 0u;
  memset(&v923[0].u64[1], 0, 200);
  v923[0].i64[0] = 1;
  v923[13].i64[0] = 72;
  BORINGSSL_keccak_absorb((uint64_t)v923, v888, 0x40uLL);
  BORINGSSL_keccak_squeeze(v923, __dst.i8, 0x40uLL);
  encrypt_cpa((uint64_t)v923, (uint64_t)a3);
  v837 = 0uLL;
  v838 = 0;
  v839 = 0uLL;
  do
  {
    v837 = vorrq_s8(veorq_s8((int8x16_t)v923[v838], *(int8x16_t *)&a2[v838 * 16]), v837);
    v839 = vorrq_s8(veorq_s8((int8x16_t)v923[v838 + 1], *(int8x16_t *)&a2[v838 * 16 + 16]), v839);
    v838 += 2;
  }
  while (v838 != 68);
  v840 = vorrq_s8(v839, v837);
  v841 = 255;
  v842 = vmovl_u8(*(uint8x8_t *)__dst.i8);
  v843 = (int8x16_t)vmovl_high_u16(v842);
  v844 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v842.i8);
  if (vorr_s8(*(int8x8_t *)v840.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v840, v840, 8uLL)))
    v841 = 0;
  v845 = vmovl_high_u8((uint8x16_t)__dst);
  v846 = a3[484];
  v847 = (int8x16_t)vdupq_n_s32(v841);
  v848 = vmovl_u8(*(uint8x8_t *)v846.i8);
  v849 = vmovl_high_u8(v846);
  v850 = (int8x16_t)vdupq_n_s32(~v841);
  v851 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8(v850, (int8x16_t)vmovl_u16(*(uint16x4_t *)v848.i8)), vandq_s8(v847, v844)), (int16x8_t)vorrq_s8(vandq_s8(v850, (int8x16_t)vmovl_high_u16(v848)), vandq_s8(v847, v843))), (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8(v850, (int8x16_t)vmovl_u16(*(uint16x4_t *)v849.i8)), vandq_s8(v847, (int8x16_t)vmovl_u16(*(uint16x4_t *)v845.i8))), (int16x8_t)vorrq_s8(vandq_s8(v850, (int8x16_t)vmovl_high_u16(v849)), vandq_s8(v847, (int8x16_t)vmovl_high_u16(v845)))));
  v852 = a3[485];
  v853 = vmovl_u8(*(uint8x8_t *)v892.i8);
  v854 = (int8x16_t)vmovl_high_u16(v853);
  v855 = vmovl_high_u8((uint8x16_t)v892);
  v856 = (int8x16_t)vmovl_high_u16(v855);
  v857 = vandq_s8(v847, (int8x16_t)vmovl_u16(*(uint16x4_t *)v855.i8));
  v858 = vandq_s8(v847, v856);
  v859 = vandq_s8(v847, (int8x16_t)vmovl_u16(*(uint16x4_t *)v853.i8));
  v860 = vandq_s8(v847, v854);
  v861 = vmovl_u8(*(uint8x8_t *)v852.i8);
  v862 = vmovl_high_u8(v852);
  v886[0] = v851;
  v886[1] = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8(v850, (int8x16_t)vmovl_u16(*(uint16x4_t *)v861.i8)), v859), (int16x8_t)vorrq_s8(vandq_s8(v850, (int8x16_t)vmovl_high_u16(v861)), v860)), (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8(vandq_s8(v850, (int8x16_t)vmovl_u16(*(uint16x4_t *)v862.i8)), v857), (int16x8_t)vorrq_s8(vandq_s8(v850, (int8x16_t)vmovl_high_u16(v862)), v858)));
  memset(v868, 0, 208);
  v868[14].i64[0] = 0;
  v868[13] = (uint16x8_t)0x88uLL;
  BORINGSSL_keccak_absorb((uint64_t)v868, (char *)a2, 0x440uLL);
  BORINGSSL_keccak_squeeze(v868, v887, 0x20uLL);
  *(uint16x8_t *)((char *)&v868[13] + 8) = 0u;
  memset(&v868[0].u64[1], 0, 200);
  v868[0].i64[0] = 3;
  v868[13].i64[0] = 136;
  BORINGSSL_keccak_absorb((uint64_t)v868, (char *)v886, 0x40uLL);
  return BORINGSSL_keccak_squeeze(v868, a1, 0x20uLL);
}

uint64_t KYBER_parse_public_key(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  unsigned __int8 *v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  unsigned __int8 *v10;
  __int128 v11;
  _OWORD v12[14];
  uint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 < 0x480)
    return 0;
  v6 = *(unsigned __int8 **)a2;
  *(_QWORD *)a2 += 1152;
  *(_QWORD *)(a2 + 8) = v2 - 1152;
  result = vector_decode((void *)a1, v6, 12);
  if ((_DWORD)result)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = v7 >= 0x20;
    v9 = v7 - 32;
    if (v8
      && (v10 = *(unsigned __int8 **)a2,
          *(_QWORD *)a2 += 32,
          *(_QWORD *)(a2 + 8) = v9,
          v11 = *(_OWORD *)v10,
          *(_OWORD *)(a1 + 1552) = *((_OWORD *)v10 + 1),
          *(_OWORD *)(a1 + 1536) = v11,
          matrix_expand(a1 + 1600, (_OWORD *)(a1 + 1536)),
          !*(_QWORD *)(a2 + 8)))
    {
      memset(v12, 0, 208);
      v13 = 0;
      v12[13] = 0x88uLL;
      BORINGSSL_keccak_absorb((uint64_t)v12, (char *)v6, v2);
      BORINGSSL_keccak_squeeze(v12, (char *)(a1 + 1568), 0x20uLL);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t vector_encode(_BYTE *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  _BYTE *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  _BYTE *v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  _BYTE *v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  int v27;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = a1;
  do
  {
    v7 = 0;
    v8 = *(unsigned __int16 *)(a2 + 2 * v3);
    while (1)
    {
      v9 = a3 - (uint64_t)v7;
      v10 = 8 - v4;
      if ((int)v9 < 8 - v4)
        break;
      *v6++ = v5 | ((v8 & kMasks[7 - v4]) << v4);
      v5 = 0;
      v4 = 0;
      v7 += v10;
      LOBYTE(v8) = v8 >> v10;
      if (v7 >= a3)
        goto LABEL_2;
    }
    v5 |= (v8 & kMasks[v9 - 1]) << v4;
    v4 += v9;
LABEL_2:
    ++v3;
  }
  while (v3 != 256);
  if (v4 >= 1)
    *v6 = v5;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = &a1[32 * a3];
  do
  {
    v15 = 0;
    v16 = *(unsigned __int16 *)(a2 + 512 + 2 * v11);
    while (1)
    {
      v17 = a3 - (uint64_t)v15;
      v18 = 8 - v12;
      if ((int)v17 < 8 - v12)
        break;
      *v14++ = v13 | ((v16 & kMasks[7 - v12]) << v12);
      v13 = 0;
      v12 = 0;
      v15 += v18;
      LOBYTE(v16) = v16 >> v18;
      if (v15 >= a3)
        goto LABEL_11;
    }
    v13 |= (v16 & kMasks[v17 - 1]) << v12;
    v12 += v17;
LABEL_11:
    ++v11;
  }
  while (v11 != 256);
  if (v12 >= 1)
    *v14 = v13;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = &a1[a3 << 6];
  v23 = a2 + 1024;
  do
  {
    v24 = 0;
    LODWORD(result) = *(unsigned __int16 *)(v23 + 2 * v19);
    while (1)
    {
      v26 = a3 - (uint64_t)v24;
      v27 = 8 - v20;
      if ((int)v26 < 8 - v20)
        break;
      *v22++ = v21 | ((result & kMasks[7 - v20]) << v20);
      v21 = 0;
      v20 = 0;
      v24 += v27;
      result = (unsigned __int16)(result >> v27);
      if (v24 >= a3)
        goto LABEL_20;
    }
    v21 |= (result & kMasks[v26 - 1]) << v20;
    v20 += v26;
    result = (unsigned __int16)(result >> v26);
LABEL_20:
    ++v19;
  }
  while (v19 != 256);
  if (v20 >= 1)
    *v22 = v21;
  return result;
}

uint64_t vector_decode(void *a1, unsigned __int8 *a2, int a3)
{
  unint64_t v3;
  BOOL v4;
  int v5;
  unsigned int v6;
  unsigned __int8 *v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  unsigned __int8 *v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;

  if (a3 < 1)
  {
    bzero(a1, 0x600uLL);
    return 1;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = 0;
      v9 = 0;
      do
      {
        if (!v5)
        {
          v11 = *v7++;
          v6 = v11;
          v5 = 8;
        }
        v10 = a3 - v8;
        if (a3 - v8 >= v5)
          v10 = v5;
        v9 |= (unsigned __int16)((kMasks[v10 - 1] & v6) << v8);
        v5 -= v10;
        v6 = (v6 >> v10);
        v8 += v10;
      }
      while (v8 < a3);
      if (v9 > 0xD00)
        break;
      *((_WORD *)a1 + v3) = v9;
      v4 = v3++ > 0xFE;
    }
    while (v3 != 256);
    if (!v4)
      return 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = &a2[32 * a3];
    do
    {
      v17 = 0;
      v18 = 0;
      do
      {
        if (!v14)
        {
          v20 = *v16++;
          v15 = v20;
          v14 = 8;
        }
        v19 = a3 - v17;
        if (a3 - v17 >= v14)
          v19 = v14;
        v18 |= (unsigned __int16)((kMasks[v19 - 1] & v15) << v17);
        v14 -= v19;
        v15 = (v15 >> v19);
        v17 += v19;
      }
      while (v17 < a3);
      if (v18 > 0xD00)
        break;
      *((_WORD *)a1 + v12 + 256) = v18;
      v13 = v12++ > 0xFE;
    }
    while (v12 != 256);
    if (v13)
    {
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v25 = &a2[64 * a3];
      do
      {
        v26 = 0;
        v27 = 0;
        do
        {
          if (!v23)
          {
            v29 = *v25++;
            v24 = v29;
            v23 = 8;
          }
          v28 = a3 - v26;
          if (a3 - v26 >= v23)
            v28 = v23;
          v27 |= (unsigned __int16)((kMasks[v28 - 1] & v24) << v26);
          v23 -= v28;
          v24 = (v24 >> v28);
          v26 += v28;
        }
        while (v26 < a3);
        if (v27 > 0xD00)
          break;
        *((_WORD *)a1 + v21 + 512) = v27;
        v22 = v21++ > 0xFE;
      }
      while (v21 != 256);
      return v22;
    }
    else
    {
      return 0;
    }
  }
}

_OWORD *scalar_inner_product(_OWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int128 *v4;
  uint32x4_t v5;
  int32x4_t v6;
  int16x8_t v7;
  const __int16 *v8;
  const __int16 *v9;
  uint32x4_t v10;
  uint32x4_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  uint32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int16x8_t v23;
  int8x16_t v24;
  __int16 *v25;
  uint64_t v26;
  int16x8_t v27;
  int8x16_t *v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  uint64_t v33;
  __int128 *v34;
  uint32x4_t v35;
  int32x4_t v36;
  int16x8_t v37;
  const __int16 *v38;
  const __int16 *v39;
  uint32x4_t v40;
  uint32x4_t v41;
  int16x8_t v42;
  int16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int16x8_t v53;
  int8x16_t v54;
  __int16 *v55;
  uint64_t v56;
  int16x8_t v57;
  int8x16_t *v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  uint64_t v63;
  __int128 *v64;
  uint32x4_t v65;
  int32x4_t v66;
  int16x8_t v67;
  const __int16 *v68;
  const __int16 *v69;
  uint32x4_t v70;
  uint32x4_t v71;
  int16x8_t v72;
  int16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int16x8_t v79;
  int16x8_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int16x8_t v83;
  int8x16_t v84;
  __int16 *v85;
  uint64_t v86;
  int16x8_t v87;
  int8x16_t *v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  int16x8x2_t v125;
  int16x8x2_t v126;
  int16x8x2_t v127;
  int16x8x2_t v128;
  int16x8x2_t v129;
  int16x8x2_t v130;

  v3 = 0;
  result[30] = 0u;
  result[31] = 0u;
  result[28] = 0u;
  result[29] = 0u;
  result[26] = 0u;
  result[27] = 0u;
  result[24] = 0u;
  result[25] = 0u;
  result[22] = 0u;
  result[23] = 0u;
  result[20] = 0u;
  result[21] = 0u;
  result[18] = 0u;
  result[19] = 0u;
  result[16] = 0u;
  result[17] = 0u;
  result[14] = 0u;
  result[15] = 0u;
  result[12] = 0u;
  result[13] = 0u;
  result[10] = 0u;
  result[11] = 0u;
  result[8] = 0u;
  result[9] = 0u;
  result[6] = 0u;
  result[7] = 0u;
  result[4] = 0u;
  result[5] = 0u;
  result[2] = 0u;
  result[3] = 0u;
  *result = 0u;
  result[1] = 0u;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v4 = &kModRoots;
  v5 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v95 = 0u;
  v96 = 0u;
  v6.i64[0] = 0xF2000000F2;
  v6.i64[1] = 0xF2000000F2;
  v7.i64[0] = 0xD000D000D000D00;
  v7.i64[1] = 0xD000D000D000D00;
  v93 = 0u;
  v94 = 0u;
  do
  {
    v8 = (const __int16 *)(a2 + v3);
    v125 = vld2q_s16(v8);
    v9 = (const __int16 *)(a3 + v3);
    v128 = vld2q_s16(v9);
    v10 = vmull_u16(*(uint16x4_t *)v128.val[1].i8, *(uint16x4_t *)v125.val[1].i8);
    v11 = vmull_high_u16((uint16x8_t)v128.val[1], (uint16x8_t)v125.val[1]);
    v12 = vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v10.i8, *(uint32x2_t *)v5.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v10, v5), 0x18uLL), v6), *(uint16x4_t *)v128.val[1].i8, *(uint16x4_t *)v125.val[1].i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v11.i8, *(uint32x2_t *)v5.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v11, v5), 0x18uLL),
                                       v6),
                         (uint16x8_t)v128.val[1],
                         (uint16x8_t)v125.val[1]));
    v13 = vaddq_s16(v12, v7);
    v14 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v13), (int8x16_t)v12), (int8x16_t)vmaxq_s16(v13, (int16x8_t)0));
    v15 = (uint16x8_t)*v4++;
    v16 = vmull_high_u16(v14, v15);
    v17 = (int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v14.i8, *(uint16x4_t *)v15.i8), *(uint16x4_t *)v128.val[0].i8, *(uint16x4_t *)v125.val[0].i8);
    v18 = (int32x4_t)vmlal_high_u16(v16, (uint16x8_t)v128.val[0], (uint16x8_t)v125.val[0]);
    v19 = vuzp1q_s16((int16x8_t)vmlaq_s32(v17, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v17.i8, *(uint32x2_t *)v5.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v17, v5), 0x18uLL), v6), (int16x8_t)vmlaq_s32(v18, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v18.i8, *(uint32x2_t *)v5.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v18, v5), 0x18uLL), v6));
    v20 = vaddq_s16(v19, v7);
    v21 = (int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v128.val[1].i8, *(uint16x4_t *)v125.val[0].i8), *(uint16x4_t *)v125.val[1].i8, *(uint16x4_t *)v128.val[0].i8);
    v22 = (int32x4_t)vmlal_high_u16(vmull_high_u16((uint16x8_t)v128.val[1], (uint16x8_t)v125.val[0]), (uint16x8_t)v125.val[1], (uint16x8_t)v128.val[0]);
    v23 = vuzp1q_s16((int16x8_t)vmlaq_s32(v21, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v21.i8, *(uint32x2_t *)v5.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v21, v5), 0x18uLL), v6), (int16x8_t)vmlaq_s32(v22, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v22.i8, *(uint32x2_t *)v5.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v22, v5), 0x18uLL), v6));
    v24 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v20), (int8x16_t)v19), (int8x16_t)vmaxq_s16(v20, (int16x8_t)0));
    v125.val[1] = vaddq_s16(v23, v7);
    v125.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v125.val[1]), (int8x16_t)v23), (int8x16_t)vmaxq_s16(v125.val[1], (int16x8_t)0));
    v25 = (__int16 *)((char *)&v93 + v3);
    vst2q_s16(v25, v125);
    v3 += 32;
  }
  while (v3 != 512);
  v26 = 0;
  v27.i64[0] = 0xD000D000D000D00;
  v27.i64[1] = 0xD000D000D000D00;
  do
  {
    v28 = (int8x16_t *)&result[v26];
    v29 = vaddq_s16(*(int16x8_t *)((char *)&v93 + v26 * 16), (int16x8_t)result[v26]);
    v30 = vaddq_s16(*(int16x8_t *)((char *)&v93 + v26 * 16 + 16), (int16x8_t)result[v26 + 1]);
    v31 = vaddq_s16(v29, v27);
    v32 = vaddq_s16(v30, v27);
    *v28 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v31), (int8x16_t)v29), (int8x16_t)vmaxq_s16(v31, (int16x8_t)0));
    v28[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v32), (int8x16_t)v30), (int8x16_t)vmaxq_s16(v32, (int16x8_t)0));
    v26 += 2;
  }
  while (v26 != 32);
  v33 = 0;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v34 = &kModRoots;
  v35 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v36.i64[0] = 0xF2000000F2;
  v36.i64[1] = 0xF2000000F2;
  v37.i64[0] = 0xD000D000D000D00;
  v37.i64[1] = 0xD000D000D000D00;
  v93 = 0u;
  v94 = 0u;
  do
  {
    v38 = (const __int16 *)(a2 + 512 + v33);
    v126 = vld2q_s16(v38);
    v39 = (const __int16 *)(a3 + 512 + v33);
    v129 = vld2q_s16(v39);
    v40 = vmull_u16(*(uint16x4_t *)v129.val[1].i8, *(uint16x4_t *)v126.val[1].i8);
    v41 = vmull_high_u16((uint16x8_t)v129.val[1], (uint16x8_t)v126.val[1]);
    v42 = vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v40.i8, *(uint32x2_t *)v35.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v40, v35), 0x18uLL), v36), *(uint16x4_t *)v129.val[1].i8, *(uint16x4_t *)v126.val[1].i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v41.i8, *(uint32x2_t *)v35.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v41, v35), 0x18uLL),
                                       v36),
                         (uint16x8_t)v129.val[1],
                         (uint16x8_t)v126.val[1]));
    v43 = vaddq_s16(v42, v37);
    v44 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v43), (int8x16_t)v42), (int8x16_t)vmaxq_s16(v43, (int16x8_t)0));
    v45 = (uint16x8_t)*v34++;
    v46 = vmull_high_u16(v44, v45);
    v47 = (int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v44.i8, *(uint16x4_t *)v45.i8), *(uint16x4_t *)v129.val[0].i8, *(uint16x4_t *)v126.val[0].i8);
    v48 = (int32x4_t)vmlal_high_u16(v46, (uint16x8_t)v129.val[0], (uint16x8_t)v126.val[0]);
    v49 = vuzp1q_s16((int16x8_t)vmlaq_s32(v47, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v47.i8, *(uint32x2_t *)v35.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v47, v35), 0x18uLL), v36), (int16x8_t)vmlaq_s32(v48, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v48.i8, *(uint32x2_t *)v35.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v48, v35), 0x18uLL), v36));
    v50 = vaddq_s16(v49, v37);
    v51 = (int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v129.val[1].i8, *(uint16x4_t *)v126.val[0].i8), *(uint16x4_t *)v126.val[1].i8, *(uint16x4_t *)v129.val[0].i8);
    v52 = (int32x4_t)vmlal_high_u16(vmull_high_u16((uint16x8_t)v129.val[1], (uint16x8_t)v126.val[0]), (uint16x8_t)v126.val[1], (uint16x8_t)v129.val[0]);
    v53 = vuzp1q_s16((int16x8_t)vmlaq_s32(v51, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v51.i8, *(uint32x2_t *)v35.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v51, v35), 0x18uLL), v36), (int16x8_t)vmlaq_s32(v52, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v52.i8, *(uint32x2_t *)v35.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v52, v35), 0x18uLL), v36));
    v54 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v50), (int8x16_t)v49), (int8x16_t)vmaxq_s16(v50, (int16x8_t)0));
    v126.val[1] = vaddq_s16(v53, v37);
    v126.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v126.val[1]), (int8x16_t)v53), (int8x16_t)vmaxq_s16(v126.val[1], (int16x8_t)0));
    v55 = (__int16 *)((char *)&v93 + v33);
    vst2q_s16(v55, v126);
    v33 += 32;
  }
  while (v33 != 512);
  v56 = 0;
  v57.i64[0] = 0xD000D000D000D00;
  v57.i64[1] = 0xD000D000D000D00;
  do
  {
    v58 = (int8x16_t *)&result[v56];
    v59 = vaddq_s16(*(int16x8_t *)((char *)&v93 + v56 * 16), (int16x8_t)result[v56]);
    v60 = vaddq_s16(*(int16x8_t *)((char *)&v93 + v56 * 16 + 16), (int16x8_t)result[v56 + 1]);
    v61 = vaddq_s16(v59, v57);
    v62 = vaddq_s16(v60, v57);
    *v58 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v61), (int8x16_t)v59), (int8x16_t)vmaxq_s16(v61, (int16x8_t)0));
    v58[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v62), (int8x16_t)v60), (int8x16_t)vmaxq_s16(v62, (int16x8_t)0));
    v56 += 2;
  }
  while (v56 != 32);
  v63 = 0;
  v123 = 0u;
  v124 = 0u;
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v64 = &kModRoots;
  v65 = (uint32x4_t)vdupq_n_s32(0x13AFu);
  v66.i64[0] = 0xF2000000F2;
  v66.i64[1] = 0xF2000000F2;
  v67.i64[0] = 0xD000D000D000D00;
  v67.i64[1] = 0xD000D000D000D00;
  v93 = 0u;
  v94 = 0u;
  do
  {
    v68 = (const __int16 *)(a2 + 1024 + v63);
    v127 = vld2q_s16(v68);
    v69 = (const __int16 *)(a3 + 1024 + v63);
    v130 = vld2q_s16(v69);
    v70 = vmull_u16(*(uint16x4_t *)v130.val[1].i8, *(uint16x4_t *)v127.val[1].i8);
    v71 = vmull_high_u16((uint16x8_t)v130.val[1], (uint16x8_t)v127.val[1]);
    v72 = vuzp1q_s16((int16x8_t)vmlal_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v70.i8, *(uint32x2_t *)v65.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v70, v65), 0x18uLL), v66), *(uint16x4_t *)v130.val[1].i8, *(uint16x4_t *)v127.val[1].i8), (int16x8_t)vmlal_high_u16((uint32x4_t)vmulq_s32(vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v71.i8, *(uint32x2_t *)v65.i8), 0x18uLL), (int64x2_t)vmull_high_u32(v71, v65), 0x18uLL),
                                       v66),
                         (uint16x8_t)v130.val[1],
                         (uint16x8_t)v127.val[1]));
    v73 = vaddq_s16(v72, v67);
    v74 = (uint16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v73), (int8x16_t)v72), (int8x16_t)vmaxq_s16(v73, (int16x8_t)0));
    v75 = (uint16x8_t)*v64++;
    v76 = vmull_high_u16(v74, v75);
    v77 = (int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v74.i8, *(uint16x4_t *)v75.i8), *(uint16x4_t *)v130.val[0].i8, *(uint16x4_t *)v127.val[0].i8);
    v78 = (int32x4_t)vmlal_high_u16(v76, (uint16x8_t)v130.val[0], (uint16x8_t)v127.val[0]);
    v79 = vuzp1q_s16((int16x8_t)vmlaq_s32(v77, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v77.i8, *(uint32x2_t *)v65.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v77, v65), 0x18uLL), v66), (int16x8_t)vmlaq_s32(v78, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v78.i8, *(uint32x2_t *)v65.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v78, v65), 0x18uLL), v66));
    v80 = vaddq_s16(v79, v67);
    v81 = (int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v130.val[1].i8, *(uint16x4_t *)v127.val[0].i8), *(uint16x4_t *)v127.val[1].i8, *(uint16x4_t *)v130.val[0].i8);
    v82 = (int32x4_t)vmlal_high_u16(vmull_high_u16((uint16x8_t)v130.val[1], (uint16x8_t)v127.val[0]), (uint16x8_t)v127.val[1], (uint16x8_t)v130.val[0]);
    v83 = vuzp1q_s16((int16x8_t)vmlaq_s32(v81, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v81.i8, *(uint32x2_t *)v65.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v81, v65), 0x18uLL), v66), (int16x8_t)vmlaq_s32(v82, vshrn_high_n_s64(vshrn_n_s64((int64x2_t)vmull_u32(*(uint32x2_t *)v82.i8, *(uint32x2_t *)v65.i8), 0x18uLL), (int64x2_t)vmull_high_u32((uint32x4_t)v82, v65), 0x18uLL), v66));
    v84 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v80), (int8x16_t)v79), (int8x16_t)vmaxq_s16(v80, (int16x8_t)0));
    v127.val[1] = vaddq_s16(v83, v67);
    v127.val[0] = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v127.val[1]), (int8x16_t)v83), (int8x16_t)vmaxq_s16(v127.val[1], (int16x8_t)0));
    v85 = (__int16 *)((char *)&v93 + v63);
    vst2q_s16(v85, v127);
    v63 += 32;
  }
  while (v63 != 512);
  v86 = 0;
  v87.i64[0] = 0xD000D000D000D00;
  v87.i64[1] = 0xD000D000D000D00;
  do
  {
    v88 = (int8x16_t *)&result[v86];
    v89 = vaddq_s16(*(int16x8_t *)((char *)&v93 + v86 * 16), (int16x8_t)result[v86]);
    v90 = vaddq_s16(*(int16x8_t *)((char *)&v93 + v86 * 16 + 16), (int16x8_t)result[v86 + 1]);
    v91 = vaddq_s16(v89, v87);
    v92 = vaddq_s16(v90, v87);
    *v88 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v91), (int8x16_t)v89), (int8x16_t)vmaxq_s16(v91, (int16x8_t)0));
    v88[1] = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(v92), (int8x16_t)v90), (int8x16_t)vmaxq_s16(v92, (int16x8_t)0));
    v86 += 2;
  }
  while (v86 != 32);
  return result;
}

char *OPENSSL_lh_new(uint64_t a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  v4 = (char *)malloc_type_malloc(0x38uLL, 0x30772F57uLL);
  if (v4)
  {
    v5 = v4;
    *(_QWORD *)v4 = 48;
    *(_OWORD *)(v4 + 8) = 0u;
    v6 = v4 + 8;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_OWORD *)(v4 + 40) = 0u;
    *((_QWORD *)v4 + 3) = 16;
    v7 = (char *)malloc_type_malloc(0x88uLL, 0x30772F57uLL);
    if (v7)
    {
      *(_QWORD *)v7 = 128;
      *(_OWORD *)(v7 + 24) = 0u;
      *(_OWORD *)(v7 + 40) = 0u;
      *(_OWORD *)(v7 + 56) = 0u;
      *(_OWORD *)(v7 + 72) = 0u;
      *(_OWORD *)(v7 + 88) = 0u;
      *(_OWORD *)(v7 + 104) = 0u;
      *(_OWORD *)(v7 + 120) = 0u;
      *(_OWORD *)(v7 + 8) = 0u;
      v5[2] = v7 + 8;
      v5[5] = a2;
      v5[6] = a1;
      return v6;
    }
    else
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      if (*v5 != -8)
        __memset_chk();
      free(v5);
      return 0;
    }
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

void OPENSSL_lh_free(_QWORD *a1)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  size_t v13;

  if (a1)
  {
    v2 = a1[2];
    if (v2)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD *)(a1[1] + 8 * i);
        if (v4)
        {
          do
          {
            v6 = (void *)(v4 - 8);
            v5 = *(_QWORD *)(v4 - 8);
            v4 = *(_QWORD *)(v4 + 8);
            if (v5 != -8)
              bzero(v6, v5 + 8);
            free(v6);
          }
          while (v4);
          v2 = a1[2];
        }
      }
    }
    v7 = a1[1];
    if (v7)
    {
      v9 = *(_QWORD *)(v7 - 8);
      v8 = (void *)(v7 - 8);
      v10 = v9 + 8;
      if (v9 != -8)
        bzero(v8, v10);
      free(v8);
    }
    v12 = *(a1 - 1);
    v11 = (char *)(a1 - 1);
    v13 = v12 + 8;
    if (v12 != -8)
      bzero(v11, v13);
    free(v11);
  }
}

void lh_maybe_resize(uint64_t a1)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t j;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  size_t v20;

  if (*(_DWORD *)(a1 + 24))
    return;
  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)a1 / v2 < 3)
  {
    if (v2 <= *(_QWORD *)a1 || v2 < 0x11)
      return;
    v4 = v2 >> 1 <= 0x10 ? 16 : v2 >> 1;
    if (v4 >> 61)
      return;
    if (v4 != 0x1FFFFFFFFFFFFFFFLL)
    {
      v11 = malloc_type_malloc(8 * v4 + 8, 0x30772F57uLL);
      if (v11)
      {
        *v11 = 8 * v4;
        v5 = v11 + 1;
        bzero(v11 + 1, 8 * v4);
        v12 = *(_QWORD *)(a1 + 16);
        if (v12)
        {
          for (i = 0; i != v12; ++i)
          {
            v14 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * i);
            if (v14)
            {
              do
              {
                v15 = *(_QWORD *)(v14 + 8);
                v16 = *(unsigned int *)(v14 + 16) % v4;
                *(_QWORD *)(v14 + 8) = v5[v16];
                v5[v16] = v14;
                v14 = v15;
              }
              while (v15);
            }
          }
        }
        goto LABEL_28;
      }
    }
LABEL_27:
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return;
  }
  if ((uint64_t)v2 < 1 || v2 >> 60)
    return;
  v3 = malloc_type_malloc((16 * v2) | 8, 0x30772F57uLL);
  if (!v3)
    goto LABEL_27;
  v4 = 2 * v2;
  *v3 = 16 * v2;
  v5 = v3 + 1;
  bzero(v3 + 1, 16 * v2);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    for (j = 0; j != v6; ++j)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * j);
      if (v8)
      {
        do
        {
          v9 = *(_QWORD *)(v8 + 8);
          v10 = *(unsigned int *)(v8 + 16) % v4;
          *(_QWORD *)(v8 + 8) = v5[v10];
          v5[v10] = v8;
          v8 = v9;
        }
        while (v9);
      }
    }
  }
LABEL_28:
  v17 = *(_QWORD *)(a1 + 8);
  if (v17)
  {
    v19 = *(_QWORD *)(v17 - 8);
    v18 = (void *)(v17 - 8);
    v20 = v19 + 8;
    if (v19 != -8)
      bzero(v18, v20);
    free(v18);
  }
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
}

int MD4_Update(MD4_CTX *c, const void *data, size_t len)
{
  size_t v3;
  _DWORD *v4;
  unsigned int *v6;
  size_t v7;
  uint64_t num;
  uint64_t v9;

  if (len)
  {
    v3 = len;
    v4 = data;
    v6 = c->data;
    v7 = *(_QWORD *)&c->Nl + 8 * len;
    *(_QWORD *)&c->Nl = v7;
    num = c->num;
    if ((_DWORD)num)
    {
      if (len <= 0x3F && num + len < 0x40)
      {
        memcpy((char *)v6 + num, data, len);
        c->num += v3;
        return 1;
      }
      v9 = 64 - num;
      if ((_DWORD)num != 64)
        memcpy((char *)v6 + num, data, 64 - num);
      md4_block_data_order((unint64_t)c, v6, 1);
      v4 = (_DWORD *)((char *)v4 + v9);
      v3 -= v9;
      c->num = 0;
      *(_OWORD *)v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
    }
    if (v3 >= 0x40)
    {
      md4_block_data_order((unint64_t)c, v4, v3 >> 6);
      v4 = (_DWORD *)((char *)v4 + (v3 & 0xFFFFFFFFFFFFFFC0));
      v3 &= 0x3Fu;
    }
    if (v3)
    {
      c->num = v3;
      memcpy(v6, v4, v3);
    }
  }
  return 1;
}

int MD4_Final(unsigned __int8 *md, MD4_CTX *c)
{
  unsigned int *data;
  uint64_t v5;
  uint64_t num;
  uint64_t v7;

  data = c->data;
  v5 = *(_QWORD *)&c->Nl;
  num = c->num;
  *((_BYTE *)c->data + num) = 0x80;
  v7 = num + 1;
  if (num >= 0x38)
  {
    if ((_DWORD)num != 63)
      bzero((char *)data + v7, 63 - num);
    md4_block_data_order((unint64_t)c, data, 1);
    v7 = 0;
    goto LABEL_6;
  }
  if (num != 55)
LABEL_6:
    bzero((char *)data + v7, 56 - v7);
  *(_QWORD *)&c->data[14] = v5;
  md4_block_data_order((unint64_t)c, data, 1);
  c->num = 0;
  *(_OWORD *)data = 0u;
  *((_OWORD *)data + 1) = 0u;
  *((_OWORD *)data + 2) = 0u;
  *((_OWORD *)data + 3) = 0u;
  *(_DWORD *)md = c->A;
  *((_DWORD *)md + 1) = c->B;
  *((_DWORD *)md + 2) = c->C;
  *((_DWORD *)md + 3) = c->D;
  return 1;
}

unint64_t md4_block_data_order(unint64_t result, _DWORD *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  _DWORD *v68;
  int v69;

  v68 = (_DWORD *)result;
  if (a3)
  {
    v4 = *(_DWORD *)(result + 8);
    v3 = *(_DWORD *)(result + 12);
    v6 = *(_DWORD *)result;
    v5 = *(_DWORD *)(result + 4);
    do
    {
      v69 = a2[1];
      HIDWORD(v8) = (v4 & v5 | v3 & ~v5) + v6 + *a2;
      LODWORD(v8) = HIDWORD(v8);
      v7 = v8 >> 29;
      HIDWORD(v8) = v69 + v3 + (v5 & v7 | v4 & ~v7);
      LODWORD(v8) = HIDWORD(v8);
      v9 = v8 >> 25;
      v10 = a2[2];
      result = a2[3];
      HIDWORD(v8) = v10 + v4 + (v7 & v9 | v5 & ~v9);
      LODWORD(v8) = HIDWORD(v8);
      v11 = v8 >> 21;
      HIDWORD(v8) = result + v5 + (v9 & v11 | v7 & ~v11);
      LODWORD(v8) = HIDWORD(v8);
      v12 = v8 >> 13;
      v14 = a2[4];
      v13 = a2[5];
      HIDWORD(v8) = v14 + v7 + (v11 & v12 | v9 & ~v12);
      LODWORD(v8) = HIDWORD(v8);
      v15 = v8 >> 29;
      HIDWORD(v8) = v9 + v13 + (v12 & v15 | v11 & ~v15);
      LODWORD(v8) = HIDWORD(v8);
      v16 = v8 >> 25;
      v17 = a2[6];
      v18 = a2[7];
      HIDWORD(v8) = v11 + v17 + (v15 & v16 | v12 & ~v16);
      LODWORD(v8) = HIDWORD(v8);
      v19 = v8 >> 21;
      HIDWORD(v8) = v12 + v18 + (v16 & v19 | v15 & ~v19);
      LODWORD(v8) = HIDWORD(v8);
      v20 = v8 >> 13;
      v22 = a2[8];
      v21 = a2[9];
      HIDWORD(v8) = v15 + v22 + (v19 & v20 | v16 & ~v20);
      LODWORD(v8) = HIDWORD(v8);
      v23 = v8 >> 29;
      HIDWORD(v8) = v16 + v21 + (v20 & v23 | v19 & ~v23);
      LODWORD(v8) = HIDWORD(v8);
      v24 = v8 >> 25;
      v26 = a2[10];
      v25 = a2[11];
      HIDWORD(v8) = v19 + v26 + (v23 & v24 | v20 & ~v24);
      LODWORD(v8) = HIDWORD(v8);
      v27 = v8 >> 21;
      HIDWORD(v8) = v20 + v25 + (v24 & v27 | v23 & ~v27);
      LODWORD(v8) = HIDWORD(v8);
      v28 = v8 >> 13;
      v30 = a2[12];
      v29 = a2[13];
      HIDWORD(v8) = v23 + v30 + (v27 & v28 | v24 & ~v28);
      LODWORD(v8) = HIDWORD(v8);
      v31 = v8 >> 29;
      HIDWORD(v8) = v24 + v29 + (v28 & v31 | v27 & ~v31);
      LODWORD(v8) = HIDWORD(v8);
      v32 = v8 >> 25;
      v34 = a2[14];
      v33 = a2[15];
      HIDWORD(v8) = v27 + v34 + (v31 & v32 | v28 & ~v32);
      LODWORD(v8) = HIDWORD(v8);
      v35 = v8 >> 21;
      HIDWORD(v8) = v28 + v33 + (v35 & v32 | v31 & ~v35);
      LODWORD(v8) = HIDWORD(v8);
      v36 = v8 >> 13;
      HIDWORD(v8) = *a2 + 1518500249 + v31 + (v36 & (v35 | v32) | v35 & v32);
      LODWORD(v8) = HIDWORD(v8);
      v37 = v8 >> 29;
      HIDWORD(v8) = v14 + 1518500249 + v32 + (v37 & (v36 | v35) | v36 & v35);
      LODWORD(v8) = HIDWORD(v8);
      v38 = v8 >> 27;
      HIDWORD(v8) = v22 + 1518500249 + v35 + (v38 & (v37 | v36) | v37 & v36);
      LODWORD(v8) = HIDWORD(v8);
      v39 = v8 >> 23;
      HIDWORD(v8) = v30 + 1518500249 + v36 + (v39 & (v38 | v37) | v38 & v37);
      LODWORD(v8) = HIDWORD(v8);
      v40 = v8 >> 19;
      HIDWORD(v8) = v69 + 1518500249 + v37 + (v40 & (v39 | v38) | v39 & v38);
      LODWORD(v8) = HIDWORD(v8);
      v41 = v8 >> 29;
      HIDWORD(v8) = v13 + 1518500249 + v38 + (v41 & (v40 | v39) | v40 & v39);
      LODWORD(v8) = HIDWORD(v8);
      v42 = v8 >> 27;
      HIDWORD(v8) = v21 + 1518500249 + v39 + (v42 & (v41 | v40) | v41 & v40);
      LODWORD(v8) = HIDWORD(v8);
      v43 = v8 >> 23;
      HIDWORD(v8) = v29 + 1518500249 + v40 + (v43 & (v42 | v41) | v42 & v41);
      LODWORD(v8) = HIDWORD(v8);
      v44 = v8 >> 19;
      HIDWORD(v8) = v10 + 1518500249 + v41 + (v44 & (v43 | v42) | v43 & v42);
      LODWORD(v8) = HIDWORD(v8);
      v45 = v8 >> 29;
      HIDWORD(v8) = v17 + 1518500249 + v42 + (v45 & (v44 | v43) | v44 & v43);
      LODWORD(v8) = HIDWORD(v8);
      v46 = v8 >> 27;
      HIDWORD(v8) = v26 + 1518500249 + v43 + (v46 & (v45 | v44) | v45 & v44);
      LODWORD(v8) = HIDWORD(v8);
      v47 = v8 >> 23;
      HIDWORD(v8) = v34 + 1518500249 + v44 + (v47 & (v46 | v45) | v46 & v45);
      LODWORD(v8) = HIDWORD(v8);
      v48 = v8 >> 19;
      HIDWORD(v8) = result + 1518500249 + v45 + (v48 & (v47 | v46) | v47 & v46);
      LODWORD(v8) = HIDWORD(v8);
      v49 = v8 >> 29;
      HIDWORD(v8) = v18 + 1518500249 + v46 + (v49 & (v48 | v47) | v48 & v47);
      LODWORD(v8) = HIDWORD(v8);
      v50 = v8 >> 27;
      HIDWORD(v8) = v25 + 1518500249 + v47 + (v50 & (v49 | v48) | v49 & v48);
      LODWORD(v8) = HIDWORD(v8);
      v51 = v8 >> 23;
      HIDWORD(v8) = v33 + 1518500249 + v48 + (v51 & (v50 | v49) | v50 & v49);
      LODWORD(v8) = HIDWORD(v8);
      v52 = v8 >> 19;
      HIDWORD(v8) = *a2 + 1859775393 + v49 + (v52 ^ v51 ^ v50);
      LODWORD(v8) = HIDWORD(v8);
      v53 = v8 >> 29;
      HIDWORD(v8) = v22 + 1859775393 + v50 + (v53 ^ v52 ^ v51);
      LODWORD(v8) = HIDWORD(v8);
      v54 = v8 >> 23;
      HIDWORD(v8) = v14 + 1859775393 + v51 + (v54 ^ v53 ^ v52);
      LODWORD(v8) = HIDWORD(v8);
      v55 = v8 >> 21;
      HIDWORD(v8) = v30 + 1859775393 + v52 + (v54 ^ v53 ^ v55);
      LODWORD(v8) = HIDWORD(v8);
      v56 = v8 >> 17;
      HIDWORD(v8) = v10 + 1859775393 + v53 + (v55 ^ v54 ^ v56);
      LODWORD(v8) = HIDWORD(v8);
      v57 = v8 >> 29;
      HIDWORD(v8) = v26 + 1859775393 + v54 + (v56 ^ v55 ^ v57);
      LODWORD(v8) = HIDWORD(v8);
      v58 = v8 >> 23;
      HIDWORD(v8) = v17 + 1859775393 + v55 + (v57 ^ v56 ^ v58);
      LODWORD(v8) = HIDWORD(v8);
      v59 = v8 >> 21;
      HIDWORD(v8) = v34 + 1859775393 + v56 + (v58 ^ v57 ^ v59);
      LODWORD(v8) = HIDWORD(v8);
      v60 = v8 >> 17;
      HIDWORD(v8) = v69 + 1859775393 + v57 + (v59 ^ v58 ^ v60);
      LODWORD(v8) = HIDWORD(v8);
      v61 = v8 >> 29;
      HIDWORD(v8) = v21 + 1859775393 + v58 + (v60 ^ v59 ^ v61);
      LODWORD(v8) = HIDWORD(v8);
      v62 = v8 >> 23;
      HIDWORD(v8) = v13 + 1859775393 + v59 + (v61 ^ v60 ^ v62);
      LODWORD(v8) = HIDWORD(v8);
      v63 = v8 >> 21;
      HIDWORD(v8) = v29 + 1859775393 + v60 + (v62 ^ v61 ^ v63);
      LODWORD(v8) = HIDWORD(v8);
      v64 = v8 >> 17;
      HIDWORD(v8) = result + 1859775393 + v61 + (v63 ^ v62 ^ v64);
      LODWORD(v8) = HIDWORD(v8);
      v65 = v8 >> 29;
      HIDWORD(v8) = v25 + 1859775393 + v62 + (v64 ^ v63 ^ v65);
      LODWORD(v8) = HIDWORD(v8);
      v66 = v8 >> 23;
      HIDWORD(v8) = v18 + 1859775393 + v63 + (v65 ^ v64 ^ v66);
      LODWORD(v8) = HIDWORD(v8);
      v67 = v8 >> 21;
      v6 += v65;
      v4 += v67;
      v3 += v66;
      HIDWORD(v8) = v33 + 1859775393 + v64 + (v66 ^ v65 ^ v67);
      LODWORD(v8) = HIDWORD(v8);
      v5 += v8 >> 17;
      *v68 = v6;
      v68[1] = v5;
      v68[2] = v4;
      v68[3] = v3;
      a2 += 16;
      --a3;
    }
    while (a3);
  }
  return result;
}

int MD5_Update(_MD5_CTX *c, const void *data, size_t len)
{
  size_t v3;
  _DWORD *v4;
  unsigned int *v6;
  size_t v7;
  uint64_t num;
  uint64_t v9;

  if (len)
  {
    v3 = len;
    v4 = data;
    v6 = c->data;
    v7 = *(_QWORD *)&c->Nl + 8 * len;
    *(_QWORD *)&c->Nl = v7;
    num = c->num;
    if ((_DWORD)num)
    {
      if (len <= 0x3F && num + len < 0x40)
      {
        memcpy((char *)v6 + num, data, len);
        c->num += v3;
        return 1;
      }
      v9 = 64 - num;
      if ((_DWORD)num != 64)
        memcpy((char *)v6 + num, data, 64 - num);
      md5_block_data_order((unint64_t)c, v6, 1);
      v4 = (_DWORD *)((char *)v4 + v9);
      v3 -= v9;
      c->num = 0;
      *(_OWORD *)v6 = 0u;
      *((_OWORD *)v6 + 1) = 0u;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
    }
    if (v3 >= 0x40)
    {
      md5_block_data_order((unint64_t)c, v4, v3 >> 6);
      v4 = (_DWORD *)((char *)v4 + (v3 & 0xFFFFFFFFFFFFFFC0));
      v3 &= 0x3Fu;
    }
    if (v3)
    {
      c->num = v3;
      memcpy(v6, v4, v3);
    }
  }
  return 1;
}

int MD5_Final(unsigned __int8 *md, _MD5_CTX *c)
{
  unsigned int *data;
  uint64_t v5;
  uint64_t num;
  uint64_t v7;

  data = c->data;
  v5 = *(_QWORD *)&c->Nl;
  num = c->num;
  *((_BYTE *)c->data + num) = 0x80;
  v7 = num + 1;
  if (num >= 0x38)
  {
    if ((_DWORD)num != 63)
      bzero((char *)data + v7, 63 - num);
    md5_block_data_order((unint64_t)c, data, 1);
    v7 = 0;
    goto LABEL_6;
  }
  if (num != 55)
LABEL_6:
    bzero((char *)data + v7, 56 - v7);
  *(_QWORD *)&c->data[14] = v5;
  md5_block_data_order((unint64_t)c, data, 1);
  c->num = 0;
  *(_OWORD *)data = 0u;
  *((_OWORD *)data + 1) = 0u;
  *((_OWORD *)data + 2) = 0u;
  *((_OWORD *)data + 3) = 0u;
  *(_DWORD *)md = c->A;
  *((_DWORD *)md + 1) = c->B;
  *((_DWORD *)md + 2) = c->C;
  *((_DWORD *)md + 3) = c->D;
  return 1;
}

unint64_t md5_block_data_order(unint64_t result, _DWORD *a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  _DWORD *v85;

  v85 = (_DWORD *)result;
  if (a3)
  {
    v4 = *(_DWORD *)(result + 8);
    v3 = *(_DWORD *)(result + 12);
    v5 = *(_DWORD *)result;
    v6 = *(_DWORD *)(result + 4);
    do
    {
      v7 = a2[1];
      HIDWORD(v8) = v5 + (v4 & v6 | v3 & ~v6) - 680876936 + *a2;
      LODWORD(v8) = HIDWORD(v8);
      v9 = (v8 >> 25) + v6;
      HIDWORD(v8) = v3 + v7 - 389564586 + (v6 & v9 | v4 & ~v9);
      LODWORD(v8) = HIDWORD(v8);
      v10 = (v8 >> 20) + v9;
      result = a2[2];
      v11 = a2[3];
      HIDWORD(v8) = v4 + result + 606105819 + (v9 & v10 | v6 & ~v10);
      LODWORD(v8) = HIDWORD(v8);
      v12 = (v8 >> 15) + v10;
      HIDWORD(v8) = v6 + v11 - 1044525330 + (v10 & v12 | v9 & ~v12);
      LODWORD(v8) = HIDWORD(v8);
      v13 = (v8 >> 10) + v12;
      v14 = a2[4];
      v15 = a2[5];
      HIDWORD(v8) = v9 + v14 - 176418897 + (v12 & v13 | v10 & ~v13);
      LODWORD(v8) = HIDWORD(v8);
      v16 = (v8 >> 25) + v13;
      HIDWORD(v8) = v15 + v10 + 1200080426 + (v13 & v16 | v12 & ~v16);
      LODWORD(v8) = HIDWORD(v8);
      v17 = (v8 >> 20) + v16;
      v19 = a2[6];
      v18 = a2[7];
      HIDWORD(v8) = v19 + v12 - 1473231341 + (v16 & v17 | v13 & ~v17);
      LODWORD(v8) = HIDWORD(v8);
      v20 = (v8 >> 15) + v17;
      HIDWORD(v8) = v18 + v13 - 45705983 + (v17 & v20 | v16 & ~v20);
      LODWORD(v8) = HIDWORD(v8);
      v21 = (v8 >> 10) + v20;
      v23 = a2[8];
      v22 = a2[9];
      HIDWORD(v8) = v23 + v16 + 1770035416 + (v20 & v21 | v17 & ~v21);
      LODWORD(v8) = HIDWORD(v8);
      v24 = (v8 >> 25) + v21;
      HIDWORD(v8) = v22 + v17 - 1958414417 + (v21 & v24 | v20 & ~v24);
      LODWORD(v8) = HIDWORD(v8);
      v25 = (v8 >> 20) + v24;
      v26 = a2[10];
      v27 = a2[11];
      HIDWORD(v8) = v26 + v20 - 42063 + (v24 & v25 | v21 & ~v25);
      LODWORD(v8) = HIDWORD(v8);
      v28 = (v8 >> 15) + v25;
      HIDWORD(v8) = v27 + v21 - 1990404162 + (v25 & v28 | v24 & ~v28);
      LODWORD(v8) = HIDWORD(v8);
      v29 = (v8 >> 10) + v28;
      v31 = a2[12];
      v30 = a2[13];
      HIDWORD(v8) = v31 + v24 + 1804603682 + (v28 & v29 | v25 & ~v29);
      LODWORD(v8) = HIDWORD(v8);
      v32 = (v8 >> 25) + v29;
      HIDWORD(v8) = v30 + v25 - 40341101 + (v29 & v32 | v28 & ~v32);
      LODWORD(v8) = HIDWORD(v8);
      v33 = (v8 >> 20) + v32;
      v35 = a2[14];
      v34 = a2[15];
      HIDWORD(v8) = v35 + v28 - 1502002290 + (v32 & v33 | v29 & ~v33);
      LODWORD(v8) = HIDWORD(v8);
      v36 = (v8 >> 15) + v33;
      HIDWORD(v8) = v34 + v29 + 1236535329 + (v33 & v36 | v32 & ~v36);
      LODWORD(v8) = HIDWORD(v8);
      v37 = (v8 >> 10) + v36;
      HIDWORD(v8) = v7 + v32 - 165796510 + (v37 & v33 | v36 & ~v33);
      LODWORD(v8) = HIDWORD(v8);
      v38 = (v8 >> 27) + v37;
      HIDWORD(v8) = v19 + v33 - 1069501632 + (v38 & v36 | v37 & ~v36);
      LODWORD(v8) = HIDWORD(v8);
      v39 = (v8 >> 23) + v38;
      HIDWORD(v8) = v27 + v36 + 643717713 + (v39 & v37 | v38 & ~v37);
      LODWORD(v8) = HIDWORD(v8);
      v40 = (v8 >> 18) + v39;
      HIDWORD(v8) = *a2 + v37 - 373897302 + (v40 & v38 | v39 & ~v38);
      LODWORD(v8) = HIDWORD(v8);
      v41 = (v8 >> 12) + v40;
      HIDWORD(v8) = v15 + v38 - 701558691 + (v41 & v39 | v40 & ~v39);
      LODWORD(v8) = HIDWORD(v8);
      v42 = (v8 >> 27) + v41;
      HIDWORD(v8) = v26 + v39 + 38016083 + (v42 & v40 | v41 & ~v40);
      LODWORD(v8) = HIDWORD(v8);
      v43 = (v8 >> 23) + v42;
      HIDWORD(v8) = v34 + v40 - 660478335 + (v43 & v41 | v42 & ~v41);
      LODWORD(v8) = HIDWORD(v8);
      v44 = (v8 >> 18) + v43;
      HIDWORD(v8) = v14 + v41 - 405537848 + (v44 & v42 | v43 & ~v42);
      LODWORD(v8) = HIDWORD(v8);
      v45 = (v8 >> 12) + v44;
      HIDWORD(v8) = v22 + v42 + 568446438 + (v45 & v43 | v44 & ~v43);
      LODWORD(v8) = HIDWORD(v8);
      v46 = (v8 >> 27) + v45;
      HIDWORD(v8) = v35 + v43 - 1019803690 + (v46 & v44 | v45 & ~v44);
      LODWORD(v8) = HIDWORD(v8);
      v47 = (v8 >> 23) + v46;
      HIDWORD(v8) = v11 + v44 - 187363961 + (v47 & v45 | v46 & ~v45);
      LODWORD(v8) = HIDWORD(v8);
      v48 = (v8 >> 18) + v47;
      HIDWORD(v8) = v23 + v45 + 1163531501 + (v48 & v46 | v47 & ~v46);
      LODWORD(v8) = HIDWORD(v8);
      v49 = (v8 >> 12) + v48;
      HIDWORD(v8) = v30 + v46 - 1444681467 + (v49 & v47 | v48 & ~v47);
      LODWORD(v8) = HIDWORD(v8);
      v50 = (v8 >> 27) + v49;
      HIDWORD(v8) = result + v47 - 51403784 + (v50 & v48 | v49 & ~v48);
      LODWORD(v8) = HIDWORD(v8);
      v51 = (v8 >> 23) + v50;
      HIDWORD(v8) = v18 + v48 + 1735328473 + (v51 & v49 | v50 & ~v49);
      LODWORD(v8) = HIDWORD(v8);
      v52 = (v8 >> 18) + v51;
      HIDWORD(v8) = v31 + v49 - 1926607734 + ((v52 ^ v51) & v50 ^ v51);
      LODWORD(v8) = HIDWORD(v8);
      v53 = (v8 >> 12) + v52;
      HIDWORD(v8) = v15 + v50 - 378558 + (v53 ^ v52 ^ v51);
      LODWORD(v8) = HIDWORD(v8);
      v54 = (v8 >> 28) + v53;
      HIDWORD(v8) = v23 + v51 - 2022574463 + (v54 ^ v53 ^ v52);
      LODWORD(v8) = HIDWORD(v8);
      v55 = (v8 >> 21) + v54;
      HIDWORD(v8) = v27 + v52 + 1839030562 + (v54 ^ v53 ^ v55);
      LODWORD(v8) = HIDWORD(v8);
      v56 = (v8 >> 16) + v55;
      HIDWORD(v8) = v35 + v53 - 35309556 + (v55 ^ v54 ^ v56);
      LODWORD(v8) = HIDWORD(v8);
      v57 = (v8 >> 9) + v56;
      HIDWORD(v8) = v7 + v54 - 1530992060 + (v56 ^ v55 ^ v57);
      LODWORD(v8) = HIDWORD(v8);
      v58 = (v8 >> 28) + v57;
      HIDWORD(v8) = v14 + v55 + 1272893353 + (v57 ^ v56 ^ v58);
      LODWORD(v8) = HIDWORD(v8);
      v59 = (v8 >> 21) + v58;
      HIDWORD(v8) = v18 + v56 - 155497632 + (v58 ^ v57 ^ v59);
      LODWORD(v8) = HIDWORD(v8);
      v60 = (v8 >> 16) + v59;
      HIDWORD(v8) = v26 + v57 - 1094730640 + (v59 ^ v58 ^ v60);
      LODWORD(v8) = HIDWORD(v8);
      v61 = (v8 >> 9) + v60;
      HIDWORD(v8) = v30 + v58 + 681279174 + (v60 ^ v59 ^ v61);
      LODWORD(v8) = HIDWORD(v8);
      v62 = (v8 >> 28) + v61;
      HIDWORD(v8) = *a2 + v59 - 358537222 + (v61 ^ v60 ^ v62);
      LODWORD(v8) = HIDWORD(v8);
      v63 = (v8 >> 21) + v62;
      HIDWORD(v8) = v11 + v60 - 722521979 + (v62 ^ v61 ^ v63);
      LODWORD(v8) = HIDWORD(v8);
      v64 = (v8 >> 16) + v63;
      HIDWORD(v8) = v19 + v61 + 76029189 + (v63 ^ v62 ^ v64);
      LODWORD(v8) = HIDWORD(v8);
      v65 = (v8 >> 9) + v64;
      HIDWORD(v8) = v22 + v62 - 640364487 + (v64 ^ v63 ^ v65);
      LODWORD(v8) = HIDWORD(v8);
      v66 = (v8 >> 28) + v65;
      HIDWORD(v8) = v31 + v63 - 421815835 + (v65 ^ v64 ^ v66);
      LODWORD(v8) = HIDWORD(v8);
      v67 = (v8 >> 21) + v66;
      HIDWORD(v8) = v34 + v64 + 530742520 + (v66 ^ v65 ^ v67);
      LODWORD(v8) = HIDWORD(v8);
      v68 = (v8 >> 16) + v67;
      HIDWORD(v8) = result + v65 - 995338651 + (v67 ^ v66 ^ v68);
      LODWORD(v8) = HIDWORD(v8);
      v69 = (v8 >> 9) + v68;
      HIDWORD(v8) = *a2 + v66 - 198630844 + ((v69 | ~v67) ^ v68);
      LODWORD(v8) = HIDWORD(v8);
      v70 = (v8 >> 26) + v69;
      HIDWORD(v8) = v18 + v67 + 1126891415 + ((v70 | ~v68) ^ v69);
      LODWORD(v8) = HIDWORD(v8);
      v71 = (v8 >> 22) + v70;
      HIDWORD(v8) = v35 + v68 - 1416354905 + ((v71 | ~v69) ^ v70);
      LODWORD(v8) = HIDWORD(v8);
      v72 = (v8 >> 17) + v71;
      HIDWORD(v8) = v15 + v69 - 57434055 + ((v72 | ~v70) ^ v71);
      LODWORD(v8) = HIDWORD(v8);
      v73 = (v8 >> 11) + v72;
      HIDWORD(v8) = v31 + v70 + 1700485571 + ((v73 | ~v71) ^ v72);
      LODWORD(v8) = HIDWORD(v8);
      v74 = (v8 >> 26) + v73;
      HIDWORD(v8) = v11 + v71 - 1894986606 + ((v74 | ~v72) ^ v73);
      LODWORD(v8) = HIDWORD(v8);
      v75 = (v8 >> 22) + v74;
      HIDWORD(v8) = v26 + v72 - 1051523 + ((v75 | ~v73) ^ v74);
      LODWORD(v8) = HIDWORD(v8);
      v76 = (v8 >> 17) + v75;
      HIDWORD(v8) = v7 + v73 - 2054922799 + ((v76 | ~v74) ^ v75);
      LODWORD(v8) = HIDWORD(v8);
      v77 = (v8 >> 11) + v76;
      HIDWORD(v8) = v23 + v74 + 1873313359 + ((v77 | ~v75) ^ v76);
      LODWORD(v8) = HIDWORD(v8);
      v78 = (v8 >> 26) + v77;
      HIDWORD(v8) = v34 + v75 - 30611744 + ((v78 | ~v76) ^ v77);
      LODWORD(v8) = HIDWORD(v8);
      v79 = (v8 >> 22) + v78;
      HIDWORD(v8) = v19 + v76 - 1560198380 + ((v79 | ~v77) ^ v78);
      LODWORD(v8) = HIDWORD(v8);
      v80 = (v8 >> 17) + v79;
      HIDWORD(v8) = v30 + v77 + 1309151649 + ((v80 | ~v78) ^ v79);
      LODWORD(v8) = HIDWORD(v8);
      v81 = (v8 >> 11) + v80;
      HIDWORD(v8) = v14 + v78 - 145523070 + ((v81 | ~v79) ^ v80);
      LODWORD(v8) = HIDWORD(v8);
      v82 = (v8 >> 26) + v81;
      HIDWORD(v8) = v27 + v79 - 1120210379 + ((v82 | ~v80) ^ v81);
      LODWORD(v8) = HIDWORD(v8);
      v83 = (v8 >> 22) + v82;
      HIDWORD(v8) = result + v80 + 718787259 + ((v83 | ~v81) ^ v82);
      LODWORD(v8) = HIDWORD(v8);
      v84 = (v8 >> 17) + v83;
      v5 += v82;
      HIDWORD(v8) = v22 + v81 - 343485551 + ((v84 | ~v82) ^ v83);
      LODWORD(v8) = HIDWORD(v8);
      v6 += v84 + (v8 >> 11);
      v4 += v84;
      v3 += v83;
      *v85 = v5;
      v85[1] = v6;
      v85[2] = v4;
      v85[3] = v3;
      a2 += 16;
      --a3;
    }
    while (a3);
  }
  return result;
}

_QWORD *OPENSSL_malloc(unint64_t a1)
{
  _QWORD *v2;

  if (a1 <= 0xFFFFFFFFFFFFFFF7 && (v2 = malloc_type_malloc(a1 + 8, 0x30772F57uLL)) != 0)
  {
    *v2 = a1;
    return v2 + 1;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

_QWORD *OPENSSL_zalloc(size_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a1 <= 0xFFFFFFFFFFFFFFF7 && (v2 = malloc_type_malloc(a1 + 8, 0x30772F57uLL)) != 0)
  {
    *v2 = a1;
    v3 = v2 + 1;
    if (a1)
      bzero(v2 + 1, a1);
    return v3;
  }
  else
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
}

_QWORD *OPENSSL_calloc(unint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if (!a2 || is_mul_ok(a2, a1))
  {
    v3 = a2 * a1;
    if (a2 * a1 <= 0xFFFFFFFFFFFFFFF7 && (v4 = malloc_type_malloc(v3 + 8, 0x30772F57uLL)) != 0)
    {
      *v4 = v3;
      v5 = v4 + 1;
      if (v3)
        bzero(v4 + 1, v3);
      return v5;
    }
    else
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      return 0;
    }
  }
  else
  {
    ERR_put_error(14, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 261);
    return 0;
  }
}

void OPENSSL_free(_QWORD *a1)
{
  uint64_t v1;
  char *v2;

  if (a1)
  {
    v2 = (char *)(a1 - 1);
    v1 = *(a1 - 1);
    if (v1 != -8)
      bzero(a1 - 1, v1 + 8);
    free(v2);
  }
}

_QWORD *OPENSSL_realloc(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;
  _QWORD *v6;
  _QWORD *v7;
  size_t v8;
  uint64_t v9;
  _QWORD *v11;

  if (!a1)
  {
    if (a2 <= 0xFFFFFFFFFFFFFFF7)
    {
      v11 = malloc_type_malloc(a2 + 8, 0x30772F57uLL);
      if (v11)
      {
        *v11 = a2;
        return v11 + 1;
      }
    }
    goto LABEL_13;
  }
  if (a2 > 0xFFFFFFFFFFFFFFF7
    || (v4 = (char *)(a1 - 1), v5 = *(a1 - 1), (v6 = malloc_type_malloc(a2 + 8, 0x30772F57uLL)) == 0))
  {
LABEL_13:
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  *v6 = a2;
  v7 = v6 + 1;
  if (v5 >= a2)
    v8 = a2;
  else
    v8 = v5;
  memcpy(v6 + 1, a1, v8);
  v9 = *(a1 - 1);
  if (v9 != -8)
    bzero(v4, v9 + 8);
  free(v4);
  return v7;
}

_QWORD *OPENSSL_strdup(const char *a1)
{
  size_t v2;
  size_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if (a1)
  {
    v2 = strlen(a1);
    v3 = v2 + 1;
    if (v2 != -1)
    {
      if (v3 <= 0xFFFFFFFFFFFFFFF7)
      {
        v4 = malloc_type_malloc(v2 + 9, 0x30772F57uLL);
        if (v4)
        {
          *v4 = v3;
          v5 = v4 + 1;
          memcpy(v4 + 1, a1, v3);
          return v5;
        }
      }
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    }
  }
  return 0;
}

uint64_t OPENSSL_strncasecmp(char *a1, char *a2, uint64_t a3)
{
  uint64_t i;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  BOOL v10;

  if (!a3)
    return 0;
  for (i = a3 - 1; ; --i)
  {
    v5 = *a1++;
    v4 = v5;
    v6 = v5 + 32;
    v7 = (v5 - 65) >= 0x1A;
    v9 = *a2++;
    v8 = v9;
    if (!v7)
      v4 = v6;
    if ((v8 - 65) < 0x1A)
      v8 += 32;
    if (v4 < v8)
      break;
    if (v4 > v8)
      return 1;
    if (v4)
      v10 = i == 0;
    else
      v10 = 1;
    if (v10)
      return 0;
  }
  return 0xFFFFFFFFLL;
}

_QWORD *OPENSSL_strndup(_BYTE *a1, size_t a2)
{
  size_t v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int v8;

  v3 = 0;
  if (a2)
  {
    while (a1[v3])
    {
      if (a2 == ++v3)
      {
        v3 = a2;
        break;
      }
    }
  }
  if (v3 >= a2)
    v4 = a2;
  else
    v4 = v3;
  if (v4 == -1)
  {
    v8 = 551;
    goto LABEL_16;
  }
  if (v4 > 0xFFFFFFFFFFFFFFF6 || (v5 = malloc_type_malloc(v4 + 9, 0x30772F57uLL)) == 0)
  {
    v8 = 247;
LABEL_16:
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", v8);
    return 0;
  }
  *v5 = v4 + 1;
  v6 = v5 + 1;
  if (v4)
    memcpy(v5 + 1, a1, v4);
  *((_BYTE *)v6 + v4) = 0;
  return v6;
}

void bn_mont_ctx_cleanup(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  size_t v15;

  if (!a1)
  {
LABEL_9:
    v7 = a1[11];
    if ((v7 & 2) != 0)
      goto LABEL_18;
    goto LABEL_14;
  }
  v2 = a1[5];
  if ((v2 & 2) == 0)
  {
    v3 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v5 = *(_QWORD *)(v3 - 8);
      v4 = (void *)(v3 - 8);
      v6 = v5 + 8;
      if (v5 != -8)
        bzero(v4, v6);
      free(v4);
      v2 = a1[5];
    }
  }
  if ((v2 & 1) == 0)
  {
    *(_QWORD *)a1 = 0;
    goto LABEL_9;
  }
  v8 = *((_QWORD *)a1 - 1);
  if (v8 != -8)
    bzero(a1 - 2, v8 + 8);
  free(a1 - 2);
  v7 = a1[11];
  if ((v7 & 2) == 0)
  {
LABEL_14:
    v9 = *((_QWORD *)a1 + 3);
    if (v9)
    {
      v11 = *(_QWORD *)(v9 - 8);
      v10 = (void *)(v9 - 8);
      v12 = v11 + 8;
      if (v11 != -8)
        bzero(v10, v12);
      free(v10);
      v7 = a1[11];
    }
  }
LABEL_18:
  if ((v7 & 1) != 0)
  {
    v14 = *((_QWORD *)a1 + 2);
    v13 = (char *)(a1 + 4);
    v15 = v14 + 8;
    if (v14 != -8)
      bzero(v13, v15);
    free(v13);
  }
  else
  {
    *((_QWORD *)a1 + 3) = 0;
  }
}

void BN_MONT_CTX_free(BN_MONT_CTX *mont)
{
  int dmax;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  size_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  int *p_flags;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;

  if (mont)
  {
    dmax = mont->RR.dmax;
    if ((dmax & 2) == 0)
    {
      v3 = *(_QWORD *)&mont->ri;
      if (*(_QWORD *)&mont->ri)
      {
        v5 = *(_QWORD *)(v3 - 8);
        v4 = (void *)(v3 - 8);
        v6 = v5 + 8;
        if (v5 != -8)
          bzero(v4, v6);
        free(v4);
        dmax = mont->RR.dmax;
      }
    }
    if ((dmax & 1) != 0)
    {
      v8 = *(_QWORD *)&mont[-1].flags;
      if (v8 != -8)
        bzero(&mont[-1].flags, v8 + 8);
      free(&mont[-1].flags);
      v7 = mont->N.dmax;
      if ((v7 & 2) != 0)
      {
LABEL_18:
        if ((v7 & 1) != 0)
        {
          v16 = *(_QWORD *)&mont->RR.top;
          if (v16 != -8)
            bzero(&mont->RR.top, v16 + 8);
          free(&mont->RR.top);
          v17 = *(_QWORD *)&mont[-1].flags;
          p_flags = &mont[-1].flags;
          v15 = v17 + 8;
          if (v17 == -8)
            goto LABEL_25;
        }
        else
        {
          *(_QWORD *)&mont->RR.neg = 0;
          v14 = *(_QWORD *)&mont[-1].flags;
          p_flags = &mont[-1].flags;
          v15 = v14 + 8;
          if (v14 == -8)
            goto LABEL_25;
        }
        bzero(p_flags, v15);
LABEL_25:
        free(p_flags);
        return;
      }
    }
    else
    {
      *(_QWORD *)&mont->ri = 0;
      v7 = mont->N.dmax;
      if ((v7 & 2) != 0)
        goto LABEL_18;
    }
    v9 = *(_QWORD *)&mont->RR.neg;
    if (v9)
    {
      v11 = *(_QWORD *)(v9 - 8);
      v10 = (void *)(v9 - 8);
      v12 = v11 + 8;
      if (v11 != -8)
        bzero(v10, v12);
      free(v10);
      v7 = mont->N.dmax;
    }
    goto LABEL_18;
  }
}

int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)
{
  BN_CTX *v5;
  int v6;
  unsigned int v7;
  char *v8;
  int d;
  int v10;
  unsigned int v11;
  uint64_t d_low;
  uint64_t v13;
  signed int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int8x8_t v18;
  unint64_t v19;
  uint64_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  unint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  int v30;

  if (!bn_mont_ctx_set_N_and_n0((uint64_t)mont, (uint64_t)mod))
    return 0;
  if (!ctx)
  {
    v8 = (char *)malloc_type_malloc(0x38uLL, 0x30772F57uLL);
    if (v8)
    {
      *(_QWORD *)v8 = 48;
      *(_OWORD *)(v8 + 8) = 0u;
      ctx = (BN_CTX *)(v8 + 8);
      *(_OWORD *)(v8 + 24) = 0u;
      *(_OWORD *)(v8 + 34) = 0u;
      v5 = (BN_CTX *)(v8 + 8);
      d = (int)mont->N.d;
      mont->RR.top = 0;
      LODWORD(mont->RR.d) = 0;
      v7 = d << 7;
      if ((v7 & 0x80000000) != 0)
        goto LABEL_26;
      goto LABEL_7;
    }
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v5 = 0;
  v6 = (int)mont->N.d;
  mont->RR.top = 0;
  LODWORD(mont->RR.d) = 0;
  v7 = v6 << 7;
  if ((v7 & 0x80000000) != 0)
    goto LABEL_26;
LABEL_7:
  v10 = v7 >> 6;
  v11 = (v7 >> 6) | 1;
  if (!bn_wexpand((uint64_t)mont, v11))
    goto LABEL_26;
  d_low = SLODWORD(mont->RR.d);
  v13 = *(_QWORD *)&mont->ri;
  if (v10 >= (int)d_low)
    bzero((void *)(v13 + 8 * d_low), 8 * (v10 - d_low) + 8);
  LODWORD(mont->RR.d) = v11;
  *(_QWORD *)(v13 + 8 * v10) |= 1uLL;
  if (!BN_div(0, (BIGNUM *)mont, (const BIGNUM *)mont, (const BIGNUM *)&mont->RR.neg, ctx))
    goto LABEL_26;
  v14 = (signed int)mont->N.d;
  v15 = SLODWORD(mont->RR.d);
  if (v15 > v14)
  {
    v16 = *(_QWORD *)&mont->ri;
    v17 = v15 - v14;
    if (v17 >= 4)
    {
      v19 = (v17 & 0xFFFFFFFFFFFFFFFCLL) + v14;
      v22 = (int8x16_t *)(v16 + 8 * v14 + 16);
      v23 = 0uLL;
      v24 = v17 & 0xFFFFFFFFFFFFFFFCLL;
      v25 = 0uLL;
      do
      {
        v23 = vorrq_s8(v22[-1], v23);
        v25 = vorrq_s8(*v22, v25);
        v22 += 2;
        v24 -= 4;
      }
      while (v24);
      v26 = vorrq_s8(v25, v23);
      v18 = vorr_s8(*(int8x8_t *)v26.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL));
      if (v17 == (v17 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_24:
        if (v18)
        {
          ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/bn.c", 399);
          goto LABEL_26;
        }
LABEL_28:
        LODWORD(mont->RR.d) = v14;
        v30 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      v18 = 0;
      v19 = v14;
    }
    v27 = v15 - v19;
    v28 = (uint64_t *)(v16 + 8 * v19);
    do
    {
      v29 = *v28++;
      *(_QWORD *)&v18 |= v29;
      --v27;
    }
    while (v27);
    goto LABEL_24;
  }
  if (bn_wexpand((uint64_t)mont, v14))
  {
    v21 = SLODWORD(mont->RR.d);
    if (v14 != (_DWORD)v21)
      bzero((void *)(*(_QWORD *)&mont->ri + 8 * v21), 8 * (v14 - v21));
    goto LABEL_28;
  }
LABEL_26:
  v30 = 0;
LABEL_27:
  BN_CTX_free(v5);
  return v30;
}

uint64_t bn_mont_ctx_set_N_and_n0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  int8x16_t *v5;
  unint64_t v6;
  int8x8_t v7;
  int8x16_t *v8;
  int8x16_t v9;
  unint64_t v10;
  int8x16_t v11;
  int8x16_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v17;
  int8x8_t v18;
  unint64_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  unint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v3 = *(int *)(a2 + 8);
  if (!(_DWORD)v3)
    goto LABEL_13;
  v5 = *(int8x16_t **)a2;
  if (v3 < 4)
  {
    v6 = 0;
    v7 = 0;
LABEL_7:
    v13 = v3 - v6;
    v14 = &v5->i64[v6];
    do
    {
      v15 = *v14++;
      *(_QWORD *)&v7 |= v15;
      --v13;
    }
    while (v13);
    goto LABEL_9;
  }
  v6 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  v8 = v5 + 1;
  v9 = 0uLL;
  v10 = v3 & 0xFFFFFFFFFFFFFFFCLL;
  v11 = 0uLL;
  do
  {
    v9 = vorrq_s8(v8[-1], v9);
    v11 = vorrq_s8(*v8, v11);
    v8 += 2;
    v10 -= 4;
  }
  while (v10);
  v12 = vorrq_s8(v11, v9);
  v7 = vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  if (v6 != v3)
    goto LABEL_7;
LABEL_9:
  if (!*(_QWORD *)&v7)
  {
LABEL_13:
    ERR_put_error(3, 0, 105, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c", 170);
    return 0;
  }
  if ((int)v3 < 1 || (v5->i8[0] & 1) == 0)
  {
    ERR_put_error(3, 0, 104, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c", 174);
    return 0;
  }
  if (*(_DWORD *)(a2 + 16))
  {
    ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c", 178);
    return 0;
  }
  if (v3 < 0x401)
    goto LABEL_26;
  v17 = v3 - 1024;
  if (v3 - 1024 < 4)
  {
    v18 = 0;
    v19 = 1024;
LABEL_22:
    v25 = v3 - v19;
    v26 = &v5->i64[v19];
    do
    {
      v27 = *v26++;
      *(_QWORD *)&v18 |= v27;
      --v25;
    }
    while (v25);
    goto LABEL_24;
  }
  v19 = (v17 & 0xFFFFFFFFFFFFFFFCLL) + 1024;
  v20 = v5 + 513;
  v21 = 0uLL;
  v22 = v17 & 0xFFFFFFFFFFFFFFFCLL;
  v23 = 0uLL;
  do
  {
    v21 = vorrq_s8(v20[-1], v21);
    v23 = vorrq_s8(*v20, v23);
    v20 += 2;
    v22 -= 4;
  }
  while (v22);
  v24 = vorrq_s8(v23, v21);
  v18 = vorr_s8(*(int8x8_t *)v24.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL));
  if (v17 != (v17 & 0xFFFFFFFFFFFFFFFCLL))
    goto LABEL_22;
LABEL_24:
  if (v18)
  {
    ERR_put_error(3, 0, 102, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c", 182);
    return 0;
  }
LABEL_26:
  v28 = (void **)(a1 + 24);
  if (a1 + 24 == a2)
  {
    LODWORD(v29) = *(_DWORD *)(a1 + 32);
  }
  else
  {
    if (!bn_wexpand(a1 + 24, v3))
    {
      ERR_put_error(3, 0, 68, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c", 188);
      return 0;
    }
    v29 = *(int *)(a2 + 8);
    if ((_DWORD)v29)
    {
      memcpy(*v28, *(const void **)a2, 8 * v29);
      LODWORD(v29) = *(_DWORD *)(a2 + 8);
    }
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 16);
  }
  v30 = 8 * v29 - 8;
  v31 = v29;
  while (1)
  {
    v32 = __OFSUB__(v31--, 1);
    if (v31 < 0 != v32)
      break;
    v33 = *(_QWORD *)((char *)*v28 + v30);
    v30 -= 8;
    if (v33)
    {
      *(_DWORD *)(a1 + 32) = v31 + 1;
      goto LABEL_38;
    }
  }
  *(_DWORD *)(a1 + 32) = v29 & ((int)v29 >> 31);
  if ((v29 & 0x80000000) == 0)
    *(_DWORD *)(a1 + 40) = 0;
LABEL_38:
  v34 = 0;
  v35 = 1;
  v36 = 64;
  do
  {
    v37 = v34;
    v38 = -(v35 & 1);
    v35 = (*(_QWORD *)*v28 & v38 & v35) + ((*(_QWORD *)*v28 & v38 ^ (unint64_t)v35) >> 1);
    v34 = v38 & 0x8000000000000000 | (v37 >> 1);
    --v36;
  }
  while (v36);
  *(_QWORD *)(a1 + 48) = v34;
  *(_QWORD *)(a1 + 56) = 0;
  return 1;
}

uint64_t *BN_MONT_CTX_new_for_modulus(const BIGNUM *a1, BN_CTX *a2)
{
  char *v4;
  _DWORD *v5;
  uint64_t *v6;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  size_t v17;

  v4 = (char *)malloc_type_malloc(0x48uLL, 0x30772F57uLL);
  if (!v4)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v5 = v4;
  *(_QWORD *)v4 = 64;
  *(_OWORD *)(v4 + 8) = 0u;
  v6 = (uint64_t *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  if (BN_MONT_CTX_set((BN_MONT_CTX *)(v4 + 8), a1, a2))
    return v6;
  v8 = v5[7];
  if ((v8 & 2) == 0)
  {
    v9 = *v6;
    if (*v6)
    {
      v11 = *(_QWORD *)(v9 - 8);
      v10 = (void *)(v9 - 8);
      v12 = v11 + 8;
      if (v11 != -8)
        bzero(v10, v12);
      free(v10);
      v8 = v5[7];
    }
  }
  if ((v8 & 1) != 0)
  {
    if (*(_QWORD *)v5 != -8)
      __memset_chk();
    free(v5);
    v13 = v5[13];
    if ((v13 & 2) != 0)
      goto LABEL_20;
    goto LABEL_16;
  }
  *v6 = 0;
  v13 = v5[13];
  if ((v13 & 2) == 0)
  {
LABEL_16:
    v14 = *((_QWORD *)v5 + 4);
    if (v14)
    {
      v16 = *(_QWORD *)(v14 - 8);
      v15 = (void *)(v14 - 8);
      v17 = v16 + 8;
      if (v16 != -8)
        bzero(v15, v17);
      free(v15);
      v13 = v5[13];
    }
  }
LABEL_20:
  if ((v13 & 1) != 0)
  {
    if (*((_QWORD *)v5 + 3) != -8)
      __memset_chk();
    free(v5 + 6);
  }
  if (*(_QWORD *)v5 != -8)
    __memset_chk();
  free(v5);
  return 0;
}

BIGNUM *BN_MONT_CTX_new_consttime(uint64_t a1, BN_CTX *a2)
{
  char *v4;
  _DWORD *v5;
  BIGNUM *v6;
  int v8;
  unint64_t *d;
  unint64_t *v10;
  uint64_t v11;
  size_t v12;
  int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  size_t v17;

  v4 = (char *)malloc_type_malloc(0x48uLL, 0x30772F57uLL);
  if (!v4)
  {
    ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    return 0;
  }
  v5 = v4;
  *(_QWORD *)v4 = 64;
  *(_OWORD *)(v4 + 8) = 0u;
  v6 = (BIGNUM *)(v4 + 8);
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  if (bn_mont_ctx_set_N_and_n0((uint64_t)(v4 + 8), a1)
    && bn_mont_ctx_set_RR_consttime(v6, a2))
  {
    return v6;
  }
  v8 = v5[7];
  if ((v8 & 2) == 0)
  {
    d = v6->d;
    if (v6->d)
    {
      v11 = *(d - 1);
      v10 = d - 1;
      v12 = v11 + 8;
      if (v11 != -8)
        bzero(v10, v12);
      free(v10);
      v8 = v5[7];
    }
  }
  if ((v8 & 1) != 0)
  {
    if (*(_QWORD *)v5 != -8)
      __memset_chk();
    free(v5);
    v13 = v5[13];
    if ((v13 & 2) != 0)
      goto LABEL_21;
    goto LABEL_17;
  }
  v6->d = 0;
  v13 = v5[13];
  if ((v13 & 2) == 0)
  {
LABEL_17:
    v14 = *((_QWORD *)v5 + 4);
    if (v14)
    {
      v16 = *(_QWORD *)(v14 - 8);
      v15 = (void *)(v14 - 8);
      v17 = v16 + 8;
      if (v16 != -8)
        bzero(v15, v17);
      free(v15);
      v13 = v5[13];
    }
  }
LABEL_21:
  if ((v13 & 1) != 0)
  {
    if (*((_QWORD *)v5 + 3) != -8)
      __memset_chk();
    free(v5 + 6);
  }
  if (*(_QWORD *)v5 != -8)
    __memset_chk();
  free(v5);
  return 0;
}

BN_MONT_CTX *__cdecl BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, int lock, const BIGNUM *mod, BN_CTX *ctx)
{
  pthread_rwlock_t *v6;
  BN_MONT_CTX *v8;
  BN_MONT_CTX *v10;
  _BOOL8 v11;

  v6 = *(pthread_rwlock_t **)&lock;
  if (pthread_rwlock_rdlock(*(pthread_rwlock_t **)&lock))
    goto LABEL_10;
  v8 = *pmont;
  if (pthread_rwlock_unlock(v6))
    goto LABEL_10;
  if (v8)
    return (BN_MONT_CTX *)1;
  if (pthread_rwlock_wrlock(v6))
    goto LABEL_10;
  v10 = *pmont;
  if (!*pmont)
  {
    v10 = (BN_MONT_CTX *)BN_MONT_CTX_new_for_modulus(mod, ctx);
    *pmont = v10;
  }
  v11 = v10 != 0;
  if (pthread_rwlock_unlock(v6))
LABEL_10:
    abort();
  return (BN_MONT_CTX *)v11;
}

int BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_MONT_CTX *mont, BN_CTX *ctx)
{
  BIGNUM *v6;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (a->neg || b->neg)
  {
    ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c", 421);
    LODWORD(v6) = 0;
    return (int)v6;
  }
  if (*((_BYTE *)ctx + 40))
  {
LABEL_19:
    v6 = BN_CTX_get(ctx);
    if (!v6)
      goto LABEL_26;
    goto LABEL_20;
  }
  v11 = *((_QWORD *)ctx + 4);
  v12 = *((_QWORD *)ctx + 2);
  if (v12 != *((_QWORD *)ctx + 3))
  {
    v15 = (_QWORD *)*((_QWORD *)ctx + 1);
    goto LABEL_18;
  }
  if (v12)
    v13 = (3 * v12) >> 1;
  else
    v13 = 32;
  if (v13 > v12 && v13 >> 61 == 0)
  {
    v15 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v13);
    if (v15)
    {
      *((_QWORD *)ctx + 1) = v15;
      *((_QWORD *)ctx + 3) = v13;
      v12 = *((_QWORD *)ctx + 2);
LABEL_18:
      v15[v12] = v11;
      ++*((_QWORD *)ctx + 2);
      goto LABEL_19;
    }
  }
  *((_WORD *)ctx + 20) = 257;
  v6 = BN_CTX_get(ctx);
  if (!v6)
    goto LABEL_26;
LABEL_20:
  v16 = (uint64_t)v6;
  if (a == b)
  {
    LODWORD(v6) = bn_sqr_consttime((uint64_t)v6, (uint64_t)a, ctx);
    if (!(_DWORD)v6)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (a->neg || b->neg)
  {
    ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/mul.c", 524);
    LODWORD(v6) = 0;
    goto LABEL_26;
  }
  LODWORD(v6) = bn_mul_impl((uint64_t)v6, (uint64_t)a, (uint64_t)b, ctx);
  if ((_DWORD)v6)
LABEL_25:
    LODWORD(v6) = BN_from_montgomery_word((uint64_t)r, v16, (uint64_t)mont);
LABEL_26:
  if (!*((_BYTE *)ctx + 40))
  {
    v17 = *((_QWORD *)ctx + 1);
    v18 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v18;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v17 + 8 * v18);
  }
  return (int)v6;
}

int BN_from_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont, BN_CTX *ctx)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  BIGNUM *v13;
  uint64_t v14;
  uint64_t top;
  uint64_t v16;
  uint64_t v17;

  if (!*((_BYTE *)ctx + 40))
  {
    v8 = *((_QWORD *)ctx + 4);
    v9 = *((_QWORD *)ctx + 2);
    if (v9 == *((_QWORD *)ctx + 3))
    {
      if (v9)
        v10 = (3 * v9) >> 1;
      else
        v10 = 32;
      v11 = v10 > v9 && v10 >> 61 == 0;
      if (!v11 || (v12 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v10)) == 0)
      {
        *((_WORD *)ctx + 20) = 257;
        v13 = BN_CTX_get(ctx);
        if (!v13)
          goto LABEL_22;
        goto LABEL_16;
      }
      *((_QWORD *)ctx + 1) = v12;
      *((_QWORD *)ctx + 3) = v10;
      v9 = *((_QWORD *)ctx + 2);
    }
    else
    {
      v12 = (_QWORD *)*((_QWORD *)ctx + 1);
    }
    v12[v9] = v8;
    ++*((_QWORD *)ctx + 2);
  }
  v13 = BN_CTX_get(ctx);
  if (!v13)
    goto LABEL_22;
LABEL_16:
  v14 = (uint64_t)v13;
  if (v13 != a)
  {
    LODWORD(v13) = bn_wexpand((uint64_t)v13, a->top);
    if (!(_DWORD)v13)
      goto LABEL_22;
    top = a->top;
    if ((_DWORD)top)
    {
      memcpy(*(void **)v14, a->d, 8 * top);
      LODWORD(top) = a->top;
    }
    *(_DWORD *)(v14 + 8) = top;
    *(_DWORD *)(v14 + 16) = a->neg;
  }
  LODWORD(v13) = BN_from_montgomery_word((uint64_t)r, v14, (uint64_t)mont);
LABEL_22:
  if (!*((_BYTE *)ctx + 40))
  {
    v16 = *((_QWORD *)ctx + 1);
    v17 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v17;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v16 + 8 * v17);
  }
  return (int)v13;
}

uint64_t BN_from_montgomery_word(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const char *v3;
  int v4;
  int v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v18;
  int8x16_t v19;
  unint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  const unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t *v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t *v48;
  int8x16_t *v49;
  unint64_t v50;
  int8x16_t v51;

  if (*(_DWORD *)(a2 + 16))
  {
    v3 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/fipsmodule/bn/montgomery.c";
    v4 = 109;
    v5 = 323;
LABEL_3:
    ERR_put_error(3, 0, v4, v3, v5);
    return 0;
  }
  v9 = *(int *)(a3 + 32);
  if (!(_DWORD)v9)
  {
    *(_DWORD *)(a1 + 8) = 0;
    return 1;
  }
  v11 = 2 * v9;
  v12 = *(int *)(a2 + 8);
  if (v12 > v11)
  {
    v13 = *(unint64_t **)a2;
    v14 = v12 - v11;
    if ((unint64_t)(v12 - v11) >= 4)
    {
      v16 = (v14 & 0xFFFFFFFFFFFFFFFCLL) + v11;
      v18 = (int8x16_t *)&v13[v11 + 2];
      v19 = 0uLL;
      v20 = v14 & 0xFFFFFFFFFFFFFFFCLL;
      v21 = 0uLL;
      do
      {
        v19 = vorrq_s8(v18[-1], v19);
        v21 = vorrq_s8(*v18, v21);
        v18 += 2;
        v20 -= 4;
      }
      while (v20);
      v22 = vorrq_s8(v21, v19);
      v15 = vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
      if (v14 == (v14 & 0xFFFFFFFFFFFFFFFCLL))
      {
LABEL_19:
        if (v15)
        {
          v3 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/"
               "src/crypto/fipsmodule/bn/bn.c";
          v4 = 102;
          v5 = 399;
          goto LABEL_3;
        }
        goto LABEL_21;
      }
    }
    else
    {
      v15 = 0;
      v16 = v11;
    }
    v23 = v12 - v16;
    v24 = &v13[v16];
    do
    {
      v25 = *v24++;
      *(_QWORD *)&v15 |= v25;
      --v23;
    }
    while (v23);
    goto LABEL_19;
  }
  result = bn_wexpand(a2, v11);
  if (!(_DWORD)result)
    return result;
  v17 = *(int *)(a2 + 8);
  if ((_DWORD)v11 != (_DWORD)v17)
    bzero((void *)(*(_QWORD *)a2 + 8 * v17), 8 * (v11 - v17));
LABEL_21:
  *(_DWORD *)(a2 + 8) = v11;
  result = bn_wexpand(a1, *(int *)(a3 + 32));
  if (!(_DWORD)result)
    return result;
  v26 = *(int *)(a3 + 32);
  *(_DWORD *)(a1 + 8) = v26;
  *(_DWORD *)(a1 + 16) = 0;
  v27 = *(int *)(a3 + 32);
  if ((_DWORD)v27 != (_DWORD)v26 || 2 * v27 != *(_DWORD *)(a2 + 8))
  {
    v3 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/cr"
         "ypto/fipsmodule/bn/montgomery.c";
    v4 = 66;
    v5 = 294;
    goto LABEL_3;
  }
  v28 = *(unint64_t **)a1;
  v29 = *(unint64_t **)a2;
  v30 = *(const unint64_t **)(a3 + 24);
  if (!(_DWORD)v26)
  {
    bn_sub_words(v28, &v29[v26], *(const unint64_t **)(a3 + 24), 0);
    return 1;
  }
  v31 = 0;
  v32 = *(_QWORD *)(a3 + 48);
  v33 = v29;
  v34 = v26;
  do
  {
    v35 = bn_mul_add_words(v33, v30, v26, *v33 * v32);
    v36 = v33[v26];
    v37 = v35 + v31 + v36;
    v31 = (v31 | (v35 + v31 != 0)) & (unint64_t)(v37 <= v36);
    v33[v26] = v37;
    ++v33;
    --v34;
  }
  while (v34);
  v38 = v31 - bn_sub_words(v28, &v29[v26], v30, v26);
  v39 = ~v38;
  if (v26 >= 6 && (v28 >= &v29[2 * v26] || &v29[v26] >= &v28[v26]))
  {
    v40 = v26 & 0xFFFFFFFFFFFFFFFCLL;
    v46 = (int8x16_t)vdupq_n_s64(v38);
    v47 = (int8x16_t)vdupq_n_s64(v39);
    v48 = (int8x16_t *)&v29[v26 + 2];
    v49 = (int8x16_t *)(v28 + 2);
    v50 = v26 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v51 = vorrq_s8(vandq_s8(*v49, v47), vandq_s8(*v48, v46));
      v49[-1] = vorrq_s8(vandq_s8(v49[-1], v47), vandq_s8(v48[-1], v46));
      *v49 = v51;
      v48 += 2;
      v49 += 2;
      v50 -= 4;
    }
    while (v50);
    if (v40 != v26)
      goto LABEL_31;
    return 1;
  }
  v40 = 0;
LABEL_31:
  v41 = v26 - v40;
  v42 = v40;
  v43 = &v28[v40];
  v44 = &v29[v26 + v42];
  result = 1;
  do
  {
    v45 = *v44++;
    *v43 = *v43 & v39 | v45 & v38;
    ++v43;
    --v41;
  }
  while (v41);
  return result;
}

uint64_t bn_one_to_montgomery(uint64_t a1, uint64_t a2, BN_CTX *ctx)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t result;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int8x16_t *v18;
  int8x16_t *v19;
  unint64_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = *(unsigned int *)(a2 + 32);
  if ((int)v6 < 1 || (*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8 * (v6 - 1)) & 0x8000000000000000) == 0)
  {
    if (!*((_BYTE *)ctx + 40))
    {
      v7 = *((_QWORD *)ctx + 4);
      v8 = *((_QWORD *)ctx + 2);
      if (v8 == *((_QWORD *)ctx + 3))
      {
        if (v8)
          v9 = (3 * v8) >> 1;
        else
          v9 = 32;
        v10 = v9 > v8 && v9 >> 61 == 0;
        if (!v10 || (v11 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v9)) == 0)
        {
          *((_WORD *)ctx + 20) = 257;
          result = (uint64_t)BN_CTX_get(ctx);
          if (!result)
            goto LABEL_35;
          goto LABEL_29;
        }
        *((_QWORD *)ctx + 1) = v11;
        *((_QWORD *)ctx + 3) = v9;
        v8 = *((_QWORD *)ctx + 2);
      }
      else
      {
        v11 = (_QWORD *)*((_QWORD *)ctx + 1);
      }
      v11[v8] = v7;
      ++*((_QWORD *)ctx + 2);
    }
    result = (uint64_t)BN_CTX_get(ctx);
    if (!result)
      goto LABEL_35;
LABEL_29:
    v27 = result;
    if (result != a2)
    {
      result = bn_wexpand(result, *(int *)(a2 + 8));
      if (!(_DWORD)result)
        goto LABEL_35;
      v28 = *(int *)(a2 + 8);
      if ((_DWORD)v28)
      {
        memcpy(*(void **)v27, *(const void **)a2, 8 * v28);
        LODWORD(v28) = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(v27 + 8) = v28;
      *(_DWORD *)(v27 + 16) = *(_DWORD *)(a2 + 16);
    }
    result = BN_from_montgomery_word(a1, v27, a2);
LABEL_35:
    if (!*((_BYTE *)ctx + 40))
    {
      v29 = *((_QWORD *)ctx + 1);
      v30 = *((_QWORD *)ctx + 2) - 1;
      *((_QWORD *)ctx + 2) = v30;
      *((_QWORD *)ctx + 4) = *(_QWORD *)(v29 + 8 * v30);
    }
    return result;
  }
  result = bn_wexpand(a1, v6);
  if ((_DWORD)result)
  {
    v13 = *(_QWORD **)(a2 + 24);
    v14 = *(_QWORD **)a1;
    **(_QWORD **)a1 = -*v13;
    v15 = *(unsigned int *)(a2 + 32);
    if ((int)v15 >= 2)
    {
      v16 = 1;
      if (v15 < 7)
        goto LABEL_22;
      if ((unint64_t)((char *)v14 - (char *)v13) < 0x20)
        goto LABEL_22;
      v17 = (v15 - 1) & 0xFFFFFFFFFFFFFFFCLL;
      v16 = v17 | 1;
      v18 = (int8x16_t *)(v13 + 3);
      v19 = (int8x16_t *)(v14 + 3);
      v20 = v17;
      do
      {
        v21 = vmvnq_s8(*v18);
        v19[-1] = vmvnq_s8(v18[-1]);
        *v19 = v21;
        v18 += 2;
        v19 += 2;
        v20 -= 4;
      }
      while (v20);
      if (v15 - 1 != v17)
      {
LABEL_22:
        v22 = v15 - v16;
        v23 = v16;
        v24 = &v14[v23];
        v25 = &v13[v23];
        do
        {
          v26 = *v25++;
          *v24++ = ~v26;
          --v22;
        }
        while (v22);
      }
    }
    *(_DWORD *)(a1 + 8) = v15;
    *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  return result;
}

unint64_t bn_mod_mul_montgomery_small(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8;
  const unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t result;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t *v23;
  int8x16_t *v24;
  unint64_t v25;
  int8x16_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t rp[18];
  unint64_t v33[19];

  v33[18] = *MEMORY[0x24BDAC8D0];
  if (a4 > 9 || *(_DWORD *)(a5 + 32) != a4)
    abort();
  if (a2 == a3)
  {
    if (a4 == 8)
    {
      bn_sqr_comba8(rp, a2);
    }
    else if (a4 == 4)
    {
      bn_sqr_comba4(rp, a2);
    }
    else
    {
      bn_sqr_normal((unint64_t)rp, a2, a4, v33);
      if (a4)
        __memset_chk();
    }
  }
  else if (a4 == 8)
  {
    bn_mul_comba8(rp, a2, a3);
  }
  else
  {
    bn_mul_normal(rp, a2, a4, a3, a4);
  }
  v8 = *(int *)(a5 + 32);
  if (v8 != a4)
  {
    ERR_put_error(3, 0, 66, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/montgomery.c", 294);
    abort();
  }
  v9 = *(const unint64_t **)(a5 + 24);
  v10 = 0;
  if ((_DWORD)v8)
  {
    v11 = *(_QWORD *)(a5 + 48);
    if (a4 <= 1)
      v12 = 1;
    else
      v12 = a4;
    v13 = rp;
    do
    {
      v14 = bn_mul_add_words(v13, v9, a4, *v13 * v11);
      v15 = v13[a4];
      v16 = v14 + v10 + v15;
      v10 = (v10 | (v14 + v10 != 0)) & (unint64_t)(v16 <= v15);
      v13[a4] = v16;
      ++v13;
      --v12;
    }
    while (v12);
  }
  result = bn_sub_words(a1, &rp[a4], v9, a4);
  if (a4)
  {
    v18 = v10 - result;
    v19 = ~(v10 - result);
    if (a4 >= 4)
    {
      v21 = (int8x16_t)vdupq_n_s64(v18);
      v22 = (int8x16_t)vdupq_n_s64(v19);
      v20 = a4 & 0xFFFFFFFFFFFFFFFCLL;
      v23 = (int8x16_t *)&rp[a4 + 2];
      v24 = (int8x16_t *)(a1 + 2);
      v25 = a4 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v26 = vorrq_s8(vandq_s8(*v24, v22), vandq_s8(*v23, v21));
        v24[-1] = vorrq_s8(vandq_s8(v24[-1], v22), vandq_s8(v23[-1], v21));
        *v24 = v26;
        v23 += 2;
        v24 += 2;
        v25 -= 4;
      }
      while (v25);
      if (v20 == a4)
        return __memset_chk();
    }
    else
    {
      v20 = 0;
    }
    v27 = a4 - v20;
    v28 = v20;
    v29 = &a1[v20];
    v30 = &rp[a4 + v28];
    do
    {
      v31 = *v30++;
      *v29 = *v29 & v19 | v31 & v18;
      ++v29;
      --v27;
    }
    while (v27);
    return __memset_chk();
  }
  return result;
}

unint64_t bn_from_montgomery_small(unint64_t *a1, unint64_t num, uint64_t a3, unint64_t a4, uint64_t a5)
{
  int v7;
  BOOL v8;
  const unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t result;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t *v24;
  int8x16_t *v25;
  unint64_t v26;
  int8x16_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  _OWORD v33[9];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (num > 9 || ((v7 = *(_DWORD *)(a5 + 32), v7 == num) ? (v8 = 2 * num >= a4) : (v8 = 0), !v8))
    abort();
  memset(v33, 0, sizeof(v33));
  if (a4)
    __memcpy_chk();
  v10 = *(const unint64_t **)(a5 + 24);
  if (v7)
  {
    v11 = 0;
    v12 = *(_QWORD *)(a5 + 48);
    if (num <= 1)
      v13 = 1;
    else
      v13 = num;
    v14 = (unint64_t *)v33;
    do
    {
      v15 = bn_mul_add_words(v14, v10, num, *v14 * v12);
      v16 = v14[num];
      v17 = v15 + v11 + v16;
      v11 = (v11 | (v15 + v11 != 0)) & (unint64_t)(v17 <= v16);
      v14[num] = v17;
      ++v14;
      --v13;
    }
    while (v13);
  }
  else
  {
    v11 = 0;
  }
  result = bn_sub_words(a1, (const unint64_t *)v33 + num, v10, num);
  if (num)
  {
    v19 = v11 - result;
    v20 = ~(v11 - result);
    if (num >= 4)
    {
      v22 = (int8x16_t)vdupq_n_s64(v19);
      v23 = (int8x16_t)vdupq_n_s64(v20);
      v21 = num & 0xFFFFFFFFFFFFFFFCLL;
      v24 = (int8x16_t *)((char *)&v33[1] + 8 * num);
      v25 = (int8x16_t *)(a1 + 2);
      v26 = num & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v27 = vorrq_s8(vandq_s8(*v25, v23), vandq_s8(*v24, v22));
        v25[-1] = vorrq_s8(vandq_s8(v25[-1], v23), vandq_s8(v24[-1], v22));
        *v25 = v27;
        v24 += 2;
        v25 += 2;
        v26 -= 4;
      }
      while (v26);
      if (v21 == num)
        return __memset_chk();
    }
    else
    {
      v21 = 0;
    }
    v28 = num - v21;
    v29 = 8 * v21;
    v30 = &a1[v21];
    v31 = (uint64_t *)((char *)v33 + 8 * num + v29);
    do
    {
      v32 = *v31++;
      *v30 = *v30 & v20 | v32 & v19;
      ++v30;
      --v28;
    }
    while (v28);
    return __memset_chk();
  }
  return result;
}

uint64_t bn_mont_ctx_set_RR_consttime(BIGNUM *a1, BN_CTX *a2)
{
  BIGNUM *v4;
  uint64_t top;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  unint64_t *d;
  uint64_t v11;
  uint64_t result;
  int v13;
  unint64_t v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v4 = a1 + 1;
  top = a1[1].top;
  v6 = top & ((int)top >> 31);
  v7 = 8 * top - 8;
  v8 = a1[1].top;
  while (1)
  {
    v9 = __OFSUB__(v8--, 1);
    if (v8 < 0 != v9)
      break;
    d = v4->d;
    v11 = *(unint64_t *)((char *)v4->d + v7);
    v7 -= 8;
    if (v11)
    {
      v6 = v8 + 1;
      goto LABEL_9;
    }
  }
  if ((top & 0x80000000) == 0)
    return 0;
  d = v4->d;
LABEL_9:
  v13 = v6 - 1;
  v14 = d[v13];
  v15 = v14 != 0;
  v16 = HIDWORD(v14) != 0;
  if (HIDWORD(v14))
    v14 >>= 32;
  v17 = v14 >> 16 != 0;
  if (v14 >> 16)
    v14 >>= 16;
  v18 = v14 > 0xFF;
  if (v14 > 0xFF)
    v14 >>= 8;
  v19 = v14 > 0xF;
  if (v14 > 0xF)
    v14 >>= 4;
  v20 = v14 > 3;
  if (v14 > 3)
    v14 >>= 2;
  v21 = v15 | (v13 << 6) | (32 * v16) | (16 * v17) | (8 * v18) | (4 * v19) | (2 * v20);
  if (v14 <= 1)
    v22 = v21;
  else
    v22 = v21 + 1;
  v23 = v22 - 1;
  if (v22 == 1)
  {
    a1->neg = 0;
    a1->top = 0;
    result = bn_wexpand((uint64_t)a1, (int)top);
    if ((_DWORD)result)
    {
      v24 = a1->top;
      if ((_DWORD)top != (_DWORD)v24)
        bzero(&a1->d[v24], 8 * ((int)top - v24));
      a1->top = top;
      return 1;
    }
  }
  else
  {
    if (v22 - 1 < 0)
      return 0;
    v25 = v23 >> 6;
    if (a1->top <= (signed int)(v23 >> 6))
    {
      result = bn_wexpand((uint64_t)a1, (v25 + 1));
      if (!(_DWORD)result)
        return result;
      v26 = a1->top;
      if (v25 >= (int)v26)
        bzero(&a1->d[v26], 8 * (v25 - v26) + 8);
      a1->top = v25 + 1;
    }
    a1->d[v23 >> 6] |= 1 << (v23 & 0x3F);
    result = bn_mod_lshift_consttime((uint64_t)a1, (uint64_t)a1, (int)top - v22 + ((_DWORD)top << 6) + 1, (uint64_t)v4, (uint64_t)a2);
    if ((_DWORD)result)
    {
      result = BN_mod_mul_montgomery(a1, a1, a1, (BN_MONT_CTX *)a1, a2);
      if ((_DWORD)result)
      {
        result = BN_mod_mul_montgomery(a1, a1, a1, (BN_MONT_CTX *)a1, a2);
        if ((_DWORD)result)
        {
          result = BN_mod_mul_montgomery(a1, a1, a1, (BN_MONT_CTX *)a1, a2);
          if ((_DWORD)result)
          {
            result = BN_mod_mul_montgomery(a1, a1, a1, (BN_MONT_CTX *)a1, a2);
            if ((_DWORD)result)
            {
              result = BN_mod_mul_montgomery(a1, a1, a1, (BN_MONT_CTX *)a1, a2);
              if ((_DWORD)result)
              {
                result = BN_mod_mul_montgomery(a1, a1, a1, (BN_MONT_CTX *)a1, a2);
                if ((_DWORD)result)
                  return bn_resize_words((uint64_t)a1, a1[1].top);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bn_abs_sub_consttime(uint64_t a1, uint64_t a2, uint64_t a3, BN_CTX *ctx)
{
  int v8;
  int v9;
  int v10;
  signed int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  _QWORD *v17;
  uint64_t result;
  unint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *(_DWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a3 + 8);
  v10 = v8 - v9;
  if (v8 >= v9)
    v11 = *(_DWORD *)(a3 + 8);
  else
    v11 = *(_DWORD *)(a2 + 8);
  if (v8 <= v9)
    v12 = *(_DWORD *)(a3 + 8);
  else
    v12 = *(_DWORD *)(a2 + 8);
  if (!*((_BYTE *)ctx + 40))
  {
    v13 = *((_QWORD *)ctx + 4);
    v14 = *((_QWORD *)ctx + 2);
    if (v14 == *((_QWORD *)ctx + 3))
    {
      if (v14)
        v15 = (3 * v14) >> 1;
      else
        v15 = 32;
      v16 = v15 > v14 && v15 >> 61 == 0;
      if (!v16 || (v17 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v15)) == 0)
      {
        *((_WORD *)ctx + 20) = 257;
        result = (uint64_t)BN_CTX_get(ctx);
        if (!result)
          goto LABEL_25;
        goto LABEL_22;
      }
      *((_QWORD *)ctx + 1) = v17;
      *((_QWORD *)ctx + 3) = v15;
      v14 = *((_QWORD *)ctx + 2);
    }
    else
    {
      v17 = (_QWORD *)*((_QWORD *)ctx + 1);
    }
    v17[v14] = v13;
    ++*((_QWORD *)ctx + 2);
  }
  result = (uint64_t)BN_CTX_get(ctx);
  if (!result)
    goto LABEL_25;
LABEL_22:
  v19 = (unint64_t *)result;
  result = bn_wexpand(a1, v12);
  if ((_DWORD)result)
  {
    result = bn_wexpand((uint64_t)v19, v12);
    if ((_DWORD)result)
    {
      bn_abs_sub_part_words(*(_QWORD *)a1, *(unint64_t **)a2, *(unint64_t **)a3, v11, v10, *v19);
      *(_DWORD *)(a1 + 8) = v12;
      result = 1;
    }
  }
LABEL_25:
  if (!*((_BYTE *)ctx + 40))
  {
    v20 = *((_QWORD *)ctx + 1);
    v21 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v21;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v20 + 8 * v21);
  }
  return result;
}

unint64_t bn_abs_sub_part_words(unint64_t a1, unint64_t *a2, unint64_t *a3, signed int a4, int a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unint64_t v80;
  signed int v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t *v87;
  uint64_t v88;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t *v92;
  int8x16_t *v93;
  unint64_t v94;
  int8x16_t v95;

  v6 = a4;
  if (!a4)
  {
    v7 = 0;
    if (!a5)
      goto LABEL_94;
LABEL_27:
    v26 = (_QWORD *)(a6 + 8 * a4);
    v27 = (uint64_t *)&a2[a4];
    v28 = (uint64_t *)&a3[a4];
    if (a5 < 0)
    {
      v33 = -a5;
      if (-a5 > 1)
        v36 = -a5;
      else
        v36 = 1;
      v37 = (uint64_t *)&a3[a4];
      do
      {
        v38 = *v37++;
        v39 = -v7 - v38;
        v7 = v7 & (v38 == 0);
        if (v38)
          v7 = 1;
        *v26++ = v39;
        --v36;
      }
      while (v36);
    }
    else
    {
      v29 = a5;
      v30 = (uint64_t *)&a2[a4];
      do
      {
        v31 = *v30++;
        v32 = v31 - v7;
        v7 = v7 & (v31 == 0);
        *v26++ = v32;
        --v29;
      }
      while (v29);
      v33 = -a5;
    }
    if (a4)
    {
      if (a4 >= 4)
      {
        v40 = 0;
        v41 = a4;
        v42 = (unint64_t *)a1;
        do
        {
          v43 = *a3 - (v40 + *a2);
          v40 = v40 & (*a3 == *a2);
          if (*a3 < *a2)
            v40 = 1;
          *v42 = v43;
          v44 = a3[1];
          v45 = a2[1];
          v46 = v44 - (v45 + v40);
          if (v44 != v45)
            v40 = 0;
          if (v44 < v45)
            v40 = 1;
          v42[1] = v46;
          v47 = a3[2];
          v48 = a2[2];
          v49 = v47 - (v48 + v40);
          if (v47 != v48)
            v40 = 0;
          if (v47 < v48)
            v40 = 1;
          v42[2] = v49;
          v50 = a3[3];
          v51 = a2[3];
          v52 = v50 - (v51 + v40);
          if (v50 != v51)
            v40 = 0;
          if (v50 < v51)
            v40 = 1;
          v42[3] = v52;
          a3 += 4;
          a2 += 4;
          v42 += 4;
          v41 -= 4;
        }
        while (v41 >= 4);
        if (!v41)
          goto LABEL_64;
      }
      else
      {
        v40 = 0;
        v41 = a4;
        v42 = (unint64_t *)a1;
      }
      do
      {
        v54 = *a3++;
        v53 = v54;
        v55 = *a2++;
        v56 = v53 - (v40 + v55);
        v40 = v40 & (v53 == v55);
        if (v53 < v55)
          v40 = 1;
        *v42++ = v56;
        --v41;
      }
      while (v41);
    }
    else
    {
      v40 = 0;
    }
LABEL_64:
    v57 = (_QWORD *)(a1 + 8 * a4);
    if (a5 <= 0)
    {
      v62 = v33;
      do
      {
        v63 = *v28++;
        v64 = v63 - v40;
        v40 = v40 & (v63 == 0);
        *v57++ = v64;
        --v62;
      }
      while (v62);
    }
    else
    {
      v58 = a5;
      do
      {
        v59 = *v27++;
        v60 = -v40 - v59;
        v61 = v40 & (v59 == 0);
        if (v59)
          v40 = 1;
        else
          v40 = v61;
        *v57++ = v60;
        --v58;
      }
      while (v58);
    }
    goto LABEL_94;
  }
  if (a4 < 4)
  {
    v7 = 0;
    v8 = a4;
    v9 = a3;
    v10 = a2;
    v11 = (unint64_t *)a6;
    do
    {
LABEL_23:
      v23 = *v10++;
      v22 = v23;
      v24 = *v9++;
      v25 = v22 - (v7 + v24);
      v7 = v7 & (v22 == v24);
      if (v22 < v24)
        v7 = 1;
      *v11++ = v25;
      --v8;
    }
    while (v8);
    goto LABEL_26;
  }
  v7 = 0;
  v8 = a4;
  v9 = a3;
  v10 = a2;
  v11 = (unint64_t *)a6;
  do
  {
    v12 = *v10 - (v7 + *v9);
    v7 = v7 & (*v10 == *v9);
    if (*v10 < *v9)
      v7 = 1;
    *v11 = v12;
    v13 = v10[1];
    v14 = v9[1];
    v15 = v13 - (v14 + v7);
    if (v13 != v14)
      v7 = 0;
    if (v13 < v14)
      v7 = 1;
    v11[1] = v15;
    v16 = v10[2];
    v17 = v9[2];
    v18 = v16 - (v17 + v7);
    if (v16 != v17)
      v7 = 0;
    if (v16 < v17)
      v7 = 1;
    v11[2] = v18;
    v19 = v10[3];
    v20 = v9[3];
    v21 = v19 - (v20 + v7);
    if (v19 != v20)
      v7 = 0;
    if (v19 < v20)
      v7 = 1;
    v11[3] = v21;
    v10 += 4;
    v9 += 4;
    v11 += 4;
    v8 -= 4;
  }
  while (v8 >= 4);
  if (v8)
    goto LABEL_23;
LABEL_26:
  if (a5)
    goto LABEL_27;
  if (a4 < 4)
  {
    v34 = 0;
    v35 = (unint64_t *)a1;
    do
    {
LABEL_91:
      v76 = *a3++;
      v75 = v76;
      v77 = *a2++;
      v78 = v75 - (v34 + v77);
      v34 = v34 & (v75 == v77);
      if (v75 < v77)
        v34 = 1;
      *v35++ = v78;
      --v6;
    }
    while (v6);
    goto LABEL_94;
  }
  v34 = 0;
  v35 = (unint64_t *)a1;
  do
  {
    v65 = *a3 - (v34 + *a2);
    v34 = v34 & (*a3 == *a2);
    if (*a3 < *a2)
      v34 = 1;
    *v35 = v65;
    v66 = a3[1];
    v67 = a2[1];
    v68 = v66 - (v67 + v34);
    if (v66 != v67)
      v34 = 0;
    if (v66 < v67)
      v34 = 1;
    v35[1] = v68;
    v69 = a3[2];
    v70 = a2[2];
    v71 = v69 - (v70 + v34);
    if (v69 != v70)
      v34 = 0;
    if (v69 < v70)
      v34 = 1;
    v35[2] = v71;
    v72 = a3[3];
    v73 = a2[3];
    v74 = v72 - (v73 + v34);
    if (v72 != v73)
      v34 = 0;
    if (v72 < v73)
      v34 = 1;
    v35[3] = v74;
    a3 += 4;
    a2 += 4;
    v35 += 4;
    v6 -= 4;
  }
  while (v6 >= 4);
  if (v6)
    goto LABEL_91;
LABEL_94:
  if (a5 >= 0)
    v79 = a5;
  else
    v79 = -a5;
  v80 = -v7;
  v81 = v79 + a4;
  if (v81)
  {
    v82 = ~v80;
    if (v81 < 4 || a6 + 8 * v81 > a1 && a1 + 8 * v81 > a6)
    {
      v83 = 0;
LABEL_102:
      v84 = v81 - v83;
      v85 = 8 * v83;
      v86 = (uint64_t *)(a6 + 8 * v83);
      v87 = (unint64_t *)(a1 + v85);
      do
      {
        v88 = *v86++;
        *v87 = v88 & v82 | *v87 & v80;
        ++v87;
        --v84;
      }
      while (v84);
      return v80;
    }
    v90 = (int8x16_t)vdupq_n_s64(v80);
    v83 = v81 & 0xFFFFFFFFFFFFFFFCLL;
    v91 = (int8x16_t)vdupq_n_s64(v82);
    v92 = (int8x16_t *)(a1 + 16);
    v93 = (int8x16_t *)(a6 + 16);
    v94 = v83;
    do
    {
      v95 = vorrq_s8(vandq_s8(*v93, v91), vandq_s8(*v92, v90));
      v92[-1] = vorrq_s8(vandq_s8(v93[-1], v91), vandq_s8(v92[-1], v90));
      *v92 = v95;
      v92 += 2;
      v93 += 2;
      v94 -= 4;
    }
    while (v94);
    if (v83 != v81)
      goto LABEL_102;
  }
  return v80;
}

uint64_t bn_mul_impl(uint64_t a1, uint64_t a2, uint64_t a3, BN_CTX *ctx)
{
  unint64_t v5;
  int v6;
  BOOL v7;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v16;
  _QWORD **v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  char v24;
  int v25;
  unint64_t **v27;
  unint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  BOOL v33;

  v5 = *(int *)(a2 + 8);
  v6 = *(_DWORD *)(a3 + 8);
  if ((_DWORD)v5)
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 8) = 0;
    return 1;
  }
  if (*((_BYTE *)ctx + 40))
  {
LABEL_21:
    if (a1 != a2)
      goto LABEL_22;
    goto LABEL_23;
  }
  v12 = *((_QWORD *)ctx + 4);
  v13 = *((_QWORD *)ctx + 2);
  if (v13 != *((_QWORD *)ctx + 3))
  {
    v16 = (_QWORD *)*((_QWORD *)ctx + 1);
    goto LABEL_20;
  }
  if (v13)
    v14 = (3 * v13) >> 1;
  else
    v14 = 32;
  if (v14 > v13 && v14 >> 61 == 0)
  {
    v16 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v14);
    if (v16)
    {
      *((_QWORD *)ctx + 1) = v16;
      *((_QWORD *)ctx + 3) = v14;
      v13 = *((_QWORD *)ctx + 2);
LABEL_20:
      v16[v13] = v12;
      ++*((_QWORD *)ctx + 2);
      goto LABEL_21;
    }
  }
  *((_WORD *)ctx + 20) = 257;
  if (a1 != a2)
  {
LABEL_22:
    v17 = (_QWORD **)a1;
    if (a1 != a3)
      goto LABEL_24;
  }
LABEL_23:
  result = (uint64_t)BN_CTX_get(ctx);
  v17 = (_QWORD **)result;
  if (!result)
    goto LABEL_65;
LABEL_24:
  *((_DWORD *)v17 + 4) = *(_DWORD *)(a3 + 16) ^ *(_DWORD *)(a2 + 16);
  if ((_DWORD)v5 == 8 && v6 == 8)
  {
    result = bn_wexpand((uint64_t)v17, 0x10uLL);
    if (!(_DWORD)result)
      goto LABEL_65;
    *((_DWORD *)v17 + 2) = 16;
    bn_mul_comba8(*v17, *(unint64_t **)a2, *(unint64_t **)a3);
    if (v17 == (_QWORD **)a1)
      goto LABEL_64;
  }
  else
  {
    v18 = v6 + v5;
    if ((int)v5 < 16 || v6 < 16 || (v5 - v6 + 1) > 2)
    {
      result = bn_wexpand((uint64_t)v17, v18);
      if (!(_DWORD)result)
        goto LABEL_65;
      *((_DWORD *)v17 + 2) = v18;
      bn_mul_normal(*v17, *(unint64_t **)a2, v5, *(unint64_t **)a3, v6);
      if (v17 == (_QWORD **)a1)
        goto LABEL_64;
    }
    else
    {
      if ((int)v5 - v6 >= 0)
        v19 = v5;
      else
        v19 = v6;
      v20 = WORD1(v19);
      if (WORD1(v19))
        v19 >>= 16;
      v32 = v19 > 0xFF;
      v33 = v20 != 0;
      if (v19 > 0xFF)
        v19 >>= 8;
      v21 = v19 > 0xF;
      if (v19 > 0xF)
        v19 >>= 4;
      v22 = v19 > 3;
      if (v19 > 3)
        v19 >>= 2;
      v23 = v19 > 1;
      result = (uint64_t)BN_CTX_get(ctx);
      if (!result)
        goto LABEL_65;
      v24 = (8 * v32) | (16 * v33) | (4 * v21) | (2 * v22) | v23;
      v25 = 1 << v24;
      if ((int)v5 <= 1 << v24 && v6 <= v25)
      {
        v28 = (unint64_t **)result;
        result = bn_wexpand(result, 4 << v24);
        if (!(_DWORD)result)
          goto LABEL_65;
        result = bn_wexpand((uint64_t)v17, 2 << v24);
        if (!(_DWORD)result)
          goto LABEL_65;
        bn_mul_recursive(*v17, *(unint64_t **)a2, *(unint64_t **)a3, 1 << v24, (v5 - v25), (v6 - v25), *v28);
      }
      else
      {
        v27 = (unint64_t **)result;
        result = bn_wexpand(result, 8 << v24);
        if (!(_DWORD)result)
          goto LABEL_65;
        result = bn_wexpand((uint64_t)v17, 4 << v24);
        if (!(_DWORD)result)
          goto LABEL_65;
        bn_mul_part_recursive(*v17, *(unint64_t **)a2, *(unint64_t **)a3, 1 << v24, v5 - v25, v6 - v25, *v27);
      }
      *((_DWORD *)v17 + 2) = v6 + v5;
      if (v17 == (_QWORD **)a1)
        goto LABEL_64;
    }
  }
  result = bn_wexpand(a1, *((int *)v17 + 2));
  if (!(_DWORD)result)
    goto LABEL_65;
  v29 = *((int *)v17 + 2);
  if ((_DWORD)v29)
  {
    memcpy(*(void **)a1, *v17, 8 * v29);
    LODWORD(v29) = *((_DWORD *)v17 + 2);
  }
  *(_DWORD *)(a1 + 8) = v29;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)v17 + 4);
LABEL_64:
  result = 1;
LABEL_65:
  if (!*((_BYTE *)ctx + 40))
  {
    v30 = *((_QWORD *)ctx + 1);
    v31 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v31;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v30 + 8 * v31);
  }
  return result;
}

uint64_t bn_mul_consttime(uint64_t a1, uint64_t a2, uint64_t a3, BN_CTX *a4)
{
  if (!*(_DWORD *)(a2 + 16) && !*(_DWORD *)(a3 + 16))
    return bn_mul_impl(a1, a2, a3, a4);
  ERR_put_error(3, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/bn/mul.c", 524);
  return 0;
}

void bn_mul_normal(_QWORD *a1, unint64_t *a2, unint64_t a3, unint64_t *a4, unint64_t a5)
{
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  const unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const unint64_t *v13;
  unint64_t i;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  char *v39;

  if (a3 < a5)
    v6 = a5;
  else
    v6 = a3;
  if (a3 < a5)
    v7 = a2;
  else
    v7 = a4;
  if (a3 < a5)
    v8 = a3;
  else
    v8 = a5;
  if (a3 < a5)
    v9 = a4;
  else
    v9 = a2;
  if (v8)
  {
    if (v6)
    {
      v10 = *v7;
      if (v6 >= 4)
      {
        v11 = 0;
        v12 = a1;
        v13 = v9;
        for (i = v6; i >= 4; i -= 4)
        {
          v15 = *v13 * v10;
          v16 = __CFADD__(v15, v11);
          v17 = v15 + v11;
          if (v16)
            v18 = ((*v13 * (unsigned __int128)v10) >> 64) + 1;
          else
            v18 = (*v13 * (unsigned __int128)v10) >> 64;
          *v12 = v17;
          v19 = v13[1];
          v20 = (v19 * (unsigned __int128)v10) >> 64;
          v21 = v19 * v10;
          v16 = __CFADD__(v21, v18);
          v22 = v21 + v18;
          if (v16)
            v23 = v20 + 1;
          else
            v23 = v20;
          v12[1] = v22;
          v24 = v13[2];
          v25 = (v24 * (unsigned __int128)v10) >> 64;
          v26 = v24 * v10;
          v16 = __CFADD__(v26, v23);
          v27 = v26 + v23;
          if (v16)
            v28 = v25 + 1;
          else
            v28 = v25;
          v12[2] = v27;
          v29 = v13[3];
          v30 = (v29 * (unsigned __int128)v10) >> 64;
          v31 = v29 * v10;
          v16 = __CFADD__(v31, v28);
          v32 = v31 + v28;
          if (v16)
            v11 = v30 + 1;
          else
            v11 = v30;
          v12[3] = v32;
          v13 += 4;
          v12 += 4;
        }
        if (!i)
          goto LABEL_39;
      }
      else
      {
        v11 = 0;
        v12 = a1;
        v13 = v9;
        i = v6;
      }
      do
      {
        v33 = *v13++;
        v34 = (v33 * (unsigned __int128)v10) >> 64;
        v35 = v33 * v10 + v11;
        if (__CFADD__(v33 * v10, v11))
          v11 = v34 + 1;
        else
          v11 = v34;
        *v12++ = v35;
        --i;
      }
      while (i);
    }
    else
    {
      v11 = 0;
    }
LABEL_39:
    a1[v6] = v11;
    if (v8 != 1)
    {
      v36 = 0;
      v37 = v7 + 4;
      v38 = 2 - v8;
      v39 = (char *)&a1[v6 + 2];
      do
      {
        *(_QWORD *)&v39[v36 * 8 - 8] = bn_mul_add_words(&a1[v36 + 1], v9, v6, v37[v36 - 3]);
        if (!v38)
          break;
        *(_QWORD *)&v39[v36 * 8] = bn_mul_add_words(&a1[v36 + 2], v9, v6, v37[v36 - 2]);
        if (v38 == -1)
          break;
        *(_QWORD *)&v39[v36 * 8 + 8] = bn_mul_add_words(&a1[v36 + 3], v9, v6, v37[v36 - 1]);
        if (v38 == -2)
          break;
        *(_QWORD *)&v39[v36 * 8 + 16] = bn_mul_add_words(&a1[v36 + 4], v9, v6, v37[v36]);
        v38 += 4;
        v36 += 4;
      }
      while (v38 != 1);
    }
    return;
  }
  if (8 * v6)
    bzero(a1, 8 * v6);
}

uint64_t bn_sqr_consttime(uint64_t a1, uint64_t a2, BN_CTX *ctx)
{
  unint64_t v4;
  BIGNUM *v7;
  BIGNUM *v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  unint64_t d;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t top;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned int *)(a2 + 8);
  if ((int)v4 <= 0)
  {
    *(_DWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    return 1;
  }
  if (*((_BYTE *)ctx + 40))
  {
    v7 = (BIGNUM *)a1;
    if (a2 != a1)
      goto LABEL_4;
LABEL_22:
    v7 = BN_CTX_get(ctx);
    v8 = BN_CTX_get(ctx);
    result = 0;
    if (!v7)
      goto LABEL_43;
    goto LABEL_23;
  }
  v10 = *((_QWORD *)ctx + 4);
  v11 = *((_QWORD *)ctx + 2);
  if (v11 == *((_QWORD *)ctx + 3))
  {
    if (v11)
      v12 = (3 * v11) >> 1;
    else
      v12 = 32;
    v13 = v12 > v11 && v12 >> 61 == 0;
    if (!v13 || (v14 = OPENSSL_realloc(*((_QWORD **)ctx + 1), 8 * v12)) == 0)
    {
      *((_WORD *)ctx + 20) = 257;
      v7 = (BIGNUM *)a1;
      if (a2 == a1)
        goto LABEL_22;
      goto LABEL_4;
    }
    *((_QWORD *)ctx + 1) = v14;
    *((_QWORD *)ctx + 3) = v12;
    v11 = *((_QWORD *)ctx + 2);
  }
  else
  {
    v14 = (_QWORD *)*((_QWORD *)ctx + 1);
  }
  v14[v11] = v10;
  ++*((_QWORD *)ctx + 2);
  v7 = (BIGNUM *)a1;
  if (a2 == a1)
    goto LABEL_22;
LABEL_4:
  v8 = BN_CTX_get(ctx);
  result = 0;
  if (!v7)
    goto LABEL_43;
LABEL_23:
  if (!v8)
    goto LABEL_43;
  result = bn_wexpand((uint64_t)v7, 2 * v4);
  if (!(_DWORD)result)
    goto LABEL_43;
  if ((_DWORD)v4 == 8)
  {
    bn_sqr_comba8(v7->d, *(unint64_t **)a2);
  }
  else if ((_DWORD)v4 == 4)
  {
    bn_sqr_comba4(v7->d, *(unint64_t **)a2);
  }
  else
  {
    if (v4 > 0xF)
    {
      if ((v4 & ((_DWORD)v4 - 1)) == 0)
      {
        result = bn_wexpand((uint64_t)v8, 4 * (int)v4);
        if (!(_DWORD)result)
          goto LABEL_43;
        bn_sqr_recursive(v7->d, *(unint64_t **)a2, v4, v8->d);
        goto LABEL_37;
      }
      result = bn_wexpand((uint64_t)v8, 2 * v4);
      if (!(_DWORD)result)
        goto LABEL_43;
      d = (unint64_t)v7->d;
      v16 = *(unint64_t **)a2;
      v17 = v8->d;
    }
    else
    {
      d = (unint64_t)v7->d;
      v16 = *(unint64_t **)a2;
      v17 = (unint64_t *)&v21;
    }
    bn_sqr_normal(d, v16, v4, v17);
  }
LABEL_37:
  v7->neg = 0;
  v7->top = 2 * v4;
  if (v7 != (BIGNUM *)a1)
  {
    result = bn_wexpand(a1, 2 * v4);
    if (!(_DWORD)result)
      goto LABEL_43;
    top = v7->top;
    if ((_DWORD)top)
    {
      memcpy(*(void **)a1, v7->d, 8 * top);
      LODWORD(top) = v7->top;
    }
    *(_DWORD *)(a1 + 8) = top;
    *(_DWORD *)(a1 + 16) = v7->neg;
  }
  result = 1;
LABEL_43:
  if (!*((_BYTE *)ctx + 40))
  {
    v19 = *((_QWORD *)ctx + 1);
    v20 = *((_QWORD *)ctx + 2) - 1;
    *((_QWORD *)ctx + 2) = v20;
    *((_QWORD *)ctx + 4) = *(_QWORD *)(v19 + 8 * v20);
  }
  return result;
}

unint64_t bn_sqr_normal(unint64_t result, _QWORD *a2, unint64_t a3, unint64_t *a4)
{
  unint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t *v40;
  const unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  double *v94;
  unint64_t v95;
  double *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  float64_t v101;
  float64x2x2_t v102;
  float64x2x2_t v103;

  if (!a3)
    return result;
  v6 = a2;
  v7 = (uint64_t *)result;
  v8 = 2 * a3;
  *(_QWORD *)(result + 16 * a3 - 8) = 0;
  *(_QWORD *)result = 0;
  v9 = a3 - 1;
  if (a3 == 1)
  {
    v10 = 0;
    v11 = 2;
    v12 = (uint64_t *)result;
    goto LABEL_35;
  }
  v13 = (_QWORD *)(result + 8);
  v14 = a2 + 1;
  v15 = *a2;
  if (a3 < 5)
  {
    v16 = 0;
    do
    {
LABEL_21:
      v35 = *v14++;
      v36 = (v35 * (unsigned __int128)v15) >> 64;
      v37 = v35 * v15 + v16;
      if (__CFADD__(v35 * v15, v16))
        v16 = v36 + 1;
      else
        v16 = v36;
      *v13++ = v37;
      --v9;
    }
    while (v9);
    goto LABEL_25;
  }
  v16 = 0;
  do
  {
    v17 = *v14 * v15;
    v18 = __CFADD__(v17, v16);
    v19 = v17 + v16;
    if (v18)
      v20 = ((*v14 * (unsigned __int128)v15) >> 64) + 1;
    else
      v20 = (*v14 * (unsigned __int128)v15) >> 64;
    *v13 = v19;
    v21 = v14[1];
    v22 = (v21 * (unsigned __int128)v15) >> 64;
    v23 = v21 * v15;
    v18 = __CFADD__(v23, v20);
    v24 = v23 + v20;
    if (v18)
      v25 = v22 + 1;
    else
      v25 = v22;
    v13[1] = v24;
    v26 = v14[2];
    v27 = (v26 * (unsigned __int128)v15) >> 64;
    v28 = v26 * v15;
    v18 = __CFADD__(v28, v25);
    v29 = v28 + v25;
    if (v18)
      v30 = v27 + 1;
    else
      v30 = v27;
    v13[2] = v29;
    v31 = v14[3];
    v32 = (v31 * (unsigned __int128)v15) >> 64;
    v33 = v31 * v15;
    v18 = __CFADD__(v33, v30);
    v34 = v33 + v30;
    if (v18)
      v16 = v32 + 1;
    else
      v16 = v32;
    v13[3] = v34;
    v14 += 4;
    v13 += 4;
    v9 -= 4;
  }
  while (v9 >= 4);
  if (v9)
    goto LABEL_21;
LABEL_25:
  *(_QWORD *)(result + 8 * a3) = v16;
  if (a3 >= 3)
  {
    v38 = a3 - 2;
    v39 = (unint64_t *)(result + 24);
    v40 = (unint64_t *)(result + 8 * a3 + 8);
    v41 = a2 + 2;
    do
    {
      result = bn_mul_add_words(v39, v41, v38, *(v41 - 1));
      *v40++ = result;
      v39 += 2;
      ++v41;
      --v38;
    }
    while (v38);
  }
  if (a3 < 2)
  {
    v10 = 0;
    v11 = v8;
    v12 = v7;
LABEL_35:
    v53 = v12;
    v54 = v12;
    do
    {
      v56 = *v53++;
      v55 = v56;
      v58 = *v12++;
      v57 = v58;
      v18 = __CFADD__(v55, v10);
      v59 = v55 + v10;
      v60 = v18;
      v18 = __CFADD__(v59, v57);
      v61 = v59 + v57;
      if (v18)
        v10 = v60 + 1;
      else
        v10 = v60;
      *v54++ = v61;
      --v11;
    }
    while (v11);
    goto LABEL_43;
  }
  v10 = 0;
  v11 = v8;
  v12 = v7;
  do
  {
    v42 = v12[1];
    v43 = (unint64_t)*v12 >> 63;
    v44 = v42 >> 63;
    v42 *= 2;
    v18 = __CFADD__(__CFADD__(v10, 2 * *v12), v42);
    v45 = __CFADD__(v10, 2 * *v12) + v42;
    v18 |= __CFADD__(v43, v45);
    *v12 = v10 + 2 * *v12;
    v12[1] = v43 + v45;
    v46 = v12[2];
    v47 = v12[3];
    v48 = v46 >> 63;
    v46 *= 2;
    v50 = v18 + v46;
    v18 = __CFADD__(v18, v46) | __CFADD__(v44, v50);
    v49 = v44 + v50;
    v52 = v18 + 2 * v47;
    v18 = __CFADD__(v18, 2 * v47) | __CFADD__(v48, v52);
    v51 = v48 + v52;
    v10 = v47 >> 63;
    if (v18)
      ++v10;
    v12[2] = v49;
    v12[3] = v51;
    v12 += 4;
    v11 -= 4;
  }
  while (v11 >= 4);
  if (v11)
    goto LABEL_35;
LABEL_43:
  v62 = a4;
  v63 = a3;
  if (a3 < 4)
    goto LABEL_48;
  do
  {
    *(_OWORD *)v62 = *v6 * (unsigned __int128)*v6;
    *((_OWORD *)v62 + 1) = v6[1] * (unsigned __int128)v6[1];
    *((_OWORD *)v62 + 2) = v6[2] * (unsigned __int128)v6[2];
    *((_OWORD *)v62 + 3) = v6[3] * (unsigned __int128)v6[3];
    v6 += 4;
    v62 += 8;
    v63 -= 4;
  }
  while (v63 >= 4);
  if (v63)
  {
LABEL_48:
    if (v63 < 4 || v62 < &v6[v63] && v6 < &v62[2 * v63])
    {
      v64 = v62;
      v65 = v63;
      do
      {
LABEL_50:
        v66 = *v6++;
        *(_OWORD *)v64 = v66 * (unsigned __int128)v66;
        v64 += 2;
        --v65;
      }
      while (v65);
      goto LABEL_51;
    }
    v64 = &v62[2 * (v63 & 0xFFFFFFFFFFFFFFFCLL)];
    v65 = v63 & 3;
    v93 = v6 + 2;
    v94 = (double *)(v62 + 4);
    v95 = v63 & 0xFFFFFFFFFFFFFFFCLL;
    v6 += v63 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v96 = v94 - 4;
      v97 = *(v93 - 1);
      v98 = *(v93 - 2);
      v99 = v93[1];
      v100 = *v93;
      *(_QWORD *)&v101 = (v99 * (unsigned __int128)v99) >> 64;
      result = v99 * v99;
      *(_QWORD *)&v102.val[0].f64[0] = v98 * v98;
      *(_QWORD *)&v102.val[0].f64[1] = v97 * v97;
      *(_QWORD *)&v102.val[1].f64[0] = (v98 * (unsigned __int128)v98) >> 64;
      *(_QWORD *)&v102.val[1].f64[1] = (v97 * (unsigned __int128)v97) >> 64;
      *(_QWORD *)&v103.val[0].f64[0] = v100 * v100;
      *(_QWORD *)&v103.val[0].f64[1] = result;
      *(_QWORD *)&v103.val[1].f64[0] = (v100 * (unsigned __int128)v100) >> 64;
      vst2q_f64(v96, v102);
      v103.val[1].f64[1] = v101;
      vst2q_f64(v94, v103);
      v93 += 4;
      v94 += 8;
      v95 -= 4;
    }
    while (v95);
    if (v63 != (v63 & 0xFFFFFFFFFFFFFFFCLL))
      goto LABEL_50;
  }
LABEL_51:
  if (a3 < 2)
  {
    v67 = 0;
LABEL_71:
    v85 = v7;
    do
    {
      v87 = *v7++;
      v86 = v87;
      v89 = *a4++;
      v88 = v89;
      v18 = __CFADD__(v86, v67);
      v90 = v86 + v67;
      v91 = v18;
      v18 = __CFADD__(v90, v88);
      v92 = v90 + v88;
      if (v18)
        v67 = v91 + 1;
      else
        v67 = v91;
      *v85++ = v92;
      --v8;
    }
    while (v8);
    return result;
  }
  v67 = 0;
  do
  {
    v68 = *a4;
    v69 = v7[1];
    v18 = __CFADD__(*v7, v67);
    v70 = *v7 + v67;
    v71 = v18;
    v18 = __CFADD__(v70, v68);
    *v7 = v70 + v68;
    v72 = a4[1];
    v73 = v71 + v18 + v69;
    if (__CFADD__(v18, v69) | __CFADD__(v71, v18 + v69))
      v74 = 1;
    else
      v74 = 0;
    v18 = __CFADD__(v73, v72);
    v7[1] = v73 + v72;
    v75 = a4[2];
    v76 = v7[2];
    v77 = v7[3];
    v79 = v18;
    v18 = __CFADD__(v18, v76);
    v78 = v79 + v76;
    v18 |= __CFADD__(v74, v78);
    v78 += v74;
    v80 = v18;
    v7[2] = v78 + v75;
    v81 = a4[3];
    v18 = __CFADD__(v81, v77);
    v82 = v81 + v77;
    v83 = v18;
    v18 = __CFADD__(__CFADD__(v78, v75), v82);
    v84 = __CFADD__(v78, v75) + v82;
    v18 |= __CFADD__(v80, v84);
    v84 += v80;
    if (v18)
      v67 = v83 + 1;
    else
      v67 = v83;
    v7[3] = v84;
    v7 += 4;
    a4 += 4;
    v8 -= 4;
  }
  while (v8 >= 4);
  if (v8)
    goto LABEL_71;
  return result;
}

_QWORD *bn_sqr_recursive(_QWORD *a1, unint64_t *a2, unint64_t a3, unint64_t *a4)
{
  _QWORD *result;
  unint64_t *v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t i;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  uint64_t v61;
  int8x16_t *v62;
  int8x16_t v63;
  unint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  unint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  unint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t j;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t v104;
  BOOL v105;
  BOOL v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BOOL8 v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t k;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;

  if (a3 == 8)
    return bn_sqr_comba8(a1, a2);
  v7 = a4;
  if (a3 <= 0xF)
    return (_QWORD *)bn_sqr_normal((unint64_t)a1, a2, a3, a4);
  v9 = 0;
  v10 = a3 >> 1;
  v11 = 2 * a3;
  v12 = a3 >> 1;
  v13 = &a2[v12];
  v14 = &a4[v12];
  v15 = a3 >> 1;
  v16 = &a2[v12];
  v17 = a2;
  do
  {
    v18 = *v17 - (v9 + *v16);
    v9 = v9 & (*v17 == *v16);
    if (*v17 < *v16)
      v9 = 1;
    *v14 = v18;
    v19 = v17[1];
    v20 = v16[1];
    v21 = v19 - (v20 + v9);
    if (v19 != v20)
      v9 = 0;
    if (v19 < v20)
      v9 = 1;
    v14[1] = v21;
    v22 = v17[2];
    v23 = v16[2];
    v24 = v22 - (v23 + v9);
    if (v22 != v23)
      v9 = 0;
    if (v22 < v23)
      v9 = 1;
    v14[2] = v24;
    v25 = v17[3];
    v26 = v16[3];
    v27 = v25 - (v26 + v9);
    if (v25 != v26)
      v9 = 0;
    if (v25 < v26)
      v9 = 1;
    v14[3] = v27;
    v17 += 4;
    v16 += 4;
    v14 += 4;
    v15 -= 4;
  }
  while (v15 >= 4);
  if (v15)
  {
    for (i = 0; i != v15; ++i)
    {
      v29 = v17[i];
      v30 = v16[i];
      v31 = v29 - (v9 + v30);
      v9 = v9 & (v29 == v30);
      if (v29 < v30)
        v9 = 1;
      v14[i] = v31;
    }
  }
  v32 = 0;
  v33 = 0;
  v34 = a3 >> 1;
  do
  {
    v35 = &a2[v32];
    v36 = &v13[v32];
    v37 = &a4[v32];
    v38 = v13[v32];
    v39 = a2[v32];
    v40 = v38 - (v33 + v39);
    v33 = v33 & (v38 == v39);
    if (v38 < v39)
      v33 = 1;
    *v37 = v40;
    v41 = v36[1];
    v42 = v35[1];
    v43 = v41 - v42 - v33;
    if (v41 != v42)
      v33 = 0;
    if (v41 < v42)
      v33 = 1;
    v37[1] = v43;
    v44 = v36[2];
    v45 = v35[2];
    v46 = v44 - v45 - v33;
    if (v44 != v45)
      v33 = 0;
    if (v44 < v45)
      v33 = 1;
    v37[2] = v46;
    v47 = v36[3];
    v48 = v35[3];
    v49 = v47 - v48 - v33;
    if (v47 != v48)
      v33 = 0;
    if (v47 < v48)
      v33 = 1;
    v37[3] = v49;
    v34 -= 4;
    v32 += 4;
  }
  while (v34 >= 4);
  if (v34)
  {
    v50 = 0;
    v51 = &v13[v32];
    v52 = &a2[v32];
    v53 = &a4[v32];
    do
    {
      v54 = v51[v50];
      v55 = v52[v50];
      v56 = v54 - (v33 + v55);
      v33 = v33 & (v54 == v55);
      if (v54 < v55)
        v33 = 1;
      v53[v50++] = v56;
    }
    while (v34 != v50);
  }
  v57 = -v9;
  v58 = v10 & 0x7FFFFFFFFFFFFFFCLL;
  v59 = (int8x16_t)vdupq_n_s64(v57);
  v60 = (int8x16_t)vdupq_n_s64(~v57);
  v61 = v10 & 0x7FFFFFFFFFFFFFFCLL;
  v62 = (int8x16_t *)a4;
  do
  {
    v63 = vorrq_s8(vandq_s8(*(int8x16_t *)((char *)&v62[1] + v12 * 8), v60), vandq_s8(v62[1], v59));
    *v62 = vorrq_s8(vandq_s8(*(int8x16_t *)((char *)v62 + v12 * 8), v60), vandq_s8(*v62, v59));
    v62[1] = v63;
    v62 += 2;
    v61 -= 4;
  }
  while (v61);
  if (v10 != v58)
  {
    v64 = v10 - v58;
    v65 = &a4[v58];
    do
    {
      *v65 = v65[v10] & ~v57 | *v65 & v57;
      ++v65;
      --v64;
    }
    while (v64);
  }
  v66 = a3;
  v67 = &a4[a3];
  bn_sqr_recursive(v67, a4, a3 >> 1, &a4[2 * a3]);
  bn_sqr_recursive(a1, a2, a3 >> 1, &v7[2 * a3]);
  v68 = &a1[v66];
  result = (_QWORD *)bn_sqr_recursive(&a1[v66], v13, a3 >> 1, &v7[2 * a3]);
  v69 = 0;
  v70 = a3;
  v71 = a1;
  v72 = v7;
  do
  {
    v73 = *v68;
    v105 = __CFADD__(*v71, v69);
    v74 = *v71 + v69;
    v75 = v105;
    v105 = __CFADD__(v74, v73);
    *v72 = v74 + v73;
    v76 = v71[1];
    v77 = v68[1];
    v79 = v105;
    v105 = __CFADD__(v105, v76);
    v78 = v79 + v76;
    v105 |= __CFADD__(v75, v78);
    v78 += v75;
    v80 = v105;
    v105 = __CFADD__(v78, v77);
    v72[1] = v78 + v77;
    v81 = v71[2];
    v82 = v68[2];
    v84 = v105;
    v105 = __CFADD__(v105, v81);
    v83 = v84 + v81;
    v105 |= __CFADD__(v80, v83);
    v83 += v80;
    v85 = v105;
    v72[2] = v83 + v82;
    v86 = v71[3];
    v87 = v68[3];
    v105 = __CFADD__(v87, v86);
    v88 = v87 + v86;
    v89 = v105;
    v105 = __CFADD__(__CFADD__(v83, v82), v88) | __CFADD__(v85, __CFADD__(v83, v82) + v88);
    v90 = v85 + __CFADD__(v83, v82) + v88;
    if (v105)
      v69 = v89 + 1;
    else
      v69 = v89;
    v72[3] = v90;
    v71 += 4;
    v68 += 4;
    v72 += 4;
    v70 -= 4;
  }
  while (v70 >= 4);
  if (v70)
  {
    for (j = 0; j != v70; ++j)
    {
      v92 = v71[j];
      v93 = v68[j];
      v105 = __CFADD__(v92, v69);
      v94 = v92 + v69;
      v95 = v105;
      v105 = __CFADD__(v94, v93);
      v96 = v94 + v93;
      if (v105)
        v69 = v95 + 1;
      else
        v69 = v95;
      v72[j] = v96;
    }
  }
  v97 = 0;
  v98 = a3;
  do
  {
    v99 = v7[a3];
    v100 = *v7 - (v97 + v99);
    v97 = v97 & (*v7 == v99);
    if (*v7 < v99)
      v97 = 1;
    v7[a3] = v100;
    v101 = v7[1];
    v102 = &v7[v66];
    v103 = v7[v66 + 1];
    v104 = v7[v66 + 2];
    v105 = v101 >= v103;
    v106 = v101 == v103;
    v107 = v101 - (v103 + v97);
    if (!v106)
      v97 = 0;
    if (!v105)
      v97 = 1;
    v102[1] = v107;
    v108 = v7[2];
    v109 = v108 - (v104 + v97);
    if (v108 != v104)
      v97 = 0;
    if (v108 < v104)
      v97 = 1;
    v102[2] = v109;
    v110 = v7[3];
    v111 = v102[3];
    v112 = v110 - (v111 + v97);
    if (v110 != v111)
      v97 = 0;
    if (v110 < v111)
      v97 = 1;
    v102[3] = v112;
    v7 += 4;
    v98 -= 4;
  }
  while (v98 >= 4);
  if (v98)
  {
    v113 = 0;
    v114 = &v7[a3];
    do
    {
      v115 = v7[v113];
      v116 = v114[v113];
      v117 = v115 - (v97 + v116);
      v97 = v97 & (v115 == v116);
      if (v115 < v116)
        v97 = 1;
      v114[v113++] = v117;
    }
    while (v98 != v113);
  }
  v118 = 0;
  v119 = &a1[v10];
  v120 = a3;
  do
  {
    v121 = *v67;
    v122 = v119[1];
    v105 = __CFADD__(*v119, v118);
    v123 = *v119 + v118;
    v124 = v105;
    v105 = __CFADD__(v123, v121);
    *v119 = v123 + v121;
    v125 = v67[1];
    v126 = v124 + v105 + v122;
    if (__CFADD__(v105, v122) | __CFADD__(v124, v105 + v122))
      v127 = 1;
    else
      v127 = 0;
    v105 = __CFADD__(v126, v125);
    v119[1] = v126 + v125;
    v128 = v67[2];
    v129 = v119[2];
    v130 = v119[3];
    v132 = v105;
    v105 = __CFADD__(v105, v129);
    v131 = v132 + v129;
    v105 |= __CFADD__(v127, v131);
    v131 += v127;
    v133 = v105;
    v119[2] = v131 + v128;
    v134 = v67[3];
    v105 = __CFADD__(v134, v130);
    v135 = v134 + v130;
    v136 = v105;
    v105 = __CFADD__(__CFADD__(v131, v128), v135);
    v137 = __CFADD__(v131, v128) + v135;
    v105 |= __CFADD__(v133, v137);
    v137 += v133;
    if (v105)
      v118 = v136 + 1;
    else
      v118 = v136;
    v119[3] = v137;
    v119 += 4;
    v67 += 4;
    v120 -= 4;
  }
  while (v120 >= 4);
  if (v120)
  {
    for (k = 0; k != v120; ++k)
    {
      v139 = v119[k];
      v140 = v67[k];
      v105 = __CFADD__(v139, v118);
      v141 = v139 + v118;
      v142 = v105;
      v105 = __CFADD__(v141, v140);
      v143 = v141 + v140;
      if (v105)
        v118 = v142 + 1;
      else
        v118 = v142;
      v119[k] = v143;
    }
  }
  if (v10 + a3 < v11)
  {
    v144 = v69 - v97 + v118;
    v145 = a3 - v10;
    v146 = &a1[v10 + a3];
    do
    {
      v147 = *v146 + v144;
      v144 = __CFADD__(*v146, v144);
      *v146++ = v147;
      --v145;
    }
    while (v145);
  }
  return result;
}

void bn_mul_part_recursive(uint64_t *a1, unint64_t *a2, unint64_t *a3, signed int a4, signed int a5, signed int a6, unint64_t *a7)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t *v30;
  int v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t *v65;
  unint64_t *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  BOOL v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  _BOOL8 v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BOOL8 v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t *v153;
  unint64_t v154;
  int8x16_t v155;
  int8x16_t v156;
  int8x16_t *v157;
  int8x16_t *v158;
  unint64_t v159;
  int8x16_t v160;
  unint64_t *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v166;

  v13 = 2 * a4;
  if (a4 <= 7)
  {
    bn_mul_normal(a1, a2, a5 + a4, a3, a6 + a4);
    if ((_DWORD)v13 != a6 + a5)
      bzero(&a1[(int)v13 + a5 + a6], (int)v13 - (a6 + a5));
    return;
  }
  v166 = a4;
  v14 = a4;
  v15 = &a7[2 * a4];
  v162 = &a2[v14];
  v164 = bn_abs_sub_part_words((unint64_t)a7, a2, &a2[v14], a5, a4 - a5, (unint64_t)v15);
  v17 = &a7[v14];
  v18 = &a3[v14];
  v163 = bn_abs_sub_part_words((unint64_t)v17, v18, a3, a6, a6 - a4, (unint64_t)v15);
  if (a4 == 8)
  {
    v19 = a7;
    bn_mul_comba8(v15, a7, v17);
    v20 = a1;
    bn_mul_comba8(a1, a2, a3);
    v21 = &a1[v13];
    bn_mul_normal(v21, v162, a5, v18, a6);
    if ((_DWORD)v13 != a6 + a5)
      bzero(&a1[a6 + a5 + (int)v13], 8 * ((int)v13 - (a6 + a5)));
    v22 = 8;
    v24 = v163;
    v23 = v164;
  }
  else
  {
    v161 = v18;
    v25 = &a7[4 * v166];
    bn_mul_recursive(v15, a7, v17, a4, 0, 0, v25);
    v20 = a1;
    bn_mul_recursive(a1, a2, a3, a4, 0, 0, v25);
    v21 = &a1[v13];
    bzero(v21, 8 * v13);
    if (a5 > 15 || a6 >= 16)
    {
      if (a5 <= a6)
        v31 = a6;
      else
        v31 = a5;
      LODWORD(v32) = a4;
      while (1)
      {
        v33 = (int)v32 >= 0 ? v32 : (int)v32 + 1;
        v32 = (v33 >> 1);
        if ((int)v32 < v31)
          break;
        v34 = a5 == (_DWORD)v32 || a6 == (_DWORD)v32;
        if (v34)
        {
          bn_mul_recursive(&a1[v13], v162, v161, v32, (a5 - v32), (a6 - v32), v25);
          v22 = a4;
          v19 = a7;
          v24 = v163;
          v23 = v164;
          if (v13 < 4)
            goto LABEL_11;
          goto LABEL_28;
        }
      }
      bn_mul_part_recursive(&a1[v13], v162, v161, v32, (a5 - v32), (a6 - v32), v25);
      v22 = a4;
      v19 = a7;
      v24 = v163;
      v23 = v164;
      if (v13 < 4)
        goto LABEL_11;
    }
    else
    {
      bn_mul_normal(&a1[v13], v162, a5, v161, a6);
      v22 = a4;
      v19 = a7;
      v24 = v163;
      v23 = v164;
      if (v13 < 4)
      {
LABEL_11:
        v26 = 0;
        v27 = 1;
        v28 = v13;
        v29 = a1;
        v30 = v19;
        do
        {
LABEL_46:
          v54 = *v29++;
          v53 = v54;
          v56 = *v21++;
          v55 = v56;
          v77 = __CFADD__(v53, v26);
          v57 = v53 + v26;
          v58 = v77;
          v77 = __CFADD__(v57, v55);
          v59 = v57 + v55;
          if (v77)
            v26 = v58 + 1;
          else
            v26 = v58;
          *v30++ = v59;
          --v28;
        }
        while (v28);
        goto LABEL_53;
      }
    }
  }
LABEL_28:
  v26 = 0;
  v28 = v13;
  v29 = v20;
  v30 = v19;
  do
  {
    v35 = *v21;
    v77 = __CFADD__(*v29, v26);
    v36 = *v29 + v26;
    v37 = v77;
    v77 = __CFADD__(v36, v35);
    *v30 = v36 + v35;
    v38 = v29[1];
    v39 = v21[1];
    v41 = v77;
    v77 = __CFADD__(v77, v38);
    v40 = v41 + v38;
    v77 |= __CFADD__(v37, v40);
    v40 += v37;
    v42 = v77;
    v77 = __CFADD__(v40, v39);
    v30[1] = v40 + v39;
    v43 = v29[2];
    v44 = v21[2];
    v46 = v77;
    v77 = __CFADD__(v77, v43);
    v45 = v46 + v43;
    v77 |= __CFADD__(v42, v45);
    v45 += v42;
    v47 = v77;
    v30[2] = v45 + v44;
    v48 = v29[3];
    v49 = v21[3];
    v77 = __CFADD__(v49, v48);
    v50 = v49 + v48;
    v51 = v77;
    v77 = __CFADD__(__CFADD__(v45, v44), v50) | __CFADD__(v47, __CFADD__(v45, v44) + v50);
    v52 = v47 + __CFADD__(v45, v44) + v50;
    if (v77)
      v26 = v51 + 1;
    else
      v26 = v51;
    v30[3] = v52;
    v29 += 4;
    v21 += 4;
    v30 += 4;
    v28 -= 4;
  }
  while (v28 >= 4);
  v27 = 0;
  if (v28)
    goto LABEL_46;
LABEL_53:
  v60 = v24 ^ v23;
  v61 = 4 * v166;
  v62 = 0;
  if ((v27 & 1) != 0)
  {
    v63 = v13;
    v64 = v15;
    v65 = v19;
    v66 = &v19[4 * v166];
    goto LABEL_73;
  }
  v67 = v13;
  v63 = v13;
  v65 = v19;
  do
  {
    v68 = &v65[4 * v166];
    v69 = v65[v13];
    v70 = v65[1];
    v71 = *v65 - v62 - v69;
    v62 = v62 & (*v65 == v69);
    if (*v65 < v69)
      v62 = 1;
    *v68 = v71;
    v72 = v65[v67 + 1];
    v73 = v65[v67 + 2];
    v74 = v70 - v72 - v62;
    if (v70 != v72)
      v62 = 0;
    if (v70 < v72)
      v62 = 1;
    v75 = v65[2];
    v76 = v65[3];
    v77 = v75 >= v73;
    v34 = v75 == v73;
    v78 = v75 - v73 - v62;
    if (!v34)
      v62 = 0;
    if (!v77)
      v62 = 1;
    v68[1] = v74;
    v68[2] = v78;
    v79 = v65[v67 + 3];
    v80 = v76 - v79 - v62;
    if (v76 != v79)
      v62 = 0;
    if (v76 < v79)
      v62 = 1;
    v68[3] = v80;
    v65 += 4;
    v63 -= 4;
  }
  while (v63 >= 4);
  if (v63)
  {
    v64 = &v65[v13];
    v66 = &v65[4 * v166];
    do
    {
LABEL_73:
      v82 = *v65++;
      v81 = v82;
      v83 = *v64++;
      v84 = v81 - (v62 + v83);
      v62 = v62 & (v81 == v83);
      if (v81 < v83)
        v62 = 1;
      *v66++ = v84;
      --v63;
    }
    while (v63);
  }
  v85 = 0;
  if ((v27 & 1) != 0)
  {
    v86 = v13;
    v87 = v15;
    v88 = v19;
    goto LABEL_97;
  }
  v86 = v13;
  v88 = v19;
  do
  {
    v89 = v88[v13];
    v90 = v88[1];
    v77 = __CFADD__(*v88, v85);
    v91 = *v88 + v85;
    v92 = v77;
    v77 = __CFADD__(v91, v89);
    v88[v13] = v91 + v89;
    v93 = &v88[v13];
    v94 = v92 + v77 + v90;
    if (__CFADD__(v77, v90) | __CFADD__(v92, v77 + v90))
      v95 = 1;
    else
      v95 = 0;
    v96 = v93[1];
    v97 = v93[2];
    v77 = __CFADD__(v94, v96);
    v93[1] = v94 + v96;
    v99 = v88[2];
    v98 = v88[3];
    v101 = v77;
    v77 = __CFADD__(v77, v99);
    v100 = v101 + v99;
    v77 |= __CFADD__(v95, v100);
    v100 += v95;
    v102 = v77;
    v103 = v93[3];
    v77 = __CFADD__(v103, v98);
    v104 = v103 + v98;
    v105 = v77;
    v107 = v100 + v97;
    v77 = __CFADD__(__CFADD__(v100, v97), v104) | __CFADD__(v102, (__PAIR128__(v104, v100) + v97) >> 64);
    v106 = v102 + ((__PAIR128__(v104, v100) + v97) >> 64);
    if (v77)
      v85 = v105 + 1;
    else
      v85 = v105;
    v93[2] = v107;
    v93[3] = v106;
    v88 += 4;
    v86 -= 4;
  }
  while (v86 >= 4);
  if (v86)
  {
    v87 = &v88[v13];
LABEL_97:
    v108 = v87;
    do
    {
      v110 = *v88++;
      v109 = v110;
      v112 = *v87++;
      v111 = v112;
      v77 = __CFADD__(v109, v85);
      v113 = v109 + v85;
      v114 = v77;
      v77 = __CFADD__(v113, v111);
      v115 = v113 + v111;
      if (v77)
        v85 = v114 + 1;
      else
        v85 = v114;
      *v108++ = v115;
      --v86;
    }
    while (v86);
  }
  v116 = ~v60;
  if (v13 < 8 || v15 < &v19[v61 + v13] && &v19[4 * v166] < &v19[2 * v13])
  {
    v117 = 0;
LABEL_109:
    v118 = v13 - v117;
    v119 = v117;
    v120 = &v19[v117 + v13];
    v121 = &v19[4 * v166 + v119];
    do
    {
      v122 = *v121++;
      *v120 = *v120 & v116 | v122 & v60;
      ++v120;
      --v118;
    }
    while (v118);
    goto LABEL_111;
  }
  v155 = (int8x16_t)vdupq_n_s64(v60);
  v156 = (int8x16_t)vdupq_n_s64(v116);
  v117 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  v157 = (int8x16_t *)&v19[4 * v166 + 2];
  v158 = (int8x16_t *)&v19[v13 + 2];
  v159 = v13 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v160 = vorrq_s8(vandq_s8(*v158, v156), vandq_s8(*v157, v155));
    v158[-1] = vorrq_s8(vandq_s8(v158[-1], v156), vandq_s8(v157[-1], v155));
    *v158 = v160;
    v157 += 2;
    v158 += 2;
    v159 -= 4;
  }
  while (v159);
  if (v117 != v13)
    goto LABEL_109;
LABEL_111:
  v123 = &v20[v22];
  if ((v27 & 1) != 0)
  {
    v124 = 0;
LABEL_131:
    v142 = v123;
    do
    {
      v144 = *v123++;
      v143 = v144;
      v146 = *v15++;
      v145 = v146;
      v77 = __CFADD__(v143, v124);
      v147 = v143 + v124;
      v148 = v77;
      v77 = __CFADD__(v147, v145);
      v149 = v147 + v145;
      if (v77)
        v124 = v148 + 1;
      else
        v124 = v148;
      *v142++ = v149;
      --v13;
    }
    while (v13);
    goto LABEL_139;
  }
  v124 = 0;
  do
  {
    v125 = *v15;
    v126 = v123[1];
    v77 = __CFADD__(*v123, v124);
    v127 = *v123 + v124;
    v128 = v77;
    v77 = __CFADD__(v127, v125);
    *v123 = v127 + v125;
    v129 = v15[1];
    v130 = v128 + v77 + v126;
    if (__CFADD__(v77, v126) | __CFADD__(v128, v77 + v126))
      v131 = 1;
    else
      v131 = 0;
    v77 = __CFADD__(v130, v129);
    v123[1] = v130 + v129;
    v132 = v15[2];
    v134 = v123[2];
    v133 = v123[3];
    v136 = v77;
    v77 = __CFADD__(v77, v134);
    v135 = v136 + v134;
    v77 |= __CFADD__(v131, v135);
    v135 += v131;
    v137 = v77;
    v123[2] = v135 + v132;
    v138 = v15[3];
    v77 = __CFADD__(v138, v133);
    v139 = v138 + v133;
    v140 = v77;
    v77 = __CFADD__(__CFADD__(v135, v132), v139);
    v141 = __CFADD__(v135, v132) + v139;
    v77 |= __CFADD__(v137, v141);
    v141 += v137;
    if (v77)
      v124 = v140 + 1;
    else
      v124 = v140;
    v123[3] = v141;
    v123 += 4;
    v15 += 4;
    v13 -= 4;
  }
  while (v13 >= 4);
  if (v13)
    goto LABEL_131;
LABEL_139:
  v150 = 3 * v22;
  if ((int)(3 * v22) < (int)v61)
  {
    v151 = (v60 & (v26 - v62) | (v85 + v26) & v116) + v124;
    v152 = v61 - v150;
    v153 = (unint64_t *)&v20[v150];
    do
    {
      v154 = *v153 + v151;
      v151 = __CFADD__(*v153, v151);
      *v153++ = v154;
      --v152;
    }
    while (v152);
  }
}

void bn_mul_recursive(_QWORD *a1, unint64_t *a2, unint64_t *a3, unsigned int a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t i;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t j;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BOOL8 v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t k;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  int8x16_t v138;
  int8x16_t v139;
  int8x16_t *v140;
  int8x16_t *v141;
  uint64_t v142;
  int8x16_t v143;
  unint64_t *v144;
  unint64_t *v145;
  unint64_t *v146;
  uint64_t v147;
  signed int v150;
  uint64_t v151;

  v12 = a6 | a5;
  if (a4 == 8 && !v12)
  {
    bn_mul_comba8(a1, a2, a3);
    return;
  }
  if ((int)a4 <= 15)
  {
    bn_mul_normal(a1, a2, (int)(a5 + a4), a3, (int)(a6 + a4));
    if ((int)a6 + (int)a5 < 0)
      bzero(&a1[(int)(a5 + 2 * a4 + a6)], 8 * -(a6 + a5));
    return;
  }
  v13 = a4 >> 1;
  v150 = v13 + a6;
  v14 = a4;
  v15 = &a7[a4];
  v146 = &a2[v13];
  v17 = bn_abs_sub_part_words((unint64_t)a7, a2, v146, (int)v13 + (int)a5, -(int)a5, (unint64_t)v15);
  v144 = &a7[v13];
  v145 = &a3[v13];
  v18 = bn_abs_sub_part_words((unint64_t)v144, v145, a3, v150, a6, (unint64_t)v15) ^ v17;
  v147 = v13;
  v151 = 2 * a4;
  if ((_DWORD)v13 != 8 || v12)
  {
    v19 = a7;
    v22 = &a7[2 * a4];
    bn_mul_recursive(v15, a7, v144, v13, 0, 0, v22);
    v21 = v13;
    v20 = a1;
    bn_mul_recursive(a1, a2, a3, v147, 0, 0, v22);
    bn_mul_recursive(&a1[v14], v146, v145, v147, a5, a6, v22);
  }
  else
  {
    v19 = a7;
    bn_mul_comba8(v15, a7, v144);
    v20 = a1;
    bn_mul_comba8(a1, a2, a3);
    bn_mul_comba8(&a1[v14], v146, v145);
    v21 = v147;
  }
  v23 = 0;
  v24 = v14;
  v25 = v20;
  v26 = v19;
  v27 = &v20[v14];
  do
  {
    v28 = *v27;
    v29 = __CFADD__(*v25, v23);
    v30 = *v25 + v23;
    v31 = v29;
    v29 = __CFADD__(v30, v28);
    *v26 = v30 + v28;
    v32 = v25[1];
    v33 = v27[1];
    v35 = v29;
    v29 = __CFADD__(v29, v32);
    v34 = v35 + v32;
    v29 |= __CFADD__(v31, v34);
    v34 += v31;
    v36 = v29;
    v29 = __CFADD__(v34, v33);
    v26[1] = v34 + v33;
    v37 = v25[2];
    v38 = v27[2];
    v40 = v29;
    v29 = __CFADD__(v29, v37);
    v39 = v40 + v37;
    v29 |= __CFADD__(v36, v39);
    v39 += v36;
    v41 = v29;
    v26[2] = v39 + v38;
    v42 = v25[3];
    v43 = v27[3];
    v29 = __CFADD__(v43, v42);
    v44 = v43 + v42;
    v45 = v29;
    v29 = __CFADD__(__CFADD__(v39, v38), v44) | __CFADD__(v41, __CFADD__(v39, v38) + v44);
    v46 = v41 + __CFADD__(v39, v38) + v44;
    if (v29)
      v23 = v45 + 1;
    else
      v23 = v45;
    v26[3] = v46;
    v25 += 4;
    v27 += 4;
    v26 += 4;
    v24 -= 4;
  }
  while (v24 >= 4);
  if (v24)
  {
    for (i = 0; i != v24; ++i)
    {
      v48 = v25[i];
      v49 = v27[i];
      v29 = __CFADD__(v48, v23);
      v50 = v48 + v23;
      v51 = v29;
      v29 = __CFADD__(v50, v49);
      v52 = v50 + v49;
      if (v29)
        v23 = v51 + 1;
      else
        v23 = v51;
      v26[i] = v52;
    }
  }
  v53 = 0;
  v54 = v14;
  v55 = v15;
  v56 = v19;
  v57 = (uint64_t *)&v19[v151];
  do
  {
    v58 = *v56 - (v53 + *v55);
    v53 = v53 & (*v56 == *v55);
    if (*v56 < *v55)
      v53 = 1;
    *v57 = v58;
    v59 = v56[1];
    v60 = v55[1];
    v61 = v59 - (v60 + v53);
    if (v59 != v60)
      v53 = 0;
    if (v59 < v60)
      v53 = 1;
    v57[1] = v61;
    v62 = v56[2];
    v63 = v55[2];
    v64 = v62 - (v63 + v53);
    if (v62 != v63)
      v53 = 0;
    if (v62 < v63)
      v53 = 1;
    v57[2] = v64;
    v65 = v56[3];
    v66 = v55[3];
    v67 = v65 - (v66 + v53);
    if (v65 != v66)
      v53 = 0;
    if (v65 < v66)
      v53 = 1;
    v57[3] = v67;
    v56 += 4;
    v55 += 4;
    v57 += 4;
    v54 -= 4;
  }
  while (v54 >= 4);
  if (v54)
  {
    for (j = 0; j != v54; ++j)
    {
      v69 = v56[j];
      v70 = v55[j];
      v71 = v69 - (v53 + v70);
      v53 = v53 & (v69 == v70);
      if (v69 < v70)
        v53 = 1;
      v57[j] = v71;
    }
  }
  v72 = 0;
  v73 = v14;
  v74 = v19;
  do
  {
    v75 = v74[v14];
    v29 = __CFADD__(*v74, v72);
    v76 = *v74 + v72;
    v77 = v29;
    v29 = __CFADD__(v76, v75);
    v74[v14] = v76 + v75;
    v78 = v74[1];
    v79 = &v74[v14];
    v81 = v29;
    v29 = __CFADD__(v29, v78);
    v80 = v81 + v78;
    v29 |= __CFADD__(v77, v80);
    v80 += v77;
    v82 = v29;
    v84 = v79[1];
    v83 = v79[2];
    v29 = __CFADD__(v80, v84);
    v79[1] = v80 + v84;
    v85 = v74[2];
    v87 = v29;
    v29 = __CFADD__(v29, v85);
    v86 = v87 + v85;
    v29 |= __CFADD__(v82, v86);
    v86 += v82;
    v88 = v29;
    v79[2] = v86 + v83;
    v89 = v74[3];
    v90 = v79[3];
    v29 = __CFADD__(v90, v89);
    v91 = v90 + v89;
    v92 = v29;
    v29 = __CFADD__(__CFADD__(v86, v83), v91) | __CFADD__(v88, __CFADD__(v86, v83) + v91);
    v93 = v88 + __CFADD__(v86, v83) + v91;
    if (v29)
      v72 = v92 + 1;
    else
      v72 = v92;
    v79[3] = v93;
    v74 += 4;
    v73 -= 4;
  }
  while (v73 >= 4);
  if (v73)
  {
    v94 = 0;
    v95 = &v74[v14];
    do
    {
      v96 = v74[v94];
      v97 = v95[v94];
      v29 = __CFADD__(v96, v72);
      v98 = v96 + v72;
      v99 = v29;
      v29 = __CFADD__(v98, v97);
      v100 = v98 + v97;
      if (v29)
        v72 = v99 + 1;
      else
        v72 = v99;
      v95[v94++] = v100;
    }
    while (v73 != v94);
  }
  v101 = ~v18;
  if (v15 < &v19[v151 + v14] && &v19[v151] < &v19[2 * v14])
  {
    v102 = 0;
LABEL_87:
    v103 = v14 - v102;
    v104 = v102;
    v105 = &v19[v102 + v14];
    v106 = &v19[v151 + v104];
    do
    {
      v107 = *v106++;
      *v105 = *v105 & v101 | v107 & v18;
      ++v105;
      --v103;
    }
    while (v103);
    goto LABEL_89;
  }
  v138 = (int8x16_t)vdupq_n_s64(v18);
  v139 = (int8x16_t)vdupq_n_s64(v101);
  v102 = v14 & 0xFFFFFFFC;
  v140 = (int8x16_t *)&v19[v151 + 2];
  v141 = (int8x16_t *)&v19[v14 + 2];
  v142 = v102;
  do
  {
    v143 = vorrq_s8(vandq_s8(*v141, v139), vandq_s8(*v140, v138));
    v141[-1] = vorrq_s8(vandq_s8(v141[-1], v139), vandq_s8(v140[-1], v138));
    *v141 = v143;
    v140 += 2;
    v141 += 2;
    v142 -= 4;
  }
  while (v142);
  if (v102 != v14)
    goto LABEL_87;
LABEL_89:
  v108 = 0;
  v109 = &v20[v21];
  do
  {
    v110 = *v15;
    v111 = v109[1];
    v29 = __CFADD__(*v109, v108);
    v112 = *v109 + v108;
    v113 = v29;
    v29 = __CFADD__(v112, v110);
    *v109 = v112 + v110;
    v114 = v15[1];
    v115 = v113 + v29 + v111;
    if (__CFADD__(v29, v111) | __CFADD__(v113, v29 + v111))
      v116 = 1;
    else
      v116 = 0;
    v29 = __CFADD__(v115, v114);
    v109[1] = v115 + v114;
    v117 = v15[2];
    v118 = v109[2];
    v119 = v109[3];
    v121 = v29;
    v29 = __CFADD__(v29, v118);
    v120 = v121 + v118;
    v29 |= __CFADD__(v116, v120);
    v120 += v116;
    v122 = v29;
    v109[2] = v120 + v117;
    v123 = v15[3];
    v29 = __CFADD__(v123, v119);
    v124 = v123 + v119;
    v125 = v29;
    v29 = __CFADD__(__CFADD__(v120, v117), v124);
    v126 = __CFADD__(v120, v117) + v124;
    v29 |= __CFADD__(v122, v126);
    v126 += v122;
    if (v29)
      v108 = v125 + 1;
    else
      v108 = v125;
    v109[3] = v126;
    v109 += 4;
    v15 += 4;
    v14 -= 4;
  }
  while (v14 >= 4);
  if (v14)
  {
    for (k = 0; k != v14; ++k)
    {
      v128 = v109[k];
      v129 = v15[k];
      v29 = __CFADD__(v128, v108);
      v130 = v128 + v108;
      v131 = v29;
      v29 = __CFADD__(v130, v129);
      v132 = v130 + v129;
      if (v29)
        v108 = v131 + 1;
      else
        v108 = v131;
      v109[k] = v132;
    }
  }
  v133 = v21 + a4;
  if ((int)(v21 + a4) < (int)v151)
  {
    v134 = (v18 & (v23 - v53) | (v72 + v23) & v101) + v108;
    v135 = v151 - (unint64_t)v133;
    v136 = &v20[v133];
    do
    {
      v137 = *v136 + v134;
      v134 = __CFADD__(*v136, v134);
      *v136++ = v137;
      --v135;
    }
    while (v135);
  }
}

int X509_NAME_print_ex(BIO *out, X509_NAME *nm, int indent, unint64_t flags)
{
  unsigned int v7;
  BOOL v8;
  int v9;
  int (__cdecl *bwrite)(BIO *, const char *, int);
  int v11;
  int v13;
  int v14;
  const char *v15;
  const char *v16;
  unsigned int v17;
  const char *v18;
  int v19;
  int num;
  unsigned int v21;
  int v22;
  unint64_t v23;
  STACK *entries;
  char *v25;
  int (__cdecl *v26)(BIO *, const char *, int);
  int v27;
  const ASN1_OBJECT *v28;
  ASN1_STRING *v29;
  unsigned int v30;
  char *v31;
  size_t v32;
  int (__cdecl *v33)(BIO *, const char *, int);
  int v34;
  BOOL v35;
  int v36;
  int (__cdecl *v37)(BIO *, const char *, int);
  int v38;
  int v39;
  int v40;
  int (__cdecl *v41)(BIO *, const char *, int);
  int v42;
  int v43;
  int v44;
  int (__cdecl *v45)(BIO *, const char *, int);
  int v46;
  BOOL v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  const char *v52;
  const char *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  const char *v58;
  int v59;
  unsigned int v60;
  char buf[80];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  if (!flags)
    return X509_NAME_print(out, nm, indent);
  v7 = indent & ~(indent >> 31);
  if (out && indent >= 1)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      if (!out->method || (bwrite = out->method->bwrite) == 0)
      {
        ERR_put_error(17, 0, 115, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 167);
        if (!v8)
          return -1;
        goto LABEL_17;
      }
      if (!LODWORD(out->cb_arg))
        break;
      v11 = ((uint64_t (*)(BIO *, const char *, uint64_t))bwrite)(out, " ", 1);
      if (v11 > 0)
      {
        out->prev_bio = (bio_st *)((char *)out->prev_bio + v11);
        if (v11 == 1)
        {
          v8 = ++v9 >= v7;
          if (v7 != v9)
            continue;
        }
      }
      if (!v8)
        return -1;
      goto LABEL_17;
    }
    ERR_put_error(17, 0, 114, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", 171);
    if (!v8)
      return -1;
  }
LABEL_17:
  v13 = 3;
  v14 = 1;
  v15 = " + ";
  v16 = "\n";
  v17 = v7;
  switch(((flags & 0xF0000) - 0x10000) >> 16)
  {
    case 0uLL:
      v17 = 0;
      v15 = "+";
      v13 = 1;
      v16 = ",";
      break;
    case 1uLL:
      v17 = 0;
      v14 = 2;
      v16 = ", ";
      break;
    case 2uLL:
      v17 = 0;
      v14 = 2;
      v16 = "; ";
      break;
    case 3uLL:
      break;
    default:
      return -1;
  }
  v18 = "=";
  if ((flags & 0x800000) != 0)
  {
    v18 = " = ";
    v19 = 3;
  }
  else
  {
    v19 = 1;
  }
  v60 = v19;
  if (!nm)
    return v7;
  if (!nm->entries)
    return v7;
  num = nm->entries->num;
  if (num < 1)
    return v7;
  v58 = v18;
  v52 = v16;
  v53 = v15;
  v21 = 0;
  v54 = v14;
  v55 = v17;
  v56 = v14 + v17;
  v57 = v13;
  v22 = -1;
  v59 = nm->entries->num;
  while (1)
  {
    LODWORD(v23) = ~v21 + num;
    v23 = (flags & 0x100000) != 0 ? v23 : v21;
    if ((v23 & 0x80000000) != 0 || (entries = nm->entries) == 0 || *(_QWORD *)&entries->num <= v23)
    {
      v25 = 0;
      if (v22 == -1)
        goto LABEL_46;
    }
    else
    {
      v25 = entries->data[v23];
      if (v22 == -1)
        goto LABEL_46;
    }
    if (v22 == *((_DWORD *)v25 + 4))
    {
      if (out)
      {
        if (!out->method)
          goto LABEL_104;
        v26 = out->method->bwrite;
        if (!v26)
          goto LABEL_104;
        if (!LODWORD(out->cb_arg))
          break;
        v27 = ((uint64_t (*)(BIO *, const char *, _QWORD))v26)(out, v53, v57);
        if (v27 >= 1)
          out->prev_bio = (bio_st *)((char *)out->prev_bio + v27);
        if (v27 != v57)
          return -1;
      }
      v7 += v57;
LABEL_46:
      v22 = *((_DWORD *)v25 + 4);
      v28 = *(const ASN1_OBJECT **)v25;
      v29 = (ASN1_STRING *)*((_QWORD *)v25 + 1);
      v30 = OBJ_obj2nid(*(const ASN1_OBJECT **)v25);
      if (!v30)
        goto LABEL_76;
      goto LABEL_47;
    }
    if (out)
    {
      if (!out->method || (v33 = out->method->bwrite) == 0)
      {
LABEL_104:
        v50 = 115;
        v51 = 167;
        goto LABEL_106;
      }
      if (!LODWORD(out->cb_arg))
        break;
      v34 = ((uint64_t (*)(BIO *, const char *, _QWORD))v33)(out, v52, v54);
      if (v34 >= 1)
        out->prev_bio = (bio_st *)((char *)out->prev_bio + v34);
      if (v34 != v54)
        return -1;
      if (v55)
      {
        v35 = 0;
        v36 = 0;
        while (1)
        {
          if (!out->method || (v37 = out->method->bwrite) == 0)
          {
            v39 = 115;
            v40 = 167;
            goto LABEL_73;
          }
          if (!LODWORD(out->cb_arg))
            break;
          v38 = ((uint64_t (*)(BIO *, const char *, uint64_t))v37)(out, " ", 1);
          if (v38 > 0)
          {
            out->prev_bio = (bio_st *)((char *)out->prev_bio + v38);
            if (v38 == 1)
            {
              v35 = ++v36 >= v55;
              if (v55 != v36)
                continue;
            }
          }
          goto LABEL_74;
        }
        v39 = 114;
        v40 = 171;
LABEL_73:
        ERR_put_error(17, 0, v39, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", v40);
LABEL_74:
        if (!v35)
          return -1;
      }
    }
    v7 += v56;
    v22 = *((_DWORD *)v25 + 4);
    v28 = *(const ASN1_OBJECT **)v25;
    v29 = (ASN1_STRING *)*((_QWORD *)v25 + 1);
    v30 = OBJ_obj2nid(*(const ASN1_OBJECT **)v25);
    if (!v30)
    {
LABEL_76:
      v31 = buf;
      OBJ_obj2txt(buf, 80, v28, 1);
      v32 = strlen(buf);
      if (!out)
        goto LABEL_93;
      goto LABEL_77;
    }
LABEL_47:
    if (v30 > 0x3C4)
    {
      if (pthread_rwlock_rdlock(&global_added_lock) || pthread_rwlock_unlock(&global_added_lock))
        abort();
    }
    else if (LODWORD(kObjects[5 * v30 - 3]))
    {
      v31 = kObjects[5 * v30 - 5];
      v32 = strlen(v31);
      if (!out)
        goto LABEL_93;
      goto LABEL_77;
    }
    ERR_put_error(8, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/obj/obj.c", 373);
    v31 = 0;
    v32 = strlen(0);
    if (!out)
      goto LABEL_93;
LABEL_77:
    if (!out->method || (v41 = out->method->bwrite) == 0)
    {
      v43 = 115;
      v44 = 167;
LABEL_85:
      ERR_put_error(17, 0, v43, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", v44);
      v42 = -2;
LABEL_86:
      if (v42 != (_DWORD)v32)
        return -1;
      goto LABEL_87;
    }
    if (!LODWORD(out->cb_arg))
    {
      v43 = 114;
      v44 = 171;
      goto LABEL_85;
    }
    if ((int)v32 >= 1)
    {
      v42 = ((uint64_t (*)(BIO *, char *, size_t))v41)(out, v31, v32);
      if (v42 >= 1)
      {
        out->prev_bio = (bio_st *)((char *)out->prev_bio + v42);
        if (v42 != (_DWORD)v32)
          return -1;
        goto LABEL_87;
      }
      goto LABEL_86;
    }
    if ((_DWORD)v32)
      return -1;
LABEL_87:
    if (!out->method)
      goto LABEL_104;
    v45 = out->method->bwrite;
    if (!v45)
      goto LABEL_104;
    if (!LODWORD(out->cb_arg))
      break;
    v46 = ((uint64_t (*)(BIO *, const char *, _QWORD))v45)(out, v58, v60);
    if (v46 >= 1)
      out->prev_bio = (bio_st *)((char *)out->prev_bio + v46);
    if (v46 != v60)
      return -1;
LABEL_93:
    if (v30)
      v47 = 1;
    else
      v47 = (flags & 0x1000000) == 0;
    v48 = 128;
    if (v47)
      v48 = 0;
    v49 = ASN1_STRING_print_ex(out, v29, v48 | flags);
    if (v49 < 0)
      return -1;
    num = v59;
    v7 += v60 + v32 + v49;
    if (++v21 == v59)
      return v7;
  }
  v50 = 114;
  v51 = 171;
LABEL_106:
  ERR_put_error(17, 0, v50, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/bio/bio.c", v51);
  return -1;
}

ASN1_OBJECT *__cdecl OBJ_dup(const ASN1_OBJECT *o)
{
  const ASN1_OBJECT *v1;
  char *v2;
  _QWORD *v3;
  ASN1_OBJECT *v4;
  size_t length;
  unsigned __int8 *data;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  const char *ln;
  size_t v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *sn;
  size_t v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  size_t v22;

  v1 = o;
  if (o && (o->flags & 1) != 0)
  {
    v2 = (char *)malloc_type_malloc(0x30uLL, 0x30772F57uLL);
    if (!v2)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      ERR_put_error(8, 0, 12, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/obj/obj.c", 113);
      return 0;
    }
    v3 = v2;
    *(_QWORD *)v2 = 40;
    *((_QWORD *)v2 + 1) = 0;
    v4 = (ASN1_OBJECT *)(v2 + 8);
    *((_QWORD *)v2 + 3) = 0;
    *((_QWORD *)v2 + 4) = 0;
    *((_DWORD *)v2 + 10) = 1;
    *((_QWORD *)v2 + 2) = 0;
    length = v1->length;
    if ((_DWORD)length)
    {
      if (length <= 0xFFFFFFF7
        && (data = v1->data, (v7 = malloc_type_malloc(length + 8, 0x30772F57uLL)) != 0))
      {
        *v7 = length;
        v8 = v7 + 1;
        memcpy(v7 + 1, data, length);
        v3[4] = v8;
        v9 = v1->length;
      }
      else
      {
        ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
        v9 = v1->length;
        v3[4] = 0;
        if (v9)
          goto LABEL_31;
      }
    }
    else
    {
      v9 = 0;
    }
    *((_DWORD *)v3 + 6) = v1->nid;
    *((_DWORD *)v3 + 7) = v9;
    ln = v1->ln;
    if (!ln)
    {
      v14 = 0;
      goto LABEL_18;
    }
    v11 = strlen(v1->ln);
    v12 = v11 + 1;
    if (v11 != -1)
    {
      if (v12 <= 0xFFFFFFFFFFFFFFF7)
      {
        v13 = malloc_type_malloc(v11 + 9, 0x30772F57uLL);
        if (v13)
        {
          *v13 = v12;
          v14 = v13 + 1;
          memcpy(v13 + 1, ln, v12);
LABEL_18:
          sn = v1->sn;
          if (!v1->sn)
          {
            v19 = 0;
            goto LABEL_25;
          }
          v16 = strlen(v1->sn);
          v17 = v16 + 1;
          if (v16 != -1)
          {
            if (v17 <= 0xFFFFFFFFFFFFFFF7)
            {
              v18 = malloc_type_malloc(v16 + 9, 0x30772F57uLL);
              if (v18)
              {
                *v18 = v17;
                v19 = v18 + 1;
                memcpy(v18 + 1, sn, v17);
LABEL_25:
                v3[1] = v19;
                v3[2] = v14;
                *((_DWORD *)v3 + 10) = v1->flags | 0xD;
                return v4;
              }
            }
            ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
          }
          if (v14)
          {
            v21 = *(v14 - 1);
            v20 = v14 - 1;
            v22 = v21 + 8;
            if (v21 != -8)
              bzero(v20, v22);
            free(v20);
          }
          goto LABEL_31;
        }
      }
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
    }
LABEL_31:
    if (*v3 != -8)
      __memset_chk();
    free(v3);
    return 0;
  }
  return (ASN1_OBJECT *)v1;
}

int OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b)
{
  size_t length;
  int v3;

  length = a->length;
  v3 = b->length;
  if ((int)length < v3)
    return -1;
  if ((int)length > v3)
    return 1;
  if ((_DWORD)length)
    return memcmp(a->data, b->data, length);
  return 0;
}

int OBJ_obj2nid(const ASN1_OBJECT *o)
{
  const ASN1_OBJECT *v1;
  unsigned int v2;

  if (o)
  {
    v1 = o;
    LODWORD(o) = o->nid;
    if (!(_DWORD)o)
    {
      if (pthread_rwlock_rdlock(&global_added_lock) || pthread_rwlock_unlock(&global_added_lock))
        goto LABEL_9;
      o = (const ASN1_OBJECT *)bsearch(v1, &kNIDsInOIDOrder, 0x371uLL, 2uLL, (int (__cdecl *)(const void *, const void *))obj_cmp);
      if (!o)
        return (int)o;
      v2 = LOWORD(o->sn) - 1;
      if (v2 >= 0x3C4)
LABEL_9:
        abort();
      LODWORD(o) = kObjects[5 * v2 + 2];
    }
  }
  return (int)o;
}

uint64_t obj_cmp(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v2;
  size_t v3;
  int v4;

  v2 = *a2 - 1;
  if (v2 >= 0x3C4)
    abort();
  v3 = *(int *)(a1 + 20);
  v4 = HIDWORD(kObjects[5 * v2 + 2]);
  if ((int)v3 < v4)
    return 0xFFFFFFFFLL;
  if ((int)v3 > v4)
    return 1;
  if ((_DWORD)v3)
    return memcmp(*(const void **)(a1 + 24), kObjects[5 * v2 + 3], v3);
  return 0;
}

uint64_t short_name_cmp(const char *a1, unsigned __int16 *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 >= 0x3C4)
    abort();
  return strcmp(a1, kObjects[5 * v2]);
}

uint64_t long_name_cmp(const char *a1, unsigned __int16 *a2)
{
  unsigned int v2;

  v2 = *a2 - 1;
  if (v2 >= 0x3C4)
    abort();
  return strcmp(a1, kObjects[5 * v2 + 1]);
}

ASN1_OBJECT *__cdecl OBJ_txt2obj(const char *s, int no_name)
{
  ASN1_OBJECT *result;
  unsigned __int16 *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned __int16 *v7;
  unsigned int v8;

  if (no_name)
    return create_object_with_text_oid(0, (char *)s, 0, 0);
  if (pthread_rwlock_rdlock(&global_added_lock) || pthread_rwlock_unlock(&global_added_lock))
    goto LABEL_19;
  v4 = (unsigned __int16 *)bsearch(s, &kNIDsInShortNameOrder, 0x3B9uLL, 2uLL, (int (__cdecl *)(const void *, const void *))short_name_cmp);
  if (!v4)
    goto LABEL_22;
  v5 = *v4 - 1;
  if (v5 >= 0x3C4)
    goto LABEL_19;
  v6 = kObjects[5 * v5 + 2];
  if (!v6)
  {
LABEL_22:
    if (pthread_rwlock_rdlock(&global_added_lock) || pthread_rwlock_unlock(&global_added_lock))
      goto LABEL_19;
    v7 = (unsigned __int16 *)bsearch(s, &kNIDsInLongNameOrder, 0x3B9uLL, 2uLL, (int (__cdecl *)(const void *, const void *))long_name_cmp);
    if (!v7)
      return create_object_with_text_oid(0, (char *)s, 0, 0);
    v8 = *v7 - 1;
    if (v8 >= 0x3C4)
      goto LABEL_19;
    v6 = kObjects[5 * v8 + 2];
    if (!v6)
      return create_object_with_text_oid(0, (char *)s, 0, 0);
  }
  if (v6 > 0x3C4)
  {
    if (!pthread_rwlock_rdlock(&global_added_lock) && !pthread_rwlock_unlock(&global_added_lock))
      goto LABEL_18;
LABEL_19:
    abort();
  }
  result = (ASN1_OBJECT *)&kObjects[5 * v6 - 5];
  if (!result->nid)
  {
LABEL_18:
    ERR_put_error(8, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/obj/obj.c", 373);
    return 0;
  }
  return result;
}

ASN1_OBJECT *create_object_with_text_oid(uint64_t (*a1)(uint64_t), char *a2, const char *a3, const char *a4)
{
  _QWORD *v8;
  size_t v9;
  const char *v10;
  int v11;
  int v12;
  uint64_t v13;
  void *v14;
  ASN1_OBJECT *v15;
  uint64_t v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  size_t v21;
  _OWORD v22[3];
  ASN1_OBJECT o;

  memset(v22, 0, sizeof(v22));
  v8 = malloc_type_malloc(0x28uLL, 0x30772F57uLL);
  if (!v8)
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
    v11 = 65;
    v12 = 247;
    goto LABEL_6;
  }
  *v8 = 32;
  BYTE8(v22[0]) = 0;
  *(_QWORD *)&v22[0] = 0;
  *(_QWORD *)&v22[1] = v8 + 1;
  *(_OWORD *)((char *)&v22[1] + 8) = xmmword_208F1E4E0;
  BYTE8(v22[2]) = 1;
  v9 = strlen(a2);
  if (!CBB_add_asn1_oid_from_text((uint64_t *)v22, (unsigned __int8 *)a2, v9))
    goto LABEL_7;
  if (BYTE8(v22[0]))
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/bytestring/cbb.c";
    v11 = 66;
    v12 = 127;
LABEL_6:
    ERR_put_error(14, 0, v11, v10, v12);
    goto LABEL_7;
  }
  v17 = CBB_flush((uint64_t *)v22);
  if (!(_DWORD)v17)
  {
LABEL_7:
    ERR_put_error(8, 0, 101, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/obj/obj.c", 405);
    if (!BYTE8(v22[0]) && (BYTE8(v22[2]) & 1) != 0 && *(_QWORD *)&v22[1])
    {
      v14 = (void *)(*(_QWORD *)&v22[1] - 8);
      v13 = *(_QWORD *)(*(_QWORD *)&v22[1] - 8);
      if (v13 != -8)
        bzero(v14, v13 + 8);
      v15 = 0;
LABEL_25:
      free(v14);
      return v15;
    }
    return 0;
  }
  v18 = v22[1];
  *(_QWORD *)&v22[1] = 0;
  if (a1)
  {
    v19 = a1(v17);
    if (*((_QWORD *)&v18 + 1) >> 31)
    {
LABEL_18:
      ERR_put_error(12, 0, 173, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/asn1/a_object.c", 222);
      v15 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    v19 = 0;
    if (*((_QWORD *)&v22[1] + 1) >> 31)
      goto LABEL_18;
  }
  o.sn = a3;
  o.ln = a4;
  o.data = (unsigned __int8 *)v18;
  *(_QWORD *)&o.flags = 13;
  o.nid = v19;
  o.length = DWORD2(v18);
  v15 = OBJ_dup(&o);
LABEL_22:
  if ((_QWORD)v18)
  {
    v20 = *(_QWORD *)(v18 - 8);
    v14 = (void *)(v18 - 8);
    v21 = v20 + 8;
    if (v20 != -8)
      bzero(v14, v21);
    goto LABEL_25;
  }
  return v15;
}

int OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name)
{
  char *v5;
  unsigned int v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v14;
  unsigned __int8 *length;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  size_t v25;
  uint64_t v26;
  unsigned __int8 *v27[2];

  v5 = buf;
  if (!a || !a->length)
  {
    if ((buf_len & ~(buf_len >> 31)) <= 1 && buf_len < 1)
      return 0;
    LODWORD(v14) = 0;
    *buf = 0;
    return v14;
  }
  if (no_name)
    goto LABEL_28;
  v7 = OBJ_obj2nid(a);
  if (!v7)
    goto LABEL_28;
  if (v7 > 0x3C4)
  {
    if (pthread_rwlock_rdlock(&global_added_lock)
      || pthread_rwlock_unlock(&global_added_lock)
      || (ERR_put_error(8, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/obj/obj.c", 373), pthread_rwlock_rdlock(&global_added_lock))|| pthread_rwlock_unlock(&global_added_lock))
    {
      abort();
    }
    goto LABEL_27;
  }
  v8 = v7 - 1;
  if (!LODWORD(kObjects[5 * v7 - 3]))
  {
    ERR_put_error(8, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/obj/obj.c", 373);
LABEL_27:
    ERR_put_error(8, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/obj/obj.c", 373);
    goto LABEL_28;
  }
  v9 = kObjects[5 * v8 + 1];
  if (v9 || (v9 = kObjects[5 * v8]) != 0)
  {
    v10 = buf_len & ~(buf_len >> 31);
    if (v10 < 2)
    {
      v12 = 0;
      if (buf_len < 1)
      {
LABEL_52:
        v14 = strlen(v9) + v12;
        if (v14 >> 31)
        {
          ERR_put_error(8, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/obj/obj.c", 434);
          return -1;
        }
        return v14;
      }
    }
    else
    {
      v11 = 0;
      v12 = v10 - 1;
      while (v9[v11])
      {
        v5[v11] = v9[v11];
        if (v12 == ++v11)
        {
          v9 += v11;
          v5 += v11;
          goto LABEL_51;
        }
      }
      v9 += v11;
      v5 += v11;
      v12 = v11;
    }
LABEL_51:
    *v5 = 0;
    goto LABEL_52;
  }
LABEL_28:
  length = (unsigned __int8 *)a->length;
  v27[0] = a->data;
  v27[1] = length;
  v17 = (const char *)CBS_asn1_oid_to_text(v27);
  if (!v17)
  {
    if (buf_len >= 1)
      *v5 = 0;
    return -1;
  }
  v18 = v17;
  v19 = buf_len & ~(buf_len >> 31);
  if (v19 < 2)
  {
    if (buf_len < 1)
    {
      v22 = strlen(v17);
      if (!(v22 >> 31))
        goto LABEL_40;
    }
    else
    {
      *v5 = 0;
      v22 = strlen(v17);
      if (!(v22 >> 31))
        goto LABEL_40;
    }
LABEL_44:
    ERR_put_error(8, 0, 69, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/obj/obj.c", 434);
    LODWORD(v22) = -1;
    v26 = *((_QWORD *)v18 - 1);
    v23 = (char *)(v18 - 8);
    v25 = v26 + 8;
    if (v26 == -8)
      goto LABEL_42;
    goto LABEL_41;
  }
  v20 = 0;
  v21 = v19 - 1;
  while (v17[v20])
  {
    v5[v20] = v17[v20];
    if (v21 == ++v20)
    {
      v5[v20] = 0;
      v22 = strlen(&v17[v20]) + v21;
      if (v22 >> 31)
        goto LABEL_44;
      goto LABEL_40;
    }
  }
  v5[v20] = 0;
  v22 = strlen(&v17[v20]) + v20;
  if (v22 >> 31)
    goto LABEL_44;
LABEL_40:
  v24 = *((_QWORD *)v18 - 1);
  v23 = (char *)(v18 - 8);
  v25 = v24 + 8;
  if (v24 != -8)
LABEL_41:
    bzero(v23, v25);
LABEL_42:
  free(v23);
  return v22;
}

unint64_t ec_point_to_bytes(uint64_t a1, uint64_t a2, int a3, char *a4, unint64_t a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v30;
  _BYTE v31[66];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (a3 == 2 || a3 == 4)
  {
    v9 = *(unsigned int *)(a1 + 328);
    v10 = v9 & ((int)v9 >> 31);
    v11 = 8 * v9 - 8;
    v12 = *(_DWORD *)(a1 + 328);
    while (1)
    {
      v13 = __OFSUB__(v12--, 1);
      if (v12 < 0 != v13)
        break;
      v14 = *(_QWORD *)(a1 + 320);
      v15 = *(_QWORD *)(v14 + v11);
      v11 -= 8;
      if (v15)
      {
        v10 = v12 + 1;
        goto LABEL_12;
      }
    }
    if ((v9 & 0x80000000) == 0)
    {
      v16 = 1;
      if (a5)
        goto LABEL_29;
      goto LABEL_28;
    }
    v14 = *(_QWORD *)(a1 + 320);
LABEL_12:
    v17 = v10 - 1;
    v18 = *(_QWORD *)(v14 + 8 * v17);
    v19 = v18 != 0;
    v20 = HIDWORD(v18) != 0;
    if (HIDWORD(v18))
      v18 >>= 32;
    v21 = v18 >> 16 != 0;
    if (v18 >> 16)
      v18 >>= 16;
    v22 = v18 > 0xFF;
    if (v18 > 0xFF)
      v18 >>= 8;
    v23 = v18 > 0xF;
    if (v18 > 0xF)
      v18 >>= 4;
    v24 = v18 > 3;
    if (v18 > 3)
      v18 >>= 2;
    v25 = v19 | (v17 << 6) | (32 * v20) | (16 * v21) | (8 * v22) | (4 * v23) | (2 * v24);
    if (v18 > 1)
      ++v25;
    v26 = (v25 + 7) >> 3;
    if (a3 == 4)
      v27 = v26;
    else
      v27 = 0;
    v16 = v26 + v27 + 1;
    if (v16 > a5)
    {
LABEL_28:
      ERR_put_error(15, 0, 100, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/oct.c", 97);
      return 0;
    }
  }
  else
  {
    ERR_put_error(15, 0, 111, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/oct.c", 79);
    v16 = 0;
  }
LABEL_29:
  v30 = 0;
  (*(void (**)(uint64_t, char *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a4 + 1, &v30, a2);
  if (a3 == 4)
  {
    (*(void (**)(uint64_t, char *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, &a4[v30 + 1], &v30, a2 + 72);
    v28 = 4;
  }
  else
  {
    (*(void (**)(uint64_t, _BYTE *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 104))(a1, v31, &v30, a2 + 72);
    v28 = (v31[v30 - 1] & 1) + a3;
  }
  *a4 = v28;
  return v16;
}

uint64_t ec_point_from_uncompressed(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  _BYTE *v23;
  uint64_t result;
  _OWORD v25[4];
  uint64_t v26;
  _OWORD v27[4];
  uint64_t v28;

  v6 = *(unsigned int *)(a1 + 328);
  v7 = v6 & ((int)v6 >> 31);
  v8 = 8 * v6 - 8;
  v9 = *(_DWORD *)(a1 + 328);
  while (1)
  {
    v10 = __OFSUB__(v9--, 1);
    if (v9 < 0 != v10)
      break;
    v11 = *(_QWORD *)(a1 + 320);
    v12 = *(_QWORD *)(v11 + v8);
    v8 -= 8;
    if (v12)
    {
      v7 = v9 + 1;
      goto LABEL_9;
    }
  }
  if ((v6 & 0x80000000) != 0)
  {
    v11 = *(_QWORD *)(a1 + 320);
LABEL_9:
    v14 = v7 - 1;
    v15 = *(_QWORD *)(v11 + 8 * v14);
    v16 = v15 != 0;
    v17 = HIDWORD(v15) != 0;
    if (HIDWORD(v15))
      v15 >>= 32;
    v18 = v15 >> 16 != 0;
    if (v15 >> 16)
      v15 >>= 16;
    v19 = v15 > 0xFF;
    if (v15 > 0xFF)
      v15 >>= 8;
    v20 = v15 > 0xF;
    if (v15 > 0xF)
      v15 >>= 4;
    v21 = v15 > 3;
    if (v15 > 3)
      v15 >>= 2;
    v22 = v16 | (v14 << 6) | (32 * v17) | (16 * v18) | (8 * v19) | (4 * v20) | (2 * v21);
    if (v15 > 1)
      ++v22;
    v13 = (v22 + 7) >> 3;
    if (((2 * v13) | 1) != a4)
    {
LABEL_27:
      ERR_put_error(15, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/oct.c", 122);
      return 0;
    }
  }
  else
  {
    v13 = 0;
    if (a4 != 1)
      goto LABEL_27;
  }
  if (*a3 != 4)
    goto LABEL_27;
  v28 = 0;
  memset(v27, 0, sizeof(v27));
  v26 = 0;
  memset(v25, 0, sizeof(v25));
  v23 = a3 + 1;
  result = (*(uint64_t (**)(uint64_t, _OWORD *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v27, a3 + 1, v13);
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, _OWORD *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 112))(a1, v25, &v23[v13], v13);
    if ((_DWORD)result)
      return ec_point_set_affine_coordinates(a1, a2, (uint64_t)v27, (uint64_t)v25) != 0;
  }
  return result;
}

int EC_POINT_oct2point(const EC_GROUP *a1, EC_POINT *a2, const unsigned __int8 *buf, size_t len, BN_CTX *a5)
{
  const char *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v16;
  int v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  int v44;
  BN_CTX *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  BOOL v50;
  _QWORD *v51;
  BIGNUM *v52;
  const BIGNUM *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[5];

  if (EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, 0))
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/fipsmodule/ec/oct.c";
    v11 = 15;
    v12 = 106;
    v13 = 205;
LABEL_3:
    ERR_put_error(v11, 0, v12, v10, v13);
    return 0;
  }
  if (!len)
  {
    v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/c"
          "rypto/fipsmodule/ec/oct.c";
    v11 = 15;
    v12 = 100;
    v13 = 140;
    goto LABEL_3;
  }
  v16 = *buf;
  if (v16 != 4)
  {
    v27 = v16 & 1;
    v28 = *((unsigned int *)a1 + 82);
    v29 = v28 & ((int)v28 >> 31);
    v30 = 8 * v28 - 8;
    v31 = *((_DWORD *)a1 + 82);
    while (1)
    {
      v32 = __OFSUB__(v31--, 1);
      if (v31 < 0 != v32)
        break;
      v33 = *((_QWORD *)a1 + 40);
      v34 = *(_QWORD *)(v33 + v30);
      v30 -= 8;
      if (v34)
      {
        v29 = v31 + 1;
        goto LABEL_19;
      }
    }
    if ((v28 & 0x80000000) == 0)
    {
      v35 = 0;
      goto LABEL_32;
    }
    v33 = *((_QWORD *)a1 + 40);
LABEL_19:
    v36 = v29 - 1;
    v37 = *(_QWORD *)(v33 + 8 * v36);
    v38 = v37 != 0;
    v39 = HIDWORD(v37) != 0;
    if (HIDWORD(v37))
      v37 >>= 32;
    v40 = v37 >> 16 != 0;
    if (v37 >> 16)
      v37 >>= 16;
    v41 = v37 > 0xFF;
    if (v37 > 0xFF)
      v37 >>= 8;
    v42 = v37 > 0xF;
    if (v37 > 0xF)
      v37 >>= 4;
    v43 = v37 > 3;
    if (v37 > 3)
      v37 >>= 2;
    v44 = v38 | (v36 << 6) | (32 * v39) | (16 * v40) | (8 * v41) | (4 * v42) | (2 * v43);
    if (v37 > 1)
      ++v44;
    v35 = (v44 + 7) >> 3;
LABEL_32:
    if ((v16 & 0xFE) != 2 || v35 + 1 != len)
    {
      v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src"
            "/crypto/fipsmodule/ec/oct.c";
      v11 = 15;
      v12 = 109;
      v13 = 162;
      goto LABEL_3;
    }
    if (a5)
    {
      v45 = 0;
      if (*((_BYTE *)a5 + 40))
        goto LABEL_55;
    }
    else
    {
      v46 = (char *)malloc_type_malloc(0x38uLL, 0x30772F57uLL);
      if (!v46)
      {
        v10 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c";
        v11 = 14;
        v12 = 65;
        v13 = 247;
        goto LABEL_3;
      }
      *(_QWORD *)v46 = 48;
      *(_OWORD *)(v46 + 8) = 0u;
      a5 = (BN_CTX *)(v46 + 8);
      *(_OWORD *)(v46 + 24) = 0u;
      *(_OWORD *)(v46 + 34) = 0u;
      v45 = (BN_CTX *)(v46 + 8);
      if (v46[48])
        goto LABEL_55;
    }
    v47 = *((_QWORD *)a5 + 4);
    v48 = *((_QWORD *)a5 + 2);
    if (v48 == *((_QWORD *)a5 + 3))
    {
      if (v48)
        v49 = (3 * v48) >> 1;
      else
        v49 = 32;
      v50 = v49 > v48 && v49 >> 61 == 0;
      if (!v50 || (v51 = OPENSSL_realloc(*((_QWORD **)a5 + 1), 8 * v49)) == 0)
      {
        *((_WORD *)a5 + 20) = 257;
        goto LABEL_55;
      }
      *((_QWORD *)a5 + 1) = v51;
      *((_QWORD *)a5 + 3) = v49;
      v48 = *((_QWORD *)a5 + 2);
    }
    else
    {
      v51 = (_QWORD *)*((_QWORD *)a5 + 1);
    }
    v51[v48] = v47;
    ++*((_QWORD *)a5 + 2);
LABEL_55:
    v52 = BN_CTX_get(a5);
    if (v52)
    {
      v53 = v52;
      if (BN_bin2bn(buf + 1, v35, v52))
      {
        if ((bn_cmp_words_consttime((uint64_t *)v53->d, v53->top, *((uint64_t **)a1 + 40), *((int *)a1 + 82)) & 0x80000000) != 0)
        {
          v14 = EC_POINT_set_compressed_coordinates_GFp(a1, a2, v53, v27, a5);
          if (*((_BYTE *)a5 + 40))
            goto LABEL_61;
          goto LABEL_60;
        }
        ERR_put_error(15, 0, 109, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/oct.c", 186);
      }
    }
    v14 = 0;
    if (*((_BYTE *)a5 + 40))
    {
LABEL_61:
      BN_CTX_free(v45);
      return v14;
    }
LABEL_60:
    v54 = *((_QWORD *)a5 + 1);
    v55 = *((_QWORD *)a5 + 2) - 1;
    *((_QWORD *)a5 + 2) = v55;
    *((_QWORD *)a5 + 4) = *(_QWORD *)(v54 + 8 * v55);
    goto LABEL_61;
  }
  v59 = 0u;
  memset(v60, 0, sizeof(v60));
  v57 = 0u;
  v58 = 0u;
  v56 = 0u;
  v17 = ec_point_from_uncompressed((uint64_t)a1, (uint64_t)&v56, buf, len);
  v18 = (_OWORD *)((char *)a2 + 8);
  if (v17)
  {
    v19 = v59;
    *(_OWORD *)((char *)a2 + 40) = v58;
    *(_OWORD *)((char *)a2 + 56) = v19;
    *((_QWORD *)a2 + 9) = *(_QWORD *)&v60[0];
    v20 = v57;
    *v18 = v56;
    *(_OWORD *)((char *)a2 + 24) = v20;
    v21 = *(_OWORD *)((char *)v60 + 8);
    *((_QWORD *)a2 + 18) = *((_QWORD *)&v60[4] + 1);
    v22 = *(_OWORD *)((char *)&v60[3] + 8);
    *((_OWORD *)a2 + 7) = *(_OWORD *)((char *)&v60[2] + 8);
    *((_OWORD *)a2 + 8) = v22;
    v23 = *(_OWORD *)((char *)&v60[1] + 8);
    *((_OWORD *)a2 + 5) = v21;
    *((_OWORD *)a2 + 6) = v23;
    *(_OWORD *)((char *)a2 + 152) = *((_OWORD *)a1 + 10);
    v24 = *((_OWORD *)a1 + 11);
    v25 = *((_OWORD *)a1 + 12);
    v26 = *((_OWORD *)a1 + 13);
    *((_QWORD *)a2 + 27) = *((_QWORD *)a1 + 28);
    *(_OWORD *)((char *)a2 + 200) = v26;
    *(_OWORD *)((char *)a2 + 184) = v25;
    *(_OWORD *)((char *)a2 + 168) = v24;
    return 1;
  }
  ec_set_to_safe_point((uint64_t)a1, (uint64_t)v18);
  return 0;
}

size_t EC_POINT_point2oct(const EC_GROUP *a1, const EC_POINT *a2, point_conversion_form_t form, unsigned __int8 *buf, size_t len, BN_CTX *a6)
{
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  int8x8_t v16;
  int8x16_t *v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  _BOOL4 v32;
  int v33;
  _BOOL4 v34;
  _BOOL4 v35;
  _BOOL4 v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[9];

  if (EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, 0))
  {
    v11 = 106;
    v12 = 215;
LABEL_3:
    ERR_put_error(15, 0, v11, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/oct.c", v12);
    return 0;
  }
  if (buf)
  {
    memset(v41, 0, sizeof(v41));
    if (!(**(unsigned int (***)(const EC_GROUP *, char *, _OWORD *, char *))a1)(a1, (char *)a2 + 8, v41, (char *)&v41[4] + 8))return 0;
    return ec_point_to_bytes((uint64_t)a1, (uint64_t)v41, form, (char *)buf, len);
  }
  v14 = *((unsigned int *)a1 + 82);
  if ((int)v14 < 1)
  {
LABEL_35:
    v11 = 119;
    v12 = 222;
    goto LABEL_3;
  }
  if (v14 < 4)
  {
    v15 = 0;
    v16 = 0;
LABEL_14:
    v22 = v14 - v15;
    v23 = (uint64_t *)((char *)a2 + 8 * v15 + 152);
    do
    {
      v24 = *v23++;
      *(_QWORD *)&v16 |= v24;
      --v22;
    }
    while (v22);
    goto LABEL_16;
  }
  v15 = v14 & 0x7FFFFFFC;
  v17 = (int8x16_t *)((char *)a2 + 168);
  v18 = 0uLL;
  v19 = v14 & 0xFFFFFFFC;
  v20 = 0uLL;
  do
  {
    v18 = vorrq_s8(v17[-1], v18);
    v20 = vorrq_s8(*v17, v20);
    v17 += 2;
    v19 -= 4;
  }
  while (v19);
  v21 = vorrq_s8(v20, v18);
  v16 = vorr_s8(*(int8x8_t *)v21.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL));
  if (v15 != v14)
    goto LABEL_14;
LABEL_16:
  if (!*(_QWORD *)&v16)
    goto LABEL_35;
  if (form != POINT_CONVERSION_COMPRESSED && form != POINT_CONVERSION_UNCOMPRESSED)
  {
    v11 = 111;
    v12 = 79;
    goto LABEL_3;
  }
  v25 = 8 * v14 - 8;
  v26 = ((_DWORD)v14 << 6) | 7;
  do
  {
    v27 = __OFSUB__((_DWORD)v14, 1);
    LODWORD(v14) = v14 - 1;
    if ((int)v14 < 0 != v27)
    {
      v39 = 0;
      goto LABEL_38;
    }
    v28 = *((_QWORD *)a1 + 40);
    v29 = *(_QWORD *)(v28 + v25);
    v25 -= 8;
    v26 -= 64;
  }
  while (!v29);
  v30 = *(_QWORD *)(v28 + 8 * v14);
  v31 = v30 != 0;
  v32 = HIDWORD(v30) != 0;
  if (HIDWORD(v30))
    v30 >>= 32;
  v33 = 16 * (v30 >> 16 != 0);
  if (v30 >> 16)
    v30 >>= 16;
  v34 = v30 > 0xFF;
  if (v30 > 0xFF)
    v30 >>= 8;
  v35 = v30 > 0xF;
  if (v30 > 0xF)
    v30 >>= 4;
  v36 = v30 > 3;
  if (v30 > 3)
    v30 >>= 2;
  v37 = v30 > 1;
  v38 = v33 | (32 * v32) | (8 * v34) | (4 * v35) | (2 * v36) | v31;
  if (v37)
    ++v38;
  v39 = (v38 + v26) >> 3;
LABEL_38:
  if (form == POINT_CONVERSION_UNCOMPRESSED)
    v40 = v39;
  else
    v40 = 0;
  return v39 + v40 + 1;
}

size_t EC_POINT_point2buf(const EC_GROUP *a1, const EC_POINT *a2, point_conversion_form_t a3, char **a4, uint64_t a5, BN_CTX *a6)
{
  size_t result;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  _OWORD v15[9];

  *a4 = 0;
  result = EC_POINT_point2oct(a1, a2, a3, 0, 0, a6);
  if (result)
  {
    v11 = result;
    v12 = malloc_type_malloc(result + 8, 0x30772F57uLL);
    if (!v12)
    {
      ERR_put_error(14, 0, 65, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/mem.c", 247);
      return 0;
    }
    v13 = v12;
    *v12 = v11;
    v14 = (char *)(v12 + 1);
    if (EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, 0))
    {
      ERR_put_error(15, 0, 106, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/oct.c", 215);
    }
    else
    {
      memset(v15, 0, sizeof(v15));
      if ((**(unsigned int (***)(const EC_GROUP *, uint64_t, _OWORD *, char *))a1)(a1, (uint64_t)a2 + 8, v15, (char *)&v15[4] + 8))
      {
        result = ec_point_to_bytes((uint64_t)a1, (uint64_t)v15, a3, v14, v11);
        if (result)
        {
          *a4 = v14;
          return result;
        }
      }
    }
    if (*v13 != -8)
      bzero(v13, *v13 + 8);
    free(v13);
    return 0;
  }
  return result;
}

int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *a1, EC_POINT *a2, const BIGNUM *x, int y_bit, BN_CTX *a5)
{
  int v10;
  int v11;
  _BOOL4 v12;
  BN_CTX *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  BIGNUM *v19;
  BIGNUM *v20;
  BIGNUM *v21;
  BIGNUM *v22;
  BIGNUM *v23;
  BIGNUM *v24;
  int top;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int8x16_t *d;
  unint64_t v33;
  int8x8_t v34;
  int8x16_t *v35;
  int8x16_t v36;
  unint64_t v37;
  int8x16_t v38;
  int8x16_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int len[3];
  unsigned __int8 s[66];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (EC_GROUP_cmp(a1, *(const EC_GROUP **)a2, 0))
  {
    v10 = 106;
    v11 = 259;
LABEL_7:
    ERR_put_error(15, 0, v10, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/oct.c", v11);
    return 0;
  }
  if (x->neg
    || *((_DWORD *)a1 + 84)
    || (bn_cmp_words_consttime((uint64_t *)x->d, x->top, *((uint64_t **)a1 + 40), *((int *)a1 + 82)) & 0x80000000) == 0)
  {
    v10 = 107;
    v11 = 265;
    goto LABEL_7;
  }
  ERR_clear_error();
  if (a5)
  {
    v14 = 0;
  }
  else
  {
    a5 = BN_CTX_new();
    v14 = a5;
    if (!a5)
      return 0;
  }
  v45 = y_bit != 0;
  if (!*((_BYTE *)a5 + 40))
  {
    v15 = *((_QWORD *)a5 + 4);
    v16 = *((_QWORD *)a5 + 2);
    if (v16 != *((_QWORD *)a5 + 3))
    {
      v18 = (_QWORD *)*((_QWORD *)a5 + 1);
      goto LABEL_23;
    }
    if (v16)
      v17 = (3 * v16) >> 1;
    else
      v17 = 32;
    if (v17 > v16 && !(v17 >> 61))
    {
      v18 = OPENSSL_realloc(*((_QWORD **)a5 + 1), 8 * v17);
      if (v18)
      {
        *((_QWORD *)a5 + 1) = v18;
        *((_QWORD *)a5 + 3) = v17;
        v16 = *((_QWORD *)a5 + 2);
LABEL_23:
        v18[v16] = v15;
        ++*((_QWORD *)a5 + 2);
        goto LABEL_25;
      }
    }
    *((_WORD *)a5 + 20) = 257;
  }
LABEL_25:
  v19 = BN_CTX_get(a5);
  v20 = BN_CTX_get(a5);
  v21 = BN_CTX_get(a5);
  v22 = BN_CTX_get(a5);
  v23 = BN_CTX_get(a5);
  if (v23)
  {
    v24 = v23;
    if (!v21
      || (*(_QWORD *)len = 0,
          (*(void (**)(const EC_GROUP *, unsigned __int8 *, int *, char *))(*(_QWORD *)a1 + 104))(a1, s, len, (char *)a1 + 360), BN_bin2bn(s, len[0], v21)))
    {
      if (!v22
        || (*(_QWORD *)len = 0,
            (*(void (**)(const EC_GROUP *, unsigned __int8 *, int *, char *))(*(_QWORD *)a1 + 104))(a1, s, len, (char *)a1 + 432), BN_bin2bn(s, len[0], v22)))
      {
        if (!BN_mod_sqr(v20, x, (const BIGNUM *)((char *)a1 + 320), a5)
          || !BN_mod_mul(v19, v20, x, (const BIGNUM *)((char *)a1 + 320), a5))
        {
          goto LABEL_68;
        }
        if (*((_DWORD *)a1 + 132))
        {
          if (!bn_mod_add_consttime((uint64_t)v20, (uint64_t)x, (uint64_t)x, (uint64_t)a1 + 320, a5)
            || !bn_mod_add_consttime((uint64_t)v20, (uint64_t)v20, (uint64_t)x, (uint64_t)a1 + 320, a5)
            || !bn_mod_sub_consttime((uint64_t)v19, (uint64_t)v19, (uint64_t)v20, (uint64_t)a1 + 320, a5))
          {
            goto LABEL_68;
          }
        }
        else if (!BN_mod_mul(v20, v21, x, (const BIGNUM *)((char *)a1 + 320), a5)
               || !bn_mod_add_consttime((uint64_t)v19, (uint64_t)v19, (uint64_t)v20, (uint64_t)a1 + 320, a5))
        {
          goto LABEL_68;
        }
        if (!bn_mod_add_consttime((uint64_t)v19, (uint64_t)v19, (uint64_t)v22, (uint64_t)a1 + 320, a5))
          goto LABEL_68;
        if (!BN_mod_sqrt(v24, v19, (const BIGNUM *)((char *)a1 + 320), a5))
        {
          if ((ERR_peek_last_error() & 0xFF000FFF) == 0x300006E)
          {
            ERR_clear_error();
            v27 = 107;
            v28 = 328;
          }
          else
          {
            v27 = 3;
            v28 = 330;
          }
          goto LABEL_66;
        }
        top = v24->top;
        if (top < 1)
          v26 = 0;
        else
          v26 = *(_DWORD *)v24->d & 1;
        v29 = v45;
        if (v26 == v45)
        {
          if (top >= 1)
          {
LABEL_49:
            v30 = *(_DWORD *)v24->d & 1;
LABEL_63:
            if (v30 == v29)
            {
              v12 = EC_POINT_set_affine_coordinates_GFp(a1, a2, x, v24, a5) != 0;
              goto LABEL_69;
            }
            v27 = 68;
            v28 = 345;
LABEL_66:
            ERR_put_error(15, 0, v27, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/oct.c", v28);
            v12 = 0;
            goto LABEL_69;
          }
LABEL_62:
          v30 = 0;
          goto LABEL_63;
        }
        if (!top)
        {
LABEL_67:
          ERR_put_error(15, 0, 108, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/oct.c", 337);
          goto LABEL_68;
        }
        v31 = top;
        d = (int8x16_t *)v24->d;
        if (top >= 4)
        {
          v33 = top & 0xFFFFFFFFFFFFFFFCLL;
          v35 = d + 1;
          v36 = 0uLL;
          v37 = v31 & 0xFFFFFFFFFFFFFFFCLL;
          v38 = 0uLL;
          do
          {
            v36 = vorrq_s8(v35[-1], v36);
            v38 = vorrq_s8(*v35, v38);
            v35 += 2;
            v37 -= 4;
          }
          while (v37);
          v39 = vorrq_s8(v38, v36);
          v34 = vorr_s8(*(int8x8_t *)v39.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL));
          if (v33 == v31)
          {
LABEL_59:
            if (v34)
            {
              if (BN_usub(v24, (const BIGNUM *)((char *)a1 + 320), v24))
              {
                v29 = v45;
                if (v24->top >= 1)
                  goto LABEL_49;
                goto LABEL_62;
              }
LABEL_68:
              v12 = 0;
              goto LABEL_69;
            }
            goto LABEL_67;
          }
        }
        else
        {
          v33 = 0;
          v34 = 0;
        }
        v40 = v31 - v33;
        v41 = &d->i64[v33];
        do
        {
          v42 = *v41++;
          *(_QWORD *)&v34 |= v42;
          --v40;
        }
        while (v40);
        goto LABEL_59;
      }
    }
  }
  v12 = 0;
LABEL_69:
  if (!*((_BYTE *)a5 + 40))
  {
    v43 = *((_QWORD *)a5 + 1);
    v44 = *((_QWORD *)a5 + 2) - 1;
    *((_QWORD *)a5 + 2) = v44;
    *((_QWORD *)a5 + 4) = *(_QWORD *)(v43 + 8 * v44);
  }
  BN_CTX_free(v14);
  return v12;
}

void EC_GFp_nistp224_method_init()
{
  EC_GFp_nistp224_method_storage = (uint64_t)ec_GFp_nistp224_point_get_affine_coordinates;
  qword_253EA7A40 = (uint64_t)ec_GFp_nistp224_add;
  unk_253EA7A48 = ec_GFp_nistp224_dbl;
  qword_253EA7A50 = (uint64_t)ec_GFp_nistp224_point_mul;
  unk_253EA7A58 = ec_GFp_nistp224_point_mul_base;
  qword_253EA7A68 = (uint64_t)ec_GFp_nistp224_point_mul_public;
  qword_253EA7A88 = (uint64_t)ec_GFp_nistp224_felem_mul;
  unk_253EA7A90 = ec_GFp_nistp224_felem_sqr;
  qword_253EA7A98 = (uint64_t)ec_GFp_simple_felem_to_bytes;
  unk_253EA7AA0 = ec_GFp_simple_felem_from_bytes;
  qword_253EA7AB8 = (uint64_t)ec_simple_scalar_inv0_montgomery;
  unk_253EA7AC0 = ec_simple_scalar_to_montgomery_inv_vartime;
  qword_253EA7AC8 = (uint64_t)ec_GFp_simple_cmp_x_coordinate;
}

uint64_t ec_GFp_nistp224_point_get_affine_coordinates(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  int8x8_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int128 v11;
  signed __int128 v12;
  unint64_t v13;
  unsigned __int128 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unsigned __int128 v33;
  uint64_t v34;
  uint64_t v35;
  signed __int128 v36;
  uint64_t v37;
  signed __int128 v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int128 v55;
  unsigned __int128 v56;
  uint64_t v57;
  unsigned __int128 v58;
  unsigned __int128 v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned __int128 v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  __int128 v75;
  uint64_t v76;
  unsigned __int128 v77;
  signed __int128 v78;
  uint64_t v79;
  uint64_t v80;
  signed __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned __int128 v85;
  uint64_t v86;
  uint64_t v87;
  signed __int128 v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned __int128 v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unsigned __int128 v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unsigned __int128 v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  signed __int128 v127;
  unsigned __int128 v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  __int128 v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unsigned __int128 v141;
  uint64_t v142;
  unsigned __int128 v143;
  unsigned __int128 v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int128 v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  unsigned __int128 v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  __int128 v160;
  unint64_t v161;
  uint64_t v162;
  signed __int128 v163;
  uint64_t v164;
  uint64_t v165;
  unsigned __int128 v166;
  unint64_t v167;
  unsigned __int128 v168;
  uint64_t v169;
  unint64_t v170;
  signed __int128 v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t v193;
  unsigned __int128 v194;
  unsigned __int128 v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unsigned __int128 v199;
  unsigned __int128 v200;
  __int128 v201;
  uint64_t v202;
  unint64_t v203;
  uint64_t v204;
  unsigned __int128 v205;
  signed __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  unint64_t v231;
  unsigned __int128 v232;
  unint64_t v233;
  unsigned __int128 v234;
  unsigned __int128 v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  unsigned __int128 v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  uint64_t v244;
  signed __int128 v245;
  unsigned __int128 v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  __int128 v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unsigned __int128 v272;
  unint64_t v273;
  unint64_t v274;
  unsigned __int128 v275;
  unsigned __int128 v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  unsigned __int128 v280;
  __int128 v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  signed __int128 v285;
  unsigned __int128 v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  __int128 v290;
  unint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  unint64_t v300;
  unsigned __int128 v301;
  unsigned __int128 v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  unint64_t v310;
  unsigned __int128 v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  unsigned __int128 v315;
  uint64_t v316;
  unsigned __int128 v317;
  unint64_t v318;
  unint64_t v319;
  unsigned __int128 v320;
  unint64_t v321;
  signed __int128 v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  signed __int128 v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t v336;
  unint64_t v337;
  __int128 v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unsigned __int128 v354;
  unsigned __int128 v355;
  signed __int128 v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  __int128 v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  unint64_t v367;
  __int128 v368;
  unint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  uint64_t v380;
  unsigned __int128 v381;
  unsigned __int128 v382;
  uint64_t v383;
  unint64_t v384;
  unint64_t v385;
  unint64_t v386;
  __int128 v387;
  __int128 v388;
  unint64_t v389;
  unint64_t v390;
  unint64_t v391;
  uint64_t v392;
  uint64_t v393;
  unint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unsigned __int128 v398;
  uint64_t v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  unint64_t v403;
  __int128 v404;
  unint64_t v405;
  unint64_t v406;
  unsigned __int128 v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unsigned __int128 v413;
  unint64_t v414;
  uint64_t v415;
  unint64_t v416;
  __int128 v417;
  uint64_t v418;
  uint64_t v419;
  unsigned __int128 v420;
  unint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t v424;
  unsigned __int128 v425;
  unint64_t v426;
  unsigned __int128 v427;
  unint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  unint64_t v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  unint64_t v436;
  unint64_t v437;
  __int128 v438;
  signed __int128 v439;
  uint64_t v440;
  uint64_t v441;
  unsigned __int128 v442;
  uint64_t v443;
  unsigned __int128 v444;
  uint64_t v445;
  unint64_t v446;
  signed __int128 v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  __int128 v451;
  unint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  unint64_t v462;
  unint64_t v463;
  uint64_t v464;
  uint64_t v465;
  unint64_t v466;
  unint64_t v467;
  unsigned __int128 v468;
  unsigned __int128 v469;
  signed __int128 v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  __int128 v474;
  uint64_t v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  __int128 v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  unint64_t v490;
  uint64_t v491;
  unint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  unsigned __int128 v496;
  unsigned __int128 v497;
  uint64_t v498;
  unint64_t v499;
  unint64_t v500;
  unint64_t v501;
  __int128 v502;
  __int128 v503;
  unint64_t v504;
  unint64_t v505;
  unint64_t v506;
  uint64_t v507;
  uint64_t v508;
  unint64_t v509;
  unint64_t v510;
  uint64_t v511;
  unsigned __int128 v512;
  unint64_t v513;
  uint64_t v514;
  unint64_t v515;
  unint64_t v516;
  unint64_t v517;
  __int128 v518;
  unint64_t v519;
  unint64_t v520;
  unsigned __int128 v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  unint64_t v525;
  unint64_t v526;
  unsigned __int128 v527;
  unint64_t v528;
  uint64_t v529;
  unint64_t v530;
  __int128 v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  unint64_t v537;
  uint64_t v538;
  unint64_t v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  unint64_t v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  uint64_t v549;
  unint64_t v550;
  uint64_t v551;
  unint64_t v552;
  uint64_t v553;
  unsigned __int128 v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  unint64_t v560;
  unint64_t v561;
  unsigned __int128 v562;
  unint64_t v563;
  unsigned __int128 v564;
  unint64_t v565;
  unint64_t v566;
  unint64_t v567;
  unint64_t v568;
  unsigned __int128 v569;
  unint64_t v570;
  unint64_t v571;
  __int128 v572;
  uint64_t v573;
  unsigned __int128 v574;
  unint64_t v575;
  unint64_t v576;
  signed __int128 v577;
  uint64_t v578;
  uint64_t v579;
  unsigned __int128 v580;
  unint64_t v581;
  uint64_t v582;
  unint64_t v583;
  unint64_t v584;
  signed __int128 v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  __int128 v589;
  unint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  unint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  unint64_t v600;
  unint64_t v601;
  uint64_t v602;
  uint64_t v603;
  unint64_t v604;
  unint64_t v605;
  unsigned __int128 v606;
  unsigned __int128 v607;
  signed __int128 v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  __int128 v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  __int128 v620;
  unint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  unint64_t v632;
  uint64_t v633;
  unsigned __int128 v634;
  unsigned __int128 v635;
  uint64_t v636;
  unint64_t v637;
  unint64_t v638;
  unint64_t v639;
  __int128 v640;
  __int128 v641;
  unint64_t v642;
  unint64_t v643;
  unint64_t v644;
  uint64_t v645;
  uint64_t v646;
  unint64_t v647;
  unint64_t v648;
  uint64_t v649;
  uint64_t v650;
  unsigned __int128 v651;
  uint64_t v652;
  uint64_t v653;
  unint64_t v654;
  unint64_t v655;
  unint64_t v656;
  __int128 v657;
  unint64_t v658;
  unint64_t v659;
  unsigned __int128 v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  unint64_t v664;
  unint64_t v665;
  unsigned __int128 v666;
  unint64_t v667;
  uint64_t v668;
  unint64_t v669;
  __int128 v670;
  uint64_t v671;
  uint64_t v672;
  unsigned __int128 v673;
  unsigned __int128 v674;
  uint64_t v675;
  uint64_t v676;
  unsigned __int128 v677;
  unint64_t v678;
  unint64_t v679;
  unsigned __int128 v680;
  unint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  unint64_t v685;
  uint64_t v686;
  unint64_t v687;
  uint64_t v688;
  unint64_t v689;
  unint64_t v690;
  __int128 v691;
  signed __int128 v692;
  uint64_t v693;
  uint64_t v694;
  unsigned __int128 v695;
  uint64_t v696;
  unint64_t v697;
  uint64_t v698;
  unint64_t v699;
  unint64_t v700;
  signed __int128 v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  __int128 v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  unint64_t v711;
  uint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  unint64_t v716;
  unint64_t v717;
  uint64_t v718;
  uint64_t v719;
  unint64_t v720;
  unint64_t v721;
  unsigned __int128 v722;
  unsigned __int128 v723;
  signed __int128 v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  __int128 v728;
  uint64_t v729;
  uint64_t v730;
  unint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unint64_t v735;
  __int128 v736;
  unint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  unint64_t v746;
  uint64_t v747;
  unint64_t v748;
  uint64_t v749;
  unsigned __int128 v750;
  uint64_t v751;
  unint64_t v752;
  unint64_t v753;
  unint64_t v754;
  signed __int128 v755;
  unint64_t v756;
  unint64_t v757;
  __int128 v758;
  unint64_t v759;
  uint64_t v760;
  uint64_t v761;
  unint64_t v762;
  unint64_t v763;
  uint64_t v764;
  uint64_t v765;
  unsigned __int128 v766;
  uint64_t v767;
  uint64_t v768;
  unint64_t v769;
  unint64_t v770;
  unint64_t v771;
  __int128 v772;
  unint64_t v773;
  unint64_t v774;
  unsigned __int128 v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  unint64_t v779;
  unint64_t v780;
  unsigned __int128 v781;
  unint64_t v782;
  uint64_t v783;
  unint64_t v784;
  __int128 v785;
  uint64_t v786;
  unint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  unint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  unint64_t v795;
  uint64_t v796;
  unint64_t v797;
  uint64_t v798;
  unint64_t v799;
  uint64_t v800;
  unint64_t v801;
  uint64_t v802;
  unint64_t v803;
  uint64_t v804;
  signed __int128 v805;
  unint64_t v806;
  unint64_t v807;
  unsigned __int128 v808;
  unsigned __int128 v809;
  uint64_t v810;
  unint64_t v811;
  unint64_t v812;
  unint64_t v813;
  unsigned __int128 v814;
  unint64_t v815;
  uint64_t v816;
  unint64_t v817;
  unint64_t v818;
  unint64_t v819;
  uint64_t v820;
  __int128 v821;
  unint64_t v822;
  unint64_t v823;
  __int128 v824;
  uint64_t v825;
  uint64_t v826;
  uint64_t v827;
  unsigned __int128 v828;
  uint64_t v829;
  unint64_t v830;
  uint64_t v831;
  unint64_t v832;
  unint64_t v833;
  signed __int128 v834;
  uint64_t v835;
  uint64_t v836;
  uint64_t v837;
  __int128 v838;
  unint64_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  unint64_t v843;
  uint64_t v844;
  unint64_t v845;
  uint64_t v846;
  uint64_t v847;
  unint64_t v848;
  unint64_t v849;
  unint64_t v850;
  unsigned __int128 v851;
  unint64_t v852;
  unint64_t v853;
  unsigned __int128 v854;
  unsigned __int128 v855;
  uint64_t v856;
  uint64_t v857;
  unint64_t v858;
  unint64_t v859;
  unsigned __int128 v860;
  __int128 v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unsigned __int128 v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  unint64_t v871;
  __int128 v872;
  unint64_t v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  unint64_t v880;
  uint64_t v881;
  unint64_t v882;
  uint64_t v883;
  unint64_t v884;
  uint64_t v885;
  unsigned __int128 v886;
  uint64_t v887;
  unint64_t v888;
  unint64_t v889;
  unint64_t v890;
  signed __int128 v891;
  unint64_t v892;
  unint64_t v893;
  __int128 v894;
  unint64_t v895;
  uint64_t v896;
  uint64_t v897;
  unint64_t v898;
  unint64_t v899;
  uint64_t v900;
  uint64_t v901;
  unsigned __int128 v902;
  uint64_t v903;
  uint64_t v904;
  unint64_t v905;
  unint64_t v906;
  unint64_t v907;
  __int128 v908;
  unint64_t v909;
  unint64_t v910;
  unsigned __int128 v911;
  uint64_t v912;
  uint64_t v913;
  uint64_t v914;
  unint64_t v915;
  unint64_t v916;
  unsigned __int128 v917;
  unint64_t v918;
  uint64_t v919;
  unint64_t v920;
  __int128 v921;
  uint64_t v922;
  signed __int128 v923;
  unsigned __int128 v924;
  unint64_t v925;
  uint64_t v926;
  unint64_t v927;
  unint64_t v928;
  unsigned __int128 v929;
  unint64_t v930;
  uint64_t v931;
  unint64_t v932;
  uint64_t v933;
  unint64_t v934;
  unsigned __int128 v935;
  uint64_t v936;
  __int128 v937;
  uint64_t v938;
  unint64_t v939;
  uint64_t v940;
  uint64_t v941;
  unint64_t v942;
  unint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  unint64_t v947;
  unint64_t v948;
  unint64_t v949;
  unint64_t v950;
  unint64_t v951;
  uint64_t v952;
  uint64_t v953;
  uint64_t v954;
  uint64_t v955;
  unint64_t v956;
  __int128 v957;
  unint64_t v958;
  uint64_t v959;
  uint64_t v960;
  uint64_t v961;
  uint64_t v962;
  uint64_t v963;
  uint64_t v964;
  unint64_t v965;
  uint64_t v966;
  unint64_t v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  unsigned __int128 v971;
  uint64_t v972;
  unint64_t v973;
  unint64_t v974;
  unint64_t v975;
  signed __int128 v976;
  unint64_t v977;
  unint64_t v978;
  __int128 v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t v982;
  unint64_t v983;
  unint64_t v984;
  uint64_t v985;
  uint64_t v986;
  unsigned __int128 v987;
  uint64_t v988;
  uint64_t v989;
  unint64_t v990;
  unint64_t v991;
  unint64_t v992;
  __int128 v993;
  unint64_t v994;
  unint64_t v995;
  unsigned __int128 v996;
  uint64_t v997;
  uint64_t v998;
  uint64_t v999;
  unint64_t v1000;
  unint64_t v1001;
  unsigned __int128 v1002;
  unint64_t v1003;
  uint64_t v1004;
  unint64_t v1005;
  __int128 v1006;
  uint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  unint64_t v1010;
  uint64_t v1011;
  unint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  unint64_t v1015;
  uint64_t v1016;
  uint64_t v1017;
  uint64_t v1018;
  unint64_t v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t v1022;
  unsigned __int128 v1023;
  unint64_t v1024;
  uint64_t v1025;
  unint64_t v1026;
  unint64_t v1027;
  uint64_t v1028;
  __int128 v1029;
  unint64_t v1030;
  unint64_t v1031;
  unint64_t v1032;
  unint64_t v1033;
  unsigned __int128 v1034;
  unint64_t v1035;
  unsigned __int128 v1036;
  unint64_t v1037;
  uint64_t v1038;
  unint64_t v1039;
  unint64_t v1040;
  unint64_t v1041;
  unint64_t v1042;
  __int128 v1043;
  uint64_t v1044;
  unsigned __int128 v1045;
  signed __int128 v1046;
  uint64_t v1047;
  uint64_t v1048;
  unsigned __int128 v1049;
  uint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  unint64_t v1053;
  unint64_t v1054;
  signed __int128 v1055;
  uint64_t v1056;
  uint64_t v1057;
  uint64_t v1058;
  __int128 v1059;
  unint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  unint64_t v1064;
  uint64_t v1065;
  unint64_t v1066;
  uint64_t v1067;
  unint64_t v1068;
  uint64_t v1069;
  uint64_t v1070;
  unint64_t v1071;
  uint64_t v1072;
  unint64_t v1073;
  uint64_t v1074;
  unint64_t v1075;
  uint64_t v1076;
  uint64_t v1077;
  unint64_t v1078;
  unint64_t v1079;
  unint64_t v1080;
  unsigned __int128 v1081;
  unint64_t v1082;
  unint64_t v1083;
  unsigned __int128 v1084;
  unsigned __int128 v1085;
  uint64_t v1086;
  unint64_t v1087;
  unint64_t v1088;
  unsigned __int128 v1089;
  unsigned __int128 v1090;
  uint64_t v1091;
  uint64_t v1092;
  uint64_t v1093;
  uint64_t v1094;
  unint64_t v1095;
  unsigned __int128 v1096;
  uint64_t v1097;
  unint64_t v1098;
  uint64_t v1099;
  __int128 v1100;
  unint64_t v1101;
  uint64_t v1102;
  unint64_t v1103;
  uint64_t v1104;
  uint64_t v1105;
  uint64_t v1106;
  unint64_t v1107;
  uint64_t v1108;
  unint64_t v1109;
  uint64_t v1110;
  uint64_t v1111;
  unint64_t v1112;
  uint64_t v1113;
  unint64_t v1114;
  uint64_t v1115;
  unint64_t v1116;
  uint64_t v1117;
  unint64_t v1118;
  uint64_t v1119;
  unsigned __int128 v1120;
  uint64_t v1121;
  unint64_t v1122;
  uint64_t v1123;
  uint64_t v1124;
  uint64_t v1125;
  unint64_t v1126;
  unint64_t v1127;
  unsigned __int128 v1128;
  unint64_t v1129;
  uint64_t v1130;
  unint64_t v1131;
  unint64_t v1132;
  unsigned __int128 v1133;
  unint64_t v1134;
  uint64_t v1135;
  unint64_t v1136;
  unint64_t v1137;
  unint64_t v1138;
  __int128 v1139;
  unsigned __int128 v1140;
  signed __int128 v1141;
  uint64_t v1142;
  signed __int128 v1143;
  unint64_t v1144;
  uint64_t v1145;
  unint64_t v1146;
  unint64_t v1147;
  uint64_t v1148;
  uint64_t v1149;
  unint64_t v1150;
  unint64_t v1151;
  uint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  unint64_t v1155;
  __int128 v1156;
  unint64_t v1157;
  uint64_t v1158;
  uint64_t v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  unint64_t v1164;
  uint64_t v1165;
  unint64_t v1166;
  uint64_t v1167;
  unint64_t v1168;
  uint64_t v1169;
  unsigned __int128 v1170;
  unsigned __int128 v1171;
  uint64_t v1172;
  unint64_t v1173;
  unint64_t v1174;
  unint64_t v1175;
  __int128 v1176;
  __int128 v1177;
  unint64_t v1178;
  unint64_t v1179;
  unint64_t v1180;
  uint64_t v1181;
  unint64_t v1182;
  unint64_t v1183;
  unint64_t v1184;
  unint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  unint64_t v1188;
  unint64_t v1189;
  unint64_t v1190;
  __int128 v1191;
  unint64_t v1192;
  unint64_t v1193;
  unsigned __int128 v1194;
  uint64_t v1195;
  unint64_t v1196;
  uint64_t v1197;
  unsigned __int128 v1198;
  uint64_t v1199;
  unint64_t v1200;
  __int128 v1201;
  uint64_t v1202;
  uint64_t v1203;
  unint64_t v1204;
  uint64_t v1205;
  unint64_t v1206;
  uint64_t v1207;
  unint64_t v1208;
  uint64_t v1209;
  unsigned __int128 v1210;
  unint64_t v1211;
  uint64_t v1212;
  unsigned __int128 v1213;
  unint64_t v1214;
  unint64_t v1215;
  unsigned __int128 v1216;
  unsigned __int128 v1217;
  unint64_t v1218;
  uint64_t v1219;
  unint64_t v1220;
  unint64_t v1221;
  unsigned __int128 v1222;
  unint64_t v1223;
  uint64_t v1224;
  unint64_t v1225;
  unint64_t v1226;
  unint64_t v1227;
  unint64_t v1228;
  __int128 v1229;
  signed __int128 v1230;
  uint64_t v1231;
  uint64_t v1232;
  unsigned __int128 v1233;
  uint64_t v1234;
  unsigned __int128 v1235;
  uint64_t v1236;
  unint64_t v1237;
  signed __int128 v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  __int128 v1242;
  unint64_t v1243;
  uint64_t v1244;
  uint64_t v1245;
  uint64_t v1246;
  uint64_t v1247;
  uint64_t v1248;
  unint64_t v1249;
  uint64_t v1250;
  uint64_t v1251;
  uint64_t v1252;
  unint64_t v1253;
  unint64_t v1254;
  uint64_t v1255;
  uint64_t v1256;
  unint64_t v1257;
  unint64_t v1258;
  unsigned __int128 v1259;
  unsigned __int128 v1260;
  signed __int128 v1261;
  uint64_t v1262;
  uint64_t v1263;
  uint64_t v1264;
  unint64_t v1265;
  uint64_t v1266;
  signed __int128 v1267;
  unint64_t v1268;
  unsigned __int128 v1269;
  uint64_t v1270;
  uint64_t v1271;
  unint64_t v1272;
  __int128 v1273;
  unint64_t v1274;
  uint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  __int128 v1278;
  uint64_t v1279;
  unint64_t v1280;
  uint64_t v1281;
  uint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  unint64_t v1285;
  unint64_t v1286;
  unsigned __int128 v1287;
  uint64_t v1288;
  uint64_t v1289;
  unint64_t v1290;
  uint64_t v1291;
  unint64_t v1292;
  unint64_t v1293;
  unint64_t v1294;
  uint64_t v1295;
  uint64_t v1296;
  unint64_t v1297;
  unsigned __int128 v1298;
  unint64_t v1299;
  unsigned __int128 v1300;
  unint64_t v1301;
  uint64_t v1302;
  uint64_t v1303;
  uint64_t v1304;
  unsigned __int128 v1305;
  unint64_t v1306;
  unint64_t v1307;
  unint64_t v1308;
  __int128 v1309;
  unsigned __int128 v1310;
  unsigned __int128 v1311;
  unint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  uint64_t v1315;
  signed __int128 v1316;
  unint64_t v1317;
  uint64_t v1318;
  uint64_t v1319;
  unint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  __int128 v1323;
  unint64_t v1324;
  uint64_t v1325;
  uint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  uint64_t v1332;
  uint64_t v1333;
  unint64_t v1334;
  uint64_t v1335;
  uint64_t v1336;
  unint64_t v1337;
  unint64_t v1338;
  uint64_t v1339;
  uint64_t v1340;
  unint64_t v1341;
  uint64_t v1342;
  unint64_t v1343;
  uint64_t v1344;
  uint64_t v1345;
  unint64_t v1346;
  uint64_t v1347;
  uint64_t v1348;
  uint64_t v1349;
  uint64_t v1350;
  uint64_t v1351;
  unint64_t v1352;
  uint64_t v1353;
  unint64_t v1354;
  uint64_t v1355;
  unsigned __int128 v1356;
  unsigned __int128 v1357;
  unint64_t v1358;
  unint64_t v1359;
  unint64_t v1360;
  unint64_t v1361;
  uint64_t v1362;
  __int128 v1363;
  uint64_t v1364;
  uint64_t v1365;
  unint64_t v1366;
  uint64_t v1367;
  uint64_t v1368;
  uint64_t v1369;
  unint64_t v1370;
  unint64_t v1371;
  uint64_t v1372;
  unint64_t v1373;
  uint64_t v1374;
  uint64_t v1375;
  unint64_t v1376;
  uint64_t v1377;
  unint64_t v1378;
  unint64_t v1379;
  unint64_t v1380;
  __int128 v1381;
  unsigned __int128 v1382;
  unint64_t v1383;
  uint64_t v1384;
  signed __int128 v1385;
  uint64_t v1386;
  uint64_t v1387;
  unsigned __int128 v1388;
  uint64_t v1389;
  unint64_t v1390;
  uint64_t v1391;
  unint64_t v1392;
  signed __int128 v1393;
  uint64_t v1394;
  uint64_t v1395;
  uint64_t v1396;
  __int128 v1397;
  unint64_t v1398;
  unint64_t v1399;
  uint64_t v1400;
  unint64_t v1401;
  uint64_t v1402;
  uint64_t v1403;
  unint64_t v1404;
  uint64_t v1405;
  unint64_t v1406;
  uint64_t v1407;
  unint64_t v1408;
  uint64_t v1409;
  unsigned __int128 v1410;
  unsigned __int128 v1411;
  unint64_t v1412;
  uint64_t v1413;
  uint64_t v1414;
  unint64_t v1415;
  unsigned __int128 v1416;
  unint64_t v1417;
  uint64_t v1418;
  unint64_t v1419;
  unsigned __int128 v1420;
  uint64_t v1421;
  unsigned __int128 v1422;
  unint64_t v1423;
  unint64_t v1424;
  unsigned __int128 v1425;
  unsigned __int128 v1426;
  uint64_t v1427;
  uint64_t v1428;
  unint64_t v1429;
  uint64_t v1430;
  uint64_t v1431;
  uint64_t v1432;
  uint64_t v1433;
  uint64_t v1434;
  uint64_t v1435;
  unint64_t v1436;
  uint64_t v1437;
  unint64_t v1438;
  uint64_t v1439;
  uint64_t v1440;
  __int128 v1441;
  unint64_t v1442;
  uint64_t v1443;
  uint64_t v1444;
  uint64_t v1445;
  uint64_t v1446;
  uint64_t v1447;
  uint64_t v1448;
  uint64_t v1449;
  uint64_t v1450;
  uint64_t v1451;
  unint64_t v1452;
  uint64_t v1453;
  uint64_t v1454;
  unint64_t v1455;
  int8x16_t *v1457;
  int8x16_t v1458;
  uint64_t v1459;
  int8x16_t v1460;
  int8x16_t v1461;
  uint64_t v1462;
  uint64_t *v1463;
  uint64_t v1464;
  uint64_t v1465;
  unint64_t v1466;
  uint64_t v1467;
  uint64_t v1468;
  unsigned __int128 v1469;
  uint64_t v1470;
  unint64_t v1471;
  unint64_t v1472;
  uint64_t v1473;
  uint64_t v1474;
  uint64_t v1475;
  uint64_t v1476;
  unint64_t v1477;
  unint64_t v1478;
  uint64_t v1479;
  uint64_t v1480;
  uint64_t v1481;
  uint64_t v1482;
  uint64_t v1483;
  unint64_t v1484;
  uint64_t v1486;
  uint64_t v1489;
  unint64_t v1490;
  unint64_t v1491;

  v4 = *(unsigned int *)(a1 + 328);
  if ((int)v4 < 1)
    goto LABEL_373;
  if (v4 < 4)
  {
    v5 = 0;
    v6 = 0;
LABEL_370:
    v1462 = v4 - v5;
    v1463 = (uint64_t *)(a2 + 8 * v5 + 144);
    do
    {
      v1464 = *v1463++;
      *(_QWORD *)&v6 |= v1464;
      --v1462;
    }
    while (v1462);
    goto LABEL_372;
  }
  v5 = v4 & 0x7FFFFFFC;
  v1457 = (int8x16_t *)(a2 + 160);
  v1458 = 0uLL;
  v1459 = v4 & 0xFFFFFFFC;
  v1460 = 0uLL;
  do
  {
    v1458 = vorrq_s8(v1457[-1], v1458);
    v1460 = vorrq_s8(*v1457, v1460);
    v1457 += 2;
    v1459 -= 4;
  }
  while (v1459);
  v1461 = vorrq_s8(v1460, v1458);
  v6 = vorr_s8(*(int8x8_t *)v1461.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v1461, v1461, 8uLL));
  if (v5 != v4)
    goto LABEL_370;
LABEL_372:
  if (!*(_QWORD *)&v6)
  {
LABEL_373:
    ERR_put_error(15, 0, 119, "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/third_party/boringssl/src/crypto/fipsmodule/ec/p224-64.c", 868);
    return 0;
  }
  v7 = *(_QWORD *)(a2 + 144) & 0xFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(a2 + 151) & 0xFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(a2 + 158) & 0xFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(a2 + 165) & 0xFFFFFFFFFFFFFFLL;
  v11 = (unint64_t)v10 * (unsigned __int128)(unint64_t)(2 * v7)
      + (unint64_t)(2 * v9) * (unsigned __int128)(unint64_t)v8;
  v12 = (unint64_t)v10 * (unsigned __int128)(unint64_t)(2 * v8)
      + (unint64_t)v9 * (unsigned __int128)(unint64_t)v9
      + (((unint64_t)v10 * (unsigned __int128)(unint64_t)v10) >> 16);
  v13 = (unint64_t)(unsigned __int16)(*(_WORD *)(a2 + 165) * *(_WORD *)(a2 + 165)) << 40;
  v14 = (unint64_t)v10 * (unsigned __int128)(unint64_t)(2 * v9);
  v15 = *((_QWORD *)&v14 + 1) >> 16;
  v16 = ((_QWORD)v14 << 40) & 0xFFFE0000000000;
  v17 = ((unint64_t)(2 * v8) * (unsigned __int128)(unint64_t)v7 - v14) >> 64;
  v18 = 2 * v8 * v7 - v14;
  v19 = (unint64_t)(unsigned __int16)(*(_WORD *)(a2 + 165) * 2 * *(_WORD *)(a2 + 151)
                                           + *(_WORD *)(a2 + 158) * *(_WORD *)(a2 + 158)
                                           + ((*(_DWORD *)(a2 + 165) * *(_DWORD *)(a2 + 165)) >> 16)) << 40;
  v20 = __CFADD__(v18, v19);
  v21 = v18 + v19;
  if (v20)
    ++v17;
  v22 = v12 >> 16;
  v23 = ((unint64_t)v8 * (unsigned __int128)(unint64_t)v8
       + (unint64_t)(2 * v9) * (unsigned __int128)(unint64_t)v7
       - (unint64_t)v10 * (unsigned __int128)(unint64_t)v10) >> 64;
  v24 = v8 * v8 + 2 * v9 * v7 - v10 * v10;
  v20 = __CFADD__(v24, v16);
  v25 = v24 + v16;
  if (v20)
    ++v23;
  v26 = ((__PAIR128__(v23, v25) + ((unsigned __int128)v12 >> 16)) >> 64) + 0x7FFFFFFFFFFFFF80;
  v27 = HIBYTE(v26);
  *((_QWORD *)&v29 + 1) = v26;
  *(_QWORD *)&v29 = v25 + v22;
  v28 = v29 >> 56;
  v30 = (v11 + __PAIR128__(v15, (__int128)((unint64_t)v10 * (unsigned __int128)(unint64_t)(2 * v9)) >> 16)) >> 64;
  v31 = v11 + ((__int128)((unint64_t)v10 * (unsigned __int128)(unint64_t)(2 * v9)) >> 16);
  v20 = __CFADD__(v31, v13);
  v32 = v31 + v13;
  if (v20)
    ++v30;
  v33 = __PAIR128__(v30, v32) + __PAIR128__(v27, v28);
  v34 = ((__int128)(__PAIR128__(v30, v32) + __PAIR128__(v27, v28)) >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v21, v34);
  v35 = v21 + v34;
  if (v20)
    ++v17;
  v36 = (unint64_t)v7 * (unsigned __int128)(unint64_t)v7
      - (v12
       + (v33 >> 56))
      + __PAIR128__(0x8000000000000000, 0x8000);
  v37 = ((v25 + v22) & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v33 + 1) >> 8);
  v38 = __PAIR128__(HIBYTE(*((_QWORD *)&v36 + 1)) + (unint64_t)__CFADD__(v35, (unint64_t)(v36 >> 56)) + v17, v35 + (unint64_t)(v36 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v39 = (unint64_t)((__PAIR128__(HIBYTE(*((_QWORD *)&v36 + 1))+ (unint64_t)__CFADD__(v35, (unint64_t)(v36 >> 56))+ v17, v35 + (unint64_t)(v36 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
  v40 = v38 >> 56;
  v20 = __CFADD__(v37, v40);
  v41 = v37 + v40;
  if (v20)
    v42 = v39 + 1;
  else
    v42 = v39;
  *((_QWORD *)&v43 + 1) = v42;
  *(_QWORD *)&v43 = v41;
  v44 = (v43 >> 56) + (v33 & 0xFFFFFFFFFFFFFFLL);
  v45 = ((v38 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v7) >> 64;
  v46 = (v38 & 0xFFFFFFFFFFFFFFLL) * v7;
  v47 = *(_QWORD *)(a2 + 151) & 0xFFFFFFFFFFFFFFLL;
  v48 = ((v36 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v8) >> 64;
  v49 = (v36 & 0xFFFFFFFFFFFFFFLL) * v8;
  v50 = ((v38 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v8) >> 64;
  v51 = (v38 & 0xFFFFFFFFFFFFFFLL) * v8;
  v52 = *(_QWORD *)(a2 + 158) & 0xFFFFFFFFFFFFFFLL;
  v53 = (v44 * (unsigned __int128)(unint64_t)v8) >> 64;
  v54 = v44 * v8;
  v55 = v44 * (unsigned __int128)(unint64_t)v9
      + (v41 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v10;
  v56 = (v41 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v9
      + (v38 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v10;
  v57 = v44 * v10;
  v58 = v44 * (unsigned __int128)(unint64_t)v10;
  v59 = __PAIR128__(v53 + (unint64_t)__CFADD__((_QWORD)v56, v54) + *((_QWORD *)&v56 + 1), (uint64_t)v56 + v54)
      + (v58 >> 16);
  v60 = (v44 * (unsigned __int128)(unint64_t)v7) >> 64;
  v61 = v44 * v7;
  v62 = (v38 & 0xFFFFFFFFFFFFFFLL) * v52;
  v65 = (v36 & 0xFFFFFFFFFFFFFFLL) * v10;
  v63 = ((v36 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v9
       + __PAIR128__(v50, v51)
       + (v41 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v7) >> 64;
  v64 = (v36 & 0xFFFFFFFFFFFFFFLL) * v9 + v51 + (v41 & 0xFFFFFFFFFFFFFFLL) * v7;
  v66 = (unint64_t)(unsigned __int16)v57 << 40;
  v68 = (__PAIR128__(v63, v64) - __PAIR128__(*((unint64_t *)&v58 + 1), v57)) >> 64;
  v67 = v64 - v57;
  v69 = (unint64_t)(unsigned __int16)v55 << 40;
  v20 = __CFADD__(v67, v69);
  v70 = v67 + v69;
  if (v20)
    ++v68;
  v71 = __PAIR128__(v68, v70) + (v59 >> 16);
  v20 = __CFADD__(v62, v65);
  v72 = v62 + v65;
  v73 = (unint64_t)(unsigned __int16)v59 << 40;
  *((_QWORD *)&v75 + 1) = *((_QWORD *)&v71 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v75 = v70 + (v59 >> 16);
  v74 = v75 >> 56;
  v77 = __PAIR128__((((v36 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v10) >> 64)+ v20+ (((v38 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v52) >> 64), v72)+ (v41 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v47+ __PAIR128__(v60, v61);
  v76 = *((_QWORD *)&v77 + 1);
  if (__CFADD__((_QWORD)v77, v66))
    v76 = *((_QWORD *)&v77 + 1) + 1;
  v78 = __PAIR128__(v76, (unint64_t)v77 + v66)
      + (v55 >> 16)
      + __PAIR128__((unint64_t)(*((_QWORD *)&v71 + 1) + 0x7FFFFFFFFFFFFF80) >> 56, v74);
  v79 = (v71 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v78 + 1) >> 8);
  v80 = (v78 >> 16) & 0xFFFF0000000000;
  v81 = (v36 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v7
      - (v59
       + ((unsigned __int128)v78 >> 56))
      + __PAIR128__(0x8000000000000000, 0x8000);
  v82 = v81 >> 56;
  v83 = HIBYTE(*((_QWORD *)&v81 + 1));
  v85 = __PAIR128__(v45 + (unint64_t)__CFADD__(v49, v46) + v48, v49 + v46) - v55;
  v84 = (__PAIR128__(v45 + (unint64_t)__CFADD__(v49, v46) + v48, v49 + v46) - v55) >> 64;
  v86 = v85 + v73;
  if (__CFADD__((_QWORD)v85, v73))
    ++v84;
  v20 = __CFADD__(v86, v80);
  v87 = v86 + v80;
  if (v20)
    ++v84;
  v88 = __PAIR128__(v83 + (unint64_t)__CFADD__(v87, v82) + v84, v87 + v82)
      + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v89 = (unint64_t)((__PAIR128__(v83 + (unint64_t)__CFADD__(v87, v82) + v84, v87 + v82)
                          + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
  v90 = v88 >> 56;
  v20 = __CFADD__(v79, v90);
  v91 = v79 + v90;
  if (v20)
    ++v89;
  *((_QWORD *)&v92 + 1) = v89;
  *(_QWORD *)&v92 = v91;
  v93 = (v92 >> 56) + (v78 & 0xFFFFFFFFFFFFFFLL);
  v94 = 2 * (v88 & 0xFFFFFFFFFFFFFFLL);
  v95 = 2 * (v91 & 0xFFFFFFFFFFFFFFLL);
  v96 = v81 & 0xFFFFFFFFFFFFFFLL;
  v97 = ((unint64_t)v96 * (unsigned __int128)(unint64_t)v96) >> 64;
  v98 = v96 * v96;
  v99 = ((v81 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v94) >> 64;
  v100 = (v81 & 0xFFFFFFFFFFFFFFLL) * v94;
  v101 = ((v81 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v95) >> 64;
  v102 = (v81 & 0xFFFFFFFFFFFFFFLL) * v95;
  v103 = v88 & 0xFFFFFFFFFFFFFFLL;
  v104 = ((unint64_t)v103 * (unsigned __int128)(unint64_t)v103) >> 64;
  v105 = v103 * v103;
  v106 = ((v88 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v95
        + v93 * (unsigned __int128)(2 * ((unint64_t)v81 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v107 = (v88 & 0xFFFFFFFFFFFFFFLL) * v95 + v93 * 2 * (v81 & 0xFFFFFFFFFFFFFFLL);
  v109 = v93 * v94 + (v91 & 0xFFFFFFFFFFFFFFLL) * (v91 & 0xFFFFFFFFFFFFFFLL);
  v108 = (v93 * (unsigned __int128)(unint64_t)v94
        + (v91 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v91 & 0xFFFFFFFFFFFFFFLL)) >> 64;
  v110 = v93 * v95;
  v111 = (v93 * (unsigned __int128)(unint64_t)v95) >> 64;
  v112 = v93 * v93;
  v113 = (v93 * (unsigned __int128)v93) >> 64;
  *((_QWORD *)&v92 + 1) = v113;
  *(_QWORD *)&v92 = v112;
  v114 = __PAIR128__(v108, v109) + ((unsigned __int128)v92 >> 16);
  v115 = (unint64_t)(unsigned __int16)v112 << 40;
  v20 = __CFADD__(v107, v115);
  v116 = v107 + v115;
  *((_QWORD *)&v92 + 1) = v111;
  *(_QWORD *)&v92 = v110;
  v117 = v92 >> 16;
  if (v20)
    ++v106;
  v118 = __PAIR128__(v106, v116) + __PAIR128__(v111 >> 16, v117);
  v119 = (__PAIR128__(v99, v100) - __PAIR128__(v111, v110)) >> 64;
  v120 = (unint64_t)(unsigned __int16)v114 << 40;
  v20 = __CFADD__(v100 - v110, v120);
  v121 = v100 - v110 + v120;
  if (v20)
    ++v119;
  v122 = __PAIR128__(v104, v105)
       - __PAIR128__(v113, v112)
       + __PAIR128__(v101, v102)
       + (v114 >> 16)
       + __PAIR128__(0x7FFFFFFFFFFFFF80, (v110 << 40) & 0xFFFE0000000000);
  v123 = v118 + (v122 >> 56);
  v124 = (v123 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v121, v124);
  v125 = v121 + v124;
  if (v20)
    ++v119;
  v126 = (v122 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v123 + 1) >> 8);
  v127 = __PAIR128__(v97, v98) - (v114 + ((unsigned __int128)v123 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000);
  v128 = __PAIR128__(HIBYTE(*((_QWORD *)&v127 + 1)) + (unint64_t)__CFADD__(v125, (unint64_t)(v127 >> 56)) + v119, v125 + (unint64_t)(v127 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v129 = (__int128)(__PAIR128__(HIBYTE(*((_QWORD *)&v127 + 1))+ (unint64_t)__CFADD__(v125, (unint64_t)(v127 >> 56))+ v119, v125 + (unint64_t)(v127 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 56;
  v20 = __CFADD__(v126, v129);
  v130 = v126 + v129;
  if (v20)
    v131 = ((unint64_t)((__PAIR128__(HIBYTE(*((_QWORD *)&v127 + 1))+ (unint64_t)__CFADD__(v125, (unint64_t)(v127 >> 56))+ v119, v125 + (unint64_t)(v127 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56)+ 1;
  else
    v131 = (unint64_t)((__PAIR128__(HIBYTE(*((_QWORD *)&v127 + 1))+ (unint64_t)__CFADD__(v125, (unint64_t)(v127 >> 56))+ v119, v125 + (unint64_t)(v127 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
  *((_QWORD *)&v132 + 1) = v131;
  *(_QWORD *)&v132 = v130;
  v133 = (v132 >> 56) + (v123 & 0xFFFFFFFFFFFFFFLL);
  v134 = ((v128 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v7) >> 64;
  v135 = (v128 & 0xFFFFFFFFFFFFFFLL) * v7;
  v136 = ((v127 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v47) >> 64;
  v137 = (v127 & 0xFFFFFFFFFFFFFFLL) * v47;
  v138 = v130 & 0xFFFFFFFFFFFFFFLL;
  v139 = ((unint64_t)v138 * (unsigned __int128)(unint64_t)v7) >> 64;
  v140 = v138 * v7;
  v141 = v133 * (unsigned __int128)(unint64_t)v52
       + (unint64_t)v138 * (unsigned __int128)(unint64_t)v10;
  v142 = v133 * v10;
  v143 = v133 * (unsigned __int128)(unint64_t)v10;
  v144 = (unint64_t)v138 * (unsigned __int128)(unint64_t)v52
       + (v128 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v10
       + v133 * (unsigned __int128)(unint64_t)v47
       + (v143 >> 16);
  v145 = (v133 * (unsigned __int128)(unint64_t)v7) >> 64;
  v1482 = v10;
  v1483 = v7;
  v146 = v133 * v7;
  v147 = ((unint64_t)v138 * (unsigned __int128)(unint64_t)v47) >> 64;
  v1480 = v47;
  v1481 = v52;
  v148 = v138 * v47;
  v149 = (v128 & 0xFFFFFFFFFFFFFFLL) * v52;
  v151 = (v127 & 0xFFFFFFFFFFFFFFLL) * v10;
  v150 = (v127 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v52
       + (v128 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v47
       + __PAIR128__(v139, v140);
  v152 = (unint64_t)(unsigned __int16)v142 << 40;
  v153 = (v150 - __PAIR128__(*((unint64_t *)&v143 + 1), v142)) >> 64;
  v154 = (unint64_t)(unsigned __int16)v141 << 40;
  v155 = v150 - v142 + v154;
  if (__CFADD__(v150 - v142, v154))
    ++v153;
  v156 = __PAIR128__(v153, v155) + (v144 >> 16);
  v20 = __CFADD__(v149, v151);
  v157 = v149 + v151;
  v158 = (unint64_t)(unsigned __int16)v144 << 40;
  *((_QWORD *)&v160 + 1) = *((_QWORD *)&v156 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v160 = v155 + (v144 >> 16);
  v159 = v160 >> 56;
  v162 = v157 + v148 + v146;
  v161 = (__PAIR128__((((v127 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v10) >> 64)+ v20+ (((v128 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v52) >> 64), v157)+ __PAIR128__(v147, v148)+ __PAIR128__(v145, v146)) >> 64;
  if (__CFADD__(v162, v152))
    ++v161;
  v163 = __PAIR128__(v161, v162 + v152)
       + (v141 >> 16)
       + __PAIR128__((unint64_t)(*((_QWORD *)&v156 + 1) + 0x7FFFFFFFFFFFFF80) >> 56, v159);
  v164 = (v156 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v163 + 1) >> 8);
  v165 = (v163 >> 16) & 0xFFFF0000000000;
  v166 = (v127 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v7
       - (v144
        + ((unsigned __int128)v163 >> 56))
       + __PAIR128__(0x8000000000000000, 0x8000);
  v168 = __PAIR128__(v134 + (unint64_t)__CFADD__(v137, v135) + v136, v137 + v135) - v141;
  v167 = (__PAIR128__(v134 + (unint64_t)__CFADD__(v137, v135) + v136, v137 + v135) - v141) >> 64;
  v169 = v168 + v158;
  if (__CFADD__((_QWORD)v168, v158))
    ++v167;
  v20 = __CFADD__(v169, v165);
  v170 = v169 + v165;
  if (v20)
    ++v167;
  v171 = __PAIR128__(v167, v170) + (v166 >> 56) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v172 = v171 >> 56;
  v173 = v164 + v172;
  if (__CFADD__(v164, v172))
    v174 = HIBYTE(*((_QWORD *)&v171 + 1)) + 1;
  else
    v174 = HIBYTE(*((_QWORD *)&v171 + 1));
  *((_QWORD *)&v175 + 1) = v174;
  *(_QWORD *)&v175 = v173;
  v176 = (v175 >> 56) + (v163 & 0xFFFFFFFFFFFFFFLL);
  v177 = 2 * (v171 & 0xFFFFFFFFFFFFFFLL);
  v178 = 2 * (v173 & 0xFFFFFFFFFFFFFFLL);
  v179 = v166 & 0xFFFFFFFFFFFFFFLL;
  v180 = ((v166 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v177) >> 64;
  v181 = (v166 & 0xFFFFFFFFFFFFFFLL) * v177;
  v182 = ((v166 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v178) >> 64;
  v183 = (v166 & 0xFFFFFFFFFFFFFFLL) * v178;
  v184 = v171 & 0xFFFFFFFFFFFFFFLL;
  v186 = ((v171 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v178
        + v176 * (unsigned __int128)(2 * ((unint64_t)v166 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v185 = (v171 & 0xFFFFFFFFFFFFFFLL) * v178 + v176 * 2 * (v166 & 0xFFFFFFFFFFFFFFLL);
  v187 = v173 & 0xFFFFFFFFFFFFFFLL;
  v188 = v176 * v178;
  v189 = (v176 * (unsigned __int128)(unint64_t)v178) >> 64;
  v191 = (v176 * (unsigned __int128)(unint64_t)v177
        + (unint64_t)v187 * (unsigned __int128)(unint64_t)v187
        + ((v176 * (unsigned __int128)v176) >> 16)) >> 64;
  v190 = v176 * v177 + v187 * v187 + ((v176 * (unsigned __int128)v176) >> 16);
  v192 = (unint64_t)(unsigned __int16)(((v175 >> 56) + v163) * ((v175 >> 56) + v163)) << 40;
  v20 = __CFADD__(v185, v192);
  v193 = v185 + v192;
  if (v20)
    ++v186;
  *((_QWORD *)&v194 + 1) = v189;
  *(_QWORD *)&v194 = v188;
  v195 = __PAIR128__(v186, v193) + (v194 >> 16);
  v196 = (__PAIR128__(v180, v181) - __PAIR128__(v189, v188)) >> 64;
  v197 = (unint64_t)(unsigned __int16)v190 << 40;
  v20 = __CFADD__(v181 - v188, v197);
  v198 = v181 - v188 + v197;
  if (v20)
    ++v196;
  *((_QWORD *)&v199 + 1) = v191;
  *(_QWORD *)&v199 = v190;
  v200 = (unint64_t)v184 * (unsigned __int128)(unint64_t)v184
       - v176 * (unsigned __int128)v176
       + __PAIR128__(v182, v183)
       + (v199 >> 16)
       + __PAIR128__(0x7FFFFFFFFFFFFF80, (v188 << 40) & 0xFFFE0000000000);
  v201 = v195 + (v200 >> 56);
  v202 = (v201 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v198, v202);
  v203 = v198 + v202;
  if (v20)
    ++v196;
  v204 = (v200 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v201 + 1) >> 8);
  v205 = (unint64_t)v179 * (unsigned __int128)(unint64_t)v179
       - (__PAIR128__(v191, v190)
        + ((unsigned __int128)v201 >> 56))
       + __PAIR128__(0x8000000000000000, 0x8000);
  v206 = __PAIR128__(v196, v203) + (v205 >> 56) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v207 = v206 >> 56;
  v208 = HIBYTE(*((_QWORD *)&v206 + 1));
  v20 = __CFADD__(v204, v207);
  v209 = v204 + v207;
  if (v20)
    ++v208;
  *((_QWORD *)&v210 + 1) = v208;
  *(_QWORD *)&v210 = v209;
  v211 = (v210 >> 56) + (v201 & 0xFFFFFFFFFFFFFFLL);
  v212 = 2 * (v206 & 0xFFFFFFFFFFFFFFLL);
  v213 = 2 * (v209 & 0xFFFFFFFFFFFFFFLL);
  v214 = v205 & 0xFFFFFFFFFFFFFFLL;
  v215 = ((unint64_t)v214 * (unsigned __int128)(unint64_t)v214) >> 64;
  v216 = v214 * v214;
  v217 = ((v205 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v212) >> 64;
  v218 = (v205 & 0xFFFFFFFFFFFFFFLL) * v212;
  v219 = ((v205 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v213) >> 64;
  v220 = (v205 & 0xFFFFFFFFFFFFFFLL) * v213;
  v221 = v206 & 0xFFFFFFFFFFFFFFLL;
  v222 = ((unint64_t)v221 * (unsigned __int128)(unint64_t)v221) >> 64;
  v223 = v221 * v221;
  v225 = (v206 & 0xFFFFFFFFFFFFFFLL) * v213 + v211 * 2 * (v205 & 0xFFFFFFFFFFFFFFLL);
  v224 = ((v206 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v213
        + v211 * (unsigned __int128)(2 * ((unint64_t)v205 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v227 = v211 * v212 + (v209 & 0xFFFFFFFFFFFFFFLL) * (v209 & 0xFFFFFFFFFFFFFFLL);
  v226 = (v211 * (unsigned __int128)(unint64_t)v212
        + (v209 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v209 & 0xFFFFFFFFFFFFFFLL)) >> 64;
  v228 = v211 * v213;
  v229 = (v211 * (unsigned __int128)(unint64_t)v213) >> 64;
  v230 = v211 * v211;
  v231 = (v211 * (unsigned __int128)v211) >> 64;
  *((_QWORD *)&v210 + 1) = v231;
  *(_QWORD *)&v210 = v230;
  v232 = __PAIR128__(v226, v227) + ((unsigned __int128)v210 >> 16);
  v233 = (unint64_t)(unsigned __int16)v230 << 40;
  if (__CFADD__(v225, v233))
    ++v224;
  *((_QWORD *)&v234 + 1) = v229;
  *(_QWORD *)&v234 = v228;
  v235 = __PAIR128__(v224, v225 + v233) + (v234 >> 16);
  v236 = (__PAIR128__(v217, v218) - __PAIR128__(v229, v228)) >> 64;
  v237 = (unint64_t)(unsigned __int16)v232 << 40;
  v20 = __CFADD__(v218 - v228, v237);
  v238 = v218 - v228 + v237;
  if (v20)
    ++v236;
  v239 = __PAIR128__(v222, v223)
       - __PAIR128__(v231, v230)
       + __PAIR128__(v219, v220)
       + (v232 >> 16)
       + __PAIR128__(0x7FFFFFFFFFFFFF80, (v228 << 40) & 0xFFFE0000000000);
  v240 = (v235 + (v239 >> 56)) >> 64;
  v241 = ((__int128)(v235 + (v239 >> 56)) >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v238, v241);
  v242 = v238 + v241;
  if (v20)
    ++v236;
  v243 = HIBYTE(v240);
  v244 = (v239 & 0xFFFFFFFFFFFFFFLL) + (v240 >> 8);
  v245 = __PAIR128__(v215, v216)
       - (v232
        + __PAIR128__(v243, (__int128)(v235 + (v239 >> 56)) >> 56))
       + __PAIR128__(0x8000000000000000, 0x8000);
  v246 = __PAIR128__(HIBYTE(*((_QWORD *)&v245 + 1)) + (unint64_t)__CFADD__(v242, (unint64_t)(v245 >> 56)) + v236, v242 + (unint64_t)(v245 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v247 = (__int128)(__PAIR128__(HIBYTE(*((_QWORD *)&v245 + 1))+ (unint64_t)__CFADD__(v242, (unint64_t)(v245 >> 56))+ v236, v242 + (unint64_t)(v245 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 56;
  v20 = __CFADD__(v244, v247);
  v248 = v244 + v247;
  if (v20)
    v249 = ((unint64_t)((__PAIR128__(HIBYTE(*((_QWORD *)&v245 + 1))+ (unint64_t)__CFADD__(v242, (unint64_t)(v245 >> 56))+ v236, v242 + (unint64_t)(v245 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56)+ 1;
  else
    v249 = (unint64_t)((__PAIR128__(HIBYTE(*((_QWORD *)&v245 + 1))+ (unint64_t)__CFADD__(v242, (unint64_t)(v245 >> 56))+ v236, v242 + (unint64_t)(v245 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
  *((_QWORD *)&v250 + 1) = v249;
  *(_QWORD *)&v250 = v248;
  v251 = (v250 >> 56) + ((v235 + (v239 >> 56)) & 0xFFFFFFFFFFFFFFLL);
  v252 = 2 * ((v242 + (v245 >> 56) - 0x80000000000000) & 0xFFFFFFFFFFFFFFLL);
  v253 = 2 * (v248 & 0xFFFFFFFFFFFFFFLL);
  v254 = v245 & 0xFFFFFFFFFFFFFFLL;
  v255 = ((unint64_t)v254 * (unsigned __int128)(unint64_t)v254) >> 64;
  v256 = v254 * v254;
  v257 = ((v245 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)v252) >> 64;
  v258 = (v245 & 0xFFFFFFFFFFFFFFLL) * v252;
  v259 = ((v245 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v253) >> 64;
  v260 = (v245 & 0xFFFFFFFFFFFFFFLL) * v253;
  v261 = v246 & 0xFFFFFFFFFFFFFFLL;
  v262 = ((unint64_t)v261 * (unsigned __int128)(unint64_t)v261) >> 64;
  v263 = v261 * v261;
  v265 = ((v246 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v253
        + v251 * (unsigned __int128)(2 * ((unint64_t)v245 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v264 = (v246 & 0xFFFFFFFFFFFFFFLL) * v253 + v251 * 2 * (v245 & 0xFFFFFFFFFFFFFFLL);
  v267 = v251 * v252 + (v248 & 0xFFFFFFFFFFFFFFLL) * (v248 & 0xFFFFFFFFFFFFFFLL);
  v266 = (v251 * (unsigned __int128)v252 + (v248 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v248 & 0xFFFFFFFFFFFFFFLL)) >> 64;
  v268 = v251 * v253;
  v269 = (v251 * (unsigned __int128)(unint64_t)v253) >> 64;
  v270 = v251 * v251;
  v271 = (v251 * (unsigned __int128)v251) >> 64;
  *((_QWORD *)&v250 + 1) = v271;
  *(_QWORD *)&v250 = v270;
  v272 = __PAIR128__(v266, v267) + ((unsigned __int128)v250 >> 16);
  v273 = (unint64_t)(unsigned __int16)v270 << 40;
  v20 = __CFADD__(v264, v273);
  v274 = v264 + v273;
  if (v20)
    ++v265;
  *((_QWORD *)&v275 + 1) = v269;
  *(_QWORD *)&v275 = v268;
  v276 = __PAIR128__(v265, v274) + (v275 >> 16);
  v277 = (__PAIR128__(v257, v258) - __PAIR128__(v269, v268)) >> 64;
  v278 = (unint64_t)(unsigned __int16)v272 << 40;
  v20 = __CFADD__(v258 - v268, v278);
  v279 = v258 - v268 + v278;
  if (v20)
    ++v277;
  v280 = __PAIR128__(v262, v263)
       - __PAIR128__(v271, v270)
       + __PAIR128__(v259, v260)
       + (v272 >> 16)
       + __PAIR128__(0x7FFFFFFFFFFFFF80, (v268 << 40) & 0xFFFE0000000000);
  v281 = v276 + (v280 >> 56);
  v282 = (v281 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v279, v282);
  v283 = v279 + v282;
  if (v20)
    ++v277;
  v284 = (v280 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v281 + 1) >> 8);
  v285 = __PAIR128__(v255, v256)
       - (v272
        + ((unsigned __int128)v281 >> 56))
       + __PAIR128__(0x8000000000000000, 0x8000);
  v286 = __PAIR128__(HIBYTE(*((_QWORD *)&v285 + 1)) + (unint64_t)__CFADD__(v283, (unint64_t)(v285 >> 56)) + v277, v283 + (unint64_t)(v285 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v287 = (__int128)(__PAIR128__(HIBYTE(*((_QWORD *)&v285 + 1))+ (unint64_t)__CFADD__(v283, (unint64_t)(v285 >> 56))+ v277, v283 + (unint64_t)(v285 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 56;
  v20 = __CFADD__(v284, v287);
  v288 = v284 + v287;
  if (v20)
    v289 = ((unint64_t)((__PAIR128__(HIBYTE(*((_QWORD *)&v285 + 1))+ (unint64_t)__CFADD__(v283, (unint64_t)(v285 >> 56))+ v277, v283 + (unint64_t)(v285 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56)+ 1;
  else
    v289 = (unint64_t)((__PAIR128__(HIBYTE(*((_QWORD *)&v285 + 1))+ (unint64_t)__CFADD__(v283, (unint64_t)(v285 >> 56))+ v277, v283 + (unint64_t)(v285 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
  *((_QWORD *)&v290 + 1) = v289;
  *(_QWORD *)&v290 = v288;
  v291 = (v290 >> 56) + (v281 & 0xFFFFFFFFFFFFFFLL);
  v292 = ((v285 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v179) >> 64;
  v293 = ((v285 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v184) >> 64;
  v294 = (v285 & 0xFFFFFFFFFFFFFFLL) * v184;
  v295 = (((v283 + (unint64_t)(v285 >> 56) - 0x80000000000000) & 0xFFFFFFFFFFFFFFLL)
        * (unsigned __int128)(unint64_t)v179) >> 64;
  v296 = (v286 & 0xFFFFFFFFFFFFFFLL) * v179;
  v297 = ((v286 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v184) >> 64;
  v298 = (v286 & 0xFFFFFFFFFFFFFFLL) * v184;
  v299 = v288 & 0xFFFFFFFFFFFFFFLL;
  v300 = ((unint64_t)v299 * (unsigned __int128)(unint64_t)v179) >> 64;
  v301 = (unint64_t)v299 * (unsigned __int128)(unint64_t)v187
       + (v286 & 0xFFFFFFFFFFFFFFLL) * v176
       + v291 * (unsigned __int128)(unint64_t)v184;
  v302 = v291 * (unsigned __int128)(unint64_t)v187 + (unint64_t)v299 * (unsigned __int128)v176;
  v303 = ((unint64_t)v299 * (unsigned __int128)(unint64_t)v184) >> 64;
  v304 = v299 * v184;
  v305 = v299 * v179;
  v306 = (v285 & 0xFFFFFFFFFFFFFFLL) * v179;
  v307 = (v291 * (unsigned __int128)(unint64_t)v179) >> 64;
  v308 = v291 * v179;
  v309 = v291 * v176;
  v310 = (v291 * (unsigned __int128)v176) >> 64;
  *((_QWORD *)&v290 + 1) = v310;
  *(_QWORD *)&v290 = v309;
  v311 = v301 + ((unsigned __int128)v290 >> 16);
  v313 = (v285 & 0xFFFFFFFFFFFFFFLL) * v187 + v298 + v305 - v309;
  v312 = ((v285 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v187
        + __PAIR128__(v297, v298)
        + __PAIR128__(v300, v305)
        - __PAIR128__(v310, v309)) >> 64;
  v314 = (unint64_t)(unsigned __int16)v302 << 40;
  if (__CFADD__(v313, v314))
    ++v312;
  v315 = __PAIR128__(v312, v313 + v314) + (v311 >> 16);
  v317 = (v286 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v187
       + (v285 & 0xFFFFFFFFFFFFFFLL) * v176
       + __PAIR128__(v303, v304)
       + __PAIR128__(v307, v308);
  v316 = *((_QWORD *)&v317 + 1);
  v318 = (unint64_t)(unsigned __int16)v309 << 40;
  v319 = v317 + v318;
  if (__CFADD__((_QWORD)v317, v318))
    v316 = *((_QWORD *)&v317 + 1) + 1;
  *((_QWORD *)&v320 + 1) = *((_QWORD *)&v315 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v320 = v313 + v314 + (v311 >> 16);
  v321 = (unint64_t)(unsigned __int16)v311 << 40;
  v322 = __PAIR128__(v316, v319) + (v302 >> 16) + (v320 >> 56);
  v323 = (v315 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v322 + 1) >> 8);
  v324 = (v322 >> 16) & 0xFFFF0000000000;
  v325 = v306 - (v311 + (v322 >> 56)) + 0x8000;
  v326 = (__int128)(__PAIR128__(v292, v306)
                  - __PAIR128__((v311 + ((unsigned __int128)v322 >> 56)) >> 64, (unint64_t)v311 + (unint64_t)(v322 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56;
  v327 = (unint64_t)((__PAIR128__(v292, v306)
                           - __PAIR128__((v311 + ((unsigned __int128)v322 >> 56)) >> 64, (unint64_t)v311 + (unint64_t)(v322 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56;
  v328 = (__PAIR128__(v293, v294) + __PAIR128__(v295, v296) - v302) >> 64;
  v329 = v294 + v296 - v302;
  v20 = __CFADD__(v329, v321);
  v330 = v329 + v321;
  if (v20)
    ++v328;
  v20 = __CFADD__(v330, v324);
  v331 = v330 + v324;
  if (v20)
    v332 = v328 + 1;
  else
    v332 = v328;
  v333 = __PAIR128__(v327 + __CFADD__(v331, v326) + v332, v331 + v326)
       + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v334 = (unint64_t)((__PAIR128__(v327 + __CFADD__(v331, v326) + v332, v331 + v326)
                           + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
  v335 = v333 >> 56;
  v20 = __CFADD__(v323, v335);
  v336 = v323 + v335;
  if (v20)
    v337 = v334 + 1;
  else
    v337 = v334;
  *((_QWORD *)&v338 + 1) = v337;
  *(_QWORD *)&v338 = v336;
  v339 = (v338 >> 56) + (v322 & 0xFFFFFFFFFFFFFFLL);
  v340 = 2 * (v333 & 0xFFFFFFFFFFFFFFLL);
  v341 = 2 * (v336 & 0xFFFFFFFFFFFFFFLL);
  v342 = v325 & 0xFFFFFFFFFFFFFFLL;
  v343 = v333 & 0xFFFFFFFFFFFFFFLL;
  v345 = (v333 & 0xFFFFFFFFFFFFFFLL) * v341 + v339 * 2 * (v325 & 0xFFFFFFFFFFFFFFLL);
  v344 = ((v333 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v341
        + v339 * (unsigned __int128)(2 * (v325 & 0xFFFFFFFFFFFFFFuLL))) >> 64;
  v1489 = v336 & 0xFFFFFFFFFFFFFFLL;
  v347 = (v339 * (unsigned __int128)(unint64_t)v340
        + (unint64_t)v1489 * (unsigned __int128)(unint64_t)v1489
        + ((v339 * (unsigned __int128)v339) >> 16)) >> 64;
  v346 = v339 * v340 + v1489 * v1489 + ((v339 * (unsigned __int128)v339) >> 16);
  v348 = (unint64_t)(unsigned __int16)(((v338 >> 56) + v322) * ((v338 >> 56) + v322)) << 40;
  v349 = v345 + v348;
  if (__CFADD__(v345, v348))
    ++v344;
  v350 = ((unint64_t)v342 * (unsigned __int128)(unint64_t)v340
        - v339 * (unsigned __int128)(unint64_t)v341) >> 64;
  v351 = v342 * v340 - v339 * v341;
  v352 = (unint64_t)(unsigned __int16)v346 << 40;
  v20 = __CFADD__(v351, v352);
  v353 = v351 + v352;
  if (v20)
    ++v350;
  *((_QWORD *)&v354 + 1) = v347;
  *(_QWORD *)&v354 = v346;
  v355 = (unint64_t)v343 * (unsigned __int128)(unint64_t)v343
       - v339 * (unsigned __int128)v339
       + (unint64_t)v342 * (unsigned __int128)(unint64_t)v341
       + (v354 >> 16)
       + __PAIR128__(0x7FFFFFFFFFFFFF80, ((v339 * v341) << 40) & 0xFFFE0000000000);
  v356 = __PAIR128__(v344, v349) + ((v339 * (unsigned __int128)(unint64_t)v341) >> 16) + (v355 >> 56);
  v357 = (v356 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v353, v357);
  v358 = v353 + v357;
  if (v20)
    v359 = v350 + 1;
  else
    v359 = v350;
  v360 = v356;
  v361 = (v355 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v356 + 1) >> 8);
  v362 = v342 * v342 - (v346 + (v356 >> 56)) + 0x8000;
  v363 = (__PAIR128__(((unint64_t)(((unint64_t)v342 * (unsigned __int128)(unint64_t)v342- __PAIR128__(HIBYTE(*((_QWORD *)&v356 + 1))+ (unint64_t)__CFADD__(v346, (unint64_t)(v360 >> 56))+ v347, v346 + (unint64_t)(v360 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v358, (unint64_t)((__int128)((unint64_t)v342 * (unsigned __int128)(unint64_t)v342- __PAIR128__(HIBYTE(*((_QWORD *)&v356 + 1))+ (unint64_t)__CFADD__(v346, (unint64_t)(v360 >> 56))+ v347, v346 + (unint64_t)(v360 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v359, v358+ (unint64_t)((__int128)((unint64_t)v342 * (unsigned __int128)(unint64_t)v342
                                        - __PAIR128__(HIBYTE(*((_QWORD *)&v356 + 1))+ (unint64_t)__CFADD__(v346, (unint64_t)(v360 >> 56))+ v347, v346 + (unint64_t)(v360 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
  v364 = v358
       + ((__int128)((unint64_t)v342 * (unsigned __int128)(unint64_t)v342
                   - __PAIR128__(HIBYTE(*((_QWORD *)&v356 + 1))+ (unint64_t)__CFADD__(v346, (unint64_t)(v360 >> 56))+ v347, v346 + (unint64_t)(v360 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56)- 0x80000000000000;
  v365 = (__int128)(__PAIR128__(((unint64_t)(((unint64_t)v342 * (unsigned __int128)(unint64_t)v342- __PAIR128__(HIBYTE(*((_QWORD *)&v356 + 1))+ (unint64_t)__CFADD__(v346, (unint64_t)(v360 >> 56))+ v347, v346 + (unint64_t)(v360 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v358, (unint64_t)((__int128)((unint64_t)v342 * (unsigned __int128)(unint64_t)v342- __PAIR128__(HIBYTE(*((_QWORD *)&v356 + 1))+ (unint64_t)__CFADD__(v346, (unint64_t)(v360 >> 56))+ v347, v346 + (unint64_t)(v360 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v359,
                      v358
                    + (unint64_t)((__int128)((unint64_t)v342 * (unsigned __int128)(unint64_t)v342
                                                  - __PAIR128__(HIBYTE(*((_QWORD *)&v356 + 1))+ (unint64_t)__CFADD__(v346, (unint64_t)(v360 >> 56))+ v347, v346 + (unint64_t)(v360 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 56;
  v366 = v361 + v365;
  v367 = HIBYTE(v363);
  if (__CFADD__(v361, v365))
    ++v367;
  *((_QWORD *)&v368 + 1) = v367;
  *(_QWORD *)&v368 = v361 + v365;
  v369 = (v368 >> 56) + (v356 & 0xFFFFFFFFFFFFFFLL);
  v370 = 5;
  do
  {
    v371 = v362 & 0xFFFFFFFFFFFFFFLL;
    v372 = 2 * (v362 & 0xFFFFFFFFFFFFFFLL);
    v373 = 2 * (v364 & 0xFFFFFFFFFFFFFFLL);
    v374 = 2 * (v366 & 0xFFFFFFFFFFFFFFLL);
    v375 = ((unint64_t)v371 * (unsigned __int128)(unint64_t)v371) >> 64;
    v376 = v371 * v371;
    v377 = ((unint64_t)v373 * (unsigned __int128)(unint64_t)v371) >> 64;
    v378 = v373 * v371;
    v379 = ((unint64_t)v374 * (unsigned __int128)(unint64_t)v371) >> 64;
    v380 = v374 * v371;
    v381 = (unint64_t)v374 * (unsigned __int128)(v364 & 0xFFFFFFFFFFFFFFLL)
         + v369 * (unsigned __int128)(unint64_t)v372;
    v382 = v369 * (unsigned __int128)(unint64_t)v373
         + (v366 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v366 & 0xFFFFFFFFFFFFFFLL);
    v383 = v374 * v369;
    v384 = ((unint64_t)v374 * (unsigned __int128)v369) >> 64;
    v385 = v369 * v369;
    v386 = (v369 * (unsigned __int128)v369) >> 64;
    *((_QWORD *)&v387 + 1) = v386;
    *(_QWORD *)&v387 = v385;
    v388 = v382 + ((unsigned __int128)v387 >> 16);
    v389 = (unint64_t)(unsigned __int16)v385 << 40;
    *((_QWORD *)&v387 + 1) = v384;
    *(_QWORD *)&v387 = v383;
    v390 = v387 >> 16;
    v391 = v384 >> 16;
    v392 = (v383 << 40) & 0xFFFE0000000000;
    v393 = (__PAIR128__(v377, v378) - __PAIR128__(v384, v383)) >> 64;
    v394 = (unint64_t)(unsigned __int16)v388 << 40;
    v20 = __CFADD__(v378 - v383, v394);
    v395 = v378 - v383 + v394;
    if (v20)
      ++v393;
    v396 = v388 >> 16;
    v398 = (v364 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v364 & 0xFFFFFFFFFFFFFFLL)
         - __PAIR128__(v386, v385)
         + __PAIR128__(v379, v380);
    v397 = *((_QWORD *)&v398 + 1);
    v399 = v398 + v392;
    if (__CFADD__((_QWORD)v398, v392))
      v397 = *((_QWORD *)&v398 + 1) + 1;
    v20 = __CFADD__(v399, v396);
    v400 = v399 + v396;
    v401 = (*((_QWORD *)&v388 + 1) >> 16) + v20 + v397 + 0x7FFFFFFFFFFFFF80;
    v402 = HIBYTE(v401);
    *((_QWORD *)&v404 + 1) = v401;
    *(_QWORD *)&v404 = v400;
    v403 = v404 >> 56;
    v405 = (v381 + __PAIR128__(v391, v390)) >> 64;
    v406 = v381 + v390 + v389;
    if (__CFADD__(v381 + v390, v389))
      ++v405;
    v407 = __PAIR128__(v405, v406) + __PAIR128__(v402, v403);
    v408 = ((__int128)(__PAIR128__(v405, v406) + __PAIR128__(v402, v403)) >> 16) & 0xFFFF0000000000;
    v20 = __CFADD__(v395, v408);
    v409 = v395 + v408;
    if (v20)
      ++v393;
    v410 = (v400 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v407 + 1) >> 8);
    v411 = (__PAIR128__(v375, v376) - (v388 + (v407 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000)) >> 64;
    v362 = v376 - (v388 + (v407 >> 56)) + 0x8000;
    v413 = __PAIR128__(HIBYTE(v411) + __CFADD__(v409, (unint64_t)((__int128)__PAIR128__(v411, v362) >> 56)) + v393, v409 + (unint64_t)((__int128)__PAIR128__(v411, v362) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
    v412 = (__PAIR128__(HIBYTE(v411) + __CFADD__(v409, (unint64_t)((__int128)__PAIR128__(v411, v362) >> 56)) + v393, v409 + (unint64_t)((__int128)__PAIR128__(v411, v362) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
    v364 = v413;
    v414 = HIBYTE(v412);
    v415 = (__int128)__PAIR128__(v412, v413) >> 56;
    v366 = v410 + v415;
    if (__CFADD__(v410, v415))
      v416 = v414 + 1;
    else
      v416 = v414;
    *((_QWORD *)&v417 + 1) = v416;
    *(_QWORD *)&v417 = v366;
    v369 = (v417 >> 56) + (v407 & 0xFFFFFFFFFFFFFFLL);
    --v370;
  }
  while (v370);
  v418 = v413 & 0xFFFFFFFFFFFFFFLL;
  v419 = v366 & 0xFFFFFFFFFFFFFFLL;
  v420 = v369 * (unsigned __int128)(unint64_t)v1489 + (v366 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)v339;
  v422 = ((v366 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1489
        + (v413 & 0xFFFFFFFFFFFFFFLL) * v339
        + v369 * (unsigned __int128)(unint64_t)v343
        + ((v369 * (unsigned __int128)v339) >> 16)) >> 64;
  v421 = (v366 & 0xFFFFFFFFFFFFFFLL) * v1489
       + (v413 & 0xFFFFFFFFFFFFFFLL) * v339
       + v369 * v343
       + ((v369 * (unsigned __int128)v339) >> 16);
  v1476 = v325 & 0xFFFFFFFFFFFFFFLL;
  v1478 = v339;
  v423 = (v362 & 0xFFFFFFFFFFFFFFLL) * v339;
  v425 = (v362 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1489
       + (v413 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v343
       + (v366 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v342
       - v369 * (unsigned __int128)v339;
  v424 = *((_QWORD *)&v425 + 1);
  v426 = (unint64_t)(unsigned __int16)(v369 * v1489 + v366 * v339) << 40;
  if (__CFADD__((_QWORD)v425, v426))
    v424 = *((_QWORD *)&v425 + 1) + 1;
  v427 = __PAIR128__(v424, (unint64_t)v425 + v426) + (__PAIR128__(v422, v421) >> 16);
  v428 = ((unint64_t)v418 * (unsigned __int128)(unint64_t)v1489) >> 64;
  v429 = v418 * v1489;
  v430 = ((unint64_t)v419 * (unsigned __int128)(unint64_t)v343) >> 64;
  v1475 = v333 & 0xFFFFFFFFFFFFFFLL;
  v431 = v419 * v343;
  v432 = (unint64_t)(unsigned __int16)(v369 * v339) << 40;
  v20 = __CFADD__(v429 + v423, v431);
  v433 = v429 + v423 + v431;
  v435 = v433 + v369 * v342;
  v434 = (__PAIR128__(v430 + v20 + ((__PAIR128__(v428, v429) + (v362 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)v339) >> 64), v433)+ v369 * (unsigned __int128)(unint64_t)v342) >> 64;
  v436 = (unint64_t)(unsigned __int16)(v366 * v1489
                                            + v413 * v339
                                            + v369 * v333
                                            + ((v369 * v339) >> 16)) << 40;
  *((_QWORD *)&v438 + 1) = *((_QWORD *)&v427 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v438 = v425 + v426 + (__PAIR128__(v422, v421) >> 16);
  v437 = v438 >> 56;
  if (__CFADD__(v435, v432))
    ++v434;
  v439 = __PAIR128__(v434, v435 + v432)
       + (v420 >> 16)
       + __PAIR128__((unint64_t)(*((_QWORD *)&v427 + 1) + 0x7FFFFFFFFFFFFF80) >> 56, v437);
  v440 = (v427 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v439 + 1) >> 8);
  v441 = (v439 >> 16) & 0xFFFF0000000000;
  v442 = (v362 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v342
       - __PAIR128__(HIBYTE(*((_QWORD *)&v439 + 1)) + __CFADD__(v421, (unint64_t)(v439 >> 56)) + v422, v421 + (unint64_t)(v439 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000);
  v444 = (v362 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v343
       + (v413 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v342
       - v420;
  v443 = *((_QWORD *)&v444 + 1);
  v445 = v444 + v436;
  if (__CFADD__((_QWORD)v444, v436))
    v443 = *((_QWORD *)&v444 + 1) + 1;
  v20 = __CFADD__(v445, v441);
  v446 = v445 + v441;
  if (v20)
    ++v443;
  v447 = __PAIR128__(v443, v446) + (v442 >> 56) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v448 = v447 >> 56;
  v20 = __CFADD__(v440, v448);
  v449 = v440 + v448;
  if (v20)
    v450 = HIBYTE(*((_QWORD *)&v447 + 1)) + 1;
  else
    v450 = HIBYTE(*((_QWORD *)&v447 + 1));
  *((_QWORD *)&v451 + 1) = v450;
  *(_QWORD *)&v451 = v449;
  v452 = (v451 >> 56) + (v439 & 0xFFFFFFFFFFFFFFLL);
  v453 = 2 * (v447 & 0xFFFFFFFFFFFFFFLL);
  v454 = 2 * (v449 & 0xFFFFFFFFFFFFFFLL);
  v455 = v442 & 0xFFFFFFFFFFFFFFLL;
  v456 = v447 & 0xFFFFFFFFFFFFFFLL;
  v457 = ((v447 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v454
        + v452 * (unsigned __int128)(2 * ((unint64_t)v442 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v458 = (v447 & 0xFFFFFFFFFFFFFFLL) * v454 + v452 * 2 * (v442 & 0xFFFFFFFFFFFFFFLL);
  v459 = v449 & 0xFFFFFFFFFFFFFFLL;
  v461 = (v452 * (unsigned __int128)(unint64_t)v453
        + (unint64_t)v459 * (unsigned __int128)(unint64_t)v459
        + ((v452 * (unsigned __int128)v452) >> 16)) >> 64;
  v460 = v452 * v453 + v459 * v459 + ((v452 * (unsigned __int128)v452) >> 16);
  v462 = (unint64_t)(unsigned __int16)(((v451 >> 56) + v439) * ((v451 >> 56) + v439)) << 40;
  v20 = __CFADD__(v458, v462);
  v463 = v458 + v462;
  if (v20)
    ++v457;
  v465 = ((unint64_t)v455 * (unsigned __int128)(unint64_t)v453
        - v452 * (unsigned __int128)(unint64_t)v454) >> 64;
  v464 = v455 * v453 - v452 * v454;
  v466 = (unint64_t)(unsigned __int16)v460 << 40;
  v20 = __CFADD__(v464, v466);
  v467 = v464 + v466;
  if (v20)
    ++v465;
  *((_QWORD *)&v468 + 1) = v461;
  *(_QWORD *)&v468 = v460;
  v469 = (unint64_t)v456 * (unsigned __int128)(unint64_t)v456
       - v452 * (unsigned __int128)v452
       + (unint64_t)v455 * (unsigned __int128)(unint64_t)v454
       + (v468 >> 16)
       + __PAIR128__(0x7FFFFFFFFFFFFF80, ((v452 * v454) << 40) & 0xFFFE0000000000);
  v470 = __PAIR128__(v457, v463) + ((v452 * (unsigned __int128)(unint64_t)v454) >> 16) + (v469 >> 56);
  v471 = (v470 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v467, v471);
  v472 = v467 + v471;
  if (v20)
    v473 = v465 + 1;
  else
    v473 = v465;
  v474 = v470;
  v475 = (v469 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v470 + 1) >> 8);
  v476 = v455 * v455 - (v460 + (v470 >> 56)) + 0x8000;
  v477 = (__PAIR128__(((unint64_t)(((unint64_t)v455 * (unsigned __int128)(unint64_t)v455- __PAIR128__(HIBYTE(*((_QWORD *)&v470 + 1))+ (unint64_t)__CFADD__(v460, (unint64_t)(v474 >> 56))+ v461, v460 + (unint64_t)(v474 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v472, (unint64_t)((__int128)((unint64_t)v455 * (unsigned __int128)(unint64_t)v455- __PAIR128__(HIBYTE(*((_QWORD *)&v470 + 1))+ (unint64_t)__CFADD__(v460, (unint64_t)(v474 >> 56))+ v461, v460 + (unint64_t)(v474 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v473, v472+ (unint64_t)((__int128)((unint64_t)v455 * (unsigned __int128)(unint64_t)v455
                                        - __PAIR128__(HIBYTE(*((_QWORD *)&v470 + 1))+ (unint64_t)__CFADD__(v460, (unint64_t)(v474 >> 56))+ v461, v460 + (unint64_t)(v474 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
  v478 = v472
       + ((__int128)((unint64_t)v455 * (unsigned __int128)(unint64_t)v455
                   - __PAIR128__(HIBYTE(*((_QWORD *)&v470 + 1))+ (unint64_t)__CFADD__(v460, (unint64_t)(v474 >> 56))+ v461, v460 + (unint64_t)(v474 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56)- 0x80000000000000;
  v479 = (__int128)(__PAIR128__(((unint64_t)(((unint64_t)v455 * (unsigned __int128)(unint64_t)v455- __PAIR128__(HIBYTE(*((_QWORD *)&v470 + 1))+ (unint64_t)__CFADD__(v460, (unint64_t)(v474 >> 56))+ v461, v460 + (unint64_t)(v474 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v472, (unint64_t)((__int128)((unint64_t)v455 * (unsigned __int128)(unint64_t)v455- __PAIR128__(HIBYTE(*((_QWORD *)&v470 + 1))+ (unint64_t)__CFADD__(v460, (unint64_t)(v474 >> 56))+ v461, v460 + (unint64_t)(v474 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v473,
                      v472
                    + (unint64_t)((__int128)((unint64_t)v455 * (unsigned __int128)(unint64_t)v455
                                                  - __PAIR128__(HIBYTE(*((_QWORD *)&v470 + 1))+ (unint64_t)__CFADD__(v460, (unint64_t)(v474 >> 56))+ v461, v460 + (unint64_t)(v474 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 56;
  v480 = v475 + v479;
  v481 = HIBYTE(v477);
  if (__CFADD__(v475, v479))
    ++v481;
  *((_QWORD *)&v482 + 1) = v481;
  *(_QWORD *)&v482 = v475 + v479;
  v483 = (v482 >> 56) + (v470 & 0xFFFFFFFFFFFFFFLL);
  v484 = 11;
  do
  {
    v485 = v478 & 0xFFFFFFFFFFFFFFLL;
    v486 = v476 & 0xFFFFFFFFFFFFFFLL;
    v487 = 2 * (v476 & 0xFFFFFFFFFFFFFFLL);
    v488 = 2 * (v478 & 0xFFFFFFFFFFFFFFLL);
    v489 = 2 * (v480 & 0xFFFFFFFFFFFFFFLL);
    v490 = ((unint64_t)v486 * (unsigned __int128)(unint64_t)v486) >> 64;
    v491 = v486 * v486;
    v492 = ((unint64_t)v488 * (unsigned __int128)(unint64_t)v486) >> 64;
    v493 = v488 * v486;
    v494 = ((unint64_t)v489 * (unsigned __int128)(unint64_t)v486) >> 64;
    v495 = v489 * v486;
    v496 = (unint64_t)v489 * (unsigned __int128)(unint64_t)v485
         + v483 * (unsigned __int128)(unint64_t)v487;
    v497 = v483 * (unsigned __int128)(unint64_t)v488
         + (v480 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v480 & 0xFFFFFFFFFFFFFFLL);
    v498 = v489 * v483;
    v499 = ((unint64_t)v489 * (unsigned __int128)v483) >> 64;
    v500 = v483 * v483;
    v501 = (v483 * (unsigned __int128)v483) >> 64;
    *((_QWORD *)&v502 + 1) = v501;
    *(_QWORD *)&v502 = v500;
    v503 = v497 + ((unsigned __int128)v502 >> 16);
    v504 = (unint64_t)(unsigned __int16)v500 << 40;
    *((_QWORD *)&v502 + 1) = v499;
    *(_QWORD *)&v502 = v498;
    v505 = v502 >> 16;
    v506 = v499 >> 16;
    v507 = (v498 << 40) & 0xFFFE0000000000;
    v508 = (__PAIR128__(v492, v493) - __PAIR128__(v499, v498)) >> 64;
    v509 = (unint64_t)(unsigned __int16)v503 << 40;
    v20 = __CFADD__(v493 - v498, v509);
    v510 = v493 - v498 + v509;
    if (v20)
      ++v508;
    v511 = v503 >> 16;
    v512 = (unint64_t)v485 * (unsigned __int128)(unint64_t)v485
         - __PAIR128__(v501, v500)
         + __PAIR128__(v494, v495);
    v513 = v512 + v507;
    if (__CFADD__((_QWORD)v512, v507))
      v514 = *((_QWORD *)&v512 + 1) + 1;
    else
      v514 = *((_QWORD *)&v512 + 1);
    v515 = ((__PAIR128__(v514, v513) + ((unsigned __int128)v503 >> 16)) >> 64) + 0x7FFFFFFFFFFFFF80;
    v516 = HIBYTE(v515);
    *((_QWORD *)&v518 + 1) = v515;
    *(_QWORD *)&v518 = v513 + v511;
    v517 = v518 >> 56;
    v519 = (v496 + __PAIR128__(v506, v505)) >> 64;
    v520 = v496 + v505 + v504;
    if (__CFADD__(v496 + v505, v504))
      ++v519;
    v521 = __PAIR128__(v519, v520) + __PAIR128__(v516, v517);
    v522 = ((__int128)(__PAIR128__(v519, v520) + __PAIR128__(v516, v517)) >> 16) & 0xFFFF0000000000;
    v20 = __CFADD__(v510, v522);
    v523 = v510 + v522;
    if (v20)
      ++v508;
    v524 = ((v513 + v511) & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v521 + 1) >> 8);
    v525 = (__PAIR128__(v490, v491) - (v503 + (v521 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000)) >> 64;
    v476 = v491 - (v503 + (v521 >> 56)) + 0x8000;
    v527 = __PAIR128__(HIBYTE(v525) + __CFADD__(v523, (unint64_t)((__int128)__PAIR128__(v525, v476) >> 56)) + v508, v523 + (unint64_t)((__int128)__PAIR128__(v525, v476) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
    v526 = (__PAIR128__(HIBYTE(v525) + __CFADD__(v523, (unint64_t)((__int128)__PAIR128__(v525, v476) >> 56)) + v508, v523 + (unint64_t)((__int128)__PAIR128__(v525, v476) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
    v478 = v527;
    v528 = HIBYTE(v526);
    v529 = (__int128)__PAIR128__(v526, v527) >> 56;
    v480 = v524 + v529;
    if (__CFADD__(v524, v529))
      v530 = v528 + 1;
    else
      v530 = v528;
    *((_QWORD *)&v531 + 1) = v530;
    *(_QWORD *)&v531 = v480;
    v483 = (v531 >> 56) + (v521 & 0xFFFFFFFFFFFFFFLL);
    --v484;
  }
  while (v484);
  v532 = v476 & 0xFFFFFFFFFFFFFFLL;
  v533 = ((v476 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v455) >> 64;
  v534 = (v476 & 0xFFFFFFFFFFFFFFLL) * v455;
  v535 = ((unint64_t)v532 * (unsigned __int128)(unint64_t)v456) >> 64;
  v536 = v532 * v456;
  v537 = ((v527 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v455) >> 64;
  v538 = (v527 & 0xFFFFFFFFFFFFFFLL) * v455;
  v539 = ((unint64_t)v532 * (unsigned __int128)(unint64_t)v459) >> 64;
  v540 = v532 * v459;
  v541 = ((v527 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v456) >> 64;
  v542 = (v527 & 0xFFFFFFFFFFFFFFLL) * v456;
  v543 = v480 & 0xFFFFFFFFFFFFFFLL;
  v544 = ((v480 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v455) >> 64;
  v545 = (v480 & 0xFFFFFFFFFFFFFFLL) * v455;
  v546 = ((unint64_t)v532 * (unsigned __int128)v452) >> 64;
  v547 = v532 * v452;
  v548 = ((v527 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v459) >> 64;
  v549 = (v527 & 0xFFFFFFFFFFFFFFLL) * v459;
  v550 = ((unint64_t)v543 * (unsigned __int128)(unint64_t)v456) >> 64;
  v551 = v543 * v456;
  v552 = (v483 * (unsigned __int128)(unint64_t)v455) >> 64;
  v553 = v483 * v455;
  v554 = (unint64_t)v543 * (unsigned __int128)(unint64_t)v459
       + (v527 & 0xFFFFFFFFFFFFFFLL) * v452
       + v483 * (unsigned __int128)(unint64_t)v456;
  v555 = ((unint64_t)v543 * (unsigned __int128)v452) >> 64;
  v556 = v543 * v452;
  v557 = (v483 * (unsigned __int128)(unint64_t)v459) >> 64;
  v558 = v483 * v459;
  v20 = __CFADD__(v558, v556);
  v559 = v558 + v556;
  v560 = v483 * v452;
  v561 = (v483 * (unsigned __int128)v452) >> 64;
  *((_QWORD *)&v562 + 1) = v561;
  *(_QWORD *)&v562 = v560;
  v563 = v555 + v20 + v557;
  v564 = v554 + (v562 >> 16);
  v566 = v540 + v542 + v545 - v560;
  v565 = (__PAIR128__(v539, v540) + __PAIR128__(v541, v542) + __PAIR128__(v544, v545) - __PAIR128__(v561, v560)) >> 64;
  v567 = (unint64_t)(unsigned __int16)v559 << 40;
  v568 = v566 + v567;
  if (__CFADD__(v566, v567))
    ++v565;
  v569 = __PAIR128__(v565, v568) + (v564 >> 16);
  v570 = (unint64_t)(unsigned __int16)v560 << 40;
  *((_QWORD *)&v572 + 1) = v563;
  *(_QWORD *)&v572 = v559;
  v571 = v572 >> 16;
  v574 = __PAIR128__(v548, v549) + __PAIR128__(v546, v547) + __PAIR128__(v550, v551) + __PAIR128__(v552, v553);
  v573 = *((_QWORD *)&v574 + 1);
  v575 = (unint64_t)(unsigned __int16)v564 << 40;
  *((_QWORD *)&v572 + 1) = *((_QWORD *)&v569 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v572 = v568 + (v564 >> 16);
  v576 = v572 >> 56;
  if (__CFADD__((_QWORD)v574, v570))
    v573 = *((_QWORD *)&v574 + 1) + 1;
  v577 = __PAIR128__(v563 >> 16, (unint64_t)v574 + v570)
       + __PAIR128__(v573, v571)
       + __PAIR128__((unint64_t)(*((_QWORD *)&v569 + 1) + 0x7FFFFFFFFFFFFF80) >> 56, v576);
  v578 = (v569 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v577 + 1) >> 8);
  v579 = (v577 >> 16) & 0xFFFF0000000000;
  v580 = __PAIR128__(v533, v534)
       - (v564
        + ((unsigned __int128)v577 >> 56))
       + __PAIR128__(0x8000000000000000, 0x8000);
  v582 = v536 + v538 - v559;
  v581 = (__PAIR128__(v535, v536) + __PAIR128__(v537, v538) - __PAIR128__(v563, v559)) >> 64;
  v583 = v582 + v575;
  if (__CFADD__(v582, v575))
    ++v581;
  v20 = __CFADD__(v583, v579);
  v584 = v583 + v579;
  if (v20)
    ++v581;
  v585 = __PAIR128__(v581, v584) + (v580 >> 56) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v586 = v585 >> 56;
  v20 = __CFADD__(v578, v586);
  v587 = v578 + v586;
  if (v20)
    v588 = HIBYTE(*((_QWORD *)&v585 + 1)) + 1;
  else
    v588 = HIBYTE(*((_QWORD *)&v585 + 1));
  *((_QWORD *)&v589 + 1) = v588;
  *(_QWORD *)&v589 = v587;
  v590 = (v589 >> 56) + (v577 & 0xFFFFFFFFFFFFFFLL);
  v591 = 2 * ((v584 + (v580 >> 56) - 0x80000000000000) & 0xFFFFFFFFFFFFFFLL);
  v592 = 2 * (v587 & 0xFFFFFFFFFFFFFFLL);
  v593 = v580 & 0xFFFFFFFFFFFFFFLL;
  v594 = v585 & 0xFFFFFFFFFFFFFFLL;
  v595 = ((v585 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v592
        + v590 * (unsigned __int128)(2 * ((unint64_t)v580 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v596 = (v585 & 0xFFFFFFFFFFFFFFLL) * v592 + v590 * 2 * (v580 & 0xFFFFFFFFFFFFFFLL);
  v597 = v587 & 0xFFFFFFFFFFFFFFLL;
  v598 = (v590 * (unsigned __int128)(unint64_t)v591
        + (unint64_t)v597 * (unsigned __int128)(unint64_t)v597
        + ((v590 * (unsigned __int128)v590) >> 16)) >> 64;
  v599 = v590 * v591 + v597 * v597 + ((v590 * (unsigned __int128)v590) >> 16);
  v600 = (unint64_t)(unsigned __int16)(((v589 >> 56) + v577) * ((v589 >> 56) + v577)) << 40;
  v20 = __CFADD__(v596, v600);
  v601 = v596 + v600;
  if (v20)
    ++v595;
  v602 = ((unint64_t)v593 * (unsigned __int128)(unint64_t)v591
        - v590 * (unsigned __int128)(unint64_t)v592) >> 64;
  v603 = v593 * v591 - v590 * v592;
  v604 = (unint64_t)(unsigned __int16)v599 << 40;
  v20 = __CFADD__(v603, v604);
  v605 = v603 + v604;
  if (v20)
    ++v602;
  *((_QWORD *)&v606 + 1) = v598;
  *(_QWORD *)&v606 = v599;
  v607 = (unint64_t)v594 * (unsigned __int128)(unint64_t)v594
       - v590 * (unsigned __int128)v590
       + (unint64_t)v593 * (unsigned __int128)(unint64_t)v592
       + (v606 >> 16)
       + __PAIR128__(0x7FFFFFFFFFFFFF80, ((v590 * v592) << 40) & 0xFFFE0000000000);
  v608 = __PAIR128__(v595, v601) + ((v590 * (unsigned __int128)(unint64_t)v592) >> 16) + (v607 >> 56);
  v609 = (v608 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v605, v609);
  v610 = v605 + v609;
  if (v20)
    v611 = v602 + 1;
  else
    v611 = v602;
  v612 = v608;
  v613 = (v607 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v608 + 1) >> 8);
  v614 = v593 * v593 - (v599 + (v608 >> 56)) + 0x8000;
  v615 = (__PAIR128__(((unint64_t)(((unint64_t)v593 * (unsigned __int128)(unint64_t)v593- __PAIR128__(HIBYTE(*((_QWORD *)&v608 + 1))+ (unint64_t)__CFADD__(v599, (unint64_t)(v612 >> 56))+ v598, v599 + (unint64_t)(v612 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v610, (unint64_t)((__int128)((unint64_t)v593 * (unsigned __int128)(unint64_t)v593- __PAIR128__(HIBYTE(*((_QWORD *)&v608 + 1))+ (unint64_t)__CFADD__(v599, (unint64_t)(v612 >> 56))+ v598, v599 + (unint64_t)(v612 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v611, v610+ (unint64_t)((__int128)((unint64_t)v593 * (unsigned __int128)(unint64_t)v593
                                        - __PAIR128__(HIBYTE(*((_QWORD *)&v608 + 1))+ (unint64_t)__CFADD__(v599, (unint64_t)(v612 >> 56))+ v598, v599 + (unint64_t)(v612 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
  v616 = v610
       + ((__int128)((unint64_t)v593 * (unsigned __int128)(unint64_t)v593
                   - __PAIR128__(HIBYTE(*((_QWORD *)&v608 + 1))+ (unint64_t)__CFADD__(v599, (unint64_t)(v612 >> 56))+ v598, v599 + (unint64_t)(v612 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56)- 0x80000000000000;
  v617 = (__int128)(__PAIR128__(((unint64_t)(((unint64_t)v593 * (unsigned __int128)(unint64_t)v593- __PAIR128__(HIBYTE(*((_QWORD *)&v608 + 1))+ (unint64_t)__CFADD__(v599, (unint64_t)(v612 >> 56))+ v598, v599 + (unint64_t)(v612 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v610, (unint64_t)((__int128)((unint64_t)v593 * (unsigned __int128)(unint64_t)v593- __PAIR128__(HIBYTE(*((_QWORD *)&v608 + 1))+ (unint64_t)__CFADD__(v599, (unint64_t)(v612 >> 56))+ v598, v599 + (unint64_t)(v612 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v611,
                      v610
                    + (unint64_t)((__int128)((unint64_t)v593 * (unsigned __int128)(unint64_t)v593
                                                  - __PAIR128__(HIBYTE(*((_QWORD *)&v608 + 1))+ (unint64_t)__CFADD__(v599, (unint64_t)(v612 >> 56))+ v598, v599 + (unint64_t)(v612 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 56;
  v618 = v613 + v617;
  v619 = HIBYTE(v615);
  if (__CFADD__(v613, v617))
    ++v619;
  *((_QWORD *)&v620 + 1) = v619;
  *(_QWORD *)&v620 = v613 + v617;
  v621 = (v620 >> 56) + (v608 & 0xFFFFFFFFFFFFFFLL);
  v622 = 23;
  do
  {
    v623 = v616 & 0xFFFFFFFFFFFFFFLL;
    v624 = v614 & 0xFFFFFFFFFFFFFFLL;
    v625 = 2 * (v614 & 0xFFFFFFFFFFFFFFLL);
    v626 = 2 * (v616 & 0xFFFFFFFFFFFFFFLL);
    v627 = 2 * (v618 & 0xFFFFFFFFFFFFFFLL);
    v628 = ((unint64_t)v624 * (unsigned __int128)(unint64_t)v624) >> 64;
    v629 = v624 * v624;
    v630 = ((unint64_t)v626 * (unsigned __int128)(unint64_t)v624) >> 64;
    v631 = v626 * v624;
    v632 = ((unint64_t)v627 * (unsigned __int128)(unint64_t)v624) >> 64;
    v633 = v627 * v624;
    v634 = (unint64_t)v627 * (unsigned __int128)(v616 & 0xFFFFFFFFFFFFFFLL)
         + v621 * (unsigned __int128)(unint64_t)v625;
    v635 = v621 * (unsigned __int128)(unint64_t)v626
         + (v618 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v618 & 0xFFFFFFFFFFFFFFLL);
    v636 = v627 * v621;
    v637 = ((unint64_t)v627 * (unsigned __int128)v621) >> 64;
    v638 = v621 * v621;
    v639 = (v621 * (unsigned __int128)v621) >> 64;
    *((_QWORD *)&v640 + 1) = v639;
    *(_QWORD *)&v640 = v638;
    v641 = v635 + ((unsigned __int128)v640 >> 16);
    v642 = (unint64_t)(unsigned __int16)v638 << 40;
    *((_QWORD *)&v640 + 1) = v637;
    *(_QWORD *)&v640 = v636;
    v643 = v640 >> 16;
    v644 = v637 >> 16;
    v645 = (v636 << 40) & 0xFFFE0000000000;
    v646 = (__PAIR128__(v630, v631) - __PAIR128__(v637, v636)) >> 64;
    v647 = (unint64_t)(unsigned __int16)v641 << 40;
    v20 = __CFADD__(v631 - v636, v647);
    v648 = v631 - v636 + v647;
    if (v20)
      ++v646;
    v649 = v641 >> 16;
    v651 = (unint64_t)v623 * (unsigned __int128)(unint64_t)v623
         - __PAIR128__(v639, v638)
         + __PAIR128__(v632, v633);
    v650 = *((_QWORD *)&v651 + 1);
    v652 = v651 + v645;
    if (__CFADD__((_QWORD)v651, v645))
      v650 = *((_QWORD *)&v651 + 1) + 1;
    v20 = __CFADD__(v652, v649);
    v653 = v652 + v649;
    v654 = (*((_QWORD *)&v641 + 1) >> 16) + v20 + v650 + 0x7FFFFFFFFFFFFF80;
    v655 = HIBYTE(v654);
    *((_QWORD *)&v657 + 1) = v654;
    *(_QWORD *)&v657 = v653;
    v656 = v657 >> 56;
    v658 = (v634 + __PAIR128__(v644, v643)) >> 64;
    v659 = v634 + v643 + v642;
    if (__CFADD__(v634 + v643, v642))
      ++v658;
    v660 = __PAIR128__(v658, v659) + __PAIR128__(v655, v656);
    v661 = ((__int128)(__PAIR128__(v658, v659) + __PAIR128__(v655, v656)) >> 16) & 0xFFFF0000000000;
    v20 = __CFADD__(v648, v661);
    v662 = v648 + v661;
    if (v20)
      ++v646;
    v663 = (v653 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v660 + 1) >> 8);
    v664 = (__PAIR128__(v628, v629) - (v641 + (v660 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000)) >> 64;
    v614 = v629 - (v641 + (v660 >> 56)) + 0x8000;
    v666 = __PAIR128__(HIBYTE(v664) + __CFADD__(v662, (unint64_t)((__int128)__PAIR128__(v664, v614) >> 56)) + v646, v662 + (unint64_t)((__int128)__PAIR128__(v664, v614) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
    v665 = (__PAIR128__(HIBYTE(v664) + __CFADD__(v662, (unint64_t)((__int128)__PAIR128__(v664, v614) >> 56)) + v646, v662 + (unint64_t)((__int128)__PAIR128__(v664, v614) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
    v616 = v666;
    v667 = HIBYTE(v665);
    v668 = (__int128)__PAIR128__(v665, v666) >> 56;
    v618 = v663 + v668;
    if (__CFADD__(v663, v668))
      v669 = v667 + 1;
    else
      v669 = v667;
    *((_QWORD *)&v670 + 1) = v669;
    *(_QWORD *)&v670 = v618;
    v621 = (v670 >> 56) + (v660 & 0xFFFFFFFFFFFFFFLL);
    --v622;
  }
  while (v622);
  v671 = v666 & 0xFFFFFFFFFFFFFFLL;
  v672 = v618 & 0xFFFFFFFFFFFFFFLL;
  v673 = v621 * (unsigned __int128)(unint64_t)v597 + (v618 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)v590;
  v674 = (v618 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v597
       + (v666 & 0xFFFFFFFFFFFFFFLL) * v590
       + v621 * (unsigned __int128)(unint64_t)v594
       + ((v621 * (unsigned __int128)v590) >> 16);
  v1472 = v590;
  v1473 = v585 & 0xFFFFFFFFFFFFFFLL;
  v675 = (v614 & 0xFFFFFFFFFFFFFFLL) * v590;
  v677 = (v614 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v597
       + (v666 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v594
       + (v618 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v593
       - v621 * (unsigned __int128)v590;
  v676 = *((_QWORD *)&v677 + 1);
  v678 = (unint64_t)(unsigned __int16)(v621 * v597 + v618 * v590) << 40;
  v20 = __CFADD__((_QWORD)v677, v678);
  v679 = v677 + v678;
  if (v20)
    v676 = *((_QWORD *)&v677 + 1) + 1;
  v680 = __PAIR128__(v676, v679) + (v674 >> 16);
  v681 = ((unint64_t)v671 * (unsigned __int128)(unint64_t)v597) >> 64;
  v1468 = v597;
  v682 = v671 * v597;
  v683 = ((unint64_t)v672 * (unsigned __int128)(unint64_t)v594) >> 64;
  v684 = v672 * v594;
  v1474 = v580 & 0xFFFFFFFFFFFFFFLL;
  v685 = (unint64_t)(unsigned __int16)(v621 * v590) << 40;
  v20 = __CFADD__(v682 + v675, v684);
  v686 = v682 + v675 + v684;
  v688 = v686 + v621 * v593;
  v687 = (__PAIR128__(v683 + v20 + ((__PAIR128__(v681, v682) + (v614 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)v590) >> 64), v686)+ v621 * (unsigned __int128)(unint64_t)v593) >> 64;
  v689 = (unint64_t)(unsigned __int16)(v618 * v597
                                            + v666 * v590
                                            + v621 * v585
                                            + ((v621 * v590) >> 16)) << 40;
  *((_QWORD *)&v691 + 1) = *((_QWORD *)&v680 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v691 = v679 + (v674 >> 16);
  v690 = v691 >> 56;
  if (__CFADD__(v688, v685))
    ++v687;
  v692 = __PAIR128__(v687, v688 + v685)
       + (v673 >> 16)
       + __PAIR128__((unint64_t)(*((_QWORD *)&v680 + 1) + 0x7FFFFFFFFFFFFF80) >> 56, v690);
  v693 = (v680 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v692 + 1) >> 8);
  v694 = (v692 >> 16) & 0xFFFF0000000000;
  v695 = (v614 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v593
       - ((v618 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v597
        + (v666 & 0xFFFFFFFFFFFFFFLL) * v590
        + v621 * (unsigned __int128)(unint64_t)v594
        + ((v621 * (unsigned __int128)v590) >> 16)
        + ((unsigned __int128)v692 >> 56))
       + __PAIR128__(0x8000000000000000, 0x8000);
  v697 = ((v614 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v594
        + (v666 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v593
        - v673) >> 64;
  v696 = (v614 & 0xFFFFFFFFFFFFFFLL) * v594 + (v666 & 0xFFFFFFFFFFFFFFLL) * v593 - v673;
  v20 = __CFADD__(v696, v689);
  v698 = v696 + v689;
  if (v20)
    ++v697;
  v20 = __CFADD__(v698, v694);
  v699 = v698 + v694;
  if (v20)
    v700 = v697 + 1;
  else
    v700 = v697;
  v701 = __PAIR128__(v700, v699) + (v695 >> 56) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v702 = v701 >> 56;
  v20 = __CFADD__(v693, v702);
  v703 = v693 + v702;
  if (v20)
    v704 = HIBYTE(*((_QWORD *)&v701 + 1)) + 1;
  else
    v704 = HIBYTE(*((_QWORD *)&v701 + 1));
  *((_QWORD *)&v705 + 1) = v704;
  *(_QWORD *)&v705 = v703;
  v706 = (v705 >> 56) + (v692 & 0xFFFFFFFFFFFFFFLL);
  v707 = 2 * ((v699 + (v695 >> 56) - 0x80000000000000) & 0xFFFFFFFFFFFFFFLL);
  v708 = 2 * (v703 & 0xFFFFFFFFFFFFFFLL);
  v709 = v695 & 0xFFFFFFFFFFFFFFLL;
  v710 = v701 & 0xFFFFFFFFFFFFFFLL;
  v711 = ((v701 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v708
        + v706 * (unsigned __int128)(2 * ((unint64_t)v695 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v712 = (v701 & 0xFFFFFFFFFFFFFFLL) * v708 + v706 * 2 * (v695 & 0xFFFFFFFFFFFFFFLL);
  v713 = v703 & 0xFFFFFFFFFFFFFFLL;
  v714 = (v706 * (unsigned __int128)(unint64_t)v707
        + (unint64_t)v713 * (unsigned __int128)(unint64_t)v713
        + ((v706 * (unsigned __int128)v706) >> 16)) >> 64;
  v715 = v706 * v707 + v713 * v713 + ((v706 * (unsigned __int128)v706) >> 16);
  v716 = (unint64_t)(unsigned __int16)(((v705 >> 56) + v692) * ((v705 >> 56) + v692)) << 40;
  v20 = __CFADD__(v712, v716);
  v717 = v712 + v716;
  if (v20)
    ++v711;
  v719 = ((unint64_t)v709 * (unsigned __int128)(unint64_t)v707
        - v706 * (unsigned __int128)(unint64_t)v708) >> 64;
  v718 = v709 * v707 - v706 * v708;
  v720 = (unint64_t)(unsigned __int16)v715 << 40;
  v20 = __CFADD__(v718, v720);
  v721 = v718 + v720;
  if (v20)
    ++v719;
  *((_QWORD *)&v722 + 1) = v714;
  *(_QWORD *)&v722 = v715;
  v723 = (unint64_t)v710 * (unsigned __int128)(unint64_t)v710
       - v706 * (unsigned __int128)v706
       + (unint64_t)v709 * (unsigned __int128)(unint64_t)v708
       + (v722 >> 16)
       + __PAIR128__(0x7FFFFFFFFFFFFF80, ((v706 * v708) << 40) & 0xFFFE0000000000);
  v724 = __PAIR128__(v711, v717) + ((v706 * (unsigned __int128)(unint64_t)v708) >> 16) + (v723 >> 56);
  v725 = (v724 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v721, v725);
  v726 = v721 + v725;
  if (v20)
    v727 = v719 + 1;
  else
    v727 = v719;
  v728 = v724;
  v729 = (v723 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v724 + 1) >> 8);
  v730 = v709 * v709 - (v715 + (v724 >> 56)) + 0x8000;
  v731 = (__PAIR128__(((unint64_t)(((unint64_t)v709 * (unsigned __int128)(unint64_t)v709- __PAIR128__(HIBYTE(*((_QWORD *)&v724 + 1))+ (unint64_t)__CFADD__(v715, (unint64_t)(v728 >> 56))+ v714, v715 + (unint64_t)(v728 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v726, (unint64_t)((__int128)((unint64_t)v709 * (unsigned __int128)(unint64_t)v709- __PAIR128__(HIBYTE(*((_QWORD *)&v724 + 1))+ (unint64_t)__CFADD__(v715, (unint64_t)(v728 >> 56))+ v714, v715 + (unint64_t)(v728 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v727, v726+ (unint64_t)((__int128)((unint64_t)v709 * (unsigned __int128)(unint64_t)v709
                                        - __PAIR128__(HIBYTE(*((_QWORD *)&v724 + 1))+ (unint64_t)__CFADD__(v715, (unint64_t)(v728 >> 56))+ v714, v715 + (unint64_t)(v728 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
  v732 = v726
       + ((__int128)((unint64_t)v709 * (unsigned __int128)(unint64_t)v709
                   - __PAIR128__(HIBYTE(*((_QWORD *)&v724 + 1))+ (unint64_t)__CFADD__(v715, (unint64_t)(v728 >> 56))+ v714, v715 + (unint64_t)(v728 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56)- 0x80000000000000;
  v733 = (__int128)(__PAIR128__(((unint64_t)(((unint64_t)v709 * (unsigned __int128)(unint64_t)v709- __PAIR128__(HIBYTE(*((_QWORD *)&v724 + 1))+ (unint64_t)__CFADD__(v715, (unint64_t)(v728 >> 56))+ v714, v715 + (unint64_t)(v728 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v726, (unint64_t)((__int128)((unint64_t)v709 * (unsigned __int128)(unint64_t)v709- __PAIR128__(HIBYTE(*((_QWORD *)&v724 + 1))+ (unint64_t)__CFADD__(v715, (unint64_t)(v728 >> 56))+ v714, v715 + (unint64_t)(v728 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v727,
                      v726
                    + (unint64_t)((__int128)((unint64_t)v709 * (unsigned __int128)(unint64_t)v709
                                                  - __PAIR128__(HIBYTE(*((_QWORD *)&v724 + 1))+ (unint64_t)__CFADD__(v715, (unint64_t)(v728 >> 56))+ v714, v715 + (unint64_t)(v728 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 56;
  v734 = v729 + v733;
  v735 = HIBYTE(v731);
  if (__CFADD__(v729, v733))
    ++v735;
  *((_QWORD *)&v736 + 1) = v735;
  *(_QWORD *)&v736 = v729 + v733;
  v737 = (v736 >> 56) + (v724 & 0xFFFFFFFFFFFFFFLL);
  v738 = 47;
  do
  {
    v739 = v732 & 0xFFFFFFFFFFFFFFLL;
    v740 = v730 & 0xFFFFFFFFFFFFFFLL;
    v741 = 2 * (v730 & 0xFFFFFFFFFFFFFFLL);
    v742 = 2 * (v732 & 0xFFFFFFFFFFFFFFLL);
    v743 = 2 * (v734 & 0xFFFFFFFFFFFFFFLL);
    v744 = ((unint64_t)v740 * (unsigned __int128)(unint64_t)v740) >> 64;
    v745 = v740 * v740;
    v746 = ((unint64_t)v742 * (unsigned __int128)(unint64_t)v740) >> 64;
    v747 = v742 * v740;
    v748 = ((unint64_t)v743 * (unsigned __int128)(unint64_t)v740) >> 64;
    v749 = v743 * v740;
    v750 = (unint64_t)v743 * (unsigned __int128)(unint64_t)v739
         + v737 * (unsigned __int128)(unint64_t)v741;
    v751 = v743 * v737;
    v752 = ((unint64_t)v743 * (unsigned __int128)v737) >> 64;
    v753 = v737 * v737;
    v754 = (v737 * (unsigned __int128)v737) >> 64;
    v755 = v737 * (unsigned __int128)(unint64_t)v742
         + (v734 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v734 & 0xFFFFFFFFFFFFFFLL)
         + ((v737 * (unsigned __int128)v737) >> 16);
    v756 = (unint64_t)(unsigned __int16)(v737 * v737) << 40;
    *((_QWORD *)&v758 + 1) = v752;
    *(_QWORD *)&v758 = v751;
    v757 = v758 >> 16;
    v759 = v752 >> 16;
    v760 = (v751 << 40) & 0xFFFE0000000000;
    v761 = (__PAIR128__(v746, v747) - __PAIR128__(v752, v751)) >> 64;
    v762 = (unint64_t)(unsigned __int16)v755 << 40;
    v20 = __CFADD__(v747 - v751, v762);
    v763 = v747 - v751 + v762;
    if (v20)
      ++v761;
    v764 = v755 >> 16;
    v766 = (unint64_t)v739 * (unsigned __int128)(unint64_t)v739
         - __PAIR128__(v754, v753)
         + __PAIR128__(v748, v749);
    v765 = *((_QWORD *)&v766 + 1);
    v767 = v766 + v760;
    if (__CFADD__((_QWORD)v766, v760))
      v765 = *((_QWORD *)&v766 + 1) + 1;
    v20 = __CFADD__(v767, v764);
    v768 = v767 + v764;
    v769 = (*((_QWORD *)&v755 + 1) >> 16) + v20 + v765 + 0x7FFFFFFFFFFFFF80;
    v770 = HIBYTE(v769);
    *((_QWORD *)&v772 + 1) = v769;
    *(_QWORD *)&v772 = v768;
    v771 = v772 >> 56;
    v773 = (v750 + __PAIR128__(v759, v757)) >> 64;
    v774 = v750 + v757 + v756;
    if (__CFADD__(v750 + v757, v756))
      ++v773;
    v775 = __PAIR128__(v773, v774) + __PAIR128__(v770, v771);
    v776 = ((__int128)(__PAIR128__(v773, v774) + __PAIR128__(v770, v771)) >> 16) & 0xFFFF0000000000;
    v20 = __CFADD__(v763, v776);
    v777 = v763 + v776;
    if (v20)
      ++v761;
    v778 = (v768 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v775 + 1) >> 8);
    v779 = (__PAIR128__(v744, v745) - (v755 + (v775 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000)) >> 64;
    v730 = v745 - (v755 + (v775 >> 56)) + 0x8000;
    v781 = __PAIR128__(HIBYTE(v779) + __CFADD__(v777, (unint64_t)((__int128)__PAIR128__(v779, v730) >> 56)) + v761, v777 + (unint64_t)((__int128)__PAIR128__(v779, v730) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
    v780 = (__PAIR128__(HIBYTE(v779) + __CFADD__(v777, (unint64_t)((__int128)__PAIR128__(v779, v730) >> 56)) + v761, v777 + (unint64_t)((__int128)__PAIR128__(v779, v730) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
    v732 = v781;
    v782 = HIBYTE(v780);
    v783 = (__int128)__PAIR128__(v780, v781) >> 56;
    v734 = v778 + v783;
    if (__CFADD__(v778, v783))
      v784 = v782 + 1;
    else
      v784 = v782;
    *((_QWORD *)&v785 + 1) = v784;
    *(_QWORD *)&v785 = v734;
    v737 = (v785 >> 56) + (v775 & 0xFFFFFFFFFFFFFFLL);
    --v738;
  }
  while (v738);
  v786 = v730 & 0xFFFFFFFFFFFFFFLL;
  v787 = ((v730 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v709) >> 64;
  v788 = (v730 & 0xFFFFFFFFFFFFFFLL) * v709;
  v1469 = (v781 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v709;
  v1466 = ((unint64_t)v786 * (unsigned __int128)(unint64_t)v710) >> 64;
  v789 = v786 * v710;
  v790 = v734 & 0xFFFFFFFFFFFFFFLL;
  v791 = ((v734 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v709) >> 64;
  v792 = (v734 & 0xFFFFFFFFFFFFFFLL) * v709;
  v793 = ((unint64_t)v786 * (unsigned __int128)(unint64_t)v713) >> 64;
  v794 = v786 * v713;
  v795 = (v737 * (unsigned __int128)(unint64_t)v709) >> 64;
  v796 = v737 * v709;
  v797 = ((v734 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v710) >> 64;
  v798 = (v734 & 0xFFFFFFFFFFFFFFLL) * v710;
  v799 = ((unint64_t)v786 * (unsigned __int128)v706) >> 64;
  v800 = v786 * v706;
  v801 = ((unint64_t)v790 * (unsigned __int128)(unint64_t)v713) >> 64;
  v802 = v790 * v713;
  v803 = ((v781 & 0xFFFFFFFFFFFFFFLL) * v706) >> 64;
  v804 = (v781 & 0xFFFFFFFFFFFFFFLL) * v706;
  v805 = v737 * (unsigned __int128)(unint64_t)v713 + (unint64_t)v790 * (unsigned __int128)v706;
  v806 = v737 * v706;
  v807 = (v737 * (unsigned __int128)v706) >> 64;
  *((_QWORD *)&v808 + 1) = v807;
  *(_QWORD *)&v808 = v806;
  v809 = __PAIR128__(v801, v802)
       + __PAIR128__(v803, v804)
       + v737 * (unsigned __int128)(unint64_t)v710
       + (v808 >> 16);
  v811 = (__PAIR128__((((v781 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v710) >> 64)+ __CFADD__(v794, (v781 & 0xFFFFFFFFFFFFFFLL) * v710)+ v793, v794 + ((unint64_t)v781 & 0xFFFFFFFFFFFFFFLL) * v710)+ __PAIR128__(v791, v792)- __PAIR128__(v807, v806)) >> 64;
  v810 = v794 + (v781 & 0xFFFFFFFFFFFFFFLL) * v710 + v792 - v806;
  v812 = (unint64_t)(unsigned __int16)v805 << 40;
  v20 = __CFADD__(v810, v812);
  v813 = v810 + v812;
  if (v20)
    ++v811;
  v814 = __PAIR128__(v811, v813) + (v809 >> 16);
  v815 = (unint64_t)(unsigned __int16)v806 << 40;
  v817 = ((v781 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v713
        + __PAIR128__(v799, v800)
        + __PAIR128__(v797, v798)
        + __PAIR128__(v795, v796)) >> 64;
  v816 = (v781 & 0xFFFFFFFFFFFFFFLL) * v713 + v800 + v798 + v796;
  v818 = (unint64_t)(unsigned __int16)v809 << 40;
  v20 = __CFADD__(v816, v815);
  v819 = v816 + v815;
  *((_QWORD *)&v821 + 1) = *((_QWORD *)&v814 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v821 = v813 + (v809 >> 16);
  v820 = v821 >> 56;
  if (v20)
    ++v817;
  v822 = ((unint64_t)(*((_QWORD *)&v814 + 1) + 0x7FFFFFFFFFFFFF80) >> 56)
       + __CFADD__(v819 + (v805 >> 16), v820)
       + ((__PAIR128__(v817, v819) + ((unsigned __int128)v805 >> 16)) >> 64);
  *((_QWORD *)&v824 + 1) = v822;
  *(_QWORD *)&v824 = v819 + (v805 >> 16) + v820;
  v823 = v824 >> 56;
  v825 = v824 & 0xFFFFFFFFFFFFFFLL;
  v826 = (v814 & 0xFFFFFFFFFFFFFFLL) + (v822 >> 8);
  *((_QWORD *)&v824 + 1) = v822;
  v827 = (v824 >> 16) & 0xFFFF0000000000;
  v828 = __PAIR128__(v787, v788)
       - (v809
        + __PAIR128__(HIBYTE(v822), v823))
       + __PAIR128__(0x8000000000000000, 0x8000);
  v830 = (__PAIR128__(v1466, v789) + v1469 - v805) >> 64;
  v829 = v789 + v1469 - v805;
  v20 = __CFADD__(v829, v818);
  v831 = v829 + v818;
  if (v20)
    ++v830;
  v20 = __CFADD__(v831, v827);
  v832 = v831 + v827;
  if (v20)
    v833 = v830 + 1;
  else
    v833 = v830;
  v834 = __PAIR128__(v833, v832) + (v828 >> 56) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v835 = HIBYTE(*((_QWORD *)&v834 + 1));
  v836 = v834 >> 56;
  v20 = __CFADD__(v826, v836);
  v837 = v826 + v836;
  if (v20)
    ++v835;
  *((_QWORD *)&v838 + 1) = v835;
  *(_QWORD *)&v838 = v837;
  v839 = (v838 >> 56) + v825;
  v840 = 2 * (v834 & 0xFFFFFFFFFFFFFFLL);
  v841 = 2 * (v837 & 0xFFFFFFFFFFFFFFLL);
  v842 = v828 & 0xFFFFFFFFFFFFFFLL;
  v843 = ((v834 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v841
        + v839 * (unsigned __int128)(2 * ((unint64_t)v828 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v844 = (v834 & 0xFFFFFFFFFFFFFFLL) * v841 + v839 * 2 * (v828 & 0xFFFFFFFFFFFFFFLL);
  v1465 = v837 & 0xFFFFFFFFFFFFFFLL;
  v845 = (v839 * (unsigned __int128)(unint64_t)v840
        + (unint64_t)v1465 * (unsigned __int128)(unint64_t)v1465) >> 64;
  v846 = v839 * v840 + v1465 * v1465;
  v847 = v839 * v841;
  v848 = (v839 * (unsigned __int128)(unint64_t)v841) >> 64;
  v849 = v839 * v839;
  v1471 = v839;
  v850 = (v839 * (unsigned __int128)v839) >> 64;
  *((_QWORD *)&v838 + 1) = v850;
  *(_QWORD *)&v838 = v849;
  v851 = __PAIR128__(v845, v846) + ((unsigned __int128)v838 >> 16);
  v852 = (unint64_t)(unsigned __int16)v849 << 40;
  v20 = __CFADD__(v844, v852);
  v853 = v844 + v852;
  if (v20)
    ++v843;
  *((_QWORD *)&v854 + 1) = v848;
  *(_QWORD *)&v854 = v847;
  v855 = __PAIR128__(v843, v853) + (v854 >> 16);
  v857 = v842 * v840 - v847;
  v856 = ((unint64_t)v842 * (unsigned __int128)(unint64_t)v840 - __PAIR128__(v848, v847)) >> 64;
  v858 = (unint64_t)(unsigned __int16)v851 << 40;
  v859 = v857 + v858;
  if (__CFADD__(v857, v858))
    ++v856;
  v1467 = v834 & 0xFFFFFFFFFFFFFFLL;
  v860 = (v834 & 0xFFFFFFFFFFFFFFLL) * (v834 & 0xFFFFFFFFFFFFFFLL)
       - __PAIR128__(v850, v849)
       + (unint64_t)v842 * (unsigned __int128)(unint64_t)v841
       + (v851 >> 16)
       + __PAIR128__(0x7FFFFFFFFFFFFF80, (v847 << 40) & 0xFFFE0000000000);
  v861 = v855 + (v860 >> 56);
  v862 = (v861 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v859, v862);
  v863 = v859 + v862;
  if (v20)
    v864 = v856 + 1;
  else
    v864 = v856;
  v865 = v855 + (v860 >> 56);
  v866 = (v860 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v861 + 1) >> 8);
  v1470 = v828 & 0xFFFFFFFFFFFFFFLL;
  v867 = v842 * v842 - (v851 + (v861 >> 56)) + 0x8000;
  v868 = v863
       + ((__int128)((unint64_t)v842 * (unsigned __int128)(unint64_t)v842
                   - (v851
                    + ((unsigned __int128)v861 >> 56))
                   + __PAIR128__(0x8000000000000000, 0x8000)) >> 56)
       - 0x80000000000000;
  v869 = (__int128)(__PAIR128__(((unint64_t)(((unint64_t)v842 * (unsigned __int128)(unint64_t)v842- (v851+ (v865 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v863, (unint64_t)((__int128)((unint64_t)v842 * (unsigned __int128)(unint64_t)v842- (v851+ (v865 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v864, v863+ (unint64_t)((__int128)((unint64_t)v842 * (unsigned __int128)(unint64_t)v842- (v851+ (v865 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 56;
  v870 = v866 + v869;
  v871 = (unint64_t)((__PAIR128__(((unint64_t)(((unint64_t)v842 * (unsigned __int128)(unint64_t)v842- (v851+ (v865 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v863, (unint64_t)((__int128)((unint64_t)v842* (unsigned __int128)(unint64_t)v842- (v851+ (v865 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v864, v863+ (unint64_t)((__int128)((unint64_t)v842* (unsigned __int128)(unint64_t)v842- (v851+ (v865 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
  if (__CFADD__(v866, v869))
    ++v871;
  *((_QWORD *)&v872 + 1) = v871;
  *(_QWORD *)&v872 = v866 + v869;
  v873 = (v872 >> 56) + (v861 & 0xFFFFFFFFFFFFFFLL);
  v874 = 23;
  do
  {
    v875 = v868 & 0xFFFFFFFFFFFFFFLL;
    v876 = v867 & 0xFFFFFFFFFFFFFFLL;
    v877 = 2 * (v867 & 0xFFFFFFFFFFFFFFLL);
    v878 = 2 * (v868 & 0xFFFFFFFFFFFFFFLL);
    v879 = 2 * (v870 & 0xFFFFFFFFFFFFFFLL);
    v880 = ((unint64_t)v876 * (unsigned __int128)(unint64_t)v876) >> 64;
    v881 = v876 * v876;
    v882 = ((unint64_t)v878 * (unsigned __int128)(unint64_t)v876) >> 64;
    v883 = v878 * v876;
    v884 = ((unint64_t)v879 * (unsigned __int128)(unint64_t)v876) >> 64;
    v885 = v879 * v876;
    v886 = (unint64_t)v879 * (unsigned __int128)(unint64_t)v875
         + v873 * (unsigned __int128)(unint64_t)v877;
    v887 = v879 * v873;
    v888 = ((unint64_t)v879 * (unsigned __int128)v873) >> 64;
    v889 = v873 * v873;
    v890 = (v873 * (unsigned __int128)v873) >> 64;
    v891 = v873 * (unsigned __int128)(unint64_t)v878
         + (v870 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v870 & 0xFFFFFFFFFFFFFFLL)
         + ((v873 * (unsigned __int128)v873) >> 16);
    v892 = (unint64_t)(unsigned __int16)(v873 * v873) << 40;
    *((_QWORD *)&v894 + 1) = v888;
    *(_QWORD *)&v894 = v887;
    v893 = v894 >> 16;
    v895 = v888 >> 16;
    v896 = (v887 << 40) & 0xFFFE0000000000;
    v897 = (__PAIR128__(v882, v883) - __PAIR128__(v888, v887)) >> 64;
    v898 = (unint64_t)(unsigned __int16)v891 << 40;
    v20 = __CFADD__(v883 - v887, v898);
    v899 = v883 - v887 + v898;
    if (v20)
      ++v897;
    v900 = v891 >> 16;
    v902 = (unint64_t)v875 * (unsigned __int128)(unint64_t)v875
         - __PAIR128__(v890, v889)
         + __PAIR128__(v884, v885);
    v901 = *((_QWORD *)&v902 + 1);
    v903 = v902 + v896;
    if (__CFADD__((_QWORD)v902, v896))
      v901 = *((_QWORD *)&v902 + 1) + 1;
    v20 = __CFADD__(v903, v900);
    v904 = v903 + v900;
    v905 = (*((_QWORD *)&v891 + 1) >> 16) + v20 + v901 + 0x7FFFFFFFFFFFFF80;
    v906 = HIBYTE(v905);
    *((_QWORD *)&v908 + 1) = v905;
    *(_QWORD *)&v908 = v904;
    v907 = v908 >> 56;
    v909 = (v886 + __PAIR128__(v895, v893)) >> 64;
    v910 = v886 + v893 + v892;
    if (__CFADD__(v886 + v893, v892))
      ++v909;
    v911 = __PAIR128__(v909, v910) + __PAIR128__(v906, v907);
    v912 = ((__int128)(__PAIR128__(v909, v910) + __PAIR128__(v906, v907)) >> 16) & 0xFFFF0000000000;
    v20 = __CFADD__(v899, v912);
    v913 = v899 + v912;
    if (v20)
      ++v897;
    v914 = (v904 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v911 + 1) >> 8);
    v915 = (__PAIR128__(v880, v881) - (v891 + (v911 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000)) >> 64;
    v867 = v881 - (v891 + (v911 >> 56)) + 0x8000;
    v917 = __PAIR128__(HIBYTE(v915) + __CFADD__(v913, (unint64_t)((__int128)__PAIR128__(v915, v867) >> 56)) + v897, v913 + (unint64_t)((__int128)__PAIR128__(v915, v867) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
    v916 = (__PAIR128__(HIBYTE(v915) + __CFADD__(v913, (unint64_t)((__int128)__PAIR128__(v915, v867) >> 56)) + v897, v913 + (unint64_t)((__int128)__PAIR128__(v915, v867) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
    v868 = v917;
    v918 = HIBYTE(v916);
    v919 = (__int128)__PAIR128__(v916, v917) >> 56;
    v870 = v914 + v919;
    if (__CFADD__(v914, v919))
      v920 = v918 + 1;
    else
      v920 = v918;
    *((_QWORD *)&v921 + 1) = v920;
    *(_QWORD *)&v921 = v870;
    v873 = (v921 >> 56) + (v911 & 0xFFFFFFFFFFFFFFLL);
    --v874;
  }
  while (v874);
  v922 = v867 & 0xFFFFFFFFFFFFFFLL;
  v923 = v873 * (unsigned __int128)(unint64_t)v1468 + (v870 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)v1472;
  v924 = (v870 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1468
       + (v917 & 0xFFFFFFFFFFFFFFLL) * v1472
       + v873 * (unsigned __int128)(unint64_t)v1473
       + ((v873 * (unsigned __int128)v1472) >> 16);
  v925 = ((v867 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1468
        + (v917 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1473
        + (v870 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1474
        - v873 * (unsigned __int128)v1472) >> 64;
  v926 = (v867 & 0xFFFFFFFFFFFFFFLL) * v1468
       + (v917 & 0xFFFFFFFFFFFFFFLL) * v1473
       + (v870 & 0xFFFFFFFFFFFFFFLL) * v1474
       - v873 * v1472;
  v927 = (unint64_t)(unsigned __int16)(v873 * v1468 + v870 * v1472) << 40;
  v20 = __CFADD__(v926, v927);
  v928 = v926 + v927;
  if (v20)
    ++v925;
  v929 = __PAIR128__(v925, v928) + (v924 >> 16);
  v930 = (unint64_t)(unsigned __int16)(v873 * v1472) << 40;
  v932 = ((v917 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1468
        + (unint64_t)v922 * (unsigned __int128)v1472
        + (v870 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1473
        + v873 * (unsigned __int128)(unint64_t)v1474) >> 64;
  v931 = (v917 & 0xFFFFFFFFFFFFFFLL) * v1468 + v922 * v1472 + (v870 & 0xFFFFFFFFFFFFFFLL) * v1473 + v873 * v1474;
  v933 = v923 >> 16;
  v20 = __CFADD__(v931, v930);
  v934 = v931 + v930;
  if (v20)
    ++v932;
  v935 = __PAIR128__(v932, v934) + ((unsigned __int128)v923 >> 16);
  *((_QWORD *)&v937 + 1) = *((_QWORD *)&v929 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v937 = v928 + (v924 >> 16);
  v936 = v937 >> 56;
  v20 = __CFADD__(v934 + v933, v936);
  v938 = v934 + v933 + v936;
  *((_QWORD *)&v937 + 1) = ((unint64_t)(*((_QWORD *)&v929 + 1) + 0x7FFFFFFFFFFFFF80) >> 56)
                         + v20
                         + *((_QWORD *)&v935 + 1);
  *(_QWORD *)&v937 = v938;
  v939 = ((unint64_t)v922 * (unsigned __int128)(unint64_t)v1474
        - (v924
         + ((unsigned __int128)v937 >> 56))
        + __PAIR128__(0x8000000000000000, 0x8000)) >> 64;
  v940 = v922 * v1474 - (v924 + ((unsigned __int128)v937 >> 56)) + 0x8000;
  v942 = ((v867 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1473
        + (v917 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1474
        - v923) >> 64;
  v941 = (v867 & 0xFFFFFFFFFFFFFFLL) * v1473 + (v917 & 0xFFFFFFFFFFFFFFLL) * v1474 - v923;
  v943 = (unint64_t)(unsigned __int16)(v870 * v1468
                                            + v917 * v1472
                                            + v873 * v585
                                            + ((v873 * v1472) >> 16)) << 40;
  v944 = (v929 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v937 + 1) >> 8);
  *(_QWORD *)&v937 = v938;
  v945 = (v937 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v941, v943);
  v946 = v941 + v943;
  v947 = HIBYTE(v939);
  v948 = (__int128)__PAIR128__(v939, v940) >> 56;
  if (v20)
    ++v942;
  v20 = __CFADD__(v946, v945);
  v949 = v946 + v945;
  if (v20)
    v950 = v942 + 1;
  else
    v950 = v942;
  v953 = v949 + v948 - 0x80000000000000;
  v951 = (__PAIR128__(v950, v949) + __PAIR128__(v947, v948) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
  v952 = v953;
  v954 = (__int128)__PAIR128__(v951, v953) >> 56;
  v955 = v944 + v954;
  v956 = HIBYTE(v951);
  if (__CFADD__(v944, v954))
    ++v956;
  *((_QWORD *)&v957 + 1) = v956;
  *(_QWORD *)&v957 = v944 + v954;
  v958 = (v957 >> 56) + (v938 & 0xFFFFFFFFFFFFFFLL);
  v959 = 6;
  do
  {
    v960 = v952 & 0xFFFFFFFFFFFFFFLL;
    v961 = v940 & 0xFFFFFFFFFFFFFFLL;
    v962 = 2 * (v940 & 0xFFFFFFFFFFFFFFLL);
    v963 = 2 * (v952 & 0xFFFFFFFFFFFFFFLL);
    v964 = 2 * (v955 & 0xFFFFFFFFFFFFFFLL);
    v965 = ((unint64_t)v961 * (unsigned __int128)(unint64_t)v961) >> 64;
    v966 = v961 * v961;
    v967 = ((unint64_t)v963 * (unsigned __int128)(unint64_t)v961) >> 64;
    v968 = v963 * v961;
    v969 = ((unint64_t)v964 * (unsigned __int128)(unint64_t)v961) >> 64;
    v970 = v964 * v961;
    v971 = (unint64_t)v964 * (unsigned __int128)(unint64_t)v960
         + v958 * (unsigned __int128)(unint64_t)v962;
    v972 = v964 * v958;
    v973 = ((unint64_t)v964 * (unsigned __int128)v958) >> 64;
    v974 = v958 * v958;
    v975 = (v958 * (unsigned __int128)v958) >> 64;
    v976 = v958 * (unsigned __int128)(unint64_t)v963
         + (v955 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v955 & 0xFFFFFFFFFFFFFFLL)
         + ((v958 * (unsigned __int128)v958) >> 16);
    v977 = (unint64_t)(unsigned __int16)(v958 * v958) << 40;
    *((_QWORD *)&v979 + 1) = v973;
    *(_QWORD *)&v979 = v972;
    v978 = v979 >> 16;
    v980 = v973 >> 16;
    v981 = (v972 << 40) & 0xFFFE0000000000;
    v982 = (__PAIR128__(v967, v968) - __PAIR128__(v973, v972)) >> 64;
    v983 = (unint64_t)(unsigned __int16)v976 << 40;
    v20 = __CFADD__(v968 - v972, v983);
    v984 = v968 - v972 + v983;
    if (v20)
      ++v982;
    v985 = v976 >> 16;
    v987 = (unint64_t)v960 * (unsigned __int128)(unint64_t)v960
         - __PAIR128__(v975, v974)
         + __PAIR128__(v969, v970);
    v986 = *((_QWORD *)&v987 + 1);
    v988 = v987 + v981;
    if (__CFADD__((_QWORD)v987, v981))
      v986 = *((_QWORD *)&v987 + 1) + 1;
    v20 = __CFADD__(v988, v985);
    v989 = v988 + v985;
    v990 = (*((_QWORD *)&v976 + 1) >> 16) + v20 + v986 + 0x7FFFFFFFFFFFFF80;
    v991 = HIBYTE(v990);
    *((_QWORD *)&v993 + 1) = v990;
    *(_QWORD *)&v993 = v989;
    v992 = v993 >> 56;
    v994 = (v971 + __PAIR128__(v980, v978)) >> 64;
    v995 = v971 + v978 + v977;
    if (__CFADD__(v971 + v978, v977))
      ++v994;
    v996 = __PAIR128__(v994, v995) + __PAIR128__(v991, v992);
    v997 = ((__int128)(__PAIR128__(v994, v995) + __PAIR128__(v991, v992)) >> 16) & 0xFFFF0000000000;
    v20 = __CFADD__(v984, v997);
    v998 = v984 + v997;
    if (v20)
      ++v982;
    v999 = (v989 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v996 + 1) >> 8);
    v1000 = (__PAIR128__(v965, v966) - (v976 + (v996 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000)) >> 64;
    v940 = v966 - (v976 + (v996 >> 56)) + 0x8000;
    v1002 = __PAIR128__(HIBYTE(v1000) + __CFADD__(v998, (unint64_t)((__int128)__PAIR128__(v1000, v940) >> 56)) + v982, v998 + (unint64_t)((__int128)__PAIR128__(v1000, v940) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
    v1001 = (__PAIR128__(HIBYTE(v1000) + __CFADD__(v998, (unint64_t)((__int128)__PAIR128__(v1000, v940) >> 56)) + v982, v998 + (unint64_t)((__int128)__PAIR128__(v1000, v940) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
    v952 = v1002;
    v1003 = HIBYTE(v1001);
    v1004 = (__int128)__PAIR128__(v1001, v1002) >> 56;
    v955 = v999 + v1004;
    if (__CFADD__(v999, v1004))
      v1005 = v1003 + 1;
    else
      v1005 = v1003;
    *((_QWORD *)&v1006 + 1) = v1005;
    *(_QWORD *)&v1006 = v955;
    v958 = (v1006 >> 56) + (v996 & 0xFFFFFFFFFFFFFFLL);
    --v959;
  }
  while (v959);
  v1007 = v940 & 0xFFFFFFFFFFFFFFLL;
  v1008 = ((v940 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1476) >> 64;
  v1009 = (v940 & 0xFFFFFFFFFFFFFFLL) * v1476;
  v1010 = ((unint64_t)v1007 * (unsigned __int128)(unint64_t)v1475) >> 64;
  v1011 = v1007 * v1475;
  v1012 = ((unint64_t)v1007 * (unsigned __int128)(unint64_t)v1489) >> 64;
  v1013 = v1007 * v1489;
  v1014 = v955 & 0xFFFFFFFFFFFFFFLL;
  v1015 = ((v955 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1476) >> 64;
  v1016 = (v955 & 0xFFFFFFFFFFFFFFLL) * v1476;
  v1017 = ((unint64_t)v1007 * (unsigned __int128)v1478) >> 64;
  v1018 = v1007 * v1478;
  v1019 = ((v955 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1475) >> 64;
  v1020 = (v955 & 0xFFFFFFFFFFFFFFLL) * v1475;
  v1022 = ((unint64_t)v1014 * (unsigned __int128)(unint64_t)v1489
         + (v1002 & 0xFFFFFFFFFFFFFFLL) * v1478
         + v958 * (unsigned __int128)(unint64_t)v1475) >> 64;
  v1021 = v1014 * v1489 + (v1002 & 0xFFFFFFFFFFFFFFLL) * v1478 + v958 * v1475;
  v1024 = (v958 * (unsigned __int128)(unint64_t)v1476) >> 64;
  v1025 = v958 * v1476;
  v1023 = v958 * (unsigned __int128)(unint64_t)v1489 + (unint64_t)v1014 * (unsigned __int128)v1478;
  v1026 = v958 * v1478;
  v1027 = (v958 * (unsigned __int128)v1478) >> 64;
  *((_QWORD *)&v1029 + 1) = v1027;
  *(_QWORD *)&v1029 = v1026;
  v1028 = v1029 >> 16;
  v20 = __CFADD__(v1021, v1028);
  v1030 = v1021 + v1028;
  v1031 = (v1027 >> 16) + v20 + v1022;
  v1032 = (unint64_t)(unsigned __int16)v1026 << 40;
  v1033 = (unint64_t)(unsigned __int16)v1023 << 40;
  v1034 = __PAIR128__(v1012, v1013) + (v1002 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1475 + __PAIR128__(v1015, v1016);
  *((_QWORD *)&v1029 + 1) = v1031;
  *(_QWORD *)&v1029 = v1030;
  v1037 = v1029 >> 16;
  v1036 = v1034 - __PAIR128__(v1027, v1026);
  v1035 = (v1034 - __PAIR128__(v1027, v1026)) >> 64;
  if (__CFADD__(v1034 - v1026, v1033))
    ++v1035;
  v1038 = v1036 + v1033 + v1037;
  v1039 = ((__PAIR128__(v1031 >> 16, (unint64_t)v1036 + v1033) + __PAIR128__(v1035, v1037)) >> 64)
        + 0x7FFFFFFFFFFFFF80;
  v1040 = (unint64_t)(unsigned __int16)v1030 << 40;
  v1041 = HIBYTE(v1039);
  *((_QWORD *)&v1043 + 1) = v1039;
  *(_QWORD *)&v1043 = v1038;
  v1042 = v1043 >> 56;
  v1045 = __PAIR128__(v1017+ __CFADD__((v1002 & 0xFFFFFFFFFFFFFFLL) * v1489, v1018)+ (((v1002 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1489) >> 64), ((unint64_t)v1002 & 0xFFFFFFFFFFFFFFLL) * v1489 + v1018)+ __PAIR128__(v1019, v1020)+ __PAIR128__(v1024, v1025);
  v1044 = *((_QWORD *)&v1045 + 1);
  if (__CFADD__((_QWORD)v1045, v1032))
    v1044 = *((_QWORD *)&v1045 + 1) + 1;
  v1046 = __PAIR128__(v1044, (unint64_t)v1045 + v1032) + (v1023 >> 16) + __PAIR128__(v1041, v1042);
  v1047 = (v1038 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v1046 + 1) >> 8);
  v1048 = (v1046 >> 16) & 0xFFFF0000000000;
  v1049 = __PAIR128__(v1008, v1009)
        - (__PAIR128__(v1031, v1030)
         + ((unsigned __int128)v1046 >> 56))
        + __PAIR128__(0x8000000000000000, 0x8000);
  v1051 = (__PAIR128__(v1010, v1011) + (v1002 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1476 - v1023) >> 64;
  v1050 = v1011 + (v1002 & 0xFFFFFFFFFFFFFFLL) * v1476 - v1023;
  v20 = __CFADD__(v1050, v1040);
  v1052 = v1050 + v1040;
  if (v20)
    ++v1051;
  v20 = __CFADD__(v1052, v1048);
  v1053 = v1052 + v1048;
  if (v20)
    v1054 = v1051 + 1;
  else
    v1054 = v1051;
  v1055 = __PAIR128__(v1054, v1053) + (v1049 >> 56) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v1056 = v1055 >> 56;
  v20 = __CFADD__(v1047, v1056);
  v1057 = v1047 + v1056;
  if (v20)
    v1058 = HIBYTE(*((_QWORD *)&v1055 + 1)) + 1;
  else
    v1058 = HIBYTE(*((_QWORD *)&v1055 + 1));
  *((_QWORD *)&v1059 + 1) = v1058;
  *(_QWORD *)&v1059 = v1057;
  v1060 = (v1059 >> 56) + (v1046 & 0xFFFFFFFFFFFFFFLL);
  v1061 = 2 * ((v1053 + (v1049 >> 56) - 0x80000000000000) & 0xFFFFFFFFFFFFFFLL);
  v1062 = 2 * (v1057 & 0xFFFFFFFFFFFFFFLL);
  v1063 = v1049 & 0xFFFFFFFFFFFFFFLL;
  v1064 = ((unint64_t)v1063 * (unsigned __int128)(unint64_t)v1063) >> 64;
  v1065 = v1063 * v1063;
  v1066 = ((v1049 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1061) >> 64;
  v1067 = (v1049 & 0xFFFFFFFFFFFFFFLL) * v1061;
  v1068 = ((v1049 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1062) >> 64;
  v1069 = (v1049 & 0xFFFFFFFFFFFFFFLL) * v1062;
  v1070 = (v1053 + (v1049 >> 56) - 0x80000000000000) & 0xFFFFFFFFFFFFFFLL;
  v1071 = ((unint64_t)v1070 * (unsigned __int128)(unint64_t)v1070) >> 64;
  v1072 = v1070 * v1070;
  v1073 = ((v1055 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1062
         + v1060 * (unsigned __int128)(2 * ((unint64_t)v1049 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v1074 = (v1055 & 0xFFFFFFFFFFFFFFLL) * v1062 + v1060 * 2 * (v1049 & 0xFFFFFFFFFFFFFFLL);
  v1076 = v1060 * v1061 + (v1057 & 0xFFFFFFFFFFFFFFLL) * (v1057 & 0xFFFFFFFFFFFFFFLL);
  v1075 = (v1060 * (unsigned __int128)(unint64_t)v1061
         + (v1057 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(v1057 & 0xFFFFFFFFFFFFFFLL)) >> 64;
  v1077 = v1060 * v1062;
  v1078 = (v1060 * (unsigned __int128)(unint64_t)v1062) >> 64;
  v1079 = v1060 * v1060;
  v1080 = (v1060 * (unsigned __int128)v1060) >> 64;
  *((_QWORD *)&v1059 + 1) = v1080;
  *(_QWORD *)&v1059 = v1079;
  v1081 = __PAIR128__(v1075, v1076) + ((unsigned __int128)v1059 >> 16);
  v1082 = (unint64_t)(unsigned __int16)v1079 << 40;
  v20 = __CFADD__(v1074, v1082);
  v1083 = v1074 + v1082;
  if (v20)
    ++v1073;
  *((_QWORD *)&v1084 + 1) = v1078;
  *(_QWORD *)&v1084 = v1077;
  v1085 = __PAIR128__(v1073, v1083) + (v1084 >> 16);
  v1086 = (__PAIR128__(v1066, v1067) - __PAIR128__(v1078, v1077)) >> 64;
  v1087 = (unint64_t)(unsigned __int16)v1081 << 40;
  v20 = __CFADD__(v1067 - v1077, v1087);
  v1088 = v1067 - v1077 + v1087;
  if (v20)
    ++v1086;
  v1089 = __PAIR128__(v1071, v1072)
        - __PAIR128__(v1080, v1079)
        + __PAIR128__(v1068, v1069)
        + (v1081 >> 16)
        + __PAIR128__(0x7FFFFFFFFFFFFF80, (v1077 << 40) & 0xFFFE0000000000);
  v1090 = v1085 + (v1089 >> 56);
  v1091 = ((__int128)v1090 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v1088, v1091);
  v1092 = v1088 + v1091;
  if (v20)
    ++v1086;
  v1093 = (v1089 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v1090 + 1) >> 8);
  v1096 = __PAIR128__(((unint64_t)((__PAIR128__(v1064, v1065)- (v1081+ (v1090 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v1092, (unint64_t)((__int128)(__PAIR128__(v1064, v1065)- (v1081+ (v1090 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v1086, v1092+ (unint64_t)((__int128)(__PAIR128__(v1064, v1065)- (v1081+ (v1090 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v1095 = (__PAIR128__(((unint64_t)((__PAIR128__(v1064, v1065)- (v1081+ (v1090 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v1092, (unint64_t)((__int128)(__PAIR128__(v1064, v1065)- (v1081+ (v1090 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ v1086, v1092+ (unint64_t)((__int128)(__PAIR128__(v1064, v1065)- (v1081+ (v1090 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
  v1094 = v1092
        + ((__int128)(__PAIR128__(v1064, v1065) - (v1081 + (v1090 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000)) >> 56)
        - 0x80000000000000;
  v1097 = (__int128)__PAIR128__(v1095, v1096) >> 56;
  v1098 = HIBYTE(v1095);
  v20 = __CFADD__(v1093, v1097);
  v1099 = v1093 + v1097;
  if (v20)
    ++v1098;
  *((_QWORD *)&v1100 + 1) = v1098;
  *(_QWORD *)&v1100 = v1099;
  v1101 = (v1100 >> 56) + (v1090 & 0xFFFFFFFFFFFFFFLL);
  v1102 = (v1065 - (v1081 + (v1090 >> 56)) + 0x8000) & 0xFFFFFFFFFFFFFFLL;
  v1103 = ((unint64_t)v1102 * (unsigned __int128)(unint64_t)v1483) >> 64;
  v1104 = v1102 * v1483;
  v1490 = ((unint64_t)v1102 * (unsigned __int128)(unint64_t)v1480) >> 64;
  v1479 = v1102 * v1480;
  v1105 = v1094 & 0xFFFFFFFFFFFFFFLL;
  v1477 = ((v1094 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1483) >> 64;
  v1106 = (v1094 & 0xFFFFFFFFFFFFFFLL) * v1483;
  v1107 = ((unint64_t)v1102 * (unsigned __int128)(unint64_t)v1481) >> 64;
  v1108 = v1102 * v1481;
  v1109 = ((v1094 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1480) >> 64;
  v1110 = (v1094 & 0xFFFFFFFFFFFFFFLL) * v1480;
  v1111 = v1099 & 0xFFFFFFFFFFFFFFLL;
  v1112 = ((unint64_t)v1111 * (unsigned __int128)(unint64_t)v1483) >> 64;
  v1113 = v1111 * v1483;
  v1114 = ((unint64_t)v1102 * (unsigned __int128)(unint64_t)v1482) >> 64;
  v1115 = v1102 * v1482;
  v1116 = ((v1094 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1481) >> 64;
  v1117 = (v1094 & 0xFFFFFFFFFFFFFFLL) * v1481;
  v1118 = ((unint64_t)v1111 * (unsigned __int128)(unint64_t)v1480) >> 64;
  v1119 = v1111 * v1480;
  v1120 = (unint64_t)v1111 * (unsigned __int128)(unint64_t)v1481
        + (unint64_t)v1105 * (unsigned __int128)(unint64_t)v1482
        + v1101 * (unsigned __int128)(unint64_t)v1480;
  v20 = __CFADD__(v1101 * v1481, v1111 * v1482);
  v1121 = v1101 * v1481 + v1111 * v1482;
  v1122 = (v1101 * (unsigned __int128)(unint64_t)v1483) >> 64;
  v1123 = v1101 * v1483;
  v1124 = (v1101 * (unsigned __int128)(unint64_t)v1481) >> 64;
  v1125 = v1101 * v1482;
  v1126 = (v1101 * (unsigned __int128)(unint64_t)v1482) >> 64;
  *((_QWORD *)&v1100 + 1) = v1126;
  *(_QWORD *)&v1100 = v1125;
  v1127 = (((unint64_t)v1111 * (unsigned __int128)(unint64_t)v1482) >> 64) + v20 + v1124;
  v1128 = v1120 + ((unsigned __int128)v1100 >> 16);
  v1130 = v1108 + v1110 + v1113 - v1125;
  v1129 = (__PAIR128__(v1107, v1108) + __PAIR128__(v1109, v1110) + __PAIR128__(v1112, v1113) - __PAIR128__(v1126, v1125)) >> 64;
  v1131 = (unint64_t)(unsigned __int16)v1121 << 40;
  v20 = __CFADD__(v1130, v1131);
  v1132 = v1130 + v1131;
  if (v20)
    ++v1129;
  v1133 = __PAIR128__(v1129, v1132) + (v1128 >> 16);
  v1135 = v1117 + v1115 + v1119 + v1123;
  v1134 = (__PAIR128__(v1116, v1117) + __PAIR128__(v1114, v1115) + __PAIR128__(v1118, v1119) + __PAIR128__(v1122, v1123)) >> 64;
  v1136 = (unint64_t)(unsigned __int16)v1125 << 40;
  v20 = __CFADD__(v1135, v1136);
  v1137 = v1135 + v1136;
  *((_QWORD *)&v1139 + 1) = v1127;
  *(_QWORD *)&v1139 = v1121;
  v1138 = v1139 >> 16;
  if (v20)
    ++v1134;
  *((_QWORD *)&v1140 + 1) = *((_QWORD *)&v1133 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v1140 = v1132 + (v1128 >> 16);
  v1141 = __PAIR128__(v1134, v1137) + __PAIR128__(v1127 >> 16, v1138) + (v1140 >> 56);
  v1143 = __PAIR128__(v1103, v1104)
        - (v1128
         + ((unsigned __int128)v1141 >> 56))
        + __PAIR128__(0x8000000000000000, 0x8000);
  v1142 = v1143;
  v1145 = v1479 + v1106 - v1121;
  v1144 = (__PAIR128__(v1490, v1479) + __PAIR128__(v1477, v1106) - __PAIR128__(v1127, v1121)) >> 64;
  v1146 = (unint64_t)(unsigned __int16)v1128 << 40;
  v20 = __CFADD__(v1145, v1146);
  v1147 = v1145 + v1146;
  v1148 = (v1133 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v1141 + 1) >> 8);
  v1149 = (v1141 >> 16) & 0xFFFF0000000000;
  if (v20)
    ++v1144;
  v20 = __CFADD__(v1147, v1149);
  v1150 = v1147 + v1149;
  if (v20)
    ++v1144;
  v1151 = (__PAIR128__(v1144, v1150)
         + ((unsigned __int128)v1143 >> 56)
         + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
  v1152 = v1150 + (v1143 >> 56) - 0x80000000000000;
  v1153 = (__int128)__PAIR128__(v1151, v1152) >> 56;
  v1154 = v1148 + v1153;
  v1155 = HIBYTE(v1151);
  if (__CFADD__(v1148, v1153))
    ++v1155;
  *((_QWORD *)&v1156 + 1) = v1155;
  *(_QWORD *)&v1156 = v1148 + v1153;
  v1157 = (v1156 >> 56) + (v1141 & 0xFFFFFFFFFFFFFFLL);
  v1158 = 97;
  do
  {
    v1159 = v1154 & 0xFFFFFFFFFFFFFFLL;
    v1160 = v1152 & 0xFFFFFFFFFFFFFFLL;
    v1161 = v1142 & 0xFFFFFFFFFFFFFFLL;
    v1162 = 2 * (v1142 & 0xFFFFFFFFFFFFFFLL);
    v1163 = 2 * (v1152 & 0xFFFFFFFFFFFFFFLL);
    v1164 = ((unint64_t)v1161 * (unsigned __int128)(unint64_t)v1161) >> 64;
    v1165 = v1161 * v1161;
    v1166 = ((unint64_t)v1163 * (unsigned __int128)(unint64_t)v1161) >> 64;
    v1167 = v1163 * v1161;
    v1168 = ((unint64_t)(2 * v1159) * (unsigned __int128)(unint64_t)v1161) >> 64;
    v1169 = 2 * v1159 * v1161;
    v1170 = (unint64_t)(2 * v1159) * (unsigned __int128)(unint64_t)v1160
          + v1157 * (unsigned __int128)(unint64_t)v1162;
    v1171 = v1157 * (unsigned __int128)(unint64_t)v1163
          + (unint64_t)v1159 * (unsigned __int128)(unint64_t)v1159;
    v1172 = 2 * v1159 * v1157;
    v1173 = ((unint64_t)(2 * v1159) * (unsigned __int128)v1157) >> 64;
    v1174 = v1157 * v1157;
    v1175 = (v1157 * (unsigned __int128)v1157) >> 64;
    *((_QWORD *)&v1176 + 1) = v1175;
    *(_QWORD *)&v1176 = v1174;
    v1177 = v1171 + ((unsigned __int128)v1176 >> 16);
    v1178 = (unint64_t)(unsigned __int16)v1174 << 40;
    *((_QWORD *)&v1176 + 1) = v1173;
    *(_QWORD *)&v1176 = v1172;
    v1179 = v1176 >> 16;
    v1180 = v1173 >> 16;
    v1181 = (v1172 << 40) & 0xFFFE0000000000;
    v1182 = (__PAIR128__(v1166, v1167) - __PAIR128__(v1173, v1172)) >> 64;
    v1183 = (unint64_t)(unsigned __int16)v1177 << 40;
    v20 = __CFADD__(v1167 - v1172, v1183);
    v1184 = v1167 - v1172 + v1183;
    if (v20)
      ++v1182;
    v1186 = v1160 * v1160 - v1174 + v1169;
    v1185 = ((unint64_t)v1160 * (unsigned __int128)(unint64_t)v1160
           - __PAIR128__(v1175, v1174)
           + __PAIR128__(v1168, v1169)) >> 64;
    if (__CFADD__(v1186, v1181))
      ++v1185;
    v1187 = v1186 + v1181 + (v1177 >> 16);
    v1188 = ((__PAIR128__(v1185, v1186 + v1181) + ((unsigned __int128)v1177 >> 16)) >> 64) + 0x7FFFFFFFFFFFFF80;
    v1189 = HIBYTE(v1188);
    *((_QWORD *)&v1191 + 1) = v1188;
    *(_QWORD *)&v1191 = v1187;
    v1190 = v1191 >> 56;
    v1192 = (v1170 + __PAIR128__(v1180, v1179)) >> 64;
    v1193 = v1170 + v1179 + v1178;
    if (__CFADD__(v1170 + v1179, v1178))
      ++v1192;
    v1194 = __PAIR128__(v1192, v1193) + __PAIR128__(v1189, v1190);
    v1195 = ((__int128)(__PAIR128__(v1192, v1193) + __PAIR128__(v1189, v1190)) >> 16) & 0xFFFF0000000000;
    v20 = __CFADD__(v1184, v1195);
    v1196 = v1184 + v1195;
    if (v20)
      ++v1182;
    v1197 = (v1187 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v1194 + 1) >> 8);
    v1198 = __PAIR128__(v1164, v1165) - (v1177 + (v1194 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000);
    v1142 = v1198;
    v1152 = v1196 + (v1198 >> 56) - 0x80000000000000;
    v1199 = (__int128)(__PAIR128__(v1182, v1196)
                     + (v1198 >> 56)
                     + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 56;
    v20 = __CFADD__(v1197, v1199);
    v1154 = v1197 + v1199;
    if (v20)
      v1200 = ((unint64_t)((__PAIR128__(v1182, v1196)
                                 + (v1198 >> 56)
                                 + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56)
            + 1;
    else
      v1200 = (unint64_t)((__PAIR128__(v1182, v1196)
                                + (v1198 >> 56)
                                + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64) >> 56;
    *((_QWORD *)&v1201 + 1) = v1200;
    *(_QWORD *)&v1201 = v1154;
    v1157 = (v1201 >> 56) + (v1194 & 0xFFFFFFFFFFFFFFLL);
    --v1158;
  }
  while (v1158);
  v1202 = v1198 & 0xFFFFFFFFFFFFFFLL;
  v1203 = v1152 & 0xFFFFFFFFFFFFFFLL;
  v1204 = ((v1152 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1470) >> 64;
  v1205 = v1154 & 0xFFFFFFFFFFFFFFLL;
  v1206 = ((unint64_t)v1205 * (unsigned __int128)(unint64_t)v1470) >> 64;
  v1207 = v1205 * v1470;
  v1208 = ((unint64_t)v1205 * (unsigned __int128)(unint64_t)v1467) >> 64;
  v1209 = v1205 * v1467;
  v1210 = (unint64_t)v1205 * (unsigned __int128)(unint64_t)v1465
        + (unint64_t)v1203 * (unsigned __int128)v1471
        + v1157 * (unsigned __int128)(unint64_t)v1467;
  v1211 = (v1157 * (unsigned __int128)(unint64_t)v1470) >> 64;
  v1212 = v1157 * v1470;
  v1213 = v1157 * (unsigned __int128)(unint64_t)v1465 + (unint64_t)v1205 * (unsigned __int128)v1471;
  v1214 = v1157 * v1471;
  v1215 = (v1157 * (unsigned __int128)v1471) >> 64;
  *((_QWORD *)&v1216 + 1) = v1215;
  *(_QWORD *)&v1216 = v1214;
  v1217 = v1210 + (v1216 >> 16);
  v1219 = (v1198 & 0xFFFFFFFFFFFFFFLL) * v1465 + v1203 * v1467 + v1207 - v1214;
  v1218 = ((v1198 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1465
         + (unint64_t)v1203 * (unsigned __int128)(unint64_t)v1467
         + __PAIR128__(v1206, v1207)
         - __PAIR128__(v1215, v1214)) >> 64;
  v1220 = (unint64_t)(unsigned __int16)v1213 << 40;
  v20 = __CFADD__(v1219, v1220);
  v1221 = v1219 + v1220;
  if (v20)
    ++v1218;
  v1222 = __PAIR128__(v1218, v1221) + (v1217 >> 16);
  v1223 = (unint64_t)(unsigned __int16)v1214 << 40;
  v1225 = ((unint64_t)v1203 * (unsigned __int128)(unint64_t)v1465
         + (unint64_t)v1202 * (unsigned __int128)v1471
         + __PAIR128__(v1208, v1209)
         + __PAIR128__(v1211, v1212)) >> 64;
  v1224 = v1203 * v1465 + v1202 * v1471 + v1209 + v1212;
  v1226 = (unint64_t)(unsigned __int16)v1217 << 40;
  v20 = __CFADD__(v1224, v1223);
  v1227 = v1224 + v1223;
  *((_QWORD *)&v1229 + 1) = *((_QWORD *)&v1222 + 1) + 0x7FFFFFFFFFFFFF80;
  *(_QWORD *)&v1229 = v1221 + (v1217 >> 16);
  v1228 = v1229 >> 56;
  if (v20)
    ++v1225;
  v1230 = __PAIR128__(v1225, v1227)
        + (v1213 >> 16)
        + __PAIR128__((unint64_t)(*((_QWORD *)&v1222 + 1) + 0x7FFFFFFFFFFFFF80) >> 56, v1228);
  v1231 = (v1222 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v1230 + 1) >> 8);
  v1232 = (v1230 >> 16) & 0xFFFF0000000000;
  v1233 = (v1198 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1470
        - (v1217
         + ((unsigned __int128)v1230 >> 56))
        + __PAIR128__(0x8000000000000000, 0x8000);
  v1235 = (v1198 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1467
        + __PAIR128__(v1204, v1203 * ((unint64_t)v828 & 0xFFFFFFFFFFFFFFLL))
        - v1213;
  v1234 = *((_QWORD *)&v1235 + 1);
  v1236 = v1235 + v1226;
  if (__CFADD__((_QWORD)v1235, v1226))
    v1234 = *((_QWORD *)&v1235 + 1) + 1;
  v20 = __CFADD__(v1236, v1232);
  v1237 = v1236 + v1232;
  if (v20)
    ++v1234;
  v1238 = __PAIR128__(v1234, v1237) + (v1233 >> 56) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v1239 = v1238 >> 56;
  v1240 = v1231 + v1239;
  if (__CFADD__(v1231, v1239))
    v1241 = HIBYTE(*((_QWORD *)&v1238 + 1)) + 1;
  else
    v1241 = HIBYTE(*((_QWORD *)&v1238 + 1));
  *((_QWORD *)&v1242 + 1) = v1241;
  *(_QWORD *)&v1242 = v1240;
  v1243 = (v1242 >> 56) + (v1230 & 0xFFFFFFFFFFFFFFLL);
  v1244 = 2 * (v1238 & 0xFFFFFFFFFFFFFFLL);
  v1245 = 2 * (v1240 & 0xFFFFFFFFFFFFFFLL);
  v1246 = v1233 & 0xFFFFFFFFFFFFFFLL;
  v1247 = v1238 & 0xFFFFFFFFFFFFFFLL;
  v1249 = ((v1238 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1245
         + v1243 * (unsigned __int128)(2 * ((unint64_t)v1233 & 0xFFFFFFFFFFFFFFLL))) >> 64;
  v1248 = (v1238 & 0xFFFFFFFFFFFFFFLL) * v1245 + v1243 * 2 * (v1233 & 0xFFFFFFFFFFFFFFLL);
  v1250 = v1240 & 0xFFFFFFFFFFFFFFLL;
  v1251 = (v1243 * (unsigned __int128)(unint64_t)v1244
         + (unint64_t)v1250 * (unsigned __int128)(unint64_t)v1250
         + ((v1243 * (unsigned __int128)v1243) >> 16)) >> 64;
  v1252 = v1243 * v1244 + v1250 * v1250 + ((v1243 * (unsigned __int128)v1243) >> 16);
  v1253 = (unint64_t)(unsigned __int16)(((v1242 >> 56) + v1230) * ((v1242 >> 56) + v1230)) << 40;
  v20 = __CFADD__(v1248, v1253);
  v1254 = v1248 + v1253;
  if (v20)
    ++v1249;
  v1256 = ((unint64_t)v1246 * (unsigned __int128)(unint64_t)v1244
         - v1243 * (unsigned __int128)(unint64_t)v1245) >> 64;
  v1255 = v1246 * v1244 - v1243 * v1245;
  v1257 = (unint64_t)(unsigned __int16)v1252 << 40;
  v20 = __CFADD__(v1255, v1257);
  v1258 = v1255 + v1257;
  if (v20)
    ++v1256;
  *((_QWORD *)&v1259 + 1) = v1251;
  *(_QWORD *)&v1259 = v1252;
  v1260 = (unint64_t)v1247 * (unsigned __int128)(unint64_t)v1247
        - v1243 * (unsigned __int128)v1243
        + (unint64_t)v1246 * (unsigned __int128)(unint64_t)v1245
        + (v1259 >> 16)
        + __PAIR128__(0x7FFFFFFFFFFFFF80, ((v1243 * v1245) << 40) & 0xFFFE0000000000);
  v1261 = __PAIR128__(v1249, v1254) + ((v1243 * (unsigned __int128)(unint64_t)v1245) >> 16) + (v1260 >> 56);
  v1262 = (v1261 >> 16) & 0xFFFF0000000000;
  v20 = __CFADD__(v1258, v1262);
  v1263 = v1258 + v1262;
  if (v20)
    ++v1256;
  v1264 = v1261 >> 56;
  v20 = __CFADD__(v1252, v1264);
  v1265 = v1252 + v1264;
  v1266 = (v1260 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v1261 + 1) >> 8);
  v1267 = (unint64_t)v1246 * (unsigned __int128)(unint64_t)v1246
        - __PAIR128__(HIBYTE(*((_QWORD *)&v1261 + 1)) + (unint64_t)v20 + v1251, v1265)
        + __PAIR128__(0x8000000000000000, 0x8000);
  v1269 = __PAIR128__(HIBYTE(*((_QWORD *)&v1267 + 1))+ (unint64_t)__CFADD__(v1263, (unint64_t)(v1267 >> 56))+ v1256, v1263 + (unint64_t)(v1267 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
  v1268 = (__PAIR128__(HIBYTE(*((_QWORD *)&v1267 + 1))+ (unint64_t)__CFADD__(v1263, (unint64_t)(v1267 >> 56))+ v1256, v1263 + (unint64_t)(v1267 >> 56))+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
  v1270 = (__int128)__PAIR128__(v1268, v1269) >> 56;
  v1271 = v1266 + v1270;
  v1272 = HIBYTE(v1268);
  if (__CFADD__(v1266, v1270))
    ++v1272;
  *((_QWORD *)&v1273 + 1) = v1272;
  *(_QWORD *)&v1273 = v1266 + v1270;
  v1274 = (v1273 >> 56) + (v1261 & 0xFFFFFFFFFFFFFFLL);
  if (a3)
  {
    v1275 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFLL;
    v1276 = (*(__int128 *)a2 >> 56) & 0xFFFFFFFFFFFFFFLL;
    v1277 = (*(__int128 *)(a2 + 8) >> 48) & 0xFFFFFFFFFFFFFFLL;
    v1278 = *(_OWORD *)(a2 + 16);
    v1279 = (v1278 >> 40) & 0xFFFFFFFFFFFFFFLL;
    v1280 = ((v1267 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1275) >> 64;
    v1281 = v1269 & 0xFFFFFFFFFFFFFFLL;
    v1282 = (v1267 & 0xFFFFFFFFFFFFFFLL) * v1276;
    v1283 = v1266 + v1270;
    v1284 = (v1271 & 0xFFFFFFFFFFFFFFLL) * v1279 + v1274 * v1277;
    v1285 = ((v1271 & 0xFFFFFFFFFFFFFFLL) * ((v1278 >> 40) & 0xFFFFFFFFFFFFFFLL)
           + v1274 * ((*(__int128 *)(a2 + 8) >> 48) & (unsigned __int128)0xFFFFFFFFFFFFFFLL)) >> 64;
    v1286 = v1274 * v1279;
    v1287 = (v1271 & 0xFFFFFFFFFFFFFFLL) * ((*(__int128 *)(a2 + 8) >> 48) & 0xFFFFFFFFFFFFFFLL)
          + v1274 * ((*(__int128 *)a2 >> 56) & 0xFFFFFFFFFFFFFFLL)
          + (v1269 & 0xFFFFFFFFFFFFFFLL) * ((v1278 >> 40) & 0xFFFFFFFFFFFFFFLL)
          + ((v1274 * ((v1278 >> 40) & (unsigned __int128)0xFFFFFFFFFFFFFFLL)) >> 16);
    v1288 = (v1269 & 0xFFFFFFFFFFFFFFLL) * v1276;
    v20 = __CFADD__((v1271 & 0xFFFFFFFFFFFFFFLL) * v1275, v1288);
    v1289 = (v1271 & 0xFFFFFFFFFFFFFFLL) * v1275 + v1288;
    v1290 = ((v1271 & 0xFFFFFFFFFFFFFFLL) * ((*(__int128 *)a2 >> 56) & (unsigned __int128)0xFFFFFFFFFFFFFFLL)) >> 64;
    v1291 = (v1271 & 0xFFFFFFFFFFFFFFLL) * v1276;
    v1292 = (__PAIR128__((((v1269 & 0xFFFFFFFFFFFFFFLL) * ((*(__int128 *)a2 >> 56) & 0xFFFFFFFFFFFFFFLL)) >> 64)+ v20+ (((v1271 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1275) >> 64), v1289)+ (v1267 & 0xFFFFFFFFFFFFFFLL) * ((*(__int128 *)(a2 + 8) >> 48) & 0xFFFFFFFFFFFFFFLL)) >> 64;
    v1293 = v1289 + (v1267 & 0xFFFFFFFFFFFFFFLL) * v1277;
    v1294 = ((v1267 & 0xFFFFFFFFFFFFFFLL) * ((v1278 >> 40) & (unsigned __int128)0xFFFFFFFFFFFFFFLL)) >> 64;
    v1295 = (v1267 & 0xFFFFFFFFFFFFFFLL) * v1279;
    v1296 = (v1267 & 0xFFFFFFFFFFFFFFLL) * v1275;
    v1298 = __PAIR128__(v1292, v1293)
          - __PAIR128__((v1274 * ((v1278 >> 40) & (unsigned __int128)0xFFFFFFFFFFFFFFLL)) >> 64, v1286);
    v1297 = (__PAIR128__(v1292, v1293)
           - __PAIR128__((v1274 * ((v1278 >> 40) & (unsigned __int128)0xFFFFFFFFFFFFFFLL)) >> 64, v1286)) >> 64;
    v1299 = (unint64_t)(unsigned __int16)v1284 << 40;
    if (__CFADD__((_QWORD)v1298, v1299))
      ++v1297;
    v1300 = __PAIR128__(v1297, (unint64_t)v1298 + v1299) + (v1287 >> 16);
    v1301 = ((unint64_t)v1281 * ((*(__int128 *)(a2 + 8) >> 48) & (unsigned __int128)0xFFFFFFFFFFFFFFLL)) >> 64;
    v1302 = v1281 * v1277;
    v1303 = v1281 * v1275;
    v1305 = __PAIR128__(v1290, v1291)
          + v1274 * (unsigned __int128)(unint64_t)v1275
          + __PAIR128__(v1301, v1302)
          + __PAIR128__(v1294, v1295);
    v1304 = *((_QWORD *)&v1305 + 1);
    v1306 = (unint64_t)(unsigned __int16)v1286 << 40;
    v20 = __CFADD__((_QWORD)v1305, v1306);
    v1307 = v1305 + v1306;
    *((_QWORD *)&v1309 + 1) = v1285;
    *(_QWORD *)&v1309 = v1284;
    v1308 = v1309 >> 16;
    if (v20)
      v1304 = *((_QWORD *)&v1305 + 1) + 1;
    *((_QWORD *)&v1310 + 1) = *((_QWORD *)&v1300 + 1) + 0x7FFFFFFFFFFFFF80;
    *(_QWORD *)&v1310 = v1300;
    v1311 = __PAIR128__(v1304, v1307) + __PAIR128__(v1285 >> 16, v1308) + (v1310 >> 56);
    v1312 = (__PAIR128__(v1280, v1296) - (v1287 + (v1311 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000)) >> 64;
    v1271 = v1283;
    v1314 = v1303
          + v1282
          - v1284
          + ((unint64_t)(unsigned __int16)v1287 << 40)
          + (((__int128)v1311 >> 16) & 0xFFFF0000000000);
    v1316 = __PAIR128__(v1280, v1296) - (v1287 + (v1311 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000);
    v1313 = (v1300 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v1311 + 1) >> 8);
    v1315 = v1316 >> 56;
    v1318 = v1314 + v1315 - 0x80000000000000;
    v1317 = (__PAIR128__(HIBYTE(v1312) + __CFADD__(v1314, v1315) + *((_QWORD *)&v1311 + 1), v1314 + v1315)
           + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
    v1319 = v1316 & 0xFFFFFFFFFFFFFFLL;
    v1320 = HIBYTE(v1317);
    v1321 = (__int128)__PAIR128__(v1317, v1318) >> 56;
    v20 = __CFADD__(v1313, v1321);
    v1322 = v1313 + v1321;
    if (v20)
      ++v1320;
    *((_QWORD *)&v1323 + 1) = v1320;
    *(_QWORD *)&v1323 = v1322;
    v1324 = (v1323 >> 56) + (v1311 & 0xFFFFFFFFFFFFFFLL);
    v1325 = v1319 - HIBYTE(v1324);
    v1326 = (v1318 & 0xFFFFFFFFFFFFFFLL) + (HIBYTE(v1324) << 40);
    v1327 = ((((v1318 & 0xFFFF0000000000 | 0xFFFFFFFFFFLL) & v1322 & v1324) + 1) | ((v1319
                                                                                     + (v1318 & 0xFFFFFFFFFFLL)
                                                                                     - 1) >> 63)) & 0xFFFFFFFFFFFFFFLL;
    v1328 = 0xFFFFFFFFFFFFFFLL;
    if (!v1327)
      v1328 = 0;
    v1329 = v1328 & v1324;
    v1330 = v1328 & v1322;
    v1331 = 0x1FFFFFFFFFFFFFFLL;
    if (!v1327)
      v1331 = 0xFFFFFFFFFFLL;
    v1332 = v1325 + ((v1327 - 1) >> 63);
    v1333 = v1331 & v1326;
    v1334 = v1332 + ((unint64_t)v1332 >> 63 << 56);
    v1335 = v1333 + (v1332 >> 63);
    v1336 = v1330 + (v1335 >> 56);
    *a3 = v1334 | (v1335 << 56);
    a3[1] = ((unint64_t)v1335 >> 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v1336 << 48);
    v1337 = v1329 + (v1336 >> 56);
    a3[2] = ((unint64_t)v1336 >> 16) & 0xFFFFFFFFFFLL | ((unint64_t)v1337 << 40);
    a3[3] = v1337 >> 24;
  }
  if (a4)
  {
    v1338 = ((v1267 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1246) >> 64;
    v1339 = (v1267 & 0xFFFFFFFFFFFFFFLL) * v1246;
    v1491 = ((v1267 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1247) >> 64;
    v1484 = ((v1269 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1246) >> 64;
    v1486 = (v1267 & 0xFFFFFFFFFFFFFFLL) * v1247;
    v1340 = (v1269 & 0xFFFFFFFFFFFFFFLL) * v1246;
    v1341 = ((v1267 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1250) >> 64;
    v1342 = (v1267 & 0xFFFFFFFFFFFFFFLL) * v1250;
    v1343 = ((v1269 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1247) >> 64;
    v1344 = (v1269 & 0xFFFFFFFFFFFFFFLL) * v1247;
    v1345 = v1271 & 0xFFFFFFFFFFFFFFLL;
    v1346 = ((v1271 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1246) >> 64;
    v1347 = (v1271 & 0xFFFFFFFFFFFFFFLL) * v1246;
    v1348 = ((v1267 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)v1243) >> 64;
    v1349 = (v1267 & 0xFFFFFFFFFFFFFFLL) * v1243;
    v1350 = ((v1269 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1250) >> 64;
    v1351 = (v1269 & 0xFFFFFFFFFFFFFFLL) * v1250;
    v1352 = ((unint64_t)v1345 * (unsigned __int128)(unint64_t)v1247) >> 64;
    v1353 = v1345 * v1247;
    v1354 = (v1274 * (unsigned __int128)(unint64_t)v1246) >> 64;
    v1355 = v1274 * v1246;
    v1356 = (unint64_t)v1345 * (unsigned __int128)(unint64_t)v1250
          + (v1269 & 0xFFFFFFFFFFFFFFLL) * v1243
          + v1274 * (unsigned __int128)(unint64_t)v1247;
    v1357 = v1274 * (unsigned __int128)(unint64_t)v1250 + (unint64_t)v1345 * (unsigned __int128)v1243;
    v1358 = v1274 * v1243;
    v1359 = (v1274 * (unsigned __int128)v1243) >> 64;
    v1360 = (v1356 + ((v1274 * (unsigned __int128)v1243) >> 16)) >> 64;
    v1361 = v1356 + ((v1274 * (unsigned __int128)v1243) >> 16);
    v1363 = *(_OWORD *)(a2 + 88);
    v1362 = v1363 >> 40;
    *((_QWORD *)&v1363 + 1) = v1363;
    *(_QWORD *)&v1363 = *(_QWORD *)(a2 + 80);
    v1364 = v1363 >> 48;
    *((_QWORD *)&v1363 + 1) = v1363;
    *(_QWORD *)&v1363 = *(_QWORD *)(a2 + 72);
    v1365 = v1363 & 0xFFFFFFFFFFFFFFLL;
    v1366 = (v1363 >> 56) & 0xFFFFFFFFFFFFFFLL;
    v1367 = v1364 & 0xFFFFFFFFFFFFFFLL;
    v1368 = v1362 & 0xFFFFFFFFFFFFFFLL;
    v1369 = v1342;
    v1370 = (unint64_t)(unsigned __int16)v1358 << 40;
    v1372 = v1369 + v1344 + v1347;
    v1371 = (__PAIR128__(v1341, v1369) + __PAIR128__(v1343, v1344) + __PAIR128__(v1346, v1347)) >> 64;
    v1373 = (unint64_t)(unsigned __int16)v1357 << 40;
    v1374 = (__PAIR128__(v1371, v1372) - __PAIR128__(v1359, v1358)) >> 64;
    v1375 = (__int128)__PAIR128__(v1360, v1361) >> 16;
    v1376 = v1372 - v1358 + v1373;
    if (__CFADD__(v1372 - v1358, v1373))
      ++v1374;
    v20 = __CFADD__(v1376, v1375);
    v1377 = v1376 + v1375;
    v1378 = (unint64_t)(unsigned __int16)v1361 << 40;
    v1379 = ((v1360 >> 16) + v20 + v1374 + 0x7FFFFFFFFFFFFF80) >> 56;
    *((_QWORD *)&v1381 + 1) = (v1360 >> 16) + v20 + v1374 + 0x7FFFFFFFFFFFFF80;
    *(_QWORD *)&v1381 = v1377;
    v1380 = v1381 >> 56;
    v1382 = __PAIR128__(v1348 + (unint64_t)__CFADD__(v1351, v1349) + v1350, v1351 + v1349)
          + __PAIR128__(v1352, v1353)
          + __PAIR128__(v1354, v1355);
    v20 = __CFADD__((_QWORD)v1382, v1370);
    v1383 = v1382 + v1370;
    if (v20)
      v1384 = *((_QWORD *)&v1382 + 1) + 1;
    else
      v1384 = (__PAIR128__(v1348 + (unint64_t)__CFADD__(v1351, v1349) + v1350, v1351 + v1349)
             + __PAIR128__(v1352, v1353)
             + __PAIR128__(v1354, v1355)) >> 64;
    v1385 = __PAIR128__(v1384, v1383) + (v1357 >> 16) + __PAIR128__(v1379, v1380);
    v1386 = (v1377 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v1385 + 1) >> 8);
    v1387 = (v1385 >> 16) & 0xFFFF0000000000;
    v1388 = __PAIR128__(v1338, v1339)
          - (__PAIR128__(v1360, v1361)
           + ((unsigned __int128)v1385 >> 56))
          + __PAIR128__(0x8000000000000000, 0x8000);
    v1390 = (__PAIR128__(v1484, v1486) + __PAIR128__(v1491, v1340) - v1357) >> 64;
    v1389 = v1486 + v1340 - v1357;
    v20 = __CFADD__(v1389, v1378);
    v1391 = v1389 + v1378;
    if (v20)
      ++v1390;
    v20 = __CFADD__(v1391, v1387);
    v1392 = v1391 + v1387;
    if (v20)
      ++v1390;
    v1393 = __PAIR128__(v1390, v1392) + (v1388 >> 56) + __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000);
    v1394 = v1393 >> 56;
    v1395 = v1386 + v1394;
    if (__CFADD__(v1386, v1394))
      v1396 = HIBYTE(*((_QWORD *)&v1393 + 1)) + 1;
    else
      v1396 = HIBYTE(*((_QWORD *)&v1393 + 1));
    *((_QWORD *)&v1397 + 1) = v1396;
    *(_QWORD *)&v1397 = v1395;
    v1398 = (v1397 >> 56) + (v1385 & 0xFFFFFFFFFFFFFFLL);
    v1399 = ((v1388 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1365) >> 64;
    v1400 = (v1388 & 0xFFFFFFFFFFFFFFLL) * v1365;
    v1401 = ((v1393 & 0xFFFFFFFFFFFFFFLL) * (unsigned __int128)(unint64_t)v1365) >> 64;
    v1402 = (v1393 & 0xFFFFFFFFFFFFFFLL) * v1365;
    v1403 = v1395 & 0xFFFFFFFFFFFFFFLL;
    v1404 = ((unint64_t)v1403 * (unsigned __int128)(unint64_t)v1365) >> 64;
    v1405 = v1403 * v1365;
    v1406 = (v1398 * (unsigned __int128)(unint64_t)v1365) >> 64;
    v1407 = v1398 * v1365;
    v1408 = ((unint64_t)v1403 * (unsigned __int128)v1366) >> 64;
    v1409 = v1403 * v1366;
    v1410 = (unint64_t)v1403 * (unsigned __int128)(unint64_t)v1367
          + v1398 * (unsigned __int128)v1366
          + (v1393 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1368;
    v1411 = (unint64_t)v1403 * (unsigned __int128)(unint64_t)v1368
          + v1398 * (unsigned __int128)(unint64_t)v1367;
    v1412 = ((v1388 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1368) >> 64;
    v1413 = (v1388 & 0xFFFFFFFFFFFFFFLL) * v1368;
    v1414 = v1398 * v1368;
    v1415 = (v1398 * (unsigned __int128)(unint64_t)v1368) >> 64;
    *((_QWORD *)&v1397 + 1) = v1415;
    *(_QWORD *)&v1397 = v1414;
    v1416 = v1410 + ((unsigned __int128)v1397 >> 16);
    v1418 = v1405 + (v1393 & 0xFFFFFFFFFFFFFFLL) * v1366 + (v1388 & 0xFFFFFFFFFFFFFFLL) * v1367 - v1414;
    v1417 = (__PAIR128__(v1404, v1405)
           + (v1393 & 0xFFFFFFFFFFFFFFLL) * v1366
           + (v1388 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1367
           - __PAIR128__(v1415, v1414)) >> 64;
    v1419 = (unint64_t)(unsigned __int16)v1411 << 40;
    if (__CFADD__(v1418, v1419))
      ++v1417;
    v1420 = __PAIR128__(v1417, v1418 + v1419) + (v1416 >> 16);
    v1422 = __PAIR128__(v1408, v1409)
          + __PAIR128__(v1406, v1407)
          + (v1393 & 0xFFFFFFFFFFFFFFLL) * (unint64_t)v1367
          + __PAIR128__(v1412, v1413);
    v1421 = *((_QWORD *)&v1422 + 1);
    v1423 = (unint64_t)(unsigned __int16)v1414 << 40;
    v20 = __CFADD__((_QWORD)v1422, v1423);
    v1424 = v1422 + v1423;
    if (v20)
      v1421 = *((_QWORD *)&v1422 + 1) + 1;
    *((_QWORD *)&v1425 + 1) = *((_QWORD *)&v1420 + 1) + 0x7FFFFFFFFFFFFF80;
    *(_QWORD *)&v1425 = v1418 + v1419 + (v1416 >> 16);
    v1426 = __PAIR128__(v1421, v1424) + (v1411 >> 16) + (v1425 >> 56);
    v1427 = (__PAIR128__(v1401, v1402) + (v1388 & 0xFFFFFFFFFFFFFFLL) * v1366 - v1411) >> 64;
    v1428 = v1402 + (v1388 & 0xFFFFFFFFFFFFFFLL) * v1366 - v1411;
    v1429 = (unint64_t)(unsigned __int16)v1416 << 40;
    v20 = __CFADD__(v1428, v1429);
    v1430 = v1428 + v1429;
    v1431 = (v1420 & 0xFFFFFFFFFFFFFFLL) + (*((_QWORD *)&v1426 + 1) >> 8);
    v1432 = ((__int128)v1426 >> 16) & 0xFFFF0000000000;
    if (v20)
      ++v1427;
    v20 = __CFADD__(v1430, v1432);
    v1433 = v1430 + v1432;
    v1434 = (__int128)(__PAIR128__(v1399, v1400) - (v1416 + (v1426 >> 56)) + __PAIR128__(0x8000000000000000, 0x8000)) >> 56;
    if (v20)
      ++v1427;
    v1436 = (__PAIR128__(((unint64_t)((__PAIR128__(v1399, v1400)- (v1416+ (v1426 >> 56))+ __PAIR128__(0x8000000000000000, 0x8000)) >> 64) >> 56)+ __CFADD__(v1433, v1434)+ v1427, v1433 + v1434)+ __PAIR128__(0x7FFFFFFFFFFFFF7FLL, 0xFF80000000000000)) >> 64;
    v1435 = v1433 + v1434 - 0x80000000000000;
    v1437 = (v1400 - (v1416 + (v1426 >> 56)) + 0x8000) & 0xFFFFFFFFFFFFFFLL;
    v1438 = HIBYTE(v1436);
    v1439 = (__int128)__PAIR128__(v1436, v1435) >> 56;
    v20 = __CFADD__(v1431, v1439);
    v1440 = v1431 + v1439;
    if (v20)
      ++v1438;
    *((_QWORD *)&v1441 + 1) = v1438;
    *(_QWORD *)&v1441 = v1440;
    v1442 = (v1441 >> 56) + (v1426 & 0xFFFFFFFFFFFFFFLL);
    v1443 = v1437 - HIBYTE(v1442);
    v1444 = (v1435 & 0xFFFFFFFFFFFFFFLL) + (HIBYTE(v1442) << 40);
    v1445 = ((((v1435 & 0xFFFF0000000000 | 0xFFFFFFFFFFLL) & v1440 & v1442) + 1) | ((v1437
                                                                                     + (v1435 & 0xFFFFFFFFFFLL)
                                                                                     - 1) >> 63)) & 0xFFFFFFFFFFFFFFLL;
    v1446 = 0xFFFFFFFFFFFFFFLL;
    if (!v1445)
      v1446 = 0;
    v1447 = v1446 & v1442;
    v1448 = v1446 & v1440;
    v1449 = 0x1FFFFFFFFFFFFFFLL;
    if (!v1445)
      v1449 = 0xFFFFFFFFFFLL;
    v1450 = v1443 + ((v1445 - 1) >> 63);
    v1451 = v1449 & v1444;
    v1452 = v1450 + ((unint64_t)v1450 >> 63 << 56);
    v1453 = v1451 + (v1450 >> 63);
    v1454 = v1448 + (v1453 >> 56);
    *a4 = v1452 | (v1453 << 56);
    a4[1] = ((unint64_t)v1453 >> 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)(unsigned __int16)v1454 << 48);
    v1455 = v1447 + (v1454 >> 56);
    a4[2] = ((unint64_t)v1454 >> 16) & 0xFFFFFFFFFFLL | ((unint64_t)v1455 << 40);
    a4[3] = v1455 >> 24;
  }
  return 1;
}

