uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::VideoTrackInterface,webrtc::VideoTrackInterface::ContentHint>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(uint64_t (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v4 + v2);
  *(_DWORD *)(v1 + 24) = v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,webrtc::VideoTrackInterface::ContentHint>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  unsigned int *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(unsigned int **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::VideoTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *, _QWORD);
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *, _QWORD))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = *(_QWORD **)(*a1 + 32);
  v5 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *, _QWORD))(*v5 + v2);
  v2(v5, *v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 40));
  *(_BYTE *)(v1 + 153) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 104));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 40));
}

uint64_t rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>>::~RefCountedObject(_QWORD *a1)
{
  webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::~AudioTrackProxyWithInternal(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::kind(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::id(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::enabled(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  char v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F05250;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::AudioTrackInterface,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16 != 0;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::set_enabled(uint64_t a1, char a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, _QWORD);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  char v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  char *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F05260;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, _QWORD))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,BOOL,BOOL>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::state(uint64_t a1)
{
  rtc::Thread *v2;
  uint64_t (*v3)(_QWORD *);
  _QWORD *v4;
  uint64_t v5;
  TimeDelta v6;
  TimeDelta v7;
  char v9;
  char v10;
  __n128 v11;
  __n128 (*v12)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v13)(uint64_t *);
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  pthread_mutex_t v17;
  pthread_cond_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = *(_QWORD *)(a1 + 24);
  v15 = xmmword_208F05270;
  rtc::Event::Event((rtc::Event *)&v17, 0, 0);
  v2 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v2))
  {
    v3 = (uint64_t (*)(_QWORD *))v15;
    v4 = (_QWORD *)(v14 + (*((uint64_t *)&v15 + 1) >> 1));
    if ((BYTE8(v15) & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v4 + v15);
    v5 = v3(v4);
    v16 = v5;
  }
  else
  {
    v11.n128_u64[0] = (unint64_t)&v14;
    v12 = absl::internal_any_invocable::LocalManagerTrivial;
    v13 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ConstMethodCall<webrtc::AudioTrackInterface,webrtc::MediaStreamTrackInterface::TrackState>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v11, &v10, &v9);
    v12(1, &v11, &v11);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v17, v6, v7);
    v5 = v16;
  }
  pthread_mutex_destroy(&v17);
  pthread_cond_destroy(&v18);
  return v5;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::GetSource(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::AddSink(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F05280;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::AudioTrackSinkInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::RemoveSink(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F05290;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::AudioTrackSinkInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::GetSignalLevel(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  uint64_t (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  uint64_t v6;
  TimeDelta v7;
  TimeDelta v8;
  uint64_t v10;
  char v11;
  char v12;
  __n128 v13;
  __n128 (*v14)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v15)(uint64_t *);
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t *v19;
  pthread_mutex_t v20;
  pthread_cond_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v10 = a2;
  v16 = *(_QWORD *)(a1 + 24);
  v17 = xmmword_208F052A0;
  v19 = &v10;
  rtc::Event::Event((rtc::Event *)&v20, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (uint64_t (*)(_QWORD *, uint64_t))v17;
    v5 = (_QWORD *)(v16 + (*((uint64_t *)&v17 + 1) >> 1));
    if ((BYTE8(v17) & 1) != 0)
      v4 = *(uint64_t (**)(_QWORD *, uint64_t))(*v5 + v17);
    v6 = v4(v5, *v19);
    v18 = v6;
  }
  else
  {
    v13.n128_u64[0] = (unint64_t)&v16;
    v14 = absl::internal_any_invocable::LocalManagerTrivial;
    v15 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,BOOL,int *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v13, &v12, &v11);
    v14(1, &v13, &v13);
    v7.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v8.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v20, v7, v8);
    v6 = v18 != 0;
  }
  pthread_mutex_destroy(&v20);
  pthread_cond_destroy(&v21);
  return v6;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::GetAudioProcessor@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  pthread_mutex_t v8;
  pthread_cond_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = xmmword_208F052B0;
  v7 = 0;
  rtc::Event::Event((rtc::Event *)&v8, 0, 0);
  webrtc::MethodCall<webrtc::AudioTrackInterface,webrtc::scoped_refptr<webrtc::AudioProcessorInterface>>::Marshal(*(rtc::Thread **)(a1 + 16), &v5, a2);
  pthread_mutex_destroy(&v8);
  pthread_cond_destroy(&v9);
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F052C0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v3;
  void (*v4)(_QWORD *, uint64_t);
  _QWORD *v5;
  TimeDelta v6;
  TimeDelta v7;
  uint64_t v9;
  char v10;
  char v11;
  __n128 v12;
  __n128 (*v13)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v14)(uint64_t *);
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  pthread_mutex_t v18;
  pthread_cond_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v9 = a2;
  v15 = *(_QWORD *)(a1 + 24);
  v16 = xmmword_208F052D0;
  v17 = &v9;
  rtc::Event::Event((rtc::Event *)&v18, 0, 0);
  v3 = *(rtc::Thread **)(a1 + 16);
  if (rtc::Thread::IsCurrent(v3))
  {
    v4 = (void (*)(_QWORD *, uint64_t))v16;
    v5 = (_QWORD *)(v15 + (*((uint64_t *)&v16 + 1) >> 1));
    if ((BYTE8(v16) & 1) != 0)
      v4 = *(void (**)(_QWORD *, uint64_t))(*v5 + v16);
    v4(v5, *v17);
  }
  else
  {
    v12.n128_u64[0] = (unint64_t)&v15;
    v13 = absl::internal_any_invocable::LocalManagerTrivial;
    v14 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackInterface,void,webrtc::ObserverInterface *>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v3 + 8))(v3, &v12, &v11, &v10);
    v13(1, &v12, &v12);
    v6.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v7.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v18, v6, v7);
  }
  pthread_mutex_destroy(&v18);
  return pthread_cond_destroy(&v19);
}

BOOL rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::RegisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::RegisterObserver(a1 - 8, a2);
}

uint64_t `non-virtual thunk to'webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::UnregisterObserver(uint64_t a1, uint64_t a2)
{
  return webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::UnregisterObserver(a1 - 8, a2);
}

_QWORD *`non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>>::~RefCountedObject(uint64_t a1)
{
  return webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::~AudioTrackProxyWithInternal((_QWORD *)(a1 - 8));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>>::~RefCountedObject(uint64_t a1)
{
  webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::~AudioTrackProxyWithInternal((_QWORD *)(a1 - 8));
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::~AudioTrackProxyWithInternal(_QWORD *a1)
{
  rtc::Thread *v2;
  TimeDelta v3;
  TimeDelta v4;
  uint64_t v5;
  char v7;
  char v8;
  __n128 v9;
  __n128 (*v10)(uint64_t, __n128 *, __n128 *);
  uint64_t (*v11)(uint64_t *);
  _QWORD *v12;
  uint64_t (*v13)(uint64_t);
  uint64_t v14;
  pthread_mutex_t v15;
  pthread_cond_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  *a1 = &unk_24C0BA3B0;
  a1[1] = &unk_24C0BA440;
  v12 = a1;
  v13 = webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::DestroyInternal;
  v14 = 0;
  rtc::Event::Event((rtc::Event *)&v15, 0, 0);
  v2 = (rtc::Thread *)a1[2];
  if (rtc::Thread::IsCurrent(v2))
  {
    v13((uint64_t)v12 + (v14 >> 1));
  }
  else
  {
    v9.n128_u64[0] = (unint64_t)&v12;
    v10 = absl::internal_any_invocable::LocalManagerTrivial;
    v11 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>;
    (*(void (**)(rtc::Thread *, __n128 *, char *, char *))(*(_QWORD *)v2 + 8))(v2, &v9, &v8, &v7);
    v10(1, &v9, &v9);
    v3.var0 = 0x7FFFFFFFFFFFFFFFLL;
    v4.var0 = 3000000;
    rtc::Event::Wait((rtc::Event *)&v15, v3, v4);
  }
  pthread_mutex_destroy(&v15);
  pthread_cond_destroy(&v16);
  v5 = a1[3];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>::DestroyInternal(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::MethodCall<webrtc::AudioTrackProxyWithInternal<webrtc::AudioTrackInterface>,void>::Marshal(rtc::Thread *)::{lambda(void)#1} &&>(uint64_t *a1)
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  _QWORD *v4;

  v1 = *a1;
  v2 = *(void (**)(_QWORD *))(*a1 + 8);
  v3 = *(_QWORD *)(*a1 + 16);
  v4 = (_QWORD *)(*(_QWORD *)*a1 + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(void (**)(_QWORD *))(*v4 + v2);
  v2(v4);
  pthread_mutex_lock((pthread_mutex_t *)(v1 + 32));
  *(_BYTE *)(v1 + 145) = 1;
  pthread_cond_broadcast((pthread_cond_t *)(v1 + 96));
  return pthread_mutex_unlock((pthread_mutex_t *)(v1 + 32));
}

double webrtc::PeerConnectionInterface::IceServer::IceServer(webrtc::PeerConnectionInterface::IceServer *this)
{
  double result;

  *((_DWORD *)this + 24) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_QWORD *)this + 21) = 0;
  return result;
}

std::string *webrtc::PeerConnectionInterface::IceServer::IceServer(std::string *this, const webrtc::PeerConnectionInterface::IceServer *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 *v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 *v26;
  std::string *v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  std::string *v36;
  __int128 v37;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  v5 = *((_QWORD *)a2 + 3);
  v6 = *((_QWORD *)a2 + 4);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_33;
    v9 = (char *)operator new(v7);
    v10 = 0;
    this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v9;
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)&v9[24 * v8];
    do
    {
      while (1)
      {
        v11 = (__int128 *)(v5 + v10);
        v12 = (std::string *)&v9[v10];
        if ((*(char *)(v5 + v10 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
        v10 += 24;
        if (v5 + v10 == v6)
          goto LABEL_10;
      }
      v13 = *v11;
      v12->__r_.__value_.__r.__words[2] = *((_QWORD *)v11 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      v10 += 24;
    }
    while (v5 + v10 != v6);
LABEL_10:
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)&v9[v10];
  }
  v14 = this + 2;
  if ((*((char *)a2 + 71) & 0x80000000) == 0)
  {
    v15 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    v16 = this + 3;
    if ((*((char *)a2 + 95) & 0x80000000) == 0)
      goto LABEL_13;
LABEL_16:
    std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
    LODWORD(this[4].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 24);
    v18 = (std::string *)((char *)this + 104);
    if ((*((char *)a2 + 127) & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_17;
  }
  std::string::__init_copy_ctor_external(v14, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  v16 = this + 3;
  if (*((char *)a2 + 95) < 0)
    goto LABEL_16;
LABEL_13:
  v17 = *(_OWORD *)((char *)a2 + 72);
  v16->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
  *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  LODWORD(this[4].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 24);
  v18 = (std::string *)((char *)this + 104);
  if ((*((char *)a2 + 127) & 0x80000000) == 0)
  {
LABEL_14:
    v19 = *(_OWORD *)((char *)a2 + 104);
    v18->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 15);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
    goto LABEL_18;
  }
LABEL_17:
  std::string::__init_copy_ctor_external(v18, *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
LABEL_18:
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  this[6].__r_.__value_.__r.__words[0] = 0;
  v20 = *((_QWORD *)a2 + 16);
  v21 = *((_QWORD *)a2 + 17);
  v22 = v21 - v20;
  if (v21 != v20)
  {
    v23 = 0xAAAAAAAAAAAAAAABLL * (v22 >> 3);
    if (v23 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_33;
    v24 = (char *)operator new(v22);
    v25 = 0;
    this[5].__r_.__value_.__l.__size_ = (std::string::size_type)v24;
    this[5].__r_.__value_.__r.__words[2] = (std::string::size_type)v24;
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v24[24 * v23];
    do
    {
      while (1)
      {
        v26 = (__int128 *)(v20 + v25);
        v27 = (std::string *)&v24[v25];
        if ((*(char *)(v20 + v25 + 23) & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v27, *(const std::string::value_type **)v26, *((_QWORD *)v26 + 1));
        v25 += 24;
        if (v20 + v25 == v21)
          goto LABEL_24;
      }
      v28 = *v26;
      v27->__r_.__value_.__r.__words[2] = *((_QWORD *)v26 + 2);
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
      v25 += 24;
    }
    while (v20 + v25 != v21);
LABEL_24:
    this[5].__r_.__value_.__r.__words[2] = (std::string::size_type)&v24[v25];
  }
  this[6].__r_.__value_.__l.__size_ = 0;
  this[6].__r_.__value_.__r.__words[2] = 0;
  this[7].__r_.__value_.__r.__words[0] = 0;
  v29 = *((_QWORD *)a2 + 19);
  v30 = *((_QWORD *)a2 + 20);
  v31 = v30 - v29;
  if (v30 == v29)
    return this;
  v32 = 0xAAAAAAAAAAAAAAABLL * (v31 >> 3);
  if (v32 > 0xAAAAAAAAAAAAAAALL)
LABEL_33:
    abort();
  v33 = (char *)operator new(v31);
  v34 = 0;
  this[6].__r_.__value_.__l.__size_ = (std::string::size_type)v33;
  this[6].__r_.__value_.__r.__words[2] = (std::string::size_type)v33;
  this[7].__r_.__value_.__r.__words[0] = (std::string::size_type)&v33[24 * v32];
  do
  {
    while (1)
    {
      v35 = (__int128 *)(v29 + v34);
      v36 = (std::string *)&v33[v34];
      if ((*(char *)(v29 + v34 + 23) & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(v36, *(const std::string::value_type **)v35, *((_QWORD *)v35 + 1));
      v34 += 24;
      if (v29 + v34 == v30)
        goto LABEL_31;
    }
    v37 = *v35;
    v36->__r_.__value_.__r.__words[2] = *((_QWORD *)v35 + 2);
    *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
    v34 += 24;
  }
  while (v29 + v34 != v30);
LABEL_31:
  this[6].__r_.__value_.__r.__words[2] = (std::string::size_type)&v33[v34];
  return this;
}

void webrtc::PeerConnectionInterface::IceServer::~IceServer(webrtc::PeerConnectionInterface::IceServer *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void **v8;
  void **v9;
  void *v10;

  v2 = *((_QWORD *)this + 19);
  if (v2)
  {
    v3 = *((_QWORD *)this + 20);
    v4 = (void *)*((_QWORD *)this + 19);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    v6 = *((_QWORD *)this + 17);
    v7 = (void *)*((_QWORD *)this + 16);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v6 -= 24;
      }
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 16);
    }
    *((_QWORD *)this + 17) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 127) < 0)
  {
    operator delete(*((void **)this + 13));
    if ((*((char *)this + 95) & 0x80000000) == 0)
    {
LABEL_19:
      if ((*((char *)this + 71) & 0x80000000) == 0)
        goto LABEL_20;
      goto LABEL_25;
    }
  }
  else if ((*((char *)this + 95) & 0x80000000) == 0)
  {
    goto LABEL_19;
  }
  operator delete(*((void **)this + 9));
  if ((*((char *)this + 71) & 0x80000000) == 0)
  {
LABEL_20:
    v8 = (void **)*((_QWORD *)this + 3);
    if (!v8)
      goto LABEL_21;
    goto LABEL_26;
  }
LABEL_25:
  operator delete(*((void **)this + 6));
  v8 = (void **)*((_QWORD *)this + 3);
  if (!v8)
  {
LABEL_21:
    if ((*((char *)this + 23) & 0x80000000) == 0)
      return;
LABEL_28:
    operator delete(*(void **)this);
    return;
  }
LABEL_26:
  v9 = (void **)*((_QWORD *)this + 4);
  if (v9 == v8)
  {
    *((_QWORD *)this + 4) = v8;
    operator delete(v8);
    if (*((char *)this + 23) < 0)
      goto LABEL_28;
  }
  else
  {
    do
    {
      if (*((char *)v9 - 1) < 0)
        operator delete(*(v9 - 3));
      v9 -= 3;
    }
    while (v9 != v8);
    v10 = (void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 4) = v8;
    operator delete(v10);
    if (*((char *)this + 23) < 0)
      goto LABEL_28;
  }
}

double webrtc::PeerConnectionInterface::RTCConfiguration::RTCConfiguration(webrtc::PeerConnectionInterface::RTCConfiguration *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 3;
  *((_DWORD *)this + 8) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_QWORD *)((char *)this + 61) = 0;
  *((_DWORD *)this + 18) = 5;
  *((_BYTE *)this + 76) = 0;
  *((_BYTE *)this + 80) = 0;
  *((_BYTE *)this + 84) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 200;
  *((_BYTE *)this + 100) = 0;
  *(_OWORD *)((char *)this + 104) = xmmword_208F171A0;
  *((_BYTE *)this + 120) = 0;
  *((_BYTE *)this + 124) = 1;
  result = 0.0;
  *((_DWORD *)this + 32) = 65537;
  *((_BYTE *)this + 132) = 0;
  *((_DWORD *)this + 34) = 1000;
  *((_BYTE *)this + 140) = 0;
  *((_DWORD *)this + 36) = 5000;
  *((_BYTE *)this + 148) = 0;
  *((_DWORD *)this + 38) = 0;
  *((_DWORD *)this + 39) = 0x10000;
  *((_BYTE *)this + 160) = 0;
  *((_BYTE *)this + 164) = 0;
  *((_BYTE *)this + 168) = 0;
  *((_BYTE *)this + 172) = 0;
  *((_BYTE *)this + 176) = 0;
  *((_BYTE *)this + 180) = 0;
  *((_BYTE *)this + 184) = 0;
  *((_BYTE *)this + 188) = 0;
  *((_BYTE *)this + 192) = 0;
  *((_BYTE *)this + 196) = 0;
  *((_BYTE *)this + 200) = 0;
  *((_BYTE *)this + 204) = 0;
  *((_BYTE *)this + 208) = 0;
  *((_BYTE *)this + 212) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_BYTE *)this + 224) = 0;
  *((_BYTE *)this + 228) = 0;
  *((_DWORD *)this + 58) = 1;
  *((_WORD *)this + 118) = 0;
  *((_WORD *)this + 121) = 256;
  *((_BYTE *)this + 276) = 0;
  *((_BYTE *)this + 280) = 0;
  *((_BYTE *)this + 284) = 0;
  *((_BYTE *)this + 288) = 0;
  *((_BYTE *)this + 336) = 0;
  *((_BYTE *)this + 344) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_BYTE *)this + 272) = 0;
  *((_QWORD *)this + 33) = 0;
  *(_OWORD *)((char *)this + 292) = 0u;
  *(_OWORD *)((char *)this + 308) = 0u;
  *(_QWORD *)((char *)this + 324) = 0;
  return result;
}

webrtc::PeerConnectionInterface::RTCConfiguration *webrtc::PeerConnectionInterface::RTCConfiguration::RTCConfiguration(webrtc::PeerConnectionInterface::RTCConfiguration *this, const webrtc::PeerConnectionInterface::RTCConfiguration *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int **v11;
  unsigned int **v12;
  int64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  __int128 v36;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = v5 - *(_QWORD *)a2;
  if (v5 != *(_QWORD *)a2)
  {
    v7 = 0x2E8BA2E8BA2E8BA3 * (v6 >> 4);
    if (v7 >= 0x1745D1745D1745ELL)
      goto LABEL_25;
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = v8;
    *((_QWORD *)this + 2) = &v8[176 * v7];
    do
    {
      webrtc::PeerConnectionInterface::IceServer::IceServer((std::string *)&v8[v9], (const webrtc::PeerConnectionInterface::IceServer *)(v4 + v9));
      v9 += 176;
    }
    while (v4 + v9 != v5);
    *((_QWORD *)this + 1) = &v8[v9];
  }
  v10 = *((_QWORD *)a2 + 3);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 8);
  *((_QWORD *)this + 3) = v10;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 5) = 0;
  v11 = (unsigned int **)*((_QWORD *)a2 + 5);
  v12 = (unsigned int **)*((_QWORD *)a2 + 6);
  v13 = (char *)v12 - (char *)v11;
  if (v12 != v11)
  {
    if (v13 < 0)
      goto LABEL_25;
    v14 = v13 >> 3;
    v15 = operator new(v13);
    *((_QWORD *)this + 5) = v15;
    *((_QWORD *)this + 6) = v15;
    *((_QWORD *)this + 7) = &v15[v14];
    do
    {
      v16 = *v11;
      *v15 = *v11;
      if (v16)
      {
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      ++v11;
      ++v15;
    }
    while (v11 != v12);
    *((_QWORD *)this + 6) = v15;
  }
  v18 = *((_OWORD *)a2 + 4);
  v19 = *((_OWORD *)a2 + 6);
  *((_OWORD *)this + 5) = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 6) = v19;
  *((_OWORD *)this + 4) = v18;
  v20 = *((_OWORD *)a2 + 7);
  v21 = *((_OWORD *)a2 + 8);
  v22 = *((_OWORD *)a2 + 10);
  *((_OWORD *)this + 9) = *((_OWORD *)a2 + 9);
  *((_OWORD *)this + 10) = v22;
  *((_OWORD *)this + 7) = v20;
  *((_OWORD *)this + 8) = v21;
  v23 = *((_OWORD *)a2 + 11);
  v24 = *((_OWORD *)a2 + 12);
  v25 = *((_OWORD *)a2 + 13);
  *(_OWORD *)((char *)this + 221) = *(_OWORD *)((char *)a2 + 221);
  *((_OWORD *)this + 12) = v24;
  *((_OWORD *)this + 13) = v25;
  *((_OWORD *)this + 11) = v23;
  *((_BYTE *)this + 237) = 0;
  *((_BYTE *)this + 242) = 0;
  if (*((_BYTE *)a2 + 242))
  {
    *(_DWORD *)((char *)this + 237) = 65537;
    *((_BYTE *)this + 241) = 0;
    *(_DWORD *)((char *)this + 237) = *(_DWORD *)((char *)a2 + 237);
    *((_BYTE *)this + 241) = *((_BYTE *)a2 + 241);
    *((_BYTE *)this + 242) = 1;
  }
  *((_BYTE *)this + 243) = *((_BYTE *)a2 + 243);
  v26 = (std::string *)((char *)this + 248);
  if (*((char *)a2 + 271) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *((const std::string::value_type **)a2 + 31), *((_QWORD *)a2 + 32));
  }
  else
  {
    v27 = *(_OWORD *)((char *)a2 + 248);
    *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
  }
  v28 = *((_QWORD *)a2 + 36);
  *((_OWORD *)this + 17) = *((_OWORD *)a2 + 17);
  *((_QWORD *)this + 36) = v28;
  *((_QWORD *)this + 37) = 0;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  v29 = *((_QWORD *)a2 + 37);
  v30 = *((_QWORD *)a2 + 38);
  v31 = v30 - v29;
  if (v30 != v29)
  {
    v32 = 0xCCCCCCCCCCCCCCCDLL * (v31 >> 3);
    if (v32 < 0x666666666666667)
    {
      v33 = (char *)operator new(v31);
      v34 = 0;
      *((_QWORD *)this + 37) = v33;
      *((_QWORD *)this + 38) = v33;
      *((_QWORD *)this + 39) = &v33[40 * v32];
      do
      {
        v35 = &v33[v34];
        *(_QWORD *)v35 = &unk_24C0ACDA0;
        *((_DWORD *)v35 + 2) = *(_DWORD *)(v29 + v34 + 8);
        *(_OWORD *)(v35 + 12) = *(_OWORD *)(v29 + v34 + 12);
        *((_DWORD *)v35 + 8) = *(_DWORD *)(v29 + v34 + 32);
        v34 += 40;
      }
      while (v29 + v34 != v30);
      *((_QWORD *)this + 38) = &v33[v34];
      goto LABEL_24;
    }
LABEL_25:
    abort();
  }
LABEL_24:
  v36 = *((_OWORD *)a2 + 20);
  *(_OWORD *)((char *)this + 329) = *(_OWORD *)((char *)a2 + 329);
  *((_OWORD *)this + 20) = v36;
  return this;
}

void webrtc::PeerConnectionInterface::RTCConfiguration::~RTCConfiguration(webrtc::PeerConnectionInterface::RTCConfiguration *this)
{
  void *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  void *v11;
  char *v12;
  char *v13;

  v2 = (void *)*((_QWORD *)this + 37);
  if (v2)
  {
    *((_QWORD *)this + 38) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 271) < 0)
  {
    operator delete(*((void **)this + 31));
    v3 = (char *)*((_QWORD *)this + 5);
    if (!v3)
    {
LABEL_5:
      v4 = *(char **)this;
      if (!*(_QWORD *)this)
        return;
      goto LABEL_19;
    }
  }
  else
  {
    v3 = (char *)*((_QWORD *)this + 5);
    if (!v3)
      goto LABEL_5;
  }
  v5 = (char *)*((_QWORD *)this + 6);
  if (v5 == v3)
  {
    *((_QWORD *)this + 6) = v3;
    operator delete(v3);
    v4 = *(char **)this;
    if (!*(_QWORD *)this)
      return;
    goto LABEL_19;
  }
  do
  {
    v7 = *((_QWORD *)v5 - 1);
    v5 -= 8;
    v6 = v7;
    if (v7)
    {
      do
      {
        v8 = __ldaxr((unsigned int *)v6);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, (unsigned int *)v6));
      if (!v9)
      {
        v10 = *(_QWORD *)(v6 + 8);
        *(_QWORD *)(v6 + 8) = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        MEMORY[0x20BD0ADEC](v6, 0x1020C40D5A9D86FLL);
      }
    }
  }
  while (v5 != v3);
  v11 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 6) = v3;
  operator delete(v11);
  v4 = *(char **)this;
  if (*(_QWORD *)this)
  {
LABEL_19:
    v12 = (char *)*((_QWORD *)this + 1);
    v13 = v4;
    if (v12 != v4)
    {
      do
        webrtc::PeerConnectionInterface::IceServer::~IceServer((webrtc::PeerConnectionInterface::IceServer *)(v12 - 176));
      while (v12 != v4);
      v13 = *(char **)this;
    }
    *((_QWORD *)this + 1) = v4;
    operator delete(v13);
  }
}

double webrtc::PeerConnectionDependencies::PeerConnectionDependencies(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

_QWORD *webrtc::PeerConnectionDependencies::PeerConnectionDependencies(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *result = *a2;
  v2 = a2[1];
  a2[1] = 0;
  result[1] = v2;
  v3 = a2[2];
  a2[2] = 0;
  result[2] = v3;
  v4 = a2[3];
  a2[3] = 0;
  result[3] = v4;
  v5 = a2[4];
  a2[4] = 0;
  result[4] = v5;
  v6 = a2[5];
  a2[5] = 0;
  result[5] = v6;
  v7 = a2[6];
  a2[6] = 0;
  result[6] = v7;
  v8 = a2[7];
  a2[7] = 0;
  result[7] = v8;
  return result;
}

void webrtc::PeerConnectionDependencies::~PeerConnectionDependencies(webrtc::PeerConnectionDependencies *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

__n128 webrtc::PeerConnectionFactoryDependencies::PeerConnectionFactoryDependencies(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a1 + 80) = v9;
  v10 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 88) = v10;
  v11 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 96) = v11;
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v13;
  v14 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 120) = v14;
  v15 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;
  *(_QWORD *)(a1 + 128) = v15;
  v16 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a1 + 136) = v16;
  v17 = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a1 + 152) = v17;
  result = *(__n128 *)(a2 + 168);
  *(_OWORD *)(a2 + 168) = 0u;
  *(__n128 *)(a1 + 168) = result;
  v19 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a1 + 184) = v19;
  v20 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a1 + 192) = v20;
  v21 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a1 + 200) = v21;
  v22 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a1 + 208) = v22;
  return result;
}

void webrtc::PeerConnectionFactoryDependencies::~PeerConnectionFactoryDependencies(webrtc::PeerConnectionFactoryDependencies *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v5 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 22);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 21);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 20);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 19);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 18);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
  v18 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  v21 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
}

void webrtc::PeerConnectionFactoryInterface::CreatePeerConnection(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[3];
  char v12;
  uint64_t v13;
  unsigned __int8 v14;

  v5 = *a2;
  *a2 = 0;
  v6 = *a3;
  *a3 = 0;
  v9 = v5;
  v10 = v6;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 40))(v11);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v7 = v14;
  if (LODWORD(v11[0]))
  {
    *a4 = 0;
    if (v7)
    {
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    if ((v12 & 0x80000000) == 0)
      return;
LABEL_13:
    operator delete(v11[1]);
    return;
  }
  if (!v14)
  {
    __break(1u);
    return;
  }
  v8 = v13;
  v13 = 0;
  *a4 = v8;
  if (v12 < 0)
    goto LABEL_13;
}

void webrtc::PeerConnectionFactoryInterface::CreatePeerConnection(uint64_t a1@<X0>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14[3];
  char v15;
  uint64_t v16;
  unsigned __int8 v17;

  v4 = *a2;
  v5 = a2[1];
  *(__int128 *)((char *)a2 + 8) = 0u;
  v10 = *((_QWORD *)&v4 + 1);
  v11 = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(__int128 *)((char *)a2 + 24) = 0u;
  *(__int128 *)((char *)a2 + 40) = 0u;
  *((_QWORD *)a2 + 7) = 0;
  v12 = v6;
  v13 = v7;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 40))(v14);
  if (*((_QWORD *)&v13 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v13 + 1) + 8))(*((_QWORD *)&v13 + 1));
  if ((_QWORD)v13)
    (*(void (**)(_QWORD))(*(_QWORD *)v13 + 8))(v13);
  if (*((_QWORD *)&v12 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v12 + 1) + 8))(*((_QWORD *)&v12 + 1));
  if ((_QWORD)v12)
    (*(void (**)(_QWORD))(*(_QWORD *)v12 + 8))(v12);
  if (*((_QWORD *)&v11 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v11 + 1) + 8))(*((_QWORD *)&v11 + 1));
  if ((_QWORD)v11)
    (*(void (**)(_QWORD))(*(_QWORD *)v11 + 8))(v11);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v8 = v17;
  if (LODWORD(v14[0]))
  {
    *a3 = 0;
    if (v8)
    {
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    }
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v14[1]);
    return;
  }
  if (!v17)
  {
    __break(1u);
    return;
  }
  v9 = v16;
  v16 = 0;
  *a3 = v9;
  if (v15 < 0)
    goto LABEL_23;
}

void webrtc::PeerConnectionFactoryInterface::CreatePeerConnectionOrError(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 36) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)a1 = 10;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
}

double webrtc::PeerConnectionFactoryInterface::GetRtpSenderCapabilities@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double webrtc::PeerConnectionFactoryInterface::GetRtpReceiverCapabilities@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t webrtc::PeerConnectionFactoryInterface::StartAecDump(webrtc::PeerConnectionFactoryInterface *this, __sFILE *a2)
{
  return 0;
}

uint64_t webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionFailure(uint64_t a1, void (***a2)(_QWORD), int *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v15;
  _BYTE v16[7];
  char v17;
  _QWORD v18[2];
  uint64_t (*v19)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v20)(uint64_t);
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(unsigned int **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (a2)
    (**a2)(a2);
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 1);
  v21[0] = *((_QWORD *)a3 + 2);
  *(_QWORD *)((char *)v21 + 7) = *(_QWORD *)((char *)a3 + 23);
  v10 = *((_BYTE *)a3 + 31);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_DWORD *)v16 = a3[8];
  *(_DWORD *)&v16[3] = *(int *)((char *)a3 + 35);
  v11 = operator new();
  *(_QWORD *)v11 = a2;
  *(_DWORD *)(v11 + 8) = v8;
  v12 = v21[0];
  *(_QWORD *)(v11 + 16) = v9;
  *(_QWORD *)(v11 + 24) = v12;
  *(_QWORD *)(v11 + 31) = *(_QWORD *)((char *)v21 + 7);
  *(_BYTE *)(v11 + 39) = v10;
  *(_DWORD *)(v11 + 40) = *(_DWORD *)v16;
  *(_DWORD *)(v11 + 43) = *(_DWORD *)&v16[3];
  v13 = (_QWORD *)operator new();
  *v13 = v6;
  v13[1] = v11;
  v13[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionFailure(webrtc::SetSessionDescriptionObserver *,webrtc::RTCError &&)::$_0>;
  v13[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionFailure(webrtc::SetSessionDescriptionObserver *,webrtc::RTCError &&)::$_0 &&>;
  v18[0] = v13;
  v19 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v20 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v18, &v17, &v15);
  return v19(1, v18, v18);
}

uint64_t webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(uint64_t a1, void (***a2)(_QWORD), int *a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  _BYTE v13[7];
  char v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, _QWORD **, _QWORD *);
  void (*v17)(uint64_t **);
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 8);
  if (a2)
    (**a2)(a2);
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 1);
  v18[0] = *((_QWORD *)a3 + 2);
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)((char *)a3 + 23);
  v8 = *((_BYTE *)a3 + 31);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 1) = 0;
  *(_DWORD *)v13 = a3[8];
  *(_DWORD *)&v13[3] = *(int *)((char *)a3 + 35);
  v9 = operator new();
  *(_QWORD *)v9 = a2;
  *(_DWORD *)(v9 + 8) = v6;
  v10 = v18[0];
  *(_QWORD *)(v9 + 16) = v7;
  *(_QWORD *)(v9 + 24) = v10;
  *(_QWORD *)(v9 + 31) = *(_QWORD *)((char *)v18 + 7);
  *(_BYTE *)(v9 + 39) = v8;
  *(_DWORD *)(v9 + 40) = *(_DWORD *)v13;
  *(_DWORD *)(v9 + 43) = *(_DWORD *)&v13[3];
  v15[0] = v9;
  v16 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0>;
  v17 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v15, &v14, &v12);
  return v16(1, (_QWORD **)v15, v15);
}

uint64_t webrtc::PeerConnectionMessageHandler::RequestUsagePatternReport(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  char v13;
  char v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v17)(uint64_t);

  v6 = *(unsigned int **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = operator new();
  v9 = v8;
  v10 = (_QWORD *)a2[3];
  if (v10)
  {
    if (v10 == a2)
    {
      *(_QWORD *)(v8 + 24) = v8;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v8);
    }
    else
    {
      *(_QWORD *)(v8 + 24) = v10;
      a2[3] = 0;
    }
  }
  else
  {
    *(_QWORD *)(v8 + 24) = 0;
  }
  v11 = (_QWORD *)operator new();
  *v11 = v6;
  v11[1] = v9;
  v11[3] = absl::internal_any_invocable::RemoteManagerNontrivial<std::function<void ()(void)>>;
  v11[4] = absl::internal_any_invocable::RemoteInvoker<false,void,std::function<void ()(void)> &&>;
  v15[0] = v11;
  v16 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v17 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  v14 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v5 + 16))(v5, v15, 1000 * a3, &v14, &v13);
  return v16(1, v15, v15);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionSuccess(webrtc::SetSessionDescriptionObserver *)::$_0 &&>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 32))(*a1);
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionSuccess(webrtc::SetSessionDescriptionObserver *)::$_0>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionFailure(webrtc::SetSessionDescriptionObserver *,webrtc::RTCError &&)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  int v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[7];

  v1 = *a1;
  v2 = **a1;
  v4 = *((_DWORD *)v1 + 2);
  v3 = *((_OWORD *)v1 + 1);
  v6 = v1[4];
  *(_OWORD *)__p = v3;
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = 0;
  *(_DWORD *)&v7[3] = *(_DWORD *)((char *)v1 + 43);
  *(_DWORD *)v7 = *((_DWORD *)v1 + 10);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v2 + 40))(v2, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostSetSessionDescriptionFailure(webrtc::SetSessionDescriptionObserver *,webrtc::RTCError &&)::$_0>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*((char *)v3 + 39) < 0)
        operator delete((void *)v3[2]);
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  __int128 v3;
  int v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[7];

  v1 = *a1;
  v2 = **a1;
  v4 = *((_DWORD *)v1 + 2);
  v3 = *((_OWORD *)v1 + 1);
  v6 = v1[4];
  *(_OWORD *)__p = v3;
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = 0;
  *(_DWORD *)&v7[3] = *(_DWORD *)((char *)v1 + 43);
  *(_DWORD *)v7 = *((_DWORD *)v1 + 10);
  (*(void (**)(uint64_t, int *))(*(_QWORD *)v2 + 40))(v2, &v4);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostCreateSessionDescriptionFailure(webrtc::CreateSessionDescriptionObserver *,webrtc::RTCError)::$_0>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*((char *)v3 + 39) < 0)
        operator delete((void *)v3[2]);
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::PeerConnectionMessageHandler::PostGetStats(webrtc::StatsObserver *,webrtc::LegacyStatsCollectorInterface *,webrtc::MediaStreamTrackInterface *)::$_0 &&>(_QWORD **a1)
{
  _QWORD *v1;
  void *__p;
  void *v3;
  uint64_t v4;

  v1 = *a1;
  v3 = 0;
  v4 = 0;
  __p = 0;
  (*(void (**)(_QWORD, _QWORD, void **))(*(_QWORD *)v1[1] + 32))(v1[1], v1[2], &__p);
  (*(void (**)(_QWORD, void **))(*(_QWORD *)*v1 + 32))(*v1, &__p);
  if (__p)
  {
    v3 = __p;
    operator delete(__p);
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::PeerConnectionMessageHandler::PostGetStats(webrtc::StatsObserver *,webrtc::LegacyStatsCollectorInterface *,webrtc::MediaStreamTrackInterface *)::$_0>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = v3[2];
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,std::function<void ()(void)> &&>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  v3 = std::__throw_bad_function_call[abi:sn180100]();
  return absl::internal_any_invocable::RemoteManagerNontrivial<std::function<void ()(void)>>(v3, v4, v5);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<std::function<void ()(void)>>(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = (_QWORD *)*a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = (_QWORD *)v3[3];
      if (v4 == v3)
      {
        v5 = 4;
        v4 = (_QWORD *)*a2;
      }
      else
      {
        if (!v4)
          goto LABEL_10;
        v5 = 5;
      }
      (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_10:
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

float32x4_t *cfftf1_ps(int a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, int a7)
{
  float32x4_t *v8;
  uint64_t v9;
  int v12;
  float32x4_t *v13;
  float v14;
  int *v15;
  int v16;
  BOOL v17;
  int v18;
  int v19;
  int v20;
  int v21;

  v8 = a2;
  v9 = *(unsigned int *)(a6 + 4);
  if ((int)v9 >= 1)
  {
    v12 = 0;
    if (a2 == a4)
      v13 = a3;
    else
      v13 = a4;
    v14 = (float)a7;
    v15 = (int *)(a6 + 8);
    v16 = 1;
    do
    {
      v19 = *v15++;
      v18 = v19;
      v20 = v19 * v16;
      v21 = 2 * (a1 / (v19 * v16));
      switch(v19)
      {
        case 2:
          passf2_ps((2 * (a1 / v20)), v16, v8, v13, a5 + 4 * v12, v14);
          break;
        case 3:
          passf3_ps((2 * (a1 / v20)), v16, (uint64_t)v8, (uint64_t)v13, a5 + 4 * v12, a5 + 4 * (v21 + v12), v14);
          break;
        case 4:
          passf4_ps((2 * (a1 / v20)), v16, v8, (uint64_t)v13, a5 + 4 * v12, a5 + 4 * (v21 + v12), a5 + 4 * (v21 + v12 + v21), v14);
          break;
        case 5:
          passf5_ps((2 * (a1 / v20)), v16, (uint64_t)v8, (uint64_t)v13, a5 + 4 * v12, a5 + 4 * (v21 + v12), a5 + 4 * (v21 + v12 + v21), a5 + 4 * (v21 + v12 + v21 + v21), v14);
          break;
        default:
          break;
      }
      v12 += v21 * (v18 - 1);
      v17 = v13 == a4;
      if (v13 == a4)
        v13 = a3;
      else
        v13 = a4;
      if (v17)
        v8 = a4;
      else
        v8 = a3;
      v16 = v20;
      --v9;
    }
    while (v9);
  }
  return v8;
}

uint64_t passf5_ps(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  int v9;
  float v10;
  uint64_t v11;
  unsigned int v12;
  float v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float *v25;
  float32x4_t v26;
  uint64_t v27;
  float *v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float32x4_t *v78;
  float32x4_t *v79;
  float *v80;
  uint64_t v81;
  uint64_t v82;

  if (a2 >= 1 && (int)result >= 2)
  {
    v9 = 0;
    v10 = a9 * 0.58779;
    v11 = (a2 * result);
    v12 = 2 * result;
    v13 = a9 * 0.95106;
    v14 = 3 * result;
    v15 = 4 * result;
    v82 = v11 << 34;
    v16 = (result - 1);
    v17 = a4 + 64 * (_DWORD)v11;
    v18 = 16 * (int)result;
    v19 = a4 + 16 * 3 * (int)result * a2;
    v20 = a4 + 32 * (_DWORD)v11;
    v21 = a3 + v18;
    v22 = 80 * (_DWORD)result;
    result = a4 + 16 * (int)v11;
    v80 = (float *)(a8 + 4);
    v81 = v11 << 33;
    v23 = (float *)(a7 + 4);
    v24 = a3 + 16 * v15;
    v25 = (float *)(a6 + 4);
    v26 = (float32x4_t)vdupq_n_s32(0x3E9E377Au);
    v27 = a3 + 16 * v12;
    v28 = (float *)(a5 + 4);
    v29 = (float32x4_t)vdupq_n_s32(0x3F4F1BBDu);
    v30 = a3 + 16 * v14;
    do
    {
      v31 = 0;
      v32 = 0;
      v33 = v28;
      v34 = v25;
      v35 = v23;
      v36 = v80;
      v37 = v81;
      v38 = v82;
      do
      {
        v40 = *(float32x4_t *)(v21 + v31);
        v39 = *(float32x4_t *)(v21 + v31 + 16);
        v42 = *(float32x4_t *)(v24 + v31);
        v41 = *(float32x4_t *)(v24 + v31 + 16);
        v43 = vsubq_f32(v39, v41);
        v44 = vaddq_f32(v39, v41);
        v46 = *(float32x4_t *)(v27 + v31);
        v45 = *(float32x4_t *)(v27 + v31 + 16);
        v48 = *(float32x4_t *)(v30 + v31);
        v47 = *(float32x4_t *)(v30 + v31 + 16);
        v49 = vsubq_f32(v45, v47);
        v50 = vaddq_f32(v45, v47);
        v51 = vsubq_f32(v40, v42);
        v52 = vaddq_f32(v40, v42);
        v53 = vsubq_f32(v46, v48);
        v54 = vaddq_f32(v46, v48);
        v55 = (float32x4_t *)(a4 + v31);
        *v55 = vaddq_f32(*(float32x4_t *)(a3 + v31), vaddq_f32(v52, v54));
        v55[1] = vaddq_f32(vaddq_f32(v44, v50), *(float32x4_t *)(a3 + v31 + 16));
        v56 = *(float32x4_t *)(a3 + v31);
        v57 = *(float32x4_t *)(a3 + v31 + 16);
        v58 = vaddq_f32(vsubq_f32(vmulq_f32(v52, v26), vmulq_f32(v54, v29)), v56);
        v59 = vaddq_f32(vsubq_f32(vmulq_f32(v44, v26), vmulq_f32(v50, v29)), v57);
        v60 = vaddq_f32(vsubq_f32(vmulq_f32(v54, v26), vmulq_f32(v52, v29)), v56);
        v61 = vaddq_f32(vsubq_f32(vmulq_f32(v50, v26), vmulq_f32(v44, v29)), v57);
        v62 = vaddq_f32(vmulq_n_f32(v51, v13), vmulq_n_f32(v53, v10));
        v63 = vaddq_f32(vmulq_n_f32(v43, v13), vmulq_n_f32(v49, v10));
        v64 = vsubq_f32(vmulq_n_f32(v51, v10), vmulq_n_f32(v53, v13));
        v65 = vsubq_f32(vmulq_n_f32(v43, v10), vmulq_n_f32(v49, v13));
        v66 = vsubq_f32(v60, v65);
        v67 = vaddq_f32(v65, v60);
        v68 = vaddq_f32(v64, v61);
        v69 = vsubq_f32(v61, v64);
        v70 = vaddq_f32(v63, v58);
        v71 = vsubq_f32(v58, v63);
        v72 = vsubq_f32(v59, v62);
        v73 = vaddq_f32(v62, v59);
        v49.f32[0] = *(v33 - 1);
        v56.f32[0] = *v33 * a9;
        v57.f32[0] = *(v34 - 1);
        v59.f32[0] = *v34 * a9;
        v74 = *(v35 - 1);
        v75 = *v35 * a9;
        v76 = *(v36 - 1);
        v77 = *v36 * a9;
        v78 = (float32x4_t *)(result + v31);
        *v78 = vsubq_f32(vmulq_n_f32(v71, v49.f32[0]), vmulq_n_f32(v73, v56.f32[0]));
        v78[1] = vaddq_f32(vmulq_n_f32(v73, v49.f32[0]), vmulq_n_f32(v71, v56.f32[0]));
        *(float32x4_t *)(v20 + v31) = vsubq_f32(vmulq_n_f32(v66, v57.f32[0]), vmulq_n_f32(v68, v59.f32[0]));
        *(float32x4_t *)(a4 + ((v37 >> 28) | 0x10)) = vaddq_f32(vmulq_n_f32(v68, v57.f32[0]), vmulq_n_f32(v66, v59.f32[0]));
        v79 = (float32x4_t *)(v19 + v31);
        *v79 = vsubq_f32(vmulq_n_f32(v67, v74), vmulq_n_f32(v69, v75));
        v79[1] = vaddq_f32(vmulq_n_f32(v69, v74), vmulq_n_f32(v67, v75));
        *(float32x4_t *)(v17 + v31) = vsubq_f32(vmulq_n_f32(v70, v76), vmulq_n_f32(v72, v77));
        *(float32x4_t *)(a4 + ((v38 >> 28) | 0x10)) = vaddq_f32(vmulq_n_f32(v72, v76), vmulq_n_f32(v70, v77));
        v32 += 2;
        v38 += 0x200000000;
        v31 += 32;
        v37 += 0x200000000;
        v36 += 2;
        v35 += 2;
        v34 += 2;
        v33 += 2;
      }
      while (v32 < v16);
      ++v9;
      a4 += v18;
      v17 += v18;
      v19 += v18;
      v20 += v18;
      v21 += v22;
      result += v18;
      v24 += v22;
      v27 += v22;
      v30 += v22;
      a3 += v22;
    }
    while (v9 != a2);
  }
  return result;
}

uint64_t passf4_ps(uint64_t result, int a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t *v10;
  uint64_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float32x4_t *v41;
  unint64_t v42;
  unint64_t v43;
  float *v44;
  float *v45;
  float *v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t *v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t *v79;

  v8 = (a2 * result);
  if ((_DWORD)result == 2)
  {
    if ((int)v8 >= 1)
    {
      v9 = 0;
      v10 = (float32x4_t *)(a4 + 16 * (2 * v8) + 16);
      do
      {
        v11 = 16 * v9;
        v12 = (float32x4_t *)(a4 + 16 * v9);
        v13 = a3[1];
        v14 = a3[4];
        v15 = a3[5];
        v16 = vsubq_f32(*a3, v14);
        v17 = vaddq_f32(*a3, v14);
        v18 = vsubq_f32(v13, v15);
        v19 = vaddq_f32(v13, v15);
        v20 = a3[6];
        v21 = a3[7];
        v22 = a3[2];
        v23 = a3[3];
        v24 = vsubq_f32(v22, v20);
        v25 = vmulq_n_f32(vsubq_f32(v21, v23), a8);
        v26 = vaddq_f32(v22, v20);
        v27 = vaddq_f32(v21, v23);
        *v12 = vaddq_f32(v17, v26);
        v12[1] = vaddq_f32(v19, v27);
        *(float32x4_t *)(a4 + 16 * v8 + v11) = vaddq_f32(v16, v25);
        v28 = vmulq_n_f32(v24, a8);
        *(float32x4_t *)(a4 + 16 * (v8 + 1) + v11) = vaddq_f32(v18, v28);
        v10[-1] = vsubq_f32(v17, v26);
        *v10 = vsubq_f32(v19, v27);
        v10 += 2;
        *(float32x4_t *)(a4 + 48 * (_DWORD)v8 + v11) = vsubq_f32(v16, v25);
        *(float32x4_t *)(a4 + 16 * (3 * (int)v8 + 1) + v11) = vsubq_f32(v18, v28);
        v9 += 2;
        a3 += 8;
      }
      while ((int)v9 < (int)v8);
    }
  }
  else if ((int)v8 >= 1 && (int)result >= 2)
  {
    v30 = 0;
    v31 = (uint64_t)&a3[(2 * result) + 1];
    v32 = 64 * (_DWORD)result;
    v33 = a4 + 48 * (_DWORD)v8;
    v34 = a4 + 16 * (2 * v8);
    v35 = (float *)(a7 + 4);
    v36 = 16 * (int)result;
    v37 = (float *)(a6 + 4);
    v38 = (float *)(a5 + 4);
    v39 = a4 + 16 * v8;
    v40 = (uint64_t)&a3[(unint64_t)v36 / 0x10 + 1];
    v41 = &a3[3 * (int)result];
    do
    {
      v42 = 0;
      v43 = 0;
      v44 = v38;
      v45 = v37;
      v46 = v35;
      v47 = v8 << 33;
      do
      {
        v48 = *(float32x4_t *)(v31 + v42 - 16);
        v49 = a3[v42 / 0x10];
        v50 = a3[v42 / 0x10 + 1];
        v51 = vsubq_f32(v49, v48);
        v52 = vaddq_f32(v49, v48);
        v53 = *(float32x4_t *)(v31 + v42);
        v54 = vsubq_f32(v50, v53);
        v55 = vaddq_f32(v50, v53);
        v57 = *(float32x4_t *)(v40 + v42 - 16);
        v56 = *(float32x4_t *)(v40 + v42);
        v59 = v41[v42 / 0x10];
        v58 = v41[v42 / 0x10 + 1];
        v60 = vmulq_n_f32(vsubq_f32(v58, v56), a8);
        v61 = vmulq_n_f32(vsubq_f32(v57, v59), a8);
        v62 = vaddq_f32(v57, v59);
        v63 = vaddq_f32(v58, v56);
        v64 = vaddq_f32(v52, v62);
        v65 = (float32x4_t *)(a4 + v42);
        v66 = vsubq_f32(v52, v62);
        *v65 = v64;
        v65[1] = vaddq_f32(v55, v63);
        v67 = vsubq_f32(v55, v63);
        v68 = vaddq_f32(v51, v60);
        v69 = vsubq_f32(v51, v60);
        v70 = vaddq_f32(v54, v61);
        v71 = vsubq_f32(v54, v61);
        v62.f32[0] = *(v44 - 1);
        v60.f32[0] = *v44 * a8;
        v72 = vmulq_n_f32(v68, v60.f32[0]);
        v73 = vsubq_f32(vmulq_n_f32(v68, v62.f32[0]), vmulq_n_f32(v70, v60.f32[0]));
        v74 = vaddq_f32(vmulq_n_f32(v70, v62.f32[0]), v72);
        v62.f32[0] = *(v45 - 1);
        v60.f32[0] = *v45 * a8;
        v75 = (float32x4_t *)(v39 + v42);
        *v75 = v73;
        v75[1] = v74;
        v76 = vmulq_n_f32(v66, v60.f32[0]);
        v77 = vsubq_f32(vmulq_n_f32(v66, v62.f32[0]), vmulq_n_f32(v67, v60.f32[0]));
        v78 = vaddq_f32(vmulq_n_f32(v67, v62.f32[0]), v76);
        v76.f32[0] = *(v46 - 1);
        v74.f32[0] = *v46 * a8;
        *(float32x4_t *)(v34 + v42) = v77;
        *(float32x4_t *)(a4 + ((v47 >> 28) | 0x10)) = v78;
        v79 = (float32x4_t *)(v33 + v42);
        v43 += 2;
        v42 += 32;
        v47 += 0x200000000;
        *v79 = vsubq_f32(vmulq_n_f32(v69, v76.f32[0]), vmulq_n_f32(v71, v74.f32[0]));
        v79[1] = vaddq_f32(vmulq_n_f32(v71, v76.f32[0]), vmulq_n_f32(v69, v74.f32[0]));
        v46 += 2;
        v45 += 2;
        v44 += 2;
      }
      while (v43 < (result - 1));
      v30 += result;
      a4 += v36;
      v31 += v32;
      v33 += v36;
      v34 += v36;
      a3 = (float32x4_t *)((char *)a3 + v32);
      v39 += v36;
      v41 = (float32x4_t *)((char *)v41 + v32);
      v40 += v32;
    }
    while (v30 < (int)v8);
  }
  return result;
}

uint64_t passf2_ps(uint64_t result, int a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, float a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  float *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float v22;
  float32x4_t *v23;
  float32x4_t *v24;

  v6 = (a2 * result);
  if ((int)result >= 3)
  {
    if ((int)v6 >= 1)
    {
      v8 = 0;
      v9 = 16 * result;
      v10 = (uint64_t)&a3[(unint64_t)v9 / 0x10 + 1];
      v11 = 16 * (2 * result);
      v12 = &a4[v6];
      v13 = (float *)(a5 + 4);
      do
      {
        v14 = 0;
        v15 = 0;
        v16 = v13;
        do
        {
          v17 = *(float32x4_t *)(v10 + v14 * 16 - 16);
          v18 = a3[v14];
          v19 = vsubq_f32(v18, v17);
          v20 = vsubq_f32(a3[v14 + 1], *(float32x4_t *)(v10 + v14 * 16));
          v21 = *(v16 - 1);
          v22 = *v16 * a6;
          v23 = &a4[v14];
          *v23 = vaddq_f32(v18, v17);
          v23[1] = vaddq_f32(a3[v14 + 1], *(float32x4_t *)(v10 + v14 * 16));
          v24 = &v12[v14];
          *v24 = vsubq_f32(vmulq_n_f32(v19, v21), vmulq_n_f32(v20, v22));
          v24[1] = vaddq_f32(vmulq_n_f32(v20, v21), vmulq_n_f32(v19, v22));
          v15 += 2;
          v14 += 2;
          v16 += 2;
        }
        while (v15 < (result - 1));
        v8 += result;
        v10 += v11;
        v12 = (float32x4_t *)((char *)v12 + v9);
        a3 = (float32x4_t *)((char *)a3 + v11);
        a4 = (float32x4_t *)((char *)a4 + v9);
      }
      while (v8 < (int)v6);
    }
  }
  else if ((int)v6 >= 1)
  {
    v7 = 0;
    do
    {
      *a4 = vaddq_f32(*a3, a3[(int)result]);
      a4[v6] = vsubq_f32(*a3, a3[(int)result]);
      a4[1] = vaddq_f32(a3[1], a3[(int)result + 1]);
      a4[(v6 + 1)] = vsubq_f32(a3[1], a3[(int)result + 1]);
      v7 += result;
      a3 += 2 * (int)result;
      a4 += (int)result;
    }
    while (v7 < (int)v6);
  }
  return result;
}

uint64_t passf3_ps(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v7;
  int v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float *v21;
  float *v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  float v39;
  float32x4_t *v40;

  v7 = (a2 * result);
  if ((int)v7 >= 1 && (int)result >= 2)
  {
    v9 = 0;
    v10 = a7 * 0.86603;
    v11 = 16 * (int)result;
    v12 = v11 + a3 + 16;
    v13 = 48 * (_DWORD)result;
    v14 = a3 + 16 * (2 * result) + 16;
    v15 = a4 + 16 * (2 * v7);
    v16 = (float *)(a6 + 4);
    v17.i64[0] = 0x3F0000003F000000;
    v17.i64[1] = 0x3F0000003F000000;
    v18 = a4 + 16 * v7;
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = (float *)(a5 + 4);
      v22 = v16;
      v23 = v7 << 33;
      do
      {
        v24 = vaddq_f32(*(float32x4_t *)(v12 + v19 - 16), *(float32x4_t *)(v14 + v19 - 16));
        v25 = *(float32x4_t *)(a3 + v19);
        v26 = vsubq_f32(v25, vmulq_f32(v24, v17));
        v27 = (float32x4_t *)(a4 + v19);
        *v27 = vaddq_f32(v25, v24);
        v28 = vaddq_f32(*(float32x4_t *)(v12 + v19), *(float32x4_t *)(v14 + v19));
        v29 = *(float32x4_t *)(a3 + v19 + 16);
        v30 = vsubq_f32(v29, vmulq_f32(v28, v17));
        v27[1] = vaddq_f32(v29, v28);
        v31 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v12 + v19 - 16), *(float32x4_t *)(v14 + v19 - 16)), v10);
        v32 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v12 + v19), *(float32x4_t *)(v14 + v19)), v10);
        v33 = vsubq_f32(v26, v32);
        v34 = vaddq_f32(v26, v32);
        v35 = vaddq_f32(v30, v31);
        v36 = vsubq_f32(v30, v31);
        v30.f32[0] = *(v21 - 1);
        v37 = *v21 * a7;
        v38 = *(v22 - 1);
        v39 = *v22 * a7;
        v40 = (float32x4_t *)(v18 + v19);
        *v40 = vsubq_f32(vmulq_n_f32(v33, v30.f32[0]), vmulq_n_f32(v35, v37));
        v40[1] = vaddq_f32(vmulq_n_f32(v35, v30.f32[0]), vmulq_n_f32(v33, v37));
        *(float32x4_t *)(v15 + v19) = vsubq_f32(vmulq_n_f32(v34, v38), vmulq_n_f32(v36, v39));
        *(float32x4_t *)(a4 + ((v23 >> 28) | 0x10)) = vaddq_f32(vmulq_n_f32(v36, v38), vmulq_n_f32(v34, v39));
        v20 += 2;
        v23 += 0x200000000;
        v19 += 32;
        v22 += 2;
        v21 += 2;
      }
      while (v20 < (result - 1));
      v9 += result;
      a4 += v11;
      v15 += v11;
      v12 += v13;
      v18 += v11;
      v14 += v13;
      a3 += v13;
    }
    while (v9 < (int)v7);
  }
  return result;
}

int32x4_t *pffft_new_setup(int a1, int a2)
{
  int32x4_t *v4;
  int32x4_t *v5;
  int v6;
  int v7;
  int v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  int32x4_t *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  double v17;
  double v18;
  float v19;
  __double2 v20;
  float cosval;
  unsigned int v22;
  float sinval;
  float v24;
  __double2 v25;
  float v26;
  float v27;
  float v28;
  __double2 v29;
  float v30;
  int32x4_t *v31;
  uint64_t v32;
  unsigned int v33;
  double v34;
  double v35;
  float v36;
  __double2 v37;
  float v38;
  unsigned int v39;
  float v40;
  float v41;
  __double2 v42;
  float v43;
  float v44;
  float v45;
  __double2 v46;
  float v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  __int32 *v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  int v72;
  uint64_t v73;
  __int32 *v74;
  int v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  __int32 *v79;
  unsigned int v80;
  float v81;
  unint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _DWORD *v100;
  uint64_t v101;
  int v102;
  unsigned int v103;
  uint64_t v104;
  int32x4_t v105;
  float *v106;
  int32x4_t v107;
  float32x4_t v108;
  __double2 v109;
  float64x2_t v110;
  __double2 v111;
  __double2 v112;
  float64x2_t v113;
  float64x2_t v114;
  __double2 v115;
  float64x2_t v116;
  int v117;
  float *v118;
  int v119;
  __double2 v120;
  float v121;
  float v122;
  int v123;
  int v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  uint64_t v128;
  int32x4_t v129;
  float *v130;
  int32x4_t v131;
  float32x4_t v132;
  __double2 v133;
  float64x2_t v134;
  __double2 v135;
  __double2 v136;
  float64x2_t v137;
  float64x2_t v138;
  __double2 v139;
  float64x2_t v140;
  int v141;
  float *v142;
  int v143;
  __double2 v144;
  float v145;
  float v146;
  uint64_t v147;
  int32x4_t *v148;
  int32x4_t v149;
  uint64_t v150;
  int32x4_t v151;
  int8x16_t v152;
  uint64_t v153;
  __int32 *v154;
  int v155;
  uint64_t v157;
  int v158;
  unsigned int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned int v162;
  int v163;
  uint64_t v164;
  _DWORD *v165;
  _DWORD *v166;
  int v167;
  int v168;
  float v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unsigned int v176;
  int v177;
  uint64_t v178;
  unsigned int v179;
  float *v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  float *v187;
  int32x4_t v188;
  int32x4_t v189;
  float32x4_t v190;
  __double2 v191;
  float64x2_t v192;
  __double2 v193;
  __double2 v194;
  float64x2_t v195;
  float64x2_t v196;
  __double2 v197;
  float64x2_t v198;
  float *v199;
  int v200;
  __double2 v201;
  float v202;
  float v203;
  int v204;
  int32x4_t *v205;
  int v206;
  int v207;
  uint64_t v208;
  unint64_t v209;
  __int32 *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  unsigned int v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  unint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unsigned int v226;
  int v227;
  unsigned int v228;
  float64x2_t v229;
  float64x2_t v230;
  float64x2_t v231;
  float64x2_t v232;
  float64x2_t v233;
  float64x2_t v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  float64x2_t v238;
  float64x2_t v239;
  float64x2_t v240;
  int32x4_t v241;
  int32x4_t v242;
  int32x4_t v243;
  float32x4x2_t v244;
  float32x4x2_t v245;
  float32x4x2_t v246;

  v4 = (int32x4_t *)malloc_type_malloc(0x60uLL, 0x10800403A6E6DD3uLL);
  v5 = v4;
  v4[4].i32[1] = a2;
  if (a1 >= 0)
    v6 = a1;
  else
    v6 = a1 + 1;
  v7 = v6 >> 1;
  if (a2)
    v7 = a1;
  v8 = v7 / 4;
  v206 = a1;
  v4->i32[0] = a1;
  v4->i32[1] = v8;
  v9 = (unint64_t)malloc_type_malloc(32 * v8 + 64, 0x9F4221E6uLL);
  if (v9)
  {
    v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 64;
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFFC0) + 0x38) = v9;
  }
  else
  {
    v11 = 0;
  }
  v5[4].i64[1] = v11;
  v5[5].i64[0] = v11;
  v12 = v5;
  v13 = v5->i32[1];
  v14 = (uint64_t)(6 * v13 + (6 * v13 < 0 ? 3 : 0)) >> 2;
  v15 = v11 + 16 * (6 * v13 / 4);
  v205 = v12;
  v12[5].i64[1] = v15;
  v212 = v11;
  if (a2)
  {
    if (v13 >= 1)
    {
      v16 = 0;
      v17 = (double)v206;
      v18 = 0.0;
      do
      {
        v19 = v18 * -6.28318531 / v17;
        v20 = __sincos_stret(v19);
        cosval = v20.__cosval;
        v22 = v16 & 3 | (24 * (v16 >> 2));
        *(float *)(v11 + 4 * v22) = cosval;
        sinval = v20.__sinval;
        *(float *)(v11 + 4 * (int)(v22 | 4)) = sinval;
        v24 = v18 * -12.5663706 / v17;
        v25 = __sincos_stret(v24);
        v26 = v25.__cosval;
        *(float *)(v11 + 4 * (v22 + 8)) = v26;
        v27 = v25.__sinval;
        *(float *)(v11 + 4 * (int)(v22 + 12)) = v27;
        v28 = v18 * -18.8495559 / v17;
        v29 = __sincos_stret(v28);
        *(float *)&v10 = v29.__cosval;
        *(_DWORD *)(v11 + 4 * (v22 + 16)) = v10;
        v30 = v29.__sinval;
        *(float *)(v11 + 4 * (int)(v22 + 20)) = v30;
        v18 = v18 + 1.0;
        ++v16;
      }
      while (v13 != v16);
    }
    v31 = v205;
    v210 = &v205->i32[2];
    v207 = v206 / 4;
    if ((v206 & 0xFFFFFFFC) == 4)
    {
      LODWORD(v32) = 0;
      goto LABEL_64;
    }
    v50 = 0;
    v51 = v206 / 4;
    while (v51 == 5 * (v51 / 5))
    {
      v52 = v50 + 1;
      v205[1].i32[v50] = 5;
      v53 = v51 - 5;
      ++v50;
      v51 /= 5;
      if (v53 <= 4)
      {
        LODWORD(v32) = v52;
        goto LABEL_64;
      }
    }
    if (v51 == 1)
      goto LABEL_31;
    v62 = 0;
    while (v51 == 3 * (v51 / 3))
    {
      v205[1].i32[(int)v50 + v62] = 3;
      v63 = v51 - 3;
      ++v62;
      v51 /= 3;
      if (v63 <= 2)
      {
        LODWORD(v32) = v50 + v62;
        goto LABEL_64;
      }
    }
    v32 = (v50 + v62);
    if (v51 != 1)
    {
      v73 = v32 << 32;
      v74 = &v205[1].i32[(int)v32];
      while (1)
      {
        v75 = v32;
        v76 = v51 + 3;
        if (v51 >= 0)
          v76 = v51;
        if (v51 != (v76 & 0xFFFFFFFC))
          break;
        v77 = v51 & 0xFFFFFFFC;
        v51 = v76 >> 2;
        *v74++ = 4;
        LODWORD(v32) = v75 + 1;
        v73 += 0x100000000;
        if (v77 == 4)
          goto LABEL_64;
      }
      if (v51 != 1)
      {
        v160 = v75 + 2;
        v50 = v73 >> 32;
        v161 = (uint64_t)v205[1].i64 + 4 * v75;
        do
        {
          if (v51 >= 0)
            v163 = v51;
          else
            v163 = v51 + 1;
          if (v51 != (v163 & 0xFFFFFFFE))
            break;
          v210[v50 + 2] = 2;
          if (v50)
          {
            if (v50 >= 1)
            {
              v164 = v160 - 2;
              v165 = (_DWORD *)v161;
              v166 = (_DWORD *)v161;
              do
              {
                v167 = *--v166;
                *v165 = v167;
                v165 = v166;
                --v164;
              }
              while (v164);
            }
            v205[1].i32[0] = 2;
          }
          v162 = v51 & 0xFFFFFFFE;
          v51 = v163 >> 1;
          ++v50;
          ++v160;
          v161 += 4;
        }
        while (v162 != 2);
LABEL_31:
        LODWORD(v32) = v50;
        goto LABEL_64;
      }
      LODWORD(v32) = v75;
    }
LABEL_64:
    v205->i32[2] = v207;
    v205->i32[3] = v32;
    if ((int)v32 >= 1)
    {
      DWORD1(v10) = 1075388923;
      v81 = 6.28318531 / (float)v207;
      v204 = v32;
      v208 = (v32 + 1);
      v82 = v11 + 16 * v14;
      v220 = v82 + 4;
      v224 = v82 + 8;
      v83 = 1;
      v84 = 1;
      v85 = 1;
      v218 = v15;
      while (1)
      {
        v87 = v83 + 1;
        v88 = v210[v87];
        v89 = v88 * v84;
        v215 = v87;
        v214 = v88 * v84;
        if ((int)v88 >= 2)
        {
          v90 = v207 / v89;
          if (v207 / v89 >= 1)
          {
            v91 = 2 * v90;
            v92 = (2 * v90) | 1;
            if (v92 <= 4)
              v92 = 4;
            v226 = v92 - 3;
            v222 = ((v92 - 3) >> 1) + 1;
            v93 = 2 * (v222 & 0xFFFFFFFC);
            v225 = v222 & 0xFFFFFFFC;
            v227 = v84;
            if (v88 > 5)
            {
              v94 = 0;
              v213 = v93 - 2;
              v95 = 1;
              v96 = v85;
              while (1)
              {
                v98 = v88;
                v99 = v15 + 4 * v96;
                *(_QWORD *)(v99 - 4) = 1065353216;
                v100 = (_DWORD *)(v99 - 4);
                v101 = v96;
                v94 += v84;
                *(float *)&v10 = v81 * (float)v94;
                v235 = v10;
                if (v226 < 6)
                  break;
                v86 = 2 * (v222 & 0xFFFFFFFC) + v96;
                v104 = v222 & 0xFFFFFFFC;
                v105 = (int32x4_t)xmmword_208F071C0;
                v106 = (float *)(v220 + 4 * v96);
                do
                {
                  v241 = v105;
                  v107.i64[0] = 0x100000001;
                  v107.i64[1] = 0x100000001;
                  v108 = vmulq_n_f32(vcvtq_f32_s32(vaddq_s32(v105, v107)), *(float *)&v10);
                  v238 = vcvtq_f64_f32(*(float32x2_t *)v108.f32);
                  v232 = vcvt_hight_f64_f32(v108);
                  v109 = __sincos_stret(v232.f64[1]);
                  v111 = __sincos_stret(v232.f64[0]);
                  v110.f64[0] = v111.__cosval;
                  v110.f64[1] = v109.__cosval;
                  v229 = v110;
                  v112 = __sincos_stret(v238.f64[1]);
                  v115 = __sincos_stret(v238.f64[0]);
                  v114.f64[0] = v115.__cosval;
                  v113.f64[0] = v115.__sinval;
                  v114.f64[1] = v112.__cosval;
                  v244.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v114), v229);
                  v116.f64[0] = v111.__sinval;
                  v116.f64[1] = v109.__sinval;
                  v113.f64[1] = v112.__sinval;
                  v244.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v113), v116);
                  vst2q_f32(v106, v244);
                  v106 += 8;
                  v10 = v235;
                  v244.val[1].i64[0] = 0x400000004;
                  v244.val[1].i64[1] = 0x400000004;
                  v105 = vaddq_s32(v241, (int32x4_t)v244.val[1]);
                  v104 -= 4;
                }
                while (v104);
                if (v225 != v222)
                {
                  v102 = v222 & 0xFFFFFFFC;
                  v103 = (8 * ((v222 & 0xFFFFFFFC) >> 2)) | 4;
LABEL_83:
                  v117 = v103 - 2;
                  v118 = (float *)(v224 + 4 * v86);
                  v119 = v102 + 1;
                  do
                  {
                    v86 += 2;
                    v120 = __sincos_stret((float)(*(float *)&v10 * (float)v119));
                    v121 = v120.__cosval;
                    v10 = v235;
                    v122 = v120.__sinval;
                    *(v118 - 1) = v121;
                    *v118 = v122;
                    v117 += 2;
                    v118 += 2;
                    ++v119;
                  }
                  while (v117 <= v91);
                  v97 = v86 - 2;
                  v15 = v218;
                  goto LABEL_76;
                }
                v97 = v213 + v101;
LABEL_76:
                *v100 = *(_DWORD *)(v15 + (((v97 << 32) + 0x100000000) >> 30));
                *(_DWORD *)(v15 + 4 * v101) = *(_DWORD *)(v15 + 4 * (int)v86);
                ++v95;
                v96 = v86;
                v88 = v98;
                v84 = v227;
                if (v95 == (_DWORD)v98)
                  goto LABEL_68;
              }
              v102 = 0;
              v103 = 4;
              v86 = v101;
              goto LABEL_83;
            }
            v123 = 0;
            v124 = 1;
            while (2)
            {
              *(_QWORD *)(v15 + 4 * ((int)v85 - 1)) = 1065353216;
              v125 = (int)v85;
              v123 += v84;
              *(float *)&v10 = v81 * (float)v123;
              v236 = v10;
              if (v226 < 6)
              {
                v126 = 0;
                v127 = 4;
                v85 = (int)v85;
                goto LABEL_93;
              }
              v85 = v93 + (int)v85;
              v128 = v222 & 0xFFFFFFFC;
              v129 = (int32x4_t)xmmword_208F071C0;
              v130 = (float *)(v220 + 4 * v125);
              do
              {
                v242 = v129;
                v131.i64[0] = 0x100000001;
                v131.i64[1] = 0x100000001;
                v132 = vmulq_n_f32(vcvtq_f32_s32(vaddq_s32(v129, v131)), *(float *)&v10);
                v239 = vcvtq_f64_f32(*(float32x2_t *)v132.f32);
                v233 = vcvt_hight_f64_f32(v132);
                v133 = __sincos_stret(v233.f64[1]);
                v135 = __sincos_stret(v233.f64[0]);
                v134.f64[0] = v135.__cosval;
                v134.f64[1] = v133.__cosval;
                v230 = v134;
                v136 = __sincos_stret(v239.f64[1]);
                v139 = __sincos_stret(v239.f64[0]);
                v138.f64[0] = v139.__cosval;
                v137.f64[0] = v139.__sinval;
                v138.f64[1] = v136.__cosval;
                v245.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v138), v230);
                v140.f64[0] = v135.__sinval;
                v140.f64[1] = v133.__sinval;
                v137.f64[1] = v136.__sinval;
                v245.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v137), v140);
                vst2q_f32(v130, v245);
                v130 += 8;
                v10 = v236;
                v245.val[1].i64[0] = 0x400000004;
                v245.val[1].i64[1] = 0x400000004;
                v129 = vaddq_s32(v242, (int32x4_t)v245.val[1]);
                v128 -= 4;
              }
              while (v128);
              v126 = v222 & 0xFFFFFFFC;
              v127 = (8 * ((v222 & 0xFFFFFFFC) >> 2)) | 4;
              if (v225 != v222)
              {
LABEL_93:
                v141 = v127 - 2;
                v142 = (float *)(v224 + 4 * v85);
                v143 = v126 + 1;
                do
                {
                  v85 += 2;
                  v144 = __sincos_stret((float)(*(float *)&v10 * (float)v143));
                  v145 = v144.__cosval;
                  v10 = v236;
                  v146 = v144.__sinval;
                  *(v142 - 1) = v145;
                  *v142 = v146;
                  v141 += 2;
                  v142 += 2;
                  ++v143;
                }
                while (v141 <= v91);
              }
              ++v124;
              v86 = v85;
              v84 = v227;
              if (v124 == (_DWORD)v88)
                goto LABEL_68;
              continue;
            }
          }
          *(_QWORD *)(v15 + 4 * (int)v85 - 4) = 1065353216;
        }
        v86 = v85;
LABEL_68:
        v84 = v214;
        v85 = v86;
        v83 = v215;
        v11 = v212;
        if (v215 == v208)
        {
          v31 = v205;
          goto LABEL_97;
        }
      }
    }
    goto LABEL_101;
  }
  if (v13 >= 1)
  {
    v33 = 0;
    v34 = (double)v206;
    v35 = 0.0;
    do
    {
      v36 = v35 * -6.28318531 / v34;
      v37 = __sincos_stret(v36);
      v38 = v37.__cosval;
      v39 = v33 & 3 | (24 * (v33 >> 2));
      *(float *)(v11 + 4 * v39) = v38;
      v40 = v37.__sinval;
      *(float *)(v11 + 4 * (int)(v39 | 4)) = v40;
      v41 = v35 * -12.5663706 / v34;
      v42 = __sincos_stret(v41);
      v43 = v42.__cosval;
      *(float *)(v11 + 4 * (v39 + 8)) = v43;
      v44 = v42.__sinval;
      *(float *)(v11 + 4 * (int)(v39 + 12)) = v44;
      v45 = v35 * -18.8495559 / v34;
      v46 = __sincos_stret(v45);
      *(float *)&v10 = v46.__cosval;
      *(_DWORD *)(v11 + 4 * (v39 + 16)) = v10;
      v47 = v46.__sinval;
      *(float *)(v11 + 4 * (int)(v39 + 20)) = v47;
      v35 = v35 + 1.0;
      ++v33;
    }
    while (v13 != v33);
  }
  v48 = v206 / 4;
  if ((v206 & 0xFFFFFFFC) == 4)
  {
    v31 = v205;
    v205->i32[2] = v48;
    v205->i32[3] = 0;
    v49 = 1;
    goto LABEL_107;
  }
  v54 = 0;
  v55 = 0;
  v31 = v205;
  v56 = &v205->i32[2];
  v57 = v206 / 4;
  while (1)
  {
    v58 = v57 + 3;
    if (v57 >= 0)
      v58 = v57;
    if (v57 != (v58 & 0xFFFFFFFC))
      break;
    v59 = v57 & 0xFFFFFFFC;
    v57 = v58 >> 2;
    v60 = v55 + 1;
    v205[1].i32[v55] = 4;
    v54 += 0x100000000;
    ++v55;
    if (v59 == 4)
    {
      LODWORD(v61) = v60;
      goto LABEL_131;
    }
  }
  if (v57 == 1)
  {
    LODWORD(v61) = v55;
  }
  else
  {
    v64 = v55 + 2;
    v61 = v54 >> 32;
    v65 = (uint64_t)v205[1].i64 + 4 * (int)v55;
    while (1)
    {
      v68 = v57 >= 0 ? v57 : v57 + 1;
      if (v57 != (v68 & 0xFFFFFFFE))
        break;
      v66 = v61;
      v56[v61 + 2] = 2;
      if (v61)
      {
        if (v61 >= 1)
        {
          v69 = v64 - 2;
          v70 = (_DWORD *)v65;
          v71 = (_DWORD *)v65;
          do
          {
            v72 = *--v71;
            *v70 = v72;
            v70 = v71;
            --v69;
          }
          while (v69);
        }
        v205[1].i32[0] = 2;
        v66 = v61;
      }
      v67 = v57 & 0xFFFFFFFE;
      v57 = v68 >> 1;
      v61 = v66 + 1;
      ++v64;
      v65 += 4;
      if (v67 == 2)
        goto LABEL_131;
    }
    if (v57 != 1)
    {
      v78 = v61 << 32;
      v79 = &v205[1].i32[(int)v61];
      while (v57 == 3 * (v57 / 3))
      {
        *v79++ = 3;
        v80 = v57 - 3;
        v78 += 0x100000000;
        LODWORD(v61) = v61 + 1;
        v57 /= 3;
        if (v80 < 3)
          goto LABEL_131;
      }
      if (v57 != 1)
      {
        v157 = v78 >> 32;
        while (v57 == 5 * (v57 / 5))
        {
          v158 = v157 + 1;
          v205[1].i32[v157] = 5;
          v159 = v57 - 5;
          ++v157;
          v57 /= 5;
          if (v159 <= 4)
            goto LABEL_130;
        }
        v158 = v157;
LABEL_130:
        LODWORD(v61) = v158;
      }
    }
  }
LABEL_131:
  v205->i32[2] = v48;
  v205->i32[3] = v61;
  if ((int)v61 > 1)
  {
    v168 = 0;
    DWORD1(v10) = 1075388923;
    v169 = 6.28318531 / (double)v48;
    v204 = v61;
    v170 = v61;
    v209 = v11 + 16 * v14;
    v171 = 1;
    v172 = 1;
    v211 = v61;
    while (1)
    {
      v174 = v56[++v171];
      v173 = (v174 * v172);
      if ((int)v174 >= 2)
        break;
LABEL_134:
      v172 = v173;
      if (v171 == v170)
      {
        v11 = v212;
LABEL_97:
        LODWORD(v61) = v204;
        goto LABEL_98;
      }
    }
    v175 = (v48 / (int)v173);
    v176 = v175 - 3;
    if ((int)v175 < 3)
    {
      v168 += v175 * (v174 - 1);
      goto LABEL_134;
    }
    v216 = v174 * v172;
    v217 = v171;
    v219 = v168;
    v177 = 0;
    v178 = v168;
    v179 = v176 >> 1;
    v221 = (v176 >> 1) + 1;
    v223 = (v48 / (int)v173);
    v180 = (float *)(v209 + 4 * v168);
    v181 = 1;
    v228 = v175 - 3;
    while (1)
    {
      v177 += v172;
      *(float *)&v10 = v169 * (float)v177;
      v237 = v10;
      if (v176 >= 6)
      {
        v184 = v172;
        v185 = v174;
        v183 = v178 + 2 * (v221 & 0xFFFFFFFC);
        v186 = v221 & 0xFFFFFFFC;
        v187 = v180;
        v188 = (int32x4_t)xmmword_208F071C0;
        do
        {
          v243 = v188;
          v189.i64[0] = 0x100000001;
          v189.i64[1] = 0x100000001;
          v190 = vmulq_n_f32(vcvtq_f32_s32(vaddq_s32(v188, v189)), *(float *)&v10);
          v240 = vcvtq_f64_f32(*(float32x2_t *)v190.f32);
          v234 = vcvt_hight_f64_f32(v190);
          v191 = __sincos_stret(v234.f64[1]);
          v193 = __sincos_stret(v234.f64[0]);
          v192.f64[0] = v193.__cosval;
          v192.f64[1] = v191.__cosval;
          v231 = v192;
          v194 = __sincos_stret(v240.f64[1]);
          v197 = __sincos_stret(v240.f64[0]);
          v196.f64[0] = v197.__cosval;
          v195.f64[0] = v197.__sinval;
          v196.f64[1] = v194.__cosval;
          v246.val[0] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v196), v231);
          v198.f64[0] = v193.__sinval;
          v198.f64[1] = v191.__sinval;
          v195.f64[1] = v194.__sinval;
          v246.val[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v195), v198);
          vst2q_f32(v187, v246);
          v187 += 8;
          v10 = v237;
          v246.val[1].i64[0] = 0x400000004;
          v246.val[1].i64[1] = 0x400000004;
          v188 = vaddq_s32(v243, (int32x4_t)v246.val[1]);
          v186 -= 4;
        }
        while (v186);
        v182 = v221 & 0xFFFFFFFC;
        v174 = v185;
        v172 = v184;
        v175 = v223;
        if ((v221 & 0xFFFFFFFC) == v221)
          goto LABEL_139;
      }
      else
      {
        v182 = 0;
        v183 = v178;
      }
      v199 = (float *)(v209 + 4 + 4 * v183);
      v200 = v182 - 1;
      do
      {
        v201 = __sincos_stret((float)(*(float *)&v10 * (float)(v200 + 2)));
        v202 = v201.__cosval;
        v10 = v237;
        v203 = v201.__sinval;
        *(v199 - 1) = v202;
        *v199 = v203;
        v199 += 2;
        ++v200;
      }
      while (v179 != v200);
LABEL_139:
      v178 += v175;
      ++v181;
      v180 += v223;
      v176 = v228;
      if (v181 == (_DWORD)v174)
      {
        v171 = v217;
        v168 = v219 + v175 * (v174 - 1);
        v31 = v205;
        v48 = v206 / 4;
        v173 = v216;
        v56 = &v205->i32[2];
        v170 = v211;
        goto LABEL_134;
      }
    }
  }
LABEL_98:
  if ((int)v61 < 1)
  {
LABEL_101:
    v49 = 1;
    goto LABEL_107;
  }
  if (v61 < 8)
  {
    v147 = 0;
    v49 = 1;
LABEL_105:
    v153 = v61 - v147;
    v154 = &v31[1].i32[v147];
    do
    {
      v155 = *v154++;
      v49 *= v155;
      --v153;
    }
    while (v153);
    goto LABEL_107;
  }
  v147 = v61 & 0xFFFFFFF8;
  v148 = v31 + 2;
  v149.i64[0] = 0x100000001;
  v149.i64[1] = 0x100000001;
  v150 = v147;
  v151.i64[0] = 0x100000001;
  v151.i64[1] = 0x100000001;
  do
  {
    v149 = vmulq_s32(v148[-1], v149);
    v151 = vmulq_s32(*v148, v151);
    v148 += 2;
    v150 -= 8;
  }
  while (v150);
  v152 = (int8x16_t)vmulq_s32(v151, v149);
  *(int32x2_t *)v152.i8 = vmul_s32(*(int32x2_t *)v152.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL));
  v49 = v152.i32[0] * v152.i32[1];
  if (v147 != v61)
    goto LABEL_105;
LABEL_107:
  if (v49 != v206 / 4)
  {
    if (v11)
      free(*(void **)(v11 - 8));
    free(v31);
    return 0;
  }
  return v31;
}

int32x4_t pffft_zreorder(unsigned int *a1, int32x4_t *a2, int32x4_t *a3, int a4, int32x4_t result)
{
  uint64_t v5;
  uint64_t v6;
  int32x4_t *v7;
  int v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t *v15;
  int32x4_t *v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t *v23;
  int32x4_t *v24;
  int32x4_t *v25;
  int32x4_t v26;
  int32x4_t v27;
  int v28;
  int32x4_t v29;
  uint64_t v30;
  int32x4_t *v31;
  int32x4_t v32;
  int32x4_t v33;
  int v34;
  uint64_t v35;
  int32x4_t *v36;
  int v37;
  int32x4_t v38;
  int32x4_t v39;
  float *i32;
  int32x4_t *v41;
  uint64_t v42;
  int32x4_t *v43;
  uint64_t v44;
  float32x2x2_t v45;
  int32x4_t v46;
  float *v47;
  float *v48;
  float32x2x2_t v49;
  int32x4_t v50;
  int v51;
  int32x4_t *v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  char *i8;
  int v58;
  int32x4_t *v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  __int128 v63;
  int32x4_t *v64;
  int32x4_t v65;
  int32x4_t *v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  char *v70;
  int v71;
  int32x4_t *v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  __int128 v76;
  int32x4_t v77;
  int32x4_t *v78;
  int32x4_t *v79;
  int32x4_t *v80;
  int32x4_t v81;
  int32x4_t v82;
  int v83;
  int32x4_t v84;
  uint64_t v85;
  int32x4_t *v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int32x4_t v90;

  if (a1[17])
  {
    v5 = a1[1];
    if (a4)
    {
      if ((int)v5 >= 1)
      {
        v6 = 0;
        v7 = a3 + 1;
        do
        {
          v8 = (v6 & 3) * (v5 >> 2) + (v6 >> 2);
          v9 = a2[2 * v8];
          v10 = a2[(2 * v8) | 1u];
          v11 = vuzp1q_s32(v9, v10);
          result = vuzp2q_s32(v9, v10);
          v7[-1] = v11;
          *v7 = result;
          ++v6;
          v7 += 2;
        }
        while (v5 != v6);
      }
    }
    else if ((int)v5 >= 1)
    {
      v35 = 0;
      v36 = a2 + 1;
      do
      {
        v37 = (v35 & 3) * (v5 >> 2) + (v35 >> 2);
        result = v36[-1];
        v38 = *v36;
        v39 = vzip2q_s32(result, *v36);
        i32 = (float *)a3[2 * v37].i32;
        vst2_f32(i32, (float32x2x2_t)result);
        a3[(2 * v37) | 1u] = v39;
        ++v35;
        v36 += 2;
      }
      while (v5 != v35);
    }
    return result;
  }
  v12 = (int)*a1;
  v13 = *a1;
  v14 = ((int)v13 / 32);
  if (a4)
  {
    if ((int)v12 <= 31)
    {
      v34 = 0;
      v64 = (int32x4_t *)((char *)a2 + 4 * ((int)v13 / 4));
      v24 = (int32x4_t *)((char *)a3 + 4 * v12 - 96);
      v65 = *v64;
      v25 = v64 + 1;
      v27 = v65;
    }
    else
    {
      v15 = a2 + 1;
      v16 = a3 + 5;
      v17 = ((int)v13 / 32);
      do
      {
        v18 = v15[-1];
        v19 = vuzp1q_s32(v18, *v15);
        v20 = vuzp2q_s32(v18, *v15);
        v16[-5] = v19;
        v16[-4] = v20;
        v21 = v15[4 * (int)v14 - 1];
        v22 = v15[4 * (int)v14];
        v16[-1] = vuzp1q_s32(v21, v22);
        *v16 = vuzp2q_s32(v21, v22);
        v15 += 2;
        v16 += 8;
        --v17;
      }
      while (v17);
      v23 = (int32x4_t *)((char *)a2 + (v13 & 0xFFFFFFFC));
      v24 = (int32x4_t *)((char *)a3 + 4 * v13 - 96);
      v26 = *v23;
      v25 = v23 + 1;
      v27 = v26;
      if ((int)v13 >= 64)
      {
        v28 = v14 - 1;
        v29.i64[1] = v27.i64[1];
        do
        {
          v30 = v29.i64[1];
          v31 = v25 + 2;
          v32 = *v25;
          v29 = v25[1];
          v33.i64[0] = v25[1].i64[0];
          v33.i64[1] = v25->i64[1];
          v32.i64[1] = v30;
          *v24 = vuzp1q_s32(v33, v32);
          v24[1] = vuzp2q_s32(v33, v32);
          v24 -= 8;
          v25 += 2;
          --v28;
        }
        while (v28);
        v34 = 1;
        v12 = v13;
        v25 = v31;
LABEL_38:
        v77 = *v25;
        v27.i64[1] = v25->i64[1];
        v77.i64[1] = v29.i64[1];
        *v24 = vuzp1q_s32(v27, v77);
        v24[1] = vuzp2q_s32(v27, v77);
        v78 = (int32x4_t *)((char *)a2 + 4 * (3 * (int)v13 / 4));
        v79 = (int32x4_t *)((char *)a3 + 4 * v12 - 32);
        v81 = *v78;
        v80 = v78 + 1;
        v82 = v81;
        if (v34)
        {
          v83 = v14 - 1;
          v84.i64[1] = v82.i64[1];
          do
          {
            v85 = v84.i64[1];
            v86 = v80 + 2;
            v87 = *v80;
            v84 = v80[1];
            v88.i64[0] = v80[1].i64[0];
            v88.i64[1] = v80->i64[1];
            v87.i64[1] = v85;
            *v79 = vuzp1q_s32(v88, v87);
            v79[1] = vuzp2q_s32(v88, v87);
            v79 -= 8;
            v80 += 2;
            --v83;
          }
          while (v83);
          v80 = v86;
        }
        else
        {
          v84.i64[1] = v82.i64[1];
        }
        v89 = *v80;
        v82.i64[1] = v80->i64[1];
        v89.i64[1] = v84.i64[1];
        v90 = vuzp1q_s32(v82, v89);
        result = vuzp2q_s32(v82, v89);
        *v79 = v90;
        v79[1] = result;
        return result;
      }
      v34 = 0;
      v12 = v13;
    }
    v29.i64[1] = v27.i64[1];
    goto LABEL_38;
  }
  if ((int)v13 >= 32)
  {
    v41 = a2 + 5;
    v43 = a3;
    v44 = v14;
    do
    {
      v45 = (float32x2x2_t)v41[-5];
      v46 = v41[-4];
      v47 = (float *)v43;
      vst2_f32(v47, v45);
      v42 = 16 * (_DWORD)v14;
      v48 = &v47[v42];
      v43[1] = vzip2q_s32((int32x4_t)v45, v46);
      v49 = (float32x2x2_t)v41[-1];
      v50 = *v41;
      vst2_f32(v48, v49);
      v48 += 4;
      *(int32x4_t *)v48 = vzip2q_s32((int32x4_t)v49, v50);
      v41 += 8;
      v43 += 2;
      --v44;
    }
    while (v44);
  }
  if ((int)v12 >= 0)
    v51 = v12;
  else
    v51 = v12 + 1;
  v52 = (int32x4_t *)((char *)a3 + 4 * (v51 >> 1));
  v53 = a2[2];
  v54 = a2[3];
  v55 = vzip1q_s32(v53, v54);
  v56 = vzip2q_s32(v53, v54);
  v54.i64[0] = v56.i64[0];
  v54.i64[1] = v55.i64[1];
  v52[-1] = v54;
  i8 = v52[-1].i8;
  if ((int)v12 < 64)
  {
    v62.i64[1] = v56.i64[1];
  }
  else
  {
    v58 = v14 - 1;
    v59 = a2 + 11;
    do
    {
      v60 = v59[-1];
      v61 = vzip1q_s32(v60, *v59);
      v62 = vzip2q_s32(v60, *v59);
      *(_QWORD *)&v63 = v62.i64[0];
      *((_QWORD *)&v63 + 1) = v61.i64[1];
      v61.i64[1] = v56.i64[1];
      *((_OWORD *)i8 - 2) = v63;
      *((int32x4_t *)i8 - 1) = v61;
      i8 -= 32;
      v59 += 8;
      v56.i64[1] = v62.i64[1];
      --v58;
    }
    while (v58);
  }
  v55.i64[1] = v62.i64[1];
  *((int32x4_t *)i8 - 1) = v55;
  v66 = (int32x4_t *)((char *)a3 + 4 * v12);
  v67 = a2[6];
  v68 = a2[7];
  result = vzip1q_s32(v67, v68);
  v69 = vzip2q_s32(v67, v68);
  v68.i64[0] = v69.i64[0];
  v68.i64[1] = result.i64[1];
  v66[-1] = v68;
  v70 = v66[-1].i8;
  if ((int)v12 < 64)
  {
    result.i64[1] = v69.i64[1];
    *((int32x4_t *)v70 - 1) = result;
  }
  else
  {
    v71 = v14 - 1;
    v72 = a2 + 15;
    do
    {
      v73 = v72[-1];
      v74 = vzip1q_s32(v73, *v72);
      v75 = vzip2q_s32(v73, *v72);
      *(_QWORD *)&v76 = v75.i64[0];
      *((_QWORD *)&v76 + 1) = v74.i64[1];
      v74.i64[1] = v69.i64[1];
      *((_OWORD *)v70 - 2) = v76;
      *((int32x4_t *)v70 - 1) = v74;
      v70 -= 32;
      v72 += 8;
      v69.i64[1] = v75.i64[1];
      --v71;
    }
    while (v71);
    result.i64[1] = v75.i64[1];
    *((int32x4_t *)v70 - 1) = result;
  }
  return result;
}

int32x4_t pffft_transform_internal(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, int a6)
{
  unint64_t v9;
  uint64_t v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t *v13;
  int v14;
  int32x4_t v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  char v19;
  int v20;
  float32x4_t *v21;
  int v22;
  int32x4_t *v23;
  float32x4_t *v24;
  float32x4_t *v25;
  unint64_t v26;
  float32x4_t *v27;
  float32x4_t *v28;
  int32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  float32x2x2_t v67;
  float32x2x2_t v68;
  int32x4_t v69;
  int32x4_t v70;
  float32x2x2_t v71;
  int32x4_t v72;
  float *v73;
  float32x2x2_t v74;
  int32x4_t v75;
  float *i32;
  float *v77;
  float32x4_t *v78;
  int32x4_t result;
  int v80;
  int32x4_t *v81;
  unint64_t v82;
  float *v83;
  int32x4_t v84;
  int32x4_t v85;
  float32x4_t *v86;
  int32x4_t *v87;
  int32x4_t *v88;
  unint64_t v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  float32x4_t *v93;
  _BOOL4 v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t *v143;
  uint64_t v144;
  int32x4_t *v146;
  int32x4_t *v147;
  int32x4_t v148;
  _QWORD v150[3];

  v150[2] = *MEMORY[0x24BDAC8D0];
  v9 = *(unsigned int *)(a1 + 4);
  v10 = MEMORY[0x24BDAC7A8](a1, a2);
  v17 = (float32x4_t *)((char *)&v150[-1] - v16);
  v18 = v10 + 8;
  v20 = v19 & 1;
  if (v13)
    v21 = v13;
  else
    v21 = v17;
  v150[0] = v12;
  v150[1] = v21;
  if (!v14)
  {
    v86 = (float32x4_t *)v150[v20 == a6];
    if (*(_DWORD *)(a1 + 68))
    {
      if ((int)v9 >= 1)
      {
        v87 = (int32x4_t *)&v86[1];
        v88 = (int32x4_t *)&v11[1];
        v89 = v9;
        do
        {
          v90 = v88[-1];
          v91 = vuzp1q_s32(v90, *v88);
          v92 = vuzp2q_s32(v90, *v88);
          v87[-1] = v91;
          *v87 = v92;
          v87 += 2;
          v88 += 2;
          --v89;
        }
        while (v89);
      }
      v93 = cfftf1_ps(v9, v86, (float32x4_t *)v150[v20 != a6], v86, *(_QWORD *)(a1 + 88), v18, -1);
      v94 = v93 != a3;
      if ((int)v9 >= 4)
      {
        v95 = v150[v93 == a3];
        v96 = v9 >> 2;
        v97 = v150[v93 != a3] + 64;
        v98 = *(_QWORD *)(a1 + 80) + 48;
        do
        {
          v99 = *(int32x4_t *)(v97 - 64);
          v100 = *(int32x4_t *)(v97 - 48);
          v101 = *(int32x4_t *)(v97 - 32);
          v102 = *(int32x4_t *)(v97 - 16);
          v103 = *(int32x4_t *)(v97 + 16);
          v104 = *(int32x4_t *)(v97 + 32);
          v105 = *(int32x4_t *)(v97 + 48);
          v106 = vzip1q_s32(v99, *(int32x4_t *)v97);
          v107 = vzip2q_s32(v99, *(int32x4_t *)v97);
          v108 = vzip1q_s32(v101, v104);
          v109 = vzip2q_s32(v101, v104);
          v110 = (float32x4_t)vzip1q_s32(v106, v108);
          v111 = (float32x4_t)vzip2q_s32(v106, v108);
          v112 = (float32x4_t)vzip1q_s32(v107, v109);
          v113 = (float32x4_t)vzip2q_s32(v107, v109);
          v114 = vzip1q_s32(v100, v103);
          v115 = vzip2q_s32(v100, v103);
          v116 = vzip1q_s32(v102, v105);
          v117 = vzip2q_s32(v102, v105);
          v118 = (float32x4_t)vzip1q_s32(v114, v116);
          v119 = (float32x4_t)vzip2q_s32(v114, v116);
          v120 = (float32x4_t)vzip1q_s32(v115, v117);
          v121 = (float32x4_t)vzip2q_s32(v115, v117);
          v123 = *(float32x4_t *)(v98 - 48);
          v122 = *(float32x4_t *)(v98 - 32);
          v124 = vmulq_f32(v111, v122);
          v125 = vsubq_f32(vmulq_f32(v111, v123), vmulq_f32(v122, v119));
          v126 = vaddq_f32(v124, vmulq_f32(v119, v123));
          v127 = *(float32x4_t *)(v98 + 16);
          v128 = *(float32x4_t *)(v98 - 16);
          v129 = vsubq_f32(vmulq_f32(v112, v128), vmulq_f32(v120, *(float32x4_t *)v98));
          v130 = vaddq_f32(vmulq_f32(v112, *(float32x4_t *)v98), vmulq_f32(v120, v128));
          v131 = *(float32x4_t *)(v98 + 32);
          v132 = vmulq_f32(v113, v131);
          v133 = vsubq_f32(vmulq_f32(v113, v127), vmulq_f32(v121, v131));
          v134 = vaddq_f32(v132, vmulq_f32(v121, v127));
          v135 = vaddq_f32(v110, v129);
          v136 = vsubq_f32(v110, v129);
          v137 = vaddq_f32(v125, v133);
          v138 = vsubq_f32(v125, v133);
          v139 = vaddq_f32(v118, v130);
          v140 = vsubq_f32(v118, v130);
          v141 = vaddq_f32(v126, v134);
          v142 = vsubq_f32(v126, v134);
          *(float32x4_t *)v95 = vaddq_f32(v135, v137);
          *(float32x4_t *)(v95 + 16) = vaddq_f32(v139, v141);
          *(float32x4_t *)(v95 + 32) = vaddq_f32(v136, v142);
          *(float32x4_t *)(v95 + 48) = vsubq_f32(v140, v138);
          result = (int32x4_t)vaddq_f32(v140, v138);
          *(float32x4_t *)(v95 + 64) = vsubq_f32(v135, v137);
          *(float32x4_t *)(v95 + 80) = vsubq_f32(v139, v141);
          *(float32x4_t *)(v95 + 96) = vsubq_f32(v136, v142);
          *(int32x4_t *)(v95 + 112) = result;
          v97 += 128;
          v98 += 96;
          v95 += 128;
          --v96;
        }
        while (v96);
      }
      v80 = v93 == a3;
      if (!a6)
        goto LABEL_27;
    }
    else
    {
      v143 = rfftf1_ps(2 * (int)v9, v11, v86, (float32x4_t *)v150[v20 != a6], *(_QWORD *)(a1 + 88), v18);
      v94 = v143 != a3;
      result = pffft_real_finalize(v9, (__int128 *)v150[v143 != a3], (float32x4_t *)v150[v143 == a3], (float32x4_t *)*(_QWORD *)(a1 + 80));
      v80 = !v94;
      if (!a6)
        goto LABEL_27;
    }
    result.i64[0] = pffft_zreorder((unsigned int *)a1, (int32x4_t *)v150[v80], (int32x4_t *)v150[v94], 0, result).u64[0];
    v80 = v94;
    goto LABEL_27;
  }
  v22 = (v20 != a6) ^ (v150[v20 != a6] == (_QWORD)v11);
  if (a6)
  {
    v23 = (int32x4_t *)v150[v22];
    pffft_zreorder((unsigned int *)a1, (int32x4_t *)v11, v23, 1, v15);
    v22 ^= 1u;
    v11 = (float32x4_t *)v23;
  }
  v24 = (float32x4_t *)v150[v22];
  v25 = *(float32x4_t **)(a1 + 80);
  if (!*(_DWORD *)(a1 + 68))
  {
    pffft_real_preprocess(v9, v11, v150[v22], v25);
    v80 = rfftb1_ps(2 * (int)v9, v24, a3, v21, *(_QWORD *)(a1 + 88), v18) != a3;
    goto LABEL_27;
  }
  if ((int)v9 >= 4)
  {
    v26 = v9 >> 2;
    v27 = v11 + 4;
    v28 = v25 + 3;
    v29 = (int32x4_t *)v150[v22];
    do
    {
      v30 = v27[-4];
      v31 = v27[-3];
      v32 = v27[-2];
      v33 = v27[-1];
      v34 = v27[1];
      v35 = v27[2];
      v36 = v27[3];
      v37 = vaddq_f32(v30, *v27);
      v38 = vsubq_f32(v30, *v27);
      v39 = vaddq_f32(v32, v35);
      v40 = vsubq_f32(v32, v35);
      v41 = vaddq_f32(v31, v34);
      v42 = vsubq_f32(v31, v34);
      v43 = vaddq_f32(v33, v36);
      v44 = vsubq_f32(v33, v36);
      v45 = (int32x4_t)vaddq_f32(v37, v39);
      v46 = (int32x4_t)vaddq_f32(v41, v43);
      v47 = vsubq_f32(v38, v44);
      v48 = vaddq_f32(v42, v40);
      v49 = vsubq_f32(v37, v39);
      v50 = vsubq_f32(v41, v43);
      v51 = vaddq_f32(v38, v44);
      v52 = vsubq_f32(v42, v40);
      v54 = v28[-3];
      v53 = v28[-2];
      v55 = vmulq_f32(v53, v47);
      v56 = (int32x4_t)vaddq_f32(vmulq_f32(v48, v53), vmulq_f32(v47, v54));
      v57 = (int32x4_t)vsubq_f32(vmulq_f32(v48, v54), v55);
      v58 = v28[1];
      v59 = vmulq_f32(v49, *v28);
      v60 = v28[-1];
      v61 = (int32x4_t)vaddq_f32(vmulq_f32(v50, *v28), vmulq_f32(v49, v60));
      v62 = (int32x4_t)vsubq_f32(vmulq_f32(v50, v60), v59);
      v63 = v28[2];
      v64 = vmulq_f32(v51, v63);
      v65 = (int32x4_t)vaddq_f32(vmulq_f32(v52, v63), vmulq_f32(v51, v58));
      v66 = (int32x4_t)vsubq_f32(vmulq_f32(v52, v58), v64);
      v67 = (float32x2x2_t)vzip1q_s32(v45, v61);
      v68 = (float32x2x2_t)vzip2q_s32(v45, v61);
      v69 = vzip1q_s32(v56, v65);
      v70 = vzip2q_s32(v56, v65);
      v71 = (float32x2x2_t)vzip1q_s32(v46, v62);
      v72 = vzip1q_s32(v57, v66);
      v73 = (float *)v29;
      vst2_f32(v73, v67);
      v73 += 4;
      vst2_f32(v73, v71);
      v74 = (float32x2x2_t)vzip2q_s32(v46, v62);
      v75 = vzip2q_s32(v57, v66);
      v29[2] = vzip2q_s32((int32x4_t)v67, v69);
      v29[3] = vzip2q_s32((int32x4_t)v71, v72);
      i32 = (float *)v29[4].i32;
      vst2_f32(i32, v68);
      v77 = (float *)v29[5].i32;
      vst2_f32(v77, v74);
      v29[6] = vzip2q_s32((int32x4_t)v68, v70);
      v29[7] = vzip2q_s32((int32x4_t)v74, v75);
      v27 += 8;
      v28 += 6;
      v29 += 8;
      --v26;
    }
    while (v26);
  }
  v78 = cfftf1_ps(v9, v24, a3, v21, *(_QWORD *)(a1 + 88), v18, 1);
  v80 = v78 != a3;
  if ((int)v9 >= 1)
  {
    v81 = (int32x4_t *)(v150[v78 != a3] + 16);
    v82 = v9;
    do
    {
      v83 = (float *)v81[-1].i32;
      result = v81[-1];
      v84 = *v81;
      v85 = vzip2q_s32(result, *v81);
      vst2_f32(v83, (float32x2x2_t)result);
      *v81 = v85;
      v81 += 2;
      --v82;
    }
    while (v82);
LABEL_27:
    v144 = v150[v80];
    if ((float32x4_t *)v144 != a3 && (int)v9 >= 1)
    {
      v146 = (int32x4_t *)&a3[1];
      v147 = (int32x4_t *)(v144 + 16);
      do
      {
        result = v147[-1];
        v148 = *v147;
        v146[-1] = result;
        *v146 = v148;
        v146 += 2;
        v147 += 2;
        --v9;
      }
      while (v9);
    }
  }
  return result;
}

float32x4_t *rfftf1_ps(int a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6)
{
  float32x4_t *v7;
  uint64_t v8;
  int v9;
  float32x4_t *v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  unint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  float32x4_t *v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  float32x4_t *v43;
  float32x4_t *v44;
  uint64_t v45;
  uint64_t v46;
  float *v47;
  float *v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t *v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  uint64_t v77;
  float32x4_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  float32x4_t *v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  float v119;
  float v120;
  float v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t *v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t *v166;
  float32x4_t *v167;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int v179;
  uint64_t v180;
  int v181;
  int v182;
  float32x4_t *v183;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;

  v7 = a2;
  v8 = *(unsigned int *)(a6 + 4);
  if ((int)v8 >= 1)
  {
    v9 = a1 - 1;
    if (a2 == a4)
      v10 = a3;
    else
      v10 = a4;
    v181 = v8 + 2;
    v180 = v8 + 1;
    v186 = a5 + 4;
    v11 = (float32x4_t)vdupq_n_s32(0x3F5DB3D7u);
    v12 = 1;
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = (float32x4_t)vdupq_n_s32(0x3E9E377Au);
    v15 = (float32x4_t)vdupq_n_s32(0x3F4F1BBDu);
    v16 = (float32x4_t)vdupq_n_s32(0x3F737871u);
    v17 = (float32x4_t)vdupq_n_s32(0x3F167918u);
    LODWORD(v18) = a1;
    v176 = v14;
    v177 = v11;
    v174 = v16;
    v175 = v15;
    v173 = v17;
    v183 = a3;
    v182 = a1;
    do
    {
      v189 = v12;
      v20 = *(_DWORD *)(a6 + 4 * (v181 - (int)v12));
      v21 = (a1 / (int)v18);
      v22 = v21 * (v20 - 1);
      v23 = v9 - v22;
      v18 = ((int)v18 / v20);
      switch(v20)
      {
        case 2:
          radf2_ps(v21, v18, (uint64_t)v7, (uint64_t)v10, a5 + 4 * v23);
          goto LABEL_7;
        case 3:
          if ((int)v18 >= 1)
          {
            v24 = (2 * v18);
            v25 = 16 * (int)v21;
            v26 = v7;
            v27 = v10;
            v28 = v18;
            v29.i64[0] = 0xBF000000BF000000;
            v29.i64[1] = 0xBF000000BF000000;
            do
            {
              v30 = *(float32x4_t *)((char *)v26 + v25 * v18);
              v31 = *(float32x4_t *)((char *)v26 + v25 * v24);
              v32 = vaddq_f32(v30, v31);
              v33 = *v26;
              *v27 = vaddq_f32(*v26, v32);
              v27[2 * (int)v21] = vmulq_f32(vsubq_f32(v31, v30), v11);
              v27[(int)v21 + (uint64_t)((int)v21 - 1)] = vaddq_f32(v33, vmulq_f32(v32, v29));
              v27 += 3 * (int)v21;
              v26 = (float32x4_t *)((char *)v26 + v25);
              --v28;
            }
            while (v28);
            if ((int)v21 >= 3)
            {
              v34 = 0;
              v35 = &v10[2 * v21];
              v36 = v21 + 2 * v21;
              v37 = 16 * v36;
              v38 = (v21 << 33) - 0x300000000;
              v39 = v36 << 32;
              v40 = v186 - 4 * v22 + 4 * v9;
              v41 = 16 * v21;
              v42 = (char *)v7 + v41 * v24;
              v43 = &v7[v18 * (unint64_t)v21];
              v44 = v10;
              do
              {
                v45 = 0;
                v46 = 0xFFFFFFFFFFFFFFELL;
                v47 = (float *)(v186 + 4 * (v23 + (int)v21));
                v48 = (float *)v40;
                v49 = v38;
                v50 = 2;
                do
                {
                  v51 = *(v48 - 1);
                  v52 = v43[v45 + 1];
                  v53 = v43[v45 + 2];
                  v54 = vaddq_f32(vmulq_n_f32(v52, v51), vmulq_n_f32(v53, *v48));
                  v55 = vsubq_f32(vmulq_n_f32(v53, v51), vmulq_n_f32(v52, *v48));
                  v52.f32[0] = *(v47 - 1);
                  v56 = *(float32x4_t *)&v42[v45 * 16 + 16];
                  v57 = *(float32x4_t *)&v42[v45 * 16 + 32];
                  v58 = vaddq_f32(vmulq_n_f32(v56, v52.f32[0]), vmulq_n_f32(v57, *v47));
                  v59 = vsubq_f32(vmulq_n_f32(v57, v52.f32[0]), vmulq_n_f32(v56, *v47));
                  v60 = vaddq_f32(v54, v58);
                  v61 = vaddq_f32(v55, v59);
                  v62 = v7[v45 + 1];
                  v63 = v7[v45 + 2];
                  v64 = &v44[v45];
                  v64[1] = vaddq_f32(v62, v60);
                  v64[2] = vaddq_f32(v63, v61);
                  v65 = vsubq_f32(v62, vmulq_f32(v60, v13));
                  v66 = vsubq_f32(v63, vmulq_f32(v61, v13));
                  v67 = vmulq_f32(vsubq_f32(v55, v59), v11);
                  v68 = vmulq_f32(vsubq_f32(v58, v54), v11);
                  v69 = &v35[v45];
                  v69[1] = vaddq_f32(v67, v65);
                  *(float32x4_t *)((char *)v10 + (v49 >> 28)) = vsubq_f32(v65, v67);
                  v69[2] = vaddq_f32(v68, v66);
                  v35[v46] = vsubq_f32(v68, v66);
                  v50 += 2;
                  v46 -= 2;
                  v49 -= 0x200000000;
                  v48 += 2;
                  v45 += 2;
                  v47 += 2;
                }
                while (v50 < v21);
                ++v34;
                v35 = (float32x4_t *)((char *)v35 + v37);
                v38 += v39;
                v42 += v41;
                v43 = (float32x4_t *)((char *)v43 + v41);
                v44 = (float32x4_t *)((char *)v44 + v37);
                v7 = (float32x4_t *)((char *)v7 + v41);
              }
              while (v34 != v18);
            }
          }
          break;
        case 4:
          radf4_ps(v21, v18, v7, v10, a5 + 4 * v23, a5 + 4 * (v23 + (int)v21), a5 + 4 * (v23 + (int)v21 + (int)v21));
LABEL_7:
          v17 = v173;
          v16 = v174;
          v15 = v175;
          v14 = v176;
          v13.i64[0] = 0x3F0000003F000000;
          v13.i64[1] = 0x3F0000003F000000;
          v11 = v177;
          break;
        case 5:
          if ((int)v18 >= 1)
          {
            v70 = 0;
            v188 = v9 - v22;
            v71 = v23 + v21 + v21;
            v171 = v23 + (int)v21;
            v172 = v71;
            v170 = v71 + (int)v21;
            v72 = (int)v21 * ~(_DWORD)v18 - 1;
            v187 = (v18 + 1);
            v73 = v187 - 1;
            v74 = 5 * v21;
            v75 = 10 * v21;
            v76 = 8 * v21;
            v77 = -2 - 6 * (int)v21;
            v78 = &v10[6 * (int)v21 + 2 + v77];
            v79 = (uint64_t)&v7[(v18 + 1) * (int)v21 + 1];
            v169 = 3 * (int)v18 + 1;
            v80 = (uint64_t)&v7[v169 * (int)v21 + 1];
            v81 = (4 * (int)v18) | 1;
            v82 = (uint64_t)&v7[(int)v81 * (uint64_t)(int)v21 + 1];
            v83 = (2 * v18) | 1;
            v84 = (uint64_t)&v7[v83 * (int)v21 + 1];
            v85 = 5 * (int)v18 + 1;
            v86 = (uint64_t)&v7[v85 * (int)v21 + 1];
            v87 = 16 * (int)v21;
            v88 = &v10[~(6 * (int)v21)];
            do
            {
              v89 = v72;
              v90 = *(float32x4_t *)(v86 + 16 * v72);
              v91 = *(float32x4_t *)(v84 + 16 * v72);
              v92 = vaddq_f32(v90, v91);
              v93 = *(float32x4_t *)(v82 + 16 * v72);
              v94 = *(float32x4_t *)(v80 + 16 * v72);
              v95 = vsubq_f32(v90, v91);
              v96 = vaddq_f32(v93, v94);
              v97 = vsubq_f32(v93, v94);
              v98 = *(float32x4_t *)(v79 + 16 * v72);
              *v78 = vaddq_f32(v98, vaddq_f32(v92, v96));
              v88[v76 + v70] = vaddq_f32(v98, vsubq_f32(vmulq_f32(v92, v14), vmulq_f32(v96, v15)));
              v88[v76 + 1 + v70] = vaddq_f32(vmulq_f32(v95, v16), vmulq_f32(v97, v17));
              v88[v75 + v70] = vaddq_f32(v98, vsubq_f32(vmulq_f32(v96, v14), vmulq_f32(v92, v15)));
              v88[v75 + 1 + v70] = vsubq_f32(vmulq_f32(v95, v17), vmulq_f32(v97, v16));
              v70 += v74;
              v78 += 5 * (int)v21;
              v79 += v87;
              v80 += v87;
              v82 += v87;
              v84 += v87;
              v86 += v87;
              --v73;
            }
            while (v73);
            v23 = v9 - v22;
            if ((int)v21 > 2)
            {
              v99 = v76 - 2;
              v100 = 16 * (v21 + 4 * v21);
              v101 = (uint64_t)&v10[10 * v21 + 3 + v77];
              v102 = (uint64_t)&v10[8 * v21 + 3 + v77];
              v103 = 10 * v21 - 2;
              v104 = (uint64_t)&v10[6 * v21 + 3 + v77];
              v105 = (uint64_t)&v7[(v18 + 1) * v21 + 2 + v89];
              v106 = 16 * v21;
              v107 = 4 * v9;
              v108 = (uint64_t)&v7[v85 * v21 + 3 + v89];
              v109 = (uint64_t)&v7[v81 * v21 + 3 + v89];
              v110 = (uint64_t)&v7[v169 * v21 + 3 + v89];
              v111 = (unint64_t)&v7[v83 * (unint64_t)v21 + 3 + v89];
              v112 = 1;
              v113 = v107 - 4 * v22;
              v179 = v18;
              do
              {
                v114 = 0;
                v115 = v186;
                v116 = v103;
                v117 = v99;
                v118 = 3;
                do
                {
                  v119 = *(float *)(v115 + v113 - 4);
                  v120 = *(float *)(v115 + v113);
                  v121 = *(float *)(v115 + 4 * v171 - 4);
                  v122 = *(float *)(v115 + 4 * v171);
                  v123 = *(float *)(v115 + 4 * v172 - 4);
                  v124 = *(float *)(v115 + 4 * v172);
                  v125 = *(float *)(v115 + 4 * v170 - 4);
                  v126 = *(float *)(v115 + 4 * v170);
                  v128 = *(float32x4_t *)(v111 + v114 - 16);
                  v127 = *(float32x4_t *)(v111 + v114);
                  v129 = vmulq_n_f32(v127, v119);
                  v130 = vaddq_f32(vmulq_n_f32(v127, v120), vmulq_n_f32(v128, v119));
                  v131 = vsubq_f32(vmulq_n_f32(v128, v120), v129);
                  v133 = *(float32x4_t *)(v110 + v114 - 16);
                  v132 = *(float32x4_t *)(v110 + v114);
                  v134 = vmulq_n_f32(v132, v121);
                  v135 = vaddq_f32(vmulq_n_f32(v132, v122), vmulq_n_f32(v133, v121));
                  v136 = vsubq_f32(vmulq_n_f32(v133, v122), v134);
                  v138 = *(float32x4_t *)(v109 + v114 - 16);
                  v137 = *(float32x4_t *)(v109 + v114);
                  v139 = vmulq_n_f32(v137, v123);
                  v140 = vaddq_f32(vmulq_n_f32(v137, v124), vmulq_n_f32(v138, v123));
                  v141 = vsubq_f32(vmulq_n_f32(v138, v124), v139);
                  v143 = *(float32x4_t *)(v108 + v114 - 16);
                  v142 = *(float32x4_t *)(v108 + v114);
                  v144 = vmulq_n_f32(v142, v125);
                  v145 = vaddq_f32(vmulq_n_f32(v142, v126), vmulq_n_f32(v143, v125));
                  v146 = vsubq_f32(vmulq_n_f32(v143, v126), v144);
                  v147 = vaddq_f32(v130, v145);
                  v148 = vsubq_f32(v145, v130);
                  v149 = vsubq_f32(v131, v146);
                  v150 = vaddq_f32(v131, v146);
                  v151 = vaddq_f32(v135, v140);
                  v152 = vsubq_f32(v140, v135);
                  v153 = vsubq_f32(v136, v141);
                  v154 = vaddq_f32(v136, v141);
                  v155 = *(float32x4_t *)(v105 + v114);
                  v156 = *(float32x4_t *)(v105 + v114 + 16);
                  v157 = (float32x4_t *)(v104 + v114);
                  *v157 = vaddq_f32(v155, vaddq_f32(v151, v147));
                  v157[1] = vsubq_f32(v156, vaddq_f32(v154, v150));
                  v158 = vaddq_f32(v155, vsubq_f32(vmulq_f32(v147, v14), vmulq_f32(v151, v15)));
                  v159 = vsubq_f32(v156, vsubq_f32(vmulq_f32(v150, v14), vmulq_f32(v154, v15)));
                  v160 = vaddq_f32(v155, vsubq_f32(vmulq_f32(v151, v14), vmulq_f32(v147, v15)));
                  v161 = vsubq_f32(v156, vsubq_f32(vmulq_f32(v154, v14), vmulq_f32(v150, v15)));
                  v162 = vaddq_f32(vmulq_f32(v153, v17), vmulq_f32(v149, v16));
                  v163 = vaddq_f32(vmulq_f32(v152, v17), vmulq_f32(v148, v16));
                  v164 = vsubq_f32(vmulq_f32(v149, v17), vmulq_f32(v153, v16));
                  v165 = vsubq_f32(vmulq_f32(v148, v17), vmulq_f32(v152, v16));
                  v166 = (float32x4_t *)(v102 + v114);
                  *v166 = vsubq_f32(v158, v162);
                  v88[v117] = vaddq_f32(v162, v158);
                  v166[1] = vaddq_f32(v163, v159);
                  v88[v117 + 1] = vsubq_f32(v163, v159);
                  v167 = (float32x4_t *)(v101 + v114);
                  *v167 = vsubq_f32(v160, v164);
                  v88[v116] = vaddq_f32(v164, v160);
                  v167[1] = vaddq_f32(v165, v161);
                  v88[v116 + 1] = vsubq_f32(v165, v161);
                  v118 += 2;
                  v117 -= 2;
                  v114 += 32;
                  v116 -= 2;
                  v115 += 8;
                }
                while (v118 <= v21);
                ++v112;
                v99 += v74;
                v101 += v100;
                v102 += v100;
                v103 += v74;
                v104 += v100;
                v105 += v106;
                v108 += v106;
                v109 += v106;
                v110 += v106;
                v111 += v106;
                LODWORD(v18) = v179;
                v23 = v188;
              }
              while (v112 != v187);
            }
          }
          break;
        default:
          break;
      }
      v19 = v10 == a4;
      if (v10 == a4)
        v10 = v183;
      else
        v10 = a4;
      if (v19)
        v7 = a4;
      else
        v7 = v183;
      v12 = v189 + 1;
      v9 = v23;
      a1 = v182;
    }
    while (v189 + 1 != v180);
  }
  return v7;
}

int32x4_t pffft_real_finalize(int a1, __int128 *a2, float32x4_t *a3, float32x4_t *a4)
{
  int32x4_t v4;
  __int128 v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t result;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  __int128 v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  int32x4_t *v52;
  float32x4_t *v53;
  float32x4_t *v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;

  v5 = *a2;
  v4 = (int32x4_t)a2[1];
  v7 = (int32x4_t)a2[2];
  v6 = (int32x4_t)a2[3];
  v8 = (int32x4_t)a2[4];
  v9 = (int32x4_t)a2[5];
  v10 = vzip1q_s32((int32x4_t)0, v6);
  v11 = vzip2q_s32((int32x4_t)0, v6);
  v12 = vzip1q_s32(v4, v9);
  v13 = vzip2q_s32(v4, v9);
  v14 = (float32x4_t)vzip1q_s32(v10, v12);
  v15 = (float32x4_t)vzip2q_s32(v10, v12);
  v16 = (float32x4_t)vzip1q_s32(v11, v13);
  v17 = (float32x4_t)vzip2q_s32(v11, v13);
  v19 = (int32x4_t)a2[6];
  result = (int32x4_t)a2[7];
  v20 = vzip1q_s32((int32x4_t)0, v8);
  v21 = vzip2q_s32((int32x4_t)0, v8);
  v22 = vzip1q_s32(v7, v19);
  v23 = a2[2 * a1 - 1];
  v24 = vzip2q_s32(v7, v19);
  v25 = (float32x4_t)vzip1q_s32(v20, v22);
  v26 = (float32x4_t)vzip2q_s32(v20, v22);
  v27 = (float32x4_t)vzip1q_s32(v21, v24);
  v28 = (float32x4_t)vzip2q_s32(v21, v24);
  v29 = a4[1];
  v30 = vmulq_f32(v15, v29);
  v31 = vsubq_f32(vmulq_f32(v15, *a4), vmulq_f32(v29, v26));
  v32 = vaddq_f32(v30, vmulq_f32(v26, *a4));
  v34 = a4[2];
  v33 = a4[3];
  v35 = vmulq_f32(v16, v33);
  v36 = vsubq_f32(vmulq_f32(v16, v34), vmulq_f32(v27, v33));
  v37 = vaddq_f32(v35, vmulq_f32(v27, v34));
  v39 = a4[4];
  v38 = a4[5];
  v40 = vmulq_f32(v17, v38);
  v41 = vsubq_f32(vmulq_f32(v17, v39), vmulq_f32(v28, v38));
  v42 = vaddq_f32(v40, vmulq_f32(v28, v39));
  v43 = vaddq_f32(v14, v36);
  v44 = vsubq_f32(v14, v36);
  v45 = vaddq_f32(v31, v41);
  v46 = vsubq_f32(v41, v31);
  v47 = vaddq_f32(v25, v37);
  v48 = vsubq_f32(v25, v37);
  v49 = vaddq_f32(v32, v42);
  v50 = vsubq_f32(v42, v32);
  *a3 = vaddq_f32(v43, v45);
  a3[1] = vaddq_f32(v47, v49);
  a3[2] = vaddq_f32(v44, v50);
  a3[3] = vsubq_f32(v46, v48);
  a3[4] = vsubq_f32(v44, v50);
  a3[5] = vaddq_f32(v48, v46);
  a3[6] = vsubq_f32(v43, v45);
  a3[7] = vsubq_f32(v49, v47);
  a3->f32[0] = (float)(*(float *)&v5 + *((float *)&v5 + 2)) + (float)(*((float *)&v5 + 1) + *((float *)&v5 + 3));
  a3[1].f32[0] = (float)(*(float *)&v5 + *((float *)&v5 + 2)) - (float)(*((float *)&v5 + 1) + *((float *)&v5 + 3));
  a3[4].f32[0] = *(float *)&v5 - *((float *)&v5 + 2);
  a3[5].f32[0] = *((float *)&v5 + 3) - *((float *)&v5 + 1);
  a3[2].f32[0] = *(float *)&v23 + (float)((float)(*((float *)&v23 + 1) - *((float *)&v23 + 3)) * 0.70711);
  a3[3].f32[0] = -(float)(*((float *)&v23 + 2) - (float)((float)(*((float *)&v23 + 1) + *((float *)&v23 + 3)) * -0.70711));
  a3[6].f32[0] = *(float *)&v23 + (float)((float)(*((float *)&v23 + 1) - *((float *)&v23 + 3)) * -0.70711);
  a3[7].f32[0] = *((float *)&v23 + 2) + (float)((float)(*((float *)&v23 + 1) + *((float *)&v23 + 3)) * -0.70711);
  if (a1 >= 8)
  {
    v51 = (a1 >> 2) - 1;
    v52 = (int32x4_t *)(a2 + 15);
    v53 = a3 + 15;
    v54 = a4 + 11;
    do
    {
      v55 = v52[-5];
      v56 = v52[-4];
      v57 = vzip1q_s32(result, v56);
      v58 = vzip2q_s32(result, v56);
      v59 = v52[-1];
      result = *v52;
      v60 = v52[-7];
      v61 = v52[-6];
      v62 = v52[-3];
      v63 = v52[-2];
      v64 = vzip1q_s32(v61, v63);
      v65 = vzip2q_s32(v61, v63);
      v66 = (float32x4_t)vzip1q_s32(v57, v64);
      v67 = (float32x4_t)vzip2q_s32(v57, v64);
      v68 = (float32x4_t)vzip1q_s32(v58, v65);
      v69 = (float32x4_t)vzip2q_s32(v58, v65);
      v70 = vzip1q_s32(v60, v62);
      v71 = vzip2q_s32(v60, v62);
      v72 = vzip1q_s32(v55, v59);
      v73 = vzip2q_s32(v55, v59);
      v74 = (float32x4_t)vzip1q_s32(v70, v72);
      v75 = (float32x4_t)vzip2q_s32(v70, v72);
      v76 = (float32x4_t)vzip1q_s32(v71, v73);
      v77 = (float32x4_t)vzip2q_s32(v71, v73);
      v79 = v54[-5];
      v78 = v54[-4];
      v80 = vmulq_f32(v67, v78);
      v81 = vsubq_f32(vmulq_f32(v67, v79), vmulq_f32(v78, v75));
      v82 = vaddq_f32(v80, vmulq_f32(v75, v79));
      v84 = v54[-3];
      v83 = v54[-2];
      v85 = vmulq_f32(v68, v83);
      v86 = vsubq_f32(vmulq_f32(v68, v84), vmulq_f32(v76, v83));
      v87 = vaddq_f32(v85, vmulq_f32(v76, v84));
      v88 = v54[-1];
      v89 = vmulq_f32(v69, *v54);
      v90 = vsubq_f32(vmulq_f32(v69, v88), vmulq_f32(v77, *v54));
      v91 = vaddq_f32(v89, vmulq_f32(v77, v88));
      v92 = vaddq_f32(v66, v86);
      v93 = vsubq_f32(v66, v86);
      v94 = vaddq_f32(v81, v90);
      v95 = vsubq_f32(v90, v81);
      v96 = vaddq_f32(v74, v87);
      v97 = vsubq_f32(v74, v87);
      v98 = vaddq_f32(v82, v91);
      v99 = vsubq_f32(v91, v82);
      v53[-7] = vaddq_f32(v92, v94);
      v53[-6] = vaddq_f32(v96, v98);
      v53[-5] = vaddq_f32(v93, v99);
      v53[-4] = vsubq_f32(v95, v97);
      v53[-3] = vsubq_f32(v93, v99);
      v53[-2] = vaddq_f32(v97, v95);
      v52 += 8;
      v53[-1] = vsubq_f32(v92, v94);
      *v53 = vsubq_f32(v98, v96);
      v53 += 8;
      v54 += 6;
      --v51;
    }
    while (v51);
  }
  return result;
}

float pffft_real_preprocess(int a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4)
{
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x2x2_t v50;
  int32x4_t v51;
  float32x2x2_t v52;
  int32x4_t v53;
  float *v54;
  float *v55;
  uint64_t v56;
  float32x4_t *v57;
  int32x4_t *v58;
  float32x4_t *v59;
  float *i32;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  float32x2x2_t v98;
  float32x2x2_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  float32x2x2_t v103;
  int32x4_t v104;
  float *v105;
  float32x2x2_t v106;
  int32x4_t v107;
  float *v108;
  float *v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float *v114;
  float v115;
  float v116;
  float result;

  v4 = a2->f32[0];
  v5 = a2[1].f32[0];
  v6 = a2[2].f32[0];
  v7 = a2[3].f32[0];
  v8 = a2[4].f32[0];
  v9 = a2[5].f32[0];
  v10 = a2[6].f32[0];
  v11 = a2[7].f32[0];
  v12 = a2[1];
  v13 = a2[2];
  v14 = a2[3];
  v15 = a2[4];
  v16 = a2[5];
  v17 = a2[6];
  v18 = a2[7];
  v19 = vaddq_f32(*a2, v17);
  v20 = vsubq_f32(*a2, v17);
  v21 = vaddq_f32(v13, v15);
  v22 = vsubq_f32(v13, v15);
  v23 = vaddq_f32(v12, v18);
  v24 = vsubq_f32(v12, v18);
  v25 = vaddq_f32(v14, v16);
  v26 = vsubq_f32(v14, v16);
  v27 = (int32x4_t)vaddq_f32(v21, v19);
  v28 = vsubq_f32(v19, v21);
  v29 = vsubq_f32(v20, v25);
  v30 = vaddq_f32(v25, v20);
  v31 = (int32x4_t)vsubq_f32(v24, v26);
  v32 = vaddq_f32(v26, v24);
  v33 = vsubq_f32(v23, v22);
  v34 = vaddq_f32(v22, v23);
  v35 = a4[1];
  v36 = vmulq_f32(v29, v35);
  v37 = (int32x4_t)vaddq_f32(vmulq_f32(v29, *a4), vmulq_f32(v35, v33));
  v38 = (int32x4_t)vsubq_f32(vmulq_f32(v33, *a4), v36);
  v40 = a4[2];
  v39 = a4[3];
  v41 = vmulq_f32(v28, v39);
  v42 = (int32x4_t)vaddq_f32(vmulq_f32(v32, v39), vmulq_f32(v28, v40));
  v43 = (int32x4_t)vsubq_f32(vmulq_f32(v32, v40), v41);
  v45 = a4[4];
  v44 = a4[5];
  v46 = vmulq_f32(v30, v44);
  v47 = (int32x4_t)vaddq_f32(vmulq_f32(v34, v44), vmulq_f32(v30, v45));
  v48 = (int32x4_t)vsubq_f32(vmulq_f32(v34, v45), v46);
  v49 = vzip1q_s32(v27, v42);
  v50 = (float32x2x2_t)vzip2q_s32(v27, v42);
  v51 = vzip2q_s32(v37, v47);
  v52 = (float32x2x2_t)vzip2q_s32(v31, v43);
  v53 = vzip2q_s32(v38, v48);
  v54 = (float *)(a3 + 48);
  *(int32x4_t *)(a3 + 16) = vzip2q_s32(v49, vzip1q_s32(v37, v47));
  *(int32x4_t *)(a3 + 32) = vzip2q_s32(vzip1q_s32(v31, v43), vzip1q_s32(v38, v48));
  v55 = (float *)(a3 + 64);
  vst2_f32(v54, v50);
  vst2_f32(v55, v52);
  *(int32x4_t *)(a3 + 80) = vzip2q_s32((int32x4_t)v50, v51);
  *(int32x4_t *)(a3 + 96) = vzip2q_s32((int32x4_t)v52, v53);
  if (a1 >= 8)
  {
    v56 = (a1 >> 2) - 1;
    v57 = a2 + 15;
    v58 = (int32x4_t *)(a3 + 224);
    v59 = a4 + 11;
    do
    {
      i32 = (float *)v58[-7].i32;
      v61 = v57[-7];
      v62 = v57[-6];
      v63 = v57[-5];
      v64 = v57[-4];
      v65 = v57[-3];
      v66 = v57[-2];
      v67 = v57[-1];
      v68 = vaddq_f32(v61, v67);
      v69 = vsubq_f32(v61, v67);
      v70 = vaddq_f32(v63, v65);
      v71 = vsubq_f32(v63, v65);
      v72 = vaddq_f32(v62, *v57);
      v73 = vsubq_f32(v62, *v57);
      v74 = vaddq_f32(v64, v66);
      v75 = vsubq_f32(v64, v66);
      v76 = (int32x4_t)vaddq_f32(v70, v68);
      v77 = vsubq_f32(v68, v70);
      v78 = vsubq_f32(v69, v74);
      v79 = vaddq_f32(v74, v69);
      v80 = (int32x4_t)vsubq_f32(v73, v75);
      v81 = vaddq_f32(v75, v73);
      v82 = vsubq_f32(v72, v71);
      v83 = vaddq_f32(v71, v72);
      v85 = v59[-5];
      v84 = v59[-4];
      v86 = vmulq_f32(v78, v84);
      v87 = (int32x4_t)vaddq_f32(vmulq_f32(v78, v85), vmulq_f32(v84, v82));
      v88 = (int32x4_t)vsubq_f32(vmulq_f32(v82, v85), v86);
      v90 = v59[-3];
      v89 = v59[-2];
      v91 = vmulq_f32(v77, v89);
      v92 = (int32x4_t)vaddq_f32(vmulq_f32(v81, v89), vmulq_f32(v77, v90));
      v93 = (int32x4_t)vsubq_f32(vmulq_f32(v81, v90), v91);
      v94 = v59[-1];
      v95 = vmulq_f32(v79, *v59);
      v96 = (int32x4_t)vaddq_f32(vmulq_f32(v83, *v59), vmulq_f32(v79, v94));
      v97 = (int32x4_t)vsubq_f32(vmulq_f32(v83, v94), v95);
      v98 = (float32x2x2_t)vzip1q_s32(v76, v92);
      v99 = (float32x2x2_t)vzip2q_s32(v76, v92);
      v100 = vzip1q_s32(v87, v96);
      v101 = vzip2q_s32(v87, v96);
      v102 = vzip2q_s32((int32x4_t)v98, v100);
      v103 = (float32x2x2_t)vzip1q_s32(v80, v93);
      v104 = vzip1q_s32(v88, v97);
      v105 = (float *)v58[-6].i32;
      vst2_f32(i32, v98);
      vst2_f32(v105, v103);
      v106 = (float32x2x2_t)vzip2q_s32(v80, v93);
      v107 = vzip2q_s32(v88, v97);
      v58[-5] = v102;
      v58[-4] = vzip2q_s32((int32x4_t)v103, v104);
      v108 = (float *)v58[-3].i32;
      v109 = (float *)v58[-2].i32;
      vst2_f32(v108, v99);
      vst2_f32(v109, v106);
      v58[-1] = vzip2q_s32((int32x4_t)v99, v101);
      *v58 = vzip2q_s32((int32x4_t)v106, v107);
      v57 += 8;
      v58 += 8;
      v59 += 6;
      --v56;
    }
    while (v56);
  }
  v110 = v4 + v5;
  v111 = (float)(v4 + v5) + (float)(v8 * 2.0);
  v112 = v4 - v5;
  *(float *)a3 = v111;
  *(float *)(a3 + 4) = v112 + (float)(v9 * -2.0);
  *(float *)(a3 + 8) = v110 + (float)(v8 * -2.0);
  *(float *)(a3 + 12) = v112 + (float)(v9 * 2.0);
  v113 = (float)(v6 + v10) + (float)(v6 + v10);
  v114 = (float *)(a3 + 16 * (2 * a1 - 1));
  v115 = v6 - v10;
  v116 = (float)(v7 + v11) * -1.4142;
  *v114 = v113;
  v114[1] = v116 + (float)(v115 * 1.4142);
  result = (float)(v11 - v7) + (float)(v11 - v7);
  v114[2] = result;
  v114[3] = v116 + (float)(v115 * -1.4142);
  return result;
}

float32x4_t *rfftb1_ps(int a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6)
{
  float32x4_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  float32x4_t *v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  unsigned int v19;
  BOOL v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t *v26;
  uint64_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  float32x4_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  float32x4_t *v39;
  float32x4_t *v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t *v67;
  float32x4_t v68;
  float32x4_t *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  float32x4_t *v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  uint64_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  unint64_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t *v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t *v167;
  float32x4_t *v168;
  float32x4_t *v169;
  float32x4_t *v170;
  uint64_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  float32x4_t *v182;
  uint64_t v184;
  uint64_t v187;
  float32x4_t *v188;
  int v189;
  int v190;
  int v191;
  uint64_t v192;

  v7 = a2;
  v8 = *(unsigned int *)(a6 + 4);
  if ((int)v8 >= 1)
  {
    v9 = a5;
    v10 = 0;
    if (a2 == a4)
      v11 = a3;
    else
      v11 = a4;
    v181 = v8 + 1;
    v172 = a5 + 4;
    v12 = 1;
    v13.i64[0] = 0xBF000000BF000000;
    v13.i64[1] = 0xBF000000BF000000;
    v14 = (float32x4_t)vdupq_n_s32(0x3F5DB3D7u);
    v15 = (float32x4_t)vdupq_n_s32(0x3E9E377Au);
    v16 = (float32x4_t)vdupq_n_s32(0x3F4F1BBDu);
    v17 = (float32x4_t)vdupq_n_s32(0x3F737871u);
    v18 = (float32x4_t)vdupq_n_s32(0x3F167918u);
    v19 = 1;
    v177 = v15;
    v178 = v14;
    v175 = v17;
    v176 = v16;
    v173 = (float32x4_t)vdupq_n_s32(0x3FDDB3D7u);
    v174 = v18;
    v182 = a3;
    do
    {
      v192 = v12 + 1;
      v190 = *(_DWORD *)(a6 + 4 * (v12 + 1));
      v191 = v190 * v19;
      v21 = (a1 / (int)(v190 * v19));
      switch(v190)
      {
        case 2:
          radb2_ps(v21, v19, (uint64_t)v7, v11, v9 + 4 * v10);
          goto LABEL_7;
        case 3:
          if ((int)v19 >= 1)
          {
            v22 = 2 * v19;
            v23 = v19;
            v24 = 16 * (int)v21;
            v25 = v7;
            v26 = v11;
            v27 = v19;
            do
            {
              v28 = vaddq_f32(v25[(int)v21 + (uint64_t)((int)v21 - 1)], v25[(int)v21 + (uint64_t)((int)v21 - 1)]);
              v29 = vmlaq_f32(*v25, v13, v28);
              *v26 = vaddq_f32(*v25, v28);
              v30 = vmulq_f32(v25[2 * (int)v21], v173);
              *(float32x4_t *)((char *)v26 + v24 * v19) = vsubq_f32(v29, v30);
              *(float32x4_t *)((char *)v26 + v24 * v22) = vaddq_f32(v29, v30);
              v26 = (float32x4_t *)((char *)v26 + v24);
              v25 += 3 * (int)v21;
              --v27;
            }
            while (v27);
            if ((int)v21 >= 3)
            {
              v31 = 0;
              v32 = &v7[2 * v21];
              v33 = 48 * (a1 / (int)(v190 * v19));
              v34 = (v21 << 33) - 0x300000000;
              v35 = 0x300000000 * (a1 / (int)(v190 * v19));
              v36 = 16 * (a1 / (int)(v190 * v19));
              v37 = (uint64_t)&v11[1] + v36 * v22;
              v38 = (unint64_t)&v11[v19 * (unint64_t)v21 + 1];
              v39 = v7;
              v40 = v11;
              do
              {
                v41 = 0;
                v42 = 0xFFFFFFFFFFFFFFELL;
                v43 = (float *)(v172 + 4 * ((int)v21 + v10));
                v44 = (float *)(v172 + 4 * v10);
                v45 = v34;
                v46 = 2;
                do
                {
                  v47 = *(float32x4_t *)((char *)v7 + (v45 >> 28));
                  v48 = v32[v41 + 1];
                  v49 = v32[v41 + 2];
                  v50 = vaddq_f32(v48, v47);
                  v51 = v39[v41 + 1];
                  v52 = v39[v41 + 2];
                  v53 = vaddq_f32(v51, v50);
                  v54 = vmlaq_f32(v51, v13, v50);
                  v55 = v32[v42];
                  v56 = vsubq_f32(v49, v55);
                  v57 = vaddq_f32(v52, v56);
                  v58 = vmlaq_f32(v52, v13, v56);
                  v59 = &v40[v41];
                  v59[1] = v53;
                  v59[2] = v57;
                  v60 = vmulq_f32(vsubq_f32(v48, v47), v14);
                  v61 = vmulq_f32(vaddq_f32(v49, v55), v14);
                  v62 = vsubq_f32(v54, v61);
                  v63 = vaddq_f32(v54, v61);
                  v64 = vaddq_f32(v60, v58);
                  v65 = vsubq_f32(v58, v60);
                  v53.f32[0] = *(v44 - 1);
                  v66 = vmulq_n_f32(v62, *v44);
                  v67 = (float32x4_t *)(v38 + v41 * 16);
                  *v67 = vsubq_f32(vmulq_n_f32(v62, v53.f32[0]), vmulq_n_f32(v64, *v44));
                  v67[1] = vaddq_f32(v66, vmulq_n_f32(v64, v53.f32[0]));
                  v54.f32[0] = *(v43 - 1);
                  v68 = vmulq_n_f32(v63, *v43);
                  v69 = (float32x4_t *)(v37 + v41 * 16);
                  v46 += 2;
                  v42 -= 2;
                  v45 -= 0x200000000;
                  *v69 = vsubq_f32(vmulq_n_f32(v63, v54.f32[0]), vmulq_n_f32(v65, *v43));
                  v69[1] = vaddq_f32(v68, vmulq_n_f32(v65, v54.f32[0]));
                  v41 += 2;
                  v44 += 2;
                  v43 += 2;
                }
                while (v46 < v21);
                ++v31;
                v32 = (float32x4_t *)((char *)v32 + v33);
                v34 += v35;
                v40 = (float32x4_t *)((char *)v40 + v36);
                v39 = (float32x4_t *)((char *)v39 + v33);
                v37 += v36;
                v38 += v36;
              }
              while (v31 != v23);
            }
          }
          break;
        case 4:
          radb4_ps(v21, v19, v7, v11, v9 + 4 * v10, v9 + 4 * ((int)v21 + v10), v9 + 4 * ((int)v21 + v10 + (int)v21));
LABEL_7:
          v18 = v174;
          v17 = v175;
          v16 = v176;
          v15 = v177;
          v14 = v178;
          v13.i64[0] = 0xBF000000BF000000;
          v13.i64[1] = 0xBF000000BF000000;
          break;
        case 5:
          if ((int)v19 >= 1)
          {
            v189 = v10;
            v70 = (int)v21 + v10;
            v71 = v21 + v10 + v21;
            v72 = v71;
            v73 = v71 + (int)v21;
            v74 = (int)(v21 * ~v19 - 1);
            v75 = 2 * v19;
            v76 = v19;
            v77 = (int)(3 * v19);
            v78 = (int)(4 * v19);
            v187 = v19 + 1;
            v188 = v11;
            v79 = v187 - 1;
            v80 = (int)(5 * v19) + 1;
            v81 = (uint64_t)&v11[v80 * (int)v21 + 1];
            v82 = 16 * (int)v21;
            v83 = v78 | 1;
            v84 = (uint64_t)&v11[(int)v83 * (uint64_t)(int)v21 + 1];
            v85 = v77 + 1;
            v86 = (uint64_t)&v11[(v77 + 1) * (int)v21 + 1];
            v87 = v75 | 1;
            v88 = (uint64_t)&v11[(v75 | 1) * (int)v21 + 1];
            v89 = v76 + 1;
            v90 = (uint64_t)&v11[(v76 + 1) * (int)v21 + 1];
            v91 = -2 - 6 * (int)v21;
            v92 = (uint64_t)&v7[v91 + 2];
            v93 = &v7[~(6 * (int)v21)];
            do
            {
              v94 = vaddq_f32(*(float32x4_t *)(v92 + ((uint64_t)(int)v21 << 7)), *(float32x4_t *)(v92 + ((uint64_t)(int)v21 << 7)));
              v95 = vaddq_f32(*(float32x4_t *)(v92 + 160 * (int)v21), *(float32x4_t *)(v92 + 160 * (int)v21));
              v96 = vaddq_f32(*(float32x4_t *)(v92 + ((uint64_t)(int)v21 << 7) - 16), *(float32x4_t *)(v92 + ((uint64_t)(int)v21 << 7) - 16));
              v97 = vaddq_f32(*(float32x4_t *)(v92 + 160 * (int)v21 - 16), *(float32x4_t *)(v92 + 160 * (int)v21 - 16));
              v98 = *(float32x4_t *)(v92 + 96 * (int)v21);
              v99 = 16 * v74;
              *(float32x4_t *)(v90 + v99) = vaddq_f32(v98, vaddq_f32(v96, v97));
              v100 = vaddq_f32(v98, vsubq_f32(vmulq_f32(v96, v15), vmulq_f32(v97, v16)));
              v101 = vaddq_f32(v98, vsubq_f32(vmulq_f32(v97, v15), vmulq_f32(v96, v16)));
              v102 = vaddq_f32(vmulq_f32(v94, v17), vmulq_f32(v95, v18));
              v103 = vsubq_f32(vmulq_f32(v94, v18), vmulq_f32(v95, v17));
              *(float32x4_t *)(v88 + v99) = vsubq_f32(v100, v102);
              *(float32x4_t *)(v86 + v99) = vsubq_f32(v101, v103);
              *(float32x4_t *)(v84 + v99) = vaddq_f32(v103, v101);
              *(float32x4_t *)(v81 + v99) = vaddq_f32(v102, v100);
              v81 += v82;
              v84 += v82;
              v86 += v82;
              v88 += v82;
              v90 += v82;
              v92 += 80 * (int)v21;
              --v79;
            }
            while (v79);
            if ((int)v21 > 2)
            {
              v104 = 8 * v21 - 1;
              v105 = (uint64_t)&v11[v80 * v21 + 2 + (unint64_t)v99 / 0x10];
              v106 = v99 + 16 * v83 * v21;
              v107 = 16 * v21;
              v108 = (char *)&v11[2] + v106;
              v109 = 10 * v21 - 1;
              v110 = (uint64_t)&v11[v85 * v21 + 2 + (unint64_t)v99 / 0x10];
              v111 = (unint64_t)&v11[v87 * (unint64_t)v21 + 2 + (unint64_t)v99 / 0x10];
              v112 = (uint64_t)&v7[8 * v21 + 3 + v91];
              v180 = 16 * (v21 + 4 * v21);
              v113 = (uint64_t)&v7[10 * v21 + 3 + v91];
              v114 = (uint64_t)&v7[6 * v21 + 4 + v91];
              v115 = (uint64_t)&v11[v89 * v21 + 3 + (unint64_t)v99 / 0x10];
              v116 = 4 * v10 + 4;
              v117 = 1;
              v179 = 5 * v21;
              v184 = v9;
              do
              {
                v118 = 0;
                v119 = v9;
                v120 = v109;
                v121 = v104;
                v122 = 3;
                do
                {
                  v123 = v93[v121];
                  v125 = *(float32x4_t *)(v112 + v118);
                  v124 = *(float32x4_t *)(v112 + v118 + 16);
                  v126 = vaddq_f32(v124, v123);
                  v127 = vsubq_f32(v124, v123);
                  v128 = v93[v120];
                  v130 = *(float32x4_t *)(v113 + v118);
                  v129 = *(float32x4_t *)(v113 + v118 + 16);
                  v131 = vaddq_f32(v129, v128);
                  v132 = vsubq_f32(v129, v128);
                  v133 = v93[v121 - 1];
                  v134 = vsubq_f32(v125, v133);
                  v135 = vaddq_f32(v125, v133);
                  v136 = v93[v120 - 1];
                  v137 = vsubq_f32(v130, v136);
                  v138 = vaddq_f32(v130, v136);
                  v139 = *(float32x4_t *)(v114 + v118 - 16);
                  v140 = (float32x4_t *)(v115 + v118);
                  v140[-1] = vaddq_f32(v139, vaddq_f32(v135, v138));
                  v141 = *(float32x4_t *)(v114 + v118);
                  *v140 = vaddq_f32(vaddq_f32(v127, v132), v141);
                  v142 = vaddq_f32(v139, vsubq_f32(vmulq_f32(v135, v15), vmulq_f32(v138, v16)));
                  v143 = vaddq_f32(vsubq_f32(vmulq_f32(v127, v15), vmulq_f32(v132, v16)), v141);
                  v144 = vaddq_f32(v139, vsubq_f32(vmulq_f32(v138, v15), vmulq_f32(v135, v16)));
                  v145 = vaddq_f32(vsubq_f32(vmulq_f32(v132, v15), vmulq_f32(v127, v16)), v141);
                  v146 = vaddq_f32(vmulq_f32(v134, v17), vmulq_f32(v137, v18));
                  v147 = vaddq_f32(vmulq_f32(v126, v17), vmulq_f32(v131, v18));
                  v148 = vsubq_f32(vmulq_f32(v134, v18), vmulq_f32(v137, v17));
                  v149 = vsubq_f32(vmulq_f32(v126, v18), vmulq_f32(v131, v17));
                  v150 = vsubq_f32(v144, v149);
                  v151 = vaddq_f32(v149, v144);
                  v152 = vaddq_f32(v148, v145);
                  v153 = vsubq_f32(v145, v148);
                  v154 = vaddq_f32(v147, v142);
                  v155 = vsubq_f32(v142, v147);
                  v156 = vsubq_f32(v143, v146);
                  v157 = vaddq_f32(v146, v143);
                  v142.i32[0] = *(_DWORD *)(v119 + v116 - 4);
                  v137.i32[0] = *(_DWORD *)(v119 + v116);
                  v158 = vmulq_n_f32(v155, v137.f32[0]);
                  v159 = vsubq_f32(vmulq_n_f32(v155, v142.f32[0]), vmulq_n_f32(v157, v137.f32[0]));
                  v160 = vaddq_f32(v158, vmulq_n_f32(v157, v142.f32[0]));
                  v137.i32[0] = *(_DWORD *)(v119 + 4 * v70 + 4);
                  v161 = vmulq_n_f32(v150, v137.f32[0]);
                  v142.i32[0] = *(_DWORD *)(v119 + 4 * v70);
                  v162 = vsubq_f32(vmulq_n_f32(v150, v142.f32[0]), vmulq_n_f32(v152, v137.f32[0]));
                  v163 = vaddq_f32(v161, vmulq_n_f32(v152, v142.f32[0]));
                  v137.i32[0] = *(_DWORD *)(v119 + 4 * v72 + 4);
                  v164 = vmulq_n_f32(v151, v137.f32[0]);
                  v142.i32[0] = *(_DWORD *)(v119 + 4 * v72);
                  v165 = vsubq_f32(vmulq_n_f32(v151, v142.f32[0]), vmulq_n_f32(v153, v137.f32[0]));
                  v166 = vaddq_f32(v164, vmulq_n_f32(v153, v142.f32[0]));
                  v137.i32[0] = *(_DWORD *)(v119 + 4 * v73 + 4);
                  v164.i32[0] = *(_DWORD *)(v119 + 4 * v73);
                  v167 = (float32x4_t *)(v111 + v118);
                  *v167 = v159;
                  v167[1] = v160;
                  v168 = (float32x4_t *)(v110 + v118);
                  *v168 = v162;
                  v168[1] = v163;
                  v169 = (float32x4_t *)&v108[v118];
                  *v169 = v165;
                  v169[1] = v166;
                  v170 = (float32x4_t *)(v105 + v118);
                  v122 += 2;
                  v121 -= 2;
                  *v170 = vsubq_f32(vmulq_n_f32(v154, v164.f32[0]), vmulq_n_f32(v156, v137.f32[0]));
                  v170[1] = vaddq_f32(vmulq_n_f32(v154, v137.f32[0]), vmulq_n_f32(v156, v164.f32[0]));
                  v118 += 32;
                  v120 -= 2;
                  v119 += 8;
                }
                while (v122 <= v21);
                ++v117;
                v104 += v179;
                v105 += v107;
                v108 += v107;
                v109 += v179;
                v110 += v107;
                v111 += v107;
                v112 += v180;
                v113 += v180;
                v114 += v180;
                v115 += v107;
                v11 = v188;
                v9 = v184;
                v10 = v189;
              }
              while (v117 != v187);
            }
          }
          break;
        default:
          break;
      }
      v19 = v191;
      v10 += (v190 - 1) * v21;
      v20 = v11 == a4;
      if (v11 == a4)
        v11 = v182;
      else
        v11 = a4;
      if (v20)
        v7 = a4;
      else
        v7 = v182;
      v12 = v192;
    }
    while (v192 != v181);
  }
  return v7;
}

float pffft_zconvolve_accumulate(uint64_t a1, float *a2, float *a3, float *a4, double a5)
{
  unint64_t v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unint64_t v12;
  float32x4_t v13;
  float32x4_t *v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;

  v5 = *(unsigned int *)(a1 + 4);
  v6 = *a2;
  v7 = a2[4];
  v8 = *a3;
  v9 = a3[4];
  v10 = *a4;
  v11 = a4[4];
  if ((int)v5 >= 1)
  {
    v12 = 0;
    v13 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    v14 = (float32x4_t *)(a4 + 8);
    v15 = (float32x4_t *)(a3 + 8);
    v16 = (float32x4_t *)(a2 + 8);
    do
    {
      v17 = v16[-2];
      v18 = v16[-1];
      v19 = v15[-2];
      v20 = v15[-1];
      v21 = vmulq_f32(v17, v20);
      v22 = vsubq_f32(vmulq_f32(v17, v19), vmulq_f32(v18, v20));
      v23 = vmlaq_f32(v14[-1], v13, vaddq_f32(vmulq_f32(v18, v19), v21));
      v14[-2] = vmlaq_f32(v14[-2], v13, v22);
      v14[-1] = v23;
      v24 = *v16;
      v25 = v16[1];
      v16 += 4;
      v26 = *v15;
      v27 = v15[1];
      v15 += 4;
      v28 = vmulq_f32(v24, v27);
      v29 = vsubq_f32(vmulq_f32(v24, v26), vmulq_f32(v25, v27));
      v30 = vmlaq_f32(v14[1], v13, vaddq_f32(vmulq_f32(v25, v26), v28));
      v12 += 2;
      *v14 = vmlaq_f32(*v14, v13, v29);
      v14[1] = v30;
      v14 += 4;
    }
    while (v12 < v5);
  }
  if (!*(_DWORD *)(a1 + 68))
  {
    *a4 = v10 + (float)((float)(v6 * v8) * *(float *)&a5);
    *(float *)&a5 = v11 + (float)((float)(v7 * v9) * *(float *)&a5);
    a4[4] = *(float *)&a5;
  }
  return *(float *)&a5;
}

uint64_t radf4_ps(uint64_t result, int a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t *v10;
  unint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  float32x4_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  float32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t *v38;
  uint64_t v39;
  float *v40;
  float *v41;
  float *v42;
  unint64_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t *v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t *v69;
  float32x4_t v70;
  float32x4_t v71;
  uint64_t v72;
  uint64_t v73;
  float32x4_t *v74;
  float32x4_t *v75;
  float32x4_t *v76;
  uint64_t v77;
  int v78;
  float32x4_t v79;
  float32x4_t *v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  int v87;
  float *v88;
  float *v89;
  float *v90;

  v7 = a2 * result;
  v8 = a2 * (int)result;
  if (a2 * (int)result >= 1)
  {
    v9 = a4;
    v10 = a3;
    v11 = (unint64_t)&a3[v7];
    do
    {
      v12 = *v10;
      v13 = v10[v8];
      v14 = v10[(2 * v8)];
      v15 = v10[3 * (int)v8];
      v16 = vaddq_f32(v13, v15);
      *(float32x4_t *)((char *)v9 + ((32 * ((unint64_t)(2 * (int)result - 2) >> 1)) | 0x10)) = vsubq_f32(*v10, v14);
      v17 = vaddq_f32(v12, v14);
      v9[2 * (int)result] = vsubq_f32(v15, v13);
      *v9 = vaddq_f32(v17, v16);
      *(float32x4_t *)((char *)v9 + (((unint64_t)(4 * (int)result - 4) >> 2 << 6) | 0x30)) = vsubq_f32(v17, v16);
      v10 += (int)result;
      v9 += 4 * (int)result;
    }
    while ((unint64_t)v10 < v11);
  }
  v18 = (result - 1);
  if ((int)result > 1)
  {
    if ((_DWORD)result == 2)
    {
      if ((int)v8 < 1)
        return result;
      v19 = (2 * v8);
      v20 = 3 * (int)v8;
      LODWORD(v21) = 4;
      v22 = 6;
      v23 = 2;
      goto LABEL_14;
    }
    if ((int)v8 >= 1)
    {
      v24 = 0;
      v25 = 0;
      v23 = result;
      v26 = &a3[(2 * v8)];
      v21 = (2 * result);
      v22 = 3 * result;
      v27 = (uint64_t)&a3[v8 + 1];
      v28 = (uint64_t)&a3[(v8 + 1) + 1];
      v29 = (uint64_t)&a3[3 * (int)v8 + 1];
      v89 = (float *)(a6 + 4);
      v90 = (float *)(a7 + 4);
      v30 = 16 * result;
      v88 = (float *)(a5 + 4);
      v31 = (v21 - 4) | 1;
      v87 = 4 * result;
      v32 = (4 * result - 4) | 1;
      v33 = (uint64_t)&a3[3 * (int)v8 + 2];
      v34 = a3;
      do
      {
        v35 = 0;
        v36 = 0;
        v37 = v24;
        v38 = &a4[v37];
        v39 = (uint64_t)&a4[2 * result - 2 + v37];
        v40 = v88;
        v41 = v89;
        v42 = v90;
        v43 = 2;
        do
        {
          v44 = *(float32x4_t *)(v27 + v36 * 16);
          v45 = *(float32x4_t *)(v28 + v36 * 16);
          v46 = *(v40 - 1);
          v47 = vmulq_n_f32(v44, *v40);
          v48 = vaddq_f32(vmulq_n_f32(v44, v46), vmulq_n_f32(v45, *v40));
          v49 = vsubq_f32(vmulq_n_f32(v45, v46), v47);
          v50 = v26[v36 + 1];
          v51 = v26[v36 + 2];
          v47.f32[0] = *(v41 - 1);
          v52 = vmulq_n_f32(v50, *v41);
          v53 = vaddq_f32(vmulq_n_f32(v50, v47.f32[0]), vmulq_n_f32(v51, *v41));
          v54 = vsubq_f32(vmulq_n_f32(v51, v47.f32[0]), v52);
          v55 = *(float32x4_t *)(v29 + v36 * 16);
          v56 = *(float32x4_t *)(v33 + v36 * 16);
          v52.f32[0] = *(v42 - 1);
          v57 = vmulq_n_f32(v55, *v42);
          v58 = vaddq_f32(vmulq_n_f32(v55, v52.f32[0]), vmulq_n_f32(v56, *v42));
          v59 = vsubq_f32(vmulq_n_f32(v56, v52.f32[0]), v57);
          v60 = vaddq_f32(v48, v58);
          v61 = vsubq_f32(v58, v48);
          v62 = v34[v36 + 1];
          v63 = v34[v36 + 2];
          v64 = vaddq_f32(v53, v62);
          v65 = &v38[v36];
          v65[1] = vaddq_f32(v64, v60);
          a4[v32 + (int)v35] = vsubq_f32(v64, v60);
          v66 = vsubq_f32(v62, v53);
          v67 = vaddq_f32(v49, v59);
          v68 = vsubq_f32(v49, v59);
          v69 = &a4[v21 + 1 + v24 + v36];
          *v69 = vaddq_f32(v66, v68);
          a4[v31 + (int)v35] = vsubq_f32(v66, v68);
          v70 = vaddq_f32(v54, v63);
          v71 = vsubq_f32(v63, v54);
          v65[2] = vaddq_f32(v67, v70);
          v72 = v35;
          a4[result - 2 + (uint64_t)(3 * (int)result) + v24 + v72] = vsubq_f32(v67, v70);
          v69[1] = vaddq_f32(v61, v71);
          *(float32x4_t *)(v39 + v72 * 16) = vsubq_f32(v61, v71);
          v43 += 2;
          v36 += 2;
          v42 += 2;
          v41 += 2;
          v40 += 2;
          v35 -= 2;
        }
        while (v43 < result);
        v25 += result;
        v27 += v30;
        v28 += v30;
        v24 += v87;
        v26 = (float32x4_t *)((char *)v26 + v30);
        v29 += v30;
        v31 += v87;
        v32 += v87;
        v33 += v30;
        v34 = (float32x4_t *)((char *)v34 + v30);
        v21 = (2 * result);
      }
      while (v25 < v8);
      v18 = (result - 1);
      v20 = 3 * (int)v8;
      v19 = (2 * v8);
      if ((result & 1) == 0)
      {
LABEL_14:
        v73 = 0;
        v74 = &a3[v19 + v18];
        v75 = &a3[v18];
        v76 = &a3[v20 + v18];
        v77 = v8 + v18;
        v78 = 4 * v23;
        v79 = (float32x4_t)vdupq_n_s32(0xBF3504F3);
        v80 = &a3[v77];
        do
        {
          v81 = v80[v73];
          v82 = v76[v73];
          v83 = v75[v73];
          v84 = v74[v73];
          v85 = vmulq_f32(vaddq_f32(v81, v82), v79);
          v86 = vmulq_f32(vsubq_f32(v82, v81), v79);
          a4[(int)result - 1] = vaddq_f32(v83, v86);
          a4[(int)v21 - 1 + (int)result] = vsubq_f32(v83, v86);
          a4[(int)result] = vsubq_f32(v85, v84);
          a4[v22] = vaddq_f32(v85, v84);
          v73 += v23;
          v22 += v78;
          result = (result + v78);
        }
        while (v73 < v8);
      }
    }
  }
  return result;
}

unint64_t radf2_ps(unint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int64_t v5;
  int v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float *v20;
  unint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  uint64_t v31;
  int v32;

  v5 = (a2 * result);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(float32x4_t *)(a3 + 16 * v7);
      v9 = *(float32x4_t *)(a3 + 16 * v5 + 16 * v7);
      *(float32x4_t *)(a4 + 16 * v6) = vaddq_f32(v8, v9);
      v7 += (int)result;
      *(float32x4_t *)(a4 + 16 * (2 * (int)result - 1 + v6)) = vsubq_f32(v8, v9);
      v6 += 2 * result;
    }
    while (v7 < v5);
  }
  if ((int)result > 1)
  {
    if ((_DWORD)result == 2)
    {
      if ((int)v5 < 1)
        return result;
      v10 = 2;
      goto LABEL_14;
    }
    if ((int)v5 >= 1)
    {
      v11 = 0;
      v12 = 0;
      v10 = result;
      v13 = 16 * result;
      v14 = (float *)(a5 + 4);
      v15 = a3;
      v16 = 2 * result;
      v17 = a3 + 16 * v5;
      do
      {
        v18 = 0;
        v19 = (float32x4_t *)(a4 - 48 + 16 * v16);
        v12 += result;
        v20 = v14;
        v21 = 2;
        do
        {
          v22 = *(float32x4_t *)(v17 + v18 + 16);
          v23 = *(float32x4_t *)(v17 + v18 + 32);
          v24 = *(float32x4_t *)(v15 + v18 + 16);
          v25 = *(float32x4_t *)(v15 + v18 + 32);
          v26 = *(v20 - 1);
          v27 = vmulq_n_f32(v22, *v20);
          v28 = vaddq_f32(vmulq_n_f32(v23, *v20), vmulq_n_f32(v22, v26));
          v29 = vsubq_f32(vmulq_n_f32(v23, v26), v27);
          v30 = (float32x4_t *)(a4 + 16 + 32 * (v11 >> 1) + v18);
          v30[1] = vaddq_f32(v25, v29);
          v19[1] = vsubq_f32(v29, v25);
          *v30 = vaddq_f32(v24, v28);
          v21 += 2;
          *v19 = vsubq_f32(v24, v28);
          v19 -= 2;
          v18 += 32;
          v20 += 2;
        }
        while (v21 < result);
        v16 += 2 * result;
        v17 += v13;
        v11 += 2 * result;
        v15 += v13;
      }
      while (v12 < v5);
      if ((result & 1) == 0)
      {
LABEL_14:
        v31 = 0;
        v32 = result + result * a2 - 1;
        do
        {
          *(float32x4_t *)(a4 + 16 * (int)result) = vnegq_f32(*(float32x4_t *)(a3 + 16 * (v32 + (int)v31)));
          *(_OWORD *)(a4 + 16 * ((int)result - 1)) = *(_OWORD *)(a3 + 16 * v10 - 16 + 16 * v31);
          result = (result + 2 * v10);
          v31 += v10;
        }
        while (v31 < v5);
      }
    }
  }
  return result;
}

uint64_t radb4_ps(uint64_t result, int a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  unint64_t v9;
  float32x4_t *v10;
  float32x4_t *v11;
  unint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  float32x4_t *v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float *v31;
  float *v32;
  float32x4_t *v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  float32x4_t v60;
  float32x4_t *v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  unint64_t v65;
  float32x4_t v66;
  uint64_t v67;
  float32x4_t *v68;
  float32x4_t *v69;
  float32x4_t *v70;
  float32x4_t v71;
  float32x4_t *v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  uint64_t v81;
  float32x4_t *v82;
  float *v83;
  float *v84;
  float *v85;

  v7 = a2 * result;
  v8 = a2 * (int)result;
  if (a2 * (int)result >= 1)
  {
    v10 = a4;
    v11 = a3;
    v12 = (unint64_t)&a4[v7];
    do
    {
      v13 = *(float32x4_t *)((char *)v11 + (((unint64_t)(4 * (int)result - 4) >> 2 << 6) | 0x30));
      v9 = (32 * ((unint64_t)(2 * (int)result - 2) >> 1)) | 0x10;
      v14 = vaddq_f32(*(float32x4_t *)((char *)v11 + v9), *(float32x4_t *)((char *)v11 + v9));
      v15 = vaddq_f32(*v11, v13);
      v16 = vsubq_f32(*v11, v13);
      v17 = vaddq_f32(v11[2 * (int)result], v11[2 * (int)result]);
      *v10 = vaddq_f32(v15, v14);
      v10[(2 * v8)] = vsubq_f32(v15, v14);
      v10[v8] = vsubq_f32(v16, v17);
      v10[3 * (int)v8] = vaddq_f32(v16, v17);
      v11 += 4 * (int)result;
      v10 += (int)result;
    }
    while ((unint64_t)v10 < v12);
  }
  v18 = (result - 1);
  if ((int)result > 1)
  {
    if ((_DWORD)result == 2)
    {
      if ((int)v8 < 1)
        return result;
      v19 = 3 * (int)v8;
      v20 = 4;
      v21 = 2;
      goto LABEL_14;
    }
    if ((int)v8 >= 1)
    {
      v82 = a4;
      v22 = 0;
      v23 = 0;
      v20 = 2 * result;
      v24 = a4 + 2;
      v85 = (float *)(a7 + 4);
      v84 = (float *)(a6 + 4);
      v83 = (float *)(a5 + 4);
      v21 = result;
      do
      {
        v25 = 0;
        v26 = v22;
        v27 = v83;
        v28 = (uint64_t)&a3[(2 * result) - 3 + v26];
        v29 = (uint64_t)&a3[4 * (int)result - 3 + v26];
        v30 = &a3[v26 + 2];
        v31 = v84;
        v32 = v85;
        v33 = v24;
        v34 = 3;
        v35 = (uint64_t)&a3[4 * (int)v23 - 1];
        do
        {
          v36 = v30[-1];
          v37 = *(float32x4_t *)(v29 + 16 * v25);
          v38 = vsubq_f32(v36, v37);
          v39 = vaddq_f32(v36, v37);
          v40 = *(float32x4_t *)(v35 + 16 * (v20 + v34 - 1));
          v41 = *(float32x4_t *)(v28 + 16 * v25);
          v42 = vsubq_f32(v40, v41);
          v43 = vaddq_f32(v40, v41);
          v33[-1] = vaddq_f32(v39, v43);
          v44 = vsubq_f32(v39, v43);
          v45 = *(float32x4_t *)(v35 + 16 * (v20 + v34));
          v46 = *(float32x4_t *)(v35 + 16 * (int)(((2 * result - 2) | 1) + v25));
          v47 = vsubq_f32(v45, v46);
          v48 = vaddq_f32(v45, v46);
          v49 = vsubq_f32(v38, v48);
          v50 = vaddq_f32(v38, v48);
          v51 = *v30;
          v30 += 2;
          v52 = *(float32x4_t *)(v35 + 16 * (int)(((4 * result - 4) | 3) + v25));
          v53 = vaddq_f32(v51, v52);
          v54 = vsubq_f32(v51, v52);
          *v33 = vaddq_f32(v47, v54);
          v55 = &v33[v8];
          v56 = vsubq_f32(v54, v47);
          v57 = vaddq_f32(v42, v53);
          v58 = vsubq_f32(v53, v42);
          v59 = *(v27 - 1);
          v60 = vmulq_n_f32(v49, *v27);
          v55[-1] = vsubq_f32(vmulq_n_f32(v49, v59), vmulq_n_f32(v57, *v27));
          *v55 = vaddq_f32(v60, vmulq_n_f32(v57, v59));
          v61 = &v33[2 * v8];
          v52.f32[0] = *(v31 - 1);
          v62 = vmulq_n_f32(v44, *v31);
          v61[-1] = vsubq_f32(vmulq_n_f32(v44, v52.f32[0]), vmulq_n_f32(v56, *v31));
          *v61 = vaddq_f32(v62, vmulq_n_f32(v56, v52.f32[0]));
          v63 = &v33[3 * v8];
          v49.f32[0] = *(v32 - 1);
          v64 = vsubq_f32(vmulq_n_f32(v50, v49.f32[0]), vmulq_n_f32(v58, *v32));
          v65 = v34 + 1;
          v34 += 2;
          v66 = vaddq_f32(vmulq_n_f32(v50, *v32), vmulq_n_f32(v58, v49.f32[0]));
          v33 = (float32x4_t *)((char *)v33 + 48 * v8 - 48 * (_DWORD)v8 + 32);
          v32 += 2;
          v31 += 2;
          v27 += 2;
          v63[-1] = v64;
          *v63 = v66;
          v25 -= 2;
        }
        while (v65 < result);
        v23 += result;
        v24 += result;
        v22 += 4 * result;
      }
      while (v23 < v8);
      v18 = (result - 1);
      a4 = v82;
      v19 = 3 * (int)v8;
      if ((result & 1) == 0)
      {
LABEL_14:
        v67 = 0;
        v68 = &a4[v19 + v18];
        v69 = &a4[(2 * v8) + v18];
        v70 = &a4[v8 + v18];
        v71 = (float32x4_t)vdupq_n_s32(0xBFB504F3);
        v72 = &a4[v18];
        do
        {
          v73 = a3[(int)result - 1];
          v74 = a3[v20 - 1 + (int)result];
          v75 = a3[(int)result];
          v76 = a3[v20 + (int)result];
          v77 = vsubq_f32(v73, v74);
          v78 = vaddq_f32(v73, v74);
          v79 = vaddq_f32(v75, v76);
          v80 = vsubq_f32(v76, v75);
          v81 = v67;
          v72[v81] = vaddq_f32(v78, v78);
          v70[v81] = vmulq_f32(vsubq_f32(v79, v77), v71);
          v69[v81] = vaddq_f32(v80, v80);
          v68[v81] = vmulq_f32(vaddq_f32(v77, v79), v71);
          v67 += v21;
          result = (result + 4 * v21);
        }
        while (v67 < v8);
      }
    }
  }
  return result;
}

unint64_t radb2_ps(unint64_t result, int a2, uint64_t a3, float32x4_t *a4, uint64_t a5)
{
  int64_t v5;
  int v6;
  uint64_t i;
  float32x4_t v8;
  uint64_t v9;
  float32x4_t v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  float32x4_t *v14;
  int v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float *v18;
  unint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;

  v5 = (a2 * result);
  if ((int)v5 >= 1)
  {
    v6 = 0;
    for (i = 0; i < v5; i += (int)result)
    {
      v8 = *(float32x4_t *)(a3 + 16 * v6);
      v9 = i;
      v10 = *(float32x4_t *)(a3 + 16 * (2 * (int)result - 1 + v6));
      a4[v9] = vaddq_f32(v8, v10);
      a4[v5 + v9] = vsubq_f32(v8, v10);
      v6 += 2 * result;
    }
  }
  if ((int)result > 1)
  {
    if ((_DWORD)result == 2)
    {
      if ((int)v5 < 1)
        return result;
      v11 = 2;
      goto LABEL_14;
    }
    if ((int)v5 >= 1)
    {
      v12 = 0;
      v13 = 0;
      v11 = result;
      v14 = a4 + 2;
      v15 = 2 * result;
      do
      {
        v16 = (float32x4_t *)(a3 + 32 + 32 * (v12 >> 1));
        v17 = v14;
        v18 = (float *)(a5 + 4);
        v19 = 2;
        v20 = (float32x4_t *)(a3 - 48 + 16 * v15);
        do
        {
          v21 = v16[-1];
          v22 = *v16;
          v23 = *v20;
          v24 = v20[1];
          v20 -= 2;
          v25 = vaddq_f32(v21, v23);
          v26 = vsubq_f32(v21, v23);
          v27 = vsubq_f32(*v16, v24);
          v17[-1] = v25;
          *v17 = v27;
          v28 = vaddq_f32(v22, v24);
          v25.f32[0] = *(v18 - 1);
          v29 = vmulq_n_f32(v26, *v18);
          v30 = vsubq_f32(vmulq_n_f32(v26, v25.f32[0]), vmulq_n_f32(v28, *v18));
          v31 = &v17[(a2 * result)];
          v19 += 2;
          v18 += 2;
          v31[-1] = v30;
          *v31 = vaddq_f32(v29, vmulq_n_f32(v28, v25.f32[0]));
          v17 += 2;
          v16 += 2;
        }
        while (v19 < result);
        v13 += result;
        v14 += result;
        v12 += 2 * result;
        v15 += 2 * result;
      }
      while (v13 < v5);
      if ((result & 1) == 0)
      {
LABEL_14:
        v32 = 0;
        v33.i64[0] = 0xC0000000C0000000;
        v33.i64[1] = 0xC0000000C0000000;
        do
        {
          v34 = *(float32x4_t *)(a3 + 16 * ((int)result - 1));
          v35 = *(float32x4_t *)(a3 + 16 * (int)result);
          v36 = v32;
          a4[v11 - 1 + v36] = vaddq_f32(v34, v34);
          a4[v5 - 1 + v11 + v36] = vmulq_f32(v35, v33);
          result = (result + 2 * v11);
          v32 += v11;
        }
        while (v32 < v5);
      }
    }
  }
  return result;
}

rtc::PhysicalSocket *rtc::PhysicalSocket::PhysicalSocket(rtc::PhysicalSocket *this, rtc::PhysicalSocketServer *a2, int a3)
{
  _BOOL4 v6;
  socklen_t v8;
  pthread_mutexattr_t v9;
  uint64_t v10;

  v6 = a3 != -1;
  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &unk_24C0C0EA0;
  *((_QWORD *)this + 1) = sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_disconnect;
  *((_QWORD *)this + 2) = sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_duplicate;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 24), 0);
  *((_QWORD *)this + 11) = (char *)this + 88;
  *((_QWORD *)this + 12) = (char *)this + 88;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = (char *)this + 88;
  *((_BYTE *)this + 120) = 0;
  *((_QWORD *)this + 16) = sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_disconnect;
  *((_QWORD *)this + 17) = sigslot::_signal_base<sigslot::multi_threaded_local>::do_slot_duplicate;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 144), 0);
  *((_QWORD *)this + 26) = (char *)this + 208;
  *((_QWORD *)this + 27) = (char *)this + 208;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = (char *)this + 208;
  *((_BYTE *)this + 240) = 0;
  *((_QWORD *)this + 31) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 32) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 33) = (char *)this + 264;
  *((_QWORD *)this + 34) = (char *)this + 264;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = (char *)this + 264;
  *((_BYTE *)this + 296) = 0;
  *((_QWORD *)this + 38) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *((_QWORD *)this + 39) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *((_QWORD *)this + 40) = (char *)this + 320;
  *((_QWORD *)this + 41) = (char *)this + 320;
  *((_QWORD *)this + 42) = 0;
  *((_QWORD *)this + 43) = (char *)this + 320;
  *((_BYTE *)this + 352) = 0;
  *((_QWORD *)this + 47) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *((_QWORD *)this + 48) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *((_QWORD *)this + 49) = (char *)this + 400;
  *((_QWORD *)this + 50) = 0;
  *(_QWORD *)this = &off_24C0BA508;
  *((_QWORD *)this + 45) = &unk_24C0BA5E8;
  *((_QWORD *)this + 46) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = a2;
  *((_DWORD *)this + 106) = a3;
  *((_DWORD *)this + 108) = 0;
  pthread_mutexattr_init(&v9);
  pthread_mutexattr_setpolicy_np(&v9, 3);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 440), &v9);
  pthread_mutexattr_destroy(&v9);
  *((_DWORD *)this + 126) = 0;
  *((_DWORD *)this + 127) = 2 * v6;
  *((_QWORD *)this + 64) = 0;
  *(_DWORD *)((char *)this + 519) = 0;
  if (*((_DWORD *)this + 106) != -1)
  {
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 184))(this, 3);
    v8 = 4;
    LODWORD(v9.__sig) = 1;
    getsockopt(*((_DWORD *)this + 106), 0xFFFF, 4104, &v9, &v8);
    *((_BYTE *)this + 428) = LODWORD(v9.__sig) == 2;
  }
  return this;
}

void rtc::PhysicalSocket::~PhysicalSocket(rtc::PhysicalSocket *this)
{
  char *v2;
  int v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0BA508;
  v2 = (char *)this + 360;
  *((_QWORD *)this + 45) = &unk_24C0BA5E8;
  v3 = *((_DWORD *)this + 106);
  if (v3 != -1)
  {
    close(v3);
    v4 = __error();
    (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v4);
    *((_DWORD *)this + 106) = -1;
    *((_DWORD *)this + 127) = 0;
    (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 184))(this, 0);
    v5 = *((_QWORD *)this + 64);
    if (v5)
    {
      *((_QWORD *)this + 64) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v6 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 440));
  *((_QWORD *)this + 45) = &unk_24C0ACE30;
  (*((void (**)(char *))this + 48))(v2);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 392, *((_QWORD **)this + 50));
  rtc::Socket::~Socket(this);
}

{
  rtc::PhysicalSocket::~PhysicalSocket(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'rtc::PhysicalSocket::~PhysicalSocket(rtc::PhysicalSocket *this)
{
  rtc::PhysicalSocket::~PhysicalSocket((rtc::PhysicalSocket *)((char *)this - 360));
}

{
  rtc::PhysicalSocket::~PhysicalSocket((rtc::PhysicalSocket *)((char *)this - 360));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::PhysicalSocket::Create(rtc::PhysicalSocket *this, int a2, int a3)
{
  int *v6;

  (*(void (**)(rtc::PhysicalSocket *))(*(_QWORD *)this + 104))(this);
  *((_DWORD *)this + 106) = socket(a2, a3, 0);
  *((_BYTE *)this + 428) = a3 == 2;
  *((_DWORD *)this + 108) = a2;
  v6 = __error();
  (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v6);
  if (*((_BYTE *)this + 428))
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 184))(this, 3);
  return *((_DWORD *)this + 106) != -1;
}

void rtc::PhysicalSocket::GetLocalAddress(rtc::PhysicalSocket *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  rtc::SocketAddress *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  socklen_t v12;
  sockaddr v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = (sockaddr)0;
  v14 = 0u;
  v12 = 128;
  v3 = getsockname(*((_DWORD *)this + 106), &v13, &v12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = &unk_24C0ACDA0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_WORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  if (v3 < 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
  }
  else
  {
    rtc::SocketAddressFromSockAddrStorage((rtc *)&v13, (std::string *)a2, v4);
  }
}

void rtc::PhysicalSocket::GetRemoteAddress(rtc::PhysicalSocket *this@<X0>, uint64_t a2@<X8>)
{
  int v3;
  rtc::SocketAddress *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  socklen_t v12;
  sockaddr v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = (sockaddr)0;
  v14 = 0u;
  v12 = 128;
  v3 = getpeername(*((_DWORD *)this + 106), &v13, &v12);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = &unk_24C0ACDA0;
  *(_BYTE *)(a2 + 64) = 0;
  *(_WORD *)(a2 + 56) = 0;
  *(_DWORD *)(a2 + 60) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  if (v3 < 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
  }
  else
  {
    rtc::SocketAddressFromSockAddrStorage((rtc *)&v13, (std::string *)a2, v4);
  }
}

uint64_t rtc::PhysicalSocket::Bind(rtc::PhysicalSocket *this, void **a2)
{
  int v4;
  uint64_t (***v5)(_QWORD, _QWORD, void **);
  _DWORD *v6;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  socklen_t v33;
  int *v34;
  void *__p[2];
  void *v37;
  void *v38;
  _BYTE v39[20];
  unsigned __int16 v40;
  int v41;
  char v42;
  __int128 v43;
  sockaddr v44[8];
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  __p[0] = 0;
  __p[1] = 0;
  v37 = 0;
  v38 = &unk_24C0ACDA0;
  memset(v39, 0, sizeof(v39));
  if (__p != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(__p, (char *)*a2, (size_t)a2[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v37 = a2[2];
    }
  }
  v4 = *((_DWORD *)a2 + 8);
  *(_DWORD *)v39 = v4;
  *(_OWORD *)&v39[4] = *(_OWORD *)((char *)a2 + 36);
  v40 = *((_WORD *)a2 + 28);
  v42 = *((_BYTE *)a2 + 64);
  v41 = *((_DWORD *)a2 + 15);
  v5 = *(uint64_t (****)(_QWORD, _QWORD, void **))(*((_QWORD *)this + 52) + 8);
  if (!v5)
  {
LABEL_37:
    memset(v44, 0, sizeof(v44));
    v44[0].sa_family = v39[0];
    if (v39[0] == 2)
    {
      *(_DWORD *)&v44[0].sa_data[2] = *(_DWORD *)&v39[4];
      *(_WORD *)v44[0].sa_data = __rev16(v40);
      v33 = 16;
    }
    else if (v39[0] == 30)
    {
      *(sockaddr *)&v44[0].sa_data[6] = *(sockaddr *)&v39[4];
      *(_WORD *)v44[0].sa_data = __rev16(v40);
      *(_DWORD *)&v44[1].sa_data[6] = v41;
      v33 = 28;
    }
    else
    {
      v33 = 0;
    }
    v32 = bind(*((_DWORD *)this + 106), v44, v33);
    v34 = __error();
    (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v34);
    if (SHIBYTE(v37) < 0)
      goto LABEL_43;
    return v32;
  }
  v6 = (_DWORD *)a2 + 9;
  if (v4 == 2)
  {
    if (!*v6)
      goto LABEL_37;
  }
  else if (v4 == 30)
  {
    *(sockaddr *)&v44[0].sa_data[10] = *(sockaddr *)MEMORY[0x24BDAE878];
    if (*(_QWORD *)v6 == *(_QWORD *)&v44[0].sa_data[10] && *(void **)((char *)a2 + 44) == *(void **)&v44[1].sa_data[2])
      goto LABEL_37;
    v43 = rtc::kV4MappedPrefix;
    if (*(_QWORD *)v6 == (_QWORD)rtc::kV4MappedPrefix
      && *(void **)((char *)a2 + 44) == *((void **)&rtc::kV4MappedPrefix + 1))
    {
      goto LABEL_37;
    }
  }
  v9 = (**v5)(v5, *((unsigned int *)this + 106), a2 + 3);
  if (v9 == -2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
    goto LABEL_37;
  }
  if (!v9)
  {
    v10 = *(_DWORD *)v39;
    if (*(_DWORD *)v39 == 30)
    {
      v44[0] = *(sockaddr *)MEMORY[0x24BDAE878];
      v10 = 30;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
      {
LABEL_25:
        LOBYTE(__p[0]) = 0;
        HIBYTE(v37) = 0;
LABEL_36:
        v42 = 0;
        *(sockaddr *)&v39[4] = v44[0];
        *(_DWORD *)v39 = v10;
        v41 = 0;
        goto LABEL_37;
      }
    }
    else
    {
      if (*(_DWORD *)v39 != 2)
        v10 = 0;
      *(_QWORD *)&v44[0].sa_len = 0;
      *(_QWORD *)&v44[0].sa_data[6] = 0;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        goto LABEL_25;
    }
    *(_BYTE *)__p[0] = 0;
    __p[1] = 0;
    goto LABEL_36;
  }
  if (rtc::SocketAddress::IsLoopbackIP((rtc::SocketAddress *)a2))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
    goto LABEL_37;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
    v32 = 0xFFFFFFFFLL;
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      return v32;
    goto LABEL_43;
  }
  v32 = 0xFFFFFFFFLL;
  if (SHIBYTE(v37) < 0)
LABEL_43:
    operator delete(__p[0]);
  return v32;
}

uint64_t rtc::PhysicalSocket::Connect(rtc::PhysicalSocket *this, const rtc::SocketAddress *a2)
{
  uint64_t result;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  void (**v22)(webrtc::AsyncDnsResolver *__hidden);
  unsigned int v23;
  int v24;
  socklen_t v25;
  int v26;
  int *v27;
  uint64_t v28;
  int v29;
  __n128 v30;
  __n128 (*v31)(uint64_t, __n128 *, __n128 *);
  void (*v32)(uint64_t *);
  pthread_mutexattr_t v33[8];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (*((_DWORD *)this + 127))
  {
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 120))(this, 37);
    return 0xFFFFFFFFLL;
  }
  v5 = *((_DWORD *)a2 + 8);
  if (v5)
    v6 = 0;
  else
    v6 = *((_BYTE *)a2 + 64) == 0;
  if (!v6)
    goto LABEL_21;
  v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (!v7)
  {
LABEL_21:
    if (*((_DWORD *)this + 106) == -1)
    {
      if (!(*(unsigned int (**)(rtc::PhysicalSocket *))(*(_QWORD *)this + 152))(this))
        return 0xFFFFFFFFLL;
      v5 = *((_DWORD *)a2 + 8);
    }
    v23 = *((unsigned __int16 *)a2 + 28);
    v24 = *((_DWORD *)a2 + 15);
    memset(v33, 0, sizeof(v33));
    BYTE1(v33[0].__sig) = v5;
    if (v5 == 2)
    {
      HIDWORD(v33[0].__sig) = *((_DWORD *)a2 + 9);
      WORD1(v33[0].__sig) = __rev16(v23);
      v25 = 16;
    }
    else if (v5 == 30)
    {
      *(pthread_mutexattr_t *)v33[0].__opaque = *(pthread_mutexattr_t *)((char *)a2 + 36);
      WORD1(v33[0].__sig) = __rev16(v23);
      *(_DWORD *)v33[1].__opaque = v24;
      v25 = 28;
    }
    else
    {
      v25 = 0;
    }
    v26 = connect(*((_DWORD *)this + 106), (const sockaddr *)v33, v25);
    v27 = __error();
    (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v27);
    if (v26)
    {
      if ((*(unsigned int (**)(rtc::PhysicalSocket *))(*(_QWORD *)this + 112))(this) - 35 > 1)
        return 0xFFFFFFFFLL;
      v28 = 7;
      v29 = 1;
    }
    else
    {
      v28 = 3;
      v29 = 2;
    }
    *((_DWORD *)this + 127) = v29;
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, v28);
    return 0;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
  v15 = operator new();
  *(_QWORD *)v15 = &off_24C0ACD18;
  v16 = operator new();
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  *(_QWORD *)(v15 + 8) = v16;
  do
    v17 = __ldxr((unsigned int *)v16);
  while (__stxr(v17 + 1, (unsigned int *)v16));
  v18 = operator new();
  v19 = (unsigned int *)(v18 + 8);
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_QWORD *)(v18 + 80) = 0;
  *(_OWORD *)(v18 + 16) = 0u;
  *(_QWORD *)v18 = &off_24C0ACD80;
  pthread_mutexattr_init(v33);
  pthread_mutexattr_setpolicy_np(v33, 3);
  pthread_mutex_init((pthread_mutex_t *)(v18 + 16), v33);
  pthread_mutexattr_destroy(v33);
  *(_DWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v15 + 16) = v18;
  do
    v20 = __ldxr(v19);
  while (__stxr(v20 + 1, v19));
  *(_QWORD *)(v15 + 24) = off_24C0ACD50;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_BYTE *)(v15 + 96) = 0;
  *(_WORD *)(v15 + 88) = 0;
  *(_DWORD *)(v15 + 92) = 0;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 56) = &unk_24C0ACDA0;
  *(_DWORD *)(v15 + 80) = 0;
  *(_QWORD *)(v15 + 112) = 0;
  *(_QWORD *)(v15 + 120) = 0;
  *(_QWORD *)(v15 + 104) = 0;
  *(_QWORD *)(v15 + 152) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(v15 + 160) = 0;
  v21 = *((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = v15;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v15 = *((_QWORD *)this + 64);
    v22 = *(void (***)(webrtc::AsyncDnsResolver *__hidden))v15;
  }
  else
  {
    v22 = &off_24C0ACD18;
  }
  v30.n128_u64[0] = (unint64_t)this;
  v31 = absl::internal_any_invocable::LocalManagerTrivial;
  v32 = absl::internal_any_invocable::LocalInvoker<false,void,rtc::PhysicalSocket::Connect(rtc::SocketAddress const&)::$_0 &>;
  ((void (*)(uint64_t, const rtc::SocketAddress *, __n128 *))v22[2])(v15, a2, &v30);
  v31(1, &v30, &v30);
  result = 0;
  *((_DWORD *)this + 127) = 1;
  return result;
}

uint64_t rtc::PhysicalSocket::GetError(rtc::PhysicalSocket *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;

  v2 = (pthread_mutex_t *)((char *)this + 440);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 440));
  v3 = *((unsigned int *)this + 126);
  pthread_mutex_unlock(v2);
  return v3;
}

uint64_t rtc::PhysicalSocket::SetError(rtc::PhysicalSocket *this, int a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 440);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 440));
  *((_DWORD *)this + 126) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t rtc::PhysicalSocket::GetState(rtc::PhysicalSocket *this)
{
  return *((unsigned int *)this + 127);
}

uint64_t rtc::PhysicalSocket::GetOption(uint64_t a1, int a2, int *a3)
{
  uint64_t result;
  int v7;
  socklen_t v8;
  uint64_t v9;

  v9 = 0;
  result = rtc::PhysicalSocket::TranslateOption(a1, a2, (_DWORD *)&v9 + 1, &v9);
  if ((_DWORD)result != -1)
  {
    v8 = 4;
    result = getsockopt(*(_DWORD *)(a1 + 424), SHIDWORD(v9), v9, a3, &v8);
    if ((_DWORD)result != -1)
    {
      if (a2 == 8 || a2 == 7)
      {
        v7 = *a3 & 3;
      }
      else
      {
        if (a2 != 5)
          return result;
        v7 = *a3 >> 2;
      }
      *a3 = v7;
    }
  }
  return result;
}

uint64_t rtc::PhysicalSocket::TranslateOption(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = 0xFFFFFFFFLL;
  switch(a2)
  {
    case 0:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
        goto LABEL_13;
      goto LABEL_12;
    case 1:
      result = 0;
      *a3 = 0xFFFF;
      *a4 = 4098;
      break;
    case 2:
      result = 0;
      *a3 = 0xFFFF;
      *a4 = 4097;
      break;
    case 3:
      result = 0;
      *a3 = 6;
      *a4 = 1;
      break;
    case 5:
    case 7:
      result = 0;
      if (*(_DWORD *)(a1 + 432) == 30)
      {
        *a3 = 41;
        *a4 = 36;
      }
      else
      {
        *a3 = 0;
        *a4 = 3;
      }
      break;
    case 8:
      result = 0;
      if (*(_DWORD *)(a1 + 432) == 30)
      {
        *a3 = 41;
        *a4 = 35;
      }
      else
      {
        *a3 = 0;
        *a4 = 27;
      }
      break;
    case 9:
      result = 0;
      *a3 = 0xFFFF;
      *a4 = 8;
      break;
    case 10:
      result = 0;
      *a3 = 6;
      *a4 = 258;
      break;
    case 11:
      result = 0;
      *a3 = 6;
      *a4 = 16;
      break;
    case 12:
      result = 0;
      *a3 = 6;
      *a4 = 257;
      break;
    case 13:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
LABEL_12:
        rtc::webrtc_logging_impl::Log("\r\t", v6, v7, v8, v9, v10, v11, v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
LABEL_13:
      result = 0xFFFFFFFFLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t rtc::PhysicalSocket::SetOption(uint64_t a1, int a2, int a3)
{
  int v6;
  uint64_t v7;
  int v9;
  int *v10;
  int v11;
  int v12;
  int v13;

  v12 = 0;
  v13 = a3;
  v11 = 0;
  if (rtc::PhysicalSocket::TranslateOption(a1, a2, &v12, &v11) == -1)
    return 0xFFFFFFFFLL;
  if (a2 == 7)
  {
    *(_BYTE *)(a1 + 521) = a3;
    v6 = (a3 & 3) + *(unsigned __int8 *)(a1 + 520);
  }
  else
  {
    if (a2 != 5)
      goto LABEL_9;
    *(_BYTE *)(a1 + 520) = 4 * a3;
    v6 = (4 * a3) & 0xFC | *(_BYTE *)(a1 + 521) & 3;
  }
  v13 = v6;
LABEL_9:
  v9 = v11;
  if (v11 == 36)
    setsockopt(*(_DWORD *)(a1 + 424), 0, 3, &v13, 4u);
  v7 = setsockopt(*(_DWORD *)(a1 + 424), v12, v9, &v13, 4u);
  if (!(_DWORD)v7)
    return v7;
  v10 = __error();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, *v10);
  return v7;
}

uint64_t rtc::PhysicalSocket::Send(rtc::PhysicalSocket *this, const void *a2, uint64_t a3)
{
  int v3;
  uint64_t v5;
  int *v6;

  v3 = a3;
  v5 = (*(uint64_t (**)(rtc::PhysicalSocket *, _QWORD, const void *, uint64_t, _QWORD))(*(_QWORD *)this + 168))(this, *((unsigned int *)this + 106), a2, a3, 0);
  v6 = __error();
  (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v6);
  if ((*(unsigned int (**)(rtc::PhysicalSocket *))(*(_QWORD *)this + 112))(this) == 55)
  {
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 120))(this, 35);
    if ((int)v5 >= 1 && (int)v5 < v3)
      goto LABEL_15;
  }
  else if ((int)v5 >= 1 && (int)v5 < v3)
  {
    goto LABEL_15;
  }
  if ((v5 & 0x80000000) == 0
    || (*(unsigned int (**)(rtc::PhysicalSocket *))(*(_QWORD *)this + 112))(this) - 35 > 1)
  {
    return v5;
  }
LABEL_15:
  (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, 2);
  return v5;
}

uint64_t rtc::PhysicalSocket::SendTo(rtc::PhysicalSocket *this, const void *a2, uint64_t a3, const rtc::SocketAddress *a4)
{
  int v4;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  _OWORD v12[8];
  uint64_t v13;

  v4 = a3;
  v13 = *MEMORY[0x24BDAC8D0];
  v6 = *((unsigned __int16 *)a4 + 28);
  v7 = *((_DWORD *)a4 + 15);
  memset(v12, 0, sizeof(v12));
  BYTE1(v12[0]) = *((_BYTE *)a4 + 32);
  if (BYTE1(v12[0]) == 2)
  {
    DWORD1(v12[0]) = *((_DWORD *)a4 + 9);
    WORD1(v12[0]) = __rev16(v6);
    v8 = 16;
  }
  else if (BYTE1(v12[0]) == 30)
  {
    *(_OWORD *)((char *)v12 + 8) = *(_OWORD *)((char *)a4 + 36);
    WORD1(v12[0]) = __rev16(v6);
    DWORD2(v12[1]) = v7;
    v8 = 28;
  }
  else
  {
    v8 = 0;
  }
  v9 = (*(uint64_t (**)(rtc::PhysicalSocket *, _QWORD, const void *, uint64_t, _QWORD, _OWORD *, uint64_t))(*(_QWORD *)this + 176))(this, *((unsigned int *)this + 106), a2, a3, 0, v12, v8);
  v10 = __error();
  (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v10);
  if ((*(unsigned int (**)(rtc::PhysicalSocket *))(*(_QWORD *)this + 112))(this) == 55)
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 120))(this, 35);
  if ((int)v9 >= 1 && (int)v9 < v4
    || (v9 & 0x80000000) != 0
    && (*(unsigned int (**)(rtc::PhysicalSocket *))(*(_QWORD *)this + 112))(this) - 35 <= 1)
  {
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, 2);
  }
  return v9;
}

ssize_t rtc::PhysicalSocket::Recv(rtc::PhysicalSocket *this, void *a2, uint64_t a3, uint64_t *a4)
{
  ssize_t v7;
  unsigned int *msg_control;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  msghdr v28;
  _QWORD v29[2];
  _OWORD v30[3];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v29[0] = a2;
  v29[1] = a3;
  memset(&v28.msg_iovlen + 1, 0, 20);
  *(_OWORD *)&v28.msg_name = 0u;
  v28.msg_iov = (iovec *)v29;
  v28.msg_iovlen = 1;
  memset(v30, 0, sizeof(v30));
  if (a4)
  {
    *a4 = -1;
    v28.msg_control = v30;
    v28.msg_controllen = 48;
    v7 = recvmsg(*((_DWORD *)this + 106), &v28, 0);
    if ((int)v7 >= 1)
    {
      if (v28.msg_controllen < 0xC)
        goto LABEL_16;
      msg_control = (unsigned int *)v28.msg_control;
      if (!v28.msg_control)
        goto LABEL_16;
      v9 = (unsigned int *)((char *)v28.msg_control + v28.msg_controllen);
      do
      {
        if (msg_control[1] == 0xFFFF && msg_control[2] == 2)
          *a4 = (int)msg_control[5] + 1000000 * *(_QWORD *)(msg_control + 3);
        msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
      }
      while (msg_control + 3 <= v9);
    }
  }
  else
  {
    v7 = recvmsg(*((_DWORD *)this + 106), &v28, 0);
  }
  if (a3 && !(_DWORD)v7)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, 1);
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 120))(this, 35);
    return 0xFFFFFFFFLL;
  }
LABEL_16:
  v17 = __error();
  (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v17);
  v18 = (*(uint64_t (**)(rtc::PhysicalSocket *))(*(_QWORD *)this + 112))(this);
  if ((v7 & 0x80000000) != 0)
  {
    v20 = v18 - 35;
    if (!*((_BYTE *)this + 428) && v20 > 1
      || ((*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, 1), v20 >= 2))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
    }
  }
  else
  {
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, 1);
  }
  return v7;
}

ssize_t rtc::PhysicalSocket::DoReadFromSocket(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, int *a6)
{
  rtc::SocketAddress *v9;
  ssize_t v10;
  unsigned int *msg_control;
  unsigned int *v12;
  int v13;
  unsigned int v14;
  msghdr v17;
  _QWORD v18[2];
  _OWORD v19[3];
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18[0] = a2;
  v18[1] = a3;
  *(_OWORD *)&v17.msg_control = 0u;
  *(_OWORD *)&v17.msg_name = 0u;
  v17.msg_iov = (iovec *)v18;
  *(_QWORD *)&v17.msg_iovlen = 1;
  if (a4)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
    *(_BYTE *)(a4 + 64) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 40) = 0;
    *(_DWORD *)(a4 + 48) = 0;
    *(_WORD *)(a4 + 56) = 0;
    *(_DWORD *)(a4 + 60) = 0;
    v17.msg_name = v20;
    v17.msg_namelen = 128;
  }
  memset(v19, 0, sizeof(v19));
  if (!(a5 | (unint64_t)a6))
  {
    v10 = recvmsg(*(_DWORD *)(a1 + 424), &v17, 0);
    if ((int)v10 < 1)
      return v10;
    goto LABEL_34;
  }
  *(_QWORD *)a5 = -1;
  v17.msg_control = v19;
  v17.msg_controllen = 48;
  v10 = recvmsg(*(_DWORD *)(a1 + 424), &v17, 0);
  if ((int)v10 < 1)
    return v10;
  if (v17.msg_controllen >= 0xC)
  {
    msg_control = (unsigned int *)v17.msg_control;
    if (v17.msg_control)
    {
      v12 = (unsigned int *)((char *)v17.msg_control + v17.msg_controllen);
      if (!a6)
      {
        do
        {
          if (msg_control[1] == 0xFFFF && msg_control[2] == 2)
            *(_QWORD *)a5 = (int)msg_control[5] + 1000000 * *(_QWORD *)(msg_control + 3);
          msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
        }
        while (msg_control + 3 <= v12);
        goto LABEL_34;
      }
      do
      {
        v14 = msg_control[2];
        if (v14 == 36)
        {
          if (msg_control[1] == 41)
            goto LABEL_16;
        }
        else
        {
          if (v14 != 3)
          {
            if (v14 == 2 && msg_control[1] == 0xFFFF)
              *(_QWORD *)a5 = (int)msg_control[5] + 1000000 * *(_QWORD *)(msg_control + 3);
            goto LABEL_20;
          }
          if (!msg_control[1])
          {
LABEL_16:
            if ((msg_control[3] & 3) - 1 < 3)
              v13 = ((msg_control[3] & 3) - 1) + 1;
            else
              v13 = 0;
            *a6 = v13;
          }
        }
LABEL_20:
        msg_control = (unsigned int *)((char *)msg_control + ((*msg_control + 3) & 0x1FFFFFFFCLL));
      }
      while (msg_control + 3 <= v12);
    }
  }
LABEL_34:
  if (a4)
    rtc::SocketAddressFromSockAddrStorage((rtc *)v20, (std::string *)a4, v9);
  return v10;
}

ssize_t rtc::PhysicalSocket::RecvFrom(rtc::PhysicalSocket *this, uint64_t a2, uint64_t a3, rtc::SocketAddress *a4, uint64_t *a5)
{
  ssize_t v6;
  int *v7;
  int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = rtc::PhysicalSocket::DoReadFromSocket((uint64_t)this, a2, a3, (uint64_t)a4, (unint64_t)a5, 0);
  v7 = __error();
  (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v7);
  v8 = (*(uint64_t (**)(rtc::PhysicalSocket *))(*(_QWORD *)this + 112))(this);
  if ((v6 & 0x80000000) == 0)
  {
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, 1);
    return v6;
  }
  v10 = v8 - 35;
  if (*((_BYTE *)this + 428) || v10 <= 1)
  {
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, 1);
    if (v10 < 2)
      return v6;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
    return v6;
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v11, v12, v13, v14, v15, v16, v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
  return v6;
}

ssize_t rtc::PhysicalSocket::RecvFrom(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int *v9;
  ssize_t v10;
  ssize_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  int *v22;
  int v23;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = -1;
  v4 = *(_QWORD *)(a2 + 96);
  v5 = *(_QWORD *)(v4 + 8);
  if (!(v5 >> 16))
  {
    v6 = (void *)operator new[]();
    v7 = v6;
    v8 = *(_QWORD *)(v4 + 16);
    if (v8)
    {
      memcpy(v6, *(const void **)(v4 + 16), *(_QWORD *)v4);
      *(_QWORD *)(v4 + 16) = v7;
      MEMORY[0x20BD0ADD4](v8, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(v4 + 16) = v6;
    }
    *(_QWORD *)(v4 + 8) = 0x10000;
    v4 = *(_QWORD *)(a2 + 96);
    v5 = *(_QWORD *)(v4 + 8);
  }
  if (a1[521])
    v9 = (int *)(a2 + 88);
  else
    v9 = 0;
  v10 = rtc::PhysicalSocket::DoReadFromSocket((uint64_t)a1, *(_QWORD *)(v4 + 16), v5, a2 + 16, (unint64_t)&v33, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a2 + 96);
  v13 = v10 & ~((int)v10 >> 31);
  v14 = *(_QWORD *)(v12 + 8);
  if (v14 < v13)
  {
    v15 = v14 + (v14 >> 1);
    if (v15 <= v13)
      v16 = v10 & ~((int)v10 >> 31);
    else
      v16 = v15;
    v17 = (void *)operator new[]();
    v18 = v17;
    v19 = *(_QWORD *)(v12 + 16);
    if (v19)
    {
      memcpy(v17, *(const void **)(v12 + 16), *(_QWORD *)v12);
      *(_QWORD *)(v12 + 16) = v18;
      MEMORY[0x20BD0ADD4](v19, 0x1000C8077774924);
    }
    else
    {
      *(_QWORD *)(v12 + 16) = v17;
    }
    *(_QWORD *)(v12 + 8) = v16;
  }
  *(_QWORD *)v12 = v13;
  v20 = v33;
  if ((int)v11 >= 1 && v33 != -1)
  {
    if (!*(_BYTE *)(a2 + 8))
      *(_BYTE *)(a2 + 8) = 1;
    *(_QWORD *)a2 = v20;
  }
  v22 = __error();
  (*(void (**)(_BYTE *, _QWORD))(*(_QWORD *)a1 + 120))(a1, *v22);
  v23 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 112))(a1);
  if ((v11 & 0x80000000) != 0)
  {
    v25 = v23 - 35;
    if (!a1[428] && v25 > 1 || ((*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 192))(a1, 1), v25 >= 2))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
    }
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 192))(a1, 1);
  }
  return v11;
}

uint64_t rtc::PhysicalSocket::Listen(rtc::PhysicalSocket *this, int a2)
{
  uint64_t v3;
  int *v4;

  v3 = listen(*((_DWORD *)this + 106), a2);
  v4 = __error();
  (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v4);
  if (!(_DWORD)v3)
  {
    *((_DWORD *)this + 127) = 1;
    (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, 16);
  }
  return v3;
}

uint64_t rtc::PhysicalSocket::Accept(rtc::PhysicalSocket *this, std::string *a2)
{
  uint64_t v4;
  int *v5;
  rtc::SocketAddress *v6;
  int v8;
  _BYTE v9[128];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(rtc::PhysicalSocket *, uint64_t))(*(_QWORD *)this + 192))(this, 16);
  v8 = 128;
  v4 = (*(uint64_t (**)(rtc::PhysicalSocket *, _QWORD, _BYTE *, int *))(*(_QWORD *)this + 160))(this, *((unsigned int *)this + 106), v9, &v8);
  v5 = __error();
  (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v5);
  if ((_DWORD)v4 == -1)
    return 0;
  if (a2)
    rtc::SocketAddressFromSockAddrStorage((rtc *)v9, a2, v6);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 52) + 48))(*((_QWORD *)this + 52), v4);
}

uint64_t rtc::PhysicalSocket::Close(rtc::PhysicalSocket *this)
{
  int v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  v2 = *((_DWORD *)this + 106);
  if (v2 == -1)
    return 0;
  v3 = close(v2);
  v4 = __error();
  (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 120))(this, *v4);
  *((_DWORD *)this + 106) = -1;
  *((_DWORD *)this + 127) = 0;
  (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*(_QWORD *)this + 184))(this, 0);
  v5 = *((_QWORD *)this + 64);
  if (v5)
  {
    *((_QWORD *)this + 64) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v3;
}

uint64_t rtc::PhysicalSocket::DoAccept(rtc::PhysicalSocket *this, int a2, sockaddr *a3, socklen_t *a4)
{
  return accept(a2, a3, a4);
}

ssize_t rtc::PhysicalSocket::DoSend(rtc::PhysicalSocket *this, int a2, const char *a3, int a4, int a5)
{
  return send(a2, a3, a4, a5);
}

ssize_t rtc::PhysicalSocket::DoSendTo(rtc::PhysicalSocket *this, int a2, const char *a3, int a4, int a5, const sockaddr *a6, socklen_t a7)
{
  return sendto(a2, a3, a4, a5, a6, a7);
}

uint64_t rtc::PhysicalSocket::SetEnabledEvents(uint64_t this, char a2)
{
  *(_BYTE *)(this + 522) = a2;
  return this;
}

uint64_t rtc::PhysicalSocket::EnableEvents(uint64_t this, char a2)
{
  *(_BYTE *)(this + 522) |= a2;
  return this;
}

uint64_t rtc::PhysicalSocket::DisableEvents(uint64_t this, char a2)
{
  *(_BYTE *)(this + 522) &= ~a2;
  return this;
}

void rtc::SocketDispatcher::~SocketDispatcher(rtc::SocketDispatcher *this)
{
  rtc::PhysicalSocket *v2;
  int v3;
  int *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0BA608;
  *((_QWORD *)this + 1) = &unk_24C0BA660;
  v2 = (rtc::SocketDispatcher *)((char *)this + 8);
  *((_QWORD *)this + 46) = &unk_24C0BA740;
  if (*((_DWORD *)this + 108) != -1)
  {
    rtc::PhysicalSocketServer::Remove(*((int8x8_t **)this + 53), this);
    v3 = *((_DWORD *)this + 108);
    if (v3 != -1)
    {
      close(v3);
      v4 = __error();
      (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*((_QWORD *)this + 1) + 120))(v2, *v4);
      *((_DWORD *)this + 108) = -1;
      *((_DWORD *)this + 129) = 0;
      (*(void (**)(rtc::PhysicalSocket *, _QWORD))(*((_QWORD *)this + 1) + 184))(v2, 0);
      v5 = *((_QWORD *)this + 65);
      if (v5)
      {
        *((_QWORD *)this + 65) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
    }
  }
  rtc::PhysicalSocket::~PhysicalSocket(v2);
}

{
  rtc::SocketDispatcher::~SocketDispatcher(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'rtc::SocketDispatcher::~SocketDispatcher(rtc::SocketDispatcher *this)
{
  rtc::SocketDispatcher::~SocketDispatcher((rtc::SocketDispatcher *)((char *)this - 8));
}

{
  rtc::SocketDispatcher::~SocketDispatcher((rtc::SocketDispatcher *)((char *)this - 368));
}

{
  rtc::SocketDispatcher::~SocketDispatcher((rtc::SocketDispatcher *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  rtc::SocketDispatcher::~SocketDispatcher((rtc::SocketDispatcher *)((char *)this - 368));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::SocketDispatcher::Initialize(rtc::SocketDispatcher *this)
{
  unsigned int v1;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v13;
  int v14;
  int v15;
  int v16;

  v1 = *((_DWORD *)this + 108);
  if (v1 >= 0x400)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    {
      v4 = *__error();
      v13 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_"
            "socket_server.cc";
      v14 = 6643;
      v15 = 1;
      v16 = v4;
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v5, v6, v7, v8, v9, v10, v11, (uint64_t)&v13);
    }
  }
  else
  {
    v3 = fcntl(v1, 3, 0);
    fcntl(v1, 4, v3 | 4u);
    LODWORD(v13) = 1;
    setsockopt(*((_DWORD *)this + 108), 0xFFFF, 1024, &v13, 4u);
    LODWORD(v13) = 1;
    setsockopt(*((_DWORD *)this + 108), 0xFFFF, 4130, &v13, 4u);
    rtc::PhysicalSocketServer::Add(*((rtc::PhysicalSocketServer **)this + 53), this);
  }
  return v1 < 0x400;
}

uint64_t rtc::PhysicalSocketServer::Add(rtc::PhysicalSocketServer *this, rtc::Dispatcher *a2)
{
  pthread_mutex_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  rtc::Dispatcher *v14;

  v14 = a2;
  v3 = (pthread_mutex_t *)((char *)this + 136);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 136));
  if (std::__hash_table<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::__unordered_map_hasher<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::hash<rtc::Dispatcher *>,std::equal_to<rtc::Dispatcher *>,true>,std::__unordered_map_equal<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::equal_to<rtc::Dispatcher *>,std::hash<rtc::Dispatcher *>,true>,std::allocator<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>>>::find<rtc::Dispatcher *>((_QWORD *)this + 8, (uint64_t *)&v14))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
  }
  else
  {
    v11 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v11 + 1;
    v13 = v11;
    std::__hash_table<std::__hash_value_type<unsigned long long,rtc::Dispatcher *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,rtc::Dispatcher *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,rtc::Dispatcher *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,rtc::Dispatcher *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,rtc::Dispatcher *&>((float *)this + 6, (unint64_t *)&v13, &v13, (uint64_t *)&v14);
    std::__hash_table<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::__unordered_map_hasher<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::hash<rtc::Dispatcher *>,std::equal_to<rtc::Dispatcher *>,true>,std::__unordered_map_equal<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::equal_to<rtc::Dispatcher *>,std::hash<rtc::Dispatcher *>,true>,std::allocator<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>>>::__emplace_unique_key_args<rtc::Dispatcher *,rtc::Dispatcher *&,unsigned long long &>((float *)this + 16, (uint64_t *)&v14, &v14, &v13);
  }
  return pthread_mutex_unlock(v3);
}

uint64_t rtc::SocketDispatcher::Create(rtc::SocketDispatcher *this, uint64_t a2)
{
  return (*(uint64_t (**)(rtc::SocketDispatcher *, uint64_t, uint64_t))(*(_QWORD *)this + 56))(this, 2, a2);
}

BOOL rtc::SocketDispatcher::Create(rtc::SocketDispatcher *this, int a2, int a3)
{
  char *v6;
  int *v7;

  v6 = (char *)this + 8;
  (*(void (**)(char *))(*((_QWORD *)this + 1) + 104))((char *)this + 8);
  *((_DWORD *)v6 + 106) = socket(a2, a3, 0);
  v6[428] = a3 == 2;
  *((_DWORD *)v6 + 108) = a2;
  v7 = __error();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)v6 + 120))(v6, *v7);
  if (v6[428])
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 184))(v6, 3);
  return *((_DWORD *)this + 108) != -1 && rtc::SocketDispatcher::Initialize(this);
}

BOOL `non-virtual thunk to'rtc::SocketDispatcher::Create(rtc::SocketDispatcher *this, int a2, int a3)
{
  int *v6;

  (*(void (**)(rtc::SocketDispatcher *))(*(_QWORD *)this + 104))(this);
  *((_DWORD *)this + 106) = socket(a2, a3, 0);
  *((_BYTE *)this + 428) = a3 == 2;
  *((_DWORD *)this + 108) = a2;
  v6 = __error();
  (*(void (**)(rtc::SocketDispatcher *, _QWORD))(*(_QWORD *)this + 120))(this, *v6);
  if (*((_BYTE *)this + 428))
    (*(void (**)(rtc::SocketDispatcher *, uint64_t))(*(_QWORD *)this + 184))(this, 3);
  return *((_DWORD *)this + 106) != -1 && rtc::SocketDispatcher::Initialize((rtc::SocketDispatcher *)((char *)this - 8));
}

uint64_t rtc::SocketDispatcher::GetDescriptor(rtc::SocketDispatcher *this)
{
  return *((unsigned int *)this + 108);
}

unint64_t rtc::SocketDispatcher::IsDescriptorClosed(rtc::SocketDispatcher *this)
{
  ssize_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  const char *v14;
  int v15;
  int v16;
  int v17;

  if (*((_BYTE *)this + 436))
    return *((_DWORD *)this + 108) == -1;
  v13 = 0;
  do
  {
    v3 = recv(*((_DWORD *)this + 108), &v13, 1uLL, 2);
    if ((v3 & 0x8000000000000000) == 0)
      return v3 == 0;
  }
  while (*__error() == 4);
  v4 = *__error() - 9;
  if (v4 < 0x2E && ((0x300004800001uLL >> v4) & 1) != 0)
    return (0x3FFFFBFFFFFFuLL >> v4) & 1;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    v5 = *__error();
    v14 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc";
    v15 = 7738;
    v16 = 1;
    v17 = v5;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v6, v7, v8, v9, v10, v11, v12, (uint64_t)&v14);
  }
  return 0;
}

uint64_t rtc::SocketDispatcher::GetRequestedEvents(rtc::SocketDispatcher *this)
{
  return *((unsigned __int8 *)this + 530);
}

uint64_t rtc::SocketDispatcher::OnEvent(uint64_t this, char a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);

  v5 = this;
  if ((a2 & 4) == 0)
  {
    if ((a2 & 8) == 0)
      goto LABEL_3;
LABEL_6:
    *(_DWORD *)(this + 516) = 0;
    if ((a2 & 4) == 0)
      goto LABEL_7;
    goto LABEL_12;
  }
  *(_DWORD *)(this + 516) = 2;
  if ((a2 & 8) != 0)
    goto LABEL_6;
LABEL_3:
  if ((a2 & 4) == 0)
    goto LABEL_7;
LABEL_12:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(this + 8) + 200))(this + 8, 4);
  this = *(_QWORD *)(v5 + 280);
  for (*(_QWORD *)(v5 + 296) = this; this != v5 + 272; this = *(_QWORD *)(v5 + 296))
  {
    v7 = *(void (**)(uint64_t, uint64_t))(this + 16);
    v6 = this + 16;
    *(_QWORD *)(v5 + 296) = *(_QWORD *)(v6 - 8);
    v7(v6, v5 + 8);
  }
LABEL_7:
  if ((a2 & 0x10) != 0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + 200))(v5 + 8, 16);
    pthread_mutex_lock((pthread_mutex_t *)(v5 + 32));
    v8 = *(_QWORD *)(v5 + 104);
    for (*(_QWORD *)(v5 + 120) = v8; v8 != v5 + 96; v8 = *(_QWORD *)(v5 + 120))
    {
      v10 = *(void (**)(uint64_t, uint64_t))(v8 + 16);
      v9 = v8 + 16;
      *(_QWORD *)(v5 + 120) = *(_QWORD *)(v9 - 8);
      v10(v9, v5 + 8);
    }
    this = pthread_mutex_unlock((pthread_mutex_t *)(v5 + 32));
    if ((a2 & 1) == 0)
    {
LABEL_9:
      if ((a2 & 2) == 0)
        goto LABEL_10;
      goto LABEL_21;
    }
  }
  else if ((a2 & 1) == 0)
  {
    goto LABEL_9;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + 200))(v5 + 8, 1);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 32));
  v11 = *(_QWORD *)(v5 + 104);
  for (*(_QWORD *)(v5 + 120) = v11; v11 != v5 + 96; v11 = *(_QWORD *)(v5 + 120))
  {
    v13 = *(void (**)(uint64_t, uint64_t))(v11 + 16);
    v12 = v11 + 16;
    *(_QWORD *)(v5 + 120) = *(_QWORD *)(v12 - 8);
    v13(v12, v5 + 8);
  }
  this = pthread_mutex_unlock((pthread_mutex_t *)(v5 + 32));
  if ((a2 & 2) == 0)
  {
LABEL_10:
    if ((a2 & 8) == 0)
      return this;
    goto LABEL_25;
  }
LABEL_21:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 + 8) + 200))(v5 + 8, 2);
  pthread_mutex_lock((pthread_mutex_t *)(v5 + 152));
  v14 = *(_QWORD *)(v5 + 224);
  for (*(_QWORD *)(v5 + 240) = v14; v14 != v5 + 216; v14 = *(_QWORD *)(v5 + 240))
  {
    v16 = *(void (**)(uint64_t, uint64_t))(v14 + 16);
    v15 = v14 + 16;
    *(_QWORD *)(v5 + 240) = *(_QWORD *)(v15 - 8);
    v16(v15, v5 + 8);
  }
  this = pthread_mutex_unlock((pthread_mutex_t *)(v5 + 152));
  if ((a2 & 8) != 0)
  {
LABEL_25:
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v5 + 8) + 184))(v5 + 8, 0);
    this = *(_QWORD *)(v5 + 336);
    for (*(_QWORD *)(v5 + 352) = this; this != v5 + 328; this = *(_QWORD *)(v5 + 352))
    {
      v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(this + 16);
      v17 = this + 16;
      *(_QWORD *)(v5 + 352) = *(_QWORD *)(v17 - 8);
      v18(v17, v5 + 8, a3);
    }
  }
  return this;
}

uint64_t rtc::SocketDispatcher::Close(rtc::SocketDispatcher *this)
{
  int v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  if (*((_DWORD *)this + 108) == -1)
    return 0;
  rtc::PhysicalSocketServer::Remove(*((int8x8_t **)this + 53), this);
  v2 = *((_DWORD *)this + 108);
  if (v2 == -1)
    return 0;
  v3 = close(v2);
  v4 = __error();
  (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 1) + 120))((char *)this + 8, *v4);
  *((_DWORD *)this + 108) = -1;
  *((_DWORD *)this + 129) = 0;
  (*(void (**)(char *, _QWORD))(*((_QWORD *)this + 1) + 184))((char *)this + 8, 0);
  v5 = *((_QWORD *)this + 65);
  if (v5)
  {
    *((_QWORD *)this + 65) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v3;
}

uint64_t rtc::PhysicalSocketServer::Remove(int8x8_t *this, rtc::Dispatcher *a2)
{
  pthread_mutex_t *v3;
  int8x8_t *v4;
  int8x8_t *v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int8x8_t *v17;
  int8x8_t *v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t v21;
  unint64_t v22;
  int8x8_t v23;
  uint8x8_t v24;
  unint64_t v25;
  int8x8_t v26;
  int8x8_t **v27;
  int8x8_t *v28;
  uint64_t v29;
  int8x8_t v30;
  unint64_t v31;
  int8x8_t *v32;
  int8x8_t *v33;
  unint64_t v34;
  unint64_t v35;
  int8x8_t v36;
  unint64_t v37;
  rtc::Dispatcher *v39;

  v39 = a2;
  v3 = (pthread_mutex_t *)&this[17];
  pthread_mutex_lock((pthread_mutex_t *)&this[17]);
  v4 = this + 8;
  if (std::__hash_table<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::__unordered_map_hasher<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::hash<rtc::Dispatcher *>,std::equal_to<rtc::Dispatcher *>,true>,std::__unordered_map_equal<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::equal_to<rtc::Dispatcher *>,std::hash<rtc::Dispatcher *>,true>,std::allocator<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>>>::find<rtc::Dispatcher *>(&this[8], (uint64_t *)&v39))
  {
    v5 = (int8x8_t *)std::__hash_table<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::__unordered_map_hasher<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::hash<rtc::Dispatcher *>,std::equal_to<rtc::Dispatcher *>,true>,std::__unordered_map_equal<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::equal_to<rtc::Dispatcher *>,std::hash<rtc::Dispatcher *>,true>,std::allocator<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>>>::find<rtc::Dispatcher *>(&this[8], (unint64_t)v39);
    if (!v5)
      abort();
    v6 = (unint64_t)v5[3];
    v7 = this[9];
    v8 = (unint64_t)v5[1];
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v7)
        v8 %= *(_QWORD *)&v7;
    }
    else
    {
      v8 &= *(_QWORD *)&v7 - 1;
    }
    v17 = *(int8x8_t **)(*(_QWORD *)v4 + 8 * v8);
    do
    {
      v18 = v17;
      v17 = (int8x8_t *)*v17;
    }
    while (v17 != v5);
    if (v18 == &this[10])
      goto LABEL_22;
    v19 = (unint64_t)v18[1];
    if (v9.u32[0] > 1uLL)
    {
      if (v19 >= *(_QWORD *)&v7)
        v19 %= *(_QWORD *)&v7;
    }
    else
    {
      v19 &= *(_QWORD *)&v7 - 1;
    }
    if (v19 != v8)
    {
LABEL_22:
      if (!*(_QWORD *)v5)
        goto LABEL_23;
      v20 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v20 >= *(_QWORD *)&v7)
          v20 %= *(_QWORD *)&v7;
      }
      else
      {
        v20 &= *(_QWORD *)&v7 - 1;
      }
      if (v20 != v8)
LABEL_23:
        *(_QWORD *)(*(_QWORD *)v4 + 8 * v8) = 0;
    }
    v21 = *v5;
    if (*v5)
    {
      v22 = *(_QWORD *)(*(_QWORD *)&v21 + 8);
      if (v9.u32[0] > 1uLL)
      {
        if (v22 >= *(_QWORD *)&v7)
          v22 %= *(_QWORD *)&v7;
      }
      else
      {
        v22 &= *(_QWORD *)&v7 - 1;
      }
      if (v22 != v8)
      {
        *(_QWORD *)(*(_QWORD *)v4 + 8 * v22) = v18;
        v21 = *v5;
      }
    }
    *v18 = v21;
    *v5 = 0;
    --*(_QWORD *)&this[11];
    operator delete(v5);
    v23 = this[4];
    if (v23)
    {
      v24 = (uint8x8_t)vcnt_s8(v23);
      v24.i16[0] = vaddlv_u8(v24);
      if (v24.u32[0] > 1uLL)
      {
        v25 = v6;
        if (*(_QWORD *)&v23 <= v6)
          v25 = v6 % *(_QWORD *)&v23;
      }
      else
      {
        v25 = (*(_QWORD *)&v23 - 1) & v6;
      }
      v26 = this[3];
      v27 = *(int8x8_t ***)(*(_QWORD *)&v26 + 8 * v25);
      if (v27)
      {
        v28 = *v27;
        if (*v27)
        {
          v29 = *(_QWORD *)&v23 - 1;
          if (v24.u32[0] < 2uLL)
          {
            while (1)
            {
              v30 = v28[1];
              if (*(_QWORD *)&v30 == v6)
              {
                if (*(_QWORD *)&v28[2] == v6)
                  goto LABEL_52;
              }
              else if ((*(_QWORD *)&v30 & v29) != v25)
              {
                return pthread_mutex_unlock(v3);
              }
              v28 = (int8x8_t *)*v28;
              if (!v28)
                return pthread_mutex_unlock(v3);
            }
          }
          do
          {
            v31 = (unint64_t)v28[1];
            if (v31 == v6)
            {
              if (*(_QWORD *)&v28[2] == v6)
              {
LABEL_52:
                if (v24.u32[0] > 1uLL)
                {
                  if (*(_QWORD *)&v23 <= v6)
                    v6 %= *(_QWORD *)&v23;
                }
                else
                {
                  v6 &= v29;
                }
                v32 = *(int8x8_t **)(*(_QWORD *)&v26 + 8 * v6);
                do
                {
                  v33 = v32;
                  v32 = (int8x8_t *)*v32;
                }
                while (v32 != v28);
                if (v33 == &this[5])
                  goto LABEL_69;
                v34 = (unint64_t)v33[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v34 >= *(_QWORD *)&v23)
                    v34 %= *(_QWORD *)&v23;
                }
                else
                {
                  v34 &= v29;
                }
                if (v34 != v6)
                {
LABEL_69:
                  if (!*(_QWORD *)v28)
                    goto LABEL_70;
                  v35 = *(_QWORD *)(*(_QWORD *)v28 + 8);
                  if (v24.u32[0] > 1uLL)
                  {
                    if (v35 >= *(_QWORD *)&v23)
                      v35 %= *(_QWORD *)&v23;
                  }
                  else
                  {
                    v35 &= v29;
                  }
                  if (v35 != v6)
LABEL_70:
                    *(_QWORD *)(*(_QWORD *)&v26 + 8 * v6) = 0;
                }
                v36 = *v28;
                if (*v28)
                {
                  v37 = *(_QWORD *)(*(_QWORD *)&v36 + 8);
                  if (v24.u32[0] > 1uLL)
                  {
                    if (v37 >= *(_QWORD *)&v23)
                      v37 %= *(_QWORD *)&v23;
                  }
                  else
                  {
                    v37 &= v29;
                  }
                  if (v37 != v6)
                  {
                    *(_QWORD *)(*(_QWORD *)&this[3] + 8 * v37) = v33;
                    v36 = *v28;
                  }
                }
                *v33 = v36;
                *v28 = 0;
                --*(_QWORD *)&this[6];
                operator delete(v28);
                return pthread_mutex_unlock(v3);
              }
            }
            else
            {
              if (v31 >= *(_QWORD *)&v23)
                v31 %= *(_QWORD *)&v23;
              if (v31 != v25)
                return pthread_mutex_unlock(v3);
            }
            v28 = (int8x8_t *)*v28;
          }
          while (v28);
        }
      }
    }
  }
  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
  }
  return pthread_mutex_unlock(v3);
}

uint64_t `non-virtual thunk to'rtc::SocketDispatcher::Close(rtc::SocketDispatcher *this)
{
  int v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  if (*((_DWORD *)this + 106) == -1)
    return 0;
  rtc::PhysicalSocketServer::Remove(*((int8x8_t **)this + 52), (rtc::SocketDispatcher *)((char *)this - 8));
  v2 = *((_DWORD *)this + 106);
  if (v2 == -1)
    return 0;
  v3 = close(v2);
  v4 = __error();
  (*(void (**)(rtc::SocketDispatcher *, _QWORD))(*(_QWORD *)this + 120))(this, *v4);
  *((_DWORD *)this + 106) = -1;
  *((_DWORD *)this + 127) = 0;
  (*(void (**)(rtc::SocketDispatcher *, _QWORD))(*(_QWORD *)this + 184))(this, 0);
  v5 = *((_QWORD *)this + 64);
  if (v5)
  {
    *((_QWORD *)this + 64) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return v3;
}

void rtc::PhysicalSocketServer::~PhysicalSocketServer(rtc::PhysicalSocketServer *this)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;

  *(_QWORD *)this = &off_24C0BA760;
  v2 = *((_QWORD *)this + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 136));
  v3 = (void *)*((_QWORD *)this + 13);
  if (v3)
  {
    *((_QWORD *)this + 14) = v3;
    operator delete(v3);
  }
  v4 = (_QWORD *)*((_QWORD *)this + 10);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      operator delete(v4);
      v4 = v5;
    }
    while (v5);
  }
  v6 = (void *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    operator delete(v6);
  v7 = (_QWORD *)*((_QWORD *)this + 5);
  if (v7)
  {
    do
    {
      v8 = (_QWORD *)*v7;
      operator delete(v7);
      v7 = v8;
    }
    while (v8);
  }
  v9 = (void *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v9)
    operator delete(v9);
}

{
  rtc::PhysicalSocketServer::~PhysicalSocketServer(this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::PhysicalSocketServer::WakeUp(rtc::PhysicalSocketServer *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 16) + 48))(*((_QWORD *)this + 16));
}

uint64_t rtc::PhysicalSocketServer::CreateSocket(rtc::PhysicalSocketServer *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int *v9;
  uint64_t v10;
  int *v11;

  v6 = operator new();
  *(_QWORD *)v6 = off_24C0BA7A8;
  v7 = v6 + 8;
  rtc::PhysicalSocket::PhysicalSocket((rtc::PhysicalSocket *)(v6 + 8), this, -1);
  *(_QWORD *)v6 = &off_24C0BA608;
  *(_QWORD *)(v6 + 8) = &unk_24C0BA660;
  *(_QWORD *)(v6 + 368) = &unk_24C0BA740;
  if (*(_DWORD *)(v6 + 432) != -1)
  {
    rtc::PhysicalSocketServer::Remove(*(int8x8_t **)(v6 + 424), (rtc::Dispatcher *)v6);
    v8 = *(_DWORD *)(v6 + 432);
    if (v8 != -1)
    {
      close(v8);
      v9 = __error();
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 + 8) + 120))(v7, *v9);
      *(_DWORD *)(v6 + 432) = -1;
      *(_DWORD *)(v6 + 516) = 0;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 + 8) + 184))(v7, 0);
      v10 = *(_QWORD *)(v6 + 520);
      if (v10)
      {
        *(_QWORD *)(v6 + 520) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
  }
  *(_DWORD *)(v6 + 432) = socket(a2, a3, 0);
  *(_BYTE *)(v6 + 436) = a3 == 2;
  *(_DWORD *)(v6 + 440) = a2;
  v11 = __error();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v6 + 8) + 120))(v7, *v11);
  if (*(_BYTE *)(v6 + 436))
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 184))(v7, 3);
  if (*(_DWORD *)(v6 + 432) == -1 || !rtc::SocketDispatcher::Initialize((rtc::SocketDispatcher *)v6))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return 0;
  }
  return v7;
}

char *rtc::PhysicalSocketServer::WrapSocket(rtc::PhysicalSocketServer *this, int a2)
{
  rtc::SocketDispatcher *v4;
  char *v5;

  v4 = (rtc::SocketDispatcher *)operator new();
  *(_QWORD *)v4 = off_24C0BA7A8;
  v5 = (char *)v4 + 8;
  rtc::PhysicalSocket::PhysicalSocket((rtc::SocketDispatcher *)((char *)v4 + 8), this, a2);
  *(_QWORD *)v4 = &off_24C0BA608;
  *((_QWORD *)v4 + 1) = &unk_24C0BA660;
  *((_QWORD *)v4 + 46) = &unk_24C0BA740;
  if (!rtc::SocketDispatcher::Initialize(v4))
  {
    (*(void (**)(rtc::SocketDispatcher *))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
  return v5;
}

uint64_t rtc::PhysicalSocketServer::Wait(int8x8_t *this, TimeDelta a2, char a3)
{
  char v4;
  timeval *v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  pthread_mutex_t *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char v48;
  timeval *v49;
  int v50;
  unint64_t *v51;
  unint64_t *v52;
  int8x8_t v53;
  unint64_t v54;
  uint8x8_t v55;
  unint64_t v56;
  int8x8_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  char v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t result;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  pthread_mutex_t *v103;
  timeval *v104;
  int v106;
  int v107;
  fd_set v108;
  fd_set v109;
  uint64_t v110;
  int v111;
  const char *v112;
  int v113;
  int v114;
  int v115;
  socklen_t v116[3];

  this[27].i8[1] = 1;
  if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = a3;
    v102 = 0;
    v5 = 0;
  }
  else
  {
    v6 = 1000 * ((a2.var0 + 999) / 1000);
    v7 = (unint64_t)((((125 * ((a2.var0 + 999) / 1000)) & 0x1FFFFFFFFFFFFFFFLL)
                           * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
    if (v6 - 1000 * v7 <= 0x1F3)
      v8 = (unint64_t)((((125 * ((a2.var0 + 999) / 1000)) & 0x1FFFFFFFFFFFFFFFLL)
                             * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
    else
      LODWORD(v8) = v7 + 1;
    if (-1000 * ((a2.var0 + 999) / 1000) % 0x3E8uLL <= 0x1F4)
      v9 = 0;
    else
      v9 = -1;
    if (v6 < 0)
      v10 = v9 - -1000 * ((a2.var0 + 999) / 1000) / 0x3E8uLL;
    else
      v10 = v8;
    if (v10 == -1)
    {
      v102 = 0;
      v5 = 0;
    }
    else
    {
      v110 = v10 / 1000;
      v111 = 1000 * (v10 % 1000);
      if (rtc::g_clock)
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v11 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      v102 = v11 / 1000 + 1000 * v10;
      v5 = (timeval *)&v110;
    }
    v4 = a3;
  }
  this[27].i8[0] = 1;
  v12 = (pthread_mutex_t *)&this[17];
  v103 = (pthread_mutex_t *)&this[17];
  v104 = v5;
  while (1)
  {
    memset(&v109, 0, sizeof(v109));
    memset(&v108, 0, sizeof(v108));
    pthread_mutex_lock(v12);
    this[14] = this[13];
    v13 = (_QWORD *)this[5];
    if (v13)
    {
      v14 = -1;
      while (1)
      {
        v15 = v13[2];
        v16 = v13[3];
        if ((v4 & 1) != 0 || v16 == *(_QWORD *)&this[16])
        {
          v18 = (char *)this[14];
          v17 = (unint64_t)this[15];
          if ((unint64_t)v18 >= v17)
          {
            v20 = (char *)this[13];
            v21 = (v18 - v20) >> 3;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 61)
              goto LABEL_160;
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 2 > v22)
              v22 = v23 >> 2;
            v24 = (unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8;
            v25 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v24)
              v25 = v22;
            if (!v25)
            {
LABEL_159:
              __break(1u);
              goto LABEL_160;
            }
            v106 = v14;
            if (v25 >> 61)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v26 = 8 * v25;
            v27 = operator new(8 * v25);
            v28 = &v27[8 * v21];
            *v28 = v15;
            v19 = v28 + 1;
            if (v18 != v20)
            {
              v29 = v18 - v20 - 8;
              if (v29 < 0x58)
                goto LABEL_164;
              if ((unint64_t)(v20 - v27) < 0x20)
                goto LABEL_164;
              v30 = (v29 >> 3) + 1;
              v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
              v32 = &v18[-v31];
              v28 = (_QWORD *)((char *)v28 - v31);
              v33 = &v27[8 * v21 - 16];
              v34 = v18 - 16;
              v35 = v30 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v36 = *(_OWORD *)v34;
                *(v33 - 1) = *((_OWORD *)v34 - 1);
                *v33 = v36;
                v33 -= 2;
                v34 -= 32;
                v35 -= 4;
              }
              while (v35);
              v18 = v32;
              if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_164:
                do
                {
                  v37 = *((_QWORD *)v18 - 1);
                  v18 -= 8;
                  *--v28 = v37;
                }
                while (v18 != v20);
              }
            }
            this[13] = (int8x8_t)v28;
            this[14] = (int8x8_t)v19;
            this[15] = (int8x8_t)&v27[v26];
            if (v20)
              operator delete(v20);
            v4 = a3;
            v14 = v106;
          }
          else
          {
            if (!v18)
              goto LABEL_159;
            *(_QWORD *)v18 = v15;
            v19 = v18 + 8;
          }
          this[14] = (int8x8_t)v19;
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
          if (v38 < 0x400)
          {
            v47 = v38;
            if ((int)v38 > v14)
              v14 = v38;
            v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
            if ((v48 & 0x11) != 0 && __darwin_check_fd_set_overflow(v47, &v109, 0))
              v109.fds_bits[v47 >> 5] |= 1 << v47;
            if ((v48 & 6) != 0 && __darwin_check_fd_set_overflow(v47, &v108, 0))
              v108.fds_bits[v47 >> 5] |= 1 << v47;
          }
          else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
          {
            v39 = *__error();
            v112 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/ph"
                   "ysical_socket_server.cc";
            v113 = 12467;
            v114 = 1;
            v115 = v39;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v40, v41, v42, v43, v44, v45, v46, (uint64_t)&v112);
          }
        }
        v13 = (_QWORD *)*v13;
        if (!v13)
          goto LABEL_60;
      }
    }
    v14 = -1;
LABEL_60:
    v12 = (pthread_mutex_t *)&this[17];
    pthread_mutex_unlock(v103);
    v49 = v104;
    v50 = select(v14 + 1, &v109, &v108, 0, v104);
    if (v50 < 0)
      break;
    if (!v50)
      goto LABEL_154;
    pthread_mutex_lock(v103);
    v51 = (unint64_t *)this[13];
    v52 = (unint64_t *)this[14];
    if (v51 != v52)
    {
      v53 = this[4];
      if (v53)
      {
LABEL_64:
        v54 = *v51;
        v55 = (uint8x8_t)vcnt_s8(v53);
        v55.i16[0] = vaddlv_u8(v55);
        if (v55.u32[0] > 1uLL)
        {
          v56 = *v51;
          if (v54 >= *(_QWORD *)&v53)
            v56 = v54 % *(_QWORD *)&v53;
        }
        else
        {
          v56 = v54 & (*(_QWORD *)&v53 - 1);
        }
        v57 = this[3];
        v58 = *(_QWORD **)(*(_QWORD *)&v57 + 8 * v56);
        if (v58)
        {
          v59 = (_QWORD *)*v58;
          if (*v58)
          {
            v60 = *(_QWORD *)&v53 - 1;
            if (v55.u32[0] < 2uLL)
            {
              while (1)
              {
                v61 = v59[1];
                if (v54 == v61)
                {
                  if (v59[2] == v54)
                    goto LABEL_84;
                }
                else if ((v61 & v60) != v56)
                {
                  goto LABEL_141;
                }
                v59 = (_QWORD *)*v59;
                if (!v59)
                  goto LABEL_141;
              }
            }
            do
            {
              v62 = v59[1];
              if (v54 == v62)
              {
                if (v59[2] == v54)
                {
LABEL_84:
                  if (v55.u32[0] > 1uLL)
                  {
                    v63 = *v51;
                    if (v54 >= *(_QWORD *)&v53)
                      v63 = v54 % *(_QWORD *)&v53;
                  }
                  else
                  {
                    v63 = v54 & v60;
                  }
                  v64 = *(_QWORD **)(*(_QWORD *)&v57 + 8 * v63);
                  if (v64)
                  {
                    v65 = (_QWORD *)*v64;
                    if (v65)
                    {
                      if (v55.u32[0] < 2uLL)
                      {
                        while (1)
                        {
                          v66 = v65[1];
                          if (v66 == v54)
                          {
                            if (v65[2] == v54)
                              goto LABEL_96;
                          }
                          else if ((v66 & v60) != v63)
                          {
                            goto LABEL_160;
                          }
                          v65 = (_QWORD *)*v65;
                          if (!v65)
                            goto LABEL_160;
                        }
                      }
                      do
                      {
                        v77 = v65[1];
                        if (v77 == v54)
                        {
                          if (v65[2] == v54)
                          {
LABEL_96:
                            v67 = v65[3];
                            v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
                            if (v68 >= 0x400)
                            {
                              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                              {
                                v69 = *__error();
                                v112 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Sourc"
                                       "e/webrtc/rtc_base/physical_socket_server.cc";
                                v113 = 12867;
                                v114 = 1;
                                v115 = v69;
                                rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v70, v71, v72, v73, v74, v75, v76, (uint64_t)&v112);
                              }
                              goto LABEL_141;
                            }
                            v78 = v68;
                            v79 = v68 >> 5;
                            v80 = 1 << v68;
                            if (__darwin_check_fd_set_overflow(v68, &v109, 0))
                            {
                              v81 = v109.fds_bits[v79] & v80;
                              if (v81)
                              {
                                if (__darwin_check_fd_set_overflow(v78, &v109, 0))
                                  v109.fds_bits[v79] &= ~v80;
                                v107 = 1;
                                if (__darwin_check_fd_set_overflow(v78, &v108, 0))
                                {
LABEL_111:
                                  v82 = v108.fds_bits[v79] & v80;
                                  if (v82)
                                  {
                                    if (__darwin_check_fd_set_overflow(v78, &v108, 0))
                                      v108.fds_bits[v79] &= ~v80;
                                    v83 = 1;
                                    LODWORD(v112) = 0;
                                    v84 = v82 | v81;
                                    v12 = (pthread_mutex_t *)&this[17];
                                    v49 = v104;
                                    if (!v84)
                                    {
LABEL_125:
                                      v88 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
                                      v89 = v107;
                                      if (v107)
                                      {
                                        if ((_DWORD)v112
                                          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 40))(v67) & 1) != 0)
                                        {
                                          v89 = 8;
                                          if (!v83)
                                          {
LABEL_129:
                                            if ((_DWORD)v112)
                                              v90 = v89 | 8;
                                            else
                                              v90 = v89;
                                            if (!v90)
                                              goto LABEL_141;
                                          }
                                        }
                                        else
                                        {
                                          if ((v88 & 0x10) != 0)
                                            v89 = 16;
                                          else
                                            v89 = 1;
                                          if (!v83)
                                            goto LABEL_129;
                                        }
                                      }
                                      else if (!v83)
                                      {
                                        goto LABEL_129;
                                      }
                                      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 24))(v67);
                                      goto LABEL_141;
                                    }
                                  }
                                  else
                                  {
                                    v83 = 0;
                                    LODWORD(v112) = 0;
                                    v86 = v81;
                                    v12 = (pthread_mutex_t *)&this[17];
                                    v49 = v104;
                                    if (!v86)
                                      goto LABEL_125;
                                  }
LABEL_122:
                                  v116[0] = 4;
                                  v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 32))(v67);
                                  if (getsockopt(v87, 0xFFFF, 4103, &v112, v116) < 0 && *__error() != 38)
                                    LODWORD(v112) = 9;
                                  goto LABEL_125;
                                }
                              }
                              else
                              {
                                v107 = 0;
                                if (__darwin_check_fd_set_overflow(v78, &v108, 0))
                                  goto LABEL_111;
                              }
                            }
                            else
                            {
                              v107 = 0;
                              v81 = 0;
                              if (__darwin_check_fd_set_overflow(v78, &v108, 0))
                                goto LABEL_111;
                            }
                            v83 = 0;
                            LODWORD(v112) = 0;
                            v85 = v81;
                            v12 = (pthread_mutex_t *)&this[17];
                            v49 = v104;
                            if (!v85)
                              goto LABEL_125;
                            goto LABEL_122;
                          }
                        }
                        else
                        {
                          if (v77 >= *(_QWORD *)&v53)
                            v77 %= *(_QWORD *)&v53;
                          if (v77 != v63)
                            break;
                        }
                        v65 = (_QWORD *)*v65;
                      }
                      while (v65);
                    }
                  }
LABEL_160:
                  abort();
                }
              }
              else
              {
                if (v62 >= *(_QWORD *)&v53)
                  v62 %= *(_QWORD *)&v53;
                if (v62 != v56)
                  break;
              }
              v59 = (_QWORD *)*v59;
            }
            while (v59);
          }
        }
LABEL_141:
        while (++v51 != v52)
        {
          v53 = this[4];
          if (v53)
            goto LABEL_64;
        }
      }
    }
    pthread_mutex_unlock(v12);
LABEL_146:
    if (v49)
    {
      v49->tv_sec = 0;
      v49->tv_usec = 0;
      if (rtc::g_clock)
      {
        v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v91 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      v92 = v91 / -1000 + v102;
      if (v92 >= 1)
      {
        v49->tv_sec = v92 / 0xF4240uLL;
        v49->tv_usec = v92 % 0xF4240uLL;
      }
    }
    if (!this[27].i8[0])
    {
LABEL_154:
      result = 1;
      goto LABEL_155;
    }
  }
  if (*__error() == 4)
    goto LABEL_146;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    v94 = *__error();
    v112 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc";
    v113 = 12667;
    v114 = 1;
    v115 = v94;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)14,rtc::webrtc_logging_impl::LogMetadataErr>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v95, v96, v97, v98, v99, v100, v101, (uint64_t)&v112);
  }
  result = 0;
LABEL_155:
  this[27].i8[1] = 0;
  return result;
}

rtc::Signaler *rtc::Signaler::Signaler(rtc::Signaler *this, rtc::PhysicalSocketServer *a2, BOOL *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pthread_mutexattr_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = &off_24C0BA7E8;
  *((_QWORD *)this + 1) = a2;
  v13.__sig = -1;
  if (pipe((int *)&v13) < 0 && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/physical_socket_server.cc");
  *((_QWORD *)this + 2) = v13.__sig;
  *((_BYTE *)this + 24) = 0;
  pthread_mutexattr_init(&v13);
  pthread_mutexattr_setpolicy_np(&v13, 3);
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 32), &v13);
  pthread_mutexattr_destroy(&v13);
  *((_QWORD *)this + 12) = a3;
  rtc::PhysicalSocketServer::Add(*((rtc::PhysicalSocketServer **)this + 1), this);
  return this;
}

void rtc::Signaler::~Signaler(rtc::Signaler *this)
{
  *(_QWORD *)this = &off_24C0BA7E8;
  rtc::PhysicalSocketServer::Remove(*((int8x8_t **)this + 1), this);
  close(*((_DWORD *)this + 4));
  close(*((_DWORD *)this + 5));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 32));
}

{
  *(_QWORD *)this = &off_24C0BA7E8;
  rtc::PhysicalSocketServer::Remove(*((int8x8_t **)this + 1), this);
  close(*((_DWORD *)this + 4));
  close(*((_DWORD *)this + 5));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 32));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::Signaler::GetRequestedEvents(rtc::Signaler *this)
{
  return 1;
}

uint64_t rtc::Signaler::OnEvent(rtc::Signaler *this)
{
  pthread_mutex_t *v2;
  _BYTE v4[4];

  v2 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  if (*((_BYTE *)this + 24))
  {
    read(*((_DWORD *)this + 4), v4, 4uLL);
    *((_BYTE *)this + 24) = 0;
  }
  **((_BYTE **)this + 12) = 0;
  return pthread_mutex_unlock(v2);
}

uint64_t rtc::Signaler::GetDescriptor(rtc::Signaler *this)
{
  return *((unsigned int *)this + 4);
}

uint64_t rtc::Signaler::IsDescriptorClosed(rtc::Signaler *this)
{
  return 0;
}

uint64_t rtc::Signaler::Signal(rtc::Signaler *this)
{
  pthread_mutex_t *v2;
  char __buf;

  v2 = (pthread_mutex_t *)((char *)this + 32);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 32));
  if (!*((_BYTE *)this + 24))
  {
    __buf = 0;
    write(*((_DWORD *)this + 5), &__buf, 1uLL);
    *((_BYTE *)this + 24) = 1;
  }
  return pthread_mutex_unlock(v2);
}

void absl::internal_any_invocable::LocalInvoker<false,void,rtc::PhysicalSocket::Connect(rtc::SocketAddress const&)::$_0 &>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  socklen_t v5;
  int v6;
  int *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  void *__p[2];
  uint64_t v15;
  void *v16;
  _BYTE v17[20];
  unsigned __int16 v18;
  int v19;
  char v20;
  sockaddr v21[8];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v1 = *a1;
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a1 + 512) + 32))(*(_QWORD *)(*a1 + 512));
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  if ((_DWORD)v3)
  {
    v4 = v3;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
    goto LABEL_23;
  }
  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v16 = &unk_24C0ACDA0;
  v20 = 0;
  v18 = 0;
  v19 = 0;
  memset(v17, 0, sizeof(v17));
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v2 + 16))(v2, 2, __p))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 104))(v1);
    goto LABEL_19;
  }
  if (*(_DWORD *)(v1 + 424) == -1
    && !(*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v1 + 152))(v1, *(unsigned int *)v17, 1))
  {
    goto LABEL_15;
  }
  memset(v21, 0, sizeof(v21));
  v21[0].sa_family = v17[0];
  if (v17[0] == 2)
  {
    *(_DWORD *)&v21[0].sa_data[2] = *(_DWORD *)&v17[4];
    *(_WORD *)v21[0].sa_data = __rev16(v18);
    v5 = 16;
  }
  else if (v17[0] == 30)
  {
    *(sockaddr *)&v21[0].sa_data[6] = *(sockaddr *)&v17[4];
    *(_WORD *)v21[0].sa_data = __rev16(v18);
    *(_DWORD *)&v21[1].sa_data[6] = v19;
    v5 = 28;
  }
  else
  {
    v5 = 0;
  }
  v6 = connect(*(_DWORD *)(v1 + 424), v21, v5);
  v7 = __error();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 120))(v1, *v7);
  if (!v6)
  {
    v8 = 3;
    v9 = 2;
    goto LABEL_18;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v1 + 112))(v1) - 35 > 1)
  {
LABEL_15:
    v10 = -1;
    if (SHIBYTE(v15) < 0)
      goto LABEL_20;
    goto LABEL_21;
  }
  v8 = 7;
  v9 = 1;
LABEL_18:
  *(_DWORD *)(v1 + 508) = v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 192))(v1, v8);
LABEL_19:
  v10 = 0;
  if (SHIBYTE(v15) < 0)
LABEL_20:
    operator delete(__p[0]);
LABEL_21:
  if (!v10)
    return;
  v4 = 0xFFFFFFFFLL;
LABEL_23:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 120))(v1, v4);
  v11 = *(_QWORD *)(v1 + 328);
  for (*(_QWORD *)(v1 + 344) = v11; v11 != v1 + 320; v11 = *(_QWORD *)(v1 + 344))
  {
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v12 = v11 + 16;
    *(_QWORD *)(v1 + 344) = *(_QWORD *)(v12 - 8);
    v13(v12, v1, v4);
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::__unordered_map_hasher<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::hash<rtc::Dispatcher *>,std::equal_to<rtc::Dispatcher *>,true>,std::__unordered_map_equal<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::equal_to<rtc::Dispatcher *>,std::hash<rtc::Dispatcher *>,true>,std::allocator<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>>>::find<rtc::Dispatcher *>(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = HIDWORD(*a2);
  v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v4);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = (uint8x8_t)vcnt_s8(v2);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v2)
      v8 = v6 % *(_QWORD *)&v2;
  }
  else
  {
    v8 = v6 & (*(_QWORD *)&v2 - 1);
  }
  v9 = *(_QWORD **)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  result = (_QWORD *)*v9;
  if (*v9)
  {
    if (v7.u32[0] < 2uLL)
    {
      v11 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v13 = result[1];
        if (v6 == v13)
        {
          if (result[2] == v3)
            return result;
        }
        else if ((v13 & v11) != v8)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v12 = result[1];
      if (v6 == v12)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v12 >= *(_QWORD *)&v2)
          v12 %= *(_QWORD *)&v2;
        if (v12 != v8)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned long long,rtc::Dispatcher *>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,rtc::Dispatcher *>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,rtc::Dispatcher *>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,rtc::Dispatcher *>>>::__emplace_unique_key_args<unsigned long long,unsigned long long &,rtc::Dispatcher *&>(float *a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _QWORD *v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *i;
  size_t v33;
  uint64_t v34;
  size_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  size_t v41;
  size_t v42;
  _QWORD *v43;
  unint64_t v44;

  v8 = *a2;
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] < 2uLL)
        {
          while (1)
          {
            v14 = v12[1];
            if (v14 == v8)
            {
              if (v12[2] == v8)
                return v12;
            }
            else if ((v14 & (v9 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v12 = (_QWORD *)*v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == v8)
              return v12;
          }
          else
          {
            if (v13 >= v9)
              v13 %= v9;
            if (v13 != v4)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v15 = *a4;
  v12[2] = *a3;
  v12[3] = v15;
  v16 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v17 = a1[8];
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v20 = 1;
    if (v9 >= 3)
      v20 = (v9 & (v9 - 1)) != 0;
    v21 = v20 | (2 * v9);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (prime > v9)
      goto LABEL_37;
    if (prime < v9)
    {
      v35 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v36 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v42 = std::__next_prime(v35);
        if (prime <= v42)
          prime = v42;
        if (prime >= v9)
        {
LABEL_60:
          v9 = *((_QWORD *)a1 + 1);
          v38 = v9 - 1;
          if ((v9 & (v9 - 1)) == 0)
            goto LABEL_87;
          goto LABEL_74;
        }
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
        if (prime <= v35)
          prime = v35;
        if (prime >= v9)
          goto LABEL_60;
      }
      if (prime)
      {
LABEL_37:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v24 = operator new(8 * prime);
        v25 = *(_QWORD **)a1;
        *(_QWORD *)a1 = v24;
        if (v25)
          operator delete(v25);
        v26 = 0;
        *((_QWORD *)a1 + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
        while (prime != v26);
        v28 = (uint64_t *)(a1 + 4);
        v27 = (_QWORD *)*((_QWORD *)a1 + 2);
        if (!v27)
          goto LABEL_73;
        v29 = v27[1];
        v30 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v31 = v29 & v30;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v28;
          for (i = (_QWORD *)*v27; *v27; i = (_QWORD *)*v27)
          {
            v33 = i[1] & v30;
            if (v33 == v31)
            {
              v27 = i;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
            {
              *v27 = *i;
              v34 = 8 * v33;
              *i = **(_QWORD **)(*(_QWORD *)a1 + v34);
              **(_QWORD **)(*(_QWORD *)a1 + v34) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v27;
              v27 = i;
              v31 = v33;
            }
          }
          goto LABEL_73;
        }
        if (v29 >= prime)
          v29 %= prime;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v28;
        v39 = (_QWORD *)*v27;
        if (!*v27)
        {
LABEL_73:
          v9 = prime;
          v38 = prime - 1;
          if ((prime & (prime - 1)) != 0)
            goto LABEL_74;
LABEL_87:
          v4 = v38 & v8;
          v18 = *(_QWORD **)a1;
          v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v8));
          if (v19)
            goto LABEL_26;
          goto LABEL_88;
        }
        while (1)
        {
          v41 = v39[1];
          if (v41 >= prime)
            v41 %= prime;
          if (v41 == v29)
            goto LABEL_67;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v41))
          {
            *v27 = *v39;
            v40 = 8 * v41;
            *v39 = **(_QWORD **)(*(_QWORD *)a1 + v40);
            **(_QWORD **)(*(_QWORD *)a1 + v40) = v39;
            v39 = v27;
LABEL_67:
            v27 = v39;
            v39 = (_QWORD *)*v39;
            if (!v39)
              goto LABEL_73;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v41) = v27;
            v27 = v39;
            v39 = (_QWORD *)*v39;
            v29 = v41;
            if (!v39)
              goto LABEL_73;
          }
        }
      }
      v43 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v43)
        operator delete(v43);
      v9 = 0;
      *((_QWORD *)a1 + 1) = 0;
    }
    v38 = v9 - 1;
    if ((v9 & (v9 - 1)) == 0)
      goto LABEL_87;
LABEL_74:
    if (v8 >= v9)
    {
      v4 = v8 % v9;
      v18 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v8 % v9));
      if (v19)
        goto LABEL_26;
    }
    else
    {
      v4 = v8;
      v18 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v8);
      if (v19)
        goto LABEL_26;
    }
    goto LABEL_88;
  }
  v18 = *(_QWORD **)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
LABEL_26:
    *v12 = *v19;
LABEL_94:
    *v19 = v12;
    goto LABEL_95;
  }
LABEL_88:
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v18[v4] = a1 + 4;
  if (*v12)
  {
    v44 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v44 >= v9)
        v44 %= v9;
    }
    else
    {
      v44 &= v9 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v44);
    goto LABEL_94;
  }
LABEL_95:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

_QWORD *std::__hash_table<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::__unordered_map_hasher<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::hash<rtc::Dispatcher *>,std::equal_to<rtc::Dispatcher *>,true>,std::__unordered_map_equal<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::equal_to<rtc::Dispatcher *>,std::hash<rtc::Dispatcher *>,true>,std::allocator<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>>>::__emplace_unique_key_args<rtc::Dispatcher *,rtc::Dispatcher *&,unsigned long long &>(float *a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  _QWORD **v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  _QWORD *v21;
  _QWORD *v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t prime;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  size_t v32;
  size_t v33;
  size_t v34;
  _QWORD *i;
  size_t v36;
  uint64_t v37;
  size_t v38;
  uint8x8_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  unint64_t v47;

  v8 = *a2;
  v9 = HIDWORD(*a2);
  v10 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v9);
  v11 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  v12 = *((_QWORD *)a1 + 1);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v17 = v15[1];
            if (v17 == v11)
            {
              if (v15[2] == v8)
                return v15;
            }
            else if ((v17 & (v12 - 1)) != v4)
            {
              goto LABEL_23;
            }
            v15 = (_QWORD *)*v15;
            if (!v15)
              goto LABEL_23;
          }
        }
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (v15[2] == v8)
              return v15;
          }
          else
          {
            if (v16 >= v12)
              v16 %= v12;
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_23:
  v15 = operator new(0x20uLL);
  *v15 = 0;
  v15[1] = v11;
  v18 = *a4;
  v15[2] = *a3;
  v15[3] = v18;
  v19 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v20 = a1[8];
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v23 = 1;
    if (v12 >= 3)
      v23 = (v12 & (v12 - 1)) != 0;
    v24 = v23 | (2 * v12);
    v25 = vcvtps_u32_f32(v19 / v20);
    if (v24 <= v25)
      prime = v25;
    else
      prime = v24;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v12 = *((_QWORD *)a1 + 1);
    }
    if (prime > v12)
      goto LABEL_37;
    if (prime < v12)
    {
      v38 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v12 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v12), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v45 = std::__next_prime(v38);
        if (prime <= v45)
          prime = v45;
        if (prime >= v12)
        {
LABEL_60:
          v12 = *((_QWORD *)a1 + 1);
          v41 = v12 - 1;
          if ((v12 & (v12 - 1)) == 0)
            goto LABEL_87;
          goto LABEL_74;
        }
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
        if (prime <= v38)
          prime = v38;
        if (prime >= v12)
          goto LABEL_60;
      }
      if (prime)
      {
LABEL_37:
        if (prime >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v27 = operator new(8 * prime);
        v28 = *(_QWORD **)a1;
        *(_QWORD *)a1 = v27;
        if (v28)
          operator delete(v28);
        v29 = 0;
        *((_QWORD *)a1 + 1) = prime;
        do
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
        while (prime != v29);
        v31 = (uint64_t *)(a1 + 4);
        v30 = (_QWORD *)*((_QWORD *)a1 + 2);
        if (!v30)
          goto LABEL_73;
        v32 = v30[1];
        v33 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v34 = v32 & v33;
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v31;
          for (i = (_QWORD *)*v30; *v30; i = (_QWORD *)*v30)
          {
            v36 = i[1] & v33;
            if (v36 == v34)
            {
              v30 = i;
            }
            else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v36))
            {
              *v30 = *i;
              v37 = 8 * v36;
              *i = **(_QWORD **)(*(_QWORD *)a1 + v37);
              **(_QWORD **)(*(_QWORD *)a1 + v37) = i;
            }
            else
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v36) = v30;
              v30 = i;
              v34 = v36;
            }
          }
          goto LABEL_73;
        }
        if (v32 >= prime)
          v32 %= prime;
        *(_QWORD *)(*(_QWORD *)a1 + 8 * v32) = v31;
        v42 = (_QWORD *)*v30;
        if (!*v30)
        {
LABEL_73:
          v12 = prime;
          v41 = prime - 1;
          if ((prime & (prime - 1)) != 0)
            goto LABEL_74;
LABEL_87:
          v4 = v41 & v11;
          v21 = *(_QWORD **)a1;
          v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v41 & v11));
          if (v22)
            goto LABEL_26;
          goto LABEL_88;
        }
        while (1)
        {
          v44 = v42[1];
          if (v44 >= prime)
            v44 %= prime;
          if (v44 == v32)
            goto LABEL_67;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v44))
          {
            *v30 = *v42;
            v43 = 8 * v44;
            *v42 = **(_QWORD **)(*(_QWORD *)a1 + v43);
            **(_QWORD **)(*(_QWORD *)a1 + v43) = v42;
            v42 = v30;
LABEL_67:
            v30 = v42;
            v42 = (_QWORD *)*v42;
            if (!v42)
              goto LABEL_73;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v44) = v30;
            v30 = v42;
            v42 = (_QWORD *)*v42;
            v32 = v44;
            if (!v42)
              goto LABEL_73;
          }
        }
      }
      v46 = *(_QWORD **)a1;
      *(_QWORD *)a1 = 0;
      if (v46)
        operator delete(v46);
      v12 = 0;
      *((_QWORD *)a1 + 1) = 0;
    }
    v41 = v12 - 1;
    if ((v12 & (v12 - 1)) == 0)
      goto LABEL_87;
LABEL_74:
    if (v11 >= v12)
    {
      v4 = v11 % v12;
      v21 = *(_QWORD **)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
      if (v22)
        goto LABEL_26;
    }
    else
    {
      v4 = v11;
      v21 = *(_QWORD **)a1;
      v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
      if (v22)
        goto LABEL_26;
    }
    goto LABEL_88;
  }
  v21 = *(_QWORD **)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
LABEL_26:
    *v15 = *v22;
LABEL_94:
    *v22 = v15;
    goto LABEL_95;
  }
LABEL_88:
  *v15 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v15;
  v21[v4] = a1 + 4;
  if (*v15)
  {
    v47 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v47 >= v12)
        v47 %= v12;
    }
    else
    {
      v47 &= v12 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v47);
    goto LABEL_94;
  }
LABEL_95:
  ++*((_QWORD *)a1 + 3);
  return v15;
}

_QWORD *std::__hash_table<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::__unordered_map_hasher<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::hash<rtc::Dispatcher *>,std::equal_to<rtc::Dispatcher *>,true>,std::__unordered_map_equal<rtc::Dispatcher *,std::__hash_value_type<rtc::Dispatcher *,unsigned long long>,std::equal_to<rtc::Dispatcher *>,std::hash<rtc::Dispatcher *>,true>,std::allocator<std::__hash_value_type<rtc::Dispatcher *,unsigned long long>>>::find<rtc::Dispatcher *>(_QWORD *a1, unint64_t a2)
{
  int8x8_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v4 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v3 >> 47) ^ v3);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v5;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  result = (_QWORD *)*v8;
  if (*v8)
  {
    if (v6.u32[0] < 2uLL)
    {
      v10 = *(_QWORD *)&v2 - 1;
      while (1)
      {
        v12 = result[1];
        if (v12 == v5)
        {
          if (result[2] == a2)
            return result;
        }
        else if ((v12 & v10) != v7)
        {
          return 0;
        }
        result = (_QWORD *)*result;
        if (!result)
          return result;
      }
    }
    do
    {
      v11 = result[1];
      if (v11 == v5)
      {
        if (result[2] == a2)
          return result;
      }
      else
      {
        if (v11 >= *(_QWORD *)&v2)
          v11 %= *(_QWORD *)&v2;
        if (v11 != v7)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t webrtc::PitchBasedVad::VoicingProbability(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  unint64_t v23;
  double v24;
  long double v25;
  uint64_t v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  unint64_t v37;
  double v38;
  long double v39;
  BOOL v40;
  double v42;
  double v43;
  double v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  int v51;
  double v52;
  uint64_t v57;
  _QWORD v58[15];

  v58[13] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 128))
    return 0;
  v3 = a2;
  v4 = a1;
  v5 = 0;
  while (1)
  {
    v7 = v3 + 8 * v5;
    v8 = *(double *)v7;
    v9 = *(double *)(v7 + 64);
    v58[0] = *(_QWORD *)v7;
    *(double *)&v58[1] = v9;
    v58[2] = *(_QWORD *)(v7 + 32);
    v10 = *(unsigned int *)(v4 + 56);
    v11 = -1.0;
    v12 = -1.0;
    v57 = v5;
    if ((int)v10 <= 10)
    {
      v13 = *(unsigned int *)(v4 + 60);
      if ((int)v13 < 1)
      {
        v12 = 0.0;
      }
      else
      {
        v14 = *(double **)(v4 + 32);
        if ((int)v10 <= 0)
        {
          v12 = 0.0;
          do
          {
            v25 = *v14++;
            v12 = v12 + exp(v25);
            --v13;
          }
          while (v13);
        }
        else
        {
          v15 = 0;
          v16 = *(_QWORD *)(v4 + 40);
          v17 = *(_QWORD *)(v4 + 48);
          v18 = 8 * v10;
          v12 = 0.0;
          do
          {
            v19 = 0;
            do
            {
              *(double *)&v58[v19 / 8 + 3] = *(double *)&v58[v19 / 8] - *(double *)(v16 + v19);
              v19 += 8;
            }
            while (v18 != v19);
            v20 = 0;
            v21 = 0.0;
            v22 = v17;
            do
            {
              v23 = 0;
              v24 = 0.0;
              do
              {
                v24 = v24 + *(double *)(v22 + v23) * *(double *)&v58[v23 / 8 + 3];
                v23 += 8;
              }
              while (v18 != v23);
              v22 += 8 * (v10 - 1) + 8;
              v21 = v21 + v24 * *(double *)&v58[v20++ + 3];
            }
            while (v20 != v10);
            v12 = v12 + exp(v14[v15] + v21 * -0.5);
            v17 += 8 * (v10 * v10);
            ++v15;
            v16 += 8 * (int)v10;
          }
          while (v15 != v13);
        }
      }
      v4 = a1;
      v3 = a2;
      v5 = v57;
    }
    v26 = *(unsigned int *)(v4 + 24);
    if ((int)v26 <= 10)
    {
      v27 = *(unsigned int *)(v4 + 28);
      if ((int)v27 < 1)
      {
        v11 = 0.0;
      }
      else
      {
        v28 = *(double **)v4;
        if ((int)v26 <= 0)
        {
          v11 = 0.0;
          do
          {
            v39 = *v28++;
            v11 = v11 + exp(v39);
            --v27;
          }
          while (v27);
        }
        else
        {
          v29 = 0;
          v30 = *(_QWORD *)(v4 + 8);
          v31 = *(_QWORD *)(v4 + 16);
          v32 = 8 * v26;
          v11 = 0.0;
          do
          {
            v33 = 0;
            do
            {
              *(double *)&v58[v33 / 8 + 3] = *(double *)&v58[v33 / 8] - *(double *)(v30 + v33);
              v33 += 8;
            }
            while (v32 != v33);
            v34 = 0;
            v35 = 0.0;
            v36 = v31;
            do
            {
              v37 = 0;
              v38 = 0.0;
              do
              {
                v38 = v38 + *(double *)(v36 + v37) * *(double *)&v58[v37 / 8 + 3];
                v37 += 8;
              }
              while (v32 != v37);
              v36 += 8 * (v26 - 1) + 8;
              v35 = v35 + v38 * *(double *)&v58[v34++ + 3];
            }
            while (v34 != v26);
            v11 = v11 + exp(v28[v29] + v35 * -0.5);
            v31 += 8 * (v26 * v26);
            ++v29;
            v30 += 8 * (int)v26;
          }
          while (v29 != v27);
        }
      }
      v4 = a1;
      v3 = a2;
      v5 = v57;
    }
    v40 = v9 >= 200.0 && v9 <= 2000.0;
    if (!v40 || v8 < -2.0)
    {
      v12 = v11 * 1.0e-12;
    }
    else if (v8 > -0.9)
    {
      v11 = v12 * 1.0e-12;
    }
    v42 = v12 * *(double *)(v4 + 64) / (v11 * (1.0 - *(double *)(v4 + 64)) + v12 * *(double *)(v4 + 64));
    v43 = 0.99;
    if (v42 <= 0.99)
    {
      v43 = v12 * *(double *)(v4 + 64) / (v11 * (1.0 - *(double *)(v4 + 64)) + v12 * *(double *)(v4 + 64));
      if (v42 < 0.01)
        v43 = 0.01;
    }
    v44 = v43
        * *(double *)(a3 + 8 * v5)
        / (v43 * *(double *)(a3 + 8 * v5) + (1.0 - v43) * (1.0 - *(double *)(a3 + 8 * v5)));
    *(double *)(a3 + 8 * v5) = v44;
    v45 = *(uint64_t **)(v4 + 72);
    if (*((_BYTE *)v45 + 8))
    {
      v46 = *((_DWORD *)v45 + 3);
      v47 = v46;
      v48 = *v45;
      v49 = *((double *)v45 + 3) - *(double *)(*v45 + 8 * v46);
    }
    else
    {
      v49 = *((double *)v45 + 3);
      v46 = *((_DWORD *)v45 + 3);
      v48 = *v45;
      v47 = v46;
    }
    *((double *)v45 + 3) = v44 + v49;
    *(double *)(v48 + 8 * v47) = v44;
    *((_DWORD *)v45 + 3) = v46 + 1;
    if (v46 + 1 >= *((_DWORD *)v45 + 4))
    {
      *((_BYTE *)v45 + 8) = 1;
      *((_DWORD *)v45 + 3) = 0;
    }
    if ((webrtc::VadCircularBuffer::RemoveTransient((webrtc::VadCircularBuffer *)v45, 7, 0.2) & 0x80000000) != 0)
      return 0xFFFFFFFFLL;
    v50 = *(_QWORD *)(v4 + 72);
    if (*(_BYTE *)(v50 + 8))
    {
      v51 = *(_DWORD *)(v50 + 16);
LABEL_60:
      v52 = *(double *)(v50 + 24) / (double)v51;
      v6 = 0.99;
      if (v52 > 0.99)
        goto LABEL_4;
      v6 = *(double *)(v50 + 24) / (double)v51;
      if (v52 >= 0.01)
        goto LABEL_4;
      goto LABEL_3;
    }
    v51 = *(_DWORD *)(v50 + 12);
    if (v51 >= 1)
      goto LABEL_60;
LABEL_3:
    v6 = 0.01;
LABEL_4:
    *(double *)(v4 + 64) = v6;
    if ((unint64_t)++v5 >= *(_QWORD *)(v3 + 128))
      return 0;
  }
}

void *WebRtcIsac_PitchAnalysis()
{
  uint64_t v0;
  uint64_t v1;
  float64x2_t *v2;
  float64x2_t *v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  double v31;
  double v32;
  unint64_t v33;
  double v34;
  uint64_t v35;
  double v36;
  double v37;
  unint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  double v42;
  unint64_t v44;
  double v45;
  double v46;
  double v47;
  float64x2_t *v48;
  uint64_t i;
  const double *f64;
  float64x2_t *v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  int32x2_t v56;
  double v57;
  int32x2_t v63;
  int64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  long double v68;
  uint64_t v69;
  int v70;
  double v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  double v87;
  int v88;
  uint64_t v89;
  float64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  double v103;
  double v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  double v109;
  unint64_t v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  unint64_t v114;
  double *v115;
  uint64_t v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double *v125;
  double *v126;
  double *v127;
  int *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  double *v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;
  double v138;
  double v139;
  double *v140;
  double v141;
  double v142;
  double v143;
  double v144;
  double v145;
  double v146;
  double v147;
  double v148;
  double v149;
  double *v150;
  double v151;
  double v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  double v162;
  double v163;
  double v164;
  double *v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  double v172;
  double v173;
  double v174;
  double *v175;
  double v176;
  double v177;
  double v178;
  double v179;
  double v180;
  double v181;
  double v182;
  double v183;
  double v184;
  double v185;
  double v186;
  double v187;
  double v188;
  double v189;
  double v190;
  double v191;
  double v192;
  double v193;
  double v194;
  uint64_t v195;
  double v196;
  double v197;
  long double v198;
  double v199;
  uint64_t v200;
  double v201;
  double v202;
  double v203;
  uint64_t v204;
  double v205;
  char v206;
  double v207;
  char v208;
  uint64_t v209;
  double v210;
  float64x2_t v211;
  float64x2_t v212;
  uint64_t v213;
  double v214;
  float64x2_t v215;
  float64x2_t v216;
  uint64_t v217;
  double v218;
  double v219;
  float64x2_t v220;
  float64x2_t v221;
  uint64_t v222;
  double v223;
  double v224;
  float64x2_t v225;
  float64x2_t v226;
  uint64_t v227;
  double v228;
  double v229;
  uint64_t v230;
  double v231;
  double v232;
  float64x2_t v233;
  float64x2_t v234;
  double v235;
  double v236;
  uint64_t j;
  uint64_t v238;
  double v239;
  double v240;
  float64x2_t v241;
  float64x2_t v242;
  uint64_t v243;
  double v244;
  double v245;
  float64x2_t v246;
  float64x2_t v247;
  double v248;
  double v249;
  uint64_t k;
  uint64_t v251;
  double v252;
  double v253;
  float64x2_t v254;
  float64x2_t v255;
  uint64_t v256;
  double v257;
  double v258;
  float64x2_t v259;
  float64x2_t v260;
  double v261;
  double v262;
  uint64_t v263;
  float64x2_t v264;
  float64x2_t v265;
  double v266;
  double v267;
  uint64_t m;
  double v269;
  double v270;
  double v271;
  double v272;
  double v273;
  double v274;
  double v275;
  double v276;
  double v277;
  double v278;
  double v279;
  double v280;
  double v281;
  double v282;
  double v283;
  double v284;
  double v285;
  double v286;
  double v287;
  double v288;
  double v289;
  double v290;
  double v291;
  double v292;
  double v293;
  double v294;
  double v295;
  double v296;
  double v297;
  double v298;
  double v299;
  double v300;
  double v301;
  double v302;
  double v303;
  double v304;
  double v305;
  double v306;
  double v307;
  double v308;
  double v309;
  double v310;
  double v311;
  double v312;
  double v313;
  double v314;
  uint64_t v315;
  double v316;
  uint64_t v317;
  double v318;
  uint64_t v319;
  double v320;
  uint64_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v325;
  float64x2_t v326;
  float64x2_t v327;
  void *result;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  float64x2_t v332;
  float64x2_t v333;
  float64x2_t v334;
  int v335;
  int v336;
  double v337;
  double v338;
  double *v339;
  float64x2_t v340;
  float64x2_t v341;
  float64x2_t v342;
  float64x2_t v343;
  float64x2_t __xa;
  float64x2_t __xb;
  double __x;
  long double v347;
  long double v348;
  float64x2_t __dst[60];
  _BYTE v350[1152];
  float64x2_t v351[132];
  _OWORD v352[132];
  _BYTE v353[1912];
  uint64_t v354;
  _BYTE v355[1920];
  _BYTE v356[80];
  _BYTE v357[80];
  _QWORD v358[10];
  _DWORD v359[10];
  _QWORD v360[25];
  _BYTE v361[80];
  _QWORD v362[69];
  _BYTE v363[552];
  uint64_t v364;
  _BYTE v365[552];
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _BYTE v369[552];
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _BYTE v373[552];
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  _BYTE v377[552];
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  _BYTE v383[552];
  _BYTE v384[552];
  uint64_t v385;
  _BYTE v386[552];
  float64x2_t v387;
  double v388;
  uint64_t v389;
  float64x2_t v390;
  double v391;
  uint64_t v392;
  float64x2x2_t v393;
  float64x2x2_t v394;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v339 = v4;
  v5 = v1;
  v7 = v6;
  v8 = (const void *)v0;
  v9 = 0;
  v392 = *MEMORY[0x24BDAC8D0];
  v10 = *(double *)(v1 + 624);
  v11 = *(double *)(v1 + 616);
  do
  {
    v12 = *(double *)(v0 + v9);
    v13 = v10 + v12;
    *(double *)&v355[v9] = v10 + v12;
    v10 = v11 + v12 * -1.99524592 + (v10 + v12) * 1.8686466;
    *(double *)(v1 + 624) = v10;
    v11 = v13 * -0.8836 + *(double *)(v0 + v9) * 0.996004;
    *(double *)(v1 + 616) = v11;
    v9 += 8;
  }
  while (v9 != 1920);
  v14 = (_OWORD *)(v1 + 632);
  v15 = *(_OWORD *)(v1 + 776);
  v352[8] = *(_OWORD *)(v1 + 760);
  v352[9] = v15;
  v16 = *(_OWORD *)(v1 + 808);
  v352[10] = *(_OWORD *)(v1 + 792);
  v352[11] = v16;
  v17 = *(_OWORD *)(v1 + 712);
  v352[4] = *(_OWORD *)(v1 + 696);
  v352[5] = v17;
  v18 = *(_OWORD *)(v1 + 744);
  v352[6] = *(_OWORD *)(v1 + 728);
  v352[7] = v18;
  v19 = *(_OWORD *)(v1 + 648);
  v352[0] = *(_OWORD *)(v1 + 632);
  v352[1] = v19;
  v20 = *(_OWORD *)(v1 + 680);
  v352[2] = *(_OWORD *)(v1 + 664);
  v352[3] = v20;
  WebRtcIsac_WeightingFilter();
  v21 = v352[129];
  *(_OWORD *)(v5 + 760) = v352[128];
  *(_OWORD *)(v5 + 776) = v21;
  v22 = v352[131];
  *(_OWORD *)(v5 + 792) = v352[130];
  *(_OWORD *)(v5 + 808) = v22;
  v23 = v352[125];
  *(_OWORD *)(v5 + 696) = v352[124];
  *(_OWORD *)(v5 + 712) = v23;
  v24 = v352[127];
  *(_OWORD *)(v5 + 728) = v352[126];
  *(_OWORD *)(v5 + 744) = v24;
  v25 = v352[121];
  *v14 = v352[120];
  *(_OWORD *)(v5 + 648) = v25;
  v26 = v352[123];
  *(_OWORD *)(v5 + 664) = v352[122];
  *(_OWORD *)(v5 + 680) = v26;
  v27 = *(double *)(v5 + 2576);
  v28 = *(double *)(v5 + 2584);
  v360[0] = v362;
  v360[1] = v363;
  v360[2] = &v364;
  v360[3] = v365;
  v360[4] = &v366;
  v360[5] = &v367;
  v360[6] = &v368;
  v360[7] = v369;
  v360[8] = &v370;
  v360[9] = &v371;
  v360[10] = &v372;
  v360[11] = v373;
  v360[12] = &v374;
  v360[13] = &v375;
  v360[14] = &v376;
  v360[15] = v377;
  v360[16] = &v378;
  v360[17] = &v379;
  v360[18] = &v380;
  v360[19] = &v381;
  v360[20] = &v382;
  v360[21] = v383;
  v360[22] = v384;
  v360[23] = &v385;
  v360[24] = v386;
  bzero(v361, 0x3638uLL);
  memcpy(__dst, (const void *)v5, 0x240uLL);
  memcpy(&v351[0].f64[1], v353, 0x778uLL);
  v351[0].f64[0] = *(float64_t *)(v5 + 608);
  *(_QWORD *)(v5 + 608) = v354;
  v29 = *(double *)(v5 + 576);
  v30 = 1;
  do
  {
    v31 = v351[0].f64[v30];
    v32 = v29 + v31 * 0.0347;
    v351[0].f64[v30] = v32;
    v29 = v31 + v32 * -0.0347;
    v33 = v30 - 1;
    v30 += 2;
  }
  while (v33 < 0xEE);
  *(double *)(v5 + 576) = v29;
  v34 = *(double *)(v5 + 584);
  v35 = 1;
  do
  {
    v36 = v351[0].f64[v35];
    v37 = v34 + v36 * 0.3826;
    v351[0].f64[v35] = v37;
    v34 = v36 + v37 * -0.3826;
    v38 = v35 - 1;
    v35 += 2;
  }
  while (v38 < 0xEE);
  v39 = 0;
  *(double *)(v5 + 584) = v34;
  v40 = *(double *)(v5 + 592);
  do
  {
    v41 = v351[v39].f64[0];
    v42 = v40 + v41 * 0.1544;
    v351[v39].f64[0] = v42;
    v40 = v41 + v42 * -0.1544;
    _CF = v39++ >= 119;
  }
  while (!_CF);
  v44 = 0;
  *(double *)(v5 + 592) = v40;
  v45 = *(double *)(v5 + 600);
  do
  {
    v46 = v351[v44].f64[0];
    v47 = v45 + v46 * 0.744;
    v351[v44].f64[0] = v47;
    v45 = v46 + v47 * -0.744;
    _CF = v44++ >= 119;
  }
  while (!_CF);
  *(double *)(v5 + 600) = v45;
  v48 = &v351[2];
  for (i = 37; i != 97; i += 2)
  {
    f64 = v48[-2].f64;
    v393 = vld2q_f64(f64);
    v394 = vld2q_f64(v48->f64);
    v51 = &__dst[i];
    v51[-1] = vaddq_f64(v393.val[0], v393.val[1]);
    *v51 = vaddq_f64(v394.val[0], v394.val[1]);
    v48 += 4;
  }
  v52 = 0;
  v53 = __dst[35].f64[1];
  do
  {
    v53 = __dst[36].f64[v52] + __dst[35].f64[v52] * -0.25 + v53 * 0.75;
    __dst[36].f64[v52++] = v53;
  }
  while (v52 != 120);
  memcpy((void *)v5, v350, 0x240uLL);
  PCorr(__dst, (uint64_t)v351);
  PCorr(&__dst[30], (uint64_t)&v387);
  v54 = log(v27 * 0.5);
  v55 = 0;
  v56 = (int32x2_t)0x100000000;
  v57 = v28 * (v28 * 4.0);
  if (v57 > 0.8)
    v57 = 0.8;
  v337 = v57;
  v338 = v54;
  v342 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57, 0);
  v343 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v54, 0);
  __asm
  {
    FMOV            V1.2D, #-5.0
    FMOV            V0.2D, #1.0
  }
  v340 = _Q0;
  v341 = _Q1;
  do
  {
    v63 = vadd_s32(v56, (int32x2_t)0x800000008);
    v64.i64[0] = v63.i32[0];
    v64.i64[1] = v63.i32[1];
    __xa = vcvtq_f64_s64(v64);
    v347 = log(__xa.f64[1]);
    v65.f64[0] = log(__xa.f64[0]);
    v65.f64[1] = v347;
    v66 = vsubq_f64(v65, v343);
    __xb = vmulq_f64(v66, vmulq_f64(v66, v341));
    v348 = exp(__xb.f64[1]);
    v67.f64[0] = exp(__xb.f64[0]);
    v67.f64[1] = v348;
    v351[v55] = vmulq_f64(v351[v55], vmlaq_f64(v340, v67, v342));
    v56 = vadd_s32(v56, (int32x2_t)0x200000002);
    ++v55;
  }
  while (v55 != 32);
  v68 = exp((4.27666612 - v338) * ((4.27666612 - v338) * -5.0));
  v69 = 0;
  v70 = 0;
  v351[32].f64[0] = v351[32].f64[0] * (v337 * v68 + 1.0) * 0.2;
  v391 = v391 * 0.2;
  v351[0] = vmulq_f64(v351[0], (float64x2_t)xmmword_208F17D30);
  v387 = vmulq_f64(v387, (float64x2_t)xmmword_208F17D30);
  v351[1].f64[0] = v351[1].f64[0] * 0.98;
  v388 = v388 * 0.98;
  v351[31] = vmulq_f64(v351[31], (float64x2_t)xmmword_208F17D40);
  v390 = vmulq_f64(v390, (float64x2_t)xmmword_208F17D40);
  v71 = 0.0;
  do
  {
    v72 = v351[0].f64[v69] + v387.f64[v69];
    *(double *)&v373[8 * v69 + 16] = v72;
    v73 = v69 + 1;
    if (v72 > v71)
    {
      v70 = v69 + 761;
      v71 = v72;
    }
    ++v69;
  }
  while (v73 != 65);
  v74 = 0;
  v75 = 11;
  do
  {
    v76 = (double)((int)v74 + 12) / (double)((int)v74 + 23);
    v77 = v76 * 0.2 * (2.0 - v76);
    v78 = (*(double *)&v350[v75 * 8 + 1064] + v387.f64[v75]) * v77;
    *(double *)&v362[v74 + 2] = v78;
    if (v78 > v71)
    {
      v70 = v74 + 2;
      v71 = v78;
    }
    v79 = v74 + 1;
    v80 = v77 * (v351[0].f64[v75] + *(double *)&v386[v75 * 8 + 464]);
    *(double *)&v384[8 * v74 + 104] = v80;
    if (v80 > v71)
    {
      v70 = v74 + 1531;
      v71 = v80;
    }
    ++v75;
    ++v74;
  }
  while (v79 != 54);
  v81 = 0;
  v82 = 10;
  do
  {
    v83 = (double)((int)v81 + 12) / (double)((int)v81 + 22);
    v84 = v83 * 0.9 * (2.0 - v83);
    v85 = (*(double *)&v350[v82 * 8 + 1072] + v387.f64[v82]) * v84;
    *(double *)&v363[8 * v81 + 16] = v85;
    if (v85 > v71)
    {
      v70 = v81 + 71;
      v71 = v85;
    }
    v86 = v81 + 1;
    v87 = v84 * (v351[0].f64[v82] + *(double *)&v386[v82 * 8 + 472]);
    *(double *)&v383[8 * v81 + 96] = v87;
    if (v87 > v71)
    {
      v70 = v81 + 1461;
      v71 = v87;
    }
    ++v82;
    ++v81;
  }
  while (v86 != 55);
  v88 = 0;
  v89 = 8 - (_QWORD)v361;
  v90 = &v351[4].f64[1];
  v91 = &v389;
  v92 = 2;
  v93 = 88;
  v94 = 448;
  do
  {
    v95 = 0;
    v96 = v360[v92];
    v97 = v96 + 16;
    v98 = v360[22 - v92];
    v99 = v98 + v89;
    v100 = v98 + v93;
    v101 = -64 - (_QWORD)v361 + v96;
    v102 = 12;
    do
    {
      v103 = (double)v102 / (double)(v88 + v102 + 9);
      v104 = v103 * (2.0 - v103);
      v105 = (v351[0].f64[v95 / 8] + *(double *)&v91[v95 / 8]) * v104;
      *(double *)(v97 + v95) = v105;
      if (v105 > v71)
      {
        v70 = (v101 + v95) >> 3;
        v71 = v105;
      }
      v106 = v104 * (v90[v95 / 8] + v387.f64[v95 / 8]);
      *(double *)(v100 + v95) = v106;
      if (v106 > v71)
      {
        v70 = (v99 + v95) >> 3;
        v71 = v106;
      }
      v95 += 8;
      ++v102;
    }
    while (v94 != v95);
    ++v92;
    v89 -= 8;
    v93 -= 8;
    v94 += 8;
    --v90;
    --v91;
    --v88;
  }
  while (v92 != 11);
  LODWORD(v107) = 0;
  v108 = v5 + 1016;
  v109 = v71 * 0.6;
  v110 = 1;
  v111 = 51;
  v112 = v339;
LABEL_46:
  v113 = v360[v110];
  v114 = -48 - (_QWORD)v361 + v113;
  v115 = (double *)(v113 - 528);
  v116 = v111;
  while (1)
  {
    v117 = v115[70];
    if (v117 > v109 && v117 > *v115 && v117 > v115[1] && v117 > v115[139] && v117 > v115[140])
    {
      v359[(int)v107] = v114 >> 3;
      LODWORD(v107) = v107 + 1;
      if ((_DWORD)v107 == 10)
        break;
    }
    v114 += 8;
    ++v115;
    if (!--v116)
    {
      if (v110 <= 0xA)
      {
        ++v110;
        ++v111;
        goto LABEL_46;
      }
      v118 = 0;
      v119 = 12;
LABEL_59:
      v120 = v360[v119];
      v121 = -40 - (_QWORD)v361 + v120;
      v122 = v120 - 520;
      v123 = v118;
      while (1)
      {
        v124 = *(double *)(v122 + v123 + 560);
        if (v124 > v109
          && v124 > *(double *)(v122 + v123)
          && v124 > *(double *)(v122 + v123 + 8)
          && v124 > *(double *)(v122 + v123 + 1112)
          && v124 > *(double *)(v122 + v123 + 1120))
        {
          v359[(int)v107] = (unint64_t)(v121 + v123) >> 3;
          LODWORD(v107) = v107 + 1;
          if ((_DWORD)v107 == 10)
            goto LABEL_69;
        }
        v123 += 8;
        if (v123 == 480)
        {
          ++v119;
          v118 += 8;
          if (v119 != 22)
            goto LABEL_59;
          if ((int)v107 < 1)
          {
            v335 = v70 / 69;
            v336 = v70 % 69;
            v201 = (double)(v336 + 6);
            v202 = v201 + 11.0 - (double)v335;
            v203 = 20.0;
            if (v336 < 14)
              v201 = 20.0;
            goto LABEL_99;
          }
          goto LABEL_69;
        }
      }
    }
  }
LABEL_69:
  __x = v28;
  v125 = (double *)v358;
  v126 = (double *)v356;
  v127 = (double *)v357;
  v128 = v359;
  v129 = v107;
  v107 = v107;
  do
  {
    while (1)
    {
      v131 = *v128++;
      v130 = v131;
      v132 = (double *)&v362[(int)v131 - 70];
      v133 = *(v132 - 1);
      v134 = *v132;
      v136 = v132[1];
      v135 = v132[2];
      v138 = v132[3];
      v137 = v132[4];
      v139 = *(v132 - 3) * -0.000675560286
           + *(v132 - 2) * 0.0218424764
           + v133 * -0.122031757
           + *v132 * 0.600864841
           + v136 * 0.600864841
           + v135 * -0.122031757
           + v138 * 0.0218424764
           + v137 * -0.000675560286;
      v140 = (double *)&v362[(int)v131 - 1];
      v141 = *(v140 - 2);
      v142 = *(v140 - 1);
      v143 = *v140;
      v144 = v140[1];
      v145 = v140[2];
      v146 = v140[3];
      v147 = v140[4];
      v148 = *(v140 - 3) * -0.000675560286
           + v141 * 0.0218424764
           + v142 * -0.122031757
           + *v140 * 0.600864841
           + v144 * 0.600864841
           + v145 * -0.122031757
           + v146 * 0.0218424764
           + v147 * -0.000675560286;
      v149 = v141 * -0.000675560286
           + v142 * 0.0218424764
           + *v140 * -0.122031757
           + v144 * 0.600864841
           + v145 * 0.600864841
           + v146 * -0.122031757
           + v147 * 0.0218424764
           + *(double *)&v362[v131 + 4] * -0.000675560286;
      v150 = (double *)&v362[(int)v131 + 69];
      v151 = *(v150 - 3);
      v152 = *(v150 - 2);
      v153 = *(v150 - 1);
      v154 = *v150;
      v156 = v150[1];
      v155 = v150[2];
      v157 = v150[3];
      v158 = v150[4];
      v159 = v151 * -0.000675560286
           + v152 * 0.0218424764
           + v153 * -0.122031757
           + *v150 * 0.600864841
           + v156 * 0.600864841
           + v155 * -0.122031757
           + v157 * 0.0218424764
           + v158 * -0.000675560286;
      if (v148 <= v139)
        v160 = v139;
      else
        v160 = v148;
      if (v149 > v160)
        v160 = v149;
      if (v159 > v160)
        v160 = v151 * -0.000675560286
             + v152 * 0.0218424764
             + v153 * -0.122031757
             + *v150 * 0.600864841
             + v156 * 0.600864841
             + v155 * -0.122031757
             + v157 * 0.0218424764
             + v158 * -0.000675560286;
      v161 = (double)(v130 % 69 + 6);
      *v127 = v161;
      v162 = v161 + 11.0 - (double)(v130 / 69);
      *v126 = v162;
      if (v144 <= v160)
      {
        if (v139 == v160)
        {
          v161 = v161 + -0.5;
          *v127 = v161;
          v162 = v162 + 0.5;
          *v126 = v162;
          v165 = (double *)&v362[v130 - 140];
          v166 = *(v165 - 2);
          v167 = *(v165 - 1);
          v145 = v136;
          v168 = v165[1];
          v169 = v165[2];
          v170 = v165[3];
          v171 = v165[4];
          v163 = v149;
          v149 = v139;
          v139 = *(v165 - 3) * -0.000675560286
               + v166 * 0.0218424764
               + v167 * -0.122031757
               + *v165 * 0.600864841
               + v168 * 0.600864841
               + v169 * -0.122031757
               + v170 * 0.0218424764
               + v171 * -0.000675560286;
          v172 = v166 * -0.000675560286
               + v167 * 0.0218424764
               + *v165 * -0.122031757
               + v168 * 0.600864841
               + v169 * 0.600864841
               + v170 * -0.122031757
               + v171 * 0.0218424764;
          v156 = v144;
          v164 = v172 + *(double *)&v362[v130 - 135] * -0.000675560286;
          v136 = v168;
          v159 = v148;
          v143 = v134;
        }
        else if (v148 == v160)
        {
          v161 = v161 + -0.5;
          *v127 = v161;
          v162 = v162 + -0.5;
          *v126 = v162;
          v173 = *(double *)&v361[8 * v130 - 512] * -0.000675560286
               + *(double *)&v361[8 * v130 - 504] * 0.0218424764
               + *(double *)&v362[v130 - 72] * -0.122031757
               + v133 * 0.600864841
               + v134 * 0.600864841
               + v136 * -0.122031757
               + v135 * 0.0218424764;
          v164 = v139;
          v139 = v173 + v138 * -0.000675560286;
          v174 = *(double *)&v361[8 * v130 + 600] * -0.000675560286
               + v151 * 0.0218424764
               + v152 * -0.122031757
               + v153 * 0.600864841
               + v154 * 0.600864841
               + v156 * -0.122031757
               + v155 * 0.0218424764;
          v163 = v159;
          v145 = v144;
          v156 = v154;
          v159 = v174 + v157 * -0.000675560286;
          v149 = v148;
          v136 = v134;
        }
        else
        {
          v161 = v161 + 0.5;
          *v127 = v161;
          if (v149 == v160)
          {
            v162 = v162 + 0.5;
            *v126 = v162;
            v164 = *(double *)&v361[8 * v130 - 496] * -0.000675560286
                 + v133 * 0.0218424764
                 + v134 * -0.122031757
                 + v136 * 0.600864841
                 + v135 * 0.600864841
                 + v138 * -0.122031757
                 + v137 * 0.0218424764
                 + *(double *)&v362[v130 - 65] * -0.000675560286;
            v163 = v152 * -0.000675560286
                 + v153 * 0.0218424764
                 + v154 * -0.122031757
                 + v156 * 0.600864841
                 + v155 * 0.600864841
                 + v157 * -0.122031757
                 + v158 * 0.0218424764
                 + *(double *)&v362[v130 + 74] * -0.000675560286;
            v143 = v144;
          }
          else
          {
            v162 = v162 + -0.5;
            *v126 = v162;
            v175 = (double *)&v362[v130 + 138];
            v176 = *(v175 - 2);
            v177 = *(v175 - 1);
            v145 = v156;
            v156 = v175[1];
            v178 = v175[2];
            v179 = v175[3];
            v180 = v175[4];
            v164 = v149;
            v149 = v159;
            v159 = *(v175 - 3) * -0.000675560286
                 + v176 * 0.0218424764
                 + v177 * -0.122031757
                 + *v175 * 0.600864841
                 + v156 * 0.600864841
                 + v178 * -0.122031757
                 + v179 * 0.0218424764
                 + v180 * -0.000675560286;
            v163 = v176 * -0.000675560286
                 + v177 * 0.0218424764
                 + *v175 * -0.122031757
                 + v156 * 0.600864841
                 + v178 * 0.600864841
                 + v179 * -0.122031757
                 + v180 * 0.0218424764
                 + *(double *)&v362[v130 + 143] * -0.000675560286;
            v136 = v144;
            v143 = v154;
            v139 = v148;
          }
        }
      }
      else
      {
        v163 = v156;
        v145 = v149;
        v164 = v136;
        v156 = v159;
        v149 = v144;
        v136 = v139;
        v159 = v154;
        v143 = v148;
        v139 = v134;
      }
      v181 = -(v149 - (v163 + v139) * 0.5);
      v182 = -(v149 - (v164 + v159) * 0.5);
      v183 = v145 + v136 + v156 + v143 + v149 * -4.0 - v181;
      v184 = -(v181 - (v183 - v182) * -0.5);
      if (v184 >= 0.0000001)
      {
        v185 = (v145 + v143 - v136 - v156) * -0.5;
        v186 = -(v182 - (v183 - v182) * -0.5);
        if (v184 * v186 - v185 * v185 >= 0.0000001)
          break;
      }
      *v125++ = v149;
      ++v126;
      ++v127;
      if (!--v107)
        goto LABEL_92;
    }
    v187 = (v145 + v156 - v143 - v136) * 0.5;
    v188 = (v145 + v136 - v143 - v156) * 0.5;
    v189 = sqrt(v184);
    v190 = sqrt(v186 - v185 / v189 * (v185 / v189));
    v191 = (v188 - v187 / v189 * (v185 / v189)) / v190 / v190;
    v192 = (v187 / v189 - v191 * (v185 / v189)) * 0.5 / v189;
    v193 = v191 * 0.5;
    v194 = v193 * v193 + v192 * v192;
    if (v194 > 1.0)
    {
      v192 = v192 / v194;
      v193 = v193 / v194;
    }
    *v125++ = v149 + (v188 * v193 + v187 * v192) * 0.5;
    *v127++ = v161 + v192;
    *v126++ = v162 + v193;
    --v107;
  }
  while (v107);
LABEL_92:
  v195 = 0;
  v196 = 0.0;
  do
  {
    v197 = *(double *)&v358[v195];
    v198 = log(*(double *)&v357[8 * v195] + *(double *)&v356[8 * v195]);
    v199 = v197 * pow(0.85, v198);
    if (v199 > v196)
    {
      v130 = v195;
      v196 = v199;
    }
    ++v195;
  }
  while (v129 != v195);
  v200 = 8 * v130;
  v201 = *(double *)&v357[v200] + *(double *)&v357[v200];
  v202 = *(double *)&v356[v200] + *(double *)&v356[v200];
  v203 = 20.0;
  if (v201 < 20.0)
    v201 = 20.0;
  v112 = v339;
  v28 = __x;
  v108 = v5 + 1016;
LABEL_99:
  v204 = 0;
  if (v202 < v203)
    v202 = v203;
  if (v201 > 140.0)
    v201 = 140.0;
  if (v202 > 140.0)
    v202 = 140.0;
  *v112 = v201;
  v112[1] = v201;
  v112[2] = v202;
  v112[3] = v202;
  v205 = 0.0;
  do
  {
    v205 = v205
         + *(double *)&v352[v204] * *(double *)&v352[v204]
         + *((double *)&v352[v204] + 1) * *((double *)&v352[v204] + 1);
    ++v204;
  }
  while (v204 != 132);
  memset_pattern16(v3, &unk_208F17D50, 0x20uLL);
  v206 = 1;
  v207 = 1.0 / v205;
  do
  {
    v208 = v206;
    FilterFrame((uint64_t)v352, v108, v112, v3, 3, (uint64_t)__dst, (uint64_t)v361);
    v209 = 0;
    v210 = 0.0;
    do
    {
      v211 = vmulq_f64(__dst[v209], *(float64x2_t *)&v361[v209 * 16]);
      v212 = vmulq_f64(__dst[v209 + 1], *(float64x2_t *)&v361[v209 * 16 + 16]);
      v210 = v210 + v211.f64[0] + v211.f64[1] + v212.f64[0] + v212.f64[1];
      v209 += 2;
    }
    while (v209 != 132);
    v213 = 0;
    v214 = 0.0;
    do
    {
      v215 = vmulq_f64(__dst[v213], *(float64x2_t *)&v365[v213 * 16 + 376]);
      v216 = vmulq_f64(__dst[v213 + 1], *(float64x2_t *)&v365[v213 * 16 + 392]);
      v214 = v214 + v215.f64[0] + v215.f64[1] + v216.f64[0] + v216.f64[1];
      v213 += 2;
    }
    while (v213 != 132);
    v217 = 0;
    v218 = v207 * v210;
    v219 = 0.0;
    do
    {
      v220 = vmulq_f64(__dst[v217], *(float64x2_t *)&v369[v217 * 16 + 280]);
      v221 = vmulq_f64(__dst[v217 + 1], *(float64x2_t *)&v369[v217 * 16 + 296]);
      v219 = v219 + v220.f64[0] + v220.f64[1] + v221.f64[0] + v221.f64[1];
      v217 += 2;
    }
    while (v217 != 132);
    v222 = 0;
    v223 = v207 * v214;
    v224 = 0.0;
    do
    {
      v225 = vmulq_f64(__dst[v222], *(float64x2_t *)&v373[v222 * 16 + 184]);
      v226 = vmulq_f64(__dst[v222 + 1], *(float64x2_t *)&v373[v222 * 16 + 200]);
      v224 = v224 + v225.f64[0] + v225.f64[1] + v226.f64[0] + v226.f64[1];
      v222 += 2;
    }
    while (v222 != 132);
    v227 = 0;
    v228 = v207 * v219;
    v229 = 0.0;
    do
    {
      v229 = v229 + *(double *)&v361[v227] * *(double *)&v361[v227];
      v227 += 8;
    }
    while (v227 != 2112);
    v230 = 0;
    v231 = v207 * v224;
    v232 = 0.0;
    do
    {
      v233 = vmulq_f64(*(float64x2_t *)&v361[v230], *(float64x2_t *)&v365[v230 + 376]);
      v234 = vmulq_f64(*(float64x2_t *)&v361[v230 + 16], *(float64x2_t *)&v365[v230 + 392]);
      v232 = v232 + v233.f64[0] + v233.f64[1] + v234.f64[0] + v234.f64[1];
      v230 += 32;
    }
    while (v230 != 2112);
    v235 = v207 * v229;
    v236 = 0.0;
    for (j = 264; j != 528; ++j)
      v236 = v236 + *(double *)&v361[8 * j] * *(double *)&v361[8 * j];
    v238 = 0;
    v239 = v207 * v232;
    v240 = 0.0;
    do
    {
      v241 = vmulq_f64(*(float64x2_t *)&v361[v238], *(float64x2_t *)&v369[v238 + 280]);
      v242 = vmulq_f64(*(float64x2_t *)&v361[v238 + 16], *(float64x2_t *)&v369[v238 + 296]);
      v240 = v240 + v241.f64[0] + v241.f64[1] + v242.f64[0] + v242.f64[1];
      v238 += 32;
    }
    while (v238 != 2112);
    v243 = 0;
    v244 = v207 * v236;
    v245 = 0.0;
    do
    {
      v246 = vmulq_f64(*(float64x2_t *)&v365[v243 + 376], *(float64x2_t *)&v369[v243 + 280]);
      v247 = vmulq_f64(*(float64x2_t *)&v365[v243 + 392], *(float64x2_t *)&v369[v243 + 296]);
      v245 = v245 + v246.f64[0] + v246.f64[1] + v247.f64[0] + v247.f64[1];
      v243 += 32;
    }
    while (v243 != 2112);
    v248 = v207 * v240;
    v249 = 0.0;
    for (k = 528; k != 792; ++k)
      v249 = v249 + *(double *)&v361[8 * k] * *(double *)&v361[8 * k];
    v251 = 0;
    v252 = v207 * v245;
    v253 = 0.0;
    do
    {
      v254 = vmulq_f64(*(float64x2_t *)&v361[v251], *(float64x2_t *)&v373[v251 + 184]);
      v255 = vmulq_f64(*(float64x2_t *)&v361[v251 + 16], *(float64x2_t *)&v373[v251 + 200]);
      v253 = v253 + v254.f64[0] + v254.f64[1] + v255.f64[0] + v255.f64[1];
      v251 += 32;
    }
    while (v251 != 2112);
    v256 = 0;
    v257 = v207 * v249;
    v258 = 0.0;
    do
    {
      v259 = vmulq_f64(*(float64x2_t *)&v365[v256 + 376], *(float64x2_t *)&v373[v256 + 184]);
      v260 = vmulq_f64(*(float64x2_t *)&v365[v256 + 392], *(float64x2_t *)&v373[v256 + 200]);
      v258 = v258 + v259.f64[0] + v259.f64[1] + v260.f64[0] + v260.f64[1];
      v256 += 32;
    }
    while (v256 != 2112);
    v261 = v207 * v253;
    v262 = 0.0;
    v263 = -2112;
    do
    {
      v264 = vmulq_f64(*(float64x2_t *)&v373[v263 + 184], *(float64x2_t *)&v377[v263 + 88]);
      v265 = vmulq_f64(*(float64x2_t *)&v373[v263 + 200], *(float64x2_t *)&v377[v263 + 104]);
      v262 = v262 + v264.f64[0] + v264.f64[1] + v265.f64[0] + v265.f64[1];
      v263 += 32;
    }
    while (v263);
    v266 = v207 * v258;
    v267 = 0.0;
    for (m = 792; m != 1056; ++m)
      v267 = v267 + *(double *)&v361[8 * m] * *(double *)&v361[8 * m];
    v269 = v207 * v262;
    v270 = v207 * v267;
    v271 = v3->f64[1];
    v273 = v3[1].f64[0];
    v272 = v3[1].f64[1];
    v274 = v223
         + (v28 * -0.0571428571
          + v3->f64[0] * -0.271428571
          + v271 * 0.657142857
          + v273 * -0.271428571
          + v272 * -0.0571428571)
         * 3.0;
    v275 = v228
         + (v28 * 0.0514285714
          + v3->f64[0] * -0.145714286
          + v271 * -0.271428571
          + v273 * 0.674285714
          + v272 * -0.308571429)
         * 3.0;
    v276 = v231
         + (v28 * 0.0171428571
          + v3->f64[0] * 0.0514285714
          + v271 * -0.0571428571
          + v273 * -0.308571429
          + v272 * 0.297142857)
         * 3.0;
    v277 = v235 + 2.02285714;
    v278 = v239 + -0.814285714;
    v279 = v244 + 1.97142857;
    v280 = v248 + -0.437142857;
    v281 = v252 + -0.814285714;
    v282 = v257 + 2.02285714;
    v283 = v261 + 0.154285714;
    v284 = v266 + -0.171428571;
    v285 = v269 + -0.925714286;
    v286 = v270 + 0.891428571;
    v287 = 1.0 / (1.0 - v3->f64[0]);
    v288 = v287 * v287;
    v289 = v277 + (v287 + v287) * (v287 * v287 * 0.005);
    v290 = 1.0 / (1.0 - v271);
    v291 = v274 + v290 * v290 * 0.005;
    v292 = v279 + (v290 + v290) * (v290 * v290 * 0.005);
    v293 = 1.0 / (1.0 - v273);
    v294 = v293 * v293;
    v295 = v282 + (v293 + v293) * (v293 * v293 * 0.005);
    v296 = 1.0 / (1.0 - v272);
    v297 = v296 * v296 * 0.005;
    v298 = v286 + v296 * 2.66 * v297;
    v299 = v278 / v289;
    v300 = v280 / v289;
    v301 = v292 + -(v289 * v299) * v299;
    v302 = (v281 - v299 * v280) / v301;
    v303 = v283 / v289;
    v304 = (v284 - v299 * v283) / v301;
    v305 = v295 - (v302 * (v301 * v302) + v289 * v300 * v300);
    v306 = (v285 - v300 * v283 + -(v302 * v301) * v304) / v305;
    v307 = v298 - (v304 * (v301 * v304) + v289 * (v283 / v289) * (v283 / v289) + v305 * v306 * v306);
    v308 = v218
         + (v28 * -0.308571429
          + v3->f64[0] * 0.674285714
          + v271 * -0.271428571
          + v273 * -0.145714286
          + v272 * 0.0514285714)
         * 3.0
         + v288 * 0.005;
    v309 = -(v291 - v308 * v299);
    v310 = -(v275 + v294 * 0.005) - (v309 * v302 - v308 * v300);
    v311 = (-(v276 + v297 * 1.33) - (v309 * v304 - v308 * v303 + v310 * v306)) / v307;
    v312 = v310 / v305 - v311 * v306;
    v313 = v309 / v301 - (v302 * v312 + v311 * v304);
    v314 = v3->f64[0] + -v308 / v289 - (v300 * v312 + v311 * v303 + v313 * v299);
    v3->f64[0] = v314;
    v315 = 0x3FDCCCCCCCCCCCCDLL;
    if (v314 > 0.45 || (v315 = 0, v314 < 0.0))
      *(_QWORD *)&v3->f64[0] = v315;
    v316 = v271 + v313;
    v3->f64[1] = v271 + v313;
    v317 = 0x3FDCCCCCCCCCCCCDLL;
    if (v316 > 0.45 || (v317 = 0, v316 < 0.0))
      *(_QWORD *)&v3->f64[1] = v317;
    v318 = v273 + v312;
    v3[1].f64[0] = v273 + v312;
    v319 = 0x3FDCCCCCCCCCCCCDLL;
    if (v318 > 0.45 || (v319 = 0, v318 < 0.0))
      *(_QWORD *)&v3[1].f64[0] = v319;
    v320 = v272 + v311;
    v3[1].f64[1] = v272 + v311;
    v321 = 0x3FDCCCCCCCCCCCCDLL;
    if (v320 > 0.45 || (v321 = 0, v320 < 0.0))
      *(_QWORD *)&v3[1].f64[1] = v321;
    v206 = 0;
  }
  while ((v208 & 1) != 0);
  FilterFrame((uint64_t)v352, v108, v112, v3, 0, v7, 0);
  v322 = *(float64x2_t *)(v5 + 968);
  v351[8] = *(float64x2_t *)(v5 + 952);
  v351[9] = v322;
  v323 = *(float64x2_t *)(v5 + 1000);
  v351[10] = *(float64x2_t *)(v5 + 984);
  v351[11] = v323;
  v324 = *(float64x2_t *)(v5 + 904);
  v351[4] = *(float64x2_t *)(v5 + 888);
  v351[5] = v324;
  v325 = *(float64x2_t *)(v5 + 936);
  v351[6] = *(float64x2_t *)(v5 + 920);
  v351[7] = v325;
  v326 = *(float64x2_t *)(v5 + 840);
  v351[0] = *(float64x2_t *)(v5 + 824);
  v351[1] = v326;
  v327 = *(float64x2_t *)(v5 + 872);
  v351[2] = *(float64x2_t *)(v5 + 856);
  v351[3] = v327;
  memcpy(&v351[12], v8, 0x780uLL);
  result = FilterFrame((uint64_t)v351, v5 + 2592, v112, v3, 2, v7, 0);
  v329 = v351[129];
  *(float64x2_t *)(v5 + 952) = v351[128];
  *(float64x2_t *)(v5 + 968) = v329;
  v330 = v351[131];
  *(float64x2_t *)(v5 + 984) = v351[130];
  *(float64x2_t *)(v5 + 1000) = v330;
  v331 = v351[125];
  *(float64x2_t *)(v5 + 888) = v351[124];
  *(float64x2_t *)(v5 + 904) = v331;
  v332 = v351[127];
  *(float64x2_t *)(v5 + 920) = v351[126];
  *(float64x2_t *)(v5 + 936) = v332;
  v333 = v351[121];
  *(float64x2_t *)(v5 + 824) = v351[120];
  *(float64x2_t *)(v5 + 840) = v333;
  v334 = v351[123];
  *(float64x2_t *)(v5 + 856) = v351[122];
  *(float64x2_t *)(v5 + 872) = v334;
  return result;
}

double PCorr(float64x2_t *a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double result;
  double v5;
  double v6;
  uint64_t v7;
  double *v8;
  float64_t v9;
  float64_t v10;
  float64_t v11;
  float64x2_t v12;
  float64_t v13;
  float64x2_t v14;
  float64_t v15;
  float64x2_t v16;
  float64_t v17;
  float64x2_t v18;
  float64x2_t v19;
  float64_t v20;
  float64x2_t v21;

  v2 = 0;
  v3 = 0.0;
  result = 1.0e-13;
  do
  {
    v5 = a1[v2].f64[0];
    v6 = a1[v2].f64[1];
    result = result + v5 * v5 + v6 * v6;
    v3 = v3 + a1[v2 + 36].f64[0] * v5 + a1[v2 + 36].f64[1] * v6;
    ++v2;
  }
  while (v2 != 30);
  v7 = 0;
  *(double *)(a2 + 512) = v3 / sqrt(result);
  v8 = (double *)(a2 + 504);
  do
  {
    v9 = a1[45].f64[0] * a1[9].f64[v7 + 1];
    v10 = a1[36].f64[0] * a1->f64[v7 + 1]
        + 0.0
        + a1[36].f64[1] * a1[1].f64[v7]
        + a1[37].f64[0] * a1[1].f64[v7 + 1]
        + a1[37].f64[1] * a1[2].f64[v7]
        + a1[38].f64[0] * a1[2].f64[v7 + 1]
        + a1[38].f64[1] * a1[3].f64[v7]
        + a1[39].f64[0] * a1[3].f64[v7 + 1]
        + a1[39].f64[1] * a1[4].f64[v7]
        + a1[40].f64[0] * a1[4].f64[v7 + 1]
        + a1[40].f64[1] * a1[5].f64[v7]
        + a1[41].f64[0] * a1[5].f64[v7 + 1]
        + a1[41].f64[1] * a1[6].f64[v7]
        + a1[42].f64[0] * a1[6].f64[v7 + 1]
        + a1[42].f64[1] * a1[7].f64[v7]
        + a1[43].f64[0] * a1[7].f64[v7 + 1]
        + a1[43].f64[1] * a1[8].f64[v7]
        + a1[44].f64[0] * a1[8].f64[v7 + 1]
        + a1[44].f64[1] * a1[9].f64[v7]
        + v9;
    v11 = v10
        + a1[45].f64[1] * a1[10].f64[v7]
        + a1[46].f64[0] * a1[10].f64[v7 + 1]
        + a1[46].f64[1] * a1[11].f64[v7]
        + a1[47].f64[0] * a1[11].f64[v7 + 1]
        + a1[47].f64[1] * a1[12].f64[v7]
        + a1[48].f64[0] * a1[12].f64[v7 + 1]
        + a1[48].f64[1] * a1[13].f64[v7]
        + a1[49].f64[0] * a1[13].f64[v7 + 1]
        + a1[49].f64[1] * a1[14].f64[v7]
        + a1[50].f64[0] * a1[14].f64[v7 + 1]
        + a1[50].f64[1] * a1[15].f64[v7]
        + a1[51].f64[0] * a1[15].f64[v7 + 1]
        + a1[51].f64[1] * a1[16].f64[v7]
        + a1[52].f64[0] * a1[16].f64[v7 + 1]
        + a1[52].f64[1] * a1[17].f64[v7]
        + a1[53].f64[0] * a1[17].f64[v7 + 1]
        + a1[53].f64[1] * a1[18].f64[v7]
        + a1[54].f64[0] * a1[18].f64[v7 + 1];
    v12 = vmulq_f64(a1[60], *(float64x2_t *)((char *)a1 + v7 * 8 + 392));
    v13 = v11
        + a1[54].f64[1] * a1[19].f64[v7]
        + a1[55].f64[0] * a1[19].f64[v7 + 1]
        + a1[55].f64[1] * a1[20].f64[v7]
        + a1[56].f64[0] * a1[20].f64[v7 + 1]
        + a1[56].f64[1] * a1[21].f64[v7]
        + a1[57].f64[0] * a1[21].f64[v7 + 1]
        + a1[57].f64[1] * a1[22].f64[v7]
        + a1[58].f64[0] * a1[22].f64[v7 + 1]
        + a1[58].f64[1] * a1[23].f64[v7]
        + a1[59].f64[0] * a1[23].f64[v7 + 1]
        + a1[59].f64[1] * a1[24].f64[v7]
        + v12.f64[0]
        + v12.f64[1];
    v14 = vmulq_f64(a1[61], *(float64x2_t *)((char *)a1 + v7 * 8 + 408));
    v15 = v13 + v14.f64[0] + v14.f64[1];
    v16 = vmulq_f64(a1[62], *(float64x2_t *)((char *)a1 + v7 * 8 + 424));
    v17 = v15 + v16.f64[0] + v16.f64[1];
    v18 = vmulq_f64(a1[63], *(float64x2_t *)((char *)a1 + v7 * 8 + 440));
    v19 = vmulq_f64(a1[64], *(float64x2_t *)((char *)a1 + v7 * 8 + 456));
    v20 = v17 + v18.f64[0] + v18.f64[1] + v19.f64[0] + v19.f64[1];
    v21 = vmulq_f64(a1[65], *(float64x2_t *)((char *)a1 + v7 * 8 + 472));
    result = result - a1->f64[v7] * a1->f64[v7] + a1[30].f64[v7] * a1[30].f64[v7];
    *v8-- = (v20 + v21.f64[0] + v21.f64[1]) / sqrt(result);
    ++v7;
  }
  while (v7 != 64);
  return result;
}

void *FilterFrame(uint64_t a1, uint64_t a2, double *a3, float64x2_t *a4, int a5, uint64_t a6, uint64_t a7)
{
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double *v26;
  double v27;
  int v28;
  double *v29;
  double v30;
  BOOL v31;
  int v32;
  int v33;
  double *v34;
  double v35;
  int v36;
  int v37;
  double *v38;
  double v39;
  int v40;
  int v41;
  double *v42;
  double v43;
  int v44;
  void *result;
  __int128 v46;
  _QWORD __dst[190];
  uint64_t v48;
  _BYTE v49[1520];
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  double v54;
  double v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD v71[2];

  v60 = 0;
  v58 = a5;
  memcpy(__dst, (const void *)a2, sizeof(__dst));
  bzero(&v48, 0x840uLL);
  v50 = *(_OWORD *)(a2 + 1520);
  v51 = *(_OWORD *)(a2 + 1536);
  v52 = *(_QWORD *)(a2 + 1552);
  if (a5 == 3)
  {
    memset(v71, 0, sizeof(v71));
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    bzero((void *)a7, 0x840uLL);
    bzero((void *)(a7 + 2112), 0x840uLL);
    bzero((void *)(a7 + 4224), 0x840uLL);
    bzero((void *)(a7 + 6336), 0x840uLL);
  }
  else if (a5 == 1)
  {
    v14 = (float64x2_t)vdupq_n_s64(0xBFF4CCCCCCCCCCCDLL);
    v15 = vmulq_f64(*a4, v14);
    v16 = vmulq_f64(a4[1], v14);
    *a4 = v15;
    a4[1] = v16;
  }
  v17 = *(double *)(a2 + 1560);
  v18 = *a3;
  if (*a3 <= v17 * 1.5 && v18 >= v17 * 0.67)
  {
    v19 = *(double *)(a2 + 1568);
  }
  else
  {
    v19 = a4->f64[0];
    if (a5 == 3)
      *(_QWORD *)&v71[0] = 0x3FF0000000000000;
    v17 = v18;
  }
  v20 = 0;
  v59 = 12;
  do
  {
    v21 = v17;
    v22 = v19;
    v57 = v20;
    v17 = a3[v20];
    v19 = a4->f64[v20];
    v23 = (v17 - v21) / 5.0;
    v24 = (v19 - v22) / 5.0;
    v54 = v22 + v24;
    v55 = v21 + v23;
    v25 = v21 + v23 + 1.5;
    v56 = (uint64_t)rint(v25 + 0.5);
    v53 = (char *)&kIntrpCoef + 72 * (int)(uint64_t)rint(((double)v56 - v25) * 8.0 + -0.5);
    if (v58 == 3)
    {
      v26 = (double *)&__dst[v20];
      v27 = v26[485] + 0.2;
      if (v27 > 1.0)
        v27 = 1.0;
      v26[485] = v27;
      if ((int)v20 >= 1)
        *((double *)v71 + (v20 - 1)) = *((double *)v71 + (v20 - 1)) + -0.2;
    }
    FilterSegment(a1, (uint64_t)__dst, a6, a7);
    v54 = v24 + v54;
    v55 = v23 + v55;
    v56 = (uint64_t)rint(v55 + 1.5 + 0.5);
    v53 = (char *)&kIntrpCoef + 72 * (int)(uint64_t)rint(((double)v56 - (v55 + 1.5)) * 8.0 + -0.5);
    if (v58 == 3)
    {
      v28 = v57;
      v29 = (double *)&__dst[v57];
      v30 = v29[485] + 0.2;
      if (v30 > 1.0)
        v30 = 1.0;
      v29[485] = v30;
      v31 = __OFSUB__(v28, 1);
      v32 = v28 - 1;
      if (v32 < 0 == v31)
        *((double *)v71 + v32) = *((double *)v71 + v32) + -0.2;
    }
    FilterSegment(a1, (uint64_t)__dst, a6, a7);
    v54 = v24 + v54;
    v55 = v23 + v55;
    v56 = (uint64_t)rint(v55 + 1.5 + 0.5);
    v53 = (char *)&kIntrpCoef + 72 * (int)(uint64_t)rint(((double)v56 - (v55 + 1.5)) * 8.0 + -0.5);
    if (v58 == 3)
    {
      v33 = v57;
      v34 = (double *)&__dst[v57];
      v35 = v34[485] + 0.2;
      if (v35 > 1.0)
        v35 = 1.0;
      v34[485] = v35;
      v31 = __OFSUB__(v33, 1);
      v36 = v33 - 1;
      if (v36 < 0 == v31)
        *((double *)v71 + v36) = *((double *)v71 + v36) + -0.2;
    }
    FilterSegment(a1, (uint64_t)__dst, a6, a7);
    v54 = v24 + v54;
    v55 = v23 + v55;
    v56 = (uint64_t)rint(v55 + 1.5 + 0.5);
    v53 = (char *)&kIntrpCoef + 72 * (int)(uint64_t)rint(((double)v56 - (v55 + 1.5)) * 8.0 + -0.5);
    if (v58 == 3)
    {
      v37 = v57;
      v38 = (double *)&__dst[v57];
      v39 = v38[485] + 0.2;
      if (v39 > 1.0)
        v39 = 1.0;
      v38[485] = v39;
      v31 = __OFSUB__(v37, 1);
      v40 = v37 - 1;
      if (v40 < 0 == v31)
        *((double *)v71 + v40) = *((double *)v71 + v40) + -0.2;
    }
    FilterSegment(a1, (uint64_t)__dst, a6, a7);
    v54 = v24 + v54;
    v55 = v23 + v55;
    v56 = (uint64_t)rint(v55 + 1.5 + 0.5);
    v53 = (char *)&kIntrpCoef + 72 * (int)(uint64_t)rint(((double)v56 - (v55 + 1.5)) * 8.0 + -0.5);
    if (v58 == 3)
    {
      v41 = v57;
      v42 = (double *)&__dst[v57];
      v43 = v42[485] + 0.2;
      if (v43 > 1.0)
        v43 = 1.0;
      v42[485] = v43;
      v31 = __OFSUB__(v41, 1);
      v44 = v41 - 1;
      if (v44 < 0 == v31)
        *((double *)v71 + v44) = *((double *)v71 + v44) + -0.2;
    }
    FilterSegment(a1, (uint64_t)__dst, a6, a7);
    ++v20;
  }
  while (v20 != 4);
  if (a5 == 3
    || (result = memcpy((void *)a2, v49, 0x5F0uLL),
        v46 = v51,
        *(_OWORD *)(a2 + 1520) = v50,
        *(_OWORD *)(a2 + 1536) = v46,
        *(_QWORD *)(a2 + 1552) = v52,
        *(double *)(a2 + 1560) = v17,
        *(double *)(a2 + 1568) = v19,
        (a5 & 0xFFFFFFFE) == 2))
  {
    v57 = 3;
    v59 = 24;
    return (void *)FilterSegment(a1, (uint64_t)__dst, a6, a7);
  }
  return result;
}

uint64_t FilterSegment(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  double *v8;
  _OWORD *v9;
  int v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  __int128 v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  double v27;
  double *v28;
  double *v29;
  uint64_t v30;
  double v31;
  double *v32;
  double *v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  unint64_t v38;
  double v39;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  float64x2_t *v43;
  unint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  double *v51;
  double *v52;
  double *v53;
  __int128 v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  int v60;

  v4 = *(_DWORD *)(a2 + 3708);
  if (v4 >= 1)
  {
    v5 = *(int *)(a2 + 3712);
    v6 = v5 + 190;
    v59 = *(int *)(a2 + 3696);
    v7 = v5 + 190 - v59;
    v8 = *(double **)(a2 + 3672);
    v9 = (_OWORD *)(a2 + 3632);
    if (*(_DWORD *)(a2 + 3704) == 3)
    {
      v10 = 0;
      v11 = (double *)(a2 + 3720);
      v60 = *(_DWORD *)(a2 + 3700);
      v12 = v7;
      v13 = v6;
      v14 = (double *)(a4 + 8 * v5);
      v58 = a3;
      while (1)
      {
        v16 = *(_OWORD *)(a2 + 3648);
        *(_OWORD *)(a2 + 3640) = *v9;
        *(_OWORD *)(a2 + 3656) = v16;
        v17 = (double *)(a2 + 8 * v12++);
        v18 = *v17 * *v8
            + 0.0
            + *(double *)(a2 + 8 * v12) * v8[1]
            + v17[2] * v8[2]
            + v17[3] * v8[3]
            + v17[4] * v8[4]
            + v17[5] * v8[5]
            + v17[6] * v8[6]
            + v17[7] * v8[7]
            + v17[8] * v8[8];
        v19 = *(double *)(a2 + 3680);
        v20 = v18 * v19;
        *(double *)(a2 + 3632) = v18 * v19;
        v21 = *((_OWORD *)v11 + 1);
        *(_OWORD *)(a2 + 3728) = *(_OWORD *)v11;
        *(_OWORD *)(a2 + 3744) = v21;
        v22 = *(_OWORD *)(a2 + 3776);
        v23 = *(_OWORD *)(a2 + 3800);
        *(_OWORD *)(a2 + 3824) = *(_OWORD *)(a2 + 3816);
        *(_OWORD *)(a2 + 3768) = *(_OWORD *)(a2 + 3760);
        *(_OWORD *)(a2 + 3784) = v22;
        v24 = *(_OWORD *)(a2 + 3856);
        *(_OWORD *)(a2 + 3808) = v23;
        *(_OWORD *)(a2 + 3848) = *(_OWORD *)(a2 + 3840);
        *(_OWORD *)(a2 + 3864) = v24;
        if ((v60 & 0x80000000) == 0)
          break;
LABEL_4:
        v15 = *(double *)(result + 8 * v5)
            - (v20 * -0.07
             + 0.0
             + *(double *)(a2 + 3640) * 0.25
             + *(double *)(a2 + 3648) * 0.64
             + *(double *)(a2 + 3656) * 0.25
             + *(double *)(a2 + 3664) * -0.07);
        *(double *)(a3 + 8 * v5) = v15;
        *(double *)(a2 + 8 * v13++) = v15 + *(double *)(result + 8 * v5++);
        ++v10;
        ++v14;
        if (v10 == v4)
          goto LABEL_25;
      }
      v25 = v5 - v59;
      v26 = ((v5 - v59) >> 63) & (v59 - v5);
      if (v26 > 8)
      {
        v27 = v19 * 0.0;
        v28 = (double *)(a2 + 3880);
        v29 = v11;
        v30 = (v60 + 1);
        do
        {
          v31 = *v28++;
          *v29 = v27 + v31 * v18;
          v29 += 5;
          --v30;
        }
        while (v30);
LABEL_9:
        v32 = (double *)(a2 + 3752);
        v33 = v14;
        v34 = (v60 + 1);
        do
        {
          v35 = 0.0 - *(v32 - 4) * -0.07 - *(v32 - 3) * 0.25 + *(v32 - 2) * -0.64 - *(v32 - 1) * 0.25;
          v36 = *v32;
          v32 += 5;
          *v33 = v35 - v36 * -0.07;
          v33 += 264;
          --v34;
        }
        while (v34);
        v20 = *(double *)v9;
        v11 = (double *)(a2 + 3720);
        a3 = v58;
        goto LABEL_4;
      }
      v37 = 0;
      v38 = 9 - v26;
      while (1)
      {
        v39 = 0.0;
        if (v38 >= 4)
        {
          v42 = 0x800000000;
          v43 = (float64x2_t *)(v8 + 7);
          v44 = v38 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v45 = a4 + 2112 * v37 + 8 * (v25 + (v42 >> 32));
            v46 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v45 - 8), *v43);
            v47 = vextq_s8(v46, v46, 8uLL);
            v48 = (int8x16_t)vmulq_f64(*(float64x2_t *)(v45 - 24), v43[-1]);
            v49 = vextq_s8(v48, v48, 8uLL);
            v39 = v39 + *(double *)v47.i64 + *(double *)&v47.i64[1] + *(double *)v49.i64 + *(double *)&v49.i64[1];
            v42 -= 0x400000000;
            v43 -= 2;
            v44 -= 4;
          }
          while (v44);
          v40 = 8 - (v38 & 0xFFFFFFFFFFFFFFFCLL);
          if (v38 == (v38 & 0xFFFFFFFFFFFFFFFCLL))
            goto LABEL_13;
          v41 = (8 - (v38 & 0xFFFFFFFFFFFFFFFCLL)) << 32;
        }
        else
        {
          v40 = 8;
          v41 = 0x800000000;
        }
        do
        {
          v39 = v39 + *(double *)(a4 + 2112 * v37 + 8 * (v25 + (v41 >> 32))) * v8[v40];
          v41 -= 0x100000000;
        }
        while (v40-- > v26);
LABEL_13:
        *(double *)(a2 + 40 * v37 + 3720) = v19 * v39 + *(double *)(a2 + 8 * v37 + 3880) * v18;
        if (++v37 == v60 + 1)
          goto LABEL_9;
      }
    }
    v51 = (double *)(a2 + 8 * v6);
    v52 = (double *)(a2 + 8 * v7 + 32);
    v53 = v52;
    do
    {
      v54 = *(_OWORD *)(a2 + 3648);
      *(_OWORD *)(a2 + 3640) = *v9;
      *(_OWORD *)(a2 + 3656) = v54;
      v55 = v53[1];
      ++v53;
      v56 = (*(v52 - 4) * *v8
           + 0.0
           + *(v52 - 3) * v8[1]
           + *(v52 - 2) * v8[2]
           + *(v52 - 1) * v8[3]
           + *v52 * v8[4]
           + v55 * v8[5]
           + v52[2] * v8[6]
           + v52[3] * v8[7]
           + v52[4] * v8[8])
          * *(double *)(a2 + 3680);
      *(double *)&v54 = v56 * -0.07 + 0.0 + *(double *)(a2 + 3640) * 0.25 + *(double *)(a2 + 3648) * 0.64;
      *(double *)(a2 + 3632) = v56;
      v57 = *(double *)(result + 8 * v5)
          - (*(double *)&v54
           + *(double *)(a2 + 3656) * 0.25
           + *(double *)(a2 + 3664) * -0.07);
      *(double *)(a3 + 8 * v5) = v57;
      *v51++ = v57 + *(double *)(result + 8 * v5++);
      v52 = v53;
      --v4;
    }
    while (v4);
LABEL_25:
    *(_DWORD *)(a2 + 3712) = v5;
  }
  return result;
}

unint64_t webrtc::rnn_vad::PitchEstimator::Estimate(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;
  void *v5;
  BOOL v6;
  uint64_t v7;
  const float *v8;
  uint64_t v9;
  const float *v10;
  unsigned __int128 v11;
  unsigned __int128 v12;
  unsigned __int128 *v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  unsigned int v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  uint64_t v32;
  float *v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  unint64_t v37;
  int v38;
  unint64_t result;

  v4 = a1[12];
  v5 = (void *)a1[15];
  v6 = v4 < a2 + 3452 && v4 + 1728 > a2;
  if (v6)
  {
    v9 = 0;
  }
  else
  {
    v7 = 0;
    v8 = (const float *)(a2 + 32);
    v9 = 424;
    do
    {
      v10 = v8 - 8;
      v11 = (unsigned __int128)vld2q_f32(v10);
      v12 = (unsigned __int128)vld2q_f32(v8);
      v13 = (unsigned __int128 *)(v4 + v7);
      *v13 = v11;
      v13[1] = v12;
      v8 += 16;
      v7 += 32;
    }
    while (v7 != 1696);
  }
  v14 = 4 * v9;
  v15 = (int *)(a2 + 8 * v9);
  do
  {
    v16 = *v15;
    v15 += 2;
    *(_DWORD *)(v4 + v14) = v16;
    v14 += 4;
  }
  while (v14 != 1728);
  webrtc::rnn_vad::AutoCorrelationCalculator::ComputeOnPitchBuffer(a1 + 2, (int32x4_t *)v4, v5);
  v17 = 0;
  v18 = 0.0;
  do
  {
    v19 = vmulq_f32(*(float32x4_t *)(v4 + v17), *(float32x4_t *)(v4 + v17));
    v20 = vmulq_f32(*(float32x4_t *)(v4 + v17 + 16), *(float32x4_t *)(v4 + v17 + 16));
    v18 = (float)((float)((float)((float)((float)((float)((float)(v18 + v19.f32[0]) + v19.f32[1]) + v19.f32[2])
                                        + v19.f32[3])
                                + v20.f32[0])
                        + v20.f32[1])
                + v20.f32[2])
        + v20.f32[3];
    v17 += 32;
  }
  while (v17 != 960);
  v21 = 0;
  v22 = 0;
  v23 = (float)(v18 + (float)(*(float *)(v4 + 960) * *(float *)(v4 + 960))) + 1.0;
  v24 = 1;
  v25 = -1.0;
  v26 = 0.0;
  v27 = -1.0;
  v28 = 0.0;
  do
  {
    v29 = *((float *)v5 + v21);
    v6 = v29 <= 0.0;
    v30 = v29 * v29;
    if (!v6 && (float)(v28 * v30) > (float)(v23 * v27))
    {
      if ((float)(v26 * v30) > (float)(v23 * v25))
        v28 = v26;
      else
        v28 = v23;
      if ((float)(v26 * v30) > (float)(v23 * v25))
        v27 = v25;
      else
        v27 = v30;
      if ((float)(v26 * v30) > (float)(v23 * v25))
        v24 = v22;
      else
        v24 = v21;
      if ((float)(v26 * v30) > (float)(v23 * v25))
      {
        v22 = v21;
        v25 = v30;
        v26 = v23;
      }
    }
    v23 = fmaxf((float)(v23 - (float)(*(float *)(v4 + 4 * v21) * *(float *)(v4 + 4 * v21)))+ (float)(*(float *)(v4 + 4 * v21 + 960) * *(float *)(v4 + 4 * v21 + 960)), 0.0);
    ++v21;
  }
  while (v21 != 147);
  v32 = 0;
  v33 = (float *)a1[9];
  v34 = 0.0;
  do
  {
    v35 = vmulq_f32(*(float32x4_t *)(a2 + v32), *(float32x4_t *)(a2 + v32));
    v36 = vmulq_f32(*(float32x4_t *)(a2 + v32 + 16), *(float32x4_t *)(a2 + v32 + 16));
    v34 = (float)((float)((float)((float)((float)((float)((float)(v34 + v35.f32[0]) + v35.f32[1]) + v35.f32[2])
                                        + v35.f32[3])
                                + v36.f32[0])
                        + v36.f32[1])
                + v36.f32[2])
        + v36.f32[3];
    v32 += 32;
  }
  while (v32 != 1920);
  v37 = 0;
  *v33 = v34;
  do
  {
    v34 = fmaxf((float)(v34 - (float)(*(float *)(a2 + v37) * *(float *)(a2 + v37)))+ (float)(*(float *)(a2 + v37 + 1920) * *(float *)(a2 + v37 + 1920)), 1.0);
    v33[v37 / 4 + 1] = v34;
    v37 += 4;
  }
  while (v37 != 1536);
  v38 = webrtc::rnn_vad::ComputePitchPeriod48kHz(a2, (uint64_t)v33, (2 * v22) | (unint64_t)(v24 << 33));
  result = webrtc::rnn_vad::ComputeExtendedPitchPeriod48kHz(a2, (uint64_t)v33, 768 - v38, *(uint64_t *)((char *)a1 + 4));
  *(uint64_t *)((char *)a1 + 4) = result;
  return result;
}

uint64_t webrtc::rnn_vad::ComputePitchPeriod48kHz(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  _DWORD *v33;
  int v34;
  float v35;
  float v36;
  int *v37;
  int *v38;
  uint64_t v39;
  float v40;
  float v41;
  float *v42;
  float v43;
  float v44;
  int v45;
  _DWORD v46[10];
  unsigned int v47;
  float v48[294];

  v47 = 0;
  if ((int)a3 >= SHIDWORD(a3))
    v3 = HIDWORD(a3);
  else
    v3 = a3;
  if ((int)a3 <= SHIDWORD(a3))
    v4 = HIDWORD(a3);
  else
    v4 = a3;
  if (v3 <= 2)
    v5 = 2;
  else
    v5 = v3;
  v6 = v5 - 2;
  if (v3 >= 291)
    v7 = 291;
  else
    v7 = v3;
  if (v4 <= 2)
    v8 = 2;
  else
    v8 = v4;
  v9 = v8 - 2;
  if (v4 >= 291)
    v10 = 291;
  else
    v10 = v4;
  v11 = (v10 + 2);
  v12 = v11 << 32;
  v13 = v7 + 3;
  if (v7 + 3 >= (int)v9)
  {
    if (v5 >= 3)
    {
      v48[v5 - 3] = 0.0;
      if (v4 > 290)
      {
LABEL_26:
        if ((int)v6 <= (int)v11)
          goto LABEL_42;
        goto LABEL_57;
      }
    }
    else if (v4 > 290)
    {
      goto LABEL_26;
    }
    *(float *)((char *)v48 + ((v12 + 0x100000000) >> 30)) = 0.0;
    if ((int)v6 <= (int)v11)
    {
      while (1)
      {
LABEL_42:
        v21 = 0;
        v22 = result + 4 * v6;
        if (v6 >= 0x360)
          v22 = 0;
        v23 = 0.0;
        do
        {
          v24 = vmulq_f32(*(float32x4_t *)(result + v21 + 1536), *(float32x4_t *)(v22 + v21));
          v25 = vmulq_f32(*(float32x4_t *)(result + v21 + 1552), *(float32x4_t *)(v22 + v21 + 16));
          v23 = (float)((float)((float)((float)((float)((float)((float)(v23 + v24.f32[0]) + v24.f32[1]) + v24.f32[2])
                                              + v24.f32[3])
                                      + v25.f32[0])
                              + v25.f32[1])
                      + v25.f32[2])
              + v25.f32[3];
          v21 += 32;
        }
        while (v21 != 1920);
        v48[v6] = v23;
        v26 = v47++;
        if (v26 >= 0xA)
          goto LABEL_76;
        v46[v26] = v6++;
        if (v10 + 3 == (_DWORD)v6)
          goto LABEL_57;
      }
    }
    goto LABEL_57;
  }
  if (v5 < 3)
  {
    v14 = (v7 + 2);
    if (v3 > 290)
      goto LABEL_22;
LABEL_29:
    *(float *)((char *)v48 + (((v14 << 32) + 0x100000000) >> 30)) = 0.0;
    if ((int)v6 <= (int)v14)
    {
      while (1)
      {
LABEL_30:
        v15 = 0;
        v16 = result + 4 * v6;
        if (v6 >= 0x360)
          v16 = 0;
        v17 = 0.0;
        do
        {
          v18 = vmulq_f32(*(float32x4_t *)(result + v15 + 1536), *(float32x4_t *)(v16 + v15));
          v19 = vmulq_f32(*(float32x4_t *)(result + v15 + 1552), *(float32x4_t *)(v16 + v15 + 16));
          v17 = (float)((float)((float)((float)((float)((float)((float)(v17 + v18.f32[0]) + v18.f32[1]) + v18.f32[2])
                                              + v18.f32[3])
                                      + v19.f32[0])
                              + v19.f32[1])
                      + v19.f32[2])
              + v19.f32[3];
          v15 += 32;
        }
        while (v15 != 1920);
        v48[v6] = v17;
        v20 = v47++;
        if (v20 >= 0xA)
          goto LABEL_76;
        v46[v20] = v6++;
        if (v13 == (_DWORD)v6)
          goto LABEL_36;
      }
    }
    goto LABEL_36;
  }
  v48[v5 - 3] = 0.0;
  v14 = (v7 + 2);
  if (v3 <= 290)
    goto LABEL_29;
LABEL_22:
  if ((int)v6 <= (int)v14)
    goto LABEL_30;
LABEL_36:
  if (v8 >= 3)
  {
    v48[v8 - 3] = 0.0;
    if (v4 > 290)
    {
LABEL_38:
      if ((int)v9 <= (int)v11)
        goto LABEL_51;
      goto LABEL_57;
    }
  }
  else if (v4 > 290)
  {
    goto LABEL_38;
  }
  *(float *)((char *)v48 + ((v12 + 0x100000000) >> 30)) = 0.0;
  if ((int)v9 <= (int)v11)
  {
    while (1)
    {
LABEL_51:
      v27 = 0;
      v28 = result + 4 * v9;
      if (v9 >= 0x360)
        v28 = 0;
      v29 = 0.0;
      do
      {
        v30 = vmulq_f32(*(float32x4_t *)(result + v27 + 1536), *(float32x4_t *)(v28 + v27));
        v31 = vmulq_f32(*(float32x4_t *)(result + v27 + 1552), *(float32x4_t *)(v28 + v27 + 16));
        v29 = (float)((float)((float)((float)((float)((float)((float)(v29 + v30.f32[0]) + v30.f32[1]) + v30.f32[2])
                                            + v30.f32[3])
                                    + v31.f32[0])
                            + v31.f32[1])
                    + v31.f32[2])
            + v31.f32[3];
        v27 += 32;
      }
      while (v27 != 1920);
      v48[v9] = v29;
      v32 = v47++;
      if (v32 >= 0xA)
        break;
      v46[v32] = v9++;
      if (v10 + 3 == (_DWORD)v9)
        goto LABEL_57;
    }
LABEL_76:
    __break(1u);
    return result;
  }
LABEL_57:
  if (v47)
    v33 = v46;
  else
    v33 = 0;
  v34 = 0;
  if (!v47)
    return (2 * v34);
  v35 = 0.0;
  v36 = -1.0;
  v37 = v46;
  v38 = &v33[v47];
  do
  {
    v39 = *v37;
    v40 = v48[v39];
    if (v40 > 0.0)
    {
      v41 = v40 * v40;
      if ((float)(v35 * v41) > (float)(v36 * *(float *)(a2 + 4 * v39)))
      {
        v35 = *(float *)(a2 + 4 * v39);
        v36 = v41;
        v34 = *v37;
      }
    }
    ++v37;
  }
  while (v37 != v38);
  if (!v34 || v34 > 292)
    return (2 * v34);
  v42 = &v48[v34];
  v43 = v42[1];
  v44 = *(v42 - 1);
  if ((float)(v44 - v43) > (float)((float)(*v42 - v43) * 0.7))
    return (2 * v34 + 1);
  if ((float)(v43 - v44) <= (float)((float)(*v42 - v44) * 0.7))
    v45 = 0;
  else
    v45 = -1;
  return (v45 + 2 * v34);
}

unint64_t webrtc::rnn_vad::ComputeExtendedPitchPeriod48kHz(unint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  float v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  int v19;
  float v20;
  float v21;
  uint64_t v22;
  unint64_t v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  unint64_t v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  unint64_t v33;
  float v34;
  float32x4_t v35;
  float32x4_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  unint64_t v46;
  float v47;
  float32x4_t v48;
  float32x4_t v49;
  uint64_t v50;
  int v52;
  unsigned int v53;
  unint64_t v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  unsigned int v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  uint64_t v64;

  v4 = 0;
  v5 = *(float *)(a2 + 1536);
  if (a3 >= 0)
    v6 = a3;
  else
    v6 = a3 + 1;
  v7 = v6 >> 1;
  if (v7 >= 383)
    v8 = 383;
  else
    v8 = v7;
  v9 = v8;
  v10 = (384 - v8);
  v11 = result + 4 * v10;
  if (v10 >= 0x360)
    v11 = 0;
  v12 = 0.0;
  do
  {
    v13 = vmulq_f32(*(float32x4_t *)(result + v4 + 1536), *(float32x4_t *)(v11 + v4));
    v14 = vmulq_f32(*(float32x4_t *)(result + v4 + 1552), *(float32x4_t *)(v11 + v4 + 16));
    v12 = (float)((float)((float)((float)((float)((float)((float)(v12 + v13.f32[0]) + v13.f32[1]) + v13.f32[2])
                                        + v13.f32[3])
                                + v14.f32[0])
                        + v14.f32[1])
                + v14.f32[2])
        + v14.f32[3];
    v4 += 32;
  }
  while (v4 != 1920);
  v15 = *(float *)(a2 + 4 * v10);
  v16 = 1.0;
  v17 = sqrtf((float)(v5 * v15) + 1.0);
  v18 = v12 / v17;
  if ((int)a4 >= 0)
    v19 = a4;
  else
    v19 = a4 + 1;
  if (v8 >= 59)
  {
    v38 = 2 * v8;
    v39 = 2 * v8 / 59;
    if (v39 <= 2)
      v39 = 2;
    if ((v39 - 16) < 0xFFFFFFF2)
    {
      __break(1u);
      return result;
    }
    v40 = -(v19 >> 1);
    v41 = (v39 + 1);
    v42 = 2;
    v20 = v12 / v17;
    do
    {
      v43 = 0;
      v44 = (v38 + (int)v42) / (2 * (int)v42);
      v45 = 384 - v44;
      v46 = result + 4 * (384 - v44);
      if ((384 - v44) >= 0x360)
        v46 = 0;
      v47 = 0.0;
      do
      {
        v48 = vmulq_f32(*(float32x4_t *)(result + v43 + 1536), *(float32x4_t *)(v46 + v43));
        v49 = vmulq_f32(*(float32x4_t *)(result + v43 + 1552), *(float32x4_t *)(v46 + v43 + 16));
        v47 = (float)((float)((float)((float)((float)((float)((float)(v47 + v48.f32[0]) + v48.f32[1]) + v48.f32[2])
                                            + v48.f32[3])
                                    + v49.f32[0])
                            + v49.f32[1])
                    + v49.f32[2])
            + v49.f32[3];
        v43 += 32;
      }
      while (v43 != 1920);
      v50 = 0;
        && v42 == 2)
      {
        v52 = v8;
      }
      else
      {
            / (2
             * (int)v42);
      }
      v53 = 384 - v52;
      v54 = result + 4 * v53;
      if (v53 >= 0x360)
        v54 = 0;
      v55 = 0.0;
      do
      {
        v56 = vmulq_f32(*(float32x4_t *)(result + v50 + 1536), *(float32x4_t *)(v54 + v50));
        v57 = vmulq_f32(*(float32x4_t *)(result + v50 + 1552), *(float32x4_t *)(v54 + v50 + 16));
        v55 = (float)((float)((float)((float)((float)((float)((float)(v55 + v56.f32[0]) + v56.f32[1]) + v56.f32[2])
                                            + v56.f32[3])
                                    + v57.f32[0])
                            + v57.f32[1])
                    + v57.f32[2])
            + v57.f32[3];
        v50 += 32;
      }
      while (v50 != 1920);
      v58 = v44 + v40;
      if (v44 + v40 < 0)
        v58 = -v58;
      v59 = *((float *)&a4 + 1);
      if (v58 >= 2)
      {
        v59 = 0.0;
        if (v58 == 2)
        {
          if (dword_208F18008[v42 - 2] >= v8)
            v59 = 0.0;
          else
            v59 = *((float *)&a4 + 1) * 0.5;
        }
      }
      v60 = (float)(v47 + v55) * 0.5;
      v61 = v60
          / sqrtf((float)(v5 * (float)((float)(*(float *)(a2 + 4 * v45) + *(float *)(a2 + 4 * (int)v53)) * 0.5)) + 1.0);
      v62 = fmaxf(-(float)(v59 - (float)(v18 * 0.7)), 0.3);
      v63 = fmaxf(-(float)(v59 - (float)(v18 * 0.85)), 0.4);
      if (v44 >= 90)
        v63 = v62;
      if (v63 < v61)
      {
        v9 = (v38 + (int)v42) / (2 * (int)v42);
        v20 = v61;
        v12 = v60;
        v15 = (float)(*(float *)(a2 + 4 * v45) + *(float *)(a2 + 4 * (int)v53)) * 0.5;
      }
      ++v42;
    }
    while (v42 != v41);
  }
  else
  {
    v20 = v12 / v17;
  }
  v21 = fmaxf(v12, 0.0);
  if (v15 > v21)
    v16 = v21 / (float)(v15 + 1.0);
  if ((v9 - 1) > 0x17E)
  {
    v37 = 0;
  }
  else
  {
    v22 = 0;
    v23 = result + 4 * (385 - v9);
    v24 = 0.0;
    do
    {
      v25 = vmulq_f32(*(float32x4_t *)(result + v22 + 1536), *(float32x4_t *)(v23 + v22));
      v26 = vmulq_f32(*(float32x4_t *)(result + v22 + 1552), *(float32x4_t *)(v23 + v22 + 16));
      v24 = (float)((float)((float)((float)((float)((float)((float)(v24 + v25.f32[0]) + v25.f32[1]) + v25.f32[2])
                                          + v25.f32[3])
                                  + v26.f32[0])
                          + v26.f32[1])
                  + v26.f32[2])
          + v26.f32[3];
      v22 += 32;
    }
    while (v22 != 1920);
    v27 = 0;
    v28 = result + 4 * (384 - v9);
    v29 = 0.0;
    do
    {
      v30 = vmulq_f32(*(float32x4_t *)(result + v27 + 1536), *(float32x4_t *)(v28 + v27));
      v31 = vmulq_f32(*(float32x4_t *)(result + v27 + 1552), *(float32x4_t *)(v28 + v27 + 16));
      v29 = (float)((float)((float)((float)((float)((float)((float)(v29 + v30.f32[0]) + v30.f32[1]) + v30.f32[2])
                                          + v30.f32[3])
                                  + v31.f32[0])
                          + v31.f32[1])
                  + v31.f32[2])
          + v31.f32[3];
      v27 += 32;
    }
    while (v27 != 1920);
    v32 = 0;
    if ((383 - v9) >= 0x360)
      v33 = 0;
    else
      v33 = result + 4 * (383 - v9);
    v34 = 0.0;
    do
    {
      v35 = vmulq_f32(*(float32x4_t *)(result + v32 + 1536), *(float32x4_t *)(v33 + v32));
      v36 = vmulq_f32(*(float32x4_t *)(result + v32 + 1552), *(float32x4_t *)(v33 + v32 + 16));
      v34 = (float)((float)((float)((float)((float)((float)((float)(v34 + v35.f32[0]) + v35.f32[1]) + v35.f32[2])
                                          + v35.f32[3])
                                  + v36.f32[0])
                          + v36.f32[1])
                  + v36.f32[2])
          + v36.f32[3];
      v32 += 32;
    }
    while (v32 != 1920);
    if ((float)(v34 - v24) <= (float)((float)(v29 - v24) * 0.7))
    {
      if ((float)(v24 - v34) <= (float)((float)(v29 - v34) * 0.7))
        v37 = 0;
      else
        v37 = -1;
    }
    else
    {
      v37 = 1;
    }
  }
  if (v16 >= v20)
    v16 = v20;
  LODWORD(v64) = v37 + 2 * v9;
  if ((int)v64 <= 60)
    v64 = 60;
  else
    v64 = v64;
  return v64 | ((unint64_t)LODWORD(v16) << 32);
}

uint64_t webrtc::PixelLimitResource::SetResourceListener(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int8 v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  _QWORD v20[2];
  __n128 (*v21)(uint64_t, __n128 *, __n128 *);
  void (*v22)(uint64_t *);
  unsigned int *v23;

  a1[4] = a2;
  result = a1[5];
  if (result)
  {
    *(_BYTE *)(result + 4) = 0;
    do
    {
      v5 = __ldaxr((unsigned int *)result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)result));
    if (!v6)
      result = MEMORY[0x20BD0ADEC]();
    a1[5] = 0;
  }
  if (a2)
  {
    v7 = a1[1];
    v20[0] = a1;
    v21 = absl::internal_any_invocable::LocalManagerTrivial;
    v22 = absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::PixelLimitResource::SetResourceListener(webrtc::ResourceListener *)::$_1 &>;
    if ((v8 & 1) == 0)
    {
      v18 = v7;
      v7 = v18;
      if (v16)
      {
        v17 = (_QWORD *)operator new();
        *v17 = &unk_24C0B13E8;
        webrtc::Clock::GetRealTimeClock(void)::clock = (uint64_t)v17;
        v7 = v18;
      }
    }
    webrtc::RepeatingTaskHandle::Start(v7, (uint64_t)v20, 0, webrtc::Clock::GetRealTimeClock(void)::clock, (uint64_t)&v19, &v23);
    v9 = v23;
    v23 = 0;
    v10 = (unsigned int *)a1[5];
    a1[5] = v9;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        MEMORY[0x20BD0ADEC]();
      v13 = v23;
      if (v23)
      {
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          MEMORY[0x20BD0ADEC]();
      }
    }
    return ((uint64_t (*)(uint64_t, _QWORD *, _QWORD *))v21)(1, v20, v20);
  }
  return result;
}

void webrtc::PixelLimitResource::Name(char *a1@<X8>)
{
  a1[23] = 18;
  if (a1 <= "PixelLimitResource" && a1 + 18 > "PixelLimitResource")
    __break(1u);
  else
    strcpy(a1, "PixelLimitResource");
}

uint64_t rtc::RefCountedObject<webrtc::PixelLimitResource>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::PixelLimitResource>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 12;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<webrtc::PixelLimitResource>::~RefCountedObject(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &unk_24C0BA830;
  v2 = (unsigned int *)a1[5];
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void rtc::RefCountedObject<webrtc::PixelLimitResource>::~RefCountedObject(_QWORD *a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  *a1 = &unk_24C0BA830;
  v1 = (unsigned int *)a1[5];
  if (v1)
  {
    do
    {
      v2 = __ldaxr(v1);
      v3 = v2 - 1;
    }
    while (__stlxr(v3, v1));
    if (!v3)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::PixelLimitResource>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 48));
  return v1 == 1;
}

void absl::internal_any_invocable::LocalInvoker<false,webrtc::TimeDelta,webrtc::PixelLimitResource::SetResourceListener(webrtc::ResourceListener *)::$_1 &>(uint64_t *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  rtc::PlatformThread *v6;
  _BYTE v7[24];

  v1 = *a1;
  if (*(_QWORD *)(*a1 + 32))
  {
    if (*(_BYTE *)(v1 + 28))
    {
      (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(v1 + 16) + 16))(v7);
      if ((*(_QWORD *)&v7[4] & 0xFF00000000) != 0)
      {
        if (!*(_BYTE *)(v1 + 28))
        {
          std::__throw_bad_optional_access[abi:sn180100]();
          rtc::PlatformThread::~PlatformThread(v6);
          return;
        }
        v2 = *(_DWORD *)(v1 + 24);
        if (v2 < *(int *)&v7[4])
        {
          v3 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)v7 = v1;
          (**(void (***)(uint64_t))v1)(v1);
          (*(void (**)(uint64_t, _BYTE *, _QWORD))(*(_QWORD *)v3 + 16))(v3, v7, 0);
          v4 = *(_QWORD *)v7;
          if (!*(_QWORD *)v7)
            return;
LABEL_10:
          (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
          return;
        }
        if (3 * v2 / 5 > *(int *)&v7[4])
        {
          v5 = *(_QWORD *)(v1 + 32);
          *(_QWORD *)v7 = v1;
          (**(void (***)(uint64_t))v1)(v1);
          (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v7, 1);
          v4 = *(_QWORD *)v7;
          if (*(_QWORD *)v7)
            goto LABEL_10;
        }
      }
    }
  }
}

void rtc::PlatformThread::~PlatformThread(rtc::PlatformThread *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 16))
  {
    if (!*((_BYTE *)this + 24))
    {
LABEL_5:
      *((_BYTE *)this + 16) = 0;
      return;
    }
    if (!pthread_join(*((pthread_t *)this + 1), 0))
    {
      if (!*((_BYTE *)this + 16))
        return;
      goto LABEL_5;
    }
    if (*((_BYTE *)this + 16))
    {
      pthread_join(*((pthread_t *)this + 1), 0);
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/platform_thread.cc", 166, "0 == pthread_join(*handle_, nullptr)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v2, v3, v4, v5, 0);
    }
    __break(1u);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*((_BYTE *)this + 16))
  {
    if (!*((_BYTE *)this + 24))
    {
LABEL_5:
      *((_BYTE *)this + 16) = 0;
      goto LABEL_10;
    }
    if (!pthread_join(*((pthread_t *)this + 1), 0))
    {
      if (!*((_BYTE *)this + 16))
        goto LABEL_10;
      goto LABEL_5;
    }
    if (*((_BYTE *)this + 16))
    {
      pthread_join(*((pthread_t *)this + 1), 0);
      rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/platform_thread.cc", 166, "0 == pthread_join(*handle_, nullptr)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v2, v3, v4, v5, 0);
    }
    __break(1u);
  }
LABEL_10:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t rtc::PlatformThread::SpawnThread@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, size_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  _QWORD *v12;
  _QWORD *v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t result;
  pthread_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  pthread_t v29;
  pthread_attr_t v30;
  _QWORD v31[3];
  _QWORD *v32;
  __int128 v33;
  unint64_t v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v12 = (_QWORD *)operator new();
  v13 = (_QWORD *)a1[3];
  if (v13)
  {
    if (v13 == a1)
    {
      v32 = v31;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v31);
      if (a3 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_20;
    }
    else
    {
      v32 = (_QWORD *)a1[3];
      a1[3] = 0;
      if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_20:
        abort();
    }
  }
  else
  {
    v32 = 0;
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  if (a3 > 0x16)
  {
    v16 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v16 = a3 | 7;
    v17 = v16 + 1;
    v14 = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&v33 + 1) = a3;
    v34 = v17 | 0x8000000000000000;
    *(_QWORD *)&v33 = v14;
    v15 = (__int128 *)((char *)v14 + a3);
    if (v14 > a2)
      goto LABEL_13;
  }
  else
  {
    HIBYTE(v34) = a3;
    v14 = &v33;
    v15 = (__int128 *)((char *)&v33 + a3);
    if (&v33 > a2)
      goto LABEL_13;
  }
  if (v15 > a2)
  {
    __break(1u);
    goto LABEL_33;
  }
LABEL_13:
  if (a3)
    memmove(v14, a2, a3);
  *(_BYTE *)v15 = 0;
  v35 = a4;
  v18 = operator new(0x48uLL);
  v19 = v18;
  *v18 = off_24C0BA8D8;
  if (v32)
  {
    if (v32 == v31)
    {
      v18[4] = v18 + 1;
      (*(void (**)(_QWORD *))(v31[0] + 24))(v31);
      a4 = v35;
      v20 = v32;
    }
    else
    {
      v20 = 0;
      v19[4] = v32;
      v32 = 0;
    }
  }
  else
  {
    v20 = 0;
    v19[4] = 0;
  }
  *(_OWORD *)(v19 + 5) = v33;
  v19[7] = v34;
  v34 = 0;
  v33 = 0uLL;
  *((_DWORD *)v19 + 16) = a4;
  v12[3] = v19;
  if (v20 == v31)
  {
    v21 = 4;
    v20 = v31;
  }
  else
  {
    if (!v20)
      goto LABEL_27;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_27:
  pthread_attr_init(&v30);
  pthread_attr_setstacksize(&v30, 0x100000uLL);
  if (a5)
    v22 = 1;
  else
    v22 = 2;
  pthread_attr_setdetachstate(&v30, v22);
  v29 = 0;
  {
LABEL_33:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/platform_thread.cc", 205, "0 == pthread_create(&handle, &attr, &RunPlatformThread, start_thread_function_ptr)", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v25, v26, v27, v28, 0);
  }
  result = pthread_attr_destroy(&v30);
  v24 = v29;
  *(_QWORD *)a6 = &off_24C0BA8B8;
  *(_QWORD *)(a6 + 8) = v24;
  *(_BYTE *)(a6 + 16) = 1;
  *(_BYTE *)(a6 + 24) = a5;
  return result;
}

uint64_t rtc::`anonymous namespace'::RunPlatformThread(rtc::_anonymous_namespace_ *this, void *a2)
{
  uint64_t v3;
  rtc::_anonymous_namespace_ *v4;
  uint64_t v5;
  uint64_t v7;

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    (*(void (**)(uint64_t, void *))(*(_QWORD *)v3 + 48))(v3, a2);
    v4 = (rtc::_anonymous_namespace_ *)*((_QWORD *)this + 3);
    if (v4 == this)
    {
      v5 = 4;
      v4 = this;
    }
    else
    {
      if (!v4)
      {
LABEL_7:
        MEMORY[0x20BD0ADEC](this, 0x1020C40A5B76CDFLL);
        return 0;
      }
      v5 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
    goto LABEL_7;
  }
  v7 = std::__throw_bad_function_call[abi:sn180100]();
  return std::__function::__func<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0,std::allocator<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0>,void ()(void)>::~__func(v7);
}

uint64_t std::__function::__func<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0,std::allocator<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24C0BA8D8;
  v2 = (_QWORD *)(a1 + 8);
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 != v2)
      goto LABEL_3;
LABEL_6:
    v4 = 4;
    v3 = v2;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 40));
  v3 = *(_QWORD **)(a1 + 32);
  if (v3 == v2)
    goto LABEL_6;
LABEL_3:
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0,std::allocator<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = off_24C0BA8D8;
  v2 = (_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 63) < 0)
  {
    operator delete(*(void **)(a1 + 40));
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 != v2)
      goto LABEL_3;
  }
  else
  {
    v3 = *(_QWORD **)(a1 + 32);
    if (v3 != v2)
    {
LABEL_3:
      if (!v3)
        goto LABEL_8;
      v4 = 5;
LABEL_7:
      (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_8:
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  v4 = 4;
  v3 = v2;
  goto LABEL_7;
}

char *std::__function::__func<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0,std::allocator<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::string *v5;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = off_24C0BA8D8;
  v3 = v2 + 8;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 != a1 + 8)
    {
      *((_QWORD *)v2 + 4) = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v4 + 16))(v4, v3);
      v5 = (std::string *)(v2 + 40);
      if (*(char *)(a1 + 63) < 0)
        goto LABEL_8;
LABEL_6:
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 40);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
      *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
      return v2;
    }
    *((_QWORD *)v2 + 4) = v3;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    v5 = (std::string *)(v2 + 40);
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    *((_QWORD *)v2 + 4) = 0;
    v5 = (std::string *)(v2 + 40);
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_6;
  }
LABEL_8:
  std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  *((_DWORD *)v2 + 16) = *(_DWORD *)(a1 + 64);
  return v2;
}

void std::__function::__func<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0,std::allocator<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::string *v6;
  __int128 v7;

  *(_QWORD *)a2 = off_24C0BA8D8;
  v4 = a2 + 8;
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 != a1 + 8)
    {
      *(_QWORD *)(a2 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v4);
      v6 = (std::string *)(a2 + 40);
      if (*(char *)(a1 + 63) < 0)
        goto LABEL_8;
LABEL_6:
      v7 = *(_OWORD *)(a1 + 40);
      v6->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 56);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 64);
      return;
    }
    *(_QWORD *)(a2 + 32) = v4;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
    v6 = (std::string *)(a2 + 40);
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    v6 = (std::string *)(a2 + 40);
    if ((*(char *)(a1 + 63) & 0x80000000) == 0)
      goto LABEL_6;
  }
LABEL_8:
  std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 64);
}

uint64_t std::__function::__func<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0,std::allocator<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1 + 8;
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    result = *(_QWORD *)(a1 + 32);
    if (result != v2)
      goto LABEL_3;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  }
  operator delete(*(void **)(a1 + 40));
  result = *(_QWORD *)(a1 + 32);
  if (result == v2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
LABEL_3:
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void std::__function::__func<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0,std::allocator<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0>,void ()(void)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  if ((__p[63] & 0x80000000) == 0)
  {
    v3 = (char *)*((_QWORD *)__p + 4);
    if (v3 != v2)
      goto LABEL_3;
LABEL_6:
    v4 = 4;
    v3 = v2;
    goto LABEL_7;
  }
  operator delete(*((void **)__p + 5));
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
    goto LABEL_6;
LABEL_3:
  if (v3)
  {
    v4 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t std::__function::__func<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0,std::allocator<rtc::PlatformThread::SpawnThread(std::function<void ()(void)>,std::string_view,rtc::ThreadAttributes,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  int v4;
  int priority_min;
  int priority_max;
  int v7;
  int v8;
  _opaque_pthread_t *v9;
  uint64_t v10;
  sched_param v12;

  v2 = a1 + 40;
  if (*(char *)(a1 + 63) >= 0)
    v3 = (const char *)(a1 + 40);
  else
    v3 = *(const char **)(a1 + 40);
  pthread_setname_np(v3);
  v4 = *(_DWORD *)(v2 + 24);
  priority_min = sched_get_priority_min(4);
  priority_max = sched_get_priority_max(4);
  if (priority_min != -1 && priority_max != -1 && priority_max - priority_min >= 3)
  {
    v7 = priority_min + 1;
    switch(v4)
    {
      case 1:
        goto LABEL_15;
      case 2:
        v8 = priority_max + priority_min;
        if (priority_max + priority_min - 1 >= 0)
          v8 = priority_max + priority_min - 1;
        v7 = v8 >> 1;
        goto LABEL_15;
      case 3:
        if (priority_max - 3 > v7)
          v7 = priority_max - 3;
        goto LABEL_15;
      case 4:
        v7 = priority_max - 1;
LABEL_15:
        v12.sched_priority = v7;
        break;
      default:
        break;
    }
    v9 = pthread_self();
    pthread_setschedparam(v9, 4, &v12);
  }
  v10 = *(_QWORD *)(a1 + 32);
  if (!v10)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    JUMPOUT(0x2086F1A30);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 48))(v10);
}

void webrtc::rtcp::Pli::~Pli(webrtc::rtcp::Pli *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::rtcp::Pli::BlockLength(webrtc::rtcp::Pli *this)
{
  return 12;
}

uint64_t webrtc::rtcp::Pli::Create(unsigned int *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;

  v12 = *a3;
  if ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1) + v12 <= a4)
  {
LABEL_4:
    v13 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
    *(_BYTE *)(a2 + *a3) = -127;
    *(_BYTE *)(*a3 + a2 + 1) = -50;
    *(_BYTE *)(*a3 + a2 + 2) = (unint64_t)(v13 - 4) >> 10;
    *(_BYTE *)(*a3 + a2 + 3) = (unint64_t)(v13 - 4) >> 2;
    v14 = *a3 + 4;
    *a3 = v14;
    v15 = (_DWORD *)(a2 + v14);
    *v15 = bswap32(a1[2]);
    v15[1] = bswap32(a1[3]);
    *a3 += 8;
    return 1;
  }
  else
  {
    while (*a3)
    {
      a6(a5, a2);
      *a3 = 0;
      if ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1) <= a4)
        goto LABEL_4;
    }
    return 0;
  }
}

uint64_t webrtc::PoleZeroFilter::Filter(webrtc::PoleZeroFilter *this, const __int16 *a2, unint64_t a3, float *a4, double a5)
{
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int16x8_t *v16;
  char *v17;
  int32x4_t *v18;
  char *v19;
  char *v20;
  __int16 v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t *v26;
  int16x8_t *v27;
  unint64_t v28;
  int8x16_t v29;
  int16x8_t v30;
  int8x16_t v31;
  int16x8_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  unint64_t v37;
  float *v38;
  char *v39;
  float v40;
  float v41;
  int v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  int32x4_t *v48;
  unint64_t v49;
  float32x4_t v50;
  float32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  float32x4_t v54;
  float32x4_t v55;
  unint64_t v56;
  float *v57;
  float *v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  unint64_t v63;
  int32x4_t *v64;
  char *v65;
  __int16 v66;
  float v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  float32x4_t *v71;
  int32x4_t *v72;
  unint64_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  float32x4_t v78;
  float32x4_t v79;
  unint64_t v80;
  float *v81;
  float *v82;
  float v83;
  float v84;
  float v85;
  unint64_t v86;
  int16x8_t *v87;
  char *v88;
  __int16 v89;
  float v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  float32x4_t *v94;
  int16x8_t *v95;
  unint64_t v96;
  int8x16_t v97;
  int16x8_t v98;
  int8x16_t v99;
  int16x8_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  unint64_t v105;
  float *v106;
  char *v107;
  float v108;
  float v109;
  int v110;
  uint64_t v111;
  int v112;
  float v113;
  uint64_t v114;
  unint64_t v115;
  const float *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  const __int16 *v124;
  const __int16 *v125;
  float *v126;
  float *v127;
  float v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  float32x4_t *v132;
  int16x8_t *v133;
  int8x16_t v134;
  int16x8_t v135;
  int8x16_t v136;
  int16x8_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  unint64_t v142;
  const float *v143;
  const __int16 *v144;
  float v145;
  float v146;
  int v147;
  float v148;
  float v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  float32x4_t *v153;
  int32x4_t *v154;
  float32x4_t v155;
  float32x4_t v156;
  int8x16_t v157;
  int8x16_t v158;
  float32x4_t v159;
  float32x4_t v160;
  unint64_t v161;
  float *v162;
  float *v163;
  float v164;
  float v165;
  float v166;
  uint64_t v167;
  unint64_t v168;
  float *v169;
  float *v170;
  float v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  float32x4_t *v175;
  int32x4_t *v176;
  float32x4_t v177;
  float32x4_t v178;
  int8x16_t v179;
  int8x16_t v180;
  float32x4_t v181;
  float32x4_t v182;
  unint64_t v183;
  float *v184;
  float *v185;
  float v186;
  float v187;
  float v188;
  float *v189;
  float32x4_t v190;
  unint64_t v191;
  int16x8_t *v192;
  float32x4_t *v193;
  unint64_t v194;
  int16x8_t v195;
  float32x4_t v196;
  float32x4_t v197;
  unint64_t v198;
  float *v199;
  const __int16 *v200;
  int v201;
  unint64_t v202;

  result = 0xFFFFFFFFLL;
  if (a2 && a4)
  {
    v8 = *((_QWORD *)this + 63);
    v202 = v8;
    if (v8 >= a3)
      v8 = a3;
    if (v8)
    {
      v9 = *((_QWORD *)this + 61);
      v10 = *((_QWORD *)this + 62);
      if ((unint64_t)(v9 + 1) > 2)
        v11 = v9 + 1;
      else
        v11 = 2;
      if ((unint64_t)(v10 + 1) > 2)
        v12 = v10 + 1;
      else
        v12 = 2;
      if (v9)
      {
        if (v10)
        {
          v13 = 0;
          v14 = (v11 - 1) & 0xFFFFFFFFFFFFFFF0;
          v15 = (v12 - 1) & 0xFFFFFFFFFFFFFFF8;
          v16 = (int16x8_t *)((char *)this + 2 * v9 - 16);
          v17 = (char *)this - 2;
          v18 = (int32x4_t *)((char *)this + 4 * v10 + 80);
          v19 = (char *)this + 92;
          while (1)
          {
            v21 = a2[v13];
            v22 = *((float *)this + 72) * (float)v21;
            a4[v13] = v22;
            v23 = 0.0;
            if (v11 < 0x11)
              break;
            v26 = (float32x4_t *)((char *)this + 292);
            v27 = v16;
            v28 = (v11 - 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v29 = (int8x16_t)vrev64q_s16(*v27);
              v30 = (int16x8_t)vextq_s8(v29, v29, 8uLL);
              v31 = (int8x16_t)vrev64q_s16(v27[-1]);
              v32 = (int16x8_t)vextq_s8(v31, v31, 8uLL);
              v33 = vmulq_f32(v26[1], vcvtq_f32_s32(vmovl_high_s16(v30)));
              v34 = vmulq_f32(*v26, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v30.i8)));
              v35 = vmulq_f32(v26[3], vcvtq_f32_s32(vmovl_high_s16(v32)));
              v36 = vmulq_f32(v26[2], vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v32.i8)));
              v23 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v23 + v34.f32[0]) + v34.f32[1]) + v34.f32[2]) + v34.f32[3]) + v33.f32[0])
                                                                                                  + v33.f32[1])
                                                                                          + v33.f32[2])
                                                                                  + v33.f32[3])
                                                                          + v36.f32[0])
                                                                  + v36.f32[1])
                                                          + v36.f32[2])
                                                  + v36.f32[3])
                                          + v35.f32[0])
                                  + v35.f32[1])
                          + v35.f32[2])
                  + v35.f32[3];
              v27 -= 2;
              v26 += 4;
              v28 -= 16;
            }
            while (v28);
            v24 = v14 | 1;
            v25 = v9 - v14;
            if (v11 - 1 != v14)
              goto LABEL_21;
LABEL_23:
            v43 = v22 + v23;
            a4[v13] = v43;
            v44 = 0.0;
            if (v12 >= 9)
            {
              v47 = (float32x4_t *)((char *)this + 392);
              v48 = v18;
              v49 = (v12 - 1) & 0xFFFFFFFFFFFFFFF8;
              do
              {
                v50 = *v47;
                v51 = v47[1];
                v47 += 2;
                v52 = (int8x16_t)vrev64q_s32(*v48);
                v53 = (int8x16_t)vrev64q_s32(v48[-1]);
                v54 = vmulq_f32(v50, (float32x4_t)vextq_s8(v52, v52, 8uLL));
                v55 = vmulq_f32(v51, (float32x4_t)vextq_s8(v53, v53, 8uLL));
                v44 = (float)((float)((float)((float)((float)((float)((float)(v44 + v54.f32[0]) + v54.f32[1])
                                                            + v54.f32[2])
                                                    + v54.f32[3])
                                            + v55.f32[0])
                                    + v55.f32[1])
                            + v55.f32[2])
                    + v55.f32[3];
                v48 -= 2;
                v49 -= 8;
              }
              while (v49);
              v45 = v15 | 1;
              v46 = v10 - v15;
              if (v12 - 1 == v15)
                goto LABEL_15;
            }
            else
            {
              v45 = 1;
              v46 = v10;
            }
            v56 = v12 - v45;
            v57 = (float *)((char *)this + 4 * v45 + 388);
            v58 = (float *)&v19[4 * v46];
            do
            {
              v59 = *v57++;
              v60 = v59;
              v61 = *v58--;
              v44 = v44 + (float)(v60 * v61);
              --v56;
            }
            while (v56);
LABEL_15:
            *(float *)&a5 = v43 - v44;
            a4[v13] = *(float *)&a5;
            *((_WORD *)this + v13 + v9) = v21;
            v20 = (char *)this + 4 * v13++ + 4 * v10;
            *((_DWORD *)v20 + 24) = LODWORD(a5);
            v16 = (int16x8_t *)((char *)v16 + 2);
            v17 += 2;
            v18 = (int32x4_t *)((char *)v18 + 4);
            v19 += 4;
            if (v13 == v8)
              goto LABEL_54;
          }
          v24 = 1;
          v25 = v9;
LABEL_21:
          v37 = v11 - v24;
          v38 = (float *)((char *)this + 4 * v24 + 288);
          v39 = &v17[2 * v25];
          do
          {
            v40 = *v38++;
            v41 = v40;
            v42 = *(__int16 *)v39;
            v39 -= 2;
            v23 = v23 + (float)(v41 * (float)v42);
            --v37;
          }
          while (v37);
          goto LABEL_23;
        }
        v86 = (v11 - 1) & 0xFFFFFFFFFFFFFFF0;
        v87 = (int16x8_t *)((char *)this + 2 * v9 - 16);
        v88 = (char *)this - 2;
        while (1)
        {
          v89 = a2[v10];
          v90 = *((float *)this + 72) * (float)v89;
          a4[v10] = v90;
          v91 = 0.0;
          if (v11 >= 0x11)
          {
            v94 = (float32x4_t *)((char *)this + 292);
            v95 = v87;
            v96 = (v11 - 1) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v97 = (int8x16_t)vrev64q_s16(*v95);
              v98 = (int16x8_t)vextq_s8(v97, v97, 8uLL);
              v99 = (int8x16_t)vrev64q_s16(v95[-1]);
              v100 = (int16x8_t)vextq_s8(v99, v99, 8uLL);
              v101 = vmulq_f32(v94[1], vcvtq_f32_s32(vmovl_high_s16(v98)));
              v102 = vmulq_f32(*v94, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v98.i8)));
              v103 = vmulq_f32(v94[3], vcvtq_f32_s32(vmovl_high_s16(v100)));
              v104 = vmulq_f32(v94[2], vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v100.i8)));
              v91 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v91 + v102.f32[0]) + v102.f32[1]) + v102.f32[2]) + v102.f32[3]) + v101.f32[0])
                                                                                                  + v101.f32[1])
                                                                                          + v101.f32[2])
                                                                                  + v101.f32[3])
                                                                          + v104.f32[0])
                                                                  + v104.f32[1])
                                                          + v104.f32[2])
                                                  + v104.f32[3])
                                          + v103.f32[0])
                                  + v103.f32[1])
                          + v103.f32[2])
                  + v103.f32[3];
              v95 -= 2;
              v94 += 4;
              v96 -= 16;
            }
            while (v96);
            v92 = v86 | 1;
            v93 = v9 - v86;
            if (v11 - 1 == v86)
              goto LABEL_43;
          }
          else
          {
            v92 = 1;
            v93 = v9;
          }
          v105 = v11 - v92;
          v106 = (float *)((char *)this + 4 * v92 + 288);
          v107 = &v88[2 * v93];
          do
          {
            v108 = *v106++;
            v109 = v108;
            v110 = *(__int16 *)v107;
            v107 -= 2;
            v91 = v91 + (float)(v109 * (float)v110);
            --v105;
          }
          while (v105);
LABEL_43:
          *(float *)&a5 = v90 + v91;
          a4[v10] = *(float *)&a5;
          *((_WORD *)this + v10 + v9) = v89;
          *((_DWORD *)this + v10++ + 24) = LODWORD(a5);
          v87 = (int16x8_t *)((char *)v87 + 2);
          v88 += 2;
          if (v10 == v8)
            goto LABEL_54;
        }
      }
      if (v10)
      {
        v62 = 0;
        v63 = (v12 - 1) & 0xFFFFFFFFFFFFFFF8;
        v64 = (int32x4_t *)((char *)this + 4 * v10 + 80);
        v65 = (char *)this + 92;
        while (1)
        {
          v66 = a2[v62];
          v67 = 0.0;
          v68 = (float)(*((float *)this + 72) * (float)v66) + 0.0;
          a4[v62] = v68;
          if (v12 >= 9)
          {
            v71 = (float32x4_t *)((char *)this + 392);
            v72 = v64;
            v73 = (v12 - 1) & 0xFFFFFFFFFFFFFFF8;
            do
            {
              v74 = *v71;
              v75 = v71[1];
              v71 += 2;
              v76 = (int8x16_t)vrev64q_s32(*v72);
              v77 = (int8x16_t)vrev64q_s32(v72[-1]);
              v78 = vmulq_f32(v74, (float32x4_t)vextq_s8(v76, v76, 8uLL));
              v79 = vmulq_f32(v75, (float32x4_t)vextq_s8(v77, v77, 8uLL));
              v67 = (float)((float)((float)((float)((float)((float)((float)(v67 + v78.f32[0]) + v78.f32[1]) + v78.f32[2])
                                                  + v78.f32[3])
                                          + v79.f32[0])
                                  + v79.f32[1])
                          + v79.f32[2])
                  + v79.f32[3];
              v72 -= 2;
              v73 -= 8;
            }
            while (v73);
            v69 = v63 | 1;
            v70 = v10 - v63;
            if (v12 - 1 == v63)
              goto LABEL_33;
          }
          else
          {
            v69 = 1;
            v70 = v10;
          }
          v80 = v12 - v69;
          v81 = (float *)((char *)this + 4 * v69 + 388);
          v82 = (float *)&v65[4 * v70];
          do
          {
            v83 = *v81++;
            v84 = v83;
            v85 = *v82--;
            v67 = v67 + (float)(v84 * v85);
            --v80;
          }
          while (v80);
LABEL_33:
          *(float *)&a5 = v68 - v67;
          a4[v62] = *(float *)&a5;
          *((_WORD *)this + v62) = v66;
          *((_DWORD *)this + v62 + v10 + 24) = LODWORD(a5);
          ++v62;
          v64 = (int32x4_t *)((char *)v64 + 4);
          v65 += 4;
          if (v62 == v8)
            goto LABEL_54;
        }
      }
      v111 = 0;
      WORD1(a5) = 0;
      do
      {
        v112 = a2[v111];
        v113 = (float)(*((float *)this + 72) * (float)v112) + 0.0;
        a4[v111] = v113;
        *((_WORD *)this + v111) = v112;
        *((float *)this + v111++ + 24) = v113;
      }
      while (v8 != v111);
    }
LABEL_54:
    v114 = *((_QWORD *)this + 61);
    v115 = a3;
    if (v202 >= a3)
    {
      memmove(this, (char *)this + 2 * a3, 2 * v114);
      memmove((char *)this + 96, (char *)this + 4 * a3 + 96, 4 * *((_QWORD *)this + 62));
    }
    else
    {
      v116 = (const float *)((char *)this + 288);
      if ((unint64_t)(v114 + 1) > 2)
        v117 = v114 + 1;
      else
        v117 = 2;
      v118 = *((_QWORD *)this + 62);
      if ((unint64_t)(v118 + 1) > 2)
        v119 = v118 + 1;
      else
        v119 = 2;
      v120 = a3 - v8;
      if (v114)
      {
        v121 = 0;
        v122 = (v117 - 1) & 0xFFFFFFFFFFFFFFF0;
        v123 = (v119 - 1) & 0xFFFFFFFFFFFFFFF8;
        v124 = &a2[v114 - 8];
        v125 = a2 - 1;
        v126 = &a4[v118 - 4];
        v127 = a4 - 1;
        while (1)
        {
          LOWORD(a5) = a2[v8];
          *(_QWORD *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
          *(float *)&a5 = *v116 * (float)SLODWORD(a5);
          a4[v8] = *(float *)&a5;
          v128 = 0.0;
          if (v117 < 0x11)
            break;
          v131 = (v117 - 1) & 0xFFFFFFFFFFFFFFF0;
          v132 = (float32x4_t *)((char *)this + 292);
          v133 = (int16x8_t *)v124;
          do
          {
            v134 = (int8x16_t)vrev64q_s16(*v133);
            v135 = (int16x8_t)vextq_s8(v134, v134, 8uLL);
            v136 = (int8x16_t)vrev64q_s16(v133[-1]);
            v137 = (int16x8_t)vextq_s8(v136, v136, 8uLL);
            v138 = vmulq_f32(v132[1], vcvtq_f32_s32(vmovl_high_s16(v135)));
            v139 = vmulq_f32(*v132, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v135.i8)));
            v140 = vmulq_f32(v132[3], vcvtq_f32_s32(vmovl_high_s16(v137)));
            v141 = vmulq_f32(v132[2], vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v137.i8)));
            v128 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v128 + v139.f32[0]) + v139.f32[1]) + v139.f32[2]) + v139.f32[3]) + v138.f32[0])
                                                                                                 + v138.f32[1])
                                                                                         + v138.f32[2])
                                                                                 + v138.f32[3])
                                                                         + v141.f32[0])
                                                                 + v141.f32[1])
                                                         + v141.f32[2])
                                                 + v141.f32[3])
                                         + v140.f32[0])
                                 + v140.f32[1])
                         + v140.f32[2])
                 + v140.f32[3];
            v133 -= 2;
            v132 += 4;
            v131 -= 16;
          }
          while (v131);
          v129 = v122 | 1;
          v130 = v114 - v122;
          if (v117 - 1 != v122)
            goto LABEL_69;
LABEL_71:
          v148 = *(float *)&a5 + v128;
          a4[v8] = v148;
          v149 = 0.0;
          if (v118)
          {
            if (v119 >= 9)
            {
              v152 = (v119 - 1) & 0xFFFFFFFFFFFFFFF8;
              v153 = (float32x4_t *)((char *)this + 392);
              v154 = (int32x4_t *)v126;
              do
              {
                v155 = *v153;
                v156 = v153[1];
                v153 += 2;
                v157 = (int8x16_t)vrev64q_s32(*v154);
                v158 = (int8x16_t)vrev64q_s32(v154[-1]);
                v159 = vmulq_f32(v155, (float32x4_t)vextq_s8(v157, v157, 8uLL));
                v160 = vmulq_f32(v156, (float32x4_t)vextq_s8(v158, v158, 8uLL));
                v149 = (float)((float)((float)((float)((float)((float)((float)(v149 + v159.f32[0]) + v159.f32[1])
                                                             + v159.f32[2])
                                                     + v159.f32[3])
                                             + v160.f32[0])
                                     + v160.f32[1])
                             + v160.f32[2])
                     + v160.f32[3];
                v154 -= 2;
                v152 -= 8;
              }
              while (v152);
              v150 = v123 | 1;
              v151 = v118 - v123;
              if (v119 - 1 == v123)
                goto LABEL_63;
            }
            else
            {
              v150 = 1;
              v151 = v118;
            }
            v161 = v119 - v150;
            v162 = (float *)((char *)this + 4 * v150 + 388);
            v163 = &v127[v151];
            do
            {
              v164 = *v162++;
              v165 = v164;
              v166 = *v163--;
              v149 = v149 + (float)(v165 * v166);
              --v161;
            }
            while (v161);
          }
LABEL_63:
          *(float *)&a5 = v148 - v149;
          a4[v8++] = *(float *)&a5;
          ++v121;
          ++v124;
          ++v125;
          ++v126;
          ++v127;
          if (v121 == v120)
          {
            v115 = a3;
            goto LABEL_102;
          }
        }
        v129 = 1;
        v130 = v114;
LABEL_69:
        v142 = v117 - v129;
        v143 = &v116[v129];
        v144 = &v125[v130];
        do
        {
          v145 = *v143++;
          v146 = v145;
          v147 = *v144--;
          v128 = v128 + (float)(v146 * (float)v147);
          --v142;
        }
        while (v142);
        goto LABEL_71;
      }
      if (v118)
      {
        v167 = 0;
        v168 = (v119 - 1) & 0xFFFFFFFFFFFFFFF8;
        v169 = &a4[v118 - 4];
        v170 = a4 - 1;
        while (1)
        {
          LOWORD(a5) = a2[v8];
          *(_QWORD *)&a5 = vmovl_s16(*(int16x4_t *)&a5).u64[0];
          v171 = 0.0;
          *(float *)&a5 = (float)(*v116 * (float)SLODWORD(a5)) + 0.0;
          a4[v8] = *(float *)&a5;
          if (v119 >= 9)
          {
            v174 = (v119 - 1) & 0xFFFFFFFFFFFFFFF8;
            v175 = (float32x4_t *)((char *)this + 392);
            v176 = (int32x4_t *)v169;
            do
            {
              v177 = *v175;
              v178 = v175[1];
              v175 += 2;
              v179 = (int8x16_t)vrev64q_s32(*v176);
              v180 = (int8x16_t)vrev64q_s32(v176[-1]);
              v181 = vmulq_f32(v177, (float32x4_t)vextq_s8(v179, v179, 8uLL));
              v182 = vmulq_f32(v178, (float32x4_t)vextq_s8(v180, v180, 8uLL));
              v171 = (float)((float)((float)((float)((float)((float)((float)(v171 + v181.f32[0]) + v181.f32[1])
                                                           + v181.f32[2])
                                                   + v181.f32[3])
                                           + v182.f32[0])
                                   + v182.f32[1])
                           + v182.f32[2])
                   + v182.f32[3];
              v176 -= 2;
              v174 -= 8;
            }
            while (v174);
            v172 = v168 | 1;
            v173 = v118 - v168;
            if (v119 - 1 == v168)
              goto LABEL_84;
          }
          else
          {
            v172 = 1;
            v173 = v118;
          }
          v183 = v119 - v172;
          v184 = (float *)((char *)this + 4 * v172 + 388);
          v185 = &v170[v173];
          do
          {
            v186 = *v184++;
            v187 = v186;
            v188 = *v185--;
            v171 = v171 + (float)(v187 * v188);
            --v183;
          }
          while (v183);
LABEL_84:
          *(float *)&a5 = *(float *)&a5 - v171;
          a4[v8++] = *(float *)&a5;
          ++v167;
          ++v169;
          ++v170;
          if (v167 == v120)
            goto LABEL_101;
        }
      }
      if (v120 < 0x10)
        goto LABEL_99;
      v189 = &a4[v8];
      if (v189 < (float *)this + 73 && v116 < &a4[a3])
        goto LABEL_99;
      v190 = vld1q_dup_f32(v116);
      v191 = v8 + (v120 & 0xFFFFFFFFFFFFFFF0);
      v192 = (int16x8_t *)&a2[v8 + 8];
      v193 = (float32x4_t *)(v189 + 8);
      v194 = v120 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        v195 = v192[-1];
        v196 = vmulq_f32(v190, vcvtq_f32_s32(vmovl_high_s16(*v192)));
        v197 = vaddq_f32(vmulq_f32(v190, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v192->i8))), (float32x4_t)0);
        v193[-2] = vaddq_f32(vmulq_f32(v190, vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v195.i8))), (float32x4_t)0);
        v193[-1] = vaddq_f32(vmulq_f32(v190, vcvtq_f32_s32(vmovl_high_s16(v195))), (float32x4_t)0);
        *v193 = v197;
        v193[1] = vaddq_f32(v196, (float32x4_t)0);
        v193 += 4;
        v192 += 2;
        v194 -= 16;
      }
      while (v194);
      v8 = v191;
      if (v120 != (v120 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_99:
        v198 = a3 - v8;
        v199 = &a4[v8];
        v200 = &a2[v8];
        do
        {
          v201 = *v200++;
          *v199++ = (float)(*v116 * (float)v201) + 0.0;
          --v198;
        }
        while (v198);
      }
LABEL_101:
      v114 = 0;
LABEL_102:
      memcpy(this, &a2[v115 - v114], 2 * v114);
      memcpy((char *)this + 96, &a4[v115 - *((_QWORD *)this + 62)], 4 * *((_QWORD *)this + 62));
    }
    return 0;
  }
  return result;
}

uint64_t cricket::StringToProto(char *a1, uint64_t a2)
{
  int v2;
  char v3;
  int v4;
  int v5;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;

  if (a2 == 6)
  {
    v7 = *a1;
    if (v7 == 115)
      goto LABEL_40;
    if ((v7 - 65) < 0x1A)
      LOBYTE(v7) = v7 + 32;
    if (v7 == 115)
    {
LABEL_40:
      v8 = a1[1];
      if (v8 == 115)
        goto LABEL_72;
      if ((v8 - 65) < 0x1A)
        LOBYTE(v8) = v8 + 32;
      if (v8 == 115)
      {
LABEL_72:
        v9 = a1[2];
        if (v9 == 108)
          goto LABEL_73;
        if ((v9 - 65) < 0x1A)
          LOBYTE(v9) = v9 + 32;
        if (v9 == 108)
        {
LABEL_73:
          v10 = a1[3];
          if (v10 == 116)
            goto LABEL_74;
          if ((v10 - 65) < 0x1A)
            LOBYTE(v10) = v10 + 32;
          if (v10 == 116)
          {
LABEL_74:
            v11 = a1[4];
            if (v11 == 99)
              goto LABEL_75;
            if ((v11 - 65) < 0x1A)
              LOBYTE(v11) = v11 + 32;
            if (v11 == 99)
            {
LABEL_75:
              v12 = 0x100000002;
              v13 = a1[5];
              if (v13 == 112)
                return v12;
              if ((v13 - 65) < 0x1A)
                LOBYTE(v13) = v13 + 32;
              if (v13 == 112)
                return v12;
            }
          }
        }
      }
    }
  }
  else if (a2 == 3)
  {
    v2 = *a1;
    if (v2 == 117 || ((v2 - 65) >= 0x1A ? (v3 = *a1) : (v3 = v2 + 32), v3 == 117))
    {
      v4 = a1[1];
      if (v4 == 100)
        goto LABEL_12;
      if ((v4 - 65) < 0x1A)
        LOBYTE(v4) = v4 + 32;
      if (v4 == 100)
      {
LABEL_12:
        v5 = a1[2];
        if (v5 == 112)
          return 0x100000000;
        if ((v5 - 65) < 0x1A)
          LOBYTE(v5) = v5 + 32;
        if (v5 == 112)
          return 0x100000000;
      }
    }
    if (v2 == 116)
      goto LABEL_53;
    if ((v2 - 65) < 0x1A)
      LOBYTE(v2) = v2 + 32;
    if (v2 == 116)
    {
LABEL_53:
      v14 = a1[1];
      if (v14 == 99)
        goto LABEL_76;
      if ((v14 - 65) < 0x1A)
        LOBYTE(v14) = v14 + 32;
      if (v14 == 99)
      {
LABEL_76:
        v15 = a1[2];
        if (v15 == 112)
          return 0x100000001;
        if ((v15 - 65) < 0x1A)
          LOBYTE(v15) = v15 + 32;
        if (v15 == 112)
          return 0x100000001;
      }
    }
    v16 = *a1;
    if (v16 == 116)
      goto LABEL_66;
    if ((v16 - 65) < 0x1A)
      LOBYTE(v16) = v16 + 32;
    if (v16 == 116)
    {
LABEL_66:
      v17 = a1[1];
      if (v17 == 108)
        goto LABEL_77;
      if ((v17 - 65) < 0x1A)
        LOBYTE(v17) = v17 + 32;
      if (v17 == 108)
      {
LABEL_77:
        v18 = a1[2];
        if (v18 == 115)
          return 0x100000003;
        if ((v18 - 65) < 0x1A)
          LOBYTE(v18) = v18 + 32;
        if (v18 == 115)
          return 0x100000003;
      }
    }
  }
  return 0;
}

uint64_t cricket::Port::Port(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, __int16 a6, __int16 a7, int a8, void **__src, size_t __len, void **a11, size_t a12, uint64_t a13, char a14)
{
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  void **v22;
  void **v23;
  void **v24;
  size_t v25;
  size_t v26;
  void **v27;
  void **v28;
  void **v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::string *v47;
  const rtc::Network *v48;
  uint64_t v49;
  void *__p[2];
  uint64_t v51;

  v19 = a13;
  *(_QWORD *)(a1 + 16) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 24) = a1 + 24;
  *(_QWORD *)(a1 + 32) = a1 + 24;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a1 + 24;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 72) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 80) = a1 + 80;
  *(_QWORD *)(a1 + 88) = a1 + 80;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a1 + 80;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 128) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 136) = a1 + 136;
  *(_QWORD *)(a1 + 144) = a1 + 136;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 136;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 184) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 192) = a1 + 192;
  *(_QWORD *)(a1 + 200) = a1 + 192;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = a1 + 192;
  *(_BYTE *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(_QWORD *)(a1 + 248) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 232) = &unk_24C0BAAE8;
  v20 = a1 + 232;
  *(_QWORD *)(a1 + 256) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 264) = a1 + 272;
  *(_QWORD *)a1 = off_24C0BA970;
  *(_QWORD *)(a1 + 8) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 288) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 296) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 304) = a1 + 304;
  *(_QWORD *)(a1 + 312) = a1 + 304;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 304;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 352) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 360) = a1 + 360;
  *(_QWORD *)(a1 + 368) = a1 + 360;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = a1 + 360;
  *(_BYTE *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 408) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 416) = a1 + 416;
  *(_QWORD *)(a1 + 424) = a1 + 416;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = a1 + 416;
  *(_BYTE *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  *(_QWORD *)(a1 + 464) = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  *(_QWORD *)(a1 + 472) = a1 + 472;
  *(_QWORD *)(a1 + 480) = a1 + 472;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = a1 + 472;
  *(_BYTE *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = a2;
  *(_QWORD *)(a1 + 520) = a4;
  if (a13)
  {
    v21 = 0;
  }
  else
  {
    v21 = (_OWORD *)operator new();
    *v21 = 0u;
    v21[1] = 0u;
    *(_QWORD *)v21 = &unk_24C0B3F60;
    v19 = (uint64_t)v21;
  }
  *(_QWORD *)(a1 + 528) = v21;
  *(_QWORD *)(a1 + 536) = v19;
  *(_DWORD *)(a1 + 544) = a3;
  *(_BYTE *)(a1 + 548) = 0;
  *(_QWORD *)(a1 + 552) = a5;
  *(_WORD *)(a1 + 560) = a6;
  *(_WORD *)(a1 + 562) = a7;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = 1;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_40;
  v22 = (void **)(a1 + 600);
  if (__len > 0x16)
  {
    v25 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v25 = __len | 7;
    v26 = v25 + 1;
    v23 = (void **)operator new(v25 + 1);
    *(_QWORD *)(a1 + 600) = v23;
    *(_QWORD *)(a1 + 616) = v26 | 0x8000000000000000;
    *(_QWORD *)(a1 + 608) = __len;
    v24 = (void **)((char *)v23 + __len);
    if (v23 > __src)
      goto LABEL_12;
  }
  else
  {
    *(_BYTE *)(a1 + 623) = __len;
    v23 = (void **)(a1 + 600);
    v24 = (void **)((char *)v22 + __len);
    if (v22 > __src)
      goto LABEL_12;
  }
  if (v24 > __src)
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
LABEL_12:
  if (__len)
    memmove(v23, __src, __len);
  *(_BYTE *)v24 = 0;
  if (a12 > 0x7FFFFFFFFFFFFFF7)
LABEL_40:
    abort();
  v27 = (void **)(a1 + 624);
  if (a12 <= 0x16)
  {
    *(_BYTE *)(a1 + 647) = a12;
    v28 = (void **)(a1 + 624);
    v29 = (void **)((char *)v27 + a12);
    if (v27 > a11)
      goto LABEL_22;
    goto LABEL_21;
  }
  v30 = (a12 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a12 | 7) != 0x17)
    v30 = a12 | 7;
  v31 = v30 + 1;
  v28 = (void **)operator new(v30 + 1);
  *(_QWORD *)(a1 + 624) = v28;
  *(_QWORD *)(a1 + 640) = v31 | 0x8000000000000000;
  *(_QWORD *)(a1 + 632) = a12;
  v29 = (void **)((char *)v28 + a12);
  if (v28 <= a11)
  {
LABEL_21:
    if (v29 <= a11)
      goto LABEL_22;
    goto LABEL_39;
  }
LABEL_22:
  if (a12)
    memmove(v28, a11, a12);
  *(_BYTE *)v29 = 0;
  *(_QWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_QWORD *)(a1 + 672) = a1 + 680;
  *(_DWORD *)(a1 + 696) = 44750;
  *(_BYTE *)(a1 + 700) = 0;
  *(_DWORD *)(a1 + 704) = 2;
  *(_QWORD *)(a1 + 712) = 0;
  *(_BYTE *)(a1 + 720) = a14;
  *(_WORD *)(a1 + 722) = (unsigned __int16)rtc::Network::GetCost(a5, *(_QWORD *)(a1 + 536));
  *(_OWORD *)(a1 + 724) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 784) = a1;
  if (*(char *)(a1 + 623) < 0)
  {
    if (*(_QWORD *)(a1 + 608))
      goto LABEL_35;
  }
  else if (*(_BYTE *)(a1 + 623))
  {
    goto LABEL_35;
  }
  __p[0] = 0;
  __p[1] = 0;
  v51 = 0;
    goto LABEL_41;
  if (*(char *)(a1 + 623) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 616) = v51;
  __p[0] = 0;
  __p[1] = 0;
  v51 = 0;
  {
LABEL_41:
    v47 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/helpers.cc", 130, "CreateRandomString(len, &str)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v32, v33, v34, v35, v49);
    return cricket::Port::OnNetworkTypeChanged((cricket::Port *)v47, v48);
  }
  if (*(char *)(a1 + 647) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 640) = v51;
LABEL_35:
  v36 = *(_QWORD *)(a1 + 552);
  v37 = operator new(0x30uLL);
  v37[2] = sigslot::_opaque_connection::emitter<cricket::Port,rtc::Network const*>;
  v37[3] = v20;
  v37[4] = cricket::Port::OnNetworkTypeChanged;
  v37[5] = 0;
  v38 = *(_QWORD *)(v36 + 16);
  *v37 = v38;
  v37[1] = v36 + 16;
  *(_QWORD *)(v38 + 8) = v37;
  *(_QWORD *)(v36 + 16) = v37;
  ++*(_QWORD *)(v36 + 32);
  (*(void (**)(uint64_t, uint64_t))(a1 + 240))(v20, v36);
  cricket::Port::PostDestroyIfDead((cricket::Port *)a1, 1);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 176))(__p, a1);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v39, v40, v41, v42, v43, v44, v45, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc");
    if (SHIBYTE(v51) < 0)
      operator delete(__p[0]);
  }
  return a1;
}

uint64_t cricket::Port::OnNetworkTypeChanged(cricket::Port *this, const rtc::Network *a2)
{
  return (*(uint64_t (**)(cricket::Port *))(*(_QWORD *)this + 264))(this);
}

uint64_t cricket::Port::PostDestroyIfDead(cricket::Port *this, int a2)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char v23;
  char v24;
  _QWORD v25[2];
  uint64_t (*v26)(uint64_t, _QWORD **, _QWORD *);
  uint64_t (*v27)(uint64_t);

  v4 = *((_QWORD *)this + 97);
  if (v4 && (v5 = atomic_load((unsigned int *)(v4 + 4)), v5 != 1))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 97);
    if (!v6)
    {
      v15 = *((_QWORD *)this + 98);
      goto LABEL_20;
    }
  }
  else
  {
    v6 = (_QWORD *)operator new();
    *v6 = 1;
    v7 = (unsigned int *)v6 + 1;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = *((_QWORD *)this + 97);
    if (v9)
    {
      v10 = (unsigned int *)(v9 + 4);
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
        MEMORY[0x20BD0ADEC]();
    }
    *((_QWORD *)this + 97) = v6;
  }
  v13 = (unsigned int *)v6 + 1;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = *((_QWORD *)this + 98);
  do
    v16 = __ldxr(v13);
  while (__stxr(v16 + 1, v13));
  do
  {
    v17 = __ldaxr(v13);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v13));
  if (!v18)
    MEMORY[0x20BD0ADEC](v6, 0x1000C404A09149ALL);
LABEL_20:
  v19 = *((_QWORD *)this + 64);
  v20 = (_QWORD *)operator new();
  *v20 = v6;
  v20[1] = v15;
  if (a2)
  {
    v21 = 1000 * *((int *)this + 174);
    v25[0] = v20;
    v26 = absl::internal_any_invocable::RemoteManagerNontrivial<cricket::Port::PostDestroyIfDead(BOOL)::$_0>;
    v27 = absl::internal_any_invocable::RemoteInvoker<false,void,cricket::Port::PostDestroyIfDead(BOOL)::$_0 &&>;
    v24 = 0;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v19 + 16))(v19, v25, v21, &v24, &v23);
  }
  else
  {
    v25[0] = v20;
    v26 = absl::internal_any_invocable::RemoteManagerNontrivial<cricket::Port::PostDestroyIfDead(BOOL)::$_0>;
    v27 = absl::internal_any_invocable::RemoteInvoker<false,void,cricket::Port::PostDestroyIfDead(BOOL)::$_0 &&>;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v19 + 8))(v19, v25, &v24, &v23);
  }
  return v26(1, (_QWORD **)v25, v25);
}

void cricket::Port::~Port(cricket::Port *this)
{
  char *v2;
  char *v3;
  _QWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t i;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t k;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t m;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  uint64_t v43;

  *(_QWORD *)this = off_24C0BA970;
  *((_QWORD *)this + 29) = &unk_24C0BAAE8;
  v2 = (char *)this + 232;
  v3 = (char *)this + 672;
  v4 = (_QWORD *)*((_QWORD *)this + 84);
  v5 = (_OWORD *)((char *)this + 680);
  if (v4 != (_QWORD *)((char *)this + 680))
  {
    do
    {
      cricket::Connection::Shutdown((cricket::Connection *)v4[13]);
      v17 = v4[13];
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v18 = (_QWORD *)v4[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v4[2];
          v20 = *v19 == (_QWORD)v4;
          v4 = v19;
        }
        while (!v20);
      }
      v4 = v19;
    }
    while (v19 != (_QWORD *)v5);
  }
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)v3, *((char **)this + 85));
  *((_QWORD *)this + 84) = v5;
  *v5 = 0u;
  v10 = (_BYTE *)*((_QWORD *)this + 97);
  if (v10)
  {
    *v10 = 0;
    v11 = (unsigned int *)(v10 + 4);
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      MEMORY[0x20BD0ADEC]();
    *((_QWORD *)this + 97) = 0;
  }
  *((_QWORD *)this + 98) = 0;
  if (*((_BYTE *)this + 768))
  {
    v42 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 21, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v6, v7, v8, v9, v43);
    cricket::Port::~Port((cricket::Port *)v42);
  }
  v14 = *((_QWORD *)this + 93);
  if (v14)
  {
    v15 = *((_QWORD *)this + 94);
    v16 = (void *)*((_QWORD *)this + 93);
    if (v15 != v14)
    {
      do
      {
        v21 = *(void (**)(uint64_t))(v15 - 8);
        if (v21)
          v21(v15 - 48);
        v15 -= 56;
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 93);
    }
    *((_QWORD *)this + 94) = v14;
    operator delete(v16);
  }
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)v3, *((char **)this + 85));
  v22 = *((_QWORD *)this + 81);
  if (v22)
  {
    v23 = *((_QWORD *)this + 82);
    v24 = (void *)*((_QWORD *)this + 81);
    if (v23 != v22)
    {
      do
        cricket::Candidate::~Candidate((void **)(v23 - 432));
      while (v23 != v22);
      v24 = (void *)*((_QWORD *)this + 81);
    }
    *((_QWORD *)this + 82) = v22;
    operator delete(v24);
  }
  if (*((char *)this + 647) < 0)
  {
    operator delete(*((void **)this + 78));
    if ((*((char *)this + 623) & 0x80000000) == 0)
    {
LABEL_33:
      if ((*((char *)this + 591) & 0x80000000) == 0)
        goto LABEL_34;
      goto LABEL_47;
    }
  }
  else if ((*((char *)this + 623) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(*((void **)this + 75));
  if ((*((char *)this + 591) & 0x80000000) == 0)
  {
LABEL_34:
    v25 = *((_QWORD *)this + 66);
    *((_QWORD *)this + 66) = 0;
    if (!v25)
      goto LABEL_36;
    goto LABEL_35;
  }
LABEL_47:
  operator delete(*((void **)this + 71));
  v25 = *((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v25)
LABEL_35:
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
LABEL_36:
  for (i = *((_QWORD *)this + 61); i; i = *((_QWORD *)this + 61))
  {
    v27 = (uint64_t *)*((_QWORD *)this + 60);
    v28 = v27[3];
    v29 = *v27;
    *(_QWORD *)(v29 + 8) = v27[1];
    *(_QWORD *)v27[1] = v29;
    *((_QWORD *)this + 61) = i - 1;
    operator delete(v27);
    (*(void (**)(uint64_t, char *))(v28 + 16))(v28, (char *)this + 456);
  }
  *((_QWORD *)this + 62) = (char *)this + 472;
  for (j = *((_QWORD *)this + 54); j; j = *((_QWORD *)this + 54))
  {
    v31 = (uint64_t *)*((_QWORD *)this + 53);
    v32 = v31[3];
    v33 = *v31;
    *(_QWORD *)(v33 + 8) = v31[1];
    *(_QWORD *)v31[1] = v33;
    *((_QWORD *)this + 54) = j - 1;
    operator delete(v31);
    (*(void (**)(uint64_t, char *))(v32 + 16))(v32, (char *)this + 400);
  }
  *((_QWORD *)this + 55) = (char *)this + 416;
  for (k = *((_QWORD *)this + 47); k; k = *((_QWORD *)this + 47))
  {
    v35 = (uint64_t *)*((_QWORD *)this + 46);
    v36 = v35[3];
    v37 = *v35;
    *(_QWORD *)(v37 + 8) = v35[1];
    *(_QWORD *)v35[1] = v37;
    *((_QWORD *)this + 47) = k - 1;
    operator delete(v35);
    (*(void (**)(uint64_t, char *))(v36 + 16))(v36, (char *)this + 344);
  }
  *((_QWORD *)this + 48) = (char *)this + 360;
  for (m = *((_QWORD *)this + 40); m; m = *((_QWORD *)this + 40))
  {
    v39 = (uint64_t *)*((_QWORD *)this + 39);
    v40 = v39[3];
    v41 = *v39;
    *(_QWORD *)(v41 + 8) = v39[1];
    *(_QWORD *)v39[1] = v41;
    *((_QWORD *)this + 40) = m - 1;
    operator delete(v39);
    (*(void (**)(uint64_t, char *))(v40 + 16))(v40, (char *)this + 288);
  }
  *((_QWORD *)this + 41) = (char *)this + 304;
  *((_QWORD *)this + 29) = &unk_24C0ACE30;
  (*((void (**)(char *))this + 32))(v2);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 264, *((_QWORD **)this + 34));
  cricket::PortInterface::~PortInterface(this);
}

uint64_t cricket::Port::Type(cricket::Port *this)
{
  return *((unsigned int *)this + 136);
}

uint64_t cricket::Port::Network(cricket::Port *this)
{
  return *((_QWORD *)this + 69);
}

uint64_t cricket::Port::GetIceRole(cricket::Port *this)
{
  return *((unsigned int *)this + 176);
}

uint64_t cricket::Port::SetIceRole(uint64_t result, int a2)
{
  *(_DWORD *)(result + 704) = a2;
  return result;
}

uint64_t cricket::Port::SetIceTiebreaker(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 712) = a2;
  return this;
}

uint64_t cricket::Port::IceTiebreaker(cricket::Port *this)
{
  return *((_QWORD *)this + 89);
}

uint64_t cricket::Port::SharedSocket(cricket::Port *this)
{
  return *((unsigned __int8 *)this + 720);
}

void cricket::Port::SetIceParameters(uint64_t a1, int a2, __int128 *__src, size_t __len, __int128 *a5, size_t a6)
{
  __int128 *v12;
  size_t v13;
  size_t v14;
  __int128 *v15;
  void **v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  BOOL v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  char v32;
  BOOL v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 v38;
  unint64_t v39;

  *(_DWORD *)(a1 + 592) = a2;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_67;
  if (__len > 0x16)
  {
    v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v13 = __len | 7;
    v14 = v13 + 1;
    v12 = (__int128 *)operator new(v13 + 1);
    *((_QWORD *)&v38 + 1) = __len;
    v39 = v14 | 0x8000000000000000;
    *(_QWORD *)&v38 = v12;
  }
  else
  {
    HIBYTE(v39) = __len;
    v12 = &v38;
  }
  v15 = (__int128 *)((char *)v12 + __len);
  if (v12 <= __src && v15 > __src)
    goto LABEL_66;
  if (__len)
    memmove(v12, __src, __len);
  *(_BYTE *)v15 = 0;
  v17 = (void **)(a1 + 600);
  if (*(char *)(a1 + 623) < 0)
    operator delete(*v17);
  *(_OWORD *)v17 = v38;
  *(_QWORD *)(a1 + 616) = v39;
  if (a6 > 0x7FFFFFFFFFFFFFF7)
LABEL_67:
    abort();
  if (a6 <= 0x16)
  {
    HIBYTE(v39) = a6;
    v18 = &v38;
    v19 = (__int128 *)((char *)&v38 + a6);
    if (&v38 > a5)
      goto LABEL_23;
    goto LABEL_22;
  }
  v20 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a6 | 7) != 0x17)
    v20 = a6 | 7;
  v21 = v20 + 1;
  v18 = (__int128 *)operator new(v20 + 1);
  *((_QWORD *)&v38 + 1) = a6;
  v39 = v21 | 0x8000000000000000;
  *(_QWORD *)&v38 = v18;
  v19 = (__int128 *)((char *)v18 + a6);
  if (v18 <= a5)
  {
LABEL_22:
    if (v19 <= a5)
      goto LABEL_23;
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
LABEL_23:
  if (a6)
    memmove(v18, a5, a6);
  *(_BYTE *)v19 = 0;
  v22 = (void **)(a1 + 624);
  if (*(char *)(a1 + 647) < 0)
    operator delete(*v22);
  *(_OWORD *)v22 = v38;
  *(_QWORD *)(a1 + 640) = v39;
  v23 = *(_QWORD *)(a1 + 648);
  v24 = *(_QWORD *)(a1 + 656);
  if (v23 != v24)
  {
    if (__src)
      v25 = 1;
    else
      v25 = __len == 0;
    v26 = v25;
    if (a5)
      v27 = 1;
    else
      v27 = a6 == 0;
    v28 = v27;
    do
    {
      *(_DWORD *)(v23 + 24) = a2;
      if ((v26 & 1) == 0)
        goto LABEL_66;
      std::string::__assign_external((std::string *)(v23 + 160), (const std::string::value_type *)__src, __len);
      if ((v28 & 1) == 0)
        goto LABEL_66;
      std::string::__assign_external((std::string *)(v23 + 184), (const std::string::value_type *)a5, a6);
      v23 += 432;
    }
    while (v23 != v24);
  }
  v29 = *(_QWORD **)(a1 + 672);
  v30 = (_QWORD *)(a1 + 680);
  if (v29 != v30)
  {
    if (__src)
      v31 = 1;
    else
      v31 = __len == 0;
    v32 = v31;
    if (a5)
      v33 = 1;
    else
      v33 = a6 == 0;
    v34 = v33;
    while (1)
    {
      v35 = v29[13];
      *(_DWORD *)(v35 + 288) = a2;
      if ((v32 & 1) == 0)
        break;
      std::string::__assign_external((std::string *)(v35 + 424), (const std::string::value_type *)__src, __len);
      if ((v34 & 1) == 0)
        break;
      std::string::__assign_external((std::string *)(v35 + 448), (const std::string::value_type *)a5, a6);
      v36 = (_QWORD *)v29[1];
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (_QWORD *)v29[2];
          v25 = *v37 == (_QWORD)v29;
          v29 = v37;
        }
        while (!v25);
      }
      v29 = v37;
      if (v37 == v30)
        return;
    }
    goto LABEL_66;
  }
}

uint64_t cricket::Port::Candidates(cricket::Port *this)
{
  return (uint64_t)this + 648;
}

uint64_t cricket::Port::GetConnection(cricket::Port *this, const rtc::SocketAddress *__s2)
{
  _QWORD *v2;
  char *v4;
  char *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)*((_QWORD *)this + 85);
  if (!v2)
    return 0;
  v4 = (char *)this + 680;
  v5 = (char *)this + 680;
  do
  {
    v6 = rtc::SocketAddress::operator<((uint64_t)(v2 + 4), (char *)__s2);
    v7 = v2 + 1;
    if (!v6)
    {
      v7 = v2;
      v5 = (char *)v2;
    }
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v4 || (rtc::SocketAddress::operator<((uint64_t)__s2, v5 + 32) & 1) != 0)
    return 0;
  else
    return *((_QWORD *)v5 + 13);
}

void cricket::Port::AddAddress(uint64_t a1, __int128 *a2, const rtc::SocketAddress *a3, uint64_t a4, char *a5, size_t a6, const std::string::value_type *a7, std::string::size_type a8, const std::string::value_type *a9, std::string::size_type a10, int a11, int a12, int a13, const std::string::value_type *a14, std::string::size_type a15, unsigned __int8 a16)
{
  char *v21;
  size_t v22;
  char *__src;
  size_t v24;
  int v25;
  const rtc::IPAddress *v26;
  int *p_p;
  unint64_t v28;
  _BOOL4 v29;
  std::string::size_type v30;
  int v31;
  int v32;
  int v33;
  int v35;
  std::string::size_type size;
  uint64_t v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  char v40;
  const std::string::value_type *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  std::string *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t, std::string *);
  unsigned int *v58;
  unsigned int v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unsigned int *v69;
  unsigned int v70;
  char *v71;
  __int128 v72;
  _QWORD *v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  std::string v84;
  int v85;
  std::string v86;
  _DWORD v87[28];
  std::string v88;
  uint64_t v89;
  std::string v90;
  int v91;
  __int128 v92;
  __int16 v93;
  int v94;
  char v95;
  std::string v96[2];
  std::string v97;
  __int128 v98;
  std::string v99[18];
  unsigned __int8 v100;
  void *__p;
  unint64_t v102;
  std::string v103[18];
  unsigned __int8 v104;
  std::string v105;
  uint64_t v106;
  _BYTE v107[24];
  _BYTE *v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v21 = (char *)(a1 + 600);
  if (*(char *)(a1 + 623) < 0)
  {
    v22 = *(_QWORD *)(a1 + 608);
    if ((v22 & 0x8000000000000000) != 0)
      goto LABEL_115;
    v21 = *(char **)v21;
    if (v22)
    {
      if (!v21)
        goto LABEL_115;
    }
  }
  else
  {
    v22 = *(unsigned __int8 *)(a1 + 623);
  }
  __src = (char *)(a1 + 624);
  if (*(char *)(a1 + 647) < 0)
  {
    v24 = *(_QWORD *)(a1 + 632);
    if ((v24 & 0x8000000000000000) != 0)
      goto LABEL_115;
    __src = *(char **)__src;
    if (v24)
    {
      if (!__src)
        goto LABEL_115;
    }
  }
  else
  {
    v24 = *(unsigned __int8 *)(a1 + 647);
  }
  cricket::Candidate::Candidate((uint64_t)&v84, *(_DWORD *)(a1 + 592), a5, a6, a2, 0, v21, v22, __src, v24, a11, *(_DWORD *)(a1 + 596), &byte_208EB9246, 0, *(_WORD *)(*(_QWORD *)(a1 + 552) + 286), *(_WORD *)(a1 + 722));
  if (!a7 && a8)
    goto LABEL_115;
  std::string::__assign_external(&v86, a7, a8);
  cricket::Candidate::ComputeFoundation((cricket::Candidate *)&v84, a3, *(_QWORD *)(a1 + 712));
  v25 = *(_DWORD *)(*(_QWORD *)(a1 + 552) + 280);
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**(_QWORD **)(a1 + 536) + 16))(&__p, *(_QWORD *)(a1 + 536), "WebRTC-IncreaseIceCandidatePriorityHostSrflx", 44);
  if (v103[0].__r_.__value_.__s.__data_[7] < 0)
  {
    v28 = v102;
    if ((v102 & 0x8000000000000000) != 0)
      goto LABEL_115;
    p_p = (int *)__p;
    if (v102)
    {
      if (!__p)
        goto LABEL_115;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v28 = v103[0].__r_.__value_.__s.__data_[7];
  }
  if (v28 < 7)
  {
    v29 = 0;
    v30 = a10;
    v31 = a13;
    if ((v103[0].__r_.__value_.__s.__data_[7] & 0x80) == 0)
      goto LABEL_29;
    goto LABEL_28;
  }
  v32 = *p_p;
  v33 = *(int *)((char *)p_p + 3);
  v29 = v32 == 1650552389 && v33 == 1684368482;
  v30 = a10;
  v31 = a13;
  if (v103[0].__r_.__value_.__s.__data_[7] < 0)
LABEL_28:
    operator delete(__p);
LABEL_29:
  v35 = (rtc::IPAddressPrecedence((rtc *)v87, v26) | (v25 << 8)) + v31;
  if (v29)
  {
    size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
    if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v86.__r_.__value_.__l.__size_;
    if (!size)
      v35 += 32;
  }
  v87[12] = (v35 << 8) | (a12 << 24) | (256 - v85);
  if (!a9 && v30)
    goto LABEL_115;
  std::string::__assign_external(v96, a9, v30);
  v37 = *(_QWORD *)(a1 + 552);
  v38 = (const std::string::value_type *)(v37 + 128);
  if (*(char *)(v37 + 151) < 0)
  {
    v39 = *(_QWORD *)(v37 + 136);
    if ((v39 & 0x8000000000000000) != 0)
      goto LABEL_115;
    v38 = *(const std::string::value_type **)v38;
    if (v39)
    {
      if (!v38)
        goto LABEL_115;
    }
  }
  else
  {
    v39 = *(unsigned __int8 *)(v37 + 151);
  }
  std::string::__assign_external(&v88, v38, v39);
  v89 = *(_QWORD *)(*(_QWORD *)(a1 + 552) + 272);
  if (!a14 && a15)
    goto LABEL_115;
  std::string::__assign_external(&v97, a14, a15);
  if (&v90 != (std::string *)a4)
  {
    v40 = *(_BYTE *)(a4 + 23);
    if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v40 >= 0)
        v41 = (const std::string::value_type *)a4;
      else
        v41 = *(const std::string::value_type **)a4;
      if (v40 >= 0)
        v42 = *(unsigned __int8 *)(a4 + 23);
      else
        v42 = *(_QWORD *)(a4 + 8);
      std::string::__assign_no_alias<false>(&v90, v41, v42);
    }
    else if ((*(_BYTE *)(a4 + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(&v90, *(char **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      v90 = *(std::string *)a4;
    }
  }
  v91 = *(_DWORD *)(a4 + 32);
  v92 = *(_OWORD *)(a4 + 36);
  v93 = *(_WORD *)(a4 + 56);
  v95 = *(_BYTE *)(a4 + 64);
  v94 = *(_DWORD *)(a4 + 60);
  v43 = *(_QWORD *)(*(_QWORD *)(a1 + 552) + 120);
  if (!v43 || !(*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43) || v87[26])
  {
    v53 = *(std::string **)(a1 + 656);
    if ((unint64_t)v53 >= *(_QWORD *)(a1 + 664))
    {
      *(_QWORD *)(a1 + 656) = std::vector<cricket::Candidate>::__push_back_slow_path<cricket::Candidate>((std::string **)(a1 + 648), &v84);
      v54 = a1 + 304;
      v55 = *(_QWORD *)(a1 + 312);
      *(_QWORD *)(a1 + 328) = v55;
      if (v55 == a1 + 304)
      {
LABEL_74:
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 344))(a1, a16);
        goto LABEL_113;
      }
      do
      {
LABEL_73:
        v57 = *(void (**)(uint64_t, uint64_t, std::string *))(v55 + 16);
        v56 = v55 + 16;
        *(_QWORD *)(a1 + 328) = *(_QWORD *)(v56 - 8);
        v57(v56, a1, &v84);
        v55 = *(_QWORD *)(a1 + 328);
      }
      while (v55 != v54);
      goto LABEL_74;
    }
    if (v53)
    {
      *(_QWORD *)(a1 + 656) = cricket::Candidate::Candidate(v53, &v84) + 18;
      v54 = a1 + 304;
      v55 = *(_QWORD *)(a1 + 312);
      *(_QWORD *)(a1 + 328) = v55;
      if (v55 == a1 + 304)
        goto LABEL_74;
      goto LABEL_73;
    }
LABEL_115:
    __break(1u);
  }
  cricket::Candidate::Candidate(&v105, &v84);
  v44 = *(_QWORD *)(a1 + 776);
  if (v44 && (v45 = atomic_load((unsigned int *)(v44 + 4)), v45 != 1))
  {
    v46 = *(unsigned int **)(a1 + 776);
    if (!v46)
    {
      v60 = *(_QWORD *)(a1 + 784);
      __p = 0;
      v65 = 1;
      goto LABEL_86;
    }
  }
  else
  {
    v46 = (unsigned int *)operator new();
    *(_QWORD *)v46 = 1;
    v47 = v46 + 1;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v49 = *(_QWORD *)(a1 + 776);
    if (v49)
    {
      v50 = (unsigned int *)(v49 + 4);
      do
      {
        v51 = __ldaxr(v50);
        v52 = v51 - 1;
      }
      while (__stlxr(v52, v50));
      if (!v52)
        MEMORY[0x20BD0ADEC]();
    }
    *(_QWORD *)(a1 + 776) = v46;
  }
  v58 = v46 + 1;
  do
    v59 = __ldxr(v58);
  while (__stxr(v59 + 1, v58));
  v60 = *(_QWORD *)(a1 + 784);
  do
    v61 = __ldxr(v58);
  while (__stxr(v61 + 1, v58));
  do
  {
    v62 = __ldaxr(v58);
    v63 = v62 - 1;
  }
  while (__stlxr(v63, v58));
  if (!v63)
    MEMORY[0x20BD0ADEC](v46, 0x1000C404A09149ALL);
  __p = v46;
  do
    v64 = __ldxr(v58);
  while (__stxr(v64 + 1, v58));
  v65 = 0;
LABEL_86:
  v102 = v60;
  cricket::Candidate::Candidate(v103, &v105);
  v104 = a16;
  *(_DWORD *)(a1 + 736) = 1;
  v66 = *(_QWORD *)(*(_QWORD *)(a1 + 552) + 120);
  if (v66)
  {
    v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
    v68 = (char *)__p;
    *(_QWORD *)&v98 = __p;
    if (!__p)
      goto LABEL_92;
  }
  else
  {
    v67 = 0;
    v68 = (char *)__p;
    *(_QWORD *)&v98 = __p;
    if (!__p)
      goto LABEL_92;
  }
  v69 = (unsigned int *)(v68 + 4);
  do
    v70 = __ldxr(v69);
  while (__stxr(v70 + 1, v69));
LABEL_92:
  *((_QWORD *)&v98 + 1) = v102;
  cricket::Candidate::Candidate(v99, v103);
  v100 = v104;
  v71 = (char *)operator new(0x1D0uLL);
  *(_QWORD *)v71 = &off_24C0BAB08;
  v72 = v98;
  *(_QWORD *)&v98 = 0;
  *(_OWORD *)(v71 + 8) = v72;
  cricket::Candidate::Candidate((std::string *)v71 + 1, v99);
  v71[456] = v100;
  v108 = v71;
  (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v67 + 16))(v67, &v106, v107);
  v73 = v108;
  if (v108 == v107)
  {
    v74 = 4;
    v73 = v107;
  }
  else
  {
    if (!v108)
      goto LABEL_97;
    v74 = 5;
  }
  (*(void (**)(void))(*v73 + 8 * v74))();
LABEL_97:
  cricket::Candidate::~Candidate((void **)&v99[0].__r_.__value_.__l.__data_);
  if ((_QWORD)v98)
  {
    v75 = (unsigned int *)(v98 + 4);
    do
    {
      v76 = __ldaxr(v75);
      v77 = v76 - 1;
    }
    while (__stlxr(v77, v75));
    if (!v77)
      MEMORY[0x20BD0ADEC]();
  }
  cricket::Candidate::~Candidate((void **)&v103[0].__r_.__value_.__l.__data_);
  if (__p)
  {
    v78 = (unsigned int *)((char *)__p + 4);
    do
    {
      v79 = __ldaxr(v78);
      v80 = v79 - 1;
    }
    while (__stlxr(v80, v78));
    if (!v80)
      MEMORY[0x20BD0ADEC]();
  }
  if ((v65 & 1) == 0)
  {
    v81 = v46 + 1;
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while (__stlxr(v83, v81));
    if (!v83)
      MEMORY[0x20BD0ADEC](v46, 0x1000C404A09149ALL);
  }
  cricket::Candidate::~Candidate((void **)&v105.__r_.__value_.__l.__data_);
LABEL_113:
  cricket::Candidate::~Candidate((void **)&v84.__r_.__value_.__l.__data_);
}

uint64_t cricket::Port::PostAddAddress(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  if (a2)
  {
    v2 = this;
    v3 = this + 416;
    this = *(_QWORD *)(this + 424);
    for (*(_QWORD *)(v2 + 440) = this; this != v3; this = *(_QWORD *)(v2 + 440))
    {
      v5 = *(void (**)(uint64_t, uint64_t))(this + 16);
      v4 = this + 16;
      *(_QWORD *)(v2 + 440) = *(_QWORD *)(v4 - 8);
      v5(v4, v2);
    }
  }
  return this;
}

void cricket::Port::AddOrReplaceConnection(cricket::Port *this, cricket::Connection *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  void **v8;
  uint64_t v9;
  char *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  cricket::Candidate *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  cricket::Connection *v23;
  std::string v24;
  void *__p[2];
  uint64_t v26;
  void *v27;
  _BYTE v28[20];
  __int16 v29;
  int v30;
  char v31;
  cricket::Connection *v32;

  v4 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)a2 + 24))(a2);
  v5 = v4;
  __p[0] = 0;
  __p[1] = 0;
  v26 = 0;
  v27 = &unk_24C0ACDA0;
  memset(v28, 0, sizeof(v28));
  if (__p != (void **)(v4 + 80))
  {
    if (*(char *)(v4 + 103) < 0)
    {
      std::string::__assign_no_alias<true>(__p, *(char **)(v4 + 80), *(_QWORD *)(v4 + 88));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v4 + 80);
      v26 = *(_QWORD *)(v4 + 96);
    }
  }
  *(_DWORD *)v28 = *(_DWORD *)(v5 + 112);
  *(_OWORD *)&v28[4] = *(_OWORD *)(v5 + 116);
  v29 = *(_WORD *)(v5 + 136);
  v31 = *(_BYTE *)(v5 + 144);
  v30 = *(_DWORD *)(v5 + 140);
  v32 = a2;
  v6 = (void **)((char *)this + 680);
  v7 = (void *)*((_QWORD *)this + 85);
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v8 = (void **)v7;
        v9 = (uint64_t)v7 + 32;
        if (!rtc::SocketAddress::operator<((uint64_t)__p, (char *)v7 + 32))
          break;
        v7 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_15;
      }
      if (!rtc::SocketAddress::operator<(v9, (char *)__p))
        break;
      v6 = v8 + 1;
      v7 = v8[1];
      if (!v7)
        goto LABEL_15;
    }
    v10 = (char *)*v6;
    if (*v6)
    {
      v11 = 1;
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        goto LABEL_21;
      goto LABEL_23;
    }
  }
  else
  {
    v8 = (void **)((char *)this + 680);
  }
LABEL_15:
  v10 = (char *)operator new(0x70uLL);
  *((_QWORD *)v10 + 4) = 0;
  v12 = v10 + 32;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0;
  *((_QWORD *)v10 + 8) = 0;
  *((_QWORD *)v10 + 9) = 0;
  *((_QWORD *)v10 + 7) = &unk_24C0ACDA0;
  *((_DWORD *)v10 + 20) = 0;
  if (SHIBYTE(v26) < 0)
  {
    std::string::__assign_no_alias<true>(v12, (char *)__p[0], (size_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)__p;
    *((_QWORD *)v10 + 6) = v26;
  }
  *((_DWORD *)v10 + 16) = *(_DWORD *)v28;
  *(_OWORD *)(v10 + 68) = *(_OWORD *)&v28[4];
  *((_WORD *)v10 + 44) = v29;
  v10[96] = v31;
  *((_DWORD *)v10 + 23) = v30;
  *((_QWORD *)v10 + 13) = v32;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = v8;
  *v6 = v10;
  v13 = **((_QWORD **)this + 84);
  v14 = (uint64_t *)v10;
  if (v13)
  {
    *((_QWORD *)this + 84) = v13;
    v14 = (uint64_t *)*v6;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 85), v14);
  v11 = 0;
  ++*((_QWORD *)this + 86);
  if ((SHIBYTE(v26) & 0x80000000) == 0)
  {
LABEL_21:
    if (!v11)
      return;
    goto LABEL_24;
  }
LABEL_23:
  operator delete(__p[0]);
  if (!v11)
    return;
LABEL_24:
  if (*((cricket::Connection **)v10 + 13) == a2)
    return;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, cricket::Port *))(*(_QWORD *)this + 176))(__p, this);
    v15 = (cricket::Candidate *)(*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)a2 + 24))(a2);
    cricket::Candidate::ToStringInternal(v15, 1, &v24);
    rtc::webrtc_logging_impl::Log("\r\n\t\n", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc");
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v24.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        goto LABEL_28;
    }
    else if ((SHIBYTE(v26) & 0x80000000) == 0)
    {
      goto LABEL_28;
    }
    operator delete(__p[0]);
  }
LABEL_28:
  v23 = (cricket::Connection *)*((_QWORD *)v10 + 13);
  *((_QWORD *)v10 + 13) = a2;
  (*(void (**)(cricket::Port *, cricket::Connection *))(*(_QWORD *)this + 352))(this, v23);
  cricket::Connection::Shutdown(v23);
  if (v23)
    (*(void (**)(cricket::Connection *))(*(_QWORD *)v23 + 8))(v23);
}

uint64_t cricket::Port::OnReadPacket(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  rtc::SocketAddress *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t, rtc::SocketAddress *);
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, rtc::SocketAddress *, uint64_t, uint64_t, void ***, _QWORD);
  uint64_t v39;
  void **v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char v49;
  void *v50;
  char v51;
  char v52;
  const char *v53;
  uint64_t *v54;
  void *__p[2];
  char v56;
  void *v57[2];
  char *v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v4 = *a2;
  v5 = a2[1];
  v6 = (rtc::SocketAddress *)a2[4];
  if (*(_BYTE *)(a1 + 700))
  {
    v7 = a1 + 136;
    result = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 160) = result;
    if (result != a1 + 136)
    {
      do
      {
        v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, rtc::SocketAddress *))(result + 16);
        v9 = result + 16;
        *(_QWORD *)(a1 + 160) = *(_QWORD *)(v9 - 8);
        v10(v9, a1, v4, v5, v6);
        result = *(_QWORD *)(a1 + 160);
      }
      while (result != v7);
    }
    return result;
  }
  v61 = 0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, rtc::SocketAddress *, uint64_t *, void ***))(*(_QWORD *)a1 + 280))(a1, v4, v5, v6, &v62, &v59) & 1) != 0)
  {
    if (!v62)
      goto LABEL_43;
    v12 = *(unsigned __int16 *)(v62 + 32);
    if (v12 > 0x1FF)
    {
      if (v12 == 512)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 152))(a1);
        goto LABEL_43;
      }
      if (v12 == 768 || v12 == 784)
        goto LABEL_43;
LABEL_19:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 176))(v57, a1);
        rtc::SocketAddress::ToSensitiveString(v6, (char *)__p);
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc");
        if ((v56 & 0x80000000) == 0)
        {
LABEL_15:
          if (SHIBYTE(v58) < 0)
            operator delete(v57[0]);
          goto LABEL_43;
        }
LABEL_14:
        operator delete(__p[0]);
        goto LABEL_15;
      }
      goto LABEL_43;
    }
    if (v12 != 1)
    {
      if (v12 == 257)
        goto LABEL_43;
      goto LABEL_19;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v57[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
      v57[1] = (void *)2889;
      v58 = &v52;
      v53 = "Received ";
      v54 = (uint64_t *)v57;
      cricket::StunMethodToString((cricket *)*(unsigned __int16 *)(v62 + 32), (unint64_t)__p);
      result = v62 + 40;
      if (*(char *)(v62 + 63) < 0)
      {
        v27 = *(_QWORD *)(v62 + 48);
        if (v27 < 0)
          goto LABEL_52;
        result = *(_QWORD *)result;
        if (v27)
        {
          if (!result)
            goto LABEL_52;
        }
      }
      else
      {
        v27 = *(unsigned __int8 *)(v62 + 63);
      }
      rtc::hex_encode((unsigned __int8 *)result, v27, &v50);
      rtc::SocketAddress::ToSensitiveString(v6, (char *)&v48);
      rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\n", v28, v29, v30, v31, v32, v33, v34, *v54);
      if (v49 < 0)
      {
        operator delete(v48);
        if ((v51 & 0x80000000) == 0)
        {
LABEL_31:
          if ((v56 & 0x80000000) == 0)
            goto LABEL_32;
LABEL_50:
          operator delete(__p[0]);
          v35 = v62;
          v36 = a1 + 24;
          result = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 48) = result;
          if (result != a1 + 24)
            goto LABEL_33;
          goto LABEL_35;
        }
      }
      else if ((v51 & 0x80000000) == 0)
      {
        goto LABEL_31;
      }
      operator delete(v50);
      if (v56 < 0)
        goto LABEL_50;
    }
LABEL_32:
    v35 = v62;
    v36 = a1 + 24;
    result = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 48) = result;
    if (result != a1 + 24)
    {
      do
      {
LABEL_33:
        v38 = *(void (**)(uint64_t, uint64_t, rtc::SocketAddress *, uint64_t, uint64_t, void ***, _QWORD))(result + 16);
        v37 = result + 16;
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(v37 - 8);
        v38(v37, a1, v6, a3, v35, &v59, 0);
        result = *(_QWORD *)(a1 + 48);
      }
      while (result != v36);
      v35 = v62;
    }
LABEL_35:
    if ((SHIBYTE(v61) & 0x80000000) == 0)
    {
      v39 = HIBYTE(v61);
      v40 = (void **)&v59;
      goto LABEL_40;
    }
    v39 = v60;
    if ((v60 & 0x8000000000000000) == 0)
    {
      v40 = v59;
      if (!v60 || v59)
      {
LABEL_40:
        if (((*(uint64_t (**)(uint64_t, rtc::SocketAddress *, uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 304))(a1, v6, v35, v40, v39) & 1) == 0&& (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        {
          rtc::webrtc_logging_impl::Log("\r\t", v41, v42, v43, v44, v45, v46, v47, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc");
        }
        goto LABEL_43;
      }
    }
LABEL_52:
    __break(1u);
    return result;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 176))(v57, a1);
    rtc::SocketAddress::ToSensitiveString(v6, (char *)__p);
    rtc::webrtc_logging_impl::Log("\r\n\t\n", v13, v14, v15, v16, v17, v18, v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc");
    if ((v56 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_14;
  }
LABEL_43:
  if (SHIBYTE(v61) < 0)
    operator delete(v59);
  result = v62;
  v62 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

std::string *cricket::Port::AddPrflxCandidate(cricket::Port *this, std::string *a2)
{
  std::string *result;

  result = (std::string *)*((_QWORD *)this + 82);
  if ((unint64_t)result >= *((_QWORD *)this + 83))
  {
    result = std::vector<cricket::Candidate>::__push_back_slow_path<cricket::Candidate>((std::string **)this + 81, a2);
    *((_QWORD *)this + 82) = result;
  }
  else if (result)
  {
    result = cricket::Candidate::Candidate(result, a2) + 18;
    *((_QWORD *)this + 82) = result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t cricket::Port::GetStunMessage(std::string *a1, unsigned __int16 *a2, unint64_t a3, rtc::SocketAddress *a4, cricket::StunMessage **a5, uint64_t a6)
{
  unint64_t v12;
  int v13;
  cricket::StunMessage *v15;
  std::string *v16;
  unsigned __int16 *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  unsigned __int8 v23;
  unsigned int v24;
  unint64_t v25;
  unsigned int v26;
  char *v27;
  char v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  cricket::StunMessage *v106;
  rtc *v107;
  char v108;
  _QWORD v109[2];
  _QWORD v110[2];
  void *v111[2];
  char v112;
  void *v113;
  uint64_t *v114;
  char v115;
  void **v116;
  char **v117;
  const char *v118;
  void ***v119;
  void *__p[2];
  char v121;
  char *v122;
  uint64_t v123;
  void ***v124;
  std::string v125;
  char *v126;
  uint64_t v127;
  void **v128;
  __int16 *v129;
  __int16 *v130;
  _QWORD v131[2];
  uint64_t v132;
  unint64_t v133;

  if (*(char *)(a6 + 23) < 0)
  {
    **(_BYTE **)a6 = 0;
    *(_QWORD *)(a6 + 8) = 0;
    v12 = a3 & 3;
    if (a3 < 0x14)
      goto LABEL_24;
LABEL_5:
    if (!v12 && *((_DWORD *)a2 + 1) == 1118048801)
    {
      v13 = *a2;
      if ((v13 - 2) < 2 || v13 == 4099)
        goto LABEL_12;
    }
    goto LABEL_24;
  }
  *(_BYTE *)a6 = 0;
  *(_BYTE *)(a6 + 23) = 0;
  v12 = a3 & 3;
  if (a3 >= 0x14)
    goto LABEL_5;
LABEL_24:
  v20 = 0;
  if (a3 < 0x1C || v12)
    return v20;
  if (*((_DWORD *)a2 + 1) != 1118048801)
    return 0;
  v21 = (char *)a2 + a3;
  if (*(unsigned __int16 *)((char *)a2 + a3 - 8) != 10368 || *((_WORD *)v21 - 3) != 1024)
    return 0;
  v22 = *((_DWORD *)v21 - 1) ^ 0x4E555453;
  if ((v23 & 1) == 0)
  {
    if ((_DWORD)v107)
    {
      rtc::LoadCrc32Table(v107);
      rtc::UpdateCrc32(unsigned int,void const*,unsigned long)::kCrc32Table = (uint64_t)rtc::LoadCrc32Table(void)::kCrc32Table;
    }
  }
  v24 = bswap32(v22);
  v25 = a3 - 8;
  v26 = -1;
  v27 = (char *)a2;
  do
  {
    v28 = *v27++;
    v26 = *(_DWORD *)(rtc::UpdateCrc32(unsigned int,void const*,unsigned long)::kCrc32Table
                    + 4 * (v28 ^ v26)) ^ (v26 >> 8);
    --v25;
  }
  while (v25);
  if (v24 != ~v26)
    return 0;
LABEL_12:
  v15 = (cricket::StunMessage *)operator new();
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 5) = 0u;
  *((_OWORD *)v15 + 6) = 0u;
  *((_OWORD *)v15 + 7) = 0u;
  v16 = (std::string *)cricket::StunMessage::StunMessage((uint64_t)v15, 0, (int8x16_t *)"0000000000000000", 0x10uLL);
  v16->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0C1690;
  if (a3)
    v17 = a2;
  else
    v17 = 0;
  v131[0] = v17;
  v131[1] = a3;
  v132 = 0;
  v133 = a3;
  if (!cricket::StunMessage::Read(v16, (rtc::ByteBufferReader *)v131) || v133 != v132)
  {
    v20 = 0;
LABEL_35:
    (*(void (**)(cricket::StunMessage *))(*(_QWORD *)v15 + 8))(v15);
    return v20;
  }
  cricket::StunMessage::GetNonComprehendedAttributes(v15, (char **)&v129);
  v18 = *((unsigned __int16 *)v15 + 16);
  if (v18 > 0x110)
  {
    if (*((unsigned __int16 *)v15 + 16) > 0x2FFu)
    {
      if (v18 == 768 || v18 == 784)
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
          goto LABEL_50;
        v19 = 4464;
LABEL_47:
        v126 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
        v127 = v19;
        v128 = &v113;
        (*(void (**)(std::string *__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(&v125, a1);
        cricket::StunMethodToString((cricket *)*((unsigned __int16 *)v15 + 16), (unint64_t)&v122);
        rtc::SocketAddress::ToSensitiveString(a4, (char *)__p);
        rtc::webrtc_logging_impl::Log("\r\n\t\n\t\n", v37, v38, v39, v40, v41, v42, v43, (uint64_t)v126);
        if (v121 < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v124) & 0x80000000) == 0)
          {
LABEL_49:
            if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_50;
            goto LABEL_93;
          }
        }
        else if ((SHIBYTE(v124) & 0x80000000) == 0)
        {
          goto LABEL_49;
        }
        operator delete(v122);
        if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_50:
          if ((*(char *)(a6 + 23) & 0x80000000) == 0)
          {
LABEL_51:
            *(_BYTE *)a6 = 0;
            *(_BYTE *)(a6 + 23) = 0;
LABEL_139:
            v106 = *a5;
            *a5 = v15;
            if (v106)
              (*(void (**)(cricket::StunMessage *))(*(_QWORD *)v106 + 8))(v106);
            v15 = 0;
            goto LABEL_142;
          }
LABEL_94:
          **(_BYTE **)a6 = 0;
          *(_QWORD *)(a6 + 8) = 0;
          goto LABEL_139;
        }
LABEL_93:
        operator delete(v125.__r_.__value_.__l.__data_);
        if ((*(char *)(a6 + 23) & 0x80000000) == 0)
          goto LABEL_51;
        goto LABEL_94;
      }
      goto LABEL_82;
    }
    if (v18 != 273)
    {
      if (v18 == 512)
      {
        if (cricket::StunMessage::ValidateMessageIntegrity((uint64_t)v15, a1 + 26) == 2)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) != 0)
            goto LABEL_50;
          v19 = 4408;
          goto LABEL_47;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        {
LABEL_90:
          (*(void (**)(std::string *, cricket::StunMessage *, rtc::SocketAddress *, uint64_t, const char *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 152))(a1, v15, a4, 401, "Unauthorized", 12);
          goto LABEL_142;
        }
        v126 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
        v127 = 4347;
        v128 = v111;
        (*(void (**)(std::string *__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(&v125, a1);
        v113 = &v125;
        v114 = (uint64_t *)&v126;
        cricket::StunMethodToString((cricket *)*((unsigned __int16 *)v15 + 16), (unint64_t)&v122);
        rtc::SocketAddress::ToSensitiveString(a4, (char *)__p);
        rtc::webrtc_logging_impl::Log("\r\n\t\n\t\n\t\n", v78, v79, v80, v81, v82, v83, v84, *v114);
        if (v121 < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v124) & 0x80000000) == 0)
          {
LABEL_89:
            if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_90;
LABEL_123:
            operator delete(v125.__r_.__value_.__l.__data_);
            goto LABEL_90;
          }
        }
        else if ((SHIBYTE(v124) & 0x80000000) == 0)
        {
          goto LABEL_89;
        }
        operator delete(v122);
        if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_90;
        goto LABEL_123;
      }
LABEL_82:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_142;
      v126 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
      v127 = 4507;
      v128 = __p;
      (*(void (**)(std::string *__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(&v125, a1);
      rtc::SocketAddress::ToSensitiveString(a4, (char *)&v122);
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v71, v72, v73, v74, v75, v76, v77, (uint64_t)v126);
      if (SHIBYTE(v124) < 0)
      {
LABEL_84:
        operator delete(v122);
        if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_142;
        goto LABEL_85;
      }
LABEL_58:
      if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_142;
LABEL_85:
      operator delete(v125.__r_.__value_.__l.__data_);
      goto LABEL_142;
    }
    v44 = (uint64_t *)*((_QWORD *)v15 + 1);
    v45 = (uint64_t *)*((_QWORD *)v15 + 2);
    if (v44 == v45)
    {
LABEL_55:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        goto LABEL_142;
      v126 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
      v127 = 4051;
      v128 = &v113;
      (*(void (**)(std::string *__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(&v125, a1);
      cricket::StunMethodToString((cricket *)*((unsigned __int16 *)v15 + 16), (unint64_t)&v122);
      rtc::SocketAddress::ToSensitiveString(a4, (char *)__p);
      rtc::webrtc_logging_impl::Log("\r\n\t\n\t\n", v47, v48, v49, v50, v51, v52, v53, (uint64_t)v126);
      if (v121 < 0)
      {
        operator delete(__p[0]);
        if (SHIBYTE(v124) < 0)
          goto LABEL_84;
      }
      else if (SHIBYTE(v124) < 0)
      {
        goto LABEL_84;
      }
      goto LABEL_58;
    }
    while (1)
    {
      v46 = *v44;
      if (*(_WORD *)(*v44 + 8) == 9)
        break;
      if (++v44 == v45)
        goto LABEL_55;
    }
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_40;
    v126 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
    v127 = 3987;
    v128 = (void **)&v108;
    (*(void (**)(std::string *__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(&v125, a1);
    v109[0] = &v125;
    v109[1] = &v126;
    v110[0] = ": Received ";
    v110[1] = v109;
    cricket::StunMethodToString((cricket *)*((unsigned __int16 *)v15 + 16), (unint64_t)&v122);
    v116 = (void **)&v122;
    v117 = (char **)v110;
    v118 = ": class=";
    v119 = &v116;
    v111[0] = (void *)*(unsigned __int8 *)(v46 + 12);
    v111[1] = &v118;
    v113 = " number=";
    v114 = (uint64_t *)v111;
    rtc::SocketAddress::ToSensitiveString(a4, (char *)__p);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v85, v86, v87, v88, v89, v90, v91, **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v114[1] + 8) + 8) + 8) + 8));
    if (v121 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v124) & 0x80000000) == 0)
      {
LABEL_98:
        if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_126;
        goto LABEL_40;
      }
    }
    else if ((SHIBYTE(v124) & 0x80000000) == 0)
    {
      goto LABEL_98;
    }
    operator delete(v122);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
LABEL_126:
      operator delete(v125.__r_.__value_.__l.__data_);
LABEL_40:
    if (v129 == v130)
      goto LABEL_50;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
      goto LABEL_142;
    (*(void (**)(char **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(&v126, a1);
    goto LABEL_107;
  }
  if (v18 == 1)
  {
    v54 = *((_QWORD *)v15 + 1);
    v55 = *((_QWORD *)v15 + 2);
    if (v54 != v55)
    {
      v56 = *((_QWORD *)v15 + 1);
      while (*(_WORD *)(*(_QWORD *)v56 + 8) != 6)
      {
        v56 += 8;
        if (v56 == v55)
          goto LABEL_64;
      }
      while (*(_WORD *)(*(_QWORD *)v54 + 8) != 8)
      {
        v54 += 8;
        if (v54 == v55)
          goto LABEL_64;
      }
      v127 = 0;
      v128 = 0;
      memset(&v125, 0, sizeof(v125));
      v126 = 0;
      if ((*(unsigned int (**)(std::string *, cricket::StunMessage *, char **, std::string *))(a1->__r_.__value_.__r.__words[0] + 288))(a1, v15, &v126, &v125)&& std::operator==[abi:sn180100]<std::allocator<char>>((unsigned __int8 *)&v126, (unsigned __int8 *)&a1[25]))
      {
        if (cricket::StunMessage::ValidateMessageIntegrity((uint64_t)v15, a1 + 26) == 2)
        {
          if (v129 == v130)
          {
            std::string::assign[abi:sn180100]((std::string *)a6, &v125);
            if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v125.__r_.__value_.__l.__data_);
            if (SHIBYTE(v128) < 0)
              operator delete(v126);
            goto LABEL_139;
          }
          cricket::Port::SendUnknownAttributesErrorResponse((uint64_t)a1, (uint64_t)v15, a4, &v129);
          goto LABEL_131;
        }
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
        {
LABEL_130:
          (*(void (**)(std::string *, cricket::StunMessage *, rtc::SocketAddress *, uint64_t, const char *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 152))(a1, v15, a4, 401, "Unauthorized", 12);
LABEL_131:
          if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v125.__r_.__value_.__l.__data_);
          goto LABEL_108;
        }
        v122 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
        v123 = 3811;
        v124 = &v116;
        (*(void (**)(void **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(__p, a1);
        v118 = (const char *)__p;
        v119 = (void ***)&v122;
        cricket::StunMethodToString((cricket *)*((unsigned __int16 *)v15 + 16), (unint64_t)&v113);
        rtc::SocketAddress::ToSensitiveString(a4, (char *)v111);
        rtc::webrtc_logging_impl::Log("\r\n\t\n\t\n\t\n", v99, v100, v101, v102, v103, v104, v105, (uint64_t)*v119);
        if (v112 < 0)
          goto LABEL_117;
      }
      else
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
          goto LABEL_130;
        v122 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
        v123 = 3715;
        v124 = (void ***)v110;
        (*(void (**)(void **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(__p, a1);
        v116 = __p;
        v117 = &v122;
        v118 = ": Received ";
        v119 = &v116;
        cricket::StunMethodToString((cricket *)*((unsigned __int16 *)v15 + 16), (unint64_t)&v113);
        rtc::SocketAddress::ToSensitiveString(a4, (char *)v111);
        rtc::webrtc_logging_impl::Log("\r\n\t\n\t\n\t\n", v92, v93, v94, v95, v96, v97, v98, (uint64_t)*v119[1]);
        if (v112 < 0)
LABEL_117:
          operator delete(v111[0]);
      }
      if (v115 < 0)
      {
        operator delete(v113);
        if ((v121 & 0x80000000) == 0)
          goto LABEL_130;
      }
      else if ((v121 & 0x80000000) == 0)
      {
        goto LABEL_130;
      }
      operator delete(__p[0]);
      goto LABEL_130;
    }
LABEL_64:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    {
LABEL_68:
      (*(void (**)(std::string *, cricket::StunMessage *, rtc::SocketAddress *, uint64_t, const char *, uint64_t))(a1->__r_.__value_.__r.__words[0] + 152))(a1, v15, a4, 400, "Bad Request", 11);
      goto LABEL_142;
    }
    v126 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
    v127 = 3603;
    v128 = &v113;
    (*(void (**)(std::string *__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(&v125, a1);
    cricket::StunMethodToString((cricket *)*((unsigned __int16 *)v15 + 16), (unint64_t)&v122);
    rtc::SocketAddress::ToSensitiveString(a4, (char *)__p);
    rtc::webrtc_logging_impl::Log("\r\n\t\n\t\n", v57, v58, v59, v60, v61, v62, v63, (uint64_t)v126);
    if (v121 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v124) & 0x80000000) == 0)
      {
LABEL_67:
        if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_68;
LABEL_112:
        operator delete(v125.__r_.__value_.__l.__data_);
        goto LABEL_68;
      }
    }
    else if ((SHIBYTE(v124) & 0x80000000) == 0)
    {
      goto LABEL_67;
    }
    operator delete(v122);
    if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_68;
    goto LABEL_112;
  }
  if (v18 != 17)
  {
    if (v18 != 257)
      goto LABEL_82;
    goto LABEL_40;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)0>() & 1) == 0)
  {
    v126 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
    v127 = 4200;
    v128 = &v113;
    (*(void (**)(std::string *__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(&v125, a1);
    cricket::StunMethodToString((cricket *)*((unsigned __int16 *)v15 + 16), (unint64_t)&v122);
    rtc::SocketAddress::ToSensitiveString(a4, (char *)__p);
    rtc::webrtc_logging_impl::Log("\r\n\t\n\t\n", v64, v65, v66, v67, v68, v69, v70, (uint64_t)v126);
    if (v121 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v124) & 0x80000000) == 0)
      {
LABEL_79:
        if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_80;
LABEL_102:
        operator delete(v125.__r_.__value_.__l.__data_);
        if ((*(char *)(a6 + 23) & 0x80000000) == 0)
          goto LABEL_81;
LABEL_103:
        **(_BYTE **)a6 = 0;
        *(_QWORD *)(a6 + 8) = 0;
        goto LABEL_104;
      }
    }
    else if ((SHIBYTE(v124) & 0x80000000) == 0)
    {
      goto LABEL_79;
    }
    operator delete(v122);
    if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_102;
  }
LABEL_80:
  if (*(char *)(a6 + 23) < 0)
    goto LABEL_103;
LABEL_81:
  *(_BYTE *)a6 = 0;
  *(_BYTE *)(a6 + 23) = 0;
LABEL_104:
  if (v129 == v130)
    goto LABEL_139;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    goto LABEL_142;
  (*(void (**)(char **__return_ptr, std::string *))(a1->__r_.__value_.__r.__words[0] + 176))(&v126, a1);
LABEL_107:
  rtc::webrtc_logging_impl::Log("\r\n\t", v30, v31, v32, v33, v34, v35, v36, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc");
LABEL_108:
  if (SHIBYTE(v128) < 0)
    operator delete(v126);
LABEL_142:
  if (v129)
    operator delete(v129);
  v20 = 1;
  if (v15)
    goto LABEL_35;
  return v20;
}

void cricket::Port::SendUnknownAttributesErrorResponse(uint64_t a1, uint64_t a2, rtc::SocketAddress *a3, __int16 **a4)
{
  int8x16_t *v7;
  size_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int16 *v16;
  __int16 *v17;
  __int16 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  int v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void *__p;
  void *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (**v64)(cricket::StunMessage *__hidden);
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  __int16 v68;
  void *v69;
  char v70;
  void *v71;
  char v72;
  void *v73;
  char v74;

  v7 = (int8x16_t *)(a2 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    v8 = *(_QWORD *)(a2 + 48);
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_54;
    v7 = (int8x16_t *)v7->i64[0];
    if (v8 && v7 == 0)
      goto LABEL_54;
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 63);
  }
  cricket::StunMessage::StunMessage((uint64_t)&v64, 273, v7, v8);
  v10 = operator new();
  *(_DWORD *)(v10 + 8) = 262153;
  *(_QWORD *)v10 = off_24C0C15E0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_WORD *)(v10 + 12) = 5124;
  HIBYTE(v46) = 17;
  if (&v43 <= (int *)"Unknown Attribute" && (char *)&v46 + 1 > "Unknown Attribute")
  {
LABEL_54:
    __break(1u);
    return;
  }
  LOWORD(v46) = cricket::STUN_ERROR_REASON_UNKNOWN_ATTRIBUTE[16];
  *(_WORD *)(v10 + 10) = 21;
  *(_OWORD *)(v10 + 16) = *(_OWORD *)"Unknown Attribute";
  *(_QWORD *)(v10 + 32) = v46;
  v63 = v10;
  cricket::StunAttribute::SetOwner((cricket::StunAttribute *)v10, (cricket::StunMessage *)&v64);
  v11 = v63;
  v68 += ((*(_WORD *)(v63 + 10) + 3) & 0xFFFC) + 4;
  v12 = v66;
  if ((unint64_t)v66 >= v67)
  {
    v66 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(&v65, &v63);
    v13 = v63;
    v63 = 0;
    if (!v13)
      goto LABEL_16;
    goto LABEL_15;
  }
  if (!v66)
    goto LABEL_54;
  v63 = 0;
  *v66 = v11;
  v66 = v12 + 1;
  v13 = v63;
  v63 = 0;
  if (v13)
LABEL_15:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_16:
  v14 = operator new();
  *(_DWORD *)(v14 + 8) = 10;
  *(_QWORD *)v14 = &off_24C0C1620;
  v15 = (_QWORD *)operator new();
  v15[1] = 0;
  v15[2] = 0;
  *v15 = 0;
  *(_QWORD *)(v14 + 16) = v15;
  v17 = *a4;
  v16 = a4[1];
  while (v17 != v16)
  {
    v18 = *v17++;
    cricket::StunUInt16ListAttribute::AddType((cricket::StunUInt16ListAttribute *)v14, v18);
  }
  v62 = v14;
  (*(void (**)(uint64_t, void (***)(cricket::StunMessage *__hidden)))(*(_QWORD *)v14 + 24))(v14, &v64);
  v19 = v62;
  v68 += ((*(_WORD *)(v62 + 10) + 3) & 0xFFFC) + 4;
  v20 = v66;
  if ((unint64_t)v66 >= v67)
  {
    v66 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(&v65, &v62);
    v21 = v62;
    v62 = 0;
    if (!v21)
      goto LABEL_24;
    goto LABEL_23;
  }
  if (!v66)
    goto LABEL_54;
  v62 = 0;
  *v66 = v19;
  v66 = v20 + 1;
  v21 = v62;
  v62 = 0;
  if (v21)
LABEL_23:
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
LABEL_24:
  v22 = (__int128 *)(a1 + 624);
  if ((*(char *)(a1 + 647) & 0x80000000) == 0)
  {
    v23 = *(unsigned __int8 *)(a1 + 647);
    goto LABEL_29;
  }
  v23 = *(_QWORD *)(a1 + 632);
  if ((v23 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v22 = *(__int128 **)v22;
  if (v23)
  {
    if (!v22)
      goto LABEL_54;
  }
LABEL_29:
  cricket::StunMessage::AddMessageIntegrityOfType((uint64_t)&v64, 8, 0x14uLL, v22, v23);
  cricket::StunMessage::AddFingerprint((cricket::StunMessage *)&v64);
  v60[0] = 0;
  v24 = operator new[]();
  v60[1] = 4096;
  v61 = v24;
  cricket::StunMessage::Write((uint64_t)&v64, (uint64_t)v60);
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  v44 = 0;
  v45 = -1;
  LODWORD(v46) = -1;
  v48 = 0;
  v49 = 0;
  __p = 0;
  v50 = -1;
  v51 = -1;
  v52 = 0;
  v55 = 0;
  v54 = 0;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  v59 = 0;
  v53 = 3;
  (*(void (**)(uint64_t, uint64_t, _QWORD, rtc::SocketAddress *, int *, _QWORD))(*(_QWORD *)a1 + 144))(a1, v61, v60[0], a3, &v43, 0);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    goto LABEL_32;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 176))(&v41, a1);
  rtc::SocketAddress::ToSensitiveString(a3, (char *)&v39);
  rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v25, v26, v27, v28, v29, v30, v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc");
  if (v40 < 0)
  {
    operator delete(v39);
    if ((v42 & 0x80000000) == 0)
    {
LABEL_32:
      v32 = __p;
      if (!__p)
        goto LABEL_34;
      goto LABEL_33;
    }
  }
  else if ((v42 & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(v41);
  v32 = __p;
  if (__p)
  {
LABEL_33:
    v48 = v32;
    operator delete(v32);
  }
LABEL_34:
  v33 = v61;
  v61 = 0;
  if (v33)
    MEMORY[0x20BD0ADD4](v33, 0x1000C8077774924);
  v64 = &off_24C0C1470;
  if (v74 < 0)
  {
    operator delete(v73);
    if ((v72 & 0x80000000) == 0)
    {
LABEL_38:
      if ((v70 & 0x80000000) == 0)
        goto LABEL_39;
LABEL_43:
      operator delete(v69);
      v34 = v65;
      if (!v65)
        return;
      goto LABEL_44;
    }
  }
  else if ((v72 & 0x80000000) == 0)
  {
    goto LABEL_38;
  }
  operator delete(v71);
  if (v70 < 0)
    goto LABEL_43;
LABEL_39:
  v34 = v65;
  if (!v65)
    return;
LABEL_44:
  v35 = v66;
  v36 = v34;
  if (v66 != v34)
  {
    do
    {
      v38 = *--v35;
      v37 = v38;
      *v35 = 0;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    }
    while (v35 != v34);
    v36 = v65;
  }
  v66 = v34;
  operator delete(v36);
}

std::string *std::string::assign[abi:sn180100](std::string *result, std::string *a2)
{
  __int128 v2;
  size_t size;
  size_t v4;

  if (result != a2)
  {
    if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
    {
      size = a2->__r_.__value_.__l.__size_;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else
      {
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v4 = size;
      }
      return std::string::__assign_no_alias<false>(result, (const std::string::value_type *)a2, v4);
    }
    else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      return (std::string *)std::string::__assign_no_alias<true>(result, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v2 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      result->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&result->__r_.__value_.__l.__data_ = v2;
    }
  }
  return result;
}

uint64_t cricket::Port::StunDscpValue(cricket::Port *this)
{
  return 0xFFFFFFFFLL;
}

uint64_t cricket::Port::ParseStunUsername(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 *v9;
  unint64_t v10;
  BOOL v11;
  _BYTE *v12;
  unint64_t v13;
  size_t v16;
  BOOL v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  size_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v30;
  unint64_t v31;

  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
    {
LABEL_3:
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      v6 = *(uint64_t **)(a2 + 8);
      v7 = *(uint64_t **)(a2 + 16);
      if (v6 != v7)
        goto LABEL_7;
      return 0;
    }
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 23) = 0;
    if ((*(char *)(a4 + 23) & 0x80000000) == 0)
      goto LABEL_3;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v6 = *(uint64_t **)(a2 + 8);
  v7 = *(uint64_t **)(a2 + 16);
  if (v6 == v7)
    return 0;
LABEL_7:
  while (1)
  {
    v8 = *v6;
    if (*(_WORD *)(*v6 + 8) == 6)
      break;
    if (++v6 == v7)
      return 0;
  }
  v9 = *(__int128 **)(v8 + 16);
  v10 = *(unsigned __int16 *)(v8 + 10);
  if (v9)
    v11 = 1;
  else
    v11 = (_DWORD)v10 == 0;
  if (!v11)
    goto LABEL_64;
  if (!*(_WORD *)(v8 + 10))
    return 0;
  v12 = memchr(*(void **)(v8 + 16), 58, *(unsigned __int16 *)(v8 + 10));
  v13 = v12 - (_BYTE *)v9;
  if (!v12 || v13 == -1)
    return 0;
  if (v10 >= v13)
    v16 = v12 - (_BYTE *)v9;
  else
    v16 = v10;
  if (v9)
    v17 = 1;
  else
    v17 = v16 == 0;
  if (!v17)
    goto LABEL_64;
  if (v16 > 0x16)
  {
    v19 = ((unsigned __int16)v16 & 0xFFF8) + 8;
    if ((v16 | 7) != 0x17)
      v19 = v16 | 7;
    v20 = v19 + 1;
    v18 = (__int128 *)operator new(v19 + 1);
    *((_QWORD *)&v30 + 1) = v16;
    v31 = v20 | 0x8000000000000000;
    *(_QWORD *)&v30 = v18;
  }
  else
  {
    HIBYTE(v31) = v16;
    v18 = &v30;
  }
  v21 = (__int128 *)((char *)v18 + v16);
  if (v18 <= v9 && v21 > v9)
    goto LABEL_64;
  if (v16)
    memmove(v18, v9, v16);
  *(_BYTE *)v21 = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = v30;
  *(_QWORD *)(a3 + 16) = v31;
  if (v13 >= v10)
LABEL_65:
    abort();
  v23 = v10 - (v13 + 1) >= v10 ? v10 : v10 - (v13 + 1);
  if (!v9 && v23)
    goto LABEL_64;
  v24 = (char *)v9 + v13 + 1;
  if (v23 > 0x16)
  {
    v26 = ((unsigned __int16)v23 & 0xFFF8) + 8;
    if ((v23 | 7) != 0x17)
      v26 = v23 | 7;
    v27 = v26 + 1;
    v25 = (char *)operator new(v26 + 1);
    *((_QWORD *)&v30 + 1) = v23;
    v31 = v27 | 0x8000000000000000;
    *(_QWORD *)&v30 = v25;
  }
  else
  {
    HIBYTE(v31) = v23;
    v25 = (char *)&v30;
  }
  v28 = &v25[v23];
  if (v25 <= v24 && v28 > v24)
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (v23)
    memmove(v25, v24, v23);
  *v28 = 0;
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v30;
  *(_QWORD *)(a4 + 16) = v31;
  return 1;
}

uint64_t cricket::Port::MaybeIceRoleConflict(uint64_t result, uint64_t a2, uint64_t a3, void *__s1, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);

  v7 = result;
  v8 = *(_QWORD *)(a3 + 8);
  v9 = *(_QWORD *)(a3 + 16);
  if (v8 == v9)
  {
    v11 = 0;
    v12 = 2;
  }
  else
  {
    v10 = *(_QWORD *)(a3 + 8);
    while (*(unsigned __int16 *)(*(_QWORD *)v10 + 8) != 32810)
    {
      v10 += 8;
      if (v10 == v9)
      {
        v11 = 0;
        v12 = 2;
        if (v8 != v9)
          goto LABEL_16;
        goto LABEL_20;
      }
    }
    v11 = *(_QWORD *)(*(_QWORD *)v10 + 16);
    v13 = (_QWORD *)(result + 600);
    if (*(char *)(result + 623) < 0)
    {
      v14 = *(_QWORD *)(result + 608);
      if ((v14 & 0x8000000000000000) != 0 || (v13 = (_QWORD *)*v13, v14) && !v13)
      {
        __break(1u);
        return result;
      }
    }
    else
    {
      v14 = *(unsigned __int8 *)(result + 623);
    }
    if (a5 == v14 && !memcmp(__s1, v13, v14))
    {
      if (v11 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7))
        return 1;
      v12 = 0;
      v8 = *(_QWORD *)(a3 + 8);
      v9 = *(_QWORD *)(a3 + 16);
      if (v8 != v9)
      {
LABEL_16:
        while (*(unsigned __int16 *)(*(_QWORD *)v8 + 8) != 32809)
        {
          v8 += 8;
          if (v8 == v9)
            goto LABEL_20;
        }
        v11 = *(_QWORD *)(*(_QWORD *)v8 + 16);
        v12 = 1;
      }
    }
    else
    {
      v12 = 0;
      if (v8 != v9)
        goto LABEL_16;
    }
  }
LABEL_20:
  v15 = *(_DWORD *)(v7 + 704);
  if (v15 != 1)
  {
    if (v15 || v12)
      return 1;
    if (v11 >= *(_QWORD *)(v7 + 712))
    {
      v19 = *(_QWORD *)(v7 + 88);
      for (*(_QWORD *)(v7 + 104) = v19; v19 != v7 + 80; v19 = *(_QWORD *)(v7 + 104))
      {
        v21 = *(void (**)(uint64_t, uint64_t))(v19 + 16);
        v20 = v19 + 16;
        *(_QWORD *)(v7 + 104) = *(_QWORD *)(v20 - 8);
        v21(v20, v7);
      }
      return 1;
    }
LABEL_30:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(*(_QWORD *)v7 + 152))(v7, a3, a2, 487, "Role Conflict", 13);
    return 0;
  }
  if (v12 == 1)
  {
    if (v11 < *(_QWORD *)(v7 + 712))
    {
      v16 = *(_QWORD *)(v7 + 88);
      for (*(_QWORD *)(v7 + 104) = v16; v16 != v7 + 80; v16 = *(_QWORD *)(v7 + 104))
      {
        v18 = *(void (**)(uint64_t, uint64_t))(v16 + 16);
        v17 = v16 + 16;
        *(_QWORD *)(v7 + 104) = *(_QWORD *)(v17 - 8);
        v18(v17, v7);
      }
      return 1;
    }
    goto LABEL_30;
  }
  return 1;
}

void cricket::Port::CreateStunUsername(char *__src@<X1>, size_t __len@<X2>, uint64_t a3@<X0>, std::string *a4@<X8>)
{
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  std::string::size_type size;
  std::string::size_type v14;
  std::string *v15;
  _BYTE *v16;
  std::string::size_type v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  BOOL v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  char *v25;
  std::string::size_type v26;
  std::string v27;
  std::string v28;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_53:
    abort();
  if (__len > 0x16)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = (char *)operator new(v9 + 1);
    v27.__r_.__value_.__l.__size_ = __len;
    v27.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  }
  else
  {
    *((_BYTE *)&v27.__r_.__value_.__s + 23) = __len;
    v8 = (char *)&v27;
  }
  v11 = &v8[__len];
  if (v8 <= __src && v11 > __src)
    goto LABEL_52;
  if (__len)
    memmove(v8, __src, __len);
  *v11 = 0;
  size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = 22;
  else
    v14 = (v27.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v27.__r_.__value_.__l.__size_;
  if (v14 == size)
  {
    std::string::__grow_by_and_replace(&v27, v14, 1uLL, v14, v14, 0, 1uLL, ":");
  }
  else
  {
    v15 = &v27;
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v15 = (std::string *)v27.__r_.__value_.__r.__words[0];
    v16 = (char *)v15 + size;
    if ((char *)v15 + size <= ":" && v16 + 1 > ":")
      goto LABEL_52;
    *v16 = 58;
    v17 = size + 1;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      v27.__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&v27.__r_.__value_.__s + 23) = v17 & 0x7F;
    v15->__r_.__value_.__s.__data_[v17] = 0;
  }
  v28 = v27;
  memset(&v27, 0, sizeof(v27));
  v18 = *(char *)(a3 + 623);
  if (v18 < 0)
  {
    v19 = *(const std::string::value_type **)(a3 + 600);
    v20 = *(_QWORD *)(a3 + 608);
    v21 = v20 == 0;
    if (v19 || !v20)
      goto LABEL_32;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v19 = (const std::string::value_type *)(a3 + 600);
  v20 = *(unsigned __int8 *)(a3 + 623);
  v21 = v18 == 0;
LABEL_32:
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = 22;
  else
    v22 = (v28.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    v23 = v28.__r_.__value_.__l.__size_;
  if (v22 - v23 < v20)
  {
    std::string::__grow_by_and_replace(&v28, v22, v23 + v20 - v22, v23, v23, 0, v20, v19);
    goto LABEL_50;
  }
  if (!v21)
  {
    if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = &v28;
    else
      v24 = (std::string *)v28.__r_.__value_.__r.__words[0];
    v25 = (char *)v24 + v23;
    if ((char *)v24 + v23 > v19 || &v25[v20] <= v19)
    {
      memmove(v25, v19, v20);
      v26 = v23 + v20;
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        v28.__r_.__value_.__l.__size_ = v23 + v20;
      else
        *((_BYTE *)&v28.__r_.__value_.__s + 23) = v26 & 0x7F;
      v24->__r_.__value_.__s.__data_[v26] = 0;
      goto LABEL_50;
    }
    goto LABEL_52;
  }
LABEL_50:
  *a4 = v28;
  memset(&v28, 0, sizeof(v28));
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

uint64_t cricket::Port::HandleIncomingPacket()
{
  return 0;
}

uint64_t cricket::Port::CanHandleIncomingPacketsFrom()
{
  return 0;
}

void cricket::Port::SendBindingErrorResponse(uint64_t a1, uint64_t a2, rtc::SocketAddress *a3, int a4, void **a5, size_t a6)
{
  __int16 v12;
  int8x16_t *v13;
  size_t v14;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  _WORD *v19;
  void **v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void *v25;
  __int16 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  __int128 *v31;
  size_t v32;
  __int16 v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char v51;
  void *v52;
  char v53;
  void *v54[2];
  char v55;
  char v56;
  _QWORD v57[4];
  uint64_t *v58;
  void *__p[2];
  int64_t v60;
  void *v61;
  void *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  _QWORD v74[2];
  uint64_t v75;
  _WORD *v76;
  void (**v77)(cricket::StunMessage *__hidden);
  _QWORD *v78;
  _QWORD *v79;
  unint64_t v80;
  unsigned __int16 v81;
  __int16 v82;
  void *v83;
  char v84;
  void *v85;
  char v86;
  void *v87;
  char v88;
  void **v89;
  size_t v90;

  v89 = a5;
  v90 = a6;
  if (*(_WORD *)(a2 + 32) == 1)
    v12 = 273;
  else
    v12 = 784;
  v13 = (int8x16_t *)(a2 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    v14 = *(_QWORD *)(a2 + 48);
    if ((v14 & 0x8000000000000000) != 0)
      goto LABEL_80;
    v13 = (int8x16_t *)v13->i64[0];
    if (v14 && v13 == 0)
      goto LABEL_80;
  }
  else
  {
    v14 = *(unsigned __int8 *)(a2 + 63);
  }
  cricket::StunMessage::StunMessage((uint64_t)&v77, v12, v13, v14);
  v16 = operator new();
  *(_DWORD *)(v16 + 8) = 262153;
  *(_QWORD *)v16 = off_24C0C15E0;
  *(_QWORD *)(v16 + 16) = 0;
  v17 = (_QWORD *)(v16 + 16);
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  v18 = ((1374389535 * a4) >> 37) + (1374389535 * a4 < 0);
  *(_BYTE *)(v16 + 12) = v18;
  *(_BYTE *)(v16 + 13) = a4 - 100 * v18;
  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_81;
  v19 = (_WORD *)v16;
  if (a6 > 0x16)
  {
    v22 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v22 = a6 | 7;
    v23 = v22 + 1;
    v20 = (void **)operator new(v22 + 1);
    __p[1] = (void *)a6;
    v60 = v23 | 0x8000000000000000;
    __p[0] = v20;
    v21 = (void **)((char *)v20 + a6);
    if (v20 > a5)
      goto LABEL_19;
  }
  else
  {
    HIBYTE(v60) = a6;
    v20 = __p;
    v21 = (void **)((char *)__p + a6);
    if (__p > a5)
      goto LABEL_19;
  }
  if (v21 > a5)
    goto LABEL_80;
LABEL_19:
  if (a6)
    memmove(v20, a5, a6);
  *(_BYTE *)v21 = 0;
  v24 = HIBYTE(v60);
  v25 = __p[1];
  if (v60 >= 0)
    v26 = HIBYTE(v60);
  else
    v26 = (__int16)__p[1];
  v19[5] = v26 + 4;
  if (v24 < 0)
  {
    std::string::__assign_no_alias<true>(v17, (char *)__p[0], (size_t)v25);
    if (SHIBYTE(v60) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)__p;
    v17[2] = v60;
  }
  v76 = v19;
  (*(void (**)(_WORD *, void (***)(cricket::StunMessage *__hidden)))(*(_QWORD *)v19 + 24))(v19, &v77);
  v27 = (uint64_t)v76;
  v82 += ((v76[5] + 3) & 0xFFFC) + 4;
  v28 = v79;
  if ((unint64_t)v79 >= v80)
  {
    v79 = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>(&v78, (uint64_t *)&v76);
    v29 = (uint64_t)v76;
    v76 = 0;
    if (!v29)
      goto LABEL_34;
    goto LABEL_33;
  }
  if (!v79)
    goto LABEL_80;
  v76 = 0;
  *v79 = v27;
  v79 = v28 + 1;
  v29 = (uint64_t)v76;
  v76 = 0;
  if (v29)
LABEL_33:
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
LABEL_34:
  if ((a4 - 402) > 0xFFFFFFFD)
    goto LABEL_50;
  v30 = *(unsigned __int16 *)(a2 + 32);
  if (v30 == 512)
    goto LABEL_52;
  v31 = (__int128 *)(a1 + 624);
  if (v30 != 1)
  {
    if ((*(char *)(a1 + 647) & 0x80000000) == 0)
    {
      v32 = *(unsigned __int8 *)(a1 + 647);
LABEL_48:
      v33 = -16288;
      v34 = 4;
      goto LABEL_49;
    }
    v32 = *(_QWORD *)(a1 + 632);
    if ((v32 & 0x8000000000000000) == 0)
    {
      v31 = *(__int128 **)v31;
      if (!v32 || v31)
        goto LABEL_48;
    }
LABEL_80:
    __break(1u);
LABEL_81:
    abort();
  }
  if (*(char *)(a1 + 647) < 0)
  {
    v32 = *(_QWORD *)(a1 + 632);
    if ((v32 & 0x8000000000000000) == 0)
    {
      v31 = *(__int128 **)v31;
      if (!v32 || v31)
        goto LABEL_44;
    }
    goto LABEL_80;
  }
  v32 = *(unsigned __int8 *)(a1 + 647);
LABEL_44:
  v33 = 8;
  v34 = 20;
LABEL_49:
  cricket::StunMessage::AddMessageIntegrityOfType((uint64_t)&v77, v33, v34, v31, v32);
LABEL_50:
  if (*(_WORD *)(a2 + 32) == 1)
    cricket::StunMessage::AddFingerprint((cricket::StunMessage *)&v77);
LABEL_52:
  v74[0] = 0;
  v35 = operator new[]();
  v74[1] = 4096;
  v75 = v35;
  cricket::StunMessage::Write((uint64_t)&v77, (uint64_t)v74);
  LODWORD(__p[0]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 272))(a1);
  BYTE4(__p[0]) = 0;
  __p[1] = (void *)-1;
  LODWORD(v60) = -1;
  v62 = 0;
  v63 = 0;
  v61 = 0;
  v64 = -1;
  v65 = -1;
  v66 = 0;
  v69 = 0;
  v68 = 0;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v73 = 0;
  v67 = 3;
  (*(void (**)(uint64_t, uint64_t, _QWORD, rtc::SocketAddress *, void **, _QWORD))(*(_QWORD *)a1 + 144))(a1, v75, v74[0], a3, __p, 0);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    goto LABEL_56;
  v57[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
  v57[1] = 6081;
  v57[2] = &v56;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 176))(v54, a1);
  v57[3] = v54;
  v58 = v57;
  cricket::StunMethodToString((cricket *)v81, (unint64_t)&v52);
  rtc::SocketAddress::ToSensitiveString(a3, (char *)&v50);
  rtc::webrtc_logging_impl::Log("\r\n\t\n\t\v\t\n", v36, v37, v38, v39, v40, v41, v42, *v58);
  if (v51 < 0)
  {
    operator delete(v50);
    if ((v53 & 0x80000000) == 0)
    {
LABEL_55:
      if ((v55 & 0x80000000) == 0)
        goto LABEL_56;
      goto LABEL_78;
    }
  }
  else if ((v53 & 0x80000000) == 0)
  {
    goto LABEL_55;
  }
  operator delete(v52);
  if ((v55 & 0x80000000) == 0)
  {
LABEL_56:
    v43 = v61;
    if (!v61)
      goto LABEL_58;
    goto LABEL_57;
  }
LABEL_78:
  operator delete(v54[0]);
  v43 = v61;
  if (v61)
  {
LABEL_57:
    v62 = v43;
    operator delete(v43);
  }
LABEL_58:
  v44 = v75;
  v75 = 0;
  if (v44)
    MEMORY[0x20BD0ADD4](v44, 0x1000C8077774924);
  v77 = &off_24C0C1470;
  if (v88 < 0)
  {
    operator delete(v87);
    if ((v86 & 0x80000000) == 0)
    {
LABEL_62:
      if ((v84 & 0x80000000) == 0)
        goto LABEL_63;
LABEL_67:
      operator delete(v83);
      v45 = v78;
      if (!v78)
        return;
      goto LABEL_68;
    }
  }
  else if ((v86 & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete(v85);
  if (v84 < 0)
    goto LABEL_67;
LABEL_63:
  v45 = v78;
  if (!v78)
    return;
LABEL_68:
  v46 = v79;
  v47 = v45;
  if (v79 != v45)
  {
    do
    {
      v49 = *--v46;
      v48 = v49;
      *v46 = 0;
      if (v49)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    }
    while (v46 != v45);
    v47 = v78;
  }
  v79 = v45;
  operator delete(v47);
}

char *cricket::Port::SubscribePortDestroyed(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13[3];

  v10 = operator new();
  v11 = (_QWORD *)a2[3];
  if (v11)
  {
    if (v11 == a2)
    {
      *(_QWORD *)(v10 + 24) = v10;
      (*(void (**)(_QWORD *, uint64_t))(*a2 + 24))(a2, v10);
    }
    else
    {
      *(_QWORD *)(v10 + 24) = (*(uint64_t (**)(_QWORD *))(*v11 + 16))(v11);
    }
  }
  else
  {
    *(_QWORD *)(v10 + 24) = 0;
  }
  v13[0] = v10;
  v13[1] = (uint64_t)webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::PortInterface *)>::CallVoidPtr<std::function<void ()(cricket::PortInterface *)>>;
  v13[2] = (uint64_t)webrtc::UntypedFunction::PrepareArgs<void ()(cricket::PortInterface *),std::function<void ()(cricket::PortInterface *)> &,std::function<void ()(cricket::PortInterface *)>,(void *)0>(std::function<void ()(cricket::PortInterface *)> &)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke;
  return webrtc::callback_list_impl::CallbackListReceivers::AddReceiver<webrtc::UntypedFunction::NontrivialUntypedFunctionArgs>((char *)(a1 + 744), v13, v4, v5, v6, v7, v8, v9);
}

double cricket::Port::ToString@<D0>(cricket::Port *this@<X0>, std::string *a2@<X8>)
{
  size_t v4;
  size_t v5;
  std::string::value_type *p_p_new_stuff;
  std::string::value_type *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  BOOL v12;
  char *v13;
  std::string::size_type v14;
  std::string::size_type size;
  std::string *v16;
  char *v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string::size_type v20;
  char *v21;
  int v22;
  size_t v23;
  BOOL v24;
  std::string *v25;
  _BYTE *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *v30;
  char *v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string *v35;
  _BYTE *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string *v39;
  std::string::size_type v40;
  int v41;
  std::string::size_type v42;
  std::string *v43;
  _BYTE *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string *v47;
  std::string::size_type v48;
  int v49;
  std::string::size_type v50;
  unsigned int v51;
  const char *v52;
  size_t v53;
  std::string *v54;
  _BYTE *v55;
  std::string::size_type v56;
  int v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string *v60;
  char *v61;
  std::string::size_type v62;
  std::string::size_type v63;
  int v64;
  std::string::size_type v65;
  unsigned __int8 v66;
  std::string::size_type v67;
  BOOL v68;
  std::string *v69;
  std::string *v70;
  _BYTE *v71;
  std::string::size_type v72;
  int v73;
  std::string::size_type v74;
  std::string::size_type v75;
  std::string *v76;
  char *v77;
  std::string::size_type v78;
  std::string::size_type v79;
  int v80;
  std::string::size_type v81;
  double result;
  std::string *v83;
  _BYTE *v84;
  std::string::size_type v85;
  std::string::value_type *__p_new_stuff;
  size_t v87;
  unint64_t v88;
  std::string v89;
  std::string __str[2];
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  memset(&v89, 0, sizeof(v89));
  if (&v89 <= (std::string *)"Port[" && (char *)v89.__r_.__value_.__r.__words + 5 > "Port[")
    goto LABEL_198;
  strcpy((char *)&v89, "Port[");
  *((_BYTE *)&v89.__r_.__value_.__s + 23) = 5;
  snprintf((char *)__str, 0x32uLL, "%x", (_DWORD)this);
  v4 = strlen((const char *)__str);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_199;
  v5 = v4;
  if (v4 > 0x16)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    p_p_new_stuff = (std::string::value_type *)operator new(v9 + 1);
    v87 = v5;
    v88 = v10 | 0x8000000000000000;
    __p_new_stuff = p_p_new_stuff;
    v7 = &p_p_new_stuff[v5];
    v8 = &p_p_new_stuff[v5] > (std::string::value_type *)__str;
    if (p_p_new_stuff > (std::string::value_type *)__str)
      goto LABEL_11;
  }
  else
  {
    HIBYTE(v88) = v4;
    p_p_new_stuff = (std::string::value_type *)&__p_new_stuff;
    v7 = (char *)&__p_new_stuff + v5;
    v8 = (char *)&__p_new_stuff + v5 > (char *)__str;
    if (&__p_new_stuff > (std::string::value_type **)__str)
      goto LABEL_11;
  }
  if (v8)
    goto LABEL_198;
LABEL_11:
  if (v5)
    memcpy(p_p_new_stuff, __str, v5);
  *v7 = 0;
  if (SHIBYTE(v88) < 0)
  {
    v11 = v87;
    if ((v87 & 0x8000000000000000) != 0)
      goto LABEL_198;
    v13 = __p_new_stuff;
    v12 = v87 == 0;
    if (v87)
    {
      if (!__p_new_stuff)
        goto LABEL_198;
    }
  }
  else
  {
    v11 = HIBYTE(v88);
    v12 = HIBYTE(v88) == 0;
    v13 = (char *)&__p_new_stuff;
  }
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = 22;
  else
    v14 = (v89.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    size = v89.__r_.__value_.__l.__size_;
  if (v14 - size >= v11)
  {
    if (!v12)
    {
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v89;
      else
        v16 = (std::string *)v89.__r_.__value_.__r.__words[0];
      v17 = (char *)v16 + size;
      if ((char *)v16 + size <= v13 && &v17[v11] > v13)
        goto LABEL_198;
      memmove(v17, v13, v11);
      v18 = size + v11;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        v89.__r_.__value_.__l.__size_ = size + v11;
      else
        *((_BYTE *)&v89.__r_.__value_.__s + 23) = v18 & 0x7F;
      v16->__r_.__value_.__s.__data_[v18] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v89, v14, size + v11 - v14, size, size, 0, v11, v13);
  }
  v19 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = 22;
  else
    v20 = (v89.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = v89.__r_.__value_.__l.__size_;
  if (v20 == v19)
  {
    std::string::__grow_by_and_replace(&v89, v20, 1uLL, v20, v20, 0, 1uLL, ":");
    v21 = (char *)this + 568;
    v22 = *((char *)this + 591);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_43:
      v23 = v22;
      v24 = v22 == 0;
      goto LABEL_53;
    }
  }
  else
  {
    v25 = &v89;
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v25 = (std::string *)v89.__r_.__value_.__r.__words[0];
    v26 = (char *)v25 + v19;
    if ((char *)v25 + v19 <= ":" && v26 + 1 > ":")
      goto LABEL_198;
    *v26 = 58;
    v27 = v19 + 1;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    {
      v89.__r_.__value_.__l.__size_ = v27;
      v25->__r_.__value_.__s.__data_[v27] = 0;
      v21 = (char *)this + 568;
      v22 = *((char *)this + 591);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_43;
    }
    else
    {
      *((_BYTE *)&v89.__r_.__value_.__s + 23) = v27 & 0x7F;
      v25->__r_.__value_.__s.__data_[v27] = 0;
      v21 = (char *)this + 568;
      v22 = *((char *)this + 591);
      if ((v22 & 0x80000000) == 0)
        goto LABEL_43;
    }
  }
  v23 = *((_QWORD *)this + 72);
  if ((v23 & 0x8000000000000000) != 0)
    goto LABEL_198;
  v21 = *(char **)v21;
  v24 = v23 == 0;
  if (v23)
  {
    if (!v21)
      goto LABEL_198;
  }
LABEL_53:
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = 22;
  else
    v28 = (v89.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  else
    v29 = v89.__r_.__value_.__l.__size_;
  if (v28 - v29 >= v23)
  {
    if (!v24)
    {
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v30 = &v89;
      else
        v30 = (std::string *)v89.__r_.__value_.__r.__words[0];
      v31 = (char *)v30 + v29;
      if ((char *)v30 + v29 <= v21 && &v31[v23] > v21)
        goto LABEL_198;
      memmove(v31, v21, v23);
      v32 = v29 + v23;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        v89.__r_.__value_.__l.__size_ = v29 + v23;
      else
        *((_BYTE *)&v89.__r_.__value_.__s + 23) = v32 & 0x7F;
      v30->__r_.__value_.__s.__data_[v32] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v89, v28, v29 + v23 - v28, v29, v29, 0, v23, v21);
  }
  v33 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = 22;
  else
    v34 = (v89.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v33 = v89.__r_.__value_.__l.__size_;
  if (v34 == v33)
  {
    std::string::__grow_by_and_replace(&v89, v34, 1uLL, v34, v34, 0, 1uLL, ":");
  }
  else
  {
    v35 = &v89;
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = (std::string *)v89.__r_.__value_.__r.__words[0];
    v36 = (char *)v35 + v33;
    if ((char *)v35 + v33 <= ":" && v36 + 1 > ":")
      goto LABEL_198;
    *v36 = 58;
    v37 = v33 + 1;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      v89.__r_.__value_.__l.__size_ = v37;
    else
      *((_BYTE *)&v89.__r_.__value_.__s + 23) = v37 & 0x7F;
    v35->__r_.__value_.__s.__data_[v37] = 0;
  }
  v38 = rtc::StringBuilder::operator<<(&v89, *((_DWORD *)this + 148));
  v39 = v38;
  v40 = HIBYTE(v38->__r_.__value_.__r.__words[2]);
  v41 = (char)v40;
  if ((v40 & 0x80u) == 0)
    v42 = 22;
  else
    v42 = (v38->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v40 & 0x80u) != 0)
    v40 = v38->__r_.__value_.__l.__size_;
  if (v42 == v40)
  {
    std::string::__grow_by_and_replace(v38, v42, 1uLL, v42, v42, 0, 1uLL, ":");
  }
  else
  {
    if (v41 >= 0)
      v43 = v38;
    else
      v43 = (std::string *)v38->__r_.__value_.__r.__words[0];
    v44 = (char *)v43 + v40;
    if ((char *)v43 + v40 <= ":" && v44 + 1 > ":")
      goto LABEL_198;
    *v44 = 58;
    v45 = v40 + 1;
    if (SHIBYTE(v38->__r_.__value_.__r.__words[2]) < 0)
      v38->__r_.__value_.__l.__size_ = v45;
    else
      *((_BYTE *)&v38->__r_.__value_.__s + 23) = v45 & 0x7F;
    v43->__r_.__value_.__s.__data_[v45] = 0;
  }
  v46 = rtc::StringBuilder::operator<<(v39, *((_DWORD *)this + 149));
  v47 = v46;
  v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
  v49 = (char)v48;
  if ((v48 & 0x80u) == 0)
    v50 = 22;
  else
    v50 = (v46->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v48 & 0x80u) != 0)
    v48 = v46->__r_.__value_.__l.__size_;
  if (v50 == v48)
  {
    std::string::__grow_by_and_replace(v46, v50, 1uLL, v50, v50, 0, 1uLL, ":");
    v51 = *((_DWORD *)this + 136) - 1;
    if (v51 <= 2)
    {
LABEL_111:
      v52 = off_24C0BAB40[v51];
      v53 = 5;
      goto LABEL_120;
    }
  }
  else
  {
    if (v49 >= 0)
      v54 = v46;
    else
      v54 = (std::string *)v46->__r_.__value_.__r.__words[0];
    v55 = (char *)v54 + v48;
    if ((char *)v54 + v48 <= ":" && v55 + 1 > ":")
      goto LABEL_198;
    *v55 = 58;
    v56 = v48 + 1;
    if (SHIBYTE(v46->__r_.__value_.__r.__words[2]) < 0)
    {
      v46->__r_.__value_.__l.__size_ = v56;
      v54->__r_.__value_.__s.__data_[v56] = 0;
      v51 = *((_DWORD *)this + 136) - 1;
      if (v51 <= 2)
        goto LABEL_111;
    }
    else
    {
      *((_BYTE *)&v46->__r_.__value_.__s + 23) = v56 & 0x7F;
      v54->__r_.__value_.__s.__data_[v56] = 0;
      v51 = *((_DWORD *)this + 136) - 1;
      if (v51 <= 2)
        goto LABEL_111;
    }
  }
  v52 = "host";
  v53 = 4;
LABEL_120:
  v57 = SHIBYTE(v47->__r_.__value_.__r.__words[2]);
  if (v57 >= 0)
    v58 = 22;
  else
    v58 = (v47->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v57 >= 0)
    v59 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
  else
    v59 = v47->__r_.__value_.__l.__size_;
  if (v58 - v59 >= v53)
  {
    if (v57 >= 0)
      v60 = v47;
    else
      v60 = (std::string *)v47->__r_.__value_.__r.__words[0];
    v61 = (char *)v60 + v59;
    if ((char *)v60 + v59 <= v52 && &v61[v53] > v52)
      goto LABEL_198;
    memcpy(v61, v52, v53);
    v62 = v59 + v53;
    if (SHIBYTE(v47->__r_.__value_.__r.__words[2]) < 0)
      v47->__r_.__value_.__l.__size_ = v62;
    else
      *((_BYTE *)&v47->__r_.__value_.__s + 23) = v62 & 0x7F;
    v60->__r_.__value_.__s.__data_[v62] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(v47, v58, v59 + v53 - v58, v59, v59, 0, v53, v52);
  }
  v63 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
  v64 = (char)v63;
  if ((v63 & 0x80u) == 0)
    v65 = 22;
  else
    v65 = (v47->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v63 & 0x80u) != 0)
    v63 = v47->__r_.__value_.__l.__size_;
  if (v65 == v63)
  {
    std::string::__grow_by_and_replace(v47, v65, 1uLL, v65, v65, 0, 1uLL, ":");
    rtc::Network::ToString(*((rtc::Network **)this + 69), __str);
    v66 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
    if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_146:
      v67 = v66;
      v68 = v66 == 0;
      v69 = __str;
      goto LABEL_157;
    }
  }
  else
  {
    if (v64 >= 0)
      v70 = v47;
    else
      v70 = (std::string *)v47->__r_.__value_.__r.__words[0];
    v71 = (char *)v70 + v63;
    if ((char *)v70 + v63 <= ":" && v71 + 1 > ":")
      goto LABEL_198;
    *v71 = 58;
    v72 = v63 + 1;
    if (SHIBYTE(v47->__r_.__value_.__r.__words[2]) < 0)
    {
      v47->__r_.__value_.__l.__size_ = v72;
      v70->__r_.__value_.__s.__data_[v72] = 0;
      rtc::Network::ToString(*((rtc::Network **)this + 69), __str);
      v66 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_146;
    }
    else
    {
      *((_BYTE *)&v47->__r_.__value_.__s + 23) = v72 & 0x7F;
      v70->__r_.__value_.__s.__data_[v72] = 0;
      rtc::Network::ToString(*((rtc::Network **)this + 69), __str);
      v66 = HIBYTE(__str[0].__r_.__value_.__r.__words[2]);
      if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_146;
    }
  }
  v67 = __str[0].__r_.__value_.__l.__size_;
  if ((__str[0].__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_198;
  v69 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
  v68 = __str[0].__r_.__value_.__l.__size_ == 0;
  if (__str[0].__r_.__value_.__l.__size_)
  {
    if (!__str[0].__r_.__value_.__r.__words[0])
      goto LABEL_198;
  }
LABEL_157:
  v73 = SHIBYTE(v47->__r_.__value_.__r.__words[2]);
  if (v73 >= 0)
    v74 = 22;
  else
    v74 = (v47->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v73 >= 0)
    v75 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
  else
    v75 = v47->__r_.__value_.__l.__size_;
  if (v74 - v75 < v67)
  {
    std::string::__grow_by_and_replace(v47, v74, v75 + v67 - v74, v75, v75, 0, v67, (const std::string::value_type *)v69);
    goto LABEL_177;
  }
  if (!v68)
  {
    if (v73 >= 0)
      v76 = v47;
    else
      v76 = (std::string *)v47->__r_.__value_.__r.__words[0];
    v77 = (char *)v76 + v75;
    if ((std::string *)((char *)v76 + v75) > v69 || &v77[v67] <= (char *)v69)
    {
      memmove(v77, v69, v67);
      v78 = v75 + v67;
      if (SHIBYTE(v47->__r_.__value_.__r.__words[2]) < 0)
        v47->__r_.__value_.__l.__size_ = v78;
      else
        *((_BYTE *)&v47->__r_.__value_.__s + 23) = v78 & 0x7F;
      v76->__r_.__value_.__s.__data_[v78] = 0;
      goto LABEL_177;
    }
LABEL_198:
    __break(1u);
LABEL_199:
    abort();
  }
LABEL_177:
  v79 = HIBYTE(v47->__r_.__value_.__r.__words[2]);
  v80 = (char)v79;
  if ((v79 & 0x80u) == 0)
    v81 = 22;
  else
    v81 = (v47->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v79 & 0x80u) != 0)
    v79 = v47->__r_.__value_.__l.__size_;
  if (v81 == v79)
  {
    std::string::__grow_by_and_replace(v47, v81, 1uLL, v81, v81, 0, 1uLL, "]");
    if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_185;
    goto LABEL_184;
  }
  if (v80 >= 0)
    v83 = v47;
  else
    v83 = (std::string *)v47->__r_.__value_.__r.__words[0];
  v84 = (char *)v83 + v79;
  if ((char *)v83 + v79 <= "]" && v84 + 1 > "]")
    goto LABEL_198;
  *v84 = 93;
  v85 = v79 + 1;
  if (SHIBYTE(v47->__r_.__value_.__r.__words[2]) < 0)
  {
    v47->__r_.__value_.__l.__size_ = v85;
    v83->__r_.__value_.__s.__data_[v85] = 0;
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_184;
  }
  else
  {
    *((_BYTE *)&v47->__r_.__value_.__s + 23) = v85 & 0x7F;
    v83->__r_.__value_.__s.__data_[v85] = 0;
    if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
LABEL_184:
      operator delete(__str[0].__r_.__value_.__l.__data_);
  }
LABEL_185:
  if (SHIBYTE(v88) < 0)
    operator delete(__p_new_stuff);
  result = *(double *)&v89.__r_.__value_.__l.__data_;
  *a2 = v89;
  return result;
}

void cricket::Port::UpdateNetworkCost(cricket::Port *this)
{
  unsigned int Cost;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  cricket::Port *v17;
  uint64_t v18;
  int v19;
  cricket::Port *v20;
  cricket::Port *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  char v26;
  _QWORD v27[5];

  Cost = rtc::Network::GetCost(*((_QWORD *)this + 69), *((_QWORD *)this + 67));
  if (*((__int16 *)this + 361) == Cost)
    return;
  v3 = Cost;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v27[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc";
    v27[1] = 7025;
    v27[2] = &v26;
    v27[3] = "Network cost changed from ";
    v27[4] = v27;
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc");
  }
  *((_WORD *)this + 361) = v3;
  v11 = *((_QWORD *)this + 81);
  v12 = *((_QWORD *)this + 82);
  if (v11 != v12)
  {
    v13 = v12 - v11 - 432;
    if (v13 < 0x1B0)
    {
      v14 = *((_QWORD *)this + 81);
      do
      {
LABEL_10:
        *(_WORD *)(v14 + 402) = v3;
        v14 += 432;
      }
      while (v14 != v12);
      goto LABEL_11;
    }
    v15 = v13 / 0x1B0 + 1;
    v14 = v11 + 432 * (v15 & 0x1FFFFFFFFFFFFFELL);
    v16 = v15 & 0x1FFFFFFFFFFFFFELL;
    do
    {
      *(_WORD *)(v11 + 402) = v3;
      *(_WORD *)(v11 + 834) = v3;
      v11 += 864;
      v16 -= 2;
    }
    while (v16);
    if (v15 != (v15 & 0x1FFFFFFFFFFFFFELL))
      goto LABEL_10;
  }
LABEL_11:
  v17 = (cricket::Port *)*((_QWORD *)this + 84);
  if (v17 != (cricket::Port *)((char *)this + 680))
  {
    do
    {
      v18 = *((_QWORD *)v17 + 13);
      v19 = *((unsigned __int16 *)this + 361);
      if (*(unsigned __int16 *)(v18 + 666) != v19)
      {
        *(_WORD *)(v18 + 666) = v19;
        v23 = *(_QWORD *)(v18 + 32);
        for (*(_QWORD *)(v18 + 48) = v23; v23 != v18 + 24; v23 = *(_QWORD *)(v18 + 48))
        {
          v25 = *(void (**)(uint64_t, uint64_t))(v23 + 16);
          v24 = v23 + 16;
          *(_QWORD *)(v18 + 48) = *(_QWORD *)(v24 - 8);
          v25(v24, v18);
        }
      }
      v20 = (cricket::Port *)*((_QWORD *)v17 + 1);
      if (v20)
      {
        do
        {
          v21 = v20;
          v20 = *(cricket::Port **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          v21 = (cricket::Port *)*((_QWORD *)v17 + 2);
          v22 = *(_QWORD *)v21 == (_QWORD)v17;
          v17 = v21;
        }
        while (!v22);
      }
      v17 = v21;
    }
    while (v21 != (cricket::Port *)((char *)this + 680));
  }
}

uint64_t cricket::Port::EnablePortPackets(uint64_t this)
{
  *(_BYTE *)(this + 700) = 1;
  return this;
}

uint64_t cricket::Port::DestroyConnectionInternal(cricket::Port *this, cricket::Connection *a2, int a3)
{
  char **v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  _QWORD v13[2];
  uint64_t (*v14)(char, uint64_t *, uint64_t *);
  uint64_t (*v15)();

  v6 = (char **)((char *)this + 672);
  v7 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)a2 + 24))(a2);
  result = std::__tree<std::__value_type<rtc::SocketAddress,cricket::Connection *>,std::__map_value_compare<rtc::SocketAddress,std::__value_type<rtc::SocketAddress,cricket::Connection *>,std::less<rtc::SocketAddress>,true>,std::allocator<std::__value_type<rtc::SocketAddress,cricket::Connection *>>>::__erase_unique<rtc::SocketAddress>(v6, (char *)(v7 + 80));
  if (result)
  {
    (*(void (**)(cricket::Port *, cricket::Connection *))(*(_QWORD *)this + 352))(this, a2);
    if (*((_QWORD *)this + 86))
    {
      cricket::Connection::Shutdown(a2);
      if (a3)
      {
LABEL_4:
        v9 = *((_QWORD *)this + 64);
        v13[0] = a2;
        v14 = absl::internal_any_invocable::LocalManagerNontrivial<cricket::Port::DestroyConnectionInternal(cricket::Connection *,BOOL)::$_1>;
        v15 = absl::internal_any_invocable::LocalInvoker<false,void,cricket::Port::DestroyConnectionInternal(cricket::Connection *,BOOL)::$_1 &&>;
        (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v9 + 8))(v9, v13, &v12, &v11);
        return v14(1, v13, v13);
      }
    }
    else
    {
      if (rtc::g_clock)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v10 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
            / dword_253EA791C;
      }
      *((_QWORD *)this + 91) = v10 / 1000000;
      cricket::Port::PostDestroyIfDead(this, 1);
      cricket::Connection::Shutdown(a2);
      if (a3)
        goto LABEL_4;
    }
    return (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

uint64_t cricket::Port::DestroyConnection(cricket::Port *this, cricket::Connection *a2)
{
  char **v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = (char **)((char *)this + 672);
  v5 = (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)a2 + 24))(a2);
  result = std::__tree<std::__value_type<rtc::SocketAddress,cricket::Connection *>,std::__map_value_compare<rtc::SocketAddress,std::__value_type<rtc::SocketAddress,cricket::Connection *>,std::less<rtc::SocketAddress>,true>,std::allocator<std::__value_type<rtc::SocketAddress,cricket::Connection *>>>::__erase_unique<rtc::SocketAddress>(v4, (char *)(v5 + 80));
  if (result)
  {
    (*(void (**)(cricket::Port *, cricket::Connection *))(*(_QWORD *)this + 352))(this, a2);
    if (!*((_QWORD *)this + 86))
    {
      if (rtc::g_clock)
      {
        v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
      }
      else
      {
        if (!dword_253EA791C)
          mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
        v7 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
           / dword_253EA791C;
      }
      *((_QWORD *)this + 91) = v7 / 1000000;
      cricket::Port::PostDestroyIfDead(this, 1);
    }
    cricket::Connection::Shutdown(a2);
    return (*(uint64_t (**)(cricket::Connection *))(*(_QWORD *)a2 + 8))(a2);
  }
  return result;
}

uint64_t cricket::Port::DestroyConnectionAsync(cricket::Port *this, cricket::Connection *a2)
{
  return cricket::Port::DestroyConnectionInternal(this, a2, 1);
}

uint64_t cricket::Port::thread(cricket::Port *this)
{
  return *((_QWORD *)this + 64);
}

uint64_t cricket::Port::socket_factory(cricket::Port *this)
{
  return *((_QWORD *)this + 65);
}

uint64_t cricket::Port::generation(cricket::Port *this)
{
  return *((unsigned int *)this + 149);
}

uint64_t cricket::Port::set_generation(uint64_t this, int a2)
{
  *(_DWORD *)(this + 596) = a2;
  return this;
}

uint64_t cricket::Port::send_retransmit_count_attribute(cricket::Port *this)
{
  return *((unsigned __int8 *)this + 548);
}

uint64_t cricket::Port::content_name(cricket::Port *this)
{
  return (uint64_t)this + 568;
}

uint64_t cricket::Port::network_cost(cricket::Port *this)
{
  return *((__int16 *)this + 361);
}

uint64_t sigslot::_opaque_connection::emitter<cricket::Port,rtc::Network const*>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = a1[1];
  if (v3)
    v4 = v3 - 232;
  else
    v4 = 0;
  v5 = (_QWORD *)(v4 + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v5 + v1);
  return v1(v5);
}

uint64_t std::__function::__func<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0,std::allocator<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0>,void ()(rtc::IPAddress const&,std::string_view)>::~__func(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = &off_24C0BAB08;
  cricket::Candidate::~Candidate((void **)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  return a1;
}

void std::__function::__func<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0,std::allocator<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0>,void ()(rtc::IPAddress const&,std::string_view)>::~__func(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = &off_24C0BAB08;
  cricket::Candidate::~Candidate((void **)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

std::string *std::__function::__func<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0,std::allocator<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0>,void ()(rtc::IPAddress const&,std::string_view)>::__clone(std::string *a1)
{
  std::string *v2;
  std::string *v3;
  std::string::size_type size;
  unsigned int *v5;
  unsigned int v6;

  v2 = (std::string *)operator new(0x1D0uLL);
  v3 = v2;
  size = a1->__r_.__value_.__l.__size_;
  v2->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0BAB08;
  v2->__r_.__value_.__l.__size_ = size;
  if (size)
  {
    v5 = (unsigned int *)(size + 4);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v2->__r_.__value_.__r.__words[2] = a1->__r_.__value_.__r.__words[2];
  cricket::Candidate::Candidate(v2 + 1, a1 + 1);
  v3[19].__r_.__value_.__s.__data_[0] = a1[19].__r_.__value_.__s.__data_[0];
  return v3;
}

std::string *std::__function::__func<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0,std::allocator<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0>,void ()(rtc::IPAddress const&,std::string_view)>::__clone(std::string *a1, std::string *a2)
{
  std::string::size_type size;
  unsigned int *v5;
  unsigned int v6;
  std::string *result;

  size = a1->__r_.__value_.__l.__size_;
  a2->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C0BAB08;
  a2->__r_.__value_.__l.__size_ = size;
  if (size)
  {
    v5 = (unsigned int *)(size + 4);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  a2->__r_.__value_.__r.__words[2] = a1->__r_.__value_.__r.__words[2];
  result = cricket::Candidate::Candidate(a2 + 1, a1 + 1);
  a2[19].__r_.__value_.__s.__data_[0] = a1[19].__r_.__value_.__s.__data_[0];
  return result;
}

uint64_t std::__function::__func<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0,std::allocator<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0>,void ()(rtc::IPAddress const&,std::string_view)>::destroy(uint64_t a1)
{
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  cricket::Candidate::~Candidate((void **)(a1 + 24));
  result = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v3 = (unsigned int *)(result + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      JUMPOUT(0x20BD0ADECLL);
  }
  return result;
}

void std::__function::__func<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0,std::allocator<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0>,void ()(rtc::IPAddress const&,std::string_view)>::destroy_deallocate(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  cricket::Candidate::~Candidate((void **)(a1 + 24));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 4);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
  }
  operator delete((void *)a1);
}

void std::__function::__func<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0,std::allocator<cricket::Port::MaybeObfuscateAddress(cricket::Candidate const&,BOOL)::$_0>,void ()(rtc::IPAddress const&,std::string_view)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 *v5;
  size_t v6;
  std::string *v7;
  __int16 v8;
  void **v9;
  size_t v10;
  std::string *v11;
  _BOOL4 v12;
  int v13;
  char v14;
  __int16 v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  int v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, std::string *);
  void *__p[2];
  uint64_t v28;
  void *v29;
  _BYTE v30[20];
  __int16 v31;
  int v32;
  char v33;
  void *v34[2];
  int64_t v35;
  void *v36;
  _BYTE v37[20];
  __int16 v38;
  int v39;
  char v40;

  v5 = *(__int128 **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  v7 = (std::string *)(a1 + 104);
  v8 = *(_WORD *)(a1 + 160);
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  v36 = &unk_24C0ACDA0;
  memset(v37, 0, sizeof(v37));
  rtc::SocketAddress::SetIP((uint64_t)v34, v5, v6);
  v38 = v8;
  *(_DWORD *)v37 = *(_DWORD *)(a2 + 8);
  *(_OWORD *)&v37[4] = *(_OWORD *)(a2 + 12);
  v39 = 0;
  if (v7 != (std::string *)v34)
  {
    if (*(char *)(a1 + 127) < 0)
    {
      if (v35 >= 0)
        v9 = v34;
      else
        v9 = (void **)v34[0];
      if (v35 >= 0)
        v10 = HIBYTE(v35);
      else
        v10 = (size_t)v34[1];
      std::string::__assign_no_alias<false>(v7, (const std::string::value_type *)v9, v10);
    }
    else if (v35 < 0)
    {
      std::string::__assign_no_alias<true>(v7, (char *)v34[0], (size_t)v34[1]);
    }
    else
    {
      *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)v34;
      v7->__r_.__value_.__r.__words[2] = v35;
    }
  }
  *(_DWORD *)(a1 + 136) = *(_DWORD *)v37;
  *(_OWORD *)(a1 + 140) = *(_OWORD *)&v37[4];
  *(_WORD *)(a1 + 160) = v38;
  *(_BYTE *)(a1 + 168) = v40;
  *(_DWORD *)(a1 + 164) = v39;
  __p[0] = 0;
  __p[1] = 0;
  v28 = 0;
  v29 = &unk_24C0ACDA0;
  v33 = 0;
  v31 = 0;
  v32 = 0;
  memset(v30, 0, sizeof(v30));
  v11 = (std::string *)(a1 + 304);
  if ((void **)(a1 + 304) == __p)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
  else if (*(char *)(a1 + 327) < 0)
  {
    std::string::__assign_no_alias<false>(v11, (const std::string::value_type *)__p, 0);
    v16 = *(_DWORD *)v30;
    v15 = v31;
    v14 = v33;
    v13 = v32;
    v12 = v28 < 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0;
  }
  *(_DWORD *)(a1 + 336) = v16;
  *(_OWORD *)(a1 + 340) = *(_OWORD *)&v30[4];
  *(_WORD *)(a1 + 360) = v15;
  *(_BYTE *)(a1 + 368) = v14;
  *(_DWORD *)(a1 + 364) = v13;
  if (v12)
    operator delete(__p[0]);
  v17 = *(_BYTE **)(a1 + 8);
  if (!v17)
    goto LABEL_30;
  if (!*v17)
    goto LABEL_30;
  v18 = *(_QWORD *)(a1 + 16);
  if (!v18)
    goto LABEL_30;
  v19 = (std::string *)(a1 + 24);
  *(_DWORD *)(v18 + 736) = 2;
  v20 = *(_QWORD *)(a1 + 16);
  v21 = *(unsigned __int8 *)(a1 + 456);
  v22 = *(std::string **)(v20 + 656);
  if ((unint64_t)v22 < *(_QWORD *)(v20 + 664))
  {
    if (!v22)
    {
      __break(1u);
      return;
    }
    *(_QWORD *)(v20 + 656) = cricket::Candidate::Candidate(v22, v19) + 18;
    v23 = v20 + 304;
    v24 = *(_QWORD *)(v20 + 312);
    *(_QWORD *)(v20 + 328) = v24;
    if (v24 == v20 + 304)
      goto LABEL_29;
    goto LABEL_28;
  }
  *(_QWORD *)(v20 + 656) = std::vector<cricket::Candidate>::__push_back_slow_path<cricket::Candidate>((std::string **)(v20 + 648), v19);
  v23 = v20 + 304;
  v24 = *(_QWORD *)(v20 + 312);
  *(_QWORD *)(v20 + 328) = v24;
  if (v24 != v20 + 304)
  {
    do
    {
LABEL_28:
      v26 = *(void (**)(uint64_t, uint64_t, std::string *))(v24 + 16);
      v25 = v24 + 16;
      *(_QWORD *)(v20 + 328) = *(_QWORD *)(v25 - 8);
      v26(v25, v20, v19);
      v24 = *(_QWORD *)(v20 + 328);
    }
    while (v24 != v23);
  }
LABEL_29:
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v20 + 344))(v20, v21 != 0);
LABEL_30:
  if (SHIBYTE(v35) < 0)
    operator delete(v34[0]);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,cricket::Port::PostDestroyIfDead(BOOL)::$_0 &&>(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _BYTE *v18;
  std::string *v19;
  _QWORD **v20;
  _QWORD *v21;
  uint64_t v22;
  void *__p;
  char v24;

  v1 = **(_BYTE ***)result;
  if (v1)
  {
    if (*v1)
    {
      v2 = *(_QWORD *)(*(_QWORD *)result + 8);
      if (v2)
      {
        if ((*(_DWORD *)(v2 + 724) | 2) == 2 && !*(_QWORD *)(v2 + 688))
        {
          if (rtc::g_clock)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
          }
          else
          {
            if (!dword_253EA791C)
              mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
            result = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
                   / dword_253EA791C;
          }
          if (result / 1000000 - *(_QWORD *)(v2 + 728) >= *(int *)(v2 + 696))
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
            {
              (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v2 + 176))(&__p, v2);
              rtc::webrtc_logging_impl::Log("\r\n\t", v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/p2p/base/port.cc");
              if (v24 < 0)
                operator delete(__p);
            }
            if (*(_BYTE *)(v2 + 768))
            {
              v19 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/callback_list.cc", 72, "!send_in_progress_", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v3, v4, v5, v6, v22);
              return absl::internal_any_invocable::RemoteManagerNontrivial<cricket::Port::PostDestroyIfDead(BOOL)::$_0>((uint64_t)v19, v20, v21);
            }
            else
            {
              v14 = (_BYTE *)(v2 + 768);
              *(_BYTE *)(v2 + 768) = 1;
              v15 = *(_QWORD *)(v2 + 744);
              v16 = *(_QWORD *)(v2 + 752);
              if (v15 == v16)
              {
                *v14 = 0;
              }
              else
              {
                v17 = 0;
                do
                {
                  (*(void (**)(uint64_t, uint64_t))(v15 + 40))(v15 + 8, v2);
                  v18 = *(_BYTE **)v15;
                  v15 += 56;
                  v17 |= v18 == v14;
                }
                while (v15 != v16);
                *v14 = 0;
                if ((v17 & 1) != 0)
                  webrtc::callback_list_impl::CallbackListReceivers::RemoveReceivers((webrtc::callback_list_impl::CallbackListReceivers *)(v2 + 744), (const void *)(v2 + 768));
              }
              return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<cricket::Port::PostDestroyIfDead(BOOL)::$_0>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*v3)
      {
        v4 = (unsigned int *)(*v3 + 4);
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          MEMORY[0x20BD0ADEC]();
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t webrtc::webrtc_function_impl::CallHelpers<void ()(cricket::PortInterface *)>::CallVoidPtr<std::function<void ()(cricket::PortInterface *)>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v6 = a2;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
    v5 = std::__throw_bad_function_call[abi:sn180100]();
    webrtc::UntypedFunction::PrepareArgs<void ()(cricket::PortInterface *),std::function<void ()(cricket::PortInterface *)> &,std::function<void ()(cricket::PortInterface *)>,(void *)0>(std::function<void ()(cricket::PortInterface *)> &)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(v5);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6);
}

void webrtc::UntypedFunction::PrepareArgs<void ()(cricket::PortInterface *),std::function<void ()(cricket::PortInterface *)> &,std::function<void ()(cricket::PortInterface *)>,(void *)0>(std::function<void ()(cricket::PortInterface *)> &)::{lambda(webrtc::webrtc_function_impl::VoidUnion *)#1}::__invoke(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)a1;
  v2 = *(_QWORD **)(*(_QWORD *)a1 + 24);
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t std::__tree<std::__value_type<rtc::SocketAddress,cricket::Connection *>,std::__map_value_compare<rtc::SocketAddress,std::__value_type<rtc::SocketAddress,cricket::Connection *>,std::less<rtc::SocketAddress>,true>,std::allocator<std::__value_type<rtc::SocketAddress,cricket::Connection *>>>::__erase_unique<rtc::SocketAddress>(char **a1, char *__s2)
{
  char *v2;
  char *v3;
  char *v6;
  int v7;
  char **v8;
  char *v10;
  char *v11;
  char *v12;
  BOOL v13;
  uint64_t *v14;

  v2 = (char *)(a1 + 1);
  v3 = a1[1];
  if (!v3)
    return 0;
  v6 = (char *)(a1 + 1);
  do
  {
    v7 = rtc::SocketAddress::operator<((uint64_t)(v3 + 32), __s2);
    v8 = (char **)(v3 + 8);
    if (!v7)
    {
      v8 = (char **)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || (rtc::SocketAddress::operator<((uint64_t)__s2, v6 + 32) & 1) != 0)
    return 0;
  v10 = (char *)*((_QWORD *)v6 + 1);
  if (v10)
  {
    do
    {
      v11 = v10;
      v10 = *(char **)v10;
    }
    while (v10);
  }
  else
  {
    v12 = v6;
    do
    {
      v11 = (char *)*((_QWORD *)v12 + 2);
      v13 = *(_QWORD *)v11 == (_QWORD)v12;
      v12 = v11;
    }
    while (!v13);
  }
  if (*a1 == v6)
    *a1 = v11;
  v14 = (uint64_t *)a1[1];
  --a1[2];
  std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v14, (uint64_t *)v6);
  if (v6[55] < 0)
    operator delete(*((void **)v6 + 4));
  operator delete(v6);
  return 1;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<cricket::Port::DestroyConnectionInternal(cricket::Connection *,BOOL)::$_1>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void *cricket::RelayServerConfig::RelayServerConfig(uint64_t a1, uint64_t a2, _BYTE *__src, size_t __len, char *a5, size_t a6, int a7)
{
  void *result;
  unint64_t v11;
  __int128 v12;
  void *__p[2];
  uint64_t v14;
  void *v15;
  _BYTE v16[20];
  __int16 v17;
  int v18;
  char v19;
  int v20;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = cricket::RelayCredentials::RelayCredentials((_BYTE *)(a1 + 24), __src, __len, a5, a6);
  *(_DWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v15 = &unk_24C0ACDA0;
  memset(v16, 0, sizeof(v16));
  if (__p != (void **)a2)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      result = std::string::__assign_no_alias<true>(__p, *(char **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v14 = *(_QWORD *)(a2 + 16);
    }
  }
  *(_DWORD *)v16 = *(_DWORD *)(a2 + 32);
  *(_OWORD *)&v16[4] = *(_OWORD *)(a2 + 36);
  v17 = *(_WORD *)(a2 + 56);
  v19 = *(_BYTE *)(a2 + 64);
  v18 = *(_DWORD *)(a2 + 60);
  v20 = a7;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11 >= *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = std::vector<cricket::ProtocolAddress>::__push_back_slow_path<cricket::ProtocolAddress>(a1, (uint64_t)__p);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return (void *)a1;
LABEL_11:
    operator delete(__p[0]);
    return (void *)a1;
  }
  if (v11)
  {
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = &unk_24C0ACDA0;
    *(_QWORD *)(v11 + 32) = 0;
    *(_QWORD *)(v11 + 40) = 0;
    *(_DWORD *)(v11 + 48) = 0;
    if ((void **)v11 != __p)
    {
      if (SHIBYTE(v14) < 0)
      {
        std::string::__assign_no_alias<true>((_QWORD *)v11, (char *)__p[0], (size_t)__p[1]);
      }
      else
      {
        v12 = *(_OWORD *)__p;
        *(_QWORD *)(v11 + 16) = v14;
        *(_OWORD *)v11 = v12;
      }
    }
    *(_DWORD *)(v11 + 32) = *(_DWORD *)v16;
    *(_OWORD *)(v11 + 36) = *(_OWORD *)&v16[4];
    *(_WORD *)(v11 + 56) = v17;
    *(_BYTE *)(v11 + 64) = v19;
    *(_DWORD *)(v11 + 60) = v18;
    *(_DWORD *)(v11 + 72) = v20;
    *(_QWORD *)(a1 + 8) = v11 + 80;
    if ((SHIBYTE(v14) & 0x80000000) == 0)
      return (void *)a1;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t cricket::RelayServerConfig::RelayServerConfig(uint64_t a1, char **a2)
{
  char *v4;
  char *v5;
  int64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  __int128 v16;
  char *v17;
  char *v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  std::string *v24;
  __int128 v25;
  char *v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  std::string *v33;
  __int128 v34;
  std::string *v35;
  __int128 v36;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 != *a2)
  {
    v7 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 4);
    if (v7 >= 0x333333333333334)
      goto LABEL_33;
    v8 = (char *)operator new(v6);
    v9 = 0;
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = &v8[80 * v7];
    do
    {
      v10 = &v4[v9];
      v11 = &v8[v9];
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      *((_QWORD *)v11 + 2) = 0;
      *((_QWORD *)v11 + 3) = &unk_24C0ACDA0;
      *(_QWORD *)&v8[v9 + 32] = 0;
      *((_QWORD *)v11 + 5) = 0;
      *((_DWORD *)v11 + 12) = 0;
      if (v8 != v4)
      {
        if (v10[23] < 0)
        {
          std::string::__assign_no_alias<true>(&v8[v9], *(char **)&v4[v9], *(_QWORD *)&v4[v9 + 8]);
        }
        else
        {
          v12 = *(_OWORD *)v10;
          *((_QWORD *)v11 + 2) = *((_QWORD *)v10 + 2);
          *(_OWORD *)v11 = v12;
        }
      }
      *(_DWORD *)&v8[v9 + 32] = *((_DWORD *)v10 + 8);
      *(_OWORD *)(v11 + 36) = *(_OWORD *)(v10 + 36);
      *((_WORD *)v11 + 28) = *((_WORD *)v10 + 28);
      v11[64] = v10[64];
      *((_DWORD *)v11 + 15) = *((_DWORD *)v10 + 15);
      *((_DWORD *)v11 + 18) = *((_DWORD *)v10 + 18);
      v9 += 80;
    }
    while (&v4[v9] != v5);
    *(_QWORD *)(a1 + 8) = &v8[v9];
  }
  v13 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v13, a2[3], (std::string::size_type)a2[4]);
    v15 = (std::string *)(a1 + 48);
    if ((*((char *)a2 + 71) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else
  {
    v14 = *(_OWORD *)(a2 + 3);
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    v15 = (std::string *)(a1 + 48);
    if ((*((char *)a2 + 71) & 0x80000000) == 0)
    {
LABEL_12:
      v16 = *((_OWORD *)a2 + 3);
      v15->__r_.__value_.__r.__words[2] = (std::string::size_type)a2[8];
      *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
      goto LABEL_15;
    }
  }
  std::string::__init_copy_ctor_external(v15, a2[6], (std::string::size_type)a2[7]);
LABEL_15:
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v17 = a2[10];
  v18 = a2[11];
  v19 = v18 - v17;
  if (v18 != v17)
  {
    v20 = 0xAAAAAAAAAAAAAAABLL * (v19 >> 3);
    if (v20 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_33;
    v21 = (char *)operator new(v19);
    v22 = 0;
    *(_QWORD *)(a1 + 80) = v21;
    *(_QWORD *)(a1 + 88) = v21;
    *(_QWORD *)(a1 + 96) = &v21[24 * v20];
    do
    {
      while (1)
      {
        v23 = &v17[v22];
        v24 = (std::string *)&v21[v22];
        if ((v17[v22 + 23] & 0x80000000) == 0)
          break;
        std::string::__init_copy_ctor_external(v24, *(const std::string::value_type **)v23, *((_QWORD *)v23 + 1));
        v22 += 24;
        if (&v17[v22] == v18)
          goto LABEL_21;
      }
      v25 = *(_OWORD *)v23;
      v24->__r_.__value_.__r.__words[2] = *((_QWORD *)v23 + 2);
      *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
      v22 += 24;
    }
    while (&v17[v22] != v18);
LABEL_21:
    *(_QWORD *)(a1 + 88) = &v21[v22];
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v26 = a2[13];
  v27 = a2[14];
  v28 = v27 - v26;
  if (v27 == v26)
    goto LABEL_29;
  v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
  if (v29 > 0xAAAAAAAAAAAAAAALL)
LABEL_33:
    abort();
  v30 = (char *)operator new(v28);
  v31 = 0;
  *(_QWORD *)(a1 + 104) = v30;
  *(_QWORD *)(a1 + 112) = v30;
  *(_QWORD *)(a1 + 120) = &v30[24 * v29];
  do
  {
    while (1)
    {
      v32 = &v26[v31];
      v33 = (std::string *)&v30[v31];
      if ((v26[v31 + 23] & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)v32, *((_QWORD *)v32 + 1));
      v31 += 24;
      if (&v26[v31] == v27)
        goto LABEL_28;
    }
    v34 = *(_OWORD *)v32;
    v33->__r_.__value_.__r.__words[2] = *((_QWORD *)v32 + 2);
    *(_OWORD *)&v33->__r_.__value_.__l.__data_ = v34;
    v31 += 24;
  }
  while (&v26[v31] != v27);
LABEL_28:
  *(_QWORD *)(a1 + 112) = &v30[v31];
LABEL_29:
  *(_QWORD *)(a1 + 128) = a2[16];
  v35 = (std::string *)(a1 + 136);
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external(v35, a2[17], (std::string::size_type)a2[18]);
  }
  else
  {
    v36 = *(_OWORD *)(a2 + 17);
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
  }
  return a1;
}

void cricket::RelayServerConfig::~RelayServerConfig(void **this)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;

  if (*((char *)this + 159) < 0)
  {
    operator delete(this[17]);
    v2 = (void **)this[13];
    if (!v2)
    {
LABEL_3:
      v3 = (void **)this[10];
      if (!v3)
        goto LABEL_4;
LABEL_16:
      v7 = (void **)this[11];
      if (v7 == v3)
      {
        this[11] = v3;
        operator delete(v3);
        if (*((char *)this + 71) < 0)
          goto LABEL_23;
      }
      else
      {
        do
        {
          if (*((char *)v7 - 1) < 0)
            operator delete(*(v7 - 3));
          v7 -= 3;
        }
        while (v7 != v3);
        v8 = this[10];
        this[11] = v3;
        operator delete(v8);
        if (*((char *)this + 71) < 0)
          goto LABEL_23;
      }
LABEL_5:
      if ((*((char *)this + 47) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_24:
      operator delete(this[3]);
      v4 = (void **)*this;
      if (!*this)
        return;
      goto LABEL_25;
    }
  }
  else
  {
    v2 = (void **)this[13];
    if (!v2)
      goto LABEL_3;
  }
  v5 = (void **)this[14];
  if (v5 == v2)
  {
    this[14] = v2;
    operator delete(v2);
    v3 = (void **)this[10];
    if (v3)
      goto LABEL_16;
  }
  else
  {
    do
    {
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v5 -= 3;
    }
    while (v5 != v2);
    v6 = this[13];
    this[14] = v2;
    operator delete(v6);
    v3 = (void **)this[10];
    if (v3)
      goto LABEL_16;
  }
LABEL_4:
  if ((*((char *)this + 71) & 0x80000000) == 0)
    goto LABEL_5;
LABEL_23:
  operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    goto LABEL_24;
LABEL_6:
  v4 = (void **)*this;
  if (!*this)
    return;
LABEL_25:
  v9 = (void **)this[1];
  v10 = v4;
  if (v9 != v4)
  {
    do
    {
      if (*((char *)v9 - 57) < 0)
        operator delete(*(v9 - 10));
      v9 -= 10;
    }
    while (v9 != v4);
    v10 = *this;
  }
  this[1] = v4;
  operator delete(v10);
}

_QWORD *cricket::PortAllocatorSession::PortAllocatorSession(_QWORD *a1, char *__src, size_t __len, int a4, char *a5, size_t a6, char *a7, size_t a8, unsigned int a9)
{
  char *v17;
  char *v18;
  size_t v19;
  size_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;

  a1[2] = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  a1[3] = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  a1[5] = 0;
  a1[4] = a1 + 5;
  *a1 = off_24C0BAB68;
  a1[1] = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  a1[6] = 0;
  a1[7] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  a1[8] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  a1[9] = a1 + 9;
  a1[10] = a1 + 9;
  a1[11] = 0;
  a1[12] = a1 + 9;
  *((_BYTE *)a1 + 104) = 0;
  a1[14] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  a1[15] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  a1[16] = a1 + 16;
  a1[17] = a1 + 16;
  a1[18] = 0;
  a1[19] = a1 + 16;
  *((_BYTE *)a1 + 160) = 0;
  a1[21] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  a1[22] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  a1[23] = a1 + 23;
  a1[24] = a1 + 23;
  a1[25] = 0;
  a1[26] = a1 + 23;
  *((_BYTE *)a1 + 216) = 0;
  a1[28] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  a1[29] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  a1[30] = a1 + 30;
  a1[31] = a1 + 30;
  a1[32] = 0;
  a1[33] = a1 + 30;
  *((_BYTE *)a1 + 272) = 0;
  a1[35] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  a1[36] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  a1[37] = a1 + 37;
  a1[38] = a1 + 37;
  a1[39] = 0;
  a1[40] = a1 + 37;
  *((_BYTE *)a1 + 328) = 0;
  a1[42] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  a1[43] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  a1[44] = a1 + 44;
  a1[45] = a1 + 44;
  a1[46] = 0;
  a1[47] = a1 + 44;
  *((_BYTE *)a1 + 384) = 0;
  a1[49] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_disconnect;
  a1[50] = sigslot::_signal_base<sigslot::single_threaded>::do_slot_duplicate;
  a1[51] = a1 + 51;
  a1[52] = a1 + 51;
  a1[53] = 0;
  a1[54] = a1 + 51;
  *((_BYTE *)a1 + 440) = 0;
  a1[56] = a9;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_33;
  if (__len > 0x16)
  {
    v19 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v19 = __len | 7;
    v20 = v19 + 1;
    v17 = (char *)operator new(v19 + 1);
    a1[58] = __len;
    a1[59] = v20 | 0x8000000000000000;
    a1[57] = v17;
    v18 = &v17[__len];
    if (v17 > __src)
      goto LABEL_9;
  }
  else
  {
    v17 = (char *)(a1 + 57);
    *((_BYTE *)a1 + 479) = __len;
    v18 = (char *)a1 + __len + 456;
    if (a1 + 57 > (_QWORD *)__src)
      goto LABEL_9;
  }
  if (v18 > __src)
    goto LABEL_32;
LABEL_9:
  if (__len)
    memmove(v17, __src, __len);
  *v18 = 0;
  *((_DWORD *)a1 + 120) = a4;
  if (a6 > 0x7FFFFFFFFFFFFFF7)
LABEL_33:
    abort();
  if (a6 <= 0x16)
  {
    v21 = (char *)(a1 + 61);
    *((_BYTE *)a1 + 511) = a6;
    v22 = (char *)a1 + a6 + 488;
    if (a1 + 61 > (_QWORD *)a5)
      goto LABEL_19;
    goto LABEL_18;
  }
  v23 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a6 | 7) != 0x17)
    v23 = a6 | 7;
  v24 = v23 + 1;
  v21 = (char *)operator new(v23 + 1);
  a1[62] = a6;
  a1[63] = v24 | 0x8000000000000000;
  a1[61] = v21;
  v22 = &v21[a6];
  if (v21 <= a5)
  {
LABEL_18:
    if (v22 <= a5)
      goto LABEL_19;
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
LABEL_19:
  if (a6)
    memmove(v21, a5, a6);
  *v22 = 0;
  if (a8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_33;
  if (a8 <= 0x16)
  {
    v25 = (char *)(a1 + 64);
    *((_BYTE *)a1 + 535) = a8;
    v26 = (char *)a1 + a8 + 512;
    if (a1 + 64 > (_QWORD *)a7)
      goto LABEL_29;
    goto LABEL_28;
  }
  v27 = (a8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a8 | 7) != 0x17)
    v27 = a8 | 7;
  v28 = v27 + 1;
  v25 = (char *)operator new(v27 + 1);
  a1[64] = v25;
  a1[66] = v28 | 0x8000000000000000;
  a1[65] = a8;
  v26 = &v25[a8];
  if (v25 <= a7)
  {
LABEL_28:
    if (v26 <= a7)
      goto LABEL_29;
    goto LABEL_32;
  }
LABEL_29:
  if (a8)
    memmove(v25, a7, a8);
  *v26 = 0;
  *((_BYTE *)a1 + 536) = 0;
  return a1;
}

void cricket::PortAllocatorSession::~PortAllocatorSession(void **this)
{
  char *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *i;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *j;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *k;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char *m;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *n;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *ii;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;

  *this = off_24C0BAB68;
  if (*((char *)this + 535) < 0)
  {
    operator delete(this[64]);
    if ((*((char *)this + 511) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*((char *)this + 479) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*((char *)this + 511) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(this[61]);
  if ((*((char *)this + 479) & 0x80000000) == 0)
  {
LABEL_4:
    v2 = (char *)this[53];
    if (!v2)
      goto LABEL_10;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(this[57]);
  v2 = (char *)this[53];
  if (!v2)
    goto LABEL_10;
  do
  {
LABEL_9:
    v3 = (uint64_t *)this[52];
    v4 = v3[3];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    this[53] = v2 - 1;
    operator delete(v3);
    (*(void (**)(uint64_t, char *))(v4 + 16))(v4, (char *)this + 392);
    v2 = (char *)this[53];
  }
  while (v2);
LABEL_10:
  this[54] = this + 51;
  for (i = (char *)this[46]; i; i = (char *)this[46])
  {
    v7 = (uint64_t *)this[45];
    v8 = v7[3];
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = v7[1];
    *(_QWORD *)v7[1] = v9;
    this[46] = i - 1;
    operator delete(v7);
    (*(void (**)(uint64_t, char *))(v8 + 16))(v8, (char *)this + 336);
  }
  this[47] = this + 44;
  for (j = (char *)this[39]; j; j = (char *)this[39])
  {
    v11 = (uint64_t *)this[38];
    v12 = v11[3];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = v11[1];
    *(_QWORD *)v11[1] = v13;
    this[39] = j - 1;
    operator delete(v11);
    (*(void (**)(uint64_t, char *))(v12 + 16))(v12, (char *)this + 280);
  }
  this[40] = this + 37;
  for (k = (char *)this[32]; k; k = (char *)this[32])
  {
    v15 = (uint64_t *)this[31];
    v16 = v15[3];
    v17 = *v15;
    *(_QWORD *)(v17 + 8) = v15[1];
    *(_QWORD *)v15[1] = v17;
    this[32] = k - 1;
    operator delete(v15);
    (*(void (**)(uint64_t, char *))(v16 + 16))(v16, (char *)this + 224);
  }
  this[33] = this + 30;
  for (m = (char *)this[25]; m; m = (char *)this[25])
  {
    v19 = (uint64_t *)this[24];
    v20 = v19[3];
    v21 = *v19;
    *(_QWORD *)(v21 + 8) = v19[1];
    *(_QWORD *)v19[1] = v21;
    this[25] = m - 1;
    operator delete(v19);
    (*(void (**)(uint64_t, char *))(v20 + 16))(v20, (char *)this + 168);
  }
  this[26] = this + 23;
  for (n = (char *)this[18]; n; n = (char *)this[18])
  {
    v23 = (uint64_t *)this[17];
    v24 = v23[3];
    v25 = *v23;
    *(_QWORD *)(v25 + 8) = v23[1];
    *(_QWORD *)v23[1] = v25;
    this[18] = n - 1;
    operator delete(v23);
    (*(void (**)(uint64_t, char *))(v24 + 16))(v24, (char *)this + 112);
  }
  this[19] = this + 16;
  for (ii = (char *)this[11]; ii; ii = (char *)this[11])
  {
    v27 = (uint64_t *)this[10];
    v28 = v27[3];
    v29 = *v27;
    *(_QWORD *)(v29 + 8) = v27[1];
    *(_QWORD *)v27[1] = v29;
    this[11] = ii - 1;
    operator delete(v27);
    (*(void (**)(uint64_t, char *))(v28 + 16))(v28, (char *)this + 56);
  }
  this[12] = this + 9;
  *this = &unk_24C0ACE30;
  ((void (*)(void **))this[3])(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(this + 4), this[5]);
}

uint64_t cricket::PortAllocatorSession::IsCleared(cricket::PortAllocatorSession *this)
{
  return 0;
}

uint64_t cricket::PortAllocatorSession::IsStopped(cricket::PortAllocatorSession *this)
{
  return 0;
}

uint64_t cricket::PortAllocatorSession::generation(cricket::PortAllocatorSession *this)
{
  return *((unsigned int *)this + 113);
}

uint64_t cricket::PortAllocatorSession::set_generation(uint64_t this, int a2)
{
  *(_DWORD *)(this + 452) = a2;
  return this;
}

uint64_t cricket::PortAllocator::Initialize(uint64_t this)
{
  *(_BYTE *)(this + 112) = 1;
  return this;
}

void cricket::PortAllocator::~PortAllocator(cricket::PortAllocator *this)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = off_24C0BAC10;
  v2 = (_QWORD *)*((_QWORD *)this + 29);
  if (v2)
  {
    v3 = (_QWORD *)*((_QWORD *)this + 30);
    v4 = (void *)*((_QWORD *)this + 29);
    if (v3 != v2)
    {
      do
      {
        v6 = *--v3;
        v5 = v6;
        *v3 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 29);
    }
    *((_QWORD *)this + 30) = v2;
    operator delete(v4);
  }
  v7 = *((_QWORD *)this + 25);
  if (v7)
  {
    v8 = *((_QWORD *)this + 26);
    v9 = (void *)*((_QWORD *)this + 25);
    if (v8 != v7)
    {
      do
        cricket::RelayServerConfig::~RelayServerConfig((void **)(v8 - 160));
      while (v8 != v7);
      v9 = (void *)*((_QWORD *)this + 25);
    }
    *((_QWORD *)this + 26) = v7;
    operator delete(v9);
  }
  std::__tree<rtc::SocketAddress>::destroy((uint64_t)this + 176, *((char **)this + 23));
  if (*((char *)this + 167) < 0)
  {
    operator delete(*((void **)this + 18));
    v10 = *((_QWORD *)this + 11);
    if (!v10)
      goto LABEL_19;
  }
  else
  {
    v10 = *((_QWORD *)this + 11);
    if (!v10)
      goto LABEL_19;
  }
  do
  {
    v11 = (uint64_t *)*((_QWORD *)this + 10);
    v12 = v11[3];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = v11[1];
    *(_QWORD *)v11[1] = v13;
    *((_QWORD *)this + 11) = v10 - 1;
    operator delete(v11);
    (*(void (**)(uint64_t, char *))(v12 + 16))(v12, (char *)this + 56);
    v10 = *((_QWORD *)this + 11);
  }
  while (v10);
LABEL_19:
  *((_QWORD *)this + 12) = (char *)this + 72;
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(cricket::PortAllocator *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

uint64_t cricket::PortAllocator::set_restrict_ice_credentials_change(uint64_t this, char a2)
{
  *(_BYTE *)(this + 280) = a2;
  return this;
}

uint64_t cricket::PortAllocator::SetConfiguration(uint64_t a1, uint64_t a2, void ****a3, int a4, int a5, uint64_t a6, int *a7)
{
  _QWORD *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  void ***v21;
  void ***v22;
  uint64_t *v23;
  void **v24;
  void **v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void **v29;
  void **v30;
  int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  void **v36;
  int v37;
  unsigned __int8 *v38;
  uint64_t v39;
  char v40;
  void **v41;
  void ***v42;
  char **v43;
  unint64_t v44;
  uint64_t v45;
  void ***v46;
  void ***v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  void ***v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  void ***v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *p_p;
  _BYTE *v78;
  _QWORD *v79;
  uint64_t v80;
  void ***v82;
  void ***v83;
  uint64_t v84;
  int *v85;
  int *v86;
  _BYTE *v88;
  void *v89;
  uint64_t v90;
  unsigned __int8 v91;
  void *__p;
  uint64_t v93;
  unsigned __int8 v94;

  v13 = (_QWORD *)(a1 + 176);
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 192))
    goto LABEL_64;
  v14 = (char *)(a2 + 8);
  v15 = *(char **)a2;
  if (*(_QWORD *)a2 != a2 + 8)
  {
    v16 = (_QWORD *)*v13;
    do
    {
      if (!rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)(v15 + 32), (const rtc::SocketAddress *)(v16 + 4))
        || *((unsigned __int16 *)v15 + 44) != *((unsigned __int16 *)v16 + 44))
      {
        goto LABEL_64;
      }
      v17 = (char *)*((_QWORD *)v15 + 1);
      v18 = v15;
      if (v17)
      {
        do
        {
          v15 = v17;
          v17 = *(char **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v15 = (char *)*((_QWORD *)v18 + 2);
          v27 = *(_QWORD *)v15 == (_QWORD)v18;
          v18 = v15;
        }
        while (!v27);
      }
      v19 = (_QWORD *)v16[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v16[2];
          v27 = *v20 == (_QWORD)v16;
          v16 = v20;
        }
        while (!v27);
      }
      v16 = v20;
    }
    while (v15 != v14);
  }
  v22 = *a3;
  v21 = a3[1];
  v23 = *(uint64_t **)(a1 + 200);
  if ((char *)v21 - (char *)*a3 != *(_QWORD *)(a1 + 208) - (_QWORD)v23)
    goto LABEL_64;
  if (v22 == v21)
  {
    v40 = 0;
    goto LABEL_65;
  }
  v84 = a6;
  v85 = a7;
  v83 = a3[1];
  while (1)
  {
    v25 = *v22;
    v24 = v22[1];
    v26 = *v23;
    if ((char *)v24 - (char *)*v22 != v23[1] - *v23)
      goto LABEL_149;
    if (v25 != v24)
    {
      while (rtc::SocketAddress::EqualIPs((rtc::SocketAddress *)v25, (const rtc::SocketAddress *)v26))
      {
        v27 = *((unsigned __int16 *)v25 + 28) == *(unsigned __int16 *)(v26 + 56)
           && *((_DWORD *)v25 + 18) == *(_DWORD *)(v26 + 72);
        if (!v27)
          break;
        v25 += 10;
        v26 += 80;
        if (v25 == v24)
          goto LABEL_30;
      }
LABEL_149:
      v40 = 1;
      a6 = v84;
      a7 = v85;
      goto LABEL_65;
    }
LABEL_30:
    v28 = *((unsigned __int8 *)v22 + 47);
    if ((v28 & 0x80u) == 0)
      v29 = (void **)*((unsigned __int8 *)v22 + 47);
    else
      v29 = v22[4];
    v30 = (void **)*((unsigned __int8 *)v23 + 47);
    v31 = (char)v30;
    if ((char)v30 < 0)
      v30 = (void **)v23[4];
    a6 = v84;
    a7 = v85;
    if (v29 != v30)
      goto LABEL_64;
    v32 = v31 >= 0 ? (unsigned __int8 *)(v23 + 3) : (unsigned __int8 *)v23[3];
    if ((v28 & 0x80) == 0)
      break;
    if (memcmp(v22[3], v32, (size_t)v22[4]))
      goto LABEL_64;
LABEL_46:
    v34 = *((unsigned __int8 *)v22 + 71);
    if ((v34 & 0x80u) == 0)
      v35 = (void **)*((unsigned __int8 *)v22 + 71);
    else
      v35 = v22[7];
    v36 = (void **)*((unsigned __int8 *)v23 + 71);
    v37 = (char)v36;
    if ((char)v36 < 0)
      v36 = (void **)v23[7];
    if (v35 != v36)
      goto LABEL_64;
    if (v37 >= 0)
      v38 = (unsigned __int8 *)(v23 + 6);
    else
      v38 = (unsigned __int8 *)v23[6];
    if ((v34 & 0x80) != 0)
    {
      if (memcmp(v22[6], v38, (size_t)v22[7]))
        goto LABEL_64;
    }
    else if (*((_BYTE *)v22 + 71))
    {
      v39 = 0;
      while (*((unsigned __int8 *)v22 + v39 + 48) == v38[v39])
      {
        if (v34 == ++v39)
          goto LABEL_62;
      }
      goto LABEL_64;
    }
LABEL_62:
    v40 = 0;
    v22 += 20;
    v23 += 20;
    if (v22 == v83)
      goto LABEL_65;
  }
  if (!*((_BYTE *)v22 + 47))
    goto LABEL_46;
  v33 = 0;
  while (*((unsigned __int8 *)v22 + v33 + 24) == v32[v33])
  {
    if (v28 == ++v33)
      goto LABEL_46;
  }
LABEL_64:
  v40 = 1;
LABEL_65:
  if (v13 != (_QWORD *)a2)
    std::__tree<rtc::SocketAddress>::__assign_multi<std::__tree_const_iterator<rtc::SocketAddress,std::__tree_node<rtc::SocketAddress,void *> *,long>>((uint64_t)v13, *(char **)a2, (char *)(a2 + 8));
  v41 = (void **)(a1 + 200);
  if ((void ****)(a1 + 200) == a3)
    goto LABEL_95;
  v86 = a7;
  v42 = *a3;
  v43 = (char **)a3[1];
  v44 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v43 - (char *)*a3) >> 5);
  v45 = *(_QWORD *)(a1 + 216);
  v46 = *(void ****)(a1 + 200);
  if (0xCCCCCCCCCCCCCCCDLL * ((v45 - (uint64_t)v46) >> 5) >= v44)
  {
    v56 = *(void ****)(a1 + 208);
    if (0xCCCCCCCCCCCCCCCDLL * (((char *)v56 - (char *)v46) >> 5) < v44)
    {
      v57 = a6;
      v58 = (char **)&v42[4 * (((char *)v56 - (char *)v46) >> 5)];
      if (v56 != v46)
      {
        v59 = 32 * (((char *)v56 - (char *)v46) >> 5);
        do
        {
          cricket::RelayServerConfig::operator=(v46, v42);
          v42 += 20;
          v46 += 20;
          v59 -= 160;
        }
        while (v59);
        v46 = *(void ****)(a1 + 208);
      }
      v60 = v46;
      if (v58 != v43)
      {
        v60 = v46;
        v61 = (uint64_t)v46;
        while (v61)
        {
          v62 = cricket::RelayServerConfig::RelayServerConfig(v61, v58);
          v58 += 20;
          v61 = v62 + 160;
          v60 += 20;
          if (v58 == v43)
            goto LABEL_94;
        }
LABEL_151:
        __break(1u);
LABEL_152:
        abort();
      }
LABEL_94:
      *(_QWORD *)(a1 + 208) = v60;
      a7 = v86;
      a6 = v57;
LABEL_95:
      *(_DWORD *)(a1 + 256) = a5;
      *(_DWORD *)(a1 + 224) = a4;
      if ((v40 & 1) == 0)
        goto LABEL_84;
      goto LABEL_96;
    }
    if (v42 == (void ***)v43)
    {
      v82 = *(void ****)(a1 + 200);
      a7 = v86;
      if (v56 == v46)
        goto LABEL_145;
    }
    else
    {
      v82 = *(void ****)(a1 + 200);
      do
      {
        cricket::RelayServerConfig::operator=(v46, v42);
        v42 += 20;
        v46 += 20;
        v82 += 20;
      }
      while (v42 != (void ***)v43);
      v56 = *(void ****)(a1 + 208);
      a7 = v86;
      if (v56 == v82)
      {
LABEL_145:
        *(_QWORD *)(a1 + 208) = v82;
        *(_DWORD *)(a1 + 256) = a5;
        *(_DWORD *)(a1 + 224) = a4;
        if ((v40 & 1) == 0)
          goto LABEL_84;
        goto LABEL_96;
      }
    }
    do
      cricket::RelayServerConfig::~RelayServerConfig((void **)v56 - 20);
    while (v56 != v82);
    goto LABEL_145;
  }
  if (v46)
  {
    v47 = *(void ****)(a1 + 208);
    v48 = *(void **)(a1 + 200);
    if (v47 != v46)
    {
      do
        cricket::RelayServerConfig::~RelayServerConfig((void **)v47 - 20);
      while (v47 != v46);
      v48 = *v41;
    }
    *(_QWORD *)(a1 + 208) = v46;
    operator delete(v48);
    v45 = 0;
    *v41 = 0;
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
  }
  if (v44 > 0x199999999999999)
    goto LABEL_152;
  v49 = 0xCCCCCCCCCCCCCCCDLL * (v45 >> 5);
  v50 = 2 * v49;
  if (2 * v49 <= v44)
    v50 = v44;
  v51 = v49 >= 0xCCCCCCCCCCCCCCLL ? 0x199999999999999 : v50;
  if (v51 > 0x199999999999999)
    goto LABEL_152;
  v52 = 160 * v51;
  v53 = (char *)operator new(160 * v51);
  *(_QWORD *)(a1 + 200) = v53;
  *(_QWORD *)(a1 + 208) = v53;
  for (*(_QWORD *)(a1 + 216) = &v53[v52]; v42 != (void ***)v43; v53 = (char *)(v54 + 160))
  {
    v54 = cricket::RelayServerConfig::RelayServerConfig((uint64_t)v53, (char **)v42);
    v42 += 20;
  }
  *(_QWORD *)(a1 + 208) = v53;
  a7 = v86;
  *(_DWORD *)(a1 + 256) = a5;
  *(_DWORD *)(a1 + 224) = a4;
  if ((v40 & 1) != 0)
  {
LABEL_96:
    v63 = a6;
    v55 = *(char **)(a1 + 232);
    v64 = *(char **)(a1 + 240);
    if (v64 != v55)
    {
      do
      {
        v66 = *((_QWORD *)v64 - 1);
        v64 -= 8;
        v65 = v66;
        *(_QWORD *)v64 = 0;
        if (v66)
          (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
      }
      while (v64 != v55);
      a4 = *(_DWORD *)(a1 + 224);
    }
    *(_QWORD *)(a1 + 240) = v55;
    a6 = v63;
    goto LABEL_103;
  }
LABEL_84:
  v55 = *(char **)(a1 + 240);
LABEL_103:
  v67 = *(char **)(a1 + 232);
  *(_QWORD *)(a1 + 264) = a6;
  while (a4 < (int)((unint64_t)(v55 - v67) >> 3))
  {
    if (v67 == v55)
      goto LABEL_151;
    v68 = *((_QWORD *)v55 - 1);
    *((_QWORD *)v55 - 1) = 0;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
    v69 = *(_QWORD *)(a1 + 240);
    if (*(_QWORD *)(a1 + 232) == v69)
      goto LABEL_151;
    v71 = *(_QWORD *)(v69 - 8);
    v55 = (char *)(v69 - 8);
    v70 = v71;
    *(_QWORD *)v55 = 0;
    if (v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
    *(_QWORD *)(a1 + 240) = v55;
    a4 = *(_DWORD *)(a1 + 224);
    v67 = *(char **)(a1 + 232);
  }
  v72 = *a7;
  *(_BYTE *)(a1 + 276) = *((_BYTE *)a7 + 4);
  *(_DWORD *)(a1 + 272) = v72;
  if (v67 != v55)
  {
    do
    {
      v73 = *(_QWORD *)v67;
      v67 += 8;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v73 + 88))(v73, a1 + 272);
    }
    while (v67 != v55);
    if (*(_DWORD *)(a1 + 224) <= (int)((*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3))
      return 1;
    while (1)
    {
LABEL_120:
      cricket::IceCredentialsIterator::CreateRandomIceCredentials(&v89);
      if ((char)v91 < 0)
      {
        v74 = v90;
        if (v90 < 0)
          goto LABEL_151;
        v75 = v89;
        if (v90)
        {
          if (!v89)
            goto LABEL_151;
        }
      }
      else
      {
        v74 = v91;
        v75 = &v89;
      }
      if ((char)v94 < 0)
      {
        v76 = v93;
        if (v93 < 0)
          goto LABEL_151;
        p_p = __p;
        if (v93)
        {
          if (!__p)
            goto LABEL_151;
        }
      }
      else
      {
        v76 = v94;
        p_p = &__p;
      }
      v78 = (_BYTE *)(*(uint64_t (**)(uint64_t, char *, _QWORD, _QWORD, void *, uint64_t, void *, uint64_t))(*(_QWORD *)a1 + 64))(a1, &byte_208EB9246, 0, 0, v75, v74, p_p, v76);
      v78[536] = 1;
      (*(void (**)(_BYTE *))(*(_QWORD *)v78 + 24))(v78);
      v88 = v78;
      v79 = *(_QWORD **)(a1 + 240);
      if ((unint64_t)v79 >= *(_QWORD *)(a1 + 248))
        break;
      if (!v79)
        goto LABEL_151;
      v88 = 0;
      *v79 = v78;
      *(_QWORD *)(a1 + 240) = v79 + 1;
      v80 = (uint64_t)v88;
      v88 = 0;
      if (v80)
        goto LABEL_135;
LABEL_136:
      if ((char)v94 < 0)
      {
        operator delete(__p);
        if (((char)v91 & 0x80000000) == 0)
          goto LABEL_119;
      }
      else if (((char)v91 & 0x80000000) == 0)
      {
LABEL_119:
        if (*(_DWORD *)(a1 + 224) <= (int)((*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3))
          return 1;
        continue;
      }
      operator delete(v89);
      if (*(_DWORD *)(a1 + 224) <= (int)((*(_QWORD *)(a1 + 240) - *(_QWORD *)(a1 + 232)) >> 3))
        return 1;
    }
    *(_QWORD *)(a1 + 240) = std::vector<std::unique_ptr<webrtc::PushSincResampler>>::__push_back_slow_path<std::unique_ptr<webrtc::PushSincResampler>>((_QWORD *)(a1 + 232), (uint64_t *)&v88);
    v80 = (uint64_t)v88;
    v88 = 0;
    if (!v80)
      goto LABEL_136;
LABEL_135:
    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
    goto LABEL_136;
  }
  if (a4 > 0)
    goto LABEL_120;
  return 1;
}

void cricket::PortAllocator::TakePooledSession(__int128 *__src@<X4>, size_t __len@<X5>, char *a3@<X6>, uint64_t a4@<X0>, __int128 *a5@<X1>, size_t a6@<X2>, int a7@<W3>, size_t a8@<X7>, _QWORD *a9@<X8>)
{
  void **v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t p_p;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void **v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  const void **v32;
  unsigned __int8 *v33;
  uint64_t v34;
  __int128 *v35;
  __int128 *v36;
  __int128 *v37;
  uint64_t v38;
  uint64_t v39;
  void **v40;
  __int128 *v41;
  __int128 *v42;
  __int128 *v43;
  size_t v44;
  size_t v45;
  void **v46;
  __int128 *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 **v58;
  int v61;
  __int128 *__srca;
  uint64_t *v64;
  unsigned __int8 *v65;
  void *v66[2];
  unsigned __int8 v67;
  void *__p;
  uint64_t v69;
  char v70;
  __int128 v71;
  unint64_t v72;

  if (*(_QWORD *)(a4 + 232) == *(_QWORD *)(a4 + 240))
  {
    *a9 = 0;
    return;
  }
  cricket::IceParameters::IceParameters(v66, __src, __len, a3, a8, 0);
  if (*(_BYTE *)(a4 + 280))
    v15 = v66;
  else
    v15 = 0;
  v16 = *(_QWORD **)(a4 + 232);
  v17 = *(_QWORD **)(a4 + 240);
  v61 = a7;
  __srca = a5;
  if (v16 != v17)
  {
    v18 = (uint64_t)&v70;
    if (!*(_BYTE *)(a4 + 280))
      v18 = 47;
    v65 = (unsigned __int8 *)v18;
    p_p = (uint64_t)&__p;
    v20 = (uint64_t)&v69;
    if (!*(_BYTE *)(a4 + 280))
      v20 = 32;
    v64 = (uint64_t *)v20;
    if (!*(_BYTE *)(a4 + 280))
      p_p = 24;
    v58 = (unsigned __int8 **)p_p;
    if (*(_BYTE *)(a4 + 280))
    {
      v21 = (char)v67;
      if ((v67 & 0x80u) == 0)
        v22 = v67;
      else
        v22 = (unint64_t)v66[1];
      while (1)
      {
        v23 = *v16;
        v24 = *(unsigned __int8 *)(*v16 + 511);
        if ((v24 & 0x80u) == 0)
          v25 = (void *)*(unsigned __int8 *)(*v16 + 511);
        else
          v25 = *(void **)(*v16 + 496);
        if (v25 != (void *)v22)
          goto LABEL_18;
        v26 = (const void **)(v23 + 488);
        if (v21 >= 0)
          v27 = (unsigned __int8 *)v15;
        else
          v27 = (unsigned __int8 *)*v15;
        if ((v24 & 0x80) != 0)
        {
          if (memcmp(*v26, v27, *(_QWORD *)(*v16 + 496)))
            goto LABEL_18;
        }
        else if (*(_BYTE *)(*v16 + 511))
        {
          while (*(unsigned __int8 *)v26 == *v27)
          {
            v26 = (const void **)((char *)v26 + 1);
            ++v27;
            if (!--v24)
              goto LABEL_32;
          }
          goto LABEL_18;
        }
LABEL_32:
        v28 = *(unsigned __int8 *)(v23 + 535);
        if ((v28 & 0x80u) == 0)
          v29 = *(unsigned __int8 *)(v23 + 535);
        else
          v29 = *(_QWORD *)(v23 + 520);
        v30 = *v65;
        v31 = (char)v30;
        if ((v30 & 0x80u) != 0)
          v30 = *v64;
        if (v29 == v30)
        {
          v32 = (const void **)(v23 + 512);
          if (v31 >= 0)
            v33 = (unsigned __int8 *)v58;
          else
            v33 = *v58;
          if ((v28 & 0x80) != 0)
          {
            if (!memcmp(*v32, v33, *(_QWORD *)(v23 + 520)))
              break;
          }
          else
          {
            if (!*(_BYTE *)(v23 + 535))
              break;
            while (*(unsigned __int8 *)v32 == *v33)
            {
              v32 = (const void **)((char *)v32 + 1);
              ++v33;
              if (!--v28)
                goto LABEL_45;
            }
          }
        }
LABEL_18:
        if (++v16 == v17)
          goto LABEL_50;
      }
    }
  }
LABEL_45:
  if (v17 == v16)
  {
LABEL_50:
    *a9 = 0;
    if ((v70 & 0x80000000) == 0)
      goto LABEL_96;
    goto LABEL_95;
  }
  v34 = *v16;
  *v16 = 0;
  *a9 = v34;
  if (a6 > 0x7FFFFFFFFFFFFFF7)
LABEL_100:
    abort();
  if (a6 > 0x16)
  {
    v38 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v38 = a6 | 7;
    v39 = v38 + 1;
    v35 = (__int128 *)operator new(v38 + 1);
    *((_QWORD *)&v71 + 1) = a6;
    v72 = v39 | 0x8000000000000000;
    *(_QWORD *)&v71 = v35;
    v36 = __srca;
    v37 = (__int128 *)((char *)v35 + a6);
    if (v35 > __srca)
      goto LABEL_56;
  }
  else
  {
    HIBYTE(v72) = a6;
    v35 = &v71;
    v36 = __srca;
    v37 = (__int128 *)((char *)&v71 + a6);
    if (&v71 > __srca)
      goto LABEL_56;
  }
  if (v37 > v36)
    goto LABEL_99;
LABEL_56:
  if (a6)
    memmove(v35, v36, a6);
  *(_BYTE *)v37 = 0;
  v40 = (void **)(v34 + 456);
  if (*(char *)(v34 + 479) < 0)
    operator delete(*v40);
  *(_OWORD *)v40 = v71;
  *(_QWORD *)(v34 + 472) = v72;
  *(_DWORD *)(v34 + 480) = v61;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_100;
  if (__len > 0x16)
  {
    v44 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v44 = __len | 7;
    v45 = v44 + 1;
    v41 = (__int128 *)operator new(v44 + 1);
    *((_QWORD *)&v71 + 1) = __len;
    v72 = v45 | 0x8000000000000000;
    *(_QWORD *)&v71 = v41;
    v42 = __src;
    v43 = (__int128 *)((char *)v41 + __len);
    if (v41 > __src)
      goto LABEL_68;
  }
  else
  {
    HIBYTE(v72) = __len;
    v41 = &v71;
    v42 = __src;
    v43 = (__int128 *)((char *)&v71 + __len);
    if (&v71 > __src)
      goto LABEL_68;
  }
  if (v43 > v42)
    goto LABEL_99;
LABEL_68:
  if (__len)
    memmove(v41, v42, __len);
  *(_BYTE *)v43 = 0;
  v46 = (void **)(v34 + 488);
  if (*(char *)(v34 + 511) < 0)
    operator delete(*v46);
  *(_OWORD *)v46 = v71;
  *(_QWORD *)(v34 + 504) = v72;
  if (a8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_100;
  if (a8 <= 0x16)
  {
    HIBYTE(v72) = a8;
    v47 = &v71;
    v48 = a3;
    v49 = (char *)&v71 + a8;
    if (&v71 > (__int128 *)a3)
      goto LABEL_80;
    goto LABEL_79;
  }
  v50 = (a8 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a8 | 7) != 0x17)
    v50 = a8 | 7;
  v51 = v50 + 1;
  v47 = (__int128 *)operator new(v50 + 1);
  *((_QWORD *)&v71 + 1) = a8;
  v72 = v51 | 0x8000000000000000;
  *(_QWORD *)&v71 = v47;
  v48 = a3;
  v49 = (char *)v47 + a8;
  if (v47 <= (__int128 *)a3)
  {
LABEL_79:
    if (v49 <= v48)
      goto LABEL_80;
LABEL_99:
    __break(1u);
    goto LABEL_100;
  }
LABEL_80:
  if (a8)
    memmove(v47, v48, a8);
  *v49 = 0;
  v52 = (void **)(v34 + 512);
  if (*(char *)(v34 + 535) < 0)
    operator delete(*v52);
  *(_OWORD *)v52 = v71;
  *(_QWORD *)(v34 + 528) = v72;
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 144))(v34);
  *(_BYTE *)(v34 + 536) = 0;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v34 + 16))(v34, *(unsigned int *)(a4 + 140));
  v53 = *(_QWORD **)(a4 + 240);
  if (v53 == v16)
    goto LABEL_99;
  v54 = v16 + 1;
  if (v16 + 1 != v53)
  {
    do
    {
      v55 = *(v54 - 1);
      *(v54 - 1) = *v54;
      *v54 = 0;
      if (v55)
        (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
      ++v54;
    }
    while (v54 != v53);
    v53 = *(_QWORD **)(a4 + 240);
    v16 = v54 - 1;
  }
  while (v53 != v16)
  {
    v57 = *--v53;
    v56 = v57;
    *v53 = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  }
  *(_QWORD *)(a4 + 240) = v16;
  if ((v70 & 0x80000000) == 0)
    goto LABEL_96;
LABEL_95:
  operator delete(__p);
LABEL_96:
  if ((char)v67 < 0)
    operator delete(v66[0]);
}

uint64_t cricket::PortAllocator::GetCandidateStatsFromPooledSessions(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;

  v2 = *(uint64_t **)(result + 232);
  for (i = *(uint64_t **)(result + 240);
        v2 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2))
  {
    v5 = *v2++;
  }
  return result;
}

void cricket::PortAllocator::GetPooledIceCredentials(cricket::PortAllocator *this@<X0>, char **a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  size_t v10;
  char *v12;
  size_t v13;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;
  int v25;
  void *v26[2];
  uint64_t v27;
  __int128 __p;
  uint64_t v29;
  char v30;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (uint64_t *)*((_QWORD *)this + 29);
  v3 = (uint64_t *)*((_QWORD *)this + 30);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = *v2;
      v9 = (_BYTE *)(*v2 + 488);
      if (*(char *)(*v2 + 511) < 0)
      {
        v10 = *(_QWORD *)(v8 + 496);
        if ((v10 & 0x8000000000000000) != 0)
          goto LABEL_47;
        v9 = *(_BYTE **)v9;
        if (v10 && v9 == 0)
          goto LABEL_47;
      }
      else
      {
        v10 = *(unsigned __int8 *)(*v2 + 511);
      }
      v12 = (char *)(v8 + 512);
      if (*(char *)(v8 + 535) < 0)
      {
        v13 = *(_QWORD *)(v8 + 520);
        if ((v13 & 0x8000000000000000) != 0)
          goto LABEL_47;
        v12 = *(char **)v12;
        if (v13 && v12 == 0)
          goto LABEL_47;
      }
      else
      {
        v13 = *(unsigned __int8 *)(v8 + 535);
      }
      cricket::IceParameters::IceParameters(v26, v9, v10, v12, v13, 0);
      if (v7 >= v6)
        break;
      if (!v7)
        goto LABEL_47;
      v15 = *(_OWORD *)v26;
      *((_QWORD *)v7 + 2) = v27;
      *(_OWORD *)v7 = v15;
      v26[1] = 0;
      v27 = 0;
      v26[0] = 0;
      v16 = v29;
      *(_OWORD *)(v7 + 24) = __p;
      *((_QWORD *)v7 + 5) = v16;
      v29 = 0;
      __p = 0uLL;
      v7[48] = v30;
      v7 += 56;
      a2[1] = v7;
      if (SHIBYTE(v27) < 0)
        goto LABEL_45;
LABEL_3:
      if (++v2 == v3)
        return;
    }
    v17 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v5) >> 3) + 1;
    if (v17 > 0x492492492492492)
      goto LABEL_48;
    if (0xDB6DB6DB6DB6DB6ELL * ((v6 - v5) >> 3) > v17)
      v17 = 0xDB6DB6DB6DB6DB6ELL * ((v6 - v5) >> 3);
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v6 - v5) >> 3)) >= 0x249249249249249)
      v17 = 0x492492492492492;
    if (!v17)
    {
LABEL_47:
      __break(1u);
LABEL_48:
      abort();
    }
    if (v17 > 0x492492492492492)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v18 = 56 * v17;
    v19 = (char *)operator new(56 * v17);
    v20 = &v19[8 * ((v7 - v5) >> 3)];
    *(_OWORD *)v20 = *(_OWORD *)v26;
    v6 = &v19[v18];
    *((_QWORD *)v20 + 2) = v27;
    v26[0] = 0;
    v26[1] = 0;
    v27 = 0;
    *(_OWORD *)(v20 + 24) = __p;
    *((_QWORD *)v20 + 5) = v29;
    __p = 0uLL;
    v20[48] = v30;
    v21 = v20 + 56;
    v29 = 0;
    if (v7 == v5)
    {
      *a2 = v20;
      a2[1] = v21;
      a2[2] = v6;
LABEL_40:
      if (v5)
        operator delete(v5);
      v25 = SHIBYTE(v29);
      a2[1] = v21;
      if (v25 < 0)
        operator delete((void *)__p);
      v5 = v20;
      v7 = v21;
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        goto LABEL_3;
LABEL_45:
      operator delete(v26[0]);
      goto LABEL_3;
    }
    v22 = v7;
    do
    {
      v23 = *(_OWORD *)(v22 - 56);
      *((_QWORD *)v20 - 5) = *((_QWORD *)v22 - 5);
      *(_OWORD *)(v20 - 56) = v23;
      *((_QWORD *)v22 - 6) = 0;
      *((_QWORD *)v22 - 5) = 0;
      *((_QWORD *)v22 - 7) = 0;
      v24 = *((_OWORD *)v22 - 2);
      *((_QWORD *)v20 - 2) = *((_QWORD *)v22 - 2);
      *((_OWORD *)v20 - 2) = v24;
      *((_QWORD *)v22 - 3) = 0;
      *((_QWORD *)v22 - 2) = 0;
      *((_QWORD *)v22 - 4) = 0;
      *(v20 - 8) = *(v22 - 8);
      v20 -= 56;
      v22 -= 56;
    }
    while (v22 != v5);
    *a2 = v20;
    a2[1] = v21;
    a2[2] = v6;
    while (1)
    {
      if (*(v7 - 9) < 0)
      {
        operator delete(*((void **)v7 - 4));
        if (*(v7 - 33) < 0)
LABEL_38:
          operator delete(*((void **)v7 - 7));
      }
      else if (*(v7 - 33) < 0)
      {
        goto LABEL_38;
      }
      v7 -= 56;
      if (v7 == v5)
        goto LABEL_40;
    }
  }
}

uint64_t cricket::PortAllocator::MdnsObfuscationEnabled(cricket::PortAllocator *this)
{
  return 0;
}

_BYTE *cricket::RelayCredentials::RelayCredentials(_BYTE *a1, _BYTE *__src, size_t __len, char *a4, size_t a5)
{
  _BYTE *v9;
  size_t v10;
  size_t v11;
  _BYTE *v12;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_25;
  v9 = a1;
  if (__len > 0x16)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    a1 = operator new(v10 + 1);
    *((_QWORD *)v9 + 1) = __len;
    *((_QWORD *)v9 + 2) = v11 | 0x8000000000000000;
    *(_QWORD *)v9 = a1;
  }
  else
  {
    a1[23] = __len;
  }
  v12 = &a1[__len];
  if (a1 <= __src && v12 > __src)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (__len)
    memmove(a1, __src, __len);
  *v12 = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
LABEL_25:
    abort();
  if (a5 <= 0x16)
  {
    v14 = v9 + 24;
    v9[47] = a5;
    v15 = &v9[a5 + 24];
    if (v9 + 24 > a4)
      goto LABEL_21;
    goto LABEL_20;
  }
  v16 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((a5 | 7) != 0x17)
    v16 = a5 | 7;
  v17 = v16 + 1;
  v14 = (char *)operator new(v16 + 1);
  *((_QWORD *)v9 + 4) = a5;
  *((_QWORD *)v9 + 5) = v17 | 0x8000000000000000;
  *((_QWORD *)v9 + 3) = v14;
  v15 = &v14[a5];
  if (v14 <= a4)
  {
LABEL_20:
    if (v15 <= a4)
      goto LABEL_21;
    goto LABEL_24;
  }
LABEL_21:
  if (a5)
    memmove(v14, a4, a5);
  *v15 = 0;
  return v9;
}

char *std::vector<cricket::ProtocolAddress>::__push_back_slow_path<cricket::ProtocolAddress>(uint64_t a1, uint64_t a2)
{
  char **v2;
  char **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  __int128 v15;
  char **v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char **v20;
  void **v21;
  char *v22;
  _QWORD *v24;

  v2 = *(char ***)a1;
  v3 = *(char ***)(a1 + 8);
  v4 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333)
    abort();
  if (0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4) > v5)
    v5 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - (_QWORD)v2) >> 4) >= 0x199999999999999)
    v5 = 0x333333333333333;
  if (!v5)
  {
    __break(1u);
LABEL_30:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v5 > 0x333333333333333)
    goto LABEL_30;
  v8 = 10 * v5;
  v9 = operator new(80 * v5);
  v10 = v9;
  v11 = (char *)&v9[10 * v4];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = &unk_24C0ACDA0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_DWORD *)v11 + 12) = 0;
  if (v11 != (char *)a2)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__assign_no_alias<true>(&v9[10 * v4], *(char **)a2, *(_QWORD *)(a2 + 8));
      v2 = *(char ***)a1;
      v3 = *(char ***)(a1 + 8);
    }
    else
    {
      *(_OWORD *)v11 = *(_OWORD *)a2;
      *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
    }
  }
  v12 = &v10[v8];
  *((_DWORD *)v11 + 8) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(v11 + 36) = *(_OWORD *)(a2 + 36);
  *((_WORD *)v11 + 28) = *(_WORD *)(a2 + 56);
  v11[64] = *(_BYTE *)(a2 + 64);
  *((_DWORD *)v11 + 15) = *(_DWORD *)(a2 + 60);
  LODWORD(v10[10 * v4 + 9]) = *(_DWORD *)(a2 + 72);
  v13 = v11 + 80;
  if (v3 == v2)
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
  }
  else
  {
    v24 = v12;
    v14 = 0;
    do
    {
      v16 = &v3[v14 / 8];
      v17 = &v11[v14];
      v18 = &v11[v14];
      *((_QWORD *)v18 - 10) = 0;
      *((_QWORD *)v18 - 9) = 0;
      v19 = (uint64_t)&v11[v14 - 80];
      v20 = &v3[v14 / 8 - 10];
      *(_QWORD *)(v19 + 16) = 0;
      *(_QWORD *)(v19 + 24) = &unk_24C0ACDA0;
      *(_QWORD *)&v11[v14 - 48] = 0;
      *(_QWORD *)(v19 + 40) = 0;
      *(_DWORD *)(v19 + 48) = 0;
      if (v11 != (char *)v3)
      {
        if (*((char *)v16 - 57) < 0)
        {
          std::string::__assign_no_alias<true>((_QWORD *)v19, *v20, (size_t)v3[v14 / 8 - 9]);
        }
        else
        {
          v15 = *(_OWORD *)v20;
          *(_QWORD *)&v11[v14 - 64] = v3[v14 / 8 - 8];
          *(_OWORD *)v19 = v15;
        }
      }
      *(_DWORD *)&v11[v14 - 48] = *((_DWORD *)v16 - 12);
      *(_OWORD *)(v17 - 44) = *(_OWORD *)((char *)v16 - 44);
      *((_WORD *)v17 - 12) = *((_WORD *)v16 - 12);
      *(v17 - 16) = *((_BYTE *)v16 - 16);
      *((_DWORD *)v17 - 5) = *((_DWORD *)v16 - 5);
      *((_DWORD *)v17 - 2) = *((_DWORD *)v16 - 2);
      v14 -= 80;
    }
    while (v20 != v2);
    v2 = *(char ***)a1;
    v21 = *(void ***)(a1 + 8);
    v22 = &v11[v14];
    v13 = v11 + 80;
    *(_QWORD *)a1 = v22;
    *(_QWORD *)(a1 + 8) = v11 + 80;
    *(_QWORD *)(a1 + 16) = v24;
    while (v21 != (void **)v2)
    {
      if (*((char *)v21 - 57) < 0)
        operator delete(*(v21 - 10));
      v21 -= 10;
    }
  }
  if (v2)
    operator delete(v2);
  return v13;
}

void ***cricket::RelayServerConfig::operator=(void ***a1, void ***a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  const std::string::value_type *v16;
  size_t v17;
  char *v18;
  char *v19;
  char v20;
  __int128 v21;
  unint64_t v22;
  const std::string::value_type *v23;
  size_t v24;
  char *v25;
  char *v26;
  char v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  std::string *v38;
  const std::string::value_type *v39;
  size_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  std::string *v49;
  const std::string::value_type *v50;
  size_t v51;
  const std::string::value_type *v52;
  size_t v53;
  const std::string::value_type *v54;
  size_t v55;
  __int128 v56;
  std::string *v57;
  char v58;
  __int128 v59;
  const std::string::value_type *v60;
  size_t v61;

  if (a1 == a2)
    return a1;
  v5 = (char *)*a2;
  v4 = (char *)a2[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (char *)*a2) >> 4);
  v7 = (uint64_t)a1[2];
  v8 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v7 - (uint64_t)*a1) >> 4) < v6)
  {
    if (v8)
    {
      v9 = a1[1];
      v10 = *a1;
      if (v9 != v8)
      {
        do
        {
          if (*((char *)v9 - 57) < 0)
            operator delete(*(v9 - 10));
          v9 -= 10;
        }
        while (v9 != v8);
        v10 = *a1;
      }
      a1[1] = v8;
      operator delete(v10);
      v7 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (v6 <= 0x333333333333333)
    {
      v29 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 4);
      v30 = 2 * v29;
      if (2 * v29 <= v6)
        v30 = v6;
      v31 = v29 >= 0x199999999999999 ? 0x333333333333333 : v30;
      if (v31 <= 0x333333333333333)
      {
        v32 = 10 * v31;
        v33 = (void **)operator new(80 * v31);
        *a1 = v33;
        a1[1] = v33;
        a1[2] = &v33[v32];
        if (v5 != v4)
        {
          v34 = 0;
          do
          {
            v35 = &v5[v34 * 8];
            v36 = (char *)&v33[v34];
            *(_QWORD *)v36 = 0;
            *((_QWORD *)v36 + 1) = 0;
            *((_QWORD *)v36 + 2) = 0;
            *((_QWORD *)v36 + 3) = &unk_24C0ACDA0;
            v33[v34 + 4] = 0;
            *((_QWORD *)v36 + 5) = 0;
            *((_DWORD *)v36 + 12) = 0;
            if (v33 != (void **)v5)
            {
              if (v35[23] < 0)
              {
                std::string::__assign_no_alias<true>(&v33[v34], *(char **)&v5[v34 * 8], *(_QWORD *)&v5[v34 * 8 + 8]);
              }
              else
              {
                v37 = *(_OWORD *)v35;
                *((_QWORD *)v36 + 2) = *((_QWORD *)v35 + 2);
                *(_OWORD *)v36 = v37;
              }
            }
            LODWORD(v33[v34 + 4]) = *((_DWORD *)v35 + 8);
            *(_OWORD *)(v36 + 36) = *(_OWORD *)(v35 + 36);
            *((_WORD *)v36 + 28) = *((_WORD *)v35 + 28);
            v36[64] = v35[64];
            *((_DWORD *)v36 + 15) = *((_DWORD *)v35 + 15);
            *((_DWORD *)v36 + 18) = *((_DWORD *)v35 + 18);
            v34 += 10;
          }
          while (&v5[v34 * 8] != v4);
          v33 = (void **)((char *)v33 + v34 * 8);
        }
        a1[1] = v33;
        v38 = (std::string *)(a1 + 3);
        v39 = (const std::string::value_type *)(a2 + 3);
        v40 = *((unsigned __int8 *)a2 + 47);
        if (*((char *)a1 + 47) < 0)
          goto LABEL_87;
        goto LABEL_74;
      }
    }
LABEL_110:
    abort();
  }
  v11 = a1[1];
  v12 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (char *)v8) >> 4);
  if (v12 < v6)
  {
    v13 = &v5[16 * (((char *)v11 - (char *)v8) >> 4)];
    if (v11 != v8)
    {
      v14 = 0;
      v15 = 80 * v12;
      do
      {
        v18 = (char *)&v8[v14 / 8];
        v19 = &v5[v14];
        if (v5 != (char *)v8)
        {
          v20 = v19[23];
          if (v18[23] < 0)
          {
            if (v20 >= 0)
              v16 = &v5[v14];
            else
              v16 = *(const std::string::value_type **)&v5[v14];
            if (v20 >= 0)
              v17 = v19[23];
            else
              v17 = *(_QWORD *)&v5[v14 + 8];
            std::string::__assign_no_alias<false>((std::string *)&v8[v14 / 8], v16, v17);
          }
          else if (v19[23] < 0)
          {
            std::string::__assign_no_alias<true>(&v8[v14 / 8], *(char **)&v5[v14], *(_QWORD *)&v5[v14 + 8]);
          }
          else
          {
            v21 = *(_OWORD *)v19;
            *((_QWORD *)v18 + 2) = *((_QWORD *)v19 + 2);
            *(_OWORD *)v18 = v21;
          }
        }
        *((_DWORD *)v18 + 8) = *((_DWORD *)v19 + 8);
        *(_OWORD *)(v18 + 36) = *(_OWORD *)(v19 + 36);
        *((_WORD *)v18 + 28) = *((_WORD *)v19 + 28);
        v18[64] = v19[64];
        *((_DWORD *)v18 + 15) = *((_DWORD *)v19 + 15);
        *((_DWORD *)v18 + 18) = *((_DWORD *)v19 + 18);
        v14 += 80;
      }
      while (v15 != v14);
      v8 = a1[1];
    }
    v41 = (char *)v8;
    if (v13 == v4)
    {
LABEL_86:
      a1[1] = (void **)v41;
      v38 = (std::string *)(a1 + 3);
      v39 = (const std::string::value_type *)(a2 + 3);
      v40 = *((unsigned __int8 *)a2 + 47);
      if (*((char *)a1 + 47) < 0)
        goto LABEL_87;
      goto LABEL_74;
    }
    v42 = 0;
    while (1)
    {
      v43 = (char *)&v8[v42 / 8];
      if (!&v8[v42 / 8])
        break;
      v44 = &v13[v42];
      *(_QWORD *)v43 = 0;
      *((_QWORD *)v43 + 1) = 0;
      *((_QWORD *)v43 + 2) = 0;
      v45 = (char *)&v8[v42 / 8];
      v8[v42 / 8 + 4] = 0;
      v46 = (uint64_t)&v8[v42 / 8 + 4];
      *(_QWORD *)(v46 - 8) = &unk_24C0ACDA0;
      *(_QWORD *)(v46 + 8) = 0;
      *(_DWORD *)(v46 + 16) = 0;
      if (v43 != &v13[v42])
      {
        if (v13[v42 + 23] < 0)
        {
          std::string::__assign_no_alias<true>(v43, *(char **)&v13[v42], *(_QWORD *)&v13[v42 + 8]);
        }
        else
        {
          v47 = *(_OWORD *)v44;
          *((_QWORD *)v43 + 2) = *((_QWORD *)v44 + 2);
          *(_OWORD *)v43 = v47;
        }
      }
      *(_DWORD *)v46 = *(_DWORD *)&v13[v42 + 32];
      *(_OWORD *)(v45 + 36) = *(_OWORD *)&v13[v42 + 36];
      *((_WORD *)v45 + 28) = *(_WORD *)&v13[v42 + 56];
      v45[64] = v13[v42 + 64];
      *((_DWORD *)v45 + 15) = *(_DWORD *)&v13[v42 + 60];
      *((_DWORD *)v45 + 18) = *(_DWORD *)&v13[v42 + 72];
      v42 += 80;
      if (&v13[v42] == v4)
      {
        v41 = (char *)&v8[v42 / 8];
        goto LABEL_86;
      }
    }
    __break(1u);
    goto LABEL_110;
  }
  if (v5 != v4)
  {
    v22 = 0;
    do
    {
      v25 = (char *)&v8[v22 / 8];
      v26 = &v5[v22];
      if (v5 != (char *)v8)
      {
        v27 = v26[23];
        if (v25[23] < 0)
        {
          if (v27 >= 0)
            v23 = &v5[v22];
          else
            v23 = *(const std::string::value_type **)&v5[v22];
          if (v27 >= 0)
            v24 = v26[23];
          else
            v24 = *(_QWORD *)&v5[v22 + 8];
          std::string::__assign_no_alias<false>((std::string *)&v8[v22 / 8], v23, v24);
        }
        else if (v26[23] < 0)
        {
          std::string::__assign_no_alias<true>(&v8[v22 / 8], *(char **)&v5[v22], *(_QWORD *)&v5[v22 + 8]);
        }
        else
        {
          v28 = *(_OWORD *)v26;
          *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
          *(_OWORD *)v25 = v28;
        }
      }
      *((_DWORD *)v25 + 8) = *((_DWORD *)v26 + 8);
      *(_OWORD *)(v25 + 36) = *(_OWORD *)(v26 + 36);
      *((_WORD *)v25 + 28) = *((_WORD *)v26 + 28);
      v25[64] = v26[64];
      *((_DWORD *)v25 + 15) = *((_DWORD *)v26 + 15);
      *((_DWORD *)v25 + 18) = *((_DWORD *)v26 + 18);
      v22 += 80;
    }
    while (&v5[v22] != v4);
    v11 = a1[1];
    v8 = (void **)((char *)v8 + v22);
  }
  while (v11 != v8)
  {
    if (*((char *)v11 - 57) < 0)
      operator delete(*(v11 - 10));
    v11 -= 10;
  }
  a1[1] = v8;
  v38 = (std::string *)(a1 + 3);
  v39 = (const std::string::value_type *)(a2 + 3);
  v40 = *((unsigned __int8 *)a2 + 47);
  if (*((char *)a1 + 47) < 0)
  {
LABEL_87:
    if ((v40 & 0x80u) == 0)
      v54 = v39;
    else
      v54 = (const std::string::value_type *)a2[3];
    if ((v40 & 0x80u) == 0)
      v55 = v40;
    else
      v55 = (size_t)a2[4];
    std::string::__assign_no_alias<false>(v38, v54, v55);
    v49 = (std::string *)(a1 + 6);
    v50 = (const std::string::value_type *)(a2 + 6);
    v51 = *((unsigned __int8 *)a2 + 71);
    if ((*((char *)a1 + 71) & 0x80000000) == 0)
      goto LABEL_94;
LABEL_78:
    if ((v51 & 0x80u) == 0)
      v52 = v50;
    else
      v52 = (const std::string::value_type *)a2[6];
    if ((v51 & 0x80u) == 0)
      v53 = v51;
    else
      v53 = (size_t)a2[7];
    std::string::__assign_no_alias<false>(v49, v52, v53);
    goto LABEL_97;
  }
LABEL_74:
  if ((v40 & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v38, (char *)a2[3], (size_t)a2[4]);
    v49 = (std::string *)(a1 + 6);
    v50 = (const std::string::value_type *)(a2 + 6);
    v51 = *((unsigned __int8 *)a2 + 71);
    if (*((char *)a1 + 71) < 0)
      goto LABEL_78;
  }
  else
  {
    v48 = *(_OWORD *)v39;
    v38->__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
    *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v48;
    v49 = (std::string *)(a1 + 6);
    v50 = (const std::string::value_type *)(a2 + 6);
    v51 = *((unsigned __int8 *)a2 + 71);
    if (*((char *)a1 + 71) < 0)
      goto LABEL_78;
  }
LABEL_94:
  if ((v51 & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v49, (char *)a2[6], (size_t)a2[7]);
  }
  else
  {
    v56 = *(_OWORD *)v50;
    v49->__r_.__value_.__r.__words[2] = *((_QWORD *)v50 + 2);
    *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v56;
  }
LABEL_97:
  *((_DWORD *)a1 + 18) = *((_DWORD *)a2 + 18);
  std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)a1 + 10, (__int128 *)a2[10], (__int128 *)a2[11], 0xAAAAAAAAAAAAAAABLL * (a2[11] - a2[10]));
  std::vector<std::string>::__assign_with_size[abi:sn180100]<std::string*,std::string*>((std::string **)a1 + 13, (__int128 *)a2[13], (__int128 *)a2[14], 0xAAAAAAAAAAAAAAABLL * (a2[14] - a2[13]));
  a1[16] = a2[16];
  v57 = (std::string *)(a1 + 17);
  v58 = *((_BYTE *)a2 + 159);
  if (*((char *)a1 + 159) < 0)
  {
    if (v58 >= 0)
      v60 = (const std::string::value_type *)(a2 + 17);
    else
      v60 = (const std::string::value_type *)a2[17];
    if (v58 >= 0)
      v61 = *((unsigned __int8 *)a2 + 159);
    else
      v61 = (size_t)a2[18];
    std::string::__assign_no_alias<false>(v57, v60, v61);
  }
  else if ((*((_BYTE *)a2 + 159) & 0x80) != 0)
  {
    std::string::__assign_no_alias<true>(v57, (char *)a2[17], (size_t)a2[18]);
  }
  else
  {
    v59 = *(_OWORD *)(a2 + 17);
    a1[19] = a2[19];
    *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v59;
  }
  return a1;
}

void cricket::PortInterface::~PortInterface(cricket::PortInterface *this)
{
  uint64_t i;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t j;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t k;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t m;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = off_24C0BAC70;
  for (i = *((_QWORD *)this + 26); i; i = *((_QWORD *)this + 26))
  {
    v3 = (uint64_t *)*((_QWORD *)this + 25);
    v4 = v3[3];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    *((_QWORD *)this + 26) = i - 1;
    operator delete(v3);
    (*(void (**)(uint64_t, char *))(v4 + 16))(v4, (char *)this + 176);
  }
  *((_QWORD *)this + 27) = (char *)this + 192;
  for (j = *((_QWORD *)this + 19); j; j = *((_QWORD *)this + 19))
  {
    v7 = (uint64_t *)*((_QWORD *)this + 18);
    v8 = v7[3];
    v9 = *v7;
    *(_QWORD *)(v9 + 8) = v7[1];
    *(_QWORD *)v7[1] = v9;
    *((_QWORD *)this + 19) = j - 1;
    operator delete(v7);
    (*(void (**)(uint64_t, char *))(v8 + 16))(v8, (char *)this + 120);
  }
  *((_QWORD *)this + 20) = (char *)this + 136;
  for (k = *((_QWORD *)this + 12); k; k = *((_QWORD *)this + 12))
  {
    v11 = (uint64_t *)*((_QWORD *)this + 11);
    v12 = v11[3];
    v13 = *v11;
    *(_QWORD *)(v13 + 8) = v11[1];
    *(_QWORD *)v11[1] = v13;
    *((_QWORD *)this + 12) = k - 1;
    operator delete(v11);
    (*(void (**)(uint64_t, char *))(v12 + 16))(v12, (char *)this + 64);
  }
  *((_QWORD *)this + 13) = (char *)this + 80;
  for (m = *((_QWORD *)this + 5); m; m = *((_QWORD *)this + 5))
  {
    v15 = (uint64_t *)*((_QWORD *)this + 4);
    v16 = v15[3];
    v17 = *v15;
    *(_QWORD *)(v17 + 8) = v15[1];
    *(_QWORD *)v15[1] = v17;
    *((_QWORD *)this + 5) = m - 1;
    operator delete(v15);
    (*(void (**)(uint64_t, char *))(v16 + 16))(v16, (char *)this + 8);
  }
  *((_QWORD *)this + 6) = (char *)this + 24;
}

uint64_t webrtc::PpsParser::ParseInternal@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  __int32 v12;
  _BYTE *v13;
  __int32 v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int i;
  __int32 v24;
  uint64_t result;
  unint64_t v26;
  BOOL v27;
  int v28;
  int v29;
  unsigned __int32 v30;
  char v32;
  _BYTE *v33;
  unsigned int v34;
  int v35;
  __int32 v36;
  unint64_t v37;
  unsigned __int8 *v38;
  signed int v39;
  __int32 v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  std::string *v46;
  const unsigned __int8 *v47;
  unint64_t v48;
  uint8x16_t v49;

  if (a2)
    v8 = a1;
  else
    v8 = 0;
  v49.i64[0] = v8;
  if (((a2 >> 28) & 0x1FFFFFFFFLL) == 0)
  {
    v49.i32[2] = 8 * a2;
    v49.i8[12] = 1;
    v9 = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
    v10 = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
    v49.i8[12] = 0;
    v11 = v49.i32[2];
    v12 = --v49.i32[2];
    if (v11 <= 0)
    {
      LOBYTE(v15) = 0;
      LOBYTE(v17) = 0;
      v49.i32[2] = v11 - 2;
      v18 = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
      if (!v18)
        goto LABEL_41;
      goto LABEL_17;
    }
    v13 = (_BYTE *)v49.i64[0];
    v14 = v11 - 2;
    if ((v12 & 7) != 0)
    {
      v15 = (*(unsigned __int8 *)v49.i64[0] >> (v12 & 7)) & 1;
      v49.i32[2] = v14;
      v16 = v14 & 7;
      if (v16)
        goto LABEL_8;
    }
    else
    {
      v19 = ++v49.i64[0];
      LOBYTE(v15) = *v13 & 1;
      v49.i8[12] = 0;
      v49.i32[2] = v14;
      if (!v12)
      {
        LOBYTE(v17) = 0;
        v18 = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
        if (!v18)
          goto LABEL_41;
LABEL_17:
        v20 = v18;
        v21 = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
        v22 = v21;
        if (v21)
        {
          if (v21 != 1)
          {
            if (v21 == 2)
            {
              for (i = 0; i <= v20; ++i)
              {
                v49.i8[12] = 1;
                if (v49.i32[2] < 0)
                  break;
                webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
                webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
              }
            }
            else if (v21 - 3 > 2)
            {
              if (v21 == 6)
              {
                result = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
                if (v49.i32[2] < 0)
                  goto LABEL_58;
                v26 = (result + 1) * (unint64_t)(33 - __clz(v20));
                if (v26 >> 31)
                  goto LABEL_58;
                v49.i8[12] = 0;
                v27 = v49.i32[2] >= v26;
                v28 = v49.i32[2] - v26;
                if (v27)
                {
                  v29 = v28 + 7;
                  if (v28 < -7)
                    v29 = v28 + 14;
                  v49.i64[0] += (int)(((v49.i32[2] + 7) >> 3) - (v29 >> 3));
                }
                else
                {
                  v28 = -1;
                }
                v49.i32[2] = v28;
              }
            }
            else
            {
              v49.i8[12] = 0;
              v24 = v49.i32[2] - 1;
              if (v49.i32[2] < 1)
                v24 = -1;
              else
                v49.i64[0] += (int)(((v49.i32[2] + 7) >> 3) - ((v49.i32[2] + 6) >> 3));
              v49.i32[2] = v24;
              webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
            }
          }
        }
        else
        {
          do
          {
            v49.i8[12] = 1;
            if (v49.i32[2] < 0)
              break;
            webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
            ++v22;
          }
          while (v22 <= v20);
        }
LABEL_41:
        webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
        webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
        v49.i8[12] = 0;
        v30 = v49.u32[2];
        v32 = v49.i8[8] - 1;
        if (v49.i32[2]-- < 1)
        {
          LOBYTE(v35) = 0;
        }
        else
        {
          v33 = (_BYTE *)v49.i64[0];
          v34 = v32 & 7;
          if (v34)
          {
            v35 = (*(unsigned __int8 *)v49.i64[0] >> v34) & 1;
            v27 = v30 >= 3;
            v36 = v30 - 3;
            if (!v27)
              goto LABEL_49;
            v49.i32[2] = v36;
            if (v34 >= 3)
            {
              LODWORD(v37) = (*(unsigned __int8 *)v49.i64[0] >> (v34 - 2)) & 3;
              goto LABEL_50;
            }
            v45 = v49.i64[0] + 1;
            v37 = (unint64_t)(*(unsigned __int8 *)v49.i64[0]++ & ~(-1 << v34)) << (2 - v34);
            if (v34 == 2)
            {
LABEL_50:
              result = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
              if ((result & 1) != 0)
                v39 = (result + 1) >> 1;
              else
                v39 = -(result >> 1);
              v49.i8[12] = 1;
              if ((v49.i32[2] & 0x80000000) == 0 && v39 <= 25 && v39 > -27)
              {
                webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
                result = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
                v40 = v49.i32[2];
                if (v49.i32[2] >= 2)
                {
                  v41 = v49.i64[0]
                      + (int)(((v49.i32[2] + 7) >> 3) - ((v49.i32[2] + 5) >> 3));
                  v49.i64[0] = v41;
                  v49.i8[12] = 0;
                  v42 = v49.i8[8] - 3;
                  v49.i32[2] -= 3;
                  if (v40 != 2)
                  {
                    if ((v42 & 7) != 0)
                    {
                      LODWORD(v41) = *(unsigned __int8 *)v41 >> (v42 & 7);
                    }
                    else
                    {
                      v49.i64[0] = v41 + 1;
                      LOBYTE(v41) = *(_BYTE *)v41;
                    }
                    *(_BYTE *)a7 = v17;
                    *(_BYTE *)(a7 + 1) = v35;
                    *(_BYTE *)(a7 + 2) = v15;
                    *(_DWORD *)(a7 + 4) = v37;
                    *(_DWORD *)(a7 + 8) = v41 & 1;
                    *(_DWORD *)(a7 + 12) = v39;
                    *(_DWORD *)(a7 + 16) = v9;
                    v43 = 1;
                    *(_DWORD *)(a7 + 20) = v10;
                    goto LABEL_59;
                  }
                }
              }
LABEL_58:
              v43 = 0;
              *(_BYTE *)a7 = 0;
LABEL_59:
              *(_BYTE *)(a7 + 24) = v43;
              return result;
            }
            v44 = 7;
            v38 = (unsigned __int8 *)v45;
LABEL_65:
            LODWORD(v37) = v37 | (*v38 >> v44);
            goto LABEL_50;
          }
          v38 = (unsigned __int8 *)++v49.i64[0];
          LOBYTE(v35) = *v33 & 1;
          v49.i8[12] = 0;
          if (v30 >= 3)
          {
            LODWORD(v37) = 0;
            v49.i32[2] = v30 - 3;
            v44 = 6;
            goto LABEL_65;
          }
        }
LABEL_49:
        LODWORD(v37) = 0;
        v49.i32[2] = -1;
        goto LABEL_50;
      }
      v13 = (_BYTE *)v19;
      v16 = v14 & 7;
      if (v16)
      {
LABEL_8:
        v17 = (*v13 >> v16) & 1;
        v18 = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
        if (!v18)
          goto LABEL_41;
        goto LABEL_17;
      }
    }
    v49.i64[0] = (uint64_t)(v13 + 1);
    LOBYTE(v17) = *v13 & 1;
    v18 = webrtc::BitstreamReader::ReadExponentialGolomb(&v49);
    if (!v18)
      goto LABEL_41;
    goto LABEL_17;
  }
  v46 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a3, a4, a5, a6, v49.i64[0]);
  return webrtc::PpsParser::ParsePpsIdFromSlice((webrtc::PpsParser *)v46, v47, v48);
}

unint64_t webrtc::PpsParser::ParsePpsIdFromSlice(webrtc::PpsParser *this, const unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  std::string *v12;
  uint64_t v13;
  __int16 *v14;
  unint64_t *v15;
  uint64_t v16;
  uint8x16_t v17;
  void *__p;
  _BYTE *v19;

  webrtc::H264::ParseRbsp(this, (size_t)a2, (unint64_t *)&__p);
  v6 = __p;
  v7 = v19 - (_BYTE *)__p;
  if (v19 == __p)
    v6 = 0;
  v17.i64[0] = (uint64_t)v6;
  if (((v7 >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    v12 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/numerics/safe_conversions.h", 36, "IsValueInRangeForNumericType<Dst>(value)", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v2, v3, v4, v5, v16);
    return webrtc::PreemptiveExpand::SetParametersForPassiveSpeech((uint64_t)v12, v13, v14, v15);
  }
  else
  {
    v17.i32[2] = 8 * v7;
    v17.i8[12] = 1;
    webrtc::BitstreamReader::ReadExponentialGolomb(&v17);
    webrtc::BitstreamReader::ReadExponentialGolomb(&v17);
    v8 = webrtc::BitstreamReader::ReadExponentialGolomb(&v17);
    v9 = v17.i32[2];
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
    if (v9 >= 0)
      v10 = v8;
    else
      v10 = 0;
    return (v10 & 0xFFFFFFFEFFFFFFFFLL | ((((unint64_t)(v9 & 0x80000000) >> 31) & 1) << 32)) ^ 0x100000000;
  }
}

uint64_t webrtc::PreemptiveExpand::SetParametersForPassiveSpeech(uint64_t this, uint64_t a2, __int16 *a3, unint64_t *a4)
{
  unint64_t v4;

  *a3 = 0;
  v4 = a2 - *(_QWORD *)(this + 360);
  if (v4 >= *a4)
    v4 = *a4;
  *a4 = v4;
  return this;
}

uint64_t webrtc::PreemptiveExpand::CheckCriteriaAndStretch(webrtc::PreemptiveExpand *this, const __int16 *a2, unint64_t a3, uint64_t a4, int a5, int a6, BOOL a7, webrtc::AudioMultiVector *a8)
{
  const __int16 *v12;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void (**v26)(webrtc::AudioMultiVector *__hidden);
  _QWORD *v27;
  _QWORD *v28;

  v12 = a2;
  v14 = 120 * *((int *)this + 3);
  if (a5 >= 14747)
  {
    v15 = *((_QWORD *)this + 45);
    if (v15 <= v14 || (a6 & 1) == 0)
      goto LABEL_10;
LABEL_6:
    if (!a3)
      a2 = 0;
    webrtc::AudioMultiVector::PushBackInterleaved(a8, (uint64_t)a2, a3);
    return 2;
  }
  if ((a6 & 1) != 0)
    goto LABEL_6;
  v15 = *((_QWORD *)this + 45);
LABEL_10:
  if (v15 <= v14)
    v17 = 120 * *((int *)this + 3);
  else
    v17 = v15;
  v18 = (v17 + a4) * *((_QWORD *)this + 2);
  if (!v18)
    a2 = 0;
  webrtc::AudioMultiVector::PushBackInterleaved(a8, (uint64_t)a2, v18);
  webrtc::AudioMultiVector::AudioMultiVector((webrtc::AudioMultiVector *)&v26, *((_QWORD *)this + 2));
  v19 = *((_QWORD *)this + 2);
  if (v19 * a4)
    v20 = (uint64_t)&v12[v19 * (v17 - a4)];
  else
    v20 = 0;
  webrtc::AudioMultiVector::PushBackInterleaved(&v26, v20, v19 * a4);
  (*(void (**)(webrtc::AudioMultiVector *, void (***)(webrtc::AudioMultiVector *__hidden), uint64_t))(*(_QWORD *)a8 + 104))(a8, &v26, a4);
  v21 = *((_QWORD *)this + 2) * v17;
  if (a3 == v21)
    v22 = 0;
  else
    v22 = (uint64_t)&v12[v21];
  webrtc::AudioMultiVector::PushBackInterleaved(a8, v22, a3 - v21);
  v26 = &off_24C0AE108;
  v24 = v27;
  v23 = v28;
  if (v27 == v28)
  {
    v16 = a6 ^ 1u;
    if (v27)
    {
LABEL_23:
      v28 = v24;
      operator delete(v24);
    }
  }
  else
  {
    do
    {
      if (*v24)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)*v24 + 8))(*v24);
        v23 = v28;
      }
      ++v24;
    }
    while (v24 != v23);
    v24 = v27;
    v16 = a6 ^ 1u;
    if (v27)
      goto LABEL_23;
  }
  return v16;
}

double webrtc::PreemptiveExpandFactory::Create(webrtc::PreemptiveExpandFactory *this, int a2, uint64_t a3, const webrtc::BackgroundNoise *a4, uint64_t a5)
{
  uint64_t v9;
  double result;

  v9 = operator new();
  *(_DWORD *)(v9 + 8) = a2;
  *(_DWORD *)(v9 + 12) = a2 / 8000;
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  *(_WORD *)(v9 + 32) = 0;
  result = 0.0;
  *(_QWORD *)v9 = &off_24C0BADC0;
  *(_QWORD *)(v9 + 360) = 0;
  *(_QWORD *)(v9 + 368) = a5;
  *(_OWORD *)(v9 + 254) = 0u;
  *(_OWORD *)(v9 + 270) = 0u;
  *(_OWORD *)(v9 + 286) = 0u;
  *(_OWORD *)(v9 + 302) = 0u;
  *(_OWORD *)(v9 + 318) = 0u;
  *(_OWORD *)(v9 + 334) = 0u;
  *(_QWORD *)(v9 + 348) = 0;
  return result;
}

void webrtc::PreemptiveExpand::~PreemptiveExpand(webrtc::PreemptiveExpand *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::PreemptiveExpandFactory::~PreemptiveExpandFactory(webrtc::PreemptiveExpandFactory *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

float *webrtc::PriorSignalModelEstimator::Update(float *result, int *a2)
{
  int v2;
  float v3;
  int v4;
  int v5;
  float v6;
  int v7;
  int v8;
  int v9;
  float v10;
  int v11;
  int v12;
  int v13;
  int v14;
  float v15;
  int v16;
  int v17;
  float v18;
  int v19;
  uint64_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float v33;
  float v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  float v40;
  float v41;
  float v42;
  int v43;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  float v50;
  float v51;
  float v52;
  int v53;
  _BOOL4 v56;
  _BOOL4 v58;
  float v59;
  float v60;

  v2 = a2[1];
  v3 = 0.0;
  v4 = a2[2];
  v5 = a2[3];
  v6 = (float)((float)((float)((float)((float)*a2 * 0.05) + 0.0) + (float)((float)v2 * 0.15)) + (float)((float)v4 * 0.25))
     + (float)((float)v5 * 0.35);
  v7 = v2 + *a2 + v4 + v5;
  v8 = a2[4];
  v9 = a2[5];
  v10 = (float)(v6 + (float)((float)v8 * 0.45)) + (float)((float)v9 * 0.55);
  v11 = v8 + v9;
  v12 = a2[6];
  v13 = a2[7];
  v14 = v7 + v11 + v12;
  v15 = (float)(v10 + (float)((float)v12 * 0.65)) + (float)((float)v13 * 0.75);
  v16 = a2[8];
  v17 = a2[9];
  v18 = (float)(v15 + (float)((float)v16 * 0.85)) + (float)((float)v17 * 0.95);
  v19 = v14 + v13 + v16 + v17;
  if (v19 >= 1)
    v18 = v18 / (float)v19;
  v20 = 0;
  v21 = (int32x4_t)xmmword_208F071C0;
  v22.i64[0] = 0x400000004;
  v22.i64[1] = 0x400000004;
  v23.i64[0] = 0x3F0000003F000000;
  v23.i64[1] = 0x3F0000003F000000;
  v24 = (float32x4_t)vdupq_n_s32(0x3DCCCCCDu);
  v25.i64[0] = 0x800000008;
  v25.i64[1] = 0x800000008;
  v26 = 0.0;
  do
  {
    v27 = vmulq_f32(vaddq_f32(vcvtq_f32_s32(v21), v23), v24);
    v28 = vmulq_f32(vaddq_f32(vcvtq_f32_s32(vaddq_s32(v21, v22)), v23), v24);
    v29 = vmulq_f32(v27, vcvtq_f32_s32(*(int32x4_t *)&a2[v20]));
    v30 = vmulq_f32(v28, vcvtq_f32_s32(*(int32x4_t *)&a2[v20 + 4]));
    v31 = vmulq_f32(v29, v27);
    v32 = vmulq_f32(v30, v28);
    v3 = (float)((float)((float)((float)((float)((float)((float)(v3 + v29.f32[0]) + v29.f32[1]) + v29.f32[2])
                                       + v29.f32[3])
                               + v30.f32[0])
                       + v30.f32[1])
               + v30.f32[2])
       + v30.f32[3];
    v26 = (float)((float)((float)((float)((float)((float)((float)(v26 + v31.f32[0]) + v31.f32[1]) + v31.f32[2])
                                        + v31.f32[3])
                                + v32.f32[0])
                        + v32.f32[1])
                + v32.f32[2])
        + v32.f32[3];
    v21 = vaddq_s32(v21, v25);
    v20 += 8;
  }
  while (v20 != 1000);
  v33 = (float)(v26 * 0.002) - (float)(v18 * (float)(v3 * 0.002));
  v34 = 1.0;
  if (v33 >= 0.05)
    v34 = fminf(fmaxf(v18 * 1.2, 0.2), 1.0);
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  *result = v34;
  v40 = 0.0;
  v41 = 0.0;
  v42 = 0.0;
  do
  {
    v43 = a2[v36 + 1000];
    if (v43 > v38)
    {
      v38 = a2[v36 + 1000];
      v42 = (float)((float)(int)v36 + 0.5) * 0.05;
      v37 = v38;
    }
    if (v43 > v39)
    {
      v35 = a2[v36 + 1000];
      v40 = (float)((float)(int)v36 + 0.5) * 0.05;
      v42 = v41;
      v41 = v40;
      v38 = v39;
      v37 = v39;
      v39 = v35;
    }
    ++v36;
  }
  while (v36 != 1000);
  if (vabds_f32(v42, v41) < 0.1 && (float)((float)v39 * 0.5) < (float)v37)
  {
    v35 = v37 + v39;
    v40 = (float)(v41 + v42) * 0.5;
  }
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v50 = 0.0;
  v51 = 0.0;
  v52 = 0.0;
  do
  {
    v53 = a2[v46 + 2000];
    if (v53 > v48)
    {
      v48 = a2[v46 + 2000];
      v52 = (float)((float)(int)v46 + 0.5) * 0.1;
      v47 = v48;
    }
    if (v53 > v49)
    {
      v50 = (float)((float)(int)v46 + 0.5) * 0.1;
      v45 = a2[v46 + 2000];
      v52 = v51;
      v51 = v50;
      v48 = v49;
      v47 = v49;
      v49 = v45;
    }
    ++v46;
  }
  while (v46 != 1000);
  if (vabds_f32(v52, v51) < 0.2 && (float)((float)v49 * 0.5) < (float)v47)
  {
    v45 = v47 + v49;
    v50 = (float)(v51 + v52) * 0.5;
  }
  v56 = v40 >= 0.6 && v35 > 149;
  v58 = v33 >= 0.05 && v45 > 149;
  v59 = 1.0 / (float)((float)((float)v56 + 1.0) + (float)v58);
  result[2] = fminf(fmaxf(v50 * 1.2, 0.16), 1.0);
  result[3] = v59;
  v60 = 0.0;
  if (v56)
  {
    result[1] = fminf(fmaxf(v40 * 0.9, 0.1), 0.95);
    v60 = 1.0 / (float)((float)((float)1u + 1.0) + (float)v58);
  }
  if (!v58)
    v59 = 0.0;
  result[4] = v60;
  result[5] = v59;
  return result;
}

void webrtc::PrioritizedPacketQueue::Push(uint64_t a1, int64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  _QWORD *i;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  size_t v39;
  uint64_t v40;
  size_t v41;
  void *v42;
  unint64_t v43;
  uint64_t v44;
  webrtc::PrioritizedPacketQueue::StreamQueue *v45;
  uint64_t v46;
  rtc::webrtc_checks_impl *v47;
  uint64_t v48;
  uint64_t v49;
  rtc::webrtc_checks_impl *v50;
  unint64_t v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  Timestamp v58;
  uint64_t v59;
  Timestamp v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  BOOL v80;
  unint64_t v81;
  unsigned int v82;
  uint64_t v83;
  size_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  void *v96;
  unint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  int64_t v105;
  char *v106;
  int64_t v107;
  char *v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  int64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  void *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  int64_t v133;
  unint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  __int128 *v139;
  char *v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  unint64_t v153;
  uint64_t v154;
  __int128 *v155;
  _OWORD *v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  _QWORD *v167;
  _QWORD *v168;
  int64_t v169;
  int8x8_t v170;
  unint64_t v171;
  uint8x8_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  unint64_t v177;
  _QWORD *v178;
  unint64_t v179;
  unint64_t v180;
  webrtc::PrioritizedPacketQueue::StreamQueue *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  int64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  __int128 *v201;
  _OWORD *v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  char *v211;
  int64_t v212;
  unint64_t v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  __int128 *v219;
  _OWORD *v220;
  uint64_t v221;
  __int128 v222;
  uint64_t v223;
  int64_t v224;
  int64_t v225;
  uint64_t v226;
  unsigned int __sz;
  size_t __sza;
  uint64_t v229;
  unint64_t v230;
  rtc::webrtc_checks_impl *v231;
  uint64_t v232;

  v7 = *(unsigned int *)(*a3 + 12);
  v8 = *(_QWORD *)(a1 + 136);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = *(unsigned int *)(*a3 + 12);
      if (v8 <= v7)
        v3 = v7 % v8;
    }
    else
    {
      v3 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)(a1 + 128) + 8 * v3);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        if (v9.u32[0] < 2uLL)
        {
          while (1)
          {
            v13 = *((_QWORD *)v11 + 1);
            if (v13 == v7)
            {
              if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
                goto LABEL_96;
            }
            else if ((v13 & (v8 - 1)) != v3)
            {
              goto LABEL_22;
            }
            v11 = *(void **)v11;
            if (!v11)
              goto LABEL_22;
          }
        }
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              goto LABEL_96;
          }
          else
          {
            if (v12 >= v8)
              v12 %= v8;
            if (v12 != v3)
              break;
          }
          v11 = *(void **)v11;
        }
        while (v11);
      }
    }
  }
LABEL_22:
  v11 = operator new(0x20uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_DWORD *)v11 + 4) = v7;
  *((_QWORD *)v11 + 3) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 152) + 1);
  v15 = *(float *)(a1 + 160);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v18 = 1;
    if (v8 >= 3)
      v18 = (v8 & (v8 - 1)) != 0;
    v19 = v18 | (2 * v8);
    v20 = vcvtps_u32_f32(v14 / v15);
    if (v19 <= v20)
      prime = v20;
    else
      prime = v19;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v8 = *(_QWORD *)(a1 + 136);
    }
    if (prime > v8)
      goto LABEL_36;
    if (prime < v8)
    {
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 152) / *(float *)(a1 + 160));
      if (v8 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v41 = std::__next_prime(v34);
        if (prime <= v41)
          prime = v41;
        if (prime >= v8)
        {
LABEL_59:
          v8 = *(_QWORD *)(a1 + 136);
          if ((v8 & (v8 - 1)) == 0)
            goto LABEL_86;
          goto LABEL_73;
        }
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
        if (prime <= v34)
          prime = v34;
        if (prime >= v8)
          goto LABEL_59;
      }
      if (prime)
      {
LABEL_36:
        if (prime >> 61)
          goto LABEL_306;
        v22 = operator new(8 * prime);
        v23 = *(void **)(a1 + 128);
        *(_QWORD *)(a1 + 128) = v22;
        if (v23)
          operator delete(v23);
        v24 = 0;
        *(_QWORD *)(a1 + 136) = prime;
        do
          *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v24++) = 0;
        while (prime != v24);
        v26 = a1 + 144;
        v25 = *(_QWORD **)(a1 + 144);
        if (!v25)
          goto LABEL_72;
        v27 = v25[1];
        v28 = prime - 1;
        if ((prime & (prime - 1)) == 0)
        {
          v29 = v27 & v28;
          *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v29) = v26;
          for (i = (_QWORD *)*v25; *v25; i = (_QWORD *)*v25)
          {
            v31 = i[1] & v28;
            if (v31 == v29)
            {
              v25 = i;
            }
            else
            {
              v32 = *(_QWORD *)(a1 + 128);
              if (*(_QWORD *)(v32 + 8 * v31))
              {
                *v25 = *i;
                v33 = 8 * v31;
                *i = **(_QWORD **)(*(_QWORD *)(a1 + 128) + v33);
                **(_QWORD **)(*(_QWORD *)(a1 + 128) + v33) = i;
              }
              else
              {
                *(_QWORD *)(v32 + 8 * v31) = v25;
                v25 = i;
                v29 = v31;
              }
            }
          }
          goto LABEL_72;
        }
        if (v27 >= prime)
          v27 %= prime;
        *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v27) = v26;
        v37 = (_QWORD *)*v25;
        if (!*v25)
        {
LABEL_72:
          v8 = prime;
          if ((prime & (prime - 1)) != 0)
            goto LABEL_73;
LABEL_86:
          v3 = ((_DWORD)v8 - 1) & v7;
          v16 = *(_QWORD *)(a1 + 128);
          v17 = *(_QWORD **)(v16 + 8 * v3);
          if (v17)
            goto LABEL_25;
          goto LABEL_87;
        }
        while (1)
        {
          v39 = v37[1];
          if (v39 >= prime)
            v39 %= prime;
          if (v39 == v27)
            goto LABEL_66;
          v40 = *(_QWORD *)(a1 + 128);
          if (*(_QWORD *)(v40 + 8 * v39))
          {
            *v25 = *v37;
            v38 = 8 * v39;
            *v37 = **(_QWORD **)(*(_QWORD *)(a1 + 128) + v38);
            **(_QWORD **)(*(_QWORD *)(a1 + 128) + v38) = v37;
            v37 = v25;
LABEL_66:
            v25 = v37;
            v37 = (_QWORD *)*v37;
            if (!v37)
              goto LABEL_72;
          }
          else
          {
            *(_QWORD *)(v40 + 8 * v39) = v25;
            v25 = v37;
            v37 = (_QWORD *)*v37;
            v27 = v39;
            if (!v37)
              goto LABEL_72;
          }
        }
      }
      v42 = *(void **)(a1 + 128);
      *(_QWORD *)(a1 + 128) = 0;
      if (v42)
        operator delete(v42);
      v8 = 0;
      *(_QWORD *)(a1 + 136) = 0;
    }
    if ((v8 & (v8 - 1)) == 0)
      goto LABEL_86;
LABEL_73:
    if (v8 <= v7)
    {
      v3 = v7 % v8;
      v16 = *(_QWORD *)(a1 + 128);
      v17 = *(_QWORD **)(v16 + 8 * (v7 % v8));
      if (v17)
        goto LABEL_25;
    }
    else
    {
      v3 = v7;
      v16 = *(_QWORD *)(a1 + 128);
      v17 = *(_QWORD **)(v16 + 8 * v7);
      if (v17)
        goto LABEL_25;
    }
    goto LABEL_87;
  }
  v16 = *(_QWORD *)(a1 + 128);
  v17 = *(_QWORD **)(v16 + 8 * v3);
  if (v17)
  {
LABEL_25:
    *(_QWORD *)v11 = *v17;
LABEL_93:
    *v17 = v11;
    goto LABEL_94;
  }
LABEL_87:
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v11;
  *(_QWORD *)(v16 + 8 * v3) = a1 + 144;
  if (*(_QWORD *)v11)
  {
    v43 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v43 >= v8)
        v43 %= v8;
    }
    else
    {
      v43 &= v8 - 1;
    }
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v43);
    goto LABEL_93;
  }
LABEL_94:
  ++*(_QWORD *)(a1 + 152);
  v44 = operator new();
  *(_OWORD *)v44 = 0u;
  *(_OWORD *)(v44 + 16) = 0u;
  *(_OWORD *)(v44 + 32) = 0u;
  *(_OWORD *)(v44 + 48) = 0u;
  *(_OWORD *)(v44 + 64) = 0u;
  *(_OWORD *)(v44 + 80) = 0u;
  *(_OWORD *)(v44 + 96) = 0u;
  *(_OWORD *)(v44 + 112) = 0u;
  *(_OWORD *)(v44 + 128) = 0u;
  *(_OWORD *)(v44 + 144) = 0u;
  *(_OWORD *)(v44 + 160) = 0u;
  *(_OWORD *)(v44 + 176) = 0u;
  *(_OWORD *)(v44 + 192) = 0u;
  *(_OWORD *)(v44 + 208) = 0u;
  *(_OWORD *)(v44 + 224) = 0u;
  *(_QWORD *)(v44 + 240) = a2;
  *(_DWORD *)(v44 + 248) = 0;
  v45 = (webrtc::PrioritizedPacketQueue::StreamQueue *)*((_QWORD *)v11 + 3);
  *((_QWORD *)v11 + 3) = v44;
  if (v45)
  {
    webrtc::PrioritizedPacketQueue::StreamQueue::~StreamQueue(v45);
    MEMORY[0x20BD0ADEC]();
  }
LABEL_96:
  v46 = *((_QWORD *)v11 + 3);
  v47 = (rtc::webrtc_checks_impl *)operator new(0x18uLL);
  *((_QWORD *)v47 + 2) = a2;
  v48 = *(_QWORD *)(a1 + 416);
  *(_QWORD *)(v48 + 8) = v47;
  *(_QWORD *)(a1 + 416) = v47;
  *(_QWORD *)v47 = v48;
  *((_QWORD *)v47 + 1) = a1 + 416;
  ++*(_QWORD *)(a1 + 432);
  v49 = *a3;
  if (!*(_BYTE *)(*a3 + 128))
    goto LABEL_305;
  v50 = v47;
  v51 = *(_QWORD *)(v49 + 120);
  if (*(_BYTE *)a1)
  {
    v52 = *(_QWORD *)(v49 + 136);
    v53 = v52 & 0xFFFFFF00;
    v54 = v52 & 0xFFFFFFFF00000000;
  }
  else
  {
    LOBYTE(v52) = 0;
    v54 = 0;
    v53 = 0;
    if (v51 > 4)
LABEL_102:
      rtc::webrtc_checks_impl::UnreachableCodeReached(v47);
  }
  v55 = 0;
  switch(v51)
  {
    case 0uLL:
      goto LABEL_110;
    case 1uLL:
    case 3uLL:
      v55 = 3;
      goto LABEL_110;
    case 2uLL:
      v56 = v54 & 0xFF00000000;
      v57 = (v53 & 0xFFFFFF00 | (unint64_t)v52) != 1 || v56 == 0;
      if (v57)
        v55 = 1;
      else
        v55 = 2;
      goto LABEL_110;
    case 4uLL:
      v55 = 4;
LABEL_110:
      v58.var0 = a2;
      webrtc::PrioritizedPacketQueue::PurgeOldPacketsAtPriorityLevel((webrtc::PrioritizedPacketQueue *)a1, v55, v58);
      v59 = *a3;
      *a3 = 0;
      v60.var0 = a2;
      webrtc::PrioritizedPacketQueue::UpdateAverageQueueTime(a1, v60);
      v61 = 0x7FFFFFFFFFFFFFFFLL;
      if (a2 == 0x7FFFFFFFFFFFFFFFLL)
      {
        v63 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v62 = *(_QWORD *)(a1 + 64);
        v63 = 0x7FFFFFFFFFFFFFFFLL;
        if (v62 != 0x8000000000000000)
        {
          if (v62 == 0x7FFFFFFFFFFFFFFFLL || a2 == 0x8000000000000000)
            v63 = 0x8000000000000000;
          else
            v63 = a2 - v62;
        }
      }
      ++*(_DWORD *)(a1 + 72);
      ++*(_DWORD *)(a1 + 4 * v51 + 76);
      v65 = *(_QWORD *)(v59 + 24) + *(unsigned __int8 *)(v59 + 2);
      v66 = *(_QWORD *)(a1 + 96);
      v67 = 0x8000000000000000;
      if (v65 != 0x8000000000000000 && v66 != 0x8000000000000000)
        v67 = v65 + v66;
      if (v65 == 0x7FFFFFFFFFFFFFFFLL)
        v69 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v69 = v67;
      if (v66 != 0x7FFFFFFFFFFFFFFFLL)
        v61 = v69;
      *(_QWORD *)(a1 + 96) = v61;
      v232 = v59;
      if (*(_BYTE *)(v59 + 185))
        ++*(_DWORD *)(v46 + 248);
      v70 = v46 + 48 * v55;
      v72 = *(char **)(v70 + 8);
      v71 = *(char **)(v70 + 16);
      v73 = (v71 - v72) >> 3;
      v74 = v71 - v72;
      v75 = (_QWORD *)(v70 + 40);
      v76 = *(_QWORD *)(v70 + 40);
      if (v71 == v72)
        v77 = 0;
      else
        v77 = 170 * v73 - 1;
      v79 = (unint64_t *)(v70 + 32);
      v78 = *(_QWORD *)(v70 + 32);
      if (v77 != v78 + v76)
        goto LABEL_216;
      v230 = v63;
      v231 = v50;
      v80 = v78 >= 0xAA;
      v81 = v78 - 170;
      v229 = *(_QWORD *)(v70 + 40);
      if (v80)
      {
        v82 = v55;
        v83 = v46;
        *v79 = v81;
        v85 = v72 + 8;
        v84 = *(_QWORD *)v72;
        *(_QWORD *)(v70 + 8) = v72 + 8;
        if (v71 != *(char **)(v70 + 24))
          goto LABEL_138;
        v99 = *(char **)v70;
        __sza = v84;
        if ((unint64_t)v85 > *(_QWORD *)v70)
        {
          v100 = (uint64_t)&v85[-*(_QWORD *)v70] >> 3;
          if (v100 >= -1)
            v101 = v100 + 1;
          else
            v101 = v100 + 2;
          v102 = v101 >> 1;
          v103 = -v102;
          v104 = &v85[-8 * v102];
          v105 = v71 - v85;
          if (v71 != v85)
          {
            memmove(&v85[-8 * v102], v85, v71 - v85);
            v71 = *(char **)(v70 + 8);
          }
          v106 = &v71[8 * v103];
          v71 = &v104[v105];
          *(_QWORD *)(v70 + 8) = v106;
          *(_QWORD *)(v70 + 16) = &v104[v105];
          v46 = v83;
          v84 = __sza;
          goto LABEL_139;
        }
        v225 = a2;
        v109 = (v71 - v99) >> 2;
        if (v71 == v99)
          v109 = 1;
        if (v109 >> 61)
          goto LABEL_306;
        v110 = v109 >> 2;
        v111 = 8 * v109;
        v112 = (char *)operator new(8 * v109);
        v113 = &v112[8 * v110];
        v114 = &v112[v111];
        v115 = v71 - v85;
        v57 = v71 == v85;
        v71 = v113;
        a2 = v225;
        if (!v57)
        {
          v71 = &v113[v115 & 0xFFFFFFFFFFFFFFF8];
          v116 = v115 - 8;
          if ((unint64_t)(v115 - 8) < 0x38)
          {
            v117 = &v112[8 * v110];
            do
            {
LABEL_288:
              v205 = *(_QWORD *)v85;
              v85 += 8;
              *(_QWORD *)v117 = v205;
              v117 += 8;
            }
            while (v117 != v71);
            goto LABEL_289;
          }
          v198 = &v112[8 * v110];
          v117 = v198;
          if ((unint64_t)(v198 - v85) < 0x20)
            goto LABEL_288;
          v199 = (v116 >> 3) + 1;
          v200 = 8 * (v199 & 0x3FFFFFFFFFFFFFFCLL);
          v117 = &v113[v200];
          v85 += v200;
          v201 = (__int128 *)(v72 + 24);
          v202 = v198 + 16;
          v203 = v199 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v204 = *v201;
            *(v202 - 1) = *(v201 - 1);
            *v202 = v204;
            v201 += 2;
            v202 += 2;
            v203 -= 4;
          }
          while (v203);
          if (v199 != (v199 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_288;
        }
LABEL_289:
        *(_QWORD *)v70 = v112;
        *(_QWORD *)(v70 + 8) = v113;
        *(_QWORD *)(v70 + 16) = v71;
        *(_QWORD *)(v70 + 24) = v114;
        v84 = __sza;
        if (v99)
        {
          operator delete(v99);
          v71 = *(char **)(v70 + 16);
        }
LABEL_138:
        v46 = v83;
        if (!v71)
          goto LABEL_304;
LABEL_139:
        *(_QWORD *)v71 = v84;
        v71 = (char *)(*(_QWORD *)(v70 + 16) + 8);
        *(_QWORD *)(v70 + 16) = v71;
        v55 = v82;
LABEL_214:
        v50 = v231;
        goto LABEL_215;
      }
      __sz = v55;
      v86 = *(char **)(v70 + 24);
      v87 = *(char **)v70;
      v88 = (uint64_t)&v86[-*(_QWORD *)v70];
      v226 = v46;
      if (v73 < (unint64_t)(v88 >> 3))
      {
        v89 = operator new(0xFF0uLL);
        v90 = v89;
        if (v86 != v71)
        {
          if (v71)
          {
            *(_QWORD *)v71 = v89;
            v71 = (char *)(*(_QWORD *)(v70 + 16) + 8);
            *(_QWORD *)(v70 + 16) = v71;
            v46 = v226;
            v55 = __sz;
            goto LABEL_214;
          }
LABEL_304:
          __break(1u);
LABEL_305:
          std::__throw_bad_optional_access[abi:sn180100]();
          goto LABEL_306;
        }
        if (v72 == v87)
        {
          v144 = (v86 - v72) >> 2;
          if (v71 == v72)
            v144 = 1;
          if (v144 >> 61)
            goto LABEL_306;
          v107 = a2;
          v145 = (v144 + 3) >> 2;
          v146 = 8 * v144;
          v147 = (char *)operator new(8 * v144);
          v108 = &v147[8 * v145];
          v148 = &v147[v146];
          v149 = v108;
          v55 = __sz;
          if (v71 != v72)
          {
            v149 = &v108[8 * v73];
            v150 = &v147[8 * v145];
            v151 = v72;
            if ((unint64_t)(v74 - 8) < 0x38)
              goto LABEL_309;
            v152 = &v147[8 * v145];
            v150 = v152;
            v151 = v72;
            if ((unint64_t)(v152 - v72) < 0x20)
              goto LABEL_309;
            v153 = ((unint64_t)(v74 - 8) >> 3) + 1;
            v154 = 8 * (v153 & 0x3FFFFFFFFFFFFFFCLL);
            v150 = &v108[v154];
            v151 = &v72[v154];
            v155 = (__int128 *)(v72 + 16);
            v156 = v152 + 16;
            v157 = v153 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v158 = *v155;
              *(v156 - 1) = *(v155 - 1);
              *v156 = v158;
              v155 += 2;
              v156 += 2;
              v157 -= 4;
            }
            while (v157);
            if (v153 != (v153 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_309:
              do
              {
                v159 = *(_QWORD *)v151;
                v151 += 8;
                *(_QWORD *)v150 = v159;
                v150 += 8;
              }
              while (v150 != v149);
            }
          }
          *(_QWORD *)v70 = v147;
          *(_QWORD *)(v70 + 8) = v108;
          *(_QWORD *)(v70 + 16) = v149;
          *(_QWORD *)(v70 + 24) = v148;
          if (v72)
          {
            operator delete(v72);
            v108 = *(char **)(v70 + 8);
          }
        }
        else
        {
          v107 = a2;
          v108 = v72;
          v55 = __sz;
        }
        *((_QWORD *)v108 - 1) = v90;
        v161 = *(char **)(v70 + 8);
        v160 = *(char **)(v70 + 16);
        *(_QWORD *)(v70 + 8) = v161 - 8;
        v162 = *((_QWORD *)v161 - 1);
        *(_QWORD *)(v70 + 8) = v161;
        if (v160 != *(char **)(v70 + 24))
          goto LABEL_212;
        v191 = *(char **)v70;
        if ((unint64_t)v161 > *(_QWORD *)v70)
        {
          v192 = (uint64_t)&v161[-*(_QWORD *)v70] >> 3;
          if (v192 >= -1)
            v193 = v192 + 1;
          else
            v193 = v192 + 2;
          v194 = v193 >> 1;
          v195 = -v194;
          v196 = &v161[-8 * v194];
          v197 = v160 - v161;
          if (v160 != v161)
          {
            memmove(&v161[-8 * v194], v161, v160 - v161);
            v161 = *(char **)(v70 + 8);
          }
          v160 = &v196[v197];
          *(_QWORD *)(v70 + 8) = &v161[8 * v195];
          *(_QWORD *)(v70 + 16) = &v196[v197];
          v55 = __sz;
          goto LABEL_213;
        }
        v206 = (v160 - v191) >> 2;
        if (v160 == v191)
          v206 = 1;
        if (!(v206 >> 61))
        {
          v207 = v206 >> 2;
          v208 = 8 * v206;
          v209 = (char *)operator new(8 * v206);
          v210 = &v209[8 * v207];
          v211 = &v209[v208];
          v212 = v160 - v161;
          v57 = v160 == v161;
          v160 = v210;
          v55 = __sz;
          if (v57)
            goto LABEL_302;
          v160 = &v210[v212 & 0xFFFFFFFFFFFFFFF8];
          v213 = v212 - 8;
          if ((unint64_t)(v212 - 8) >= 0x38)
          {
            v215 = &v209[8 * v207];
            v214 = v215;
            if ((unint64_t)(v215 - v161) >= 0x20)
            {
              v216 = (v213 >> 3) + 1;
              v217 = 8 * (v216 & 0x3FFFFFFFFFFFFFFCLL);
              v214 = &v210[v217];
              v218 = &v161[v217];
              v219 = (__int128 *)(v161 + 16);
              v220 = v215 + 16;
              v221 = v216 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v222 = *v219;
                *(v220 - 1) = *(v219 - 1);
                *v220 = v222;
                v219 += 2;
                v220 += 2;
                v221 -= 4;
              }
              while (v221);
              v161 = v218;
              if (v216 == (v216 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_302:
                *(_QWORD *)v70 = v209;
                *(_QWORD *)(v70 + 8) = v210;
                *(_QWORD *)(v70 + 16) = v160;
                *(_QWORD *)(v70 + 24) = v211;
                if (v191)
                {
                  operator delete(v191);
                  v160 = *(char **)(v70 + 16);
                }
LABEL_212:
                if (!v160)
                  goto LABEL_304;
LABEL_213:
                *(_QWORD *)v160 = v162;
                v71 = (char *)(*(_QWORD *)(v70 + 16) + 8);
                *(_QWORD *)(v70 + 16) = v71;
                a2 = v107;
                v46 = v226;
                goto LABEL_214;
              }
            }
          }
          else
          {
            v214 = &v209[8 * v207];
          }
          do
          {
            v223 = *(_QWORD *)v161;
            v161 += 8;
            *(_QWORD *)v214 = v223;
            v214 += 8;
          }
          while (v214 != v160);
          goto LABEL_302;
        }
LABEL_306:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      v224 = a2;
      v91 = v88 >> 2;
      if (v86 == v87)
        v92 = 1;
      else
        v92 = v91;
      if (v92 >> 61)
        goto LABEL_306;
      v93 = (char *)operator new(8 * v92);
      v94 = &v93[8 * v73];
      v95 = &v93[8 * v92];
      v96 = operator new(0xFF0uLL);
      if (v73 == v92)
      {
        v50 = v231;
        if (v74 < 1)
        {
          v118 = v74 >> 2;
          if (v71 == v72)
            v118 = 1;
          if (v118 >> 61)
            goto LABEL_306;
          v119 = v96;
          v120 = 8 * v118;
          v94 = (char *)operator new(8 * v118);
          operator delete(v93);
          v95 = &v94[v120];
          v121 = *(char **)(v70 + 8);
          v71 = *(char **)(v70 + 16);
          v93 = v94;
          *(_QWORD *)v94 = v119;
          v98 = v94 + 8;
          if (v71 != v121)
            goto LABEL_180;
        }
        else
        {
          v97 = v73 + 2;
          if (v73 >= -1)
            v97 = v73 + 1;
          v94 -= 8 * (v97 >> 1);
          *(_QWORD *)v94 = v96;
          v98 = v94 + 8;
          if (v71 != v72)
          {
            while (1)
            {
LABEL_180:
              if (v94 == v93)
              {
                if (v98 >= v95)
                {
                  v129 = (v95 - v94) >> 2;
                  if (v95 == v94)
                    v129 = 1;
                  if (v129 >> 61)
                    goto LABEL_306;
                  v130 = (v129 + 3) >> 2;
                  v131 = 8 * v129;
                  v132 = (char *)operator new(8 * v129);
                  v93 = v132;
                  v125 = &v132[8 * v130];
                  v123 = v125;
                  v133 = v98 - v94;
                  if (v98 != v94)
                  {
                    v123 = &v125[v133 & 0xFFFFFFFFFFFFFFF8];
                    v134 = v133 - 8;
                    v135 = &v132[8 * v130];
                    v136 = v94;
                    if (v134 < 0x38)
                      goto LABEL_310;
                    v135 = &v132[8 * v130];
                    v136 = v94;
                    if ((unint64_t)(v135 - v94) < 0x20)
                      goto LABEL_310;
                    v137 = (v134 >> 3) + 1;
                    v138 = 8 * (v137 & 0x3FFFFFFFFFFFFFFCLL);
                    v135 = &v125[v138];
                    v136 = &v94[v138];
                    v139 = (__int128 *)(v94 + 16);
                    v140 = &v132[8 * v130 + 16];
                    v141 = v137 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v142 = *v139;
                      *((_OWORD *)v140 - 1) = *(v139 - 1);
                      *(_OWORD *)v140 = v142;
                      v139 += 2;
                      v140 += 32;
                      v141 -= 4;
                    }
                    while (v141);
                    if (v137 != (v137 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_310:
                      do
                      {
                        v143 = *(_QWORD *)v136;
                        v136 += 8;
                        *(_QWORD *)v135 = v143;
                        v135 += 8;
                      }
                      while (v135 != v123);
                    }
                  }
                  v95 = &v132[v131];
                  operator delete(v94);
                  v50 = v231;
                }
                else
                {
                  v127 = (v95 - v98) >> 3;
                  if (v127 >= -1)
                    v128 = v127 + 1;
                  else
                    v128 = v127 + 2;
                  v123 = &v98[8 * (v128 >> 1)];
                  v125 = &v94[8 * (v128 >> 1)];
                  if (v98 == v94)
                  {
                    v93 = v98;
                  }
                  else
                  {
                    memmove(&v94[8 * (v128 >> 1)], v94, v98 - v94);
                    v93 = v94;
                  }
                }
              }
              else
              {
                v125 = v94;
                v123 = v98;
              }
              v126 = *((_QWORD *)v71 - 1);
              v71 -= 8;
              *((_QWORD *)v125 - 1) = v126;
              v122 = v125 - 8;
              v98 = v123;
              v94 = v122;
              if (v71 == *(char **)(v70 + 8))
                goto LABEL_176;
            }
          }
        }
      }
      else
      {
        v50 = v231;
        *(_QWORD *)v94 = v96;
        v98 = v94 + 8;
        if (v71 != v72)
          goto LABEL_180;
      }
      v122 = v94;
      v123 = v98;
LABEL_176:
      v124 = *(char **)v70;
      *(_QWORD *)v70 = v93;
      *(_QWORD *)(v70 + 8) = v122;
      v71 = v123;
      *(_QWORD *)(v70 + 16) = v123;
      *(_QWORD *)(v70 + 24) = v95;
      a2 = v224;
      v46 = v226;
      v55 = __sz;
      if (v124)
      {
        operator delete(v124);
        v71 = *(char **)(v70 + 16);
      }
LABEL_215:
      v72 = *(char **)(v70 + 8);
      v75 = (_QWORD *)(v70 + 40);
      v63 = v230;
      v79 = (unint64_t *)(v70 + 32);
      v76 = v229;
LABEL_216:
      if (v71 == v72)
        goto LABEL_304;
      v163 = *v75 + *v79;
      v164 = *(_QWORD *)&v72[8 * (v163 / 0xAA)];
      if (!v164)
        goto LABEL_304;
      v165 = (_QWORD *)(v164 + 24 * (v163 % 0xAA));
      *v165 = v232;
      v165[1] = v63;
      v165[2] = v50;
      ++*v75;
      if (!v76)
      {
        v182 = a1 + 48 * v55;
        v185 = *(_QWORD *)(v182 + 208);
        v184 = (uint64_t *)(v182 + 208);
        v183 = v185;
        v186 = *(v184 - 4);
        v187 = *(v184 - 3);
        v188 = ((v187 - v186) << 6) - 1;
        if (v187 == v186)
          v188 = 0;
        if (v188 == v183 + *(v184 - 1))
        {
          std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity((uint64_t)(v184 - 5));
          v183 = *v184;
          v186 = *(v184 - 4);
          v187 = *(v184 - 3);
        }
        if (v187 != v186)
        {
          v189 = *(v184 - 1) + v183;
          v190 = *(_QWORD *)(v186 + ((v189 >> 6) & 0x3FFFFFFFFFFFFF8));
          if (v190)
          {
            *(_QWORD *)(v190 + 8 * (v189 & 0x1FF)) = v46;
            *v184 = v183 + 1;
            if (*(_DWORD *)(a1 + 408) <= v55)
              goto LABEL_221;
            goto LABEL_220;
          }
        }
        goto LABEL_304;
      }
      if (*(_DWORD *)(a1 + 408) > v55)
LABEL_220:
        *(_DWORD *)(a1 + 408) = v55;
LABEL_221:
      if (a2 == 0x7FFFFFFFFFFFFFFFLL
        || (v166 = *(_QWORD *)(a1 + 120), v166 == 0x8000000000000000)
        || a2 != 0x8000000000000000 && v166 != 0x7FFFFFFFFFFFFFFFLL && a2 - v166 > 500000)
      {
        v167 = *(_QWORD **)(a1 + 144);
        if (v167)
        {
          do
          {
            while (1)
            {
              v168 = (_QWORD *)v167[3];
              if (!v168[5] && !v168[11] && !v168[17] && !v168[23] && !v168[29])
              {
                v169 = v168[30];
                if (v169 != 0x7FFFFFFFFFFFFFFFLL)
                {
                  if (v169 != 0x8000000000000000)
                    v169 += 500000;
                  if (v169 < a2)
                    break;
                }
              }
              v167 = (_QWORD *)*v167;
              if (!v167)
                goto LABEL_267;
            }
            v170 = *(int8x8_t *)(a1 + 136);
            v171 = v167[1];
            v172 = (uint8x8_t)vcnt_s8(v170);
            v172.i16[0] = vaddlv_u8(v172);
            if (v172.u32[0] > 1uLL)
            {
              if (v171 >= *(_QWORD *)&v170)
                v171 %= *(_QWORD *)&v170;
            }
            else
            {
              v171 &= *(_QWORD *)&v170 - 1;
            }
            v173 = (_QWORD *)*v167;
            v174 = *(_QWORD *)(a1 + 128);
            v175 = *(_QWORD **)(v174 + 8 * v171);
            do
            {
              v176 = v175;
              v175 = (_QWORD *)*v175;
            }
            while (v175 != v167);
            if (v176 == (_QWORD *)(a1 + 144))
              goto LABEL_311;
            v177 = v176[1];
            if (v172.u32[0] > 1uLL)
            {
              if (v177 >= *(_QWORD *)&v170)
                v177 %= *(_QWORD *)&v170;
            }
            else
            {
              v177 &= *(_QWORD *)&v170 - 1;
            }
            v178 = (_QWORD *)*v167;
            if (v177 != v171)
            {
LABEL_311:
              if (v173)
              {
                v179 = v173[1];
                if (v172.u32[0] > 1uLL)
                {
                  if (v179 >= *(_QWORD *)&v170)
                    v179 %= *(_QWORD *)&v170;
                }
                else
                {
                  v179 &= *(_QWORD *)&v170 - 1;
                }
                v178 = (_QWORD *)*v167;
                if (v179 == v171)
                {
LABEL_258:
                  v180 = v178[1];
                  if (v172.u32[0] > 1uLL)
                  {
                    if (v180 >= *(_QWORD *)&v170)
                      v180 %= *(_QWORD *)&v170;
                  }
                  else
                  {
                    v180 &= *(_QWORD *)&v170 - 1;
                  }
                  if (v180 != v171)
                  {
                    *(_QWORD *)(*(_QWORD *)(a1 + 128) + 8 * v180) = v176;
                    v178 = (_QWORD *)*v167;
                  }
                  goto LABEL_264;
                }
              }
              *(_QWORD *)(v174 + 8 * v171) = 0;
              v178 = (_QWORD *)*v167;
            }
            if (v178)
              goto LABEL_258;
LABEL_264:
            *v176 = v178;
            *v167 = 0;
            --*(_QWORD *)(a1 + 152);
            v181 = (webrtc::PrioritizedPacketQueue::StreamQueue *)v167[3];
            v167[3] = 0;
            if (v181)
            {
              webrtc::PrioritizedPacketQueue::StreamQueue::~StreamQueue(v181);
              MEMORY[0x20BD0ADEC]();
            }
            operator delete(v167);
            v167 = v173;
          }
          while (v173);
        }
LABEL_267:
        *(_QWORD *)(a1 + 120) = a2;
      }
      return;
    default:
      goto LABEL_102;
  }
}

void webrtc::PrioritizedPacketQueue::PurgeOldPacketsAtPriorityLevel(webrtc::PrioritizedPacketQueue *this, unsigned int w1_0, Timestamp a3)
{
  unsigned int v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  __int16 v7;
  int64x2_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  int64x2_t *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v29;
  int64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  void *v46;
  webrtc::PrioritizedPacketQueue *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v67;
  unint64_t v68;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  void *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __int16 v91;
  const void **v92;
  char v93;
  uint64_t v94;
  __int16 v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *i;
  unint64_t v102;
  unint64_t v103;
  __int16 v104;
  char *k;
  uint64_t v106;
  char *v107;
  char *v108;
  _BYTE *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  char *j;
  uint64_t v116;
  char *v117;
  int64x2_t v118;
  unint64_t v119;
  int64x2_t *v120;
  void **v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  unint64_t v127;
  const void **v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  void **m;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  char *v141;
  void **v142;
  uint64_t v143;
  uint64_t v144;
  std::string *v145;
  uint64_t v146;
  uint64_t *v148;
  _QWORD *v149;
  char *v150;
  int64x2_t *v151;
  int64x2_t *v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  int64_t v158;
  uint64_t v160;
  void ***v161;
  Timestamp v162;

  v3 = w1_0;
  v4 = *((_QWORD *)this + 1);
  if (w1_0 < v4 >> 1)
  {
    v5 = (_QWORD *)((char *)this + 16);
    if ((v4 & 1) != 0)
      v5 = (_QWORD *)*v5;
    v158 = v5[w1_0];
    if ((unint64_t)(v158 - 0x7FFFFFFFFFFFFFFFLL) < 2)
      return;
    v6 = (char *)this + 48 * w1_0;
    v9 = *((_QWORD *)v6 + 25);
    v8 = (int64x2_t *)(v6 + 200);
    v7 = v9;
    v10 = v8[-2].i64[1];
    v11 = v8[-1].i64[0];
    v12 = (char *)(v10 + 8 * (v9 >> 9));
    if (v11 == v10)
      v13 = 0;
    else
      v13 = (_QWORD *)(*(_QWORD *)v12 + 8 * (v7 & 0x1FF));
    v148 = (uint64_t *)((char *)this + 48 * w1_0 + 208);
    v155 = (char *)this + 416;
    v156 = (char *)this + 76;
    v151 = v8;
    v152 = v8 - 2;
LABEL_13:
    if (v11 == v10)
    {
      if (!v13)
        return;
    }
    else if (v13 == (_QWORD *)(*(_QWORD *)(v10 + (((unint64_t)(*v148 + v8->i64[0]) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * ((*v148 + v8->i64[0]) & 0x1FF)))
    {
      return;
    }
    v15 = *v13 + 48 * v3;
    v17 = *(_QWORD *)(v15 + 40);
    v16 = (_QWORD *)(v15 + 40);
    if (!v17)
    {
LABEL_113:
      v81 = (char *)(v10 + 8 * ((unint64_t)v151->i64[0] >> 9));
      if (v11 != v10)
      {
        v82 = *(_QWORD *)v81 + 8 * (v151->i64[0] & 0x1FF);
        if (v13 != (_QWORD *)v82)
          goto LABEL_115;
LABEL_121:
        v86 = 0;
        v84 = *(char **)v81;
        goto LABEL_122;
      }
      v82 = 0;
      if (!v13)
        goto LABEL_121;
LABEL_115:
      v83 = (((uint64_t)v13 - *(_QWORD *)v12) >> 3) + ((v12 - v81) << 6);
      v84 = *(char **)v81;
      v85 = v82 - *(_QWORD *)v81;
      v86 = v83 - (v85 >> 3);
      if (v83 == v85 >> 3)
      {
LABEL_122:
        v93 = 1;
        v88 = (char *)v82;
        v87 = (char *)(v10 + 8 * ((unint64_t)v151->i64[0] >> 9));
        v94 = (v82 - (uint64_t)v84) >> 3;
        if (v82 - (uint64_t)v84 < -7)
          goto LABEL_136;
        goto LABEL_123;
      }
      if (v83 >= 1)
      {
        v87 = &v81[8 * ((unint64_t)v83 >> 9)];
        v84 = *(char **)v87;
        v88 = (char *)(*(_QWORD *)v87 + 8 * (v83 & 0x1FF));
        v89 = *v148;
        if (v86 > (unint64_t)(*v148 - 1) >> 1)
          goto LABEL_118;
LABEL_135:
        v93 = 0;
        v94 = (v88 - v84) >> 3;
        if (v88 - v84 < -7)
        {
LABEL_136:
          v103 = 510 - v94;
          v104 = ~(_WORD)v103;
          v96 = &v87[-8 * (v103 >> 9)];
          v97 = *(char **)v96;
          v98 = (char *)(*(_QWORD *)v96 + 8 * (v104 & 0x1FF));
          if (v81 == v87)
            goto LABEL_137;
          if (v84 == v88)
            goto LABEL_132;
LABEL_124:
          while (1)
          {
            v99 = (v98 - v97) >> 3;
            if ((v88 - v84) >> 3 < v99)
              v99 = (v88 - v84) >> 3;
            v88 -= 8 * v99;
            v98 -= 8 * v99;
            if (v99)
              memmove(v98, v88, 8 * v99);
            if (v88 == v84)
              break;
            v100 = (char *)*((_QWORD *)v96 - 1);
            v96 -= 8;
            v97 = v100;
            v98 = v100 + 4096;
          }
          v97 = *(char **)v96;
          if ((char *)(*(_QWORD *)v96 + 4096) == v98)
          {
            v108 = (char *)*((_QWORD *)v96 + 1);
            v96 += 8;
            v97 = v108;
            v98 = v108;
            i = v87 - 8;
            if (v87 - 8 != v81)
              goto LABEL_149;
          }
          else
          {
LABEL_132:
            for (i = v87 - 8; i != v81; i -= 8)
            {
LABEL_149:
              while (1)
              {
                v109 = *(_BYTE **)i;
                v110 = (char *)(*(_QWORD *)i + 4096);
                while (1)
                {
                  v111 = (v98 - v97) >> 3;
                  if ((v110 - v109) >> 3 < v111)
                    v111 = (v110 - v109) >> 3;
                  v110 -= 8 * v111;
                  v98 -= 8 * v111;
                  if (v111)
                    memmove(v98, v110, 8 * v111);
                  if (v110 == v109)
                    break;
                  v112 = (char *)*((_QWORD *)v96 - 1);
                  v96 -= 8;
                  v97 = v112;
                  v98 = v112 + 4096;
                }
                v97 = *(char **)v96;
                if ((char *)(*(_QWORD *)v96 + 4096) == v98)
                  break;
                i -= 8;
                if (i == v81)
                  goto LABEL_157;
              }
              v113 = (char *)*((_QWORD *)v96 + 1);
              v96 += 8;
              v97 = v113;
              v98 = v113;
            }
          }
LABEL_157:
          v114 = (char *)(*(_QWORD *)v81 + 4096);
          v8 = v151;
          if (v114 != (char *)v82)
          {
            for (j = v96 - 8; ; j -= 8)
            {
              v116 = (v98 - v97) >> 3;
              if ((uint64_t)&v114[-v82] >> 3 < v116)
                v116 = (uint64_t)&v114[-v82] >> 3;
              v114 -= 8 * v116;
              if (v116)
                memmove(&v98[-8 * v116], v114, 8 * v116);
              if (v114 == (char *)v82)
                break;
              v117 = *(char **)j;
              v97 = v117;
              v98 = v117 + 4096;
            }
          }
          goto LABEL_165;
        }
LABEL_123:
        v95 = v94 + 1;
        v96 = &v87[8 * ((unint64_t)(v94 + 1) >> 9)];
        v97 = *(char **)v96;
        v98 = (char *)(*(_QWORD *)v96 + 8 * (v95 & 0x1FF));
        if (v81 != v87)
          goto LABEL_124;
LABEL_137:
        v8 = v151;
        if ((char *)v82 != v88)
        {
          for (k = v96 - 8; ; k -= 8)
          {
            v106 = (v98 - v97) >> 3;
            if ((uint64_t)&v88[-v82] >> 3 < v106)
              v106 = (uint64_t)&v88[-v82] >> 3;
            v88 -= 8 * v106;
            if (v106)
              memmove(&v98[-8 * v106], v88, 8 * v106);
            if (v88 == (char *)v82)
              break;
            v107 = *(char **)k;
            v97 = v107;
            v98 = v107 + 4096;
          }
        }
LABEL_165:
        if (!v82)
          goto LABEL_231;
        v118 = vaddq_s64(*v8, (int64x2_t)xmmword_208F0A010);
        *v8 = v118;
        v119 = v118.i64[0];
        v120 = v152;
        v121 = (void **)v152->i64[1];
        if (v118.i64[0] >= 0x400uLL)
        {
          operator delete(*v121);
          v121 = (void **)(v152->i64[1] + 8);
          v152->i64[1] = (uint64_t)v121;
          v119 = v8->i64[0] - 512;
          v8->i64[0] = v119;
        }
LABEL_168:
        v12 = (char *)&v121[v119 >> 9];
        if ((void **)v120[1].i64[0] == v121)
        {
          v13 = 0;
          if ((v93 & 1) == 0)
          {
LABEL_172:
            v122 = v86 + (((uint64_t)v13 - *(_QWORD *)v12) >> 3);
            if (v122 >= 1)
            {
              v12 += 8 * ((unint64_t)v122 >> 9);
              v13 = (_QWORD *)(*(_QWORD *)v12 + 8 * (v122 & 0x1FF));
            }
            else
            {
              v123 = 511 - v122;
              v12 -= 8 * (v123 >> 9);
              v13 = (_QWORD *)(*(_QWORD *)v12 + 8 * (~(_WORD)v123 & 0x1FF));
            }
          }
        }
        else
        {
          v13 = (_QWORD *)(*(_QWORD *)v12 + 8 * (v119 & 0x1FF));
          if ((v93 & 1) == 0)
            goto LABEL_172;
        }
        v3 = w1_0;
        v14 = v152;
        goto LABEL_12;
      }
      v102 = 511 - v83;
      v87 = &v81[-8 * (v102 >> 9)];
      v84 = *(char **)v87;
      v88 = (char *)(*(_QWORD *)v87 + 8 * (~(_WORD)v102 & 0x1FF));
      v89 = *v148;
      if (v86 <= (unint64_t)(*v148 - 1) >> 1)
        goto LABEL_135;
LABEL_118:
      v90 = (v88 - v84) >> 3;
      if (v88 - v84 < -7)
      {
        v124 = 510 - v90;
        v91 = ~(_WORD)v124;
        v92 = (const void **)&v87[-8 * (v124 >> 9)];
      }
      else
      {
        v91 = v90 + 1;
        v92 = (const void **)&v87[8 * ((unint64_t)(v90 + 1) >> 9)];
      }
      v125 = (char *)*v92;
      v126 = (char *)*v92 + 8 * (v91 & 0x1FF);
      v8 = v151;
      v127 = v89 + v151->i64[0];
      v128 = (const void **)(v10 + 8 * (v127 >> 9));
      if (v11 == v10)
      {
        v129 = 0;
        if (v92 == v128)
          goto LABEL_190;
LABEL_177:
        v130 = v125 + 4096;
        if (v125 + 4096 == v126)
          goto LABEL_201;
        for (v87 += 8; ; v87 += 8)
        {
          if ((v130 - v126) >> 3 >= (v84 - v88 + 4096) >> 3)
            v131 = (v84 - v88 + 4096) >> 3;
          else
            v131 = (v130 - v126) >> 3;
          if (v131)
            memmove(v88, v126, 8 * v131);
          v126 += 8 * v131;
          if (v126 == v130)
            break;
          v132 = *(char **)v87;
          v84 = v132;
          v88 = v132;
        }
        v88 += 8 * v131;
        v84 = (char *)*((_QWORD *)v87 - 1);
        if (v84 + 4096 == v88)
          goto LABEL_200;
        v87 -= 8;
        for (++v92; v92 != v128; ++v92)
        {
          while (1)
          {
            v136 = 0;
            v137 = (char *)*v92;
            for (v87 += 8; ; v87 += 8)
            {
              if ((4096 - 8 * v136) >> 3 >= (v84 - v88 + 4096) >> 3)
                v138 = (v84 - v88 + 4096) >> 3;
              else
                v138 = (4096 - 8 * v136) >> 3;
              if (v138)
                memmove(v88, &v137[8 * v136], 8 * v138);
              v136 += v138;
              if (v136 == 512)
                break;
              v139 = *(char **)v87;
              v84 = v139;
              v88 = v139;
            }
            v88 += 8 * v138;
            v84 = (char *)*((_QWORD *)v87 - 1);
            if (v84 + 4096 == v88)
              break;
            v87 -= 8;
            if (++v92 == v128)
              goto LABEL_212;
          }
LABEL_200:
          v84 = *(char **)v87;
          v88 = *(char **)v87;
LABEL_201:
          ;
        }
LABEL_212:
        v140 = (char *)*v128;
        if (*v128 != (const void *)v129)
        {
          for (m = (void **)(v87 + 8); ; ++m)
          {
            if ((v129 - (uint64_t)v140) >> 3 >= (v84 - v88 + 4096) >> 3)
              v134 = (v84 - v88 + 4096) >> 3;
            else
              v134 = (v129 - (uint64_t)v140) >> 3;
            if (v134)
              memmove(v88, v140, 8 * v134);
            v140 += 8 * v134;
            if (v140 == (char *)v129)
              break;
            v141 = (char *)*m;
            v84 = v141;
            v88 = v141;
          }
          goto LABEL_221;
        }
      }
      else
      {
        v129 = (uint64_t)*v128 + 8 * (v127 & 0x1FF);
        if (v92 != v128)
          goto LABEL_177;
LABEL_190:
        if (v126 != (char *)v129)
        {
          for (m = (void **)(v87 + 8); ; ++m)
          {
            if ((v129 - (uint64_t)v126) >> 3 >= (v84 - v88 + 4096) >> 3)
              v134 = (v84 - v88 + 4096) >> 3;
            else
              v134 = (v129 - (uint64_t)v126) >> 3;
            if (v134)
              memmove(v88, v126, 8 * v134);
            v126 += 8 * v134;
            if (v126 == (char *)v129)
              break;
            v135 = (char *)*m;
            v84 = v135;
            v88 = v135;
          }
LABEL_221:
          v88 += 8 * v134;
          if ((char *)*(m - 1) + 4096 == v88)
            v88 = (char *)*m;
          v120 = v152;
LABEL_224:
          if (!v88)
            goto LABEL_231;
          v121 = (void **)v120->i64[1];
          v142 = (void **)v120[1].i64[0];
          v143 = *v148;
          if (v142 == v121)
            v144 = 0;
          else
            v144 = (((char *)v142 - (char *)v121) << 6) - 1;
          *v148 = v143 - 1;
          v119 = v151->i64[0];
          if ((unint64_t)(v144 - (v143 + v151->i64[0]) + 1) >= 0x400)
          {
            operator delete(*(v142 - 1));
            v93 = 0;
            v121 = (void **)v120->i64[1];
            v120[1].i64[0] -= 8;
            v119 = v151->i64[0];
          }
          else
          {
            v93 = 0;
          }
          goto LABEL_168;
        }
      }
      v120 = v152;
      goto LABEL_224;
    }
    v149 = v13;
    v150 = v12;
    v153 = *v13;
    v18 = *v13 + 48 * v3;
    v19 = (unint64_t *)(v18 + 32);
    v160 = v18;
    v161 = (void ***)(v18 + 8);
    while (1)
    {
      v20 = *v19;
      v21 = *v19 / 0xAA;
      v22 = *v19 % 0xAA;
      v23 = *(_QWORD *)(*(_QWORD *)(v160 + 8) + 8 * v21);
      v24 = v23 + 24 * v22;
      v27 = *(_QWORD *)(v24 + 8);
      v25 = v24 + 8;
      v26 = v27;
      v29 = a3.var0 == 0x7FFFFFFFFFFFFFFFLL || v26 == 0x8000000000000000;
      if (a3.var0 == 0x8000000000000000 || v26 == 0x7FFFFFFFFFFFFFFFLL)
        v31 = 0x8000000000000000;
      else
        v31 = a3.var0 - v26;
      if (v29)
        v31 = 0x7FFFFFFFFFFFFFFFLL;
      if (v31 <= v158)
      {
        v12 = v150;
        v13 = v149 + 1;
        if ((_QWORD *)((char *)v149 - *(_QWORD *)v150 + 8) == (_QWORD *)4096)
        {
          v12 = v150 + 8;
          v13 = (_QWORD *)*((_QWORD *)v150 + 1);
        }
        v3 = w1_0;
        v8 = v151;
        v14 = v152;
LABEL_12:
        v10 = v14->i64[1];
        v11 = v14[1].i64[0];
        goto LABEL_13;
      }
      v32 = *(_QWORD *)(v23 + 24 * v22);
      *(_QWORD *)(v23 + 24 * v22) = 0;
      v33 = (char *)(*v161)[v21];
      if (!v33)
        goto LABEL_231;
      v34 = *(char **)(v25 + 8);
      v35 = 24 * v22;
      v36 = *(_QWORD **)&v33[v35];
      *(_QWORD *)&v33[v35] = 0;
      if (v36)
      {
        v37 = (unsigned int *)v36[22];
        if (v37)
        {
          v38 = v37 + 2;
          do
          {
            v39 = __ldaxr(v38);
            v40 = v39 - 1;
          }
          while (__stlxr(v40, v38));
          if (!v40)
            (*(void (**)(unsigned int *))(*(_QWORD *)v37 + 8))(v37);
        }
        v41 = v36[11];
        if (v41)
        {
          v42 = (unsigned int *)(v41 + 24);
          do
          {
            v43 = __ldaxr(v42);
            v44 = v43 - 1;
          }
          while (__stlxr(v44, v42));
          if (!v44)
          {
            v45 = *(_QWORD *)(v41 + 16);
            *(_QWORD *)(v41 + 16) = 0;
            if (v45)
              MEMORY[0x20BD0ADD4](v45, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v41, 0x1010C40EE34DA14);
          }
        }
        v46 = (void *)v36[7];
        if (v46)
        {
          v36[8] = v46;
          operator delete(v46);
        }
        MEMORY[0x20BD0ADEC](v36, 0x1020C4000E59722);
        v20 = *v19;
        v47 = this;
      }
      else
      {
        v47 = this;
      }
      --*v16;
      v48 = v20 + 1;
      *v19 = v48;
      if (v48 >= 0x154)
      {
        operator delete(**v161);
        ++*v161;
        *v19 -= 170;
      }
      if (*(_BYTE *)(v32 + 185))
        --*(_DWORD *)(v153 + 248);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
      {
        v154 = v154 & 0xFFFFFFFF00000000 | 0xE09;
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/prioritized_packet_queue.cc");
      }
      --*((_DWORD *)v47 + 18);
      if (!*(_BYTE *)(v32 + 128))
        goto LABEL_232;
      v56 = *(_QWORD *)(v32 + 120);
      if (v56 >= 5)
        goto LABEL_231;
      --*(_DWORD *)&v156[4 * v56];
      v57 = *((_QWORD *)v47 + 12);
      v58 = 0x7FFFFFFFFFFFFFFFLL;
      if (v57 != 0x7FFFFFFFFFFFFFFFLL)
        break;
      *((_QWORD *)v47 + 12) = 0x7FFFFFFFFFFFFFFFLL;
      v62 = *((_QWORD *)v47 + 13);
      if (v62 != 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_69;
LABEL_83:
      v67 = *((_QWORD *)v47 + 7);
      v68 = 0x7FFFFFFFFFFFFFFFLL;
      if (v67 != 0x7FFFFFFFFFFFFFFFLL && v58 != 0x8000000000000000)
      {
        v68 = v67 - v58;
        if (v58 == 0x7FFFFFFFFFFFFFFFLL || v67 == 0x8000000000000000)
          v68 = 0x8000000000000000;
      }
      *((_QWORD *)v47 + 7) = v68;
      if (!*(_BYTE *)(v32 + 200))
        *(_BYTE *)(v32 + 200) = 1;
      *(_QWORD *)(v32 + 192) = v58;
      if (v34 == v155)
        goto LABEL_233;
      v70 = *(_QWORD *)v34;
      *(_QWORD *)(v70 + 8) = *((_QWORD *)v34 + 1);
      **((_QWORD **)v34 + 1) = v70;
      --*((_QWORD *)v47 + 54);
      operator delete(v34);
      v71 = *(unsigned int **)(v32 + 176);
      if (v71)
      {
        v72 = v71 + 2;
        do
        {
          v73 = __ldaxr(v72);
          v74 = v73 - 1;
        }
        while (__stlxr(v74, v72));
        if (!v74)
          (*(void (**)(unsigned int *))(*(_QWORD *)v71 + 8))(v71);
      }
      v75 = *(_QWORD *)(v32 + 88);
      if (v75)
      {
        v76 = (unsigned int *)(v75 + 24);
        do
        {
          v77 = __ldaxr(v76);
          v78 = v77 - 1;
        }
        while (__stlxr(v78, v76));
        if (!v78)
        {
          v79 = *(_QWORD *)(v75 + 16);
          *(_QWORD *)(v75 + 16) = 0;
          if (v79)
            MEMORY[0x20BD0ADD4](v79, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v75, 0x1010C40EE34DA14);
        }
      }
      v80 = *(void **)(v32 + 56);
      if (v80)
      {
        *(_QWORD *)(v32 + 64) = v80;
        operator delete(v80);
      }
      MEMORY[0x20BD0ADEC](v32, 0x1020C4000E59722);
      if (!*v16)
      {
        v10 = v152->i64[1];
        v11 = v152[1].i64[0];
        v13 = v149;
        v12 = v150;
        goto LABEL_113;
      }
    }
    v59 = *(_QWORD *)(v32 + 24) + *(unsigned __int8 *)(v32 + 2);
    v60 = 0x7FFFFFFFFFFFFFFFLL;
    if (v59 != 0x8000000000000000)
    {
      v60 = v57 - v59;
      if (v59 == 0x7FFFFFFFFFFFFFFFLL || v57 == 0x8000000000000000)
        v60 = 0x8000000000000000;
    }
    *((_QWORD *)v47 + 12) = v60;
    v62 = *((_QWORD *)v47 + 13);
    if (v62 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_83;
LABEL_69:
    if (v26 != 0x8000000000000000)
    {
      v63 = v26 == 0x7FFFFFFFFFFFFFFFLL || v62 == 0x8000000000000000;
      v64 = v63 ? 0x8000000000000000 : v62 - v26;
      if (v64 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v65 = *((_QWORD *)v47 + 8);
        if (v65 != 0x8000000000000000)
        {
          v58 = v64 - v65;
          if (v65 == 0x7FFFFFFFFFFFFFFFLL || v64 == 0x8000000000000000)
            v58 = 0x8000000000000000;
        }
      }
    }
    goto LABEL_83;
  }
LABEL_231:
  __break(1u);
LABEL_232:
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_233:
  v145 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/prioritized_packet_queue.cc", 408, "packet.enqueue_time_iterator != enqueue_times_.end()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, v52, v53, v54, v55, v146);
  webrtc::PrioritizedPacketQueue::UpdateAverageQueueTime((uint64_t)v145, v162);
}

uint64_t webrtc::PrioritizedPacketQueue::UpdateAverageQueueTime(uint64_t this, Timestamp a2)
{
  uint64_t v2;
  webrtc **v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  TimeDelta v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  char v22;
  std::string v23;
  char *v24;
  std::string v25;
  std::string *v26;
  webrtc *var0;
  void *v28[3];

  var0 = (webrtc *)a2.var0;
  v3 = (webrtc **)(this + 104);
  v2 = *(_QWORD *)(this + 104);
  v4 = a2.var0 - v2;
  if (a2.var0 < v2)
  {
    rtc::webrtc_checks_impl::MakeVal<webrtc::Timestamp,(std::string *)0>(&var0, (TimeDelta)a2.var0, (char *)&v25);
    rtc::webrtc_checks_impl::ToStringVal::ToStringVal(&v23, (const rtc::webrtc_checks_impl::ToStringVal *)&v25);
    v24 = &v22;
    rtc::webrtc_checks_impl::ToStringVal::~ToStringVal((void **)&v25.__r_.__value_.__l.__data_);
    rtc::webrtc_checks_impl::MakeVal<webrtc::Timestamp,(std::string *)0>(v3, v16, (char *)v28);
    rtc::webrtc_checks_impl::ToStringVal::ToStringVal(&v25, (const rtc::webrtc_checks_impl::ToStringVal *)v28);
    v26 = &v23;
    rtc::webrtc_checks_impl::ToStringVal::~ToStringVal(v28);
    v21 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/prioritized_packet_queue.cc", 310, "now >= last_update_time_", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::ToStringVal,rtc::webrtc_checks_impl::ToStringVal>(char const*,int,char const*,rtc::webrtc_checks_impl::ToStringVal,rtc::webrtc_checks_impl::ToStringVal const&)::t, v17, v18, v19, v20, (uint64_t)v26);
    return webrtc::PrioritizedPacketQueue::Pop((webrtc::PrioritizedPacketQueue *)v21);
  }
  else if (a2.var0 != v2)
  {
    v5 = 0x7FFFFFFFFFFFFFFFLL;
    v6 = 0x8000000000000000;
    if (v2 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 == 0x8000000000000000)
      v4 = 0x8000000000000000;
    if (v2 == 0x8000000000000000)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v8 = v4;
    if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    if (*(_BYTE *)(this + 112))
    {
      v9 = *(_QWORD *)(this + 64);
      if (v8 != 0x8000000000000000 && v9 != 0x8000000000000000)
        v6 = v9 + v8;
      if (v8 == 0x7FFFFFFFFFFFFFFFLL)
        v11 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v11 = v6;
      if (v9 != 0x7FFFFFFFFFFFFFFFLL)
        v5 = v11;
      *(_QWORD *)(this + 64) = v5;
    }
    else
    {
      v12 = *(_QWORD *)(this + 56);
      if (v12 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v13 = v8 * *(int *)(this + 72);
        if (v13 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v5 = 0x8000000000000000;
          v14 = v13 == 0x8000000000000000 || v12 == 0x8000000000000000;
          v15 = v13 + v12;
          if (!v14)
            v5 = v15;
        }
      }
      *(_QWORD *)(this + 56) = v5;
    }
    *v3 = (webrtc *)a2.var0;
  }
  return this;
}

void webrtc::PrioritizedPacketQueue::Pop(webrtc::PrioritizedPacketQueue *this@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, uint64_t a5@<X7>, _QWORD *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  int v49;
  char *v50;
  void **v51;
  _QWORD *v52;
  void **v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  std::string *v66;
  uint64_t v67;
  uint64_t v68;

  if (!*((_DWORD *)this + 18))
  {
    v15 = 0;
    goto LABEL_70;
  }
  v8 = 48 * *((int *)this + 102);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)this + v8 + 176)
                             + ((*(_QWORD *)((char *)this + v8 + 200) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * (*(_QWORD *)((_BYTE *)this + v8 + 200) & 0x1FFLL));
  v10 = v9 + v8 + 8;
  v12 = (unint64_t *)(v9 + v8 + 32);
  v11 = *v12;
  v13 = 8 * (*v12 / 0xAA);
  v14 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v10 + v13) + 24 * (*v12 % 0xAA));
  v15 = *v14;
  *v14 = 0;
  v16 = *(_QWORD *)(*(_QWORD *)v10 + v13);
  if (v16)
  {
    v18 = v14[1];
    v17 = (uint64_t *)v14[2];
    v19 = 24 * (v11 % 0xAA);
    v20 = *(_QWORD **)(v16 + v19);
    *(_QWORD *)(v16 + v19) = 0;
    if (v20)
    {
      v21 = (unsigned int *)v20[22];
      if (v21)
      {
        v22 = v21 + 2;
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
          (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
      }
      v68 = v18;
      v25 = v9;
      v26 = a6;
      v27 = v20[11];
      if (v27)
      {
        v28 = (unsigned int *)(v27 + 24);
        do
        {
          v29 = __ldaxr(v28);
          v30 = v29 - 1;
        }
        while (__stlxr(v30, v28));
        if (!v30)
        {
          v31 = *(_QWORD *)(v27 + 16);
          *(_QWORD *)(v27 + 16) = 0;
          if (v31)
            MEMORY[0x20BD0ADD4](v31, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v27, 0x1010C40EE34DA14);
        }
      }
      v32 = (void *)v20[7];
      if (v32)
      {
        v20[8] = v32;
        operator delete(v32);
      }
      MEMORY[0x20BD0ADEC](v20, 0x1020C4000E59722);
      v11 = *v12;
      a6 = v26;
      v9 = v25;
      v18 = v68;
    }
    --*(_QWORD *)(v10 + 32);
    v33 = v11 + 1;
    *v12 = v33;
    if (v33 >= 0x154)
    {
      operator delete(**(void ***)v10);
      *(_QWORD *)v10 += 8;
      *v12 -= 170;
    }
    if (*(_BYTE *)(v15 + 185))
      --*(_DWORD *)(v9 + 248);
    --*((_DWORD *)this + 18);
    if (!*(_BYTE *)(v15 + 128))
      goto LABEL_74;
    v34 = *(_QWORD *)(v15 + 120);
    if (v34 < 5)
    {
      --*((_DWORD *)this + v34 + 19);
      v35 = *((_QWORD *)this + 12);
      v36 = 0x7FFFFFFFFFFFFFFFLL;
      if (v35 == 0x7FFFFFFFFFFFFFFFLL)
      {
        *((_QWORD *)this + 12) = 0x7FFFFFFFFFFFFFFFLL;
        v40 = *((_QWORD *)this + 13);
        if (v40 == 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_47:
          v45 = *((_QWORD *)this + 7);
          v46 = 0x7FFFFFFFFFFFFFFFLL;
          if (v45 != 0x7FFFFFFFFFFFFFFFLL && v36 != 0x8000000000000000)
          {
            v46 = v45 - v36;
            if (v36 == 0x7FFFFFFFFFFFFFFFLL || v45 == 0x8000000000000000)
              v46 = 0x8000000000000000;
          }
          *((_QWORD *)this + 7) = v46;
          if (!*(_BYTE *)(v15 + 200))
            *(_BYTE *)(v15 + 200) = 1;
          *(_QWORD *)(v15 + 192) = v36;
          if (v17 == (uint64_t *)((char *)this + 416))
            goto LABEL_75;
          v48 = *v17;
          *(_QWORD *)(v48 + 8) = v17[1];
          *(_QWORD *)v17[1] = v48;
          --*((_QWORD *)this + 54);
          operator delete(v17);
          v49 = *((_DWORD *)this + 102);
          v50 = (char *)this + 48 * v49;
          v53 = (void **)*((_QWORD *)v50 + 22);
          v52 = v50 + 176;
          v51 = v53;
          v55 = v52 + 3;
          v54 = v52[3];
          if (*(void **)((char *)v53 + ((v54 >> 6) & 0x3FFFFFFFFFFFFF8)))
          {
            --*((_QWORD *)this + 6 * v49 + 26);
            v56 = v54 + 1;
            *v55 = v56;
            if (v56 >= 0x400)
            {
              operator delete(*v51);
              *v52 += 8;
              *v55 -= 512;
              v49 = *((_DWORD *)this + 102);
            }
            if (!*(_QWORD *)(v9 + 48 * v49 + 40))
            {
              webrtc::PrioritizedPacketQueue::MaybeUpdateTopPrioLevel(this);
              goto LABEL_70;
            }
            v57 = (char *)this + 48 * v49;
            v60 = *((_QWORD *)v57 + 26);
            v59 = (uint64_t *)(v57 + 208);
            v58 = v60;
            v61 = *(v59 - 4);
            v62 = *(v59 - 3);
            v63 = ((v62 - v61) << 6) - 1;
            if (v62 == v61)
              v63 = 0;
            if (v63 == v58 + *(v59 - 1))
            {
              std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity((uint64_t)(v59 - 5));
              v58 = *v59;
              v61 = *(v59 - 4);
              v62 = *(v59 - 3);
            }
            if (v62 != v61)
            {
              v64 = *(v59 - 1) + v58;
              v65 = *(_QWORD *)(v61 + ((v64 >> 6) & 0x3FFFFFFFFFFFFF8));
              if (v65)
              {
                *(_QWORD *)(v65 + 8 * (v64 & 0x1FF)) = v9;
                *v59 = v58 + 1;
LABEL_70:
                *a6 = v15;
                return;
              }
            }
          }
          goto LABEL_73;
        }
      }
      else
      {
        v37 = *(_QWORD *)(v15 + 24) + *(unsigned __int8 *)(v15 + 2);
        v38 = 0x7FFFFFFFFFFFFFFFLL;
        if (v37 != 0x8000000000000000)
        {
          v38 = v35 - v37;
          if (v37 == 0x7FFFFFFFFFFFFFFFLL || v35 == 0x8000000000000000)
            v38 = 0x8000000000000000;
        }
        *((_QWORD *)this + 12) = v38;
        v40 = *((_QWORD *)this + 13);
        if (v40 == 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_47;
      }
      if (v18 != 0x8000000000000000)
      {
        v41 = v18 == 0x7FFFFFFFFFFFFFFFLL || v40 == 0x8000000000000000;
        v42 = v41 ? 0x8000000000000000 : v40 - v18;
        if (v42 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v43 = *((_QWORD *)this + 8);
          if (v43 != 0x8000000000000000)
          {
            v36 = v42 - v43;
            if (v43 == 0x7FFFFFFFFFFFFFFFLL || v42 == 0x8000000000000000)
              v36 = 0x8000000000000000;
          }
        }
      }
      goto LABEL_47;
    }
  }
LABEL_73:
  __break(1u);
LABEL_74:
  std::__throw_bad_optional_access[abi:sn180100]();
LABEL_75:
  v66 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/prioritized_packet_queue.cc", 408, "packet.enqueue_time_iterator != enqueue_times_.end()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a2, a3, a4, a5, v67);
  webrtc::PrioritizedPacketQueue::MaybeUpdateTopPrioLevel((webrtc::PrioritizedPacketQueue *)v66);
}

void webrtc::PrioritizedPacketQueue::MaybeUpdateTopPrioLevel(webrtc::PrioritizedPacketQueue *this)
{
  int v2;
  Timestamp v3;
  int v4;
  Timestamp v5;
  Timestamp v6;
  Timestamp v7;
  Timestamp v8;

  v2 = *((_DWORD *)this + 102);
  if (v2 == -1 || !*((_QWORD *)this + 6 * v2 + 26))
  {
    v3.var0 = *((_QWORD *)this + 13);
    webrtc::PrioritizedPacketQueue::PurgeOldPacketsAtPriorityLevel(this, 0, v3);
    v4 = 0;
    if (*((_QWORD *)this + 26))
      goto LABEL_9;
    v5.var0 = *((_QWORD *)this + 13);
    v4 = 1;
    webrtc::PrioritizedPacketQueue::PurgeOldPacketsAtPriorityLevel(this, 1u, v5);
    if (*((_QWORD *)this + 32))
      goto LABEL_9;
    v6.var0 = *((_QWORD *)this + 13);
    v4 = 2;
    webrtc::PrioritizedPacketQueue::PurgeOldPacketsAtPriorityLevel(this, 2u, v6);
    if (*((_QWORD *)this + 38)
      || (v7.var0 = *((_QWORD *)this + 13),
          v4 = 3,
          webrtc::PrioritizedPacketQueue::PurgeOldPacketsAtPriorityLevel(this, 3u, v7),
          *((_QWORD *)this + 44))
      || (v8.var0 = *((_QWORD *)this + 13),
          v4 = 4,
          webrtc::PrioritizedPacketQueue::PurgeOldPacketsAtPriorityLevel(this, 4u, v8),
          *((_QWORD *)this + 50)))
    {
LABEL_9:
      *((_DWORD *)this + 102) = v4;
    }
    if (!*((_DWORD *)this + 18))
      *((_DWORD *)this + 102) = -1;
  }
}

void webrtc::PrioritizedPacketQueue::RemovePacketsForSsrc(webrtc::PrioritizedPacketQueue *this, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  void **v36;
  char *v37;
  unint64_t v38;
  void **v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  unint64_t v49;
  _QWORD *v50;
  unsigned int *v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  void *v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v68;
  BOOL v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v73;
  unint64_t v74;
  uint64_t v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  void *v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  char *v92;
  unint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  void **v96;
  unint64_t v97;
  __int128 v98;
  char *v99;
  unint64_t v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  char **v104;
  char *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void **v115;
  void **v116;
  void *v117;
  void **v118;
  void **v119;
  void *v120;
  void **v121;
  void **v122;
  void *v123;
  void **v124;
  void **v125;
  void *v126;
  void **v127;
  void **v128;
  void *v129;
  webrtc **v130;
  TimeDelta v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  char *v137;
  _QWORD *v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  void *v142[2];
  __int128 v143;
  __int128 v144;
  void *v145[2];
  __int128 v146;
  __int128 v147;
  void *v148[2];
  __int128 v149;
  __int128 v150;
  void *v151[2];
  __int128 v152;
  __int128 v153;
  void *__p[2];
  __int128 v155;
  __int128 v156;

  v9 = *((_QWORD *)this + 17);
  if (!v9)
    goto LABEL_149;
  v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
  v10.i16[0] = vaddlv_u8(v10);
  if (v10.u32[0] > 1uLL)
  {
    v11 = a2;
    if (v9 <= a2)
      v11 = a2 % v9;
  }
  else
  {
    v11 = ((_DWORD)v9 - 1) & a2;
  }
  v12 = *(uint64_t ***)(*((_QWORD *)this + 16) + 8 * v11);
  if (!v12)
    goto LABEL_149;
  v13 = *v12;
  if (!v13)
    goto LABEL_149;
  if (v10.u32[0] < 2uLL)
  {
    v14 = v9 - 1;
    while (1)
    {
      v16 = v13[1];
      if (v16 == a2)
      {
        if (*((_DWORD *)v13 + 4) == a2)
          goto LABEL_22;
      }
      else if ((v16 & v14) != v11)
      {
        goto LABEL_149;
      }
      v13 = (uint64_t *)*v13;
      if (!v13)
        goto LABEL_149;
    }
  }
  while (1)
  {
    v15 = v13[1];
    if (v15 != a2)
    {
      if (v15 >= v9)
        v15 %= v9;
      if (v15 != v11)
        goto LABEL_149;
      goto LABEL_11;
    }
    if (*((_DWORD *)v13 + 4) == a2)
      break;
LABEL_11:
    v13 = (uint64_t *)*v13;
    if (!v13)
      goto LABEL_149;
  }
LABEL_22:
  v17 = 0;
  v18 = v13[3];
  v155 = 0u;
  v156 = 0u;
  v153 = 0u;
  *(_OWORD *)__p = 0u;
  v152 = 0u;
  v19 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)v142 = *(_OWORD *)v18;
  *(_OWORD *)v18 = 0u;
  v143 = v19;
  *(_OWORD *)(v18 + 16) = 0u;
  v20 = *(_OWORD *)(v18 + 48);
  v144 = *(_OWORD *)(v18 + 32);
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)v145 = v20;
  *(_OWORD *)(v18 + 48) = 0u;
  v21 = *(_OWORD *)(v18 + 80);
  v146 = *(_OWORD *)(v18 + 64);
  *(_OWORD *)(v18 + 64) = 0u;
  v147 = v21;
  *(_OWORD *)(v18 + 80) = 0u;
  v22 = *(_OWORD *)(v18 + 112);
  *(_OWORD *)v148 = *(_OWORD *)(v18 + 96);
  *(_OWORD *)(v18 + 96) = 0u;
  v149 = v22;
  *(_OWORD *)(v18 + 112) = 0u;
  v23 = *(_OWORD *)(v18 + 144);
  v150 = *(_OWORD *)(v18 + 128);
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)v151 = v23;
  *(_OWORD *)(v18 + 144) = 0u;
  v24 = v152;
  v25 = *(_OWORD *)(v18 + 176);
  v152 = *(_OWORD *)(v18 + 160);
  *(_OWORD *)(v18 + 160) = v24;
  v26 = v153;
  v153 = v25;
  *(_OWORD *)(v18 + 176) = v26;
  v27 = *(_OWORD *)__p;
  v28 = *(_OWORD *)(v18 + 208);
  *(_OWORD *)__p = *(_OWORD *)(v18 + 192);
  *(_OWORD *)(v18 + 192) = v27;
  v29 = v155;
  v155 = v28;
  *(_OWORD *)(v18 + 208) = v29;
  v30 = v156;
  v156 = *(_OWORD *)(v18 + 224);
  v136 = (char *)this + 416;
  v137 = (char *)this + 76;
  *(_OWORD *)(v18 + 224) = v30;
  v134 = v18;
  *(_DWORD *)(v18 + 248) = 0;
  while (2)
  {
    v36 = &v142[6 * v17];
    v37 = (char *)v36[5];
    v138 = v36 + 5;
    if (!v37)
      goto LABEL_25;
    v133 = v17;
    v38 = (unint64_t)&v142[6 * v17];
    v135 = (_QWORD *)(v38 | 8);
    v39 = *(void ***)(v38 + 8);
    v42 = *(_QWORD *)(v38 + 32);
    v41 = (unint64_t *)(v38 + 32);
    v40 = v42;
    while (2)
    {
      v43 = v40 / 0xAA;
      v44 = (uint64_t *)((char *)v39[v43] + 24 * (v40 % 0xAA));
      v45 = *v44;
      *v44 = 0;
      v46 = (char *)v39[v43];
      if (!v46)
        goto LABEL_150;
      v47 = v44[1];
      v48 = (char *)v44[2];
      v49 = 24 * (v40 % 0xAA);
      v50 = *(_QWORD **)&v46[v49];
      *(_QWORD *)&v46[v49] = 0;
      if (v50)
      {
        v51 = (unsigned int *)v50[22];
        if (v51)
        {
          v52 = v51 + 2;
          do
          {
            v53 = __ldaxr(v52);
            v54 = v53 - 1;
          }
          while (__stlxr(v54, v52));
          if (!v54)
            (*(void (**)(unsigned int *))(*(_QWORD *)v51 + 8))(v51);
        }
        v55 = v50[11];
        if (v55)
        {
          v56 = (unsigned int *)(v55 + 24);
          do
          {
            v57 = __ldaxr(v56);
            v58 = v57 - 1;
          }
          while (__stlxr(v58, v56));
          if (!v58)
          {
            v59 = *(_QWORD *)(v55 + 16);
            *(_QWORD *)(v55 + 16) = 0;
            if (v59)
              MEMORY[0x20BD0ADD4](v59, 0x1000C8077774924);
            MEMORY[0x20BD0ADEC](v55, 0x1010C40EE34DA14);
          }
        }
        v60 = (void *)v50[7];
        if (v60)
        {
          v50[8] = v60;
          operator delete(v60);
        }
        MEMORY[0x20BD0ADEC](v50, 0x1020C4000E59722);
      }
      *v138 = --v37;
      *v41 = v40 + 1;
      if (v40 + 1 >= 0x154)
      {
        v61 = *v39++;
        operator delete(v61);
        *v135 = v39;
        v40 -= 169;
        *v41 = v40;
      }
      else
      {
        ++v40;
      }
      --*((_DWORD *)this + 18);
      if (!*(_BYTE *)(v45 + 128))
        goto LABEL_151;
      v62 = *(_QWORD *)(v45 + 120);
      if (v62 >= 5)
        goto LABEL_150;
      --*(_DWORD *)&v137[4 * v62];
      v63 = *((_QWORD *)this + 12);
      v64 = 0x7FFFFFFFFFFFFFFFLL;
      if (v63 == 0x7FFFFFFFFFFFFFFFLL)
      {
        *((_QWORD *)this + 12) = 0x7FFFFFFFFFFFFFFFLL;
        v68 = *((_QWORD *)this + 13);
        if (v68 != 0x7FFFFFFFFFFFFFFFLL)
          goto LABEL_59;
      }
      else
      {
        v65 = *(_QWORD *)(v45 + 24) + *(unsigned __int8 *)(v45 + 2);
        v66 = 0x7FFFFFFFFFFFFFFFLL;
        if (v65 != 0x8000000000000000)
        {
          v66 = v63 - v65;
          if (v65 == 0x7FFFFFFFFFFFFFFFLL || v63 == 0x8000000000000000)
            v66 = 0x8000000000000000;
        }
        *((_QWORD *)this + 12) = v66;
        v68 = *((_QWORD *)this + 13);
        if (v68 != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_59:
          if (v47 != 0x8000000000000000)
          {
            v69 = v47 == 0x7FFFFFFFFFFFFFFFLL || v68 == 0x8000000000000000;
            v70 = v69 ? 0x8000000000000000 : v68 - v47;
            if (v70 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v71 = *((_QWORD *)this + 8);
              if (v71 != 0x8000000000000000)
              {
                v64 = v70 - v71;
                if (v71 == 0x7FFFFFFFFFFFFFFFLL || v70 == 0x8000000000000000)
                  v64 = 0x8000000000000000;
              }
            }
          }
        }
      }
      v73 = *((_QWORD *)this + 7);
      v74 = 0x7FFFFFFFFFFFFFFFLL;
      if (v73 != 0x7FFFFFFFFFFFFFFFLL && v64 != 0x8000000000000000)
      {
        v74 = v73 - v64;
        if (v64 == 0x7FFFFFFFFFFFFFFFLL || v73 == 0x8000000000000000)
          v74 = 0x8000000000000000;
      }
      *((_QWORD *)this + 7) = v74;
      if (!*(_BYTE *)(v45 + 200))
        *(_BYTE *)(v45 + 200) = 1;
      *(_QWORD *)(v45 + 192) = v64;
      if (v48 == v136)
        goto LABEL_152;
      v76 = *(_QWORD *)v48;
      *(_QWORD *)(v76 + 8) = *((_QWORD *)v48 + 1);
      **((_QWORD **)v48 + 1) = v76;
      --*((_QWORD *)this + 54);
      operator delete(v48);
      v77 = *(unsigned int **)(v45 + 176);
      if (v77)
      {
        v78 = v77 + 2;
        do
        {
          v79 = __ldaxr(v78);
          v80 = v79 - 1;
        }
        while (__stlxr(v80, v78));
        if (!v80)
          (*(void (**)(unsigned int *))(*(_QWORD *)v77 + 8))(v77);
      }
      v81 = *(_QWORD *)(v45 + 88);
      if (v81)
      {
        v82 = (unsigned int *)(v81 + 24);
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          v85 = *(_QWORD *)(v81 + 16);
          *(_QWORD *)(v81 + 16) = 0;
          if (v85)
            MEMORY[0x20BD0ADD4](v85, 0x1000C8077774924);
          MEMORY[0x20BD0ADEC](v81, 0x1010C40EE34DA14);
        }
      }
      v86 = *(void **)(v45 + 56);
      if (v86)
      {
        *(_QWORD *)(v45 + 64) = v86;
        operator delete(v86);
      }
      MEMORY[0x20BD0ADEC](v45, 0x1020C4000E59722);
      if (v37)
        continue;
      break;
    }
    v17 = v133;
    v87 = (char *)this + 48 * v133;
    v90 = *((_QWORD *)v87 + 26);
    v89 = (uint64_t *)(v87 + 208);
    v88 = v90;
    v91 = v89 - 5;
    if (v90 == 1)
    {
      v92 = (char *)this + 48 * v133;
      v95 = *((_QWORD *)v92 + 25);
      v94 = (unint64_t *)(v92 + 200);
      v93 = v95;
      v96 = (void **)*(v89 - 4);
      if (!*(void **)((char *)v96 + ((v95 >> 6) & 0x3FFFFFFFFFFFFF8)))
      {
LABEL_150:
        __break(1u);
LABEL_151:
        std::__throw_bad_optional_access[abi:sn180100]();
LABEL_152:
        v130 = (webrtc **)rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/pacing/prioritized_packet_queue.cc", 408, "packet.enqueue_time_iterator != enqueue_times_.end()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, (uint64_t)__p);
        rtc::webrtc_checks_impl::MakeVal<webrtc::Timestamp,(std::string *)0>(v130, v131, v132);
        return;
      }
      *v89 = 0;
      v97 = v93 + 1;
      *v94 = v97;
      if (v97 >= 0x400)
      {
        operator delete(*v96);
        *(v89 - 4) += 8;
        *v94 -= 512;
      }
    }
    else
    {
      v98 = 0uLL;
      v140 = 0u;
      v141 = 0u;
      v139 = 0u;
      v99 = (char *)this + 48 * v133;
      v102 = *((_QWORD *)v99 + 25);
      v101 = (unint64_t *)(v99 + 200);
      v100 = v102;
      v103 = *(v89 - 4);
      v33 = *(v89 - 3);
      if (v33 == v103)
      {
        v31 = 0;
        v32 = 0;
        v33 = *(v89 - 4);
        v34 = 0uLL;
      }
      else
      {
        v104 = (char **)(v103 + 8 * (v100 >> 9));
        v105 = *v104;
        v106 = (uint64_t *)&(*v104)[8 * (v100 & 0x1FF)];
        v107 = *(_QWORD *)(v103 + (((v100 + v88) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v100 + v88) & 0x1FF);
        if (v106 == (uint64_t *)v107)
        {
          v31 = 0;
          v32 = 0;
          v34 = 0uLL;
        }
        else
        {
          v31 = 0;
          v108 = 0;
          do
          {
            v109 = *v106;
            if (*v106 != v134)
            {
              v110 = *((_QWORD *)&v139 + 1);
              v111 = v140;
              v112 = (((_QWORD)v140 - *((_QWORD *)&v139 + 1)) << 6) - 1;
              if ((_QWORD)v140 == *((_QWORD *)&v139 + 1))
                v112 = 0;
              if (v112 == v108 + v31)
              {
                std::deque<std::unique_ptr<webrtc::DataBuffer>>::__add_back_capacity((uint64_t)&v139);
                v31 = *((_QWORD *)&v141 + 1);
                v110 = *((_QWORD *)&v139 + 1);
                v111 = v140;
              }
              if (v111 == v110)
                goto LABEL_150;
              v108 = v141;
              v113 = *(_QWORD *)(v110 + (((unint64_t)(v141 + v31) >> 6) & 0x3FFFFFFFFFFFFF8));
              if (!v113)
                goto LABEL_150;
              *(_QWORD *)(v113 + 8 * (((_WORD)v141 + (_WORD)v31++) & 0x1FF)) = v109;
              *((_QWORD *)&v141 + 1) = v31;
              v105 = *v104;
            }
            if ((char *)++v106 - v105 == 4096)
            {
              v114 = v104[1];
              ++v104;
              v105 = v114;
              v106 = (uint64_t *)v114;
            }
          }
          while (v106 != (uint64_t *)v107);
          v103 = *(v89 - 4);
          v33 = *(v89 - 3);
          v98 = v139;
          v34 = v140;
          v100 = *v101;
          v32 = v141;
          v88 = *v89;
        }
      }
      *(_QWORD *)&v139 = *v91;
      *((_QWORD *)&v139 + 1) = v103;
      v35 = *(v89 - 2);
      *(_OWORD *)v91 = v98;
      *(_OWORD *)(v89 - 3) = v34;
      *(_QWORD *)&v140 = v33;
      *((_QWORD *)&v140 + 1) = v35;
      *v101 = v32;
      *v89 = v31;
      *(_QWORD *)&v141 = v100;
      *((_QWORD *)&v141 + 1) = v88;
      std::deque<long long>::~deque[abi:sn180100]((void **)&v139);
    }
LABEL_25:
    if (++v17 != 5)
      continue;
    break;
  }
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear(__p);
  v115 = (void **)__p[1];
  v116 = (void **)v155;
  if (__p[1] != (void *)v155)
  {
    do
    {
      v117 = *v115++;
      operator delete(v117);
    }
    while (v115 != v116);
    if ((void *)v155 != __p[1])
      *(_QWORD *)&v155 = v155 + (((unint64_t)__p[1] - v155 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear(v151);
  v118 = (void **)v151[1];
  v119 = (void **)v152;
  if (v151[1] != (void *)v152)
  {
    do
    {
      v120 = *v118++;
      operator delete(v120);
    }
    while (v118 != v119);
    if ((void *)v152 != v151[1])
      *(_QWORD *)&v152 = v152 + (((unint64_t)v151[1] - v152 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v151[0])
    operator delete(v151[0]);
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear(v148);
  v121 = (void **)v148[1];
  v122 = (void **)v149;
  if (v148[1] != (void *)v149)
  {
    do
    {
      v123 = *v121++;
      operator delete(v123);
    }
    while (v121 != v122);
    if ((void *)v149 != v148[1])
      *(_QWORD *)&v149 = v149 + (((unint64_t)v148[1] - v149 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v148[0])
    operator delete(v148[0]);
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear(v145);
  v124 = (void **)v145[1];
  v125 = (void **)v146;
  if (v145[1] != (void *)v146)
  {
    do
    {
      v126 = *v124++;
      operator delete(v126);
    }
    while (v124 != v125);
    if ((void *)v146 != v145[1])
      *(_QWORD *)&v146 = v146 + (((unint64_t)v145[1] - v146 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v145[0])
    operator delete(v145[0]);
  std::deque<webrtc::PrioritizedPacketQueue::QueuedPacket>::clear(v142);
  v127 = (void **)v142[1];
  v128 = (void **)v143;
  if (v142[1] != (void *)v143)
  {
    do
    {
      v129 = *v127++;
      operator delete(v129);
    }
    while (v127 != v128);
    if ((void *)v143 != v142[1])
      *(_QWORD *)&v143 = v143 + (((unint64_t)v142[1] - v143 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v142[0])
    operator delete(v142[0]);
LABEL_149:
  webrtc::PrioritizedPacketQueue::MaybeUpdateTopPrioLevel(this);
}

unint64_t rtc::webrtc_checks_impl::MakeVal<webrtc::Timestamp,(std::string *)0>@<X0>(webrtc **a1@<X0>, TimeDelta a2@<X1>, char *a3@<X8>)
{
  return webrtc::ToString(*a1, a2, a3);
}

unint64_t webrtc::ProbeBitrateEstimator::HandleProbeAndEstimateBitrate(uint64_t **a1, uint64_t *x1_0)
{
  void **v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  int *v14;
  char *v15;
  int v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int64_t v32;
  int64_t v34;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  TimeDelta v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double v66;
  double v67;
  char v68;
  unsigned int *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *__p[2];
  char v92;
  void *v93;
  void **v94;
  char v95;
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  char v106;
  _QWORD v107[2];
  _QWORD v108[2];
  _QWORD v109[2];
  _QWORD v110[2];
  _QWORD v111[2];
  _QWORD v112[2];
  _QWORD v113[2];
  _QWORD v114[2];
  const char *v115;
  char **v116;
  void **v117;
  const char **v118;
  const char *v119;
  void ***v120;
  void **v121;
  const char **v122;
  const char *v123;
  void ***v124;
  void **v125;
  const char **v126;
  uint64_t v127;
  void *v128[2];
  char v129;
  char *v130;
  uint64_t v131;
  char *v132;
  TimeDelta v133;
  TimeDelta v134;
  TimeDelta v135;
  TimeDelta v136;
  TimeDelta v137;

  v4 = (void **)*((unsigned int *)x1_0 + 8);
  v6 = (uint64_t *)(a1 + 1);
  v5 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    v7 = x1_0[9];
    do
    {
      v9 = v5[9];
      if (v9 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_16;
      if (v9 != 0x8000000000000000)
        v9 += 1000000;
      if (v9 >= v7)
      {
LABEL_16:
        v13 = (uint64_t *)v5[1];
        if (v13)
        {
          do
          {
            v12 = v13;
            v13 = (uint64_t *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v5[2];
            v28 = *v12 == (_QWORD)v5;
            v5 = v12;
          }
          while (!v28);
        }
      }
      else
      {
        v10 = (uint64_t *)v5[1];
        v11 = v5;
        if (v10)
        {
          do
          {
            v12 = v10;
            v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v12 = (uint64_t *)v11[2];
            v28 = *v12 == (_QWORD)v11;
            v11 = v12;
          }
          while (!v28);
        }
        if (*a1 == v5)
          *a1 = v12;
        v8 = a1[1];
        a1[2] = (uint64_t *)((char *)a1[2] - 1);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v8, v5);
        operator delete(v5);
      }
      v5 = v12;
    }
    while (v12 != v6);
  }
  v14 = (int *)*v6;
  v15 = (char *)v6;
  if (*v6)
  {
    while (1)
    {
      while (1)
      {
        v15 = (char *)v14;
        v16 = v14[8];
        if ((int)v4 >= v16)
          break;
        v14 = *(int **)v15;
        v6 = (uint64_t *)v15;
        if (!*(_QWORD *)v15)
          goto LABEL_29;
      }
      if (v16 >= (int)v4)
        break;
      v14 = (int *)*((_QWORD *)v15 + 1);
      if (!v14)
      {
        v6 = (uint64_t *)(v15 + 8);
        goto LABEL_29;
      }
    }
  }
  else
  {
LABEL_29:
    v17 = v15;
    v15 = (char *)operator new(0x68uLL);
    *((_DWORD *)v15 + 8) = (_DWORD)v4;
    *(_OWORD *)(v15 + 40) = xmmword_208F0A8D0;
    *(_OWORD *)(v15 + 56) = xmmword_208F180A0;
    *((_QWORD *)v15 + 9) = 0x8000000000000000;
    *((_QWORD *)v15 + 10) = 0;
    *((_QWORD *)v15 + 11) = 0;
    *((_QWORD *)v15 + 12) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v17;
    *v6 = (uint64_t)v15;
    v18 = (uint64_t *)**a1;
    v19 = (uint64_t *)v15;
    if (v18)
    {
      *a1 = v18;
      v19 = (uint64_t *)*v6;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v19);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  v20 = *x1_0;
  v21 = *((_QWORD *)v15 + 6);
  if (*x1_0 < v21)
  {
    *((_QWORD *)v15 + 6) = v20;
    v21 = v20;
    v20 = *x1_0;
    v22 = *((_QWORD *)v15 + 7);
    if (*x1_0 <= v22)
    {
LABEL_34:
      v23 = x1_0[9];
      v24 = *((_QWORD *)v15 + 8);
      if (v23 >= v24)
        goto LABEL_35;
      goto LABEL_98;
    }
  }
  else
  {
    v22 = *((_QWORD *)v15 + 7);
    if (v20 <= v22)
      goto LABEL_34;
  }
  *((_QWORD *)v15 + 7) = v20;
  *((_QWORD *)v15 + 10) = x1_0[1];
  v22 = v20;
  v23 = x1_0[9];
  v24 = *((_QWORD *)v15 + 8);
  if (v23 >= v24)
  {
LABEL_35:
    v25 = *((_QWORD *)v15 + 9);
    if (v23 <= v25)
      goto LABEL_37;
    goto LABEL_36;
  }
LABEL_98:
  *((_QWORD *)v15 + 8) = v23;
  *((_QWORD *)v15 + 11) = x1_0[1];
  v24 = v23;
  v23 = x1_0[9];
  v25 = *((_QWORD *)v15 + 9);
  if (v23 > v25)
  {
LABEL_36:
    *((_QWORD *)v15 + 9) = v23;
    v25 = v23;
  }
LABEL_37:
  v26 = x1_0[1];
  v27 = *((_QWORD *)v15 + 12);
  v28 = v26 == 0x8000000000000000 || v27 == 0x8000000000000000;
  v29 = v27 + v26;
  if (v28)
    v29 = 0x8000000000000000;
  if (v26 == 0x7FFFFFFFFFFFFFFFLL)
    v30 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v30 = v29;
  if (v27 == 0x7FFFFFFFFFFFFFFFLL)
    v30 = 0x7FFFFFFFFFFFFFFFLL;
  *((_QWORD *)v15 + 12) = v30;
  v31 = *((_DWORD *)v15 + 10) + 1;
  *((_DWORD *)v15 + 10) = v31;
  v32 = llround((double)*((int *)x1_0 + 10) * 0.8);
  if (v31 < (int)((double)*((int *)x1_0 + 9) * 0.8) || v30 < v32)
    goto LABEL_111;
  v34 = 0x7FFFFFFFFFFFFFFFLL;
  if (v21 != 0x8000000000000000 && v22 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v22 == 0x8000000000000000 || v21 == 0x7FFFFFFFFFFFFFFFLL)
      v34 = 0x8000000000000000;
    else
      v34 = v22 - v21;
  }
  v36 = 0x7FFFFFFFFFFFFFFFLL;
  if (v24 == 0x8000000000000000
    || v25 == 0x7FFFFFFFFFFFFFFFLL
    || (v25 != 0x8000000000000000 ? (v37 = v24 == 0x7FFFFFFFFFFFFFFFLL) : (v37 = 1),
        !v37 ? (v36 = v25 - v24) : (v36 = 0x8000000000000000),
        (unint64_t)(v34 - 1000001) < 0xFFFFFFFFFFF0BDC0 || v36 < 1 || (unint64_t)v36 > 0xF4240))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
      goto LABEL_103;
    webrtc::ToString((webrtc *)v34, v51, (char *)&v130);
    webrtc::ToString((webrtc *)v36, v133, (char *)v128);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v52, v53, v54, v55, v56, v57, v58, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/probe_bitrate_estimator.cc");
    if (v129 < 0)
    {
      operator delete(v128[0]);
      if ((SHIBYTE(v132) & 0x80000000) == 0)
      {
LABEL_103:
        v59 = a1[3];
        if (!v59)
        {
LABEL_111:
          v63 = 0;
          v64 = 0;
          return v64 | v63;
        }
        goto LABEL_104;
      }
    }
    else if ((SHIBYTE(v132) & 0x80000000) == 0)
    {
      goto LABEL_103;
    }
    operator delete(v130);
    v59 = a1[3];
    if (!v59)
      goto LABEL_111;
LABEL_104:
    v60 = operator new();
    if (rtc::g_clock)
    {
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v61 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    *(_QWORD *)v60 = &unk_24C0BBF48;
    *(_QWORD *)(v60 + 8) = 1000 * (v61 / 1000000);
    *(_DWORD *)(v60 + 16) = (_DWORD)v4;
    *(_DWORD *)(v60 + 20) = 0;
    v127 = v60;
    (*(void (**)(uint64_t *, uint64_t *))(*v59 + 40))(v59, &v127);
    v62 = v127;
    v127 = 0;
    if (!v62)
      goto LABEL_111;
LABEL_110:
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
    goto LABEL_111;
  }
  v38 = *((_QWORD *)v15 + 10);
  v39 = *((_QWORD *)v15 + 11);
  v40 = v30 - v38;
  if (v38 == 0x7FFFFFFFFFFFFFFFLL || v30 == 0x8000000000000000)
    v40 = 0x8000000000000000;
  if (v38 == 0x8000000000000000)
    v42 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v42 = v40;
  if (v30 == 0x7FFFFFFFFFFFFFFFLL)
    v43 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v43 = v42;
  v44 = 8000000 * v43 / v34;
  v45 = v30 - v39;
  if (v39 == 0x7FFFFFFFFFFFFFFFLL || v30 == 0x8000000000000000)
    v45 = 0x8000000000000000;
  if (v39 == 0x8000000000000000)
    v47 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v47 = v45;
  if (v30 == 0x7FFFFFFFFFFFFFFFLL)
    v48 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v48 = v47;
  v49 = 8000000 * v48 / v36;
  if (v49 == 0x8000000000000000)
  {
    v50 = -INFINITY;
    if (v44 != 0x8000000000000000)
      goto LABEL_117;
    goto LABEL_120;
  }
  if (v49 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v50 = (double)v49;
    if (v44 != 0x8000000000000000)
      goto LABEL_117;
LABEL_120:
    v66 = -INFINITY;
LABEL_121:
    v67 = v50 / v66;
    v68 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
    if (v67 > 2.0)
      goto LABEL_122;
    goto LABEL_135;
  }
  v50 = INFINITY;
  if (v44 == 0x8000000000000000)
    goto LABEL_120;
LABEL_117:
  if (v44 == 0x7FFFFFFFFFFFFFFFLL)
  {
    v66 = INFINITY;
    goto LABEL_121;
  }
  v74 = v50 / (double)v44;
  v68 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
  if (v74 > 2.0)
  {
LABEL_122:
    if ((v68 & 1) != 0)
      goto LABEL_131;
    v130 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_"
           "controller/goog_cc/probe_bitrate_estimator.cc";
    v131 = 1145;
    v132 = &v106;
    v107[0] = "Probing unsuccessful, receive/send ratio too high [cluster id: ";
    v107[1] = &v130;
    v108[0] = v4;
    v108[1] = v107;
    v109[0] = "] [send: ";
    v109[1] = v108;
    webrtc::ToString(v43, (char *)v128);
    v110[0] = v128;
    v110[1] = v109;
    v111[0] = " / ";
    v111[1] = v110;
    webrtc::ToString((webrtc *)v34, v134, (char *)v104);
    v112[0] = v104;
    v112[1] = v111;
    v113[0] = " = ";
    v113[1] = v112;
    webrtc::ToString(v44, (char *)v102);
    v114[0] = v102;
    v114[1] = v113;
    v115 = "] [receive: ";
    v116 = (char **)v114;
    webrtc::ToString(v48, (char *)v100);
    v117 = v100;
    v118 = &v115;
    v119 = " / ";
    v120 = &v117;
    webrtc::ToString((webrtc *)v36, v135, (char *)v98);
    v121 = v98;
    v122 = &v119;
    v123 = " = ";
    v124 = &v121;
    webrtc::ToString(v49, (char *)v96);
    v125 = v96;
    v126 = &v123;
    webrtc::ToString(v49, (char *)&v93);
    webrtc::ToString(v44, (char *)__p);
    v69 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v126[1] + 1) + 8) + 8) + 8)
                                                                                       + 8)
                                                                           + 8)
                                                               + 8)
                                                   + 8)
                                       + 8)
                           + 8);
    v70 = *(uint64_t **)(*((_QWORD *)v69 + 1) + 8);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)7,double>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v126[1] + 1) + 8)+ 8)+ 8)+ 8)+ 8)+ 8)+ 8)+ 8), *v69, **((_QWORD **)v69 + 1), v70[1], *v70, (uint64_t)" ] [ratio: ", 0x4000000000000000, *v70);
    if (v92 < 0)
    {
      operator delete(__p[0]);
      if ((v95 & 0x80000000) == 0)
      {
LABEL_125:
        if ((v97 & 0x80000000) == 0)
          goto LABEL_126;
        goto LABEL_166;
      }
    }
    else if ((v95 & 0x80000000) == 0)
    {
      goto LABEL_125;
    }
    operator delete(v93);
    if ((v97 & 0x80000000) == 0)
    {
LABEL_126:
      if ((v99 & 0x80000000) == 0)
        goto LABEL_127;
      goto LABEL_167;
    }
LABEL_166:
    operator delete(v96[0]);
    if ((v99 & 0x80000000) == 0)
    {
LABEL_127:
      if ((v101 & 0x80000000) == 0)
        goto LABEL_128;
      goto LABEL_168;
    }
LABEL_167:
    operator delete(v98[0]);
    if ((v101 & 0x80000000) == 0)
    {
LABEL_128:
      if ((v103 & 0x80000000) == 0)
        goto LABEL_129;
      goto LABEL_169;
    }
LABEL_168:
    operator delete(v100[0]);
    if ((v103 & 0x80000000) == 0)
    {
LABEL_129:
      if ((v105 & 0x80000000) == 0)
        goto LABEL_130;
      goto LABEL_170;
    }
LABEL_169:
    operator delete(v102[0]);
    if ((v105 & 0x80000000) == 0)
    {
LABEL_130:
      if ((v129 & 0x80000000) == 0)
        goto LABEL_131;
      goto LABEL_171;
    }
LABEL_170:
    operator delete(v104[0]);
    if ((v129 & 0x80000000) == 0)
    {
LABEL_131:
      v71 = a1[3];
      if (!v71)
        goto LABEL_111;
      goto LABEL_132;
    }
LABEL_171:
    operator delete(v128[0]);
    v71 = a1[3];
    if (!v71)
      goto LABEL_111;
LABEL_132:
    v72 = operator new();
    if (rtc::g_clock)
    {
      v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v73 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    *(_QWORD *)v72 = &unk_24C0BBF48;
    *(_QWORD *)(v72 + 8) = 1000 * (v73 / 1000000);
    *(_DWORD *)(v72 + 16) = (_DWORD)v4;
    *(_DWORD *)(v72 + 20) = 1;
    v90 = v72;
    (*(void (**)(uint64_t *, uint64_t *))(*v71 + 40))(v71, &v90);
    v62 = v90;
    v90 = 0;
    if (!v62)
      goto LABEL_111;
    goto LABEL_110;
  }
LABEL_135:
  if ((v68 & 1) == 0)
  {
    v130 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_"
           "controller/goog_cc/probe_bitrate_estimator.cc";
    v131 = 1313;
    v132 = (char *)v114;
    v115 = "Probing successful [cluster id: ";
    v116 = &v130;
    v117 = v4;
    v118 = &v115;
    v119 = "] [send: ";
    v120 = &v117;
    webrtc::ToString(v43, (char *)v128);
    v121 = v128;
    v122 = &v119;
    v123 = " / ";
    v124 = &v121;
    webrtc::ToString((webrtc *)v34, v136, (char *)v104);
    v125 = v104;
    v126 = &v123;
    __p[0] = " = ";
    __p[1] = &v125;
    webrtc::ToString(v44, (char *)v102);
    v93 = v102;
    v94 = __p;
    webrtc::ToString(v48, (char *)v100);
    webrtc::ToString((webrtc *)v36, v137, (char *)v98);
    webrtc::ToString(v49, (char *)v96);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v75, v76, v77, v78, v79, v80, v81, **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v94[1] + 1) + 8) + 8) + 8) + 8)+ 8));
    if (v97 < 0)
    {
      operator delete(v96[0]);
      if ((v99 & 0x80000000) == 0)
      {
LABEL_138:
        if ((v101 & 0x80000000) == 0)
          goto LABEL_139;
        goto LABEL_175;
      }
    }
    else if ((v99 & 0x80000000) == 0)
    {
      goto LABEL_138;
    }
    operator delete(v98[0]);
    if ((v101 & 0x80000000) == 0)
    {
LABEL_139:
      if ((v103 & 0x80000000) == 0)
        goto LABEL_140;
      goto LABEL_176;
    }
LABEL_175:
    operator delete(v100[0]);
    if ((v103 & 0x80000000) == 0)
    {
LABEL_140:
      if ((v105 & 0x80000000) == 0)
        goto LABEL_141;
      goto LABEL_177;
    }
LABEL_176:
    operator delete(v102[0]);
    if ((v105 & 0x80000000) == 0)
    {
LABEL_141:
      if ((v129 & 0x80000000) == 0)
        goto LABEL_142;
LABEL_178:
      operator delete(v128[0]);
      goto LABEL_142;
    }
LABEL_177:
    operator delete(v104[0]);
    if ((v129 & 0x80000000) == 0)
      goto LABEL_142;
    goto LABEL_178;
  }
LABEL_142:
  if (v49 >= v44)
    v82 = 8000000 * v43 / v34;
  else
    v82 = 8000000 * v48 / v36;
  v83 = llround((double)v49 * 0.949999988);
  if (v49 >= (uint64_t)llround((double)v44 * 0.899999976))
    v84 = v82;
  else
    v84 = v83;
  v85 = a1[3];
  if (v85)
  {
    v86 = operator new();
    if (rtc::g_clock)
    {
      v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
    }
    else
    {
      if (!dword_253EA791C)
        mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
      v87 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
          / dword_253EA791C;
    }
    *(_QWORD *)v86 = &unk_24C0BBF80;
    *(_QWORD *)(v86 + 8) = 1000 * (v87 / 1000000);
    *(_DWORD *)(v86 + 16) = (_DWORD)v4;
    *(_DWORD *)(v86 + 20) = v84;
    v89 = v86;
    (*(void (**)(uint64_t *, uint64_t *))(*v85 + 40))(v85, &v89);
    v88 = v89;
    v89 = 0;
    if (v88)
      (*(void (**)(uint64_t))(*(_QWORD *)v88 + 8))(v88);
  }
  if (!*((_BYTE *)a1 + 40))
    *((_BYTE *)a1 + 40) = 1;
  a1[4] = (uint64_t *)v84;
  v64 = v84 & 0xFFFFFFFFFFFFFF00;
  v63 = v84;
  return v64 | v63;
}

void webrtc::ProbeControllerConfig::~ProbeControllerConfig(webrtc::ProbeControllerConfig *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;

  *((_QWORD *)this + 181) = off_24C0B4170;
  if ((*((char *)this + 1503) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 182);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 185));
  v2 = (void *)*((_QWORD *)this + 182);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 183) = v2;
    operator delete(v2);
  }
LABEL_4:
  *((_QWORD *)this + 172) = off_24C0B4170;
  if ((*((char *)this + 1431) & 0x80000000) == 0)
  {
    v3 = (void *)*((_QWORD *)this + 173);
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(*((void **)this + 176));
  v3 = (void *)*((_QWORD *)this + 173);
  if (v3)
  {
LABEL_6:
    *((_QWORD *)this + 174) = v3;
    operator delete(v3);
  }
LABEL_7:
  *((_QWORD *)this + 163) = off_24C0B4170;
  if ((*((char *)this + 1359) & 0x80000000) == 0)
  {
    v4 = (void *)*((_QWORD *)this + 164);
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  operator delete(*((void **)this + 167));
  v4 = (void *)*((_QWORD *)this + 164);
  if (v4)
  {
LABEL_9:
    *((_QWORD *)this + 165) = v4;
    operator delete(v4);
  }
LABEL_10:
  *((_QWORD *)this + 155) = off_24C0B4170;
  if ((*((char *)this + 1295) & 0x80000000) == 0)
  {
    v5 = (void *)*((_QWORD *)this + 156);
    if (!v5)
      goto LABEL_13;
    goto LABEL_12;
  }
  operator delete(*((void **)this + 159));
  v5 = (void *)*((_QWORD *)this + 156);
  if (v5)
  {
LABEL_12:
    *((_QWORD *)this + 157) = v5;
    operator delete(v5);
  }
LABEL_13:
  *((_QWORD *)this + 145) = off_24C0B4170;
  if ((*((char *)this + 1215) & 0x80000000) == 0)
  {
    v6 = (void *)*((_QWORD *)this + 146);
    if (!v6)
      goto LABEL_16;
    goto LABEL_15;
  }
  operator delete(*((void **)this + 149));
  v6 = (void *)*((_QWORD *)this + 146);
  if (v6)
  {
LABEL_15:
    *((_QWORD *)this + 147) = v6;
    operator delete(v6);
  }
LABEL_16:
  *((_QWORD *)this + 135) = off_24C0B4170;
  if ((*((char *)this + 1135) & 0x80000000) == 0)
  {
    v7 = (void *)*((_QWORD *)this + 136);
    if (!v7)
      goto LABEL_19;
    goto LABEL_18;
  }
  operator delete(*((void **)this + 139));
  v7 = (void *)*((_QWORD *)this + 136);
  if (v7)
  {
LABEL_18:
    *((_QWORD *)this + 137) = v7;
    operator delete(v7);
  }
LABEL_19:
  *((_QWORD *)this + 125) = off_24C0B4170;
  if ((*((char *)this + 1055) & 0x80000000) == 0)
  {
    v8 = (void *)*((_QWORD *)this + 126);
    if (!v8)
      goto LABEL_22;
    goto LABEL_21;
  }
  operator delete(*((void **)this + 129));
  v8 = (void *)*((_QWORD *)this + 126);
  if (v8)
  {
LABEL_21:
    *((_QWORD *)this + 127) = v8;
    operator delete(v8);
  }
LABEL_22:
  *((_QWORD *)this + 117) = off_24C0B4170;
  if ((*((char *)this + 991) & 0x80000000) == 0)
  {
    v9 = (void *)*((_QWORD *)this + 118);
    if (!v9)
      goto LABEL_25;
    goto LABEL_24;
  }
  operator delete(*((void **)this + 121));
  v9 = (void *)*((_QWORD *)this + 118);
  if (v9)
  {
LABEL_24:
    *((_QWORD *)this + 119) = v9;
    operator delete(v9);
  }
LABEL_25:
  *((_QWORD *)this + 108) = off_24C0B4170;
  if ((*((char *)this + 919) & 0x80000000) == 0)
  {
    v10 = (void *)*((_QWORD *)this + 109);
    if (!v10)
      goto LABEL_28;
    goto LABEL_27;
  }
  operator delete(*((void **)this + 112));
  v10 = (void *)*((_QWORD *)this + 109);
  if (v10)
  {
LABEL_27:
    *((_QWORD *)this + 110) = v10;
    operator delete(v10);
  }
LABEL_28:
  *((_QWORD *)this + 99) = off_24C0B4170;
  if ((*((char *)this + 847) & 0x80000000) == 0)
  {
    v11 = (void *)*((_QWORD *)this + 100);
    if (!v11)
      goto LABEL_31;
    goto LABEL_30;
  }
  operator delete(*((void **)this + 103));
  v11 = (void *)*((_QWORD *)this + 100);
  if (v11)
  {
LABEL_30:
    *((_QWORD *)this + 101) = v11;
    operator delete(v11);
  }
LABEL_31:
  *((_QWORD *)this + 90) = off_24C0B4170;
  if ((*((char *)this + 775) & 0x80000000) == 0)
  {
    v12 = (void *)*((_QWORD *)this + 91);
    if (!v12)
      goto LABEL_34;
    goto LABEL_33;
  }
  operator delete(*((void **)this + 94));
  v12 = (void *)*((_QWORD *)this + 91);
  if (v12)
  {
LABEL_33:
    *((_QWORD *)this + 92) = v12;
    operator delete(v12);
  }
LABEL_34:
  *((_QWORD *)this + 81) = off_24C0B4170;
  if ((*((char *)this + 703) & 0x80000000) == 0)
  {
    v13 = (void *)*((_QWORD *)this + 82);
    if (!v13)
      goto LABEL_37;
    goto LABEL_36;
  }
  operator delete(*((void **)this + 85));
  v13 = (void *)*((_QWORD *)this + 82);
  if (v13)
  {
LABEL_36:
    *((_QWORD *)this + 83) = v13;
    operator delete(v13);
  }
LABEL_37:
  *((_QWORD *)this + 72) = off_24C0B4170;
  if ((*((char *)this + 631) & 0x80000000) == 0)
  {
    v14 = (void *)*((_QWORD *)this + 73);
    if (!v14)
      goto LABEL_40;
    goto LABEL_39;
  }
  operator delete(*((void **)this + 76));
  v14 = (void *)*((_QWORD *)this + 73);
  if (v14)
  {
LABEL_39:
    *((_QWORD *)this + 74) = v14;
    operator delete(v14);
  }
LABEL_40:
  *((_QWORD *)this + 63) = off_24C0B4170;
  if ((*((char *)this + 559) & 0x80000000) == 0)
  {
    v15 = (void *)*((_QWORD *)this + 64);
    if (!v15)
      goto LABEL_43;
    goto LABEL_42;
  }
  operator delete(*((void **)this + 67));
  v15 = (void *)*((_QWORD *)this + 64);
  if (v15)
  {
LABEL_42:
    *((_QWORD *)this + 65) = v15;
    operator delete(v15);
  }
LABEL_43:
  *((_QWORD *)this + 54) = off_24C0B4170;
  if ((*((char *)this + 487) & 0x80000000) == 0)
  {
    v16 = (void *)*((_QWORD *)this + 55);
    if (!v16)
      goto LABEL_46;
    goto LABEL_45;
  }
  operator delete(*((void **)this + 58));
  v16 = (void *)*((_QWORD *)this + 55);
  if (v16)
  {
LABEL_45:
    *((_QWORD *)this + 56) = v16;
    operator delete(v16);
  }
LABEL_46:
  *((_QWORD *)this + 45) = off_24C0B4170;
  if ((*((char *)this + 415) & 0x80000000) == 0)
  {
    v17 = (void *)*((_QWORD *)this + 46);
    if (!v17)
      goto LABEL_49;
    goto LABEL_48;
  }
  operator delete(*((void **)this + 49));
  v17 = (void *)*((_QWORD *)this + 46);
  if (v17)
  {
LABEL_48:
    *((_QWORD *)this + 47) = v17;
    operator delete(v17);
  }
LABEL_49:
  *((_QWORD *)this + 37) = off_24C0B4170;
  if ((*((char *)this + 351) & 0x80000000) == 0)
  {
    v18 = (void *)*((_QWORD *)this + 38);
    if (!v18)
      goto LABEL_52;
    goto LABEL_51;
  }
  operator delete(*((void **)this + 41));
  v18 = (void *)*((_QWORD *)this + 38);
  if (v18)
  {
LABEL_51:
    *((_QWORD *)this + 39) = v18;
    operator delete(v18);
  }
LABEL_52:
  *((_QWORD *)this + 28) = off_24C0B4170;
  if ((*((char *)this + 279) & 0x80000000) == 0)
  {
    v19 = (void *)*((_QWORD *)this + 29);
    if (!v19)
      goto LABEL_55;
    goto LABEL_54;
  }
  operator delete(*((void **)this + 32));
  v19 = (void *)*((_QWORD *)this + 29);
  if (v19)
  {
LABEL_54:
    *((_QWORD *)this + 30) = v19;
    operator delete(v19);
  }
LABEL_55:
  *((_QWORD *)this + 19) = off_24C0B4170;
  if ((*((char *)this + 207) & 0x80000000) == 0)
  {
    v20 = (void *)*((_QWORD *)this + 20);
    if (!v20)
      goto LABEL_58;
    goto LABEL_57;
  }
  operator delete(*((void **)this + 23));
  v20 = (void *)*((_QWORD *)this + 20);
  if (v20)
  {
LABEL_57:
    *((_QWORD *)this + 21) = v20;
    operator delete(v20);
  }
LABEL_58:
  *((_QWORD *)this + 9) = off_24C0B4170;
  if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    v21 = (void *)*((_QWORD *)this + 10);
    if (!v21)
      goto LABEL_61;
    goto LABEL_60;
  }
  operator delete(*((void **)this + 13));
  v21 = (void *)*((_QWORD *)this + 10);
  if (v21)
  {
LABEL_60:
    *((_QWORD *)this + 11) = v21;
    operator delete(v21);
  }
LABEL_61:
  *(_QWORD *)this = off_24C0B4170;
  if (*((char *)this + 55) < 0)
  {
    operator delete(*((void **)this + 4));
    v22 = (void *)*((_QWORD *)this + 1);
    if (!v22)
      return;
  }
  else
  {
    v22 = (void *)*((_QWORD *)this + 1);
    if (!v22)
      return;
  }
  *((_QWORD *)this + 2) = v22;
  operator delete(v22);
}

uint64_t webrtc::ProbeController::ProbeController(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *p_p;
  unint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  void *v32;
  uint64_t v33;
  unsigned __int8 v34;
  void *__p;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 0;
  *(_QWORD *)(a1 + 8) = 0x8000000000000000;
  *(_DWORD *)(a1 + 16) = 2;
  *(_OWORD *)(a1 + 24) = xmmword_208F0A8E0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = xmmword_208F0A8D0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0x8000000000000000;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-BweRapidRecoveryExperiment", 33);
  if (SHIBYTE(v37) < 0)
  {
    v7 = v36;
    if ((v36 & 0x8000000000000000) != 0)
      goto LABEL_106;
    p_p = (int *)__p;
    if (v36)
    {
      if (!__p)
        goto LABEL_106;
    }
  }
  else
  {
    p_p = (int *)&__p;
    v7 = HIBYTE(v37);
  }
  if (v7 >= 7)
  {
    v9 = *p_p;
    v10 = *(int *)((char *)p_p + 3);
    v8 = v9 == 1650552389 && v10 == 1684368482;
    if ((v37 & 0x8000000000000000) == 0)
      goto LABEL_17;
    goto LABEL_16;
  }
  v8 = 0;
  if (v37 < 0)
LABEL_16:
    operator delete(__p);
LABEL_17:
  *(_BYTE *)(a1 + 280) = v8;
  *(_QWORD *)(a1 + 288) = a3;
  *(_DWORD *)(a1 + 296) = 1;
  *(_QWORD *)(a1 + 304) = off_24C0B4170;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_BYTE *)(a1 + 359) = 2;
  if (a1 + 336 <= (unint64_t)"p1" && a1 + 338 > (unint64_t)"p1")
    goto LABEL_106;
  strcpy((char *)(a1 + 336), "p1");
  *(_BYTE *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 304) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 368) = 0x4008000000000000;
  *(_QWORD *)(a1 + 376) = off_24C0B4170;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 431) = 2;
  if (a1 + 408 <= (unint64_t)"p2" && a1 + 410 > (unint64_t)"p2")
    goto LABEL_106;
  strcpy((char *)(a1 + 408), "p2");
  *(_BYTE *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 376) = &unk_24C0B40E0;
  *(_QWORD *)(a1 + 440) = 0x4018000000000000;
  *(_QWORD *)(a1 + 448) = 1;
  *(_QWORD *)(a1 + 456) = off_24C0B4170;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 511) = 9;
  if (a1 + 488 <= (unint64_t)"step_size" && a1 + 497 > (unint64_t)"step_size")
    goto LABEL_106;
  strcpy((char *)(a1 + 488), "step_size");
  *(_BYTE *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 456) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 520) = 0x4000000000000000;
  *(_QWORD *)(a1 + 528) = off_24C0B4170;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  v12 = (char *)operator new(0x19uLL);
  *(_QWORD *)(a1 + 560) = v12;
  *(_QWORD *)(a1 + 576) = 0x8000000000000019;
  *(_QWORD *)(a1 + 568) = 23;
  if (v12 <= "further_probe_threshold" && v12 + 23 > "further_probe_threshold")
    goto LABEL_106;
  strcpy(v12, "further_probe_threshold");
  *(_BYTE *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 528) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 592) = 0x3FE6666666666666;
  *(_QWORD *)(a1 + 600) = off_24C0B4170;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 655) = 13;
  *(_QWORD *)(a1 + 616) = 0;
  if (a1 + 632 <= (unint64_t)"abort_further" && a1 + 645 > (unint64_t)"abort_further")
    goto LABEL_106;
  strcpy((char *)(a1 + 632), "abort_further");
  *(_WORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 600) = &unk_24C0B3FC0;
  *(_QWORD *)(a1 + 664) = off_24C0B4170;
  *(_QWORD *)(a1 + 672) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 680) = 0;
  v13 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 696) = v13;
  *(_OWORD *)(a1 + 704) = xmmword_208F08630;
  if (v13 <= "initial_probing_duration" && v13 + 24 > "initial_probing_duration")
    goto LABEL_106;
  strcpy(v13, "initial_probing_duration");
  *(_BYTE *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 664) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 728) = 5000000;
  *(_QWORD *)(a1 + 736) = off_24C0B4170;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_BYTE *)(a1 + 791) = 12;
  if (a1 + 768 <= (unint64_t)"alr_interval" && a1 + 780 > (unint64_t)"alr_interval")
    goto LABEL_106;
  strcpy((char *)(a1 + 768), "alr_interval");
  *(_BYTE *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 736) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 800) = 5000000;
  *(_QWORD *)(a1 + 808) = off_24C0B4170;
  *(_QWORD *)(a1 + 816) = 0;
  *(_QWORD *)(a1 + 832) = 0;
  *(_QWORD *)(a1 + 824) = 0;
  *(_BYTE *)(a1 + 863) = 9;
  if (a1 + 840 <= (unint64_t)"alr_scale" && a1 + 849 > (unint64_t)"alr_scale")
    goto LABEL_106;
  strcpy((char *)(a1 + 840), "alr_scale");
  *(_BYTE *)(a1 + 864) = 0;
  *(_QWORD *)(a1 + 808) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 872) = 0x4000000000000000;
  *(_QWORD *)(a1 + 880) = off_24C0B4170;
  *(_QWORD *)(a1 + 888) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_BYTE *)(a1 + 935) = 22;
  *(_QWORD *)(a1 + 896) = 0;
  if (a1 + 912 <= (unint64_t)"network_state_interval" && a1 + 934 > (unint64_t)"network_state_interval")
    goto LABEL_106;
  strcpy((char *)(a1 + 912), "network_state_interval");
  *(_BYTE *)(a1 + 936) = 0;
  *(_QWORD *)(a1 + 880) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 944) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 952) = off_24C0B4170;
  *(_QWORD *)(a1 + 960) = 0;
  *(_QWORD *)(a1 + 976) = 0;
  *(_QWORD *)(a1 + 968) = 0;
  v14 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 984) = v14;
  *(_OWORD *)(a1 + 992) = xmmword_208F05180;
  if (v14 <= "est_lower_than_network_ratio" && v14 + 28 > "est_lower_than_network_ratio")
    goto LABEL_106;
  strcpy(v14, "est_lower_than_network_ratio");
  *(_BYTE *)(a1 + 1008) = 0;
  *(_QWORD *)(a1 + 952) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 1024) = off_24C0B4170;
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  v15 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 1056) = v15;
  *(_QWORD *)(a1 + 1072) = 0x8000000000000020;
  *(_QWORD *)(a1 + 1064) = 31;
  if (v15 <= "est_lower_than_network_interval" && v15 + 31 > "est_lower_than_network_interval")
    goto LABEL_106;
  strcpy(v15, "est_lower_than_network_interval");
  *(_BYTE *)(a1 + 1080) = 0;
  *(_QWORD *)(a1 + 1024) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 1088) = 3000000;
  *(_QWORD *)(a1 + 1096) = off_24C0B4170;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_QWORD *)(a1 + 1120) = 0;
  *(_QWORD *)(a1 + 1112) = 0;
  *(_BYTE *)(a1 + 1151) = 19;
  if (a1 + 1128 <= (unint64_t)"network_state_scale" && a1 + 1147 > (unint64_t)"network_state_scale")
    goto LABEL_106;
  strcpy((char *)(a1 + 1128), "network_state_scale");
  *(_BYTE *)(a1 + 1152) = 0;
  *(_QWORD *)(a1 + 1096) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 1160) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1168) = off_24C0B4170;
  *(_QWORD *)(a1 + 1176) = 0;
  *(_QWORD *)(a1 + 1192) = 0;
  *(_QWORD *)(a1 + 1184) = 0;
  v16 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 1200) = v16;
  *(_QWORD *)(a1 + 1216) = 0x8000000000000020;
  *(_QWORD *)(a1 + 1208) = 28;
  if (v16 <= "network_state_probe_duration" && v16 + 28 > "network_state_probe_duration")
    goto LABEL_106;
  strcpy(v16, "network_state_probe_duration");
  *(_BYTE *)(a1 + 1224) = 0;
  *(_QWORD *)(a1 + 1168) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 1232) = 15000;
  *(_QWORD *)(a1 + 1240) = off_24C0B4170;
  *(_QWORD *)(a1 + 1248) = 0;
  *(_QWORD *)(a1 + 1264) = 0;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_BYTE *)(a1 + 1295) = 20;
  if (a1 + 1272 <= (unint64_t)"probe_max_allocation" && a1 + 1292 > (unint64_t)"probe_max_allocation")
    goto LABEL_106;
  strcpy((char *)(a1 + 1272), "probe_max_allocation");
  *(_WORD *)(a1 + 1296) = 256;
  *(_QWORD *)(a1 + 1240) = &unk_24C0B3FC0;
  *(_QWORD *)(a1 + 1304) = off_24C0B4170;
  *(_QWORD *)(a1 + 1312) = 0;
  *(_QWORD *)(a1 + 1328) = 0;
  *(_QWORD *)(a1 + 1320) = 0;
  *(_BYTE *)(a1 + 1359) = 8;
  if (a1 + 1336 <= (unint64_t)"alloc_p1" && a1 + 1344 > (unint64_t)"alloc_p1")
    goto LABEL_106;
  strcpy((char *)(a1 + 1336), "alloc_p1");
  *(_BYTE *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1304) = &unk_24C0B40E0;
  *(_QWORD *)(a1 + 1368) = 0x3FF0000000000000;
  *(_QWORD *)(a1 + 1376) = 1;
  *(_QWORD *)(a1 + 1384) = off_24C0B4170;
  *(_QWORD *)(a1 + 1392) = 0;
  *(_QWORD *)(a1 + 1408) = 0;
  *(_QWORD *)(a1 + 1400) = 0;
  *(_BYTE *)(a1 + 1439) = 8;
  if (a1 + 1416 <= (unint64_t)"alloc_p2" && a1 + 1424 > (unint64_t)"alloc_p2")
    goto LABEL_106;
  strcpy((char *)(a1 + 1416), "alloc_p2");
  *(_BYTE *)(a1 + 1440) = 0;
  *(_QWORD *)(a1 + 1384) = &unk_24C0B40E0;
  *(_QWORD *)(a1 + 1448) = 0x4000000000000000;
  *(_QWORD *)(a1 + 1456) = 1;
  *(_QWORD *)(a1 + 1464) = off_24C0B4170;
  *(_QWORD *)(a1 + 1472) = 0;
  *(_QWORD *)(a1 + 1488) = 0;
  *(_QWORD *)(a1 + 1480) = 0;
  v17 = (char *)operator new(0x19uLL);
  *(_QWORD *)(a1 + 1496) = v17;
  *(_OWORD *)(a1 + 1504) = xmmword_208F05110;
  if (v17 <= "alloc_current_bwe_limit" && v17 + 23 > "alloc_current_bwe_limit")
    goto LABEL_106;
  strcpy(v17, "alloc_current_bwe_limit");
  *(_BYTE *)(a1 + 1520) = 0;
  *(_QWORD *)(a1 + 1464) = &unk_24C0B40E0;
  *(_BYTE *)(a1 + 1528) = 0;
  *(_BYTE *)(a1 + 1536) = 0;
  *(_QWORD *)(a1 + 1544) = off_24C0B4170;
  *(_QWORD *)(a1 + 1552) = 0;
  *(_QWORD *)(a1 + 1568) = 0;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_BYTE *)(a1 + 1599) = 22;
  if (a1 + 1576 <= (unint64_t)"min_probe_packets_sent" && a1 + 1598 > (unint64_t)"min_probe_packets_sent")
    goto LABEL_106;
  strcpy((char *)(a1 + 1576), "min_probe_packets_sent");
  *(_BYTE *)(a1 + 1600) = 0;
  *(_QWORD *)(a1 + 1544) = &unk_24C0B4020;
  *(_DWORD *)(a1 + 1604) = 5;
  *(_QWORD *)(a1 + 1608) = off_24C0B4170;
  *(_QWORD *)(a1 + 1616) = 0;
  *(_QWORD *)(a1 + 1632) = 0;
  *(_QWORD *)(a1 + 1624) = 0;
  *(_BYTE *)(a1 + 1663) = 18;
  if (a1 + 1640 <= (unint64_t)"min_probe_duration" && a1 + 1658 > (unint64_t)"min_probe_duration")
    goto LABEL_106;
  strcpy((char *)(a1 + 1640), "min_probe_duration");
  *(_BYTE *)(a1 + 1664) = 0;
  *(_QWORD *)(a1 + 1608) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 1672) = 15000;
  *(_QWORD *)(a1 + 1680) = off_24C0B4170;
  *(_QWORD *)(a1 + 1688) = 0;
  *(_QWORD *)(a1 + 1704) = 0;
  *(_QWORD *)(a1 + 1696) = 0;
  *(_BYTE *)(a1 + 1735) = 18;
  if (a1 + 1712 <= (unint64_t)"loss_limited_scale" && a1 + 1730 > (unint64_t)"loss_limited_scale")
    goto LABEL_106;
  strcpy((char *)(a1 + 1712), "loss_limited_scale");
  *(_BYTE *)(a1 + 1736) = 0;
  *(_QWORD *)(a1 + 1680) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 1744) = 0x3FF8000000000000;
  *(_QWORD *)(a1 + 1752) = off_24C0B4170;
  *(_QWORD *)(a1 + 1760) = 0;
  *(_QWORD *)(a1 + 1776) = 0;
  *(_QWORD *)(a1 + 1768) = 0;
  v18 = (char *)operator new(0x28uLL);
  *(_QWORD *)(a1 + 1784) = v18;
  *(_OWORD *)(a1 + 1792) = xmmword_208F097B0;
  if (v18 <= "skip_if_est_larger_than_fraction_of_max" && v18 + 39 > "skip_if_est_larger_than_fraction_of_max")
    goto LABEL_106;
  strcpy(v18, "skip_if_est_larger_than_fraction_of_max");
  *(_BYTE *)(a1 + 1808) = 0;
  *(_QWORD *)(a1 + 1752) = &unk_24C0B3FF0;
  *(_QWORD *)(a1 + 1816) = 0;
  __p = (void *)(a1 + 304);
  v36 = a1 + 376;
  v37 = a1 + 456;
  v38 = a1 + 528;
  v39 = a1 + 600;
  v40 = a1 + 664;
  v41 = a1 + 736;
  v42 = a1 + 808;
  v43 = a1 + 1240;
  v44 = a1 + 1304;
  v45 = a1 + 1384;
  v46 = a1 + 1464;
  v47 = a1 + 1608;
  v48 = a1 + 880;
  v49 = a1 + 952;
  v50 = a1 + 1024;
  v51 = a1 + 1096;
  v52 = a1 + 1168;
  v53 = a1 + 1544;
  v54 = a1 + 1680;
  v55 = a1 + 1752;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&v32, a2, "WebRTC-Bwe-ProbingConfiguration", 31);
  if ((char)v34 < 0)
  {
    v19 = v33;
    if (v33 < 0)
      goto LABEL_106;
    v20 = (char *)v32;
    if (v33)
    {
      if (!v32)
        goto LABEL_106;
    }
  }
  else
  {
    v19 = v34;
    v20 = (char *)&v32;
  }
  webrtc::ParseFieldTrial(&__p, 21, v20, v19);
  if ((char)v34 < 0)
    operator delete(v32);
  v32 = (void *)(a1 + 304);
  v33 = a1 + 376;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Bwe-InitialProbing", 25);
  if (SHIBYTE(v37) < 0)
  {
    v21 = v36;
    if ((v36 & 0x8000000000000000) != 0)
      goto LABEL_106;
    v22 = (char *)__p;
    if (v36)
    {
      if (!__p)
        goto LABEL_106;
    }
  }
  else
  {
    v21 = HIBYTE(v37);
    v22 = (char *)&__p;
  }
  webrtc::ParseFieldTrial(&v32, 2, v22, v21);
  if (SHIBYTE(v37) < 0)
    operator delete(__p);
  v32 = (void *)(a1 + 456);
  v33 = a1 + 528;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Bwe-ExponentialProbing", 29);
  if (SHIBYTE(v37) < 0)
  {
    v23 = v36;
    if ((v36 & 0x8000000000000000) != 0)
      goto LABEL_106;
    v24 = (char *)__p;
    if (v36)
    {
      if (!__p)
        goto LABEL_106;
    }
  }
  else
  {
    v23 = HIBYTE(v37);
    v24 = (char *)&__p;
  }
  webrtc::ParseFieldTrial(&v32, 2, v24, v23);
  if (SHIBYTE(v37) < 0)
    operator delete(__p);
  __p = (void *)(a1 + 736);
  v36 = a1 + 808;
  v37 = a1 + 1680;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&v32, a2, "WebRTC-Bwe-AlrProbing", 21);
  if ((char)v34 < 0)
  {
    v25 = v33;
    if (v33 < 0)
      goto LABEL_106;
    v26 = (char *)v32;
    if (v33)
    {
      if (!v32)
        goto LABEL_106;
    }
  }
  else
  {
    v25 = v34;
    v26 = (char *)&v32;
  }
  webrtc::ParseFieldTrial(&__p, 3, v26, v25);
  if ((char)v34 < 0)
    operator delete(v32);
  __p = (void *)(a1 + 1304);
  v36 = a1 + 1384;
  v37 = a1 + 1464;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&v32, a2, "WebRTC-Bwe-AllocationProbing", 28);
  if ((char)v34 < 0)
  {
    v27 = v33;
    if (v33 < 0)
      goto LABEL_106;
    v28 = (char *)v32;
    if (v33)
    {
      if (!v32)
        goto LABEL_106;
    }
  }
  else
  {
    v27 = v34;
    v28 = (char *)&v32;
  }
  webrtc::ParseFieldTrial(&__p, 3, v28, v27);
  if ((char)v34 < 0)
    operator delete(v32);
  v32 = (void *)(a1 + 1544);
  v33 = a1 + 1608;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Bwe-ProbingBehavior", 26);
  if ((SHIBYTE(v37) & 0x80000000) == 0)
  {
    v29 = HIBYTE(v37);
    v30 = (char *)&__p;
    goto LABEL_99;
  }
  v29 = v36;
  if ((v36 & 0x8000000000000000) != 0 || (v30 = (char *)__p, v36) && !__p)
LABEL_106:
    __break(1u);
LABEL_99:
  webrtc::ParseFieldTrial(&v32, 2, v30, v29);
  if (SHIBYTE(v37) < 0)
    operator delete(__p);
  *(_QWORD *)(a1 + 16) = 2;
  *(_BYTE *)(a1 + 1) = 0;
  *(_QWORD *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (*(_BYTE *)(a1 + 184))
    *(_BYTE *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 192) = xmmword_208F0A8F0;
  *(_QWORD *)(a1 + 208) = 0;
  if (*(_BYTE *)(a1 + 240))
    *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  return a1;
}

void webrtc::ProbeController::SetBitrates(webrtc::ProbeController *this@<X0>, Timestamp a2@<0:X4>, uint64_t a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15[3];

  if (a4 < 1)
  {
    if (!*((_QWORD *)this + 24))
      *((_QWORD *)this + 24) = a3;
  }
  else
  {
    *((_QWORD *)this + 24) = a4;
    *((_QWORD *)this + 5) = a4;
  }
  v9 = *((_QWORD *)this + 25);
  if ((unint64_t)(a5 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    v10 = 5000000;
  else
    v10 = a5;
  *((_QWORD *)this + 25) = v10;
  v11 = *((_DWORD *)this + 5);
  if (v11 == 2)
  {
    v13 = *((_QWORD *)this + 5);
    if (v13 && v9 < v10 && v13 < v10)
    {
      v14 = (uint64_t *)operator new(8uLL);
      *v14 = v10;
      v15[1] = v14 + 1;
      v15[2] = v14 + 1;
      v15[0] = v14;
      webrtc::ProbeController::InitiateProbing((uint64_t)this, a2.var0, v15, 0, (char **)a6);
      operator delete(v14);
      return;
    }
  }
  else if (!v11 && *(_BYTE *)this)
  {
    webrtc::ProbeController::InitiateExponentialProbing(this, a2, (char **)a6);
    return;
  }
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
}

void webrtc::ProbeController::InitiateExponentialProbing(webrtc::ProbeController *this@<X0>, Timestamp a2@<0:X1>, char **a3@<X8>)
{
  double v6;
  unint64_t v7;
  char *v8;
  char *v9;
  double v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  TimeDelta v17;
  TimeDelta v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  char v32;
  _QWORD v33[3];
  _QWORD v34[2];
  std::string v35;
  _QWORD *v36;
  _QWORD v37[2];
  std::string v38;
  _QWORD *v39;
  std::string v40;

  v6 = (double)*((uint64_t *)this + 24);
  v7 = llround(*((double *)this + 46) * v6);
  v8 = (char *)operator new(8uLL);
  *(_QWORD *)v8 = v7;
  v9 = v8 + 8;
  if (*((_BYTE *)this + 448))
  {
    v10 = *((double *)this + 55);
    if (v10 > 0.0)
    {
      v11 = llround(v10 * v6);
      v12 = (char *)operator new(0x10uLL);
      *(_QWORD *)v12 = v7;
      *((_QWORD *)v12 + 1) = v11;
      v9 = v12 + 16;
      operator delete(v8);
      v8 = v12;
    }
  }
  *((_BYTE *)this + 1) = 1;
  if (*((_BYTE *)this + 2))
  {
    v13 = *((_QWORD *)this + 91);
    v14 = 0x8000000000000000;
    if (v13 != 0x8000000000000000 && a2.var0 != 0x8000000000000000)
      v14 = v13 + a2.var0;
    if (v13 == 0x7FFFFFFFFFFFFFFFLL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
      v16 = 0x7FFFFFFFFFFFFFFFLL;
    *((_QWORD *)this + 1) = v16;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    {
      v33[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congest"
               "ion_controller/goog_cc/probe_controller.cc";
      v33[1] = 2505;
      v33[2] = &v32;
      v34[0] = "Repeated initial probing enabled, last allowed probe: ";
      v34[1] = v33;
      webrtc::ToString(*((webrtc **)this + 1), v17, (char *)&v38);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v35, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
        v36 = v34;
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
      }
      else
      {
        v35 = v38;
        v36 = v34;
      }
      v37[0] = "now: ";
      v37[1] = &v35;
      webrtc::ToString((webrtc *)a2.var0, v18, (char *)&v40);
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v38, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
        v26 = v37;
        v39 = v37;
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v40.__r_.__value_.__l.__data_);
          v26 = v39;
        }
      }
      else
      {
        v38 = v40;
        v26 = v37;
        v39 = v37;
      }
      rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v19, v20, v21, v22, v23, v24, v25, **(_QWORD **)(*(_QWORD *)(v26[1] + 24) + 8));
      if ((SHIBYTE(v38.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if ((SHIBYTE(v35.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_26;
LABEL_30:
        operator delete(v35.__r_.__value_.__l.__data_);
        v29 = 0;
        v30 = 0;
        v31 = 0;
        v27 = v9 - v8;
        if (v9 != v8)
          goto LABEL_27;
LABEL_31:
        webrtc::ProbeController::InitiateProbing((uint64_t)this, a2.var0, &v29, 1, a3);
        goto LABEL_32;
      }
      operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_30;
    }
  }
LABEL_26:
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v27 = v9 - v8;
  if (v9 == v8)
    goto LABEL_31;
LABEL_27:
  if (v27 < 0)
    abort();
  v28 = (uint64_t *)operator new(v27);
  v29 = v28;
  v31 = &v28[v27 >> 3];
  memcpy(v28, v8, v27);
  v30 = &v28[v27 >> 3];
  webrtc::ProbeController::InitiateProbing((uint64_t)this, a2.var0, &v29, 1, a3);
  operator delete(v28);
LABEL_32:
  operator delete(v8);
}

void webrtc::ProbeController::InitiateProbing(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, int a4@<W3>, char **a5@<X8>)
{
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  char **v58;
  int64_t v60;
  _BOOL4 v61;
  int v62;
  uint64_t v63;

  v7 = *(double *)(a1 + 1816);
  if (v7 <= 0.0)
  {
    v60 = *(_QWORD *)(a1 + 200);
    v9 = *(_QWORD *)(a1 + 272);
  }
  else
  {
    if (*(_BYTE *)(a1 + 184))
      v8 = *(_QWORD *)(a1 + 96);
    else
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    v9 = *(_QWORD *)(a1 + 272);
    if (*(_QWORD *)(a1 + 200) >= v9)
      v10 = *(_QWORD *)(a1 + 272);
    else
      v10 = *(_QWORD *)(a1 + 200);
    v60 = *(_QWORD *)(a1 + 200);
    if (!v9)
      v10 = *(_QWORD *)(a1 + 200);
    v11 = llround(v7 * (double)v10);
    if (*(_QWORD *)(a1 + 40) < v8)
      v8 = *(_QWORD *)(a1 + 40);
    if (v8 > v11)
    {
      *(_DWORD *)(a1 + 20) = 2;
      *(_BYTE *)(a1 + 1) = 0;
      *(_QWORD *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      return;
    }
  }
  if (v9 >= 1 && (!*(_BYTE *)(a1 + 2) || !*(_BYTE *)(a1 + 1)))
  {
    v12 = 2 * v9;
    v13 = v60;
    if (v12 < v60)
      v13 = v12;
    v60 = v13;
  }
  v14 = *(_DWORD *)(a1 + 16);
  if ((v14 - 3) < 2)
  {
LABEL_24:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    {
LABEL_26:
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      return;
    }
LABEL_25:
    rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/probe_controller.cc");
    goto LABEL_26;
  }
  if (!v14)
  {
    v22 = llround(*(double *)(a1 + 1744) * (double)*(uint64_t *)(a1 + 40));
    if (v22 >= v60)
      v22 = v60;
    v57 = v22;
    if ((unint64_t)(*(_QWORD *)(a1 + 944) + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_42;
    goto LABEL_32;
  }
  if (v14 == 1)
    goto LABEL_24;
  v57 = 0x7FFFFFFFFFFFFFFFLL;
  if ((unint64_t)(*(_QWORD *)(a1 + 944) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
  {
LABEL_32:
    if (*(_BYTE *)(a1 + 184))
    {
      v23 = *(_QWORD *)(a1 + 96);
      if ((unint64_t)(v23 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        if (!v23)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
            goto LABEL_26;
          goto LABEL_25;
        }
        v24 = llround(*(double *)(a1 + 1160) * (double)v23);
        if (*(_QWORD *)(a1 + 40) > v24)
          v24 = *(_QWORD *)(a1 + 40);
        v25 = v60;
        if (v60 >= v57)
          v25 = v57;
        if (v24 >= v25)
          v24 = v25;
        v57 = v24;
      }
    }
  }
LABEL_42:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v26 = *a3;
  v56 = a3[1];
  if (*a3 != v56)
  {
    v27 = 0;
    v28 = 0;
    v54 = (uint64_t *)(a1 + 1232);
    v55 = (uint64_t *)(a1 + 1672);
    v58 = a5;
    while (1)
    {
      v62 = a4;
      v29 = *v26;
      if (v57 < *v26)
        v29 = v57;
      v61 = v29 <= v60;
      if (v29 >= v60)
        v30 = v60;
      else
        v30 = v29;
      if (!*(_BYTE *)(a1 + 184)
        || (v31 = v54, (unint64_t)(*(_QWORD *)(a1 + 944) + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL))
      {
        v31 = v55;
      }
      v32 = *v31;
      v33 = *(_DWORD *)(a1 + 1604);
      v34 = *(_DWORD *)(a1 + 296);
      *(_DWORD *)(a1 + 296) = v34 + 1;
      v35 = *(_QWORD *)(a1 + 288);
      if (v35)
      {
        v36 = operator new();
        *(_QWORD *)v36 = &unk_24C0BBBD0;
        if (rtc::g_clock)
        {
          v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
        }
        else
        {
          if (!dword_253EA791C)
            mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
          v37 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
              / dword_253EA791C;
        }
        *(_QWORD *)v36 = &unk_24C0BBF10;
        *(_QWORD *)(v36 + 8) = 1000 * (v37 / 1000000);
        *(_DWORD *)(v36 + 16) = v34;
        *(_DWORD *)(v36 + 20) = v30;
        *(_DWORD *)(v36 + 24) = v33;
        *(_DWORD *)(v36 + 28) = ((int)v32 * (int)v30 + 4000000) / 8000000;
        v63 = v36;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v35 + 40))(v35, &v63);
        v38 = v63;
        v63 = 0;
        a5 = v58;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      }
      v39 = (unint64_t)a5[2];
      if ((unint64_t)v27 >= v39)
        break;
      if (!v27)
        goto LABEL_87;
      *(_QWORD *)v27 = a2;
      *((_QWORD *)v27 + 1) = v30;
      *((_QWORD *)v27 + 2) = v32;
      *((_DWORD *)v27 + 6) = v33;
      *((_DWORD *)v27 + 7) = v34;
      v27 += 32;
LABEL_45:
      a4 = v61 & v62;
      a5[1] = v27;
      if (++v26 == v56)
        goto LABEL_79;
    }
    v40 = (v27 - v28) >> 5;
    v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 59)
      goto LABEL_88;
    v42 = v39 - (_QWORD)v28;
    if (v42 >> 4 > v41)
      v41 = v42 >> 4;
    v43 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0;
    v44 = 0x7FFFFFFFFFFFFFFLL;
    if (!v43)
      v44 = v41;
    if (!v44)
    {
LABEL_87:
      __break(1u);
LABEL_88:
      abort();
    }
    if (v44 >> 59)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v45 = 32 * v44;
    v46 = (char *)operator new(32 * v44);
    v47 = &v46[32 * v40];
    *(_QWORD *)v47 = a2;
    *((_QWORD *)v47 + 1) = v30;
    *((_QWORD *)v47 + 2) = v32;
    *((_DWORD *)v47 + 6) = v33;
    *((_DWORD *)v47 + 7) = v34;
    if (v27 == v28)
    {
      v50 = &v46[32 * v40];
      a5 = v58;
      v27 = v47 + 32;
      *v58 = v47;
      v58[1] = v47 + 32;
      v58[2] = &v46[v45];
      if (!v28)
      {
LABEL_44:
        v28 = v50;
        goto LABEL_45;
      }
    }
    else
    {
      v48 = &v46[32 * v40];
      a5 = v58;
      do
      {
        v49 = *((_OWORD *)v27 - 1);
        v50 = v48 - 32;
        *((_OWORD *)v48 - 2) = *((_OWORD *)v27 - 2);
        *((_OWORD *)v48 - 1) = v49;
        v27 -= 32;
        v48 -= 32;
      }
      while (v27 != v28);
      v27 = v47 + 32;
      *v58 = v50;
      v58[1] = v47 + 32;
      v58[2] = &v46[v45];
      if (!v28)
        goto LABEL_44;
    }
    operator delete(v28);
    goto LABEL_44;
  }
LABEL_79:
  *(_QWORD *)(a1 + 32) = a2;
  if ((a4 & 1) != 0)
  {
    *(_DWORD *)(a1 + 20) = 1;
    v51 = *(a3[1] - 1);
    if (v51 >= v57)
      v51 = v57;
    v52 = llround(*(double *)(a1 + 592) * (double)v51);
  }
  else
  {
    *(_DWORD *)(a1 + 20) = 2;
    *(_BYTE *)(a1 + 1) = 0;
    v52 = 0x7FFFFFFFFFFFFFFFLL;
  }
  *(_QWORD *)(a1 + 24) = v52;
}

_QWORD *std::vector<webrtc::DataRate>::vector[abi:sn180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  size_t v5;
  char *v6;
  char *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 61)
      abort();
    v5 = 8 * a3;
    v6 = (char *)operator new(8 * a3);
    *a1 = v6;
    a1[1] = v6;
    v7 = &v6[v5];
    a1[2] = &v6[v5];
    memmove(v6, a2, v5);
    a1[1] = v7;
  }
  return a1;
}

void webrtc::ProbeController::OnMaxTotalAllocatedBitrate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  double v10;
  int64_t v11;
  int64_t v12;
  _BOOL4 v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  void *__p;
  _BYTE *v24;
  _QWORD *v25;
  _QWORD v26[2];

  v26[1] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 1297)
    || *(_DWORD *)(a1 + 20) != 2
    || *(_QWORD *)(a1 + 272) == a2
    || ((v6 = *(_QWORD *)(a1 + 40), v6 < *(_QWORD *)(a1 + 200)) ? (v7 = *(_BYTE *)(a1 + 224) == 0) : (v7 = 1),
        !v7 ? (v8 = v6 < a2) : (v8 = 0),
        !v8))
  {
    *(_QWORD *)(a1 + 272) = a2;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)a4 = 0;
    return;
  }
  *(_QWORD *)(a1 + 272) = a2;
  if (!*(_BYTE *)(a1 + 1376))
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    return;
  }
  v10 = (double)a2;
  v11 = llround(*(double *)(a1 + 1368) * (double)a2);
  if (!*(_BYTE *)(a1 + 1536))
  {
    v12 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_19:
    v14 = operator new(8uLL);
    __p = v14;
    *v14 = v11;
    v24 = v14 + 1;
    v25 = v14 + 1;
    if (*(_BYTE *)(a1 + 1456))
    {
      v15 = llround(*(double *)(a1 + 1448) * v10);
      v13 = v12 < v15;
      if (v12 >= v15)
        v16 = v15;
      else
        v16 = v12;
      if (v16 > v11)
        std::vector<webrtc::DataRate>::push_back[abi:sn180100](&__p, v16);
    }
    else
    {
      v13 = 0;
    }
    goto LABEL_26;
  }
  v12 = llround(*(double *)(a1 + 1528) * (double)v6);
  if (v12 >= v11)
    goto LABEL_19;
  v26[0] = v12;
  v13 = 1;
  std::vector<webrtc::DataRate>::vector[abi:sn180100](&__p, v26, 1uLL);
LABEL_26:
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v17 = __p;
  v18 = v24 - (_BYTE *)__p;
  if (v24 == __p)
  {
    webrtc::ProbeController::InitiateProbing(a1, a3, &v20, v13, (char **)a4);
  }
  else
  {
    if (v18 < 0)
      abort();
    v19 = (uint64_t *)operator new(v24 - (_BYTE *)__p);
    v20 = v19;
    v22 = &v19[v18 >> 3];
    memcpy(v19, v17, v18);
    v21 = &v19[v18 >> 3];
    webrtc::ProbeController::InitiateProbing(a1, a3, &v20, v13, (char **)a4);
    operator delete(v19);
  }
  if (__p)
  {
    v24 = __p;
    operator delete(__p);
  }
}

void std::vector<webrtc::DataRate>::push_back[abi:sn180100](void **a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;

  v5 = (char *)a1[1];
  v4 = (unint64_t)a1[2];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *(_QWORD *)v5 = a2;
      v7 = v5 + 8;
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v8 = (char *)*a1;
  v9 = v5 - (_BYTE *)*a1;
  v10 = v9 >> 3;
  v11 = (v9 >> 3) + 1;
  if (v11 >> 61)
    goto LABEL_23;
  v12 = v4 - (_QWORD)v8;
  if (v12 >> 2 > v11)
    v11 = v12 >> 2;
  v13 = (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8;
  v14 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v13)
    v14 = v11;
  if (!v14)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    abort();
  }
  if (v14 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v15 = 8 * v14;
  v16 = operator new(8 * v14);
  v17 = &v16[v15];
  v18 = &v16[8 * v10];
  *v18 = a2;
  v7 = v18 + 1;
  if (v5 != v8)
  {
    v19 = v5 - v8 - 8;
    if (v19 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(&v5[-v9] - v16) < 0x20)
      goto LABEL_27;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v21];
    v18 = (_QWORD *)((char *)v18 - v21);
    v22 = &v16[8 * v10 - 16];
    v23 = (__int128 *)(v5 - 16);
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *v23;
      *(v22 - 1) = *(v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 2;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v26 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *--v18 = v26;
      }
      while (v6 != v8);
    }
    v6 = v8;
  }
  *a1 = v18;
  a1[1] = v7;
  a1[2] = v17;
  if (v6)
    operator delete(v6);
LABEL_21:
  a1[1] = v7;
}

void webrtc::ProbeController::SetEstimatedBitrate(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22[3];
  char v23;
  _QWORD v24[3];
  _QWORD v25[2];
  std::string v26;
  _QWORD *v27;
  _QWORD v28[2];
  std::string v29;
  _QWORD *v30;
  _QWORD v31[2];
  std::string v32;
  _QWORD *v33;
  std::string v34;

  *(_DWORD *)(a1 + 16) = a3;
  v9 = *(_QWORD *)(a1 + 40);
  if ((uint64_t)llround((double)v9 * 0.66) > a2)
  {
    *(_QWORD *)(a1 + 256) = a4;
    *(_QWORD *)(a1 + 264) = v9;
  }
  *(_QWORD *)(a1 + 40) = a2;
  if (*(_DWORD *)(a1 + 20) != 1)
    goto LABEL_36;
  if (*(_BYTE *)(a1 + 657))
  {
    if (*(_QWORD *)(a1 + 200) < a2)
      goto LABEL_6;
    v10 = *(_QWORD *)(a1 + 272);
    if (!v10)
      goto LABEL_13;
    if (!*(_BYTE *)(a1 + 1))
    {
      if (a2 <= 2 * v10)
        goto LABEL_13;
      goto LABEL_6;
    }
    if (!*(_BYTE *)(a1 + 2) && 2 * v10 < a2)
LABEL_6:
      *(_QWORD *)(a1 + 24) = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_13:
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  if ((unint64_t)(*(_QWORD *)(a1 + 944) + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL && *(_BYTE *)(a1 + 184))
    v11 = llround(*(double *)(a1 + 592) * (double)*(uint64_t *)(a1 + 96));
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
    goto LABEL_33;
  v24[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_"
           "controller/goog_cc/probe_controller.cc";
  v24[1] = 2801;
  v24[2] = &v23;
  v25[0] = "Measured bitrate: ";
  v25[1] = v24;
  webrtc::ToString(a2, (char *)&v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v26, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    v27 = v25;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  else
  {
    v26 = v32;
    v27 = v25;
  }
  v28[0] = " Minimum to probe further: ";
  v28[1] = &v26;
  webrtc::ToString(*(_QWORD *)(a1 + 24), (char *)&v32);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v29, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
    v30 = v28;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  else
  {
    v29 = v32;
    v30 = v28;
  }
  v31[0] = " upper limit: ";
  v31[1] = &v29;
  webrtc::ToString(v11, (char *)&v34);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    v19 = v31;
    v33 = v31;
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v34.__r_.__value_.__l.__data_);
      v19 = v33;
    }
  }
  else
  {
    v32 = v34;
    v19 = v31;
    v33 = v31;
  }
  rtc::webrtc_logging_impl::Log("\r\t\n\t\n\t\n", v12, v13, v14, v15, v16, v17, v18, **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19[1] + 24) + 8) + 24) + 8));
  if ((SHIBYTE(v32.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_31;
LABEL_39:
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_33;
    goto LABEL_32;
  }
  operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_39;
LABEL_31:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
LABEL_32:
    operator delete(v26.__r_.__value_.__l.__data_);
LABEL_33:
  if (*(_QWORD *)(a1 + 24) < a2 && v11 >= a2)
  {
    v20 = llround(*(double *)(a1 + 520) * (double)a2);
    v21 = (uint64_t *)operator new(8uLL);
    *v21 = v20;
    v22[1] = v21 + 1;
    v22[2] = v21 + 1;
    v22[0] = v21;
    webrtc::ProbeController::InitiateProbing(a1, a4, v22, 1, (char **)a5);
    operator delete(v21);
    return;
  }
LABEL_36:
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
}

void webrtc::ProbeController::RequestProbe(webrtc::ProbeController *this@<X0>, Timestamp a2@<0:X1>, uint64_t a3@<X8>)
{
  char v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  _BOOL4 v20;
  int v21;
  int v22;
  BOOL v23;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43[3];

  v6 = *((_BYTE *)this + 240);
  if (v6)
  {
    v7 = *((_QWORD *)this + 29);
    v8 = a2.var0 == 0x8000000000000000 || v7 == 0x7FFFFFFFFFFFFFFFLL;
    v9 = v8 || a2.var0 - v7 < 3000000;
    v10 = v9;
    v6 = v7 != 0x8000000000000000 && v10;
    if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
      v6 = 0;
  }
  if (!*((_BYTE *)this + 224) && (v6 & 1) == 0 && !*((_BYTE *)this + 280) || *((_DWORD *)this + 5) != 2)
    goto LABEL_53;
  v11 = llround((double)*((uint64_t *)this + 33) * 0.85);
  v12 = llround((double)v11 * 0.95);
  v13 = *((_QWORD *)this + 32);
  v14 = a2.var0 - v13;
  if (v13 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 == 0x8000000000000000)
    v14 = 0x8000000000000000;
  if (v13 == 0x8000000000000000)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v14;
  if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  v17 = *((_QWORD *)this + 26);
  v18 = a2.var0 == 0x8000000000000000 || v17 == 0x7FFFFFFFFFFFFFFFLL;
  v19 = v18 || a2.var0 - v17 <= 5000000;
  v20 = !v19;
  v21 = v17 == 0x8000000000000000 || v20;
  v22 = a2.var0 == 0x7FFFFFFFFFFFFFFFLL ? 1 : v21;
  v23 = v12 > *((_QWORD *)this + 5) && v16 < 5000000;
  if (v23 && v22 != 0)
  {
    v25 = rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>();
    if ((v25 & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/probe_controller.cc");
    v33 = atomic_load(&webrtc::ProbeController::RequestProbe(webrtc::Timestamp)::atomic_histogram_pointer);
    if (v33)
    {
      v34 = 0x7FFFFFFFFFFFFFFFLL;
      if (a2.var0 != 0x7FFFFFFFFFFFFFFFLL
        && (v35 = *((_QWORD *)this + 26), v36 = 0x8000000000000000, v35 != 0x8000000000000000)
        && (a2.var0 == 0x8000000000000000
         || v35 == 0x7FFFFFFFFFFFFFFFLL
         || (v36 = a2.var0 - v35, v34 = a2.var0 - v35, a2.var0 - v35 < 0)))
      {
        v39 = -(uint64_t)v36;
        v40 = v39 / 0xF4240;
        if (v39 % 0xF4240 <= 0x7A120)
          v41 = 0;
        else
          v41 = -1;
        v37 = v41 - v40;
      }
      else if (v34 % 0xF4240 <= 0x7A11F)
      {
        v37 = v34 / 0xF4240;
      }
      else
      {
        v37 = v34 / 0xF4240 + 1;
      }
      webrtc::metrics::HistogramAdd(v33, v37);
    }
    else
    {
      while (!__ldaxr(&webrtc::ProbeController::RequestProbe(webrtc::Timestamp)::atomic_histogram_pointer))
      {
        if (!__stlxr(0, &webrtc::ProbeController::RequestProbe(webrtc::Timestamp)::atomic_histogram_pointer))
          goto LABEL_73;
      }
      __clrex();
    }
LABEL_73:
    *((Timestamp *)this + 26) = a2;
    v42 = (uint64_t *)operator new(8uLL);
    *v42 = v11;
    v43[1] = v42 + 1;
    v43[2] = v42 + 1;
    v43[0] = v42;
    webrtc::ProbeController::InitiateProbing((uint64_t)this, a2.var0, v43, 0, (char **)a3);
    operator delete(v42);
  }
  else
  {
LABEL_53:
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
}

void webrtc::ProbeController::Process(webrtc::ProbeController *this@<X0>, Timestamp a2@<0:X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t **v32;
  unint64_t v33;
  _QWORD v34[3];
  _QWORD v35[3];

  v6 = *((_QWORD *)this + 4);
  v7 = a2.var0 == 0x7FFFFFFFFFFFFFFFLL || v6 == 0x8000000000000000;
  if (v7
    || a2.var0 != 0x8000000000000000 && (v6 != 0x7FFFFFFFFFFFFFFFLL ? (v8 = a2.var0 - v6 <= 1000000) : (v8 = 1), !v8))
  {
    if (*((_DWORD *)this + 5) == 1)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/goog_cc/probe_controller.cc");
      *((_DWORD *)this + 5) = 2;
      *((_BYTE *)this + 1) = 0;
      *((_QWORD *)this + 3) = 0x7FFFFFFFFFFFFFFFLL;
    }
  }
  v16 = *((_QWORD *)this + 5);
  if (!v16 || *((_DWORD *)this + 5) != 2)
    goto LABEL_51;
  if (*((_QWORD *)this + 1) > a2.var0
    && (v17 = *((_QWORD *)this + 4), v17 != 0x7FFFFFFFFFFFFFFFLL)
    && (v17 == 0x8000000000000000 || v17 + 1000000 <= a2.var0))
  {
    *((_BYTE *)this + 1) = 1;
    v33 = llround(*((double *)this + 46) * (double)v16);
    v31 = operator new(8uLL);
    *v31 = v33;
    v35[1] = v31 + 1;
    v35[2] = v31 + 1;
    v35[0] = v31;
    v32 = (uint64_t **)v35;
  }
  else
  {
    if (!*((_BYTE *)this + 248) || !*((_BYTE *)this + 224))
      goto LABEL_57;
    v18 = *((_QWORD *)this + 4);
    if (*((_QWORD *)this + 27) > v18)
      v18 = *((_QWORD *)this + 27);
    v19 = 0x7FFFFFFFFFFFFFFFLL;
    if (v18 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v20 = *((_QWORD *)this + 100);
      v21 = v20 == 0x8000000000000000 || v18 == 0x8000000000000000;
      v22 = v18 + v20;
      if (v21)
        v22 = 0x8000000000000000;
      if (v20 != 0x7FFFFFFFFFFFFFFFLL)
        v19 = v22;
    }
    if (v19 > a2.var0)
    {
LABEL_57:
      if (!*((_BYTE *)this + 184))
        goto LABEL_51;
      v23 = *((_QWORD *)this + 12);
      if ((unint64_t)(v23 - 0x7FFFFFFFFFFFFFFFLL) < 2)
        goto LABEL_51;
      if (*((_DWORD *)this + 4) == 2
        && v16 < (uint64_t)llround(*((double *)this + 127) * (double)v23)
        && (v24 = *((_QWORD *)this + 136), (unint64_t)(v24 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL))
      {
        v25 = *((_QWORD *)this + 4);
        v26 = v25 + v24;
        if (v25 == 0x8000000000000000)
          v26 = 0x8000000000000000;
        if (v25 != 0x7FFFFFFFFFFFFFFFLL)
          v25 = v26;
      }
      else
      {
        if (v16 >= v23)
          goto LABEL_51;
        v27 = *((_QWORD *)this + 118);
        if ((unint64_t)(v27 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
          goto LABEL_51;
        v28 = *((_QWORD *)this + 4);
        v29 = v28 + v27;
        if (v28 == 0x8000000000000000)
          v29 = 0x8000000000000000;
        if (v28 == 0x7FFFFFFFFFFFFFFFLL)
          v25 = *((_QWORD *)this + 4);
        else
          v25 = v29;
      }
      if (v25 > a2.var0)
      {
LABEL_51:
        *(_QWORD *)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
        *(_QWORD *)(a3 + 16) = 0;
        return;
      }
    }
    v30 = llround(*((double *)this + 109) * (double)v16);
    v31 = operator new(8uLL);
    *v31 = v30;
    v34[1] = v31 + 1;
    v34[2] = v31 + 1;
    v34[0] = v31;
    v32 = (uint64_t **)v34;
  }
  webrtc::ProbeController::InitiateProbing((uint64_t)this, a2.var0, v32, 1, (char **)a3);
  operator delete(v31);
}

void dcsctp::ProtocolViolationCause::Parse(unsigned __int16 *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unsigned __int8 v8;
  size_t v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  size_t v14;
  void **p_src;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void **__src;
  unint64_t v23;
  unint64_t v24;
  void (**v25)(dcsctp::ProtocolViolationCause *__hidden);
  __int128 v26;
  unint64_t v27;

  if (a2)
    v4 = a1;
  else
    v4 = 0;
  if (a2 < 4
    || __rev16(*v4) != 13
    || ((v5 = __rev16(v4[1]), v5 >= 4) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return;
  }
  if (v5 > 4)
  {
    v13 = (void **)(v4 + 2);
    v14 = v5 - 4;
    if (v5 - 4 > 0x16)
    {
      v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v17 = v14 | 7;
      v18 = v17 + 1;
      p_src = (void **)operator new(v17 + 1);
      v23 = v14;
      v24 = v18 | 0x8000000000000000;
      __src = p_src;
      v16 = (void **)((char *)p_src + v14);
      if (p_src <= v13 && v16 > v13)
        goto LABEL_45;
    }
    else
    {
      HIBYTE(v24) = v5 - 4;
      p_src = (void **)&__src;
      v16 = (void **)((char *)&__src + v14);
      if (&__src <= (void ***)v13 && v16 > v13)
        goto LABEL_45;
    }
    memmove(p_src, v13, v14);
    *(_BYTE *)v16 = 0;
    v8 = HIBYTE(v24);
    if (SHIBYTE(v24) < 0)
    {
      v9 = v23;
      if ((v23 & 0x8000000000000000) != 0)
        goto LABEL_45;
      v10 = __src;
      if (v23)
      {
        if (!__src)
          goto LABEL_45;
      }
      v25 = off_24C0BAE18;
      if (v23 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_46;
      if (v23 <= 0x16)
        goto LABEL_19;
LABEL_37:
      v20 = (v9 & 0x7FFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v20 = v9 | 7;
      v21 = v20 + 1;
      v11 = (void **)operator new(v20 + 1);
      *((_QWORD *)&v26 + 1) = v9;
      v27 = v21 | 0x8000000000000000;
      *(_QWORD *)&v26 = v11;
      v12 = (void **)((char *)v11 + v9);
      if (v11 > v10)
        goto LABEL_41;
      goto LABEL_40;
    }
  }
  else
  {
    HIBYTE(v24) = 0;
    LOBYTE(__src) = 0;
    v8 = 0;
  }
  v9 = v8;
  v25 = off_24C0BAE18;
  v10 = (void **)&__src;
  if (v8 > 0x16uLL)
    goto LABEL_37;
LABEL_19:
  HIBYTE(v27) = v9;
  v11 = (void **)&v26;
  v12 = (void **)((char *)&v26 + v9);
  if (&v26 > (__int128 *)v10)
    goto LABEL_41;
LABEL_40:
  if (v12 > v10)
  {
LABEL_45:
    __break(1u);
LABEL_46:
    abort();
  }
LABEL_41:
  if (v9)
    memmove(v11, v10, v9);
  *(_BYTE *)v12 = 0;
  *(_QWORD *)a3 = off_24C0BAE18;
  *(_OWORD *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 24) = v27;
  v26 = 0uLL;
  v27 = 0;
  *(_BYTE *)(a3 + 32) = 1;
  v25 = off_24C0BAE18;
  if (SHIBYTE(v24) < 0)
    operator delete(__src);
}

void dcsctp::ProtocolViolationCause::~ProtocolViolationCause(void **this)
{
  *this = off_24C0BAE18;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_24C0BAE18;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::ProtocolViolationCause::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  char *v16;
  const void *v17;
  size_t v18;
  unint64_t v19;
  std::string *v20;
  uint64_t v21;

  if (*(char *)(a1 + 31) < 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(char **)a2;
    v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    v13 = v10 + 4;
    v14 = v12 + v10 + 4;
    v15 = v12 > v14;
    if (v12 < v14)
      goto LABEL_3;
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 31);
    v11 = *(char **)a2;
    v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
    v13 = v10 + 4;
    v14 = v12 + v10 + 4;
    v15 = v12 > v14;
    if (v12 < v14)
    {
LABEL_3:
      std::vector<unsigned char>::__append((char **)a2, v13);
      v11 = *(char **)a2;
      goto LABEL_8;
    }
  }
  if (v15)
    *(_QWORD *)(a2 + 8) = &v11[v14];
LABEL_8:
  v16 = &v11[v12];
  *(_WORD *)v16 = 3328;
  v16[2] = BYTE1(v13);
  v16[3] = v13;
  if (v10 >= 0xFFFFFFFFFFFFFFFCLL)
  {
    v20 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    dcsctp::ProtocolViolationCause::ToString((dcsctp::ProtocolViolationCause *)v20);
    return;
  }
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 31))
      v17 = (const void *)(a1 + 8);
    else
      v17 = 0;
    if (v10 >= *(unsigned __int8 *)(a1 + 31))
      v18 = *(unsigned __int8 *)(a1 + 31);
    else
      v18 = v10;
    if (!v18)
      return;
LABEL_25:
    if (v17)
      memcpy((void *)(*(_QWORD *)a2 + v12 + 4), v17, v18);
    return;
  }
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
    v17 = *(const void **)(a1 + 8);
  else
    v17 = 0;
  if (v10 >= v19)
    v18 = *(_QWORD *)(a1 + 16);
  else
    v18 = v10;
  if (v18)
    goto LABEL_25;
}

void dcsctp::ProtocolViolationCause::ToString(dcsctp::ProtocolViolationCause *this@<X0>, std::string *a2@<X8>)
{
  char *v4;
  std::string::value_type *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  BOOL v9;
  std::string v10;

  v4 = (char *)operator new(0x30uLL);
  v5 = v4 + 43;
  if (v4 <= "Protocol Violation, additional_information=" && v5 > "Protocol Violation, additional_information=")
    goto LABEL_15;
  strcpy(v4, "Protocol Violation, additional_information=");
  v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v4;
  *(_OWORD *)&v10.__r_.__value_.__r.__words[1] = xmmword_208F16E30;
  v6 = *((char *)this + 31);
  v7 = (char *)this + 8;
  if (v6 < 0)
  {
    v8 = *((_QWORD *)this + 2);
    if ((v8 & 0x8000000000000000) != 0)
      goto LABEL_15;
    v7 = *(const std::string::value_type **)v7;
    v9 = v8 == 0;
    if (v8)
    {
      if (!v7)
        goto LABEL_15;
    }
  }
  else
  {
    v8 = *((unsigned __int8 *)this + 31);
    v9 = v6 == 0;
  }
  if (v8 > 4)
  {
    std::string::__grow_by_and_replace(&v10, 0x2FuLL, v8 - 4, 0x2BuLL, 0x2BuLL, 0, v8, v7);
LABEL_14:
    *a2 = v10;
    return;
  }
  if (v9)
    goto LABEL_14;
  if (v5 > v7 || &v5[v8] <= v7)
  {
    memmove(v5, v7, v8);
    v10.__r_.__value_.__l.__size_ = v8 + 43;
    v4[v8 + 43] = 0;
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
}

_QWORD *webrtc::PushResampler<short>::~PushResampler(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  *a1 = &unk_24C0BAE48;
  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 48);
        if (v6)
        {
          *(_QWORD *)(v3 - 40) = v6;
          operator delete(v6);
        }
        v7 = *(_QWORD *)(v3 - 56);
        *(_QWORD *)(v3 - 56) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  return a1;
}

void webrtc::PushResampler<short>::~PushResampler(_QWORD *a1)
{
  webrtc::PushResampler<short>::~PushResampler(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::PushResampler<short>::InitializeIfNeeded(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  _OWORD *i;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  _OWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;

  if (*(_DWORD *)(a1 + 8) == a2 && *(_DWORD *)(a1 + 12) == a3 && *(_QWORD *)(a1 + 16) == a4)
    return 0;
  result = 0xFFFFFFFFLL;
  if (a2 >= 1 && a3 >= 1 && a4)
  {
    *(_DWORD *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 12) = a3;
    *(_QWORD *)(a1 + 16) = a4;
    v7 = a2 / 0x64uLL;
    v8 = a3 / 0x64uLL;
    v9 = *(char **)(a1 + 48);
    for (i = *(_OWORD **)(a1 + 56); i != (_OWORD *)v9; i = (_OWORD *)((char *)i - 56))
    {
      v11 = (void *)*((_QWORD *)i - 3);
      if (v11)
      {
        *((_QWORD *)i - 2) = v11;
        operator delete(v11);
      }
      v12 = (void *)*((_QWORD *)i - 6);
      if (v12)
      {
        *((_QWORD *)i - 5) = v12;
        operator delete(v12);
      }
      v13 = *((_QWORD *)i - 7);
      *((_QWORD *)i - 7) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    v14 = 0;
    for (*(_QWORD *)(a1 + 56) = v9; ; v9 = *(char **)(a1 + 56))
    {
      v15 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v9 >= v15)
      {
        v17 = *(char **)(a1 + 48);
        v18 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v17) >> 3) + 1;
        if (v18 > 0x492492492492492)
          goto LABEL_88;
        v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (_QWORD)v17) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x249249249249249)
          v20 = 0x492492492492492;
        else
          v20 = v18;
        if (!v20)
        {
LABEL_87:
          __break(1u);
LABEL_88:
          abort();
        }
        if (v20 > 0x492492492492492)
          goto LABEL_89;
        v21 = 56 * v20;
        v22 = (char *)operator new(56 * v20);
        v23 = &v22[8 * ((v9 - v17) >> 3)];
        *(_OWORD *)v23 = 0u;
        *((_OWORD *)v23 + 1) = 0u;
        v24 = &v22[v21];
        v16 = v23 + 56;
        *((_OWORD *)v23 + 2) = 0u;
        *((_QWORD *)v23 + 6) = 0;
        if (v9 == v17)
        {
          *(_QWORD *)(a1 + 48) = v23;
          *(_QWORD *)(a1 + 56) = v16;
          *(_QWORD *)(a1 + 64) = v24;
        }
        else
        {
          v25 = 0;
          do
          {
            v26 = &v23[v25];
            v27 = &v9[v25];
            v28 = *(_OWORD *)&v9[v25 - 56];
            *((_QWORD *)v27 - 7) = 0;
            *(_OWORD *)(v26 - 56) = v28;
            *((_QWORD *)v26 - 5) = *(_QWORD *)&v9[v25 - 40];
            *((_QWORD *)v26 - 4) = *(_QWORD *)&v9[v25 - 32];
            *((_QWORD *)v27 - 6) = 0;
            *((_QWORD *)v27 - 5) = 0;
            *((_QWORD *)v27 - 4) = 0;
            *(_OWORD *)(v26 - 24) = *(_OWORD *)&v9[v25 - 24];
            *((_QWORD *)v26 - 1) = *(_QWORD *)&v9[v25 - 8];
            *((_QWORD *)v27 - 3) = 0;
            *((_QWORD *)v27 - 2) = 0;
            *((_QWORD *)v27 - 1) = 0;
            v25 -= 56;
          }
          while (&v9[v25] != v17);
          v9 = *(char **)(a1 + 48);
          v29 = *(_OWORD **)(a1 + 56);
          *(_QWORD *)(a1 + 48) = &v23[v25];
          *(_QWORD *)(a1 + 56) = v16;
          *(_QWORD *)(a1 + 64) = v24;
          while (v29 != (_OWORD *)v9)
          {
            v30 = (void *)*((_QWORD *)v29 - 3);
            if (v30)
            {
              *((_QWORD *)v29 - 2) = v30;
              operator delete(v30);
            }
            v31 = (void *)*((_QWORD *)v29 - 6);
            if (v31)
            {
              *((_QWORD *)v29 - 5) = v31;
              operator delete(v31);
            }
            v32 = *((_QWORD *)v29 - 7);
            *((_QWORD *)v29 - 7) = 0;
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v29 = (_OWORD *)((char *)v29 - 56);
          }
        }
        if (v9)
          operator delete(v9);
      }
      else
      {
        if (!v9)
          goto LABEL_87;
        v16 = v9 + 56;
        *((_QWORD *)v9 + 6) = 0;
        *((_OWORD *)v9 + 1) = 0u;
        *((_OWORD *)v9 + 2) = 0u;
        *(_OWORD *)v9 = 0u;
      }
      *(_QWORD *)(a1 + 56) = v16;
      v33 = operator new();
      *(_QWORD *)v33 = &off_24C0BAE88;
      v34 = operator new();
      webrtc::SincResampler::SincResampler(v34, v7, v33, (double)v7 / (double)v8);
      *(_QWORD *)(v33 + 8) = v35;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0;
      *(_QWORD *)(v33 + 40) = v8;
      *(_BYTE *)(v33 + 48) = 1;
      *(_QWORD *)(v33 + 56) = 0;
      v36 = *((_QWORD *)v16 - 7);
      *((_QWORD *)v16 - 7) = v33;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      v37 = *((_QWORD *)v16 - 6);
      v38 = (*((_QWORD *)v16 - 5) - v37) >> 1;
      if (v7 <= v38)
      {
        if (v7 < v38)
          *((_QWORD *)v16 - 5) = v37 + 2 * v7;
      }
      else
      {
        std::vector<short>::__append((uint64_t)(v16 - 48), v7 - v38);
      }
      v39 = *((_QWORD *)v16 - 3);
      v40 = (*((_QWORD *)v16 - 2) - v39) >> 1;
      if (v8 <= v40)
      {
        if (v8 < v40)
          *((_QWORD *)v16 - 2) = v39 + 2 * v8;
      }
      else
      {
        std::vector<short>::__append((uint64_t)(v16 - 24), v8 - v40);
      }
      if (++v14 == a4)
        break;
    }
    v42 = *(char **)(a1 + 24);
    v41 = *(char **)(a1 + 32);
    v43 = *(_QWORD *)(a1 + 16);
    v44 = (v41 - v42) >> 3;
    v45 = v43 - v44;
    if (v43 <= v44)
    {
      result = 0;
      if (v43 >= v44)
        return result;
      v69 = &v42[8 * v43];
    }
    else
    {
      v46 = *(_QWORD *)(a1 + 40);
      if (v45 > (v46 - (uint64_t)v41) >> 3)
      {
        if (v43 >> 61)
          goto LABEL_88;
        v47 = v46 - (_QWORD)v42;
        v48 = (v46 - (uint64_t)v42) >> 2;
        if (v48 <= v43)
          v48 = *(_QWORD *)(a1 + 16);
        v49 = v47 >= 0x7FFFFFFFFFFFFFF8;
        v50 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v49)
          v50 = v48;
        if (v50 >> 61)
LABEL_89:
          std::__throw_bad_array_new_length[abi:sn180100]();
        v51 = 8 * v50;
        v52 = (char *)operator new(8 * v50);
        v53 = &v52[8 * v44];
        v54 = &v52[8 * v43];
        v55 = 8 * v43 - (v41 - v42) - 8;
        v56 = v53;
        if (v55 < 0x18)
          goto LABEL_92;
        v57 = (v55 >> 3) + 1;
        v56 = &v53[8 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
        v58 = v53 + 16;
        v59 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          *(v58 - 1) = 0uLL;
          *v58 = 0uLL;
          v58 += 2;
          v59 -= 4;
        }
        while (v59);
        if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_92:
          do
          {
            *(_QWORD *)v56 = 0;
            v56 += 8;
          }
          while (v56 != v54);
        }
        if (v41 != v42)
        {
          v60 = v41 - v42 - 8;
          if (v60 < 0x58)
            goto LABEL_93;
          if ((unint64_t)(v42 - v52) < 0x20)
            goto LABEL_93;
          v61 = (v60 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v63 = &v41[-v62];
          v53 -= v62;
          v64 = &v52[8 * v44 - 16];
          v65 = v41 - 16;
          v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *(_OWORD *)v65;
            *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
            *(_OWORD *)v64 = v67;
            v64 -= 32;
            v65 -= 32;
            v66 -= 4;
          }
          while (v66);
          v41 = v63;
          if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_93:
            do
            {
              v68 = *((_QWORD *)v41 - 1);
              v41 -= 8;
              *((_QWORD *)v53 - 1) = v68;
              v53 -= 8;
            }
            while (v41 != v42);
          }
          v41 = *(char **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 24) = v53;
        *(_QWORD *)(a1 + 32) = v54;
        *(_QWORD *)(a1 + 40) = &v52[v51];
        if (v41)
          operator delete(v41);
        return 0;
      }
      v69 = &v41[8 * v45];
      v70 = 8 * v43 - 8 * v44;
      do
      {
        if (!v41)
          goto LABEL_87;
        *(_QWORD *)v41 = 0;
        v41 += 8;
        v70 -= 8;
      }
      while (v70);
      result = 0;
    }
    *(_QWORD *)(a1 + 32) = v69;
  }
  return result;
}

unint64_t webrtc::PushResampler<short>::Resample(unint64_t result, char *a2, unint64_t a3, char *__dst, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  __int128 *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  _WORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v43;
  char *v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  __int16 *v54;
  char *v55;
  __int16 v56;

  if (*(_DWORD *)(result + 8) == *(_DWORD *)(result + 12))
  {
    memcpy(__dst, a2, 2 * a3);
    return a3;
  }
  v10 = (_QWORD *)result;
  v11 = *(_QWORD *)(result + 16);
  if (!v11)
  {
LABEL_8:
    v16 = a3 / v11;
    if (v11 - 1 < a3)
    {
      v17 = 0;
      v18 = *(_QWORD *)(result + 24);
      v20 = v16 < 0x10 || v11 != 1;
      v21 = (__int128 *)(a2 + 16);
      do
      {
        v22 = *(_QWORD *)(v18 + 8 * v17);
        v23 = (unint64_t)(v22 - (_QWORD)&a2[2 * v17]) < 0x20 || v20;
        if ((v23 & 1) != 0)
        {
          v24 = 0;
          v25 = v17;
        }
        else
        {
          v25 = v17 + (v16 & 0xFFFFFFFFFFFFFFF0) * v11;
          v26 = (_OWORD *)(v22 + 16);
          v27 = v21;
          v28 = v16 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v29 = *v27;
            *(v26 - 1) = *(v27 - 1);
            *v26 = v29;
            v26 += 2;
            v27 += 2;
            v28 -= 16;
          }
          while (v28);
          v24 = v16 & 0xFFFFFFFFFFFFFFF0;
          if (v16 == (v16 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_16;
        }
        v30 = v16 - v24;
        v31 = (_WORD *)(v22 + 2 * v24);
        v32 = &a2[2 * v25];
        do
        {
          *v31++ = *(_WORD *)v32;
          v32 += 2 * v11;
          --v30;
        }
        while (v30);
LABEL_16:
        ++v17;
        v21 = (__int128 *)((char *)v21 + 2);
      }
      while (v17 != v11);
    }
    v33 = v10[6];
    v34 = v10[7];
    if (v33 == v34)
    {
      result = 0;
    }
    else
    {
      v35 = a5 / v11;
      do
      {
        result = webrtc::PushSincResampler::Resample(*(webrtc::PushSincResampler **)v33, *(const __int16 **)(v33 + 8), v16, *(int16x8_t **)(v33 + 32), v35, a6, a7, a8);
        v33 += 56;
      }
      while (v33 != v34);
      v11 = v10[2];
      if (!v11)
      {
LABEL_58:
        result *= v11;
        return result;
      }
    }
    v36 = 0;
    v37 = 32;
    do
    {
      v38 = v10[6];
      if (0x6DB6DB6DB6DB6DB7 * ((v10[7] - v38) >> 3) <= v36)
        goto LABEL_59;
      v39 = v10[3];
      if (v36 >= (v10[4] - v39) >> 3)
        goto LABEL_59;
      *(_QWORD *)(v39 + 8 * v36++) = *(_QWORD *)(v38 + v37);
      v37 += 56;
    }
    while (v11 != v36);
    if (!result)
      goto LABEL_58;
    v40 = 0;
    v41 = v10[3];
    v43 = result < 0x10 || v11 != 1;
    v44 = __dst + 16;
    while (1)
    {
      v45 = *(_QWORD *)(v41 + 8 * v40);
      v46 = (unint64_t)&__dst[2 * v40 - v45] < 0x20 || v43;
      if ((v46 & 1) != 0)
      {
        v47 = 0;
        v48 = v40;
      }
      else
      {
        v48 = v40 + (result & 0xFFFFFFFFFFFFFFF0) * v11;
        v49 = (__int128 *)(v45 + 16);
        v50 = v44;
        v51 = result & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v52 = *v49;
          *(v50 - 1) = *(v49 - 1);
          *v50 = v52;
          v49 += 2;
          v50 += 2;
          v51 -= 16;
        }
        while (v51);
        v47 = result & 0xFFFFFFFFFFFFFFF0;
        if (result == (result & 0xFFFFFFFFFFFFFFF0))
          goto LABEL_46;
      }
      v53 = result - v47;
      v54 = (__int16 *)(v45 + 2 * v47);
      v55 = &__dst[2 * v48];
      do
      {
        v56 = *v54++;
        *(_WORD *)v55 = v56;
        v55 += 2 * v11;
        --v53;
      }
      while (v53);
LABEL_46:
      ++v40;
      v44 += 2;
      if (v40 == v11)
        goto LABEL_58;
    }
  }
  v12 = 0;
  v13 = 8;
  while (1)
  {
    v14 = *(_QWORD *)(result + 48);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(result + 56) - v14) >> 3) <= v12)
      break;
    v15 = *(_QWORD *)(result + 24);
    if (v12 >= (*(_QWORD *)(result + 32) - v15) >> 3)
      break;
    *(_QWORD *)(v15 + 8 * v12++) = *(_QWORD *)(v14 + v13);
    v13 += 56;
    if (v11 == v12)
      goto LABEL_8;
  }
LABEL_59:
  __break(1u);
  return result;
}

_QWORD *webrtc::PushResampler<float>::~PushResampler(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;

  *a1 = &unk_24C0BAE68;
  v2 = a1[6];
  if (v2)
  {
    v3 = a1[7];
    v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v6 = *(void **)(v3 - 48);
        if (v6)
        {
          *(_QWORD *)(v3 - 40) = v6;
          operator delete(v6);
        }
        v7 = *(_QWORD *)(v3 - 56);
        *(_QWORD *)(v3 - 56) = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        v3 -= 56;
      }
      while (v3 != v2);
      v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  v8 = (void *)a1[3];
  if (v8)
  {
    a1[4] = v8;
    operator delete(v8);
  }
  return a1;
}

void webrtc::PushResampler<float>::~PushResampler(_QWORD *a1)
{
  webrtc::PushResampler<float>::~PushResampler(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::PushResampler<float>::InitializeIfNeeded(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  _OWORD *i;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __int128 v28;
  _OWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;

  if (*(_DWORD *)(a1 + 8) == a2 && *(_DWORD *)(a1 + 12) == a3 && *(_QWORD *)(a1 + 16) == a4)
    return 0;
  result = 0xFFFFFFFFLL;
  if (a2 >= 1 && a3 >= 1 && a4)
  {
    *(_DWORD *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 12) = a3;
    *(_QWORD *)(a1 + 16) = a4;
    v7 = a2 / 0x64uLL;
    v8 = a3 / 0x64uLL;
    v9 = *(char **)(a1 + 48);
    for (i = *(_OWORD **)(a1 + 56); i != (_OWORD *)v9; i = (_OWORD *)((char *)i - 56))
    {
      v11 = (void *)*((_QWORD *)i - 3);
      if (v11)
      {
        *((_QWORD *)i - 2) = v11;
        operator delete(v11);
      }
      v12 = (void *)*((_QWORD *)i - 6);
      if (v12)
      {
        *((_QWORD *)i - 5) = v12;
        operator delete(v12);
      }
      v13 = *((_QWORD *)i - 7);
      *((_QWORD *)i - 7) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
    v14 = 0;
    for (*(_QWORD *)(a1 + 56) = v9; ; v9 = *(char **)(a1 + 56))
    {
      v15 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v9 >= v15)
      {
        v17 = *(char **)(a1 + 48);
        v18 = 0x6DB6DB6DB6DB6DB7 * ((v9 - v17) >> 3) + 1;
        if (v18 > 0x492492492492492)
          goto LABEL_88;
        v19 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (_QWORD)v17) >> 3);
        if (2 * v19 > v18)
          v18 = 2 * v19;
        if (v19 >= 0x249249249249249)
          v20 = 0x492492492492492;
        else
          v20 = v18;
        if (!v20)
        {
LABEL_87:
          __break(1u);
LABEL_88:
          abort();
        }
        if (v20 > 0x492492492492492)
          goto LABEL_89;
        v21 = 56 * v20;
        v22 = (char *)operator new(56 * v20);
        v23 = &v22[8 * ((v9 - v17) >> 3)];
        *(_OWORD *)v23 = 0u;
        *((_OWORD *)v23 + 1) = 0u;
        v24 = &v22[v21];
        v16 = v23 + 56;
        *((_OWORD *)v23 + 2) = 0u;
        *((_QWORD *)v23 + 6) = 0;
        if (v9 == v17)
        {
          *(_QWORD *)(a1 + 48) = v23;
          *(_QWORD *)(a1 + 56) = v16;
          *(_QWORD *)(a1 + 64) = v24;
        }
        else
        {
          v25 = 0;
          do
          {
            v26 = &v23[v25];
            v27 = &v9[v25];
            v28 = *(_OWORD *)&v9[v25 - 56];
            *((_QWORD *)v27 - 7) = 0;
            *(_OWORD *)(v26 - 56) = v28;
            *((_QWORD *)v26 - 5) = *(_QWORD *)&v9[v25 - 40];
            *((_QWORD *)v26 - 4) = *(_QWORD *)&v9[v25 - 32];
            *((_QWORD *)v27 - 6) = 0;
            *((_QWORD *)v27 - 5) = 0;
            *((_QWORD *)v27 - 4) = 0;
            *(_OWORD *)(v26 - 24) = *(_OWORD *)&v9[v25 - 24];
            *((_QWORD *)v26 - 1) = *(_QWORD *)&v9[v25 - 8];
            *((_QWORD *)v27 - 3) = 0;
            *((_QWORD *)v27 - 2) = 0;
            *((_QWORD *)v27 - 1) = 0;
            v25 -= 56;
          }
          while (&v9[v25] != v17);
          v9 = *(char **)(a1 + 48);
          v29 = *(_OWORD **)(a1 + 56);
          *(_QWORD *)(a1 + 48) = &v23[v25];
          *(_QWORD *)(a1 + 56) = v16;
          *(_QWORD *)(a1 + 64) = v24;
          while (v29 != (_OWORD *)v9)
          {
            v30 = (void *)*((_QWORD *)v29 - 3);
            if (v30)
            {
              *((_QWORD *)v29 - 2) = v30;
              operator delete(v30);
            }
            v31 = (void *)*((_QWORD *)v29 - 6);
            if (v31)
            {
              *((_QWORD *)v29 - 5) = v31;
              operator delete(v31);
            }
            v32 = *((_QWORD *)v29 - 7);
            *((_QWORD *)v29 - 7) = 0;
            if (v32)
              (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
            v29 = (_OWORD *)((char *)v29 - 56);
          }
        }
        if (v9)
          operator delete(v9);
      }
      else
      {
        if (!v9)
          goto LABEL_87;
        v16 = v9 + 56;
        *((_QWORD *)v9 + 6) = 0;
        *((_OWORD *)v9 + 1) = 0u;
        *((_OWORD *)v9 + 2) = 0u;
        *(_OWORD *)v9 = 0u;
      }
      *(_QWORD *)(a1 + 56) = v16;
      v33 = operator new();
      *(_QWORD *)v33 = &off_24C0BAE88;
      v34 = operator new();
      webrtc::SincResampler::SincResampler(v34, v7, v33, (double)v7 / (double)v8);
      *(_QWORD *)(v33 + 8) = v35;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 32) = 0;
      *(_QWORD *)(v33 + 40) = v8;
      *(_BYTE *)(v33 + 48) = 1;
      *(_QWORD *)(v33 + 56) = 0;
      v36 = *((_QWORD *)v16 - 7);
      *((_QWORD *)v16 - 7) = v33;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      v37 = *((_QWORD *)v16 - 6);
      v38 = (*((_QWORD *)v16 - 5) - v37) >> 2;
      if (v7 <= v38)
      {
        if (v7 < v38)
          *((_QWORD *)v16 - 5) = v37 + 4 * v7;
      }
      else
      {
        std::vector<float>::__append((uint64_t)(v16 - 48), v7 - v38);
      }
      v39 = *((_QWORD *)v16 - 3);
      v40 = (*((_QWORD *)v16 - 2) - v39) >> 2;
      if (v8 <= v40)
      {
        if (v8 < v40)
          *((_QWORD *)v16 - 2) = v39 + 4 * v8;
      }
      else
      {
        std::vector<float>::__append((uint64_t)(v16 - 24), v8 - v40);
      }
      if (++v14 == a4)
        break;
    }
    v42 = *(char **)(a1 + 24);
    v41 = *(char **)(a1 + 32);
    v43 = *(_QWORD *)(a1 + 16);
    v44 = (v41 - v42) >> 3;
    v45 = v43 - v44;
    if (v43 <= v44)
    {
      result = 0;
      if (v43 >= v44)
        return result;
      v69 = &v42[8 * v43];
    }
    else
    {
      v46 = *(_QWORD *)(a1 + 40);
      if (v45 > (v46 - (uint64_t)v41) >> 3)
      {
        if (v43 >> 61)
          goto LABEL_88;
        v47 = v46 - (_QWORD)v42;
        v48 = (v46 - (uint64_t)v42) >> 2;
        if (v48 <= v43)
          v48 = *(_QWORD *)(a1 + 16);
        v49 = v47 >= 0x7FFFFFFFFFFFFFF8;
        v50 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v49)
          v50 = v48;
        if (v50 >> 61)
LABEL_89:
          std::__throw_bad_array_new_length[abi:sn180100]();
        v51 = 8 * v50;
        v52 = (char *)operator new(8 * v50);
        v53 = &v52[8 * v44];
        v54 = &v52[8 * v43];
        v55 = 8 * v43 - (v41 - v42) - 8;
        v56 = v53;
        if (v55 < 0x18)
          goto LABEL_92;
        v57 = (v55 >> 3) + 1;
        v56 = &v53[8 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
        v58 = v53 + 16;
        v59 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          *(v58 - 1) = 0uLL;
          *v58 = 0uLL;
          v58 += 2;
          v59 -= 4;
        }
        while (v59);
        if (v57 != (v57 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_92:
          do
          {
            *(_QWORD *)v56 = 0;
            v56 += 8;
          }
          while (v56 != v54);
        }
        if (v41 != v42)
        {
          v60 = v41 - v42 - 8;
          if (v60 < 0x58)
            goto LABEL_93;
          if ((unint64_t)(v42 - v52) < 0x20)
            goto LABEL_93;
          v61 = (v60 >> 3) + 1;
          v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
          v63 = &v41[-v62];
          v53 -= v62;
          v64 = &v52[8 * v44 - 16];
          v65 = v41 - 16;
          v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v67 = *(_OWORD *)v65;
            *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
            *(_OWORD *)v64 = v67;
            v64 -= 32;
            v65 -= 32;
            v66 -= 4;
          }
          while (v66);
          v41 = v63;
          if (v61 != (v61 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_93:
            do
            {
              v68 = *((_QWORD *)v41 - 1);
              v41 -= 8;
              *((_QWORD *)v53 - 1) = v68;
              v53 -= 8;
            }
            while (v41 != v42);
          }
          v41 = *(char **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 24) = v53;
        *(_QWORD *)(a1 + 32) = v54;
        *(_QWORD *)(a1 + 40) = &v52[v51];
        if (v41)
          operator delete(v41);
        return 0;
      }
      v69 = &v41[8 * v45];
      v70 = 8 * v43 - 8 * v44;
      do
      {
        if (!v41)
          goto LABEL_87;
        *(_QWORD *)v41 = 0;
        v41 += 8;
        v70 -= 8;
      }
      while (v70);
      result = 0;
    }
    *(_QWORD *)(a1 + 32) = v69;
  }
  return result;
}

unint64_t webrtc::PushResampler<float>::Resample(unint64_t result, char *a2, unint64_t a3, char *__dst, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v20;
  __int128 *v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 *v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  _DWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v43;
  char *v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  __int128 *v49;
  _OWORD *v50;
  unint64_t v51;
  __int128 v52;
  unint64_t v53;
  int *v54;
  char *v55;
  int v56;

  if (*(_DWORD *)(result + 8) == *(_DWORD *)(result + 12))
  {
    memcpy(__dst, a2, 4 * a3);
    return a3;
  }
  v10 = (_QWORD *)result;
  v11 = *(_QWORD *)(result + 16);
  if (!v11)
  {
LABEL_8:
    v16 = a3 / v11;
    if (v11 - 1 < a3)
    {
      v17 = 0;
      v18 = *(_QWORD *)(result + 24);
      v20 = v16 < 8 || v11 != 1;
      v21 = (__int128 *)(a2 + 16);
      do
      {
        v22 = *(_QWORD *)(v18 + 8 * v17);
        v23 = (unint64_t)(v22 - (_QWORD)&a2[4 * v17]) < 0x20 || v20;
        if ((v23 & 1) != 0)
        {
          v24 = 0;
          v25 = v17;
        }
        else
        {
          v25 = v17 + (v16 & 0xFFFFFFFFFFFFFFF8) * v11;
          v26 = (_OWORD *)(v22 + 16);
          v27 = v21;
          v28 = v16 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v29 = *v27;
            *(v26 - 1) = *(v27 - 1);
            *v26 = v29;
            v26 += 2;
            v27 += 2;
            v28 -= 8;
          }
          while (v28);
          v24 = v16 & 0xFFFFFFFFFFFFFFF8;
          if (v16 == (v16 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_16;
        }
        v30 = v16 - v24;
        v31 = (_DWORD *)(v22 + 4 * v24);
        v32 = &a2[4 * v25];
        do
        {
          *v31++ = *(_DWORD *)v32;
          v32 += 4 * v11;
          --v30;
        }
        while (v30);
LABEL_16:
        ++v17;
        v21 = (__int128 *)((char *)v21 + 4);
      }
      while (v17 != v11);
    }
    v33 = v10[6];
    v34 = v10[7];
    if (v33 == v34)
    {
      result = 0;
    }
    else
    {
      v35 = a5 / v11;
      do
      {
        result = webrtc::PushSincResampler::Resample(*(webrtc::PushSincResampler **)v33, *(const float **)(v33 + 8), v16, *(float **)(v33 + 32), v35, a6, a7, a8);
        v33 += 56;
      }
      while (v33 != v34);
      v11 = v10[2];
      if (!v11)
      {
LABEL_58:
        result *= v11;
        return result;
      }
    }
    v36 = 0;
    v37 = 32;
    do
    {
      v38 = v10[6];
      if (0x6DB6DB6DB6DB6DB7 * ((v10[7] - v38) >> 3) <= v36)
        goto LABEL_59;
      v39 = v10[3];
      if (v36 >= (v10[4] - v39) >> 3)
        goto LABEL_59;
      *(_QWORD *)(v39 + 8 * v36++) = *(_QWORD *)(v38 + v37);
      v37 += 56;
    }
    while (v11 != v36);
    if (!result)
      goto LABEL_58;
    v40 = 0;
    v41 = v10[3];
    v43 = result < 8 || v11 != 1;
    v44 = __dst + 16;
    while (1)
    {
      v45 = *(_QWORD *)(v41 + 8 * v40);
      v46 = (unint64_t)&__dst[4 * v40 - v45] < 0x20 || v43;
      if ((v46 & 1) != 0)
      {
        v47 = 0;
        v48 = v40;
      }
      else
      {
        v48 = v40 + (result & 0xFFFFFFFFFFFFFFF8) * v11;
        v49 = (__int128 *)(v45 + 16);
        v50 = v44;
        v51 = result & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v52 = *v49;
          *(v50 - 1) = *(v49 - 1);
          *v50 = v52;
          v49 += 2;
          v50 += 2;
          v51 -= 8;
        }
        while (v51);
        v47 = result & 0xFFFFFFFFFFFFFFF8;
        if (result == (result & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_46;
      }
      v53 = result - v47;
      v54 = (int *)(v45 + 4 * v47);
      v55 = &__dst[4 * v48];
      do
      {
        v56 = *v54++;
        *(_DWORD *)v55 = v56;
        v55 += 4 * v11;
        --v53;
      }
      while (v53);
LABEL_46:
      ++v40;
      v44 += 4;
      if (v40 == v11)
        goto LABEL_58;
    }
  }
  v12 = 0;
  v13 = 8;
  while (1)
  {
    v14 = *(_QWORD *)(result + 48);
    if (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(result + 56) - v14) >> 3) <= v12)
      break;
    v15 = *(_QWORD *)(result + 24);
    if (v12 >= (*(_QWORD *)(result + 32) - v15) >> 3)
      break;
    *(_QWORD *)(v15 + 8 * v12++) = *(_QWORD *)(v14 + v13);
    v13 += 56;
    if (v11 == v12)
      goto LABEL_8;
  }
LABEL_59:
  __break(1u);
  return result;
}

void webrtc::PushSincResampler::~PushSincResampler(webrtc::PushSincResampler *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0BAE88;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0BAE88;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD0ADECLL);
}

unint64_t webrtc::PushSincResampler::Resample(webrtc::PushSincResampler *this, const __int16 *a2, uint64_t a3, int16x8_t *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float *v12;
  uint64_t v13;
  float32x4_t v14;
  int8x16_t v15;
  unint64_t result;
  uint64_t v17;
  unint64_t v18;
  float32x4_t v19;
  int8x16_t v20;
  unint64_t v21;
  int16x8_t *v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  __int16 *v31;
  int8x16_t v32;
  float *v33;
  float v34;

  v12 = (float *)*((_QWORD *)this + 2);
  if (!v12)
  {
    v12 = (float *)operator new[]();
    v13 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = v12;
    if (v13)
    {
      MEMORY[0x20BD0ADD4](v13, 0x1000C8052888210);
      v12 = (float *)*((_QWORD *)this + 2);
    }
  }
  *((_QWORD *)this + 4) = a2;
  webrtc::PushSincResampler::Resample(this, 0, a3, v12, *((_QWORD *)this + 5), a6, a7, a8);
  result = *((_QWORD *)this + 5);
  if (result)
  {
    v17 = *((_QWORD *)this + 2);
    if (result >= 8)
    {
      v18 = result & 0xFFFFFFFFFFFFFFF8;
      v19 = (float32x4_t)vdupq_n_s32(0x46FFFE00u);
      v14.i64[0] = 0xC7000000C7000000;
      v14.i64[1] = 0xC7000000C7000000;
      v20.i64[0] = 0x3F0000003F000000;
      v20.i64[1] = 0x3F0000003F000000;
      v15.i64[0] = 0x8000000080000000;
      v15.i64[1] = 0x8000000080000000;
      v21 = result & 0xFFFFFFFFFFFFFFF8;
      v22 = a4;
      v23 = (float32x4_t *)*((_QWORD *)this + 2);
      do
      {
        v24 = *v23;
        v25 = v23[1];
        v23 += 2;
        v26 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v24, v19), (int8x16_t)v19, (int8x16_t)v24);
        v27 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, v19), (int8x16_t)v19, (int8x16_t)v25);
        v28 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, v26), (int8x16_t)v14, (int8x16_t)v26);
        v29 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v14, v27), (int8x16_t)v14, (int8x16_t)v27);
        *v22++ = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vaddq_f32(v28, (float32x4_t)vbslq_s8(v15, v20, (int8x16_t)v28))), (int16x8_t)vcvtq_s32_f32(vaddq_f32(v29, (float32x4_t)vbslq_s8(v15, v20, (int8x16_t)v29))));
        v21 -= 8;
      }
      while (v21);
      if (result == v18)
        goto LABEL_16;
    }
    else
    {
      v18 = 0;
    }
    v30 = result - v18;
    v31 = &a4->i16[v18];
    v14.i32[0] = 0.5;
    v32.i64[0] = 0x8000000080000000;
    v32.i64[1] = 0x8000000080000000;
    v33 = (float *)(v17 + 4 * v18);
    do
    {
      v34 = *v33++;
      *(float *)v15.i32 = v34;
      if (v34 > 32767.0)
        *(float *)v15.i32 = 32767.0;
      if (*(float *)v15.i32 < -32768.0)
        *(float *)v15.i32 = -32768.0;
      *v31++ = (int)(float)(*(float *)v15.i32 + *(float *)vbslq_s8(v32, (int8x16_t)v14, v15).i32);
      --v30;
    }
    while (v30);
  }
LABEL_16:
  *((_QWORD *)this + 4) = 0;
  return result;
}

uint64_t webrtc::PushSincResampler::Resample(webrtc::PushSincResampler *this, const float *a2, uint64_t a3, float *a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unint64_t v11;
  std::string *v14;
  unint64_t v15;
  float *v16;

  v9 = *((_QWORD *)this + 1);
  if (*(_QWORD *)(v9 + 40) != a3)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/resampler/push_sinc_resampler.cc", 52, "source_length == resampler_->request_frames()", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a3);
    goto LABEL_7;
  }
  v11 = *((_QWORD *)this + 5);
  if (v11 > a5)
  {
LABEL_7:
    v14 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/resampler/push_sinc_resampler.cc", 53, "destination_capacity >= destination_frames_", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a5, a6, a7, a8, a5);
    return webrtc::PushSincResampler::Run((webrtc::PushSincResampler *)v14, v15, v16);
  }
  *((_QWORD *)this + 3) = a2;
  *((_QWORD *)this + 7) = a3;
  if (*((_BYTE *)this + 48))
  {
    webrtc::SincResampler::Resample((webrtc::SincResampler *)v9, (unint64_t)((double)*(unint64_t *)(v9 + 48) / *(double *)(v9 + 8)), a4);
    v9 = *((_QWORD *)this + 1);
    v11 = *((_QWORD *)this + 5);
  }
  webrtc::SincResampler::Resample((webrtc::SincResampler *)v9, v11, a4);
  *((_QWORD *)this + 3) = 0;
  return *((_QWORD *)this + 5);
}

void webrtc::PushSincResampler::Run(webrtc::PushSincResampler *this, unint64_t a2, float *__dst, __n128 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v11;
  uint64_t v12;
  int16x4_t *v13;
  unint64_t v14;
  int16x4_t *v15;
  float *v16;
  unint64_t v17;
  int16x8_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int v21;
  int v22;
  int v23;
  webrtc::vp9 *v24;
  unsigned __int8 *v25;

  if (*((_QWORD *)this + 7) == a2)
  {
    if (*((_BYTE *)this + 48))
    {
      bzero(__dst, 4 * a2);
      *((_BYTE *)this + 48) = 0;
      return;
    }
    v11 = (const void *)*((_QWORD *)this + 3);
    if (v11)
    {
      memcpy(__dst, v11, 4 * a2);
      v12 = *((_QWORD *)this + 7);
LABEL_6:
      *((_QWORD *)this + 7) = v12 - a2;
      return;
    }
    if (a2)
    {
      v13 = (int16x4_t *)*((_QWORD *)this + 4);
      if (a2 >= 0x10)
      {
        v14 = a2 & 0xFFFFFFFFFFFFFFF0;
        v15 = v13 + 2;
        v16 = __dst + 8;
        v17 = a2 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v18 = *(int16x8_t *)v15[-2].i8;
          v19 = vcvtq_f32_s32(vmovl_s16(*v15));
          v20 = vmovl_high_s16(*(int16x8_t *)v15->i8);
          *((float32x4_t *)v16 - 2) = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v18.i8));
          *((float32x4_t *)v16 - 1) = vcvtq_f32_s32(vmovl_high_s16(v18));
          a4 = (__n128)vcvtq_f32_s32(v20);
          *(float32x4_t *)v16 = v19;
          *((__n128 *)v16 + 1) = a4;
          v16 += 16;
          v15 += 4;
          v17 -= 16;
        }
        while (v17);
        v12 = a2;
        if (v14 == a2)
          goto LABEL_6;
      }
      else
      {
        v14 = 0;
      }
      do
      {
        a4.n128_u16[0] = v13->u16[v14];
        a4.n128_u64[0] = vmovl_s16((int16x4_t)a4.n128_u64[0]).u64[0];
        a4.n128_f32[0] = (float)a4.n128_i32[0];
        __dst[v14++] = a4.n128_f32[0];
      }
      while (a2 != v14);
      *((_QWORD *)this + 7) = 0;
    }
    else
    {
      *((_QWORD *)this + 7) = 0;
    }
  }
  else
  {
    v21 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/resampler/push_sinc_resampler.cc", 83, "source_available_ == frames", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, a6, a7, a8, a9, *((_QWORD *)this + 7));
    webrtc::QpParser::Parse(v21, v22, v23, v24, v25);
  }
}

uint64_t webrtc::QpParser::Parse(uint64_t a1, int a2, unint64_t a3, webrtc::vp9 *this, unsigned __int8 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v12;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  pthread_mutex_t *v28;
  webrtc::H265BitstreamParser *v29;
  char *v30;
  char *v31;
  uint64_t LastSliceQp;
  char *v33;
  char *v34;

  v8 = 0;
  v9 = 0;
  if (a3 <= 2 && this)
  {
    LOBYTE(v12) = 0;
    if (a5)
    {
      v8 = 0;
      v9 = 0;
      LOBYTE(v12) = 0;
      switch(a2)
      {
        case 1:
          LODWORD(v33) = -1;
          if ((webrtc::vp8::GetQp(this, a5, (int *)&v33, (int *)this) & 1) != 0)
            goto LABEL_6;
          goto LABEL_10;
        case 2:
          LODWORD(v33) = -1;
          if ((webrtc::vp9::GetQp(this, (unint64_t)a5, &v33, (int *)this, (uint64_t)a5, a6, a7, a8) & 1) != 0)
          {
LABEL_6:
            LOBYTE(v12) = (_BYTE)v33;
            v9 = v33 & 0xFFFFFF00;
            v8 = 0x100000000;
          }
          else
          {
LABEL_10:
            v9 = 0;
            LOBYTE(v12) = 0;
            v8 = 0;
          }
          return v8 | v12 | v9;
        case 3:
          return v8 | v12 | v9;
        case 4:
          pthread_mutex_lock((pthread_mutex_t *)(a1 + 168 * a3));
          webrtc::H264::FindNaluIndices(this, a5, &v33);
          v16 = v33;
          v17 = v34;
          if (v33 != v34)
          {
            do
            {
              webrtc::H264BitstreamParser::ParseSlice((webrtc::H264BitstreamParser *)(a1 + 168 * a3 + 64), (unsigned __int8 *)this + *((_QWORD *)v16 + 1), *((_QWORD *)v16 + 2));
              v16 += 24;
            }
            while (v16 != v17);
            v16 = v33;
          }
          if (v16)
          {
            v34 = v16;
            operator delete(v16);
          }
          v18 = a1 + 168 * a3;
          if (!*(_BYTE *)(v18 + 160) || !*(_BYTE *)(a1 + 168 * a3 + 152))
            goto LABEL_21;
          v19 = (*(_DWORD *)(a1 + 168 * a3 + 140) + *(_DWORD *)(v18 + 156) + 26);
          if (v19 < 0x34)
          {
            v12 = v19 | 0x100000000;
          }
          else
          {
            if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
              rtc::webrtc_logging_impl::Log("\r\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_video/h264/h264_bitstream_parser.cc");
LABEL_21:
            v12 = 0;
          }
          pthread_mutex_unlock((pthread_mutex_t *)(a1 + 168 * a3));
          v9 = v12 & 0xFFFFFF00;
          v8 = v12 & 0x100000000;
          break;
        case 5:
          v27 = a1 + 160 * a3;
          v28 = (pthread_mutex_t *)(v27 + 504);
          pthread_mutex_lock((pthread_mutex_t *)(v27 + 504));
          v29 = (webrtc::H265BitstreamParser *)(v27 + 568);
          webrtc::H265::FindNaluIndices(this, a5, &v33);
          v30 = v33;
          v31 = v34;
          if (v33 != v34)
          {
            do
            {
              webrtc::H265BitstreamParser::ParseSlice(v29, (webrtc::vp9 *)((char *)this + *((_QWORD *)v30 + 1)), *((_QWORD *)v30 + 2));
              v30 += 24;
            }
            while (v30 != v31);
            v30 = v33;
          }
          if (v30)
          {
            v34 = v30;
            operator delete(v30);
          }
          LastSliceQp = webrtc::H265BitstreamParser::GetLastSliceQp(v29);
          pthread_mutex_unlock(v28);
          if ((LastSliceQp & 0xFF00000000) != 0)
            v12 = LastSliceQp | 0x100000000;
          else
            v12 = 0;
          v9 = v12 & 0xFFFFFF00;
          v8 = v12 & 0x100000000;
          return v8 | v12 | v9;
        default:
          goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    LOBYTE(v12) = 0;
  }
  return v8 | v12 | v9;
}

uint64_t webrtc::QualityLimitationReasonTracker::QualityLimitationReasonTracker(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t *v7;
  uint64_t *v8;
  _OWORD *v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _OWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  _OWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  _OWORD *v27;
  uint64_t *v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t *v32;
  uint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v4 = v3 / 0x3E8uLL;
  *(_QWORD *)(a1 + 32) = 0;
  if (v3 % 0x3E8uLL > 0x1F3)
    ++v4;
  if (-v3 % 0x3E8uLL <= 0x1F4)
    v5 = 0;
  else
    v5 = -1;
  if (v3 < 0)
    v4 = v5 - -v3 / 0x3E8uLL;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  v6 = (_QWORD **)(a1 + 24);
  LODWORD(v34) = 0;
  *((_QWORD *)&v34 + 1) = 0;
  LODWORD(v35) = 1;
  *((_QWORD *)&v35 + 1) = 0;
  LODWORD(v36) = 2;
  *((_QWORD *)&v36 + 1) = 0;
  LODWORD(v37) = 3;
  *((_QWORD *)&v37 + 1) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__find_equal<int>((_QWORD *)(a1 + 24), (uint64_t *)(a1 + 32), &v33, &v32, (int *)&v34);
  if (!*v7)
  {
    v8 = v7;
    v9 = operator new(0x30uLL);
    v9[2] = v34;
    v10 = v33;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v10;
    *v8 = (uint64_t)v9;
    v11 = (_QWORD *)**v6;
    if (v11)
    {
      *v6 = v11;
      v12 = (uint64_t *)*v8;
    }
    else
    {
      v12 = (uint64_t *)v9;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v12);
    ++*(_QWORD *)(a1 + 40);
  }
  v13 = std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__find_equal<int>((_QWORD *)(a1 + 24), (uint64_t *)(a1 + 32), &v33, &v32, (int *)&v35);
  if (!*v13)
  {
    v14 = v13;
    v15 = operator new(0x30uLL);
    v15[2] = v35;
    v16 = v33;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v16;
    *v14 = (uint64_t)v15;
    v17 = (_QWORD *)**v6;
    if (v17)
    {
      *v6 = v17;
      v18 = (uint64_t *)*v14;
    }
    else
    {
      v18 = (uint64_t *)v15;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v18);
    ++*(_QWORD *)(a1 + 40);
  }
  v19 = std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__find_equal<int>((_QWORD *)(a1 + 24), (uint64_t *)(a1 + 32), &v33, &v32, (int *)&v36);
  if (!*v19)
  {
    v20 = v19;
    v21 = operator new(0x30uLL);
    v21[2] = v36;
    v22 = v33;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = v22;
    *v20 = (uint64_t)v21;
    v23 = (_QWORD *)**v6;
    if (v23)
    {
      *v6 = v23;
      v24 = (uint64_t *)*v20;
    }
    else
    {
      v24 = (uint64_t *)v21;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v24);
    ++*(_QWORD *)(a1 + 40);
  }
  v25 = std::__tree<std::__value_type<int,webrtc::SdpAudioFormat>,std::__map_value_compare<int,std::__value_type<int,webrtc::SdpAudioFormat>,std::less<int>,true>,std::allocator<std::__value_type<int,webrtc::SdpAudioFormat>>>::__find_equal<int>((_QWORD *)(a1 + 24), (uint64_t *)(a1 + 32), &v33, &v32, (int *)&v37);
  if (!*v25)
  {
    v26 = v25;
    v27 = operator new(0x30uLL);
    v27[2] = v37;
    v28 = v33;
    *(_QWORD *)v27 = 0;
    *((_QWORD *)v27 + 1) = 0;
    *((_QWORD *)v27 + 2) = v28;
    *v26 = (uint64_t)v27;
    v29 = (_QWORD *)**v6;
    if (v29)
    {
      *v6 = v29;
      v30 = (uint64_t *)*v26;
    }
    else
    {
      v30 = (uint64_t *)v27;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v30);
    ++*(_QWORD *)(a1 + 40);
  }
  return a1;
}

uint64_t webrtc::QualityLimitationReasonTracker::SetReason(uint64_t result, int a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  int v10;
  uint64_t **v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;

  if (*(_DWORD *)(result + 8) != a2)
  {
    v3 = result;
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)result + 16))(*(_QWORD *)result);
    v4 = result / 0x3E8uLL;
    if (result % 0x3E8uLL > 0x1F3)
      ++v4;
    if (-result % 0x3E8uLL <= 0x1F4)
      v5 = 0;
    else
      v5 = -1;
    if (result < 0)
      v6 = v5 - -result / 0x3E8uLL;
    else
      v6 = v4;
    v8 = (uint64_t **)(v3 + 32);
    v7 = *(uint64_t **)(v3 + 32);
    v9 = v6 - *(_QWORD *)(v3 + 16);
    v10 = *(_DWORD *)(v3 + 8);
    if (v7)
    {
      while (1)
      {
        while (1)
        {
          v11 = (uint64_t **)v7;
          v12 = *((_DWORD *)v7 + 8);
          if (v10 >= v12)
            break;
          v7 = *v11;
          v8 = v11;
          if (!*v11)
            goto LABEL_17;
        }
        if (v12 >= v10)
          break;
        v7 = v11[1];
        if (!v7)
        {
          v8 = v11 + 1;
          goto LABEL_17;
        }
      }
    }
    else
    {
      v11 = (uint64_t **)(v3 + 32);
LABEL_17:
      v13 = (uint64_t *)v11;
      v11 = (uint64_t **)operator new(0x30uLL);
      *((_DWORD *)v11 + 8) = v10;
      v11[5] = 0;
      *v11 = 0;
      v11[1] = 0;
      v11[2] = v13;
      *v8 = (uint64_t *)v11;
      v14 = **(_QWORD **)(v3 + 24);
      v15 = (uint64_t *)v11;
      if (v14)
      {
        *(_QWORD *)(v3 + 24) = v14;
        v15 = *v8;
      }
      result = (uint64_t)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v3 + 32), v15);
      ++*(_QWORD *)(v3 + 40);
    }
    v11[5] = (uint64_t *)((char *)v11[5] + v9);
    *(_DWORD *)(v3 + 8) = a2;
    *(_QWORD *)(v3 + 16) = v6;
  }
  return result;
}

uint64_t webrtc::QualityScaler::QualityScaler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  int *v34;
  unint64_t v35;
  char v36;
  int v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  int v99;
  char v100;
  char v101;
  uint64_t v102;
  void (**v103)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v104;
  void *v105;
  void *v106;
  char v107;
  uint64_t v108;
  void (**v109)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v110;
  void *v111;
  void *v112;
  char v113;
  uint64_t v114;
  void (**v115)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v116;
  void *v117;
  void *v118;
  char v119;
  double v120;
  unsigned __int8 v121;
  void (**v122)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v123;
  void *v124;
  void *v125;
  char v126;
  double v127;
  uint64_t v128;
  void (**v129)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v130;
  void *v131;
  void *v132;
  char v133;
  void (**v134)(webrtc::FieldTrialParameterInterface *__hidden);
  void *v135;
  void *v136;
  void *__p;
  char v138;

  *(_QWORD *)a1 = &off_24C0BAEB0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a3;
  webrtc::QualityScalerSettings::QualityScalerSettings((uint64_t)&v95, a4);
  if (BYTE4(v102))
    v8 = (int)v102 <= 0;
  else
    v8 = 0;
  if (v8)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaler_settings.cc");
    v9 = 0;
  }
  else
  {
    v9 = v102;
  }
  if ((v9 & 0xFF00000000) != 0)
    a5 = v9;
  v134 = off_24C0B4170;
  if (v138 < 0)
    operator delete(__p);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  v129 = off_24C0B4170;
  if (v133 < 0)
    operator delete(v132);
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v122 = off_24C0B4170;
  if (v126 < 0)
    operator delete(v125);
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  v115 = off_24C0B4170;
  if (v119 < 0)
    operator delete(v118);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  v109 = off_24C0B4170;
  if (v113 < 0)
    operator delete(v112);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  v103 = off_24C0B4170;
  if (v107 < 0)
    operator delete(v106);
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  v95 = off_24C0B4170;
  if (v101 < 0)
    operator delete(v98);
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  *(_QWORD *)(a1 + 32) = a5;
  *(_BYTE *)(a1 + 40) = 1;
  webrtc::QualityScalerSettings::QualityScalerSettings((uint64_t)&v95, a4);
  if (BYTE4(v108) && (int)v108 <= 0)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaler_settings.cc");
    v24 = 0;
  }
  else
  {
    v24 = v108;
  }
  v25 = (int)v24;
  _ZF = (v24 & 0xFF00000000) == 0;
  v26 = 150;
  if (!_ZF)
    v26 = v25;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  if (v26)
  {
    if (v26 >> 62)
      goto LABEL_219;
    v27 = 4 * v26;
    v28 = (char *)operator new(4 * v26);
    *(_QWORD *)(a1 + 64) = v28;
    v29 = &v28[v27];
    *(_QWORD *)(a1 + 80) = &v28[v27];
    bzero(v28, v27);
    *(_QWORD *)(a1 + 72) = v29;
  }
  v134 = off_24C0B4170;
  if (v138 < 0)
    operator delete(__p);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  v129 = off_24C0B4170;
  if (v133 < 0)
    operator delete(v132);
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v122 = off_24C0B4170;
  if (v126 < 0)
    operator delete(v125);
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  v115 = off_24C0B4170;
  if (v119 < 0)
    operator delete(v118);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  v109 = off_24C0B4170;
  if (v113 < 0)
    operator delete(v112);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  v103 = off_24C0B4170;
  if (v107 < 0)
    operator delete(v106);
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  v95 = off_24C0B4170;
  if (v101 < 0)
    operator delete(v98);
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v30 = (char *)operator new(0x258uLL);
  *(_QWORD *)(a1 + 104) = v30;
  v31 = v30 + 600;
  *(_QWORD *)(a1 + 120) = v30 + 600;
  bzero(v30, 0x258uLL);
  *(_QWORD *)(a1 + 112) = v31;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  v32 = (char *)operator new(0x258uLL);
  *(_QWORD *)(a1 + 144) = v32;
  v33 = v32 + 600;
  *(_QWORD *)(a1 + 160) = v32 + 600;
  bzero(v32, 0x258uLL);
  *(_QWORD *)(a1 + 152) = v33;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a4 + 16))(&v95, a4, "WebRTC-Video-QualityScaling", 27);
  if ((SHIBYTE(v97) & 0x80000000) == 0)
  {
    v34 = (int *)&v95;
    v35 = HIBYTE(v97);
    goto LABEL_83;
  }
  v35 = (unint64_t)v96;
  if (((unint64_t)v96 & 0x8000000000000000) != 0 || (v34 = (int *)v95, v96) && !v95)
  {
    __break(1u);
LABEL_219:
    abort();
  }
LABEL_83:
  if (v35 >= 7)
  {
    v37 = *v34;
    v38 = *(int *)((char *)v34 + 3);
    _ZF = v37 == *(_DWORD *)"Enabled" && v38 == *(_DWORD *)"bled";
    v36 = _ZF;
    if ((HIBYTE(v97) & 0x80) != 0)
      goto LABEL_93;
  }
  else
  {
    v36 = 0;
    if ((HIBYTE(v97) & 0x80) != 0)
LABEL_93:
      operator delete(v95);
  }
  *(_BYTE *)(a1 + 168) = v36;
  *(_QWORD *)(a1 + 172) = 0x3F7FF9723F7FDF3BLL;
  *(_BYTE *)(a1 + 180) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  webrtc::QualityScalerSettings::QualityScalerSettings((uint64_t)&v95, a4);
  if (BYTE4(v114) && (int)v114 <= 9)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v40, v41, v42, v43, v44, v45, v46, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaler_settings.cc");
    v47 = 0;
  }
  else
  {
    v47 = v114;
  }
  if ((v47 & 0xFF00000000) != 0)
    v48 = (int)v47;
  else
    v48 = 60;
  v134 = off_24C0B4170;
  if (v138 < 0)
    operator delete(__p);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  v129 = off_24C0B4170;
  if (v133 < 0)
    operator delete(v132);
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v122 = off_24C0B4170;
  if (v126 < 0)
    operator delete(v125);
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  v115 = off_24C0B4170;
  if (v119 < 0)
    operator delete(v118);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  v109 = off_24C0B4170;
  if (v113 < 0)
    operator delete(v112);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  v103 = off_24C0B4170;
  if (v107 < 0)
    operator delete(v106);
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  v95 = off_24C0B4170;
  if (v101 < 0)
    operator delete(v98);
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  *(_QWORD *)(a1 + 200) = v48;
  webrtc::QualityScalerSettings::QualityScalerSettings((uint64_t)&v95, a4);
  v49 = v120;
  if (v121 && v120 < 0.01)
  {
    v49 = 0.0;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v50, v51, v52, v53, v54, v55, v56, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaler_settings.cc");
    v57 = 0;
  }
  else
  {
    v57 = v121;
  }
  if (!v57)
    v49 = 2.5;
  v134 = off_24C0B4170;
  if (v138 < 0)
    operator delete(__p);
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  v129 = off_24C0B4170;
  if (v133 < 0)
    operator delete(v132);
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v122 = off_24C0B4170;
  if (v126 < 0)
    operator delete(v125);
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  v115 = off_24C0B4170;
  if (v119 < 0)
    operator delete(v118);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  v109 = off_24C0B4170;
  if (v113 < 0)
    operator delete(v112);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  v103 = off_24C0B4170;
  if (v107 < 0)
    operator delete(v106);
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  v95 = off_24C0B4170;
  if (v101 < 0)
    operator delete(v98);
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  *(double *)(a1 + 208) = v49;
  webrtc::QualityScalerSettings::QualityScalerSettings((uint64_t)&v95, a4);
  if (!(_BYTE)v128)
  {
    v65 = v128;
    *(double *)(a1 + 216) = v127;
    *(_QWORD *)(a1 + 224) = v65;
    v134 = off_24C0B4170;
    if ((v138 & 0x80000000) == 0)
      goto LABEL_175;
    goto LABEL_174;
  }
  if (v127 >= 0.01)
  {
    v76 = v128;
    *(double *)(a1 + 216) = v127;
    *(_QWORD *)(a1 + 224) = v76;
    v134 = off_24C0B4170;
    if (v138 < 0)
LABEL_174:
      operator delete(__p);
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v58, v59, v60, v61, v62, v63, v64, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaler_settings.cc");
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 224) = 0;
    v134 = off_24C0B4170;
    if (v138 < 0)
      goto LABEL_174;
  }
LABEL_175:
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  v129 = off_24C0B4170;
  if (v133 < 0)
    operator delete(v132);
  if (v130)
  {
    v131 = v130;
    operator delete(v130);
  }
  v122 = off_24C0B4170;
  if (v126 < 0)
    operator delete(v125);
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  v115 = off_24C0B4170;
  if (v119 < 0)
    operator delete(v118);
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  v109 = off_24C0B4170;
  if (v113 < 0)
    operator delete(v112);
  if (v110)
  {
    v111 = v110;
    operator delete(v110);
  }
  v103 = off_24C0B4170;
  if (v107 < 0)
    operator delete(v106);
  if (v104)
  {
    v105 = v104;
    operator delete(v104);
  }
  v95 = off_24C0B4170;
  if (v101 < 0)
    operator delete(v98);
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  if (*(_BYTE *)(a1 + 168))
  {
    webrtc::QualityScalingExperiment::ParseSettings(a4, (uint64_t)&v95);
    if (v100)
    {
      v66 = v99 > 0;
      v67 = v98;
      if (*(float *)&v98 >= 0.0)
      {
        v68 = HIDWORD(v98);
        if (*((float *)&v98 + 1) >= *(float *)&v98)
          goto LABEL_211;
      }
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v69, v70, v71, v72, v73, v74, v75, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaling_experiment.cc");
    }
    else
    {
      v66 = 0;
    }
    v67 = 1065344827;
    v68 = 1065351538;
LABEL_211:
    *(_QWORD *)(a1 + 172) = v67 | ((unint64_t)v68 << 32);
    *(_BYTE *)(a1 + 180) = v66;
    v77 = operator new();
    v78 = *(_DWORD *)(a1 + 172);
    *(_DWORD *)v77 = v78;
    *(_QWORD *)(v77 + 8) = 0;
    *(_DWORD *)(v77 + 16) = v78;
    __asm { FMOV            V8.2S, #-1.0 }
    *(_QWORD *)(v77 + 20) = _D8;
    v83 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v77;
    if (v83)
      MEMORY[0x20BD0ADEC](v83, 0x1000C40361F1193);
    v84 = operator new();
    v85 = *(_DWORD *)(a1 + 176);
    *(_DWORD *)v84 = v85;
    *(_QWORD *)(v84 + 8) = 0;
    *(_DWORD *)(v84 + 16) = v85;
    *(_QWORD *)(v84 + 20) = _D8;
    v86 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v84;
    if (v86)
      MEMORY[0x20BD0ADEC](v86, 0x1000C40361F1193);
  }
  webrtc::QualityScaler::StartNextCheckQpTask((webrtc::QualityScaler *)a1);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v87, v88, v89, v90, v91, v92, v93, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/quality_scaler.cc");
  return a1;
}

uint64_t webrtc::QualityScaler::StartNextCheckQpTask(webrtc::QualityScaler *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  char v34;
  char v35;
  _QWORD v36[2];
  uint64_t (*v37)(uint64_t, _QWORD **, _QWORD *);
  _QWORD **(*v38)(_QWORD **);

  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *(unsigned __int16 *)(v2 + 14);
    v4 = v3 >> 8;
  }
  else
  {
    LOBYTE(v3) = 0;
    LOBYTE(v4) = 0;
  }
  v5 = operator new();
  *(_QWORD *)v5 = this;
  *(_DWORD *)(v5 + 8) = 0;
  *(_WORD *)(v5 + 12) = v3 | (v4 << 8);
  *(_WORD *)(v5 + 14) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  v6 = (_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 24) = v5;
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v5;
  if (!v7)
  {
    v12 = v5;
    *(_DWORD *)(v5 + 8) = 1;
LABEL_16:
    v16 = (_QWORD *)operator new();
    *v16 = 1;
    v18 = (unsigned int *)v16 + 1;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
    if (*v6)
    {
      v20 = (unsigned int *)(*v6 + 4);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
        MEMORY[0x20BD0ADEC]();
    }
    *v6 = v16;
    goto LABEL_24;
  }
  *(_QWORD *)(v7 + 24) = 0;
  v8 = *(_BYTE **)(v7 + 16);
  if (v8)
  {
    *v8 = 0;
    v9 = (unsigned int *)(v8 + 4);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      MEMORY[0x20BD0ADEC]();
    *(_QWORD *)(v7 + 16) = 0;
  }
  MEMORY[0x20BD0ADEC](v7, 0x1060C40C7A57964);
  v12 = *((_QWORD *)this + 1);
  v6 = (_QWORD *)(v12 + 16);
  *(_DWORD *)(v12 + 8) = 1;
  if (!v13)
    goto LABEL_16;
  v15 = atomic_load((unsigned int *)(v13 + 4));
  if (v15 == 1)
    goto LABEL_16;
  v16 = (_QWORD *)*v6;
  if (!*v6)
  {
    v17 = *(_QWORD *)(v12 + 24);
    goto LABEL_31;
  }
LABEL_24:
  v23 = (unsigned int *)v16 + 1;
  do
    v24 = __ldxr(v23);
  while (__stxr(v24 + 1, v23));
  v17 = *(_QWORD *)(v12 + 24);
  do
    v25 = __ldxr(v23);
  while (__stxr(v25 + 1, v23));
  do
  {
    v26 = __ldaxr(v23);
    v27 = v26 - 1;
  }
  while (__stlxr(v27, v23));
  if (!v27)
    MEMORY[0x20BD0ADEC](v16, 0x1000C404A09149ALL);
LABEL_31:
  v28 = (_QWORD *)operator new();
  *v28 = v16;
  v28[1] = v17;
  v28[2] = v12;
  v29 = *(_QWORD *)v12;
  if (*(_BYTE *)(*(_QWORD *)v12 + 40))
  {
    v30 = *(_QWORD *)(v29 + 32);
  }
  else if (*(_BYTE *)(v29 + 168) && !*(_BYTE *)(v12 + 12))
  {
    v30 = *(_QWORD *)(v29 + 32) / 2;
  }
  else
  {
    if (*(_BYTE *)(v29 + 224) && !*(_BYTE *)(v12 + 13))
    {
      v31 = (double)*(uint64_t *)(v29 + 32);
      v32 = *(double *)(v29 + 216);
    }
    else
    {
      v31 = (double)*(uint64_t *)(v29 + 32);
      v32 = *(double *)(v29 + 208);
    }
    v30 = (uint64_t)(v32 * v31);
  }
  v36[0] = v28;
  v37 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::QualityScaler::CheckQpTask::StartDelayedTask(void)::{lambda(void)#1}>;
  v38 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::QualityScaler::CheckQpTask::StartDelayedTask(void)::{lambda(void)#1} &&>;
  v35 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v14 + 16))(v14, v36, 1000 * v30, &v35, &v34);
  return v37(1, (_QWORD **)v36, v36);
}

void webrtc::QualityScaler::~QualityScaler(webrtc::QualityScaler *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  *(_QWORD *)this = &off_24C0BAEB0;
  v2 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0x1000C40361F1193);
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v3)
    MEMORY[0x20BD0ADEC](v3, 0x1000C40361F1193);
  v4 = (void *)*((_QWORD *)this + 18);
  if (v4)
  {
    *((_QWORD *)this + 19) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 9) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    *(_QWORD *)(v7 + 24) = 0;
    v8 = *(_BYTE **)(v7 + 16);
    if (v8)
    {
      *v8 = 0;
      v9 = (unsigned int *)(v8 + 4);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        MEMORY[0x20BD0ADEC]();
      *(_QWORD *)(v7 + 16) = 0;
    }
    MEMORY[0x20BD0ADEC](v7, 0x1060C40C7A57964);
  }
}

{
  webrtc::QualityScaler::~QualityScaler(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::QualityScaler::ReportQp(webrtc::QualityScaler *this, int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v28;
  float v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  float v33;
  float v34;

  v6 = *((_QWORD *)this + 11) + 1;
  *((_QWORD *)this + 11) = v6;
  v7 = *((_QWORD *)this + 13);
  v8 = (*((_QWORD *)this + 14) - v7) >> 2;
  v9 = v6 % v8;
  if (v6 <= v8)
    v10 = *((_QWORD *)this + 12);
  else
    v10 = *((_QWORD *)this + 12) - *(int *)(v7 + 4 * v9);
  *((_QWORD *)this + 12) = v10;
  *(_DWORD *)(v7 + 4 * v9) = 0;
  v11 = *((_QWORD *)this + 16) + 1;
  *((_QWORD *)this + 16) = v11;
  v12 = *((_QWORD *)this + 18);
  v13 = (*((_QWORD *)this + 19) - v12) >> 2;
  v14 = v11 % v13;
  if (v11 <= v13)
    v15 = *((_QWORD *)this + 17);
  else
    v15 = *((_QWORD *)this + 17) - *(int *)(v12 + 4 * v14);
  *((_QWORD *)this + 17) = v15;
  *(_DWORD *)(v12 + 4 * v14) = 0;
  v16 = *((_QWORD *)this + 6) + 1;
  *((_QWORD *)this + 6) = v16;
  v17 = *((_QWORD *)this + 8);
  v18 = (*((_QWORD *)this + 9) - v17) >> 2;
  v19 = v16 % v18;
  if (v16 <= v18)
  {
    *((_QWORD *)this + 7) += a2;
    *(_DWORD *)(v17 + 4 * v19) = a2;
    v20 = *((_QWORD *)this + 23);
    if (!v20)
      goto LABEL_22;
  }
  else
  {
    *((_QWORD *)this + 7) = *((_QWORD *)this + 7) - *(int *)(v17 + 4 * v19) + a2;
    *(_DWORD *)(v17 + 4 * v19) = a2;
    v20 = *((_QWORD *)this + 23);
    if (!v20)
      goto LABEL_22;
  }
  v21 = (float)a2;
  v22 = a3 / 1000;
  v23 = *(float *)(v20 + 20);
  if (v23 != -1.0)
  {
    v24 = v22 - *(_QWORD *)(v20 + 8);
    v25 = *(float *)(v20 + 16);
    if (v24 != 1)
      v25 = powf(v25, (float)v24);
    v21 = (float)((float)(1.0 - v25) * v21) + (float)(v25 * v23);
  }
  v26 = *(float *)(v20 + 24);
  if (v21 <= v26 || v26 == -1.0)
    v26 = v21;
  *(float *)(v20 + 20) = v26;
  *(_QWORD *)(v20 + 8) = v22;
LABEL_22:
  v28 = *((_QWORD *)this + 24);
  if (v28)
  {
    v29 = (float)a2;
    v30 = a3 / 1000;
    v31 = *(float *)(v28 + 20);
    if (v31 != -1.0)
    {
      v32 = v30 - *(_QWORD *)(v28 + 8);
      v33 = *(float *)(v28 + 16);
      if (v32 != 1)
        v33 = powf(v33, (float)v32);
      v29 = (float)((float)(1.0 - v33) * v29) + (float)(v33 * v31);
    }
    v34 = *(float *)(v28 + 24);
    if (v29 <= v34 || v34 == -1.0)
      v34 = v29;
    *(float *)(v28 + 20) = v34;
    *(_QWORD *)(v28 + 8) = v30;
  }
}

_QWORD **absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::QualityScaler::CheckQpTask::StartDelayedTask(void)::{lambda(void)#1} &&>(_QWORD **result)
{
  _BYTE **v1;
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  webrtc::QualityScaler *v31;
  void (*v32)(void);
  webrtc::QualityScaler *v33;
  _DWORD *v34;
  _DWORD *v35;

  v1 = (_BYTE **)*result;
  v2 = (_BYTE *)**result;
  if (v2 && *v2 && v1[1])
  {
    v3 = v1[2];
    v4 = *(_QWORD *)v3;
    v5 = 88;
    if (*(_BYTE *)(*(_QWORD *)v3 + 180))
    {
      v5 = 128;
      v6 = (_QWORD *)(*(_QWORD *)v3 + 128);
    }
    else
    {
      v6 = (_QWORD *)(*(_QWORD *)v3 + 88);
    }
    v7 = (uint64_t)(v6[3] - v6[2]) >> 2;
    v8 = *(_QWORD *)(v4 + v5);
    if (v7 >= v8)
      v7 = *(_QWORD *)(v4 + v5);
    if (v7 < *(_QWORD *)(v4 + 200))
    {
      v3[14] = 0;
LABEL_46:
      *((_DWORD *)v3 + 2) = 2;
      return (_QWORD **)webrtc::QualityScaler::StartNextCheckQpTask(*(webrtc::QualityScaler **)v3);
    }
    if (v8 && (int)(v6[1] / v7) >= 60)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v9, v10, v11, v12, v13, v14, v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/quality_scaler.cc");
LABEL_39:
      *((_WORD *)v3 + 7) = 257;
      v31 = *(webrtc::QualityScaler **)v3;
      *((_BYTE *)v31 + 40) = 0;
      v32 = *(void (**)(void))(**((_QWORD **)v31 + 2) + 16);
LABEL_40:
      v32();
      v33 = *(webrtc::QualityScaler **)v3;
      *((_QWORD *)v33 + 11) = 0;
      *((_QWORD *)v33 + 12) = 0;
      *((_QWORD *)v33 + 16) = 0;
      *((_QWORD *)v33 + 17) = 0;
      *((_QWORD *)v33 + 6) = 0;
      *((_QWORD *)v33 + 7) = 0;
      v34 = (_DWORD *)*((_QWORD *)v33 + 23);
      if (v34)
      {
        v34[4] = *v34;
        v34[5] = -1082130432;
      }
      v35 = (_DWORD *)*((_QWORD *)v33 + 24);
      if (v35)
      {
        v35[4] = *v35;
        v35[5] = -1082130432;
      }
      goto LABEL_46;
    }
    v16 = *(_QWORD *)(v4 + 184);
    if (v16)
    {
      v17 = *(float *)(v16 + 20);
      if (v17 == -1.0)
        v18 = 0;
      else
        v18 = (int)v17 | 0x100000000;
    }
    else
    {
      v19 = *(_QWORD *)(v4 + 48);
      if (v19)
      {
        if ((uint64_t)(*(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64)) >> 2 < v19)
          v19 = (uint64_t)(*(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64)) >> 2;
        v18 = (*(_QWORD *)(v4 + 56) / v19) | 0x100000000;
      }
      else
      {
        v18 = 0;
      }
    }
    v20 = *(_QWORD *)(v4 + 192);
    if (v20)
    {
      v21 = *(float *)(v20 + 20);
      if (v21 == -1.0)
        v22 = 0;
      else
        v22 = (int)v21 | 0x100000000;
      if ((v18 & 0x100000000) == 0)
        goto LABEL_45;
    }
    else
    {
      v23 = *(_QWORD *)(v4 + 48);
      if (!v23)
        goto LABEL_45;
      if ((uint64_t)(*(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64)) >> 2 < v23)
        v23 = (uint64_t)(*(_QWORD *)(v4 + 72) - *(_QWORD *)(v4 + 64)) >> 2;
      v22 = (*(_QWORD *)(v4 + 56) / v23) | 0x100000000;
      if ((v18 & 0x100000000) == 0)
        goto LABEL_45;
    }
    if ((v22 & 0x100000000) != 0)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/video_coding/utility/quality_scaler.cc");
      if (*(_DWORD *)(v4 + 28) < (int)v18)
        goto LABEL_39;
      if (*(_DWORD *)(v4 + 24) >= (int)v22)
      {
        *((_WORD *)v3 + 7) = 257;
        v32 = *(void (**)(void))(**(_QWORD **)(*(_QWORD *)v3 + 16) + 24);
        goto LABEL_40;
      }
    }
LABEL_45:
    v3[14] = 1;
    goto LABEL_46;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::QualityScaler::CheckQpTask::StartDelayedTask(void)::{lambda(void)#1}>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*v3)
      {
        v4 = (unsigned int *)(*v3 + 4);
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          MEMORY[0x20BD0ADEC]();
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t webrtc::QualityScalerResource::Create@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  _BYTE v8[24];
  pthread_mutexattr_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = operator new();
  v4 = v3;
  v8[23] = 21;
  if (v8 <= "QualityScalerResource" && &v8[21] > "QualityScalerResource")
    __break(1u);
  strcpy(v8, "QualityScalerResource");
  *(_QWORD *)v3 = &unk_24C0C4D88;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  pthread_mutexattr_init(&v9);
  pthread_mutexattr_setpolicy_np(&v9, 3);
  pthread_mutex_init((pthread_mutex_t *)(v4 + 8), &v9);
  result = pthread_mutexattr_destroy(&v9);
  *(_OWORD *)(v4 + 72) = *(_OWORD *)v8;
  *(_QWORD *)(v4 + 88) = *(_QWORD *)&v8[16];
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)v4 = off_24C0BAF50;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = &unk_24C0BAFA8;
  *(_QWORD *)(v4 + 120) = 0;
  *(_DWORD *)(v4 + 128) = 0;
  v6 = (unsigned int *)(v4 + 128);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t webrtc::QualityScalerResource::OnFrameDropped(uint64_t result, int a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD **)(result + 120);
  if (v2)
  {
    if (a2 != 1)
    {
      if (a2)
        return result;
      v3 = v2[11] + 1;
      v2[11] = v3;
      v4 = v2[13];
      v5 = (v2[14] - v4) >> 2;
      v6 = v3 % v5;
      if (v3 <= v5)
        v7 = v2[12];
      else
        v7 = v2[12] - *(int *)(v4 + 4 * v6);
      v2[12] = v7 + 100;
      *(_DWORD *)(v4 + 4 * v6) = 100;
    }
    v8 = v2[16] + 1;
    v2[16] = v8;
    v9 = v2[18];
    v10 = (v2[19] - v9) >> 2;
    v11 = v8 % v10;
    if (v8 <= v10)
      v12 = v2[17];
    else
      v12 = v2[17] - *(int *)(v9 + 4 * v11);
    v2[17] = v12 + 100;
    *(_DWORD *)(v9 + 4 * v11) = 100;
  }
  return result;
}

uint64_t webrtc::QualityScalerResource::OnReportQpUsageHigh(webrtc::QualityScalerResource *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  webrtc::QualityScalerResource *v5;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v5 = this;
    (**(void (***)(webrtc::QualityScalerResource *))this)(this);
    (*(void (**)(uint64_t, webrtc::QualityScalerResource **, _QWORD))(*(_QWORD *)v3 + 16))(v3, &v5, 0);
    if (v5)
      (*(void (**)(webrtc::QualityScalerResource *))(*(_QWORD *)v5 + 8))(v5);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t `non-virtual thunk to'webrtc::QualityScalerResource::OnReportQpUsageHigh(webrtc::QualityScalerResource *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  void (**v4)(char *);
  char *v6;

  v2 = (pthread_mutex_t *)((char *)this - 104);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this - 104));
  v3 = *((_QWORD *)this - 1);
  if (v3)
  {
    v4 = (void (**)(char *))*((_QWORD *)this - 14);
    v6 = (char *)this - 112;
    (*v4)((char *)this - 112);
    (*(void (**)(uint64_t, char **, _QWORD))(*(_QWORD *)v3 + 16))(v3, &v6, 0);
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t webrtc::QualityScalerResource::OnReportQpUsageLow(webrtc::QualityScalerResource *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  webrtc::QualityScalerResource *v5;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v5 = this;
    (**(void (***)(webrtc::QualityScalerResource *))this)(this);
    (*(void (**)(uint64_t, webrtc::QualityScalerResource **, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v5, 1);
    if (v5)
      (*(void (**)(webrtc::QualityScalerResource *))(*(_QWORD *)v5 + 8))(v5);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t `non-virtual thunk to'webrtc::QualityScalerResource::OnReportQpUsageLow(webrtc::QualityScalerResource *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  void (**v4)(char *);
  char *v6;

  v2 = (pthread_mutex_t *)((char *)this - 104);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this - 104));
  v3 = *((_QWORD *)this - 1);
  if (v3)
  {
    v4 = (void (**)(char *))*((_QWORD *)this - 14);
    v6 = (char *)this - 112;
    (*v4)((char *)this - 112);
    (*(void (**)(uint64_t, char **, uint64_t))(*(_QWORD *)v3 + 16))(v3, &v6, 1);
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
  return pthread_mutex_unlock(v2);
}

uint64_t rtc::RefCountedObject<webrtc::QualityScalerResource>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 128);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::QualityScalerResource>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 32;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

uint64_t rtc::RefCountedObject<webrtc::QualityScalerResource>::~RefCountedObject(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24C0BAED0;
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = &unk_24C0BAF20;
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = &unk_24C0C4D88;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  return a1;
}

void rtc::RefCountedObject<webrtc::QualityScalerResource>::~RefCountedObject(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_24C0BAED0;
  v2 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = &unk_24C0BAF20;
  *(_QWORD *)(a1 + 120) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)a1 = &unk_24C0C4D88;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 8));
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::QualityScalerResource>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 128));
  return v1 == 1;
}

uint64_t `non-virtual thunk to'rtc::RefCountedObject<webrtc::QualityScalerResource>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *(a1 - 14) = &unk_24C0BAED0;
  v2 = a1[1];
  *a1 = &unk_24C0BAF20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(a1 - 14) = &unk_24C0C4D88;
  if (*((char *)a1 - 17) < 0)
    operator delete((void *)*(a1 - 5));
  return pthread_mutex_destroy((pthread_mutex_t *)(a1 - 13));
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::QualityScalerResource>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;

  *(a1 - 14) = &unk_24C0BAED0;
  v2 = a1[1];
  *a1 = &unk_24C0BAF20;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(a1 - 14) = &unk_24C0C4D88;
  if (*((char *)a1 - 17) < 0)
    operator delete((void *)*(a1 - 5));
  pthread_mutex_destroy((pthread_mutex_t *)(a1 - 13));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::QualityScalerSettings::QualityScalerSettings(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *p_p;
  void *__p;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD v11[8];

  v11[7] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C0B4170;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 55) = 18;
  if (a1 + 32 <= (unint64_t)"sampling_period_ms" && a1 + 50 > (unint64_t)"sampling_period_ms")
    goto LABEL_23;
  strcpy((char *)(a1 + 32), "sampling_period_ms");
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)a1 = &unk_24C0B4110;
  *(_BYTE *)(a1 + 60) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = off_24C0B4170;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 127) = 17;
  if (a1 + 104 <= (unint64_t)"average_qp_window" && a1 + 121 > (unint64_t)"average_qp_window")
    goto LABEL_23;
  strcpy((char *)(a1 + 104), "average_qp_window");
  *(_QWORD *)(a1 + 144) = off_24C0B4170;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 72) = &unk_24C0B4110;
  *(_BYTE *)(a1 + 132) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 199) = 10;
  *(_QWORD *)(a1 + 152) = 0;
  if (a1 + 176 <= (unint64_t)"min_frames" && a1 + 186 > (unint64_t)"min_frames")
    goto LABEL_23;
  strcpy((char *)(a1 + 176), "min_frames");
  *(_QWORD *)(a1 + 216) = off_24C0B4170;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 144) = &unk_24C0B4110;
  *(_BYTE *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 271) = 20;
  if (a1 + 248 <= (unint64_t)"initial_scale_factor" && a1 + 268 > (unint64_t)"initial_scale_factor")
    goto LABEL_23;
  strcpy((char *)(a1 + 248), "initial_scale_factor");
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 216) = &unk_24C0B40E0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = off_24C0B4170;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 351) = 12;
  if (a1 + 328 <= (unint64_t)"scale_factor" && a1 + 340 > (unint64_t)"scale_factor")
    goto LABEL_23;
  strcpy((char *)(a1 + 328), "scale_factor");
  *(_BYTE *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 296) = &unk_24C0B40E0;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = off_24C0B4170;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  v4 = (char *)operator new(0x20uLL);
  *(_QWORD *)(a1 + 408) = v4;
  *(_OWORD *)(a1 + 416) = xmmword_208F051A0;
  if (v4 <= "initial_bitrate_interval_ms" && v4 + 27 > "initial_bitrate_interval_ms")
    goto LABEL_23;
  strcpy(v4, "initial_bitrate_interval_ms");
  *(_BYTE *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 376) = &unk_24C0B4110;
  *(_BYTE *)(a1 + 436) = 0;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = off_24C0B4170;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  *(_BYTE *)(a1 + 503) = 22;
  if (a1 + 480 <= (unint64_t)"initial_bitrate_factor" && a1 + 502 > (unint64_t)"initial_bitrate_factor")
    goto LABEL_23;
  strcpy((char *)(a1 + 480), "initial_bitrate_factor");
  *(_BYTE *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 448) = &unk_24C0B40E0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 520) = 0;
  v11[0] = a1;
  v11[1] = a1 + 72;
  v11[2] = a1 + 144;
  v11[3] = a1 + 216;
  v11[4] = a1 + 296;
  v11[5] = a1 + 376;
  v11[6] = a1 + 448;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Video-QualityScalerSettings", 34);
  if (((char)v10 & 0x80000000) == 0)
  {
    v5 = v10;
    p_p = (char *)&__p;
    goto LABEL_20;
  }
  v5 = v9;
  if (v9 < 0 || (p_p = (char *)__p, v9) && !__p)
LABEL_23:
    __break(1u);
LABEL_20:
  webrtc::ParseFieldTrial(v11, 7, p_p, v5);
  if ((char)v10 < 0)
    operator delete(__p);
  return a1;
}

void webrtc::QualityScalingExperiment::ParseSettings(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const char *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _BYTE v13[28];
  void *v14[2];
  char v15;

  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(v14, a1, "WebRTC-Video-QualityScaling", 27);
  if (v15 >= 0)
    v3 = (const char *)v14;
  else
    v3 = (const char *)v14[0];
  if (sscanf(v3, "Enabled-%d,%d,%d,%d,%d,%d,%d,%d,%f,%f,%d", &v12, (char *)&v12 + 4, (char *)&v12 + 8, (char *)&v12 + 12, v13, &v13[4], &v13[8], &v13[12], &v13[16], &v13[20], &v13[24]) == 11)
  {
    v4 = *(_OWORD *)v13;
    *(_OWORD *)a2 = v12;
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 28) = *(_OWORD *)&v13[12];
    *(_BYTE *)(a2 + 44) = 1;
    if (v15 < 0)
LABEL_11:
      operator delete(v14[0]);
  }
  else
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v5, v6, v7, v8, v9, v10, v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaling_experiment.cc");
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 44) = 0;
    if (v15 < 0)
      goto LABEL_11;
  }
}

unint64_t webrtc::QualityScalingExperiment::GetQpThresholds(int a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  char v22;

  webrtc::QualityScalingExperiment::ParseSettings(a2, (uint64_t)&v14);
  if (!v22)
    return 0;
  switch(a1)
  {
    case 0:
      v3 = v20;
      v4 = v21;
      goto LABEL_14;
    case 1:
      v3 = v14;
      v4 = v15;
      v5 = 0;
      if (v15 < v14 || v14 < 1 || v15 > 127)
        goto LABEL_20;
      goto LABEL_17;
    case 2:
      v3 = v16;
      v4 = v17;
LABEL_14:
      v5 = 0;
      if ((int)v4 >= v3 && v3 >= 1 && (int)v4 <= 255)
        goto LABEL_17;
      goto LABEL_20;
    case 3:
      return 0;
    case 4:
    case 5:
      v3 = v18;
      v4 = v19;
      v5 = 0;
      if (v19 < v18 || v18 < 1 || v19 > 51)
        goto LABEL_20;
LABEL_17:
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v7, v8, v9, v10, v11, v12, v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/quality_scaling_experiment.cc");
      v5 = v3 & 0xFFFFFF00 | (unint64_t)(v4 << 32) | v3;
LABEL_20:
      result = v5;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

void *webrtc::QuantileNoiseEstimator::Estimate(uint64_t a1, uint32x4_t *a2, void *__dst)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int v26;
  unint64_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int32x2_t v30;
  float32x4_t v31;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t *v44;
  float32x4_t v45;
  int16x4_t v46;
  float32x4_t v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  uint64_t v55;
  int v56;
  float32x4_t v57;
  float v58;
  unint64_t v59;
  int8x16_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  int16x4_t v67;
  float32x4_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  int v76;
  float32x4_t v77;
  float v78;
  unint64_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  int16x4_t v88;
  float32x4_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  int v97;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 v105;
  float v106;
  __int128 v107;
  float v108;
  __int128 v109;
  uint64_t v110;
  float32x4_t v112;
  float32x4_t v113;
  float v114;
  __int128 v115;
  __int128 v116;
  float32x4_t v117;
  _OWORD v118[32];
  float v119;

  v5.i64[0] = 0x3400000034000000;
  v5.i64[1] = 0x3400000034000000;
  v6 = (float32x4_t)vdupq_n_s32(0xC2FDE2A9);
  v7 = (float32x4_t)vdupq_n_s32(0x3F317218u);
  v8 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[1]), v5), v6), v7);
  v9 = vcvtq_f32_u32(a2[2]);
  v10 = vcvtq_f32_u32(a2[3]);
  v118[0] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(*a2), v5), v6), v7);
  v118[1] = v8;
  v118[2] = vmulq_f32(vaddq_f32(vmulq_f32(v9, v5), v6), v7);
  v118[3] = vmulq_f32(vaddq_f32(vmulq_f32(v10, v5), v6), v7);
  v11 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[5]), v5), v6), v7);
  v118[4] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[4]), v5), v6), v7);
  v118[5] = v11;
  v12 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[7]), v5), v6), v7);
  v118[6] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[6]), v5), v6), v7);
  v118[7] = v12;
  v13 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[9]), v5), v6), v7);
  v118[8] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[8]), v5), v6), v7);
  v118[9] = v13;
  v14 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[11]), v5), v6), v7);
  v118[10] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[10]), v5), v6), v7);
  v118[11] = v14;
  v15 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[13]), v5), v6), v7);
  v118[12] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[12]), v5), v6), v7);
  v118[13] = v15;
  v16 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[15]), v5), v6), v7);
  v118[14] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[14]), v5), v6), v7);
  v118[15] = v16;
  v17 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[17]), v5), v6), v7);
  v118[16] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[16]), v5), v6), v7);
  v118[17] = v17;
  v18 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[19]), v5), v6), v7);
  v118[18] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[18]), v5), v6), v7);
  v118[19] = v18;
  v19 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[21]), v5), v6), v7);
  v118[20] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[20]), v5), v6), v7);
  v118[21] = v19;
  v20 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[23]), v5), v6), v7);
  v118[22] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[22]), v5), v6), v7);
  v118[23] = v20;
  v21 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[25]), v5), v6), v7);
  v118[24] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[24]), v5), v6), v7);
  v118[25] = v21;
  v22 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[27]), v5), v6), v7);
  v118[26] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[26]), v5), v6), v7);
  v118[27] = v22;
  v23 = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[29]), v5), v6), v7);
  v118[28] = vmulq_f32(vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[28]), v5), v6), v7);
  v118[29] = v23;
  v24 = vmulq_f32(vcvtq_f32_u32(a2[30]), v5);
  v25 = vaddq_f32(vmulq_f32(vcvtq_f32_u32(a2[31]), v5), v6);
  v118[30] = vmulq_f32(vaddq_f32(v24, v6), v7);
  v118[31] = vmulq_f32(v25, v7);
  v30.i32[1] = 872415232;
  v119 = (float)((float)((float)a2[32].u32[0] * 0.00000011921) + -126.94) * 0.69315;
  v26 = *(_DWORD *)(a1 + 3612);
  v27 = -512;
  v28 = (int8x16_t)vdupq_n_s32(0x42200000u);
  v29 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
  *(float *)v30.i32 = (float)v26;
  v31 = (float32x4_t)vdupq_lane_s32(v30, 0);
  __asm
  {
    FMOV            V0.4S, #1.0
    FMOV            V1.4S, #-0.75
    FMOV            V2.4S, #0.25
  }
  v39 = 1.0 / (float)((float)v26 + 1.0);
  v40 = (float32x4_t)vdupq_n_s32(0x42480000u);
  do
  {
    v41 = *(float32x4_t *)(a1 + v27 + 512);
    v42 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v41, _Q0), (int8x16_t)vdivq_f32((float32x4_t)v28, v41), v28), v39);
    v43 = (float32x4_t)v118[v27 / 0x10 + 32];
    v44 = (float32x4_t *)(a1 + v27 + 2060);
    v45 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v43, *v44), (int8x16_t)vmlaq_f32(*v44, _Q2, v42), (int8x16_t)vmlaq_f32(*v44, _Q1, v42));
    *v44 = v45;
    v46 = vmovn_s32(vcgtq_f32(v29, vabdq_f32(v43, v45)));
    v47 = vmlaq_f32(v40, v41, v31);
    if ((v46.i8[0] & 1) != 0)
    {
      *(float *)(a1 + v27 + 512) = v39 * v47.f32[0];
      if ((v46.i8[2] & 1) == 0)
      {
LABEL_5:
        if ((v46.i8[4] & 1) != 0)
          goto LABEL_10;
        goto LABEL_6;
      }
    }
    else if ((v46.i8[2] & 1) == 0)
    {
      goto LABEL_5;
    }
    *(float *)(a1 + v27 + 516) = vmuls_lane_f32(v39, *(float32x2_t *)v47.f32, 1);
    if ((v46.i8[4] & 1) != 0)
    {
LABEL_10:
      *(float *)(a1 + v27 + 520) = vmuls_lane_f32(v39, v47, 2);
      if ((v46.i8[6] & 1) == 0)
        goto LABEL_2;
      goto LABEL_11;
    }
LABEL_6:
    if ((v46.i8[6] & 1) == 0)
      goto LABEL_2;
LABEL_11:
    *(float *)(a1 + v27 + 524) = vmuls_lane_f32(v39, v47, 3);
LABEL_2:
    v27 += 16;
  }
  while (v27);
  v48 = *(float *)(a1 + 512);
  v49 = 40.0;
  if (v48 > 1.0)
    v49 = 40.0 / v48;
  v50 = v39 * v49;
  v51 = v119;
  v52 = *(float *)(a1 + 2060);
  v53 = v52 + (float)(v50 * -0.75);
  v54 = v52 + (float)(v50 * 0.25);
  if (v119 <= v52)
    v54 = v53;
  *(float *)(a1 + 2060) = v54;
  if (vabds_f32(v51, v54) < 0.01)
    *(float *)(a1 + 512) = v39 * (float)((float)(*(float *)v30.i32 * v48) + 50.0);
  if (v26 < 200)
  {
    LODWORD(v55) = -1;
  }
  else
  {
    v26 = 0;
    if (*(int *)(a1 + 3624) >= 200)
      LODWORD(v55) = 0;
    else
      LODWORD(v55) = -1;
  }
  *(_DWORD *)(a1 + 3612) = v26 + 1;
  v56 = *(_DWORD *)(a1 + 3616);
  *(float *)v30.i32 = (float)v56;
  v57 = (float32x4_t)vdupq_lane_s32(v30, 0);
  v58 = 1.0 / (float)((float)v56 + 1.0);
  v59 = -512;
  v60 = (int8x16_t)vdupq_n_s32(0x42200000u);
  v61 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
  v62 = (float32x4_t)vdupq_n_s32(0x42480000u);
  while (2)
  {
    v63 = *(float32x4_t *)(a1 + v59 + 1028);
    v64 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v63, _Q0), (int8x16_t)vdivq_f32((float32x4_t)v60, v63), v60), v58);
    v65 = (float32x4_t)v118[v59 / 0x10 + 32];
    v66 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v65, *(float32x4_t *)(a1 + v59 + 2576)), (int8x16_t)vmlaq_f32(*(float32x4_t *)(a1 + v59 + 2576), _Q2, v64), (int8x16_t)vmlaq_f32(*(float32x4_t *)(a1 + v59 + 2576), _Q1, v64));
    *(float32x4_t *)(a1 + v59 + 2576) = v66;
    v67 = vmovn_s32(vcgtq_f32(v61, vabdq_f32(v65, v66)));
    v68 = vmlaq_f32(v62, v63, v57);
    if ((v67.i8[0] & 1) != 0)
    {
      *(float *)(a1 + v59 + 1028) = v58 * v68.f32[0];
      if ((v67.i8[2] & 1) != 0)
        goto LABEL_31;
LABEL_27:
      if ((v67.i8[4] & 1) == 0)
        goto LABEL_28;
LABEL_32:
      *(float *)(a1 + v59 + 1036) = vmuls_lane_f32(v58, v68, 2);
      if ((v67.i8[6] & 1) != 0)
LABEL_33:
        *(float *)(a1 + v59 + 1040) = vmuls_lane_f32(v58, v68, 3);
    }
    else
    {
      if ((v67.i8[2] & 1) == 0)
        goto LABEL_27;
LABEL_31:
      *(float *)(a1 + v59 + 1032) = vmuls_lane_f32(v58, *(float32x2_t *)v68.f32, 1);
      if ((v67.i8[4] & 1) != 0)
        goto LABEL_32;
LABEL_28:
      if ((v67.i8[6] & 1) != 0)
        goto LABEL_33;
    }
    v59 += 16;
    if (v59)
      continue;
    break;
  }
  v69 = *(float *)(a1 + 1028);
  v70 = 40.0;
  if (v69 > 1.0)
    v70 = 40.0 / v69;
  v71 = v58 * v70;
  v72 = v119;
  v73 = *(float *)(a1 + 2576);
  v74 = v73 + (float)(v71 * -0.75);
  v75 = v73 + (float)(v71 * 0.25);
  if (v119 <= v73)
    v75 = v74;
  *(float *)(a1 + 2576) = v75;
  if (vabds_f32(v72, v75) < 0.01)
    *(float *)(a1 + 1028) = v58 * (float)((float)(*(float *)v30.i32 * v69) + 50.0);
  if (v56 >= 200)
  {
    v56 = 0;
    if (*(int *)(a1 + 3624) > 199)
      LODWORD(v55) = 129;
  }
  *(_DWORD *)(a1 + 3616) = v56 + 1;
  v76 = *(_DWORD *)(a1 + 3620);
  *(float *)v30.i32 = (float)v76;
  v77 = (float32x4_t)vdupq_lane_s32(v30, 0);
  v78 = 1.0 / (float)((float)v76 + 1.0);
  v79 = -512;
  v80 = (int8x16_t)vdupq_n_s32(0x42200000u);
  v81 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
  v82 = (float32x4_t)vdupq_n_s32(0x42480000u);
  while (2)
  {
    v83 = *(float32x4_t *)(a1 + v79 + 1544);
    v84 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v83, _Q0), (int8x16_t)vdivq_f32((float32x4_t)v80, v83), v80), v78);
    v85 = (float32x4_t)v118[v79 / 0x10 + 32];
    v86 = (float32x4_t *)(a1 + v79 + 3092);
    v87 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v85, *v86), (int8x16_t)vmlaq_f32(*v86, _Q2, v84), (int8x16_t)vmlaq_f32(*v86, _Q1, v84));
    *v86 = v87;
    v88 = vmovn_s32(vcgtq_f32(v81, vabdq_f32(v85, v87)));
    v89 = vmlaq_f32(v82, v83, v77);
    if ((v88.i8[0] & 1) != 0)
    {
      *(float *)(a1 + v79 + 1544) = v78 * v89.f32[0];
      if ((v88.i8[2] & 1) != 0)
        goto LABEL_51;
LABEL_47:
      if ((v88.i8[4] & 1) == 0)
        goto LABEL_48;
LABEL_52:
      *(float *)(a1 + v79 + 1552) = vmuls_lane_f32(v78, v89, 2);
      if ((v88.i8[6] & 1) != 0)
LABEL_53:
        *(float *)(a1 + v79 + 1556) = vmuls_lane_f32(v78, v89, 3);
    }
    else
    {
      if ((v88.i8[2] & 1) == 0)
        goto LABEL_47;
LABEL_51:
      *(float *)(a1 + v79 + 1548) = vmuls_lane_f32(v78, *(float32x2_t *)v89.f32, 1);
      if ((v88.i8[4] & 1) != 0)
        goto LABEL_52;
LABEL_48:
      if ((v88.i8[6] & 1) != 0)
        goto LABEL_53;
    }
    v79 += 16;
    if (v79)
      continue;
    break;
  }
  v90 = *(float *)(a1 + 1544);
  v91 = 40.0;
  if (v90 > 1.0)
    v91 = 40.0 / v90;
  v92 = v78 * v91;
  v93 = v119;
  v94 = *(float *)(a1 + 3092);
  v95 = v94 + (float)(v92 * -0.75);
  v96 = v94 + (float)(v92 * 0.25);
  if (v119 <= v94)
    v96 = v95;
  *(float *)(a1 + 3092) = v96;
  if (vabds_f32(v93, v96) < 0.01)
    *(float *)(a1 + 1544) = v78 * (float)((float)(*(float *)v30.i32 * v90) + 50.0);
  v97 = *(_DWORD *)(a1 + 3624);
  if (v97 <= 199 || v76 <= 199)
    v55 = v55;
  else
    v55 = 258;
  if (v76 <= 199)
    v99 = v76 + 1;
  else
    v99 = 1;
  *(_DWORD *)(a1 + 3620) = v99;
  if (v97 <= 199)
  {
    *(_DWORD *)(a1 + 3624) = v97 + 1;
    v55 = 258;
    goto LABEL_72;
  }
  if ((v55 & 0x80000000) == 0)
  {
LABEL_72:
    v100 = 4 * v55;
    v101 = a1 + 1548 + v100;
    v102 = a1 + 3096;
    if ((unint64_t)(v100 - 1533) >= 0x10)
    {
      v104 = 0;
      v112 = (float32x4_t)vdupq_n_s32(0x4053AAE0u);
      v113 = (float32x4_t)vdupq_n_s32(0x3EDE5BD9u);
      v103 = 128;
      do
      {
        v117 = vmulq_f32(vmulq_f32(*(float32x4_t *)(v101 + v104), v113), v112);
        v114 = exp2f(v117.f32[1]);
        *(float *)&v105 = exp2f(v117.f32[0]);
        *((float *)&v105 + 1) = v114;
        v115 = v105;
        v106 = exp2f(v117.f32[2]);
        v107 = v115;
        *((float *)&v107 + 2) = v106;
        v116 = v107;
        v108 = exp2f(v117.f32[3]);
        v109 = v116;
        *((float *)&v109 + 3) = v108;
        *(_OWORD *)(v102 + v104) = v109;
        v104 += 16;
      }
      while (v104 != 512);
    }
    else
    {
      v103 = 0;
    }
    v110 = 4 * v103;
    do
    {
      *(float *)(v102 + v110) = exp2f((float)(*(float *)(v101 + v110) * 0.43429) * 3.3073);
      v110 += 4;
    }
    while (v110 != 516);
  }
  return memmove(__dst, (const void *)(a1 + 3096), 0x204uLL);
}

std::string *webrtc::RateControlSettings::RateControlSettings(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *result;
  std::string::size_type size;
  unsigned __int8 v12;
  std::string::size_type v13;
  std::string *v14;
  _QWORD *v15;
  uint64_t *v16;
  void *v17;
  __int128 v18;
  void **v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  int v23;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  void **v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  __int128 v33;
  char v34;
  std::string v35;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 4) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v4 = a1 + 40;
  *(_BYTE *)(a1 + 56) = 0;
  v5 = a1 + 56;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 60) = 0;
  v6 = a1 + 60;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 68) = 0;
  v7 = a1 + 68;
  *(_DWORD *)(a1 + 76) = 16843009;
  v8 = a1 + 76;
  *(_BYTE *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  v9 = a1 + 80;
  result = (std::string *)(*(_QWORD *(**)(std::string *__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&v35, a2, "WebRTC-CongestionWindow", 23);
  size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  v12 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v35.__r_.__value_.__l.__size_;
  if (size)
  {
    if ((*((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x80) == 0)
    {
LABEL_5:
      v13 = v12;
      v14 = &v35;
      goto LABEL_10;
    }
  }
  else
  {
    result = std::string::__assign_external(&v35, "QueueSize:350,MinBitrate:30000,DropFrame:true", 0x2DuLL);
    v12 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
    if ((*((_BYTE *)&v35.__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_5;
  }
  v13 = v35.__r_.__value_.__l.__size_;
  if ((v35.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
    goto LABEL_40;
  v14 = (std::string *)v35.__r_.__value_.__r.__words[0];
  if (v35.__r_.__value_.__l.__size_)
  {
    if (!v35.__r_.__value_.__r.__words[0])
      goto LABEL_40;
  }
LABEL_10:
  v30 = v8;
  v31 = v9;
  LOBYTE(__p[0]) = 0;
  BYTE4(__p[0]) = 0;
  LOBYTE(__p[1]) = 0;
  BYTE4(__p[1]) = 0;
  LOBYTE(v33) = 0;
  BYTE8(v33) = 0;
  v34 = 0;
  v15 = operator new(0x80uLL);
  *v15 = "QueueSize";
  v15[1] = __p;
  v15[2] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse;
  v15[3] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode;
  v15[4] = "MinBitrate";
  v15[5] = &__p[1];
  v15[6] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse;
  v15[7] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode;
  v15[8] = "InitWin";
  v15[9] = &v33;
  v15[10] = webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataSize>>::Parse;
  v15[11] = webrtc::struct_parser_impl::TypedParser<std::optional<webrtc::DataSize>>::Encode;
  v15[12] = "DropFrame";
  v15[13] = &v34;
  v15[14] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v15[15] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v16 = (uint64_t *)operator new();
  *v16 = (uint64_t)v15;
  v16[1] = (uint64_t)(v15 + 16);
  v16[2] = (uint64_t)(v15 + 16);
  webrtc::StructParametersParser::Parse(v16, (uint64_t)v14, v13);
  v17 = (void *)*v16;
  if (*v16)
  {
    v16[1] = (uint64_t)v17;
    operator delete(v17);
  }
  MEMORY[0x20BD0ADEC](v16, 0x20C40960023A9);
  v18 = v33;
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 16) = v18;
  *(_BYTE *)(a1 + 32) = v34;
  result = (std::string *)(*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2, "WebRTC-UseBaseHeavyVP8TL3RateAllocation", 39);
  if (SBYTE7(v33) < 0)
  {
    v20 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
      goto LABEL_40;
    v19 = (void **)__p[0];
    if (__p[1])
    {
      if (!__p[0])
        goto LABEL_40;
    }
  }
  else
  {
    v19 = __p;
    v20 = BYTE7(v33);
  }
  if (v20 < 7)
  {
    v21 = 0;
    if ((BYTE7(v33) & 0x80) == 0)
      goto LABEL_28;
    goto LABEL_27;
  }
  v22 = *(_DWORD *)v19;
  v23 = *(_DWORD *)((char *)v19 + 3);
  v21 = v22 == 1650552389 && v23 == 1684368482;
  if ((BYTE7(v33) & 0x80) != 0)
LABEL_27:
    operator delete(__p[0]);
LABEL_28:
  *(_BYTE *)(a1 + 81) = v21;
  v25 = operator new(0x140uLL);
  *v25 = "pacing_factor";
  v25[1] = v4;
  v25[2] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Parse;
  v25[3] = webrtc::struct_parser_impl::TypedParser<std::optional<double>>::Encode;
  v25[4] = "alr_probing";
  v25[5] = v5;
  v25[6] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v25[7] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v25[8] = "vp8_qp_max";
  v25[9] = v6;
  v25[10] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse;
  v25[11] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode;
  v25[12] = "vp8_min_pixels";
  v25[13] = v7;
  v25[14] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Parse;
  v25[15] = webrtc::struct_parser_impl::TypedParser<std::optional<int>>::Encode;
  v25[16] = "trust_vp8";
  v25[17] = v30;
  v25[18] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v25[19] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v25[20] = "trust_vp9";
  v25[21] = a1 + 77;
  v25[22] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v25[23] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v25[24] = "bitrate_adjuster";
  v25[25] = a1 + 78;
  v25[26] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v25[27] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v25[28] = "adjuster_use_headroom";
  v25[29] = a1 + 79;
  v25[30] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v25[31] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v25[32] = "vp8_s0_boost";
  v25[33] = v31;
  v25[34] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v25[35] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v25[36] = "vp8_base_heavy_tl3_alloc";
  v25[37] = a1 + 81;
  v25[38] = webrtc::struct_parser_impl::TypedParser<BOOL>::Parse;
  v25[39] = webrtc::struct_parser_impl::TypedParser<BOOL>::Encode;
  v26 = (uint64_t *)operator new();
  *v26 = (uint64_t)v25;
  v26[1] = (uint64_t)(v25 + 40);
  v26[2] = (uint64_t)(v25 + 40);
  result = (std::string *)(*(_QWORD *(**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2, "WebRTC-VideoRateControl", 23);
  if (SBYTE7(v33) < 0)
  {
    v27 = (unint64_t)__p[1];
    if (((unint64_t)__p[1] & 0x8000000000000000) == 0)
    {
      v28 = (void **)__p[0];
      if (!__p[1] || __p[0])
        goto LABEL_33;
    }
LABEL_40:
    __break(1u);
    return result;
  }
  v27 = BYTE7(v33);
  v28 = __p;
LABEL_33:
  webrtc::StructParametersParser::Parse(v26, (uint64_t)v28, v27);
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  v29 = (void *)*v26;
  if (*v26)
  {
    v26[1] = (uint64_t)v29;
    operator delete(v29);
  }
  MEMORY[0x20BD0ADEC](v26, 0x20C40960023A9);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  return (std::string *)a1;
}

uint64_t webrtc::RateControlSettings::LibvpxVp8QpMax(webrtc::RateControlSettings *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (!*((_BYTE *)this + 64) || *((_DWORD *)this + 15) < 0x40u)
    return *(_QWORD *)((char *)this + 60);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v1, v2, v3, v4, v5, v6, v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/experiments/rate_control_settings.cc");
  return 0;
}

uint64_t webrtc::RateLimiter::TryUseRate(webrtc::RateLimiter *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;

  v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  v6 = v5 / 0x3E8uLL;
  if (v5 % 0x3E8uLL > 0x1F3)
    ++v6;
  if (-v5 % 0x3E8uLL <= 0x1F4)
    v7 = 0;
  else
    v7 = -1;
  if (v5 < 0)
    v8 = v7 - -v5 / 0x3E8uLL;
  else
    v8 = v6;
  v9 = webrtc::RateStatistics::Rate((webrtc::RateLimiter *)((char *)this + 72), v8);
  if (v10 && (unint64_t)(8000 * a2) / *((_QWORD *)this + 21) + v9 > *((unsigned int *)this + 44))
  {
    v11 = 0;
  }
  else
  {
    webrtc::RateStatistics::Update((webrtc::RateLimiter *)((char *)this + 72), a2, v8);
    v11 = 1;
  }
  pthread_mutex_unlock(v4);
  return v11;
}

void webrtc::RateStatistics::Reset(webrtc::RateStatistics *this)
{
  void **v2;
  unint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *((_BYTE *)this + 64) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_OWORD *)this + 3) = xmmword_208F08CC0;
  *((_QWORD *)this + 11) = *((_QWORD *)this + 10);
  v2 = (void **)*((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2) - (_QWORD)v2;
  if (v3)
  {
    v4 = (_QWORD *)((char *)this + 40);
    v5 = *((_QWORD *)this + 4);
    v6 = &v2[v5 / 0xAA];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    while ((void *)v8 != (char *)v2[(*((_QWORD *)this + 5) + v5) / 0xAA] + 24 * ((*((_QWORD *)this + 5) + v5) % 0xAA))
    {
      if (!v8)
      {
        __break(1u);
        return;
      }
      v8 += 24;
      if (v8 - v7 == 4080)
      {
        v9 = (unint64_t)v6[1];
        ++v6;
        v7 = v9;
        v8 = v9;
      }
    }
  }
  else
  {
    v4 = (_QWORD *)((char *)this + 40);
  }
  *v4 = 0;
  if (v3 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v10 = *((_QWORD *)this + 2);
      v2 = (void **)(*((_QWORD *)this + 1) + 8);
      *((_QWORD *)this + 1) = v2;
      v3 = v10 - (_QWORD)v2;
    }
    while (v3 > 0x10);
  }
  if (v3 >> 3 == 1)
  {
    v11 = 85;
  }
  else
  {
    if (v3 >> 3 != 2)
      return;
    v11 = 170;
  }
  *((_QWORD *)this + 4) = v11;
}

void webrtc::RateStatistics::Update(webrtc::RateStatistics *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int64_t v52;
  char *v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  BOOL v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  int64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  int64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 *v107;
  _OWORD *v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  int64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  _OWORD *v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void *v132;

  v3 = a3;
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = a3 - *((_QWORD *)this + 11);
    v8 = (void **)*((_QWORD *)this + 1);
    v9 = *((_QWORD *)this + 4);
    do
    {
      v10 = v8[v9 / 0xAA];
      if (v10[3 * (v9 % 0xAA) + 2] > v7)
        break;
      v11 = (char *)&v10[3 * (v9 % 0xAA)];
      *((_QWORD *)this + 6) -= *(_QWORD *)v11;
      *((_DWORD *)this + 17) -= *((_DWORD *)v11 + 2);
      --v6;
      *((_QWORD *)this + 4) = ++v9;
      *((_QWORD *)this + 5) = v6;
      if (v9 >= 0x154)
      {
        operator delete(*v8);
        v8 = (void **)(*((_QWORD *)this + 1) + 8);
        *((_QWORD *)this + 1) = v8;
        v6 = *((_QWORD *)this + 5);
        v9 = *((_QWORD *)this + 4) - 170;
        *((_QWORD *)this + 4) = v9;
      }
    }
    while (v6);
  }
  if (*((_QWORD *)this + 7) == -1 || !*((_DWORD *)this + 17))
  {
    *((_QWORD *)this + 7) = v3;
    v12 = (char *)*((_QWORD *)this + 1);
    v13 = *((_QWORD *)this + 4);
    if (!v6)
      goto LABEL_18;
  }
  else
  {
    v12 = (char *)*((_QWORD *)this + 1);
    v13 = *((_QWORD *)this + 4);
    if (!v6)
      goto LABEL_18;
  }
  v14 = v6 + v13 - 1;
  v15 = *(_QWORD *)&v12[8 * (v14 / 0xAA)];
  v16 = v14 % 0xAA;
  v17 = *(_QWORD *)(v15 + 24 * v16 + 16);
  if (v17 == v3)
  {
    v18 = (uint64_t *)(v15 + 24 * v16);
    v19 = *v18;
    v20 = *((_DWORD *)v18 + 2) + 1;
    goto LABEL_67;
  }
  if (v17 > v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v21, v22, v23, v24, v25, v26, v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/rtc_base/rate_statistics.cc");
    v13 = *((_QWORD *)this + 4);
    v6 = *((_QWORD *)this + 5);
    v12 = (char *)*((_QWORD *)this + 1);
    v3 = *(_QWORD *)(*(_QWORD *)&v12[8 * ((v6 + v13 - 1) / 0xAA)] + 24 * ((v6 + v13 - 1) % 0xAA) + 16);
  }
LABEL_18:
  v28 = (char *)*((_QWORD *)this + 2);
  v29 = (v28 - v12) >> 3;
  v30 = 170 * v29 - 1;
  v31 = v28 - v12;
  if (v28 == v12)
    v30 = 0;
  if (v30 == v13 + v6)
  {
    if (v13 >= 0xAA)
    {
      v32 = v3;
      *((_QWORD *)this + 4) = v13 - 170;
      v33 = v12 + 8;
      v34 = *(_QWORD *)v12;
      *((_QWORD *)this + 1) = v12 + 8;
      if (v28 != *((char **)this + 3))
        goto LABEL_23;
      v46 = *(char **)this;
      if ((unint64_t)v33 > *(_QWORD *)this)
      {
        v47 = (uint64_t)&v33[-*(_QWORD *)this] >> 3;
        if (v47 >= -1)
          v48 = v47 + 1;
        else
          v48 = v47 + 2;
        v49 = v48 >> 1;
        v50 = -v49;
        v51 = &v33[-8 * v49];
        v52 = v28 - v33;
        if (v28 != v33)
        {
          memmove(&v33[-8 * v49], v12 + 8, v28 - v33);
          v28 = (char *)*((_QWORD *)this + 1);
        }
        v53 = &v28[8 * v50];
        v28 = &v51[v52];
        *((_QWORD *)this + 1) = v53;
        *((_QWORD *)this + 2) = &v51[v52];
        goto LABEL_24;
      }
      v58 = (v28 - v46) >> 2;
      if (v28 == v46)
        v58 = 1;
      if (!(v58 >> 61))
      {
        v59 = v58 >> 2;
        v60 = 8 * v58;
        v61 = (char *)operator new(8 * v58);
        v62 = &v61[8 * v59];
        v64 = v28 - v33;
        v63 = v28 == v33;
        v28 = v62;
        if (v63)
          goto LABEL_104;
        v28 = &v62[v64 & 0xFFFFFFFFFFFFFFF8];
        v65 = v64 - 8;
        if ((unint64_t)(v64 - 8) >= 0x38)
        {
          v104 = &v61[8 * v59];
          v66 = v104;
          if ((unint64_t)(v104 - v33) >= 0x20)
          {
            v105 = (v65 >> 3) + 1;
            v106 = 8 * (v105 & 0x3FFFFFFFFFFFFFFCLL);
            v66 = &v62[v106];
            v33 += v106;
            v107 = (__int128 *)(v12 + 24);
            v108 = v104 + 16;
            v109 = v105 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v110 = *v107;
              *(v108 - 1) = *(v107 - 1);
              *v108 = v110;
              v107 += 2;
              v108 += 2;
              v109 -= 4;
            }
            while (v109);
            if (v105 == (v105 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_104:
              *(_QWORD *)this = v61;
              *((_QWORD *)this + 1) = v62;
              *((_QWORD *)this + 2) = v28;
              *((_QWORD *)this + 3) = &v61[v60];
              if (v46)
              {
                operator delete(v46);
                v28 = (char *)*((_QWORD *)this + 2);
              }
LABEL_23:
              if (v28)
              {
LABEL_24:
                *(_QWORD *)v28 = v34;
                *((_QWORD *)this + 2) += 8;
                v3 = v32;
LABEL_63:
                v13 = *((_QWORD *)this + 4);
                v6 = *((_QWORD *)this + 5);
                v12 = (char *)*((_QWORD *)this + 1);
                v28 = (char *)*((_QWORD *)this + 2);
                goto LABEL_64;
              }
LABEL_119:
              __break(1u);
              goto LABEL_120;
            }
          }
        }
        else
        {
          v66 = &v61[8 * v59];
        }
        do
        {
          v111 = *(_QWORD *)v33;
          v33 += 8;
          *(_QWORD *)v66 = v111;
          v66 += 8;
        }
        while (v66 != v28);
        goto LABEL_104;
      }
LABEL_120:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    v35 = (char *)*((_QWORD *)this + 3);
    v36 = (uint64_t)&v35[-*(_QWORD *)this];
    if (v29 >= (unint64_t)(v36 >> 3))
    {
      v130 = v3;
      v131 = a2;
      v37 = v36 >> 2;
      if (v35 == *(char **)this)
        v38 = 1;
      else
        v38 = v37;
      if (v38 >> 61)
        goto LABEL_120;
      v39 = (char *)operator new(8 * v38);
      v40 = &v39[8 * v29];
      v41 = &v39[8 * v38];
      v42 = operator new(0xFF0uLL);
      v43 = v42;
      if (v29 == v38)
      {
        a2 = v131;
        if (v31 < 1)
        {
          v67 = v31 >> 2;
          if (v28 == v12)
            v67 = 1;
          if (v67 >> 61)
            goto LABEL_120;
          v68 = 8 * v67;
          v40 = (char *)operator new(8 * v67);
          operator delete(v39);
          v41 = &v40[v68];
          v69 = (char *)*((_QWORD *)this + 1);
          v28 = (char *)*((_QWORD *)this + 2);
          v39 = v40;
          *(_QWORD *)v40 = v43;
          v45 = v40 + 8;
          if (v28 != v69)
            goto LABEL_71;
        }
        else
        {
          v44 = v29 + 2;
          if (v29 >= -1)
            v44 = v29 + 1;
          v40 -= 8 * (v44 >> 1);
          *(_QWORD *)v40 = v42;
          v45 = v40 + 8;
          if (v28 != v12)
          {
            while (1)
            {
LABEL_71:
              if (v40 == v39)
              {
                if (v45 >= v41)
                {
                  v82 = (v41 - v40) >> 2;
                  if (v41 == v40)
                    v82 = 1;
                  if (v82 >> 61)
                    goto LABEL_120;
                  v83 = (v82 + 3) >> 2;
                  v84 = 8 * v82;
                  v85 = (char *)operator new(8 * v82);
                  v39 = v85;
                  v78 = &v85[8 * v83];
                  v71 = v78;
                  v86 = v45 - v40;
                  if (v45 != v40)
                  {
                    v71 = &v78[v86 & 0xFFFFFFFFFFFFFFF8];
                    v87 = v86 - 8;
                    v88 = &v85[8 * v83];
                    v89 = v40;
                    if (v87 < 0x38)
                      goto LABEL_123;
                    v88 = &v85[8 * v83];
                    v89 = v40;
                    if ((unint64_t)(v88 - v40) < 0x20)
                      goto LABEL_123;
                    v90 = (v87 >> 3) + 1;
                    v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
                    v88 = &v78[v91];
                    v89 = &v40[v91];
                    v92 = (__int128 *)(v40 + 16);
                    v93 = &v85[8 * v83 + 16];
                    v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v95 = *v92;
                      *((_OWORD *)v93 - 1) = *(v92 - 1);
                      *(_OWORD *)v93 = v95;
                      v92 += 2;
                      v93 += 32;
                      v94 -= 4;
                    }
                    while (v94);
                    if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_123:
                      do
                      {
                        v96 = *(_QWORD *)v89;
                        v89 += 8;
                        *(_QWORD *)v88 = v96;
                        v88 += 8;
                      }
                      while (v88 != v71);
                    }
                  }
                  v41 = &v85[v84];
                  operator delete(v40);
                }
                else
                {
                  v80 = (v41 - v45) >> 3;
                  if (v80 >= -1)
                    v81 = v80 + 1;
                  else
                    v81 = v80 + 2;
                  v71 = &v45[8 * (v81 >> 1)];
                  v78 = &v40[8 * (v81 >> 1)];
                  if (v45 == v40)
                  {
                    v39 = v45;
                  }
                  else
                  {
                    memmove(&v40[8 * (v81 >> 1)], v40, v45 - v40);
                    v39 = v40;
                  }
                }
              }
              else
              {
                v78 = v40;
                v71 = v45;
              }
              v79 = *((_QWORD *)v28 - 1);
              v28 -= 8;
              *((_QWORD *)v78 - 1) = v79;
              v70 = v78 - 8;
              v45 = v71;
              v40 = v70;
              if (v28 == *((char **)this + 1))
                goto LABEL_61;
            }
          }
        }
      }
      else
      {
        a2 = v131;
        *(_QWORD *)v40 = v42;
        v45 = v40 + 8;
        if (v28 != v12)
          goto LABEL_71;
      }
      v70 = v40;
      v71 = v45;
LABEL_61:
      v72 = *(void **)this;
      *(_QWORD *)this = v39;
      *((_QWORD *)this + 1) = v70;
      *((_QWORD *)this + 2) = v71;
      *((_QWORD *)this + 3) = v41;
      v3 = v130;
      if (v72)
        operator delete(v72);
      goto LABEL_63;
    }
    if (v35 != v28)
    {
      v132 = operator new(0xFF0uLL);
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_back((char **)this, &v132);
      goto LABEL_63;
    }
    v132 = operator new(0xFF0uLL);
    std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)this, &v132);
    v54 = (_QWORD *)*((_QWORD *)this + 1);
    v55 = (char *)*((_QWORD *)this + 2);
    v56 = (char *)(v54 + 1);
    v57 = *v54;
    *((_QWORD *)this + 1) = v54 + 1;
    if (v55 != *((char **)this + 3))
      goto LABEL_48;
    v97 = *(char **)this;
    if ((unint64_t)v56 > *(_QWORD *)this)
    {
      v98 = (uint64_t)&v56[-*(_QWORD *)this] >> 3;
      if (v98 >= -1)
        v99 = v98 + 1;
      else
        v99 = v98 + 2;
      v100 = v99 >> 1;
      v101 = -v100;
      v102 = &v56[-8 * v100];
      v103 = v55 - v56;
      if (v55 != v56)
      {
        memmove(&v56[-8 * v100], v56, v55 - v56);
        v56 = (char *)*((_QWORD *)this + 1);
      }
      v55 = &v102[v103];
      *((_QWORD *)this + 1) = &v56[8 * v101];
      *((_QWORD *)this + 2) = &v102[v103];
      goto LABEL_49;
    }
    v112 = (v55 - v97) >> 2;
    if (v55 == v97)
      v112 = 1;
    if (v112 >> 61)
      goto LABEL_120;
    v113 = v3;
    v114 = a2;
    v115 = v112 >> 2;
    v116 = 8 * v112;
    v117 = (char *)operator new(8 * v112);
    v118 = &v117[8 * v115];
    v119 = v55 - v56;
    v63 = v55 == v56;
    v55 = v118;
    if (!v63)
    {
      v55 = &v118[v119 & 0xFFFFFFFFFFFFFFF8];
      v120 = v119 - 8;
      if ((unint64_t)(v119 - 8) < 0x38)
      {
        v121 = &v117[8 * v115];
        do
        {
LABEL_116:
          v129 = *(_QWORD *)v56;
          v56 += 8;
          *(_QWORD *)v121 = v129;
          v121 += 8;
        }
        while (v121 != v55);
        goto LABEL_117;
      }
      v122 = &v117[8 * v115];
      v121 = v122;
      if ((unint64_t)(v122 - v56) < 0x20)
        goto LABEL_116;
      v123 = (v120 >> 3) + 1;
      v124 = 8 * (v123 & 0x3FFFFFFFFFFFFFFCLL);
      v121 = &v118[v124];
      v56 += v124;
      v125 = (__int128 *)(v54 + 3);
      v126 = v122 + 16;
      v127 = v123 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v128 = *v125;
        *(v126 - 1) = *(v125 - 1);
        *v126 = v128;
        v125 += 2;
        v126 += 2;
        v127 -= 4;
      }
      while (v127);
      if (v123 != (v123 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_116;
    }
LABEL_117:
    *(_QWORD *)this = v117;
    *((_QWORD *)this + 1) = v118;
    *((_QWORD *)this + 2) = v55;
    *((_QWORD *)this + 3) = &v117[v116];
    a2 = v114;
    v3 = v113;
    if (v97)
    {
      operator delete(v97);
      v55 = (char *)*((_QWORD *)this + 2);
    }
LABEL_48:
    if (!v55)
      goto LABEL_119;
LABEL_49:
    *(_QWORD *)v55 = v57;
    *((_QWORD *)this + 2) += 8;
    goto LABEL_63;
  }
LABEL_64:
  if (v28 == v12)
    goto LABEL_119;
  v73 = v6 + v13;
  v74 = v6 + v13;
  v15 = *(_QWORD *)&v12[8 * ((v6 + v13) / 0xAA)];
  if (!v15)
    goto LABEL_119;
  v19 = 0;
  v16 = v73 - 170 * (v74 / 0xAA);
  v75 = v15 + 24 * v16;
  *(_QWORD *)v75 = 0;
  *(_DWORD *)(v75 + 8) = 0;
  *(_QWORD *)(v75 + 16) = v3;
  *((_QWORD *)this + 5) = v6 + 1;
  v20 = 1;
LABEL_67:
  v76 = v15 + 24 * v16;
  *(_QWORD *)v76 = v19 + a2;
  *(_DWORD *)(v76 + 8) = v20;
  v77 = *((_QWORD *)this + 6);
  if ((v77 ^ 0x7FFFFFFFFFFFFFFFLL) <= a2)
    *((_BYTE *)this + 64) = 1;
  else
    *((_QWORD *)this + 6) = v77 + a2;
  ++*((_DWORD *)this + 17);
}

unint64_t webrtc::RateStatistics::Rate(webrtc::RateStatistics *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  float v15;

  v4 = *((_QWORD *)this + 5);
  if (v4)
  {
    v5 = a2 - *((_QWORD *)this + 11);
    v6 = (void **)*((_QWORD *)this + 1);
    v7 = *((_QWORD *)this + 4);
    do
    {
      v8 = v6[v7 / 0xAA];
      if (v8[3 * (v7 % 0xAA) + 2] > v5)
        break;
      v9 = (char *)&v8[3 * (v7 % 0xAA)];
      *((_QWORD *)this + 6) -= *(_QWORD *)v9;
      *((_DWORD *)this + 17) -= *((_DWORD *)v9 + 2);
      --v4;
      *((_QWORD *)this + 4) = ++v7;
      *((_QWORD *)this + 5) = v4;
      if (v7 >= 0x154)
      {
        operator delete(*v6);
        v6 = (void **)(*((_QWORD *)this + 1) + 8);
        *((_QWORD *)this + 1) = v6;
        v4 = *((_QWORD *)this + 5);
        v7 = *((_QWORD *)this + 4) - 170;
        *((_QWORD *)this + 4) = v7;
      }
    }
    while (v4);
  }
  v10 = *((_QWORD *)this + 7);
  if (v10 == -1)
    return 0;
  v11 = *((_QWORD *)this + 11);
  v12 = v10 > a2 - v11 ? (a2 - v10 + 1) : v11;
  v13 = *((_DWORD *)this + 17);
  v14 = !v13 || (int)v12 < 2;
  if (v14 || v13 <= 1 && v11 > v12)
    return 0;
  if (*((_BYTE *)this + 64))
    return 0;
  v15 = (float)((float)*((uint64_t *)this + 6) * (float)(*((float *)this + 18) / (float)(int)v12)) + 0.5;
  if (v15 > 9.2234e18)
    return 0;
  else
    return (uint64_t)v15 & 0xFFFFFFFFFFFFFF00 | (uint64_t)v15;
}

uint64_t webrtc::RateStatistics::SetWindowSize(webrtc::RateStatistics *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;

  if (a2 < 1)
    return 0;
  if (*((_QWORD *)this + 10) < a2)
    return 0;
  v5 = *((_QWORD *)this + 7);
  v6 = a3 - a2;
  if (v5 != -1)
  {
    if (v5 <= v6 + 1)
      v5 = v6 + 1;
    *((_QWORD *)this + 7) = v5;
  }
  *((_QWORD *)this + 11) = a2;
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    v8 = (void **)*((_QWORD *)this + 1);
    v9 = *((_QWORD *)this + 4);
    do
    {
      v10 = v8[v9 / 0xAA];
      if (v10[3 * (v9 % 0xAA) + 2] > v6)
        break;
      v11 = (char *)&v10[3 * (v9 % 0xAA)];
      *((_QWORD *)this + 6) -= *(_QWORD *)v11;
      *((_DWORD *)this + 17) -= *((_DWORD *)v11 + 2);
      --v7;
      *((_QWORD *)this + 4) = ++v9;
      *((_QWORD *)this + 5) = v7;
      if (v9 >= 0x154)
      {
        operator delete(*v8);
        v8 = (void **)(*((_QWORD *)this + 1) + 8);
        *((_QWORD *)this + 1) = v8;
        v7 = *((_QWORD *)this + 5);
        v9 = *((_QWORD *)this + 4) - 170;
        *((_QWORD *)this + 4) = v9;
      }
    }
    while (v7);
  }
  return 1;
}

void std::deque<webrtc::RateStatistics::Bucket>::__append_with_size[abi:sn180100]<std::__deque_iterator<webrtc::RateStatistics::Bucket,webrtc::RateStatistics::Bucket const*,webrtc::RateStatistics::Bucket const&,webrtc::RateStatistics::Bucket const* const*,long,170l>>(uint64_t a1, _QWORD *a2, __int128 *a3, unint64_t a4)
{
  unint64_t v4;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  BOOL v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  int64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 *v72;
  char *v73;
  uint64_t v74;
  __int128 v75;
  _QWORD *v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  __int128 *v95;
  char *v96;
  uint64_t v97;
  __int128 v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  size_t v106;
  unint64_t v107;
  unint64_t v108;
  char *v109;
  int64_t v110;
  unint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 *v118;
  char *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t i;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  char *v128;
  unint64_t v129;
  _QWORD *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  int64_t v138;
  char *v139;
  unint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  int64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  __int128 *v149;
  char *v150;
  uint64_t v151;
  __int128 v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  __int128 v157;
  __int128 *v158;
  unint64_t v159;
  uint64_t v160;
  char *v162;
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  void *v170;

  v4 = a4;
  v8 = *(char **)(a1 + 8);
  v9 = *(char **)(a1 + 16);
  v10 = (v9 - v8) >> 3;
  if (v9 == v8)
    v11 = 0;
  else
    v11 = 170 * v10 - 1;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = v13 + v12;
  v15 = v11 - (v13 + v12);
  v16 = a4 >= v15;
  v17 = a4 - v15;
  if (v17 == 0 || !v16)
    goto LABEL_143;
  if (v9 == v8)
    v18 = v17 + 1;
  else
    v18 = v17;
  if (v18 % 0xAA)
    v19 = v18 / 0xAA + 1;
  else
    v19 = v18 / 0xAA;
  if (v19 >= v12 / 0xAA)
    v20 = v12 / 0xAA;
  else
    v20 = v19;
  if (v19 <= v12 / 0xAA)
  {
    *(_QWORD *)(a1 + 32) = v12 - 170 * v20;
    if (!v20)
      goto LABEL_142;
    while (1)
    {
      while (1)
      {
        v26 = *(_QWORD **)(a1 + 8);
        v27 = (char *)(v26 + 1);
        v28 = *v26;
        *(_QWORD *)(a1 + 8) = v26 + 1;
        if (v9 != *(char **)(a1 + 24))
          goto LABEL_25;
        v29 = *(char **)a1;
        if ((unint64_t)v27 <= *(_QWORD *)a1)
          break;
        v30 = (uint64_t)&v27[-*(_QWORD *)a1] >> 3;
        if (v30 >= -1)
          v31 = v30 + 1;
        else
          v31 = v30 + 2;
        v32 = v31 >> 1;
        v33 = &v27[-8 * (v31 >> 1)];
        v34 = v9 - v27;
        if (v9 != v27)
        {
          memmove(&v27[-8 * (v31 >> 1)], v27, v9 - v27);
          v9 = *(char **)(a1 + 8);
        }
        *(_QWORD *)(a1 + 8) = &v9[-8 * v32];
        *(_QWORD *)(a1 + 16) = &v33[v34];
        *(_QWORD *)&v33[v34] = v28;
        v9 = (char *)(*(_QWORD *)(a1 + 16) + 8);
        *(_QWORD *)(a1 + 16) = v9;
        if (!--v20)
          goto LABEL_142;
      }
      v35 = (v9 - v29) >> 2;
      if (v9 == v29)
        v35 = 1;
      if (v35 >> 61)
        goto LABEL_188;
      v36 = v35 >> 2;
      v166 = 8 * v35;
      v37 = (char *)operator new(8 * v35);
      v38 = &v37[8 * v36];
      v40 = v9 - v27;
      v39 = v9 == v27;
      v9 = v38;
      if (!v39)
      {
        v9 = &v38[v40 & 0xFFFFFFFFFFFFFFF8];
        v41 = v40 - 8;
        if ((unint64_t)(v40 - 8) < 0x38)
        {
          v42 = &v37[8 * v36];
          do
          {
LABEL_46:
            v49 = *(_QWORD *)v27;
            v27 += 8;
            *(_QWORD *)v42 = v49;
            v42 += 8;
          }
          while (v42 != v9);
          goto LABEL_47;
        }
        v42 = &v37[8 * v36];
        if ((unint64_t)(v42 - v27) < 0x20)
          goto LABEL_46;
        v43 = (v41 >> 3) + 1;
        v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
        v42 = &v38[v44];
        v27 += v44;
        v45 = (__int128 *)(v26 + 3);
        v46 = &v37[8 * v36 + 16];
        v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v48 = *v45;
          *((_OWORD *)v46 - 1) = *(v45 - 1);
          *(_OWORD *)v46 = v48;
          v45 += 2;
          v46 += 32;
          v47 -= 4;
        }
        while (v47);
        if (v43 != (v43 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_46;
      }
LABEL_47:
      *(_QWORD *)a1 = v37;
      *(_QWORD *)(a1 + 8) = v38;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = &v37[v166];
      if (v29)
      {
        operator delete(v29);
        v9 = *(char **)(a1 + 16);
      }
LABEL_25:
      if (!v9)
      {
LABEL_187:
        __break(1u);
LABEL_188:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      *(_QWORD *)v9 = v28;
      v9 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v9;
      if (!--v20)
        goto LABEL_142;
    }
  }
  v21 = v19 - v20;
  v22 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
  if (v19 - v20 <= (v22 >> 3) - v10)
  {
    if (!v21)
      goto LABEL_141;
    while (*(_QWORD *)(a1 + 24) != *(_QWORD *)(a1 + 16))
    {
      v170 = operator new(0xFF0uLL);
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_back((char **)a1, &v170);
      --v19;
      if (!--v21)
      {
        v9 = *(char **)(a1 + 16);
LABEL_141:
        *(_QWORD *)(a1 + 32) -= 170 * v20;
        if (!v20)
          goto LABEL_142;
        goto LABEL_150;
      }
    }
    for (i = 0; i != v21; ++i)
    {
      v170 = operator new(0xFF0uLL);
      std::__split_buffer<std::unique_ptr<webrtc::RtpFrameObject> *,std::allocator<std::unique_ptr<webrtc::RtpFrameObject> *>>::push_front((void **)a1, &v170);
      v9 = *(char **)(a1 + 16);
      if (&v9[-*(_QWORD *)(a1 + 8)] == (char *)8)
        v123 = 169;
      else
        v123 = 170;
      v124 = v123 + *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = v124;
    }
    v20 = v19;
    *(_QWORD *)(a1 + 32) = v124 - 170 * v19;
    if (!v19)
      goto LABEL_142;
    while (1)
    {
LABEL_150:
      v130 = *(_QWORD **)(a1 + 8);
      v131 = (char *)(v130 + 1);
      v132 = *v130;
      *(_QWORD *)(a1 + 8) = v130 + 1;
      if (v9 != *(char **)(a1 + 24))
        goto LABEL_148;
      v133 = *(char **)a1;
      if ((unint64_t)v131 > *(_QWORD *)a1)
      {
        v134 = (uint64_t)&v131[-*(_QWORD *)a1] >> 3;
        if (v134 >= -1)
          v135 = v134 + 1;
        else
          v135 = v134 + 2;
        v136 = v135 >> 1;
        v137 = &v131[-8 * (v135 >> 1)];
        v138 = v9 - v131;
        if (v9 != v131)
        {
          memmove(&v131[-8 * (v135 >> 1)], v131, v9 - v131);
          v9 = *(char **)(a1 + 8);
        }
        v139 = &v9[-8 * v136];
        v9 = &v137[v138];
        *(_QWORD *)(a1 + 8) = v139;
        *(_QWORD *)(a1 + 16) = &v137[v138];
        goto LABEL_149;
      }
      v140 = (v9 - v133) >> 2;
      if (v9 == v133)
        v140 = 1;
      if (v140 >> 61)
        goto LABEL_188;
      v141 = v140 >> 2;
      v169 = 8 * v140;
      v142 = (char *)operator new(8 * v140);
      v143 = &v142[8 * v141];
      v144 = v9 - v131;
      v39 = v9 == v131;
      v9 = v143;
      if (!v39)
      {
        v9 = &v143[v144 & 0xFFFFFFFFFFFFFFF8];
        v145 = v144 - 8;
        if ((unint64_t)(v144 - 8) < 0x38)
        {
          v146 = &v142[8 * v141];
          do
          {
LABEL_168:
            v153 = *(_QWORD *)v131;
            v131 += 8;
            *(_QWORD *)v146 = v153;
            v146 += 8;
          }
          while (v146 != v9);
          goto LABEL_169;
        }
        v146 = &v142[8 * v141];
        if ((unint64_t)(v146 - v131) < 0x20)
          goto LABEL_168;
        v147 = (v145 >> 3) + 1;
        v148 = 8 * (v147 & 0x3FFFFFFFFFFFFFFCLL);
        v146 = &v143[v148];
        v131 += v148;
        v149 = (__int128 *)(v130 + 3);
        v150 = &v142[8 * v141 + 16];
        v151 = v147 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v152 = *v149;
          *((_OWORD *)v150 - 1) = *(v149 - 1);
          *(_OWORD *)v150 = v152;
          v149 += 2;
          v150 += 32;
          v151 -= 4;
        }
        while (v151);
        if (v147 != (v147 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_168;
      }
LABEL_169:
      *(_QWORD *)a1 = v142;
      *(_QWORD *)(a1 + 8) = v143;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = &v142[v169];
      if (v133)
      {
        operator delete(v133);
        v9 = *(char **)(a1 + 16);
      }
LABEL_148:
      if (!v9)
        goto LABEL_187;
LABEL_149:
      *(_QWORD *)v9 = v132;
      v9 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v9;
      if (!--v20)
        goto LABEL_142;
    }
  }
  v23 = v22 >> 2;
  if (v23 <= v21 + v10)
    v24 = v21 + v10;
  else
    v24 = v23;
  if (v24)
  {
    if (v24 >> 61)
      goto LABEL_188;
    v25 = (char *)operator new(8 * v24);
  }
  else
  {
    v25 = 0;
  }
  v160 = -170 * v20;
  v50 = &v25[8 * (v10 - v20)];
  v51 = &v25[8 * v24];
  v9 = v50;
  do
  {
    v52 = operator new(0xFF0uLL);
    if (v9 != v51)
      goto LABEL_74;
    v167 = v25;
    if (v50 > v25)
    {
      v53 = (v50 - v25) >> 3;
      if (v53 >= -1)
        v54 = v53 + 1;
      else
        v54 = v53 + 2;
      v55 = v54 >> 1;
      v56 = v51;
      v57 = &v50[-8 * (v54 >> 1)];
      v58 = v56;
      v162 = v56;
      v59 = v56 - v50;
      if (v56 != v50)
      {
        memmove(v57, v50, v56 - v50);
        v58 = v50;
      }
      v60 = -v55;
      v9 = &v57[v59];
      v50 = &v58[8 * v60];
      v51 = v162;
      v25 = v167;
      if (!v9)
        goto LABEL_187;
      goto LABEL_75;
    }
    v61 = (v51 - v25) >> 2;
    if (v51 == v25)
      v61 = 1;
    if (v61 >> 61)
      goto LABEL_188;
    v62 = v61 >> 2;
    v163 = 8 * v61;
    v63 = (char *)operator new(8 * v61);
    v64 = &v63[8 * v62];
    v9 = v64;
    v65 = v51 - v50;
    if (v51 != v50)
    {
      v9 = &v64[v65 & 0xFFFFFFFFFFFFFFF8];
      v66 = v65 - 8;
      if (v66 >= 0x38 && (unint64_t)(&v63[8 * v62] - v50) >= 0x20)
      {
        v70 = (v66 >> 3) + 1;
        v71 = 8 * (v70 & 0x3FFFFFFFFFFFFFFCLL);
        v67 = &v64[v71];
        v68 = &v50[v71];
        v72 = (__int128 *)(v50 + 16);
        v73 = &v63[8 * v62 + 16];
        v74 = v70 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v75 = *v72;
          *((_OWORD *)v73 - 1) = *(v72 - 1);
          *(_OWORD *)v73 = v75;
          v72 += 2;
          v73 += 32;
          v74 -= 4;
        }
        while (v74);
        if (v70 == (v70 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_72;
      }
      else
      {
        v67 = &v63[8 * v62];
        v68 = v50;
      }
      do
      {
        v69 = *(_QWORD *)v68;
        v68 += 8;
        *(_QWORD *)v67 = v69;
        v67 += 8;
      }
      while (v67 != v9);
    }
LABEL_72:
    v51 = &v63[v163];
    if (v167)
    {
      v25 = v63;
      v50 = v64;
      operator delete(v167);
LABEL_74:
      if (!v9)
        goto LABEL_187;
      goto LABEL_75;
    }
    v50 = v64;
    v25 = v63;
    if (!v9)
      goto LABEL_187;
LABEL_75:
    *(_QWORD *)v9 = v52;
    v9 += 8;
    --v21;
  }
  while (v21);
  v76 = *(_QWORD **)(a1 + 8);
  if (v20)
  {
    while (v9 != v51)
    {
LABEL_111:
      *(_QWORD *)v9 = *v76;
      v9 += 8;
      v76 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v76;
      if (!--v20)
        goto LABEL_84;
    }
    v168 = v25;
    if (v50 > v25)
    {
      v101 = (v50 - v25) >> 3;
      if (v101 >= -1)
        v102 = v101 + 1;
      else
        v102 = v101 + 2;
      v103 = v102 >> 1;
      v104 = &v50[-8 * (v102 >> 1)];
      v105 = v51;
      v164 = v51;
      v106 = v51 - v50;
      if (v106)
      {
        memmove(v104, v50, v106);
        v105 = v50;
      }
      v9 = &v104[v106];
      v100 = &v105[-8 * v103];
      v51 = v164;
LABEL_110:
      v50 = v100;
      v25 = v168;
      if (!v9)
        goto LABEL_187;
      goto LABEL_111;
    }
    v107 = (v51 - v25) >> 2;
    if (v51 == v25)
      v107 = 1;
    if (v107 >> 61)
      goto LABEL_188;
    v108 = v107 >> 2;
    v165 = 8 * v107;
    v109 = (char *)operator new(8 * v107);
    v100 = &v109[8 * v108];
    v9 = v100;
    v110 = v51 - v50;
    if (v51 != v50)
    {
      v9 = &v100[v110 & 0xFFFFFFFFFFFFFFF8];
      v111 = v110 - 8;
      if (v111 >= 0x38 && (unint64_t)(&v109[8 * v108] - v50) >= 0x20)
      {
        v116 = (v111 >> 3) + 1;
        v117 = 8 * (v116 & 0x3FFFFFFFFFFFFFFCLL);
        v112 = &v100[v117];
        v113 = &v50[v117];
        v118 = (__int128 *)(v50 + 16);
        v119 = &v109[8 * v108 + 16];
        v120 = v116 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v121 = *v118;
          *((_OWORD *)v119 - 1) = *(v118 - 1);
          *(_OWORD *)v119 = v121;
          v118 += 2;
          v119 += 32;
          v120 -= 4;
        }
        while (v120);
        if (v116 == (v116 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_127;
      }
      else
      {
        v112 = &v109[8 * v108];
        v113 = v50;
      }
      do
      {
        v114 = *(_QWORD *)v113;
        v113 += 8;
        *(_QWORD *)v112 = v114;
        v112 += 8;
      }
      while (v112 != v9);
    }
LABEL_127:
    v51 = &v109[v165];
    if (v168)
    {
      v115 = v109;
      operator delete(v168);
      v168 = v115;
    }
    else
    {
      v168 = v109;
    }
    goto LABEL_110;
  }
LABEL_84:
  v77 = *(_QWORD **)(a1 + 16);
  if (v77 != v76)
  {
    do
    {
      if (v50 == v25)
      {
        if (v9 >= v51)
        {
          v84 = (v51 - v25) >> 2;
          if (v51 == v25)
            v84 = 1;
          if (v84 >> 61)
            goto LABEL_188;
          v85 = (v84 + 3) >> 2;
          v86 = 8 * v84;
          v87 = (char *)operator new(8 * v84);
          v88 = v87;
          v50 = &v87[8 * v85];
          v89 = v9 - v25;
          v39 = v9 == v25;
          v9 = v50;
          if (!v39)
          {
            v9 = &v50[v89 & 0xFFFFFFFFFFFFFFF8];
            v90 = v89 - 8;
            v91 = &v87[8 * v85];
            v92 = v25;
            if (v90 < 0x38)
              goto LABEL_191;
            v91 = &v87[8 * v85];
            v92 = v25;
            if ((unint64_t)(v91 - v25) < 0x20)
              goto LABEL_191;
            v93 = (v90 >> 3) + 1;
            v94 = 8 * (v93 & 0x3FFFFFFFFFFFFFFCLL);
            v91 = &v50[v94];
            v92 = &v25[v94];
            v95 = (__int128 *)(v25 + 16);
            v96 = &v87[8 * v85 + 16];
            v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v98 = *v95;
              *((_OWORD *)v96 - 1) = *(v95 - 1);
              *(_OWORD *)v96 = v98;
              v95 += 2;
              v96 += 32;
              v97 -= 4;
            }
            while (v97);
            if (v93 != (v93 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_191:
              do
              {
                v99 = *(_QWORD *)v92;
                v92 += 8;
                *(_QWORD *)v91 = v99;
                v91 += 8;
              }
              while (v91 != v9);
            }
          }
          v51 = &v87[v86];
          if (v25)
            operator delete(v25);
          v25 = v88;
        }
        else
        {
          v80 = (v51 - v9) >> 3;
          if (v80 >= -1)
            v81 = v80 + 1;
          else
            v81 = v80 + 2;
          v82 = v81 >> 1;
          v50 = &v25[8 * (v81 >> 1)];
          v83 = v25;
          if (v9 != v25)
          {
            memmove(v50, v25, v9 - v25);
            v83 = v9;
          }
          v9 = &v83[8 * v82];
        }
      }
      v79 = *--v77;
      *((_QWORD *)v50 - 1) = v79;
      v50 -= 8;
    }
    while (v77 != *(_QWORD **)(a1 + 8));
  }
  v78 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v50;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v51;
  *(_QWORD *)(a1 + 32) += v160;
  if (v78)
  {
    operator delete(v78);
    v9 = *(char **)(a1 + 16);
  }
LABEL_142:
  v13 = *(_QWORD *)(a1 + 40);
  v8 = *(char **)(a1 + 8);
  v14 = *(_QWORD *)(a1 + 32) + v13;
  v4 = a4;
LABEL_143:
  v125 = &v8[8 * (v14 / 0xAA)];
  if (v9 == v8)
  {
    v126 = 0;
    if (v4)
      goto LABEL_145;
  }
  else
  {
    v126 = *(_QWORD *)v125 + 24 * (v14 % 0xAA);
    if (v4)
    {
LABEL_145:
      v127 = v4 - 0x5555555555555555 * ((uint64_t)(v126 - *(_QWORD *)v125) >> 3);
      if (v127 < 1)
      {
        v154 = 169 - v127;
        v128 = &v125[-8 * (v154 / 0xAA)];
        v129 = *(_QWORD *)v128 + 24 * (170 * (v154 / 0xAA) - v154) + 4056;
        if (v126 != v129)
        {
          do
          {
LABEL_174:
            v155 = v129;
            if (v125 != v128)
              v155 = *(_QWORD *)v125 + 4080;
            if (v126 == v155)
            {
              *(_QWORD *)(a1 + 40) = v13;
              if (v125 == v128)
                return;
            }
            else
            {
              v156 = v126;
              do
              {
                if (!v156)
                  goto LABEL_187;
                v157 = *a3;
                *(_QWORD *)(v156 + 16) = *((_QWORD *)a3 + 2);
                *(_OWORD *)v156 = v157;
                a3 = (__int128 *)((char *)a3 + 24);
                if ((__int128 *)((char *)a3 - *a2) == (__int128 *)4080)
                {
                  v158 = (__int128 *)a2[1];
                  ++a2;
                  a3 = v158;
                }
                v156 += 24;
              }
              while (v156 != v155);
              v13 = *(_QWORD *)(a1 + 40) - 0x5555555555555555 * ((uint64_t)(v155 - v126) >> 3);
              *(_QWORD *)(a1 + 40) = v13;
              if (v125 == v128)
                return;
            }
            v159 = *((_QWORD *)v125 + 1);
            v125 += 8;
            v126 = v159;
          }
          while (v159 != v129);
        }
      }
      else
      {
        v128 = &v125[8 * (v127 / 0xAAuLL)];
        v129 = *(_QWORD *)v128 + 24 * (v127 % 0xAAuLL);
        if (v126 != v129)
          goto LABEL_174;
      }
    }
  }
}

void rtc::RateTracker::~RateTracker(rtc::RateTracker *this)
{
  uint64_t v1;

  *(_QWORD *)this = &off_24C0BAFD8;
  v1 = *((_QWORD *)this + 3);
  if (v1)
    MEMORY[0x20BD0ADD4](v1, 0x1000C8000313F17);
}

{
  uint64_t v1;

  *(_QWORD *)this = &off_24C0BAFD8;
  v1 = *((_QWORD *)this + 3);
  if (v1)
    MEMORY[0x20BD0ADD4](v1, 0x1000C8000313F17);
  JUMPOUT(0x20BD0ADECLL);
}

double rtc::RateTracker::ComputeRateForInterval(rtc::RateTracker *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t i;

  if (*((_QWORD *)this + 6) == -1)
    return 0.0;
  v4 = (*(uint64_t (**)(rtc::RateTracker *))(*(_QWORD *)this + 16))(this);
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2);
  if ((uint64_t)(v6 * v5) >= a2)
    v7 = a2;
  else
    v7 = v6 * v5;
  v8 = *((_QWORD *)this + 7);
  if (v4 <= v7 + v8)
  {
    v7 = v4 - v8;
    if (v4 - v8 < v5)
      return 0.0;
    v11 = 0;
    v10 = v6 - *((_QWORD *)this + 5);
    if (!v7)
      return 0.0;
  }
  else
  {
    v9 = v6 * v5 + v4 - *((_QWORD *)this + 6) - v7;
    v10 = v9 / v5;
    v11 = v9 % v5;
    if (!v7)
      return 0.0;
  }
  if (v10 > v6)
    return 0.0;
  v13 = *((_QWORD *)this + 5) + 1;
  v14 = v13 + v10;
  v15 = v6 + 1;
  v16 = v14 % (v6 + 1);
  v17 = *((_QWORD *)this + 3);
  v18 = *(_QWORD *)(v17 + 8 * v16) * (v5 - v11) + (v5 >> 1);
  if (v16 == v6)
    v19 = 0;
  else
    v19 = v16 + 1;
  for (i = v18 / v5; v19 != v13 % v15; v19 = (v19 + 1) % v15)
    i += *(_QWORD *)(v17 + 8 * v19);
  return (double)(1000 * i) / (double)v7;
}

uint64_t rtc::RateTracker::Time(rtc::RateTracker *this)
{
  uint64_t v1;

  if (rtc::g_clock)
  {
    v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v1 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  return v1 / 1000000;
}

_DWORD *absl::raw_log_internal::RawLog(int a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v11;
  signed int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *result;
  size_t v18;
  int v19;
  _BYTE __size[12];
  char __s[3000];
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&__size[4] = __s;
  *(_DWORD *)__size = 3000;
  v12 = *(_DWORD *)__size;
  if ((*(_DWORD *)__size & 0x80000000) != 0)
    goto LABEL_10;
  v13 = *(_QWORD *)&__size[4];
  v14 = vsnprintf(*(char **)&__size[4], *(unsigned int *)__size, a4, &a9);
  v15 = v12 - 26;
  if (v12 < 0x1A)
    v15 = 0;
  v16 = v14 >= 0 && v14 <= v12 ? v14 : v15;
  *(_DWORD *)__size = v12 - v16;
  *(_QWORD *)&__size[4] = v13 + v16;
  if (v14 < 0 || v14 > v12)
  {
LABEL_10:
    result = (_DWORD *)strlen(__s);
    if (!result)
      goto LABEL_12;
    goto LABEL_11;
  }
  result = (_DWORD *)strlen(__s);
  if (result)
  {
LABEL_11:
    v18 = (size_t)result;
    v19 = *__error();
    write(2, __s, v18);
    result = __error();
    *result = v19;
  }
LABEL_12:
  if (a1 == 3)
    abort();
  return result;
}

char **absl::raw_log_internal::`anonymous namespace'::DoRawLog(char **this, char **a2, const char *a3, const char *a4, ...)
{
  char **v5;
  va_list va;

  va_start(va, a4);
  if ((*(_DWORD *)a2 & 0x80000000) == 0)
  {
    v5 = this;
    this = (char **)vsnprintf(*this, *(int *)a2, a3, va);
    if ((this & 0x80000000) == 0 && *(_DWORD *)a2 >= (int)this)
    {
      *(_DWORD *)a2 -= (_DWORD)this;
      *v5 += this;
    }
  }
  return this;
}

uint64_t WebRtcSpl_RealForwardFFT(uint64_t a1, uint64_t a2)
{
  int *v2;
  void *v3;
  void *v4;
  int16x8_t *v5;
  int16x8_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int16x8_t *v12;
  __int16 *v13;
  __int128 v14;
  uint64_t v15;
  int16x8_t v16;
  __int16 *v17;
  uint64_t v18;
  __int16 *v19;
  _WORD *v20;
  __int16 v21;
  unint64_t v22;
  char *(__cdecl *v23)(const char *, int);
  unint64_t v24;
  __int16 *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD __src[8];
  _QWORD v37[509];
  int16x8x2_t v38;

  v2 = (int *)MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v6 = v5;
  v37[508] = *MEMORY[0x24BDAC8D0];
  v7 = *v2;
  v8 = 1 << *v2;
  if (*v2 == 31)
    goto LABEL_26;
  if ((int)v8 <= 1)
    v9 = 1;
  else
    v9 = v8;
  if (v9 < 0x10)
  {
    v10 = 0;
    v11 = 0;
LABEL_10:
    v18 = v9 - v10;
    v19 = &v6->i16[v10];
    v20 = (_WORD *)&__src[v11] + 1;
    do
    {
      v21 = *v19++;
      *(v20 - 1) = v21;
      *v20 = 0;
      v20 += 2;
      --v18;
    }
    while (v18);
    goto LABEL_12;
  }
  v10 = v9 & 0x7FFFFFF0;
  v11 = v10;
  v12 = v6 + 1;
  v13 = (__int16 *)v37;
  v14 = 0uLL;
  v15 = v10;
  do
  {
    v16 = v12[-1];
    v38.val[0] = *v12;
    v17 = v13 - 16;
    vst2q_s16(v17, *(int16x8x2_t *)(&v14 - 1));
    v38.val[1] = 0uLL;
    vst2q_s16(v13, v38);
    v12 += 2;
    v13 += 32;
    v15 -= 16;
  }
  while (v15);
  if ((v9 & 0x7FFFFFF0) == 0)
    goto LABEL_10;
LABEL_12:
  if ((v7 - 7) > 1)
  {
    if ((int)v8 >= 2)
    {
      v29 = 0;
      v30 = 1;
      do
      {
        v31 = 1 << v7;
        do
          LODWORD(v31) = v31 >> 1;
        while ((int)v31 > (int)v8 + ~v29);
        v29 = ((v31 - 1) & v29) + v31;
        if (v30 < v29)
        {
          v32 = __src[v30];
          v33 = v29;
          __src[v30] = __src[v33];
          __src[v33] = v32;
        }
        ++v30;
      }
      while (v30 != v8);
    }
  }
  else
  {
    v22 = 0;
    v23 = index_7;
    if (v7 == 8)
      v23 = index_8;
    v24 = 112;
    if (v7 == 8)
      v24 = 240;
    do
    {
      v25 = (__int16 *)((char *)v23 + 2 * v22);
      v26 = *v25;
      v27 = __src[v26];
      v28 = v25[1];
      __src[v26] = __src[v28];
      __src[v28] = v27;
      v22 += 2;
    }
    while (v22 < v24);
  }
LABEL_26:
  v34 = WebRtcSpl_ComplexFFT((uint64_t)__src, v7, 1);
  memcpy(v4, __src, 2 * ((int)v8 + 2));
  return v34;
}

uint64_t WebRtcSpl_RealInverseFFT(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  const __int16 *v13;
  __int16 *v14;
  unint64_t v15;
  int8x16_t v16;
  __int16 *v17;
  __int16 *v18;
  __int16 v19;
  unint64_t v20;
  char *(__cdecl *v21)(const char *, int);
  unint64_t v22;
  __int16 *v23;
  uint64_t v24;
  __int32 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int32 v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int128 *v37;
  const __int16 *v38;
  uint64_t v39;
  const __int16 *v40;
  unsigned __int128 v41;
  unsigned __int128 v42;
  uint64_t v43;
  __int16 *v44;
  __int16 *v45;
  __int16 v46;
  int16x8_t v47;
  _QWORD v48[509];
  int16x8x2_t v49;
  int16x8x2_t v50;

  v2 = (unsigned int *)MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v6 = v5;
  v48[508] = *MEMORY[0x24BDAC8D0];
  v7 = *v2;
  v8 = 1 << *v2;
  __memcpy_chk();
  v9 = 2 << v7;
  if ((int)v8 + 2 < 2 << v7)
  {
    v10 = (int)v8 + 2;
    v11 = v9 - (uint64_t)(int)v8 - 3;
    if (v11 < 0xE)
      goto LABEL_6;
    v12 = (v11 >> 1) + 1;
    v10 += 2 * (v12 & 0xFFFFFFFFFFFFFFF8);
    v13 = (const __int16 *)(v6 - 2 * (int)v8 + 2 * v9 - 32);
    v14 = &v47.i16[(int)v8 + 2];
    v15 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v49 = vld2q_s16(v13);
      v16 = (int8x16_t)vrev64q_s16(v49.val[0]);
      v50.val[0] = (int16x8_t)vextq_s8(v16, v16, 8uLL);
      v49.val[0] = vrev64q_s16(vnegq_s16(v49.val[1]));
      v50.val[1] = (int16x8_t)vextq_s8((int8x16_t)v49.val[0], (int8x16_t)v49.val[0], 8uLL);
      vst2q_s16(v14, v50);
      v14 += 16;
      v13 -= 16;
      v15 -= 8;
    }
    while (v15);
    if (v12 != (v12 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_6:
      v17 = (__int16 *)(v6 - 2 * v10 + 2 * v9 + 2);
      v18 = &v47.i16[v10 + 1];
      do
      {
        *(v18 - 1) = *(v17 - 1);
        v19 = *v17;
        v17 -= 2;
        *v18 = -v19;
        v18 += 2;
        v10 += 2;
      }
      while (v10 < v9);
    }
  }
  if (v7 - 7 > 1)
  {
    if ((int)v8 >= 2)
    {
      v27 = 0;
      v28 = 1;
      do
      {
        v29 = 1 << v7;
        do
          LODWORD(v29) = v29 >> 1;
        while ((int)v29 > (int)v8 + ~v27);
        v27 = ((v29 - 1) & v27) + v29;
        if (v28 < v27)
        {
          v30 = v47.i32[v28];
          v31 = v27;
          v47.i32[v28] = v47.i32[v31];
          v47.i32[v31] = v30;
        }
        ++v28;
      }
      while (v28 != v8);
    }
  }
  else
  {
    v20 = 0;
    v21 = index_7;
    if (v7 == 8)
      v21 = index_8;
    v22 = 112;
    if (v7 == 8)
      v22 = 240;
    do
    {
      v23 = (__int16 *)((char *)v21 + 2 * v20);
      v24 = *v23;
      v25 = v47.i32[v24];
      v26 = v23[1];
      v47.i32[v24] = v47.i32[v26];
      v47.i32[v26] = v25;
      v20 += 2;
    }
    while (v20 < v22);
  }
  result = WebRtcSpl_ComplexIFFT(&v47, v7, 1);
  if (v7 != 31)
  {
    if ((int)v8 <= 1)
      v33 = 1;
    else
      v33 = v8;
    if (v33 >= 0x11)
    {
      v36 = v33 & 0xF;
      if ((v33 & 0xF) == 0)
        v36 = 16;
      v34 = v33 - v36;
      v35 = 2 * v34;
      v37 = (unsigned __int128 *)(v4 + 16);
      v38 = (const __int16 *)v48;
      v39 = v34;
      do
      {
        v40 = v38 - 16;
        v41 = (unsigned __int128)vld2q_s16(v40);
        v42 = (unsigned __int128)vld2q_s16(v38);
        *(v37 - 1) = v41;
        *v37 = v42;
        v37 += 2;
        v38 += 32;
        v39 -= 16;
      }
      while (v39);
    }
    else
    {
      v34 = 0;
      v35 = 0;
    }
    v43 = v33 - v34;
    v44 = (__int16 *)(v4 + 2 * v34);
    v45 = &v47.i16[v35];
    do
    {
      v46 = *v45;
      v45 += 2;
      *v44++ = v46;
      --v43;
    }
    while (v43);
  }
  return result;
}

uint64_t dcsctp::ReassemblyQueue::ReassemblyQueue(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, int a5)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = (unint64_t)(float)((float)a4 * 0.9);
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 44) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  v17[0] = &off_24C0BB000;
  v17[1] = a1;
  v18 = v17;
  if (a5)
  {
    v8 = (_QWORD *)operator new();
    v9 = v18;
    if (v18)
    {
      if (v18 != v17)
      {
        v20 = v18;
        v18 = 0;
        *v8 = &off_24C0B5428;
        v8[1] = a2;
        v8[2] = a3;
        goto LABEL_13;
      }
      v20 = v19;
      (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v19);
      v9 = v20;
      *v8 = &off_24C0B5428;
      v8[1] = a2;
      v8[2] = a3;
      if (v9)
      {
LABEL_13:
        if (v9 == v19)
        {
          v8[6] = v8 + 3;
          (*(void (**)(_QWORD *))(v19[0] + 24))(v19);
        }
        else
        {
          v8[6] = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
        }
        v12 = v20;
        v8[8] = 0;
        v8[9] = 0;
        v8[7] = v8 + 8;
        if (v12 == v19)
          goto LABEL_20;
        goto LABEL_23;
      }
    }
    else
    {
      *v8 = &off_24C0B5428;
      v8[1] = a2;
      v8[2] = a3;
    }
    v8[8] = 0;
    v8[9] = 0;
    v8[6] = 0;
    v8[7] = v8 + 8;
    goto LABEL_26;
  }
  v10 = (_QWORD *)operator new();
  v8 = v10;
  v11 = v18;
  if (!v18)
  {
    v20 = 0;
    *v10 = &off_24C0C2680;
    v10[1] = a2;
    v10[2] = a3;
    goto LABEL_11;
  }
  if (v18 != v17)
  {
    v20 = v18;
    v18 = 0;
    *v10 = &off_24C0C2680;
    v10[1] = a2;
    v10[2] = a3;
    goto LABEL_16;
  }
  v20 = v19;
  (*(void (**)(_QWORD *, _QWORD *))(v17[0] + 24))(v17, v19);
  v11 = v20;
  *v8 = &off_24C0C2680;
  v8[1] = a2;
  v8[2] = a3;
  if (!v11)
  {
LABEL_11:
    v8[6] = 0;
    goto LABEL_22;
  }
LABEL_16:
  if (v11 == v19)
  {
    v8[6] = v8 + 3;
    (*(void (**)(_QWORD *))(v19[0] + 24))(v19);
  }
  else
  {
    v8[6] = v11;
    v20 = 0;
  }
LABEL_22:
  v8[11] = 0;
  v8[8] = 0;
  v8[7] = v8 + 8;
  v8[12] = 0;
  v8[9] = 0;
  v8[10] = v8 + 11;
  v12 = v20;
  if (v20 == v19)
  {
LABEL_20:
    v13 = 4;
    v12 = v19;
    goto LABEL_25;
  }
LABEL_23:
  if (!v12)
    goto LABEL_26;
  v13 = 5;
LABEL_25:
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_26:
  *(_QWORD *)(a1 + 144) = v8;
  v14 = v18;
  if (v18 == v17)
  {
    v15 = 4;
    v14 = v17;
    goto LABEL_30;
  }
  if (v18)
  {
    v15 = 5;
LABEL_30:
    (*(void (**)(void))(*v14 + 8 * v15))();
  }
  return a1;
}

void dcsctp::ReassemblyQueue::Add(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  int v3;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  _BOOL4 v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  void *__p[2];
  unsigned __int16 v39;
  char v40;
  __int128 v41;

  v3 = a2;
  if (*(_BYTE *)(a1 + 44))
  {
    v5 = *(_DWORD *)(a1 + 40);
    v6 = a2 >= v5;
    v7 = a2 - v5;
    v8 = (_DWORD)v7 != 0 && v6;
    if ((_DWORD)v7 != 0x80000000)
      v8 = (int)v7 >= 0;
    if (!v8)
      v7 |= 0xFFFFFFFF00000000;
    a2 = v7 + *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 40) = v3;
    *(_BYTE *)(a1 + 44) = 1;
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_21;
  }
  else
  {
    a2 = a2;
    *(_QWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 40) = a2;
    *(_BYTE *)(a1 + 44) = 1;
    if (!*(_BYTE *)(a1 + 128))
    {
LABEL_21:
      v16 = *(_QWORD *)(a1 + 144);
      *(_OWORD *)__p = *((_OWORD *)a3 + 1);
      *((_QWORD *)a3 + 2) = 0;
      *((_QWORD *)a3 + 3) = 0;
      *((_QWORD *)a3 + 4) = 0;
      *(_QWORD *)(a1 + 136) += (*(int (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      if (__p[0])
        operator delete(__p[0]);
      return;
    }
  }
  if (a2 <= *(_QWORD *)(a1 + 72))
    goto LABEL_21;
  v9 = *(unsigned __int16 **)(a1 + 80);
  v10 = *(unsigned __int16 **)(a1 + 88);
  if (v10 != v9)
  {
    v11 = v10 - v9;
    do
    {
      v12 = v11 >> 1;
      v13 = &v9[v11 >> 1];
      v15 = *v13;
      v14 = v13 + 1;
      v11 += ~(v11 >> 1);
      if (v15 < *a3)
        v9 = v14;
      else
        v11 = v12;
    }
    while (v11);
  }
  if (v9 == v10 || *a3 < *v9)
    goto LABEL_21;
  v18 = *((_QWORD *)a3 + 2);
  v17 = *((_QWORD *)a3 + 3);
  *(_QWORD *)(a1 + 136) += v17 - v18;
  v41 = *(_OWORD *)a3;
  v19 = *((_QWORD *)a3 + 4);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  *((_QWORD *)a3 + 4) = 0;
  v39 = a3[20];
  v40 = *((_BYTE *)a3 + 42);
  v20 = operator new();
  v21 = v20;
  *(_QWORD *)v20 = a1;
  *(_DWORD *)(v20 + 8) = v3;
  *(_OWORD *)(v20 + 16) = v41;
  *(_QWORD *)(v20 + 32) = v18;
  *(_QWORD *)(v20 + 40) = v17;
  *(_QWORD *)(v20 + 48) = v19;
  *(_WORD *)(v20 + 56) = v39;
  *(_BYTE *)(v20 + 58) = v40;
  v23 = *(uint64_t **)(a1 + 112);
  v22 = *(_QWORD *)(a1 + 120);
  if ((unint64_t)v23 < v22)
  {
    if (v23)
    {
      *v23 = v20;
      v23[2] = (uint64_t)absl::internal_any_invocable::RemoteManagerNontrivial<dcsctp::ReassemblyQueue::Add(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data)::$_0>;
      v23[3] = (uint64_t)absl::internal_any_invocable::RemoteInvoker<false,void,dcsctp::ReassemblyQueue::Add(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data)::$_0 &>;
      *(_QWORD *)(a1 + 112) = v23 + 4;
      return;
    }
LABEL_44:
    __break(1u);
  }
  v24 = *(uint64_t **)(a1 + 104);
  v25 = ((char *)v23 - (char *)v24) >> 5;
  v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 59)
    abort();
  v27 = v22 - (_QWORD)v24;
  if (v27 >> 4 > v26)
    v26 = v27 >> 4;
  v6 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0;
  v28 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v28 = v26;
  if (!v28)
    goto LABEL_44;
  if (v28 >> 59)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v29 = 32 * v28;
  v30 = (char *)operator new(32 * v28);
  v31 = &v30[v29];
  v32 = (uint64_t *)&v30[32 * v25];
  *v32 = v21;
  v32[2] = (uint64_t)absl::internal_any_invocable::RemoteManagerNontrivial<dcsctp::ReassemblyQueue::Add(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data)::$_0>;
  v32[3] = (uint64_t)absl::internal_any_invocable::RemoteInvoker<false,void,dcsctp::ReassemblyQueue::Add(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data)::$_0 &>;
  v33 = v32 + 4;
  if (v23 == v24)
  {
    *(_QWORD *)(a1 + 104) = v32;
    *(_QWORD *)(a1 + 112) = v33;
    *(_QWORD *)(a1 + 120) = v31;
  }
  else
  {
    v34 = 0;
    do
    {
      v35 = &v23[v34];
      ((void (*)(_QWORD, uint64_t *, uint64_t *))v23[v34 - 2])(0, &v23[v34 - 4], &v32[v34 - 4]);
      *(_OWORD *)&v32[v34 - 2] = *(_OWORD *)&v23[v34 - 2];
      *(v35 - 2) = (uint64_t)absl::internal_any_invocable::EmptyManager;
      *(v35 - 1) = 0;
      v34 -= 4;
    }
    while (&v23[v34] != v24);
    v23 = *(uint64_t **)(a1 + 104);
    v36 = *(uint64_t **)(a1 + 112);
    *(_QWORD *)(a1 + 104) = &v32[v34];
    *(_QWORD *)(a1 + 112) = v33;
    *(_QWORD *)(a1 + 120) = v31;
    if (v36 != v23)
    {
      do
      {
        v37 = v36 - 4;
        ((void (*)(uint64_t, uint64_t *, uint64_t *))*(v36 - 2))(1, v37, v37);
        v36 = v37;
      }
      while (v37 != v23);
    }
  }
  if (v23)
    operator delete(v23);
  *(_QWORD *)(a1 + 112) = v33;
}

void dcsctp::ReassemblyQueue::EnterDeferredReset(uint64_t a1, unsigned int a2, const void *a3, uint64_t a4)
{
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 *v14;
  unint64_t v15;
  const std::nothrow_t *v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  __n128 v20;
  unsigned __int16 *v21;
  char *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int16 *v26;
  unsigned int v27;
  int v28;
  void *v29;
  void **v30;
  void (**v31)(uint64_t, void *, void *, __n128);
  void (**v32)(uint64_t, void *, void *, __n128);
  void *v33;
  void (**v34)(uint64_t, void *, void *, __n128);

  if (*(_BYTE *)(a1 + 128))
    return;
  if (!*(_BYTE *)(a1 + 44))
  {
    v10 = a2;
    *(_QWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 40) = a2;
    *(_BYTE *)(a1 + 44) = 1;
    if (a4)
      goto LABEL_11;
LABEL_15:
    v13 = 0;
    v14 = 0;
    v15 = 0;
LABEL_19:
    v20 = std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(v13, v14, v15, 0, 0);
    v21 = v14;
    if (v13 == v14)
      goto LABEL_34;
    goto LABEL_22;
  }
  v6 = *(_DWORD *)(a1 + 40);
  v7 = a2 >= v6;
  v8 = a2 - v6;
  v9 = (_DWORD)v8 != 0 && v7;
  if ((_DWORD)v8 != 0x80000000)
    v9 = (int)v8 >= 0;
  if (!v9)
    v8 |= 0xFFFFFFFF00000000;
  v10 = v8 + *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  *(_DWORD *)(a1 + 40) = a2;
  *(_BYTE *)(a1 + 44) = 1;
  if (!a4)
    goto LABEL_15;
LABEL_11:
  v11 = 2 * a4;
  if (2 * a4 < 0)
    goto LABEL_45;
  v12 = (2 * a4) >> 1;
  v13 = (unsigned __int16 *)operator new(2 * a4);
  v14 = &v13[v12];
  memcpy(v13, a3, v11);
  v15 = v14 - v13;
  if ((char *)v14 - (char *)v13 < 257)
    goto LABEL_19;
  v16 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  v17 = v14 - v13;
  while (1)
  {
    v18 = (char *)operator new(2 * v17, v16);
    if (v18)
      break;
    v19 = v17 > 1;
    v17 >>= 1;
    if (!v19)
      goto LABEL_19;
  }
  v22 = v18;
  std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(v13, v14, v14 - v13, v18, v17);
  operator delete(v22);
  v21 = v14;
  if (v13 == v14)
    goto LABEL_34;
LABEL_22:
  v23 = v13 + 1;
  do
  {
    if (v23 == v14)
    {
      v21 = v14;
      goto LABEL_34;
    }
    v24 = *(v23 - 1);
    v25 = *v23++;
  }
  while (v24 < v25);
  v26 = v23 - 2;
  while (v23 != v14)
  {
    v27 = *v23;
    if (v24 < v27)
    {
      v26[1] = v27;
      ++v26;
      v24 = v27;
    }
    ++v23;
  }
  if (v26 + 1 > v14)
  {
    __break(1u);
LABEL_45:
    abort();
  }
  v21 = v14;
  if (v26 + 1 != v14)
    v21 = v26 + 1;
LABEL_34:
  v28 = *(unsigned __int8 *)(a1 + 128);
  *(_QWORD *)(a1 + 72) = v10;
  if (v28)
  {
    v29 = *(void **)(a1 + 80);
    if (v29)
    {
      *(_QWORD *)(a1 + 88) = v29;
      operator delete(v29);
    }
    v30 = (void **)(a1 + 104);
    v31 = *(void (***)(uint64_t, void *, void *, __n128))(a1 + 104);
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v21;
    *(_QWORD *)(a1 + 96) = v14;
    if (v31)
    {
      v32 = *(void (***)(uint64_t, void *, void *, __n128))(a1 + 112);
      v33 = v31;
      if (v32 != v31)
      {
        do
        {
          v34 = v32 - 4;
          (*(v32 - 2))(1, v34, v34, v20);
          v32 = v34;
        }
        while (v34 != v31);
        v33 = *v30;
      }
      *(_QWORD *)(a1 + 112) = v31;
      operator delete(v33);
    }
    *v30 = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 80) = v13;
    *(_QWORD *)(a1 + 88) = v21;
    *(_QWORD *)(a1 + 96) = v14;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_BYTE *)(a1 + 128) = 1;
  }
}

void dcsctp::ReassemblyQueue::HandleForwardTsn(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  int v5;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  _BOOL4 v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  unint64_t v31;
  char *v32;
  void (**v33)(uint64_t, void *, void *);
  char *v34;

  v5 = a2;
  if (*(_BYTE *)(a1 + 44))
  {
    v7 = *(_DWORD *)(a1 + 40);
    v8 = a2 >= v7;
    v9 = a2 - v7;
    v10 = (_DWORD)v9 != 0 && v8;
    if ((_DWORD)v9 != 0x80000000)
      v10 = (int)v9 >= 0;
    if (!v10)
      v9 |= 0xFFFFFFFF00000000;
    a2 = v9 + *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 40) = v5;
    *(_BYTE *)(a1 + 44) = 1;
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_18;
  }
  else
  {
    a2 = a2;
    *(_QWORD *)(a1 + 32) = a2;
    *(_DWORD *)(a1 + 40) = a2;
    *(_BYTE *)(a1 + 44) = 1;
    if (!*(_BYTE *)(a1 + 128))
    {
LABEL_18:
      *(_QWORD *)(a1 + 136) -= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 144) + 24))(*(_QWORD *)(a1 + 144));
      return;
    }
  }
  if (a2 <= *(_QWORD *)(a1 + 72))
    goto LABEL_18;
  if (a4)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((12 * a4) >> 2);
    if (v11 >= 0x1555555555555556)
      goto LABEL_38;
    v12 = 12 * a4;
    v13 = (char *)operator new(12 * a4);
    v14 = &v13[12 * v11];
    memcpy(v13, a3, v12);
    v16 = *(uint64_t **)(a1 + 112);
    v15 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v16 < v15)
      goto LABEL_16;
  }
  else
  {
    v14 = 0;
    v13 = 0;
    v16 = *(uint64_t **)(a1 + 112);
    v15 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v16 < v15)
    {
LABEL_16:
      if (v16)
      {
        v17 = operator new();
        *(_QWORD *)v17 = a1;
        *(_DWORD *)(v17 + 8) = v5;
        *(_QWORD *)(v17 + 16) = v13;
        *(_QWORD *)(v17 + 24) = v14;
        *(_QWORD *)(v17 + 32) = v14;
        *v16 = v17;
        v16[2] = (uint64_t)absl::internal_any_invocable::RemoteManagerNontrivial<dcsctp::ReassemblyQueue::HandleForwardTsn(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,rtc::ArrayView<dcsctp::AnyForwardTsnChunk::SkippedStream const,-4711l>)::$_0>;
        v16[3] = (uint64_t)absl::internal_any_invocable::RemoteInvoker<false,void,dcsctp::ReassemblyQueue::HandleForwardTsn(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,rtc::ArrayView<dcsctp::AnyForwardTsnChunk::SkippedStream const,-4711l>)::$_0 &>;
        *(_QWORD *)(a1 + 112) = v16 + 4;
        return;
      }
      goto LABEL_37;
    }
  }
  v18 = *(_QWORD *)(a1 + 104);
  v19 = ((uint64_t)v16 - v18) >> 5;
  if ((unint64_t)(v19 + 1) >> 59)
    goto LABEL_38;
  v20 = v15 - v18;
  v21 = v20 >> 4;
  if (v20 >> 4 <= (unint64_t)(v19 + 1))
    v21 = v19 + 1;
  v8 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0;
  v22 = 0x7FFFFFFFFFFFFFFLL;
  if (!v8)
    v22 = v21;
  if (!v22)
  {
LABEL_37:
    __break(1u);
LABEL_38:
    abort();
  }
  if (v22 >> 59)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v23 = 32 * v22;
  v24 = (char *)operator new(32 * v22);
  v25 = &v24[v23];
  v26 = (uint64_t *)&v24[32 * v19];
  v27 = operator new();
  *(_QWORD *)v27 = a1;
  *(_DWORD *)(v27 + 8) = v5;
  *(_QWORD *)(v27 + 16) = v13;
  *(_QWORD *)(v27 + 24) = v14;
  *(_QWORD *)(v27 + 32) = v14;
  *v26 = v27;
  v26[2] = (uint64_t)absl::internal_any_invocable::RemoteManagerNontrivial<dcsctp::ReassemblyQueue::HandleForwardTsn(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,rtc::ArrayView<dcsctp::AnyForwardTsnChunk::SkippedStream const,-4711l>)::$_0>;
  v26[3] = (uint64_t)absl::internal_any_invocable::RemoteInvoker<false,void,dcsctp::ReassemblyQueue::HandleForwardTsn(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,rtc::ArrayView<dcsctp::AnyForwardTsnChunk::SkippedStream const,-4711l>)::$_0 &>;
  v28 = v26 + 4;
  v30 = *(char **)(a1 + 104);
  v29 = *(char **)(a1 + 112);
  if (v29 == v30)
  {
    *(_QWORD *)(a1 + 104) = v26;
    *(_QWORD *)(a1 + 112) = v28;
    *(_QWORD *)(a1 + 120) = v25;
    if (!v29)
      goto LABEL_34;
  }
  else
  {
    v31 = 0;
    do
    {
      v32 = &v29[v31];
      (*(void (**)(_QWORD, char *, uint64_t *))&v29[v31 - 16])(0, &v29[v31 - 32], &v26[v31 / 8 - 4]);
      *(_OWORD *)&v26[v31 / 8 - 2] = *(_OWORD *)&v29[v31 - 16];
      *((_QWORD *)v32 - 2) = absl::internal_any_invocable::EmptyManager;
      *((_QWORD *)v32 - 1) = 0;
      v31 -= 32;
    }
    while (&v29[v31] != v30);
    v29 = *(char **)(a1 + 104);
    v33 = *(void (***)(uint64_t, void *, void *))(a1 + 112);
    *(_QWORD *)(a1 + 104) = &v26[v31 / 8];
    *(_QWORD *)(a1 + 112) = v28;
    *(_QWORD *)(a1 + 120) = v25;
    if (v33 != (void (**)(uint64_t, void *, void *))v29)
    {
      do
      {
        v34 = (char *)(v33 - 4);
        (*(v33 - 2))(1, v34, v34);
        v33 = (void (**)(uint64_t, void *, void *))v34;
      }
      while (v34 != v29);
    }
    if (!v29)
      goto LABEL_34;
  }
  operator delete(v29);
LABEL_34:
  *(_QWORD *)(a1 + 112) = v28;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,dcsctp::ReassemblyQueue::HandleForwardTsn(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,rtc::ArrayView<dcsctp::AnyForwardTsnChunk::SkippedStream const,-4711l>)::$_0 &>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = **a1;
  v3 = *((unsigned int *)v1 + 2);
  v4 = v1[2];
  v5 = v1[3] - v4;
  if (v5)
    v6 = v4;
  else
    v6 = 0;
  return dcsctp::ReassemblyQueue::HandleForwardTsn(v2, v3, v6, 0xAAAAAAAAAAAAAAABLL * (v5 >> 2));
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<dcsctp::ReassemblyQueue::HandleForwardTsn(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,rtc::ArrayView<dcsctp::AnyForwardTsnChunk::SkippedStream const,-4711l>)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  void *v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(void **)(v3 + 16);
      if (v4)
      {
        *(_QWORD *)(v3 + 24) = v4;
        operator delete(v4);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void std::__function::__func<dcsctp::ReassemblyQueue::ReassemblyQueue(std::string_view,unsigned long,BOOL)::$_0,std::allocator<dcsctp::ReassemblyQueue::ReassemblyQueue(std::string_view,unsigned long,BOOL)::$_0>,void ()(rtc::ArrayView<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>> const,-4711l>,dcsctp::DcSctpMessage)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<dcsctp::ReassemblyQueue::ReassemblyQueue(std::string_view,unsigned long,BOOL)::$_0,std::allocator<dcsctp::ReassemblyQueue::ReassemblyQueue(std::string_view,unsigned long,BOOL)::$_0>,void ()(rtc::ArrayView<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>> const,-4711l>,dcsctp::DcSctpMessage)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0BB000;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dcsctp::ReassemblyQueue::ReassemblyQueue(std::string_view,unsigned long,BOOL)::$_0,std::allocator<dcsctp::ReassemblyQueue::ReassemblyQueue(std::string_view,unsigned long,BOOL)::$_0>,void ()(rtc::ArrayView<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>> const,-4711l>,dcsctp::DcSctpMessage)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0BB000;
  a2[1] = v2;
  return result;
}

void std::__function::__func<dcsctp::ReassemblyQueue::ReassemblyQueue(std::string_view,unsigned long,BOOL)::$_0,std::allocator<dcsctp::ReassemblyQueue::ReassemblyQueue(std::string_view,unsigned long,BOOL)::$_0>,void ()(rtc::ArrayView<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>> const,-4711l>,dcsctp::DcSctpMessage)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;

  v4 = *a3;
  v3 = a3[1];
  v6 = a3[2];
  v5 = a3[3];
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  v7 = *(_QWORD **)(a1 + 8);
  v9 = (char *)v7[7];
  v8 = v7[8];
  if ((unint64_t)v9 < v8)
  {
    if (v9)
    {
      *(_QWORD *)v9 = v4;
      *((_QWORD *)v9 + 1) = v3;
      v10 = v9 + 32;
      *((_QWORD *)v9 + 2) = v6;
      *((_QWORD *)v9 + 3) = v5;
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  v11 = (char *)v7[6];
  v12 = (v9 - v11) >> 5;
  v13 = v12 + 1;
  if ((unint64_t)(v12 + 1) >> 59)
    goto LABEL_24;
  v14 = v8 - (_QWORD)v11;
  if (v14 >> 4 > v13)
    v13 = v14 >> 4;
  v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0;
  v16 = 0x7FFFFFFFFFFFFFFLL;
  if (!v15)
    v16 = v13;
  if (!v16)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    abort();
  }
  if (v16 >> 59)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v17 = 32 * v16;
  v18 = (char *)operator new(32 * v16);
  v19 = &v18[32 * v12];
  *(_QWORD *)v19 = v4;
  *((_QWORD *)v19 + 1) = v3;
  v20 = &v18[v17];
  *((_QWORD *)v19 + 2) = v6;
  *((_QWORD *)v19 + 3) = v5;
  v10 = v19 + 32;
  if (v9 == v11)
  {
    v7[6] = v19;
    v7[7] = v10;
    v7[8] = v20;
  }
  else
  {
    v21 = 0;
    do
    {
      v22 = &v19[v21];
      v23 = &v9[v21];
      *((_QWORD *)v22 - 4) = *(_QWORD *)&v9[v21 - 32];
      *(_OWORD *)(v22 - 24) = *(_OWORD *)&v9[v21 - 24];
      *((_QWORD *)v22 - 1) = *(_QWORD *)&v9[v21 - 8];
      *((_QWORD *)v23 - 3) = 0;
      *((_QWORD *)v23 - 2) = 0;
      *((_QWORD *)v23 - 1) = 0;
      v21 -= 32;
    }
    while (&v9[v21] != v11);
    v9 = (char *)v7[6];
    v24 = (char *)v7[7];
    v7[6] = &v19[v21];
    v7[7] = v10;
    v7[8] = v20;
    while (v24 != v9)
    {
      v25 = (void *)*((_QWORD *)v24 - 3);
      if (v25)
      {
        *((_QWORD *)v24 - 2) = v25;
        operator delete(v25);
      }
      v24 -= 32;
    }
  }
  if (v9)
    operator delete(v9);
LABEL_22:
  v7[7] = v10;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,dcsctp::ReassemblyQueue::Add(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data)::$_0 &>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *__p;

  v1 = *a1;
  v2 = **a1;
  v3 = (char *)v1[4];
  *(_QWORD *)(v2 + 136) += &v3[-v1[5]];
  v4 = *((unsigned int *)v1 + 2);
  __p = v3;
  v1[4] = 0;
  v1[5] = 0;
  v1[6] = 0;
  dcsctp::ReassemblyQueue::Add(v2, v4);
  if (__p)
    operator delete(__p);
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<dcsctp::ReassemblyQueue::Add(webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data)::$_0>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  void *v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(void **)(v3 + 32);
      if (v4)
      {
        *(_QWORD *)(v3 + 40) = v4;
        operator delete(v4);
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

__n128 std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(unsigned __int16 *a1, unsigned __int16 *a2, unint64_t a3, char *a4, uint64_t a5)
{
  __n128 *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 *v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v19;
  unsigned __int16 *v20;
  unint64_t v21;
  __n128 result;
  unsigned __int16 *v23;
  unsigned __int16 *v24;
  char *v25;
  __n128 *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned __int16 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  unint64_t v37;
  __n128 *v38;
  char v39;
  unsigned __int16 *v40;
  unint64_t v41;
  __n128 *v42;
  __n128 v43;
  unsigned __int16 v44;
  unint64_t v45;
  unsigned __int16 *v46;
  __n128 *v47;
  unsigned __int16 v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  __n128 *v53;
  __n128 v54;

  if (a3 >= 2)
  {
    v6 = (__n128 *)a1;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *a1;
      if (v7 < v8)
      {
        *a1 = v7;
        *(a2 - 1) = v8;
      }
      return result;
    }
    if ((uint64_t)a3 > 128)
    {
      v19 = a3 >> 1;
      v20 = &a1[a3 >> 1];
      v21 = a3 >> 1;
      if ((uint64_t)a3 > a5)
      {
        std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(a1, v20, v21, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>((char *)v6 + 2 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        result.n128_u64[0] = std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(v6, (unsigned __int16 *)v6 + (a3 >> 1), a2, a3 >> 1, a3 - (a3 >> 1), a4, a5).n128_u64[0];
        return result;
      }
      std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(a1, v20, v21, (unsigned __int16 *)a4);
      v23 = (unsigned __int16 *)&a4[2 * v19];
      result.n128_u64[0] = std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>((unsigned __int16 *)v6 + (a3 >> 1), a2, a3 - (a3 >> 1), v23).n128_u64[0];
      v24 = v23;
      v25 = a4;
      v26 = v6;
      v27 = (unsigned __int16 *)&a4[2 * a3];
      do
      {
        if (v24 == v27)
        {
          if (v25 == (char *)v23)
            return result;
          v45 = &a4[a3 & 0xFFFFFFFFFFFFFFFELL] - v25 - 2;
          if (v45 >= 0x1E && (unint64_t)((char *)v6 - v25) >= 0x20)
          {
            v49 = 0;
            v50 = (v45 >> 1) + 1;
            v51 = 2 * (v50 & 0xFFFFFFFFFFFFFFF0);
            v46 = (unsigned __int16 *)&v25[v51];
            v47 = (__n128 *)((char *)v26 + v51);
            v52 = v50 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v53 = &v26[v49];
              result = *(__n128 *)&v25[v49 * 16];
              v54 = *(__n128 *)&v25[v49 * 16 + 16];
              *v53 = result;
              v53[1] = v54;
              v49 += 2;
              v52 -= 16;
            }
            while (v52);
            if (v50 == (v50 & 0xFFFFFFFFFFFFFFF0))
              return result;
          }
          else
          {
            v46 = (unsigned __int16 *)v25;
            v47 = v26;
          }
          do
          {
            v48 = *v46++;
            v47->n128_u16[0] = v48;
            v47 = (__n128 *)((char *)v47 + 2);
          }
          while (v46 != v23);
          return result;
        }
        v28 = v24;
        v29 = *v24;
        v30 = *(unsigned __int16 *)v25;
        if (v29 >= v30)
          v31 = *(_WORD *)v25;
        else
          v31 = *v24;
        v25 += 2 * (v29 >= v30);
        v24 += v29 < v30;
        v26->n128_u16[0] = v31;
        v26 = (__n128 *)((char *)v26 + 2);
        v6 = (__n128 *)((char *)v6 + 2);
      }
      while (v25 != (char *)v23);
      if (v24 != v27)
      {
        v32 = -2;
        if (v29 >= v30)
          v32 = 0;
        v33 = &a4[2 * a3] - (char *)v28 + v32 - 2;
        if (v33 < 0x1E || (unint64_t)((char *)v6 - (char *)&v28[v29 < v30]) < 0x20)
          goto LABEL_49;
        v34 = 0;
        v35 = (v33 >> 1) + 1;
        v36 = v29 >= v30;
        v37 = 2 * (v35 & 0xFFFFFFFFFFFFFFF0);
        v24 = (unsigned __int16 *)((char *)v24 + v37);
        v38 = (__n128 *)((char *)v26 + v37);
        v39 = v36 ? 2 : 1;
        v40 = &v28[v39 & 1];
        v41 = v35 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v42 = &v26[v34 / 8];
          result = *(__n128 *)&v40[v34];
          v43 = *(__n128 *)&v40[v34 + 8];
          *v42 = result;
          v42[1] = v43;
          v34 += 16;
          v41 -= 16;
        }
        while (v41);
        v26 = v38;
        if (v35 != (v35 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_49:
          do
          {
            v44 = *v24++;
            v26->n128_u16[0] = v44;
            v26 = (__n128 *)((char *)v26 + 2);
          }
          while (v24 != v27);
        }
      }
    }
    else if (a1 != a2)
    {
      v10 = a1 + 1;
      if (a1 + 1 != a2)
      {
        v11 = 0;
        v12 = a1;
        do
        {
          v14 = *v12;
          v12 = v10;
          v15 = *v10;
          if (v15 < v14)
          {
            v16 = v11;
            do
            {
              *(unsigned __int16 *)((char *)a1 + v16 + 2) = v14;
              if (!v16)
              {
                v13 = a1;
                goto LABEL_10;
              }
              v14 = *(unsigned __int16 *)((char *)a1 + v16 - 2);
              v16 -= 2;
            }
            while (v15 < v14);
            v13 = (unsigned __int16 *)((char *)a1 + v16 + 2);
LABEL_10:
            *v13 = v15;
          }
          v10 = v12 + 1;
          v11 += 2;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

__n128 std::__stable_sort_move<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(unsigned __int16 *a1, unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4)
{
  unsigned __int16 *v4;
  char *v6;
  unsigned __int16 v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  unsigned __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int16 *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int16 v22;
  unint64_t v23;
  uint64_t v24;
  unsigned __int16 *v25;
  __n128 result;
  char *v27;
  char *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned __int16 v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;
  unint64_t v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unint64_t v42;
  unsigned __int16 *v43;
  __int128 v44;
  unsigned __int16 v45;
  unint64_t v46;
  unsigned __int16 *v47;
  unsigned __int16 *v48;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned __int16 *v54;
  __int128 v55;

  if (a3)
  {
    v4 = a4;
    v6 = (char *)a1;
    if (a3 == 1)
    {
LABEL_9:
      *v4 = *(_WORD *)v6;
      return result;
    }
    if (a3 == 2)
    {
      v9 = *(a2 - 1);
      v8 = *(a2 - 1);
      v10 = *a1;
      v11 = v9 >= v10;
      if (v9 >= v10)
        v8 = *a1;
      *a4 = v8;
      v4 = a4 + 1;
      if (v11)
        v6 = (char *)(a2 - 1);
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v23 = a3 >> 1;
      v24 = a3 >> 1;
      v25 = &a1[v24];
      std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(a1, &a1[v24], a3 >> 1, a4, a3 >> 1);
      std::__stable_sort<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(&v6[v24 * 2], a2, a3 - v23, &v4[v24], a3 - v23);
      v27 = (char *)v4;
      v28 = v6;
      v29 = (unsigned __int16 *)&v6[v24 * 2];
      do
      {
        if (v29 == a2)
        {
          if (v28 == (char *)v25)
            return result;
          v46 = &v6[a3 & 0xFFFFFFFFFFFFFFFELL] - v28 - 2;
          if (v46 >= 0x1E && (unint64_t)(v27 - v28) >= 0x20)
          {
            v50 = 0;
            v51 = (v46 >> 1) + 1;
            v52 = v51 & 0xFFFFFFFFFFFFFFF0;
            v47 = &v4[v52];
            v48 = (unsigned __int16 *)&v28[v52 * 2];
            v53 = v51 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              v54 = &v4[v50];
              result = *(__n128 *)&v28[v50 * 2];
              v55 = *(_OWORD *)&v28[v50 * 2 + 16];
              *(__n128 *)v54 = result;
              *((_OWORD *)v54 + 1) = v55;
              v50 += 16;
              v53 -= 16;
            }
            while (v53);
            if (v51 == (v51 & 0xFFFFFFFFFFFFFFF0))
              return result;
          }
          else
          {
            v47 = v4;
            v48 = (unsigned __int16 *)v28;
          }
          do
          {
            v49 = *v48++;
            *v47++ = v49;
          }
          while (v48 != v25);
          return result;
        }
        v30 = v29;
        v31 = *v29;
        v32 = *(unsigned __int16 *)v28;
        if (v31 >= v32)
          v33 = *(_WORD *)v28;
        else
          v33 = *v29;
        v29 += v31 < v32;
        v28 += 2 * (v31 >= v32);
        *v4++ = v33;
        v27 += 2;
      }
      while (v28 != (char *)v25);
      if (v29 != a2)
      {
        v34 = -2;
        if (v31 >= v32)
          v34 = 0;
        v35 = (char *)a2 - (char *)v30 + v34 - 2;
        if (v35 < 0x1E)
          goto LABEL_51;
        if ((unint64_t)(v27 - (char *)&v30[v31 < v32]) < 0x20)
          goto LABEL_51;
        v36 = 0;
        v37 = (v35 >> 1) + 1;
        v38 = v31 < v32;
        v39 = v37 & 0xFFFFFFFFFFFFFFF0;
        v40 = &v4[v39];
        v29 = (unsigned __int16 *)((char *)v29 + v39 * 2);
        v41 = &v30[v38];
        v42 = v37 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v43 = &v4[v36];
          result = *(__n128 *)&v41[v36];
          v44 = *(_OWORD *)&v41[v36 + 8];
          *(__n128 *)v43 = result;
          *((_OWORD *)v43 + 1) = v44;
          v36 += 16;
          v42 -= 16;
        }
        while (v42);
        v4 = v40;
        if (v37 != (v37 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_51:
          do
          {
            v45 = *v29++;
            *v4++ = v45;
          }
          while (v29 != a2);
        }
      }
    }
    else if (a1 != a2)
    {
      v12 = a1 + 1;
      *a4 = *a1;
      if (a1 + 1 != a2)
      {
        v13 = 0;
        v14 = a4;
        v15 = a4;
        do
        {
          while (1)
          {
            v17 = *v15++;
            v16 = v17;
            v18 = *v12;
            if (v18 < v17)
              break;
            *v15 = v18;
            ++v12;
            v13 += 2;
            v14 = v15;
            if (v12 == a2)
              return result;
          }
          v14[1] = v16;
          v19 = a4;
          if (v14 != a4)
          {
            v20 = v13;
            while (1)
            {
              v19 = (unsigned __int16 *)((char *)a4 + v20);
              v21 = *(unsigned __int16 *)((char *)a4 + v20 - 2);
              if (*v12 >= v21)
                break;
              *v19 = v21;
              v20 -= 2;
              if (!v20)
              {
                v19 = a4;
                break;
              }
            }
          }
          v22 = *v12++;
          *v19 = v22;
          v13 += 2;
          v14 = v15;
        }
        while (v12 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(__n128 *a1, unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v7;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  __n128 *v16;
  uint64_t v17;
  char *v18;
  unsigned __int16 *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int16 *v22;
  unsigned __int16 *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  char *v29;
  uint64_t v30;
  __int16 v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unsigned int v38;
  unsigned __int16 *v39;
  unsigned __int16 v40;
  unsigned __int16 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int16 *v45;
  unsigned __int16 v46;
  unsigned __int16 v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  unsigned __int16 *v50;
  uint64_t v51;
  BOOL v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  __n128 *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  unsigned __int16 *v60;
  __n128 result;
  unsigned __int16 *v62;
  unsigned __int16 *v63;
  unsigned __int16 *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  __n128 *v68;
  uint64_t v69;
  int64_t v70;
  unint64_t v71;
  char *v72;
  unsigned __int16 *v73;
  uint64_t v74;
  unint64_t v75;
  __n128 *v76;
  __n128 *v77;
  unint64_t v78;
  __n128 v79;
  unint64_t v80;
  char *v81;
  unsigned __int16 *v82;
  uint64_t v83;
  unint64_t v84;
  __n128 *v85;
  __n128 *v86;
  unint64_t v87;
  __n128 v88;
  __int16 v89;
  unsigned int v90;
  unsigned int v91;
  _BOOL4 v92;
  _BOOL4 v93;
  __int16 v94;
  unsigned __int16 *v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  unint64_t v99;
  unsigned __int16 *v100;
  char *v101;
  unsigned __int16 *v102;
  unsigned __int16 v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned __int16 *v108;
  unsigned __int16 v109;
  unsigned __int16 v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  if (!a5)
    return result;
  v7 = a5;
  while (a4 > a7 && v7 > a7)
  {
    if (!a4)
      return result;
    v12 = 0;
    v13 = *a2;
    v14 = -a4;
    while (1)
    {
      v15 = a1->n128_u16[v12 / 2];
      if (v13 < v15)
        break;
      v12 += 2;
      v98 = __CFADD__(v14++, 1);
      if (v98)
        return result;
    }
    v16 = (__n128 *)((char *)a1 + v12);
    if (-v14 >= v7)
    {
      if (v14 == -1)
      {
        a1->n128_u16[v12 / 2] = v13;
        *a2 = v15;
        return result;
      }
      if (v14 <= 0)
        v33 = -v14;
      else
        v33 = 1 - v14;
      v19 = (unsigned __int16 *)((char *)a1 + v12 + (v33 & 0xFFFFFFFFFFFFFFFELL));
      v18 = (char *)a2;
      if (a2 != a3)
      {
        v34 = a3 - a2;
        v18 = (char *)a2;
        do
        {
          v35 = v34 >> 1;
          v36 = (unsigned __int16 *)&v18[2 * (v34 >> 1)];
          v38 = *v36;
          v37 = v36 + 1;
          v34 += ~(v34 >> 1);
          if (v38 < *v19)
            v18 = (char *)v37;
          else
            v34 = v35;
        }
        while (v34);
      }
      v26 = v33 >> 1;
      v25 = (v18 - (char *)a2) >> 1;
      if (v19 != a2)
      {
LABEL_22:
        v27 = v18 - (char *)a2;
        if (v18 == (char *)a2)
        {
          a2 = v19;
        }
        else
        {
          v115 = v25;
          v28 = v19 + 1;
          if (v19 + 1 == a2)
          {
            v109 = *v19;
            v111 = a6;
            v113 = a7;
            v39 = a3;
            memmove(v19, a2, v18 - (char *)a2);
            v16 = (__n128 *)((char *)a1 + v12);
            a6 = v111;
            a7 = v113;
            a3 = v39;
            a2 = (unsigned __int16 *)((char *)v19 + v27);
            *(unsigned __int16 *)((char *)v19 + v27) = v109;
          }
          else
          {
            v29 = (char *)(a2 + 1);
            if (a2 + 1 == (unsigned __int16 *)v18)
            {
              v40 = *((_WORD *)v18 - 1);
              a2 = v19 + 1;
              if (v18 - 2 != (char *)v19)
              {
                v112 = a6;
                v114 = a7;
                v41 = a3;
                v110 = *((_WORD *)v18 - 1);
                memmove(v19 + 1, v19, v18 - 2 - (char *)v19);
                v40 = v110;
                v16 = (__n128 *)((char *)a1 + v12);
                a6 = v112;
                a7 = v114;
                a3 = v41;
              }
              *v19 = v40;
            }
            else
            {
              v30 = a2 - v19;
              if (v30 == v27 >> 1)
              {
                do
                {
                  v31 = *(v28 - 1);
                  *(v28 - 1) = *((_WORD *)v29 - 1);
                  *((_WORD *)v29 - 1) = v31;
                  if (v28 == a2)
                    break;
                  ++v28;
                  v32 = v29 == v18;
                  v29 += 2;
                }
                while (!v32);
              }
              else
              {
                v42 = v27 >> 1;
                v43 = a2 - v19;
                do
                {
                  v44 = v43;
                  v43 = v42;
                  v42 = v44 % v42;
                }
                while (v42);
                if (v43)
                {
                  v45 = &v19[v43];
                  do
                  {
                    v47 = *--v45;
                    v46 = v47;
                    v48 = &v45[v30];
                    v49 = v45;
                    do
                    {
                      v50 = v48;
                      *v49 = *v48;
                      v51 = (v18 - (char *)v48) >> 1;
                      v52 = __OFSUB__(v30, v51);
                      v54 = v30 - v51;
                      v53 = (v54 < 0) ^ v52;
                      v48 = &v19[v54];
                      if (v53)
                        v48 = &v50[v30];
                      v49 = v50;
                    }
                    while (v48 != v45);
                    *v50 = v46;
                  }
                  while (v45 != v19);
                }
                a2 = &v19[v27 >> 1];
              }
            }
          }
          v25 = v115;
        }
        goto LABEL_58;
      }
    }
    else
    {
      if (v7 >= 0)
        v17 = v7;
      else
        v17 = v7 + 1;
      v18 = (char *)a2 + (v17 & 0xFFFFFFFFFFFFFFFELL);
      v19 = a2;
      if ((char *)a2 - (char *)a1 != v12)
      {
        v20 = (uint64_t)((char *)a2 - (char *)a1 - v12) >> 1;
        v19 = (unsigned __int16 *)((char *)a1 + v12);
        do
        {
          v21 = v20 >> 1;
          v22 = &v19[v20 >> 1];
          v24 = *v22;
          v23 = v22 + 1;
          v20 += ~(v20 >> 1);
          if (*(unsigned __int16 *)v18 < v24)
            v20 = v21;
          else
            v19 = v23;
        }
        while (v20);
      }
      v25 = v17 >> 1;
      v26 = (uint64_t)((char *)v19 - (char *)a1 - v12) >> 1;
      if (v19 != a2)
        goto LABEL_22;
    }
    a2 = (unsigned __int16 *)v18;
LABEL_58:
    a4 = -(v26 + v14);
    v55 = v7 - v25;
    if (v26 + v25 >= v7 - (v26 + v25) - v14)
    {
      v63 = a2;
      v64 = a2;
      v65 = v55;
      v66 = a6;
      v67 = a7;
      v68 = v16;
      v69 = v25;
      std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(v64, v18, a3, -(v26 + v14), v65);
      a7 = v67;
      a6 = v66;
      a2 = v19;
      a4 = v26;
      a3 = v63;
      v7 = v69;
      a1 = v68;
      if (!v69)
        return result;
    }
    else
    {
      v56 = (__n128 *)((char *)a1 + v12);
      v57 = v26;
      v58 = a6;
      v59 = a7;
      v60 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,webrtc::flat_containers_internal::flat_tree<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::identity,std::less<void>,std::vector<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>>::value_compare &,std::__wrap_iter<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>*>>(v56, v19, a2, v57, v25);
      a7 = v59;
      a3 = v60;
      a6 = v58;
      v62 = a2;
      a2 = (unsigned __int16 *)v18;
      v7 = v55;
      a1 = (__n128 *)v62;
      if (!v55)
        return result;
    }
  }
  if (a4 <= v7)
  {
    if (a1 != (__n128 *)a2)
    {
      v80 = (char *)a2 - (char *)a1 - 2;
      v81 = a6;
      v82 = (unsigned __int16 *)a1;
      if (v80 < 0x1E)
        goto LABEL_109;
      v81 = a6;
      v82 = (unsigned __int16 *)a1;
      if ((unint64_t)(a6 - (char *)a1) < 0x20)
        goto LABEL_109;
      v83 = (v80 >> 1) + 1;
      v84 = 2 * (v83 & 0xFFFFFFFFFFFFFFF0);
      v81 = &a6[v84];
      v82 = (unsigned __int16 *)((char *)a1 + v84);
      v85 = a1 + 1;
      v86 = (__n128 *)(a6 + 16);
      v87 = v83 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        result = v85[-1];
        v88 = *v85;
        v86[-1] = result;
        *v86 = v88;
        v85 += 2;
        v86 += 2;
        v87 -= 16;
      }
      while (v87);
      if (v83 != (v83 & 0xFFFFFFFFFFFFFFF0))
      {
LABEL_109:
        do
        {
          v89 = *v82++;
          *(_WORD *)v81 = v89;
          v81 += 2;
        }
        while (v82 != a2);
      }
      if (v81 != a6)
      {
        while (a2 != a3)
        {
          v90 = *a2;
          v91 = *(unsigned __int16 *)a6;
          v92 = v90 >= v91;
          v93 = v90 < v91;
          if (v90 >= v91)
            LOWORD(v90) = *(_WORD *)a6;
          a2 += v93;
          a6 += 2 * v92;
          a1->n128_u16[0] = v90;
          a1 = (__n128 *)((char *)a1 + 2);
          if (a6 == v81)
            return result;
        }
        memmove(a1, a6, v81 - a6);
      }
    }
    return result;
  }
  v70 = (char *)a3 - (char *)a2;
  if (a3 == a2)
    return result;
  v71 = v70 - 2;
  if ((unint64_t)(v70 - 2) < 0x1E)
  {
    v72 = a6;
    v73 = a2;
    do
    {
LABEL_87:
      v94 = *v73++;
      *(_WORD *)v72 = v94;
      v72 += 2;
    }
    while (v73 != a3);
    goto LABEL_88;
  }
  v72 = a6;
  v73 = a2;
  if ((unint64_t)(a6 - (char *)a2) < 0x20)
    goto LABEL_87;
  v74 = (v71 >> 1) + 1;
  v75 = v74 & 0xFFFFFFFFFFFFFFF0;
  v72 = &a6[v75 * 2];
  v73 = &a2[v75];
  v76 = (__n128 *)(a2 + 8);
  v77 = (__n128 *)(a6 + 16);
  v78 = v74 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    result = v76[-1];
    v79 = *v76;
    v77[-1] = result;
    *v77 = v79;
    v76 += 2;
    v77 += 2;
    v78 -= 16;
  }
  while (v78);
  if (v74 != (v74 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_87;
LABEL_88:
  if (v72 != a6)
  {
    v95 = a3;
    while (a2 != (unsigned __int16 *)a1)
    {
      v96 = *((unsigned __int16 *)v72 - 1);
      v97 = *(a2 - 1);
      v98 = v96 >= v97;
      if (v96 <= v97)
        LOWORD(v96) = *(a2 - 1);
      if (v98)
        v72 -= 2;
      else
        --a2;
      *--a3 = v96;
      --v95;
      if (v72 == a6)
        return result;
    }
    v99 = v72 - a6 - 2;
    if (v99 < 0x1E || (unint64_t)(v72 - (char *)v95) < 0x20)
    {
      v100 = a3;
      v101 = v72;
      goto LABEL_101;
    }
    v104 = 0;
    v105 = (v99 >> 1) + 1;
    v106 = 2 * (v105 & 0xFFFFFFFFFFFFFFF0);
    v100 = &a3[v106 / 0xFFFFFFFFFFFFFFFELL];
    v101 = &v72[-v106];
    v107 = v105 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      result = *(__n128 *)&v72[v104 * 2 - 16];
      v108 = &a3[v104];
      *((_OWORD *)v108 - 2) = *(_OWORD *)&v72[v104 * 2 - 32];
      *((__n128 *)v108 - 1) = result;
      v104 -= 16;
      v107 -= 16;
    }
    while (v107);
    if (v105 != (v105 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_101:
      v102 = v100 - 1;
      do
      {
        v103 = *((_WORD *)v101 - 1);
        v101 -= 2;
        *v102-- = v103;
      }
      while (v101 != a6);
    }
  }
  return result;
}

uint64_t webrtc::ReceiveSideCongestionController::OnRttUpdate(webrtc::ReceiveSideCongestionController *this, uint64_t a2, uint64_t a3)
{
  pthread_mutex_t *v6;

  v6 = (pthread_mutex_t *)((char *)this + 376);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  (***((void (****)(_QWORD, uint64_t, uint64_t))this + 55))(*((_QWORD *)this + 55), a2, a3);
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::ReceiveSideCongestionController::PickEstimator(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = this;
  if (a2)
  {
    if (!*(_BYTE *)(this + 448))
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/receive_side_congestion_controller.cc");
      *(_BYTE *)(v2 + 448) = 1;
      v10 = *(_QWORD *)(v2 + 8);
      v11 = operator new();
      *(_QWORD *)v11 = &off_24C0BB520;
      *(_QWORD *)(v11 + 8) = v10;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 16) = &unk_24C0B3F60;
      *(_QWORD *)(v11 + 40) = 0;
      *(_QWORD *)(v11 + 48) = v2 + 16;
      *(_QWORD *)(v11 + 56) = 0;
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 72) = 0x4029000000000000;
      *(_QWORD *)(v11 + 80) = -1;
      *(_OWORD *)(v11 + 88) = xmmword_208F16C00;
      *(_OWORD *)(v11 + 104) = 0u;
      *(_OWORD *)(v11 + 120) = 0u;
      *(_OWORD *)(v11 + 136) = 0u;
      *(_OWORD *)(v11 + 152) = 0u;
      *(_QWORD *)(v11 + 168) = -1;
      *(_BYTE *)(v11 + 176) = 0;
      *(_QWORD *)(v11 + 180) = 0x45FA000000000000;
      *(int64x2_t *)(v11 + 192) = vdupq_n_s64(0x3E8uLL);
      *(_BYTE *)(v11 + 208) = 0;
      *(_QWORD *)(v11 + 216) = v11 + 216;
      *(_QWORD *)(v11 + 224) = v11 + 216;
      *(_QWORD *)(v11 + 232) = 0;
      *(_QWORD *)(v11 + 240) = 0;
      *(int64x2_t *)(v11 + 248) = vdupq_n_s64(0x8000000000000000);
      *(_BYTE *)(v11 + 264) = 0;
      *(_QWORD *)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 272) = v11 + 280;
      *(_QWORD *)(v11 + 280) = 0;
      webrtc::AimdRateControl::AimdRateControl(v11 + 296, v11 + 16, 0);
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v12, v13, v14, v15, v16, v17, v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/remote_bitrate_estimator_abs_send_time.cc");
      this = *(_QWORD *)(v2 + 440);
      *(_QWORD *)(v2 + 440) = v11;
      if (this)
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    }
    *(_DWORD *)(v2 + 452) = 0;
  }
  else if (*(_BYTE *)(this + 448))
  {
    v19 = *(_DWORD *)(this + 452) + 1;
    *(_DWORD *)(this + 452) = v19;
    if (v19 >= 0x1E)
    {
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v20, v21, v22, v23, v24, v25, v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congestion_controller/receive_side_congestion_controller.cc");
      *(_BYTE *)(v2 + 448) = 0;
      v27 = *(_QWORD *)(v2 + 8);
      v28 = operator new();
      *(_QWORD *)v28 = &off_24C0BB568;
      *(_QWORD *)(v28 + 8) = v27;
      *(_QWORD *)(v28 + 24) = 0;
      *(_QWORD *)(v28 + 32) = 0;
      *(_QWORD *)(v28 + 16) = &unk_24C0B3F60;
      *(_QWORD *)(v28 + 64) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      *(_QWORD *)(v28 + 40) = 0;
      *(_QWORD *)(v28 + 48) = v28 + 56;
      *(_OWORD *)(v28 + 72) = 0u;
      *(_OWORD *)(v28 + 88) = 0u;
      *(_OWORD *)(v28 + 104) = 0u;
      *(_QWORD *)(v28 + 120) = 0;
      *(_QWORD *)(v28 + 128) = -1;
      *(_BYTE *)(v28 + 136) = 0;
      *(_QWORD *)(v28 + 140) = 0x45FA000000000000;
      *(int64x2_t *)(v28 + 152) = vdupq_n_s64(0x3E8uLL);
      *(_QWORD *)(v28 + 168) = 0;
      webrtc::AimdRateControl::AimdRateControl(v28 + 176, v28 + 16, 0);
      *(_QWORD *)(v28 + 592) = v2 + 16;
      *(_BYTE *)(v28 + 600) = 0;
      *(_BYTE *)(v28 + 608) = 0;
      *(_QWORD *)(v28 + 616) = 500000;
      *(_BYTE *)(v28 + 624) = 0;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v29, v30, v31, v32, v33, v34, v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/remote_bitrate_estimator_single_stream.cc");
      this = *(_QWORD *)(v2 + 440);
      *(_QWORD *)(v2 + 440) = v28;
      if (this)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    }
  }
  return this;
}

uint64_t webrtc::ReceiveSideCongestionController::ReceiveSideCongestionController(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[24];
  _BYTE *v27;
  _QWORD v28[3];
  _QWORD *v29;
  pthread_mutexattr_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0BB048;
  v8 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = (_QWORD *)(a1 + 16);
  v10 = (_QWORD *)a4[3];
  if (!v10)
  {
    v29 = 0;
    *v9 = &off_24C0BB420;
    goto LABEL_5;
  }
  if (v10 != a4)
  {
    v29 = (_QWORD *)a4[3];
    a4[3] = 0;
    *v9 = &off_24C0BB420;
    goto LABEL_7;
  }
  v29 = v28;
  (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v28);
  v8 = *(_QWORD *)(a1 + 8);
  v10 = v29;
  *(_QWORD *)(a1 + 16) = &off_24C0BB420;
  if (!v10)
  {
LABEL_5:
    *(_QWORD *)(a1 + 48) = 0;
    goto LABEL_10;
  }
LABEL_7:
  if (v10 == v28)
  {
    *(_QWORD *)(a1 + 48) = a1 + 24;
    (*(void (**)(_QWORD *))(v28[0] + 24))(v28);
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v10;
    v29 = 0;
  }
LABEL_10:
  *(_QWORD *)(a1 + 56) = v8;
  pthread_mutexattr_init(&v30);
  pthread_mutexattr_setpolicy_np(&v30, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 64), &v30);
  pthread_mutexattr_destroy(&v30);
  *(_OWORD *)(a1 + 128) = xmmword_208F180A0;
  *(_QWORD *)(a1 + 144) = 0x7FFFFFFFFFFFFFFFLL;
  v11 = v29;
  if (v29 == v28)
  {
    v12 = 4;
    v11 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_15;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_15:
  v13 = (_QWORD *)a3[3];
  if (v13)
  {
    if (v13 == a3)
    {
      v27 = v26;
      (*(void (**)(_QWORD *, _BYTE *))(*a3 + 24))(a3, v26);
    }
    else
    {
      v27 = (_BYTE *)a3[3];
      a3[3] = 0;
    }
  }
  else
  {
    v27 = 0;
  }
  webrtc::RemoteEstimatorProxy::RemoteEstimatorProxy(a1 + 152, (uint64_t)v26, a5);
  v14 = v27;
  if (v27 == v26)
  {
    v15 = 4;
    v14 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_25;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_25:
  pthread_mutexattr_init(&v30);
  pthread_mutexattr_setpolicy_np(&v30, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 376), &v30);
  pthread_mutexattr_destroy(&v30);
  v16 = *(_QWORD *)(a1 + 8);
  v17 = operator new();
  *(_QWORD *)v17 = &off_24C0BB568;
  *(_QWORD *)(v17 + 8) = v16;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = &unk_24C0B3F60;
  *(_QWORD *)(v17 + 64) = 0;
  *(_QWORD *)(v17 + 56) = 0;
  *(_QWORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 48) = v17 + 56;
  *(_OWORD *)(v17 + 72) = 0u;
  *(_OWORD *)(v17 + 88) = 0u;
  *(_OWORD *)(v17 + 104) = 0u;
  *(_QWORD *)(v17 + 120) = 0;
  *(_QWORD *)(v17 + 128) = -1;
  *(_BYTE *)(v17 + 136) = 0;
  *(_QWORD *)(v17 + 140) = 0x45FA000000000000;
  *(int64x2_t *)(v17 + 152) = vdupq_n_s64(0x3E8uLL);
  *(_QWORD *)(v17 + 168) = 0;
  webrtc::AimdRateControl::AimdRateControl(v17 + 176, v17 + 16, 0);
  *(_QWORD *)(v17 + 592) = v9;
  *(_BYTE *)(v17 + 600) = 0;
  *(_BYTE *)(v17 + 608) = 0;
  *(_QWORD *)(v17 + 616) = 500000;
  *(_BYTE *)(v17 + 624) = 0;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/remote_bitrate_estimator_single_stream.cc");
  *(_QWORD *)(a1 + 440) = v17;
  *(_BYTE *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 452) = 0;
  return a1;
}

void webrtc::ReceiveSideCongestionController::OnReceivedPacket(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _BOOL4 v14;
  BOOL v15;

  if (*(_BYTE *)(a2 + 40))
  {
    v5 = *(unsigned __int8 **)(a2 + 56);
    v6 = *(unsigned __int8 **)(a2 + 64);
    if (v5 != v6)
    {
      while (*v5 != *(unsigned __int8 *)(a2 + 40))
      {
        v5 += 4;
        if (v5 == v6)
          goto LABEL_5;
      }
      goto LABEL_11;
    }
  }
LABEL_5:
  if (*(_BYTE *)(a2 + 41))
  {
    v7 = *(unsigned __int8 **)(a2 + 56);
    v8 = *(unsigned __int8 **)(a2 + 64);
    if (v7 != v8)
    {
      while (*v7 != *(unsigned __int8 *)(a2 + 41))
      {
        v7 += 4;
        if (v7 == v8)
          goto LABEL_9;
      }
LABEL_11:
      webrtc::RemoteEstimatorProxy::IncomingPacket(a1 + 152, a2);
      return;
    }
  }
LABEL_9:
  if (a3 != 1)
  {
    pthread_mutex_lock((pthread_mutex_t *)(a1 + 376));
    v9 = *(unsigned __int8 *)(a2 + 37);
    if (!*(_BYTE *)(a2 + 37) || (v11 = *(_QWORD *)(a2 + 56), v10 = *(_QWORD *)(a2 + 64), v11 == v10))
    {
      v14 = 0;
    }
    else
    {
      v12 = v11 + 4;
      do
      {
        v13 = *(unsigned __int8 *)(v12 - 4);
        v14 = v13 == v9;
        v15 = v13 == v9 || v12 == v10;
        v12 += 4;
      }
      while (!v15);
    }
    webrtc::ReceiveSideCongestionController::PickEstimator(a1, v14);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 440) + 24))(*(_QWORD *)(a1 + 440), a2);
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 376));
  }
}

uint64_t webrtc::ReceiveSideCongestionController::MaybeProcess(webrtc::ReceiveSideCongestionController *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 376));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 55) + 48))(*((_QWORD *)this + 55));
  pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 376));
  pthread_mutex_lock((pthread_mutex_t *)this + 3);
  v4 = 0x7FFFFFFFFFFFFFFFLL;
  if (*((_BYTE *)this + 352))
  {
    v5 = *((_QWORD *)this + 43);
    v6 = *((_QWORD *)this + 23);
    v7 = v5 == 0x8000000000000000 || v6 == 0x8000000000000000;
    v8 = v6 + v5;
    if (v7)
      v8 = 0x8000000000000000;
    if (v5 == 0x7FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    if (v9 <= v2)
    {
      *((_QWORD *)this + 23) = v2;
      webrtc::RemoteEstimatorProxy::SendPeriodicFeedbacks((webrtc::ReceiveSideCongestionController *)((char *)this + 152));
      v4 = *((_QWORD *)this + 43);
    }
    else if (v2 == 0x8000000000000000 || v9 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v4 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v4 = v9 - v2;
    }
  }
  pthread_mutex_unlock((pthread_mutex_t *)this + 3);
  if (v4 >= v3)
    v11 = v3;
  else
    v11 = v4;
  return v11 & ~(v11 >> 63);
}

void webrtc::ReceiveSideCongestionController::~ReceiveSideCongestionController(webrtc::ReceiveSideCongestionController *this)
{
  uint64_t v2;
  uint64_t v3;
  webrtc::ReceiveSideCongestionController *v4;
  uint64_t v5;
  webrtc::ReceiveSideCongestionController *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0BB048;
  v2 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 376));
  v3 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8000313F17);
  pthread_mutex_destroy((pthread_mutex_t *)this + 3);
  v4 = (webrtc::ReceiveSideCongestionController *)*((_QWORD *)this + 22);
  if (v4 == (webrtc::ReceiveSideCongestionController *)((char *)this + 152))
  {
    v5 = 4;
    v4 = (webrtc::ReceiveSideCongestionController *)((char *)this + 152);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_10:
  *((_QWORD *)this + 2) = &off_24C0BB420;
  pthread_mutex_destroy((pthread_mutex_t *)this + 1);
  v6 = (webrtc::ReceiveSideCongestionController *)*((_QWORD *)this + 6);
  if (v6 == (webrtc::ReceiveSideCongestionController *)((char *)this + 24))
  {
    v7 = 4;
    v6 = (webrtc::ReceiveSideCongestionController *)((char *)this + 24);
  }
  else
  {
    if (!v6)
      return;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
}

{
  uint64_t v2;
  uint64_t v3;
  webrtc::ReceiveSideCongestionController *v4;
  uint64_t v5;
  webrtc::ReceiveSideCongestionController *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_24C0BB048;
  v2 = *((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 376));
  v3 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v3)
    MEMORY[0x20BD0ADD4](v3, 0x1000C8000313F17);
  pthread_mutex_destroy((pthread_mutex_t *)this + 3);
  v4 = (webrtc::ReceiveSideCongestionController *)*((_QWORD *)this + 22);
  if (v4 == (webrtc::ReceiveSideCongestionController *)((char *)this + 152))
  {
    v5 = 4;
    v4 = (webrtc::ReceiveSideCongestionController *)((char *)this + 152);
  }
  else
  {
    if (!v4)
      goto LABEL_10;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_10:
  *((_QWORD *)this + 2) = &off_24C0BB420;
  pthread_mutex_destroy((pthread_mutex_t *)this + 1);
  v6 = (webrtc::ReceiveSideCongestionController *)*((_QWORD *)this + 6);
  if (v6 == (webrtc::ReceiveSideCongestionController *)((char *)this + 24))
  {
    v7 = 4;
    v6 = (webrtc::ReceiveSideCongestionController *)((char *)this + 24);
  }
  else
  {
    if (!v6)
      goto LABEL_15;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_15:
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::StreamStatisticianImpl::StreamStatisticianImpl(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = &off_24C0BB070;
  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, v7);
  if (v7 % 0x3E8uLL <= 0x1F3)
    v9 = 0;
  else
    v9 = -1;
  v10 = v9 - v7 / 0x3E8uLL;
  v11 = -v7 / 0x3E8uLL;
  if (-v7 % 0x3E8uLL > 0x1F4)
    ++v11;
  if (v7 < 0)
    v10 = v11;
  *(_QWORD *)(a1 + 24) = 1000 * ((uint64_t)((double)v8 / 4294967.3 + 0.5) + 1000 * HIDWORD(v8) + v10)
                       - 2208988800000000;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = -1;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 100) = 0x45FA000000000000;
  *(int64x2_t *)(a1 + 112) = vdupq_n_s64(0x3E8uLL);
  *(_DWORD *)(a1 + 128) = a4;
  *(_WORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 186) = 0;
  *(_QWORD *)(a1 + 192) = -1;
  *(_QWORD *)(a1 + 200) = -1;
  *(_BYTE *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0x7FFFFFFFFFFFFFFFLL;
  *(_BYTE *)(a1 + 210) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 332) = 0u;
  *(_QWORD *)(a1 + 352) = -1;
  *(_DWORD *)(a1 + 360) = 0;
  return a1;
}

void webrtc::StreamStatisticianImpl::~StreamStatisticianImpl(void **this)
{
  *this = &off_24C0BB070;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 4);
}

{
  *this = &off_24C0BB070;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100](this + 4);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::StreamStatisticianImpl::UpdateCounters(uint64_t a1, int64x2_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64x2_t v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  int v23;
  _BOOL4 v24;
  int v25;
  unsigned __int16 v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  _BOOL4 v32;
  uint64_t v33;
  __int32 v34;
  __int32 v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int32 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v53;
  float v54;
  float v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v60;
  int64x2_t v61;
  int64x2_t v62;
  std::string *v63;
  int v64;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  v5 = v4 / 0x3E8uLL;
  if (v4 % 0x3E8uLL > 0x1F3)
    ++v5;
  if (-v4 % 0x3E8uLL <= 0x1F4)
    v6 = 0;
  else
    v6 = -1;
  if (v4 < 0)
    v7 = v6 - -v4 / 0x3E8uLL;
  else
    v7 = v5;
  webrtc::RateStatistics::Update((webrtc::RateStatistics *)(a1 + 32), a2[1].i64[1] + a2[1].i64[0] + a2->u8[2], v7);
  v12 = *(_QWORD *)(a1 + 248) + 1;
  v13 = a2->u8[2];
  *(_QWORD *)(a1 + 240) += v13;
  *(_QWORD *)(a1 + 248) = v12;
  v14 = a2[1];
  *(int64x2_t *)(a1 + 224) = vaddq_s64(*(int64x2_t *)(a1 + 224), v14);
  v15 = *(_DWORD *)(a1 + 140);
  v16 = v15 - 1;
  *(_DWORD *)(a1 + 140) = v15 - 1;
  v17 = a2->u16[2];
  v18 = *(unsigned __int8 *)(a1 + 186);
  v19 = a2->u16[2];
  if (*(_BYTE *)(a1 + 186))
  {
    v20 = *(unsigned __int16 *)(a1 + 184);
    v21 = v17 >= v20;
    LODWORD(v22) = v17 - v20;
    v23 = (_DWORD)v22 != 0 && v21;
    v24 = (v22 & 0x8000u) == 0;
    if ((_DWORD)v22 == 0x8000)
      v24 = v23;
    if (v24)
      v22 = (unsigned __int16)v22;
    else
      v22 |= 0xFFFFFFFFFFFF0000;
    v19 = v22 + *(_QWORD *)(a1 + 176);
  }
  v25 = *(unsigned __int8 *)(a1 + 160);
  if (!*(_BYTE *)(a1 + 160))
  {
    *(_QWORD *)(a1 + 192) = v19;
    LODWORD(v27) = v19 - 1;
    *(_QWORD *)(a1 + 352) = v19 - 1;
    *(_QWORD *)(a1 + 216) = v4;
    v17 = a2->u16[2];
    goto LABEL_30;
  }
  if (*(_BYTE *)(a1 + 210))
  {
    v16 = v15 - 2;
    *(_DWORD *)(a1 + 140) = v15 - 2;
    v26 = *(_WORD *)(a1 + 208) + 1;
    *(_BYTE *)(a1 + 210) = 0;
    if (v17 == v26)
    {
      LODWORD(v27) = v19 - 2;
      *(_QWORD *)(a1 + 352) = v19 - 2;
LABEL_30:
      *(_DWORD *)(a1 + 140) = v16 + v19 - v27;
      *(_QWORD *)(a1 + 200) = v19;
      if (v18)
      {
        v29 = *(unsigned __int16 *)(a1 + 184);
        v21 = v17 >= v29;
        LODWORD(v30) = v17 - v29;
        v31 = (_DWORD)v30 != 0 && v21;
        v32 = (v30 & 0x8000u) == 0;
        if ((_DWORD)v30 == 0x8000)
          v32 = v31;
        if (v32)
          v30 = (unsigned __int16)v30;
        else
          v30 |= 0xFFFFFFFFFFFF0000;
        v33 = v30 + *(_QWORD *)(a1 + 176);
      }
      else
      {
        v33 = v17;
      }
      *(_QWORD *)(a1 + 176) = v33;
      *(_WORD *)(a1 + 184) = v17;
      *(_BYTE *)(a1 + 186) = 1;
      v34 = a2->i32[2];
      v35 = *(_DWORD *)(a1 + 168) - v34;
      if (v35)
      {
        v36 = v12 - *(_QWORD *)(a1 + 288);
        if (v36 >= 2)
        {
          if (v25)
          {
            v37 = 0x7FFFFFFFFFFFFFFFLL;
            if (v4 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v38 = *(_QWORD *)(a1 + 152);
              if (v38 != 0x8000000000000000)
              {
                v37 = v4 - v38;
                if (v38 == 0x7FFFFFFFFFFFFFFFLL || v4 == 0x8000000000000000)
                  v37 = 0x8000000000000000;
              }
            }
            v40 = a2[7].i32[3];
            v41 = v37 * v40;
            v42 = v41 / 0xF4240uLL;
            if (v41 % 0xF4240uLL > 0x7A11F)
              LODWORD(v42) = v42 + 1;
            if (-v41 % 0xF4240uLL <= 0x7A120)
              v43 = 0;
            else
              v43 = -1;
            v44 = v43 - -v41 / 0xF4240uLL;
            if (v41 < 0)
              v45 = v44;
            else
              v45 = v42;
            v46 = v35 + v45;
            if (v40)
            {
              v47 = *(_DWORD *)(a1 + 360);
              if (v47 != v40)
              {
                if (v47)
                  *(_DWORD *)(a1 + 136) = (unint64_t)*(unsigned int *)(a1 + 136) * v40 / v47;
                *(_DWORD *)(a1 + 360) = v40;
              }
            }
            if ((v46 + 449999) <= 0xDBB9E)
            {
              if (v46 >= 0)
                v48 = v46;
              else
                v48 = -v46;
              *(_DWORD *)(a1 + 136) += (((16 * v48) | 8) - *(_DWORD *)(a1 + 136)) >> 4;
            }
            *(_DWORD *)(a1 + 168) = v34;
            goto LABEL_70;
          }
          __break(1u);
          goto LABEL_98;
        }
      }
      *(_DWORD *)(a1 + 168) = v34;
      if (v25)
      {
LABEL_70:
        *(_QWORD *)(a1 + 152) = v4;
        return;
      }
      *(_BYTE *)(a1 + 160) = 1;
      *(_QWORD *)(a1 + 152) = v4;
      return;
    }
  }
  v27 = *(_QWORD *)(a1 + 200);
  v28 = v19 - v27;
  if (v19 - v27 < 0)
    v28 = v27 - v19;
  if (v28 > *(int *)(a1 + 128))
  {
    *(_WORD *)(a1 + 208) = v17;
    *(_BYTE *)(a1 + 210) = 1;
    *(_DWORD *)(a1 + 140) = v16 + 1;
    return;
  }
  if (v19 > v27)
    goto LABEL_30;
  if (*(_BYTE *)(a1 + 132))
  {
    v36 = a2[7].u32[3];
    if ((int)v36 <= 0)
    {
LABEL_98:
      v63 = rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/receive_statistics_impl.cc", 322, "frequency_hz > 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v8, v9, v10, v11, v36);
      webrtc::StreamStatisticianImpl::SetMaxReorderingThreshold((uint64_t)v63, v64);
      return;
    }
    v49 = *(_QWORD *)(a1 + 152);
    v50 = v4 - v49;
    if (v49 == 0x7FFFFFFFFFFFFFFFLL || v4 == 0x8000000000000000)
      v50 = 0x8000000000000000;
    if (v4 == 0x7FFFFFFFFFFFFFFFLL || v49 == 0x8000000000000000)
      v53 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v53 = v50;
    v54 = sqrtf((float)(*(_DWORD *)(a1 + 136) >> 4));
    v55 = (float)((float)(v54 + v54) / (float)(int)v36) * 1000000.0;
    v56 = 0x7FFFFFFFFFFFFFFFLL;
    if (v55 != INFINITY)
    {
      v57 = 1000000 * (unint64_t)(a2->i32[2] - *(_DWORD *)(a1 + 168)) / v36;
      v58 = (uint64_t)v55;
      if ((uint64_t)v55 < 1000 || v55 == -INFINITY)
        v58 = 1000;
      v60 = v57 + v58;
      if (v58 == 0x7FFFFFFFFFFFFFFFLL)
        v56 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v56 = v60;
    }
    if (v53 > v56)
    {
      v61 = vdupq_n_s64(1uLL);
      v61.i64[0] = v13;
      v62 = vaddq_s64(*(int64x2_t *)(a1 + 280), v61);
      *(int64x2_t *)(a1 + 264) = vaddq_s64(*(int64x2_t *)(a1 + 264), v14);
      *(int64x2_t *)(a1 + 280) = v62;
    }
  }
}

uint64_t webrtc::StreamStatisticianImpl::SetMaxReorderingThreshold(uint64_t this, int a2)
{
  *(_DWORD *)(this + 128) = a2;
  return this;
}

uint64_t webrtc::StreamStatisticianImpl::EnableRetransmitDetection(uint64_t this, char a2)
{
  *(_BYTE *)(this + 132) = a2;
  return this;
}

__n128 webrtc::StreamStatisticianImpl::GetStats@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  __n128 result;
  __n128 v10;

  a2[1].n128_u8[8] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u8[0] = 0;
  v2 = (unint64_t)this[8].n128_u32[2] >> 4;
  a2->n128_u32[0] = this[8].n128_u32[3];
  a2->n128_u32[1] = v2;
  v3 = this[22].n128_u32[2];
  if ((int)v3 >= 1)
    a2->n128_u64[1] = 1000000 * (unint64_t)v2 / v3;
  if (this[10].n128_u8[0])
  {
    v4 = this[1].n128_u64[1];
    v5 = this[9].n128_u64[1];
    v6 = 0x8000000000000000;
    if (v4 != 0x8000000000000000 && v5 != 0x8000000000000000)
      v6 = v5 + v4;
    if (v4 == 0x7FFFFFFFFFFFFFFFLL)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v8 = v6;
    if (v5 == 0x7FFFFFFFFFFFFFFFLL)
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    a2[1].n128_u8[8] = 1;
    a2[1].n128_u64[0] = v8;
  }
  result = this[14];
  v10 = this[15];
  a2[2] = result;
  a2[3] = v10;
  a2[4].n128_u64[0] = this[16].n128_u64[0];
  return result;
}

void webrtc::StreamStatisticianImpl::MaybeAppendReportBlockAndReset(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v7;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;

  if (!*(_BYTE *)(a1 + 160))
    return;
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
  if (!*(_BYTE *)(a1 + 160))
    goto LABEL_44;
  v5 = *(_QWORD *)(a1 + 152);
  if (v4 == 0x7FFFFFFFFFFFFFFFLL || v5 == 0x8000000000000000)
    return;
  v7 = v4 == 0x8000000000000000 || v5 == 0x7FFFFFFFFFFFFFFFLL;
  if (!v7 && v4 - v5 > 7999999)
    return;
  v10 = (char *)a2[1];
  v9 = (unint64_t)a2[2];
  if ((unint64_t)v10 < v9)
  {
    if (v10)
    {
      *(_DWORD *)v10 = 0;
      v10[4] = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      v11 = v10 + 28;
      *((_DWORD *)v10 + 6) = 0;
      goto LABEL_31;
    }
LABEL_44:
    __break(1u);
LABEL_45:
    abort();
  }
  v12 = (char *)*a2;
  v13 = 0x6DB6DB6DB6DB6DB7 * ((v10 - (_BYTE *)*a2) >> 2);
  v14 = v13 + 1;
  if ((unint64_t)(v13 + 1) > 0x924924924924924)
    goto LABEL_45;
  v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - (_QWORD)v12) >> 2);
  if (2 * v15 > v14)
    v14 = 2 * v15;
  if (v15 >= 0x492492492492492)
    v16 = 0x924924924924924;
  else
    v16 = v14;
  if (!v16)
    goto LABEL_44;
  if (v16 > 0x924924924924924)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v17 = 28 * v16;
  v18 = (char *)operator new(28 * v16);
  v19 = &v18[28 * v13];
  *(_DWORD *)v19 = 0;
  v19[4] = 0;
  v20 = &v18[v17];
  *((_QWORD *)v19 + 1) = 0;
  *((_QWORD *)v19 + 2) = 0;
  *((_DWORD *)v19 + 6) = 0;
  v11 = v19 + 28;
  if (v10 != v12)
  {
    do
    {
      v21 = *(_OWORD *)(v10 - 28);
      *((_OWORD *)v19 - 1) = *((_OWORD *)v10 - 1);
      *(_OWORD *)(v19 - 28) = v21;
      v19 -= 28;
      v10 -= 28;
    }
    while (v10 != v12);
    v10 = v12;
  }
  *a2 = v19;
  a2[1] = v11;
  a2[2] = v20;
  if (v10)
    operator delete(v10);
LABEL_31:
  a2[1] = v11;
  if (*a2 == v11)
    goto LABEL_44;
  *((_DWORD *)v11 - 7) = *(_DWORD *)(a1 + 8);
  v22 = *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 352);
  v23 = *(int *)(a1 + 140);
  if (v22 >= 1)
  {
    v24 = v23 - *(int *)(a1 + 344);
    if ((int)v24 >= 1)
      *(v11 - 24) = 255 * v24 / v22;
  }
  v25 = *(_DWORD *)(a1 + 144) + v23;
  if (v25 < 0)
  {
    v25 = 0;
    *(_DWORD *)(a1 + 144) = -(int)v23;
  }
  else if (v25 >= 0x800000)
  {
    if (!*(_BYTE *)(a1 + 133))
    {
      *(_BYTE *)(a1 + 133) = 1;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)4,unsigned int> const&)::t, v26, v27, v28, v29, v30, v31, v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/receive_statistics_impl.cc");
    }
    v25 = 0x7FFFFF;
  }
  v33 = *(_QWORD *)(a1 + 200);
  *((_DWORD *)v11 - 5) = v25;
  *((_DWORD *)v11 - 4) = v33;
  v34 = *(_DWORD *)(a1 + 140);
  *((_DWORD *)v11 - 3) = *(_DWORD *)(a1 + 136) >> 4;
  *(_DWORD *)(a1 + 344) = v34;
  *(_QWORD *)(a1 + 352) = v33;
}

unint64_t webrtc::StreamStatisticianImpl::GetFractionLostInPercent(webrtc::StreamStatisticianImpl *this)
{
  uint64_t v1;
  int v2;

  if (!*((_BYTE *)this + 160))
    return 0;
  v1 = *((_QWORD *)this + 25) - *((_QWORD *)this + 24) + 1;
  if (v1 < 1)
    return 0;
  v2 = *((_DWORD *)this + 35);
  if (v2 < 1)
    return 0x100000000;
  else
    return (100 * (unint64_t)v2 / v1) | 0x100000000 | (100
                                                                                             * (unint64_t)v2
                                                                                             / v1) & 0xFFFFFF00;
}

__n128 webrtc::StreamStatisticianImpl::GetReceiveStreamDataCounters@<Q0>(webrtc::StreamStatisticianImpl *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;

  v2 = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(a2 + 16) = v2;
  v3 = *(_OWORD *)((char *)this + 296);
  v4 = *(_OWORD *)((char *)this + 312);
  v5 = *(_OWORD *)((char *)this + 264);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)((char *)this + 280);
  *(_OWORD *)(a2 + 80) = v3;
  v6 = *(_OWORD *)((char *)this + 328);
  *(_OWORD *)(a2 + 96) = v4;
  *(_OWORD *)(a2 + 112) = v6;
  result = *(__n128 *)((char *)this + 248);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v5;
  return result;
}

uint64_t webrtc::StreamStatisticianImpl::BitrateReceived(webrtc::StreamStatisticianImpl *this)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
  v3 = v2 / 0x3E8uLL;
  if (v2 % 0x3E8uLL > 0x1F3)
    ++v3;
  if (-v2 % 0x3E8uLL <= 0x1F4)
    v4 = 0;
  else
    v4 = -1;
  if (v2 < 0)
    v5 = v4 - -v2 / 0x3E8uLL;
  else
    v5 = v3;
  LODWORD(result) = webrtc::RateStatistics::Rate((webrtc::StreamStatisticianImpl *)((char *)this + 32), v5);
  if (v7)
    return result;
  else
    return 0;
}

uint64_t webrtc::ReceiveStatisticsImpl::OnRtpPacket(webrtc::ReceiveStatisticsImpl *a1, uint64_t a2)
{
  uint64_t Statistician;

  Statistician = webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician(a1, *(_DWORD *)(a2 + 12));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Statistician + 72))(Statistician, a2);
}

uint64_t webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician(webrtc::ReceiveStatisticsImpl *this, unsigned int a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  _DWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  unsigned int *v59;
  char *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  _OWORD *v65;
  char *v66;
  uint64_t v67;
  __int128 v68;
  unsigned int v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  unsigned int v77;

  v5 = (char *)*((_QWORD *)this + 12);
  v4 = *((_QWORD *)this + 13);
  v6 = v4 - (_QWORD)v5;
  if ((char *)v4 == v5)
  {
    v8 = (char *)*((_QWORD *)this + 13);
    v13 = v4 - (_QWORD)v5;
    v14 = (uint64_t)(v4 - (_QWORD)v5) >> 4;
  }
  else
  {
    v7 = v6 >> 4;
    v8 = (char *)*((_QWORD *)this + 12);
    do
    {
      v9 = v7 >> 1;
      v10 = &v8[16 * (v7 >> 1)];
      v12 = *(_DWORD *)v10;
      v11 = v10 + 16;
      v7 += ~(v7 >> 1);
      if (v12 < a2)
        v8 = v11;
      else
        v7 = v9;
    }
    while (v7);
    v13 = v8 - v5;
    v14 = (v8 - v5) >> 4;
    if (v8 != (char *)v4)
    {
      if (*(_DWORD *)v8 <= a2)
      {
LABEL_35:
        v4 = (unint64_t)v8;
        result = *((_QWORD *)v8 + 1);
        if (result)
          return result;
        goto LABEL_54;
      }
      v15 = *((_QWORD *)this + 14);
      if (v4 < v15)
      {
        v16 = v8 + 16;
        v17 = v4 - 16;
        v18 = *((_QWORD *)this + 13);
        if (v4 >= 0x10)
        {
          do
          {
            *(_DWORD *)v18 = *(_DWORD *)v17;
            v19 = *(_QWORD *)(v17 + 8);
            *(_QWORD *)(v17 + 8) = 0;
            *(_QWORD *)(v18 + 8) = v19;
            v18 += 16;
            v17 += 16;
          }
          while (v17 < v4);
        }
        *((_QWORD *)this + 13) = v18;
        if ((char *)v4 != v16)
        {
          v20 = (_QWORD *)(v4 - 8);
          v21 = 16 * ((uint64_t)(v4 - (_QWORD)v16) >> 4);
          do
          {
            *((_DWORD *)v20 - 2) = *(_DWORD *)&v8[v21 - 16];
            v22 = *(_QWORD *)&v8[v21 - 8];
            *(_QWORD *)&v8[v21 - 8] = 0;
            v23 = *v20;
            *v20 = v22;
            if (v23)
              (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
            v20 -= 2;
            v21 -= 16;
          }
          while (v21);
        }
        *(_DWORD *)v8 = a2;
        v29 = &v5[16 * v14];
        v30 = *((_QWORD *)v29 + 1);
        *((_QWORD *)v29 + 1) = 0;
        if (v30)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
          v4 = (unint64_t)v8;
          result = *((_QWORD *)v8 + 1);
          if (result)
            return result;
          goto LABEL_54;
        }
        goto LABEL_35;
      }
LABEL_22:
      v25 = (v6 >> 4) + 1;
      if (v25 >> 60)
        goto LABEL_91;
      v26 = v15 - (_QWORD)v5;
      if (v26 >> 3 > v25)
        v25 = v26 >> 3;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
        v27 = 0xFFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 60)
          goto LABEL_92;
        v28 = (char *)operator new(16 * v27);
        v4 = (unint64_t)&v28[16 * v14];
        if (v14 != v27)
          goto LABEL_42;
      }
      else
      {
        v28 = 0;
        v4 = 16 * v14;
        if (v14)
          goto LABEL_42;
      }
      if (v13 < 1)
      {
        if (v8 == v5)
          v70 = 1;
        else
          v70 = v13 >> 3;
        if (v70 >> 60)
          goto LABEL_92;
        v71 = 16 * v70;
        v72 = (char *)operator new(16 * v70);
        v4 = (unint64_t)&v72[16 * (v70 >> 2)];
        v32 = &v72[v71];
        if (v28)
        {
          operator delete(v28);
          v5 = (char *)*((_QWORD *)this + 12);
        }
        goto LABEL_44;
      }
      v31 = v14 + 2;
      if (v14 >= -1)
        v31 = v14 + 1;
      v4 -= 16 * (v31 >> 1);
LABEL_42:
      if (!v4)
        goto LABEL_90;
      v32 = &v28[16 * v27];
LABEL_44:
      *(_DWORD *)v4 = a2;
      *(_QWORD *)(v4 + 8) = 0;
      v33 = v4 + 16;
      v34 = v4;
      if (v5 != v8)
      {
        v35 = v8;
        v34 = v4;
        do
        {
          v36 = *((_DWORD *)v35 - 4);
          v35 -= 16;
          *(_DWORD *)(v34 - 16) = v36;
          v34 -= 16;
          v37 = *((_QWORD *)v35 + 1);
          *((_QWORD *)v35 + 1) = 0;
          *(_QWORD *)(v34 + 8) = v37;
        }
        while (v35 != v5);
      }
      v38 = (char *)*((_QWORD *)this + 13);
      if (v38 != v8)
      {
        do
        {
          *(_DWORD *)v33 = *(_DWORD *)v8;
          v39 = *((_QWORD *)v8 + 1);
          *((_QWORD *)v8 + 1) = 0;
          *(_QWORD *)(v33 + 8) = v39;
          v33 += 16;
          v8 += 16;
        }
        while (v8 != v38);
        v8 = (char *)*((_QWORD *)this + 13);
      }
      v40 = (char *)*((_QWORD *)this + 12);
      *((_QWORD *)this + 12) = v34;
      *((_QWORD *)this + 13) = v33;
      *((_QWORD *)this + 14) = v32;
      if (v8 == v40)
      {
        if (!v8)
          goto LABEL_53;
      }
      else
      {
        do
        {
          v50 = *((_QWORD *)v8 - 1);
          *((_QWORD *)v8 - 1) = 0;
          if (v50)
            (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          v8 -= 16;
        }
        while (v8 != v40);
        v8 = v40;
        if (!v40)
        {
LABEL_53:
          result = *(_QWORD *)(v4 + 8);
          if (result)
            return result;
          goto LABEL_54;
        }
      }
      operator delete(v8);
      goto LABEL_53;
    }
  }
  v15 = *((_QWORD *)this + 14);
  if (v4 >= v15)
    goto LABEL_22;
  if (!v5)
    goto LABEL_90;
  *(_DWORD *)v4 = a2;
  *(_QWORD *)&v5[16 * v14 + 8] = 0;
  *((_QWORD *)this + 13) = v4 + 16;
  result = *(_QWORD *)(v4 + 8);
  if (result)
    return result;
LABEL_54:
  v41 = *((_QWORD *)this + 2);
  v42 = *((_DWORD *)this + 22);
  v77 = a2;
  v76 = v41;
  v75 = v42;
  v43 = *((_QWORD *)this + 6);
  if (!v43)
  {
    v73 = std::__throw_bad_function_call[abi:sn180100]();
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned int *, uint64_t *, int *))(*(_QWORD *)v43 + 48))(&v74, v43, &v77, &v76, &v75);
  v44 = v74;
  v74 = 0;
  v45 = *(_QWORD *)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v44;
  if (v45)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    v46 = v74;
    v74 = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  }
  v48 = (char *)*((_QWORD *)this + 9);
  v47 = *((_QWORD *)this + 10);
  if ((unint64_t)v48 >= v47)
  {
    v51 = (char *)*((_QWORD *)this + 8);
    v52 = (v48 - v51) >> 2;
    v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 62)
      goto LABEL_91;
    v54 = v47 - (_QWORD)v51;
    if (v54 >> 1 > v53)
      v53 = v54 >> 1;
    v55 = (unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL;
    v56 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v55)
      v56 = v53;
    if (v56)
    {
      if (!(v56 >> 62))
      {
        v57 = 4 * v56;
        v58 = operator new(4 * v56);
        v59 = (unsigned int *)&v58[4 * v52];
        v60 = &v58[v57];
        *v59 = a2;
        v49 = v59 + 1;
        if (v48 != v51)
        {
          v61 = v48 - v51 - 4;
          if (v61 < 0x2C)
            goto LABEL_96;
          if ((unint64_t)(v51 - v58) < 0x20)
            goto LABEL_96;
          v62 = (v61 >> 2) + 1;
          v63 = 4 * (v62 & 0x7FFFFFFFFFFFFFF8);
          v64 = &v48[-v63];
          v59 = (unsigned int *)((char *)v59 - v63);
          v65 = &v58[4 * v52 - 16];
          v66 = v48 - 16;
          v67 = v62 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v68 = *(_OWORD *)v66;
            *(v65 - 1) = *((_OWORD *)v66 - 1);
            *v65 = v68;
            v65 -= 2;
            v66 -= 32;
            v67 -= 8;
          }
          while (v67);
          v48 = v64;
          if (v62 != (v62 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_96:
            do
            {
              v69 = *((_DWORD *)v48 - 1);
              v48 -= 4;
              *--v59 = v69;
            }
            while (v48 != v51);
          }
        }
        *((_QWORD *)this + 8) = v59;
        *((_QWORD *)this + 9) = v49;
        *((_QWORD *)this + 10) = v60;
        if (v51)
          operator delete(v51);
        goto LABEL_82;
      }
LABEL_92:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
LABEL_90:
    __break(1u);
LABEL_91:
    abort();
  }
  if (!v48)
    goto LABEL_90;
  *(_DWORD *)v48 = a2;
  v49 = v48 + 4;
LABEL_82:
  *((_QWORD *)this + 9) = v49;
  return *(_QWORD *)(v4 + 8);
}

uint64_t `non-virtual thunk to'webrtc::ReceiveStatisticsImpl::OnRtpPacket(uint64_t a1, uint64_t a2)
{
  uint64_t Statistician;

  Statistician = webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician((webrtc::ReceiveStatisticsImpl *)(a1 - 8), *(_DWORD *)(a2 + 12));
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Statistician + 72))(Statistician, a2);
}

uint64_t webrtc::ReceiveStatisticsImpl::GetStatistician(webrtc::ReceiveStatisticsImpl *this, unsigned int a2)
{
  char *v2;
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = (unsigned int *)*((_QWORD *)this + 12);
  v2 = (char *)*((_QWORD *)this + 13);
  if (v2 == (char *)v3)
  {
    v3 = (unsigned int *)*((_QWORD *)this + 13);
LABEL_13:
    if (v2 == (char *)v3)
      v3 = (unsigned int *)*((_QWORD *)this + 13);
    if (v2 != (char *)v3)
      return *((_QWORD *)v3 + 1);
    return 0;
  }
  v4 = (v2 - (char *)v3) >> 4;
  do
  {
    v5 = v4 >> 1;
    v6 = &v3[4 * (v4 >> 1)];
    v8 = *v6;
    v7 = v6 + 4;
    v4 += ~(v4 >> 1);
    if (v8 < a2)
      v3 = v7;
    else
      v4 = v5;
  }
  while (v4);
  if (v2 == (char *)v3)
    goto LABEL_13;
  if (&v3[4 * (*v3 <= a2)] == v3)
    v3 = (unsigned int *)*((_QWORD *)this + 13);
  if (v2 != (char *)v3)
    return *((_QWORD *)v3 + 1);
  return 0;
}

uint64_t webrtc::ReceiveStatisticsImpl::SetMaxReorderingThreshold(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  *(_DWORD *)(this + 88) = a2;
  v2 = *(_QWORD *)(this + 96);
  for (i = *(_QWORD *)(this + 104); v2 != i; v2 += 16)
    this = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8) + 56))(*(_QWORD *)(v2 + 8), a2);
  return this;
}

uint64_t webrtc::ReceiveStatisticsImpl::SetMaxReorderingThreshold(webrtc::ReceiveStatisticsImpl *this, unsigned int a2, uint64_t a3)
{
  uint64_t Statistician;

  Statistician = webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician(this, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Statistician + 56))(Statistician, a3);
}

uint64_t webrtc::ReceiveStatisticsImpl::EnableRetransmitDetection(webrtc::ReceiveStatisticsImpl *this, unsigned int a2, uint64_t a3)
{
  uint64_t Statistician;

  Statistician = webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician(this, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Statistician + 64))(Statistician, a3);
}

_QWORD *webrtc::ReceiveStatisticsImpl::RtcpReportBlocks@<X0>(_QWORD *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  unsigned int v20;
  char *v21;

  v4 = this;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v7 = this[8];
  v6 = this[9];
  v8 = (v6 - v7) >> 2;
  if (v8 >= a2)
    v9 = a2;
  else
    v9 = (v6 - v7) >> 2;
  if (v9)
  {
    if (v9 >= 0x924924924924925)
      abort();
    v10 = 28 * v9;
    this = operator new(28 * v9);
    *a3 = this;
    a3[1] = this;
    a3[2] = (char *)this + v10;
  }
  if (v6 != v7 && a2)
  {
    v11 = 0;
    while (1)
    {
      ++v11;
      v12 = (v4[7] + v11) % v8;
      v13 = *(_DWORD *)(v7 + 4 * v12);
      v15 = (char *)v4[12];
      v14 = (char *)v4[13];
      if (v14 == v15)
        break;
      v16 = (v14 - v15) >> 4;
      do
      {
        v17 = v16 >> 1;
        v18 = &v15[16 * (v16 >> 1)];
        v20 = *(_DWORD *)v18;
        v19 = v18 + 16;
        v16 += ~(v16 >> 1);
        if (v20 < v13)
          v15 = v19;
        else
          v16 = v17;
      }
      while (v16);
      if (v14 == v15)
        goto LABEL_19;
      v21 = &v15[16 * (v13 >= *(_DWORD *)v15)];
LABEL_20:
      if (v21 != v15)
        v14 = v15;
      this = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD *))(**((_QWORD **)v14 + 1) + 48))(*((_QWORD *)v14 + 1), a3);
      v7 = v4[8];
      v8 = (v4[9] - v7) >> 2;
      if (v11 >= v8 || 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a3[1] - *a3) >> 2) >= a2)
        goto LABEL_26;
    }
    v15 = (char *)v4[13];
LABEL_19:
    v21 = (char *)v4[13];
    goto LABEL_20;
  }
  v12 = 0;
LABEL_26:
  v4[7] = v12;
  return this;
}

void webrtc::ReceiveStatisticsImpl::~ReceiveStatisticsImpl(webrtc::ReceiveStatisticsImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  webrtc::ReceiveStatisticsImpl *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C0BB0D0;
  *((_QWORD *)this + 1) = &unk_24C0BB120;
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v3 = *((_QWORD *)this + 13);
    v4 = (void *)*((_QWORD *)this + 12);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 9) = v6;
    operator delete(v6);
  }
  v7 = (webrtc::ReceiveStatisticsImpl *)*((_QWORD *)this + 6);
  if (v7 == (webrtc::ReceiveStatisticsImpl *)((char *)this + 24))
  {
    v8 = 4;
    v7 = (webrtc::ReceiveStatisticsImpl *)((char *)this + 24);
  }
  else
  {
    if (!v7)
      return;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  webrtc::ReceiveStatisticsImpl *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C0BB0D0;
  *((_QWORD *)this + 1) = &unk_24C0BB120;
  v2 = *((_QWORD *)this + 12);
  if (v2)
  {
    v3 = *((_QWORD *)this + 13);
    v4 = (void *)*((_QWORD *)this + 12);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 12);
    }
    *((_QWORD *)this + 13) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 9) = v6;
    operator delete(v6);
  }
  v7 = (webrtc::ReceiveStatisticsImpl *)*((_QWORD *)this + 6);
  if (v7 == (webrtc::ReceiveStatisticsImpl *)((char *)this + 24))
  {
    v8 = 4;
    v7 = (webrtc::ReceiveStatisticsImpl *)((char *)this + 24);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::ReceiveStatisticsImpl::~ReceiveStatisticsImpl(webrtc::ReceiveStatisticsImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  webrtc::ReceiveStatisticsImpl *v7;
  uint64_t v8;

  *((_QWORD *)this - 1) = &off_24C0BB0D0;
  *(_QWORD *)this = &unk_24C0BB120;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *((_QWORD *)this + 12);
    v4 = (void *)*((_QWORD *)this + 11);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (webrtc::ReceiveStatisticsImpl *)*((_QWORD *)this + 5);
  if (v7 == (webrtc::ReceiveStatisticsImpl *)((char *)this + 16))
  {
    v8 = 4;
    v7 = (webrtc::ReceiveStatisticsImpl *)((char *)this + 16);
  }
  else
  {
    if (!v7)
      return;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  webrtc::ReceiveStatisticsImpl *v7;
  uint64_t v8;

  *((_QWORD *)this - 1) = &off_24C0BB0D0;
  *(_QWORD *)this = &unk_24C0BB120;
  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
    v3 = *((_QWORD *)this + 12);
    v4 = (void *)*((_QWORD *)this + 11);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 11);
    }
    *((_QWORD *)this + 12) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 7);
  if (v6)
  {
    *((_QWORD *)this + 8) = v6;
    operator delete(v6);
  }
  v7 = (webrtc::ReceiveStatisticsImpl *)*((_QWORD *)this + 5);
  if (v7 == (webrtc::ReceiveStatisticsImpl *)((char *)this + 16))
  {
    v8 = 4;
    v7 = (webrtc::ReceiveStatisticsImpl *)((char *)this + 16);
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x20BD0ADECLL);
}

void std::__function::__func<webrtc::ReceiveStatistics::Create(webrtc::Clock *)::$_0,std::allocator<webrtc::ReceiveStatistics::Create(webrtc::Clock *)::$_0>,std::unique_ptr<webrtc::StreamStatisticianImplInterface> ()(unsigned int,webrtc::Clock *,int)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::ReceiveStatistics::Create(webrtc::Clock *)::$_0,std::allocator<webrtc::ReceiveStatistics::Create(webrtc::Clock *)::$_0>,std::unique_ptr<webrtc::StreamStatisticianImplInterface> ()(unsigned int,webrtc::Clock *,int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0BB148;
  return result;
}

void std::__function::__func<webrtc::ReceiveStatistics::Create(webrtc::Clock *)::$_0,std::allocator<webrtc::ReceiveStatistics::Create(webrtc::Clock *)::$_0>,std::unique_ptr<webrtc::StreamStatisticianImplInterface> ()(unsigned int,webrtc::Clock *,int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0BB148;
}

uint64_t std::__function::__func<webrtc::ReceiveStatistics::Create(webrtc::Clock *)::$_0,std::allocator<webrtc::ReceiveStatistics::Create(webrtc::Clock *)::$_0>,std::unique_ptr<webrtc::StreamStatisticianImplInterface> ()(unsigned int,webrtc::Clock *,int)>::operator()@<X0>(int *a1@<X1>, uint64_t *a2@<X2>, int *a3@<X3>, uint64_t *a4@<X8>)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  pthread_mutexattr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *a2;
  v7 = *a3;
  v8 = operator new();
  *(_QWORD *)v8 = &off_24C0BB190;
  pthread_mutexattr_init(&v10);
  pthread_mutexattr_setpolicy_np(&v10, 3);
  pthread_mutex_init((pthread_mutex_t *)(v8 + 8), &v10);
  pthread_mutexattr_destroy(&v10);
  result = webrtc::StreamStatisticianImpl::StreamStatisticianImpl(v8 + 72, v5, v6, v7);
  *a4 = v8;
  return result;
}

void webrtc::StreamStatisticianLocked::~StreamStatisticianLocked(webrtc::StreamStatisticianLocked *this)
{
  *(_QWORD *)this = &off_24C0BB190;
  *((_QWORD *)this + 9) = &off_24C0BB070;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 13);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_24C0BB190;
  *((_QWORD *)this + 9) = &off_24C0BB070;
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 13);
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::StreamStatisticianLocked::GetStats@<X0>(webrtc::StreamStatisticianLocked *this@<X0>, uint64_t a2@<X8>)
{
  pthread_mutex_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  __int128 v12;

  v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  *(_BYTE *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (unint64_t)*((unsigned int *)this + 52) >> 4;
  *(_DWORD *)a2 = *((_DWORD *)this + 53);
  *(_DWORD *)(a2 + 4) = v5;
  v6 = *((unsigned int *)this + 108);
  if ((int)v6 >= 1)
    *(_QWORD *)(a2 + 8) = 1000000 * (unint64_t)v5 / v6;
  if (*((_BYTE *)this + 232))
  {
    v7 = *((_QWORD *)this + 12);
    v8 = *((_QWORD *)this + 28);
    v9 = 0x8000000000000000;
    if (v7 != 0x8000000000000000 && v8 != 0x8000000000000000)
      v9 = v8 + v7;
    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v8 == 0x7FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    *(_BYTE *)(a2 + 24) = 1;
    *(_QWORD *)(a2 + 16) = v11;
  }
  *(_QWORD *)(a2 + 64) = *((_QWORD *)this + 41);
  v12 = *(_OWORD *)((char *)this + 312);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)((char *)this + 296);
  *(_OWORD *)(a2 + 48) = v12;
  return pthread_mutex_unlock(v4);
}

unint64_t webrtc::StreamStatisticianLocked::GetFractionLostInPercent(webrtc::StreamStatisticianLocked *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  if (*((_BYTE *)this + 232) && (v3 = *((_QWORD *)this + 34) - *((_QWORD *)this + 33) + 1, v3 >= 1))
  {
    v4 = *((_DWORD *)this + 53);
    if (v4 < 1)
    {
      v6 = 0;
      v5 = 0;
    }
    else
    {
      v6 = 100 * (unint64_t)v4 / v3;
      v5 = v6 & 0xFFFFFF00;
      v6 = v6;
    }
    v7 = 0x100000000;
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v5 = 0;
  }
  v8 = v6 | v7 | v5;
  pthread_mutex_unlock(v2);
  return v8;
}

uint64_t webrtc::StreamStatisticianLocked::GetReceiveStreamDataCounters@<X0>(webrtc::StreamStatisticianLocked *this@<X0>, _OWORD *a2@<X8>)
{
  pthread_mutex_t *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v5 = *((_OWORD *)this + 23);
  a2[4] = *((_OWORD *)this + 22);
  a2[5] = v5;
  v6 = *((_OWORD *)this + 25);
  a2[6] = *((_OWORD *)this + 24);
  a2[7] = v6;
  v7 = *((_OWORD *)this + 19);
  *a2 = *((_OWORD *)this + 18);
  a2[1] = v7;
  v8 = *((_OWORD *)this + 21);
  a2[2] = *((_OWORD *)this + 20);
  a2[3] = v8;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::StreamStatisticianLocked::BitrateReceived(webrtc::StreamStatisticianLocked *this)
{
  pthread_mutex_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v9;

  v2 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 16))(*((_QWORD *)this + 11));
  v4 = v3 / 0x3E8uLL;
  if (v3 % 0x3E8uLL > 0x1F3)
    ++v4;
  if (-v3 % 0x3E8uLL <= 0x1F4)
    v5 = 0;
  else
    v5 = -1;
  if (v3 < 0)
    v6 = v5 - -v3 / 0x3E8uLL;
  else
    v6 = v4;
  v7 = webrtc::RateStatistics::Rate((webrtc::StreamStatisticianLocked *)((char *)this + 104), v6);
  if (v8)
    v9 = v7;
  else
    v9 = 0;
  pthread_mutex_unlock(v2);
  return v9;
}

uint64_t webrtc::StreamStatisticianLocked::MaybeAppendReportBlockAndReset(uint64_t a1, void **a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  webrtc::StreamStatisticianImpl::MaybeAppendReportBlockAndReset(a1 + 72, a2);
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::StreamStatisticianLocked::SetMaxReorderingThreshold(webrtc::StreamStatisticianLocked *this, int a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  *((_DWORD *)this + 50) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::StreamStatisticianLocked::EnableRetransmitDetection(webrtc::StreamStatisticianLocked *this, char a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)((char *)this + 8);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  *((_BYTE *)this + 204) = a2;
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::StreamStatisticianLocked::UpdateCounters(uint64_t a1, int64x2_t *a2)
{
  pthread_mutex_t *v4;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  webrtc::StreamStatisticianImpl::UpdateCounters(a1 + 72, a2);
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::ReceiveStatisticsLocked::ReceiveStatisticsLocked(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  pthread_mutex_t *v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  pthread_mutexattr_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0BB1F0;
  *(_QWORD *)(a1 + 8) = &unk_24C0BB240;
  v6 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutexattr_init(&v13);
  pthread_mutexattr_setpolicy_np(&v13, 3);
  pthread_mutex_init(v6, &v13);
  pthread_mutexattr_destroy(&v13);
  v7 = (_QWORD *)a3[3];
  if (!v7)
  {
    *(_QWORD *)(a1 + 80) = &off_24C0BB0D0;
    *(_QWORD *)(a1 + 88) = &unk_24C0BB120;
    *(_QWORD *)(a1 + 96) = a2;
    goto LABEL_5;
  }
  if (v7 == a3)
  {
    v12 = v11;
    (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v11);
    v7 = v12;
    *(_QWORD *)(a1 + 80) = &off_24C0BB0D0;
    *(_QWORD *)(a1 + 88) = &unk_24C0BB120;
    *(_QWORD *)(a1 + 96) = a2;
    if (v7)
      goto LABEL_7;
LABEL_5:
    *(_QWORD *)(a1 + 160) = 0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    goto LABEL_9;
  }
  v12 = (_QWORD *)a3[3];
  a3[3] = 0;
  *(_QWORD *)(a1 + 80) = &off_24C0BB0D0;
  *(_QWORD *)(a1 + 88) = &unk_24C0BB120;
  *(_QWORD *)(a1 + 96) = a2;
LABEL_7:
  if (v7 == v11)
  {
    *(_QWORD *)(a1 + 128) = a1 + 104;
    (*(void (**)(_QWORD *))(v11[0] + 24))(v11);
    v9 = v12;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_DWORD *)(a1 + 168) = 50;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    if (v9 == v11)
    {
      v10 = 4;
      v9 = v11;
    }
    else
    {
      if (!v9)
        return a1;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
    return a1;
  }
  *(_QWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
LABEL_9:
  *(_DWORD *)(a1 + 168) = 50;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

void webrtc::ReceiveStatisticsLocked::~ReceiveStatisticsLocked(webrtc::ReceiveStatisticsLocked *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  webrtc::ReceiveStatisticsLocked *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C0BB1F0;
  *((_QWORD *)this + 1) = &unk_24C0BB240;
  *((_QWORD *)this + 10) = &off_24C0BB0D0;
  *((_QWORD *)this + 11) = &unk_24C0BB120;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *((_QWORD *)this + 23);
    v4 = (void *)*((_QWORD *)this + 22);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 18);
  if (v6)
  {
    *((_QWORD *)this + 19) = v6;
    operator delete(v6);
  }
  v7 = (webrtc::ReceiveStatisticsLocked *)*((_QWORD *)this + 16);
  if (v7 == (webrtc::ReceiveStatisticsLocked *)((char *)this + 104))
  {
    v8 = 4;
    v7 = (webrtc::ReceiveStatisticsLocked *)((char *)this + 104);
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  webrtc::ReceiveStatisticsLocked *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C0BB1F0;
  *((_QWORD *)this + 1) = &unk_24C0BB240;
  *((_QWORD *)this + 10) = &off_24C0BB0D0;
  *((_QWORD *)this + 11) = &unk_24C0BB120;
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *((_QWORD *)this + 23);
    v4 = (void *)*((_QWORD *)this + 22);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 22);
    }
    *((_QWORD *)this + 23) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 18);
  if (v6)
  {
    *((_QWORD *)this + 19) = v6;
    operator delete(v6);
  }
  v7 = (webrtc::ReceiveStatisticsLocked *)*((_QWORD *)this + 16);
  if (v7 == (webrtc::ReceiveStatisticsLocked *)((char *)this + 104))
  {
    v8 = 4;
    v7 = (webrtc::ReceiveStatisticsLocked *)((char *)this + 104);
  }
  else
  {
    if (!v7)
    {
LABEL_16:
      pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 16));
      JUMPOUT(0x20BD0ADECLL);
    }
    v8 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  goto LABEL_16;
}

uint64_t webrtc::ReceiveStatisticsLocked::RtcpReportBlocks@<X0>(webrtc::ReceiveStatisticsLocked *this@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pthread_mutex_t *v6;

  v6 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  webrtc::ReceiveStatisticsImpl::RtcpReportBlocks((_QWORD *)this + 10, a2, a3);
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::ReceiveStatisticsLocked::GetStatistician(webrtc::ReceiveStatisticsLocked *this, unsigned int a2)
{
  pthread_mutex_t *v4;
  char *v5;
  unsigned int *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  v6 = (unsigned int *)*((_QWORD *)this + 22);
  v5 = (char *)*((_QWORD *)this + 23);
  if (v5 == (char *)v6)
  {
    v6 = (unsigned int *)*((_QWORD *)this + 23);
    goto LABEL_13;
  }
  v7 = (v5 - (char *)v6) >> 4;
  do
  {
    v8 = v7 >> 1;
    v9 = &v6[4 * (v7 >> 1)];
    v11 = *v9;
    v10 = v9 + 4;
    v7 += ~(v7 >> 1);
    if (v11 < a2)
      v6 = v10;
    else
      v7 = v8;
  }
  while (v7);
  if (v5 == (char *)v6)
  {
LABEL_13:
    if (v5 == (char *)v6)
      v6 = (unsigned int *)*((_QWORD *)this + 23);
    if (v5 != (char *)v6)
      goto LABEL_11;
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  if (&v6[4 * (*v6 <= a2)] == v6)
    v6 = (unsigned int *)*((_QWORD *)this + 23);
  if (v5 == (char *)v6)
    goto LABEL_16;
LABEL_11:
  v12 = *((_QWORD *)v6 + 1);
LABEL_17:
  pthread_mutex_unlock(v4);
  return v12;
}

uint64_t webrtc::ReceiveStatisticsLocked::SetMaxReorderingThreshold(webrtc::ReceiveStatisticsLocked *this, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t i;
  uint64_t v6;

  v4 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  *((_DWORD *)this + 42) = a2;
  v6 = *((_QWORD *)this + 22);
  for (i = *((_QWORD *)this + 23); v6 != i; v6 += 16)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 8) + 56))(*(_QWORD *)(v6 + 8), a2);
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::ReceiveStatisticsLocked::SetMaxReorderingThreshold(webrtc::ReceiveStatisticsLocked *this, unsigned int a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t Statistician;

  v6 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  Statistician = webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician((webrtc::ReceiveStatisticsLocked *)((char *)this + 80), a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)Statistician + 56))(Statistician, a3);
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::ReceiveStatisticsLocked::EnableRetransmitDetection(webrtc::ReceiveStatisticsLocked *this, unsigned int a2, uint64_t a3)
{
  pthread_mutex_t *v6;
  uint64_t Statistician;

  v6 = (pthread_mutex_t *)((char *)this + 16);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 16));
  Statistician = webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician((webrtc::ReceiveStatisticsLocked *)((char *)this + 80), a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)Statistician + 64))(Statistician, a3);
  return pthread_mutex_unlock(v6);
}

uint64_t webrtc::ReceiveStatisticsLocked::OnRtpPacket(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t Statistician;

  v4 = (pthread_mutex_t *)(a1 + 16);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 16));
  Statistician = webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician((webrtc::ReceiveStatisticsImpl *)(a1 + 80), *(_DWORD *)(a2 + 12));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)Statistician + 72))(Statistician, a2);
  return pthread_mutex_unlock(v4);
}

void `non-virtual thunk to'webrtc::ReceiveStatisticsLocked::~ReceiveStatisticsLocked(webrtc::ReceiveStatisticsLocked *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  webrtc::ReceiveStatisticsLocked *v7;
  uint64_t v8;

  *((_QWORD *)this - 1) = &off_24C0BB1F0;
  *(_QWORD *)this = &unk_24C0BB240;
  *((_QWORD *)this + 9) = &off_24C0BB0D0;
  *((_QWORD *)this + 10) = &unk_24C0BB120;
  v2 = *((_QWORD *)this + 21);
  if (v2)
  {
    v3 = *((_QWORD *)this + 22);
    v4 = (void *)*((_QWORD *)this + 21);
    if (v3 != v2)
    {
      do
      {
        v5 = *(_QWORD *)(v3 - 8);
        *(_QWORD *)(v3 - 8) = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 21);
    }
    *((_QWORD *)this + 22) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 17);
  if (v6)
  {
    *((_QWORD *)this + 18) = v6;
    operator delete(v6);
  }
  v7 = (webrtc::ReceiveStatisticsLocked *)*((_QWORD *)this + 15);
  if (v7 == (webrtc::ReceiveStatisticsLocked *)((char *)this + 96))
  {
    v8 = 4;
    v7 = (webrtc::ReceiveStatisticsLocked *)((char *)this + 96);
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
}

{
  webrtc::ReceiveStatisticsLocked::~ReceiveStatisticsLocked((webrtc::ReceiveStatisticsLocked *)((char *)this - 8));
}

uint64_t `non-virtual thunk to'webrtc::ReceiveStatisticsLocked::OnRtpPacket(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  uint64_t Statistician;

  v4 = (pthread_mutex_t *)(a1 + 8);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 8));
  Statistician = webrtc::ReceiveStatisticsImpl::GetOrCreateStatistician((webrtc::ReceiveStatisticsImpl *)(a1 + 72), *(_DWORD *)(a2 + 12));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)Statistician + 72))(Statistician, a2);
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::internal::ReceiveStatisticsProxy::ReceiveStatisticsProxy(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  *(_QWORD *)a1 = &off_24C0BB268;
  *(_QWORD *)(a1 + 8) = &unk_24C0BB2C0;
  *(_QWORD *)(a1 + 16) = &unk_24C0BB2E8;
  *(_QWORD *)(a1 + 24) = a3;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 16))(a3);
  if ((v8 & 0x8000000000000000) != 0)
  {
    if (-(uint64_t)v8 % 0x3E8uLL <= 0x1F4)
      v10 = 0;
    else
      v10 = -1;
    v9 = v10 - -(uint64_t)v8 / 0x3E8uLL;
  }
  else
  {
    v9 = v8 / 0x3E8;
    if (v8 % 0x3E8 > 0x1F3)
      ++v9;
  }
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 140) = 0u;
  *(_DWORD *)(a1 + 156) = 10;
  *(_QWORD *)(a1 + 160) = -1;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = -1;
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = -1;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 273) = 0;
  *(_QWORD *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 252) = 0u;
  *(_DWORD *)(a1 + 304) = 0x7FFFFFFF;
  *(_BYTE *)(a1 + 360) = 0;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 640) = 0;
  *(_BYTE *)(a1 + 648) = 0;
  *(_BYTE *)(a1 + 656) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 308) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_OWORD *)(a1 + 337) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 412) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_DWORD *)(a1 + 688) = a2;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_QWORD *)(a1 + 744) = 0;
  *(_QWORD *)(a1 + 752) = -1;
  *(_BYTE *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 764) = 0x447A000000000000;
  *(_QWORD *)(a1 + 776) = 1000;
  *(_QWORD *)(a1 + 784) = 1000;
  *(_QWORD *)(a1 + 840) = 0;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_QWORD *)(a1 + 848) = -1;
  *(_BYTE *)(a1 + 856) = 0;
  *(_QWORD *)(a1 + 860) = 0x447A000000000000;
  *(_QWORD *)(a1 + 872) = 1000;
  *(_QWORD *)(a1 + 880) = 1000;
  *(_QWORD *)(a1 + 888) = &off_24C0BAFD8;
  *(_OWORD *)(a1 + 896) = xmmword_208F18830;
  *(_QWORD *)(a1 + 912) = operator new[]();
  *(_QWORD *)(a1 + 920) = 0;
  *(_QWORD *)(a1 + 936) = -1;
  *(_QWORD *)(a1 + 952) = &off_24C0BAFD8;
  *(_OWORD *)(a1 + 960) = xmmword_208F18830;
  *(_QWORD *)(a1 + 976) = operator new[]();
  *(_QWORD *)(a1 + 984) = 0;
  *(_QWORD *)(a1 + 1000) = -1;
  *(_BYTE *)(a1 + 1036) = 0;
  *(_BYTE *)(a1 + 1040) = 0;
  *(_BYTE *)(a1 + 1044) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_BYTE *)(a1 + 1068) = 0;
  *(_BYTE *)(a1 + 1072) = 0;
  *(_BYTE *)(a1 + 1076) = 0;
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_BYTE *)(a1 + 1064) = 0;
  *(_BYTE *)(a1 + 1100) = 0;
  *(_BYTE *)(a1 + 1104) = 0;
  *(_BYTE *)(a1 + 1108) = 0;
  *(_BYTE *)(a1 + 1096) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(_BYTE *)(a1 + 1132) = 0;
  *(_BYTE *)(a1 + 1136) = 0;
  *(_BYTE *)(a1 + 1140) = 0;
  *(_OWORD *)(a1 + 1112) = 0u;
  *(_BYTE *)(a1 + 1128) = 0;
  *(_BYTE *)(a1 + 1164) = 0;
  *(_BYTE *)(a1 + 1168) = 0;
  *(_BYTE *)(a1 + 1172) = 0;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_BYTE *)(a1 + 1160) = 0;
  *(_BYTE *)(a1 + 1196) = 0;
  *(_BYTE *)(a1 + 1200) = 0;
  *(_BYTE *)(a1 + 1204) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_BYTE *)(a1 + 1192) = 0;
  v11 = operator new();
  *(_OWORD *)v11 = xmmword_208F05A40;
  *(_OWORD *)(v11 + 16) = xmmword_208F05A40;
  *(_BYTE *)(v11 + 32) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  *(_OWORD *)(v11 + 48) = 0u;
  v12 = operator new(0x78uLL);
  *(_QWORD *)(v11 + 72) = (char *)v12 + 120;
  *(_QWORD *)(v11 + 80) = (char *)v12 + 120;
  *v12 = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  v12[3] = 0u;
  v12[4] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  *((_QWORD *)v12 + 14) = 0;
  *(_QWORD *)(v11 + 64) = v12;
  *(_BYTE *)(v11 + 116) = 0;
  *(_BYTE *)(v11 + 120) = 0;
  *(_BYTE *)(v11 + 124) = 0;
  *(_BYTE *)(v11 + 148) = 0;
  *(_BYTE *)(v11 + 152) = 0;
  *(_BYTE *)(v11 + 156) = 0;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_BYTE *)(v11 + 144) = 0;
  *(_BYTE *)(v11 + 180) = 0;
  *(_BYTE *)(v11 + 184) = 0;
  *(_BYTE *)(v11 + 188) = 0;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_BYTE *)(v11 + 176) = 0;
  *(_QWORD *)(v11 + 104) = 0;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_BYTE *)(v11 + 112) = 0;
  v13 = (char *)operator new(0x18uLL);
  *(_QWORD *)(v11 + 200) = v13 + 24;
  *(_QWORD *)(v11 + 208) = v13 + 24;
  *(_QWORD *)v13 = 0;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_QWORD *)(v11 + 192) = v13;
  *(_OWORD *)(v11 + 248) = 0u;
  *(_OWORD *)(v11 + 216) = 0u;
  *(_BYTE *)(v11 + 232) = 0;
  *(_QWORD *)(v11 + 240) = v11 + 248;
  *(_QWORD *)(a1 + 1208) = v11;
  *(_QWORD *)(a1 + 1216) = 1000;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(_QWORD *)(a1 + 1272) = a1 + 1280;
  *(_QWORD *)(a1 + 1296) = off_24C0C1308;
  *(_BYTE *)(a1 + 1304) = 0;
  *(_QWORD *)(a1 + 1312) = 40000;
  v14 = operator new();
  *(_DWORD *)v14 = 0;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_QWORD *)(v14 + 24) = -1;
  *(_DWORD *)(v14 + 32) = -1;
  *(_QWORD *)(a1 + 1320) = v14;
  v15 = operator new();
  *(_OWORD *)(v15 + 16) = 0u;
  *(_QWORD *)v15 = 0;
  *(_QWORD *)(v15 + 8) = v15 + 16;
  *(_QWORD *)(a1 + 1328) = v15;
  *(_QWORD *)(a1 + 1336) = a3;
  *(_QWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1352) = -1;
  *(_BYTE *)(a1 + 1360) = 0;
  *(_QWORD *)(a1 + 1368) = -1;
  *(_QWORD *)(a1 + 1376) = 0;
  *(_QWORD *)(a1 + 1296) = &unk_24C0C1368;
  *(_BYTE *)(a1 + 1404) = 0;
  *(_BYTE *)(a1 + 1408) = 0;
  *(_BYTE *)(a1 + 1412) = 0;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_BYTE *)(a1 + 1400) = 0;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_QWORD *)(a1 + 1416) = 0;
  *(_QWORD *)(a1 + 1424) = a1 + 1432;
  *(_BYTE *)(a1 + 1448) = 0;
  *(_DWORD *)(a1 + 1452) = 1;
  *(_BYTE *)(a1 + 1456) = 0;
  *(_BYTE *)(a1 + 1464) = 0;
  *(_BYTE *)(a1 + 1472) = 0;
  *(_BYTE *)(a1 + 1480) = 0;
  *(_BYTE *)(a1 + 1488) = 0;
  *(_BYTE *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1504) = 0u;
  *(_QWORD *)(a1 + 1520) = 1000;
  *(_BYTE *)(a1 + 1580) = 0;
  *(_BYTE *)(a1 + 1584) = 0;
  *(_BYTE *)(a1 + 1592) = 0;
  *(_BYTE *)(a1 + 1600) = 0;
  *(_BYTE *)(a1 + 1608) = 0;
  *(_OWORD *)(a1 + 1528) = 0u;
  *(_OWORD *)(a1 + 1544) = 0u;
  *(_OWORD *)(a1 + 1560) = 0u;
  *(_BYTE *)(a1 + 1576) = 0;
  *(_QWORD *)(a1 + 1616) = a4;
  v16 = operator new();
  *(_DWORD *)v16 = 0;
  *(_BYTE *)(v16 + 4) = 1;
  *(_QWORD *)(a1 + 1624) = v16;
  do
    v17 = __ldxr((unsigned int *)v16);
  while (__stxr(v17 + 1, (unsigned int *)v16));
  *(_DWORD *)(a1 + 308) = *(_DWORD *)(a1 + 688);
  return a1;
}

void webrtc::internal::ReceiveStatisticsProxy::~ReceiveStatisticsProxy(webrtc::internal::ReceiveStatisticsProxy *this)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_24C0BB268;
  *((_QWORD *)this + 1) = &unk_24C0BB2C0;
  *((_QWORD *)this + 2) = &unk_24C0BB2E8;
  v2 = *((_QWORD *)this + 203);
  *(_BYTE *)(v2 + 4) = 0;
  do
  {
    v3 = __ldaxr((unsigned int *)v2);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, (unsigned int *)v2));
  if (!v4)
    MEMORY[0x20BD0ADEC]();
  std::deque<std::pair<long long,webrtc::TimingFrameInfo>>::~deque[abi:sn180100]((void **)this + 191);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 1424, *((_QWORD **)this + 179));
  *((_QWORD *)this + 162) = off_24C0C1308;
  v5 = *((_QWORD *)this + 168);
  *((_QWORD *)this + 168) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  v6 = *((_QWORD *)this + 166);
  *((_QWORD *)this + 166) = 0;
  if (v6)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v6 + 8, *(_QWORD **)(v6 + 16));
    MEMORY[0x20BD0ADEC](v6, 0x1020C40C0D28DD2);
  }
  v7 = *((_QWORD *)this + 165);
  *((_QWORD *)this + 165) = 0;
  if (v7)
    MEMORY[0x20BD0ADEC](v7, 0x1000C407607B2BCLL);
  std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::destroy((uint64_t)this + 1272, *((_QWORD **)this + 160));
  std::deque<webrtc::DecodeTimePercentileFilter::Sample>::~deque[abi:sn180100]((void **)this + 153);
  v8 = *((_QWORD *)this + 151);
  *((_QWORD *)this + 151) = 0;
  if (v8)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(v8 + 240, *(_QWORD **)(v8 + 248));
    v9 = *(void **)(v8 + 192);
    if (v9)
    {
      *(_QWORD *)(v8 + 200) = v9;
      operator delete(v9);
    }
    v10 = *(void **)(v8 + 64);
    if (v10)
    {
      *(_QWORD *)(v8 + 72) = v10;
      operator delete(v10);
    }
    MEMORY[0x20BD0ADEC](v8, 0x1030C4028B32989);
  }
  *((_QWORD *)this + 119) = &off_24C0BAFD8;
  v11 = *((_QWORD *)this + 122);
  if (v11)
    MEMORY[0x20BD0ADD4](v11, 0x1000C8000313F17);
  *((_QWORD *)this + 111) = &off_24C0BAFD8;
  v12 = *((_QWORD *)this + 114);
  if (v12)
    MEMORY[0x20BD0ADD4](v12, 0x1000C8000313F17);
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 99);
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 87);
  if (*((char *)this + 335) < 0)
  {
    operator delete(*((void **)this + 39));
    if (!*((_BYTE *)this + 80))
      return;
  }
  else if (!*((_BYTE *)this + 80))
  {
    return;
  }
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
}

{
  webrtc::internal::ReceiveStatisticsProxy::~ReceiveStatisticsProxy(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::internal::ReceiveStatisticsProxy::~ReceiveStatisticsProxy(webrtc::internal::ReceiveStatisticsProxy *this)
{
  webrtc::internal::ReceiveStatisticsProxy::~ReceiveStatisticsProxy((webrtc::internal::ReceiveStatisticsProxy *)((char *)this - 8));
}

{
  webrtc::internal::ReceiveStatisticsProxy::~ReceiveStatisticsProxy((webrtc::internal::ReceiveStatisticsProxy *)((char *)this - 16));
}

{
  webrtc::internal::ReceiveStatisticsProxy::~ReceiveStatisticsProxy((webrtc::internal::ReceiveStatisticsProxy *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::internal::ReceiveStatisticsProxy::~ReceiveStatisticsProxy((webrtc::internal::ReceiveStatisticsProxy *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::internal::ReceiveStatisticsProxy::UpdateHistograms(uint64_t a1, uint64_t a2)
{
  size_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  float v41;
  int v42;
  uint64_t v43;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  size_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  size_t v84;
  char v85;
  __int128 *p_src;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  int v95;
  size_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  size_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  size_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  size_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  size_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v144;
  char *v145;
  uint64_t *v146;
  int *v147;
  int *v148;
  int v149;
  int *v150;
  int *v151;
  int v152;
  int *v153;
  int *v154;
  int v155;
  int *v156;
  int *v157;
  int v158;
  int *v159;
  int *v160;
  int v161;
  int *v162;
  int *v163;
  int v164;
  int *v165;
  int *v166;
  int v167;
  int *v168;
  int *v169;
  int v170;
  int *v171;
  int *v172;
  int v173;
  int *v174;
  int *v175;
  int v176;
  uint64_t *v177;
  _QWORD *v178;
  _QWORD *v179;
  uint64_t *v180;
  uint64_t *v181;
  BOOL v182;
  uint64_t *v183;
  __int128 v184;
  _BYTE *v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  _BYTE *v190;
  int64_t v191;
  char *v192;
  uint64_t v193;
  unsigned int v194;
  _QWORD *v195;
  _QWORD **v196;
  _QWORD *v197;
  _QWORD **v198;
  _QWORD *v199;
  unsigned int v200;
  _QWORD *v201;
  _QWORD *v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _BYTE *v206;
  int v207;
  uint64_t v208;
  int v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t *v214;
  uint64_t *v215;
  uint64_t v216;
  const char *v217;
  void **p_dst;
  uint64_t v219;
  size_t v220;
  unint64_t v221;
  void **p_p;
  uint64_t v223;
  uint64_t v224;
  void **v225;
  char *v226;
  void **v227;
  size_t v228;
  uint64_t v229;
  size_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  unint64_t v237;
  void **v238;
  uint64_t v239;
  uint64_t v240;
  void **v241;
  char *v242;
  void **v243;
  size_t v244;
  size_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  unint64_t v253;
  uint64_t v254;
  void **v255;
  uint64_t v256;
  uint64_t v257;
  void **v258;
  char *v259;
  void **v260;
  size_t v261;
  size_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  int v269;
  int v270;
  void **v271;
  uint64_t v272;
  uint64_t v273;
  void **v274;
  char *v275;
  void **v276;
  size_t v277;
  size_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  unint64_t v284;
  unint64_t v285;
  uint64_t v286;
  unint64_t v287;
  BOOL v288;
  _QWORD **v289;
  unint64_t v290;
  _QWORD *v291;
  _QWORD **v292;
  uint64_t v293;
  int v294;
  unint64_t v295;
  void **v296;
  uint64_t v297;
  uint64_t v298;
  void **v299;
  char *v300;
  void **v303;
  size_t v304;
  uint64_t v305;
  size_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  size_t v315;
  void **v316;
  uint64_t v317;
  uint64_t v318;
  void **v319;
  char *v320;
  void **v323;
  size_t v324;
  uint64_t v325;
  size_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  float v333;
  size_t v334;
  uint64_t v335;
  void **v336;
  uint64_t v337;
  uint64_t v338;
  void **v339;
  char *v340;
  void **v341;
  size_t v342;
  size_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  unsigned int v351;
  unint64_t v352;
  void **v353;
  uint64_t v354;
  uint64_t v355;
  void **v356;
  char *v357;
  void **v358;
  size_t v359;
  int v360;
  size_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unint64_t v369;
  uint64_t v370;
  void **v371;
  uint64_t v372;
  uint64_t v373;
  void **v374;
  char *v375;
  void **v376;
  size_t v377;
  uint64_t v378;
  size_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  _BYTE *v386;
  uint64_t *v387;
  uint64_t *v388;
  int v389;
  void **v390;
  uint64_t v391;
  uint64_t v392;
  void **v393;
  char *v394;
  void **v397;
  size_t v398;
  size_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  int64x2_t v408;
  uint64_t v409;
  unint64_t v410;
  uint64_t v412;
  unint64_t v414;
  uint64_t v415;
  size_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int64x2_t v422;
  uint64_t v423;
  uint64_t v426;
  uint64_t v428;
  uint64_t v430;
  uint64_t v432;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  unint64_t v442;
  size_t v443;
  uint64_t v444;
  int64x2_t v445;
  int64x2_t v446;
  void *__p;
  size_t v448;
  unint64_t v449;
  char *__dst;
  __int128 v451;
  __int128 __src;
  __int128 v453;
  __int128 v454;
  __int128 v455;
  __int128 v456;
  __int128 v457;
  __int128 v458;
  __int128 v459;
  __int128 v460;
  __int128 v461;
  __int128 v462;
  uint64_t v463;
  void *v464;
  _BYTE *v465;
  char *v466;
  _QWORD **v467;
  _QWORD *v468;
  uint64_t v469;
  __int128 v470;
  unint64_t v471;
  uint64_t *v472;
  _QWORD *v473[2];
  __int128 v474;
  uint64_t v475;
  char *v476;
  __int128 v477;
  char v478;
  uint64_t v479;

  v3 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v3;
  v479 = *MEMORY[0x24BDAC8D0];
  v476 = &v478;
  v477 = xmmword_208F18840;
  v478 = 0;
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 24) + 16))(*(_QWORD *)(v3 + 24));
  v12 = v11 / 0x3E8uLL;
  if (v11 % 0x3E8uLL > 0x1F3)
    ++v12;
  if (-v11 % 0x3E8uLL <= 0x1F4)
    v13 = 0;
  else
    v13 = -1;
  v14 = v13 - -v11 / 0x3E8uLL;
  if (v11 < 0)
    v12 = v14;
  v15 = (unsigned __int128)((uint64_t)(v12 - *(_QWORD *)(v10 + 32)) * (__int128)0x20C49BA5E353F7CFLL) >> 64;
  v16 = (v15 >> 7) + (v15 >> 63);
  if (*(int *)(v10 + 92) > 0 || *(int *)(v10 + 96) >= 1)
  {
    v17 = atomic_load(&_MergedGlobals_15);
    if (v17)
    {
      webrtc::metrics::HistogramAdd(v17, v16);
    }
    else
    {
      while (!__ldaxr(&_MergedGlobals_15))
      {
        if (!__stlxr(0, &_MergedGlobals_15))
          goto LABEL_15;
      }
      __clrex();
    }
LABEL_15:
    if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x2CuLL)
      v19 = 44;
    else
      v19 = v477 + ~*((_QWORD *)&v477 + 1);
    memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.ReceiveStreamLifetimeInSeconds ", v19);
    *((_QWORD *)&v477 + 1) += v19;
    v476[*((_QWORD *)&v477 + 1)] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v16);
    LOBYTE(__src) = 10;
    v20 = v477;
    v21 = *((_QWORD *)&v477 + 1) + 1;
    memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
    v22 = *((_QWORD *)&v477 + 1);
    if (v20 != v21)
      v22 = *((_QWORD *)&v477 + 1) + 1;
    *((_QWORD *)&v477 + 1) = v22;
    v476[v22] = 0;
  }
  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0xFuLL)
    v23 = 15;
  else
    v23 = v477 + ~*((_QWORD *)&v477 + 1);
  memcpy(&v476[*((_QWORD *)&v477 + 1)], "Frames decoded ", v23);
  *((_QWORD *)&v477 + 1) += v23;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%u", *(_DWORD *)(v10 + 172));
  LOBYTE(__src) = 10;
  v24 = v477;
  v25 = *((_QWORD *)&v477 + 1) + 1;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
  v26 = *((_QWORD *)&v477 + 1);
  if (v24 != v25)
    v26 = *((_QWORD *)&v477 + 1) + 1;
  *((_QWORD *)&v477 + 1) = v26;
  v476[v26] = 0;
  if (*(_BYTE *)(v10 + 1580))
  {
    v27 = *(_DWORD *)(v10 + 172);
    v28 = *(_DWORD *)(v10 + 1576) - v27;
    v29 = atomic_load(&qword_253EA56E8);
    if (v29)
    {
      webrtc::metrics::HistogramAdd(v29, *(_DWORD *)(v10 + 1576) - v27);
    }
    else
    {
      while (!__ldaxr(&qword_253EA56E8))
      {
        if (!__stlxr(0, &qword_253EA56E8))
          goto LABEL_32;
      }
      __clrex();
    }
LABEL_32:
    if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x24uLL)
      v2 = 36;
    else
      v2 = v477 + ~*((_QWORD *)&v477 + 1);
    memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.DroppedFrames.Receiver ", v2);
    *((_QWORD *)&v477 + 1) += v2;
    v476[*((_QWORD *)&v477 + 1)] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v28);
    LOBYTE(__src) = 10;
    v24 = v477;
    v31 = *((_QWORD *)&v477 + 1) + 1;
    memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
    v32 = *((_QWORD *)&v477 + 1);
    if (v24 != v31)
      v32 = *((_QWORD *)&v477 + 1) + 1;
    *((_QWORD *)&v477 + 1) = v32;
    v476[v32] = 0;
  }
  if ((v9 & 0xFF00000000) != 0 && v16 >= 10)
  {
    if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x2AuLL)
      v33 = 42;
    else
      v33 = v477 + ~*((_QWORD *)&v477 + 1);
    memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.ReceivedPacketsLostInPercent ", v33);
    *((_QWORD *)&v477 + 1) += v33;
    v476[*((_QWORD *)&v477 + 1)] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v9);
    LOBYTE(__src) = 10;
    v34 = v477;
    v35 = *((_QWORD *)&v477 + 1) + 1;
    memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
    v36 = *((_QWORD *)&v477 + 1);
    if (v34 != v35)
      v36 = *((_QWORD *)&v477 + 1) + 1;
    *((_QWORD *)&v477 + 1) = v36;
    v476[v36] = 0;
  }
  if (*(_BYTE *)(v10 + 1480))
  {
    v37 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 24) + 16))(*(_QWORD *)(v10 + 24));
    v38 = v37 / 0x3E8uLL;
    if (v37 % 0x3E8uLL > 0x1F3)
      ++v38;
    if (-v37 % 0x3E8uLL <= 0x1F4)
      v39 = 0;
    else
      v39 = -1;
    if (v37 < 0)
      v38 = v39 - -v37 / 0x3E8uLL;
    if (!*(_BYTE *)(v10 + 1480))
      goto LABEL_833;
    v40 = v38 - *(_QWORD *)(v10 + 1472);
    if (v40 >= 10000)
    {
      v41 = (float)((float)((float)*(unsigned int *)(v10 + 172) * 1000.0) / (float)v40) + 0.5;
      v42 = (int)v41;
      v43 = atomic_load(&qword_253EA56F0);
      if (v43)
      {
        webrtc::metrics::HistogramAdd(v43, (int)v41);
      }
      else
      {
        while (!__ldaxr(&qword_253EA56F0))
        {
          if (!__stlxr(0, &qword_253EA56F0))
            goto LABEL_61;
        }
        __clrex();
      }
LABEL_61:
      if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x24uLL)
        v45 = 36;
      else
        v45 = v477 + ~*((_QWORD *)&v477 + 1);
      memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.DecodedFramesPerSecond ", v45);
      *((_QWORD *)&v477 + 1) += v45;
      v476[*((_QWORD *)&v477 + 1)] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v42);
      LOBYTE(__src) = 10;
      v46 = v477;
      v47 = *((_QWORD *)&v477 + 1) + 1;
      memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
      v48 = *((_QWORD *)&v477 + 1);
      if (v46 != v47)
        v48 = *((_QWORD *)&v477 + 1) + 1;
      *((_QWORD *)&v477 + 1) = v48;
      v476[v48] = 0;
      if (*(_DWORD *)(v10 + 52) && *(_QWORD *)(v10 + 1504))
      {
        v49 = atomic_load(&qword_253EA56F8);
        if (v49)
        {
          webrtc::metrics::HistogramAdd(v49, *(_QWORD *)(v10 + 1512) / *(_QWORD *)(v10 + 1504));
        }
        else
        {
          while (!__ldaxr(&qword_253EA56F8))
          {
            if (!__stlxr(0, &qword_253EA56F8))
              goto LABEL_73;
          }
          __clrex();
        }
      }
    }
  }
LABEL_73:
  if (*(int *)(v10 + 920) >= 200)
  {
    v51 = 0.0;
    if (*(_QWORD *)(v10 + 936) != -1)
    {
      v52 = (*(uint64_t (**)(size_t))(*(_QWORD *)(v10 + 888) + 16))(v10 + 888);
      v53 = *(_QWORD *)(v10 + 944);
      v54 = __OFSUB__(v52, v53);
      v55 = v52 - v53;
      if (!((v55 < 0) ^ v54 | (v55 == 0)))
        v51 = (double)(unint64_t)(1000 * *(_QWORD *)(v10 + 920)) / (double)v55;
    }
    v56 = llround(v51);
    v57 = atomic_load(&qword_253EA5700);
    if (v57)
    {
      webrtc::metrics::HistogramAdd(v57, v56);
    }
    else
    {
      while (!__ldaxr(&qword_253EA5700))
      {
        if (!__stlxr(0, &qword_253EA5700))
          goto LABEL_82;
      }
      __clrex();
    }
LABEL_82:
    if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x23uLL)
      v59 = 35;
    else
      v59 = v477 + ~*((_QWORD *)&v477 + 1);
    memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.RenderFramesPerSecond ", v59);
    *((_QWORD *)&v477 + 1) += v59;
    v476[*((_QWORD *)&v477 + 1)] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v56);
    LOBYTE(__src) = 10;
    v60 = v477;
    v61 = *((_QWORD *)&v477 + 1) + 1;
    memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
    v62 = *((_QWORD *)&v477 + 1);
    if (v60 != v61)
      v62 = *((_QWORD *)&v477 + 1) + 1;
    *((_QWORD *)&v477 + 1) = v62;
    v476[v62] = 0;
    v63 = atomic_load(&qword_253EA5708);
    if (v63)
    {
      v64 = 0.0;
      if (*(_QWORD *)(v10 + 1000) != -1)
      {
        v65 = (*(uint64_t (**)(size_t))(*(_QWORD *)(v10 + 952) + 16))(v10 + 952);
        v66 = *(_QWORD *)(v10 + 1008);
        v54 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (!((v67 < 0) ^ v54 | (v67 == 0)))
          v64 = (double)(unint64_t)(1000 * *(_QWORD *)(v10 + 984)) / (double)v67;
      }
      webrtc::metrics::HistogramAdd(v63, llround(v64));
    }
    else
    {
      while (!__ldaxr(&qword_253EA5708))
      {
        if (!__stlxr(0, &qword_253EA5708))
          goto LABEL_95;
      }
      __clrex();
    }
  }
LABEL_95:
  v69 = *(_QWORD *)(v10 + 1024);
  if (v69 >= 200)
  {
    v70 = *(_QWORD *)(v10 + 1016) / v69;
    v71 = atomic_load(&qword_253EA5710);
    if (v71)
    {
      webrtc::metrics::HistogramAdd(v71, v70);
    }
    else
    {
      while (!__ldaxr(&qword_253EA5710))
      {
        if (!__stlxr(0, &qword_253EA5710))
          goto LABEL_101;
      }
      __clrex();
    }
LABEL_101:
    if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x1EuLL)
      v73 = 30;
    else
      v73 = v477 + ~*((_QWORD *)&v477 + 1);
    memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.AVSyncOffsetInMs ", v73);
    *((_QWORD *)&v477 + 1) += v73;
    v476[*((_QWORD *)&v477 + 1)] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v70);
    LOBYTE(__src) = 10;
    v74 = v477;
    v75 = *((_QWORD *)&v477 + 1) + 1;
    memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
    v76 = *((_QWORD *)&v477 + 1);
    if (v74 != v75)
      v76 = *((_QWORD *)&v477 + 1) + 1;
    *((_QWORD *)&v477 + 1) = v76;
    v476[v76] = 0;
  }
  v77 = *(_QWORD *)(v10 + 1320);
  v80 = *(_QWORD *)(v77 + 16);
  v78 = (__int128 *)(v77 + 16);
  v79 = v80;
  if (v80)
  {
    if (v79 >= 0)
      v81 = v79;
    else
      v81 = v79 + 1;
    *(_DWORD *)(*(_QWORD *)(v10 + 1320) + 32) = (*(_QWORD *)(*(_QWORD *)(v10 + 1320) + 8) + (v81 >> 1)) / v79;
  }
  v474 = *v78;
  v475 = *((_QWORD *)v78 + 2);
  if ((uint64_t)v474 < 1)
  {
LABEL_132:
    v91 = *(_DWORD *)(v10 + 92);
    v92 = *(_DWORD *)(v10 + 96) + v91;
    if (v92 >= 200)
      goto LABEL_133;
LABEL_201:
    v101 = *(_QWORD *)(v10 + 1392);
    if (v101 >= 200)
      goto LABEL_144;
LABEL_202:
    v109 = *(_QWORD *)(v10 + 1056);
    if (v109 >= 200)
      goto LABEL_155;
LABEL_203:
    v117 = *(_QWORD *)(v10 + 1088);
    if (v117 >= 200)
      goto LABEL_166;
LABEL_204:
    v125 = *(_QWORD *)(v10 + 1120);
    if (v125 >= 200)
      goto LABEL_177;
LABEL_205:
    v441 = v7;
    v442 = v5;
    v133 = *(_QWORD *)(v10 + 1152);
    if (v133 >= 200)
      goto LABEL_188;
LABEL_206:
    v141 = *(_QWORD *)(v10 + 1184);
    if (v141 < 200)
      goto LABEL_212;
    goto LABEL_207;
  }
  v82 = atomic_load(&qword_253EA5718);
  if (v82)
  {
    webrtc::metrics::HistogramAdd(v82, v475);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5718))
    {
      if (!__stlxr(0, &qword_253EA5718))
        goto LABEL_118;
    }
    __clrex();
  }
LABEL_118:
  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x25uLL)
    v84 = 37;
  else
    v84 = v477 + ~*((_QWORD *)&v477 + 1);
  memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.RtpToNtpFreqOffsetInKhz ", v84);
  *((_QWORD *)&v477 + 1) += v84;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  webrtc::AggregatedStats::ToStringWithMultiplier((webrtc::AggregatedStats *)&v474, 1, (std::string *)&__src);
  v85 = BYTE7(v453);
  if (SBYTE7(v453) < 0)
  {
    v38 = *((_QWORD *)&__src + 1);
    if ((*((_QWORD *)&__src + 1) & 0x8000000000000000) == 0)
    {
      p_src = (__int128 *)__src;
      if (!*((_QWORD *)&__src + 1) || (_QWORD)__src)
        goto LABEL_126;
    }
LABEL_833:
    __break(1u);
LABEL_834:
    v422 = v446;
    while (!__ldaxr((unint64_t *)v38))
    {
      if (!__stlxr(0, (unint64_t *)v38))
      {
        v423 = atomic_load(&qword_253EA5770);
        if (!v423)
          goto LABEL_842;
        goto LABEL_838;
      }
    }
    __clrex();
    v423 = atomic_load(&qword_253EA5770);
    if (v423)
      goto LABEL_838;
LABEL_842:
    while (!__ldaxr(&qword_253EA5770))
    {
      if (!__stlxr(0, &qword_253EA5770))
        goto LABEL_844;
    }
    __clrex();
    goto LABEL_844;
  }
  p_src = &__src;
  v38 = BYTE7(v453);
LABEL_126:
  if (v38 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
    v87 = v477 + ~*((_QWORD *)&v477 + 1);
  else
    v87 = v38;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], p_src, v87);
  *((_QWORD *)&v477 + 1) += v87;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  LOBYTE(v472) = 10;
  v88 = v477;
  v89 = *((_QWORD *)&v477 + 1) + 1;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], &v472, v477 != *((_QWORD *)&v477 + 1) + 1);
  v90 = *((_QWORD *)&v477 + 1);
  if (v88 != v89)
    v90 = *((_QWORD *)&v477 + 1) + 1;
  *((_QWORD *)&v477 + 1) = v90;
  v476[v90] = 0;
  if ((v85 & 0x80) == 0)
    goto LABEL_132;
  operator delete((void *)__src);
  v91 = *(_DWORD *)(v10 + 92);
  v92 = *(_DWORD *)(v10 + 96) + v91;
  if (v92 < 200)
    goto LABEL_201;
LABEL_133:
  v93 = 1000 * v91 + (v92 >> 1);
  v94 = atomic_load(&qword_253EA5720);
  v95 = v93 / v92;
  if (v94)
  {
    webrtc::metrics::HistogramAdd(v94, v93 / v92);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5720))
    {
      if (!__stlxr(0, &qword_253EA5720))
        goto LABEL_138;
    }
    __clrex();
  }
LABEL_138:
  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x29uLL)
    v97 = 41;
  else
    v97 = v477 + ~*((_QWORD *)&v477 + 1);
  memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.KeyFramesReceivedInPermille ", v97);
  *((_QWORD *)&v477 + 1) += v97;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v95);
  LOBYTE(__src) = 10;
  v98 = v477;
  v99 = *((_QWORD *)&v477 + 1) + 1;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
  v100 = *((_QWORD *)&v477 + 1);
  if (v98 != v99)
    v100 = *((_QWORD *)&v477 + 1) + 1;
  *((_QWORD *)&v477 + 1) = v100;
  v476[v100] = 0;
  v101 = *(_QWORD *)(v10 + 1392);
  if (v101 < 200)
    goto LABEL_202;
LABEL_144:
  v102 = *(_QWORD *)(v10 + 1384) / v101;
  v103 = atomic_load(&qword_253EA5728);
  if (v103)
  {
    webrtc::metrics::HistogramAdd(v103, v102);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5728))
    {
      if (!__stlxr(0, &qword_253EA5728))
        goto LABEL_149;
    }
    __clrex();
  }
LABEL_149:
  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x1CuLL)
    v105 = 28;
  else
    v105 = v477 + ~*((_QWORD *)&v477 + 1);
  memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.Decoded.Vp8.Qp ", v105);
  *((_QWORD *)&v477 + 1) += v105;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v102);
  LOBYTE(__src) = 10;
  v106 = v477;
  v107 = *((_QWORD *)&v477 + 1) + 1;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
  v108 = *((_QWORD *)&v477 + 1);
  if (v106 != v107)
    v108 = *((_QWORD *)&v477 + 1) + 1;
  *((_QWORD *)&v477 + 1) = v108;
  v476[v108] = 0;
  v109 = *(_QWORD *)(v10 + 1056);
  if (v109 < 200)
    goto LABEL_203;
LABEL_155:
  v110 = *(_QWORD *)(v10 + 1048) / v109;
  v111 = atomic_load(&qword_253EA5730);
  if (v111)
  {
    webrtc::metrics::HistogramAdd(v111, v110);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5730))
    {
      if (!__stlxr(0, &qword_253EA5730))
        goto LABEL_160;
    }
    __clrex();
  }
LABEL_160:
  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x1CuLL)
    v113 = 28;
  else
    v113 = v477 + ~*((_QWORD *)&v477 + 1);
  memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.DecodeTimeInMs ", v113);
  *((_QWORD *)&v477 + 1) += v113;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v110);
  LOBYTE(__src) = 10;
  v114 = v477;
  v115 = *((_QWORD *)&v477 + 1) + 1;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
  v116 = *((_QWORD *)&v477 + 1);
  if (v114 != v115)
    v116 = *((_QWORD *)&v477 + 1) + 1;
  *((_QWORD *)&v477 + 1) = v116;
  v476[v116] = 0;
  v117 = *(_QWORD *)(v10 + 1088);
  if (v117 < 200)
    goto LABEL_204;
LABEL_166:
  v118 = *(_QWORD *)(v10 + 1080) / v117;
  v119 = atomic_load(&qword_253EA5738);
  if (v119)
  {
    webrtc::metrics::HistogramAdd(v119, v118);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5738))
    {
      if (!__stlxr(0, &qword_253EA5738))
        goto LABEL_171;
    }
    __clrex();
  }
LABEL_171:
  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x23uLL)
    v121 = 35;
  else
    v121 = v477 + ~*((_QWORD *)&v477 + 1);
  memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.JitterBufferDelayInMs ", v121);
  *((_QWORD *)&v477 + 1) += v121;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v118);
  LOBYTE(__src) = 10;
  v122 = v477;
  v123 = *((_QWORD *)&v477 + 1) + 1;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
  v124 = *((_QWORD *)&v477 + 1);
  if (v122 != v123)
    v124 = *((_QWORD *)&v477 + 1) + 1;
  *((_QWORD *)&v477 + 1) = v124;
  v476[v124] = 0;
  v125 = *(_QWORD *)(v10 + 1120);
  if (v125 < 200)
    goto LABEL_205;
LABEL_177:
  v126 = *(_QWORD *)(v10 + 1112) / v125;
  v127 = atomic_load(&qword_253EA5740);
  if (v127)
  {
    webrtc::metrics::HistogramAdd(v127, v126);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5740))
    {
      if (!__stlxr(0, &qword_253EA5740))
        goto LABEL_182;
    }
    __clrex();
  }
LABEL_182:
  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x1DuLL)
    v129 = 29;
  else
    v129 = v477 + ~*((_QWORD *)&v477 + 1);
  memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.TargetDelayInMs ", v129);
  *((_QWORD *)&v477 + 1) += v129;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v126);
  LOBYTE(__src) = 10;
  v130 = v477;
  v131 = *((_QWORD *)&v477 + 1) + 1;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
  v132 = *((_QWORD *)&v477 + 1);
  if (v130 != v131)
    v132 = *((_QWORD *)&v477 + 1) + 1;
  *((_QWORD *)&v477 + 1) = v132;
  v476[v132] = 0;
  v441 = v7;
  v442 = v5;
  v133 = *(_QWORD *)(v10 + 1152);
  if (v133 < 200)
    goto LABEL_206;
LABEL_188:
  v134 = *(_QWORD *)(v10 + 1144) / v133;
  v135 = atomic_load(&qword_253EA5748);
  if (v135)
  {
    webrtc::metrics::HistogramAdd(v135, v134);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5748))
    {
      if (!__stlxr(0, &qword_253EA5748))
        goto LABEL_193;
    }
    __clrex();
  }
LABEL_193:
  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x1EuLL)
    v137 = 30;
  else
    v137 = v477 + ~*((_QWORD *)&v477 + 1);
  memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.CurrentDelayInMs ", v137);
  *((_QWORD *)&v477 + 1) += v137;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v134);
  LOBYTE(__src) = 10;
  v138 = v477;
  v139 = *((_QWORD *)&v477 + 1) + 1;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
  v140 = *((_QWORD *)&v477 + 1);
  if (v138 != v139)
    v140 = *((_QWORD *)&v477 + 1) + 1;
  *((_QWORD *)&v477 + 1) = v140;
  v476[v140] = 0;
  v141 = *(_QWORD *)(v10 + 1184);
  if (v141 >= 200)
  {
LABEL_207:
    v142 = atomic_load(&qword_253EA5750);
    if (v142)
    {
      webrtc::metrics::HistogramAdd(v142, *(_QWORD *)(v10 + 1176) / v141);
    }
    else
    {
      while (!__ldaxr(&qword_253EA5750))
      {
        if (!__stlxr(0, &qword_253EA5750))
          goto LABEL_212;
      }
      __clrex();
    }
  }
LABEL_212:
  v473[0] = 0;
  v473[1] = 0;
  v472 = (uint64_t *)v473;
  v144 = *(_QWORD **)(v10 + 1272);
  v443 = v10;
  v2 = v10 + 1280;
  if (v144 != (_QWORD *)(v10 + 1280))
  {
    do
    {
      LOBYTE(__src) = *((_BYTE *)v144 + 32);
      v145 = std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::__emplace_unique_key_args<webrtc::VideoContentType,std::piecewise_construct_t const&,std::tuple<webrtc::VideoContentType const&>,std::tuple<>>(&v472, __src, (char *)&__src);
      v146 = (uint64_t *)v145;
      *(int64x2_t *)(v145 + 40) = vaddq_s64(*(int64x2_t *)(v145 + 40), *(int64x2_t *)(v144 + 5));
      if (*((_BYTE *)v144 + 60))
      {
        v147 = (int *)(v144 + 7);
        v148 = (int *)(v145 + 56);
        if (!v145[60] || *v148 < *v147)
        {
          v149 = *v147;
          v145[60] = *((_BYTE *)v144 + 60);
          *v148 = v149;
        }
      }
      if (*((_BYTE *)v144 + 68))
      {
        v150 = (int *)(v144 + 8);
        v151 = (int *)(v145 + 64);
        if (!v145[68] || *v151 > *v150)
        {
          v152 = *v150;
          v145[68] = *((_BYTE *)v144 + 68);
          *v151 = v152;
        }
      }
      *(int64x2_t *)(v145 + 72) = vaddq_s64(*(int64x2_t *)(v145 + 72), *(int64x2_t *)(v144 + 9));
      if (*((_BYTE *)v144 + 92))
      {
        v153 = (int *)(v144 + 11);
        v154 = (int *)(v145 + 88);
        if (!v145[92] || *v154 < *v153)
        {
          v155 = *v153;
          v145[92] = *((_BYTE *)v144 + 92);
          *v154 = v155;
        }
      }
      if (*((_BYTE *)v144 + 100))
      {
        v156 = (int *)(v144 + 12);
        v157 = (int *)(v145 + 96);
        if (!v145[100] || *v157 > *v156)
        {
          v158 = *v156;
          v145[100] = *((_BYTE *)v144 + 100);
          *v157 = v158;
        }
      }
      *(int64x2_t *)(v145 + 104) = vaddq_s64(*(int64x2_t *)(v145 + 104), *(int64x2_t *)(v144 + 13));
      *(int64x2_t *)(v145 + 152) = vaddq_s64(*(int64x2_t *)(v145 + 152), *(int64x2_t *)(v144 + 19));
      if (*((_BYTE *)v144 + 172))
      {
        v159 = (int *)(v144 + 21);
        v160 = (int *)(v145 + 168);
        if (!v145[172] || *v160 < *v159)
        {
          v161 = *v159;
          v145[172] = *((_BYTE *)v144 + 172);
          *v160 = v161;
        }
      }
      if (*((_BYTE *)v144 + 180))
      {
        v162 = (int *)(v144 + 22);
        v163 = (int *)(v145 + 176);
        if (!v145[180] || *v163 > *v162)
        {
          v164 = *v162;
          v145[180] = *((_BYTE *)v144 + 180);
          *v163 = v164;
        }
      }
      *(int64x2_t *)(v145 + 120) = vaddq_s64(*(int64x2_t *)(v145 + 120), *(int64x2_t *)(v144 + 15));
      if (*((_BYTE *)v144 + 140))
      {
        v165 = (int *)(v144 + 17);
        v166 = (int *)(v145 + 136);
        if (!v145[140] || *v166 < *v165)
        {
          v167 = *v165;
          v145[140] = *((_BYTE *)v144 + 140);
          *v166 = v167;
        }
      }
      if (*((_BYTE *)v144 + 148))
      {
        v168 = (int *)(v144 + 18);
        v169 = (int *)(v145 + 144);
        if (!v145[148] || *v169 > *v168)
        {
          v170 = *v168;
          v145[148] = *((_BYTE *)v144 + 148);
          *v169 = v170;
        }
      }
      *(int64x2_t *)(v145 + 184) = vaddq_s64(*(int64x2_t *)(v145 + 184), *(int64x2_t *)(v144 + 23));
      if (*((_BYTE *)v144 + 204))
      {
        v171 = (int *)(v144 + 25);
        v172 = (int *)(v145 + 200);
        if (!v145[204] || *v172 < *v171)
        {
          v173 = *v171;
          v145[204] = *((_BYTE *)v144 + 204);
          *v172 = v173;
        }
      }
      if (*((_BYTE *)v144 + 212))
      {
        v174 = (int *)(v144 + 26);
        v175 = (int *)(v145 + 208);
        if (!v145[212] || *v175 > *v174)
        {
          v176 = *v174;
          v145[212] = *((_BYTE *)v144 + 212);
          *v175 = v176;
        }
      }
      *((int32x2_t *)v145 + 27) = vadd_s32(*(int32x2_t *)(v145 + 216), (int32x2_t)v144[27]);
      if (*((_DWORD *)v144 + 68))
      {
        v24 = 0;
        do
        {
          v38 = v144[28];
          if (v24 >= (uint64_t)(v144[29] - v38) >> 3)
            goto LABEL_833;
          rtc::HistogramPercentileCounter::Add(v146 + 28, v24, *(_QWORD *)(v38 + 8 * v24));
        }
        while (++v24 < *((unsigned int *)v144 + 68));
      }
      v177 = (uint64_t *)v146[31];
      if (v177 != v146 + 32)
      {
        do
        {
          rtc::HistogramPercentileCounter::Add(v146 + 28, *((_DWORD *)v177 + 8), v177[5]);
          v180 = (uint64_t *)v177[1];
          if (v180)
          {
            do
            {
              v181 = v180;
              v180 = (uint64_t *)*v180;
            }
            while (v180);
          }
          else
          {
            do
            {
              v181 = (uint64_t *)v177[2];
              v182 = *v181 == (_QWORD)v177;
              v177 = v181;
            }
            while (!v182);
          }
          v177 = v181;
        }
        while (v181 != v146 + 32);
      }
      v178 = (_QWORD *)v144[1];
      if (v178)
      {
        do
        {
          v179 = v178;
          v178 = (_QWORD *)*v178;
        }
        while (v178);
      }
      else
      {
        do
        {
          v179 = (_QWORD *)v144[2];
          v182 = *v179 == (_QWORD)v144;
          v144 = v179;
        }
        while (!v182);
      }
      v144 = v179;
    }
    while (v179 != (_QWORD *)v2);
    v183 = v472;
    if (v472 == (uint64_t *)v473)
      goto LABEL_800;
    v24 = 1;
    while (2)
    {
      v446.i32[0] = *((unsigned __int8 *)v183 + 32);
      v184 = *(_OWORD *)(v183 + 23);
      v460 = *(_OWORD *)(v183 + 21);
      v461 = v184;
      v462 = *(_OWORD *)(v183 + 25);
      v185 = (_BYTE *)v183[28];
      v463 = v183[27];
      v186 = *(_OWORD *)(v183 + 15);
      v456 = *(_OWORD *)(v183 + 13);
      v457 = v186;
      v187 = *(_OWORD *)(v183 + 19);
      v458 = *(_OWORD *)(v183 + 17);
      v459 = v187;
      v188 = *(_OWORD *)(v183 + 7);
      __src = *(_OWORD *)(v183 + 5);
      v453 = v188;
      v189 = *(_OWORD *)(v183 + 11);
      v454 = *(_OWORD *)(v183 + 9);
      v455 = v189;
      v465 = 0;
      v466 = 0;
      v464 = 0;
      v190 = (_BYTE *)v183[29];
      v191 = v190 - v185;
      if (v190 != v185)
      {
        if (v191 < 0)
          goto LABEL_868;
        v464 = operator new(v190 - v185);
        v465 = v464;
        v192 = (char *)v464 + 8 * (v191 >> 3);
        v466 = v192;
        memcpy(v464, v185, v191);
        v465 = v192;
      }
      v468 = 0;
      v469 = 0;
      v467 = &v468;
      v10 = v183[31];
      if ((uint64_t *)v10 != v183 + 32)
      {
        v193 = 0;
        while (1)
        {
          v194 = *(_DWORD *)(v10 + 32);
          v195 = v468;
          v196 = &v468;
          if (v467 != &v468)
          {
            v197 = v468;
            v198 = &v468;
            if (v468)
            {
              do
              {
                v196 = (_QWORD **)v197;
                v197 = (_QWORD *)v197[1];
              }
              while (v197);
            }
            else
            {
              do
              {
                v196 = (_QWORD **)v198[2];
                v182 = *v196 == v198;
                v198 = v196;
              }
              while (v182);
            }
            if (*((_DWORD *)v196 + 8) >= v194)
              break;
          }
          if (v468)
            v7 = (unint64_t)v196;
          else
            v7 = (unint64_t)&v468;
          if (v468)
            v199 = v196 + 1;
          else
            v199 = &v468;
          if (!*v199)
            goto LABEL_303;
LABEL_328:
          v214 = *(uint64_t **)(v10 + 8);
          if (v214)
          {
            do
            {
              v215 = v214;
              v214 = (uint64_t *)*v214;
            }
            while (v214);
          }
          else
          {
            do
            {
              v215 = *(uint64_t **)(v10 + 16);
              v182 = *v215 == v10;
              v10 = (size_t)v215;
            }
            while (!v182);
          }
          v10 = (size_t)v215;
          if (v215 == v183 + 32)
            goto LABEL_340;
        }
        v199 = &v468;
        v7 = (unint64_t)&v468;
        if (v468)
        {
          while (1)
          {
            while (1)
            {
              v7 = (unint64_t)v195;
              v200 = *((_DWORD *)v195 + 8);
              if (v200 <= v194)
                break;
              v195 = *(_QWORD **)v7;
              v199 = (_QWORD *)v7;
              if (!*(_QWORD *)v7)
                goto LABEL_303;
            }
            if (v200 >= v194)
              goto LABEL_328;
            v195 = *(_QWORD **)(v7 + 8);
            if (!v195)
            {
              v199 = (_QWORD *)(v7 + 8);
              break;
            }
          }
        }
LABEL_303:
        v201 = operator new(0x30uLL);
        *((_OWORD *)v201 + 2) = *(_OWORD *)(v10 + 32);
        *v201 = 0;
        v201[1] = 0;
        v201[2] = v7;
        *v199 = v201;
        if (*v467)
        {
          v467 = (_QWORD **)*v467;
          v201 = (_QWORD *)*v199;
        }
        v202 = v468;
        v182 = v201 == v468;
        *((_BYTE *)v201 + 24) = v201 == v468;
        if (!v182)
        {
          do
          {
            v203 = v201[2];
            if (*(_BYTE *)(v203 + 24))
              break;
            v204 = *(_QWORD **)(v203 + 16);
            v205 = *v204;
            if (*v204 == v203)
            {
              v208 = v204[1];
              if (!v208 || (v209 = *(unsigned __int8 *)(v208 + 24), v206 = (_BYTE *)(v208 + 24), v209))
              {
                if (*(_QWORD **)v203 == v201)
                {
                  *(_BYTE *)(v203 + 24) = 1;
                  *((_BYTE *)v204 + 24) = 0;
                  v212 = *(_QWORD *)(v203 + 8);
                  *v204 = v212;
                  if (v212)
                    goto LABEL_320;
                }
                else
                {
                  v210 = *(uint64_t **)(v203 + 8);
                  v211 = *v210;
                  *(_QWORD *)(v203 + 8) = *v210;
                  if (v211)
                  {
                    *(_QWORD *)(v211 + 16) = v203;
                    v204 = *(_QWORD **)(v203 + 16);
                  }
                  v210[2] = (uint64_t)v204;
                  *(_QWORD *)(*(_QWORD *)(v203 + 16) + 8 * (**(_QWORD **)(v203 + 16) != v203)) = v210;
                  *v210 = v203;
                  *(_QWORD *)(v203 + 16) = v210;
                  v204 = (_QWORD *)v210[2];
                  v203 = *v204;
                  *((_BYTE *)v210 + 24) = 1;
                  *((_BYTE *)v204 + 24) = 0;
                  v212 = *(_QWORD *)(v203 + 8);
                  *v204 = v212;
                  if (v212)
LABEL_320:
                    *(_QWORD *)(v212 + 16) = v204;
                }
                *(_QWORD *)(v203 + 16) = v204[2];
                *(_QWORD *)(v204[2] + 8 * (*(_QWORD *)v204[2] != (_QWORD)v204)) = v203;
                *(_QWORD *)(v203 + 8) = v204;
LABEL_326:
                v204[2] = v203;
                break;
              }
            }
            else if (!v205 || (v207 = *(unsigned __int8 *)(v205 + 24), v206 = (_BYTE *)(v205 + 24), v207))
            {
              if (*(_QWORD **)v203 == v201)
              {
                v216 = v201[1];
                *(_QWORD *)v203 = v216;
                if (v216)
                {
                  *(_QWORD *)(v216 + 16) = v203;
                  v204 = *(_QWORD **)(v203 + 16);
                }
                v201[2] = v204;
                *(_QWORD *)(*(_QWORD *)(v203 + 16) + 8 * (**(_QWORD **)(v203 + 16) != v203)) = v201;
                v201[1] = v203;
                *(_QWORD *)(v203 + 16) = v201;
                v204 = (_QWORD *)v201[2];
                *((_BYTE *)v201 + 24) = 1;
                *((_BYTE *)v204 + 24) = 0;
                v203 = v204[1];
                v213 = *(_QWORD **)v203;
                v204[1] = *(_QWORD *)v203;
                if (v213)
LABEL_324:
                  v213[2] = v204;
              }
              else
              {
                *(_BYTE *)(v203 + 24) = 1;
                *((_BYTE *)v204 + 24) = 0;
                v203 = v204[1];
                v213 = *(_QWORD **)v203;
                v204[1] = *(_QWORD *)v203;
                if (v213)
                  goto LABEL_324;
              }
              *(_QWORD *)(v203 + 16) = v204[2];
              *(_QWORD *)(v204[2] + 8 * (*(_QWORD *)v204[2] != (_QWORD)v204)) = v203;
              *(_QWORD *)v203 = v204;
              goto LABEL_326;
            }
            *(_BYTE *)(v203 + 24) = 1;
            v201 = v204;
            *((_BYTE *)v204 + 24) = v204 == v202;
            *v206 = 1;
          }
          while (v204 != v202);
        }
        v469 = ++v193;
        goto LABEL_328;
      }
LABEL_340:
      v470 = *((_OWORD *)v183 + 17);
      v471 = v183[36];
      if ((v446.i8[0] & 1) != 0)
        v217 = "WebRTC.Video.Screenshare";
      else
        v217 = "WebRTC.Video";
      if ((v446.i8[0] & 1) != 0)
        v2 = 24;
      else
        v2 = 12;
      if ((v446.i8[0] & 1) != 0)
      {
        p_dst = (void **)operator new(0x20uLL);
        __dst = (char *)p_dst;
        v451 = xmmword_208F08630;
        if (p_dst > (void **)v217)
          goto LABEL_351;
      }
      else
      {
        HIBYTE(v451) = 12;
        p_dst = (void **)&__dst;
        if (&__dst > (char **)v217)
          goto LABEL_351;
      }
      v38 = (size_t)p_dst + v2;
      if ((char *)p_dst + v2 > v217)
        goto LABEL_833;
LABEL_351:
      memcpy(p_dst, v217, v2);
      *((_BYTE *)p_dst + v2) = 0;
      v219 = *((_QWORD *)&__src + 1);
      if (*((uint64_t *)&__src + 1) < 200)
        goto LABEL_430;
      v7 = SHIBYTE(v451);
      v220 = HIBYTE(v451);
      if ((v7 & 0x80000000) == 0)
        v2 = HIBYTE(v451);
      else
        v2 = v451;
      v221 = v2 + 18;
      if (v2 + 18 > 0x7FFFFFFFFFFFFFF7)
LABEL_868:
        abort();
      v10 = __src;
      if (v221 > 0x16)
      {
        v223 = (v221 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v221 | 7) != 0x17)
          v223 = v221 | 7;
        v224 = v223 + 1;
        p_p = (void **)operator new(v223 + 1);
        v448 = v2 + 18;
        v449 = v224 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        v448 = 0;
        v449 = 0;
        __p = 0;
        p_p = &__p;
        HIBYTE(v449) = v2 + 18;
      }
      v38 = (size_t)__dst;
      if ((v7 & 0x80000000) == 0)
        v225 = (void **)&__dst;
      else
        v225 = (void **)__dst;
      v226 = (char *)p_p + v2;
      if (v225 >= p_p && v226 > (char *)v225)
        goto LABEL_833;
      if (v2)
        memmove(p_p, v225, v2);
      if (v226 <= ".EndToEndDelayInMs")
      {
        v38 = (size_t)".EndToEndDelayInMs";
        if (v226 + 18 > ".EndToEndDelayInMs")
          goto LABEL_833;
      }
      strcpy(v226, ".EndToEndDelayInMs");
      v38 = SHIBYTE(v449);
      if ((v38 & 0x80000000) != 0)
      {
        v38 = v448;
        if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
          goto LABEL_833;
        operator delete(__p);
        v220 = HIBYTE(v451);
        if ((HIBYTE(v451) & 0x80) == 0)
          goto LABEL_372;
      }
      else if ((v220 & 0x80) == 0)
      {
LABEL_372:
        v227 = (void **)&__dst;
        goto LABEL_380;
      }
      v220 = v451;
      if ((v451 & 0x8000000000000000) != 0)
        goto LABEL_833;
      v227 = (void **)__dst;
      if ((_QWORD)v451)
      {
        if (!__dst)
          goto LABEL_833;
      }
LABEL_380:
      if (v220 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
        v228 = v477 + ~*((_QWORD *)&v477 + 1);
      else
        v228 = v220;
      v229 = (uint64_t)v10 / v219;
      memcpy(&v476[*((_QWORD *)&v477 + 1)], v227, v228);
      *((_QWORD *)&v477 + 1) += v228;
      v476[*((_QWORD *)&v477 + 1)] = 0;
      if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x12uLL)
        v230 = 18;
      else
        v230 = v477 + ~*((_QWORD *)&v477 + 1);
      memcpy(&v476[*((_QWORD *)&v477 + 1)], ".EndToEndDelayInMs", v230);
      *((_QWORD *)&v477 + 1) += v230;
      v476[*((_QWORD *)&v477 + 1)] = 0;
      v2 = v477;
      v231 = *((_QWORD *)&v477 + 1) + 1;
      memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
      v232 = *((_QWORD *)&v477 + 1);
      if (v2 != v231)
        v232 = *((_QWORD *)&v477 + 1) + 1;
      *((_QWORD *)&v477 + 1) = v232;
      v476[v232] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v229);
      LOBYTE(__p) = 10;
      v233 = v477;
      v234 = *((_QWORD *)&v477 + 1) + 1;
      memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
      v235 = *((_QWORD *)&v477 + 1);
      if (v233 != v234)
        v235 = *((_QWORD *)&v477 + 1) + 1;
      *((_QWORD *)&v477 + 1) = v235;
      v476[v235] = 0;
      v236 = v453;
      if ((v453 & 0xFF00000000) == 0)
      {
LABEL_430:
        v251 = *((_QWORD *)&v454 + 1);
        v444 = *((_QWORD *)&v454 + 1);
        if (*((uint64_t *)&v454 + 1) < 200)
        {
          LODWORD(v252) = 0;
          goto LABEL_510;
        }
        v7 = SHIBYTE(v451);
        v10 = HIBYTE(v451);
        if ((v7 & 0x80000000) == 0)
          v2 = HIBYTE(v451);
        else
          v2 = v451;
        v253 = v2 + 20;
        if (v2 + 20 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_868;
        v254 = v454;
        if (v253 > 0x16)
        {
          v256 = (v253 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v253 | 7) != 0x17)
            v256 = v253 | 7;
          v257 = v256 + 1;
          v255 = (void **)operator new(v256 + 1);
          v448 = v2 + 20;
          v449 = v257 | 0x8000000000000000;
          __p = v255;
        }
        else
        {
          v448 = 0;
          v449 = 0;
          __p = 0;
          v255 = &__p;
          HIBYTE(v449) = v2 + 20;
        }
        v38 = (size_t)__dst;
        if ((v7 & 0x80000000) == 0)
          v258 = (void **)&__dst;
        else
          v258 = (void **)__dst;
        v259 = (char *)v255 + v2;
        if (v258 >= v255 && v259 > (char *)v258)
          goto LABEL_833;
        if (v2)
          memmove(v255, v258, v2);
        if (v259 <= ".InterframeDelayInMs")
        {
          v38 = (size_t)".InterframeDelayInMs";
          if (v259 + 20 > ".InterframeDelayInMs")
            goto LABEL_833;
        }
        strcpy(v259, ".InterframeDelayInMs");
        v38 = SHIBYTE(v449);
        if ((v38 & 0x80000000) != 0)
        {
          v38 = v448;
          if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
            goto LABEL_833;
          operator delete(__p);
          v10 = HIBYTE(v451);
          if ((HIBYTE(v451) & 0x80) == 0)
            goto LABEL_452;
        }
        else if ((v10 & 0x80) == 0)
        {
LABEL_452:
          v260 = (void **)&__dst;
          goto LABEL_460;
        }
        v10 = v451;
        if ((v451 & 0x8000000000000000) != 0)
          goto LABEL_833;
        v260 = (void **)__dst;
        if ((_QWORD)v451)
        {
          if (!__dst)
            goto LABEL_833;
        }
LABEL_460:
        if (v10 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
          v261 = v477 + ~*((_QWORD *)&v477 + 1);
        else
          v261 = v10;
        v252 = v254 / v251;
        memcpy(&v476[*((_QWORD *)&v477 + 1)], v260, v261);
        *((_QWORD *)&v477 + 1) += v261;
        v476[*((_QWORD *)&v477 + 1)] = 0;
        if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x14uLL)
          v262 = 20;
        else
          v262 = v477 + ~*((_QWORD *)&v477 + 1);
        memcpy(&v476[*((_QWORD *)&v477 + 1)], ".InterframeDelayInMs", v262);
        *((_QWORD *)&v477 + 1) += v262;
        v476[*((_QWORD *)&v477 + 1)] = 0;
        v263 = v477;
        v264 = *((_QWORD *)&v477 + 1) + 1;
        memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
        v265 = *((_QWORD *)&v477 + 1);
        if (v263 != v264)
          v265 = *((_QWORD *)&v477 + 1) + 1;
        *((_QWORD *)&v477 + 1) = v265;
        v476[v265] = 0;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v252);
        LOBYTE(__p) = 10;
        v266 = v477;
        v267 = *((_QWORD *)&v477 + 1) + 1;
        memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
        v268 = *((_QWORD *)&v477 + 1);
        if (v266 != v267)
          v268 = *((_QWORD *)&v477 + 1) + 1;
        *((_QWORD *)&v477 + 1) = v268;
        v476[v268] = 0;
        v269 = v455;
        if ((v455 & 0xFF00000000) == 0)
        {
LABEL_510:
          if (!*((_QWORD *)&v470 + 1))
            goto LABEL_536;
          v284 = (unint64_t)fmaxf(ceilf((float)*((unint64_t *)&v470 + 1) * 0.95) + -1.0, 0.0);
          if (*((_QWORD *)&v470 + 1) <= v284)
            v284 = *((_QWORD *)&v470 + 1) - 1;
          v285 = v284 - v471;
          if (v284 >= v471)
          {
            v289 = v467;
            if (v467 == &v468)
            {
LABEL_536:
              v293 = *((_QWORD *)&v457 + 1);
              if (*((uint64_t *)&v457 + 1) < 200)
                goto LABEL_580;
              goto LABEL_537;
            }
            while (1)
            {
              v290 = (unint64_t)v289[5];
              v288 = v285 >= v290;
              v285 -= v290;
              if (!v288)
                break;
              v291 = v289[1];
              if (v291)
              {
                do
                {
                  v292 = (_QWORD **)v291;
                  v291 = (_QWORD *)*v291;
                }
                while (v291);
              }
              else
              {
                do
                {
                  v292 = (_QWORD **)v289[2];
                  v182 = *v292 == v289;
                  v289 = v292;
                }
                while (!v182);
              }
              v289 = v292;
              if (v292 == &v468)
                goto LABEL_536;
            }
            LODWORD(v286) = *((_DWORD *)v289 + 8);
            if (v444 < 200)
            {
LABEL_756:
              v389 = SHIBYTE(v451);
              v10 = HIBYTE(v451);
              if (v451 >= 0)
                v2 = HIBYTE(v451);
              else
                v2 = v451;
              v7 = v2 + 32;
              if (v2 + 32 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_868;
              if (v7 > 0x16)
              {
                v391 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v7 | 7) != 0x17)
                  v391 = v7 | 7;
                v392 = v391 + 1;
                v390 = (void **)operator new(v391 + 1);
                v448 = v2 + 32;
                v449 = v392 | 0x8000000000000000;
                __p = v390;
              }
              else
              {
                v448 = 0;
                v449 = 0;
                __p = 0;
                v390 = &__p;
                HIBYTE(v449) = v2 + 32;
              }
              v38 = (size_t)__dst;
              if (v389 >= 0)
                v393 = (void **)&__dst;
              else
                v393 = (void **)__dst;
              v394 = (char *)v390 + v2;
              if (v393 >= v390 && v394 > (char *)v393)
                goto LABEL_833;
              if (v2)
                memmove(v390, v393, v2);
              v38 = (size_t)(v394 + 32);
              if (v394 <= ".InterframeDelay95PercentileInMs"
                && v38 > (unint64_t)".InterframeDelay95PercentileInMs")
              {
                goto LABEL_833;
              }
              strcpy(v394, ".InterframeDelay95PercentileInMs");
              v38 = SHIBYTE(v449);
              if ((v38 & 0x80000000) != 0)
              {
                v38 = v448;
                if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
                  goto LABEL_833;
                operator delete(__p);
                v10 = HIBYTE(v451);
                if ((HIBYTE(v451) & 0x80) == 0)
                  goto LABEL_780;
              }
              else if ((v10 & 0x80) == 0)
              {
LABEL_780:
                v397 = (void **)&__dst;
                goto LABEL_788;
              }
              v10 = v451;
              if ((v451 & 0x8000000000000000) != 0)
                goto LABEL_833;
              v397 = (void **)__dst;
              if ((_QWORD)v451)
              {
                if (!__dst)
                  goto LABEL_833;
              }
LABEL_788:
              if (v10 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
                v398 = v477 + ~*((_QWORD *)&v477 + 1);
              else
                v398 = v10;
              memcpy(&v476[*((_QWORD *)&v477 + 1)], v397, v398);
              *((_QWORD *)&v477 + 1) += v398;
              v476[*((_QWORD *)&v477 + 1)] = 0;
              if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x20uLL)
                v399 = 32;
              else
                v399 = v477 + ~*((_QWORD *)&v477 + 1);
              memcpy(&v476[*((_QWORD *)&v477 + 1)], ".InterframeDelay95PercentileInMs", v399);
              *((_QWORD *)&v477 + 1) += v399;
              v476[*((_QWORD *)&v477 + 1)] = 0;
              v400 = v477;
              v401 = *((_QWORD *)&v477 + 1) + 1;
              memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
              v402 = *((_QWORD *)&v477 + 1);
              if (v400 != v401)
                v402 = *((_QWORD *)&v477 + 1) + 1;
              *((_QWORD *)&v477 + 1) = v402;
              v476[v402] = 0;
              rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%u", v286);
              LOBYTE(__p) = 10;
              v403 = v477;
              v404 = *((_QWORD *)&v477 + 1) + 1;
              memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
              v405 = *((_QWORD *)&v477 + 1);
              if (v403 != v404)
                v405 = *((_QWORD *)&v477 + 1) + 1;
              *((_QWORD *)&v477 + 1) = v405;
              v476[v405] = 0;
              v293 = *((_QWORD *)&v457 + 1);
              if (*((uint64_t *)&v457 + 1) < 200)
              {
LABEL_580:
                v313 = *((_QWORD *)&v459 + 1);
                if (*((uint64_t *)&v459 + 1) < 200)
                  goto LABEL_624;
                v314 = SHIBYTE(v451);
                v7 = HIBYTE(v451);
                if (v451 >= 0)
                  v2 = HIBYTE(v451);
                else
                  v2 = v451;
                v315 = v2 + 23;
                if (v2 + 23 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_868;
                v10 = v459;
                if (v2 < 0xFFFFFFFFFFFFFFE9)
                {
                  v317 = (v315 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v315 | 7) != 0x17)
                    v317 = v315 | 7;
                  v318 = v317 + 1;
                  v316 = (void **)operator new(v317 + 1);
                  v448 = v2 + 23;
                  v449 = v318 | 0x8000000000000000;
                  __p = v316;
                }
                else
                {
                  v448 = 0;
                  v449 = 0;
                  __p = 0;
                  v316 = &__p;
                  HIBYTE(v449) = v2 + 23;
                }
                v38 = (size_t)__dst;
                if (v314 >= 0)
                  v319 = (void **)&__dst;
                else
                  v319 = (void **)__dst;
                v320 = (char *)v316 + v2;
                if (v319 >= v316 && v320 > (char *)v319)
                  goto LABEL_833;
                if (v2)
                  memmove(v316, v319, v2);
                v38 = (size_t)(v320 + 23);
                if (v320 <= ".ReceivedHeightInPixels" && v38 > (unint64_t)".ReceivedHeightInPixels")
                  goto LABEL_833;
                strcpy(v320, ".ReceivedHeightInPixels");
                v38 = SHIBYTE(v449);
                if ((v38 & 0x80000000) != 0)
                {
                  v38 = v448;
                  if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
                    goto LABEL_833;
                  operator delete(__p);
                  v7 = HIBYTE(v451);
                  if ((HIBYTE(v451) & 0x80) == 0)
                    goto LABEL_605;
                }
                else if ((v7 & 0x80) == 0)
                {
LABEL_605:
                  v323 = (void **)&__dst;
LABEL_613:
                  if (v7 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
                    v324 = v477 + ~*((_QWORD *)&v477 + 1);
                  else
                    v324 = v7;
                  v325 = (uint64_t)v10 / v313;
                  memcpy(&v476[*((_QWORD *)&v477 + 1)], v323, v324);
                  *((_QWORD *)&v477 + 1) += v324;
                  v476[*((_QWORD *)&v477 + 1)] = 0;
                  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x17uLL)
                    v326 = 23;
                  else
                    v326 = v477 + ~*((_QWORD *)&v477 + 1);
                  memcpy(&v476[*((_QWORD *)&v477 + 1)], ".ReceivedHeightInPixels", v326);
                  *((_QWORD *)&v477 + 1) += v326;
                  v476[*((_QWORD *)&v477 + 1)] = 0;
                  v327 = v477;
                  v328 = *((_QWORD *)&v477 + 1) + 1;
                  memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
                  v329 = *((_QWORD *)&v477 + 1);
                  if (v327 != v328)
                    v329 = *((_QWORD *)&v477 + 1) + 1;
                  *((_QWORD *)&v477 + 1) = v329;
                  v476[v329] = 0;
                  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v325);
                  LOBYTE(__p) = 10;
                  v330 = v477;
                  v331 = *((_QWORD *)&v477 + 1) + 1;
                  memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
                  v332 = *((_QWORD *)&v477 + 1);
                  if (v330 != v331)
                    v332 = *((_QWORD *)&v477 + 1) + 1;
                  *((_QWORD *)&v477 + 1) = v332;
                  v476[v332] = 0;
LABEL_624:
                  if (!v446.i32[0])
                    goto LABEL_745;
                  v333 = (double)(uint64_t)v456 / 1000.0;
                  if (v333 < 10.0)
                  {
LABEL_665:
                    v350 = v463;
                    v351 = HIDWORD(v463) + v463;
                    if (HIDWORD(v463) + (int)v463 < 200)
                      goto LABEL_705;
                    v7 = SHIBYTE(v451);
                    v10 = HIBYTE(v451);
                    if ((v7 & 0x80000000) == 0)
                      v2 = HIBYTE(v451);
                    else
                      v2 = v451;
                    v352 = v2 + 28;
                    if (v2 + 28 > 0x7FFFFFFFFFFFFFF7)
                      goto LABEL_868;
                    if (v352 > 0x16)
                    {
                      v354 = (v352 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v352 | 7) != 0x17)
                        v354 = v352 | 7;
                      v355 = v354 + 1;
                      v353 = (void **)operator new(v354 + 1);
                      v448 = v2 + 28;
                      v449 = v355 | 0x8000000000000000;
                      __p = v353;
                    }
                    else
                    {
                      v448 = 0;
                      v449 = 0;
                      __p = 0;
                      v353 = &__p;
                      HIBYTE(v449) = v2 + 28;
                    }
                    v38 = (size_t)__dst;
                    if ((v7 & 0x80000000) == 0)
                      v356 = (void **)&__dst;
                    else
                      v356 = (void **)__dst;
                    v357 = (char *)v353 + v2;
                    if (v356 >= v353 && v357 > (char *)v356)
                      goto LABEL_833;
                    if (v2)
                      memmove(v353, v356, v2);
                    if (v357 <= ".KeyFramesReceivedInPermille")
                    {
                      v38 = (size_t)".KeyFramesReceivedInPermille";
                      if (v357 + 28 > ".KeyFramesReceivedInPermille")
                        goto LABEL_833;
                    }
                    strcpy(v357, ".KeyFramesReceivedInPermille");
                    v38 = SHIBYTE(v449);
                    if ((v38 & 0x80000000) != 0)
                    {
                      v38 = v448;
                      if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
                        goto LABEL_833;
                      operator delete(__p);
                      v10 = HIBYTE(v451);
                      if ((HIBYTE(v451) & 0x80) == 0)
                        goto LABEL_686;
                    }
                    else if ((v10 & 0x80) == 0)
                    {
LABEL_686:
                      v358 = (void **)&__dst;
LABEL_694:
                      if (v10 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
                        v359 = v477 + ~*((_QWORD *)&v477 + 1);
                      else
                        v359 = v10;
                      v360 = (int)(1000 * v350 + (v351 >> 1)) / (int)v351;
                      memcpy(&v476[*((_QWORD *)&v477 + 1)], v358, v359);
                      *((_QWORD *)&v477 + 1) += v359;
                      v476[*((_QWORD *)&v477 + 1)] = 0;
                      if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x1CuLL)
                        v361 = 28;
                      else
                        v361 = v477 + ~*((_QWORD *)&v477 + 1);
                      memcpy(&v476[*((_QWORD *)&v477 + 1)], ".KeyFramesReceivedInPermille", v361);
                      *((_QWORD *)&v477 + 1) += v361;
                      v476[*((_QWORD *)&v477 + 1)] = 0;
                      v362 = v477;
                      v363 = *((_QWORD *)&v477 + 1) + 1;
                      memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
                      v364 = *((_QWORD *)&v477 + 1);
                      if (v362 != v363)
                        v364 = *((_QWORD *)&v477 + 1) + 1;
                      *((_QWORD *)&v477 + 1) = v364;
                      v476[v364] = 0;
                      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v360);
                      LOBYTE(__p) = 10;
                      v365 = v477;
                      v366 = *((_QWORD *)&v477 + 1) + 1;
                      memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
                      v367 = *((_QWORD *)&v477 + 1);
                      if (v365 != v366)
                        v367 = *((_QWORD *)&v477 + 1) + 1;
                      *((_QWORD *)&v477 + 1) = v367;
                      v476[v367] = 0;
LABEL_705:
                      v368 = *((_QWORD *)&v461 + 1);
                      if (*((uint64_t *)&v461 + 1) < 200)
                        goto LABEL_745;
                      v7 = SHIBYTE(v451);
                      v10 = HIBYTE(v451);
                      if ((v7 & 0x80000000) == 0)
                        v2 = HIBYTE(v451);
                      else
                        v2 = v451;
                      v369 = v2 + 15;
                      if (v2 + 15 > 0x7FFFFFFFFFFFFFF7)
                        goto LABEL_868;
                      v370 = v461;
                      if (v369 > 0x16)
                      {
                        v372 = (v369 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v369 | 7) != 0x17)
                          v372 = v369 | 7;
                        v373 = v372 + 1;
                        v371 = (void **)operator new(v372 + 1);
                        v448 = v2 + 15;
                        v449 = v373 | 0x8000000000000000;
                        __p = v371;
                      }
                      else
                      {
                        v448 = 0;
                        v449 = 0;
                        __p = 0;
                        v371 = &__p;
                        HIBYTE(v449) = v2 + 15;
                      }
                      v38 = (size_t)__dst;
                      if ((v7 & 0x80000000) == 0)
                        v374 = (void **)&__dst;
                      else
                        v374 = (void **)__dst;
                      v375 = (char *)v371 + v2;
                      if (v374 >= v371 && v375 > (char *)v374)
                        goto LABEL_833;
                      if (v2)
                        memmove(v371, v374, v2);
                      if (v375 <= ".Decoded.Vp8.Qp")
                      {
                        v38 = (size_t)".Decoded.Vp8.Qp";
                        if (v375 + 15 > ".Decoded.Vp8.Qp")
                          goto LABEL_833;
                      }
                      strcpy(v375, ".Decoded.Vp8.Qp");
                      v38 = SHIBYTE(v449);
                      if ((v38 & 0x80000000) != 0)
                      {
                        v38 = v448;
                        if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
                          goto LABEL_833;
                        operator delete(__p);
                        v10 = HIBYTE(v451);
                        if ((HIBYTE(v451) & 0x80) == 0)
                          goto LABEL_726;
                      }
                      else if ((v10 & 0x80) == 0)
                      {
LABEL_726:
                        v376 = (void **)&__dst;
LABEL_734:
                        if (v10 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
                          v377 = v477 + ~*((_QWORD *)&v477 + 1);
                        else
                          v377 = v10;
                        v378 = v370 / v368;
                        memcpy(&v476[*((_QWORD *)&v477 + 1)], v376, v377);
                        *((_QWORD *)&v477 + 1) += v377;
                        v476[*((_QWORD *)&v477 + 1)] = 0;
                        if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0xFuLL)
                          v379 = 15;
                        else
                          v379 = v477 + ~*((_QWORD *)&v477 + 1);
                        memcpy(&v476[*((_QWORD *)&v477 + 1)], ".Decoded.Vp8.Qp", v379);
                        *((_QWORD *)&v477 + 1) += v379;
                        v476[*((_QWORD *)&v477 + 1)] = 0;
                        v380 = v477;
                        v381 = *((_QWORD *)&v477 + 1) + 1;
                        memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
                        v382 = *((_QWORD *)&v477 + 1);
                        if (v380 != v381)
                          v382 = *((_QWORD *)&v477 + 1) + 1;
                        *((_QWORD *)&v477 + 1) = v382;
                        v476[v382] = 0;
                        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v378);
                        LOBYTE(__p) = 10;
                        v383 = v477;
                        v384 = *((_QWORD *)&v477 + 1) + 1;
                        memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
                        v385 = *((_QWORD *)&v477 + 1);
                        if (v383 != v384)
                          v385 = *((_QWORD *)&v477 + 1) + 1;
                        *((_QWORD *)&v477 + 1) = v385;
                        v476[v385] = 0;
LABEL_745:
                        if (SHIBYTE(v451) < 0)
                        {
                          operator delete(__dst);
                          std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v467, v468);
                          v386 = v464;
                          if (!v464)
                          {
LABEL_748:
                            v387 = (uint64_t *)v183[1];
                            if (v387)
                            {
                              do
                              {
                                v388 = v387;
                                v387 = (uint64_t *)*v387;
                              }
                              while (v387);
                            }
                            else
                            {
                              do
                              {
                                v388 = (uint64_t *)v183[2];
                                v182 = *v388 == (_QWORD)v183;
                                v183 = v388;
                              }
                              while (!v182);
                            }
                            v183 = v388;
                            if (v388 == (uint64_t *)v473)
                              goto LABEL_800;
                            continue;
                          }
                        }
                        else
                        {
                          std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&v467, v468);
                          v386 = v464;
                          if (!v464)
                            goto LABEL_748;
                        }
                        v465 = v386;
                        operator delete(v386);
                        goto LABEL_748;
                      }
                      v10 = v451;
                      if ((v451 & 0x8000000000000000) != 0)
                        goto LABEL_833;
                      v376 = (void **)__dst;
                      if ((_QWORD)v451)
                      {
                        if (!__dst)
                          goto LABEL_833;
                      }
                      goto LABEL_734;
                    }
                    v10 = v451;
                    if ((v451 & 0x8000000000000000) != 0)
                      goto LABEL_833;
                    v358 = (void **)__dst;
                    if ((_QWORD)v451)
                    {
                      if (!__dst)
                        goto LABEL_833;
                    }
                    goto LABEL_694;
                  }
                  v10 = SHIBYTE(v451);
                  v334 = HIBYTE(v451);
                  if ((v10 & 0x80000000) == 0)
                    v2 = HIBYTE(v451);
                  else
                    v2 = v451;
                  v7 = v2 + 27;
                  if (v2 + 27 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_868;
                  v335 = *((_QWORD *)&v456 + 1);
                  if (v7 > 0x16)
                  {
                    v337 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v7 | 7) != 0x17)
                      v337 = v7 | 7;
                    v338 = v337 + 1;
                    v336 = (void **)operator new(v337 + 1);
                    v448 = v2 + 27;
                    v449 = v338 | 0x8000000000000000;
                    __p = v336;
                  }
                  else
                  {
                    v448 = 0;
                    v449 = 0;
                    __p = 0;
                    v336 = &__p;
                    HIBYTE(v449) = v2 + 27;
                  }
                  v38 = (size_t)__dst;
                  if ((v10 & 0x80000000) == 0)
                    v339 = (void **)&__dst;
                  else
                    v339 = (void **)__dst;
                  v340 = (char *)v336 + v2;
                  if (v339 >= v336 && v340 > (char *)v339)
                    goto LABEL_833;
                  if (v2)
                    memmove(v336, v339, v2);
                  if (v340 <= ".MediaBitrateReceivedInKbps")
                  {
                    v38 = (size_t)".MediaBitrateReceivedInKbps";
                    if (v340 + 27 > ".MediaBitrateReceivedInKbps")
                      goto LABEL_833;
                  }
                  strcpy(v340, ".MediaBitrateReceivedInKbps");
                  v38 = SHIBYTE(v449);
                  if ((v38 & 0x80000000) != 0)
                  {
                    v38 = v448;
                    if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
                      goto LABEL_833;
                    operator delete(__p);
                    v334 = HIBYTE(v451);
                    if ((HIBYTE(v451) & 0x80) == 0)
                      goto LABEL_646;
                  }
                  else if ((v334 & 0x80) == 0)
                  {
LABEL_646:
                    v341 = (void **)&__dst;
LABEL_654:
                    if (v334 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
                      v342 = v477 + ~*((_QWORD *)&v477 + 1);
                    else
                      v342 = v334;
                    memcpy(&v476[*((_QWORD *)&v477 + 1)], v341, v342);
                    *((_QWORD *)&v477 + 1) += v342;
                    v476[*((_QWORD *)&v477 + 1)] = 0;
                    if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x1BuLL)
                      v343 = 27;
                    else
                      v343 = v477 + ~*((_QWORD *)&v477 + 1);
                    memcpy(&v476[*((_QWORD *)&v477 + 1)], ".MediaBitrateReceivedInKbps", v343);
                    *((_QWORD *)&v477 + 1) += v343;
                    v476[*((_QWORD *)&v477 + 1)] = 0;
                    v344 = v477;
                    v345 = *((_QWORD *)&v477 + 1) + 1;
                    memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
                    v346 = *((_QWORD *)&v477 + 1);
                    if (v344 != v345)
                      v346 = *((_QWORD *)&v477 + 1) + 1;
                    *((_QWORD *)&v477 + 1) = v346;
                    v476[v346] = 0;
                    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", (int)(float)((float)((float)(8 * v335) / v333) / 1000.0));
                    LOBYTE(__p) = 10;
                    v347 = v477;
                    v348 = *((_QWORD *)&v477 + 1) + 1;
                    memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
                    v349 = *((_QWORD *)&v477 + 1);
                    if (v347 != v348)
                      v349 = *((_QWORD *)&v477 + 1) + 1;
                    *((_QWORD *)&v477 + 1) = v349;
                    v476[v349] = 0;
                    goto LABEL_665;
                  }
                  v334 = v451;
                  if ((v451 & 0x8000000000000000) != 0)
                    goto LABEL_833;
                  v341 = (void **)__dst;
                  if ((_QWORD)v451)
                  {
                    if (!__dst)
                      goto LABEL_833;
                  }
                  goto LABEL_654;
                }
                v7 = v451;
                if ((v451 & 0x8000000000000000) != 0)
                  goto LABEL_833;
                v323 = (void **)__dst;
                if ((_QWORD)v451)
                {
                  if (!__dst)
                    goto LABEL_833;
                }
                goto LABEL_613;
              }
LABEL_537:
              v294 = SHIBYTE(v451);
              v7 = HIBYTE(v451);
              if (v451 >= 0)
                v2 = HIBYTE(v451);
              else
                v2 = v451;
              v295 = v2 + 22;
              if (v2 + 22 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_868;
              v10 = v457;
              if (v295 > 0x16)
              {
                v297 = (v295 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v295 | 7) != 0x17)
                  v297 = v295 | 7;
                v298 = v297 + 1;
                v296 = (void **)operator new(v297 + 1);
                v448 = v2 + 22;
                v449 = v298 | 0x8000000000000000;
                __p = v296;
              }
              else
              {
                v448 = 0;
                v449 = 0;
                __p = 0;
                v296 = &__p;
                HIBYTE(v449) = v2 + 22;
              }
              v38 = (size_t)__dst;
              if (v294 >= 0)
                v299 = (void **)&__dst;
              else
                v299 = (void **)__dst;
              v300 = (char *)v296 + v2;
              if (v299 >= v296 && v300 > (char *)v299)
                goto LABEL_833;
              if (v2)
                memmove(v296, v299, v2);
              v38 = (size_t)(v300 + 22);
              if (v300 <= ".ReceivedWidthInPixels" && v38 > (unint64_t)".ReceivedWidthInPixels")
                goto LABEL_833;
              strcpy(v300, ".ReceivedWidthInPixels");
              v38 = SHIBYTE(v449);
              if ((v38 & 0x80000000) != 0)
              {
                v38 = v448;
                if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
                  goto LABEL_833;
                operator delete(__p);
                v7 = HIBYTE(v451);
                if ((HIBYTE(v451) & 0x80) == 0)
                  goto LABEL_561;
              }
              else if ((v7 & 0x80) == 0)
              {
LABEL_561:
                v303 = (void **)&__dst;
LABEL_569:
                if (v7 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
                  v304 = v477 + ~*((_QWORD *)&v477 + 1);
                else
                  v304 = v7;
                v305 = (uint64_t)v10 / v293;
                memcpy(&v476[*((_QWORD *)&v477 + 1)], v303, v304);
                *((_QWORD *)&v477 + 1) += v304;
                v476[*((_QWORD *)&v477 + 1)] = 0;
                if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x16uLL)
                  v306 = 22;
                else
                  v306 = v477 + ~*((_QWORD *)&v477 + 1);
                memcpy(&v476[*((_QWORD *)&v477 + 1)], ".ReceivedWidthInPixels", v306);
                *((_QWORD *)&v477 + 1) += v306;
                v476[*((_QWORD *)&v477 + 1)] = 0;
                v307 = v477;
                v308 = *((_QWORD *)&v477 + 1) + 1;
                memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
                v309 = *((_QWORD *)&v477 + 1);
                if (v307 != v308)
                  v309 = *((_QWORD *)&v477 + 1) + 1;
                *((_QWORD *)&v477 + 1) = v309;
                v476[v309] = 0;
                rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v305);
                LOBYTE(__p) = 10;
                v310 = v477;
                v311 = *((_QWORD *)&v477 + 1) + 1;
                memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
                v312 = *((_QWORD *)&v477 + 1);
                if (v310 != v311)
                  v312 = *((_QWORD *)&v477 + 1) + 1;
                *((_QWORD *)&v477 + 1) = v312;
                v476[v312] = 0;
                goto LABEL_580;
              }
              v7 = v451;
              if ((v451 & 0x8000000000000000) != 0)
                goto LABEL_833;
              v303 = (void **)__dst;
              if ((_QWORD)v451)
              {
                if (!__dst)
                  goto LABEL_833;
              }
              goto LABEL_569;
            }
          }
          else
          {
            v38 = v470;
            if (!(_DWORD)v470)
              goto LABEL_536;
            v286 = 0;
            while (1)
            {
              if ((v465 - (_BYTE *)v464) >> 3 == v286)
                goto LABEL_833;
              v287 = *((_QWORD *)v464 + v286);
              v288 = v284 >= v287;
              v284 -= v287;
              if (!v288)
                break;
              if (v470 == ++v286)
                goto LABEL_536;
            }
            if (v444 < 200)
              goto LABEL_756;
          }
          if ((_DWORD)v252 == -1)
            goto LABEL_536;
          goto LABEL_756;
        }
        v270 = SHIBYTE(v451);
        v7 = HIBYTE(v451);
        if (v451 >= 0)
          v2 = HIBYTE(v451);
        else
          v2 = v451;
        v10 = v2 + 23;
        if (v2 + 23 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_868;
        if (v2 < 0xFFFFFFFFFFFFFFE9)
        {
          v272 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17)
            v272 = v10 | 7;
          v273 = v272 + 1;
          v271 = (void **)operator new(v272 + 1);
          v448 = v2 + 23;
          v449 = v273 | 0x8000000000000000;
          __p = v271;
        }
        else
        {
          v448 = 0;
          v449 = 0;
          __p = 0;
          v271 = &__p;
          HIBYTE(v449) = v2 + 23;
        }
        v38 = (size_t)__dst;
        if (v270 >= 0)
          v274 = (void **)&__dst;
        else
          v274 = (void **)__dst;
        v275 = (char *)v271 + v2;
        if (v274 >= v271 && v275 > (char *)v274)
          goto LABEL_833;
        if (v2)
          memmove(v271, v274, v2);
        if (v275 <= ".InterframeDelayMaxInMs")
        {
          v38 = (size_t)".InterframeDelayMaxInMs";
          if (v275 + 23 > ".InterframeDelayMaxInMs")
            goto LABEL_833;
        }
        strcpy(v275, ".InterframeDelayMaxInMs");
        v38 = SHIBYTE(v449);
        if ((v38 & 0x80000000) != 0)
        {
          v38 = v448;
          if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
            goto LABEL_833;
          operator delete(__p);
          v7 = HIBYTE(v451);
          if ((HIBYTE(v451) & 0x80) == 0)
            goto LABEL_491;
        }
        else if ((v7 & 0x80) == 0)
        {
LABEL_491:
          v276 = (void **)&__dst;
LABEL_499:
          if (v7 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
            v277 = v477 + ~*((_QWORD *)&v477 + 1);
          else
            v277 = v7;
          memcpy(&v476[*((_QWORD *)&v477 + 1)], v276, v277);
          *((_QWORD *)&v477 + 1) += v277;
          v476[*((_QWORD *)&v477 + 1)] = 0;
          if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x17uLL)
            v278 = 23;
          else
            v278 = v477 + ~*((_QWORD *)&v477 + 1);
          memcpy(&v476[*((_QWORD *)&v477 + 1)], ".InterframeDelayMaxInMs", v278);
          *((_QWORD *)&v477 + 1) += v278;
          v476[*((_QWORD *)&v477 + 1)] = 0;
          v2 = v477;
          v279 = *((_QWORD *)&v477 + 1) + 1;
          memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
          v280 = *((_QWORD *)&v477 + 1);
          if (v2 != v279)
            v280 = *((_QWORD *)&v477 + 1) + 1;
          *((_QWORD *)&v477 + 1) = v280;
          v476[v280] = 0;
          rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v269);
          LOBYTE(__p) = 10;
          v281 = v477;
          v282 = *((_QWORD *)&v477 + 1) + 1;
          memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
          v283 = *((_QWORD *)&v477 + 1);
          if (v281 != v282)
            v283 = *((_QWORD *)&v477 + 1) + 1;
          *((_QWORD *)&v477 + 1) = v283;
          v476[v283] = 0;
          goto LABEL_510;
        }
        v7 = v451;
        if ((v451 & 0x8000000000000000) != 0)
          goto LABEL_833;
        v276 = (void **)__dst;
        if ((_QWORD)v451)
        {
          if (!__dst)
            goto LABEL_833;
        }
        goto LABEL_499;
      }
      break;
    }
    v7 = SHIBYTE(v451);
    v10 = HIBYTE(v451);
    if ((v7 & 0x80000000) == 0)
      v2 = HIBYTE(v451);
    else
      v2 = v451;
    v237 = v2 + 21;
    if (v2 + 21 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_868;
    if (v237 > 0x16)
    {
      v239 = (v237 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v237 | 7) != 0x17)
        v239 = v237 | 7;
      v240 = v239 + 1;
      v238 = (void **)operator new(v239 + 1);
      v448 = v2 + 21;
      v449 = v240 | 0x8000000000000000;
      __p = v238;
    }
    else
    {
      v448 = 0;
      v449 = 0;
      __p = 0;
      v238 = &__p;
      HIBYTE(v449) = v2 + 21;
    }
    v38 = (size_t)__dst;
    if ((v7 & 0x80000000) == 0)
      v241 = (void **)&__dst;
    else
      v241 = (void **)__dst;
    v242 = (char *)v238 + v2;
    if (v241 >= v238 && v242 > (char *)v241)
      goto LABEL_833;
    if (v2)
      memmove(v238, v241, v2);
    if (v242 <= ".EndToEndDelayMaxInMs")
    {
      v38 = (size_t)".EndToEndDelayMaxInMs";
      if (v242 + 21 > ".EndToEndDelayMaxInMs")
        goto LABEL_833;
    }
    strcpy(v242, ".EndToEndDelayMaxInMs");
    v38 = SHIBYTE(v449);
    if ((v38 & 0x80000000) != 0)
    {
      v38 = v448;
      if ((v448 & 0x8000000000000000) != 0 || v448 && !__p)
        goto LABEL_833;
      operator delete(__p);
      v10 = HIBYTE(v451);
      if ((HIBYTE(v451) & 0x80) == 0)
        goto LABEL_411;
    }
    else if ((v10 & 0x80) == 0)
    {
LABEL_411:
      v243 = (void **)&__dst;
LABEL_419:
      if (v10 >= (_QWORD)v477 + ~*((_QWORD *)&v477 + 1))
        v244 = v477 + ~*((_QWORD *)&v477 + 1);
      else
        v244 = v10;
      memcpy(&v476[*((_QWORD *)&v477 + 1)], v243, v244);
      *((_QWORD *)&v477 + 1) += v244;
      v476[*((_QWORD *)&v477 + 1)] = 0;
      if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x15uLL)
        v245 = 21;
      else
        v245 = v477 + ~*((_QWORD *)&v477 + 1);
      memcpy(&v476[*((_QWORD *)&v477 + 1)], ".EndToEndDelayMaxInMs", v245);
      *((_QWORD *)&v477 + 1) += v245;
      v476[*((_QWORD *)&v477 + 1)] = 0;
      v2 = v477;
      v246 = *((_QWORD *)&v477 + 1) + 1;
      memcpy(&v476[*((_QWORD *)&v477 + 1)], " ", v477 != *((_QWORD *)&v477 + 1) + 1);
      v247 = *((_QWORD *)&v477 + 1);
      if (v2 != v246)
        v247 = *((_QWORD *)&v477 + 1) + 1;
      *((_QWORD *)&v477 + 1) = v247;
      v476[v247] = 0;
      rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v236);
      LOBYTE(__p) = 10;
      v248 = v477;
      v249 = *((_QWORD *)&v477 + 1) + 1;
      memcpy(&v476[*((_QWORD *)&v477 + 1)], &__p, v477 != *((_QWORD *)&v477 + 1) + 1);
      v250 = *((_QWORD *)&v477 + 1);
      if (v248 != v249)
        v250 = *((_QWORD *)&v477 + 1) + 1;
      *((_QWORD *)&v477 + 1) = v250;
      v476[v250] = 0;
      goto LABEL_430;
    }
    v10 = v451;
    if ((v451 & 0x8000000000000000) != 0)
      goto LABEL_833;
    v243 = (void **)__dst;
    if ((_QWORD)v451)
    {
      if (!__dst)
        goto LABEL_833;
    }
    goto LABEL_419;
  }
LABEL_800:
  v7 = v442;
  v406 = *(_QWORD *)v441;
  v407 = *(_QWORD *)(v441 + 24);
  v2 = *(_QWORD *)(v441 + 48);
  v408 = (int64x2_t)vextq_s8(*(int8x16_t *)(v441 + 8), *(int8x16_t *)(v441 + 8), 8uLL);
  if (v442)
  {
    v407 += *(_QWORD *)(v442 + 24);
    v2 += *(_QWORD *)(v442 + 48);
    v445 = vaddq_s64((int64x2_t)vextq_s8(*(int8x16_t *)(v442 + 8), *(int8x16_t *)(v442 + 8), 8uLL), v408);
    v446 = vaddq_s64(*(int64x2_t *)(v442 + 56), *(int64x2_t *)(v441 + 56));
    if (*(_QWORD *)v442 < v406)
      v406 = *(_QWORD *)v442;
  }
  else
  {
    v445 = v408;
    v446 = *(int64x2_t *)(v441 + 56);
  }
  v10 = v443;
  v409 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v443 + 24) + 16))(*(_QWORD *)(v443 + 24));
  v410 = 0x7FFFFFFFFFFFFFFFLL;
  if (v406 == 0x7FFFFFFFFFFFFFFFLL)
    goto LABEL_865;
  if (v406 != 0x8000000000000000 && v409 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v410 = v409 - v406;
    if (v409 == 0x8000000000000000 || (uint64_t)v410 < 10000000)
      goto LABEL_865;
  }
  if (v410 % 0xF4240 <= 0x7A11F)
    v24 = v410 / 0xF4240;
  else
    v24 = v410 / 0xF4240 + 1;
  v412 = atomic_load(&qword_253EA5758);
  if (v412)
  {
    webrtc::metrics::HistogramAdd(v412, 8 * (v445.i64[0] + v407 + v445.i64[1]) / v24 / 0x3E8);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5758))
    {
      if (!__stlxr(0, &qword_253EA5758))
        goto LABEL_820;
    }
    __clrex();
  }
LABEL_820:
  v414 = 8 * (*(_QWORD *)(v441 + 16) - (*(_QWORD *)(v441 + 56) + *(_QWORD *)(v441 + 96))) / v24 / 0x3E8;
  v415 = atomic_load(&qword_253EA5760);
  if (v415)
  {
    webrtc::metrics::HistogramAdd(v415, v414);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5760))
    {
      if (!__stlxr(0, &qword_253EA5760))
        goto LABEL_825;
    }
    __clrex();
  }
LABEL_825:
  if ((_QWORD)v477 + ~*((_QWORD *)&v477 + 1) >= 0x28uLL)
    v417 = 40;
  else
    v417 = v477 + ~*((_QWORD *)&v477 + 1);
  memcpy(&v476[*((_QWORD *)&v477 + 1)], "WebRTC.Video.MediaBitrateReceivedInKbps ", v417);
  *((_QWORD *)&v477 + 1) += v417;
  v476[*((_QWORD *)&v477 + 1)] = 0;
  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&v476, "%d", v414);
  LOBYTE(__src) = 10;
  v418 = v477;
  v419 = *((_QWORD *)&v477 + 1) + 1;
  memcpy(&v476[*((_QWORD *)&v477 + 1)], &__src, v477 != *((_QWORD *)&v477 + 1) + 1);
  v420 = *((_QWORD *)&v477 + 1);
  if (v418 != v419)
    v420 = *((_QWORD *)&v477 + 1) + 1;
  *((_QWORD *)&v477 + 1) = v420;
  v476[v420] = 0;
  v38 = (size_t)&qword_253EA5768;
  v421 = atomic_load(&qword_253EA5768);
  if (!v421)
    goto LABEL_834;
  webrtc::metrics::HistogramAdd(v421, 8 * v407 / v24 / 0x3E8);
  v422 = v446;
  v423 = atomic_load(&qword_253EA5770);
  if (!v423)
    goto LABEL_842;
LABEL_838:
  webrtc::metrics::HistogramAdd(v423, 8 * (v422.i64[0] + v2 + v422.i64[1]) / v24 / 0x3E8);
LABEL_844:
  if (v7)
  {
    v426 = atomic_load(&qword_253EA5778);
    if (v426)
    {
      webrtc::metrics::HistogramAdd(v426, 8 * (*(_QWORD *)(v7 + 16) + *(_QWORD *)(v7 + 8) + *(_QWORD *)(v7 + 24)) / v24 / 0x3E8);
    }
    else
    {
      while (!__ldaxr(&qword_253EA5778))
      {
        if (!__stlxr(0, &qword_253EA5778))
          goto LABEL_850;
      }
      __clrex();
    }
  }
LABEL_850:
  v428 = atomic_load(&qword_253EA5780);
  if (v428)
  {
    webrtc::metrics::HistogramAdd(v428, (60 * *(_DWORD *)(v10 + 408)) / v24);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5780))
    {
      if (!__stlxr(0, &qword_253EA5780))
        goto LABEL_855;
    }
    __clrex();
  }
LABEL_855:
  v430 = atomic_load(&qword_253EA5788);
  if (v430)
  {
    webrtc::metrics::HistogramAdd(v430, (60 * *(_DWORD *)(v10 + 412)) / v24);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5788))
    {
      if (!__stlxr(0, &qword_253EA5788))
        goto LABEL_860;
    }
    __clrex();
  }
LABEL_860:
  v432 = atomic_load(&qword_253EA5790);
  if (v432)
  {
    webrtc::metrics::HistogramAdd(v432, (60 * *(_DWORD *)(v10 + 416)) / v24);
  }
  else
  {
    while (!__ldaxr(&qword_253EA5790))
    {
      if (!__stlxr(0, &qword_253EA5790))
        goto LABEL_865;
    }
    __clrex();
  }
LABEL_865:
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log("\r\t", v434, v435, v436, v437, v438, v439, v440, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/receive_statistics_proxy.cc");
  webrtc::internal::VideoQualityObserver::UpdateHistograms(*(int64x2_t **)(v10 + 1208), *(_BYTE *)(v10 + 1448) & 1);
  std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::destroy((uint64_t)&v472, v473[0]);
}

void *webrtc::internal::ReceiveStatisticsProxy::GetStats@<X0>(webrtc::internal::ReceiveStatisticsProxy *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  char v16;
  int v17;
  int v18;
  char v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  char *v43;
  unint64_t v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  char v48;
  std::string *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  std::string *v59;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[31];

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  v5 = v4 / 0x3E8uLL;
  if (v4 % 0x3E8uLL > 0x1F3)
    ++v5;
  if (-v4 % 0x3E8uLL <= 0x1F4)
    v6 = 0;
  else
    v6 = -1;
  v7 = v6 - -v4 / 0x3E8uLL;
  if (v4 < 0)
    v8 = v7;
  else
    v8 = v5;
  for (i = *((_QWORD *)this + 180); i; i = *((_QWORD *)this + 180))
  {
    v10 = (uint64_t *)*((_QWORD *)this + 178);
    if (v10[4] >= v8 - 1000)
      break;
    v11 = (_QWORD *)v10[1];
    v12 = (_QWORD *)*((_QWORD *)this + 178);
    if (v11)
    {
      do
      {
        v13 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        v13 = (_QWORD *)v12[2];
        v14 = *v13 == (_QWORD)v12;
        v12 = v13;
      }
      while (!v14);
    }
    *((_QWORD *)this + 178) = v13;
    *((_QWORD *)this + 180) = i - 1;
    std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 179), v10);
    operator delete(v10);
  }
  *((_DWORD *)this + 10) = (1000 * i + 500) / 0x3E8uLL;
  v15 = webrtc::RateStatistics::Rate((webrtc::internal::ReceiveStatisticsProxy *)((char *)this + 792), v8);
  if (v16)
    v17 = v15;
  else
    v17 = 0;
  *((_DWORD *)this + 12) = v17;
  v18 = webrtc::RateStatistics::Rate((webrtc::internal::ReceiveStatisticsProxy *)((char *)this + 696), v8);
  if (v19)
    v20 = v18;
  else
    v20 = 0;
  *((_DWORD *)this + 11) = v20;
  if (*((_BYTE *)this + 1496))
  {
    v21 = *((_QWORD *)this + 154);
    v22 = *((_QWORD *)this + 157);
    v23 = (char *)(v21 + 8 * (v22 >> 8));
    if (*((_QWORD *)this + 155) == v21)
    {
      v27 = 0;
      v25 = 0;
      v28 = (char *)(v21 + 8 * (v22 >> 8));
    }
    else
    {
      v24 = *(char **)v23;
      v25 = *(_QWORD *)v23 + 16 * v22;
      v26 = *(_QWORD *)(v21 + (((*((_QWORD *)this + 158) + v22) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((_BYTE *)this + 1264) + v22);
      v27 = (char *)v25;
      v28 = v23;
      if (v25 != v26)
      {
        v27 = (char *)(*(_QWORD *)v23 + 16 * v22);
        v28 = v23;
        while (*(_QWORD *)v27 < *((_QWORD *)this + 186) - *((_QWORD *)this + 152))
        {
          v27 += 16;
          if (v27 - v24 == 4096)
          {
            v29 = (char *)*((_QWORD *)v28 + 1);
            v28 += 8;
            v24 = v29;
            v27 = v29;
          }
          if (v27 == (char *)v26)
          {
            std::deque<std::pair<long long,int>>::erase((_QWORD *)this + 153, v23, v25, v28, v26);
            v30 = *((_QWORD *)this + 158);
            if (v30)
              goto LABEL_36;
            goto LABEL_37;
          }
        }
      }
    }
    std::deque<std::pair<long long,int>>::erase((_QWORD *)this + 153, v23, v25, v28, (uint64_t)v27);
    v30 = *((_QWORD *)this + 158);
    if (v30)
LABEL_36:
      v30 = *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 154)
                                        + ((*((_QWORD *)this + 157) >> 5) & 0x7FFFFFFFFFFFFF8))
                            + 16 * *((_QWORD *)this + 157)
                            + 8) | 0x100000000;
LABEL_37:
    if ((v30 & 0x100000000) != 0)
      v30 = (int)v30;
    else
      v30 = -1;
  }
  else
  {
    v30 = -1;
  }
  *((_QWORD *)this + 20) = v30;
  v31 = *((_QWORD *)this + 151);
  v32 = *(_QWORD *)(v31 + 104);
  *((_DWORD *)this + 66) = v32;
  v33 = *(_QWORD *)(v31 + 136);
  *((_DWORD *)this + 67) = v33;
  if (v32 < 1)
  {
    *((_DWORD *)this + 68) = 0;
    if (v33 >= 1)
      goto LABEL_42;
  }
  else
  {
    *((_DWORD *)this + 68) = *(_DWORD *)(v31 + 96);
    if (v33 >= 1)
    {
LABEL_42:
      v34 = *(_DWORD *)(v31 + 128);
      goto LABEL_45;
    }
  }
  v34 = 0;
LABEL_45:
  *((_DWORD *)this + 69) = v34;
  *((double *)this + 26) = (double)(*(_DWORD *)v31 - *(_DWORD *)(v31 + 16)) / 1000.0;
  *((_QWORD *)this + 27) = *(_QWORD *)(v31 + 88);
  *((_BYTE *)this + 280) = *((_BYTE *)this + 1448);
  v35 = *((_QWORD *)this + 192);
  v36 = *((_QWORD *)this + 195);
  v37 = (_QWORD *)(v35 + 8 * (v36 / 0x22));
  if (*((_QWORD *)this + 193) == v35)
  {
    v41 = 0;
    v39 = 0;
    v42 = (_QWORD *)(v35 + 8 * (v36 / 0x22));
  }
  else
  {
    v38 = *(char **)(v35 + 8 * (v36 / 0x22));
    v39 = (unint64_t)&v38[120 * (v36 % 0x22)];
    v40 = *(_QWORD *)(v35 + 8 * ((*((_QWORD *)this + 196) + v36) / 0x22))
        + 120 * ((*((_QWORD *)this + 196) + v36) % 0x22);
    v41 = (char *)v39;
    v42 = v37;
    if (v39 != v40)
    {
      v41 = &v38[120 * (v36 % 0x22)];
      v42 = v37;
      while (*(_QWORD *)v41 < v8 - *((_QWORD *)this + 190))
      {
        v41 += 120;
        if (v41 - v38 == 4080)
        {
          v43 = (char *)v42[1];
          ++v42;
          v38 = v43;
          v41 = v43;
        }
        if (v41 == (char *)v40)
        {
          std::deque<std::pair<long long,webrtc::TimingFrameInfo>>::erase((_QWORD *)this + 191, v37, v39, v42, v40);
          v44 = *((_QWORD *)this + 196);
          if (v44)
            goto LABEL_54;
          goto LABEL_56;
        }
      }
    }
  }
  std::deque<std::pair<long long,webrtc::TimingFrameInfo>>::erase((_QWORD *)this + 191, v37, v39, v42, (uint64_t)v41);
  v44 = *((_QWORD *)this + 196);
  if (v44)
  {
LABEL_54:
    v44 = *(_QWORD *)(*((_QWORD *)this + 192) + 8 * (*((_QWORD *)this + 195) / 0x22uLL))
        + 120 * (*((_QWORD *)this + 195) % 0x22uLL);
    v45 = *(_BYTE *)(v44 + 8);
    v65 = *(_OWORD *)(v44 + 73);
    *(_OWORD *)v66 = *(_OWORD *)(v44 + 89);
    *(_OWORD *)&v66[15] = *(_OWORD *)(v44 + 104);
    v61 = *(_OWORD *)(v44 + 9);
    v62 = *(_OWORD *)(v44 + 25);
    v63 = *(_OWORD *)(v44 + 41);
    v64 = *(_OWORD *)(v44 + 57);
    LOBYTE(v44) = 1;
  }
  else
  {
LABEL_56:
    v45 = 0;
  }
  *((_BYTE *)this + 512) = v45;
  *((_OWORD *)this + 38) = *(_OWORD *)&v66[15];
  *(_OWORD *)((char *)this + 577) = v65;
  *(_OWORD *)((char *)this + 593) = *(_OWORD *)v66;
  *(_OWORD *)((char *)this + 513) = v61;
  *(_OWORD *)((char *)this + 529) = v62;
  *(_OWORD *)((char *)this + 545) = v63;
  *(_OWORD *)((char *)this + 561) = v64;
  *((_BYTE *)this + 624) = v44;
  if (*((_BYTE *)this + 1592) && *((_BYTE *)this + 1608))
  {
    v46 = (*((_QWORD *)this + 198) + v8 - *((_QWORD *)this + 200)) & 0xFFFFFFFFFFFFFF00;
    v47 = (*((_BYTE *)this + 1584) + v8 - *((_BYTE *)this + 1600));
    v48 = 1;
  }
  else
  {
    v47 = 0;
    v48 = 0;
    v46 = 0;
  }
  *((_QWORD *)this + 36) = v46 | v47;
  *((_BYTE *)this + 296) = v48;
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 40);
  *(_BYTE *)(a2 + 16) = 0;
  v49 = (std::string *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*((_BYTE *)this + 80))
  {
    if (*((char *)this + 79) < 0)
    {
      std::string::__init_copy_ctor_external(v49, *((const std::string::value_type **)this + 7), *((_QWORD *)this + 8));
    }
    else
    {
      *(_OWORD *)&v49->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
      *(_QWORD *)(a2 + 32) = *((_QWORD *)this + 9);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  v50 = *(_OWORD *)((char *)this + 248);
  v51 = *(_OWORD *)((char *)this + 200);
  *(_OWORD *)(a2 + 144) = *(_OWORD *)((char *)this + 184);
  *(_OWORD *)(a2 + 160) = v51;
  v52 = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)(a2 + 176) = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(a2 + 192) = v52;
  v53 = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)(a2 + 96) = v53;
  v54 = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)(a2 + 128) = v54;
  v55 = *(_OWORD *)((char *)this + 104);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)((char *)this + 88);
  *(_OWORD *)(a2 + 64) = v55;
  v56 = *(_OWORD *)((char *)this + 264);
  v57 = *(_OWORD *)((char *)this + 280);
  *(_OWORD *)(a2 + 208) = v50;
  *(_OWORD *)(a2 + 224) = v56;
  v58 = *(_OWORD *)((char *)this + 296);
  *(_OWORD *)(a2 + 240) = v57;
  *(_OWORD *)(a2 + 256) = v58;
  v59 = (std::string *)(a2 + 272);
  if (*((char *)this + 335) < 0)
  {
    std::string::__init_copy_ctor_external(v59, *((const std::string::value_type **)this + 39), *((_QWORD *)this + 40));
  }
  else
  {
    *(_OWORD *)&v59->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 312);
    *(_QWORD *)(a2 + 288) = *((_QWORD *)this + 41);
  }
  return memcpy((void *)(a2 + 296), (char *)this + 336, 0x160uLL);
}

void webrtc::internal::ReceiveStatisticsProxy::OnDecoderInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  std::string __p;
  char v11;
  char v12;
  _QWORD v13[2];
  uint64_t (*v14)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v15)(uint64_t);

  v3 = *(_QWORD *)(a1 + 1616);
  v4 = *(unsigned int **)(a1 + 1624);
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v9 = a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v11 = *(_BYTE *)(a2 + 24);
  v6 = operator new();
  *(_QWORD *)v6 = v9;
  *(std::string *)(v6 + 8) = __p;
  memset(&__p, 0, sizeof(__p));
  *(_BYTE *)(v6 + 32) = v11;
  v7 = (_QWORD *)operator new();
  *v7 = v4;
  v7[1] = v6;
  v7[3] = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::internal::ReceiveStatisticsProxy::OnDecoderInfo(webrtc::VideoDecoder::DecoderInfo const&)::$_1>;
  v7[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::OnDecoderInfo(webrtc::VideoDecoder::DecoderInfo const&)::$_1 &&>;
  v13[0] = v7;
  v14 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v15 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v13, &v12, &v8);
  v14(1, v13, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

_QWORD *webrtc::internal::ReceiveStatisticsProxy::OnDecodableFrame(_QWORD *this, TimeDelta a2, TimeDelta a3, TimeDelta a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = 0x7FFFFFFFFFFFFFFFLL;
  v5 = 0x8000000000000000;
  v6 = this[15];
  v7 = this[16];
  v8 = a2.var0 == 0x8000000000000000 || v6 == 0x8000000000000000;
  v9 = v6 + a2.var0;
  if (v8)
    v9 = 0x8000000000000000;
  if (v6 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  v12 = a3.var0 == 0x8000000000000000 || v7 == 0x8000000000000000;
  v13 = v7 + a3.var0;
  if (v12)
    v13 = 0x8000000000000000;
  if (v7 == 0x7FFFFFFFFFFFFFFFLL || a3.var0 == 0x7FFFFFFFFFFFFFFFLL)
    v15 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v15 = v13;
  this[15] = v11;
  this[16] = v15;
  v16 = this[18];
  if (a4.var0 != 0x8000000000000000 && v16 != 0x8000000000000000)
    v5 = v16 + a4.var0;
  if (a4.var0 == 0x7FFFFFFFFFFFFFFFLL)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  if (v16 != 0x7FFFFFFFFFFFFFFFLL)
    v4 = v5;
  ++this[17];
  this[18] = v4;
  return this;
}

uint64_t webrtc::internal::ReceiveStatisticsProxy::OnFrameBufferTimingsUpdated(uint64_t this, int a2, int a3, int a4, int a5, int a6, int a7)
{
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int v10;
  int64x2_t v11;

  *(_DWORD *)(this + 104) = a2;
  *(_DWORD *)(this + 108) = a3;
  *(_DWORD *)(this + 112) = a4;
  *(_DWORD *)(this + 116) = a5;
  *(_DWORD *)(this + 152) = a6;
  *(_DWORD *)(this + 156) = a7;
  v7 = vdupq_n_s64(1uLL);
  v7.i64[0] = a5;
  *(int64x2_t *)(this + 1080) = vaddq_s64(*(int64x2_t *)(this + 1080), v7);
  if (!*(_BYTE *)(this + 1100) || *(_DWORD *)(this + 1096) < a5)
  {
    *(_DWORD *)(this + 1096) = a5;
    *(_BYTE *)(this + 1100) = 1;
  }
  if (!*(_BYTE *)(this + 1108) || *(_DWORD *)(this + 1104) > a5)
  {
    *(_DWORD *)(this + 1104) = a5;
    *(_BYTE *)(this + 1108) = 1;
  }
  v8 = vdupq_n_s64(1uLL);
  v8.i64[0] = a4;
  *(int64x2_t *)(this + 1112) = vaddq_s64(*(int64x2_t *)(this + 1112), v8);
  if (!*(_BYTE *)(this + 1132) || *(_DWORD *)(this + 1128) < a4)
  {
    *(_DWORD *)(this + 1128) = a4;
    *(_BYTE *)(this + 1132) = 1;
  }
  if (!*(_BYTE *)(this + 1140) || *(_DWORD *)(this + 1136) > a4)
  {
    *(_DWORD *)(this + 1136) = a4;
    *(_BYTE *)(this + 1140) = 1;
  }
  v9 = vdupq_n_s64(1uLL);
  v9.i64[0] = a3;
  *(int64x2_t *)(this + 1144) = vaddq_s64(*(int64x2_t *)(this + 1144), v9);
  if (!*(_BYTE *)(this + 1164) || *(_DWORD *)(this + 1160) < a3)
  {
    *(_DWORD *)(this + 1160) = a3;
    *(_BYTE *)(this + 1164) = 1;
  }
  if (!*(_BYTE *)(this + 1172) || *(_DWORD *)(this + 1168) > a3)
  {
    *(_DWORD *)(this + 1168) = a3;
    *(_BYTE *)(this + 1172) = 1;
  }
  v10 = *(_QWORD *)(this + 1416) / 2 + a4;
  v11 = vdupq_n_s64(1uLL);
  v11.i64[0] = v10;
  *(int64x2_t *)(this + 1176) = vaddq_s64(*(int64x2_t *)(this + 1176), v11);
  if (!*(_BYTE *)(this + 1196) || *(_DWORD *)(this + 1192) < v10)
  {
    *(_DWORD *)(this + 1192) = v10;
    *(_BYTE *)(this + 1196) = 1;
  }
  if (!*(_BYTE *)(this + 1204) || *(_DWORD *)(this + 1200) > v10)
  {
    *(_DWORD *)(this + 1200) = v10;
    *(_BYTE *)(this + 1204) = 1;
  }
  return this;
}

void webrtc::internal::ReceiveStatisticsProxy::OnTimingFrameInfoUpdated(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  void *v42;
  void *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  void *v52;
  void *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  int64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  int64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  int64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  __int128 *v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  unint64_t v106;
  uint64_t v107;
  __int128 *v108;
  _OWORD *v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  int64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  __int128 *v126;
  _OWORD *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  int64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  __int128 *v143;
  _OWORD *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  unint64_t v148;
  int64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;

  if (*((unsigned __int8 *)a2 + 104) != 255)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    v5 = v4 / 0x3E8uLL;
    if (v4 % 0x3E8uLL > 0x1F3)
      ++v5;
    if (-v4 % 0x3E8uLL <= 0x1F4)
      v6 = 0;
    else
      v6 = -1;
    if (v4 < 0)
      v7 = v6 - -v4 / 0x3E8uLL;
    else
      v7 = v5;
    v8 = *(_QWORD *)(a1 + 1536);
    v9 = *(_QWORD *)(a1 + 1560);
    v10 = (_QWORD *)(v8 + 8 * (v9 / 0x22));
    if (*(_QWORD *)(a1 + 1544) == v8)
    {
      v14 = 0;
      v12 = 0;
      v15 = (_QWORD *)(v8 + 8 * (v9 / 0x22));
    }
    else
    {
      v11 = *(char **)(v8 + 8 * (v9 / 0x22));
      v12 = (unint64_t)&v11[120 * (v9 % 0x22)];
      v13 = *(_QWORD *)(v8 + 8 * ((*(_QWORD *)(a1 + 1568) + v9) / 0x22)) + 120 * ((*(_QWORD *)(a1 + 1568) + v9) % 0x22);
      v14 = (char *)v12;
      v15 = v10;
      if (v12 != v13)
      {
        v14 = &v11[120 * (v9 % 0x22)];
        v15 = v10;
        do
        {
          if (*(_QWORD *)v14 >= v7 - *(_QWORD *)(a1 + 1520))
            goto LABEL_18;
          v14 += 120;
          if (v14 - v11 == 4080)
          {
            v16 = (char *)v15[1];
            ++v15;
            v11 = v16;
            v14 = v16;
          }
        }
        while (v14 != (char *)v13);
        v17 = (void **)(a1 + 1528);
        std::deque<std::pair<long long,webrtc::TimingFrameInfo>>::erase((_QWORD *)(a1 + 1528), v10, v12, v15, v13);
        v18 = *(_QWORD *)(a1 + 1568);
        if (v18)
          goto LABEL_21;
        goto LABEL_34;
      }
    }
LABEL_18:
    v17 = (void **)(a1 + 1528);
    std::deque<std::pair<long long,webrtc::TimingFrameInfo>>::erase((_QWORD *)(a1 + 1528), v10, v12, v15, (uint64_t)v14);
    v18 = *(_QWORD *)(a1 + 1568);
    if (!v18)
      goto LABEL_34;
LABEL_21:
    while (1)
    {
      v19 = *(_QWORD *)(a1 + 1560);
      v20 = v18 - 1 + v19;
      v21 = *(_QWORD *)(a1 + 1536);
      v22 = *(_QWORD *)(v21 + 8 * (v20 / 0x22));
      v23 = v20 % 0x22;
      v24 = *((_QWORD *)a2 + 1);
      if (v24 < 0)
        break;
      v25 = *((_QWORD *)a2 + 11) - v24;
      if (v25 == -1)
        break;
      v26 = *(_QWORD *)(v22 + 120 * v23 + 16);
      if (v26 < 0)
      {
        if (v25 < -1)
          break;
      }
      else if (*(_QWORD *)(v22 + 120 * v23 + 96) - v26 > v25)
      {
        break;
      }
      v27 = *(_QWORD *)(a1 + 1544);
      v29 = v27 - v21;
      v28 = v29 == 0;
      v30 = 34 * (v29 >> 3) - 1;
      *(_QWORD *)(a1 + 1568) = v18 - 1;
      if (v28)
        v30 = 0;
      v31 = v30 - (v18 + v19) + 1;
      --v18;
      if (v31 >= 0x44)
      {
        operator delete(*(void **)(v27 - 8));
        *(_QWORD *)(a1 + 1544) -= 8;
        v18 = *(_QWORD *)(a1 + 1568);
      }
      if (!v18)
        goto LABEL_34;
    }
    if (*(_QWORD *)(v22 + 120 * v23) < v7)
    {
LABEL_34:
      v32 = *(char **)(a1 + 1544);
      v33 = *(char **)(a1 + 1536);
      v34 = v32 - v33;
      v35 = (v32 - v33) >> 3;
      v154 = a2[4];
      v155 = a2[5];
      v156 = a2[6];
      v150 = *a2;
      v151 = a2[1];
      v152 = a2[2];
      v153 = a2[3];
      if (v32 == v33)
        v36 = 0;
      else
        v36 = 34 * v35 - 1;
      v37 = *(_QWORD *)(a1 + 1560);
      if (v36 != v37 + v18)
      {
LABEL_48:
        if (v32 != v33)
        {
          v44 = *(_QWORD *)(a1 + 1568) + *(_QWORD *)(a1 + 1560);
          v45 = *(_QWORD *)&v33[8 * (v44 / 0x22)];
          if (v45)
          {
            v46 = v45 + 120 * (v44 % 0x22);
            *(_OWORD *)(v46 + 56) = v153;
            *(_OWORD *)(v46 + 72) = v154;
            *(_OWORD *)(v46 + 88) = v155;
            *(_OWORD *)(v46 + 104) = v156;
            *(_OWORD *)(v46 + 8) = v150;
            *(_OWORD *)(v46 + 24) = v151;
            *(_QWORD *)v46 = v7;
            *(_OWORD *)(v46 + 40) = v152;
            ++*(_QWORD *)(a1 + 1568);
            goto LABEL_51;
          }
        }
        goto LABEL_154;
      }
      v149 = v7;
      if (v37 >= 0x22)
      {
        *(_QWORD *)(a1 + 1560) = v37 - 34;
        v38 = v33 + 8;
        v39 = *(_QWORD *)v33;
        *(_QWORD *)(a1 + 1536) = v33 + 8;
        if (v32 != *(char **)(a1 + 1552))
          goto LABEL_40;
        v59 = (char *)*v17;
        if (v38 > v59)
        {
          v60 = (v38 - v59) >> 3;
          if (v60 >= -1)
            v61 = v60 + 1;
          else
            v61 = v60 + 2;
          v62 = v61 >> 1;
          v63 = -v62;
          v64 = &v38[-8 * v62];
          v65 = v32 - v38;
          if (v32 != v38)
          {
            memmove(&v38[-8 * v62], v38, v32 - v38);
            v32 = *(char **)(a1 + 1536);
          }
          v66 = &v32[8 * v63];
          v32 = &v64[v65];
          *(_QWORD *)(a1 + 1544) = &v64[v65];
          *(_QWORD *)(a1 + 1536) = v66;
          goto LABEL_41;
        }
        v68 = (v32 - v59) >> 2;
        if (v32 == v59)
          v68 = 1;
        if (!(v68 >> 61))
        {
          v69 = v68 >> 2;
          v70 = 8 * v68;
          v71 = (char *)operator new(8 * v68);
          v72 = &v71[8 * v69];
          v73 = v32 - v38;
          v28 = v32 == v38;
          v32 = v72;
          if (v28)
            goto LABEL_139;
          v32 = &v72[v73 & 0xFFFFFFFFFFFFFFF8];
          v74 = v73 - 8;
          if ((unint64_t)(v73 - 8) >= 0x38)
          {
            v123 = &v71[8 * v69];
            v75 = v123;
            if ((unint64_t)(v123 - v38) >= 0x20)
            {
              v124 = (v74 >> 3) + 1;
              v125 = 8 * (v124 & 0x3FFFFFFFFFFFFFFCLL);
              v75 = &v72[v125];
              v38 += v125;
              v126 = (__int128 *)(v33 + 24);
              v127 = v123 + 16;
              v128 = v124 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v129 = *v126;
                *(v127 - 1) = *(v126 - 1);
                *v127 = v129;
                v126 += 2;
                v127 += 2;
                v128 -= 4;
              }
              while (v128);
              if (v124 == (v124 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_139:
                *(_QWORD *)(a1 + 1528) = v71;
                *(_QWORD *)(a1 + 1536) = v72;
                *(_QWORD *)(a1 + 1544) = v32;
                *(_QWORD *)(a1 + 1552) = &v71[v70];
                if (v59)
                {
                  operator delete(v59);
                  v32 = *(char **)(a1 + 1544);
                }
LABEL_40:
                if (v32)
                {
LABEL_41:
                  *(_QWORD *)v32 = v39;
LABEL_46:
                  v32 = (char *)(*(_QWORD *)(a1 + 1544) + 8);
                  *(_QWORD *)(a1 + 1544) = v32;
                  v7 = v149;
LABEL_47:
                  v33 = *(char **)(a1 + 1536);
                  goto LABEL_48;
                }
LABEL_154:
                __break(1u);
                goto LABEL_155;
              }
            }
          }
          else
          {
            v75 = &v71[8 * v69];
          }
          do
          {
            v130 = *(_QWORD *)v38;
            v38 += 8;
            *(_QWORD *)v75 = v130;
            v75 += 8;
          }
          while (v75 != v32);
          goto LABEL_139;
        }
LABEL_155:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      v40 = *(char **)(a1 + 1552);
      v41 = *(char **)(a1 + 1528);
      if (v35 < (unint64_t)((v40 - v41) >> 3))
      {
        v42 = operator new(0xFF0uLL);
        v43 = v42;
        if (v40 != v32)
        {
          if (v32)
          {
            *(_QWORD *)v32 = v42;
            goto LABEL_46;
          }
          goto LABEL_154;
        }
        if (v33 == v41)
        {
          v98 = (v40 - v33) >> 2;
          if (v32 == v33)
            v98 = 1;
          if (v98 >> 61)
            goto LABEL_155;
          v99 = (v98 + 3) >> 2;
          v100 = 8 * v98;
          v101 = (char *)operator new(8 * v98);
          v67 = &v101[8 * v99];
          v102 = v67;
          if (v32 != v33)
          {
            v102 = &v67[8 * v35];
            v103 = &v101[8 * v99];
            v104 = v33;
            if ((unint64_t)(v34 - 8) < 0x38)
              goto LABEL_158;
            v105 = &v101[8 * v99];
            v103 = v105;
            v104 = v33;
            if ((unint64_t)(v105 - v33) < 0x20)
              goto LABEL_158;
            v106 = ((unint64_t)(v34 - 8) >> 3) + 1;
            v107 = 8 * (v106 & 0x3FFFFFFFFFFFFFFCLL);
            v103 = &v67[v107];
            v104 = &v33[v107];
            v108 = (__int128 *)(v33 + 16);
            v109 = v105 + 16;
            v110 = v106 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v111 = *v108;
              *(v109 - 1) = *(v108 - 1);
              *v109 = v111;
              v108 += 2;
              v109 += 2;
              v110 -= 4;
            }
            while (v110);
            if (v106 != (v106 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_158:
              do
              {
                v112 = *(_QWORD *)v104;
                v104 += 8;
                *(_QWORD *)v103 = v112;
                v103 += 8;
              }
              while (v103 != v102);
            }
          }
          *(_QWORD *)(a1 + 1528) = v101;
          *(_QWORD *)(a1 + 1536) = v67;
          *(_QWORD *)(a1 + 1544) = v102;
          *(_QWORD *)(a1 + 1552) = &v101[v100];
          if (v33)
          {
            operator delete(v33);
            v67 = *(char **)(a1 + 1536);
          }
        }
        else
        {
          v67 = v33;
        }
        *((_QWORD *)v67 - 1) = v43;
        v113 = *(char **)(a1 + 1536);
        *(_QWORD *)(a1 + 1536) = v113 - 8;
        v114 = *((_QWORD *)v113 - 1);
        *(_QWORD *)(a1 + 1536) = v113;
        v115 = *(char **)(a1 + 1544);
        v7 = v149;
        if (v115 != *(char **)(a1 + 1552))
          goto LABEL_125;
        v116 = (char *)*v17;
        if (v113 > *v17)
        {
          v117 = (v113 - (_BYTE *)*v17) >> 3;
          if (v117 >= -1)
            v118 = v117 + 1;
          else
            v118 = v117 + 2;
          v119 = v118 >> 1;
          v120 = -v119;
          v121 = &v113[-8 * v119];
          v122 = v115 - v113;
          if (v115 != v113)
          {
            memmove(&v113[-8 * v119], v113, v115 - v113);
            v113 = *(char **)(a1 + 1536);
          }
          v115 = &v121[v122];
          *(_QWORD *)(a1 + 1544) = &v121[v122];
          *(_QWORD *)(a1 + 1536) = &v113[8 * v120];
          goto LABEL_126;
        }
        v131 = (v115 - v116) >> 2;
        if (v115 == v116)
          v131 = 1;
        if (v131 >> 61)
          goto LABEL_155;
        v132 = v131 >> 2;
        v133 = 8 * v131;
        v134 = (char *)operator new(8 * v131);
        v135 = &v134[8 * v132];
        v136 = v115 - v113;
        v28 = v115 == v113;
        v115 = v135;
        if (!v28)
        {
          v115 = &v135[v136 & 0xFFFFFFFFFFFFFFF8];
          v137 = v136 - 8;
          if ((unint64_t)(v136 - 8) < 0x38)
          {
            v138 = &v134[8 * v132];
            do
            {
LABEL_151:
              v147 = *(_QWORD *)v113;
              v113 += 8;
              *(_QWORD *)v138 = v147;
              v138 += 8;
            }
            while (v138 != v115);
            goto LABEL_152;
          }
          v139 = &v134[8 * v132];
          v138 = v139;
          if ((unint64_t)(v139 - v113) < 0x20)
            goto LABEL_151;
          v140 = (v137 >> 3) + 1;
          v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
          v138 = &v135[v141];
          v142 = &v113[v141];
          v143 = (__int128 *)(v113 + 16);
          v144 = v139 + 16;
          v145 = v140 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v146 = *v143;
            *(v144 - 1) = *(v143 - 1);
            *v144 = v146;
            v143 += 2;
            v144 += 2;
            v145 -= 4;
          }
          while (v145);
          v113 = v142;
          if (v140 != (v140 & 0x3FFFFFFFFFFFFFFCLL))
            goto LABEL_151;
        }
LABEL_152:
        *(_QWORD *)(a1 + 1528) = v134;
        *(_QWORD *)(a1 + 1536) = v135;
        *(_QWORD *)(a1 + 1544) = v115;
        *(_QWORD *)(a1 + 1552) = &v134[v133];
        if (v116)
        {
          operator delete(v116);
          v115 = *(char **)(a1 + 1544);
        }
LABEL_125:
        if (!v115)
          goto LABEL_154;
LABEL_126:
        *(_QWORD *)v115 = v114;
        v32 = (char *)(*(_QWORD *)(a1 + 1544) + 8);
        *(_QWORD *)(a1 + 1544) = v32;
        goto LABEL_47;
      }
      if (v40 == v41)
        v47 = 1;
      else
        v47 = (v40 - v41) >> 2;
      if (v47 >> 61)
        goto LABEL_155;
      v48 = 8 * v47;
      v148 = v47;
      v49 = (char *)operator new(8 * v47);
      v50 = &v49[8 * v35];
      v51 = &v49[v48];
      v52 = operator new(0xFF0uLL);
      v53 = v52;
      if (v35 == v148)
      {
        if (v34 < 1)
        {
          v76 = v34 >> 2;
          if (v32 == v33)
            v76 = 1;
          if (v76 >> 61)
            goto LABEL_155;
          v77 = 8 * v76;
          v50 = (char *)operator new(8 * v76);
          operator delete(v49);
          v51 = &v50[v77];
          v32 = *(char **)(a1 + 1544);
          v78 = *(char **)(a1 + 1536);
          v49 = v50;
          *(_QWORD *)v50 = v53;
          v55 = v50 + 8;
          if (v32 != v78)
          {
            while (1)
            {
LABEL_93:
              if (v50 == v49)
              {
                if (v55 >= v51)
                {
                  v83 = (v51 - v50) >> 2;
                  if (v51 == v50)
                    v83 = 1;
                  if (v83 >> 61)
                    goto LABEL_155;
                  v84 = (v83 + 3) >> 2;
                  v85 = 8 * v83;
                  v86 = (char *)operator new(8 * v83);
                  v49 = v86;
                  v79 = &v86[8 * v84];
                  v57 = v79;
                  v87 = v55 - v50;
                  if (v55 != v50)
                  {
                    v57 = &v79[v87 & 0xFFFFFFFFFFFFFFF8];
                    v88 = v87 - 8;
                    v89 = &v86[8 * v84];
                    v90 = v50;
                    if (v88 < 0x38)
                      goto LABEL_159;
                    v89 = &v86[8 * v84];
                    v90 = v50;
                    if ((unint64_t)(v89 - v50) < 0x20)
                      goto LABEL_159;
                    v91 = (v88 >> 3) + 1;
                    v92 = 8 * (v91 & 0x3FFFFFFFFFFFFFFCLL);
                    v89 = &v79[v92];
                    v90 = &v50[v92];
                    v93 = (__int128 *)(v50 + 16);
                    v94 = &v86[8 * v84 + 16];
                    v95 = v91 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v96 = *v93;
                      *((_OWORD *)v94 - 1) = *(v93 - 1);
                      *(_OWORD *)v94 = v96;
                      v93 += 2;
                      v94 += 32;
                      v95 -= 4;
                    }
                    while (v95);
                    if (v91 != (v91 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_159:
                      do
                      {
                        v97 = *(_QWORD *)v90;
                        v90 += 8;
                        *(_QWORD *)v89 = v97;
                        v89 += 8;
                      }
                      while (v89 != v57);
                    }
                  }
                  v51 = &v86[v85];
                  operator delete(v50);
                }
                else
                {
                  v81 = (v51 - v55) >> 3;
                  if (v81 >= -1)
                    v82 = v81 + 1;
                  else
                    v82 = v81 + 2;
                  v57 = &v55[8 * (v82 >> 1)];
                  v79 = &v50[8 * (v82 >> 1)];
                  if (v55 == v50)
                  {
                    v49 = v55;
                  }
                  else
                  {
                    memmove(&v50[8 * (v82 >> 1)], v50, v55 - v50);
                    v49 = v50;
                  }
                }
              }
              else
              {
                v79 = v50;
                v57 = v55;
              }
              v80 = *((_QWORD *)v32 - 1);
              v32 -= 8;
              *((_QWORD *)v79 - 1) = v80;
              v56 = v79 - 8;
              v55 = v57;
              v50 = v56;
              if (v32 == *(char **)(a1 + 1536))
                goto LABEL_69;
            }
          }
LABEL_68:
          v56 = v50;
          v57 = v55;
LABEL_69:
          v58 = *(void **)(a1 + 1528);
          *(_QWORD *)(a1 + 1528) = v49;
          *(_QWORD *)(a1 + 1536) = v56;
          *(_QWORD *)(a1 + 1544) = v57;
          v32 = v57;
          *(_QWORD *)(a1 + 1552) = v51;
          v7 = v149;
          if (v58)
          {
            operator delete(v58);
            v32 = *(char **)(a1 + 1544);
          }
          goto LABEL_47;
        }
        v54 = v35 + 2;
        if (v35 >= -1)
          v54 = v35 + 1;
        v50 -= 8 * (v54 >> 1);
      }
      *(_QWORD *)v50 = v52;
      v55 = v50 + 8;
      if (v32 != v33)
        goto LABEL_93;
      goto LABEL_68;
    }
  }
LABEL_51:
  if (*(_BYTE *)(a1 + 1464))
  {
    if (*(_QWORD *)(a1 + 224) != -1)
      return;
  }
  else
  {
    *(_QWORD *)(a1 + 1456) = *((_QWORD *)a2 + 9);
    *(_BYTE *)(a1 + 1464) = 1;
    if (*(_QWORD *)(a1 + 224) != -1)
      return;
  }
  if (*(_BYTE *)(a1 + 1480))
    *(_QWORD *)(a1 + 224) = *(_QWORD *)(a1 + 1472) - *(_QWORD *)(a1 + 1456);
}

__n128 webrtc::internal::ReceiveStatisticsProxy::RtcpPacketTypesCounterUpdated(uint64_t a1, int a2, __n128 *a3)
{
  void *v6;
  unsigned __int8 v7;
  void *v8;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  _QWORD *v14;
  __n128 result;
  rtc::ThreadManager *v16;
  char v17;
  __n128 v18;
  unsigned __int32 v19;
  char v20;
  _QWORD v21[2];
  uint64_t (*v22)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v23)(uint64_t);

  if (*(_DWORD *)(a1 + 688) == a2)
  {
    v6 = *(void **)(a1 + 1616);
      goto LABEL_12;
    {
      v16 = (rtc::ThreadManager *)operator new();
      rtc::ThreadManager::Instance(void)::thread_manager = (uint64_t)rtc::ThreadManager::ThreadManager(v16);
    }
    v8 = pthread_getspecific(*(_QWORD *)(rtc::ThreadManager::Instance(void)::thread_manager + 88));
    if (v8 && v8 == v6)
    {
LABEL_12:
      result = *a3;
      *(_DWORD *)(a1 + 424) = a3[1].n128_u32[0];
      *(__n128 *)(a1 + 408) = result;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 1616);
      v11 = *(unsigned int **)(a1 + 1624);
      if (v11)
      {
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v18 = *a3;
      v19 = a3[1].n128_u32[0];
      v13 = (char *)operator new(0x20uLL);
      *(_DWORD *)v13 = a2;
      *(__n128 *)(v13 + 4) = v18;
      *((_DWORD *)v13 + 5) = v19;
      *((_QWORD *)v13 + 3) = a1;
      v14 = (_QWORD *)operator new();
      *v14 = v11;
      v14[1] = v13;
      v14[2] = 32;
      v14[3] = absl::internal_any_invocable::RemoteManagerTrivial;
      v14[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::RtcpPacketTypesCounterUpdated(unsigned int,webrtc::RtcpPacketTypeCounter const&)::$_0 &&>;
      v21[0] = v14;
      v22 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
      v23 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
      (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v10 + 8))(v10, v21, &v20, &v17);
      v22(1, v21, v21);
    }
  }
  return result;
}

double `non-virtual thunk to'webrtc::internal::ReceiveStatisticsProxy::RtcpPacketTypesCounterUpdated(uint64_t a1, int a2, __n128 *a3)
{
  double result;

  *(_QWORD *)&result = webrtc::internal::ReceiveStatisticsProxy::RtcpPacketTypesCounterUpdated(a1 - 16, a2, a3).n128_u64[0];
  return result;
}

double webrtc::internal::ReceiveStatisticsProxy::OnCname(uint64_t a1, int a2, __int128 *__src, size_t __len)
{
  __int128 *v7;
  __int128 *v8;
  size_t v9;
  size_t v10;
  void **v11;
  double result;
  __int128 v13;
  unint64_t v14;

  if (*(_DWORD *)(a1 + 688) != a2)
    return result;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_17:
    abort();
  if (__len > 0x16)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v7 = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&v13 + 1) = __len;
    v14 = v10 | 0x8000000000000000;
    *(_QWORD *)&v13 = v7;
    v8 = (__int128 *)((char *)v7 + __len);
    if (v7 > __src)
      goto LABEL_10;
  }
  else
  {
    HIBYTE(v14) = __len;
    v7 = &v13;
    v8 = (__int128 *)((char *)&v13 + __len);
    if (&v13 > __src)
      goto LABEL_10;
  }
  if (v8 > __src)
  {
    __break(1u);
    goto LABEL_17;
  }
LABEL_10:
  if (__len)
    memmove(v7, __src, __len);
  *(_BYTE *)v8 = 0;
  v11 = (void **)(a1 + 312);
  if (*(char *)(a1 + 335) < 0)
    operator delete(*v11);
  result = *(double *)&v13;
  *(_OWORD *)v11 = v13;
  *(_QWORD *)(a1 + 328) = v14;
  return result;
}

double `non-virtual thunk to'webrtc::internal::ReceiveStatisticsProxy::OnCname(uint64_t a1, int a2, __int128 *__src, size_t __len)
{
  __int128 *v7;
  __int128 *v8;
  size_t v9;
  size_t v10;
  void **v11;
  double result;
  __int128 v13;
  unint64_t v14;

  if (*(_DWORD *)(a1 + 680) != a2)
    return result;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_17:
    abort();
  if (__len > 0x16)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v7 = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&v13 + 1) = __len;
    v14 = v10 | 0x8000000000000000;
    *(_QWORD *)&v13 = v7;
    v8 = (__int128 *)((char *)v7 + __len);
    if (v7 > __src)
      goto LABEL_10;
  }
  else
  {
    HIBYTE(v14) = __len;
    v7 = &v13;
    v8 = (__int128 *)((char *)&v13 + __len);
    if (&v13 > __src)
      goto LABEL_10;
  }
  if (v8 > __src)
  {
    __break(1u);
    goto LABEL_17;
  }
LABEL_10:
  if (__len)
    memmove(v7, __src, __len);
  *(_BYTE *)v8 = 0;
  v11 = (void **)(a1 + 304);
  if (*(char *)(a1 + 327) < 0)
    operator delete(*v11);
  result = *(double *)&v13;
  *(_OWORD *)v11 = v13;
  *(_QWORD *)(a1 + 320) = v14;
  return result;
}

uint64_t webrtc::internal::ReceiveStatisticsProxy::OnDecodedFrame(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, char a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v41;
  _QWORD *v42;
  unsigned __int8 v44;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  int v65;
  char v66;
  char v67;
  _QWORD v68[2];
  uint64_t (*v69)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v70)(uint64_t);

  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  v13 = *(_QWORD *)(a2 + 184);
  if (v13)
  {
    v64 = a5;
    v65 = a6;
    v63 = a4;
    if (*(_QWORD *)(v13 + 16) == *(_QWORD *)(v13 + 8))
      goto LABEL_33;
  }
  else
  {
    {
      v57 = operator new();
      *(_QWORD *)(v57 + 8) = 0;
      *(_QWORD *)(v57 + 16) = 0;
      *(_QWORD *)v57 = 0;
      webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v57;
    }
    v64 = a5;
    v65 = a6;
    v63 = a4;
    if (*((_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value + 1) == *(_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value)
    {
LABEL_33:
      v61 = 0;
      v62 = 0;
      v29 = *(_DWORD *)(a2 + 16);
      v30 = *(_QWORD *)(a2 + 24);
      v31 = *(_QWORD *)(a2 + 32);
      v32 = *(_QWORD *)(a2 + 8);
      v60 = a3;
      v33 = v12;
      if (v32)
        goto LABEL_34;
LABEL_31:
      v34 = 0;
      v35 = 0;
      v36 = *(_QWORD *)(a1 + 1616);
      v37 = a1;
      v38 = *(unsigned int **)(a1 + 1624);
      if (!v38)
        goto LABEL_37;
      goto LABEL_36;
    }
  }
  v15 = *(_QWORD *)(a2 + 184);
  if (v15)
  {
    v17 = *(_QWORD *)(v15 + 8);
    v16 = *(_QWORD *)(v15 + 16);
    v18 = v17 + 104;
    if (v17 != v16 && v18 != v16)
      goto LABEL_45;
LABEL_19:
    v23 = v17;
    v18 = v17;
    goto LABEL_20;
  }
  {
    v58 = operator new();
    *(_QWORD *)(v58 + 8) = 0;
    *(_QWORD *)(v58 + 16) = 0;
    *(_QWORD *)v58 = 0;
    webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v58;
  }
  v21 = *(_QWORD *)(a2 + 184);
  v17 = *(_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value;
  if (v21)
  {
    v16 = *(_QWORD *)(v21 + 16);
    v18 = v17 + 104;
    if (v17 == v16 || v18 == v16)
      goto LABEL_19;
  }
  else
  {
    {
      v59 = operator new();
      *(_QWORD *)(v59 + 8) = 0;
      *(_QWORD *)(v59 + 16) = 0;
      *(_QWORD *)v59 = 0;
      webrtc::RtpPacketInfos::empty_entries(void)::value = (_UNKNOWN *)v59;
    }
    v16 = *((_QWORD *)webrtc::RtpPacketInfos::empty_entries(void)::value + 1);
    v18 = v17 + 104;
    if (v17 == v16 || v18 == v16)
      goto LABEL_19;
  }
LABEL_45:
  v46 = *(_QWORD *)(v17 + 144);
  v47 = *(_QWORD *)(v17 + 40);
  v48 = v46 < v47;
  if (v46 >= v47)
    v23 = v17;
  else
    v23 = v18;
  if (v48)
    v18 = v17;
  v49 = v17 + 208;
  if (v17 + 208 != v16)
  {
    while (1)
    {
      v50 = v49 + 104;
      if (v49 + 104 == v16)
        break;
      v51 = *(_QWORD *)(v49 + 144);
      v52 = *(_QWORD *)(v49 + 40);
      v53 = v51 < v52;
      if (v51 >= v52)
        v54 = *(_QWORD *)(v49 + 40);
      else
        v54 = *(_QWORD *)(v49 + 144);
      if (v51 >= v52)
        v55 = v49;
      else
        v55 = v49 + 104;
      if (v51 < v52)
        v51 = *(_QWORD *)(v49 + 40);
      if (v53)
        v50 = v49;
      if (v54 < *(_QWORD *)(v23 + 40))
        v23 = v55;
      if (v51 >= *(_QWORD *)(v18 + 40))
        v18 = v50;
      v49 += 208;
      if (v49 == v16)
        goto LABEL_20;
    }
    v56 = *(_QWORD *)(v49 + 40);
    if (v56 >= *(_QWORD *)(v23 + 40))
    {
      if (v56 >= *(_QWORD *)(v18 + 40))
        v18 = v49;
    }
    else
    {
      v23 = v49;
    }
  }
LABEL_20:
  v24 = *(_QWORD *)(v23 + 40);
  if ((unint64_t)(v24 + 0x7FFFFFFFFFFFFFFFLL) > 0xFFFFFFFFFFFFFFFDLL)
    goto LABEL_33;
  v25 = v12 - v24;
  if (v12 == 0x8000000000000000)
    v25 = 0x8000000000000000;
  if (v12 == 0x7FFFFFFFFFFFFFFFLL)
    v25 = 0x7FFFFFFFFFFFFFFFLL;
  v26 = *(_QWORD *)(v18 + 40);
  v27 = v26 - v24;
  if (v26 == 0x8000000000000000)
    v27 = 0x8000000000000000;
  if (v26 == 0x7FFFFFFFFFFFFFFFLL)
    v28 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v28 = v27;
  v61 = v28;
  v62 = v25;
  v29 = *(_DWORD *)(a2 + 16);
  v30 = *(_QWORD *)(a2 + 24);
  v31 = *(_QWORD *)(a2 + 32);
  v32 = *(_QWORD *)(a2 + 8);
  v60 = a3;
  v33 = v12;
  if (!v32)
    goto LABEL_31;
LABEL_34:
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 40))(v32);
  v39 = *(_QWORD *)(a2 + 8);
  if (v39)
  {
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 48))(v39);
    v36 = *(_QWORD *)(a1 + 1616);
    v37 = a1;
    v38 = *(unsigned int **)(a1 + 1624);
    if (!v38)
      goto LABEL_37;
  }
  else
  {
    v35 = 0;
    v36 = *(_QWORD *)(a1 + 1616);
    v37 = a1;
    v38 = *(unsigned int **)(a1 + 1624);
    if (!v38)
      goto LABEL_37;
  }
  do
LABEL_36:
    v40 = __ldxr(v38);
  while (__stxr(v40 + 1, v38));
LABEL_37:
  v41 = operator new(0x58uLL);
  *(_DWORD *)v41 = v29;
  v41[1] = v31;
  v41[2] = v30;
  *((_DWORD *)v41 + 6) = v34;
  *((_DWORD *)v41 + 7) = v35;
  v41[4] = v33;
  *((_WORD *)v41 + 20) = v60;
  v41[6] = v63;
  v41[7] = v62;
  v41[8] = v61;
  *((_BYTE *)v41 + 72) = v64;
  *((_DWORD *)v41 + 19) = v65;
  v41[10] = v37;
  v42 = (_QWORD *)operator new();
  *v42 = v38;
  v42[1] = v41;
  v42[2] = 88;
  v42[3] = absl::internal_any_invocable::RemoteManagerTrivial;
  v42[4] = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::OnDecodedFrame(webrtc::VideoFrame const&,std::optional<unsigned char>,webrtc::TimeDelta,webrtc::VideoContentType,webrtc::VideoFrameType)::$_1 &&>;
  v68[0] = v42;
  v69 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v70 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v36 + 8))(v36, v68, &v67, &v66);
  return v69(1, v68, v68);
}

uint64_t webrtc::internal::ReceiveStatisticsProxy::OnRenderedFrame(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int64x2_t v28;
  int v29;
  int64x2_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64x2_t v39;

  webrtc::internal::VideoQualityObserver::OnRenderedFrame(*(int64x2_t **)(a1 + 1208), (unsigned int *)a2);
  v4 = std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::__emplace_unique_key_args<webrtc::VideoContentType,std::piecewise_construct_t const&,std::tuple<webrtc::VideoContentType const&>,std::tuple<>>((uint64_t **)(a1 + 1272), *(_BYTE *)(a1 + 1448), (char *)(a1 + 1448));
  v5 = *(_QWORD *)(a2 + 32);
  v6 = v5 / 0x3E8uLL;
  if (v5 % 0x3E8uLL > 0x1F3)
    ++v6;
  if (-v5 % 0x3E8uLL <= 0x1F4)
    v7 = 0;
  else
    v7 = -1;
  if (v5 < 0)
    v8 = v7 - -v5 / 0x3E8uLL;
  else
    v8 = v6;
  webrtc::RateStatistics::Update((webrtc::RateStatistics *)(a1 + 792), 1, v8);
  ++*(_DWORD *)(a1 + 52);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 24);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 888) + 16))(a1 + 888);
  if (*(_QWORD *)(a1 + 936) == -1)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 888) + 16))(a1 + 888);
    *(_QWORD *)(a1 + 944) = v10;
    *(_QWORD *)(a1 + 936) = v10;
    *(_QWORD *)(a1 + 928) = 0;
    **(_QWORD **)(a1 + 912) = 0;
  }
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 904);
  while (1)
  {
    v13 = *(_QWORD *)(a1 + 936);
    v14 = *(_QWORD *)(a1 + 896);
    if (v14 + v13 > v9)
      break;
    *(_QWORD *)(a1 + 936) = v14 + v13;
    v15 = (*(_QWORD *)(a1 + 928) + 1) % (v12 + 1);
    *(_QWORD *)(a1 + 928) = v15;
    v16 = *(_QWORD *)(a1 + 912);
    *(_QWORD *)(v16 + 8 * v15) = 0;
    if (++v11 > v12)
    {
      v14 = *(_QWORD *)(a1 + 896);
      v13 = *(_QWORD *)(a1 + 936);
      goto LABEL_16;
    }
  }
  v16 = *(_QWORD *)(a1 + 912);
  v15 = *(_QWORD *)(a1 + 928);
LABEL_16:
  *(_QWORD *)(a1 + 936) = v13 + (v9 - v13) / v14 * v14;
  ++*(_QWORD *)(v16 + 8 * v15);
  ++*(_QWORD *)(a1 + 920);
  v17 = sqrt((double)(*(_DWORD *)(a2 + 28) * *(_DWORD *)(a2 + 24)));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 952) + 16))(a1 + 952);
  v19 = result;
  if (*(_QWORD *)(a1 + 1000) == -1)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 952) + 16))(a1 + 952);
    *(_QWORD *)(a1 + 1008) = result;
    *(_QWORD *)(a1 + 1000) = result;
    *(_QWORD *)(a1 + 992) = 0;
    **(_QWORD **)(a1 + 976) = 0;
  }
  v20 = 0;
  v21 = (uint64_t)v17;
  v22 = *(_QWORD *)(a1 + 968);
  while (1)
  {
    v23 = *(_QWORD *)(a1 + 1000);
    v24 = *(_QWORD *)(a1 + 960);
    if (v24 + v23 > v19)
      break;
    *(_QWORD *)(a1 + 1000) = v24 + v23;
    v25 = (*(_QWORD *)(a1 + 992) + 1) % (v22 + 1);
    *(_QWORD *)(a1 + 992) = v25;
    v26 = *(_QWORD *)(a1 + 976);
    *(_QWORD *)(v26 + 8 * v25) = 0;
    if (++v20 > v22)
    {
      v24 = *(_QWORD *)(a1 + 960);
      v23 = *(_QWORD *)(a1 + 1000);
      goto LABEL_23;
    }
  }
  v26 = *(_QWORD *)(a1 + 976);
  v25 = *(_QWORD *)(a1 + 992);
LABEL_23:
  *(_QWORD *)(a1 + 1000) = v23 + (v19 - v23) / v24 * v24;
  *(_QWORD *)(v26 + 8 * v25) += v21;
  *(_QWORD *)(a1 + 984) += v21;
  v27 = *(_DWORD *)(a2 + 24);
  v28 = vdupq_n_s64(1uLL);
  v28.i64[0] = v27;
  *(int64x2_t *)(v4 + 120) = vaddq_s64(*(int64x2_t *)(v4 + 120), v28);
  if (!v4[140] || *((_DWORD *)v4 + 34) < v27)
  {
    *((_DWORD *)v4 + 34) = v27;
    v4[140] = 1;
  }
  if (!v4[148] || *((_DWORD *)v4 + 36) > v27)
  {
    *((_DWORD *)v4 + 36) = v27;
    v4[148] = 1;
  }
  v29 = *(_DWORD *)(a2 + 28);
  v30 = vdupq_n_s64(1uLL);
  v30.i64[0] = v29;
  *(int64x2_t *)(v4 + 152) = vaddq_s64(*(int64x2_t *)(v4 + 152), v30);
  if (!v4[172] || *((_DWORD *)v4 + 42) < v29)
  {
    *((_DWORD *)v4 + 42) = v29;
    v4[172] = 1;
  }
  if (!v4[180] || *((_DWORD *)v4 + 44) > v29)
  {
    *((_DWORD *)v4 + 44) = v29;
    v4[180] = 1;
  }
  v31 = *(_QWORD *)(a2 + 32);
  v32 = v31 / 0x3E8uLL;
  if (v31 % 0x3E8uLL > 0x1F3)
    ++v32;
  if (-v31 % 0x3E8uLL <= 0x1F4)
    v33 = 0;
  else
    v33 = -1;
  v34 = v33 - -v31 / 0x3E8uLL;
  if (v31 >= 0)
    v34 = v32;
  v35 = *(_QWORD *)(a2 + 8) / 1000 - v34;
  if (v35 < 0)
  {
    *(_QWORD *)(a1 + 1512) -= v35;
    ++*(_QWORD *)(a1 + 1504);
    if (*(uint64_t *)(a2 + 16) < 1)
      return result;
  }
  else if (*(uint64_t *)(a2 + 16) < 1)
  {
    return result;
  }
  v36 = *(_QWORD *)(a1 + 24);
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v36 + 24))(v36, v37);
  v38 = 1000 * HIDWORD(result) - *(_QWORD *)(a2 + 16) + (uint64_t)((double)result / 4294967.3 + 0.5);
  if (v38 >= 0)
  {
    v39 = vdupq_n_s64(1uLL);
    v39.i64[0] = (int)v38;
    *(int64x2_t *)(v4 + 40) = vaddq_s64(*(int64x2_t *)(v4 + 40), v39);
    if (!v4[60] || *((_DWORD *)v4 + 14) < (int)v38)
    {
      *((_DWORD *)v4 + 14) = v38;
      v4[60] = 1;
    }
    if (!v4[68] || *((_DWORD *)v4 + 16) > (int)v38)
    {
      *((_DWORD *)v4 + 16) = v38;
      v4[68] = 1;
    }
  }
  return result;
}

unint64_t webrtc::internal::ReceiveStatisticsProxy::OnSyncOffsetUpdated(webrtc::internal::ReceiveStatisticsProxy *this, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;
  int v13;
  int v15;

  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 16))(*((_QWORD *)this + 3));
  v9 = v8 / 0x3E8uLL;
  if (v8 % 0x3E8uLL > 0x1F3)
    ++v9;
  if (-v8 % 0x3E8uLL <= 0x1F4)
    v10 = 0;
  else
    v10 = -1;
  if (v8 < 0)
    v9 = v10 - -v8 / 0x3E8uLL;
  if (a3 >= 0)
    LODWORD(v11) = a3;
  else
    v11 = -a3;
  v12 = vdupq_n_s64(1uLL);
  v12.i64[0] = (int)v11;
  *(int64x2_t *)((char *)this + 1016) = vaddq_s64(*(int64x2_t *)((char *)this + 1016), v12);
  if (!*((_BYTE *)this + 1036) || *((_DWORD *)this + 258) < (int)v11)
  {
    *((_DWORD *)this + 258) = v11;
    *((_BYTE *)this + 1036) = 1;
  }
  if (!*((_BYTE *)this + 1044) || *((_DWORD *)this + 260) > (int)v11)
  {
    *((_DWORD *)this + 260) = v11;
    *((_BYTE *)this + 1044) = 1;
  }
  *((_DWORD *)this + 76) = a3;
  *((_QWORD *)this + 198) = a2;
  *((_BYTE *)this + 1592) = 1;
  *((_QWORD *)this + 200) = v9;
  *((_BYTE *)this + 1608) = 1;
  v13 = (int)(fabs(a4 + -90.0) + 0.5);
  if (a4 > 0.0 && a4 < 10000.0)
    v15 = v13;
  else
    v15 = 10000;
  return webrtc::StatsCounter::Add((webrtc::internal::ReceiveStatisticsProxy *)((char *)this + 1296), v15);
}

void webrtc::internal::ReceiveStatisticsProxy::OnCompleteFrame(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4)
{
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;
  unsigned __int8 v26;

  if ((a2 & 1) == 0)
    a4 = *(_BYTE *)(a1 + 1448);
  v26 = a4;
  v7 = std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::__emplace_unique_key_args<webrtc::VideoContentType,std::piecewise_construct_t const&,std::tuple<webrtc::VideoContentType const&>,std::tuple<>>((uint64_t **)(a1 + 1272), a4, (char *)&v26);
  *((_QWORD *)v7 + 14) += a3;
  if (a2)
    ++*((_DWORD *)v7 + 54);
  else
    ++*((_DWORD *)v7 + 55);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
  v9 = v8 / 0x3E8uLL;
  if (v8 % 0x3E8uLL > 0x1F3)
    ++v9;
  if (-v8 % 0x3E8uLL <= 0x1F4)
    v10 = 0;
  else
    v10 = -1;
  if (v8 < 0)
    v11 = v10 - -v8 / 0x3E8uLL;
  else
    v11 = v9;
  v12 = *(uint64_t **)(a1 + 1432);
  if (!v12)
  {
    v13 = (uint64_t **)(a1 + 1432);
    v14 = (uint64_t **)(a1 + 1432);
LABEL_21:
    v16 = (uint64_t *)operator new(0x30uLL);
    v16[4] = v11;
    v16[5] = a3;
    *v16 = 0;
    v16[1] = 0;
    v16[2] = (uint64_t)v14;
    *v13 = v16;
    v17 = **(_QWORD **)(a1 + 1424);
    if (v17)
    {
      *(_QWORD *)(a1 + 1424) = v17;
      v18 = *v13;
    }
    else
    {
      v18 = v16;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1432), v18);
    v19 = *(_QWORD *)(a1 + 1440) + 1;
    *(_QWORD *)(a1 + 1440) = v19;
    if (!v19)
      goto LABEL_36;
LABEL_27:
    v20 = v11 - 1000;
    do
    {
      v21 = *(uint64_t **)(a1 + 1424);
      if (v21[4] >= v20)
        break;
      v22 = (_QWORD *)v21[1];
      v23 = *(_QWORD **)(a1 + 1424);
      if (v22)
      {
        do
        {
          v24 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v24 = (_QWORD *)v23[2];
          v25 = *v24 == (_QWORD)v23;
          v23 = v24;
        }
        while (!v25);
      }
      *(_QWORD *)(a1 + 1424) = v24;
      *(_QWORD *)(a1 + 1440) = v19 - 1;
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 1432), v21);
      operator delete(v21);
      v19 = *(_QWORD *)(a1 + 1440);
    }
    while (v19);
    goto LABEL_36;
  }
  while (1)
  {
    while (1)
    {
      v14 = (uint64_t **)v12;
      v15 = v12[4];
      if (v11 >= v15)
        break;
      v12 = *v14;
      v13 = v14;
      if (!*v14)
        goto LABEL_21;
    }
    if (v15 >= v11)
      break;
    v12 = v14[1];
    if (!v12)
    {
      v13 = v14 + 1;
      goto LABEL_21;
    }
  }
  v19 = *(_QWORD *)(a1 + 1440);
  if (v19)
    goto LABEL_27;
LABEL_36:
  *(_DWORD *)(a1 + 40) = (1000 * v19 + 500) / 0x3E8uLL;
}

uint64_t webrtc::internal::ReceiveStatisticsProxy::OnDroppedFrames(webrtc::internal::ReceiveStatisticsProxy *this, int a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  char v9;
  char v10;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v13)(uint64_t);

  v4 = *((_QWORD *)this + 202);
  v5 = (unsigned int *)*((_QWORD *)this + 203);
  if (v5)
  {
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new();
  *(_QWORD *)v7 = v5;
  *(_DWORD *)(v7 + 8) = a2;
  *(_QWORD *)(v7 + 16) = this;
  *(_QWORD *)(v7 + 24) = absl::internal_any_invocable::LocalManagerTrivial;
  *(_QWORD *)(v7 + 32) = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::OnDroppedFrames::$_0 &&>;
  v11[0] = v7;
  v12 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v13 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v4 + 8))(v4, v11, &v10, &v9);
  return v12(1, v11, v11);
}

void **std::deque<std::pair<long long,webrtc::TimingFrameInfo>>::~deque[abi:sn180100](void **result)
{
  void **v1;
  void **v2;
  void **v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;

  v1 = result;
  v2 = (void **)result[1];
  v3 = (void **)result[2];
  v4 = (char *)v3 - (char *)v2;
  if (v3 == v2)
  {
    v5 = result + 5;
  }
  else
  {
    v5 = result + 5;
    v6 = (unint64_t)result[4];
    v7 = &v2[v6 / 0x22];
    v8 = (unint64_t)*v7;
    v9 = (unint64_t)*v7 + 120 * (v6 % 0x22);
    while ((void *)v9 != (char *)v2[((unint64_t)result[5] + v6) / 0x22]
                        + 120 * (((unint64_t)result[5] + v6) % 0x22))
    {
      if (!v9)
      {
        __break(1u);
        return result;
      }
      v9 += 120;
      if (v9 - v8 == 4080)
      {
        v10 = (unint64_t)v7[1];
        ++v7;
        v8 = v10;
        v9 = v10;
      }
    }
  }
  *v5 = 0;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)v1[2];
      v2 = (void **)((char *)v1[1] + 8);
      v1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v4 >> 3;
  if (v11 == 1)
  {
    v12 = 17;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_15;
    v12 = 34;
  }
  v1[4] = (void *)v12;
LABEL_15:
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = v1[1];
    v14 = v1[2];
    if (v14 != v15)
      v1[2] = &v14[(v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v1)
    operator delete(*v1);
  return v1;
}

void std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::destroy(a1, a2[1]);
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)(a2 + 31), (_QWORD *)a2[32]);
    v4 = (void *)a2[28];
    if (v4)
    {
      a2[29] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

char *std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::__emplace_unique_key_args<webrtc::VideoContentType,std::piecewise_construct_t const&,std::tuple<webrtc::VideoContentType const&>,std::tuple<>>(uint64_t **a1, unsigned __int8 a2, char *a3)
{
  unsigned __int8 *v5;
  uint64_t **v6;
  char *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = (unsigned __int8 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (char *)v5;
        v8 = v5[32];
        if (v8 <= a2)
          break;
        v5 = *(unsigned __int8 **)v7;
        v6 = (uint64_t **)v7;
        if (!*(_QWORD *)v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (char *)(a1 + 1);
LABEL_9:
    v9 = v7;
    v7 = (char *)operator new(0x128uLL);
    v7[32] = *a3;
    v7[60] = 0;
    v7[64] = 0;
    v7[68] = 0;
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    v7[56] = 0;
    v7[92] = 0;
    v7[96] = 0;
    v7[100] = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 10) = 0;
    v7[88] = 0;
    v7[140] = 0;
    v7[144] = 0;
    v7[148] = 0;
    v7[172] = 0;
    v7[176] = 0;
    v7[180] = 0;
    *((_QWORD *)v7 + 19) = 0;
    *((_QWORD *)v7 + 20) = 0;
    v7[168] = 0;
    v7[204] = 0;
    v7[208] = 0;
    v7[212] = 0;
    *((_QWORD *)v7 + 23) = 0;
    *((_QWORD *)v7 + 24) = 0;
    v7[200] = 0;
    *(_OWORD *)(v7 + 104) = 0u;
    *(_OWORD *)(v7 + 120) = 0u;
    v7[136] = 0;
    *((_QWORD *)v7 + 27) = 0;
    v10 = (char *)operator new(0xFA0uLL);
    *((_QWORD *)v7 + 28) = v10;
    v11 = v10 + 4000;
    *((_QWORD *)v7 + 30) = v10 + 4000;
    bzero(v10, 0xFA0uLL);
    *((_QWORD *)v7 + 29) = v11;
    *((_QWORD *)v7 + 32) = 0;
    *((_QWORD *)v7 + 33) = 0;
    *((_QWORD *)v7 + 31) = v7 + 256;
    *((_DWORD *)v7 + 68) = 500;
    *((_QWORD *)v7 + 35) = 0;
    *((_QWORD *)v7 + 36) = 0;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v9;
    *v6 = (uint64_t *)v7;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v7;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::deque<std::pair<long long,int>>::erase(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  char *v22;
  uint64_t v23;
  unsigned __int8 v24;
  void **v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  void **i;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;

  if (a5 == a3)
  {
    v6 = 0;
    v7 = a1[4];
    v8 = (void **)a1[1];
    v9 = a1[2];
    v10 = &v8[v7 >> 8];
    if ((void **)v9 != v8)
    {
LABEL_3:
      v11 = (uint64_t)*v10 + 16 * v7;
      if (a3 != v11)
        goto LABEL_4;
LABEL_10:
      v14 = 0;
      v15 = v10;
      if (v6 < 1)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v6 = ((a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a2) - ((a3 - *(_QWORD *)a2) >> 4);
    v7 = a1[4];
    v8 = (void **)a1[1];
    v9 = a1[2];
    v10 = &v8[v7 >> 8];
    if ((void **)v9 != v8)
      goto LABEL_3;
  }
  v11 = 0;
  if (!a3)
    goto LABEL_10;
LABEL_4:
  v12 = ((a3 - *(_QWORD *)a2) >> 4) + 32 * (a2 - (char *)v10);
  v13 = v11 - (_QWORD)*v10;
  v14 = v12 - (v13 >> 4);
  if (v12 == v13 >> 4)
  {
    a3 = v11;
    v15 = v10;
    if (v6 < 1)
      return;
  }
  else if (v12 < 1)
  {
    v16 = 255 - v12;
    v15 = &v10[-(v16 >> 8)];
    a3 = (uint64_t)*v15 + 16 * ~(_BYTE)v16;
    if (v6 < 1)
      return;
  }
  else
  {
    v15 = &v10[(unint64_t)v12 >> 8];
    a3 = (uint64_t)*v15 + 16 * v12;
    if (v6 < 1)
      return;
  }
LABEL_15:
  v17 = a1[5];
  v18 = v17 - v6;
  v19 = (uint64_t)*v15;
  v20 = v6 + ((a3 - (uint64_t)*v15) >> 4);
  if (v14 <= (unint64_t)(v17 - v6) >> 1)
  {
    if (v20 < 1)
    {
      v31 = &v15[-((unint64_t)(255 - v20) >> 8)];
      v32 = (uint64_t)*v31;
      v33 = (uint64_t)*v31 + 16 * ~(-1 - v20);
      if (v10 != v15)
      {
LABEL_30:
        if (v19 == a3)
          goto LABEL_107;
        while (1)
        {
          v34 = (v33 - v32) >> 4;
          if ((a3 - v19) >> 4 < v34)
            v34 = (a3 - v19) >> 4;
          if (v34)
          {
            v35 = (_DWORD *)(a3 - 8);
            v36 = -16 * v34;
            do
            {
              *(_QWORD *)(v33 - 16) = *((_QWORD *)v35 - 1);
              v33 -= 16;
              v37 = *v35;
              v35 -= 4;
              *(_DWORD *)(v33 + 8) = v37;
              v36 += 16;
            }
            while (v36);
          }
          a3 -= 16 * v34;
          if (a3 == v19)
            break;
          v38 = (uint64_t)*--v31;
          v32 = v38;
          v33 = v38 + 4096;
        }
        while (1)
        {
          if (v32 + 4096 == v33)
          {
            v70 = (uint64_t)v31[1];
            ++v31;
            v32 = v70;
            v33 = v70;
          }
LABEL_107:
          if (--v15 == v10)
            break;
          v71 = *v15;
          v72 = (uint64_t)*v15 + 4096;
          while (1)
          {
            v73 = (v33 - v32) >> 4;
            if ((v72 - (uint64_t)v71) >> 4 < v73)
              v73 = (v72 - (uint64_t)v71) >> 4;
            if (v73)
            {
              v74 = (_DWORD *)(v72 - 8);
              v75 = -16 * v73;
              do
              {
                *(_QWORD *)(v33 - 16) = *((_QWORD *)v74 - 1);
                v33 -= 16;
                v76 = *v74;
                v74 -= 4;
                *(_DWORD *)(v33 + 8) = v76;
                v75 += 16;
              }
              while (v75);
            }
            v72 -= 16 * v73;
            if ((void *)v72 == v71)
              break;
            v77 = (uint64_t)*--v31;
            v32 = v77;
            v33 = v77 + 4096;
          }
        }
        v78 = (uint64_t)*v10 + 4096;
        if (v78 == v11)
          goto LABEL_130;
        v79 = (char *)*v31;
        while (1)
        {
          v80 = (v33 - (uint64_t)v79) >> 4;
          if ((v78 - v11) >> 4 < v80)
            v80 = (v78 - v11) >> 4;
          if (v80)
          {
            v81 = (_DWORD *)(v78 - 8);
            v82 = -16 * v80;
            do
            {
              *(_QWORD *)(v33 - 16) = *((_QWORD *)v81 - 1);
              v33 -= 16;
              v83 = *v81;
              v81 -= 4;
              *(_DWORD *)(v33 + 8) = v83;
              v82 += 16;
            }
            while (v82);
          }
          v78 -= 16 * v80;
          if (v78 == v11)
            break;
          v84 = (char *)*--v31;
          v79 = v84;
          v33 = (uint64_t)(v84 + 4096);
        }
        if (v79 + 4096 != (char *)v33)
          goto LABEL_130;
        goto LABEL_126;
      }
    }
    else
    {
      v31 = &v15[(unint64_t)v20 >> 8];
      v32 = (uint64_t)*v31;
      v33 = (uint64_t)*v31 + 16 * v20;
      if (v10 != v15)
        goto LABEL_30;
    }
    if (a3 == v11)
      goto LABEL_130;
    while (1)
    {
      v59 = (v33 - v32) >> 4;
      if ((a3 - v11) >> 4 < v59)
        v59 = (a3 - v11) >> 4;
      if (v59)
      {
        v60 = (_DWORD *)(a3 - 8);
        v61 = -16 * v59;
        do
        {
          *(_QWORD *)(v33 - 16) = *((_QWORD *)v60 - 1);
          v33 -= 16;
          v62 = *v60;
          v60 -= 4;
          *(_DWORD *)(v33 + 8) = v62;
          v61 += 16;
        }
        while (v61);
      }
      a3 -= 16 * v59;
      if (a3 == v11)
        break;
      v63 = (uint64_t)*--v31;
      v32 = v63;
      v33 = v63 + 4096;
    }
    if (v32 + 4096 != v33)
    {
LABEL_130:
      while (v11 != v33)
      {
        if (!v11)
          goto LABEL_134;
        v11 += 16;
        if (v11 - (_QWORD)*v10 == 4096)
        {
          v85 = (uint64_t)v10[1];
          ++v10;
          v11 = v85;
        }
      }
      v86 = v7 + v6;
      a1[4] = v86;
      a1[5] = v18;
      if (v86 >= 0x200)
      {
        do
        {
          operator delete(*v8);
          v8 = (void **)(a1[1] + 8);
          a1[1] = v8;
          v87 = a1[4] - 256;
          a1[4] = v87;
        }
        while (v87 >= 0x200);
      }
      return;
    }
LABEL_126:
    v33 = (uint64_t)v31[1];
    goto LABEL_130;
  }
  if (v20 < 1)
  {
    v21 = &v15[-((unint64_t)(255 - v20) >> 8)];
    v22 = (char *)*v21;
    v23 = (uint64_t)*v21 + 16 * ~(-1 - v20);
    v24 = v17 + v7;
    v25 = &v8[(v17 + v7) >> 8];
    if ((void **)v9 != v8)
    {
LABEL_18:
      v26 = (uint64_t)*v25 + 16 * v24;
      if (v21 != v25)
        goto LABEL_19;
LABEL_67:
      if (v23 == v26)
        goto LABEL_87;
      while (1)
      {
        v55 = v19 + 4096;
        v56 = (v55 - a3) >> 4;
        if ((v26 - v23) >> 4 < v56)
          v56 = (v26 - v23) >> 4;
        if (v56)
        {
          v57 = v23 + 16 * v56;
          do
          {
            *(_QWORD *)a3 = *(_QWORD *)v23;
            *(_DWORD *)(a3 + 8) = *(_DWORD *)(v23 + 8);
            a3 += 16;
            v23 += 16;
          }
          while (v23 != v57);
          v23 = v57;
        }
        if (v23 == v26)
          break;
        v58 = (uint64_t)v15[1];
        ++v15;
        v19 = v58;
        a3 = v58;
      }
      if (v55 != a3)
        goto LABEL_87;
      goto LABEL_86;
    }
  }
  else
  {
    v21 = &v15[(unint64_t)v20 >> 8];
    v22 = (char *)*v21;
    v23 = (uint64_t)*v21 + 16 * v20;
    v24 = v17 + v7;
    v25 = &v8[(v17 + v7) >> 8];
    if ((void **)v9 != v8)
      goto LABEL_18;
  }
  v26 = 0;
  if (v21 == v25)
    goto LABEL_67;
LABEL_19:
  v27 = v22 + 4096;
  if (v22 + 4096 != (char *)v23)
  {
    while (1)
    {
      v28 = (v19 + 4096 - a3) >> 4;
      if ((uint64_t)&v27[-v23] >> 4 < v28)
        v28 = (uint64_t)&v27[-v23] >> 4;
      if (v28)
      {
        v29 = v23 + 16 * v28;
        do
        {
          *(_QWORD *)a3 = *(_QWORD *)v23;
          *(_DWORD *)(a3 + 8) = *(_DWORD *)(v23 + 8);
          a3 += 16;
          v23 += 16;
        }
        while (v23 != v29);
        v23 = v29;
      }
      if ((char *)v23 == v27)
        break;
      v30 = (uint64_t)v15[1];
      ++v15;
      v19 = v30;
      a3 = v30;
    }
    if (v19 + 4096 == a3)
    {
      v39 = (uint64_t)v15[1];
      ++v15;
      v19 = v39;
      a3 = v39;
    }
  }
  for (i = v21 + 1; i != v25; ++i)
  {
    while (1)
    {
      v41 = 0;
      v42 = *i;
      while (1)
      {
        v43 = (uint64_t)v42 + 16 * v41;
        v44 = (4096 - 16 * v41) >> 4;
        if (v44 >= (v19 + 4096 - a3) >> 4)
          v44 = (v19 + 4096 - a3) >> 4;
        if (v44)
        {
          v45 = v43 + 16 * v44;
          v46 = (uint64_t)v42 + 16 * v41;
          do
          {
            *(_QWORD *)a3 = *(_QWORD *)v46;
            *(_DWORD *)(a3 + 8) = *(_DWORD *)(v46 + 8);
            a3 += 16;
            v46 += 16;
          }
          while (v46 != v45);
          v41 += (v45 - v43) >> 4;
          if (v41 == 256)
            break;
        }
        v47 = (uint64_t)v15[1];
        ++v15;
        v19 = v47;
        a3 = v47;
      }
      if (v19 + 4096 == a3)
        break;
      if (++i == v25)
        goto LABEL_53;
    }
    v48 = (uint64_t)v15[1];
    ++v15;
    v19 = v48;
    a3 = v48;
  }
LABEL_53:
  v49 = *v25;
  if (*v25 == (void *)v26)
    goto LABEL_87;
  v50 = (uint64_t)*v15;
  while (1)
  {
    v51 = v50 + 4096;
    v52 = (v51 - a3) >> 4;
    if ((v26 - (uint64_t)v49) >> 4 < v52)
      v52 = (v26 - (uint64_t)v49) >> 4;
    if (v52)
    {
      v53 = &v49[4 * v52];
      do
      {
        *(_QWORD *)a3 = *(_QWORD *)v49;
        *(_DWORD *)(a3 + 8) = v49[2];
        a3 += 16;
        v49 += 4;
      }
      while (v49 != v53);
      v49 = v53;
    }
    if (v49 == (_DWORD *)v26)
      break;
    v54 = (uint64_t)v15[1];
    ++v15;
    v50 = v54;
    a3 = v54;
  }
  if (v51 != a3)
    goto LABEL_87;
LABEL_86:
  v64 = (uint64_t)v15[1];
  ++v15;
  a3 = v64;
LABEL_87:
  if ((void **)v9 != v8)
  {
    v65 = (uint64_t)*v25 + 16 * v24;
    if (v65 != a3)
      goto LABEL_100;
    goto LABEL_91;
  }
  v65 = 0;
  if (!a3)
  {
LABEL_91:
    a1[5] = v18;
    if ((void **)v9 == v8)
      v66 = 0;
    else
      v66 = 32 * (v9 - (_QWORD)v8) - 1;
    if (v66 - (v7 + v18) >= 0x200)
    {
      do
      {
        operator delete(*(void **)(v9 - 8));
        v67 = a1[1];
        v9 = a1[2] - 8;
        v68 = 32 * (v9 - v67) - 1;
        a1[2] = v9;
        if (v9 == v67)
          v68 = 0;
      }
      while ((unint64_t)(v68 - (a1[5] + a1[4])) > 0x1FF);
    }
    return;
  }
LABEL_100:
  while (a3)
  {
    a3 += 16;
    if (a3 - (_QWORD)*v15 == 4096)
    {
      v69 = (uint64_t)v15[1];
      ++v15;
      a3 = v69;
    }
    if (a3 == v65)
      goto LABEL_91;
  }
LABEL_134:
  __break(1u);
}

void std::deque<std::pair<long long,webrtc::TimingFrameInfo>>::erase(_QWORD *a1, _QWORD *a2, unint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *i;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *j;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  unint64_t v96;
  unint64_t v97;
  int64_t v98;
  unint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  void **v110;
  unint64_t v111;
  int64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 34 * (a4 - a2) - 0x1111111111111111 * ((a5 - *a4) >> 3) + 0x1111111111111111 * ((uint64_t)(a3 - *a2) >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = a1[2];
  v10 = (uint64_t *)(v8 + 8 * (v7 / 0x22));
  if (v9 != v8)
  {
    v11 = *v10 + 120 * (v7 % 0x22);
    if (a3 != v11)
      goto LABEL_6;
LABEL_11:
    v12 = 0;
    v14 = (uint64_t *)(v8 + 8 * (v7 / 0x22));
    if (v6 < 1)
      return;
    goto LABEL_16;
  }
  v11 = 0;
  if (!a3)
    goto LABEL_11;
LABEL_6:
  v12 = 34 * (a2 - v10)
      - 0x1111111111111111 * ((uint64_t)(a3 - *a2) >> 3)
      + 0x1111111111111111 * ((uint64_t)(v11 - *v10) >> 3);
  if (v12)
  {
    v13 = 34 * (a2 - v10) - 0x1111111111111111 * ((uint64_t)(a3 - *a2) >> 3);
    if (v13 < 1)
    {
      v15 = 33 - v13;
      v14 = &v10[-(v15 / 0x22)];
      a3 = *v14 + 120 * (34 * (v15 / 0x22) - v15) + 3960;
      if (v6 < 1)
        return;
    }
    else
    {
      v14 = &v10[v13 / 0x22uLL];
      a3 = *v14 + 120 * (v13 % 0x22uLL);
      if (v6 < 1)
        return;
    }
  }
  else
  {
    a3 = v11;
    v14 = (uint64_t *)(v8 + 8 * (v7 / 0x22));
    if (v6 < 1)
      return;
  }
LABEL_16:
  v16 = a1[5];
  v17 = *v14;
  v18 = v6 - 0x1111111111111111 * ((uint64_t)(a3 - *v14) >> 3);
  if (v12 <= (unint64_t)(v16 - v6) >> 1)
  {
    if (v18 < 1)
    {
      v97 = (33 - v18) / 0x22uLL;
      v22 = &v14[-v97];
      v23 = *v22;
      v24 = *v22 + 120 * (v18 - 33 + 34 * v97) + 3960;
      if (v10 != v14)
        goto LABEL_21;
    }
    else
    {
      v22 = &v14[v18 / 0x22uLL];
      v23 = *v22;
      v24 = *v22 + 120 * (v18 % 0x22uLL);
      if (v10 != v14)
      {
LABEL_21:
        if (v17 != a3)
        {
          while (1)
          {
            v25 = 0xEEEEEEEEEEEEEEEFLL * ((v24 - v23) >> 3);
            if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a3 - v17) >> 3)) < v25)
              v25 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a3 - v17) >> 3);
            if (v25)
            {
              v26 = a3 - 120;
              v27 = -120 * v25;
              do
              {
                *(_QWORD *)(v24 - 120) = *(_QWORD *)v26;
                v24 -= 120;
                v28 = *(_OWORD *)(v26 + 8);
                v29 = *(_OWORD *)(v26 + 24);
                *(_OWORD *)(v24 + 40) = *(_OWORD *)(v26 + 40);
                *(_OWORD *)(v24 + 24) = v29;
                *(_OWORD *)(v24 + 8) = v28;
                v30 = *(_OWORD *)(v26 + 56);
                v31 = *(_OWORD *)(v26 + 72);
                v32 = *(_OWORD *)(v26 + 88);
                *(_OWORD *)(v24 + 97) = *(_OWORD *)(v26 + 97);
                *(_OWORD *)(v24 + 88) = v32;
                *(_OWORD *)(v24 + 72) = v31;
                *(_OWORD *)(v24 + 56) = v30;
                v26 -= 120;
                v27 += 120;
              }
              while (v27);
            }
            a3 -= 120 * v25;
            if (a3 == v17)
              break;
            v33 = *--v22;
            v23 = v33;
            v24 = v33 + 4080;
          }
          v23 = *v22;
          if (*v22 + 4080 == v24)
          {
            v34 = v22[1];
            ++v22;
            v23 = v34;
            v24 = v34;
          }
        }
        for (i = v14 - 1; i != v10; --i)
        {
          while (1)
          {
            v36 = *i;
            v37 = *i + 4080;
            while (1)
            {
              v38 = 0xEEEEEEEEEEEEEEEFLL * ((v24 - v23) >> 3);
              if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((v37 - v36) >> 3)) < v38)
                v38 = 0xEEEEEEEEEEEEEEEFLL * ((v37 - v36) >> 3);
              if (v38)
              {
                v39 = v37 - 120;
                v40 = -120 * v38;
                do
                {
                  *(_QWORD *)(v24 - 120) = *(_QWORD *)v39;
                  v24 -= 120;
                  v41 = *(_OWORD *)(v39 + 8);
                  v42 = *(_OWORD *)(v39 + 24);
                  *(_OWORD *)(v24 + 40) = *(_OWORD *)(v39 + 40);
                  *(_OWORD *)(v24 + 24) = v42;
                  *(_OWORD *)(v24 + 8) = v41;
                  v43 = *(_OWORD *)(v39 + 56);
                  v44 = *(_OWORD *)(v39 + 72);
                  v45 = *(_OWORD *)(v39 + 88);
                  *(_OWORD *)(v24 + 97) = *(_OWORD *)(v39 + 97);
                  *(_OWORD *)(v24 + 88) = v45;
                  *(_OWORD *)(v24 + 72) = v44;
                  *(_OWORD *)(v24 + 56) = v43;
                  v39 -= 120;
                  v40 += 120;
                }
                while (v40);
              }
              v37 -= 120 * v38;
              if (v37 == v36)
                break;
              v46 = *--v22;
              v23 = v46;
              v24 = v46 + 4080;
            }
            v23 = *v22;
            if (*v22 + 4080 == v24)
              break;
            if (--i == v10)
              goto LABEL_44;
          }
          v47 = v22[1];
          ++v22;
          v23 = v47;
          v24 = v47;
        }
LABEL_44:
        v48 = *v10 + 4080;
        if (v48 == v11)
          goto LABEL_103;
        while (1)
        {
          v49 = 0xEEEEEEEEEEEEEEEFLL * ((v24 - v23) >> 3);
          if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v48 - v11) >> 3)) < v49)
            v49 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v48 - v11) >> 3);
          if (v49)
          {
            v50 = v48 - 120;
            v51 = -120 * v49;
            do
            {
              *(_QWORD *)(v24 - 120) = *(_QWORD *)v50;
              v24 -= 120;
              v52 = *(_OWORD *)(v50 + 8);
              v53 = *(_OWORD *)(v50 + 24);
              *(_OWORD *)(v24 + 40) = *(_OWORD *)(v50 + 40);
              *(_OWORD *)(v24 + 24) = v53;
              *(_OWORD *)(v24 + 8) = v52;
              v54 = *(_OWORD *)(v50 + 56);
              v55 = *(_OWORD *)(v50 + 72);
              v56 = *(_OWORD *)(v50 + 88);
              *(_OWORD *)(v24 + 97) = *(_OWORD *)(v50 + 97);
              *(_OWORD *)(v24 + 88) = v56;
              *(_OWORD *)(v24 + 72) = v55;
              *(_OWORD *)(v24 + 56) = v54;
              v50 -= 120;
              v51 += 120;
            }
            while (v51);
          }
          v48 -= 120 * v49;
          if (v48 == v11)
            break;
          v57 = *--v22;
          v23 = v57;
          v24 = v57 + 4080;
        }
        goto LABEL_98;
      }
    }
    if (a3 == v11)
      goto LABEL_103;
    while (1)
    {
      v98 = 0xEEEEEEEEEEEEEEEFLL * ((v24 - v23) >> 3);
      if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a3 - v11) >> 3)) < v98)
        v98 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a3 - v11) >> 3);
      if (v98)
      {
        v99 = a3 - 120;
        v100 = -120 * v98;
        do
        {
          *(_QWORD *)(v24 - 120) = *(_QWORD *)v99;
          v24 -= 120;
          v101 = *(_OWORD *)(v99 + 8);
          v102 = *(_OWORD *)(v99 + 24);
          *(_OWORD *)(v24 + 40) = *(_OWORD *)(v99 + 40);
          *(_OWORD *)(v24 + 24) = v102;
          *(_OWORD *)(v24 + 8) = v101;
          v103 = *(_OWORD *)(v99 + 56);
          v104 = *(_OWORD *)(v99 + 72);
          v105 = *(_OWORD *)(v99 + 88);
          *(_OWORD *)(v24 + 97) = *(_OWORD *)(v99 + 97);
          *(_OWORD *)(v24 + 88) = v105;
          *(_OWORD *)(v24 + 72) = v104;
          *(_OWORD *)(v24 + 56) = v103;
          v99 -= 120;
          v100 += 120;
        }
        while (v100);
      }
      a3 -= 120 * v98;
      if (a3 == v11)
        break;
      v106 = *--v22;
      v23 = v106;
      v24 = v106 + 4080;
    }
LABEL_98:
    if (*v22 + 4080 == v24)
      v24 = v22[1];
LABEL_103:
    while (v11 != v24)
    {
      if (!v11)
        goto LABEL_135;
      v11 += 120;
      if (v11 - *v10 == 4080)
      {
        v107 = v10[1];
        ++v10;
        v11 = v107;
      }
    }
    v108 = a1[5] - v6;
    v109 = a1[4] + v6;
    a1[4] = v109;
    a1[5] = v108;
    if (v109 >= 0x44)
    {
      v110 = (void **)a1[1];
      do
      {
        operator delete(*v110);
        v110 = (void **)(a1[1] + 8);
        a1[1] = v110;
        v111 = a1[4] - 34;
        a1[4] = v111;
      }
      while (v111 >= 0x44);
    }
    return;
  }
  if (v18 < 1)
  {
    v58 = (33 - v18) / 0x22uLL;
    v19 = &v14[-v58];
    v20 = *v19;
    v21 = *v19 + 120 * (v18 - 33 + 34 * v58) + 3960;
  }
  else
  {
    v19 = &v14[v18 / 0x22uLL];
    v20 = *v19;
    v21 = *v19 + 120 * (v18 % 0x22uLL);
  }
  v59 = v16 + v7;
  v60 = (v16 + v7) / 0x22;
  v61 = (uint64_t *)(v8 + 8 * v60);
  if (v9 == v8)
  {
    v62 = 0;
    if (v19 != v61)
      goto LABEL_55;
LABEL_109:
    if (v21 == v62)
      goto LABEL_119;
    while (1)
    {
      v112 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v17 - a3 + 4080) >> 3);
      if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((v62 - v21) >> 3)) < v112)
        v112 = 0xEEEEEEEEEEEEEEEFLL * ((v62 - v21) >> 3);
      if (v112)
      {
        v113 = v21 + 120 * v112;
        do
        {
          *(_QWORD *)a3 = *(_QWORD *)v21;
          v114 = *(_OWORD *)(v21 + 8);
          v115 = *(_OWORD *)(v21 + 24);
          *(_OWORD *)(a3 + 40) = *(_OWORD *)(v21 + 40);
          *(_OWORD *)(a3 + 24) = v115;
          *(_OWORD *)(a3 + 8) = v114;
          v116 = *(_OWORD *)(v21 + 56);
          v117 = *(_OWORD *)(v21 + 72);
          v118 = *(_OWORD *)(v21 + 88);
          *(_OWORD *)(a3 + 97) = *(_OWORD *)(v21 + 97);
          *(_OWORD *)(a3 + 88) = v118;
          *(_OWORD *)(a3 + 72) = v117;
          *(_OWORD *)(a3 + 56) = v116;
          a3 += 120;
          v21 += 120;
        }
        while (v21 != v113);
        v21 = v113;
      }
      if (v21 == v62)
        break;
      v119 = v14[1];
      ++v14;
      v17 = v119;
      a3 = v119;
    }
    goto LABEL_118;
  }
  v62 = *v61 + 120 * (v59 - 34 * v60);
  if (v19 == v61)
    goto LABEL_109;
LABEL_55:
  v63 = v20 + 4080;
  if (v20 + 4080 != v21)
  {
    while (1)
    {
      v64 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v17 - a3 + 4080) >> 3);
      if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((v63 - v21) >> 3)) < v64)
        v64 = 0xEEEEEEEEEEEEEEEFLL * ((v63 - v21) >> 3);
      if (v64)
      {
        v65 = v21 + 120 * v64;
        do
        {
          *(_QWORD *)a3 = *(_QWORD *)v21;
          v66 = *(_OWORD *)(v21 + 8);
          v67 = *(_OWORD *)(v21 + 24);
          *(_OWORD *)(a3 + 40) = *(_OWORD *)(v21 + 40);
          *(_OWORD *)(a3 + 24) = v67;
          *(_OWORD *)(a3 + 8) = v66;
          v68 = *(_OWORD *)(v21 + 56);
          v69 = *(_OWORD *)(v21 + 72);
          v70 = *(_OWORD *)(v21 + 88);
          *(_OWORD *)(a3 + 97) = *(_OWORD *)(v21 + 97);
          *(_OWORD *)(a3 + 88) = v70;
          *(_OWORD *)(a3 + 72) = v69;
          *(_OWORD *)(a3 + 56) = v68;
          a3 += 120;
          v21 += 120;
        }
        while (v21 != v65);
        v21 = v65;
      }
      if (v21 == v63)
        break;
      v71 = v14[1];
      ++v14;
      v17 = v71;
      a3 = v71;
    }
    v17 = *v14;
    if (*v14 + 4080 == a3)
    {
      v72 = v14[1];
      ++v14;
      v17 = v72;
      a3 = v72;
    }
  }
  for (j = v19 + 1; j != v61; ++j)
  {
    while (1)
    {
      v74 = 0;
      v75 = *j;
      while (1)
      {
        v76 = v75 + 120 * v74;
        v77 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v17 - a3 + 4080) >> 3);
        if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((4080 - 120 * v74) >> 3)) < v77)
          v77 = 0xEEEEEEEEEEEEEEEFLL * ((4080 - 120 * v74) >> 3);
        if (v77)
        {
          v78 = v76 + 120 * v77;
          v79 = v75 + 120 * v74;
          do
          {
            *(_QWORD *)a3 = *(_QWORD *)v79;
            v80 = *(_OWORD *)(v79 + 8);
            v81 = *(_OWORD *)(v79 + 24);
            *(_OWORD *)(a3 + 40) = *(_OWORD *)(v79 + 40);
            *(_OWORD *)(a3 + 24) = v81;
            *(_OWORD *)(a3 + 8) = v80;
            v82 = *(_OWORD *)(v79 + 56);
            v83 = *(_OWORD *)(v79 + 72);
            v84 = *(_OWORD *)(v79 + 88);
            *(_OWORD *)(a3 + 97) = *(_OWORD *)(v79 + 97);
            *(_OWORD *)(a3 + 88) = v84;
            *(_OWORD *)(a3 + 72) = v83;
            *(_OWORD *)(a3 + 56) = v82;
            a3 += 120;
            v79 += 120;
          }
          while (v79 != v78);
          v74 -= 0x1111111111111111 * ((v78 - v76) >> 3);
          if (v74 == 34)
            break;
        }
        v85 = v14[1];
        ++v14;
        v17 = v85;
        a3 = v85;
      }
      v17 = *v14;
      if (*v14 + 4080 == a3)
        break;
      if (++j == v61)
        goto LABEL_79;
    }
    v86 = v14[1];
    ++v14;
    v17 = v86;
    a3 = v86;
  }
LABEL_79:
  v87 = *v61;
  if (v87 == v62)
    goto LABEL_119;
  v88 = *v14;
  while (1)
  {
    v89 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v88 - a3 + 4080) >> 3);
    if ((uint64_t)(0xEEEEEEEEEEEEEEEFLL * ((v62 - v87) >> 3)) < v89)
      v89 = 0xEEEEEEEEEEEEEEEFLL * ((v62 - v87) >> 3);
    if (v89)
    {
      v90 = v87 + 120 * v89;
      do
      {
        *(_QWORD *)a3 = *(_QWORD *)v87;
        v91 = *(_OWORD *)(v87 + 8);
        v92 = *(_OWORD *)(v87 + 24);
        *(_OWORD *)(a3 + 40) = *(_OWORD *)(v87 + 40);
        *(_OWORD *)(a3 + 24) = v92;
        *(_OWORD *)(a3 + 8) = v91;
        v93 = *(_OWORD *)(v87 + 56);
        v94 = *(_OWORD *)(v87 + 72);
        v95 = *(_OWORD *)(v87 + 88);
        *(_OWORD *)(a3 + 97) = *(_OWORD *)(v87 + 97);
        *(_OWORD *)(a3 + 88) = v95;
        *(_OWORD *)(a3 + 72) = v94;
        *(_OWORD *)(a3 + 56) = v93;
        a3 += 120;
        v87 += 120;
      }
      while (v87 != v90);
      v87 = v90;
    }
    if (v87 == v62)
      break;
    v96 = v14[1];
    ++v14;
    v88 = v96;
    a3 = v96;
  }
LABEL_118:
  if (*v14 + 4080 == a3)
  {
    v124 = v14[1];
    ++v14;
    a3 = v124;
    v120 = a1[5];
    v122 = a1[1];
    v121 = a1[2];
    if (v121 != v122)
    {
LABEL_120:
      v123 = *(_QWORD *)(v122 + 8 * ((a1[4] + v120) / 0x22uLL)) + 120 * ((a1[4] + v120) % 0x22uLL);
      if (v123 != a3)
        goto LABEL_132;
      goto LABEL_124;
    }
    goto LABEL_123;
  }
LABEL_119:
  v120 = a1[5];
  v122 = a1[1];
  v121 = a1[2];
  if (v121 != v122)
    goto LABEL_120;
LABEL_123:
  v123 = 0;
  if (!a3)
  {
LABEL_124:
    v125 = 34 * ((v121 - v122) >> 3) - 1;
    if (v121 == v122)
      v125 = 0;
    v126 = v120 - v6;
    a1[5] = v126;
    if ((unint64_t)(v125 - (v126 + a1[4])) >= 0x44)
    {
      do
      {
        operator delete(*(void **)(v121 - 8));
        v127 = a1[1];
        v121 = a1[2] - 8;
        v128 = 34 * ((v121 - v127) >> 3) - 1;
        a1[2] = v121;
        if (v121 == v127)
          v128 = 0;
      }
      while ((unint64_t)(v128 - (a1[5] + a1[4])) > 0x43);
    }
    return;
  }
LABEL_132:
  while (a3)
  {
    a3 += 120;
    if (a3 - *v14 == 4080)
    {
      v129 = v14[1];
      ++v14;
      a3 = v129;
    }
    if (a3 == v123)
      goto LABEL_124;
  }
LABEL_135:
  __break(1u);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::OnIncomingPayloadType(int)::$_1 &&>(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 8) + 248) = *(_DWORD *)result;
  return result;
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::OnDecoderInfo(webrtc::VideoDecoder::DecoderInfo const&)::$_1 &&>(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  char v5;
  __int128 v6;
  __int128 v7;
  const std::string::value_type *v8;
  size_t v9;

  v1 = *a1;
  v2 = (uint64_t)(*a1 + 1);
  v3 = **a1;
  v4 = (std::string *)(v3 + 56);
  if (*(_BYTE *)(v3 + 80))
  {
    if (v4 == (std::string *)v2)
    {
LABEL_6:
      *(_WORD *)(v3 + 88) = *((unsigned __int8 *)v1 + 32) | 0x100;
      return;
    }
    v5 = *((_BYTE *)v1 + 31);
    if (*(char *)(v3 + 79) < 0)
    {
      if (v5 >= 0)
        v8 = (const std::string::value_type *)v2;
      else
        v8 = (const std::string::value_type *)v1[1];
      if (v5 >= 0)
        v9 = *((unsigned __int8 *)v1 + 31);
      else
        v9 = v1[2];
      std::string::__assign_no_alias<false>(v4, v8, v9);
      *(_WORD *)(v3 + 88) = *((unsigned __int8 *)v1 + 32) | 0x100;
    }
    else
    {
      if ((*((_BYTE *)v1 + 31) & 0x80) == 0)
      {
        v6 = *(_OWORD *)v2;
        *(_QWORD *)(v3 + 72) = *(_QWORD *)(v2 + 16);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v6;
        goto LABEL_6;
      }
      std::string::__assign_no_alias<true>(v4, (char *)v1[1], v1[2]);
      *(_WORD *)(v3 + 88) = *((unsigned __int8 *)v1 + 32) | 0x100;
    }
  }
  else
  {
    if (*((char *)v1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)v1[1], v1[2]);
    }
    else
    {
      v7 = *(_OWORD *)v2;
      *(_QWORD *)(v3 + 72) = *(_QWORD *)(v2 + 16);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    *(_BYTE *)(v3 + 80) = 1;
    *(_WORD *)(v3 + 88) = *((unsigned __int8 *)v1 + 32) | 0x100;
  }
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::internal::ReceiveStatisticsProxy::OnDecoderInfo(webrtc::VideoDecoder::DecoderInfo const&)::$_1>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      if (*(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::RtcpPacketTypesCounterUpdated(unsigned int,webrtc::RtcpPacketTypeCounter const&)::$_0 &&>(unsigned int **a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, unsigned int *))(**((_QWORD **)*a1 + 3) + 64))(*((_QWORD *)*a1 + 3), **a1, *a1 + 1);
}

void absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::OnDecodedFrame(webrtc::VideoFrame const&,std::optional<unsigned char>,webrtc::TimeDelta,webrtc::VideoContentType,webrtc::VideoFrameType)::$_1 &&>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  int v9;
  uint64_t v10;
  _OWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64x2_t v34;
  unint64_t v35;
  int v36;
  int64x2_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  BOOL v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  void **v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  void *v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  char *v99;
  void *v100;
  unint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  void *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  int64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  int64_t v122;
  unint64_t v123;
  char *v124;
  unint64_t v125;
  void *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  int64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  __int128 *v142;
  char *v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  unint64_t v155;
  uint64_t v156;
  __int128 *v157;
  _OWORD *v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  unint64_t v165;
  uint64_t v166;
  int64_t *v167;
  int64x2_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  int64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  __int128 *v187;
  _OWORD *v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  unint64_t v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  int64_t v197;
  unint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  __int128 *v204;
  _OWORD *v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  int64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  uint64_t v214;
  unsigned __int8 v215;

  v1 = *a1;
  v2 = *(_QWORD *)(*a1 + 80);
  v3 = *(unsigned __int16 *)(*a1 + 40);
  v5 = *(_QWORD *)(*a1 + 48);
  v4 = *(_QWORD *)(*a1 + 56);
  v6 = *(_QWORD *)(*a1 + 64);
  v8 = *(_DWORD *)(*a1 + 76);
  v215 = *(_BYTE *)(*a1 + 72);
  v7 = v215;
  v9 = *(_BYTE *)(v2 + 1448) & 1;
  if ((v215 & 1) != v9)
  {
    webrtc::internal::VideoQualityObserver::UpdateHistograms(*(int64x2_t **)(v2 + 1208), v9);
    v10 = operator new();
    *(_OWORD *)v10 = xmmword_208F05A40;
    *(_OWORD *)(v10 + 16) = xmmword_208F05A40;
    *(_BYTE *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    v11 = operator new(0x78uLL);
    *v11 = 0u;
    v11[1] = 0u;
    v11[2] = 0u;
    v11[3] = 0u;
    v11[4] = 0u;
    v11[5] = 0u;
    v11[6] = 0u;
    *((_QWORD *)v11 + 14) = 0;
    *(_QWORD *)(v10 + 64) = v11;
    *(_QWORD *)(v10 + 72) = (char *)v11 + 120;
    *(_BYTE *)(v10 + 116) = 0;
    *(_BYTE *)(v10 + 120) = 0;
    *(_BYTE *)(v10 + 124) = 0;
    *(_BYTE *)(v10 + 148) = 0;
    *(_BYTE *)(v10 + 152) = 0;
    *(_BYTE *)(v10 + 156) = 0;
    *(_QWORD *)(v10 + 128) = 0;
    *(_QWORD *)(v10 + 136) = 0;
    *(_BYTE *)(v10 + 144) = 0;
    *(_BYTE *)(v10 + 180) = 0;
    *(_BYTE *)(v10 + 184) = 0;
    *(_BYTE *)(v10 + 188) = 0;
    *(_QWORD *)(v10 + 160) = 0;
    *(_QWORD *)(v10 + 168) = 0;
    *(_BYTE *)(v10 + 176) = 0;
    *(_QWORD *)(v10 + 80) = (char *)v11 + 120;
    *(_QWORD *)(v10 + 88) = 0;
    *(_QWORD *)(v10 + 96) = 0;
    *(_QWORD *)(v10 + 104) = 0;
    *(_BYTE *)(v10 + 112) = 0;
    v12 = operator new(0x18uLL);
    v12[1] = 0;
    v12[2] = 0;
    *v12 = 0;
    *(_QWORD *)(v10 + 192) = v12;
    *(_QWORD *)(v10 + 200) = v12 + 3;
    *(_QWORD *)(v10 + 256) = 0;
    *(_QWORD *)(v10 + 248) = 0;
    *(_QWORD *)(v10 + 216) = 0;
    *(_QWORD *)(v10 + 224) = 0;
    *(_QWORD *)(v10 + 208) = v12 + 3;
    *(_BYTE *)(v10 + 232) = 0;
    *(_QWORD *)(v10 + 240) = v10 + 248;
    v13 = *(_QWORD *)(v2 + 1208);
    *(_QWORD *)(v2 + 1208) = v10;
    if (v13)
    {
      std::__tree<sigslot::_signal_base_interface *>::destroy(v13 + 240, *(_QWORD **)(v13 + 248));
      v14 = *(void **)(v13 + 192);
      if (v14)
      {
        *(_QWORD *)(v13 + 200) = v14;
        operator delete(v14);
      }
      v15 = *(void **)(v13 + 64);
      if (v15)
      {
        *(_QWORD *)(v13 + 72) = v15;
        operator delete(v15);
      }
      MEMORY[0x20BD0ADEC](v13, 0x1030C4028B32989);
    }
  }
  webrtc::internal::VideoQualityObserver::OnDecodedFrame(*(_QWORD *)(v2 + 1208), *(_DWORD *)v1, v3, *(_DWORD *)(v2 + 1452));
  v16 = std::__tree<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::__map_value_compare<webrtc::VideoContentType,std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>,std::less<webrtc::VideoContentType>,true>,std::allocator<std::__value_type<webrtc::VideoContentType,webrtc::internal::ReceiveStatisticsProxy::ContentSpecificStats>>>::__emplace_unique_key_args<webrtc::VideoContentType,std::piecewise_construct_t const&,std::tuple<webrtc::VideoContentType const&>,std::tuple<>>((uint64_t **)(v2 + 1272), v7, (char *)&v215);
  v17 = *(_DWORD *)(v2 + 172);
  *(_DWORD *)(v2 + 172) = v17 + 1;
  v18 = 96;
  if (v8 == 3)
    v18 = 92;
  ++*(_DWORD *)(v2 + v18);
  if (v3 >= 0x100)
  {
    if (*(_BYTE *)(v2 + 240))
    {
      v26 = *(_QWORD *)(v2 + 232);
    }
    else
    {
      if (!v17)
        goto LABEL_23;
      if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/receive_statistics_proxy.cc");
      if (*(_BYTE *)(v2 + 240))
      {
        v26 = 0;
      }
      else
      {
LABEL_23:
        v26 = 0;
        *(_BYTE *)(v2 + 240) = 1;
      }
    }
    *(_QWORD *)(v2 + 232) = v26 + v3;
    v34 = vdupq_n_s64(1uLL);
    v34.i64[0] = v3;
    *(int64x2_t *)(v16 + 184) = vaddq_s64(*(int64x2_t *)(v16 + 184), v34);
    if (!v16[204] || *((_DWORD *)v16 + 50) < (int)v3)
    {
      *((_DWORD *)v16 + 50) = v3;
      v16[204] = 1;
    }
    if (!v16[212] || *((_DWORD *)v16 + 52) > (int)v3)
    {
      *((_DWORD *)v16 + 52) = v3;
      v16[212] = 1;
    }
  }
  else if (*(_BYTE *)(v2 + 240))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v19, v20, v21, v22, v23, v24, v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/video/receive_statistics_proxy.cc");
    if (*(_BYTE *)(v2 + 240))
      *(_BYTE *)(v2 + 240) = 0;
  }
  v35 = v5 / 0x3E8uLL;
  if (v5 % 0x3E8uLL > 0x1F3)
    LODWORD(v35) = v35 + 1;
  if (-v5 % 0x3E8uLL <= 0x1F4)
    v36 = 0;
  else
    v36 = -1;
  if (v5 < 0)
    LODWORD(v35) = v36 - -v5 / 0x3E8uLL;
  v37 = vdupq_n_s64(1uLL);
  v37.i64[0] = (int)v35;
  *(int64x2_t *)(v2 + 1048) = vaddq_s64(v37, *(int64x2_t *)(v2 + 1048));
  if (!*(_BYTE *)(v2 + 1068) || *(_DWORD *)(v2 + 1064) < (int)v35)
  {
    *(_DWORD *)(v2 + 1064) = v35;
    *(_BYTE *)(v2 + 1068) = 1;
  }
  if (!*(_BYTE *)(v2 + 1076) || *(_DWORD *)(v2 + 1072) > (int)v35)
  {
    *(_DWORD *)(v2 + 1072) = v35;
    *(_BYTE *)(v2 + 1076) = 1;
  }
  *(_DWORD *)(v2 + 100) = v35;
  v38 = *(_QWORD *)(v2 + 176);
  v39 = 0x7FFFFFFFFFFFFFFFLL;
  v40 = 0x7FFFFFFFFFFFFFFFLL;
  if (v38 != 0x7FFFFFFFFFFFFFFFLL && v5 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v40 = 0x8000000000000000;
    v41 = v5 == 0x8000000000000000 || v38 == 0x8000000000000000;
    v42 = v38 + v5;
    if (!v41)
      v40 = v42;
  }
  *(_QWORD *)(v2 + 176) = v40;
  v43 = *(_QWORD *)(v2 + 184);
  if (v43 != 0x7FFFFFFFFFFFFFFFLL && v4 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v39 = 0x8000000000000000;
    v44 = v4 == 0x8000000000000000 || v43 == 0x8000000000000000;
    v45 = v43 + v4;
    if (!v44)
      v39 = v45;
  }
  *(_QWORD *)(v2 + 184) = v39;
  v46 = *(_QWORD *)(v2 + 192);
  v47 = 0x7FFFFFFFFFFFFFFFLL;
  if (v46 != 0x7FFFFFFFFFFFFFFFLL && v6 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v47 = 0x8000000000000000;
    v48 = v6 == 0x8000000000000000 || v46 == 0x8000000000000000;
    v49 = v46 + v6;
    if (!v48)
      v47 = v49;
  }
  *(_QWORD *)(v2 + 192) = v47;
  if (v6)
    ++*(_DWORD *)(v2 + 200);
  *(_BYTE *)(v2 + 1448) = v7;
  v50 = *(_QWORD *)(v1 + 32);
  v51 = v50 / 0x3E8uLL;
  if (v50 % 0x3E8uLL > 0x1F3)
    ++v51;
  if (-v50 % 0x3E8uLL <= 0x1F4)
    v52 = 0;
  else
    v52 = -1;
  v53 = v52 - -v50 / 0x3E8uLL;
  if (v50 < 0)
    v54 = v53;
  else
    v54 = v51;
  webrtc::RateStatistics::Update((webrtc::RateStatistics *)(v2 + 696), 1, v54);
  if (*(_BYTE *)(v2 + 1496))
  {
    v55 = *(_QWORD *)(v1 + 32);
    v56 = *(_QWORD *)(v2 + 1488);
    v57 = v55 / 0x3E8uLL;
    if (v55 % 0x3E8uLL > 0x1F3)
      ++v57;
    v58 = v57 - v56;
    v59 = -v55 / 0x3E8uLL;
    if (-v55 % 0x3E8uLL <= 0x1F4)
      v60 = 0;
    else
      v60 = -1;
    v61 = v60 - (v59 + v56);
    v62 = v60 - v59;
    if (v55 < 0)
      v63 = v61;
    else
      v63 = v58;
    if (v55 < 0)
      v64 = v62;
    else
      v64 = v57;
    v65 = *(_QWORD *)(v2 + 1232);
    v66 = *(_QWORD *)(v2 + 1256);
    v67 = (char *)(v65 + 8 * (v66 >> 8));
    if (*(_QWORD *)(v2 + 1240) == v65)
    {
      v71 = 0;
      v69 = 0;
      v72 = (char *)(v65 + 8 * (v66 >> 8));
    }
    else
    {
      v68 = *(char **)v67;
      v69 = *(_QWORD *)v67 + 16 * v66;
      v70 = *(_QWORD *)(v65 + (((*(_QWORD *)(v2 + 1264) + v66) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*(_BYTE *)(v2 + 1264) + v66);
      v71 = (char *)v69;
      v72 = v67;
      if (v69 != v70)
      {
        v71 = (char *)(*(_QWORD *)v67 + 16 * v66);
        v72 = v67;
        do
        {
          if (*(_QWORD *)v71 >= v64 - *(_QWORD *)(v2 + 1216))
            goto LABEL_94;
          v71 += 16;
          if (v71 - v68 == 4096)
          {
            v73 = (char *)*((_QWORD *)v72 + 1);
            v72 += 8;
            v68 = v73;
            v71 = v73;
          }
        }
        while (v71 != (char *)v70);
        v74 = (void **)(v2 + 1224);
        std::deque<std::pair<long long,int>>::erase((_QWORD *)(v2 + 1224), v67, v69, v72, v70);
        v75 = *(_QWORD *)(v2 + 1264);
        if (v75)
        {
LABEL_99:
          while (1)
          {
            v76 = *(_QWORD *)(v2 + 1256);
            v77 = v76 + v75 - 1;
            v78 = *(_QWORD *)(v2 + 1232);
            v79 = *(_QWORD *)(v78 + ((v77 >> 5) & 0x7FFFFFFFFFFFFF8));
            if (*(_DWORD *)(v79 + 16 * v77 + 8) > (int)v63)
              break;
            v80 = *(_QWORD *)(v2 + 1240);
            *(_QWORD *)(v2 + 1264) = v75 - 1;
            if (v80 == v78)
              v81 = 0;
            else
              v81 = 32 * (v80 - v78) - 1;
            v82 = v81 - (v75 + v76) + 1;
            --v75;
            if (v82 >= 0x200)
            {
              operator delete(*(void **)(v80 - 8));
              *(_QWORD *)(v2 + 1240) -= 8;
              v75 = *(_QWORD *)(v2 + 1264);
            }
            if (!v75)
              goto LABEL_106;
          }
          if (*(_QWORD *)(v79 + 16 * (v76 + v75 - 1)) >= v64)
            goto LABEL_192;
        }
LABEL_106:
        v214 = v1;
        v83 = *(char **)(v2 + 1240);
        v84 = *(char **)(v2 + 1232);
        v85 = v83 - v84;
        if (v83 == v84)
          v86 = 0;
        else
          v86 = 32 * (v83 - v84) - 1;
        v87 = *(_QWORD *)(v2 + 1256);
        if (v86 != v87 + v75)
        {
LABEL_189:
          if (v83 != v84)
          {
            v165 = *(_QWORD *)(v2 + 1264) + *(_QWORD *)(v2 + 1256);
            v166 = *(_QWORD *)&v84[(v165 >> 5) & 0x7FFFFFFFFFFFFF8];
            if (v166)
            {
              v167 = (int64_t *)(v166 + 16 * v165);
              *v167 = v64;
              v167[1] = v63;
              ++*(_QWORD *)(v2 + 1264);
              v1 = v214;
LABEL_192:
              v168 = vdupq_n_s64(1uLL);
              v168.i64[0] = (int)v63;
              *(int64x2_t *)(v16 + 72) = vaddq_s64(*(int64x2_t *)(v16 + 72), v168);
              if (!v16[92] || *((_DWORD *)v16 + 22) < (int)v63)
              {
                *((_DWORD *)v16 + 22) = v63;
                v16[92] = 1;
              }
              if (!v16[100] || *((_DWORD *)v16 + 24) > (int)v63)
              {
                *((_DWORD *)v16 + 24) = v63;
                v16[100] = 1;
              }
              rtc::HistogramPercentileCounter::Add((uint64_t *)v16 + 28, v63, 1);
              *((_QWORD *)v16 + 13) += v63;
              goto LABEL_199;
            }
          }
          goto LABEL_245;
        }
        if (v87 >= 0x100)
        {
          *(_QWORD *)(v2 + 1256) = v87 - 256;
          v88 = v84 + 8;
          v89 = *(_QWORD *)v84;
          *(_QWORD *)(v2 + 1232) = v84 + 8;
          if (v83 != *(char **)(v2 + 1248))
            goto LABEL_112;
          v106 = (char *)*v74;
          if (v88 > v106)
          {
            v107 = (v88 - v106) >> 3;
            if (v107 >= -1)
              v108 = v107 + 1;
            else
              v108 = v107 + 2;
            v109 = v108 >> 1;
            v110 = -v109;
            v111 = &v88[-8 * v109];
            v112 = v83 - v88;
            if (v83 != v88)
            {
              memmove(&v88[-8 * v109], v88, v83 - v88);
              v83 = *(char **)(v2 + 1232);
            }
            v113 = &v83[8 * v110];
            v83 = &v111[v112];
            *(_QWORD *)(v2 + 1240) = &v111[v112];
            *(_QWORD *)(v2 + 1232) = v113;
            goto LABEL_113;
          }
          v211 = v89;
          v115 = (v83 - v106) >> 2;
          if (v83 == v106)
            v115 = 1;
          if (!(v115 >> 61))
          {
            v116 = v64;
            v117 = v115 >> 2;
            v118 = 8 * v115;
            v119 = (char *)operator new(8 * v115);
            v120 = &v119[8 * v117];
            v121 = &v119[v118];
            v122 = v83 - v88;
            v41 = v83 == v88;
            v83 = v120;
            v64 = v116;
            v89 = v211;
            if (v41)
              goto LABEL_230;
            v83 = &v120[v122 & 0xFFFFFFFFFFFFFFF8];
            v123 = v122 - 8;
            if ((unint64_t)(v122 - 8) >= 0x38)
            {
              v184 = &v119[8 * v117];
              v124 = v184;
              if ((unint64_t)(v184 - v88) >= 0x20)
              {
                v185 = (v123 >> 3) + 1;
                v186 = 8 * (v185 & 0x3FFFFFFFFFFFFFFCLL);
                v124 = &v120[v186];
                v88 += v186;
                v187 = (__int128 *)(v84 + 24);
                v188 = v184 + 16;
                v189 = v185 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v190 = *v187;
                  *(v188 - 1) = *(v187 - 1);
                  *v188 = v190;
                  v187 += 2;
                  v188 += 2;
                  v189 -= 4;
                }
                while (v189);
                if (v185 == (v185 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_230:
                  *(_QWORD *)(v2 + 1224) = v119;
                  *(_QWORD *)(v2 + 1232) = v120;
                  *(_QWORD *)(v2 + 1240) = v83;
                  *(_QWORD *)(v2 + 1248) = v121;
                  if (v106)
                  {
                    operator delete(v106);
                    v83 = *(char **)(v2 + 1240);
                  }
LABEL_112:
                  if (v83)
                  {
LABEL_113:
                    *(_QWORD *)v83 = v89;
                    v83 = (char *)(*(_QWORD *)(v2 + 1240) + 8);
                    *(_QWORD *)(v2 + 1240) = v83;
LABEL_188:
                    v84 = *(char **)(v2 + 1232);
                    goto LABEL_189;
                  }
LABEL_245:
                  __break(1u);
                  goto LABEL_246;
                }
              }
            }
            else
            {
              v124 = &v119[8 * v117];
            }
            do
            {
              v191 = *(_QWORD *)v88;
              v88 += 8;
              *(_QWORD *)v124 = v191;
              v124 += 8;
            }
            while (v124 != v83);
            goto LABEL_230;
          }
LABEL_246:
          std::__throw_bad_array_new_length[abi:sn180100]();
        }
        v209 = v64;
        v90 = v85 >> 3;
        v91 = *(char **)(v2 + 1248);
        v92 = *(char **)(v2 + 1224);
        if (v85 >> 3 < (unint64_t)((v91 - v92) >> 3))
        {
          v93 = operator new(0x1000uLL);
          if (v91 != v83)
          {
            if (!v83)
              goto LABEL_245;
            *(_QWORD *)v83 = v93;
LABEL_187:
            v83 = (char *)(*(_QWORD *)(v2 + 1240) + 8);
            *(_QWORD *)(v2 + 1240) = v83;
            v64 = v209;
            goto LABEL_188;
          }
          if (v84 == v92)
          {
            v213 = v93;
            v147 = (v91 - v84) >> 2;
            if (v83 == v84)
              v147 = 1;
            if (v147 >> 61)
              goto LABEL_246;
            v148 = (v147 + 3) >> 2;
            v149 = 8 * v147;
            v150 = (char *)operator new(8 * v147);
            v114 = &v150[8 * v148];
            v151 = v114;
            if (v83 != v84)
            {
              v151 = &v114[8 * v90];
              v152 = &v150[8 * v148];
              v153 = v84;
              if ((unint64_t)(v85 - 8) < 0x38)
                goto LABEL_249;
              v154 = &v150[8 * v148];
              v152 = v154;
              v153 = v84;
              if ((unint64_t)(v154 - v84) < 0x20)
                goto LABEL_249;
              v155 = ((unint64_t)(v85 - 8) >> 3) + 1;
              v156 = 8 * (v155 & 0x3FFFFFFFFFFFFFFCLL);
              v152 = &v114[v156];
              v153 = &v84[v156];
              v157 = (__int128 *)(v84 + 16);
              v158 = v154 + 16;
              v159 = v155 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v160 = *v157;
                *(v158 - 1) = *(v157 - 1);
                *v158 = v160;
                v157 += 2;
                v158 += 2;
                v159 -= 4;
              }
              while (v159);
              if (v155 != (v155 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_249:
                do
                {
                  v161 = *(_QWORD *)v153;
                  v153 += 8;
                  *(_QWORD *)v152 = v161;
                  v152 += 8;
                }
                while (v152 != v151);
              }
            }
            *(_QWORD *)(v2 + 1224) = v150;
            *(_QWORD *)(v2 + 1232) = v114;
            *(_QWORD *)(v2 + 1240) = v151;
            *(_QWORD *)(v2 + 1248) = &v150[v149];
            v93 = v213;
            if (v84)
            {
              operator delete(v84);
              v93 = v213;
              v114 = *(char **)(v2 + 1232);
            }
          }
          else
          {
            v114 = v84;
          }
          *((_QWORD *)v114 - 1) = v93;
          v162 = *(char **)(v2 + 1232);
          *(_QWORD *)(v2 + 1232) = v162 - 8;
          v163 = *((_QWORD *)v162 - 1);
          *(_QWORD *)(v2 + 1232) = v162;
          v164 = *(char **)(v2 + 1240);
          if (v164 != *(char **)(v2 + 1248))
            goto LABEL_185;
          v177 = (char *)*v74;
          if (v162 > *v74)
          {
            v178 = (v162 - (_BYTE *)*v74) >> 3;
            if (v178 >= -1)
              v179 = v178 + 1;
            else
              v179 = v178 + 2;
            v180 = v179 >> 1;
            v181 = -v180;
            v182 = &v162[-8 * v180];
            v183 = v164 - v162;
            if (v164 != v162)
            {
              memmove(&v162[-8 * v180], v162, v164 - v162);
              v162 = *(char **)(v2 + 1232);
            }
            v164 = &v182[v183];
            *(_QWORD *)(v2 + 1240) = &v182[v183];
            *(_QWORD *)(v2 + 1232) = &v162[8 * v181];
LABEL_186:
            *(_QWORD *)v164 = v163;
            goto LABEL_187;
          }
          v192 = (v164 - v177) >> 2;
          if (v164 == v177)
            v192 = 1;
          if (v192 >> 61)
            goto LABEL_246;
          v193 = v192 >> 2;
          v194 = 8 * v192;
          v195 = (char *)operator new(8 * v192);
          v196 = &v195[8 * v193];
          v197 = v164 - v162;
          v41 = v164 == v162;
          v164 = v196;
          if (!v41)
          {
            v164 = &v196[v197 & 0xFFFFFFFFFFFFFFF8];
            v198 = v197 - 8;
            if ((unint64_t)(v197 - 8) < 0x38)
            {
              v199 = &v195[8 * v193];
              do
              {
LABEL_242:
                v208 = *(_QWORD *)v162;
                v162 += 8;
                *(_QWORD *)v199 = v208;
                v199 += 8;
              }
              while (v199 != v164);
              goto LABEL_243;
            }
            v200 = &v195[8 * v193];
            v199 = v200;
            if ((unint64_t)(v200 - v162) < 0x20)
              goto LABEL_242;
            v201 = (v198 >> 3) + 1;
            v202 = 8 * (v201 & 0x3FFFFFFFFFFFFFFCLL);
            v199 = &v196[v202];
            v203 = &v162[v202];
            v204 = (__int128 *)(v162 + 16);
            v205 = v200 + 16;
            v206 = v201 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v207 = *v204;
              *(v205 - 1) = *(v204 - 1);
              *v205 = v207;
              v204 += 2;
              v205 += 2;
              v206 -= 4;
            }
            while (v206);
            v162 = v203;
            if (v201 != (v201 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_242;
          }
LABEL_243:
          *(_QWORD *)(v2 + 1224) = v195;
          *(_QWORD *)(v2 + 1232) = v196;
          *(_QWORD *)(v2 + 1240) = v164;
          *(_QWORD *)(v2 + 1248) = &v195[v194];
          if (v177)
          {
            operator delete(v177);
            v164 = *(char **)(v2 + 1240);
          }
LABEL_185:
          if (!v164)
            goto LABEL_245;
          goto LABEL_186;
        }
        if (v91 == v92)
          v94 = 1;
        else
          v94 = (v91 - v92) >> 2;
        if (v94 >> 61)
          goto LABEL_246;
        v95 = 8 * v94;
        v210 = v94;
        v96 = (char *)operator new(8 * v94);
        v97 = v85 >> 3;
        v98 = &v96[8 * v90];
        v99 = &v96[v95];
        v100 = operator new(0x1000uLL);
        if (v85 >> 3 == v210)
        {
          if (v85 < 1)
          {
            v125 = v85 >> 2;
            if (v83 == v84)
              v125 = 1;
            if (v125 >> 61)
              goto LABEL_246;
            v126 = v100;
            v127 = 8 * v125;
            v98 = (char *)operator new(8 * v125);
            operator delete(v96);
            v99 = &v98[v127];
            v83 = *(char **)(v2 + 1240);
            v128 = *(char **)(v2 + 1232);
            v96 = v98;
            *(_QWORD *)v98 = v126;
            v102 = v98 + 8;
            if (v83 != v128)
            {
              while (1)
              {
LABEL_153:
                if (v98 == v96)
                {
                  if (v102 >= v99)
                  {
                    v133 = (v99 - v98) >> 2;
                    if (v99 == v98)
                      v133 = 1;
                    if (v133 >> 61)
                      goto LABEL_246;
                    v134 = (v133 + 3) >> 2;
                    v212 = 8 * v133;
                    v135 = (char *)operator new(8 * v133);
                    v96 = v135;
                    v129 = &v135[8 * v134];
                    v104 = v129;
                    v136 = v102 - v98;
                    if (v102 != v98)
                    {
                      v104 = &v129[v136 & 0xFFFFFFFFFFFFFFF8];
                      v137 = v136 - 8;
                      v138 = &v135[8 * v134];
                      v139 = v98;
                      if (v137 < 0x38)
                        goto LABEL_250;
                      v138 = &v135[8 * v134];
                      v139 = v98;
                      if ((unint64_t)(v138 - v98) < 0x20)
                        goto LABEL_250;
                      v140 = (v137 >> 3) + 1;
                      v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
                      v138 = &v129[v141];
                      v139 = &v98[v141];
                      v142 = (__int128 *)(v98 + 16);
                      v143 = &v135[8 * v134 + 16];
                      v144 = v140 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v145 = *v142;
                        *((_OWORD *)v143 - 1) = *(v142 - 1);
                        *(_OWORD *)v143 = v145;
                        v142 += 2;
                        v143 += 32;
                        v144 -= 4;
                      }
                      while (v144);
                      if (v140 != (v140 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_250:
                        do
                        {
                          v146 = *(_QWORD *)v139;
                          v139 += 8;
                          *(_QWORD *)v138 = v146;
                          v138 += 8;
                        }
                        while (v138 != v104);
                      }
                    }
                    v99 = &v135[v212];
                    operator delete(v98);
                  }
                  else
                  {
                    v131 = (v99 - v102) >> 3;
                    if (v131 >= -1)
                      v132 = v131 + 1;
                    else
                      v132 = v131 + 2;
                    v104 = &v102[8 * (v132 >> 1)];
                    v129 = &v98[8 * (v132 >> 1)];
                    if (v102 == v98)
                    {
                      v96 = v102;
                    }
                    else
                    {
                      memmove(&v98[8 * (v132 >> 1)], v98, v102 - v98);
                      v96 = v98;
                    }
                  }
                }
                else
                {
                  v129 = v98;
                  v104 = v102;
                }
                v130 = *((_QWORD *)v83 - 1);
                v83 -= 8;
                *((_QWORD *)v129 - 1) = v130;
                v103 = v129 - 8;
                v102 = v104;
                v98 = v103;
                if (v83 == *(char **)(v2 + 1232))
                  goto LABEL_129;
              }
            }
LABEL_128:
            v103 = v98;
            v104 = v102;
LABEL_129:
            v105 = *(void **)(v2 + 1224);
            *(_QWORD *)(v2 + 1224) = v96;
            *(_QWORD *)(v2 + 1232) = v103;
            *(_QWORD *)(v2 + 1240) = v104;
            v83 = v104;
            *(_QWORD *)(v2 + 1248) = v99;
            v64 = v209;
            if (v105)
            {
              operator delete(v105);
              v83 = *(char **)(v2 + 1240);
            }
            goto LABEL_188;
          }
          v101 = v97 + 2;
          if (v97 >= -1)
            v101 = v97 + 1;
          v98 -= 8 * (v101 >> 1);
        }
        *(_QWORD *)v98 = v100;
        v102 = v98 + 8;
        if (v83 != v84)
          goto LABEL_153;
        goto LABEL_128;
      }
    }
LABEL_94:
    v74 = (void **)(v2 + 1224);
    std::deque<std::pair<long long,int>>::erase((_QWORD *)(v2 + 1224), v67, v69, v72, (uint64_t)v71);
    v75 = *(_QWORD *)(v2 + 1264);
    if (v75)
      goto LABEL_99;
    goto LABEL_106;
  }
LABEL_199:
  if (*(_DWORD *)(v2 + 172) == 1)
  {
    v169 = *(_QWORD *)(v1 + 32);
    v170 = v169 / 0x3E8uLL;
    if (v169 % 0x3E8uLL > 0x1F3)
      ++v170;
    if (-v169 % 0x3E8uLL <= 0x1F4)
      v171 = 0;
    else
      v171 = -1;
    if (v169 < 0)
      v172 = v171 - -v169 / 0x3E8uLL;
    else
      v172 = v170;
    *(_QWORD *)(v2 + 1472) = v172;
    *(_BYTE *)(v2 + 1480) = 1;
  }
  v173 = *(_QWORD *)(v1 + 32);
  v174 = v173 / 0x3E8uLL;
  if (v173 % 0x3E8uLL > 0x1F3)
    ++v174;
  if (-v173 % 0x3E8uLL <= 0x1F4)
    v175 = 0;
  else
    v175 = -1;
  if (v173 < 0)
    v176 = v175 - -v173 / 0x3E8uLL;
  else
    v176 = v174;
  *(_QWORD *)(v2 + 1488) = v176;
  *(_BYTE *)(v2 + 1496) = 1;
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::internal::ReceiveStatisticsProxy::OnDroppedFrames(unsigned int)::$_0 &&>(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(result + 8) + 168) += *(_DWORD *)result;
  return result;
}

uint64_t webrtc::ReceiveTimeCalculatorConfig::ReceiveTimeCalculatorConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *p_p;
  void *__p;
  uint64_t v7;
  unsigned __int8 v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = off_24C0B4170;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 55) = 6;
  if (a1 + 32 <= (unint64_t)"maxrep" && a1 + 38 > (unint64_t)"maxrep")
    goto LABEL_17;
  strcpy((char *)(a1 + 32), "maxrep");
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)a1 = &unk_24C0B0268;
  *(_QWORD *)(a1 + 64) = 2000000;
  *(_QWORD *)(a1 + 72) = off_24C0B4170;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 127) = 5;
  if (a1 + 104 <= (unint64_t)"stall" && a1 + 109 > (unint64_t)"stall")
    goto LABEL_17;
  *(_BYTE *)(a1 + 108) = 108;
  *(_DWORD *)(a1 + 104) = 1818326131;
  *(_QWORD *)(a1 + 144) = off_24C0B4170;
  *(_BYTE *)(a1 + 109) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 72) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 136) = 5000;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 199) = 3;
  *(_QWORD *)(a1 + 152) = 0;
  if (a1 + 176 <= (unint64_t)"tol" && a1 + 179 > (unint64_t)"tol")
    goto LABEL_17;
  *(_BYTE *)(a1 + 178) = 108;
  *(_WORD *)(a1 + 176) = 28532;
  *(_QWORD *)(a1 + 216) = off_24C0B4170;
  *(_BYTE *)(a1 + 179) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 144) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 208) = 1000;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 271) = 8;
  *(_QWORD *)(a1 + 224) = 0;
  if (a1 + 248 <= (unint64_t)"maxstall" && a1 + 256 > (unint64_t)"maxstall")
    goto LABEL_17;
  strcpy((char *)(a1 + 248), "maxstall");
  *(_BYTE *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 216) = &unk_24C0B0268;
  *(_QWORD *)(a1 + 280) = 5000000;
  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2, "WebRTC-Bwe-ReceiveTimeFix", 25);
  v9[0] = a1;
  v9[1] = a1 + 72;
  v9[2] = a1 + 144;
  v9[3] = a1 + 216;
  if (((char)v8 & 0x80000000) == 0)
  {
    v3 = v8;
    p_p = (char *)&__p;
    goto LABEL_14;
  }
  v3 = v7;
  if (v7 < 0 || (p_p = (char *)__p, v7) && !__p)
LABEL_17:
    __break(1u);
LABEL_14:
  webrtc::ParseFieldTrial(v9, 4, p_p, v3);
  if ((char)v8 < 0)
    operator delete(__p);
  return a1;
}

void webrtc::ReceiveTimeCalculatorConfig::~ReceiveTimeCalculatorConfig(webrtc::ReceiveTimeCalculatorConfig *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  *((_QWORD *)this + 27) = off_24C0B4170;
  if ((*((char *)this + 271) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 28);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 31));
  v2 = (void *)*((_QWORD *)this + 28);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 29) = v2;
    operator delete(v2);
  }
LABEL_4:
  *((_QWORD *)this + 18) = off_24C0B4170;
  if ((*((char *)this + 199) & 0x80000000) == 0)
  {
    v3 = (void *)*((_QWORD *)this + 19);
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(*((void **)this + 22));
  v3 = (void *)*((_QWORD *)this + 19);
  if (v3)
  {
LABEL_6:
    *((_QWORD *)this + 20) = v3;
    operator delete(v3);
  }
LABEL_7:
  *((_QWORD *)this + 9) = off_24C0B4170;
  if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    v4 = (void *)*((_QWORD *)this + 10);
    if (!v4)
      goto LABEL_10;
    goto LABEL_9;
  }
  operator delete(*((void **)this + 13));
  v4 = (void *)*((_QWORD *)this + 10);
  if (v4)
  {
LABEL_9:
    *((_QWORD *)this + 11) = v4;
    operator delete(v4);
  }
LABEL_10:
  *(_QWORD *)this = off_24C0B4170;
  if (*((char *)this + 55) < 0)
  {
    operator delete(*((void **)this + 4));
    v5 = (void *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  else
  {
    v5 = (void *)*((_QWORD *)this + 1);
    if (!v5)
      return;
  }
  *((_QWORD *)this + 2) = v5;
  operator delete(v5);
}

void webrtc::ReceiveTimeCalculator::CreateFromFieldTrial(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int *p_p;
  unint64_t v5;
  _BOOL4 v6;
  int v7;
  int v8;
  uint64_t v10;
  __int128 v11;
  void *__p;
  unint64_t v13;
  unsigned __int8 v14;

  (*(void (**)(void **__return_ptr, uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 16))(&__p, a1, "WebRTC-Bwe-ReceiveTimeFix", 25);
  if (((char)v14 & 0x80000000) == 0)
  {
    p_p = (int *)&__p;
    v5 = v14;
    goto LABEL_6;
  }
  v5 = v13;
  if ((v13 & 0x8000000000000000) == 0)
  {
    p_p = (int *)__p;
    if (!v13 || __p)
    {
LABEL_6:
      if (v5 >= 7)
      {
        v7 = *p_p;
        v8 = *(int *)((char *)p_p + 3);
        v6 = v7 == 1650552389 && v8 == 1684368482;
        if ((v14 & 0x80) != 0)
        {
LABEL_18:
          operator delete(__p);
          if (!v6)
            goto LABEL_19;
          goto LABEL_17;
        }
      }
      else
      {
        v6 = 0;
        if ((v14 & 0x80) != 0)
          goto LABEL_18;
      }
      if (!v6)
      {
LABEL_19:
        *a2 = 0;
        return;
      }
LABEL_17:
      v10 = operator new();
      *(_QWORD *)&v11 = -1;
      *((_QWORD *)&v11 + 1) = -1;
      *(_OWORD *)v10 = v11;
      *(_OWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v10 + 40) = 0;
      *(_QWORD *)(v10 + 48) = 0;
      *(_QWORD *)(v10 + 32) = 0;
      webrtc::ReceiveTimeCalculatorConfig::ReceiveTimeCalculatorConfig(v10 + 56, a1);
      *a2 = v10;
      return;
    }
  }
  __break(1u);
}

uint64_t webrtc::ReceiveTimeCalculator::ReconcileReceiveTimes(webrtc::ReceiveTimeCalculator *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a3 - a2;
  v5 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 24);
  if (v5 < v6 && v4 >= *((_QWORD *)this + 42))
    v4 = *((_QWORD *)this + 42);
  v7 = *((_QWORD *)this + 1);
  if (v7 == -1 && v4 < 0)
  {
    *((_QWORD *)this + 5) = v4;
    v8 = a4;
LABEL_7:
    *(_QWORD *)this = v8;
    *((_QWORD *)this + 1) = a2;
    *((_QWORD *)this + 2) = a3;
    *((_QWORD *)this + 3) = a4;
    return v8;
  }
  v8 = a4 - v4;
  if (v7 < 1)
    goto LABEL_7;
  v10 = a2 - v7;
  v12 = *((_QWORD *)this + 2);
  v11 = *((_QWORD *)this + 3);
  v13 = __OFSUB__(a3, v12);
  v14 = a3 - v12;
  if (v14 < 0 != v13)
    v15 = *((_QWORD *)this + 24);
  else
    v15 = v14;
  v16 = v15 + v5;
  *((_QWORD *)this + 4) = v16;
  v17 = *((_QWORD *)this + 5);
  if (v10 < 0 && v16 < v6)
  {
    v17 -= v10;
    *((_QWORD *)this + 5) = v17;
  }
  v18 = a4 - v11;
  v19 = *((_QWORD *)this + 33);
  if ((v10 & 0x8000000000000000) == 0 && a3 >= a2 && v14 > v19 + v10 && v18 > v19 + v14)
  {
    v20 = 1;
LABEL_28:
    *((_QWORD *)this + 6) = v20;
    goto LABEL_29;
  }
  v20 = 0;
  v22 = v10 < 0 && v14 >= 0;
  if (v18 > v6 || v22)
    goto LABEL_28;
LABEL_29:
  v23 = *(_QWORD *)this;
  if (a3 >= a2)
  {
    v8 += v17;
    if (v8 + v19 >= v23 && !*((_QWORD *)this + 6))
      goto LABEL_7;
  }
  v24 = *((_QWORD *)this + 15);
  if (v10 < v24)
    v24 = v10;
  if (v10 <= 0)
    v24 = 0;
  v25 = v24 + v23;
  *(_QWORD *)this = v25;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  return v25;
}

uint64_t rtc::ReceivedPacket::ReceivedPacket(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;

  if (a3)
    v8 = a2;
  else
    v8 = 0;
  *(_QWORD *)result = v8;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a5;
  *(_QWORD *)(result + 24) = a6;
  *(_QWORD *)(result + 32) = a4;
  *(_DWORD *)(result + 40) = a7;
  *(_DWORD *)(result + 44) = a8;
  return result;
}

void webrtc::rtcp::ReceiverReport::~ReceiverReport(webrtc::rtcp::ReceiverReport *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0BB310;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0BB310;
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

BOOL webrtc::rtcp::ReceiverReport::Parse(webrtc::rtcp::ReceiverReport *this, const webrtc::rtcp::CommonHeader *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int *v6;
  const unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  webrtc::rtcp::ReportBlock *v11;
  webrtc::rtcp::ReportBlock *v12;
  webrtc::rtcp::ReportBlock *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *((unsigned __int8 *)a2 + 1);
  v3 = *((unsigned int *)a2 + 1);
  v4 = (24 * v2) | 4;
  if (v4 > v3)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v15, v16, v17, v18, v19, v20, v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/receiver_report.cc");
  }
  else
  {
    v6 = (unsigned int *)*((_QWORD *)a2 + 1);
    v8 = *v6;
    v7 = (const unsigned __int8 *)(v6 + 1);
    v9 = bswap32(v8);
    v12 = (webrtc::rtcp::ReportBlock *)*((_QWORD *)this + 2);
    v10 = (char *)this + 16;
    v11 = v12;
    *((_DWORD *)v10 - 2) = v9;
    v13 = (webrtc::rtcp::ReportBlock *)*((_QWORD *)v10 + 1);
    v14 = 0x6DB6DB6DB6DB6DB7 * ((v13 - v12) >> 2);
    if (v2 <= v14)
    {
      if (v2 < v14)
      {
        v13 = (webrtc::rtcp::ReportBlock *)((char *)v11 + 28 * v2);
        *((_QWORD *)this + 3) = v13;
      }
    }
    else
    {
      std::vector<webrtc::rtcp::ReportBlock>::__append((void **)v10, v2 - v14);
      v11 = (webrtc::rtcp::ReportBlock *)*((_QWORD *)this + 2);
      v13 = (webrtc::rtcp::ReportBlock *)*((_QWORD *)this + 3);
    }
    while (v11 != v13)
    {
      webrtc::rtcp::ReportBlock::Parse(v11, v7, 0x18uLL);
      v7 += 24;
      v11 = (webrtc::rtcp::ReportBlock *)((char *)v11 + 28);
    }
  }
  return v4 <= v3;
}

uint64_t webrtc::rtcp::ReceiverReport::BlockLength(webrtc::rtcp::ReceiverReport *this)
{
  return 0x4924924924924928 * ((uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 2) + 8;
}

uint64_t webrtc::rtcp::ReceiverReport::Create(unsigned int *a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;

  v12 = *a3;
  if ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1) + v12 <= a4)
  {
LABEL_4:
    v13 = (a1[6] - a1[4]) >> 2;
    v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1);
    *(_BYTE *)(a2 + *a3) = (-73 * v13) | 0x80;
    *(_BYTE *)(*a3 + a2 + 1) = -55;
    *(_BYTE *)(*a3 + a2 + 2) = (unint64_t)(v14 - 4) >> 10;
    *(_BYTE *)(*a3 + a2 + 3) = (unint64_t)(v14 - 4) >> 2;
    v15 = *a3 + 4;
    *a3 = v15;
    *(_DWORD *)(a2 + v15) = bswap32(a1[2]);
    v16 = *a3 + 4;
    *a3 = v16;
    v18 = *((_QWORD *)a1 + 2);
    for (i = *((_QWORD *)a1 + 3); v18 != i; v18 += 28)
    {
      webrtc::rtcp::ReportBlock::Create(v18, (unsigned __int8 *)(a2 + v16));
      v16 = *a3 + 24;
      *a3 = v16;
    }
    return 1;
  }
  else
  {
    while (*a3)
    {
      a6(a5, a2);
      *a3 = 0;
      if ((*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 16))(a1) <= a4)
        goto LABEL_4;
    }
    return 0;
  }
}

void std::vector<webrtc::rtcp::ReportBlock>::__append(void **a1, unint64_t a2)
{
  char *v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;

  v4 = (char *)a1[1];
  v5 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v5 - v4) >> 2) < a2)
  {
    v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (_BYTE *)*a1) >> 2);
    v7 = v6 + a2;
    if (v6 + a2 <= 0x924924924924924)
    {
      v8 = 0x6DB6DB6DB6DB6DB7 * ((v5 - (_BYTE *)*a1) >> 2);
      if (2 * v8 > v7)
        v7 = 2 * v8;
      if (v8 >= 0x492492492492492)
        v9 = 0x924924924924924;
      else
        v9 = v7;
      if (v9)
      {
        if (v9 > 0x924924924924924)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v10 = (char *)operator new(28 * v9);
      }
      else
      {
        v10 = 0;
      }
      v12 = &v10[28 * v6];
      v13 = &v10[28 * v9];
      v14 = &v12[28 * a2];
      v15 = v12;
      do
      {
        if (!v15)
          goto LABEL_27;
        *(_DWORD *)v15 = 0;
        v15[4] = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_DWORD *)v15 + 6) = 0;
        v15 += 28;
      }
      while (v15 != v14);
      v17 = (char *)*a1;
      v16 = (char *)a1[1];
      if (v16 != *a1)
      {
        do
        {
          v18 = *(_OWORD *)(v16 - 28);
          *((_OWORD *)v12 - 1) = *((_OWORD *)v16 - 1);
          *(_OWORD *)(v12 - 28) = v18;
          v12 -= 28;
          v16 -= 28;
        }
        while (v16 != v17);
        v16 = (char *)*a1;
      }
      *a1 = v12;
      a1[1] = v14;
      a1[2] = v13;
      if (v16)
        operator delete(v16);
      return;
    }
LABEL_28:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v11 = &v4[28 * a2];
  do
  {
    if (!v4)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    *(_DWORD *)v4 = 0;
    v4[4] = 0;
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *((_DWORD *)v4 + 6) = 0;
    v4 += 28;
  }
  while (v4 != v11);
  v4 = v11;
LABEL_16:
  a1[1] = v4;
}

unsigned __int8 *dcsctp::ReConfigChunk::Parse@<X0>(unsigned __int8 *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  size_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unint64_t v15;
  char *v16;
  char *v17;

  if (a2)
    v4 = result;
  else
    v4 = 0;
  if (a2 < 4
    || *v4 != 130
    || ((v5 = __rev16(*((unsigned __int16 *)v4 + 1)), v5 >= 4) ? (v6 = a2 >= v5) : (v6 = 0),
        v6 ? (v7 = a2 - v5 >= 4) : (v7 = 1),
        v7))
  {
LABEL_14:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return result;
  }
  v8 = v4 + 4;
  if (v5 <= 4)
    v9 = 0;
  else
    v9 = v8;
  v10 = v5 - 4;
  if (v5 != 4)
  {
    v11 = v5 - 4;
    v12 = v9;
    while (v11 >= 4)
    {
      v13 = __rev16(*((unsigned __int16 *)v12 + 1));
      if (v13 < 4 || v11 < v13)
        break;
      v15 = (unsigned __int16)(v13 + 3) & 0xFFFC;
      if (v11 > v15)
      {
        v12 += v15;
        if (v11 - v15 < v11)
          v11 -= v15;
        if (v11)
          continue;
      }
      if ((v10 & 0x8000000000000000) != 0)
        abort();
      v16 = (char *)operator new(v10);
      v17 = &v16[v10];
      result = (unsigned __int8 *)memcpy(v16, v9, v10);
      goto LABEL_33;
    }
    goto LABEL_14;
  }
  v16 = 0;
  v17 = 0;
LABEL_33:
  *(_QWORD *)a3 = &off_24C0BB340;
  *(_QWORD *)(a3 + 8) = v16;
  *(_QWORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 24) = v17;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

void dcsctp::ReConfigChunk::~ReConfigChunk(dcsctp::ReConfigChunk *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0BB340;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0BB340;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::ReConfigChunk::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BYTE *v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  const void *v15;
  char *v16;
  uint64_t v17;

  v9 = *(_BYTE **)(a1 + 8);
  v10 = *(_BYTE **)(a1 + 16);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 - v9 + 4;
  if (v12 >= v12 + v13)
  {
    if (v12 > v12 + v13)
      *(_QWORD *)(a2 + 8) = &v11[v12 + v13];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 - v9 + 4);
    v11 = *(char **)a2;
  }
  v14 = &v11[v12];
  *v14 = -126;
  v14[2] = BYTE1(v13);
  v14[3] = v13;
  if ((unint64_t)(v10 - v9) >= 0xFFFFFFFFFFFFFFFCLL)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v17);
    dcsctp::ReConfigChunk::ToString(v16);
  }
  else
  {
    if (v10 == v9)
      v15 = 0;
    else
      v15 = v9;
    if (v10 != v9)
    {
      if (v15)
        memcpy((void *)(*(_QWORD *)a2 + v12 + 4), v15, v10 - v9);
    }
  }
}

void dcsctp::ReConfigChunk::ToString(char *a1@<X8>)
{
  a1[23] = 9;
  if (a1 <= "RE-CONFIG" && a1 + 9 > "RE-CONFIG")
    __break(1u);
  else
    strcpy(a1, "RE-CONFIG");
}

unsigned __int16 *dcsctp::ReconfigurationResponseParameter::Parse@<X0>(unsigned __int16 *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v3;
  int v4;
  unint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;

  if (a2)
    v3 = result;
  else
    v3 = 0;
  if (a2 < 0xC
    || __rev16(*v3) != 16
    || ((v4 = *((unsigned __int8 *)v3 + 3), v5 = v4 | (*((unsigned __int8 *)v3 + 2) << 8), (v4 & 3) == 0)
      ? (v6 = v5 >= 0xC)
      : (v6 = 0),
        v6 ? (v7 = a2 >= v5) : (v7 = 0),
        v7 ? (v8 = a2 - v5 >= 4) : (v8 = 1),
        v8 || (v9 = bswap32(*((_DWORD *)v3 + 2)), v9 >= 7)))
  {
LABEL_20:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 32) = 0;
    return result;
  }
  v10 = bswap32(*((_DWORD *)v3 + 1));
  if (v5 > 0xC)
  {
    if ((_DWORD)v5 == 20)
    {
      v11 = bswap32(*((_DWORD *)v3 + 3));
      v12 = bswap32(*((_DWORD *)v3 + 4));
      *(_QWORD *)a3 = &off_24C0BB370;
      *(_DWORD *)(a3 + 8) = v10;
      *(_DWORD *)(a3 + 12) = v9;
      *(_DWORD *)(a3 + 16) = v11;
      *(_BYTE *)(a3 + 20) = 1;
      *(_DWORD *)(a3 + 24) = v12;
      *(_BYTE *)(a3 + 28) = 1;
      *(_BYTE *)(a3 + 32) = 1;
      return result;
    }
    goto LABEL_20;
  }
  *(_QWORD *)a3 = &off_24C0BB370;
  *(_DWORD *)(a3 + 8) = v10;
  *(_DWORD *)(a3 + 12) = v9;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 20) = 0;
  *(_BYTE *)(a3 + 24) = 0;
  *(_BYTE *)(a3 + 28) = 0;
  *(_BYTE *)(a3 + 32) = 1;
  return result;
}

void dcsctp::ReconfigurationResponseParameter::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int v17;
  std::string *v18;
  uint64_t v19;

  v10 = *(char **)a2;
  v11 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v12 = *(_QWORD *)(a1 + 16) & 0xFF00000000;
  if (v12)
    v13 = 20;
  else
    v13 = 12;
  if (v11 >= v11 + v13)
  {
    if (v11 > v11 + v13)
      *(_QWORD *)(a2 + 8) = &v10[v11 + v13];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v13);
    v10 = *(char **)a2;
  }
  v14 = &v10[v11];
  *(_WORD *)v14 = 4096;
  v14[2] = 0;
  v14[3] = v13;
  v15 = (_DWORD *)(*(_QWORD *)a2 + v11);
  v15[1] = bswap32(*(_DWORD *)(a1 + 8));
  v15[2] = bswap32(*(_DWORD *)(a1 + 12));
  v16 = *(_QWORD *)(a1 + 16);
  if ((v16 & 0xFF00000000) != 0)
  {
    if (v12)
    {
      v15[3] = bswap32(v16);
      v17 = *(unsigned __int8 *)(a1 + 28);
      if (*(_BYTE *)(a1 + 28))
        v17 = *(_DWORD *)(a1 + 24);
      v15[4] = bswap32(v17);
    }
    else
    {
      v18 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 84, "FixedSize + variable_offset + SubSize <= data_.size()", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v19);
      dcsctp::ReconfigurationResponseParameter::ToString((dcsctp::ReconfigurationResponseParameter *)v18);
    }
  }
}

char *dcsctp::ReconfigurationResponseParameter::ToString@<X0>(dcsctp::ReconfigurationResponseParameter *this@<X0>, std::string *a2@<X8>)
{
  char *result;
  std::string v5;

  result = (char *)operator new(0x30uLL);
  if (result <= "Re-configuration Response, resp_seq_nbr=" && result + 40 > "Re-configuration Response, resp_seq_nbr=")
  {
    __break(1u);
  }
  else
  {
    strcpy(result, "Re-configuration Response, resp_seq_nbr=");
    v5.__r_.__value_.__r.__words[0] = (std::string::size_type)result;
    *(_OWORD *)&v5.__r_.__value_.__r.__words[1] = xmmword_208F086B0;
    result = (char *)rtc::StringBuilder::operator<<(&v5, *((_DWORD *)this + 2));
    *a2 = v5;
  }
  return result;
}

void dcsctp::ReconfigurationResponseParameter::~ReconfigurationResponseParameter(dcsctp::ReconfigurationResponseParameter *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RedPayloadSplitter::SplitRed(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  size_t *v4;
  size_t *v5;
  char *v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  char v15;
  __int16 v16;
  uint64_t v17;
  unint64_t v18;
  size_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t *v23;
  char *v24;
  char *v25;
  size_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  size_t *v35;
  uint64_t v36;
  size_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t *v40;
  size_t *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  __int16 v44;
  void *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  size_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  char v81;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char v86;
  unint64_t v87;
  uint64_t *v89;
  uint64_t v90;
  size_t *v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;

  v86 = 1;
  v2 = (uint64_t *)a2[1];
  do
  {
    if (v2 == a2)
    {
      v81 = v86;
      return v81 & 1;
    }
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = (unsigned __int8 *)v2[5];
    v8 = v2[3];
    v89 = v2;
    while (1)
    {
      if (!v8)
      {
        v26 = v4;
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
        {
          v87 = v87 & 0xFFFFFFFF00000000 | 0x23A;
          rtc::webrtc_logging_impl::Log("\r\t", v27, v28, v29, v30, v31, v32, v33, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/red_payload_splitter.cc");
        }
        v34 = 0;
        v2 = v89;
        v35 = v26;
        if (v26)
          goto LABEL_67;
        goto LABEL_2;
      }
      v11 = (char)*v7;
      if ((v11 & 0x80000000) == 0)
      {
        ++v3;
        v12 = *((_DWORD *)v2 + 4);
        v13 = v2[3] - v3;
        v9 = -1;
        v10 = 1;
        if (!v13)
          goto LABEL_6;
        goto LABEL_13;
      }
      if (v8 <= 3)
        break;
      v14 = v7[2];
      v12 = *((_DWORD *)v2 + 4) - ((v14 >> 2) | (v7[1] << 6));
      v13 = v7[3] | ((unint64_t)(v14 & 3) << 8);
      v3 += v13 + 4;
      v9 = -4;
      v10 = 4;
      if (!v13)
        goto LABEL_6;
LABEL_13:
      v15 = v11 & 0x7F;
      if (v5 < (size_t *)v6)
      {
        if (!v5)
          goto LABEL_71;
        *(_BYTE *)v5 = v15;
        v16 = v96;
        *((_BYTE *)v5 + 3) = BYTE2(v96);
        *(_WORD *)((char *)v5 + 1) = v16;
        *((_DWORD *)v5 + 1) = v12;
        v5[1] = v13;
        v5 += 2;
        goto LABEL_6;
      }
      v17 = ((char *)v5 - (char *)v4) >> 4;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 60)
        goto LABEL_72;
      if ((v6 - (char *)v4) >> 3 > v18)
        v18 = (v6 - (char *)v4) >> 3;
      if ((unint64_t)(v6 - (char *)v4) >= 0x7FFFFFFFFFFFFFF0)
        v18 = 0xFFFFFFFFFFFFFFFLL;
      if (!v18)
        goto LABEL_71;
      v92 = v10;
      v94 = v9;
      v90 = v3;
      if (v18 >> 60)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v19 = v4;
      v20 = 16 * v18;
      v21 = (char *)operator new(16 * v18);
      v22 = &v21[16 * v17];
      *v22 = v15;
      *((_DWORD *)v22 + 1) = v12;
      *((_QWORD *)v22 + 1) = v13;
      v23 = v19;
      if (v5 != v19)
      {
        v24 = &v21[16 * v17];
        do
        {
          v25 = v24 - 16;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v5 - 1);
          v5 -= 2;
          v24 -= 16;
        }
        while (v5 != v23);
        v6 = &v21[v20];
        v5 = (size_t *)(v22 + 16);
        if (!v23)
          goto LABEL_5;
LABEL_29:
        operator delete(v23);
        goto LABEL_5;
      }
      v25 = &v21[16 * v17];
      v6 = &v21[v20];
      v5 = (size_t *)(v22 + 16);
      if (v23)
        goto LABEL_29;
LABEL_5:
      v4 = (size_t *)v25;
      v2 = v89;
      v3 = v90;
      v10 = v92;
      v9 = v94;
LABEL_6:
      v7 += v10;
      v8 += v9;
      if ((v11 & 0x80000000) == 0)
      {
        v36 = ((char *)v5 - (char *)v4) >> 4;
        v91 = v4;
        if ((unint64_t)((char *)v5 - (char *)v4) > 0x20F)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            v85 = v85 & 0xFFFFFFFF00000000 | 0x472;
            rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v59, v60, v61, v62, v63, v64, v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/red_payload_splitter.cc");
          }
          v86 = 0;
          v2 = v89;
        }
        else
        {
          v96 = (uint64_t)&v96;
          v97 = &v96;
          v98 = 0;
          if (v5 != v4)
          {
            v37 = v4[1];
            v38 = &v7[v37];
            if ((unint64_t)&v7[v37] > v2[5] + v2[3])
            {
LABEL_43:
              if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
              {
                v83 = v83 & 0xFFFFFFFF00000000 | 0x3DA;
                rtc::webrtc_logging_impl::Log("\r\t", v47, v48, v49, v50, v51, v52, v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/red_payload_splitter.cc");
              }
              v86 = 0;
            }
            else
            {
              v39 = 0;
              v40 = &v96;
              v41 = v4;
              v42 = (v36 << 32) - 0x100000000;
              while (1)
              {
                v43 = v38;
                v93 = *((_DWORD *)v41 + 1);
                v95 = *(_BYTE *)v41;
                v44 = *((_WORD *)v2 + 10);
                if (v37)
                {
                  v45 = (void *)operator new[]();
                  memcpy(v45, v7, v37);
                  v40 = v97;
                  v39 = v98;
                }
                else
                {
                  v45 = 0;
                }
                v46 = operator new(0xB8uLL);
                v46[4] = v93;
                *((_WORD *)v46 + 10) = v44;
                *((_BYTE *)v46 + 22) = v95;
                *((_QWORD *)v46 + 3) = v37;
                *((_QWORD *)v46 + 4) = v37;
                *((_QWORD *)v46 + 5) = v45;
                *((_QWORD *)v46 + 6) = v42;
                *((_BYTE *)v46 + 56) = 0;
                *((_BYTE *)v46 + 160) = 0;
                *((_QWORD *)v46 + 21) = 0;
                *((_QWORD *)v46 + 22) = 0;
                *(_QWORD *)v46 = &v96;
                *((_QWORD *)v46 + 1) = v40;
                *v40 = (uint64_t)v46;
                ++v39;
                v97 = (uint64_t *)v46;
                v98 = v39;
                if (!--v36)
                  break;
                v37 = v41[3];
                v41 += 2;
                v42 -= 0x100000000;
                v38 = &v43[v37];
                v2 = v89;
                v40 = (uint64_t *)v46;
                v7 = v43;
                if ((unint64_t)&v43[v37] > v89[5] + v89[3])
                  goto LABEL_43;
              }
            }
            v2 = v89;
          }
          if (&v96 == a2)
          {
LABEL_71:
            __break(1u);
LABEL_72:
            std::__throw_bad_array_new_length[abi:sn180100]();
          }
          v54 = v98;
          if (v98)
          {
            v56 = v96;
            v55 = v97;
            v57 = *v97;
            *(_QWORD *)(v57 + 8) = *(_QWORD *)(v96 + 8);
            **(_QWORD **)(v56 + 8) = v57;
            v58 = *v2;
            *(_QWORD *)(v58 + 8) = v55;
            *v55 = v58;
            *v2 = v56;
            *(_QWORD *)(v56 + 8) = v2;
            a2[2] += v54;
          }
        }
        v66 = *v2;
        v67 = (uint64_t *)v2[1];
        *(_QWORD *)(v66 + 8) = v67;
        *(_QWORD *)v2[1] = v66;
        --a2[2];
        v68 = v2[22];
        v2[22] = 0;
        if (v68)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
          v2 = v89;
        }
        v69 = v2[21];
        v2[21] = 0;
        if (v69)
        {
          MEMORY[0x20BD0ADEC](v69, 0x1060C40C2E02434);
          v2 = v89;
        }
        if (*((_BYTE *)v2 + 160))
        {
          v70 = (void *)v2[8];
          if (v70)
          {
            v2[9] = (uint64_t)v70;
            operator delete(v70);
            v2 = v89;
          }
        }
        v71 = v2[5];
        v2[5] = 0;
        if (v71)
        {
          MEMORY[0x20BD0ADD4](v71, 0x1000C8077774924);
          v2 = v89;
        }
        operator delete(v2);
        v34 = 1;
        v2 = v67;
        v35 = v91;
        if (v91)
          goto LABEL_67;
        goto LABEL_2;
      }
    }
    v72 = v4;
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    {
      v84 = v84 & 0xFFFFFFFF00000000 | 0x2C2;
      rtc::webrtc_logging_impl::Log("\r\t", v73, v74, v75, v76, v77, v78, v79, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_coding/neteq/red_payload_splitter.cc");
    }
    v35 = v72;
    v34 = 0;
    v2 = v89;
    if (v72)
    {
LABEL_67:
      v80 = v2;
      operator delete(v35);
      v2 = v80;
    }
LABEL_2:
    ;
  }
  while ((v34 & 1) != 0);
  v81 = 0;
  return v81 & 1;
}

void webrtc::RedPayloadSplitter::CheckRedPayloads(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  v3 = (_QWORD *)a2[1];
  if (v3 != a2)
  {
    v6 = 0xFFFFFFFFLL;
    while (1)
    {
      v7 = *((unsigned __int8 *)v3 + 22);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(a3, v7);
      if (v8 && *(_BYTE *)(v8 + 128) == 3)
        goto LABEL_16;
      v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(a3, v7);
      if (v9 && *(_BYTE *)(v9 + 128) == 2
        || (v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 64))(a3, v7)) != 0
        && *(_BYTE *)(v10 + 128) == 1)
      {
LABEL_12:
        v7 = v6;
        goto LABEL_13;
      }
      if ((_DWORD)v6 == -1)
      {
LABEL_13:
        v3 = (_QWORD *)v3[1];
        v6 = v7;
        if (v3 == a2)
          return;
      }
      else
      {
        if ((_DWORD)v6 == (_DWORD)v7)
          goto LABEL_12;
        if (v3 == a2)
        {
          __break(1u);
          return;
        }
LABEL_16:
        v11 = *v3;
        v12 = (_QWORD *)v3[1];
        *(_QWORD *)(v11 + 8) = v12;
        *(_QWORD *)v3[1] = v11;
        --a2[2];
        v13 = v3[22];
        v3[22] = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        v14 = v3[21];
        v3[21] = 0;
        if (v14)
          MEMORY[0x20BD0ADEC](v14, 0x1060C40C2E02434);
        if (*((_BYTE *)v3 + 160))
        {
          v15 = (void *)v3[8];
          if (v15)
          {
            v3[9] = v15;
            operator delete(v15);
          }
        }
        v16 = v3[5];
        v3[5] = 0;
        if (v16)
          MEMORY[0x20BD0ADD4](v16, 0x1000C8077774924);
        operator delete(v3);
        v3 = v12;
        if (v12 == a2)
          return;
      }
    }
  }
}

void webrtc::RedPayloadSplitter::~RedPayloadSplitter(webrtc::RedPayloadSplitter *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RefinedFilterUpdateGain::Compute(uint64_t a1, float32x4_t *a2, _QWORD *a3, uint64_t a4, float32x4_t *a5, int a6, unint64_t a7, char a8, float32x4_t a9, float32x4_t a10, char a11, float32x4_t *a12)
{
  unint64_t v15;
  unint64_t v16;
  int v17;
  BOOL v18;
  int v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  float v27;
  unint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  unint64_t v45;
  uint64_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  uint64_t v62;
  float v63;
  float *v64;
  unint64_t v65;
  float v66;
  uint64_t v67;
  unint64_t i;
  uint64_t v69;
  float v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  int8x16_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  uint64_t v105;
  float v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int v123;

  v15 = a4 + 1544;
  v16 = *(_QWORD *)(a1 + 384) + 1;
  *(_QWORD *)(a1 + 384) = v16;
  v17 = *(_DWORD *)(a1 + 392);
  v18 = __OFSUB__(v17, 1);
  v19 = v17 - 1;
  if (v19 < 0 == v18)
  {
    *(_DWORD *)(a1 + 392) = v19;
    if (v19)
    {
      v20 = *(float *)(a1 + 12) * (float)v19;
      *(float32x4_t *)(a1 + 24) = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 56), 1.0 - v20), *(float32x4_t *)(a1 + 88), v20);
      *(float *)(a1 + 40) = (float)((float)(1.0 - v20) * *(float *)(a1 + 72)) + (float)(*(float *)(a1 + 104) * v20);
    }
    else
    {
      a9 = *(float32x4_t *)(a1 + 48);
      a10 = *(float32x4_t *)(a1 + 64);
      *(float32x4_t *)(a1 + 80) = a9;
      *(float32x4_t *)(a1 + 96) = a10;
      *(float32x4_t *)(a1 + 16) = a9;
      *(float32x4_t *)(a1 + 32) = a10;
    }
  }
  v21 = a4 + 1024;
  v22 = 1;
  do
  {
    v23 = a3[v22];
    if (v23 > 0xA)
      break;
  }
  while (v22++ != 63);
  if (v23 <= 0xA)
  {
    v25 = *(_QWORD *)(a1 + 376) + 1;
    *(_QWORD *)(a1 + 376) = v25;
    if (v25 < a7)
    {
LABEL_19:
      bzero(a12, 0x208uLL);
      goto LABEL_40;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 376) = 1;
    if (a7 > 1)
      goto LABEL_19;
  }
  if ((a8 & 1) != 0 || v16 <= a7)
    goto LABEL_19;
  v26 = 0;
  v27 = *(float *)(a1 + 40);
  v28 = a1 + 112;
  do
  {
    v29 = a2->f32[v26];
    v30 = 0.0;
    if (v29 >= v27)
      v30 = *(float *)(v28 + v26 * 4)
          / (float)((float)(*(float *)(v15 + v26 * 4) * (float)a7)
                  + (float)((float)(*(float *)(v28 + v26 * 4) * 0.5) * v29));
    v107.f32[v26++] = v30;
  }
  while (v26 != 65);
  if (a3[1] > 5uLL)
    v107.i64[0] = 0;
  v31 = 0;
  v32 = a3 + 2;
  do
  {
    v33 = *v32++;
    if (v33 >= 6)
    {
      v34 = (char *)&v107 + v31;
      *((_DWORD *)v34 + 4) = 0;
      *(_QWORD *)v34 = 0;
      *((_QWORD *)v34 + 1) = 0;
    }
    v31 += 4;
  }
  while (v31 != 244);
  if (a3[63] > 5uLL)
  {
    v122.i32[3] = 0;
    v123 = 0;
  }
  if (v28 >= (unint64_t)a2[16].u64 + 4 || a1 + 372 <= (unint64_t)a2)
  {
    v36.i64[0] = 0xBF000000BF000000;
    v36.i64[1] = 0xBF000000BF000000;
    v37 = vmlaq_f32(*(float32x4_t *)(a1 + 128), *(float32x4_t *)(a1 + 128), vmulq_f32(vmulq_f32(v108, v36), a2[1]));
    *(float32x4_t *)(a1 + 112) = vmlaq_f32(*(float32x4_t *)(a1 + 112), *(float32x4_t *)(a1 + 112), vmulq_f32(vmulq_f32(v107, v36), *a2));
    *(float32x4_t *)(a1 + 128) = v37;
    v38 = vmlaq_f32(*(float32x4_t *)(a1 + 160), *(float32x4_t *)(a1 + 160), vmulq_f32(vmulq_f32(v110, v36), a2[3]));
    *(float32x4_t *)(a1 + 144) = vmlaq_f32(*(float32x4_t *)(a1 + 144), *(float32x4_t *)(a1 + 144), vmulq_f32(vmulq_f32(v109, v36), a2[2]));
    *(float32x4_t *)(a1 + 160) = v38;
    v39 = vmlaq_f32(*(float32x4_t *)(a1 + 192), *(float32x4_t *)(a1 + 192), vmulq_f32(vmulq_f32(v112, v36), a2[5]));
    *(float32x4_t *)(a1 + 176) = vmlaq_f32(*(float32x4_t *)(a1 + 176), *(float32x4_t *)(a1 + 176), vmulq_f32(vmulq_f32(v111, v36), a2[4]));
    *(float32x4_t *)(a1 + 192) = v39;
    v40 = vmlaq_f32(*(float32x4_t *)(a1 + 224), *(float32x4_t *)(a1 + 224), vmulq_f32(vmulq_f32(v114, v36), a2[7]));
    *(float32x4_t *)(a1 + 208) = vmlaq_f32(*(float32x4_t *)(a1 + 208), *(float32x4_t *)(a1 + 208), vmulq_f32(vmulq_f32(v113, v36), a2[6]));
    *(float32x4_t *)(a1 + 224) = v40;
    v41 = vmlaq_f32(*(float32x4_t *)(a1 + 256), *(float32x4_t *)(a1 + 256), vmulq_f32(vmulq_f32(v116, v36), a2[9]));
    *(float32x4_t *)(a1 + 240) = vmlaq_f32(*(float32x4_t *)(a1 + 240), *(float32x4_t *)(a1 + 240), vmulq_f32(vmulq_f32(v115, v36), a2[8]));
    *(float32x4_t *)(a1 + 256) = v41;
    v42 = vmlaq_f32(*(float32x4_t *)(a1 + 288), *(float32x4_t *)(a1 + 288), vmulq_f32(vmulq_f32(v118, v36), a2[11]));
    *(float32x4_t *)(a1 + 272) = vmlaq_f32(*(float32x4_t *)(a1 + 272), *(float32x4_t *)(a1 + 272), vmulq_f32(vmulq_f32(v117, v36), a2[10]));
    *(float32x4_t *)(a1 + 288) = v42;
    v43 = vmlaq_f32(*(float32x4_t *)(a1 + 320), *(float32x4_t *)(a1 + 320), vmulq_f32(vmulq_f32(v120, v36), a2[13]));
    *(float32x4_t *)(a1 + 304) = vmlaq_f32(*(float32x4_t *)(a1 + 304), *(float32x4_t *)(a1 + 304), vmulq_f32(vmulq_f32(v119, v36), a2[12]));
    *(float32x4_t *)(a1 + 320) = v43;
    a10 = vmulq_f32(vmulq_f32(v121, v36), a2[14]);
    a9 = vmulq_f32(vmulq_f32(v122, v36), a2[15]);
    v44 = vmlaq_f32(*(float32x4_t *)(a1 + 352), *(float32x4_t *)(a1 + 352), a9);
    *(float32x4_t *)(a1 + 336) = vmlaq_f32(*(float32x4_t *)(a1 + 336), *(float32x4_t *)(a1 + 336), a10);
    *(float32x4_t *)(a1 + 352) = v44;
    v35 = 64;
  }
  else
  {
    v35 = 0;
  }
  v45 = v35;
  do
  {
    *(float *)(v28 + v45 * 4) = *(float *)(v28 + v45 * 4)
                              + (float)((float)((float)(v107.f32[v45] * -0.5) * a2->f32[v45]) * *(float *)(v28 + v45 * 4));
    ++v45;
  }
  while (v45 != 65);
  if (v15 <= (unint64_t)a12 || v21 >= (unint64_t)&a12[32].u64[1])
  {
    v47 = v107;
    v48 = v108;
    *a12 = vmulq_f32(v107, *(float32x4_t *)(a4 + 1024));
    *(float32x4_t *)((char *)a12 + 260) = vmulq_f32(v47, *(float32x4_t *)(a4 + 1284));
    a12[1] = vmulq_f32(v48, *(float32x4_t *)(a4 + 1040));
    *(float32x4_t *)((char *)a12 + 276) = vmulq_f32(v48, *(float32x4_t *)(a4 + 1300));
    v49 = v109;
    v50 = v110;
    a12[2] = vmulq_f32(v109, *(float32x4_t *)(a4 + 1056));
    *(float32x4_t *)((char *)a12 + 292) = vmulq_f32(v49, *(float32x4_t *)(a4 + 1316));
    a12[3] = vmulq_f32(v50, *(float32x4_t *)(a4 + 1072));
    *(float32x4_t *)((char *)a12 + 308) = vmulq_f32(v50, *(float32x4_t *)(a4 + 1332));
    v51 = v111;
    v52 = v112;
    a12[4] = vmulq_f32(v111, *(float32x4_t *)(a4 + 1088));
    *(float32x4_t *)((char *)a12 + 324) = vmulq_f32(v51, *(float32x4_t *)(a4 + 1348));
    a12[5] = vmulq_f32(v52, *(float32x4_t *)(a4 + 1104));
    *(float32x4_t *)((char *)a12 + 340) = vmulq_f32(v52, *(float32x4_t *)(a4 + 1364));
    v53 = v113;
    v54 = v114;
    a12[6] = vmulq_f32(v113, *(float32x4_t *)(a4 + 1120));
    *(float32x4_t *)((char *)a12 + 356) = vmulq_f32(v53, *(float32x4_t *)(a4 + 1380));
    a12[7] = vmulq_f32(v54, *(float32x4_t *)(a4 + 1136));
    *(float32x4_t *)((char *)a12 + 372) = vmulq_f32(v54, *(float32x4_t *)(a4 + 1396));
    v55 = v115;
    v56 = v116;
    a12[8] = vmulq_f32(v115, *(float32x4_t *)(a4 + 1152));
    *(float32x4_t *)((char *)a12 + 388) = vmulq_f32(v55, *(float32x4_t *)(a4 + 1412));
    a12[9] = vmulq_f32(v56, *(float32x4_t *)(a4 + 1168));
    *(float32x4_t *)((char *)a12 + 404) = vmulq_f32(v56, *(float32x4_t *)(a4 + 1428));
    v57 = v117;
    v58 = v118;
    a12[10] = vmulq_f32(v117, *(float32x4_t *)(a4 + 1184));
    *(float32x4_t *)((char *)a12 + 420) = vmulq_f32(v57, *(float32x4_t *)(a4 + 1444));
    a12[11] = vmulq_f32(v58, *(float32x4_t *)(a4 + 1200));
    *(float32x4_t *)((char *)a12 + 436) = vmulq_f32(v58, *(float32x4_t *)(a4 + 1460));
    v59 = v119;
    v60 = v120;
    a12[12] = vmulq_f32(v119, *(float32x4_t *)(a4 + 1216));
    *(float32x4_t *)((char *)a12 + 452) = vmulq_f32(v59, *(float32x4_t *)(a4 + 1476));
    a12[13] = vmulq_f32(v60, *(float32x4_t *)(a4 + 1232));
    *(float32x4_t *)((char *)a12 + 468) = vmulq_f32(v60, *(float32x4_t *)(a4 + 1492));
    a10 = v121;
    v61 = v122;
    a12[14] = vmulq_f32(v121, *(float32x4_t *)(a4 + 1248));
    *(float32x4_t *)((char *)a12 + 484) = vmulq_f32(a10, *(float32x4_t *)(a4 + 1508));
    a12[15] = vmulq_f32(v61, *(float32x4_t *)(a4 + 1264));
    a9 = vmulq_f32(v61, *(float32x4_t *)(a4 + 1524));
    *(float32x4_t *)((char *)a12 + 500) = a9;
    v46 = 64;
  }
  else
  {
    v46 = 0;
  }
  v62 = v46;
  do
  {
    v63 = v107.f32[v62];
    v64 = &a12->f32[v62];
    *v64 = v63 * *(float *)(v21 + v62 * 4);
    v64[65] = v63 * *(float *)(v21 + v62 * 4 + 260);
    ++v62;
  }
  while (v62 != 65);
LABEL_40:
  v65 = a1 + 112;
  a9.i32[0] = *(_DWORD *)(a1 + 32);
  a10.i32[0] = *(_DWORD *)(a1 + 36);
  if ((a11 & 1) != 0)
  {
    v66 = *(float *)(a1 + 24);
    if (v65 >= (unint64_t)a5[16].u64 + 4 || a1 + 372 <= (unint64_t)a5)
    {
      v71 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a10.f32, 0);
      v72 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0);
      v73 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 112), *a5, v66);
      v74 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 128), a5[1], v66);
      v75 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v73), v72, v73);
      v76 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v74), v72, v74);
      *(int8x16_t *)(a1 + 112) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v75, (float32x4_t)v71), v71, v75);
      *(int8x16_t *)(a1 + 128) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v76, (float32x4_t)v71), v71, v76);
      v77 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 144), a5[2], v66);
      v78 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 160), a5[3], v66);
      v79 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v77), v72, v77);
      v80 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v78), v72, v78);
      *(int8x16_t *)(a1 + 144) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v79, (float32x4_t)v71), v71, v79);
      *(int8x16_t *)(a1 + 160) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v80, (float32x4_t)v71), v71, v80);
      v81 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 176), a5[4], v66);
      v82 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 192), a5[5], v66);
      v83 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v81), v72, v81);
      v84 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v82), v72, v82);
      *(int8x16_t *)(a1 + 176) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v83, (float32x4_t)v71), v71, v83);
      *(int8x16_t *)(a1 + 192) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v84, (float32x4_t)v71), v71, v84);
      v85 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 208), a5[6], v66);
      v86 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 224), a5[7], v66);
      v87 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v85), v72, v85);
      v88 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v86), v72, v86);
      *(int8x16_t *)(a1 + 208) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v87, (float32x4_t)v71), v71, v87);
      *(int8x16_t *)(a1 + 224) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v88, (float32x4_t)v71), v71, v88);
      v89 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 240), a5[8], v66);
      v90 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 256), a5[9], v66);
      v91 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v89), v72, v89);
      v92 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v90), v72, v90);
      *(int8x16_t *)(a1 + 240) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v91, (float32x4_t)v71), v71, v91);
      *(int8x16_t *)(a1 + 256) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v92, (float32x4_t)v71), v71, v92);
      v93 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 272), a5[10], v66);
      v94 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 288), a5[11], v66);
      v95 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v93), v72, v93);
      v96 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v94), v72, v94);
      *(int8x16_t *)(a1 + 272) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v95, (float32x4_t)v71), v71, v95);
      *(int8x16_t *)(a1 + 288) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v96, (float32x4_t)v71), v71, v96);
      v97 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 304), a5[12], v66);
      v98 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 320), a5[13], v66);
      v99 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v97), v72, v97);
      v100 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v98), v72, v98);
      *(int8x16_t *)(a1 + 304) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v99, (float32x4_t)v71), v71, v99);
      *(int8x16_t *)(a1 + 320) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v100, (float32x4_t)v71), v71, v100);
      v101 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 336), a5[14], v66);
      v102 = (int8x16_t)vmlaq_n_f32(*(float32x4_t *)(a1 + 352), a5[15], v66);
      v103 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v101), v72, v101);
      v104 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v72, (float32x4_t)v102), v72, v102);
      *(int8x16_t *)(a1 + 336) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v103, (float32x4_t)v71), v71, v103);
      *(int8x16_t *)(a1 + 352) = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v104, (float32x4_t)v71), v71, v104);
      v67 = 64;
    }
    else
    {
      v67 = 0;
    }
    v105 = v67;
    do
    {
      v106 = *(float *)(v65 + v105 * 4) + (float)(v66 * a5->f32[v105]);
      if (v106 < a9.f32[0])
        v106 = a9.f32[0];
      if (a10.f32[0] < v106)
        v106 = a10.f32[0];
      *(float *)(v65 + v105 * 4) = v106;
      ++v105;
    }
    while (v105 != 65);
  }
  else
  {
    for (i = 0; i != 260; i += 4)
    {
      if (*(float *)(a4 + i + 1544) <= *(float *)(a4 + i + 1804))
        v69 = 24;
      else
        v69 = 28;
      v70 = *(float *)(v65 + i) + (float)(*(float *)(a1 + v69) * a5->f32[i / 4]);
      if (v70 < a9.f32[0])
        v70 = a9.f32[0];
      if (a10.f32[0] < v70)
        v70 = a10.f32[0];
      *(float *)(v65 + i) = v70;
    }
  }
}

uint64_t webrtc::BasicRegatheringController::BasicRegatheringController(uint64_t a1, _DWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t **v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t **v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  *(_QWORD *)(a1 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(a1 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(a1 + 40) = 0;
  v6 = (uint64_t **)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)a1 = &off_24C0BB3D0;
  *(_QWORD *)(a1 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(_DWORD *)(a1 + 64) = *a2;
  *(_QWORD *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a4;
  v7 = a3 + 72;
  v8 = a3 + 74;
  v9 = operator new(0x30uLL);
  v9[2] = sigslot::_opaque_connection::emitter<webrtc::BasicRegatheringController,cricket::IceTransportInternal *>;
  v9[3] = a1;
  v9[4] = webrtc::BasicRegatheringController::OnIceTransportStateChanged;
  v9[5] = 0;
  v10 = a3[74];
  *v9 = v10;
  v9[1] = v8;
  *(_QWORD *)(v10 + 8) = v9;
  a3[74] = v9;
  ++a3[76];
  v11 = *v6;
  if (*v6)
  {
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v11;
        v13 = v11[4];
        if (v13 <= (unint64_t)v7)
          break;
        v11 = *v12;
        v6 = v12;
        if (!*v12)
          goto LABEL_8;
      }
      if (v13 >= (unint64_t)v7)
        break;
      v11 = v12[1];
      if (!v11)
      {
        v6 = v12 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
    v12 = v6;
LABEL_8:
    v14 = (uint64_t *)operator new(0x28uLL);
    v14[4] = (uint64_t)v7;
    *v14 = 0;
    v14[1] = 0;
    v14[2] = (uint64_t)v12;
    *v6 = v14;
    v15 = **(_QWORD **)(a1 + 32);
    if (v15)
    {
      *(_QWORD *)(a1 + 32) = v15;
      v16 = *v6;
    }
    else
    {
      v16 = v14;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 40), v16);
    ++*(_QWORD *)(a1 + 48);
  }
  v17 = operator new(0x30uLL);
  v17[2] = sigslot::_opaque_connection::emitter<webrtc::BasicRegatheringController,rtc::PacketTransportInternal *>;
  v17[3] = a1;
  v17[4] = webrtc::BasicRegatheringController::OnIceTransportWritableState;
  v17[5] = 0;
  v18 = a3[9];
  *v17 = v18;
  v17[1] = a3 + 9;
  *(_QWORD *)(v18 + 8) = v17;
  a3[9] = v17;
  ++a3[11];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 8))(a1, a3 + 7);
  v19 = operator new(0x30uLL);
  v21 = a3[23];
  v20 = a3 + 23;
  v19[2] = sigslot::_opaque_connection::emitter<webrtc::BasicRegatheringController,rtc::PacketTransportInternal *>;
  v19[3] = a1;
  v19[4] = webrtc::BasicRegatheringController::OnIceTransportReceivingState;
  v19[5] = 0;
  *v19 = v21;
  v19[1] = v20;
  *(_QWORD *)(v21 + 8) = v19;
  *v20 = v19;
  ++v20[2];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 8))(a1, v20 - 2);
  v22 = operator new(0x30uLL);
  v22[2] = sigslot::_opaque_connection::emitter<webrtc::BasicRegatheringController,std::optional<rtc::NetworkRoute>>;
  v22[3] = a1;
  v22[4] = webrtc::BasicRegatheringController::OnIceTransportNetworkRouteChanged;
  v22[5] = 0;
  v23 = v20[14];
  *v22 = v23;
  v22[1] = v20 + 14;
  *(_QWORD *)(v23 + 8) = v22;
  v20[14] = v22;
  ++v20[16];
  (*(void (**)(uint64_t, _QWORD *))(a1 + 8))(a1, v20 + 12);
  return a1;
}

void webrtc::BasicRegatheringController::~BasicRegatheringController(webrtc::BasicRegatheringController *this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_24C0BB3D0;
  v2 = (unsigned int **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
  {
    v3 = *v2;
    *((_BYTE *)*v2 + 4) = 0;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
    MEMORY[0x20BD0ADEC](v2, 0x20C4093837F09);
  }
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(webrtc::BasicRegatheringController *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
}

{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_24C0BB3D0;
  v2 = (unsigned int **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v2)
  {
    v3 = *v2;
    *((_BYTE *)*v2 + 4) = 0;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      MEMORY[0x20BD0ADEC]();
    MEMORY[0x20BD0ADEC](v2, 0x20C4093837F09);
  }
  *(_QWORD *)this = &unk_24C0ACE30;
  (*((void (**)(webrtc::BasicRegatheringController *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this + 32, *((_QWORD **)this + 5));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(webrtc::BasicRegatheringController *this)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int **v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  char v15;
  char v16;
  _QWORD v17[2];
  uint64_t (*v18)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v19)(uint64_t);

  v2 = (_QWORD *)operator new();
  v3 = operator new();
  v4 = (unsigned int *)v3;
  *(_DWORD *)v3 = 0;
  *(_BYTE *)(v3 + 4) = 1;
  *v2 = v3;
  do
    v5 = __ldxr((unsigned int *)v3);
  while (__stxr(v5 + 1, (unsigned int *)v3));
  v6 = (unsigned int **)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = v2;
  if (!v6)
  {
    v10 = *((_QWORD *)this + 11);
    do
LABEL_11:
      v11 = __ldxr(v4);
    while (__stxr(v11 + 1, v4));
    goto LABEL_12;
  }
  v7 = *v6;
  *((_BYTE *)*v6 + 4) = 0;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
    MEMORY[0x20BD0ADEC]();
  MEMORY[0x20BD0ADEC](v6, 0x20C4093837F09);
  v4 = (unsigned int *)**((_QWORD **)this + 7);
  v10 = *((_QWORD *)this + 11);
  if (v4)
    goto LABEL_11;
LABEL_12:
  v12 = (_QWORD *)operator new();
  *v12 = v4;
  v12[1] = this;
  v12[3] = absl::internal_any_invocable::LocalManagerTrivial;
  v12[4] = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(void)::$_1 &&>;
  v13 = 1000 * *((int *)this + 16);
  v17[0] = v12;
  v18 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESC_;
  v19 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN6webrtc8SafeTaskENS2_13scoped_refptrINS2_21PendingTaskSafetyFlagEEENS_12AnyInvocableIFvvOEEEEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  v16 = 0;
  (*(void (**)(uint64_t, _QWORD *, uint64_t, char *, char *))(*(_QWORD *)v10 + 16))(v10, v17, v13, &v16, &v15);
  return v18(1, v17, v17);
}

uint64_t sigslot::_opaque_connection::emitter<webrtc::BasicRegatheringController,cricket::IceTransportInternal *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<webrtc::BasicRegatheringController,rtc::PacketTransportInternal *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t sigslot::_opaque_connection::emitter<webrtc::BasicRegatheringController,std::optional<rtc::NetworkRoute>>(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *);
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v2 = (uint64_t (*)(_QWORD *, _OWORD *))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _OWORD *))(*v4 + v2);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8 = *(_QWORD *)(a2 + 32);
  return v2(v4, v7);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(void)::$_1 &&>(webrtc::BasicRegatheringController **a1)
{
  webrtc::BasicRegatheringController *v1;
  uint64_t v2;

  v1 = *a1;
  v2 = *((_QWORD *)*a1 + 10);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2))
    (*(void (**)(_QWORD *))(**((_QWORD **)v1 + 10) + 72))(*((_QWORD **)v1 + 10));
  return webrtc::BasicRegatheringController::ScheduleRecurringRegatheringOnFailedNetworks(v1);
}

void webrtc::rtcp::Remb::~Remb(webrtc::rtcp::Remb *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0BB3F0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0BB3F0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::rtcp::Remb::Parse(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  char *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  _BYTE *v32;
  unsigned int *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unsigned int *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD *v45;
  unsigned int *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;

  v2 = *(unsigned int *)(a2 + 4);
  if (v2 <= 0xF)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v3, v4, v5, v6, v7, v8, v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/remb.cc");
    return 0;
  }
  v10 = *(_QWORD *)(a2 + 8);
  if (bswap32(*(_DWORD *)(v10 + 8)) != 1380273474)
    return 0;
  v12 = *(unsigned __int8 *)(v10 + 12);
  if (4 * v12 + 16 != v2)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v49, v50, v51, v52, v53, v54, v55, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/remb.cc");
    return 0;
  }
  *(_DWORD *)(a1 + 8) = bswap32(*(_DWORD *)v10);
  *(_DWORD *)(a1 + 12) = bswap32(*(_DWORD *)(v10 + 4));
  v13 = *(unsigned __int8 *)(v10 + 13);
  v14 = v13 >> 2;
  v15 = __rev16(*(unsigned __int16 *)(v10 + 14)) & 0xFFFCFFFF | ((v13 & 3) << 16);
  v16 = v15 << (*(_BYTE *)(v10 + 13) >> 2);
  *(_QWORD *)(a1 + 16) = v16;
  if ((v16 & 0x8000000000000000) != 0 || v16 >> v14 != v15)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)6,unsigned long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)6,unsigned long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v56, v57, v58, v59, v60, v61, v62, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/remb.cc");
    return 0;
  }
  v17 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 32) = v17;
  if (v12 > (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v17) >> 2)
  {
    v18 = (char *)operator new(4 * v12);
    *(_QWORD *)(a1 + 24) = v18;
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = &v18[4 * v12];
    if (v17)
      operator delete(v17);
  }
  if ((_DWORD)v12)
  {
    v19 = 0;
    v20 = (unsigned int *)(v10 + 16);
    v21 = *(unsigned int **)(a1 + 32);
    while (1)
    {
      v23 = bswap32(*v20);
      v24 = *(_QWORD *)(a1 + 40);
      if ((unint64_t)v21 < v24)
      {
        if (!v21)
          goto LABEL_47;
        *v21 = v23;
        v22 = v21 + 1;
        goto LABEL_15;
      }
      v25 = v12;
      v26 = *(unsigned int **)(a1 + 24);
      v27 = v21 - v26;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62)
        goto LABEL_48;
      v29 = v24 - (_QWORD)v26;
      if (v29 >> 1 > v28)
        v28 = v29 >> 1;
      v30 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL;
      v31 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v30)
        v31 = v28;
      if (!v31)
      {
LABEL_47:
        __break(1u);
LABEL_48:
        abort();
      }
      if (v31 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v64 = 4 * v31;
      v32 = operator new(4 * v31);
      v33 = (unsigned int *)&v32[4 * v27];
      *v33 = v23;
      v22 = v33 + 1;
      if (v21 != v26)
        break;
      v12 = v25;
      *(_QWORD *)(a1 + 24) = v33;
      *(_QWORD *)(a1 + 32) = v22;
      *(_QWORD *)(a1 + 40) = &v32[v64];
      if (v26)
        goto LABEL_36;
LABEL_15:
      *(_QWORD *)(a1 + 32) = v22;
      ++v20;
      ++v19;
      v21 = v22;
      if (v19 >= v12)
        return 1;
    }
    v34 = (char *)v21 - (char *)v26 - 4;
    if (v34 < 0xBC
      || ((v35 = ((char *)(v21 - 1) - (char *)v26) & 0xFFFFFFFFFFFFFFFCLL,
           v36 = (unint64_t)&v32[(char *)v21 - (char *)v26 - 4],
           v37 = v36 - v35,
           v38 = (unint64_t)v21 - v35 - 4,
           v37 <= v36)
        ? (v39 = v38 > (unint64_t)(v21 - 1))
        : (v39 = 1),
          v39 || (unint64_t)((char *)v26 - v32) < 0x20))
    {
      v40 = v21;
      v12 = v25;
      v41 = v64;
    }
    else
    {
      v43 = (v34 >> 2) + 1;
      v44 = 4 * (v43 & 0x7FFFFFFFFFFFFFF8);
      v40 = &v21[v44 / 0xFFFFFFFFFFFFFFFCLL];
      v33 = (unsigned int *)((char *)v33 - v44);
      v45 = &v32[4 * v27 - 16];
      v46 = v21 - 4;
      v47 = v43 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v48 = *(_OWORD *)v46;
        *(v45 - 1) = *((_OWORD *)v46 - 1);
        *v45 = v48;
        v45 -= 2;
        v46 -= 8;
        v47 -= 8;
      }
      while (v47);
      v12 = v25;
      v41 = v64;
      if (v43 == (v43 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_33:
        *(_QWORD *)(a1 + 24) = v33;
        *(_QWORD *)(a1 + 32) = v22;
        *(_QWORD *)(a1 + 40) = &v32[v41];
        if (!v26)
          goto LABEL_15;
LABEL_36:
        operator delete(v26);
        goto LABEL_15;
      }
    }
    do
    {
      v42 = *--v40;
      *--v33 = v42;
    }
    while (v40 != v26);
    goto LABEL_33;
  }
  return 1;
}

uint64_t webrtc::rtcp::Remb::BlockLength(webrtc::rtcp::Remb *this)
{
  return *((_QWORD *)this + 4) - *((_QWORD *)this + 3) + 20;
}

uint64_t webrtc::rtcp::Remb::Create(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *i;
  unsigned int v27;

  v12 = *a3;
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) + v12 <= a4)
  {
LABEL_4:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    *(_BYTE *)(a2 + *a3) = -113;
    *(_BYTE *)(*a3 + a2 + 1) = -50;
    *(_BYTE *)(*a3 + a2 + 2) = (unint64_t)(v13 - 4) >> 10;
    *(_BYTE *)(*a3 + a2 + 3) = (unint64_t)(v13 - 4) >> 2;
    v14 = *a3 + 4;
    *a3 = v14;
    v15 = (_DWORD *)(a2 + v14);
    *v15 = bswap32(*(_DWORD *)(a1 + 8));
    v15[1] = bswap32(*(_DWORD *)(a1 + 12));
    v16 = *a3 + 8;
    *a3 = v16;
    *(_DWORD *)(a2 + v16) = 1112360274;
    v17 = *a3 + 4;
    v18 = *(_QWORD *)(a1 + 16);
    if (v18 < 0x40000)
    {
      v21 = 0;
    }
    else
    {
      v19 = 0;
      do
      {
        v20 = v18 >> 19;
        v18 >>= 1;
        ++v19;
      }
      while (v20);
      v21 = 4 * v19;
    }
    v22 = (*(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 24)) >> 2;
    *a3 += 5;
    *(_BYTE *)(a2 + v17) = v22;
    v23 = (*a3)++;
    *(_BYTE *)(a2 + v23) = v21 | BYTE2(v18);
    *(_WORD *)(a2 + *a3) = bswap32(v18) >> 16;
    v24 = *a3 + 2;
    *a3 = v24;
    v25 = *(unsigned int **)(a1 + 24);
    for (i = *(unsigned int **)(a1 + 32); v25 != i; *a3 = v24)
    {
      v27 = *v25++;
      *(_DWORD *)(a2 + v24) = bswap32(v27);
      v24 = *a3 + 4;
    }
    return 1;
  }
  else
  {
    while (*a3)
    {
      a6(a5, a2);
      *a3 = 0;
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1) <= a4)
        goto LABEL_4;
    }
    return 0;
  }
}

void webrtc::RembThrottler::OnReceiveBitrateChanged(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *__p;
  void *v16;
  char *v17;
  uint64_t v18;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40));
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 48));
  if ((uint64_t)((103 * (unint64_t)a3 * (unsigned __int128)0x28F5C28F5C28F5DuLL) >> 64) > *(_QWORD *)(a1 + 120))
  {
    v7 = *(_QWORD *)(a1 + 112);
    v8 = v7 + 200000;
    if (v7 == 0x8000000000000000)
      v8 = 0x8000000000000000;
    if (v7 != 0x7FFFFFFFFFFFFFFFLL)
      v7 = v8;
    if (v6 < v7)
    {
      pthread_mutex_unlock((pthread_mutex_t *)(a1 + 48));
      return;
    }
  }
  *(_QWORD *)(a1 + 112) = v6;
  *(_QWORD *)(a1 + 120) = a3;
  if (*(_QWORD *)(a1 + 128) >= (uint64_t)a3)
    v9 = a3;
  else
    v9 = *(_QWORD *)(a1 + 128);
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 48));
  v16 = 0;
  v17 = 0;
  __p = 0;
  v10 = *(const void **)a2;
  v11 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v11)
  {
    if (v11 < 0)
      goto LABEL_19;
    v12 = (char *)operator new(v11);
    v13 = &v12[4 * (v11 >> 2)];
    __p = v12;
    v17 = v13;
    memcpy(v12, v10, v11);
    v16 = v13;
  }
  v18 = v9;
  v14 = *(_QWORD *)(a1 + 32);
  if (!v14)
  {
    std::__throw_bad_function_call[abi:sn180100]();
LABEL_19:
    abort();
  }
  (*(void (**)(uint64_t, uint64_t *, void **))(*(_QWORD *)v14 + 48))(v14, &v18, &__p);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
}

void webrtc::RembThrottler::~RembThrottler(webrtc::RembThrottler *this)
{
  webrtc::RembThrottler *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0BB420;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 48));
  v2 = (webrtc::RembThrottler *)*((_QWORD *)this + 4);
  if (v2 == (webrtc::RembThrottler *)((char *)this + 8))
  {
    v3 = 4;
    v2 = (webrtc::RembThrottler *)((char *)this + 8);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

{
  webrtc::RembThrottler *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_24C0BB420;
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 48));
  v2 = (webrtc::RembThrottler *)*((_QWORD *)this + 4);
  if (v2 == (webrtc::RembThrottler *)((char *)this + 8))
  {
    v3 = 4;
    v2 = (webrtc::RembThrottler *)((char *)this + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD0ADECLL);
}

unint64_t webrtc::voe::RemixAndResample(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  __int16 *v17;
  __int16 *v18;
  uint64_t v19;
  __int16 *v20;
  uint64_t v21;
  int v22;
  __int16 *v23;
  __int16 *v24;
  unint64_t v25;
  uint64_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int16x8_t *v29;
  unint64_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int16x8_t v33;
  __int16 *v34;
  int v35;
  uint64_t v36;
  __int16 *v37;
  unint64_t v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  unint64_t v42;
  unint64_t v43;
  __int16 *v44;
  const __int16 *v45;
  int v46;
  unint64_t v47;
  __int16 *v48;
  __int16 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t result;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _WORD *v70;
  _BYTE v71[15360];
  uint64_t v72;
  int16x8x2_t v73;
  int16x8x4_t v74;

  v4 = MEMORY[0x24BDAC7A8](a1, a2);
  v10 = v9;
  v11 = v8;
  v12 = v6;
  v13 = v5;
  v14 = (char *)v4;
  v72 = *MEMORY[0x24BDAC8D0];
  v15 = *(_QWORD *)(v9 + 40);
  if (v15 >= v6)
  {
    v15 = v6;
    goto LABEL_56;
  }
  v16 = v15 * v5;
  if (v6 * v5)
    v17 = (__int16 *)v4;
  else
    v17 = 0;
  v18 = (__int16 *)v71;
  if (!v16)
    v18 = 0;
  if (v6 >= 2 && v15 == 1)
  {
    v19 = (int)v6 * v5;
    if (v19 < 1)
    {
      v14 = v71;
      v15 = 1;
      goto LABEL_56;
    }
    v20 = &v17[v19];
    if ((int)v6 <= 1)
    {
      v15 = 1;
      do
      {
        v46 = *v17++;
        *v18++ = v46 / (int)v6;
      }
      while (v17 < v20);
    }
    else
    {
      v21 = (int)v6;
      v15 = 1;
      do
      {
        v23 = v17 + 2;
        v22 = *v17;
        v24 = v17 + 1;
        if (&v17[v21] > v17 + 2)
          v23 = &v17[v21];
        v25 = (char *)v23 - (char *)v17 - 3;
        if (v25 < 0x1E)
          goto LABEL_19;
        v26 = (v25 >> 1) + 1;
        v24 += v26 & 0xFFFFFFFFFFFFFFF0;
        v27 = 0uLL;
        v28 = (int32x4_t)*v17;
        v29 = (int16x8_t *)(v17 + 9);
        v30 = v26 & 0xFFFFFFFFFFFFFFF0;
        v31 = 0uLL;
        v32 = 0uLL;
        do
        {
          v33 = v29[-1];
          v27 = vaddw_high_s16(v27, v33);
          v28 = vaddw_s16(v28, *(int16x4_t *)v33.i8);
          v32 = vaddw_high_s16(v32, *v29);
          v31 = vaddw_s16(v31, *(int16x4_t *)v29->i8);
          v29 += 2;
          v30 -= 16;
        }
        while (v30);
        v22 = vaddvq_s32(vaddq_s32(vaddq_s32(v31, v28), vaddq_s32(v32, v27)));
        if (v26 != (v26 & 0xFFFFFFFFFFFFFFF0))
        {
LABEL_19:
          v34 = &v17[(int)v6];
          do
          {
            v35 = *v24++;
            v22 += v35;
          }
          while (v24 < v34);
        }
        *v18++ = v22 / (int)v6;
        v17 = v24;
      }
      while (v24 < v20);
    }
    goto LABEL_55;
  }
  v14 = v71;
  if (v6 == 4 && v15 == 2)
  {
    if (!(v6 * v5))
      v17 = 0;
    if (!v16)
      v18 = 0;
    if (v5)
    {
      if (v5 < 8
        || ((v36 = 2 * (v5 - 1), v37 = &v18[v36], v38 = (unint64_t)&v18[v36 + 1], v37 >= v18)
          ? (v39 = v38 >= (unint64_t)(v18 + 1))
          : (v39 = 0),
            v39 ? (v40 = (v5 - 1) >> 62 == 0) : (v40 = 0),
            !v40 || (v18 < &v17[4 * v5] ? (v41 = v17 >= &v18[2 * v5]) : (v41 = 1), !v41)))
      {
        v42 = 0;
LABEL_53:
        v47 = v5 - v42;
        v48 = &v17[4 * v42 + 2];
        v49 = &v18[2 * v42 + 1];
        v15 = 2;
        do
        {
          *(v49 - 1) = (*(v48 - 1) + *(v48 - 2)) >> 1;
          *v49 = (v48[1] + *v48) >> 1;
          v49 += 2;
          v48 += 4;
          --v47;
        }
        while (v47);
LABEL_55:
        v14 = v71;
        goto LABEL_56;
      }
      v42 = v5 & 0xFFFFFFFFFFFFFFF8;
      v43 = v5 & 0xFFFFFFFFFFFFFFF8;
      v44 = v18;
      v45 = v17;
      do
      {
        v74 = vld4q_s16(v45);
        v45 += 32;
        v73.val[0] = vhaddq_s16(v74.val[1], v74.val[0]);
        v73.val[1] = vhaddq_s16(v74.val[3], v74.val[2]);
        vst2q_s16(v44, v73);
        v44 += 16;
        v43 -= 8;
      }
      while (v43);
      if (v42 != v5)
        goto LABEL_53;
    }
    v14 = v71;
    v15 = 2;
  }
LABEL_56:
  if (webrtc::PushResampler<short>::InitializeIfNeeded(v8, v7, *(_DWORD *)(v9 + 32), v15) == -1)
  {
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/remix_resample.cc", 64, "FATAL()", rtc::webrtc_checks_impl::LogStreamer<>::Call<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v50, v51, v52, v53, (uint64_t)"InitializeIfNeeded failed: sample_rate_hz = ");
    goto LABEL_79;
  }
  v54 = *(int *)(v10 + 32) / 0x64uLL;
  *(_QWORD *)(v10 + 24) = v54;
  v55 = *(_QWORD *)(v10 + 40);
  v2 = v55 * v54;
  if (v55 * v54 >= 0x1E01)
  {
LABEL_79:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio/audio_frame.cc", 167, "total_samples <= kMaxDataSizeSamples", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long> const&)::t, v50, v51, v52, v53, v2);
    goto LABEL_80;
  }
  if (v55 >= 9)
  {
LABEL_80:
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/api/audio/audio_frame.cc", 168, "num_channels <= kMaxConcurrentChannels", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, v50, v51, v52, v53, v55);
    goto LABEL_81;
  }
  v56 = v15 * v13;
  v3 = (_BYTE *)(v10 + 15432);
  if (*(_BYTE *)(v10 + 15432))
  {
    bzero((void *)(v10 + 72), 2 * v2);
    *v3 = 0;
  }
  *(_QWORD *)(v10 + 24) = v54;
  v13 = v10 + 72;
  if (v2)
    v57 = (char *)(v10 + 72);
  else
    v57 = 0;
  if (v56)
    v58 = v14;
  else
    v58 = 0;
  result = webrtc::PushResampler<short>::Resample(v11, v58, v56, v57, v2, v51, v52, v53);
  if ((_DWORD)result == -1)
  {
LABEL_81:
    if (*v3)
      bzero((void *)v13, 0x3C01uLL);
    rtc::webrtc_checks_impl::FatalLog("/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/audio/remix_resample.cc", 85, "FATAL()", rtc::webrtc_checks_impl::LogStreamer<>::Call<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)12,void const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)12,void const*>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)12,void const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)5,unsigned long>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)12,void const*> const&)::t, v60, v61, v62, v63, (uint64_t)"Resample failed: audio_ptr = ");
  }
  v64 = (int)result / v15;
  *(_QWORD *)(v10 + 24) = v64;
  if (v12 == 1 && *(_QWORD *)(v10 + 40) == 2)
  {
    *(_QWORD *)(v10 + 40) = 1;
    if (2 * v64 <= 0x1E00)
    {
      v65 = *v3;
      *(_QWORD *)(v10 + 40) = 2;
      if (!v65)
      {
        if (2 * v64)
          v66 = v10 + 72;
        else
          v66 = 0;
        v67 = (v64 - 1);
        if ((int)v67 >= 0)
        {
          do
          {
            v68 = v67;
            v69 = 2 * v67;
            v70 = (_WORD *)(v66 + 4 * v68);
            *v70 = *(_WORD *)(v66 + v69);
            v70[1] = *(_WORD *)(v66 + v69);
            v67 = v68 - 1;
          }
          while (v68);
        }
      }
    }
  }
  return result;
}

void webrtc::RemoteAudioSource::~RemoteAudioSource(webrtc::RemoteAudioSource *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  webrtc::RemoteAudioSource *v9;
  uint64_t v10;
  uint64_t v11;
  webrtc::RemoteAudioSource *v12;
  webrtc::RemoteAudioSource *v13;
  uint64_t v14;
  uint64_t v15;
  webrtc::RemoteAudioSource *v16;
  webrtc::RemoteAudioSource *v17;
  uint64_t v18;
  uint64_t v19;
  webrtc::RemoteAudioSource *v20;

  *(_QWORD *)this = &unk_24C0BB448;
  *((_QWORD *)this + 1) = &unk_24C0BB4C8;
  if (*((_QWORD *)this + 21))
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/remote_audio_source.cc");
    if (*((_QWORD *)this + 21))
    {
      v10 = *((_QWORD *)this + 19);
      v9 = (webrtc::RemoteAudioSource *)*((_QWORD *)this + 20);
      v11 = *(_QWORD *)v9;
      *(_QWORD *)(v11 + 8) = *(_QWORD *)(v10 + 8);
      **(_QWORD **)(v10 + 8) = v11;
      *((_QWORD *)this + 21) = 0;
      if (v9 != (webrtc::RemoteAudioSource *)((char *)this + 152))
      {
        do
        {
          v12 = (webrtc::RemoteAudioSource *)*((_QWORD *)v9 + 1);
          operator delete(v9);
          v9 = v12;
        }
        while (v12 != (webrtc::RemoteAudioSource *)((char *)this + 152));
      }
    }
  }
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 88));
  if (*((_QWORD *)this + 10))
  {
    v14 = *((_QWORD *)this + 8);
    v13 = (webrtc::RemoteAudioSource *)*((_QWORD *)this + 9);
    v15 = *(_QWORD *)v13;
    *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
    **(_QWORD **)(v14 + 8) = v15;
    *((_QWORD *)this + 10) = 0;
    if (v13 != (webrtc::RemoteAudioSource *)((char *)this + 64))
    {
      do
      {
        v16 = (webrtc::RemoteAudioSource *)*((_QWORD *)v13 + 1);
        operator delete(v13);
        v13 = v16;
      }
      while (v16 != (webrtc::RemoteAudioSource *)((char *)this + 64));
    }
  }
  *(_QWORD *)this = &unk_24C0B6850;
  *((_QWORD *)this + 1) = &unk_24C0B68D0;
  if (*((_QWORD *)this + 4))
  {
    v18 = *((_QWORD *)this + 2);
    v17 = (webrtc::RemoteAudioSource *)*((_QWORD *)this + 3);
    v19 = *(_QWORD *)v17;
    *(_QWORD *)(v19 + 8) = *(_QWORD *)(v18 + 8);
    **(_QWORD **)(v18 + 8) = v19;
    *((_QWORD *)this + 4) = 0;
    if (v17 != (webrtc::RemoteAudioSource *)((char *)this + 16))
    {
      do
      {
        v20 = (webrtc::RemoteAudioSource *)*((_QWORD *)v17 + 1);
        operator delete(v17);
        v17 = v20;
      }
      while (v20 != (webrtc::RemoteAudioSource *)((char *)this + 16));
    }
  }
}

uint64_t webrtc::RemoteAudioSource::state(webrtc::RemoteAudioSource *this)
{
  return *((unsigned int *)this + 44);
}

uint64_t webrtc::RemoteAudioSource::remote(webrtc::RemoteAudioSource *this)
{
  return 1;
}

void webrtc::RemoteAudioSource::SetVolume(webrtc::RemoteAudioSource *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  void *__p;
  char v14;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    rtc::StringFormat((rtc *)"RAS::%s({volume=%.2f})", (char *)&__p, "SetVolume", *(_QWORD *)&a2);
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)10,std::string const*> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/remote_audio_source.cc");
    if (v14 < 0)
      operator delete(__p);
  }
  v11 = (char *)this + 64;
  for (i = *((_QWORD *)this + 9); (char *)i != v11; i = *(_QWORD *)(i + 8))
    (***(void (****)(_QWORD, double))(i + 16))(*(_QWORD *)(i + 16), a2);
}

_QWORD *webrtc::RemoteAudioSource::RegisterAudioObserver(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  result = operator new(0x18uLL);
  v5 = a1[8];
  a1 += 8;
  result[1] = a1;
  result[2] = a2;
  *result = v5;
  *(_QWORD *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

_QWORD *webrtc::RemoteAudioSource::UnregisterAudioObserver(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *__p;
  uint64_t v21;

  v2 = result + 8;
  v19 = &v19;
  __p = &v19;
  v3 = (_QWORD *)result[9];
  if (v3 == result + 8)
    return result;
  if (&v19 == v2)
  {
    while (1)
    {
      v14 = (_QWORD *)v3[1];
      if (v3[2] == a2)
        break;
LABEL_24:
      v3 = v14;
      if (v14 == &v19)
        return result;
    }
    if (v14 == &v19)
    {
      v15 = 1;
    }
    else
    {
      if (v14[2] != a2)
      {
        v15 = 0;
LABEL_34:
        if (v3 != v14)
        {
          v16 = *v14;
          v17 = *v3;
          *(_QWORD *)(v17 + 8) = *(_QWORD *)(*v14 + 8);
          **(_QWORD **)(v16 + 8) = v17;
          v18 = v19;
          v19[1] = v3;
          *v3 = v18;
          v19 = (_QWORD *)v16;
          *(_QWORD *)(v16 + 8) = &v19;
        }
        if (!v15)
          v14 = (_QWORD *)v14[1];
        goto LABEL_24;
      }
      while (1)
      {
        v14 = (_QWORD *)v14[1];
        v15 = v14 == &v19;
        if (v14 == &v19)
          break;
        if (v14[2] != a2)
          goto LABEL_34;
      }
    }
    v14 = &v19;
    goto LABEL_34;
  }
  v4 = 0;
  v5 = &v19;
  do
  {
    v6 = (_QWORD *)v3[1];
    if (v3[2] == a2)
    {
      if (v6 == v2)
      {
        v7 = 1;
LABEL_11:
        v6 = result + 8;
      }
      else
      {
        while (1)
        {
          v7 = v6[2] == a2;
          if (v6[2] != a2)
            break;
          v6 = (_QWORD *)v6[1];
          if (v6 == v2)
            goto LABEL_11;
        }
      }
      if (v3 != v6)
      {
        v5 = (_QWORD *)*v6;
        v8 = 1;
        if ((_QWORD *)*v6 != v3)
        {
          v9 = v3;
          do
          {
            v9 = (_QWORD *)v9[1];
            ++v8;
          }
          while (v9 != v5);
        }
        result[10] -= v8;
        v4 += v8;
        v10 = *v3;
        *(_QWORD *)(v10 + 8) = v5[1];
        *(_QWORD *)v5[1] = v10;
        v11 = v19;
        v19[1] = v3;
        *v3 = v11;
        v19 = v5;
        v5[1] = &v19;
      }
      if (!v7)
        v6 = (_QWORD *)v6[1];
    }
    v3 = v6;
  }
  while (v6 != v2);
  if (v4)
  {
    result = __p;
    v12 = *(_QWORD *)__p;
    *(_QWORD *)(v12 + 8) = v5[1];
    *(_QWORD *)v5[1] = v12;
    v21 = 0;
    if (result != &v19)
    {
      do
      {
        v13 = (_QWORD *)result[1];
        operator delete(result);
        result = v13;
      }
      while (v13 != &v19);
    }
  }
  return result;
}

uint64_t webrtc::RemoteAudioSource::AddSink(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  pthread_mutex_t *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (_QWORD *)a1;
  v4 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  v5 = operator new(0x18uLL);
  v6 = v3[19];
  v3 += 19;
  v5[1] = v3;
  v5[2] = a2;
  *v5 = v6;
  *(_QWORD *)(v6 + 8) = v5;
  *v3 = v5;
  ++v3[2];
  return pthread_mutex_unlock(v4);
}

uint64_t webrtc::RemoteAudioSource::RemoveSink(uint64_t a1, uint64_t a2)
{
  pthread_mutex_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void *__p;
  uint64_t v26;

  v4 = (pthread_mutex_t *)(a1 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 88));
  v5 = (_QWORD *)(a1 + 152);
  v24 = &v24;
  __p = &v24;
  v6 = *(_QWORD **)(a1 + 160);
  if (v6 == (_QWORD *)(a1 + 152))
    return pthread_mutex_unlock(v4);
  if (&v24 == v5)
  {
    while (1)
    {
      v19 = (_QWORD *)v6[1];
      if (v6[2] == a2)
        break;
LABEL_24:
      v6 = v19;
      if (v19 == &v24)
        return pthread_mutex_unlock(v4);
    }
    if (v19 == &v24)
    {
      v20 = 1;
    }
    else
    {
      if (v19[2] != a2)
      {
        v20 = 0;
LABEL_34:
        if (v6 != v19)
        {
          v21 = *v19;
          v22 = *v6;
          *(_QWORD *)(v22 + 8) = *(_QWORD *)(*v19 + 8);
          **(_QWORD **)(v21 + 8) = v22;
          v23 = v24;
          v24[1] = v6;
          *v6 = v23;
          v24 = (_QWORD *)v21;
          *(_QWORD *)(v21 + 8) = &v24;
        }
        if (!v20)
          v19 = (_QWORD *)v19[1];
        goto LABEL_24;
      }
      while (1)
      {
        v19 = (_QWORD *)v19[1];
        v20 = v19 == &v24;
        if (v19 == &v24)
          break;
        if (v19[2] != a2)
          goto LABEL_34;
      }
    }
    v19 = &v24;
    goto LABEL_34;
  }
  v7 = 0;
  v8 = &v24;
  do
  {
    v9 = (_QWORD *)v6[1];
    if (v6[2] == a2)
    {
      if (v9 == v5)
      {
        v10 = 1;
LABEL_11:
        v9 = (_QWORD *)(a1 + 152);
      }
      else
      {
        while (1)
        {
          v10 = v9[2] == a2;
          if (v9[2] != a2)
            break;
          v9 = (_QWORD *)v9[1];
          if (v9 == v5)
            goto LABEL_11;
        }
      }
      if (v6 != v9)
      {
        v8 = (_QWORD *)*v9;
        v11 = 1;
        if ((_QWORD *)*v9 != v6)
        {
          v12 = v6;
          do
          {
            v12 = (_QWORD *)v12[1];
            ++v11;
          }
          while (v12 != v8);
        }
        *(_QWORD *)(a1 + 168) -= v11;
        v7 += v11;
        v13 = *v6;
        *(_QWORD *)(v13 + 8) = v8[1];
        *(_QWORD *)v8[1] = v13;
        v14 = v24;
        v24[1] = v6;
        *v6 = v14;
        v24 = v8;
        v8[1] = &v24;
      }
      if (!v10)
        v9 = (_QWORD *)v9[1];
    }
    v6 = v9;
  }
  while (v9 != v5);
  if (v7)
  {
    v15 = __p;
    v16 = *(_QWORD *)__p;
    *(_QWORD *)(v16 + 8) = v8[1];
    *(_QWORD *)v8[1] = v16;
    v26 = 0;
    if (v15 != &v24)
    {
      do
      {
        v17 = (_QWORD *)v15[1];
        operator delete(v15);
        v15 = v17;
      }
      while (v17 != &v24);
    }
  }
  return pthread_mutex_unlock(v4);
}

void webrtc::RemoteAudioSource::AudioDataProxy::~AudioDataProxy(webrtc::RemoteAudioSource::AudioDataProxy *this)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  _QWORD v6[2];
  uint64_t (*v7)(char, uint64_t *, uint64_t *);
  _QWORD *(*v8)(_QWORD **);

  *(_QWORD *)this = off_24C0BB4F8;
  v2 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v2 + 56) != 1)
    goto LABEL_3;
  (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 1));
  v3 = *(_QWORD *)(v2 + 40);
  v6[0] = v2;
  v7 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RemoteAudioSource::OnAudioChannelGone(void)::$_0>;
  v8 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RemoteAudioSource::OnAudioChannelGone(void)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v6, &v5, &v4);
  v7(1, v6, v6);
  v2 = *((_QWORD *)this + 1);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  _QWORD v6[2];
  uint64_t (*v7)(char, uint64_t *, uint64_t *);
  _QWORD *(*v8)(_QWORD **);

  *(_QWORD *)this = off_24C0BB4F8;
  v2 = *((_QWORD *)this + 1);
  if (*(_DWORD *)(v2 + 56) != 1)
    goto LABEL_3;
  (**(void (***)(_QWORD))v2)(*((_QWORD *)this + 1));
  v3 = *(_QWORD *)(v2 + 40);
  v6[0] = v2;
  v7 = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RemoteAudioSource::OnAudioChannelGone(void)::$_0>;
  v8 = absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RemoteAudioSource::OnAudioChannelGone(void)::$_0 &&>;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v3 + 8))(v3, v6, &v5, &v4);
  v7(1, v6, v6);
  v2 = *((_QWORD *)this + 1);
  if (v2)
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  MEMORY[0x20BD0ADEC](this, 0xA1C40BD48D6D6);
}

uint64_t webrtc::RemoteAudioSource::AudioDataProxy::OnData(webrtc::RemoteAudioSource::AudioDataProxy *this, const Data *a2)
{
  uint64_t v3;
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t i;

  v3 = *((_QWORD *)this + 1);
  v4 = (pthread_mutex_t *)(v3 + 88);
  pthread_mutex_lock((pthread_mutex_t *)(v3 + 88));
  v5 = v3 + 152;
  for (i = *(_QWORD *)(v3 + 160); i != v5; i = *(_QWORD *)(i + 8))
    (*(void (**)(_QWORD, RenderResolution *, uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(i + 16) + 8))(*(_QWORD *)(i + 16), a2->var0.var0, 16, *(unsigned int *)&a2->var1.var0[16], *(_QWORD *)&a2->var1.var0[24], a2->var0.var1, 0, 0);
  return pthread_mutex_unlock(v4);
}

_QWORD *absl::internal_any_invocable::LocalInvoker<false,void,webrtc::RemoteAudioSource::OnAudioChannelGone(void)::$_0 &&>(_QWORD **a1)
{
  _QWORD *result;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  result = *a1;
  if (result[21])
  {
    v3 = result + 19;
    v5 = result[19];
    v4 = (uint64_t *)result[20];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    result[21] = 0;
    if (v4 != result + 19)
    {
      do
      {
        v7 = (uint64_t *)v4[1];
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != v3);
      result = *a1;
    }
  }
  if (*((_DWORD *)result + 44) != 2)
  {
    *((_DWORD *)result + 44) = 2;
    return webrtc::Notifier<webrtc::AudioTrackInterface>::FireOnChanged(result);
  }
  return result;
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::RemoteAudioSource::OnAudioChannelGone(void)::$_0>(char a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *a2 = 0;
    *a3 = v3;
  }
  result = *a2;
  if (*a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void webrtc::RemoteBitrateEstimatorAbsSendTime::~RemoteBitrateEstimatorAbsSendTime(webrtc::RemoteBitrateEstimatorAbsSendTime *this)
{
  void *v2;
  void *v3;
  webrtc::RemoteBitrateEstimatorAbsSendTime *v4;
  uint64_t v5;
  uint64_t v6;
  webrtc::RemoteBitrateEstimatorAbsSendTime *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  *(_QWORD *)this = &off_24C0BB520;
  *((_QWORD *)this + 79) = off_24C0B4170;
  if ((*((char *)this + 687) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 80);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 83));
  v2 = (void *)*((_QWORD *)this + 80);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 81) = v2;
    operator delete(v2);
  }
LABEL_4:
  *((_QWORD *)this + 71) = off_24C0B4170;
  if (*((char *)this + 623) < 0)
  {
    operator delete(*((void **)this + 75));
    v3 = (void *)*((_QWORD *)this + 72);
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  v3 = (void *)*((_QWORD *)this + 72);
  if (v3)
  {
LABEL_6:
    *((_QWORD *)this + 73) = v3;
    operator delete(v3);
  }
LABEL_7:
  std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 35));
  if (*((_QWORD *)this + 29))
  {
    v5 = *((_QWORD *)this + 27);
    v4 = (webrtc::RemoteBitrateEstimatorAbsSendTime *)*((_QWORD *)this + 28);
    v6 = *(_QWORD *)v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(v5 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    *((_QWORD *)this + 29) = 0;
    if (v4 != (webrtc::RemoteBitrateEstimatorAbsSendTime *)((char *)this + 216))
    {
      do
      {
        v7 = (webrtc::RemoteBitrateEstimatorAbsSendTime *)*((_QWORD *)v4 + 1);
        operator delete(v4);
        v4 = v7;
      }
      while (v7 != (webrtc::RemoteBitrateEstimatorAbsSendTime *)((char *)this + 216));
    }
  }
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 14);
  v8 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v8)
  {
    std::deque<long long>::~deque[abi:sn180100]((void **)(v8 + 96));
    MEMORY[0x20BD0ADEC](v8, 0x1080C40DFEA68C8);
  }
  v9 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v9)
    MEMORY[0x20BD0ADEC](v9, 0x1000C40BDE76CD9);
  *((_QWORD *)this + 2) = &unk_24C0B4260;
  v10 = *((_QWORD *)this + 3);
  if (v10)
  {
    v11 = *((_QWORD *)this + 4);
    v12 = (void *)*((_QWORD *)this + 3);
    if (v11 != v10)
    {
      do
      {
        if (*(char *)(v11 - 1) < 0)
          operator delete(*(void **)(v11 - 24));
        v11 -= 24;
      }
      while (v11 != v10);
      v12 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v10;
    operator delete(v12);
  }
}

{
  webrtc::RemoteBitrateEstimatorAbsSendTime::~RemoteBitrateEstimatorAbsSendTime(this);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RemoteBitrateEstimatorAbsSendTime::IncomingPacket(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;
  unint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  BOOL v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  unsigned int v56;
  BOOL v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t **v64;
  uint64_t **v65;
  unsigned int v66;
  _DWORD *v67;
  uint64_t v68;
  uint64_t *v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  int v83;
  unsigned int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char **v90;
  uint64_t v91;
  BOOL v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  char **v108;
  _QWORD *v109;
  unint64_t v110;
  BOOL v111;
  BOOL v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  int v117;
  char **v118;
  _QWORD *v119;
  void **v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  void **v134;
  char *v135;
  _QWORD *v136;
  void **v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  double v148;
  uint64_t v149;
  int v150;
  unint64_t v151;
  uint64_t v152;
  double v153;
  double v154;
  double v155;
  double v156;
  double v157;
  int v158;
  BOOL v159;
  int v160;
  double v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  double v166;
  double v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  int64_t v174;
  uint64_t v175;
  int64_t v176;
  int v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  char v182;
  void **v183;
  uint64_t v184;
  void (***v185)(_QWORD, char **, uint64_t);
  unint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t *v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  _BYTE *v198;
  char *v199;
  unint64_t v200;
  char *v201;
  int v202;
  uint64_t *v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  _OWORD *v207;
  __int128 *v208;
  uint64_t v209;
  __int128 v210;
  Timestamp v211;
  unint64_t v212;
  char v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _BOOL4 v225;
  BOOL v226;
  BOOL v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  int64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int64_t v243;
  uint64_t v244;
  uint64_t *v245;
  int64x2_t v246;
  int64x2_t v247;
  uint64_t *v248;
  unint64_t v249;
  unint64_t v250;
  uint64_t v251;
  unsigned int v252;
  webrtc::RateStatistics *v253;
  unint64_t v254;
  unint64_t v255;
  void (***v256)(_QWORD, char **, uint64_t);
  uint64_t v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  unsigned int v261;
  char *v262;
  void **v263;
  unint64_t v264;

  if (!*(_BYTE *)(a2 + 37))
    goto LABEL_26;
  v3 = *(unsigned __int8 **)(a2 + 56);
  v4 = *(unsigned __int8 **)(a2 + 64);
  if (v3 == v4)
    goto LABEL_26;
  while (*v3 != *(unsigned __int8 *)(a2 + 37))
  {
    v3 += 4;
    if (v3 == v4)
      goto LABEL_26;
  }
  v6 = *(_QWORD *)(a2 + 88);
  if (v6)
    v6 = *(_QWORD *)(v6 + 16) + *(_QWORD *)(a2 + 96);
  if (v3[1] != 3)
  {
LABEL_26:
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v18, v19, v20, v21, v22, v23, v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/remote_bitrate_estimator_abs_send_time.cc");
    return;
  }
  v7 = (*(unsigned __int8 *)(v6 + *((unsigned __int16 *)v3 + 1)) << 16) | (*(unsigned __int8 *)(v6
                                                                                              + *((unsigned __int16 *)v3
                                                                                                + 1)
                                                                                              + 1) << 8) | *(unsigned __int8 *)(v6 + *((unsigned __int16 *)v3 + 1) + 2);
  v8 = *(_QWORD *)(a2 + 112);
  v257 = *(_QWORD *)(a2 + 24) + *(unsigned __int8 *)(a2 + 2);
  if (!*(_BYTE *)(a1 + 264))
    *(_BYTE *)(a1 + 264) = 1;
  v252 = v7 << 8;
  v9 = (double)(v7 << 8) * 0.0000149011612 * 1000.0;
  v10 = 0x8000000000000000;
  if (v9 != -INFINITY)
    v10 = (uint64_t)v9;
  if (v9 == INFINITY)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v255 = v8 >> 3;
  v13 = v8 / 0x3E8;
  if (v8 % 0x3E8 > 0x1F3)
    ++v13;
  if (-(uint64_t)v8 % 0x3E8uLL <= 0x1F4)
    v14 = 0;
  else
    v14 = -1;
  if ((v8 & 0x8000000000000000) != 0)
    v15 = v14 - -(uint64_t)v8 / 0x3E8uLL;
  else
    v15 = v13;
  webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(a1 + 112), v15);
  if (v16)
  {
    v17 = 1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 208))
      goto LABEL_32;
    webrtc::RateStatistics::Reset((webrtc::RateStatistics *)(a1 + 112));
    v17 = 0;
  }
  *(_BYTE *)(a1 + 208) = v17;
LABEL_32:
  v25 = v8 / 0x3E8;
  if (v8 % 0x3E8 > 0x1F3)
    ++v25;
  if (-(uint64_t)v8 % 0x3E8uLL <= 0x1F4)
    v26 = 0;
  else
    v26 = -1;
  v253 = (webrtc::RateStatistics *)(a1 + 112);
  v254 = v8;
  if ((v8 & 0x8000000000000000) != 0)
    v27 = v26 - -(uint64_t)v8 / 0x3E8uLL;
  else
    v27 = v25;
  webrtc::RateStatistics::Update((webrtc::RateStatistics *)(a1 + 112), v257, v27);
  if ((unint64_t)(*(_QWORD *)(a1 + 248) - 0x7FFFFFFFFFFFFFFFLL) <= 1)
    *(_QWORD *)(a1 + 248) = v12;
  v261 = 0;
  v260 = 0;
  v259 = 0;
  v28 = *(uint64_t **)(a1 + 272);
  v29 = (uint64_t *)(a1 + 280);
  if (v28 != (uint64_t *)(a1 + 280))
  {
    if (v12 == 0x7FFFFFFFFFFFFFFFLL)
    {
      do
      {
        v31 = (uint64_t *)v28[1];
        v32 = v31;
        v33 = v28;
        if (v31)
        {
          do
          {
            v34 = v32;
            v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v34 = (uint64_t *)v33[2];
            v92 = *v34 == (_QWORD)v33;
            v33 = v34;
          }
          while (!v92);
        }
        v35 = v28;
        if (v31)
        {
          do
          {
            v36 = v31;
            v31 = (uint64_t *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v36 = (uint64_t *)v35[2];
            v92 = *v36 == (_QWORD)v35;
            v35 = v36;
          }
          while (!v92);
        }
        if (*(uint64_t **)(a1 + 272) == v28)
          *(_QWORD *)(a1 + 272) = v36;
        v30 = *(uint64_t **)(a1 + 280);
        --*(_QWORD *)(a1 + 288);
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v30, v28);
        operator delete(v28);
        v28 = v34;
      }
      while (v34 != v29);
    }
    else
    {
      do
      {
        v38 = v28[5];
        if (v38 != 0x8000000000000000
          && (v12 == 0x8000000000000000
           || (v38 != 0x7FFFFFFFFFFFFFFFLL ? (v39 = (uint64_t)(v12 - v38) <= 2000000) : (v39 = 1), v39)))
        {
          v46 = (uint64_t *)v28[1];
          if (v46)
          {
            do
            {
              v43 = v46;
              v46 = (uint64_t *)*v46;
            }
            while (v46);
          }
          else
          {
            do
            {
              v43 = (uint64_t *)v28[2];
              v92 = *v43 == (_QWORD)v28;
              v28 = v43;
            }
            while (!v92);
          }
        }
        else
        {
          v40 = (uint64_t *)v28[1];
          v41 = v40;
          v42 = v28;
          if (v40)
          {
            do
            {
              v43 = v41;
              v41 = (uint64_t *)*v41;
            }
            while (v41);
          }
          else
          {
            do
            {
              v43 = (uint64_t *)v42[2];
              v92 = *v43 == (_QWORD)v42;
              v42 = v43;
            }
            while (!v92);
          }
          v44 = v28;
          if (v40)
          {
            do
            {
              v45 = v40;
              v40 = (uint64_t *)*v40;
            }
            while (v40);
          }
          else
          {
            do
            {
              v45 = (uint64_t *)v44[2];
              v92 = *v45 == (_QWORD)v44;
              v44 = v45;
            }
            while (!v92);
          }
          if (*(uint64_t **)(a1 + 272) == v28)
            *(_QWORD *)(a1 + 272) = v45;
          v37 = *(uint64_t **)(a1 + 280);
          --*(_QWORD *)(a1 + 288);
          std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v37, v28);
          operator delete(v28);
        }
        v28 = v43;
      }
      while (v43 != v29);
    }
  }
  if (!*(_QWORD *)(a1 + 288))
  {
    v47 = operator new();
    *(_DWORD *)v47 = 335544;
    *(_QWORD *)(v47 + 8) = 0;
    *(_QWORD *)(v47 + 16) = 0;
    *(_QWORD *)(v47 + 24) = -1;
    *(_QWORD *)(v47 + 32) = -1;
    *(_QWORD *)(v47 + 48) = 0;
    *(_QWORD *)(v47 + 56) = 0;
    *(_QWORD *)(v47 + 64) = -1;
    *(_QWORD *)(v47 + 72) = -1;
    *(_QWORD *)(v47 + 88) = 0x3EEF400000000000;
    *(_DWORD *)(v47 + 96) = 0;
    v48 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v47;
    if (v48)
      MEMORY[0x20BD0ADEC](v48, 0x1000C40BDE76CD9);
    v49 = operator new();
    *(_DWORD *)v49 = 0;
    *(_QWORD *)(v49 + 16) = 0;
    *(_QWORD *)(v49 + 24) = 0;
    *(_QWORD *)(v49 + 8) = 0x3F90000000000000;
    *(_OWORD *)(v49 + 32) = constinit;
    *(_OWORD *)(v49 + 48) = unk_208F16C60;
    *(_OWORD *)(v49 + 64) = xmmword_208F16C20;
    *(_OWORD *)(v49 + 80) = xmmword_208F16C30;
    *(_OWORD *)(v49 + 96) = 0u;
    *(_OWORD *)(v49 + 112) = 0u;
    *(_OWORD *)(v49 + 128) = 0u;
    v50 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = v49;
    if (v50)
    {
      std::deque<long long>::~deque[abi:sn180100]((void **)(v50 + 96));
      MEMORY[0x20BD0ADEC](v50, 0x1080C40DFEA68C8);
    }
  }
  v51 = *(_DWORD *)(a2 + 12);
  v52 = (uint64_t *)*v29;
  if (*v29)
  {
    v53 = a1 + 280;
    v54 = *v29;
    v55 = v254;
    do
    {
      v56 = *(_DWORD *)(v54 + 32);
      v57 = v56 >= v51;
      if (v56 >= v51)
        v58 = (uint64_t *)v54;
      else
        v58 = (uint64_t *)(v54 + 8);
      if (v57)
        v53 = v54;
      v54 = *v58;
    }
    while (*v58);
    v59 = *v29;
    v60 = (_QWORD *)(a1 + 280);
    if ((uint64_t *)v53 != v29)
    {
      if (*(_DWORD *)(v53 + 32) <= v51)
      {
        *(_QWORD *)(v53 + 40) = v12;
        goto LABEL_132;
      }
      v59 = *(_QWORD *)v53;
      v60 = (_QWORD *)v53;
    }
    if (*(_QWORD **)(a1 + 272) == v60)
    {
      v62 = v60;
      goto LABEL_121;
    }
    if (v59)
    {
      v61 = (_QWORD *)v59;
      do
      {
        v62 = v61;
        v61 = (_QWORD *)v61[1];
      }
      while (v61);
      goto LABEL_110;
    }
  }
  else
  {
    v60 = (_QWORD *)(a1 + 280);
    v55 = v254;
    if (*(uint64_t **)(a1 + 272) == v29)
    {
      v59 = 0;
      v60 = (_QWORD *)(a1 + 280);
      v62 = (_QWORD *)(a1 + 280);
      goto LABEL_121;
    }
  }
  v62 = v60;
  do
  {
    v63 = v62;
    v62 = (_QWORD *)v62[2];
  }
  while ((_QWORD *)*v62 == v63);
  v59 = 0;
LABEL_110:
  if (*((_DWORD *)v62 + 8) >= v51)
  {
    v64 = (uint64_t **)(a1 + 280);
    v65 = (uint64_t **)(a1 + 280);
    if (v52)
    {
      while (1)
      {
        while (1)
        {
          v65 = (uint64_t **)v52;
          v66 = *((_DWORD *)v52 + 8);
          if (v66 <= v51)
            break;
          v52 = *v65;
          v64 = v65;
          if (!*v65)
            goto LABEL_128;
        }
        if (v66 >= v51)
          goto LABEL_132;
        v52 = v65[1];
        if (!v52)
        {
          v64 = v65 + 1;
          goto LABEL_128;
        }
      }
    }
    goto LABEL_128;
  }
LABEL_121:
  if (v59)
    v65 = (uint64_t **)v62;
  else
    v65 = (uint64_t **)v60;
  if (v59)
    v64 = (uint64_t **)(v62 + 1);
  else
    v64 = (uint64_t **)v60;
  if (!*v64)
  {
LABEL_128:
    v67 = operator new(0x30uLL);
    v67[8] = v51;
    *((_QWORD *)v67 + 5) = v12;
    *(_QWORD *)v67 = 0;
    *((_QWORD *)v67 + 1) = 0;
    *((_QWORD *)v67 + 2) = v65;
    *v64 = (uint64_t *)v67;
    v68 = **(_QWORD **)(a1 + 272);
    if (v68)
    {
      *(_QWORD *)(a1 + 272) = v68;
      v69 = *v64;
    }
    else
    {
      v69 = (uint64_t *)v67;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 280), v69);
    ++*(_QWORD *)(a1 + 288);
  }
LABEL_132:
  if (v257 < 201)
    goto LABEL_139;
  if (*(_BYTE *)(a1 + 528))
  {
    v70 = 0;
    if (v12 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_254;
    v71 = *(_QWORD *)(a1 + 248);
    if (v71 == 0x8000000000000000)
      goto LABEL_254;
    if (v12 != 0x8000000000000000 && v71 != 0x7FFFFFFFFFFFFFFFLL && (uint64_t)(v12 - v71) >= 2000000)
    {
LABEL_139:
      v70 = 0;
      goto LABEL_254;
    }
  }
  if (*(_QWORD *)(a1 + 240) <= 0xEuLL && (rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, v72, v73, v74, v75, v76, v77, v78, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/remote_bitrate_estimator_abs_send_time.cc");
  v79 = operator new(0x28uLL);
  v81 = (uint64_t *)(a1 + 216);
  v80 = *(_QWORD *)(a1 + 216);
  v79[2] = v11;
  v79[3] = v55;
  v79[4] = v257;
  *v79 = v80;
  v79[1] = a1 + 216;
  *(_QWORD *)(v80 + 8) = v79;
  *(_QWORD *)(a1 + 216) = v79;
  v246 = *(int64x2_t *)(a1 + 232);
  v247 = vaddq_s64(v246, vdupq_n_s64(1uLL));
  *(int64x2_t *)(a1 + 232) = v247;
  v262 = (char *)&v262;
  v263 = (void **)&v262;
  v264 = 0;
  v82 = *(uint64_t **)(a1 + 224);
  if (v82 == (uint64_t *)(a1 + 216))
    goto LABEL_248;
  v245 = *(uint64_t **)(a1 + 224);
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v251 = 0;
  v88 = 0x8000000000000000;
  v89 = 0x8000000000000000;
  v90 = &v262;
  v248 = (uint64_t *)(a1 + 216);
  do
  {
    v95 = v82[2];
    if (v89 + 0x7FFFFFFFFFFFFFFFLL > 0xFFFFFFFFFFFFFFFDLL)
      goto LABEL_157;
    if (v95 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v97 = v95 - v89;
      if (v95 == 0x8000000000000000)
        v100 = v82[2];
      else
        v100 = v95 - v89;
      v101 = v82[3];
      if (v101 == 0x7FFFFFFFFFFFFFFFLL || v88 == 0x8000000000000000)
      {
        v99 = 0x7FFFFFFFFFFFFFFFLL;
        if (v100 <= 999)
          goto LABEL_198;
LABEL_182:
        ++v83;
        goto LABEL_183;
      }
      if (v88 == 0x7FFFFFFFFFFFFFFFLL || v101 == 0x8000000000000000)
        v99 = 0x8000000000000000;
      else
        v99 = v101 - v88;
      if (v100 <= 999)
      {
LABEL_198:
        v97 = v100;
        if (!v84)
          goto LABEL_199;
        goto LABEL_184;
      }
      goto LABEL_179;
    }
    v96 = v82[3];
    v97 = 0x7FFFFFFFFFFFFFFFLL;
    v98 = v96 == 0x7FFFFFFFFFFFFFFFLL || v88 == 0x8000000000000000;
    v99 = 0x7FFFFFFFFFFFFFFFLL;
    if (v98)
      goto LABEL_182;
    v99 = 0x8000000000000000;
    if (v96 != 0x8000000000000000 && v88 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v99 = v96 - v88;
LABEL_179:
      if (v99 >= 1000)
        goto LABEL_182;
    }
LABEL_183:
    if (!v84)
      goto LABEL_199;
LABEL_184:
    v103 = 0x7FFFFFFFFFFFFFFFLL;
    if (v97 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v104 = v87 / (int)v84;
      if (v104 != 0x8000000000000000)
      {
        v103 = v97 - v104;
        if (v104 == 0x7FFFFFFFFFFFFFFFLL || v97 == 0x8000000000000000)
          v103 = 0x8000000000000000;
      }
    }
    if (v103 < 0)
      v103 = -v103;
    if ((unint64_t)v103 >= 0x9C4)
    {
      v106 = 0;
      if ((int)v84 < 4 || v87 < 1 || v86 < 1)
      {
        v84 = 0;
        v83 = 0;
        v86 = 0;
        v85 = 0;
        v110 = 0x7FFFFFFFFFFFFFFFLL;
        v87 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        v249 = v86 / (unint64_t)v84;
        v250 = v87 / (unint64_t)v84;
        v107 = v85 / v84;
        v108 = v90;
        v109 = operator new(0x30uLL);
        v106 = 0;
        v86 = 0;
        v85 = 0;
        v109[2] = v250;
        v81 = (uint64_t *)(a1 + 216);
        v109[3] = v249;
        v109[4] = v107;
        v29 = (uint64_t *)(a1 + 280);
        *((_DWORD *)v109 + 10) = v84;
        *((_DWORD *)v109 + 11) = v83;
        *v109 = v108;
        v109[1] = &v262;
        v108[1] = (char *)v109;
        v55 = v254;
        v90 = (char **)v109;
        v262 = (char *)v109;
        v264 = ++v251;
        v84 = 0;
        v83 = 0;
        v110 = 0x7FFFFFFFFFFFFFFFLL;
        v87 = 0x7FFFFFFFFFFFFFFFLL;
      }
LABEL_200:
      if (v97 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v111 = v97 == 0x8000000000000000 || v106 == 0x8000000000000000;
        v87 = v106 + v97;
        if (v111)
          v87 = 0x8000000000000000;
      }
      goto LABEL_206;
    }
LABEL_199:
    v106 = v87;
    v110 = 0x7FFFFFFFFFFFFFFFLL;
    v87 = 0x7FFFFFFFFFFFFFFFLL;
    if (v106 != 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_200;
LABEL_206:
    if (v86 != 0x7FFFFFFFFFFFFFFFLL && v99 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v112 = v99 == 0x8000000000000000 || v86 == 0x8000000000000000;
      v113 = v86 + v99;
      if (v112)
        v110 = 0x8000000000000000;
      else
        v110 = v113;
    }
    v91 = v82[4];
    v92 = v91 == 0x8000000000000000 || v85 == 0x8000000000000000;
    v93 = v91 + v85;
    if (v92)
      v93 = 0x8000000000000000;
    if (v91 == 0x7FFFFFFFFFFFFFFFLL)
      v94 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v94 = v93;
    if (v85 == 0x7FFFFFFFFFFFFFFFLL)
      v85 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v85 = v94;
    ++v84;
    v95 = v82[2];
    v86 = v110;
LABEL_157:
    v88 = v82[3];
    v82 = (uint64_t *)v82[1];
    v89 = v95;
  }
  while (v82 != v81);
  if ((int)v84 >= 4 && v87 >= 1 && v86 >= 1)
  {
    v114 = v87 / (unint64_t)v84;
    v115 = v86 / (unint64_t)v84;
    v116 = v85 / v84;
    v117 = v83;
    v118 = v90;
    v119 = operator new(0x30uLL);
    v119[2] = v114;
    v119[3] = v115;
    v119[4] = v116;
    *((_DWORD *)v119 + 10) = v84;
    *((_DWORD *)v119 + 11) = v117;
    *v119 = v118;
    v119[1] = &v262;
    v118[1] = (char *)v119;
    v262 = (char *)v119;
    v264 = ++v251;
  }
  v82 = v245;
  if (!v251)
  {
LABEL_248:
    if (v247.i64[0] >= 0xFuLL)
    {
      v132 = *v82;
      *(_QWORD *)(v132 + 8) = v82[1];
      *(_QWORD *)v82[1] = v132;
      *(_QWORD *)(a1 + 232) = v246.i64[0];
      operator delete(v82);
    }
    goto LABEL_250;
  }
  v120 = v263;
  if (v263 == (void **)&v262)
    goto LABEL_420;
  v121 = 0;
  v122 = 0;
  while (1)
  {
    v123 = (uint64_t)v120[2];
    if (v123)
    {
      v124 = (uint64_t)v120[3];
      if (v124)
        break;
    }
LABEL_222:
    v120 = (void **)v120[1];
    if (v120 == (void **)&v262)
      goto LABEL_404;
  }
  if (*((_DWORD *)v120 + 11) > *((_DWORD *)v120 + 10) / 2
    && v123 != 0x8000000000000000
    && v124 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v127 = v123 == 0x7FFFFFFFFFFFFFFFLL || v124 == 0x8000000000000000;
    v128 = v127;
    if (v127 || v124 - v123 <= 2000)
    {
      if (v123 - v124 > 5000)
        v128 = 1;
      if ((v128 & 1) == 0)
      {
        v129 = 8000000 * (_QWORD)v120[4];
        v130 = v129 / v123;
        v131 = v129 / v124;
        if (v131 < v130)
          v130 = v131;
        if (v130 > v122)
        {
          v122 = v130;
          v121 = (uint64_t *)(v120 + 2);
        }
        goto LABEL_222;
      }
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v214, v215, v216, v217, v218, v219, v220, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/remote_bitrate_estimator_abs_send_time.cc");
LABEL_404:
  if (!v121
    || ((v221 = 8000000 * v121[2], v222 = v221 / *v121, v223 = v221 / v121[1], v223 >= v222)
      ? (v224 = v222)
      : (v224 = v223),
        !*(_BYTE *)(a1 + 528) ? (v225 = 0) : (v225 = *(_QWORD *)(a1 + 312) < v224),
        v224 > 0 ? (v226 = *(_BYTE *)(a1 + 528) == 0) : (v226 = 0),
        !v226 ? (v227 = !v225) : (v227 = 0),
        v227))
  {
LABEL_420:
    if (v264 < 3)
    {
      v133 = 1;
      if (!v264)
        goto LABEL_253;
      goto LABEL_251;
    }
    if (*(_QWORD *)(a1 + 232))
    {
      v236 = *(_QWORD *)(a1 + 216);
      v235 = *(uint64_t **)(a1 + 224);
      v237 = *v235;
      *(_QWORD *)(v237 + 8) = *(_QWORD *)(v236 + 8);
      **(_QWORD **)(v236 + 8) = v237;
      *(_QWORD *)(a1 + 232) = 0;
      if (v235 != v248)
      {
        do
        {
          v238 = (uint64_t *)v235[1];
          operator delete(v235);
          v235 = v238;
        }
        while (v238 != v248);
      }
    }
LABEL_250:
    v133 = 1;
    if (!v264)
      goto LABEL_253;
    goto LABEL_251;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v228, v229, v230, v231, v232, v233, v234, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/remote_bitrate_estimator_abs_send_time.cc");
  *(_BYTE *)(a1 + 528) = 1;
  v239 = *(_QWORD *)(a1 + 312);
  if (*(_BYTE *)(a1 + 625))
  {
    if (!*(_BYTE *)(a1 + 488))
      goto LABEL_446;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 488))
      goto LABEL_446;
    v240 = *(_QWORD *)(a1 + 400);
    if ((unint64_t)(v240 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      if (v240 <= v239)
        v241 = *(_QWORD *)(a1 + 312);
      else
        v241 = *(_QWORD *)(a1 + 400);
      if (*(_BYTE *)(a1 + 689))
        v240 = v241;
      if (v240 < v224)
        v224 = v240;
    }
  }
  v242 = *(_QWORD *)(a1 + 392);
  if ((unint64_t)(v242 + 0x7FFFFFFFFFFFFFFFLL) <= 0xFFFFFFFFFFFFFFFDLL && v224 < v239)
  {
    v243 = llround(*(double *)(a1 + 536) * (double)v242);
    if (v224 > v243)
      v243 = v224;
    if (v243 >= v239)
      v224 = *(_QWORD *)(a1 + 312);
    else
      v224 = v243;
  }
LABEL_446:
  v244 = *(_QWORD *)(a1 + 296);
  if (v224 > v244)
    v244 = v224;
  *(_QWORD *)(a1 + 312) = v244;
  *(_QWORD *)(a1 + 504) = v12;
  if (v244 >= v239)
  {
    v133 = 0;
    if (v264)
      goto LABEL_251;
  }
  else
  {
    v133 = 0;
    *(_QWORD *)(a1 + 512) = v12;
    if (!v264)
      goto LABEL_253;
LABEL_251:
    v135 = v262;
    v134 = v263;
    v136 = *v263;
    v136[1] = *((_QWORD *)v262 + 1);
    **((_QWORD **)v135 + 1) = v136;
    v264 = 0;
    if (v134 != (void **)&v262)
    {
      do
      {
        v137 = (void **)v134[1];
        operator delete(v134);
        v134 = v137;
      }
      while (v137 != (void **)&v262);
    }
  }
LABEL_253:
  v70 = v133 == 0;
LABEL_254:
  v138 = (unint64_t)((v255 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
  if (v55 - 1000 * v138 <= 0x1F3)
    v139 = (unint64_t)((v255 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
  else
    v139 = v138 + 1;
  if (-v55 % 0x3E8uLL <= 0x1F4)
    v140 = 0;
  else
    v140 = -1;
  v141 = v140 - -v55 / 0x3E8uLL;
  if (v55 < 0)
    v142 = v141;
  else
    v142 = v139;
  v143 = v12 / 0x3E8;
  if (v12 % 0x3E8 > 0x1F3)
    ++v143;
  if (-(uint64_t)v12 % 0x3E8uLL <= 0x1F4)
    v144 = 0;
  else
    v144 = -1;
  v145 = v144 - -(uint64_t)v12 / 0x3E8uLL;
  if ((v12 & 0x8000000000000000) != 0)
    v146 = v145;
  else
    v146 = v143;
  if (webrtc::InterArrival::ComputeDeltas(*(webrtc::InterArrival **)(a1 + 56), v252, v142, v146, v257, &v261, &v260, &v259))
  {
    LODWORD(v147) = v261;
    v148 = (double)v147 * 1000.0 * 0.0000000149011612;
    webrtc::OveruseEstimator::Update(*(_QWORD *)(a1 + 64), v260, v259, *(_DWORD *)(a1 + 108), v148);
    v149 = *(_QWORD *)(a1 + 64);
    v150 = *(_DWORD *)v149;
    if (v55 < 0)
    {
      if (-v55 % 0x3E8uLL <= 0x1F4)
        v152 = 0;
      else
        v152 = -1;
      v151 = v152 - -v55 / 0x3E8uLL;
      if (v150 < 2)
        goto LABEL_308;
    }
    else
    {
      v151 = (unint64_t)((v255 * (unsigned __int128)0x20C49BA5E353F7CFuLL) >> 64) >> 4;
      if (v55 - 1000 * v151 > 0x1F3)
        ++v151;
      if (v150 < 2)
        goto LABEL_308;
    }
    v153 = *(double *)(v149 + 16);
    if (v150 >= 0x3C)
      v150 = 60;
    v154 = v153 * (double)v150;
    v155 = *(double *)(a1 + 72);
    if (v154 <= v155)
    {
      v160 = v154 < -v155;
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
      *(_DWORD *)(a1 + 104) = 0;
LABEL_294:
      *(_DWORD *)(a1 + 108) = v160;
    }
    else
    {
      v156 = *(double *)(a1 + 96);
      if (v156 == -1.0)
        v157 = v148 * 0.5;
      else
        v157 = v148 + v156;
      *(double *)(a1 + 96) = v157;
      v158 = *(_DWORD *)(a1 + 104);
      *(_DWORD *)(a1 + 104) = v158 + 1;
      v159 = v157 <= 10.0 || v158 < 1;
      if (!v159 && *(double *)(a1 + 88) <= v153)
      {
        *(_QWORD *)(a1 + 96) = 0;
        *(_DWORD *)(a1 + 104) = 0;
        v160 = 2;
        goto LABEL_294;
      }
    }
    *(double *)(a1 + 88) = v153;
    v161 = fabs(v154);
    if (v161 <= v155 + 15.0)
    {
      v162 = *(_QWORD *)(a1 + 80);
      v163 = v151 - v162;
      if ((uint64_t)(v151 - v162) >= 100)
        v163 = 100;
      if (v162 == -1)
        v164 = 0;
      else
        v164 = v163;
      v165 = v155 + (v161 - v155) * *((double *)&xmmword_208F16C10 + (v161 < v155)) * (double)v164;
      v166 = 600.0;
      if (v165 < 600.0)
        v166 = v165;
      if (v165 > 6.0)
        v167 = v166;
      else
        v167 = 6.0;
      *(double *)(a1 + 72) = v167;
    }
    *(_QWORD *)(a1 + 80) = v151;
  }
LABEL_308:
  if (v70)
    goto LABEL_458;
  v168 = *(_QWORD *)(a1 + 256);
  if ((unint64_t)(v168 - 0x7FFFFFFFFFFFFFFFLL) < 2)
    goto LABEL_458;
  if ((v12 & 0x8000000000000000) != 0)
  {
    v170 = -(uint64_t)v12 % 0x3E8uLL <= 0x1F4 ? 0 : -1;
    v169 = v170 - -(uint64_t)v12 / 0x3E8uLL;
  }
  else
  {
    v169 = v12 / 0x3E8;
    if (v12 % 0x3E8 > 0x1F3)
      ++v169;
  }
  v171 = v168 / 0x3E8uLL;
  if (v168 % 0x3E8uLL > 0x1F3)
    ++v171;
  if (-v168 % 0x3E8uLL <= 0x1F4)
    v172 = 0;
  else
    v172 = -1;
  if (v168 < 0)
    v173 = v172 - -v168 / 0x3E8uLL;
  else
    v173 = v171;
  v174 = v169 - v173;
  v175 = 640000000 / (uint64_t)llround((double)*(uint64_t *)(a1 + 312) * 0.05);
  if (v175 >= 1000000)
    v175 = 1000000;
  if (v175 <= 200000)
    LODWORD(v175) = 200000;
  v176 = v175 % 0x3E8 <= 0x1F3 ? v175 / 0x3E8uLL : v175 / 0x3E8uLL + 1;
  if (v174 > v176
    || *(_DWORD *)(a1 + 108) == 2
    && (v211.var0 = v55, v212 = webrtc::BitrateTracker::Rate(v253, v211), v213)
    && webrtc::AimdRateControl::TimeToReduceFurther(a1 + 296, v12, v212))
  {
LABEL_458:
    v177 = *(_DWORD *)(a1 + 108);
    v178 = v55 / 0x3E8uLL;
    if (v55 % 0x3E8uLL > 0x1F3)
      ++v178;
    if (-v55 % 0x3E8uLL <= 0x1F4)
      v179 = 0;
    else
      v179 = -1;
    if (v55 < 0)
      v180 = v179 - -v55 / 0x3E8uLL;
    else
      v180 = v178;
    v181 = webrtc::RateStatistics::Rate(v253, v180);
    if (v182)
      v183 = (void **)v181;
    else
      v183 = 0;
    LODWORD(v262) = v177;
    v263 = v183;
    v264 = v182 != 0;
    if (!*(_BYTE *)(a1 + 528))
    {
      v191 = *(_QWORD *)(a1 + 520);
      if ((unint64_t)(v191 - 0x7FFFFFFFFFFFFFFFLL) > 1)
      {
        if ((v12 == 0x7FFFFFFFFFFFFFFFLL || v12 != 0x8000000000000000 && (uint64_t)(v12 - v191) >= 5000001) && v182)
        {
          *(_QWORD *)(a1 + 312) = v183;
          *(_BYTE *)(a1 + 528) = 1;
        }
      }
      else if (v182)
      {
        *(_QWORD *)(a1 + 520) = v12;
      }
    }
    webrtc::AimdRateControl::ChangeBitrate(a1 + 296, (int *)&v262, v12);
    if (*(_BYTE *)(a1 + 528))
    {
      v184 = *(_QWORD *)(a1 + 312);
      *(_QWORD *)(a1 + 256) = v12;
      v185 = *(void (****)(_QWORD, char **, uint64_t))(a1 + 48);
      v262 = 0;
      v263 = 0;
      v264 = 0;
      v186 = *(_QWORD *)(a1 + 288);
      if (v186)
      {
        if (v186 >> 62)
          goto LABEL_454;
        v187 = 4 * v186;
        v188 = (char *)operator new(4 * v186);
        v189 = &v188[v187];
        v262 = v188;
        v263 = (void **)v188;
        v264 = (unint64_t)v189;
        v190 = *(uint64_t **)(a1 + 272);
        if (v190 == v29)
        {
LABEL_391:
          (**v185)(v185, &v262, v184);
          if (v262)
          {
            v263 = (void **)v262;
            operator delete(v262);
          }
          return;
        }
      }
      else
      {
        v189 = 0;
        v188 = 0;
        v190 = *(uint64_t **)(a1 + 272);
        if (v190 == v29)
          goto LABEL_391;
      }
      v256 = v185;
      v258 = v184;
      v192 = v188;
      v193 = v188;
      while (2)
      {
        if (v188 < v189)
        {
          if (!v188)
            goto LABEL_453;
          *(_DWORD *)v188 = *((_DWORD *)v190 + 8);
          v188 += 4;
          v194 = (uint64_t *)v190[1];
          if (!v194)
          {
            do
            {
LABEL_377:
              v203 = (uint64_t *)v190[2];
              v92 = *v203 == (_QWORD)v190;
              v190 = v203;
            }
            while (!v92);
            goto LABEL_356;
          }
          do
          {
LABEL_375:
            v203 = v194;
            v194 = (uint64_t *)*v194;
          }
          while (v194);
LABEL_356:
          v190 = v203;
          if (v203 == v29)
          {
            v262 = v192;
            v263 = (void **)v188;
            v264 = (unint64_t)v189;
            v185 = v256;
            v184 = v258;
            goto LABEL_391;
          }
          continue;
        }
        break;
      }
      v195 = (v188 - v193) >> 2;
      v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 62)
        goto LABEL_454;
      if ((v189 - v193) >> 1 > v196)
        v196 = (v189 - v193) >> 1;
      if ((unint64_t)(v189 - v193) >= 0x7FFFFFFFFFFFFFFCLL)
        v196 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v196)
      {
LABEL_453:
        __break(1u);
LABEL_454:
        abort();
      }
      if (v196 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v197 = 4 * v196;
      v198 = operator new(4 * v196);
      v192 = &v198[4 * v195];
      *(_DWORD *)v192 = *((_DWORD *)v190 + 8);
      v199 = v192 + 4;
      if (v188 != v193)
      {
        v200 = v188 - v193 - 4;
        if (v200 < 0xBC)
        {
          v201 = v188;
          goto LABEL_371;
        }
        v204 = (v188 - 4 - v193) & 0xFFFFFFFFFFFFFFFCLL;
        if (&v198[v188 - v193 - 4 - v204] > &v198[v188 - v193 - 4])
        {
          v201 = v188;
          goto LABEL_371;
        }
        if (&v188[-v204 - 4] > v188 - 4)
        {
          v201 = v188;
          goto LABEL_371;
        }
        if ((unint64_t)(v193 - v198) < 0x20)
        {
          v201 = v188;
          goto LABEL_371;
        }
        v205 = (v200 >> 2) + 1;
        v206 = 4 * (v205 & 0x7FFFFFFFFFFFFFF8);
        v201 = &v188[-v206];
        v192 -= v206;
        v207 = &v198[4 * v195 - 16];
        v208 = (__int128 *)(v188 - 16);
        v209 = v205 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v210 = *v208;
          *(v207 - 1) = *(v208 - 1);
          *v207 = v210;
          v207 -= 2;
          v208 -= 2;
          v209 -= 8;
        }
        while (v209);
        if (v205 != (v205 & 0x7FFFFFFFFFFFFFF8))
        {
          do
          {
LABEL_371:
            v202 = *((_DWORD *)v201 - 1);
            v201 -= 4;
            *((_DWORD *)v192 - 1) = v202;
            v192 -= 4;
          }
          while (v201 != v193);
        }
      }
      v189 = &v198[v197];
      if (v193)
        operator delete(v193);
      v193 = v192;
      v188 = v199;
      v194 = (uint64_t *)v190[1];
      if (!v194)
        goto LABEL_377;
      goto LABEL_375;
    }
  }
}

uint64_t webrtc::RemoteBitrateEstimatorAbsSendTime::Process(webrtc::RemoteBitrateEstimatorAbsSendTime *this)
{
  return 0x7FFFFFFFFFFFFFFFLL;
}

uint64_t webrtc::RemoteBitrateEstimatorAbsSendTime::OnRttUpdate(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 552) = 1000 * a2;
  return this;
}

void webrtc::RemoteBitrateEstimatorAbsSendTime::RemoveStream(webrtc::RemoteBitrateEstimatorAbsSendTime *this, unsigned int a2)
{
  uint64_t *v3;
  char *v4;
  uint64_t *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t **v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;

  v3 = (uint64_t *)*((_QWORD *)this + 35);
  if (v3)
  {
    v4 = (char *)this + 280;
    v5 = v3;
    do
    {
      v6 = *((_DWORD *)v5 + 8);
      v7 = v6 >= a2;
      if (v6 >= a2)
        v8 = (uint64_t **)v5;
      else
        v8 = (uint64_t **)(v5 + 1);
      if (v7)
        v4 = (char *)v5;
      v5 = *v8;
    }
    while (*v8);
    if (v4 != (char *)this + 280 && *((_DWORD *)v4 + 8) <= a2)
    {
      v9 = (char *)*((_QWORD *)v4 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        v11 = v4;
        do
        {
          v10 = (char *)*((_QWORD *)v11 + 2);
          v12 = *(_QWORD *)v10 == (_QWORD)v11;
          v11 = v10;
        }
        while (!v12);
      }
      if (*((char **)this + 34) == v4)
        *((_QWORD *)this + 34) = v10;
      --*((_QWORD *)this + 36);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v3, (uint64_t *)v4);
      operator delete(v4);
    }
  }
}

uint64_t webrtc::RemoteBitrateEstimatorAbsSendTime::LatestEstimate(webrtc::RemoteBitrateEstimatorAbsSendTime *this)
{
  if (*((_BYTE *)this + 528) && *((_QWORD *)this + 36))
    return *((_QWORD *)this + 39);
  else
    return 0;
}

void webrtc::RemoteBitrateEstimatorSingleStream::~RemoteBitrateEstimatorSingleStream(webrtc::RemoteBitrateEstimatorSingleStream *this)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_24C0BB568;
  *((_QWORD *)this + 64) = off_24C0B4170;
  if ((*((char *)this + 567) & 0x80000000) == 0)
  {
    v2 = (void *)*((_QWORD *)this + 65);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*((void **)this + 68));
  v2 = (void *)*((_QWORD *)this + 65);
  if (v2)
  {
LABEL_3:
    *((_QWORD *)this + 66) = v2;
    operator delete(v2);
  }
LABEL_4:
  *((_QWORD *)this + 56) = off_24C0B4170;
  if ((*((char *)this + 503) & 0x80000000) == 0)
  {
    v3 = (void *)*((_QWORD *)this + 57);
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  operator delete(*((void **)this + 60));
  v3 = (void *)*((_QWORD *)this + 57);
  if (v3)
  {
LABEL_6:
    *((_QWORD *)this + 58) = v3;
    operator delete(v3);
  }
LABEL_7:
  std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 9);
  std::__tree<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>>>::destroy(*((void ***)this + 7));
  *((_QWORD *)this + 2) = &unk_24C0B4260;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *((_QWORD *)this + 4);
    v6 = (void *)*((_QWORD *)this + 3);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 1) < 0)
          operator delete(*(void **)(v5 - 24));
        v5 -= 24;
      }
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 3);
    }
    *((_QWORD *)this + 4) = v4;
    operator delete(v6);
  }
}

{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  *(_QWORD *)this = &off_24C0BB568;
  *((_QWORD *)this + 64) = off_24C0B4170;
  if (*((char *)this + 567) < 0)
  {
    operator delete(*((void **)this + 68));
    v2 = (void *)*((_QWORD *)this + 65);
    if (!v2)
    {
LABEL_4:
      *((_QWORD *)this + 56) = off_24C0B4170;
      if (*((char *)this + 503) < 0)
      {
        operator delete(*((void **)this + 60));
        v3 = (void *)*((_QWORD *)this + 57);
        if (!v3)
        {
LABEL_7:
          std::deque<webrtc::EncoderOvershootDetector::BitrateUpdate>::~deque[abi:sn180100]((void **)this + 9);
          std::__tree<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>>>::destroy(*((void ***)this + 7));
          *((_QWORD *)this + 2) = &unk_24C0B4260;
          v4 = *((_QWORD *)this + 3);
          if (v4)
          {
            v5 = *((_QWORD *)this + 4);
            v6 = (void *)*((_QWORD *)this + 3);
            if (v5 != v4)
            {
              do
              {
                if (*(char *)(v5 - 1) < 0)
                  operator delete(*(void **)(v5 - 24));
                v5 -= 24;
              }
              while (v5 != v4);
              v6 = (void *)*((_QWORD *)this + 3);
            }
            *((_QWORD *)this + 4) = v4;
            operator delete(v6);
          }
          JUMPOUT(0x20BD0ADECLL);
        }
      }
      else
      {
        v3 = (void *)*((_QWORD *)this + 57);
        if (!v3)
          goto LABEL_7;
      }
      *((_QWORD *)this + 58) = v3;
      operator delete(v3);
      goto LABEL_7;
    }
  }
  else
  {
    v2 = (void *)*((_QWORD *)this + 65);
    if (!v2)
      goto LABEL_4;
  }
  *((_QWORD *)this + 66) = v2;
  operator delete(v2);
  goto LABEL_4;
}

void webrtc::RemoteBitrateEstimatorSingleStream::IncomingPacket(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  char *v13;
  uint64_t **v14;
  char *v15;
  unsigned int v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  double v42;
  int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  int v49;
  BOOL v50;
  int v51;
  uint64_t v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  int v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  Timestamp v71;
  int v72;
  uint64_t v73;
  unsigned int v74;

  v4 = *(unsigned __int8 *)(a2 + 33);
  if (!*(_BYTE *)(a2 + 33))
    goto LABEL_6;
  v5 = *(unsigned __int8 **)(a2 + 56);
  v6 = *(unsigned __int8 **)(a2 + 64);
  if (v5 == v6)
  {
LABEL_5:
    LOBYTE(v4) = 0;
LABEL_6:
    v7 = 0;
    v8 = 0;
    goto LABEL_7;
  }
  while (*v5 != v4)
  {
    v5 += 4;
    if (v5 == v6)
      goto LABEL_5;
  }
  v52 = *(_QWORD *)(a2 + 88);
  if (v52)
    v52 = *(_QWORD *)(v52 + 16) + *(_QWORD *)(a2 + 96);
  v8 = v5[1];
  if (v5[1])
  {
    if (v8 == 3)
    {
      v53 = (unsigned __int8 *)(v52 + *((unsigned __int16 *)v5 + 1));
      v54 = *v53;
      v55 = (char)v54;
      v56 = v53[2] | (v54 << 16) | (v53[1] << 8);
      v4 = v56 | 0xFF000000;
      if (v55 >= 0)
        v4 = v56;
      v7 = v4 & 0xFFFFFF00;
    }
    else
    {
      LOBYTE(v4) = 0;
      v7 = 0;
    }
    v8 = v8 == 3;
  }
  else
  {
    LOBYTE(v4) = 0;
    v7 = 0;
  }
LABEL_7:
  v9 = v7 & 0xFFFFFF00 | v4;
  if (!*(_BYTE *)(a1 + 624))
    *(_BYTE *)(a1 + 624) = 1;
  v10 = *(_DWORD *)(a2 + 12);
  if (!v8)
    v9 = 0;
  v11 = *(_DWORD *)(a2 + 8) + v9;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v14 = (uint64_t **)(a1 + 56);
  v13 = *(char **)(a1 + 56);
  if (v13)
  {
    while (1)
    {
      while (1)
      {
        v15 = v13;
        v16 = *((_DWORD *)v13 + 8);
        if (v16 <= v10)
          break;
        v13 = *(char **)v15;
        v14 = (uint64_t **)v15;
        if (!*(_QWORD *)v15)
          goto LABEL_18;
      }
      if (v16 >= v10)
        break;
      v13 = (char *)*((_QWORD *)v15 + 1);
      if (!v13)
      {
        v14 = (uint64_t **)(v15 + 8);
        goto LABEL_18;
      }
    }
  }
  else
  {
    v15 = (char *)(a1 + 56);
LABEL_18:
    v17 = v15;
    v15 = (char *)operator new(0x150uLL);
    *((_DWORD *)v15 + 8) = v10;
    *((_QWORD *)v15 + 5) = 0;
    *((_DWORD *)v15 + 12) = 450;
    *((_QWORD *)v15 + 7) = 0;
    *((_QWORD *)v15 + 8) = 0;
    *((_QWORD *)v15 + 9) = -1;
    *((_QWORD *)v15 + 10) = -1;
    *((_QWORD *)v15 + 12) = 0;
    *((_QWORD *)v15 + 13) = 0;
    *((_QWORD *)v15 + 14) = -1;
    *((_QWORD *)v15 + 15) = -1;
    *((_QWORD *)v15 + 17) = 0x3F86C16C16C16C17;
    *((_DWORD *)v15 + 36) = 0;
    *((_DWORD *)v15 + 38) = 0;
    *((_QWORD *)v15 + 21) = 0;
    *((_QWORD *)v15 + 22) = 0;
    *((_QWORD *)v15 + 20) = 0x3F90000000000000;
    *(_OWORD *)(v15 + 200) = unk_208F16C60;
    *(_OWORD *)(v15 + 184) = constinit;
    *(_OWORD *)(v15 + 216) = xmmword_208F16C20;
    *(_OWORD *)(v15 + 232) = xmmword_208F16C30;
    *(_OWORD *)(v15 + 248) = 0u;
    *(_OWORD *)(v15 + 264) = 0u;
    *(_OWORD *)(v15 + 280) = 0u;
    *((_QWORD *)v15 + 37) = 0x4029000000000000;
    *((_QWORD *)v15 + 38) = -1;
    *((_QWORD *)v15 + 39) = 0;
    *((_QWORD *)v15 + 40) = 0xBFF0000000000000;
    *((_QWORD *)v15 + 41) = 0;
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = v17;
    *v14 = (uint64_t *)v15;
    v18 = (uint64_t *)v15;
    v19 = **(_QWORD **)(a1 + 48);
    if (v19)
    {
      *(_QWORD *)(a1 + 48) = v19;
      v18 = *v14;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), v18);
    ++*(_QWORD *)(a1 + 64);
  }
  *((_QWORD *)v15 + 5) = v12;
  v20 = v12 / 0x3E8;
  if (v12 % 0x3E8 > 0x1F3)
    ++v20;
  if (-(uint64_t)v12 % 0x3E8uLL <= 0x1F4)
    v21 = 0;
  else
    v21 = -1;
  if ((v12 & 0x8000000000000000) != 0)
    v22 = v21 - -(uint64_t)v12 / 0x3E8uLL;
  else
    v22 = v20;
  v23 = webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(a1 + 72), v22);
  if (v24)
  {
    *(_QWORD *)(a1 + 168) = v23;
  }
  else if (*(uint64_t *)(a1 + 168) >= 1)
  {
    webrtc::RateStatistics::Reset((webrtc::RateStatistics *)(a1 + 72));
    *(_QWORD *)(a1 + 168) = 0;
  }
  v25 = *(_QWORD *)(a2 + 24) + *(unsigned __int8 *)(a2 + 2);
  v26 = v12 / 0x3E8;
  if (v12 % 0x3E8 <= 0x1F3)
    v27 = v12 / 0x3E8;
  else
    v27 = v26 + 1;
  if (-(uint64_t)v12 % 0x3E8uLL <= 0x1F4)
    v28 = 0;
  else
    v28 = -1;
  v29 = v28 - -(uint64_t)v12 / 0x3E8uLL;
  if ((v12 & 0x8000000000000000) != 0)
    v30 = v29;
  else
    v30 = v27;
  webrtc::RateStatistics::Update((webrtc::RateStatistics *)(a1 + 72), *(_QWORD *)(a2 + 24) + *(unsigned __int8 *)(a2 + 2), v30);
  v31 = *((_DWORD *)v15 + 83);
  v74 = 0;
  v73 = 0;
  v72 = 0;
  if (v12 % 0x3E8 <= 0x1F3)
    v32 = v12 / 0x3E8;
  else
    v32 = v26 + 1;
  if (-(uint64_t)v12 % 0x3E8uLL <= 0x1F4)
    v33 = 0;
  else
    v33 = -1;
  v34 = v33 - -(uint64_t)v12 / 0x3E8uLL;
  if ((v12 & 0x8000000000000000) != 0)
    v35 = v34;
  else
    v35 = v32;
  v36 = *(_QWORD *)(a2 + 112);
  v37 = v36 / 0x3E8uLL;
  if (v36 % 0x3E8uLL > 0x1F3)
    ++v37;
  if (-v36 % 0x3E8uLL <= 0x1F4)
    v38 = 0;
  else
    v38 = -1;
  v39 = v38 - -v36 / 0x3E8uLL;
  if (v36 < 0)
    v40 = v39;
  else
    v40 = v37;
  if (webrtc::InterArrival::ComputeDeltas((webrtc::InterArrival *)(v15 + 48), v11, v40, v35, v25, &v74, &v73, &v72))
  {
    LODWORD(v41) = v74;
    v42 = (double)v41 * 0.0111111111;
    webrtc::OveruseEstimator::Update((uint64_t)(v15 + 152), v73, v72, *((_DWORD *)v15 + 83), v42);
    v43 = *((_DWORD *)v15 + 38);
    if (v43 >= 2)
    {
      v44 = *((double *)v15 + 21);
      if (v43 >= 0x3C)
        v43 = 60;
      v45 = v44 * (double)v43;
      v46 = *((double *)v15 + 37);
      if (v45 <= v46)
      {
        v51 = v45 < -v46;
        *((_QWORD *)v15 + 40) = 0xBFF0000000000000;
        *((_DWORD *)v15 + 82) = 0;
      }
      else
      {
        v47 = *((double *)v15 + 40);
        if (v47 == -1.0)
          v48 = v42 * 0.5;
        else
          v48 = v42 + v47;
        *((double *)v15 + 40) = v48;
        v49 = *((_DWORD *)v15 + 82);
        *((_DWORD *)v15 + 82) = v49 + 1;
        v50 = v48 <= 10.0 || v49 < 1;
        if (v50 || *((double *)v15 + 39) > v44)
          goto LABEL_82;
        *((_QWORD *)v15 + 40) = 0;
        *((_DWORD *)v15 + 82) = 0;
        v51 = 2;
      }
      *((_DWORD *)v15 + 83) = v51;
LABEL_82:
      *((double *)v15 + 39) = v44;
      v57 = fabs(v45);
      if (v57 <= v46 + 15.0)
      {
        v58 = *((_QWORD *)v15 + 38);
        v59 = v35 - v58;
        if (v35 - v58 >= 100)
          v59 = 100;
        if (v58 == -1)
          v60 = 0;
        else
          v60 = v59;
        v61 = v46 + (v57 - v46) * *((double *)&xmmword_208F16C10 + (v57 < v46)) * (double)v60;
        v62 = 600.0;
        if (v61 < 600.0)
          v62 = v61;
        if (v61 > 6.0)
          v63 = v62;
        else
          v63 = 6.0;
        *((double *)v15 + 37) = v63;
      }
      *((_QWORD *)v15 + 38) = v35;
    }
  }
  if (*((_DWORD *)v15 + 83) == 2)
  {
    v64 = v12 / 0x3E8;
    if (v12 % 0x3E8 > 0x1F3)
      ++v64;
    if (-(uint64_t)v12 % 0x3E8uLL <= 0x1F4)
      v65 = 0;
    else
      v65 = -1;
    if ((v12 & 0x8000000000000000) != 0)
      v66 = v65 - -(uint64_t)v12 / 0x3E8uLL;
    else
      v66 = v64;
    v67 = webrtc::RateStatistics::Rate((webrtc::RateStatistics *)(a1 + 72), v66);
    if (v68)
    {
      if (v31 != 2)
        goto LABEL_117;
      if (v12 == 0x7FFFFFFFFFFFFFFFLL)
        goto LABEL_117;
      v69 = *(_QWORD *)(a1 + 384);
      if (v69 == 0x8000000000000000)
        goto LABEL_117;
      v70 = *(_QWORD *)(a1 + 432);
      if (v70 >= 200000)
        v70 = 200000;
      if (v70 <= 10000)
        v70 = 10000;
      if (v12 != 0x8000000000000000 && v69 != 0x7FFFFFFFFFFFFFFFLL && (uint64_t)(v12 - v69) >= v70
        || *(_BYTE *)(a1 + 408) && (uint64_t)llround((double)*(uint64_t *)(a1 + 192) * 0.5) > v67)
      {
LABEL_117:
        v71.var0 = v12;
        webrtc::RemoteBitrateEstimatorSingleStream::UpdateEstimate((Timestamp *)a1, v71);
      }
    }
  }
}

void webrtc::RemoteBitrateEstimatorSingleStream::UpdateEstimate(Timestamp *this, Timestamp a2)
{
  Timestamp *var0;
  char *v5;
  int var0_high;
  uint64_t *v7;
  char *v8;
  char *v9;
  _QWORD *p_var0;
  char *v11;
  BOOL v12;
  Timestamp *v13;
  Timestamp **v14;
  uint64_t *v15;
  int64_t v16;
  BOOL v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  char *v21;
  Timestamp *v22;
  Timestamp **v23;
  char *v24;
  Timestamp *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (***v34)(_QWORD, void **, uint64_t);
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  int64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  char *v48;
  unint64_t v49;
  char *v50;
  int v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  void (***v60)(_QWORD, void **, uint64_t);
  uint64_t v61;
  void *__p;
  void *v63;
  char *v64;
  int v65;
  unint64_t v66;
  _BOOL8 v67;

  var0 = (Timestamp *)this[6].var0;
  v5 = (char *)&this[7];
  if (var0 == &this[7])
  {
    var0_high = 0;
  }
  else
  {
    if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
    {
      do
      {
        v8 = (char *)var0[1].var0;
        v9 = v8;
        p_var0 = &var0->var0;
        if (v8)
        {
          do
          {
            v11 = v9;
            v9 = *(char **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v11 = (char *)p_var0[2];
            v12 = *(_QWORD *)v11 == (_QWORD)p_var0;
            p_var0 = v11;
          }
          while (!v12);
        }
        v13 = var0;
        if (v8)
        {
          do
          {
            v14 = (Timestamp **)v8;
            v8 = *(char **)v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v14 = (Timestamp **)v13[2].var0;
            v12 = *v14 == v13;
            v13 = (Timestamp *)v14;
          }
          while (!v12);
        }
        if ((Timestamp *)this[6].var0 == var0)
          this[6].var0 = (int64_t)v14;
        v7 = (uint64_t *)this[7].var0;
        --this[8].var0;
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v7, &var0->var0);
        std::deque<long long>::~deque[abi:sn180100]((void **)&var0[31]);
        operator delete(var0);
        var0 = (Timestamp *)v11;
      }
      while (v11 != v5);
      var0_high = 0;
      if (!this[8].var0)
        return;
      goto LABEL_48;
    }
    var0_high = 0;
    do
    {
      v16 = var0[5].var0;
      if (v16 != 0x8000000000000000
        && (a2.var0 == 0x8000000000000000
         || (v16 != 0x7FFFFFFFFFFFFFFFLL ? (v17 = a2.var0 - v16 < 2000001) : (v17 = 1), v17)))
      {
        if (SHIDWORD(var0[41].var0) > var0_high)
          var0_high = HIDWORD(var0[41].var0);
        v24 = (char *)var0[1].var0;
        if (v24)
        {
          do
          {
            v21 = v24;
            v24 = *(char **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = var0;
            var0 = (Timestamp *)var0[2].var0;
          }
          while ((Timestamp *)var0->var0 != v25);
          v21 = (char *)var0;
        }
      }
      else
      {
        v18 = (char *)var0[1].var0;
        v19 = v18;
        v20 = &var0->var0;
        if (v18)
        {
          do
          {
            v21 = v19;
            v19 = *(char **)v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v21 = (char *)v20[2];
            v12 = *(_QWORD *)v21 == (_QWORD)v20;
            v20 = v21;
          }
          while (!v12);
        }
        v22 = var0;
        if (v18)
        {
          do
          {
            v23 = (Timestamp **)v18;
            v18 = *(char **)v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v23 = (Timestamp **)v22[2].var0;
            v12 = *v23 == v22;
            v22 = (Timestamp *)v23;
          }
          while (!v12);
        }
        if ((Timestamp *)this[6].var0 == var0)
          this[6].var0 = (int64_t)v23;
        v15 = (uint64_t *)this[7].var0;
        --this[8].var0;
        std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v15, &var0->var0);
        std::deque<long long>::~deque[abi:sn180100]((void **)&var0[31]);
        operator delete(var0);
      }
      var0 = (Timestamp *)v21;
    }
    while (v21 != v5);
  }
  if (!this[8].var0)
    return;
LABEL_48:
  v26 = (unint64_t)a2.var0 / 0x3E8;
  if ((unint64_t)a2.var0 % 0x3E8 > 0x1F3)
    ++v26;
  if (-a2.var0 % 0x3E8uLL <= 0x1F4)
    v27 = 0;
  else
    v27 = -1;
  if (a2.var0 < 0)
    v28 = v27 - -a2.var0 / 0x3E8uLL;
  else
    v28 = v26;
  v29 = webrtc::RateStatistics::Rate((webrtc::RateStatistics *)&this[9], v28);
  if (v30)
    v31 = v29;
  else
    v31 = 0;
  v65 = var0_high;
  v66 = v31;
  v67 = v30 != 0;
  if (!LOBYTE(this[51].var0))
  {
    v40 = this[50].var0;
    if ((unint64_t)(v40 - 0x7FFFFFFFFFFFFFFFLL) > 1)
    {
      if ((a2.var0 == 0x7FFFFFFFFFFFFFFFLL || a2.var0 != 0x8000000000000000 && a2.var0 - v40 >= 5000001) && v30)
      {
        this[24].var0 = v31;
        LOBYTE(this[51].var0) = 1;
      }
    }
    else if (v30)
    {
      this[50].var0 = a2.var0;
    }
  }
  webrtc::AimdRateControl::ChangeBitrate((uint64_t)&this[22], &v65, a2.var0);
  if (LOBYTE(this[51].var0))
  {
    v32 = this[24].var0;
    v33 = 640000000 / (uint64_t)llround((double)v32 * 0.05);
    if (v33 >= 1000000)
      v33 = 1000000;
    if (v33 <= 200000)
      v33 = 200000;
    this[77].var0 = v33;
    v34 = (void (***)(_QWORD, void **, uint64_t))this[74].var0;
    if (v34)
    {
      __p = 0;
      v63 = 0;
      v64 = 0;
      v35 = this[8].var0;
      if (v35)
      {
        if (v35 >> 62)
          goto LABEL_119;
        v36 = 4 * v35;
        v37 = (char *)operator new(4 * v35);
        v38 = &v37[v36];
        __p = v37;
        v63 = v37;
        v64 = v38;
        v39 = (char *)this[6].var0;
        if (v39 == v5)
          goto LABEL_115;
      }
      else
      {
        v38 = 0;
        v37 = 0;
        v39 = (char *)this[6].var0;
        if (v39 == v5)
        {
LABEL_115:
          (**v34)(v34, &__p, v32);
          if (__p)
          {
            v63 = __p;
            operator delete(__p);
          }
          return;
        }
      }
      v60 = v34;
      v61 = v32;
      v41 = v37;
      v42 = v37;
      while (v37 < v38)
      {
        if (!v37)
          goto LABEL_118;
        *(_DWORD *)v37 = *((_DWORD *)v39 + 8);
        v37 += 4;
        v43 = (char *)*((_QWORD *)v39 + 1);
        if (v43)
        {
          do
          {
LABEL_99:
            v52 = v43;
            v43 = *(char **)v43;
          }
          while (v43);
          goto LABEL_80;
        }
        do
        {
LABEL_101:
          v52 = (char *)*((_QWORD *)v39 + 2);
          v12 = *(_QWORD *)v52 == (_QWORD)v39;
          v39 = v52;
        }
        while (!v12);
LABEL_80:
        v39 = v52;
        if (v52 == v5)
        {
          __p = v41;
          v63 = v37;
          v64 = v38;
          v34 = v60;
          v32 = v61;
          goto LABEL_115;
        }
      }
      v44 = (v37 - v42) >> 2;
      v45 = v44 + 1;
      if ((unint64_t)(v44 + 1) >> 62)
        goto LABEL_119;
      if ((v38 - v42) >> 1 > v45)
        v45 = (v38 - v42) >> 1;
      if ((unint64_t)(v38 - v42) >= 0x7FFFFFFFFFFFFFFCLL)
        v45 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v45)
      {
LABEL_118:
        __break(1u);
LABEL_119:
        abort();
      }
      if (v45 >> 62)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v46 = 4 * v45;
      v47 = operator new(4 * v45);
      v41 = &v47[4 * v44];
      *(_DWORD *)v41 = *((_DWORD *)v39 + 8);
      v48 = v41 + 4;
      if (v37 == v42)
        goto LABEL_96;
      v49 = v37 - v42 - 4;
      if (v49 < 0xBC)
      {
        v50 = v37;
        goto LABEL_95;
      }
      v53 = (v37 - 4 - v42) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v47[v37 - v42 - 4 - v53] > &v47[v37 - v42 - 4])
      {
        v50 = v37;
      }
      else
      {
        if (&v37[-v53 - 4] <= v37 - 4)
        {
          if ((unint64_t)(v42 - v47) < 0x20)
          {
            v50 = v37;
            goto LABEL_95;
          }
          v54 = (v49 >> 2) + 1;
          v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
          v50 = &v37[-v55];
          v41 -= v55;
          v56 = &v47[4 * v44 - 16];
          v57 = (__int128 *)(v37 - 16);
          v58 = v54 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v59 = *v57;
            *(v56 - 1) = *(v57 - 1);
            *v56 = v59;
            v56 -= 2;
            v57 -= 2;
            v58 -= 8;
          }
          while (v58);
          if (v54 != (v54 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_95;
LABEL_96:
          v38 = &v47[v46];
          if (v42)
            operator delete(v42);
          v42 = v41;
          v37 = v48;
          v43 = (char *)*((_QWORD *)v39 + 1);
          if (v43)
            goto LABEL_99;
          goto LABEL_101;
        }
        v50 = v37;
      }
      do
      {
LABEL_95:
        v51 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v41 - 1) = v51;
        v41 -= 4;
      }
      while (v50 != v42);
      goto LABEL_96;
    }
  }
}

uint64_t webrtc::RemoteBitrateEstimatorSingleStream::Process(webrtc::RemoteBitrateEstimatorSingleStream *this)
{
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;
  Timestamp v19;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v3 = v2;
  v4 = v2;
  if (*((_BYTE *)this + 608))
  {
    v5 = *((_QWORD *)this + 77);
    v6 = *((_QWORD *)this + 75);
    v7 = 0x8000000000000000;
    if (v5 != 0x8000000000000000 && v6 != 0x8000000000000000)
      v7 = v6 + v5;
    if (v6 == 0x7FFFFFFFFFFFFFFFLL || v5 == 0x7FFFFFFFFFFFFFFFLL)
      v4 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v4 = v7;
  }
  v10 = v2 / 0x3E8uLL;
  if (v2 % 0x3E8uLL > 0x1F3)
    ++v10;
  if (-v2 % 0x3E8uLL <= 0x1F4)
    v11 = 0;
  else
    v11 = -1;
  v12 = v11 - -v2 / 0x3E8uLL;
  if (v2 < 0)
    v10 = v12;
  v13 = v4 / 0x3E8uLL;
  if (v4 % 0x3E8uLL > 0x1F3)
    ++v13;
  if (-v4 % 0x3E8uLL <= 0x1F4)
    v14 = 0;
  else
    v14 = -1;
  v15 = v14 - -v4 / 0x3E8uLL;
  if (v4 >= 0)
    v15 = v13;
  if (v10 >= v15)
  {
    v19.var0 = v2;
    webrtc::RemoteBitrateEstimatorSingleStream::UpdateEstimate((Timestamp *)this, v19);
    if (!*((_BYTE *)this + 608))
      *((_BYTE *)this + 608) = 1;
    *((_QWORD *)this + 75) = v3;
    return *((_QWORD *)this + 77);
  }
  else
  {
    result = 0x7FFFFFFFFFFFFFFFLL;
    if (v4 != 0x7FFFFFFFFFFFFFFFLL && v3 != 0x8000000000000000)
    {
      if (v3 == 0x7FFFFFFFFFFFFFFFLL || v4 == 0x8000000000000000)
        return 0x8000000000000000;
      else
        return v4 - v3;
    }
  }
  return result;
}

uint64_t webrtc::RemoteBitrateEstimatorSingleStream::OnRttUpdate(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 432) = 1000 * a2;
  return this;
}

void webrtc::RemoteBitrateEstimatorSingleStream::RemoveStream(webrtc::RemoteBitrateEstimatorSingleStream *this, unsigned int a2)
{
  uint64_t *v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t **v9;
  char *v10;
  char *v11;
  char *v12;
  BOOL v13;

  v4 = (char *)this + 56;
  v3 = (uint64_t *)*((_QWORD *)this + 7);
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = *((_DWORD *)v6 + 8);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = (char *)v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((_DWORD *)v5 + 8) <= a2)
    {
      v10 = (char *)*((_QWORD *)v5 + 1);
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (char *)*((_QWORD *)v12 + 2);
          v13 = *(_QWORD *)v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if (*((char **)this + 6) == v5)
        *((_QWORD *)this + 6) = v11;
      --*((_QWORD *)this + 8);
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v3, (uint64_t *)v5);
      std::deque<long long>::~deque[abi:sn180100]((void **)v5 + 31);
      operator delete(v5);
    }
  }
}

uint64_t webrtc::RemoteBitrateEstimatorSingleStream::LatestEstimate(webrtc::RemoteBitrateEstimatorSingleStream *this)
{
  if (*((_BYTE *)this + 408) && *((_QWORD *)this + 8))
    return *((_QWORD *)this + 24);
  else
    return 0;
}

void std::__tree<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>>>::destroy(void **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,webrtc::RemoteBitrateEstimatorSingleStream::Detector>>>::destroy(a1[1]);
    std::deque<long long>::~deque[abi:sn180100](a1 + 31);
    operator delete(a1);
  }
}

uint64_t webrtc::rtcp::GetRemoteEstimateSerializer(webrtc::rtcp *this)
{
  unsigned __int8 v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12[3];
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  char v17[8];
  _QWORD v18[3];
  _QWORD *v19;
  char v20;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v1 = atomic_load((unsigned __int8 *)&qword_253EA57A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_253EA57A0))
  {
    v3 = (_QWORD *)operator new();
    v15[0] = &off_24C0BB610;
    v16 = v15;
    v17[0] = 1;
    v19 = v18;
    v18[0] = &off_24C0BB610;
    v13[0] = &off_24C0BB658;
    v14 = v13;
    v20 = 2;
    v22 = v21;
    v21[0] = &off_24C0BB658;
    v4 = v22;
    if (v22 == v21)
    {
      v5 = 4;
      v4 = v21;
    }
    else
    {
      if (!v22)
        goto LABEL_9;
      v5 = 5;
    }
    (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_9:
    v6 = v19;
    if (v19 == v18)
    {
      v7 = 4;
      v6 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_14;
      v7 = 5;
    }
    (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_14:
    v8 = v14;
    if (v14 == v13)
    {
      v9 = 4;
      v8 = v13;
    }
    else
    {
      if (!v14)
        goto LABEL_19;
      v9 = 5;
    }
    (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_19:
    v10 = v16;
    if (v16 == v15)
    {
      v11 = 4;
      v10 = v15;
    }
    else
    {
      if (!v16)
      {
LABEL_24:
        _MergedGlobals_16 = (uint64_t)v3;
        __cxa_guard_release(&qword_253EA57A0);
        return _MergedGlobals_16;
      }
      v11 = 5;
    }
    (*(void (**)(void))(*v10 + 8 * v11))();
    goto LABEL_24;
  }
  return _MergedGlobals_16;
}

_QWORD *std::vector<webrtc::rtcp::`anonymous namespace'::DataRateSerializer>::vector[abi:sn180100](_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0x666666666666667)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v5 = 40 * a3;
    v6 = operator new(40 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v8 = a2 + v5;
    do
    {
      v9 = a2 + v7;
      v6[v7] = *(_BYTE *)(a2 + v7);
      v10 = (uint64_t)&v6[v7 + 8];
      v11 = *(_QWORD *)(a2 + v7 + 32);
      if (v11)
      {
        if (v9 + 8 == v11)
        {
          *(_QWORD *)&v6[v7 + 32] = v10;
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        }
        else
        {
          *(_QWORD *)&v6[v7 + 32] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
        }
      }
      else
      {
        *(_QWORD *)&v6[v7 + 32] = 0;
      }
      v7 += 40;
    }
    while (v9 + 40 != v8);
    a1[1] = &v6[v7];
  }
  return a1;
}

_QWORD *webrtc::rtcp::`anonymous namespace'::RemoteEstimateSerializerImpl::RemoteEstimateSerializerImpl(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = off_24C0BB5E0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    if (v6 >= 0x666666666666667)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v7 = operator new(v5);
    v8 = 0;
    a1[1] = v7;
    a1[2] = v7;
    a1[3] = &v7[40 * v6];
    do
    {
      v9 = v3 + v8;
      v7[v8] = *(_BYTE *)(v3 + v8);
      v10 = (uint64_t)&v7[v8 + 8];
      v11 = *(_QWORD *)(v3 + v8 + 32);
      if (v11)
      {
        if (v9 + 8 == v11)
        {
          *(_QWORD *)&v7[v8 + 32] = v10;
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        }
        else
        {
          *(_QWORD *)&v7[v8 + 32] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v10);
        }
      }
      else
      {
        *(_QWORD *)&v7[v8 + 32] = 0;
      }
      v8 += 40;
    }
    while (v9 + 40 != v4);
    a1[2] = &v7[v8];
  }
  return a1;
}

void **std::vector<webrtc::rtcp::`anonymous namespace'::DataRateSerializer>::~vector[abi:sn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (char *)*((_QWORD *)v3 - 1);
      if (v3 - 32 == v5)
      {
        v5 = v3 - 32;
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
LABEL_6:
      v3 -= 40;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

_QWORD *webrtc::rtcp::RemoteEstimate::SetEstimate(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD *result;
  void *v10;
  size_t v11;
  size_t v12;
  size_t v13;
  size_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  size_t __n[2];
  void *__src;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 112) = v5;
  *(_OWORD *)(a1 + 64) = v3;
  *(_OWORD *)(a1 + 80) = v4;
  v6 = *(_OWORD *)(a2 + 80);
  v7 = *(_OWORD *)(a2 + 96);
  v8 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  *(_OWORD *)(a1 + 160) = v8;
  *(_OWORD *)(a1 + 128) = v6;
  result = (*(_QWORD *(**)(size_t *__return_ptr))(**(_QWORD **)(a1 + 184) + 8))(__n);
  v10 = __src;
  v11 = __n[0];
  *(_QWORD *)(a1 + 24) = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(a1 + 32);
    if (v12 >= v11)
    {
      v18 = 0;
    }
    else
    {
      v13 = v12 + (v12 >> 1);
      if (v13 <= v11)
        v14 = v11;
      else
        v14 = v13;
      v15 = (void *)operator new[]();
      v16 = v15;
      v17 = *(_QWORD *)(a1 + 40);
      if (v17)
      {
        memcpy(v15, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 24));
        *(_QWORD *)(a1 + 40) = v16;
        MEMORY[0x20BD0ADD4](v17, 0x1000C8077774924);
      }
      else
      {
        *(_QWORD *)(a1 + 40) = v15;
      }
      *(_QWORD *)(a1 + 32) = v14;
      v18 = *(_QWORD *)(a1 + 24);
    }
    result = memcpy((void *)(*(_QWORD *)(a1 + 40) + v18), v10, v11);
    *(_QWORD *)(a1 + 24) = v11;
    v10 = __src;
  }
  __src = 0;
  if (v10)
    return (_QWORD *)MEMORY[0x20BD0ADD4](v10, 0x1000C8077774924);
  return result;
}

void webrtc::rtcp::RemoteEstimate::~RemoteEstimate(webrtc::rtcp::RemoteEstimate *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_24C0ACC28;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_24C0ACC28;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::rtcp::`anonymous namespace'::RemoteEstimateSerializerImpl::Parse(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a3 & 3;
  if ((a3 & 3) != 0 || a3 < 1 || *(_QWORD *)(a1 + 8) == *(_QWORD *)(a1 + 16))
    return v4 == 0;
  v8 = a2;
  v9 = (unint64_t)&a2[a3];
  while (1)
  {
    v10 = *(unsigned __int8 **)(a1 + 8);
    v11 = *(unsigned __int8 **)(a1 + 16);
    if (v10 == v11)
      goto LABEL_6;
    while (*v10 != *v8)
    {
      v10 += 40;
      if (v10 == v11)
        goto LABEL_6;
    }
    v12 = *((_QWORD *)v10 + 4);
    v13 = (v8[1] << 16) | (v8[2] << 8) | v8[3];
    if (v13 != 0xFFFFFF)
      break;
    v15 = a4;
    if (!v12)
      goto LABEL_16;
    *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v15) = 0x7FFFFFFFFFFFFFFFLL;
LABEL_6:
    v8 += 4;
    if ((unint64_t)v8 >= v9)
      return v4 == 0;
  }
  v15 = a4;
  if (v12)
  {
    *(_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 48))(v12, &v15) = 1000 * v13;
    goto LABEL_6;
  }
LABEL_16:
  v14 = std::__throw_bad_function_call[abi:sn180100]();
}

void webrtc::rtcp::`anonymous namespace'::RemoteEstimateSerializerImpl::Serialize(uint64_t a1@<X0>, void *a2@<X1>, size_t *a3@<X8>)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  void *v32;
  webrtc::rtcp::_anonymous_namespace_::RemoteEstimateSerializerImpl *v33;
  size_t v34;
  void *__p;
  char v36;
  void *v37[2];
  char v38;

  v4 = *(_QWORD *)(a1 + 16) == *(_QWORD *)(a1 + 8);
  v5 = 0x3333333333333334 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3);
  a3[1] = v5;
  if (v4)
  {
    v12 = 0;
    a3[2] = 0;
  }
  else
  {
    v8 = operator new[]();
    v9 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    a3[2] = v8;
    if (v9 != v10)
    {
      v11 = (_BYTE *)v8;
      v34 = v5;
      v12 = 0;
      while (1)
      {
        v37[0] = a2;
        v14 = *(_QWORD *)(v9 + 32);
        if (!v14)
        {
          v33 = (webrtc::rtcp::_anonymous_namespace_::RemoteEstimateSerializerImpl *)std::__throw_bad_function_call[abi:sn180100]();
          return;
        }
        v15 = *(_QWORD *)(*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v14 + 48))(v14, v37);
        if (v15 == 0x8000000000000000)
        {
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
            rtc::webrtc_logging_impl::Log("\r\t", v16, v17, v18, v19, v20, v21, v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/remote_estimate.cc");
          goto LABEL_6;
        }
        v23 = &v11[v12];
        v11[v12] = *(_BYTE *)v9;
        if (v15 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v13 = (uint64_t)((double)v15 / 1000.0);
          if (v13 < 0xFFFFFF)
            goto LABEL_5;
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
          {
            webrtc::ToString(v15, (char *)v37);
            webrtc::ToString(0x3E7FFFC18, (char *)&__p);
            rtc::webrtc_logging_impl::Log("\r\n\t\n\t", v24, v25, v26, v27, v28, v29, v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/remote_estimate.cc");
            if (v36 < 0)
            {
              operator delete(__p);
              if (v38 < 0)
LABEL_20:
                operator delete(v37[0]);
            }
            else if (v38 < 0)
            {
              goto LABEL_20;
            }
          }
        }
        LODWORD(v13) = 0xFFFFFF;
LABEL_5:
        v23[1] = BYTE2(v13);
        v23[2] = BYTE1(v13);
        v23[3] = v13;
LABEL_6:
        if (v15 != 0x8000000000000000)
          v12 += 4;
        v9 += 40;
        if (v9 == v10)
        {
          if (v34 < v12)
          {
            if (v34 + (v34 >> 1) <= v12)
              v31 = v12;
            else
              v31 = v34 + (v34 >> 1);
            v32 = (void *)operator new[]();
            memcpy(v32, v11, v34);
            MEMORY[0x20BD0ADD4](v11, 0x1000C8077774924);
            a3[1] = v31;
            a3[2] = (size_t)v32;
          }
          goto LABEL_28;
        }
      }
    }
    v12 = 0;
  }
LABEL_28:
  *a3 = v12;
}

void webrtc::rtcp::`anonymous namespace'::RemoteEstimateSerializerImpl::~RemoteEstimateSerializerImpl(webrtc::rtcp::_anonymous_namespace_::RemoteEstimateSerializerImpl *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)this = off_24C0BB5E0;
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (void *)*((_QWORD *)this + 1);
    if (v3 == v2)
    {
LABEL_11:
      *((_QWORD *)this + 2) = v2;
      operator delete(v4);
      return;
    }
    while (1)
    {
      v5 = *(_QWORD **)(v3 - 8);
      if ((_QWORD *)(v3 - 32) == v5)
      {
        v5 = (_QWORD *)(v3 - 32);
        v6 = 4;
      }
      else
      {
        if (!v5)
          goto LABEL_6;
        v6 = 5;
      }
      (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
      v3 -= 40;
      if (v3 == v2)
      {
        v4 = (void *)*((_QWORD *)this + 1);
        goto LABEL_11;
      }
    }
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)this = off_24C0BB5E0;
  v2 = *((_QWORD *)this + 1);
  if (!v2)
LABEL_12:
    JUMPOUT(0x20BD0ADECLL);
  v3 = *((_QWORD *)this + 2);
  v4 = (void *)*((_QWORD *)this + 1);
  if (v3 == v2)
  {
LABEL_11:
    *((_QWORD *)this + 2) = v2;
    operator delete(v4);
    goto LABEL_12;
  }
  while (1)
  {
    v5 = *(_QWORD **)(v3 - 8);
    if ((_QWORD *)(v3 - 32) == v5)
    {
      v5 = (_QWORD *)(v3 - 32);
      v6 = 4;
    }
    else
    {
      if (!v5)
        goto LABEL_6;
      v6 = 5;
    }
    (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
    v3 -= 40;
    if (v3 == v2)
    {
      v4 = (void *)*((_QWORD *)this + 1);
      goto LABEL_11;
    }
  }
}

void std::__function::__func<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_0,std::allocator<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_0>,webrtc::DataRate * ()(webrtc::NetworkStateEstimate *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_0,std::allocator<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_0>,webrtc::DataRate * ()(webrtc::NetworkStateEstimate *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0BB610;
  return result;
}

void std::__function::__func<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_0,std::allocator<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_0>,webrtc::DataRate * ()(webrtc::NetworkStateEstimate *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0BB610;
}

uint64_t std::__function::__func<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_0,std::allocator<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_0>,webrtc::DataRate * ()(webrtc::NetworkStateEstimate *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *a2 + 40;
}

void std::__function::__func<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_1,std::allocator<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_1>,webrtc::DataRate * ()(webrtc::NetworkStateEstimate *)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_1,std::allocator<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_1>,webrtc::DataRate * ()(webrtc::NetworkStateEstimate *)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C0BB658;
  return result;
}

void std::__function::__func<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_1,std::allocator<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_1>,webrtc::DataRate * ()(webrtc::NetworkStateEstimate *)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C0BB658;
}

uint64_t std::__function::__func<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_1,std::allocator<webrtc::rtcp::GetRemoteEstimateSerializer(void)::$_1>,webrtc::DataRate * ()(webrtc::NetworkStateEstimate *)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *a2 + 48;
}

uint64_t webrtc::RemoteEstimatorProxy::RemoteEstimatorProxy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  TimeDelta v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v16;
  _QWORD v17[3];
  _QWORD v18[2];
  std::string __p;
  std::string v20;
  _QWORD *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v5;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0x8000000000000000;
  pthread_mutexattr_init((pthread_mutexattr_t *)&v20);
  pthread_mutexattr_setpolicy_np((pthread_mutexattr_t *)&v20, 3);
  pthread_mutex_init((pthread_mutex_t *)(a1 + 40), (const pthread_mutexattr_t *)&v20);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)&v20);
  *(_QWORD *)(a1 + 104) = a3;
  *(_DWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 130) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = -1;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 100000;
  *(_BYTE *)(a1 + 200) = 1;
  *(_DWORD *)(a1 + 204) = 0;
  *(_OWORD *)(a1 + 208) = xmmword_208F08B90;
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    v17[0] = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bi"
             "trate_estimator/remote_estimator_proxy.cc";
    v17[1] = 545;
    v17[2] = &v16;
    v18[0] = "Maximum interval between transport feedback RTCP messages: ";
    v18[1] = v17;
    webrtc::ToString((webrtc *)0x3D090, v6, (char *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      v14 = v18;
      v21 = v18;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        v14 = v21;
      }
    }
    else
    {
      v20 = __p;
      v14 = v18;
      v21 = v18;
    }
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal const&)::t, v7, v8, v9, v10, v11, v12, v13, *(_QWORD *)v14[1]);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  return a1;
}

void webrtc::RemoteEstimatorProxy::IncomingPacket(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  unsigned __int16 *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  BOOL v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  Timestamp v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v73;
  uint64_t v74;
  webrtc::RemoteEstimatorProxy *v75;
  void *__p;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  __int128 v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;

  if ((unint64_t)(*(_QWORD *)(a2 + 112) - 0x7FFFFFFFFFFFFFFFLL) <= 1)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log("\r\t", v2, v3, v4, v5, v6, v7, v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/remote_bitrate_estimator/remote_estimator_proxy.cc");
    return;
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v11 = *(unsigned __int8 **)(a2 + 56);
    v12 = *(unsigned __int8 **)(a2 + 64);
    if (v11 != v12)
    {
      while (*v11 != *(unsigned __int8 *)(a2 + 40))
      {
        v11 += 4;
        if (v11 == v12)
          goto LABEL_13;
      }
      v13 = *(_QWORD *)(a2 + 88);
      if (v13)
        v13 = *(_QWORD *)(v13 + 16) + *(_QWORD *)(a2 + 96);
      if (v11[1] == 2)
      {
        v14 = 0;
        v15 = bswap32(*(unsigned __int16 *)(v13 + *((unsigned __int16 *)v11 + 1))) >> 16;
LABEL_31:
        v25 = 1;
        goto LABEL_32;
      }
    }
  }
LABEL_13:
  if (!*(_BYTE *)(a2 + 41))
    return;
  v16 = *(unsigned __int8 **)(a2 + 56);
  v17 = *(unsigned __int8 **)(a2 + 64);
  if (v16 == v17)
    return;
  while (*v16 != *(unsigned __int8 *)(a2 + 41))
  {
    v16 += 4;
    if (v16 == v17)
      return;
  }
  v18 = *(_QWORD *)(a2 + 88);
  if (v18)
    v18 = *(_QWORD *)(v18 + 16) + *(_QWORD *)(a2 + 96);
  v19 = v16[1];
  if (!v16[1])
    return;
  if (v19 != 4 && v19 != 2)
    return;
  v21 = (unsigned __int16 *)(v18 + *((unsigned __int16 *)v16 + 1));
  v15 = bswap32(*v21) >> 16;
  if (v19 != 4)
  {
    v14 = 0;
    goto LABEL_31;
  }
  v22 = *((unsigned __int8 *)v21 + 2);
  v23 = *((unsigned __int8 *)v21 + 3) | ((v21[1] & 0x7F) << 8);
  v24 = (v22 >> 7) | (v23 << 32);
  v25 = (_DWORD)v23 == 0;
  if ((_DWORD)v23)
    v14 = v24;
  else
    v14 = 0;
LABEL_32:
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  v26 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a2 + 40))
  {
    v27 = *(_QWORD *)(a2 + 56);
    v28 = *(_QWORD *)(a2 + 64);
    if (v27 == v28)
    {
      v30 = 0;
      *(_BYTE *)(a1 + 200) = 0;
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 12);
      if (*(_BYTE *)(a1 + 130))
        goto LABEL_41;
    }
    else
    {
      v29 = v27 + 4;
      do
      {
        v30 = *(unsigned __int8 *)(v29 - 4) == v26;
        v31 = *(unsigned __int8 *)(v29 - 4) == v26 || v29 == v28;
        v29 += 4;
      }
      while (!v31);
      *(_BYTE *)(a1 + 200) = v30;
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 12);
      if (*(_BYTE *)(a1 + 130))
      {
LABEL_41:
        v32 = *(unsigned __int16 *)(a1 + 128);
        v33 = v15 >= v32;
        LODWORD(v34) = v15 - v32;
        v35 = (_DWORD)v34 != 0 && v33;
        v36 = (v34 & 0x8000u) == 0;
        if ((_DWORD)v34 == 0x8000)
          v36 = v35;
        if (v36)
          v34 = (unsigned __int16)v34;
        else
          v34 |= 0xFFFFFFFFFFFF0000;
        v37 = v34 + *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 120) = v37;
        *(_WORD *)(a1 + 128) = v15;
        *(_BYTE *)(a1 + 130) = 1;
        if (!v30)
          goto LABEL_70;
        goto LABEL_53;
      }
    }
  }
  else
  {
    v30 = 0;
    *(_BYTE *)(a1 + 200) = 0;
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 12);
    if (*(_BYTE *)(a1 + 130))
      goto LABEL_41;
  }
  v37 = v15;
  *(_QWORD *)(a1 + 120) = v15;
  *(_WORD *)(a1 + 128) = v15;
  *(_BYTE *)(a1 + 130) = 1;
  if (!v30)
    goto LABEL_70;
LABEL_53:
  if (*(_BYTE *)(a1 + 152))
  {
    v38 = *(_QWORD *)(a1 + 184);
    v39 = *(_QWORD *)(a1 + 144);
    if (v39 < v38)
      goto LABEL_68;
    v40 = *(_QWORD *)(a2 + 112);
    v41 = 0x7FFFFFFFFFFFFFFFLL;
    if (v40 != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v40 < 500000)
        goto LABEL_68;
      v41 = v40 - 500000;
    }
    if (v38 >= v37)
      v42 = v37;
    else
      v42 = *(_QWORD *)(a1 + 184);
    v43 = *(_QWORD *)(a1 + 176);
    if (v43 < v42)
    {
      v44 = *(_DWORD *)(a1 + 168);
      v45 = *(_QWORD *)(a1 + 160);
      while (*(_QWORD *)(v45 + 8 * (int)(v44 & v43)) <= v41)
      {
        *(_QWORD *)(a1 + 176) = ++v43;
        if (v42 == v43)
        {
          LODWORD(v43) = v42;
          break;
        }
      }
    }
    webrtc::PacketArrivalTimeMap::AdjustToSize(a1 + 160, v38 - v43);
    if (*(_BYTE *)(a1 + 152))
    {
      v39 = *(_QWORD *)(a1 + 144);
LABEL_68:
      if (v37 >= v39)
        goto LABEL_70;
    }
  }
  *(_QWORD *)(a1 + 144) = v37;
  *(_BYTE *)(a1 + 152) = 1;
LABEL_70:
  if (*(_QWORD *)(a1 + 176) > v37
    || *(_QWORD *)(a1 + 184) <= v37
    || (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * (int)(*(_DWORD *)(a1 + 168) & v37)) & 0x8000000000000000) != 0)
  {
    v46.var0 = *(_QWORD *)(a2 + 112);
    webrtc::PacketArrivalTimeMap::AddPacket((webrtc::PacketArrivalTimeMap *)(a1 + 160), v37, v46);
    v47 = *(_QWORD *)(a1 + 176);
    if (!*(_BYTE *)(a1 + 152) || *(_QWORD *)(a1 + 144) < v47)
    {
      *(_QWORD *)(a1 + 144) = v47;
      *(_BYTE *)(a1 + 152) = 1;
    }
    if (!v25)
    {
      if (HIDWORD(v14))
      {
        v48 = v37 - HIDWORD(v14) + 1;
        webrtc::RemoteEstimatorProxy::MaybeBuildFeedbackPacket((uint64_t)&v85, a1, v14 != 0, v48, v37 + 1, 0);
        v49 = v85;
        if (v85)
        {
          if (*(_QWORD *)(a1 + 176) <= v48)
          {
            v50 = *(_QWORD *)(a1 + 184);
            if (v50 <= v48)
            {
              *(_QWORD *)(a1 + 176) = v50;
            }
            else
            {
              *(_QWORD *)(a1 + 176) = v48;
              webrtc::PacketArrivalTimeMap::AdjustToSize(a1 + 160, v50 - v48);
            }
          }
          v51 = operator new(8uLL);
          __p = v51;
          *v51 = v49;
          v77 = v51 + 1;
          v78 = v51 + 1;
          v52 = *(_QWORD *)(a1 + 24);
          if (!v52)
          {
            v75 = (webrtc::RemoteEstimatorProxy *)std::__throw_bad_function_call[abi:sn180100]();
            webrtc::RemoteEstimatorProxy::SendPeriodicFeedbacks(v75);
            return;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v52 + 48))(v52, &__p);
          v53 = __p;
          if (__p)
          {
            v54 = v77;
            v55 = __p;
            if (v77 != __p)
            {
              do
              {
                v57 = *--v54;
                v56 = v57;
                *v54 = 0;
                if (v57)
                  (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
              }
              while (v54 != v53);
              v55 = __p;
            }
            v77 = v53;
            operator delete(v55);
          }
        }
      }
    }
    if (*(_BYTE *)(a2 + 37))
    {
      v58 = *(unsigned __int8 **)(a2 + 56);
      v59 = *(unsigned __int8 **)(a2 + 64);
      if (v58 != v59)
      {
        while (*v58 != *(unsigned __int8 *)(a2 + 37))
        {
          v58 += 4;
          if (v58 == v59)
            goto LABEL_126;
        }
        v60 = *(_QWORD *)(a2 + 88);
        if (v60)
          v60 = *(_QWORD *)(v60 + 16) + *(_QWORD *)(a2 + 96);
        if (v58[1] == 3)
        {
          v61 = *(_QWORD *)(a1 + 104);
          if (v61)
          {
            v62 = (*(unsigned __int8 *)(v60 + *((unsigned __int16 *)v58 + 1)) << 16) | (*(unsigned __int8 *)(v60 + *((unsigned __int16 *)v58 + 1) + 1) << 8) | *(unsigned __int8 *)(v60 + *((unsigned __int16 *)v58 + 1) + 2);
            v78 = 0;
            v79 = 0;
            v80 = xmmword_208F08CB0;
            v81 = 0;
            v63 = *(_QWORD *)(a2 + 112);
            v83 = 0;
            v84 = v63;
            if (v63 != 0x7FFFFFFFFFFFFFFFLL)
            {
              v64 = *(_QWORD *)(a1 + 216);
              if (v64 != 0x8000000000000000
                && (v63 == 0x8000000000000000 || v64 == 0x7FFFFFFFFFFFFFFFLL || (uint64_t)(v63 - v64) <= 9999999))
              {
                v65 = *(_DWORD *)(a1 + 204);
                v66 = (v62 - v65) & 0xFFFFFF;
                v67 = -(uint64_t)((1000000 * (unint64_t)((v65 - v62) & 0xFFFFFF)) >> 18);
                if (v66 < 0x800000)
                  v67 = (1000000 * (unint64_t)v66) >> 18;
                v68 = *(_QWORD *)(a1 + 208);
                v63 = v68 + v67;
                if (v68 == 0x8000000000000000)
                  v63 = 0x8000000000000000;
                if (v68 == 0x7FFFFFFFFFFFFFFFLL)
                  v63 = 0x7FFFFFFFFFFFFFFFLL;
              }
            }
            *(_QWORD *)(a1 + 208) = v63;
            *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 112);
            *(_DWORD *)(a1 + 204) = v62;
            v69 = *(_QWORD *)(a2 + 24) + *(_QWORD *)(a2 + 16) + *(unsigned __int8 *)(a2 + 2);
            v70 = *(_QWORD *)(a1 + 136);
            v71 = 0x8000000000000000;
            if (v70 != 0x8000000000000000 && v69 != 0x8000000000000000)
              v71 = v69 + v70;
            if (v70 == 0x7FFFFFFFFFFFFFFFLL)
              v73 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v73 = v71;
            if (v69 == 0x7FFFFFFFFFFFFFFFLL)
              v74 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v74 = v73;
            __p = (void *)v63;
            v77 = (_QWORD *)v74;
            v82 = v37;
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v61 + 16))(v61, &__p);
          }
        }
      }
    }
  }
LABEL_126:
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 40));
}

void webrtc::RemoteEstimatorProxy::SendPeriodicFeedbacks(webrtc::RemoteEstimatorProxy *this)
{
  void (***v2)(_OWORD *__return_ptr);
  uint64_t v3;
  int64x2_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  void *__p;
  _QWORD *v45;
  char *v46;
  _OWORD v47[8];
  uint64_t v48;
  _OWORD v49[8];
  uint64_t v50;
  char v51;

  if (*((_BYTE *)this + 152))
  {
    v2 = (void (***)(_OWORD *__return_ptr))*((_QWORD *)this + 13);
    if (v2)
    {
      (**v2)(v49);
      if (v51)
      {
        v3 = operator new();
        *(_DWORD *)(v3 + 8) = 0;
        *(_BYTE *)(v3 + 12) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        *(_QWORD *)(v3 + 24) = 0;
        *(_QWORD *)(v3 + 32) = 0;
        *(_QWORD *)v3 = &unk_24C0BB5B0;
        v4 = vdupq_n_s64(0x8000000000000000);
        *(_QWORD *)(v3 + 40) = 0;
        *(_QWORD *)(v3 + 48) = 0x7FF8000000000000;
        *(int64x2_t *)(v3 + 56) = v4;
        *(int64x2_t *)(v3 + 72) = v4;
        *(int64x2_t *)(v3 + 88) = v4;
        *(int64x2_t *)(v3 + 104) = v4;
        *(int64x2_t *)(v3 + 120) = v4;
        *(_QWORD *)(v3 + 136) = 0x8000000000000000;
        *(int64x2_t *)(v3 + 144) = vdupq_n_s64(0x7FF8000000000000uLL);
        *(int64x2_t *)(v3 + 160) = v4;
        *(_QWORD *)(v3 + 176) = 0x7FF8000000000000;
        *(_QWORD *)(v3 + 184) = webrtc::rtcp::GetRemoteEstimateSerializer((webrtc::rtcp *)v3);
        *(_BYTE *)(v3 + 12) = 13;
        *(_DWORD *)(v3 + 16) = 1735356263;
        *(_DWORD *)(v3 + 8) = 0;
        if (!v51)
        {
LABEL_49:
          std::__throw_bad_optional_access[abi:sn180100]();
          webrtc::RemoteEstimatorProxy::MaybeBuildFeedbackPacket(v38, v39, v40, v41, v42, v43);
          return;
        }
        v47[7] = v49[7];
        v48 = v50;
        v47[2] = v49[2];
        v47[3] = v49[3];
        v47[5] = v49[5];
        v47[6] = v49[6];
        v47[4] = v49[4];
        v47[0] = v49[0];
        v47[1] = v49[1];
        webrtc::rtcp::RemoteEstimate::SetEstimate(v3, (uint64_t)v47);
        if (!*((_BYTE *)this + 152))
        {
LABEL_46:
          __break(1u);
          abort();
        }
      }
      else
      {
        v3 = 0;
        if (!*((_BYTE *)this + 152))
          goto LABEL_46;
      }
    }
    else
    {
      v3 = 0;
    }
    v5 = *((_QWORD *)this + 23);
    while (1)
    {
      v7 = *((_QWORD *)this + 18);
      if (v7 >= v5)
        break;
      webrtc::RemoteEstimatorProxy::MaybeBuildFeedbackPacket((uint64_t)v49, (uint64_t)this, 1, v7, v5, 1);
      v8 = *(_QWORD *)&v49[0];
      if (!*(_QWORD *)&v49[0])
        break;
      if (v3)
      {
        v9 = (char *)operator new(8uLL);
        *(_QWORD *)v9 = v3;
        v10 = v9 + 8;
        v11 = 8;
        v12 = 1;
        v13 = 2;
      }
      else
      {
        v9 = 0;
        v10 = 0;
        v11 = 0;
        v12 = 0;
        v13 = 1;
      }
      if (v11 >> 2 > v13)
        v13 = v11 >> 2;
      v14 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
      v15 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v14)
        v15 = v13;
      if (!v15)
        goto LABEL_46;
      if (v15 >> 61)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v16 = 8 * v15;
      v17 = (char *)operator new(8 * v15);
      v18 = v17;
      v19 = &v17[8 * v12];
      *(_QWORD *)v19 = v8;
      v20 = v19 + 8;
      if (v10 != v9)
      {
        v21 = v10 - v9 - 8;
        v22 = v10;
        if (v21 < 0x18)
          goto LABEL_52;
        v23 = (v21 >> 3) + 1;
        v24 = 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL);
        v22 = &v10[-v24];
        v19 -= v24;
        v25 = &v17[8 * v12 - 16];
        v26 = v10 - 16;
        v27 = v23 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *((_OWORD *)v26 - 1);
          v28 = *(_OWORD *)v26;
          *((_OWORD *)v26 - 1) = 0uLL;
          *(_OWORD *)v26 = 0uLL;
          *((_OWORD *)v25 - 1) = v29;
          *(_OWORD *)v25 = v28;
          v25 -= 32;
          v26 -= 32;
          v27 -= 4;
        }
        while (v27);
        if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_52:
          do
          {
            v30 = *((_QWORD *)v22 - 1);
            v22 -= 8;
            *((_QWORD *)v19 - 1) = v30;
            v19 -= 8;
            *(_QWORD *)v22 = 0;
          }
          while (v22 != v9);
        }
        do
        {
          v32 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          v31 = v32;
          *(_QWORD *)v10 = 0;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        }
        while (v10 != v9);
      }
      if (v9)
        operator delete(v9);
      __p = v19;
      v45 = v20;
      v46 = &v18[v16];
      v33 = *((_QWORD *)this + 3);
      if (!v33)
      {
        std::__throw_bad_function_call[abi:sn180100]();
        goto LABEL_49;
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v33 + 48))(v33, &__p);
      v34 = __p;
      if (__p)
      {
        v35 = v45;
        v6 = __p;
        if (v45 != __p)
        {
          do
          {
            v37 = *--v35;
            v36 = v37;
            *v35 = 0;
            if (v37)
              (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          }
          while (v35 != v34);
          v6 = __p;
        }
        v45 = v34;
        operator delete(v6);
      }
      v3 = 0;
      if (!*((_BYTE *)this + 152))
        goto LABEL_46;
    }
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
}

uint64_t webrtc::RemoteEstimatorProxy::MaybeBuildFeedbackPacket(uint64_t this, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  webrtc::rtcp::TransportFeedback *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  Timestamp v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  Timestamp v25;
  webrtc::rtcp::TransportFeedback **v27;

  v6 = *(_QWORD *)(a2 + 176);
  v7 = *(_QWORD *)(a2 + 184);
  if (v7 < v6)
  {
    __break(1u);
  }
  else
  {
    v27 = (webrtc::rtcp::TransportFeedback **)this;
    if (v7 >= a4)
      v10 = a4;
    else
      v10 = *(_QWORD *)(a2 + 184);
    if (v6 <= a4)
      v11 = v10;
    else
      v11 = *(_QWORD *)(a2 + 176);
    if (v7 >= a5)
      v7 = a5;
    if (v6 <= a5)
      v12 = v7;
    else
      v12 = *(_QWORD *)(a2 + 176);
    if (v11 >= v12)
    {
      v14 = 0;
      v15 = a4;
    }
    else
    {
      v14 = 0;
      v15 = a4;
      do
      {
        v21 = *(_DWORD *)(a2 + 168);
        do
        {
          v23 = v21 & v11;
          v22 = *(_QWORD *)(a2 + 160);
          v24 = *(_QWORD *)(v22 + 8 * (int)(v21 & v11++));
        }
        while ((v24 & 0x8000000000000000) != 0);
        if (v11 - 1 >= v12)
          break;
        if (v14)
        {
          v25.var0 = *(_QWORD *)(v22 + 8 * v23);
          this = webrtc::rtcp::TransportFeedback::AddReceivedPacket(v14, (unsigned __int16)(v11 - 1), v25);
          if (!(_DWORD)this)
            break;
        }
        else
        {
          v16 = operator new();
          v14 = (webrtc::rtcp::TransportFeedback *)v16;
          *(_QWORD *)v16 = &off_24C0C2908;
          *(_QWORD *)(v16 + 16) = 0;
          *(_BYTE *)(v16 + 25) = a3;
          *(_QWORD *)(v16 + 128) = 0;
          *(_OWORD *)(v16 + 40) = 0u;
          *(_OWORD *)(v16 + 56) = 0u;
          *(_OWORD *)(v16 + 72) = 0u;
          *(_OWORD *)(v16 + 88) = 0u;
          *(_QWORD *)(v16 + 104) = 0;
          *(_WORD *)(v16 + 136) = 1;
          *(_QWORD *)(v16 + 144) = 20;
          v17 = *(_DWORD *)(a2 + 112);
          *(_DWORD *)(v16 + 8) = 0;
          *(_DWORD *)(v16 + 12) = v17;
          v18 = v11 - 0x7FFF;
          if (v11 - 0x7FFF <= a4)
            v18 = a4;
          *(_WORD *)(v16 + 16) = v18;
          v19 = ((unint64_t)(v24
                                  - 0xFA00000000 * (((v24 >> 33) * (unsigned __int128)0x20C49BA5E353F7DuLL) >> 64))
               * (unsigned __int128)0x10624DD2F1AA0uLL) >> 64;
          *(_DWORD *)(v16 + 20) = v19;
          *(_QWORD *)(v16 + 32) = 64000 * v19 + 0xFA00000000;
          LOBYTE(v19) = *(_BYTE *)(a2 + 116);
          *(_BYTE *)(a2 + 116) = v19 + 1;
          *(_BYTE *)(v16 + 24) = v19;
          v20.var0 = v24;
          this = webrtc::rtcp::TransportFeedback::AddReceivedPacket((webrtc::rtcp::TransportFeedback *)v16, (unsigned __int16)(v11 - 1), v20);
          if ((this & 1) == 0)
          {
            *(_QWORD *)(a2 + 144) = v11 - 1;
            *(_BYTE *)(a2 + 152) = 1;
            *v27 = 0;
            return (*(uint64_t (**)(webrtc::rtcp::TransportFeedback *))(*(_QWORD *)v14 + 8))(v14);
          }
        }
        v15 = v11;
      }
      while (v11 < v12);
    }
    if (a6)
    {
      *(_QWORD *)(a2 + 144) = v15;
      *(_BYTE *)(a2 + 152) = 1;
    }
    *v27 = v14;
  }
  return this;
}

uint64_t webrtc::RemoteNtpTimeEstimator::EstimateNtp(webrtc::RemoteNtpTimeEstimator *this, unsigned int a2)
{
  unsigned int v2;
  BOOL v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  double v7;

  if (*((_BYTE *)this + 144))
  {
    if (*((_BYTE *)this + 164))
    {
      v2 = *((_DWORD *)this + 40);
      v3 = a2 >= v2;
      v4 = a2 - v2;
      v5 = (_DWORD)v4 != 0 && v3;
      if ((_DWORD)v4 != 0x80000000)
        v5 = (int)v4 >= 0;
      if (!v5)
        v4 |= 0xFFFFFFFF00000000;
      v6 = v4 + *((_QWORD *)this + 19);
    }
    else
    {
      v6 = a2;
    }
    *((_QWORD *)this + 19) = v6;
    *((_DWORD *)this + 40) = a2;
    *((_BYTE *)this + 164) = 1;
    v7 = *((double *)this + 17) + (double)v6 * *((double *)this + 16) + 0.5;
    __asm { BR              X10 }
  }
  return 0;
}

float32x4_t *webrtc::RenderBuffer::SpectralSums(float32x4_t *result, unint64_t a2, unint64_t a3, float32x4_t *__src, float32x4_t *__dst)
{
  unint64_t v7;
  float32x4_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float32x4_t **v14;
  float32x4_t *v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  float32x4_t **v32;
  float32x4_t *v33;
  float32x4_t *v34;
  uint64_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  uint64_t v46;

  v7 = a2;
  v8 = result;
  __src[16].i32[0] = 0;
  __src[14] = 0u;
  __src[15] = 0u;
  __src[12] = 0u;
  __src[13] = 0u;
  __src[10] = 0u;
  __src[11] = 0u;
  __src[8] = 0u;
  __src[9] = 0u;
  __src[6] = 0u;
  __src[7] = 0u;
  __src[4] = 0u;
  __src[5] = 0u;
  __src[2] = 0u;
  __src[3] = 0u;
  *__src = 0u;
  __src[1] = 0u;
  v9 = result->i64[1];
  v10 = *(_DWORD *)(v9 + 36);
  if (a2)
  {
    v11 = 0;
    v12 = *(_QWORD *)(v9 + 8);
    v13 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v9 + 16) - v12) >> 3);
    while (v13 > v10)
    {
      v14 = (float32x4_t **)(v12 + 24 * v10);
      v15 = *v14;
      v16 = v14[1];
      if (v15 != v16)
      {
        result = 0;
        v17 = v15;
        do
        {
          if (&v15[16].i32[65 * (_QWORD)result + 1] <= (__int32 *)__src || v17 >= (float32x4_t *)&__src[16].i32[1])
          {
            v19 = vaddq_f32(v17[1], __src[1]);
            *__src = vaddq_f32(*v17, *__src);
            __src[1] = v19;
            v20 = vaddq_f32(v17[3], __src[3]);
            __src[2] = vaddq_f32(v17[2], __src[2]);
            __src[3] = v20;
            v21 = vaddq_f32(v17[5], __src[5]);
            __src[4] = vaddq_f32(v17[4], __src[4]);
            __src[5] = v21;
            v22 = vaddq_f32(v17[7], __src[7]);
            __src[6] = vaddq_f32(v17[6], __src[6]);
            __src[7] = v22;
            v23 = vaddq_f32(v17[9], __src[9]);
            __src[8] = vaddq_f32(v17[8], __src[8]);
            __src[9] = v23;
            v24 = vaddq_f32(v17[11], __src[11]);
            __src[10] = vaddq_f32(v17[10], __src[10]);
            __src[11] = v24;
            v25 = vaddq_f32(v17[13], __src[13]);
            __src[12] = vaddq_f32(v17[12], __src[12]);
            __src[13] = v25;
            v26 = vaddq_f32(v17[15], __src[15]);
            v27 = 64;
            __src[14] = vaddq_f32(v17[14], __src[14]);
            __src[15] = v26;
          }
          else
          {
            v27 = 0;
          }
          v28 = v27;
          do
          {
            __src->f32[v28] = v17->f32[v28] + __src->f32[v28];
            ++v28;
          }
          while (v28 != 65);
          v17 = (float32x4_t *)((char *)v17 + 260);
          result = (float32x4_t *)((char *)result + 1);
        }
        while (v17 != v16);
      }
      if (*(_DWORD *)v9 - 1 > v10)
        ++v10;
      else
        v10 = 0;
      if (++v11 == v7)
        goto LABEL_20;
    }
    goto LABEL_40;
  }
LABEL_20:
  result = (float32x4_t *)memmove(__dst, __src, 0x104uLL);
  if (v7 < a3)
  {
    v29 = v8->i64[1];
    v30 = *(_QWORD *)(v29 + 8);
    v31 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v29 + 16) - v30) >> 3);
    while (v31 > v10)
    {
      v32 = (float32x4_t **)(v30 + 24 * v10);
      v33 = *v32;
      v34 = v32[1];
      if (v33 != v34)
      {
        v35 = 0;
        result = v33;
        do
        {
          if (&v33[16].i32[65 * v35 + 1] <= (__int32 *)__dst || result >= (float32x4_t *)&__dst[16].i32[1])
          {
            v37 = vaddq_f32(result[1], __dst[1]);
            *__dst = vaddq_f32(*result, *__dst);
            __dst[1] = v37;
            v38 = vaddq_f32(result[3], __dst[3]);
            __dst[2] = vaddq_f32(result[2], __dst[2]);
            __dst[3] = v38;
            v39 = vaddq_f32(result[5], __dst[5]);
            __dst[4] = vaddq_f32(result[4], __dst[4]);
            __dst[5] = v39;
            v40 = vaddq_f32(result[7], __dst[7]);
            __dst[6] = vaddq_f32(result[6], __dst[6]);
            __dst[7] = v40;
            v41 = vaddq_f32(result[9], __dst[9]);
            __dst[8] = vaddq_f32(result[8], __dst[8]);
            __dst[9] = v41;
            v42 = vaddq_f32(result[11], __dst[11]);
            __dst[10] = vaddq_f32(result[10], __dst[10]);
            __dst[11] = v42;
            v43 = vaddq_f32(result[13], __dst[13]);
            __dst[12] = vaddq_f32(result[12], __dst[12]);
            __dst[13] = v43;
            v44 = vaddq_f32(result[15], __dst[15]);
            v45 = 64;
            __dst[14] = vaddq_f32(result[14], __dst[14]);
            __dst[15] = v44;
          }
          else
          {
            v45 = 0;
          }
          v46 = v45;
          do
          {
            __dst->f32[v46] = result->f32[v46] + __dst->f32[v46];
            ++v46;
          }
          while (v46 != 65);
          result = (float32x4_t *)((char *)result + 260);
          ++v35;
        }
        while (result != v34);
      }
      if (*(_DWORD *)v29 - 1 > v10)
        ++v10;
      else
        v10 = 0;
      if (++v7 == a3)
        return result;
    }
LABEL_40:
    __break(1u);
  }
  return result;
}

uint64_t webrtc::RenderDelayBuffer::Create(webrtc::RenderDelayBuffer *this, const webrtc::EchoCanceller3Config *a2, unint64_t a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _QWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  webrtc::FftBuffer *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  int v35;
  float v36;
  char v37;
  int v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  size_t v54;
  char *v55;

  v4 = (int)a2;
  v6 = operator new();
  *(_QWORD *)v6 = &off_24C0BB6A0;
  v7 = operator new();
  do
  *(_QWORD *)(v6 + 8) = v7;
  *(_DWORD *)(v6 + 16) = 0;
  v9 = *((_OWORD *)this + 1);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)this;
  v10 = *((_OWORD *)this + 5);
  *(_OWORD *)(v6 + 88) = *((_OWORD *)this + 4);
  *(_OWORD *)(v6 + 104) = v10;
  *(_OWORD *)(v6 + 120) = *((_OWORD *)this + 6);
  *(_BYTE *)(v6 + 136) = *((_BYTE *)this + 112);
  *(_OWORD *)(v6 + 40) = v9;
  v11 = *((_OWORD *)this + 3);
  *(_OWORD *)(v6 + 56) = *((_OWORD *)this + 2);
  *(_OWORD *)(v6 + 72) = v11;
  v12 = (_QWORD *)((char *)this + 120);
  *(_QWORD *)(v6 + 350) = *(_QWORD *)((char *)this + 326);
  v13 = *(_OWORD *)((char *)this + 312);
  *(_OWORD *)(v6 + 320) = *(_OWORD *)((char *)this + 296);
  *(_OWORD *)(v6 + 336) = v13;
  v14 = *(_OWORD *)((char *)this + 280);
  *(_OWORD *)(v6 + 288) = *(_OWORD *)((char *)this + 264);
  *(_OWORD *)(v6 + 304) = v14;
  v15 = *(_OWORD *)((char *)this + 248);
  v16 = *(_OWORD *)((char *)this + 216);
  *(_OWORD *)(v6 + 256) = *(_OWORD *)((char *)this + 232);
  *(_OWORD *)(v6 + 272) = v15;
  v17 = *(_OWORD *)((char *)this + 184);
  *(_OWORD *)(v6 + 224) = *(_OWORD *)((char *)this + 200);
  *(_OWORD *)(v6 + 240) = v16;
  v18 = *(_OWORD *)((char *)this + 152);
  *(_OWORD *)(v6 + 192) = *(_OWORD *)((char *)this + 168);
  *(_OWORD *)(v6 + 208) = v17;
  v19 = *(_OWORD *)((char *)this + 120);
  *(_OWORD *)(v6 + 160) = *(_OWORD *)((char *)this + 136);
  *(_OWORD *)(v6 + 176) = v18;
  *(_OWORD *)(v6 + 144) = v19;
  v20 = *((_OWORD *)this + 22);
  *(_OWORD *)(v6 + 360) = *((_OWORD *)this + 21);
  *(_OWORD *)(v6 + 376) = v20;
  *(_OWORD *)(v6 + 385) = *(_OWORD *)((char *)this + 361);
  *(_DWORD *)(v6 + 408) = *((_DWORD *)this + 96);
  v21 = *((_QWORD *)this + 50);
  *(_QWORD *)(v6 + 416) = *((_QWORD *)this + 49);
  *(_QWORD *)(v6 + 424) = v21;
  *(_DWORD *)(v6 + 432) = *((_DWORD *)this + 102);
  *(_DWORD *)(v6 + 444) = *((_DWORD *)this + 105);
  *(_QWORD *)(v6 + 436) = *(_QWORD *)((char *)this + 412);
  *(_DWORD *)(v6 + 464) = *((_DWORD *)this + 110);
  v22 = *((_QWORD *)this + 54);
  *(_QWORD *)(v6 + 448) = *((_QWORD *)this + 53);
  *(_QWORD *)(v6 + 456) = v22;
  *(_DWORD *)(v6 + 476) = *((_DWORD *)this + 113);
  *(_QWORD *)(v6 + 468) = *(_QWORD *)((char *)this + 444);
  *(_QWORD *)(v6 + 480) = *((_QWORD *)this + 57);
  v23 = *((_OWORD *)this + 29);
  v24 = *((_OWORD *)this + 30);
  v25 = *((_OWORD *)this + 32);
  *(_OWORD *)(v6 + 520) = *((_OWORD *)this + 31);
  *(_OWORD *)(v6 + 536) = v25;
  *(_OWORD *)(v6 + 488) = v23;
  *(_OWORD *)(v6 + 504) = v24;
  v26 = *((_OWORD *)this + 33);
  v27 = *((_OWORD *)this + 34);
  *(_OWORD *)(v6 + 593) = *(_OWORD *)((char *)this + 569);
  v28 = *((_OWORD *)this + 35);
  *(_OWORD *)(v6 + 568) = v27;
  *(_OWORD *)(v6 + 584) = v28;
  *(_OWORD *)(v6 + 552) = v26;
  *(float *)&v14 = *(float *)(v6 + 352) / 20.0;
  *(_OWORD *)(v6 + 616) = *((_OWORD *)this + 37);
  *(float *)(v6 + 632) = __exp10f(*(float *)&v14);
  *(_DWORD *)(v6 + 636) = 2 * *(unsigned __int8 *)(v6 + 109);
  v29 = *((_QWORD *)this + 3);
  *(_QWORD *)(v6 + 640) = v29;
  if (v29)
    v30 = 0x40 / v29;
  else
    v30 = 64;
  *(_DWORD *)(v6 + 648) = v30;
  webrtc::BlockBuffer::BlockBuffer((webrtc::BlockBuffer *)(v6 + 656), *((_QWORD *)this + 15) + (24 * *((_QWORD *)this + 4) + 33) * v30 / v30 + 1, v4 / 16000, a3);
  webrtc::SpectrumBuffer::SpectrumBuffer((webrtc::SpectrumBuffer *)(v6 + 696), (uint64_t)(*(_QWORD *)(v6 + 672) - *(_QWORD *)(v6 + 664)) >> 5, a3);
  v31 = webrtc::FftBuffer::FftBuffer((webrtc::FftBuffer *)(v6 + 736), (uint64_t)(*(_QWORD *)(v6 + 672) - *(_QWORD *)(v6 + 664)) >> 5, a3);
  *(_QWORD *)(v6 + 776) = *(_QWORD *)(v6 + 40);
  *(_BYTE *)(v6 + 784) = 1;
  *(_QWORD *)(v6 + 792) = v6 + 656;
  *(_QWORD *)(v6 + 800) = v6 + 696;
  *(_QWORD *)(v6 + 808) = v31;
  *(_BYTE *)(v6 + 816) = 0;
  v32 = *(_QWORD *)(v6 + 640);
  v33 = (24 * *((_QWORD *)this + 4) + 33) * (0x40 / v32);
  *(_DWORD *)(v6 + 824) = v33;
  *(_QWORD *)(v6 + 832) = 0;
  *(_QWORD *)(v6 + 848) = 0;
  *(_QWORD *)(v6 + 840) = 0;
  if (v32 <= 0x40)
  {
    if (v33 >> 62)
      goto LABEL_29;
    v54 = 4 * v33;
    v55 = (char *)operator new(4 * v33);
    *(_QWORD *)(v6 + 832) = v55;
    *(_QWORD *)(v6 + 848) = &v55[v54];
    bzero(v55, v54);
    *(_QWORD *)(v6 + 840) = &v55[v54];
    *(_QWORD *)(v6 + 856) = 0;
    if ((uint64_t)v54 >= 1)
      bzero(v55, 4 * ((v54 >> 2) - (v54 > 3)) + 4);
  }
  else
  {
    *(_QWORD *)(v6 + 856) = 0;
  }
  v34 = *((unsigned __int8 *)this + 88);
  v35 = *((unsigned __int8 *)this + 89);
  v36 = *((float *)this + 23);
  v37 = *((_BYTE *)this + 96);
  *(_QWORD *)(v6 + 864) = a3;
  *(float *)(v6 + 872) = 1.0 / (float)a3;
  *(float *)(v6 + 876) = v36 * 64.0;
  *(_BYTE *)(v6 + 880) = v37;
  if (v35)
    v38 = 1;
  else
    v38 = 2;
  if (v34)
    v39 = 0;
  else
    v39 = v38;
  if ((_DWORD)a3 == 1)
    v39 = 2;
  *(_DWORD *)(v6 + 884) = v39;
  *(_QWORD *)(v6 + 936) = 0;
  *(_QWORD *)(v6 + 904) = 0;
  *(_QWORD *)(v6 + 920) = 0;
  *(_QWORD *)(v6 + 912) = 0;
  *(_DWORD *)(v6 + 928) = 0;
  if (v39 == 1)
  {
    *(_QWORD *)(v6 + 896) = 0;
    *(_QWORD *)(v6 + 888) = 0;
    if (a3)
    {
      std::vector<float>::__append(v6 + 904, a3);
      v40 = *(void **)(v6 + 904);
      v41 = *(_QWORD *)(v6 + 912) - (_QWORD)v40;
      if (v41 >= 1)
        bzero(v40, 4 * (((unint64_t)v41 >> 2) - ((unint64_t)v41 > 3)) + 4);
    }
  }
  webrtc::Decimator::Decimator((void **)(v6 + 944), *(void **)(v6 + 640));
  *(_BYTE *)(v6 + 1000) = 0;
  v49 = *(int *)(v6 + 648);
  *(_QWORD *)(v6 + 1008) = 0;
  *(_QWORD *)(v6 + 1024) = 0;
  *(_QWORD *)(v6 + 1016) = 0;
  if ((_DWORD)v49)
  {
    if ((v49 & 0x80000000) == 0)
    {
      v50 = 4 * v49;
      v51 = (char *)operator new(4 * v49);
      *(_QWORD *)(v6 + 1008) = v51;
      v52 = &v51[v50];
      *(_QWORD *)(v6 + 1024) = &v51[v50];
      bzero(v51, v50);
      *(_QWORD *)(v6 + 1016) = v52;
      goto LABEL_24;
    }
LABEL_29:
    abort();
  }
LABEL_24:
  *(_DWORD *)(v6 + 1032) = *v12;
  *(_BYTE *)(v6 + 1036) = 0;
  *(_QWORD *)(v6 + 1040) = 0x100000000;
  *(_QWORD *)(v6 + 1072) = 0;
  *(_BYTE *)(v6 + 1080) = 0;
  *(_BYTE *)(v6 + 1084) = 0;
  *(_BYTE *)(v6 + 1088) = 0;
  *(_BYTE *)(v6 + 1064) = 0;
  *(_OWORD *)(v6 + 1048) = 0u;
  *(_OWORD *)(v6 + 1096) = 0u;
  return v6;
}

void webrtc::`anonymous namespace'::RenderDelayBufferImpl::Reset(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  _BYTE *v22;
  int v23;
  int v24;

  *((_BYTE *)this + 1036) = 0;
  *((_DWORD *)this + 260) = 1;
  *(_OWORD *)((char *)this + 1096) = 0u;
  v9 = *((_DWORD *)this + 214);
  v10 = *((_DWORD *)this + 162);
  v11 = (v10 + v9 + *((_DWORD *)this + 206)) % *((_DWORD *)this + 206);
  *((_DWORD *)this + 215) = v11;
  if (*((_BYTE *)this + 1084))
  {
    v12 = *((_DWORD *)this + 270);
    if (v12 < 3)
      v13 = 1;
    else
      v13 = (v12 - 2);
    v14 = ~*((_DWORD *)this + 258);
    if (((uint64_t)(*((_QWORD *)this + 84) - *((_QWORD *)this + 83)) >> 5) + v14 >= v13)
      LODWORD(v15) = v13;
    else
      v15 = ((uint64_t)(*((_QWORD *)this + 84) - *((_QWORD *)this + 83)) >> 5) + v14;
    v16 = *((_DWORD *)this + 159);
      || (rtc::LogMessage::streams_empty_ & 1) == 0)
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
      v11 = *((_DWORD *)this + 215);
      v9 = *((_DWORD *)this + 214);
      v10 = *((_DWORD *)this + 162);
    }
    *((_DWORD *)this + 173) = (*((_DWORD *)this + 172) - (int)v15 + *((_DWORD *)this + 164)) % *((_DWORD *)this + 164);
    v17 = *((_DWORD *)this + 182);
    v18 = *((_DWORD *)this + 174);
    v19 = (v17 + v18 + (int)v15) % v18;
    *((_DWORD *)this + 183) = v19;
    *((_DWORD *)this + 193) = (*((_DWORD *)this + 192) + *((_DWORD *)this + 184) + (int)v15) % *((_DWORD *)this + 184);
    if (v19 >= v17)
      v18 = 0;
    v20 = (uint64_t)(*((_QWORD *)this + 105) - *((_QWORD *)this + 104)) >> 2;
    v21 = v19 + v18 - v17 - (int)((v20 + v11 - v9) % v20) / v10;
    if (!*((_BYTE *)this + 784))
      *((_BYTE *)this + 784) = 1;
    *((_QWORD *)this + 97) = v21;
    v22 = (char *)this + 1088;
    goto LABEL_23;
  }
  v23 = *((_DWORD *)this + 10);
  v24 = *((_DWORD *)this + 159);
    || (rtc::LogMessage::streams_empty_ & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
  }
  *((_DWORD *)this + 173) = (*((_DWORD *)this + 172) - v23 + *((_DWORD *)this + 164)) % *((_DWORD *)this + 164);
  *((_DWORD *)this + 183) = (*((_DWORD *)this + 182) + v23 + *((_DWORD *)this + 174)) % *((_DWORD *)this + 174);
  *((_DWORD *)this + 193) = (*((_DWORD *)this + 192) + v23 + *((_DWORD *)this + 184)) % *((_DWORD *)this + 184);
  if (*((_BYTE *)this + 784))
  {
    v22 = (char *)this + 784;
LABEL_23:
    *v22 = 0;
  }
}

void webrtc::`anonymous namespace'::RenderDelayBufferImpl::~RenderDelayBufferImpl(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;

  v2 = (void *)*((_QWORD *)this + 126);
  if (v2)
  {
    *((_QWORD *)this + 127) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 122);
  if (v3)
  {
    *((_QWORD *)this + 123) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 119);
  if (v4)
  {
    *((_QWORD *)this + 120) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 113);
  if (v5)
  {
    *((_QWORD *)this + 114) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 104);
  if (v6)
  {
    *((_QWORD *)this + 105) = v6;
    operator delete(v6);
  }
  v7 = *((_QWORD *)this + 93);
  if (v7)
  {
    v8 = *((_QWORD *)this + 94);
    v9 = (void *)*((_QWORD *)this + 93);
    if (v8 != v7)
    {
      v10 = *((_QWORD *)this + 94);
      do
      {
        v12 = *(void **)(v10 - 24);
        v10 -= 24;
        v11 = v12;
        if (v12)
        {
          *(_QWORD *)(v8 - 16) = v11;
          operator delete(v11);
        }
        v8 = v10;
      }
      while (v10 != v7);
      v9 = (void *)*((_QWORD *)this + 93);
    }
    *((_QWORD *)this + 94) = v7;
    operator delete(v9);
  }
  v13 = *((_QWORD *)this + 88);
  if (v13)
  {
    v14 = *((_QWORD *)this + 89);
    v15 = (void *)*((_QWORD *)this + 88);
    if (v14 != v13)
    {
      v16 = *((_QWORD *)this + 89);
      do
      {
        v18 = *(void **)(v16 - 24);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *(_QWORD *)(v14 - 16) = v17;
          operator delete(v17);
        }
        v14 = v16;
      }
      while (v16 != v13);
      v15 = (void *)*((_QWORD *)this + 88);
    }
    *((_QWORD *)this + 89) = v13;
    operator delete(v15);
  }
  v19 = *((_QWORD *)this + 83);
  if (v19)
  {
    v20 = *((_QWORD *)this + 84);
    v21 = (void *)*((_QWORD *)this + 83);
    if (v20 != v19)
    {
      do
      {
        v22 = *(void **)(v20 - 24);
        if (v22)
        {
          *(_QWORD *)(v20 - 16) = v22;
          operator delete(v22);
        }
        v20 -= 32;
      }
      while (v20 != v19);
      v21 = (void *)*((_QWORD *)this + 83);
    }
    *((_QWORD *)this + 84) = v19;
    operator delete(v21);
  }
  v23 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v23)
    MEMORY[0x20BD0ADEC](v23, 0xC400A2AC0F1);
}

{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::`anonymous namespace'::RenderDelayBufferImpl::Insert(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _BOOL4 v18;
  float *v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t *v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  float32x4_t *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t j;
  uint64_t v74;
  float v75;
  uint64_t v76;
  float *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int32x4_t *v94;
  int8x16_t *v95;
  uint64_t v96;
  int8x16_t v97;
  int8x16_t v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  float32x4_t *v123;
  unint64_t v124;
  float32x4_t *v125;
  uint64_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  float *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  int v150;
  float32x4_t *v151;
  float v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t i;
  unint64_t v165;
  float32x4_t __dst;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  uint64_t v182;

  ++*(_QWORD *)(a1 + 1056);
  if (*(_BYTE *)(a1 + 784))
  {
    if (*(_BYTE *)(a1 + 1036))
    {
      v10 = *(_DWORD *)(a1 + 1040);
      *(_DWORD *)(a1 + 1040) = v10 + 1;
      if (v10 >= *(_DWORD *)(a1 + 1044))
      {
        *(_DWORD *)(a1 + 1044) = v10 + 1;
        v11 = *(_DWORD *)(a1 + 636);
        if (v12 || (rtc::LogMessage::streams_empty_ & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
      }
    }
    else
    {
      *(_BYTE *)(a1 + 1036) = 1;
      *(_DWORD *)(a1 + 1040) = 1;
    }
  }
  v13 = *(int *)(a1 + 688);
  v14 = (*(_DWORD *)(a1 + 856) - *(_DWORD *)(a1 + 648) + *(_DWORD *)(a1 + 824)) % *(_DWORD *)(a1 + 824);
  *(_DWORD *)(a1 + 856) = v14;
  v165 = v13;
  if (*(_DWORD *)(a1 + 656) - 1 > (int)v13)
    v15 = v13 + 1;
  else
    v15 = 0;
  *(_DWORD *)(a1 + 688) = v15;
  v16 = *(_DWORD *)(a1 + 728);
  if (v16 <= 0)
  {
    *(_DWORD *)(a1 + 728) = *(_DWORD *)(a1 + 696) - 1;
    v17 = *(_DWORD *)(a1 + 768);
    if (v17 > 0)
    {
LABEL_16:
      *(_DWORD *)(a1 + 768) = v17 - 1;
      if (*(_DWORD *)(a1 + 860) == v14)
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 728) = v16 - 1;
    v17 = *(_DWORD *)(a1 + 768);
    if (v17 > 0)
      goto LABEL_16;
  }
  *(_DWORD *)(a1 + 768) = *(_DWORD *)(a1 + 736) - 1;
  if (*(_DWORD *)(a1 + 860) == v14)
  {
LABEL_17:
    v18 = 1;
    if (*(_BYTE *)(a1 + 1064))
      goto LABEL_26;
    goto LABEL_22;
  }
LABEL_21:
  v18 = *(_DWORD *)(a1 + 692) == v15;
  if (*(_BYTE *)(a1 + 1064))
    goto LABEL_26;
LABEL_22:
  v19 = *(float **)(a2 + 8);
  if (*(float **)(a2 + 16) == v19)
    goto LABEL_105;
  v20 = v19[11];
  v21 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*v19 * *v19) + 0.0) + (float)(v19[1] * v19[1])) + (float)(v19[2] * v19[2])) + (float)(v19[3] * v19[3])) + (float)(v19[4] * v19[4])) + (float)(v19[5] * v19[5])) + (float)(v19[6] * v19[6])) + (float)(v19[7] * v19[7])) + (float)(v19[8] * v19[8])) + (float)(v19[9] * v19[9]))
                                                                                              + (float)(v19[10] * v19[10]))
                                                                                      + (float)(v20 * v20))
                                                                              + (float)(v19[12] * v19[12]))
                                                                      + (float)(v19[13] * v19[13]))
                                                              + (float)(v19[14] * v19[14]))
                                                      + (float)(v19[15] * v19[15]))
                                              + (float)(v19[16] * v19[16]))
                                      + (float)(v19[17] * v19[17]))
                              + (float)(v19[18] * v19[18]))
                      + (float)(v19[19] * v19[19]))
              + (float)(v19[20] * v19[20]))
      + (float)(v19[21] * v19[21]);
  v22 = v19[33];
  v23 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v21 + (float)(v19[22] * v19[22])) + (float)(v19[23] * v19[23])) + (float)(v19[24] * v19[24])) + (float)(v19[25] * v19[25])) + (float)(v19[26] * v19[26])) + (float)(v19[27] * v19[27])) + (float)(v19[28] * v19[28])) + (float)(v19[29] * v19[29])) + (float)(v19[30] * v19[30])) + (float)(v19[31] * v19[31]))
                                                                                              + (float)(v19[32] * v19[32]))
                                                                                      + (float)(v22 * v22))
                                                                              + (float)(v19[34] * v19[34]))
                                                                      + (float)(v19[35] * v19[35]))
                                                              + (float)(v19[36] * v19[36]))
                                                      + (float)(v19[37] * v19[37]))
                                              + (float)(v19[38] * v19[38]))
                                      + (float)(v19[39] * v19[39]))
                              + (float)(v19[40] * v19[40]))
                      + (float)(v19[41] * v19[41]))
              + (float)(v19[42] * v19[42]))
      + (float)(v19[43] * v19[43]);
  v24 = v19[55];
  v25 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v23 + (float)(v19[44] * v19[44])) + (float)(v19[45] * v19[45])) + (float)(v19[46] * v19[46])) + (float)(v19[47] * v19[47])) + (float)(v19[48] * v19[48])) + (float)(v19[49] * v19[49])) + (float)(v19[50] * v19[50])) + (float)(v19[51] * v19[51]))
                                                                                              + (float)(v19[52] * v19[52]))
                                                                                      + (float)(v19[53] * v19[53]))
                                                                              + (float)(v19[54] * v19[54]))
                                                                      + (float)(v24 * v24))
                                                              + (float)(v19[56] * v19[56]))
                                                      + (float)(v19[57] * v19[57]))
                                              + (float)(v19[58] * v19[58]))
                                      + (float)(v19[59] * v19[59]))
                              + (float)(v19[60] * v19[60]))
                      + (float)(v19[61] * v19[61]))
              + (float)(v19[62] * v19[62]))
      + (float)(v19[63] * v19[63]);
  v26 = *(_QWORD *)(a1 + 1072);
  if (v25 > (float)((float)(*(float *)(a1 + 340) * *(float *)(a1 + 340)) * 64.0))
    ++v26;
  *(_QWORD *)(a1 + 1072) = v26;
  *(_BYTE *)(a1 + 1064) = v26 > 0x13;
LABEL_26:
  v27 = v15;
  v28 = *(_QWORD *)(a1 + 664);
  v29 = (*(_QWORD *)(a1 + 672) - v28) >> 5;
  if (v29 <= v27)
    goto LABEL_105;
  v30 = (int *)(v28 + 32 * v27);
  v31 = *v30;
  v32 = v30[1];
  if ((_DWORD)v31)
    v33 = (_DWORD)v32 == 0;
  else
    v33 = 1;
  if (!v33)
  {
    v34 = 0;
LABEL_32:
    v35 = 0;
    while (1)
    {
      v36 = *(int *)(a1 + 688);
      v37 = *(_QWORD *)(a1 + 664);
      if (v36 >= (*(_QWORD *)(a1 + 672) - v37) >> 5)
        goto LABEL_105;
      memmove((void *)(*(_QWORD *)(v37 + 32 * v36 + 8) + 4 * (((int)v35 + (int)v34 * *(_DWORD *)(v37 + 32 * v36 + 4)) << 6)), (const void *)(*(_QWORD *)(a2 + 8) + 4 * (((int)v35 + (int)v34 * *(_DWORD *)(a2 + 4)) << 6)), 0x100uLL);
      if (v32 == ++v35)
      {
        if (++v34 != v31)
          goto LABEL_32;
        v38 = *(_QWORD *)(a1 + 672);
        v28 = *(_QWORD *)(a1 + 664);
        if (*(float *)(a1 + 632) == 1.0)
        {
          v29 = (v38 - v28) >> 5;
          break;
        }
        v138 = *(int *)(a1 + 688);
        v29 = (v38 - v28) >> 5;
        if (v29 > v138)
        {
          v139 = 0;
          v140 = 0;
          v141 = (float *)(a1 + 632);
          v142 = v28 + 32 * v138;
          v143 = *(_DWORD *)(v142 + 4);
          v145 = v142 + 8;
          v144 = *(_QWORD *)(v142 + 8);
          v146 = (*(_QWORD *)(v145 + 8) - v144) >> 2;
          if (v32 <= 1)
            v147 = 1;
          else
            v147 = v32;
          v148 = v143 << 6;
LABEL_96:
          v149 = 0;
          v150 = v139;
          while (1)
          {
            v162 = (v143 * (int)v140 + (int)v149) << 6;
            if (v146 <= v162)
              break;
            v163 = (uint64_t)(((unint64_t)(v140 * v148) << 32) + (v149 << 38)) >> 30;
            if (v144 + v163 >= (unint64_t)(a1 + 636) || (unint64_t)v141 >= v144 + 256 + v163)
            {
              v151 = (float32x4_t *)(v144 + 4 * v162);
              v152 = *v141;
              v153 = vmulq_n_f32(v151[1], *v141);
              *v151 = vmulq_n_f32(*v151, *v141);
              v151[1] = v153;
              v154 = vmulq_n_f32(v151[3], v152);
              v151[2] = vmulq_n_f32(v151[2], v152);
              v151[3] = v154;
              v155 = vmulq_n_f32(v151[5], v152);
              v151[4] = vmulq_n_f32(v151[4], v152);
              v151[5] = v155;
              v156 = vmulq_n_f32(v151[7], v152);
              v151[6] = vmulq_n_f32(v151[6], v152);
              v151[7] = v156;
              v157 = vmulq_n_f32(v151[8], v152);
              v158 = vmulq_n_f32(v151[9], v152);
              v151[8] = v157;
              v151[9] = v158;
              v159 = vmulq_n_f32(v151[11], *v141);
              v151[10] = vmulq_n_f32(v151[10], *v141);
              v151[11] = v159;
              v160 = vmulq_n_f32(v151[13], *v141);
              v151[12] = vmulq_n_f32(v151[12], *v141);
              v151[13] = v160;
              v161 = vmulq_n_f32(v151[15], *v141);
              v151[14] = vmulq_n_f32(v151[14], *v141);
              v151[15] = v161;
            }
            else
            {
              for (i = 0; i != 256; i += 4)
                *(float *)(v144 + 4 * v150 + i) = *v141 * *(float *)(v144 + 4 * v150 + i);
            }
            ++v149;
            v150 += 64;
            if (v149 == v147)
            {
              ++v140;
              v139 += v148;
              if (v140 == v31)
                goto LABEL_38;
              goto LABEL_96;
            }
          }
        }
        goto LABEL_105;
      }
    }
  }
LABEL_38:
  v39 = *(int *)(a1 + 688);
  if (v29 <= v39)
  {
LABEL_105:
    __break(1u);
    return;
  }
  v40 = v28 + 32 * v39;
  v41 = *(_DWORD *)(a1 + 884);
  if (v41 == 2)
  {
    v74 = 0;
LABEL_54:
    memmove(&__dst, (const void *)(*(_QWORD *)(v40 + 8) + 4 * v74), 0x100uLL);
    goto LABEL_56;
  }
  v42 = (uint64_t *)(a1 + 864);
  if (v41)
  {
    v74 = (int)(webrtc::AlignmentMixer::SelectChannel((uint64_t)v42, v40) << 6);
    goto LABEL_54;
  }
  v43 = *(float32x4_t **)(v40 + 8);
  if (*(float32x4_t **)(v40 + 16) == v43)
    goto LABEL_105;
  v44 = *v43;
  v45 = v43[1];
  v46 = v43[3];
  v168 = v43[2];
  v169 = v46;
  __dst = v44;
  v167 = v45;
  v47 = v43[4];
  v48 = v43[5];
  v49 = v43[7];
  v172 = v43[6];
  v173 = v49;
  v170 = v47;
  v171 = v48;
  v50 = v43[8];
  v51 = v43[9];
  v52 = v43[11];
  v176 = v43[10];
  v177 = v52;
  v174 = v50;
  v175 = v51;
  v53 = v43[12];
  v54 = v43[13];
  v55 = v43[15];
  v180 = v43[14];
  v181 = v55;
  v178 = v53;
  v179 = v54;
  v56 = *v42;
  if ((unint64_t)*v42 >= 2)
  {
    v57 = 0;
    v58 = *(_QWORD *)(v40 + 8);
    v59 = (*(_QWORD *)(v40 + 16) - v58) >> 2;
    v60 = 64;
    v61 = 1;
    do
    {
      v71 = (int)((_DWORD)v61 << 6);
      if (v59 <= v71)
        goto LABEL_105;
      v72 = 4 * ((v57 << 6) + 64);
      if ((unint64_t)&__dst >= v58 + 256 + v72 || v58 + v72 >= (unint64_t)&v182)
      {
        v62 = (float32x4_t *)(v58 + 4 * v71);
        v63 = vaddq_f32(v62[1], v167);
        __dst = vaddq_f32(*v62, __dst);
        v167 = v63;
        v64 = vaddq_f32(v62[3], v169);
        v168 = vaddq_f32(v62[2], v168);
        v169 = v64;
        v65 = vaddq_f32(v62[5], v171);
        v170 = vaddq_f32(v62[4], v170);
        v171 = v65;
        v66 = vaddq_f32(v62[7], v173);
        v172 = vaddq_f32(v62[6], v172);
        v173 = v66;
        v67 = vaddq_f32(v62[9], v175);
        v174 = vaddq_f32(v62[8], v174);
        v175 = v67;
        v68 = vaddq_f32(v62[11], v177);
        v176 = vaddq_f32(v62[10], v176);
        v177 = v68;
        v69 = vaddq_f32(v62[13], v179);
        v178 = vaddq_f32(v62[12], v178);
        v179 = v69;
        v70 = vaddq_f32(v62[15], v181);
        v180 = vaddq_f32(v62[14], v180);
        v181 = v70;
      }
      else
      {
        for (j = 0; j != 64; ++j)
          __dst.f32[j] = *(float *)(v58 + 4 * v60 + j * 4) + __dst.f32[j];
      }
      ++v61;
      ++v57;
      v60 += 64;
    }
    while (v61 != v56);
  }
  v75 = *(float *)(a1 + 872);
  __dst = vmulq_n_f32(__dst, v75);
  v167 = vmulq_n_f32(v167, v75);
  v168 = vmulq_n_f32(v168, v75);
  v169 = vmulq_n_f32(v169, v75);
  v170 = vmulq_n_f32(v170, v75);
  v171 = vmulq_n_f32(v171, v75);
  v172 = vmulq_n_f32(v172, v75);
  v173 = vmulq_n_f32(v173, v75);
  v174 = vmulq_n_f32(v174, v75);
  v175 = vmulq_n_f32(v175, v75);
  v176 = vmulq_n_f32(v176, v75);
  v177 = vmulq_n_f32(v177, v75);
  v178 = vmulq_n_f32(v178, v75);
  v179 = vmulq_n_f32(v179, v75);
  v180 = vmulq_n_f32(v180, v75);
  v181 = vmulq_n_f32(v181, v75);
LABEL_56:
  v76 = *(_QWORD *)(a1 + 1016) - *(_QWORD *)(a1 + 1008);
  if (v76)
    v77 = *(float **)(a1 + 1008);
  else
    v77 = 0;
  webrtc::Decimator::Decimate((_QWORD *)(a1 + 944), __dst.f32, 64, v77, v76 >> 2);
  v85 = *(_QWORD *)(a1 + 1016);
  v86 = *(_QWORD *)(a1 + 1008);
  if (v85 != v86)
  {
    v87 = *(_QWORD *)(a1 + 832);
    v88 = *(int *)(a1 + 856);
    v89 = (_DWORD *)(v87 + 4 * v88);
    v90 = v85 - v86 - 4;
    if (v90 < 0x5C
      || (unint64_t)v89 < v85
      && v85 - (v90 & 0xFFFFFFFFFFFFFFFCLL) - 4 < (v90 & 0xFFFFFFFFFFFFFFFCLL) + 4 * v88 + v87 + 4)
    {
      goto LABEL_108;
    }
    v91 = (v90 >> 2) + 1;
    v92 = 4 * (v91 & 0x7FFFFFFFFFFFFFF8);
    v89 = (_DWORD *)((char *)v89 + v92);
    v93 = v85 - v92;
    v94 = (int32x4_t *)(v85 - 16);
    v95 = (int8x16_t *)(v87 + 4 * v88 + 16);
    v96 = v91 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v97 = (int8x16_t)vrev64q_s32(*v94);
      v98 = (int8x16_t)vrev64q_s32(v94[-1]);
      v95[-1] = vextq_s8(v97, v97, 8uLL);
      *v95 = vextq_s8(v98, v98, 8uLL);
      v94 -= 2;
      v95 += 2;
      v96 -= 8;
    }
    while (v96);
    v85 = v93;
    if (v91 != (v91 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_108:
      do
      {
        v99 = *(_DWORD *)(v85 - 4);
        v85 -= 4;
        *v89++ = v99;
      }
      while (v85 != v86);
    }
  }
  v100 = *(int *)(a1 + 688);
  v101 = *(_QWORD *)(a1 + 664);
  v102 = (*(_QWORD *)(a1 + 672) - v101) >> 5;
  if (v102 <= v100)
    goto LABEL_105;
  v103 = 0;
  v104 = 0;
  while (1)
  {
    v105 = v101 + 32 * v100;
    if ((uint64_t)v104 >= *(int *)(v105 + 4))
      break;
    v106 = (int)((_DWORD)v104 << 6);
    v108 = v105 + 8;
    v107 = *(_QWORD *)(v105 + 8);
    if (v106 < (*(_QWORD *)(v108 + 8) - v107) >> 2 && v102 > v165)
    {
      v110 = (uint64_t *)(v101 + 32 * v165 + 8);
      v109 = *v110;
      if (v106 < (v110[1] - *v110) >> 2)
      {
        v111 = *(int *)(a1 + 768);
        v112 = *(_QWORD *)(a1 + 744);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 752) - v112) >> 3) > v111)
        {
          v114 = (uint64_t *)(v112 + 24 * (int)v111);
          v113 = *v114;
          if (0xFC0FC0FC0FC0FC1 * ((v114[1] - *v114) >> 3) > v104)
          {
            webrtc::Aec3Fft::PaddedFft((webrtc::OouraFft *)(a1 + 1000), (float32x4_t *)(v107 + 4 * v106), 64, (float32x4_t *)(v109 + 4 * v106), 64, 0, v113 + 520 * v104);
            v115 = *(int *)(a1 + 768);
            v116 = *(_QWORD *)(a1 + 744);
            if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 752) - v116) >> 3) > v115)
            {
              v118 = (uint64_t *)(v116 + 24 * (int)v115);
              v117 = *v118;
              if (0xFC0FC0FC0FC0FC1 * ((v118[1] - *v118) >> 3) > v104)
              {
                v119 = *(int *)(a1 + 728);
                v120 = *(_QWORD *)(a1 + 704);
                if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 712) - v120) >> 3) > v119)
                {
                  v121 = (uint64_t *)(v120 + 24 * (int)v119);
                  v122 = *v121;
                  if (0xFC0FC0FC0FC0FC1 * ((v121[1] - *v121) >> 2) > v104)
                  {
                    v123 = (float32x4_t *)(v117 + 520 * v104);
                    v124 = v122 + 260 * v104;
                    v125 = (float32x4_t *)((char *)v123 + 260);
                    if (v124 >= v117 + 520 * v104 + 520 || (unint64_t)v123 >= v122 + 260 * v104 + 260)
                    {
                      v127 = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 276), *(float32x4_t *)(v117 + 520 * v104 + 276)), v123[1], v123[1]);
                      *(float32x4_t *)v124 = vmlaq_f32(vmulq_f32(*v125, *v125), *v123, *v123);
                      *(float32x4_t *)(v124 + 16) = v127;
                      v128 = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 308), *(float32x4_t *)(v117 + 520 * v104 + 308)), v123[3], v123[3]);
                      *(float32x4_t *)(v124 + 32) = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 292), *(float32x4_t *)(v117 + 520 * v104 + 292)), v123[2], v123[2]);
                      *(float32x4_t *)(v124 + 48) = v128;
                      v129 = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 340), *(float32x4_t *)(v117 + 520 * v104 + 340)), v123[5], v123[5]);
                      *(float32x4_t *)(v124 + 64) = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 324), *(float32x4_t *)(v117 + 520 * v104 + 324)), v123[4], v123[4]);
                      *(float32x4_t *)(v124 + 80) = v129;
                      v130 = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 372), *(float32x4_t *)(v117 + 520 * v104 + 372)), v123[7], v123[7]);
                      *(float32x4_t *)(v124 + 96) = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 356), *(float32x4_t *)(v117 + 520 * v104 + 356)), v123[6], v123[6]);
                      *(float32x4_t *)(v124 + 112) = v130;
                      v131 = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 404), *(float32x4_t *)(v117 + 520 * v104 + 404)), v123[9], v123[9]);
                      *(float32x4_t *)(v124 + 128) = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 388), *(float32x4_t *)(v117 + 520 * v104 + 388)), v123[8], v123[8]);
                      *(float32x4_t *)(v124 + 144) = v131;
                      v132 = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 436), *(float32x4_t *)(v117 + 520 * v104 + 436)), v123[11], v123[11]);
                      *(float32x4_t *)(v124 + 160) = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 420), *(float32x4_t *)(v117 + 520 * v104 + 420)), v123[10], v123[10]);
                      *(float32x4_t *)(v124 + 176) = v132;
                      v133 = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 468), *(float32x4_t *)(v117 + 520 * v104 + 468)), v123[13], v123[13]);
                      *(float32x4_t *)(v124 + 192) = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 452), *(float32x4_t *)(v117 + 520 * v104 + 452)), v123[12], v123[12]);
                      *(float32x4_t *)(v124 + 208) = v133;
                      v125 = (float32x4_t *)(v117 + 520 * v104 + 516);
                      v134 = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 500), *(float32x4_t *)(v117 + 520 * v104 + 500)), v123[15], v123[15]);
                      *(float32x4_t *)(v124 + 224) = vmlaq_f32(vmulq_f32(*(float32x4_t *)(v117 + 520 * v104 + 484), *(float32x4_t *)(v117 + 520 * v104 + 484)), v123[14], v123[14]);
                      *(float32x4_t *)(v124 + 240) = v134;
                      v124 += 256;
                      v126 = 64;
                    }
                    else
                    {
                      v126 = 0;
                    }
                    v135 = 4 * v126;
                    v136 = v117 + v103;
                    do
                    {
                      v137 = v125->f32[0];
                      v125 = (float32x4_t *)((char *)v125 + 4);
                      *(float *)v124 = (float)(v137 * v137) + (float)(*(float *)(v136 + v135) * *(float *)(v136 + v135));
                      v124 += 4;
                      v135 += 4;
                    }
                    while (v135 != 260);
                    ++v104;
                    v100 = *(int *)(a1 + 688);
                    v101 = *(_QWORD *)(a1 + 664);
                    v102 = (*(_QWORD *)(a1 + 672) - v101) >> 5;
                    v103 += 520;
                    if (v102 > v100)
                      continue;
                  }
                }
              }
            }
          }
        }
      }
    }
    goto LABEL_105;
  }
  if (v18)
}

uint64_t webrtc::`anonymous namespace'::RenderDelayBufferImpl::PrepareCaptureProcessing(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t result;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;

  ++*((_QWORD *)this + 131);
  if (*((_BYTE *)this + 784))
  {
    if (*((_BYTE *)this + 1036))
    {
      *((_BYTE *)this + 1036) = 0;
      *((_DWORD *)this + 260) = 1;
    }
    else
    {
      v9 = *((_DWORD *)this + 260);
      *((_DWORD *)this + 260) = v9 + 1;
      if (v9 >= *((_DWORD *)this + 261))
      {
        *((_DWORD *)this + 261) = v9 + 1;
        v10 = *((_DWORD *)this + 159);
        if (v11 || (rtc::LogMessage::streams_empty_ & 1) == 0)
          rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
      }
    }
  }
  v12 = (uint64_t)(*((_QWORD *)this + 105) - *((_QWORD *)this + 104)) >> 2;
  v13 = *((int *)this + 215);
  v14 = *((int *)this + 214);
  v15 = (v12 + v13 - v14) % v12;
  v16 = *((_DWORD *)this + 162);
  v17 = v15 / v16;
  v18 = *((_QWORD *)this + 137);
  if (v18 >= v17)
    v18 = v17;
  *((_QWORD *)this + 137) = v18;
  v19 = *((_QWORD *)this + 138) + 1;
  *((_QWORD *)this + 138) = v19;
  if (v19 >= *((_QWORD *)this + 3))
  {
    v20 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 137) = v17;
    *((_QWORD *)this + 138) = 0;
    if (v18 > v20)
    {
      v21 = *((_DWORD *)this + 159);
        || (rtc::LogMessage::streams_empty_ & 1) == 0)
      {
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
      }
      result = 2;
      v23 = *((unsigned __int8 *)this + 1064);
      *((_BYTE *)this + 816) = v23;
      if (!v23)
        return result;
      goto LABEL_43;
    }
  }
  if ((_DWORD)v13 == (_DWORD)v14)
  {
    v24 = *((_DWORD *)this + 159);
      && (rtc::LogMessage::streams_empty_ & 1) != 0)
    {
      v25 = *((_DWORD *)this + 173);
      if (v25 == *((_DWORD *)this + 172))
        goto LABEL_26;
    }
    else
    {
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)3,long long> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
      v25 = *((_DWORD *)this + 173);
      if (v25 == *((_DWORD *)this + 172))
      {
LABEL_26:
        if (*((_BYTE *)this + 784))
          goto LABEL_27;
LABEL_41:
        result = 1;
        goto LABEL_42;
      }
    }
    if (*((_DWORD *)this + 164) - 1 > v25)
      v30 = v25 + 1;
    else
      v30 = 0;
    *((_DWORD *)this + 173) = v30;
    v31 = *((_DWORD *)this + 183);
    if (v31 <= 0)
      v31 = *((_DWORD *)this + 174);
    *((_DWORD *)this + 183) = v31 - 1;
    v32 = *((_DWORD *)this + 193);
    if (v32 <= 0)
    {
      *((_DWORD *)this + 193) = *((_DWORD *)this + 184) - 1;
      if (!*((_BYTE *)this + 784))
        goto LABEL_41;
    }
    else
    {
      *((_DWORD *)this + 193) = v32 - 1;
      if (!*((_BYTE *)this + 784))
        goto LABEL_41;
    }
LABEL_27:
    v26 = *((_QWORD *)this + 97);
    result = 1;
    if (v26)
    {
      *((_QWORD *)this + 97) = v26 - 1;
      *((_BYTE *)this + 784) = 1;
      v27 = *((unsigned __int8 *)this + 1064);
      *((_BYTE *)this + 816) = v27;
      if (!v27)
        return result;
      goto LABEL_43;
    }
LABEL_42:
    v33 = *((unsigned __int8 *)this + 1064);
    *((_BYTE *)this + 816) = v33;
    if (!v33)
      return result;
    goto LABEL_43;
  }
  *((_DWORD *)this + 215) = ((int)v13 - v16 + *((_DWORD *)this + 206)) % *((_DWORD *)this + 206);
  v28 = *((_DWORD *)this + 173);
  if (v28 == *((_DWORD *)this + 172))
  {
    result = 0;
    v29 = *((unsigned __int8 *)this + 1064);
    *((_BYTE *)this + 816) = v29;
    if (!v29)
      return result;
    goto LABEL_43;
  }
  if (*((_DWORD *)this + 164) - 1 > v28)
    v34 = v28 + 1;
  else
    v34 = 0;
  *((_DWORD *)this + 173) = v34;
  v35 = *((_DWORD *)this + 183);
  if (v35 <= 0)
    v35 = *((_DWORD *)this + 174);
  *((_DWORD *)this + 183) = v35 - 1;
  v36 = *((_DWORD *)this + 193);
  if (v36 <= 0)
    v36 = *((_DWORD *)this + 184);
  result = 0;
  *((_DWORD *)this + 193) = v36 - 1;
  v37 = *((unsigned __int8 *)this + 1064);
  *((_BYTE *)this + 816) = v37;
  if (v37)
  {
LABEL_43:
    *((_QWORD *)this + 134) = 0;
    *((_BYTE *)this + 1064) = 0;
  }
  return result;
}

uint64_t webrtc::`anonymous namespace'::RenderDelayBufferImpl::HandleSkippedCaptureProcessing(uint64_t this)
{
  ++*(_QWORD *)(this + 1048);
  return this;
}

uint64_t webrtc::`anonymous namespace'::RenderDelayBufferImpl::AlignFromDelay(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;

  if (!*((_BYTE *)this + 1088) && *((_BYTE *)this + 1084) && *((_BYTE *)this + 784))
  {
    v16 = *((_DWORD *)this + 159);
    if (v17 || (rtc::LogMessage::streams_empty_ & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
    *((_BYTE *)this + 1088) = 1;
  }
  if (*((_BYTE *)this + 784) && *((_QWORD *)this + 97) == a2)
    return 0;
  *((_QWORD *)this + 97) = a2;
  *((_BYTE *)this + 784) = 1;
  v11 = (uint64_t)(*((_QWORD *)this + 105) - *((_QWORD *)this + 104)) >> 2;
  LODWORD(v11) = (int)((v11 + *((int *)this + 215) - *((int *)this + 214)) % v11) / *((_DWORD *)this + 162) + a2;
  v12 = ~*((_DWORD *)this + 258);
  v13 = v11 & ~((int)v11 >> 31);
  if (((uint64_t)(*((_QWORD *)this + 84) - *((_QWORD *)this + 83)) >> 5) + v12 >= v13)
    LODWORD(v14) = v13;
  else
    v14 = ((uint64_t)(*((_QWORD *)this + 84) - *((_QWORD *)this + 83)) >> 5) + v12;
  v15 = *((_DWORD *)this + 159);
    || (rtc::LogMessage::streams_empty_ & 1) == 0)
  {
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
  }
  *((_DWORD *)this + 173) = (*((_DWORD *)this + 172) - (int)v14 + *((_DWORD *)this + 164)) % *((_DWORD *)this + 164);
  *((_DWORD *)this + 183) = (*((_DWORD *)this + 182) + *((_DWORD *)this + 174) + (int)v14) % *((_DWORD *)this + 174);
  *((_DWORD *)this + 193) = (*((_DWORD *)this + 192) + *((_DWORD *)this + 184) + (int)v14) % *((_DWORD *)this + 184);
  return 1;
}

void webrtc::`anonymous namespace'::RenderDelayBufferImpl::AlignFromExternalDelay(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  BOOL v11;

  if (*((_BYTE *)this + 1084))
  {
    v9 = *((_DWORD *)this + 264) + *((_DWORD *)this + 270) - (*((_DWORD *)this + 262) + (*((_QWORD *)this + 8) >> 6));
    v10 = *((_DWORD *)this + 159);
    if (v11 || (rtc::LogMessage::streams_empty_ & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
    *((_DWORD *)this + 173) = (*((_DWORD *)this + 172) - v9 + *((_DWORD *)this + 164)) % *((_DWORD *)this + 164);
    *((_DWORD *)this + 183) = (*((_DWORD *)this + 182) + *((_DWORD *)this + 174) + v9) % *((_DWORD *)this + 174);
    *((_DWORD *)this + 193) = (*((_DWORD *)this + 192) + *((_DWORD *)this + 184) + v9) % *((_DWORD *)this + 184);
  }
}

uint64_t webrtc::`anonymous namespace'::RenderDelayBufferImpl::Delay(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this)
{
  int v1;
  int v2;
  unint64_t v3;

  v1 = *((_DWORD *)this + 183);
  v2 = *((_DWORD *)this + 182);
  if (v1 < v2)
    v1 += *((_DWORD *)this + 174);
  v3 = (uint64_t)(*((_QWORD *)this + 105) - *((_QWORD *)this + 104)) >> 2;
  return v1 - v2 - (int)((v3 + *((int *)this + 215) - *((int *)this + 214)) % v3) / *((_DWORD *)this + 162);
}

uint64_t webrtc::`anonymous namespace'::RenderDelayBufferImpl::MaxDelay(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this)
{
  return ((uint64_t)(*((_QWORD *)this + 84) - *((_QWORD *)this + 83)) >> 5) + ~*((_DWORD *)this + 258);
}

uint64_t webrtc::`anonymous namespace'::RenderDelayBufferImpl::GetRenderBuffer(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this)
{
  return (uint64_t)this + 792;
}

uint64_t webrtc::`anonymous namespace'::RenderDelayBufferImpl::GetDownsampledRenderBuffer(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this)
{
  return (uint64_t)this + 824;
}

void webrtc::`anonymous namespace'::RenderDelayBufferImpl::SetAudioBufferDelay(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  BOOL v11;

  v8 = a2;
  if (!*((_BYTE *)this + 1084))
  {
    v10 = *((_DWORD *)this + 159);
    if (v11 || (rtc::LogMessage::streams_empty_ & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*> const&)::t, a2, a3, a4, a5, a6, a7, a8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/audio_processing/aec3/render_delay_buffer.cc");
  }
  *((_DWORD *)this + 270) = v8 / 4;
  *((_BYTE *)this + 1084) = 1;
}

uint64_t webrtc::`anonymous namespace'::RenderDelayBufferImpl::HasReceivedBufferDelay(webrtc::_anonymous_namespace_::RenderDelayBufferImpl *this)
{
  return *((unsigned __int8 *)this + 1084);
}

void webrtc::`anonymous namespace'::RenderDelayControllerImpl::~RenderDelayControllerImpl(webrtc::_anonymous_namespace_::RenderDelayControllerImpl *this)
{
  uint64_t v2;

  webrtc::EchoPathDelayEstimator::~EchoPathDelayEstimator((webrtc::_anonymous_namespace_::RenderDelayControllerImpl *)((char *)this + 64));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0xC400A2AC0F1);
}

{
  uint64_t v2;

  webrtc::EchoPathDelayEstimator::~EchoPathDelayEstimator((webrtc::_anonymous_namespace_::RenderDelayControllerImpl *)((char *)this + 64));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0xC400A2AC0F1);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::`anonymous namespace'::RenderDelayControllerImpl::Reset(webrtc::_anonymous_namespace_::RenderDelayControllerImpl *this, int a2)
{
  if (*((_BYTE *)this + 56))
    *((_BYTE *)this + 56) = 0;
  if (*((_BYTE *)this + 1648))
    *((_BYTE *)this + 1648) = 0;
  webrtc::EchoPathDelayEstimator::Reset((webrtc::_anonymous_namespace_::RenderDelayControllerImpl *)((char *)this + 64), a2);
  *((_DWORD *)this + 416) = 0;
  if (a2)
    *((_DWORD *)this + 417) = 0;
}

__n128 webrtc::`anonymous namespace'::RenderDelayControllerImpl::GetDelay@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  char v18;
  char v19;
  __n128 result;
  __int128 v21;
  _OWORD v22[2];
  char v23;

  ++*(_QWORD *)(a1 + 1656);
  webrtc::EchoPathDelayEstimator::EstimateDelay(a1 + 64, a2, a3, (uint64_t)v22);
  if (!v23)
  {
    if (*(_BYTE *)(a1 + 1648))
    {
      *(int64x2_t *)(a1 + 1632) = vaddq_s64(*(int64x2_t *)(a1 + 1632), vdupq_n_s64(1uLL));
      v8 = *(_DWORD *)(a1 + 1664);
      if (v8 > 499)
        goto LABEL_11;
LABEL_10:
      *(_DWORD *)(a1 + 1664) = v8 + 1;
      goto LABEL_11;
    }
LABEL_9:
    v8 = *(_DWORD *)(a1 + 1664);
    if (v8 > 499)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (!*(_BYTE *)(a1 + 1648))
  {
    *(_DWORD *)(a1 + 1664) = 0;
    v9 = v22[1];
    *(_OWORD *)(a1 + 1616) = v22[0];
    *(_OWORD *)(a1 + 1632) = v9;
    *(_BYTE *)(a1 + 1648) = v23;
    goto LABEL_9;
  }
  v6 = *((_QWORD *)&v22[0] + 1);
  if (*((_QWORD *)&v22[0] + 1) == *(_QWORD *)(a1 + 1624))
  {
    v7 = *(_QWORD *)(a1 + 1632) + 1;
  }
  else
  {
    v7 = 0;
    *(_DWORD *)(a1 + 1664) = 0;
  }
  *(_QWORD *)(a1 + 1632) = v7;
  *(_QWORD *)(a1 + 1640) = 0;
  *(_QWORD *)(a1 + 1624) = v6;
  *(_DWORD *)(a1 + 1616) = v22[0];
  v8 = *(_DWORD *)(a1 + 1664);
  if (v8 <= 499)
    goto LABEL_10;
LABEL_11:
  if (*(_BYTE *)(a1 + 1648))
  {
    if (*(_DWORD *)(a1 + 1668) == 1 && *(_DWORD *)(a1 + 1616) == 1)
      v10 = *(int *)(a1 + 16);
    else
      v10 = 0;
    v11 = *(_QWORD *)(a1 + 1616);
    v12 = *(_QWORD *)(a1 + 1624);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(unsigned __int8 *)(a1 + 56);
    if (v12 >> 6 <= v13 + v10)
      v15 = *(_QWORD *)(a1 + 32);
    else
      v15 = v12 >> 6;
    if (v12 >> 6 <= v13 || v14 == 0)
      v17 = v12 >> 6;
    else
      v17 = v15;
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v17;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a1 + 1632);
    if (!v14)
      *(_BYTE *)(a1 + 56) = 1;
    *(_DWORD *)(a1 + 1668) = v11;
    v18 = 1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      v18 = 0;
      v19 = 0;
      v17 = 0;
      v12 = 0;
      goto LABEL_31;
    }
    v18 = 0;
    v12 = 0;
    v17 = *(_QWORD *)(a1 + 32);
  }
  v19 = 1;
LABEL_31:
  webrtc::RenderDelayControllerMetrics::Update(a1 + 1584, v12, v18, v17, v19);
  result = *(__n128 *)(a1 + 24);
  v21 = *(_OWORD *)(a1 + 40);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v21;
  *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 56);
  return result;
}

BOOL webrtc::`anonymous namespace'::RenderDelayControllerImpl::HasClockdrift(webrtc::_anonymous_namespace_::RenderDelayControllerImpl *this)
{
  return *((_DWORD *)this + 393) != 0;
}

unint64_t webrtc::RenderDelayControllerMetrics::Update(unint64_t result, unint64_t a2, char a3, uint64_t a4, char a5)
{
  unint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v15;

  v7 = result;
  v8 = *(_DWORD *)(result + 16) + 1;
  *(_DWORD *)(result + 16) = v8;
  if (!*(_BYTE *)(result + 24))
  {
    if (a3)
    {
      ++*(_DWORD *)(result + 8);
      v10 = (a2 >> 6) + 2;
      if (v10 == *(_QWORD *)result)
        goto LABEL_7;
    }
    else
    {
      v10 = 0;
      if (!*(_QWORD *)result)
        goto LABEL_7;
    }
    ++*(_DWORD *)(result + 12);
    *(_QWORD *)result = v10;
    goto LABEL_7;
  }
  v9 = *(_DWORD *)(result + 20) + 1;
  *(_DWORD *)(result + 20) = v9;
  if (v9 == 1250)
    *(_BYTE *)(result + 24) = 0;
LABEL_7:
  if (v8 != 2500)
    return result;
  v11 = *(_QWORD *)result;
  v12 = atomic_load(&_MergedGlobals_17);
  if (v12)
  {
    if ((int)v11 >> 1 >= 124)
      v13 = 124;
    else
      v13 = (int)v11 >> 1;
    webrtc::metrics::HistogramAdd(v12, v13);
  }
  else
  {
    while (!__ldaxr(&_MergedGlobals_17))
    {
      if (!__stlxr(0, &_MergedGlobals_17))
        goto LABEL_16;
    }
    __clrex();
  }
LABEL_16:
  if (a5)
  {
    v15 = (unint64_t)(a4 + 2) >> 1;
    if ((int)v15 > 123)
      LODWORD(v15) = 124;
    result = atomic_load(&qword_253EA57B0);
    if (!result)
    {
LABEL_24:
      while (!__ldaxr(&qword_253EA57B0))
      {
        if (!__stlxr(0, &qword_253EA57B0))
          goto LABEL_26;
      }
      __clrex();
      goto LABEL_26;
    }
  }
  else
  {
    LODWORD(v15) = 0;
    result = atomic_load(&qword_253EA57B0);
    if (!result)
      goto LABEL_24;
  }
  result = webrtc::metrics::HistogramAdd(result, v15);
LABEL_26:
  *(_DWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 8) = 0;
  return result;
}

int *webrtc::RenderSignalAnalyzer::Update(int *result, _QWORD *a2, int *a3)
{
  _OWORD *v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  const float *v24;
  float32x4_t v25;
  _QWORD *v26;
  int8x16_t v27;
  int16x4_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  uint64_t i;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  float v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  float *v55;
  float v56;
  uint64_t v57;
  float *v58;
  unint64_t v59;
  int v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  float v72;
  float *v73;
  float *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  uint64_t v83;
  float *v84;
  float v85;
  float *v86;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  __int128 v99;
  _OWORD v100[29];
  __int128 v101;
  uint64_t v102;

  v3 = result + 2;
  if (!*((_BYTE *)a3 + 8))
  {
    *((_QWORD *)result + 63) = 0;
    *(_OWORD *)(result + 118) = 0u;
    *(_OWORD *)(result + 122) = 0u;
    *(_OWORD *)(result + 110) = 0u;
    *(_OWORD *)(result + 114) = 0u;
    *(_OWORD *)(result + 102) = 0u;
    *(_OWORD *)(result + 106) = 0u;
    *(_OWORD *)(result + 94) = 0u;
    *(_OWORD *)(result + 98) = 0u;
    *(_OWORD *)(result + 86) = 0u;
    *(_OWORD *)(result + 90) = 0u;
    *(_OWORD *)(result + 78) = 0u;
    *(_OWORD *)(result + 82) = 0u;
    *(_OWORD *)(result + 70) = 0u;
    *(_OWORD *)(result + 74) = 0u;
    *(_OWORD *)(result + 62) = 0u;
    *(_OWORD *)(result + 66) = 0u;
    *(_OWORD *)(result + 54) = 0u;
    *(_OWORD *)(result + 58) = 0u;
    *(_OWORD *)(result + 46) = 0u;
    *(_OWORD *)(result + 50) = 0u;
    *(_OWORD *)(result + 38) = 0u;
    *(_OWORD *)(result + 42) = 0u;
    *(_OWORD *)(result + 30) = 0u;
    *(_OWORD *)(result + 34) = 0u;
    *(_OWORD *)(result + 22) = 0u;
    *(_OWORD *)(result + 26) = 0u;
    *(_OWORD *)(result + 14) = 0u;
    *(_OWORD *)(result + 18) = 0u;
    *(_OWORD *)(result + 6) = 0u;
    *(_OWORD *)(result + 10) = 0u;
    *v3 = 0u;
    goto LABEL_39;
  }
  v4 = *a3;
  v5 = a2[1];
  v102 = 0;
  v101 = 0u;
  memset(v100, 0, sizeof(v100));
  v99 = 0u;
  v6 = (*(_DWORD *)(v5 + 36) + v4 + *(_DWORD *)v5) % *(_DWORD *)v5;
  v8 = v5 + 8;
  v7 = *(_QWORD *)(v5 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v8 + 8) - v7) >> 3) <= v6)
    goto LABEL_130;
  v9 = (uint64_t *)(v7 + 24 * (int)v6);
  v11 = *v9;
  v10 = v9[1];
  v13 = v10 - v11;
  _ZF = v10 == v11;
  if (v10 == v11)
    v14 = 0;
  else
    v14 = v11;
  if (_ZF)
    goto LABEL_34;
  v15 = 0;
  v16 = v13 / 260;
  if (v16 <= 1)
    v16 = 1;
  __asm { FMOV            V0.4S, #3.0 }
  v21 = v14;
  while (2)
  {
    v22 = 0;
    v23 = (float *)(v14 + 260 * v15);
    v24 = v23 + 1;
    v25 = vld1q_dup_f32(v24);
    v26 = v100;
    do
    {
      v27 = (int8x16_t)v25;
      v25 = *(float32x4_t *)(v21 + v22 + 8);
      v28 = vmovn_s32(vcgtq_f32((float32x4_t)vextq_s8(v27, (int8x16_t)v25, 0xCuLL), vmulq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v25, *(float32x4_t *)(v21 + v22)), (int8x16_t)v25, *(int8x16_t *)(v21 + v22)), _Q0)));
      if ((v28.i8[0] & 1) != 0)
      {
        ++*(v26 - 2);
        if ((v28.i8[2] & 1) == 0)
        {
LABEL_15:
          if ((v28.i8[4] & 1) != 0)
            goto LABEL_20;
          goto LABEL_16;
        }
      }
      else if ((v28.i8[2] & 1) == 0)
      {
        goto LABEL_15;
      }
      ++*(v26 - 1);
      if ((v28.i8[4] & 1) != 0)
      {
LABEL_20:
        ++*v26;
        if ((v28.i8[6] & 1) == 0)
          goto LABEL_12;
        goto LABEL_21;
      }
LABEL_16:
      if ((v28.i8[6] & 1) == 0)
        goto LABEL_12;
LABEL_21:
      ++v26[1];
LABEL_12:
      v22 += 16;
      v26 += 4;
    }
    while (v22 != 240);
    v29 = v23[60];
    v30 = v23[62];
    if (v29 < v30)
      v29 = v23[62];
    if (v25.f32[3] > (float)(v29 * 3.0))
      *(_QWORD *)&v101 = v101 + 1;
    v31 = v23[61];
    v32 = v23[63];
    if (v31 < v32)
      v31 = v23[63];
    if (v30 > (float)(v31 * 3.0))
      ++*((_QWORD *)&v101 + 1);
    v33 = v23[62];
    if (v33 < v23[64])
      v33 = v23[64];
    if (v32 > (float)(v33 * 3.0))
      ++v102;
    ++v15;
    v21 += 260;
    if (v15 != v16)
      continue;
    break;
  }
LABEL_34:
  for (i = 0; i != 504; i += 8)
  {
    v35 = *(_QWORD *)((char *)&v100[-1] + i);
    if (v35)
      v35 = *(_QWORD *)((char *)v3 + i) + 1;
    *(_QWORD *)((char *)v3 + i) = v35;
  }
LABEL_39:
  if (*((_BYTE *)result + 516))
  {
    v36 = *result;
    v37 = *((_QWORD *)result + 65) + 1;
    *((_QWORD *)result + 65) = v37;
    if (v37 > v36)
      *((_BYTE *)result + 516) = 0;
  }
  v38 = (*(_DWORD *)*a2 + *(_DWORD *)(*a2 + 36)) % *(_DWORD *)*a2;
  v39 = *(_QWORD *)(*a2 + 8);
  if (v38 >= (*(_QWORD *)(*a2 + 16) - v39) >> 5)
  {
LABEL_130:
    __break(1u);
    return result;
  }
  v40 = (int *)(v39 + 32 * v38);
  v41 = v40[1];
  if (v41 >= 1)
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = (uint64_t *)(v40 + 2);
    v47 = 0.0;
    v48 = 4;
    while (1)
    {
      v49 = a2[1];
      v50 = (*(_DWORD *)v49 + *(_DWORD *)(v49 + 36)) % *(_DWORD *)v49;
      v51 = *(_QWORD *)(v49 + 8);
      if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v49 + 16) - v51) >> 3) <= v50)
        goto LABEL_130;
      v52 = 0;
      v53 = (uint64_t *)(v51 + 24 * (int)v50);
      if (v53[1] == *v53)
        v54 = 0;
      else
        v54 = *v53;
      v55 = (float *)(v54 + 260 * v44);
      v56 = *v55;
      v57 = v54 + v48;
      v58 = v55;
      do
      {
        if (v56 < *(float *)(v57 + v52))
        {
          v56 = *(float *)(v57 + v52);
          v58 = (float *)(v57 + v52);
        }
        v52 += 4;
      }
      while (v52 != 256);
      v59 = (unint64_t)((char *)v58 - (char *)v55) >> 2;
      if ((int)v59 <= 14)
        v60 = 14;
      else
        v60 = (unint64_t)((char *)v58 - (char *)v55) >> 2;
      v61 = 0.0;
      if (v60 - 10 < (int)v59)
      {
        v62 = ((unint64_t)v58 + v45 - v54) >> 2;
        if ((int)v62 <= 14)
          v62 = 14;
        else
          v62 = v62;
        v63 = v62 - 14;
        do
        {
          if (*(float *)(v54 + v43 + 4 * v63) >= v61)
            v61 = *(float *)(v54 + v43 + 4 * v63);
          ++v63;
        }
        while (v63 < ((((char *)v58 - (char *)v55) << 30) - 0x400000000) >> 32);
      }
      if ((int)v59 >= 50)
        v64 = 50;
      else
        v64 = (unint64_t)((char *)v58 - (char *)v55) >> 2;
      if (v64 + 10 > (int)v59)
      {
        v65 = (((_QWORD)((_QWORD)v58 + v45 - v54) << 30) + 0x500000000) >> 32;
        v66 = v64 + 15;
        v67 = v54 + v43;
        do
        {
          if (*(float *)(v67 + 4 * v65) >= v61)
            v61 = *(float *)(v67 + 4 * v65);
          ++v65;
        }
        while (v65 < v66);
      }
      v68 = 0;
      v69 = 0;
      v70 = *v46;
      v71 = (float *)(*v46 + 4 * (int)((_DWORD)v44 << 6));
      v72 = v71[1];
      if (v72 >= *v71)
        v73 = (float *)(*v46 + 4 * (int)((_DWORD)v44 << 6));
      else
        v73 = v71 + 1;
      if (v72 >= *v71)
        v74 = v71 + 1;
      else
        v74 = (float *)(*v46 + 4 * (int)((_DWORD)v44 << 6));
      if (v72 >= *v71)
        v72 = *v71;
      v75 = v70 + 4 * v42;
      v76 = 2;
      do
      {
        while (1)
        {
          v77 = v76;
          v78 = *(float *)(v75 + v68 + 8);
          v79 = *(float *)(v75 + v68 + 12);
          if (v79 >= v78)
            break;
          v72 = *v73;
          if (v79 < *v73)
          {
            v72 = *(float *)(v75 + v68 + 12);
            v73 = (float *)(v75 + v68 + 12);
          }
          if (v78 >= *v74)
            v74 = (float *)(v75 + v68 + 8);
          v76 += 2;
          v68 += 8;
          v69 = v77;
          if (v68 == 248)
            goto LABEL_93;
        }
        if (v78 < v72)
        {
          v72 = *(float *)(v75 + v68 + 8);
          v73 = (float *)(v75 + v68 + 8);
        }
        if (v79 >= *v74)
          v74 = &v71[v69 + 3];
        v76 += 2;
        v68 += 8;
        v69 = v77;
      }
      while (v68 != 248);
LABEL_93:
      v80 = fabsf(*v73);
      v81 = fabsf(*v74);
      if (v80 < v81)
        v80 = v81;
      if (*v40 > 1)
      {
        v82 = 0;
        v83 = 0;
        v84 = (float *)(v70 + 4 * ((v41 + (int)v44) << 6));
        v85 = v84[1];
        if (v85 >= *v84)
          v86 = (float *)(v70 + 4 * ((v41 + (int)v44) << 6));
        else
          v86 = v84 + 1;
        if (v85 >= *v84)
          v87 = v84 + 1;
        else
          v87 = (float *)(v70 + 4 * ((v41 + (int)v44) << 6));
        if (v85 >= *v84)
          v85 = *v84;
        v88 = v70 + 4 * ((v41 + (int)v44) << 6);
        v89 = 2;
        do
        {
          while (1)
          {
            v90 = v89;
            v91 = *(float *)(v88 + v82 + 8);
            v92 = *(float *)(v88 + v82 + 12);
            if (v92 >= v91)
              break;
            v85 = *v86;
            if (v92 < *v86)
            {
              v85 = *(float *)(v88 + v82 + 12);
              v86 = (float *)(v88 + v82 + 12);
            }
            if (v91 >= *v87)
              v87 = (float *)(v88 + v82 + 8);
            v89 += 2;
            v82 += 8;
            v83 = v90;
            if (v82 == 248)
              goto LABEL_116;
          }
          if (v91 < v85)
          {
            v85 = *(float *)(v88 + v82 + 8);
            v86 = (float *)(v88 + v82 + 8);
          }
          if (v92 >= *v87)
            v87 = &v84[v83 + 3];
          v89 += 2;
          v82 += 8;
          v83 = v90;
        }
        while (v82 != 248);
LABEL_116:
        v93 = fabsf(*v86);
        v94 = fabsf(*v87);
        if (v93 < v94)
          v93 = v94;
        if (v80 < v93)
          v80 = v93;
      }
      if ((int)v59 >= 1)
      {
        v95 = v55[(int)v59];
        v96 = v61 * 100.0;
        if (v80 > 100.0 && v95 > v96 && v95 > v47)
        {
          result[128] = v59;
          *((_BYTE *)result + 516) = 1;
          *((_QWORD *)result + 65) = 0;
          v41 = v40[1];
          v47 = v95;
        }
      }
      ++v44;
      v45 -= 260;
      v48 += 260;
      v43 += 260;
      v42 += 64;
      if (v44 >= v41)
        return result;
    }
  }
  return result;
}

uint64_t webrtc::RepeatingTaskHandle::Start@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int **a6@<X8>)
{
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  _BYTE v23[16];
  __int128 v24;
  _BYTE v25[25];
  _BYTE v26[16];
  __int128 v27;
  uint64_t v28;
  unsigned int *v29;
  char v30;
  _QWORD v31[2];
  uint64_t (*v32)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v33)(uint64_t);

  v12 = operator new();
  v13 = (unsigned int *)v12;
  *(_DWORD *)v12 = 0;
  *(_BYTE *)(v12 + 4) = 1;
  do
    v14 = __ldxr((unsigned int *)v12);
  while (__stxr(v14 + 1, (unsigned int *)v12));
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a2 + 16))(0, a2, v23);
  v15 = *(_OWORD *)(a2 + 16);
  v24 = v15;
  *(_QWORD *)(a2 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a2 + 24) = 0;
  do
    v16 = __ldxr(v13);
  while (__stxr(v16 + 1, v13));
  *(_QWORD *)v25 = a1;
  *(_DWORD *)&v25[8] = a3;
  *(_QWORD *)&v25[16] = a4;
  ((void (*)(_QWORD, _BYTE *, _BYTE *))v15)(0, v23, v26);
  v27 = v24;
  v24 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v28 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v25[16] + 16))(*(_QWORD *)&v25[16]);
  v29 = v13;
  v17 = operator new();
  *(_OWORD *)v17 = *(_OWORD *)v25;
  *(_OWORD *)(v17 + 9) = *(_OWORD *)&v25[9];
  ((void (*)(_QWORD, _BYTE *, uint64_t))v27)(0, v26, v17 + 32);
  *(_OWORD *)(v17 + 48) = v27;
  v27 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v18 = v29;
  v29 = 0;
  *(_QWORD *)(v17 + 64) = v28;
  *(_QWORD *)(v17 + 72) = v18;
  v31[0] = v17;
  (*(void (**)(uint64_t, _QWORD *, char *, uint64_t))(*(_QWORD *)a1 + 8))(a1, v31, &v30, a5);
  v32(1, v31, v31);
  v19 = v29;
  if (v29)
  {
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      MEMORY[0x20BD0ADEC]();
  }
  ((void (*)(uint64_t, _BYTE *, _BYTE *))v27)(1, v26, v26);
  result = ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v24)(1, v23, v23);
  *a6 = v13;
  return result;
}

uint64_t webrtc::RepeatingTaskHandle::DelayedStart@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int **a7@<X8>)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  __int128 v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t result;
  _BYTE v30[16];
  __int128 v31;
  _BYTE v32[25];
  _BYTE v33[16];
  __int128 v34;
  uint64_t v35;
  unsigned int *v36;
  _QWORD v37[2];
  uint64_t (*v38)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v39)(uint64_t);

  v14 = operator new();
  v15 = (unsigned int *)v14;
  *(_DWORD *)v14 = 0;
  *(_BYTE *)(v14 + 4) = 1;
  do
    v16 = __ldxr((unsigned int *)v14);
  while (__stxr(v16 + 1, (unsigned int *)v14));
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v30);
  v17 = *(_OWORD *)(a3 + 16);
  v31 = v17;
  *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a3 + 24) = 0;
  do
    v18 = __ldxr(v15);
  while (__stxr(v18 + 1, v15));
  *(_QWORD *)v32 = a1;
  *(_DWORD *)&v32[8] = a4;
  *(_QWORD *)&v32[16] = a5;
  ((void (*)(_QWORD, _BYTE *, _BYTE *))v17)(0, v30, v33);
  v34 = v31;
  v31 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)&v32[16] + 16))(*(_QWORD *)&v32[16]);
  v20 = 0x7FFFFFFFFFFFFFFFLL;
  v21 = 0x8000000000000000;
  if (a2 != 0x8000000000000000 && v19 != 0x8000000000000000)
    v21 = v19 + a2;
  if (v19 != 0x7FFFFFFFFFFFFFFFLL && a2 != 0x7FFFFFFFFFFFFFFFLL)
    v20 = v21;
  v35 = v20;
  v36 = v15;
  v24 = operator new();
  *(_OWORD *)v24 = *(_OWORD *)v32;
  *(_OWORD *)(v24 + 9) = *(_OWORD *)&v32[9];
  ((void (*)(_QWORD, _BYTE *, uint64_t))v34)(0, v33, v24 + 32);
  *(_OWORD *)(v24 + 48) = v34;
  v34 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v25 = v36;
  v36 = 0;
  v37[0] = v24;
  *(_QWORD *)(v24 + 64) = v35;
  *(_QWORD *)(v24 + 72) = v25;
  webrtc::TaskQueueBase::PostDelayedTaskWithPrecision(a1, a4, (uint64_t)v37, a2, a6);
  v38(1, v37, v37);
  v26 = v36;
  if (v36)
  {
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
      MEMORY[0x20BD0ADEC]();
  }
  ((void (*)(uint64_t, _BYTE *, _BYTE *))v34)(1, v33, v33);
  result = ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v31)(1, v30, v30);
  *a7 = v15;
  return result;
}

uint64_t webrtc::TaskQueueBase::PostDelayedTaskWithPrecision(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void (*v9)(_QWORD, _BYTE *, _BYTE *);
  void (*v10)(_QWORD, _BYTE *, _BYTE *);
  _BYTE v11[16];
  __int128 v12;
  _BYTE v13[16];
  __int128 v14;
  _BYTE v15[16];
  __int128 v16;
  char v17;

  v8 = result;
  if (a2 == 1)
  {
    (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v11);
    v12 = *(_OWORD *)(a3 + 16);
    v10 = (void (*)(_QWORD, _BYTE *, _BYTE *))v12;
    *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a3 + 24) = 0;
    v17 = 1;
    v10(0, v11, v15);
    v16 = v12;
    v12 = (unint64_t)absl::internal_any_invocable::EmptyManager;
    (*(void (**)(uint64_t, _BYTE *, uint64_t, char *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v15, a4, &v17, a5);
    ((void (*)(uint64_t, _BYTE *, _BYTE *))v16)(1, v15, v15);
    return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v12)(1, v11, v11);
  }
  else if (!a2)
  {
    (*(void (**)(_QWORD, uint64_t, _BYTE *))(a3 + 16))(0, a3, v13);
    v14 = *(_OWORD *)(a3 + 16);
    v9 = (void (*)(_QWORD, _BYTE *, _BYTE *))v14;
    *(_QWORD *)(a3 + 16) = absl::internal_any_invocable::EmptyManager;
    *(_QWORD *)(a3 + 24) = 0;
    v9(0, v13, v15);
    v16 = v14;
    v14 = (unint64_t)absl::internal_any_invocable::EmptyManager;
    v17 = 0;
    (*(void (**)(uint64_t, _BYTE *, uint64_t, char *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v15, a4, &v17, a5);
    ((void (*)(uint64_t, _BYTE *, _BYTE *))v16)(1, v15, v15);
    return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v14)(1, v13, v13);
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::`anonymous namespace'::RepeatingTask &&>(uint64_t result)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  BOOL v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t (*v20)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v21)();

  v1 = *(__int128 **)result;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)result + 72) + 4))
  {
    result = (*((uint64_t (**)(__int128 *))v1 + 7))(v1 + 2);
    if (result != 0x7FFFFFFFFFFFFFFFLL)
    {
      if (*(_BYTE *)(*((_QWORD *)v1 + 9) + 4))
      {
        v2 = result;
        v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 2) + 16))(*((_QWORD *)v1 + 2));
        v4 = *((_QWORD *)v1 + 8);
        v5 = v3 == 0x7FFFFFFFFFFFFFFFLL || v4 == 0x8000000000000000;
        v6 = 0x7FFFFFFFFFFFFFFFLL;
        if (!v5)
        {
          v6 = v3 - v4;
          if (v4 == 0x7FFFFFFFFFFFFFFFLL || v3 == 0x8000000000000000)
            v6 = 0x8000000000000000;
        }
        v8 = v4 == 0x8000000000000000 || v2 == 0x8000000000000000;
        v9 = v4 + v2;
        if (v8)
          v9 = 0x8000000000000000;
        if (v4 != 0x7FFFFFFFFFFFFFFFLL)
          v4 = v9;
        *((_QWORD *)v1 + 8) = v4;
        v10 = v2 - v6;
        if ((uint64_t)(v2 - v6) < 0 || v6 == 0x7FFFFFFFFFFFFFFFLL || v2 == 0x8000000000000000)
          v10 = 0;
        if (v6 == 0x8000000000000000)
          v13 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v13 = v10;
        v14 = *(_QWORD *)v1;
        v15 = *((_DWORD *)v1 + 2);
        v16 = operator new();
        v17 = *v1;
        *(_OWORD *)(v16 + 9) = *(__int128 *)((char *)v1 + 9);
        *(_OWORD *)v16 = v17;
        (*((void (**)(_QWORD, __int128 *, uint64_t))v1 + 6))(0, v1 + 2, v16 + 32);
        *(_OWORD *)(v16 + 48) = v1[3];
        *((_QWORD *)v1 + 6) = absl::internal_any_invocable::EmptyManager;
        *((_QWORD *)v1 + 7) = 0;
        *(_QWORD *)(v16 + 64) = *((_QWORD *)v1 + 8);
        v18 = *((_QWORD *)v1 + 9);
        *((_QWORD *)v1 + 9) = 0;
        *(_QWORD *)(v16 + 72) = v18;
        v19[0] = v16;
        webrtc::TaskQueueBase::PostDelayedTaskWithPrecision(v14, v15, (uint64_t)v19, v13, (uint64_t)v1 + 24);
        return v20(1, v19, v19);
      }
    }
  }
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::`anonymous namespace'::RepeatingTask>(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = *(unsigned int **)(v3 + 72);
      if (v4)
      {
        do
        {
          v5 = __ldaxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          MEMORY[0x20BD0ADEC]();
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(1, v3 + 32, v3 + 32);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

BOOL webrtc::rtcp::ReportBlock::Parse(webrtc::rtcp::ReportBlock *this, const unsigned __int8 *a2, unint64_t a3)
{
  int v4;
  int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 > 0x17)
  {
    *(_DWORD *)this = bswap32(*(_DWORD *)a2);
    *((_BYTE *)this + 4) = a2[4];
    v4 = a2[5];
    v5 = (char)v4;
    v6 = a2[7] | (v4 << 16) | (a2[6] << 8);
    if (v5 < 0)
      v6 |= 0xFF000000;
    *((_DWORD *)this + 2) = v6;
    *((_DWORD *)this + 3) = bswap32(*((_DWORD *)a2 + 2));
    *((_DWORD *)this + 4) = bswap32(*((_DWORD *)a2 + 3));
    *((_DWORD *)this + 5) = bswap32(*((_DWORD *)a2 + 4));
    *((_DWORD *)this + 6) = bswap32(*((_DWORD *)a2 + 5));
    return a3 > 0x17;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) != 0)
    return a3 > 0x17;
  rtc::webrtc_logging_impl::Log("\r\t", v8, v9, v10, v11, v12, v13, v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/rtp_rtcp/source/rtcp_packet/report_block.cc");
  return a3 > 0x17;
}

uint64_t webrtc::rtcp::ReportBlock::Create(uint64_t this, unsigned __int8 *a2)
{
  int v2;

  *(_DWORD *)a2 = bswap32(*(_DWORD *)this);
  a2[4] = *(_BYTE *)(this + 4);
  v2 = *(_DWORD *)(this + 8);
  a2[5] = BYTE2(v2);
  a2[6] = BYTE1(v2);
  a2[7] = v2;
  *((_DWORD *)a2 + 2) = bswap32(*(_DWORD *)(this + 12));
  *((_DWORD *)a2 + 3) = bswap32(*(_DWORD *)(this + 16));
  *((_DWORD *)a2 + 4) = bswap32(*(_DWORD *)(this + 20));
  *((_DWORD *)a2 + 5) = bswap32(*(_DWORD *)(this + 24));
  return this;
}

uint64_t *webrtc::ReportBlockStats::Store(uint64_t *this, unsigned int a2, int a3, int a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t *v14;
  int v15;
  int v16;
  int v17;
  uint64_t **v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;

  v7 = this;
  v9 = (uint64_t **)(this + 2);
  v8 = (uint64_t *)this[2];
  if (v8)
  {
    v10 = (uint64_t **)(this + 2);
    v11 = this[2];
    do
    {
      v12 = *(_DWORD *)(v11 + 28);
      v13 = v12 >= a2;
      if (v12 >= a2)
        v14 = (uint64_t *)v11;
      else
        v14 = (uint64_t *)(v11 + 8);
      if (v13)
        v10 = (uint64_t **)v11;
      v11 = *v14;
    }
    while (*v14);
    if (v10 != v9 && *((_DWORD *)v10 + 7) <= a2)
    {
      v15 = a4 - *((_DWORD *)v10 + 8);
      if ((v15 & 0x80000000) == 0)
      {
        v16 = a3 - *((_DWORD *)v10 + 9);
        if ((v16 & 0x80000000) == 0)
        {
          v17 = *((_DWORD *)this + 1) + v16;
          *(_DWORD *)this += v15;
          *((_DWORD *)this + 1) = v17;
        }
      }
    }
    while (1)
    {
      while (1)
      {
        v18 = (uint64_t **)v8;
        v19 = *((_DWORD *)v8 + 7);
        if (v19 <= a2)
          break;
        v8 = *v18;
        v9 = v18;
        if (!*v18)
          goto LABEL_21;
      }
      if (v19 >= a2)
        break;
      v8 = v18[1];
      if (!v8)
      {
        v9 = v18 + 1;
        goto LABEL_21;
      }
    }
  }
  else
  {
    v18 = (uint64_t **)(this + 2);
LABEL_21:
    v20 = (uint64_t *)v18;
    v18 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v18 + 7) = a2;
    v18[4] = 0;
    *v18 = 0;
    v18[1] = 0;
    v18[2] = v20;
    *v9 = (uint64_t *)v18;
    v21 = *(_QWORD *)v7[1];
    v22 = (uint64_t *)v18;
    if (v21)
    {
      v7[1] = v21;
      v22 = *v9;
    }
    this = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v7[2], v22);
    ++v7[3];
  }
  *((_DWORD *)v18 + 8) = a4;
  *((_DWORD *)v18 + 9) = a3;
  return this;
}

int *WebRtcSpl_Resample22khzTo16khz(uint64_t a1, __int16 *a2, int *a3, int *a4)
{
  uint64_t v8;
  int *v9;

  v8 = (uint64_t)(a4 + 16);
  v9 = a3 + 16;
  WebRtcSpl_UpBy2ShortToInt(a1, 44, (uint64_t)(a4 + 16), a3);
  a4[8] = a3[8];
  a4[9] = a3[9];
  a4[10] = a3[10];
  a4[11] = a3[11];
  a4[12] = a3[12];
  a4[13] = a3[13];
  a4[14] = a3[14];
  a4[15] = a3[15];
  a3[8] = a4[96];
  a3[9] = a4[97];
  a3[10] = a4[98];
  a3[11] = a4[99];
  a3[12] = a4[100];
  a3[13] = a4[101];
  a3[14] = a4[102];
  a3[15] = a4[103];
  WebRtcSpl_Resample44khzTo32khz((uint64_t)(a4 + 8), a4, 8);
  WebRtcSpl_DownBy2IntToShort(a4, 64, a2, v9);
  WebRtcSpl_UpBy2ShortToInt(a1 + 88, 44, v8, a3);
  a4[8] = a3[8];
  a4[9] = a3[9];
  a4[10] = a3[10];
  a4[11] = a3[11];
  a4[12] = a3[12];
  a4[13] = a3[13];
  a4[14] = a3[14];
  a4[15] = a3[15];
  a3[8] = a4[96];
  a3[9] = a4[97];
  a3[10] = a4[98];
  a3[11] = a4[99];
  a3[12] = a4[100];
  a3[13] = a4[101];
  a3[14] = a4[102];
  a3[15] = a4[103];
  WebRtcSpl_Resample44khzTo32khz((uint64_t)(a4 + 8), a4, 8);
  WebRtcSpl_DownBy2IntToShort(a4, 64, a2 + 32, v9);
  WebRtcSpl_UpBy2ShortToInt(a1 + 176, 44, v8, a3);
  a4[8] = a3[8];
  a4[9] = a3[9];
  a4[10] = a3[10];
  a4[11] = a3[11];
  a4[12] = a3[12];
  a4[13] = a3[13];
  a4[14] = a3[14];
  a4[15] = a3[15];
  a3[8] = a4[96];
  a3[9] = a4[97];
  a3[10] = a4[98];
  a3[11] = a4[99];
  a3[12] = a4[100];
  a3[13] = a4[101];
  a3[14] = a4[102];
  a3[15] = a4[103];
  WebRtcSpl_Resample44khzTo32khz((uint64_t)(a4 + 8), a4, 8);
  WebRtcSpl_DownBy2IntToShort(a4, 64, a2 + 64, v9);
  WebRtcSpl_UpBy2ShortToInt(a1 + 264, 44, v8, a3);
  a4[8] = a3[8];
  a4[9] = a3[9];
  a4[10] = a3[10];
  a4[11] = a3[11];
  a4[12] = a3[12];
  a4[13] = a3[13];
  a4[14] = a3[14];
  a4[15] = a3[15];
  a3[8] = a4[96];
  a3[9] = a4[97];
  a3[10] = a4[98];
  a3[11] = a4[99];
  a3[12] = a4[100];
  a3[13] = a4[101];
  a3[14] = a4[102];
  a3[15] = a4[103];
  WebRtcSpl_Resample44khzTo32khz((uint64_t)(a4 + 8), a4, 8);
  WebRtcSpl_DownBy2IntToShort(a4, 64, a2 + 96, v9);
  WebRtcSpl_UpBy2ShortToInt(a1 + 352, 44, v8, a3);
  a4[8] = a3[8];
  a4[9] = a3[9];
  a4[10] = a3[10];
  a4[11] = a3[11];
  a4[12] = a3[12];
  a4[13] = a3[13];
  a4[14] = a3[14];
  a4[15] = a3[15];
  a3[8] = a4[96];
  a3[9] = a4[97];
  a3[10] = a4[98];
  a3[11] = a4[99];
  a3[12] = a4[100];
  a3[13] = a4[101];
  a3[14] = a4[102];
  a3[15] = a4[103];
  WebRtcSpl_Resample44khzTo32khz((uint64_t)(a4 + 8), a4, 8);
  return WebRtcSpl_DownBy2IntToShort(a4, 64, a2 + 128, v9);
}

uint64_t WebRtcSpl_Resample16khzTo22khz(uint64_t result, uint64_t a2, int *a3, int *a4)
{
  int v5;
  uint64_t v6;
  int v7;
  _WORD *v8;
  int v9;
  int v10;
  int v11;
  int32x4_t v12;
  int8x16_t v13;
  int32x4_t v14;
  int8x16_t v15;
  int32x4_t v16;
  int v17;
  int32x4_t v18;
  int v19;
  int v20;
  int v21;
  __int32 v22;
  int8x16_t v23;
  int v24;
  int v25;
  __int32 v26;
  int32x4_t v27;
  int v28;
  int v29;
  int32x2_t v30;
  int v31;
  int v32;
  int v33;
  int32x4_t v34;
  int v35;
  int32x4_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int v41;
  int8x16_t v42;
  int32x2_t v43;
  int v44;
  int32x2_t v45;
  int32x2_t v46;
  int v47;
  int32x4_t v48;
  uint64_t v49;
  int v51;
  uint64_t v52;
  _WORD *v53;

  v5 = 0;
  v49 = (uint64_t)(a4 + 8);
  v53 = (_WORD *)(a2 + 20);
  do
  {
    v51 = v5;
    v52 = result;
    WebRtcSpl_UpBy2ShortToInt(result, 40, v49, a3);
    v6 = 0;
    *a4 = a3[8];
    a4[1] = a3[9];
    a4[2] = a3[10];
    a4[3] = a3[11];
    a4[4] = a3[12];
    a4[5] = a3[13];
    a4[6] = a3[14];
    a4[7] = a3[15];
    a3[8] = a4[80];
    a3[9] = a4[81];
    a3[10] = a4[82];
    a3[11] = a4[83];
    a3[12] = a4[84];
    a3[13] = a4[85];
    a3[14] = a4[86];
    a3[15] = a4[87];
    v7 = *a4;
    v8 = v53;
    do
    {
      v9 = a4[v6 + 19];
      v10 = a4[v6 + 20];
      v11 = a4[v6 + 18];
      v12 = *(int32x4_t *)&a4[v6 + 14];
      v13 = *(int8x16_t *)&a4[v6 + 3];
      v14 = (int32x4_t)vdupq_lane_s64(v13.i64[0], 0);
      v14.i32[1] = a4[v6 + 1];
      v14.i32[2] = a4[v6 + 2];
      v15 = *(int8x16_t *)&a4[v6 + 7];
      v16 = (int32x4_t)vextq_s8(v13, v15, 8uLL);
      v17 = vaddvq_s32(vmlaq_s32(vmulq_s32(v16, (int32x4_t)xmmword_208F188C0), v14, (int32x4_t)xmmword_208F188D0));
      v23 = (int8x16_t)vzip1q_s32((int32x4_t)v13, vzip2q_s32((int32x4_t)v13, (int32x4_t)v13));
      v23.i32[1] = v14.i32[2];
      v18 = (int32x4_t)vextq_s8(v13, v15, 0xCuLL);
      v19 = v17 - v7 + (v7 << 7);
      v20 = vaddvq_s32(vmlaq_s32(vmulq_s32(v18, (int32x4_t)xmmword_208F188E0), (int32x4_t)v23, (int32x4_t)xmmword_208F188F0))
          + 38 * v15.i32[3];
      v7 = *(_QWORD *)&a4[v6 + 16];
      v21 = (-a4[v6 + 22]
           - 712 * a4[v6 + 21]
           + (a4[v6 + 22] << 7)
           + 2359 * v10
           - 6333 * v9
           + 23456 * v11
           + 16775 * v12.i32[3]
           - 3695 * v12.i32[2]
           + 945 * v12.i32[1]
           - 154 * v12.i32[0]
           + 0x4000) >> 15;
      v22 = 230 * v9
          - 39 * v10
          - 830 * v11
          + 2785 * v12.i32[3]
          + 32366 * v12.i32[2]
          - 2324 * v12.i32[1]
          + 760 * v12.i32[0];
      v23.i64[0] = *(_QWORD *)&a4[v6 + 12];
      v24 = 117 * v9 - 663 * v11 + 2222 * v12.i32[3] - 6133 * v12.i32[2];
      if (v21 >= 0x7FFF)
        v21 = 0x7FFF;
      v25 = v24 + 26634 * HIDWORD(*(_QWORD *)&a4[v6 + 14]) + 13070 * v12.i32[0];
      v26 = v22 - 218 * v23.i32[1] + 38 * v23.i32[0];
      v27 = vmulq_s32((int32x4_t)v15, (int32x4_t)xmmword_208F18900);
      v28 = a4[v6 + 11];
      if (v21 <= -32768)
        LOWORD(v21) = 0x8000;
      v29 = -137 * v28 + 0x4000;
      *v8 = v21;
      v30 = vdup_n_s32(9423 * v28 + 0x4000);
      v31 = vaddvq_s32(vmlaq_s32(v27, (int32x4_t)v13, (int32x4_t)xmmword_208F18910)) + v29;
      v32 = v25 - 3174 * v23.i32[1] + 831 * v23.i32[0] + v29;
      v13.i32[2] = (v20 + 0x4000) >> 15;
      v33 = (v26 + 0x4000) >> 15;
      if (v33 >= 0x7FFF)
        v33 = 0x7FFF;
      if (v33 <= -32768)
        LOWORD(v33) = 0x8000;
      *(v8 - 1) = v33;
      v34 = v18;
      v36.i64[0] = __PAIR64__(v12.u32[1], v12.u32[2]);
      v34.i32[3] = v12.i32[0];
      v35 = 1405 * v28 + 0x4000;
      v36.i64[1] = __PAIR64__(v12.u32[0], v18.u32[2]);
      v37 = vextq_s8(v15, v23, 0xCuLL);
      v38 = (int8x16_t)vrev64q_s32(v12);
      v39 = (int32x4_t)vextq_s8((int8x16_t)vtrn1q_s32((int32x4_t)v15, (int32x4_t)v37), v37, 8uLL);
      v40 = vmlaq_s32(vmulq_s32(v39, (int32x4_t)xmmword_208F18920), v16, (int32x4_t)xmmword_208F18930);
      v41 = v32 >> 15;
      if (v32 >> 15 >= 0x7FFF)
        v41 = 0x7FFF;
      if (v41 <= -32768)
        LOWORD(v41) = 0x8000;
      *(v8 - 2) = v41;
      v42 = vextq_s8(v38, v38, 8uLL);
      v42.i32[0] = vaddvq_s32(vmlaq_s32(vmulq_s32(v39, (int32x4_t)xmmword_208F18940), (int32x4_t)v42, (int32x4_t)xmmword_208F18930));
      v43.i32[0] = vaddvq_s32(vmulq_s32(v34, (int32x4_t)xmmword_208F18950));
      v44 = vaddvq_s32(vmulq_s32(v36, (int32x4_t)xmmword_208F18960));
      v45 = vmul_laneq_s32((int32x2_t)0xFFFFF65000007238, (int32x4_t)v15, 3);
      v43.i32[1] = v44;
      v46 = vmla_laneq_s32(v43, (int32x2_t)0x297FFFFEAE2, (int32x4_t)v15, 2);
      v15.i32[0] = (vaddvq_s32(v40) + v35) >> 15;
      v47 = v42.i32[0] + v35;
      *(int32x2_t *)v42.i8 = vshr_n_s32(vadd_s32(v46, vadd_s32(vmla_lane_s32(v45, (int32x2_t)0xFFFFEAE200000297, *(int32x2_t *)v23.i8, 1), vmla_lane_s32(v30, (int32x2_t)0x7238FFFFF650, *(int32x2_t *)v23.i8, 0))), 0xFuLL);
      v48 = (int32x4_t)vextq_s8(vextq_s8(v15, v15, 4uLL), v42, 0xCuLL);
      v48.i32[3] = v47 >> 15;
      v13.i32[3] = v31 >> 15;
      v13.i32[1] = (v19 + 0x4000) >> 15;
      *(int16x8_t *)(v8 - 10) = vqmovn_high_s32(vqmovn_s32((int32x4_t)v13), v48);
      v6 += 16;
      v8 += 11;
    }
    while ((_DWORD)(v6 * 4) != 320);
    result = v52 + 80;
    v5 = v51 + 1;
    v53 += 55;
  }
  while (v51 != 3);
  return result;
}

int *WebRtcSpl_Resample22khzTo8khz(unint64_t a1, __int16 *a2, int *a3, int *a4)
{
  int *v8;
  int *v9;

  v8 = a4 + 16;
  v9 = a3 + 24;
  WebRtcSpl_LPBy2ShortToInt(a1, 110, a4 + 16, a3);
  a4[8] = a3[16];
  a4[9] = a3[17];
  a4[10] = a3[18];
  a4[11] = a3[19];
  a4[12] = a3[20];
  a4[13] = a3[21];
  a4[14] = a3[22];
  a4[15] = a3[23];
  a3[16] = a4[118];
  a3[17] = a4[119];
  a3[18] = a4[120];
  a3[19] = a4[121];
  a3[20] = a4[122];
  a3[21] = a4[123];
  a3[22] = a4[124];
  a3[23] = a4[125];
  WebRtcSpl_Resample44khzTo32khz((uint64_t)(a4 + 8), a4, 10);
  WebRtcSpl_DownBy2IntToShort(a4, 80, a2, v9);
  WebRtcSpl_LPBy2ShortToInt(a1 + 220, 110, v8, a3);
  a4[8] = a3[16];
  a4[9] = a3[17];
  a4[10] = a3[18];
  a4[11] = a3[19];
  a4[12] = a3[20];
  a4[13] = a3[21];
  a4[14] = a3[22];
  a4[15] = a3[23];
  a3[16] = a4[118];
  a3[17] = a4[119];
  a3[18] = a4[120];
  a3[19] = a4[121];
  a3[20] = a4[122];
  a3[21] = a4[123];
  a3[22] = a4[124];
  a3[23] = a4[125];
  WebRtcSpl_Resample44khzTo32khz((uint64_t)(a4 + 8), a4, 10);
  return WebRtcSpl_DownBy2IntToShort(a4, 80, a2 + 40, v9);
}

int *WebRtcSpl_Resample8khzTo22khz(uint64_t a1, uint64_t a2, int *a3, int *a4)
{
  uint64_t v8;
  int *v9;

  v8 = (uint64_t)(a4 + 18);
  v9 = a3 + 16;
  WebRtcSpl_UpBy2ShortToInt(a1, 40, (uint64_t)(a4 + 18), a3);
  a4[10] = a3[8];
  a4[11] = a3[9];
  a4[12] = a3[10];
  a4[13] = a3[11];
  a4[14] = a3[12];
  a4[15] = a3[13];
  a4[16] = a3[14];
  a4[17] = a3[15];
  a3[8] = a4[90];
  a3[9] = a4[91];
  a3[10] = a4[92];
  a3[11] = a4[93];
  a3[12] = a4[94];
  a3[13] = a4[95];
  a3[14] = a4[96];
  a3[15] = a4[97];
  WebRtcSpl_32khzTo22khzIntToInt((uint64_t)(a4 + 10), a4, 5);
  WebRtcSpl_UpBy2IntToShort(a4, 55, a2, v9);
  WebRtcSpl_UpBy2ShortToInt(a1 + 80, 40, v8, a3);
  a4[10] = a3[8];
  a4[11] = a3[9];
  a4[12] = a3[10];
  a4[13] = a3[11];
  a4[14] = a3[12];
  a4[15] = a3[13];
  a4[16] = a3[14];
  a4[17] = a3[15];
  a3[8] = a4[90];
  a3[9] = a4[91];
  a3[10] = a4[92];
  a3[11] = a4[93];
  a3[12] = a4[94];
  a3[13] = a4[95];
  a3[14] = a4[96];
  a3[15] = a4[97];
  WebRtcSpl_32khzTo22khzIntToInt((uint64_t)(a4 + 10), a4, 5);
  return WebRtcSpl_UpBy2IntToShort(a4, 55, a2 + 220, v9);
}

uint64_t WebRtcSpl_32khzTo22khzIntToInt(uint64_t result, int *a2, int a3)
{
  _DWORD *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;

  if (a3 >= 1)
  {
    v3 = (_DWORD *)(result + 44);
    result = 98;
    do
    {
      *a2 = (*(v3 - 8) << 15) | 0x4000;
      v4 = -712 * v3[10]
         - v3[11]
         + (v3[11] << 7)
         + 2359 * v3[9]
         - 6333 * v3[8]
         + 23456 * v3[7]
         + 16775 * v3[6]
         - 3695 * v3[5]
         + 945 * v3[4];
      a2[1] = -*(v3 - 11)
            - 712 * *(v3 - 10)
            + (*(v3 - 11) << 7)
            + 2359 * *(v3 - 9)
            - 6333 * *(v3 - 8)
            + 23456 * *(v3 - 7)
            + 16775 * *(v3 - 6)
            - 3695 * *(v3 - 5)
            + 945 * *(v3 - 4)
            - 154 * *(v3 - 3)
            + 0x4000;
      a2[10] = v4 - 154 * v3[3] + 0x4000;
      v5 = 230 * v3[8]
         - 39 * v3[9]
         - 830 * v3[7]
         + 2785 * v3[6]
         + 32366 * v3[5]
         - 2324 * v3[4]
         + 760 * v3[3]
         - 218 * v3[2];
      a2[2] = 230 * *(v3 - 8)
            - 39 * *(v3 - 9)
            - 830 * *(v3 - 7)
            + 2785 * *(v3 - 6)
            + 32366 * *(v3 - 5)
            - 2324 * *(v3 - 4)
            + 760 * *(v3 - 3)
            - 218 * *(v3 - 2)
            + 38 * *(v3 - 1)
            + 0x4000;
      a2[9] = v5 + 38 * v3[1] + 0x4000;
      v6 = -663 * v3[7] + 117 * v3[8] + 2222 * v3[6] - 6133 * v3[5] + 26634 * v3[4] + 13070 * v3[3] - 3174 * v3[2];
      v7 = v3[1];
      a2[3] = -663 * *(v3 - 7)
            + 117 * *(v3 - 8)
            + 2222 * *(v3 - 6)
            - 6133 * *(v3 - 5)
            + 26634 * *(v3 - 4)
            + 13070 * *(v3 - 3)
            - 3174 * *(v3 - 2)
            + 831 * *(v3 - 1)
            - 137 * *v3
            + 0x4000;
      a2[8] = v6 + 831 * v7 - 137 * *v3 + 0x4000;
      v8 = v3[1];
      v9 = 1405 * *v3 + 0x4000;
      v10 = *(v3 - 1);
      v11 = v9 - 77 * v3[6] + 457 * v3[5];
      v12 = v9 - 77 * *(v3 - 6) + 457 * *(v3 - 5) - 1677 * *(v3 - 4) + 5958 * *(v3 - 3) + 31175 * *(v3 - 2);
      v13 = v3[3];
      v14 = v3[4];
      v15 = v3[2];
      a2[4] = v12 + 71 * v15 - 4136 * v10 - 408 * v8;
      a2[7] = v11 - 1677 * v14 + 5958 * v13 + 31175 * v15 - 408 * v10 - 4136 * v8 + 71 * *(v3 - 2);
      v16 = v3[4];
      v17 = v3[1];
      v18 = 9423 * *v3 + 0x4000;
      v19 = *(v3 - 2);
      v20 = v18 + 98 * *(v3 - 5) - 560 * *(v3 - 4) + 1900 * *(v3 - 3);
      v22 = v3[2];
      v21 = v3[3];
      v23 = v18 + 98 * v3[5];
      v24 = *(v3 - 1);
      a2[5] = v20 - 110 * v21 - 5406 * v19 + 663 * v22 + 29240 * v24 - 2480 * v17;
      a2[6] = v23 - 560 * v16 + 1900 * v21 + 663 * v19 - 5406 * v22 - 2480 * v24 + 29240 * v17 - 110 * *(v3 - 3);
      v3 += 16;
      a2 += 11;
      --a3;
    }
    while (a3);
  }
  return result;
}

int *WebRtcSpl_Resample48khzTo16khz(unint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  _DWORD *v11;

  WebRtcSpl_LPBy2ShortToInt(a1, 480, (int *)(a4 + 64), (int *)a3);
  v7 = 0;
  v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a4 + 48) = v8;
  v9 = 32;
  v10 = *(_OWORD *)(a4 + 1968);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a4 + 1952);
  *(_OWORD *)(a3 + 80) = v10;
  do
  {
    v11 = (_DWORD *)(a4 + v7);
    *v11 = -2050 * *(_DWORD *)(a4 + v9 + 4)
         + 778 * *(_DWORD *)(a4 + v9)
         + 1087 * *(_DWORD *)(a4 + v9 + 8)
         + 23285 * *(_DWORD *)(a4 + v9 + 12)
         + 12903 * *(_DWORD *)(a4 + v9 + 16)
         - 3783 * *(_DWORD *)(a4 + v9 + 20)
         + 441 * *(_DWORD *)(a4 + v9 + 24)
         + 222 * *(_DWORD *)(a4 + v9 + 28)
         + 0x4000;
    v11[1] = 441 * *(_DWORD *)(a4 + v9 + 8)
           + 222 * *(_DWORD *)(a4 + v9 + 4)
           - 3783 * *(_DWORD *)(a4 + v9 + 12)
           + 12903 * *(_DWORD *)(a4 + v9 + 16)
           + 23285 * *(_DWORD *)(a4 + v9 + 20)
           + 1087 * *(_DWORD *)(a4 + v9 + 24)
           - 2050 * *(_DWORD *)(a4 + v9 + 28)
           + 778 * *(_DWORD *)(a4 + v9 + 32)
           + 0x4000;
    v9 += 12;
    v7 += 8;
  }
  while (v9 != 1952);
  return WebRtcSpl_DownBy2IntToShort((int *)a4, 320, a2, (int *)(a3 + 96));
}

double WebRtcSpl_ResetResample48khzTo16khz(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  return result;
}

double WebRtcSpl_ResetResample16khzTo48khz(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  return result;
}

int *WebRtcSpl_Resample48khzTo8khz(unint64_t a1, __int16 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _DWORD *v12;

  v7 = a4 + 1024;
  WebRtcSpl_DownBy2ShortToInt(a1, 480, (int *)(a4 + 1024), (int *)a3);
  WebRtcSpl_LPBy2IntToInt(v7, 240, (int *)(a4 + 64), (_DWORD *)(a3 + 32));
  v8 = 0;
  v9 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(a4 + 48) = v9;
  v10 = 32;
  v11 = *(_OWORD *)(a4 + 1008);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a4 + 992);
  *(_OWORD *)(a3 + 112) = v11;
  do
  {
    v12 = (_DWORD *)(a4 + v8);
    *v12 = -2050 * *(_DWORD *)(a4 + v10 + 4)
         + 778 * *(_DWORD *)(a4 + v10)
         + 1087 * *(_DWORD *)(a4 + v10 + 8)
         + 23285 * *(_DWORD *)(a4 + v10 + 12)
         + 12903 * *(_DWORD *)(a4 + v10 + 16)
         - 3783 * *(_DWORD *)(a4 + v10 + 20)
         + 441 * *(_DWORD *)(a4 + v10 + 24)
         + 222 * *(_DWORD *)(a4 + v10 + 28)
         + 0x4000;
    v12[1] = 441 * *(_DWORD *)(a4 + v10 + 8)
           + 222 * *(_DWORD *)(a4 + v10 + 4)
           - 3783 * *(_DWORD *)(a4 + v10 + 12)
           + 12903 * *(_DWORD *)(a4 + v10 + 16)
           + 23285 * *(_DWORD *)(a4 + v10 + 20)
           + 1087 * *(_DWORD *)(a4 + v10 + 24)
           - 2050 * *(_DWORD *)(a4 + v10 + 28)
           + 778 * *(_DWORD *)(a4 + v10 + 32)
           + 0x4000;
    v10 += 12;
    v8 += 8;
  }
  while (v10 != 992);
  return WebRtcSpl_DownBy2IntToShort((int *)a4, 160, a2, (int *)(a3 + 128));
}

__int16 *WebRtcSpl_DownsampleBy2(__int16 *result, unint64_t a2, _WORD *a3, int *a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  int v20;

  v5 = *a4;
  v4 = a4[1];
  v6 = a4[2];
  v7 = a4[3];
  v9 = a4[4];
  v8 = a4[5];
  v11 = a4[6];
  v10 = a4[7];
  if (a2 >= 2)
  {
    v18 = a2 >> 1;
    do
    {
      v12 = *result << 10;
      v13 = v5
          + 12199 * ((int)(v12 - v4) >> 16)
          + ((12199 * (unsigned __int16)((*result << 10) - v4)) >> 16);
      v14 = v4 + 37471 * ((int)(v13 - v6) >> 16) + ((37471 * (unsigned __int16)(v13 - v6)) >> 16);
      v15 = result[1] << 10;
      v19 = 3284 * (unsigned __int16)((result[1] << 10) - v8);
      v16 = v9 + 3284 * ((v15 - v8) >> 16) + HIWORD(v19);
      v17 = v8
          + 24441 * ((int)(v16 - v11) >> 16)
          + ((24441 * (unsigned __int16)(v9 + 3284 * ((v15 - v8) >> 16) + HIWORD(v19) - v11)) >> 16);
      v7 = v6 + 60255 * ((int)(v14 - v7) >> 16) + ((60255 * (unsigned __int16)(v14 - v7)) >> 16);
      v10 = v11 + 49528 * ((int)(v17 - v10) >> 16) + ((49528 * (unsigned __int16)(v17 - v10)) >> 16);
      v20 = (int)(v7 + v10 + 1024) >> 11;
      if (v20 <= -32768)
        v20 = -32768;
      if (v20 >= 0x7FFF)
        LOWORD(v20) = 0x7FFF;
      *a3++ = v20;
      result += 2;
      v11 = v17;
      v8 = v9 + 3284 * ((v15 - v8) >> 16) + HIWORD(v19);
      v9 = v15;
      v6 = v4 + 37471 * ((int)(v13 - v6) >> 16) + ((37471 * (unsigned __int16)(v13 - v6)) >> 16);
      v4 = v13;
      v5 = v12;
      --v18;
    }
    while (v18);
  }
  else
  {
    v12 = *a4;
    v13 = a4[1];
    v14 = a4[2];
    v15 = a4[4];
    v16 = a4[5];
    v17 = a4[6];
  }
  *a4 = v12;
  a4[1] = v13;
  a4[2] = v14;
  a4[3] = v7;
  a4[4] = v15;
  a4[5] = v16;
  a4[6] = v17;
  a4[7] = v10;
  return result;
}

__int16 *WebRtcSpl_UpsampleBy2(__int16 *result, uint64_t a2, _WORD *a3, int *a4)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;

  v5 = *a4;
  v4 = a4[1];
  v7 = a4[2];
  v6 = a4[3];
  v9 = a4[4];
  v8 = a4[5];
  v11 = a4[6];
  v10 = a4[7];
  if (a2)
  {
    do
    {
      v12 = *result++;
      v13 = v12 << 10;
      v14 = v5
          + 3284 * ((int)((v12 << 10) - v4) >> 16)
          + ((3284 * (unsigned __int16)(((_WORD)v12 << 10) - v4)) >> 16);
      v15 = v4 + 24441 * ((int)(v14 - v7) >> 16) + ((24441 * (unsigned __int16)(v14 - v7)) >> 16);
      v6 = v7 + 49528 * ((int)(v15 - v6) >> 16) + ((49528 * (unsigned __int16)(v15 - v6)) >> 16);
      v16 = v9
          + 12199 * ((int)((v12 << 10) - v8) >> 16)
          + ((12199 * (unsigned __int16)(((_WORD)v12 << 10) - v8)) >> 16);
      if ((int)(v6 + 512) >> 10 <= -32768)
        v17 = -32768;
      else
        v17 = (int)(v6 + 512) >> 10;
      v18 = v8 + 37471 * ((int)(v16 - v11) >> 16) + ((37471 * (unsigned __int16)(v16 - v11)) >> 16);
      v19 = v18 - v10;
      v20 = v11 + 60255 * (v19 >> 16);
      if (v17 >= 0x7FFF)
        LOWORD(v17) = 0x7FFF;
      v10 = v20 + ((60255 * (unsigned __int16)v19) >> 16);
      *a3 = v17;
      if ((int)(v10 + 512) >> 10 <= -32768)
        v21 = -32768;
      else
        v21 = (int)(v10 + 512) >> 10;
      if (v21 >= 0x7FFF)
        LOWORD(v21) = 0x7FFF;
      a3[1] = v21;
      v11 = v18;
      a3 += 2;
      v8 = v16;
      v9 = v13;
      v7 = v4 + 24441 * ((int)(v14 - v7) >> 16) + ((24441 * (unsigned __int16)(v14 - v7)) >> 16);
      v4 = v14;
      v5 = v13;
      --a2;
    }
    while (a2);
  }
  else
  {
    v13 = *a4;
    v14 = a4[1];
    v15 = a4[2];
    v16 = a4[5];
    v18 = a4[6];
  }
  *a4 = v13;
  a4[1] = v14;
  a4[2] = v15;
  a4[3] = v6;
  a4[4] = v9;
  a4[5] = v16;
  a4[6] = v18;
  a4[7] = v10;
  return result;
}

int *WebRtcSpl_DownBy2IntToShort(int *result, int a2, __int16 *a3, int *a4)
{
  int v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int16 *v25;
  const float *v26;
  const float *v27;
  int32x4_t v28;
  int16x8_t v29;
  int *v30;
  __int16 *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  float32x4x4_t v37;
  float32x4x4_t v38;

  if (a2 >= 2)
  {
    v4 = a2 >> 1;
    if (a2 >> 1 <= 1)
      v5 = 1;
    else
      v5 = v4;
    v6 = result;
    v7 = v5;
    do
    {
      v8 = a4[1];
      v9 = *a4 + 3050 * ((*v6 - v8 + 0x2000) >> 14);
      v10 = a4[2];
      v11 = a4[3];
      v12 = v8 + 9368 * (((v9 - v10) >> 14) + ((v9 - v10) >> 31));
      *a4 = *v6;
      a4[1] = v9;
      v13 = v10 + 15063 * (((v12 - v11) >> 14) + ((v12 - v11) >> 31));
      a4[2] = v12;
      a4[3] = v13;
      *v6 = v13 >> 1;
      v6 += 2;
      --v7;
    }
    while (v7);
    v14 = result + 1;
    do
    {
      v15 = a4[5];
      v16 = a4[4] + 821 * ((*v14 - v15 + 0x2000) >> 14);
      v18 = a4[6];
      v17 = a4[7];
      v19 = v15 + 6110 * (((v16 - v18) >> 14) + ((v16 - v18) >> 31));
      a4[4] = *v14;
      a4[5] = v16;
      v20 = v18 + 12382 * (((v19 - v17) >> 14) + ((v19 - v17) >> 31));
      a4[6] = v19;
      a4[7] = v20;
      *v14 = v20 >> 1;
      v14 += 2;
      --v5;
    }
    while (v5);
    v21 = 2;
    if (v4 > 2)
      v21 = v4;
    if (v21 >= 0xF)
    {
      v23 = ((v21 - 1) >> 1) + 1;
      v22 = 2 * (v23 & 0x7FFFFFFFFFFFFFF8);
      v24 = v23 & 0x7FFFFFFFFFFFFFF8;
      v25 = a3;
      v26 = (const float *)result;
      do
      {
        v27 = v26;
        v26 += 32;
        v37 = vld4q_f32(v27);
        v27 += 16;
        v28 = vshrq_n_s32(vaddq_s32((int32x4_t)v37.val[1], (int32x4_t)v37.val[0]), 0xFuLL);
        v38 = vld4q_f32(v27);
        v37.val[0] = (float32x4_t)vshrq_n_s32(vaddq_s32((int32x4_t)v37.val[3], (int32x4_t)v37.val[2]), 0xFuLL);
        v37.val[3] = (float32x4_t)vqmovn_high_s32(vqmovn_s32(v28), vshrq_n_s32(vaddq_s32((int32x4_t)v38.val[1], (int32x4_t)v38.val[0]), 0xFuLL));
        v29 = vqmovn_high_s32(vqmovn_s32((int32x4_t)v37.val[0]), vshrq_n_s32(vaddq_s32((int32x4_t)v38.val[3], (int32x4_t)v38.val[2]), 0xFuLL));
        vst2q_s16(v25, *(int16x8x2_t *)v37.val[3].f32);
        v25 += 16;
        v24 -= 8;
      }
      while (v24);
      if (v23 == (v23 & 0x7FFFFFFFFFFFFFF8))
        return result;
    }
    else
    {
      v22 = 0;
    }
    v30 = &result[2 * v22 + 2];
    v31 = &a3[v22 + 1];
    do
    {
      v32 = (*(v30 - 1) + *(v30 - 2)) >> 15;
      v33 = *v30;
      v34 = v30[1];
      v30 += 4;
      v35 = (v34 + v33) >> 15;
      if (v32 >= 0x7FFF)
        v32 = 0x7FFF;
      if (v32 <= -32768)
        LOWORD(v32) = 0x8000;
      *(v31 - 1) = v32;
      if (v35 >= 0x7FFF)
        v36 = 0x7FFF;
      else
        v36 = v35;
      if (v36 <= -32768)
        LOWORD(v36) = 0x8000;
      *v31 = v36;
      v31 += 2;
      v22 += 2;
    }
    while (v22 < v4);
  }
  return result;
}

unint64_t WebRtcSpl_DownBy2ShortToInt(unint64_t result, int a2, int *a3, int *a4)
{
  uint64_t v4;
  __int16 *v5;
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int16 *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  if (a2 >= 2)
  {
    v4 = a2 >> 1;
    v5 = (__int16 *)result;
    v6 = a3;
    v7 = v4;
    do
    {
      v8 = *v5;
      v5 += 2;
      v9 = (v8 << 15) | 0x4000;
      v10 = a4[1];
      v11 = *a4 + 3050 * ((v9 - v10 + 0x2000) >> 14);
      v12 = a4[2];
      v13 = v10 + 9368 * (((v11 - v12) >> 14) + ((v11 - v12) >> 31));
      v14 = v12 + 15063 * (((v13 - a4[3]) >> 14) + ((v13 - a4[3]) >> 31));
      *a4 = v9;
      a4[1] = v11;
      a4[2] = v13;
      a4[3] = v14;
      *v6++ = v14 >> 1;
      --v7;
    }
    while (v7);
    v15 = (__int16 *)(result + 2);
    do
    {
      v16 = *v15;
      v15 += 2;
      v17 = (v16 << 15) | 0x4000;
      v18 = a4[5];
      v19 = a4[4] + 821 * ((v17 - v18 + 0x2000) >> 14);
      v20 = a4[6];
      result = a4[7];
      v21 = v18 + 6110 * (((v19 - v20) >> 14) + ((v19 - v20) >> 31));
      a4[4] = v17;
      a4[5] = v19;
      v22 = v20 + 12382 * (((v21 - (int)result) >> 14) + ((v21 - result) >> 31));
      a4[6] = v21;
      a4[7] = v22;
      *a3++ += v22 >> 1;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t WebRtcSpl_UpBy2ShortToInt(uint64_t result, int a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  if (a2 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2;
    v6 = a2;
    do
    {
      v7 = (*(__int16 *)(result + v4) << 15) | 0x4000;
      v8 = a4[5];
      v9 = a4[4] + 821 * ((v7 - v8 + 0x2000) >> 14);
      v10 = a4[6];
      v11 = a4[7];
      v12 = v8 + 6110 * (((v9 - v10) >> 14) + ((v9 - v10) >> 31));
      a4[4] = v7;
      a4[5] = v9;
      v13 = v10 + 12382 * (((v12 - v11) >> 14) + ((v12 - v11) >> 31));
      a4[6] = v12;
      a4[7] = v13;
      *(_DWORD *)(a3 + 4 * (int)v4) = v13 >> 15;
      v4 += 2;
    }
    while (v5 != v4);
    v14 = 0;
    v15 = a3 + 4;
    do
    {
      v16 = (*(__int16 *)(result + v14) << 15) | 0x4000;
      v17 = a4[1];
      v18 = *a4 + 3050 * ((v16 - v17 + 0x2000) >> 14);
      v19 = a4[2];
      v20 = a4[3];
      v21 = v17 + 9368 * (((v18 - v19) >> 14) + ((v18 - v19) >> 31));
      *a4 = v16;
      a4[1] = v18;
      v22 = v19 + 15063 * (((v21 - v20) >> 14) + ((v21 - v20) >> 31));
      a4[2] = v21;
      a4[3] = v22;
      *(_DWORD *)(v15 + 4 * (int)v14) = v22 >> 15;
      v14 += 2;
    }
    while (2 * v6 != v14);
  }
  return result;
}

int *WebRtcSpl_UpBy2IntToShort(int *result, int a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;

  if (a2 >= 1)
  {
    v4 = 0;
    v6 = a4[4];
    v5 = a4[5];
    v7 = 2 * a2;
    v8 = a4[6];
    v9 = a4[7];
    v10 = result;
    v11 = a2;
    do
    {
      v13 = *v10++;
      v12 = v13;
      v14 = v6 + 821 * ((v13 - v5 + 0x2000) >> 14);
      v15 = v5 + 6110 * (((v14 - v8) >> 14) + ((v14 - v8) >> 31));
      a4[4] = v13;
      a4[5] = v14;
      v9 = v8 + 12382 * (((v15 - v9) >> 14) + ((v15 - v9) >> 31));
      v16 = v9 >> 15;
      if (v9 >> 15 >= 0x7FFF)
        v16 = 0x7FFF;
      if (v16 <= -32768)
        LOWORD(v16) = 0x8000;
      *(_WORD *)(a3 + 2 * (int)v4) = v16;
      a4[6] = v15;
      a4[7] = v9;
      v4 += 2;
      v8 = v15;
      v6 = v12;
      v5 = v14;
    }
    while (v7 != v4);
    v17 = 0;
    v18 = a3 + 2;
    v19 = *a4;
    v20 = a4[1];
    v21 = 2 * v11;
    v22 = a4[2];
    v23 = a4[3];
    do
    {
      v25 = *result++;
      v24 = v25;
      v26 = v19 + 3050 * ((v25 - v20 + 0x2000) >> 14);
      v27 = v20 + 9368 * (((v26 - v22) >> 14) + ((v26 - v22) >> 31));
      *a4 = v25;
      a4[1] = v26;
      v23 = v22 + 15063 * (((v27 - v23) >> 14) + ((v27 - v23) >> 31));
      v28 = v23 >> 15;
      if (v23 >> 15 >= 0x7FFF)
        v28 = 0x7FFF;
      if (v28 <= -32768)
        LOWORD(v28) = 0x8000;
      *(_WORD *)(v18 + 2 * (int)v17) = v28;
      a4[2] = v27;
      a4[3] = v23;
      v17 += 2;
      v22 = v27;
      v19 = v24;
      v20 = v26;
    }
    while (v21 != v17);
  }
  return result;
}

unint64_t WebRtcSpl_LPBy2ShortToInt(unint64_t result, int a2, int *a3, int *a4)
{
  __int16 *v4;
  uint64_t v5;
  int v6;
  int *v7;
  __int16 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  __int16 *v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int *v28;
  int *v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;

  if (a2 >= 2)
  {
    v4 = (__int16 *)(result + 2);
    v5 = a2 >> 1;
    v6 = a4[12];
    v7 = a3;
    v8 = (__int16 *)(result + 2);
    v9 = v5;
    do
    {
      v10 = a4[1];
      v11 = *a4 + 3050 * ((v6 - v10 + 0x2000) >> 14);
      v12 = a4[2];
      v13 = a4[3];
      v14 = v10 + 9368 * (((v11 - v12) >> 14) + ((v11 - v12) >> 31));
      *a4 = v6;
      a4[1] = v11;
      v15 = v12 + 15063 * (((v14 - v13) >> 14) + ((v14 - v13) >> 31));
      a4[2] = v14;
      a4[3] = v15;
      *v7 = v15 >> 1;
      v7 += 2;
      v16 = *v8;
      v8 += 2;
      v6 = (v16 << 15) | 0x4000;
      --v9;
    }
    while (v9);
    v17 = (__int16 *)result;
    v18 = a3;
    v19 = v5;
    do
    {
      v20 = *v17;
      v17 += 2;
      v21 = (v20 << 15) | 0x4000;
      v22 = a4[5];
      v23 = a4[4] + 821 * ((v21 - v22 + 0x2000) >> 14);
      v24 = a4[6];
      v25 = a4[7];
      v26 = v22 + 6110 * (((v23 - v24) >> 14) + ((v23 - v24) >> 31));
      a4[4] = v21;
      a4[5] = v23;
      v27 = v24 + 12382 * (((v26 - v25) >> 14) + ((v26 - v25) >> 31));
      a4[6] = v26;
      a4[7] = v27;
      *v18 = (*v18 + (v27 >> 1)) >> 15;
      v18 += 2;
      --v19;
    }
    while (v19);
    v28 = a3 + 1;
    v29 = a3 + 1;
    v30 = v5;
    do
    {
      v31 = *(__int16 *)result;
      result += 4;
      v32 = (v31 << 15) | 0x4000;
      v33 = a4[9];
      v34 = a4[8] + 3050 * ((v32 - v33 + 0x2000) >> 14);
      v35 = a4[10];
      v36 = v33 + 9368 * (((v34 - v35) >> 14) + ((v34 - v35) >> 31));
      v37 = v35 + 15063 * (((v36 - a4[11]) >> 14) + ((v36 - a4[11]) >> 31));
      a4[8] = v32;
      a4[9] = v34;
      a4[10] = v36;
      a4[11] = v37;
      *v29 = v37 >> 1;
      v29 += 2;
      --v30;
    }
    while (v30);
    do
    {
      v38 = *v4;
      v4 += 2;
      v39 = (v38 << 15) | 0x4000;
      v40 = a4[13];
      v41 = a4[12] + 821 * ((v39 - v40 + 0x2000) >> 14);
      result = a4[14];
      v42 = a4[15];
      v43 = v40 + 6110 * (((v41 - (int)result) >> 14) + ((v41 - result) >> 31));
      a4[12] = v39;
      a4[13] = v41;
      v44 = result + 12382 * (((v43 - v42) >> 14) + ((v43 - v42) >> 31));
      a4[14] = v43;
      a4[15] = v44;
      *v28 = (*v28 + (v44 >> 1)) >> 15;
      v28 += 2;
      --v5;
    }
    while (v5);
  }
  return result;
}

unint64_t WebRtcSpl_LPBy2IntToInt(unint64_t result, int a2, int *a3, _DWORD *a4)
{
  int *v4;
  int *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int *v27;
  int *v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;

  if (a2 >= 2)
  {
    v4 = (int *)(result + 4);
    v5 = a4 + 12;
    v6 = a2 >> 1;
    v7 = a3;
    v8 = (int *)(result + 4);
    v9 = v6;
    do
    {
      v10 = *v5;
      v11 = a4[1];
      v12 = *a4 + 3050 * ((v10 - v11 + 0x2000) >> 14);
      v13 = a4[2];
      v14 = a4[3];
      v15 = v11 + 9368 * (((v12 - v13) >> 14) + ((v12 - v13) >> 31));
      *a4 = v10;
      a4[1] = v12;
      v16 = v13 + 15063 * (((v15 - v14) >> 14) + ((v15 - v14) >> 31));
      a4[2] = v15;
      a4[3] = v16;
      *v7 = v16 >> 1;
      v7 += 2;
      v5 = v8;
      v8 += 2;
      --v9;
    }
    while (v9);
    v17 = (int *)result;
    v18 = a3;
    v19 = v6;
    do
    {
      v20 = *v17;
      v17 += 2;
      v21 = a4[5];
      v22 = a4[4] + 821 * ((v20 - v21 + 0x2000) >> 14);
      v23 = a4[6];
      v24 = a4[7];
      v25 = v21 + 6110 * (((v22 - v23) >> 14) + ((v22 - v23) >> 31));
      a4[4] = v20;
      a4[5] = v22;
      v26 = v23 + 12382 * (((v25 - v24) >> 14) + ((v25 - v24) >> 31));
      a4[6] = v25;
      a4[7] = v26;
      *v18 = (*v18 + (v26 >> 1)) >> 15;
      v18 += 2;
      --v19;
    }
    while (v19);
    v27 = a3 + 1;
    v28 = a3 + 1;
    v29 = v6;
    do
    {
      v30 = *(_DWORD *)result;
      result += 8;
      v31 = a4[9];
      v32 = a4[8] + 3050 * ((v30 - v31 + 0x2000) >> 14);
      v33 = a4[10];
      v34 = a4[11];
      v35 = v31 + 9368 * (((v32 - v33) >> 14) + ((v32 - v33) >> 31));
      a4[8] = v30;
      a4[9] = v32;
      v36 = v33 + 15063 * (((v35 - v34) >> 14) + ((v35 - v34) >> 31));
      a4[10] = v35;
      a4[11] = v36;
      *v28 = v36 >> 1;
      v28 += 2;
      --v29;
    }
    while (v29);
    do
    {
      v37 = *v4;
      v4 += 2;
      v38 = a4[13];
      v39 = a4[12] + 821 * ((v37 - v38 + 0x2000) >> 14);
      v40 = a4[14];
      result = a4[15];
      v41 = v38 + 6110 * (((v39 - v40) >> 14) + ((v39 - v40) >> 31));
      a4[12] = v37;
      a4[13] = v39;
      v42 = v40 + 12382 * (((v41 - (int)result) >> 14) + ((v41 - result) >> 31));
      a4[14] = v41;
      a4[15] = v42;
      *v27 = (*v27 + (v42 >> 1)) >> 15;
      v27 += 2;
      --v6;
    }
    while (v6);
  }
  return result;
}

unint64_t WebRtcSpl_Resample32khzTo24khz(unint64_t result, float *a2, unint64_t a3)
{
  unint64_t v3;
  _DWORD *v4;
  float *v5;
  unint64_t v6;
  _DWORD *v7;
  int v8;
  const float *v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  unint64_t v15;
  const float *v16;
  const float *v17;
  const float *v18;
  const float *v19;
  const float *v20;
  const float *v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4x4_t v32;
  float32x4x4_t v33;
  float32x4x4_t v34;
  float32x4x4_t v35;
  float32x4x4_t v36;
  float32x4x4_t v37;

  if (a3)
  {
    if (a3 < 4 || result + 16 * a3 + 24 > (unint64_t)a2 && (unint64_t)&a2[3 * a3] > result)
    {
      v3 = 0;
      v4 = (_DWORD *)result;
      v5 = a2;
LABEL_6:
      v6 = a3 - v3;
      result = 90;
      v7 = v4;
      do
      {
        v8 = v7[4];
        v7 += 4;
        *(_DWORD *)v5 = -2362 * v4[1]
                      + 767 * *v4
                      + 2434 * v4[2]
                      + 24406 * v4[3]
                      + 10620 * v8
                      - 3838 * v4[5]
                      + 721 * v4[6]
                      + 90 * v4[7]
                      + 0x4000;
        *((_DWORD *)v5 + 1) = -2646 * (v4[6] + v4[3])
                            + 19062 * (v4[5] + *v7)
                            - 381 * (v4[7] + v4[2])
                            + 386 * (v4[8] + v4[1])
                            + 0x4000;
        *((_DWORD *)v5 + 2) = 721 * v4[3]
                            + 90 * v4[2]
                            - 3838 * *v7
                            + 10620 * v4[5]
                            + 24406 * v4[6]
                            + 2434 * v4[7]
                            - 2362 * v4[8]
                            + 767 * v4[9]
                            + 0x4000;
        v5 += 3;
        v4 = v7;
        --v6;
      }
      while (v6);
      return result;
    }
    v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v4 = (_DWORD *)(result + 16 * (a3 & 0xFFFFFFFFFFFFFFFCLL));
    v5 = &a2[3 * (a3 & 0xFFFFFFFFFFFFFFFCLL)];
    v9 = (const float *)(result + 16);
    v10 = vdupq_n_s32(0x982u);
    v11 = vdupq_n_s32(0x5F56u);
    v12 = vdupq_n_s32(0x297Cu);
    v13 = vdupq_n_s32(0xFFFFF102);
    v14 = vdupq_n_s32(0x2D1u);
    v30 = vdupq_n_s32(0x4A76u);
    v31 = vdupq_n_s32(0xFFFFF6C6);
    v28 = vdupq_n_s32(0xFFFFFE83);
    v29 = vdupq_n_s32(0xFFFFF5AA);
    v27 = vdupq_n_s32(0x182u);
    v15 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    v16 = (const float *)(result + 16);
    do
    {
      v17 = v9 - 4;
      v35 = vld4q_f32(v17);
      v18 = v9 - 2;
      v36 = vld4q_f32(v16);
      v16 += 16;
      v32 = vld4q_f32(v18);
      v19 = v9 - 3;
      v20 = v9 + 1;
      v21 = v9 + 2;
      v33 = vld4q_f32(v19);
      v37 = vld4q_f32(v20);
      v34 = vld4q_f32(v21);
      v22 = vaddq_s32((int32x4_t)v37.val[0], (int32x4_t)v33.val[3]);
      v23 = vaddq_s32((int32x4_t)v37.val[1], (int32x4_t)v33.val[2]);
      v37.val[1].i64[0] = 0x200000002;
      v37.val[1].i64[1] = 0x200000002;
      v37.val[0] = (float32x4_t)vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v35.val[1], v31), (int32x4_t)v35.val[0], (int32x4_t)v37.val[1]), (int32x4_t)v35.val[2], v10), (int32x4_t)v35.val[3], v11), (int32x4_t)v36.val[0], v12), (int32x4_t)v36.val[1], v13), (int32x4_t)v36.val[2], v14);
      v35.val[2].i64[0] = 0x5A0000005ALL;
      v35.val[2].i64[1] = 0x5A0000005ALL;
      v24 = vmlaq_s32(vmlaq_s32(vmulq_s32(v23, v29), v22, v30), vaddq_s32((int32x4_t)v37.val[2], (int32x4_t)v33.val[1]), v28);
      v25.i64[0] = 0x400000004000;
      v25.i64[1] = 0x400000004000;
      v26 = vaddq_s32(vmlaq_s32((int32x4_t)v37.val[0], (int32x4_t)v36.val[3], (int32x4_t)v35.val[2]), v25);
      v35.val[0] = (float32x4_t)vaddq_s32(vmlaq_s32(v24, vaddq_s32((int32x4_t)v37.val[3], (int32x4_t)v33.val[0]), v27), v25);
      v35.val[1] = (float32x4_t)vaddq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmlaq_s32(vmulq_s32((int32x4_t)v32.val[1], v14), (int32x4_t)v32.val[0], (int32x4_t)v35.val[2]), (int32x4_t)v32.val[2], v13), (int32x4_t)v32.val[3], v12), (int32x4_t)v34.val[0], v11), (int32x4_t)v34.val[1], v10), (int32x4_t)v34.val[2],
                                      v31),
                                    (int32x4_t)v34.val[3],
                                    (int32x4_t)v37.val[1]),
                                  v25);
      vst3q_f32(a2, *(float32x4x3_t *)v35.val[0].f32);
      a2 += 12;
      v9 = v16;
      v15 -= 4;
    }
    while (v15);
    if (v3 != a3)
      goto LABEL_6;
  }
  return result;
}

uint64_t WebRtcSpl_Resample44khzTo32khz(uint64_t result, int *a2, uint64_t a3)
{
  int *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  if (a3)
  {
    v3 = (int *)(result + 36);
    result = 3933;
    do
    {
      *a2 = (*(v3 - 6) << 15) | 0x4000;
      a2[4] = 974 * *(v3 - 3)
            - 156 * *(v3 - 4)
            - 3863 * *(v3 - 2)
            + 18603 * *(v3 - 1)
            + 21691 * *v3
            - 6246 * v3[1]
            + 2353 * v3[2]
            - 712 * v3[3]
            + 126 * v3[4]
            + 0x4000;
      v4 = -669 * v3[7]
         + 117 * v3[8]
         + 2245 * v3[6]
         - 6183 * v3[5]
         + 26267 * v3[4]
         + 13529 * v3[3]
         - 3245 * v3[2]
         + 845 * v3[1];
      a2[1] = -669 * *(v3 - 8)
            + 117 * *(v3 - 9)
            + 2245 * *(v3 - 7)
            - 6183 * *(v3 - 6)
            + 26267 * *(v3 - 5)
            + 13529 * *(v3 - 4)
            - 3245 * *(v3 - 3)
            + 845 * *(v3 - 2)
            - 138 * *(v3 - 1)
            + 0x4000;
      a2[7] = v4 - 138 * *v3 + 0x4000;
      v6 = *v3;
      v5 = v3[1];
      v7 = 612 * v3[5] - 101 * v3[6] - 2283 * v3[4] + 8532 * v3[3] + 29790 * v3[2] - 5138 * v5;
      v8 = 612 * *(v3 - 6)
         - 101 * *(v3 - 7)
         - 2283 * *(v3 - 5)
         + 8532 * *(v3 - 4)
         + 29790 * *(v3 - 3)
         - 5138 * *(v3 - 2)
         + 91 * v5;
      v9 = *(v3 - 1);
      a2[2] = v8 + 1789 * v9 - 524 * *v3 + 0x4000;
      a2[6] = v7 - 524 * v9 + 1789 * v6 + 91 * *(v3 - 2) + 0x4000;
      v10 = v3[2];
      v11 = *(v3 - 2);
      v12 = *(v3 - 1);
      v13 = -292 * v3[4] + 50 * v3[5] + 1016 * v3[3] - 3064 * v10 + 315 * v11;
      v14 = -292 * *(v3 - 5) + 50 * *(v3 - 6) + 1016 * *(v3 - 4) - 3064 * *(v3 - 3) - 53 * v10 + 32010 * v11;
      v16 = *v3;
      v15 = v3[1];
      a2[3] = v14 + 315 * v15 + 3933 * v12 - 1147 * *v3 + 0x4000;
      a2[5] = v13 + 32010 * v15 - 1147 * v12 + 3933 * v16 - 53 * *(v3 - 3) + 0x4000;
      v3 += 11;
      a2 += 8;
      --a3;
    }
    while (a3);
  }
  return result;
}

double webrtc::Resampler::Reset(webrtc::Resampler *this, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  webrtc::Resampler *v26;
  webrtc::Resampler *v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  unsigned int v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  _OWORD *v41;
  _OWORD *v42;
  _OWORD *v43;
  _OWORD *v44;
  _OWORD *v45;
  _OWORD *v46;
  _OWORD *v47;
  _OWORD *v48;
  _OWORD *v49;
  _OWORD *v50;
  _OWORD *v51;
  _OWORD *v52;
  _OWORD *v53;
  _OWORD *v54;
  _OWORD *v55;
  _OWORD *v56;
  _OWORD *v57;

  if ((unint64_t)(a4 - 3) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
      rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)5,unsigned long> const&)::t, v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/resampler/resampler.cc");
    return result;
  }
  v15 = a2 % a3;
  v16 = a3;
  if (a2 % a3)
  {
    v17 = a3;
    do
    {
      v16 = v15;
      v15 = v17 % v15;
      v17 = v16;
    }
    while (v15);
  }
  v18 = a2 / v16;
  v19 = a3 / v16;
  if (a2 / v16 == a3 / v16)
  {
    v20 = 0;
LABEL_9:
    *((_QWORD *)this + 11) = a4;
    *((_DWORD *)this + 20) = v20;
    v21 = *(void **)this;
    if (*(_QWORD *)this)
    {
      free(v21);
      *(_QWORD *)this = 0;
    }
    v22 = (void *)*((_QWORD *)this + 1);
    if (v22)
    {
      free(v22);
      *((_QWORD *)this + 1) = 0;
    }
    v23 = (void *)*((_QWORD *)this + 2);
    if (v23)
    {
      free(v23);
      *((_QWORD *)this + 2) = 0;
    }
    v24 = (void *)*((_QWORD *)this + 3);
    if (v24)
    {
      free(v24);
      *((_QWORD *)this + 3) = 0;
    }
    v25 = (void *)*((_QWORD *)this + 4);
    if (v25)
    {
      free(v25);
      *((_QWORD *)this + 4) = 0;
    }
    v26 = (webrtc::Resampler *)*((_QWORD *)this + 12);
    if (v26)
    {
      webrtc::Resampler::~Resampler(v26);
      MEMORY[0x20BD0ADEC]();
      *((_QWORD *)this + 12) = 0;
    }
    v27 = (webrtc::Resampler *)*((_QWORD *)this + 13);
    if (v27)
    {
      webrtc::Resampler::~Resampler(v27);
      MEMORY[0x20BD0ADEC]();
      *((_QWORD *)this + 13) = 0;
    }
    result = 0.0;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *((_DWORD *)this + 18) = a2 / 1000;
    *((_DWORD *)this + 19) = a3 / 1000;
    if (*((_QWORD *)this + 11) == 2)
    {
      v28 = operator new();
      *(_OWORD *)v28 = 0u;
      *(_OWORD *)(v28 + 16) = 0u;
      *(_OWORD *)(v28 + 32) = 0u;
      *(_OWORD *)(v28 + 48) = 0u;
      *(_OWORD *)(v28 + 64) = 0u;
      *(_DWORD *)(v28 + 80) = 0;
      *(_QWORD *)(v28 + 96) = 0;
      *(_QWORD *)(v28 + 104) = 0;
      *(_QWORD *)(v28 + 88) = 0;
      webrtc::Resampler::Reset((webrtc::Resampler *)v28, a2, a3, 1uLL);
      *((_QWORD *)this + 12) = v28;
      v29 = operator new();
      *(_OWORD *)v29 = 0u;
      *(_OWORD *)(v29 + 16) = 0u;
      *(_OWORD *)(v29 + 32) = 0u;
      *(_OWORD *)(v29 + 48) = 0u;
      *(_OWORD *)(v29 + 64) = 0u;
      *(_DWORD *)(v29 + 80) = 0;
      *(_QWORD *)(v29 + 96) = 0;
      *(_QWORD *)(v29 + 104) = 0;
      *(_QWORD *)(v29 + 88) = 0;
      webrtc::Resampler::Reset((webrtc::Resampler *)v29, a2, a3, 1uLL);
      *((_QWORD *)this + 13) = v29;
    }
    switch(*((_DWORD *)this + 20))
    {
      case 1:
      case 0xC:
        v30 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *(_QWORD *)this = v30;
        goto LABEL_62;
      case 2:
        v43 = malloc_type_malloc(0x60uLL, 0x1000040565EDBD2uLL);
        *(_QWORD *)this = v43;
        return WebRtcSpl_ResetResample16khzTo48khz(v43);
      case 3:
      case 0xE:
        v40 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *(_QWORD *)this = v40;
        *v40 = 0u;
        v40[1] = 0u;
        goto LABEL_61;
      case 4:
        v44 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *(_QWORD *)this = v44;
        *v44 = 0u;
        v44[1] = 0u;
        v43 = malloc_type_malloc(0x60uLL, 0x1000040565EDBD2uLL);
        *((_QWORD *)this + 1) = v43;
        return WebRtcSpl_ResetResample16khzTo48khz(v43);
      case 5:
        v45 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *(_QWORD *)this = v45;
        *v45 = 0u;
        v45[1] = 0u;
        v46 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *((_QWORD *)this + 1) = v46;
        *v46 = 0u;
        v46[1] = 0u;
        v43 = malloc_type_malloc(0x60uLL, 0x1000040565EDBD2uLL);
        *((_QWORD *)this + 2) = v43;
        return WebRtcSpl_ResetResample16khzTo48khz(v43);
      case 6:
        v47 = malloc_type_malloc(0x60uLL, 0x1000040565EDBD2uLL);
        *(_QWORD *)this = v47;
        WebRtcSpl_ResetResample16khzTo48khz(v47);
        goto LABEL_61;
      case 7:
      case 0xA:
        v41 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *(_QWORD *)this = v41;
        *v41 = 0u;
        v41[1] = 0u;
        v42 = malloc_type_malloc(0x60uLL, 0x1000040565EDBD2uLL);
        *((_QWORD *)this + 1) = v42;
        goto LABEL_43;
      case 8:
      case 0x14:
        v42 = malloc_type_malloc(0x60uLL, 0x1000040565EDBD2uLL);
        *(_QWORD *)this = v42;
LABEL_43:
        result = 0.0;
        *v42 = 0u;
        v42[1] = 0u;
        v42[2] = 0u;
        v42[3] = 0u;
        v42[4] = 0u;
        v42[5] = 0u;
        return result;
      case 9:
        v48 = malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
        *(_QWORD *)this = v48;
        result = 0.0;
        *v48 = 0u;
        v48[1] = 0u;
        v48[2] = 0u;
        v48[3] = 0u;
        return result;
      case 0xB:
        v49 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *(_QWORD *)this = v49;
        *v49 = 0u;
        v49[1] = 0u;
        v50 = malloc_type_malloc(0x60uLL, 0x1000040565EDBD2uLL);
        *((_QWORD *)this + 1) = v50;
        *v50 = 0u;
        v50[1] = 0u;
        v50[2] = 0u;
        v50[3] = 0u;
        v50[4] = 0u;
        v50[5] = 0u;
        goto LABEL_57;
      case 0xD:
        v51 = malloc_type_malloc(0x80uLL, 0x1000040AE2C30F4uLL);
        *(_QWORD *)this = v51;
        return WebRtcSpl_ResetResample48khzTo16khz(v51);
      case 0xF:
        v52 = malloc_type_malloc(0x80uLL, 0x1000040AE2C30F4uLL);
        *(_QWORD *)this = v52;
        WebRtcSpl_ResetResample48khzTo16khz(v52);
        goto LABEL_61;
      case 0x10:
        v53 = malloc_type_malloc(0x80uLL, 0x1000040AE2C30F4uLL);
        *(_QWORD *)this = v53;
        WebRtcSpl_ResetResample48khzTo16khz(v53);
        v54 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *((_QWORD *)this + 1) = v54;
        *v54 = 0u;
        v54[1] = 0u;
LABEL_57:
        v30 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *((_QWORD *)this + 2) = v30;
        goto LABEL_62;
      case 0x11:
        v55 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *(_QWORD *)this = v55;
        *v55 = 0u;
        v55[1] = 0u;
        v51 = malloc_type_malloc(0x80uLL, 0x1000040AE2C30F4uLL);
        *((_QWORD *)this + 1) = v51;
        return WebRtcSpl_ResetResample48khzTo16khz(v51);
      case 0x12:
        v56 = malloc_type_malloc(0x80uLL, 0x1000040AE2C30F4uLL);
        *(_QWORD *)this = v56;
        *v56 = 0u;
        v56[1] = 0u;
        v56[2] = 0u;
        v56[3] = 0u;
        v56[4] = 0u;
        v56[5] = 0u;
        v56[6] = 0u;
        v56[7] = 0u;
LABEL_61:
        v30 = malloc_type_malloc(0x20uLL, 0x100004052888210uLL);
        *((_QWORD *)this + 1) = v30;
LABEL_62:
        result = 0.0;
        *v30 = 0u;
        v30[1] = 0u;
        break;
      case 0x13:
        v57 = malloc_type_malloc(0x80uLL, 0x1000040AE2C30F4uLL);
        *(_QWORD *)this = v57;
        result = 0.0;
        *v57 = 0u;
        v57[1] = 0u;
        v57[2] = 0u;
        v57[3] = 0u;
        v57[4] = 0u;
        v57[5] = 0u;
        v57[6] = 0u;
        v57[7] = 0u;
        break;
      default:
        return result;
    }
    return result;
  }
  if (v18 == 1)
  {
    v31 = v19 - 2;
    if (v31 < 0xB && ((0x417u >> v31) & 1) != 0)
    {
      v32 = &unk_208F189E4;
LABEL_65:
      v20 = v32[v31];
      goto LABEL_9;
    }
  }
  else if (v19 == 1)
  {
    v31 = v18 - 2;
    if ((v18 - 2) < 0xB && ((0x417u >> v31) & 1) != 0)
    {
      v32 = &unk_208F18A10;
      goto LABEL_65;
    }
  }
  else
  {
    if (v18 == 2 && v19 == 3)
    {
      v20 = 6;
      goto LABEL_9;
    }
    if (v18 == 2 && v19 == 11)
    {
      v20 = 7;
      goto LABEL_9;
    }
    if (v18 == 4 && v19 == 11)
    {
      v20 = 8;
      goto LABEL_9;
    }
    if (v18 == 8 && v19 == 11)
    {
      v20 = 9;
      goto LABEL_9;
    }
    if (v18 == 3 && v19 == 2)
    {
      v20 = 17;
      goto LABEL_9;
    }
    if (v18 == 11 && v19 == 2)
    {
      v20 = 18;
      goto LABEL_9;
    }
    if (v18 == 11 && v19 == 4)
    {
      v20 = 19;
      goto LABEL_9;
    }
    if (v18 == 11 && v19 == 16)
    {
      v20 = 10;
      goto LABEL_9;
    }
    if (v18 == 11 && v19 == 32)
    {
      v20 = 11;
      goto LABEL_9;
    }
    if (v18 == 11 && v19 == 8)
    {
      v20 = 20;
      goto LABEL_9;
    }
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) == 0)
    rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)1,int> const&)::t, v33, v34, v35, v36, v37, v38, v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/common_audio/resampler/resampler.cc");
  return result;
}

void webrtc::Resampler::~Resampler(webrtc::Resampler *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  webrtc::Resampler *v7;
  webrtc::Resampler *v8;

  v2 = *(void **)this;
  if (v2)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 1);
  if (v3)
    free(v3);
  v4 = (void *)*((_QWORD *)this + 2);
  if (v4)
    free(v4);
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
    free(v5);
  v6 = (void *)*((_QWORD *)this + 4);
  if (v6)
    free(v6);
  v7 = (webrtc::Resampler *)*((_QWORD *)this + 12);
  if (v7)
  {
    webrtc::Resampler::~Resampler(v7);
    MEMORY[0x20BD0ADEC]();
  }
  v8 = (webrtc::Resampler *)*((_QWORD *)this + 13);
  if (v8)
  {
    webrtc::Resampler::~Resampler(v8);
    MEMORY[0x20BD0ADEC]();
  }
}

double webrtc::Resampler::ResetIfNeeded(webrtc::Resampler *this, int a2, int a3, uint64_t a4)
{
  double result;

  if (a2 / 1000 != *((_DWORD *)this + 18) || a3 / 1000 != *((_DWORD *)this + 19) || *((_QWORD *)this + 11) != a4)
    return webrtc::Resampler::Reset(this, a2, a3, a4);
  return result;
}

uint64_t webrtc::Resampler::Push(webrtc::Resampler *this, __int16 *a2, unint64_t a3, __int16 *a4, unint64_t a5, unint64_t *a6)
{
  unint64_t *v6;
  __int16 *v8;
  __int16 *v10;
  __int16 *v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  __int16 *v16;
  int16x8_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  BOOL v27;
  BOOL v29;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  const __int16 *v34;
  const __int16 *v35;
  unint64_t v36;
  int16x8_t *v37;
  int16x8_t *v38;
  __int16 *v39;
  char *v40;
  _WORD *v41;
  __int16 v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int16 *v49;
  BOOL v50;
  BOOL v51;
  __int16 *v53;
  int16x8_t *v54;
  int16x8_t *v55;
  unint64_t v56;
  __int16 *v57;
  unint64_t v58;
  uint64_t v59;
  __int16 *v60;
  __int16 *v61;
  __int16 *v62;
  __int16 v63;
  __int16 v64;
  unint64_t *v65;
  uint64_t v66;
  _OWORD *v67;
  _WORD *v68;
  unint64_t v69;
  _OWORD *v70;
  webrtc::Resampler *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  __int16 *v75;
  __int16 *v76;
  float *v78;
  _WORD *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  unint64_t v86;
  unint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int16 *v92;
  _OWORD *v94;
  unint64_t v95;
  _OWORD *v96;
  _OWORD *v97;
  uint64_t v98;
  webrtc::Resampler *v99;
  __int128 v100;
  __int128 v101;
  int *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  int *v114;
  unint64_t v115;
  __int16 *v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void *v124;
  __int16 *v125;
  unint64_t v126;
  void *v129;
  __int16 *v130;
  __int16 *v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  _WORD *v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t *v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  unint64_t *v142;
  __int16 *v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v149;
  unint64_t v150;
  __int16 *v151;
  uint64_t v157;
  _WORD *v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int16x8x2_t v163;
  int16x8x2_t v164;
  int16x8x2_t v165;
  int16x8x2_t v166;

  v6 = a6;
  v8 = a4;
  v10 = a2;
  if (*((_QWORD *)this + 11) == 2)
  {
    v12 = (__int16 *)malloc_type_malloc(a3 & 0x7FFFFFFFFFFFFFFFLL, 0x11C0236uLL);
    v13 = (char *)malloc_type_malloc(a3 & 0x7FFFFFFFFFFFFFFFLL, 0x1BCA7F74uLL);
    v14 = a5 >> 1;
    v15 = a5 & 0xFFFFFFFFFFFFFFFELL;
    v16 = (__int16 *)malloc_type_malloc(a5 & 0xFFFFFFFFFFFFFFFELL, 0x1000040BDFB0063uLL);
    v17 = (int16x8_t *)malloc_type_malloc(v15, 0x1000040BDFB0063uLL);
    if (!a3)
      goto LABEL_31;
    v18 = a3 - 1;
    if (a3 - 1 >= 0x1E)
    {
      v19 = 0;
      v21 = v18 >> 1;
      v22 = (v18 & 0xFFFFFFFFFFFFFFFELL) + 2;
      v23 = (char *)v12 + v22;
      v24 = &v13[v22];
      v25 = (unint64_t)&v10[2 * v21 + 2];
      v27 = (unint64_t)v12 < v25 && v23 > (char *)v10;
      v29 = (unint64_t)v13 < v25 && v24 > (char *)v10;
      if ((v13 >= v23 || v12 >= (__int16 *)v24) && !v27 && !v29)
      {
        v31 = 0;
        v32 = v21 + 1;
        v33 = v32 & 0xFFFFFFFFFFFFFFF0;
        v19 = 2 * (v32 & 0xFFFFFFFFFFFFFFF0);
        v34 = v10 + 16;
        do
        {
          v35 = v34 - 16;
          v163 = vld2q_s16(v35);
          v165 = vld2q_s16(v34);
          v36 = (2 * v31) & 0xFFFFFFFFFFFFFFE0;
          v37 = (int16x8_t *)((char *)v12 + v36);
          *v37 = v163.val[0];
          v37[1] = v165.val[0];
          v38 = (int16x8_t *)&v13[v36];
          *v38 = v163.val[1];
          v38[1] = v165.val[1];
          v31 += 16;
          v34 += 32;
        }
        while (v33 != v31);
        if (v32 == v33)
        {
LABEL_31:
          v43 = a3 >> 1;
          v161 = 0;
          v162 = 0;
          v44 = webrtc::Resampler::Push(*((webrtc::Resampler **)this + 12), v12, v43, v16, v14, &v162);
          if (webrtc::Resampler::Push(*((webrtc::Resampler **)this + 13), (const __int16 *)v13, v43, v17->i16, v14, &v161) | v44|| (v45 = v162, v162 != v161))
          {
            v20 = 0xFFFFFFFFLL;
LABEL_37:
            free(v12);
            free(v13);
            free(v16);
            free(v17);
            return v20;
          }
          v46 = 2 * v162;
          if (v162)
          {
            if (v162 >= 0x18)
            {
              v47 = 0;
              v48 = 2 * (v162 - 1);
              if (&v8[v48] >= v8 && &v8[v48 + 1] >= v8 + 1 && !((v162 - 1) >> 62))
              {
                v47 = 0;
                v49 = &v8[2 * v162];
                v50 = &v17->i8[v46] <= (__int8 *)v8 || v17 >= (int16x8_t *)v49;
                v51 = !v50;
                if ((v16 >= v49 || &v16[v46 / 2] <= v8) && !v51)
                {
                  v47 = v162 & 0xFFFFFFFFFFFFFFF0;
                  v53 = v8 + 16;
                  v54 = (int16x8_t *)(v16 + 8);
                  v55 = v17 + 1;
                  v56 = v162 & 0xFFFFFFFFFFFFFFF0;
                  do
                  {
                    v164.val[0] = v54[-1];
                    v166.val[0] = *v54;
                    v164.val[1] = v55[-1];
                    v166.val[1] = *v55;
                    v57 = v53 - 16;
                    vst2q_s16(v57, v164);
                    vst2q_s16(v53, v166);
                    v53 += 32;
                    v54 += 2;
                    v55 += 2;
                    v56 -= 16;
                  }
                  while (v56);
                  if (v45 == v47)
                    goto LABEL_57;
                }
              }
            }
            else
            {
              v47 = 0;
            }
            v58 = v45 - v47;
            v59 = v47;
            v60 = &v17->i16[v47];
            v61 = &v8[2 * v47 + 1];
            v62 = &v16[v59];
            do
            {
              v63 = *v62++;
              *(v61 - 1) = v63;
              v64 = *v60++;
              *v61 = v64;
              v61 += 2;
              --v58;
            }
            while (v58);
          }
LABEL_57:
          v20 = 0;
          *v6 = v46;
          goto LABEL_37;
        }
      }
    }
    else
    {
      v19 = 0;
    }
    v39 = &v10[v19 + 1];
    v40 = &v13[v19 & 0xFFFFFFFFFFFFFFFELL];
    v41 = (__int16 *)((char *)v12 + (v19 & 0xFFFFFFFFFFFFFFFELL));
    do
    {
      *v41++ = *(v39 - 1);
      v42 = *v39;
      v39 += 2;
      *(_WORD *)v40 = v42;
      v40 += 2;
      v19 += 2;
    }
    while (v19 < a3);
    goto LABEL_31;
  }
  switch(*((_DWORD *)this + 20))
  {
    case 0:
      memcpy(a4, a2, 2 * a3);
      v20 = 0;
      *v6 = a3;
      return v20;
    case 1:
      v65 = a6;
      v66 = 2 * a3;
      if (2 * a3 > a5)
        goto LABEL_170;
      WebRtcSpl_UpsampleBy2(a2, a3, a4, *(int **)this);
      goto LABEL_127;
    case 2:
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * a3, 5) > 0x199999999999999uLL || 3 * a3 > a5)
        goto LABEL_170;
      v157 = 3 * a3;
      v67 = malloc_type_malloc(0x540uLL, 0x100004052888210uLL);
      v68 = v67;
      if (a3)
      {
        v69 = 0;
        v70 = v67 + 82;
        do
        {
          v71 = *(webrtc::Resampler **)this;
          WebRtcSpl_UpBy2ShortToInt((uint64_t)v10, 160, (uint64_t)(v68 + 32), *(int **)this);
          v72 = *((_OWORD *)v71 + 3);
          *((_OWORD *)v68 + 2) = *((_OWORD *)v71 + 2);
          *((_OWORD *)v68 + 3) = v72;
          v73 = *((_OWORD *)v68 + 83);
          *((_OWORD *)v71 + 2) = *v70;
          *((_OWORD *)v71 + 3) = v73;
          WebRtcSpl_Resample32khzTo24khz((unint64_t)(v68 + 16), (float *)v68, 0x50uLL);
          WebRtcSpl_UpBy2IntToShort((int *)v68, 240, (uint64_t)v8, (int *)v71 + 16);
          v69 += 160;
          v8 += 480;
          v10 += 160;
        }
        while (v69 < a3);
      }
      *a6 = v157;
      goto LABEL_179;
    case 3:
      v74 = 4 * a3;
      if (4 * a3 > a5)
        goto LABEL_170;
      v75 = (__int16 *)malloc_type_malloc(4 * a3, 0x86805EC9uLL);
      WebRtcSpl_UpsampleBy2(v10, a3, v75, *(int **)this);
      WebRtcSpl_UpsampleBy2(v75, 2 * a3, v8, *((int **)this + 1));
      *v6 = v74;
      v76 = v75;
      goto LABEL_180;
    case 4:
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * a3, 4) > 0x333333333333333uLL || 6 * a3 > a5)
        goto LABEL_170;
      v78 = (float *)malloc_type_malloc(0x540uLL, 0x100004052888210uLL);
      v79 = malloc_type_malloc(4 * a3, 0xA26BEB57uLL);
      WebRtcSpl_UpsampleBy2(v10, a3, v79, *(int **)this);
      v80 = 2 * a3;
      *v6 = 2 * a3;
      if (!(2 * a3))
        goto LABEL_85;
      v81 = 0;
      v82 = v6;
      v158 = v79;
      do
      {
        v83 = *((_QWORD *)this + 1);
        WebRtcSpl_UpBy2ShortToInt((uint64_t)v79, 160, (uint64_t)(v78 + 16), (int *)v83);
        v84 = *(_OWORD *)(v83 + 48);
        *((_OWORD *)v78 + 2) = *(_OWORD *)(v83 + 32);
        *((_OWORD *)v78 + 3) = v84;
        v85 = *((_OWORD *)v78 + 83);
        *(_OWORD *)(v83 + 32) = *((_OWORD *)v78 + 82);
        *(_OWORD *)(v83 + 48) = v85;
        WebRtcSpl_Resample32khzTo24khz((unint64_t)(v78 + 8), v78, 0x50uLL);
        WebRtcSpl_UpBy2IntToShort((int *)v78, 240, (uint64_t)v8, (int *)(v83 + 64));
        v81 += 160;
        v86 = *v6;
        v8 += 480;
        v79 += 160;
      }
      while (v81 < *v6);
      goto LABEL_84;
    case 5:
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * a3, 3) > 0x666666666666666uLL || 12 * a3 > a5)
        goto LABEL_170;
      v78 = (float *)malloc_type_malloc(0x540uLL, 0x100004052888210uLL);
      v79 = malloc_type_malloc(8 * a3, 0x6B2EBBD7uLL);
      WebRtcSpl_UpsampleBy2(v10, a3, v8, *(int **)this);
      *v6 = 2 * a3;
      WebRtcSpl_UpsampleBy2(v8, 2 * a3, v79, *((int **)this + 1));
      v80 = 2 * *v6;
      *v6 = v80;
      if (!v80)
        goto LABEL_85;
      v88 = 0;
      v82 = v6;
      v158 = v79;
      do
      {
        v89 = *((_QWORD *)this + 2);
        WebRtcSpl_UpBy2ShortToInt((uint64_t)v79, 160, (uint64_t)(v78 + 16), (int *)v89);
        v90 = *(_OWORD *)(v89 + 48);
        *((_OWORD *)v78 + 2) = *(_OWORD *)(v89 + 32);
        *((_OWORD *)v78 + 3) = v90;
        v91 = *((_OWORD *)v78 + 83);
        *(_OWORD *)(v89 + 32) = *((_OWORD *)v78 + 82);
        *(_OWORD *)(v89 + 48) = v91;
        WebRtcSpl_Resample32khzTo24khz((unint64_t)(v78 + 8), v78, 0x50uLL);
        WebRtcSpl_UpBy2IntToShort((int *)v78, 240, (uint64_t)v8, (int *)(v89 + 64));
        v88 += 160;
        v86 = *v6;
        v8 += 480;
        v79 += 160;
      }
      while (v88 < *v6);
LABEL_84:
      v80 = 3 * v86;
      v6 = v82;
      v79 = v158;
LABEL_85:
      *v6 = v80;
      v92 = (__int16 *)v78;
LABEL_94:
      free(v92);
      v76 = v79;
      goto LABEL_180;
    case 6:
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * a3, 5) > 0x199999999999999uLL || (3 * a3) >> 1 > a5)
        goto LABEL_170;
      v149 = 3 * a3;
      v150 = (3 * a3) >> 1;
      v151 = (__int16 *)malloc_type_malloc(6 * a3, 0x10811B80uLL);
      v94 = malloc_type_malloc(0x540uLL, 0x100004052888210uLL);
      v79 = v94;
      if (a3)
      {
        v95 = 0;
        v159 = (uint64_t)(v94 + 4);
        v96 = v94 + 2;
        v97 = v94 + 82;
        v98 = (uint64_t)v151;
        do
        {
          v99 = *(webrtc::Resampler **)this;
          WebRtcSpl_UpBy2ShortToInt((uint64_t)v10, 160, v159, *(int **)this);
          v100 = *((_OWORD *)v99 + 3);
          *v96 = *((_OWORD *)v99 + 2);
          *((_OWORD *)v79 + 3) = v100;
          v101 = *((_OWORD *)v79 + 83);
          *((_OWORD *)v99 + 2) = *v97;
          *((_OWORD *)v99 + 3) = v101;
          WebRtcSpl_Resample32khzTo24khz((unint64_t)(v79 + 16), (float *)v79, 0x50uLL);
          WebRtcSpl_UpBy2IntToShort((int *)v79, 240, v98, (int *)v99 + 16);
          v95 += 160;
          v98 += 960;
          v10 += 160;
        }
        while (v95 < a3);
      }
      WebRtcSpl_DownsampleBy2(v151, v149, v8, *((int **)this + 1));
      *a6 = v150;
      v92 = v151;
      goto LABEL_94;
    case 7:
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * a3, 4) > 0x333333333333333uLL || a5 < (11 * a3) >> 1)
        goto LABEL_170;
      v68 = malloc_type_malloc(4 * a3, 0x998D6B9CuLL);
      WebRtcSpl_UpsampleBy2(v10, a3, v68, *(int **)this);
      v103 = (int *)malloc_type_malloc(0x188uLL, 0x100004052888210uLL);
      if (2 * a3)
      {
        v104 = 0;
        v105 = 0;
        v106 = (uint64_t)v68;
        do
        {
          WebRtcSpl_Resample8khzTo22khz(v106, (uint64_t)v8 + (v104 >> 1), *((int **)this + 1), v103);
          v105 += 80;
          v104 += 880;
          v106 += 160;
        }
        while (v105 < 2 * a3);
      }
      *a6 = (22 * a3) >> 2;
      free(v103);
      goto LABEL_179;
    case 8:
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * a3, 4) > 0x333333333333333uLL)
        goto LABEL_170;
      v107 = a6;
      v108 = (11 * a3) >> 2;
      if (v108 > a5)
        goto LABEL_170;
      v68 = malloc_type_malloc(0x188uLL, 0x100004052888210uLL);
      if (a3)
      {
        v109 = 0;
        v110 = 0;
        do
        {
          WebRtcSpl_Resample8khzTo22khz((uint64_t)v10, (uint64_t)v8 + (v109 >> 1), *(int **)this, (int *)v68);
          v110 += 80;
          v109 += 880;
          v10 += 80;
        }
        while (v110 < a3);
      }
      goto LABEL_133;
    case 9:
      if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * a3, 5) > 0x199999999999999uLL)
        goto LABEL_170;
      v107 = a6;
      v108 = (11 * a3) >> 3;
      if (v108 > a5)
        goto LABEL_170;
      v68 = malloc_type_malloc(0x160uLL, 0x100004052888210uLL);
      if (a3)
      {
        v111 = 0;
        v112 = 0;
        do
        {
          WebRtcSpl_Resample16khzTo22khz((uint64_t)v10, (uint64_t)v8 + (v111 >> 2), *(int **)this, (int *)v68);
          v112 += 160;
          v111 += 1760;
          v10 += 160;
        }
        while (v112 < a3);
      }
      goto LABEL_133;
    case 0xA:
      if (__ROR8__(0x6FB586FB586FB587 * a3, 1) > 0x253C8253C8253C8uLL)
        goto LABEL_170;
      v113 = 16 * a3 / 0xB;
      if (v113 > a5)
        goto LABEL_170;
      v114 = (int *)malloc_type_malloc(0x1A0uLL, 0x100004052888210uLL);
      v115 = 2 * a3;
      v116 = (__int16 *)malloc_type_malloc(4 * a3, 0x1E623D7CuLL);
      WebRtcSpl_UpsampleBy2(v10, a3, v116, *(int **)this);
      if (2 * a3)
      {
        v117 = 0;
        v118 = (uint64_t)v116;
        do
        {
          WebRtcSpl_Resample22khzTo16khz(v118, &v8[160 * (v117 / 0xDC)], *((int **)this + 1), v114);
          v117 += 220;
          v118 += 440;
        }
        while (v117 < v115);
      }
      *a6 = v113;
      goto LABEL_161;
    case 0xB:
      if (__ROR8__(0x6FB586FB586FB587 * a3, 1) > 0x253C8253C8253C8uLL || 32 * a3 / 0xB > a5)
        goto LABEL_170;
      v160 = 32 * a3 / 0xB;
      v114 = (int *)malloc_type_malloc(0x1A0uLL, 0x100004052888210uLL);
      v116 = (__int16 *)malloc_type_malloc(4 * a3, 0xD3F2A43EuLL);
      WebRtcSpl_UpsampleBy2(v10, a3, v8, *(int **)this);
      if (2 * a3)
      {
        v119 = 0;
        v120 = (uint64_t)v8;
        do
        {
          WebRtcSpl_Resample22khzTo16khz(v120, &v116[160 * (v119 / 0xDC)], *((int **)this + 1), v114);
          v119 += 220;
          v120 += 440;
        }
        while (v119 < 2 * a3);
      }
      WebRtcSpl_UpsampleBy2(v116, 16 * a3 / 0xB, v8, *((int **)this + 2));
      *a6 = v160;
      goto LABEL_161;
    case 0xC:
      v65 = a6;
      v66 = a3 >> 1;
      if (a3 >> 1 > a5)
        goto LABEL_170;
      WebRtcSpl_DownsampleBy2(a2, a3, a4, *(int **)this);
LABEL_127:
      v20 = 0;
      *v65 = v66;
      return v20;
    case 0xD:
      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * a3, 5) > 0x88888888888888uLL)
        goto LABEL_170;
      v107 = a6;
      v108 = a3 / 3;
      if (a3 / 3 > a5)
        goto LABEL_170;
      v68 = malloc_type_malloc(0x7C0uLL, 0x100004052888210uLL);
      if (a3)
      {
        v121 = 0;
        do
        {
          WebRtcSpl_Resample48khzTo16khz((unint64_t)v10, (__int16 *)((char *)v8 + (((v121 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64) & 0xFFFFFFFFFFFFFFFELL)), *(_QWORD *)this, (uint64_t)v68);
          v121 += 480;
          v10 += 480;
        }
        while (v121 < a3);
      }
LABEL_133:
      *v107 = v108;
      goto LABEL_179;
    case 0xE:
      if (a3 >> 2 > a5)
        goto LABEL_170;
      v68 = malloc_type_malloc(a3 & 0x7FFFFFFFFFFFFFFFLL, 0x5619580DuLL);
      WebRtcSpl_DownsampleBy2(v10, a3, v68, *(int **)this);
      WebRtcSpl_DownsampleBy2(v68, a3 >> 1, v8, *((int **)this + 1));
      *v6 = a3 >> 2;
      goto LABEL_179;
    case 0xF:
      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * a3, 5) > 0x88888888888888uLL || a3 / 6 > a5)
        goto LABEL_170;
      v124 = malloc_type_malloc(0x7C0uLL, 0x100004052888210uLL);
      v125 = (__int16 *)malloc_type_malloc(2 * a3 / 3, 0xCA38ED29uLL);
      if (a3)
      {
        v126 = 0;
        do
        {
          WebRtcSpl_Resample48khzTo16khz((unint64_t)v10, (__int16 *)((char *)v125 + (((v126 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64) & 0xFFFFFFFFFFFFFFFELL)), *(_QWORD *)this, (uint64_t)v124);
          v126 += 480;
          v10 += 480;
        }
        while (v126 < a3);
      }
      *a6 = a3 / 3;
      free(v124);
      WebRtcSpl_DownsampleBy2(v125, *a6, v8, *((int **)this + 1));
      free(v125);
      v20 = 0;
      *a6 >>= 1;
      return v20;
    case 0x10:
      if (__ROR8__(0xEEEEEEEEEEEEEEEFLL * a3, 5) > 0x88888888888888uLL || a3 / 0xC > a5)
        goto LABEL_170;
      v129 = malloc_type_malloc(0x7C0uLL, 0x100004052888210uLL);
      v130 = (__int16 *)malloc_type_malloc(2 * a3 / 3, 0xFF07373AuLL);
      v131 = (__int16 *)malloc_type_malloc(2 * a3 / 6, 0x6A97ABE1uLL);
      if (a3)
      {
        v132 = 0;
        do
        {
          WebRtcSpl_Resample48khzTo16khz((unint64_t)v10, (__int16 *)((char *)v130 + (((v132 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64) & 0xFFFFFFFFFFFFFFFELL)), *(_QWORD *)this, (uint64_t)v129);
          v132 += 480;
          v10 += 480;
        }
        while (v132 < a3);
      }
      *a6 = a3 / 3;
      free(v129);
      WebRtcSpl_DownsampleBy2(v130, *a6, v131, *((int **)this + 1));
      *a6 >>= 1;
      free(v130);
      WebRtcSpl_DownsampleBy2(v131, *a6, v8, *((int **)this + 2));
      free(v131);
      v20 = 0;
      *a6 >>= 1;
      return v20;
    case 0x11:
      v133 = 2 * a3;
      v134 = 2 * a3 / 3;
      if (v134 > a5)
        goto LABEL_170;
      v135 = malloc_type_malloc(4 * a3, 0x1591853EuLL);
      WebRtcSpl_UpsampleBy2(v10, a3, v135, *(int **)this);
      if (__ROR8__(0xDDDDDDDDDDDDDDDELL * a3, 5) >= 0x88888888888889uLL)
      {
        free(v135);
        return 0xFFFFFFFFLL;
      }
      v142 = v6;
      v143 = (__int16 *)malloc_type_malloc(0x7C0uLL, 0x100004052888210uLL);
      if (v133)
      {
        v144 = 0;
        v145 = (unint64_t)v135;
        do
        {
          WebRtcSpl_Resample48khzTo16khz(v145, (__int16 *)((char *)v8 + (((v144 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64) & 0xFFFFFFFFFFFFFFFELL)), *((_QWORD *)this + 1), (uint64_t)v143);
          v144 += 480;
          v145 += 960;
        }
        while (v144 < v133);
      }
      *v142 = v134;
      free(v135);
      v76 = v143;
      goto LABEL_180;
    case 0x12:
      if (__ROR8__(0x6FB586FB586FB587 * a3, 2) > 0x129E4129E4129E4uLL || a5 < 2 * a3 / 0xB)
        goto LABEL_170;
      v114 = (int *)malloc_type_malloc(0x1F8uLL, 0x100004052888210uLL);
      v116 = (__int16 *)malloc_type_malloc(2 * (4 * a3 / 0xB), 0x1000040BDFB0063uLL);
      if (a3)
      {
        v136 = 0;
        v137 = 0;
        do
        {
          WebRtcSpl_Resample22khzTo8khz((unint64_t)v10, (__int16 *)((char *)v116 + (((v136 * (unsigned __int128)0x2E8BA2E8BA2E8BA3uLL) >> 64) & 0x3FFFFFFFFFFFFFFELL)), *(int **)this, v114);
          v137 += 220;
          v136 += 880;
          v10 += 220;
        }
        while (v137 < a3);
      }
      WebRtcSpl_DownsampleBy2(v116, 4 * a3 / 0xB, v8, *((int **)this + 1));
      *a6 = 4 * a3 / 0x16;
LABEL_161:
      free(v114);
      v76 = v116;
      goto LABEL_180;
    case 0x13:
      if (__ROR8__(0x6FB586FB586FB587 * a3, 2) > 0x129E4129E4129E4uLL)
        goto LABEL_170;
      v138 = a6;
      v139 = 4 * a3 / 0xB;
      if (v139 > a5)
        goto LABEL_170;
      v68 = malloc_type_malloc(0x1F8uLL, 0x100004052888210uLL);
      if (a3)
      {
        v140 = 0;
        v141 = 0;
        do
        {
          WebRtcSpl_Resample22khzTo8khz((unint64_t)v10, (__int16 *)((char *)v8 + (((v140 * (unsigned __int128)0x2E8BA2E8BA2E8BA3uLL) >> 64) & 0x3FFFFFFFFFFFFFFELL)), *(int **)this, (int *)v68);
          v141 += 220;
          v140 += 880;
          v10 += 220;
        }
        while (v141 < a3);
      }
      goto LABEL_178;
    case 0x14:
      if (__ROR8__(0x6FB586FB586FB587 * a3, 2) <= 0x129E4129E4129E4uLL
        && (v138 = a6, v139 = 8 * a3 / 0xB, v139 <= a5))
      {
        v68 = malloc_type_malloc(0x1A0uLL, 0x100004052888210uLL);
        if (a3)
        {
          v146 = 0;
          v147 = 0;
          do
          {
            WebRtcSpl_Resample22khzTo16khz((uint64_t)v10, (__int16 *)((char *)v8 + (((v146 * (unsigned __int128)0x2E8BA2E8BA2E8BA3uLL) >> 64) & 0x3FFFFFFFFFFFFFFELL)), *(int **)this, (int *)v68);
            v147 += 220;
            v146 += 1760;
            v10 += 220;
          }
          while (v147 < a3);
        }
LABEL_178:
        *v138 = v139;
LABEL_179:
        v76 = v68;
LABEL_180:
        free(v76);
        v20 = 0;
      }
      else
      {
LABEL_170:
        v20 = 0xFFFFFFFFLL;
      }
      break;
    default:
      return 0;
  }
  return v20;
}

webrtc::ResidualEchoEstimator *webrtc::ResidualEchoEstimator::ResidualEchoEstimator(webrtc::ResidualEchoEstimator *this, const webrtc::EchoCanceller3Config *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  void *v33;
  size_t *v34;
  size_t *v35;
  size_t *v36;
  _DWORD *v37;
  size_t *v38;
  BOOL v40;
  float v41;
  uint64_t v42;
  int v43;
  void *v44;
  size_t *v45;
  size_t *v46;
  size_t *v47;
  _DWORD *v48;
  size_t *v49;
  BOOL v51;
  float v52;
  BOOL v53;
  uint64_t v54;
  int v55;
  void *v56;
  size_t *v57;
  size_t *v58;
  size_t *v59;
  _DWORD *v60;
  size_t *v61;
  unsigned int v64;
  int32x4_t v65;
  size_t v67;
  uint64_t v68;
  unsigned __int8 v69;

  *(_OWORD *)this = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 5);
  v4 = *((_OWORD *)a2 + 6);
  v6 = *((_OWORD *)a2 + 4);
  *((_BYTE *)this + 112) = *((_BYTE *)a2 + 112);
  *((_OWORD *)this + 5) = v5;
  *((_OWORD *)this + 6) = v4;
  *((_OWORD *)this + 4) = v6;
  v7 = *((_OWORD *)a2 + 1);
  v8 = *((_OWORD *)a2 + 3);
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)this + 3) = v8;
  *((_OWORD *)this + 1) = v7;
  v9 = *(_OWORD *)((char *)a2 + 168);
  v10 = *(_OWORD *)((char *)a2 + 184);
  v11 = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)this + 152) = *(_OWORD *)((char *)a2 + 152);
  *(_OWORD *)((char *)this + 200) = v11;
  *(_OWORD *)((char *)this + 184) = v10;
  *(_OWORD *)((char *)this + 168) = v9;
  v12 = *(_OWORD *)((char *)a2 + 232);
  v13 = *(_OWORD *)((char *)a2 + 248);
  v14 = *(_OWORD *)((char *)a2 + 264);
  *(_OWORD *)((char *)this + 216) = *(_OWORD *)((char *)a2 + 216);
  *(_OWORD *)((char *)this + 264) = v14;
  *(_OWORD *)((char *)this + 248) = v13;
  *(_OWORD *)((char *)this + 232) = v12;
  v16 = *(_OWORD *)((char *)a2 + 296);
  v15 = *(_OWORD *)((char *)a2 + 312);
  v17 = *(_OWORD *)((char *)a2 + 280);
  *(_QWORD *)((char *)this + 326) = *(_QWORD *)((char *)a2 + 326);
  *(_OWORD *)((char *)this + 296) = v16;
  *(_OWORD *)((char *)this + 312) = v15;
  *(_OWORD *)((char *)this + 280) = v17;
  v18 = *(_OWORD *)((char *)a2 + 120);
  *(_OWORD *)((char *)this + 136) = *(_OWORD *)((char *)a2 + 136);
  *(_OWORD *)((char *)this + 120) = v18;
  v19 = *((_OWORD *)a2 + 21);
  v20 = *((_OWORD *)a2 + 22);
  *(_OWORD *)((char *)this + 361) = *(_OWORD *)((char *)a2 + 361);
  *((_OWORD *)this + 21) = v19;
  *((_OWORD *)this + 22) = v20;
  *((_DWORD *)this + 96) = *((_DWORD *)a2 + 96);
  *((_QWORD *)this + 49) = *((_QWORD *)a2 + 49);
  v21 = *((_QWORD *)a2 + 50);
  *((_DWORD *)this + 102) = *((_DWORD *)a2 + 102);
  *((_QWORD *)this + 50) = v21;
  v22 = *(_QWORD *)((char *)a2 + 412);
  *((_DWORD *)this + 105) = *((_DWORD *)a2 + 105);
  *(_QWORD *)((char *)this + 412) = v22;
  *((_QWORD *)this + 53) = *((_QWORD *)a2 + 53);
  v23 = *((_QWORD *)a2 + 54);
  *((_DWORD *)this + 110) = *((_DWORD *)a2 + 110);
  *((_QWORD *)this + 54) = v23;
  v24 = *(_QWORD *)((char *)a2 + 444);
  *((_DWORD *)this + 113) = *((_DWORD *)a2 + 113);
  *(_QWORD *)((char *)this + 444) = v24;
  *((_QWORD *)this + 57) = *((_QWORD *)a2 + 57);
  v25 = *((_OWORD *)a2 + 29);
  v26 = *((_OWORD *)a2 + 30);
  v27 = *((_OWORD *)a2 + 32);
  *((_OWORD *)this + 31) = *((_OWORD *)a2 + 31);
  *((_OWORD *)this + 32) = v27;
  *((_OWORD *)this + 29) = v25;
  *((_OWORD *)this + 30) = v26;
  v28 = *((_OWORD *)a2 + 33);
  v29 = *((_OWORD *)a2 + 34);
  v30 = *((_OWORD *)a2 + 35);
  *(_OWORD *)((char *)this + 569) = *(_OWORD *)((char *)a2 + 569);
  *((_OWORD *)this + 34) = v29;
  *((_OWORD *)this + 35) = v30;
  *((_OWORD *)this + 33) = v28;
  *((_OWORD *)this + 37) = *((_OWORD *)a2 + 37);
  *((_QWORD *)this + 76) = a3;
  *((int32x2_t *)this + 77) = vdup_n_s32(0x3C23D70Au);
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Aec3UseLowEarlyReflectionsDefaultGain", 0x2CuLL, &v67);
  v31 = v69;
  v32 = (char)v69;
  v33 = (void *)v67;
  if ((v69 & 0x80u) == 0)
  {
    v34 = &v67;
  }
  else
  {
    v31 = v68;
    v34 = (size_t *)v67;
  }
  v35 = (size_t *)((char *)v34 + v31);
  if (v31 >= 7)
  {
    v36 = v34;
    do
    {
      v37 = memchr(v36, 69, v31 - 6);
      if (!v37)
        break;
      v38 = (size_t *)v37;
      if (*v37 == 1650552389 && *(_DWORD *)((char *)v37 + 3) == 1684368482)
        goto LABEL_13;
      v36 = (size_t *)((char *)v37 + 1);
      v31 = (char *)v35 - ((char *)v38 + 1);
    }
    while (v31 > 6);
  }
  v38 = v35;
LABEL_13:
  if (v32 < 0)
    operator delete(v33);
  v40 = v38 != v34 || v38 == v35;
  v41 = *((float *)this + 68);
  if (!v40)
    v41 = 0.1;
  *((float *)this + 156) = v41;
  webrtc::field_trial::FindFullName((size_t)"WebRTC-Aec3UseLowLateReflectionsDefaultGain", 0x2BuLL, &v67);
  v42 = v69;
  v43 = (char)v69;
  v44 = (void *)v67;
  if ((v69 & 0x80u) == 0)
  {
    v45 = &v67;
  }
  else
  {
    v42 = v68;
    v45 = (size_t *)v67;
  }
  v46 = (size_t *)((char *)v45 + v42);
  if (v42 >= 7)
  {
    v47 = v45;
    do
    {
      v48 = memchr(v47, 69, v42 - 6);
      if (!v48)
        break;
      v49 = (size_t *)v48;
      if (*v48 == 1650552389 && *(_DWORD *)((char *)v48 + 3) == 1684368482)
        goto LABEL_32;
      v47 = (size_t *)((char *)v48 + 1);
      v42 = (char *)v46 - ((char *)v49 + 1);
    }
    while (v42 > 6);
  }
  v49 = v46;
LABEL_32:
  if (v43 < 0)
    operator delete(v44);
  v51 = v49 != v45 || v49 == v46;
  v52 = *((float *)this + 68);
  if (!v51)
    v52 = 0.1;
  *((float *)this + 157) = v52;
  if (*((_BYTE *)this + 286))
  {
    v53 = 1;
  }
  else
  {
    webrtc::field_trial::FindFullName((size_t)"WebRTC-Aec3UseErleOnsetCompensationInDominantNearend", 0x34uLL, &v67);
    v54 = v69;
    v55 = (char)v69;
    v56 = (void *)v67;
    if ((v69 & 0x80u) == 0)
    {
      v57 = &v67;
    }
    else
    {
      v54 = v68;
      v57 = (size_t *)v67;
    }
    v58 = (size_t *)((char *)v57 + v54);
    if (v54 >= 7)
    {
      v59 = v57;
      do
      {
        v60 = memchr(v59, 69, v54 - 6);
        if (!v60)
          break;
        v61 = (size_t *)v60;
        if (*v60 == 1650552389 && *(_DWORD *)((char *)v60 + 3) == 1684368482)
          goto LABEL_53;
        v59 = (size_t *)((char *)v60 + 1);
        v54 = (char *)v58 - ((char *)v61 + 1);
      }
      while (v54 > 6);
    }
    v61 = v58;
LABEL_53:
    if (v55 < 0)
      operator delete(v56);
    v53 = v61 != v58 && v61 == v57;
  }
  *((_BYTE *)this + 632) = v53;
  *((_DWORD *)this + 353) = 0;
  *(_OWORD *)((char *)this + 1156) = 0u;
  *(_OWORD *)((char *)this + 1172) = 0u;
  *(_OWORD *)((char *)this + 1188) = 0u;
  *(_OWORD *)((char *)this + 1204) = 0u;
  *(_OWORD *)((char *)this + 1220) = 0u;
  *(_OWORD *)((char *)this + 1236) = 0u;
  *(_OWORD *)((char *)this + 1252) = 0u;
  *(_OWORD *)((char *)this + 1268) = 0u;
  *(_OWORD *)((char *)this + 1284) = 0u;
  *(_OWORD *)((char *)this + 1300) = 0u;
  *(_OWORD *)((char *)this + 1316) = 0u;
  *(_OWORD *)((char *)this + 1332) = 0u;
  *(_OWORD *)((char *)this + 1348) = 0u;
  *(_OWORD *)((char *)this + 1364) = 0u;
  *(_OWORD *)((char *)this + 1380) = 0u;
  *(_OWORD *)((char *)this + 1396) = 0u;
  v64 = *((_DWORD *)this + 84);
  v65 = vdupq_n_s32(v64);
  *((int32x4_t *)this + 56) = v65;
  *((int32x4_t *)this + 57) = v65;
  *((int32x4_t *)this + 58) = v65;
  *((int32x4_t *)this + 59) = v65;
  *((int32x4_t *)this + 60) = v65;
  *((int32x4_t *)this + 61) = v65;
  *((int32x4_t *)this + 62) = v65;
  *((int32x4_t *)this + 63) = v65;
  *((int32x4_t *)this + 64) = v65;
  *((int32x4_t *)this + 65) = v65;
  *((int32x4_t *)this + 66) = v65;
  *((int32x4_t *)this + 67) = v65;
  *((int32x4_t *)this + 68) = v65;
  *((int32x4_t *)this + 69) = v65;
  *((int32x4_t *)this + 70) = v65;
  *((_DWORD *)this + 288) = v64;
  *((int32x4_t *)this + 71) = v65;
  std::array<float,65ul>::fill[abi:sn180100]((_DWORD *)this + 159, (_DWORD *)this + 86);
  return this;
}

uint64_t webrtc::ResidualEchoEstimator::Estimate(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *__src, int a7, int a8, __n128 a9, float32x4_t a10, float32x4_t a11, char *a12, uint64_t a13, char *a14, uint64_t a15)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v21;
  float32x4_t *v22;
  int8x16_t **v23;
  int8x16_t *v24;
  unint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t *v40;
  uint64_t i;
  float v42;
  uint64_t v43;
  float v44;
  int v45;
  float v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int8x16_t v68;
  int v69;
  uint64_t v70;
  unint64_t v71;
  float32x4_t *v72;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  uint64_t v82;
  uint64_t v83;
  __int32 v84;
  float v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  float32x4_t *v131;
  float32x4_t *v132;
  float32x4_t *v133;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t *v146;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  float32x4_t *v156;
  float32x4_t *v157;
  float32x4_t *v158;
  uint64_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  int16x4_t v199;
  int16x4_t v200;
  int8x16_t v201;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  int8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  int8x16_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int8x16_t v218;
  int8x16_t v219;
  int8x16_t v220;
  BOOL v221;
  float v222;
  int v223;
  int8x8_t v224;
  int8x16_t v225;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int8x16_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int8x16_t v240;
  int8x16_t v241;
  int8x16_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  float32x4_t *v246;
  float32x4_t *v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  uint64_t v268;
  unint64_t v269;
  float v270;
  uint64_t v271;
  float v272;
  float v273;
  int v274;
  uint64_t v275;
  int *v276;
  unint64_t v277;
  int8x16_t v278;
  int8x16_t v279;
  int8x16_t v280;
  int8x16_t v281;
  int8x16_t v282;
  int8x16_t v283;
  int8x16_t v284;
  int8x16_t v285;
  int8x16_t v286;
  int8x16_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int8x16_t v292;
  float v293;
  int8x16_t v294;
  float v295;
  int8x16_t v296;
  int8x16_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int8x16_t v306;
  int8x16_t v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  float32x4_t **v312;
  float32x4_t *v313;
  uint64_t v314;
  float32x4_t *v315;
  float v316;
  int32x4_t *v317;
  unsigned __int8 v318;
  int8x16_t v321;
  int8x16_t v322;
  int8x16_t v323;
  int8x16_t v324;
  float32x4_t v325;
  int8x16_t v326;
  float32x4_t v327;
  int8x16_t v328;
  float32x4_t v329;
  int8x16_t v330;
  float32x4_t v331;
  int8x16_t v332;
  float32x4_t v333;
  int8x16_t v334;
  float32x4_t v335;
  int8x16_t v336;
  float32x4_t v337;
  int8x16_t v338;
  int8x16_t v339;
  float v340;
  int v341;

  v15 = *(_QWORD *)(a3 + 8);
  v16 = (*(_DWORD *)v15 + *(_DWORD *)(v15 + 36)) % *(_DWORD *)v15;
  v18 = v15 + 8;
  v17 = *(_QWORD *)(v15 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v18 + 8) - v17) >> 3) <= v16)
  {
LABEL_234:
    __break(1u);
    return result;
  }
  v21 = result;
  v22 = (float32x4_t *)(result + 1156);
  v23 = (int8x16_t **)(v17 + 24 * (int)v16);
  v24 = *v23;
  if (v23[1] == *v23)
    v24 = 0;
  v25 = *(_QWORD *)(result + 608);
  if (v25 >= 2)
  {
    v340 = 0.0;
    a9.n128_u8[4] = 0;
    a9.n128_u8[5] = 0;
    a9.n128_u8[6] = 0;
    a9.n128_u8[7] = 0;
    v338 = 0u;
    v339 = 0u;
    v336 = 0u;
    v337 = 0u;
    v334 = 0u;
    v335 = 0u;
    v332 = 0u;
    v333 = 0u;
    v330 = 0u;
    v331 = 0u;
    v328 = 0u;
    v329 = 0u;
    v326 = 0u;
    v327 = 0u;
    v324 = 0u;
    v325 = 0u;
    v27 = 0u;
    v26 = 0u;
    v29 = 0u;
    v28 = 0u;
    v31 = 0u;
    v30 = 0u;
    v33 = 0u;
    v32 = 0u;
    v35 = 0u;
    v34 = 0u;
    v37 = 0u;
    v36 = 0u;
    v39 = 0u;
    v38 = 0u;
    a11 = 0u;
    a10 = 0u;
    v40 = (float32x4_t *)&v24[8];
    a9.n128_u32[0] = 0;
    do
    {
      v27 = vaddq_f32(v40[-8], v27);
      v26 = vaddq_f32(v40[-7], v26);
      v29 = vaddq_f32(v40[-6], v29);
      v28 = vaddq_f32(v40[-5], v28);
      v31 = vaddq_f32(v40[-4], v31);
      v30 = vaddq_f32(v40[-3], v30);
      v33 = vaddq_f32(v40[-2], v33);
      v32 = vaddq_f32(v40[-1], v32);
      v35 = vaddq_f32(*v40, v35);
      v34 = vaddq_f32(v40[1], v34);
      v37 = vaddq_f32(v40[2], v37);
      v36 = vaddq_f32(v40[3], v36);
      v39 = vaddq_f32(v40[4], v39);
      v38 = vaddq_f32(v40[5], v38);
      a11 = vaddq_f32(v40[6], a11);
      a10 = vaddq_f32(v40[7], a10);
      a9.n128_f32[0] = v40[8].f32[0] + a9.n128_f32[0];
      v40 = (float32x4_t *)((char *)v40 + 260);
      --v25;
    }
    while (v25);
    v324 = (int8x16_t)v27;
    v325 = v26;
    v326 = (int8x16_t)v29;
    v327 = v28;
    v328 = (int8x16_t)v31;
    v329 = v30;
    v330 = (int8x16_t)v33;
    v331 = v32;
    v332 = (int8x16_t)v35;
    v333 = v34;
    v334 = (int8x16_t)v37;
    v335 = v36;
    v336 = (int8x16_t)v39;
    v337 = v38;
    v338 = (int8x16_t)a11;
    v339 = (int8x16_t)a10;
    v24 = &v324;
    v340 = a9.n128_f32[0];
  }
  for (i = 0; i != 65; ++i)
  {
    v42 = *(float *)&v24->i32[i];
    v43 = result + i * 4;
    v44 = *(float *)(result + i * 4 + 636);
    if (v42 < v44)
    {
      *(float *)(v43 + 636) = v42;
      *(_DWORD *)(v43 + 896) = 0;
    }
    else
    {
      v45 = *(_DWORD *)(v43 + 896);
      if (v45 >= *(_DWORD *)(result + 336))
      {
        v46 = v44 * 1.1;
        if (v46 < *(float *)(result + 344))
          v46 = *(float *)(result + 344);
        *(float *)(v43 + 636) = v46;
      }
      else
      {
        *(_DWORD *)(v43 + 896) = v45 + 1;
      }
    }
  }
  v317 = (int32x4_t *)(a2 + 2424);
  v318 = a8;
  if (!*(_BYTE *)(a2 + 745) || !*(_BYTE *)(a2 + 242))
  {
    result = *(_QWORD *)(a2 + 736);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v50 = 624;
      if ((_DWORD)result)
        v50 = 616;
      v51 = (float *)(v21 + v50);
      if (*(_BYTE *)(a2 + 800))
      {
LABEL_28:
        if (a13)
        {
          v52 = a12;
          v53 = a14;
          v54 = a13;
          do
          {
            memmove(v52, __src, 0x104uLL);
            result = (uint64_t)memmove(v53, __src, 0x104uLL);
            v53 += 260;
            v52 += 260;
            __src += 260;
            --v54;
          }
          while (v54);
        }
        v55 = a2;
        if (!*(_BYTE *)(v21 + 376))
          goto LABEL_190;
        goto LABEL_80;
      }
    }
    else
    {
      v51 = (float *)(v21 + 624);
      if (*(_BYTE *)(a2 + 800))
        goto LABEL_28;
    }
    v316 = *v51;
    v61 = *(_QWORD *)(v21 + 608);
    v62 = *(int **)(a3 + 8);
    v63 = *(_DWORD *)(a2 + 688);
    v64 = *v62;
    v65 = *v62 + v62[9];
    v66 = (v65 + ((v63 - *(_DWORD *)(v21 + 360)) & ~((v63 - *(_DWORD *)(v21 + 360)) >> 31))) % *v62;
    v67 = v63 + *(_DWORD *)(v21 + 368) + v65 + 1;
    v68.i32[1] = 0;
    v324 = 0u;
    v325 = 0u;
    v326 = 0u;
    v327 = 0u;
    v328 = 0u;
    v329 = 0u;
    v330 = 0u;
    v331 = 0u;
    v332 = 0u;
    v333 = 0u;
    v334 = 0u;
    v335 = 0u;
    v336 = 0u;
    v337 = 0u;
    v69 = v67 % v64;
    v338 = 0u;
    v339 = 0u;
    v340 = 0.0;
    if (v61 == 1)
    {
      if (v66 != v69)
      {
        v70 = *((_QWORD *)v62 + 1);
        v71 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v62 + 2) - v70) >> 3);
        while (v71 > v66)
        {
          v72 = *(float32x4_t **)(v70 + 24 * v66);
          if (*(float32x4_t **)(v70 + 24 * v66 + 8) == v72)
            break;
          if (&v324 >= (int8x16_t *)&v72[16].i32[1] || v72 >= (float32x4_t *)&v341)
          {
            v74 = vbslq_s8((int8x16_t)vcgtq_f32(v72[1], v325), (int8x16_t)v72[1], (int8x16_t)v325);
            v324 = vbslq_s8((int8x16_t)vcgtq_f32(*v72, (float32x4_t)v324), *(int8x16_t *)v72, v324);
            v325 = (float32x4_t)v74;
            v75 = vbslq_s8((int8x16_t)vcgtq_f32(v72[3], v327), (int8x16_t)v72[3], (int8x16_t)v327);
            v326 = vbslq_s8((int8x16_t)vcgtq_f32(v72[2], (float32x4_t)v326), (int8x16_t)v72[2], v326);
            v327 = (float32x4_t)v75;
            v76 = vbslq_s8((int8x16_t)vcgtq_f32(v72[5], v329), (int8x16_t)v72[5], (int8x16_t)v329);
            v328 = vbslq_s8((int8x16_t)vcgtq_f32(v72[4], (float32x4_t)v328), (int8x16_t)v72[4], v328);
            v329 = (float32x4_t)v76;
            v77 = vbslq_s8((int8x16_t)vcgtq_f32(v72[7], v331), (int8x16_t)v72[7], (int8x16_t)v331);
            v330 = vbslq_s8((int8x16_t)vcgtq_f32(v72[6], (float32x4_t)v330), (int8x16_t)v72[6], v330);
            v331 = (float32x4_t)v77;
            v78 = vbslq_s8((int8x16_t)vcgtq_f32(v72[9], v333), (int8x16_t)v72[9], (int8x16_t)v333);
            v332 = vbslq_s8((int8x16_t)vcgtq_f32(v72[8], (float32x4_t)v332), (int8x16_t)v72[8], v332);
            v333 = (float32x4_t)v78;
            v79 = vbslq_s8((int8x16_t)vcgtq_f32(v72[11], v335), (int8x16_t)v72[11], (int8x16_t)v335);
            v334 = vbslq_s8((int8x16_t)vcgtq_f32(v72[10], (float32x4_t)v334), (int8x16_t)v72[10], v334);
            v335 = (float32x4_t)v79;
            v80 = vbslq_s8((int8x16_t)vcgtq_f32(v72[13], v337), (int8x16_t)v72[13], (int8x16_t)v337);
            v336 = vbslq_s8((int8x16_t)vcgtq_f32(v72[12], (float32x4_t)v336), (int8x16_t)v72[12], v336);
            v337 = (float32x4_t)v80;
            v68 = vbslq_s8((int8x16_t)vcgtq_f32(v72[14], (float32x4_t)v338), (int8x16_t)v72[14], v338);
            v81 = vbslq_s8((int8x16_t)vcgtq_f32(v72[15], (float32x4_t)v339), (int8x16_t)v72[15], v339);
            v82 = 64;
            v338 = v68;
            v339 = v81;
          }
          else
          {
            v82 = 0;
          }
          v83 = v82;
          do
          {
            v84 = v324.i32[v83];
            if (*(float *)&v84 < v72->f32[v83])
              v84 = v72->i32[v83];
            v324.i32[v83++] = v84;
          }
          while (v83 != 65);
          if (v64 - 1 > v66)
            ++v66;
          else
            v66 = 0;
          if (v66 == v69)
            goto LABEL_72;
        }
        goto LABEL_234;
      }
    }
    else if (v66 != v69)
    {
      v274 = v64 - 1;
      v276 = v62 + 2;
      v275 = *((_QWORD *)v62 + 1);
      v277 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v276 + 1) - v275) >> 3);
      v278 = (int8x16_t)v325;
      v323 = v324;
      v280 = v326;
      v279 = (int8x16_t)v327;
      v281 = v328;
      v282 = (int8x16_t)v329;
      v283 = v330;
      v284 = (int8x16_t)v331;
      v285 = v332;
      v286 = (int8x16_t)v333;
      v287 = v334;
      v288 = (int8x16_t)v335;
      v289 = v336;
      v290 = (int8x16_t)v337;
      v291 = v338;
      v292 = v339;
      v293 = v340;
      while (1)
      {
        v322 = v280;
        v321 = v279;
        if (v61)
          break;
        v294 = 0uLL;
        v295 = 0.0;
        v296 = 0uLL;
        v297 = 0uLL;
        v298 = 0uLL;
        v299 = 0uLL;
        v300 = 0uLL;
        v301 = 0uLL;
        v302 = 0uLL;
        v303 = 0uLL;
        v304 = 0uLL;
        v305 = 0uLL;
        v306 = 0uLL;
        v307 = 0uLL;
        v308 = 0uLL;
        v309 = 0uLL;
        v310 = 0uLL;
LABEL_222:
        v311 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v310, (float32x4_t)v323), v310, v323);
        v278 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v309, (float32x4_t)v278), v309, v278);
        v280 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v308, (float32x4_t)v322), v308, v322);
        v279 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v307, (float32x4_t)v321), v307, v321);
        v281 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v306, (float32x4_t)v281), v306, v281);
        v282 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v305, (float32x4_t)v282), v305, v282);
        v283 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v304, (float32x4_t)v283), v304, v283);
        v284 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v303, (float32x4_t)v284), v303, v284);
        v285 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v302, (float32x4_t)v285), v302, v285);
        v286 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v301, (float32x4_t)v286), v301, v286);
        v287 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v300, (float32x4_t)v287), v300, v287);
        v288 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v299, (float32x4_t)v288), v299, v288);
        v289 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v298, (float32x4_t)v289), v298, v289);
        v290 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v297, (float32x4_t)v290), v297, v290);
        v291 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)v296, (float32x4_t)v291), v296, v291);
        v68 = (int8x16_t)vcgtq_f32((float32x4_t)v294, (float32x4_t)v292);
        v292 = vbslq_s8(v68, v294, v292);
        if (v293 < v295)
          v293 = v295;
        v323 = v311;
        v324 = v311;
        v325 = (float32x4_t)v278;
        v326 = v280;
        v327 = (float32x4_t)v279;
        v328 = v281;
        v329 = (float32x4_t)v282;
        v330 = v283;
        v331 = (float32x4_t)v284;
        v332 = v285;
        v333 = (float32x4_t)v286;
        v334 = v287;
        v335 = (float32x4_t)v288;
        v336 = v289;
        v337 = (float32x4_t)v290;
        v338 = v291;
        v339 = v292;
        v340 = v293;
        if (v274 > v66)
          ++v66;
        else
          v66 = 0;
        if (v66 == v69)
          goto LABEL_72;
      }
      if (v277 > v66)
      {
        v312 = (float32x4_t **)(v275 + 24 * v66);
        v313 = *v312;
        v294 = 0uLL;
        v295 = 0.0;
        v296 = 0uLL;
        v297 = 0uLL;
        v298 = 0uLL;
        v299 = 0uLL;
        v314 = 0xFC0FC0FC0FC0FC1 * (((char *)v312[1] - (char *)*v312) >> 2);
        v300 = 0uLL;
        v315 = v313 + 8;
        v301 = 0uLL;
        result = v61;
        v302 = 0uLL;
        v303 = 0uLL;
        v304 = 0uLL;
        v305 = 0uLL;
        v306 = 0uLL;
        v307 = 0uLL;
        v308 = 0uLL;
        v309 = 0uLL;
        v310 = 0uLL;
        while (v314)
        {
          v310 = (int8x16_t)vaddq_f32(v315[-8], (float32x4_t)v310);
          v309 = (int8x16_t)vaddq_f32(v315[-7], (float32x4_t)v309);
          v308 = (int8x16_t)vaddq_f32(v315[-6], (float32x4_t)v308);
          v307 = (int8x16_t)vaddq_f32(v315[-5], (float32x4_t)v307);
          v306 = (int8x16_t)vaddq_f32(v315[-4], (float32x4_t)v306);
          v305 = (int8x16_t)vaddq_f32(v315[-3], (float32x4_t)v305);
          v304 = (int8x16_t)vaddq_f32(v315[-2], (float32x4_t)v304);
          v303 = (int8x16_t)vaddq_f32(v315[-1], (float32x4_t)v303);
          v302 = (int8x16_t)vaddq_f32(*v315, (float32x4_t)v302);
          v301 = (int8x16_t)vaddq_f32(v315[1], (float32x4_t)v301);
          v300 = (int8x16_t)vaddq_f32(v315[2], (float32x4_t)v300);
          v299 = (int8x16_t)vaddq_f32(v315[3], (float32x4_t)v299);
          v298 = (int8x16_t)vaddq_f32(v315[4], (float32x4_t)v298);
          v297 = (int8x16_t)vaddq_f32(v315[5], (float32x4_t)v297);
          v296 = (int8x16_t)vaddq_f32(v315[6], (float32x4_t)v296);
          v294 = (int8x16_t)vaddq_f32(v315[7], (float32x4_t)v294);
          v295 = v315[8].f32[0] + v295;
          --v314;
          v315 = (float32x4_t *)((char *)v315 + 260);
          if (!--result)
            goto LABEL_222;
        }
      }
      goto LABEL_234;
    }
LABEL_72:
    v85 = v316 * v316;
    if (!*(_BYTE *)(a2 + 320))
    {
      v271 = 0;
      v272 = *(float *)(v21 + 352);
      do
      {
        v273 = *(float *)&v324.i32[v271];
        if (v272 > v273)
          *(float *)&v324.i32[v271] = fmaxf(v273 - (float)(*(float *)(v21 + 356) * (float)(v272 - v273)), 0.0);
        ++v271;
      }
      while (v271 != 65);
    }
    v68.i32[0] = *(_DWORD *)(v21 + 348);
    v86 = vmaxnmq_f32(vmlsq_lane_f32(v325, *(float32x4_t *)(v21 + 652), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v324 = (int8x16_t)vmaxnmq_f32(vmlsq_lane_f32((float32x4_t)v324, *(float32x4_t *)(v21 + 636), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v325 = v86;
    v87 = vmaxnmq_f32(vmlsq_lane_f32(v327, *(float32x4_t *)(v21 + 684), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v326 = (int8x16_t)vmaxnmq_f32(vmlsq_lane_f32((float32x4_t)v326, *(float32x4_t *)(v21 + 668), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v327 = v87;
    v88 = vmaxnmq_f32(vmlsq_lane_f32(v329, *(float32x4_t *)(v21 + 716), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v328 = (int8x16_t)vmaxnmq_f32(vmlsq_lane_f32((float32x4_t)v328, *(float32x4_t *)(v21 + 700), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v329 = v88;
    v89 = vmaxnmq_f32(vmlsq_lane_f32(v331, *(float32x4_t *)(v21 + 748), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v330 = (int8x16_t)vmaxnmq_f32(vmlsq_lane_f32((float32x4_t)v330, *(float32x4_t *)(v21 + 732), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v331 = v89;
    v90 = vmaxnmq_f32(vmlsq_lane_f32(v333, *(float32x4_t *)(v21 + 780), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v332 = (int8x16_t)vmaxnmq_f32(vmlsq_lane_f32((float32x4_t)v332, *(float32x4_t *)(v21 + 764), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v333 = v90;
    v91 = vmaxnmq_f32(vmlsq_lane_f32(v335, *(float32x4_t *)(v21 + 812), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v334 = (int8x16_t)vmaxnmq_f32(vmlsq_lane_f32((float32x4_t)v334, *(float32x4_t *)(v21 + 796), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v335 = v91;
    v92 = vmaxnmq_f32(vmlsq_lane_f32(v337, *(float32x4_t *)(v21 + 844), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v336 = (int8x16_t)vmaxnmq_f32(vmlsq_lane_f32((float32x4_t)v336, *(float32x4_t *)(v21 + 828), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v337 = v92;
    v93 = vmaxnmq_f32(vmlsq_lane_f32((float32x4_t)v339, *(float32x4_t *)(v21 + 876), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v92.i32[0] = *(_DWORD *)(v21 + 892);
    v338 = (int8x16_t)vmaxnmq_f32(vmlsq_lane_f32((float32x4_t)v338, *(float32x4_t *)(v21 + 860), *(float32x2_t *)v68.i8, 0), (float32x4_t)0);
    v339 = (int8x16_t)v93;
    *(float *)v68.i32 = fmaxf(v340 - (float)(*(float *)v68.i32 * v92.f32[0]), 0.0);
    if (a13)
      v94 = (uint64_t)a12;
    else
      v94 = 0;
    v340 = *(float *)v68.i32;
    if (a15)
      v95 = (uint64_t)a14;
    else
      v95 = 0;
    v55 = a2;
    if (!*(_BYTE *)(v21 + 376))
      goto LABEL_190;
LABEL_80:
    v96 = *(_QWORD *)(v55 + 736);
    if (!v96 || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v96 + 16))(v96), (result & 1) == 0))
    {
      result = webrtc::ResidualEchoEstimator::UpdateReverb(v21, 1, (_QWORD *)v55, *(_QWORD *)(a3 + 8), v318);
      if (a13)
        v97 = (uint64_t)a12;
      else
        v97 = 0;
      if (a13)
      {
        v98 = 0;
        v99 = v97;
        do
        {
          v100 = v97 + 260 * v98;
          if (v100 >= v21 + 1416 || (unint64_t)v22 >= v100 + 260)
          {
            v102 = vaddq_f32(v22[1], *(float32x4_t *)(v100 + 16));
            *(float32x4_t *)v100 = vaddq_f32(*v22, *(float32x4_t *)v100);
            *(float32x4_t *)(v100 + 16) = v102;
            v103 = vaddq_f32(v22[3], *(float32x4_t *)(v100 + 48));
            *(float32x4_t *)(v100 + 32) = vaddq_f32(v22[2], *(float32x4_t *)(v100 + 32));
            *(float32x4_t *)(v100 + 48) = v103;
            v104 = vaddq_f32(v22[5], *(float32x4_t *)(v100 + 80));
            *(float32x4_t *)(v100 + 64) = vaddq_f32(v22[4], *(float32x4_t *)(v100 + 64));
            *(float32x4_t *)(v100 + 80) = v104;
            v105 = vaddq_f32(v22[7], *(float32x4_t *)(v100 + 112));
            *(float32x4_t *)(v100 + 96) = vaddq_f32(v22[6], *(float32x4_t *)(v100 + 96));
            *(float32x4_t *)(v100 + 112) = v105;
            v106 = vaddq_f32(v22[9], *(float32x4_t *)(v100 + 144));
            *(float32x4_t *)(v100 + 128) = vaddq_f32(v22[8], *(float32x4_t *)(v100 + 128));
            *(float32x4_t *)(v100 + 144) = v106;
            v107 = vaddq_f32(v22[11], *(float32x4_t *)(v100 + 176));
            *(float32x4_t *)(v100 + 160) = vaddq_f32(v22[10], *(float32x4_t *)(v100 + 160));
            *(float32x4_t *)(v100 + 176) = v107;
            v108 = vaddq_f32(v22[13], *(float32x4_t *)(v100 + 208));
            *(float32x4_t *)(v100 + 192) = vaddq_f32(v22[12], *(float32x4_t *)(v100 + 192));
            *(float32x4_t *)(v100 + 208) = v108;
            a11 = *(float32x4_t *)(v100 + 224);
            a9 = (__n128)vaddq_f32(v22[14], a11);
            a10 = vaddq_f32(v22[15], *(float32x4_t *)(v100 + 240));
            *(__n128 *)(v100 + 224) = a9;
            *(float32x4_t *)(v100 + 240) = a10;
            v109 = 64;
          }
          else
          {
            v109 = 0;
          }
          v110 = v109;
          do
          {
            *(float *)(v99 + v110 * 4) = v22->f32[v110] + *(float *)(v99 + v110 * 4);
            ++v110;
          }
          while (v110 != 65);
          ++v98;
          v99 += 260;
        }
        while (v98 != a13);
      }
      if (a15)
        v111 = (uint64_t)a14;
      else
        v111 = 0;
      if (a15)
      {
        v112 = 0;
        v113 = v111;
        do
        {
          v114 = v111 + 260 * v112;
          if (v114 >= v21 + 1416 || (unint64_t)v22 >= v114 + 260)
          {
            v116 = vaddq_f32(v22[1], *(float32x4_t *)(v114 + 16));
            *(float32x4_t *)v114 = vaddq_f32(*v22, *(float32x4_t *)v114);
            *(float32x4_t *)(v114 + 16) = v116;
            v117 = vaddq_f32(v22[3], *(float32x4_t *)(v114 + 48));
            *(float32x4_t *)(v114 + 32) = vaddq_f32(v22[2], *(float32x4_t *)(v114 + 32));
            *(float32x4_t *)(v114 + 48) = v117;
            v118 = vaddq_f32(v22[5], *(float32x4_t *)(v114 + 80));
            *(float32x4_t *)(v114 + 64) = vaddq_f32(v22[4], *(float32x4_t *)(v114 + 64));
            *(float32x4_t *)(v114 + 80) = v118;
            v119 = vaddq_f32(v22[7], *(float32x4_t *)(v114 + 112));
            *(float32x4_t *)(v114 + 96) = vaddq_f32(v22[6], *(float32x4_t *)(v114 + 96));
            *(float32x4_t *)(v114 + 112) = v119;
            v120 = vaddq_f32(v22[9], *(float32x4_t *)(v114 + 144));
            *(float32x4_t *)(v114 + 128) = vaddq_f32(v22[8], *(float32x4_t *)(v114 + 128));
            *(float32x4_t *)(v114 + 144) = v120;
            v121 = vaddq_f32(v22[11], *(float32x4_t *)(v114 + 176));
            *(float32x4_t *)(v114 + 160) = vaddq_f32(v22[10], *(float32x4_t *)(v114 + 160));
            *(float32x4_t *)(v114 + 176) = v121;
            v122 = vaddq_f32(v22[13], *(float32x4_t *)(v114 + 208));
            *(float32x4_t *)(v114 + 192) = vaddq_f32(v22[12], *(float32x4_t *)(v114 + 192));
            *(float32x4_t *)(v114 + 208) = v122;
            a11 = *(float32x4_t *)(v114 + 224);
            a9 = (__n128)vaddq_f32(v22[14], a11);
            a10 = vaddq_f32(v22[15], *(float32x4_t *)(v114 + 240));
            *(__n128 *)(v114 + 224) = a9;
            *(float32x4_t *)(v114 + 240) = a10;
            v123 = 64;
          }
          else
          {
            v123 = 0;
          }
          v124 = v123;
          do
          {
            *(float *)(v113 + v124 * 4) = v22->f32[v124] + *(float *)(v113 + v124 * 4);
            ++v124;
          }
          while (v124 != 65);
          ++v112;
          v113 += 260;
        }
        while (v112 != a15);
      }
    }
    goto LABEL_190;
  }
  if (!*(_BYTE *)(a2 + 800))
  {
    if (*(_BYTE *)(result + 632))
      v56 = 0;
    else
      v56 = a8;
    if (a5)
      v57 = a4;
    else
      v57 = 0;
    v58 = *(_QWORD *)(a2 + 1968);
    if (v58)
    {
      if ((v56 & 1) != 0 || !*(_BYTE *)(v58 + 600))
      {
        if (*(_QWORD *)(v58 + 616) == *(_QWORD *)(v58 + 608))
          v59 = 0;
        else
          v59 = *(_QWORD *)(v58 + 608);
        if (a13)
          v60 = (uint64_t)a12;
        else
          v60 = 0;
        if (!a13)
          goto LABEL_140;
      }
      else
      {
        if (*(_QWORD *)(v58 + 640) == *(_QWORD *)(v58 + 632))
          v59 = 0;
        else
          v59 = *(_QWORD *)(v58 + 632);
        if (a13)
          v60 = (uint64_t)a12;
        else
          v60 = 0;
        if (!a13)
        {
LABEL_140:
          v145 = (uint64_t *)(a2 + 1872);
          v146 = (uint64_t *)(v58 + 608);
          _ZF = v58 == 0;
          if (v58)
            v148 = (_QWORD *)(v58 + 616);
          else
            v148 = (_QWORD *)(a2 + 1880);
          if (!_ZF)
            v145 = v146;
          v149 = *v145;
          if (*v148 == v149)
            v150 = 0;
          else
            v150 = v149;
          if (a15)
            v151 = (uint64_t)a14;
          else
            v151 = 0;
          if (a15)
          {
            v152 = 0;
            v153 = v57;
            v154 = v150;
            v155 = v151;
            do
            {
              v156 = (float32x4_t *)(v57 + 260 * v152);
              v157 = (float32x4_t *)(v150 + 260 * v152);
              v158 = (float32x4_t *)(v151 + 260 * v152);
              if ((unint64_t)((char *)v158 - (char *)v156) >= 0x20
                && (unint64_t)((char *)v158 - (char *)v157) > 0x1F)
              {
                v161 = vdivq_f32(v156[1], v157[1]);
                *v158 = vdivq_f32(*v156, *v157);
                v158[1] = v161;
                v162 = vdivq_f32(v156[3], v157[3]);
                v158[2] = vdivq_f32(v156[2], v157[2]);
                v158[3] = v162;
                v163 = vdivq_f32(v156[5], v157[5]);
                v158[4] = vdivq_f32(v156[4], v157[4]);
                v158[5] = v163;
                v164 = vdivq_f32(v156[7], v157[7]);
                v158[6] = vdivq_f32(v156[6], v157[6]);
                v158[7] = v164;
                v165 = vdivq_f32(v156[9], v157[9]);
                v158[8] = vdivq_f32(v156[8], v157[8]);
                v158[9] = v165;
                v166 = vdivq_f32(v156[11], v157[11]);
                v158[10] = vdivq_f32(v156[10], v157[10]);
                v158[11] = v166;
                v167 = vdivq_f32(v156[13], v157[13]);
                v158[12] = vdivq_f32(v156[12], v157[12]);
                v158[13] = v167;
                v168 = vdivq_f32(v156[15], v157[15]);
                v158[14] = vdivq_f32(v156[14], v157[14]);
                v158[15] = v168;
                v160 = 64;
              }
              else
              {
                v160 = 0;
              }
              v169 = 4 * v160;
              do
              {
                *(float *)(v155 + v169) = *(float *)(v153 + v169) / *(float *)(v154 + v169);
                v169 += 4;
              }
              while (v169 != 260);
              ++v152;
              v155 += 260;
              v154 += 260;
              v153 += 260;
            }
            while (v152 != a15);
          }
          goto LABEL_162;
        }
      }
    }
    else
    {
      if (!*(_BYTE *)(a2 + 1456))
        v56 = 1;
      _ZF = v56 == 0;
      v125 = 392;
      if (!_ZF)
        v125 = 368;
      v126 = (uint64_t *)(a2 + 1456 + v125);
      if (v126[1] == *v126)
        v59 = 0;
      else
        v59 = *v126;
      if (a13)
        v60 = (uint64_t)a12;
      else
        v60 = 0;
      if (!a13)
        goto LABEL_140;
    }
    v127 = 0;
    v128 = v57;
    v129 = v59;
    v130 = v60;
    do
    {
      v131 = (float32x4_t *)(v57 + 260 * v127);
      v132 = (float32x4_t *)(v59 + 260 * v127);
      v133 = (float32x4_t *)(v60 + 260 * v127);
      if ((unint64_t)((char *)v133 - (char *)v131) >= 0x20
        && (unint64_t)((char *)v133 - (char *)v132) > 0x1F)
      {
        v136 = vdivq_f32(v131[1], v132[1]);
        *v133 = vdivq_f32(*v131, *v132);
        v133[1] = v136;
        v137 = vdivq_f32(v131[3], v132[3]);
        v133[2] = vdivq_f32(v131[2], v132[2]);
        v133[3] = v137;
        v138 = vdivq_f32(v131[5], v132[5]);
        v133[4] = vdivq_f32(v131[4], v132[4]);
        v133[5] = v138;
        v139 = vdivq_f32(v131[7], v132[7]);
        v133[6] = vdivq_f32(v131[6], v132[6]);
        v133[7] = v139;
        v140 = vdivq_f32(v131[9], v132[9]);
        v133[8] = vdivq_f32(v131[8], v132[8]);
        v133[9] = v140;
        v141 = vdivq_f32(v131[11], v132[11]);
        v133[10] = vdivq_f32(v131[10], v132[10]);
        v133[11] = v141;
        v142 = vdivq_f32(v131[13], v132[13]);
        v133[12] = vdivq_f32(v131[12], v132[12]);
        v133[13] = v142;
        v143 = vdivq_f32(v131[15], v132[15]);
        v133[14] = vdivq_f32(v131[14], v132[14]);
        v133[15] = v143;
        v135 = 64;
      }
      else
      {
        v135 = 0;
      }
      v144 = 4 * v135;
      do
      {
        *(float *)(v130 + v144) = *(float *)(v128 + v144) / *(float *)(v129 + v144);
        v144 += 4;
      }
      while (v144 != 260);
      ++v127;
      v130 += 260;
      v129 += 260;
      v128 += 260;
    }
    while (v127 != a13);
    goto LABEL_140;
  }
  if (a13)
  {
    v47 = a12;
    v48 = a14;
    v49 = a13;
    do
    {
      memmove(v47, __src, 0x104uLL);
      memmove(v48, __src, 0x104uLL);
      v48 += 260;
      v47 += 260;
      __src += 260;
      --v49;
    }
    while (v49);
  }
LABEL_162:
  v55 = a2;
  result = webrtc::ResidualEchoEstimator::UpdateReverb(v21, 0, (_QWORD *)a2, *(_QWORD *)(a3 + 8), v318);
  if (a13)
    v170 = (uint64_t)a12;
  else
    v170 = 0;
  if (a13)
  {
    v171 = 0;
    v172 = v170;
    do
    {
      v173 = v170 + 260 * v171;
      if (v173 >= v21 + 1416 || (unint64_t)v22 >= v173 + 260)
      {
        v175 = vaddq_f32(v22[1], *(float32x4_t *)(v173 + 16));
        *(float32x4_t *)v173 = vaddq_f32(*v22, *(float32x4_t *)v173);
        *(float32x4_t *)(v173 + 16) = v175;
        v176 = vaddq_f32(v22[3], *(float32x4_t *)(v173 + 48));
        *(float32x4_t *)(v173 + 32) = vaddq_f32(v22[2], *(float32x4_t *)(v173 + 32));
        *(float32x4_t *)(v173 + 48) = v176;
        v177 = vaddq_f32(v22[5], *(float32x4_t *)(v173 + 80));
        *(float32x4_t *)(v173 + 64) = vaddq_f32(v22[4], *(float32x4_t *)(v173 + 64));
        *(float32x4_t *)(v173 + 80) = v177;
        v178 = vaddq_f32(v22[7], *(float32x4_t *)(v173 + 112));
        *(float32x4_t *)(v173 + 96) = vaddq_f32(v22[6], *(float32x4_t *)(v173 + 96));
        *(float32x4_t *)(v173 + 112) = v178;
        v179 = vaddq_f32(v22[9], *(float32x4_t *)(v173 + 144));
        *(float32x4_t *)(v173 + 128) = vaddq_f32(v22[8], *(float32x4_t *)(v173 + 128));
        *(float32x4_t *)(v173 + 144) = v179;
        v180 = vaddq_f32(v22[11], *(float32x4_t *)(v173 + 176));
        *(float32x4_t *)(v173 + 160) = vaddq_f32(v22[10], *(float32x4_t *)(v173 + 160));
        *(float32x4_t *)(v173 + 176) = v180;
        v181 = vaddq_f32(v22[13], *(float32x4_t *)(v173 + 208));
        *(float32x4_t *)(v173 + 192) = vaddq_f32(v22[12], *(float32x4_t *)(v173 + 192));
        *(float32x4_t *)(v173 + 208) = v181;
        a11 = *(float32x4_t *)(v173 + 224);
        a9 = (__n128)vaddq_f32(v22[14], a11);
        a10 = vaddq_f32(v22[15], *(float32x4_t *)(v173 + 240));
        *(__n128 *)(v173 + 224) = a9;
        *(float32x4_t *)(v173 + 240) = a10;
        v182 = 64;
      }
      else
      {
        v182 = 0;
      }
      v183 = v182;
      do
      {
        *(float *)(v172 + v183 * 4) = v22->f32[v183] + *(float *)(v172 + v183 * 4);
        ++v183;
      }
      while (v183 != 65);
      ++v171;
      v172 += 260;
    }
    while (v171 != a13);
  }
  if (a15)
    v184 = (uint64_t)a14;
  else
    v184 = 0;
  if (a15)
  {
    v185 = 0;
    v186 = v184;
    do
    {
      v187 = v184 + 260 * v185;
      if (v187 >= v21 + 1416 || (unint64_t)v22 >= v187 + 260)
      {
        v189 = vaddq_f32(v22[1], *(float32x4_t *)(v187 + 16));
        *(float32x4_t *)v187 = vaddq_f32(*v22, *(float32x4_t *)v187);
        *(float32x4_t *)(v187 + 16) = v189;
        v190 = vaddq_f32(v22[3], *(float32x4_t *)(v187 + 48));
        *(float32x4_t *)(v187 + 32) = vaddq_f32(v22[2], *(float32x4_t *)(v187 + 32));
        *(float32x4_t *)(v187 + 48) = v190;
        v191 = vaddq_f32(v22[5], *(float32x4_t *)(v187 + 80));
        *(float32x4_t *)(v187 + 64) = vaddq_f32(v22[4], *(float32x4_t *)(v187 + 64));
        *(float32x4_t *)(v187 + 80) = v191;
        v192 = vaddq_f32(v22[7], *(float32x4_t *)(v187 + 112));
        *(float32x4_t *)(v187 + 96) = vaddq_f32(v22[6], *(float32x4_t *)(v187 + 96));
        *(float32x4_t *)(v187 + 112) = v192;
        v193 = vaddq_f32(v22[9], *(float32x4_t *)(v187 + 144));
        *(float32x4_t *)(v187 + 128) = vaddq_f32(v22[8], *(float32x4_t *)(v187 + 128));
        *(float32x4_t *)(v187 + 144) = v193;
        v194 = vaddq_f32(v22[11], *(float32x4_t *)(v187 + 176));
        *(float32x4_t *)(v187 + 160) = vaddq_f32(v22[10], *(float32x4_t *)(v187 + 160));
        *(float32x4_t *)(v187 + 176) = v194;
        v195 = vaddq_f32(v22[13], *(float32x4_t *)(v187 + 208));
        *(float32x4_t *)(v187 + 192) = vaddq_f32(v22[12], *(float32x4_t *)(v187 + 192));
        *(float32x4_t *)(v187 + 208) = v195;
        a11 = *(float32x4_t *)(v187 + 224);
        a9 = (__n128)vaddq_f32(v22[14], a11);
        a10 = vaddq_f32(v22[15], *(float32x4_t *)(v187 + 240));
        *(__n128 *)(v187 + 224) = a9;
        *(float32x4_t *)(v187 + 240) = a10;
        v196 = 64;
      }
      else
      {
        v196 = 0;
      }
      v197 = v196;
      do
      {
        *(float *)(v186 + v197 * 4) = v22->f32[v197] + *(float *)(v186 + v197 * 4);
        ++v197;
      }
      while (v197 != 65);
      ++v185;
      v186 += 260;
    }
    while (v185 != a15);
  }
LABEL_190:
  if (*(_BYTE *)(v55 + 320))
  {
    v198 = 374;
    if (!*(_BYTE *)(v55 + 240))
      v198 = 199;
    if (*(_QWORD *)(v55 + 1984) <= v198)
    {
      v223 = *(unsigned __int8 *)(v55 + 2141);
      v224 = (int8x8_t)vdup_n_s16(*(_BYTE *)(v55 + 2141) == 0);
      a10.i32[0] = *(_DWORD *)(v55 + 2684);
      a11.i32[0] = *(_DWORD *)(v55 + 2688);
      v225 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a10.f32)), (int8x8_t)vmovn_s32(vtstq_s32(*v317, *v317))), v224)), 0x1FuLL));
      __asm { FMOV            V1.4S, #1.0 }
      v227 = vandq_s8(_Q1, v225);
      v228 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a11.f32)), (int8x8_t)vmovn_s32(vtstq_s32(v317[1], v317[1]))), v224)), 0x1FuLL)));
      v324 = v227;
      v325 = (float32x4_t)v228;
      v228.i32[0] = *(_DWORD *)(v55 + 2692);
      v227.i32[0] = *(_DWORD *)(v55 + 2696);
      v229 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v228.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[2], v317[2]))), v224)), 0x1FuLL)));
      v230 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v227.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[3], v317[3]))), v224)), 0x1FuLL)));
      v326 = v229;
      v327 = (float32x4_t)v230;
      v229.i32[0] = *(_DWORD *)(v55 + 2700);
      v230.i32[0] = *(_DWORD *)(v55 + 2704);
      v231 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v229.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[4], v317[4]))), v224)), 0x1FuLL)));
      v232 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v230.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[5], v317[5]))), v224)), 0x1FuLL)));
      v328 = v231;
      v329 = (float32x4_t)v232;
      v231.i32[0] = *(_DWORD *)(v55 + 2708);
      v232.i32[0] = *(_DWORD *)(v55 + 2712);
      v233 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v231.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[6], v317[6]))), v224)), 0x1FuLL)));
      v234 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v232.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[7], v317[7]))), v224)), 0x1FuLL)));
      v330 = v233;
      v331 = (float32x4_t)v234;
      v233.i32[0] = *(_DWORD *)(v55 + 2716);
      v234.i32[0] = *(_DWORD *)(v55 + 2720);
      v235 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v233.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[8], v317[8]))), v224)), 0x1FuLL)));
      v236 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v234.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[9], v317[9]))), v224)), 0x1FuLL)));
      v332 = v235;
      v333 = (float32x4_t)v236;
      v235.i32[0] = *(_DWORD *)(v55 + 2724);
      v236.i32[0] = *(_DWORD *)(v55 + 2728);
      v237 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v235.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[10], v317[10]))), v224)), 0x1FuLL)));
      v238 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v236.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[11], v317[11]))), v224)), 0x1FuLL)));
      v334 = v237;
      v335 = (float32x4_t)v238;
      v237.i32[0] = *(_DWORD *)(v55 + 2732);
      v238.i32[0] = *(_DWORD *)(v55 + 2736);
      v239 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v237.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[12], v317[12]))), v224)), 0x1FuLL)));
      v240 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v238.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[13], v317[13]))), v224)), 0x1FuLL)));
      v336 = v239;
      v337 = (float32x4_t)v240;
      v239.i32[0] = *(_DWORD *)(v55 + 2740);
      v240.i32[0] = *(_DWORD *)(v55 + 2744);
      v241 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v239.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[14], v317[14]))), v224)), 0x1FuLL));
      v242 = vandq_s8(_Q1, (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vorr_s8((int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v240.i8)), (int8x8_t)vmovn_s32(vtstq_s32(v317[15], v317[15]))), v224)), 0x1FuLL)));
      v338 = vandq_s8(_Q1, v241);
      v339 = v242;
      if (!*(_BYTE *)(v55 + 2748) || *(_DWORD *)(v55 + 2680) || (v222 = 0.0, !v223))
        v222 = 1.0;
    }
    else
    {
      a9.n128_u32[0] = *(_DWORD *)(v55 + 2684);
      v199 = (int16x4_t)vmovl_u8((uint8x8_t)a9.n128_u64[0]).u64[0];
      a10.i32[0] = *(_DWORD *)(v55 + 2688);
      v200 = (int16x4_t)vmovl_u8(*(uint8x8_t *)a10.f32).u64[0];
      v201 = vandq_s8((int8x16_t)vmovl_s16(vtst_s16(v199, v199)), (int8x16_t)vceqzq_s32(*v317));
      __asm { FMOV            V0.4S, #1.0 }
      v205 = vbicq_s8(_Q0, v201);
      v206 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(v200, v200)), (int8x16_t)vceqzq_s32(v317[1])));
      v324 = v205;
      v325 = (float32x4_t)v206;
      v206.i32[0] = *(_DWORD *)(v55 + 2692);
      v206.i64[0] = vmovl_u8(*(uint8x8_t *)v206.i8).u64[0];
      v205.i32[0] = *(_DWORD *)(v55 + 2696);
      v205.i64[0] = vmovl_u8(*(uint8x8_t *)v205.i8).u64[0];
      v207 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v206.i8, *(int16x4_t *)v206.i8)), (int8x16_t)vceqzq_s32(v317[2])));
      v208 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v205.i8, *(int16x4_t *)v205.i8)), (int8x16_t)vceqzq_s32(v317[3])));
      v326 = v207;
      v327 = (float32x4_t)v208;
      v207.i32[0] = *(_DWORD *)(v55 + 2700);
      v207.i64[0] = vmovl_u8(*(uint8x8_t *)v207.i8).u64[0];
      v208.i32[0] = *(_DWORD *)(v55 + 2704);
      v208.i64[0] = vmovl_u8(*(uint8x8_t *)v208.i8).u64[0];
      v209 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v207.i8, *(int16x4_t *)v207.i8)), (int8x16_t)vceqzq_s32(v317[4])));
      v210 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v208.i8, *(int16x4_t *)v208.i8)), (int8x16_t)vceqzq_s32(v317[5])));
      v328 = v209;
      v329 = (float32x4_t)v210;
      v209.i32[0] = *(_DWORD *)(v55 + 2708);
      v209.i64[0] = vmovl_u8(*(uint8x8_t *)v209.i8).u64[0];
      v210.i32[0] = *(_DWORD *)(v55 + 2712);
      v210.i64[0] = vmovl_u8(*(uint8x8_t *)v210.i8).u64[0];
      v211 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v209.i8, *(int16x4_t *)v209.i8)), (int8x16_t)vceqzq_s32(v317[6])));
      v212 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v210.i8, *(int16x4_t *)v210.i8)), (int8x16_t)vceqzq_s32(v317[7])));
      v330 = v211;
      v331 = (float32x4_t)v212;
      v211.i32[0] = *(_DWORD *)(v55 + 2716);
      v211.i64[0] = vmovl_u8(*(uint8x8_t *)v211.i8).u64[0];
      v212.i32[0] = *(_DWORD *)(v55 + 2720);
      v212.i64[0] = vmovl_u8(*(uint8x8_t *)v212.i8).u64[0];
      v213 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v211.i8, *(int16x4_t *)v211.i8)), (int8x16_t)vceqzq_s32(v317[8])));
      v214 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v212.i8, *(int16x4_t *)v212.i8)), (int8x16_t)vceqzq_s32(v317[9])));
      v332 = v213;
      v333 = (float32x4_t)v214;
      v213.i32[0] = *(_DWORD *)(v55 + 2724);
      v213.i64[0] = vmovl_u8(*(uint8x8_t *)v213.i8).u64[0];
      v214.i32[0] = *(_DWORD *)(v55 + 2728);
      v214.i64[0] = vmovl_u8(*(uint8x8_t *)v214.i8).u64[0];
      v215 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v213.i8, *(int16x4_t *)v213.i8)), (int8x16_t)vceqzq_s32(v317[10])));
      v216 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v214.i8, *(int16x4_t *)v214.i8)), (int8x16_t)vceqzq_s32(v317[11])));
      v334 = v215;
      v335 = (float32x4_t)v216;
      v215.i32[0] = *(_DWORD *)(v55 + 2732);
      v215.i64[0] = vmovl_u8(*(uint8x8_t *)v215.i8).u64[0];
      v216.i32[0] = *(_DWORD *)(v55 + 2736);
      v216.i64[0] = vmovl_u8(*(uint8x8_t *)v216.i8).u64[0];
      v217 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v215.i8, *(int16x4_t *)v215.i8)), (int8x16_t)vceqzq_s32(v317[12])));
      v218 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v216.i8, *(int16x4_t *)v216.i8)), (int8x16_t)vceqzq_s32(v317[13])));
      v336 = v217;
      v337 = (float32x4_t)v218;
      v217.i32[0] = *(_DWORD *)(v55 + 2740);
      v217.i64[0] = vmovl_u8(*(uint8x8_t *)v217.i8).u64[0];
      v218.i32[0] = *(_DWORD *)(v55 + 2744);
      v218.i64[0] = vmovl_u8(*(uint8x8_t *)v218.i8).u64[0];
      v219 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v217.i8, *(int16x4_t *)v217.i8)), (int8x16_t)vceqzq_s32(v317[14])));
      v220 = vbicq_s8(_Q0, vandq_s8((int8x16_t)vmovl_s16(vtst_s16(*(int16x4_t *)v218.i8, *(int16x4_t *)v218.i8)), (int8x16_t)vceqzq_s32(v317[15])));
      v338 = v219;
      v339 = v220;
      if (*(_DWORD *)(v55 + 2680))
        v221 = 1;
      else
        v221 = *(_BYTE *)(v55 + 2748) == 0;
      v222 = 1.0;
      if (!v221)
        v222 = 0.0;
    }
    v340 = v222;
    if (a13)
    {
      v243 = 0;
      v244 = (uint64_t)a12;
      v245 = (uint64_t)a14;
      do
      {
        v246 = (float32x4_t *)&a12[260 * v243];
        v247 = (float32x4_t *)&a14[260 * v243];
        v248 = 260 * v243 + 260;
        v249 = (unint64_t)&a14[v248];
        v250 = (unint64_t)&a12[v248];
        if ((unint64_t)v246 >= v249 || (unint64_t)v247 >= v250)
        {
          v252 = (float32x4_t)v324;
          *v246 = vmulq_f32((float32x4_t)v324, *v246);
          *v247 = vmulq_f32(v252, *v247);
          v253 = v325;
          v246[1] = vmulq_f32(v325, v246[1]);
          v247[1] = vmulq_f32(v253, v247[1]);
          v254 = (float32x4_t)v326;
          v246[2] = vmulq_f32((float32x4_t)v326, v246[2]);
          v247[2] = vmulq_f32(v254, v247[2]);
          v255 = v327;
          v246[3] = vmulq_f32(v327, v246[3]);
          v247[3] = vmulq_f32(v255, v247[3]);
          v256 = (float32x4_t)v328;
          v246[4] = vmulq_f32((float32x4_t)v328, v246[4]);
          v247[4] = vmulq_f32(v256, v247[4]);
          v257 = v329;
          v246[5] = vmulq_f32(v329, v246[5]);
          v247[5] = vmulq_f32(v257, v247[5]);
          v258 = (float32x4_t)v330;
          v246[6] = vmulq_f32((float32x4_t)v330, v246[6]);
          v247[6] = vmulq_f32(v258, v247[6]);
          v259 = v331;
          v246[7] = vmulq_f32(v331, v246[7]);
          v247[7] = vmulq_f32(v259, v247[7]);
          v260 = (float32x4_t)v332;
          v246[8] = vmulq_f32((float32x4_t)v332, v246[8]);
          v247[8] = vmulq_f32(v260, v247[8]);
          v261 = v333;
          v246[9] = vmulq_f32(v333, v246[9]);
          v247[9] = vmulq_f32(v261, v247[9]);
          v262 = (float32x4_t)v334;
          v246[10] = vmulq_f32((float32x4_t)v334, v246[10]);
          v247[10] = vmulq_f32(v262, v247[10]);
          v263 = v335;
          v246[11] = vmulq_f32(v335, v246[11]);
          v247[11] = vmulq_f32(v263, v247[11]);
          v264 = (float32x4_t)v336;
          v246[12] = vmulq_f32((float32x4_t)v336, v246[12]);
          v247[12] = vmulq_f32(v264, v247[12]);
          v265 = v337;
          v246[13] = vmulq_f32(v337, v246[13]);
          v247[13] = vmulq_f32(v265, v247[13]);
          v266 = (float32x4_t)v338;
          v246[14] = vmulq_f32((float32x4_t)v338, v246[14]);
          v247[14] = vmulq_f32(v266, v247[14]);
          v267 = (float32x4_t)v339;
          v246[15] = vmulq_f32((float32x4_t)v339, v246[15]);
          v247[15] = vmulq_f32(v267, v247[15]);
          v268 = 64;
        }
        else
        {
          v268 = 0;
        }
        v269 = 4 * v268;
        do
        {
          v270 = *(float *)&v324.i32[v269 / 4];
          *(float *)(v244 + v269) = v270 * *(float *)(v244 + v269);
          *(float *)(v245 + v269) = v270 * *(float *)(v245 + v269);
          v269 += 4;
        }
        while (v269 != 260);
        ++v243;
        v245 += 260;
        v244 += 260;
      }
      while (v243 != a13);
    }
  }
  return result;
}

uint64_t webrtc::ResidualEchoEstimator::UpdateReverb(uint64_t result, int a2, _QWORD *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float32x4_t **v10;
  float32x4_t *v11;
  unint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t *v29;
  float v30;
  uint64_t *v31;
  float32x4_t *v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v43;
  BOOL v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  float v54;
  uint64_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  uint64_t v64;
  float v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;

  v5 = result;
  if (a2)
  {
    v6 = a3 + 86;
  }
  else
  {
    v7 = a3[259];
    if (a3[260] == v7)
      goto LABEL_48;
    v6 = (_DWORD *)(v7 + 16);
  }
  v8 = (*v6 + *(_DWORD *)(a4 + 36) + *(_DWORD *)a4 + 1) % *(_DWORD *)a4;
  v9 = *(_QWORD *)(a4 + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a4 + 16) - v9) >> 3) <= v8)
    goto LABEL_48;
  v10 = (float32x4_t **)(v9 + 24 * (int)v8);
  if (v10[1] == *v10)
    v11 = 0;
  else
    v11 = *v10;
  v12 = *(_QWORD *)(result + 608);
  if (v12 >= 2)
  {
    v82 = 0.0;
    v13 = 0uLL;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = v11 + 8;
    v30 = 0.0;
    do
    {
      v13 = vaddq_f32(v29[-8], v13);
      v14 = vaddq_f32(v29[-7], v14);
      v66 = v13;
      v67 = v14;
      v15 = vaddq_f32(v29[-6], v15);
      v16 = vaddq_f32(v29[-5], v16);
      v68 = v15;
      v69 = v16;
      v17 = vaddq_f32(v29[-4], v17);
      v18 = vaddq_f32(v29[-3], v18);
      v70 = v17;
      v71 = v18;
      v19 = vaddq_f32(v29[-2], v19);
      v20 = vaddq_f32(v29[-1], v20);
      v72 = v19;
      v73 = v20;
      v21 = vaddq_f32(*v29, v21);
      v22 = vaddq_f32(v29[1], v22);
      v74 = v21;
      v75 = v22;
      v23 = vaddq_f32(v29[2], v23);
      v24 = vaddq_f32(v29[3], v24);
      v76 = v23;
      v77 = v24;
      v25 = vaddq_f32(v29[4], v25);
      v26 = vaddq_f32(v29[5], v26);
      v78 = v25;
      v79 = v26;
      v27 = vaddq_f32(v29[6], v27);
      v28 = vaddq_f32(v29[7], v28);
      v80 = v27;
      v81 = v28;
      v30 = v29[8].f32[0] + v30;
      v82 = v30;
      v29 = (float32x4_t *)((char *)v29 + 260);
      --v12;
    }
    while (v12);
    v11 = &v66;
  }
  v31 = (uint64_t *)a3[344];
  if ((uint64_t *)a3[345] == v31)
    goto LABEL_48;
  v32 = (float32x4_t *)(result + 1156);
  v33 = *v31;
  v34 = 144;
  if (((*(_BYTE *)(v33 + 8) == 0) & a5) != 0)
    v34 = 148;
  v35 = *(float *)(v33 + v34);
  if (a2)
  {
    result = a3[92];
    if (result)
    {
      v65 = *(float *)(v33 + v34);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      v35 = v65;
      v36 = 628;
      if ((_DWORD)result)
        v36 = 620;
      v37 = (float *)(v5 + v36);
      if (v65 <= 0.0)
        return result;
    }
    else
    {
      v37 = (float *)(v5 + 628);
      if (v35 <= 0.0)
        return result;
    }
    v54 = *v37 * *v37;
    if (v32 >= (float32x4_t *)&v11[16].i32[1] || (unint64_t)v11 >= v5 + 1416)
    {
      v56 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1172), v11[1], v54), v35);
      *v32 = vmulq_n_f32(vmlaq_n_f32(*v32, *v11, v54), v35);
      *(float32x4_t *)(v5 + 1172) = v56;
      v57 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1204), v11[3], v54), v35);
      *(float32x4_t *)(v5 + 1188) = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1188), v11[2], v54), v35);
      *(float32x4_t *)(v5 + 1204) = v57;
      v58 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1236), v11[5], v54), v35);
      *(float32x4_t *)(v5 + 1220) = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1220), v11[4], v54), v35);
      *(float32x4_t *)(v5 + 1236) = v58;
      v59 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1268), v11[7], v54), v35);
      *(float32x4_t *)(v5 + 1252) = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1252), v11[6], v54), v35);
      *(float32x4_t *)(v5 + 1268) = v59;
      v60 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1300), v11[9], v54), v35);
      *(float32x4_t *)(v5 + 1284) = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1284), v11[8], v54), v35);
      *(float32x4_t *)(v5 + 1300) = v60;
      v61 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1332), v11[11], v54), v35);
      *(float32x4_t *)(v5 + 1316) = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1316), v11[10], v54), v35);
      *(float32x4_t *)(v5 + 1332) = v61;
      v62 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1364), v11[13], v54), v35);
      *(float32x4_t *)(v5 + 1348) = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1348), v11[12], v54), v35);
      *(float32x4_t *)(v5 + 1364) = v62;
      v63 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1396), v11[15], v54), v35);
      *(float32x4_t *)(v5 + 1380) = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)(v5 + 1380), v11[14], v54), v35);
      *(float32x4_t *)(v5 + 1396) = v63;
      v55 = 64;
    }
    else
    {
      v55 = 0;
    }
    v64 = v55;
    do
    {
      v32->f32[v64] = v35 * (float)(v32->f32[v64] + (float)(v11->f32[v64] * v54));
      ++v64;
    }
    while (v64 != 65);
    return result;
  }
  v38 = a3[347];
  if (a3[348] == v38)
  {
LABEL_48:
    __break(1u);
    return result;
  }
  if (v35 > 0.0)
  {
    v39 = 0;
    v40 = v38 + 8;
    v41 = result + 1416;
    v43 = (unint64_t)v32 < v38 + 268 && v40 < v41;
    v44 = (unint64_t)v11 >= v41 || v32 >= (float32x4_t *)&v11[16].i32[1];
    if (v44 && !v43)
    {
      v45 = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1172), *(float32x4_t *)(v38 + 24), v11[1]), v35);
      *v32 = vmulq_n_f32(vmlaq_f32(*v32, *(float32x4_t *)(v38 + 8), *v11), v35);
      *(float32x4_t *)(result + 1172) = v45;
      v46 = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1204), *(float32x4_t *)(v38 + 56), v11[3]), v35);
      *(float32x4_t *)(result + 1188) = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1188), *(float32x4_t *)(v38 + 40), v11[2]), v35);
      *(float32x4_t *)(result + 1204) = v46;
      v47 = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1236), *(float32x4_t *)(v38 + 88), v11[5]), v35);
      *(float32x4_t *)(result + 1220) = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1220), *(float32x4_t *)(v38 + 72), v11[4]), v35);
      *(float32x4_t *)(result + 1236) = v47;
      v48 = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1268), *(float32x4_t *)(v38 + 120), v11[7]), v35);
      *(float32x4_t *)(result + 1252) = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1252), *(float32x4_t *)(v38 + 104), v11[6]), v35);
      *(float32x4_t *)(result + 1268) = v48;
      v49 = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1300), *(float32x4_t *)(v38 + 152), v11[9]), v35);
      *(float32x4_t *)(result + 1284) = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1284), *(float32x4_t *)(v38 + 136), v11[8]), v35);
      *(float32x4_t *)(result + 1300) = v49;
      v50 = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1332), *(float32x4_t *)(v38 + 184), v11[11]), v35);
      *(float32x4_t *)(result + 1316) = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1316), *(float32x4_t *)(v38 + 168), v11[10]), v35);
      *(float32x4_t *)(result + 1332) = v50;
      v51 = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1364), *(float32x4_t *)(v38 + 216), v11[13]), v35);
      *(float32x4_t *)(result + 1348) = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1348), *(float32x4_t *)(v38 + 200), v11[12]), v35);
      *(float32x4_t *)(result + 1364) = v51;
      v52 = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1396), *(float32x4_t *)(v38 + 248), v11[15]), v35);
      *(float32x4_t *)(result + 1380) = vmulq_n_f32(vmlaq_f32(*(float32x4_t *)(result + 1380), *(float32x4_t *)(v38 + 232), v11[14]), v35);
      *(float32x4_t *)(result + 1396) = v52;
      v39 = 64;
    }
    v53 = v39;
    do
    {
      v32->f32[v53] = v35 * (float)(v32->f32[v53] + (float)(v11->f32[v53] * *(float *)(v40 + v53 * 4)));
      ++v53;
    }
    while (v53 != 65);
  }
  return result;
}

float *webrtc::`anonymous namespace'::NonLinearEstimate(float *result, uint64_t a2, uint64_t a3, float a4)
{
  float *v4;

  if (a3)
  {
    v4 = (float *)(a2 + 128);
    do
    {
      *(v4 - 32) = *result * a4;
      *(v4 - 31) = result[1] * a4;
      *(v4 - 30) = result[2] * a4;
      *(v4 - 29) = result[3] * a4;
      *(v4 - 28) = result[4] * a4;
      *(v4 - 27) = result[5] * a4;
      *(v4 - 26) = result[6] * a4;
      *(v4 - 25) = result[7] * a4;
      *(v4 - 24) = result[8] * a4;
      *(v4 - 23) = result[9] * a4;
      *(v4 - 22) = result[10] * a4;
      *(v4 - 21) = result[11] * a4;
      *(v4 - 20) = result[12] * a4;
      *(v4 - 19) = result[13] * a4;
      *(v4 - 18) = result[14] * a4;
      *(v4 - 17) = result[15] * a4;
      *(v4 - 16) = result[16] * a4;
      *(v4 - 15) = result[17] * a4;
      *(v4 - 14) = result[18] * a4;
      *(v4 - 13) = result[19] * a4;
      *(v4 - 12) = result[20] * a4;
      *(v4 - 11) = result[21] * a4;
      *(v4 - 10) = result[22] * a4;
      *(v4 - 9) = result[23] * a4;
      *(v4 - 8) = result[24] * a4;
      *(v4 - 7) = result[25] * a4;
      *(v4 - 6) = result[26] * a4;
      *(v4 - 5) = result[27] * a4;
      *(v4 - 4) = result[28] * a4;
      *(v4 - 3) = result[29] * a4;
      *(v4 - 2) = result[30] * a4;
      *(v4 - 1) = result[31] * a4;
      *v4 = result[32] * a4;
      v4[1] = result[33] * a4;
      v4[2] = result[34] * a4;
      v4[3] = result[35] * a4;
      v4[4] = result[36] * a4;
      v4[5] = result[37] * a4;
      v4[6] = result[38] * a4;
      v4[7] = result[39] * a4;
      v4[8] = result[40] * a4;
      v4[9] = result[41] * a4;
      v4[10] = result[42] * a4;
      v4[11] = result[43] * a4;
      v4[12] = result[44] * a4;
      v4[13] = result[45] * a4;
      v4[14] = result[46] * a4;
      v4[15] = result[47] * a4;
      v4[16] = result[48] * a4;
      v4[17] = result[49] * a4;
      v4[18] = result[50] * a4;
      v4[19] = result[51] * a4;
      v4[20] = result[52] * a4;
      v4[21] = result[53] * a4;
      v4[22] = result[54] * a4;
      v4[23] = result[55] * a4;
      v4[24] = result[56] * a4;
      v4[25] = result[57] * a4;
      v4[26] = result[58] * a4;
      v4[27] = result[59] * a4;
      v4[28] = result[60] * a4;
      v4[29] = result[61] * a4;
      v4[30] = result[62] * a4;
      v4[31] = result[63] * a4;
      v4[32] = result[64] * a4;
      v4 += 65;
      --a3;
    }
    while (a3);
  }
  return result;
}

_QWORD *webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate::OnResourceUsageStateMeasured(uint64_t a1, void (****a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  _QWORD *result;
  void (***v8)(_QWORD);
  uint64_t v9;
  uint64_t v10;
  void (***v11)(_QWORD);
  _QWORD *v12;
  char v13;
  char v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, _QWORD **, _QWORD *);
  uint64_t (*v17)(uint64_t **);

  v6 = *(_QWORD *)(a1 + 16);
  if (*result == v6)
  {
    v10 = *(_QWORD *)(a1 + 24);
    if (v10)
    {
      v11 = *a2;
      v12 = v11;
      if (v11)
        (**v11)(v11);
      (*(void (**)(uint64_t, _QWORD **, uint64_t))(*(_QWORD *)v10 + 56))(v10, &v12, a3);
      result = v12;
      if (v12)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  else
  {
    (**(void (***)(uint64_t))a1)(a1);
    v8 = *a2;
    if (v8)
      (**v8)(v8);
    v9 = operator new();
    *(_QWORD *)v9 = a1;
    *(_QWORD *)(v9 + 8) = v8;
    *(_DWORD *)(v9 + 16) = a3;
    v15[0] = v9;
    v16 = absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate::OnResourceUsageStateMeasured(webrtc::scoped_refptr<webrtc::Resource>,webrtc::ResourceUsageState)::$_0>;
    v17 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate::OnResourceUsageStateMeasured(webrtc::scoped_refptr<webrtc::Resource>,webrtc::ResourceUsageState)::$_0 &&>;
    (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v6 + 8))(v6, v15, &v14, &v13);
    return (_QWORD *)v16(1, (_QWORD **)v15, v15);
  }
  return result;
}

_QWORD *`non-virtual thunk to'webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate::OnResourceUsageStateMeasured(uint64_t a1, void (****a2)(_QWORD), uint64_t a3)
{
  return webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate::OnResourceUsageStateMeasured(a1 - 8, a2, a3);
}

void webrtc::ResourceAdaptationProcessor::~ResourceAdaptationProcessor(webrtc::ResourceAdaptationProcessor *this)
{
  uint64_t v2;
  webrtc::ResourceAdaptationProcessor **v3;
  webrtc::ResourceAdaptationProcessor **v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = &off_24C0BB760;
  *((_QWORD *)this + 1) = &unk_24C0BB7B8;
  *((_QWORD *)this + 2) = &unk_24C0BB7E0;
  v2 = *((_QWORD *)this + 22);
  v4 = *(webrtc::ResourceAdaptationProcessor ***)(v2 + 160);
  v3 = *(webrtc::ResourceAdaptationProcessor ***)(v2 + 168);
  if (v4 != v3)
  {
    while (*v4 != (webrtc::ResourceAdaptationProcessor *)((char *)this + 8))
    {
      if (++v4 == v3)
      {
        v4 = *(webrtc::ResourceAdaptationProcessor ***)(v2 + 168);
        break;
      }
    }
  }
  if (v3 == v4)
  {
    __break(1u);
  }
  else
  {
    v5 = (char *)v3 - (char *)(v4 + 1);
    if (v3 != v4 + 1)
      memmove(v4, v4 + 1, (char *)v3 - (char *)(v4 + 1));
    *(_QWORD *)(v2 + 168) = (char *)v4 + v5;
    *(_QWORD *)(*((_QWORD *)this + 4) + 24) = 0;
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*((_QWORD **)this + 30));
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::Resource>,std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::less<webrtc::scoped_refptr<webrtc::Resource>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>>>::destroy(*((_QWORD **)this + 20));
    v6 = (void *)*((_QWORD *)this + 16);
    if (v6)
    {
      *((_QWORD *)this + 17) = v6;
      operator delete(v6);
    }
    v7 = *((_QWORD *)this + 13);
    if (v7)
    {
      v8 = *((_QWORD *)this + 14);
      v9 = (void *)*((_QWORD *)this + 13);
      if (v8 != v7)
      {
        do
        {
          v11 = *(_QWORD *)(v8 - 8);
          v8 -= 8;
          v10 = v11;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        while (v8 != v7);
        v9 = (void *)*((_QWORD *)this + 13);
      }
      *((_QWORD *)this + 14) = v7;
      operator delete(v9);
    }
    pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 40));
    v12 = *((_QWORD *)this + 4);
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

{
  webrtc::ResourceAdaptationProcessor::~ResourceAdaptationProcessor(this);
  JUMPOUT(0x20BD0ADECLL);
}

void `non-virtual thunk to'webrtc::ResourceAdaptationProcessor::~ResourceAdaptationProcessor(webrtc::ResourceAdaptationProcessor *this)
{
  webrtc::ResourceAdaptationProcessor::~ResourceAdaptationProcessor((webrtc::ResourceAdaptationProcessor *)((char *)this - 8));
}

{
  webrtc::ResourceAdaptationProcessor::~ResourceAdaptationProcessor((webrtc::ResourceAdaptationProcessor *)((char *)this - 16));
}

{
  webrtc::ResourceAdaptationProcessor::~ResourceAdaptationProcessor((webrtc::ResourceAdaptationProcessor *)((char *)this - 8));
  JUMPOUT(0x20BD0ADECLL);
}

{
  webrtc::ResourceAdaptationProcessor::~ResourceAdaptationProcessor((webrtc::ResourceAdaptationProcessor *)((char *)this - 16));
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::ResourceAdaptationProcessor::AddResourceLimitationsListener(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[17];
  v4 = a1[18];
  v6 = v5;
  if ((unint64_t)v5 < v4)
  {
    if (v5)
    {
      *(_QWORD *)v5 = a2;
      v7 = v5 + 8;
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  v8 = (char *)a1[16];
  v9 = (v5 - v8) >> 3;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 61)
    goto LABEL_23;
  v11 = v4 - (_QWORD)v8;
  if (v11 >> 2 > v10)
    v10 = v11 >> 2;
  v12 = (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8;
  v13 = 0x1FFFFFFFFFFFFFFFLL;
  if (!v12)
    v13 = v10;
  if (!v13)
  {
LABEL_22:
    __break(1u);
LABEL_23:
    abort();
  }
  if (v13 >> 61)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v14 = 8 * v13;
  v15 = (char *)operator new(8 * v13);
  v16 = &v15[v14];
  v17 = &v15[8 * v9];
  *(_QWORD *)v17 = a2;
  v7 = v17 + 8;
  if (v5 != v8)
  {
    v18 = v5 - v8 - 8;
    if (v18 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v8 - v15) < 0x20)
      goto LABEL_27;
    v19 = (v18 >> 3) + 1;
    v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v6 = &v5[-v20];
    v17 -= v20;
    v21 = &v15[8 * v9 - 16];
    v22 = (__int128 *)(v5 - 16);
    v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *v22;
      *((_OWORD *)v21 - 1) = *(v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 2;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v25 = *((_QWORD *)v6 - 1);
        v6 -= 8;
        *((_QWORD *)v17 - 1) = v25;
        v17 -= 8;
      }
      while (v6 != v8);
    }
    v6 = v8;
  }
  a1[16] = v17;
  a1[17] = v7;
  a1[18] = v16;
  if (v6)
    operator delete(v6);
LABEL_21:
  a1[17] = v7;
}

_QWORD *webrtc::ResourceAdaptationProcessor::RemoveResourceLimitationsListener(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  int64_t v5;

  v2 = result;
  v4 = (char *)result[16];
  v3 = (char *)result[17];
  if (v4 != v3)
  {
    while (*(_QWORD *)v4 != a2)
    {
      v4 += 8;
      if (v4 == v3)
      {
        v4 = (char *)result[17];
        break;
      }
    }
  }
  if (v3 == v4)
  {
    __break(1u);
  }
  else
  {
    v5 = v3 - (v4 + 8);
    if (v3 != v4 + 8)
      result = memmove(v4, v4 + 8, v3 - (v4 + 8));
    v2[17] = &v4[v5];
  }
  return result;
}

void webrtc::ResourceAdaptationProcessor::AddResource(uint64_t a1, void (****a2)(_QWORD))
{
  pthread_mutex_t *v4;
  _QWORD *v5;
  void (***v6)(_QWORD);
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  char v18;

  v4 = (pthread_mutex_t *)(a1 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  v5 = *(_QWORD **)(a1 + 112);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 120))
  {
    v7 = std::vector<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>>>::__push_back_slow_path<webrtc::scoped_refptr<webrtc::RtpTransceiverProxyWithInternal<webrtc::RtpTransceiver>> const&>(a1 + 104, a2);
  }
  else
  {
    if (!v5)
    {
      __break(1u);
      return;
    }
    v6 = *a2;
    *v5 = *a2;
    if (v6)
      (**v6)(v6);
    v7 = v5 + 1;
  }
  *(_QWORD *)(a1 + 112) = v7;
  pthread_mutex_unlock(v4);
  v8 = *(_QWORD *)(a1 + 32);
  if (v8)
    v9 = v8 + 8;
  else
    v9 = 0;
  ((void (*)(_QWORD, uint64_t))(**a2)[5])(*a2, v9);
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    ((void (**)(void **))**a2)[4](&__p);
    rtc::webrtc_logging_impl::Log("\r\t\n\t", v10, v11, v12, v13, v14, v15, v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/resource_adaptation_processor.cc");
    if (v18 < 0)
      operator delete(__p);
  }
}

uint64_t webrtc::ResourceAdaptationProcessor::GetResources@<X0>(webrtc::ResourceAdaptationProcessor *this@<X0>, _QWORD *a2@<X8>)
{
  pthread_mutex_t *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (***v11)(_QWORD);

  v4 = (pthread_mutex_t *)((char *)this + 40);
  pthread_mutex_lock((pthread_mutex_t *)((char *)this + 40));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v5 = *((_QWORD *)this + 13);
  v6 = *((_QWORD *)this + 14);
  v7 = v6 - v5;
  if (v6 != v5)
  {
    if (v7 < 0)
      abort();
    v8 = v7 >> 3;
    v9 = (char *)operator new(v7);
    v10 = 0;
    *a2 = v9;
    a2[2] = &v9[8 * v8];
    do
    {
      v11 = *(void (****)(_QWORD))(v5 + v10);
      *(_QWORD *)&v9[v10] = v11;
      if (v11)
        (**v11)(v11);
      v10 += 8;
    }
    while (v5 + v10 != v6);
    a2[1] = &v9[v10];
  }
  return pthread_mutex_unlock(v4);
}

void webrtc::ResourceAdaptationProcessor::RemoveResource(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  void *__p;
  char v19;

  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 32))(&__p);
    rtc::webrtc_logging_impl::Log("\r\t\n\t", v4, v5, v6, v7, v8, v9, v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/resource_adaptation_processor.cc");
    if (v19 < 0)
      operator delete(__p);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*a2 + 40))(*a2, 0);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  v11 = *(_QWORD **)(a1 + 104);
  v12 = *(_QWORD **)(a1 + 112);
  if (v11 != v12)
  {
    while (*v11 != *a2)
    {
      if (++v11 == v12)
      {
        v11 = *(_QWORD **)(a1 + 112);
        break;
      }
    }
  }
  if (v12 == v11)
  {
    __break(1u);
  }
  else
  {
    v13 = v11 + 1;
    if (v11 + 1 != v12)
    {
      do
      {
        v14 = *(v13 - 1);
        *(v13 - 1) = *v13;
        *v13 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        ++v13;
        ++v11;
      }
      while (v13 != v12);
      v12 = *(_QWORD **)(a1 + 112);
    }
    while (v12 != v11)
    {
      v16 = *--v12;
      v15 = v16;
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    }
    *(_QWORD *)(a1 + 112) = v11;
    pthread_mutex_unlock((pthread_mutex_t *)(a1 + 40));
    v17 = (void (***)(_QWORD))*a2;
    *a2 = 0;
    webrtc::ResourceAdaptationProcessor::RemoveLimitationsImposedByResource((_QWORD *)a1, v17);
    if (v17)
      (*v17)[1](v17);
  }
}

void webrtc::ResourceAdaptationProcessor::RemoveLimitationsImposedByResource(_QWORD *a1, void (***a2)(_QWORD))
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  int v16;
  uint64_t v17;
  char *v18;
  char *i;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  int v37;
  int v38;
  unint64_t v39;
  __n128 v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  webrtc::ResourceAdaptationProcessor *v49;
  uint64_t v50;
  std::string v51;
  std::string v52;
  void (***v53)(_QWORD, __n128);
  void *__p;
  __int128 v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  __n128 v59;
  unint64_t v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;
  unint64_t v64;

  v4 = a1[3];
  {
    if (a2)
      (**a2)(a2);
    __p = a1;
    *(_QWORD *)&v55 = a2;
    *((_QWORD *)&v55 + 1) = absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ResourceAdaptationProcessor::RemoveLimitationsImposedByResource(webrtc::scoped_refptr<webrtc::Resource>)::$_0>;
    v56.n128_u64[0] = (unint64_t)absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ResourceAdaptationProcessor::RemoveLimitationsImposedByResource(webrtc::scoped_refptr<webrtc::Resource>)::$_0 &&>;
    (*(void (**)(uint64_t, void **, __n128 *, std::string *))(*(_QWORD *)v4 + 8))(v4, &__p, &v61, &v52);
    (*((void (**)(uint64_t, void **, void **))&v55 + 1))(1, &__p, &__p);
    return;
  }
  v5 = (uint64_t *)a1[20];
  if (v5)
  {
    v6 = a1 + 20;
    v7 = (_QWORD *)a1[20];
    do
    {
      v8 = v7[4];
      v9 = v8 >= (unint64_t)a2;
      if (v8 >= (unint64_t)a2)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        v6 = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v6 != a1 + 20 && v6[4] <= (unint64_t)a2)
    {
      v11 = (_QWORD *)v6[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        v13 = v6;
        do
        {
          v12 = (_QWORD *)v13[2];
          v14 = *v12 == (_QWORD)v13;
          v13 = v12;
        }
        while (!v14);
      }
      v15 = *((_DWORD *)v6 + 22);
      v16 = *((_DWORD *)v6 + 23);
      if ((_QWORD *)a1[19] == v6)
        a1[19] = v12;
      --a1[21];
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v5, v6);
      v17 = v6[4];
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      operator delete(v6);
      if (a1[21])
      {
        webrtc::ResourceAdaptationProcessor::FindMostLimitedResources((webrtc::ResourceAdaptationProcessor *)&__p, (uint64_t)a1);
        v61 = v56;
        v62 = v57;
        v63 = v58;
        v64 = v59.n128_u64[0];
        v18 = (char *)__p;
        if (__p)
        {
          for (i = (char *)v55; i != v18; i -= 8)
          {
            v21 = *((_QWORD *)i - 1);
            v20 = v21;
            if (v21)
              (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          }
          operator delete(v18);
        }
        if (v16 + v15 > (int)v64 + HIDWORD(v64))
        {
          v22 = (_DWORD *)a1[22];
          (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)v22 + 16))(&v55);
          v24 = v22[10];
          v57 = v61;
          v58 = v62;
          v59 = v63;
          __p = (void *)v24;
          v60 = v64;
          v25 = a1[22];
          v53 = 0;
          v26 = *(_QWORD *)(v25 + 208);
          if (*(_BYTE *)(v25 + 216))
          {
            if (!v61.n128_u8[8] || v57.n128_u64[0] > v26)
            {
              v38 = DWORD1(v55);
              if ((*(_QWORD *)((_BYTE *)&v55 + 4) & 0xFF00000000) != 0)
              {
                *(_BYTE *)(v25 + 48) = 1;
                *(_DWORD *)(v25 + 52) = v38;
                *(_BYTE *)(v25 + 56) = 1;
LABEL_51:
                v39 = v60;
                v40 = v58;
                *(__n128 *)(v25 + 208) = v57;
                *(__n128 *)(v25 + 224) = v40;
                v41 = v59;
                *(__n128 *)(v25 + 240) = v59;
                *(_QWORD *)(v25 + 256) = v39;
                webrtc::VideoStreamAdapter::BroadcastVideoRestrictionsUpdate(v25, v41, v23, &v53);
                if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
                {
                  webrtc::VideoSourceRestrictions::ToString((webrtc::VideoSourceRestrictions *)&v61, &v52);
                  webrtc::VideoAdaptationCounters::ToString((webrtc::VideoAdaptationCounters *)&v64, &v51);
                  rtc::webrtc_logging_impl::Log("\r\t\n\t\n", v42, v43, v44, v45, v46, v47, v48, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/resource_adaptation_processor.cc");
                  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v51.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v52.__r_.__value_.__l.__data_);
                }
                return;
              }
LABEL_56:
              std::__throw_bad_optional_access[abi:sn180100]();
              webrtc::ResourceAdaptationProcessor::FindMostLimitedResources(v49, v50);
              return;
            }
            if (v57.n128_u64[0] >= v26)
              goto LABEL_39;
          }
          else if (!v61.n128_u8[8])
          {
LABEL_39:
            if (*(_BYTE *)(v25 + 56))
              *(_BYTE *)(v25 + 56) = 0;
            goto LABEL_51;
          }
          v37 = DWORD1(v55);
          if ((*(_QWORD *)((_BYTE *)&v55 + 4) & 0xFF00000000) != 0)
          {
            *(_BYTE *)(v25 + 48) = 0;
            *(_DWORD *)(v25 + 52) = v37;
            *(_BYTE *)(v25 + 56) = 1;
            goto LABEL_51;
          }
          goto LABEL_56;
        }
      }
      else
      {
        v27 = a1[22];
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
          rtc::webrtc_logging_impl::Log("\r\t", v28, v29, v30, v31, v32, v33, v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/video_stream_adapter.cc");
        ++*(_DWORD *)(v27 + 40);
        *(_BYTE *)(v27 + 208) = 0;
        *(_BYTE *)(v27 + 216) = 0;
        *(_BYTE *)(v27 + 224) = 0;
        *(_BYTE *)(v27 + 232) = 0;
        *(_BYTE *)(v27 + 240) = 0;
        *(_BYTE *)(v27 + 248) = 0;
        *(_QWORD *)(v27 + 256) = 0;
        if (*(_BYTE *)(v27 + 56))
          *(_BYTE *)(v27 + 56) = 0;
        (*(void (**)(void **__return_ptr))(**(_QWORD **)v27 + 16))(&__p);
        v61.n128_u64[0] = 0;
        webrtc::VideoStreamAdapter::BroadcastVideoRestrictionsUpdate(v27, v36, v35, &v61);
      }
    }
  }
}

void webrtc::ResourceAdaptationProcessor::FindMostLimitedResources(webrtc::ResourceAdaptationProcessor *this, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  void (***v17)(_QWORD);
  _QWORD *v18;
  void (***v19)(_QWORD);
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  void (***v24)(_QWORD);
  _QWORD *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  void (***v32)(_QWORD);
  int64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v51;
  _QWORD *v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[7];
  _BYTE v57[7];
  _BYTE v58[7];
  _BYTE v59[7];
  _BYTE v60[7];
  _BYTE v61[7];

  v2 = *(_QWORD **)(a2 + 152);
  v3 = (_QWORD *)(a2 + 160);
  if (v2 != (_QWORD *)(a2 + 160))
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v54 = 0;
    v55 = 0;
    v53 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v52 = (_QWORD *)(a2 + 160);
    while (1)
    {
      v11 = *((_DWORD *)v2 + 22);
      v10 = *((_DWORD *)v2 + 23);
      if (v11 + v10 <= v5 + v4)
      {
        v16 = v5 == v11 && v4 == v10;
        if (!v16)
          goto LABEL_36;
        if (v9 >= v8)
        {
          v26 = v6;
          v27 = v9 - v7;
          v28 = (v9 - v7) >> 3;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 61)
            abort();
          if ((v8 - v7) >> 2 > v29)
            v29 = (v8 - v7) >> 2;
          if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v29)
          {
LABEL_73:
            __break(1u);
LABEL_74:
            std::__throw_bad_array_new_length[abi:sn180100]();
          }
          if (v29 >> 61)
            goto LABEL_74;
          v51 = 8 * v29;
          v30 = (char *)operator new(8 * v29);
          v31 = &v30[8 * v28];
          v32 = (void (***)(_QWORD))v2[4];
          *(_QWORD *)v31 = v32;
          if (v32)
            (**v32)(v32);
          v33 = v9 - v7;
          if (v9 == v7)
          {
            v36 = &v30[8 * v28];
            v6 = v26;
            v3 = v52;
          }
          else
          {
            v34 = v33 - 8;
            if ((unint64_t)(v33 - 8) < 0x138
              || (v40 = v9 - 8 - v7, &v9[-(v40 & 0xFFFFFFFFFFFFFFF8) - 8] > v9 - 8)
              || &v30[v27 - 8 - (v40 & 0xFFFFFFFFFFFFFFF8)] > &v30[v27 - 8])
            {
              v35 = v9;
              v36 = &v30[8 * v28];
            }
            else
            {
              v41 = v40 & 0xFFFFFFFFFFFFFFF8;
              if (&v9[-v41 - 8] >= v31
                || (v42 = (unint64_t)&v30[v27 - v41 - 8],
                    v35 = v9,
                    v36 = &v30[8 * v28],
                    v42 >= (unint64_t)v9))
              {
                v43 = (v34 >> 3) + 1;
                v44 = 8 * (v43 & 0x3FFFFFFFFFFFFFFCLL);
                v35 = &v9[-v44];
                v36 = &v31[-v44];
                v45 = &v30[8 * v28 - 16];
                v46 = v9 - 16;
                v47 = v43 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v49 = *((_OWORD *)v46 - 1);
                  v48 = *(_OWORD *)v46;
                  *((_OWORD *)v46 - 1) = 0uLL;
                  *(_OWORD *)v46 = 0uLL;
                  *((_OWORD *)v45 - 1) = v49;
                  *(_OWORD *)v45 = v48;
                  v45 -= 32;
                  v46 -= 32;
                  v47 -= 4;
                }
                while (v47);
                if (v43 == (v43 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_52;
              }
            }
            do
            {
              v37 = *((_QWORD *)v35 - 1);
              v35 -= 8;
              *(_QWORD *)v35 = 0;
              *((_QWORD *)v36 - 1) = v37;
              v36 -= 8;
            }
            while (v35 != v7);
LABEL_52:
            v6 = v26;
            v3 = v52;
            do
            {
              v39 = *((_QWORD *)v9 - 1);
              v9 -= 8;
              v38 = v39;
              if (v39)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            }
            while (v9 != v7);
          }
          v8 = &v30[v51];
          v9 = v31 + 8;
          if (v7)
            operator delete(v7);
          v7 = v36;
          v18 = (_QWORD *)v2[1];
          if (v18)
            goto LABEL_37;
          goto LABEL_60;
        }
        if (!v9)
          goto LABEL_73;
        v17 = (void (***)(_QWORD))v2[4];
        *(_QWORD *)v9 = v17;
        if (v17)
          (**v17)(v17);
        v9 += 8;
        v18 = (_QWORD *)v2[1];
        if (v18)
          goto LABEL_37;
      }
      else
      {
        *(_DWORD *)v61 = *(_DWORD *)((char *)v2 + 41);
        *(_DWORD *)&v61[3] = *((_DWORD *)v2 + 11);
        v53 = *((_BYTE *)v2 + 40);
        LOBYTE(v54) = *((_BYTE *)v2 + 48);
        *(_DWORD *)v60 = *(_DWORD *)((char *)v2 + 49);
        *(_DWORD *)&v60[3] = *((_DWORD *)v2 + 13);
        BYTE4(v54) = *((_BYTE *)v2 + 56);
        *(_DWORD *)v59 = *(_DWORD *)((char *)v2 + 57);
        *(_DWORD *)&v59[3] = *((_DWORD *)v2 + 15);
        v12 = *((_BYTE *)v2 + 64);
        *(_DWORD *)&v58[3] = *((_DWORD *)v2 + 17);
        *(_DWORD *)v58 = *(_DWORD *)((char *)v2 + 65);
        v13 = *((_BYTE *)v2 + 72);
        *(_DWORD *)&v57[3] = *((_DWORD *)v2 + 19);
        *(_DWORD *)v57 = *(_DWORD *)((char *)v2 + 73);
        v6 = *((unsigned __int8 *)v2 + 80);
        *(_DWORD *)&v56[3] = *((_DWORD *)v2 + 21);
        *(_DWORD *)v56 = *(_DWORD *)((char *)v2 + 81);
        while (v9 != v7)
        {
          v15 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          v14 = v15;
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        }
        LOBYTE(v55) = v12;
        BYTE4(v55) = v13;
        if (v7 >= v8)
        {
          v20 = (v8 - v7) >> 2;
          if (v20 <= 1)
            v20 = 1;
          v21 = 0x1FFFFFFFFFFFFFFFLL;
          if ((unint64_t)(v8 - v7) < 0x7FFFFFFFFFFFFFF8)
            v21 = v20;
          if (v21 >> 61)
            goto LABEL_74;
          v22 = 8 * v21;
          v23 = (char *)operator new(8 * v21);
          v24 = (void (***)(_QWORD))v2[4];
          *(_QWORD *)v23 = v24;
          if (v24)
            (**v24)(v24);
          v8 = &v23[v22];
          v9 = v23 + 8;
          if (v7)
            operator delete(v7);
          v4 = v10;
          v5 = v11;
          v7 = v23;
          v3 = v52;
LABEL_36:
          v18 = (_QWORD *)v2[1];
          if (v18)
            goto LABEL_37;
          goto LABEL_60;
        }
        if (!v7)
          goto LABEL_73;
        v19 = (void (***)(_QWORD))v2[4];
        *(_QWORD *)v7 = v19;
        if (v19)
          (**v19)(v19);
        v9 = v7 + 8;
        v4 = v10;
        v5 = v11;
        v18 = (_QWORD *)v2[1];
        if (v18)
        {
          do
          {
LABEL_37:
            v25 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
          goto LABEL_3;
        }
      }
      do
      {
LABEL_60:
        v25 = (_QWORD *)v2[2];
        v16 = *v25 == (_QWORD)v2;
        v2 = v25;
      }
      while (!v16);
LABEL_3:
      v2 = v25;
      if (v25 == v3)
        goto LABEL_72;
    }
  }
  v4 = 0;
  v5 = 0;
  LOBYTE(v6) = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v9 = 0;
  v8 = 0;
  v7 = 0;
LABEL_72:
  *(_QWORD *)this = v7;
  *((_QWORD *)this + 1) = v9;
  *((_QWORD *)this + 2) = v8;
  *((_BYTE *)this + 24) = v53;
  *(_DWORD *)((char *)this + 25) = *(_DWORD *)v61;
  *((_DWORD *)this + 7) = *(_DWORD *)&v61[3];
  *((_BYTE *)this + 32) = v54;
  *(_DWORD *)((char *)this + 33) = *(_DWORD *)v60;
  *((_DWORD *)this + 9) = *(_DWORD *)&v60[3];
  *((_BYTE *)this + 40) = BYTE4(v54);
  *((_DWORD *)this + 11) = *(_DWORD *)&v59[3];
  *(_DWORD *)((char *)this + 41) = *(_DWORD *)v59;
  *((_BYTE *)this + 48) = v55;
  *((_DWORD *)this + 13) = *(_DWORD *)&v58[3];
  *(_DWORD *)((char *)this + 49) = *(_DWORD *)v58;
  *((_BYTE *)this + 56) = BYTE4(v55);
  *((_DWORD *)this + 15) = *(_DWORD *)&v57[3];
  *(_DWORD *)((char *)this + 57) = *(_DWORD *)v57;
  *((_BYTE *)this + 64) = v6;
  *((_DWORD *)this + 17) = *(_DWORD *)&v56[3];
  *((_DWORD *)this + 18) = v5;
  *(_DWORD *)((char *)this + 65) = *(_DWORD *)v56;
  *((_DWORD *)this + 19) = v4;
}

void webrtc::ResourceAdaptationProcessor::OnResourceUsageStateMeasured(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  pthread_mutex_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  int data;
  void **v10;
  void (***v11)(_QWORD);
  unsigned int v12;
  void *v13;
  std::string::size_type i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned int v25;
  char *v26;
  char *v27;
  char *v28;
  const char *v29;
  size_t v30;
  _QWORD *v31;
  unsigned int v32;
  char *v33;
  uint64_t v34;
  size_t v35;
  char *v36;
  __int128 v39;
  char *v40;
  char v41;
  std::string *v42;
  size_t v43;
  uint64_t v44;
  void *v45;
  std::string::size_type v46;
  uint64_t v47;
  _QWORD *v48;
  __int128 v49;
  std::string *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  const char *v56;
  size_t v57;
  char *v58;
  uint64_t v59;
  size_t v60;
  char *v61;
  __int128 v64;
  std::string *v65;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  std::string *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int v74;
  size_t v75;
  BOOL v76;
  std::string *v77;
  int v78;
  uint64_t v79;
  __int128 v80;
  __n128 v81;
  size_t size;
  BOOL v83;
  std::string *p_p;
  std::string::size_type v85;
  std::string::size_type v86;
  _BYTE *v87;
  std::string::size_type v88;
  int v89;
  char v90;
  void **v91;
  size_t v92;
  void **v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t **v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  BOOL v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  uint64_t **v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t *v116;
  int v117;
  uint64_t v118;
  __int128 v119;
  __n128 v120;
  size_t v121;
  BOOL v122;
  std::string *v123;
  std::string::size_type v124;
  std::string::size_type v125;
  _BYTE *v126;
  std::string::size_type v127;
  char v128;
  void **v129;
  size_t v130;
  void **v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  std::string::size_type v136;
  std::string::size_type v137;
  _BYTE *v138;
  std::string::size_type v139;
  size_t v140;
  BOOL v141;
  std::string *v142;
  std::string::size_type v143;
  std::string::size_type v144;
  _BYTE *v145;
  std::string::size_type v146;
  uint64_t v147;
  std::string::size_type v148;
  std::string::size_type v149;
  _BYTE *v150;
  char *v151;
  std::string::size_type v152;
  void **v153;
  size_t v154;
  uint64_t v155;
  uint64_t v156;
  void **v157;
  uint64_t v158;
  std::string::size_type v159;
  std::string::size_type v160;
  _BYTE *v161;
  char *v162;
  std::string::size_type v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD v166[4];
  void **v167;
  int v168;
  void *v169[2];
  uint64_t v170;
  void (***v171)(_QWORD, __n128);
  void (***v172)(_QWORD);
  _BYTE __src[32];
  __int128 v174;
  uint64_t v175;
  void (***v176)(_QWORD);
  void *v177[2];
  uint64_t v178;
  std::string __p;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  void *v184;
  uint64_t v185;
  char v186;
  __int128 v187;
  __int128 v188;
  __n128 v189;
  _QWORD v190[3];

  v6 = (pthread_mutex_t *)(a1 + 40);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 40));
  v7 = *(_QWORD **)(a1 + 104);
  v8 = *(_QWORD **)(a1 + 112);
  if (v7 != v8)
  {
    while (*v7 != *a2)
    {
      if (++v7 == v8)
      {
        v7 = *(_QWORD **)(a1 + 112);
        break;
      }
    }
  }
  if (v7 != v8)
  {
    pthread_mutex_unlock(v6);
    data = 3;
    v168 = 3;
    v10 = v169;
    v169[1] = 0;
    v170 = 0;
    v169[0] = 0;
    if (a3 != 1)
    {
      if (a3)
        goto LABEL_194;
      v11 = (void (***)(_QWORD))*a2;
      if (*a2)
        (**v11)(*a2);
      webrtc::VideoStreamAdapter::GetAdaptationDown(*(webrtc::VideoStreamAdapter **)(a1 + 176), (uint64_t)&v184);
      v12 = HIDWORD(v184);
      if (HIDWORD(v184) == 1)
      {
        webrtc::ResourceAdaptationProcessor::FindMostLimitedResources((webrtc::ResourceAdaptationProcessor *)&__p, a1);
        *(_OWORD *)__src = v180;
        *(_OWORD *)&__src[16] = v181;
        v174 = v182;
        v13 = (void *)__p.__r_.__value_.__r.__words[0];
        v175 = v183;
        if (__p.__r_.__value_.__r.__words[0])
        {
          for (i = __p.__r_.__value_.__l.__size_; (void *)i != v13; i -= 8)
          {
            v16 = *(_QWORD *)(i - 8);
            v15 = v16;
            if (v16)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          }
          operator delete(v13);
        }
        v176 = v11;
        if (v11)
        {
          (**v11)(v11);
          webrtc::ResourceAdaptationProcessor::UpdateResourceLimitations(a1, &v176, (__int128 *)__src, &v175);
          (*v11)[1](v11);
        }
        else
        {
          webrtc::ResourceAdaptationProcessor::UpdateResourceLimitations(a1, &v176, (__int128 *)__src, &v175);
        }
        v12 = HIDWORD(v184);
      }
      if (v12)
      {
        *(_QWORD *)&v166[3] = a2;
        v26 = (char *)operator new(0x38uLL);
        v54 = v26;
        v55 = v26 + 54;
        if (v26 <= "Not adapting down because VideoStreamAdapter returned "
          && v55 > "Not adapting down because VideoStreamAdapter returned ")
        {
          goto LABEL_401;
        }
        strcpy(v26, "Not adapting down because VideoStreamAdapter returned ");
        qmemcpy(v166, "treamAdapter retn because VideoSNot adapting dow", 48);
        if (v12 >= 6)
          goto LABEL_402;
        v56 = off_24C0BB860[v12 - 1];
        v26 = (char *)strlen(v56);
        v57 = (size_t)v26;
        if ((unint64_t)v26 <= 1)
        {
          if (v26)
          {
            if (v55 <= v56 && &v26[(_QWORD)v55] > v56)
              goto LABEL_401;
            v26 = (char *)memcpy(v55, v56, (size_t)v26);
            *(_QWORD *)&v69 = v57 + 54;
            *((_QWORD *)&v69 + 1) = 0x8000000000000038;
            a2 = *(_QWORD **)&v166[3];
            v54[v57 + 54] = 0;
            *(_QWORD *)__src = v54;
            *(_OWORD *)&__src[8] = v69;
          }
          else
          {
            a2 = *(_QWORD **)&v166[3];
            *(_QWORD *)__src = v54;
            *(_OWORD *)&__src[8] = xmmword_208F0AC70;
          }
        }
        else
        {
          v167 = v169;
          if ((unint64_t)(v26 - 0x7FFFFFFFFFFFFFC1) < 0x8000000000000040)
            goto LABEL_403;
          v58 = v26 + 54;
          v59 = 110;
          if ((unint64_t)(v26 + 54) > 0x6E)
            v59 = (uint64_t)(v26 + 54);
          v60 = (v59 | 7) + 1;
          v61 = (char *)operator new(v60);
          v26 = v61 + 54;
          if (v54 >= v61 && v26 > v54)
            goto LABEL_401;
          *(_OWORD *)v61 = v166[2];
          *((_OWORD *)v61 + 1) = v166[1];
          *((_OWORD *)v61 + 2) = v166[0];
          *(_QWORD *)(v61 + 46) = *(_QWORD *)"eturned ";
          if (v26 <= v56 && &v26[v57] > v56)
            goto LABEL_401;
          memcpy(v26, v56, v57);
          operator delete(v54);
          *(_QWORD *)&v64 = v57 + 54;
          *((_QWORD *)&v64 + 1) = v60 | 0x8000000000000000;
          a2 = *(_QWORD **)&v166[3];
          v10 = v167;
          v58[(_QWORD)v61] = 0;
          *(_QWORD *)__src = v61;
          *(_OWORD *)&__src[8] = v64;
          if ((SHIBYTE(v64) & 0x80000000) == 0)
          {
            LODWORD(__p.__r_.__value_.__l.__data_) = 2;
            v65 = (std::string *)__src;
            v66 = HIBYTE(v64);
LABEL_113:
            if (v66 > 0x16)
            {
              v71 = (v66 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v66 | 7) != 0x17)
                v71 = v66 | 7;
              v72 = v71 + 1;
              v26 = (char *)operator new(v71 + 1);
              __p.__r_.__value_.__r.__words[2] = v66;
              *(_QWORD *)&v180 = v72 | 0x8000000000000000;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
              v70 = (std::string *)&v26[v66];
              if (v26 > (char *)v65)
                goto LABEL_120;
            }
            else
            {
              v26 = &__p.__r_.__value_.__s.__data_[8];
              BYTE7(v180) = v66;
              v70 = (std::string *)((char *)&__p.__r_.__value_.__r.__words[1] + v66);
              if (&__p.__r_.__value_.__r.__words[1] > (std::string::size_type *)v65)
                goto LABEL_120;
            }
            if (v70 <= v65)
            {
LABEL_120:
              if (v66)
                memmove(v26, v65, v66);
              v70->__r_.__value_.__s.__data_[0] = 0;
              goto LABEL_123;
            }
LABEL_401:
            __break(1u);
            goto LABEL_402;
          }
        }
        v66 = *(_QWORD *)&__src[8];
        if ((*(_QWORD *)&__src[8] & 0x8000000000000000) != 0)
          goto LABEL_401;
        v65 = *(std::string **)__src;
        if (*(_QWORD *)&__src[8])
        {
          if (!*(_QWORD *)__src)
            goto LABEL_401;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 2;
        if (*(_QWORD *)&__src[8] <= 0x7FFFFFFFFFFFFFF7uLL)
          goto LABEL_113;
LABEL_403:
        abort();
      }
      v172 = v11;
      if (v11)
      {
        (**v11)(v11);
        webrtc::ResourceAdaptationProcessor::UpdateResourceLimitations(a1, &v172, &v187, v190);
        (*v11)[1](v11);
        v67 = *(_QWORD *)(a1 + 176);
        (**v11)(v11);
        v171 = (void (***)(_QWORD, __n128))v11;
        if (HIDWORD(v184))
          goto LABEL_143;
      }
      else
      {
        webrtc::ResourceAdaptationProcessor::UpdateResourceLimitations(a1, &v172, &v187, v190);
        v67 = *(_QWORD *)(a1 + 176);
        v171 = 0;
        if (HIDWORD(v184))
          goto LABEL_143;
      }
      v73 = *(_QWORD *)(v67 + 208);
      if (*(_BYTE *)(v67 + 216))
      {
        if (!BYTE8(v187) || (unint64_t)v187 > v73)
        {
          v78 = v185;
          if ((v185 & 0xFF00000000) != 0)
          {
            *(_BYTE *)(v67 + 48) = 1;
            *(_DWORD *)(v67 + 52) = v78;
            *(_BYTE *)(v67 + 56) = 1;
            goto LABEL_142;
          }
LABEL_404:
          std::__throw_bad_optional_access[abi:sn180100]();
          return;
        }
        if ((unint64_t)v187 >= v73)
          goto LABEL_129;
      }
      else if (!BYTE8(v187))
      {
LABEL_129:
        if (*(_BYTE *)(v67 + 56))
          *(_BYTE *)(v67 + 56) = 0;
        goto LABEL_142;
      }
      v74 = v185;
      if ((v185 & 0xFF00000000) != 0)
      {
        *(_BYTE *)(v67 + 48) = 0;
        *(_DWORD *)(v67 + 52) = v74;
        *(_BYTE *)(v67 + 56) = 1;
LABEL_142:
        v79 = v190[0];
        v80 = v188;
        *(_OWORD *)(v67 + 208) = v187;
        *(_OWORD *)(v67 + 224) = v80;
        v81 = v189;
        *(__n128 *)(v67 + 240) = v189;
        *(_QWORD *)(v67 + 256) = v79;
        webrtc::VideoStreamAdapter::BroadcastVideoRestrictionsUpdate(v67, v81, v68, &v171);
LABEL_143:
        if (v11)
          (*v11)[1](v11);
        memset(__src, 0, 24);
        v26 = (char *)operator new(0x38uLL);
        if (v26 <= "Adapted down successfully. Unfiltered adaptations: "
          && v26 + 51 > "Adapted down successfully. Unfiltered adaptations: ")
        {
          goto LABEL_401;
        }
        strcpy(v26, "Adapted down successfully. Unfiltered adaptations: ");
        *(_QWORD *)__src = v26;
        *(_OWORD *)&__src[8] = xmmword_208F0B3E0;
        webrtc::VideoAdaptationCounters::ToString((webrtc::VideoAdaptationCounters *)(*(_QWORD *)(a1 + 176) + 256), &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          size = __p.__r_.__value_.__l.__size_;
          if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_401;
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          v83 = __p.__r_.__value_.__l.__size_ == 0;
          if (__p.__r_.__value_.__l.__size_)
          {
            if (!__p.__r_.__value_.__r.__words[0])
              goto LABEL_401;
          }
        }
        else
        {
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v83 = HIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
          p_p = &__p;
        }
        if (__src[23] >= 0)
          v85 = 22;
        else
          v85 = (*(_QWORD *)&__src[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (__src[23] >= 0)
          v86 = __src[23];
        else
          v86 = *(_QWORD *)&__src[8];
        if (v85 - v86 >= size)
        {
          if (!v83)
          {
            if (__src[23] >= 0)
              v87 = __src;
            else
              v87 = *(_BYTE **)__src;
            v26 = &v87[v86];
            if (&v87[v86] <= (_BYTE *)p_p && &v26[size] > (char *)p_p)
              goto LABEL_401;
            v26 = (char *)memmove(v26, p_p, size);
            v88 = v86 + size;
            if ((__src[23] & 0x80000000) != 0)
              *(_QWORD *)&__src[8] = v86 + size;
            else
              __src[23] = v88 & 0x7F;
            v87[v88] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace((std::string *)__src, v85, v86 + size - v85, v86, v86, 0, size, (const std::string::value_type *)p_p);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v178 = *(_QWORD *)&__src[16];
        *(_OWORD *)v177 = *(_OWORD *)__src;
        memset(__src, 0, 24);
        v90 = HIBYTE(v178);
        if (SHIBYTE(v178) < 0)
        {
          v92 = (size_t)v177[1];
          if (((unint64_t)v177[1] & 0x8000000000000000) != 0)
            goto LABEL_401;
          v91 = (void **)v177[0];
          if (v177[1])
          {
            if (!v177[0])
              goto LABEL_401;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 3;
          if (v177[1] > (void *)0x7FFFFFFFFFFFFFF7)
            goto LABEL_403;
        }
        else
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 3;
          v91 = v177;
          v92 = HIBYTE(v178);
        }
        if (v92 > 0x16)
        {
          v94 = (v92 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v92 | 7) != 0x17)
            v94 = v92 | 7;
          v95 = v94 + 1;
          v26 = (char *)operator new(v94 + 1);
          __p.__r_.__value_.__r.__words[2] = v92;
          *(_QWORD *)&v180 = v95 | 0x8000000000000000;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
          v93 = (void **)&v26[v92];
          if (v26 > (char *)v91)
            goto LABEL_188;
        }
        else
        {
          v26 = &__p.__r_.__value_.__s.__data_[8];
          BYTE7(v180) = v92;
          v93 = (void **)((char *)&__p.__r_.__value_.__r.__words[1] + v92);
          if (&__p.__r_.__value_.__r.__words[1] > (std::string::size_type *)v91)
            goto LABEL_188;
        }
        if (v93 > v91)
          goto LABEL_401;
LABEL_188:
        if (v92)
          memmove(v26, v91, v92);
        *(_BYTE *)v93 = 0;
        if ((v90 & 0x80) == 0 || (operator delete(v177[0]), (__src[23] & 0x80000000) == 0))
        {
LABEL_192:
          data = (int)__p.__r_.__value_.__l.__data_;
          v168 = (int)__p.__r_.__value_.__l.__data_;
          *(_OWORD *)v10 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
          v10[2] = (void *)v180;
          BYTE7(v180) = 0;
          __p.__r_.__value_.__s.__data_[8] = 0;
          if (!v11)
            goto LABEL_194;
          goto LABEL_193;
        }
LABEL_123:
        operator delete(*(void **)__src);
        goto LABEL_192;
      }
      goto LABEL_404;
    }
    v11 = (void (***)(_QWORD))*a2;
    if (*a2)
      (**v11)(*a2);
    v24 = *(_DWORD **)(a1 + 176);
    (*(void (**)(std::string *__return_ptr))(**(_QWORD **)v24 + 16))(&__p);
    ++v24[10];
    webrtc::VideoStreamAdapter::GetAdaptationUp((uint64_t)v24, (uint64_t)&__p, (uint64_t)&v184);
    v25 = HIDWORD(v184);
    v167 = v169;
    if (HIDWORD(v184))
    {
      v26 = (char *)operator new(0x38uLL);
      v27 = v26;
      v28 = v26 + 52;
      if (v26 <= "Not adapting up because VideoStreamAdapter returned "
        && v28 > "Not adapting up because VideoStreamAdapter returned ")
      {
        goto LABEL_401;
      }
      strcpy(v26, "Not adapting up because VideoStreamAdapter returned ");
      qmemcpy(&v166[1], "eamAdapter returbecause VideoStrNot adapting up ", 48);
      if (v25 >= 6)
        goto LABEL_402;
      v29 = off_24C0BB860[v25 - 1];
      v26 = (char *)strlen(v29);
      v30 = (size_t)v26;
      if ((unint64_t)v26 <= 3)
      {
        if (v26)
        {
          if (v28 <= v29 && &v26[(_QWORD)v28] > v29)
            goto LABEL_401;
          v26 = (char *)memcpy(v28, v29, (size_t)v26);
          *(_QWORD *)&v49 = v30 + 52;
          *((_QWORD *)&v49 + 1) = 0x8000000000000038;
          v27[v30 + 52] = 0;
          *(_QWORD *)__src = v27;
          *(_OWORD *)&__src[8] = v49;
          v41 = 0x80;
        }
        else
        {
          *(_QWORD *)__src = v27;
          *(_OWORD *)&__src[8] = xmmword_208F0D7E0;
          v41 = 0x80;
        }
      }
      else
      {
        *(_QWORD *)&v166[0] = v11;
        if ((unint64_t)(v26 - 0x7FFFFFFFFFFFFFC3) < 0x8000000000000040)
          goto LABEL_403;
        v31 = a2;
        v32 = a3;
        v33 = v26 + 52;
        v34 = 110;
        if ((unint64_t)(v26 + 52) > 0x6E)
          v34 = (uint64_t)(v26 + 52);
        v35 = (v34 | 7) + 1;
        v36 = (char *)operator new(v35);
        v26 = v36 + 52;
        if (v27 >= v36 && v26 > v27)
          goto LABEL_401;
        *((_DWORD *)v36 + 12) = 543450478;
        *(_OWORD *)v36 = v166[3];
        *((_OWORD *)v36 + 1) = v166[2];
        *((_OWORD *)v36 + 2) = v166[1];
        if (v26 <= v29 && &v26[v30] > v29)
          goto LABEL_401;
        memcpy(v26, v29, v30);
        operator delete(v27);
        *(_QWORD *)&v39 = v30 + 52;
        *((_QWORD *)&v39 + 1) = v35 | 0x8000000000000000;
        v40 = &v33[(_QWORD)v36];
        a3 = v32;
        a2 = v31;
        v11 = *(void (****)(_QWORD))&v166[0];
        *v40 = 0;
        *(_QWORD *)__src = v36;
        *(_OWORD *)&__src[8] = v39;
        v41 = (v35 | 0x8000000000000000) >> 56;
        if ((v41 & 0x80000000) == 0)
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 2;
          v42 = (std::string *)__src;
          v43 = (v35 | 0x8000000000000000) >> 56;
          goto LABEL_61;
        }
      }
      v43 = *(_QWORD *)&__src[8];
      if ((*(_QWORD *)&__src[8] & 0x8000000000000000) != 0)
        goto LABEL_401;
      v42 = *(std::string **)__src;
      if (*(_QWORD *)&__src[8])
      {
        if (!*(_QWORD *)__src)
          goto LABEL_401;
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      if (*(_QWORD *)&__src[8] > 0x7FFFFFFFFFFFFFF7uLL)
        goto LABEL_403;
LABEL_61:
      if (v43 > 0x16)
      {
        v51 = (v43 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v43 | 7) != 0x17)
          v51 = v43 | 7;
        v52 = v51 + 1;
        v26 = (char *)operator new(v51 + 1);
        __p.__r_.__value_.__r.__words[2] = v43;
        *(_QWORD *)&v180 = v52 | 0x8000000000000000;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        v50 = (std::string *)&v26[v43];
        if (v26 > (char *)v42)
          goto LABEL_68;
      }
      else
      {
        v26 = &__p.__r_.__value_.__s.__data_[8];
        BYTE7(v180) = v43;
        v50 = (std::string *)((char *)&__p.__r_.__value_.__r.__words[1] + v43);
        if (&__p.__r_.__value_.__r.__words[1] > (std::string::size_type *)v42)
        {
LABEL_68:
          if (v43)
            memmove(v26, v42, v43);
          v50->__r_.__value_.__s.__data_[0] = 0;
          if (v41 < 0)
            operator delete(*(void **)__src);
          goto LABEL_281;
        }
      }
      if (v50 > v42)
        goto LABEL_401;
      goto LABEL_68;
    }
    webrtc::ResourceAdaptationProcessor::FindMostLimitedResources((webrtc::ResourceAdaptationProcessor *)&__p, a1);
    v46 = __p.__r_.__value_.__l.__size_;
    v45 = (void *)__p.__r_.__value_.__r.__words[0];
    v47 = *(_QWORD *)(a1 + 176);
    if (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_
      && HIDWORD(v183) + (int)v183 >= *(_DWORD *)(v47 + 256) + *(_DWORD *)(v47 + 260))
    {
      v48 = (_QWORD *)__p.__r_.__value_.__r.__words[0];
      while ((void (***)(_QWORD))*v48 != v11)
      {
        if (++v48 == (_QWORD *)__p.__r_.__value_.__l.__size_)
        {
          v48 = (_QWORD *)__p.__r_.__value_.__l.__size_;
          break;
        }
      }
      if (v48 == (_QWORD *)__p.__r_.__value_.__l.__size_)
      {
        memset(__src, 0, 24);
        if (__src <= "Resource \"" && &__src[10] > "Resource \"")
          goto LABEL_401;
        strcpy(__src, "Resource \"");
        __src[23] = 10;
        v26 = (char *)((char *(*)(std::string *__return_ptr, void (***)(_QWORD)))(*v11)[4])(&__p, v11);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v75 = __p.__r_.__value_.__l.__size_;
          if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_401;
          v77 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v76 = __p.__r_.__value_.__l.__size_ == 0;
          if (__p.__r_.__value_.__l.__size_)
          {
            if (!__p.__r_.__value_.__r.__words[0])
              goto LABEL_401;
          }
        }
        else
        {
          v75 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v76 = HIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
          v77 = &__p;
        }
        if (__src[23] >= 0)
          v136 = 22;
        else
          v136 = (*(_QWORD *)&__src[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (__src[23] >= 0)
          v137 = __src[23];
        else
          v137 = *(_QWORD *)&__src[8];
        if (v136 - v137 >= v75)
        {
          if (!v76)
          {
            if (__src[23] >= 0)
              v138 = __src;
            else
              v138 = *(_BYTE **)__src;
            v26 = &v138[v137];
            if (&v138[v137] <= (_BYTE *)v77 && &v26[v75] > (char *)v77)
              goto LABEL_401;
            v26 = (char *)memmove(v26, v77, v75);
            v139 = v137 + v75;
            if ((__src[23] & 0x80000000) != 0)
              *(_QWORD *)&__src[8] = v137 + v75;
            else
              __src[23] = v139 & 0x7F;
            v138[v139] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace((std::string *)__src, v136, v137 + v75 - v136, v137, v137, 0, v75, (const std::string::value_type *)v77);
        }
        v147 = *(_QWORD *)&__src[16];
        if (__src[23] >= 0)
          v148 = 22;
        else
          v148 = (*(_QWORD *)&__src[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (__src[23] >= 0)
          v149 = __src[23];
        else
          v149 = *(_QWORD *)&__src[8];
        if (v148 - v149 >= 0x24)
        {
          v150 = __src;
          if (__src[23] < 0)
            v150 = *(_BYTE **)__src;
          v151 = &v150[v149];
          if (&v150[v149] <= "\" was not the most limited resource."
            && v151 + 36 > "\" was not the most limited resource.")
          {
            goto LABEL_401;
          }
          qmemcpy(v151, "\" was not the most limited resource.", 36);
          v152 = v149 + 36;
          if (v147 < 0)
            *(_QWORD *)&__src[8] = v149 + 36;
          else
            __src[23] = v152 & 0x7F;
          v150[v152] = 0;
        }
        else
        {
          std::string::__grow_by_and_replace((std::string *)__src, v148, v149 - v148 + 36, v149, v149, 0, 0x24uLL, "\" was not the most limited resource.");
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v178 = *(_QWORD *)&__src[16];
        *(_OWORD *)v177 = *(_OWORD *)__src;
        memset(__src, 0, 24);
        if (SHIBYTE(v178) < 0)
        {
          v154 = (size_t)v177[1];
          if (((unint64_t)v177[1] & 0x8000000000000000) != 0)
            goto LABEL_401;
          v153 = (void **)v177[0];
          if (v177[1])
          {
            if (!v177[0])
              goto LABEL_401;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          if (v177[1] > (void *)0x7FFFFFFFFFFFFFF7)
            goto LABEL_403;
        }
        else
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 0;
          v153 = v177;
          v154 = HIBYTE(v178);
        }
        *(_QWORD *)&v166[3] = HIBYTE(v178);
        if (v154 > 0x16)
        {
          v155 = (v154 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v154 | 7) != 0x17)
            v155 = v154 | 7;
          v156 = v155 + 1;
          v26 = (char *)operator new(v155 + 1);
          __p.__r_.__value_.__r.__words[2] = v154;
          *(_QWORD *)&v180 = v156 | 0x8000000000000000;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        }
        else
        {
          v26 = &__p.__r_.__value_.__s.__data_[8];
          BYTE7(v180) = v154;
        }
        v157 = (void **)&v26[v154];
        if (v26 <= (char *)v153 && v157 > v153)
          goto LABEL_401;
LABEL_396:
        if (v154)
          memmove(v26, v153, v154);
        *(_BYTE *)v157 = 0;
        if ((v166[3] & 0x80) != 0)
        {
          operator delete(v177[0]);
          if ((__src[23] & 0x80000000) != 0)
            operator delete(*(void **)__src);
        }
LABEL_278:
        if (v45)
        {
          while ((void *)v46 != v45)
          {
            v135 = *(_QWORD *)(v46 - 8);
            v46 -= 8;
            v134 = v135;
            if (v135)
              (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
          }
          operator delete(v45);
        }
LABEL_281:
        data = (int)__p.__r_.__value_.__l.__data_;
        v168 = (int)__p.__r_.__value_.__l.__data_;
        *(_OWORD *)v167 = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
        v167[2] = (void *)v180;
        BYTE7(v180) = 0;
        __p.__r_.__value_.__s.__data_[8] = 0;
        if (!v11)
        {
LABEL_194:
          v97 = (uint64_t **)(a1 + 240);
          v96 = *(_QWORD **)(a1 + 240);
          if (v96)
          {
            v98 = *a2;
            v99 = a1 + 240;
            do
            {
              v100 = v96[4];
              v101 = v100 >= v98;
              if (v100 >= v98)
                v102 = v96;
              else
                v102 = v96 + 1;
              if (v101)
                v99 = (uint64_t)v96;
              v96 = (_QWORD *)*v102;
            }
            while (*v102);
            if ((uint64_t **)v99 != v97 && v98 >= *(_QWORD *)(v99 + 32) && *(_DWORD *)(v99 + 40) == data)
            {
LABEL_224:
              if (SHIBYTE(v170) < 0)
                operator delete(v169[0]);
              return;
            }
          }
          if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) != 0)
          {
LABEL_211:
            if (data == 3)
            {
              std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(*(_QWORD **)(a1 + 240));
              *(_QWORD *)(a1 + 240) = 0;
              *(_QWORD *)(a1 + 248) = 0;
              *(_QWORD *)(a1 + 232) = v97;
            }
            else
            {
              v110 = *a2;
              v111 = *v97;
              v112 = (uint64_t **)(a1 + 240);
              if (*v97)
              {
                while (1)
                {
                  while (1)
                  {
                    v112 = (uint64_t **)v111;
                    v113 = v111[4];
                    if (v110 >= v113)
                      break;
                    v111 = *v112;
                    v97 = v112;
                    if (!*v112)
                      goto LABEL_220;
                  }
                  if (v113 >= v110)
                    break;
                  v111 = v112[1];
                  if (!v111)
                  {
                    v97 = v112 + 1;
                    goto LABEL_220;
                  }
                }
              }
              else
              {
LABEL_220:
                v114 = operator new(0x30uLL);
                v114[4] = v110;
                *((_DWORD *)v114 + 10) = data;
                *v114 = 0;
                v114[1] = 0;
                v114[2] = v112;
                *v97 = v114;
                v115 = **(_QWORD **)(a1 + 232);
                if (v115)
                {
                  *(_QWORD *)(a1 + 232) = v115;
                  v116 = *v97;
                }
                else
                {
                  v116 = v114;
                }
                std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 240), v116);
                ++*(_QWORD *)(a1 + 248);
              }
            }
            goto LABEL_224;
          }
          v26 = (char *)(*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)*a2 + 32))(&v184);
          if (a3 <= 1)
          {
            rtc::webrtc_logging_impl::Log("\r\t\n\t\t\t\n", v103, v104, v105, v106, v107, v108, v109, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/resource_adaptation_processor.cc");
            if (v186 < 0)
              operator delete(v184);
            data = v168;
            goto LABEL_211;
          }
LABEL_402:
          rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v26);
        }
LABEL_193:
        (*v11)[1](v11);
        goto LABEL_194;
      }
      if (__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0] >= 9)
      {
        v176 = v11;
        if (v11)
        {
          (**v11)(v11);
          webrtc::ResourceAdaptationProcessor::UpdateResourceLimitations(a1, &v176, &v187, v190);
          v26 = (char *)((uint64_t (*)(_QWORD))(*v11)[1])(v11);
        }
        else
        {
          webrtc::ResourceAdaptationProcessor::UpdateResourceLimitations(a1, &v176, &v187, v190);
        }
        memset(__src, 0, 24);
        if (__src <= "Resource \"" && &__src[10] > "Resource \"")
          goto LABEL_401;
        strcpy(__src, "Resource \"");
        __src[23] = 10;
        v26 = (char *)((char *(*)(std::string *__return_ptr, void (***)(_QWORD)))(*v11)[4])(&__p, v11);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v140 = __p.__r_.__value_.__l.__size_;
          if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
            goto LABEL_401;
          v142 = (std::string *)__p.__r_.__value_.__r.__words[0];
          v141 = __p.__r_.__value_.__l.__size_ == 0;
          if (__p.__r_.__value_.__l.__size_)
          {
            if (!__p.__r_.__value_.__r.__words[0])
              goto LABEL_401;
          }
        }
        else
        {
          v140 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          v141 = HIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
          v142 = &__p;
        }
        if (__src[23] >= 0)
          v143 = 22;
        else
          v143 = (*(_QWORD *)&__src[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (__src[23] >= 0)
          v144 = __src[23];
        else
          v144 = *(_QWORD *)&__src[8];
        if (v143 - v144 >= v140)
        {
          if (!v141)
          {
            if (__src[23] >= 0)
              v145 = __src;
            else
              v145 = *(_BYTE **)__src;
            v26 = &v145[v144];
            if (&v145[v144] <= (_BYTE *)v142 && &v26[v140] > (char *)v142)
              goto LABEL_401;
            v26 = (char *)memmove(v26, v142, v140);
            v146 = v144 + v140;
            if ((__src[23] & 0x80000000) != 0)
              *(_QWORD *)&__src[8] = v144 + v140;
            else
              __src[23] = v146 & 0x7F;
            v145[v146] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace((std::string *)__src, v143, v144 + v140 - v143, v144, v144, 0, v140, (const std::string::value_type *)v142);
        }
        v158 = *(_QWORD *)&__src[16];
        if (__src[23] >= 0)
          v159 = 22;
        else
          v159 = (*(_QWORD *)&__src[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        if (__src[23] >= 0)
          v160 = __src[23];
        else
          v160 = *(_QWORD *)&__src[8];
        if (v159 - v160 >= 0x29)
        {
          v161 = __src;
          if (__src[23] < 0)
            v161 = *(_BYTE **)__src;
          v162 = &v161[v160];
          if (&v161[v160] <= "\" was not the only most limited resource."
            && v162 + 41 > "\" was not the only most limited resource.")
          {
            goto LABEL_401;
          }
          qmemcpy(v162, "\" was not the only most limited resource.", 41);
          v163 = v160 + 41;
          if (v158 < 0)
            *(_QWORD *)&__src[8] = v160 + 41;
          else
            __src[23] = v163 & 0x7F;
          v161[v163] = 0;
        }
        else
        {
          std::string::__grow_by_and_replace((std::string *)__src, v159, v160 - v159 + 41, v160, v160, 0, 0x29uLL, "\" was not the only most limited resource.");
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v178 = *(_QWORD *)&__src[16];
        *(_OWORD *)v177 = *(_OWORD *)__src;
        memset(__src, 0, 24);
        if (SHIBYTE(v178) < 0)
        {
          v154 = (size_t)v177[1];
          if (((unint64_t)v177[1] & 0x8000000000000000) != 0)
            goto LABEL_401;
          v153 = (void **)v177[0];
          if (v177[1])
          {
            if (!v177[0])
              goto LABEL_401;
          }
          LODWORD(__p.__r_.__value_.__l.__data_) = 1;
          if (v177[1] > (void *)0x7FFFFFFFFFFFFFF7)
            goto LABEL_403;
        }
        else
        {
          LODWORD(__p.__r_.__value_.__l.__data_) = 1;
          v153 = v177;
          v154 = HIBYTE(v178);
        }
        *(_QWORD *)&v166[3] = HIBYTE(v178);
        if (v154 > 0x16)
        {
          v164 = (v154 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v154 | 7) != 0x17)
            v164 = v154 | 7;
          v165 = v164 + 1;
          v26 = (char *)operator new(v164 + 1);
          __p.__r_.__value_.__r.__words[2] = v154;
          *(_QWORD *)&v180 = v165 | 0x8000000000000000;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        }
        else
        {
          v26 = &__p.__r_.__value_.__s.__data_[8];
          BYTE7(v180) = v154;
        }
        v157 = (void **)&v26[v154];
        if (v26 <= (char *)v153 && v157 > v153)
          goto LABEL_401;
        goto LABEL_396;
      }
    }
    v176 = v11;
    if (v11)
      (**v11)(v11);
    if (HIDWORD(v184))
    {
LABEL_230:
      if (v11)
        (*v11)[1](v11);
      memset(__src, 0, 24);
      v26 = (char *)operator new(0x38uLL);
      if (v26 <= "Adapted up successfully. Unfiltered adaptations: "
        && v26 + 49 > "Adapted up successfully. Unfiltered adaptations: ")
      {
        goto LABEL_401;
      }
      strcpy(v26, "Adapted up successfully. Unfiltered adaptations: ");
      *(_QWORD *)__src = v26;
      *(_OWORD *)&__src[8] = xmmword_208F0BCB0;
      webrtc::VideoAdaptationCounters::ToString((webrtc::VideoAdaptationCounters *)(*(_QWORD *)(a1 + 176) + 256), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v121 = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__l.__size_ & 0x8000000000000000) != 0)
          goto LABEL_401;
        v123 = (std::string *)__p.__r_.__value_.__r.__words[0];
        v122 = __p.__r_.__value_.__l.__size_ == 0;
        if (__p.__r_.__value_.__l.__size_)
        {
          if (!__p.__r_.__value_.__r.__words[0])
            goto LABEL_401;
        }
      }
      else
      {
        v121 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        v122 = HIBYTE(__p.__r_.__value_.__r.__words[2]) == 0;
        v123 = &__p;
      }
      if (__src[23] >= 0)
        v124 = 22;
      else
        v124 = (*(_QWORD *)&__src[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (__src[23] >= 0)
        v125 = __src[23];
      else
        v125 = *(_QWORD *)&__src[8];
      if (v124 - v125 >= v121)
      {
        if (!v122)
        {
          if (__src[23] >= 0)
            v126 = __src;
          else
            v126 = *(_BYTE **)__src;
          v26 = &v126[v125];
          if (&v126[v125] <= (_BYTE *)v123 && &v26[v121] > (char *)v123)
            goto LABEL_401;
          v26 = (char *)memmove(v26, v123, v121);
          v127 = v125 + v121;
          if ((__src[23] & 0x80000000) != 0)
            *(_QWORD *)&__src[8] = v125 + v121;
          else
            __src[23] = v127 & 0x7F;
          v126[v127] = 0;
        }
      }
      else
      {
        std::string::__grow_by_and_replace((std::string *)__src, v124, v125 + v121 - v124, v125, v125, 0, v121, (const std::string::value_type *)v123);
      }
      LODWORD(v166[3]) = 1;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v178 = *(_QWORD *)&__src[16];
      *(_OWORD *)v177 = *(_OWORD *)__src;
      memset(__src, 0, 24);
      v128 = HIBYTE(v178);
      if (SHIBYTE(v178) < 0)
      {
        v130 = (size_t)v177[1];
        if (((unint64_t)v177[1] & 0x8000000000000000) != 0)
          goto LABEL_401;
        v129 = (void **)v177[0];
        if (v177[1])
        {
          if (!v177[0])
            goto LABEL_401;
        }
        LODWORD(__p.__r_.__value_.__l.__data_) = 3;
        if (v177[1] > (void *)0x7FFFFFFFFFFFFFF7)
          goto LABEL_403;
      }
      else
      {
        LODWORD(__p.__r_.__value_.__l.__data_) = 3;
        v129 = v177;
        v130 = HIBYTE(v178);
      }
      if (v130 > 0x16)
      {
        v132 = (v130 & 0x7FFFFFFFFFFFFFF8) + 8;
        if ((v130 | 7) != 0x17)
          v132 = v130 | 7;
        v133 = v132 + 1;
        v26 = (char *)operator new(v132 + 1);
        __p.__r_.__value_.__r.__words[2] = v130;
        *(_QWORD *)&v180 = v133 | 0x8000000000000000;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        v131 = (void **)&v26[v130];
        if (v26 > (char *)v129)
          goto LABEL_272;
      }
      else
      {
        v26 = &__p.__r_.__value_.__s.__data_[8];
        BYTE7(v180) = v130;
        v131 = (void **)((char *)&__p.__r_.__value_.__r.__words[1] + v130);
        if (&__p.__r_.__value_.__r.__words[1] > (std::string::size_type *)v129)
        {
LABEL_272:
          if (v130)
            memmove(v26, v129, v130);
          *(_BYTE *)v131 = 0;
          if (v128 < 0)
          {
            operator delete(v177[0]);
            if ((__src[23] & 0x80000000) != 0)
              operator delete(*(void **)__src);
          }
          a3 = v166[3];
          goto LABEL_278;
        }
      }
      if (v131 > v129)
        goto LABEL_401;
      goto LABEL_272;
    }
    v53 = *(_QWORD *)(v47 + 208);
    if (*(_BYTE *)(v47 + 216))
    {
      if (!BYTE8(v187) || (unint64_t)v187 > v53)
      {
        v117 = v185;
        if ((v185 & 0xFF00000000) == 0)
          goto LABEL_404;
        *(_BYTE *)(v47 + 48) = 1;
        *(_DWORD *)(v47 + 52) = v117;
        *(_BYTE *)(v47 + 56) = 1;
        goto LABEL_229;
      }
      if ((unint64_t)v187 >= v53)
      {
LABEL_79:
        if (*(_BYTE *)(v47 + 56))
          *(_BYTE *)(v47 + 56) = 0;
LABEL_229:
        v118 = v190[0];
        v119 = v188;
        *(_OWORD *)(v47 + 208) = v187;
        *(_OWORD *)(v47 + 224) = v119;
        v120 = v189;
        *(__n128 *)(v47 + 240) = v189;
        *(_QWORD *)(v47 + 256) = v118;
        webrtc::VideoStreamAdapter::BroadcastVideoRestrictionsUpdate(v47, v120, v44, (void (****)(_QWORD, __n128))&v176);
        goto LABEL_230;
      }
    }
    else if (!BYTE8(v187))
    {
      goto LABEL_79;
    }
    v89 = v185;
    if ((v185 & 0xFF00000000) == 0)
      goto LABEL_404;
    *(_BYTE *)(v47 + 48) = 0;
    *(_DWORD *)(v47 + 52) = v89;
    *(_BYTE *)(v47 + 56) = 1;
    goto LABEL_229;
  }
  if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)1>() & 1) == 0)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 32))(&v184);
    rtc::webrtc_logging_impl::Log("\r\t\n\t", v17, v18, v19, v20, v21, v22, v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/call/adaptation/resource_adaptation_processor.cc");
    if (v186 < 0)
      operator delete(v184);
  }
  pthread_mutex_unlock(v6);
}

void `non-virtual thunk to'webrtc::ResourceAdaptationProcessor::OnResourceUsageStateMeasured(uint64_t a1, _QWORD *a2, unsigned int a3)
{
  webrtc::ResourceAdaptationProcessor::OnResourceUsageStateMeasured(a1 - 16, a2, a3);
}

void webrtc::ResourceAdaptationProcessor::UpdateResourceLimitations(uint64_t a1, void (****a2)(_QWORD), __int128 *a3, _DWORD *a4)
{
  void (***v8)(_QWORD);
  uint64_t *v9;
  _QWORD *v10;
  uint64_t **v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  int v18;
  int v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  void (***v29)(_QWORD);
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  _QWORD *v38;
  _QWORD *v39;
  void (***v40)(_QWORD);
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;

  v8 = *a2;
  v10 = (_QWORD *)(a1 + 160);
  v9 = *(uint64_t **)(a1 + 160);
  if (v9)
  {
    while (1)
    {
      while (1)
      {
        v12 = v9;
        v13 = v9[4];
        if (v13 <= (unint64_t)v8)
          break;
        v9 = (uint64_t *)*v12;
        v11 = (uint64_t **)v12;
        if (!*v12)
          goto LABEL_8;
      }
      if (v13 >= (unint64_t)v8)
        break;
      v9 = (uint64_t *)v12[1];
      if (!v9)
      {
        v11 = (uint64_t **)(v12 + 1);
        goto LABEL_8;
      }
    }
    v14 = (char *)v12;
    v17 = (char *)(v12 + 5);
    v18 = *((unsigned __int8 *)v12 + 48);
    v19 = *((unsigned __int8 *)a3 + 8);
    if (*((_BYTE *)v12 + 48))
      v21 = v19 == 0;
    else
      v21 = 1;
    if (!v21)
    {
LABEL_23:
      if (*(_QWORD *)v17 != *(_QWORD *)a3)
        goto LABEL_36;
      goto LABEL_24;
    }
  }
  else
  {
    v11 = (uint64_t **)(a1 + 160);
    v12 = (uint64_t *)(a1 + 160);
LABEL_8:
    v14 = (char *)operator new(0x60uLL);
    *((_QWORD *)v14 + 4) = v8;
    if (v8)
      (**v8)(v8);
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *(_OWORD *)(v14 + 40) = 0u;
    *(_OWORD *)(v14 + 56) = 0u;
    *(_OWORD *)(v14 + 72) = 0u;
    *((_QWORD *)v14 + 11) = 0;
    *((_QWORD *)v14 + 2) = v12;
    *v11 = (uint64_t *)v14;
    v15 = **(_QWORD **)(a1 + 152);
    v16 = (uint64_t *)v14;
    if (v15)
    {
      *(_QWORD *)(a1 + 152) = v15;
      v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 160), v16);
    ++*(_QWORD *)(a1 + 168);
    v17 = v14 + 40;
    v18 = v14[48];
    v19 = *((unsigned __int8 *)a3 + 8);
    if (v14[48])
      v20 = v19 == 0;
    else
      v20 = 1;
    if (!v20)
      goto LABEL_23;
  }
  if ((v18 != 0) != (v19 != 0))
    goto LABEL_36;
LABEL_24:
  if (v14[64] && *((_BYTE *)a3 + 24))
  {
    if (*((_QWORD *)v14 + 7) != *((_QWORD *)a3 + 2))
      goto LABEL_36;
  }
  else if ((v14[64] != 0) != (*((_BYTE *)a3 + 24) != 0))
  {
    goto LABEL_36;
  }
  if (v14[80] && *((_BYTE *)a3 + 40))
  {
    if (*((double *)v14 + 9) != *((double *)a3 + 4))
      goto LABEL_36;
LABEL_34:
    if (*((_DWORD *)v14 + 23) == a4[1] && *((_DWORD *)v14 + 22) == *a4)
      return;
    goto LABEL_36;
  }
  if ((v14[80] != 0) == (*((_BYTE *)a3 + 40) != 0))
    goto LABEL_34;
LABEL_36:
  v22 = *(_QWORD *)a4;
  v23 = *a3;
  v24 = a3[2];
  *((_OWORD *)v17 + 1) = a3[1];
  *((_OWORD *)v17 + 2) = v24;
  *(_OWORD *)v17 = v23;
  *((_QWORD *)v14 + 11) = v22;
  v42 = 0;
  v43 = 0;
  v41 = &v42;
  v25 = *(_QWORD **)(a1 + 152);
  if (v25 != v10)
  {
    do
    {
      v30 = v25[4];
      if (v30)
        (**(void (***)(_QWORD))v30)(v25[4]);
      v31 = v25[11];
      v32 = v42;
      v33 = &v42;
      v34 = &v42;
      if (v42)
      {
        while (1)
        {
          while (1)
          {
            v34 = (uint64_t **)v32;
            v35 = v32[4];
            if (v30 >= v35)
              break;
            v32 = *v34;
            v33 = v34;
            if (!*v34)
              goto LABEL_54;
          }
          if (v35 >= v30)
            break;
          v32 = v34[1];
          if (!v32)
          {
            v33 = v34 + 1;
            goto LABEL_54;
          }
        }
        if (v30)
          (*(void (**)(unint64_t))(*(_QWORD *)v30 + 8))(v30);
      }
      else
      {
LABEL_54:
        v36 = (uint64_t *)operator new(0x30uLL);
        v36[4] = v30;
        v36[5] = v31;
        *v36 = 0;
        v36[1] = 0;
        v36[2] = (uint64_t)v34;
        *v33 = v36;
        if (*v41)
        {
          v41 = (uint64_t **)*v41;
          v37 = *v33;
        }
        else
        {
          v37 = v36;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v42, v37);
        ++v43;
      }
      v38 = (_QWORD *)v25[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v25[2];
          v20 = *v39 == (_QWORD)v25;
          v25 = v39;
        }
        while (!v20);
      }
      v25 = v39;
    }
    while (v39 != v10);
  }
  v26 = *(uint64_t **)(a1 + 128);
  v27 = *(uint64_t **)(a1 + 136);
  while (v26 != v27)
  {
    v28 = *v26;
    v29 = *a2;
    v40 = v29;
    if (v29)
      (**v29)(v29);
    (*(void (**)(uint64_t, void (****)(_QWORD), uint64_t ***))(*(_QWORD *)v28 + 16))(v28, &v40, &v41);
    if (v40)
      (*v40)[1](v40);
    ++v26;
  }
  std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::Resource>,std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::less<webrtc::scoped_refptr<webrtc::Resource>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>>>::destroy(v42);
}

void webrtc::ResourceAdaptationProcessor::OnVideoSourceRestrictionsUpdated(uint64_t a1, uint64_t a2, _DWORD *a3, void (****a4)(_QWORD), __int128 *a5)
{
  void (***v7)(_QWORD);
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t *i;
  uint64_t *v13;
  uint64_t v14;
  _QWORD **v15;
  _QWORD *v16[2];
  uint64_t v17;
  void (***v18)(_QWORD);

  v7 = *a4;
  if (*a4)
  {
    v18 = *a4;
    (**v7)(v7);
    webrtc::ResourceAdaptationProcessor::UpdateResourceLimitations(a1, &v18, a5, a3);
    (*v7)[1](v7);
  }
  else if (!(*a3 + a3[1]))
  {
    v9 = (_QWORD *)(a1 + 160);
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::Resource>,std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::less<webrtc::scoped_refptr<webrtc::Resource>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>>>::destroy(*(_QWORD **)(a1 + 160));
    v11 = *(_QWORD **)(a1 + 240);
    v10 = (_QWORD *)(a1 + 240);
    *(v10 - 11) = v9;
    *v9 = 0;
    *(v10 - 9) = 0;
    std::__tree<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::__map_value_compare<webrtc::AudioSendStream *,std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>,std::less<webrtc::AudioSendStream *>,true>,std::allocator<std::__value_type<webrtc::AudioSendStream *,webrtc::internal::AudioState::StreamProperties>>>::destroy(v11);
    *(v10 - 1) = v10;
    *v10 = 0;
    v10[1] = 0;
    v13 = (uint64_t *)*(v10 - 14);
    for (i = (uint64_t *)*(v10 - 13); v13 != i; ++v13)
    {
      v14 = *v13;
      v17 = 0;
      v16[0] = 0;
      v16[1] = 0;
      v15 = v16;
      (*(void (**)(uint64_t, uint64_t *, _QWORD ***))(*(_QWORD *)v14 + 16))(v14, &v17, &v15);
      std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::Resource>,std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::less<webrtc::scoped_refptr<webrtc::Resource>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>>>::destroy(v16[0]);
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
}

void `non-virtual thunk to'webrtc::ResourceAdaptationProcessor::OnVideoSourceRestrictionsUpdated(uint64_t a1, uint64_t a2, _DWORD *a3, void (****a4)(_QWORD), __int128 *a5)
{
  webrtc::ResourceAdaptationProcessor::OnVideoSourceRestrictionsUpdated(a1 - 8, a2, a3, a4, a5);
}

uint64_t absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate::OnResourceUsageStateMeasured(webrtc::scoped_refptr<webrtc::Resource>,webrtc::ResourceUsageState)::$_0 &&>(uint64_t **a1)
{
  uint64_t *v1;
  void (***v2)(_QWORD);
  uint64_t v3;
  uint64_t result;
  void (***v5)(_QWORD);

  v1 = *a1;
  v3 = **a1;
  v2 = (void (***)(_QWORD))(*a1)[1];
  v5 = v2;
  if (v2)
    (**v2)(v2);
  (*(void (**)(uint64_t, void (****)(_QWORD), _QWORD))(*(_QWORD *)v3 + 32))(v3, &v5, *((unsigned int *)v1 + 4));
  result = (uint64_t)v5;
  if (v5)
    return ((uint64_t (*)(_QWORD))(*v5)[1])(v5);
  return result;
}

uint64_t absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate::OnResourceUsageStateMeasured(webrtc::scoped_refptr<webrtc::Resource>,webrtc::ResourceUsageState)::$_0>(uint64_t result, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      v4 = v3[1];
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      if (*v3)
        (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t rtc::RefCountedObject<webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 32);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 8;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

void rtc::RefCountedObject<webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

BOOL rtc::RefCountedObject<webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 32));
  return v1 == 1;
}

void `non-virtual thunk to'rtc::RefCountedObject<webrtc::ResourceAdaptationProcessor::ResourceListenerDelegate>::~RefCountedObject()
{
  JUMPOUT(0x20BD0ADECLL);
}

void std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::Resource>,std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::less<webrtc::scoped_refptr<webrtc::Resource>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>>>::destroy(_QWORD *a1)
{
  uint64_t v2;

  if (a1)
  {
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::Resource>,std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::less<webrtc::scoped_refptr<webrtc::Resource>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>>>::destroy(*a1);
    std::__tree<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::__map_value_compare<webrtc::scoped_refptr<webrtc::Resource>,std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>,std::less<webrtc::scoped_refptr<webrtc::Resource>>,true>,std::allocator<std::__value_type<webrtc::scoped_refptr<webrtc::Resource>,webrtc::VideoStreamAdapter::RestrictionsWithCounters>>>::destroy(a1[1]);
    v2 = a1[4];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    operator delete(a1);
  }
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,webrtc::ResourceAdaptationProcessor::RemoveLimitationsImposedByResource(webrtc::scoped_refptr<webrtc::Resource>)::$_0 &&>(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *a1;
  v1 = a1[1];
  if (!v1)
    return webrtc::ResourceAdaptationProcessor::RemoveLimitationsImposedByResource(*a1, 0);
  (**(void (***)(_QWORD))v1)(a1[1]);
  webrtc::ResourceAdaptationProcessor::RemoveLimitationsImposedByResource(v2, v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

uint64_t absl::internal_any_invocable::LocalManagerNontrivial<webrtc::ResourceAdaptationProcessor::RemoveLimitationsImposedByResource(webrtc::scoped_refptr<webrtc::Resource>)::$_0>(char a1, __int128 *a2, _OWORD *a3)
{
  __int128 v3;
  uint64_t result;

  if ((a1 & 1) == 0)
  {
    v3 = *a2;
    *((_QWORD *)a2 + 1) = 0;
    *a3 = v3;
  }
  result = *((_QWORD *)a2 + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void dcsctp::RestartOfAnAssociationWithNewAddressesCause::~RestartOfAnAssociationWithNewAddressesCause(dcsctp::RestartOfAnAssociationWithNewAddressesCause *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0BB898;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0BB898;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::RestartOfAnAssociationWithNewAddressesCause::SerializeTo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  char *v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  const void *v17;
  size_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
  v11 = *(char **)a2;
  v12 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  v13 = v10 + 4;
  v14 = v12 + v10 + 4;
  if (v12 >= v14)
  {
    if (v12 > v14)
      *(_QWORD *)(a2 + 8) = &v11[v14];
  }
  else
  {
    std::vector<unsigned char>::__append((char **)a2, v10 + 4);
    v11 = *(char **)a2;
  }
  v15 = &v11[v12];
  *(_WORD *)v15 = 2816;
  v15[2] = HIBYTE(v13);
  v15[3] = v13;
  if (v10 >= 0xFFFFFFFFFFFFFFFCLL)
  {
    rtc::webrtc_checks_impl::FatalLog("Source/webrtc/net/dcsctp/packet/bounded_byte_writer.h", 59, "data.size() >= FixedSize", _ZZN3rtc18webrtc_checks_impl11LogStreamerIJEE4CallIJEEEvPKciS5_DpRKT_E1t, a5, a6, a7, a8, v21);
    dcsctp::RestartOfAnAssociationWithNewAddressesCause::ToString(v20);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    if (v16)
      v17 = *(const void **)(a1 + 8);
    else
      v17 = 0;
    if (v10 >= v16)
      v18 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
    else
      v18 = v10;
    if (v17)
      v19 = v18 == 0;
    else
      v19 = 1;
    if (!v19)
      memcpy((void *)(*(_QWORD *)a2 + v12 + 4), v17, v18);
  }
}

char *dcsctp::RestartOfAnAssociationWithNewAddressesCause::ToString@<X0>(uint64_t a1@<X8>)
{
  char *result;

  result = (char *)operator new(0x30uLL);
  *(_QWORD *)a1 = result;
  *(_OWORD *)(a1 + 8) = xmmword_208F094F0;
  if (result <= "Restart of an Association with New Addresses"
    && result + 44 > "Restart of an Association with New Addresses")
  {
    __break(1u);
  }
  else
  {
    strcpy(result, "Restart of an Association with New Addresses");
  }
  return result;
}

uint64_t dcsctp::RetransmissionQueue::RetransmissionQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t *a11, char a12, char a13)
{
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)a1 = a4;
  v17 = *(_OWORD *)a11;
  v18 = *((_OWORD *)a11 + 1);
  *(_OWORD *)(a1 + 40) = *((_OWORD *)a11 + 2);
  *(_OWORD *)(a1 + 24) = v18;
  *(_OWORD *)(a1 + 8) = v17;
  v19 = *((_OWORD *)a11 + 3);
  v20 = *((_OWORD *)a11 + 4);
  v21 = *((_OWORD *)a11 + 5);
  *(_OWORD *)(a1 + 104) = *((_OWORD *)a11 + 6);
  *(_OWORD *)(a1 + 88) = v21;
  *(_OWORD *)(a1 + 72) = v20;
  *(_OWORD *)(a1 + 56) = v19;
  v22 = *((_OWORD *)a11 + 7);
  v23 = *((_OWORD *)a11 + 8);
  v24 = *((_OWORD *)a11 + 9);
  *(_OWORD *)(a1 + 168) = *((_OWORD *)a11 + 10);
  *(_OWORD *)(a1 + 152) = v24;
  *(_OWORD *)(a1 + 136) = v23;
  *(_OWORD *)(a1 + 120) = v22;
  *(_QWORD *)(a1 + 184) = (unint64_t)(float)((float)a11[2] * 0.9);
  *(_BYTE *)(a1 + 192) = a12;
  *(_QWORD *)(a1 + 200) = a2;
  *(_QWORD *)(a1 + 208) = a3;
  v25 = 16;
  if (a13)
    v25 = 20;
  *(_QWORD *)(a1 + 216) = v25;
  v26 = *(_QWORD *)(a8 + 24);
  if (!v26)
  {
    *(_QWORD *)(a1 + 248) = 0;
    v27 = a10;
    v28 = *(_QWORD *)(a9 + 24);
    if (v28)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v26 == a8)
  {
    *(_QWORD *)(a1 + 248) = a1 + 224;
    (*(void (**)(_QWORD))(**(_QWORD **)(a8 + 24) + 24))(*(_QWORD *)(a8 + 24));
    v27 = a10;
    v28 = *(_QWORD *)(a9 + 24);
    if (v28)
      goto LABEL_8;
LABEL_11:
    *(_QWORD *)(a1 + 280) = 0;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 248) = v26;
  *(_QWORD *)(a8 + 24) = 0;
  v27 = a10;
  v28 = *(_QWORD *)(a9 + 24);
  if (!v28)
    goto LABEL_11;
LABEL_8:
  if (v28 == a9)
  {
    *(_QWORD *)(a1 + 280) = a1 + 256;
    (*(void (**)(_QWORD))(**(_QWORD **)(a9 + 24) + 24))(*(_QWORD *)(a9 + 24));
  }
  else
  {
    *(_QWORD *)(a1 + 280) = v28;
    *(_QWORD *)(a9 + 24) = 0;
  }
LABEL_13:
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a1 + 24) * *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 320) = a6;
  *(_BYTE *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 328) = a6;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 360) = 0;
  v29 = *(_QWORD *)(a1 + 216);
  v30 = (a5 - 1);
  *(_QWORD *)(a1 + 288) = v27;
  *(_QWORD *)(a1 + 296) = v30;
  *(_DWORD *)(a1 + 304) = v30;
  *(_BYTE *)(a1 + 308) = 1;
  *(_QWORD *)(a1 + 376) = a7;
  *(_QWORD *)(a1 + 384) = v29;
  *(_QWORD *)(a1 + 424) = a1 + 400;
  *(_QWORD *)(a1 + 392) = v30;
  *(_QWORD *)(a1 + 400) = &off_24C0BB8C8;
  *(_QWORD *)(a1 + 408) = a1;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = a1 + 504;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 520) = a1 + 528;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  return a1;
}

uint64_t dcsctp::RetransmissionQueue::HandleSack(dcsctp::RetransmissionQueue *this, Timestamp a2, const dcsctp::SackChunk *a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int16 *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  dcsctp::Timer *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v50;
  dcsctp::RetransmissionQueue *v51;
  unint64_t v52;
  unint64_t v53;
  char v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;

  v5 = *((_DWORD *)a3 + 2);
  v6 = v5;
  v7 = v5;
  if (*((_BYTE *)this + 308))
  {
    v8 = *((_DWORD *)this + 76);
    v9 = v5 >= v8;
    v10 = v5 - v8;
    v11 = (_DWORD)v10 != 0 && v9;
    if ((_DWORD)v10 != 0x80000000)
      v11 = (int)v10 >= 0;
    if (!v11)
      v10 |= 0xFFFFFFFF00000000;
    v7 = v10 + *((_QWORD *)this + 37);
  }
  v12 = *((_QWORD *)this + 49);
  if (v7 < v12)
    return 0;
  v13 = *((int *)this + 118) + v12;
  if (v7 > v13)
    return 0;
  if (*((_BYTE *)this + 308))
  {
    v15 = *((_DWORD *)this + 76);
    v9 = v5 >= v15;
    v16 = v5 - v15;
    v17 = (_DWORD)v16 != 0 && v9;
    if ((_DWORD)v16 != 0x80000000)
      v17 = (int)v16 >= 0;
    if (!v17)
      v16 |= 0xFFFFFFFF00000000;
    v6 = v16 + *((_QWORD *)this + 37);
  }
  v18 = *((_QWORD *)this + 60);
  *((_QWORD *)this + 37) = v6;
  *((_DWORD *)this + 76) = v5;
  *((_BYTE *)this + 308) = 1;
  if (*((_QWORD *)a3 + 3) == *((_QWORD *)a3 + 2) && v6 > v12 && v13 + 1 > v6)
  {
    v20 = *((_QWORD *)this + 58) + ~(_DWORD)v12 + (int)v6;
    v21 = *(_QWORD *)(*((_QWORD *)this + 55) + 8 * (v20 / 0x2E));
    v22 = v20 % 0x2E;
    if (!*(_WORD *)(v21 + 88 * v22 + 22) && a2.var0 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v47 = *(_QWORD *)(v21 + 88 * v22 + 8);
      v48 = 0x8000000000000000;
      if (v47 != 0x8000000000000000)
      {
        if (v47 != 0x7FFFFFFFFFFFFFFFLL && a2.var0 != 0x8000000000000000)
          v48 = a2.var0 - v47;
        if (v48 + 0x7FFFFFFFFFFFFFFFLL <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v53 = v48;
          v50 = *((_QWORD *)this + 31);
          if (!v50)
            goto LABEL_84;
          (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v50 + 48))(v50, &v53);
        }
      }
    }
  }
  if (*((_BYTE *)this + 368))
  {
    if (*((_QWORD *)this + 45) <= v6)
    {
      v23 = 0;
      *((_BYTE *)this + 368) = 0;
    }
    else
    {
      v23 = 1;
    }
  }
  else
  {
    v23 = 0;
  }
  v24 = *((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2);
  if (v24)
    v25 = (unsigned __int16 *)*((_QWORD *)a3 + 2);
  else
    v25 = 0;
  dcsctp::OutstandingData::HandleSack((uint64_t)this + 384, v6, v25, v24 >> 2, v23, (uint64_t)&v53);
  v26 = v55;
  v27 = v56;
  if (v55 != v56)
  {
    v28 = v55;
    do
    {
      v29 = *v28++;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)this + 184))(*(_QWORD *)this, v29);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)this + 192))(*(_QWORD *)this, v29);
    }
    while (v28 != v27);
  }
  v30 = v57;
  v31 = v58;
  if (v57 != v58)
  {
    v32 = v57;
    do
    {
      v33 = *v32++;
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)this + 176))(*(_QWORD *)this, v33, 1);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)this + 192))(*(_QWORD *)this, v33);
    }
    while (v32 != v31);
  }
  v34 = *((unsigned int *)a3 + 3);
  v35 = *((_QWORD *)this + 60);
  v9 = v34 >= v35;
  v36 = v34 - v35;
  if (!v9)
    v36 = 0;
  *((_QWORD *)this + 40) = v36;
  if (v6 > v12)
  {
    v37 = *((_QWORD *)this + 36);
    if (*(_BYTE *)(v37 + 156))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v37 + 136) + 24))(*(_QWORD *)(v37 + 136));
      *(_DWORD *)(v37 + 160) = 0;
      *(_BYTE *)(v37 + 156) = 0;
    }
    v38 = *((_QWORD *)this + 3);
    v39 = v38 + v18;
    v40 = *((_QWORD *)this + 39);
    if (v40 <= *((_QWORD *)this + 41))
    {
      if (v39 >= v40 && !*((_BYTE *)this + 368))
      {
        if (v38 >= v53)
          v38 = v53;
        goto LABEL_56;
      }
    }
    else
    {
      v41 = *((_QWORD *)this + 42) + v53;
      *((_QWORD *)this + 42) = v41;
      v9 = v41 >= v40;
      v42 = v41 - v40;
      if (v9 && v39 >= v40)
      {
        *((_QWORD *)this + 42) = v42;
LABEL_56:
        *((_QWORD *)this + 39) = v38 + v40;
      }
    }
  }
  if (v54 && !*((_BYTE *)this + 368))
  {
    v45 = *((_QWORD *)this + 39) >> 1;
    if (v45 <= *((_QWORD *)this + 3) * *((_QWORD *)this + 17))
      v45 = *((_QWORD *)this + 3) * *((_QWORD *)this + 17);
    *((_QWORD *)this + 39) = v45;
    *((_QWORD *)this + 41) = v45;
    *((_QWORD *)this + 42) = 0;
    v46 = *((int *)this + 118) + *((_QWORD *)this + 49);
    *((_BYTE *)this + 368) = 1;
    *((_QWORD *)this + 45) = v46;
    if (!v53)
      goto LABEL_62;
  }
  else if (!v53)
  {
    goto LABEL_62;
  }
  v43 = *((_QWORD *)this + 35);
  if (!v43)
  {
LABEL_84:
    v51 = (dcsctp::RetransmissionQueue *)std::__throw_bad_function_call[abi:sn180100]();
    return dcsctp::RetransmissionQueue::GetChunksForFastRetransmit(v51, v52);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 48))(v43);
LABEL_62:
  if (*((_QWORD *)this + 59))
  {
    v44 = (dcsctp::Timer *)*((_QWORD *)this + 36);
    if (!*((_BYTE *)v44 + 156))
      dcsctp::Timer::Start(v44);
  }
  if (v30)
    operator delete(v30);
  if (v26)
    operator delete(v26);
  return 1;
}

void dcsctp::RetransmissionQueue::GetChunksForFastRetransmit(int64x2_t *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  dcsctp::Timer *v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  unint64_t v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  char *v25;
  __int128 v26;

  dcsctp::OutstandingData::ExtractChunksThatCanFit(this + 24, (int64x2_t *)this[31].i64, a2, (uint64_t)&v25);
  if (this[32].i64[0])
  {
    std::set<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>>::insert[abi:sn180100]<std::__tree_const_iterator<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,std::__tree_node<dcsctp::UnwrappedSequenceNumber<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>>,void *> *,long>>(&this[32].i64[1], (_QWORD *)this[31].i64[0], &this[31].i64[1]);
    std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)this[31].i64, (_QWORD *)this[31].i64[1]);
    this[31].i64[1] = 0;
    this[32].i64[0] = 0;
    this[31].i64[0] = (uint64_t)&this[31].i64[1];
  }
  v5 = v25;
  *(_QWORD *)a3 = v25;
  v6 = (char *)v26;
  *(_OWORD *)(a3 + 8) = v26;
  v7 = v6;
  v8 = v6 - v5;
  if (v6 != v5)
  {
    if (*(_DWORD *)v5 == this[24].i32[2] + 1)
    {
      v9 = this[18].i64[0];
      if (*(_BYTE *)(v9 + 156))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 136) + 24))(*(_QWORD *)(v9 + 136));
        *(_DWORD *)(v9 + 160) = 0;
        *(_BYTE *)(v9 + 156) = 0;
      }
    }
    v10 = (dcsctp::Timer *)this[18].i64[0];
    if (*((_BYTE *)v10 + 156))
    {
      v11 = this[13].i64[1] + 3;
      v12 = v8 - 56;
      if ((unint64_t)(v8 - 56) < 0x38)
      {
LABEL_9:
        v13 = 0;
        v14 = v5;
        do
        {
LABEL_14:
          v13 += (v11 - *((_DWORD *)v14 + 6) + *((_DWORD *)v14 + 8)) & 0xFFFFFFFC;
          v14 += 56;
        }
        while (v14 != v7);
LABEL_15:
        v24 = this[22].i64[0] + v13;
        ++this[21].i64[1];
        this[22].i64[0] = v24;
        return;
      }
    }
    else
    {
      dcsctp::Timer::Start(v10);
      v11 = this[13].i64[1] + 3;
      v12 = v8 - 56;
      if ((unint64_t)(v8 - 56) < 0x38)
        goto LABEL_9;
    }
    v15 = 0;
    v16 = 0;
    v17 = v12 / 0x38 + 1;
    v14 = &v5[56 * (v17 & 0xFFFFFFFFFFFFFFELL)];
    v18 = (int *)(v5 + 88);
    v19 = v17 & 0xFFFFFFFFFFFFFFELL;
    do
    {
      v20 = *(v18 - 16);
      v21 = *(v18 - 2);
      v22 = *(v18 - 14);
      v23 = *v18;
      v18 += 28;
      v15 += (v11 - v20 + v22) & 0xFFFFFFFC;
      v16 += (v11 - v21 + v23) & 0xFFFFFFFC;
      v19 -= 2;
    }
    while (v19);
    v13 = v16 + v15;
    if (v17 == (v17 & 0xFFFFFFFFFFFFFFELL))
      goto LABEL_15;
    goto LABEL_14;
  }
  __break(1u);
}

void dcsctp::RetransmissionQueue::GetChunksToSend(int64x2_t *this@<X0>, Timestamp a2@<0:X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  char v33;
  int v34;
  unint64_t v35;
  char v36;
  char *v37;
  dcsctp::Timer *v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  void *__p[2];
  uint64_t v43;
  __int16 v44;
  char v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  v7 = this[30].u64[0];
  v8 = this[19].u64[1];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v7 && v10 >= this[20].i64[0])
    v10 = this[20].u64[0];
  if (v10 >= a3)
    v10 = a3;
  v11 = v10 & 0xFFFFFFFFFFFFFFFCLL;
  dcsctp::OutstandingData::ExtractChunksThatCanFit(this + 24, &this[32].i64[1], v10 & 0xFFFFFFFFFFFFFFFCLL, (uint64_t)&v40);
  v12 = v40;
  *(_QWORD *)a4 = v40;
  v13 = v41;
  *(_OWORD *)(a4 + 8) = v41;
  if (v12 == v13)
  {
    v14 = this[13].u64[1];
    if (v11 > v14)
      goto LABEL_20;
    goto LABEL_40;
  }
  v14 = this[13].u64[1];
  v15 = v14 + 3;
  v16 = v13 - v12 - 56;
  if (v16 < 0x38)
  {
    v17 = 0;
    v18 = v12;
    do
    {
LABEL_16:
      v17 += (v15 - *(_DWORD *)(v18 + 24) + *(_DWORD *)(v18 + 32)) & 0xFFFFFFFC;
      v18 += 56;
    }
    while (v18 != v13);
    goto LABEL_17;
  }
  v19 = 0;
  v20 = 0;
  v21 = v16 / 0x38 + 1;
  v18 = v12 + 56 * (v21 & 0xFFFFFFFFFFFFFFELL);
  v22 = (int *)(v12 + 88);
  v23 = v21 & 0xFFFFFFFFFFFFFFELL;
  do
  {
    v24 = *(v22 - 16);
    v25 = *(v22 - 2);
    v26 = *(v22 - 14);
    v27 = *v22;
    v22 += 28;
    v19 += (v15 - v24 + v26) & 0xFFFFFFFC;
    v20 += (v15 - v25 + v27) & 0xFFFFFFFC;
    v23 -= 2;
  }
  while (v23);
  v17 = v20 + v19;
  if (v21 != (v21 & 0xFFFFFFFFFFFFFFELL))
    goto LABEL_16;
LABEL_17:
  v11 -= v17;
  v28 = this[22].i64[0] + v17;
  ++this[21].i64[1];
  this[22].i64[0] = v28;
  if (v11 > v14)
  {
    while (1)
    {
LABEL_20:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, int64_t, unint64_t))(*(_QWORD *)this[23].i64[1]
                                                                                               + 16))(&v40, this[23].i64[1], a2.var0, v11 - v14);
      if (!v49)
        goto LABEL_40;
      v29 = ((char *)__p[1] + this[13].i64[1] - (char *)__p[0] + 3) & 0xFFFFFFFFFFFFFFFCLL;
      this[20].i64[0] -= v29;
      v30 = this[12].i8[0] ? v47 : 0x7FFFFFFFFFFFFFFFLL;
      v31 = this[12].i8[0] ? v46 : -1;
      v32 = dcsctp::OutstandingData::Insert(this + 24, v40, (__int16 *)&v41, a2.var0, v31, v30, v48);
      if (v33)
        break;
LABEL_37:
      if (v49 && __p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v11 -= v29;
      v14 = this[13].u64[1];
      if (v11 <= v14)
        goto LABEL_40;
    }
    if (!v49)
      goto LABEL_44;
    v34 = v32;
    if (v48)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)this->i64[0] + 168))(this->i64[0]);
      v39 = v34;
      if (!v49)
        goto LABEL_44;
      v35 = *(_QWORD *)(a4 + 8);
      if (v35 < *(_QWORD *)(a4 + 16))
      {
LABEL_32:
        if (!v35)
        {
LABEL_44:
          __break(1u);
          return;
        }
        *(_DWORD *)v35 = v34;
        *(_OWORD *)(v35 + 8) = v41;
        *(_QWORD *)(v35 + 32) = 0;
        *(_QWORD *)(v35 + 40) = 0;
        *(_QWORD *)(v35 + 24) = 0;
        *(_OWORD *)(v35 + 24) = *(_OWORD *)__p;
        *(_QWORD *)(v35 + 40) = v43;
        __p[0] = 0;
        __p[1] = 0;
        v43 = 0;
        v36 = v45;
        *(_WORD *)(v35 + 48) = v44;
        *(_BYTE *)(v35 + 50) = v36;
        v37 = (char *)(v35 + 56);
        goto LABEL_36;
      }
    }
    else
    {
      v39 = v32;
      v35 = *(_QWORD *)(a4 + 8);
      if (v35 < *(_QWORD *)(a4 + 16))
        goto LABEL_32;
    }
    v37 = std::vector<std::pair<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data>>::__emplace_back_slow_path<webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,dcsctp::Data>((void **)a4, &v39, (uint64_t)&v41);
LABEL_36:
    *(_QWORD *)(a4 + 8) = v37;
    goto LABEL_37;
  }
LABEL_40:
  if (*(_QWORD *)a4 != *(_QWORD *)(a4 + 8))
  {
    v38 = (dcsctp::Timer *)this[18].i64[0];
    if (!*((_BYTE *)v38 + 156))
      dcsctp::Timer::Start(v38);
  }
}

void std::__function::__func<dcsctp::RetransmissionQueue::RetransmissionQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,unsigned long,dcsctp::SendQueue &,std::function<void ()(webrtc::TimeDelta)>,std::function<void ()(void)>,dcsctp::Timer &,dcsctp::DcSctpOptions const&,BOOL,BOOL)::$_0,std::allocator<dcsctp::RetransmissionQueue::RetransmissionQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,unsigned long,dcsctp::SendQueue &,std::function<void ()(webrtc::TimeDelta)>,std::function<void ()(void)>,dcsctp::Timer &,dcsctp::DcSctpOptions const&,BOOL,BOOL)::$_0>,BOOL ()(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::StrongAlias<dcsctp::OutgoingMessageIdTag,unsigned int>)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<dcsctp::RetransmissionQueue::RetransmissionQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,unsigned long,dcsctp::SendQueue &,std::function<void ()(webrtc::TimeDelta)>,std::function<void ()(void)>,dcsctp::Timer &,dcsctp::DcSctpOptions const&,BOOL,BOOL)::$_0,std::allocator<dcsctp::RetransmissionQueue::RetransmissionQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,unsigned long,dcsctp::SendQueue &,std::function<void ()(webrtc::TimeDelta)>,std::function<void ()(void)>,dcsctp::Timer &,dcsctp::DcSctpOptions const&,BOOL,BOOL)::$_0>,BOOL ()(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::StrongAlias<dcsctp::OutgoingMessageIdTag,unsigned int>)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0BB8C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dcsctp::RetransmissionQueue::RetransmissionQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,unsigned long,dcsctp::SendQueue &,std::function<void ()(webrtc::TimeDelta)>,std::function<void ()(void)>,dcsctp::Timer &,dcsctp::DcSctpOptions const&,BOOL,BOOL)::$_0,std::allocator<dcsctp::RetransmissionQueue::RetransmissionQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,unsigned long,dcsctp::SendQueue &,std::function<void ()(webrtc::TimeDelta)>,std::function<void ()(void)>,dcsctp::Timer &,dcsctp::DcSctpOptions const&,BOOL,BOOL)::$_0>,BOOL ()(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::StrongAlias<dcsctp::OutgoingMessageIdTag,unsigned int>)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0BB8C8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dcsctp::RetransmissionQueue::RetransmissionQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,unsigned long,dcsctp::SendQueue &,std::function<void ()(webrtc::TimeDelta)>,std::function<void ()(void)>,dcsctp::Timer &,dcsctp::DcSctpOptions const&,BOOL,BOOL)::$_0,std::allocator<dcsctp::RetransmissionQueue::RetransmissionQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,webrtc::StrongAlias<dcsctp::TSNTag,unsigned int>,unsigned long,dcsctp::SendQueue &,std::function<void ()(webrtc::TimeDelta)>,std::function<void ()(void)>,dcsctp::Timer &,dcsctp::DcSctpOptions const&,BOOL,BOOL)::$_0>,BOOL ()(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,webrtc::StrongAlias<dcsctp::OutgoingMessageIdTag,unsigned int>)>::operator()(uint64_t a1, unsigned __int16 *a2, unsigned int *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 376) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 376), *a2, *a3);
}

uint64_t dcsctp::RetransmissionTimeout::ObserveRTT(uint64_t this, TimeDelta a2)
{
  int64_t v2;
  int64_t v3;
  BOOL v4;
  int64_t v5;
  int64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v19;
  unint64_t v20;

  if (a2.var0 < 0 || *(_QWORD *)(this + 16) < a2.var0)
    return this;
  if (!*(_BYTE *)(this + 32))
  {
    v10 = *(_QWORD *)(this + 40);
    v11 = v10 - a2.var0;
    v12 = 0x8000000000000000;
    if (v10 == 0x8000000000000000 || a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
      v11 = 0x8000000000000000;
    if (v10 == 0x7FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (v11 < 0)
      v11 = -v11;
    v14 = llround((double)*(uint64_t *)(this + 48) * 0.75);
    v15 = llround((double)v11 * 0.25);
    v16 = v15 == 0x8000000000000000 || v14 == 0x8000000000000000;
    v17 = v14 + v15;
    if (v16)
      v17 = 0x8000000000000000;
    if (v14 == 0x7FFFFFFFFFFFFFFFLL || v15 == 0x7FFFFFFFFFFFFFFFLL)
      v2 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v2 = v17;
    v19 = llround((double)v10 * 0.875);
    v20 = llround((double)a2.var0 * 0.125);
    if (v19 != 0x8000000000000000 && v20 != 0x8000000000000000)
      v12 = v19 + v20;
    if (v20 == 0x7FFFFFFFFFFFFFFFLL || v19 == 0x7FFFFFFFFFFFFFFFLL)
      a2.var0 = 0x7FFFFFFFFFFFFFFFLL;
    else
      a2.var0 = v12;
    *(TimeDelta *)(this + 40) = a2;
    *(_QWORD *)(this + 48) = v2;
    v3 = *(_QWORD *)(this + 24);
    if (v2 >= v3)
      goto LABEL_6;
    goto LABEL_5;
  }
  v2 = (unint64_t)a2.var0 >> 1;
  *(TimeDelta *)(this + 40) = a2;
  *(_QWORD *)(this + 48) = (unint64_t)a2.var0 >> 1;
  *(_BYTE *)(this + 32) = 0;
  v3 = *(_QWORD *)(this + 24);
  if ((uint64_t)((unint64_t)a2.var0 >> 1) < v3)
  {
LABEL_5:
    *(_QWORD *)(this + 48) = v3;
    v2 = v3;
  }
LABEL_6:
  v4 = v2 == 0xE000000000000000 || a2.var0 == 0x8000000000000000;
  v5 = a2.var0 + 4 * v2;
  if (v4)
    v5 = 0x8000000000000000;
  if (a2.var0 == 0x7FFFFFFFFFFFFFFFLL)
    v5 = 0x7FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(this + 56) = v5;
  v6 = *(_QWORD *)(this + 8);
  if (v6 < *(_QWORD *)this)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 < v5;
    v8 = 56;
    if (v7)
      v8 = 8;
    if (v5 >= *(_QWORD *)this)
      v9 = v8;
    else
      v9 = 0;
    *(_QWORD *)(this + 56) = *(_QWORD *)(this + v9);
  }
  return this;
}

webrtc::ReverbDecayEstimator *webrtc::ReverbDecayEstimator::ReverbDecayEstimator(webrtc::ReverbDecayEstimator *this, const webrtc::EchoCanceller3Config *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  size_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  char *v15;

  v4 = *((_DWORD *)a2 + 30);
  *(_DWORD *)this = v4;
  *((_DWORD *)this + 1) = v4 << 6;
  *((_BYTE *)this + 8) = *((float *)a2 + 69) < 0.0;
  *((_DWORD *)this + 7) = 0;
  *(_QWORD *)((char *)this + 12) = 0;
  *(_QWORD *)((char *)this + 20) = 0;
  v5 = *((_DWORD *)a2 + 30);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  if (v5 == 9)
  {
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
  }
  else
  {
    v6 = v5 - 3;
    if (v5 - 3 <= 5)
      goto LABEL_9;
    v7 = 4 * (v5 - 9);
    v8 = (char *)operator new(v7);
    *((_QWORD *)this + 4) = v8;
    v9 = &v8[v7];
    *((_QWORD *)this + 6) = &v8[v7];
    bzero(v8, 4 * v6 - 24);
    *((_QWORD *)this + 5) = v9;
    v10 = (char *)operator new(v7);
    *((_QWORD *)this + 7) = v10;
    v11 = &v10[v7];
    *((_QWORD *)this + 9) = &v10[v7];
    bzero(v10, v7);
    *((_QWORD *)this + 8) = v11;
  }
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  *((_QWORD *)this + 12) = 0x300000003;
  *((_QWORD *)this + 13) = 0;
  *((_BYTE *)this + 112) = 0;
  v12 = *((_QWORD *)a2 + 15);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 15) = 0;
  if (v12)
  {
    if (!(v12 >> 62))
    {
      v13 = 4 * v12;
      v14 = (char *)operator new(4 * v12);
      *((_QWORD *)this + 15) = v14;
      v15 = &v14[v13];
      *((_QWORD *)this + 17) = &v14[v13];
      bzero(v14, v13);
      *((_QWORD *)this + 16) = v15;
      goto LABEL_8;
    }
LABEL_9:
    abort();
  }
LABEL_8:
  *((float32x2_t *)this + 18) = vabs_f32(*(float32x2_t *)((char *)a2 + 276));
  *((_QWORD *)this + 19) = 0;
  return this;
}

void webrtc::ReverbDecayEstimator::Update(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, char a6, char a7)
{
  int v8;
  float v9;
  void *v10;
  uint64_t v11;

  if ((a7 & 1) == 0)
  {
    v8 = *(_DWORD *)a1;
    if (*(_DWORD *)a1 - 4 >= a5 && a5 >= 1 && *(_DWORD *)(a1 + 4) == (_DWORD)a3 && (a6 & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 8))
      {
        v9 = *(float *)a4 * 0.2;
        if (!*(_BYTE *)(a4 + 4))
          v9 = 0.0;
        if (v9 < *(float *)(a1 + 156))
          v9 = *(float *)(a1 + 156);
        *(float *)(a1 + 156) = v9;
        if (v9 != 0.0)
        {
          if (!a3)
            a2 = 0;
          if (*(_DWORD *)(a1 + 104) >= v8)
          {
            webrtc::ReverbDecayEstimator::EstimateDecay(a1, a2, a3, a5);
          }
          else
          {
            webrtc::ReverbDecayEstimator::AnalyzeFilter(a1, a2);
            ++*(_DWORD *)(a1 + 104);
          }
        }
      }
    }
    else
    {
      *(_DWORD *)(a1 + 80) = 0;
      v10 = *(void **)(a1 + 56);
      v11 = *(_QWORD *)(a1 + 64) - (_QWORD)v10;
      if (v11 >= 1)
        bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
      *(_DWORD *)(a1 + 84) = 0;
      *(_QWORD *)(a1 + 12) = 0x8000000000000000;
      *(_QWORD *)(a1 + 24) = 0;
      *(_DWORD *)(a1 + 20) = 0;
      *(_DWORD *)(a1 + 156) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = 0;
      *(_BYTE *)(a1 + 112) = 0;
    }
  }
}

uint64_t webrtc::ReverbDecayEstimator::AnalyzeFilter(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t v35;
  float v36;
  float v37;
  float v38;
  float v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  float v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unsigned int v51;
  float v52;
  float v53;
  float v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  float v66;
  float v67;
  float v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  float v72;
  float v73;
  uint64_t v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108[64];

  v2 = *(int *)(result + 104);
  v3 = (float *)(a2 + (v2 << 8));
  v107 = *v3 * *v3;
  v108[0] = v107;
  v106 = v3[1] * v3[1];
  v108[1] = v106;
  v105 = v3[2] * v3[2];
  v108[2] = v105;
  v104 = v3[3] * v3[3];
  v108[3] = v104;
  v103 = v3[4] * v3[4];
  v108[4] = v103;
  v102 = v3[5] * v3[5];
  v108[5] = v102;
  v101 = v3[6] * v3[6];
  v108[6] = v101;
  v100 = v3[7] * v3[7];
  v108[7] = v100;
  v99 = v3[8] * v3[8];
  v108[8] = v99;
  v98 = v3[9] * v3[9];
  v108[9] = v98;
  v97 = v3[10] * v3[10];
  v108[10] = v97;
  v96 = v3[11] * v3[11];
  v108[11] = v96;
  v95 = v3[12] * v3[12];
  v108[12] = v95;
  v94 = v3[13] * v3[13];
  v108[13] = v94;
  v93 = v3[14] * v3[14];
  v108[14] = v93;
  v92 = v3[15] * v3[15];
  v108[15] = v92;
  v91 = v3[16] * v3[16];
  v108[16] = v91;
  v90 = v3[17] * v3[17];
  v108[17] = v90;
  v89 = v3[18] * v3[18];
  v108[18] = v89;
  v88 = v3[19] * v3[19];
  v108[19] = v88;
  v87 = v3[20] * v3[20];
  v108[20] = v87;
  v86 = v3[21] * v3[21];
  v108[21] = v86;
  v85 = v3[22] * v3[22];
  v108[22] = v85;
  v84 = v3[23] * v3[23];
  v108[23] = v84;
  v83 = v3[24] * v3[24];
  v108[24] = v83;
  v81 = v3[25] * v3[25];
  v108[25] = v81;
  v78 = v3[26] * v3[26];
  v108[26] = v78;
  v76 = v3[27] * v3[27];
  v108[27] = v76;
  v4 = v3[28] * v3[28];
  v108[28] = v4;
  v5 = v3[29] * v3[29];
  v108[29] = v5;
  v6 = v3[30] * v3[30];
  v108[30] = v6;
  v7 = v3[31] * v3[31];
  v108[31] = v7;
  v8 = v3[32] * v3[32];
  v108[32] = v8;
  v9 = v3[33] * v3[33];
  v108[33] = v9;
  v82 = v3[34] * v3[34];
  v108[34] = v82;
  v80 = v3[35] * v3[35];
  v108[35] = v80;
  v79 = v3[36] * v3[36];
  v108[36] = v79;
  v77 = v3[37] * v3[37];
  v108[37] = v77;
  v75 = v3[38] * v3[38];
  v108[38] = v75;
  v10 = v3[39] * v3[39];
  v108[39] = v10;
  v11 = v3[40] * v3[40];
  v108[40] = v11;
  v12 = v3[41] * v3[41];
  v108[41] = v12;
  v13 = v3[42] * v3[42];
  v108[42] = v13;
  v14 = v3[43] * v3[43];
  v108[43] = v14;
  v15 = v3[44] * v3[44];
  v108[44] = v15;
  v16 = v3[45] * v3[45];
  v108[45] = v16;
  v17 = v3[46] * v3[46];
  v108[46] = v17;
  v18 = v3[47] * v3[47];
  v108[47] = v18;
  v19 = v3[48] * v3[48];
  v108[48] = v19;
  v20 = v3[49] * v3[49];
  v108[49] = v20;
  v21 = v3[50] * v3[50];
  v108[50] = v21;
  v22 = v3[51] * v3[51];
  v108[51] = v22;
  v23 = v3[52] * v3[52];
  v108[52] = v23;
  v24 = v3[53] * v3[53];
  v108[53] = v24;
  v25 = v3[54] * v3[54];
  v108[54] = v25;
  v26 = v3[55] * v3[55];
  v108[55] = v26;
  v27 = v3[56] * v3[56];
  v108[56] = v27;
  v28 = v3[57] * v3[57];
  v108[57] = v28;
  v29 = v3[58] * v3[58];
  v108[58] = v29;
  v30 = v3[59] * v3[59];
  v108[59] = v30;
  v31 = v3[60] * v3[60];
  v108[60] = v31;
  v32 = v3[61] * v3[61];
  v108[61] = v32;
  v33 = v3[62] * v3[62];
  v108[62] = v33;
  v34 = v3[63] * v3[63];
  v108[63] = v34;
  v35 = *(_QWORD *)(result + 120);
  if (v2 >= (*(_QWORD *)(result + 128) - v35) >> 2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v36 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v107 + v106) + v105) + v104) + v103) + v102) + v101) + v100) + v99) + v98) + v97) + v96) + v95) + v94) + v93) + v92) + v91) + v90) + v89) + v88) + v87) + v86)
                                                                                              + v85)
                                                                                      + v84)
                                                                              + v83)
                                                                      + v81)
                                                              + v78)
                                                      + v76)
                                              + v4)
                                      + v5)
                              + v6)
                      + v7)
              + v8)
      + v9;
  v37 = *(float *)(result + 152);
  v38 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v36 + v82) + v80) + v79) + v77) + v75) + v10) + v11) + v12) + v13) + v14) + v15) + v16) + v17) + v18) + v19) + v20) + v21) + v22) + v23)
                                                                                              + v24)
                                                                                      + v25)
                                                                              + v26)
                                                                      + v27)
                                                              + v28)
                                                      + v29)
                                              + v30)
                                      + v31)
                              + v32)
                      + v33)
              + v34)
      * 0.015625;
  if (v38 < 1.0e-32)
    v38 = 1.0e-32;
  v39 = *(float *)(v35 + 4 * v2);
  *(float *)(v35 + 4 * v2) = v38;
  if (*(_BYTE *)(result + 112) || (v39 <= (float)(v38 * 1.1) ? (v40 = v39 < (float)(v38 * 0.9)) : (v40 = 1), v40))
  {
    *(_BYTE *)(result + 112) = 1;
    if ((int)v2 > *(_DWORD *)(result + 100))
      return result;
  }
  else
  {
    *(_BYTE *)(result + 112) = v38 <= v37;
    if (v38 > v37)
      ++*(_DWORD *)(result + 108);
    if ((int)v2 > *(_DWORD *)(result + 100))
      return result;
  }
  if ((int)v2 < *(_DWORD *)(result + 96))
  {
    v41 = 0;
    v42 = *(_QWORD *)(result + 56);
    v43 = (*(_QWORD *)(result + 64) - v42) >> 2;
    v44 = v43 - 1;
    v46 = *(_DWORD *)(result + 80);
    v45 = *(_DWORD *)(result + 84);
    while (1)
    {
      v47 = *(float *)(result + 156);
      v48 = (v45 - 5);
      v49 = v48 & ~((int)v48 >> 31);
      v50 = v44 >= v45 ? v45 : v44;
      if ((int)v50 >= (int)v49)
        break;
LABEL_27:
      *(_DWORD *)(result + 80) = ++v46;
      if (v46 == 64)
      {
        if (v45 >= 5)
        {
          if (v43 <= v48)
            goto LABEL_31;
          v56 = *(_QWORD *)(result + 32);
          if (v48 >= (*(_QWORD *)(result + 40) - v56) >> 2)
            goto LABEL_31;
          *(float *)(v56 + 4 * v48) = *(float *)(v56 + 4 * v48)
                                    + (float)(v47 * (float)(*(float *)(v42 + 4 * v48) - *(float *)(v56 + 4 * v48)));
          *(_DWORD *)(result + 88) = v45 - 4;
        }
        v46 = 0;
        ++v45;
        *(_DWORD *)(result + 80) = 0;
        *(_DWORD *)(result + 84) = v45;
      }
      if (++v41 == 64)
        return result;
    }
    *(float *)&v51 = v108[v41] + 1.0e-10;
    v52 = (float)((float)v51 * 0.00000011921) + -126.94;
    v53 = v52 * 64.0;
    v54 = (float)((float)(v52 * 64.0) * (float)(v45 - (int)v50)) + (float)((float)((float)v46 + -191.5) * v52);
    while (v43 > v50)
    {
      *(float *)(v42 + 4 * v50) = v54 + *(float *)(v42 + 4 * v50);
      v54 = v53 + v54;
      v55 = (uint64_t)v50-- <= v49;
      if (v55)
        goto LABEL_27;
    }
    goto LABEL_31;
  }
LABEL_32:
  v57 = 0;
  v58 = *(_QWORD *)(result + 56);
  v59 = (*(_QWORD *)(result + 64) - v58) >> 2;
  v60 = v59 - 1;
  v61 = *(_DWORD *)(result + 28);
  v62 = v61 + 64;
  v63 = *(_DWORD *)(result + 80);
  v64 = *(_DWORD *)(result + 84);
  while (1)
  {
    *(float *)&v65 = v108[v57] + 1.0e-10;
    v66 = (float)((float)v65 * 0.00000011921) + -126.94;
    v67 = *(float *)(result + 20);
    *(float *)(result + 12) = *(float *)(result + 12) + (float)(v67 * v66);
    *(float *)(result + 20) = v67 + 1.0;
    ++v61;
    v68 = *(float *)(result + 156);
    v69 = (v64 - 5);
    v70 = v69 & ~((int)v69 >> 31);
    v71 = v60 >= v64 ? v64 : v60;
    if ((int)v71 >= (int)v70)
      break;
LABEL_44:
    *(_DWORD *)(result + 80) = ++v63;
    if (v63 == 64)
    {
      if (v64 >= 5)
      {
        if (v59 <= v69)
          goto LABEL_48;
        v74 = *(_QWORD *)(result + 32);
        if (v69 >= (*(_QWORD *)(result + 40) - v74) >> 2)
          goto LABEL_48;
        *(float *)(v74 + 4 * v69) = *(float *)(v74 + 4 * v69)
                                  + (float)(v68 * (float)(*(float *)(v58 + 4 * v69) - *(float *)(v74 + 4 * v69)));
        *(_DWORD *)(result + 88) = v64 - 4;
      }
      v63 = 0;
      ++v64;
      *(_DWORD *)(result + 80) = 0;
      *(_DWORD *)(result + 84) = v64;
    }
    if (++v57 == 64)
      goto LABEL_49;
  }
  v72 = v66 * 64.0;
  v73 = (float)((float)(v66 * 64.0) * (float)(v64 - (int)v71)) + (float)((float)((float)v63 + -191.5) * v66);
  while (v59 > v71)
  {
    *(float *)(v58 + 4 * v71) = v73 + *(float *)(v58 + 4 * v71);
    v73 = v72 + v73;
    v55 = (uint64_t)v71-- <= v70;
    if (v55)
      goto LABEL_44;
  }
LABEL_48:
  *(_DWORD *)(result + 28) = v61;
  __break(1u);
LABEL_49:
  *(_DWORD *)(result + 28) = v62;
  return result;
}

void webrtc::ReverbDecayEstimator::EstimateDecay(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  int v7;
  int v8;
  uint64_t v9;
  float v10;
  float v11;
  float *v12;
  float v13;
  uint64_t v14;
  float *v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  float v25;
  int v26;
  float v27;
  int v28;
  float *v29;
  float *v30;
  float *v31;
  float v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  int v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  char v47;
  void *v48;
  uint64_t v49;

  v7 = a4 + 3;
  if (*(_DWORD *)a1 >= a4 + 3)
    v8 = a4 + 3;
  else
    v8 = *(_DWORD *)a1;
  *(_DWORD *)(a1 + 104) = v8;
  if (a3)
    v9 = a2;
  else
    v9 = 0;
  *(float *)(a1 + 152) = v11;
  v12 = (float *)(v9 + ((uint64_t)a4 << 8));
  if (v12 + 1 == (float *)(v9 + ((uint64_t)(a4 + 1) << 8)))
  {
    v15 = (float *)(v9 + ((uint64_t)a4 << 8));
  }
  else
  {
    v13 = *v12;
    v14 = 1;
    v15 = (float *)(v9 + ((uint64_t)a4 << 8));
    do
    {
      if ((float)(v13 * v13) < (float)(v12[v14] * v12[v14]))
      {
        v13 = v12[v14];
        v15 = &v12[v14];
      }
      ++v14;
    }
    while (v14 != 64);
  }
  v16 = (float)(*v15 * *v15) >= 100.0 || v10 <= (float)(v11 + v11);
  v17 = *(unsigned int *)(a1 + 88);
  if ((int)v17 >= 9)
  {
    v29 = *(float **)(a1 + 32);
    v30 = v29 + 9;
    if ((v17 - 9) >= 2)
    {
      v31 = v29 + 10;
      v32 = v29[9];
      v33 = 4 * v17 - 40;
      v34 = v29 + 10;
      do
      {
        v35 = *v34++;
        v36 = v35;
        if (v35 < v32)
        {
          v32 = v36;
          v30 = v31;
        }
        v31 = v34;
        v33 -= 4;
      }
      while (v33);
    }
    if (*(_QWORD *)(a1 + 40) - (_QWORD)v29 <= 0x23uLL)
    {
      __break(1u);
      return;
    }
    v37 = *v30 * 0.9;
    v38 = v29[1];
    if (v38 > 10138.0 || (v39 = 0, v38 < -23735.0) && v38 < v37)
      v39 = 1;
    v40 = v29[2];
    if (v40 > 10138.0 || v40 < -23735.0 && v40 < v37)
      v39 = 2;
    v41 = v29[3];
    if (v41 > 10138.0 || v41 < -23735.0 && v41 < v37)
      v39 = 3;
    v42 = v29[4];
    if (v42 > 10138.0 || v42 < -23735.0 && v42 < v37)
      v39 = 4;
    v43 = v29[5];
    if (v43 > 10138.0 || v43 < -23735.0 && v43 < v37)
      v39 = 5;
    v44 = v29[6];
    if (v44 > 10138.0 || v44 < -23735.0 && v44 < v37)
      v39 = 6;
    v45 = v29[7];
    if (v45 > 10138.0 || v45 < -23735.0 && v45 < v37)
      v39 = 7;
    v46 = v29[8];
    if (v46 <= 10138.0 && (v46 >= -23735.0 || v46 >= v37))
    {
      if (v39)
        v18 = v39 + 1;
      else
        v18 = 0;
      v19 = *(_DWORD *)(a1 + 108);
      v20 = (v19 - v18) & ~((v19 - v18) >> 31);
      if (v20 >= 5)
        goto LABEL_19;
    }
    else
    {
      v18 = 9;
      v19 = *(_DWORD *)(a1 + 108);
      v20 = (v19 - 9) & ~((v19 - 9) >> 31);
      if (v20 >= 5)
      {
LABEL_19:
        if (!v16)
        {
          v21 = *(_DWORD *)(a1 + 24);
          if (*(_DWORD *)(a1 + 28) == v21)
          {
            if (v21)
            {
              v22 = *(float *)(a1 + 16);
              v23 = 0.0;
              if (v22 != 0.0)
                v23 = (float)(*(float *)(a1 + 12) / v22) * 64.0;
              v24 = exp2f(v23);
              v25 = *(float *)(a1 + 144);
              if ((float)(v25 * 0.97) >= v24)
                v24 = v25 * 0.97;
              if (v24 > 0.95)
                v24 = 0.95;
              if (v24 < 0.02)
                v24 = 0.02;
              *(float *)(a1 + 144) = v25 + (float)(*(float *)(a1 + 156) * (float)(v24 - v25));
            }
          }
        }
        v26 = v20 << 6;
        *(_DWORD *)(a1 + 12) = 0;
        v27 = (float)((float)(int)(-64 * v20) * 0.5) + 0.5;
        if ((int)(v20 << 6) <= 0)
          v27 = 0.0;
        *(float *)(a1 + 16) = (float)((float)((float)(v26 * v26) + -1.0) * (float)v26) * 0.083333;
        *(float *)(a1 + 20) = v27;
        *(_DWORD *)(a1 + 24) = v26;
        *(_DWORD *)(a1 + 28) = 0;
        *(_DWORD *)(a1 + 96) = v18 + v7;
        v28 = v8 + v19 - 1;
        goto LABEL_73;
      }
    }
  }
  else
  {
    v18 = 0;
    v19 = *(_DWORD *)(a1 + 108);
    v20 = v19 & ~(v19 >> 31);
    if (v20 >= 5)
      goto LABEL_19;
  }
  v28 = 0;
  *(_QWORD *)(a1 + 12) = 0x8000000000000000;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 96) = 0;
LABEL_73:
  *(_DWORD *)(a1 + 100) = v28;
  v47 = v10 <= (float)(v11 * 4.0) || v16;
  *(_BYTE *)(a1 + 112) = v47;
  *(_DWORD *)(a1 + 108) = 0;
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  v48 = *(void **)(a1 + 56);
  v49 = *(_QWORD *)(a1 + 64) - (_QWORD)v48;
  if (v49 >= 1)
    bzero(v48, 4 * (((unint64_t)v49 >> 2) - ((unint64_t)v49 > 3)) + 4);
  *(_DWORD *)(a1 + 84) = 0;
}

float webrtc::`anonymous namespace'::BlockEnergyAverage(uint64_t a1, uint64_t a2, int a3)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v3 = (float *)(a1 + ((uint64_t)a3 << 8));
  v4 = v3[11];
  v5 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(*v3 * *v3) + 0.0) + (float)(v3[1] * v3[1])) + (float)(v3[2] * v3[2])) + (float)(v3[3] * v3[3])) + (float)(v3[4] * v3[4])) + (float)(v3[5] * v3[5])) + (float)(v3[6] * v3[6])) + (float)(v3[7] * v3[7])) + (float)(v3[8] * v3[8])) + (float)(v3[9] * v3[9]))
                                                                                             + (float)(v3[10] * v3[10]))
                                                                                     + (float)(v4 * v4))
                                                                             + (float)(v3[12] * v3[12]))
                                                                     + (float)(v3[13] * v3[13]))
                                                             + (float)(v3[14] * v3[14]))
                                                     + (float)(v3[15] * v3[15]))
                                             + (float)(v3[16] * v3[16]))
                                     + (float)(v3[17] * v3[17]))
                             + (float)(v3[18] * v3[18]))
                     + (float)(v3[19] * v3[19]))
             + (float)(v3[20] * v3[20]))
     + (float)(v3[21] * v3[21]);
  v6 = v3[33];
  v7 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v5 + (float)(v3[22] * v3[22])) + (float)(v3[23] * v3[23])) + (float)(v3[24] * v3[24])) + (float)(v3[25] * v3[25])) + (float)(v3[26] * v3[26])) + (float)(v3[27] * v3[27])) + (float)(v3[28] * v3[28])) + (float)(v3[29] * v3[29])) + (float)(v3[30] * v3[30])) + (float)(v3[31] * v3[31]))
                                                                                             + (float)(v3[32] * v3[32]))
                                                                                     + (float)(v6 * v6))
                                                                             + (float)(v3[34] * v3[34]))
                                                                     + (float)(v3[35] * v3[35]))
                                                             + (float)(v3[36] * v3[36]))
                                                     + (float)(v3[37] * v3[37]))
                                             + (float)(v3[38] * v3[38]))
                                     + (float)(v3[39] * v3[39]))
                             + (float)(v3[40] * v3[40]))
                     + (float)(v3[41] * v3[41]))
             + (float)(v3[42] * v3[42]))
     + (float)(v3[43] * v3[43]);
  v8 = v3[55];
  return (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v7 + (float)(v3[44] * v3[44])) + (float)(v3[45] * v3[45])) + (float)(v3[46] * v3[46])) + (float)(v3[47] * v3[47])) + (float)(v3[48] * v3[48])) + (float)(v3[49] * v3[49])) + (float)(v3[50] * v3[50])) + (float)(v3[51] * v3[51])) + (float)(v3[52] * v3[52]))
                                                                                               + (float)(v3[53] * v3[53]))
                                                                                       + (float)(v3[54] * v3[54]))
                                                                               + (float)(v8 * v8))
                                                                       + (float)(v3[56] * v3[56]))
                                                               + (float)(v3[57] * v3[57]))
                                                       + (float)(v3[58] * v3[58]))
                                               + (float)(v3[59] * v3[59]))
                                       + (float)(v3[60] * v3[60]))
                               + (float)(v3[61] * v3[61]))
                       + (float)(v3[62] * v3[62]))
               + (float)(v3[63] * v3[63]))
       * 0.015625;
}

uint64_t webrtc::ReverbFrequencyResponse::Update(uint64_t result, uint64_t *a2, int a3, float a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float *v7;
  float v8;
  float v9;
  float32x4_t *v10;
  float v11;
  float v12;
  float v13;
  unint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  float v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;

  v4 = *a2;
  v5 = a2[1];
  v6 = v5 - *a2;
  if (v5 == *a2 || 0xFC0FC0FC0FC0FC1 * (v6 >> 2) <= (unint64_t)a3)
  {
    __break(1u);
  }
  else
  {
    v7 = (float *)(v4 + 260 * a3);
    v8 = 0.0;
    v9 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v7[1] + 0.0) + v7[2]) + v7[3]) + v7[4]) + v7[5]) + v7[6]) + v7[7]) + v7[8]) + v7[9]) + v7[10]) + v7[11]) + v7[12]) + v7[13]) + v7[14]) + v7[15]) + v7[16]) + v7[17]) + v7[18]) + v7[19]) + v7[20]) + v7[21]) + v7[22]) + v7[23]) + v7[24]) + v7[25]) + v7[26]) + v7[27]) + v7[28]) + v7[29]) + v7[30])
                                                                                               + v7[31])
                                                                                       + v7[32])
                                                                               + v7[33])
                                                                       + v7[34])
                                                               + v7[35])
                                                       + v7[36])
                                               + v7[37])
                                       + v7[38])
                               + v7[39])
                       + v7[40])
               + v7[41])
       + v7[42];
    v10 = (float32x4_t *)(v5 - 260);
    v11 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v9 + v7[43]) + v7[44]) + v7[45]) + v7[46]) + v7[47]) + v7[48]) + v7[49]) + v7[50]) + v7[51]) + v7[52])
                                                                                                + v7[53])
                                                                                        + v7[54])
                                                                                + v7[55])
                                                                        + v7[56])
                                                                + v7[57])
                                                        + v7[58])
                                                + v7[59])
                                        + v7[60])
                                + v7[61])
                        + v7[62])
                + v7[63])
        + v7[64];
    if (v11 != 0.0)
    {
      v12 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v10->f32[1] + 0.0) + v10->f32[2]) + v10->f32[3]) + v10[1].f32[0]) + v10[1].f32[1]) + v10[1].f32[2]) + v10[1].f32[3]) + v10[2].f32[0]) + v10[2].f32[1]) + v10[2].f32[2]) + v10[2].f32[3]) + v10[3].f32[0]) + v10[3].f32[1]) + v10[3].f32[2]) + v10[3].f32[3]) + v10[4].f32[0]) + v10[4].f32[1]) + v10[4].f32[2]) + v10[4].f32[3]) + v10[5].f32[0]) + v10[5].f32[1]) + v10[5].f32[2]) + v10[5].f32[3]) + v10[6].f32[0]) + v10[6].f32[1]) + v10[6].f32[2]) + v10[6].f32[3]) + v10[7].f32[0]) + v10[7].f32[1]) + v10[7].f32[2])
                                                                                                  + v10[7].f32[3])
                                                                                          + v10[8].f32[0])
                                                                                  + v10[8].f32[1])
                                                                          + v10[8].f32[2])
                                                                  + v10[8].f32[3])
                                                          + v10[9].f32[0])
                                                  + v10[9].f32[1])
                                          + v10[9].f32[2])
                                  + v10[9].f32[3])
                          + v10[10].f32[0])
                  + v10[10].f32[1])
          + v10[10].f32[2];
      v8 = (float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)((float)(v12 + v10[10].f32[3]) + v10[11].f32[0]) + v10[11].f32[1]) + v10[11].f32[2]) + v10[11].f32[3]) + v10[12].f32[0]) + v10[12].f32[1]) + v10[12].f32[2]) + v10[12].f32[3]) + v10[13].f32[0]) + v10[13].f32[1])
                                                                                                 + v10[13].f32[2])
                                                                                         + v10[13].f32[3])
                                                                                 + v10[14].f32[0])
                                                                         + v10[14].f32[1])
                                                                 + v10[14].f32[2])
                                                         + v10[14].f32[3])
                                                 + v10[15].f32[0])
                                         + v10[15].f32[1])
                                 + v10[15].f32[2])
                         + v10[15].f32[3])
                 + v10[16].f32[0])
         / v11;
    }
    v13 = *(float *)(result + 4) + (float)((float)(a4 * 0.2) * (float)(v8 - *(float *)(result + 4)));
    *(float *)(result + 4) = v13;
    *(float *)(result + 8) = v13 * *v7;
    v14 = result + 8;
    *(float *)(result + 12) = v13 * v7[1];
    *(float *)(result + 16) = v13 * v7[2];
    *(float *)(result + 20) = v13 * v7[3];
    *(float *)(result + 24) = v13 * v7[4];
    *(float *)(result + 28) = v13 * v7[5];
    *(float *)(result + 32) = v13 * v7[6];
    *(float *)(result + 36) = v13 * v7[7];
    *(float *)(result + 40) = v13 * v7[8];
    *(float *)(result + 44) = v13 * v7[9];
    *(float *)(result + 48) = v13 * v7[10];
    *(float *)(result + 52) = v13 * v7[11];
    *(float *)(result + 56) = v13 * v7[12];
    *(float *)(result + 60) = v13 * v7[13];
    *(float *)(result + 64) = v13 * v7[14];
    *(float *)(result + 68) = v13 * v7[15];
    *(float *)(result + 72) = v13 * v7[16];
    *(float *)(result + 76) = v13 * v7[17];
    *(float *)(result + 80) = v13 * v7[18];
    *(float *)(result + 84) = v13 * v7[19];
    *(float *)(result + 88) = v13 * v7[20];
    *(float *)(result + 92) = v13 * v7[21];
    *(float *)(result + 96) = v13 * v7[22];
    *(float *)(result + 100) = v13 * v7[23];
    *(float *)(result + 104) = v13 * v7[24];
    *(float *)(result + 108) = v13 * v7[25];
    *(float *)(result + 112) = v13 * v7[26];
    *(float *)(result + 116) = v13 * v7[27];
    *(float *)(result + 120) = v13 * v7[28];
    *(float *)(result + 124) = v13 * v7[29];
    *(float *)(result + 128) = v13 * v7[30];
    *(float *)(result + 132) = v13 * v7[31];
    *(float *)(result + 136) = v13 * v7[32];
    *(float *)(result + 140) = v13 * v7[33];
    *(float *)(result + 144) = v13 * v7[34];
    *(float *)(result + 148) = v13 * v7[35];
    *(float *)(result + 152) = v13 * v7[36];
    *(float *)(result + 156) = v13 * v7[37];
    *(float *)(result + 160) = v13 * v7[38];
    *(float *)(result + 164) = v13 * v7[39];
    *(float *)(result + 168) = v13 * v7[40];
    *(float *)(result + 172) = v13 * v7[41];
    *(float *)(result + 176) = v13 * v7[42];
    *(float *)(result + 180) = v13 * v7[43];
    *(float *)(result + 184) = v13 * v7[44];
    *(float *)(result + 188) = v13 * v7[45];
    *(float *)(result + 192) = v13 * v7[46];
    *(float *)(result + 196) = v13 * v7[47];
    *(float *)(result + 200) = v13 * v7[48];
    *(float *)(result + 204) = v13 * v7[49];
    *(float *)(result + 208) = v13 * v7[50];
    *(float *)(result + 212) = v13 * v7[51];
    *(float *)(result + 216) = v13 * v7[52];
    *(float *)(result + 220) = v13 * v7[53];
    *(float *)(result + 224) = v13 * v7[54];
    *(float *)(result + 228) = v13 * v7[55];
    *(float *)(result + 232) = v13 * v7[56];
    *(float *)(result + 236) = v13 * v7[57];
    *(float *)(result + 240) = v13 * v7[58];
    *(float *)(result + 244) = v13 * v7[59];
    *(float *)(result + 248) = v13 * v7[60];
    *(float *)(result + 252) = v13 * v7[61];
    *(float *)(result + 256) = v13 * v7[62];
    *(float *)(result + 260) = v13 * v7[63];
    *(float *)(result + 264) = v13 * v7[64];
    if (*(_BYTE *)result)
    {
      if (v14 >= v4 + v6 || (unint64_t)v10 >= result + 268)
      {
        v16 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 24), v10[1]), *(int8x16_t *)(result + 24), (int8x16_t)v10[1]);
        *(int8x16_t *)(result + 8) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 8), *v10), *(int8x16_t *)(result + 8), *(int8x16_t *)v10);
        *(int8x16_t *)(result + 24) = v16;
        v17 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 56), v10[3]), *(int8x16_t *)(result + 56), (int8x16_t)v10[3]);
        *(int8x16_t *)(result + 40) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 40), v10[2]), *(int8x16_t *)(result + 40), (int8x16_t)v10[2]);
        *(int8x16_t *)(result + 56) = v17;
        v18 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 88), v10[5]), *(int8x16_t *)(result + 88), (int8x16_t)v10[5]);
        *(int8x16_t *)(result + 72) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 72), v10[4]), *(int8x16_t *)(result + 72), (int8x16_t)v10[4]);
        *(int8x16_t *)(result + 88) = v18;
        v19 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 120), v10[7]), *(int8x16_t *)(result + 120), (int8x16_t)v10[7]);
        *(int8x16_t *)(result + 104) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 104), v10[6]), *(int8x16_t *)(result + 104), (int8x16_t)v10[6]);
        *(int8x16_t *)(result + 120) = v19;
        v20 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 152), v10[9]), *(int8x16_t *)(result + 152), (int8x16_t)v10[9]);
        *(int8x16_t *)(result + 136) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 136), v10[8]), *(int8x16_t *)(result + 136), (int8x16_t)v10[8]);
        *(int8x16_t *)(result + 152) = v20;
        v21 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 184), v10[11]), *(int8x16_t *)(result + 184), (int8x16_t)v10[11]);
        *(int8x16_t *)(result + 168) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 168), v10[10]), *(int8x16_t *)(result + 168), (int8x16_t)v10[10]);
        *(int8x16_t *)(result + 184) = v21;
        v22 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 216), v10[13]), *(int8x16_t *)(result + 216), (int8x16_t)v10[13]);
        *(int8x16_t *)(result + 200) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 200), v10[12]), *(int8x16_t *)(result + 200), (int8x16_t)v10[12]);
        *(int8x16_t *)(result + 216) = v22;
        v23 = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 248), v10[15]), *(int8x16_t *)(result + 248), (int8x16_t)v10[15]);
        *(int8x16_t *)(result + 232) = vbslq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(result + 232), v10[14]), *(int8x16_t *)(result + 232), (int8x16_t)v10[14]);
        v15 = 64;
        *(int8x16_t *)(result + 248) = v23;
      }
      else
      {
        v15 = 0;
      }
      v24 = v15;
      do
      {
        v25 = v10->f32[v24];
        if (v25 < *(float *)(v14 + v24 * 4))
          v25 = *(float *)(v14 + v24 * 4);
        *(float *)(v14 + v24 * 4) = v25;
        ++v24;
      }
      while (v24 != 65);
    }
    v26 = 0;
    v27 = *(float *)(result + 8);
    v28 = *(float *)(result + 12);
    do
    {
      v29 = *(float *)(result + v26 + 16);
      v27 = (float)(v27 + v29) * 0.5;
      if (v28 >= v27)
        v27 = v28;
      *(float *)(result + v26 + 12) = v27;
      v26 += 4;
      v28 = v29;
    }
    while (v26 != 252);
  }
  return result;
}

webrtc::ReverbModelEstimator *webrtc::ReverbModelEstimator::ReverbModelEstimator(webrtc::ReverbModelEstimator *this, const webrtc::EchoCanceller3Config *a2, unint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  webrtc::ReverbDecayEstimator *v14;
  webrtc::ReverbDecayEstimator *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  void *v20;
  _BYTE __src[267];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a3)
  {
    if (!(a3 >> 61))
    {
      v6 = 8 * a3;
      v7 = (char *)operator new(8 * a3);
      *(_QWORD *)this = v7;
      v8 = &v7[v6];
      *((_QWORD *)this + 2) = &v7[v6];
      bzero(v7, 8 * a3);
      *((_QWORD *)this + 1) = v8;
      v9 = *((_BYTE *)a2 + 287);
      memset(&__src[3], 0, 264);
      *((_QWORD *)this + 3) = 0;
      *((_QWORD *)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
      if (a3 < 0xF4898D5F85BB3ALL)
      {
        v10 = 268 * a3;
        v11 = operator new(268 * a3);
        *((_QWORD *)this + 3) = v11;
        v12 = &v11[v10];
        *((_QWORD *)this + 5) = &v11[v10];
        do
        {
          *v11 = v9;
          memcpy(v11 + 1, __src, 0x10BuLL);
          v11 += 268;
        }
        while (v11 != v12);
        v13 = 0;
        *((_QWORD *)this + 4) = v12;
        while (1)
        {
          v14 = (webrtc::ReverbDecayEstimator *)operator new();
          v15 = webrtc::ReverbDecayEstimator::ReverbDecayEstimator(v14, a2);
          v16 = *(_QWORD *)this;
          if (v13 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
            break;
          v17 = *(_QWORD **)(v16 + 8 * v13);
          *(_QWORD *)(v16 + 8 * v13) = v15;
          if (v17)
          {
            v18 = (void *)v17[15];
            if (v18)
            {
              v17[16] = v18;
              operator delete(v18);
            }
            v19 = (void *)v17[7];
            if (v19)
            {
              v17[8] = v19;
              operator delete(v19);
            }
            v20 = (void *)v17[4];
            if (v20)
            {
              v17[5] = v20;
              operator delete(v20);
            }
            MEMORY[0x20BD0ADEC](v17, 0x1080C405E570BC5);
          }
          if (++v13 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
            return this;
        }
        __break(1u);
      }
    }
    abort();
  }
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  return this;
}

void webrtc::ReverbModelEstimator::~ReverbModelEstimator(webrtc::ReverbModelEstimator *this)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  v3 = *(_QWORD **)this;
  if (*(_QWORD *)this)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    v5 = *(void **)this;
    if (v4 != v3)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
        {
          v8 = (void *)v6[15];
          if (v8)
          {
            v6[16] = v8;
            operator delete(v8);
          }
          v9 = (void *)v6[7];
          if (v9)
          {
            v6[8] = v9;
            operator delete(v9);
          }
          v10 = (void *)v6[4];
          if (v10)
          {
            v6[5] = v10;
            operator delete(v10);
          }
          MEMORY[0x20BD0ADEC](v6, 0x1080C405E570BC5);
        }
      }
      while (v4 != v3);
      v5 = *(void **)this;
    }
    *((_QWORD *)this + 1) = v3;
    operator delete(v5);
  }
}

void webrtc::ReverbModelEstimator::Update(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, char a12)
{
  uint64_t v12;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v12 = a1[1] - *a1;
  if (v12)
  {
    v15 = v12 >> 3;
    if (v15 <= 1)
      v16 = 1;
    else
      v16 = v15;
    if ((a12 & 1) != 0)
    {
      v17 = 0;
      v18 = (_QWORD *)(a2 + 8);
      while (0xF0B7672A07A44C6BLL * ((uint64_t)(a1[4] - a1[3]) >> 2) > v17 && v17 < (uint64_t)(a1[1] - *a1) >> 3)
      {
        v19 = *(v18 - 1);
        if (*v18 == v19)
          v20 = 0;
        else
          v20 = *(v18 - 1);
        webrtc::ReverbDecayEstimator::Update(*(_QWORD *)(*a1 + 8 * v17), v20, (*v18 - v19) >> 2, a6, *(_DWORD *)(a9 + 4 * v17), (*(_QWORD *)(*a11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v17) & 1, 1);
        ++v17;
        v18 += 3;
        a6 += 8;
        if (v16 == v17)
          return;
      }
    }
    else
    {
      v22 = 0;
      v23 = 0;
      v24 = (_QWORD *)(a2 + 8);
      while (1)
      {
        v25 = a1[3];
        if (0xF0B7672A07A44C6BLL * ((a1[4] - v25) >> 2) <= v23)
          break;
        if (*(_BYTE *)(a6 + 4))
          webrtc::ReverbFrequencyResponse::Update(v25 + v22, a4, *(_DWORD *)(a9 + 4 * v23), *(float *)a6);
        if (v23 >= (uint64_t)(a1[1] - *a1) >> 3)
          break;
        v26 = *(v24 - 1);
        if (*v24 == v26)
          v27 = 0;
        else
          v27 = *(v24 - 1);
        webrtc::ReverbDecayEstimator::Update(*(_QWORD *)(*a1 + 8 * v23), v27, (*v24 - v26) >> 2, a6, *(_DWORD *)(a9 + 4 * v23), (*(_QWORD *)(*a11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v23) & 1, 0);
        ++v23;
        a6 += 8;
        v24 += 3;
        v22 += 268;
        a4 += 3;
        if (v16 == v23)
          return;
      }
    }
    __break(1u);
  }
}

std::string *cricket::RidDescription::RidDescription(std::string *this, const cricket::RidDescription *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  void *v8;
  std::string::size_type v9;
  char *v10;
  char *v11;
  char *v13;
  char *v14;
  BOOL v15;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 6);
  this[1].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  v6 = (_BYTE *)*((_QWORD *)a2 + 4);
  v5 = (_BYTE *)*((_QWORD *)a2 + 5);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      abort();
    v8 = operator new(v5 - v6);
    this[1].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
    this[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v8;
    v9 = (std::string::size_type)v8 + 4 * (v7 >> 2);
    this[2].__r_.__value_.__r.__words[0] = v9;
    memcpy(v8, v6, v7);
    this[1].__r_.__value_.__r.__words[2] = v9;
  }
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[2].__r_.__value_.__l.__size_ = (std::string::size_type)&this[2].__r_.__value_.__r.__words[2];
  this[3].__r_.__value_.__r.__words[0] = 0;
  v10 = (char *)*((_QWORD *)a2 + 7);
  v11 = (char *)a2 + 64;
  if (v10 != v11)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::string> const&>((uint64_t **)&this[2].__r_.__value_.__l.__size_, (uint64_t *)&this[2].__r_.__value_.__r.__words[2], (uint64_t)(v10 + 32), (uint64_t)(v10 + 32));
      v13 = (char *)*((_QWORD *)v10 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char *)*((_QWORD *)v10 + 2);
          v15 = *(_QWORD *)v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v15);
      }
      v10 = v14;
    }
    while (v14 != v11);
  }
  return this;
}

void cricket::RidDescription::~RidDescription(cricket::RidDescription *this)
{
  void *v2;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 56, *((_QWORD *)this + 8));
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

std::string *cricket::RidDescription::operator=(std::string *this, std::string *a2)
{
  std::string *v3;
  __int128 v4;
  size_t size;

  if (this != a2)
  {
    v3 = a2;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      {
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
      }
      else
      {
        a2 = (std::string *)a2->__r_.__value_.__r.__words[0];
        size = v3->__r_.__value_.__l.__size_;
      }
      std::string::__assign_no_alias<false>(this, (const std::string::value_type *)a2, size);
    }
    else if ((*((_BYTE *)&a2->__r_.__value_.__s + 23) & 0x80) != 0)
    {
      std::string::__assign_no_alias<true>(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      v4 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
    }
    LODWORD(this[1].__r_.__value_.__l.__data_) = v3[1].__r_.__value_.__l.__data_;
    std::vector<int>::__assign_with_size[abi:sn180100]<int *,int *>(&this[1].__r_.__value_.__l.__size_, (char *)v3[1].__r_.__value_.__l.__size_, (char *)v3[1].__r_.__value_.__r.__words[2], (uint64_t)(v3[1].__r_.__value_.__r.__words[2] - v3[1].__r_.__value_.__l.__size_) >> 2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t)&this[2].__r_.__value_.__l.__size_, (char *)v3[2].__r_.__value_.__l.__size_, &v3[2].__r_.__value_.__s.__data_[16]);
  }
  return this;
}

unint64_t WebRtc_ReadBuffer(uint64_t *a1, _QWORD *a2, char *__dst, unint64_t a4)
{
  unint64_t v4;
  char *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  v4 = 0;
  if (!a1)
    return v4;
  v5 = __dst;
  if (!__dst)
    return v4;
  v8 = *a1;
  if (*((_DWORD *)a1 + 8))
  {
    v9 = a1[2] - v8;
    v10 = v9 + a1[1];
  }
  else
  {
    v10 = a1[1] - v8;
    v9 = a1[2] - v8;
  }
  if (v10 >= a4)
    v4 = a4;
  else
    v4 = v10;
  v11 = (char *)a1[5];
  v12 = a1[3];
  v13 = &v11[v12 * v8];
  v14 = v4 - v9;
  if (v4 <= v9)
  {
    v15 = v12 * v4;
  }
  else
  {
    v15 = v12 * v9;
    v16 = v12 * v14;
    if (v12 * v14)
    {
      memcpy(__dst, v13, v12 * v9);
      memcpy(&v5[v15], v11, v16);
      if (!a2)
        goto LABEL_21;
LABEL_16:
      if (v4)
        v17 = v5;
      else
        v17 = 0;
      *a2 = v17;
      goto LABEL_21;
    }
  }
  if (a2)
  {
    v5 = v13;
    goto LABEL_16;
  }
  memcpy(__dst, v13, v15);
LABEL_21:
  v18 = *((_DWORD *)a1 + 4);
  v19 = *((_DWORD *)a1 + 8);
  v20 = *(_DWORD *)a1;
  v21 = *((_DWORD *)a1 + 2);
  v22 = v19 == 0;
  if (v19)
    v23 = *((_DWORD *)a1 + 4);
  else
    v23 = 0;
  if (v22)
    v24 = *((_DWORD *)a1 + 4);
  else
    v24 = 0;
  v25 = v23 - v20 + v21;
  v26 = v21 - v20 - v24;
  if (v25 >= (int)v4)
    v25 = v4;
  if (v25 <= v26)
    v25 = v26;
  v27 = v25 + v20;
  if (v25 + v20 <= v18)
    v28 = 0;
  else
    v28 = *((_DWORD *)a1 + 4);
  v29 = v27 - v28;
  if (v27 > v18 || v29 < 0)
    *((_DWORD *)a1 + 8) = v29 >> 31;
  *a1 = (v18 & (v29 >> 31)) + v29;
  return v4;
}

uint64_t WebRtc_MoveReadPtr(int *a1, int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;

  if (!a1)
    return 0;
  v2 = a1[4];
  v3 = a1[8];
  v4 = *a1;
  v5 = a1[2];
  v6 = v3 == 0;
  if (v3)
    v7 = 0;
  else
    v7 = a1[4];
  if (v6)
    v8 = 0;
  else
    v8 = a1[4];
  v9 = v5 + v8 - v4;
  LODWORD(v10) = v5 - v4 - v7;
  if (v9 >= a2)
    v11 = a2;
  else
    v11 = v9;
  if (v11 <= (int)v10)
    v10 = v10;
  else
    v10 = v11;
  v12 = v10 + v4;
  if ((int)v10 + v4 <= v2)
    v13 = 0;
  else
    v13 = a1[4];
  v14 = v12 - v13;
  v15 = (v2 & (v14 >> 31)) + v14;
  if (v12 > v2 || v14 < 0)
  {
    a1[8] = v14 >> 31;
    *(_QWORD *)a1 = v15;
    return v10;
  }
  else
  {
    *(_QWORD *)a1 = v15;
    return v10;
  }
}

unint64_t WebRtc_WriteBuffer(uint64_t *a1, char *__src, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v3 = 0;
  if (a1 && __src)
  {
    v6 = a1[2];
    v7 = *a1;
    if (*((_DWORD *)a1 + 8))
    {
      v8 = a1[1];
      v9 = v7 - v8;
      if (v9 >= a3)
        v3 = a3;
      else
        v3 = v9;
      v10 = v6 - v8;
      v11 = v3 - v10;
      if (v3 > v10)
      {
LABEL_8:
        memcpy((void *)(a1[5] + a1[3] * v8), __src, a1[3] * v10);
        v8 = 0;
        a1[1] = 0;
        *((_DWORD *)a1 + 8) = 1;
LABEL_14:
        memcpy((void *)(a1[5] + a1[3] * v8), &__src[a1[3] * (v3 - v11)], a1[3] * v11);
        a1[1] += v11;
        return v3;
      }
    }
    else
    {
      v8 = a1[1];
      v12 = v6 - (v8 - v7);
      if (v12 >= a3)
        v3 = a3;
      else
        v3 = v12;
      v10 = v6 - v8;
      v11 = v3 - v10;
      if (v3 > v10)
        goto LABEL_8;
    }
    v11 = v3;
    goto LABEL_14;
  }
  return v3;
}

void webrtc::rnn_vad::RnnVad::~RnnVad(webrtc::rnn_vad::RnnVad *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (void *)*((_QWORD *)this + 49);
  if (v2)
  {
    *((_QWORD *)this + 50) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 46);
  if (v3)
  {
    *((_QWORD *)this + 47) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 4);
  if (v7)
  {
    *((_QWORD *)this + 5) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 1);
  if (v8)
  {
    *((_QWORD *)this + 2) = v8;
    operator delete(v8);
  }
}

uint64_t webrtc::rnn_vad::FullyConnectedLayer::FullyConnectedLayer(uint64_t a1, int a2, int a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, unint64_t a8, double a9, float32x4_t a10, __int16 *a11)
{
  size_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v18;
  float32x4_t *v19;
  char *v20;
  char *v21;
  float *v22;
  int v23;
  _QWORD *v24;
  float32x4_t *v25;
  __int8 *v26;
  char *v27;
  char *v28;
  float *v29;
  int v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float32x4_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int8x8_t v50;
  float32x4_t v51;
  float32x4_t v52;
  unint64_t v53;
  __int16 v54;
  float (*v55)(rnnoise *, float);
  unint64_t v57;
  float32x4_t v58;
  unint64_t v59;
  int8x16_t *v60;
  float32x4_t *v61;
  int8x16_t v62;
  int8x8_t v63;
  float32x4_t v64;
  int8x8_t *v65;
  unint64_t v66;
  float32x4_t v67;
  float32x4_t *v68;
  int8x8_t v69;
  unint64_t v70;
  float32x4_t v71;
  unint64_t v72;
  int8x16_t *v73;
  float32x4_t *v74;
  int8x16_t v75;
  int8x8_t v76;
  int8x8_t *v77;
  unint64_t v78;
  float32x4_t v79;
  float32x4_t *v80;
  int8x8_t v81;
  std::string *v82;
  float32x4_t *v83;
  uint64_t v84;

  v12 = a8;
  v13 = a7;
  v14 = a6;
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a5)
  {
    v11 = a5;
    if (!(a5 >> 62))
    {
      v18 = 4 * a5;
      v19 = (float32x4_t *)operator new(4 * a5);
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 24) = (char *)v19 + v18;
      bzero(v19, 4 * v11);
      *(_QWORD *)(a1 + 16) = (char *)v19 + v18;
      v20 = (char *)(a4 + v11);
      if (v11 >= 8 && (v19 >= (float32x4_t *)v20 || (unint64_t)v19->u64 + 4 * v11 <= a4))
      {
        if (v11 >= 0x10)
          goto LABEL_63;
        v57 = 0;
        goto LABEL_68;
      }
      v21 = (char *)a4;
      v22 = (float *)v19;
      goto LABEL_7;
    }
LABEL_83:
    abort();
  }
  while (1)
  {
    v24 = (_QWORD *)(a1 + 32);
    if (a3 == 1)
    {
      *v24 = 0;
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      if (!v13)
        goto LABEL_57;
      if (v13 >> 62)
        goto LABEL_83;
      v25 = (float32x4_t *)operator new(4 * v13);
      *(_QWORD *)(a1 + 32) = v25;
      v26 = &v25->i8[4 * v13];
      *(_QWORD *)(a1 + 48) = v26;
      bzero(v25, 4 * v13);
      *(_QWORD *)(a1 + 40) = v26;
      v27 = (char *)(v14 + v13);
      if (v13 < 8 || v25 < (float32x4_t *)v27 && (unint64_t)v25->u64 + 4 * v13 > v14)
      {
        v28 = (char *)v14;
        v29 = (float *)v25;
        goto LABEL_15;
      }
      if (v13 >= 0x10)
      {
        v70 = v13 & 0xFFFFFFFFFFFFFFF0;
        v71 = (float32x4_t)vdupq_n_s32(0x3B800000u);
        v72 = v13 & 0xFFFFFFFFFFFFFFF0;
        v73 = (int8x16_t *)v14;
        v74 = v25;
        do
        {
          v75 = *v73++;
          v76 = (int8x8_t)vextq_s8(v75, v75, 8uLL).u64[0];
          *v74 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v75.i8, *(int8x8_t *)v71.f32), 8uLL), 8uLL))), v71);
          v74[1] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v75.i8, *(int8x8_t *)v71.f32), 8uLL), 8uLL))), v71);
          v74[2] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v76, *(int8x8_t *)v71.f32), 8uLL), 8uLL))), v71);
          v74[3] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v76, *(int8x8_t *)v71.f32), 8uLL), 8uLL))), v71);
          v74 += 4;
          v72 -= 16;
        }
        while (v72);
        if (v13 == v70)
          goto LABEL_57;
        if ((v13 & 8) == 0)
        {
          v29 = &v25->f32[v70];
          v28 = (char *)(v14 + v70);
          do
          {
LABEL_15:
            v30 = *v28++;
            *v29++ = (float)v30 * 0.0039062;
          }
          while (v28 != v27);
          goto LABEL_57;
        }
      }
      else
      {
        v70 = 0;
      }
      v28 = (char *)(v14 + (v13 & 0xFFFFFFFFFFFFFFF8));
      v29 = &v25->f32[v13 & 0xFFFFFFFFFFFFFFF8];
      v77 = (int8x8_t *)(v14 + v70);
      v78 = v70 - (v13 & 0xFFFFFFFFFFFFFFF8);
      v79 = (float32x4_t)vdupq_n_s32(0x3B800000u);
      v80 = (float32x4_t *)((char *)v25 + 4 * v70);
      do
      {
        v81 = *v77++;
        *v80 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v81, *(int8x8_t *)v79.f32), 8uLL), 8uLL))), v79);
        v80[1] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v81, *(int8x8_t *)v79.f32), 8uLL), 8uLL))), v79);
        v80 += 2;
        v78 += 8;
      }
      while (v78);
      if (v13 == (v13 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_57;
      goto LABEL_15;
    }
    a4 = ((int)v13 / a3);
    if ((int)v13 % a3)
    {
      v82 = rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, ((int)v13 % a3));
      return webrtc::rnn_vad::FullyConnectedLayer::ComputeOutput((uint64_t)v82, v83, v84);
    }
    *v24 = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 48) = 0;
    if (v13)
      break;
    v19 = 0;
    if (a3 < 1)
      goto LABEL_57;
LABEL_23:
    if ((int)a4 < 1)
      goto LABEL_57;
    v20 = 0;
    v31 = 0;
    v32 = 0;
    v33 = (uint64_t)((uint64_t)v19 - v13) >> 2;
    v34 = 4 * a4;
    v35 = a4 - 1;
    v36 = (float32x4_t)vdupq_n_s32(0x3B800000u);
    v37 = v13;
    v38 = v14;
LABEL_25:
    v39 = 0;
    if (v33 <= v31)
      v40 = v31;
    else
      v40 = (uint64_t)((uint64_t)v19 - v13) >> 2;
    v41 = (unint64_t)&v20[v40];
    if (v41 >= v35)
      v41 = a4 - 1;
    a6 = v32 * a4;
    v42 = v33 - v32 * a4;
    if (v33 < v32 * a4)
      v42 = 0;
    if (v42 >= v35)
      v42 = a4 - 1;
    v43 = v42 + 1;
    if (v43 >= 0x11 && a3 == 1)
    {
      v39 = 0;
      v46 = v33 >= a6;
      v45 = v33 - a6;
      if (!v46)
        v45 = 0;
      if (v45 >= v35)
        v45 = a4 - 1;
      a7 = v14 + v32;
      a8 = v14 + v32 + v45 + 1;
      v11 = v13 + v34 * v32;
      a6 = v11 + 4 * v45 + 4;
      v46 = v11 >= a8 || a7 >= a6;
      if (v46)
      {
        if ((v43 & 0xF) != 0)
          v47 = v43 & 0xF;
        else
          v47 = 16;
        v39 = v43 - v47;
        v48 = v41 - v47 + 1;
        v49 = v37;
        a6 = v38;
        do
        {
          v50 = (int8x8_t)vextq_s8(*(int8x16_t *)a6, *(int8x16_t *)a6, 8uLL).u64[0];
          v51 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v50, *(int8x8_t *)v36.f32), 8uLL), 8uLL)));
          a10 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v50, *(int8x8_t *)v36.f32), 8uLL), 8uLL))), v36);
          v52 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)a6, *(int8x8_t *)v36.f32), 8uLL), 8uLL))), v36);
          *(float32x4_t *)v49 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)a6, *(int8x8_t *)v36.f32), 8uLL), 8uLL))), v36);
          *(float32x4_t *)(v49 + 16) = v52;
          *(float32x4_t *)(v49 + 32) = a10;
          *(float32x4_t *)(v49 + 48) = vmulq_f32(v51, v36);
          a6 += 16 * a3;
          v49 += 64;
          v48 -= 16;
        }
        while (v48);
      }
    }
    v53 = a3 * v39;
    while (1)
    {
      a5 = v31 + v39;
      if (v33 <= v31 + v39)
        break;
      a10.i8[0] = *(_BYTE *)(v38 + v53);
      a10.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)a10.f32)).u64[0];
      a10.f32[0] = (float)a10.i32[0] * 0.0039062;
      *(_DWORD *)(v37 + 4 * v39++) = a10.i32[0];
      v53 += a3;
      if (a4 == v39)
      {
        ++v32;
        ++v38;
        v31 += a4;
        v20 -= a4;
        v37 += v34;
        if (v32 == a3)
          goto LABEL_57;
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_63:
    v57 = v11 & 0xFFFFFFFFFFFFFFF0;
    v58 = (float32x4_t)vdupq_n_s32(0x3B800000u);
    v59 = v11 & 0xFFFFFFFFFFFFFFF0;
    v60 = (int8x16_t *)a4;
    v61 = v19;
    do
    {
      v62 = *v60++;
      v63 = (int8x8_t)vextq_s8(v62, v62, 8uLL).u64[0];
      v64 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v63, *(int8x8_t *)v58.f32), 8uLL), 8uLL)));
      a10 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v63, *(int8x8_t *)v58.f32), 8uLL), 8uLL))), v58);
      *v61 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)v62.i8, *(int8x8_t *)v58.f32), 8uLL), 8uLL))), v58);
      v61[1] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(*(int8x8_t *)v62.i8, *(int8x8_t *)v58.f32), 8uLL), 8uLL))), v58);
      v61[2] = a10;
      v61[3] = vmulq_f32(v64, v58);
      v61 += 4;
      v59 -= 16;
    }
    while (v59);
    if (v11 != v57)
    {
      if ((v11 & 8) == 0)
      {
        v22 = &v19->f32[v57];
        v21 = (char *)(a4 + v57);
        do
        {
LABEL_7:
          v23 = *v21++;
          a10.i32[0] = 998244352;
          *v22++ = (float)v23 * 0.0039062;
        }
        while (v21 != v20);
        continue;
      }
LABEL_68:
      v21 = (char *)(a4 + (v11 & 0xFFFFFFFFFFFFFFF8));
      v22 = &v19->f32[v11 & 0xFFFFFFFFFFFFFFF8];
      v65 = (int8x8_t *)(a4 + v57);
      v66 = v57 - (v11 & 0xFFFFFFFFFFFFFFF8);
      v67 = (float32x4_t)vdupq_n_s32(0x3B800000u);
      v68 = (float32x4_t *)((char *)v19 + 4 * v57);
      do
      {
        v69 = *v65++;
        a10 = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(v69, *(int8x8_t *)v67.f32), 8uLL), 8uLL))), v67);
        *v68 = a10;
        v68[1] = vmulq_f32(vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip2_s8(v69, *(int8x8_t *)v67.f32), 8uLL), 8uLL))), v67);
        v68 += 2;
        v66 += 8;
      }
      while (v66);
      if (v11 != (v11 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_7;
    }
  }
  if (v13 >> 62)
    goto LABEL_83;
  v11 = 4 * v13;
  v13 = (unint64_t)operator new(4 * v13);
  *(_QWORD *)(a1 + 32) = v13;
  v19 = (float32x4_t *)(v13 + v11);
  *(_QWORD *)(a1 + 48) = v13 + v11;
  bzero((void *)v13, v11);
  *(_QWORD *)(a1 + 40) = v13 + v11;
  if (a3 >= 1)
    goto LABEL_23;
LABEL_57:
  v54 = *a11;
  *(_BYTE *)(a1 + 58) = *((_BYTE *)a11 + 2);
  *(_WORD *)(a1 + 56) = v54;
  v55 = rnnoise::TansigApproximated;
  if (v12 == 1)
    v55 = rnnoise::SigmoidApproximated;
  *(_QWORD *)(a1 + 64) = v55;
  *(_QWORD *)(a1 + 72) = rtc::FunctionView<float ()(float)>::CallFunPtr<float (&)(float)>;
  return a1;
}

uint64_t webrtc::rnn_vad::FullyConnectedLayer::ComputeOutput(uint64_t result, float32x4_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v6;
  float32x4_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  float *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  float *v21;
  float32x4_t *v22;
  float v23;
  uint64_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  float32x4_t *v36;
  float *v37;
  uint64_t v38;

  v3 = *(_QWORD *)(result + 32);
  v4 = *(_QWORD *)(result + 40) - v3;
  if (!v4)
    v3 = 0;
  v38 = v3;
  if (*(int *)(result + 4) >= 1)
  {
    v6 = (int *)result;
    if (a3)
      v7 = a2;
    else
      v7 = 0;
    v8 = result + 80;
    if (a3)
    {
      v9 = 0;
      v10 = v4 >> 2;
      v11 = &v7->f32[a3];
      v12 = (char *)v11 - (char *)a2 - 4;
      v13 = (v12 >> 2) + 1;
      v14 = v13 & 0x7FFFFFFFFFFFFFF8;
      v37 = &a2->f32[v14];
      v36 = a2 + 1;
      while (1)
      {
        v15 = *((_QWORD *)v6 + 1);
        if (v9 >= (*((_QWORD *)v6 + 2) - v15) >> 2)
          goto LABEL_32;
        v16 = *v6;
        v17 = (int)v16 * (uint64_t)(int)v9;
        v18 = v10 - v17;
        if (v10 <= v17)
        {
          v20 = 0;
          if (v12 >= 0x1C)
            goto LABEL_17;
        }
        else
        {
          v19 = (float32x4_t *)(v38 + 4 * v17);
          if (v18 < v16)
            v16 = v18;
          if (v16)
            v20 = v19;
          else
            v20 = 0;
          if (v12 >= 0x1C)
          {
LABEL_17:
            v21 = &v20->f32[v14];
            v22 = v20 + 1;
            v23 = 0.0;
            v24 = v13 & 0x7FFFFFFFFFFFFFF8;
            v25 = v36;
            do
            {
              v26 = vmulq_f32(v25[-1], v22[-1]);
              v27 = vmulq_f32(*v25, *v22);
              v23 = (float)((float)((float)((float)((float)((float)((float)(v23 + v26.f32[0]) + v26.f32[1]) + v26.f32[2])
                                                  + v26.f32[3])
                                          + v27.f32[0])
                                  + v27.f32[1])
                          + v27.f32[2])
                  + v27.f32[3];
              v25 += 2;
              v22 += 2;
              v24 -= 8;
            }
            while (v24);
            v28 = v37;
            if (v13 == (v13 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_24;
            goto LABEL_23;
          }
        }
        v23 = 0.0;
        v21 = (float *)v20;
        v28 = (float *)a2;
        do
        {
LABEL_23:
          v29 = *v28++;
          v30 = v29;
          v31 = *v21++;
          v23 = v23 + (float)(v30 * v31);
        }
        while (v28 != v11);
LABEL_24:
        result = (*((uint64_t (**)(_QWORD, float))v6 + 9))(*((_QWORD *)v6 + 8), *(float *)(v15 + 4 * v9) + v23);
        if (v9 == 24)
          goto LABEL_32;
        *(_DWORD *)(v8 + 4 * v9++) = v32;
        if ((uint64_t)v9 >= v6[1])
          return result;
      }
    }
    v33 = 0;
    while (1)
    {
      v34 = *((_QWORD *)v6 + 1);
      if (v33 >= (*((_QWORD *)v6 + 2) - v34) >> 2)
        break;
      result = (*((uint64_t (**)(_QWORD, float))v6 + 9))(*((_QWORD *)v6 + 8), *(float *)(v34 + 4 * v33) + 0.0);
      if (v33 == 24)
        break;
      *(_DWORD *)(v8 + 4 * v33++) = v35;
      if ((uint64_t)v33 >= v6[1])
        return result;
    }
LABEL_32:
    __break(1u);
  }
  return result;
}

float rnnoise::TansigApproximated(rnnoise *this, float a2)
{
  float v2;
  BOOL v3;
  float v4;
  float v5;
  float v6;
  float v7;

  v2 = 1.0;
  if (a2 < 8.0)
  {
    v2 = -1.0;
    if (a2 > -8.0)
    {
      v3 = a2 < 0.0;
      if (a2 < 0.0)
        a2 = -a2;
      v4 = (float)(a2 * 25.0) + 0.5;
      v5 = floorf(v4);
      v6 = rnnoise::TansigApproximated(float)::kTansigTable[vcvtms_s32_f32(v4)];
      v7 = v6
         + (float)((float)((float)(a2 + (float)((float)(int)v5 * -0.04)) * (float)(1.0 - (float)(v6 * v6)))
                 * (float)(1.0 - (float)(v6 * (float)(a2 + (float)((float)(int)v5 * -0.04)))));
      if (v3)
        return -v7;
      else
        return v7;
    }
  }
  return v2;
}

float rnnoise::SigmoidApproximated(rnnoise *this, float a2)
{
  float v2;
  float v3;
  BOOL v4;
  float v5;
  float v6;
  float v7;
  float v8;

  v2 = a2 * 0.5;
  v3 = 1.0;
  if (v2 < 8.0)
  {
    v3 = -1.0;
    if (v2 > -8.0)
    {
      v4 = v2 < 0.0;
      if (v2 < 0.0)
        v2 = -v2;
      v5 = (float)(v2 * 25.0) + 0.5;
      v6 = floorf(v5);
      v7 = rnnoise::TansigApproximated(float)::kTansigTable[vcvtms_s32_f32(v5)];
      v8 = v7
         + (float)((float)((float)(v2 + (float)((float)(int)v6 * -0.04)) * (float)(1.0 - (float)(v7 * v7)))
                 * (float)(1.0 - (float)(v7 * (float)(v2 + (float)((float)(int)v6 * -0.04)))));
      if (v4)
        v3 = -v8;
      else
        v3 = v8;
    }
  }
  return (float)(v3 * 0.5) + 0.5;
}

void webrtc::rnn_vad::`anonymous namespace'::PreprocessGruTensor(_QWORD *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  int v9;
  uint64_t v10;
  unint64_t v11;
  size_t v15;
  char *v16;
  char *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;

  v9 = 3 * a4;
  v10 = ((int)a3 / (3 * a4));
  v11 = ((int)a3 % (3 * a4));
  if ((_DWORD)v11)
    goto LABEL_25;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 62)
      goto LABEL_26;
    v15 = 4 * a3;
    v16 = (char *)operator new(4 * a3);
    *a1 = v16;
    v17 = &v16[v15];
    a1[2] = &v16[v15];
    bzero(v16, v15);
    a1[1] = &v16[v15];
    if (a4 < 1)
      return;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    if (a4 < 1)
      return;
  }
  if ((int)v10 < 1)
    return;
  v18 = 0;
  v19 = 0;
  v11 = (v17 - v16) >> 2;
  do
  {
    v20 = v18;
    v21 = v19;
    v22 = v10;
    do
    {
      if (v11 <= v20)
      {
LABEL_24:
        __break(1u);
LABEL_25:
        rtc::webrtc_checks_impl::FatalLog("Source/webrtc/rtc_base/checks.h", 478, "a % b == 0", rtc::webrtc_checks_impl::LogStreamer<>::CallCheckOp<rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>>(char const*,int,char const*,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)9,char const*>,rtc::webrtc_checks_impl::Val<(rtc::webrtc_checks_impl::CheckArgType)1,int> const&)::t, a5, a6, a7, a8, v11);
LABEL_26:
        abort();
      }
      LOBYTE(a9) = *(_BYTE *)(a2 + v21);
      *(_QWORD *)&a9 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a9)).u64[0];
      *(float *)&a9 = (float)SLODWORD(a9) * 0.0039062;
      *(_DWORD *)&v16[4 * v20] = LODWORD(a9);
      v21 += v9;
      ++v20;
      --v22;
    }
    while (v22);
    ++v19;
    v18 += v10;
  }
  while (v19 != a4);
  v23 = 0;
  v24 = v10 * a4;
  v25 = a4;
  do
  {
    v26 = v24;
    v27 = v25;
    v28 = v10;
    do
    {
      if (v11 <= v26)
        goto LABEL_24;
      LOBYTE(a9) = *(_BYTE *)(a2 + v27);
      *(_QWORD *)&a9 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a9)).u64[0];
      *(float *)&a9 = (float)SLODWORD(a9) * 0.0039062;
      *(_DWORD *)&v16[4 * v26] = LODWORD(a9);
      v27 += v9;
      ++v26;
      --v28;
    }
    while (v28);
    ++v23;
    ++v25;
    v24 += v10;
  }
  while (v23 != a4);
  v29 = 0;
  v30 = 2 * a4;
  v31 = 2 * v10 * a4;
  do
  {
    v32 = v31;
    v33 = v30;
    v34 = v10;
    do
    {
      if (v11 <= v32)
        goto LABEL_24;
      LOBYTE(a9) = *(_BYTE *)(a2 + v33);
      *(_QWORD *)&a9 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a9)).u64[0];
      *(float *)&a9 = (float)SLODWORD(a9) * 0.0039062;
      *(_DWORD *)&v16[4 * v32] = LODWORD(a9);
      v33 += v9;
      ++v32;
      --v34;
    }
    while (v34);
    ++v29;
    ++v30;
    v31 += v10;
  }
  while (v29 != a4);
}

uint64_t webrtc::rnn_vad::GatedRecurrentLayer::ComputeOutput(int *a1, float32x4_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  float *v17;
  uint64_t v18;
  float32x4_t *v19;
  uint64_t v20;
  BOOL v21;
  BOOL v22;
  uint64_t v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float *v28;
  float *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float32x4_t *v36;
  float v37;
  float *v38;
  float *v39;
  float32x4_t *v40;
  uint64_t v41;
  float32x4_t *v42;
  float32x4_t v43;
  float32x4_t v44;
  float v45;
  float v46;
  float v47;
  unint64_t v48;
  float32x4_t *v49;
  float *v50;
  float32x4_t *v51;
  float v52;
  uint64_t v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float *v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  BOOL v63;
  float v64;
  float v65;
  float v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float *v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  float32x4_t *v85;
  float v86;
  float *v87;
  float *v88;
  float32x4_t *v89;
  uint64_t v90;
  float32x4_t *v91;
  float32x4_t v92;
  float32x4_t v93;
  float v94;
  float v95;
  float v96;
  unint64_t v97;
  float32x4_t *v98;
  float *v99;
  float32x4_t *v100;
  float v101;
  uint64_t v102;
  float32x4_t *v103;
  float32x4_t v104;
  float32x4_t v105;
  float *v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  BOOL v112;
  float v113;
  float v114;
  float v115;
  unint64_t v116;
  uint64_t result;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  float *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  float *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  float32x4_t *v137;
  float *v138;
  float32x4_t *v139;
  float v140;
  uint64_t v141;
  float32x4_t *v142;
  float32x4_t v143;
  float32x4_t v144;
  float *v145;
  float v146;
  float v147;
  float v148;
  unint64_t v149;
  float32x4_t *v150;
  float *v151;
  float32x4_t *v152;
  float v153;
  uint64_t v154;
  float32x4_t *v155;
  float32x4_t v156;
  float32x4_t v157;
  float *v158;
  float v159;
  float v160;
  float v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  float32x4_t *v165;
  float *v166;
  float32x4_t *v167;
  float v168;
  uint64_t v169;
  float32x4_t *v170;
  float32x4_t v171;
  float32x4_t v172;
  float *v173;
  float v174;
  float v175;
  float v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  float32x4_t *v184;
  float v185[48];
  float v186[4];
  float v187[20];

  v3 = *((_QWORD *)a1 + 7);
  v4 = *((_QWORD *)a1 + 8);
  v6 = *a1;
  v5 = a1[1];
  v7 = (v5 * v5);
  v181 = v7;
  v182 = (v4 - v3) >> 2;
  if (v182 < v7)
    v7 = (v4 - v3) >> 2;
  v8 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a1 + 5);
  if (v4 == v3)
    v10 = 0;
  else
    v10 = *((_QWORD *)a1 + 7);
  if (v4 == v3)
    v11 = 0;
  else
    v11 = v7;
  v12 = (v9 - v8) >> 2;
  v179 = v12;
  v180 = (int)v5 * (uint64_t)(int)v6;
  if (v12 >= v180)
    v12 = (int)v5 * (uint64_t)(int)v6;
  v13 = *((_QWORD *)a1 + 1);
  v14 = *((_QWORD *)a1 + 2);
  if (v9 == v8)
    v15 = 0;
  else
    v15 = *((_QWORD *)a1 + 4);
  if (v9 == v8)
    v16 = 0;
  else
    v16 = v12;
  v17 = (float *)(a1 + 21);
  if (v14 == v13)
    v18 = 0;
  else
    v18 = *((_QWORD *)a1 + 1);
  if (a3)
    v19 = a2;
  else
    v19 = 0;
  v184 = v19;
  if (!(_DWORD)v5)
    v17 = 0;
  v178 = (v14 - v13) >> 2;
  if (v178 >= v5)
    v20 = v5;
  else
    v20 = (v14 - v13) >> 2;
  if (v20)
    v21 = v14 == v13;
  else
    v21 = 1;
  v177 = v18;
  if (v21)
    v18 = 0;
  if (v12)
    v22 = v9 == v8;
  else
    v22 = 1;
  if (v22)
    v23 = 0;
  else
    v23 = v15;
  if (v7)
    v24 = v4 == v3;
  else
    v24 = 1;
  v25 = v5;
  if (v24)
    v26 = 0;
  else
    v26 = v10;
  v183 = v5;
  if ((int)v5 >= 1)
  {
    v27 = 0;
    v28 = &v184->f32[a3];
    v29 = &v17[v5];
    v30 = (v5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v31 = (char *)v28 - (char *)a2 - 4;
    v32 = (v31 >> 2) + 1;
    v33 = v32 & 0x7FFFFFFFFFFFFFF8;
    v34 = (v30 + 1) & 0x7FFFFFFFFFFFFFF8;
    while (1)
    {
      v35 = v16 - v27 * v6;
      if (v16 <= v27 * v6)
      {
        v36 = 0;
        if (!a3)
          goto LABEL_58;
      }
      else
      {
        if (v35 >= v6)
          v35 = v6;
        if (v35)
          v36 = (float32x4_t *)(v23 + 4 * v27 * v6);
        else
          v36 = 0;
        if (!a3)
        {
LABEL_58:
          v37 = 0.0;
          goto LABEL_63;
        }
      }
      if (v31 < 0x1C)
        break;
      v38 = &v36->f32[v33];
      v40 = v36 + 1;
      v37 = 0.0;
      v41 = v32 & 0x7FFFFFFFFFFFFFF8;
      v42 = a2 + 1;
      do
      {
        v43 = vmulq_f32(v42[-1], v40[-1]);
        v44 = vmulq_f32(*v42, *v40);
        v37 = (float)((float)((float)((float)((float)((float)((float)(v37 + v43.f32[0]) + v43.f32[1]) + v43.f32[2])
                                            + v43.f32[3])
                                    + v44.f32[0])
                            + v44.f32[1])
                    + v44.f32[2])
            + v44.f32[3];
        v42 += 2;
        v40 += 2;
        v41 -= 8;
      }
      while (v41);
      v39 = &a2->f32[v33];
      if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_62;
LABEL_63:
      v48 = v11 - v27 * v25;
      if (v11 <= v27 * v25)
      {
        v49 = 0;
        if (v30 >= 7)
          goto LABEL_70;
      }
      else
      {
        if (v48 >= v25)
          v48 = v25;
        if (v48)
          v49 = (float32x4_t *)(v26 + 4 * v27 * v25);
        else
          v49 = 0;
        if (v30 >= 7)
        {
LABEL_70:
          v50 = &v49->f32[v34];
          v51 = v49 + 1;
          v52 = 0.0;
          v53 = (v30 + 1) & 0x7FFFFFFFFFFFFFF8;
          v54 = (float32x4_t *)(v17 + 4);
          do
          {
            v55 = vmulq_f32(v54[-1], v51[-1]);
            v56 = vmulq_f32(*v54, *v51);
            v52 = (float)((float)((float)((float)((float)((float)((float)(v52 + v55.f32[0]) + v55.f32[1]) + v55.f32[2])
                                                + v55.f32[3])
                                        + v56.f32[0])
                                + v56.f32[1])
                        + v56.f32[2])
                + v56.f32[3];
            v54 += 2;
            v51 += 2;
            v53 -= 8;
          }
          while (v53);
          v57 = &v17[v34];
          if (v30 + 1 == v34)
            goto LABEL_77;
          goto LABEL_76;
        }
      }
      v52 = 0.0;
      v50 = (float *)v49;
      v57 = v17;
      do
      {
LABEL_76:
        v58 = *v57++;
        v59 = v58;
        v60 = *v50++;
        v52 = v52 + (float)(v59 * v60);
      }
      while (v57 != v29);
LABEL_77:
      v61 = (float)((float)(*(float *)(v18 + 4 * v27) + v37) + v52) * 0.5;
      v62 = 1.0;
      if (v61 < 8.0)
      {
        v62 = -1.0;
        if (v61 > -8.0)
        {
          v63 = v61 < 0.0;
          if (v61 < 0.0)
            v61 = -v61;
          v64 = (float)(v61 * 25.0) + 0.5;
          v65 = floorf(v64);
          v66 = rnnoise::TansigApproximated(float)::kTansigTable[vcvtms_s32_f32(v64)];
          if (v63)
            v62 = -(float)(v66
                         + (float)((float)((float)(v61 + (float)((float)(int)v65 * -0.04))
                                         * (float)(1.0 - (float)(v66 * v66)))
                                 * (float)(1.0 - (float)(v66 * (float)(v61 + (float)((float)(int)v65 * -0.04))))));
          else
            v62 = v66
                + (float)((float)((float)(v61 + (float)((float)(int)v65 * -0.04)) * (float)(1.0 - (float)(v66 * v66)))
                        * (float)(1.0 - (float)(v66 * (float)(v61 + (float)((float)(int)v65 * -0.04)))));
        }
      }
      v185[v27++ + 24] = (float)(v62 * 0.5) + 0.5;
      if (v27 == v25)
        goto LABEL_84;
    }
    v37 = 0.0;
    v38 = (float *)v36;
    v39 = (float *)a2;
    do
    {
LABEL_62:
      v45 = *v39++;
      v46 = v45;
      v47 = *v38++;
      v37 = v37 + (float)(v46 * v47);
    }
    while (v39 != v28);
    goto LABEL_63;
  }
LABEL_84:
  v67 = v178 - v183;
  if (v178 <= v183)
  {
    v68 = 0;
    v70 = v180;
    v69 = v181;
    v71 = v179 - v180;
    if (v179 <= v180)
      goto LABEL_91;
  }
  else
  {
    if (v67 >= v183)
      v67 = v183;
    if (v67)
      v68 = v177 + 4 * v183;
    else
      v68 = 0;
    v70 = v180;
    v69 = v181;
    v71 = v179 - v180;
    if (v179 <= v180)
    {
LABEL_91:
      v72 = 0;
      v73 = 0;
      v74 = v182 - v69;
      if (v182 <= v69)
        goto LABEL_92;
      goto LABEL_102;
    }
  }
  if (v71 >= v70)
    v72 = v70;
  else
    v72 = v71;
  if (v72)
    v73 = v15 + 4 * v70;
  else
    v73 = 0;
  v74 = v182 - v69;
  if (v182 <= v69)
  {
LABEL_92:
    v75 = 0;
    v76 = 0;
    if ((int)v25 < 1)
      goto LABEL_147;
    goto LABEL_109;
  }
LABEL_102:
  if (v74 >= v69)
    v75 = v69;
  else
    v75 = v74;
  if (v75)
    v76 = v10 + 4 * v69;
  else
    v76 = 0;
  if ((int)v25 >= 1)
  {
LABEL_109:
    v77 = 0;
    v78 = &v184->f32[a3];
    v79 = (v183 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v80 = (char *)v78 - (char *)a2 - 4;
    v81 = (v80 >> 2) + 1;
    v82 = v81 & 0x7FFFFFFFFFFFFFF8;
    v83 = (v79 + 1) & 0x7FFFFFFFFFFFFFF8;
    while (1)
    {
      v84 = v72 - v77 * v6;
      if (v72 <= v77 * v6)
      {
        v85 = 0;
        if (!a3)
          goto LABEL_121;
      }
      else
      {
        if (v84 >= v6)
          v84 = v6;
        if (v84)
          v85 = (float32x4_t *)(v73 + 4 * v77 * v6);
        else
          v85 = 0;
        if (!a3)
        {
LABEL_121:
          v86 = 0.0;
          goto LABEL_126;
        }
      }
      if (v80 < 0x1C)
        break;
      v87 = &v85->f32[v82];
      v89 = v85 + 1;
      v86 = 0.0;
      v90 = v81 & 0x7FFFFFFFFFFFFFF8;
      v91 = a2 + 1;
      do
      {
        v92 = vmulq_f32(v91[-1], v89[-1]);
        v93 = vmulq_f32(*v91, *v89);
        v86 = (float)((float)((float)((float)((float)((float)((float)(v86 + v92.f32[0]) + v92.f32[1]) + v92.f32[2])
                                            + v92.f32[3])
                                    + v93.f32[0])
                            + v93.f32[1])
                    + v93.f32[2])
            + v93.f32[3];
        v91 += 2;
        v89 += 2;
        v90 -= 8;
      }
      while (v90);
      v88 = &a2->f32[v82];
      if (v81 != (v81 & 0x7FFFFFFFFFFFFFF8))
        goto LABEL_125;
LABEL_126:
      v97 = v75 - v77 * v25;
      if (v75 <= v77 * v25)
      {
        v98 = 0;
        if (v79 >= 7)
          goto LABEL_133;
      }
      else
      {
        if (v97 >= v25)
          v97 = v25;
        if (v97)
          v98 = (float32x4_t *)(v76 + 4 * v77 * v25);
        else
          v98 = 0;
        if (v79 >= 7)
        {
LABEL_133:
          v99 = &v98->f32[v83];
          v100 = v98 + 1;
          v101 = 0.0;
          v102 = (v79 + 1) & 0x7FFFFFFFFFFFFFF8;
          v103 = (float32x4_t *)(v17 + 4);
          do
          {
            v104 = vmulq_f32(v103[-1], v100[-1]);
            v105 = vmulq_f32(*v103, *v100);
            v101 = (float)((float)((float)((float)((float)((float)((float)(v101 + v104.f32[0]) + v104.f32[1])
                                                         + v104.f32[2])
                                                 + v104.f32[3])
                                         + v105.f32[0])
                                 + v105.f32[1])
                         + v105.f32[2])
                 + v105.f32[3];
            v103 += 2;
            v100 += 2;
            v102 -= 8;
          }
          while (v102);
          v106 = &v17[v83];
          if (v79 + 1 == v83)
            goto LABEL_140;
          goto LABEL_139;
        }
      }
      v101 = 0.0;
      v99 = (float *)v98;
      v106 = v17;
      do
      {
LABEL_139:
        v107 = *v106++;
        v108 = v107;
        v109 = *v99++;
        v101 = v101 + (float)(v108 * v109);
      }
      while (v106 != &v17[v183]);
LABEL_140:
      v110 = (float)((float)(*(float *)(v68 + 4 * v77) + v86) + v101) * 0.5;
      v111 = 1.0;
      if (v110 < 8.0)
      {
        v111 = -1.0;
        if (v110 > -8.0)
        {
          v112 = v110 < 0.0;
          if (v110 < 0.0)
            v110 = -v110;
          v113 = (float)(v110 * 25.0) + 0.5;
          v114 = floorf(v113);
          v115 = rnnoise::TansigApproximated(float)::kTansigTable[vcvtms_s32_f32(v113)];
          if (v112)
            v111 = -(float)(v115
                          + (float)((float)((float)(v110 + (float)((float)(int)v114 * -0.04))
                                          * (float)(1.0 - (float)(v115 * v115)))
                                  * (float)(1.0 - (float)(v115 * (float)(v110 + (float)((float)(int)v114 * -0.04))))));
          else
            v111 = v115
                 + (float)((float)((float)(v110 + (float)((float)(int)v114 * -0.04))
                                 * (float)(1.0 - (float)(v115 * v115)))
                         * (float)(1.0 - (float)(v115 * (float)(v110 + (float)((float)(int)v114 * -0.04)))));
        }
      }
      v185[v77++] = (float)(v111 * 0.5) + 0.5;
      if (v77 == v25)
        goto LABEL_147;
    }
    v86 = 0.0;
    v87 = (float *)v85;
    v88 = (float *)a2;
    do
    {
LABEL_125:
      v94 = *v88++;
      v95 = v94;
      v96 = *v87++;
      v86 = v86 + (float)(v95 * v96);
    }
    while (v88 != v78);
    goto LABEL_126;
  }
LABEL_147:
  v116 = v178 - 2 * v183;
  if (v178 <= 2 * v183)
  {
    result = 0;
    v118 = v180;
    v119 = 2 * (int)v180;
    v120 = v179 - v119;
    if (v179 <= v119)
    {
LABEL_154:
      v121 = 0;
      v122 = 0;
      goto LABEL_162;
    }
  }
  else
  {
    if (v116 >= v183)
      v116 = v183;
    if (v116)
      result = v177 + 8 * v183;
    else
      result = 0;
    v118 = v180;
    v119 = 2 * (int)v180;
    v120 = v179 - v119;
    if (v179 <= v119)
      goto LABEL_154;
  }
  v123 = v15 + 4 * v119;
  if (v120 >= v118)
    v121 = v118;
  else
    v121 = v120;
  if (v121)
    v122 = v123;
  else
    v122 = 0;
LABEL_162:
  v124 = (2 * v181);
  v125 = v10 + 4 * v124;
  v126 = v182 - v124;
  if (v182 - v124 >= v181)
    v126 = v181;
  if (!v126)
    v125 = 0;
  if (v182 > v124)
  {
    v127 = v125;
  }
  else
  {
    v126 = 0;
    v127 = 0;
  }
  if ((int)v25 >= 1)
  {
    v186[0] = *v17 * v185[0];
    if ((_DWORD)v25 == 1)
      goto LABEL_194;
    v186[1] = v17[1] * v185[1];
    if ((_DWORD)v183 == 2)
      goto LABEL_194;
    v186[2] = v17[2] * v185[2];
    if ((_DWORD)v25 == 3)
      goto LABEL_194;
    v186[3] = v17[3] * v185[3];
    if ((_DWORD)v25 == 4)
      goto LABEL_194;
    v187[0] = v17[4] * v185[4];
    if ((_DWORD)v183 == 5)
      goto LABEL_194;
    v187[1] = v17[5] * v185[5];
    if ((_DWORD)v25 == 6)
      goto LABEL_194;
    v187[2] = v17[6] * v185[6];
    if ((_DWORD)v183 == 7)
      goto LABEL_194;
    v187[3] = v17[7] * v185[7];
    if ((_DWORD)v25 == 8)
      goto LABEL_194;
    v187[4] = v17[8] * v185[8];
    if ((_DWORD)v25 == 9)
      goto LABEL_194;
    v187[5] = v17[9] * v185[9];
    if ((_DWORD)v183 == 10)
      goto LABEL_194;
    v187[6] = v17[10] * v185[10];
    if ((_DWORD)v25 == 11)
      goto LABEL_194;
    v187[7] = v17[11] * v185[11];
    if ((_DWORD)v183 == 12)
      goto LABEL_194;
    v187[8] = v17[12] * v185[12];
    if ((_DWORD)v25 == 13)
      goto LABEL_194;
    v187[9] = v17[13] * v185[13];
    if ((_DWORD)v25 == 14)
      goto LABEL_194;
    v187[10] = v17[14] * v185[14];
    if ((_DWORD)v183 == 15)
      goto LABEL_194;
    v187[11] = v17[15] * v185[15];
    if ((_DWORD)v25 == 16)
      goto LABEL_194;
    v187[12] = v17[16] * v185[16];
    if ((_DWORD)v183 == 17
      || (v187[13] = v17[17] * v185[17], (_DWORD)v25 == 18)
      || (v187[14] = v17[18] * v185[18], (_DWORD)v25 == 19)
      || (v187[15] = v17[19] * v185[19], (_DWORD)v183 == 20)
      || (v187[16] = v17[20] * v185[20], (_DWORD)v25 == 21)
      || (v187[17] = v17[21] * v185[21], (_DWORD)v25 == 22)
      || (v187[18] = v17[22] * v185[22], (_DWORD)v183 == 23)
      || (v187[19] = v17[23] * v185[23], (_DWORD)v183 == 24))
    {
LABEL_194:
      v128 = &v186[v25];
      v129 = (v25 - 1) & 0x3FFFFFFFFFFFFFFFLL;
      v130 = v129 + 1;
      if (a3)
      {
        v131 = 0;
        v132 = &v184->f32[a3];
        v133 = (a3 - 1) & 0x3FFFFFFFFFFFFFFFLL;
        v134 = (v133 + 1) & 0x7FFFFFFFFFFFFFF8;
        v135 = v130 & 0x7FFFFFFFFFFFFFF8;
        while (1)
        {
          v136 = v121 - v131 * v6;
          if (v121 <= v131 * v6)
          {
            v137 = 0;
            if (v133 < 7)
              goto LABEL_208;
          }
          else
          {
            v137 = (float32x4_t *)(v122 + 4 * v131 * v6);
            if (v136 >= v6)
              v136 = v6;
            if (!v136)
              v137 = 0;
            if (v133 < 7)
            {
LABEL_208:
              v140 = 0.0;
              v138 = (float *)v137;
              v145 = (float *)v184;
              do
              {
LABEL_209:
                v146 = *v145++;
                v147 = v146;
                v148 = *v138++;
                v140 = v140 + (float)(v147 * v148);
              }
              while (v145 != v132);
              goto LABEL_210;
            }
          }
          v138 = &v137->f32[v134];
          v139 = v137 + 1;
          v140 = 0.0;
          v141 = (v133 + 1) & 0x7FFFFFFFFFFFFFF8;
          v142 = v184 + 1;
          do
          {
            v143 = vmulq_f32(v142[-1], v139[-1]);
            v144 = vmulq_f32(*v142, *v139);
            v140 = (float)((float)((float)((float)((float)((float)((float)(v140 + v143.f32[0]) + v143.f32[1])
                                                         + v143.f32[2])
                                                 + v143.f32[3])
                                         + v144.f32[0])
                                 + v144.f32[1])
                         + v144.f32[2])
                 + v144.f32[3];
            v142 += 2;
            v139 += 2;
            v141 -= 8;
          }
          while (v141);
          v145 = &v184->f32[v134];
          if (v133 + 1 != v134)
            goto LABEL_209;
LABEL_210:
          v149 = v126 - v131 * v25;
          if (v126 <= v131 * v25)
          {
            v150 = 0;
            if (v129 >= 7)
              goto LABEL_217;
          }
          else
          {
            if (v149 >= v25)
              v149 = v25;
            if (v149)
              v150 = (float32x4_t *)(v127 + 4 * v131 * v25);
            else
              v150 = 0;
            if (v129 >= 7)
            {
LABEL_217:
              v151 = &v150->f32[v135];
              v152 = v150 + 1;
              v153 = 0.0;
              v154 = v130 & 0x7FFFFFFFFFFFFFF8;
              v155 = (float32x4_t *)v187;
              do
              {
                v156 = vmulq_f32(v155[-1], v152[-1]);
                v157 = vmulq_f32(*v155, *v152);
                v153 = (float)((float)((float)((float)((float)((float)((float)(v153 + v156.f32[0]) + v156.f32[1])
                                                             + v156.f32[2])
                                                     + v156.f32[3])
                                             + v157.f32[0])
                                     + v157.f32[1])
                             + v157.f32[2])
                     + v157.f32[3];
                v155 += 2;
                v152 += 2;
                v154 -= 8;
              }
              while (v154);
              v158 = &v186[v135];
              if (v130 == (v130 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_196;
              goto LABEL_223;
            }
          }
          v158 = v186;
          v153 = 0.0;
          v151 = (float *)v150;
          do
          {
LABEL_223:
            v159 = *v158++;
            v160 = v159;
            v161 = *v151++;
            v153 = v153 + (float)(v160 * v161);
          }
          while (v158 != v128);
LABEL_196:
          v17[v131] = (float)(fmaxf((float)(*(float *)(result + 4 * v131) + v140) + v153, 0.0)
                            * (float)(1.0 - v185[v131 + 24]))
                    + (float)(v185[v131 + 24] * v17[v131]);
          if (++v131 == v25)
            return result;
        }
      }
      v162 = 0;
      v163 = v130 & 0x7FFFFFFFFFFFFFF8;
      while (1)
      {
        v164 = v126 - v162 * v25;
        if (v126 <= v162 * v25)
        {
          v165 = 0;
          if (v129 >= 7)
            goto LABEL_234;
        }
        else
        {
          if (v164 >= v25)
            v164 = v25;
          if (v164)
            v165 = (float32x4_t *)(v127 + 4 * v162 * v25);
          else
            v165 = 0;
          if (v129 >= 7)
          {
LABEL_234:
            v166 = &v165->f32[v163];
            v167 = v165 + 1;
            v168 = 0.0;
            v169 = v130 & 0x7FFFFFFFFFFFFFF8;
            v170 = (float32x4_t *)v187;
            do
            {
              v171 = vmulq_f32(v170[-1], v167[-1]);
              v172 = vmulq_f32(*v170, *v167);
              v168 = (float)((float)((float)((float)((float)((float)((float)(v168 + v171.f32[0]) + v171.f32[1])
                                                           + v171.f32[2])
                                                   + v171.f32[3])
                                           + v172.f32[0])
                                   + v172.f32[1])
                           + v172.f32[2])
                   + v172.f32[3];
              v170 += 2;
              v167 += 2;
              v169 -= 8;
            }
            while (v169);
            v173 = &v186[v163];
            if (v130 == (v130 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_226;
            goto LABEL_240;
          }
        }
        v173 = v186;
        v168 = 0.0;
        v166 = (float *)v165;
        do
        {
LABEL_240:
          v174 = *v173++;
          v175 = v174;
          v176 = *v166++;
          v168 = v168 + (float)(v175 * v176);
        }
        while (v173 != v128);
LABEL_226:
        v17[v162] = (float)(fmaxf((float)(*(float *)(result + 4 * v162) + 0.0) + v168, 0.0)
                          * (float)(1.0 - v185[v162 + 24]))
                  + (float)(v185[v162 + 24] * v17[v162]);
        if (++v162 == v25)
          return result;
      }
    }
    __break(1u);
  }
  return result;
}

void webrtc::RobustThroughputEstimator::~RobustThroughputEstimator(void **this)
{
  *this = &off_24C0BB910;
  std::deque<webrtc::PacketResult>::~deque[abi:sn180100](this + 7);
}

{
  *this = &off_24C0BB910;
  std::deque<webrtc::PacketResult>::~deque[abi:sn180100](this + 7);
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RobustThroughputEstimator::IncomingPacketFeedbackVector(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  TimeDelta v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  void **v59;
  void **v60;
  void **v61;
  unint64_t v62;
  void **v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  void *v73;
  unint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  int64_t v82;
  char *v83;
  char *v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  int64_t v89;
  unint64_t v90;
  char *v91;
  unint64_t v92;
  void *v93;
  uint64_t v94;
  char *v95;
  void *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  size_t v102;
  char *v103;
  unint64_t v104;
  unint64_t v105;
  char *v106;
  int64_t v107;
  unint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  __int128 *v113;
  char *v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  unint64_t v126;
  uint64_t v127;
  __int128 *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  __int128 *v144;
  char *v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  int64_t v154;
  unint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  __int128 *v160;
  char *v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  void **v167;
  unint64_t v168;
  unint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char v182;
  const char *v183;
  unint64_t v184;
  char *v185;
  _QWORD v186[2];
  void *__p[2];
  uint64_t v188;
  _BYTE v189[32];
  __int128 v190;
  __int128 v191;
  __int128 v192;

  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    v178 = a2[1];
    while (1)
    {
      if ((unint64_t)(*(_QWORD *)(v3 + 72) - 0x7FFFFFFFFFFFFFFFLL) < 2
        || (unint64_t)(*(_QWORD *)v3 - 0x7FFFFFFFFFFFFFFFLL) < 2)
      {
        goto LABEL_6;
      }
      v6 = *(char **)(a1 + 64);
      v7 = *(char **)(a1 + 72);
      v8 = v7 - v6;
      v9 = (v7 - v6) >> 3;
      v10 = v7 == v6 ? 0 : 51 * v9 - 1;
      v11 = *(_QWORD *)(a1 + 88);
      if (v10 == *(_QWORD *)(a1 + 96) + v11)
        break;
LABEL_23:
      if (v7 == v6
        || (v20 = *(_QWORD *)(a1 + 96) + *(_QWORD *)(a1 + 88), (v21 = *(_QWORD *)&v6[8 * (v20 / 0x33)]) == 0))
      {
LABEL_181:
        __break(1u);
LABEL_182:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      v22 = (_OWORD *)(v21 + 80 * (v20 % 0x33));
      *v22 = *(_OWORD *)v3;
      v23 = *(_OWORD *)(v3 + 16);
      v24 = *(_OWORD *)(v3 + 32);
      v25 = *(_OWORD *)(v3 + 64);
      v22[3] = *(_OWORD *)(v3 + 48);
      v22[4] = v25;
      v22[1] = v23;
      v22[2] = v24;
      v27 = *(_QWORD *)(a1 + 88);
      v26 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = v26 + 1;
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * ((v27 + v26) / 0x33uLL)) + 80 * ((v27 + v26) % 0x33uLL);
      *(_QWORD *)(v28 + 16) = llround(*(double *)(a1 + 48) * (double)*(uint64_t *)(v28 + 16));
      v29 = *(_QWORD *)(a1 + 96) - 1;
      if (*(_QWORD *)(a1 + 96) != 1)
      {
        do
        {
          v30 = v29 + *(_QWORD *)(a1 + 88);
          v31 = *(_QWORD *)(a1 + 64);
          v32 = *(_QWORD *)(v31 + 8 * (v30 / 0x33));
          v33 = v30 % 0x33;
          v34 = v30 - 1;
          v35 = (v30 - 1) / 0x33;
          v36 = *(_QWORD *)(v31 + 8 * v35);
          v37 = v34 - 51 * v35;
          if (*(_QWORD *)(v32 + 80 * v33 + 72) >= *(_QWORD *)(v36 + 80 * v37 + 72))
            break;
          v38 = (_OWORD *)(v36 + 80 * v37);
          v39 = (_OWORD *)(v32 + 80 * v33);
          *(_OWORD *)&v189[16] = v39[1];
          v190 = v39[2];
          v191 = v39[3];
          v192 = v39[4];
          *(_OWORD *)v189 = *v39;
          *v39 = *v38;
          v40 = v38[4];
          v42 = v38[1];
          v41 = v38[2];
          v39[3] = v38[3];
          v39[4] = v40;
          v39[1] = v42;
          v39[2] = v41;
          *v38 = *(_OWORD *)v189;
          v38[4] = v192;
          v38[3] = v191;
          v38[2] = v190;
          v38[1] = *(_OWORD *)&v189[16];
          --v29;
        }
        while (v29);
        v29 = *(_QWORD *)(a1 + 96) - 1;
      }
      v43 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * ((*(_QWORD *)(a1 + 88) + v29) / 0x33uLL))
          + 80 * ((*(_QWORD *)(a1 + 88) + v29) % 0x33uLL);
      v44 = *(_QWORD *)(v3 + 72);
      v45 = *(_QWORD *)(v43 + 72);
      v46 = 0x7FFFFFFFFFFFFFFFLL;
      v47 = v45 == 0x7FFFFFFFFFFFFFFFLL || v44 == 0x8000000000000000;
      if (v47
        || ((v46 = v45 - v44, v45 != 0x8000000000000000) ? (v48 = v44 == 0x7FFFFFFFFFFFFFFFLL) : (v48 = 1),
            !v48 ? (v49 = v46 <= 1000000) : (v49 = 1),
            !v49))
      {
        if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)2>() & 1) != 0)
          goto LABEL_46;
        v183 = "/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/modules/congest"
               "ion_controller/goog_cc/robust_throughput_estimator.cc";
        v184 = v179 & 0xFFFFFFFF00000000 | 0x2C2;
        v179 = v184;
        v185 = &v182;
        v186[0] = "Severe packet re-ordering or timestamps offset changed: ";
        v186[1] = &v183;
        webrtc::ToString((webrtc *)v46, v50, (char *)__p);
        if (SHIBYTE(v188) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v189, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
          v58 = v186;
          *(_QWORD *)&v189[24] = v186;
          if (SHIBYTE(v188) < 0)
          {
            operator delete(__p[0]);
            v58 = *(_QWORD **)&v189[24];
          }
        }
        else
        {
          *(_OWORD *)v189 = *(_OWORD *)__p;
          v58 = v186;
          *(_QWORD *)&v189[16] = v188;
          *(_QWORD *)&v189[24] = v186;
        }
        rtc::webrtc_logging_impl::Log(rtc::webrtc_logging_impl::LogStreamer<>::Call<rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal>(rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)13,rtc::webrtc_logging_impl::LogMetadata>,rtc::webrtc_logging_impl::Val<(rtc::webrtc_logging_impl::LogArgType)9,char const*>,rtc::webrtc_logging_impl::ToStringVal const&)::t, v51, v52, v53, v54, v55, v56, v57, *(_QWORD *)v58[1]);
        if ((v189[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)v189);
          v59 = *(void ***)(a1 + 64);
          v60 = *(void ***)(a1 + 72);
          v61 = v59;
          if (v60 != v59)
            goto LABEL_47;
        }
        else
        {
LABEL_46:
          v59 = *(void ***)(a1 + 64);
          v60 = *(void ***)(a1 + 72);
          v61 = v59;
          if (v60 != v59)
          {
LABEL_47:
            v62 = *(_QWORD *)(a1 + 88);
            v63 = &v59[v62 / 0x33];
            v64 = (unint64_t)*v63;
            v65 = (unint64_t)*v63 + 80 * (v62 % 0x33);
            v66 = (unint64_t)v59[(*(_QWORD *)(a1 + 96) + v62) / 0x33]
                + 80 * ((*(_QWORD *)(a1 + 96) + v62) % 0x33);
            while (v65 != v66)
            {
              if (!v65)
                goto LABEL_181;
              v65 += 80;
              if (v65 - v64 == 4080)
              {
                v67 = (unint64_t)v63[1];
                ++v63;
                v64 = v67;
                v65 = v67;
              }
            }
            v61 = v60;
          }
        }
        *(_QWORD *)(a1 + 96) = 0;
        v68 = (char *)v61 - (char *)v59;
        if ((unint64_t)((char *)v61 - (char *)v59) >= 0x11)
        {
          do
          {
            operator delete(*v59);
            v69 = *(_QWORD *)(a1 + 72);
            v59 = (void **)(*(_QWORD *)(a1 + 64) + 8);
            *(_QWORD *)(a1 + 64) = v59;
            v68 = v69 - (_QWORD)v59;
          }
          while (v68 > 0x10);
        }
        if (v68 >> 3 != 1)
        {
          if (v68 >> 3 == 2)
          {
            v5 = 51;
LABEL_4:
            *(_QWORD *)(a1 + 88) = v5;
          }
          *(_QWORD *)(a1 + 104) = 0x8000000000000000;
          goto LABEL_6;
        }
        v5 = 25;
        goto LABEL_4;
      }
LABEL_6:
      v3 += 80;
      if (v3 == v4)
        goto LABEL_156;
    }
    v12 = v11 >= 0x33;
    v13 = v11 - 51;
    if (!v12)
    {
      v16 = *(char **)(a1 + 80);
      v17 = *(char **)(a1 + 56);
      if (v9 >= (unint64_t)((v16 - v17) >> 3))
      {
        if (v16 == v17)
          v70 = 1;
        else
          v70 = (v16 - v17) >> 2;
        if (v70 >> 61)
          goto LABEL_182;
        v71 = (char *)operator new(8 * v70);
        v72 = &v71[8 * v9];
        v73 = operator new(0xFF0uLL);
        if (v9 == v70)
        {
          if (v8 < 1)
          {
            v92 = v8 >> 2;
            if (v7 == v6)
              v92 = 1;
            if (v92 >> 61)
              goto LABEL_182;
            v93 = v73;
            v94 = 8 * v92;
            v72 = (char *)operator new(8 * v92);
            operator delete(v71);
            v75 = &v72[v94];
            v95 = *(char **)(a1 + 64);
            v7 = *(char **)(a1 + 72);
            v71 = v72;
            *(_QWORD *)v72 = v93;
            v76 = v72 + 8;
            if (v7 != v95)
              goto LABEL_95;
          }
          else
          {
            v74 = v9 + 2;
            if (v9 >= -1)
              v74 = v9 + 1;
            v72 -= 8 * (v74 >> 1);
            v75 = &v71[8 * v70];
            *(_QWORD *)v72 = v73;
            v76 = v72 + 8;
            if (v7 != v6)
            {
              do
              {
LABEL_95:
                if (v72 == v71)
                {
                  if (v76 >= v75)
                  {
                    v104 = (v75 - v72) >> 2;
                    if (v75 == v72)
                      v104 = 1;
                    if (v104 >> 61)
                      goto LABEL_182;
                    v105 = (v104 + 3) >> 2;
                    v181 = 8 * v104;
                    v106 = (char *)operator new(8 * v104);
                    v71 = v106;
                    v97 = &v106[8 * v105];
                    v98 = v97;
                    v107 = v76 - v72;
                    if (v76 != v72)
                    {
                      v98 = &v97[v107 & 0xFFFFFFFFFFFFFFF8];
                      v108 = v107 - 8;
                      v109 = &v106[8 * v105];
                      v110 = v72;
                      if (v108 < 0x38)
                        goto LABEL_185;
                      v109 = &v106[8 * v105];
                      v110 = v72;
                      if ((unint64_t)(v109 - v72) < 0x20)
                        goto LABEL_185;
                      v111 = (v108 >> 3) + 1;
                      v112 = 8 * (v111 & 0x3FFFFFFFFFFFFFFCLL);
                      v109 = &v97[v112];
                      v110 = &v72[v112];
                      v113 = (__int128 *)(v72 + 16);
                      v114 = &v106[8 * v105 + 16];
                      v115 = v111 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v116 = *v113;
                        *((_OWORD *)v114 - 1) = *(v113 - 1);
                        *(_OWORD *)v114 = v116;
                        v113 += 2;
                        v114 += 32;
                        v115 -= 4;
                      }
                      while (v115);
                      if (v111 != (v111 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_185:
                        do
                        {
                          v117 = *(_QWORD *)v110;
                          v110 += 8;
                          *(_QWORD *)v109 = v117;
                          v109 += 8;
                        }
                        while (v109 != v98);
                      }
                    }
                    v118 = &v106[v181];
                    operator delete(v72);
                    v75 = v118;
                  }
                  else
                  {
                    v100 = (v75 - v76) >> 3;
                    if (v100 >= -1)
                      v101 = v100 + 1;
                    else
                      v101 = v100 + 2;
                    v98 = &v76[8 * (v101 >> 1)];
                    v97 = &v72[8 * (v101 >> 1)];
                    v102 = v76 - v72;
                    if (v76 == v72)
                    {
                      v71 = v76;
                    }
                    else
                    {
                      v103 = v75;
                      memmove(&v72[8 * (v101 >> 1)], v72, v102);
                      v75 = v103;
                      v71 = v72;
                    }
                  }
                }
                else
                {
                  v97 = v72;
                  v98 = v76;
                }
                v99 = *((_QWORD *)v7 - 1);
                v7 -= 8;
                *((_QWORD *)v97 - 1) = v99;
                v72 = v97 - 8;
                v76 = v98;
              }
              while (v7 != *(char **)(a1 + 64));
            }
          }
        }
        else
        {
          v75 = &v71[8 * v70];
          *(_QWORD *)v72 = v73;
          v76 = v72 + 8;
          if (v7 != v6)
            goto LABEL_95;
        }
        v96 = *(void **)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v71;
        *(_QWORD *)(a1 + 64) = v72;
        v7 = v76;
        *(_QWORD *)(a1 + 72) = v76;
        *(_QWORD *)(a1 + 80) = v75;
        v4 = v178;
        if (v96)
        {
          operator delete(v96);
          v7 = *(char **)(a1 + 72);
        }
        goto LABEL_22;
      }
      v18 = operator new(0xFF0uLL);
      v19 = v18;
      if (v16 != v7)
      {
        if (!v7)
          goto LABEL_181;
        *(_QWORD *)v7 = v18;
        v7 = (char *)(*(_QWORD *)(a1 + 72) + 8);
        *(_QWORD *)(a1 + 72) = v7;
        v4 = v178;
        goto LABEL_22;
      }
      if (v6 == v17)
      {
        v119 = (v16 - v6) >> 2;
        if (v7 == v6)
          v119 = 1;
        if (v119 >> 61)
          goto LABEL_182;
        v120 = (v119 + 3) >> 2;
        v121 = 8 * v119;
        v122 = (char *)operator new(8 * v119);
        v84 = &v122[8 * v120];
        v123 = v84;
        if (v7 != v6)
        {
          v123 = &v84[8 * v9];
          v124 = &v122[8 * v120];
          v125 = v6;
          if ((unint64_t)(v8 - 8) < 0x38)
            goto LABEL_186;
          v124 = &v122[8 * v120];
          v125 = v6;
          if ((unint64_t)(v124 - v6) < 0x20)
            goto LABEL_186;
          v126 = ((unint64_t)(v8 - 8) >> 3) + 1;
          v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
          v124 = &v84[v127];
          v125 = &v6[v127];
          v128 = (__int128 *)(v6 + 16);
          v129 = &v122[8 * v120 + 16];
          v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v131 = *v128;
            *((_OWORD *)v129 - 1) = *(v128 - 1);
            *(_OWORD *)v129 = v131;
            v128 += 2;
            v129 += 32;
            v130 -= 4;
          }
          while (v130);
          if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_186:
            do
            {
              v132 = *(_QWORD *)v125;
              v125 += 8;
              *(_QWORD *)v124 = v132;
              v124 += 8;
            }
            while (v124 != v123);
          }
        }
        *(_QWORD *)(a1 + 56) = v122;
        *(_QWORD *)(a1 + 64) = v84;
        *(_QWORD *)(a1 + 72) = v123;
        *(_QWORD *)(a1 + 80) = &v122[v121];
        if (v6)
        {
          operator delete(v6);
          v84 = *(char **)(a1 + 64);
        }
      }
      else
      {
        v84 = v6;
      }
      *((_QWORD *)v84 - 1) = v19;
      v133 = *(char **)(a1 + 64);
      v134 = *(char **)(a1 + 72);
      *(_QWORD *)(a1 + 64) = v133 - 8;
      v135 = *((_QWORD *)v133 - 1);
      *(_QWORD *)(a1 + 64) = v133;
      v4 = v178;
      if (v134 != *(char **)(a1 + 80))
        goto LABEL_127;
      v136 = *(char **)(a1 + 56);
      if (v133 > v136)
      {
        v137 = (v133 - v136) >> 3;
        if (v137 >= -1)
          v138 = v137 + 1;
        else
          v138 = v137 + 2;
        v139 = v138 >> 1;
        v140 = &v133[-8 * (v138 >> 1)];
        v141 = v134 - v133;
        if (v134 != v133)
        {
          memmove(&v133[-8 * (v138 >> 1)], v133, v134 - v133);
          v133 = *(char **)(a1 + 64);
        }
        v134 = &v140[v141];
        *(_QWORD *)(a1 + 64) = &v133[-8 * v139];
        *(_QWORD *)(a1 + 72) = &v140[v141];
LABEL_128:
        *(_QWORD *)v134 = v135;
        v7 = (char *)(*(_QWORD *)(a1 + 72) + 8);
        *(_QWORD *)(a1 + 72) = v7;
        goto LABEL_22;
      }
      v149 = (v134 - v136) >> 2;
      if (v134 == v136)
        v149 = 1;
      if (v149 >> 61)
        goto LABEL_182;
      v150 = v149 >> 2;
      v151 = 8 * v149;
      v152 = (char *)operator new(8 * v149);
      v153 = &v152[8 * v150];
      v154 = v134 - v133;
      v47 = v134 == v133;
      v134 = v153;
      if (!v47)
      {
        v134 = &v153[v154 & 0xFFFFFFFFFFFFFFF8];
        v155 = v154 - 8;
        if ((unint64_t)(v154 - 8) < 0x38)
        {
          v156 = &v152[8 * v150];
          do
          {
LABEL_153:
            v164 = *(_QWORD *)v133;
            v133 += 8;
            *(_QWORD *)v156 = v164;
            v156 += 8;
          }
          while (v156 != v134);
          goto LABEL_154;
        }
        v156 = &v152[8 * v150];
        if ((unint64_t)(v156 - v133) < 0x20)
          goto LABEL_153;
        v157 = (v155 >> 3) + 1;
        v158 = 8 * (v157 & 0x3FFFFFFFFFFFFFFCLL);
        v156 = &v153[v158];
        v159 = &v133[v158];
        v160 = (__int128 *)(v133 + 16);
        v161 = &v152[8 * v150 + 16];
        v162 = v157 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v163 = *v160;
          *((_OWORD *)v161 - 1) = *(v160 - 1);
          *(_OWORD *)v161 = v163;
          v160 += 2;
          v161 += 32;
          v162 -= 4;
        }
        while (v162);
        v133 = v159;
        if (v157 != (v157 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_153;
      }
LABEL_154:
      *(_QWORD *)(a1 + 56) = v152;
      *(_QWORD *)(a1 + 64) = v153;
      *(_QWORD *)(a1 + 72) = v134;
      *(_QWORD *)(a1 + 80) = &v152[v151];
      if (v136)
      {
        operator delete(v136);
        v134 = *(char **)(a1 + 72);
      }
LABEL_127:
      if (!v134)
        goto LABEL_181;
      goto LABEL_128;
    }
    *(_QWORD *)(a1 + 88) = v13;
    v14 = v6 + 8;
    v15 = *(_QWORD *)v6;
    *(_QWORD *)(a1 + 64) = v6 + 8;
    if (v7 != *(char **)(a1 + 80))
      goto LABEL_16;
    v77 = *(char **)(a1 + 56);
    if (v14 > v77)
    {
      v78 = (v14 - v77) >> 3;
      if (v78 >= -1)
        v79 = v78 + 1;
      else
        v79 = v78 + 2;
      v80 = v79 >> 1;
      v81 = &v14[-8 * (v79 >> 1)];
      v82 = v7 - v14;
      if (v7 != v14)
      {
        memmove(&v14[-8 * (v79 >> 1)], v14, v7 - v14);
        v7 = *(char **)(a1 + 64);
      }
      v83 = &v7[-8 * v80];
      v7 = &v81[v82];
      *(_QWORD *)(a1 + 64) = v83;
      *(_QWORD *)(a1 + 72) = &v81[v82];
LABEL_17:
      *(_QWORD *)v7 = v15;
      v7 = (char *)(*(_QWORD *)(a1 + 72) + 8);
      *(_QWORD *)(a1 + 72) = v7;
LABEL_22:
      v6 = *(char **)(a1 + 64);
      goto LABEL_23;
    }
    v85 = (v7 - v77) >> 2;
    if (v7 == v77)
      v85 = 1;
    if (v85 >> 61)
      goto LABEL_182;
    v86 = v85 >> 2;
    v180 = 8 * v85;
    v87 = (char *)operator new(8 * v85);
    v88 = &v87[8 * v86];
    v89 = v7 - v14;
    v47 = v7 == v14;
    v7 = v88;
    if (!v47)
    {
      v7 = &v88[v89 & 0xFFFFFFFFFFFFFFF8];
      v90 = v89 - 8;
      if ((unint64_t)(v89 - 8) < 0x38)
      {
        v91 = &v87[8 * v86];
        do
        {
LABEL_140:
          v148 = *(_QWORD *)v14;
          v14 += 8;
          *(_QWORD *)v91 = v148;
          v91 += 8;
        }
        while (v91 != v7);
        goto LABEL_141;
      }
      v91 = &v87[8 * v86];
      if ((unint64_t)(v91 - v14) < 0x20)
        goto LABEL_140;
      v142 = (v90 >> 3) + 1;
      v143 = 8 * (v142 & 0x3FFFFFFFFFFFFFFCLL);
      v91 = &v88[v143];
      v14 += v143;
      v144 = (__int128 *)(v6 + 24);
      v145 = &v87[8 * v86 + 16];
      v146 = v142 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v147 = *v144;
        *((_OWORD *)v145 - 1) = *(v144 - 1);
        *(_OWORD *)v145 = v147;
        v144 += 2;
        v145 += 32;
        v146 -= 4;
      }
      while (v146);
      if (v142 != (v142 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_140;
    }
LABEL_141:
    *(_QWORD *)(a1 + 56) = v87;
    *(_QWORD *)(a1 + 64) = v88;
    *(_QWORD *)(a1 + 72) = v7;
    *(_QWORD *)(a1 + 80) = &v87[v180];
    if (v77)
    {
      operator delete(v77);
      v7 = *(char **)(a1 + 72);
    }
LABEL_16:
    if (!v7)
      goto LABEL_181;
    goto LABEL_17;
  }
LABEL_156:
  v165 = *(_QWORD *)(a1 + 96);
  if (v165)
  {
    v166 = *(_QWORD *)(a1 + 88);
    v167 = *(void ***)(a1 + 64);
    do
    {
      if (v165 <= *(unsigned int *)(a1 + 16))
      {
        v168 = v166 / 0x33;
        v170 = v167[v166 / 0x33];
        v169 = v166 % 0x33;
        v171 = v170[10 * (v166 % 0x33) + 9];
        v172 = *((_QWORD *)v167[(v166 + v165 - 1) / 0x33] + 10 * ((v166 + v165 - 1) % 0x33) + 9);
        v173 = v172 - v171;
        if (v171 == 0x7FFFFFFFFFFFFFFFLL || v172 == 0x8000000000000000)
          v173 = 0x8000000000000000;
        if (v172 == 0x7FFFFFFFFFFFFFFFLL || v171 == 0x8000000000000000)
          v176 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v176 = v173;
        if (v176 <= *(_QWORD *)(a1 + 32) && (v165 <= *(unsigned int *)(a1 + 12) || v176 <= *(_QWORD *)(a1 + 24)))
          return;
      }
      else
      {
        v168 = v166 / 0x33;
        v169 = v166 % 0x33;
        v170 = v167[v166 / 0x33];
      }
      v177 = v170[10 * v169];
      if (*(_QWORD *)(a1 + 104) > v177)
        v177 = *(_QWORD *)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v177;
      if (!v167[v168])
        goto LABEL_181;
      --v165;
      *(_QWORD *)(a1 + 88) = ++v166;
      *(_QWORD *)(a1 + 96) = v165;
      if (v166 >= 0x66)
      {
        operator delete(*v167);
        v167 = (void **)(*(_QWORD *)(a1 + 64) + 8);
        *(_QWORD *)(a1 + 64) = v167;
        v165 = *(_QWORD *)(a1 + 96);
        v166 = *(_QWORD *)(a1 + 88) - 51;
        *(_QWORD *)(a1 + 88) = v166;
      }
    }
    while (v165);
  }
}

unint64_t webrtc::RobustThroughputEstimator::bitrate(webrtc::RobustThroughputEstimator *this)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int64_t v13;
  unint64_t v15;
  int64_t *v16;
  int64_t *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  int64_t v31;
  int64_t v32;
  BOOL v33;
  BOOL v35;
  unint64_t v36;
  int64_t v37;
  BOOL v38;
  BOOL v39;
  unint64_t v40;
  int64_t v42;
  char v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  BOOL v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  uint64_t v51;
  int64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  unint64_t v58;
  unint64_t v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v69;

  v1 = *((_QWORD *)this + 12);
  if (!v1 || (v2 = *((unsigned int *)this + 10), v1 < v2))
  {
    LOBYTE(v3) = 0;
    v4 = 0;
    return v4 | v3;
  }
  if (v1 <= 1)
  {
    v7 = 0;
    v6 = 0;
    v9 = *((_QWORD *)this + 8);
    v8 = *((_QWORD *)this + 11);
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *((_QWORD *)this + 11);
    v9 = *((_QWORD *)this + 8);
    do
    {
      v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * ((v8 + v5) / 0x33)) + 80 * ((v8 + v5) % 0x33) + 72);
      v11 = *(_QWORD *)(*(_QWORD *)(v9 + 8 * ((v8 + v5 + 1) / 0x33)) + 80 * ((v8 + v5 + 1) % 0x33) + 72);
      v12 = v11 == 0x7FFFFFFFFFFFFFFFLL || v10 == 0x8000000000000000;
      v13 = 0x7FFFFFFFFFFFFFFFLL;
      if (!v12)
      {
        v13 = v11 - v10;
        if (v10 == 0x7FFFFFFFFFFFFFFFLL || v11 == 0x8000000000000000)
          v13 = 0x8000000000000000;
      }
      if (v13 > v7)
        v7 = v13;
      if (v13 > v6)
      {
        v7 = v6;
        v6 = v13;
      }
      ++v5;
    }
    while (v1 - 1 != v5);
  }
  if (*((_QWORD *)this + 9) != v9)
  {
    v15 = v8 / 0x33;
    v16 = *(int64_t **)(v9 + 8 * (v8 / 0x33));
    v17 = &v16[10 * (v8 % 0x33)];
    v18 = *(_QWORD *)(v9 + 8 * ((v8 + v1) / 0x33)) + 80 * ((v8 + v1) % 0x33);
    if (v17 != (int64_t *)v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = *((_QWORD *)this + 13);
      v25 = 0x7FFFFFFFFFFFFFFFLL;
      v26 = 0x8000000000000000;
      v27 = 0x7FFFFFFFFFFFFFFFLL;
      v28 = 0x8000000000000000;
      v29 = v9 + 8 * v15;
      while (1)
      {
        v30 = v17[9];
        if (v30 >= v27)
        {
          v32 = v17[1];
          if (v28 <= v30)
            v28 = v17[9];
          if (v23 == 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_63;
        }
        else
        {
          v32 = v17[1];
          v31 = v17[2];
          v33 = v31 == 0x8000000000000000 || v32 == 0x8000000000000000;
          v19 = v32 + v31;
          if (v33)
            v19 = 0x8000000000000000;
          if (v32 == 0x7FFFFFFFFFFFFFFFLL || v31 == 0x7FFFFFFFFFFFFFFFLL)
            v19 = 0x7FFFFFFFFFFFFFFFLL;
          v27 = v17[9];
          if (v28 <= v30)
            v28 = v17[9];
          if (v23 == 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_63;
        }
        if (v32 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v35 = v32 == 0x8000000000000000 || v23 == 0x8000000000000000;
          v36 = v32 + v23;
          if (v35)
            v36 = 0x8000000000000000;
          v37 = v17[2];
          v38 = v37 == 0x7FFFFFFFFFFFFFFFLL;
          v39 = v37 == 0x8000000000000000 || v36 == 0x8000000000000000;
          v40 = v37 + v36;
          if (v39)
            v40 = 0x8000000000000000;
          if (v36 == 0x7FFFFFFFFFFFFFFFLL || v37 == 0x7FFFFFFFFFFFFFFFLL)
          {
            v23 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v38 = 0;
            v23 = v40;
          }
          v42 = *v17;
          if (*v17 < v24)
            goto LABEL_100;
LABEL_64:
          v43 = v32 == 0x7FFFFFFFFFFFFFFFLL || v38;
          v44 = v37 == 0x8000000000000000 || v32 == 0x8000000000000000;
          v45 = v37 + v32;
          if (v44)
            v45 = 0x8000000000000000;
          if ((v43 & 1) != 0)
            v46 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v46 = v45;
          if (v42 > v26)
          {
            v26 = v42;
            v20 = v46;
          }
          if (v42 < v25)
            v25 = v42;
          v47 = v32 == 0x8000000000000000 || v22 == 0x8000000000000000;
          v48 = v32 + v22;
          if (v47)
            v48 = 0x8000000000000000;
          if (v48 == 0x7FFFFFFFFFFFFFFFLL)
            v38 = 1;
          v49 = v37 == 0x8000000000000000 || v48 == 0x8000000000000000;
          v50 = v37 + v48;
          if (v49)
            v50 = 0x8000000000000000;
          if (v38)
            v50 = 0x7FFFFFFFFFFFFFFFLL;
          if (v32 == 0x7FFFFFFFFFFFFFFFLL)
            v51 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v51 = v50;
          if (v22 == 0x7FFFFFFFFFFFFFFFLL)
            v22 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v22 = v51;
          ++v21;
          goto LABEL_100;
        }
LABEL_63:
        v37 = v17[2];
        v23 = 0x7FFFFFFFFFFFFFFFLL;
        v38 = v37 == 0x7FFFFFFFFFFFFFFFLL;
        v42 = *v17;
        if (*v17 >= v24)
          goto LABEL_64;
LABEL_100:
        v17 += 10;
        if ((char *)v17 - (char *)v16 == 4080)
        {
          v52 = *(int64_t **)(v29 + 8);
          v29 += 8;
          v16 = v52;
          v17 = v52;
        }
        if (v17 == (int64_t *)v18)
          goto LABEL_103;
      }
    }
  }
  v23 = 0;
  v22 = 0;
  v21 = 0;
  v20 = 0;
  v19 = 0;
  v28 = 0x8000000000000000;
  v27 = 0x7FFFFFFFFFFFFFFFLL;
  v26 = 0x8000000000000000;
  v25 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_103:
  v53 = -8000000;
  v54 = -8000000;
  if (v23 != 0x7FFFFFFFFFFFFFFFLL && v19 != 0x8000000000000000)
  {
    if (v19 == 0x7FFFFFFFFFFFFFFFLL || v23 == 0x8000000000000000)
      v54 = 0;
    else
      v54 = 8000000 * (v23 - v19);
  }
  v56 = 0x7FFFFFFFFFFFFFFFLL;
  if (v22 != 0x7FFFFFFFFFFFFFFFLL && v20 != 0x8000000000000000)
  {
    if (v20 == 0x7FFFFFFFFFFFFFFFLL || v22 == 0x8000000000000000)
      v53 = 0;
    else
      v53 = 8000000 * (v22 - v20);
  }
  if (v28 != 0x7FFFFFFFFFFFFFFFLL)
  {
    v58 = 0x8000000000000000;
    if (v27 != 0x8000000000000000)
    {
      if (v27 != 0x7FFFFFFFFFFFFFFFLL && v28 != 0x8000000000000000)
        v58 = v28 - v27;
      if (v58 != 0x7FFFFFFFFFFFFFFFLL)
      {
        v60 = v58 - v6;
        v12 = v6 == 0x7FFFFFFFFFFFFFFFLL;
        v61 = 0x8000000000000000;
        if (!v12 && v58 != 0x8000000000000000)
          v61 = v60;
        if (v61 != 0x7FFFFFFFFFFFFFFFLL && v7 != 0x7FFFFFFFFFFFFFFFLL)
        {
          v63 = v61 + v7;
          if (v63 < 1000 || v61 == 0x8000000000000000)
            v56 = 1000;
          else
            v56 = v63;
        }
      }
    }
  }
  if (v21 >= v2)
  {
    v65 = 0x7FFFFFFFFFFFFFFFLL;
    v66 = v26 - v25;
    if (v26 - v25 < 1000 || v25 == 0x7FFFFFFFFFFFFFFFLL || v26 == 0x8000000000000000)
      v66 = 1000;
    if (v25 == 0x8000000000000000)
      v69 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v69 = v66;
    if (v26 != 0x7FFFFFFFFFFFFFFFLL)
      v65 = v69;
    v3 = v53 / v65;
    if (v54 / v56 < v3)
      v3 = v54 / v56;
  }
  else
  {
    v3 = v54 / v56;
  }
  v4 = v3 & 0xFFFFFFFFFFFFFF00;
  return v4 | v3;
}

uint64_t webrtc::RobustThroughputEstimator::PeekRate(webrtc::RobustThroughputEstimator *this)
{
  return (*(uint64_t (**)(webrtc::RobustThroughputEstimator *))(*(_QWORD *)this + 24))(this);
}

void **std::deque<webrtc::PacketResult>::~deque[abi:sn180100](void **result)
{
  void **v1;
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE *v14;
  _BYTE *v15;

  v1 = result;
  v2 = (void **)result[1];
  v3 = (void **)result[2];
  if (v3 == v2)
  {
    v4 = result + 5;
    v3 = (void **)result[1];
  }
  else
  {
    v4 = result + 5;
    v5 = (unint64_t)result[4];
    v6 = &v2[v5 / 0x33];
    v7 = (unint64_t)*v6;
    v8 = (unint64_t)*v6 + 80 * (v5 % 0x33);
    while ((void *)v8 != (char *)v2[((unint64_t)result[5] + v5) / 0x33]
                        + 80 * (((unint64_t)result[5] + v5) % 0x33))
    {
      if (!v8)
      {
        __break(1u);
        return result;
      }
      v8 += 80;
      if (v8 - v7 == 4080)
      {
        v9 = (unint64_t)v6[1];
        ++v6;
        v7 = v9;
        v8 = v9;
      }
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)v1[2];
      v2 = (void **)((char *)v1[1] + 8);
      v1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 25;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_15;
    v12 = 51;
  }
  v1[4] = (void *)v12;
LABEL_15:
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = v1[1];
    v14 = v1[2];
    if (v14 != v15)
      v1[2] = &v14[(v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*v1)
    operator delete(*v1);
  return v1;
}

double TransposeWx8_NEON(int8x8_t *a1, int a2, int32x2_t *a3, int a4, int a5)
{
  int v5;
  int8x8_t *v6;
  int8x8_t v7;
  int8x8_t *v8;
  int8x8_t v9;
  int8x8_t *v10;
  int8x8_t v11;
  int8x8_t *v12;
  int8x8_t v13;
  int8x8_t *v14;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v17;
  int16x4_t v19;
  int16x4_t v25;
  int16x4_t v27;
  int16x4_t v29;
  int16x4_t v31;
  int16x4_t v33;
  int16x4_t v35;
  int16x4_t v37;
  int32x2_t v39;
  int32x2_t v41;
  int32x2_t v43;
  int8x16_t v45;
  int32x2_t v47;
  int32x2_t v49;
  int32x2_t v51;
  int32x2_t v53;
  int32x2_t *v54;
  int32x2_t *v55;
  int32x2_t *v56;
  int32x2_t *v57;
  int32x2_t *v58;
  int v59;
  int8x16_t v60;
  __int32 *v61;
  __int32 *v62;
  __int32 *v63;
  __int32 *v64;
  int8x16_t v65;
  __int32 *v66;
  int8x16_t v67;
  int32x2_t *v68;
  int32x2_t *v69;
  int32x2_t *v70;
  __int16 *v71;
  int8x8_t v72;
  __int16 *v73;
  __int16 *v74;
  __int16 *v75;
  __int16 *v76;
  __int8 *v77;
  __int8 *v78;
  __int8 *v79;
  __int8 *v80;
  __int8 *v81;
  __int8 *v82;

  v5 = a5 - 8;
  do
  {
    v7 = *(int8x8_t *)((char *)a1 + a2);
    v6 = (int8x8_t *)((char *)a1 + a2 + a2);
    v9 = *v6;
    v8 = (int8x8_t *)((char *)v6 + a2);
    v11 = *v8;
    v10 = (int8x8_t *)((char *)v8 + a2);
    v13 = *v10;
    v12 = (int8x8_t *)((char *)v10 + a2);
    v15 = *v12;
    v14 = (int8x8_t *)((char *)v12 + a2);
    v16 = *v14;
    v17 = *(int8x8_t *)((char *)v14 + a2);
    _X11 = a1;
    v19 = (int16x4_t)vtrn2_s8(*a1, v7);
    __asm { PRFM            #0, [X11,#0x1C0] }
    v25 = (int16x4_t)vtrn1_s8(*a1, v7);
    _X11 = (char *)a1 + a2;
    v27 = (int16x4_t)vtrn2_s8(v9, v11);
    __asm { PRFM            #0, [X11,#0x1C0] }
    v29 = (int16x4_t)vtrn1_s8(v9, v11);
    _X11 = &_X11[a2];
    v31 = (int16x4_t)vtrn2_s8(v13, v15);
    __asm { PRFM            #0, [X11,#0x1C0] }
    v33 = (int16x4_t)vtrn1_s8(v13, v15);
    _X11 = &_X11[a2];
    v35 = (int16x4_t)vtrn2_s8(v16, v17);
    __asm { PRFM            #0, [X11,#0x1C0] }
    v37 = (int16x4_t)vtrn1_s8(v16, v17);
    _X11 = &_X11[a2];
    v39 = (int32x2_t)vtrn2_s16(v25, v29);
    __asm { PRFM            #0, [X11,#0x1C0] }
    v41 = (int32x2_t)vtrn1_s16(v25, v29);
    _X11 = &_X11[a2];
    v43 = (int32x2_t)vtrn2_s16(v19, v27);
    __asm { PRFM            #0, [X11,#0x1C0] }
    *(int16x4_t *)v45.i8 = vtrn1_s16(v19, v27);
    _X11 = &_X11[a2];
    v47 = (int32x2_t)vtrn2_s16(v33, v37);
    __asm { PRFM            #0, [X11,#0x1C0] }
    v49 = (int32x2_t)vtrn1_s16(v33, v37);
    _X11 = &_X11[a2];
    v51 = (int32x2_t)vtrn2_s16(v31, v35);
    __asm { PRFM            #0, [X11,#0x1C0] }
    v53 = (int32x2_t)vtrn1_s16(v31, v35);
    *a3 = vtrn1_s32(v41, v49);
    *(int32x2_t *)((char *)a3 + a4) = vtrn1_s32(*(int32x2_t *)v45.i8, v53);
    v54 = (int32x2_t *)((char *)a3 + a4 + a4);
    *v54 = vtrn1_s32(v39, v47);
    v55 = (int32x2_t *)((char *)v54 + a4);
    *v55 = vtrn1_s32(v43, v51);
    v56 = (int32x2_t *)((char *)v55 + a4);
    *v56 = vtrn2_s32(v41, v49);
    v57 = (int32x2_t *)((char *)v56 + a4);
    *v57 = vtrn2_s32(*(int32x2_t *)v45.i8, v53);
    v58 = (int32x2_t *)((char *)v57 + a4);
    *v58 = vtrn2_s32(v39, v47);
    *(int32x2_t *)((char *)v58 + a4) = vtrn2_s32(v43, v51);
    ++a1;
    a3 += a4;
    _VF = __OFSUB__(v5, 8);
    v5 -= 8;
  }
  while (v5 < 0 == _VF);
  v59 = v5 + 8;
  if (v59)
  {
    if (v59 < 2)
      goto LABEL_10;
    if (v59 >= 4)
    {
      v60.i32[0] = a1->i32[0];
      v60.i32[1] = *(__int32 *)((char *)a1->i32 + a2);
      v61 = (__int32 *)((char *)a1 + a2 + a2);
      v60.i32[2] = *v61;
      v62 = (__int32 *)((char *)v61 + a2);
      v60.i32[3] = *v62;
      v63 = (__int32 *)((char *)v62 + a2);
      v65.i32[0] = *v63;
      v64 = (__int32 *)((char *)v63 + a2);
      v65.i32[1] = *v64;
      v66 = (__int32 *)((char *)v64 + a2);
      v65.i32[2] = *v66;
      v65.i32[3] = *(__int32 *)((char *)v66 + a2);
      v67 = vqtbl1q_s8(v60, libyuv::kVTbl4x4Transpose);
      v45 = vqtbl1q_s8(v65, libyuv::kVTbl4x4Transpose);
      a3->i32[0] = v67.i32[0];
      *(__int32 *)((char *)a3->i32 + a4) = v67.i32[1];
      v68 = (int32x2_t *)((char *)a3 + a4 + a4);
      v68->i32[0] = v67.i32[2];
      *(__int32 *)((char *)v68->i32 + a4) = v67.i32[3];
      a3->i32[1] = v45.i32[0];
      v69 = (int32x2_t *)((char *)a3 + a4 + 4);
      v69->i32[0] = v45.i32[1];
      v70 = (int32x2_t *)((char *)v69 + a4);
      v70->i32[0] = v45.i32[2];
      *(__int32 *)((char *)v70->i32 + a4) = v45.i32[3];
      a1 = (int8x8_t *)((char *)a1 + 4);
      a3 = (int32x2_t *)((char *)a3 + 4 * a4);
      v59 -= 4;
      if (!v59)
        return *(double *)v45.i64;
      if (v59 < 2)
      {
LABEL_10:
        v45.i8[0] = a1->i8[0];
        v77 = (char *)a1 + a2;
        v45.i8[1] = *v77;
        v78 = &v77[a2];
        v45.i8[2] = *v78;
        v79 = &v78[a2];
        v45.i8[3] = *v79;
        v80 = &v79[a2];
        v45.i8[4] = *v80;
        v81 = &v80[a2];
        v45.i8[5] = *v81;
        v82 = &v81[a2];
        v45.i8[6] = *v82;
        v45.i8[7] = v82[a2];
        *a3 = *(int32x2_t *)v45.i8;
        return *(double *)v45.i64;
      }
    }
    v45.i16[0] = a1->i16[0];
    v72.i16[0] = *(__int16 *)((char *)a1->i16 + a2);
    v71 = (__int16 *)((char *)a1 + a2 + a2);
    v45.i16[1] = *v71;
    v73 = (__int16 *)((char *)v71 + a2);
    v72.i16[1] = *v73;
    v74 = (__int16 *)((char *)v73 + a2);
    v45.i16[2] = *v74;
    v75 = (__int16 *)((char *)v74 + a2);
    v72.i16[2] = *v75;
    v76 = (__int16 *)((char *)v75 + a2);
    v45.i16[3] = *v76;
    v72.i16[3] = *(__int16 *)((char *)v76 + a2);
    *a3 = (int32x2_t)vtrn1_s8(*(int8x8_t *)v45.i8, v72);
    *(int8x8_t *)((char *)a3 + a4) = vtrn2_s8(*(int8x8_t *)v45.i8, v72);
    a1 = (int8x8_t *)((char *)a1 + 2);
    a3 = (int32x2_t *)((char *)a3 + 2 * a4);
    if (v59 != 2)
      goto LABEL_10;
  }
  return *(double *)v45.i64;
}

double TransposeUVWx8_NEON(int8x16_t *a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7)
{
  int v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t *v14;
  int8x16_t v15;
  int8x16_t *v16;
  int8x16_t v17;
  int8x16_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  BOOL v53;
  int v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  int8x8_t v70;
  __int16 *v71;
  int8x8_t v72;
  int8x8_t v73;
  __int16 *v74;
  __int16 *v75;
  __int16 *v76;
  __int16 *v77;
  __int16 *v78;
  __int8 *v79;
  uint64_t v80;
  __int8 *v81;
  __int8 *v82;
  __int8 *v83;
  __int8 *v84;
  __int8 *v85;
  __int8 *v86;

  v7 = a7 - 8;
  do
  {
    v9 = *(int8x16_t *)((char *)a1 + a2);
    v8 = (int8x16_t *)((char *)a1 + a2 + a2);
    v11 = *v8;
    v10 = (int8x16_t *)((char *)v8 + a2);
    v13 = *v10;
    v12 = (int8x16_t *)((char *)v10 + a2);
    v15 = *v12;
    v14 = (int8x16_t *)((char *)v12 + a2);
    v17 = *v14;
    v16 = (int8x16_t *)((char *)v14 + a2);
    v18 = *(int8x16_t *)((char *)v16 + a2);
    v19 = (int16x8_t)vtrn1q_s8(*a1, v9);
    v20 = (int16x8_t)vtrn2q_s8(*a1, v9);
    v21 = (int16x8_t)vtrn1q_s8(v11, v13);
    v22 = (int16x8_t)vtrn2q_s8(v11, v13);
    v23 = (int16x8_t)vtrn1q_s8(v15, v17);
    v24 = (int16x8_t)vtrn2q_s8(v15, v17);
    v25 = (int16x8_t)vtrn1q_s8(*v16, v18);
    v26 = (int16x8_t)vtrn2q_s8(*v16, v18);
    v27 = (int32x4_t)vtrn1q_s16(v19, v21);
    v28 = (int32x4_t)vtrn2q_s16(v19, v21);
    v29 = (int32x4_t)vtrn1q_s16(v23, v25);
    v30 = (int32x4_t)vtrn2q_s16(v23, v25);
    v31 = (int32x4_t)vtrn1q_s16(v20, v22);
    v32 = (int32x4_t)vtrn2q_s16(v20, v22);
    v33 = (int32x4_t)vtrn1q_s16(v24, v26);
    v34 = (int32x4_t)vtrn2q_s16(v24, v26);
    v35 = vtrn1q_s32(v27, v29);
    v36 = vtrn2q_s32(v27, v29);
    v37 = vtrn1q_s32(v28, v30);
    v38 = vtrn2q_s32(v28, v30);
    v39 = vtrn1q_s32(v31, v33);
    v40 = vtrn2q_s32(v31, v33);
    v41 = vtrn1q_s32(v32, v34);
    v42 = vtrn2q_s32(v32, v34);
    *(_QWORD *)a3 = v35.i64[0];
    *(_QWORD *)(a3 + a4) = v37.i64[0];
    v43 = (_QWORD *)(a3 + a4 + a4);
    *v43 = v36.i64[0];
    v44 = (_QWORD *)((char *)v43 + a4);
    *v44 = v38.i64[0];
    v45 = (_QWORD *)((char *)v44 + a4);
    *v45 = v35.i64[1];
    v46 = (_QWORD *)((char *)v45 + a4);
    *v46 = v37.i64[1];
    v47 = (_QWORD *)((char *)v46 + a4);
    *v47 = v36.i64[1];
    *(_QWORD *)((char *)v47 + a4) = v38.i64[1];
    *(_QWORD *)a5 = v39.i64[0];
    *(_QWORD *)(a5 + a6) = v41.i64[0];
    v48 = (_QWORD *)(a5 + a6 + a6);
    *v48 = v40.i64[0];
    v49 = (_QWORD *)((char *)v48 + a6);
    *v49 = v42.i64[0];
    v50 = (_QWORD *)((char *)v49 + a6);
    *v50 = v39.i64[1];
    v51 = (_QWORD *)((char *)v50 + a6);
    *v51 = v41.i64[1];
    v52 = (_QWORD *)((char *)v51 + a6);
    *v52 = v40.i64[1];
    *(_QWORD *)((char *)v52 + a6) = v42.i64[1];
    ++a1;
    a3 += 8 * a4;
    a5 += 8 * a6;
    v53 = __OFSUB__(v7, 8);
    v7 -= 8;
  }
  while (v7 < 0 == v53);
  v54 = v7 + 8;
  if (v54)
  {
    if (v54 < 2)
      goto LABEL_10;
    if (v54 >= 4)
    {
      v27.i64[0] = a1->i64[0];
      v28.i64[0] = *(uint64_t *)((char *)a1->i64 + a2);
      v55 = (uint64_t *)((char *)a1->i64 + a2 + a2);
      v29.i64[0] = *v55;
      v56 = (uint64_t *)((char *)v55 + a2);
      v30.i64[0] = *v56;
      v57 = (uint64_t *)((char *)v56 + a2);
      v31.i64[0] = *v57;
      v58 = (uint64_t *)((char *)v57 + a2);
      v32.i64[0] = *v58;
      v59 = (uint64_t *)((char *)v58 + a2);
      v33.i64[0] = *v59;
      v34.i64[0] = *(uint64_t *)((char *)v59 + a2);
      v60 = vqtbl4q_s8(*(int8x16x4_t *)v27.i8, libyuv::kVTbl4x4TransposeDi);
      v61 = vqtbl4q_s8(*(int8x16x4_t *)v27.i8, unk_208F19F90);
      v62 = vqtbl4q_s8(*(int8x16x4_t *)v31.i8, libyuv::kVTbl4x4TransposeDi);
      v63 = vqtbl4q_s8(*(int8x16x4_t *)v31.i8, unk_208F19F90);
      *(_DWORD *)a3 = v60.i32[0];
      *(_DWORD *)(a3 + a4) = v60.i32[1];
      v64 = (_DWORD *)(a3 + a4 + a4);
      *v64 = v60.i32[2];
      *(_DWORD *)((char *)v64 + a4) = v60.i32[3];
      *(_DWORD *)(a3 + 4) = v62.i32[0];
      v65 = (_DWORD *)(a3 + 4 + a4);
      *v65 = v62.i32[1];
      v66 = (_DWORD *)((char *)v65 + a4);
      *v66 = v62.i32[2];
      *(_DWORD *)((char *)v66 + a4) = v62.i32[3];
      *(_DWORD *)a5 = v61.i32[0];
      *(_DWORD *)(a5 + a6) = v61.i32[1];
      v67 = (_DWORD *)(a5 + a6 + a6);
      *v67 = v61.i32[2];
      *(_DWORD *)((char *)v67 + a6) = v61.i32[3];
      *(_DWORD *)(a5 + 4) = v63.i32[0];
      v68 = (_DWORD *)(a5 + 4 + a6);
      *v68 = v63.i32[1];
      v69 = (_DWORD *)((char *)v68 + a6);
      *v69 = v63.i32[2];
      *(_DWORD *)((char *)v69 + a6) = v63.i32[3];
      a1 = (int8x16_t *)((char *)a1 + 8);
      a3 += 4 * a4;
      a5 += 4 * a6;
      v54 -= 4;
      if (!v54)
        return *(double *)v27.i64;
      if (v54 < 2)
      {
LABEL_10:
        v27.i8[0] = a1->i8[0];
        LOBYTE(v80) = a1->i8[1];
        v79 = &a1->i8[a2];
        v27.i8[1] = *v79;
        BYTE1(v80) = v79[1];
        v81 = &v79[a2];
        v27.i8[2] = *v81;
        BYTE2(v80) = v81[1];
        v82 = &v81[a2];
        v27.i8[3] = *v82;
        BYTE3(v80) = v82[1];
        v83 = &v82[a2];
        v27.i8[4] = *v83;
        BYTE4(v80) = v83[1];
        v84 = &v83[a2];
        v27.i8[5] = *v84;
        BYTE5(v80) = v84[1];
        v85 = &v84[a2];
        v27.i8[6] = *v85;
        BYTE6(v80) = v85[1];
        v86 = &v85[a2];
        v27.i8[7] = *v86;
        HIBYTE(v80) = v86[1];
        *(_QWORD *)a3 = v27.i64[0];
        *(_QWORD *)a5 = v80;
        return *(double *)v27.i64;
      }
    }
    v27.i16[0] = a1->i16[0];
    v70.i16[0] = a1->i16[1];
    v72.i16[0] = *(__int16 *)((char *)a1->i16 + a2);
    v73.i16[0] = *(__int16 *)((char *)&a1->i16[1] + a2);
    v71 = (__int16 *)((char *)a1->i16 + a2 + a2);
    v27.i16[1] = *v71;
    v70.i16[1] = v71[1];
    v74 = (__int16 *)((char *)v71 + a2);
    v72.i16[1] = *v74;
    v73.i16[1] = v74[1];
    v75 = (__int16 *)((char *)v74 + a2);
    v27.i16[2] = *v75;
    v70.i16[2] = v75[1];
    v76 = (__int16 *)((char *)v75 + a2);
    v72.i16[2] = *v76;
    v73.i16[2] = v76[1];
    v77 = (__int16 *)((char *)v76 + a2);
    v27.i16[3] = *v77;
    v70.i16[3] = v77[1];
    v78 = (__int16 *)((char *)v77 + a2);
    v72.i16[3] = *v78;
    v73.i16[3] = v78[1];
    *(int8x8_t *)a3 = vtrn1_s8(*(int8x8_t *)v27.i8, v72);
    *(int8x8_t *)(a3 + a4) = vtrn1_s8(v70, v73);
    *(int8x8_t *)a5 = vtrn2_s8(*(int8x8_t *)v27.i8, v72);
    *(int8x8_t *)(a5 + a6) = vtrn2_s8(v70, v73);
    a1 = (int8x16_t *)((char *)a1 + 4);
    a3 += 2 * a4;
    a5 += 2 * a6;
    if (v54 != 2)
      goto LABEL_10;
  }
  return *(double *)v27.i64;
}

const char *SplitUVRow_NEON(const char *result, int8x16_t *a2, int8x16_t *a3, int a4)
{
  int8x16x2_t v9;

  do
  {
    v9 = vld2q_s8(result);
    result += 32;
    a4 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a2++ = v9.val[0];
    *a3++ = v9.val[1];
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x16_t *MergeUVRow_NEON(int8x16_t *result, int8x16_t *_X1, int8x16_t *a3, int a4)
{
  int8x16_t v4;
  int8x16_t v5;

  do
  {
    v4 = *result++;
    v5 = *_X1++;
    a4 -= 16;
    __asm
    {
      PRFM            #0, [X0,#0x1C0]
      PRFM            #0, [X1,#0x1C0]
    }
    *a3 = vzip1q_s8(v4, v5);
    a3[1] = vzip2q_s8(v4, v5);
    a3 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int16x8_t MergeUVRow_16_NEON(uint16x8_t *_X0, uint16x8_t *_X1, int16x8_t *a3, int a4, int a5)
{
  uint16x8_t v5;
  uint16x8_t v6;
  uint16x8_t v7;
  int16x8_t result;
  int16x8_t v9;

  v5 = (uint16x8_t)vdupq_n_s16(16 - a4);
  do
  {
    v6 = *_X0++;
    a5 -= 8;
    v7 = *_X1++;
    result = (int16x8_t)vshlq_u16(v6, v5);
    v9 = (int16x8_t)vshlq_u16(v7, v5);
    __asm
    {
      PRFM            #0, [X0,#0x1C0]
      PRFM            #0, [X1,#0x1C0]
    }
    *a3 = vzip1q_s16(result, v9);
    a3[1] = vzip2q_s16(result, v9);
    a3 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

__int128 *CopyRow_NEON(__int128 *result, _OWORD *a2, int a3)
{
  __int128 v3;
  __int128 v4;

  do
  {
    v3 = *result;
    v4 = result[1];
    result += 2;
    __asm { PRFM            #0, [X0,#0x1C0] }
    _VF = __OFSUB__(a3, 32);
    a3 -= 32;
    *a2 = v3;
    a2[1] = v4;
    a2 += 2;
  }
  while (!((a3 < 0) ^ _VF | (a3 == 0)));
  return result;
}

int8x16_t *SetRow_NEON(int8x16_t *result, unsigned int a2, int a3)
{
  int8x16_t v3;
  BOOL v4;

  v3 = vdupq_n_s8(a2);
  do
  {
    v4 = __OFSUB__(a3, 16);
    a3 -= 16;
    *result++ = v3;
  }
  while (!((a3 < 0) ^ v4 | (a3 == 0)));
  return result;
}

int8x16_t MirrorRow_NEON(uint64_t a1, int8x16_t *a2, int a3)
{
  int8x16_t *v3;
  int8x16_t v4;
  int8x16_t v5;
  BOOL v6;
  int8x16_t result;

  v3 = (int8x16_t *)(a1 + a3 - 32);
  do
  {
    v4 = v3[1];
    v5 = *v3;
    v3 -= 2;
    v6 = __OFSUB__(a3, 32);
    a3 -= 32;
    result = vqtbl1q_s8(v4, libyuv::kShuffleMirror);
    *a2 = result;
    a2[1] = vqtbl1q_s8(v5, libyuv::kShuffleMirror);
    a2 += 2;
  }
  while (!((a3 < 0) ^ v6 | (a3 == 0)));
  return result;
}

int8x16_t MirrorSplitUVRow_NEON(uint64_t a1, int8x16_t *a2, int8x16_t *a3, int a4)
{
  int8x16_t *v4;
  int8x16_t v5;
  int8x16_t v6;
  BOOL v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t result;

  v4 = (int8x16_t *)(a1 + 2 * a4 - 32);
  do
  {
    v5 = v4[1];
    v6 = *v4;
    v4 -= 2;
    v7 = __OFSUB__(a4, 16);
    a4 -= 16;
    v8 = vqtbl1q_s8(v5, libyuv::kShuffleMirrorUV);
    v9 = vqtbl1q_s8(v6, libyuv::kShuffleMirrorUV);
    result = vuzp1q_s8(v8, v9);
    *a2++ = result;
    *a3++ = vuzp2q_s8(v8, v9);
  }
  while (!((a4 < 0) ^ v7 | (a4 == 0)));
  return result;
}

const char *YUY2ToYRow_NEON(const char *result, unsigned __int128 *a2, int a3)
{
  unsigned __int128 v3;

  do
  {
    v3 = (unsigned __int128)vld2q_s8(result);
    result += 32;
    a3 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a2++ = v3;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

const char *UYVYToYRow_NEON(const char *result, int8x16_t *a2, int a3)
{
  int8x16x2_t v8;

  do
  {
    v8 = vld2q_s8(result);
    result += 32;
    a3 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a2++ = v8.val[1];
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

const char *YUY2ToUVRow_NEON(const char *result, int a2, uint8x8_t *a3, uint8x8_t *a4, int a5)
{
  const char *v5;
  int8x8x4_t v11;
  int8x8x4_t v12;

  v5 = &result[a2];
  do
  {
    v11 = vld4_s8(result);
    result += 32;
    a5 -= 16;
    v12 = vld4_s8(v5);
    v5 += 32;
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a3++ = vrhadd_u8((uint8x8_t)v11.val[1], (uint8x8_t)v12.val[1]);
    *a4++ = vrhadd_u8((uint8x8_t)v11.val[3], (uint8x8_t)v12.val[3]);
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

uint8x8_t UYVYToUVRow_NEON(const char *_X0, int a2, uint8x8_t *a3, uint8x8_t *a4, int a5)
{
  const char *v5;
  uint8x8_t result;
  int8x8x4_t v12;
  int8x8x4_t v13;

  v5 = &_X0[a2];
  do
  {
    v12 = vld4_s8(_X0);
    _X0 += 32;
    a5 -= 16;
    v13 = vld4_s8(v5);
    v5 += 32;
    result = vrhadd_u8((uint8x8_t)v12.val[0], (uint8x8_t)v13.val[0]);
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a3++ = result;
    *a4++ = vrhadd_u8((uint8x8_t)v12.val[2], (uint8x8_t)v13.val[2]);
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x8_t ARGBToUVRow_NEON(const char *_X0, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x8_t result;
  int8x16x4_t v19;
  int8x16x4_t v20;

  _X8 = &_X0[a2];
  v6.i64[0] = 0x38003800380038;
  v6.i64[1] = 0x38003800380038;
  v7.i64[0] = 0x25002500250025;
  v7.i64[1] = 0x25002500250025;
  v8.i64[0] = 0x13001300130013;
  v8.i64[1] = 0x13001300130013;
  v9.i64[0] = 0x9000900090009;
  v9.i64[1] = 0x9000900090009;
  v10.i64[0] = 0x2F002F002F002FLL;
  v10.i64[1] = 0x2F002F002F002FLL;
  v11.i64[0] = 0x8080808080808080;
  v11.i64[1] = 0x8080808080808080;
  do
  {
    v19 = vld4q_s8(_X0);
    _X0 += 64;
    __asm { PRFM            #0, [X0,#0x1C0] }
    v20 = vld4q_s8(_X8);
    _X8 += 64;
    __asm { PRFM            #0, [X8,#0x1C0] }
    v19.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[0]), (uint8x16_t)v20.val[0]), 1uLL);
    v19.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[1]), (uint8x16_t)v20.val[1]), 1uLL);
    v19.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[2]), (uint8x16_t)v20.val[2]), 1uLL);
    _VF = __OFSUB__(a5, 16);
    a5 -= 16;
    v20.val[0] = (int8x16_t)vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[2], v6), (int16x8_t)v19.val[1], v10), (int16x8_t)v19.val[0], v9);
    result = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[0], v6), (int16x8_t)v19.val[1], v7), (int16x8_t)v19.val[2], v8), v11);
    *a3++ = result;
    *a4++ = vaddhn_s16((int16x8_t)v20.val[0], v11);
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

int8x8_t BGRAToUVRow_NEON(const char *_X0, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x8_t result;
  int8x16x4_t v19;
  int8x16x4_t v20;

  _X8 = &_X0[a2];
  v6.i64[0] = 0x38003800380038;
  v6.i64[1] = 0x38003800380038;
  v7.i64[0] = 0x25002500250025;
  v7.i64[1] = 0x25002500250025;
  v8.i64[0] = 0x13001300130013;
  v8.i64[1] = 0x13001300130013;
  v9.i64[0] = 0x9000900090009;
  v9.i64[1] = 0x9000900090009;
  v10.i64[0] = 0x2F002F002F002FLL;
  v10.i64[1] = 0x2F002F002F002FLL;
  v11.i64[0] = 0x8080808080808080;
  v11.i64[1] = 0x8080808080808080;
  do
  {
    v19 = vld4q_s8(_X0);
    _X0 += 64;
    v19.val[0] = (int8x16_t)vpaddlq_u8((uint8x16_t)v19.val[3]);
    __asm { PRFM            #0, [X0,#0x1C0] }
    v19.val[3] = (int8x16_t)vpaddlq_u8((uint8x16_t)v19.val[2]);
    v20 = vld4q_s8(_X8);
    _X8 += 64;
    __asm { PRFM            #0, [X8,#0x1C0] }
    v19.val[2] = (int8x16_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[1]), (uint8x16_t)v20.val[1]);
    v19.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v19.val[0], (uint8x16_t)v20.val[3]), 1uLL);
    v19.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v19.val[3], (uint8x16_t)v20.val[2]), 1uLL);
    v19.val[2] = (int8x16_t)vrshrq_n_u16((uint16x8_t)v19.val[2], 1uLL);
    _VF = __OFSUB__(a5, 16);
    a5 -= 16;
    v20.val[0] = (int8x16_t)vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[2], v6), (int16x8_t)v19.val[1], v10), (int16x8_t)v19.val[0], v9);
    result = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[0], v6), (int16x8_t)v19.val[1], v7), (int16x8_t)v19.val[2], v8), v11);
    *a3++ = result;
    *a4++ = vaddhn_s16((int16x8_t)v20.val[0], v11);
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

int8x8_t ABGRToUVRow_NEON(const char *_X0, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x8_t result;
  int8x16x4_t v19;
  int8x16x4_t v20;

  _X8 = &_X0[a2];
  v6.i64[0] = 0x38003800380038;
  v6.i64[1] = 0x38003800380038;
  v7.i64[0] = 0x25002500250025;
  v7.i64[1] = 0x25002500250025;
  v8.i64[0] = 0x13001300130013;
  v8.i64[1] = 0x13001300130013;
  v9.i64[0] = 0x9000900090009;
  v9.i64[1] = 0x9000900090009;
  v10.i64[0] = 0x2F002F002F002FLL;
  v10.i64[1] = 0x2F002F002F002FLL;
  v11.i64[0] = 0x8080808080808080;
  v11.i64[1] = 0x8080808080808080;
  do
  {
    v19 = vld4q_s8(_X0);
    _X0 += 64;
    v19.val[3] = (int8x16_t)vpaddlq_u8((uint8x16_t)v19.val[2]);
    __asm { PRFM            #0, [X0,#0x1C0] }
    v19.val[2] = (int8x16_t)vpaddlq_u8((uint8x16_t)v19.val[1]);
    v20 = vld4q_s8(_X8);
    _X8 += 64;
    __asm { PRFM            #0, [X8,#0x1C0] }
    v19.val[1] = (int8x16_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[0]), (uint8x16_t)v20.val[0]);
    v19.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v19.val[3], (uint8x16_t)v20.val[2]), 1uLL);
    v19.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v19.val[2], (uint8x16_t)v20.val[1]), 1uLL);
    v19.val[1] = (int8x16_t)vrshrq_n_u16((uint16x8_t)v19.val[1], 1uLL);
    _VF = __OFSUB__(a5, 16);
    a5 -= 16;
    v20.val[0] = (int8x16_t)vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[1], v6), (int16x8_t)v19.val[2], v10), (int16x8_t)v19.val[0], v9);
    result = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[0], v6), (int16x8_t)v19.val[2], v7), (int16x8_t)v19.val[1], v8), v11);
    *a3++ = result;
    *a4++ = vaddhn_s16((int16x8_t)v20.val[0], v11);
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

int8x8_t RGBAToUVRow_NEON(const char *_X0, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x8_t result;
  int8x16x4_t v19;
  int8x16x4_t v20;

  _X8 = &_X0[a2];
  v6.i64[0] = 0x38003800380038;
  v6.i64[1] = 0x38003800380038;
  v7.i64[0] = 0x25002500250025;
  v7.i64[1] = 0x25002500250025;
  v8.i64[0] = 0x13001300130013;
  v8.i64[1] = 0x13001300130013;
  v9.i64[0] = 0x9000900090009;
  v9.i64[1] = 0x9000900090009;
  v10.i64[0] = 0x2F002F002F002FLL;
  v10.i64[1] = 0x2F002F002F002FLL;
  v11.i64[0] = 0x8080808080808080;
  v11.i64[1] = 0x8080808080808080;
  do
  {
    v19 = vld4q_s8(_X0);
    _X0 += 64;
    __asm { PRFM            #0, [X0,#0x1C0] }
    v20 = vld4q_s8(_X8);
    _X8 += 64;
    __asm { PRFM            #0, [X8,#0x1C0] }
    v19.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[1]), (uint8x16_t)v20.val[1]), 1uLL);
    v19.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[2]), (uint8x16_t)v20.val[2]), 1uLL);
    v19.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[3]), (uint8x16_t)v20.val[3]), 1uLL);
    _VF = __OFSUB__(a5, 16);
    a5 -= 16;
    v20.val[0] = (int8x16_t)vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[2], v6), (int16x8_t)v19.val[1], v10), (int16x8_t)v19.val[0], v9);
    result = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[0], v6), (int16x8_t)v19.val[1], v7), (int16x8_t)v19.val[2], v8), v11);
    *a3++ = result;
    *a4++ = vaddhn_s16((int16x8_t)v20.val[0], v11);
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

int8x8_t RGB24ToUVRow_NEON(const char *_X0, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x8_t result;
  int8x16x3_t v19;
  int8x16x3_t v20;

  _X8 = &_X0[a2];
  v6.i64[0] = 0x38003800380038;
  v6.i64[1] = 0x38003800380038;
  v7.i64[0] = 0x25002500250025;
  v7.i64[1] = 0x25002500250025;
  v8.i64[0] = 0x13001300130013;
  v8.i64[1] = 0x13001300130013;
  v9.i64[0] = 0x9000900090009;
  v9.i64[1] = 0x9000900090009;
  v10.i64[0] = 0x2F002F002F002FLL;
  v10.i64[1] = 0x2F002F002F002FLL;
  v11.i64[0] = 0x8080808080808080;
  v11.i64[1] = 0x8080808080808080;
  do
  {
    v19 = vld3q_s8(_X0);
    _X0 += 48;
    __asm { PRFM            #0, [X0,#0x1C0] }
    v20 = vld3q_s8(_X8);
    _X8 += 48;
    __asm { PRFM            #0, [X8,#0x1C0] }
    v19.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[0]), (uint8x16_t)v20.val[0]), 1uLL);
    v19.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[1]), (uint8x16_t)v20.val[1]), 1uLL);
    v19.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[2]), (uint8x16_t)v20.val[2]), 1uLL);
    _VF = __OFSUB__(a5, 16);
    a5 -= 16;
    v20.val[0] = (int8x16_t)vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[2], v6), (int16x8_t)v19.val[1], v10), (int16x8_t)v19.val[0], v9);
    result = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[0], v6), (int16x8_t)v19.val[1], v7), (int16x8_t)v19.val[2], v8), v11);
    *a3++ = result;
    *a4++ = vaddhn_s16((int16x8_t)v20.val[0], v11);
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

int8x8_t RAWToUVRow_NEON(const char *_X0, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int8x8_t result;
  int8x16x3_t v19;
  int8x16x3_t v20;

  _X8 = &_X0[a2];
  v6.i64[0] = 0x38003800380038;
  v6.i64[1] = 0x38003800380038;
  v7.i64[0] = 0x25002500250025;
  v7.i64[1] = 0x25002500250025;
  v8.i64[0] = 0x13001300130013;
  v8.i64[1] = 0x13001300130013;
  v9.i64[0] = 0x9000900090009;
  v9.i64[1] = 0x9000900090009;
  v10.i64[0] = 0x2F002F002F002FLL;
  v10.i64[1] = 0x2F002F002F002FLL;
  v11.i64[0] = 0x8080808080808080;
  v11.i64[1] = 0x8080808080808080;
  do
  {
    v19 = vld3q_s8(_X0);
    _X0 += 48;
    __asm { PRFM            #0, [X0,#0x1C0] }
    v20 = vld3q_s8(_X8);
    _X8 += 48;
    __asm { PRFM            #0, [X8,#0x1C0] }
    v19.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[2]), (uint8x16_t)v20.val[2]), 1uLL);
    v19.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[1]), (uint8x16_t)v20.val[1]), 1uLL);
    v19.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v19.val[0]), (uint8x16_t)v20.val[0]), 1uLL);
    _VF = __OFSUB__(a5, 16);
    a5 -= 16;
    v20.val[0] = (int8x16_t)vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[0], v6), (int16x8_t)v19.val[1], v10), (int16x8_t)v19.val[2], v9);
    result = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v19.val[2], v6), (int16x8_t)v19.val[1], v7), (int16x8_t)v19.val[0], v8), v11);
    *a3++ = result;
    *a4++ = vaddhn_s16((int16x8_t)v20.val[0], v11);
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

int8x8_t RGB565ToUVRow_NEON(_OWORD *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  _OWORD *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v13;
  int8x8_t v14;
  int8x16_t v15;
  int64x2_t v16;
  uint16x4_t v17;
  uint16x4_t v23;
  uint16x4_t v24;
  int16x8_t v25;
  int8x8_t v26;
  int8x16_t v27;
  int64x2_t v28;
  uint16x4_t v29;
  uint16x4_t v30;
  uint16x4_t v31;
  int16x8_t v33;
  int8x8_t v34;
  int8x16_t v35;
  int64x2_t v36;
  uint16x8_t v37;
  uint16x8_t v39;
  uint16x8_t v40;
  int16x8_t v41;
  int8x8_t v42;
  int8x16_t v43;
  int64x2_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int8x8_t result;

  v5 = (_OWORD *)((char *)a1 + a2);
  v6.i64[0] = 0x38003800380038;
  v6.i64[1] = 0x38003800380038;
  v7.i64[0] = 0x25002500250025;
  v7.i64[1] = 0x25002500250025;
  v8.i64[0] = 0x13001300130013;
  v8.i64[1] = 0x13001300130013;
  v9.i64[0] = 0x9000900090009;
  v9.i64[1] = 0x9000900090009;
  v10.i64[0] = 0x2F002F002F002FLL;
  v10.i64[1] = 0x2F002F002F002FLL;
  v11.i64[0] = 0x8080808080808080;
  v11.i64[1] = 0x8080808080808080;
  do
  {
    v13 = *(int16x8_t *)a1;
    _X0 = a1 + 1;
    v14 = vshl_n_s8(vshrn_n_s16(v13, 5uLL), 2uLL);
    v15 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v13), (int16x8_t)vshrq_n_u16((uint16x8_t)v13, 0xBuLL)), 3uLL);
    v16 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v15, 5uLL), v15);
    v17 = vpaddl_u8(*(uint8x8_t *)v16.i8);
    __asm { PRFM            #0, [X0,#0x1C0] }
    v23 = vpaddl_u8((uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v14, 6uLL), v14));
    v24 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v16, 1));
    v25 = *(int16x8_t *)_X0;
    a1 = _X0 + 1;
    v26 = vshl_n_s8(vshrn_n_s16(v25, 5uLL), 2uLL);
    v27 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v25), (int16x8_t)vshrq_n_u16((uint16x8_t)v25, 0xBuLL)), 3uLL);
    v28 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v27, 5uLL), v27);
    v29 = vpaddl_u8(*(uint8x8_t *)v28.i8);
    v30 = vpaddl_u8((uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v26, 6uLL), v26));
    v31 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v28, 1));
    v33 = *(int16x8_t *)v5;
    _X8 = v5 + 1;
    v34 = vshl_n_s8(vshrn_n_s16(v33, 5uLL), 2uLL);
    v35 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v33), (int16x8_t)vshrq_n_u16((uint16x8_t)v33, 0xBuLL)), 3uLL);
    v36 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v35, 5uLL), v35);
    *(uint16x4_t *)v37.i8 = vpadal_u8(v17, *(uint8x8_t *)v36.i8);
    __asm { PRFM            #0, [X8,#0x1C0] }
    *(uint16x4_t *)v39.i8 = vpadal_u8(v23, (uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v34, 6uLL), v34));
    *(uint16x4_t *)v40.i8 = vpadal_u8(v24, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v36, 1));
    v41 = *(int16x8_t *)_X8;
    v5 = _X8 + 1;
    v42 = vshl_n_s8(vshrn_n_s16(v41, 5uLL), 2uLL);
    v43 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v41), (int16x8_t)vshrq_n_u16((uint16x8_t)v41, 0xBuLL)), 3uLL);
    v44 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v43, 5uLL), v43);
    v37.u64[1] = (unint64_t)vpadal_u8(v29, *(uint8x8_t *)v44.i8);
    v39.u64[1] = (unint64_t)vpadal_u8(v30, (uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v42, 6uLL), v42));
    v40.u64[1] = (unint64_t)vpadal_u8(v31, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v44, 1));
    v45 = (int16x8_t)vrshrq_n_u16(v37, 1uLL);
    v46 = (int16x8_t)vrshrq_n_u16(v39, 1uLL);
    v47 = (int16x8_t)vrshrq_n_u16(v40, 1uLL);
    _VF = __OFSUB__(a5, 16);
    a5 -= 16;
    v48 = vmlsq_s16(vmlsq_s16(vmulq_s16(v47, v6), v46, v10), v45, v9);
    result = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v45, v6), v46, v7), v47, v8), v11);
    *a3++ = result;
    *a4++ = vaddhn_s16(v48, v11);
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

int8x8_t ARGB1555ToUVRow_NEON(_OWORD *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5, double a6, double a7, double a8, int16x8_t a9)
{
  _OWORD *v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v17;
  int8x16_t v18;
  int64x2_t v19;
  uint16x4_t v20;
  uint16x4_t v26;
  uint16x4_t v27;
  int16x8_t v28;
  int8x16_t v29;
  int64x2_t v30;
  uint16x4_t v31;
  uint16x4_t v32;
  uint16x4_t v33;
  int16x8_t v35;
  int8x16_t v36;
  int64x2_t v37;
  uint16x8_t v38;
  uint16x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int8x16_t v43;
  int64x2_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int16x8_t v48;
  int8x8_t result;

  v9 = (_OWORD *)((char *)a1 + a2);
  v10.i64[0] = 0x38003800380038;
  v10.i64[1] = 0x38003800380038;
  v11.i64[0] = 0x25002500250025;
  v11.i64[1] = 0x25002500250025;
  v12.i64[0] = 0x13001300130013;
  v12.i64[1] = 0x13001300130013;
  v13.i64[0] = 0x9000900090009;
  v13.i64[1] = 0x9000900090009;
  v14.i64[0] = 0x2F002F002F002FLL;
  v14.i64[1] = 0x2F002F002F002FLL;
  v15.i64[0] = 0x8080808080808080;
  v15.i64[1] = 0x8080808080808080;
  do
  {
    v17 = *(int16x8_t *)a1;
    _X0 = a1 + 1;
    *(int8x8_t *)a9.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v17, 0xAuLL), 3uLL));
    v18 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v17), v17, 5uLL), 3uLL);
    v19 = (int64x2_t)vorrq_s8(v18, (int8x16_t)vshrq_n_u8((uint8x16_t)v18, 5uLL));
    v20 = vpaddl_u8(*(uint8x8_t *)v19.i8);
    __asm { PRFM            #0, [X0,#0x1C0] }
    v26 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v19, 1));
    v27 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)a9, 5uLL), (int8x16_t)a9));
    v28 = *(int16x8_t *)_X0;
    a1 = _X0 + 1;
    *(int8x8_t *)a9.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v28, 0xAuLL), 3uLL));
    v29 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v28), v28, 5uLL), 3uLL);
    v30 = (int64x2_t)vorrq_s8(v29, (int8x16_t)vshrq_n_u8((uint8x16_t)v29, 5uLL));
    v31 = vpaddl_u8(*(uint8x8_t *)v30.i8);
    v32 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v30, 1));
    v33 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)a9, 5uLL), (int8x16_t)a9));
    v35 = *(int16x8_t *)v9;
    _X8 = v9 + 1;
    *(int8x8_t *)a9.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v35, 0xAuLL), 3uLL));
    v36 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v35), v35, 5uLL), 3uLL);
    v37 = (int64x2_t)vorrq_s8(v36, (int8x16_t)vshrq_n_u8((uint8x16_t)v36, 5uLL));
    *(uint16x4_t *)v38.i8 = vpadal_u8(v20, *(uint8x8_t *)v37.i8);
    __asm { PRFM            #0, [X8,#0x1C0] }
    *(uint16x4_t *)v40.i8 = vpadal_u8(v26, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v37, 1));
    *(uint16x4_t *)v41.i8 = vpadal_u8(v27, (uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)a9, 5uLL), (int8x16_t)a9));
    v42 = *(int16x8_t *)_X8;
    v9 = _X8 + 1;
    *(int8x8_t *)a9.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v42, 0xAuLL), 3uLL));
    v43 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v42), v42, 5uLL), 3uLL);
    v44 = (int64x2_t)vorrq_s8(v43, (int8x16_t)vshrq_n_u8((uint8x16_t)v43, 5uLL));
    v38.u64[1] = (unint64_t)vpadal_u8(v31, *(uint8x8_t *)v44.i8);
    v40.u64[1] = (unint64_t)vpadal_u8(v32, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v44, 1));
    v41.u64[1] = (unint64_t)vpadal_u8(v33, (uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)a9, 5uLL), (int8x16_t)a9));
    v45 = (int16x8_t)vrshrq_n_u16(v38, 1uLL);
    v46 = (int16x8_t)vrshrq_n_u16(v40, 1uLL);
    v47 = (int16x8_t)vrshrq_n_u16(v41, 1uLL);
    _VF = __OFSUB__(a5, 16);
    a5 -= 16;
    a9 = vmlsq_s16(vmlsq_s16(vmulq_s16(v45, v10), v46, v11), v47, v12);
    v48 = vmlsq_s16(vmlsq_s16(vmulq_s16(v47, v10), v46, v14), v45, v13);
    result = vaddhn_s16(a9, v15);
    *a3++ = result;
    *a4++ = vaddhn_s16(v48, v15);
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

int8x8_t ARGB4444ToUVRow_NEON(_OWORD *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  _OWORD *v5;
  int16x8_t v6;
  int16x8_t v7;
  int16x8_t v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int64x2_t v17;
  uint16x4_t v18;
  uint16x4_t v24;
  uint16x4_t v25;
  int16x8_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int64x2_t v30;
  uint16x4_t v31;
  uint16x4_t v32;
  uint16x4_t v33;
  int16x8_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int64x2_t v39;
  uint16x8_t v40;
  uint16x8_t v42;
  uint16x8_t v43;
  int16x8_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int64x2_t v48;
  int16x8_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x8_t result;

  v5 = (_OWORD *)((char *)a1 + a2);
  v6.i64[0] = 0x38003800380038;
  v6.i64[1] = 0x38003800380038;
  v7.i64[0] = 0x25002500250025;
  v7.i64[1] = 0x25002500250025;
  v8.i64[0] = 0x13001300130013;
  v8.i64[1] = 0x13001300130013;
  v9.i64[0] = 0x9000900090009;
  v9.i64[1] = 0x9000900090009;
  v10.i64[0] = 0x2F002F002F002FLL;
  v10.i64[1] = 0x2F002F002F002FLL;
  v11.i64[0] = 0x8080808080808080;
  v11.i64[1] = 0x8080808080808080;
  do
  {
    v13 = *(int16x8_t *)a1;
    _X0 = a1 + 1;
    v14 = vmovn_hight_s16(vshrn_n_s16(v13, 8uLL), v13);
    v15 = vshlq_n_s8(v14, 4uLL);
    v16 = (int8x16_t)vshrq_n_u8((uint8x16_t)v14, 4uLL);
    v17 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v15, 4uLL), v15);
    v18 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v17, 1));
    __asm { PRFM            #0, [X0,#0x1C0] }
    v24 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v16, 4uLL), v16), 1));
    v25 = vpaddl_u8(*(uint8x8_t *)v17.i8);
    v26 = *(int16x8_t *)_X0;
    a1 = _X0 + 1;
    v27 = vmovn_hight_s16(vshrn_n_s16(v26, 8uLL), v26);
    v28 = vshlq_n_s8(v27, 4uLL);
    v29 = (int8x16_t)vshrq_n_u8((uint8x16_t)v27, 4uLL);
    v30 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v28, 4uLL), v28);
    v31 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v30, 1));
    v32 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v29, 4uLL), v29), 1));
    v33 = vpaddl_u8(*(uint8x8_t *)v30.i8);
    v35 = *(int16x8_t *)v5;
    _X8 = v5 + 1;
    v36 = vmovn_hight_s16(vshrn_n_s16(v35, 8uLL), v35);
    v37 = vshlq_n_s8(v36, 4uLL);
    v38 = (int8x16_t)vshrq_n_u8((uint8x16_t)v36, 4uLL);
    v39 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v37, 4uLL), v37);
    *(uint16x4_t *)v40.i8 = vpadal_u8(v18, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v39, 1));
    __asm { PRFM            #0, [X8,#0x1C0] }
    *(uint16x4_t *)v42.i8 = vpadal_u8(v24, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v38, 4uLL), v38), 1));
    *(uint16x4_t *)v43.i8 = vpadal_u8(v25, *(uint8x8_t *)v39.i8);
    v44 = *(int16x8_t *)_X8;
    v5 = _X8 + 1;
    v45 = vmovn_hight_s16(vshrn_n_s16(v44, 8uLL), v44);
    v46 = vshlq_n_s8(v45, 4uLL);
    v47 = (int8x16_t)vshrq_n_u8((uint8x16_t)v45, 4uLL);
    v48 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v46, 4uLL), v46);
    v40.u64[1] = (unint64_t)vpadal_u8(v31, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v48, 1));
    v42.u64[1] = (unint64_t)vpadal_u8(v32, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v47, 4uLL), v47), 1));
    v43.u64[1] = (unint64_t)vpadal_u8(v33, *(uint8x8_t *)v48.i8);
    v49 = (int16x8_t)vrshrq_n_u16(v40, 1uLL);
    v50 = (int16x8_t)vrshrq_n_u16(v42, 1uLL);
    v51 = (int16x8_t)vrshrq_n_u16(v43, 1uLL);
    _VF = __OFSUB__(a5, 16);
    a5 -= 16;
    v52 = vmlsq_s16(vmlsq_s16(vmulq_s16(v51, v6), v50, v10), v49, v9);
    result = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v49, v6), v50, v7), v51, v8), v11);
    *a3++ = result;
    *a4++ = vaddhn_s16(v52, v11);
  }
  while (!((a5 < 0) ^ _VF | (a5 == 0)));
  return result;
}

uint8x8_t RGB565ToYRow_NEON(int16x8_t *_X0, uint8x8_t *a2, int a3)
{
  int16x8_t v3;
  int8x8_t v4;
  int8x16_t v5;
  int64x2_t v6;
  uint8x8_t result;

  do
  {
    v3 = *_X0++;
    a3 -= 8;
    v4 = vshl_n_s8(vshrn_n_s16(v3, 5uLL), 2uLL);
    v5 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v3), (int16x8_t)vshrq_n_u16((uint16x8_t)v3, 0xBuLL)), 3uLL);
    v6 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v5, 5uLL), v5);
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vqadd_u8(vqrshrn_n_u16(vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v6.i8, (uint8x8_t)0x1919191919191919), (uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v4, 6uLL), v4), (uint8x8_t)0x8181818181818181), (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v6, 1), (uint8x8_t)0x4242424242424242), 8uLL), (uint8x8_t)0x1010101010101010);
    *a2++ = result;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

uint8x8_t ARGB1555ToYRow_NEON(int16x8_t *_X0, uint8x8_t *a2, int a3)
{
  int16x8_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int64x2_t v6;
  uint8x8_t result;

  do
  {
    v3 = *_X0++;
    a3 -= 8;
    v4 = vmovn_hight_s16(vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v3, 0xAuLL), 3uLL)), vshrq_n_s16(v3, 0xFuLL));
    v5 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v3), v3, 5uLL), 3uLL);
    v6 = (int64x2_t)vorrq_s8(v5, (int8x16_t)vshrq_n_u8((uint8x16_t)v5, 5uLL));
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vqadd_u8(vqrshrn_n_u16(vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v6.i8, (uint8x8_t)0x1919191919191919), (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v6, 1), (uint8x8_t)0x8181818181818181), (uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v4, 5uLL), v4), (uint8x8_t)0x4242424242424242), 8uLL), (uint8x8_t)0x1010101010101010);
    *a2++ = result;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

uint8x8_t ARGB4444ToYRow_NEON(int16x8_t *_X0, uint8x8_t *a2, int a3)
{
  int16x8_t v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int64x2_t v7;
  uint8x8_t result;

  do
  {
    v3 = *_X0++;
    a3 -= 8;
    v4 = vmovn_hight_s16(vshrn_n_s16(v3, 8uLL), v3);
    v5 = vshlq_n_s8(v4, 4uLL);
    v6 = (int8x16_t)vshrq_n_u8((uint8x16_t)v4, 4uLL);
    v7 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v5, 4uLL), v5);
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vqadd_u8(vqrshrn_n_u16(vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v7, 1), (uint8x8_t)0x1919191919191919), (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v6, 4uLL), v6), 1), (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v7.i8, (uint8x8_t)0x4242424242424242), 8uLL), (uint8x8_t)0x1010101010101010);
    *a2++ = result;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x8_t ARGBToYRow_NEON(const char *_X0, int8x8_t *a2, int a3)
{
  uint8x16_t v3;
  uint8x16_t v4;
  uint8x16_t v5;
  int16x8_t v6;
  int8x8_t result;
  int8x16x4_t v13;

  v3 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 0);
  v4 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 1);
  v5 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 2);
  v6 = vdupq_lane_s16((int16x4_t)0x108000428119, 2);
  do
  {
    v13 = vld4q_s8(_X0);
    _X0 += 64;
    a3 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v13.val[0].i8, *(uint8x8_t *)v3.i8), *(uint8x8_t *)v13.val[1].i8, *(uint8x8_t *)v4.i8), *(uint8x8_t *)v13.val[2].i8, *(uint8x8_t *)v5.i8), v6);
    *a2 = result;
    a2[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v13.val[0], v3), (uint8x16_t)v13.val[1], v4), (uint8x16_t)v13.val[2], v5), v6);
    a2 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x8_t ABGRToYRow_NEON(const char *_X0, int8x8_t *a2, int a3)
{
  uint8x16_t v3;
  uint8x16_t v4;
  uint8x16_t v5;
  int16x8_t v6;
  int8x8_t result;
  int8x16x4_t v13;

  v3 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 0);
  v4 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 1);
  v5 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 2);
  v6 = vdupq_lane_s16((int16x4_t)0x6557108000198142, 2);
  do
  {
    v13 = vld4q_s8(_X0);
    _X0 += 64;
    a3 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v13.val[0].i8, *(uint8x8_t *)v3.i8), *(uint8x8_t *)v13.val[1].i8, *(uint8x8_t *)v4.i8), *(uint8x8_t *)v13.val[2].i8, *(uint8x8_t *)v5.i8), v6);
    *a2 = result;
    a2[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v13.val[0], v3), (uint8x16_t)v13.val[1], v4), (uint8x16_t)v13.val[2], v5), v6);
    a2 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x8_t RGBAToYRow_NEON(const char *_X0, int8x8_t *a2, int a3)
{
  uint8x16_t v3;
  uint8x16_t v4;
  uint8x16_t v5;
  int16x8_t v6;
  int8x8_t result;
  int8x16x4_t v13;

  v3 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 0);
  v4 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 1);
  v5 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 2);
  v6 = vdupq_lane_s16((int16x4_t)0x108000428119, 2);
  do
  {
    v13 = vld4q_s8(_X0);
    _X0 += 64;
    a3 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v13.val[1].i8, *(uint8x8_t *)v3.i8), *(uint8x8_t *)v13.val[2].i8, *(uint8x8_t *)v4.i8), *(uint8x8_t *)v13.val[3].i8, *(uint8x8_t *)v5.i8), v6);
    *a2 = result;
    a2[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v13.val[1], v3), (uint8x16_t)v13.val[2], v4), (uint8x16_t)v13.val[3], v5), v6);
    a2 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x8_t BGRAToYRow_NEON(const char *_X0, int8x8_t *a2, int a3)
{
  uint8x16_t v3;
  uint8x16_t v4;
  uint8x16_t v5;
  int16x8_t v6;
  int8x8_t result;
  int8x16x4_t v13;

  v3 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 0);
  v4 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 1);
  v5 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 2);
  v6 = vdupq_lane_s16((int16x4_t)0x6557108000198142, 2);
  do
  {
    v13 = vld4q_s8(_X0);
    _X0 += 64;
    a3 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v13.val[1].i8, *(uint8x8_t *)v3.i8), *(uint8x8_t *)v13.val[2].i8, *(uint8x8_t *)v4.i8), *(uint8x8_t *)v13.val[3].i8, *(uint8x8_t *)v5.i8), v6);
    *a2 = result;
    a2[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v13.val[1], v3), (uint8x16_t)v13.val[2], v4), (uint8x16_t)v13.val[3], v5), v6);
    a2 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x8_t RGB24ToYRow_NEON(const char *_X0, int8x8_t *a2, int a3)
{
  uint8x16_t v3;
  uint8x16_t v4;
  uint8x16_t v5;
  int16x8_t v6;
  int8x8_t result;
  int8x16x3_t v13;

  v3 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 0);
  v4 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 1);
  v5 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 2);
  v6 = vdupq_lane_s16((int16x4_t)0x108000428119, 2);
  do
  {
    v13 = vld3q_s8(_X0);
    _X0 += 48;
    a3 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v13.val[0].i8, *(uint8x8_t *)v3.i8), *(uint8x8_t *)v13.val[1].i8, *(uint8x8_t *)v4.i8), *(uint8x8_t *)v13.val[2].i8, *(uint8x8_t *)v5.i8), v6);
    *a2 = result;
    a2[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v13.val[0], v3), (uint8x16_t)v13.val[1], v4), (uint8x16_t)v13.val[2], v5), v6);
    a2 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

int8x8_t RAWToYRow_NEON(const char *_X0, int8x8_t *a2, int a3)
{
  uint8x16_t v3;
  uint8x16_t v4;
  uint8x16_t v5;
  int16x8_t v6;
  int8x8_t result;
  int8x16x3_t v13;

  v3 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 0);
  v4 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 1);
  v5 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 2);
  v6 = vdupq_lane_s16((int16x4_t)0x6557108000198142, 2);
  do
  {
    v13 = vld3q_s8(_X0);
    _X0 += 48;
    a3 -= 16;
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v13.val[0].i8, *(uint8x8_t *)v3.i8), *(uint8x8_t *)v13.val[1].i8, *(uint8x8_t *)v4.i8), *(uint8x8_t *)v13.val[2].i8, *(uint8x8_t *)v5.i8), v6);
    *a2 = result;
    a2[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v13.val[0], v3), (uint8x16_t)v13.val[1], v4), (uint8x16_t)v13.val[2], v5), v6);
    a2 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

uint8x16_t *InterpolateRow_NEON(uint8x16_t *result, uint8x16_t *_X1, uint64_t a3, int a4, unsigned int a5)
{
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v20;

  _X9 = (uint8x16_t *)((char *)_X1 + a3);
  if (a5)
  {
    if (a5 == 128)
    {
      do
      {
        v16 = *_X1++;
        v17 = *_X9++;
        a4 -= 16;
        __asm
        {
          PRFM            #0, [X1,#0x1C0]
          PRFM            #0, [X9,#0x1C0]
        }
        *result++ = vrhaddq_u8(v16, v17);
      }
      while (!(_NF ^ _VF | _ZF));
    }
    else
    {
      v6 = (uint8x16_t)vdupq_n_s8(a5);
      v7 = (uint8x16_t)vdupq_n_s8(256 - a5);
      do
      {
        v8 = *_X1++;
        v9 = *_X9++;
        a4 -= 16;
        __asm
        {
          PRFM            #0, [X1,#0x1C0]
          PRFM            #0, [X9,#0x1C0]
        }
        *(int8x16_t *)result++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v8.i8, *(uint8x8_t *)v7.i8), *(uint8x8_t *)v9.i8, *(uint8x8_t *)v6.i8), 8uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v8, v7), v9, v6), 8uLL);
      }
      while (!(_NF ^ _VF | _ZF));
    }
  }
  else
  {
    do
    {
      v20 = *_X1++;
      a4 -= 16;
      __asm { PRFM            #0, [X1,#0x1C0] }
      *result++ = v20;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  return result;
}

uint8x8_t *InterpolateRow_16To8_NEON(uint8x8_t *result, uint16x8_t *_X1, uint64_t a3, unsigned int a4, int a5, unsigned int a6, double a7, double a8, uint16x8_t a9)
{
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v25;

  _X9 = (uint16x8_t *)((char *)_X1 + 2 * a3);
  v10 = (uint16x8_t)vdupq_n_s16(15 - __clz(a4));
  if (a6)
  {
    if (a6 == 128)
    {
      do
      {
        v21 = *_X1++;
        v22 = *_X9++;
        a5 -= 8;
        __asm
        {
          PRFM            #0, [X1,#0x1C0]
          PRFM            #0, [X9,#0x1C0]
        }
        *result++ = vqmovn_u16(vshlq_u16(vrhaddq_u16(v21, v22), v10));
      }
      while (!(_NF ^ _VF | _ZF));
    }
    else
    {
      v11 = (uint16x8_t)vdupq_n_s16(a6);
      v12 = (uint16x8_t)vdupq_n_s16(256 - a6);
      do
      {
        v13 = *_X1++;
        v14 = *_X9++;
        a5 -= 8;
        __asm
        {
          PRFM            #0, [X1,#0x1C0]
          PRFM            #0, [X9,#0x1C0]
        }
        *result++ = vqmovn_u16(vshlq_u16((uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v13.i8, *(uint16x4_t *)v12.i8), *(uint16x4_t *)v14.i8, *(uint16x4_t *)v11.i8), 8uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v13, v12), v14, v11), 8uLL), v10));
      }
      while (!(_NF ^ _VF | _ZF));
    }
  }
  else
  {
    do
    {
      v25 = *_X1++;
      __asm { PRFM            #0, [X1,#0x1C0] }
      _VF = __OFSUB__(a5, 8);
      a5 -= 8;
      *result++ = vqmovn_u16(vshlq_u16(v25, a9));
    }
    while (!((a5 < 0) ^ _VF | (a5 == 0)));
  }
  return result;
}

int16x8_t MultiplyRow_16_NEON(int16x8_t *_X0, int16x8_t *a2, unsigned int a3, int a4)
{
  int16x8_t v4;
  int16x8_t v5;
  int16x8_t v6;
  int16x8_t result;

  v4 = vdupq_n_s16(a3);
  do
  {
    v5 = *_X0;
    v6 = _X0[1];
    _X0 += 2;
    result = vmulq_s16(v5, v4);
    __asm { PRFM            #0, [X0,#0x1C0] }
    *a2 = result;
    a2[1] = vmulq_s16(v6, v4);
    a2 += 2;
    _VF = __OFSUB__(a4, 16);
    a4 -= 16;
  }
  while (!((a4 < 0) ^ _VF | (a4 == 0)));
  return result;
}

uint8x16_t Convert16To8Row_NEON(uint16x8_t *_X0, uint8x16_t *a2, unsigned int a3, int a4)
{
  uint16x8_t v4;
  uint16x8_t v5;
  uint16x8_t v6;
  uint8x16_t result;

  v4 = (uint16x8_t)vdupq_n_s16(15 - __clz(a3));
  do
  {
    v5 = *_X0;
    v6 = _X0[1];
    _X0 += 2;
    __asm { PRFM            #0, [X0,#0x1C0] }
    result = vqmovn_high_u16(vqmovn_u16(vshlq_u16(v5, v4)), vshlq_u16(v6, v4));
    _VF = __OFSUB__(a4, 16);
    a4 -= 16;
    *a2++ = result;
  }
  while (!((a4 < 0) ^ _VF | (a4 == 0)));
  return result;
}

uint64_t dcsctp::RRSendQueue::OutgoingStream::bytes_to_send_in_next_message(dcsctp::RRSendQueue::OutgoingStream *this)
{
  if ((*((_DWORD *)this + 6) & 0xFFFFFFFE) == 2 || !*((_QWORD *)this + 10))
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 8 * (*((_QWORD *)this + 9) / 0x2AuLL))
                     + 96 * (*((_QWORD *)this + 9) % 0x2AuLL)
                     + 72);
}

uint64_t std::deque<dcsctp::RRSendQueue::OutgoingStream::Item>::emplace_back<webrtc::StrongAlias<dcsctp::OutgoingMessageIdTag,unsigned int> &,dcsctp::DcSctpMessage,dcsctp::RRSendQueue::MessageAttributes>(_QWORD *a1, _DWORD *__sz, uint64_t *a3, __int128 *a4)
{
  __int128 *v4;
  uint64_t *v5;
  _DWORD *v6;
  char *v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  void *v29;
  void *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  BOOL v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  int64_t v67;
  unint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  char *v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  unint64_t v87;
  uint64_t v88;
  __int128 *v89;
  _OWORD *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  char *v113;
  _DWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  int64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  __int128 *v124;
  _OWORD *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  unint64_t v129;
  _DWORD *v130;
  unint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  int64_t v136;
  unint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  __int128 *v143;
  _OWORD *v144;
  uint64_t v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;

  v4 = a4;
  v5 = a3;
  v6 = __sz;
  v9 = (char *)a1[1];
  v8 = (char *)a1[2];
  v10 = (v8 - v9) >> 3;
  v11 = v8 - v9;
  v12 = v9;
  if (v8 == v9)
    v13 = 0;
  else
    v13 = 42 * v10 - 1;
  v14 = a1[4];
  if (v13 == a1[5] + v14)
  {
    v15 = v14 >= 0x2A;
    v16 = v14 - 42;
    if (!v15)
    {
      v19 = (char *)a1[3];
      v20 = (char *)*a1;
      v21 = (uint64_t)&v19[-*a1];
      if (v10 < (unint64_t)(v21 >> 3))
      {
        v22 = operator new(0xFC0uLL);
        v23 = v22;
        if (v19 != v8)
        {
          if (v8)
          {
            *(_QWORD *)v8 = v22;
LABEL_83:
            v8 = (char *)(a1[2] + 8);
            a1[2] = v8;
            v5 = a3;
            v4 = a4;
            goto LABEL_84;
          }
LABEL_119:
          __break(1u);
          goto LABEL_120;
        }
        if (v9 == v20)
        {
          v78 = (v19 - v9) >> 2;
          if (v8 == v9)
            v78 = 1;
          if (v78 >> 61)
            goto LABEL_120;
          v79 = v6;
          v80 = (v78 + 3) >> 2;
          v81 = 8 * v78;
          v82 = (char *)operator new(8 * v78);
          v45 = &v82[8 * v80];
          v83 = v45;
          if (v8 != v9)
          {
            v83 = &v45[8 * v10];
            v84 = &v82[8 * v80];
            v85 = v9;
            if ((unint64_t)(v11 - 8) < 0x38)
              goto LABEL_123;
            v86 = &v82[8 * v80];
            v84 = v86;
            v85 = v9;
            if ((unint64_t)(v86 - v9) < 0x20)
              goto LABEL_123;
            v87 = ((unint64_t)(v11 - 8) >> 3) + 1;
            v88 = 8 * (v87 & 0x3FFFFFFFFFFFFFFCLL);
            v84 = &v45[v88];
            v85 = &v9[v88];
            v89 = (__int128 *)(v9 + 16);
            v90 = v86 + 16;
            v91 = v87 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v92 = *v89;
              *(v90 - 1) = *(v89 - 1);
              *v90 = v92;
              v89 += 2;
              v90 += 2;
              v91 -= 4;
            }
            while (v91);
            if (v87 != (v87 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_123:
              do
              {
                v93 = *(_QWORD *)v85;
                v85 += 8;
                *(_QWORD *)v84 = v93;
                v84 += 8;
              }
              while (v84 != v83);
            }
          }
          *a1 = v82;
          a1[1] = v45;
          a1[2] = v83;
          a1[3] = &v82[v81];
          v6 = v79;
          if (v9)
          {
            operator delete(v9);
            v45 = (char *)a1[1];
          }
        }
        else
        {
          v45 = v9;
        }
        *((_QWORD *)v45 - 1) = v23;
        v95 = (char *)a1[1];
        v94 = (char *)a1[2];
        a1[1] = v95 - 8;
        v96 = *((_QWORD *)v95 - 1);
        a1[1] = v95;
        if (v94 != (char *)a1[3])
          goto LABEL_81;
        v113 = (char *)*a1;
        if ((unint64_t)v95 > *a1)
        {
          v114 = v6;
          v115 = (uint64_t)&v95[-*a1] >> 3;
          if (v115 >= -1)
            v116 = v115 + 1;
          else
            v116 = v115 + 2;
          v117 = v116 >> 1;
          v118 = -v117;
          v119 = &v95[-8 * v117];
          v120 = v94 - v95;
          if (v94 != v95)
          {
            memmove(&v95[-8 * v117], v95, v94 - v95);
            v95 = (char *)a1[1];
          }
          v94 = &v119[v120];
          a1[1] = &v95[8 * v118];
          a1[2] = &v119[v120];
          v6 = v114;
          goto LABEL_82;
        }
        v129 = (v94 - v113) >> 2;
        if (v94 == v113)
          v129 = 1;
        if (!(v129 >> 61))
        {
          v130 = v6;
          v131 = v129 >> 2;
          v132 = 8 * v129;
          v133 = (char *)operator new(8 * v129);
          v134 = &v133[8 * v131];
          v135 = &v133[v132];
          v136 = v94 - v95;
          v52 = v94 == v95;
          v94 = v134;
          v6 = v130;
          if (v52)
            goto LABEL_117;
          v94 = &v134[v136 & 0xFFFFFFFFFFFFFFF8];
          v137 = v136 - 8;
          if ((unint64_t)(v136 - 8) >= 0x38)
          {
            v139 = &v133[8 * v131];
            v138 = v139;
            if ((unint64_t)(v139 - v95) >= 0x20)
            {
              v140 = (v137 >> 3) + 1;
              v141 = 8 * (v140 & 0x3FFFFFFFFFFFFFFCLL);
              v138 = &v134[v141];
              v142 = &v95[v141];
              v143 = (__int128 *)(v95 + 16);
              v144 = v139 + 16;
              v145 = v140 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v146 = *v143;
                *(v144 - 1) = *(v143 - 1);
                *v144 = v146;
                v143 += 2;
                v144 += 2;
                v145 -= 4;
              }
              while (v145);
              v95 = v142;
              if (v140 == (v140 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_117:
                *a1 = v133;
                a1[1] = v134;
                a1[2] = v94;
                a1[3] = v135;
                if (v113)
                {
                  operator delete(v113);
                  v94 = (char *)a1[2];
                }
LABEL_81:
                if (!v94)
                  goto LABEL_119;
LABEL_82:
                *(_QWORD *)v94 = v96;
                goto LABEL_83;
              }
            }
          }
          else
          {
            v138 = &v133[8 * v131];
          }
          do
          {
            v147 = *(_QWORD *)v95;
            v95 += 8;
            *(_QWORD *)v138 = v147;
            v138 += 8;
          }
          while (v138 != v94);
          goto LABEL_117;
        }
LABEL_120:
        std::__throw_bad_array_new_length[abi:sn180100]();
      }
      v148 = v8 - v9;
      v24 = v21 >> 2;
      if (v19 == v20)
        v25 = 1;
      else
        v25 = v24;
      if (v25 >> 61)
        goto LABEL_120;
      v26 = (char *)operator new(8 * v25);
      v27 = &v26[8 * v10];
      v28 = &v26[8 * v25];
      v29 = operator new(0xFC0uLL);
      v30 = v29;
      if (v10 == v25)
      {
        if (v148 < 1)
        {
          v56 = v148 >> 2;
          if (v8 == v9)
            v56 = 1;
          if (v56 >> 61)
            goto LABEL_120;
          v57 = 8 * v56;
          v27 = (char *)operator new(8 * v56);
          operator delete(v26);
          v28 = &v27[v57];
          v58 = (char *)a1[1];
          v8 = (char *)a1[2];
          v26 = v27;
          *(_QWORD *)v27 = v30;
          v32 = v27 + 8;
          if (v8 != v58)
          {
            while (1)
            {
LABEL_49:
              if (v27 == v26)
              {
                if (v32 >= v28)
                {
                  v63 = (v28 - v27) >> 2;
                  if (v28 == v27)
                    v63 = 1;
                  if (v63 >> 61)
                    goto LABEL_120;
                  v64 = (v63 + 3) >> 2;
                  v65 = 8 * v63;
                  v66 = (char *)operator new(8 * v63);
                  v26 = v66;
                  v59 = &v66[8 * v64];
                  v34 = v59;
                  v67 = v32 - v27;
                  if (v32 != v27)
                  {
                    v34 = &v59[v67 & 0xFFFFFFFFFFFFFFF8];
                    v68 = v67 - 8;
                    v69 = &v66[8 * v64];
                    v70 = v27;
                    if (v68 < 0x38)
                      goto LABEL_124;
                    v69 = &v66[8 * v64];
                    v70 = v27;
                    if ((unint64_t)(v69 - v27) < 0x20)
                      goto LABEL_124;
                    v71 = (v68 >> 3) + 1;
                    v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
                    v69 = &v59[v72];
                    v70 = &v27[v72];
                    v73 = (__int128 *)(v27 + 16);
                    v74 = &v66[8 * v64 + 16];
                    v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
                    do
                    {
                      v76 = *v73;
                      *((_OWORD *)v74 - 1) = *(v73 - 1);
                      *(_OWORD *)v74 = v76;
                      v73 += 2;
                      v74 += 32;
                      v75 -= 4;
                    }
                    while (v75);
                    if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
                    {
LABEL_124:
                      do
                      {
                        v77 = *(_QWORD *)v70;
                        v70 += 8;
                        *(_QWORD *)v69 = v77;
                        v69 += 8;
                      }
                      while (v69 != v34);
                    }
                  }
                  v28 = &v66[v65];
                  operator delete(v27);
                }
                else
                {
                  v61 = (v28 - v32) >> 3;
                  if (v61 >= -1)
                    v62 = v61 + 1;
                  else
                    v62 = v61 + 2;
                  v34 = &v32[8 * (v62 >> 1)];
                  v59 = &v27[8 * (v62 >> 1)];
                  if (v32 == v27)
                  {
                    v26 = v32;
                  }
                  else
                  {
                    memmove(&v27[8 * (v62 >> 1)], v27, v32 - v27);
                    v26 = v27;
                  }
                }
              }
              else
              {
                v59 = v27;
                v34 = v32;
              }
              v60 = *((_QWORD *)v8 - 1);
              v8 -= 8;
              *((_QWORD *)v59 - 1) = v60;
              v33 = v59 - 8;
              v32 = v34;
              v27 = v33;
              if (v8 == (char *)a1[1])
                goto LABEL_25;
            }
          }
LABEL_24:
          v33 = v27;
          v34 = v32;
LABEL_25:
          v35 = (char *)*a1;
          *a1 = v26;
          a1[1] = v33;
          v8 = v34;
          a1[2] = v34;
          a1[3] = v28;
          v5 = a3;
          v4 = a4;
          v6 = __sz;
          if (v35)
          {
            operator delete(v35);
            v8 = (char *)a1[2];
          }
          goto LABEL_84;
        }
        v31 = v10 + 2;
        if (v10 >= -1)
          v31 = v10 + 1;
        v27 -= 8 * (v31 >> 1);
      }
      *(_QWORD *)v27 = v29;
      v32 = v27 + 8;
      if (v8 != v9)
        goto LABEL_49;
      goto LABEL_24;
    }
    a1[4] = v16;
    v17 = v9 + 8;
    v18 = *(_QWORD *)v9;
    a1[1] = v9 + 8;
    if (v8 != (char *)a1[3])
      goto LABEL_8;
    v36 = (char *)*a1;
    if ((unint64_t)v17 > *a1)
    {
      v38 = (uint64_t)&v17[-*a1] >> 3;
      if (v38 >= -1)
        v39 = v38 + 1;
      else
        v39 = v38 + 2;
      v40 = v39 >> 1;
      v41 = -v40;
      v42 = &v17[-8 * v40];
      v43 = v8 - v17;
      if (v8 != v17)
      {
        memmove(&v17[-8 * v40], v17, v8 - v17);
        v8 = (char *)a1[1];
      }
      v44 = &v8[8 * v41];
      v8 = &v42[v43];
      a1[1] = v44;
      a1[2] = &v42[v43];
      v6 = __sz;
      goto LABEL_9;
    }
    v46 = (v8 - v36) >> 2;
    if (v8 == v36)
      v46 = 1;
    if (v46 >> 61)
      goto LABEL_120;
    v47 = v46 >> 2;
    v48 = 8 * v46;
    v49 = (char *)operator new(8 * v46);
    v50 = &v49[8 * v47];
    v51 = &v49[v48];
    v53 = v8 - v17;
    v52 = v8 == v17;
    v8 = v50;
    v6 = __sz;
    if (!v52)
    {
      v8 = &v50[v53 & 0xFFFFFFFFFFFFFFF8];
      v54 = v53 - 8;
      if ((unint64_t)(v53 - 8) < 0x38)
      {
        v55 = &v49[8 * v47];
        do
        {
LABEL_103:
          v128 = *(_QWORD *)v17;
          v17 += 8;
          *(_QWORD *)v55 = v128;
          v55 += 8;
        }
        while (v55 != v8);
        goto LABEL_104;
      }
      v121 = &v49[8 * v47];
      v55 = v121;
      if ((unint64_t)(v121 - v17) < 0x20)
        goto LABEL_103;
      v122 = (v54 >> 3) + 1;
      v123 = 8 * (v122 & 0x3FFFFFFFFFFFFFFCLL);
      v55 = &v50[v123];
      v17 += v123;
      v124 = (__int128 *)(v9 + 24);
      v125 = v121 + 16;
      v126 = v122 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v127 = *v124;
        *(v125 - 1) = *(v124 - 1);
        *v125 = v127;
        v124 += 2;
        v125 += 2;
        v126 -= 4;
      }
      while (v126);
      if (v122 != (v122 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_103;
    }
LABEL_104:
    *a1 = v49;
    a1[1] = v50;
    a1[2] = v8;
    a1[3] = v51;
    if (v36)
    {
      operator delete(v36);
      v8 = (char *)a1[2];
    }
LABEL_8:
    if (!v8)
      goto LABEL_119;
LABEL_9:
    *(_QWORD *)v8 = v18;
    v8 = (char *)(a1[2] + 8);
    a1[2] = v8;
LABEL_84:
    v12 = (char *)a1[1];
  }
  if (v8 == v12)
    goto LABEL_119;
  v97 = a1[5] + a1[4];
  v98 = *(_QWORD *)&v12[8 * (v97 / 0x2A)];
  if (!v98)
    goto LABEL_119;
  v99 = v98 + 96 * (v97 % 0x2A);
  v100 = *v6;
  v101 = *v5;
  v102 = v5[1];
  v103 = *((_OWORD *)v5 + 1);
  v5[2] = 0;
  v5[3] = 0;
  v5[1] = 0;
  v104 = *((_QWORD *)v4 + 2);
  v105 = *v4;
  *(_DWORD *)v99 = v100;
  *(_QWORD *)(v99 + 8) = v101;
  *(_QWORD *)(v99 + 16) = v102;
  *(_OWORD *)(v99 + 24) = v103;
  *(_OWORD *)(v99 + 40) = v105;
  *(_QWORD *)(v99 + 56) = v104;
  *(_QWORD *)(v99 + 64) = 0;
  *(_QWORD *)(v99 + 72) = v103 - v102;
  *(_BYTE *)(v99 + 80) = 0;
  *(_BYTE *)(v99 + 84) = 0;
  *(_BYTE *)(v99 + 88) = 0;
  *(_BYTE *)(v99 + 90) = 0;
  *(_DWORD *)(v99 + 92) = 0;
  v106 = a1[4];
  v107 = a1[5] + 1;
  a1[5] = v107;
  v108 = v106 + v107;
  v109 = a1[1];
  v110 = (_QWORD *)(v109 + 8 * (v108 / 0x2A));
  v111 = *v110 + 96 * (v108 % 0x2A);
  if (a1[2] == v109)
    v111 = 0;
  if (v111 == *v110)
    v111 = *(v110 - 1) + 4032;
  return v111 - 96;
}

void dcsctp::RRSendQueue::OutgoingStream::Produce(dcsctp::RRSendQueue::OutgoingStream *this@<X0>, Timestamp a2@<0:X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char v16;
  __int16 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  size_t v32;
  char *v33;
  char *v34;
  BOOL v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  int v53;
  char v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  BOOL v60;
  unint64_t v61;
  uint64_t v62;
  char v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  size_t v67;
  int v68;
  int v69;
  __int16 v70;
  BOOL v71;
  BOOL v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  char *v77;
  char *v78;
  char *v80;
  __int16 v81;

  if (*((_QWORD *)this + 10))
  {
    v7 = *((_QWORD *)this + 9);
    while (1)
    {
      v8 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * (v7 / 0x2A));
      v9 = v7 % 0x2A;
      v10 = (int *)(v8 + 96 * (v7 % 0x2A));
      v11 = v10 + 20;
      if (*((_BYTE *)v10 + 84))
      {
        v74 = v8 + 96 * v9;
        v76 = v10 + 21;
        v17 = (__int16 *)(v74 + 8);
        if (*(_BYTE *)(v74 + 40))
          goto LABEL_19;
        goto LABEL_17;
      }
      if (*(_QWORD *)(v8 + 96 * v9 + 48) > a2.var0)
        break;
      dcsctp::RRSendQueue::OutgoingStream::HandleMessageExpired(this, v8 + 96 * v9);
      v12 = *((_QWORD *)this + 9);
      v13 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * (v12 / 0x2A));
      if (!v13)
        goto LABEL_61;
      v14 = *(void **)(v13 + 96 * (v12 % 0x2A) + 16);
      if (v14)
      {
        *(_QWORD *)(v13 + 96 * (v12 % 0x2A) + 24) = v14;
        operator delete(v14);
        v12 = *((_QWORD *)this + 9);
      }
      v15 = *((_QWORD *)this + 10) - 1;
      v7 = v12 + 1;
      *((_QWORD *)this + 9) = v7;
      *((_QWORD *)this + 10) = v15;
      if (v7 >= 0x54)
      {
        operator delete(**((void ***)this + 6));
        *((_QWORD *)this + 6) += 8;
        v15 = *((_QWORD *)this + 10);
        v7 = *((_QWORD *)this + 9) - 42;
        *((_QWORD *)this + 9) = v7;
      }
      if (!v15)
        goto LABEL_11;
    }
    *((_BYTE *)v10 + 84) = 1;
    v76 = v10 + 21;
    v18 = *(unsigned __int8 *)(v8 + 96 * v9 + 40);
    v19 = 28;
    if (!*(_BYTE *)(v8 + 96 * v9 + 40))
      v19 = 32;
    *v11 = (*(_DWORD *)((char *)this + v19))++;
    v74 = v8 + 96 * v9;
    v17 = (__int16 *)(v74 + 8);
    if (!v18)
    {
LABEL_17:
      v20 = v8 + 96 * v9;
      if (!*(_BYTE *)(v20 + 90))
      {
        v21 = v20 + 88;
        v22 = *((_WORD *)this + 18);
        *(_BYTE *)(v21 + 2) = 1;
        *(_WORD *)v21 = v22;
        ++*((_WORD *)this + 18);
      }
    }
LABEL_19:
    v23 = v8 + 96 * v9;
    v26 = *(_QWORD *)(v23 + 64);
    v25 = (_QWORD *)(v23 + 64);
    v24 = v26;
    v27 = (char *)*(v25 - 6);
    v28 = (char *)*(v25 - 5);
    v29 = v28 - v27;
    if (v28 == v27)
      v30 = 0;
    else
      v30 = (char *)*(v25 - 6);
    v31 = &v30[v24];
    v32 = v29 - v24;
    if (v29 - v24 >= a3)
      v32 = a3;
    if (!v32)
      v31 = 0;
    if (v29 > v24)
    {
      v33 = v31;
    }
    else
    {
      v32 = 0;
      v33 = 0;
    }
    v34 = &v30[v29];
    v72 = &v33[v32] == v34;
    v70 = *v17;
    v71 = v30 == v33;
    v80 = &v33[v32];
    v73 = v34;
    v35 = v30 == v33 && &v33[v32] == v34;
    v69 = *(_DWORD *)(v8 + 96 * v9 + 12);
    v67 = v32;
    if (v35)
    {
      v78 = *(char **)(v8 + 96 * v9 + 32);
      *(v25 - 6) = 0;
      *(v25 - 5) = 0;
      *(v25 - 4) = 0;
    }
    else if (v32)
    {
      v36 = v32;
      if ((v32 & 0x8000000000000000) != 0)
        goto LABEL_63;
      v37 = (char *)operator new(v32);
      v78 = &v37[v36];
      memcpy(v37, v33, v36);
      v27 = v37;
      v28 = &v37[v36];
    }
    else
    {
      v78 = 0;
      v28 = 0;
      v27 = 0;
    }
    v38 = v8 + 96 * v9;
    v68 = *(_DWORD *)(v38 + 92);
    *(_DWORD *)(v38 + 92) = v68 + 1;
    v39 = v28 - v27;
    v41 = *((_QWORD *)this + 15);
    v40 = *((_QWORD *)this + 16);
    v42 = v41 - (v28 - v27);
    *((_QWORD *)this + 15) = v42;
    if (v41 > v40 && v42 <= v40)
    {
      v43 = *((_QWORD *)this + 14);
      if (!v43)
        goto LABEL_62;
      v44 = v27;
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 48))(v43);
      v27 = v44;
    }
    v45 = (_QWORD *)*((_QWORD *)this + 1);
    v47 = v45[18];
    v46 = v45[19];
    v45[18] = v47 - v39;
    if (v47 <= v46 || v47 - v39 > v46)
    {
LABEL_46:
      v50 = v8 + 96 * v9;
      if (*(_BYTE *)(v50 + 90))
      {
        v51 = *(_WORD *)(v50 + 88);
        if (!*v76)
          goto LABEL_61;
      }
      else
      {
        v51 = 0;
        if (!*v76)
          goto LABEL_61;
      }
      v52 = *v10;
      v53 = *v11;
      v54 = *(_BYTE *)(v74 + 40);
      v55 = v8 + 96 * v9;
      v56 = *(_WORD *)(v55 + 42);
      v57 = *(_QWORD *)(v55 + 48);
      if (v80 != v73)
      {
        v58 = 0;
        *v25 += v67;
        *(_QWORD *)(v8 + 96 * v9 + 72) -= v67;
        v60 = v71;
        v59 = v72;
LABEL_59:
        *(_DWORD *)a4 = v52;
        *(_WORD *)(a4 + 8) = v70;
        *(_WORD *)(a4 + 10) = v51;
        *(_DWORD *)(a4 + 12) = v53;
        *(_DWORD *)(a4 + 16) = v68;
        *(_DWORD *)(a4 + 20) = v69;
        *(_QWORD *)(a4 + 24) = v27;
        *(_QWORD *)(a4 + 32) = v28;
        *(_QWORD *)(a4 + 40) = v78;
        *(_BYTE *)(a4 + 48) = v60;
        *(_BYTE *)(a4 + 49) = v59;
        *(_BYTE *)(a4 + 50) = v54;
        *(_WORD *)(a4 + 56) = v56;
        v16 = 1;
        *(_QWORD *)(a4 + 64) = v57;
        *(_QWORD *)(a4 + 72) = v58;
        goto LABEL_60;
      }
      v81 = v51;
      v77 = v27;
      v61 = *((_QWORD *)this + 9);
      v62 = *(_QWORD *)(*((_QWORD *)this + 6) + 8 * (v61 / 0x2A));
      if (v62)
      {
        v75 = v57;
        v63 = v54;
        v58 = *(_QWORD *)(v8 + 96 * v9 + 56);
        v64 = *(void **)(v62 + 96 * (v61 % 0x2A) + 16);
        if (v64)
        {
          *(_QWORD *)(v62 + 96 * (v61 % 0x2A) + 24) = v64;
          operator delete(v64);
          v61 = *((_QWORD *)this + 9);
        }
        v60 = v71;
        v59 = v72;
        v65 = *((_QWORD *)this + 10) - 1;
        v66 = v61 + 1;
        *((_QWORD *)this + 9) = v66;
        *((_QWORD *)this + 10) = v65;
        if (v66 >= 0x54)
        {
          operator delete(**((void ***)this + 6));
          *((_QWORD *)this + 6) += 8;
          *((_QWORD *)this + 9) -= 42;
        }
        v57 = v75;
        v27 = v77;
        v51 = v81;
        v54 = v63;
        if (*((_DWORD *)this + 6) == 1)
          *((_DWORD *)this + 6) = 2;
        goto LABEL_59;
      }
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v48 = v45[17];
    if (v48)
    {
      v49 = v27;
      (*(void (**)(uint64_t))(*(_QWORD *)v48 + 48))(v48);
      v27 = v49;
      goto LABEL_46;
    }
LABEL_62:
    std::__throw_bad_function_call[abi:sn180100]();
LABEL_63:
    abort();
  }
LABEL_11:
  v16 = 0;
  *(_BYTE *)a4 = 0;
LABEL_60:
  *(_BYTE *)(a4 + 80) = v16;
}

void dcsctp::RRSendQueue::OutgoingStream::HandleMessageExpired(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v4 = *(_QWORD *)(a2 + 72);
  v5 = a1[15];
  v6 = a1[16];
  a1[15] = v5 - v4;
  if (v5 > v6 && v5 - v4 <= v6)
  {
    v8 = a1[14];
    if (!v8)
      goto LABEL_16;
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
    v4 = *(_QWORD *)(a2 + 72);
  }
  v9 = (_QWORD *)a1[1];
  v10 = v9[18];
  v11 = v9[19];
  v12 = v10 - v4;
  v9[18] = v12;
  if (v10 <= v11 || v12 > v11)
    goto LABEL_13;
  v14 = v9[17];
  if (!v14)
  {
LABEL_16:
    v16 = std::__throw_bad_function_call[abi:sn180100]();
    dcsctp::RRSendQueue::Add(v16, v17, v18, v19);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v14 + 48))(v14);
LABEL_13:
  v15 = *(_QWORD *)(a2 + 56);
  if (v15)
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1[1] + 24) + 176))(*(_QWORD *)(a1[1] + 24), v15, 0);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1[1] + 24) + 192))(*(_QWORD *)(a1[1] + 24), *(_QWORD *)(a2 + 56));
  }
}

void dcsctp::RRSendQueue::Add(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v5;
  __int16 v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int16 *StreamInfo;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  dcsctp::StreamScheduler::Stream *v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  void *__p;
  __int128 v22;
  int v23;

  v5 = *a4;
  if (a4[24])
    v6 = *((_WORD *)a4 + 8);
  else
    v6 = -1;
  v7 = 0x7FFFFFFFFFFFFFFFLL;
  if (a4[8])
  {
    if (a2 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v8 = *((_DWORD *)a4 + 1);
      if (v8 != 0x7FFFFFFF)
      {
        if (a2 != 0x8000000000000000)
        {
          v9 = a2 + 1000 * v8;
          if (v9 == 0x7FFFFFFFFFFFFFFFLL)
            goto LABEL_12;
          if (v9 != 0x8000000000000000)
          {
            v7 = v9 + 1000;
            goto LABEL_12;
          }
        }
        v7 = 0x8000000000000000;
      }
    }
  }
LABEL_12:
  v10 = *((_QWORD *)a4 + 4);
  StreamInfo = dcsctp::RRSendQueue::GetOrCreateStreamInfo(a1, *(_WORD *)a3);
  v12 = *(void **)(a3 + 8);
  v20 = *(_QWORD *)a3;
  __p = v12;
  v22 = *(_OWORD *)(a3 + 16);
  v17 = v22;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  LOBYTE(v18) = v5;
  WORD1(v18) = v6;
  *((_QWORD *)&v18 + 1) = v7;
  v19 = v10;
  v13 = (*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)StreamInfo + 24))(StreamInfo);
  *((_QWORD *)StreamInfo + 15) += v17 - (_QWORD)v12;
  v14 = *((_QWORD *)StreamInfo + 1);
  *(_QWORD *)(v14 + 144) += v17 - (_QWORD)v12;
  v23 = *(_DWORD *)(v14 + 36);
  *(_DWORD *)(v14 + 36) = v23 + 1;
  std::deque<dcsctp::RRSendQueue::OutgoingStream::Item>::emplace_back<webrtc::StrongAlias<dcsctp::OutgoingMessageIdTag,unsigned int> &,dcsctp::DcSctpMessage,dcsctp::RRSendQueue::MessageAttributes>((_QWORD *)StreamInfo + 5, &v23, &v20, &v18);
  if (!v13)
  {
    v15 = (dcsctp::StreamScheduler::Stream *)*((_QWORD *)StreamInfo + 2);
    v16 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v15 + 1) + 24))(*((_QWORD **)v15 + 1));
    if (v16)
      dcsctp::StreamScheduler::Stream::MakeActive(v15, v16);
  }
  if (__p)
  {
    *(_QWORD *)&v22 = __p;
    operator delete(__p);
  }
}

unsigned __int16 *dcsctp::RRSendQueue::GetOrCreateStreamInfo(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  unsigned __int16 *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned __int16 v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned __int16 *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned __int16 *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v5 = (unsigned __int16 *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 168);
  if (!v4)
    goto LABEL_12;
  v6 = (unsigned __int16 *)(a1 + 168);
  do
  {
    v7 = *(unsigned __int16 *)(v4 + 32);
    v8 = v7 >= a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v4;
    else
      v9 = (uint64_t *)(v4 + 8);
    if (v8)
      v6 = (unsigned __int16 *)v4;
    v4 = *v9;
  }
  while (*v9);
  if (v6 == v5 || v6[16] > a2)
  {
LABEL_12:
    v10 = a2;
    v6 = (unsigned __int16 *)operator new(0xB0uLL);
    v6[16] = a2;
    v11 = *(_WORD *)(a1 + 32);
    v24[0] = &off_24C0BBA58;
    v24[1] = a1;
    v24[2] = v10;
    v25 = v24;
    dcsctp::RRSendQueue::OutgoingStream::OutgoingStream((uint64_t)(v6 + 20), a1, a1 + 40, v10, v11, v24, 0);
    v12 = v25;
    if (v25 == v24)
    {
      v13 = 4;
      v12 = v24;
    }
    else
    {
      if (!v25)
        goto LABEL_17;
      v13 = 5;
    }
    (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_17:
    v14 = *(uint64_t **)v5;
    v15 = v5;
    if (!*(_QWORD *)v5)
    {
LABEL_24:
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = v15;
      *(_QWORD *)v5 = v6;
      v18 = **(_QWORD **)(a1 + 160);
      v19 = (uint64_t *)v6;
      if (v18)
      {
        *(_QWORD *)(a1 + 160) = v18;
        v19 = *(uint64_t **)v5;
      }
      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 168), v19);
      ++*(_QWORD *)(a1 + 176);
      return v6 + 20;
    }
    v16 = v6[16];
    while (1)
    {
      while (1)
      {
        v15 = (unsigned __int16 *)v14;
        v17 = *((unsigned __int16 *)v14 + 16);
        if (v16 >= v17)
          break;
        v14 = *(uint64_t **)v15;
        v5 = v15;
        if (!*(_QWORD *)v15)
          goto LABEL_24;
      }
      if (v17 >= v16)
        break;
      v14 = (uint64_t *)*((_QWORD *)v15 + 1);
      if (!v14)
      {
        v5 = v15 + 4;
        goto LABEL_24;
      }
    }
    *((_QWORD *)v6 + 5) = &off_24C0BB9E0;
    v21 = (unsigned __int16 *)*((_QWORD *)v6 + 19);
    if (v21 == v6 + 64)
    {
      v22 = 4;
      v21 = v6 + 64;
    }
    else
    {
      if (!v21)
      {
LABEL_33:
        std::deque<dcsctp::RRSendQueue::OutgoingStream::Item>::~deque[abi:sn180100]((uint64_t)(v6 + 40));
        v23 = *((_QWORD *)v6 + 7);
        *((_QWORD *)v6 + 7) = 0;
        if (v23)
          MEMORY[0x20BD0ADEC](v23, 0x1020C401CCFFAA1);
        operator delete(v6);
        v6 = v15;
        return v6 + 20;
      }
      v22 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
    goto LABEL_33;
  }
  return v6 + 20;
}

void dcsctp::RRSendQueue::Produce(dcsctp::RRSendQueue *this@<X0>, Timestamp a2@<0:X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  dcsctp::StreamScheduler::Produce((dcsctp::RRSendQueue *)((char *)this + 40), a2, a3, a4);
}

void dcsctp::RRSendQueue::Discard(uint64_t a1, unsigned __int16 a2, int a3)
{
  unsigned __int16 *StreamInfo;
  unsigned __int16 *v5;
  _DWORD *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  char **v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  int64_t v22;

  StreamInfo = dcsctp::RRSendQueue::GetOrCreateStreamInfo(a1, a2);
  if (!*((_QWORD *)StreamInfo + 10))
    return;
  v5 = StreamInfo;
  v6 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)StreamInfo + 6) + 8 * (*((_QWORD *)StreamInfo + 9) / 0x2AuLL))
                + 96 * (*((_QWORD *)StreamInfo + 9) % 0x2AuLL));
  if (*v6 != a3)
    return;
  dcsctp::RRSendQueue::OutgoingStream::HandleMessageExpired(StreamInfo, (uint64_t)v6);
  v7 = *((_QWORD *)v5 + 9);
  v8 = *(_QWORD *)(*((_QWORD *)v5 + 6) + 8 * (v7 / 0x2A));
  if (!v8)
  {
LABEL_39:
    __break(1u);
    return;
  }
  v9 = *(void **)(v8 + 96 * (v7 % 0x2A) + 16);
  if (v9)
  {
    *(_QWORD *)(v8 + 96 * (v7 % 0x2A) + 24) = v9;
    operator delete(v9);
    v7 = *((_QWORD *)v5 + 9);
  }
  v10 = *((_QWORD *)v5 + 10) - 1;
  v11 = v7 + 1;
  *((_QWORD *)v5 + 9) = v11;
  *((_QWORD *)v5 + 10) = v10;
  if (v11 >= 0x54)
  {
    operator delete(**((void ***)v5 + 6));
    *((_QWORD *)v5 + 6) += 8;
    *((_QWORD *)v5 + 9) -= 42;
  }
  v12 = (_QWORD *)*((_QWORD *)v5 + 2);
  v13 = *v12;
  *(_BYTE *)(*v12 + 41) = 0;
  if (*((_DWORD *)v5 + 6) == 1)
  {
    *((_DWORD *)v5 + 6) = 2;
    v12[5] = 0;
    v16 = *(char **)(v13 + 56);
    v15 = (char **)(v13 + 56);
    v14 = v16;
    v17 = *(v15 - 1);
    if (v17 == v16)
      return;
    while (*(_QWORD **)v17 != v12)
    {
      v17 += 8;
      if (v17 == v14)
        return;
    }
    if (v17 == v14)
      goto LABEL_34;
    v19 = v17 + 8;
    if (v17 + 8 == v14)
      goto LABEL_34;
    do
    {
      if (*(_QWORD **)v19 != v12)
      {
        *(_QWORD *)v17 = *(_QWORD *)v19;
        v17 += 8;
      }
      v19 += 8;
    }
    while (v19 != v14);
LABEL_33:
    v14 = *v15;
    goto LABEL_34;
  }
  if ((*(uint64_t (**)(unsigned __int16 *))(*(_QWORD *)v5 + 24))(v5))
    return;
  v18 = (_QWORD *)*((_QWORD *)v5 + 2);
  v18[5] = 0;
  v17 = *(char **)(*v18 + 48);
  v15 = (char **)(*v18 + 56);
  v14 = *v15;
  if (v17 == *v15)
    return;
  while (*(_QWORD **)v17 != v18)
  {
    v17 += 8;
    if (v17 == v14)
      return;
  }
  if (v17 != v14)
  {
    v20 = v17 + 8;
    if (v17 + 8 != v14)
    {
      do
      {
        if (*(_QWORD **)v20 != v18)
        {
          *(_QWORD *)v17 = *(_QWORD *)v20;
          v17 += 8;
        }
        v20 += 8;
      }
      while (v20 != v14);
      goto LABEL_33;
    }
  }
LABEL_34:
  if (v14 < v17)
    goto LABEL_39;
  if (v17 != v14)
  {
    v21 = &v17[8 * ((v14 - v17) >> 3)];
    v22 = v14 - v21;
    if (v14 != v21)
      memmove(v17, v21, v14 - v21);
    *v15 = &v17[v22];
  }
}

void dcsctp::RRSendQueue::PrepareResetStream(uint64_t a1, unsigned __int16 a2)
{
  unsigned __int16 *StreamInfo;
  unint64_t v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void **v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  void **v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  int64_t v80;
  int64_t v81;
  int64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  void **v90;
  void *v91;
  unsigned __int16 *v92;
  int64x2_t v93;
  char v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  int64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t *v110;
  _QWORD *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  int64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void *v124;
  uint64_t v125;
  int64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  void *v131;
  unint64_t v132;
  int64_t v133;
  uint64_t v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  void *v138;
  unint64_t v139;
  void *v140;
  void **v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  char *v149;
  int64_t v150;
  unint64_t v151;
  char v152;
  uint64_t v153;
  unsigned __int16 *v154;
  _QWORD *v155;
  uint64_t *v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;

  StreamInfo = dcsctp::RRSendQueue::GetOrCreateStreamInfo(a1, a2);
  if (*((_DWORD *)StreamInfo + 6))
    return;
  v3 = *((_QWORD *)StreamInfo + 9);
  v4 = (void **)*((_QWORD *)StreamInfo + 6);
  v5 = (void **)*((_QWORD *)StreamInfo + 7);
  v6 = &v4[v3 / 0x2A];
  if (v5 == v4)
    v7 = 0;
  else
    v7 = (uint64_t)*v6 + 96 * (v3 % 0x2A);
  v154 = StreamInfo;
  v153 = *((_QWORD *)StreamInfo + 10);
  v8 = v153;
LABEL_7:
  v9 = -v7;
  while (v5 != v4)
  {
    if ((void *)v7 == (char *)v4[(v8 + v3) / 0x2A] + 96 * ((v8 + v3) % 0x2A))
      goto LABEL_168;
LABEL_12:
    if (!*(_QWORD *)(v7 + 64))
    {
      dcsctp::RRSendQueue::OutgoingStream::HandleMessageExpired(v154, v7);
      v11 = *((_QWORD *)v154 + 9);
      v12 = v11 / 0x2A;
      v13 = *((_QWORD *)v154 + 6);
      v14 = *((_QWORD *)v154 + 7);
      v15 = (_QWORD *)(v13 + 8 * (v11 / 0x2A));
      if (v14 != v13)
      {
        v16 = *v15 + 96 * (v11 % 0x2A);
        v155 = (_QWORD *)(v13 + 8 * v12);
        v157 = v16;
        if (v7 != v16)
          goto LABEL_17;
LABEL_23:
        v18 = 0;
        v17 = *v15;
        goto LABEL_24;
      }
      v16 = 0;
      v155 = (_QWORD *)(v13 + 8 * v12);
      v157 = 0;
      if (!v7)
        goto LABEL_23;
LABEL_17:
      v17 = *v15;
      v18 = 42 * (v6 - (void **)v15)
          - 0x5555555555555555 * (-((uint64_t)*v6 + v9) >> 5)
          + 0x5555555555555555 * ((uint64_t)(v16 - *v15) >> 5);
      if (!v18)
      {
LABEL_24:
        v152 = 1;
        v20 = v16;
        v151 = v18;
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - v17) >> 5);
        if ((uint64_t)(v16 - v17) < -95)
          goto LABEL_72;
        goto LABEL_25;
      }
      v19 = 42 * (v6 - (void **)v15) - 0x5555555555555555 * (-((uint64_t)*v6 + v9) >> 5);
      if (v19 >= 1)
      {
        v15 += v19 / 0x2AuLL;
        v17 = *v15;
        v20 = *v15 + 96 * (v19 % 0x2AuLL);
        v21 = *((_QWORD *)v154 + 10);
        if (v18 > (unint64_t)(v21 - 1) >> 1)
          goto LABEL_20;
LABEL_71:
        v152 = 0;
        v151 = v18;
        v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v17) >> 5);
        if ((uint64_t)(v20 - v17) < -95)
        {
LABEL_72:
          v77 = 40 - v28;
          v78 = (40 - v28) / 0x2A;
          v31 = &v15[-v78];
          v32 = *v31;
          v33 = *v31 + 96 * (42 * v78 - v77) + 3936;
          v34 = v157;
          if (v155 == v15)
            goto LABEL_73;
LABEL_26:
          if (v17 != v20)
          {
            v159 = v15;
            while (1)
            {
              v35 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 5);
              if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v17) >> 5)) >= v35)
                v36 = v35;
              else
                v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v17) >> 5);
              if (v36)
              {
                v37 = 0;
                do
                {
                  v41 = v20 + v37;
                  v42 = v33 + v37;
                  v44 = (void **)(v33 + v37 - 80);
                  v43 = *v44;
                  *((_DWORD *)v44 - 4) = *(_DWORD *)(v20 + v37 - 96);
                  *(v44 - 1) = *(void **)(v20 + v37 - 88);
                  if (v43)
                  {
                    *(_QWORD *)(v42 - 72) = v43;
                    operator delete(v43);
                    *v44 = 0;
                    *(_QWORD *)(v33 + v37 - 72) = 0;
                    *(_QWORD *)(v33 + v37 - 64) = 0;
                  }
                  *(_OWORD *)v44 = *(_OWORD *)(v41 - 80);
                  *(_QWORD *)(v42 - 64) = *(_QWORD *)(v41 - 64);
                  *(_QWORD *)(v41 - 80) = 0;
                  *(_QWORD *)(v41 - 72) = 0;
                  *(_QWORD *)(v41 - 64) = 0;
                  v38 = *(_OWORD *)(v41 - 56);
                  v39 = *(_OWORD *)(v41 - 40);
                  v40 = *(_OWORD *)(v41 - 24);
                  *(_QWORD *)(v42 - 8) = *(_QWORD *)(v41 - 8);
                  *(_OWORD *)(v42 - 24) = v40;
                  *(_OWORD *)(v42 - 40) = v39;
                  *(_OWORD *)(v42 - 56) = v38;
                  v37 -= 96;
                }
                while (-96 * v36 != v37);
                v33 += v37;
              }
              v20 -= 96 * v36;
              if (v20 == v17)
                break;
              v45 = *--v31;
              v32 = v45;
              v33 = v45 + 4032;
            }
            v32 = *v31;
            if (*v31 + 4032 == v33)
            {
              v46 = v31[1];
              ++v31;
              v32 = v46;
              v33 = v46;
            }
            v15 = v159;
          }
          v47 = v15 - 1;
          v48 = v155;
          while (v47 != v48)
          {
            v160 = v47;
            v49 = *v47;
            v50 = *v47 + 4032;
            while (1)
            {
              v51 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 5);
              if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 5)) >= v51)
                v52 = v51;
              else
                v52 = 0xAAAAAAAAAAAAAAABLL * ((v50 - v49) >> 5);
              if (v52)
              {
                v53 = 0;
                do
                {
                  v57 = v50 + v53;
                  v58 = v33 + v53;
                  v60 = (void **)(v33 + v53 - 80);
                  v59 = *v60;
                  *((_DWORD *)v60 - 4) = *(_DWORD *)(v50 + v53 - 96);
                  *(v60 - 1) = *(void **)(v50 + v53 - 88);
                  if (v59)
                  {
                    *(_QWORD *)(v58 - 72) = v59;
                    operator delete(v59);
                    *v60 = 0;
                    *(_QWORD *)(v33 + v53 - 72) = 0;
                    *(_QWORD *)(v33 + v53 - 64) = 0;
                  }
                  *(_OWORD *)v60 = *(_OWORD *)(v57 - 80);
                  *(_QWORD *)(v58 - 64) = *(_QWORD *)(v57 - 64);
                  *(_QWORD *)(v57 - 80) = 0;
                  *(_QWORD *)(v57 - 72) = 0;
                  *(_QWORD *)(v57 - 64) = 0;
                  v54 = *(_OWORD *)(v57 - 56);
                  v55 = *(_OWORD *)(v57 - 40);
                  v56 = *(_OWORD *)(v57 - 24);
                  *(_QWORD *)(v58 - 8) = *(_QWORD *)(v57 - 8);
                  *(_OWORD *)(v58 - 24) = v56;
                  *(_OWORD *)(v58 - 40) = v55;
                  *(_OWORD *)(v58 - 56) = v54;
                  v53 -= 96;
                }
                while (-96 * v52 != v53);
                v33 += v53;
              }
              v50 -= 96 * v52;
              if (v50 == v49)
                break;
              v61 = *--v31;
              v32 = v61;
              v33 = v61 + 4032;
            }
            v32 = *v31;
            if (*v31 + 4032 == v33)
            {
              v62 = v31[1];
              ++v31;
              v32 = v62;
              v33 = v62;
            }
            v48 = v155;
            v47 = v160 - 1;
          }
          v63 = *v48 + 4032;
          v34 = v157;
          if (v63 != v157)
          {
            while (1)
            {
              v64 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 5);
              v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v63 - v34) >> 5);
              if (v65 >= v64)
                v66 = v64;
              else
                v66 = v65;
              if (v66)
              {
                v67 = 0;
                do
                {
                  v71 = v63 + v67;
                  v72 = v33 + v67;
                  v74 = (void **)(v33 + v67 - 80);
                  v73 = *v74;
                  *((_DWORD *)v74 - 4) = *(_DWORD *)(v63 + v67 - 96);
                  *(v74 - 1) = *(void **)(v63 + v67 - 88);
                  if (v73)
                  {
                    *(_QWORD *)(v72 - 72) = v73;
                    operator delete(v73);
                    *v74 = 0;
                    *(_QWORD *)(v33 + v67 - 72) = 0;
                    *(_QWORD *)(v33 + v67 - 64) = 0;
                  }
                  *(_OWORD *)v74 = *(_OWORD *)(v71 - 80);
                  *(_QWORD *)(v72 - 64) = *(_QWORD *)(v71 - 64);
                  *(_QWORD *)(v71 - 80) = 0;
                  *(_QWORD *)(v71 - 72) = 0;
                  *(_QWORD *)(v71 - 64) = 0;
                  v68 = *(_OWORD *)(v71 - 56);
                  v69 = *(_OWORD *)(v71 - 40);
                  v70 = *(_OWORD *)(v71 - 24);
                  *(_QWORD *)(v72 - 8) = *(_QWORD *)(v71 - 8);
                  *(_OWORD *)(v72 - 24) = v70;
                  *(_OWORD *)(v72 - 40) = v69;
                  *(_OWORD *)(v72 - 56) = v68;
                  v67 -= 96;
                }
                while (-96 * v66 != v67);
              }
              v63 -= 96 * v66;
              v34 = v157;
              if (v63 == v157)
                break;
              v75 = *--v31;
              v32 = v75;
              v33 = v75 + 4032;
            }
          }
          goto LABEL_85;
        }
LABEL_25:
        v29 = v28 + 1;
        v30 = (v28 + 1) / 0x2A;
        v31 = &v15[v30];
        v32 = *v31;
        v33 = *v31 + 96 * (v29 - 42 * v30);
        v34 = v157;
        if (v155 != v15)
          goto LABEL_26;
LABEL_73:
        if (v34 != v20)
        {
          while (1)
          {
            v80 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v32) >> 5);
            v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v34) >> 5);
            if (v81 >= v80)
              v82 = v80;
            else
              v82 = v81;
            if (v82)
            {
              v83 = 0;
              do
              {
                v87 = v20 + v83;
                v88 = v33 + v83;
                v90 = (void **)(v33 + v83 - 80);
                v89 = *v90;
                *((_DWORD *)v90 - 4) = *(_DWORD *)(v20 + v83 - 96);
                *(v90 - 1) = *(void **)(v20 + v83 - 88);
                if (v89)
                {
                  *(_QWORD *)(v88 - 72) = v89;
                  operator delete(v89);
                  *v90 = 0;
                  *(_QWORD *)(v33 + v83 - 72) = 0;
                  *(_QWORD *)(v33 + v83 - 64) = 0;
                }
                *(_OWORD *)v90 = *(_OWORD *)(v87 - 80);
                *(_QWORD *)(v88 - 64) = *(_QWORD *)(v87 - 64);
                *(_QWORD *)(v87 - 80) = 0;
                *(_QWORD *)(v87 - 72) = 0;
                *(_QWORD *)(v87 - 64) = 0;
                v84 = *(_OWORD *)(v87 - 56);
                v85 = *(_OWORD *)(v87 - 40);
                v86 = *(_OWORD *)(v87 - 24);
                *(_QWORD *)(v88 - 8) = *(_QWORD *)(v87 - 8);
                *(_OWORD *)(v88 - 24) = v86;
                *(_OWORD *)(v88 - 40) = v85;
                *(_OWORD *)(v88 - 56) = v84;
                v83 -= 96;
              }
              while (-96 * v82 != v83);
            }
            v20 -= 96 * v82;
            v34 = v157;
            if (v20 == v157)
              break;
            v79 = *--v31;
            v32 = v79;
            v33 = v79 + 4032;
          }
        }
LABEL_85:
        if (v34)
        {
          v91 = *(void **)(v34 + 16);
          if (v91)
          {
            *(_QWORD *)(v34 + 24) = v91;
            operator delete(v91);
          }
          v92 = v154;
          v93 = vaddq_s64(*(int64x2_t *)(v154 + 36), (int64x2_t)xmmword_208F0A010);
          *(int64x2_t *)(v154 + 36) = v93;
          v3 = v93.i64[0];
          v4 = (void **)*((_QWORD *)v154 + 6);
          if (v93.i64[0] >= 0x54uLL)
          {
            operator delete(*v4);
            v4 = (void **)(*((_QWORD *)v154 + 6) + 8);
            *((_QWORD *)v154 + 6) = v4;
            v3 = *((_QWORD *)v154 + 9) - 42;
            *((_QWORD *)v154 + 9) = v3;
          }
          v94 = v152;
LABEL_91:
          v6 = &v4[v3 / 0x2A];
          v5 = (void **)*((_QWORD *)v92 + 7);
          if (v5 == v4)
          {
            v7 = 0;
            if ((v94 & 1) != 0)
            {
LABEL_98:
              v8 = *((_QWORD *)v92 + 10);
              goto LABEL_7;
            }
          }
          else
          {
            v7 = (uint64_t)*v6 + 96 * (v3 % 0x2A);
            if ((v94 & 1) != 0)
              goto LABEL_98;
          }
          v95 = v151 - 0x5555555555555555 * ((v7 - (uint64_t)*v6) >> 5);
          if (v95 < 1)
          {
            v96 = 41 - v95;
            v6 -= v96 / 0x2A;
            v7 = (uint64_t)*v6 + 96 * (42 * (v96 / 0x2A) - v96) + 3936;
          }
          else
          {
            v6 += v95 / 0x2AuLL;
            v7 = (uint64_t)*v6 + 96 * (v95 % 0x2AuLL);
          }
          goto LABEL_98;
        }
        goto LABEL_188;
      }
      v76 = 41 - v19;
      v15 -= v76 / 0x2A;
      v17 = *v15;
      v20 = *v15 + 96 * (42 * (v76 / 0x2A) - v76) + 3936;
      v21 = *((_QWORD *)v154 + 10);
      if (v18 <= (unint64_t)(v21 - 1) >> 1)
        goto LABEL_71;
LABEL_20:
      v151 = v18;
      v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v17) >> 5);
      if ((uint64_t)(v20 - v17) < -95)
      {
        v97 = 40 - v22;
        v98 = (40 - v22) / 0x2A;
        v25 = &v15[-v98];
        v26 = *v25;
        v27 = *v25 + 96 * (42 * v98 - v97) + 3936;
      }
      else
      {
        v23 = v22 + 1;
        v24 = (v22 + 1) / 0x2A;
        v25 = &v15[v24];
        v26 = *v25;
        v27 = *v25 + 96 * (v23 - 42 * v24);
      }
      v99 = v21 + v11;
      v100 = (uint64_t *)(v13 + 8 * (v99 / 0x2A));
      if (v14 != v13)
      {
        v158 = *v100 + 96 * (v99 % 0x2A);
        if (v25 != v100)
          goto LABEL_102;
LABEL_146:
        if (v27 != v158)
        {
          while (1)
          {
            v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20 + 4032) >> 5);
            if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158 - v27) >> 5)) < v133)
              v133 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v158 - v27) >> 5);
            if (v133)
            {
              v134 = v27 + 96 * v133;
              do
              {
                *(_DWORD *)v20 = *(_DWORD *)v27;
                *(_QWORD *)(v20 + 8) = *(_QWORD *)(v27 + 8);
                v138 = *(void **)(v20 + 16);
                if (v138)
                {
                  *(_QWORD *)(v20 + 24) = v138;
                  operator delete(v138);
                  *(_QWORD *)(v20 + 16) = 0;
                  *(_QWORD *)(v20 + 24) = 0;
                  *(_QWORD *)(v20 + 32) = 0;
                }
                *(_OWORD *)(v20 + 16) = *(_OWORD *)(v27 + 16);
                *(_QWORD *)(v20 + 32) = *(_QWORD *)(v27 + 32);
                *(_QWORD *)(v27 + 16) = 0;
                *(_QWORD *)(v27 + 24) = 0;
                *(_QWORD *)(v27 + 32) = 0;
                v135 = *(_OWORD *)(v27 + 40);
                v136 = *(_OWORD *)(v27 + 56);
                v137 = *(_OWORD *)(v27 + 72);
                *(_QWORD *)(v20 + 88) = *(_QWORD *)(v27 + 88);
                *(_OWORD *)(v20 + 72) = v137;
                *(_OWORD *)(v20 + 56) = v136;
                *(_OWORD *)(v20 + 40) = v135;
                v20 += 96;
                v27 += 96;
              }
              while (v27 != v134);
              v27 = v134;
            }
            if (v27 == v158)
              break;
            v139 = v15[1];
            ++v15;
            v17 = v139;
            v20 = v139;
          }
          if (*v15 + 4032 == v20)
            v20 = v15[1];
        }
        goto LABEL_159;
      }
      v158 = 0;
      if (v25 == v100)
        goto LABEL_146;
LABEL_102:
      v156 = (uint64_t *)(v13 + 8 * (v99 / 0x2A));
      v101 = v26 + 4032;
      if (v26 + 4032 != v27)
      {
        while (1)
        {
          v102 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20 + 4032) >> 5);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v101 - v27) >> 5)) < v102)
            v102 = 0xAAAAAAAAAAAAAAABLL * ((v101 - v27) >> 5);
          if (v102)
          {
            v103 = v27 + 96 * v102;
            do
            {
              *(_DWORD *)v20 = *(_DWORD *)v27;
              *(_QWORD *)(v20 + 8) = *(_QWORD *)(v27 + 8);
              v107 = *(void **)(v20 + 16);
              if (v107)
              {
                *(_QWORD *)(v20 + 24) = v107;
                operator delete(v107);
                *(_QWORD *)(v20 + 16) = 0;
                *(_QWORD *)(v20 + 24) = 0;
                *(_QWORD *)(v20 + 32) = 0;
              }
              *(_OWORD *)(v20 + 16) = *(_OWORD *)(v27 + 16);
              *(_QWORD *)(v20 + 32) = *(_QWORD *)(v27 + 32);
              *(_QWORD *)(v27 + 16) = 0;
              *(_QWORD *)(v27 + 24) = 0;
              *(_QWORD *)(v27 + 32) = 0;
              v104 = *(_OWORD *)(v27 + 40);
              v105 = *(_OWORD *)(v27 + 56);
              v106 = *(_OWORD *)(v27 + 72);
              *(_QWORD *)(v20 + 88) = *(_QWORD *)(v27 + 88);
              *(_OWORD *)(v20 + 72) = v106;
              *(_OWORD *)(v20 + 56) = v105;
              *(_OWORD *)(v20 + 40) = v104;
              v20 += 96;
              v27 += 96;
            }
            while (v27 != v103);
            v27 = v103;
          }
          if (v27 == v101)
            break;
          v108 = v15[1];
          ++v15;
          v17 = v108;
          v20 = v108;
        }
        v17 = *v15;
        if (*v15 + 4032 == v20)
        {
          v109 = v15[1];
          ++v15;
          v17 = v109;
          v20 = v109;
        }
      }
      v110 = v156;
      v111 = v25 + 1;
      if (v25 + 1 == v156)
      {
        v112 = v158;
      }
      else
      {
        do
        {
          while (1)
          {
            v113 = 0;
            v161 = v111;
            v114 = *v111;
            while (1)
            {
              v116 = v114 + 96 * v113;
              v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20 + 4032) >> 5);
              if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((4032 - 96 * v113) >> 5)) < v117)
                v117 = 0xAAAAAAAAAAAAAAABLL * ((4032 - 96 * v113) >> 5);
              if (v117)
              {
                v118 = v15;
                v119 = v116 + 96 * v117;
                v120 = v114 + 96 * v113;
                do
                {
                  *(_DWORD *)v20 = *(_DWORD *)v120;
                  *(_QWORD *)(v20 + 8) = *(_QWORD *)(v120 + 8);
                  v124 = *(void **)(v20 + 16);
                  if (v124)
                  {
                    *(_QWORD *)(v20 + 24) = v124;
                    operator delete(v124);
                    *(_QWORD *)(v20 + 16) = 0;
                    *(_QWORD *)(v20 + 24) = 0;
                    *(_QWORD *)(v20 + 32) = 0;
                  }
                  *(_OWORD *)(v20 + 16) = *(_OWORD *)(v120 + 16);
                  *(_QWORD *)(v20 + 32) = *(_QWORD *)(v120 + 32);
                  *(_QWORD *)(v120 + 16) = 0;
                  *(_QWORD *)(v120 + 24) = 0;
                  *(_QWORD *)(v120 + 32) = 0;
                  v121 = *(_OWORD *)(v120 + 40);
                  v122 = *(_OWORD *)(v120 + 56);
                  v123 = *(_OWORD *)(v120 + 72);
                  *(_QWORD *)(v20 + 88) = *(_QWORD *)(v120 + 88);
                  *(_OWORD *)(v20 + 72) = v123;
                  *(_OWORD *)(v20 + 56) = v122;
                  *(_OWORD *)(v20 + 40) = v121;
                  v20 += 96;
                  v120 += 96;
                }
                while (v120 != v119);
                v15 = v118;
                v113 -= 0x5555555555555555 * ((v119 - v116) >> 5);
                if (v113 == 42)
                  break;
              }
              v115 = v15[1];
              ++v15;
              v17 = v115;
              v20 = v115;
            }
            v17 = *v118;
            if (*v118 + 4032 == v20)
              break;
            v110 = v156;
            v112 = v158;
            v111 = v161 + 1;
            if (v161 + 1 == v156)
              goto LABEL_131;
          }
          v15 = v118 + 1;
          v17 = v118[1];
          v20 = v17;
          v110 = v156;
          v112 = v158;
          v111 = v161 + 1;
        }
        while (v161 + 1 != v156);
      }
LABEL_131:
      v125 = *v110;
      if (*v110 == v112)
      {
LABEL_159:
        v92 = v154;
      }
      else
      {
        v92 = v154;
        while (1)
        {
          v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - v20 + 4032) >> 5);
          if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - v125) >> 5)) < v126)
            v126 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v112 - v125) >> 5);
          if (v126)
          {
            v127 = v125 + 96 * v126;
            do
            {
              *(_DWORD *)v20 = *(_DWORD *)v125;
              *(_QWORD *)(v20 + 8) = *(_QWORD *)(v125 + 8);
              v131 = *(void **)(v20 + 16);
              if (v131)
              {
                *(_QWORD *)(v20 + 24) = v131;
                operator delete(v131);
                *(_QWORD *)(v20 + 16) = 0;
                *(_QWORD *)(v20 + 24) = 0;
                *(_QWORD *)(v20 + 32) = 0;
              }
              *(_OWORD *)(v20 + 16) = *(_OWORD *)(v125 + 16);
              *(_QWORD *)(v20 + 32) = *(_QWORD *)(v125 + 32);
              *(_QWORD *)(v125 + 16) = 0;
              *(_QWORD *)(v125 + 24) = 0;
              *(_QWORD *)(v125 + 32) = 0;
              v128 = *(_OWORD *)(v125 + 40);
              v129 = *(_OWORD *)(v125 + 56);
              v130 = *(_OWORD *)(v125 + 72);
              *(_QWORD *)(v20 + 88) = *(_QWORD *)(v125 + 88);
              *(_OWORD *)(v20 + 72) = v130;
              *(_OWORD *)(v20 + 56) = v129;
              *(_OWORD *)(v20 + 40) = v128;
              v20 += 96;
              v125 += 96;
            }
            while (v125 != v127);
            v125 = v127;
            v92 = v154;
          }
          if (v125 == v112)
            break;
          v132 = v15[1];
          ++v15;
          v17 = v132;
          v20 = v132;
        }
        if (*v15 + 4032 == v20)
          v20 = v15[1];
      }
      if (v20)
      {
        v140 = *(void **)(v20 + 16);
        if (v140)
        {
          *(_QWORD *)(v20 + 24) = v140;
          operator delete(v140);
        }
        v4 = (void **)*((_QWORD *)v92 + 6);
        v141 = (void **)*((_QWORD *)v92 + 7);
        v142 = 42 * (v141 - v4) - 1;
        v3 = *((_QWORD *)v92 + 9);
        v143 = *((_QWORD *)v92 + 10);
        *((_QWORD *)v92 + 10) = v143 - 1;
        if (v141 == v4)
          v142 = 0;
        if (v142 - (v143 + v3) + 1 >= 0x54)
        {
          operator delete(*(v141 - 1));
          v94 = 0;
          v4 = (void **)*((_QWORD *)v92 + 6);
          *((_QWORD *)v92 + 7) -= 8;
          v3 = *((_QWORD *)v92 + 9);
        }
        else
        {
          v94 = 0;
        }
        goto LABEL_91;
      }
LABEL_188:
      __break(1u);
      return;
    }
    v7 += 96;
    v9 -= 96;
    if (-4032 - (_QWORD)*v6 == v9)
    {
      v10 = (uint64_t)v6[1];
      ++v6;
      v7 = v10;
      goto LABEL_7;
    }
  }
  if (v7)
    goto LABEL_12;
LABEL_168:
  if (v8 && *((_QWORD *)v4[v3 / 0x2A] + 12 * (v3 % 0x2A) + 8))
  {
    *((_DWORD *)v154 + 6) = 1;
    return;
  }
  *((_DWORD *)v154 + 6) = 2;
  if (v153)
  {
    v144 = (_QWORD *)*((_QWORD *)v154 + 2);
    v144[5] = 0;
    v145 = *v144;
    v147 = *(char **)(*v144 + 48);
    v146 = *(char **)(*v144 + 56);
    if (v147 != v146)
    {
      while (*(_QWORD **)v147 != v144)
      {
        v147 += 8;
        if (v147 == v146)
          return;
      }
      if (v147 != v146)
      {
        v148 = v147 + 8;
        if (v147 + 8 != v146)
        {
          do
          {
            if (*(_QWORD **)v148 != v144)
            {
              *(_QWORD *)v147 = *(_QWORD *)v148;
              v147 += 8;
            }
            v148 += 8;
          }
          while (v148 != v146);
          v146 = *(char **)(v145 + 56);
        }
      }
      if (v146 < v147)
        goto LABEL_188;
      if (v147 != v146)
      {
        v149 = &v147[8 * ((v146 - v147) >> 3)];
        v150 = v146 - v149;
        if (v146 != v149)
          memmove(v147, v149, v146 - v149);
        *(_QWORD *)(v145 + 56) = &v147[v150];
      }
    }
  }
}

BOOL dcsctp::RRSendQueue::HasStreamsReadyToBeReset(dcsctp::RRSendQueue *this)
{
  char *v1;
  char *v2;
  _BOOL8 result;
  int v4;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = (char *)*((_QWORD *)this + 20);
  v2 = (char *)this + 168;
  if (v1 == (char *)this + 168)
    return 0;
  do
  {
    v4 = *((_DWORD *)v1 + 16);
    result = v4 == 2;
    if (v4 == 2)
      break;
    v5 = (char *)*((_QWORD *)v1 + 1);
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = *(char **)v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (char *)*((_QWORD *)v1 + 2);
        v7 = *(_QWORD *)v6 == (_QWORD)v1;
        v1 = v6;
      }
      while (!v7);
    }
    v1 = v6;
  }
  while (v6 != v2);
  return result;
}

void dcsctp::RRSendQueue::GetStreamsReadyToBeReset(dcsctp::RRSendQueue *this@<X0>, char **a2@<X8>)
{
  char *v2;
  char *v3;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  unint64_t v26;
  _OWORD *v27;
  char *v28;
  unint64_t v29;
  __int128 v30;
  __int16 v31;
  char *v32;
  char *v33;
  BOOL v34;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (char *)*((_QWORD *)this + 20);
  v3 = (char *)this + 168;
  if (v2 != (char *)this + 168)
  {
    v5 = 0;
    v6 = 0;
    while (*((_DWORD *)v2 + 16) != 2)
    {
LABEL_35:
      v32 = (char *)*((_QWORD *)v2 + 1);
      if (v32)
      {
        do
        {
          v33 = v32;
          v32 = *(char **)v32;
        }
        while (v32);
      }
      else
      {
        do
        {
          v33 = (char *)*((_QWORD *)v2 + 2);
          v34 = *(_QWORD *)v33 == (_QWORD)v2;
          v2 = v33;
        }
        while (!v34);
      }
      v2 = v33;
      if (v33 == v3)
        return;
    }
    *((_DWORD *)v2 + 16) = 3;
    v7 = (unint64_t)a2[2];
    if ((unint64_t)v5 < v7)
    {
      if (!v5)
        goto LABEL_42;
      *(_WORD *)v5 = *((_WORD *)v2 + 16);
      v8 = v5 + 2;
      goto LABEL_34;
    }
    v9 = v5 - v6;
    if (v5 - v6 <= -3)
      goto LABEL_43;
    v10 = v9 >> 1;
    v11 = v7 - (_QWORD)v6;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    v13 = v11 >= 0x7FFFFFFFFFFFFFFELL;
    v14 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v13)
      v14 = v12;
    if (!v14)
    {
LABEL_42:
      __break(1u);
LABEL_43:
      abort();
    }
    if (v14 < 0)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v15 = 2 * v14;
    v16 = operator new(2 * v14);
    v17 = &v16[2 * v10];
    *(_WORD *)v17 = *((_WORD *)v2 + 16);
    v8 = v17 + 2;
    if (v5 != v6)
    {
      v18 = v5 - v6 - 2;
      if (v18 >= 0x5E)
      {
        v20 = (v5 - 2 - v6) & 0xFFFFFFFFFFFFFFFELL;
        v21 = (unint64_t)&v16[(v9 & 0xFFFFFFFFFFFFFFFELL) - 2];
        v22 = v21 - v20;
        v23 = (unint64_t)&v5[-v20 - 2];
        if (v22 > v21 || v23 > (unint64_t)(v5 - 2))
        {
          v19 = v5;
        }
        else if ((unint64_t)(&v5[-(v9 & 0xFFFFFFFFFFFFFFFELL)] - v16) >= 0x20)
        {
          v25 = (v18 >> 1) + 1;
          v26 = 2 * (v25 & 0xFFFFFFFFFFFFFFF0);
          v19 = &v5[-v26];
          v17 -= v26;
          v27 = &v16[2 * v10 - 16];
          v28 = v5 - 16;
          v29 = v25 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v30 = *(_OWORD *)v28;
            *(v27 - 1) = *((_OWORD *)v28 - 1);
            *v27 = v30;
            v27 -= 2;
            v28 -= 32;
            v29 -= 16;
          }
          while (v29);
          if (v25 == (v25 & 0xFFFFFFFFFFFFFFF0))
            goto LABEL_31;
        }
        else
        {
          v19 = v5;
        }
      }
      else
      {
        v19 = v5;
      }
      do
      {
        v31 = *((_WORD *)v19 - 1);
        v19 -= 2;
        *((_WORD *)v17 - 1) = v31;
        v17 -= 2;
      }
      while (v19 != v6);
    }
LABEL_31:
    *a2 = v17;
    a2[1] = v8;
    a2[2] = &v16[v15];
    if (v6)
      operator delete(v6);
    v6 = v17;
LABEL_34:
    a2[1] = v8;
    v5 = v8;
    goto LABEL_35;
  }
}

void dcsctp::RRSendQueue::CommitResetStreams(dcsctp::RRSendQueue *this)
{
  _QWORD *v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  dcsctp::StreamScheduler::Stream *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  BOOL v18;

  v1 = (_QWORD *)*((_QWORD *)this + 20);
  v2 = (char *)this + 168;
  if (v1 != (_QWORD *)((char *)this + 168))
  {
    do
    {
      if (*((_DWORD *)v1 + 16) == 3)
      {
        *(_QWORD *)((char *)v1 + 70) = 0;
        v1[8] = 0;
        if (v1[15])
        {
          v3 = v1[14];
          v4 = *(_QWORD *)(v1[11] + 8 * (v3 / 0x2A));
          v5 = v3 % 0x2A;
          v6 = v4 + 96 * v5;
          v8 = *(unsigned __int8 *)(v6 + 84);
          v7 = (_BYTE *)(v6 + 84);
          v9 = *(_QWORD *)(v7 - 60) - *(_QWORD *)(v7 - 68);
          v10 = v9 - *(_QWORD *)(v7 - 12);
          v1[20] += v10;
          *(_QWORD *)(v1[6] + 144) += v10;
          *(_QWORD *)(v7 - 20) = 0;
          *(_QWORD *)(v7 - 12) = v9;
          if (v8)
            *v7 = 0;
          v11 = v4 + 96 * v5;
          v13 = *(unsigned __int8 *)(v11 + 90);
          v12 = (_BYTE *)(v11 + 90);
          if (v13)
            *v12 = 0;
          *(_DWORD *)(v4 + 96 * v5 + 92) = 0;
          v14 = (dcsctp::StreamScheduler::Stream *)v1[7];
          v15 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v14 + 1) + 24))(*((_QWORD **)v14 + 1));
          if (v15)
            dcsctp::StreamScheduler::Stream::MakeActive(v14, v15);
        }
      }
      v16 = (char *)v1[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = *(char **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (char *)v1[2];
          v18 = *(_QWORD *)v17 == (_QWORD)v1;
          v1 = v17;
        }
        while (!v18);
      }
      v1 = v17;
    }
    while (v17 != v2);
  }
}

void dcsctp::RRSendQueue::RollbackResetStreams(dcsctp::RRSendQueue *this)
{
  char *v1;
  char *v2;
  dcsctp::StreamScheduler::Stream *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  BOOL v7;

  v1 = (char *)*((_QWORD *)this + 20);
  v2 = (char *)this + 168;
  if (v1 != (char *)this + 168)
  {
    do
    {
      if (*((_DWORD *)v1 + 16) == 3)
      {
        *((_DWORD *)v1 + 16) = 0;
        v3 = (dcsctp::StreamScheduler::Stream *)*((_QWORD *)v1 + 7);
        v4 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v3 + 1) + 24))(*((_QWORD **)v3 + 1));
        if (v4)
          dcsctp::StreamScheduler::Stream::MakeActive(v3, v4);
      }
      v5 = (char *)*((_QWORD *)v1 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v1 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v1;
          v1 = v6;
        }
        while (!v7);
      }
      v1 = v6;
    }
    while (v6 != v2);
  }
}

void dcsctp::RRSendQueue::Reset(dcsctp::RRSendQueue *this)
{
  _QWORD *v2;
  char *v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  dcsctp::StreamScheduler::Stream *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  BOOL v20;

  v2 = (_QWORD *)*((_QWORD *)this + 20);
  v3 = (char *)this + 168;
  if (v2 != (_QWORD *)((char *)this + 168))
  {
    do
    {
      v4 = *((_DWORD *)v2 + 16);
      *(_QWORD *)((char *)v2 + 70) = 0;
      v2[8] = 0;
      if (v2[15])
      {
        v5 = v2[14];
        v6 = *(_QWORD *)(v2[11] + 8 * (v5 / 0x2A));
        v7 = v5 % 0x2A;
        v8 = v6 + 96 * v7;
        v10 = *(unsigned __int8 *)(v8 + 84);
        v9 = (_BYTE *)(v8 + 84);
        v11 = *(_QWORD *)(v9 - 60) - *(_QWORD *)(v9 - 68);
        v12 = v11 - *(_QWORD *)(v9 - 12);
        v2[20] += v12;
        *(_QWORD *)(v2[6] + 144) += v12;
        *(_QWORD *)(v9 - 20) = 0;
        *(_QWORD *)(v9 - 12) = v11;
        if (v10)
          *v9 = 0;
        v13 = v6 + 96 * v7;
        v15 = *(unsigned __int8 *)(v13 + 90);
        v14 = (_BYTE *)(v13 + 90);
        if (v15)
          *v14 = 0;
        *(_DWORD *)(v6 + 96 * v7 + 92) = 0;
        if ((v4 & 0xFFFFFFFE) == 2)
        {
          v16 = (dcsctp::StreamScheduler::Stream *)v2[7];
          v17 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)v16 + 1) + 24))(*((_QWORD **)v16 + 1));
          if (v17)
            dcsctp::StreamScheduler::Stream::MakeActive(v16, v17);
        }
      }
      v18 = (char *)v2[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (char *)v2[2];
          v20 = *(_QWORD *)v19 == (_QWORD)v2;
          v2 = v19;
        }
        while (!v20);
      }
      v2 = v19;
    }
    while (v19 != v3);
  }
  *((_BYTE *)this + 81) = 0;
}

uint64_t dcsctp::RRSendQueue::buffered_amount(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 168);
  v2 = a1 + 168;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *(unsigned __int16 *)(v3 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(unsigned __int16 *)(v5 + 32) <= a2)
    return *(_QWORD *)(v5 + 160);
  else
    return 0;
}

uint64_t dcsctp::RRSendQueue::buffered_amount_low_threshold(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t *v8;

  v4 = *(_QWORD *)(a1 + 168);
  v2 = a1 + 168;
  v3 = v4;
  if (!v4)
    return 0;
  v5 = v2;
  do
  {
    v6 = *(unsigned __int16 *)(v3 + 32);
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v3;
    else
      v8 = (uint64_t *)(v3 + 8);
    if (v7)
      v5 = v3;
    v3 = *v8;
  }
  while (*v8);
  if (v5 != v2 && *(unsigned __int16 *)(v5 + 32) <= a2)
    return *(_QWORD *)(v5 + 168);
  else
    return 0;
}

void dcsctp::RRSendQueue::SetBufferedAmountLowThreshold(uint64_t a1, unsigned __int16 a2, unint64_t a3)
{
  unsigned __int16 *StreamInfo;
  unsigned __int16 *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  StreamInfo = dcsctp::RRSendQueue::GetOrCreateStreamInfo(a1, a2);
  v5 = StreamInfo;
  v6 = *((_QWORD *)StreamInfo + 15);
  if (*((_QWORD *)StreamInfo + 16) >= v6 || v6 > a3)
    goto LABEL_7;
  v8 = *((_QWORD *)StreamInfo + 14);
  if (v8)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
LABEL_7:
    *((_QWORD *)v5 + 16) = a3;
    return;
  }
  v9 = std::__throw_bad_function_call[abi:sn180100]();
  dcsctp::RRSendQueue::AddHandoverState(v9, v10);
}

void dcsctp::RRSendQueue::AddHandoverState(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _DWORD *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  _QWORD *v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t v24;

  v2 = *(_QWORD **)(a1 + 160);
  v3 = (_QWORD *)(a1 + 168);
  if (v2 != (_QWORD *)(a1 + 168))
  {
    v5 = (_DWORD *)a2[9];
    v23 = (_QWORD *)(a1 + 168);
    while (1)
    {
      v6 = *((unsigned __int16 *)v2 + 16);
      v7 = *((unsigned __int16 *)v2 + 38);
      v8 = *((_DWORD *)v2 + 17);
      v9 = *((_DWORD *)v2 + 18);
      v10 = *(_WORD *)(v2[7] + 18);
      v11 = a2[10];
      if ((unint64_t)v5 >= v11)
        break;
      if (!v5)
        goto LABEL_30;
      *v5 = v6;
      v5[1] = v7;
      v5[2] = v8;
      v5[3] = v9;
      *((_WORD *)v5 + 8) = v10;
      v5 += 5;
      a2[9] = v5;
      v12 = (_QWORD *)v2[1];
      if (v12)
      {
        do
        {
LABEL_22:
          v21 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
        goto LABEL_3;
      }
      do
      {
LABEL_24:
        v21 = (_QWORD *)v2[2];
        v22 = *v21 == (_QWORD)v2;
        v2 = v21;
      }
      while (!v22);
LABEL_3:
      v2 = v21;
      if (v21 == v3)
        return;
    }
    v13 = (_BYTE *)a2[8];
    v14 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v5 - v13) >> 2) + 1;
    if (v14 > 0xCCCCCCCCCCCCCCCLL)
      goto LABEL_31;
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - (_QWORD)v13) >> 2);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x666666666666666)
      v16 = 0xCCCCCCCCCCCCCCCLL;
    else
      v16 = v14;
    if (!v16)
    {
LABEL_30:
      __break(1u);
LABEL_31:
      abort();
    }
    if (v16 > 0xCCCCCCCCCCCCCCCLL)
      std::__throw_bad_array_new_length[abi:sn180100]();
    v24 = 20 * v16;
    v17 = (char *)operator new(20 * v16);
    v18 = &v17[4 * (((char *)v5 - v13) >> 2)];
    *(_DWORD *)v18 = v6;
    *((_DWORD *)v18 + 1) = v7;
    *((_DWORD *)v18 + 2) = v8;
    *((_DWORD *)v18 + 3) = v9;
    *((_WORD *)v18 + 8) = v10;
    if (v5 == (_DWORD *)v13)
    {
      v13 = v5;
      v5 = v18 + 20;
      a2[8] = v18;
      a2[9] = v18 + 20;
      a2[10] = &v17[v24];
      if (v13)
LABEL_20:
        operator delete(v13);
    }
    else
    {
      v19 = &v17[4 * (((char *)v5 - v13) >> 2)];
      do
      {
        v20 = *(_OWORD *)(v5 - 5);
        *((_WORD *)v19 - 2) = *((_WORD *)v5 - 2);
        *(_OWORD *)(v19 - 20) = v20;
        v19 -= 20;
        v5 -= 5;
      }
      while (v5 != (_DWORD *)v13);
      v5 = v18 + 20;
      a2[8] = v19;
      a2[9] = v18 + 20;
      a2[10] = &v17[v24];
      if (v13)
        goto LABEL_20;
    }
    v3 = v23;
    a2[9] = v5;
    v12 = (_QWORD *)v2[1];
    if (v12)
      goto LABEL_22;
    goto LABEL_24;
  }
}

void dcsctp::RRSendQueue::RestoreFromState(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  unsigned __int16 v9;
  unsigned __int16 v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  _QWORD *v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 72);
  if (v3 != v4)
  {
    v6 = a1 + 40;
    v7 = (_QWORD *)(a1 + 168);
    while (1)
    {
      v8 = *(_DWORD *)v3;
      v9 = *(_DWORD *)v3;
      v10 = *(_WORD *)(v3 + 16);
      v2 = v2 & 0xFFFFFFFFFFFF0000 | v9;
      v11 = operator new(0xB0uLL);
      *((_WORD *)v11 + 16) = v8;
      v23[0] = &off_24C0BBAA0;
      v23[1] = a1;
      v23[2] = v2;
      v24 = v23;
      dcsctp::RRSendQueue::OutgoingStream::OutgoingStream((uint64_t)(v11 + 5), a1, v6, v9, v10, v23, v3);
      v12 = v24;
      if (v24 == v23)
        break;
      if (v24)
      {
        v13 = 5;
LABEL_8:
        (*(void (**)(void))(*v12 + 8 * v13))();
      }
      v14 = (uint64_t *)*v7;
      v15 = v7;
      v16 = v7;
      if (*v7)
      {
        v17 = *((unsigned __int16 *)v11 + 16);
        while (1)
        {
          while (1)
          {
            v16 = v14;
            v18 = *((unsigned __int16 *)v14 + 16);
            if (v17 >= v18)
              break;
            v14 = (uint64_t *)*v14;
            v15 = v16;
            if (!*v16)
              goto LABEL_16;
          }
          if (v18 >= v17)
            break;
          v14 = (uint64_t *)v14[1];
          if (!v14)
          {
            v15 = v16 + 1;
            goto LABEL_16;
          }
        }
        v11[5] = &off_24C0BB9E0;
        v20 = (_QWORD *)v11[19];
        if (v20 == v11 + 16)
        {
          v20 = v11 + 16;
          v21 = 4;
          goto LABEL_22;
        }
        if (v20)
        {
          v21 = 5;
LABEL_22:
          (*(void (**)(void))(*v20 + 8 * v21))();
        }
        std::deque<dcsctp::RRSendQueue::OutgoingStream::Item>::~deque[abi:sn180100]((uint64_t)(v11 + 10));
        v22 = v11[7];
        v11[7] = 0;
        if (v22)
          MEMORY[0x20BD0ADEC](v22, 0x1020C401CCFFAA1);
        operator delete(v11);
        v3 += 20;
        if (v3 == v4)
          return;
      }
      else
      {
LABEL_16:
        *v11 = 0;
        v11[1] = 0;
        v11[2] = v16;
        *v15 = v11;
        v19 = **(_QWORD **)(a1 + 160);
        if (v19)
        {
          *(_QWORD *)(a1 + 160) = v19;
          v11 = (_QWORD *)*v15;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 168), v11);
        ++*(_QWORD *)(a1 + 176);
        v3 += 20;
        if (v3 == v4)
          return;
      }
    }
    v12 = v23;
    v13 = 4;
    goto LABEL_8;
  }
}

void dcsctp::RRSendQueue::OutgoingStream::~OutgoingStream(dcsctp::RRSendQueue::OutgoingStream *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0BB9E0;
  v2 = (char *)this + 88;
  v3 = (char *)*((_QWORD *)this + 14);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  std::deque<dcsctp::RRSendQueue::OutgoingStream::Item>::~deque[abi:sn180100]((uint64_t)this + 40);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    MEMORY[0x20BD0ADEC](v5, 0x1020C401CCFFAA1);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0BB9E0;
  v2 = (char *)this + 88;
  v3 = (char *)*((_QWORD *)this + 14);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  std::deque<dcsctp::RRSendQueue::OutgoingStream::Item>::~deque[abi:sn180100]((uint64_t)this + 40);
  v5 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
    MEMORY[0x20BD0ADEC](v5, 0x1020C401CCFFAA1);
  JUMPOUT(0x20BD0ADECLL);
}

void dcsctp::RRSendQueue::~RRSendQueue(dcsctp::RRSendQueue *this)
{
  dcsctp::RRSendQueue *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_24C0BB958;
  std::__tree<std::__value_type<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,dcsctp::RRSendQueue::OutgoingStream>,std::__map_value_compare<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,std::__value_type<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,dcsctp::RRSendQueue::OutgoingStream>,std::less<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,true>,std::allocator<std::__value_type<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,dcsctp::RRSendQueue::OutgoingStream>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  v2 = (dcsctp::RRSendQueue *)*((_QWORD *)this + 17);
  if (v2 == (dcsctp::RRSendQueue *)((char *)this + 112))
  {
    v3 = 4;
    v2 = (dcsctp::RRSendQueue *)((char *)this + 112);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
}

{
  dcsctp::RRSendQueue *v2;
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = &off_24C0BB958;
  std::__tree<std::__value_type<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,dcsctp::RRSendQueue::OutgoingStream>,std::__map_value_compare<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,std::__value_type<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,dcsctp::RRSendQueue::OutgoingStream>,std::less<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>>,true>,std::allocator<std::__value_type<webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>,dcsctp::RRSendQueue::OutgoingStream>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  v2 = (dcsctp::RRSendQueue *)*((_QWORD *)this + 17);
  if (v2 == (dcsctp::RRSendQueue *)((char *)this + 112))
  {
    v3 = 4;
    v2 = (dcsctp::RRSendQueue *)((char *)this + 112);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = (void *)*((_QWORD *)this + 11);
  if (v4)
  {
    *((_QWORD *)this + 12) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t dcsctp::RRSendQueue::total_buffered_amount(dcsctp::RRSendQueue *this)
{
  return *((_QWORD *)this + 18);
}

uint64_t dcsctp::RRSendQueue::EnableMessageInterleaving(uint64_t this, char a2)
{
  *(_BYTE *)(this + 80) = a2;
  return this;
}

void std::__function::__func<dcsctp::RRSendQueue::RRSendQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,unsigned long,webrtc::StrongAlias<dcsctp::StreamPriorityTag,unsigned short>,unsigned long)::$_0,std::allocator<dcsctp::RRSendQueue::RRSendQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,unsigned long,webrtc::StrongAlias<dcsctp::StreamPriorityTag,unsigned short>,unsigned long)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *std::__function::__func<dcsctp::RRSendQueue::RRSendQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,unsigned long,webrtc::StrongAlias<dcsctp::StreamPriorityTag,unsigned short>,unsigned long)::$_0,std::allocator<dcsctp::RRSendQueue::RRSendQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,unsigned long,webrtc::StrongAlias<dcsctp::StreamPriorityTag,unsigned short>,unsigned long)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C0BBA10;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<dcsctp::RRSendQueue::RRSendQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,unsigned long,webrtc::StrongAlias<dcsctp::StreamPriorityTag,unsigned short>,unsigned long)::$_0,std::allocator<dcsctp::RRSendQueue::RRSendQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,unsigned long,webrtc::StrongAlias<dcsctp::StreamPriorityTag,unsigned short>,unsigned long)::$_0>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C0BBA10;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<dcsctp::RRSendQueue::RRSendQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,unsigned long,webrtc::StrongAlias<dcsctp::StreamPriorityTag,unsigned short>,unsigned long)::$_0,std::allocator<dcsctp::RRSendQueue::RRSendQueue(std::string_view,dcsctp::DcSctpSocketCallbacks *,unsigned long,webrtc::StrongAlias<dcsctp::StreamPriorityTag,unsigned short>,unsigned long)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 160))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24));
}

void std::__function::__func<dcsctp::RRSendQueue::GetOrCreateStreamInfo(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0,std::allocator<dcsctp::RRSendQueue::GetOrCreateStreamInfo(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 std::__function::__func<dcsctp::RRSendQueue::GetOrCreateStreamInfo(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0,std::allocator<dcsctp::RRSendQueue::GetOrCreateStreamInfo(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C0BBA58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<dcsctp::RRSendQueue::GetOrCreateStreamInfo(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0,std::allocator<dcsctp::RRSendQueue::GetOrCreateStreamInfo(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0BBA58;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<dcsctp::RRSendQueue::GetOrCreateStreamInfo(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0,std::allocator<dcsctp::RRSendQueue::GetOrCreateStreamInfo(webrtc::StrongAlias<dcsctp::StreamIDTag,unsigned short>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 152))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *(unsigned __int16 *)(a1 + 16));
}

uint64_t dcsctp::RRSendQueue::OutgoingStream::OutgoingStream(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, unsigned __int16 a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[3];
  _QWORD *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C0BB9E0;
  *(_QWORD *)(a1 + 8) = a2;
  v13 = operator new();
  *(_QWORD *)v13 = a3;
  *(_QWORD *)(v13 + 8) = a1;
  *(_WORD *)(v13 + 16) = a4;
  *(_WORD *)(v13 + 18) = a5;
  v14 = 1.0 / (double)a5;
  if (!a5)
    v14 = 1000000.0;
  *(double *)(v13 + 24) = v14;
  *(_QWORD *)(v13 + 32) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(_QWORD *)(a1 + 16) = v13;
  *(_DWORD *)(a1 + 24) = 0;
  if (a7)
  {
    v15 = *(_QWORD *)(a7 + 8);
    v16 = *(_DWORD *)(a7 + 4);
  }
  else
  {
    LOWORD(v16) = 0;
    v15 = 0;
  }
  *(_QWORD *)(a1 + 28) = v15;
  *(_WORD *)(a1 + 36) = v16;
  *(_OWORD *)(a1 + 40) = 0uLL;
  *(_OWORD *)(a1 + 56) = 0uLL;
  *(_OWORD *)(a1 + 72) = 0uLL;
  v17 = (_QWORD *)a6[3];
  if (!v17)
    goto LABEL_12;
  if (v17 == a6)
  {
    v22 = v21;
    (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v21);
    v17 = v22;
    if (v22)
      goto LABEL_10;
LABEL_12:
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    return a1;
  }
  v22 = (_QWORD *)a6[3];
  a6[3] = 0;
LABEL_10:
  if (v17 == v21)
  {
    *(_QWORD *)(a1 + 112) = a1 + 88;
    (*(void (**)(_QWORD *))(v21[0] + 24))(v21);
    v18 = v22;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    if (v18 == v21)
    {
      v19 = 4;
      v18 = v21;
    }
    else
    {
      if (!v18)
        return a1;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
    return a1;
  }
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = v17;
  return a1;
}

void std::__function::__func<dcsctp::RRSendQueue::RestoreFromState(dcsctp::DcSctpSocketHandoverState const&)::$_0,std::allocator<dcsctp::RRSendQueue::RestoreFromState(dcsctp::DcSctpSocketHandoverState const&)::$_0>,void ()(void)>::~__func()
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 std::__function::__func<dcsctp::RRSendQueue::RestoreFromState(dcsctp::DcSctpSocketHandoverState const&)::$_0,std::allocator<dcsctp::RRSendQueue::RestoreFromState(dcsctp::DcSctpSocketHandoverState const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C0BBAA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<dcsctp::RRSendQueue::RestoreFromState(dcsctp::DcSctpSocketHandoverState const&)::$_0,std::allocator<dcsctp::RRSendQueue::RestoreFromState(dcsctp::DcSctpSocketHandoverState const&)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C0BBAA0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<dcsctp::RRSendQueue::RestoreFromState(dcsctp::DcSctpSocketHandoverState const&)::$_0,std::allocator<dcsctp::RRSendQueue::RestoreFromState(dcsctp::DcSctpSocketHandoverState const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 24) + 152))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24), *(unsigned __int16 *)(a1 + 16));
}

void rtc::RTCCertificate::~RTCCertificate(rtc::RTCCertificate *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t rtc::RTCCertificate::Expires(rtc::RTCCertificate *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
  if (v2 == -1)
    return 0;
  else
    return 1000 * v2;
}

uint64_t rtc::RTCCertificate::GetSSLCertificate(rtc::RTCCertificate *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

void rtc::RTCCertificate::ToPEM(rtc::RTCCertificate *this@<X0>, char *a2@<X8>)
{
  size_t v4;
  char *v5;
  uint64_t v6;
  unsigned __int8 v7;
  char *p_p;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  size_t v20;
  unsigned __int8 v21;
  void *v22;
  size_t v23;
  unsigned __int8 v24;

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 32))(&v22);
  if ((char)v24 < 0)
  {
    v4 = v23;
    if ((v23 & 0x8000000000000000) != 0)
      goto LABEL_38;
    v5 = (char *)v22;
    if (v23)
    {
      if (!v22)
        goto LABEL_38;
    }
  }
  else
  {
    v4 = v24;
    v5 = (char *)&v22;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 24))(&__p);
  v7 = v21;
  if (((char)v21 & 0x80000000) == 0)
  {
    p_p = (char *)&__p;
    v9 = v21;
    goto LABEL_11;
  }
  v9 = v20;
  if ((v20 & 0x8000000000000000) != 0 || (p_p = (char *)__p, v20) && !__p)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
LABEL_11:
  if (v4 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_39;
  if (v4 > 0x16)
  {
    v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v11 = v4 | 7;
    v12 = v11 + 1;
    v10 = (char *)operator new(v11 + 1);
    *((_QWORD *)a2 + 1) = v4;
    *((_QWORD *)a2 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)a2 = v10;
  }
  else
  {
    a2[23] = v4;
    v10 = a2;
  }
  v13 = &v10[v4];
  if (v10 <= v5 && v13 > v5)
    goto LABEL_38;
  if (v4)
    memmove(v10, v5, v4);
  *v13 = 0;
  if (v9 > 0x7FFFFFFFFFFFFFF7)
LABEL_39:
    abort();
  if (v9 <= 0x16)
  {
    v15 = a2 + 24;
    a2[47] = v9;
    v16 = &a2[v9 + 24];
    if (v15 > p_p)
      goto LABEL_31;
    goto LABEL_30;
  }
  v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v9 | 7) != 0x17)
    v17 = v9 | 7;
  v18 = v17 + 1;
  v15 = (char *)operator new(v17 + 1);
  *((_QWORD *)a2 + 4) = v9;
  *((_QWORD *)a2 + 5) = v18 | 0x8000000000000000;
  *((_QWORD *)a2 + 3) = v15;
  v16 = &v15[v9];
  if (v15 <= p_p)
  {
LABEL_30:
    if (v16 <= p_p)
      goto LABEL_31;
    goto LABEL_38;
  }
LABEL_31:
  if (v9)
    memmove(v15, p_p, v9);
  *v16 = 0;
  if ((v7 & 0x80) == 0)
  {
    if (((char)v24 & 0x80000000) == 0)
      return;
LABEL_37:
    operator delete(v22);
    return;
  }
  operator delete(__p);
  if ((char)v24 < 0)
    goto LABEL_37;
}

_QWORD *rtc::RTCCertificate::FromPEM@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v2 = result;
  if (*((char *)result + 23) < 0)
  {
    v4 = result[1];
    if (v4 < 0)
      goto LABEL_18;
    result = (_QWORD *)*result;
    if (v4 && result == 0)
      goto LABEL_18;
  }
  else
  {
    LODWORD(v4) = *((unsigned __int8 *)result + 23);
  }
  v6 = v2 + 3;
  if (*((char *)v2 + 47) < 0)
  {
    v7 = v2[4];
    if ((v7 & 0x8000000000000000) == 0)
    {
      v6 = (_QWORD *)*v6;
      if (!v7 || v6)
        goto LABEL_13;
    }
LABEL_18:
    __break(1u);
    return result;
  }
  v7 = *((unsigned __int8 *)v2 + 47);
LABEL_13:
  rtc::BoringSSLIdentity::CreateFromPEMStrings(result, v4, v6, v7, &v10);
  v8 = v10;
  if (v10)
  {
    result = (_QWORD *)operator new();
    *(_DWORD *)result = 0;
    result[1] = v8;
    do
      v9 = __ldxr((unsigned int *)result);
    while (__stxr(v9 + 1, (unsigned int *)result));
    *a2 = result;
  }
  else
  {
    result = 0;
    *a2 = 0;
  }
  return result;
}

_QWORD *rtc::RTCCertificateGenerator::RTCCertificateGenerator(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &off_24C0BBAE8;
  result[1] = a2;
  result[2] = a3;
  return result;
}

uint64_t rtc::RTCCertificateGenerator::GenerateCertificateAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void (*v8)(_QWORD, _BYTE *, uint64_t);
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[16];
  __int128 v15;
  char v16;
  _QWORD v17[2];
  uint64_t (*v18)(uint64_t, uint64_t *, _QWORD *);
  uint64_t (*v19)(int **);

  *(_QWORD *)&v11 = *(_QWORD *)a2;
  DWORD2(v11) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)&v12 = *(_QWORD *)a3;
  BYTE8(v12) = *(_BYTE *)(a3 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 8);
  (*(void (**)(_QWORD, uint64_t, _BYTE *))(a4 + 16))(0, a4, v14);
  v15 = *(_OWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = absl::internal_any_invocable::EmptyManager;
  *(_QWORD *)(a4 + 24) = 0;
  v6 = operator new();
  v7 = v12;
  *(_OWORD *)v6 = v11;
  *(_OWORD *)(v6 + 16) = v7;
  v8 = (void (*)(_QWORD, _BYTE *, uint64_t))v15;
  *(_QWORD *)(v6 + 32) = v13;
  v8(0, v14, v6 + 40);
  *(_OWORD *)(v6 + 56) = v15;
  v15 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v17[0] = v6;
  v18 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN3rtc23RTCCertificateGenerator24GenerateCertificateAsyncERKNS2_9KeyParamsERKNSt3__18optionalIyEENS_12AnyInvocableIFvN6webrtc13scoped_refptrINS2_14RTCCertificateEEEOEEEE3__0EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESM_;
  v19 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN3rtc23RTCCertificateGenerator24GenerateCertificateAsyncERKNS2_9KeyParamsERKNSt3__18optionalIyEENS_12AnyInvocableIFvN6webrtc13scoped_refptrINS2_14RTCCertificateEEEOEEEE3__0JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v5 + 8))(v5, v17, &v16, &v10);
  v18(1, v17, v17);
  return ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v15)(1, v14, v14);
}

void rtc::RTCCertificateGenerator::~RTCCertificateGenerator(rtc::RTCCertificateGenerator *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZN3rtc23RTCCertificateGenerator24GenerateCertificateAsyncERKNS2_9KeyParamsERKNSt3__18optionalIyEENS_12AnyInvocableIFvN6webrtc13scoped_refptrINS2_14RTCCertificateEEEOEEEE3__0JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(int **a1)
{
  int *v1;
  int v2;
  unsigned int v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD, _BYTE *, uint64_t);
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _BYTE v20[16];
  __int128 v21;
  char v22;
  _QWORD v23[2];
  uint64_t (*v24)(uint64_t, uint64_t **, uint64_t **);
  uint64_t (*v25)(uint64_t **);

  v1 = *a1;
  v2 = **a1;
  if (v2 == 1)
  {
    if (v1[1])
      goto LABEL_18;
  }
  else
  {
    if (v2)
      goto LABEL_18;
    v3 = v1[1];
    if (v3 - 1024 > 0x1C00 || v1[2] <= v3)
      goto LABEL_18;
  }
  if (*((_BYTE *)*a1 + 24))
  {
    if (*((_QWORD *)*a1 + 2) / 0x3E8uLL >= 0x1E13380)
      v5 = 31536000;
    else
      v5 = *((_QWORD *)*a1 + 2) / 0x3E8uLL;
    rtc::BoringSSLIdentity::CreateWithExpiration((__int128 *)"WebRTC", 6uLL, (uint64_t *)v1, v5, &v19);
    v6 = v19;
    if (v19)
      goto LABEL_14;
  }
  else
  {
    rtc::BoringSSLIdentity::CreateWithExpiration((__int128 *)"WebRTC", 6uLL, (uint64_t *)v1, 2592000, &v19);
    v6 = v19;
    if (v19)
    {
LABEL_14:
      v7 = operator new();
      *(_DWORD *)v7 = 0;
      *(_QWORD *)(v7 + 8) = v6;
      do
        v8 = __ldxr((unsigned int *)v7);
      while (__stxr(v8 + 1, (unsigned int *)v7));
      goto LABEL_19;
    }
  }
LABEL_18:
  v7 = 0;
LABEL_19:
  v9 = *((_QWORD *)v1 + 4);
  v19 = v7;
  (*((void (**)(_QWORD, int *, _BYTE *))v1 + 7))(0, v1 + 10, v20);
  v21 = *(_OWORD *)(v1 + 14);
  *((_QWORD *)v1 + 7) = absl::internal_any_invocable::EmptyManager;
  *((_QWORD *)v1 + 8) = 0;
  v10 = operator new();
  v11 = v19;
  v12 = (void (*)(_QWORD, _BYTE *, uint64_t))v21;
  v19 = 0;
  *(_QWORD *)v10 = v11;
  v12(0, v20, v10 + 8);
  *(_OWORD *)(v10 + 24) = v21;
  v21 = (unint64_t)absl::internal_any_invocable::EmptyManager;
  v23[0] = v10;
  v24 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZZN3rtc23RTCCertificateGenerator24GenerateCertificateAsyncERKNS2_9KeyParamsERKNSt3__18optionalIyEENS_12AnyInvocableIFvN6webrtc13scoped_refptrINS2_14RTCCertificateEEEOEEEEN3__0clEvEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESN_;
  v25 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZZN3rtc23RTCCertificateGenerator24GenerateCertificateAsyncERKNS2_9KeyParamsERKNSt3__18optionalIyEENS_12AnyInvocableIFvN6webrtc13scoped_refptrINS2_14RTCCertificateEEEOEEEEN3__0clEvEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
  (*(void (**)(uint64_t, _QWORD *, char *, char *))(*(_QWORD *)v9 + 8))(v9, v23, &v22, &v18);
  v24(1, (uint64_t **)v23, (uint64_t **)v23);
  result = ((uint64_t (*)(uint64_t, _BYTE *, _BYTE *))v21)(1, v20, v20);
  v14 = v19;
  if (v19)
  {
    do
    {
      v15 = __ldaxr((unsigned int *)v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)v14));
    if (!v16)
    {
      v17 = *(_QWORD *)(v14 + 8);
      *(_QWORD *)(v14 + 8) = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      return MEMORY[0x20BD0ADEC](v14, 0x1020C40D5A9D86FLL);
    }
  }
  return result;
}

uint64_t _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZN3rtc23RTCCertificateGenerator24GenerateCertificateAsyncERKNS2_9KeyParamsERKNSt3__18optionalIyEENS_12AnyInvocableIFvN6webrtc13scoped_refptrINS2_14RTCCertificateEEEOEEEE3__0EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESM_(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 56))(1, v3 + 40, v3 + 40);
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

uint64_t _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZZN3rtc23RTCCertificateGenerator24GenerateCertificateAsyncERKNS2_9KeyParamsERKNSt3__18optionalIyEENS_12AnyInvocableIFvN6webrtc13scoped_refptrINS2_14RTCCertificateEEEOEEEEN3__0clEvEUlvE_JEEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *a1;
  v2 = (uint64_t)(*a1 + 1);
  v3 = *v1;
  *v1 = 0;
  v9 = v3;
  result = ((uint64_t (*)(uint64_t, uint64_t *))v1[4])(v2, &v9);
  v5 = v9;
  if (v9)
  {
    do
    {
      v6 = __ldaxr((unsigned int *)v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, (unsigned int *)v5));
    if (!v7)
    {
      v8 = *(_QWORD *)(v5 + 8);
      *(_QWORD *)(v5 + 8) = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      return MEMORY[0x20BD0ADEC](v5, 0x1020C40D5A9D86FLL);
    }
  }
  return result;
}

uint64_t _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZZN3rtc23RTCCertificateGenerator24GenerateCertificateAsyncERKNS2_9KeyParamsERKNSt3__18optionalIyEENS_12AnyInvocableIFvN6webrtc13scoped_refptrINS2_14RTCCertificateEEEOEEEEN3__0clEvEUlvE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateESN_(uint64_t result, uint64_t **a2, uint64_t **a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;

  v3 = *a2;
  if ((result & 1) != 0)
  {
    if (v3)
    {
      ((void (*)(uint64_t, uint64_t *, uint64_t *))v3[3])(1, v3 + 1, v3 + 1);
      v4 = *v3;
      if (*v3)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)v4));
        if (!v6)
        {
          v7 = *(_QWORD *)(v4 + 8);
          *(_QWORD *)(v4 + 8) = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          MEMORY[0x20BD0ADEC](v4, 0x1020C40D5A9D86FLL);
        }
      }
      JUMPOUT(0x20BD0ADECLL);
    }
  }
  else
  {
    *a3 = v3;
  }
  return result;
}

void webrtc::RTCError::OK(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 29) = 0;
}

uint64_t webrtc::RTCError::message(webrtc::RTCError *this)
{
  uint64_t result;

  result = (uint64_t)this + 8;
  if (*((char *)this + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void webrtc::RtcEventAlrState::~RtcEventAlrState(webrtc::RtcEventAlrState *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventAlrState::GetType(webrtc::RtcEventAlrState *this)
{
  return 0;
}

uint64_t webrtc::RtcEventAlrState::IsConfigEvent(webrtc::RtcEventAlrState *this)
{
  return 0;
}

void webrtc::RtcEventAudioNetworkAdaptation::~RtcEventAudioNetworkAdaptation(webrtc::RtcEventAudioNetworkAdaptation *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0x1000C402B01D017);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    MEMORY[0x20BD0ADEC](v2, 0x1000C402B01D017);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventAudioNetworkAdaptation::GetType(webrtc::RtcEventAudioNetworkAdaptation *this)
{
  return 3;
}

uint64_t webrtc::RtcEventAudioNetworkAdaptation::IsConfigEvent(webrtc::RtcEventAudioNetworkAdaptation *this)
{
  return 0;
}

void webrtc::RtcEventAudioPlayout::~RtcEventAudioPlayout(webrtc::RtcEventAudioPlayout *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventAudioPlayout::GetType(webrtc::RtcEventAudioPlayout *this)
{
  return 4;
}

uint64_t webrtc::RtcEventAudioPlayout::IsConfigEvent(webrtc::RtcEventAudioPlayout *this)
{
  return 0;
}

void webrtc::RtcEventAudioReceiveStreamConfig::~RtcEventAudioReceiveStreamConfig(webrtc::RtcEventAudioReceiveStreamConfig *this)
{
  webrtc::rtclog::StreamConfig *v2;

  v2 = (webrtc::rtclog::StreamConfig *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    webrtc::rtclog::StreamConfig::~StreamConfig(v2);
    MEMORY[0x20BD0ADEC]();
  }
}

{
  webrtc::rtclog::StreamConfig *v2;

  v2 = (webrtc::rtclog::StreamConfig *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    webrtc::rtclog::StreamConfig::~StreamConfig(v2);
    MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventAudioReceiveStreamConfig::GetType(webrtc::RtcEventAudioReceiveStreamConfig *this)
{
  return 5;
}

uint64_t webrtc::RtcEventAudioReceiveStreamConfig::IsConfigEvent(webrtc::RtcEventAudioReceiveStreamConfig *this)
{
  return 1;
}

void webrtc::RtcEventAudioSendStreamConfig::~RtcEventAudioSendStreamConfig(webrtc::RtcEventAudioSendStreamConfig *this)
{
  webrtc::rtclog::StreamConfig *v2;

  v2 = (webrtc::rtclog::StreamConfig *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    webrtc::rtclog::StreamConfig::~StreamConfig(v2);
    MEMORY[0x20BD0ADEC]();
  }
}

{
  webrtc::rtclog::StreamConfig *v2;

  v2 = (webrtc::rtclog::StreamConfig *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    webrtc::rtclog::StreamConfig::~StreamConfig(v2);
    MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventAudioSendStreamConfig::GetType(webrtc::RtcEventAudioSendStreamConfig *this)
{
  return 6;
}

uint64_t webrtc::RtcEventAudioSendStreamConfig::IsConfigEvent(webrtc::RtcEventAudioSendStreamConfig *this)
{
  return 1;
}

void webrtc::RtcEventBweUpdateDelayBased::~RtcEventBweUpdateDelayBased(webrtc::RtcEventBweUpdateDelayBased *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventBweUpdateDelayBased::GetType(webrtc::RtcEventBweUpdateDelayBased *this)
{
  return 7;
}

uint64_t webrtc::RtcEventBweUpdateDelayBased::IsConfigEvent(webrtc::RtcEventBweUpdateDelayBased *this)
{
  return 0;
}

void webrtc::RtcEventBweUpdateLossBased::~RtcEventBweUpdateLossBased(webrtc::RtcEventBweUpdateLossBased *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventBweUpdateLossBased::GetType(webrtc::RtcEventBweUpdateLossBased *this)
{
  return 8;
}

uint64_t webrtc::RtcEventBweUpdateLossBased::IsConfigEvent(webrtc::RtcEventBweUpdateLossBased *this)
{
  return 0;
}

void webrtc::RtcEventDtlsTransportState::~RtcEventDtlsTransportState(webrtc::RtcEventDtlsTransportState *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventDtlsTransportState::GetType(webrtc::RtcEventDtlsTransportState *this)
{
  return 9;
}

uint64_t webrtc::RtcEventDtlsTransportState::IsConfigEvent(webrtc::RtcEventDtlsTransportState *this)
{
  return 0;
}

void webrtc::RtcEventDtlsWritableState::~RtcEventDtlsWritableState(webrtc::RtcEventDtlsWritableState *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventDtlsWritableState::GetType(webrtc::RtcEventDtlsWritableState *this)
{
  return 10;
}

uint64_t webrtc::RtcEventDtlsWritableState::IsConfigEvent(webrtc::RtcEventDtlsWritableState *this)
{
  return 0;
}

void webrtc::RtcEventIceCandidatePair::~RtcEventIceCandidatePair(webrtc::RtcEventIceCandidatePair *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventIceCandidatePair::GetType(webrtc::RtcEventIceCandidatePair *this)
{
  return 12;
}

uint64_t webrtc::RtcEventIceCandidatePair::IsConfigEvent(webrtc::RtcEventIceCandidatePair *this)
{
  return 0;
}

void webrtc::RtcEventIceCandidatePairConfig::~RtcEventIceCandidatePairConfig(webrtc::RtcEventIceCandidatePairConfig *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventIceCandidatePairConfig::GetType(webrtc::RtcEventIceCandidatePairConfig *this)
{
  return 11;
}

uint64_t webrtc::RtcEventIceCandidatePairConfig::IsConfigEvent(webrtc::RtcEventIceCandidatePairConfig *this)
{
  return 0;
}

uint64_t webrtc::RtcEventLogNull::StartLogging()
{
  return 0;
}

void webrtc::RtcEventLogNull::~RtcEventLogNull(webrtc::RtcEventLogNull *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventLog::StopLogging(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v3 = *(_QWORD *)(a2 + 24);
  if (!v3)
  {
    std::__throw_bad_function_call[abi:sn180100]();
    JUMPOUT(0x2087355D4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
}

_QWORD *webrtc::RtcEventLogFactory::Create@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &unk_24C0BBE70;
  *a1 = result;
  return result;
}

void webrtc::RtcEventLogFactory::~RtcEventLogFactory(webrtc::RtcEventLogFactory *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

void webrtc::RtcEventNetEqSetMinimumDelay::~RtcEventNetEqSetMinimumDelay(webrtc::RtcEventNetEqSetMinimumDelay *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventNetEqSetMinimumDelay::GetType(webrtc::RtcEventNetEqSetMinimumDelay *this)
{
  return 26;
}

uint64_t webrtc::RtcEventNetEqSetMinimumDelay::IsConfigEvent(webrtc::RtcEventNetEqSetMinimumDelay *this)
{
  return 0;
}

void webrtc::RtcEventProbeClusterCreated::~RtcEventProbeClusterCreated(webrtc::RtcEventProbeClusterCreated *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventProbeClusterCreated::GetType(webrtc::RtcEventProbeClusterCreated *this)
{
  return 13;
}

uint64_t webrtc::RtcEventProbeClusterCreated::IsConfigEvent(webrtc::RtcEventProbeClusterCreated *this)
{
  return 0;
}

void webrtc::RtcEventProbeResultFailure::~RtcEventProbeResultFailure(webrtc::RtcEventProbeResultFailure *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventProbeResultFailure::GetType(webrtc::RtcEventProbeResultFailure *this)
{
  return 14;
}

uint64_t webrtc::RtcEventProbeResultFailure::IsConfigEvent(webrtc::RtcEventProbeResultFailure *this)
{
  return 0;
}

void webrtc::RtcEventProbeResultSuccess::~RtcEventProbeResultSuccess(webrtc::RtcEventProbeResultSuccess *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventProbeResultSuccess::GetType(webrtc::RtcEventProbeResultSuccess *this)
{
  return 15;
}

uint64_t webrtc::RtcEventProbeResultSuccess::IsConfigEvent(webrtc::RtcEventProbeResultSuccess *this)
{
  return 0;
}

void webrtc::RtcEventRouteChange::~RtcEventRouteChange(webrtc::RtcEventRouteChange *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventRouteChange::GetType(webrtc::RtcEventRouteChange *this)
{
  return 1;
}

uint64_t webrtc::RtcEventRouteChange::IsConfigEvent(webrtc::RtcEventRouteChange *this)
{
  return 0;
}

void webrtc::RtcEventRtcpPacketIncoming::~RtcEventRtcpPacketIncoming(webrtc::RtcEventRtcpPacketIncoming *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventRtcpPacketIncoming::GetType(webrtc::RtcEventRtcpPacketIncoming *this)
{
  return 16;
}

uint64_t webrtc::RtcEventRtcpPacketIncoming::IsConfigEvent(webrtc::RtcEventRtcpPacketIncoming *this)
{
  return 0;
}

void webrtc::RtcEventRtcpPacketOutgoing::~RtcEventRtcpPacketOutgoing(webrtc::RtcEventRtcpPacketOutgoing *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x20BD0ADD4](v2, 0x1000C8077774924);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventRtcpPacketOutgoing::GetType(webrtc::RtcEventRtcpPacketOutgoing *this)
{
  return 17;
}

uint64_t webrtc::RtcEventRtcpPacketOutgoing::IsConfigEvent(webrtc::RtcEventRtcpPacketOutgoing *this)
{
  return 0;
}

uint64_t webrtc::RtcEventRtpPacketIncoming::RtcEventRtpPacketIncoming(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;

  *(_QWORD *)a1 = &unk_24C0BBBD0;
  if (rtc::g_clock)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v4 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  *(_QWORD *)a1 = &off_24C0BC060;
  *(_QWORD *)(a1 + 8) = 1000 * (v4 / 1000000);
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[2];
  *(_QWORD *)(a1 + 62) = *(_QWORD *)((char *)a2 + 46);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v9 = (_BYTE *)*((_QWORD *)a2 + 7);
  v8 = (_BYTE *)*((_QWORD *)a2 + 8);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if (v10 < 0)
      abort();
    v11 = (char *)operator new(v8 - v9);
    *(_QWORD *)(a1 + 72) = v11;
    *(_QWORD *)(a1 + 80) = v11;
    v12 = &v11[4 * (v10 >> 2)];
    *(_QWORD *)(a1 + 88) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 80) = v12;
  }
  v13 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 104) = v13;
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 24);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_OWORD *)(a1 + 112) = a2[6];
  return a1;
}

void webrtc::RtcEventRtpPacketIncoming::~RtcEventRtpPacketIncoming(webrtc::RtcEventRtpPacketIncoming *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      if (v6)
        MEMORY[0x20BD0ADD4](v6, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40EE34DA14);
    }
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
}

{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      if (v6)
        MEMORY[0x20BD0ADD4](v6, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40EE34DA14);
    }
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventRtpPacketIncoming::GetType(webrtc::RtcEventRtpPacketIncoming *this)
{
  return 18;
}

uint64_t webrtc::RtcEventRtpPacketIncoming::IsConfigEvent(webrtc::RtcEventRtpPacketIncoming *this)
{
  return 0;
}

uint64_t webrtc::RtcEventRtpPacketOutgoing::RtcEventRtpPacketOutgoing(uint64_t a1, __int128 *a2, int a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;

  *(_QWORD *)a1 = &unk_24C0BBBD0;
  if (rtc::g_clock)
  {
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    v6 = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
       / dword_253EA791C;
  }
  *(_QWORD *)a1 = &off_24C0BC098;
  *(_QWORD *)(a1 + 8) = 1000 * (v6 / 1000000);
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  *(_QWORD *)(a1 + 62) = *(_QWORD *)((char *)a2 + 46);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v11 = (_BYTE *)*((_QWORD *)a2 + 7);
  v10 = (_BYTE *)*((_QWORD *)a2 + 8);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      abort();
    v13 = (char *)operator new(v10 - v11);
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v13;
    v14 = &v13[4 * (v12 >> 2)];
    *(_QWORD *)(a1 + 88) = v14;
    memcpy(v13, v11, v12);
    *(_QWORD *)(a1 + 80) = v14;
  }
  v15 = *((_QWORD *)a2 + 11);
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 104) = v15;
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 24);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_OWORD *)(a1 + 112) = a2[6];
  *(_DWORD *)(a1 + 128) = a3;
  return a1;
}

void webrtc::RtcEventRtpPacketOutgoing::~RtcEventRtpPacketOutgoing(webrtc::RtcEventRtpPacketOutgoing *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      if (v6)
        MEMORY[0x20BD0ADD4](v6, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40EE34DA14);
    }
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
}

{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  v2 = *((_QWORD *)this + 13);
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      v6 = *(_QWORD *)(v2 + 16);
      *(_QWORD *)(v2 + 16) = 0;
      if (v6)
        MEMORY[0x20BD0ADD4](v6, 0x1000C8077774924);
      MEMORY[0x20BD0ADEC](v2, 0x1010C40EE34DA14);
    }
  }
  v7 = (void *)*((_QWORD *)this + 9);
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventRtpPacketOutgoing::GetType(webrtc::RtcEventRtpPacketOutgoing *this)
{
  return 19;
}

uint64_t webrtc::RtcEventRtpPacketOutgoing::IsConfigEvent(webrtc::RtcEventRtpPacketOutgoing *this)
{
  return 0;
}

void webrtc::RtcEventVideoReceiveStreamConfig::~RtcEventVideoReceiveStreamConfig(webrtc::RtcEventVideoReceiveStreamConfig *this)
{
  webrtc::rtclog::StreamConfig *v2;

  v2 = (webrtc::rtclog::StreamConfig *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    webrtc::rtclog::StreamConfig::~StreamConfig(v2);
    MEMORY[0x20BD0ADEC]();
  }
}

{
  webrtc::rtclog::StreamConfig *v2;

  v2 = (webrtc::rtclog::StreamConfig *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    webrtc::rtclog::StreamConfig::~StreamConfig(v2);
    MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventVideoReceiveStreamConfig::GetType(webrtc::RtcEventVideoReceiveStreamConfig *this)
{
  return 20;
}

uint64_t webrtc::RtcEventVideoReceiveStreamConfig::IsConfigEvent(webrtc::RtcEventVideoReceiveStreamConfig *this)
{
  return 1;
}

void webrtc::RtcEventVideoSendStreamConfig::~RtcEventVideoSendStreamConfig(webrtc::RtcEventVideoSendStreamConfig *this)
{
  webrtc::rtclog::StreamConfig *v2;

  v2 = (webrtc::rtclog::StreamConfig *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    webrtc::rtclog::StreamConfig::~StreamConfig(v2);
    MEMORY[0x20BD0ADEC]();
  }
}

{
  webrtc::rtclog::StreamConfig *v2;

  v2 = (webrtc::rtclog::StreamConfig *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    webrtc::rtclog::StreamConfig::~StreamConfig(v2);
    MEMORY[0x20BD0ADEC]();
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webrtc::RtcEventVideoSendStreamConfig::GetType(webrtc::RtcEventVideoSendStreamConfig *this)
{
  return 21;
}

uint64_t webrtc::RtcEventVideoSendStreamConfig::IsConfigEvent(webrtc::RtcEventVideoSendStreamConfig *this)
{
  return 1;
}

double webrtc::RTCStats::ToJson@<D0>(webrtc::RTCStats *this@<X0>, std::string::size_type a2@<X1>, unint64_t a3@<X2>, std::string::size_type a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, std::string::value_type *a8@<X7>, std::string *a9@<X8>)
{
  webrtc::RTCStats *v11;
  webrtc::RTCStats *v12;
  webrtc::RTCStats *v13;
  std::string::size_type size;
  std::string *v15;
  char *v16;
  int v17;
  size_t v18;
  BOOL v19;
  std::string *v20;
  _QWORD *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  char *v27;
  std::string::size_type v28;
  webrtc::RTCStats *v29;
  _BOOL4 v31;
  char *v32;
  char *v33;
  unint64_t v34;
  const char *v35;
  std::string *v36;
  std::string::size_type v38;
  webrtc::RTCStats *v39;
  std::string::size_type v40;
  std::string *v41;
  char *v42;
  std::string *v43;
  _WORD *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  std::string *v47;
  _BYTE *v48;
  std::string::size_type v49;
  size_t v50;
  BOOL v51;
  std::string::size_type v52;
  std::string *v53;
  std::string::size_type v54;
  std::string::size_type v55;
  std::string *v56;
  _BYTE *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  std::string *v60;
  _BYTE *v61;
  std::string::size_type v62;
  double result;
  std::string *v64;
  _BOOL4 v65;
  std::string::value_type __p_new_stuff[8];
  size_t v67;
  char v68;
  void *__p;
  webrtc::RTCStats *v70;
  std::string v71;

  memset(&v71, 0, sizeof(v71));
  if (&v71 <= (std::string *)"{\"type\":\"" && (char *)&v71.__r_.__value_.__r.__words[1] + 1 > "{\"type\":\"")
    goto LABEL_230;
  v11 = this;
  strcpy((char *)&v71, "{\"type\":\"");
  *((_BYTE *)&v71.__r_.__value_.__s + 23) = 9;
  this = (webrtc::RTCStats *)(*(uint64_t (**)(webrtc::RTCStats *))(*(_QWORD *)this + 24))(this);
  if (!this)
    goto LABEL_230;
  v12 = this;
  this = (webrtc::RTCStats *)strlen((const char *)this);
  v13 = this;
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    a2 = 22;
  else
    a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    size = v71.__r_.__value_.__l.__size_;
  if (a2 - size >= (unint64_t)this)
  {
    if (this)
    {
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v71;
      else
        v15 = (std::string *)v71.__r_.__value_.__r.__words[0];
      this = (webrtc::RTCStats *)((char *)v15 + size);
      if ((char *)v15 + size <= (char *)v12 && (char *)v13 + (unint64_t)this > (char *)v12)
        goto LABEL_230;
      this = (webrtc::RTCStats *)memmove(this, v12, (size_t)v13);
      v16 = (char *)v13 + size;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        v71.__r_.__value_.__l.__size_ = (std::string::size_type)v13 + size;
      else
        *((_BYTE *)&v71.__r_.__value_.__s + 23) = v16 & 0x7F;
      v16[(_QWORD)v15] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v71, a2, (std::string::size_type)this + size - a2, size, size, 0, (std::string::size_type)this, (const std::string::value_type *)v12);
  }
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    a2 = 22;
  else
    a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    a4 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    a4 = v71.__r_.__value_.__l.__size_;
  if (a2 - a4 >= 8)
  {
    v20 = &v71;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v20 = (std::string *)v71.__r_.__value_.__r.__words[0];
    v21 = (std::string::size_type *)((char *)v20->__r_.__value_.__r.__words + a4);
    if ((char *)v20 + a4 <= "\",\"id\":\"" && v21 + 1 > (_QWORD *)"\",\"id\":\"")
      goto LABEL_230;
    *v21 = 0x223A226469222C22;
    v22 = a4 + 8;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    {
      v71.__r_.__value_.__l.__size_ = a4 + 8;
      v20->__r_.__value_.__s.__data_[v22] = 0;
      a8 = (char *)v11 + 8;
      v17 = *((char *)v11 + 31);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_32;
    }
    else
    {
      *((_BYTE *)&v71.__r_.__value_.__s + 23) = v22 & 0x7F;
      v20->__r_.__value_.__s.__data_[v22] = 0;
      a8 = (char *)v11 + 8;
      v17 = *((char *)v11 + 31);
      if ((v17 & 0x80000000) == 0)
        goto LABEL_32;
    }
LABEL_39:
    v18 = *((_QWORD *)v11 + 2);
    if ((v18 & 0x8000000000000000) != 0)
      goto LABEL_230;
    a8 = *(std::string::value_type **)a8;
    v19 = v18 == 0;
    if (v18)
    {
      if (!a8)
        goto LABEL_230;
    }
    goto LABEL_42;
  }
  std::string::__grow_by_and_replace(&v71, a2, a4 - a2 + 8, a4, a4, 0, 8uLL, "\",\"id\":\"");
  a8 = (char *)v11 + 8;
  v17 = *((char *)v11 + 31);
  if (v17 < 0)
    goto LABEL_39;
LABEL_32:
  v18 = v17;
  v19 = v17 == 0;
LABEL_42:
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    a2 = 22;
  else
    a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    v23 = v71.__r_.__value_.__l.__size_;
  if (a2 - v23 >= v18)
  {
    if (!v19)
    {
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v71;
      else
        v24 = (std::string *)v71.__r_.__value_.__r.__words[0];
      this = (webrtc::RTCStats *)((char *)v24 + v23);
      if ((char *)v24 + v23 <= a8 && (char *)this + v18 > a8)
        goto LABEL_230;
      this = (webrtc::RTCStats *)memmove(this, a8, v18);
      v25 = v23 + v18;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        v71.__r_.__value_.__l.__size_ = v23 + v18;
      else
        *((_BYTE *)&v71.__r_.__value_.__s + 23) = v25 & 0x7F;
      v24->__r_.__value_.__s.__data_[v25] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&v71, a2, v23 + v18 - a2, v23, v23, 0, v18, a8);
  }
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    a2 = 22;
  else
    a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    a4 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  else
    a4 = v71.__r_.__value_.__l.__size_;
  v64 = a9;
  if (a2 - a4 >= 0xE)
  {
    v26 = &v71;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = (std::string *)v71.__r_.__value_.__r.__words[0];
    v27 = (char *)v26 + a4;
    if ((char *)v26 + a4 <= "\",\"timestamp\":" && v27 + 14 > "\",\"timestamp\":")
      goto LABEL_230;
    qmemcpy(v27, "\",\"timestamp\":", 14);
    v28 = a4 + 14;
    if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      v71.__r_.__value_.__l.__size_ = a4 + 14;
    else
      *((_BYTE *)&v71.__r_.__value_.__s + 23) = v28 & 0x7F;
    v26->__r_.__value_.__s.__data_[v28] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace(&v71, a2, a4 - a2 + 14, a4, a4, 0, 0xEuLL, "\",\"timestamp\":");
  }
  rtc::StringBuilder::operator<<(&v71, *((_QWORD *)v11 + 4));
  (*(void (**)(void **__return_ptr, webrtc::RTCStats *, _QWORD))(*(_QWORD *)v11 + 32))(&__p, v11, 0);
  this = (webrtc::RTCStats *)__p;
  v29 = v70;
  if (__p == v70)
    goto LABEL_212;
  v31 = __p_new_stuff <= "null" && &__p_new_stuff[4] > "null";
  v65 = v31;
  v32 = (char *)__p + 8;
  do
  {
    v34 = *((_QWORD *)v32 + 1);
    if (v34 >= 0x10)
      goto LABEL_231;
    if (!*(_BYTE *)(*(_QWORD *)v32 + qword_208F19FE8[v34]))
      goto LABEL_87;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      a2 = 22;
    else
      a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      a4 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      a4 = v71.__r_.__value_.__l.__size_;
    if (a2 - a4 >= 2)
    {
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v71;
      else
        v36 = (std::string *)v71.__r_.__value_.__r.__words[0];
      if ((char *)v36 + a4 <= ",\"" && &v36->__r_.__value_.__s.__data_[a4 + 2] > ",\"")
        goto LABEL_230;
      *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + a4) = 8748;
      v38 = a4 + 2;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      {
        v71.__r_.__value_.__l.__size_ = a4 + 2;
        v36->__r_.__value_.__s.__data_[v38] = 0;
        v35 = (const char *)*((_QWORD *)v32 - 1);
        if (!v35)
          goto LABEL_230;
      }
      else
      {
        *((_BYTE *)&v71.__r_.__value_.__s + 23) = v38 & 0x7F;
        v36->__r_.__value_.__s.__data_[v38] = 0;
        v35 = (const char *)*((_QWORD *)v32 - 1);
        if (!v35)
          goto LABEL_230;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v71, a2, a4 - a2 + 2, a4, a4, 0, 2uLL, ",\"");
      v35 = (const char *)*((_QWORD *)v32 - 1);
      if (!v35)
        goto LABEL_230;
    }
    this = (webrtc::RTCStats *)strlen(v35);
    v39 = this;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      a2 = 22;
    else
      a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      v40 = v71.__r_.__value_.__l.__size_;
    if (a2 - v40 >= (unint64_t)this)
    {
      if (this)
      {
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v71;
        else
          v41 = (std::string *)v71.__r_.__value_.__r.__words[0];
        this = (webrtc::RTCStats *)((char *)v41 + v40);
        if ((char *)v41 + v40 <= v35 && (char *)v39 + (unint64_t)this > v35)
          goto LABEL_230;
        this = (webrtc::RTCStats *)memmove(this, v35, (size_t)v39);
        v42 = (char *)v39 + v40;
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          v71.__r_.__value_.__l.__size_ = (std::string::size_type)v39 + v40;
        else
          *((_BYTE *)&v71.__r_.__value_.__s + 23) = v42 & 0x7F;
        v42[(_QWORD)v41] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v71, a2, (std::string::size_type)this + v40 - a2, v40, v40, 0, (std::string::size_type)this, v35);
    }
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      a2 = 22;
    else
      a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      a4 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      a4 = v71.__r_.__value_.__l.__size_;
    if (a2 - a4 >= 2)
    {
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v43 = &v71;
      else
        v43 = (std::string *)v71.__r_.__value_.__r.__words[0];
      v44 = (_WORD *)((char *)v43 + a4);
      if ((char *)v43 + a4 <= "\":" && v44 + 1 > (_WORD *)"\":")
        goto LABEL_230;
      *v44 = 14882;
      v45 = a4 + 2;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      {
        v71.__r_.__value_.__l.__size_ = a4 + 2;
        v43->__r_.__value_.__s.__data_[v45] = 0;
        if (*((_QWORD *)v32 + 1) != 6)
        {
LABEL_136:
          a3 = *((_QWORD *)v32 + 1);
          if (a3 >= 0x10)
            goto LABEL_231;
          goto LABEL_164;
        }
      }
      else
      {
        *((_BYTE *)&v71.__r_.__value_.__s + 23) = v45 & 0x7F;
        v43->__r_.__value_.__s.__data_[v45] = 0;
        if (*((_QWORD *)v32 + 1) != 6)
          goto LABEL_136;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v71, a2, a4 - a2 + 2, a4, a4, 0, 2uLL, "\":");
      if (*((_QWORD *)v32 + 1) != 6)
        goto LABEL_136;
    }
    v46 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      a2 = 22;
    else
      a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v46 = v71.__r_.__value_.__l.__size_;
    if (a2 == v46)
    {
      std::string::__grow_by_and_replace(&v71, a2, 1uLL, a2, a2, 0, 1uLL, "\"");
      a3 = *((_QWORD *)v32 + 1);
      if (a3 >= 0x10)
        goto LABEL_231;
    }
    else
    {
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v47 = &v71;
      else
        v47 = (std::string *)v71.__r_.__value_.__r.__words[0];
      v48 = (char *)v47 + v46;
      if ((char *)v47 + v46 <= "\"" && v48 + 1 > "\"")
        goto LABEL_230;
      *v48 = 34;
      v49 = v46 + 1;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
      {
        v71.__r_.__value_.__l.__size_ = v49;
        v47->__r_.__value_.__s.__data_[v49] = 0;
        a3 = *((_QWORD *)v32 + 1);
        if (a3 >= 0x10)
          goto LABEL_231;
      }
      else
      {
        *((_BYTE *)&v71.__r_.__value_.__s + 23) = v49 & 0x7F;
        v47->__r_.__value_.__s.__data_[v49] = 0;
        a3 = *((_QWORD *)v32 + 1);
        if (a3 >= 0x10)
          goto LABEL_231;
      }
    }
LABEL_164:
    if (*(_BYTE *)(*(_QWORD *)v32 + qword_208F19FE8[a3]))
    {
      if (v68 < 0)
      {
        v50 = v67;
        if ((v67 & 0x8000000000000000) != 0)
          goto LABEL_230;
        a8 = *(std::string::value_type **)__p_new_stuff;
        v51 = v67 == 0;
        if (v67)
        {
          if (!*(_QWORD *)__p_new_stuff)
            goto LABEL_230;
        }
        goto LABEL_170;
      }
      v50 = v68;
    }
    else
    {
      v68 = 4;
      if (v65)
        goto LABEL_230;
      strcpy(__p_new_stuff, "null");
      v50 = 4;
    }
    v51 = v50 == 0;
    a8 = __p_new_stuff;
LABEL_170:
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      a2 = 22;
    else
      a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    else
      v52 = v71.__r_.__value_.__l.__size_;
    if (a2 - v52 >= v50)
    {
      if (!v51)
      {
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v71;
        else
          v53 = (std::string *)v71.__r_.__value_.__r.__words[0];
        this = (webrtc::RTCStats *)((char *)v53 + v52);
        if ((char *)v53 + v52 <= a8 && (char *)this + v50 > a8)
          goto LABEL_230;
        this = (webrtc::RTCStats *)memmove(this, a8, v50);
        v54 = v52 + v50;
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
          v71.__r_.__value_.__l.__size_ = v52 + v50;
        else
          *((_BYTE *)&v71.__r_.__value_.__s + 23) = v54 & 0x7F;
        v53->__r_.__value_.__s.__data_[v54] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&v71, a2, v52 + v50 - a2, v52, v52, 0, v50, a8);
    }
    if (v68 < 0)
    {
      operator delete(*(void **)__p_new_stuff);
      if (*((_QWORD *)v32 + 1) != 6)
        goto LABEL_87;
    }
    else if (*((_QWORD *)v32 + 1) != 6)
    {
      goto LABEL_87;
    }
    v55 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      a2 = 22;
    else
      a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v55 = v71.__r_.__value_.__l.__size_;
    if (a2 == v55)
    {
      std::string::__grow_by_and_replace(&v71, a2, 1uLL, a2, a2, 0, 1uLL, "\"");
    }
    else
    {
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &v71;
      else
        v56 = (std::string *)v71.__r_.__value_.__r.__words[0];
      v57 = (char *)v56 + v55;
      if ((char *)v56 + v55 <= "\"" && v57 + 1 > "\"")
        goto LABEL_230;
      *v57 = 34;
      v58 = v55 + 1;
      if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
        v71.__r_.__value_.__l.__size_ = v58;
      else
        *((_BYTE *)&v71.__r_.__value_.__s + 23) = v58 & 0x7F;
      v56->__r_.__value_.__s.__data_[v58] = 0;
    }
LABEL_87:
    v33 = v32 + 16;
    v32 += 24;
  }
  while (v33 != (char *)v29);
  this = (webrtc::RTCStats *)__p;
LABEL_212:
  if (this)
  {
    v70 = this;
    operator delete(this);
  }
  v59 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    a2 = 22;
  else
    a2 = (v71.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v59 = v71.__r_.__value_.__l.__size_;
  if (a2 == v59)
  {
    std::string::__grow_by_and_replace(&v71, a2, 1uLL, a2, a2, 0, 1uLL, "}");
    goto LABEL_229;
  }
  v60 = &v71;
  if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v60 = (std::string *)v71.__r_.__value_.__r.__words[0];
  v61 = (char *)v60 + v59;
  if ((char *)v60 + v59 <= "}" && v61 + 1 > "}")
  {
LABEL_230:
    __break(1u);
LABEL_231:
    absl::variant_internal::PerformVisitation<webrtc::Attribute::has_value(void)::$_0,absl::variant<std::optional<BOOL> const*,std::optional<int> const*,std::optional<unsigned int> const*,std::optional<long long> const*,std::optional<unsigned long long> const*,std::optional<double> const*,std::optional<std::string> const*,std::optional<std::vector<BOOL>> const*,std::optional<std::vector<int>> const*,std::optional<std::vector<unsigned int>> const*,std::optional<std::vector<long long>> const*,std::optional<std::vector<unsigned long long>> const*,std::optional<std::vector<double>> const*,std::optional<std::vector<std::string>> const*,std::optional<std::map<std::string,unsigned long long>> const*,std::optional<std::map<std::string,double>> const*> const&>::Run<0ul,18446744073709551615ul>(this, a2, a3, a4, a5, a6, a7, (uint64_t)a8);
  }
  *v61 = 125;
  v62 = v59 + 1;
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    v71.__r_.__value_.__l.__size_ = v62;
  else
    *((_BYTE *)&v71.__r_.__value_.__s + 23) = v62 & 0x7F;
  v60->__r_.__value_.__s.__data_[v62] = 0;
LABEL_229:
  result = *(double *)&v71.__r_.__value_.__l.__data_;
  *v64 = v71;
  return result;
}

void webrtc::RTCStats::AttributesImpl(unint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1)
  {
    if (a1 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v4 = 24 * a1;
    v5 = (char *)operator new(24 * a1);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[v4];
  }
}

void webrtc::RTCStatsCollector::~RTCStatsCollector(webrtc::RTCStatsCollector *this)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;

  *(_QWORD *)this = &unk_24C0BC178;
  v2 = (void *)*((_QWORD *)this + 55);
  if (v2)
  {
    *((_QWORD *)this + 56) = v2;
    operator delete(v2);
  }
  v3 = *((_QWORD *)this + 53);
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v3 + 16, *(char **)(v3 + 24));
      MEMORY[0x20BD0ADEC](v3, 0x1020C4043D65406);
    }
  }
  std::__tree<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::RTCStatsCollector::CertificateStatsPair>>>::destroy((uint64_t)this + 304, *((char **)this + 39));
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 240));
  v6 = (_QWORD *)*((_QWORD *)this + 27);
  if (!v6)
    goto LABEL_21;
  v7 = (_QWORD *)*((_QWORD *)this + 28);
  v8 = (void *)*((_QWORD *)this + 27);
  if (v7 == v6)
    goto LABEL_20;
  v9 = v7 - 69;
  do
  {
    webrtc::TrackMediaInfoMap::~TrackMediaInfoMap((webrtc::TrackMediaInfoMap *)(v9 + 10));
    if (*((_BYTE *)v9 + 72) && *((char *)v9 + 71) < 0)
    {
      operator delete((void *)v9[6]);
      if (!*((_BYTE *)v9 + 40))
        goto LABEL_17;
    }
    else if (!*((_BYTE *)v9 + 40))
    {
      goto LABEL_17;
    }
    if (*((char *)v9 + 39) < 0)
      operator delete((void *)v9[2]);
LABEL_17:
    if (*v9)
      (*(void (**)(_QWORD))(*(_QWORD *)*v9 + 8))(*v9);
    v10 = v9 == v6;
    v9 -= 69;
  }
  while (!v10);
  v8 = (void *)*((_QWORD *)this + 27);
LABEL_20:
  *((_QWORD *)this + 28) = v6;
  operator delete(v8);
LABEL_21:
  pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 96));
  pthread_cond_destroy((pthread_cond_t *)((char *)this + 160));
  v11 = *((_QWORD *)this + 11);
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v11 + 16, *(char **)(v11 + 24));
      MEMORY[0x20BD0ADEC](v11, 0x1020C4043D65406);
    }
  }
  v14 = *((_QWORD *)this + 8);
  if (v14)
  {
    v15 = *((_QWORD *)this + 9);
    v16 = (void *)*((_QWORD *)this + 8);
    if (v15 != v14)
    {
      do
      {
        v17 = *(_QWORD *)(v15 - 8);
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        v18 = *(_QWORD *)(v15 - 16);
        if (v18)
          (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        v19 = *(_QWORD *)(v15 - 24);
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        v15 -= 32;
      }
      while (v15 != v14);
      v16 = (void *)*((_QWORD *)this + 8);
    }
    *((_QWORD *)this + 9) = v14;
    operator delete(v16);
  }
  v20 = *((_QWORD *)this + 7);
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v20 + 16, *(char **)(v20 + 24));
      MEMORY[0x20BD0ADEC](v20, 0x1020C4043D65406);
    }
  }
}

uint64_t webrtc::RTCStatsCollector::GetStatsReportInternal(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *i;
  uint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  rtc::Thread *v57;
  _BYTE *v58;
  char v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  __int128 v65;
  char ***v66;
  char **v67;
  uint64_t (*v68)(uint64_t, char ****, char ****);
  void (*v69)(rtc::Thread *);
  char v70;
  _BYTE v71[24];
  char ****v72;
  char ****v73;
  _QWORD ***v74;
  void *__p;
  char *v76;
  _QWORD **v77;
  _QWORD *v78[2];
  char ***v79;
  char **v80[2];
  char ***v81;
  char **v82[2];

  v4 = (uint64_t *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 80);
  if (v6 < v5)
  {
    if (v6)
    {
      *(_DWORD *)v6 = *(_DWORD *)a2;
      v7 = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_OWORD *)(v6 + 8) = v7;
      v8 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(v6 + 24) = v8;
      v9 = (char *)(v6 + 32);
      goto LABEL_26;
    }
    goto LABEL_76;
  }
  v10 = *v4;
  v11 = (uint64_t)(v6 - *v4) >> 5;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 59)
    goto LABEL_77;
  v13 = v5 - v10;
  if (v13 >> 4 > v12)
    v12 = v13 >> 4;
  v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0;
  v15 = 0x7FFFFFFFFFFFFFFLL;
  if (!v14)
    v15 = v12;
  if (!v15)
  {
LABEL_76:
    __break(1u);
LABEL_77:
    abort();
  }
  if (v15 >> 59)
    std::__throw_bad_array_new_length[abi:sn180100]();
  v16 = 32 * v15;
  v17 = (char *)operator new(32 * v15);
  v18 = &v17[v16];
  v19 = &v17[32 * v11];
  *(_DWORD *)v19 = *(_DWORD *)a2;
  v20 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_OWORD *)(v19 + 8) = v20;
  v21 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v19 + 3) = v21;
  v9 = v19 + 32;
  if (v6 != v10)
  {
    v22 = 0;
    do
    {
      v23 = &v19[v22];
      v24 = v6 + v22;
      *((_DWORD *)v23 - 8) = *(_DWORD *)(v6 + v22 - 32);
      v25 = *(_OWORD *)(v6 + v22 - 24);
      *(_QWORD *)(v24 - 24) = 0;
      *(_QWORD *)(v24 - 16) = 0;
      *(_OWORD *)(v23 - 24) = v25;
      v26 = *(_QWORD *)(v6 + v22 - 8);
      *(_QWORD *)(v24 - 8) = 0;
      *((_QWORD *)v23 - 1) = v26;
      v22 -= 32;
    }
    while (v6 + v22 != v10);
    v19 += v22;
  }
  v27 = *(char **)(a1 + 64);
  v28 = *(char **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v19;
  *(_QWORD *)(a1 + 72) = v9;
  *(_QWORD *)(a1 + 80) = v18;
  while (v28 != v27)
  {
    v29 = *((_QWORD *)v28 - 1);
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = *((_QWORD *)v28 - 2);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    v31 = *((_QWORD *)v28 - 3);
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v28 -= 32;
  }
  if (v27)
    operator delete(v27);
LABEL_26:
  *(_QWORD *)(a1 + 72) = v9;
  if (rtc::g_clock)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock);
  }
  else
  {
    if (!dword_253EA791C)
      mach_timebase_info((mach_timebase_info_t)&rtc::SystemTimeNanos(void)::timebase);
    result = (uint64_t)(mach_absolute_time() * rtc::SystemTimeNanos(void)::timebase)
           / dword_253EA791C;
  }
  v33 = result / 1000;
  if (!*(_QWORD *)(a1 + 424) || v33 - *(_QWORD *)(a1 + 408) > *(_QWORD *)(a1 + 416))
  {
    if (*(_DWORD *)(a1 + 40))
      return result;
    if (rtc::g_clock)
    {
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)rtc::g_clock + 16))(rtc::g_clock) / 1000;
      *(_DWORD *)(a1 + 40) = 2;
      *(_QWORD *)(a1 + 48) = v33;
      v36 = *(_QWORD **)(a1 + 216);
      v35 = *(_QWORD **)(a1 + 224);
      if (v35 == v36)
        goto LABEL_51;
    }
    else
    {
      gettimeofday((timeval *)v71, 0);
      v34 = *(int *)&v71[8] + 1000000 * *(_QWORD *)v71;
      *(_DWORD *)(a1 + 40) = 2;
      *(_QWORD *)(a1 + 48) = v33;
      v36 = *(_QWORD **)(a1 + 216);
      v35 = *(_QWORD **)(a1 + 224);
      if (v35 == v36)
      {
LABEL_51:
        *(_QWORD *)(a1 + 224) = v36;
        v67 = 0;
        v68 = 0;
        v66 = &v67;
        v82[0] = 0;
        v82[1] = 0;
        v80[1] = 0;
        v81 = v82;
        v79 = v80;
        v80[0] = 0;
        v78[0] = 0;
        v78[1] = 0;
        v77 = v78;
        (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 544))(&__p);
        v44 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)v71 = &__p;
        *(_QWORD *)&v71[8] = a1;
        *(_QWORD *)&v71[16] = &v66;
        v72 = &v79;
        v73 = &v81;
        v74 = &v77;
        (*(void (**)(uint64_t, _BYTE *, void (*)(rtc::Thread *), char *))(*(_QWORD *)v44 + 96))(v44, v71, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCStatsCollector::PrepareTransceiverStatsInfosAndCallStats_s_w_n(void)::$_1>, &v70);
        v45 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)v71 = &v66;
        *(_QWORD *)&v71[8] = &v79;
        *(_QWORD *)&v71[16] = &v81;
        v72 = (char ****)&v77;
        v73 = (char ****)a1;
        (*(void (**)(uint64_t, _BYTE *, double (*)(rtc::Thread *), char *))(*(_QWORD *)v45 + 96))(v45, v71, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCStatsCollector::PrepareTransceiverStatsInfosAndCallStats_s_w_n(void)::$_2>, &v70);
        v46 = *(_QWORD **)(a1 + 216);
        for (i = *(_QWORD **)(a1 + 224); v46 != i; v46 += 69)
        {
          v48 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v46 + 104))(*v46);
          *((_DWORD *)v46 + 136) = v48;
          *((_BYTE *)v46 + 548) = BYTE4(v48);
        }
        v49 = (char *)__p;
        if (__p)
        {
          v50 = v76;
          v51 = __p;
          if (v76 != __p)
          {
            do
            {
              v53 = *((_QWORD *)v50 - 1);
              v50 -= 8;
              v52 = v53;
              if (v53)
                (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
            }
            while (v50 != v49);
            v51 = __p;
          }
          v76 = v49;
          operator delete(v51);
        }
        std::__tree<std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>,std::__map_value_compare<cricket::VideoMediaReceiveChannelInterface *,std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>,std::less<cricket::VideoMediaReceiveChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VideoMediaReceiveChannelInterface *,cricket::VideoMediaReceiveInfo>>>::destroy(v78[0]);
        std::__tree<std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>,std::__map_value_compare<cricket::VoiceMediaReceiveChannelInterface *,std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>,std::less<cricket::VoiceMediaReceiveChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VoiceMediaReceiveChannelInterface *,cricket::VoiceMediaReceiveInfo>>>::destroy(v80[0]);
        std::__tree<std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>,std::__map_value_compare<cricket::VideoMediaSendChannelInterface *,std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>,std::less<cricket::VideoMediaSendChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VideoMediaSendChannelInterface *,cricket::VideoMediaSendInfo>>>::destroy(v82[0]);
        std::__tree<std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>,std::__map_value_compare<cricket::VoiceMediaSendChannelInterface *,std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>,std::less<cricket::VoiceMediaSendChannelInterface *>,true>,std::allocator<std::__value_type<cricket::VoiceMediaSendChannelInterface *,cricket::VoiceMediaSendInfo>>>::destroy(v67);
        pthread_mutex_lock((pthread_mutex_t *)(a1 + 96));
        *(_BYTE *)(a1 + 209) = 0;
        pthread_mutex_unlock((pthread_mutex_t *)(a1 + 96));
        (**(void (***)(uint64_t))a1)(a1);
        v54 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)v71 = a1;
        (**(void (***)(uint64_t))a1)(a1);
        (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 8) + 560))(&v71[8]);
        v74 = (_QWORD ***)v34;
        v55 = operator new();
        v56 = *(_QWORD *)v71;
        *(_QWORD *)v71 = 0;
        *(_QWORD *)v55 = v56;
        *(_BYTE *)(v55 + 8) = 0;
        *(_BYTE *)(v55 + 32) = 0;
        if ((_BYTE)v73)
        {
          *(_OWORD *)(v55 + 8) = *(_OWORD *)&v71[8];
          *(_QWORD *)(v55 + 24) = v72;
          *(_QWORD *)&v71[16] = 0;
          v72 = 0;
          *(_QWORD *)&v71[8] = 0;
          *(_BYTE *)(v55 + 32) = 1;
        }
        *(_QWORD *)(v55 + 40) = v74;
        v66 = (char ***)v55;
        v68 = (uint64_t (*)(uint64_t, char ****, char ****))absl::internal_any_invocable::RemoteManagerNontrivial<webrtc::RTCStatsCollector::GetStatsReportInternal(webrtc::RTCStatsCollector::RequestInfo)::$_1>;
        v69 = absl::internal_any_invocable::RemoteInvoker<false,void,webrtc::RTCStatsCollector::GetStatsReportInternal(webrtc::RTCStatsCollector::RequestInfo)::$_1 &&>;
        (*(void (**)(uint64_t, char ****, char ****, char ****))(*(_QWORD *)v54 + 8))(v54, &v66, &v81, &v79);
        v68(1, &v66, &v66);
        if ((_BYTE)v73 && SHIBYTE(v72) < 0)
          operator delete(*(void **)&v71[8]);
        v57 = *(rtc::Thread **)v71;
        if (*(_QWORD *)v71)
          v57 = (rtc::Thread *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v71 + 8))(*(_QWORD *)v71);
        v58 = rtc::Thread::Current(v57);
        v59 = v58[217];
        v58[217] = 0;
        v60 = operator new();
        *(_DWORD *)v60 = 0;
        *(_QWORD *)(v60 + 32) = 0;
        *(_QWORD *)(v60 + 24) = 0;
        *(_QWORD *)(v60 + 8) = v34;
        *(_QWORD *)(v60 + 16) = v60 + 24;
        do
          v61 = __ldxr((unsigned int *)v60);
        while (__stxr(v61 + 1, (unsigned int *)v60));
        v62 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = v60;
        if (v62)
        {
          do
          {
            v63 = __ldaxr((unsigned int *)v62);
            v64 = v63 - 1;
          }
          while (__stlxr(v64, (unsigned int *)v62));
          if (!v64)
          {
            std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v62 + 16, *(char **)(v62 + 24));
            MEMORY[0x20BD0ADEC](v62, 0x1020C4043D65406);
          }
        }
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, v34, *(_QWORD *)(a1 + 56));
        --*(_DWORD *)(a1 + 40);
        v58[217] = v59;
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
      }
    }
    v42 = v35 - 69;
    while (1)
    {
      webrtc::TrackMediaInfoMap::~TrackMediaInfoMap((webrtc::TrackMediaInfoMap *)(v42 + 10));
      if (*((_BYTE *)v42 + 72) && *((char *)v42 + 71) < 0)
      {
        operator delete((void *)v42[6]);
        if (*((_BYTE *)v42 + 40))
        {
LABEL_46:
          if (*((char *)v42 + 39) < 0)
            operator delete((void *)v42[2]);
        }
      }
      else if (*((_BYTE *)v42 + 40))
      {
        goto LABEL_46;
      }
      if (*v42)
        (*(void (**)(_QWORD))(*(_QWORD *)*v42 + 8))(*v42);
      v43 = v42 == v36;
      v42 -= 69;
      if (v43)
        goto LABEL_51;
    }
  }
  v37 = *(_QWORD *)(a1 + 16);
  (**(void (***)(uint64_t))a1)(a1);
  v38 = *(unsigned int **)(a1 + 424);
  if (v38)
  {
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
  }
  v40 = *(_QWORD *)(a1 + 80);
  v65 = *(_OWORD *)(a1 + 64);
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v41 = operator new();
  *(_QWORD *)v41 = webrtc::RTCStatsCollector::DeliverCachedReport;
  *(_QWORD *)(v41 + 8) = 0;
  *(_QWORD *)(v41 + 16) = a1;
  *(_QWORD *)(v41 + 24) = v38;
  *(_OWORD *)(v41 + 32) = v65;
  *(_QWORD *)(v41 + 48) = v40;
  *(_QWORD *)v71 = v41;
  *(_QWORD *)&v71[16] = absl::internal_any_invocable::RemoteManagerNontrivial<std::__bind_front_t<void (webrtc::RTCStatsCollector::*)(webrtc::scoped_refptr<webrtc::RTCStatsReport const>,std::vector<webrtc::RTCStatsCollector::RequestInfo>),webrtc::scoped_refptr<webrtc::RTCStatsCollector>,webrtc::scoped_refptr<webrtc::RTCStatsReport const>,std::vector<webrtc::RTCStatsCollector::RequestInfo>>>;
  v72 = (char ****)absl::internal_any_invocable::RemoteInvoker<false,void,std::__bind_front_t<void (webrtc::RTCStatsCollector::*)(webrtc::scoped_refptr<webrtc::RTCStatsReport const>,std::vector<webrtc::RTCStatsCollector::RequestInfo>),webrtc::scoped_refptr<webrtc::RTCStatsCollector>,webrtc::scoped_refptr<webrtc::RTCStatsReport const>,std::vector<webrtc::RTCStatsCollector::RequestInfo>> &&>;
  (*(void (**)(uint64_t, _BYTE *, char ****, char ****))(*(_QWORD *)v37 + 8))(v37, v71, &v66, &v81);
  return (*(uint64_t (**)(uint64_t, _BYTE *, _BYTE *))&v71[16])(1, v71, v71);
}

uint64_t webrtc::RTCStatsCollector::DeliverCachedReport(uint64_t result, uint64_t *a2, int **a3)
{
  int *v3;
  uint64_t *v4;
  int v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  void (***v11)(_QWORD);
  uint64_t v12;
  unsigned int v13;
  webrtc::RtpEncodingParameters *v14;
  webrtc::RtpEncodingParameters *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  _QWORD *v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  char *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  char *v86;
  std::string *v87;
  uint64_t v88;
  webrtc::RtpEncodingParameters *v89;
  BOOL v90;
  __int128 *v91;
  std::string *v92;
  __int128 v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  webrtc::RtpEncodingParameters *v98;
  void (***v99)(_QWORD);
  unsigned int *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void (***v104)(_QWORD);
  unsigned int v105;
  std::string *v106;
  std::string *v107;
  unsigned int v108;
  unsigned int v109;
  void (***v110)(_QWORD);
  std::string *v111;
  std::string *v112;
  uint64_t v113;
  __int128 *v114;
  std::string *v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int v119;
  std::string *v120;
  std::string *v121;
  void *v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  int *v129;
  int *v130;
  void (***v131)(_QWORD);
  void (***v132)(_QWORD);
  int *v133;
  void (***v134)(_QWORD);
  void (***v135)(_QWORD);
  char *v136;
  uint64_t v137;
  char *v138;
  void (***v139)(_QWORD);
  char v140;
  int v141;
  char v142;
  void *v143[12];
  webrtc::RtpEncodingParameters *v144;
  webrtc::RtpEncodingParameters *v145;
  uint64_t v146;
  std::string *v147;
  std::string *v148;
  unint64_t v149;

  v127 = result;
  v3 = *a3;
  v133 = a3[1];
  if (*a3 != v133)
  {
    v4 = a2;
    while (1)
    {
      v5 = *v3;
      if (!*v3)
      {
        v7 = (void (***)(_QWORD))*((_QWORD *)v3 + 1);
        if (v7)
          (**v7)(*((_QWORD *)v3 + 1));
        ((void (*)(void (***)(_QWORD), uint64_t *))(*v7)[4])(v7, v4);
LABEL_4:
        result = ((uint64_t (*)(_QWORD))(*v7)[1])(v7);
        goto LABEL_5;
      }
      if (v5 != 1)
        break;
      v6 = 0;
      v7 = 0;
      v8 = 0;
      v9 = (void (***)(_QWORD))*((_QWORD *)v3 + 2);
      v10 = v9;
      if (v9)
        goto LABEL_13;
LABEL_14:
      v11 = (void (***)(_QWORD))*((_QWORD *)v3 + 1);
      if (v11)
        (**v11)(*((_QWORD *)v3 + 1));
      v12 = *v4;
      if (*v4)
      {
        do
          v13 = __ldxr((unsigned int *)v12);
        while (__stxr(v13 + 1, (unsigned int *)v12));
      }
      if (v7)
        (**v7)(v7);
      v139 = v8;
      if (v8)
        (**v8)(v8);
      v134 = v11;
      v135 = v8;
      v147 = 0;
      v148 = 0;
      v149 = 0;
      if (v5 != 1)
      {
        if (!v139)
          goto LABEL_173;
        LOBYTE(v141) = 0;
        v142 = 0;
        v47 = *(_QWORD *)(v127 + 24);
        v143[0] = &v141;
        v143[1] = &v139;
        (*(void (**)(uint64_t, void **, uint64_t (*)(uint64_t *), char *))(*(_QWORD *)v47 + 96))(v47, v143, rtc::FunctionView<void ()(void)>::CallVoidPtr<webrtc::RTCStatsCollector::CreateReportFilteredBySelector(BOOL,webrtc::scoped_refptr<webrtc::RTCStatsReport const>,webrtc::scoped_refptr<webrtc::RtpSenderInternal>,webrtc::scoped_refptr<webrtc::RtpReceiverInternal>)::$_1>, &v140);
        if (!v142)
          goto LABEL_173;
        v132 = v7;
        if (v12)
        {
          do
            v48 = __ldxr((unsigned int *)v12);
          while (__stxr(v48 + 1, (unsigned int *)v12));
        }
        v49 = v12 + 16;
        v50 = *(_QWORD **)(v12 + 16);
        do
          v51 = __ldxr((unsigned int *)v12);
        while (__stxr(v51 + 1, (unsigned int *)v12));
        do
        {
          v52 = __ldaxr((unsigned int *)v12);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, (unsigned int *)v12));
        if (!v53)
        {
          std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v12 + 16, *(char **)(v12 + 24));
          MEMORY[0x20BD0ADEC](v12, 0x1020C4043D65406);
        }
        do
          v54 = __ldxr((unsigned int *)v12);
        while (__stxr(v54 + 1, (unsigned int *)v12));
        v55 = (_QWORD *)(v12 + 24);
        do
          v56 = __ldxr((unsigned int *)v12);
        while (__stxr(v56 + 1, (unsigned int *)v12));
        do
        {
          v57 = __ldaxr((unsigned int *)v12);
          v58 = v57 - 1;
        }
        while (__stlxr(v58, (unsigned int *)v12));
        if (!v58)
        {
          std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v12 + 16, *(char **)(v12 + 24));
          MEMORY[0x20BD0ADEC](v12, 0x1020C4043D65406);
        }
        v130 = v3;
        if (v50 == v55)
        {
          v14 = 0;
          v59 = 0;
          v7 = v132;
          goto LABEL_163;
        }
        v14 = 0;
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v62 = 0;
        while (1)
        {
          v63 = v50[7];
          if ((char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 24))(v63) != "inbound-rtp")
            goto LABEL_95;
          if (v62 < v60)
          {
            if (!v62)
              goto LABEL_224;
            *(_QWORD *)v62 = v63;
            v62 += 8;
            v59 = v62;
LABEL_95:
            v64 = (_QWORD *)v50[1];
            if (!v64)
              goto LABEL_112;
            goto LABEL_96;
          }
          v66 = v55;
          v67 = (v62 - v61) >> 3;
          v68 = v67 + 1;
          if ((unint64_t)(v67 + 1) >> 61)
            goto LABEL_225;
          if ((v60 - v61) >> 2 > v68)
            v68 = (v60 - v61) >> 2;
          if ((unint64_t)(v60 - v61) >= 0x7FFFFFFFFFFFFFF8)
            v68 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v68)
            goto LABEL_224;
          if (v68 >> 61)
LABEL_226:
            std::__throw_bad_array_new_length[abi:sn180100]();
          v69 = 8 * v68;
          v70 = operator new(8 * v68);
          v14 = (webrtc::RtpEncodingParameters *)&v70[8 * v67];
          *(_QWORD *)v14 = v63;
          v71 = (char *)v14 + 8;
          if (v62 != v61)
            break;
          v55 = v66;
          v60 = &v70[v69];
          v59 = (char *)v14 + 8;
          if (v61)
            goto LABEL_110;
LABEL_111:
          v62 = v59;
          v61 = (char *)v14;
          v64 = (_QWORD *)v50[1];
          if (!v64)
          {
            do
            {
LABEL_112:
              v65 = (_QWORD *)v50[2];
              v90 = *v65 == (_QWORD)v50;
              v50 = v65;
            }
            while (!v90);
            goto LABEL_90;
          }
          do
          {
LABEL_96:
            v65 = v64;
            v64 = (_QWORD *)*v64;
          }
          while (v64);
LABEL_90:
          v50 = v65;
          if (v65 == v55)
          {
            v7 = v132;
            v49 = v12 + 16;
            if (!v12)
              goto LABEL_168;
            do
            {
LABEL_163:
              v94 = __ldaxr((unsigned int *)v12);
              v95 = v94 - 1;
            }
            while (__stlxr(v95, (unsigned int *)v12));
            if (!v95)
            {
              std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v49, *(char **)(v12 + 24));
              MEMORY[0x20BD0ADEC](v12, 0x1020C4043D65406);
            }
            do
            {
              v96 = __ldaxr((unsigned int *)v12);
              v97 = v96 - 1;
            }
            while (__stlxr(v97, (unsigned int *)v12));
            if (!v97)
            {
              std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v49, *(char **)(v12 + 24));
              MEMORY[0x20BD0ADEC](v12, 0x1020C4043D65406);
              v98 = v14;
              if (v14 != (webrtc::RtpEncodingParameters *)v59)
                goto LABEL_186;
LABEL_171:
              v4 = a2;
              v3 = v130;
              if (v14)
                goto LABEL_172;
              goto LABEL_173;
            }
LABEL_168:
            v98 = v14;
            if (v14 == (webrtc::RtpEncodingParameters *)v59)
              goto LABEL_171;
LABEL_186:
            while (1)
            {
              v113 = *(_QWORD *)v98;
              if (!*(_BYTE *)(*(_QWORD *)v98 + 44) || !v142)
                break;
              if (*(_DWORD *)(v113 + 40) == v141)
              {
                v114 = (__int128 *)(v113 + 8);
                v115 = v148;
                if ((unint64_t)v148 >= v149)
                {
                  v112 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v147, (uint64_t)v114);
                }
                else
                {
                  if (!v148)
                    break;
                  if (*(char *)(v113 + 31) < 0)
                  {
                    std::string::__init_copy_ctor_external(v148, *(const std::string::value_type **)(v113 + 8), *(_QWORD *)(v113 + 16));
                  }
                  else
                  {
                    v116 = *v114;
                    v148->__r_.__value_.__r.__words[2] = *(_QWORD *)(v113 + 24);
                    *(_OWORD *)&v115->__r_.__value_.__l.__data_ = v116;
                  }
                  v112 = v115 + 1;
                }
                v148 = v112;
              }
              v98 = (webrtc::RtpEncodingParameters *)((char *)v98 + 8);
              if (v98 == (webrtc::RtpEncodingParameters *)v59)
                goto LABEL_171;
            }
LABEL_224:
            __break(1u);
LABEL_225:
            abort();
          }
        }
        v72 = v62 - v61 - 8;
        if (v72 < 0x168
          || (v75 = (v62 - 8 - v61) & 0xFFFFFFFFFFFFFFF8, &v70[v62 - v61 - 8 - v75] > &v70[v62 - v61 - 8])
          || &v62[-v75 - 8] > v62 - 8
          || (unint64_t)(v61 - v70) < 0x20)
        {
          v73 = v62;
          v55 = v66;
        }
        else
        {
          v76 = (v72 >> 3) + 1;
          v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
          v73 = &v62[-v77];
          v14 = (webrtc::RtpEncodingParameters *)((char *)v14 - v77);
          v78 = &v70[8 * v67 - 16];
          v79 = v62 - 16;
          v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v81 = *(_OWORD *)v79;
            *(v78 - 1) = *((_OWORD *)v79 - 1);
            *v78 = v81;
            v78 -= 2;
            v79 -= 32;
            v80 -= 4;
          }
          while (v80);
          v55 = v66;
          if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_109:
            v60 = &v70[v69];
            v59 = v71;
            if (!v61)
              goto LABEL_111;
LABEL_110:
            operator delete(v61);
            goto LABEL_111;
          }
        }
        do
        {
          v74 = *((_QWORD *)v73 - 1);
          v73 -= 8;
          *((_QWORD *)v14 - 1) = v74;
          v14 = (webrtc::RtpEncodingParameters *)((char *)v14 - 8);
        }
        while (v73 != v61);
        goto LABEL_109;
      }
      if (!v7)
        goto LABEL_173;
      v131 = v7;
      ((void (*)(void **__return_ptr, void (***)(_QWORD)))(*v7)[29])(v143, v7);
      v14 = v144;
      v15 = v145;
      v144 = 0;
      v145 = 0;
      v146 = 0;
      webrtc::RtpParameters::~RtpParameters(v143);
      if (v12)
      {
        do
          v16 = __ldxr((unsigned int *)v12);
        while (__stxr(v16 + 1, (unsigned int *)v12));
      }
      v17 = v12 + 16;
      v18 = *(_QWORD **)(v12 + 16);
      do
        v19 = __ldxr((unsigned int *)v12);
      while (__stxr(v19 + 1, (unsigned int *)v12));
      do
      {
        v20 = __ldaxr((unsigned int *)v12);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, (unsigned int *)v12));
      if (!v21)
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v12 + 16, *(char **)(v12 + 24));
        MEMORY[0x20BD0ADEC](v12, 0x1020C4043D65406);
      }
      do
        v22 = __ldxr((unsigned int *)v12);
      while (__stxr(v22 + 1, (unsigned int *)v12));
      v23 = (_QWORD *)(v12 + 24);
      do
        v24 = __ldxr((unsigned int *)v12);
      while (__stxr(v24 + 1, (unsigned int *)v12));
      do
      {
        v25 = __ldaxr((unsigned int *)v12);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v12));
      v129 = v3;
      if (!v26)
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v12 + 16, *(char **)(v12 + 24));
        MEMORY[0x20BD0ADEC](v12, 0x1020C4043D65406);
      }
      if (v18 == v23)
      {
        v27 = 0;
        v138 = 0;
        v4 = a2;
        v7 = v131;
        goto LABEL_129;
      }
      v27 = 0;
      v136 = 0;
      v138 = 0;
      v28 = 0;
      v29 = 0;
      do
      {
        v30 = v18[7];
        if ((char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 24))(v30) != "outbound-rtp")
          goto LABEL_44;
        if (v29 < v136)
        {
          if (!v29)
            goto LABEL_224;
          *(_QWORD *)v29 = v30;
          v29 += 8;
          v138 = v29;
LABEL_44:
          v31 = (_QWORD *)v18[1];
          if (v31)
            goto LABEL_45;
          goto LABEL_64;
        }
        v33 = (v29 - v28) >> 3;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          goto LABEL_225;
        if ((v136 - v28) >> 2 > v34)
          v34 = (v136 - v28) >> 2;
        if ((unint64_t)(v136 - v28) >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v34)
          goto LABEL_224;
        if (v34 >> 61)
          goto LABEL_226;
        v137 = 8 * v34;
        v35 = operator new(8 * v34);
        v27 = &v35[8 * v33];
        *(_QWORD *)v27 = v30;
        v138 = v27 + 8;
        if (v29 != v28)
        {
          v36 = v29 - v28 - 8;
          if (v36 < 0x168
            || (v37 = (v29 - 8 - v28) & 0xFFFFFFFFFFFFFFF8, &v35[v29 - v28 - 8 - v37] > &v35[v29 - v28 - 8])
            || &v29[-v37 - 8] > v29 - 8
            || (unint64_t)(v28 - v35) < 0x20)
          {
            v38 = v29;
            v23 = (_QWORD *)(v12 + 24);
            v39 = v137;
            goto LABEL_60;
          }
          v41 = (v36 >> 3) + 1;
          v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
          v38 = &v29[-v42];
          v27 -= v42;
          v43 = &v35[8 * v33 - 16];
          v44 = v29 - 16;
          v45 = v41 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v46 = *(_OWORD *)v44;
            *(v43 - 1) = *((_OWORD *)v44 - 1);
            *v43 = v46;
            v43 -= 2;
            v44 -= 32;
            v45 -= 4;
          }
          while (v45);
          v23 = (_QWORD *)(v12 + 24);
          v39 = v137;
          if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_60:
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v27 - 1) = v40;
              v27 -= 8;
            }
            while (v38 != v28);
          }
          v136 = &v35[v39];
          if (!v28)
            goto LABEL_63;
LABEL_62:
          operator delete(v28);
          goto LABEL_63;
        }
        v23 = (_QWORD *)(v12 + 24);
        v136 = &v35[v137];
        if (v28)
          goto LABEL_62;
LABEL_63:
        v29 = v138;
        v28 = v27;
        v31 = (_QWORD *)v18[1];
        if (v31)
        {
          do
          {
LABEL_45:
            v32 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
          goto LABEL_39;
        }
        do
        {
LABEL_64:
          v32 = (_QWORD *)v18[2];
          v90 = *v32 == (_QWORD)v18;
          v18 = v32;
        }
        while (!v90);
LABEL_39:
        v18 = v32;
      }
      while (v32 != v23);
      v4 = a2;
      v3 = v129;
      v7 = v131;
      v17 = v12 + 16;
      if (!v12)
      {
LABEL_134:
        v86 = v27;
        if (v27 != v138)
          goto LABEL_146;
        goto LABEL_137;
      }
      do
      {
LABEL_129:
        v82 = __ldaxr((unsigned int *)v12);
        v83 = v82 - 1;
      }
      while (__stlxr(v83, (unsigned int *)v12));
      if (!v83)
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v17, *(char **)(v12 + 24));
        MEMORY[0x20BD0ADEC](v12, 0x1020C4043D65406);
      }
      do
      {
        v84 = __ldaxr((unsigned int *)v12);
        v85 = v84 - 1;
      }
      while (__stlxr(v85, (unsigned int *)v12));
      if (v85)
        goto LABEL_134;
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v17, *(char **)(v12 + 24));
      MEMORY[0x20BD0ADEC](v12, 0x1020C4043D65406);
      v86 = v27;
      if (v27 != v138)
      {
LABEL_146:
        do
        {
          v88 = *(_QWORD *)v86;
          if (!*(_BYTE *)(*(_QWORD *)v86 + 44))
            goto LABEL_224;
          v89 = v14;
          if (v14 != v15)
          {
            v89 = v14;
            while (1)
            {
              v90 = *((_BYTE *)v89 + 4) && *(_DWORD *)v89 == *(_DWORD *)(v88 + 40);
              if (v90)
                break;
              v89 = (webrtc::RtpEncodingParameters *)((char *)v89 + 272);
              if (v89 == v15)
                goto LABEL_145;
            }
          }
          if (v89 != v15)
          {
            v91 = (__int128 *)(v88 + 8);
            v92 = v148;
            if ((unint64_t)v148 >= v149)
            {
              v87 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t)&v147, (uint64_t)v91);
            }
            else
            {
              if (!v148)
                goto LABEL_224;
              if (*(char *)(v88 + 31) < 0)
              {
                std::string::__init_copy_ctor_external(v148, *(const std::string::value_type **)(v88 + 8), *(_QWORD *)(v88 + 16));
              }
              else
              {
                v93 = *v91;
                v148->__r_.__value_.__r.__words[2] = *(_QWORD *)(v88 + 24);
                *(_OWORD *)&v92->__r_.__value_.__l.__data_ = v93;
              }
              v87 = v92 + 1;
            }
            v148 = v87;
          }
LABEL_145:
          v86 += 8;
        }
        while (v86 != v138);
      }
LABEL_137:
      if (v27)
        operator delete(v27);
      if (v14)
      {
        while (v15 != v14)
        {
          v15 = (webrtc::RtpEncodingParameters *)((char *)v15 - 272);
          webrtc::RtpEncodingParameters::~RtpEncodingParameters(v15);
        }
LABEL_172:
        operator delete(v14);
      }
LABEL_173:
      if (v147 == v148)
      {
        v117 = *(_QWORD *)(v12 + 8);
        v118 = operator new();
        v103 = (void *)v118;
        *(_DWORD *)v118 = 0;
        *(_QWORD *)(v118 + 32) = 0;
        *(_QWORD *)(v118 + 24) = 0;
        *(_QWORD *)(v118 + 8) = v117;
        *(_QWORD *)(v118 + 16) = v118 + 24;
        v104 = v134;
        do
          v119 = __ldxr((unsigned int *)v118);
        while (__stxr(v119 + 1, (unsigned int *)v118));
LABEL_197:
        v110 = v135;
        v111 = v147;
        if (v147)
          goto LABEL_198;
        goto LABEL_205;
      }
      v99 = v7;
      webrtc::RTCStatsReport::Copy((webrtc::RTCStatsReport *)v12, v143);
      v100 = (unsigned int *)v143[0];
      v101 = *((_QWORD *)v143[0] + 1);
      v102 = operator new();
      v103 = (void *)v102;
      *(_DWORD *)v102 = 0;
      *(_QWORD *)(v102 + 32) = 0;
      *(_QWORD *)(v102 + 24) = 0;
      *(_QWORD *)(v102 + 8) = v101;
      *(_QWORD *)(v102 + 16) = v102 + 24;
      v104 = v134;
      do
        v105 = __ldxr((unsigned int *)v102);
      while (__stxr(v105 + 1, (unsigned int *)v102));
      v106 = v147;
      v107 = v148;
      if (v147 != v148)
      {
        do
        while (v106 != v107);
        if (!v100)
        {
          v7 = v99;
          v110 = v135;
          v111 = v147;
          if (!v147)
            goto LABEL_205;
          goto LABEL_198;
        }
      }
      do
      {
        v108 = __ldaxr(v100);
        v109 = v108 - 1;
      }
      while (__stlxr(v109, v100));
      v7 = v99;
      if (v109)
        goto LABEL_197;
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy((uint64_t)(v100 + 4), *((char **)v100 + 3));
      MEMORY[0x20BD0ADEC](v100, 0x1020C4043D65406);
      v110 = v135;
      v111 = v147;
      if (!v147)
        goto LABEL_205;
LABEL_198:
      v120 = v148;
      v121 = v111;
      if (v148 != v111)
      {
        do
        {
          if (SHIBYTE(v120[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v120[-1].__r_.__value_.__l.__data_);
          --v120;
        }
        while (v120 != v111);
        v121 = v147;
      }
      v148 = v111;
      operator delete(v121);
LABEL_205:
      v143[0] = v103;
      ((void (*)(void (***)(_QWORD), void **))(*v104)[4])(v104, v143);
      v122 = v143[0];
      if (v143[0])
      {
        do
        {
          v123 = __ldaxr((unsigned int *)v122);
          v124 = v123 - 1;
        }
        while (__stlxr(v124, (unsigned int *)v122));
        if (!v124)
        {
          std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy((uint64_t)v122 + 16, *((char **)v122 + 3));
          MEMORY[0x20BD0ADEC](v122, 0x1020C4043D65406);
        }
      }
      if (v139)
        (*v139)[1](v139);
      if (v7)
        (*v7)[1](v7);
      if (v12)
      {
        do
        {
          v125 = __ldaxr((unsigned int *)v12);
          v126 = v125 - 1;
        }
        while (__stlxr(v126, (unsigned int *)v12));
        if (!v126)
        {
          std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v12 + 16, *(char **)(v12 + 24));
          MEMORY[0x20BD0ADEC](v12, 0x1020C4043D65406);
        }
      }
      result = ((uint64_t (*)(_QWORD))(*v104)[1])(v104);
      if (v110)
        result = ((uint64_t (*)(_QWORD))(*v110)[1])(v110);
      if (v7)
        goto LABEL_4;
LABEL_5:
      v3 += 8;
      if (v3 == v133)
        return result;
    }
    v10 = 0;
    v7 = 0;
    v8 = 0;
    v9 = (void (***)(_QWORD))*((_QWORD *)v3 + 3);
    v6 = v9;
    if (!v9)
      goto LABEL_14;
LABEL_13:
    (**v9)(v9);
    v7 = v10;
    v8 = v6;
    goto LABEL_14;
  }
  return result;
}

void webrtc::RTCStatsCollector::MergeNetworkReport_s(webrtc::RTCStatsCollector *this)
{
  TimeDelta v2;
  TimeDelta v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  int *v28;
  __int128 v29;
  unsigned int *v30;
  unsigned int v31;
  int *i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int *v39;
  int *v40;
  __int128 v41;
  unsigned int *v42;
  uint64_t v43;

  v2.var0 = 0x7FFFFFFFFFFFFFFFLL;
  v3.var0 = 3000000;
  rtc::Event::Wait((webrtc::RTCStatsCollector *)((char *)this + 96), v2, v3);
  v4 = *((_QWORD *)this + 11);
  if (v4)
  {
    v5 = *((_QWORD *)this + 7);
    do
      v6 = __ldxr((unsigned int *)v4);
    while (__stxr(v6 + 1, (unsigned int *)v4));
    v7 = *(char ***)(v4 + 16);
    if (v7 == (char **)(v4 + 24))
    {
      v8 = *v7;
    }
    else
    {
      do
      {
        v9 = (uint64_t)v7[7];
        v7[7] = 0;
        v43 = v9;
        webrtc::RTCStatsReport::AddStats(v5, &v43);
        v10 = v43;
        v43 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        v11 = v7[1];
        if (v11)
        {
          do
          {
            v7 = (char **)v11;
            v11 = *(char **)v11;
          }
          while (v11);
          v8 = 0;
        }
        else
        {
          do
          {
            v8 = (char *)v7;
            v7 = (char **)v7[2];
          }
          while (*v7 != v8);
        }
      }
      while (v7 != (char **)(v4 + 24));
      v7 = (char **)(v4 + 24);
    }
    std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v4 + 16, v8);
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 16) = v7;
    *v7 = 0;
    do
      v12 = __ldaxr((unsigned int *)v4);
    while (__stlxr(v12 - 1, (unsigned int *)v4));
    if (v12 == 1)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v4 + 16, *(char **)(v4 + 24));
      MEMORY[0x20BD0ADEC](v4, 0x1020C4043D65406);
    }
    v13 = *((_QWORD *)this + 11);
    if (v13)
    {
      do
      {
        v14 = __ldaxr((unsigned int *)v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)v13));
      if (!v15)
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v13 + 16, *(char **)(v13 + 24));
        MEMORY[0x20BD0ADEC](v13, 0x1020C4043D65406);
      }
    }
    *((_QWORD *)this + 11) = 0;
    --*((_DWORD *)this + 10);
    v16 = (unsigned int *)*((_QWORD *)this + 7);
    *((_QWORD *)this + 51) = *((_QWORD *)this + 6);
    if (v16)
    {
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = *((_QWORD *)this + 53);
    if (v18)
    {
      do
      {
        v19 = __ldaxr((unsigned int *)v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, (unsigned int *)v18));
      if (!v20)
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v18 + 16, *(char **)(v18 + 24));
        MEMORY[0x20BD0ADEC](v18, 0x1020C4043D65406);
      }
    }
    *((_QWORD *)this + 53) = v16;
    v21 = *((_QWORD *)this + 7);
    if (v21)
    {
      do
      {
        v22 = __ldaxr((unsigned int *)v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, (unsigned int *)v21));
      if (!v23)
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v21 + 16, *(char **)(v21 + 24));
        MEMORY[0x20BD0ADEC](v21, 0x1020C4043D65406);
      }
    }
    *((_QWORD *)this + 7) = 0;
    v25 = (_QWORD *)*((_QWORD *)this + 27);
    v24 = (_QWORD *)*((_QWORD *)this + 28);
    if (v24 != v25)
    {
      v26 = v24 - 69;
      do
      {
        webrtc::TrackMediaInfoMap::~TrackMediaInfoMap((webrtc::TrackMediaInfoMap *)(v26 + 10));
        if (*((_BYTE *)v26 + 72) && *((char *)v26 + 71) < 0)
        {
          operator delete((void *)v26[6]);
          if (*((_BYTE *)v26 + 40))
          {
LABEL_39:
            if (*((char *)v26 + 39) < 0)
              operator delete((void *)v26[2]);
          }
        }
        else if (*((_BYTE *)v26 + 40))
        {
          goto LABEL_39;
        }
        if (*v26)
          (*(void (**)(_QWORD))(*(_QWORD *)*v26 + 8))(*v26);
        v27 = v26 == v25;
        v26 -= 69;
      }
      while (!v27);
    }
    *((_QWORD *)this + 28) = v25;
    v28 = (int *)*((_QWORD *)this + 8);
    v29 = *(_OWORD *)((char *)this + 72);
    *((_QWORD *)this + 8) = 0;
    *((_QWORD *)this + 9) = 0;
    *((_QWORD *)this + 10) = 0;
    v30 = (unsigned int *)*((_QWORD *)this + 53);
    v42 = v30;
    if (v30)
    {
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
    }
    v40 = v28;
    v41 = v29;
    v39 = (int *)v29;
    webrtc::RTCStatsCollector::DeliverCachedReport((uint64_t)this, (uint64_t *)&v42, &v40);
    if (v28)
    {
      for (i = v39; i != v28; i -= 8)
      {
        v33 = *((_QWORD *)i - 1);
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
        v34 = *((_QWORD *)i - 2);
        if (v34)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        v35 = *((_QWORD *)i - 3);
        if (v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      }
      *(_QWORD *)&v41 = v28;
      operator delete(v28);
    }
    v36 = (uint64_t)v42;
    if (v42)
    {
      do
      {
        v37 = __ldaxr((unsigned int *)v36);
        v38 = v37 - 1;
      }
      while (__stlxr(v38, (unsigned int *)v36));
      if (!v38)
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v36 + 16, *(char **)(v36 + 24));
        MEMORY[0x20BD0ADEC](v36, 0x1020C4043D65406);
      }
    }
  }
}

_BYTE *webrtc::RTCStatsCollector::ProducePartialResultsOnSignalingThreadImpl(webrtc::RTCStatsCollector *this, Timestamp a2, webrtc::RTCStatsReport *a3)
{
  rtc::Thread *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (***v13)(_QWORD);
  uint64_t v14;
  void **v15;
  void *v16;
  int v17;
  int v18;
  _BOOL4 v20;
  uint64_t v21;
  int v22;
  char *v23;
  size_t v24;
  size_t v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  size_t v30;
  size_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::value_type *v38;
  int v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  std::string::size_type v43;
  std::string::value_type *v44;
  int v45;
  char v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  unsigned int v51;
  BOOL v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  _QWORD *v57;
  unsigned int v58;
  BOOL v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  void **v63;
  void **v64;
  std::string::size_type v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t **v68;
  size_t v69;
  unint64_t v70;
  void **v71;
  BOOL v72;
  char v73;
  void **v74;
  size_t v75;
  const void **v76;
  size_t v77;
  const void *v78;
  size_t v79;
  size_t v80;
  int v81;
  void **v82;
  size_t v83;
  size_t v84;
  int v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  char v94;
  char *v95;
  uint64_t v96;
  int v97;
  rtc::Thread *v98;
  _BYTE *result;
  _BYTE *v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  char v109;
  rtc::Thread *v110;
  webrtc::RTCStatsCollector *v111;
  char v112;
  size_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  webrtc::RTCStatsReport *v119;
  uint64_t **v120;
  char *v122;
  char *v123;
  void *v124;
  size_t v125;
  unint64_t v126;
  uint64_t v127;
  std::string __s;
  void *__p[2];
  __int128 v130;
  uint64_t v131;
  char v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  v5 = (rtc::Thread *)rtc::Thread::Current(this);
  v109 = *((_BYTE *)v5 + 217);
  v110 = v5;
  *((_BYTE *)v5 + 217) = 0;
  v6 = (size_t)rtc::Thread::Current(v5);
  v112 = *(_BYTE *)(v6 + 217);
  v113 = v6;
  *(_BYTE *)(v6 + 217) = 0;
  v7 = (_QWORD *)*((_QWORD *)this + 27);
  v8 = (_QWORD *)*((_QWORD *)this + 28);
  v111 = this;
  if (v7 != v8)
  {
    v120 = (uint64_t **)((char *)a3 + 24);
    v119 = a3;
    v108 = (_QWORD *)*((_QWORD *)this + 28);
    do
    {
      v9 = *(_QWORD *)(*v7 + 32);
      v10 = *(_QWORD *)(*v7 + 40);
      v6 = v10 - v9;
      if (v10 != v9)
      {
        if ((v6 & 0x8000000000000000) != 0)
          goto LABEL_195;
        v11 = (char *)operator new(v6);
        v12 = 0;
        do
        {
          v13 = *(void (****)(_QWORD))(v9 + v12);
          *(_QWORD *)&v11[v12] = v13;
          if (v13)
            (**v13)(v13);
          v12 += 8;
        }
        while (v9 + v12 != v10);
        if (v12)
        {
          v114 = v12 >> 3;
          v115 = v11;
          v122 = &v11[v12 & 0xFFFFFFFFFFFFFFF8];
          v116 = v7;
          v117 = v7 + 57;
          v118 = v7 + 63;
          while (2)
          {
            v14 = *(_QWORD *)(*(_QWORD *)v11 + 24);
            (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v14 + 40))(&v127, v14);
            if (!v127)
              goto LABEL_13;
            (*(void (**)(void **__return_ptr))(*(_QWORD *)v127 + 32))(__p);
            if (SBYTE7(v130) < 0)
            {
              v16 = __p[1];
              if (((unint64_t)__p[1] & 0x8000000000000000) != 0)
                goto LABEL_194;
              v15 = (void **)__p[0];
              if (__p[1])
              {
                if (!__p[0])
                  goto LABEL_194;
              }
            }
            else
            {
              v15 = __p;
              v16 = (void *)BYTE7(v130);
            }
            if (v16 == (void *)5)
            {
              v17 = *(_DWORD *)v15;
              v18 = *((unsigned __int8 *)v15 + 4);
              v20 = v17 == *(_DWORD *)"audio" && v18 == cricket::kMediaTypeAudio[4];
              if ((BYTE7(v130) & 0x80) != 0)
              {
LABEL_36:
                operator delete(__p[0]);
                if (!v20)
                {
LABEL_37:
                  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 272))(v14);
                  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                  strcpy((char *)__p, "SV");
                  *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = xmmword_208F1A070;
                  rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", v28);
                  v29 = (char *)__s.__r_.__value_.__r.__words[0];
                  if (!__s.__r_.__value_.__r.__words[0])
                    goto LABEL_194;
                  v30 = strlen(__s.__r_.__value_.__l.__data_);
                  if (v30 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_195;
                  v31 = v30;
                  if (v30 > 0x16)
                  {
                    v41 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v30 | 7) != 0x17)
                      v41 = v30 | 7;
                    v42 = v41 + 1;
                    v32 = (char *)operator new(v41 + 1);
                    v125 = v31;
                    v126 = v42 | 0x8000000000000000;
                    v124 = v32;
                    v33 = &v32[v31];
                    if (v32 <= v29)
                      goto LABEL_53;
                  }
                  else
                  {
                    HIBYTE(v126) = v30;
                    v32 = (char *)&v124;
                    v33 = (char *)&v124 + v31;
                    if ((unint64_t)&v124 > __s.__r_.__value_.__r.__words[0])
                      goto LABEL_54;
LABEL_53:
                    if (v33 > v29)
                      goto LABEL_194;
                  }
LABEL_54:
                  if (v31)
                    memmove(v32, v29, v31);
                  *v33 = 0;
                  v36 = operator new();
                  v44 = (std::string::value_type *)v124;
                  v43 = v125;
                  LODWORD(__p[0]) = v126;
                  *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v126 + 3);
                  v45 = SHIBYTE(v126);
                  v124 = 0;
                  v125 = 0;
                  v126 = 0;
                  *(_QWORD *)v36 = &unk_24C0BC140;
                  if (v45 < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)(v36 + 8), v44, v43);
                    *(Timestamp *)(v36 + 32) = a2;
                    *(_QWORD *)v36 = off_24C0BC768;
                    *(_BYTE *)(v36 + 40) = 0;
                    *(_BYTE *)(v36 + 64) = 0;
                    *(_BYTE *)(v36 + 72) = 0;
                    *(_BYTE *)(v36 + 96) = 0;
                    operator delete(v44);
                    v46 = HIBYTE(v126);
                  }
                  else
                  {
                    v46 = 0;
                    *(_QWORD *)(v36 + 8) = v44;
                    *(_QWORD *)(v36 + 16) = v43;
                    *(_DWORD *)(v36 + 24) = __p[0];
                    *(_DWORD *)(v36 + 27) = *(_DWORD *)((char *)__p + 3);
                    *(_BYTE *)(v36 + 31) = v45;
                    *(Timestamp *)(v36 + 32) = a2;
                    *(_BYTE *)(v36 + 40) = 0;
                    *(_BYTE *)(v36 + 64) = 0;
                    *(_BYTE *)(v36 + 72) = 0;
                    *(_BYTE *)(v36 + 96) = 0;
                  }
                  *(_QWORD *)v36 = off_24C0BC7D8;
                  *(_BYTE *)(v36 + 104) = 0;
                  *(_BYTE *)(v36 + 108) = 0;
                  *(_BYTE *)(v36 + 112) = 0;
                  *(_BYTE *)(v36 + 116) = 0;
                  *(_BYTE *)(v36 + 120) = 0;
                  *(_BYTE *)(v36 + 124) = 0;
                  *(_BYTE *)(v36 + 128) = 0;
                  *(_BYTE *)(v36 + 136) = 0;
                  if (v46 < 0)
                  {
                    operator delete(v124);
                    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 88))(v127);
                    if (!v47)
                      goto LABEL_95;
                  }
                  else
                  {
                    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 88))(v127);
                    if (!v47)
                    {
LABEL_95:
                      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14))
                      {
                        v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
                        v56 = *v118;
                        if (*v118)
                        {
                          v57 = v118;
                          do
                          {
                            v58 = *(_DWORD *)(v56 + 32);
                            v59 = v58 >= v55;
                            if (v58 >= v55)
                              v60 = (uint64_t *)v56;
                            else
                              v60 = (uint64_t *)(v56 + 8);
                            if (v59)
                              v57 = (_QWORD *)v56;
                            v56 = *v60;
                          }
                          while (*v60);
                          if (v57 != v118 && *((_DWORD *)v57 + 8) <= v55)
                          {
                            v61 = v57[5];
                            if (v61)
                            {
                              *(_QWORD *)(v36 + 128) = *(_QWORD *)(v61 + 280);
                              *(_BYTE *)(v36 + 136) = 1;
                              v62 = *(_DWORD *)(v61 + 272);
                              if (!*(_BYTE *)(v36 + 124))
                                *(_BYTE *)(v36 + 124) = 1;
                              *(_DWORD *)(v36 + 120) = v62;
                            }
                          }
                        }
                      }
                      goto LABEL_111;
                    }
                  }
                  if (!(*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)v47 + 64))(v47, __p))
                    goto LABEL_95;
                  if (*(_BYTE *)(v36 + 108))
                  {
                    *(_DWORD *)(v36 + 104) = __p[0];
                    if (*(_BYTE *)(v36 + 116))
                    {
LABEL_94:
                      *(_DWORD *)(v36 + 112) = HIDWORD(__p[0]);
                      goto LABEL_95;
                    }
                  }
                  else
                  {
                    *(_BYTE *)(v36 + 108) = 1;
                    *(_DWORD *)(v36 + 104) = __p[0];
                    if (*(_BYTE *)(v36 + 116))
                      goto LABEL_94;
                  }
                  *(_BYTE *)(v36 + 116) = 1;
                  goto LABEL_94;
                }
LABEL_31:
                v21 = v127;
                v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 272))(v14);
                __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
                strcpy((char *)__p, "SA");
                *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = xmmword_208F1A070;
                rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", v22);
                v23 = (char *)__s.__r_.__value_.__r.__words[0];
                if (!__s.__r_.__value_.__r.__words[0])
                  goto LABEL_194;
                v24 = strlen(__s.__r_.__value_.__l.__data_);
                if (v24 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_195;
                v25 = v24;
                if (v24 > 0x16)
                {
                  v34 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v24 | 7) != 0x17)
                    v34 = v24 | 7;
                  v35 = v34 + 1;
                  v26 = (char *)operator new(v34 + 1);
                  v125 = v25;
                  v126 = v35 | 0x8000000000000000;
                  v124 = v26;
                  v27 = &v26[v25];
                  if (v26 <= v23)
                    goto LABEL_45;
                }
                else
                {
                  HIBYTE(v126) = v24;
                  v26 = (char *)&v124;
                  v27 = (char *)&v124 + v25;
                  if ((unint64_t)&v124 > __s.__r_.__value_.__r.__words[0])
                    goto LABEL_46;
LABEL_45:
                  if (v27 > v23)
                    goto LABEL_194;
                }
LABEL_46:
                if (v25)
                  memmove(v26, v23, v25);
                *v27 = 0;
                v36 = operator new();
                v38 = (std::string::value_type *)v124;
                v37 = v125;
                LODWORD(__p[0]) = v126;
                *(_DWORD *)((char *)__p + 3) = *(_DWORD *)((char *)&v126 + 3);
                v39 = SHIBYTE(v126);
                v124 = 0;
                v125 = 0;
                v126 = 0;
                *(_QWORD *)v36 = &unk_24C0BC140;
                if (v39 < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)(v36 + 8), v38, v37);
                  *(Timestamp *)(v36 + 32) = a2;
                  *(_QWORD *)v36 = off_24C0BC768;
                  *(_BYTE *)(v36 + 40) = 0;
                  *(_BYTE *)(v36 + 64) = 0;
                  *(_BYTE *)(v36 + 72) = 0;
                  *(_BYTE *)(v36 + 96) = 0;
                  operator delete(v38);
                  v40 = HIBYTE(v126);
                }
                else
                {
                  v40 = 0;
                  *(_QWORD *)(v36 + 8) = v38;
                  *(_QWORD *)(v36 + 16) = v37;
                  *(_DWORD *)(v36 + 24) = __p[0];
                  *(_DWORD *)(v36 + 27) = *(_DWORD *)((char *)__p + 3);
                  *(_BYTE *)(v36 + 31) = v39;
                  *(Timestamp *)(v36 + 32) = a2;
                  *(_BYTE *)(v36 + 40) = 0;
                  *(_BYTE *)(v36 + 64) = 0;
                  *(_BYTE *)(v36 + 72) = 0;
                  *(_BYTE *)(v36 + 96) = 0;
                }
                *(_QWORD *)v36 = off_24C0BC7A0;
                *(_BYTE *)(v36 + 104) = 0;
                *(_BYTE *)(v36 + 112) = 0;
                *(_BYTE *)(v36 + 120) = 0;
                *(_BYTE *)(v36 + 128) = 0;
                *(_BYTE *)(v36 + 136) = 0;
                *(_BYTE *)(v36 + 144) = 0;
                *(_BYTE *)(v36 + 152) = 0;
                *(_BYTE *)(v36 + 160) = 0;
                *(_BYTE *)(v36 + 168) = 0;
                *(_BYTE *)(v36 + 176) = 0;
                if (v40 < 0)
                {
                  operator delete(v124);
                  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14))
                    goto LABEL_83;
                }
                else if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14))
                {
LABEL_83:
                  (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v21 + 104))(&__s, v21);
                  if (__s.__r_.__value_.__r.__words[0])
                  {
                    (*(void (**)(void **__return_ptr, std::string::size_type, _QWORD))(*(_QWORD *)__s.__r_.__value_.__l.__data_
                                                                                                + 32))(__p, __s.__r_.__value_.__r.__words[0], 0);
                    if (BYTE8(v130))
                    {
                      *(_QWORD *)(v36 + 152) = v130;
                      *(_BYTE *)(v36 + 160) = 1;
                    }
                    if (v132)
                    {
                      *(_QWORD *)(v36 + 168) = v131;
                      *(_BYTE *)(v36 + 176) = 1;
                    }
                    if (__s.__r_.__value_.__r.__words[0])
                      (*(void (**)(std::string::size_type))(*(_QWORD *)__s.__r_.__value_.__l.__data_ + 8))(__s.__r_.__value_.__r.__words[0]);
                  }
LABEL_111:
                  (*(void (**)(void **__return_ptr))(*(_QWORD *)v127 + 40))(__p);
                  v63 = (void **)(v36 + 40);
                  if (*(_BYTE *)(v36 + 64))
                  {
                    if (*(char *)(v36 + 63) < 0)
                      operator delete(*v63);
                    *(_OWORD *)v63 = *(_OWORD *)__p;
                    *(_QWORD *)(v36 + 56) = v130;
                  }
                  else
                  {
                    *(_OWORD *)v63 = *(_OWORD *)__p;
                    *(_QWORD *)(v36 + 56) = v130;
                    *(_BYTE *)(v36 + 64) = 1;
                  }
                  (*(void (**)(void **__return_ptr))(*(_QWORD *)v127 + 32))(__p);
                  v64 = (void **)(v36 + 72);
                  if (*(_BYTE *)(v36 + 96))
                  {
                    if (*(char *)(v36 + 95) < 0)
                      operator delete(*v64);
                    *(_OWORD *)v64 = *(_OWORD *)__p;
                    *(_QWORD *)(v36 + 88) = v130;
                    v123 = v11;
                    if ((*(char *)(v36 + 31) & 0x80000000) == 0)
                    {
LABEL_120:
                      __s = *(std::string *)(v36 + 8);
                      goto LABEL_123;
                    }
                  }
                  else
                  {
                    *(_OWORD *)v64 = *(_OWORD *)__p;
                    *(_QWORD *)(v36 + 88) = v130;
                    *(_BYTE *)(v36 + 96) = 1;
                    v123 = v11;
                    if ((*(char *)(v36 + 31) & 0x80000000) == 0)
                      goto LABEL_120;
                  }
                  std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v36 + 8), *(_QWORD *)(v36 + 16));
LABEL_123:
                  *(_OWORD *)__p = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                  v65 = __s.__r_.__value_.__r.__words[2];
                  memset(&__s, 0, sizeof(__s));
                  *(_QWORD *)&v130 = v65;
                  *((_QWORD *)&v130 + 1) = v36;
                  v66 = v120;
                  v67 = *v120;
                  v68 = v120;
                  if (*v120)
                  {
                    v69 = BYTE7(v130);
                    v71 = (void **)__p[0];
                    v70 = (unint64_t)__p[1];
                    if (__p[1])
                      v72 = __p[0] == 0;
                    else
                      v72 = 0;
                    v73 = !v72;
                    while (1)
                    {
                      v66 = (uint64_t **)v67;
                      if ((v69 & 0x80) != 0)
                      {
                        if ((v70 & 0x8000000000000000) != 0)
                          goto LABEL_194;
                        v74 = v71;
                        v75 = v70;
                        if ((v73 & 1) == 0)
                          goto LABEL_194;
                      }
                      else
                      {
                        v74 = __p;
                        v75 = v69;
                      }
                      v76 = (const void **)(v67 + 4);
                      v77 = *((unsigned __int8 *)v67 + 55);
                      v78 = v67 + 4;
                      v79 = v77;
                      if (*((char *)v67 + 55) < 0)
                      {
                        v79 = v67[5];
                        if ((v79 & 0x8000000000000000) != 0)
                          goto LABEL_194;
                        v78 = *v76;
                        if (v79)
                        {
                          if (!v78)
                            goto LABEL_194;
                        }
                      }
                      if (v79 >= v75)
                        v80 = v75;
                      else
                        v80 = v79;
                      v81 = memcmp(v74, v78, v80);
                      if (v81)
                      {
                        if (v81 < 0)
                          goto LABEL_130;
LABEL_146:
                        if ((v77 & 0x80) != 0)
                        {
                          v77 = (size_t)v66[5];
                          if ((v77 & 0x8000000000000000) != 0)
                            goto LABEL_194;
                          v76 = (const void **)*v76;
                          if (v77)
                          {
                            if (!v76)
                              goto LABEL_194;
                          }
                        }
                        if ((v69 & 0x80) != 0)
                        {
                          if ((v70 & 0x8000000000000000) != 0)
                            goto LABEL_194;
                          v82 = v71;
                          v83 = v70;
                          if ((v73 & 1) == 0)
                            goto LABEL_194;
                        }
                        else
                        {
                          v82 = __p;
                          v83 = v69;
                        }
                        if (v83 >= v77)
                          v84 = v77;
                        else
                          v84 = v83;
                        v85 = memcmp(v76, v82, v84);
                        if (v85)
                        {
                          if ((v85 & 0x80000000) == 0)
                            goto LABEL_171;
                        }
                        else if (v77 >= v83)
                        {
LABEL_171:
                          *((_QWORD *)&v130 + 1) = 0;
                          a3 = v119;
                          v11 = v123;
                          goto LABEL_172;
                        }
                        v67 = v66[1];
                        if (!v67)
                        {
                          v68 = v66 + 1;
                          break;
                        }
                      }
                      else
                      {
                        if (v75 >= v79)
                          goto LABEL_146;
LABEL_130:
                        v67 = *v66;
                        v68 = v66;
                        if (!*v66)
                          break;
                      }
                    }
                  }
                  v86 = operator new(0x40uLL);
                  v86[2] = *(_OWORD *)__p;
                  v87 = v130;
                  *(_OWORD *)__p = 0u;
                  v130 = 0u;
                  *((_QWORD *)v86 + 6) = v87;
                  *((_QWORD *)v86 + 7) = v36;
                  *(_QWORD *)v86 = 0;
                  *((_QWORD *)v86 + 1) = 0;
                  *((_QWORD *)v86 + 2) = v66;
                  *v68 = (uint64_t *)v86;
                  a3 = v119;
                  v88 = **((_QWORD **)v119 + 2);
                  if (v88)
                  {
                    *((_QWORD *)v119 + 2) = v88;
                    v89 = *v68;
                  }
                  else
                  {
                    v89 = (uint64_t *)v86;
                  }
                  v11 = v123;
                  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*((uint64_t **)v119 + 3), v89);
                  ++*((_QWORD *)v119 + 4);
                  v36 = *((_QWORD *)&v130 + 1);
                  *((_QWORD *)&v130 + 1) = 0;
                  if (v36)
                  {
LABEL_172:
                    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
                    if ((SBYTE7(v130) & 0x80000000) == 0)
                      goto LABEL_168;
                  }
                  else if ((SBYTE7(v130) & 0x80000000) == 0)
                  {
LABEL_168:
                    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                      goto LABEL_169;
                    goto LABEL_174;
                  }
                  operator delete(__p[0]);
                  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  {
LABEL_169:
                    v90 = v127;
                    if (!v127)
                      goto LABEL_13;
LABEL_175:
                    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
                    goto LABEL_13;
                  }
LABEL_174:
                  operator delete(__s.__r_.__value_.__l.__data_);
                  v90 = v127;
                  if (v127)
                    goto LABEL_175;
LABEL_13:
                  v11 += 8;
                  if (v11 == v122)
                  {
                    v11 = v115;
                    v91 = 8 * v114;
                    v7 = v116;
                    v8 = v108;
                    do
                    {
                      v92 = *(_QWORD *)&v115[v91 - 8];
                      if (v92)
                        (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
                      v91 -= 8;
                    }
                    while (v91);
                    goto LABEL_3;
                  }
                  continue;
                }
                v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14);
                v49 = *v117;
                if (*v117)
                {
                  v50 = v117;
                  do
                  {
                    v51 = *(_DWORD *)(v49 + 32);
                    v52 = v51 >= v48;
                    if (v51 >= v48)
                      v53 = (uint64_t *)v49;
                    else
                      v53 = (uint64_t *)(v49 + 8);
                    if (v52)
                      v50 = (_QWORD *)v49;
                    v49 = *v53;
                  }
                  while (*v53);
                  if (v50 != v117 && *((_DWORD *)v50 + 8) <= v48)
                  {
                    v54 = v50[5];
                    if (v54)
                    {
                      *(double *)(v36 + 104) = (double)*(int *)(v54 + 204) / 32767.0;
                      *(_BYTE *)(v36 + 112) = 1;
                      *(_QWORD *)(v36 + 120) = *(_QWORD *)(v54 + 208);
                      *(_BYTE *)(v36 + 128) = 1;
                      *(_QWORD *)(v36 + 136) = *(_QWORD *)(v54 + 216);
                      *(_BYTE *)(v36 + 144) = 1;
                      if (*(_BYTE *)(v54 + 296))
                      {
                        *(_QWORD *)(v36 + 152) = *(_QWORD *)(v54 + 288);
                        *(_BYTE *)(v36 + 160) = 1;
                      }
                      if (*(_BYTE *)(v54 + 312))
                      {
                        *(_QWORD *)(v36 + 168) = *(_QWORD *)(v54 + 304);
                        *(_BYTE *)(v36 + 176) = 1;
                      }
                    }
                  }
                }
                goto LABEL_83;
              }
            }
            else
            {
              v20 = 0;
              if ((BYTE7(v130) & 0x80) != 0)
                goto LABEL_36;
            }
            break;
          }
          if (!v20)
            goto LABEL_37;
          goto LABEL_31;
        }
LABEL_3:
        operator delete(v11);
      }
      v7 += 69;
    }
    while (v7 != v8);
  }
  *(_BYTE *)(v113 + 217) = v112;
  v93 = rtc::Thread::Current((rtc::Thread *)v6);
  v94 = v93[217];
  v93[217] = 0;
  v95 = (char *)operator new();
  BYTE7(v130) = 1;
  if (__p <= (void **)"P" && (char *)__p + 1 > "P")
    goto LABEL_194;
  LOWORD(__p[0]) = 80;
  v96 = v130;
  *(_OWORD *)(v95 + 8) = *(_OWORD *)__p;
  *((_QWORD *)v95 + 3) = v96;
  *((Timestamp *)v95 + 4) = a2;
  *(_QWORD *)v95 = off_24C0BC618;
  v97 = *((_DWORD *)v111 + 109);
  *((_DWORD *)v95 + 10) = *((_DWORD *)v111 + 108);
  v95[44] = 1;
  *((_DWORD *)v95 + 12) = v97;
  v95[52] = 1;
  __p[0] = v95;
  webrtc::RTCStatsReport::AddStats((uint64_t)a3, (uint64_t *)__p);
  v98 = (rtc::Thread *)__p[0];
  if (__p[0])
    v98 = (rtc::Thread *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
  v93[217] = v94;
  result = rtc::Thread::Current(v98);
  v100 = result;
  v101 = result[217];
  result[217] = 0;
  if (*((_BYTE *)v111 + 400))
  {
    v102 = (char *)operator new();
    BYTE7(v130) = 2;
    {
      strcpy((char *)__p, "AP");
      v103 = v130;
      *(_OWORD *)(v102 + 8) = *(_OWORD *)__p;
      *((_QWORD *)v102 + 3) = v103;
      *((Timestamp *)v102 + 4) = a2;
      *(_QWORD *)v102 = off_24C0BC848;
      v102[63] = 5;
      if (v102 + 40 > "audio" || v102 + 45 <= "audio")
      {
        strcpy(v102 + 40, "audio");
        v102[64] = 1;
        v105 = *((_QWORD *)v111 + 47);
        v104 = *((_QWORD *)v111 + 48);
        v106 = *((_QWORD *)v111 + 49);
        v107 = *((_QWORD *)v111 + 46);
        *((_QWORD *)v102 + 9) = *((_QWORD *)v111 + 45);
        v102[80] = 1;
        *((_QWORD *)v102 + 11) = v107;
        v102[96] = 1;
        *((_QWORD *)v102 + 17) = v106;
        v102[144] = 1;
        *((_QWORD *)v102 + 13) = v105;
        v102[112] = 1;
        *((_QWORD *)v102 + 15) = v104;
        v102[128] = 1;
        __p[0] = v102;
        webrtc::RTCStatsReport::AddStats((uint64_t)a3, (uint64_t *)__p);
        result = __p[0];
        if (__p[0])
          result = (_BYTE *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
        goto LABEL_193;
      }
    }
LABEL_194:
    __break(1u);
LABEL_195:
    abort();
  }
LABEL_193:
  v100[217] = v101;
  *((_BYTE *)v110 + 217) = v109;
  return result;
}

void webrtc::RTCStatsCollector::ProducePartialResultsOnNetworkThreadImpl(uint64_t a1, uint64_t a2)
{
  rtc::Thread *v2;
  const rtc::SSLCertificateStats *v3;
  const rtc::SSLCertificateStats *i;
  _QWORD *v5;
  _QWORD *v6;
  std::string *v7;
  webrtc::_anonymous_namespace_ *v8;
  webrtc::_anonymous_namespace_ *v9;
  rtc::Thread *v10;
  rtc::Thread *v11;
  webrtc::RTCStatsReport *v12;
  rtc::Thread *v13;
  char v14;
  _QWORD *v15;
  std::string *p_sz;
  std::string::size_type *v17;
  std::string *v18;
  int data;
  unint64_t v20;
  const void *v21;
  BOOL v22;
  size_t v23;
  std::string *v24;
  size_t v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  std::string *v30;
  void *v32;
  unint64_t size;
  const void **v34;
  unint64_t v35;
  const void *v36;
  size_t v38;
  size_t v39;
  size_t v40;
  size_t v41;
  const void **v42;
  unint64_t v43;
  const void *v44;
  size_t v45;
  size_t v46;
  std::string::size_type v47;
  std::string *p_s;
  _BYTE *v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t v52;
  std::string::size_type v53;
  std::string *v54;
  std::string *v55;
  size_t v56;
  uint64_t v57;
  std::string *v58;
  char v59;
  __int128 v60;
  __int128 v61;
  const std::string::value_type *v62;
  size_t v63;
  uint64_t v64;
  std::string *v65;
  unint64_t v66;
  char v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  const std::string::value_type *v71;
  size_t v72;
  const std::string::value_type *v73;
  std::string::value_type *v74;
  size_t v75;
  size_t v76;
  const std::string::value_type *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  int v81;
  int v82;
  unint64_t v83;
  int64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  std::string::size_type v93;
  std::string **v94;
  std::string *v95;
  std::string **v96;
  size_t v97;
  __int128 v98;
  BOOL v99;
  char v100;
  std::string *v101;
  size_t v102;
  const void **v103;
  size_t v104;
  std::string::size_type *v105;
  size_t v106;
  size_t v107;
  int v108;
  std::string *v109;
  size_t v110;
  size_t v111;
  int v112;
  std::string::size_type v113;
  uint64_t v114;
  std::string *v115;
  unint64_t v116;
  std::string::size_type v117;
  std::string *v118;
  std::string::size_type v119;
  _BYTE *v120;
  int v121;
  std::string::size_type v122;
  int v123;
  std::string::size_type *v124;
  std::string::size_type v125;
  std::string::size_type v126;
  std::string *v127;
  std::string::size_type v128;
  std::string::size_type v129;
  uint64_t v130;
  std::string::size_type *v131;
  std::string::size_type *v132;
  unint64_t v133;
  std::string::size_type *v134;
  _BOOL4 v136;
  _BOOL4 v138;
  _DWORD *v139;
  _DWORD *v140;
  unint64_t v141;
  size_t v142;
  const void *v143;
  size_t v144;
  BOOL v145;
  int v146;
  unint64_t v147;
  _QWORD *v148;
  size_t v149;
  size_t v151;
  _QWORD *v152;
  size_t v153;
  size_t v155;
  const void *v156;
  _QWORD *v157;
  size_t v158;
  size_t v159;
  uint64_t v160;
  int v161;
  size_t v162;
  unint64_t v163;
  std::string *v164;
  _DWORD *v165;
  std::string::size_type *v166;
  int v167;
  unint64_t v168;
  const void *v169;
  webrtc::_anonymous_namespace_ *v170;
  size_t v172;
  webrtc::RTCInboundRtpStreamStats *v173;
  size_t v174;
  uint64_t *v175;
  webrtc::RTCInboundRtpStreamStats *v176;
  uint64_t v177;
  uint64_t v178;
  webrtc::RTCInboundRtpStreamStats *v179;
  uint64_t v181;
  std::string::pointer v182;
  uint64_t *v183;
  webrtc::RTCInboundRtpStreamStats *v184;
  int v185;
  uint64_t v186;
  std::string::value_type *v187;
  void **v188;
  uint64_t v189;
  const std::string::value_type *v190;
  size_t v191;
  size_t v192;
  const std::string::value_type *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  std::string::value_type *v197;
  const std::string::value_type *v198;
  _DWORD *v199;
  _DWORD *v200;
  char v201;
  __int128 v202;
  uint64_t v203;
  size_t v204;
  size_t v205;
  const std::string::value_type *v206;
  uint64_t v207;
  uint64_t v208;
  __int128 v209;
  const std::string::value_type *v210;
  size_t v211;
  char *v212;
  const char *v213;
  std::string *v214;
  uint64_t v215;
  uint64_t v216;
  size_t v217;
  size_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  _QWORD *v222;
  unint64_t v223;
  size_t v224;
  size_t v225;
  size_t v226;
  size_t v227;
  _QWORD *v228;
  unint64_t v229;
  size_t v230;
  size_t v231;
  std::string::size_type v232;
  std::string *v233;
  _BYTE *v234;
  _BOOL4 v235;
  uint64_t v236;
  uint64_t v237;
  std::string *v238;
  size_t v239;
  std::string *v240;
  size_t v241;
  size_t v242;
  int v243;
  size_t v244;
  std::string *p_len;
  int v246;
  std::string *v247;
  std::string *v248;
  size_t v249;
  size_t v250;
  _BYTE *v251;
  _BOOL4 v252;
  uint64_t v253;
  uint64_t v254;
  std::string *v255;
  const char *v256;
  int v257;
  void *v258;
  std::string *v259;
  size_t v260;
  std::string::size_type v261;
  std::string *v262;
  std::string *v263;
  uint64_t v264;
  uint64_t v265;
  std::string::size_type v266;
  int v267;
  char *v268;
  const char *v269;
  void **v270;
  void **v271;
  std::string::size_type v272;
  uint64_t **v273;
  uint64_t *v274;
  uint64_t **v275;
  size_t v276;
  __int128 v277;
  BOOL v278;
  char v279;
  std::string *v280;
  size_t v281;
  const void **v282;
  size_t v283;
  const void *v284;
  size_t v285;
  size_t v286;
  int v287;
  std::string *v288;
  size_t v289;
  size_t v290;
  int v291;
  _OWORD *v292;
  std::string::size_type v293;
  uint64_t v294;
  uint64_t *v295;
  std::string::size_type *v296;
  uint64_t v297;
  uint64_t v298;
  _BYTE *v300;
  _BYTE *v301;
  uint64_t v303;
  int v304;
  size_t v305;
  unint64_t v306;
  std::string *v307;
  uint64_t v308;
  uint64_t v309;
  _BYTE *v311;
  _BYTE *v312;
  Timestamp v314;
  Timestamp v315;
  _QWORD *v316;
  _QWORD *v317;
  rtc::Thread *v318;
  rtc::Thread *v319;
  uint64_t v320;
  int v321;
  rtc::Thread *v322;
  char v323;
  uint64_t v324;
  unint64_t v325;
  uint64_t *v326;
  _QWORD *v327;
  int *v328;
  uint64_t v329;
  std::string *v330;
  std::string *v331;
  char *v332;
  std::string *v333;
  size_t v334;
  std::string *v335;
  size_t v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  int v340;
  BOOL v341;
  uint64_t *v342;
  void **v343;
  int v344;
  uint64_t v345;
  unint64_t v346;
  double v347;
  int v348;
  char v349;
  _QWORD *v350;
  _QWORD *v351;
  unint64_t v352;
  BOOL v353;
  _QWORD *v354;
  uint64_t v355;
  void **v356;
  BOOL v357;
  BOOL v358;
  char *v359;
  webrtc::RTCInboundRtpStreamStats *v360;
  void **v361;
  webrtc::RTCInboundRtpStreamStats *v362;
  webrtc::RTCRemoteOutboundRtpStreamStats *v363;
  void **v364;
  std::string *v365;
  std::string *v366;
  char v367;
  __int128 v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  __int128 v383;
  const std::string::value_type *v384;
  size_t v385;
  int v386;
  unint64_t v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  uint64_t *v391;
  _QWORD *v392;
  int *v393;
  uint64_t v394;
  std::string *v395;
  std::string *v396;
  size_t v397;
  std::string *v398;
  unint64_t v399;
  char *v400;
  std::string *v401;
  size_t v402;
  uint64_t v403;
  int v404;
  uint64_t v405;
  int v406;
  BOOL v407;
  uint64_t *v408;
  void **v409;
  int v410;
  int v411;
  int v412;
  void **v413;
  uint64_t v414;
  unint64_t v415;
  uint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  double v420;
  unint64_t v421;
  double v422;
  uint64_t v423;
  unint64_t v424;
  double v425;
  char *v426;
  std::string *v427;
  std::string *v428;
  char v429;
  __int128 v430;
  __int128 v431;
  const std::string::value_type *v432;
  size_t v433;
  unsigned __int16 *v434;
  unsigned __int16 *j;
  uint64_t v436;
  unsigned __int16 *v437;
  uint64_t v438;
  int v440;
  int v441;
  BOOL v442;
  uint64_t v443;
  _DWORD *v444;
  _BYTE *v445;
  unsigned __int16 *v446;
  int v447;
  int v448;
  _QWORD *v450;
  _QWORD *v451;
  unint64_t v452;
  BOOL v453;
  _QWORD *v454;
  uint64_t v455;
  char v456;
  webrtc::RTCInboundRtpStreamStats *v457;
  void **v458;
  webrtc::RTCOutboundRtpStreamStats *v459;
  webrtc::RTCRemoteOutboundRtpStreamStats *v460;
  void **v461;
  std::string *v462;
  std::string *v463;
  char v464;
  __int128 v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  void **v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  __int128 v481;
  const std::string::value_type *v482;
  size_t v483;
  _QWORD *v484;
  _QWORD *v485;
  int *v486;
  std::string::size_type v487;
  _DWORD *v488;
  uint64_t v489;
  uint64_t v490;
  unint64_t v491;
  double v492;
  std::string *v493;
  std::string *v494;
  char *v495;
  std::string *v496;
  size_t v497;
  std::string *v498;
  size_t v499;
  double v500;
  uint64_t v501;
  int v502;
  _QWORD *v503;
  int v504;
  BOOL v505;
  uint64_t *v506;
  void **v507;
  _QWORD *v508;
  _QWORD *v509;
  unint64_t v510;
  BOOL v511;
  _QWORD *v512;
  unint64_t v513;
  char v514;
  _QWORD *v515;
  unint64_t v516;
  unint64_t v517;
  BOOL v518;
  _QWORD *v519;
  void **v520;
  webrtc::RTCOutboundRtpStreamStats *v521;
  webrtc::RTCOutboundRtpStreamStats *v522;
  const void **v523;
  uint64_t **v524;
  _OWORD *v525;
  std::string::size_type v526;
  uint64_t *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  void *v538;
  __int128 v539;
  std::string::size_type v540;
  std::string::__raw *v541;
  std::string::size_type v542;
  std::string::__raw *v543;
  size_t v544;
  __int128 v545;
  BOOL v546;
  char v547;
  std::string *v548;
  size_t v549;
  const void **v550;
  size_t v551;
  const void *v552;
  size_t v553;
  size_t v554;
  int v555;
  std::string *v556;
  size_t v557;
  size_t v558;
  int v559;
  _OWORD *v560;
  std::string::size_type v561;
  uint64_t v562;
  uint64_t *v563;
  void *v564;
  int v565;
  uint64_t v566;
  unint64_t v567;
  _QWORD *v568;
  int *v569;
  uint64_t v570;
  uint64_t v571;
  _DWORD *v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  double v576;
  std::string *v577;
  std::string *v578;
  size_t v579;
  std::string *v580;
  size_t v581;
  char *v582;
  uint64_t v583;
  int v584;
  _QWORD *v585;
  int v586;
  BOOL v587;
  uint64_t *v588;
  void **v589;
  double v590;
  int v591;
  int v592;
  int v593;
  uint64_t v594;
  const std::string::value_type *v595;
  std::string::value_type *v596;
  size_t v597;
  size_t v598;
  uint64_t v599;
  uint64_t v600;
  const std::string::value_type *v601;
  std::string::size_type v602;
  uint64_t *v603;
  uint64_t v604;
  std::string::size_type v605;
  std::string::size_type v606;
  uint64_t v607;
  uint64_t v608;
  const char *v609;
  size_t v610;
  std::string::size_type v611;
  std::string *v612;
  uint64_t v613;
  uint64_t v614;
  const char *v615;
  std::string::size_type v617;
  std::string::size_type *v618;
  std::string::size_type *v619;
  size_t v620;
  int v621;
  __int128 v622;
  BOOL v623;
  int v624;
  std::string *v625;
  size_t v626;
  const void **v627;
  size_t v628;
  const void *v629;
  size_t v630;
  size_t v631;
  int v632;
  std::string *v633;
  size_t v634;
  size_t v635;
  std::string::size_type *v636;
  std::string::size_type v637;
  uint64_t *v638;
  std::string *v639;
  std::string *v640;
  uint64_t v641;
  std::string::size_type v642;
  _QWORD *v643;
  unint64_t v644;
  char *v645;
  __int128 *v646;
  char v647;
  __int128 v648;
  __int128 v649;
  const std::string::value_type *v650;
  size_t v651;
  __int128 *v652;
  char v653;
  __int128 v654;
  __int128 v655;
  const std::string::value_type *v656;
  size_t v657;
  unint64_t v658;
  unint64_t v659;
  size_t v660;
  char *v661;
  void **v662;
  unsigned __int16 *v663;
  unsigned __int16 *v664;
  _QWORD *v665;
  _QWORD *v666;
  unint64_t v667;
  BOOL v668;
  _QWORD *v669;
  unint64_t v670;
  char v671;
  std::string::size_type v672;
  uint64_t v673;
  unsigned __int16 *v674;
  int v676;
  int v677;
  _DWORD *v679;
  _DWORD *v680;
  _QWORD *v681;
  _QWORD *v682;
  unint64_t v683;
  BOOL v684;
  _QWORD *v685;
  void **v686;
  webrtc::RTCOutboundRtpStreamStats *v687;
  webrtc::RTCOutboundRtpStreamStats *v688;
  const void **v689;
  uint64_t **v690;
  _OWORD *v691;
  std::string::size_type v692;
  uint64_t *v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  std::string::size_type v705;
  char v706;
  unint64_t v707;
  unint64_t v708;
  _BOOL4 v709;
  _QWORD *v710;
  _QWORD *v711;
  char v712;
  rtc::Thread *v713;
  std::string::size_type *p_size;
  uint64_t v715;
  uint64_t **v716;
  rtc::Thread *v717;
  uint64_t v718;
  std::string::value_type v719;
  char v720;
  char v721;
  std::string *v722;
  rtc::Thread *v723;
  _QWORD *v724;
  std::string::size_type *v725;
  uint64_t v726;
  unint64_t v727;
  std::string *v728;
  rtc::Thread *__dst;
  _DWORD *v730;
  const void **v731;
  std::string::size_type *v732;
  char v733;
  std::string *v734;
  std::string *v735;
  std::string *v736;
  std::string *v737;
  std::string *v738;
  std::string *v739;
  std::string *v740;
  void *__s2;
  const void **__s2a;
  webrtc::_anonymous_namespace_ *v743;
  rtc::Thread *v744;
  unint64_t v745;
  std::string **v746;
  _DWORD *v747;
  uint64_t v748;
  uint64_t v749;
  unint64_t v750;
  webrtc::RTCOutboundRtpStreamStats *v751;
  webrtc::RTCInboundRtpStreamStats *v752;
  char *v753;
  unint64_t v754;
  webrtc::RTCOutboundRtpStreamStats *v755;
  webrtc::RTCInboundRtpStreamStats *v756;
  std::string v757;
  std::string __len;
  std::string __sz;
  std::string __s;
  std::string __p[171];
  uint64_t v762;

  v2 = (rtc::Thread *)MEMORY[0x24BDAC7A8](a1, a2);
  i = v3;
  v6 = v5;
  v734 = v7;
  v9 = v8;
  v744 = v2;
  v762 = *MEMORY[0x24BDAC8D0];
  v10 = (rtc::Thread *)rtc::Thread::Current(v2);
  v712 = *((_BYTE *)v10 + 217);
  v713 = v10;
  *((_BYTE *)v10 + 217) = 0;
  v11 = (rtc::Thread *)rtc::Thread::Current(v10);
  v13 = v11;
  v14 = *((_BYTE *)v11 + 217);
  *((_BYTE *)v11 + 217) = 0;
  v15 = (_QWORD *)*v6;
  v745 = (unint64_t)(v6 + 1);
  if ((_QWORD *)*v6 != v6 + 1)
  {
    do
    {
      v314.var0 = v15[7];
      if (v314.var0)
      v315.var0 = v15[8];
      if (v315.var0)
      v316 = (_QWORD *)v15[1];
      if (v316)
      {
        do
        {
          v317 = v316;
          v316 = (_QWORD *)*v316;
        }
        while (v316);
      }
      else
      {
        do
        {
          v317 = (_QWORD *)v15[2];
          v22 = *v317 == (_QWORD)v15;
          v15 = v317;
        }
        while (!v22);
      }
      v15 = v317;
    }
    while (v317 != (_QWORD *)v745);
  }
  *((_BYTE *)v13 + 217) = v14;
  p_sz = (std::string *)rtc::Thread::Current(v11);
  v719 = p_sz[9].__r_.__value_.__s.__data_[1];
  v722 = p_sz;
  p_sz[9].__r_.__value_.__s.__data_[1] = 0;
  v17 = (std::string::size_type *)v734->__r_.__value_.__r.__words[0];
  p_size = &v734->__r_.__value_.__l.__size_;
  v749 = (uint64_t)i;
  v743 = v9;
  if ((std::string::size_type *)v734->__r_.__value_.__l.__data_ != &v734->__r_.__value_.__r.__words[1])
  {
    v746 = (std::string **)((char *)i + 24);
    while (1)
    {
      v18 = (std::string *)v17[10];
      v728 = (std::string *)v17[11];
      if (v18 != v728)
        break;
LABEL_246:
      v131 = (std::string::size_type *)v17[1];
      if (v131)
      {
        do
        {
          v132 = v131;
          v131 = (std::string::size_type *)*v131;
        }
        while (v131);
      }
      else
      {
        do
        {
          v132 = (std::string::size_type *)v17[2];
          v22 = *v132 == (_QWORD)v17;
          v17 = v132;
        }
        while (!v22);
      }
      v17 = v132;
      if (v132 == p_size)
        goto LABEL_252;
    }
    v731 = (const void **)(v17 + 4);
    v725 = v17;
LABEL_7:
    v737 = v18;
    data = (int)v18->__r_.__value_.__l.__data_;
    __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    strcpy((char *)__p, "T");
    *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = xmmword_208F1A080;
    if (*((char *)v17 + 55) < 0)
    {
      v20 = v17[5];
      if ((v20 & 0x8000000000000000) != 0)
        goto LABEL_1646;
      v21 = *v731;
      v22 = v20 && v21 == 0;
      if (v22)
        goto LABEL_1646;
    }
    else
    {
      v20 = *((unsigned __int8 *)v17 + 55);
      v21 = v731;
    }
    if (v20 >= 0x3FE)
      v23 = 1022;
    else
      v23 = v20;
    memcpy((char *)&__p[0].__r_.__value_.__l.__data_ + 1, v21, v23);
    __s.__r_.__value_.__r.__words[2] = v23 + 1;
    __p[0].__r_.__value_.__s.__data_[__s.__r_.__value_.__r.__words[2]] = 0;
    rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", data);
    v24 = (std::string *)__s.__r_.__value_.__r.__words[0];
    if (!__s.__r_.__value_.__r.__words[0])
      goto LABEL_1646;
    v25 = strlen(__s.__r_.__value_.__l.__data_);
    if (v25 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_1647;
    v26 = v25;
    if (v25 > 0x16)
    {
      v27 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v25 | 7) != 0x17)
        v27 = v25 | 7;
      v28 = v27 + 1;
      p_sz = (std::string *)operator new(v27 + 1);
      __sz.__r_.__value_.__l.__size_ = v26;
      __sz.__r_.__value_.__r.__words[2] = v28 | 0x8000000000000000;
      __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)p_sz;
    }
    else
    {
      *((_BYTE *)&__sz.__r_.__value_.__s + 23) = v25;
      p_sz = &__sz;
    }
    v29 = v737;
    v30 = (std::string *)((char *)p_sz + v26);
    if (p_sz <= v24 && v30 > v24)
      goto LABEL_1646;
    if (v26)
    {
      p_sz = (std::string *)memmove(p_sz, v24, v26);
      v29 = v737;
    }
    v30->__r_.__value_.__s.__data_[0] = 0;
    size = v29[2].__r_.__value_.__l.__size_;
    v32 = (void *)v29[2].__r_.__value_.__r.__words[2];
    for (__s2 = v32; ; v32 = __s2)
    {
      if ((void *)size == v32)
      {
        v130 = v737[1].__r_.__value_.__l.__size_;
        v129 = v737[1].__r_.__value_.__r.__words[2];
        for (i = (const rtc::SSLCertificateStats *)v749; v130 != v129; v130 += 464)
        if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__sz.__r_.__value_.__l.__data_);
        v18 = v737 + 7;
        v17 = v725;
        if (&v737[7] == v728)
          goto LABEL_246;
        goto LABEL_7;
      }
      strcpy((char *)__p, "CP");
      v34 = (const void **)(size + 120);
      v750 = size;
      if (*(char *)(size + 143) < 0)
      {
        v35 = *(_QWORD *)(size + 128);
        if ((v35 & 0x8000000000000000) != 0)
          goto LABEL_1646;
        v36 = *v34;
        if (v35 && v36 == 0)
          goto LABEL_1646;
      }
      else
      {
        v35 = *(unsigned __int8 *)(size + 143);
        v36 = (const void *)(size + 120);
      }
      if (v35 >= 0xFFD)
        v38 = 4093;
      else
        v38 = v35;
      v39 = v38 + 2;
      v40 = v35 < 0xFFD;
      if (v35 < 0xFFD)
        v41 = v38 + 3;
      else
        v41 = v38 + 2;
      memcpy(&__p[0].__r_.__value_.__s.__data_[2], v36, v38);
      __p[0].__r_.__value_.__s.__data_[v39] = 0;
      memcpy((char *)__p + v39, "_", v40);
      __p[0].__r_.__value_.__s.__data_[v41] = 0;
      v42 = (const void **)(v750 + 552);
      if (*(char *)(v750 + 575) < 0)
      {
        v43 = *(_QWORD *)(v750 + 560);
        if ((v43 & 0x8000000000000000) != 0)
          goto LABEL_1646;
        v44 = *v42;
        if (v43)
        {
          if (!v44)
            goto LABEL_1646;
        }
      }
      else
      {
        v43 = *(unsigned __int8 *)(v750 + 575);
        v44 = (const void *)(v750 + 552);
      }
      if (v43 >= 4095 - v41)
        v45 = 4095 - v41;
      else
        v45 = v43;
      memcpy((char *)__p + v41, v44, v45);
      __p[0].__r_.__value_.__s.__data_[v45 + v41] = 0;
      v46 = strlen((const char *)__p);
      if (v46 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1647;
      v47 = v46;
      if (v46 > 0x16)
      {
        v51 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v46 | 7) != 0x17)
          v51 = v46 | 7;
        v52 = v51 + 1;
        p_s = (std::string *)operator new(v51 + 1);
        __s.__r_.__value_.__l.__size_ = v47;
        __s.__r_.__value_.__r.__words[2] = v52 | 0x8000000000000000;
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
        v49 = (char *)p_s + v47;
        v50 = (std::string *)((char *)p_s + v47) > __p;
        if (p_s > __p)
          goto LABEL_63;
      }
      else
      {
        *((_BYTE *)&__s.__r_.__value_.__s + 23) = v46;
        p_s = &__s;
        v49 = (char *)&__s + v47;
        v50 = (std::string *)((char *)&__s + v47) > __p;
        if (&__s > __p)
          goto LABEL_63;
      }
      if (v50)
        goto LABEL_1646;
LABEL_63:
      if (v47)
        memcpy(p_s, __p, v47);
      *v49 = 0;
      v53 = operator new();
      __p[0] = __s;
      memset(&__s, 0, sizeof(__s));
      webrtc::RTCIceCandidatePairStats::RTCIceCandidatePairStats(v53, (__int128 *)__p, (uint64_t)v9);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_67:
          v54 = (std::string *)(v53 + 40);
          if (*(_BYTE *)(v53 + 64))
            goto LABEL_68;
          goto LABEL_73;
        }
      }
      else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_67;
      }
      operator delete(__s.__r_.__value_.__l.__data_);
      v54 = (std::string *)(v53 + 40);
      if (*(_BYTE *)(v53 + 64))
      {
LABEL_68:
        if (*(char *)(v53 + 63) < 0)
        {
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = &__sz;
          else
            v55 = (std::string *)__sz.__r_.__value_.__r.__words[0];
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
          else
            v56 = __sz.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v54, (const std::string::value_type *)v55, v56);
        }
        else if ((*((_BYTE *)&__sz.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v54, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
        }
        else
        {
          *v54 = __sz;
        }
        goto LABEL_85;
      }
LABEL_73:
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(v54, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
      else
        *v54 = __sz;
      *(_BYTE *)(v53 + 64) = 1;
LABEL_85:
      v58 = (std::string *)(v53 + 72);
      if (*(_BYTE *)(v53 + 96))
      {
        if (v58 != (std::string *)v57)
        {
          v59 = *(_BYTE *)(v57 + 23);
          if (*(char *)(v53 + 95) < 0)
          {
            if (v59 >= 0)
              v62 = (const std::string::value_type *)v57;
            else
              v62 = *(const std::string::value_type **)v57;
            if (v59 >= 0)
              v63 = *(unsigned __int8 *)(v57 + 23);
            else
              v63 = *(_QWORD *)(v57 + 8);
            std::string::__assign_no_alias<false>(v58, v62, v63);
          }
          else if ((*(_BYTE *)(v57 + 23) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v58, *(char **)v57, *(_QWORD *)(v57 + 8));
          }
          else
          {
            v60 = *(_OWORD *)v57;
            *(_QWORD *)(v53 + 88) = *(_QWORD *)(v57 + 16);
            *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v60;
          }
        }
      }
      else
      {
        if (*(char *)(v57 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v58, *(const std::string::value_type **)v57, *(_QWORD *)(v57 + 8));
        }
        else
        {
          v61 = *(_OWORD *)v57;
          *(_QWORD *)(v53 + 88) = *(_QWORD *)(v57 + 16);
          *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v61;
        }
        *(_BYTE *)(v53 + 96) = 1;
      }
      v65 = (std::string *)(v53 + 104);
      if (!*(_BYTE *)(v53 + 128))
      {
        if (*(char *)(v64 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v65, *(const std::string::value_type **)v64, *(_QWORD *)(v64 + 8));
        }
        else
        {
          v70 = *(_OWORD *)v64;
          *(_QWORD *)(v53 + 120) = *(_QWORD *)(v64 + 16);
          *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v70;
        }
        v66 = v750;
        *(_BYTE *)(v53 + 128) = 1;
LABEL_119:
        v69 = *(int *)(v66 + 992);
        if (v69 > 3)
          goto LABEL_1646;
        goto LABEL_120;
      }
      v66 = v750;
      if (v65 == (std::string *)v64)
        goto LABEL_119;
      v67 = *(_BYTE *)(v64 + 23);
      if (*(char *)(v53 + 127) < 0)
      {
        if (v67 >= 0)
          v71 = (const std::string::value_type *)v64;
        else
          v71 = *(const std::string::value_type **)v64;
        if (v67 >= 0)
          v72 = *(unsigned __int8 *)(v64 + 23);
        else
          v72 = *(_QWORD *)(v64 + 8);
        std::string::__assign_no_alias<false>(v65, v71, v72);
        v69 = *(int *)(v750 + 992);
        if (v69 > 3)
          goto LABEL_1646;
      }
      else if ((*(_BYTE *)(v64 + 23) & 0x80) != 0)
      {
        std::string::__assign_no_alias<true>(v65, *(char **)v64, *(_QWORD *)(v64 + 8));
        v69 = *(int *)(v750 + 992);
        if (v69 > 3)
          goto LABEL_1646;
      }
      else
      {
        v68 = *(_OWORD *)v64;
        *(_QWORD *)(v53 + 120) = *(_QWORD *)(v64 + 16);
        *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v68;
        v69 = *(int *)(v750 + 992);
        if (v69 > 3)
          goto LABEL_1646;
      }
LABEL_120:
      v73 = off_24C0BC1F0[v69];
      v74 = (std::string::value_type *)(v53 + 136);
      if (*(_BYTE *)(v53 + 160))
      {
        std::string::__assign_external((std::string *)(v53 + 136), v73);
        goto LABEL_133;
      }
      v75 = strlen(v73);
      if (v75 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1647;
      v76 = v75;
      if (v75 > 0x16)
      {
        v78 = (v75 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v75 | 7) != 0x17)
          v78 = v75 | 7;
        v79 = v78 + 1;
        v74 = (std::string::value_type *)operator new(v78 + 1);
        *(_QWORD *)(v53 + 144) = v76;
        *(_QWORD *)(v53 + 152) = v79 | 0x8000000000000000;
        *(_QWORD *)(v53 + 136) = v74;
        v77 = &v74[v76];
        if (v74 <= v73)
        {
LABEL_129:
          if (v77 > v73)
            goto LABEL_1646;
        }
      }
      else
      {
        *(_BYTE *)(v53 + 159) = v75;
        v77 = &v74[v75];
        if (v74 <= v73)
          goto LABEL_129;
      }
      if (v76)
        memcpy(v74, v73, v76);
      *v77 = 0;
      *(_BYTE *)(v53 + 160) = 1;
      v66 = v750;
LABEL_133:
      *(_QWORD *)(v53 + 168) = *(_QWORD *)(v66 + 1000);
      *(_BYTE *)(v53 + 176) = 1;
      *(_WORD *)(v53 + 184) = *(unsigned __int8 *)(v66 + 1008) | 0x100;
      *(_WORD *)(v53 + 186) = *(unsigned __int8 *)(v66 + 1) | 0x100;
      *(_QWORD *)(v53 + 192) = *(_QWORD *)(v66 + 48) - *(_QWORD *)(v66 + 40);
      *(_BYTE *)(v53 + 200) = 1;
      *(_QWORD *)(v53 + 400) = *(_QWORD *)(v66 + 40);
      *(_BYTE *)(v53 + 408) = 1;
      *(_QWORD *)(v53 + 208) = *(_QWORD *)(v66 + 96);
      *(_BYTE *)(v53 + 216) = 1;
      *(_QWORD *)(v53 + 224) = *(_QWORD *)(v66 + 24);
      *(_BYTE *)(v53 + 232) = 1;
      *(_QWORD *)(v53 + 416) = *(_QWORD *)(v66 + 16);
      *(_BYTE *)(v53 + 424) = 1;
      *(_QWORD *)(v53 + 240) = *(_QWORD *)(v66 + 80);
      *(_BYTE *)(v53 + 248) = 1;
      v80 = (double)*(unint64_t *)(v66 + 1016) / 1000.0;
      *(double *)(v53 + 256) = v80;
      *(_BYTE *)(v53 + 264) = 1;
      if (*(_BYTE *)(v66 + 1028))
      {
        LODWORD(v80) = *(_DWORD *)(v66 + 1024);
        *(double *)(v53 + 272) = (double)*(unint64_t *)&v80 / 1000.0;
        *(_BYTE *)(v53 + 280) = 1;
      }
      if (*(_BYTE *)v66)
      {
        v81 = *((_DWORD *)v744 + 82);
        if (v81 >= 1)
        {
          *(double *)(v53 + 288) = (double)v81;
          *(_BYTE *)(v53 + 296) = 1;
        }
        v82 = *((_DWORD *)v744 + 84);
        if (v82 >= 1)
        {
          *(double *)(v53 + 304) = (double)v82;
          *(_BYTE *)(v53 + 312) = 1;
        }
      }
      *(_QWORD *)(v53 + 320) = *(_QWORD *)(v66 + 104);
      *(_BYTE *)(v53 + 328) = 1;
      *(_QWORD *)(v53 + 336) = *(_QWORD *)(v66 + 56);
      *(_BYTE *)(v53 + 344) = 1;
      *(_QWORD *)(v53 + 352) = *(_QWORD *)(v66 + 112);
      *(_BYTE *)(v53 + 360) = 1;
      *(_QWORD *)(v53 + 368) = *(_QWORD *)(v66 + 72);
      *(_BYTE *)(v53 + 376) = 1;
      *(_QWORD *)(v53 + 384) = *(_QWORD *)(v66 + 56) - *(_QWORD *)(v66 + 64);
      *(_BYTE *)(v53 + 392) = 1;
      if (*(_BYTE *)(v66 + 1040))
      {
        v83 = *(_QWORD *)(v66 + 1032);
        if ((v83 & 0x8000000000000000) != 0)
        {
          v85 = -(uint64_t)v83;
          v86 = v85 / 0x3E8;
          if (v85 % 0x3E8 <= 0x1F4)
            v87 = 0;
          else
            v87 = -1;
          v84 = v87 - v86;
        }
        else if (v83 % 0x3E8 <= 0x1F3)
        {
          v84 = v83 / 0x3E8;
        }
        else
        {
          v84 = v83 / 0x3E8 + 1;
        }
        *(double *)(v53 + 432) = (double)v84;
        *(_BYTE *)(v53 + 440) = 1;
      }
      if (*(_BYTE *)(v66 + 1056))
      {
        v88 = *(_QWORD *)(v66 + 1048);
        if ((v88 & 0x8000000000000000) != 0)
        {
          v90 = -(uint64_t)v88;
          v91 = v90 / 0x3E8;
          if (v90 % 0x3E8 <= 0x1F4)
            v92 = 0;
          else
            v92 = -1;
          v89 = v92 - v91;
        }
        else if (v88 % 0x3E8 <= 0x1F3)
        {
          v89 = v88 / 0x3E8;
        }
        else
        {
          v89 = v88 / 0x3E8 + 1;
        }
        *(double *)(v53 + 448) = (double)v89;
        *(_BYTE *)(v53 + 456) = 1;
      }
      if (*(char *)(v53 + 31) < 0)
        std::string::__init_copy_ctor_external(&__s, *(const std::string::value_type **)(v53 + 8), *(_QWORD *)(v53 + 16));
      else
        __s = *(std::string *)(v53 + 8);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
      v93 = __s.__r_.__value_.__r.__words[2];
      memset(&__s, 0, sizeof(__s));
      __p[0].__r_.__value_.__r.__words[2] = v93;
      __p[1].__r_.__value_.__r.__words[0] = v53;
      v94 = v746;
      v95 = *v746;
      v96 = v746;
      if (*v746)
      {
        v97 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
        v98 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
        if (__p[0].__r_.__value_.__l.__size_)
          v99 = __p[0].__r_.__value_.__r.__words[0] == 0;
        else
          v99 = 0;
        v100 = !v99;
        while (1)
        {
          v94 = (std::string **)v95;
          if ((v97 & 0x80) != 0)
          {
            if ((*((_QWORD *)&v98 + 1) & 0x8000000000000000) != 0)
              goto LABEL_1646;
            v102 = *((_QWORD *)&v98 + 1);
            v101 = (std::string *)v98;
            if ((v100 & 1) == 0)
              goto LABEL_1646;
          }
          else
          {
            v101 = __p;
            v102 = v97;
          }
          v103 = (const void **)&v95[1].__r_.__value_.__l.__size_;
          v104 = v95[2].__r_.__value_.__s.__data_[7];
          v105 = &v95[1].__r_.__value_.__l.__size_;
          v106 = v104;
          if (v95[2].__r_.__value_.__s.__data_[7] < 0)
          {
            v106 = v95[1].__r_.__value_.__r.__words[2];
            if ((v106 & 0x8000000000000000) != 0)
              goto LABEL_1646;
            v105 = (std::string::size_type *)*v103;
            if (v106)
            {
              if (!v105)
                goto LABEL_1646;
            }
          }
          if (v106 >= v102)
            v107 = v102;
          else
            v107 = v106;
          v108 = memcmp(v101, v105, v107);
          if (v108)
          {
            if (v108 < 0)
              goto LABEL_170;
LABEL_186:
            if ((v104 & 0x80) != 0)
            {
              v104 = (size_t)v94[5];
              if ((v104 & 0x8000000000000000) != 0)
                goto LABEL_1646;
              v103 = (const void **)*v103;
              if (v104)
              {
                if (!v103)
                  goto LABEL_1646;
              }
            }
            if ((v97 & 0x80) != 0)
            {
              if ((*((_QWORD *)&v98 + 1) & 0x8000000000000000) != 0)
                goto LABEL_1646;
              v110 = *((_QWORD *)&v98 + 1);
              v109 = (std::string *)v98;
              if ((v100 & 1) == 0)
                goto LABEL_1646;
            }
            else
            {
              v109 = __p;
              v110 = v97;
            }
            if (v110 >= v104)
              v111 = v104;
            else
              v111 = v110;
            v112 = memcmp(v103, v109, v111);
            if (v112)
            {
              if ((v112 & 0x80000000) == 0)
                goto LABEL_222;
            }
            else if (v104 >= v110)
            {
LABEL_222:
              v9 = v743;
              v116 = v750;
              goto LABEL_229;
            }
            v95 = v94[1];
            if (!v95)
            {
              v96 = v94 + 1;
              break;
            }
          }
          else
          {
            if (v102 >= v106)
              goto LABEL_186;
LABEL_170:
            v95 = *v94;
            v96 = v94;
            if (!*v94)
              break;
          }
        }
      }
      p_sz = (std::string *)operator new(0x40uLL);
      *(_OWORD *)&p_sz[1].__r_.__value_.__r.__words[1] = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
      v113 = __p[0].__r_.__value_.__r.__words[2];
      memset(__p, 0, 32);
      p_sz[2].__r_.__value_.__r.__words[0] = v113;
      p_sz[2].__r_.__value_.__l.__size_ = v53;
      p_sz->__r_.__value_.__r.__words[0] = 0;
      p_sz->__r_.__value_.__l.__size_ = 0;
      p_sz->__r_.__value_.__r.__words[2] = (std::string::size_type)v94;
      *v96 = p_sz;
      v114 = **(_QWORD **)(v749 + 16);
      if (v114)
      {
        *(_QWORD *)(v749 + 16) = v114;
        p_sz = *v96;
      }
      v9 = v743;
      v115 = *v746;
      v22 = p_sz == *v746;
      p_sz[1].__r_.__value_.__s.__data_[0] = v22;
      v116 = v750;
      if (!v22)
      {
        do
        {
          v117 = p_sz->__r_.__value_.__r.__words[2];
          if (*(_BYTE *)(v117 + 24))
            break;
          v118 = *(std::string **)(v117 + 16);
          v119 = v118->__r_.__value_.__r.__words[0];
          if (v118->__r_.__value_.__r.__words[0] == v117)
          {
            v122 = v118->__r_.__value_.__l.__size_;
            if (!v122 || (v123 = *(unsigned __int8 *)(v122 + 24), v120 = (_BYTE *)(v122 + 24), v123))
            {
              if (*(std::string **)v117 == p_sz)
              {
                *(_BYTE *)(v117 + 24) = 1;
                v118[1].__r_.__value_.__s.__data_[0] = 0;
                v126 = *(_QWORD *)(v117 + 8);
                v118->__r_.__value_.__r.__words[0] = v126;
                if (v126)
                  goto LABEL_220;
              }
              else
              {
                v124 = *(std::string::size_type **)(v117 + 8);
                v125 = *v124;
                *(_QWORD *)(v117 + 8) = *v124;
                if (v125)
                {
                  *(_QWORD *)(v125 + 16) = v117;
                  v118 = *(std::string **)(v117 + 16);
                }
                v124[2] = (std::string::size_type)v118;
                *(_QWORD *)(*(_QWORD *)(v117 + 16) + 8 * (**(_QWORD **)(v117 + 16) != v117)) = v124;
                *v124 = v117;
                *(_QWORD *)(v117 + 16) = v124;
                v118 = (std::string *)v124[2];
                v117 = v118->__r_.__value_.__r.__words[0];
                *((_BYTE *)v124 + 24) = 1;
                v118[1].__r_.__value_.__s.__data_[0] = 0;
                v126 = *(_QWORD *)(v117 + 8);
                v118->__r_.__value_.__r.__words[0] = v126;
                if (v126)
LABEL_220:
                  *(_QWORD *)(v126 + 16) = v118;
              }
              *(_QWORD *)(v117 + 16) = *((_QWORD *)&v118->__r_.__value_.__l + 2);
              *(_QWORD *)(v118->__r_.__value_.__r.__words[2]
                        + 8 * (*(_QWORD *)v118->__r_.__value_.__r.__words[2] != (_QWORD)v118)) = v117;
              *(_QWORD *)(v117 + 8) = v118;
LABEL_227:
              v118->__r_.__value_.__r.__words[2] = v117;
              break;
            }
          }
          else if (!v119 || (v121 = *(unsigned __int8 *)(v119 + 24), v120 = (_BYTE *)(v119 + 24), v121))
          {
            if (*(std::string **)v117 == p_sz)
            {
              v128 = p_sz->__r_.__value_.__l.__size_;
              *(_QWORD *)v117 = v128;
              if (v128)
              {
                *(_QWORD *)(v128 + 16) = v117;
                v118 = *(std::string **)(v117 + 16);
              }
              p_sz->__r_.__value_.__r.__words[2] = (std::string::size_type)v118;
              *(_QWORD *)(*(_QWORD *)(v117 + 16) + 8 * (**(_QWORD **)(v117 + 16) != v117)) = p_sz;
              p_sz->__r_.__value_.__l.__size_ = v117;
              *(_QWORD *)(v117 + 16) = p_sz;
              v118 = (std::string *)p_sz->__r_.__value_.__r.__words[2];
              p_sz[1].__r_.__value_.__s.__data_[0] = 1;
              v118[1].__r_.__value_.__s.__data_[0] = 0;
              v117 = v118->__r_.__value_.__l.__size_;
              v127 = *(std::string **)v117;
              v118->__r_.__value_.__l.__size_ = *(_QWORD *)v117;
              if (v127)
LABEL_225:
                v127->__r_.__value_.__r.__words[2] = (std::string::size_type)v118;
            }
            else
            {
              p_sz = (std::string *)p_sz->__r_.__value_.__r.__words[2];
              *(_BYTE *)(v117 + 24) = 1;
              v118[1].__r_.__value_.__s.__data_[0] = 0;
              v117 = v118->__r_.__value_.__l.__size_;
              v127 = *(std::string **)v117;
              v118->__r_.__value_.__l.__size_ = *(_QWORD *)v117;
              if (v127)
                goto LABEL_225;
            }
            *(_QWORD *)(v117 + 16) = *((_QWORD *)&v118->__r_.__value_.__l + 2);
            *(_QWORD *)(v118->__r_.__value_.__r.__words[2]
                      + 8 * (*(_QWORD *)v118->__r_.__value_.__r.__words[2] != (_QWORD)v118)) = v117;
            *(_QWORD *)v117 = v118;
            goto LABEL_227;
          }
          *(_BYTE *)(v117 + 24) = 1;
          p_sz = v118;
          v118[1].__r_.__value_.__s.__data_[0] = v118 == v115;
          *v120 = 1;
        }
        while (v118 != v115);
      }
      ++*(_QWORD *)(v749 + 32);
      v53 = __p[1].__r_.__value_.__r.__words[0];
      if (__p[1].__r_.__value_.__r.__words[0])
LABEL_229:
        p_sz = (std::string *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v53 + 8))(v53);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_32;
      }
      else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_32;
      }
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_32:
      size = v116 + 1064;
    }
  }
LABEL_252:
  v722[9].__r_.__value_.__s.__data_[1] = v719;
  v133 = (unint64_t)rtc::Thread::Current((rtc::Thread *)p_sz);
  v706 = *(_BYTE *)(v133 + 217);
  v707 = v133;
  *(_BYTE *)(v133 + 217) = 0;
  v134 = (std::string::size_type *)v734->__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v734->__r_.__value_.__l.__data_ == p_size)
    goto LABEL_727;
  v750 = (unint64_t)__p[0].__r_.__value_.__r.__words + 2;
  v136 = __p <= (std::string *)"AEAD_AES_256_GCM"
      && &__p[0].__r_.__value_.__r.__words[2] > (std::string::size_type *)"AEAD_AES_256_GCM";
  v709 = v136;
  v138 = __p <= (std::string *)"AEAD_AES_128_GCM"
      && &__p[0].__r_.__value_.__r.__words[2] > (std::string::size_type *)"AEAD_AES_128_GCM";
  LODWORD(v708) = v138;
  v716 = (uint64_t **)((char *)i + 24);
  do
  {
    __s2a = (const void **)(v134 + 4);
    memset(&__sz, 0, sizeof(__sz));
    v139 = (_DWORD *)v134[10];
    v140 = (_DWORD *)v134[11];
    if (v139 == v140)
    {
LABEL_269:
      v141 = *(_QWORD *)v745;
      if (!*(_QWORD *)v745)
        goto LABEL_340;
    }
    else
    {
      while (*v139 != 2)
      {
        v139 += 42;
        if (v139 == v140)
          goto LABEL_269;
      }
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__sz.__r_.__value_.__l.__data_);
      __sz = __p[0];
      v141 = *(_QWORD *)v745;
      if (!*(_QWORD *)v745)
        goto LABEL_340;
    }
    v142 = *((unsigned __int8 *)v134 + 55);
    v143 = (const void *)v134[4];
    v144 = v134[5];
    if (v144)
      v145 = v143 == 0;
    else
      v145 = 0;
    v146 = !v145;
    if ((*((_BYTE *)v134 + 55) & 0x80) == 0)
    {
      v147 = v745;
      while (1)
      {
        v148 = (_QWORD *)(v141 + 32);
        if (*(char *)(v141 + 55) < 0)
        {
          v149 = *(_QWORD *)(v141 + 40);
          if ((v149 & 0x8000000000000000) != 0)
            goto LABEL_1646;
          v148 = (_QWORD *)*v148;
          if (v149 && v148 == 0)
            goto LABEL_1646;
        }
        else
        {
          v149 = *(unsigned __int8 *)(v141 + 55);
        }
        if (v142 >= v149)
          v151 = v149;
        else
          v151 = v142;
        v133 = memcmp(v148, __s2a, v151);
        if ((_DWORD)v133)
        {
          if ((v133 & 0x80000000) != 0)
            goto LABEL_282;
LABEL_297:
          v147 = v141;
          v141 = *(_QWORD *)v141;
          if (!v141)
            goto LABEL_318;
        }
        else
        {
          if (v149 >= v142)
            goto LABEL_297;
LABEL_282:
          v141 = *(_QWORD *)(v141 + 8);
          if (!v141)
            goto LABEL_318;
        }
      }
    }
    if ((v144 & 0x8000000000000000) != 0)
    {
      if (*(char *)(v141 + 55) < 0 && (*(_QWORD *)(v141 + 40) & 0x8000000000000000) == 0)
        __break(1u);
      goto LABEL_1646;
    }
    if (!v146)
      goto LABEL_1646;
    v147 = v745;
    do
    {
      while (1)
      {
        v152 = (_QWORD *)(v141 + 32);
        if (*(char *)(v141 + 55) < 0)
        {
          v153 = *(_QWORD *)(v141 + 40);
          if ((v153 & 0x8000000000000000) != 0)
            goto LABEL_1646;
          v152 = (_QWORD *)*v152;
          if (v153 && v152 == 0)
            goto LABEL_1646;
        }
        else
        {
          v153 = *(unsigned __int8 *)(v141 + 55);
        }
        v155 = v144 >= v153 ? v153 : v144;
        v133 = memcmp(v152, v143, v155);
        if ((_DWORD)v133)
          break;
        if (v153 >= v144)
          goto LABEL_317;
LABEL_302:
        v141 = *(_QWORD *)(v141 + 8);
        if (!v141)
          goto LABEL_318;
      }
      if ((v133 & 0x80000000) != 0)
        goto LABEL_302;
LABEL_317:
      v147 = v141;
      v141 = *(_QWORD *)v141;
    }
    while (v141);
LABEL_318:
    if (v745 == v147)
      goto LABEL_340;
    v156 = v134 + 4;
    if ((v142 & 0x80) != 0)
    {
      if ((v144 & 0x8000000000000000) != 0)
        goto LABEL_1646;
      v156 = v143;
      v142 = v144;
      if ((v146 & 1) == 0)
        goto LABEL_1646;
    }
    v157 = (_QWORD *)(v147 + 32);
    if (*(char *)(v147 + 55) < 0)
    {
      v158 = *(_QWORD *)(v147 + 40);
      if ((v158 & 0x8000000000000000) != 0)
        goto LABEL_1646;
      v157 = (_QWORD *)*v157;
      if (v158)
      {
        if (!v157)
          goto LABEL_1646;
      }
    }
    else
    {
      v158 = *(unsigned __int8 *)(v147 + 55);
    }
    if (v158 >= v142)
      v159 = v142;
    else
      v159 = v158;
    v133 = memcmp(v156, v157, v159);
    if (!(_DWORD)v133)
    {
      if (v142 < v158)
        goto LABEL_340;
LABEL_332:
      memset(&__len, 0, sizeof(__len));
      memset(&v757, 0, sizeof(v757));
      v160 = *(_QWORD *)(v147 + 56);
      if (v160)
      {
        v161 = *(char *)(v160 + 23);
        if (v161 >= 0)
          v162 = *(unsigned __int8 *)(v160 + 23);
        else
          v162 = *(_QWORD *)(v160 + 8);
        v163 = v162 + 2;
        if (v162 + 2 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1647;
        if (v163 > 0x16)
        {
          v297 = (v163 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v163 | 7) != 0x17)
            v297 = v163 | 7;
          v298 = v297 + 1;
          v164 = (std::string *)operator new(v297 + 1);
          __p[0].__r_.__value_.__l.__size_ = v162 + 2;
          __p[0].__r_.__value_.__r.__words[2] = v298 | 0x8000000000000000;
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v164;
        }
        else
        {
          memset(__p, 0, 24);
          v164 = __p;
          *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v162 + 2;
        }
        v133 = (unint64_t)v164->__r_.__value_.__r.__words + 2;
        if (v164 <= (std::string *)"CF" && v133 > (unint64_t)"CF")
          goto LABEL_1646;
        LOWORD(v164->__r_.__value_.__l.__data_) = 17987;
        v300 = v161 >= 0 ? (_BYTE *)v160 : *(_BYTE **)v160;
        v301 = (_BYTE *)(v133 + v162);
        if ((unint64_t)v300 >= v133 && v301 > v300)
          goto LABEL_1646;
        if (v162)
          v133 = (unint64_t)memmove((void *)v133, v300, v162);
        *v301 = 0;
        __len = __p[0];
      }
      v303 = *(_QWORD *)(v147 + 64);
      if (!v303)
        goto LABEL_341;
      v304 = *(char *)(v303 + 23);
      if (v304 >= 0)
        v305 = *(unsigned __int8 *)(v303 + 23);
      else
        v305 = *(_QWORD *)(v303 + 8);
      v306 = v305 + 2;
      if (v305 + 2 <= 0x7FFFFFFFFFFFFFF7)
      {
        if (v306 > 0x16)
        {
          v308 = (v306 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v306 | 7) != 0x17)
            v308 = v306 | 7;
          v309 = v308 + 1;
          v307 = (std::string *)operator new(v308 + 1);
          __p[0].__r_.__value_.__l.__size_ = v305 + 2;
          __p[0].__r_.__value_.__r.__words[2] = v309 | 0x8000000000000000;
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v307;
        }
        else
        {
          memset(__p, 0, 24);
          v307 = __p;
          *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v305 + 2;
        }
        v133 = (unint64_t)v307->__r_.__value_.__r.__words + 2;
        if (v307 <= (std::string *)"CF" && v133 > (unint64_t)"CF")
          goto LABEL_1646;
        LOWORD(v307->__r_.__value_.__l.__data_) = 17987;
        v311 = v304 >= 0 ? (_BYTE *)v303 : *(_BYTE **)v303;
        v312 = (_BYTE *)(v133 + v305);
        if ((unint64_t)v311 >= v133 && v312 > v311)
          goto LABEL_1646;
        if (v305)
          v133 = (unint64_t)memmove((void *)v133, v311, v305);
        *v312 = 0;
        v757 = __p[0];
        goto LABEL_341;
      }
LABEL_1647:
      abort();
    }
    if ((v133 & 0x80000000) == 0)
      goto LABEL_332;
LABEL_340:
    memset(&__len, 0, sizeof(__len));
    memset(&v757, 0, sizeof(v757));
LABEL_341:
    v165 = (_DWORD *)v134[10];
    v730 = (_DWORD *)v134[11];
    i = (const rtc::SSLCertificateStats *)v749;
    v732 = v134;
    if (v165 != v730)
    {
      while (1)
      {
        v747 = v165;
        v167 = *v165;
        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
        strcpy((char *)__p, "T");
        *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = xmmword_208F1A080;
        if (*((char *)v134 + 55) < 0)
        {
          v168 = v134[5];
          if ((v168 & 0x8000000000000000) != 0)
            goto LABEL_1646;
          v170 = v743;
          v169 = *__s2a;
          if (v168 && v169 == 0)
            goto LABEL_1646;
        }
        else
        {
          v168 = *((unsigned __int8 *)v134 + 55);
          v169 = __s2a;
          v170 = v743;
        }
        if (v168 >= 0x3FE)
          v172 = 1022;
        else
          v172 = v168;
        memcpy((char *)&__p[0].__r_.__value_.__l.__data_ + 1, v169, v172);
        __s.__r_.__value_.__r.__words[2] = v172 + 1;
        __p[0].__r_.__value_.__s.__data_[__s.__r_.__value_.__r.__words[2]] = 0;
        rtc::SimpleStringBuilder::AppendFormat((rtc::SimpleStringBuilder *)&__s, "%d", v167);
        v173 = (webrtc::RTCInboundRtpStreamStats *)__s.__r_.__value_.__r.__words[0];
        if (!__s.__r_.__value_.__r.__words[0])
          goto LABEL_1646;
        v174 = strlen(__s.__r_.__value_.__l.__data_);
        if (v174 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1647;
        v175 = (uint64_t *)v174;
        if (v174 > 0x16)
        {
          v177 = (v174 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v174 | 7) != 0x17)
            v177 = v174 | 7;
          v178 = v177 + 1;
          v176 = (webrtc::RTCInboundRtpStreamStats *)operator new(v177 + 1);
          v753 = (char *)v175;
          v754 = v178 | 0x8000000000000000;
          v752 = v176;
        }
        else
        {
          HIBYTE(v754) = v174;
          v176 = (webrtc::RTCInboundRtpStreamStats *)&v752;
        }
        v179 = (webrtc::RTCInboundRtpStreamStats *)((char *)v175 + (_QWORD)v176);
        if (v176 <= v173 && v179 > v173)
          goto LABEL_1646;
        if (v175)
          memmove(v176, v173, (size_t)v175);
        *(_BYTE *)v179 = 0;
        v181 = operator new();
        v182 = (std::string::pointer)v181;
        v184 = v752;
        v183 = (uint64_t *)v753;
        LODWORD(__p[0].__r_.__value_.__l.__data_) = v754;
        *(_DWORD *)((char *)__p[0].__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v754 + 3);
        v185 = SHIBYTE(v754);
        v752 = 0;
        v753 = 0;
        v754 = 0;
        *(_QWORD *)v181 = &unk_24C0BC140;
        v186 = v181 + 8;
        if (v185 < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)(v181 + 8), (const std::string::value_type *)v184, (std::string::size_type)v183);
        }
        else
        {
          *(_QWORD *)(v181 + 8) = v184;
          *(_QWORD *)(v181 + 16) = v183;
          *(_DWORD *)(v181 + 24) = __p[0].__r_.__value_.__l.__data_;
          *(_DWORD *)(v181 + 27) = *(_DWORD *)((char *)__p[0].__r_.__value_.__r.__words + 3);
          *(_BYTE *)(v181 + 31) = v185;
        }
        *((_QWORD *)v182 + 4) = v170;
        *(_QWORD *)v182 = &off_24C0BC810;
        v182[40] = 0;
        v182[48] = 0;
        v182[56] = 0;
        v182[64] = 0;
        v182[72] = 0;
        v182[80] = 0;
        v182[88] = 0;
        v182[96] = 0;
        v182[104] = 0;
        v182[136] = 0;
        v187 = v182 + 136;
        v182[128] = 0;
        v182[160] = 0;
        v182[168] = 0;
        v188 = (void **)(v182 + 168);
        v182[192] = 0;
        v182[200] = 0;
        v738 = (std::string *)(v182 + 200);
        v182[232] = 0;
        v740 = (std::string *)(v182 + 232);
        v182[224] = 0;
        v182[256] = 0;
        v182[264] = 0;
        v182[288] = 0;
        v182[296] = 0;
        v182[320] = 0;
        v182[328] = 0;
        v182[352] = 0;
        v182[360] = 0;
        v182[384] = 0;
        v182[392] = 0;
        v182[396] = 0;
        v182[400] = 0;
        v182[424] = 0;
        v182[432] = 0;
        v182[456] = 0;
        v182[464] = 0;
        v182[488] = 0;
        if (v185 < 0)
        {
          operator delete(v184);
          if ((SHIBYTE(v754) & 0x80000000) == 0)
            goto LABEL_377;
        }
        else if ((SHIBYTE(v754) & 0x80000000) == 0)
        {
          goto LABEL_377;
        }
        operator delete(v752);
LABEL_377:
        *((_QWORD *)v182 + 7) = *((_QWORD *)v747 + 13);
        v182[64] = 1;
        *((_QWORD *)v182 + 11) = *((_QWORD *)v747 + 14);
        v182[96] = 1;
        *((_QWORD *)v182 + 5) = *((_QWORD *)v747 + 11);
        v182[48] = 1;
        *((_QWORD *)v182 + 9) = *((_QWORD *)v747 + 12);
        v182[80] = 1;
        v189 = (int)v747[6];
        if (v189 >= 5)
          goto LABEL_1648;
        v190 = off_24C0BC210[v189];
        if (v182[160])
        {
          std::string::__assign_external((std::string *)(v182 + 136), v190);
          goto LABEL_393;
        }
        v191 = strlen(v190);
        if (v191 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1647;
        v192 = v191;
        if (v191 > 0x16)
        {
          v194 = (v191 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v191 | 7) != 0x17)
            v194 = v191 | 7;
          v195 = v194 + 1;
          v187 = (std::string::value_type *)operator new(v194 + 1);
          *((_QWORD *)v182 + 18) = v192;
          *((_QWORD *)v182 + 19) = v195 | 0x8000000000000000;
          *((_QWORD *)v182 + 17) = v187;
          v193 = &v187[v192];
          if (v187 <= v190)
          {
LABEL_389:
            if (v193 > v190)
              goto LABEL_1646;
          }
        }
        else
        {
          v182[159] = v191;
          v193 = &v187[v191];
          if (v187 <= v190)
            goto LABEL_389;
        }
        if (v192)
          memcpy(v187, v190, v192);
        *v193 = 0;
        v182[160] = 1;
LABEL_393:
        *((_DWORD *)v182 + 98) = v747[20];
        v182[396] = 1;
        v196 = (int)v747[30];
        if (v196 > 2)
          goto LABEL_1646;
        v197 = v182 + 400;
        v198 = off_24C0BC238[v196];
        if (v182[424])
        {
          std::string::__assign_external((std::string *)(v182 + 400), v198);
          v181 = (uint64_t)(v182 + 432);
          v199 = v747;
          v200 = v747 + 32;
          if (!v182[456])
            goto LABEL_412;
          goto LABEL_396;
        }
        v204 = strlen(v198);
        if (v204 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1647;
        v205 = v204;
        if (v204 > 0x16)
        {
          v207 = (v204 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v204 | 7) != 0x17)
            v207 = v204 | 7;
          v208 = v207 + 1;
          v197 = (std::string::value_type *)operator new(v207 + 1);
          *((_QWORD *)v182 + 51) = v205;
          *((_QWORD *)v182 + 52) = v208 | 0x8000000000000000;
          *((_QWORD *)v182 + 50) = v197;
          v206 = &v197[v205];
          if (v197 > v198)
            goto LABEL_409;
        }
        else
        {
          v182[423] = v204;
          v206 = &v197[v204];
          if (v197 > v198)
            goto LABEL_409;
        }
        if (v206 > v198)
          goto LABEL_1646;
LABEL_409:
        if (v205)
          memcpy(v197, v198, v205);
        *v206 = 0;
        v182[424] = 1;
        v181 = (uint64_t)(v182 + 432);
        v199 = v747;
        v200 = v747 + 32;
        if (!v182[456])
        {
LABEL_412:
          if (*((char *)v199 + 151) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v181, *((const std::string::value_type **)v199 + 16), *((_QWORD *)v199 + 17));
          }
          else
          {
            v209 = *(_OWORD *)v200;
            *(_QWORD *)(v181 + 16) = *((_QWORD *)v200 + 2);
            *(_OWORD *)v181 = v209;
          }
          v182[456] = 1;
LABEL_424:
          v203 = (int)v747[38];
          if (v203 >= 7)
            goto LABEL_1648;
          goto LABEL_425;
        }
LABEL_396:
        if ((_DWORD *)v181 == v200)
          goto LABEL_424;
        v201 = *((_BYTE *)v747 + 151);
        if (v182[455] < 0)
        {
          if (v201 >= 0)
            v210 = (const std::string::value_type *)v200;
          else
            v210 = (const std::string::value_type *)*((_QWORD *)v747 + 16);
          if (v201 >= 0)
            v211 = *((unsigned __int8 *)v747 + 151);
          else
            v211 = *((_QWORD *)v747 + 17);
          v181 = (uint64_t)std::string::__assign_no_alias<false>((std::string *)v181, v210, v211);
          v203 = (int)v747[38];
          if (v203 >= 7)
            goto LABEL_1648;
        }
        else if ((*((_BYTE *)v747 + 151) & 0x80) != 0)
        {
          v181 = (uint64_t)std::string::__assign_no_alias<true>((_QWORD *)v181, *((char **)v747 + 16), *((_QWORD *)v747 + 17));
          v203 = (int)v747[38];
          if (v203 >= 7)
            goto LABEL_1648;
        }
        else
        {
          v202 = *(_OWORD *)v200;
          *(_QWORD *)(v181 + 16) = *((_QWORD *)v200 + 2);
          *(_OWORD *)v181 = v202;
          v203 = (int)v747[38];
          if (v203 >= 7)
            goto LABEL_1648;
        }
LABEL_425:
        v212 = v182 + 464;
        v213 = off_24C0BC250[v203];
        v735 = (std::string *)(v182 + 104);
        if (!v182[488])
        {
          v217 = strlen(v213);
          if (v217 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1647;
          v218 = v217;
          if (v217 > 0x16)
          {
            v220 = (v217 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v217 | 7) != 0x17)
              v220 = v217 | 7;
            v221 = v220 + 1;
            v212 = (char *)operator new(v220 + 1);
            *((_QWORD *)v182 + 59) = v218;
            *((_QWORD *)v182 + 60) = v221 | 0x8000000000000000;
            *((_QWORD *)v182 + 58) = v212;
            v219 = &v212[v218];
            if (v212 > v213)
              goto LABEL_436;
          }
          else
          {
            v182[487] = v217;
            v219 = &v212[v217];
            if (v212 > v213)
            {
LABEL_436:
              v214 = (std::string *)v186;
              if (v218)
                memcpy(v212, v213, v218);
              *v219 = 0;
              v182[488] = 1;
              v215 = *((_QWORD *)v747 + 7);
              v216 = *((_QWORD *)v747 + 8);
              if (v215 == v216)
                goto LABEL_476;
              while (1)
              {
LABEL_442:
                if (!*(_BYTE *)v215)
                  goto LABEL_441;
                strcpy((char *)__p, "CP");
                v222 = (_QWORD *)(v215 + 120);
                if (*(char *)(v215 + 143) < 0)
                {
                  v223 = *(_QWORD *)(v215 + 128);
                  if ((v223 & 0x8000000000000000) != 0)
                    goto LABEL_1646;
                  v222 = (_QWORD *)*v222;
                  if (v223)
                  {
                    if (!v222)
                      goto LABEL_1646;
                  }
                }
                else
                {
                  v223 = *(unsigned __int8 *)(v215 + 143);
                }
                if (v223 >= 0xFFD)
                  v224 = 4093;
                else
                  v224 = v223;
                v225 = v224 + 2;
                v226 = v223 < 0xFFD;
                if (v223 < 0xFFD)
                  v227 = v224 + 3;
                else
                  v227 = v224 + 2;
                memcpy(&__p[0].__r_.__value_.__s.__data_[2], v222, v224);
                __p[0].__r_.__value_.__s.__data_[v225] = 0;
                memcpy((char *)__p + v225, "_", v226);
                __p[0].__r_.__value_.__s.__data_[v227] = 0;
                v228 = (_QWORD *)(v215 + 552);
                if (*(char *)(v215 + 575) < 0)
                {
                  v229 = *(_QWORD *)(v215 + 560);
                  if ((v229 & 0x8000000000000000) != 0)
                    goto LABEL_1646;
                  v228 = (_QWORD *)*v228;
                  if (v229)
                  {
                    if (!v228)
                      goto LABEL_1646;
                  }
                }
                else
                {
                  v229 = *(unsigned __int8 *)(v215 + 575);
                }
                if (v229 >= 4095 - v227)
                  v230 = 4095 - v227;
                else
                  v230 = v229;
                memcpy((char *)__p + v227, v228, v230);
                __p[0].__r_.__value_.__s.__data_[v230 + v227] = 0;
                v231 = strlen((const char *)__p);
                if (v231 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_1647;
                v232 = v231;
                if (v231 > 0x16)
                {
                  v236 = (v231 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v231 | 7) != 0x17)
                    v236 = v231 | 7;
                  v237 = v236 + 1;
                  v233 = (std::string *)operator new(v236 + 1);
                  __s.__r_.__value_.__l.__size_ = v232;
                  __s.__r_.__value_.__r.__words[2] = v237 | 0x8000000000000000;
                  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v233;
                  v234 = (char *)v233 + v232;
                  v235 = (std::string *)((char *)v233 + v232) > __p;
                  if (v233 > __p)
                    goto LABEL_470;
                }
                else
                {
                  *((_BYTE *)&__s.__r_.__value_.__s + 23) = v231;
                  v233 = &__s;
                  v234 = (char *)&__s + v232;
                  v235 = (std::string *)((char *)&__s + v232) > __p;
                  if (&__s > __p)
                    goto LABEL_470;
                }
                if (v235)
                  goto LABEL_1646;
LABEL_470:
                if (v232)
                  memcpy(v233, __p, v232);
                *v234 = 0;
                if (!v182[192])
                {
                  *(_OWORD *)v188 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                  *((_QWORD *)v182 + 23) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
                  v182[192] = 1;
LABEL_441:
                  v215 += 1064;
                  if (v215 == v216)
                    goto LABEL_476;
                  continue;
                }
                if (v182[191] < 0)
                  operator delete(*v188);
                *(_OWORD *)v188 = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                *((_QWORD *)v182 + 23) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
                v215 += 1064;
                if (v215 == v216)
                  goto LABEL_476;
              }
            }
          }
          if (v219 > v213)
            goto LABEL_1646;
          goto LABEL_436;
        }
        v214 = (std::string *)v186;
        std::string::__assign_external((std::string *)(v182 + 464), v213);
        v215 = *((_QWORD *)v747 + 7);
        v216 = *((_QWORD *)v747 + 8);
        if (v215 != v216)
          goto LABEL_442;
LABEL_476:
        v238 = v214;
        if (*v747 != 2)
        {
          v239 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
          if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v239 = __sz.__r_.__value_.__l.__size_;
          if (v239)
          {
            if (v182[128])
            {
              if (v182[127] < 0)
              {
                if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v240 = &__sz;
                else
                  v240 = (std::string *)__sz.__r_.__value_.__r.__words[0];
                std::string::__assign_no_alias<false>(v735, (const std::string::value_type *)v240, v239);
              }
              else if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__assign_no_alias<true>(v735, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v735->__r_.__value_.__l.__data_ = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
                *((_QWORD *)v182 + 15) = *((_QWORD *)&__sz.__r_.__value_.__l + 2);
              }
            }
            else
            {
              if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v735, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
              }
              else
              {
                *(_OWORD *)&v735->__r_.__value_.__l.__data_ = *(_OWORD *)&__sz.__r_.__value_.__l.__data_;
                *((_QWORD *)v182 + 15) = *((_QWORD *)&__sz.__r_.__value_.__l + 2);
              }
              v182[128] = 1;
            }
          }
        }
        v241 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
        if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v241 = __len.__r_.__value_.__l.__size_;
        if (!v241)
          goto LABEL_515;
        if (v182[224])
        {
          if ((v182[223] & 0x80000000) == 0)
          {
            if ((SHIBYTE(__len.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              *(_OWORD *)&v738->__r_.__value_.__l.__data_ = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
              *((_QWORD *)v182 + 27) = *((_QWORD *)&__len.__r_.__value_.__l + 2);
              v242 = HIBYTE(v757.__r_.__value_.__r.__words[2]);
              v243 = SHIBYTE(v757.__r_.__value_.__r.__words[2]);
              v244 = v757.__r_.__value_.__l.__size_;
              if ((v757.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v242 = v757.__r_.__value_.__l.__size_;
              if (!v242)
                goto LABEL_536;
              goto LABEL_518;
            }
            std::string::__assign_no_alias<true>(v738, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
LABEL_515:
            v242 = HIBYTE(v757.__r_.__value_.__r.__words[2]);
            v243 = SHIBYTE(v757.__r_.__value_.__r.__words[2]);
            v244 = v757.__r_.__value_.__l.__size_;
            if ((v757.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v242 = v757.__r_.__value_.__l.__size_;
            if (!v242)
              goto LABEL_536;
            goto LABEL_518;
          }
          if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_len = &__len;
          else
            p_len = (std::string *)__len.__r_.__value_.__r.__words[0];
          std::string::__assign_no_alias<false>(v738, (const std::string::value_type *)p_len, v241);
          v242 = HIBYTE(v757.__r_.__value_.__r.__words[2]);
          v243 = SHIBYTE(v757.__r_.__value_.__r.__words[2]);
          v244 = v757.__r_.__value_.__l.__size_;
          if ((v757.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v242 = v757.__r_.__value_.__l.__size_;
          if (!v242)
            goto LABEL_536;
        }
        else
        {
          if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v738, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)&v738->__r_.__value_.__l.__data_ = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
            *((_QWORD *)v182 + 27) = *((_QWORD *)&__len.__r_.__value_.__l + 2);
          }
          v182[224] = 1;
          v242 = HIBYTE(v757.__r_.__value_.__r.__words[2]);
          v243 = SHIBYTE(v757.__r_.__value_.__r.__words[2]);
          v244 = v757.__r_.__value_.__l.__size_;
          if ((v757.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v242 = v757.__r_.__value_.__l.__size_;
          if (!v242)
            goto LABEL_536;
        }
LABEL_518:
        if (v182[256])
        {
          if (v182[255] < 0)
          {
            if (v243 >= 0)
              v247 = &v757;
            else
              v247 = (std::string *)v757.__r_.__value_.__r.__words[0];
            std::string::__assign_no_alias<false>(v740, (const std::string::value_type *)v247, v242);
            v246 = v747[1];
            if (!v246)
              goto LABEL_550;
          }
          else
          {
            if (v243 < 0)
            {
              std::string::__assign_no_alias<true>(v740, v757.__r_.__value_.__l.__data_, v244);
LABEL_536:
              v246 = v747[1];
              if (!v246)
                goto LABEL_550;
              goto LABEL_537;
            }
            *(_OWORD *)&v740->__r_.__value_.__l.__data_ = *(_OWORD *)&v757.__r_.__value_.__l.__data_;
            *((_QWORD *)v182 + 31) = *((_QWORD *)&v757.__r_.__value_.__l + 2);
            v246 = v747[1];
            if (!v246)
              goto LABEL_550;
          }
        }
        else if (v243 < 0)
        {
          std::string::__init_copy_ctor_external(v740, v757.__r_.__value_.__l.__data_, v244);
          v182[256] = 1;
          v246 = v747[1];
          if (!v246)
            goto LABEL_550;
        }
        else
        {
          *(_OWORD *)&v740->__r_.__value_.__l.__data_ = *(_OWORD *)&v757.__r_.__value_.__l.__data_;
          *((_QWORD *)v182 + 31) = *((_QWORD *)&v757.__r_.__value_.__l + 2);
          v182[256] = 1;
          v246 = v747[1];
          if (!v246)
            goto LABEL_550;
        }
LABEL_537:
        v248 = (std::string *)(v182 + 264);
        snprintf((char *)__p, 5uLL, "%04X", v246);
        if (v182[288])
        {
          std::string::__assign_external((std::string *)v182 + 11, (const std::string::value_type *)__p);
          goto LABEL_550;
        }
        v249 = strlen((const char *)__p);
        if (v249 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1647;
        v250 = v249;
        if (v249 > 0x16)
        {
          v253 = (v249 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v249 | 7) != 0x17)
            v253 = v249 | 7;
          v254 = v253 + 1;
          v248 = (std::string *)operator new(v253 + 1);
          *((_QWORD *)v182 + 34) = v250;
          *((_QWORD *)v182 + 35) = v254 | 0x8000000000000000;
          *((_QWORD *)v182 + 33) = v248;
          v251 = (char *)v248 + v250;
          v252 = (std::string *)((char *)v248 + v250) > __p;
          if (v248 <= __p)
          {
LABEL_546:
            if (v252)
              goto LABEL_1646;
          }
        }
        else
        {
          v182[287] = v249;
          v251 = (char *)v248 + v249;
          v252 = (std::string *)((char *)v248 + v249) > __p;
          if (v248 <= __p)
            goto LABEL_546;
        }
        if (v250)
          memcpy(v248, __p, v250);
        *v251 = 0;
        v182[288] = 1;
LABEL_550:
        v255 = (std::string *)(v182 + 328);
        if (*((_BYTE *)v747 + 20))
        {
          if (v747[4])
            v256 = "server";
          else
            v256 = "client";
          if (v182[352])
          {
            std::string::__assign_external(v255, v256);
            v257 = v747[3];
            if (!v257)
              goto LABEL_589;
            goto LABEL_572;
          }
          v182[351] = 6;
          if (v255 <= (std::string *)v256 && v182 + 334 > v256)
            goto LABEL_1646;
          LODWORD(v255->__r_.__value_.__l.__data_) = *(_DWORD *)v256;
          *((_WORD *)v182 + 166) = *((_WORD *)v256 + 2);
          v182[334] = 0;
          v182[352] = 1;
          v257 = v747[3];
          if (v257)
            goto LABEL_572;
LABEL_589:
          v267 = v747[2];
          if (v267)
            goto LABEL_590;
          goto LABEL_610;
        }
        if (!v182[352])
        {
          v182[351] = 7;
          if (v255 <= (std::string *)"unknown" && v182 + 335 > "unknown")
            goto LABEL_1646;
          strcpy(v182 + 328, "unknown");
          v182[352] = 1;
          v257 = v747[3];
          if (v257)
            goto LABEL_572;
          goto LABEL_589;
        }
        if (v182[351] < 0)
        {
          *((_QWORD *)v182 + 42) = 7;
          v255 = (std::string *)*((_QWORD *)v182 + 41);
        }
        else
        {
          v182[351] = 7;
        }
        strcpy((char *)v255, "unknown");
        v257 = v747[3];
        if (!v257)
          goto LABEL_589;
LABEL_572:
        LODWORD(__p[0].__r_.__value_.__r.__words[2]) = (unsigned __int16)v257 | 0x3000000;
        v258 = bsearch(__p, bssl::kCiphers, 0x18uLL, 0x28uLL, (int (__cdecl *)(const void *, const void *))ssl_cipher_id_cmp_void);
        if (!v258)
          goto LABEL_589;
        v259 = (std::string *)*((_QWORD *)v258 + 1);
        if (!v259)
          goto LABEL_1646;
        v260 = strlen(*((const char **)v258 + 1));
        if (v260 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_1647;
        v261 = v260;
        if (v260 > 0x16)
        {
          v264 = (v260 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v260 | 7) != 0x17)
            v264 = v260 | 7;
          v265 = v264 + 1;
          v262 = (std::string *)operator new(v264 + 1);
          __s.__r_.__value_.__l.__size_ = v261;
          __s.__r_.__value_.__r.__words[2] = v265 | 0x8000000000000000;
          __s.__r_.__value_.__r.__words[0] = (std::string::size_type)v262;
          v263 = (std::string *)((char *)v262 + v261);
          if (v262 > v259)
            goto LABEL_582;
        }
        else
        {
          *((_BYTE *)&__s.__r_.__value_.__s + 23) = v260;
          v262 = &__s;
          v263 = (std::string *)((char *)&__s + v261);
          if (&__s > v259)
            goto LABEL_582;
        }
        if (v263 > v259)
          goto LABEL_1646;
LABEL_582:
        if (v261)
          memmove(v262, v259, v261);
        v263->__r_.__value_.__s.__data_[0] = 0;
        if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v266 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
        else
          v266 = __s.__r_.__value_.__l.__size_;
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__s.__r_.__value_.__l.__data_);
          if (!v266)
            goto LABEL_589;
        }
        else if (!v266)
        {
          goto LABEL_589;
        }
        v270 = (void **)(v182 + 296);
        rtc::OpenSSLStreamAdapter::SslCipherSuiteToName((rtc::OpenSSLStreamAdapter *)v747[3], __p);
        if (v182[320])
        {
          if (v182[319] < 0)
            operator delete(*v270);
          *(_OWORD *)v270 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          *((_QWORD *)v182 + 39) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
          v267 = v747[2];
          if (!v267)
            goto LABEL_610;
LABEL_590:
          switch(v267)
          {
            case 1:
              v268 = (char *)operator new(0x19uLL);
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
              *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_208F05110;
              v269 = "AES_CM_128_HMAC_SHA1_80";
              if (v268 > "AES_CM_128_HMAC_SHA1_80")
                goto LABEL_601;
              goto LABEL_600;
            case 2:
              v268 = (char *)operator new(0x19uLL);
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v268;
              *(_OWORD *)&__p[0].__r_.__value_.__r.__words[1] = xmmword_208F05110;
              v269 = "AES_CM_128_HMAC_SHA1_32";
              if (v268 > "AES_CM_128_HMAC_SHA1_32")
                goto LABEL_601;
LABEL_600:
              if (v268 + 23 > v269)
                goto LABEL_1646;
LABEL_601:
              *(_OWORD *)v268 = *(_OWORD *)v269;
              *(_QWORD *)(v268 + 15) = *(_QWORD *)(v269 + 15);
              v268[23] = 0;
              operator delete(v268);
LABEL_605:
              v271 = (void **)(v182 + 360);
              rtc::SrtpCryptoSuiteToName((char *)v747[2], (unint64_t)__p);
              if (v182[384])
              {
                if (v182[383] < 0)
                  operator delete(*v271);
                *(_OWORD *)v271 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                *((_QWORD *)v182 + 47) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
              }
              else
              {
                *(_OWORD *)v271 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                *((_QWORD *)v182 + 47) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                v182[384] = 1;
              }
              break;
            case 7:
              *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 16;
              if ((_DWORD)v708)
                goto LABEL_1646;
              goto LABEL_605;
            case 8:
              *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 16;
              if (!v709)
                goto LABEL_605;
              goto LABEL_1646;
            default:
              goto LABEL_610;
          }
          goto LABEL_610;
        }
        *(_OWORD *)v270 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
        *((_QWORD *)v182 + 39) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
        v182[320] = 1;
        v267 = v747[2];
        if (v267)
          goto LABEL_590;
LABEL_610:
        if (v182[31] < 0)
          std::string::__init_copy_ctor_external(&__s, *((const std::string::value_type **)v182 + 1), *((_QWORD *)v182 + 2));
        else
          __s = *v238;
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
        v272 = __s.__r_.__value_.__r.__words[2];
        memset(&__s, 0, sizeof(__s));
        __p[0].__r_.__value_.__r.__words[2] = v272;
        __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v182;
        v273 = v716;
        v274 = *v716;
        v275 = v716;
        if (*v716)
        {
          v276 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
          v277 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
          if (__p[0].__r_.__value_.__l.__size_)
            v278 = __p[0].__r_.__value_.__r.__words[0] == 0;
          else
            v278 = 0;
          v279 = !v278;
          while (1)
          {
            v273 = (uint64_t **)v274;
            if ((v276 & 0x80) != 0)
            {
              if ((*((_QWORD *)&v277 + 1) & 0x8000000000000000) != 0)
                goto LABEL_1646;
              v281 = *((_QWORD *)&v277 + 1);
              v280 = (std::string *)v277;
              if ((v279 & 1) == 0)
                goto LABEL_1646;
            }
            else
            {
              v280 = __p;
              v281 = v276;
            }
            v282 = (const void **)(v274 + 4);
            v283 = *((unsigned __int8 *)v274 + 55);
            v284 = v274 + 4;
            v285 = v283;
            if (*((char *)v274 + 55) < 0)
            {
              v285 = v274[5];
              if ((v285 & 0x8000000000000000) != 0)
                goto LABEL_1646;
              v284 = *v282;
              if (v285)
              {
                if (!v284)
                  goto LABEL_1646;
              }
            }
            if (v285 >= v281)
              v286 = v281;
            else
              v286 = v285;
            v287 = memcmp(v280, v284, v286);
            if (v287)
            {
              if (v287 < 0)
                goto LABEL_620;
LABEL_636:
              if ((v283 & 0x80) != 0)
              {
                v283 = (size_t)v273[5];
                if ((v283 & 0x8000000000000000) != 0)
                  goto LABEL_1646;
                v282 = (const void **)*v282;
                if (v283)
                {
                  if (!v282)
                    goto LABEL_1646;
                }
              }
              if ((v276 & 0x80) != 0)
              {
                if ((*((_QWORD *)&v277 + 1) & 0x8000000000000000) != 0)
                  goto LABEL_1646;
                v289 = *((_QWORD *)&v277 + 1);
                v288 = (std::string *)v277;
                if ((v279 & 1) == 0)
                  goto LABEL_1646;
              }
              else
              {
                v288 = __p;
                v289 = v276;
              }
              if (v289 >= v283)
                v290 = v283;
              else
                v290 = v289;
              v291 = memcmp(v282, v288, v290);
              if (v291)
              {
                if ((v291 & 0x80000000) == 0)
                  goto LABEL_659;
              }
              else if (v283 >= v289)
              {
LABEL_659:
                i = (const rtc::SSLCertificateStats *)v749;
                v134 = v732;
                goto LABEL_660;
              }
              v274 = v273[1];
              if (!v274)
              {
                v275 = v273 + 1;
                break;
              }
            }
            else
            {
              if (v281 >= v285)
                goto LABEL_636;
LABEL_620:
              v274 = *v273;
              v275 = v273;
              if (!*v273)
                break;
            }
          }
        }
        v292 = operator new(0x40uLL);
        v292[2] = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
        v293 = __p[0].__r_.__value_.__r.__words[2];
        memset(__p, 0, 32);
        *((_QWORD *)v292 + 6) = v293;
        *((_QWORD *)v292 + 7) = v182;
        *(_QWORD *)v292 = 0;
        *((_QWORD *)v292 + 1) = 0;
        *((_QWORD *)v292 + 2) = v273;
        *v275 = (uint64_t *)v292;
        i = (const rtc::SSLCertificateStats *)v749;
        v294 = **(_QWORD **)(v749 + 16);
        if (v294)
        {
          *(_QWORD *)(v749 + 16) = v294;
          v295 = *v275;
        }
        else
        {
          v295 = (uint64_t *)v292;
        }
        v134 = v732;
        v133 = (unint64_t)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v749 + 24), v295);
        ++*(_QWORD *)(v749 + 32);
        v182 = __p[1].__r_.__value_.__l.__data_;
        if (__p[1].__r_.__value_.__r.__words[0])
        {
LABEL_660:
          v133 = (*(uint64_t (**)(std::string::pointer))(*(_QWORD *)v182 + 8))(v182);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_347;
LABEL_661:
          if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_348;
LABEL_662:
          operator delete(__s.__r_.__value_.__l.__data_);
          v165 = v747 + 42;
          if (v747 + 42 == v730)
            break;
        }
        else
        {
          if ((SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_661;
LABEL_347:
          operator delete(__p[0].__r_.__value_.__l.__data_);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_662;
LABEL_348:
          v165 = v747 + 42;
          if (v747 + 42 == v730)
            break;
        }
      }
    }
    if (SHIBYTE(v757.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v757.__r_.__value_.__l.__data_);
      v9 = v743;
      if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_667;
LABEL_344:
      if ((SHIBYTE(__sz.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_345;
LABEL_668:
      operator delete(__sz.__r_.__value_.__l.__data_);
      v166 = (std::string::size_type *)v134[1];
      if (v166)
        goto LABEL_669;
      do
      {
LABEL_671:
        v296 = (std::string::size_type *)v134[2];
        v22 = *v296 == (_QWORD)v134;
        v134 = v296;
      }
      while (!v22);
    }
    else
    {
      v9 = v743;
      if ((SHIBYTE(__len.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_344;
LABEL_667:
      operator delete(__len.__r_.__value_.__l.__data_);
      if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_668;
LABEL_345:
      v166 = (std::string::size_type *)v134[1];
      if (!v166)
        goto LABEL_671;
      do
      {
LABEL_669:
        v296 = v166;
        v166 = (std::string::size_type *)*v166;
      }
      while (v166);
    }
    v134 = v296;
  }
  while (v296 != p_size);
LABEL_727:
  *(_BYTE *)(v707 + 217) = v706;
  v318 = (rtc::Thread *)rtc::Thread::Current((rtc::Thread *)v133);
  v319 = v318;
  v733 = *((_BYTE *)v318 + 217);
  *((_BYTE *)v318 + 217) = 0;
  v320 = *((_QWORD *)v744 + 27);
  v736 = (std::string *)*((_QWORD *)v744 + 28);
  if ((std::string *)v320 != v736)
  {
    v739 = (std::string *)((char *)i + 24);
    __dst = v318;
    while (1)
    {
      v321 = *(_DWORD *)(v320 + 8);
      v748 = v320;
      if (v321 == 1)
        break;
      if (!v321)
      {
        v318 = (rtc::Thread *)rtc::Thread::Current(v318);
        v322 = v318;
        v323 = *((_BYTE *)v318 + 217);
        *((_BYTE *)v318 + 217) = 0;
        if (!*(_BYTE *)(v320 + 40) || !*(_BYTE *)(v320 + 72))
          goto LABEL_730;
        if (*(char *)(v320 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(&__sz, *(const std::string::value_type **)(v320 + 16), *(_QWORD *)(v320 + 24));
          if (!*(_BYTE *)(v320 + 72))
            goto LABEL_1646;
        }
        else
        {
          __sz = *(std::string *)(v320 + 16);
        }
        if (*(_BYTE *)(v320 + 192))
        {
          v720 = v323;
          v723 = v322;
          v325 = *(_QWORD *)(v320 + 112);
          v324 = *(_QWORD *)(v320 + 120);
          if (v325 == v324)
          {
            *(_OWORD *)&v757.__r_.__value_.__r.__words[1] = 0uLL;
            v757.__r_.__value_.__r.__words[0] = (std::string::size_type)&v757.__r_.__value_.__l.__size_;
            v387 = *(_QWORD *)(v320 + 88);
            v388 = *(_QWORD *)(v320 + 96);
            if (v387 == v388)
              goto LABEL_1310;
            goto LABEL_1118;
          }
          v326 = (uint64_t *)(v320 + 168);
          v327 = (_QWORD *)(v320 + 360);
          while (1)
          {
            v328 = *(int **)(v325 + 160);
            if (*(int **)(v325 + 168) != v328)
              break;
LABEL_746:
            v325 += 528;
            if (v325 == v324)
            {
              v386 = *(unsigned __int8 *)(v320 + 192);
              *(_OWORD *)&v757.__r_.__value_.__r.__words[1] = 0uLL;
              v757.__r_.__value_.__r.__words[0] = (std::string::size_type)&v757.__r_.__value_.__l.__size_;
              if (!v386)
                goto LABEL_1646;
              v387 = *(_QWORD *)(v320 + 88);
              v388 = *(_QWORD *)(v320 + 96);
              if (v387 == v388)
                goto LABEL_1310;
LABEL_1118:
              v484 = (_QWORD *)(v320 + 144);
              v485 = (_QWORD *)(v320 + 336);
              v750 = v320 + 432;
              while (2)
              {
                v486 = *(int **)(v387 + 112);
                if (*(int **)(v387 + 120) == v486)
                  goto LABEL_1120;
                if (!*(_BYTE *)(v320 + 192))
                  goto LABEL_1646;
                v487 = operator new();
                __p[0] = __s;
                memset(&__s, 0, sizeof(__s));
                webrtc::RTCOutboundRtpStreamStats::RTCOutboundRtpStreamStats(v487, (uint64_t)__p, (uint64_t)v9);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                    goto LABEL_1131;
LABEL_1125:
                  v488 = *(_DWORD **)(v387 + 112);
                  if (*(_DWORD **)(v387 + 120) != v488)
                    goto LABEL_1126;
LABEL_1132:
                  *(_DWORD *)(v487 + 40) = 0;
                  *(_BYTE *)(v487 + 44) = 1;
                  v489 = *(unsigned int *)(v387 + 24);
                  if (!*(_BYTE *)(v487 + 152))
                    goto LABEL_1133;
LABEL_1127:
                  *(_QWORD *)(v487 + 144) = v489;
                  v490 = *(_QWORD *)(v387 + 192);
                  if (v490 != 0x8000000000000000)
                    goto LABEL_1128;
LABEL_1134:
                  v491 = 0xFFF0000000000000;
LABEL_1135:
                  v492 = *(double *)&v491;
                }
                else
                {
                  if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_1125;
LABEL_1131:
                  operator delete(__s.__r_.__value_.__l.__data_);
                  v488 = *(_DWORD **)(v387 + 112);
                  if (*(_DWORD **)(v387 + 120) == v488)
                    goto LABEL_1132;
LABEL_1126:
                  *(_DWORD *)(v487 + 40) = *v488;
                  *(_BYTE *)(v487 + 44) = 1;
                  v489 = *(unsigned int *)(v387 + 24);
                  if (*(_BYTE *)(v487 + 152))
                    goto LABEL_1127;
LABEL_1133:
                  *(_BYTE *)(v487 + 152) = 1;
                  *(_QWORD *)(v487 + 144) = v489;
                  v490 = *(_QWORD *)(v387 + 192);
                  if (v490 == 0x8000000000000000)
                    goto LABEL_1134;
LABEL_1128:
                  if (v490 == 0x7FFFFFFFFFFFFFFFLL)
                  {
                    v491 = 0x7FF0000000000000;
                    goto LABEL_1135;
                  }
                  v492 = (double)v490 * 0.000001;
                }
                *(double *)(v487 + 464) = v492;
                *(_BYTE *)(v487 + 472) = 1;
                *(_QWORD *)(v487 + 304) = *(_QWORD *)(v387 + 32);
                *(_BYTE *)(v487 + 312) = 1;
                *(_QWORD *)(v487 + 160) = *(_QWORD *)v387;
                *(_BYTE *)(v487 + 168) = 1;
                *(_QWORD *)(v487 + 320) = *(_QWORD *)(v387 + 8);
                *(_BYTE *)(v487 + 328) = 1;
                *(_QWORD *)(v487 + 336) = *(_QWORD *)(v387 + 16);
                *(_BYTE *)(v487 + 344) = 1;
                *(_DWORD *)(v487 + 632) = *(_DWORD *)(v387 + 40);
                *(_BYTE *)(v487 + 636) = 1;
                if (*(_BYTE *)(v387 + 185))
                  *(_WORD *)(v487 + 656) = *(unsigned __int8 *)(v387 + 184) | 0x100;
                v493 = (std::string *)(v487 + 80);
                if (*(_BYTE *)(v487 + 104))
                {
                  if (*(char *)(v487 + 103) < 0)
                  {
                    if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v496 = &__len;
                    else
                      v496 = (std::string *)__len.__r_.__value_.__r.__words[0];
                    if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v497 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
                    else
                      v497 = __len.__r_.__value_.__l.__size_;
                    std::string::__assign_no_alias<false>(v493, (const std::string::value_type *)v496, v497);
                    v494 = (std::string *)(v487 + 240);
                    if (*(_BYTE *)(v487 + 264))
                      goto LABEL_1162;
                  }
                  else
                  {
                    if ((*((_BYTE *)&__len.__r_.__value_.__s + 23) & 0x80) == 0)
                    {
                      *(_OWORD *)&v493->__r_.__value_.__l.__data_ = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
                      *(_QWORD *)(v487 + 96) = *((_QWORD *)&__len.__r_.__value_.__l + 2);
                      v494 = (std::string *)(v487 + 240);
                      if (!*(_BYTE *)(v487 + 264))
                        break;
LABEL_1162:
                      if (*(char *)(v487 + 263) < 0)
                      {
                        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v498 = &__sz;
                        else
                          v498 = (std::string *)__sz.__r_.__value_.__r.__words[0];
                        if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v499 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
                        else
                          v499 = __sz.__r_.__value_.__l.__size_;
                        std::string::__assign_no_alias<false>(v494, (const std::string::value_type *)v498, v499);
                        v495 = (char *)(v487 + 48);
                        if (!*(_BYTE *)(v487 + 72))
                          goto LABEL_1174;
                      }
                      else
                      {
                        if ((*((_BYTE *)&__sz.__r_.__value_.__s + 23) & 0x80) == 0)
                        {
                          *v494 = __sz;
                          v495 = (char *)(v487 + 48);
                          if (*(_BYTE *)(v487 + 72))
                            goto LABEL_1165;
LABEL_1174:
                          *(_BYTE *)(v487 + 71) = 5;
                          if (v495 <= "audio" && v487 + 53 > (unint64_t)"audio")
                            goto LABEL_1646;
                          v495[4] = 111;
                          *(_DWORD *)v495 = 1768191329;
                          *(_BYTE *)(v487 + 53) = 0;
                          *(_BYTE *)(v487 + 72) = 1;
                          if (!*(_BYTE *)(v387 + 56))
                          {
                            if (!*(_BYTE *)(v387 + 108))
                              goto LABEL_1197;
                            v501 = *v484;
                            if (!*v484)
                              goto LABEL_1197;
LABEL_1182:
                            v502 = *(_DWORD *)(v387 + 104);
                            v503 = v484;
                            do
                            {
                              v504 = *(_DWORD *)(v501 + 32);
                              v505 = v504 < v502;
                              if (v504 >= v502)
                                v506 = (uint64_t *)v501;
                              else
                                v506 = (uint64_t *)(v501 + 8);
                              if (!v505)
                                v503 = (_QWORD *)v501;
                              v501 = *v506;
                            }
                            while (*v506);
                            if (v503 != v484 && v502 >= *((_DWORD *)v503 + 8))
                            {
                              v507 = (void **)(v487 + 112);
                              if (*(_BYTE *)(v487 + 136))
                              {
                                if (*(char *)(v487 + 135) < 0)
                                  operator delete(*v507);
                                *(_OWORD *)v507 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                *(_QWORD *)(v487 + 128) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                                goto LABEL_1197;
                              }
                              *(_OWORD *)v507 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                              *(_QWORD *)(v487 + 128) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                              *(_BYTE *)(v487 + 136) = 1;
                              v508 = (_QWORD *)*v485;
                              if (!*v485)
                              {
LABEL_1208:
                                v513 = 0;
                                goto LABEL_1209;
                              }
                            }
                            else
                            {
LABEL_1197:
                              v508 = (_QWORD *)*v485;
                              if (!*v485)
                                goto LABEL_1208;
                            }
                            v509 = v485;
                            do
                            {
                              v510 = v508[4];
                              v511 = v510 >= v387;
                              if (v510 >= v387)
                                v512 = v508;
                              else
                                v512 = v508 + 1;
                              if (v511)
                                v509 = v508;
                              v508 = (_QWORD *)*v512;
                            }
                            while (*v512);
                            if (v509 == v485 || v509[4] > v387)
                              goto LABEL_1208;
                            v513 = v509[5];
                            if (v513)
                            {
                              (**(void (***)(unint64_t))v513)(v513);
                              v515 = *(_QWORD **)v750;
                              if (!*(_QWORD *)v750)
                                goto LABEL_1649;
                              v516 = v750;
                              do
                              {
                                v517 = v515[4];
                                v518 = v517 >= v513;
                                if (v517 >= v513)
                                  v519 = v515;
                                else
                                  v519 = v515 + 1;
                                if (v518)
                                  v516 = (unint64_t)v515;
                                v515 = (_QWORD *)*v519;
                              }
                              while (*v519);
                              if (v516 == v750 || *(_QWORD *)(v516 + 32) > v513)
                                goto LABEL_1649;
                              v520 = (void **)(v487 + 176);
                              if (*(_BYTE *)(v487 + 200))
                              {
                                if (*(char *)(v487 + 199) < 0)
                                  operator delete(*v520);
                                *(_OWORD *)v520 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                *(_QWORD *)(v487 + 192) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                                v514 = 0;
                                if (*(char *)(v487 + 31) < 0)
                                {
LABEL_1233:
                                  std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v487 + 8), *(_QWORD *)(v487 + 16));
LABEL_1234:
                                  __p[1].__r_.__value_.__r.__words[0] = v487;
                                  v755 = (webrtc::RTCOutboundRtpStreamStats *)v487;
                                  v521 = webrtc::RTCStatsReport::TryAddStats<webrtc::RTCOutboundRtpStreamStats>(v749, &v755);
                                  v522 = v755;
                                  v755 = 0;
                                  if (v522)
                                  {
                                    webrtc::RTCOutboundRtpStreamStats::~RTCOutboundRtpStreamStats(v522);
                                    MEMORY[0x20BD0ADEC]();
                                  }
                                  if (v521)
                                  {
                                    v523 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v757, &__s, (const void **)&__p[0].__r_.__value_.__l.__data_);
                                    if (!*v523)
                                    {
                                      v524 = (uint64_t **)v523;
                                      v525 = operator new(0x40uLL);
                                      v525[2] = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                      memset(__p, 0, 24);
                                      v525[3] = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
                                      v526 = __s.__r_.__value_.__r.__words[0];
                                      *(_QWORD *)v525 = 0;
                                      *((_QWORD *)v525 + 1) = 0;
                                      *((_QWORD *)v525 + 2) = v526;
                                      *v524 = (uint64_t *)v525;
                                      if (*(_QWORD *)v757.__r_.__value_.__l.__data_)
                                      {
                                        v757.__r_.__value_.__r.__words[0] = *(_QWORD *)v757.__r_.__value_.__l.__data_;
                                        v527 = *v524;
                                      }
                                      else
                                      {
                                        v527 = (uint64_t *)v525;
                                      }
                                      std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v757.__r_.__value_.__l.__size_, v527);
                                      ++v757.__r_.__value_.__r.__words[2];
                                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                      {
LABEL_1247:
                                        operator delete(__p[0].__r_.__value_.__l.__data_);
                                        if ((v514 & 1) == 0)
                                          goto LABEL_1248;
                                        goto LABEL_1119;
                                      }
LABEL_1243:
                                      if ((v514 & 1) == 0)
LABEL_1248:
                                        (*(void (**)(unint64_t))(*(_QWORD *)v513 + 8))(v513);
LABEL_1119:
                                      v320 = v748;
LABEL_1120:
                                      v387 += 392;
                                      if (v387 == v388)
                                      {
                                        if (*(_BYTE *)(v320 + 192))
                                        {
                                          v535 = *(_QWORD *)(v320 + 88);
                                          v718 = *(_QWORD *)(v320 + 96);
                                          if (v535 != v718)
                                          {
                                            while (1)
                                            {
                                              v726 = v535;
                                              v536 = *(_QWORD *)(v535 + 160);
                                              v745 = *(_QWORD *)(v535 + 168);
                                              v537 = v749;
                                              if (v536 != v745)
                                                break;
LABEL_1252:
                                              v535 = v726 + 392;
                                              v320 = v748;
                                              if (v726 + 392 == v718)
                                                goto LABEL_1310;
                                            }
                                            while (1)
                                            {
                                              v538 = v751;
                                              v750 = v536;
                                              if (*((char *)v751 + 31) < 0)
                                              {
                                                std::string::__init_copy_ctor_external(&__s, *((const std::string::value_type **)v751 + 1), *((_QWORD *)v751 + 2));
                                              }
                                              else
                                              {
                                                v539 = *(_OWORD *)((char *)v751 + 8);
                                                __s.__r_.__value_.__r.__words[2] = *((_QWORD *)v751 + 3);
                                                *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v539;
                                              }
                                              *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = *(_OWORD *)&__s.__r_.__value_.__l.__data_;
                                              v540 = __s.__r_.__value_.__r.__words[2];
                                              memset(&__s, 0, sizeof(__s));
                                              __p[0].__r_.__value_.__r.__words[2] = v540;
                                              __p[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v538;
                                              v541 = (std::string::__raw *)v739;
                                              v542 = v739->__r_.__value_.__r.__words[0];
                                              v543 = (std::string::__raw *)v739;
                                              if (v739->__r_.__value_.__r.__words[0])
                                                break;
LABEL_1299:
                                              v560 = operator new(0x40uLL);
                                              v560[2] = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                              v561 = __p[0].__r_.__value_.__r.__words[2];
                                              memset(__p, 0, 32);
                                              *((_QWORD *)v560 + 6) = v561;
                                              *((_QWORD *)v560 + 7) = v538;
                                              *(_QWORD *)v560 = 0;
                                              *((_QWORD *)v560 + 1) = 0;
                                              *((_QWORD *)v560 + 2) = v541;
                                              v543->__words[0] = (std::string::size_type)v560;
                                              v537 = v749;
                                              v562 = **(_QWORD **)(v749 + 16);
                                              if (v562)
                                              {
                                                *(_QWORD *)(v749 + 16) = v562;
                                                v563 = (uint64_t *)v543->__words[0];
                                              }
                                              else
                                              {
                                                v563 = (uint64_t *)v560;
                                              }
                                              std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v749 + 24), v563);
                                              ++*(_QWORD *)(v749 + 32);
                                              v538 = __p[1].__r_.__value_.__l.__data_;
                                              v9 = v743;
                                              if (__p[1].__r_.__value_.__r.__words[0])
                                                goto LABEL_1303;
LABEL_1304:
                                              if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                              {
                                                operator delete(__p[0].__r_.__value_.__l.__data_);
                                                if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                                  goto LABEL_1255;
                                              }
                                              else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                                              {
LABEL_1255:
                                                v536 += 56;
                                                if (v536 == v745)
                                                  goto LABEL_1252;
                                                continue;
                                              }
                                              operator delete(__s.__r_.__value_.__l.__data_);
                                              v536 += 56;
                                              if (v536 == v745)
                                                goto LABEL_1252;
                                            }
                                            v544 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                                            v545 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                            if (__p[0].__r_.__value_.__l.__size_)
                                              v546 = __p[0].__r_.__value_.__r.__words[0] == 0;
                                            else
                                              v546 = 0;
                                            v547 = !v546;
                                            while (1)
                                            {
                                              v541 = (std::string::__raw *)v542;
                                              if ((v544 & 0x80) != 0)
                                              {
                                                if ((*((_QWORD *)&v545 + 1) & 0x8000000000000000) != 0)
                                                  goto LABEL_1646;
                                                v549 = *((_QWORD *)&v545 + 1);
                                                v548 = (std::string *)v545;
                                                if ((v547 & 1) == 0)
                                                  goto LABEL_1646;
                                              }
                                              else
                                              {
                                                v548 = __p;
                                                v549 = v544;
                                              }
                                              v550 = (const void **)(v542 + 32);
                                              v551 = *(unsigned __int8 *)(v542 + 55);
                                              v552 = (const void *)(v542 + 32);
                                              v553 = v551;
                                              if (*(char *)(v542 + 55) < 0)
                                              {
                                                v553 = *(_QWORD *)(v542 + 40);
                                                if ((v553 & 0x8000000000000000) != 0)
                                                  goto LABEL_1646;
                                                v552 = *v550;
                                                if (v553)
                                                {
                                                  if (!v552)
                                                    goto LABEL_1646;
                                                }
                                              }
                                              if (v553 >= v549)
                                                v554 = v549;
                                              else
                                                v554 = v553;
                                              v555 = memcmp(v548, v552, v554);
                                              if (v555)
                                              {
                                                if (v555 < 0)
                                                  goto LABEL_1266;
                                              }
                                              else if (v549 < v553)
                                              {
LABEL_1266:
                                                v542 = v541->__words[0];
                                                v543 = v541;
                                                if (!v541->__words[0])
                                                  goto LABEL_1299;
                                                continue;
                                              }
                                              if ((v551 & 0x80) != 0)
                                              {
                                                v551 = v541[1].__words[2];
                                                if ((v551 & 0x8000000000000000) != 0)
                                                  goto LABEL_1646;
                                                v550 = (const void **)*v550;
                                                if (v551)
                                                {
                                                  if (!v550)
                                                    goto LABEL_1646;
                                                }
                                              }
                                              if ((v544 & 0x80) != 0)
                                              {
                                                if ((*((_QWORD *)&v545 + 1) & 0x8000000000000000) != 0)
                                                  goto LABEL_1646;
                                                v557 = *((_QWORD *)&v545 + 1);
                                                v556 = (std::string *)v545;
                                                if ((v547 & 1) == 0)
                                                  goto LABEL_1646;
                                              }
                                              else
                                              {
                                                v556 = __p;
                                                v557 = v544;
                                              }
                                              if (v557 >= v551)
                                                v558 = v551;
                                              else
                                                v558 = v557;
                                              v559 = memcmp(v550, v556, v558);
                                              if (v559)
                                              {
                                                if ((v559 & 0x80000000) == 0)
                                                  goto LABEL_1308;
                                              }
                                              else if (v551 >= v557)
                                              {
LABEL_1308:
                                                v537 = v749;
                                                v9 = v743;
                                                if (!v538)
                                                  goto LABEL_1304;
LABEL_1303:
                                                (*(void (**)(void *))(*(_QWORD *)v538 + 8))(v538);
                                                goto LABEL_1304;
                                              }
                                              v542 = v541->__words[1];
                                              if (!v542)
                                              {
                                                v543 = (std::string::__raw *)&v541->__words[1];
                                                goto LABEL_1299;
                                              }
                                            }
                                          }
LABEL_1310:
                                          std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy((char *)v757.__r_.__value_.__l.__size_);
                                          if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
                                            operator delete(__len.__r_.__value_.__l.__data_);
                                          v319 = __dst;
                                          v322 = v723;
                                          v323 = v720;
                                          if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
                                          {
                                            v564 = (void *)__sz.__r_.__value_.__r.__words[0];
                                            goto LABEL_729;
                                          }
                                          goto LABEL_730;
                                        }
                                        goto LABEL_1646;
                                      }
                                      continue;
                                    }
                                  }
                                  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                                  {
                                    v745 = v745 & 0xFFFFFFFF00000000 | 0x36D3;
                                    rtc::webrtc_logging_impl::Log("\r\t", v528, v529, v530, v531, v532, v533, v534, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
                                  }
                                  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                    goto LABEL_1247;
                                  goto LABEL_1243;
                                }
                              }
                              else
                              {
                                *(_OWORD *)v520 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                *(_QWORD *)(v487 + 192) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                                *(_BYTE *)(v487 + 200) = 1;
                                v514 = 0;
                                if (*(char *)(v487 + 31) < 0)
                                  goto LABEL_1233;
                              }
                            }
                            else
                            {
LABEL_1209:
                              v514 = 1;
                              if (*(char *)(v487 + 31) < 0)
                                goto LABEL_1233;
                            }
                            __p[0] = *(std::string *)(v487 + 8);
                            goto LABEL_1234;
                          }
LABEL_1180:
                          v500 = *(double *)(v387 + 48);
                          if (v500 > 0.0)
                          {
                            *(double *)(v487 + 352) = v500;
                            *(_BYTE *)(v487 + 360) = 1;
                          }
                          goto LABEL_1182;
                        }
                        std::string::__assign_no_alias<true>(v494, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
                        v495 = (char *)(v487 + 48);
                        if (!*(_BYTE *)(v487 + 72))
                          goto LABEL_1174;
                      }
LABEL_1165:
                      if (*(char *)(v487 + 71) < 0)
                      {
                        *(_QWORD *)(v487 + 56) = 5;
                        v495 = *(char **)(v487 + 48);
                      }
                      else
                      {
                        *(_BYTE *)(v487 + 71) = 5;
                      }
                      strcpy(v495, "audio");
                      if (!*(_BYTE *)(v387 + 56))
                        goto LABEL_1182;
                      goto LABEL_1180;
                    }
                    std::string::__assign_no_alias<true>(v493, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
                    v494 = (std::string *)(v487 + 240);
                    if (*(_BYTE *)(v487 + 264))
                      goto LABEL_1162;
                  }
                }
                else if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v493, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
                  *(_BYTE *)(v487 + 104) = 1;
                  v494 = (std::string *)(v487 + 240);
                  if (*(_BYTE *)(v487 + 264))
                    goto LABEL_1162;
                }
                else
                {
                  *(_OWORD *)&v493->__r_.__value_.__l.__data_ = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
                  *(_QWORD *)(v487 + 96) = *((_QWORD *)&__len.__r_.__value_.__l + 2);
                  *(_BYTE *)(v487 + 104) = 1;
                  v494 = (std::string *)(v487 + 240);
                  if (*(_BYTE *)(v487 + 264))
                    goto LABEL_1162;
                }
                break;
              }
              if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(v494, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
                *(_BYTE *)(v487 + 264) = 1;
                v495 = (char *)(v487 + 48);
                if (*(_BYTE *)(v487 + 72))
                  goto LABEL_1165;
              }
              else
              {
                *v494 = __sz;
                *(_BYTE *)(v487 + 264) = 1;
                v495 = (char *)(v487 + 48);
                if (*(_BYTE *)(v487 + 72))
                  goto LABEL_1165;
              }
              goto LABEL_1174;
            }
          }
          if (!*(_BYTE *)(v320 + 192))
            goto LABEL_1646;
          v329 = operator new();
          __p[0] = __s;
          memset(&__s, 0, sizeof(__s));
          webrtc::RTCInboundRtpStreamStats::RTCInboundRtpStreamStats(v329, (uint64_t)__p, (uint64_t)v9);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(__p[0].__r_.__value_.__l.__data_);
            if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_751:
              v330 = (std::string *)(v329 + 80);
              if (*(_BYTE *)(v329 + 104))
                goto LABEL_752;
              goto LABEL_760;
            }
          }
          else if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_751;
          }
          operator delete(__s.__r_.__value_.__l.__data_);
          v330 = (std::string *)(v329 + 80);
          if (*(_BYTE *)(v329 + 104))
          {
LABEL_752:
            if (*(char *)(v329 + 103) < 0)
            {
              if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v333 = &__len;
              else
                v333 = (std::string *)__len.__r_.__value_.__r.__words[0];
              if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v334 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
              else
                v334 = __len.__r_.__value_.__l.__size_;
              std::string::__assign_no_alias<false>(v330, (const std::string::value_type *)v333, v334);
              v331 = (std::string *)(v329 + 232);
              if (*(_BYTE *)(v329 + 256))
                goto LABEL_776;
            }
            else
            {
              if ((*((_BYTE *)&__len.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                *v330 = __len;
                v331 = (std::string *)(v329 + 232);
                if (!*(_BYTE *)(v329 + 256))
                  goto LABEL_755;
LABEL_776:
                if (*(char *)(v329 + 255) < 0)
                {
                  if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v335 = &__sz;
                  else
                    v335 = (std::string *)__sz.__r_.__value_.__r.__words[0];
                  if ((__sz.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v336 = HIBYTE(__sz.__r_.__value_.__r.__words[2]);
                  else
                    v336 = __sz.__r_.__value_.__l.__size_;
                  std::string::__assign_no_alias<false>(v331, (const std::string::value_type *)v335, v336);
                  v332 = (char *)(v329 + 48);
                  if (*(_BYTE *)(v329 + 72))
                    goto LABEL_779;
                }
                else
                {
                  if ((*((_BYTE *)&__sz.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
                    std::string::__assign_no_alias<true>(v331, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
                    v332 = (char *)(v329 + 48);
                    if (!*(_BYTE *)(v329 + 72))
                      goto LABEL_788;
                    goto LABEL_779;
                  }
                  *v331 = __sz;
                  v332 = (char *)(v329 + 48);
                  if (*(_BYTE *)(v329 + 72))
                    goto LABEL_779;
                }
LABEL_788:
                *(_BYTE *)(v329 + 71) = 5;
                if (v332 <= "audio" && v329 + 53 > (unint64_t)"audio")
                  goto LABEL_1646;
                v332[4] = 111;
                *(_DWORD *)v332 = 1768191329;
                *(_BYTE *)(v329 + 53) = 0;
                *(_BYTE *)(v329 + 72) = 1;
                if (!*(_BYTE *)(v325 + 156))
                {
LABEL_811:
                  *(double *)(v329 + 144) = (double)*(int *)(v325 + 340) / 1000.0;
                  *(_BYTE *)(v329 + 152) = 1;
                  *(_QWORD *)(v329 + 528) = *(_QWORD *)(v325 + 368);
                  *(_BYTE *)(v329 + 536) = 1;
                  *(_QWORD *)(v329 + 544) = *(_QWORD *)(v325 + 384);
                  *(_BYTE *)(v329 + 552) = 1;
                  *(_QWORD *)(v329 + 560) = *(_QWORD *)(v325 + 392);
                  *(_BYTE *)(v329 + 568) = 1;
                  *(_QWORD *)(v329 + 576) = *(_QWORD *)(v325 + 400);
                  *(_BYTE *)(v329 + 584) = 1;
                  *(_QWORD *)(v329 + 592) = *(_QWORD *)(v325 + 408);
                  *(_BYTE *)(v329 + 600) = 1;
                  *(_QWORD *)(v329 + 608) = *(_QWORD *)(v325 + 416);
                  *(_BYTE *)(v329 + 616) = 1;
                  v344 = *(_DWORD *)(v325 + 356);
                  if ((v344 & 0x80000000) == 0)
                  {
                    *(double *)(v329 + 624) = (double)v344 / 32767.0;
                    *(_BYTE *)(v329 + 632) = 1;
                  }
                  *(_QWORD *)(v329 + 640) = *(_QWORD *)(v325 + 360);
                  *(_BYTE *)(v329 + 648) = 1;
                  *(_QWORD *)(v329 + 656) = *(_QWORD *)(v325 + 376);
                  *(_BYTE *)(v329 + 664) = 1;
                  if (!*(_BYTE *)(v325 + 104))
                    goto LABEL_821;
                  v345 = *(_QWORD *)(v325 + 96);
                  if (v345 == 0x8000000000000000)
                  {
                    v346 = 0xFFF0000000000000;
                  }
                  else
                  {
                    if (v345 != 0x7FFFFFFFFFFFFFFFLL)
                    {
                      v347 = (double)v345 * 0.001;
                      goto LABEL_820;
                    }
                    v346 = 0x7FF0000000000000;
                  }
                  v347 = *(double *)&v346;
LABEL_820:
                  *(double *)(v329 + 448) = v347;
                  *(_BYTE *)(v329 + 456) = 1;
LABEL_821:
                  if (*(_BYTE *)(v325 + 120))
                  {
                    *(double *)(v329 + 904) = (double)*(uint64_t *)(v325 + 112);
                    *(_BYTE *)(v329 + 912) = 1;
                  }
                  *(_QWORD *)(v329 + 304) = *(_QWORD *)(v325 + 424);
                  *(_BYTE *)(v329 + 312) = 1;
                  *(_QWORD *)(v329 + 1032) = *(_QWORD *)(v325 + 496);
                  *(_BYTE *)(v329 + 1040) = 1;
                  *(_QWORD *)(v329 + 1048) = *(_QWORD *)(v325 + 504);
                  *(_BYTE *)(v329 + 1056) = 1;
                  *(_QWORD *)(v329 + 1064) = *(_QWORD *)(v325 + 512);
                  *(_BYTE *)(v329 + 1072) = 1;
                  v348 = *(_DWORD *)(v325 + 520);
                  if (!*(_BYTE *)(v329 + 1084))
                    *(_BYTE *)(v329 + 1084) = 1;
                  *(_DWORD *)(v329 + 1080) = v348 & ~(v348 >> 31);
                  *(double *)(v329 + 1088) = (double)*(int *)(v325 + 524) / 1000.0;
                  v349 = 1;
                  *(_BYTE *)(v329 + 1096) = 1;
                  v350 = (_QWORD *)*v327;
                  if (*v327)
                  {
                    v351 = (_QWORD *)(v320 + 360);
                    do
                    {
                      v352 = v350[4];
                      v353 = v352 >= v325;
                      if (v352 >= v325)
                        v354 = v350;
                      else
                        v354 = v350 + 1;
                      if (v353)
                        v351 = v350;
                      v350 = (_QWORD *)*v354;
                    }
                    while (*v354);
                    if (v351 == v327 || v351[4] > v325)
                    {
                      v355 = 0;
                      v349 = 1;
                    }
                    else
                    {
                      v355 = v351[5];
                      if (v355)
                      {
                        (**(void (***)(uint64_t))v355)(v355);
                        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v355 + 40))(__p, v355);
                        v356 = (void **)(v329 + 200);
                        if (*(_BYTE *)(v329 + 224))
                        {
                          if (*(char *)(v329 + 223) < 0)
                            operator delete(*v356);
                          *(_OWORD *)v356 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                          *(_QWORD *)(v329 + 216) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                        }
                        else
                        {
                          *(_OWORD *)v356 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                          *(_QWORD *)(v329 + 216) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                          *(_BYTE *)(v329 + 224) = 1;
                        }
                        v349 = 0;
                      }
                      else
                      {
                        v349 = 1;
                      }
                    }
                  }
                  else
                  {
                    v355 = 0;
                  }
                  if (*((_BYTE *)v744 + 400))
                    v357 = *(_DWORD *)(v320 + 8) == 0;
                  else
                    v357 = 0;
                  v358 = !v357 || *(_BYTE *)(v320 + 548) == 0;
                  if (!v358 && (*(_DWORD *)(v320 + 544) | 2) == 2)
                  {
                    v359 = (char *)(v329 + 168);
                    if (*(_BYTE *)(v329 + 192))
                    {
                      if (*(char *)(v329 + 191) < 0)
                      {
                        *(_QWORD *)(v329 + 176) = 2;
                        v359 = *(char **)(v329 + 168);
                      }
                      else
                      {
                        *(_BYTE *)(v329 + 191) = 2;
                      }
                      strcpy(v359, "AP");
                    }
                    else
                    {
                      *(_BYTE *)(v329 + 191) = 2;
                      {
                        goto LABEL_1646;
                      }
                      strcpy((char *)(v329 + 168), "AP");
                      *(_BYTE *)(v329 + 192) = 1;
                    }
                  }
                  v752 = (webrtc::RTCInboundRtpStreamStats *)v329;
                  v360 = webrtc::RTCStatsReport::TryAddStats<webrtc::RTCInboundRtpStreamStats>(v749, &v752);
                  v361 = (void **)v752;
                  v752 = 0;
                  if (v361)
                  {
                    webrtc::RTCInboundRtpStreamStats::~RTCInboundRtpStreamStats(v361);
                    MEMORY[0x20BD0ADEC]();
                  }
                  if (v360)
                  {
                    v362 = (webrtc::RTCInboundRtpStreamStats *)__p[0].__r_.__value_.__r.__words[0];
                    if (__p[0].__r_.__value_.__r.__words[0])
                    {
                      __p[0].__r_.__value_.__r.__words[0] = 0;
                      v756 = v362;
                      v363 = webrtc::RTCStatsReport::TryAddStats<webrtc::RTCRemoteOutboundRtpStreamStats>(v749, &v756);
                      v364 = (void **)v756;
                      v756 = 0;
                      if (v364)
                      {
                        webrtc::RTCRemoteOutboundRtpStreamStats::~RTCRemoteOutboundRtpStreamStats(v364);
                        MEMORY[0x20BD0ADEC]();
                      }
                      if (v363)
                      {
                        v365 = (std::string *)((char *)v363 + 8);
                        v366 = (std::string *)((char *)v360 + 264);
                        if (*((_BYTE *)v360 + 288))
                        {
                          if (v366 != v365)
                          {
                            v367 = *((_BYTE *)v363 + 31);
                            if (*((char *)v360 + 287) < 0)
                            {
                              if (v367 >= 0)
                                v384 = (char *)v363 + 8;
                              else
                                v384 = (const std::string::value_type *)*((_QWORD *)v363 + 1);
                              if (v367 >= 0)
                                v385 = *((unsigned __int8 *)v363 + 31);
                              else
                                v385 = *((_QWORD *)v363 + 2);
                              std::string::__assign_no_alias<false>(v366, v384, v385);
                            }
                            else if ((*((_BYTE *)v363 + 31) & 0x80) != 0)
                            {
                              std::string::__assign_no_alias<true>(v366, *((char **)v363 + 1), *((_QWORD *)v363 + 2));
                            }
                            else
                            {
                              v368 = *(_OWORD *)&v365->__r_.__value_.__l.__data_;
                              *((_QWORD *)v360 + 35) = *((_QWORD *)v363 + 3);
                              *(_OWORD *)&v366->__r_.__value_.__l.__data_ = v368;
                            }
                          }
                        }
                        else
                        {
                          if (*((char *)v363 + 31) < 0)
                          {
                            std::string::__init_copy_ctor_external(v366, *((const std::string::value_type **)v363 + 1), *((_QWORD *)v363 + 2));
                          }
                          else
                          {
                            v383 = *(_OWORD *)&v365->__r_.__value_.__l.__data_;
                            *((_QWORD *)v360 + 35) = *((_QWORD *)v363 + 3);
                            *(_OWORD *)&v366->__r_.__value_.__l.__data_ = v383;
                          }
                          *((_BYTE *)v360 + 288) = 1;
                        }
                      }
                      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                      {
                        v745 = v745 & 0xFFFFFFFF00000000 | 0x35EB;
                        rtc::webrtc_logging_impl::Log("\r\t\t", v376, v377, v378, v379, v380, v381, v382, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
                      }
                    }
                  }
                  else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                  {
                    v750 = v750 & 0xFFFFFFFF00000000 | 0x3563;
                    rtc::webrtc_logging_impl::Log("\r\t", v369, v370, v371, v372, v373, v374, v375, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
                  }
                  if ((v349 & 1) == 0)
                    (*(void (**)(uint64_t))(*(_QWORD *)v355 + 8))(v355);
                  goto LABEL_746;
                }
LABEL_794:
                v337 = *v326;
                if (*v326)
                {
                  v338 = *(_DWORD *)(v325 + 152);
                  v339 = v320 + 168;
                  do
                  {
                    v340 = *(_DWORD *)(v337 + 32);
                    v341 = v340 < v338;
                    if (v340 >= v338)
                      v342 = (uint64_t *)v337;
                    else
                      v342 = (uint64_t *)(v337 + 8);
                    if (!v341)
                      v339 = v337;
                    v337 = *v342;
                  }
                  while (*v342);
                  if ((uint64_t *)v339 != v326 && v338 >= *(_DWORD *)(v339 + 32))
                  {
                    v343 = (void **)(v329 + 112);
                    if (*(_BYTE *)(v329 + 136))
                    {
                      if (*(char *)(v329 + 135) < 0)
                        operator delete(*v343);
                      *(_OWORD *)v343 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                      *(_QWORD *)(v329 + 128) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                    }
                    else
                    {
                      *(_OWORD *)v343 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                      *(_QWORD *)(v329 + 128) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                      *(_BYTE *)(v329 + 136) = 1;
                    }
                  }
                }
                goto LABEL_811;
              }
              std::string::__assign_no_alias<true>(v330, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
              v331 = (std::string *)(v329 + 232);
              if (*(_BYTE *)(v329 + 256))
                goto LABEL_776;
            }
LABEL_755:
            if (SHIBYTE(__sz.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v331, __sz.__r_.__value_.__l.__data_, __sz.__r_.__value_.__l.__size_);
              *(_BYTE *)(v329 + 256) = 1;
              v332 = (char *)(v329 + 48);
              if (!*(_BYTE *)(v329 + 72))
                goto LABEL_788;
            }
            else
            {
              *v331 = __sz;
              *(_BYTE *)(v329 + 256) = 1;
              v332 = (char *)(v329 + 48);
              if (!*(_BYTE *)(v329 + 72))
                goto LABEL_788;
            }
LABEL_779:
            if (*(char *)(v329 + 71) < 0)
            {
              *(_QWORD *)(v329 + 56) = 5;
              v332 = *(char **)(v329 + 48);
            }
            else
            {
              *(_BYTE *)(v329 + 71) = 5;
            }
            strcpy(v332, "audio");
            if (!*(_BYTE *)(v325 + 156))
              goto LABEL_811;
            goto LABEL_794;
          }
LABEL_760:
          if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v330, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
            *(_BYTE *)(v329 + 104) = 1;
            v331 = (std::string *)(v329 + 232);
            if (*(_BYTE *)(v329 + 256))
              goto LABEL_776;
          }
          else
          {
            *v330 = __len;
            *(_BYTE *)(v329 + 104) = 1;
            v331 = (std::string *)(v329 + 232);
            if (*(_BYTE *)(v329 + 256))
              goto LABEL_776;
          }
          goto LABEL_755;
        }
        goto LABEL_1646;
      }
LABEL_731:
      v320 += 552;
      if ((std::string *)v320 == v736)
        goto LABEL_1642;
    }
    v318 = (rtc::Thread *)rtc::Thread::Current(v318);
    v322 = v318;
    v323 = *((_BYTE *)v318 + 217);
    *((_BYTE *)v318 + 217) = 0;
    if (!*(_BYTE *)(v320 + 40) || !*(_BYTE *)(v320 + 72))
      goto LABEL_730;
    if (*(char *)(v320 + 39) < 0)
    {
      std::string::__init_copy_ctor_external(&__len, *(const std::string::value_type **)(v320 + 16), *(_QWORD *)(v320 + 24));
      if (!*(_BYTE *)(v320 + 72))
        goto LABEL_1646;
    }
    else
    {
      __len = *(std::string *)(v320 + 16);
    }
    v721 = v323;
    if (!*(_BYTE *)(v320 + 320))
    {
LABEL_1646:
      __break(1u);
      goto LABEL_1647;
    }
    v717 = v322;
    v390 = *(_QWORD *)(v320 + 248);
    v389 = *(_QWORD *)(v320 + 256);
    if (v390 == v389)
    {
      v753 = 0;
      v754 = 0;
      v752 = (webrtc::RTCInboundRtpStreamStats *)&v753;
      goto LABEL_1316;
    }
    v391 = (uint64_t *)(v320 + 304);
    v392 = (_QWORD *)(v320 + 408);
    while (2)
    {
      v393 = *(int **)(v390 + 160);
      if (*(int **)(v390 + 168) == v393)
        goto LABEL_899;
      if (!*(_BYTE *)(v320 + 320))
        goto LABEL_1646;
      v394 = operator new();
      __p[0] = __s;
      memset(&__s, 0, sizeof(__s));
      webrtc::RTCInboundRtpStreamStats::RTCInboundRtpStreamStats(v394, (uint64_t)__p, (uint64_t)v9);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p[0].__r_.__value_.__l.__data_);
        if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_909;
LABEL_904:
        v395 = (std::string *)(v394 + 80);
        if (*(_BYTE *)(v394 + 104))
          goto LABEL_905;
LABEL_910:
        if (SHIBYTE(v757.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(v395, v757.__r_.__value_.__l.__data_, v757.__r_.__value_.__l.__size_);
        else
          *v395 = v757;
        *(_BYTE *)(v394 + 104) = 1;
      }
      else
      {
        if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_904;
LABEL_909:
        operator delete(__s.__r_.__value_.__l.__data_);
        v395 = (std::string *)(v394 + 80);
        if (!*(_BYTE *)(v394 + 104))
          goto LABEL_910;
LABEL_905:
        if (*(char *)(v394 + 103) < 0)
        {
          if ((v757.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v396 = &v757;
          else
            v396 = (std::string *)v757.__r_.__value_.__r.__words[0];
          if ((v757.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v397 = HIBYTE(v757.__r_.__value_.__r.__words[2]);
          else
            v397 = v757.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v395, (const std::string::value_type *)v396, v397);
        }
        else if ((*((_BYTE *)&v757.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v395, v757.__r_.__value_.__l.__data_, v757.__r_.__value_.__l.__size_);
        }
        else
        {
          *v395 = v757;
        }
      }
      v398 = (std::string *)(v394 + 232);
      if (*(_BYTE *)(v394 + 256))
      {
        if (*(char *)(v394 + 255) < 0)
        {
          if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v401 = &__len;
          else
            v401 = (std::string *)__len.__r_.__value_.__r.__words[0];
          if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v402 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
          else
            v402 = __len.__r_.__value_.__l.__size_;
          std::string::__assign_no_alias<false>(v398, (const std::string::value_type *)v401, v402);
        }
        else
        {
          if ((*((_BYTE *)&__len.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            HIDWORD(v399) = HIDWORD(__len.__r_.__value_.__r.__words[0]);
            *(_OWORD *)&v398->__r_.__value_.__l.__data_ = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
            *(_QWORD *)(v394 + 248) = *((_QWORD *)&__len.__r_.__value_.__l + 2);
            v400 = (char *)(v394 + 48);
            if (!*(_BYTE *)(v394 + 72))
              break;
LABEL_942:
            if (*(char *)(v394 + 71) < 0)
            {
              *(_QWORD *)(v394 + 56) = 5;
              v400 = *(char **)(v394 + 48);
            }
            else
            {
              *(_BYTE *)(v394 + 71) = 5;
            }
            strcpy(v400, "video");
            if (*(_BYTE *)(v390 + 156))
            {
LABEL_946:
              v403 = *v391;
              if (*v391)
              {
                v404 = *(_DWORD *)(v390 + 152);
                v405 = v320 + 304;
                do
                {
                  v406 = *(_DWORD *)(v403 + 32);
                  v407 = v406 < v404;
                  if (v406 >= v404)
                    v408 = (uint64_t *)v403;
                  else
                    v408 = (uint64_t *)(v403 + 8);
                  if (!v407)
                    v405 = v403;
                  v403 = *v408;
                }
                while (*v408);
                if ((uint64_t *)v405 != v391 && v404 >= *(_DWORD *)(v405 + 32))
                {
                  v409 = (void **)(v394 + 112);
                  if (*(_BYTE *)(v394 + 136))
                  {
                    if (*(char *)(v394 + 135) < 0)
                      operator delete(*v409);
                    HIDWORD(v399) = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
                    *(_OWORD *)v409 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                    *(_QWORD *)(v394 + 128) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                  }
                  else
                  {
                    HIDWORD(v399) = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
                    *(_OWORD *)v409 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                    *(_QWORD *)(v394 + 128) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                    *(_BYTE *)(v394 + 136) = 1;
                  }
                }
              }
            }
LABEL_963:
            LODWORD(v399) = *(_DWORD *)(v390 + 552);
            *(double *)(v394 + 144) = (double)v399 / 1000.0;
            *(_BYTE *)(v394 + 152) = 1;
            *(_DWORD *)(v394 + 952) = *(_DWORD *)(v390 + 408);
            *(_BYTE *)(v394 + 956) = 1;
            *(_DWORD *)(v394 + 960) = *(_DWORD *)(v390 + 412);
            *(_BYTE *)(v394 + 964) = 1;
            *(_DWORD *)(v394 + 672) = *(_DWORD *)(v390 + 444);
            *(_BYTE *)(v394 + 676) = 1;
            *(_DWORD *)(v394 + 712) = *(_DWORD *)(v390 + 452);
            *(_BYTE *)(v394 + 716) = 1;
            *(_DWORD *)(v394 + 728) = *(_DWORD *)(v390 + 448);
            *(_BYTE *)(v394 + 732) = 1;
            *(_DWORD *)(v394 + 720) = *(_DWORD *)(v390 + 456);
            *(_BYTE *)(v394 + 724) = 1;
            v410 = *(_DWORD *)(v390 + 416);
            if (v410 >= 1)
            {
              *(_DWORD *)(v394 + 680) = v410;
              *(_BYTE *)(v394 + 684) = 1;
            }
            v411 = *(_DWORD *)(v390 + 420);
            if (v411 >= 1)
            {
              *(_DWORD *)(v394 + 688) = v411;
              *(_BYTE *)(v394 + 692) = 1;
            }
            v412 = *(_DWORD *)(v390 + 428);
            if (v412 >= 1)
            {
              if (!*(_BYTE *)(v394 + 704))
                *(_BYTE *)(v394 + 704) = 1;
              *(double *)(v394 + 696) = (double)v412;
            }
            if (*(_BYTE *)(v390 + 472))
            {
              *(_QWORD *)(v394 + 976) = *(_QWORD *)(v390 + 464);
              *(_BYTE *)(v394 + 984) = 1;
            }
            if (*(_BYTE *)(v390 + 720))
            {
              webrtc::TimingFrameInfo::ToString(v390 + 608, (char *)__p);
              v413 = (void **)(v394 + 992);
              if (*(_BYTE *)(v394 + 1016))
              {
                if (*(char *)(v394 + 1015) < 0)
                  operator delete(*v413);
                *(_OWORD *)v413 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                *(_QWORD *)(v394 + 1008) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                goto LABEL_978;
              }
              *(_OWORD *)v413 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v394 + 1008) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
              *(_BYTE *)(v394 + 1016) = 1;
              v414 = *(_QWORD *)(v390 + 480);
              if (v414 == 0x8000000000000000)
              {
LABEL_984:
                v415 = 0xFFF0000000000000;
LABEL_985:
                *(_QWORD *)(v394 + 736) = v415;
                *(_BYTE *)(v394 + 744) = 1;
                v416 = *(_QWORD *)(v390 + 488);
                if (v416 != 0x8000000000000000)
                  goto LABEL_986;
LABEL_982:
                v417 = 0xFFF0000000000000;
LABEL_988:
                *(_QWORD *)(v394 + 752) = v417;
                *(_BYTE *)(v394 + 760) = 1;
                v418 = *(_QWORD *)(v390 + 496);
                if (v418 != 0x8000000000000000)
                  goto LABEL_989;
LABEL_992:
                v419 = 0xFFF0000000000000;
LABEL_993:
                v420 = *(double *)&v419;
                goto LABEL_995;
              }
            }
            else
            {
LABEL_978:
              v414 = *(_QWORD *)(v390 + 480);
              if (v414 == 0x8000000000000000)
                goto LABEL_984;
            }
            if (v414 == 0x7FFFFFFFFFFFFFFFLL)
            {
              v415 = 0x7FF0000000000000;
              goto LABEL_985;
            }
            *(double *)(v394 + 736) = (double)v414 * 0.000001;
            *(_BYTE *)(v394 + 744) = 1;
            v416 = *(_QWORD *)(v390 + 488);
            if (v416 == 0x8000000000000000)
              goto LABEL_982;
LABEL_986:
            if (v416 == 0x7FFFFFFFFFFFFFFFLL)
            {
              v417 = 0x7FF0000000000000;
              goto LABEL_988;
            }
            *(double *)(v394 + 752) = (double)v416 * 0.000001;
            *(_BYTE *)(v394 + 760) = 1;
            v418 = *(_QWORD *)(v390 + 496);
            if (v418 == 0x8000000000000000)
              goto LABEL_992;
LABEL_989:
            if (v418 == 0x7FFFFFFFFFFFFFFFLL)
            {
              v419 = 0x7FF0000000000000;
              goto LABEL_993;
            }
            v420 = (double)v418 * 0.000001;
LABEL_995:
            *(double *)(v394 + 768) = v420;
            *(_BYTE *)(v394 + 776) = 1;
            *(_DWORD *)(v394 + 784) = *(_DWORD *)(v390 + 504);
            *(_BYTE *)(v394 + 788) = 1;
            *(_QWORD *)(v394 + 792) = *(_QWORD *)(v390 + 512);
            *(_BYTE *)(v394 + 800) = 1;
            v421 = *(_QWORD *)(v390 + 520);
            *(_QWORD *)(v394 + 808) = v421;
            *(_BYTE *)(v394 + 816) = 1;
            *(_DWORD *)(v394 + 824) = *(_DWORD *)(v390 + 540);
            *(_BYTE *)(v394 + 828) = 1;
            LODWORD(v421) = *(_DWORD *)(v390 + 548);
            v422 = (double)v421 / 1000.0;
            *(double *)(v394 + 832) = v422;
            *(_BYTE *)(v394 + 840) = 1;
            *(_DWORD *)(v394 + 848) = *(_DWORD *)(v390 + 536);
            *(_BYTE *)(v394 + 852) = 1;
            LODWORD(v422) = *(_DWORD *)(v390 + 544);
            *(double *)(v394 + 856) = (double)*(unint64_t *)&v422 / 1000.0;
            *(_BYTE *)(v394 + 864) = 1;
            *(double *)(v394 + 1104) = (double)*(int *)(v390 + 572) / 1000.0;
            *(_BYTE *)(v394 + 1112) = 1;
            if (*(_BYTE *)(v390 + 104))
            {
              v423 = *(_QWORD *)(v390 + 96);
              if (v423 == 0x8000000000000000)
              {
                v424 = 0xFFF0000000000000;
LABEL_1000:
                v425 = *(double *)&v424;
              }
              else
              {
                if (v423 == 0x7FFFFFFFFFFFFFFFLL)
                {
                  v424 = 0x7FF0000000000000;
                  goto LABEL_1000;
                }
                v425 = (double)v423 * 0.001;
              }
              *(double *)(v394 + 448) = v425;
              *(_BYTE *)(v394 + 456) = 1;
            }
            if (*(_BYTE *)(v390 + 120))
            {
              *(double *)(v394 + 904) = (double)*(uint64_t *)(v390 + 112);
              *(_BYTE *)(v394 + 912) = 1;
            }
            if ((*(_BYTE *)(v390 + 556) & 1) != 0)
            {
              v426 = (char *)(v394 + 872);
              if (*(_BYTE *)(v394 + 896))
              {
                if (*(char *)(v394 + 895) < 0)
                {
                  *(_QWORD *)(v394 + 880) = 11;
                  v426 = *(char **)(v394 + 872);
                }
                else
                {
                  *(_BYTE *)(v394 + 895) = 11;
                }
                strcpy(v426, "screenshare");
                if (*(_BYTE *)(v390 + 392))
                {
LABEL_1016:
                  v427 = (std::string *)(v390 + 368);
                  v428 = (std::string *)(v394 + 920);
                  if (*(_BYTE *)(v394 + 944))
                  {
                    if (v428 != v427)
                    {
                      v429 = *(_BYTE *)(v390 + 391);
                      if (*(char *)(v394 + 943) < 0)
                      {
                        if (v429 >= 0)
                          v432 = (const std::string::value_type *)(v390 + 368);
                        else
                          v432 = *(const std::string::value_type **)(v390 + 368);
                        if (v429 >= 0)
                          v433 = *(unsigned __int8 *)(v390 + 391);
                        else
                          v433 = *(_QWORD *)(v390 + 376);
                        std::string::__assign_no_alias<false>(v428, v432, v433);
                      }
                      else
                      {
                        if ((*(_BYTE *)(v390 + 391) & 0x80) == 0)
                        {
                          v430 = *(_OWORD *)&v427->__r_.__value_.__l.__data_;
                          *(_QWORD *)(v394 + 936) = *(_QWORD *)(v390 + 384);
                          *(_OWORD *)&v428->__r_.__value_.__l.__data_ = v430;
                          if (!*(_BYTE *)(v390 + 401))
                            goto LABEL_1035;
LABEL_1034:
                          *(_WORD *)(v394 + 1024) = *(unsigned __int8 *)(v390 + 400) | 0x100;
                          goto LABEL_1035;
                        }
                        std::string::__assign_no_alias<true>(v428, *(char **)(v390 + 368), *(_QWORD *)(v390 + 376));
                      }
                      if (*(_BYTE *)(v390 + 401))
                        goto LABEL_1034;
LABEL_1035:
                      v434 = *(unsigned __int16 **)(v390 + 344);
                      for (j = *(unsigned __int16 **)(v390 + 352); v434 != j; v434 += 24)
                      {
                        v436 = *((unsigned __int8 *)v434 + 23);
                        v437 = v434;
                        v438 = v436;
                        if (*((char *)v434 + 23) < 0)
                        {
                          v438 = *((_QWORD *)v434 + 1);
                          if (v438 < 0)
                            goto LABEL_1646;
                          v437 = *(unsigned __int16 **)v434;
                          if (v438 && v437 == 0)
                            goto LABEL_1646;
                        }
                        if (v438 != 3
                          || ((v440 = *v437, v441 = *((unsigned __int8 *)v437 + 2), v440 == *(unsigned __int16 *)"FID")
                            ? (v442 = v441 == cricket::kFidSsrcGroupSemantics[2])
                            : (v442 = 0),
                              !v442
                           || (v443 = *((_QWORD *)v434 + 3),
                               v444 = (_DWORD *)(v394 + 440),
                               v445 = (_BYTE *)(v394 + 444),
                               *((_QWORD *)v434 + 4) - v443 != 8)))
                        {
                          v446 = v434;
                          if ((v436 & 0x80) != 0)
                          {
                            v436 = *((_QWORD *)v434 + 1);
                            if (v436 < 0)
                              goto LABEL_1646;
                            v446 = *(unsigned __int16 **)v434;
                            if (v436)
                            {
                              if (!v446)
                                goto LABEL_1646;
                            }
                          }
                          if (v436 != 6)
                            continue;
                          v447 = *(_DWORD *)v446;
                          v448 = v446[2];
                          if (v447 != *(_DWORD *)"FEC-FR" || v448 != *(unsigned __int16 *)"FR")
                            continue;
                          v443 = *((_QWORD *)v434 + 3);
                          v444 = (_DWORD *)(v394 + 368);
                          v445 = (_BYTE *)(v394 + 372);
                          if (*((_QWORD *)v434 + 4) - v443 != 8)
                            continue;
                        }
                        *v444 = *(_DWORD *)(v443 + 4);
                        *v445 = 1;
                      }
                      v450 = (_QWORD *)*v392;
                      if (!*v392)
                        goto LABEL_1075;
                      v451 = (_QWORD *)(v320 + 408);
                      do
                      {
                        v452 = v450[4];
                        v453 = v452 >= v390;
                        if (v452 >= v390)
                          v454 = v450;
                        else
                          v454 = v450 + 1;
                        if (v453)
                          v451 = v450;
                        v450 = (_QWORD *)*v454;
                      }
                      while (*v454);
                      if (v451 == v392 || v451[4] > v390)
                      {
LABEL_1075:
                        v455 = 0;
                        goto LABEL_1076;
                      }
                      v455 = v451[5];
                      if (v455)
                      {
                        (**(void (***)(uint64_t, const char *, const char *))v455)(v455, "FID", "FEC-FR");
                        (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v455 + 40))(__p, v455);
                        v473 = (void **)(v394 + 200);
                        if (*(_BYTE *)(v394 + 224))
                        {
                          if (*(char *)(v394 + 223) < 0)
                            operator delete(*v473);
                          *(_OWORD *)v473 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                          *(_QWORD *)(v394 + 216) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                        }
                        else
                        {
                          *(_OWORD *)v473 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                          *(_QWORD *)(v394 + 216) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                          *(_BYTE *)(v394 + 224) = 1;
                        }
                        v456 = 0;
                      }
                      else
                      {
LABEL_1076:
                        v456 = 1;
                      }
                      v756 = (webrtc::RTCInboundRtpStreamStats *)v394;
                      v457 = webrtc::RTCStatsReport::TryAddStats<webrtc::RTCInboundRtpStreamStats>(v749, &v756);
                      v458 = (void **)v756;
                      v756 = 0;
                      if (v458)
                      {
                        webrtc::RTCInboundRtpStreamStats::~RTCInboundRtpStreamStats(v458);
                        MEMORY[0x20BD0ADEC]();
                      }
                      if (v457)
                      {
                        v459 = (webrtc::RTCOutboundRtpStreamStats *)__p[0].__r_.__value_.__r.__words[0];
                        if (__p[0].__r_.__value_.__r.__words[0])
                        {
                          __p[0].__r_.__value_.__r.__words[0] = 0;
                          v755 = v459;
                          v460 = webrtc::RTCStatsReport::TryAddStats<webrtc::RTCRemoteOutboundRtpStreamStats>(v749, &v755);
                          v461 = (void **)v755;
                          v755 = 0;
                          if (v461)
                          {
                            webrtc::RTCRemoteOutboundRtpStreamStats::~RTCRemoteOutboundRtpStreamStats(v461);
                            MEMORY[0x20BD0ADEC]();
                          }
                          if (v460)
                          {
                            v462 = (std::string *)((char *)v460 + 8);
                            v463 = (std::string *)((char *)v457 + 264);
                            if (*((_BYTE *)v457 + 288))
                            {
                              if (v463 != v462)
                              {
                                v464 = *((_BYTE *)v460 + 31);
                                if (*((char *)v457 + 287) < 0)
                                {
                                  if (v464 >= 0)
                                    v482 = (char *)v460 + 8;
                                  else
                                    v482 = (const std::string::value_type *)*((_QWORD *)v460 + 1);
                                  if (v464 >= 0)
                                    v483 = *((unsigned __int8 *)v460 + 31);
                                  else
                                    v483 = *((_QWORD *)v460 + 2);
                                  std::string::__assign_no_alias<false>(v463, v482, v483);
                                }
                                else if ((*((_BYTE *)v460 + 31) & 0x80) != 0)
                                {
                                  std::string::__assign_no_alias<true>(v463, *((char **)v460 + 1), *((_QWORD *)v460 + 2));
                                }
                                else
                                {
                                  v465 = *(_OWORD *)&v462->__r_.__value_.__l.__data_;
                                  *((_QWORD *)v457 + 35) = *((_QWORD *)v460 + 3);
                                  *(_OWORD *)&v463->__r_.__value_.__l.__data_ = v465;
                                }
                              }
                            }
                            else
                            {
                              if (*((char *)v460 + 31) < 0)
                              {
                                std::string::__init_copy_ctor_external(v463, *((const std::string::value_type **)v460 + 1), *((_QWORD *)v460 + 2));
                              }
                              else
                              {
                                v481 = *(_OWORD *)&v462->__r_.__value_.__l.__data_;
                                *((_QWORD *)v457 + 35) = *((_QWORD *)v460 + 3);
                                *(_OWORD *)&v463->__r_.__value_.__l.__data_ = v481;
                              }
                              *((_BYTE *)v457 + 288) = 1;
                            }
                          }
                          else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                          {
                            v745 = v745 & 0xFFFFFFFF00000000 | 0x38DB;
                            rtc::webrtc_logging_impl::Log("\r\t\t", v474, v475, v476, v477, v478, v479, v480, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
                          }
                        }
                      }
                      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                      {
                        v750 = v750 & 0xFFFFFFFF00000000 | 0x3853;
                        rtc::webrtc_logging_impl::Log("\r\t", v466, v467, v468, v469, v470, v471, v472, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
                      }
                      if ((v456 & 1) == 0)
                        (*(void (**)(uint64_t))(*(_QWORD *)v455 + 8))(v455);
LABEL_899:
                      v390 += 728;
                      if (v390 != v389)
                        continue;
                      v565 = *(unsigned __int8 *)(v320 + 320);
                      v753 = 0;
                      v754 = 0;
                      v752 = (webrtc::RTCInboundRtpStreamStats *)&v753;
                      if (!v565)
                        goto LABEL_1646;
LABEL_1316:
                      v567 = *(_QWORD *)(v320 + 200);
                      v566 = *(_QWORD *)(v320 + 208);
                      if (v567 == v566)
                      {
LABEL_1638:
                        std::__tree<std::__value_type<std::string,webrtc::StatsReport *>,std::__map_value_compare<std::string,std::__value_type<std::string,webrtc::StatsReport *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,webrtc::StatsReport *>>>::destroy(v753);
                        if (SHIBYTE(v757.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v757.__r_.__value_.__l.__data_);
                        v319 = __dst;
                        v322 = v717;
                        v323 = v721;
                        if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
                        {
                          v564 = (void *)__len.__r_.__value_.__r.__words[0];
LABEL_729:
                          operator delete(v564);
                        }
LABEL_730:
                        *((_BYTE *)v322 + 217) = v323;
                        goto LABEL_731;
                      }
                      v568 = (_QWORD *)(v320 + 280);
                      v724 = (_QWORD *)(v320 + 384);
                      v710 = (_QWORD *)(v320 + 432);
                      v711 = (_QWORD *)(v320 + 280);
                      v715 = *(_QWORD *)(v320 + 208);
                      while (2)
                      {
                        v569 = *(int **)(v567 + 112);
                        if (*(int **)(v567 + 120) == v569)
                          goto LABEL_1319;
                        if (!*(_BYTE *)(v320 + 320))
                          goto LABEL_1646;
                        v570 = operator new();
                        __p[0] = __s;
                        memset(&__s, 0, sizeof(__s));
                        webrtc::RTCOutboundRtpStreamStats::RTCOutboundRtpStreamStats(v570, (uint64_t)__p, (uint64_t)v9);
                        v571 = v749;
                        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                        {
                          operator delete(__p[0].__r_.__value_.__l.__data_);
                          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
                            goto LABEL_1331;
LABEL_1324:
                          v572 = *(_DWORD **)(v567 + 112);
                          if (*(_DWORD **)(v567 + 120) != v572)
                            goto LABEL_1325;
LABEL_1332:
                          *(_DWORD *)(v570 + 40) = 0;
                          *(_BYTE *)(v570 + 44) = 1;
                          v573 = *(unsigned int *)(v567 + 24);
                          if (!*(_BYTE *)(v570 + 152))
LABEL_1326:
                            *(_BYTE *)(v570 + 152) = 1;
                        }
                        else
                        {
                          if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                            goto LABEL_1324;
LABEL_1331:
                          operator delete(__s.__r_.__value_.__l.__data_);
                          v572 = *(_DWORD **)(v567 + 112);
                          if (*(_DWORD **)(v567 + 120) == v572)
                            goto LABEL_1332;
LABEL_1325:
                          *(_DWORD *)(v570 + 40) = *v572;
                          *(_BYTE *)(v570 + 44) = 1;
                          v573 = *(unsigned int *)(v567 + 24);
                          if (!*(_BYTE *)(v570 + 152))
                            goto LABEL_1326;
                        }
                        *(_QWORD *)(v570 + 144) = v573;
                        v574 = *(_QWORD *)(v567 + 192);
                        if (v574 == 0x8000000000000000)
                        {
                          v575 = 0xFFF0000000000000;
LABEL_1335:
                          v576 = *(double *)&v575;
                        }
                        else
                        {
                          if (v574 == 0x7FFFFFFFFFFFFFFFLL)
                          {
                            v575 = 0x7FF0000000000000;
                            goto LABEL_1335;
                          }
                          v576 = (double)v574 * 0.000001;
                        }
                        *(double *)(v570 + 464) = v576;
                        *(_BYTE *)(v570 + 472) = 1;
                        *(_QWORD *)(v570 + 304) = *(_QWORD *)(v567 + 32);
                        *(_BYTE *)(v570 + 312) = 1;
                        *(_QWORD *)(v570 + 160) = *(_QWORD *)v567;
                        *(_BYTE *)(v570 + 168) = 1;
                        *(_QWORD *)(v570 + 320) = *(_QWORD *)(v567 + 8);
                        *(_BYTE *)(v570 + 328) = 1;
                        *(_QWORD *)(v570 + 336) = *(_QWORD *)(v567 + 16);
                        *(_BYTE *)(v570 + 344) = 1;
                        *(_DWORD *)(v570 + 632) = *(_DWORD *)(v567 + 40);
                        *(_BYTE *)(v570 + 636) = 1;
                        if (*(_BYTE *)(v567 + 185))
                          *(_WORD *)(v570 + 656) = *(unsigned __int8 *)(v567 + 184) | 0x100;
                        v577 = (std::string *)(v570 + 80);
                        if (*(_BYTE *)(v570 + 104))
                        {
                          if (*(char *)(v570 + 103) < 0)
                          {
                            if ((v757.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v578 = &v757;
                            else
                              v578 = (std::string *)v757.__r_.__value_.__r.__words[0];
                            if ((v757.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v579 = HIBYTE(v757.__r_.__value_.__r.__words[2]);
                            else
                              v579 = v757.__r_.__value_.__l.__size_;
                            std::string::__assign_no_alias<false>(v577, (const std::string::value_type *)v578, v579);
                          }
                          else if ((*((_BYTE *)&v757.__r_.__value_.__s + 23) & 0x80) != 0)
                          {
                            std::string::__assign_no_alias<true>(v577, v757.__r_.__value_.__l.__data_, v757.__r_.__value_.__l.__size_);
                          }
                          else
                          {
                            *(_OWORD *)&v577->__r_.__value_.__l.__data_ = *(_OWORD *)&v757.__r_.__value_.__l.__data_;
                            *(_QWORD *)(v570 + 96) = *((_QWORD *)&v757.__r_.__value_.__l + 2);
                          }
                        }
                        else
                        {
                          if (SHIBYTE(v757.__r_.__value_.__r.__words[2]) < 0)
                          {
                            std::string::__init_copy_ctor_external(v577, v757.__r_.__value_.__l.__data_, v757.__r_.__value_.__l.__size_);
                          }
                          else
                          {
                            *(_OWORD *)&v577->__r_.__value_.__l.__data_ = *(_OWORD *)&v757.__r_.__value_.__l.__data_;
                            *(_QWORD *)(v570 + 96) = *((_QWORD *)&v757.__r_.__value_.__l + 2);
                          }
                          *(_BYTE *)(v570 + 104) = 1;
                        }
                        v181 = v570 + 240;
                        if (*(_BYTE *)(v570 + 264))
                        {
                          if (*(char *)(v570 + 263) < 0)
                          {
                            if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v580 = &__len;
                            else
                              v580 = (std::string *)__len.__r_.__value_.__r.__words[0];
                            if ((__len.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                              v581 = HIBYTE(__len.__r_.__value_.__r.__words[2]);
                            else
                              v581 = __len.__r_.__value_.__l.__size_;
                            v181 = (uint64_t)std::string::__assign_no_alias<false>((std::string *)v181, (const std::string::value_type *)v580, v581);
                          }
                          else if ((*((_BYTE *)&__len.__r_.__value_.__s + 23) & 0x80) != 0)
                          {
                            v181 = (uint64_t)std::string::__assign_no_alias<true>((_QWORD *)v181, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
                          }
                          else
                          {
                            *(_OWORD *)v181 = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
                            *(_QWORD *)(v570 + 256) = *((_QWORD *)&__len.__r_.__value_.__l + 2);
                          }
                        }
                        else
                        {
                          if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
                          {
                            std::string::__init_copy_ctor_external((std::string *)v181, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
                          }
                          else
                          {
                            *(_OWORD *)v181 = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
                            *(_QWORD *)(v570 + 256) = *((_QWORD *)&__len.__r_.__value_.__l + 2);
                          }
                          *(_BYTE *)(v570 + 264) = 1;
                        }
                        v582 = (char *)(v570 + 48);
                        if (*(_BYTE *)(v570 + 72))
                        {
                          if (*(char *)(v570 + 71) < 0)
                          {
                            *(_QWORD *)(v570 + 56) = 5;
                            v582 = *(char **)(v570 + 48);
                          }
                          else
                          {
                            *(_BYTE *)(v570 + 71) = 5;
                          }
                          strcpy(v582, "video");
                        }
                        else
                        {
                          *(_BYTE *)(v570 + 71) = 5;
                          if (v582 <= "video" && v570 + 53 > (unint64_t)"video")
                            goto LABEL_1646;
                          *(_BYTE *)(v570 + 52) = 111;
                          *(_DWORD *)v582 = 1701079414;
                          *(_BYTE *)(v570 + 53) = 0;
                          *(_BYTE *)(v570 + 72) = 1;
                        }
                        if (*(_BYTE *)(v567 + 108))
                        {
                          v583 = *v568;
                          if (*v568)
                          {
                            v584 = *(_DWORD *)(v567 + 104);
                            v585 = v568;
                            do
                            {
                              v586 = *(_DWORD *)(v583 + 32);
                              v587 = v586 < v584;
                              if (v586 >= v584)
                                v588 = (uint64_t *)v583;
                              else
                                v588 = (uint64_t *)(v583 + 8);
                              if (!v587)
                                v585 = (_QWORD *)v583;
                              v583 = *v588;
                            }
                            while (*v588);
                            if (v585 != v568 && v584 >= *((_DWORD *)v585 + 8))
                            {
                              v589 = (void **)(v570 + 112);
                              if (*(_BYTE *)(v570 + 136))
                              {
                                if (*(char *)(v570 + 135) < 0)
                                  operator delete(*v589);
                                *(_OWORD *)v589 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                *(_QWORD *)(v570 + 128) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                              }
                              else
                              {
                                *(_OWORD *)v589 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                *(_QWORD *)(v570 + 128) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                                *(_BYTE *)(v570 + 136) = 1;
                              }
                            }
                          }
                        }
                        *(_DWORD *)(v570 + 616) = *(_DWORD *)(v567 + 256);
                        *(_BYTE *)(v570 + 620) = 1;
                        *(_DWORD *)(v570 + 624) = *(_DWORD *)(v567 + 260);
                        *(_BYTE *)(v570 + 628) = 1;
                        if (*(_BYTE *)(v567 + 392))
                        {
                          *(_QWORD *)(v570 + 640) = *(_QWORD *)(v567 + 384);
                          *(_BYTE *)(v570 + 648) = 1;
                        }
                        if (*(_BYTE *)(v567 + 56))
                        {
                          v590 = *(double *)(v567 + 48);
                          if (v590 > 0.0)
                          {
                            *(double *)(v570 + 352) = v590;
                            *(_BYTE *)(v570 + 360) = 1;
                          }
                        }
                        *(_DWORD *)(v570 + 368) = *(_DWORD *)(v567 + 348);
                        *(_BYTE *)(v570 + 372) = 1;
                        *(_DWORD *)(v570 + 376) = *(_DWORD *)(v567 + 352);
                        *(_BYTE *)(v570 + 380) = 1;
                        *(double *)(v570 + 384) = (double)*(unint64_t *)(v567 + 360) / 1000.0;
                        *(_BYTE *)(v570 + 392) = 1;
                        *(_QWORD *)(v570 + 400) = *(_QWORD *)(v567 + 368);
                        *(_BYTE *)(v570 + 408) = 1;
                        v591 = *(_DWORD *)(v567 + 264);
                        if (v591 >= 1)
                        {
                          *(_DWORD *)(v570 + 416) = v591;
                          *(_BYTE *)(v570 + 420) = 1;
                        }
                        v592 = *(_DWORD *)(v567 + 268);
                        if (v592 >= 1)
                        {
                          *(_DWORD *)(v570 + 424) = v592;
                          *(_BYTE *)(v570 + 428) = 1;
                        }
                        v593 = *(_DWORD *)(v567 + 288);
                        if (v593 >= 1)
                        {
                          if (!*(_BYTE *)(v570 + 440))
                            *(_BYTE *)(v570 + 440) = 1;
                          *(double *)(v570 + 432) = (double)v593;
                        }
                        *(_DWORD *)(v570 + 448) = *(_DWORD *)(v567 + 404);
                        *(_BYTE *)(v570 + 452) = 1;
                        *(_DWORD *)(v570 + 456) = *(_DWORD *)(v567 + 408);
                        *(_BYTE *)(v570 + 460) = 1;
                        v594 = *(int *)(v567 + 308);
                        if (v594 >= 4)
LABEL_1648:
                          rtc::webrtc_checks_impl::UnreachableCodeReached((rtc::webrtc_checks_impl *)v181);
                        v595 = off_24C0BC288[v594];
                        v596 = (std::string::value_type *)(v570 + 480);
                        if (*(_BYTE *)(v570 + 504))
                        {
                          std::string::__assign_external((std::string *)(v570 + 480), v595);
                        }
                        else
                        {
                          v597 = strlen(v595);
                          if (v597 > 0x7FFFFFFFFFFFFFF7)
                            goto LABEL_1647;
                          v598 = v597;
                          if (v597 > 0x16)
                          {
                            v599 = (v597 & 0xFFFFFFFFFFFFFFF8) + 8;
                            if ((v597 | 7) != 0x17)
                              v599 = v597 | 7;
                            v600 = v599 + 1;
                            v596 = (std::string::value_type *)operator new(v599 + 1);
                            *(_QWORD *)(v570 + 488) = v598;
                            *(_QWORD *)(v570 + 496) = v600 | 0x8000000000000000;
                            *(_QWORD *)(v570 + 480) = v596;
                          }
                          else
                          {
                            *(_BYTE *)(v570 + 503) = v597;
                          }
                          v601 = &v596[v598];
                          if (v596 <= v595 && v601 > v595)
                            goto LABEL_1646;
                          if (v598)
                            memcpy(v596, v595, v598);
                          *v601 = 0;
                          *(_BYTE *)(v570 + 504) = 1;
                        }
                        *(_OWORD *)&__sz.__r_.__value_.__r.__words[1] = 0uLL;
                        __sz.__r_.__value_.__r.__words[0] = (std::string::size_type)&__sz.__r_.__value_.__l.__size_;
                        v727 = v567;
                        v181 = (uint64_t)std::map<int,unsigned long>::insert[abi:sn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,unsigned long>,std::__tree_node<std::__value_type<int,unsigned long>,void *> *,long>>>((uint64_t *)&__sz, *(int **)(v567 + 312), (int *)(v567 + 320));
                        *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = 0uLL;
                        __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__l.__size_;
                        v602 = __sz.__r_.__value_.__r.__words[0];
                        v745 = v570;
                        if ((std::string::size_type *)__sz.__r_.__value_.__l.__data_ == &__sz.__r_.__value_.__r.__words[1])
                        {
LABEL_1423:
                          v603 = (uint64_t *)(v570 + 512);
                          if (*(_BYTE *)(v570 + 536))
                          {
                            v604 = v570 + 520;
                            std::__tree<rtc::SocketAddress>::destroy(v570 + 512, *(char **)(v570 + 520));
                            v605 = __s.__r_.__value_.__l.__size_;
                            *(_QWORD *)(v570 + 512) = __s.__r_.__value_.__r.__words[0];
                            *(_QWORD *)(v570 + 520) = v605;
                            v606 = __s.__r_.__value_.__r.__words[2];
                            *(_QWORD *)(v570 + 528) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
                            v320 = v748;
                            v567 = v727;
                            if (v606)
                            {
                              *(_QWORD *)(v605 + 16) = v604;
                              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__l.__size_;
                              *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = 0uLL;
                              v605 = 0;
                            }
                            else
                            {
                              *v603 = v604;
                            }
                            v643 = v724;
                            v644 = v745;
                          }
                          else
                          {
                            v605 = __s.__r_.__value_.__l.__size_;
                            *(_QWORD *)(v570 + 512) = __s.__r_.__value_.__r.__words[0];
                            v641 = v570 + 520;
                            *(_QWORD *)(v570 + 520) = v605;
                            v642 = __s.__r_.__value_.__r.__words[2];
                            *(_QWORD *)(v570 + 528) = *((_QWORD *)&__s.__r_.__value_.__l + 2);
                            v320 = v748;
                            v567 = v727;
                            if (v642)
                            {
                              *(_QWORD *)(v605 + 16) = v641;
                              __s.__r_.__value_.__r.__words[0] = (std::string::size_type)&__s.__r_.__value_.__l.__size_;
                              *(_OWORD *)&__s.__r_.__value_.__r.__words[1] = 0uLL;
                              v605 = 0;
                            }
                            else
                            {
                              *v603 = v641;
                            }
                            v643 = v724;
                            v644 = v745;
                            *(_BYTE *)(v745 + 536) = 1;
                          }
                          std::__tree<rtc::SocketAddress>::destroy((uint64_t)&__s, (char *)v605);
                          std::__tree<sigslot::_signal_base_interface *>::destroy((uint64_t)&__sz, (_QWORD *)__sz.__r_.__value_.__l.__size_);
                          *(_DWORD *)(v644 + 544) = *(_DWORD *)(v567 + 336);
                          *(_BYTE *)(v644 + 548) = 1;
                          if ((*(_BYTE *)(v567 + 400) & 1) != 0)
                          {
                            v645 = (char *)(v745 + 552);
                            if (*(_BYTE *)(v745 + 576))
                            {
                              if (*(char *)(v745 + 575) < 0)
                              {
                                *(_QWORD *)(v745 + 560) = 11;
                                v645 = *(char **)(v745 + 552);
                              }
                              else
                              {
                                *(_BYTE *)(v745 + 575) = 11;
                              }
                              strcpy(v645, "screenshare");
                            }
                            else
                            {
                              *(_BYTE *)(v745 + 575) = 11;
                              if (v645 <= "screenshare" && v745 + 563 > (unint64_t)"screenshare")
                                goto LABEL_1646;
                              strcpy((char *)(v745 + 552), "screenshare");
                              *(_BYTE *)(v745 + 576) = 1;
                            }
                          }
                          if (*(_BYTE *)(v567 + 248))
                          {
                            v646 = (__int128 *)(v567 + 224);
                            v181 = v745 + 584;
                            if (*(_BYTE *)(v745 + 608))
                            {
                              if ((__int128 *)v181 != v646)
                              {
                                v647 = *(_BYTE *)(v567 + 247);
                                if (*(char *)(v745 + 607) < 0)
                                {
                                  if (v647 >= 0)
                                    v650 = (const std::string::value_type *)(v567 + 224);
                                  else
                                    v650 = *(const std::string::value_type **)(v567 + 224);
                                  if (v647 >= 0)
                                    v651 = *(unsigned __int8 *)(v567 + 247);
                                  else
                                    v651 = *(_QWORD *)(v567 + 232);
                                  v181 = (uint64_t)std::string::__assign_no_alias<false>((std::string *)v181, v650, v651);
                                  if (*(_BYTE *)(v567 + 440))
                                    goto LABEL_1529;
                                }
                                else if ((*(_BYTE *)(v567 + 247) & 0x80) != 0)
                                {
                                  v181 = (uint64_t)std::string::__assign_no_alias<true>((_QWORD *)v181, *(char **)(v567 + 224), *(_QWORD *)(v567 + 232));
                                  if (*(_BYTE *)(v567 + 440))
                                    goto LABEL_1529;
                                }
                                else
                                {
                                  v648 = *v646;
                                  *(_QWORD *)(v745 + 600) = *(_QWORD *)(v567 + 240);
                                  *(_OWORD *)v181 = v648;
                                  if (!*(_BYTE *)(v567 + 440))
                                    goto LABEL_1545;
LABEL_1529:
                                  v652 = (__int128 *)(v567 + 416);
                                  v181 = v745 + 272;
                                  if (*(_BYTE *)(v745 + 296))
                                  {
                                    if ((__int128 *)v181 != v652)
                                    {
                                      v653 = *(_BYTE *)(v567 + 439);
                                      if (*(char *)(v745 + 295) < 0)
                                      {
                                        if (v653 >= 0)
                                          v656 = (const std::string::value_type *)(v567 + 416);
                                        else
                                          v656 = *(const std::string::value_type **)(v567 + 416);
                                        if (v653 >= 0)
                                          v657 = *(unsigned __int8 *)(v567 + 439);
                                        else
                                          v657 = *(_QWORD *)(v567 + 424);
                                        v181 = (uint64_t)std::string::__assign_no_alias<false>((std::string *)v181, v656, v657);
                                      }
                                      else if ((*(_BYTE *)(v567 + 439) & 0x80) != 0)
                                      {
                                        v181 = (uint64_t)std::string::__assign_no_alias<true>((_QWORD *)v181, *(char **)(v567 + 416), *(_QWORD *)(v567 + 424));
                                      }
                                      else
                                      {
                                        v654 = *v652;
                                        *(_QWORD *)(v745 + 288) = *(_QWORD *)(v567 + 432);
                                        *(_OWORD *)v181 = v654;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (*(char *)(v567 + 439) < 0)
                                    {
                                      std::string::__init_copy_ctor_external((std::string *)v181, *(const std::string::value_type **)(v567 + 416), *(_QWORD *)(v567 + 424));
                                    }
                                    else
                                    {
                                      v655 = *v652;
                                      *(_QWORD *)(v745 + 288) = *(_QWORD *)(v567 + 432);
                                      *(_OWORD *)v181 = v655;
                                    }
                                    *(_BYTE *)(v745 + 296) = 1;
                                  }
                                }
LABEL_1545:
                                if (*(_BYTE *)(v567 + 449))
                                  *(_WORD *)(v745 + 658) = *(unsigned __int8 *)(v567 + 448) | 0x100;
                                if (!*(_BYTE *)(v567 + 451))
                                {
LABEL_1555:
                                  v663 = *(unsigned __int16 **)(v567 + 200);
                                  v664 = *(unsigned __int16 **)(v567 + 208);
                                  if (v663 != v664)
                                    goto LABEL_1574;
                                  goto LABEL_1556;
                                }
                                v658 = *(char *)(v567 + 450);
                                if (v658 >= 0x22)
                                  goto LABEL_1648;
                                v659 = v658;
                                v660 = *(_QWORD *)((char *)&unk_208F1A178 + v659 * 8);
                                v661 = off_24C0BC2A8[v659];
                                *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v660;
                                if (__p <= (std::string *)v661 && (char *)__p + v660 > v661)
                                  goto LABEL_1646;
                                memcpy(__p, v661, v660);
                                __p[0].__r_.__value_.__s.__data_[v660] = 0;
                                v662 = (void **)(v745 + 664);
                                if (*(_BYTE *)(v745 + 688))
                                {
                                  v643 = v724;
                                  if (*(char *)(v745 + 687) < 0)
                                    operator delete(*v662);
                                  *(_OWORD *)v662 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                  *(_QWORD *)(v745 + 680) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                                  goto LABEL_1555;
                                }
                                *(_OWORD *)v662 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                *(_QWORD *)(v745 + 680) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                                *(_BYTE *)(v745 + 688) = 1;
                                v643 = v724;
                                v663 = *(unsigned __int16 **)(v567 + 200);
                                v664 = *(unsigned __int16 **)(v567 + 208);
                                if (v663 == v664)
                                {
LABEL_1556:
                                  v665 = (_QWORD *)*v643;
                                  if (!*v643)
                                    goto LABEL_1567;
                                  v666 = v643;
                                  do
                                  {
                                    v667 = v665[4];
                                    v668 = v667 >= v567;
                                    if (v667 >= v567)
                                      v669 = v665;
                                    else
                                      v669 = v665 + 1;
                                    if (v668)
                                      v666 = v665;
                                    v665 = (_QWORD *)*v669;
                                  }
                                  while (*v669);
                                  if (v666 == v643 || v666[4] > v567)
                                  {
LABEL_1567:
                                    v670 = 0;
                                    goto LABEL_1568;
                                  }
                                  v670 = v666[5];
                                  if (v670)
                                  {
                                    (**(void (***)(unint64_t))v670)(v670);
                                    v681 = (_QWORD *)*v710;
                                    if (!*v710)
                                      goto LABEL_1649;
                                    v682 = v710;
                                    do
                                    {
                                      v683 = v681[4];
                                      v684 = v683 >= v670;
                                      if (v683 >= v670)
                                        v685 = v681;
                                      else
                                        v685 = v681 + 1;
                                      if (v684)
                                        v682 = v681;
                                      v681 = (_QWORD *)*v685;
                                    }
                                    while (*v685);
                                    if (v682 == v710 || v682[4] > v670)
LABEL_1649:
                                      std::__throw_bad_optional_access[abi:sn180100]();
                                    v686 = (void **)(v745 + 176);
                                    if (*(_BYTE *)(v745 + 200))
                                    {
                                      if (*(char *)(v745 + 199) < 0)
                                        operator delete(*v686);
                                      *(_OWORD *)v686 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                      *(_QWORD *)(v745 + 192) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                                    }
                                    else
                                    {
                                      *(_OWORD *)v686 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                      *(_QWORD *)(v745 + 192) = *((_QWORD *)&__p[0].__r_.__value_.__l + 2);
                                      *(_BYTE *)(v745 + 200) = 1;
                                    }
                                    v671 = 0;
                                    v672 = v745;
                                    if (*(char *)(v745 + 31) < 0)
                                    {
LABEL_1614:
                                      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v672 + 8), *(_QWORD *)(v672 + 16));
LABEL_1615:
                                      __p[1].__r_.__value_.__r.__words[0] = v672;
                                      v751 = (webrtc::RTCOutboundRtpStreamStats *)v672;
                                      v687 = webrtc::RTCStatsReport::TryAddStats<webrtc::RTCOutboundRtpStreamStats>(v571, &v751);
                                      v688 = v751;
                                      v751 = 0;
                                      if (v688)
                                      {
                                        webrtc::RTCOutboundRtpStreamStats::~RTCOutboundRtpStreamStats(v688);
                                        MEMORY[0x20BD0ADEC]();
                                      }
                                      if (v687)
                                      {
                                        v689 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)&v752, &__s, (const void **)&__p[0].__r_.__value_.__l.__data_);
                                        if (!*v689)
                                        {
                                          v690 = (uint64_t **)v689;
                                          v691 = operator new(0x40uLL);
                                          v691[2] = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                                          memset(__p, 0, 24);
                                          v691[3] = *(_OWORD *)&__p[0].__r_.__value_.__r.__words[2];
                                          v692 = __s.__r_.__value_.__r.__words[0];
                                          *(_QWORD *)v691 = 0;
                                          *((_QWORD *)v691 + 1) = 0;
                                          *((_QWORD *)v691 + 2) = v692;
                                          *v690 = (uint64_t *)v691;
                                          if (*(_QWORD *)v752)
                                          {
                                            v752 = *(webrtc::RTCInboundRtpStreamStats **)v752;
                                            v693 = *v690;
                                          }
                                          else
                                          {
                                            v693 = (uint64_t *)v691;
                                          }
                                          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)v753, v693);
                                          ++v754;
                                        }
                                      }
                                      else if ((rtc::LogMessage::IsNoop<(rtc::LoggingSeverity)3>() & 1) == 0)
                                      {
                                        v708 = v708 & 0xFFFFFFFF00000000 | 0x39C3;
                                        rtc::webrtc_logging_impl::Log("\r\t", v694, v695, v696, v697, v698, v699, v700, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libwebrtc/Source/ThirdParty/libwebrtc/Source/webrtc/pc/rtc_stats_collector.cc");
                                      }
                                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                                        operator delete(__p[0].__r_.__value_.__l.__data_);
                                      if ((v671 & 1) == 0)
                                        (*(void (**)(unint64_t))(*(_QWORD *)v670 + 8))(v670);
                                      v566 = v715;
                                      v568 = v711;
LABEL_1319:
                                      v567 += 456;
                                      if (v567 == v566)
                                      {
                                        if (!*(_BYTE *)(v320 + 320))
                                          goto LABEL_1646;
                                        v701 = *(_QWORD *)(v320 + 200);
                                        v702 = *(_QWORD *)(v320 + 208);
                                        while (v701 != v702)
                                        {
                                          v703 = *(_QWORD *)(v701 + 160);
                                          v704 = *(_QWORD *)(v701 + 168);
                                          while (v703 != v704)
                                          {
                                            webrtc::RTCStatsReport::AddStats(v749, (uint64_t *)__p);
                                            v705 = __p[0].__r_.__value_.__r.__words[0];
                                            __p[0].__r_.__value_.__r.__words[0] = 0;
                                            if (v705)
                                              (*(void (**)(std::string::size_type))(*(_QWORD *)v705 + 8))(v705);
                                            v703 += 56;
                                          }
                                          v701 += 456;
                                        }
                                        goto LABEL_1638;
                                      }
                                      continue;
                                    }
                                  }
                                  else
                                  {
LABEL_1568:
                                    v671 = 1;
                                    v672 = v745;
                                    if (*(char *)(v745 + 31) < 0)
                                      goto LABEL_1614;
                                  }
                                  __p[0] = *(std::string *)(v672 + 8);
                                  goto LABEL_1615;
                                }
LABEL_1574:
                                while (2)
                                {
                                  if (*((char *)v663 + 23) < 0)
                                  {
                                    v673 = *((_QWORD *)v663 + 1);
                                    if (v673 < 0)
                                      goto LABEL_1646;
                                    v674 = *(unsigned __int16 **)v663;
                                    if (v673 && v674 == 0)
                                      goto LABEL_1646;
                                  }
                                  else
                                  {
                                    v673 = *((unsigned __int8 *)v663 + 23);
                                    v674 = v663;
                                  }
                                  if (v673 == 3)
                                  {
                                    v676 = *v674;
                                    v677 = *((unsigned __int8 *)v674 + 2);
                                    if (v676 == *(unsigned __int16 *)"FID"
                                      && v677 == cricket::kFidSsrcGroupSemantics[2])
                                    {
                                      v679 = (_DWORD *)*((_QWORD *)v663 + 3);
                                      if (*((_QWORD *)v663 + 4) - (_QWORD)v679 == 8)
                                      {
                                        v680 = *(_DWORD **)(v567 + 112);
                                        if (*(_DWORD **)(v567 + 120) == v680)
                                        {
                                          if (!*v679)
                                          {
LABEL_1572:
                                            *(_DWORD *)(v745 + 696) = v679[1];
                                            *(_BYTE *)(v745 + 700) = 1;
                                          }
                                        }
                                        else if (*v680 == *v679)
                                        {
                                          goto LABEL_1572;
                                        }
                                      }
                                    }
                                  }
                                  v663 += 24;
                                  if (v663 == v664)
                                    goto LABEL_1556;
                                  continue;
                                }
                              }
                            }
                            else
                            {
                              if (*(char *)(v567 + 247) < 0)
                              {
                                std::string::__init_copy_ctor_external((std::string *)v181, *(const std::string::value_type **)(v567 + 224), *(_QWORD *)(v567 + 232));
                              }
                              else
                              {
                                v649 = *v646;
                                *(_QWORD *)(v745 + 600) = *(_QWORD *)(v567 + 240);
                                *(_OWORD *)v181 = v649;
                              }
                              *(_BYTE *)(v745 + 608) = 1;
                            }
                          }
                          if (!*(_BYTE *)(v567 + 440))
                            goto LABEL_1545;
                          goto LABEL_1529;
                        }
                        break;
                      }
                      while (2)
                      {
                        v607 = *(int *)(v602 + 32);
                        if (v607 >= 4)
                          goto LABEL_1648;
                        v608 = *(_QWORD *)(v602 + 40);
                        v609 = off_24C0BC288[v607];
                        v610 = strlen(v609);
                        if (v610 > 0x7FFFFFFFFFFFFFF7)
                          goto LABEL_1647;
                        v611 = v610;
                        if (v610 > 0x16)
                        {
                          v613 = (v610 & 0xFFFFFFFFFFFFFFF8) + 8;
                          if ((v610 | 7) != 0x17)
                            v613 = v610 | 7;
                          v614 = v613 + 1;
                          v612 = (std::string *)operator new(v613 + 1);
                          __p[0].__r_.__value_.__l.__size_ = v611;
                          __p[0].__r_.__value_.__r.__words[2] = v614 | 0x8000000000000000;
                          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v612;
                        }
                        else
                        {
                          *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = v610;
                          v612 = __p;
                        }
                        v615 = (char *)v612 + v611;
                        if (v612 <= (std::string *)v609 && v615 > v609)
                          goto LABEL_1646;
                        if (v611)
                          memcpy(v612, v609, v611);
                        *v615 = 0;
                        v617 = __s.__r_.__value_.__l.__size_;
                        v618 = &__s.__r_.__value_.__l.__size_;
                        v619 = &__s.__r_.__value_.__l.__size_;
                        if (__s.__r_.__value_.__l.__size_)
                        {
                          v620 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                          v621 = SHIBYTE(__p[0].__r_.__value_.__r.__words[2]);
                          v622 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                          if (__p[0].__r_.__value_.__l.__size_)
                            v623 = __p[0].__r_.__value_.__r.__words[0] == 0;
                          else
                            v623 = 0;
                          v624 = !v623;
                          LODWORD(v750) = v624;
                          while (1)
                          {
                            v618 = (std::string::size_type *)v617;
                            if (v621 < 0)
                            {
                              if ((*((_QWORD *)&v622 + 1) & 0x8000000000000000) != 0)
                                goto LABEL_1646;
                              v626 = *((_QWORD *)&v622 + 1);
                              v625 = (std::string *)v622;
                              if ((v750 & 1) == 0)
                                goto LABEL_1646;
                            }
                            else
                            {
                              v625 = __p;
                              v626 = v620;
                            }
                            v627 = (const void **)(v617 + 32);
                            v628 = *(unsigned __int8 *)(v617 + 55);
                            v629 = (const void *)(v617 + 32);
                            v630 = v628;
                            if (*(char *)(v617 + 55) < 0)
                            {
                              v630 = *(_QWORD *)(v617 + 40);
                              if ((v630 & 0x8000000000000000) != 0)
                                goto LABEL_1646;
                              v629 = *v627;
                              if (v630)
                              {
                                if (!v629)
                                  goto LABEL_1646;
                              }
                            }
                            if (v630 >= v626)
                              v631 = v626;
                            else
                              v631 = v630;
                            v632 = memcmp(v625, v629, v631);
                            if (v632)
                            {
                              if (v632 < 0)
                                goto LABEL_1448;
LABEL_1464:
                              if ((v628 & 0x80) != 0)
                              {
                                v628 = v618[5];
                                if ((v628 & 0x8000000000000000) != 0)
                                  goto LABEL_1646;
                                v627 = (const void **)*v627;
                                if (v628)
                                {
                                  if (!v627)
                                    goto LABEL_1646;
                                }
                              }
                              if (v621 < 0)
                              {
                                if ((*((_QWORD *)&v622 + 1) & 0x8000000000000000) != 0)
                                  goto LABEL_1646;
                                v634 = *((_QWORD *)&v622 + 1);
                                v633 = (std::string *)v622;
                                if ((v750 & 1) == 0)
                                  goto LABEL_1646;
                              }
                              else
                              {
                                v633 = __p;
                                v634 = v620;
                              }
                              if (v634 >= v628)
                                v635 = v628;
                              else
                                v635 = v634;
                              v181 = memcmp(v627, v633, v635);
                              if ((_DWORD)v181)
                              {
                                if ((v181 & 0x80000000) == 0)
                                  goto LABEL_1484;
                              }
                              else if (v628 >= v634)
                              {
LABEL_1484:
                                v571 = v749;
                                v9 = v743;
                                goto LABEL_1485;
                              }
                              v617 = v618[1];
                              if (!v617)
                              {
                                v619 = v618 + 1;
                                break;
                              }
                            }
                            else
                            {
                              if (v626 >= v630)
                                goto LABEL_1464;
LABEL_1448:
                              v617 = *v618;
                              v619 = v618;
                              if (!*v618)
                                break;
                            }
                          }
                        }
                        v636 = v618;
                        v618 = (std::string::size_type *)operator new(0x40uLL);
                        *((_OWORD *)v618 + 2) = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
                        v637 = __p[0].__r_.__value_.__r.__words[2];
                        memset(__p, 0, 24);
                        v618[6] = v637;
                        v618[7] = 0;
                        *v618 = 0;
                        v618[1] = 0;
                        v618[2] = (std::string::size_type)v636;
                        *v619 = (std::string::size_type)v618;
                        v638 = (uint64_t *)v618;
                        v571 = v749;
                        v9 = v743;
                        if (*(_QWORD *)__s.__r_.__value_.__l.__data_)
                        {
                          __s.__r_.__value_.__r.__words[0] = *(_QWORD *)__s.__r_.__value_.__l.__data_;
                          v638 = (uint64_t *)*v619;
                        }
                        v181 = (uint64_t)std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>((uint64_t *)__s.__r_.__value_.__l.__size_, v638);
                        ++__s.__r_.__value_.__r.__words[2];
                        LOBYTE(v621) = *((_BYTE *)&__p[0].__r_.__value_.__s + 23);
LABEL_1485:
                        *((double *)v618 + 7) = (double)v608 / 1000.0;
                        v570 = v745;
                        if ((v621 & 0x80) != 0)
                        {
                          operator delete(__p[0].__r_.__value_.__l.__data_);
                          v639 = *(std::string **)(v602 + 8);
                          if (v639)
                            goto LABEL_1489;
                          do
                          {
LABEL_1491:
                            v640 = *(std::string **)(v602 + 16);
                            v22 = v640->__r_.__value_.__r.__words[0] == v602;
                            v602 = (std::string::size_type)v640;
                          }
                          while (!v22);
                        }
                        else
                        {
                          v639 = *(std::string **)(v602 + 8);
                          if (!v639)
                            goto LABEL_1491;
                          do
                          {
LABEL_1489:
                            v640 = v639;
                            v639 = (std::string *)v639->__r_.__value_.__r.__words[0];
                          }
                          while (v639);
                        }
                        v602 = (std::string::size_type)v640;
                        if (v640 == (std::string *)&__sz.__r_.__value_.__r.__words[1])
                          goto LABEL_1423;
                        continue;
                      }
                    }
                  }
                  else
                  {
                    if (*(char *)(v390 + 391) < 0)
                    {
                      std::string::__init_copy_ctor_external(v428, *(const std::string::value_type **)(v390 + 368), *(_QWORD *)(v390 + 376));
                    }
                    else
                    {
                      v431 = *(_OWORD *)&v427->__r_.__value_.__l.__data_;
                      *(_QWORD *)(v394 + 936) = *(_QWORD *)(v390 + 384);
                      *(_OWORD *)&v428->__r_.__value_.__l.__data_ = v431;
                    }
                    *(_BYTE *)(v394 + 944) = 1;
                  }
                }
LABEL_1033:
                if (!*(_BYTE *)(v390 + 401))
                  goto LABEL_1035;
                goto LABEL_1034;
              }
              *(_BYTE *)(v394 + 895) = 11;
              if (v426 <= "screenshare" && v394 + 883 > (unint64_t)"screenshare")
                goto LABEL_1646;
              strcpy((char *)(v394 + 872), "screenshare");
              *(_BYTE *)(v394 + 896) = 1;
            }
            if (*(_BYTE *)(v390 + 392))
              goto LABEL_1016;
            goto LABEL_1033;
          }
          std::string::__assign_no_alias<true>(v398, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
        }
        v400 = (char *)(v394 + 48);
        if (*(_BYTE *)(v394 + 72))
          goto LABEL_942;
      }
      else
      {
        if (SHIBYTE(__len.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v398, __len.__r_.__value_.__l.__data_, __len.__r_.__value_.__l.__size_);
          *(_BYTE *)(v394 + 256) = 1;
          v400 = (char *)(v394 + 48);
          if (!*(_BYTE *)(v394 + 72))
            break;
          goto LABEL_942;
        }
        HIDWORD(v399) = HIDWORD(__len.__r_.__value_.__r.__words[0]);
        *(_OWORD *)&v398->__r_.__value_.__l.__data_ = *(_OWORD *)&__len.__r_.__value_.__l.__data_;
        *(_QWORD *)(v394 + 248) = *((_QWORD *)&__len.__r_.__value_.__l + 2);
        *(_BYTE *)(v394 + 256) = 1;
        v400 = (char *)(v394 + 48);
        if (*(_BYTE *)(v394 + 72))
          goto LABEL_942;
      }
      break;
    }
    *(_BYTE *)(v394 + 71) = 5;
    if (v400 <= "video" && v394 + 53 > (unint64_t)"video")
      goto LABEL_1646;
    v400[4] = 111;
    *(_DWORD *)v400 = 1701079414;
    *(_BYTE *)(v394 + 53) = 0;
    *(_BYTE *)(v394 + 72) = 1;
    if (*(_BYTE *)(v390 + 156))
      goto LABEL_946;
    goto LABEL_963;
  }
LABEL_1642:
  *((_BYTE *)v319 + 217) = v733;
  *((_BYTE *)v713 + 217) = v712;
}

