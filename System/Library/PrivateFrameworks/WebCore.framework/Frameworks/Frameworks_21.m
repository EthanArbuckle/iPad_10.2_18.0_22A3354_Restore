double vp9_loop_filter_dealloc(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  pthread_mutex_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (a1[7] < 1)
      goto LABEL_6;
    v3 = 0;
    v4 = 0;
    do
    {
      pthread_mutex_destroy((pthread_mutex_t *)(*(_QWORD *)a1 + v3));
      ++v4;
      v3 += 64;
    }
    while (v4 < a1[7]);
    v2 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
LABEL_6:
      free(*(void **)(v2 - 8));
  }
  v5 = *((_QWORD *)a1 + 1);
  if (v5)
  {
    if (a1[7] < 1)
      goto LABEL_12;
    v6 = 0;
    v7 = 0;
    do
    {
      pthread_cond_destroy((pthread_cond_t *)(*((_QWORD *)a1 + 1) + v6));
      ++v7;
      v6 += 48;
    }
    while (v7 < a1[7]);
    v5 = *((_QWORD *)a1 + 1);
    if (v5)
LABEL_12:
      free(*(void **)(v5 - 8));
  }
  v8 = *((_QWORD *)a1 + 7);
  if (v8)
  {
    if (a1[7] < 1)
      goto LABEL_18;
    v9 = 0;
    v10 = 0;
    do
    {
      pthread_mutex_destroy((pthread_mutex_t *)(*((_QWORD *)a1 + 7) + v9));
      ++v10;
      v9 += 64;
    }
    while (v10 < a1[7]);
    v8 = *((_QWORD *)a1 + 7);
    if (v8)
LABEL_18:
      free(*(void **)(v8 - 8));
  }
  v11 = (pthread_mutex_t *)*((_QWORD *)a1 + 6);
  if (v11)
  {
    pthread_mutex_destroy(v11);
    v12 = *((_QWORD *)a1 + 6);
    if (v12)
      free(*(void **)(v12 - 8));
  }
  v13 = *((_QWORD *)a1 + 8);
  if (v13)
  {
    if (a1[7] < 1)
      goto LABEL_27;
    v14 = 0;
    v15 = 0;
    do
    {
      pthread_cond_destroy((pthread_cond_t *)(*((_QWORD *)a1 + 8) + v14));
      ++v15;
      v14 += 48;
    }
    while (v15 < a1[7]);
    v13 = *((_QWORD *)a1 + 8);
    if (v13)
LABEL_27:
      free(*(void **)(v13 - 8));
  }
  v16 = *((_QWORD *)a1 + 4);
  if (v16)
    free(*(void **)(v16 - 8));
  v17 = *((_QWORD *)a1 + 2);
  if (v17)
    free(*(void **)(v17 - 8));
  v18 = *((_QWORD *)a1 + 9);
  if (v18)
    free(*(void **)(v18 - 8));
  *((_QWORD *)a1 + 10) = 0;
  result = 0.0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t vp9_loop_filter_alloc(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  pthread_mutex_t *v22;
  pthread_mutex_t **v23;
  void *v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  unint64_t v34;
  size_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  unint64_t v40;
  int v41;

  *(_DWORD *)(a1 + 28) = a3;
  v10 = a3;
  v11 = ((uint64_t)a3 << 6) | 0x17;
  if (v11 > 0x10000000000 || (v12 = malloc_type_malloc(((uint64_t)a3 << 6) | 0x17, 0x74AD08B5uLL)) == 0)
  {
    *(_QWORD *)a1 = 0;
LABEL_7:
    vpx_internal_error(a2, 2, "Failed to allocate lf_sync->mutex");
    v13 = *(_QWORD *)a1;
    if (a3 < 1)
      goto LABEL_11;
    goto LABEL_8;
  }
  v13 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v13 - 8) = v12;
  *(_QWORD *)a1 = v13;
  if (!v13)
    goto LABEL_7;
  if (a3 < 1)
    goto LABEL_11;
LABEL_8:
  if (v13)
  {
    v14 = 0;
    do
    {
      pthread_mutex_init((pthread_mutex_t *)(*(_QWORD *)a1 + v14), 0);
      v14 += 64;
    }
    while ((unint64_t)a3 << 6 != v14);
  }
LABEL_11:
  v15 = 48 * (int)v10 + 23;
  if (v15 <= 0x10000000000 && (v16 = malloc_type_malloc(48 * (int)v10 + 23, 0x74AD08B5uLL)) != 0)
  {
    v17 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v17 - 8) = v16;
    *(_QWORD *)(a1 + 8) = v17;
    v18 = (unint64_t *)(a1 + 8);
    if (v17)
    {
      if (a3 < 1)
        goto LABEL_21;
      goto LABEL_18;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v18 = (unint64_t *)(a1 + 8);
  }
  vpx_internal_error(a2, 2, "Failed to allocate lf_sync->cond");
  v17 = *v18;
  if (a3 < 1)
    goto LABEL_21;
LABEL_18:
  if (v17)
  {
    v19 = 0;
    do
    {
      pthread_cond_init((pthread_cond_t *)(*v18 + v19), 0);
      v19 += 48;
    }
    while (48 * a3 != v19);
  }
LABEL_21:
  v20 = malloc_type_malloc(0x57uLL, 0x74AD08B5uLL);
  if (v20)
  {
    v21 = v20;
    v22 = (pthread_mutex_t *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF0);
    *(_QWORD *)&v22[-1].__opaque[48] = v21;
    *(_QWORD *)(a1 + 48) = v22;
    v23 = (pthread_mutex_t **)(a1 + 48);
    if (v22)
    {
      pthread_mutex_init(v22, 0);
      if (v11 > 0x10000000000)
        goto LABEL_31;
      goto LABEL_27;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 48) = 0;
    v23 = (pthread_mutex_t **)(a1 + 48);
  }
  vpx_internal_error(a2, 2, "Failed to allocate lf_sync->lf_mutex");
  pthread_mutex_init(*v23, 0);
  if (v11 > 0x10000000000)
  {
LABEL_31:
    *(_QWORD *)(a1 + 56) = 0;
    v26 = (unint64_t *)(a1 + 56);
LABEL_32:
    vpx_internal_error(a2, 2, "Failed to allocate lf_sync->recon_done_mutex");
    v25 = *v26;
    if (a3 < 1)
      goto LABEL_36;
    goto LABEL_33;
  }
LABEL_27:
  v24 = malloc_type_malloc(v11, 0x74AD08B5uLL);
  if (!v24)
    goto LABEL_31;
  v25 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v25 - 8) = v24;
  *(_QWORD *)(a1 + 56) = v25;
  v26 = (unint64_t *)(a1 + 56);
  if (!v25)
    goto LABEL_32;
  if (a3 < 1)
    goto LABEL_36;
LABEL_33:
  if (v25)
  {
    v27 = 0;
    do
    {
      pthread_mutex_init((pthread_mutex_t *)(*v26 + v27), 0);
      v27 += 64;
    }
    while ((unint64_t)a3 << 6 != v27);
  }
LABEL_36:
  if (v15 > 0x10000000000 || (v28 = malloc_type_malloc(48 * (int)v10 + 23, 0x74AD08B5uLL)) == 0)
  {
    *(_QWORD *)(a1 + 64) = 0;
    v30 = (unint64_t *)(a1 + 64);
LABEL_42:
    vpx_internal_error(a2, 2, "Failed to allocate lf_sync->recon_done_cond");
    v29 = *v30;
    if (a3 < 1)
      goto LABEL_46;
    goto LABEL_43;
  }
  v29 = ((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v29 - 8) = v28;
  *(_QWORD *)(a1 + 64) = v29;
  v30 = (unint64_t *)(a1 + 64);
  if (!v29)
    goto LABEL_42;
  if (a3 < 1)
    goto LABEL_46;
LABEL_43:
  if (v29)
  {
    v31 = 0;
    do
    {
      pthread_cond_init((pthread_cond_t *)(*v30 + v31), 0);
      v31 += 48;
    }
    while (48 * a3 != v31);
  }
LABEL_46:
  v32 = 440 * a5 + 23;
  if (v32 <= 0x10000000000 && (v33 = malloc_type_malloc(v32, 0x74AD08B5uLL)) != 0)
  {
    v34 = ((unint64_t)v33 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v34 - 8) = v33;
    *(_QWORD *)(a1 + 32) = v34;
    if (v34)
    {
      *(_DWORD *)(a1 + 40) = a5;
      *(_DWORD *)(a1 + 44) = a5;
      v35 = 4 * v10 + 23;
      if (v35 > 0x10000000000)
        goto LABEL_56;
      goto LABEL_53;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
  }
  vpx_internal_error(a2, 2, "Failed to allocate lf_sync->lfdata");
  *(_DWORD *)(a1 + 40) = a5;
  *(_DWORD *)(a1 + 44) = a5;
  v35 = 4 * v10 + 23;
  if (v35 > 0x10000000000)
  {
LABEL_56:
    *(_QWORD *)(a1 + 16) = 0;
LABEL_57:
    vpx_internal_error(a2, 2, "Failed to allocate lf_sync->cur_sb_col");
    goto LABEL_58;
  }
LABEL_53:
  v36 = malloc_type_malloc(v35, 0x74AD08B5uLL);
  if (!v36)
    goto LABEL_56;
  v37 = ((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v37 - 8) = v36;
  *(_QWORD *)(a1 + 16) = v37;
  if (!v37)
    goto LABEL_57;
LABEL_58:
  v38 = ((*(int *)(a2 + 1312) + 7) & 0x3FFFFFFFFFFFFFF8uLL) >> 1;
  if (v38 > 0xFFFFFFFFE9 || (result = (uint64_t)malloc_type_malloc(v38 + 23, 0x74AD08B5uLL)) == 0)
  {
    *(_QWORD *)(a1 + 72) = 0;
LABEL_64:
    result = vpx_internal_error(a2, 2, "Failed to allocate lf_sync->num_tiles_done");
    if (a4 < 640)
      goto LABEL_62;
    goto LABEL_65;
  }
  v40 = (result + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v40 - 8) = result;
  *(_QWORD *)(a1 + 72) = v40;
  if (!v40)
    goto LABEL_64;
  if (a4 < 640)
  {
LABEL_62:
    v41 = 1;
    goto LABEL_70;
  }
LABEL_65:
  if (a4 >= 0x501)
  {
    if (a4 > 0x1000)
      v41 = 8;
    else
      v41 = 4;
  }
  else
  {
    v41 = 2;
  }
LABEL_70:
  *(_DWORD *)(a1 + 24) = v41;
  return result;
}

uint64_t vp9_loopfilter_rows(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_DWORD **)(a1 + 8);
  v5 = v4[328];
  v6 = v4[4558];
  pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 48));
  v7 = v4[4569];
  if (v7 >= v5)
    return pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 48));
  while (1)
  {
    v8 = v7 + 8;
    v4[4569] = v7 + 8;
    result = pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 48));
    if (v7 == -1)
      break;
    v10 = 1 << v6;
    v11 = v8 < v5;
    v12 = (uint64_t)v7 >> 3;
    if (v11)
      v13 = v12 + 1;
    else
      v13 = (uint64_t)v7 >> 3;
    pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)(a2 + 56) + (v13 << 6)));
    if (*(_DWORD *)(*(_QWORD *)(a2 + 72) + 4 * v13) < v10)
      pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)(a2 + 64) + 48 * v13), (pthread_mutex_t *)(*(_QWORD *)(a2 + 56) + (v13 << 6)));
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)(a2 + 56) + (v13 << 6)));
    pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 48));
    if (*(_DWORD *)(a2 + 80))
    {
      pthread_mutex_lock((pthread_mutex_t *)(*(_QWORD *)a2 + (v12 << 6)));
      v14 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)(*(_QWORD *)(a2 + 16) + 4 * v12) = 0x7FFFFFFF;
      pthread_cond_signal((pthread_cond_t *)(v14 + 48 * (int)v12));
      pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a2 + (v12 << 6)));
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 48));
    }
    result = pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 48));
    if (v7 >= v4[328])
      return result;
    *(_DWORD *)(a1 + 424) = v7;
    *(_DWORD *)(a1 + 428) = v8;
    thread_loop_filter_rows(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a1 + 16, v7, v7 + 8, *(_DWORD *)(a1 + 432), a2);
    v5 = v4[328];
    v6 = v4[4558];
    pthread_mutex_lock(*(pthread_mutex_t **)(a2 + 48));
    v7 = v4[4569];
    if (v7 >= v5)
      return pthread_mutex_unlock(*(pthread_mutex_t **)(a2 + 48));
  }
  return result;
}

void thread_loop_filter_rows(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7)
{
  int v8;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  pthread_mutex_t *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int v42;
  pthread_mutex_t *v43;
  int v44;
  double v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  int v79;
  uint64_t v80;

  v8 = a4;
  if (a6)
    goto LABEL_2;
  v12 = *(_DWORD *)(a3 + 148);
  if (v12)
  {
    if (v12 == 1 && *(_DWORD *)(a3 + 144) == 1)
    {
      v74 = 0;
      if (a4 >= a5)
        return;
      goto LABEL_11;
    }
  }
  else if (!*(_DWORD *)(a3 + 144))
  {
LABEL_2:
    v11 = 1;
    goto LABEL_10;
  }
  v11 = 2;
LABEL_10:
  v74 = v11;
  if (a4 >= a5)
    return;
LABEL_11:
  v13 = *(_DWORD *)(a2 + 1320);
  if (v13 >= 1)
  {
    v75 = (v13 + 7) >> 3;
    v69 = 8 * *(_DWORD *)(a7 + 44);
    v72 = a3 + 272;
    v73 = a3 + 136;
    while (v13 < 1)
    {
LABEL_13:
      v8 += v69;
      if (v8 >= a5)
        return;
    }
    v14 = 0;
    v71 = *(_QWORD *)(a2 + 1480) + 8 * *(_DWORD *)(a2 + 1324) * v8;
    v15 = (uint64_t *)(*(_QWORD *)(a2 + 4760) + 160 * *(int *)(a2 + 4768) * (uint64_t)(v8 >> 3));
    v80 = (uint64_t)v8 >> 3;
    v16 = v80 - 1;
    v79 = 8 * v8;
    v76 = v8;
    while (1)
    {
      v18 = v14 >> 3;
      if (v8 >= 8)
      {
        v19 = *(_DWORD *)(a7 + 24);
        if (((v19 + 0xFFFFFFF) & v18) == 0)
        {
          v20 = (pthread_mutex_t *)(*(_QWORD *)a7 + (v16 << 6));
          v21 = 4000;
          while (pthread_mutex_trylock(v20))
          {
            if (!--v21)
            {
              pthread_mutex_lock(v20);
              break;
            }
          }
          while (*(_DWORD *)(*(_QWORD *)(a7 + 16) + 4 * v16) - v19 < (int)v18)
            pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)(a7 + 8) + 48 * (int)v16), v20);
          pthread_mutex_unlock(v20);
          v8 = v76;
        }
      }
      v22 = *(_QWORD *)(a1 + 64);
      v23 = *(_QWORD *)(a1 + 72);
      v24 = *(_DWORD *)(a1 + 16);
      v25 = *(_DWORD *)(a1 + 36);
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a1 + 56)
                           + ((8 * (int)v14) >> *(_DWORD *)(a3 + 8))
                           + v24 * (uint64_t)(v79 >> *(_DWORD *)(a3 + 12));
      *(_DWORD *)(a3 + 24) = v24;
      *(_QWORD *)(a3 + 152) = v22
                            + ((8 * (int)v14) >> *(_DWORD *)(a3 + 144))
                            + v25 * (uint64_t)(v79 >> *(_DWORD *)(a3 + 148));
      *(_DWORD *)(a3 + 160) = v25;
      *(_QWORD *)(a3 + 288) = v23
                            + ((8 * (int)v14) >> *(_DWORD *)(a3 + 280))
                            + v25 * (uint64_t)(v79 >> *(_DWORD *)(a3 + 284));
      *(_DWORD *)(a3 + 296) = v25;
      vp9_adjust_mask(a2, v8, v14, (uint64_t)v15);
      vp9_filter_block_plane_ss00((_DWORD *)a2, a3, v8, v15, v26, v27, v28, v29, v30, v31, v32, v33);
      if (!a6)
      {
        if (v74)
        {
          if (v74 == 1)
          {
            vp9_filter_block_plane_ss00((_DWORD *)a2, v73, v8, v15, v34, v35, v36, v37, v38, v39, v40, v41);
            vp9_filter_block_plane_ss00((_DWORD *)a2, v72, v8, v15, v61, v62, v63, v64, v65, v66, v67, v68);
          }
          else
          {
            vp9_filter_block_plane_non420((_DWORD *)a2, v73, v71 + 8 * v14, v8, v14, *(double *)v34.i64, v35, v36, v37, v38, v39, v40, v41);
            vp9_filter_block_plane_non420((_DWORD *)a2, v72, v71 + 8 * v14, v8, v14, v45, v46, v47, v48, v49, v50, v51, v52);
          }
        }
        else
        {
          vp9_filter_block_plane_ss11((_DWORD *)a2, v73, v8, (uint64_t)v15, v34, v35, v36, v37, v38, v39, v40, v41);
          vp9_filter_block_plane_ss11((_DWORD *)a2, v72, v8, (uint64_t)v15, v53, v54, v55, v56, v57, v58, v59, v60);
        }
      }
      v42 = *(_DWORD *)(a7 + 24);
      if (v75 - 1 <= (int)v18)
        break;
      if (!((int)v18 % v42))
        goto LABEL_32;
LABEL_17:
      v14 += 8;
      v15 += 20;
      v13 = *(_DWORD *)(a2 + 1320);
      if (v13 <= (int)v14)
        goto LABEL_13;
    }
    LODWORD(v18) = v42 + v75;
LABEL_32:
    v43 = (pthread_mutex_t *)(*(_QWORD *)a7 + (v80 << 6));
    v44 = 4000;
    while (pthread_mutex_trylock(v43))
    {
      if (!--v44)
      {
        pthread_mutex_lock(v43);
        break;
      }
    }
    v17 = *(_QWORD *)(a7 + 8);
    *(_DWORD *)(*(_QWORD *)(a7 + 16) + 4 * v80) = v18;
    pthread_cond_signal((pthread_cond_t *)(v17 + 48 * (int)v80));
    pthread_mutex_unlock((pthread_mutex_t *)(*(_QWORD *)a7 + (v80 << 6)));
    v8 = v76;
    goto LABEL_17;
  }
}

_DWORD *vp9_accumulate_frame_counts(_DWORD *result, const float *a2, int a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  const float *v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD *v36;
  int v37;
  int v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  _DWORD *v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  const float *v67;
  float *v68;
  const float *v69;
  float *v70;
  const float *v71;
  float *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  _DWORD *v79;
  _DWORD *v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  _DWORD *v85;
  const float *v86;
  char v87;
  float32x4x4_t v88;
  float32x4x4_t v89;
  float32x4x4_t v90;
  float32x4x4_t v91;
  float32x4x4_t v92;
  float32x4x4_t v93;
  float32x4x4_t v94;
  float32x4x4_t v95;
  float32x4x4_t v96;

  v3 = 0;
  v4 = result[1];
  *result += *(_DWORD *)a2;
  result[1] = v4 + *((_DWORD *)a2 + 1);
  v5 = result[3];
  result[2] += *((_DWORD *)a2 + 2);
  result[3] = v5 + *((_DWORD *)a2 + 3);
  v6 = result[5];
  result[4] += *((_DWORD *)a2 + 4);
  result[5] = v6 + *((_DWORD *)a2 + 5);
  v7 = result[7];
  result[6] += *((_DWORD *)a2 + 6);
  result[7] = v7 + *((_DWORD *)a2 + 7);
  v8 = result[9];
  result[8] += *((_DWORD *)a2 + 8);
  result[9] = v8 + *((_DWORD *)a2 + 9);
  v9 = result[11];
  result[10] += *((_DWORD *)a2 + 10);
  result[11] = v9 + *((_DWORD *)a2 + 11);
  v10 = result[13];
  result[12] += *((_DWORD *)a2 + 12);
  result[13] = v10 + *((_DWORD *)a2 + 13);
  v11 = result[15];
  result[14] += *((_DWORD *)a2 + 14);
  result[15] = v11 + *((_DWORD *)a2 + 15);
  v12 = result[17];
  result[16] += *((_DWORD *)a2 + 16);
  result[17] = v12 + *((_DWORD *)a2 + 17);
  v13 = result[19];
  result[18] += *((_DWORD *)a2 + 18);
  result[19] = v13 + *((_DWORD *)a2 + 19);
  v14 = result[21];
  result[20] += *((_DWORD *)a2 + 20);
  result[21] = v14 + *((_DWORD *)a2 + 21);
  v15 = result[23];
  result[22] += *((_DWORD *)a2 + 22);
  result[23] = v15 + *((_DWORD *)a2 + 23);
  v16 = result[25];
  result[24] += *((_DWORD *)a2 + 24);
  result[25] = v16 + *((_DWORD *)a2 + 25);
  v17 = result[27];
  result[26] += *((_DWORD *)a2 + 26);
  result[27] = v17 + *((_DWORD *)a2 + 27);
  v18 = result[29];
  result[28] += *((_DWORD *)a2 + 28);
  result[29] = v18 + *((_DWORD *)a2 + 29);
  v19 = result[31];
  result[30] += *((_DWORD *)a2 + 30);
  result[31] = v19 + *((_DWORD *)a2 + 31);
  v20 = result[33];
  result[32] += *((_DWORD *)a2 + 32);
  result[33] = v20 + *((_DWORD *)a2 + 33);
  v21 = result[35];
  result[34] += *((_DWORD *)a2 + 34);
  result[35] = v21 + *((_DWORD *)a2 + 35);
  v22 = result[37];
  result[36] += *((_DWORD *)a2 + 36);
  result[37] = v22 + *((_DWORD *)a2 + 37);
  v23 = result[39];
  result[38] += *((_DWORD *)a2 + 38);
  result[39] = v23 + *((_DWORD *)a2 + 39);
  v24 = result + 40;
  v25 = a2 + 49;
  do
  {
    v26 = &v24[v3];
    v27 = v24[v3 + 1];
    *v26 = v24[v3] + v25[v3 - 9];
    v26[1] = v27 + v25[v3 - 8];
    v28 = v24[v3 + 3];
    v26[2] = v24[v3 + 2] + v25[v3 - 7];
    v26[3] = v28 + v25[v3 - 6];
    v29 = v24[v3 + 5];
    v26[4] = v24[v3 + 4] + v25[v3 - 5];
    v26[5] = v29 + v25[v3 - 4];
    v30 = v24[v3 + 7];
    v26[6] = v24[v3 + 6] + v25[v3 - 3];
    v26[7] = v30 + v25[v3 - 2];
    v31 = v24[v3 + 9];
    v26[8] = v24[v3 + 8] + v25[v3 - 1];
    v26[9] = v31 + v25[v3];
    v3 += 10;
  }
  while (v3 != 100);
  if (result + 140 >= (_DWORD *)a2 + 204 || a2 + 140 >= (const float *)result + 204)
  {
    v67 = a2 + 140;
    v88 = vld4q_f32(v67);
    v67 += 16;
    v32 = (const float *)(result + 140);
    v92 = vld4q_f32(v32);
    v96.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v92.val[0], (int32x4_t)v88.val[0]);
    v96.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v92.val[1], (int32x4_t)v88.val[1]);
    v96.val[2] = (float32x4_t)vaddq_s32((int32x4_t)v92.val[2], (int32x4_t)v88.val[2]);
    v96.val[3] = (float32x4_t)vaddq_s32((int32x4_t)v92.val[3], (int32x4_t)v88.val[3]);
    v68 = (float *)(result + 140);
    vst4q_f32(v68, v96);
    v68 += 16;
    v89 = vld4q_f32(v67);
    v93 = vld4q_f32(v68);
    v96.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v93.val[0], (int32x4_t)v89.val[0]);
    v96.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v93.val[1], (int32x4_t)v89.val[1]);
    v96.val[2] = (float32x4_t)vaddq_s32((int32x4_t)v93.val[2], (int32x4_t)v89.val[2]);
    v96.val[3] = (float32x4_t)vaddq_s32((int32x4_t)v93.val[3], (int32x4_t)v89.val[3]);
    vst4q_f32(v68, v96);
    v69 = a2 + 172;
    v90 = vld4q_f32(v69);
    v70 = (float *)(result + 172);
    v94 = vld4q_f32(v70);
    v96.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v94.val[0], (int32x4_t)v90.val[0]);
    v96.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v94.val[1], (int32x4_t)v90.val[1]);
    v96.val[2] = (float32x4_t)vaddq_s32((int32x4_t)v94.val[2], (int32x4_t)v90.val[2]);
    v96.val[3] = (float32x4_t)vaddq_s32((int32x4_t)v94.val[3], (int32x4_t)v90.val[3]);
    vst4q_f32(v70, v96);
    v71 = a2 + 188;
    v91 = vld4q_f32(v71);
    v72 = (float *)(result + 188);
    v95 = vld4q_f32(v72);
    v96.val[0] = (float32x4_t)vaddq_s32((int32x4_t)v95.val[0], (int32x4_t)v91.val[0]);
    v96.val[1] = (float32x4_t)vaddq_s32((int32x4_t)v95.val[1], (int32x4_t)v91.val[1]);
    v96.val[2] = (float32x4_t)vaddq_s32((int32x4_t)v95.val[2], (int32x4_t)v91.val[2]);
    v96.val[3] = (float32x4_t)vaddq_s32((int32x4_t)v95.val[3], (int32x4_t)v91.val[3]);
    vst4q_f32(v72, v96);
    v39 = 0;
    if (a3)
      goto LABEL_8;
    do
    {
LABEL_18:
      v73 = 0;
      v74 = 1;
      do
      {
        v75 = 0;
        v76 = v74;
        v77 = 1;
        do
        {
          v78 = 288 * v73 + 144 * v75;
          v79 = (_DWORD *)((char *)&a2[144 * v39] + v78);
          v80 = (_DWORD *)((char *)&result[144 * v39] + v78);
          v80[2508] += v79[2508];
          v80[2509] += v79[2509];
          v80[2510] += v79[2510];
          v80[2511] += v79[2511];
          v80[2512] += v79[2512];
          v80[2513] += v79[2513];
          v80[2514] += v79[2514];
          v80[2515] += v79[2515];
          v80[2516] += v79[2516];
          v80[2517] += v79[2517];
          v80[2518] += v79[2518];
          v80[2519] += v79[2519];
          v80[2520] += v79[2520];
          v80[2521] += v79[2521];
          v80[2522] += v79[2522];
          v80[2523] += v79[2523];
          v80[2524] += v79[2524];
          v80[2525] += v79[2525];
          v80[2526] += v79[2526];
          v80[2527] += v79[2527];
          v80[2528] += v79[2528];
          v80[2529] += v79[2529];
          v80[2530] += v79[2530];
          v80[2531] += v79[2531];
          v80[2532] += v79[2532];
          v80[2533] += v79[2533];
          v80[2534] += v79[2534];
          v80[2535] += v79[2535];
          v80[2536] += v79[2536];
          v80[2537] += v79[2537];
          v80[2538] += v79[2538];
          v80[2539] += v79[2539];
          v80[2540] += v79[2540];
          v80[2541] += v79[2541];
          v80[2542] += v79[2542];
          v81 = v77;
          v80[2543] += v79[2543];
          v75 = 1;
          v77 = 0;
        }
        while ((v81 & 1) != 0);
        v74 = 0;
        v73 = 1;
      }
      while ((v76 & 1) != 0);
      ++v39;
    }
    while (v39 != 4);
    goto LABEL_23;
  }
  v33 = 0;
  v34 = result + 140;
  v35 = a2 + 143;
  do
  {
    v36 = &v34[v33];
    v37 = v34[v33 + 1];
    *v36 = v34[v33] + v35[v33 - 3];
    v36[1] = v37 + v35[v33 - 2];
    v38 = v34[v33 + 3];
    v36[2] = v34[v33 + 2] + v35[v33 - 1];
    v36[3] = v38 + v35[v33];
    v33 += 4;
  }
  while (v33 != 64);
  v39 = 0;
  if (!a3)
    goto LABEL_18;
LABEL_8:
  v40 = a2 + 204;
  v41 = a2 + 2511;
  v42 = result + 2511;
  v43 = result;
  do
  {
    v44 = 0;
    v45 = 1;
    do
    {
      v46 = 0;
      v47 = v45;
      v48 = 9 * v44;
      v49 = 288 * v44;
      v50 = &v43[288 * v44];
      v51 = &v40[v49];
      v52 = 8 * v48;
      v53 = &v41[8 * v48];
      v54 = &v42[v52];
      v55 = 1;
      do
      {
        v56 = 0;
        v57 = v55;
        v58 = 9 * v46;
        v59 = 144 * v46;
        v60 = &v50[144 * v46];
        v61 = &v51[v59];
        v62 = 4 * v58;
        v63 = &v53[4 * v58];
        v64 = &v54[v62];
        do
        {
          v65 = &v64[v56];
          *(v65 - 3) = v64[v56 - 3] + v63[v56 - 3];
          v66 = &v60[v56 * 4];
          v66[204] += *v61;
          v66[205] += v61[1];
          v66[206] += v61[2];
          v66[207] += v61[3];
          *(v65 - 2) = v64[v56 - 2] + v63[v56 - 2];
          v66[208] += v61[4];
          v66[209] += v61[5];
          v66[210] += v61[6];
          v66[211] += v61[7];
          *(v65 - 1) = v64[v56 - 1] + v63[v56 - 1];
          v66[212] += v61[8];
          v66[213] += v61[9];
          v66[214] += v61[10];
          v66[215] += v61[11];
          *v65 = v64[v56] + v63[v56];
          v66[216] += v61[12];
          v66[217] += v61[13];
          v66[218] += v61[14];
          v66[219] += v61[15];
          v65[1] = v64[v56 + 1] + v63[v56 + 1];
          v66[220] += v61[16];
          v66[221] += v61[17];
          v66[222] += v61[18];
          v66[223] += v61[19];
          v65[2] = v64[v56 + 2] + v63[v56 + 2];
          v66[224] += v61[20];
          v66[225] += v61[21];
          v66[226] += v61[22];
          v66[227] += v61[23];
          v56 += 6;
          v61 += 24;
        }
        while (v56 != 36);
        v55 = 0;
        v46 = 1;
      }
      while ((v57 & 1) != 0);
      v45 = 0;
      v44 = 1;
    }
    while ((v47 & 1) != 0);
    ++v39;
    v43 += 576;
    v40 += 576;
    v41 += 144;
    v42 += 144;
  }
  while (v39 != 4);
LABEL_23:
  v82 = 0;
  result[3084] += *((_DWORD *)a2 + 3084);
  result[3085] += *((_DWORD *)a2 + 3085);
  result[3086] += *((_DWORD *)a2 + 3086);
  result[3087] += *((_DWORD *)a2 + 3087);
  result[3088] += *((_DWORD *)a2 + 3088);
  result[3089] += *((_DWORD *)a2 + 3089);
  result[3090] += *((_DWORD *)a2 + 3090);
  result[3091] += *((_DWORD *)a2 + 3091);
  result[3092] += *((_DWORD *)a2 + 3092);
  result[3093] += *((_DWORD *)a2 + 3093);
  result[3094] += *((_DWORD *)a2 + 3094);
  result[3095] += *((_DWORD *)a2 + 3095);
  result[3096] += *((_DWORD *)a2 + 3096);
  result[3097] += *((_DWORD *)a2 + 3097);
  result[3098] += *((_DWORD *)a2 + 3098);
  result[3099] += *((_DWORD *)a2 + 3099);
  result[3100] += *((_DWORD *)a2 + 3100);
  result[3101] += *((_DWORD *)a2 + 3101);
  result[3102] += *((_DWORD *)a2 + 3102);
  result[3103] += *((_DWORD *)a2 + 3103);
  result[3104] += *((_DWORD *)a2 + 3104);
  result[3105] += *((_DWORD *)a2 + 3105);
  result[3106] += *((_DWORD *)a2 + 3106);
  result[3107] += *((_DWORD *)a2 + 3107);
  result[3108] += *((_DWORD *)a2 + 3108);
  result[3109] += *((_DWORD *)a2 + 3109);
  result[3110] += *((_DWORD *)a2 + 3110);
  result[3111] += *((_DWORD *)a2 + 3111);
  result[3112] += *((_DWORD *)a2 + 3112);
  result[3113] += *((_DWORD *)a2 + 3113);
  result[3114] += *((_DWORD *)a2 + 3114);
  result[3115] += *((_DWORD *)a2 + 3115);
  result[3116] += *((_DWORD *)a2 + 3116);
  result[3117] += *((_DWORD *)a2 + 3117);
  result[3118] += *((_DWORD *)a2 + 3118);
  result[3119] += *((_DWORD *)a2 + 3119);
  result[3120] += *((_DWORD *)a2 + 3120);
  result[3121] += *((_DWORD *)a2 + 3121);
  result[3122] += *((_DWORD *)a2 + 3122);
  result[3123] += *((_DWORD *)a2 + 3123);
  result[3124] += *((_DWORD *)a2 + 3124);
  result[3125] += *((_DWORD *)a2 + 3125);
  result[3126] += *((_DWORD *)a2 + 3126);
  result[3127] += *((_DWORD *)a2 + 3127);
  result[3128] += *((_DWORD *)a2 + 3128);
  result[3129] += *((_DWORD *)a2 + 3129);
  result[3130] += *((_DWORD *)a2 + 3130);
  result[3131] += *((_DWORD *)a2 + 3131);
  result[3132] += *((_DWORD *)a2 + 3132);
  result[3133] += *((_DWORD *)a2 + 3133);
  result[3134] += *((_DWORD *)a2 + 3134);
  result[3135] += *((_DWORD *)a2 + 3135);
  result[3136] += *((_DWORD *)a2 + 3136);
  result[3137] += *((_DWORD *)a2 + 3137);
  result[3138] += *((_DWORD *)a2 + 3138);
  result[3139] += *((_DWORD *)a2 + 3139);
  result[3140] += *((_DWORD *)a2 + 3140);
  result[3141] += *((_DWORD *)a2 + 3141);
  result[3142] += *((_DWORD *)a2 + 3142);
  result[3143] += *((_DWORD *)a2 + 3143);
  result[3144] += *((_DWORD *)a2 + 3144);
  result[3145] += *((_DWORD *)a2 + 3145);
  result[3146] += *((_DWORD *)a2 + 3146);
  result[3147] += *((_DWORD *)a2 + 3147);
  result[3148] += *((_DWORD *)a2 + 3148);
  result[3149] += *((_DWORD *)a2 + 3149);
  result[3150] += *((_DWORD *)a2 + 3150);
  result[3151] += *((_DWORD *)a2 + 3151);
  result[3152] += *((_DWORD *)a2 + 3152);
  result[3153] += *((_DWORD *)a2 + 3153);
  result[3154] += *((_DWORD *)a2 + 3154);
  result[3155] += *((_DWORD *)a2 + 3155);
  result[3156] += *((_DWORD *)a2 + 3156);
  result[3157] += *((_DWORD *)a2 + 3157);
  result[3158] += *((_DWORD *)a2 + 3158);
  result[3159] += *((_DWORD *)a2 + 3159);
  result[3160] += *((_DWORD *)a2 + 3160);
  result[3161] += *((_DWORD *)a2 + 3161);
  result[3162] += *((_DWORD *)a2 + 3162);
  result[3163] += *((_DWORD *)a2 + 3163);
  result[3164] += *((_DWORD *)a2 + 3164);
  result[3165] += *((_DWORD *)a2 + 3165);
  result[3166] += *((_DWORD *)a2 + 3166);
  result[3167] += *((_DWORD *)a2 + 3167);
  result[3168] += *((_DWORD *)a2 + 3168);
  result[3169] += *((_DWORD *)a2 + 3169);
  result[3170] += *((_DWORD *)a2 + 3170);
  result[3171] += *((_DWORD *)a2 + 3171);
  result[3172] += *((_DWORD *)a2 + 3172);
  result[3173] += *((_DWORD *)a2 + 3173);
  result[3174] += *((_DWORD *)a2 + 3174);
  result[3175] += *((_DWORD *)a2 + 3175);
  result[3180] += *((_DWORD *)a2 + 3180);
  result[3181] += *((_DWORD *)a2 + 3181);
  result[3182] += *((_DWORD *)a2 + 3182);
  result[3186] += *((_DWORD *)a2 + 3186);
  result[3187] += *((_DWORD *)a2 + 3187);
  result[3176] += *((_DWORD *)a2 + 3176);
  result[3177] += *((_DWORD *)a2 + 3177);
  result[3178] += *((_DWORD *)a2 + 3178);
  result[3179] += *((_DWORD *)a2 + 3179);
  result[3183] += *((_DWORD *)a2 + 3183);
  result[3184] += *((_DWORD *)a2 + 3184);
  result[3185] += *((_DWORD *)a2 + 3185);
  result[3188] += *((_DWORD *)a2 + 3188);
  result[3189] += *((_DWORD *)a2 + 3189);
  result[3190] += *((_DWORD *)a2 + 3190);
  result[3191] += *((_DWORD *)a2 + 3191);
  result[3192] += *((_DWORD *)a2 + 3192);
  result[3193] += *((_DWORD *)a2 + 3193);
  result[3194] += *((_DWORD *)a2 + 3194);
  result[3195] += *((_DWORD *)a2 + 3195);
  result[3196] += *((_DWORD *)a2 + 3196);
  result[3197] += *((_DWORD *)a2 + 3197);
  result[3198] += *((_DWORD *)a2 + 3198);
  result[3199] += *((_DWORD *)a2 + 3199);
  result[3200] += *((_DWORD *)a2 + 3200);
  result[3201] += *((_DWORD *)a2 + 3201);
  result[3202] += *((_DWORD *)a2 + 3202);
  result[3203] += *((_DWORD *)a2 + 3203);
  v83 = 1;
  do
  {
    v84 = 51 * v82;
    v85 = &result[51 * v82];
    v86 = &a2[v84];
    v85[3204] += *((_DWORD *)v86 + 3204);
    v85[3251] += *((_DWORD *)v86 + 3251);
    v85[3253] += *((_DWORD *)v86 + 3253);
    v85[3205] += *((_DWORD *)v86 + 3205);
    v85[3252] += *((_DWORD *)v86 + 3252);
    v85[3254] += *((_DWORD *)v86 + 3254);
    v85[3206] += *((_DWORD *)v86 + 3206);
    v85[3207] += *((_DWORD *)v86 + 3207);
    v85[3208] += *((_DWORD *)v86 + 3208);
    v85[3209] += *((_DWORD *)v86 + 3209);
    v85[3210] += *((_DWORD *)v86 + 3210);
    v85[3211] += *((_DWORD *)v86 + 3211);
    v85[3212] += *((_DWORD *)v86 + 3212);
    v85[3213] += *((_DWORD *)v86 + 3213);
    v85[3214] += *((_DWORD *)v86 + 3214);
    v85[3215] += *((_DWORD *)v86 + 3215);
    v85[3216] += *((_DWORD *)v86 + 3216);
    v85[3217] += *((_DWORD *)v86 + 3217);
    v85[3239] += *((_DWORD *)v86 + 3239);
    v85[3240] += *((_DWORD *)v86 + 3240);
    v85[3241] += *((_DWORD *)v86 + 3241);
    v85[3242] += *((_DWORD *)v86 + 3242);
    v85[3218] += *((_DWORD *)v86 + 3218);
    v85[3243] += *((_DWORD *)v86 + 3243);
    v85[3244] += *((_DWORD *)v86 + 3244);
    v85[3245] += *((_DWORD *)v86 + 3245);
    v85[3246] += *((_DWORD *)v86 + 3246);
    v85[3219] += *((_DWORD *)v86 + 3219);
    v85[3220] += *((_DWORD *)v86 + 3220);
    v85[3221] += *((_DWORD *)v86 + 3221);
    v85[3222] += *((_DWORD *)v86 + 3222);
    v85[3223] += *((_DWORD *)v86 + 3223);
    v85[3224] += *((_DWORD *)v86 + 3224);
    v85[3225] += *((_DWORD *)v86 + 3225);
    v85[3226] += *((_DWORD *)v86 + 3226);
    v85[3227] += *((_DWORD *)v86 + 3227);
    v85[3228] += *((_DWORD *)v86 + 3228);
    v85[3229] += *((_DWORD *)v86 + 3229);
    v85[3230] += *((_DWORD *)v86 + 3230);
    v85[3231] += *((_DWORD *)v86 + 3231);
    v85[3232] += *((_DWORD *)v86 + 3232);
    v85[3233] += *((_DWORD *)v86 + 3233);
    v85[3234] += *((_DWORD *)v86 + 3234);
    v85[3235] += *((_DWORD *)v86 + 3235);
    v85[3236] += *((_DWORD *)v86 + 3236);
    v85[3237] += *((_DWORD *)v86 + 3237);
    v85[3238] += *((_DWORD *)v86 + 3238);
    v85[3247] += *((_DWORD *)v86 + 3247);
    v85[3248] += *((_DWORD *)v86 + 3248);
    v85[3249] += *((_DWORD *)v86 + 3249);
    v87 = v83;
    v85[3250] += *((_DWORD *)v86 + 3250);
    v82 = 1;
    v83 = 0;
  }
  while ((v87 & 1) != 0);
  return result;
}

uint64_t loop_filter_row_worker(uint64_t a1, uint64_t a2)
{
  thread_loop_filter_rows(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), a2 + 16, *(_DWORD *)(a2 + 424), *(_DWORD *)(a2 + 428), *(_DWORD *)(a2 + 432), a1);
  return 1;
}

void vp9_tokenize_sb(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD v18[3];

  v7 = **(_QWORD **)(a2 + 25360);
  v8 = *(_QWORD *)(a2 + 25368);
  v9 = *(_QWORD *)(a2 + 25376);
  if (v9)
  {
    v10 = *(char *)(v9 + 3);
    v11 = (_QWORD *)(a2 + 114248);
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10 = 0;
  v11 = (_QWORD *)(a2 + 114248);
  if (v8)
LABEL_3:
    LODWORD(v8) = *(char *)(v8 + 3);
LABEL_4:
  v12 = v8 + v10;
  v18[0] = a1;
  v18[1] = a2;
  v18[2] = a3;
  if (*(_BYTE *)(v7 + 3))
  {
    if (!(a5 | a4))
      ++*(_DWORD *)(*v11 + 8 * v12 + 12780);
    v13 = &ss_size_lookup[4 * a6];
    v14 = v13[2 * *(int *)(a2 + 24920) + *(int *)(a2 + 24924)];
    bzero(*(void **)(a2 + 24976), num_4x4_blocks_wide_lookup[v14]);
    bzero(*(void **)(a2 + 24984), num_4x4_blocks_high_lookup[v14]);
    v15 = v13[2 * *(int *)(a2 + 25056) + *(int *)(a2 + 25060)];
    bzero(*(void **)(a2 + 25112), num_4x4_blocks_wide_lookup[v15]);
    bzero(*(void **)(a2 + 25120), num_4x4_blocks_high_lookup[v15]);
    v16 = v13[2 * *(int *)(a2 + 25192) + *(int *)(a2 + 25196)];
    bzero(*(void **)(a2 + 25248), num_4x4_blocks_wide_lookup[v16]);
    bzero(*(void **)(a2 + 25256), num_4x4_blocks_high_lookup[v16]);
  }
  else
  {
    if (a4)
    {
      v17 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))set_entropy_context_b;
    }
    else
    {
      ++*(_DWORD *)(*v11 + 8 * v12 + 12776);
      v17 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))tokenize_b;
    }
    vp9_foreach_transformed_block(a2 + 24912, a6, v17, (uint64_t)v18);
  }
}

void tokenize_b(int a1, int a2, int a3, int a4, int a5, unsigned int a6, uint64_t *a7)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __int16 *v36;
  uint64_t v37;
  __int16 *v38;
  __int16 v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  __int16 *v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned __int8 *v55;
  uint64_t *v58;
  uint64_t v59;
  _BYTE v61[1024];
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v9 = *a7;
  v8 = a7[1];
  v10 = **(unsigned __int8 ***)(v8 + 25360);
  v58 = (uint64_t *)a7[2];
  v11 = *v58;
  v12 = v8 + 8304 * a1;
  v13 = *(unsigned __int16 *)(*(_QWORD *)(v12 + 8208) + 2 * a2);
  v14 = *(_QWORD *)(v12 + 0x2000);
  v15 = (char)v10[8];
  v16 = v8 + 6912 * a6 + 3456 * (a1 > 0);
  v17 = *(_QWORD *)(v9 + 176600) + 432 * a6 + 216 * (a1 > 0);
  v18 = *(_QWORD *)(v8 + 114248) + 576 * a6 + 288 * (a1 > 0);
  if (a6)
    v19 = (unsigned __int8 *)&vp9_coefband_trans_8x8plus;
  else
    v19 = (unsigned __int8 *)&vp9_coefband_trans_4x4;
  v59 = v8 + 24912;
  v20 = v8 + 24912 + 136 * a1;
  v21 = *(_QWORD *)(v20 + 64);
  v22 = *(_QWORD *)(v20 + 72);
  switch(a6)
  {
    case 0u:
      v23 = *(unsigned __int8 *)(v21 + a4) != 0;
      v24 = *(_BYTE *)(v22 + a3) == 0;
      goto LABEL_10;
    case 1u:
      v23 = *(unsigned __int16 *)(v21 + a4) != 0;
      v24 = *(unsigned __int16 *)(v22 + a3) == 0;
      goto LABEL_10;
    case 2u:
      v23 = *(_DWORD *)(v21 + a4) != 0;
      v24 = *(_DWORD *)(v22 + a3) == 0;
      goto LABEL_10;
    case 3u:
      v23 = *(_QWORD *)(v21 + a4) != 0;
      v24 = *(_QWORD *)(v22 + a3) == 0;
LABEL_10:
      v25 = !v24;
      break;
    default:
      v23 = 0;
      v25 = 0;
      break;
  }
  v26 = a2;
  v27 = v16 + 1728 * (v15 > 0);
  v28 = v25 + v23;
  if (a1 > 0 || v15 > 0 || *(_DWORD *)(v8 + 25540))
  {
    v29 = (uint64_t *)(&vp9_default_scan_orders + 3 * a6);
  }
  else
  {
    v53 = v10 + 1;
    v54 = *v10;
    v55 = &v10[12 * (int)v26 + 20];
    if (v54 >= 3)
      v55 = v53;
    v29 = (uint64_t *)(&vp9_scan_orders + 12 * a6 + 3 * intra_mode_to_tx_type_lookup[*v55]);
  }
  v30 = v27 + 86544;
  v31 = v17 + 108 * (v15 > 0) + 174;
  v32 = v18 + 144 * (v15 > 0) + 10032;
  if (v13)
  {
    v33 = 0;
    v34 = v14 + (v26 << 6);
    v35 = *v29;
    v36 = (__int16 *)v29[2];
    v37 = *v29 + 2;
    do
    {
      v44 = *(_DWORD *)(v34 + 4 * *(__int16 *)(v35 + 2 * v33));
      v45 = v32 + 24 * v19[v33];
      ++*(_DWORD *)(v45 + 4 * v28);
      if (!v44)
      {
        v46 = 2 * v33 + 3;
        v47 = (__int16 *)(v37 + 2 * v33);
        v48 = &v19[v33];
        do
        {
          v49 = *v48++;
          *(_QWORD *)v11 = v31 + 18 * v49 + 3 * v28;
          *(_WORD *)(v11 + 8) = 0;
          ++*(_DWORD *)(v30 + 288 * v49 + 48 * v28);
          v61[*(v47 - 1)] = 0;
          v11 += 16;
          v28 = (v61[v36[v46 - 1]] + v61[v36[v46]] + 1) >> 1;
          v44 = *(_DWORD *)(v34 + 4 * *v47);
          ++v33;
          v46 += 2;
          ++v47;
        }
        while (!v44);
      }
      if ((v44 - 67) > 0xFFFFFF7A)
      {
        v38 = &vp9_dct_cat_lt_10_value_tokens[4 * v44];
        v39 = *v38;
        v40 = *((_DWORD *)v38 + 1);
      }
      else
      {
        v40 = -133 - 2 * v44;
        v39 = 10;
        if (v44 >= 67)
          v40 = 2 * v44 - 134;
      }
      v41 = v31 + 18 * v19[v33] + 3 * v28;
      v42 = v30 + 288 * v19[v33] + 48 * v28;
      *(_QWORD *)v11 = v41;
      *(_WORD *)(v11 + 8) = v39;
      *(_DWORD *)(v11 + 12) = v40;
      ++*(_DWORD *)(v42 + 4 * v39);
      v61[*(__int16 *)(v35 + 2 * v33)] = vp9_pt_energy_class[v39];
      v43 = v33 + 1;
      v11 += 16;
      v28 = (v61[v36[2 * v43]] + v61[v36[(int)((2 * v43) | 1)]] + 1) >> 1;
      ++v33;
    }
    while ((int)v43 < v13);
  }
  else
  {
    LODWORD(v43) = 0;
  }
  if ((int)v43 < 16 << (2 * a6))
  {
    v50 = v19[v43];
    v51 = v32 + 24 * v19[v43];
    ++*(_DWORD *)(v51 + 4 * v28);
    *(_QWORD *)v11 = v31 + 18 * v50 + 3 * v28;
    *(_WORD *)(v11 + 8) = 11;
    v11 += 16;
    v52 = v30 + 288 * v50 + 48 * v28;
    ++*(_DWORD *)(v52 + 44);
  }
  *v58 = v11;
  vp9_set_contexts(v59, v59 + 136 * a1, a5, a6, (int)v43 > 0, a4, a3);
}

void set_entropy_context_b(int a1, int a2, int a3, int a4, int a5, char a6, uint64_t a7)
{
  vp9_set_contexts(*(_QWORD *)(a7 + 8) + 24912, *(_QWORD *)(a7 + 8) + 24912 + 136 * a1, a5, a6, *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a7 + 8) + 8304 * a1 + 8208) + 2 * a2) != 0, a4, a3);
}

double vp9_init_tpl_buffer(uint64_t a1)
{
  _DWORD *v1;
  int *v2;
  uint64_t v3;
  signed int v4;
  signed int v5;
  size_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  void *v16;
  unint64_t v17;
  double result;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;

  v21 = (_QWORD *)(a1 + 193560);
  v22 = (_QWORD *)(a1 + 193896);
  v19 = (_QWORD *)(a1 + 192888);
  v20 = (_QWORD *)(a1 + 193224);
  v1 = (_DWORD *)(a1 + 190840);
  v2 = (int *)(a1 + 173008);
  v3 = a1 + 171696;
  v4 = (*(_DWORD *)(a1 + 173016) + 7) & 0xFFFFFFF8;
  v5 = (*(_DWORD *)(a1 + 173008) + 7) & 0xFFFFFFF8;
  if (v5 * v4 < 0)
  {
    v10 = 50;
    do
    {
      if (*(v1 - 3) < v4 || *(v1 - 2) < v5 || !*((_QWORD *)v1 - 3))
      {
        v12 = *((_QWORD *)v1 - 3);
        if (v12)
          free(*(void **)(v12 - 8));
        *((_QWORD *)v1 - 3) = 0;
        vpx_internal_error(v3, 2, "Failed to allocate cpi->tpl_stats[frame].tpl_stats_ptr", v19, v20, v21, v22);
        *((_BYTE *)v1 - 32) = 0;
        *(v1 - 4) = v4;
        *(v1 - 3) = v4;
        v11 = *v2;
        *(v1 - 2) = v5;
        *(v1 - 1) = v11;
        *v1 = v2[2];
      }
      v1 += 10;
      --v10;
    }
    while (v10);
  }
  else
  {
    v6 = 48 * v5 * v4;
    if ((v6 | 0x17) <= 0x10000000000)
    {
      v13 = 50;
      do
      {
        if (*(v1 - 3) < v4 || *(v1 - 2) < v5 || !*((_QWORD *)v1 - 3))
        {
          v15 = *((_QWORD *)v1 - 3);
          if (v15)
            free(*(void **)(v15 - 8));
          v16 = malloc_type_malloc(v6 | 0x17, 0x74AD08B5uLL);
          if (v16 && (v17 = ((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v17 - 8) = v16, v17))
          {
            bzero((void *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFFFF0), v6);
            *((_QWORD *)v1 - 3) = v17;
          }
          else
          {
            *((_QWORD *)v1 - 3) = 0;
            vpx_internal_error(v3, 2, "Failed to allocate cpi->tpl_stats[frame].tpl_stats_ptr", v19, v20, v21, v22);
          }
          *((_BYTE *)v1 - 32) = 0;
          *(v1 - 4) = v4;
          *(v1 - 3) = v4;
          v14 = *v2;
          *(v1 - 2) = v5;
          *(v1 - 1) = v14;
          *v1 = v2[2];
        }
        v1 += 10;
        --v13;
      }
      while (v13);
    }
    else
    {
      v7 = 50;
      do
      {
        if (*(v1 - 3) < v4 || *(v1 - 2) < v5 || !*((_QWORD *)v1 - 3))
        {
          v9 = *((_QWORD *)v1 - 3);
          if (v9)
            free(*(void **)(v9 - 8));
          *((_QWORD *)v1 - 3) = 0;
          vpx_internal_error(v3, 2, "Failed to allocate cpi->tpl_stats[frame].tpl_stats_ptr", v19, v20, v21, v22);
          *((_BYTE *)v1 - 32) = 0;
          *(v1 - 4) = v4;
          *(v1 - 3) = v4;
          v8 = *v2;
          *(v1 - 2) = v5;
          *(v1 - 1) = v8;
          *v1 = v2[2];
        }
        v1 += 10;
        --v7;
      }
      while (v7);
    }
  }
  *(_QWORD *)&result = 0x100000000;
  *v19 = 0x100000000;
  v19[21] = 0x100000000;
  *v20 = 0x100000000;
  v20[21] = 0x100000000;
  *v21 = 0x100000000;
  v21[21] = 0x100000000;
  *v22 = 0x100000000;
  v22[21] = 0x100000000;
  return result;
}

uint64_t vp9_estimate_tpl_qp_gop(uint64_t result, double a2, double a3, double a4, double a5)
{
  unint64_t v5;
  _BYTE *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t (*v18)(_QWORD, _QWORD, uint64_t *);
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int *__attribute__((__org_typedef(jmp_buf))) v23;
  uint64_t v24;
  uint64_t v25;

  v5 = result;
  v6 = (_BYTE *)(result + 742180);
  v7 = (int *)(result + 738452);
  v8 = result + 190156;
  v9 = (int *)(result + 171988);
  v10 = *(unsigned int *)(result + 747188);
  v25 = 0;
  v22 = *(unsigned __int8 *)(result + 742180);
  v21 = *(_DWORD *)(result + 176400);
  if ((int)v10 >= 1)
  {
    v11 = (_DWORD *)(result + 850616);
    v23 = (int *)(result + 171696);
    v12 = v10 + 1;
    v13 = (_DWORD *)(result + 743196);
    v14 = 190884;
    v15 = 1;
    while (1)
    {
      v16 = v13[441];
      *v6 = v15;
      *v7 = v16;
      if (*(_DWORD *)v8 == 2)
      {
        v17 = v7[82];
        if ((_DWORD)v17)
        {
          a3 = rate_thresh_mult[v17];
          a2 = a3 * (double)v16;
          v16 = (int)a2;
          *v7 = (int)a2;
        }
      }
      v7[2] = ((uint64_t)v16 << 12) / (v9[1] * (uint64_t)*v9);
      v7[34] = 0;
      v9[249] = 0;
      v7[176] = 0;
      switch(*v13)
      {
        case 0:
          *(_QWORD *)(v8 + 4400) = 0x100000001;
          goto LABEL_14;
        case 1:
          *(_QWORD *)(v8 + 4400) = 1;
          *(_DWORD *)(v8 + 4408) = 0;
          if (!*(_DWORD *)(v5 + 850804))
            goto LABEL_28;
          goto LABEL_21;
        case 2:
          *(_QWORD *)(v8 + 4400) = 0x100000001;
          *(_DWORD *)(v8 + 4408) = 0;
          if (!*(_DWORD *)(v5 + 850804))
            goto LABEL_28;
          goto LABEL_21;
        case 4:
          *(_QWORD *)(v8 + 4400) = 0x100000000;
          *(_DWORD *)(v8 + 4408) = 0;
          v7[34] = 1;
          if (!v7[174])
            goto LABEL_20;
          v7[176] = 1;
          *(_DWORD *)(v8 + 4404) = 0;
LABEL_19:
          v9[249] = 1;
          v9[1103] = 0;
LABEL_20:
          if (*(_DWORD *)(v5 + 850804))
          {
LABEL_21:
            if (*v11)
            {
              if ((*(_BYTE *)(v5 + 850632) & 1) != 0)
              {
                v18 = *(uint64_t (**)(_QWORD, _QWORD, uint64_t *))(v5 + 850664);
                if (v18)
                {
                  v24 = 0;
                  result = v18(*(_QWORD *)(v5 + 850624), v15 - 1, &v24);
                  if ((_DWORD)result == 1)
                    result = vpx_internal_error((uint64_t)v23, 1, "vp9_extrc_get_encodeframe_decision() failed");
                  v19 = v24;
                  goto LABEL_31;
                }
              }
            }
            result = vpx_internal_error((uint64_t)v23, 8, "The external rate control library is not set properly for TPL pass.");
            ++v15;
            ++v13;
            v14 += 40;
            if (v12 == v15)
              goto LABEL_32;
          }
          else
          {
LABEL_28:
            result = vp9_rc_pick_q_and_bounds_two_pass(v5, (_DWORD *)&v25 + 1, &v25, v15, a2, a3, a4, a5);
            if ((int)result <= 1)
              v19 = 1;
            else
              v19 = result;
LABEL_31:
            *(_DWORD *)(v5 + v14) = v19;
            ++v15;
            ++v13;
            v14 += 40;
            if (v12 == v15)
              goto LABEL_32;
          }
          break;
        case 5:
          *(_QWORD *)(v8 + 4400) = 1;
          *(_DWORD *)(v8 + 4408) = 0;
          v7[34] = 1;
          if (!*(_DWORD *)(v5 + 850804))
            goto LABEL_28;
          goto LABEL_21;
        case 6:
          a2 = 0.0;
          *(_QWORD *)(v8 + 4400) = 0;
          *(_DWORD *)(v8 + 4408) = 0;
          v7[34] = 1;
          goto LABEL_19;
        default:
          a2 = 0.0;
          *(_QWORD *)(v8 + 4400) = 0;
LABEL_14:
          *(_DWORD *)(v8 + 4408) = 1;
          if (!*(_DWORD *)(v5 + 850804))
            goto LABEL_28;
          goto LABEL_21;
      }
    }
  }
LABEL_32:
  *v6 = v22;
  v9[1103] = v21;
  v7[34] = 0;
  v9[249] = 0;
  v7[176] = 0;
  switch(*(_DWORD *)(v5 + 4 * v22 + 743192))
  {
    case 0:
      *(_QWORD *)(v8 + 4400) = 0x100000001;
      goto LABEL_38;
    case 1:
      v20 = 1;
      goto LABEL_36;
    case 2:
      v20 = 0x100000001;
LABEL_36:
      *(_QWORD *)(v8 + 4400) = v20;
      *(_DWORD *)(v8 + 4408) = 0;
      return result;
    case 4:
      *(_QWORD *)(v8 + 4400) = 0x100000000;
      *(_DWORD *)(v8 + 4408) = 0;
      v7[34] = 1;
      if (!v7[174])
        return result;
      v7[176] = 1;
      *(_DWORD *)(v8 + 4404) = 0;
LABEL_43:
      v9[249] = 1;
      v9[1103] = 0;
      return result;
    case 5:
      *(_QWORD *)(v8 + 4400) = 1;
      *(_DWORD *)(v8 + 4408) = 0;
      v7[34] = 1;
      return result;
    case 6:
      *(_QWORD *)(v8 + 4400) = 0;
      *(_DWORD *)(v8 + 4408) = 0;
      v7[34] = 1;
      goto LABEL_43;
    default:
      *(_QWORD *)(v8 + 4400) = 0;
LABEL_38:
      *(_DWORD *)(v8 + 4408) = 1;
      return result;
  }
}

void vp9_setup_tpl_stats(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  BOOL v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  char *v55;
  __int128 v56;
  int v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _DWORD *v78;
  int *__attribute__((__org_typedef(jmp_buf))) v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  void *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  size_t v88;
  void *v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  size_t v96;
  void *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int (*v103)(_QWORD, uint64_t);
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  char *__src;
  _DWORD *v110;
  uint64_t v111;
  uint64_t v113;
  int *__attribute__((__org_typedef(jmp_buf))) v114;
  _QWORD v115[2];
  int v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  _QWORD __dst[5];

  v1 = 0;
  v2 = 0;
  v3 = 0;
  __dst[3] = *MEMORY[0x24BDAC8D0];
  v108 = a1 + 850616;
  v113 = a1 + 192808;
  v4 = a1 + 189936;
  v5 = (int *)(a1 + 171988);
  *(_BYTE *)(a1 + 190800) = 9;
  v104 = *(_DWORD *)(a1 + 190924);
  v6 = *(_QWORD *)(a1 + 189944);
  v124 = -1;
  v114 = (int *)(a1 + 171696);
  __src = (char *)(v6 + 24);
  v110 = (_DWORD *)(a1 + 743192);
  v123 = -1;
  memset(__dst, 255, 24);
  v111 = a1 + 189936;
  do
  {
    if (*(_DWORD *)(v6 + v1 + 24))
      goto LABEL_4;
    v7 = *(_QWORD *)(v4 + 8);
    v8 = v7 + v1;
    v9 = *(_QWORD *)(v7 + v1 + 32);
    if (v9)
    {
      if (*(_DWORD *)(v8 + 40) >= v5[255] && *(_DWORD *)(v7 + v1 + 44) >= v5[257])
        goto LABEL_16;
      free(*(void **)(v9 - 8));
    }
    v10 = v5[257] * v5[255];
    if ((v10 & 0x80000000) == 0
      && (v11 = 12 * v10, (v12 = malloc_type_malloc(v11 + 23, 0x74AD08B5uLL)) != 0)
      && (v13 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v13 - 8) = v12, v13))
    {
      bzero((void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0), v11);
      *(_QWORD *)(v8 + 32) = v13;
    }
    else
    {
      *(_QWORD *)(v8 + 32) = 0;
      vpx_internal_error((uint64_t)v114, 2, "Failed to allocate new_fb_ptr->mvs");
    }
    v14 = v7 + v1;
    *(_DWORD *)(v14 + 40) = v5[255];
    *(_DWORD *)(v14 + 44) = v5[257];
    v4 = v111;
LABEL_16:
    if (vpx_realloc_frame_buffer(v6 + v1 + 88, *v5, v5[1], v5[6], v5[7], v5[8], 160, *(_DWORD *)v4, 0, 0, 0))vpx_internal_error((uint64_t)v114, 2, "Failed to allocate frame buffer");
    *((_BYTE *)&v123 + v3) = v2;
    if (v3 >= *(_DWORD *)(v4 + 368) + 2)
      break;
    ++v3;
LABEL_4:
    ++v2;
    v1 += 224;
  }
  while (v2 != 12);
  v15 = v110;
  v16 = &__src[224 * SBYTE2(v123)];
  v17 = &__src[224 * SBYTE3(v123)];
  v18 = (uint64_t)&__src[224 * SBYTE1(v123) + 64];
  *(_QWORD *)(v113 + 16) = &__src[224 * (char)v123 + 64];
  *(_QWORD *)(v113 + 24) = v18;
  *(_QWORD *)(v113 + 32) = v16 + 64;
  *(_QWORD *)(v113 + 40) = v17 + 64;
  v19 = *(int *)(v113 + 1708);
  if ((_DWORD)v19 == -1 || (v20 = *(_DWORD *)(a1 + 4 * v19 + 172048), v20 == -1))
    v21 = 0;
  else
    v21 = *(_QWORD *)(v4 + 8) + 224 * v20 + 88;
  v22 = 0;
  v23 = 0;
  v115[0] = v21;
  v115[1] = -1;
  v24 = *v110;
  v25 = v110[1];
  v116 = -1;
  v117 = v24;
  v118 = *(_QWORD *)(v4 + 504);
  v119 = 0xFFFFFFFF00000000;
  v26 = &v122;
  v27 = v4;
  v28 = (_DWORD *)(v4 + 1028);
  v29 = 1;
  v30 = 3;
  v31 = 2;
  v120 = -1;
  v121 = v25;
  v32 = -1;
  v33 = *(int **)(v27 + 488);
  while (1)
  {
    v34 = *(unsigned __int8 *)(a1 + v31 + 744704);
    if (*(_BYTE *)(a1 + v31 + 744704))
    {
      if (v33[1] < v34)
        break;
      v35 = v34 - 1 + v33[2];
      v36 = *v33;
      if (v35 < *v33)
        v36 = 0;
      v37 = v35 - v36;
    }
    else
    {
      v38 = v33[2];
      v37 = v38 - 1;
      if (v38 <= 0)
        v37 += *v33;
    }
    v39 = *((_QWORD *)v33 + 3);
    if (!v39)
      break;
    v40 = v39 + 192 * v37;
    v41 = &v115[3 * v31];
    *v41 = v40;
    *((_DWORD *)v41 + 2) = v23;
    *((_DWORD *)v41 + 3) = v32;
    LODWORD(v40) = *(_DWORD *)(a1 + 4 * v31 + 743192);
    *((_DWORD *)v41 + 4) = v29;
    *((_DWORD *)v41 + 5) = v40;
    v42 = v29;
    switch((int)v40)
    {
      case 1:
        v42 = v29;
        v32 = v31;
        v43 = v31 + 1;
        if (v31 == v15[999])
          goto LABEL_67;
        goto LABEL_48;
      case 2:
      case 5:
        goto LABEL_47;
      case 3:
        v44 = v22 - 1;
        if ((int)v22 < 1)
          goto LABEL_38;
        if (v22 < 0x30)
        {
          v45 = v22;
          goto LABEL_37;
        }
        v50 = v22 - 1;
        v51 = (char *)__dst + 4 * v44;
        if (&v51[-4 * v50] > v51)
        {
          v45 = v22;
          goto LABEL_37;
        }
        if ((char *)__dst + 4 * v22 + -4 * v50 > (char *)__dst + 4 * v22)
        {
          v45 = v22;
          goto LABEL_37;
        }
        if (v44 < v50)
        {
          v45 = v22;
          goto LABEL_37;
        }
        if (HIDWORD(v50))
        {
          v45 = v22;
          do
          {
LABEL_37:
            v46 = v45 > 1;
            *((_DWORD *)__dst + v45) = *((_DWORD *)__dst + (v45 - 1));
            --v45;
          }
          while (v46);
          goto LABEL_38;
        }
        if ((unint64_t)(v51 - ((char *)__dst + 4 * v22)) < 0x20)
        {
          v45 = v22;
          goto LABEL_37;
        }
        v45 = v22 & 7;
        v52 = v22 + 0xFFFFFFFFLL;
        v53 = (_OWORD *)((char *)&v123 + 4 * v22 + 4);
        v54 = v22 & 0xFFFFFFF8;
        do
        {
          v55 = (char *)__dst + 4 * v52;
          v56 = *(_OWORD *)(v55 - 12);
          *(v53 - 1) = *(_OWORD *)(v55 - 28);
          *v53 = v56;
          v52 -= 8;
          v53 -= 2;
          v54 -= 8;
        }
        while (v54);
        if ((v22 & 0xFFFFFFF8) != (unint64_t)v22)
          goto LABEL_37;
LABEL_38:
        LODWORD(__dst[0]) = v29;
        ++v22;
        v42 = v31;
        v43 = v31 + 1;
        if (v31 == v15[999])
          goto LABEL_67;
LABEL_48:
        ++v30;
        v26 += 3;
        v28 += 10;
        v31 = v43;
        v29 = v42;
        if (v43 == 50)
          goto LABEL_79;
        break;
      case 4:
        v42 = LODWORD(__dst[0]);
        v47 = v22 - 1;
        if ((int)v22 >= 2)
        {
          v48 = v34;
          v106 = v32;
          memmove(__dst, (char *)__dst + 4, 4 * (v22 - 1));
          v32 = v106;
          v34 = v48;
          v15 = v110;
        }
        v23 = v31;
        v22 = v47;
        v43 = v31 + 1;
        if (v31 == v15[999])
          goto LABEL_67;
        goto LABEL_48;
      case 6:
        v42 = LODWORD(__dst[0]);
        v49 = v22 - 1;
        if ((int)v22 >= 2)
        {
          v105 = v34;
          v107 = v23;
          memmove(__dst, (char *)__dst + 4, 4 * (v22 - 1));
          v34 = v105;
          v23 = v107;
          v15 = v110;
        }
        v32 = v29;
        v22 = v49;
LABEL_47:
        v43 = v31 + 1;
        if (v31 != v15[999])
          goto LABEL_48;
        goto LABEL_67;
      default:
        v42 = v29;
        v43 = v31 + 1;
        if (v31 == v15[999])
          goto LABEL_67;
        goto LABEL_48;
    }
  }
  LODWORD(v43) = v31;
LABEL_67:
  if (v31 > 0x17)
  {
LABEL_79:
    v57 = 0;
  }
  else
  {
    v57 = 0;
    if ((_DWORD)v31 == 23)
      v58 = 1;
    else
      v58 = 2;
    v59 = v33[1];
    v60 = v43;
    while (1)
    {
      if (v59 <= v34 + v57)
      {
        LODWORD(v43) = v60;
        goto LABEL_80;
      }
      v61 = *((_QWORD *)v33 + 3);
      if (!v61)
        break;
      v62 = v30;
      v63 = v33[2];
      if (v34 + v57 + v63 >= *v33)
        v64 = *v33;
      else
        v64 = 0;
      *v28 = v104;
      v28 += 10;
      *(v26 - 2) = v61 + 192 * (v34 + v57 + v63 - v64);
      ++v60;
      ++v57;
      *((_DWORD *)v26 - 2) = v23;
      *((_DWORD *)v26 - 1) = v32;
      *v26 = 0x1FFFFFFFFLL;
      v26 += 3;
      ++v30;
      v32 = v62;
      if (v58 == v57)
      {
        LODWORD(v43) = v43 + v58;
        v57 = v58;
        goto LABEL_80;
      }
    }
    LODWORD(v43) = v43 + v57;
  }
LABEL_80:
  v65 = 0;
  v66 = a1 + 190828;
  do
  {
    bzero(*(void **)(v66 + v65 - 12), 48 * *(int *)(v66 + v65) * (uint64_t)*(int *)(v66 + v65 + 4));
    *(_BYTE *)(v66 + v65 - 20) = 0;
    v65 += 40;
  }
  while (v65 != 2000);
  v67 = *(_QWORD *)v5;
  v68 = v113;
  v69 = *(_DWORD *)v113;
  if (*(int *)v113 >= 1)
  {
    v70 = 0;
    v71 = 16;
    do
    {
      v72 = *(_QWORD *)(*(_QWORD *)(v113 + 8) + v71);
      if (v72)
      {
        free(*(void **)(v72 - 8));
        v69 = *(_DWORD *)v113;
      }
      ++v70;
      v71 += 24;
    }
    while (v70 < v69);
  }
  v73 = *(_QWORD *)(v113 + 8);
  if (v73)
    free(*(void **)(v73 - 8));
  if ((v43 & 0x80000000) == 0
    && (v74 = malloc_type_malloc(24 * v43 + 23, 0x74AD08B5uLL)) != 0
    && (v75 = ((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v75 - 8) = v74, v75))
  {
    bzero((void *)(((unint64_t)v74 + 23) & 0xFFFFFFFFFFFFFFF0), 24 * v43);
    *(_QWORD *)(v113 + 8) = v75;
    *(_DWORD *)v113 = v43;
    if ((int)v43 < 1)
      goto LABEL_107;
LABEL_95:
    v76 = 0;
    v77 = v43;
    v78 = (_DWORD *)(v111 + 896);
    do
    {
      v82 = *(v78 - 1) * *v78;
      if ((v82 & 0x80000000) == 0
        && (v83 = malloc_type_malloc(72 * v82 + 23, 0x74AD08B5uLL)) != 0
        && (v84 = ((unint64_t)v83 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v84 - 8) = v83, v84))
      {
        bzero((void *)(((unint64_t)v83 + 23) & 0xFFFFFFFFFFFFFFF0), 72 * v82);
        v80 = *(_QWORD *)(v113 + 8);
        *(_QWORD *)(v80 + v76 + 16) = v84;
      }
      else
      {
        v79 = v114;
        *(_QWORD *)(*(_QWORD *)(v113 + 8) + v76 + 16) = 0;
        vpx_internal_error((uint64_t)v79, 2, "Failed to allocate tpl_gop_stats->frame_stats_list[frame_idx].block_stats_list");
        v80 = *(_QWORD *)(v113 + 8);
      }
      v78 += 10;
      v81 = v80 + v76;
      *(_DWORD *)(v81 + 8) = v82;
      *(_QWORD *)v81 = v67;
      v76 += 24;
    }
    while (24 * v43 != v76);
    v68 = v113;
    if ((int)v43 >= 2)
    {
      v85 = 24 * v43 - 4;
      do
      {
        if (*(_DWORD *)((char *)v115 + v85) != 6)
          mc_flow_dispenser(a1, (uint64_t)v115);
        --v77;
        v85 -= 24;
      }
      while ((unint64_t)(v77 + 1) > 2);
    }
  }
  else
  {
    *(_QWORD *)(v113 + 8) = 0;
    vpx_internal_error((uint64_t)v114, 2, "Failed to allocate tpl_gop_stats->frame_stats_list");
    *(_DWORD *)v113 = v43;
    if ((int)v43 >= 1)
      goto LABEL_95;
  }
LABEL_107:
  if (*(_DWORD *)v108 && *(_QWORD *)(v108 + 40))
  {
    if (v117)
    {
      v86 = *(_DWORD *)v68;
      v87 = *(_DWORD *)v68 - v57;
      if (*(_DWORD *)v68 > v57)
        goto LABEL_111;
LABEL_114:
      vpx_internal_error((uint64_t)v114, 1, "The number of frames in VpxTplGopStats is fewer than expected.");
      if (v86 != v57)
        goto LABEL_115;
LABEL_116:
      v88 = 24 * v87 + 23;
      if (v88 <= 0x10000000000)
      {
        v89 = malloc_type_malloc(v88, 0x74AD08B5uLL);
        if (v89)
        {
          v90 = ((unint64_t)v89 + 23) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v90 - 8) = v89;
          if (v90)
          {
            bzero((void *)(((unint64_t)v89 + 23) & 0xFFFFFFFFFFFFFFF0), 24 * v87);
            goto LABEL_121;
          }
        }
      }
    }
    else
    {
      mc_flow_dispenser(a1, (uint64_t)v115);
      v86 = *(_DWORD *)v68;
      v87 = *(_DWORD *)v68 - v57;
      if (*(_DWORD *)v68 <= v57)
        goto LABEL_114;
LABEL_111:
      if (v86 == v57)
        goto LABEL_116;
LABEL_115:
      if ((v87 & 0x80000000) == 0)
        goto LABEL_116;
    }
    vpx_internal_error((uint64_t)v114, 2, "Failed to allocate new_frame_stats");
    v90 = 0;
LABEL_121:
    if (v87 >= 1)
    {
      v91 = 0;
      do
      {
        v93 = *(_QWORD *)(v68 + 8);
        v94 = *(int *)(v93 + v91 + 8);
        v95 = v90 + v91;
        *(_QWORD *)v95 = *(_QWORD *)(v93 + v91);
        *(_DWORD *)(v95 + 8) = v94;
        v96 = 72 * v94;
        if ((v94 & 0x80000000) == 0
          && v96 + 23 <= 0x10000000000
          && (v97 = malloc_type_malloc(v96 + 23, 0x74AD08B5uLL)) != 0
          && (v92 = (_QWORD *)(((unint64_t)v97 + 23) & 0xFFFFFFFFFFFFFFF0), *(v92 - 1) = v97, v92))
        {
          bzero((void *)(((unint64_t)v97 + 23) & 0xFFFFFFFFFFFFFFF0), v96);
          *(_QWORD *)(v90 + v91 + 16) = v92;
        }
        else
        {
          *(_QWORD *)(v95 + 16) = 0;
          vpx_internal_error((uint64_t)v114, 2, "Failed to allocate new_frame_stats[i].block_stats_list");
          v92 = *(_QWORD **)(v95 + 16);
        }
        memcpy(v92, *(const void **)(v93 + v91 + 16), v96);
        v91 += 24;
        v68 = v113;
      }
      while (24 * v87 != v91);
    }
    v98 = *(_DWORD *)v68;
    if (*(int *)v68 >= 1)
    {
      v99 = 0;
      v100 = 16;
      do
      {
        v101 = *(_QWORD *)(*(_QWORD *)(v68 + 8) + v100);
        if (v101)
        {
          free(*(void **)(v101 - 8));
          v98 = *(_DWORD *)v68;
        }
        ++v99;
        v100 += 24;
      }
      while (v99 < v98);
    }
    v102 = *(_QWORD *)(v68 + 8);
    if (v102)
      free(*(void **)(v102 - 8));
    *(_DWORD *)v68 = v87;
    *(_QWORD *)(v68 + 8) = v90;
    if (*(_DWORD *)v108)
    {
      v103 = *(unsigned int (**)(_QWORD, uint64_t))(v108 + 40);
      if (v103)
      {
        if (v103(*(_QWORD *)(v108 + 8), v68) == 1)
          vpx_internal_error((uint64_t)v114, 1, "vp9_extrc_send_tpl_stats() failed");
      }
    }
  }
}

uint64_t *mc_flow_dispenser(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  unsigned int v24;
  _DWORD *v25;
  uint64_t *result;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unsigned __int8 v37;
  int v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int16x8_t *v52;
  uint64_t v53;
  unsigned int v54;
  unint64_t v55;
  uint64_t v56;
  int16x8_t v57;
  int16x8_t *v58;
  int16x8_t *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t j;
  int16x8_t *v64;
  unsigned int v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t *v78;
  int32x4_t v79;
  int32x4_t v80;
  int v81;
  int v82;
  int16x8_t *v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  unint64_t i;
  uint64_t k;
  int32x4_t *v89;
  int32x4_t v90;
  int32x4_t v91;
  int32x4_t v92;
  int32x4_t v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x8_t *v98;
  int64x2_t v99;
  int64x2_t v100;
  int v101;
  int32x4_t v102;
  int32x4_t v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  int v114;
  __int16 *v115;
  __int16 *v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int16x8_t *v128;
  unsigned int v129;
  unint64_t v130;
  uint64_t v131;
  int16x8_t v132;
  int16x8_t *v133;
  uint64_t v134;
  int16x8_t *v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t n;
  int16x8_t *v139;
  unsigned int v140;
  int16x8_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t *v153;
  int32x4_t v154;
  int32x4_t v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  int16x8_t *v159;
  unsigned int v160;
  uint64_t v161;
  unint64_t m;
  uint64_t ii;
  int32x4_t *v164;
  int32x4_t v165;
  int32x4_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int16x8_t *v173;
  int64x2_t v174;
  int64x2_t v175;
  int v176;
  int32x4_t v177;
  int32x4_t v178;
  uint64_t v179;
  int16x4_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int32x2_t v188;
  __int16 *v189;
  uint64_t v190;
  int32x2_t v191;
  uint64_t v192;
  __int16 *v193;
  uint64_t v194;
  int v195;
  BOOL v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int64x2_t v201;
  int8x16_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  __int128 *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  __int128 v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int8x16_t *v218;
  __int16 *v219;
  int8x16_t v220;
  int8x16_t v221;
  int8x16_t v222;
  uint64_t v223;
  int8x16_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  int v230;
  int v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  unsigned int v236;
  unsigned int v237;
  signed int v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int v241;
  _DWORD *v242;
  _DWORD *v243;
  int *v244;
  int v245;
  int v246;
  unsigned int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  int v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int v277;
  int64x2_t v278;
  int v279;
  _QWORD *v280;
  unint64_t v281;
  _DWORD *v282;
  _BYTE *v283;
  int v284;
  int *v285;
  uint64_t *v286;
  int v287;
  int v288;
  uint64_t v289;
  int16x8_t *v290;
  int16x8_t *v291;
  char v292;
  _UNKNOWN **v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  int16x8_t *v297;
  uint64_t v298;
  int v299;
  int v300;
  int v301;
  _DWORD *v302;
  unsigned int *v303;
  uint64_t v304;
  int v305;
  uint64_t v306;
  char v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int v311;
  uint64_t v312;
  int *v313;
  uint64_t v314;
  unsigned int v315;
  unsigned int v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  _OWORD v327[10];
  int v328;
  _BYTE v329[64];
  int v330;
  _BYTE v331[64];
  int v332;
  uint64_t v333;
  __int128 v334;
  uint64_t v335;
  int32x4_t v336[256];
  int32x4_t v337[256];
  int16x8_t v338[64];
  int32x4_t v339[64];
  int32x4_t v340[64];
  int32x4_t v341[64];
  int16x8_t v342[2];
  int16x8_t v343[126];
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  unsigned __int16 v349[10];
  uint64_t v350;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v350 = *MEMORY[0x24BDAC8D0];
  v282 = (_DWORD *)(v2 + 189856);
  v5 = *(_QWORD *)(v2 + 192816);
  v277 = v6;
  v7 = 24 * v6;
  v8 = v3 + v7;
  v9 = *(_QWORD *)(v3 + v7);
  v346 = 0;
  v347 = 0;
  v348 = 0;
  v10 = (unsigned int *)(v2 + 171988);
  v298 = v2;
  v11 = v2 + 74144;
  memset(v327, 0, sizeof(v327));
  v316 = v12;
  v324 = max_txsize_lookup[v12];
  v13 = num_8x8_blocks_high_lookup[v12];
  v275 = v12;
  v309 = num_8x8_blocks_wide_lookup[v12];
  *(_QWORD *)(v5 + v7) = *(_QWORD *)(v2 + 171988);
  vp9_setup_scale_factors_for_frame((uint64_t)v327, *(_DWORD *)(v9 + 8), *(_DWORD *)(v9 + 12), *(_DWORD *)(v9 + 8), *(_DWORD *)(v9 + 12), *(_DWORD *)(v2 + 172020));
  v14 = *(_DWORD *)(v8 + 8);
  if (v14 != -1)
    v346 = *(_QWORD *)(v4 + 24 * v14);
  v15 = *(_QWORD *)(v11 + 496);
  v16 = *(_DWORD *)(v4 + 24 * v277 + 12);
  if (v16 != -1)
    v347 = *(_QWORD *)(v4 + 24 * v16);
  v304 = v298 + 49200;
  v17 = *(_DWORD *)(v15 + 152);
  v18 = (uint64_t *)((unint64_t)&v345 >> 1);
  v19 = *(_DWORD *)(v4 + 24 * v277 + 16);
  if (v19 != -1)
    v348 = *(_QWORD *)(v4 + 24 * v19);
  v20 = v298 + 190808 + 40 * v277;
  if ((v17 & 8) == 0)
    v18 = &v344;
  v314 = (uint64_t)v18;
  v21 = *(_QWORD **)(v298 + 173176);
  *(_QWORD *)(v11 + 416) = v21;
  *v21 = *(_QWORD *)(v298 + 173120);
  *(_QWORD *)(v11 + 496) = v9;
  v22 = vp9_compute_rd_mult_based_on_qindex(v298, *(_DWORD *)(v20 + 36));
  v23 = v22 >> 6;
  if (v22 < 0x40)
    ++v23;
  *(_DWORD *)(v11 + 676) = v23;
  v274 = v298 + 190808 + 40 * v277;
  v24 = *(_DWORD *)(v20 + 36);
  if (*v282 == 10)
  {
    *(_DWORD *)(v11 + 680) = sad_per_bit16lut_10[v24];
    v25 = &sad_per_bit4lut_10;
  }
  else if (*v282 == 8)
  {
    *(_DWORD *)(v11 + 680) = sad_per_bit16lut_8[v24];
    v25 = &sad_per_bit4lut_8;
  }
  else
  {
    *(_DWORD *)(v11 + 680) = sad_per_bit16lut_12[v24];
    v25 = &sad_per_bit4lut_12;
  }
  *(_DWORD *)(v11 + 684) = v25[v24];
  *(_BYTE *)v20 = 1;
  v10[260] = v24;
  result = (uint64_t *)vp9_init_plane_quantizers(v298, v304);
  v27 = v10[255];
  if (v27 < 1)
    return result;
  v28 = v10[257];
  if (v28 < 1)
    return result;
  v312 = 0;
  v313 = (int *)(v298 + 739532);
  v302 = (_DWORD *)(v298 + 75048);
  v292 = 2 * ((unint64_t)(v275 - 9) > 3);
  v293 = &vp9_default_scan_orders + 3 * v324;
  v281 = v309 * (unint64_t)v13;
  v29 = v298 + 40 * v277;
  v285 = (int *)(v29 + 190824);
  v286 = (uint64_t *)(v29 + 190816);
  v280 = (_QWORD *)(v5 + 24 * v277 + 16);
  v279 = 8 * v309;
  v278 = vdupq_n_s64(1uLL);
  v276 = v4;
  v303 = v10;
  v325 = v11;
  v308 = v13;
  while (2)
  {
    if (v28 < 1)
      goto LABEL_20;
    v311 = 0;
    v30 = 0;
    v307 = b_width_log2_lookup[v275];
    v31 = (4 << v307);
    v317 = (4 << b_height_log2_lookup[v275]) * v31;
    v287 = ~(_DWORD)v312;
    v288 = 8 * v312;
    v32 = v331;
    if (!v312)
      v32 = 0;
    v283 = v32;
    v33 = *(_QWORD *)(v274 + 8);
    v34 = 2 * (int)v31;
    v35 = *(_DWORD *)(v274 + 16);
    v297 = &v342[v34];
    v291 = &v342[v34 + 2];
    v290 = &v343[v34];
    v299 = (_DWORD)v312 << 7;
    v36 = 2 * (int)v31;
    v310 = 8;
    v315 = 4 << b_height_log2_lookup[v275];
    while (2)
    {
      v37 = 0;
      v326 = 0;
      v305 = 8 * v30;
      v38 = 8 * v30 + *(_DWORD *)(*(_QWORD *)(v325 + 496) + 16) * v288;
      v332 = 0;
      memset(v331, 0, sizeof(v331));
      v330 = 0;
      memset(v329, 0, sizeof(v329));
      v284 = v35 * v312;
      *(_DWORD *)(v325 + 464) = -64 * v312;
      *(_DWORD *)(v325 + 468) = (v10[255] + v287) << 6;
      *(_DWORD *)(v325 + 456) = -64 * v30;
      v300 = ~(_DWORD)v30;
      *(_DWORD *)(v325 + 460) = (v28 + ~(_DWORD)v30) << 6;
      v289 = v30;
      v39 = v329;
      if (!v30)
        v39 = 0;
      *(_QWORD *)(v325 + 424) = v39;
      *(_QWORD *)(v325 + 432) = v283;
      v40 = v38;
      v320 = v33;
      v322 = 0x7FFFFFFFFFFFFFFFLL;
      v41 = v324;
      v42 = v298 + 190808;
      v318 = v38;
      do
      {
        v45 = *(_QWORD *)(v325 + 496);
        v46 = *(_QWORD *)(v45 + 56) + v40;
        v47 = *(_DWORD *)(v45 + 16);
        v48 = **(_BYTE ***)(v325 + 416);
        *v48 = v316;
        v48[8] = 0;
        v49 = v41;
        vp9_predict_intra_block(v298 + 74112, v307, v41, v37, v46, v47, v314, v31, 0, 0, 0);
        if ((*(_BYTE *)(*(_QWORD *)(v325 + 496) + 152) & 8) != 0)
        {
          v51 = 2 * v46;
          if ((int)v31 < 16)
          {
            v50 = v320;
            v43 = v322;
            v40 = v318;
            if ((int)v31 < 8)
            {
              if ((int)v31 >= 4)
              {
                v83 = v342;
                v84 = 2 * v314;
                v85 = v315;
                do
                {
                  v86 = 0;
                  for (i = 0; i < v31; i += 4)
                  {
                    *(int16x4_t *)&v83->i8[v86] = vsub_s16(*(int16x4_t *)(v51 + v86), *(int16x4_t *)(v84 + v86));
                    v86 += 8;
                  }
                  v83 = (int16x8_t *)((char *)v83 + v36);
                  v84 += v36;
                  v51 += 2 * v47;
                  --v85;
                }
                while (v85);
              }
            }
            else
            {
              v59 = v342;
              v60 = 2 * v314;
              v61 = v315;
              do
              {
                v62 = 0;
                for (j = 0; j < v31; j += 8)
                {
                  v59[v62] = vsubq_s16(*(int16x8_t *)(v51 + v62 * 16), *(int16x8_t *)(v60 + v62 * 16));
                  ++v62;
                }
                v59 = (int16x8_t *)((char *)v59 + v36);
                v60 += v36;
                v51 += 2 * v47;
                --v61;
              }
              while (v61);
            }
          }
          else
          {
            v52 = v342;
            v53 = 2 * v314;
            v54 = v315;
            v50 = v320;
            v43 = v322;
            v40 = v318;
            do
            {
              v55 = 0;
              v56 = 16;
              do
              {
                v57 = vsubq_s16(*(int16x8_t *)(v51 + v56), *(int16x8_t *)(v53 + v56));
                v58 = &v52[(unint64_t)v56 / 0x10];
                v58[-1] = vsubq_s16(*(int16x8_t *)(v51 + v56 - 16), *(int16x8_t *)(v53 + v56 - 16));
                *v58 = v57;
                v55 += 16;
                v56 += 32;
              }
              while (v55 < v31);
              v51 += 2 * v47;
              v53 += v36;
              v52 = (int16x8_t *)((char *)v52 + v36);
              --v54;
            }
            while (v54);
          }
          v41 = v324;
          switch((_DWORD)v324)
          {
            case 3:
              vpx_highbd_hadamard_16x16_neon(v342, (int)v31, (int32x4_t *)v338);
              vpx_highbd_hadamard_16x16_neon(v343, (int)v31, v339);
              vpx_highbd_hadamard_16x16_neon(v297, (int)v31, v340);
              vpx_highbd_hadamard_16x16_neon(v291, (int)v31, v341);
              v41 = v324;
              for (k = 0; k != 64; ++k)
              {
                v89 = (int32x4_t *)&v338[k];
                v90 = (int32x4_t)v338[k];
                v91 = (int32x4_t)v338[k + 64];
                v92 = v340[k];
                v93 = v341[k];
                v94 = vaddq_s32(v91, v90);
                v95 = vsubq_s32(v90, v91);
                v96 = vshrq_n_s32(vaddq_s32(v93, v92), 2uLL);
                v97 = vshrq_n_s32(vsubq_s32(v92, v93), 2uLL);
                *v89 = vsraq_n_s32(v96, v94, 2uLL);
                v89[64] = vsraq_n_s32(v97, v95, 2uLL);
                v89[128] = vsubq_s32(vshrq_n_s32(v94, 2uLL), v96);
                v89[192] = vsubq_s32(vshrq_n_s32(v95, 2uLL), v97);
              }
              break;
            case 2:
              vpx_highbd_hadamard_16x16_neon(v342, (int)v31, (int32x4_t *)v338);
              v41 = v324;
              break;
            case 1:
              vpx_highbd_hadamard_8x8_neon(v342, (int)v31, (int32x4_t *)v338);
              v41 = v324;
              break;
          }
          v98 = v338;
          v99 = 0uLL;
          v100 = 0uLL;
          v101 = v317;
          do
          {
            v102 = *(int32x4_t *)v98;
            v103 = (int32x4_t)v98[1];
            v98 += 2;
            v99 = vpadalq_s32(v99, vabsq_s32(v102));
            v100 = vpadalq_s32(v100, vabsq_s32(v103));
            v101 -= 8;
          }
          while (v101);
          v82 = vaddvq_s64(vaddq_s64(v100, v99));
        }
        else
        {
          vpx_subtract_block_neon(v315, v31, (uint16x8_t *)v342, (int)v31, (uint8x8_t *)v46, v47, (uint8x8_t *)v314, (int)v31);
          if ((_DWORD)v49 == 3)
          {
            v64 = v338;
            vpx_hadamard_16x16_neon(v342, (int)v31, (uint64_t)v338);
            vpx_hadamard_16x16_neon(v343, (int)v31, (uint64_t)v339);
            vpx_hadamard_16x16_neon(v297, (int)v31, (uint64_t)v340);
            vpx_hadamard_16x16_neon(v290, (int)v31, (uint64_t)v341);
            v43 = v322;
            v41 = v324;
            v65 = -8;
            v40 = v318;
            v50 = v320;
            do
            {
              v66 = vuzp1q_s16(*v64, v64[1]);
              v67 = vuzp1q_s16(v64[64], v64[65]);
              v68 = vuzp1q_s16(v64[128], v64[129]);
              v69 = vuzp1q_s16(v64[192], v64[193]);
              v70 = vhaddq_s16(v66, v67);
              v71 = vhsubq_s16(v66, v67);
              v72 = vshrq_n_s16(vhaddq_s16(v68, v69), 1uLL);
              v73 = vshrq_n_s16(vhsubq_s16(v68, v69), 1uLL);
              v74 = vsubq_s16(vshrq_n_s16(v70, 1uLL), v72);
              v75 = vsraq_n_s16(v72, v70, 1uLL);
              v76 = vsubq_s16(vshrq_n_s16(v71, 1uLL), v73);
              *(int32x4_t *)v64 = vmovl_s16(*(int16x4_t *)v75.i8);
              v64[1] = (int16x8_t)vmovl_high_s16(v75);
              v77 = vsraq_n_s16(v73, v71, 1uLL);
              v64[64] = (int16x8_t)vmovl_s16(*(int16x4_t *)v77.i8);
              v64[65] = (int16x8_t)vmovl_high_s16(v77);
              v64[128] = (int16x8_t)vmovl_s16(*(int16x4_t *)v74.i8);
              v64[129] = (int16x8_t)vmovl_high_s16(v74);
              v64[192] = (int16x8_t)vmovl_s16(*(int16x4_t *)v76.i8);
              v64[193] = (int16x8_t)vmovl_high_s16(v76);
              v65 += 8;
              v64 += 2;
            }
            while (v65 < 0xF8);
          }
          else
          {
            v41 = v49;
            v196 = (_DWORD)v49 == 2;
            v50 = v320;
            v43 = v322;
            v40 = v318;
            if (v196)
            {
              vpx_hadamard_16x16_neon(v342, (int)v31, (uint64_t)v338);
              v41 = v324;
            }
            else if ((_DWORD)v41 == 1)
            {
              vpx_hadamard_8x8_neon(v342, (int)v31, (int32x4_t *)v338);
              v41 = v324;
            }
          }
          v78 = v338;
          v79 = 0uLL;
          v80 = 0uLL;
          v81 = v317;
          do
          {
            v79 = vpadalq_s16(v79, vabsq_s16(vuzp1q_s16(*v78, v78[1])));
            v80 = vpadalq_s16(v80, vabsq_s16(vuzp1q_s16(v78[2], v78[3])));
            v78 += 4;
            v81 -= 16;
          }
          while (v81);
          v82 = vaddvq_s32(vaddq_s32(v80, v79));
        }
        if (v43 >= v82)
          v43 = v82;
        v322 = v43;
        v44 = v37++;
      }
      while (v44 < 9);
      v296 = 0;
      v294 = 0;
      v104 = 0;
      v295 = 0;
      v105 = 8 * (v303[255] + v287) + 9;
      *(_DWORD *)(v298 + 75056) = -9 - 8 * v312;
      *(_DWORD *)(v298 + 75060) = v105;
      v106 = 8 * (v303[257] + v300) + 9;
      *v302 = -9 - v305;
      *(_DWORD *)(v298 + 75052) = v106;
      v301 = (_DWORD)v289 << 7;
      v306 = 0x7FFFFFFFFFFFFFFFLL;
      v107 = 0xFFFFFFFFLL;
      do
      {
        v328 = 0;
        v109 = *(&v346 + v104);
        if (!v109)
          goto LABEL_73;
        v110 = *(_QWORD *)(v325 + 496);
        v111 = *(_QWORD *)(v110 + 56) + v40;
        v112 = *(_QWORD *)(v109 + 56) + v40;
        LODWORD(v110) = *(_DWORD *)(v110 + 16);
        v113 = *(_DWORD *)(v325 + 680);
        v335 = 0;
        v334 = *(_OWORD *)v302;
        v333 = 0;
        *(_QWORD *)(v298 + 57416) = v111;
        *(_DWORD *)(v298 + 57424) = v110;
        *(_QWORD *)v325 = v112;
        *(_DWORD *)(v325 + 8) = v110;
        if (*v313 >= 9)
          v114 = 9;
        else
          v114 = *v313;
        if ((int)*v302 <= -1024)
        {
          *v302 = -1023;
          if (*(int *)(v298 + 75052) < 1024)
          {
LABEL_80:
            if (*(int *)(v298 + 75056) > -1024)
              goto LABEL_81;
            goto LABEL_96;
          }
        }
        else if (*(int *)(v298 + 75052) < 1024)
        {
          goto LABEL_80;
        }
        *(_DWORD *)(v298 + 75052) = 1023;
        if (*(int *)(v298 + 75056) > -1024)
        {
LABEL_81:
          if (*(int *)(v298 + 75060) < 1024)
            goto LABEL_83;
LABEL_82:
          *(_DWORD *)(v298 + 75060) = 1023;
          goto LABEL_83;
        }
LABEL_96:
        *(_DWORD *)(v298 + 75056) = -1023;
        if (*(int *)(v298 + 75060) >= 1024)
          goto LABEL_82;
LABEL_83:
        if (*(_DWORD *)(v298 + 739540))
          v115 = (__int16 *)v349;
        else
          v115 = 0;
        vp9_full_pixel_search((int *)v298, v304, v316, (__int16 *)&v333, v114, 1, v113, v115, (__int16 *)&v333 + 2, (unsigned __int16 *)&v328, 0, (unsigned __int128)(unint64_t)&v328 >> 96);
        *(_OWORD *)v302 = v334;
        if (*(_DWORD *)(v298 + 739540))
          v116 = (__int16 *)v349;
        else
          v116 = 0;
        (*(void (**)(uint64_t, int *, char *, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, __int16 *, _QWORD, _QWORD, char *, uint64_t *, _QWORD, _QWORD, _DWORD))(v298 + 740288))(v304, &v328, (char *)&v333 + 4, v303[251], *(unsigned int *)(v325 + 676), v298 + (v275 << 6) + 740464, 0, *(unsigned int *)(v298 + 739544), v116, 0, 0, (char *)&v335 + 4, &v335, 0, 0, 0);
        v40 = v318;
        v117 = *(_QWORD *)(v109 + 56) + v318;
        if ((*(_BYTE *)(*(_QWORD *)(v325 + 496) + 152) & 8) != 0)
        {
          v121 = (((v299 * DWORD1(v327[0])) >> 14) & 0xF)
               + ((unint64_t)(SDWORD1(v327[0]) * (uint64_t)(__int16)(2 * v328)) >> 14);
          v122 = (((v301 * LODWORD(v327[0])) >> 14) & 0xF)
               + ((unint64_t)(SLODWORD(v327[0]) * (uint64_t)(__int16)(2 * HIWORD(v328))) >> 14);
          v123 = 2 * v314;
          (*(void (**)(uint64_t))&v327[2 * ((v122 & 0xF) != 0) + 6 + ((v121 & 0xF) != 0)])(2 * v117 + 2 * ((v121 >> 4) * *(_DWORD *)(v109 + 16) + (v122 >> 4)));
          v124 = *(_QWORD *)(v325 + 496);
          v125 = *(int *)(v124 + 16);
          v126 = 2 * (*(_QWORD *)(v124 + 56) + v318);
          if ((int)v31 < 16)
          {
            v50 = v320;
            if ((int)v31 < 8)
            {
              if ((int)v31 >= 4)
              {
                v158 = 2 * v125;
                v159 = v342;
                v160 = v315;
                do
                {
                  v161 = 0;
                  for (m = 0; m < v31; m += 4)
                  {
                    *(int16x4_t *)&v159->i8[v161] = vsub_s16(*(int16x4_t *)(v126 + v161), *(int16x4_t *)(v123 + v161));
                    v161 += 8;
                  }
                  v159 = (int16x8_t *)((char *)v159 + v36);
                  v123 += v36;
                  v126 += v158;
                  --v160;
                }
                while (v160);
              }
            }
            else
            {
              v134 = 2 * v125;
              v135 = v342;
              v136 = v315;
              do
              {
                v137 = 0;
                for (n = 0; n < v31; n += 8)
                {
                  v135[v137] = vsubq_s16(*(int16x8_t *)(v126 + v137 * 16), *(int16x8_t *)(v123 + v137 * 16));
                  ++v137;
                }
                v135 = (int16x8_t *)((char *)v135 + v36);
                v123 += v36;
                v126 += v134;
                --v136;
              }
              while (v136);
            }
          }
          else
          {
            v127 = 2 * v125;
            v128 = v342;
            v129 = v315;
            v50 = v320;
            do
            {
              v130 = 0;
              v131 = 16;
              do
              {
                v132 = vsubq_s16(*(int16x8_t *)(v126 + v131), *(int16x8_t *)(v123 + v131));
                v133 = &v128[(unint64_t)v131 / 0x10];
                v133[-1] = vsubq_s16(*(int16x8_t *)(v126 + v131 - 16), *(int16x8_t *)(v123 + v131 - 16));
                *v133 = v132;
                v130 += 16;
                v131 += 32;
              }
              while (v130 < v31);
              v126 += v127;
              v123 += v36;
              v128 = (int16x8_t *)((char *)v128 + v36);
              --v129;
            }
            while (v129);
          }
          v120 = v324;
          switch((_DWORD)v324)
          {
            case 3:
              vpx_highbd_hadamard_16x16_neon(v342, (int)v31, (int32x4_t *)v338);
              vpx_highbd_hadamard_16x16_neon(v343, (int)v31, v339);
              vpx_highbd_hadamard_16x16_neon(v297, (int)v31, v340);
              vpx_highbd_hadamard_16x16_neon(v291, (int)v31, v341);
              v120 = v324;
              for (ii = 0; ii != 64; ++ii)
              {
                v164 = (int32x4_t *)&v338[ii];
                v165 = (int32x4_t)v338[ii];
                v166 = (int32x4_t)v338[ii + 64];
                v167 = v340[ii];
                v168 = v341[ii];
                v169 = vaddq_s32(v166, v165);
                v170 = vsubq_s32(v165, v166);
                v171 = vshrq_n_s32(vaddq_s32(v168, v167), 2uLL);
                v172 = vshrq_n_s32(vsubq_s32(v167, v168), 2uLL);
                *v164 = vsraq_n_s32(v171, v169, 2uLL);
                v164[64] = vsraq_n_s32(v172, v170, 2uLL);
                v164[128] = vsubq_s32(vshrq_n_s32(v169, 2uLL), v171);
                v164[192] = vsubq_s32(vshrq_n_s32(v170, 2uLL), v172);
              }
              break;
            case 2:
              vpx_highbd_hadamard_16x16_neon(v342, (int)v31, (int32x4_t *)v338);
              v120 = v324;
              break;
            case 1:
              vpx_highbd_hadamard_8x8_neon(v342, (int)v31, (int32x4_t *)v338);
              v120 = v324;
              break;
          }
          v173 = v338;
          v174 = 0uLL;
          v175 = 0uLL;
          v176 = v317;
          do
          {
            v177 = *(int32x4_t *)v173;
            v178 = (int32x4_t)v173[1];
            v173 += 2;
            v174 = vpadalq_s32(v174, vabsq_s32(v177));
            v175 = vpadalq_s32(v175, vabsq_s32(v178));
            v176 -= 8;
          }
          while (v176);
          v157 = (int)vaddvq_s64(vaddq_s64(v175, v174));
          if (v306 > v157)
          {
LABEL_132:
            v349[0] = 0;
            v295 = v328;
            v179 = 1 << num_pels_log2_lookup[txsize_to_bsize[v120]];
            v180 = *(int16x4_t **)(v325 + 88);
            if ((*(_BYTE *)(*(_QWORD *)(v325 + 496) + 152) & 8) != 0)
              vp9_highbd_quantize_fp_32x32_neon((int32x4_t *)v338, v179, v304, v337, v336, v180, (__int16 *)v349, (uint64_t)v293);
            else
              vp9_quantize_fp_32x32_neon(v338, v179, v304, v337, v336, (int16x8_t *)v180, (__int16 *)v349, (uint64_t)v293);
            v182 = vp9_block_error(v338, v336, v179, &v326, v181);
            if (v182 >> v292 <= 1)
              v183 = 1;
            else
              v183 = v182 >> v292;
            v184 = v326 >> v292;
            if (v326 >> v292 <= 1)
              v184 = 1;
            v326 = v184;
            v296 = v183;
            if (v349[0])
            {
              v185 = (uint64_t)*(&vp9_scan_orders + 12 * v324);
              if (v349[0] == 1)
              {
                v186 = 0;
                v187 = 1;
LABEL_146:
                v192 = v349[0] - v186;
                v193 = (__int16 *)(v185 + 2 * v186);
                do
                {
                  v194 = *v193++;
                  v195 = v337[0].i32[v194];
                  v196 = v195 == 0;
                  if (v195 < 0)
                    v195 = -v195;
                  v197 = __clz(v195 + 1);
                  if (!v196)
                    ++v187;
                  v187 = v187 - v197 + 32;
                  --v192;
                }
                while (v192);
              }
              else
              {
                v186 = v349[0] & 0xFFFE;
                v188 = (int32x2_t)1;
                v189 = (__int16 *)(v185 + 2);
                v190 = v186;
                do
                {
                  v191.i32[0] = v337[0].i32[*(v189 - 1)];
                  v191.i32[1] = v337[0].i32[*v189];
                  v188 = vadd_s32(vsub_s32(vsub_s32(v188, vtst_s32(v191, v191)), vclz_s32(vadd_s32(vabs_s32(v191), (int32x2_t)0x100000001))), (int32x2_t)0x2000000020);
                  v189 += 2;
                  v190 -= 2;
                }
                while (v190);
                v187 = vadd_s32(vdup_lane_s32(v188, 1), v188).u32[0];
                if (v186 != v349[0])
                  goto LABEL_146;
              }
              v108 = v187 << 9;
            }
            else
            {
              v108 = 512;
            }
            v294 = v108;
            v107 = v104;
            v306 = v157;
          }
        }
        else
        {
          v118 = (((v299 * DWORD1(v327[0])) >> 14) & 0xF)
               + ((unint64_t)(SDWORD1(v327[0]) * (uint64_t)(__int16)(2 * v328)) >> 14);
          v119 = (((v301 * LODWORD(v327[0])) >> 14) & 0xF)
               + ((unint64_t)(SLODWORD(v327[0]) * (uint64_t)(__int16)(2 * HIWORD(v328))) >> 14);
          (*(void (**)(uint64_t))&v327[2 * ((v119 & 0xF) != 0) + 2 + ((v118 & 0xF) != 0)])(v117 + (v118 >> 4) * *(_DWORD *)(v109 + 16) + (v119 >> 4));
          vpx_subtract_block_neon(v315, v31, (uint16x8_t *)v342, (int)v31, (uint8x8_t *)(*(_QWORD *)(*(_QWORD *)(v325 + 496) + 56) + v318), *(int *)(*(_QWORD *)(v325 + 496) + 16), (uint8x8_t *)v314, (int)v31);
          v120 = v324;
          if ((_DWORD)v324 == 3)
          {
            v139 = v338;
            vpx_hadamard_16x16_neon(v342, (int)v31, (uint64_t)v338);
            vpx_hadamard_16x16_neon(v343, (int)v31, (uint64_t)v339);
            vpx_hadamard_16x16_neon(v297, (int)v31, (uint64_t)v340);
            vpx_hadamard_16x16_neon(v290, (int)v31, (uint64_t)v341);
            v120 = v324;
            v140 = -8;
            v50 = v320;
            do
            {
              v141 = vuzp1q_s16(*v139, v139[1]);
              v142 = vuzp1q_s16(v139[64], v139[65]);
              v143 = vuzp1q_s16(v139[128], v139[129]);
              v144 = vuzp1q_s16(v139[192], v139[193]);
              v145 = vhaddq_s16(v141, v142);
              v146 = vhsubq_s16(v141, v142);
              v147 = vshrq_n_s16(vhaddq_s16(v143, v144), 1uLL);
              v148 = vshrq_n_s16(vhsubq_s16(v143, v144), 1uLL);
              v149 = vsubq_s16(vshrq_n_s16(v145, 1uLL), v147);
              v150 = vsraq_n_s16(v147, v145, 1uLL);
              v151 = vsubq_s16(vshrq_n_s16(v146, 1uLL), v148);
              *(int32x4_t *)v139 = vmovl_s16(*(int16x4_t *)v150.i8);
              v139[1] = (int16x8_t)vmovl_high_s16(v150);
              v152 = vsraq_n_s16(v148, v146, 1uLL);
              v139[64] = (int16x8_t)vmovl_s16(*(int16x4_t *)v152.i8);
              v139[65] = (int16x8_t)vmovl_high_s16(v152);
              v139[128] = (int16x8_t)vmovl_s16(*(int16x4_t *)v149.i8);
              v139[129] = (int16x8_t)vmovl_high_s16(v149);
              v139[192] = (int16x8_t)vmovl_s16(*(int16x4_t *)v151.i8);
              v139[193] = (int16x8_t)vmovl_high_s16(v151);
              v140 += 8;
              v139 += 2;
            }
            while (v140 < 0xF8);
          }
          else
          {
            v50 = v320;
            if ((_DWORD)v324 == 2)
            {
              vpx_hadamard_16x16_neon(v342, (int)v31, (uint64_t)v338);
              v120 = v324;
            }
            else if ((_DWORD)v324 == 1)
            {
              vpx_hadamard_8x8_neon(v342, (int)v31, (int32x4_t *)v338);
              v120 = v324;
            }
          }
          v153 = v338;
          v154 = 0uLL;
          v155 = 0uLL;
          v156 = v317;
          do
          {
            v154 = vpadalq_s16(v154, vabsq_s16(vuzp1q_s16(*v153, v153[1])));
            v155 = vpadalq_s16(v155, vabsq_s16(vuzp1q_s16(v153[2], v153[3])));
            v153 += 4;
            v156 -= 16;
          }
          while (v156);
          v157 = vaddvq_s32(vaddq_s32(v155, v154));
          if (v306 > v157)
            goto LABEL_132;
        }
LABEL_73:
        ++v104;
      }
      while (v104 != 3);
      v198 = v284 + (int)v289;
      v199 = v43;
      if (v43 <= 1)
        v199 = 1;
      v200 = v306;
      if (v199 < v306)
        v200 = v199;
      v201.i64[0] = 16 * v199 / v281;
      v201.i64[1] = 16 * v200 / (uint64_t)v281;
      v202 = (int8x16_t)vcgtq_s64(v201, v278);
      *(int64x2_t *)(v50 + 48 * v198) = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v201, v202), (int64x2_t)vmvnq_s8(v202));
      v203 = v309;
      if ((v107 & 0x80000000) == 0)
        *(_DWORD *)(v50 + 48 * (int)v198 + 40) = *(_DWORD *)(v276 + 24 * v277 + 4 * v107 + 8);
      v204 = 0;
      *(_DWORD *)(v50 + 48 * (int)v198 + 44) = v295;
      v205 = *v285;
      v206 = (__int128 *)(*v286 + 48 * ((int)v289 + (int)v205 * (int)v312));
      v207 = *v286 + 48 * (v289 + v312 * v205) + 32;
      v208 = 48 * v205;
      do
      {
        v209 = (_QWORD *)v207;
        v210 = v309;
        do
        {
          v211 = *(v209 - 2);
          v212 = *v209;
          v213 = v206[2];
          v214 = *v206;
          *((_OWORD *)v209 - 1) = v206[1];
          *(_OWORD *)v209 = v213;
          *((_OWORD *)v209 - 2) = v214;
          *v209 = v212;
          v215 = *(v209 - 4) + v211;
          *(v209 - 2) = v211;
          *(v209 - 1) = v215;
          v209 += 6;
          --v210;
        }
        while (v210);
        ++v204;
        v207 += v208;
      }
      while (v204 != v308);
      v216 = 0;
      v33 = *v286;
      v217 = *v285;
      v218 = (int8x16_t *)(*v286 + 48 * ((int)v289 + (int)v217 * (int)v312));
      v220 = *v218;
      v219 = &v218[2].i16[6];
      v221 = v220;
      v222 = vextq_s8(v221, v221, 8uLL);
      v223 = *v280 + 72 * (v289 + v312 * v217) + 64;
      v319 = *v285;
      do
      {
        v224 = (int8x16_t *)v223;
        v225 = v309;
        do
        {
          v224[-4].i16[0] = v288;
          v224[-4].i16[1] = 8 * v289;
          *(int8x16_t *)((char *)v224 - 56) = v221;
          v224[-1] = v222;
          v224[-2].i64[0] = 16 * v294;
          v224[-2].i64[1] = 16 * v296;
          v224[-3].i16[4] = *v219;
          v224[-3].i16[5] = v219[1];
          v224->i32[0] = v107;
          v224 = (int8x16_t *)((char *)v224 + 72);
          --v225;
        }
        while (v225);
        ++v216;
        v223 += 72 * v217;
      }
      while (v216 != v308);
      v226 = 0;
      v227 = (int)v282[242];
      v228 = 48 * (v289 + v312 * v227);
      v321 = 48 * v227;
      v229 = v33;
      do
      {
        v323 = v228;
        v230 = v310;
        v231 = v311;
        v232 = v203;
        do
        {
          result = (uint64_t *)(v33 + v228);
          v233 = v42 + 40 * *(int *)(v33 + v228 + 40);
          v234 = *(_QWORD *)(v233 + 8);
          v235 = *(__int16 *)(v33 + v228 + 46) >> 3;
          v236 = 8 * (v226 + v312) + (*(__int16 *)(v33 + v228 + 44) >> 3);
          v237 = v231 + v235;
          v238 = v236 >> 3;
          if ((v236 & 0x80000000) == 0)
            v239 = v236 >> 3;
          else
            v239 = (v236 >> 3) | 0xE0000000;
          v240 = v237 >> 3;
          if ((v237 & 0x80000000) == 0)
            v241 = v237 >> 3;
          else
            v241 = (v237 >> 3) | 0xE0000000;
          v242 = (_DWORD *)(v233 + 28);
          v243 = (_DWORD *)(v233 + 32);
          v244 = (int *)(v233 + 16);
          v245 = 8 * v239;
          v246 = 8 * v241;
          if (((8 * v239) & 0x80000000) != 0)
          {
            v254 = v241 + 1;
            v255 = 8 * v254;
          }
          else
          {
            v247 = 8 - v236;
            if (v245 < 8 * *v242 && (v246 & 0x80000000) == 0 && v246 < 8 * *v243)
            {
              v248 = result[1];
              v249 = (int)((v245 + v247) * (v230 + v246 - v235));
              v250 = (*result - v248) * v249;
              v251 = (result[3] - result[3] * v248 / *result) * v249;
              v252 = v234 + 48 * (*v244 * (uint64_t)v238 + v240);
              v42 = v298 + 190808;
              *(_QWORD *)(v252 + 16) += v251 / 64;
              v253 = *(_QWORD *)(v252 + 32) + v250 / 64;
              v33 = v229;
              *(_QWORD *)(v252 + 32) = v253;
            }
            v254 = v241 + 1;
            v255 = 8 * v254;
            if (v245 < 8 * *v242 && (v255 & 0x80000000) == 0 && v255 < 8 * *v243)
            {
              v256 = result[1];
              v257 = (int)((v245 + v247) * (v231 + v235 - v246));
              v258 = (*result - v256) * v257;
              v259 = (result[3] - result[3] * v256 / *result) * v257;
              v260 = v234 + 48 * ((v254 & 0x1FFFFFFF) + *v244 * (uint64_t)v238);
              v33 = v229;
              *(_QWORD *)(v260 + 16) += v259 / 64;
              *(_QWORD *)(v260 + 32) += v258 / 64;
            }
          }
          v261 = v239 + 1;
          v262 = 8 * v261;
          if (((8 * v261) & 0x80000000) == 0)
          {
            v263 = v236 + 8;
            if (v262 < 8 * *v242 && (v246 & 0x80000000) == 0 && v246 < 8 * *v243)
            {
              v264 = v230 + v246 - v235;
              v265 = result[1];
              v266 = (int)((v263 - v262) * v264);
              v267 = (*result - v265) * v266;
              v268 = v234 + 48 * (*v244 * (uint64_t)(v261 & 0x1FFFFFFF) + v240);
              v33 = v229;
              *(_QWORD *)(v268 + 16) += (result[3] - result[3] * v265 / *result) * v266 / 64;
              *(_QWORD *)(v268 + 32) += v267 / 64;
            }
            if (v262 < 8 * *v242 && (v255 & 0x80000000) == 0 && v255 < 8 * *v243)
            {
              v269 = result[1];
              v270 = (int)((v263 - v262) * (v231 + v235 - v255 + 8));
              v271 = (*result - v269) * v270;
              v272 = (result[3] - result[3] * v269 / *result) * v270;
              v273 = v234 + 48 * ((v254 & 0x1FFFFFFF) + *v244 * (uint64_t)(v261 & 0x1FFFFFFF));
              result = *(uint64_t **)(v273 + 16);
              *(_QWORD *)(v273 + 16) = (char *)result + v272 / 64;
              *(_QWORD *)(v273 + 32) += v271 / 64;
            }
          }
          v231 += 8;
          v230 -= 8;
          v228 += 48;
          --v232;
        }
        while (v232);
        ++v226;
        v228 = v323 + v321;
        v13 = v308;
        v203 = v309;
      }
      while (v226 != v308);
      v30 = v289 + v309;
      v10 = v303;
      v28 = v303[257];
      v311 += v279;
      v310 -= v279;
      v35 = v319;
      if (v28 > (int)v289 + (int)v309)
        continue;
      break;
    }
    v27 = v303[255];
LABEL_20:
    v312 += v13;
    if (v27 > (int)v312)
      continue;
    return result;
  }
}

uint64_t tree2tok(uint64_t result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int *v11;
  int *v12;

  v7 = result;
  do
  {
    while (1)
    {
      v8 = 2 * a4;
      ++a5;
      v9 = a3;
      v10 = *(char *)(a2 + a3);
      if (v10 <= 0)
        break;
      result = tree2tok(v7, a2);
      a4 = v8 | 1;
      a3 = *(char *)(a2 + v9 + 1);
      if (a3 <= 0)
        goto LABEL_5;
    }
    v11 = (int *)(v7 + 8 * -v10);
    *v11 = v8;
    v11[1] = a5;
    a4 = v8 | 1;
    a3 = *(char *)(a2 + v9 + 1);
  }
  while (a3 > 0);
LABEL_5:
  v12 = (int *)(v7 + 8 * -a3);
  *v12 = a4;
  v12[1] = a5;
  return result;
}

uint64_t convert_distribution(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;

  v8 = *(char *)(a2 + a1);
  if (v8 <= 0)
  {
    v9 = *(_DWORD *)(a4 + 4 * -v8);
    v10 = *(char *)(a2 + a1 + 1);
    if (v10 > 0)
      goto LABEL_3;
LABEL_5:
    v11 = *(_DWORD *)(a4 + 4 * -v10);
    goto LABEL_6;
  }
  v9 = convert_distribution();
  v10 = *(char *)(a2 + a1 + 1);
  if (v10 <= 0)
    goto LABEL_5;
LABEL_3:
  v11 = convert_distribution();
LABEL_6:
  v12 = (_DWORD *)(a3 + 8 * (a1 >> 1));
  *v12 = v9;
  v12[1] = v11;
  return (v11 + v9);
}

uint64_t vpx_codec_control_(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v16;

  result = 8;
  if (a1 && a2)
  {
    v11 = *(_QWORD *)(a1 + 8);
    if (v11)
    {
      if (*(_QWORD *)(a1 + 48) && (v12 = *(_QWORD *)(v11 + 40)) != 0)
      {
        if (*(_QWORD *)(v12 + 8))
        {
          v13 = v12 + 8;
          while (1)
          {
            v14 = *(_DWORD *)(v13 - 8);
            if (!v14 || v14 == a2)
              break;
            v16 = *(_QWORD *)(v13 + 16);
            v13 += 16;
            if (!v16)
            {
              result = 4;
              goto LABEL_14;
            }
          }
          result = (*(uint64_t (**)(_QWORD, uint64_t *))v13)(*(_QWORD *)(a1 + 48), &a9);
          *(_DWORD *)(a1 + 16) = result;
        }
        else
        {
          result = 4;
          *(_DWORD *)(a1 + 16) = 4;
        }
      }
      else
      {
        result = 1;
        *(_DWORD *)(a1 + 16) = 1;
      }
    }
    else
    {
      result = 1;
      *(_DWORD *)(a1 + 16) = 1;
    }
  }
  else
  {
LABEL_14:
    if (a1)
      *(_DWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t vpx_internal_error(uint64_t result, int a2, const char *a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  v3 = result;
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = 0;
  if (a3)
  {
    *(_DWORD *)(result + 4) = 1;
    result = vsnprintf((char *)(result + 8), 0x4FuLL, a3, va);
    *(_BYTE *)(v3 + 87) = 0;
  }
  if (*(_DWORD *)(v3 + 88))
    longjmp((int *)(v3 + 92), *(_DWORD *)v3);
  return result;
}

uint64_t vpx_convolve8_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  uint64_t result;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  int32x4_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  int16x8_t v28;
  int v31;
  _QWORD *v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  unsigned __int8 *v36;
  __int16 *v37;
  int v38;
  _QWORD v39[1082];

  result = MEMORY[0x24BDAC7A8]();
  v39[1080] = *MEMORY[0x24BDAC8D0];
  if (a10 >= 1)
  {
    v20 = v18 + (a11 - 1) * a9;
    if (v20 >= -112)
    {
      v21 = 0;
      v22 = v20 >> 4;
      v23 = result - 3 * v12 - 3;
      v24 = v22 + 7;
      v25 = v39;
      do
      {
        v26 = 0;
        v27 = v16;
        do
        {
          v19.i64[0] = *(_QWORD *)(v23 + (v27 >> 4));
          v28 = *(int16x8_t *)(v15 + 16 * (v27 & 0xF));
          v19 = vmlaq_s32(vmulq_s32(vmovl_high_s16(v28), (int32x4_t)vqtbl1q_s8((int8x16_t)v19, (int8x16_t)xmmword_208F04F40)), vmovl_s16(*(int16x4_t *)v28.i8), (int32x4_t)vqtbl1q_s8((int8x16_t)v19, (int8x16_t)xmmword_208F04F50));
          v19.i32[0] = vaddvq_s32(v19);
          LODWORD(result) = ((v19.i32[0] + 64) >> 7) & ~((v19.i32[0] + 64) >> 31);
          if ((int)result >= 255)
            result = 255;
          else
            result = result;
          *((_BYTE *)v25 + v26) = result;
          v27 += v17;
          ++v26;
        }
        while (a10 != v26);
        v23 += v12;
        v25 += 8;
      }
      while (v21++ != v24);
    }
  }
  if (a10 >= 1 && a11 >= 1)
  {
    v31 = 0;
    v32 = v39;
    do
    {
      v33 = v13;
      v34 = a11;
      v35 = v18;
      do
      {
        v36 = (unsigned __int8 *)&v32[8 * ((uint64_t)v35 >> 4)];
        v37 = (__int16 *)(v15 + 16 * (v35 & 0xF));
        LODWORD(v36) = v37[1] * v36[64]
                     + *v37 * *v36
                     + v37[2] * v36[128]
                     + v37[3] * v36[192]
                     + v37[4] * v36[256]
                     + v37[5] * v36[320]
                     + v37[6] * v36[384]
                     + v37[7] * v36[448]
                     + 64;
        result = ((int)v36 >> 7);
        v38 = result & ~((int)v36 >> 31);
        if (v38 >= 255)
          LOBYTE(v38) = -1;
        *v33 = v38;
        v35 += a9;
        v33 += v14;
        --v34;
      }
      while (v34);
      v32 = (_QWORD *)((char *)v32 + 1);
      ++v13;
      ++v31;
    }
    while (v31 != a10);
  }
  return result;
}

uint64_t vpx_scaled_horiz_c(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, double a8, double a9, int32x4_t a10, uint64_t a11, int a12, int a13, int a14)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int16x8_t v19;
  signed __int32 v20;

  if (a13 >= 1 && a14 >= 1)
  {
    v15 = 0;
    v16 = result - 3;
    do
    {
      v17 = 0;
      v18 = a6;
      do
      {
        a10.i64[0] = *(_QWORD *)(v16 + (v18 >> 4));
        v19 = *(int16x8_t *)(a5 + 16 * (v18 & 0xF));
        a10 = vmlaq_s32(vmulq_s32(vmovl_high_s16(v19), (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_208F04F40)), vmovl_s16(*(int16x4_t *)v19.i8), (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_208F04F50));
        a10.i32[0] = vaddvq_s32(a10);
        v20 = ((a10.i32[0] + 64) >> 7) & ~((a10.i32[0] + 64) >> 31);
        if (v20 >= 255)
          LOBYTE(v20) = -1;
        *(_BYTE *)(a3 + v17) = v20;
        v18 += a7;
        ++v17;
      }
      while (a13 != v17);
      v16 += a2;
      a3 += a4;
      ++v15;
    }
    while (v15 != a14);
  }
  return result;
}

uint64_t vpx_scaled_vert_c(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  int v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  __int16 *v18;
  int v19;
  int v20;
  int v21;

  if (a10 >= 1 && a11 >= 1)
  {
    v12 = 0;
    v13 = result - 3 * a2;
    result = 7 * a2;
    do
    {
      v21 = v12;
      v14 = a3;
      v15 = a11;
      v16 = a8;
      do
      {
        v17 = (unsigned __int8 *)(v13 + ((uint64_t)v16 >> 4) * a2);
        v18 = (__int16 *)(a5 + 16 * (v16 & 0xF));
        v19 = v18[1] * v17[a2]
            + *v18 * *v17
            + v18[2] * v17[2 * a2]
            + v18[3] * v17[3 * a2]
            + v18[4] * v17[4 * a2]
            + v18[5] * v17[5 * a2]
            + v18[6] * v17[6 * a2]
            + v18[7] * v17[7 * a2]
            + 64;
        v20 = (v19 >> 7) & ~(v19 >> 31);
        if (v20 >= 255)
          LOBYTE(v20) = -1;
        *v14 = v20;
        v16 += a9;
        v14 += a4;
        --v15;
      }
      while (v15);
      ++v13;
      ++a3;
      ++v12;
    }
    while (v21 + 1 != a10);
  }
  return result;
}

uint64_t vpx_scaled_avg_horiz_c(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, double a8, double a9, int32x4_t a10, uint64_t a11, int a12, int a13, int a14)
{
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int16x8_t v19;
  signed __int32 v20;

  if (a13 >= 1 && a14 >= 1)
  {
    v15 = 0;
    v16 = result - 3;
    do
    {
      v17 = 0;
      v18 = a6;
      do
      {
        a10.i64[0] = *(_QWORD *)(v16 + (v18 >> 4));
        v19 = *(int16x8_t *)(a5 + 16 * (v18 & 0xF));
        a10 = vmlaq_s32(vmulq_s32(vmovl_high_s16(v19), (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_208F04F40)), vmovl_s16(*(int16x4_t *)v19.i8), (int32x4_t)vqtbl1q_s8((int8x16_t)a10, (int8x16_t)xmmword_208F04F50));
        a10.i32[0] = vaddvq_s32(a10);
        v20 = ((a10.i32[0] + 64) >> 7) & ~((a10.i32[0] + 64) >> 31);
        if (v20 >= 255)
          v20 = 255;
        *(_BYTE *)(a3 + v17) = (*(unsigned __int8 *)(a3 + v17) + v20 + 1) >> 1;
        v18 += a7;
        ++v17;
      }
      while (a13 != v17);
      v16 += a2;
      a3 += a4;
      ++v15;
    }
    while (v15 != a14);
  }
  return result;
}

uint64_t vpx_scaled_avg_vert_c(uint64_t result, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  int v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  __int16 *v18;
  int v19;
  int v20;
  int v21;

  if (a10 >= 1 && a11 >= 1)
  {
    v12 = 0;
    v13 = result - 3 * a2;
    result = 7 * a2;
    do
    {
      v21 = v12;
      v14 = a3;
      v15 = a11;
      v16 = a8;
      do
      {
        v17 = (unsigned __int8 *)(v13 + ((uint64_t)v16 >> 4) * a2);
        v18 = (__int16 *)(a5 + 16 * (v16 & 0xF));
        v19 = v18[1] * v17[a2]
            + *v18 * *v17
            + v18[2] * v17[2 * a2]
            + v18[3] * v17[3 * a2]
            + v18[4] * v17[4 * a2]
            + v18[5] * v17[5 * a2]
            + v18[6] * v17[6 * a2]
            + v18[7] * v17[7 * a2];
        v20 = ((v19 + 64) >> 7) & ~((v19 + 64) >> 31);
        if (v20 >= 255)
          v20 = 255;
        *v14 = (*v14 + v20 + 1) >> 1;
        v16 += a9;
        v14 += a4;
        --v15;
      }
      while (v15);
      ++v13;
      ++a3;
      ++v12;
    }
    while (v21 + 1 != a10);
  }
  return result;
}

uint64_t vpx_scaled_avg_2d_c(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8x16_t *v30;
  uint8x16_t v31;
  _BYTE v32[4104];
  uint64_t v33;

  v11 = MEMORY[0x24BDAC7A8](a1, a2);
  v13 = v12;
  v15 = v14;
  v33 = *MEMORY[0x24BDAC8D0];
  result = vpx_convolve8_c(v11, v16, (uint64_t)v32, 64, v17, v18, v19, v20, a9, a10, a11);
  if (a10 >= 1 && a11 >= 1)
  {
    v23 = 0;
    v24 = a10 & 0xFFFFFFE0;
    v25 = a10 & 0xFFFFFFF8;
    v26 = v32;
    do
    {
      if (a10 >= 8)
      {
        if (a10 < 0x20)
        {
          v28 = 0;
          do
          {
LABEL_16:
            *(uint8x8_t *)(v15 + v28) = vrhadd_u8(*(uint8x8_t *)(v15 + v28), *(uint8x8_t *)&v26[v28]);
            v28 += 8;
          }
          while (v25 != v28);
          v27 = a10 & 0xFFFFFFF8;
          if (v25 == a10)
            goto LABEL_7;
          goto LABEL_18;
        }
        v29 = 0;
        do
        {
          v30 = (uint8x16_t *)(v15 + v29);
          v31 = vrhaddq_u8(*(uint8x16_t *)(v15 + v29 + 16), *(uint8x16_t *)&v26[v29 + 16]);
          *v30 = vrhaddq_u8(*(uint8x16_t *)(v15 + v29), *(uint8x16_t *)&v26[v29]);
          v30[1] = v31;
          v29 += 32;
        }
        while (v24 != v29);
        if (v24 == a10)
          goto LABEL_7;
        v28 = a10 & 0xFFFFFFE0;
        v27 = v28;
        if ((a10 & 0x18) != 0)
          goto LABEL_16;
      }
      else
      {
        v27 = 0;
      }
      do
      {
LABEL_18:
        *(_BYTE *)(v15 + v27) = (*(unsigned __int8 *)(v15 + v27) + v26[v27] + 1) >> 1;
        ++v27;
      }
      while (a10 != v27);
LABEL_7:
      v26 += 64;
      v15 += v13;
      ++v23;
    }
    while (v23 != a11);
  }
  return result;
}

uint64_t highbd_convolve_horiz(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, unsigned int a8, int a9, int a10)
{
  uint64_t v10;
  int j;
  uint64_t v12;
  int v13;
  uint16x8_t v14;
  int16x8_t v15;
  int v16;
  int i;
  uint64_t v18;
  int v19;
  uint16x8_t v20;
  int16x8_t v21;
  int v22;
  int k;
  uint64_t v24;
  int v25;
  uint16x8_t v26;
  int16x8_t v27;
  int v28;

  if ((int)a8 >= 1 && a9 >= 1)
  {
    v10 = result - 6;
    if (a10 == 12)
    {
      for (i = 0; i != a9; ++i)
      {
        v18 = 0;
        v19 = a6;
        do
        {
          v20 = *(uint16x8_t *)(v10 + 2 * (v19 >> 4));
          v21 = *(int16x8_t *)(a5 + 16 * (v19 & 0xF));
          v22 = (vaddvq_s32(vmlaq_s32(vmulq_s32(vmovl_high_s16(v21), (int32x4_t)vmovl_high_u16(v20)), vmovl_s16(*(int16x4_t *)v21.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v20.i8)))+ 64) >> 7;
          if (v22 >= 4095)
            v22 = 4095;
          *(_WORD *)(a3 + v18) = v22 & ~(unsigned __int16)(v22 >> 31);
          v19 += a7;
          v18 += 2;
        }
        while (2 * a8 != v18);
        v10 += 2 * a2;
        a3 += 2 * a4;
      }
    }
    else if (a10 == 10)
    {
      for (j = 0; j != a9; ++j)
      {
        v12 = 0;
        v13 = a6;
        do
        {
          v14 = *(uint16x8_t *)(v10 + 2 * (v13 >> 4));
          v15 = *(int16x8_t *)(a5 + 16 * (v13 & 0xF));
          v16 = (vaddvq_s32(vmlaq_s32(vmulq_s32(vmovl_high_s16(v15), (int32x4_t)vmovl_high_u16(v14)), vmovl_s16(*(int16x4_t *)v15.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v14.i8)))+ 64) >> 7;
          if (v16 >= 1023)
            v16 = 1023;
          *(_WORD *)(a3 + v12) = v16 & ~(unsigned __int16)(v16 >> 31);
          v13 += a7;
          v12 += 2;
        }
        while (2 * a8 != v12);
        v10 += 2 * a2;
        a3 += 2 * a4;
      }
    }
    else
    {
      for (k = 0; k != a9; ++k)
      {
        v24 = 0;
        v25 = a6;
        do
        {
          v26 = *(uint16x8_t *)(v10 + 2 * (v25 >> 4));
          v27 = *(int16x8_t *)(a5 + 16 * (v25 & 0xF));
          v28 = (vaddvq_s32(vmlaq_s32(vmulq_s32(vmovl_high_s16(v27), (int32x4_t)vmovl_high_u16(v26)), vmovl_s16(*(int16x4_t *)v27.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v26.i8)))+ 64) >> 7;
          if (v28 >= 255)
            v28 = 255;
          *(_WORD *)(a3 + v24) = v28 & ~(unsigned __int16)(v28 >> 31);
          v25 += a7;
          v24 += 2;
        }
        while (2 * a8 != v24);
        v10 += 2 * a2;
        a3 += 2 * a4;
      }
    }
  }
  return result;
}

uint64_t vpx_highbd_convolve8_avg_horiz_c(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8, int a9, int a10, int a11, int a12)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  __int16 *v18;
  int v19;
  int v20;
  int v21;

  if (a10 >= 1 && a11 >= 1)
  {
    v13 = 0;
    v14 = result - 6;
    v15 = 2 * a4;
    do
    {
      v16 = 0;
      LODWORD(result) = a6;
      do
      {
        v17 = (unsigned __int16 *)(v14 + 2 * ((int)result >> 4));
        v18 = (__int16 *)(a5 + 16 * (result & 0xF));
        v19 = (v18[1] * v17[1]
             + *v18 * *v17
             + v18[2] * v17[2]
             + v18[3] * v17[3]
             + v18[4] * v17[4]
             + v18[5] * v17[5]
             + v18[6] * v17[6]
             + v18[7] * v17[7]
             + 64) >> 7;
        if (v19 >= 4095)
          v20 = 4095;
        else
          v20 = (v18[1] * v17[1]
               + *v18 * *v17
               + v18[2] * v17[2]
               + v18[3] * v17[3]
               + v18[4] * v17[4]
               + v18[5] * v17[5]
               + v18[6] * v17[6]
               + v18[7] * v17[7]
               + 64) >> 7;
        if (v19 >= 255)
          v21 = 255;
        else
          v21 = (v18[1] * v17[1]
               + *v18 * *v17
               + v18[2] * v17[2]
               + v18[3] * v17[3]
               + v18[4] * v17[4]
               + v18[5] * v17[5]
               + v18[6] * v17[6]
               + v18[7] * v17[7]
               + 64) >> 7;
        if (v19 >= 1023)
          v19 = 1023;
        if (a12 != 10)
          v19 = v21;
        if (a12 == 12)
          v19 = v20;
        *(_WORD *)(a3 + v16) = (*(unsigned __int16 *)(a3 + v16) + (v19 & ~(v19 >> 31)) + 1) >> 1;
        result = (result + a7);
        v16 += 2;
      }
      while (2 * a10 != v16);
      v14 += 2 * a2;
      ++v13;
      a3 += v15;
    }
    while (v13 != a11);
  }
  return result;
}

uint64_t highbd_convolve_vert(uint64_t result, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, unsigned int a9, int a10)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  int v15;
  unsigned __int16 *v16;
  __int16 *v17;
  int v18;
  int v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  int v23;
  unsigned __int16 *v24;
  __int16 *v25;
  int v26;
  int v27;
  uint64_t v28;
  _WORD *v29;
  uint64_t v30;
  int v31;
  unsigned __int16 *v32;
  __int16 *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  _WORD *v38;
  _WORD *v39;

  if (a8 >= 1 && (int)a9 >= 1)
  {
    v10 = result - 6 * a2;
    if (a10 == 12)
    {
      v19 = 0;
      v20 = 2 * a4;
      do
      {
        v36 = v19;
        v21 = a3;
        v22 = a9;
        v23 = a6;
        do
        {
          v24 = (unsigned __int16 *)(v10 + 2 * ((uint64_t)v23 >> 4) * a2);
          v25 = (__int16 *)(a5 + 16 * (v23 & 0xF));
          result = v25[6];
          v26 = (int)(v25[1] * v24[a2]
                    + *v25 * *v24
                    + v25[2] * v24[2 * a2]
                    + v25[3] * v24[3 * a2]
                    + v25[4] * v24[4 * a2]
                    + v25[5] * v24[5 * a2]
                    + result * v24[6 * a2]
                    + v25[7] * v24[7 * a2]
                    + 64) >> 7;
          if (v26 >= 4095)
            v26 = 4095;
          *v21 = v26 & ~(unsigned __int16)(v26 >> 31);
          v23 += a7;
          v21 = (_WORD *)((char *)v21 + v20);
          --v22;
        }
        while (v22);
        v10 += 2;
        ++a3;
        ++v19;
      }
      while (v36 + 1 != a8);
    }
    else if (a10 == 10)
    {
      v11 = 0;
      v12 = 2 * a4;
      do
      {
        v35 = v11;
        v38 = a3;
        v13 = a3;
        v14 = a9;
        v15 = a6;
        do
        {
          v16 = (unsigned __int16 *)(v10 + 2 * ((uint64_t)v15 >> 4) * a2);
          v17 = (__int16 *)(a5 + 16 * (v15 & 0xF));
          result = 1023;
          v18 = (v17[1] * v16[a2]
               + *v17 * *v16
               + v17[2] * v16[2 * a2]
               + v17[3] * v16[3 * a2]
               + v17[4] * v16[4 * a2]
               + v17[5] * v16[5 * a2]
               + v17[6] * v16[6 * a2]
               + v17[7] * v16[7 * a2]
               + 64) >> 7;
          if (v18 >= 1023)
            v18 = 1023;
          *v13 = v18 & ~(unsigned __int16)(v18 >> 31);
          v15 += a7;
          v13 = (_WORD *)((char *)v13 + v12);
          --v14;
        }
        while (v14);
        v10 += 2;
        a3 = v38 + 1;
        ++v11;
      }
      while (v35 + 1 != a8);
    }
    else
    {
      v27 = 0;
      v28 = 2 * a4;
      do
      {
        v37 = v27;
        v39 = a3;
        v29 = a3;
        v30 = a9;
        v31 = a6;
        do
        {
          v32 = (unsigned __int16 *)(v10 + 2 * ((uint64_t)v31 >> 4) * a2);
          v33 = (__int16 *)(a5 + 16 * (v31 & 0xF));
          result = 255;
          v34 = (v33[1] * v32[a2]
               + *v33 * *v32
               + v33[2] * v32[2 * a2]
               + v33[3] * v32[3 * a2]
               + v33[4] * v32[4 * a2]
               + v33[5] * v32[5 * a2]
               + v33[6] * v32[6 * a2]
               + v33[7] * v32[7 * a2]
               + 64) >> 7;
          if (v34 >= 255)
            v34 = 255;
          *v29 = v34 & ~(unsigned __int16)(v34 >> 31);
          v31 += a7;
          v29 = (_WORD *)((char *)v29 + v28);
          --v30;
        }
        while (v30);
        v10 += 2;
        a3 = v39 + 1;
        ++v27;
      }
      while (v37 + 1 != a8);
    }
  }
  return result;
}

uint64_t vpx_highbd_convolve8_avg_vert_c(uint64_t result, uint64_t a2, _WORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11, int a12)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  int v18;
  unsigned __int16 *v19;
  __int16 *v20;
  int v21;
  int v22;
  int v23;

  if (a10 >= 1 && a11 >= 1)
  {
    v13 = 0;
    v14 = result - 6 * a2;
    result = 6 * a2;
    v15 = 2 * a4;
    do
    {
      v16 = a3;
      v17 = a11;
      v18 = a8;
      do
      {
        v19 = (unsigned __int16 *)(v14 + 2 * ((uint64_t)v18 >> 4) * a2);
        v20 = (__int16 *)(a5 + 16 * (v18 & 0xF));
        v21 = (v20[1] * v19[a2]
             + *v20 * *v19
             + v20[2] * v19[2 * a2]
             + v20[3] * v19[3 * a2]
             + v20[4] * v19[4 * a2]
             + v20[5] * v19[5 * a2]
             + v20[6] * v19[6 * a2]
             + v20[7] * v19[7 * a2]
             + 64) >> 7;
        if (v21 >= 4095)
          v22 = 4095;
        else
          v22 = v21;
        if (v21 >= 255)
          v23 = 255;
        else
          v23 = v21;
        if (v21 >= 1023)
          v21 = 1023;
        if (a12 != 10)
          v21 = v23;
        if (a12 == 12)
          v21 = v22;
        *v16 = ((unsigned __int16)*v16 + (v21 & ~(v21 >> 31)) + 1) >> 1;
        v18 += a9;
        v16 = (_WORD *)((char *)v16 + v15);
        --v17;
      }
      while (v17);
      v14 += 2;
      ++a3;
      ++v13;
    }
    while (v13 != a10);
  }
  return result;
}

__int32 *vpx_convolve8_horiz_neon(__int32 *result, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int v24;
  int8x16_t v25;
  BOOL v26;
  uint64_t *v27;
  unint64_t v28;
  int8x8_t v29;
  int8x8_t *v30;
  int8x8_t v31;
  int8x8_t *v32;
  int8x8_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  uint8x8_t v38;
  uint8x8_t v39;
  uint8x8_t v40;
  uint8x8_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x4_t v54;
  int16x4_t v55;
  int16x4_t v56;
  int8x8_t v57;
  int8x8_t v58;
  int8x8_t v59;
  int16x4_t v60;
  int8x8_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  int16x4_t v65;
  uint8x8_t v66;
  uint8x8_t v67;
  uint8x8_t v68;
  uint8x8_t v69;
  int16x4_t v70;
  int16x4_t v71;
  int16x4_t v72;
  int16x4_t v73;
  int16x8_t v74;
  int16x4_t v75;
  int16x4_t v76;
  int16x4_t v77;
  int16x8_t v78;
  int16x4_t v79;
  int16x4_t v80;
  int16x4_t v81;
  int32x2_t v82;
  int8x8_t v83;
  int8x8_t v84;
  int8x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int v92;
  int16x8_t v93;
  int16x8_t v94;
  int32x2_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t *v102;
  int16x8_t v103;
  int16x8_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int32x4_t v107;
  int32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int8x16_t v113;
  uint8x8_t v114;
  uint8x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int32x2_t *v119;
  int32x2_t v120;
  int32x2_t *v121;
  int32x2_t v122;
  int32x2_t *v123;
  int32x2_t v124;
  int32x2_t *v125;
  int32x2_t v126;
  int32x2_t *v127;
  int32x2_t v128;
  int16x8_t v129;
  int32x2_t *v130;
  int16x4_t v131;
  int16x4_t v132;
  int16x4_t v133;
  int16x4_t v134;
  int8x8_t v135;
  int8x8_t v136;
  int8x8_t v137;
  int8x8_t v138;
  uint8x8_t v139;
  uint8x8_t v140;
  uint8x8_t v141;
  uint8x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  uint64_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  __int32 *v157;
  int16x8_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t *v163;
  uint64_t *v164;
  int16x8_t v165;
  int16x8_t v166;
  int16x8_t v167;
  int16x8_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int32x4_t v171;
  int32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  int8x16_t v175;
  uint8x8_t v176;
  uint64_t *v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  int16x8_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int32x4_t v186;
  int32x4_t v187;
  int32x4_t v188;
  int8x16_t v189;
  int32x4_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  uint8x8_t v194;
  int8x16_t v195;
  int16x8_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  int16x8_t v202;
  int16x8_t v203;
  int16x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int8x16_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int8x16_t v221;
  int8x16_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int16x8_t v225;
  int8x16_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int32x4_t v231;
  int32x4_t v232;
  int32x4_t v233;
  int32x4_t v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  BOOL v239;
  int8x8_t v240;
  uint64_t v241;
  uint64_t v242;
  int v243;
  uint8x8_t v244;
  uint8x8_t v245;
  uint8x8_t v246;
  uint8x8_t v247;
  uint8x8_t v248;
  uint8x8_t v249;
  uint8x8_t v250;
  uint8x8_t v251;
  int8x8_t v252;
  char *v253;
  uint8x8_t v254;
  uint8x8_t v255;
  uint8x8_t v256;
  uint8x8_t v257;
  uint64_t v258;
  __int32 *v259;
  int8x8_t v260;

  v24 = a11;
  v25 = *(int8x16_t *)(a5 + 16 * a6);
  if (v25.i16[7] | v25.i16[0])
    v26 = 0;
  else
    v26 = (v25.i16[6] | WORD1(*(_OWORD *)(a5 + 16 * a6))) == 0;
  if (v26)
  {
    v240 = vshrn_n_s16(vabsq_s16((int16x8_t)v25), 1uLL);
    v241 = 2 * a2;
    v242 = 2 * a4;
    if (a10 == 4)
    {
      v243 = a11 + 2;
      v244 = (uint8x8_t)vdup_lane_s8(v240, 3);
      v245 = (uint8x8_t)vdup_lane_s8(v240, 4);
      v246 = (uint8x8_t)vdup_lane_s8(v240, 2);
      v247 = (uint8x8_t)vdup_lane_s8(v240, 5);
      do
      {
        v248.i32[0] = *(__int32 *)((char *)result - 1);
        v248.i32[1] = *(__int32 *)((char *)result + a2 - 1);
        v249.i32[0] = *result;
        v249.i32[1] = *(__int32 *)((char *)result + a2);
        v250.i32[0] = *(__int32 *)((char *)result + 1);
        v250.i32[1] = *(__int32 *)((char *)result + a2 + 1);
        v251.i32[0] = *(__int32 *)((char *)result + 2);
        v251.i32[1] = *(__int32 *)((char *)result + a2 + 2);
        v252 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(v250, v245), v249, v244), v248, v246), v251, v247), 6uLL);
        *a3 = v252.i32[0];
        *(_DWORD *)((char *)a3 + a4) = v252.i32[1];
        a3 = (_DWORD *)((char *)a3 + v242);
        v243 -= 2;
        result = (__int32 *)((char *)result + v241);
      }
      while (v243 > 2);
    }
    else
    {
      v253 = (char *)a3 + a4;
      v254 = (uint8x8_t)vdup_lane_s8(v240, 3);
      v255 = (uint8x8_t)vdup_lane_s8(v240, 4);
      v256 = (uint8x8_t)vdup_lane_s8(v240, 2);
      v257 = (uint8x8_t)vdup_lane_s8(v240, 5);
      do
      {
        v258 = -1;
        v259 = result;
        do
        {
          v260 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v259 + a2 + 1), v255), *(uint8x8_t *)((char *)v259 + a2), v254), *(uint8x8_t *)((char *)v259 + a2 - 1), v256), *(uint8x8_t *)((char *)v259 + a2 + 2), v257), 6uLL);
          *(int8x8_t *)((char *)a3 + v258 + 1) = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)((char *)v259 + 1), v255), *(uint8x8_t *)v259, v254), *(uint8x8_t *)((char *)v259 - 1), v256), *(uint8x8_t *)((char *)v259 + 2), v257), 6uLL);
          *(int8x8_t *)&v253[v258 + 1] = v260;
          v258 += 8;
          v259 += 2;
        }
        while ((_DWORD)v258 - a10 != -1);
        a3 = (_DWORD *)((char *)a3 + v242);
        v253 += v242;
        result = (__int32 *)((char *)result + v241);
        v239 = __OFSUB__(v24, 2);
        v24 -= 2;
      }
      while (!((v24 < 0) ^ v239 | (v24 == 0)));
    }
  }
  else
  {
    v27 = (uint64_t *)((char *)result - 3);
    if (a11 == 4)
    {
      v28 = 0;
      v29 = *(int8x8_t *)((char *)result - 3);
      v30 = (int8x8_t *)((char *)v27 + a2);
      v31 = *v30;
      v32 = (int8x8_t *)((char *)v30 + a2);
      v33 = *(int8x8_t *)((char *)v32 + a2);
      v34 = (int16x4_t)vtrn1_s8(v29, v31);
      v35 = (int16x4_t)vtrn2_s8(v29, v31);
      v36 = (int16x4_t)vtrn1_s8(*v32, v33);
      v37 = (int16x4_t)vtrn2_s8(*v32, v33);
      v38 = (uint8x8_t)vtrn1_s16(v34, v36);
      v39 = (uint8x8_t)vtrn2_s16(v34, v36);
      v40 = (uint8x8_t)vtrn1_s16(v35, v37);
      v41 = (uint8x8_t)vtrn2_s16(v35, v37);
      v42 = (int8x16_t)vmovl_u8(v38);
      v43 = (int8x16_t)vmovl_u8(v40);
      v44 = (int8x16_t)vmovl_u8(v39);
      v45 = (int16x4_t)vmovl_u8(v41).u64[0];
      v46 = (int16x4_t)vextq_s8(v42, v42, 8uLL).u64[0];
      v47 = (int16x4_t)vextq_s8(v43, v43, 8uLL).u64[0];
      v48 = (int16x4_t)vextq_s8(v44, v44, 8uLL).u64[0];
      v49 = vdup_lane_s16(*(int16x4_t *)v25.i8, 0);
      v50 = vdup_lane_s16(*(int16x4_t *)v25.i8, 1);
      v51 = vdup_lane_s16(*(int16x4_t *)v25.i8, 2);
      v52 = vdup_laneq_s16((int16x8_t)v25, 5);
      v53 = vdup_laneq_s16((int16x8_t)v25, 6);
      v54 = vdup_laneq_s16((int16x8_t)v25, 7);
      v55 = vdup_lane_s16(*(int16x4_t *)v25.i8, 3);
      v56 = vdup_laneq_s16((int16x8_t)v25, 4);
      do
      {
        v57 = *(int8x8_t *)&result[v28 / 4 + 1];
        v58 = *(int8x8_t *)((char *)result + a2 + v28 + 4);
        v59 = *(int8x8_t *)((char *)result + 2 * a2 + v28 + 4);
        v60 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v48, v53), v47, v52), *(int16x4_t *)v44.i8, v51), *(int16x4_t *)v43.i8, v50), *(int16x4_t *)v42.i8, v49);
        *(int16x4_t *)v42.i8 = v46;
        v61 = *(int8x8_t *)((char *)result + 3 * a2 + v28 + 4);
        v62 = (int16x4_t)vtrn1_s8(v57, v58);
        v63 = (int16x4_t)vtrn2_s8(v57, v58);
        v64 = (int16x4_t)vtrn1_s8(v59, v61);
        v65 = (int16x4_t)vtrn2_s8(v59, v61);
        v66 = (uint8x8_t)vzip1_s16(v62, v64);
        v67 = (uint8x8_t)vtrn2_s16(v62, v64);
        v68 = (uint8x8_t)vzip1_s16(v63, v65);
        v69 = (uint8x8_t)vtrn2_s16(v63, v65);
        v70 = vmla_s16(vmul_s16(v48, v52), v45, v51);
        v71 = vmla_s16(vmul_s16(*(int16x4_t *)v42.i8, v51), v45, v50);
        v72 = vmla_s16(vmla_s16(vmul_s16(v47, v51), *(int16x4_t *)v42.i8, v50), v45, v49);
        v73 = vmul_s16(v45, v55);
        v45 = (int16x4_t)vmovl_u8(v66).u64[0];
        *(int16x4_t *)v74.i8 = vqadd_s16(vqadd_s16(vmla_s16(v60, v45, v54), v73), vmul_s16(*(int16x4_t *)v42.i8, v56));
        v46 = (int16x4_t)vmovl_u8(v68).u64[0];
        v75 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(v70, *(int16x4_t *)v44.i8, v50), *(int16x4_t *)v43.i8, v49), v45, v53), v46, v54), vmul_s16(*(int16x4_t *)v42.i8, v55)), vmul_s16(v47, v56));
        v76 = vmla_s16(v71, *(int16x4_t *)v44.i8, v49);
        v77 = vmul_s16(v47, v55);
        *(int16x4_t *)v43.i8 = v47;
        v47 = (int16x4_t)vmovl_u8(v67).u64[0];
        *(int16x4_t *)v78.i8 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v76, v45, v52), v46, v53), v47, v54), v77), vmul_s16(v48, v56));
        v79 = vmul_s16(v48, v55);
        *(int16x4_t *)v44.i8 = v48;
        v48 = (int16x4_t)vmovl_u8(v69).u64[0];
        v74.u64[1] = (unint64_t)v75;
        v80 = (int16x4_t)vqrshrun_n_s16(v74, 7uLL);
        v78.u64[1] = (unint64_t)vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v72, v46, v52), v47, v53), v48, v54), v79), vmul_s16(v45, v56));
        v81 = (int16x4_t)vqrshrun_n_s16(v78, 7uLL);
        *(int16x4_t *)v78.i8 = vtrn1_s16(v80, v81);
        v82 = (int32x2_t)vtrn2_s16(v80, v81);
        v83 = (int8x8_t)vzip1_s32(*(int32x2_t *)v78.i8, v82);
        v84 = (int8x8_t)vzip2_s32(*(int32x2_t *)v78.i8, v82);
        *(int8x8_t *)v78.i8 = vtrn1_s8(v83, v84);
        a3[v28 / 4] = v78.i32[0];
        v85 = vtrn2_s8(v83, v84);
        *(_DWORD *)((char *)a3 + 2 * a4 + v28) = v78.i32[1];
        *(_DWORD *)((char *)a3 + a4 + v28) = v85.i32[0];
        *(_DWORD *)((char *)a3 + 2 * a4 + a4 + v28) = v85.i32[1];
        v28 += 4;
      }
      while (a10 != (_DWORD)v28);
    }
    else if (a10 == 4)
    {
      v86 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 0);
      v87 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 1);
      v88 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 2);
      v89 = vdupq_laneq_s16((int16x8_t)v25, 5);
      v90 = vdupq_laneq_s16((int16x8_t)v25, 6);
      v91 = vdupq_laneq_s16((int16x8_t)v25, 7);
      v92 = a11 + 8;
      v93 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 3);
      v94 = vdupq_laneq_s16((int16x8_t)v25, 4);
      v95 = (int32x2_t *)(result + 1);
      do
      {
        *(int32x2_t *)v25.i8 = *(int32x2_t *)((char *)v95 - 7);
        v96 = (uint64_t *)((char *)&v95[-1] + a2 + 1);
        v11.i64[0] = *v96;
        v97 = (uint64_t *)((char *)v96 + a2);
        v12.i64[0] = *v97;
        v98 = (uint64_t *)((char *)v97 + a2);
        v13.i64[0] = *v98;
        v99 = (uint64_t *)((char *)v98 + a2);
        v14.i64[0] = *v99;
        v100 = (uint64_t *)((char *)v99 + a2);
        v15.i64[0] = *v100;
        v101 = (uint64_t *)((char *)v100 + a2);
        v16.i64[0] = *v101;
        v102 = (uint64_t *)((char *)v101 + a2);
        v17.i64[0] = *v102;
        v103 = (int16x8_t)vzip1q_s8(v25, v11);
        v104 = (int16x8_t)vzip1q_s8(v12, v13);
        v105 = (int16x8_t)vzip1q_s8(v14, v15);
        v106 = (int16x8_t)vzip1q_s8(v16, v17);
        v107 = (int32x4_t)vzip1q_s16(v103, v104);
        v108 = (int32x4_t)vzip2q_s16(v103, v104);
        v109 = (int32x4_t)vzip1q_s16(v105, v106);
        v110 = (int32x4_t)vzip2q_s16(v105, v106);
        v111 = (int8x16_t)vzip1q_s32(v107, v109);
        v112 = (int8x16_t)vzip2q_s32(v107, v109);
        v113 = (int8x16_t)vzip1q_s32(v108, v110);
        v114 = (uint8x8_t)vextq_s8(v111, v111, 8uLL).u64[0];
        v115 = (uint8x8_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v108, (int8x16_t)v108, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v110, (int8x16_t)v110, 8uLL));
        v116 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v111.i8);
        v13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v112.i8);
        v117 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v113.i8);
        v118 = (int16x8_t)vmovl_u8(v114);
        v119 = (int32x2_t *)((char *)v102 + 7 - 6 * a2);
        v120 = *v119;
        v121 = (int32x2_t *)((char *)v119 + a2);
        v122 = *v121;
        v123 = (int32x2_t *)((char *)v121 + a2);
        v12 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL));
        v124 = *v123;
        v125 = (int32x2_t *)((char *)v123 + a2);
        v126 = *v125;
        v127 = (int32x2_t *)((char *)v125 + a2);
        v128 = *v127;
        v129 = (int16x8_t)vmovl_u8(v115);
        v130 = (int32x2_t *)((char *)v127 + a2);
        v131 = (int16x4_t)vzip1_s32(*v95, v126);
        v14 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL));
        v132 = (int16x4_t)vzip1_s32(v120, v128);
        v133 = (int16x4_t)vzip1_s32(v122, *v130);
        v134 = (int16x4_t)vzip1_s32(v124, *(int32x2_t *)((char *)v130 + a2));
        v135 = (int8x8_t)vtrn1_s16(v131, v133);
        v136 = (int8x8_t)vtrn2_s16(v131, v133);
        v137 = (int8x8_t)vtrn1_s16(v132, v134);
        v138 = (int8x8_t)vtrn2_s16(v132, v134);
        v139 = (uint8x8_t)vtrn1_s8(v135, v137);
        v140 = (uint8x8_t)vtrn2_s8(v135, v137);
        v141 = (uint8x8_t)vtrn1_s8(v136, v138);
        v142 = (uint8x8_t)vtrn2_s8(v136, v138);
        v15 = (int8x16_t)vmovl_u8(v139);
        v16 = (int8x16_t)vmovl_u8(v140);
        v143 = (int16x8_t)vmovl_u8(v141);
        v17 = (int8x16_t)vmovl_u8(v142);
        v144 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v90, v129), v87, v118), v86, v116), v88, (int16x8_t)v13), v89, (int16x8_t)v14), v91, (int16x8_t)v15), vmulq_s16(v93, (int16x8_t)v12)), vmulq_s16(v94, v117));
        v145 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v89, v129), v87, (int16x8_t)v13), v86, v118), v88, (int16x8_t)v12), v90, (int16x8_t)v15), v91, (int16x8_t)v16), vmulq_s16(v93, v117)), vmulq_s16(v94, (int16x8_t)v14));
        v146 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v87, (int16x8_t)v12), v86, (int16x8_t)v13), v88, v117), v89, (int16x8_t)v15), v90, (int16x8_t)v16), v91, v143);
        *(int8x8_t *)v13.i8 = vqrshrun_n_s16(v144, 7uLL);
        *(int8x8_t *)v145.i8 = vqrshrun_n_s16(v145, 7uLL);
        v147 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v87, v117), v86, (int16x8_t)v12), v88, (int16x8_t)v14), v89, (int16x8_t)v16), v90, v143), v91, (int16x8_t)v17);
        *(int8x8_t *)v12.i8 = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(v146, vmulq_s16(v93, (int16x8_t)v14)), vmulq_s16(v94, v129)), 7uLL);
        v148 = vqaddq_s16(v147, vmulq_s16(v93, v129));
        v11 = (int8x16_t)vmulq_s16(v94, (int16x8_t)v15);
        v25 = (int8x16_t)vqaddq_s16(v148, (int16x8_t)v11);
        *(int8x8_t *)v25.i8 = vqrshrun_n_s16((int16x8_t)v25, 7uLL);
        *(int8x8_t *)v11.i8 = vtrn1_s8(*(int8x8_t *)v13.i8, *(int8x8_t *)v145.i8);
        *(int8x8_t *)v13.i8 = vtrn2_s8(*(int8x8_t *)v13.i8, *(int8x8_t *)v145.i8);
        *(int8x8_t *)v14.i8 = vtrn1_s8(*(int8x8_t *)v12.i8, *(int8x8_t *)v25.i8);
        *(int8x8_t *)v25.i8 = vtrn2_s8(*(int8x8_t *)v12.i8, *(int8x8_t *)v25.i8);
        *(int16x4_t *)v12.i8 = vtrn1_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v14.i8);
        *(int16x4_t *)v11.i8 = vtrn2_s16(*(int16x4_t *)v11.i8, *(int16x4_t *)v14.i8);
        *(int16x4_t *)v14.i8 = vtrn1_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v25.i8);
        *a3 = v12.i32[0];
        a3[a4] = v12.i32[1];
        *(_DWORD *)((char *)a3 + a4) = v14.i32[0];
        *(int16x4_t *)v25.i8 = vtrn2_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v25.i8);
        *(_DWORD *)((char *)a3 + 5 * a4) = v14.i32[1];
        *(_DWORD *)((char *)a3 + 2 * a4) = v11.i32[0];
        *(_DWORD *)((char *)a3 + 6 * a4) = v11.i32[1];
        result = (_DWORD *)((char *)a3 + 7 * a4);
        *(_DWORD *)((char *)a3 + 3 * a4) = v25.i32[0];
        *result = v25.i32[1];
        a3 += 2 * a4;
        v92 -= 8;
        v95 += a2;
      }
      while (v92 > 8);
    }
    else
    {
      v149 = 8 * a2;
      v150 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 0);
      v151 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 1);
      v152 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 2);
      v153 = vdupq_laneq_s16((int16x8_t)v25, 5);
      v154 = vdupq_laneq_s16((int16x8_t)v25, 6);
      v155 = vdupq_laneq_s16((int16x8_t)v25, 7);
      v156 = vdupq_lane_s16(*(int16x4_t *)v25.i8, 3);
      v157 = result + 1;
      v158 = vdupq_laneq_s16((int16x8_t)v25, 4);
      do
      {
        v159 = 0;
        v25.i64[0] = *(uint64_t *)((char *)v27 + a2);
        v160 = (uint64_t *)((char *)v27 + a2 + a2);
        v11.i64[0] = *v160;
        v161 = (uint64_t *)((char *)v160 + a2);
        v12.i64[0] = *v161;
        v162 = (uint64_t *)((char *)v161 + a2);
        v13.i64[0] = *v162;
        v163 = (uint64_t *)((char *)v162 + a2);
        v14.i64[0] = *v163;
        v164 = (uint64_t *)((char *)v163 + a2);
        v15.i64[0] = *v164;
        v16.i64[0] = *(uint64_t *)((char *)v164 + a2);
        v17.i64[0] = *v27;
        v165 = (int16x8_t)vzip1q_s8(v17, v25);
        v166 = (int16x8_t)vzip1q_s8(v11, v12);
        v167 = (int16x8_t)vzip1q_s8(v13, v14);
        v168 = (int16x8_t)vzip1q_s8(v15, v16);
        v169 = (int32x4_t)vzip1q_s16(v165, v166);
        v170 = (int32x4_t)vzip2q_s16(v165, v166);
        v171 = (int32x4_t)vzip1q_s16(v167, v168);
        v172 = (int32x4_t)vzip2q_s16(v167, v168);
        v173 = (int8x16_t)vzip1q_s32(v169, v171);
        v174 = (int8x16_t)vzip2q_s32(v169, v171);
        v17 = (int8x16_t)vzip1q_s32(v170, v172);
        v175 = vextq_s8(v17, v17, 8uLL);
        v176 = (uint8x8_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v170, (int8x16_t)v170, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v172, (int8x16_t)v172, 8uLL));
        v25 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v173.i8);
        v14 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL));
        v15 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v174.i8);
        v16 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v174, v174, 8uLL));
        v13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v17.i8);
        v12 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v175.i8);
        v11 = (int8x16_t)vmovl_u8(v176);
        do
        {
          v17.i64[0] = *(_QWORD *)&v157[v159];
          v177 = (uint64_t *)((char *)&v157[v159] + a2);
          v175.i64[0] = *v177;
          v178 = (uint64_t *)((char *)v177 + a2);
          v18.i64[0] = *v178;
          v19.i64[0] = *(uint64_t *)((char *)v178 + a2);
          v179 = (uint64_t *)((char *)v178 + a2 + a2);
          v20.i64[0] = *v179;
          v180 = (uint64_t *)((char *)v179 + a2);
          v21.i64[0] = *v180;
          v181 = (uint64_t *)((char *)v180 + a2);
          v22.i64[0] = *v181;
          v23.i64[0] = *(uint64_t *)((char *)v181 + a2);
          v182 = (int16x8_t)vzip1q_s8(v17, v175);
          v183 = (int16x8_t)vzip1q_s8(v18, v19);
          v184 = (int16x8_t)vzip1q_s8(v20, v21);
          v185 = (int16x8_t)vzip1q_s8(v22, v23);
          v186 = (int32x4_t)vzip1q_s16(v182, v183);
          v187 = (int32x4_t)vzip2q_s16(v182, v183);
          v188 = (int32x4_t)vzip1q_s16(v184, v185);
          v189 = (int8x16_t)vzip1q_s32(v186, v188);
          v190 = (int32x4_t)vzip2q_s16(v184, v185);
          v191 = (int8x16_t)vzip2q_s32(v186, v188);
          v192 = (int8x16_t)vzip1q_s32(v187, v190);
          v193 = (int8x16_t)vzip2q_s32(v187, v190);
          v194 = (uint8x8_t)vextq_s8(v191, v191, 8uLL).u64[0];
          v185.i64[0] = vextq_s8(v192, v192, 8uLL).u64[0];
          v195 = vextq_s8(v193, v193, 8uLL);
          v196 = vmulq_s16((int16x8_t)v25, v150);
          v25 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v189, v189, 8uLL));
          v197 = vmlaq_s16(v196, (int16x8_t)v14, v151);
          v198 = vmulq_s16((int16x8_t)v16, v156);
          v199 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v189.i8);
          v200 = vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)v14, v150), (int16x8_t)v15, v151), (int16x8_t)v16, v152);
          v201 = vmlaq_s16(vmulq_s16((int16x8_t)v15, v150), (int16x8_t)v16, v151);
          v14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v191.i8);
          v202 = vmulq_s16((int16x8_t)v16, v150);
          v16 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v192.i8);
          v203 = vmlaq_s16(vmlaq_s16(vmlaq_s16(v197, (int16x8_t)v15, v152), (int16x8_t)v12, v153), (int16x8_t)v11, v154);
          v15 = (int8x16_t)vmovl_u8(v194);
          v204 = vmulq_s16((int16x8_t)v13, v158);
          v205 = vmulq_s16((int16x8_t)v13, v156);
          v206 = vmlaq_s16(v201, (int16x8_t)v13, v152);
          v207 = vmlaq_s16(v202, (int16x8_t)v13, v151);
          v208 = vmulq_s16((int16x8_t)v13, v150);
          v13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v185.i8);
          v209 = vqaddq_s16(vqaddq_s16(vmlaq_s16(v203, v155, v199), v198), v204);
          v210 = vmulq_s16((int16x8_t)v12, v158);
          v211 = vmulq_s16((int16x8_t)v12, v156);
          v212 = vmlaq_s16(v207, (int16x8_t)v12, v152);
          v213 = vmlaq_s16(v208, (int16x8_t)v12, v151);
          v214 = vmulq_s16((int16x8_t)v12, v150);
          v12 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v193.i8);
          v215 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v200, (int16x8_t)v11, v153), v154, v199), v155, (int16x8_t)v25), v205), v210);
          v216 = vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v206, v153, v199), v154, (int16x8_t)v25), v155, (int16x8_t)v14), v211);
          v217 = vmulq_s16((int16x8_t)v11, v156);
          v218 = vmlaq_s16(v213, (int16x8_t)v11, v152);
          v219 = vmlaq_s16(v214, (int16x8_t)v11, v151);
          v220 = vmulq_s16((int16x8_t)v11, v150);
          v221 = (int8x16_t)vqaddq_s16(v216, vmulq_s16((int16x8_t)v11, v158));
          v11 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v195.i8);
          *(int8x8_t *)v195.i8 = vqrshrun_n_s16(v209, 7uLL);
          *(int8x8_t *)v215.i8 = vqrshrun_n_s16((int16x8_t)v215, 7uLL);
          v222 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v212, v153, (int16x8_t)v25), v154, (int16x8_t)v14), v155, (int16x8_t)v15), v217), vmulq_s16(v158, v199));
          v223 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v218, v153, (int16x8_t)v14), v154, (int16x8_t)v15), v155, (int16x8_t)v16), vmulq_s16(v156, v199)), vmulq_s16(v158, (int16x8_t)v25));
          *(int8x8_t *)v221.i8 = vqrshrun_n_s16((int16x8_t)v221, 7uLL);
          *(int8x8_t *)v223.i8 = vqrshrun_n_s16((int16x8_t)v223, 7uLL);
          v224 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v219, v152, v199), v153, (int16x8_t)v15), v154, (int16x8_t)v16), v155, (int16x8_t)v13), vmulq_s16(v156, (int16x8_t)v25)), vmulq_s16(v158, (int16x8_t)v14));
          *(int8x8_t *)v222.i8 = vqrshrun_n_s16((int16x8_t)v222, 7uLL);
          *(int8x8_t *)v224.i8 = vqrshrun_n_s16((int16x8_t)v224, 7uLL);
          v225 = vmlaq_s16(vmulq_s16(v151, (int16x8_t)v25), v150, v199);
          v226 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v220, v151, v199), v152, (int16x8_t)v25), v153, (int16x8_t)v16), v154, (int16x8_t)v13), v155, (int16x8_t)v12), vmulq_s16(v156, (int16x8_t)v14)), vmulq_s16(v158, (int16x8_t)v15));
          v23 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v225, v152, (int16x8_t)v14), v153, (int16x8_t)v13), v154, (int16x8_t)v12), v155, (int16x8_t)v11), vmulq_s16(v156, (int16x8_t)v15)), vmulq_s16(v158, (int16x8_t)v16));
          *(int8x8_t *)v226.i8 = vqrshrun_n_s16((int16x8_t)v226, 7uLL);
          *(int8x8_t *)v23.i8 = vqrshrun_n_s16((int16x8_t)v23, 7uLL);
          v227 = (int16x8_t)vzip1q_s8(v195, v215);
          v228 = (int16x8_t)vzip1q_s8(v221, v222);
          v229 = (int16x8_t)vzip1q_s8(v223, v224);
          v230 = (int16x8_t)vzip1q_s8(v226, v23);
          v231 = (int32x4_t)vzip1q_s16(v227, v228);
          v232 = (int32x4_t)vzip2q_s16(v227, v228);
          v233 = (int32x4_t)vzip1q_s16(v229, v230);
          v234 = (int32x4_t)vzip2q_s16(v229, v230);
          v19 = (int8x16_t)vzip1q_s32(v231, v233);
          v18 = (int8x16_t)vzip2q_s32(v231, v233);
          v20 = (int8x16_t)vzip1q_s32(v232, v234);
          v17 = (int8x16_t)vzip2q_s32(v232, v234);
          v21 = vextq_s8(v18, v18, 8uLL);
          v22 = vextq_s8(v20, v20, 8uLL);
          *(_QWORD *)&a3[v159] = v19.i64[0];
          v235 = (_QWORD *)((char *)&a3[v159] + a4);
          *v235 = vextq_s8(v19, v19, 8uLL).u64[0];
          v236 = (_QWORD *)((char *)v235 + a4);
          v237 = (_QWORD *)((char *)v236 + a4 + a4);
          *v236 = v18.i64[0];
          *(_QWORD *)((char *)v236 + a4) = v21.i64[0];
          v238 = (_QWORD *)((char *)v237 + a4 + a4);
          v159 += 2;
          *v237 = v20.i64[0];
          v175 = vextq_s8(v17, v17, 8uLL);
          *(_QWORD *)((char *)v237 + a4) = v22.i64[0];
          *v238 = v17.i64[0];
          *(_QWORD *)((char *)v238 + a4) = v175.i64[0];
        }
        while (a10 != (_DWORD)(v159 * 4));
        v27 = (uint64_t *)((char *)v27 + v149);
        a3 += 2 * a4;
        v157 = (__int32 *)((char *)v157 + v149);
        v239 = __OFSUB__(v24, 8);
        v24 -= 8;
      }
      while (!((v24 < 0) ^ v239 | (v24 == 0)));
    }
  }
  return result;
}

__int32 *vpx_convolve8_avg_horiz_neon(uint64_t a1, uint64_t a2, __int32 *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int v26;
  int16x8_t v27;
  uint64_t *v28;
  unint64_t v29;
  int8x8_t v30;
  int8x8_t *v31;
  int8x8_t v32;
  int8x8_t *v33;
  int8x8_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x4_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int8x8_t v61;
  int8x8_t v62;
  int16x4_t v63;
  int8x8_t v64;
  int8x8_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v68;
  int16x4_t v69;
  uint8x8_t v70;
  uint8x8_t v71;
  uint8x8_t v72;
  uint8x8_t v73;
  int16x4_t v74;
  int16x4_t v75;
  int16x4_t v76;
  int16x4_t v77;
  int16x8_t v78;
  int16x4_t v79;
  int16x4_t v80;
  int16x4_t v81;
  int16x8_t v82;
  int16x4_t v83;
  int16x4_t v84;
  int16x4_t v85;
  int16x4_t v86;
  int32x2_t v87;
  int8x8_t v88;
  int8x8_t v89;
  uint8x8_t v90;
  __int32 *result;
  uint8x8_t v92;
  uint64_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int32x2_t *v101;
  int16x8_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t *v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int32x4_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int32x4_t v115;
  int8x16_t v116;
  int8x16_t v117;
  int8x16_t v118;
  uint8x8_t v119;
  uint8x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int16x8_t v123;
  int32x2_t *v124;
  int16x8_t v125;
  int32x2_t v126;
  int32x2_t *v127;
  int32x2_t v128;
  int32x2_t *v129;
  int32x2_t v130;
  int32x2_t *v131;
  int32x2_t v132;
  int32x2_t *v133;
  int32x2_t v134;
  int32x2_t *v135;
  int16x8_t v136;
  int16x4_t v137;
  int16x4_t v138;
  int16x4_t v139;
  int16x4_t v140;
  int8x8_t v141;
  int8x8_t v142;
  int8x8_t v143;
  int8x8_t v144;
  uint8x8_t v145;
  uint8x8_t v146;
  uint8x8_t v147;
  uint8x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int16x8_t v152;
  int16x8_t v153;
  int16x8_t v154;
  __int32 *v155;
  uint64_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int16x8_t v160;
  uint64_t v161;
  int16x8_t v162;
  int16x8_t v163;
  char *v164;
  int16x8_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  int16x8_t v169;
  __int32 *v170;
  char *v171;
  char *v172;
  unint64_t v173;
  uint64_t *v174;
  uint64_t *v175;
  uint64_t *v176;
  uint64_t *v177;
  uint64_t *v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  int32x4_t v183;
  int32x4_t v184;
  int32x4_t v185;
  int32x4_t v186;
  int8x16_t v187;
  int8x16_t v188;
  int8x16_t v189;
  uint8x8_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t *v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int32x4_t v201;
  int32x4_t v202;
  int32x4_t v203;
  int32x4_t v204;
  int8x16_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  uint8x8_t v209;
  uint8x8_t v210;
  int8x16_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int8x16_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int8x16_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int8x16_t v227;
  int8x16_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int16x8_t v234;
  int32x4_t v235;
  int32x4_t v236;
  int32x4_t v237;
  int32x4_t v238;

  v26 = a11;
  v27 = *(int16x8_t *)(a5 + 16 * a6);
  v28 = (uint64_t *)(a1 - 3);
  if (a11 == 4)
  {
    v29 = 0;
    v30 = *(int8x8_t *)(a1 - 3);
    v31 = (int8x8_t *)((char *)v28 + a2);
    v32 = *v31;
    v33 = (int8x8_t *)((char *)v31 + a2);
    v34 = *(int8x8_t *)((char *)v33 + a2);
    v35 = (int16x4_t)vtrn1_s8(v30, v32);
    v36 = (int16x4_t)vtrn2_s8(v30, v32);
    v37 = (int16x4_t)vtrn1_s8(*v33, v34);
    v38 = (int16x4_t)vtrn2_s8(*v33, v34);
    v39 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn1_s16(v35, v37));
    v40 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn1_s16(v36, v38));
    v41 = (int8x16_t)vmovl_u8((uint8x8_t)vtrn2_s16(v35, v37));
    v42 = (int16x4_t)vmovl_u8((uint8x8_t)vtrn2_s16(v36, v38)).u64[0];
    v43 = (int16x4_t)vextq_s8(v39, v39, 8uLL).u64[0];
    v44 = (int16x4_t)vextq_s8(v40, v40, 8uLL).u64[0];
    v45 = (int16x4_t)vextq_s8(v41, v41, 8uLL).u64[0];
    v46 = vdup_lane_s16(*(int16x4_t *)v27.i8, 0);
    v47 = vdup_lane_s16(*(int16x4_t *)v27.i8, 1);
    v48 = vdup_lane_s16(*(int16x4_t *)v27.i8, 2);
    v49 = vdup_laneq_s16(v27, 5);
    v50 = vdup_laneq_s16(v27, 6);
    v51 = vdup_laneq_s16(v27, 7);
    v52 = vdup_lane_s16(*(int16x4_t *)v27.i8, 3);
    v53 = vdup_laneq_s16(v27, 4);
    v54 = (char *)a3 + a4;
    v55 = (uint64_t)a3 + 2 * a4 + a4;
    v56 = (char *)a3 + 2 * a4;
    v57 = a1 + 4;
    v58 = a1 + 4 + 3 * a2;
    v59 = a1 + 4 + 2 * a2;
    v60 = a1 + 4 + a2;
    do
    {
      v61 = *(int8x8_t *)(v57 + v29);
      v62 = *(int8x8_t *)(v60 + v29);
      v63 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v45, v50), v44, v49), *(int16x4_t *)v41.i8, v48), *(int16x4_t *)v40.i8, v47), *(int16x4_t *)v39.i8, v46);
      *(int16x4_t *)v39.i8 = v43;
      v64 = *(int8x8_t *)(v59 + v29);
      v65 = *(int8x8_t *)(v58 + v29);
      v66 = (int16x4_t)vtrn1_s8(v61, v62);
      v67 = (int16x4_t)vtrn2_s8(v61, v62);
      v68 = (int16x4_t)vtrn1_s8(v64, v65);
      v69 = (int16x4_t)vtrn2_s8(v64, v65);
      v70 = (uint8x8_t)vzip1_s16(v66, v68);
      v71 = (uint8x8_t)vtrn2_s16(v66, v68);
      v72 = (uint8x8_t)vzip1_s16(v67, v69);
      v73 = (uint8x8_t)vtrn2_s16(v67, v69);
      v74 = vmla_s16(vmul_s16(v45, v49), v42, v48);
      v75 = vmla_s16(vmul_s16(*(int16x4_t *)v39.i8, v48), v42, v47);
      v76 = vmla_s16(vmla_s16(vmul_s16(v44, v48), *(int16x4_t *)v39.i8, v47), v42, v46);
      v77 = vmul_s16(v42, v52);
      v42 = (int16x4_t)vmovl_u8(v70).u64[0];
      *(int16x4_t *)v78.i8 = vqadd_s16(vqadd_s16(vmla_s16(v63, v42, v51), v77), vmul_s16(*(int16x4_t *)v39.i8, v53));
      v43 = (int16x4_t)vmovl_u8(v72).u64[0];
      v79 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(v74, *(int16x4_t *)v41.i8, v47), *(int16x4_t *)v40.i8, v46), v42, v50), v43, v51), vmul_s16(*(int16x4_t *)v39.i8, v52)), vmul_s16(v44, v53));
      v80 = vmla_s16(v75, *(int16x4_t *)v41.i8, v46);
      v81 = vmul_s16(v44, v52);
      *(int16x4_t *)v40.i8 = v44;
      v44 = (int16x4_t)vmovl_u8(v71).u64[0];
      *(int16x4_t *)v82.i8 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v80, v42, v49), v43, v50), v44, v51), v81), vmul_s16(v45, v53));
      v83 = vmul_s16(v45, v52);
      *(int16x4_t *)v41.i8 = v45;
      v45 = (int16x4_t)vmovl_u8(v73).u64[0];
      v84 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v76, v43, v49), v44, v50), v45, v51), v83), vmul_s16(v42, v53));
      v78.u64[1] = (unint64_t)v79;
      v85 = (int16x4_t)vqrshrun_n_s16(v78, 7uLL);
      v82.u64[1] = (unint64_t)v84;
      v86 = (int16x4_t)vqrshrun_n_s16(v82, 7uLL);
      *(int16x4_t *)v82.i8 = vtrn1_s16(v85, v86);
      v87 = (int32x2_t)vtrn2_s16(v85, v86);
      v88 = (int8x8_t)vzip1_s32(*(int32x2_t *)v82.i8, v87);
      v89 = (int8x8_t)vzip2_s32(*(int32x2_t *)v82.i8, v87);
      *(int8x8_t *)v82.i8 = vtrn1_s8(v88, v89);
      v90 = (uint8x8_t)vtrn2_s8(v88, v89);
      v88.i32[0] = a3[v29 / 4];
      v88.i32[1] = *(_DWORD *)&v56[v29];
      result = (__int32 *)(v55 + v29);
      v76.i32[0] = *(_DWORD *)&v54[v29];
      v76.i32[1] = *(_DWORD *)(v55 + v29);
      *(uint8x8_t *)v82.i8 = vrhadd_u8(*(uint8x8_t *)v82.i8, (uint8x8_t)v88);
      v92 = vrhadd_u8(v90, (uint8x8_t)v76);
      a3[v29 / 4] = v82.i32[0];
      *(_DWORD *)&v56[v29] = v82.i32[1];
      *(_DWORD *)&v54[v29] = v92.i32[0];
      *(_DWORD *)(v55 + v29) = v92.i32[1];
      v29 += 4;
    }
    while (a10 != (_DWORD)v29);
  }
  else
  {
    v93 = 2 * a4;
    if (a10 == 4)
    {
      v94 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 0);
      v95 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 1);
      v96 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 2);
      v97 = vdupq_laneq_s16(v27, 5);
      v98 = vdupq_laneq_s16(v27, 6);
      v99 = vdupq_laneq_s16(v27, 7);
      v100 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 3);
      v101 = (int32x2_t *)(a1 + 4);
      v102 = vdupq_laneq_s16(v27, 4);
      do
      {
        *(int32x2_t *)v11.i8 = *(int32x2_t *)((char *)v101 - 7);
        v103 = (uint64_t *)((char *)&v101[-1] + a2 + 1);
        v12.i64[0] = *v103;
        v104 = (uint64_t *)((char *)v103 + a2);
        v13.i64[0] = *v104;
        v105 = (uint64_t *)((char *)v104 + a2);
        v14.i64[0] = *v105;
        v15.i64[0] = *(uint64_t *)((char *)v105 + a2);
        v106 = (uint64_t *)((char *)v105 + a2 + a2);
        v16.i64[0] = *v106;
        v107 = (uint64_t *)((char *)v106 + a2);
        v17.i64[0] = *v107;
        v18.i64[0] = *(uint64_t *)((char *)v107 + a2);
        v108 = (int16x8_t)vzip1q_s8(v11, v12);
        v109 = (int16x8_t)vzip1q_s8(v13, v14);
        v110 = (int16x8_t)vzip1q_s8(v15, v16);
        v111 = (int16x8_t)vzip1q_s8(v17, v18);
        v112 = (int32x4_t)vzip1q_s16(v108, v109);
        v113 = (int32x4_t)vzip2q_s16(v108, v109);
        v114 = (int32x4_t)vzip1q_s16(v110, v111);
        v115 = (int32x4_t)vzip2q_s16(v110, v111);
        v116 = (int8x16_t)vzip1q_s32(v112, v114);
        v117 = (int8x16_t)vzip2q_s32(v112, v114);
        v118 = (int8x16_t)vzip1q_s32(v113, v115);
        v119 = (uint8x8_t)vextq_s8(v116, v116, 8uLL).u64[0];
        v120 = (uint8x8_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v113, (int8x16_t)v113, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v115, (int8x16_t)v115, 8uLL));
        v121 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v116.i8);
        v122 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v117.i8);
        v123 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v118.i8);
        v124 = (int32x2_t *)((char *)v107 + a2 + 7 - 6 * a2);
        v125 = (int16x8_t)vmovl_u8(v119);
        v126 = *v124;
        v127 = (int32x2_t *)((char *)v124 + a2);
        v128 = *v127;
        v129 = (int32x2_t *)((char *)v127 + a2);
        v130 = *v129;
        v13 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v117, v117, 8uLL));
        v131 = (int32x2_t *)((char *)v129 + a2);
        v132 = *v131;
        v133 = (int32x2_t *)((char *)v131 + a2);
        v134 = *v133;
        v135 = (int32x2_t *)((char *)v133 + a2);
        v136 = (int16x8_t)vmovl_u8(v120);
        v137 = (int16x4_t)vzip1_s32(*v101, v132);
        v138 = (int16x4_t)vzip1_s32(v126, v134);
        v15 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v118, v118, 8uLL));
        v139 = (int16x4_t)vzip1_s32(v128, *v135);
        v140 = (int16x4_t)vzip1_s32(v130, *(int32x2_t *)((char *)v135 + a2));
        v141 = (int8x8_t)vtrn1_s16(v137, v139);
        v142 = (int8x8_t)vtrn2_s16(v137, v139);
        v143 = (int8x8_t)vtrn1_s16(v138, v140);
        v144 = (int8x8_t)vtrn2_s16(v138, v140);
        v145 = (uint8x8_t)vtrn1_s8(v141, v143);
        v146 = (uint8x8_t)vtrn2_s8(v141, v143);
        v147 = (uint8x8_t)vtrn1_s8(v142, v144);
        v148 = (uint8x8_t)vtrn2_s8(v142, v144);
        v16 = (int8x16_t)vmovl_u8(v145);
        v18 = (int8x16_t)vmovl_u8(v146);
        v149 = (int16x8_t)vmovl_u8(v147);
        v17 = (int8x16_t)vmovl_u8(v148);
        v150 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v98, v136), v95, v125), v94, v121), v96, v122), v97, (int16x8_t)v15), v99, (int16x8_t)v16), vmulq_s16(v100, (int16x8_t)v13)), vmulq_s16(v102, v123));
        v151 = vmlaq_s16(vmulq_s16(v95, (int16x8_t)v13), v94, v122);
        v14 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v97, v136), v95, v122), v94, v125), v96, (int16x8_t)v13), v98, (int16x8_t)v16), v99, (int16x8_t)v18), vmulq_s16(v100, v123)), vmulq_s16(v102, (int16x8_t)v15));
        *(int8x8_t *)v150.i8 = vqrshrun_n_s16(v150, 7uLL);
        v152 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v151, v96, v123), v97, (int16x8_t)v16), v98, (int16x8_t)v18), v99, v149), vmulq_s16(v100, (int16x8_t)v15)), vmulq_s16(v102, v136));
        v153 = vmlaq_s16(vmulq_s16(v95, v123), v94, (int16x8_t)v13);
        *(int8x8_t *)v13.i8 = vqrshrun_n_s16((int16x8_t)v14, 7uLL);
        *(int8x8_t *)v14.i8 = vqrshrun_n_s16(v152, 7uLL);
        v154 = vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v153, v96, (int16x8_t)v15), v97, (int16x8_t)v18), v98, v149), v99, (int16x8_t)v17), vmulq_s16(v100, v136));
        v12 = (int8x16_t)vmulq_s16(v102, (int16x8_t)v16);
        v11 = (int8x16_t)vqaddq_s16(v154, (int16x8_t)v12);
        *(int8x8_t *)v11.i8 = vqrshrun_n_s16((int16x8_t)v11, 7uLL);
        *(int8x8_t *)v12.i8 = vtrn1_s8(*(int8x8_t *)v150.i8, *(int8x8_t *)v13.i8);
        *(int8x8_t *)v13.i8 = vtrn2_s8(*(int8x8_t *)v150.i8, *(int8x8_t *)v13.i8);
        *(int8x8_t *)v15.i8 = vtrn1_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v11.i8);
        v155 = &a3[a4];
        v16.i32[0] = *a3;
        v16.i32[1] = *v155;
        *(int8x8_t *)v11.i8 = vtrn2_s8(*(int8x8_t *)v14.i8, *(int8x8_t *)v11.i8);
        v14.i32[0] = *(__int32 *)((char *)a3 + a4);
        v14.i32[1] = *(__int32 *)((char *)a3 + 5 * a4);
        *(int16x4_t *)v17.i8 = vtrn1_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)v15.i8);
        result = (__int32 *)((char *)a3 + 6 * a4);
        v18.i32[0] = *(__int32 *)((char *)a3 + 2 * a4);
        v18.i32[1] = *result;
        *(int16x4_t *)v12.i8 = vtrn2_s16(*(int16x4_t *)v12.i8, *(int16x4_t *)v15.i8);
        v15.i32[0] = *(__int32 *)((char *)a3 + 3 * a4);
        v15.i32[1] = *(__int32 *)((char *)a3 + 7 * a4);
        *(int16x4_t *)v149.i8 = vtrn1_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v11.i8);
        *(int16x4_t *)v11.i8 = vtrn2_s16(*(int16x4_t *)v13.i8, *(int16x4_t *)v11.i8);
        *(uint8x8_t *)v13.i8 = vrhadd_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v16.i8);
        *(uint8x8_t *)v14.i8 = vrhadd_u8(*(uint8x8_t *)v149.i8, *(uint8x8_t *)v14.i8);
        *a3 = v13.i32[0];
        *v155 = v13.i32[1];
        *(uint8x8_t *)v12.i8 = vrhadd_u8(*(uint8x8_t *)v12.i8, *(uint8x8_t *)v18.i8);
        *(uint8x8_t *)v11.i8 = vrhadd_u8(*(uint8x8_t *)v11.i8, *(uint8x8_t *)v15.i8);
        *(__int32 *)((char *)a3 + a4) = v14.i32[0];
        *(__int32 *)((char *)a3 + 5 * a4) = v14.i32[1];
        *(__int32 *)((char *)a3 + 2 * a4) = v12.i32[0];
        *result = v12.i32[1];
        *(__int32 *)((char *)a3 + 3 * a4) = v11.i32[0];
        *(__int32 *)((char *)a3 + 7 * a4) = v11.i32[1];
        a3 += 2 * a4;
        v101 += a2;
        v26 -= 8;
      }
      while (v26);
    }
    else
    {
      v156 = 8 * a2;
      v157 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 0);
      v158 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 1);
      v159 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 2);
      v160 = vdupq_laneq_s16(v27, 5);
      v161 = 8 * a4;
      v162 = vdupq_laneq_s16(v27, 6);
      v163 = vdupq_laneq_s16(v27, 7);
      v164 = (char *)a3 + 7 * a4;
      v165 = vdupq_lane_s16(*(int16x4_t *)v27.i8, 3);
      v166 = (char *)a3 + 6 * a4;
      v167 = (char *)a3 + a4;
      v168 = (uint64_t)&a3[a4] + a4;
      v169 = vdupq_laneq_s16(v27, 4);
      v170 = &a3[a4];
      v171 = (char *)a3 + 3 * a4;
      v172 = (char *)a3 + v93;
      result = (__int32 *)(a1 + 4);
      do
      {
        v173 = 0;
        v11.i64[0] = *(uint64_t *)((char *)v28 + a2);
        v174 = (uint64_t *)((char *)v28 + a2 + a2);
        v12.i64[0] = *v174;
        v175 = (uint64_t *)((char *)v174 + a2);
        v13.i64[0] = *v175;
        v176 = (uint64_t *)((char *)v175 + a2);
        v14.i64[0] = *v176;
        v177 = (uint64_t *)((char *)v176 + a2);
        v15.i64[0] = *v177;
        v178 = (uint64_t *)((char *)v177 + a2);
        v16.i64[0] = *v178;
        v17.i64[0] = *(uint64_t *)((char *)v178 + a2);
        v18.i64[0] = *v28;
        v179 = (int16x8_t)vzip1q_s8(v18, v11);
        v180 = (int16x8_t)vzip1q_s8(v12, v13);
        v181 = (int16x8_t)vzip1q_s8(v14, v15);
        v182 = (int16x8_t)vzip1q_s8(v16, v17);
        v183 = (int32x4_t)vzip1q_s16(v179, v180);
        v184 = (int32x4_t)vzip2q_s16(v179, v180);
        v185 = (int32x4_t)vzip1q_s16(v181, v182);
        v186 = (int32x4_t)vzip2q_s16(v181, v182);
        v187 = (int8x16_t)vzip1q_s32(v183, v185);
        v188 = (int8x16_t)vzip2q_s32(v183, v185);
        v189 = (int8x16_t)vzip1q_s32(v184, v186);
        v18 = vextq_s8(v189, v189, 8uLL);
        v190 = (uint8x8_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v184, (int8x16_t)v184, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v186, (int8x16_t)v186, 8uLL));
        v11 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v187.i8);
        v13 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v187, v187, 8uLL));
        v15 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v188.i8);
        v17 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v188, v188, 8uLL));
        v16 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v189.i8);
        v14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v18.i8);
        v12 = (int8x16_t)vmovl_u8(v190);
        do
        {
          v18.i64[0] = *(_QWORD *)&result[v173 / 4];
          v191 = (uint64_t *)((char *)&result[v173 / 4] + a2);
          v19.i64[0] = *v191;
          v192 = (uint64_t *)((char *)v191 + a2);
          v20.i64[0] = *v192;
          v193 = (uint64_t *)((char *)v192 + a2);
          v21.i64[0] = *v193;
          v194 = (uint64_t *)((char *)v193 + a2);
          v22.i64[0] = *v194;
          v195 = (uint64_t *)((char *)v194 + a2);
          v23.i64[0] = *v195;
          v196 = (uint64_t *)((char *)v195 + a2);
          v24.i64[0] = *v196;
          v25.i64[0] = *(uint64_t *)((char *)v196 + a2);
          v197 = (int16x8_t)vzip1q_s8(v18, v19);
          v198 = (int16x8_t)vzip1q_s8(v20, v21);
          v199 = (int16x8_t)vzip1q_s8(v22, v23);
          v200 = (int16x8_t)vzip1q_s8(v24, v25);
          v201 = (int32x4_t)vzip1q_s16(v197, v198);
          v202 = (int32x4_t)vzip2q_s16(v197, v198);
          v203 = (int32x4_t)vzip1q_s16(v199, v200);
          v204 = (int32x4_t)vzip2q_s16(v199, v200);
          v205 = (int8x16_t)vzip1q_s32(v201, v203);
          v206 = (int8x16_t)vzip2q_s32(v201, v203);
          v207 = (int8x16_t)vzip1q_s32(v202, v204);
          v208 = (int8x16_t)vzip2q_s32(v202, v204);
          v209 = (uint8x8_t)vextq_s8(v205, v205, 8uLL).u64[0];
          v210 = (uint8x8_t)vextq_s8(v206, v206, 8uLL).u64[0];
          v200.i64[0] = vextq_s8(v207, v207, 8uLL).u64[0];
          v211 = vextq_s8(v208, v208, 8uLL);
          v212 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v205.i8);
          v213 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)v12, v162), (int16x8_t)v14, v160), (int16x8_t)v15, v159), (int16x8_t)v13, v158), (int16x8_t)v11, v157);
          v11 = (int8x16_t)vmovl_u8(v209);
          v214 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)v12, v160), (int16x8_t)v17, v159), (int16x8_t)v15, v158), (int16x8_t)v13, v157);
          v13 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v206.i8);
          v215 = vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)v16, v159), (int16x8_t)v17, v158), (int16x8_t)v15, v157);
          v15 = (int8x16_t)vmovl_u8(v210);
          v216 = vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)v14, v159), (int16x8_t)v16, v158), (int16x8_t)v17, v157);
          v217 = vmulq_s16((int16x8_t)v17, v165);
          v17 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v207.i8);
          v218 = vqaddq_s16(vqaddq_s16(vmlaq_s16(v213, v163, v212), v217), vmulq_s16((int16x8_t)v16, v169));
          v219 = vmlaq_s16(vmlaq_s16(vmulq_s16((int16x8_t)v12, v159), (int16x8_t)v14, v158), (int16x8_t)v16, v157);
          v220 = vmulq_s16((int16x8_t)v16, v165);
          v16 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v200.i8);
          v221 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(v214, v162, v212), v163, (int16x8_t)v11), v220), vmulq_s16((int16x8_t)v14, v169));
          v222 = vmlaq_s16(vmulq_s16((int16x8_t)v12, v158), (int16x8_t)v14, v157);
          v223 = vmulq_s16((int16x8_t)v14, v165);
          v14 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v208.i8);
          v224 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v215, v160, v212), v162, (int16x8_t)v11), v163, (int16x8_t)v13), v223), vmulq_s16((int16x8_t)v12, v169));
          v225 = vmulq_s16((int16x8_t)v12, v165);
          v226 = vmulq_s16((int16x8_t)v12, v157);
          v12 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v211.i8);
          *(int8x8_t *)v211.i8 = vqrshrun_n_s16(v218, 7uLL);
          *(int8x8_t *)v221.i8 = vqrshrun_n_s16((int16x8_t)v221, 7uLL);
          *(int8x8_t *)v224.i8 = vqrshrun_n_s16((int16x8_t)v224, 7uLL);
          v227 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v216, v160, (int16x8_t)v11), v162, (int16x8_t)v13), v163, (int16x8_t)v15), v225), vmulq_s16(v169, v212));
          *(int8x8_t *)v227.i8 = vqrshrun_n_s16((int16x8_t)v227, 7uLL);
          v228 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v219, v160, (int16x8_t)v13), v162, (int16x8_t)v15), v163, (int16x8_t)v17), vmulq_s16(v165, v212)), vmulq_s16(v169, (int16x8_t)v11));
          *(int8x8_t *)v228.i8 = vqrshrun_n_s16((int16x8_t)v228, 7uLL);
          v229 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v222, v159, v212), v160, (int16x8_t)v15), v162, (int16x8_t)v17), v163, (int16x8_t)v16), vmulq_s16(v165, (int16x8_t)v11)), vmulq_s16(v169, (int16x8_t)v13));
          *(int8x8_t *)v229.i8 = vqrshrun_n_s16((int16x8_t)v229, 7uLL);
          v25 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v226, v158, v212), v159, (int16x8_t)v11), v160, (int16x8_t)v17), v162, (int16x8_t)v16), v163, (int16x8_t)v14), vmulq_s16(v165, (int16x8_t)v13)), vmulq_s16(v169, (int16x8_t)v15));
          *(int8x8_t *)v25.i8 = vqrshrun_n_s16((int16x8_t)v25, 7uLL);
          v230 = (int8x16_t)vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v158, (int16x8_t)v11), v157, v212), v159, (int16x8_t)v13), v160, (int16x8_t)v16), v162, (int16x8_t)v14), v163, (int16x8_t)v12), vmulq_s16(v165, (int16x8_t)v15)), vmulq_s16(v169, (int16x8_t)v17));
          *(int8x8_t *)v230.i8 = vqrshrun_n_s16((int16x8_t)v230, 7uLL);
          v231 = (int16x8_t)vzip1q_s8(v211, v221);
          v232 = (int16x8_t)vzip1q_s8(v224, v227);
          v233 = (int16x8_t)vzip1q_s8(v228, v229);
          v234 = (int16x8_t)vzip1q_s8(v25, v230);
          v235 = (int32x4_t)vzip1q_s16(v231, v232);
          v236 = (int32x4_t)vzip2q_s16(v231, v232);
          v237 = (int32x4_t)vzip1q_s16(v233, v234);
          v238 = (int32x4_t)vzip2q_s16(v233, v234);
          v21 = (int8x16_t)vzip1q_s32(v235, v237);
          v20 = (int8x16_t)vzip2q_s32(v235, v237);
          v22 = (int8x16_t)vzip1q_s32(v236, v238);
          v18 = (int8x16_t)vzip2q_s32(v236, v238);
          v19 = vextq_s8(v21, v21, 8uLL);
          v23 = vextq_s8(v20, v20, 8uLL);
          v24 = vextq_s8(v22, v22, 8uLL);
          *(uint8x8_t *)v19.i8 = vrhadd_u8(*(uint8x8_t *)v19.i8, *(uint8x8_t *)&v167[v173]);
          *(uint8x8_t *)v20.i8 = vrhadd_u8(*(uint8x8_t *)v20.i8, *(uint8x8_t *)&v172[v173]);
          *(uint8x8_t *)v23.i8 = vrhadd_u8(*(uint8x8_t *)v23.i8, *(uint8x8_t *)&v171[v173]);
          *(uint8x8_t *)v22.i8 = vrhadd_u8(*(uint8x8_t *)v22.i8, *(uint8x8_t *)&v170[v173 / 4]);
          *(uint8x8_t *)v24.i8 = vrhadd_u8(*(uint8x8_t *)v24.i8, *(uint8x8_t *)(v168 + v173));
          v216.i64[0] = vextq_s8(v18, v18, 8uLL).u64[0];
          *(uint8x8_t *)v18.i8 = vrhadd_u8(*(uint8x8_t *)v18.i8, *(uint8x8_t *)&v166[v173]);
          v25.i64[0] = *(_QWORD *)&v164[v173];
          *(uint8x8_t *)&a3[v173 / 4] = vrhadd_u8(*(uint8x8_t *)v21.i8, *(uint8x8_t *)&a3[v173 / 4]);
          *(_QWORD *)&v167[v173] = v19.i64[0];
          *(_QWORD *)&v172[v173] = v20.i64[0];
          *(_QWORD *)&v171[v173] = v23.i64[0];
          *(_QWORD *)&v170[v173 / 4] = v22.i64[0];
          *(_QWORD *)(v168 + v173) = v24.i64[0];
          *(_QWORD *)&v166[v173] = v18.i64[0];
          *(uint8x8_t *)&v164[v173] = vrhadd_u8(*(uint8x8_t *)v216.i8, *(uint8x8_t *)v25.i8);
          v173 += 8;
        }
        while (a10 != (_DWORD)v173);
        v28 = (uint64_t *)((char *)v28 + v156);
        a3 = (__int32 *)((char *)a3 + v161);
        v164 += v161;
        v166 += v161;
        v168 += v161;
        v170 = (__int32 *)((char *)v170 + v161);
        v171 += v161;
        v172 += v161;
        v167 += v161;
        result = (__int32 *)((char *)result + v156);
        v26 -= 8;
      }
      while (v26);
    }
  }
  return result;
}

__int32 *vpx_convolve8_vert_neon(__int32 *result, uint64_t a2, int8x8_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  int v11;
  int v12;
  int16x8_t v13;
  BOOL v14;
  uint8x8_t *v15;
  uint8x8_t *v16;
  uint8x8_t v17;
  uint8x8_t *v18;
  uint8x8_t v19;
  uint8x8_t *v20;
  uint8x8_t v21;
  uint8x8_t *v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  uint8x8_t *v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  uint8x8_t v40;
  uint8x8_t *v41;
  uint8x8_t v42;
  uint8x8_t *v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x8_t v48;
  uint8x8_t v49;
  uint8x8_t *v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x8_t v54;
  int16x4_t v55;
  int8x8_t v56;
  int8x8_t *v57;
  int8x8_t *v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint8x8_t *v67;
  uint8x8_t v68;
  uint8x8_t *v69;
  uint8x8_t v70;
  uint8x8_t *v71;
  uint8x8_t v72;
  uint8x8_t *v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  uint8x8_t *v81;
  int8x8_t *v82;
  int v83;
  uint8x8_t v84;
  uint8x8_t *v85;
  uint8x8_t v86;
  uint8x8_t *v87;
  uint8x8_t v88;
  uint8x8_t *v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int8x8_t *v102;
  int8x8_t *v103;
  int8x8_t *v104;
  __int32 *v105;
  int8x8_t v106;
  uint8x8_t v107;
  uint8x8_t v108;
  __int32 *v109;
  uint8x8_t v110;
  uint8x8_t v111;
  uint8x8_t v112;
  uint8x8_t v113;
  uint8x8_t v114;
  __int32 *v115;
  uint8x8_t v116;
  __int32 *v117;
  __int32 v118;
  uint16x8_t v119;
  int8x8_t v120;
  int8x8_t *v121;
  int8x8_t *v122;
  uint8x8_t v123;
  uint8x8_t v124;
  uint8x8_t v125;
  uint8x8_t v126;
  uint8x8_t v127;
  uint8x8_t v128;
  uint8x8_t v129;
  uint8x8_t *v130;
  int8x8_t *v131;
  int v132;
  uint8x8_t v133;
  uint8x8_t *v134;
  uint16x8_t v135;
  uint8x8_t *v136;
  uint16x8_t v137;
  uint8x8_t *v138;
  uint16x8_t v139;
  int8x8_t v140;
  int8x8_t *v141;
  int8x8_t *v142;
  int8x8_t *v143;

  v12 = a10;
  v11 = a11;
  v13 = *(int16x8_t *)(a5 + 16 * a8);
  if (v13.i16[7] | v13.i16[0])
    v14 = 0;
  else
    v14 = (v13.i16[6] | WORD1(*(_OWORD *)(a5 + 16 * a8))) == 0;
  if (v14)
  {
    v105 = (__int32 *)((char *)result - a2);
    v106 = vshrn_n_s16(vabsq_s16(v13), 1uLL);
    if (a10 == 4)
    {
      v107.i32[0] = *v105;
      v107.i32[1] = *result;
      v108.i32[0] = *result;
      v108.i32[1] = *(__int32 *)((char *)result + a2);
      v109 = (__int32 *)((char *)v105 + 2 * a2);
      v110 = (uint8x8_t)vdup_lane_s8(v106, 3);
      v111 = (uint8x8_t)vdup_lane_s8(v106, 4);
      v112 = (uint8x8_t)vdup_lane_s8(v106, 2);
      v113 = (uint8x8_t)vdup_lane_s8(v106, 5);
      do
      {
        v114.i32[0] = *v109;
        v114.i32[1] = *(__int32 *)((char *)v109 + a2);
        v115 = (__int32 *)((char *)v109 + a2 + a2);
        v116.i32[0] = v114.i32[1];
        v116.i32[1] = *v115;
        v117 = (__int32 *)((char *)v115 + a2);
        v118 = *v117;
        v119 = vmlsl_u8(vmlal_u8(vmull_u8(v114, v111), v108, v110), v107, v112);
        v107 = (uint8x8_t)__PAIR64__(*v117, v116.u32[1]);
        v109 = (__int32 *)((char *)v117 + a2);
        v108.i32[0] = v118;
        v108.i32[1] = *v109;
        *(int8x8_t *)v119.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v119, v116, v113), 6uLL);
        v120 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8((uint8x8_t)__PAIR64__(v118, v116.u32[1]), v111), v116, v110), v114, v112), v108, v113), 6uLL);
        a3->i32[0] = v119.i32[0];
        *(__int32 *)((char *)a3->i32 + a4) = v119.i32[1];
        v121 = (int8x8_t *)((char *)a3 + a4 + a4);
        v121->i32[0] = v120.i32[0];
        v122 = (int8x8_t *)((char *)v121 + a4);
        v122->i32[0] = v120.i32[1];
        a3 = (int8x8_t *)((char *)v122 + a4);
        v11 -= 4;
      }
      while (v11);
    }
    else
    {
      v123 = (uint8x8_t)vdup_lane_s8(v106, 3);
      v124 = (uint8x8_t)vdup_lane_s8(v106, 4);
      v125 = (uint8x8_t)vdup_lane_s8(v106, 2);
      v126 = (uint8x8_t)vdup_lane_s8(v106, 5);
      do
      {
        v127 = *(uint8x8_t *)v105;
        v128 = *(uint8x8_t *)((char *)v105 + a2);
        v129 = *(uint8x8_t *)((char *)v105 + a2 + a2);
        v130 = (uint8x8_t *)((char *)v105 + 3 * a2);
        v131 = a3;
        v132 = a11;
        do
        {
          v133 = *v130;
          v134 = (uint8x8_t *)((char *)v130 + a2);
          v135 = vmlsl_u8(vmlal_u8(vmull_u8(v129, v124), v128, v123), v127, v125);
          v127 = *v134;
          v136 = (uint8x8_t *)((char *)v134 + a2);
          v137 = vmlsl_u8(vmlal_u8(vmull_u8(v133, v124), v129, v123), v128, v125);
          v128 = *v136;
          v138 = (uint8x8_t *)((char *)v136 + a2);
          v139 = vmlsl_u8(vmlal_u8(vmull_u8(v127, v124), v133, v123), v129, v125);
          v129 = *v138;
          *(int8x8_t *)v135.i8 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v135, v133, v126), 6uLL);
          v140 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(vmlsl_u8(vmlal_u8(vmull_u8(v128, v124), v127, v123), v133, v125), *v138, v126), 6uLL);
          *v131 = *(int8x8_t *)v135.i8;
          v141 = (int8x8_t *)((char *)v131 + a4);
          *v141 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v137, v127, v126), 6uLL);
          v142 = (int8x8_t *)((char *)v141 + a4);
          *v142 = vqrshrun_n_s16((int16x8_t)vmlsl_u8(v139, v128, v126), 6uLL);
          v143 = (int8x8_t *)((char *)v142 + a4);
          v130 = (uint8x8_t *)((char *)v138 + a2);
          *v143 = v140;
          v131 = (int8x8_t *)((char *)v143 + a4);
          v132 -= 4;
        }
        while (v132);
        v105 += 2;
        ++a3;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    v15 = (uint8x8_t *)((char *)result - 3 * a2);
    if (a10 == 4)
    {
      v16 = (uint8x8_t *)((char *)v15 + a2 + a2);
      v17 = *v16;
      v18 = (uint8x8_t *)((char *)v16 + a2);
      v19 = *v18;
      v20 = (uint8x8_t *)((char *)v18 + a2);
      v21 = *v20;
      v22 = (uint8x8_t *)((char *)v20 + a2);
      v23 = (int16x4_t)vmovl_u8(*v15).u64[0];
      v24 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v15 + a2)).u64[0];
      v25 = (int16x4_t)vmovl_u8(v17).u64[0];
      v26 = (int16x4_t)vmovl_u8(v19).u64[0];
      v27 = (int16x4_t)vmovl_u8(v21).u64[0];
      v28 = (int16x4_t)vmovl_u8(*v22).u64[0];
      v29 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v22 + a2)).u64[0];
      v30 = (uint8x8_t *)((char *)&v15[a2] - a2);
      v31 = vdup_lane_s16(*(int16x4_t *)v13.i8, 0);
      v32 = vdup_lane_s16(*(int16x4_t *)v13.i8, 1);
      v33 = vdup_lane_s16(*(int16x4_t *)v13.i8, 2);
      v34 = vdup_laneq_s16(v13, 5);
      v35 = vdup_laneq_s16(v13, 6);
      v36 = vdup_laneq_s16(v13, 7);
      v37 = vdup_lane_s16(*(int16x4_t *)v13.i8, 3);
      v38 = vdup_laneq_s16(v13, 4);
      do
      {
        v39 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v29, v35), v28, v34), v25, v33), v24, v32), v23, v31);
        v23 = v27;
        v40 = *v30;
        v41 = (uint8x8_t *)((char *)v30 + a2);
        v42 = *v41;
        v43 = (uint8x8_t *)((char *)v41 + a2);
        v44 = vmla_s16(vmul_s16(v29, v34), v26, v33);
        v45 = vmla_s16(vmul_s16(v23, v33), v26, v32);
        v46 = vmla_s16(vmla_s16(vmul_s16(v28, v33), v23, v32), v26, v31);
        v47 = (int16x4_t)vmovl_u8(v40).u64[0];
        *(int16x4_t *)v48.i8 = vqadd_s16(vqadd_s16(vmla_s16(v39, v47, v36), vmul_s16(v26, v37)), vmul_s16(v23, v38));
        v49 = *v43;
        v50 = (uint8x8_t *)((char *)v43 + a2);
        v27 = (int16x4_t)vmovl_u8(v42).u64[0];
        v51 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(v44, v25, v32), v24, v31), v47, v35), v27, v36), vmul_s16(v23, v37)), vmul_s16(v28, v38));
        v52 = vmla_s16(v45, v25, v31);
        v53 = vmul_s16(v28, v37);
        v24 = v28;
        v28 = (int16x4_t)vmovl_u8(v49).u64[0];
        *(int16x4_t *)v54.i8 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v52, v47, v34), v27, v35), v28, v36), v53), vmul_s16(v29, v38));
        v55 = vmul_s16(v29, v37);
        v25 = v29;
        v29 = (int16x4_t)vmovl_u8(*v50).u64[0];
        v48.u64[1] = (unint64_t)v51;
        *(int8x8_t *)v48.i8 = vqrshrun_n_s16(v48, 7uLL);
        v54.u64[1] = (unint64_t)vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v46, v27, v34), v28, v35), v29, v36), v55), vmul_s16(v47, v38));
        v56 = vqrshrun_n_s16(v54, 7uLL);
        a3->i32[0] = v48.i32[0];
        *(__int32 *)((char *)a3->i32 + a4) = v48.i32[1];
        v57 = (int8x8_t *)((char *)a3 + a4 + a4);
        v57->i32[0] = v56.i32[0];
        v58 = (int8x8_t *)((char *)v57 + a4);
        v58->i32[0] = v56.i32[1];
        v30 = (uint8x8_t *)((char *)v50 + a2);
        a3 = (int8x8_t *)((char *)v58 + a4);
        v26 = v47;
        v11 -= 4;
      }
      while (v11);
    }
    else
    {
      v59 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 0);
      v60 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 1);
      v61 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 2);
      v62 = vdupq_laneq_s16(v13, 5);
      v63 = vdupq_laneq_s16(v13, 6);
      v64 = vdupq_laneq_s16(v13, 7);
      v65 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 3);
      v66 = vdupq_laneq_s16(v13, 4);
      do
      {
        v67 = (uint8x8_t *)((char *)v15 + a2 + a2);
        v68 = *v67;
        v69 = (uint8x8_t *)((char *)v67 + a2);
        v70 = *v69;
        v71 = (uint8x8_t *)((char *)v69 + a2);
        v72 = *v71;
        v73 = (uint8x8_t *)((char *)v71 + a2);
        v74 = (int16x8_t)vmovl_u8(*v15);
        v75 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v15 + a2));
        v76 = (int16x8_t)vmovl_u8(v68);
        v77 = (int16x8_t)vmovl_u8(v70);
        v78 = (int16x8_t)vmovl_u8(v72);
        v79 = (int16x8_t)vmovl_u8(*v73);
        v80 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v73 + a2));
        v81 = (uint8x8_t *)((char *)v15 + 7 * a2);
        v82 = a3;
        v83 = a11;
        do
        {
          v84 = *v81;
          v85 = (uint8x8_t *)((char *)v81 + a2);
          v86 = *v85;
          v87 = (uint8x8_t *)((char *)v85 + a2);
          v88 = *v87;
          v89 = (uint8x8_t *)((char *)v87 + a2);
          v90 = vmlaq_s16(vmlaq_s16(vmulq_s16(v74, v59), v75, v60), v76, v61);
          v91 = vmlaq_s16(vmlaq_s16(vmulq_s16(v75, v59), v76, v60), v77, v61);
          v92 = (int16x8_t)vmovl_u8(v84);
          v93 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v90, v79, v62), v80, v63), v64, v92), vmulq_s16(v77, v65)), vmulq_s16(v78, v66));
          v94 = vmulq_s16(v78, v65);
          v95 = vmlaq_s16(vmlaq_s16(vmulq_s16(v76, v59), v77, v60), v78, v61);
          v96 = vmlaq_s16(vmulq_s16(v77, v59), v78, v60);
          v74 = v78;
          v78 = (int16x8_t)vmovl_u8(v86);
          v97 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v91, v80, v62), v63, v92), v64, v78), v94), vmulq_s16(v79, v66));
          v98 = vmulq_s16(v79, v65);
          v99 = vmlaq_s16(v96, v79, v61);
          v75 = v79;
          v79 = (int16x8_t)vmovl_u8(v88);
          v100 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v95, v62, v92), v63, v78), v64, v79), v98), vmulq_s16(v80, v66));
          v101 = vmulq_s16(v80, v65);
          v76 = v80;
          v80 = (int16x8_t)vmovl_u8(*v89);
          *v82 = vqrshrun_n_s16(v93, 7uLL);
          v102 = (int8x8_t *)((char *)v82 + a4);
          *v102 = vqrshrun_n_s16(v97, 7uLL);
          v103 = (int8x8_t *)((char *)v102 + a4);
          *v103 = vqrshrun_n_s16(v100, 7uLL);
          v104 = (int8x8_t *)((char *)v103 + a4);
          *v104 = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v99, v62, v78), v63, v79), v64, v80), v101), vmulq_s16(v66, v92)), 7uLL);
          v81 = (uint8x8_t *)((char *)v89 + a2);
          v82 = (int8x8_t *)((char *)v104 + a4);
          v77 = v92;
          v83 -= 4;
        }
        while (v83);
        ++v15;
        ++a3;
        v12 -= 8;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t vpx_convolve8_avg_vert_neon(uint64_t result, uint64_t a2, uint8x8_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, int a9, int a10, int a11)
{
  int v11;
  int v12;
  int16x8_t v13;
  uint8x8_t *v14;
  uint8x8_t *v15;
  uint8x8_t v16;
  uint8x8_t *v17;
  uint8x8_t v18;
  uint8x8_t *v19;
  uint8x8_t v20;
  uint8x8_t *v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  int16x4_t v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  uint8x8_t *v36;
  int16x4_t v37;
  int16x4_t v38;
  uint8x8_t v39;
  uint8x8_t *v40;
  uint8x8_t v41;
  uint8x8_t *v42;
  int16x4_t v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x8_t v47;
  uint8x8_t v48;
  uint8x8_t *v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x8_t v53;
  int16x4_t v54;
  uint8x8_t v55;
  uint8x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  uint8x8_t *v65;
  uint8x8_t v66;
  uint8x8_t *v67;
  uint8x8_t v68;
  uint8x8_t *v69;
  uint8x8_t v70;
  uint8x8_t *v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  uint8x8_t *v79;
  uint8x8_t *v80;
  int v81;
  int16x8_t v82;
  uint8x8_t v83;
  uint8x8_t *v84;
  uint8x8_t v85;
  uint64_t *v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  uint8x8_t *v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;

  v12 = a10;
  v11 = a11;
  v13 = *(int16x8_t *)(a5 + 16 * a8);
  v14 = (uint8x8_t *)(result - 3 * a2);
  if (a10 == 4)
  {
    v15 = (uint8x8_t *)((char *)v14 + a2 + a2);
    v16 = *v15;
    v17 = (uint8x8_t *)((char *)v15 + a2);
    v18 = *v17;
    v19 = (uint8x8_t *)((char *)v17 + a2);
    v20 = *v19;
    v21 = (uint8x8_t *)((char *)v19 + a2);
    v22 = (int16x4_t)vmovl_u8(*v14).u64[0];
    v23 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v14 + a2)).u64[0];
    v24 = (int16x4_t)vmovl_u8(v16).u64[0];
    v25 = (int16x4_t)vmovl_u8(v18).u64[0];
    v26 = (int16x4_t)vmovl_u8(v20).u64[0];
    v27 = (int16x4_t)vmovl_u8(*v21).u64[0];
    v28 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v21 + a2)).u64[0];
    v29 = vdup_lane_s16(*(int16x4_t *)v13.i8, 0);
    v30 = vdup_lane_s16(*(int16x4_t *)v13.i8, 1);
    v31 = vdup_lane_s16(*(int16x4_t *)v13.i8, 2);
    v32 = vdup_laneq_s16(v13, 5);
    v33 = vdup_laneq_s16(v13, 6);
    v34 = vdup_laneq_s16(v13, 7);
    v35 = vdup_lane_s16(*(int16x4_t *)v13.i8, 3);
    v36 = (uint8x8_t *)((char *)&v14[a2] - a2);
    v37 = vdup_laneq_s16(v13, 4);
    do
    {
      v38 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v28, v33), v27, v32), v24, v31), v23, v30), v22, v29);
      v22 = v26;
      v39 = *v36;
      v40 = (uint8x8_t *)((char *)v36 + a2);
      v41 = *v40;
      v42 = (uint8x8_t *)((char *)v40 + a2);
      v43 = vmla_s16(vmul_s16(v28, v32), v25, v31);
      v44 = vmla_s16(vmul_s16(v22, v31), v25, v30);
      v45 = vmla_s16(vmla_s16(vmul_s16(v27, v31), v22, v30), v25, v29);
      v46 = vmul_s16(v25, v35);
      v25 = (int16x4_t)vmovl_u8(v39).u64[0];
      *(int16x4_t *)v47.i8 = vqadd_s16(vqadd_s16(vmla_s16(v38, v25, v34), v46), vmul_s16(v22, v37));
      v48 = *v42;
      v49 = (uint8x8_t *)((char *)v42 + a2);
      v26 = (int16x4_t)vmovl_u8(v41).u64[0];
      v50 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(v43, v24, v30), v23, v29), v25, v33), v26, v34), vmul_s16(v22, v35)), vmul_s16(v27, v37));
      v51 = vmla_s16(v44, v24, v29);
      v52 = vmul_s16(v27, v35);
      v23 = v27;
      v27 = (int16x4_t)vmovl_u8(v48).u64[0];
      *(int16x4_t *)v53.i8 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v51, v25, v32), v26, v33), v27, v34), v52), vmul_s16(v28, v37));
      v54 = vmul_s16(v28, v35);
      v24 = v28;
      v28 = (int16x4_t)vmovl_u8(*v49).u64[0];
      v47.u64[1] = (unint64_t)v50;
      v53.u64[1] = (unint64_t)vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v45, v26, v32), v27, v33), v28, v34), v54), vmul_s16(v25, v37));
      v55 = (uint8x8_t)vqrshrun_n_s16(v47, 7uLL);
      v45.i32[0] = a3->i32[0];
      v45.i32[1] = *(__int32 *)((char *)a3->i32 + a4);
      v47.i32[0] = *(__int32 *)((char *)a3->i32 + 2 * a4);
      v47.i32[1] = *(__int32 *)((char *)a3->i32 + 3 * a4);
      v56 = vrhadd_u8(v55, (uint8x8_t)v45);
      *(uint8x8_t *)v53.i8 = vrhadd_u8((uint8x8_t)vqrshrun_n_s16(v53, 7uLL), *(uint8x8_t *)v47.i8);
      a3->i32[0] = v56.i32[0];
      *(__int32 *)((char *)a3->i32 + a4) = v56.i32[1];
      *(__int32 *)((char *)a3->i32 + 2 * a4) = v53.i32[0];
      *(__int32 *)((char *)a3->i32 + 3 * a4) = v53.i32[1];
      a3 = (uint8x8_t *)((char *)a3 + 4 * a4);
      v36 = (uint8x8_t *)((char *)v49 + a2);
      v11 -= 4;
    }
    while (v11);
  }
  else
  {
    v57 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 0);
    v58 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 1);
    v59 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 2);
    v60 = vdupq_laneq_s16(v13, 5);
    v61 = vdupq_laneq_s16(v13, 6);
    v62 = vdupq_laneq_s16(v13, 7);
    v63 = vdupq_lane_s16(*(int16x4_t *)v13.i8, 3);
    v64 = vdupq_laneq_s16(v13, 4);
    do
    {
      v65 = (uint8x8_t *)((char *)v14 + a2 + a2);
      v66 = *v65;
      v67 = (uint8x8_t *)((char *)v65 + a2);
      v68 = *v67;
      v69 = (uint8x8_t *)((char *)v67 + a2);
      v70 = *v69;
      v71 = (uint8x8_t *)((char *)v69 + a2);
      v72 = (int16x8_t)vmovl_u8(*v14);
      v73 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v14 + a2));
      v74 = (int16x8_t)vmovl_u8(v66);
      v75 = (int16x8_t)vmovl_u8(v68);
      v76 = (int16x8_t)vmovl_u8(v70);
      v77 = (int16x8_t)vmovl_u8(*v71);
      v78 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v71 + a2));
      v79 = (uint8x8_t *)((char *)v14 + 7 * a2);
      v80 = a3;
      v81 = a11;
      do
      {
        v82 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v77, v60), v78, v61), v74, v59), v73, v58), v72, v57);
        v72 = v76;
        v83 = *v79;
        v84 = (uint8x8_t *)((char *)v79 + a2);
        v85 = *v84;
        v86 = (uint64_t *)((char *)v84 + a2);
        v87 = vmlaq_s16(vmulq_s16(v78, v60), v75, v59);
        v88 = vmlaq_s16(vmulq_s16(v72, v59), v75, v58);
        v89 = vmlaq_s16(vmlaq_s16(vmulq_s16(v72, v58), v77, v59), v75, v57);
        v90 = (int16x8_t)vmovl_u8(v83);
        v91 = vqaddq_s16(vqaddq_s16(vmlaq_s16(v82, v62, v90), vmulq_s16(v75, v63)), vmulq_s16(v72, v64));
        v82.i64[0] = *v86;
        v92 = (uint8x8_t *)((char *)v86 + a2);
        v76 = (int16x8_t)vmovl_u8(v85);
        v93 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v87, v74, v58), v73, v57), v61, v90), v62, v76), vmulq_s16(v72, v63)), vmulq_s16(v77, v64));
        v94 = vmlaq_s16(v88, v74, v57);
        v95 = vmulq_s16(v77, v63);
        v73 = v77;
        v77 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v82.i8);
        v96 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v94, v60, v90), v61, v76), v62, v77), v95), vmulq_s16(v78, v64));
        v97 = vmulq_s16(v78, v63);
        v74 = v78;
        v78 = (int16x8_t)vmovl_u8(*v92);
        *(uint8x8_t *)v93.i8 = vrhadd_u8((uint8x8_t)vqrshrun_n_s16(v93, 7uLL), *(uint8x8_t *)((char *)v80 + a4));
        *(uint8x8_t *)v96.i8 = vrhadd_u8((uint8x8_t)vqrshrun_n_s16(v96, 7uLL), *(uint8x8_t *)((char *)v80 + 2 * a4));
        *(uint8x8_t *)v97.i8 = vrhadd_u8((uint8x8_t)vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v89, v60, v76), v61, v77), v62, v78), v97), vmulq_s16(v64, v90)), 7uLL), *(uint8x8_t *)((char *)v80 + 3 * a4));
        *v80 = vrhadd_u8((uint8x8_t)vqrshrun_n_s16(v91, 7uLL), *v80);
        *(uint8x8_t *)((char *)v80 + a4) = *(uint8x8_t *)v93.i8;
        *(uint8x8_t *)((char *)v80 + 2 * a4) = *(uint8x8_t *)v96.i8;
        *(uint8x8_t *)((char *)v80 + 3 * a4) = *(uint8x8_t *)v97.i8;
        v80 = (uint8x8_t *)((char *)v80 + 4 * a4);
        v79 = (uint8x8_t *)((char *)v92 + a2);
        v75 = v90;
        v81 -= 4;
      }
      while (v81);
      ++v14;
      ++a3;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

uint8x16_t vpx_convolve_avg_neon(uint8x16_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  int32x2_t v12;
  int32x2_t v13;
  uint8x8_t v14;
  uint8x16_t result;
  uint8x8_t v16;
  uint8x8_t v17;
  uint8x8_t v18;
  uint8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  uint8x16_t *v22;
  uint8x16_t v23;
  uint8x16_t v24;
  uint8x16_t v25;
  uint8x16_t *v26;
  uint8x16_t *v27;
  uint8x16_t v28;
  uint8x16_t v29;
  uint8x16_t v30;

  if (a10 > 7)
  {
    if (a10 == 8)
    {
      do
      {
        v16 = *(uint8x8_t *)a1->i8;
        v17 = *(uint8x8_t *)&a1->i8[a2];
        a1 = (uint8x16_t *)((char *)a1 + a2 + a2);
        v18 = *(uint8x8_t *)(a3 + a4);
        *(uint8x8_t *)a3 = vrhadd_u8(v16, *(uint8x8_t *)a3);
        *(uint8x8_t *)result.i8 = vrhadd_u8(v17, v18);
        *(_QWORD *)(a3 + a4) = result.i64[0];
        a3 += a4 + a4;
        a11 -= 2;
      }
      while (a11);
    }
    else if (a10 > 0x1F)
    {
      if (a10 == 32)
      {
        do
        {
          v22 = (uint8x16_t *)(a3 + a4);
          result = vrhaddq_u8(*a1, *(uint8x16_t *)a3);
          v23 = vrhaddq_u8(a1[1], *(uint8x16_t *)(a3 + 16));
          v24 = vrhaddq_u8(*(uint8x16_t *)((char *)a1 + a2), *(uint8x16_t *)(a3 + a4));
          v25 = vrhaddq_u8(*(uint8x16_t *)((char *)&a1[1] + a2), *(uint8x16_t *)(a3 + a4 + 16));
          *(uint8x16_t *)a3 = result;
          *(uint8x16_t *)(a3 + 16) = v23;
          *v22 = v24;
          v22[1] = v25;
          a3 += a4 + a4;
          a1 = (uint8x16_t *)((char *)a1 + a2 + a2);
          a11 -= 2;
        }
        while (a11);
      }
      else
      {
        v26 = a1 + 2;
        v27 = (uint8x16_t *)(a3 + 32);
        do
        {
          result = vrhaddq_u8(v26[-2], v27[-2]);
          v28 = vrhaddq_u8(v26[-1], v27[-1]);
          v29 = vrhaddq_u8(*v26, *v27);
          v30 = vrhaddq_u8(v26[1], v27[1]);
          v27[-2] = result;
          v27[-1] = v28;
          *v27 = v29;
          v27[1] = v30;
          v26 = (uint8x16_t *)((char *)v26 + a2);
          v27 = (uint8x16_t *)((char *)v27 + a4);
          --a11;
        }
        while (a11);
      }
    }
    else
    {
      do
      {
        v19 = *a1;
        v20 = *(uint8x16_t *)((char *)a1 + a2);
        a1 = (uint8x16_t *)((char *)a1 + a2 + a2);
        result = vrhaddq_u8(v19, *(uint8x16_t *)a3);
        v21 = vrhaddq_u8(v20, *(uint8x16_t *)(a3 + a4));
        *(uint8x16_t *)a3 = result;
        *(uint8x16_t *)(a3 + a4) = v21;
        a3 += a4 + a4;
        a11 -= 2;
      }
      while (a11);
    }
  }
  else
  {
    do
    {
      v12 = *(int32x2_t *)a1->i8;
      v13 = *(int32x2_t *)&a1->i8[a2];
      a1 = (uint8x16_t *)((char *)a1 + a2 + a2);
      v14 = (uint8x8_t)vzip1_s32(v12, v13);
      v13.i32[0] = *(_DWORD *)a3;
      v13.i32[1] = *(_DWORD *)(a3 + a4);
      *(uint8x8_t *)result.i8 = vrhadd_u8(v14, (uint8x8_t)v13);
      *(_DWORD *)a3 = result.i32[0];
      *(_DWORD *)(a3 + a4) = result.i32[1];
      a3 += a4 + a4;
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

__n128 vpx_convolve_copy_neon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __n128 *v19;
  __n128 *v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;

  if (a10 > 7)
  {
    if (a10 == 8)
    {
      do
      {
        result.n128_u64[0] = *(_QWORD *)a1;
        v13 = *(_QWORD *)(a1 + a2);
        a1 += a2 + a2;
        *(_QWORD *)a3 = result.n128_u64[0];
        *(_QWORD *)(a3 + a4) = v13;
        a3 += a4 + a4;
        a11 -= 2;
      }
      while (a11);
    }
    else if (a10 > 0x1F)
    {
      if (a10 == 32)
      {
        do
        {
          result = *(__n128 *)a1;
          v15 = *(_OWORD *)(a1 + 16);
          v16 = *(_OWORD *)(a1 + a2);
          v17 = *(_OWORD *)(a1 + a2 + 16);
          *(_OWORD *)a3 = *(_OWORD *)a1;
          *(_OWORD *)(a3 + 16) = v15;
          v18 = (_OWORD *)(a3 + a4);
          *v18 = v16;
          v18[1] = v17;
          a3 += a4 + a4;
          a1 += a2 + a2;
          a11 -= 2;
        }
        while (a11);
      }
      else
      {
        v19 = (__n128 *)(a1 + 32);
        v20 = (__n128 *)(a3 + 32);
        do
        {
          result = v19[-2];
          v21 = v19[-1];
          v22 = *v19;
          v23 = v19[1];
          v20[-2] = result;
          v20[-1] = v21;
          *v20 = v22;
          v20[1] = v23;
          v19 = (__n128 *)((char *)v19 + a2);
          v20 = (__n128 *)((char *)v20 + a4);
          --a11;
        }
        while (a11);
      }
    }
    else
    {
      do
      {
        result = *(__n128 *)a1;
        v14 = *(_OWORD *)(a1 + a2);
        a1 += a2 + a2;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + a4) = v14;
        a3 += a4 + a4;
        a11 -= 2;
      }
      while (a11);
    }
  }
  else
  {
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)a1;
      *(_DWORD *)(a3 + a4) = *(_DWORD *)(a1 + a2);
      a1 += a2 + a2;
      a3 += a4 + a4;
      a11 -= 2;
    }
    while (a11);
  }
  return result;
}

__int32 *vpx_convolve8_neon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int8x8_t *v22;
  int8x8_t *v23;
  unsigned __int16 *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v11 = MEMORY[0x24BDAC7A8](a1, a2);
  v17 = v16;
  v18 = v15;
  v19 = v14;
  v20 = v13;
  v28 = v21;
  v23 = v22;
  STACK[0x1238] = *MEMORY[0x24BDAC8D0];
  v24 = (unsigned __int16 *)(v13 + 16 * (int)v16);
  if (v24[7] | *v24 || v24[6] | v24[1])
    v25 = 8;
  else
    v25 = 4;
  v26 = (v25 >> 1) - 1;
  vpx_convolve8_horiz_neon((__int32 *)(v11 - v26 * v12), v12, &v29, 64, v13, v14, v15, v16, a9, a10, v25 + a11);
  return vpx_convolve8_vert_neon((__int32 *)&v29 + 16 * v26, 64, v23, v28, v20, v19, v18, v17, a9, a10, a11);
}

uint64_t vpx_convolve8_avg_neon(uint64_t a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, ...)
{
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8x8_t *v30;
  uint8x8_t *v31;
  uint64_t v32;
  uint64_t v34;
  va_list va;

  va_start(va, a19);
  v19 = MEMORY[0x24BDAC7A8](a1, a2);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  STACK[0x1238] = *MEMORY[0x24BDAC8D0];
  vpx_convolve8_horiz_neon((__int32 *)(v19 - 3 * v32), v32, &v34, 64, v26, v24, v22, v20, a3, a4, a5 + 8);
  return vpx_convolve8_avg_vert_neon((uint64_t)va, 64, v31, v29, v27, v25, v23, v21, a3, a4, a5);
}

uint64_t vpx_codec_dec_init_ver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  if (a5 != 12)
  {
    v6 = 3;
    goto LABEL_9;
  }
  v6 = 8;
  if (!a1 || !a2)
  {
LABEL_9:
    if (!a1)
      return v6;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 8) != 5)
  {
    v6 = 3;
    goto LABEL_12;
  }
  if ((a4 & 0x10000) != 0 && (*(_BYTE *)(a2 + 18) & 4) == 0)
  {
    *(_DWORD *)(a1 + 16) = 4;
    return 4;
  }
  v8 = *(_QWORD *)(a2 + 16);
  if ((a4 & 0x20000) != 0 && (v8 & 0x80000) == 0)
  {
    *(_DWORD *)(a1 + 16) = 4;
    return 4;
  }
  v6 = 4;
  if ((((v8 & 0x100000) == 0) & (a4 >> 18)) != 0)
    goto LABEL_12;
  if ((v8 & 1) == 0)
    goto LABEL_12;
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a3;
  v6 = (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 24))(a1, 0);
  if (!(_DWORD)v6)
  {
LABEL_12:
    *(_DWORD *)(a1 + 16) = v6;
    return v6;
  }
  v9 = *(_QWORD **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 24) = *v9;
    v10 = *(_QWORD *)(a1 + 8);
    if (v10)
    {
      (*(void (**)(void))(v10 + 32))();
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = v6;
      return v6;
    }
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = v6;
  return v6;
}

uint64_t setup_rtcd_internal_1()
{
  uint64_t result;

  result = arm_cpu_caps();
  vpx_convolve8 = (uint64_t)vpx_convolve8_neon;
  vpx_convolve8_avg = (uint64_t)vpx_convolve8_avg_neon;
  vpx_convolve8_avg_horiz = (uint64_t)vpx_convolve8_avg_horiz_neon;
  vpx_convolve8_avg_vert = (uint64_t)vpx_convolve8_avg_vert_neon;
  vpx_convolve8_horiz = (uint64_t)vpx_convolve8_horiz_neon;
  vpx_convolve8_vert = (uint64_t)vpx_convolve8_vert_neon;
  vpx_get16x16var = vpx_get16x16var_neon;
  vpx_get4x4sse_cs = vpx_get4x4sse_cs_neon;
  vpx_get8x8var = vpx_get8x8var_neon;
  vpx_mse16x16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_mse16x16_neon;
  vpx_sad16x16 = (uint64_t)vpx_sad16x16_neon;
  vpx_sad16x16_avg = (uint64_t)vpx_sad16x16_avg_neon;
  vpx_sad16x16x4d = (uint64_t)vpx_sad16x16x4d_neon;
  vpx_sad16x32 = (uint64_t)vpx_sad16x32_neon;
  vpx_sad16x32_avg = (uint64_t)vpx_sad16x32_avg_neon;
  vpx_sad16x32x4d = (uint64_t)vpx_sad16x32x4d_neon;
  vpx_sad16x8 = (uint64_t)vpx_sad16x8_neon;
  vpx_sad16x8_avg = (uint64_t)vpx_sad16x8_avg_neon;
  vpx_sad16x8x4d = (uint64_t)vpx_sad16x8x4d_neon;
  vpx_sad32x16 = (uint64_t)vpx_sad32x16_neon;
  vpx_sad32x16_avg = (uint64_t)vpx_sad32x16_avg_neon;
  vpx_sad32x16x4d = (uint64_t)vpx_sad32x16x4d_neon;
  vpx_sad32x32 = (uint64_t)vpx_sad32x32_neon;
  vpx_sad32x32_avg = (uint64_t)vpx_sad32x32_avg_neon;
  vpx_sad32x32x4d = (uint64_t)vpx_sad32x32x4d_neon;
  vpx_sad32x64 = (uint64_t)vpx_sad32x64_neon;
  vpx_sad32x64_avg = (uint64_t)vpx_sad32x64_avg_neon;
  vpx_sad32x64x4d = (uint64_t)vpx_sad32x64x4d_neon;
  vpx_sad64x32 = (uint64_t)vpx_sad64x32_neon;
  vpx_sad64x32_avg = (uint64_t)vpx_sad64x32_avg_neon;
  vpx_sad64x32x4d = (uint64_t)vpx_sad64x32x4d_neon;
  vpx_sad64x64 = (uint64_t)vpx_sad64x64_neon;
  vpx_sad64x64_avg = (uint64_t)vpx_sad64x64_avg_neon;
  vpx_sad64x64x4d = (uint64_t)vpx_sad64x64x4d_neon;
  vpx_sad_skip_16x16 = (uint64_t)vpx_sad_skip_16x16_neon;
  vpx_sad_skip_16x16x4d = (uint64_t)vpx_sad_skip_16x16x4d_neon;
  vpx_sad_skip_16x32 = (uint64_t)vpx_sad_skip_16x32_neon;
  vpx_sad_skip_16x32x4d = (uint64_t)vpx_sad_skip_16x32x4d_neon;
  vpx_sad_skip_16x8 = (uint64_t)vpx_sad_skip_16x8_neon;
  vpx_sad_skip_16x8x4d = (uint64_t)vpx_sad_skip_16x8x4d_neon;
  vpx_sad_skip_32x16 = (uint64_t)vpx_sad_skip_32x16_neon;
  vpx_sad_skip_32x16x4d = (uint64_t)vpx_sad_skip_32x16x4d_neon;
  vpx_sad_skip_32x32 = (uint64_t)vpx_sad_skip_32x32_neon;
  vpx_sad_skip_32x32x4d = (uint64_t)vpx_sad_skip_32x32x4d_neon;
  vpx_sad_skip_32x64 = (uint64_t)vpx_sad_skip_32x64_neon;
  vpx_sad_skip_32x64x4d = (uint64_t)vpx_sad_skip_32x64x4d_neon;
  vpx_sad_skip_64x32 = (uint64_t)vpx_sad_skip_64x32_neon;
  vpx_sad_skip_64x32x4d = (uint64_t)vpx_sad_skip_64x32x4d_neon;
  vpx_sad_skip_64x64 = (uint64_t)vpx_sad_skip_64x64_neon;
  vpx_sad_skip_64x64x4d = (uint64_t)vpx_sad_skip_64x64x4d_neon;
  vpx_sse = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_sse_neon;
  vpx_variance16x16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance16x16_neon;
  vpx_variance16x32 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance16x32_neon;
  vpx_variance16x8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance16x8_neon;
  vpx_variance32x16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance32x16_neon;
  vpx_variance32x32 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance32x32_neon;
  vpx_variance32x64 = (uint64_t (*)(_QWORD))vpx_variance32x64_neon;
  vpx_variance4x4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance4x4_neon;
  vpx_variance4x8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance4x8_neon;
  vpx_variance64x32 = (uint64_t (*)(_QWORD))vpx_variance64x32_neon;
  vpx_variance64x64 = (uint64_t (*)(_QWORD))vpx_variance64x64_neon;
  vpx_variance8x16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance8x16_neon;
  vpx_variance8x4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance8x4_neon;
  vpx_variance8x8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))vpx_variance8x8_neon;
  return result;
}

uint64_t vpx_codec_enc_init_multi_ver(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, int *a6, int a7)
{
  _QWORD *v7;
  uint64_t v8;
  unsigned int v12;
  uint64_t v13;
  uint64_t (*v17)(uint64_t, void **);
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  int *v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  int v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  void *v40;
  void *v41;

  v7 = a1;
  if (a7 != 36)
  {
    v8 = 3;
    goto LABEL_14;
  }
  v8 = 8;
  if (!a1 || !a2 || !a3 || (v12 = a4 - 1, a4 - 1 > 0xF))
  {
LABEL_14:
    if (!a1)
      return v8;
    goto LABEL_17;
  }
  if (*(_DWORD *)(a2 + 8) != 5)
  {
    v8 = 3;
    goto LABEL_17;
  }
  v13 = *(_QWORD *)(a2 + 16);
  if ((v13 & 2) == 0 || (a5 & 0x10000) != 0 && (v13 & 0x10000) == 0 || (a5 & 0x20000) != 0 && (v13 & 0x20000) == 0)
  {
    v8 = 4;
LABEL_17:
    *((_DWORD *)v7 + 4) = v8;
    return v8;
  }
  v41 = 0;
  v17 = *(uint64_t (**)(uint64_t, void **))(a2 + 144);
  if (!v17)
    return 4;
  v18 = v17(a3, &v41);
  if ((_DWORD)v18)
  {
    v8 = v18;
    goto LABEL_17;
  }
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v19 = *a6;
  if ((*a6 - 4097) >= 0xFFFFF000)
  {
    v20 = 0;
    v24 = a6[1];
    v21 = 1;
    if (v24 >= 1 && v24 <= v19)
    {
      v40 = v41;
      v38 = __PAIR64__(v12, a4);
      v39 = __PAIR64__(v24, v19);
      v7[1] = a2;
      *v7 = *(_QWORD *)a2;
      v7[5] = a3;
      v7[6] = 0;
      v7[4] = a5;
      v25 = (*(uint64_t (**)(_QWORD *, unint64_t *))(a2 + 24))(v7, &v38);
      if (!(_DWORD)v25)
      {
        if (a4 == 1)
        {
          v8 = 0;
          goto LABEL_17;
        }
        v30 = 0;
        v31 = a6 + 3;
        v32 = a3 + 504;
        v33 = v7 + 13;
        while (1)
        {
          v7 = v33 - 6;
          v38 = 0;
          v39 = 0;
          v40 = 0;
          v34 = *(v31 - 1);
          if ((v34 - 4097) < 0xFFFFF000
            || ((v35 = *v31, *v31 >= 1) ? (v36 = v35 <= v34) : (v36 = 0), !v36))
          {
            v8 = 8;
            goto LABEL_57;
          }
          v40 = v41;
          LODWORD(v38) = a4;
          HIDWORD(v38) = a4 - 2 + v30;
          v39 = __PAIR64__(v35, v34);
          *(v33 - 5) = a2;
          *(v33 - 6) = *(_QWORD *)a2;
          *(v33 - 1) = v32;
          *v33 = 0;
          *(v33 - 2) = a5;
          v37 = (*(uint64_t (**)(_QWORD *, unint64_t *))(a2 + 24))(v33 - 6, &v38);
          if ((_DWORD)v37)
            break;
          v31 += 2;
          --v30;
          v32 += 504;
          v33 += 7;
          if (1 - a4 == v30)
          {
            v8 = 0;
            v7 = v33 - 13;
            goto LABEL_17;
          }
        }
        v8 = v37;
LABEL_57:
        v21 = 0;
        v20 = 1 - v30;
        v22 = (uint64_t *)v7[6];
        if (!v22)
          goto LABEL_25;
        goto LABEL_31;
      }
      v8 = v25;
      v20 = 0;
    }
    v22 = (uint64_t *)v7[6];
    if (!v22)
      goto LABEL_25;
  }
  else
  {
    v20 = 0;
    v21 = 1;
    v22 = (uint64_t *)v7[6];
    if (!v22)
    {
LABEL_25:
      v23 = 0;
      v7[3] = 0;
LABEL_33:
      v27 = 1;
      goto LABEL_34;
    }
  }
LABEL_31:
  v23 = *v22;
  v7[3] = *v22;
  v26 = v7[1];
  if (!v26)
    goto LABEL_33;
  (*(void (**)(void))(v26 + 32))();
  v27 = 0;
  v7[6] = 0;
  *v7 = 0;
  v7[1] = 0;
LABEL_34:
  *((_DWORD *)v7 + 4) = v27;
  if (v20)
  {
    do
    {
      while (1)
      {
        v28 = v7 - 7;
        *(v7 - 4) = v23;
        v29 = *(v7 - 6);
        if (v29)
        {
          if (*(v7 - 1))
            break;
        }
        *((_DWORD *)v7 - 10) = 1;
        v7 -= 7;
        if (!--v20)
          goto LABEL_40;
      }
      (*(void (**)(void))(v29 + 32))();
      *(v7 - 1) = 0;
      *v28 = 0;
      *(v7 - 6) = 0;
      *((_DWORD *)v7 - 10) = 0;
      v7 -= 7;
      --v20;
    }
    while (v20);
  }
  else
  {
    v28 = v7;
  }
LABEL_40:
  if (v21)
  {
    free(*((void **)v41 + 7));
    free(v41);
  }
  *((_DWORD *)v28 + 4) = v8;
  return v8;
}

uint64_t vpx_codec_get_cx_data(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (!a1)
    return 0;
  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3 && *(_QWORD *)(a1 + 48))
    {
      if ((*(_BYTE *)(v3 + 16) & 2) == 0)
      {
        v4 = 0;
        *(_DWORD *)(a1 + 16) = 4;
        return v4;
      }
      v6 = (*(uint64_t (**)(void))(v3 + 112))();
      v4 = v6;
      if (!v6 || *(_DWORD *)v6)
        return v4;
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(char **)(v7 + 48);
      if (v8)
      {
        v9 = *(char **)(v6 + 8);
        if (v9 != v8)
        {
          v10 = *(_QWORD *)(v6 + 16);
          v11 = *(unsigned int *)(v7 + 64);
          if (v10 + v11 + *(unsigned int *)(v7 + 68) <= *(_QWORD *)(v7 + 56))
          {
            memcpy(&v8[v11], v9, v10);
            *(_OWORD *)(v7 + 72) = *(_OWORD *)v4;
            v12 = *(_OWORD *)(v4 + 16);
            v13 = *(_OWORD *)(v4 + 32);
            v14 = *(_OWORD *)(v4 + 48);
            *(_OWORD *)(v7 + 136) = *(_OWORD *)(v4 + 64);
            *(_OWORD *)(v7 + 120) = v14;
            *(_OWORD *)(v7 + 104) = v13;
            *(_OWORD *)(v7 + 88) = v12;
            v15 = *(_OWORD *)(v4 + 80);
            v16 = *(_OWORD *)(v4 + 96);
            v17 = *(_OWORD *)(v4 + 112);
            *(_QWORD *)(v7 + 200) = *(_QWORD *)(v4 + 128);
            *(_OWORD *)(v7 + 184) = v17;
            *(_OWORD *)(v7 + 168) = v16;
            *(_OWORD *)(v7 + 152) = v15;
            v18 = *(_QWORD *)(v7 + 88) + (*(_DWORD *)(v7 + 68) + *(_DWORD *)(v7 + 64));
            *(_QWORD *)(v7 + 80) = v8;
            *(_QWORD *)(v7 + 88) = v18;
            v4 = v7 + 72;
          }
        }
      }
      if (v8 != *(char **)(v4 + 8))
        return v4;
      *(_QWORD *)(v7 + 48) = &v8[*(_QWORD *)(v4 + 16)];
      *(_QWORD *)(v7 + 56) -= *(_QWORD *)(v4 + 16);
      return v4;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = 1;
      return 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 8;
    return 0;
  }
}

int *img_alloc_helper(int *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  uint64_t v7;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;

  v7 = a7;
  v11 = a1;
  if (a1)
  {
    *((_QWORD *)a1 + 16) = 0;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  if (!a2
    || a3 > 0x8000000
    || a4 > 0x8000000
    || a5 > 0x10000
    || a6 > 0x10000
    || (a5 <= 1 ? (v12 = 1) : (v12 = a5),
        (v12 & ((_DWORD)v12 - 1)) != 0
     || (a6 <= 1 ? (v13 = 1) : (v13 = a6), (v13 & ((_DWORD)v13 - 1)) != 0)))
  {
LABEL_45:
    if (a1)
    {
      v7 = *((_QWORD *)a1 + 14);
      if (v7)
      {
LABEL_47:
        if (v11[30])
          free(*(void **)(v7 - 8));
      }
LABEL_49:
      if (v11[31])
        free(v11);
      return 0;
    }
  }
  else
  {
    v14 = 24;
    v15 = 12;
    v16 = a2 - 258;
    switch(a2)
    {
      case 258:
      case 265:
        goto LABEL_22;
      case 259:
      case 260:
      case 261:
      case 263:
      case 264:
LABEL_21:
        v15 = 16;
LABEL_22:
        v17 = 1;
        v14 = v15;
        if (a2 <= 768)
        {
          if (a2 != 258 && a2 != 261)
            goto LABEL_31;
        }
        else if (a2 != 769 && a2 != 2306 && a2 != 2309)
        {
LABEL_31:
          v17 = 0;
        }
        v18 = 1;
        if (a2 > 768)
        {
          if (a2 != 769 && a2 != 2306 && a2 != 2311)
            goto LABEL_39;
        }
        else if (v16 > 7 || ((1 << v16) & 0xA1) == 0)
        {
LABEL_39:
          v18 = 0;
        }
LABEL_40:
        v19 = a4;
        v20 = a3;
        if (!a7)
        {
          v20 = (~(-1 << v17) + a3) & (-1 << v17);
          v19 = (~(-1 << v18) + a4) & (-1 << v18);
        }
        v21 = v20;
        if ((a2 & 0x100) == 0)
          v21 = (v20 * (unint64_t)v14) >> 3;
        v22 = (a2 >> 11) & 1;
        v23 = (v13 + (v21 << ((a2 & 0x800) != 0)) - 1) & -v13;
        if (v23 >> 31)
          goto LABEL_45;
        if (a1)
          goto LABEL_56;
        v36 = v18;
        v37 = v17;
        v38 = v14;
        v25 = (int *)malloc_type_calloc(1uLL, 0x88uLL, 0x109004025C8DFD4uLL);
        v11 = v25;
        if (!v25)
          return v11;
        v25[31] = 1;
        v17 = v37;
        v14 = v38;
        v18 = v36;
LABEL_56:
        *((_QWORD *)v11 + 14) = v7;
        if (!v7)
        {
          v26 = (a2 & 0x100) != 0 ? ((v23 >> v22) * v19 * v14) >> 3 : (v23 >> v22) * v19;
          v27 = v12;
          v28 = v14;
          v29 = v17;
          v30 = v18;
          v31 = vpx_memalign(v27, v26);
          v18 = v30;
          v17 = v29;
          v14 = v28;
          v7 = v31;
          *((_QWORD *)v11 + 14) = v31;
          v11[30] = 1;
          if (!v31)
            goto LABEL_49;
        }
        *v11 = a2;
        if ((a2 & 0x800) != 0)
          v32 = 16;
        else
          v32 = 8;
        v11[4] = v19;
        v11[5] = v32;
        v11[3] = v20;
        v11[10] = v17;
        v11[11] = v18;
        v11[23] = v23;
        v11[24] = v14;
        v11[21] = v23 >> v17;
        v11[22] = v23 >> v17;
        v11[20] = v23;
        if (v20 < a3 || v19 < a4)
          goto LABEL_47;
        v11[6] = a3;
        v11[7] = a4;
        if ((a2 & 0x100) == 0)
        {
          *((_QWORD *)v11 + 6) = v7;
          return v11;
        }
        if ((a2 & 0x400) != 0)
        {
          *((_QWORD *)v11 + 9) = v7;
          v35 = v23 * v19;
          *((_QWORD *)v11 + 6) = v7 + v35;
          v33 = v7 + v35 + v35;
        }
        else
        {
          *((_QWORD *)v11 + 6) = v7;
          v33 = v7 + v23 * v19;
          if (a2 == 265)
          {
            v34 = v33 + 1;
LABEL_73:
            *((_QWORD *)v11 + 7) = v33;
            *((_QWORD *)v11 + 8) = v34;
            return v11;
          }
        }
        v34 = v33 + (v23 >> v17) * (unint64_t)(v19 >> v18);
        if ((a2 & 0x200) == 0)
          goto LABEL_73;
        *((_QWORD *)v11 + 7) = v34;
        *((_QWORD *)v11 + 8) = v33;
        break;
      case 262:
        goto LABEL_31;
      default:
        v17 = 1;
        v18 = 1;
        switch(a2)
        {
          case 2306:
            goto LABEL_40;
          case 2307:
          case 2308:
            goto LABEL_21;
          case 2309:
          case 2311:
            v15 = 32;
            goto LABEL_22;
          case 2310:
            v14 = 48;
            goto LABEL_31;
          default:
            if (a2 != 769)
              goto LABEL_21;
            goto LABEL_22;
        }
        goto LABEL_40;
    }
  }
  return v11;
}

uint64_t vpx_memalign(uint64_t a1, uint64_t a2)
{
  size_t v3;
  void *v4;

  v3 = a1 + a2 + 7;
  if (v3 > 0x10000000000)
    return 0;
  v4 = malloc_type_malloc(v3, 0x74AD08B5uLL);
  if (!v4)
    return 0;
  *(_QWORD *)((((unint64_t)v4 + a1 + 7) & -a1) - 8) = v4;
  return ((unint64_t)v4 + a1 + 7) & -a1;
}

unint64_t vpx_malloc(uint64_t a1)
{
  size_t v1;
  unint64_t result;
  unint64_t v3;

  v1 = a1 + 23;
  if (v1 > 0x10000000000)
    return 0;
  result = (unint64_t)malloc_type_malloc(v1, 0x74AD08B5uLL);
  if (result)
  {
    v3 = result;
    result = (result + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(result - 8) = v3;
  }
  return result;
}

unint64_t vpx_calloc(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  size_t v3;
  size_t v4;
  void *v5;

  if (a1 && 0x10000000000 / a1 < a2)
    return 0;
  v3 = a2 * a1;
  v4 = a2 * a1 + 23;
  if (v4 <= 0x10000000000)
  {
    v5 = malloc_type_malloc(v4, 0x74AD08B5uLL);
    if (v5)
    {
      v2 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v2 - 8) = v5;
      if (v2)
      {
        bzero((void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF0), v3);
        return v2;
      }
      return v2;
    }
  }
  return 0;
}

void *vpx_scale_frame(uint64_t a1, int *a2, char *a3, unsigned __int8 a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9)
{
  int v14;
  int v15;
  int v16;
  int v17;
  int v19;
  int v20;
  signed int v21;
  int v22;
  signed int v23;
  unsigned int v24;
  int v25;
  int i;
  int v27;
  void *result;
  int v29;
  int j;
  int v31;
  unsigned __int8 v34;

  v14 = *(_DWORD *)(a1 + 4);
  v15 = (a5 + *(_DWORD *)a1 * a6 - 1) / a5;
  v16 = (a7 + v14 * a8 - 1) / a7;
  v34 = a4;
  Scale2D(*(char **)(a1 + 56), *(_DWORD *)(a1 + 16), *(_DWORD *)a1, v14, *((_BYTE **)a2 + 7), a2[4], v15, v16, a3, a4, a5, a6, a7, a8, a9);
  v17 = v16 - 1;
  if (v16 >= 1 && v15 < *a2)
  {
    v19 = 0;
    do
    {
      memset((void *)(*((_QWORD *)a2 + 7) + a2[4] * (uint64_t)v19 + v15 - 1), *(unsigned __int8 *)(*((_QWORD *)a2 + 7) + v15 - 2 + a2[4] * v19), *a2 - v15 + 1);
      ++v19;
    }
    while (v16 != v19);
  }
  if (v16 < a2[1])
  {
    do
      memcpy((void *)(*((_QWORD *)a2 + 7) + a2[4] * v17++), (const void *)(*((_QWORD *)a2 + 7) + a2[4] * (v16 - 2)), *a2 + 1);
    while (v17 < a2[1]);
  }
  if (v15 >= 0)
    v20 = v15;
  else
    v20 = v15 + 1;
  v21 = v20 >> 1;
  if (v16 >= 0)
    v22 = v16;
  else
    v22 = v16 + 1;
  v23 = v22 >> 1;
  v24 = a6;
  Scale2D(*(char **)(a1 + 64), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *((_BYTE **)a2 + 8), a2[9], v21, v22 >> 1, a3, v34, a5, a6, a7, a8, a9);
  v25 = a2[6];
  if (v21 < a2[5] && v25 >= 1)
  {
    for (i = 0; i < v25; ++i)
    {
      memset((void *)(*((_QWORD *)a2 + 8) + a2[9] * (uint64_t)i + v21 - 1), *(unsigned __int8 *)(*((_QWORD *)a2 + 8) + v21 - 2 + a2[9] * i), a2[5] - v21 + 1);
      v25 = a2[6];
    }
    v24 = a6;
  }
  if (v23 < v25 && v23 <= a2[1] / 2)
  {
    v27 = v23 - 1;
    do
      memcpy((void *)(*((_QWORD *)a2 + 8) + a2[9] * (uint64_t)v27++), (const void *)(*((_QWORD *)a2 + 8) + a2[9] * (uint64_t)(v23 - 2)), a2[5]);
    while (v27 < a2[1] / 2);
  }
  result = Scale2D(*(char **)(a1 + 72), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 20), *(_DWORD *)(a1 + 24), *((_BYTE **)a2 + 9), a2[9], v21, v23, a3, v34, a5, v24, a7, a8, a9);
  v29 = a2[6];
  if (v21 < a2[5] && v29 >= 1)
  {
    for (j = 0; j < v29; ++j)
    {
      result = memset((void *)(*((_QWORD *)a2 + 9) + a2[9] * (uint64_t)j + v21 - 1), *(unsigned __int8 *)(*((_QWORD *)a2 + 9) + v21 - 2 + a2[9] * j), a2[5] - v21 + 1);
      v29 = a2[6];
    }
  }
  if (v23 < v29 && v23 <= a2[1] / 2)
  {
    v31 = v23 - 1;
    do
      result = memcpy((void *)(*((_QWORD *)a2 + 9) + a2[9] * (uint64_t)v31++), (const void *)(*((_QWORD *)a2 + 9) + a2[9] * (uint64_t)(v23 - 2)), a2[5]);
    while (v31 < a2[1] / 2);
  }
  return result;
}

char *Scale2D(char *result, int a2, unsigned int a3, int a4, _BYTE *a5, uint64_t a6, unsigned int a7, unsigned int a8, char *a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, unsigned int a13, unsigned int a14, int a15)
{
  int v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  uint64_t (*v20)(uint64_t, unsigned int, _BYTE *);
  unsigned int v21;
  int v22;
  int v23;
  unint64_t (*v24)(unint64_t, unsigned int, unint64_t, unsigned int, unsigned int);
  _BYTE *v25;
  uint64_t v27;
  void *v29;
  void *v30;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  signed int v35;
  int v36;
  unsigned int v38;
  char *v39;
  unint64_t v41;
  int v42;
  int v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, _QWORD, _QWORD);
  uint64_t v71;
  char *__src;
  uint64_t __srca;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  char v84;
  void (*v85)(unint64_t, uint64_t, _QWORD, _QWORD, char *, uint64_t, _QWORD, _QWORD);
  unint64_t (*v87)(unint64_t, unsigned int, unint64_t, unsigned int, unsigned int);
  _BOOL4 v88;
  uint64_t v89;
  int v90;

  v16 = a4;
  v17 = (unint64_t)result;
  v18 = 10 * a12 / a11;
  switch(v18)
  {
    case 5u:
      v19 = 0;
      v20 = (uint64_t (*)(uint64_t, unsigned int, _BYTE *))vp8_horizontal_line_2_1_scale_c;
      break;
    case 8u:
      v19 = 0;
      v20 = vp8_horizontal_line_5_4_scale_c;
      break;
    case 6u:
      v19 = 0;
      v20 = vp8_horizontal_line_5_3_scale_c;
      break;
    default:
      v20 = 0;
      v19 = 1;
      break;
  }
  v21 = 10 * a14 / a13;
  if (v21 == 5)
  {
    v88 = a15 == 0;
    v24 = (unint64_t (*)(unint64_t, unsigned int, unint64_t, unsigned int, unsigned int))vp8_vertical_band_2_1_scale_c;
    if (!a15)
      v24 = (unint64_t (*)(unint64_t, unsigned int, unint64_t, unsigned int, unsigned int))vp8_vertical_band_2_1_scale_i_c;
    v87 = v24;
    v22 = 2;
    v23 = 1;
    v84 = 1;
    if ((v19 & 1) != 0)
      goto LABEL_22;
  }
  else if (v21 == 8)
  {
    v84 = 0;
    v88 = 0;
    v87 = vp8_vertical_band_5_4_scale_c;
    v22 = 5;
    v23 = 4;
    if ((v19 & 1) != 0)
      goto LABEL_22;
  }
  else if (v21 != 6 || (v84 = 0, v88 = 0, v87 = vp8_vertical_band_5_3_scale_c, v22 = 5, v23 = 3, (v19 & 1) != 0))
  {
LABEL_22:
    if (a12 == 1 && a11 == 2)
      v29 = scale1d_2t1_ps;
    else
      v29 = scale1d_c;
    if (a15)
      v30 = scale1d_2t1_ps;
    else
      v30 = scale1d_2t1_i;
    if (a14 != 1 || a13 != 2)
      v30 = scale1d_c;
    if (a4 == a8)
    {
      if (a4 >= 1)
      {
        v32 = a5;
        v33 = a3 + 1;
        v34 = a2;
        do
        {
          result = (char *)((uint64_t (*)(unint64_t, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, _QWORD, _QWORD))v29)(v17, 1, a11, v33, v32, 1, a12, a7);
          v17 += v34;
          v32 += (int)a6;
          --v16;
        }
        while (v16);
      }
    }
    else
    {
      v35 = a10 - 1;
      v70 = (void (*)(char *, uint64_t, _QWORD, uint64_t, _BYTE *, uint64_t, _QWORD, _QWORD))v30;
      v36 = a2;
      if (a8 <= a4)
      {
        v38 = v35 * a14 / a13;
      }
      else
      {
        v38 = a10 - 1;
        v35 = v35 * a4 / a8;
      }
      v67 = a3 + 1;
      result = (char *)((uint64_t (*)(char *, uint64_t))v29)(result, 1);
      v74 = (a8 + v38 - 1) / v38;
      if ((int)v74 >= 1)
      {
        v44 = a5;
        __src = &a9[v35 * (uint64_t)(int)a6];
        v68 = (int)v38 * (uint64_t)(int)a6;
        v69 = (v35 + 1);
        if (v35 < 1)
        {
          if ((int)a7 <= 0)
          {
            do
            {
              result = (char *)memcpy(a9, __src, (int)a6);
              LODWORD(v74) = v74 - 1;
            }
            while ((_DWORD)v74);
          }
          else
          {
            v63 = 0;
            do
            {
              v83 = v44;
              v90 = v63;
              v64 = 0;
              do
              {
                v70(&a9[v64], a6, a13, v69, &v83[v64], a6, a14, v38);
                ++v64;
              }
              while (a7 != v64);
              result = (char *)memcpy(a9, __src, (int)a6);
              v44 = &v83[v68];
              v63 = v90 + 1;
            }
            while (v90 + 1 != (_DWORD)v74);
          }
        }
        else
        {
          v45 = 0;
          v89 = v16;
          v46 = v36;
          v65 = v35 * (uint64_t)v36;
          v47 = a7;
          v48 = v17 + v36;
          v49 = 1;
          v50 = v44;
          v85 = (void (*)(unint64_t, uint64_t, _QWORD, _QWORD, char *, uint64_t, _QWORD, _QWORD))v29;
          v66 = v46;
          do
          {
            v78 = v45;
            v81 = v50;
            v75 = v49;
            v77 = v48;
            v51 = a9;
            v52 = (v35 + 1) - 1;
            do
            {
              v53 = v47;
              if (v49 >= v89)
                memcpy(&v51[(int)a6], v51, (int)a6);
              else
                v85(v48, 1, a11, v67, &v51[(int)a6], 1, a12, a7);
              v51 += (int)a6;
              v48 += v46;
              ++v49;
              --v52;
              v47 = v53;
            }
            while (v52);
            if ((int)a7 >= 1)
            {
              v54 = 0;
              do
              {
                v70(&a9[v54], a6, a13, v69, &v81[v54], a6, a14, v38);
                ++v54;
              }
              while (a7 != v54);
            }
            result = (char *)memcpy(a9, __src, (int)a6);
            v50 = &v81[v68];
            v45 = v78 + 1;
            v46 = v66;
            v48 = v77 + v65;
            v49 = v75 + v35;
            v47 = a7;
          }
          while (v78 + 1 != v74);
        }
      }
    }
    return result;
  }
  if (a4 == a8)
  {
    if (a4 >= 1)
    {
      v25 = a5;
      v27 = a2;
      do
      {
        result = (char *)v20(v17, a3, v25);
        v17 += v27;
        v25 += (int)a6;
        --v16;
      }
      while (v16);
    }
    return result;
  }
  v39 = &result[((a4 - 1) * a2) & (a2 >> 31)];
  if (!v88)
  {
    v41 = (unint64_t)a5;
    v43 = (int)(a8 + v23 - 1) / v23;
    if (v43 < 1)
      return result;
    goto LABEL_63;
  }
  v41 = (unint64_t)a5;
  if (v39 > result)
    v17 = (unint64_t)&result[((a4 - 1) * a2) & (a2 >> 31)];
  v42 = a2;
  result = (char *)v20(v17, a3, a9);
  a2 = v42;
  v43 = (int)(a8 + v23 - 1) / v23;
  if (v43 >= 1)
  {
LABEL_63:
    v55 = a3;
    v56 = &a9[(int)a6];
    v82 = v22 * (uint64_t)a2;
    v80 = v23 * (uint64_t)(int)a6;
    v76 = 2 * a2;
    v57 = a2;
    __srca = 3 * a2;
    v71 = 4 * a2;
    do
    {
      if (v17 >= (unint64_t)v39)
        v58 = v17;
      else
        v58 = (uint64_t)v39;
      v20(v58, v55, v56);
      if (v17 + v57 >= (unint64_t)v39)
        v59 = v17 + v57;
      else
        v59 = (uint64_t)v39;
      v20(v59, v55, &a9[2 * (int)a6]);
      if ((v84 & 1) == 0)
      {
        if (v17 + v76 >= (unint64_t)v39)
          v60 = v17 + v76;
        else
          v60 = (uint64_t)v39;
        v20(v60, a3, &a9[3 * (int)a6]);
        if (v17 + __srca >= (unint64_t)v39)
          v61 = v17 + __srca;
        else
          v61 = (uint64_t)v39;
        v20(v61, a3, &a9[4 * (int)a6]);
        if (v17 + v71 >= (unint64_t)v39)
          v62 = v17 + v71;
        else
          v62 = (uint64_t)v39;
        v20(v62, a3, &a9[5 * (int)a6]);
      }
      result = (char *)v87((unint64_t)v56, a6, v41, a6, a7);
      if (v88)
        result = (char *)memcpy(a9, &a9[v22 * (uint64_t)(int)a6], a7);
      v17 += v82;
      v41 += v80;
      --v43;
      v55 = a3;
    }
    while (v43);
  }
  return result;
}

unsigned __int8 *scale1d_c(unsigned __int8 *result, int a2, int a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, int a8)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  if (a8 * a6)
  {
    v8 = 0;
    v9 = 0;
    v10 = result[a2];
    v11 = *result;
    v12 = a7;
    do
    {
      *(_BYTE *)(a5 + v9) = ((a7 >> 1) + v8 * v10 + v12 * v11) / a7;
      v8 += a3;
      if (v8 > a7)
      {
        do
        {
          v8 -= a7;
          result += a2;
        }
        while (v8 > a7);
        v11 = *result;
        v10 = result[a2];
      }
      v12 = a7 - v8;
      v9 += a6;
    }
    while (v9 < a8 * a6);
  }
  return result;
}

uint64_t scale1d_2t1_ps(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  unsigned int v8;
  unsigned int v9;

  if (a8 * a6)
  {
    v8 = 0;
    v9 = 0;
    do
    {
      *(_BYTE *)(a5 + v9) = *(_BYTE *)(result + v8);
      v9 += a6;
      v8 += 2 * a2;
    }
    while (v9 < a8 * a6);
  }
  return result;
}

_BYTE *scale1d_2t1_i(_BYTE *result, int a2, uint64_t a3, uint64_t a4, _BYTE *a5, unsigned int a6, uint64_t a7, int a8)
{
  int v8;
  unsigned int v9;
  int v10;
  int v11;

  *a5 = *result;
  if (a8 * a6 > a6)
  {
    v8 = 0;
    v9 = a6;
    do
    {
      v10 = a2 + v8;
      v11 = 3 * a2 + v8;
      v8 += 2 * a2;
      a5[v9] = (3 * (result[v11] + result[v10])
              + 10 * result[v8]
              + 8) >> 4;
      v9 += a6;
    }
    while (v9 < a8 * a6);
  }
  return result;
}

unint64_t vpx_scaled_2d_neon(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8x8_t *v29;
  uint8x8_t *v30;
  int v31;
  int v32;
  uint64_t v33;
  _DWORD *v34;
  int32x2_t v35;
  int32x2_t v36;
  int8x8_t v37;
  int8x8_t v38;
  int8x8_t v39;
  int8x8_t v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  char *v44;
  __int8 v45;
  char *v46;
  unint64_t result;
  int8x8_t *v48;
  int16x8_t v49;
  int8x8_t v50;
  int8x8_t *v51;
  int8x8_t v52;
  int8x8_t *v53;
  int8x8_t v54;
  int16x4_t v55;
  int16x4_t v56;
  int16x4_t v57;
  int16x4_t v58;
  uint8x8_t v59;
  uint8x8_t v60;
  uint8x8_t v61;
  uint8x8_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  _BYTE *v67;
  int v68;
  _QWORD *v69;
  int v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int8x16_t v79;
  uint64_t i;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  int16x8_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t *v90;
  uint64_t *v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int8x16_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  uint8x8_t v104;
  uint8x8_t v105;
  uint8x8_t *v106;
  int16x8_t v107;
  uint8x8_t *v108;
  int16x8_t v109;
  int v110;
  _BYTE *v111;
  unint64_t v112;
  int16x8_t v113;
  uint8x16_t v114;
  uint8x16_t v115;
  uint8x16_t v116;
  uint8x16_t v117;
  _BYTE v118[9152];
  int16x4_t v119;
  int16x4_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v11 = MEMORY[0x24BDAC7A8](a1, a2);
  v26 = v13;
  v28 = v27;
  v30 = v29;
  v31 = a11;
  v127 = *MEMORY[0x24BDAC8D0];
  v32 = ((v16 + (a11 - 1) * a9) >> 4) + 8;
  v33 = v11 - 3 * v12 - 3;
  if (a10 == 4)
  {
    v34 = v118;
    do
    {
      v42 = 0;
      v43 = v14;
      do
      {
        while (1)
        {
          v48 = (int8x8_t *)(v33 + (v43 >> 4));
          result = v43 & 0xF;
          if ((v43 & 0xF) != 0)
            break;
          v45 = v48->i8[3];
          v44 = (char *)v48 + 3;
          v46 = (char *)&v119 + v42 * 4;
          *v46 = v45;
          v46[1] = v44[v12];
          result = v44[2 * v12];
          v46[2] = result;
          v46[3] = v44[3 * v12];
          v43 += v15;
          if (++v42 == 4)
            goto LABEL_3;
        }
        v49 = *(int16x8_t *)(v13 + 16 * (v43 & 0xF));
        v50 = *v48;
        v51 = (int8x8_t *)((char *)v48 + v12);
        v52 = *v51;
        v53 = (int8x8_t *)((char *)v51 + v12);
        v54 = *(int8x8_t *)((char *)v53 + v12);
        v55 = (int16x4_t)vtrn1_s8(v50, v52);
        v56 = (int16x4_t)vtrn2_s8(v50, v52);
        v57 = (int16x4_t)vtrn1_s8(*v53, v54);
        v58 = (int16x4_t)vtrn2_s8(*v53, v54);
        v59 = (uint8x8_t)vtrn1_s16(v55, v57);
        v60 = (uint8x8_t)vtrn2_s16(v55, v57);
        v61 = (uint8x8_t)vtrn1_s16(v56, v58);
        v62 = (uint8x8_t)vtrn2_s16(v56, v58);
        v63 = (int8x16_t)vmovl_u8(v59);
        v64 = (int8x16_t)vmovl_u8(v61);
        v65 = (int8x16_t)vmovl_u8(v60);
        v66 = (int8x16_t)vmovl_u8(v62);
        *(int16x4_t *)v49.i8 = vqadd_s16(vqadd_s16(vmla_laneq_s16(vmla_laneq_s16(vmla_laneq_s16(vmla_lane_s16(vmla_lane_s16(vmul_lane_s16(*(int16x4_t *)v64.i8, *(int16x4_t *)v49.i8, 1), *(int16x4_t *)v63.i8, *(int16x4_t *)v49.i8, 0), *(int16x4_t *)v65.i8, *(int16x4_t *)v49.i8, 2), (int16x4_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL), v49, 5), (int16x4_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL), v49, 6),
                                     (int16x4_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL),
                                     v49,
                                     7),
                                   vmul_lane_s16(*(int16x4_t *)v66.i8, *(int16x4_t *)v49.i8, 3)),
                                 vmul_laneq_s16((int16x4_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL), v49, 4));
        v119.i32[v42] = vqrshrun_n_s16(v49, 7uLL).u32[0];
        v43 += v15;
        ++v42;
      }
      while (v42 != 4);
LABEL_3:
      v35 = (int32x2_t)vtrn1_s16(v119, v120);
      v36 = (int32x2_t)vtrn2_s16(v119, v120);
      v37 = (int8x8_t)vzip1_s32(v35, v36);
      v38 = (int8x8_t)vzip2_s32(v35, v36);
      v39 = vtrn1_s8(v37, v38);
      v40 = vtrn2_s8(v37, v38);
      *v34 = v39.i32[0];
      v34[16] = v40.i32[0];
      v34[32] = v39.i32[1];
      v34[48] = v40.i32[1];
      v33 += 4 * v12;
      v34 += 64;
      v41 = __OFSUB__(v32, 4);
      v32 -= 4;
    }
    while (!((v32 < 0) ^ v41 | (v32 == 0)));
  }
  else
  {
    v67 = v118;
    result = (unint64_t)&v119;
    do
    {
      v68 = a10;
      v69 = v67;
      v70 = v14;
      do
      {
        for (i = 0; i != 64; i += 8)
        {
          while (1)
          {
            v84 = v33 + (v70 >> 4);
            if ((v70 & 0xF) != 0)
              break;
            v82 = *(_BYTE *)(v84 + 3);
            v81 = v84 + 3;
            v83 = (char *)&v119 + i;
            *v83 = v82;
            v83[1] = *(_BYTE *)(v81 + v12);
            v83[2] = *(_BYTE *)(v81 + 2 * v12);
            v83[3] = *(_BYTE *)(v81 + 3 * v12);
            v83[4] = *(_BYTE *)(v81 + 4 * v12);
            v83[5] = *(_BYTE *)(v81 + 5 * v12);
            v83[6] = *(_BYTE *)(v81 + 6 * v12);
            v83[7] = *(_BYTE *)(v81 + 7 * v12);
            v70 += v15;
            i += 8;
            if (i == 64)
              goto LABEL_12;
          }
          v85 = *(int16x8_t *)(v26 + 16 * (v70 & 0xF));
          v18.i64[0] = *(_QWORD *)v84;
          v86 = (uint64_t *)(v84 + v12);
          v19.i64[0] = *v86;
          v87 = (uint64_t *)((char *)v86 + v12);
          v20.i64[0] = *v87;
          v88 = (uint64_t *)((char *)v87 + v12);
          v21.i64[0] = *v88;
          v89 = (uint64_t *)((char *)v88 + v12);
          v22.i64[0] = *v89;
          v90 = (uint64_t *)((char *)v89 + v12);
          v23.i64[0] = *v90;
          v91 = (uint64_t *)((char *)v90 + v12);
          v24.i64[0] = *v91;
          v25.i64[0] = *(uint64_t *)((char *)v91 + v12);
          v92 = (int16x8_t)vzip1q_s8(v18, v19);
          v93 = (int16x8_t)vzip1q_s8(v20, v21);
          v94 = (int16x8_t)vzip1q_s8(v22, v23);
          v95 = (int16x8_t)vzip1q_s8(v24, v25);
          v96 = (int32x4_t)vzip1q_s16(v92, v93);
          v97 = (int32x4_t)vzip2q_s16(v92, v93);
          v98 = (int32x4_t)vzip1q_s16(v94, v95);
          v99 = (int32x4_t)vzip2q_s16(v94, v95);
          v100 = (int8x16_t)vzip1q_s32(v96, v98);
          v101 = (int8x16_t)vzip2q_s32(v96, v98);
          v102 = (int8x16_t)vzip1q_s32(v97, v99);
          v103 = (int8x16_t)vzip2q_s32(v97, v99);
          v99.i64[0] = vextq_s8(v100, v100, 8uLL).u64[0];
          v104 = (uint8x8_t)vextq_s8(v101, v101, 8uLL).u64[0];
          v105 = (uint8x8_t)vextq_s8(v102, v102, 8uLL).u64[0];
          v21 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v100.i8);
          v19 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v101.i8);
          v23 = (int8x16_t)vmovl_u8(v104);
          v22 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v102.i8);
          v24 = (int8x16_t)vmovl_u8(v105);
          v25 = (int8x16_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v103, v103, 8uLL));
          v20 = (int8x16_t)vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_lane_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v99.i8), *(int16x4_t *)v85.i8, 1), (int16x8_t)v21, *(int16x4_t *)v85.i8, 0), (int16x8_t)v19, *(int16x4_t *)v85.i8, 2), (int16x8_t)v24, v85, 5), (int16x8_t)vmovl_u8(*(uint8x8_t *)v103.i8), v85, 6), (int16x8_t)v25, v85,
                             7);
          v18 = (int8x16_t)vqaddq_s16((int16x8_t)v20, vmulq_lane_s16((int16x8_t)v23, *(int16x4_t *)v85.i8, 3));
          v17 = (int8x16_t)vqaddq_s16((int16x8_t)v18, vmulq_laneq_s16((int16x8_t)v22, v85, 4));
          *(int8x8_t *)((char *)&v119 + i) = vqrshrun_n_s16((int16x8_t)v17, 7uLL);
          v70 += v15;
        }
LABEL_12:
        *(int16x4_t *)v17.i8 = v119;
        *(int16x4_t *)v18.i8 = v120;
        v19.i64[0] = v121;
        v20.i64[0] = v122;
        v21.i64[0] = v123;
        v22.i64[0] = v124;
        v23.i64[0] = v125;
        v24.i64[0] = v126;
        v71 = (int16x8_t)vzip1q_s8(v17, v18);
        v72 = (int16x8_t)vzip1q_s8(v19, v20);
        v73 = (int16x8_t)vzip1q_s8(v21, v22);
        v74 = (int16x8_t)vzip1q_s8(v23, v24);
        v75 = (int32x4_t)vzip1q_s16(v71, v72);
        v76 = (int32x4_t)vzip2q_s16(v71, v72);
        v77 = (int32x4_t)vzip1q_s16(v73, v74);
        v78 = (int32x4_t)vzip2q_s16(v73, v74);
        v79 = (int8x16_t)vzip1q_s32(v75, v77);
        v18 = (int8x16_t)vzip2q_s32(v75, v77);
        v21 = (int8x16_t)vzip1q_s32(v76, v78);
        v17 = (int8x16_t)vzip2q_s32(v76, v78);
        v78.i64[0] = vextq_s8(v79, v79, 8uLL).u64[0];
        *v69 = v79.i64[0];
        v20 = vextq_s8(v18, v18, 8uLL);
        v22 = vextq_s8(v21, v21, 8uLL);
        v69[8] = v78.i64[0];
        v19 = vextq_s8(v17, v17, 8uLL);
        v69[16] = v18.i64[0];
        v69[24] = v20.i64[0];
        v69[32] = v21.i64[0];
        v69[40] = v22.i64[0];
        v69[48] = v17.i64[0];
        v69[56] = v19.i64[0];
        ++v69;
        v68 -= 8;
      }
      while (v68);
      v33 += 8 * v12;
      v67 += 512;
      v41 = __OFSUB__(v32, 8);
      v32 -= 8;
    }
    while (!((v32 < 0) ^ v41 | (v32 == 0)));
  }
  if (a10 == 4)
  {
    do
    {
      while (1)
      {
        v108 = (uint8x8_t *)&v118[64 * ((uint64_t)v16 >> 4)];
        if ((v16 & 0xF) != 0)
          break;
        v30->i32[0] = v108[24].i32[0];
        v16 += a9;
        v30 = (uint8x8_t *)((char *)v30 + v28);
        if (!--v31)
          return result;
      }
      v109 = *(int16x8_t *)(v26 + 16 * (v16 & 0xF));
      *(int16x4_t *)v109.i8 = vqadd_s16(vqadd_s16(vmla_laneq_s16(vmla_laneq_s16(vmla_laneq_s16(vmla_lane_s16(vmla_lane_s16(vmul_n_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*v108), v109.i16[0]), (int16x4_t)*(_OWORD *)&vmovl_u8(v108[8]), *(int16x4_t *)v109.i8, 1), (int16x4_t)*(_OWORD *)&vmovl_u8(v108[16]), *(int16x4_t *)v109.i8, 2), (int16x4_t)*(_OWORD *)&vmovl_u8(v108[40]), v109, 5), (int16x4_t)*(_OWORD *)&vmovl_u8(v108[48]), v109, 6),
                                    (int16x4_t)*(_OWORD *)&vmovl_u8(v108[56]),
                                    v109,
                                    7),
                                  vmul_lane_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v108[24]), *(int16x4_t *)v109.i8, 3)),
                                vmul_laneq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v108[32]), v109, 4));
      v30->i32[0] = vqrshrun_n_s16(v109, 7uLL).u32[0];
      v16 += a9;
      v30 = (uint8x8_t *)((char *)v30 + v28);
      --v31;
    }
    while (v31);
  }
  else if (a10 == 8)
  {
    do
    {
      while (1)
      {
        v106 = (uint8x8_t *)&v118[64 * ((uint64_t)v16 >> 4)];
        if ((v16 & 0xF) != 0)
          break;
        *v30 = v106[24];
        v16 += a9;
        v30 = (uint8x8_t *)((char *)v30 + v28);
        if (!--v31)
          return result;
      }
      v107 = *(int16x8_t *)(v26 + 16 * (v16 & 0xF));
      *v30 = (uint8x8_t)vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*v106), v107.i16[0]), (int16x8_t)vmovl_u8(v106[8]), *(int16x4_t *)v107.i8, 1), (int16x8_t)vmovl_u8(v106[16]), *(int16x4_t *)v107.i8, 2), (int16x8_t)vmovl_u8(v106[40]), v107, 5), (int16x8_t)vmovl_u8(v106[48]), v107,
                                  6),
                                (int16x8_t)vmovl_u8(v106[56]),
                                v107,
                                7),
                              vmulq_lane_s16((int16x8_t)vmovl_u8(v106[24]), *(int16x4_t *)v107.i8, 3)),
                            vmulq_laneq_s16((int16x8_t)vmovl_u8(v106[32]), v107, 4)),
                          7uLL);
      v16 += a9;
      v30 = (uint8x8_t *)((char *)v30 + v28);
      --v31;
    }
    while (v31);
  }
  else
  {
    v110 = v16;
    do
    {
      v111 = &v118[64 * ((uint64_t)v110 >> 4)];
      if ((v110 & 0xF) != 0)
      {
        v112 = 0;
        do
        {
          v113 = *(int16x8_t *)(v26 + 16 * (v110 & 0xF));
          v114 = *(uint8x16_t *)&v111[v112 + 64];
          v115 = *(uint8x16_t *)&v111[v112 + 128];
          v116 = *(uint8x16_t *)&v111[v112 + 192];
          v117 = *(uint8x16_t *)&v111[v112 + 256];
          *(int8x16_t *)v30[v112 / 8].i8 = vqrshrun_high_n_s16(vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)&v111[v112]), v113.i16[0]), (int16x8_t)vmovl_u8(*(uint8x8_t *)v114.i8), *(int16x4_t *)v113.i8, 1), (int16x8_t)vmovl_u8(*(uint8x8_t *)v115.i8), *(int16x4_t *)v113.i8, 2), (int16x8_t)vmovl_u8(*(uint8x8_t *)&v111[v112 + 320]), v113,
                                                         5),
                                                       (int16x8_t)vmovl_u8(*(uint8x8_t *)&v111[v112 + 384]),
                                                       v113,
                                                       6),
                                                     (int16x8_t)vmovl_u8(*(uint8x8_t *)&v111[v112 + 448]),
                                                     v113,
                                                     7),
                                                   vmulq_lane_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v116.i8), *(int16x4_t *)v113.i8, 3)), vmulq_laneq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v117.i8), v113, 4)), 7uLL), vqaddq_s16(vqaddq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_laneq_s16(vmlaq_lane_s16(vmlaq_lane_s16(vmulq_n_s16((int16x8_t)vmovl_high_u8(*(uint8x16_t *)&v111[v112]), v113.i16[0]), (int16x8_t)vmovl_high_u8(v114), *(int16x4_t *)v113.i8, 1), (int16x8_t)vmovl_high_u8(v115),
                                                         *(int16x4_t *)v113.i8,
                                                         2),
                                                       (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&v111[v112 + 320]),
                                                       v113,
                                                       5),
                                                     (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&v111[v112 + 384]),
                                                     v113,
                                                     6),
                                                   (int16x8_t)vmovl_high_u8(*(uint8x16_t *)&v111[v112 + 448]),
                                                   v113,
                                                   7),
                                                 vmulq_lane_s16((int16x8_t)vmovl_high_u8(v116), *(int16x4_t *)v113.i8, 3)), vmulq_laneq_s16((int16x8_t)vmovl_high_u8(v117), v113, 4)), 7uLL);
          v112 += 16;
        }
        while (a10 != (_DWORD)v112);
      }
      else
      {
        result = (unint64_t)memcpy(v30, v111 + 192, (a10 & 0xFFFFFFF0) - 16 + 16);
      }
      v110 += a9;
      v30 = (uint8x8_t *)((char *)v30 + v28);
      --v31;
    }
    while (v31);
  }
  return result;
}

double init(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

BOOL reset(unsigned int *a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  unint64_t v5;
  int v6;
  pthread_mutex_t *v7;
  pthread_mutex_t *v8;
  pthread_mutex_t *v10;

  a1[12] = 0;
  v1 = a1[2];
  if ((_DWORD)v1 == 1)
    return v1;
  if ((_DWORD)v1)
  {
    v10 = *(pthread_mutex_t **)a1;
    if (*(_QWORD *)a1)
    {
      pthread_mutex_lock(v10);
      if (a1[2] >= 2)
      {
        do
          pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)a1 + 64), *(pthread_mutex_t **)a1);
        while (a1[2] != 1);
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)a1);
      return a1[12] == 0;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v3 = malloc_type_malloc(0x8FuLL, 0x74AD08B5uLL);
    if (!v3)
      goto LABEL_10;
    v4 = v3;
    v5 = ((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v5 - 8) = v4;
    if (!v5)
      goto LABEL_10;
    *(_QWORD *)(v5 + 112) = 0;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_QWORD *)a1 = v5;
    if (pthread_mutex_init((pthread_mutex_t *)v5, 0))
    {
LABEL_8:
      v8 = *(pthread_mutex_t **)a1;
      if (!*(_QWORD *)a1)
      {
LABEL_10:
        v1 = 0;
        *(_QWORD *)a1 = 0;
        return v1;
      }
LABEL_9:
      free(*(void **)&v8[-1].__opaque[48]);
      goto LABEL_10;
    }
    v6 = pthread_cond_init((pthread_cond_t *)(*(_QWORD *)a1 + 64), 0);
    v7 = *(pthread_mutex_t **)a1;
    if (v6)
    {
      pthread_mutex_destroy(v7);
      goto LABEL_8;
    }
    pthread_mutex_lock(v7);
    if (pthread_create((pthread_t *)(*(_QWORD *)a1 + 112), 0, (void *(__cdecl *)(void *))thread_loop, a1))
    {
      pthread_mutex_unlock(*(pthread_mutex_t **)a1);
      pthread_mutex_destroy(*(pthread_mutex_t **)a1);
      pthread_cond_destroy((pthread_cond_t *)(*(_QWORD *)a1 + 64));
      v8 = *(pthread_mutex_t **)a1;
      if (!*(_QWORD *)a1)
        goto LABEL_10;
      goto LABEL_9;
    }
    a1[2] = 1;
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
    return 1;
  }
}

void sync(void)
{
  pthread_mutex_t **v0;
  pthread_mutex_t **v1;
  pthread_mutex_t *v2;

  v1 = v0;
  v2 = *v0;
  if (v2)
  {
    pthread_mutex_lock(v2);
    if (*((_DWORD *)v1 + 2) >= 2u)
    {
      do
        pthread_cond_wait((pthread_cond_t *)&(*v1)[1], *v1);
      while (*((_DWORD *)v1 + 2) != 1);
    }
    pthread_mutex_unlock(*v1);
  }
}

pthread_mutex_t *launch(_DWORD *a1)
{
  pthread_mutex_t *result;
  int v3;

  result = *(pthread_mutex_t **)a1;
  if (result)
  {
    pthread_mutex_lock(result);
    v3 = a1[2];
    if (v3)
    {
      if (v3 != 1)
      {
        do
          pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)a1 + 64), *(pthread_mutex_t **)a1);
        while (a1[2] != 1);
      }
      a1[2] = 2;
      pthread_cond_signal((pthread_cond_t *)(*(_QWORD *)a1 + 64));
    }
    return (pthread_mutex_t *)pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  }
  return result;
}

_QWORD *execute(_QWORD *result)
{
  uint64_t (*v1)(_QWORD, _QWORD);
  _QWORD *v2;

  v1 = (uint64_t (*)(_QWORD, _QWORD))result[3];
  if (v1)
  {
    v2 = result;
    result = (_QWORD *)v1(result[4], result[5]);
    *((_DWORD *)v2 + 12) |= (_DWORD)result == 0;
  }
  return result;
}

std::__fs::filesystem::recursive_directory_iterator *__cdecl end(std::__fs::filesystem::recursive_directory_iterator *__return_ptr retstr, std::__fs::filesystem::recursive_directory_iterator *a2)
{
  std::__fs::filesystem::recursive_directory_iterator *result;
  int cntrl;

  result = (std::__fs::filesystem::recursive_directory_iterator *)a2->__imp_.__ptr_;
  if (result)
  {
    pthread_mutex_lock((pthread_mutex_t *)result);
    cntrl = (int)a2->__imp_.__cntrl_;
    if (cntrl)
    {
      while (cntrl != 1)
      {
        pthread_cond_wait((pthread_cond_t *)((char *)a2->__imp_.__ptr_ + 64), (pthread_mutex_t *)a2->__imp_.__ptr_);
        cntrl = (int)a2->__imp_.__cntrl_;
      }
      LODWORD(a2->__imp_.__cntrl_) = 0;
      pthread_cond_signal((pthread_cond_t *)((char *)a2->__imp_.__ptr_ + 64));
    }
    pthread_mutex_unlock((pthread_mutex_t *)a2->__imp_.__ptr_);
    pthread_join(*((pthread_t *)a2->__imp_.__ptr_ + 14), 0);
    pthread_mutex_destroy((pthread_mutex_t *)a2->__imp_.__ptr_);
    result = (std::__fs::filesystem::recursive_directory_iterator *)pthread_cond_destroy((pthread_cond_t *)((char *)a2->__imp_.__ptr_ + 64));
    if (a2->__imp_.__ptr_)
      free(*((void **)a2->__imp_.__ptr_ - 1));
    a2->__imp_.__ptr_ = 0;
  }
  return result;
}

uint64_t thread_loop(uint64_t a1)
{
  const char *v2;
  int i;
  unsigned int (*v4)(_QWORD, _QWORD);
  char __dst[64];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(const char **)(a1 + 16);
  if (v2)
  {
    strncpy(__dst, v2, 0x3FuLL);
    __dst[63] = 0;
    pthread_setname_np(__dst);
  }
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  for (i = *(_DWORD *)(a1 + 8); i == 2; i = *(_DWORD *)(a1 + 8))
  {
LABEL_8:
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
    v4 = *(unsigned int (**)(_QWORD, _QWORD))(a1 + 24);
    if (v4)
      *(_DWORD *)(a1 + 48) |= v4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)) == 0;
    pthread_mutex_lock(*(pthread_mutex_t **)a1);
    *(_DWORD *)(a1 + 8) = 1;
    pthread_cond_signal((pthread_cond_t *)(*(_QWORD *)a1 + 64));
  }
  while (i == 1)
  {
    pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)a1 + 64), *(pthread_mutex_t **)a1);
    i = *(_DWORD *)(a1 + 8);
    if (i == 2)
      goto LABEL_8;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return 0;
}

uint64_t vp8_yv12_realloc_frame_buffer(uint64_t a1, int a2, int a3, int a4)
{
  signed int v8;
  signed int v9;
  signed int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t result;
  void *v18;
  unint64_t *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  if (!a1)
    return 4294967294;
  v8 = (a2 + 15) & 0xFFFFFFF0;
  v9 = (a3 + 15) & 0xFFFFFFF0;
  v10 = (v8 + 2 * a4 + 31) & 0xFFFFFFE0;
  v11 = v10 * (v9 + 2 * a4);
  v12 = v9 >> 1;
  v13 = v10 >> 1;
  v14 = (v10 >> 1) * (uint64_t)((v9 >> 1) + a4);
  v15 = v11 + 2 * (int)v14;
  v16 = *(_QWORD *)(a1 + 88);
  if (v16)
  {
    if (*(_QWORD *)(a1 + 96) < v15)
      return 0xFFFFFFFFLL;
    goto LABEL_10;
  }
  if (v15 + 39 > 0x10000000000
    || (v28 = v13 * (uint64_t)(v12 + a4),
        v27 = v10 * (v9 + 2 * a4),
        v18 = malloc_type_malloc(v15 + 39, 0x74AD08B5uLL),
        v11 = v27,
        v14 = v28,
        !v18))
  {
    *(_QWORD *)(a1 + 88) = 0;
    v19 = (unint64_t *)(a1 + 96);
    goto LABEL_13;
  }
  v19 = (unint64_t *)(a1 + 96);
  v16 = ((unint64_t)v18 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v16 - 8) = v18;
  *(_QWORD *)(a1 + 88) = v16;
  if (!v16)
  {
LABEL_13:
    *v19 = 0;
    return 0xFFFFFFFFLL;
  }
  *v19 = v15;
LABEL_10:
  if ((a4 & 0x1F) != 0)
    return 4294967293;
  result = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)a1 = v8;
  *(_DWORD *)(a1 + 4) = v9;
  v20 = a2 + 2;
  if (a2 >= -1)
    v20 = a2 + 1;
  v21 = v20 >> 1;
  v22 = a3 + 2;
  if (a3 >= -1)
    v22 = a3 + 1;
  *(_DWORD *)(a1 + 16) = v10;
  *(_DWORD *)(a1 + 20) = v8 >> 1;
  *(_DWORD *)(a1 + 24) = v12;
  *(_DWORD *)(a1 + 28) = v21;
  *(_DWORD *)(a1 + 32) = v22 >> 1;
  *(_DWORD *)(a1 + 36) = v13;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 104) = a4;
  *(_QWORD *)(a1 + 112) = v15;
  v23 = v16 + v10 * (uint64_t)a4 + a4;
  v24 = v16 + v11;
  if (a4 >= 0)
    v25 = a4;
  else
    v25 = a4 + 1;
  v26 = v24 + (v10 >> 1) * (uint64_t)(v25 >> 1) + ((uint64_t)v25 >> 1);
  *(_QWORD *)(a1 + 56) = v23;
  *(_QWORD *)(a1 + 64) = v26;
  *(_QWORD *)(a1 + 72) = v26 + v14;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 148) = 0;
  return result;
}

uint64_t vpx_realloc_frame_buffer(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, signed int a8, _QWORD *a9, uint64_t (*a10)(uint64_t, size_t, _QWORD *), uint64_t a11)
{
  uint64_t result;
  int v19;
  signed int v20;
  signed int v21;
  signed int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  signed int v45;
  signed int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  size_t v57;
  size_t v58;

  result = 0xFFFFFFFFLL;
  if (a2 > 0x4000 || a3 > 0x4000)
    return result;
  if ((a7 & 0x1F) != 0)
    return 4294967293;
  if (!a1)
    return 4294967294;
  if (a8 <= 1)
    v19 = 1;
  else
    v19 = a8;
  v20 = (a2 + 7) & 0xFFFFFFF8;
  v21 = (a3 + 7) & 0xFFFFFFF8;
  v22 = (v20 + 2 * a7 + 31) & 0xFFFFFFE0;
  v23 = a8 + v22 * (uint64_t)(2 * a7 + v21);
  v24 = v21 >> a5;
  v25 = v22 >> a4;
  v26 = a7 >> a5;
  v27 = a8 + (v22 >> a4) * (uint64_t)((v21 >> a5) + 2 * (a7 >> a5));
  v28 = a6 + 1;
  v29 = v23 + 2 * v27;
  v30 = v29 * v28;
  if (!a10)
  {
    if (v30 <= *(_QWORD *)(a1 + 96))
      goto LABEL_23;
    v44 = v21 >> a5;
    v46 = v20;
    v48 = (v20 + 2 * a7 + 31) & 0xFFFFFFE0;
    v50 = a7 >> a5;
    v52 = v22 >> a4;
    v54 = a8 + v22 * (uint64_t)(2 * a7 + v21);
    v56 = a8 + v25 * (uint64_t)(v24 + 2 * v26);
    v33 = (_QWORD *)(a1 + 88);
    v32 = *(_QWORD *)(a1 + 88);
    v58 = v29 * v28;
    if (v32)
    {
      free(*(void **)(v32 - 8));
      v30 = v58;
    }
    *v33 = 0;
    *(_QWORD *)(a1 + 96) = 0;
    if (v30 + 39 <= 0x10000000000 && (v34 = malloc_type_malloc(v30 + 39, 0x74AD08B5uLL)) != 0)
    {
      v35 = v34;
      v36 = (_QWORD *)(((unint64_t)v34 + 39) & 0xFFFFFFFFFFFFFFE0);
      *(v36 - 1) = v35;
      *v33 = v36;
      if (v36)
      {
        *(_QWORD *)(a1 + 96) = v58;
        bzero(v36, v58);
        v27 = v56;
        v30 = v58;
        v23 = v54;
        v26 = v50;
        v25 = v52;
        v22 = v48;
        v24 = v44;
        v20 = v46;
        goto LABEL_23;
      }
    }
    else
    {
      *v33 = 0;
    }
    return 0xFFFFFFFFLL;
  }
  v43 = v21 >> a5;
  v45 = v20;
  v47 = (v20 + 2 * a7 + 31) & 0xFFFFFFE0;
  v49 = a7 >> a5;
  v51 = v22 >> a4;
  v53 = a8 + v22 * (uint64_t)(2 * a7 + v21);
  v55 = a8 + v25 * (uint64_t)(v24 + 2 * v26);
  v42 = v19;
  v57 = v29 * v28;
  v31 = v30 + 31;
  if ((a10(a11, v30 + 31, a9) & 0x80000000) != 0 || !*a9 || a9[1] < v31)
    return 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 88) = (*a9 + 31) & 0xFFFFFFFFFFFFFFE0;
  v19 = v42;
  v24 = v43;
  v23 = v53;
  v27 = v55;
  v26 = v49;
  v25 = v51;
  v22 = v47;
  v20 = v45;
  v30 = v57;
LABEL_23:
  result = 0;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_DWORD *)a1 = v20;
  *(_DWORD *)(a1 + 4) = v21;
  *(_DWORD *)(a1 + 16) = v22;
  *(_DWORD *)(a1 + 20) = v20 >> a4;
  *(_DWORD *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 28) = (a4 + a2) >> a4;
  *(_DWORD *)(a1 + 32) = (a5 + a3) >> a5;
  *(_DWORD *)(a1 + 36) = v25;
  *(_DWORD *)(a1 + 104) = a7;
  *(_QWORD *)(a1 + 112) = v30;
  *(_DWORD *)(a1 + 120) = a4;
  *(_DWORD *)(a1 + 124) = a5;
  v37 = *(_QWORD *)(a1 + 88);
  if (a6)
    v37 >>= 1;
  v38 = v19 - 1;
  v39 = v37 + v22 * (uint64_t)a7 + a7 + v38;
  v40 = -v19;
  v41 = v37 + v23 + v25 * v26 + (a7 >> a4) + v38;
  *(_QWORD *)(a1 + 56) = v39 & v40;
  *(_QWORD *)(a1 + 64) = v41 & v40;
  *(_QWORD *)(a1 + 72) = (v41 + v27) & v40;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 8 * (a6 != 0);
  return result;
}

unsigned __int8 *vp8_yv12_extend_frame_borders_c(uint64_t a1)
{
  int v2;
  int v3;
  int v4;

  v2 = *(_DWORD *)(a1 + 104);
  if (v2 >= 0)
    v3 = *(_DWORD *)(a1 + 104);
  else
    v3 = v2 + 1;
  v4 = v3 >> 1;
  extend_plane(*(unsigned __int8 **)(a1 + 56), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12), v2, v2, v2 - *(_DWORD *)(a1 + 12) + *(_DWORD *)(a1 + 4), v2 - *(_DWORD *)(a1 + 8) + *(_DWORD *)a1);
  extend_plane(*(unsigned __int8 **)(a1 + 64), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), v4, v4, v4 - *(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 24), v4 - *(_DWORD *)(a1 + 28) + *(_DWORD *)(a1 + 20));
  return extend_plane(*(unsigned __int8 **)(a1 + 72), *(_DWORD *)(a1 + 36), *(_DWORD *)(a1 + 28), *(_DWORD *)(a1 + 32), v4, v4, v4 - *(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 24), v4 - *(_DWORD *)(a1 + 28) + *(_DWORD *)(a1 + 20));
}

unsigned __int8 *extend_plane(unsigned __int8 *result, int a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  int v19;
  unsigned __int8 *v23;

  v23 = result;
  v19 = a6 + a3;
  v10 = a6;
  v11 = -(uint64_t)a6;
  if (a4 >= 1)
  {
    v12 = a3;
    v13 = result;
    v14 = a4;
    do
    {
      memset(&v13[v11], *v13, v10);
      result = (unsigned __int8 *)memset(&v13[v12], v13[v12 - 1], a8);
      v13 += a2;
      --v14;
    }
    while (v14);
  }
  v15 = v19 + a8;
  if (a5 >= 1)
  {
    v16 = &v23[-v10];
    v17 = &v23[v11 - a2 * a5];
    do
    {
      result = (unsigned __int8 *)memcpy(v17, v16, v15);
      v17 += a2;
      --a5;
    }
    while (a5);
  }
  if (a7 >= 1)
  {
    v18 = &v23[a4 * (uint64_t)a2 + v11];
    do
    {
      result = (unsigned __int8 *)memcpy(v18, &v23[(a4 - 1) * a2 + v11], v15);
      v18 += a2;
      --a7;
    }
    while (a7);
  }
  return result;
}

unsigned __int8 *extend_frame(int *a1, int a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  signed int v12;
  int v13;
  signed int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  signed int v19;

  v5 = a1[7];
  v4 = a1[8];
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a2 >> (v10 < v7);
  v12 = a2 >> (v9 < *a1);
  v13 = v11 + v10 - v4;
  v14 = v12 + v9 - v5;
  v15 = (unsigned __int8 *)*((_QWORD *)a1 + 7);
  v16 = a1[2];
  v17 = a1[3];
  v18 = v7 + a2 - v17;
  v19 = v6 + a2 - v16;
  if ((a1[38] & 8) != 0)
  {
    extend_plane_high((uint64_t)v15, v8, v16, v17, a2, a2, v18, v19);
    extend_plane_high(*((_QWORD *)a1 + 8), a1[9], v5, v4, v11, v12, v13, v14);
    return (unsigned __int8 *)extend_plane_high(*((_QWORD *)a1 + 9), a1[9], v5, v4, v11, v12, v13, v14);
  }
  else
  {
    extend_plane(v15, v8, v16, v17, a2, a2, v18, v19);
    extend_plane(*((unsigned __int8 **)a1 + 8), a1[9], v5, v4, v11, v12, v13, v14);
    return extend_plane(*((unsigned __int8 **)a1 + 9), a1[9], v5, v4, v11, v12, v13, v14);
  }
}

unsigned __int8 *vp8_yv12_copy_frame_c(int *a1, uint64_t a2)
{
  int v4;
  char *v5;
  char *v6;
  int v7;
  char *v8;
  char *v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  int v16;

  if (a1[1] >= 1)
  {
    v4 = 0;
    v5 = *(char **)(a2 + 56);
    v6 = (char *)*((_QWORD *)a1 + 7);
    do
    {
      memcpy(v5, v6, *a1);
      v6 += a1[4];
      v5 += *(int *)(a2 + 16);
      ++v4;
    }
    while (v4 < a1[1]);
  }
  if (a1[6] > 0)
  {
    v7 = 0;
    v8 = *(char **)(a2 + 64);
    v9 = (char *)*((_QWORD *)a1 + 8);
    do
    {
      memcpy(v8, v9, a1[5]);
      v9 += a1[9];
      v8 += *(int *)(a2 + 36);
      ++v7;
      v10 = a1[6];
    }
    while (v7 < v10);
    if (v10 >= 1)
    {
      v11 = 0;
      v12 = *(char **)(a2 + 72);
      v13 = (char *)*((_QWORD *)a1 + 9);
      do
      {
        memcpy(v12, v13, a1[5]);
        v13 += a1[9];
        v12 += *(int *)(a2 + 36);
        ++v11;
      }
      while (v11 < a1[6]);
    }
  }
  v14 = *(_DWORD *)(a2 + 104);
  if (v14 >= 0)
    v15 = *(_DWORD *)(a2 + 104);
  else
    v15 = v14 + 1;
  v16 = v15 >> 1;
  extend_plane(*(unsigned __int8 **)(a2 + 56), *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 8), *(_DWORD *)(a2 + 12), v14, *(_DWORD *)(a2 + 104), v14 - *(_DWORD *)(a2 + 12) + *(_DWORD *)(a2 + 4), v14 - *(_DWORD *)(a2 + 8) + *(_DWORD *)a2);
  extend_plane(*(unsigned __int8 **)(a2 + 64), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 32), v16, v16, v16 - *(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 24), v16 - *(_DWORD *)(a2 + 28) + *(_DWORD *)(a2 + 20));
  return extend_plane(*(unsigned __int8 **)(a2 + 72), *(_DWORD *)(a2 + 36), *(_DWORD *)(a2 + 28), *(_DWORD *)(a2 + 32), v16, v16, v16 - *(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 24), v16 - *(_DWORD *)(a2 + 28) + *(_DWORD *)(a2 + 20));
}

unsigned __int8 *vpx_yv12_copy_frame_c(int *a1, uint64_t a2)
{
  const void *v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;

  v4 = (const void *)*((_QWORD *)a1 + 7);
  v5 = *(void **)(a2 + 56);
  v6 = a1[1];
  if ((a1[38] & 8) != 0)
  {
    if (v6 >= 1)
    {
      v15 = 0;
      do
      {
        memcpy((void *)(2 * (_QWORD)v5), (const void *)(2 * (_QWORD)v4), 2 * *a1);
        v4 = (char *)v4 + a1[4];
        v5 = (char *)v5 + *(int *)(a2 + 16);
        ++v15;
      }
      while (v15 < a1[1]);
    }
    if (a1[6] >= 1)
    {
      v16 = 0;
      v17 = *(_QWORD *)(a2 + 64);
      v18 = *((_QWORD *)a1 + 8);
      do
      {
        memcpy((void *)(2 * v17), (const void *)(2 * v18), 2 * a1[5]);
        v18 += a1[9];
        v17 += *(int *)(a2 + 36);
        ++v16;
        v19 = a1[6];
      }
      while (v16 < v19);
      if (v19 >= 1)
      {
        v20 = 0;
        v21 = *(_QWORD *)(a2 + 72);
        v22 = *((_QWORD *)a1 + 9);
        do
        {
          memcpy((void *)(2 * v21), (const void *)(2 * v22), 2 * a1[5]);
          v22 += a1[9];
          v21 += *(int *)(a2 + 36);
          ++v20;
        }
        while (v20 < a1[6]);
      }
    }
  }
  else
  {
    if (v6 >= 1)
    {
      v7 = 0;
      do
      {
        memcpy(v5, v4, *a1);
        v4 = (char *)v4 + a1[4];
        v5 = (char *)v5 + *(int *)(a2 + 16);
        ++v7;
      }
      while (v7 < a1[1]);
    }
    if (a1[6] >= 1)
    {
      v8 = 0;
      v9 = *(char **)(a2 + 64);
      v10 = (char *)*((_QWORD *)a1 + 8);
      do
      {
        memcpy(v9, v10, a1[5]);
        v10 += a1[9];
        v9 += *(int *)(a2 + 36);
        ++v8;
        v11 = a1[6];
      }
      while (v8 < v11);
      if (v11 >= 1)
      {
        v12 = 0;
        v13 = *(char **)(a2 + 72);
        v14 = (char *)*((_QWORD *)a1 + 9);
        do
        {
          memcpy(v13, v14, a1[5]);
          v14 += a1[9];
          v13 += *(int *)(a2 + 36);
          ++v12;
        }
        while (v12 < a1[6]);
      }
    }
  }
  return extend_frame((int *)a2, *(_DWORD *)(a2 + 104));
}

uint64_t extend_plane_high(uint64_t result, int a2, int a3, int a4, int a5, signed int a6, int a7, signed int a8)
{
  int v11;
  uint64_t v12;
  _WORD *v13;
  _WORD *v14;
  unsigned __int16 *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  unsigned __int16 *v22;
  unsigned int v23;
  unint64_t v24;
  _WORD *v25;
  int16x8_t v26;
  unint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  unsigned int v30;
  unint64_t v31;
  _WORD *v32;
  int16x8_t v33;
  unint64_t v34;
  _OWORD *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  _WORD *v41;
  int16x8_t v42;
  unint64_t v43;
  _OWORD *v44;
  unint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned int v51;
  unint64_t v52;
  int16x8_t v53;
  unint64_t v54;
  _OWORD *v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  char *v59;
  char *v60;
  int v61;

  v11 = a6 + a3;
  v12 = 2 * result;
  v13 = (_WORD *)(2 * result - 2 * a6);
  v61 = a4 - 1;
  if (a4 >= 1)
  {
    v14 = (_WORD *)(v12 + 2 * a3);
    v15 = v14 - 1;
    if (a6)
    {
      v16 = a6 & 0xFFFFFFFFFFFFFFF0;
      v17 = v16;
      if (a8)
      {
        v18 = 0;
        result = v12 - 2 * a6 + 16;
        v19 = 2 * a2;
        v20 = v12 + 2 * a3 + 16;
        v21 = v13;
        v22 = (unsigned __int16 *)v12;
        while (1)
        {
          v23 = *v22;
          if (a6 < 0x10)
            break;
          v25 = &v21[v17];
          v26 = vdupq_n_s16(v23);
          v27 = a6 & 0xFFFFFFFFFFFFFFF0;
          v28 = (_OWORD *)result;
          do
          {
            *(v28 - 1) = v26;
            *v28 = v26;
            v28 += 2;
            v27 -= 16;
          }
          while (v27);
          v24 = a6 & 0xFFFFFFFFFFFFFFF0;
          if (v16 != a6)
            goto LABEL_11;
LABEL_13:
          v30 = *v15;
          if (a8 >= 0x10)
          {
            v32 = &v14[a8 & 0xFFFFFFFFFFFFFFF0];
            v33 = vdupq_n_s16(v30);
            v34 = a8 & 0xFFFFFFFFFFFFFFF0;
            v35 = (_OWORD *)v20;
            do
            {
              *(v35 - 1) = v33;
              *v35 = v33;
              v35 += 2;
              v34 -= 16;
            }
            while (v34);
            v31 = a8 & 0xFFFFFFFFFFFFFFF0;
            if (v31 == a8)
              goto LABEL_5;
          }
          else
          {
            v31 = 0;
            v32 = v14;
          }
          v36 = a8 - v31;
          do
          {
            *v32++ = v30;
            --v36;
          }
          while (v36);
LABEL_5:
          v22 = (unsigned __int16 *)((char *)v22 + v19);
          v15 = (unsigned __int16 *)((char *)v15 + v19);
          v21 = (_WORD *)((char *)v21 + v19);
          v14 = (_WORD *)((char *)v14 + v19);
          ++v18;
          result += v19;
          v20 += v19;
          if (v18 == a4)
            goto LABEL_42;
        }
        v24 = 0;
        v25 = v21;
LABEL_11:
        v29 = a6 - v24;
        do
        {
          *v25++ = v23;
          --v29;
        }
        while (v29);
        goto LABEL_13;
      }
      v46 = 0;
      v47 = v12 - 2 * a6 + 16;
      v48 = 2 * a2;
      v49 = 2 * result - 2 * a6;
      v50 = (unsigned __int16 *)(2 * result);
      while (1)
      {
        v51 = *v50;
        if (a6 >= 0x10)
        {
          result = v49 + v17 * 2;
          v53 = vdupq_n_s16(v51);
          v54 = a6 & 0xFFFFFFFFFFFFFFF0;
          v55 = (_OWORD *)v47;
          do
          {
            *(v55 - 1) = v53;
            *v55 = v53;
            v55 += 2;
            v54 -= 16;
          }
          while (v54);
          v52 = a6 & 0xFFFFFFFFFFFFFFF0;
          if (v16 == a6)
            goto LABEL_33;
        }
        else
        {
          v52 = 0;
          result = v49;
        }
        v56 = a6 - v52;
        do
        {
          *(_WORD *)result = v51;
          result += 2;
          --v56;
        }
        while (v56);
LABEL_33:
        v50 = (unsigned __int16 *)((char *)v50 + v48);
        v49 += v48;
        ++v46;
        v47 += v48;
        if (v46 == a4)
          goto LABEL_42;
      }
    }
    if (a8)
    {
      v37 = 0;
      v38 = v12 + 2 * a3 + 16;
      v39 = 2 * a2;
      do
      {
        result = *v15;
        if (a8 >= 0x10)
        {
          v41 = &v14[a8 & 0xFFFFFFFFFFFFFFF0];
          v42 = vdupq_n_s16(result);
          v43 = a8 & 0xFFFFFFFFFFFFFFF0;
          v44 = (_OWORD *)v38;
          do
          {
            *(v44 - 1) = v42;
            *v44 = v42;
            v44 += 2;
            v43 -= 16;
          }
          while (v43);
          v40 = a8 & 0xFFFFFFFFFFFFFFF0;
          if (v40 == a8)
            goto LABEL_23;
        }
        else
        {
          v40 = 0;
          v41 = v14;
        }
        v45 = a8 - v40;
        do
        {
          *v41++ = result;
          --v45;
        }
        while (v45);
LABEL_23:
        v15 = (unsigned __int16 *)((char *)v15 + v39);
        v14 = (_WORD *)((char *)v14 + v39);
        ++v37;
        v38 += v39;
      }
      while (v37 != a4);
    }
  }
LABEL_42:
  v57 = -(uint64_t)a6;
  v58 = v11 + a8;
  if (a5 >= 1)
  {
    v59 = (char *)(v12 + 2 * -(a2 * a5) - 2 * a6);
    do
    {
      result = (uint64_t)memcpy(v59, v13, 2 * v58);
      v59 += 2 * a2;
      --a5;
    }
    while (a5);
  }
  if (a7 >= 1)
  {
    v60 = (char *)(v12 + 2 * a4 * a2 + 2 * v57);
    do
    {
      result = (uint64_t)memcpy(v60, (const void *)(v12 + 2 * v61 * a2 + 2 * v57), 2 * v58);
      v60 += 2 * a2;
      --a7;
    }
    while (a7);
  }
  return result;
}

uint64_t webm::Ancestory::ById(int a1, _QWORD *a2)
{
  uint64_t result;
  int v3;
  int v4;
  char v5;
  int v6;

  if (a1 > 18406)
  {
    if (a1 <= 25187)
    {
      if (a1 > 21673)
      {
        if (a1 > 21929)
        {
          if (a1 > 22202)
          {
            if (a1 != 22203)
            {
              if (a1 == 22337)
                goto LABEL_89;
              if (a1 == 25152)
              {
                *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kContentEncAesSettingsAncestory;
                a2[1] = &unk_208F52148;
                return 1;
              }
              goto LABEL_121;
            }
LABEL_105:
            *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kVideoAncestory;
            a2[1] = &unk_208F52124;
            return 1;
          }
          if (a1 == 21930)
            goto LABEL_105;
          if (a1 != 22100)
          {
            v3 = 22186;
            goto LABEL_104;
          }
          goto LABEL_80;
        }
        if ((a1 - 21674) > 0x33 || ((1 << (a1 + 86)) & 0x8000400030341) == 0)
          goto LABEL_121;
      }
      else
      {
        if (a1 <= 21357)
        {
          if (a1 > 19898)
          {
            if ((a1 - 20529) <= 4 && a1 != 20532)
            {
              *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kContentEncAesSettingsAncestory;
              a2[1] = &unk_208F5214C;
              return 1;
            }
            if (a1 == 19899)
            {
              *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kSeekAncestory;
              a2[1] = &unk_208F520E4;
              return 1;
            }
            goto LABEL_121;
          }
          if (a1 == 18407)
            goto LABEL_70;
          if (a1 == 18408)
          {
            *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kContentEncAesSettingsAncestory;
            a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kCueTrackPositionsAncestory;
            return 1;
          }
          v4 = 19840;
          goto LABEL_36;
        }
        if (a1 <= 21418)
        {
          if (a1 != 21358)
          {
            if (a1 == 21368)
            {
LABEL_101:
              *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kCueTrackPositionsAncestory;
              a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kChapterDisplayAncestory;
              return 1;
            }
            goto LABEL_121;
          }
          goto LABEL_105;
        }
        if ((a1 - 21419) < 2)
        {
          *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kSeekAncestory;
          a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kInfoAncestory;
          return 1;
        }
        if (a1 != 21432 && a1 != 21440)
          goto LABEL_121;
      }
    }
    else
    {
      if (a1 <= 2274715)
      {
        if (a1 <= 29554)
        {
          if (a1 <= 25545)
          {
            if (a1 <= 25535)
            {
              if (a1 != 25188)
              {
                v3 = 25506;
                goto LABEL_104;
              }
LABEL_69:
              *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kAudioAncestory;
              a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kContentEncAesSettingsAncestory;
              return 1;
            }
            if (a1 != 25536)
            {
              if (a1 != 25541)
                goto LABEL_121;
LABEL_106:
              *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kTargetsAncestory;
              a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kSimpleTagAncestory;
              return 1;
            }
LABEL_108:
            *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kTargetsAncestory;
            a2[1] = &unk_208F52184;
            return 1;
          }
          if (a1 <= 26825)
          {
            if (a1 == 25546)
              goto LABEL_106;
            if (a1 != 26568)
              goto LABEL_121;
            goto LABEL_108;
          }
          if (a1 == 26826)
            goto LABEL_106;
          v3 = 28032;
LABEL_104:
          if (a1 != v3)
            goto LABEL_121;
          goto LABEL_105;
        }
        if (a1 > 30112)
        {
          if ((a1 - 30113) < 2)
          {
LABEL_43:
            *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kBlockMoreAncestory;
            a2[1] = &unk_208F520FC;
            return 1;
          }
          if (a1 == 30901)
            goto LABEL_69;
          v4 = 31657;
LABEL_36:
          if (a1 == v4)
            goto LABEL_89;
          goto LABEL_121;
        }
        if (a1 == 29555)
        {
          *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kTargetsAncestory;
          a2[1] = &unk_208F52180;
          return 1;
        }
        if (a1 != 29636)
        {
          v3 = 29637;
          goto LABEL_104;
        }
LABEL_80:
        *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kChapterDisplayAncestory;
        a2[1] = &unk_208F52174;
        return 1;
      }
      if (a1 > 307544934)
      {
        if (a1 <= 408125542)
        {
          if (a1 == 307544935 || a1 == 357149030)
            goto LABEL_98;
          v6 = 374648427;
        }
        else
        {
          if (a1 <= 475249514)
          {
            if (a1 == 408125543 || a1 == 440786851)
            {
              *a2 = 0;
              a2[1] = 0;
              return 1;
            }
            goto LABEL_121;
          }
          if (a1 == 475249515)
            goto LABEL_98;
          v6 = 524531317;
        }
        goto LABEL_97;
      }
      if (a1 > 2459271)
      {
        if (a1 <= 272869231)
        {
          if (a1 == 2459272)
            goto LABEL_105;
          v4 = 2807729;
          goto LABEL_36;
        }
        if (a1 == 272869232)
        {
LABEL_98:
          *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kSeekAncestory;
          a2[1] = &unk_208F520E0;
          return 1;
        }
        v6 = 290298740;
LABEL_97:
        if (a1 != v6)
          goto LABEL_121;
        goto LABEL_98;
      }
      if (a1 == 2274716)
        goto LABEL_105;
      if (a1 != 2327523)
      {
        v3 = 2352003;
        goto LABEL_104;
      }
    }
LABEL_31:
    *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kVideoAncestory;
    a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kAudioAncestory;
    return 1;
  }
  if (a1 > 17137)
  {
    if (a1 <= 17504)
    {
      if ((a1 - 17138) <= 5 && ((1 << (a1 + 14)) & 0x23) != 0)
      {
LABEL_73:
        *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kEbmlAncestory;
        a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kSeekAncestory;
        return 1;
      }
      if (a1 == 17276 || a1 == 17278)
      {
LABEL_48:
        *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kChapterDisplayAncestory;
        a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kTargetsAncestory;
        return 1;
      }
      goto LABEL_121;
    }
    if (a1 <= 17826)
    {
      v5 = a1 - 97;
      if ((a1 - 17505) <= 0x28)
      {
        if (((1 << v5) & 0x5802000000) != 0)
        {
LABEL_22:
          *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kSimpleTagAncestory;
          a2[1] = &jpt_208C51980;
          return 1;
        }
        if (((1 << v5) & 0x10000000001) != 0)
        {
LABEL_89:
          *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kInfoAncestory;
          a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kBlockMoreAncestory;
          return 1;
        }
      }
LABEL_121:
      result = 0;
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    if ((a1 - 18401) >= 2)
    {
      if (a1 == 17827)
        goto LABEL_22;
      if (a1 == 17849)
      {
        *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kChapterDisplayAncestory;
        a2[1] = &unk_208F5216C;
        return 1;
      }
      goto LABEL_121;
    }
LABEL_70:
    *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kContentEncAesSettingsAncestory;
    a2[1] = &unk_208F52150;
    return 1;
  }
  switch(a1)
  {
    case 128:
    case 145:
    case 146:
      goto LABEL_80;
    case 129:
    case 130:
    case 132:
    case 135:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 143:
    case 144:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 157:
    case 158:
    case 164:
    case 167:
    case 168:
    case 169:
    case 170:
    case 172:
    case 173:
    case 175:
    case 177:
    case 180:
    case 184:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 239:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 248:
    case 249:
    case 250:
      goto LABEL_121;
    case 131:
    case 134:
    case 136:
    case 156:
    case 185:
    case 215:
    case 224:
    case 225:
      goto LABEL_105;
    case 133:
      goto LABEL_48;
    case 142:
    case 155:
    case 161:
    case 162:
    case 251:
      goto LABEL_43;
    case 154:
    case 176:
    case 186:
      goto LABEL_31;
    case 159:
    case 181:
      goto LABEL_69;
    case 160:
    case 163:
    case 171:
    case 231:
      *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kBlockMoreAncestory;
      a2[1] = &unk_208F520F8;
      result = 1;
      break;
    case 165:
    case 238:
      *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kBlockMoreAncestory;
      a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kTimeSliceAncestory;
      result = 1;
      break;
    case 166:
      *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kBlockMoreAncestory;
      a2[1] = &unk_208F52100;
      result = 1;
      break;
    case 174:
      *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kVideoAncestory;
      a2[1] = &unk_208F52120;
      result = 1;
      break;
    case 178:
    case 240:
    case 241:
    case 247:
      goto LABEL_101;
    case 179:
    case 183:
      *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kCueTrackPositionsAncestory;
      a2[1] = &unk_208F52160;
      result = 1;
      break;
    case 182:
      *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kChapterDisplayAncestory;
      a2[1] = &unk_208F52170;
      result = 1;
      break;
    case 187:
      *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kCueTrackPositionsAncestory;
      a2[1] = &unk_208F5215C;
      result = 1;
      break;
    case 204:
      *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kTimeSliceAncestory;
      a2[1] = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kVideoAncestory;
      result = 1;
      break;
    case 232:
      *a2 = &webm::Ancestory::ById(webm::Id,webm::Ancestory*)::kTimeSliceAncestory;
      a2[1] = &unk_208F52114;
      result = 1;
      break;
    default:
      if ((a1 - 17026) <= 5 && ((1 << (a1 + 126)) & 0x39) != 0)
        goto LABEL_73;
      goto LABEL_121;
  }
  return result;
}

uint64_t webm::BlockHeaderParser::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;

  *a4 = 0;
  v15 = 0;
  v8 = a1 + 18;
  v9 = a1 + 24;
  v10 = *(_DWORD *)(a1 + 52);
  while (2)
  {
    switch(v10)
    {
      case 0:
        result = webm::VarIntParser::Feed(v9, a2, a3, &v15);
        *a4 += v15;
        if ((_DWORD)result)
          return result;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 40);
        v10 = 1;
        *(_DWORD *)(a1 + 52) = 1;
        continue;
      case 1:
        v12 = *(_DWORD *)(a1 + 48);
        v15 = 0;
        if (v12 > 2)
        {
          v13 = 0;
          result = 4294966270;
          goto LABEL_16;
        }
        v13 = 0;
        if (v12)
        {
          v14 = v12 + 1;
          do
          {
            v16 = 0;
            v17 = 0;
            result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v16, &v17);
            if ((_DWORD)result)
              goto LABEL_14;
            ++v13;
            *(_WORD *)(a1 + 16) = v16 | (unsigned __int16)(*(_WORD *)(a1 + 16) << 8);
            --v14;
          }
          while (v14 > 1);
          result = 0;
LABEL_14:
          v15 = v13;
          goto LABEL_16;
        }
        result = 0;
LABEL_16:
        *a4 += v13;
        *(_DWORD *)(a1 + 48) -= v13;
        if (!(_DWORD)result)
        {
          v10 = 2;
          *(_DWORD *)(a1 + 52) = 2;
          continue;
        }
        return result;
      case 2:
        v17 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, v8, &v17);
        if ((_DWORD)result)
          return result;
        ++*a4;
        v10 = 3;
        *(_DWORD *)(a1 + 52) = 3;
        continue;
      case 3:
        return 0;
      default:
        continue;
    }
  }
}

void webm::BlockHeaderParser::~BlockHeaderParser(webm::BlockHeaderParser *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

__n128 webm::BasicBlockParser<webm::Block>::Init(__n128 *a1, __n128 *a2, __n128 result)
{
  void *v5;
  __n128 *v6;
  __n128 v7;

  if (a2->n128_u64[1] + 1 >= 6)
  {
    v6 = a1 + 10;
    v5 = (void *)a1[10].n128_u64[0];
    v7 = 0uLL;
    *(__n128 *)((char *)&v6[-7] + 8) = 0u;
    *(__n128 *)((char *)&v6[-8] + 8) = 0u;
    *(__n128 *)((char *)&v6[-9] + 8) = 0u;
    *(__n128 *)((char *)&v6[-10] + 8) = 0u;
    v6[-5].n128_u64[0] = 0;
    v6[-5].n128_u64[1] = 0;
    v6[-4].n128_u32[2] = -1;
    *(unint64_t *)((char *)&v6[-4].n128_u64[1] + 4) = 0;
    v6[-3].n128_u32[1] = 0;
    v6[-3].n128_u64[1] = 2;
    v6[-2].n128_u32[2] = -1;
    *(unint64_t *)((char *)v6[-1].n128_u64 + 4) = 0;
    *(unint64_t *)((char *)&v6[-2].n128_u64[1] + 4) = 0;
    v6[-1].n128_u32[3] = 0;
    if (v5)
    {
      a1[10].n128_u64[1] = (unint64_t)v5;
      operator delete(v5);
      v7 = 0uLL;
    }
    v6[2].n128_u32[0] = 0;
    *v6 = v7;
    v6[1] = v7;
    result = *a2;
    a1[3].n128_u64[0] = a2[1].n128_u64[0];
    a1[2] = result;
  }
  return result;
}

_QWORD *webm::BasicBlockParser<webm::Block>::~BasicBlockParser(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0D6EB8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t webm::BasicBlockParser<webm::Block>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  _OWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  int64x2_t *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  _OWORD *v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _OWORD *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  unint64_t v151;

  *a4 = 0;
  v150 = 0;
  v8 = a1 + 32;
  v9 = a1 + 128;
  v147 = a1 + 128;
  v148 = a1 + 140;
  v144 = a1 + 16;
  v145 = (char **)(a1 + 160);
  v143 = a1 + 72;
  v10 = *(_DWORD *)(a1 + 192);
  v146 = a1 + 32;
LABEL_2:
  while (2)
  {
    switch(v10)
    {
      case 0:
        result = webm::BlockHeaderParser::Feed(v143, a2, a3, &v150);
        v12 = v150;
        *a4 += v150;
        *(_QWORD *)(a1 + 8) += v12;
        if ((_DWORD)result)
          return result;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 80);
        *(_WORD *)(a1 + 28) = *(_WORD *)(a1 + 88);
        v13 = *(unsigned __int8 *)(a1 + 90);
        v10 = 1;
        *(_BYTE *)(a1 + 31) = ((v13 >> 3) & 1) == 0;
        v14 = v13 & 6;
        *(_BYTE *)(a1 + 30) = v14;
        if (!v14)
        {
          *(_DWORD *)(a1 + 24) = 1;
          v10 = 2;
        }
        *(_DWORD *)(a1 + 192) = v10;
        continue;
      case 1:
        v149 = 0;
        v151 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v149, &v151);
        if ((_DWORD)result)
          return result;
        ++*a4;
        ++*(_QWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v149 + 1;
        v10 = 2;
        *(_DWORD *)(a1 + 192) = 2;
        continue;
      case 2:
        LODWORD(v151) = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 104))(a2, v8, v144, &v151);
        if ((_DWORD)result)
          return result;
        if ((_DWORD)v151 == 1)
        {
          v10 = 8;
          *(_DWORD *)(a1 + 192) = 8;
        }
        else
        {
          v99 = *(unsigned __int8 *)(a1 + 30);
          if (*(_BYTE *)(a1 + 30))
          {
            if (v99 == 6)
              v100 = 4;
            else
              v100 = 6;
            if (v99 == 2)
              v10 = 3;
            else
              v10 = v100;
            if (*(_DWORD *)(a1 + 24) == 1)
              v10 = 7;
            *(_DWORD *)(a1 + 192) = v10;
          }
          else
          {
            v10 = 7;
            *(_DWORD *)(a1 + 192) = 7;
          }
        }
        continue;
      case 3:
        if (*(_DWORD *)(a1 + 24) - 1 <= (int)((*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3))
          goto LABEL_39;
        while (1)
        {
          v149 = 0;
          do
          {
            v151 = 0;
            result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v149, &v151);
            if ((_DWORD)result)
              return result;
            ++*a4;
            ++*(_QWORD *)(a1 + 8);
            v15 = v149;
            v16 = *(_QWORD *)(a1 + 152) + v149;
            *(_QWORD *)(a1 + 152) = v16;
          }
          while (v15 == 255);
          v18 = *(char **)(a1 + 168);
          v17 = *(_QWORD *)(a1 + 176);
          if ((unint64_t)v18 < v17)
          {
            if (!v18)
              goto LABEL_153;
            *(_QWORD *)v18 = v16;
            v19 = v18 + 8;
            goto LABEL_38;
          }
          v20 = *v145;
          v21 = v18 - *v145;
          v22 = v21 >> 3;
          v23 = (v21 >> 3) + 1;
          if (v23 >> 61)
            goto LABEL_155;
          v24 = v17 - (_QWORD)v20;
          if (v24 >> 2 > v23)
            v23 = v24 >> 2;
          v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8;
          v26 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v25)
            v26 = v23;
          if (!v26)
            goto LABEL_153;
          if (v26 >> 61)
            goto LABEL_154;
          v140 = 8 * v26;
          v27 = operator new(8 * v26);
          v28 = &v27[8 * v22];
          *v28 = v16;
          v19 = v28 + 1;
          if (v18 == v20)
          {
            v8 = v146;
            v30 = v140;
          }
          else
          {
            v29 = v18 - v20 - 8;
            if (v29 >= 0x58)
            {
              v31 = &v18[-v21] - v27;
              v8 = v146;
              v30 = v140;
              if (v31 >= 0x20)
              {
                v32 = (v29 >> 3) + 1;
                v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
                v34 = &v18[-v33];
                v28 = (_QWORD *)((char *)v28 - v33);
                v35 = &v27[8 * v22 - 16];
                v36 = v18 - 16;
                v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v38 = *(_OWORD *)v36;
                  *(v35 - 1) = *((_OWORD *)v36 - 1);
                  *v35 = v38;
                  v35 -= 2;
                  v36 -= 32;
                  v37 -= 4;
                }
                while (v37);
                v18 = v34;
                if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_35;
              }
            }
            else
            {
              v8 = v146;
              v30 = v140;
            }
            do
            {
              v39 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *--v28 = v39;
            }
            while (v18 != v20);
          }
LABEL_35:
          *(_QWORD *)(a1 + 160) = v28;
          *(_QWORD *)(a1 + 168) = v19;
          *(_QWORD *)(a1 + 176) = &v27[v30];
          if (v20)
            operator delete(v20);
          v9 = v147;
LABEL_38:
          *(_QWORD *)(a1 + 168) = v19;
          *(_QWORD *)(a1 + 152) = 0;
          if (*(_DWORD *)(a1 + 24) - 1 <= (int)(((unint64_t)v19 - *(_QWORD *)(a1 + 160)) >> 3))
          {
LABEL_39:
            v10 = 7;
            *(_DWORD *)(a1 + 192) = 7;
            goto LABEL_2;
          }
        }
      case 4:
        result = webm::VarIntParser::Feed(v9, a2, a3, &v150);
        v40 = v150;
        *a4 += v150;
        *(_QWORD *)(a1 + 8) += v40;
        if ((_DWORD)result)
          return result;
        v41 = *(_QWORD *)(a1 + 144);
        v43 = *(char **)(a1 + 168);
        v42 = *(_QWORD *)(a1 + 176);
        if ((unint64_t)v43 >= v42)
        {
          v101 = *v145;
          v102 = v43 - *v145;
          v103 = v102 >> 3;
          v104 = (v102 >> 3) + 1;
          if (v104 >> 61)
            goto LABEL_155;
          v105 = v42 - (_QWORD)v101;
          if (v105 >> 2 > v104)
            v104 = v105 >> 2;
          v25 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8;
          v106 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v25)
            v106 = v104;
          if (!v106)
            goto LABEL_153;
          if (v106 >> 61)
            goto LABEL_154;
          v141 = 8 * v106;
          v107 = operator new(8 * v106);
          v108 = &v107[8 * v103];
          *v108 = v41;
          v44 = v108 + 1;
          if (v43 == v101)
          {
            v8 = v146;
            v110 = v141;
          }
          else
          {
            v109 = v43 - v101 - 8;
            if (v109 < 0x58)
            {
              v8 = v146;
              v110 = v141;
              goto LABEL_131;
            }
            v120 = &v43[-v102] - v107;
            v8 = v146;
            v110 = v141;
            if (v120 < 0x20)
              goto LABEL_158;
            v121 = (v109 >> 3) + 1;
            v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
            v123 = &v43[-v122];
            v108 = (_QWORD *)((char *)v108 - v122);
            v124 = &v107[8 * v103 - 16];
            v125 = v43 - 16;
            v126 = v121 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v127 = *(_OWORD *)v125;
              *(v124 - 1) = *((_OWORD *)v125 - 1);
              *v124 = v127;
              v124 -= 2;
              v125 -= 32;
              v126 -= 4;
            }
            while (v126);
            v43 = v123;
            if (v121 != (v121 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_158:
              do
              {
LABEL_131:
                v128 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *--v108 = v128;
              }
              while (v43 != v101);
            }
          }
          *(_QWORD *)(a1 + 160) = v108;
          *(_QWORD *)(a1 + 168) = v44;
          *(_QWORD *)(a1 + 176) = &v107[v110];
          if (v101)
            operator delete(v101);
          v9 = v147;
          goto LABEL_135;
        }
        if (!v43)
          goto LABEL_153;
        *(_QWORD *)v43 = v41;
        v44 = v43 + 8;
LABEL_135:
        *(_QWORD *)(a1 + 168) = v44;
        *(_DWORD *)(a1 + 136) = -1;
        *(_QWORD *)v148 = 0;
        *(_DWORD *)(v148 + 8) = 0;
        v10 = 5;
        *(_DWORD *)(a1 + 192) = 5;
        continue;
      case 5:
        v45 = *(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160);
        while (2)
        {
          if (*(_DWORD *)(a1 + 24) - 1 <= (int)(v45 >> 3))
            goto LABEL_39;
          result = webm::VarIntParser::Feed(v9, a2, a3, &v150);
          v47 = v150;
          *a4 += v150;
          *(_QWORD *)(a1 + 8) += v47;
          if ((_DWORD)result)
            return result;
          v49 = *(uint64_t **)(a1 + 160);
          v48 = *(uint64_t **)(a1 + 168);
          if (v49 == v48)
            goto LABEL_153;
          v50 = *(v48 - 1) + *(_QWORD *)(a1 + 144) + (-1 << (7 * *(_DWORD *)(a1 + 140) + 6)) + 1;
          v51 = *(_QWORD *)(a1 + 176);
          if ((unint64_t)v48 < v51)
          {
            *v48 = v50;
            v46 = v48 + 1;
LABEL_46:
            *(_QWORD *)(a1 + 168) = v46;
            *(_DWORD *)(a1 + 136) = -1;
            *(_QWORD *)v148 = 0;
            *(_DWORD *)(v148 + 8) = 0;
            v45 = (unint64_t)v46 - *(_QWORD *)(a1 + 160);
            continue;
          }
          break;
        }
        v52 = (char *)v48 - (char *)v49;
        v53 = v48 - v49;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
LABEL_155:
          abort();
        v55 = v51 - (_QWORD)v49;
        if (v55 >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          if (!(v56 >> 61))
          {
            v57 = operator new(8 * v56);
            v58 = (uint64_t *)&v57[8 * v53];
            *v58 = v50;
            v59 = v52 - 8;
            if ((unint64_t)(v52 - 8) >= 0x58)
            {
              v60 = (uint64_t *)&v57[8 * v53];
              v8 = v146;
              if ((unint64_t)((char *)v49 - v57) >= 0x20)
              {
                v61 = (v59 >> 3) + 1;
                v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
                v63 = &v48[v62 / 0xFFFFFFFFFFFFFFF8];
                v60 = &v58[v62 / 0xFFFFFFFFFFFFFFF8];
                v64 = &v57[8 * v53 - 16];
                v65 = v48 - 2;
                v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v67 = *(_OWORD *)v65;
                  *(v64 - 1) = *((_OWORD *)v65 - 1);
                  *v64 = v67;
                  v64 -= 2;
                  v65 -= 4;
                  v66 -= 4;
                }
                while (v66);
                v48 = v63;
                if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_66;
              }
            }
            else
            {
              v60 = (uint64_t *)&v57[8 * v53];
              v8 = v146;
            }
            do
            {
              v68 = *--v48;
              *--v60 = v68;
            }
            while (v48 != v49);
LABEL_66:
            v46 = v58 + 1;
            *(_QWORD *)(a1 + 160) = v60;
            *(_QWORD *)(a1 + 168) = v58 + 1;
            *(_QWORD *)(a1 + 176) = &v57[8 * v56];
            if (v49)
              operator delete(v49);
            v9 = v147;
            goto LABEL_46;
          }
        }
        else
        {
LABEL_153:
          __break(1u);
        }
LABEL_154:
        std::__throw_bad_array_new_length[abi:sn180100]();
      case 6:
        v69 = *(_QWORD *)(a1 + 8);
        v70 = *(_QWORD *)(a1 + 40);
        v71 = v70 - v69;
        if (v70 <= v69)
          return 4294966266;
        v72 = *(int *)(a1 + 24);
        v73 = v71 / v72;
        v151 = v71 / v72;
        if (v71 % v72)
          return 4294966266;
        v74 = *(_QWORD *)(a1 + 160);
        v75 = (*(_QWORD *)(a1 + 168) - v74) >> 3;
        if (v72 <= v75)
        {
          if (v72 < v75)
            *(_QWORD *)(a1 + 168) = v74 + 8 * v72;
        }
        else
        {
          std::vector<unsigned long long>::__append((uint64_t)v145, v72 - v75, &v151);
          v69 = *(_QWORD *)(a1 + 8);
        }
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48) + v69;
        *(_QWORD *)(a1 + 64) = v73;
        goto LABEL_146;
      case 7:
        v77 = *(int64x2_t **)(a1 + 160);
        v76 = *(char **)(a1 + 168);
        v78 = *(_QWORD *)(a1 + 8);
        if (v77 != (int64x2_t *)v76)
        {
          v79 = v76 - (char *)v77 - 8;
          v80 = *(char **)(a1 + 160);
          if (v79 < 0x18)
            goto LABEL_159;
          v81 = (v79 >> 3) + 1;
          v80 = &v77->i8[8 * (v81 & 0x3FFFFFFFFFFFFFFCLL)];
          v82 = 0uLL;
          v83 = (int64x2_t)*(unint64_t *)(a1 + 8);
          v84 = v77 + 1;
          v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = vaddq_s64(v84[-1], v83);
            v82 = vaddq_s64(*v84, v82);
            v84 += 2;
            v85 -= 4;
          }
          while (v85);
          v78 = vaddvq_s64(vaddq_s64(v82, v83));
          if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_159:
            do
            {
              v86 = *(_QWORD *)v80;
              v80 += 8;
              v78 += v86;
            }
            while (v80 != v76);
          }
        }
        v87 = *(_QWORD *)(a1 + 40);
        v88 = v87 - v78;
        if (v87 > v78)
        {
          v89 = *(_QWORD *)(a1 + 176);
          if ((unint64_t)v76 >= v89)
          {
            v111 = v76 - (char *)v77;
            v112 = (v76 - (char *)v77) >> 3;
            v113 = v112 + 1;
            if ((unint64_t)(v112 + 1) >> 61)
              goto LABEL_155;
            v114 = v89 - (_QWORD)v77;
            if (v114 >> 2 > v113)
              v113 = v114 >> 2;
            v25 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8;
            v115 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v25)
              v115 = v113;
            if (!v115)
              goto LABEL_153;
            if (v115 >> 61)
              goto LABEL_154;
            v142 = 8 * v115;
            v116 = operator new(8 * v115);
            v117 = &v116[8 * v112];
            *v117 = v88;
            v90 = v117 + 1;
            if (v77 == (int64x2_t *)v76)
            {
              v8 = v146;
              v119 = v142;
            }
            else
            {
              v118 = v111 - 8;
              if ((unint64_t)(v111 - 8) >= 0x58)
              {
                v8 = v146;
                v119 = v142;
                if ((unint64_t)((char *)v77 - v116) >= 0x20)
                {
                  v129 = (v118 >> 3) + 1;
                  v130 = 8 * (v129 & 0x3FFFFFFFFFFFFFFCLL);
                  v131 = &v76[-v130];
                  v117 = (_QWORD *)((char *)v117 - v130);
                  v132 = &v116[8 * v112 - 16];
                  v133 = v76 - 16;
                  v134 = v129 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v135 = *(_OWORD *)v133;
                    *(v132 - 1) = *((_OWORD *)v133 - 1);
                    *v132 = v135;
                    v132 -= 2;
                    v133 -= 32;
                    v134 -= 4;
                  }
                  while (v134);
                  v76 = v131;
                  if (v129 == (v129 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_141;
                }
              }
              else
              {
                v8 = v146;
                v119 = v142;
              }
              do
              {
                v136 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *--v117 = v136;
              }
              while (v76 != (char *)v77);
            }
LABEL_141:
            *(_QWORD *)(a1 + 160) = v117;
            *(_QWORD *)(a1 + 168) = v90;
            *(_QWORD *)(a1 + 176) = &v116[v119];
            if (v77)
              operator delete(v77);
            v9 = v147;
            goto LABEL_144;
          }
          if (!v76)
            goto LABEL_153;
          *(_QWORD *)v76 = v88;
          v90 = v76 + 8;
LABEL_144:
          *(_QWORD *)(a1 + 168) = v90;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48) + *(unsigned int *)(a1 + 36) + *(_QWORD *)(a1 + 8);
          v137 = *(_QWORD **)(a1 + 160);
          if (v90 == v137)
            goto LABEL_153;
          *(_QWORD *)(a1 + 64) = *v137;
LABEL_146:
          v10 = 9;
          *(_DWORD *)(a1 + 192) = 9;
          continue;
        }
        return 4294966266;
      case 8:
        v138 = *(_QWORD *)(a1 + 8);
        do
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)(a1 + 40) - v138, &v150);
          v139 = v150;
          *a4 += v150;
          v138 = *(_QWORD *)(a1 + 8) + v139;
          *(_QWORD *)(a1 + 8) = v138;
        }
        while ((_DWORD)result == -1);
        return result;
      case 9:
        v91 = *(_QWORD *)(a1 + 184);
        v92 = *(_QWORD *)(a1 + 160);
        if (v91 >= (*(_QWORD *)(a1 + 168) - v92) >> 3)
          goto LABEL_123;
        v93 = (uint64_t *)(v92 + 8 * v91);
        while (2)
        {
          v94 = *v93;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, v8, a3);
          v95 = *(_QWORD *)(a1 + 184);
          v96 = *(_QWORD *)(a1 + 160);
          v97 = (*(_QWORD *)(a1 + 168) - v96) >> 3;
          if (v97 <= v95)
            goto LABEL_153;
          *a4 += v94 - *(_QWORD *)(v96 + 8 * v95);
          if ((_DWORD)result)
            return result;
          v98 = v95 + 1;
          if (v98 < v97)
          {
            *(_QWORD *)(a1 + 56) += *(_QWORD *)(a1 + 64);
            v93 = (uint64_t *)(v96 + 8 * v98);
            *(_QWORD *)(a1 + 64) = *v93;
            *(_QWORD *)(a1 + 184) = v98;
            continue;
          }
          break;
        }
        *(_QWORD *)(a1 + 184) = v98;
LABEL_123:
        v10 = 10;
        *(_DWORD *)(a1 + 192) = 10;
        continue;
      case 10:
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 112))(a2, v8, v144);
      default:
        continue;
    }
  }
}

BOOL webm::BasicBlockParser<webm::Block>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 192) == 8;
}

__n128 webm::BasicBlockParser<webm::SimpleBlock>::Init(uint64_t a1, __n128 *a2, __n128 result)
{
  void *v5;
  uint64_t v6;
  __int128 v7;

  if (a2->n128_u64[1] + 1 >= 6)
  {
    v6 = a1 + 168;
    v5 = *(void **)(a1 + 168);
    *(_QWORD *)(v6 - 96) = 0;
    v7 = 0uLL;
    *(_OWORD *)(v6 - 128) = 0u;
    *(_OWORD *)(v6 - 112) = 0u;
    *(_OWORD *)(v6 - 160) = 0u;
    *(_OWORD *)(v6 - 144) = 0u;
    *(_QWORD *)(v6 - 80) = 0;
    *(_QWORD *)(v6 - 72) = 0;
    *(_DWORD *)(v6 - 56) = -1;
    *(_QWORD *)(v6 - 52) = 0;
    *(_DWORD *)(v6 - 44) = 0;
    *(_QWORD *)(v6 - 40) = 2;
    *(_DWORD *)(v6 - 24) = -1;
    *(_QWORD *)(v6 - 12) = 0;
    *(_QWORD *)(v6 - 20) = 0;
    *(_DWORD *)(v6 - 4) = 0;
    if (v5)
    {
      *(_QWORD *)(a1 + 176) = v5;
      operator delete(v5);
      v7 = 0uLL;
    }
    *(_DWORD *)(v6 + 32) = 0;
    *(_OWORD *)v6 = v7;
    *(_OWORD *)(v6 + 16) = v7;
    result = *a2;
    *(_QWORD *)(a1 + 56) = a2[1].n128_u64[0];
    *(__n128 *)(a1 + 40) = result;
  }
  return result;
}

_QWORD *webm::BasicBlockParser<webm::SimpleBlock>::~BasicBlockParser(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0D6F00;
  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t webm::BasicBlockParser<webm::SimpleBlock>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  _QWORD *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _BYTE *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  _OWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  int64x2_t *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  int64x2_t v82;
  int64x2_t v83;
  int64x2_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  int v99;
  int v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  _BYTE *v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  _BYTE *v116;
  _QWORD *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  _OWORD *v124;
  char *v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  _OWORD *v132;
  char *v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char **v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned __int8 v149;
  uint64_t v150;
  unint64_t v151;

  *a4 = 0;
  v150 = 0;
  v8 = a1 + 40;
  v9 = a1 + 136;
  v147 = a1 + 136;
  v148 = a1 + 148;
  v144 = a1 + 16;
  v145 = (char **)(a1 + 168);
  v143 = a1 + 80;
  v10 = *(_DWORD *)(a1 + 200);
  v146 = a1 + 40;
LABEL_2:
  while (2)
  {
    switch(v10)
    {
      case 0:
        result = webm::BlockHeaderParser::Feed(v143, a2, a3, &v150);
        v12 = v150;
        *a4 += v150;
        *(_QWORD *)(a1 + 8) += v12;
        if ((_DWORD)result)
          return result;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 88);
        *(_WORD *)(a1 + 28) = *(_WORD *)(a1 + 96);
        v13 = *(unsigned __int8 *)(a1 + 98);
        v10 = 1;
        *(_BYTE *)(a1 + 31) = (*(_BYTE *)(a1 + 98) & 8) == 0;
        *(_BYTE *)(a1 + 32) = v13 >> 7;
        *(_BYTE *)(a1 + 33) = v13 & 1;
        v14 = v13 & 6;
        *(_BYTE *)(a1 + 30) = v14;
        if (!v14)
        {
          *(_DWORD *)(a1 + 24) = 1;
          v10 = 2;
        }
        *(_DWORD *)(a1 + 200) = v10;
        continue;
      case 1:
        v149 = 0;
        v151 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v149, &v151);
        if ((_DWORD)result)
          return result;
        ++*a4;
        ++*(_QWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 24) = v149 + 1;
        v10 = 2;
        *(_DWORD *)(a1 + 200) = 2;
        continue;
      case 2:
        LODWORD(v151) = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *))(*(_QWORD *)a2 + 80))(a2, v8, v144, &v151);
        if ((_DWORD)result)
          return result;
        if ((_DWORD)v151 == 1)
        {
          v10 = 8;
          *(_DWORD *)(a1 + 200) = 8;
        }
        else
        {
          v99 = *(unsigned __int8 *)(a1 + 30);
          if (*(_BYTE *)(a1 + 30))
          {
            if (v99 == 6)
              v100 = 4;
            else
              v100 = 6;
            if (v99 == 2)
              v10 = 3;
            else
              v10 = v100;
            if (*(_DWORD *)(a1 + 24) == 1)
              v10 = 7;
            *(_DWORD *)(a1 + 200) = v10;
          }
          else
          {
            v10 = 7;
            *(_DWORD *)(a1 + 200) = 7;
          }
        }
        continue;
      case 3:
        if (*(_DWORD *)(a1 + 24) - 1 <= (int)((*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 3))
          goto LABEL_39;
        while (1)
        {
          v149 = 0;
          do
          {
            v151 = 0;
            result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, unint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v149, &v151);
            if ((_DWORD)result)
              return result;
            ++*a4;
            ++*(_QWORD *)(a1 + 8);
            v15 = v149;
            v16 = *(_QWORD *)(a1 + 160) + v149;
            *(_QWORD *)(a1 + 160) = v16;
          }
          while (v15 == 255);
          v18 = *(char **)(a1 + 176);
          v17 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v18 < v17)
          {
            if (!v18)
              goto LABEL_153;
            *(_QWORD *)v18 = v16;
            v19 = v18 + 8;
            goto LABEL_38;
          }
          v20 = *v145;
          v21 = v18 - *v145;
          v22 = v21 >> 3;
          v23 = (v21 >> 3) + 1;
          if (v23 >> 61)
            goto LABEL_155;
          v24 = v17 - (_QWORD)v20;
          if (v24 >> 2 > v23)
            v23 = v24 >> 2;
          v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8;
          v26 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v25)
            v26 = v23;
          if (!v26)
            goto LABEL_153;
          if (v26 >> 61)
            goto LABEL_154;
          v140 = 8 * v26;
          v27 = operator new(8 * v26);
          v28 = &v27[8 * v22];
          *v28 = v16;
          v19 = v28 + 1;
          if (v18 == v20)
          {
            v8 = v146;
            v30 = v140;
          }
          else
          {
            v29 = v18 - v20 - 8;
            if (v29 >= 0x58)
            {
              v31 = &v18[-v21] - v27;
              v8 = v146;
              v30 = v140;
              if (v31 >= 0x20)
              {
                v32 = (v29 >> 3) + 1;
                v33 = 8 * (v32 & 0x3FFFFFFFFFFFFFFCLL);
                v34 = &v18[-v33];
                v28 = (_QWORD *)((char *)v28 - v33);
                v35 = &v27[8 * v22 - 16];
                v36 = v18 - 16;
                v37 = v32 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v38 = *(_OWORD *)v36;
                  *(v35 - 1) = *((_OWORD *)v36 - 1);
                  *v35 = v38;
                  v35 -= 2;
                  v36 -= 32;
                  v37 -= 4;
                }
                while (v37);
                v18 = v34;
                if (v32 == (v32 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_35;
              }
            }
            else
            {
              v8 = v146;
              v30 = v140;
            }
            do
            {
              v39 = *((_QWORD *)v18 - 1);
              v18 -= 8;
              *--v28 = v39;
            }
            while (v18 != v20);
          }
LABEL_35:
          *(_QWORD *)(a1 + 168) = v28;
          *(_QWORD *)(a1 + 176) = v19;
          *(_QWORD *)(a1 + 184) = &v27[v30];
          if (v20)
            operator delete(v20);
          v9 = v147;
LABEL_38:
          *(_QWORD *)(a1 + 176) = v19;
          *(_QWORD *)(a1 + 160) = 0;
          if (*(_DWORD *)(a1 + 24) - 1 <= (int)(((unint64_t)v19 - *(_QWORD *)(a1 + 168)) >> 3))
          {
LABEL_39:
            v10 = 7;
            *(_DWORD *)(a1 + 200) = 7;
            goto LABEL_2;
          }
        }
      case 4:
        result = webm::VarIntParser::Feed(v9, a2, a3, &v150);
        v40 = v150;
        *a4 += v150;
        *(_QWORD *)(a1 + 8) += v40;
        if ((_DWORD)result)
          return result;
        v41 = *(_QWORD *)(a1 + 152);
        v43 = *(char **)(a1 + 176);
        v42 = *(_QWORD *)(a1 + 184);
        if ((unint64_t)v43 >= v42)
        {
          v101 = *v145;
          v102 = v43 - *v145;
          v103 = v102 >> 3;
          v104 = (v102 >> 3) + 1;
          if (v104 >> 61)
            goto LABEL_155;
          v105 = v42 - (_QWORD)v101;
          if (v105 >> 2 > v104)
            v104 = v105 >> 2;
          v25 = (unint64_t)v105 >= 0x7FFFFFFFFFFFFFF8;
          v106 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v25)
            v106 = v104;
          if (!v106)
            goto LABEL_153;
          if (v106 >> 61)
            goto LABEL_154;
          v141 = 8 * v106;
          v107 = operator new(8 * v106);
          v108 = &v107[8 * v103];
          *v108 = v41;
          v44 = v108 + 1;
          if (v43 == v101)
          {
            v8 = v146;
            v110 = v141;
          }
          else
          {
            v109 = v43 - v101 - 8;
            if (v109 < 0x58)
            {
              v8 = v146;
              v110 = v141;
              goto LABEL_131;
            }
            v120 = &v43[-v102] - v107;
            v8 = v146;
            v110 = v141;
            if (v120 < 0x20)
              goto LABEL_158;
            v121 = (v109 >> 3) + 1;
            v122 = 8 * (v121 & 0x3FFFFFFFFFFFFFFCLL);
            v123 = &v43[-v122];
            v108 = (_QWORD *)((char *)v108 - v122);
            v124 = &v107[8 * v103 - 16];
            v125 = v43 - 16;
            v126 = v121 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v127 = *(_OWORD *)v125;
              *(v124 - 1) = *((_OWORD *)v125 - 1);
              *v124 = v127;
              v124 -= 2;
              v125 -= 32;
              v126 -= 4;
            }
            while (v126);
            v43 = v123;
            if (v121 != (v121 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_158:
              do
              {
LABEL_131:
                v128 = *((_QWORD *)v43 - 1);
                v43 -= 8;
                *--v108 = v128;
              }
              while (v43 != v101);
            }
          }
          *(_QWORD *)(a1 + 168) = v108;
          *(_QWORD *)(a1 + 176) = v44;
          *(_QWORD *)(a1 + 184) = &v107[v110];
          if (v101)
            operator delete(v101);
          v9 = v147;
          goto LABEL_135;
        }
        if (!v43)
          goto LABEL_153;
        *(_QWORD *)v43 = v41;
        v44 = v43 + 8;
LABEL_135:
        *(_QWORD *)(a1 + 176) = v44;
        *(_DWORD *)(a1 + 144) = -1;
        *(_QWORD *)v148 = 0;
        *(_DWORD *)(v148 + 8) = 0;
        v10 = 5;
        *(_DWORD *)(a1 + 200) = 5;
        continue;
      case 5:
        v45 = *(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168);
        while (2)
        {
          if (*(_DWORD *)(a1 + 24) - 1 <= (int)(v45 >> 3))
            goto LABEL_39;
          result = webm::VarIntParser::Feed(v9, a2, a3, &v150);
          v47 = v150;
          *a4 += v150;
          *(_QWORD *)(a1 + 8) += v47;
          if ((_DWORD)result)
            return result;
          v49 = *(uint64_t **)(a1 + 168);
          v48 = *(uint64_t **)(a1 + 176);
          if (v49 == v48)
            goto LABEL_153;
          v50 = *(v48 - 1) + *(_QWORD *)(a1 + 152) + (-1 << (7 * *(_DWORD *)(a1 + 148) + 6)) + 1;
          v51 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v48 < v51)
          {
            *v48 = v50;
            v46 = v48 + 1;
LABEL_46:
            *(_QWORD *)(a1 + 176) = v46;
            *(_DWORD *)(a1 + 144) = -1;
            *(_QWORD *)v148 = 0;
            *(_DWORD *)(v148 + 8) = 0;
            v45 = (unint64_t)v46 - *(_QWORD *)(a1 + 168);
            continue;
          }
          break;
        }
        v52 = (char *)v48 - (char *)v49;
        v53 = v48 - v49;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 61)
LABEL_155:
          abort();
        v55 = v51 - (_QWORD)v49;
        if (v55 >> 2 > v54)
          v54 = v55 >> 2;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8)
          v56 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v56 = v54;
        if (v56)
        {
          if (!(v56 >> 61))
          {
            v57 = operator new(8 * v56);
            v58 = (uint64_t *)&v57[8 * v53];
            *v58 = v50;
            v59 = v52 - 8;
            if ((unint64_t)(v52 - 8) >= 0x58)
            {
              v60 = (uint64_t *)&v57[8 * v53];
              v8 = v146;
              if ((unint64_t)((char *)v49 - v57) >= 0x20)
              {
                v61 = (v59 >> 3) + 1;
                v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
                v63 = &v48[v62 / 0xFFFFFFFFFFFFFFF8];
                v60 = &v58[v62 / 0xFFFFFFFFFFFFFFF8];
                v64 = &v57[8 * v53 - 16];
                v65 = v48 - 2;
                v66 = v61 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v67 = *(_OWORD *)v65;
                  *(v64 - 1) = *((_OWORD *)v65 - 1);
                  *v64 = v67;
                  v64 -= 2;
                  v65 -= 4;
                  v66 -= 4;
                }
                while (v66);
                v48 = v63;
                if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_66;
              }
            }
            else
            {
              v60 = (uint64_t *)&v57[8 * v53];
              v8 = v146;
            }
            do
            {
              v68 = *--v48;
              *--v60 = v68;
            }
            while (v48 != v49);
LABEL_66:
            v46 = v58 + 1;
            *(_QWORD *)(a1 + 168) = v60;
            *(_QWORD *)(a1 + 176) = v58 + 1;
            *(_QWORD *)(a1 + 184) = &v57[8 * v56];
            if (v49)
              operator delete(v49);
            v9 = v147;
            goto LABEL_46;
          }
        }
        else
        {
LABEL_153:
          __break(1u);
        }
LABEL_154:
        std::__throw_bad_array_new_length[abi:sn180100]();
      case 6:
        v69 = *(_QWORD *)(a1 + 8);
        v70 = *(_QWORD *)(a1 + 48);
        v71 = v70 - v69;
        if (v70 <= v69)
          return 4294966266;
        v72 = *(int *)(a1 + 24);
        v73 = v71 / v72;
        v151 = v71 / v72;
        if (v71 % v72)
          return 4294966266;
        v74 = *(_QWORD *)(a1 + 168);
        v75 = (*(_QWORD *)(a1 + 176) - v74) >> 3;
        if (v72 <= v75)
        {
          if (v72 < v75)
            *(_QWORD *)(a1 + 176) = v74 + 8 * v72;
        }
        else
        {
          std::vector<unsigned long long>::__append((uint64_t)v145, v72 - v75, &v151);
          v69 = *(_QWORD *)(a1 + 8);
        }
        *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56) + v69;
        *(_QWORD *)(a1 + 72) = v73;
        goto LABEL_146;
      case 7:
        v77 = *(int64x2_t **)(a1 + 168);
        v76 = *(char **)(a1 + 176);
        v78 = *(_QWORD *)(a1 + 8);
        if (v77 != (int64x2_t *)v76)
        {
          v79 = v76 - (char *)v77 - 8;
          v80 = *(char **)(a1 + 168);
          if (v79 < 0x18)
            goto LABEL_159;
          v81 = (v79 >> 3) + 1;
          v80 = &v77->i8[8 * (v81 & 0x3FFFFFFFFFFFFFFCLL)];
          v82 = 0uLL;
          v83 = (int64x2_t)*(unint64_t *)(a1 + 8);
          v84 = v77 + 1;
          v85 = v81 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v83 = vaddq_s64(v84[-1], v83);
            v82 = vaddq_s64(*v84, v82);
            v84 += 2;
            v85 -= 4;
          }
          while (v85);
          v78 = vaddvq_s64(vaddq_s64(v82, v83));
          if (v81 != (v81 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_159:
            do
            {
              v86 = *(_QWORD *)v80;
              v80 += 8;
              v78 += v86;
            }
            while (v80 != v76);
          }
        }
        v87 = *(_QWORD *)(a1 + 48);
        v88 = v87 - v78;
        if (v87 > v78)
        {
          v89 = *(_QWORD *)(a1 + 184);
          if ((unint64_t)v76 >= v89)
          {
            v111 = v76 - (char *)v77;
            v112 = (v76 - (char *)v77) >> 3;
            v113 = v112 + 1;
            if ((unint64_t)(v112 + 1) >> 61)
              goto LABEL_155;
            v114 = v89 - (_QWORD)v77;
            if (v114 >> 2 > v113)
              v113 = v114 >> 2;
            v25 = (unint64_t)v114 >= 0x7FFFFFFFFFFFFFF8;
            v115 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v25)
              v115 = v113;
            if (!v115)
              goto LABEL_153;
            if (v115 >> 61)
              goto LABEL_154;
            v142 = 8 * v115;
            v116 = operator new(8 * v115);
            v117 = &v116[8 * v112];
            *v117 = v88;
            v90 = v117 + 1;
            if (v77 == (int64x2_t *)v76)
            {
              v8 = v146;
              v119 = v142;
            }
            else
            {
              v118 = v111 - 8;
              if ((unint64_t)(v111 - 8) >= 0x58)
              {
                v8 = v146;
                v119 = v142;
                if ((unint64_t)((char *)v77 - v116) >= 0x20)
                {
                  v129 = (v118 >> 3) + 1;
                  v130 = 8 * (v129 & 0x3FFFFFFFFFFFFFFCLL);
                  v131 = &v76[-v130];
                  v117 = (_QWORD *)((char *)v117 - v130);
                  v132 = &v116[8 * v112 - 16];
                  v133 = v76 - 16;
                  v134 = v129 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v135 = *(_OWORD *)v133;
                    *(v132 - 1) = *((_OWORD *)v133 - 1);
                    *v132 = v135;
                    v132 -= 2;
                    v133 -= 32;
                    v134 -= 4;
                  }
                  while (v134);
                  v76 = v131;
                  if (v129 == (v129 & 0x3FFFFFFFFFFFFFFCLL))
                    goto LABEL_141;
                }
              }
              else
              {
                v8 = v146;
                v119 = v142;
              }
              do
              {
                v136 = *((_QWORD *)v76 - 1);
                v76 -= 8;
                *--v117 = v136;
              }
              while (v76 != (char *)v77);
            }
LABEL_141:
            *(_QWORD *)(a1 + 168) = v117;
            *(_QWORD *)(a1 + 176) = v90;
            *(_QWORD *)(a1 + 184) = &v116[v119];
            if (v77)
              operator delete(v77);
            v9 = v147;
            goto LABEL_144;
          }
          if (!v76)
            goto LABEL_153;
          *(_QWORD *)v76 = v88;
          v90 = v76 + 8;
LABEL_144:
          *(_QWORD *)(a1 + 176) = v90;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 56) + *(unsigned int *)(a1 + 44) + *(_QWORD *)(a1 + 8);
          v137 = *(_QWORD **)(a1 + 168);
          if (v90 == v137)
            goto LABEL_153;
          *(_QWORD *)(a1 + 72) = *v137;
LABEL_146:
          v10 = 9;
          *(_DWORD *)(a1 + 200) = 9;
          continue;
        }
        return 4294966266;
      case 8:
        v138 = *(_QWORD *)(a1 + 8);
        do
        {
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 24))(a3, *(_QWORD *)(a1 + 48) - v138, &v150);
          v139 = v150;
          *a4 += v150;
          v138 = *(_QWORD *)(a1 + 8) + v139;
          *(_QWORD *)(a1 + 8) = v138;
        }
        while ((_DWORD)result == -1);
        return result;
      case 9:
        v91 = *(_QWORD *)(a1 + 192);
        v92 = *(_QWORD *)(a1 + 168);
        if (v91 >= (*(_QWORD *)(a1 + 176) - v92) >> 3)
          goto LABEL_123;
        v93 = (uint64_t *)(v92 + 8 * v91);
        while (2)
        {
          v94 = *v93;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(a2, v8, a3);
          v95 = *(_QWORD *)(a1 + 192);
          v96 = *(_QWORD *)(a1 + 168);
          v97 = (*(_QWORD *)(a1 + 176) - v96) >> 3;
          if (v97 <= v95)
            goto LABEL_153;
          *a4 += v94 - *(_QWORD *)(v96 + 8 * v95);
          if ((_DWORD)result)
            return result;
          v98 = v95 + 1;
          if (v98 < v97)
          {
            *(_QWORD *)(a1 + 64) += *(_QWORD *)(a1 + 72);
            v93 = (uint64_t *)(v96 + 8 * v98);
            *(_QWORD *)(a1 + 72) = *v93;
            *(_QWORD *)(a1 + 192) = v98;
            continue;
          }
          break;
        }
        *(_QWORD *)(a1 + 192) = v98;
LABEL_123:
        v10 = 10;
        *(_DWORD *)(a1 + 200) = 10;
        continue;
      case 10:
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, v8, v144);
      default:
        continue;
    }
  }
}

BOOL webm::BasicBlockParser<webm::SimpleBlock>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 200) == 8;
}

void webm::BasicBlockParser<webm::Block>::~BasicBlockParser(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0D6EB8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::ElementParser::GetCachedMetadata()
{
  return 0;
}

void webm::BasicBlockParser<webm::SimpleBlock>::~BasicBlockParser(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0D6F00;
  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void std::vector<unsigned long long>::__append(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;

  v7 = *(char **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = v7;
  if (a2 > (v6 - (uint64_t)v7) >> 3)
  {
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    v11 = v10 >> 3;
    v12 = (v10 >> 3) + a2;
    if (!(v12 >> 61))
    {
      v13 = v6 - (_QWORD)v9;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v17 = &v15[8 * v11];
      v18 = 8 * a2;
      v19 = &v17[8 * a2];
      v20 = v17;
      do
      {
        if (!v20)
          goto LABEL_31;
        *(_QWORD *)v20 = *a3;
        v20 += 8;
        v18 -= 8;
      }
      while (v18);
      if (v7 != v9)
      {
        v21 = v7 - v9 - 8;
        if (v21 < 0x58)
          goto LABEL_36;
        if ((unint64_t)(v7 - &v15[v10]) < 0x20)
          goto LABEL_36;
        v22 = (v21 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v8 = &v7[-v23];
        v17 -= v23;
        v24 = &v15[8 * v11 - 16];
        v25 = v7 - 16;
        v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
          *(_OWORD *)v24 = v27;
          v24 -= 32;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        if (v22 != (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_36:
          do
          {
            v28 = *((_QWORD *)v8 - 1);
            v8 -= 8;
            *((_QWORD *)v17 - 1) = v28;
            v17 -= 8;
          }
          while (v8 != v9);
        }
      }
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v19;
      *(_QWORD *)(a1 + 16) = &v15[8 * v14];
      if (v9)
        operator delete(v9);
      return;
    }
LABEL_32:
    abort();
  }
  if (!a2)
    goto LABEL_16;
  v16 = 8 * a2;
  do
  {
    if (!v8)
    {
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    *(_QWORD *)v8 = *a3;
    v8 += 8;
    v16 -= 8;
  }
  while (v16);
  v8 = &v7[8 * a2];
LABEL_16:
  *(_QWORD *)(a1 + 8) = v8;
}

_QWORD *webm::BufferReader::BufferReader(_QWORD *a1, const void *a2, size_t __sz)
{
  char *v6;
  char *v7;

  *a1 = &off_24C0D6F48;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v6 = (char *)operator new(__sz);
    a1[1] = v6;
    a1[2] = v6;
    v7 = &v6[__sz];
    a1[3] = &v6[__sz];
    memmove(v6, a2, __sz);
    a1[2] = v7;
  }
  a1[4] = 0;
  return a1;
}

{
  char *v6;
  char *v7;

  *a1 = &off_24C0D6F48;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v6 = (char *)operator new(__sz);
    a1[1] = v6;
    a1[2] = v6;
    v7 = &v6[__sz];
    a1[3] = &v6[__sz];
    memmove(v6, a2, __sz);
    a1[2] = v7;
  }
  a1[4] = 0;
  return a1;
}

_QWORD *webm::BufferReader::BufferReader(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  char *v7;

  *a1 = &off_24C0D6F48;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if ((v5 & 0x8000000000000000) != 0)
      abort();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    a1[1] = v6;
    a1[2] = v6;
    v7 = &v6[v5];
    a1[3] = &v6[v5];
    memcpy(v6, v4, v5);
    a1[2] = v7;
  }
  a1[4] = 0;
  return a1;
}

{
  uint64_t v3;
  const void *v4;
  size_t v5;
  char *v6;
  char *v7;

  *a1 = &off_24C0D6F48;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    if ((v5 & 0x8000000000000000) != 0)
      abort();
    v6 = (char *)operator new(v3 - *(_QWORD *)a2);
    a1[1] = v6;
    a1[2] = v6;
    v7 = &v6[v5];
    a1[3] = &v6[v5];
    memcpy(v6, v4, v5);
    a1[2] = v7;
  }
  a1[4] = 0;
  return a1;
}

__n128 webm::BufferReader::BufferReader(_QWORD *a1, __n128 *a2)
{
  __n128 result;

  *a1 = &off_24C0D6F48;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *a2;
  *(__n128 *)(a1 + 1) = *a2;
  a1[3] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a1[4] = 0;
  return result;
}

{
  __n128 result;

  *a1 = &off_24C0D6F48;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *a2;
  *(__n128 *)(a1 + 1) = *a2;
  a1[3] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a1[4] = 0;
  return result;
}

__n128 webm::BufferReader::BufferReader(_QWORD *a1, uint64_t a2)
{
  __n128 result;
  uint64_t v3;

  *a1 = &off_24C0D6F48;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 1) = result;
  v3 = *(_QWORD *)(a2 + 32);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  a1[4] = v3;
  *(_QWORD *)(a2 + 32) = 0;
  return result;
}

{
  __n128 result;
  uint64_t v3;

  *a1 = &off_24C0D6F48;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 1) = result;
  v3 = *(_QWORD *)(a2 + 32);
  a1[3] = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  a1[4] = v3;
  *(_QWORD *)(a2 + 32) = 0;
  return result;
}

_QWORD *webm::BufferReader::operator=(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  if (a1 != a2)
  {
    v4 = a2 + 1;
    v6 = a1 + 1;
    v5 = (void *)a1[1];
    if (v5)
    {
      a1[2] = v5;
      operator delete(v5);
      *v6 = 0;
      a1[2] = 0;
      a1[3] = 0;
    }
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    v7 = a2[4];
    a1[3] = a2[3];
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
    a1[4] = v7;
    a2[4] = 0;
  }
  return a1;
}

_QWORD *webm::BufferReader::operator=(_QWORD *a1, const void *a2, size_t __sz)
{
  void *v6;
  size_t v7;
  void *v8;

  if (!__sz)
  {
    v6 = 0;
    v7 = 0;
    v8 = (void *)a1[1];
    if (!v8)
      goto LABEL_5;
    goto LABEL_4;
  }
  if ((__sz & 0x8000000000000000) != 0)
    abort();
  v6 = operator new(__sz);
  v7 = (size_t)v6 + __sz;
  memmove(v6, a2, __sz);
  v8 = (void *)a1[1];
  if (v8)
  {
LABEL_4:
    a1[2] = v8;
    operator delete(v8);
  }
LABEL_5:
  a1[1] = v6;
  a1[2] = v7;
  a1[3] = v7;
  a1[4] = 0;
  return a1;
}

uint64_t webm::BufferReader::Read(webm::BufferReader *this, size_t a2, unsigned __int8 *__dst, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v12;
  size_t v13;

  *a4 = 0;
  v4 = *((_QWORD *)this + 1);
  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)this + 4);
  v7 = v6 + v4;
  if (v6 + v4 == v5)
    return 4294967293;
  v12 = v5 - v7;
  if (v5 - v7 >= a2)
    v13 = a2;
  else
    v13 = v5 - v7;
  if (v13)
  {
    memmove(__dst, (const void *)(v4 + v6), v13);
    v6 = *((_QWORD *)this + 4);
  }
  *a4 = v13;
  *((_QWORD *)this + 4) = v6 + v13;
  if (v12 >= a2)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t webm::BufferReader::Skip(webm::BufferReader *this, unint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  BOOL v8;

  *a3 = 0;
  v3 = *((_QWORD *)this + 2);
  v4 = *((_QWORD *)this + 4);
  v5 = v4 + *((_QWORD *)this + 1);
  if (v5 == v3)
    return 4294967293;
  v7 = v3 - v5;
  v8 = v7 >= a2;
  if (v7 >= a2)
    v7 = a2;
  *a3 = v7;
  *((_QWORD *)this + 4) = v7 + v4;
  if (v8)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t webm::BufferReader::Position(webm::BufferReader *this)
{
  return *((_QWORD *)this + 4);
}

void webm::BufferReader::~BufferReader(webm::BufferReader *this)
{
  void *v2;

  *(_QWORD *)this = &off_24C0D6F48;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  *(_QWORD *)this = &off_24C0D6F48;
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::Callback::OnElementBegin(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::Callback::OnUnknownElement(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (!*a4)
    return 0;
  do
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    *a4 = *a4;
  }
  while ((_DWORD)result == -1);
  return result;
}

uint64_t webm::Callback::Skip(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;

  if (!*a2)
    return 0;
  do
  {
    v5 = 0;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    *a2 -= v5;
  }
  while ((_DWORD)result == -1);
  return result;
}

uint64_t webm::Callback::OnEbml()
{
  return 0;
}

uint64_t webm::Callback::OnVoid(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (!*a4)
    return 0;
  do
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    *a4 = *a4;
  }
  while ((_DWORD)result == -1);
  return result;
}

uint64_t webm::Callback::OnSegmentBegin(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::Callback::OnSeek()
{
  return 0;
}

uint64_t webm::Callback::OnInfo()
{
  return 0;
}

uint64_t webm::Callback::OnClusterBegin(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t webm::Callback::OnSimpleBlockBegin(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t webm::Callback::OnSimpleBlockEnd()
{
  return 0;
}

uint64_t webm::Callback::OnBlockGroupBegin(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::Callback::OnBlockBegin(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t webm::Callback::OnBlockEnd()
{
  return 0;
}

uint64_t webm::Callback::OnBlockGroupEnd()
{
  return 0;
}

uint64_t webm::Callback::OnFrame(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (!*a4)
    return 0;
  do
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    *a4 = *a4;
  }
  while ((_DWORD)result == -1);
  return result;
}

uint64_t webm::Callback::OnClusterEnd()
{
  return 0;
}

uint64_t webm::Callback::OnTrackEntry()
{
  return 0;
}

uint64_t webm::Callback::OnCuePoint()
{
  return 0;
}

uint64_t webm::Callback::OnEditionEntry()
{
  return 0;
}

uint64_t webm::Callback::OnTag()
{
  return 0;
}

uint64_t webm::Callback::OnSegmentEnd()
{
  return 0;
}

uint64_t webm::Callback::OnElementEnd()
{
  return 0;
}

void webm::Callback::~Callback(webm::Callback *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::DateParser::Init(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if ((v2 | 8) != 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

uint64_t webm::ElementParser::WasSkipped(webm::ElementParser *this)
{
  return 0;
}

_QWORD *webm::FileReader::FileReader(_QWORD *this, __sFILE *a2)
{
  *this = &off_24C0D7050;
  this[1] = a2;
  this[2] = 0;
  return this;
}

{
  *this = &off_24C0D7050;
  this[1] = a2;
  this[2] = 0;
  return this;
}

_QWORD *webm::FileReader::FileReader(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *result = &off_24C0D7050;
  result[1] = v2;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *result = &off_24C0D7050;
  result[1] = v2;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t webm::FileReader::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  FILE *v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(FILE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    if (v5)
      fclose(v5);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return a1;
}

uint64_t webm::FileReader::Read(webm::FileReader *this, size_t __nitems, unsigned __int8 *__ptr, unint64_t *a4)
{
  FILE *v5;
  size_t v8;
  unsigned int v9;

  v5 = (FILE *)*((_QWORD *)this + 1);
  if (v5)
  {
    v8 = fread(__ptr, 1uLL, __nitems, v5);
    *a4 = v8;
    *((_QWORD *)this + 2) += v8;
    if (v8 == __nitems)
      v9 = 0;
    else
      v9 = -1;
    if (v8)
      return v9;
    else
      return 4294967293;
  }
  else
  {
    *a4 = 0;
    return 4294967293;
  }
}

uint64_t webm::FileReader::Skip(webm::FileReader *this, uint64_t a2, unint64_t *a3)
{
  FILE *v4;
  uint64_t v7;
  size_t v8;
  size_t v9;
  unsigned int v10;
  _BYTE __ptr[1024];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  v4 = (FILE *)*((_QWORD *)this + 1);
  if (!v4)
    return 4294967293;
  if ((unint64_t)a2 >= 0x7FFFFFFFFFFFFFFFLL)
    v7 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v7 = a2;
  if (fseek(v4, v7, 1))
  {
    clearerr(*((FILE **)this + 1));
    if ((unint64_t)a2 >= 0x400)
      v8 = 1024;
    else
      v8 = a2;
    v9 = fread(__ptr, 1uLL, v8, *((FILE **)this + 1));
    *a3 += v9;
    *((_QWORD *)this + 2) += v9;
    if (v9 == a2)
      v10 = 0;
    else
      v10 = -1;
    if (*a3)
      return v10;
    else
      return 4294967293;
  }
  else
  {
    *a3 = v7;
    *((_QWORD *)this + 2) += v7;
    return a2 >> 63;
  }
}

uint64_t webm::FileReader::Position(webm::FileReader *this)
{
  return *((_QWORD *)this + 2);
}

void webm::FileReader::~FileReader(webm::FileReader *this)
{
  FILE *v2;

  v2 = (FILE *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0D7050;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    fclose(v2);
}

{
  FILE *v2;

  v2 = (FILE *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0D7050;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    fclose(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::FloatParser::Init(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == 8 || v2 == 4)
  {
    *(_QWORD *)(a1 + 24) = 0;
LABEL_9:
    *(_DWORD *)(a1 + 32) = v2;
    *(_BYTE *)(a1 + 36) = v2 == 4;
    return 0;
  }
  if (!v2)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
    goto LABEL_9;
  }
  return 4294966270;
}

uint64_t webm::IdElementParser::Init(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)(v2 - 5) < 0xFFFFFFFFFFFFFFFCLL)
    return 4294966270;
  result = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

uint64_t webm::IdParser::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  *a4 = 0;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 == -1)
  {
    v14 = 0;
    v15 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
    if ((_DWORD)result)
      return result;
    ++*a4;
    v10 = v14;
    if (v14 <= 0xFu)
      return 4294966271;
    v11 = 0;
    do
      v12 = v11++;
    while (((v14 << v12) & 0x80) == 0);
    v7 = v12;
    *(_DWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 12) = v10;
    if (v12 > 4u)
      goto LABEL_3;
LABEL_10:
    if (v7)
    {
      v14 = 0;
      v15 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
      if ((_DWORD)result)
      {
        v13 = 0;
LABEL_13:
        v8 = v13;
        goto LABEL_17;
      }
      v8 = v7;
      *(_DWORD *)(a1 + 12) = v14 | (*(_DWORD *)(a1 + 12) << 8);
      if (v7 != 1)
      {
        v14 = 0;
        v15 = 0;
        v13 = 1;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
        if ((_DWORD)result)
          goto LABEL_13;
        *(_DWORD *)(a1 + 12) = v14 | (*(_DWORD *)(a1 + 12) << 8);
        if (v7 != 2)
        {
          v14 = 0;
          v15 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
          if ((_DWORD)result)
          {
            v8 = 2;
            goto LABEL_17;
          }
          *(_DWORD *)(a1 + 12) = v14 | (*(_DWORD *)(a1 + 12) << 8);
          if (v7 != 3)
          {
            v14 = 0;
            v15 = 0;
            result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
            if ((_DWORD)result)
              v8 = 3;
            else
              *(_DWORD *)(a1 + 12) = v14 | (*(_DWORD *)(a1 + 12) << 8);
            goto LABEL_17;
          }
        }
      }
    }
    else
    {
      v8 = 0;
    }
    result = 0;
    goto LABEL_17;
  }
  if (v7 <= 4)
    goto LABEL_10;
LABEL_3:
  v8 = 0;
  result = 4294966270;
LABEL_17:
  *a4 += v8;
  *(_DWORD *)(a1 + 8) -= v8;
  return result;
}

void webm::IdParser::~IdParser(webm::IdParser *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::IstreamReader::IstreamReader(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *result = &off_24C0D70B0;
  result[1] = v2;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *result = &off_24C0D70B0;
  result[1] = v2;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t webm::IstreamReader::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v4;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return a1;
}

uint64_t webm::IstreamReader::Read(webm::IstreamReader *this, uint64_t a2, unsigned __int8 *a3, unint64_t *a4)
{
  unint64_t v7;

  if (!*((_QWORD *)this + 1))
  {
    *a4 = 0;
    return 4294967293;
  }
  std::istream::read();
  v7 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  *a4 = v7;
  *((_QWORD *)this + 2) += v7;
  if (!v7)
    return 4294967293;
  if (v7 == a2)
    return 0;
  else
    return 0xFFFFFFFFLL;
}

uint64_t webm::IstreamReader::Skip(webm::IstreamReader *this, uint64_t a2, unint64_t *a3)
{
  _QWORD *v4;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;

  *a3 = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v4 || *(_DWORD *)((char *)v4 + *(_QWORD *)(*v4 - 24) + 32))
    return 4294967293;
  if ((unint64_t)a2 >= 0x7FFFFFFFFFFFFFFFLL)
    v8 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v8 = a2;
  v9 = (_QWORD *)std::istream::seekg();
  if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
  {
    std::ios_base::clear((std::ios_base *)(*((_QWORD *)this + 1) + *(_QWORD *)(**((_QWORD **)this + 1) - 24)), 0);
    std::istream::read();
    v10 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
    *a3 += v10;
    *((_QWORD *)this + 2) += v10;
    if (v10 == a2)
      v11 = 0;
    else
      v11 = -1;
    if (*a3)
      return v11;
    else
      return 4294967293;
  }
  else
  {
    *a3 = v8;
    *((_QWORD *)this + 2) += v8;
    return a2 >> 63;
  }
}

uint64_t webm::IstreamReader::Position(webm::IstreamReader *this)
{
  return *((_QWORD *)this + 2);
}

void webm::IstreamReader::~IstreamReader(webm::IstreamReader *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0D70B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24C0D70B0;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterParser::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = v3;
  *(_OWORD *)(a1 + 200) = v4;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 216) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 216) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 188) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 188) = 0;
  return 0;
}

uint64_t webm::MasterParser::InitAfterSeek(uint64_t result, unsigned int **a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  _QWORD v15[2];

  v3 = result;
  *(_QWORD *)(result + 16) = 0xFFFFFFFFLL;
  *(_DWORD *)(result + 40) = -1;
  *(_DWORD *)(result + 52) = 0;
  *(_QWORD *)(result + 44) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_DWORD *)(result + 192) = -1;
  *(_QWORD *)(result + 200) = -1;
  *(_QWORD *)(result + 208) = -1;
  *(_BYTE *)(result + 232) = 0;
  *(_OWORD *)(result + 216) = xmmword_208F05A40;
  if (*a2 == a2[1])
  {
    v7 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)(result + 56) = *(_OWORD *)a3;
    *(_QWORD *)(result + 72) = v7;
    v8 = *(unsigned int *)(result + 56);
    v9 = *(_QWORD *)(result + 88);
    if ((v9 & (v9 - 1)) != 0)
    {
      v14 = *(unsigned int *)(result + 56);
      if (v9 <= v8)
        v14 = v8 % v9;
      v10 = *(uint64_t **)(*(_QWORD *)(result + 80) + 8 * v14);
      do
      {
        do
          v10 = (uint64_t *)*v10;
        while (v10[1] != v8);
      }
      while (*((_DWORD *)v10 + 4) != (_DWORD)v8);
    }
    else
    {
      v10 = *(uint64_t **)(*(_QWORD *)(result + 80) + 8 * (((_DWORD)v9 - 1) & v8));
      do
      {
        do
          v10 = (uint64_t *)*v10;
        while (v10[1] != v8);
      }
      while (*((_DWORD *)v10 + 4) != (_DWORD)v8);
    }
    *(_QWORD *)(result + 176) = v10[3];
    *(_DWORD *)(result + 188) = 4;
  }
  else
  {
    v4 = **a2;
    *(_DWORD *)(result + 56) = v4;
    *(_QWORD *)(result + 60) = -1;
    *(_QWORD *)(result + 68) = -1;
    *(_DWORD *)(result + 76) = -1;
    v5 = *(_QWORD *)(result + 88);
    if ((v5 & (v5 - 1)) != 0)
    {
      v11 = v4;
      if (v5 <= v4)
        v11 = v4 % v5;
      v6 = *(uint64_t **)(*(_QWORD *)(result + 80) + 8 * v11);
      do
      {
        do
          v6 = (uint64_t *)*v6;
        while (v6[1] != v4);
      }
      while (*((_DWORD *)v6 + 4) != (_DWORD)v4);
    }
    else
    {
      v6 = *(uint64_t **)(*(_QWORD *)(result + 80) + 8 * (((_DWORD)v5 - 1) & v4));
      do
      {
        do
          v6 = (uint64_t *)*v6;
        while (v6[1] != v4);
      }
      while (*((_DWORD *)v6 + 4) != (_DWORD)v4);
    }
    v12 = v6[3];
    *(_QWORD *)(v3 + 176) = v12;
    v13 = a2[1];
    v15[0] = *a2 + 1;
    v15[1] = v13;
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 32))(v12, v15);
    *(_DWORD *)(v3 + 188) = 6;
  }
  return result;
}

uint64_t webm::MasterParser::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  _DWORD *v9;
  void **v10;
  uint64_t result;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 v43;
  uint64_t v44;
  int v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  unsigned __int8 v54;
  uint64_t v55;

  *a4 = 0;
  v9 = (_DWORD *)(a1 + 184);
  v8 = *(_DWORD *)(a1 + 184);
  v52 = 0;
  v53 = &unk_24C0D7130;
  if (v8 == 1)
    v10 = &v53;
  else
    v10 = a2;
  v48 = a1 + 160;
  v49 = a1 + 44;
  v50 = a1 + 120;
  v51 = a1 + 32;
  while (2)
  {
    result = 0;
    switch(*(_DWORD *)(a1 + 188))
    {
      case 0:
        *(_QWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
        *(_DWORD *)(a1 + 60) = 0;
        v52 = 0;
        v12 = *(_DWORD *)(a1 + 16);
        if (v12 == -1)
        {
          v54 = 0;
          v55 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
          v32 = v52;
          if ((_DWORD)result)
            goto LABEL_89;
          v32 = ++v52;
          v33 = v54;
          if (v54 <= 0xFu)
          {
            result = 4294966271;
            goto LABEL_89;
          }
          v42 = 0;
          do
            v43 = v42++;
          while (((v54 << v43) & 0x80) == 0);
          v12 = v43;
          *(_DWORD *)(a1 + 16) = v43;
          *(_DWORD *)(a1 + 20) = v33;
          if (v43 > 4u)
          {
LABEL_10:
            v13 = 0;
            result = 4294966270;
            goto LABEL_88;
          }
        }
        else if (v12 > 4)
        {
          goto LABEL_10;
        }
        if (!v12)
        {
          v13 = 0;
LABEL_87:
          result = 0;
          goto LABEL_88;
        }
        v54 = 0;
        v55 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
        if ((_DWORD)result)
        {
          v44 = 0;
LABEL_84:
          v13 = v44;
          goto LABEL_88;
        }
        v13 = v12;
        *(_DWORD *)(a1 + 20) = v54 | (*(_DWORD *)(a1 + 20) << 8);
        if (v12 == 1)
          goto LABEL_87;
        v54 = 0;
        v55 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
        v44 = 1;
        if ((_DWORD)result)
          goto LABEL_84;
        *(_DWORD *)(a1 + 20) = v54 | (*(_DWORD *)(a1 + 20) << 8);
        if (v12 == 2)
          goto LABEL_87;
        v54 = 0;
        v55 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
        if ((_DWORD)result)
        {
          v13 = 2;
        }
        else
        {
          *(_DWORD *)(a1 + 20) = v54 | (*(_DWORD *)(a1 + 20) << 8);
          if (v12 == 3)
            goto LABEL_87;
          v54 = 0;
          v55 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
          if ((_DWORD)result)
            v13 = 3;
          else
            *(_DWORD *)(a1 + 20) = v54 | (*(_DWORD *)(a1 + 20) << 8);
        }
LABEL_88:
        v32 = v52 + v13;
        v52 += v13;
        *(_DWORD *)(a1 + 16) -= v13;
LABEL_89:
        *a4 += v32;
        *(_QWORD *)(a1 + 224) += v32;
        *(_DWORD *)(a1 + 60) += v32;
        if ((_DWORD)result != -3)
        {
          if ((result + 1) >= 2)
            goto LABEL_127;
          if ((_DWORD)result)
            *(_DWORD *)(a1 + 188) = 1;
          else
LABEL_108:
            *(_DWORD *)(a1 + 188) = 2;
          continue;
        }
        if (*(_QWORD *)(a1 + 200) == -1 && !v32)
        {
LABEL_92:
          *(_DWORD *)(a1 + 188) = 8;
          continue;
        }
LABEL_127:
        if (v32)
          *(_DWORD *)(a1 + 188) = 1;
        return result;
      case 1:
        v52 = 0;
        v14 = *(_DWORD *)(a1 + 16);
        if (v14 == -1)
        {
          v54 = 0;
          v55 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
          v34 = v52;
          if ((_DWORD)result)
            goto LABEL_107;
          v34 = ++v52;
          v35 = v54;
          if (v54 <= 0xFu)
          {
            result = 4294966271;
            goto LABEL_107;
          }
          v45 = 0;
          do
            v46 = v45++;
          while (((v54 << v46) & 0x80) == 0);
          v14 = v46;
          *(_DWORD *)(a1 + 16) = v46;
          *(_DWORD *)(a1 + 20) = v35;
          if (v46 > 4u)
          {
LABEL_13:
            v15 = 0;
            result = 4294966270;
            goto LABEL_106;
          }
        }
        else if (v14 > 4)
        {
          goto LABEL_13;
        }
        if (!v14)
        {
          v15 = 0;
LABEL_105:
          result = 0;
          goto LABEL_106;
        }
        v54 = 0;
        v55 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
        if ((_DWORD)result)
        {
          v47 = 0;
LABEL_102:
          v15 = v47;
          goto LABEL_106;
        }
        v15 = v14;
        *(_DWORD *)(a1 + 20) = v54 | (*(_DWORD *)(a1 + 20) << 8);
        if (v14 == 1)
          goto LABEL_105;
        v54 = 0;
        v55 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
        v47 = 1;
        if ((_DWORD)result)
          goto LABEL_102;
        *(_DWORD *)(a1 + 20) = v54 | (*(_DWORD *)(a1 + 20) << 8);
        if (v14 == 2)
          goto LABEL_105;
        v54 = 0;
        v55 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
        if ((_DWORD)result)
        {
          v15 = 2;
        }
        else
        {
          *(_DWORD *)(a1 + 20) = v54 | (*(_DWORD *)(a1 + 20) << 8);
          if (v14 == 3)
            goto LABEL_105;
          v54 = 0;
          v55 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v54, &v55);
          if ((_DWORD)result)
            v15 = 3;
          else
            *(_DWORD *)(a1 + 20) = v54 | (*(_DWORD *)(a1 + 20) << 8);
        }
LABEL_106:
        v34 = v52 + v15;
        v52 += v15;
        *(_DWORD *)(a1 + 16) -= v15;
LABEL_107:
        *a4 += v34;
        *(_QWORD *)(a1 + 224) += v34;
        *(_DWORD *)(a1 + 60) += v34;
        if (!(_DWORD)result)
          goto LABEL_108;
        return result;
      case 2:
        LODWORD(result) = webm::VarIntParser::Feed(v51, (uint64_t)v10, a3, &v52);
        if ((_DWORD)result == -1030)
          result = 4294966270;
        else
          result = result;
        v16 = v52;
        *a4 += v52;
        *(_QWORD *)(a1 + 224) += v16;
        *(_DWORD *)(a1 + 60) += v16;
        if ((_DWORD)result)
          return result;
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a1 + 20);
        if (*(_QWORD *)(a1 + 48) == 0xFFFFFFFFFFFFFFFFLL >> (-7 * *(_DWORD *)(a1 + 44) + 57))
          v17 = -1;
        else
          v17 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 64) = v17;
        *(_DWORD *)(a1 + 188) = 3;
        continue;
      case 3:
        v18 = *(_QWORD *)(a1 + 64);
        if (v18 == -1)
          v19 = 0;
        else
          v19 = *(_QWORD *)(a1 + 64);
        v20 = *(_QWORD *)(a1 + 216);
        v21 = v19 + *(_QWORD *)(a1 + 224);
        v22 = *(_QWORD *)(a1 + 200);
        if (v22 != -1)
          v20 = *(_QWORD *)(a1 + 200);
        if (v21 > v20)
          return 4294966268;
        v23 = *(int8x8_t *)(a1 + 88);
        if (!*(_QWORD *)&v23)
          goto LABEL_73;
        v24 = *(unsigned int *)(a1 + 56);
        v25 = (uint8x8_t)vcnt_s8(v23);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] > 1uLL)
        {
          v26 = *(unsigned int *)(a1 + 56);
          if (*(_QWORD *)&v23 <= v24)
            v26 = v24 % *(_QWORD *)&v23;
        }
        else
        {
          v26 = (v23.i32[0] - 1) & v24;
        }
        v36 = *(uint64_t ***)(*(_QWORD *)(a1 + 80) + 8 * v26);
        if (!v36)
          goto LABEL_73;
        v37 = *v36;
        if (!v37)
          goto LABEL_73;
        if (v25.u32[0] < 2uLL)
        {
          v38 = *(_QWORD *)&v23 - 1;
          while (1)
          {
            v40 = v37[1];
            if (v40 == v24)
            {
              if (*((_DWORD *)v37 + 4) == (_DWORD)v24)
                goto LABEL_109;
            }
            else if ((v40 & v38) != v26)
            {
              goto LABEL_73;
            }
            v37 = (uint64_t *)*v37;
            if (!v37)
              goto LABEL_73;
          }
        }
LABEL_64:
        v39 = v37[1];
        if (v39 == v24)
        {
          if (*((_DWORD *)v37 + 4) != (_DWORD)v24)
            goto LABEL_63;
LABEL_109:
          v41 = v37[3];
LABEL_76:
          *(_QWORD *)(a1 + 176) = v41;
          *(_DWORD *)(a1 + 188) = 4;
          continue;
        }
        if (v39 >= *(_QWORD *)&v23)
          v39 %= *(_QWORD *)&v23;
        if (v39 == v26)
        {
LABEL_63:
          v37 = (uint64_t *)*v37;
          if (!v37)
            goto LABEL_73;
          goto LABEL_64;
        }
LABEL_73:
        if (v22 != -1)
        {
          if (v18 == -1)
            return 4294966269;
          v41 = v50;
          goto LABEL_76;
        }
        *(_BYTE *)(a1 + 232) = 1;
        goto LABEL_92;
      case 4:
        result = (*((uint64_t (**)(void **, _DWORD *, _DWORD *))*v10 + 2))(v10, v9 - 32, v9);
        if ((_DWORD)result)
          return result;
        if (*v9 == 1)
        {
          if (*(_QWORD *)(a1 + 64) != -1)
            *(_QWORD *)(a1 + 176) = v48;
          v10 = &v53;
        }
        *(_DWORD *)(a1 + 188) = 5;
        continue;
      case 5:
        result = (*(uint64_t (**)(_QWORD, _DWORD *, _QWORD))(**(_QWORD **)(a1 + 176) + 24))(*(_QWORD *)(a1 + 176), v9 - 32, *(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 224));
        if ((_DWORD)result)
          return result;
        *(_DWORD *)(a1 + 188) = 6;
        continue;
      case 6:
        result = (*(uint64_t (**)(_QWORD, void **, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 176) + 16))(*(_QWORD *)(a1 + 176), v10, a3, &v52);
        v27 = v52;
        *a4 += v52;
        *(_QWORD *)(a1 + 224) += v27;
        if ((_DWORD)result)
          return result;
        *(_DWORD *)(a1 + 188) = 7;
        continue;
      case 7:
        v28 = *(_QWORD *)(a1 + 200);
        v29 = *(_QWORD *)(a1 + 224);
        if (v28 == -1)
          v28 = *(_QWORD *)(a1 + 216);
        if (v29 > v28)
          return 4294966268;
        if (v29 == v28)
        {
          *(_DWORD *)(a1 + 188) = 8;
        }
        else
        {
          if ((*(unsigned int (**)(_QWORD, _DWORD *))(**(_QWORD **)(a1 + 176) + 40))(*(_QWORD *)(a1 + 176), v9 - 32))
          {
            v31 = 3;
          }
          else
          {
            v31 = 0;
          }
          *(_QWORD *)(a1 + 16) = 0xFFFFFFFFLL;
          *(_DWORD *)(a1 + 40) = -1;
          *(_DWORD *)(v49 + 8) = 0;
          *(_QWORD *)v49 = 0;
          *(_QWORD *)(a1 + 176) = 0;
          *(_DWORD *)(a1 + 184) = 0;
          *(_DWORD *)(a1 + 188) = v31;
        }
        (*((void (**)(void **, _DWORD *))*a2 + 23))(a2, v9 - 32);
        v10 = a2;
        continue;
      case 8:
        return result;
      default:
        continue;
    }
  }
}

BOOL webm::MasterParser::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 232))
    return 0;
  v2 = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 72);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 232) != 0;
}

void webm::MasterParser::~MasterParser(webm::MasterParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::SkipCallback::~SkipCallback(webm::SkipCallback *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::SkipCallback::OnElementBegin(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 1;
  return 0;
}

uint64_t webm::SkipCallback::OnSegmentBegin(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 1;
  return 0;
}

uint64_t webm::SkipCallback::OnClusterBegin(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 1;
  return 0;
}

uint64_t webm::SkipCallback::OnSimpleBlockBegin(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 1;
  return 0;
}

uint64_t webm::SkipCallback::OnBlockGroupBegin(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 1;
  return 0;
}

uint64_t webm::SkipCallback::OnBlockBegin(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 1;
  return 0;
}

webm::SegmentParser *webm::SegmentParser::SegmentParser(webm::SegmentParser *this)
{
  _QWORD *v2;
  std::string::size_type v3;
  uint64_t v4;
  _QWORD *v5;
  std::string::size_type size;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string::size_type v16;
  std::string::size_type v17;
  _QWORD *v18;
  _BYTE *v19;
  _BYTE *v20;
  size_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  std::string::size_type v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  std::string::size_type v32;
  std::string::size_type v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string::size_type v36;
  std::string::size_type v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::string::size_type v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::string::size_type v48;
  uint64_t v49;
  std::string::size_type v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::string::size_type v60;
  std::string::size_type v61;
  uint64_t v62;
  std::string::size_type v63;
  uint64_t v64;
  _OWORD *v65;
  _OWORD *v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::string::size_type v73;
  std::string::size_type v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  std::string::size_type v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  std::string::size_type v85;
  std::string::size_type v86;
  _QWORD *v87;
  std::string::size_type v88;
  uint64_t v89;
  _OWORD *v90;
  uint64_t v91;
  std::string::size_type v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  std::string::size_type v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  std::string::size_type v101;
  uint64_t v102;
  std::string::size_type v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  std::string::size_type v107;
  std::string::size_type v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  webm::SegmentParser *v116;
  _QWORD *v117;
  unsigned int v118;
  _QWORD *v119;
  unsigned int v120;
  _QWORD *v121;
  unsigned int v122;
  uint64_t v123;
  unsigned int v124;
  _QWORD *v125;
  unsigned int v126;
  uint64_t v127;
  unsigned int v128;
  _QWORD *v129;
  std::string v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  _OWORD v147[2];

  v2 = (_QWORD *)operator new();
  v3 = operator new();
  *(_QWORD *)v3 = &off_24C0D72F0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_DWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 8) = 0;
  v4 = operator new();
  v146 = xmmword_208F521F0;
  v147[0] = xmmword_208F521E0;
  v144 = xmmword_208F52210;
  v145 = xmmword_208F52200;
  v143 = xmmword_208F52220;
  LODWORD(v130.__r_.__value_.__l.__data_) = 182;
  *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = xmmword_208F52230;
  v5 = (_QWORD *)webm::MasterValueParser<webm::ChapterAtom>::MasterValueParser<webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::RepeatedChildFactory<webm::ChapterDisplayParser,webm::ChapterDisplay>,webm::MasterValueParser<webm::ChapterAtom>::RecursiveChildFactory<webm::ChapterAtomParser>>(v4, (uint64_t)v147, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144, (uint64_t)&v143, (uint64_t)&v130);
  *v5 = &off_24C0D7350;
  v5[48] = v3;
  v5[49] = v3 + 8;
  LODWORD(v130.__r_.__value_.__l.__data_) = 182;
  v130.__r_.__value_.__l.__size_ = (std::string::size_type)v5;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v3 + 40, (unsigned int *)&v130);
  size = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (size)
    (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  *(_QWORD *)v3 = &off_24C0D7290;
  LODWORD(v130.__r_.__value_.__l.__data_) = 17849;
  v130.__r_.__value_.__l.__size_ = v3;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v2, (unsigned int *)&v130);
  v7 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v7)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v7 + 8))(v7);
  *v2 = &off_24C0D7248;
  v128 = 272869232;
  v129 = v2;
  v8 = operator new();
  *(_QWORD *)v8 = &off_24C0D7788;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_BYTE *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_DWORD *)(v8 + 88) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  v9 = operator new();
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 8);
  *(_DWORD *)(v9 + 24) = -1;
  *(_QWORD *)v9 = &off_24C0D77E8;
  *(_QWORD *)(v9 + 32) = v8;
  *(_QWORD *)(v9 + 40) = v8 + 8;
  LODWORD(v141) = 231;
  *((_QWORD *)&v141 + 1) = v9;
  v10 = operator new();
  *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 24);
  *(_DWORD *)(v10 + 24) = -1;
  *(_QWORD *)v10 = &off_24C0D77E8;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = v8 + 24;
  LODWORD(v140) = 171;
  *((_QWORD *)&v140 + 1) = v10;
  v11 = operator new();
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 8) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_QWORD *)(v11 + 152) = 0;
  *(_QWORD *)(v11 + 80) = &unk_24C0D6E90;
  *(_QWORD *)(v11 + 104) = &unk_24C0D9A60;
  *(_DWORD *)(v11 + 112) = -1;
  *(_DWORD *)(v11 + 128) = 2;
  *(_QWORD *)(v11 + 136) = &unk_24C0D9A60;
  *(_DWORD *)(v11 + 144) = -1;
  *(_OWORD *)(v11 + 160) = 0u;
  *(_OWORD *)(v11 + 176) = 0u;
  *(_OWORD *)(v11 + 188) = 0u;
  *(_QWORD *)v11 = &off_24C0D7830;
  *(_QWORD *)(v11 + 208) = v8;
  *(_QWORD *)(v11 + 216) = v8 + 40;
  LODWORD(v139) = 163;
  *((_QWORD *)&v139 + 1) = v11;
  v12 = operator new();
  *(_QWORD *)v12 = &off_24C0D78D8;
  *(_QWORD *)(v12 + 16) = 0;
  *(_BYTE *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_WORD *)(v12 + 40) = 0;
  *(_BYTE *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 72) = 0;
  *(_BYTE *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_BYTE *)(v12 + 96) = 0;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)(v12 + 152) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_BYTE *)(v12 + 168) = 0;
  *(_BYTE *)(v12 + 136) = 0;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_DWORD *)(v12 + 176) = 0;
  v13 = operator new();
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 88) = 0u;
  *(_OWORD *)(v13 + 104) = 0u;
  *(_OWORD *)(v13 + 120) = 0u;
  *(_OWORD *)(v13 + 136) = 0u;
  *(_OWORD *)(v13 + 8) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_QWORD *)(v13 + 72) = &unk_24C0D6E90;
  *(_QWORD *)(v13 + 96) = &unk_24C0D9A60;
  *(_DWORD *)(v13 + 104) = -1;
  *(_DWORD *)(v13 + 120) = 2;
  *(_QWORD *)(v13 + 128) = &unk_24C0D9A60;
  *(_DWORD *)(v13 + 136) = -1;
  *(_OWORD *)(v13 + 152) = 0u;
  *(_OWORD *)(v13 + 168) = 0u;
  *(_OWORD *)(v13 + 180) = 0u;
  *(_QWORD *)v13 = &off_24C0D7938;
  *(_QWORD *)(v13 + 200) = v12;
  *(_QWORD *)(v13 + 208) = v12 + 8;
  LODWORD(v146) = 161;
  *((_QWORD *)&v146 + 1) = v13;
  v14 = operator new();
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_QWORD *)(v14 + 40) = &unk_24C0D6E90;
  *(_QWORD *)(v14 + 64) = &unk_24C0D9A60;
  *(_DWORD *)(v14 + 72) = -1;
  *(_QWORD *)(v14 + 88) = 2;
  *(_DWORD *)(v14 + 96) = 0;
  *(_QWORD *)v14 = &off_24C0D7980;
  *(_QWORD *)(v14 + 104) = v12;
  *(_QWORD *)(v14 + 112) = v12 + 32;
  LODWORD(v145) = 162;
  *((_QWORD *)&v145 + 1) = v14;
  v15 = operator new();
  *(_QWORD *)v15 = &off_24C0D7A28;
  *(_QWORD *)(v15 + 8) = 0;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  *(_DWORD *)(v15 + 32) = 0;
  v16 = operator new();
  *(_QWORD *)v16 = &off_24C0D7AE8;
  *(_QWORD *)(v16 + 8) = 1;
  *(_BYTE *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = 0;
  *(_BYTE *)(v16 + 48) = 0;
  *(_DWORD *)(v16 + 56) = 0;
  v17 = operator new();
  *(_QWORD *)(v17 + 16) = 1;
  *(_DWORD *)(v17 + 24) = -1;
  *(_QWORD *)v17 = &off_24C0D7B48;
  *(_QWORD *)(v17 + 32) = v16;
  *(_QWORD *)(v17 + 40) = v16 + 8;
  LODWORD(v130.__r_.__value_.__l.__data_) = 238;
  v130.__r_.__value_.__l.__size_ = v17;
  v18 = (_QWORD *)operator new();
  v19 = *(_BYTE **)(v16 + 24);
  v20 = *(_BYTE **)(v16 + 32);
  v21 = v20 - v19;
  v116 = this;
  if (v20 == v19)
  {
    v22 = 0;
    v23 = 0;
  }
  else
  {
    if ((v21 & 0x8000000000000000) != 0)
      abort();
    v22 = (char *)operator new(v21);
    v23 = &v22[v21];
    memcpy(v22, v19, v21);
  }
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v22;
  v18[5] = v23;
  v18[6] = v23;
  *v18 = &off_24C0D7B90;
  v18[1] = 0;
  v18[8] = v16;
  v18[9] = v16 + 24;
  LODWORD(v147[0]) = 165;
  *((_QWORD *)&v147[0] + 1) = v18;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v16 + 64, (unsigned int *)&v130, (unsigned int *)v147);
  v24 = *((_QWORD *)&v147[0] + 1);
  *((_QWORD *)&v147[0] + 1) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  v25 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v25)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v25 + 8))(v25);
  *(_QWORD *)v16 = &off_24C0D7A88;
  *(_QWORD *)(v16 + 304) = v15;
  *(_QWORD *)(v16 + 312) = v15 + 8;
  LODWORD(v130.__r_.__value_.__l.__data_) = 166;
  v130.__r_.__value_.__l.__size_ = v16;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v15 + 40, (unsigned int *)&v130);
  v26 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v26)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v26 + 8))(v26);
  *(_QWORD *)v15 = &off_24C0D79C8;
  *(_QWORD *)(v15 + 280) = v12;
  *(_QWORD *)(v15 + 288) = v12 + 56;
  LODWORD(v147[0]) = 30113;
  *((_QWORD *)&v147[0] + 1) = v15;
  v27 = operator new();
  *(_QWORD *)(v27 + 16) = *(_QWORD *)(v12 + 88);
  *(_DWORD *)(v27 + 24) = -1;
  *(_QWORD *)v27 = &off_24C0D7C20;
  *(_QWORD *)(v27 + 32) = v12;
  *(_QWORD *)(v27 + 40) = v12 + 88;
  LODWORD(v144) = 155;
  *((_QWORD *)&v144 + 1) = v27;
  v28 = *(uint64_t **)(v12 + 104);
  if (v28 == *(uint64_t **)(v12 + 112))
    v29 = 0;
  else
    v29 = *v28;
  v30 = operator new();
  *(_QWORD *)(v30 + 16) = v29;
  *(_DWORD *)(v30 + 24) = -1;
  *(_QWORD *)v30 = &off_24C0D7C68;
  *(_QWORD *)(v30 + 32) = v12;
  *(_QWORD *)(v30 + 40) = v12 + 104;
  LODWORD(v143) = 251;
  *((_QWORD *)&v143 + 1) = v30;
  v31 = operator new();
  *(_QWORD *)(v31 + 16) = *(_QWORD *)(v12 + 128);
  *(_DWORD *)(v31 + 24) = -1;
  *(_QWORD *)v31 = &off_24C0D7CB0;
  *(_QWORD *)(v31 + 32) = v12;
  *(_QWORD *)(v31 + 40) = v12 + 128;
  LODWORD(v142) = 30114;
  *((_QWORD *)&v142 + 1) = v31;
  v32 = operator new();
  *(_QWORD *)v32 = &off_24C0D7D58;
  *(_QWORD *)(v32 + 8) = 0;
  *(_QWORD *)(v32 + 16) = 0;
  *(_QWORD *)(v32 + 24) = 0;
  *(_DWORD *)(v32 + 32) = 0;
  v33 = operator new();
  *(_QWORD *)v33 = &off_24C0D7E18;
  *(_QWORD *)(v33 + 8) = 0;
  *(_BYTE *)(v33 + 16) = 0;
  *(_DWORD *)(v33 + 24) = 0;
  v34 = operator new();
  *(_QWORD *)(v34 + 16) = 0;
  *(_DWORD *)(v34 + 24) = -1;
  *(_QWORD *)v34 = &off_24C0D7E78;
  *(_QWORD *)(v34 + 32) = v33;
  *(_QWORD *)(v34 + 40) = v33 + 8;
  LODWORD(v130.__r_.__value_.__l.__data_) = 204;
  v130.__r_.__value_.__l.__size_ = v34;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v33 + 32, (unsigned int *)&v130);
  v35 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v35)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v35 + 8))(v35);
  *(_QWORD *)v33 = &off_24C0D7DB8;
  *(_QWORD *)(v33 + 272) = v32;
  *(_QWORD *)(v33 + 280) = v32 + 8;
  LODWORD(v130.__r_.__value_.__l.__data_) = 232;
  v130.__r_.__value_.__l.__size_ = v33;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v32 + 40, (unsigned int *)&v130);
  v36 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v36)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v36 + 8))(v36);
  *(_QWORD *)v32 = &off_24C0D7CF8;
  *(_QWORD *)(v32 + 280) = v12;
  *(_QWORD *)(v32 + 288) = v12 + 144;
  LODWORD(v130.__r_.__value_.__l.__data_) = 142;
  v130.__r_.__value_.__l.__size_ = v32;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v12 + 184, (unsigned int *)&v146, (unsigned int *)&v145, (unsigned int *)v147, (unsigned int *)&v144, (unsigned int *)&v143, (unsigned int *)&v142, (unsigned int *)&v130);
  v37 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v37)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v37 + 8))(v37);
  v38 = *((_QWORD *)&v142 + 1);
  *((_QWORD *)&v142 + 1) = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *((_QWORD *)&v143 + 1);
  *((_QWORD *)&v143 + 1) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *((_QWORD *)&v144 + 1);
  *((_QWORD *)&v144 + 1) = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *((_QWORD *)&v147[0] + 1);
  *((_QWORD *)&v147[0] + 1) = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  v42 = *((_QWORD *)&v145 + 1);
  *((_QWORD *)&v145 + 1) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  v43 = *((_QWORD *)&v146 + 1);
  *((_QWORD *)&v146 + 1) = 0;
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  *(_QWORD *)v12 = &off_24C0D7878;
  *(_QWORD *)(v12 + 424) = v8;
  *(_QWORD *)(v12 + 432) = v8 + 64;
  LODWORD(v130.__r_.__value_.__l.__data_) = 160;
  v130.__r_.__value_.__l.__size_ = v12;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v8 + 96, (unsigned int *)&v141, (unsigned int *)&v140, (unsigned int *)&v139, (unsigned int *)&v130);
  v44 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v44)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v44 + 8))(v44);
  v45 = *((_QWORD *)&v139 + 1);
  *((_QWORD *)&v139 + 1) = 0;
  if (v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  v46 = *((_QWORD *)&v140 + 1);
  *((_QWORD *)&v140 + 1) = 0;
  if (v46)
    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  v47 = *((_QWORD *)&v141 + 1);
  *((_QWORD *)&v141 + 1) = 0;
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  *(_QWORD *)v8 = &off_24C0D7728;
  v126 = 524531317;
  v127 = v8;
  v117 = (_QWORD *)operator new();
  v48 = operator new();
  *(_QWORD *)v48 = &off_24C0D7F68;
  *(_QWORD *)(v48 + 8) = 0;
  *(_BYTE *)(v48 + 16) = 0;
  *(_QWORD *)(v48 + 24) = 0;
  *(_QWORD *)(v48 + 32) = 0;
  *(_QWORD *)(v48 + 40) = 0;
  *(_DWORD *)(v48 + 48) = 0;
  v49 = operator new();
  *(_QWORD *)(v49 + 16) = *(_QWORD *)(v48 + 8);
  *(_DWORD *)(v49 + 24) = -1;
  *(_QWORD *)v49 = &off_24C0D7FC8;
  *(_QWORD *)(v49 + 32) = v48;
  *(_QWORD *)(v49 + 40) = v48 + 8;
  LODWORD(v143) = 179;
  *((_QWORD *)&v143 + 1) = v49;
  v50 = operator new();
  *(_QWORD *)v50 = &off_24C0D8070;
  *(_QWORD *)(v50 + 8) = 0;
  *(_BYTE *)(v50 + 16) = 0;
  *(_QWORD *)(v50 + 24) = 0;
  *(_BYTE *)(v50 + 32) = 0;
  *(_QWORD *)(v50 + 40) = 0;
  *(_BYTE *)(v50 + 48) = 0;
  *(_QWORD *)(v50 + 56) = 0;
  *(_BYTE *)(v50 + 64) = 0;
  *(_QWORD *)(v50 + 72) = 1;
  *(_BYTE *)(v50 + 80) = 0;
  *(_DWORD *)(v50 + 88) = 0;
  v51 = operator new();
  *(_QWORD *)(v51 + 16) = 0;
  *(_DWORD *)(v51 + 24) = -1;
  *(_QWORD *)v51 = &off_24C0D80D0;
  *(_QWORD *)(v51 + 32) = v50;
  *(_QWORD *)(v51 + 40) = v50 + 8;
  LODWORD(v130.__r_.__value_.__l.__data_) = 247;
  v130.__r_.__value_.__l.__size_ = v51;
  v52 = operator new();
  *(_QWORD *)(v52 + 16) = *(_QWORD *)(v50 + 24);
  *(_DWORD *)(v52 + 24) = -1;
  *(_QWORD *)v52 = &off_24C0D80D0;
  *(_QWORD *)(v52 + 32) = v50;
  *(_QWORD *)(v52 + 40) = v50 + 24;
  LODWORD(v147[0]) = 241;
  *((_QWORD *)&v147[0] + 1) = v52;
  v53 = operator new();
  *(_QWORD *)(v53 + 16) = *(_QWORD *)(v50 + 40);
  *(_DWORD *)(v53 + 24) = -1;
  *(_QWORD *)v53 = &off_24C0D80D0;
  *(_QWORD *)(v53 + 32) = v50;
  *(_QWORD *)(v53 + 40) = v50 + 40;
  LODWORD(v146) = 240;
  *((_QWORD *)&v146 + 1) = v53;
  v54 = operator new();
  *(_QWORD *)(v54 + 16) = *(_QWORD *)(v50 + 56);
  *(_DWORD *)(v54 + 24) = -1;
  *(_QWORD *)v54 = &off_24C0D80D0;
  *(_QWORD *)(v54 + 32) = v50;
  *(_QWORD *)(v54 + 40) = v50 + 56;
  LODWORD(v145) = 178;
  *((_QWORD *)&v145 + 1) = v54;
  v55 = operator new();
  *(_QWORD *)(v55 + 16) = *(_QWORD *)(v50 + 72);
  *(_DWORD *)(v55 + 24) = -1;
  *(_QWORD *)v55 = &off_24C0D80D0;
  *(_QWORD *)(v55 + 32) = v50;
  *(_QWORD *)(v55 + 40) = v50 + 72;
  LODWORD(v144) = 21368;
  *((_QWORD *)&v144 + 1) = v55;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v50 + 96, (unsigned int *)&v130, (unsigned int *)v147, (unsigned int *)&v146, (unsigned int *)&v145, (unsigned int *)&v144);
  v56 = *((_QWORD *)&v144 + 1);
  *((_QWORD *)&v144 + 1) = 0;
  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  v57 = *((_QWORD *)&v145 + 1);
  *((_QWORD *)&v145 + 1) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v58 = *((_QWORD *)&v146 + 1);
  *((_QWORD *)&v146 + 1) = 0;
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v59 = *((_QWORD *)&v147[0] + 1);
  *((_QWORD *)&v147[0] + 1) = 0;
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  v60 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v60)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v60 + 8))(v60);
  *(_QWORD *)v50 = &off_24C0D8010;
  *(_QWORD *)(v50 + 336) = v48;
  *(_QWORD *)(v50 + 344) = v48 + 24;
  LODWORD(v130.__r_.__value_.__l.__data_) = 183;
  v130.__r_.__value_.__l.__size_ = v50;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v48 + 56, (unsigned int *)&v143, (unsigned int *)&v130);
  v61 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v61)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v61 + 8))(v61);
  v62 = *((_QWORD *)&v143 + 1);
  *((_QWORD *)&v143 + 1) = 0;
  if (v62)
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 8))(v62);
  *(_QWORD *)v48 = &off_24C0D7F08;
  LODWORD(v130.__r_.__value_.__l.__data_) = 187;
  v130.__r_.__value_.__l.__size_ = v48;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v117, (unsigned int *)&v130);
  v63 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v63)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v63 + 8))(v63);
  *v117 = &off_24C0D7EC0;
  v124 = 475249515;
  v125 = v117;
  v64 = operator new();
  *(_QWORD *)v64 = off_24C0D8178;
  *(_QWORD *)(v64 + 8) = 1000000;
  *(_BYTE *)(v64 + 16) = 0;
  *(_QWORD *)(v64 + 24) = 0;
  *(_BYTE *)(v64 + 32) = 0;
  *(_QWORD *)(v64 + 40) = 0;
  *(_BYTE *)(v64 + 48) = 0;
  *(_QWORD *)(v64 + 56) = 0;
  v65 = (_OWORD *)(v64 + 56);
  *(_QWORD *)(v64 + 64) = 0;
  *(_QWORD *)(v64 + 72) = 0;
  *(_BYTE *)(v64 + 80) = 0;
  *(_QWORD *)(v64 + 88) = 0;
  v66 = (_OWORD *)(v64 + 88);
  *(_QWORD *)(v64 + 96) = 0;
  *(_QWORD *)(v64 + 104) = 0;
  *(_BYTE *)(v64 + 112) = 0;
  *(_QWORD *)(v64 + 120) = 0;
  v67 = (_OWORD *)(v64 + 120);
  *(_QWORD *)(v64 + 128) = 0;
  *(_QWORD *)(v64 + 136) = 0;
  *(_BYTE *)(v64 + 144) = 0;
  *(_DWORD *)(v64 + 152) = 0;
  v68 = operator new();
  *(_QWORD *)(v68 + 16) = *(_QWORD *)(v64 + 8);
  *(_DWORD *)(v68 + 24) = -1;
  *(_QWORD *)v68 = &off_24C0D81D8;
  *(_QWORD *)(v68 + 32) = v64;
  *(_QWORD *)(v68 + 40) = v64 + 8;
  LODWORD(v147[0]) = 2807729;
  *((_QWORD *)&v147[0] + 1) = v68;
  v69 = operator new();
  *(_QWORD *)(v69 + 16) = *(_QWORD *)(v64 + 24);
  *(_DWORD *)(v69 + 32) = -1;
  *(_QWORD *)v69 = &off_24C0D8220;
  *(_QWORD *)(v69 + 40) = v64;
  *(_QWORD *)(v69 + 48) = v64 + 24;
  LODWORD(v146) = 17545;
  *((_QWORD *)&v146 + 1) = v69;
  v70 = operator new();
  *(_QWORD *)(v70 + 16) = *(_QWORD *)(v64 + 40);
  *(_DWORD *)(v70 + 24) = -1;
  *(_QWORD *)v70 = &off_24C0D8268;
  *(_QWORD *)(v70 + 32) = v64;
  *(_QWORD *)(v70 + 40) = v64 + 40;
  LODWORD(v145) = 17505;
  *((_QWORD *)&v145 + 1) = v70;
  v71 = operator new();
  if (*(char *)(v64 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v64 + 56), *(_QWORD *)(v64 + 64));
  }
  else
  {
    *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *v65;
    v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 72);
  }
  *(_QWORD *)(v71 + 16) = 0;
  *(_QWORD *)(v71 + 24) = 0;
  *(std::string *)(v71 + 32) = v130;
  *(_QWORD *)v71 = off_24C0D82B0;
  *(_QWORD *)(v71 + 8) = 0;
  *(_QWORD *)(v71 + 64) = v64;
  *(_QWORD *)(v71 + 72) = v65;
  LODWORD(v144) = 31657;
  *((_QWORD *)&v144 + 1) = v71;
  v72 = operator new();
  if (*(char *)(v64 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v64 + 88), *(_QWORD *)(v64 + 96));
  }
  else
  {
    *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *v66;
    v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 104);
  }
  *(_QWORD *)(v72 + 16) = 0;
  *(_QWORD *)(v72 + 24) = 0;
  *(std::string *)(v72 + 32) = v130;
  *(_QWORD *)v72 = off_24C0D82B0;
  *(_QWORD *)(v72 + 8) = 0;
  *(_QWORD *)(v72 + 64) = v64;
  *(_QWORD *)(v72 + 72) = v66;
  LODWORD(v143) = 19840;
  *((_QWORD *)&v143 + 1) = v72;
  v73 = operator new();
  if (*(char *)(v64 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v64 + 120), *(_QWORD *)(v64 + 128));
  }
  else
  {
    *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *v67;
    v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v64 + 136);
  }
  *(_QWORD *)(v73 + 16) = 0;
  *(_QWORD *)(v73 + 24) = 0;
  *(std::string *)(v73 + 32) = v130;
  *(_QWORD *)v73 = off_24C0D82B0;
  *(_QWORD *)(v73 + 8) = 0;
  *(_QWORD *)(v73 + 64) = v64;
  *(_QWORD *)(v73 + 72) = v67;
  LODWORD(v130.__r_.__value_.__l.__data_) = 22337;
  v130.__r_.__value_.__l.__size_ = v73;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v64 + 160, (unsigned int *)v147, (unsigned int *)&v146, (unsigned int *)&v145, (unsigned int *)&v144, (unsigned int *)&v143, (unsigned int *)&v130);
  v74 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v74)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v74 + 8))(v74);
  v75 = *((_QWORD *)&v143 + 1);
  *((_QWORD *)&v143 + 1) = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  v76 = *((_QWORD *)&v144 + 1);
  *((_QWORD *)&v144 + 1) = 0;
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  v77 = *((_QWORD *)&v145 + 1);
  *((_QWORD *)&v145 + 1) = 0;
  if (v77)
    (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
  v78 = *((_QWORD *)&v146 + 1);
  *((_QWORD *)&v146 + 1) = 0;
  if (v78)
    (*(void (**)(uint64_t))(*(_QWORD *)v78 + 8))(v78);
  v79 = *((_QWORD *)&v147[0] + 1);
  *((_QWORD *)&v147[0] + 1) = 0;
  if (v79)
    (*(void (**)(uint64_t))(*(_QWORD *)v79 + 8))(v79);
  *(_QWORD *)v64 = off_24C0D8118;
  v122 = 357149030;
  v123 = v64;
  v80 = (_QWORD *)operator new();
  v81 = operator new();
  *(_QWORD *)v81 = &off_24C0D83A0;
  *(_DWORD *)(v81 + 8) = 0;
  *(_BYTE *)(v81 + 12) = 0;
  *(_QWORD *)(v81 + 16) = 0;
  *(_BYTE *)(v81 + 24) = 0;
  *(_DWORD *)(v81 + 32) = 0;
  v82 = (_QWORD *)operator new();
  *v82 = &off_24C0D8400;
  v82[1] = 0xFFFFFFFF00000000;
  v82[2] = v81;
  v82[3] = v81 + 8;
  LODWORD(v130.__r_.__value_.__l.__data_) = 21419;
  v130.__r_.__value_.__l.__size_ = (std::string::size_type)v82;
  v83 = operator new();
  *(_QWORD *)(v83 + 16) = *(_QWORD *)(v81 + 16);
  *(_DWORD *)(v83 + 24) = -1;
  *(_QWORD *)v83 = &off_24C0D8448;
  *(_QWORD *)(v83 + 32) = v81;
  *(_QWORD *)(v83 + 40) = v81 + 16;
  LODWORD(v147[0]) = 21420;
  *((_QWORD *)&v147[0] + 1) = v83;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v81 + 40, (unsigned int *)&v130, (unsigned int *)v147);
  v84 = *((_QWORD *)&v147[0] + 1);
  *((_QWORD *)&v147[0] + 1) = 0;
  if (v84)
    (*(void (**)(uint64_t))(*(_QWORD *)v84 + 8))(v84);
  v85 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v85)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v85 + 8))(v85);
  *(_QWORD *)v81 = &off_24C0D8340;
  LODWORD(v130.__r_.__value_.__l.__data_) = 19899;
  v130.__r_.__value_.__l.__size_ = v81;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v80, (unsigned int *)&v130);
  v86 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v86)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v86 + 8))(v86);
  *v80 = &off_24C0D82F8;
  v120 = 290298740;
  v121 = v80;
  v87 = (_QWORD *)operator new();
  v88 = operator new();
  *(_QWORD *)v88 = &off_24C0D8538;
  *(_QWORD *)(v88 + 8) = 50;
  *(_BYTE *)(v88 + 16) = 0;
  *(_OWORD *)(v88 + 24) = 0u;
  *(_OWORD *)(v88 + 40) = 0u;
  *(_OWORD *)(v88 + 56) = 0u;
  *(_OWORD *)(v88 + 65) = 0u;
  *(_QWORD *)(v88 + 88) = 0;
  *(_QWORD *)(v88 + 96) = 0;
  *(_QWORD *)(v88 + 104) = 0;
  *(_DWORD *)(v88 + 112) = 0;
  v89 = operator new();
  *(_QWORD *)v89 = off_24C0D85F8;
  *(_QWORD *)(v89 + 8) = 50;
  *(_BYTE *)(v89 + 16) = 0;
  *(_QWORD *)(v89 + 24) = 0;
  v90 = (_OWORD *)(v89 + 24);
  *(_QWORD *)(v89 + 32) = 0;
  *(_QWORD *)(v89 + 40) = 0;
  *(_BYTE *)(v89 + 48) = 0;
  *(_QWORD *)(v89 + 56) = 0;
  *(_QWORD *)(v89 + 64) = 0;
  *(_QWORD *)(v89 + 72) = 0;
  *(_DWORD *)(v89 + 80) = 0;
  v91 = operator new();
  *(_QWORD *)(v91 + 16) = 50;
  *(_DWORD *)(v91 + 24) = -1;
  *(_QWORD *)v91 = &off_24C0D8658;
  *(_QWORD *)(v91 + 32) = v89;
  *(_QWORD *)(v91 + 40) = v89 + 8;
  LODWORD(v147[0]) = 26826;
  *((_QWORD *)&v147[0] + 1) = v91;
  v92 = operator new();
  if (*(char *)(v89 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(v89 + 24), *(_QWORD *)(v89 + 32));
  }
  else
  {
    *(_OWORD *)&v130.__r_.__value_.__l.__data_ = *v90;
    v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(v89 + 40);
  }
  *(_QWORD *)(v92 + 16) = 0;
  *(_QWORD *)(v92 + 24) = 0;
  *(std::string *)(v92 + 32) = v130;
  *(_QWORD *)v92 = off_24C0D86A0;
  *(_QWORD *)(v92 + 8) = 0;
  *(_QWORD *)(v92 + 64) = v89;
  *(_QWORD *)(v92 + 72) = v90;
  LODWORD(v130.__r_.__value_.__l.__data_) = 25546;
  v130.__r_.__value_.__l.__size_ = v92;
  v93 = *(uint64_t **)(v89 + 56);
  if (v93 == *(uint64_t **)(v89 + 64))
    v94 = 0;
  else
    v94 = *v93;
  v95 = operator new();
  *(_QWORD *)(v95 + 16) = v94;
  *(_DWORD *)(v95 + 24) = -1;
  *(_QWORD *)v95 = &off_24C0D86E8;
  *(_QWORD *)(v95 + 32) = v89;
  *(_QWORD *)(v95 + 40) = v89 + 56;
  LODWORD(v146) = 25541;
  *((_QWORD *)&v146 + 1) = v95;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v89 + 88, (unsigned int *)v147, (unsigned int *)&v130, (unsigned int *)&v146);
  v96 = *((_QWORD *)&v146 + 1);
  *((_QWORD *)&v146 + 1) = 0;
  if (v96)
    (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
  v97 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v97)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v97 + 8))(v97);
  v98 = *((_QWORD *)&v147[0] + 1);
  *((_QWORD *)&v147[0] + 1) = 0;
  if (v98)
    (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
  *(_QWORD *)v89 = off_24C0D8598;
  *(_QWORD *)(v89 + 328) = v88;
  *(_QWORD *)(v89 + 336) = v88 + 8;
  LODWORD(v142) = 25536;
  *((_QWORD *)&v142 + 1) = v89;
  v99 = operator new();
  v146 = xmmword_208F52250;
  v147[0] = xmmword_208F52240;
  v144 = xmmword_208F52270;
  v145 = xmmword_208F52260;
  v143 = xmmword_208F52280;
  LODWORD(v130.__r_.__value_.__l.__data_) = 26568;
  *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = xmmword_208F52290;
  v100 = (_QWORD *)webm::MasterValueParser<webm::SimpleTag>::MasterValueParser<webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>,webm::MasterValueParser<webm::SimpleTag>::RecursiveChildFactory<webm::SimpleTagParser>>(v99, (uint64_t)v147, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144, (uint64_t)&v143, (uint64_t)&v130);
  *v100 = &off_24C0D8730;
  v100[52] = v88;
  v100[53] = v88 + 88;
  LODWORD(v130.__r_.__value_.__l.__data_) = 26568;
  v130.__r_.__value_.__l.__size_ = (std::string::size_type)v100;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v88 + 120, (unsigned int *)&v142, (unsigned int *)&v130);
  v101 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v101)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v101 + 8))(v101);
  v102 = *((_QWORD *)&v142 + 1);
  *((_QWORD *)&v142 + 1) = 0;
  if (v102)
    (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
  *(_QWORD *)v88 = &off_24C0D84D8;
  LODWORD(v130.__r_.__value_.__l.__data_) = 29555;
  v130.__r_.__value_.__l.__size_ = v88;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v87, (unsigned int *)&v130);
  v103 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v103)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v103 + 8))(v103);
  *v87 = &off_24C0D8490;
  v118 = 307544935;
  v119 = v87;
  v104 = (_QWORD *)operator new();
  v105 = operator new();
  *(_OWORD *)&v130.__r_.__value_.__l.__data_ = xmmword_208F522A0;
  v146 = xmmword_208F522C0;
  v147[0] = xmmword_208F522B0;
  v144 = xmmword_208F522E0;
  v145 = xmmword_208F522D0;
  v142 = xmmword_208F52300;
  v143 = xmmword_208F522F0;
  v140 = xmmword_208F52320;
  v141 = xmmword_208F52310;
  v138 = xmmword_208F52340;
  v139 = xmmword_208F52330;
  v136 = xmmword_208F52360;
  v137 = xmmword_208F52350;
  v134 = xmmword_208F52380;
  v135 = xmmword_208F52370;
  v132 = xmmword_208F523A0;
  v133 = xmmword_208F52390;
  v131 = xmmword_208F523B0;
  v106 = (_QWORD *)webm::MasterValueParser<webm::TrackEntry>::MasterValueParser<webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<webm::TrackType>,webm::TrackType>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::VideoParser,webm::Video>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::AudioParser,webm::Audio>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ContentEncodingsParser,webm::ContentEncodings>>(v105, (uint64_t)&v130, (uint64_t)v147, (uint64_t)&v146, (uint64_t)&v145, (uint64_t)&v144, (uint64_t)&v143, (uint64_t)&v142, (uint64_t)&v141, (uint64_t)&v140, (uint64_t)&v139, (uint64_t)&v138, (uint64_t)&v137, (uint64_t)&v136, (uint64_t)&v135, (uint64_t)&v134, (uint64_t)&v133, (uint64_t)&v132, (uint64_t)&v131);
  *v106 = &off_24C0D8A00;
  LODWORD(v130.__r_.__value_.__l.__data_) = 174;
  v130.__r_.__value_.__l.__size_ = (std::string::size_type)v106;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v104, (unsigned int *)&v130);
  v107 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v107)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v107 + 8))(v107);
  *v104 = &off_24C0D89B8;
  LODWORD(v130.__r_.__value_.__l.__data_) = 374648427;
  v130.__r_.__value_.__l.__size_ = (std::string::size_type)v104;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v116, &v128, &v126, &v124, &v122, &v120, &v118, (unsigned int *)&v130);
  v108 = v130.__r_.__value_.__l.__size_;
  v130.__r_.__value_.__l.__size_ = 0;
  if (v108)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v108 + 8))(v108);
  v109 = v119;
  v119 = 0;
  if (v109)
    (*(void (**)(_QWORD *))(*v109 + 8))(v109);
  v110 = v121;
  v121 = 0;
  if (v110)
    (*(void (**)(_QWORD *))(*v110 + 8))(v110);
  v111 = v123;
  v123 = 0;
  if (v111)
    (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  v112 = v125;
  v125 = 0;
  if (v112)
    (*(void (**)(_QWORD *))(*v112 + 8))(v112);
  v113 = v127;
  v127 = 0;
  if (v113)
    (*(void (**)(uint64_t))(*(_QWORD *)v113 + 8))(v113);
  v114 = v129;
  v129 = 0;
  if (v114)
    (*(void (**)(_QWORD *))(*v114 + 8))(v114);
  *(_QWORD *)v116 = &off_24C0D7200;
  *((_DWORD *)v116 + 59) = 0;
  return v116;
}

uint64_t webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8)
{
  _QWORD *v15;
  size_t prime;
  unint64_t v17;
  int8x8_t v18;
  size_t v19;
  uint8x8_t v20;
  uint64_t v21;
  size_t v22;
  int8x8_t v23;
  uint8x8_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v35;
  uint64_t v36;

  *(_QWORD *)a1 = &off_24C0D70E8;
  *(_QWORD *)(a1 + 8) = &unk_24C0D7088;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = &unk_24C0D99A8;
  *(_QWORD *)(a1 + 32) = &unk_24C0D9A60;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 80) = 0u;
  v15 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 120) = &unk_24C0D9A18;
  *(_QWORD *)(a1 + 160) = &unk_24C0D99D0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  prime = std::__next_prime(9uLL);
  v17 = prime;
  v18 = *(int8x8_t *)(a1 + 88);
  if (prime > *(_QWORD *)&v18)
    goto LABEL_14;
  if (prime >= *(_QWORD *)&v18)
    goto LABEL_15;
  v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
  if (*(_QWORD *)&v18 >= 3uLL)
  {
    v20 = (uint8x8_t)vcnt_s8(v18);
    v20.i16[0] = vaddlv_u8(v20);
    if (v20.u32[0] <= 1uLL)
    {
      v21 = 1 << -(char)__clz(v19 - 1);
      if (v19 >= 2)
        v19 = v21;
      if (v17 <= v19)
        v17 = v19;
      if (v17 >= *(_QWORD *)&v18)
        goto LABEL_15;
LABEL_14:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>((uint64_t)v15, v17);
      goto LABEL_15;
    }
  }
  v22 = std::__next_prime(v19);
  if (v17 <= v22)
    v17 = v22;
  if (v17 < *(_QWORD *)&v18)
    goto LABEL_14;
LABEL_15:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v15, a2, (uint64_t)a2);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v15, a3, (uint64_t)a3);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v15, a4, (uint64_t)a4);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v15, a5, (uint64_t)a5);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v15, a6, (uint64_t)a6);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v15, a7, (uint64_t)a7);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v15, a8, (uint64_t)a8);
  v23 = *(int8x8_t *)(a1 + 88);
  if (v23)
  {
    v24 = (uint8x8_t)vcnt_s8(v23);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      v25 = 236;
      if (*(_QWORD *)&v23 <= 0xECuLL)
        v25 = 0xECu % *(_QWORD *)(a1 + 88);
    }
    else
    {
      v25 = (v23.i32[0] - 1) & 0xECLL;
    }
    v26 = *(uint64_t ***)(*v15 + 8 * v25);
    if (v26)
    {
      v27 = *v26;
      if (v27)
      {
        if (v24.u32[0] < 2uLL)
        {
          v28 = *(_QWORD *)&v23 - 1;
          while (1)
          {
            v30 = v27[1];
            if (v30 == 236)
            {
              if (*((_DWORD *)v27 + 4) == 236)
                return a1;
            }
            else if ((v30 & v28) != v25)
            {
              goto LABEL_35;
            }
            v27 = (uint64_t *)*v27;
            if (!v27)
              goto LABEL_35;
          }
        }
        do
        {
          v29 = v27[1];
          if (v29 == 236)
          {
            if (*((_DWORD *)v27 + 4) == 236)
              return a1;
          }
          else
          {
            if (v29 >= *(_QWORD *)&v23)
              v29 %= *(_QWORD *)&v23;
            if (v29 != v25)
              break;
          }
          v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
    }
  }
LABEL_35:
  v31 = operator new();
  *(_OWORD *)v31 = 0u;
  *(_OWORD *)(v31 + 16) = 0u;
  *(_QWORD *)v31 = &unk_24C0D9A88;
  *(_QWORD *)(v31 + 32) = 0;
  v35 = 236;
  v36 = v31;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v15, &v35, (uint64_t)&v35);
  v32 = v36;
  v36 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  return a1;
}

uint64_t webm::SegmentParser::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  *(_BYTE *)(a1 + 234) = 0;
  *(_WORD *)(a1 + 232) = 0;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 52) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = v3;
  *(_OWORD *)(a1 + 200) = v4;
  *(_QWORD *)(a1 + 224) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 216) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 216) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 188) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 188) = 0;
  return 0;
}

uint64_t webm::SegmentParser::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t result;

  result = webm::MasterParser::InitAfterSeek(a1, a2, a3);
  *(_WORD *)(a1 + 233) = 1;
  *(_DWORD *)(a1 + 236) = 0;
  return result;
}

uint64_t webm::SegmentParser::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  void **v6;
  int v8;
  uint64_t result;
  int v10;
  void *v11;
  int v12;
  int v13;
  __int128 v14;

  v6 = a2;
  *a4 = 0;
  if (!*(_BYTE *)(a1 + 233))
  {
    v10 = *(_DWORD *)(a1 + 192);
    v12 = 408125543;
    v13 = v10;
    v14 = *(_OWORD *)(a1 + 200);
    result = (*((uint64_t (**)(void **, int *, uint64_t))*a2 + 6))(a2, &v12, a1 + 236);
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 233) = 1;
  }
  v11 = &unk_24C0D7130;
  if (*(_DWORD *)(a1 + 236) == 1)
    v6 = &v11;
  if (*(_BYTE *)(a1 + 234))
    goto LABEL_5;
  result = webm::MasterParser::Feed(a1, v6, a3, a4);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 234) = 1;
LABEL_5:
    v8 = *(_DWORD *)(a1 + 192);
    v12 = 408125543;
    v13 = v8;
    v14 = *(_OWORD *)(a1 + 200);
    return (*((uint64_t (**)(void **, int *))*v6 + 22))(v6, &v12);
  }
  return result;
}

BOOL webm::SegmentParser::WasSkipped(webm::SegmentParser *this)
{
  return *((_DWORD *)this + 59) == 1;
}

void webm::SegmentParser::~SegmentParser(webm::SegmentParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(uint64_t a1, unsigned int *a2)
{
  _QWORD *v4;
  size_t prime;
  unint64_t v6;
  int8x8_t v7;
  size_t v8;
  uint8x8_t v9;
  uint64_t v10;
  size_t v11;
  int8x8_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;

  *(_QWORD *)a1 = &off_24C0D70E8;
  *(_QWORD *)(a1 + 8) = &unk_24C0D7088;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = &unk_24C0D99A8;
  *(_QWORD *)(a1 + 32) = &unk_24C0D9A60;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 80) = 0u;
  v4 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 120) = &unk_24C0D9A18;
  *(_QWORD *)(a1 + 160) = &unk_24C0D99D0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  prime = std::__next_prime(3uLL);
  v6 = prime;
  v7 = *(int8x8_t *)(a1 + 88);
  if (prime > *(_QWORD *)&v7)
    goto LABEL_14;
  if (prime >= *(_QWORD *)&v7)
    goto LABEL_15;
  v8 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
  if (*(_QWORD *)&v7 >= 3uLL)
  {
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] <= 1uLL)
    {
      v10 = 1 << -(char)__clz(v8 - 1);
      if (v8 >= 2)
        v8 = v10;
      if (v6 <= v8)
        v6 = v8;
      if (v6 >= *(_QWORD *)&v7)
        goto LABEL_15;
LABEL_14:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>((uint64_t)v4, v6);
      goto LABEL_15;
    }
  }
  v11 = std::__next_prime(v8);
  if (v6 <= v11)
    v6 = v11;
  if (v6 < *(_QWORD *)&v7)
    goto LABEL_14;
LABEL_15:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v4, a2, (uint64_t)a2);
  v12 = *(int8x8_t *)(a1 + 88);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8(v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v14 = 236;
      if (*(_QWORD *)&v12 <= 0xECuLL)
        v14 = 0xECu % *(_QWORD *)(a1 + 88);
    }
    else
    {
      v14 = (v12.i32[0] - 1) & 0xECLL;
    }
    v15 = *(uint64_t ***)(*v4 + 8 * v14);
    if (v15)
    {
      v16 = *v15;
      if (v16)
      {
        if (v13.u32[0] < 2uLL)
        {
          v17 = *(_QWORD *)&v12 - 1;
          while (1)
          {
            v19 = v16[1];
            if (v19 == 236)
            {
              if (*((_DWORD *)v16 + 4) == 236)
                return a1;
            }
            else if ((v19 & v17) != v14)
            {
              goto LABEL_35;
            }
            v16 = (uint64_t *)*v16;
            if (!v16)
              goto LABEL_35;
          }
        }
        do
        {
          v18 = v16[1];
          if (v18 == 236)
          {
            if (*((_DWORD *)v16 + 4) == 236)
              return a1;
          }
          else
          {
            if (v18 >= *(_QWORD *)&v12)
              v18 %= *(_QWORD *)&v12;
            if (v18 != v14)
              break;
          }
          v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
LABEL_35:
  v20 = operator new();
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_QWORD *)v20 = &unk_24C0D9A88;
  *(_QWORD *)(v20 + 32) = 0;
  v23 = 236;
  v24 = v20;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v4, &v23, (uint64_t)&v23);
  v21 = v24;
  v24 = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  return a1;
}

void webm::ChaptersParser::~ChaptersParser(webm::ChaptersParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::EditionEntryParser::~EditionEntryParser(webm::EditionEntryParser *this)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C0D72F0;
  *((_QWORD *)this + 5) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 17);
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    operator delete(v3);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *((_QWORD *)this + 2);
    v6 = (void *)*((_QWORD *)this + 1);
    if (v5 != v4)
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(v5 - 136));
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v4;
    operator delete(v6);
  }
}

{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;

  *(_QWORD *)this = &off_24C0D72F0;
  *((_QWORD *)this + 5) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 17);
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    operator delete(v3);
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = *((_QWORD *)this + 2);
    v6 = (void *)*((_QWORD *)this + 1);
    if (v5 != v4)
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(v5 - 136));
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 1);
    }
    *((_QWORD *)this + 2) = v4;
    operator delete(v6);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::EditionEntry>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 36))
  {
    if (*(_BYTE *)(a1 + 37))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 32) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 40, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 40, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 36) = 1;
    if (*(_BYTE *)(a1 + 37))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 32) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 32);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 37) = 1;
    if (*(_DWORD *)(a1 + 32) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::EditionEntry>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v6 = a1 + 8;
  v7 = *(char **)(a1 + 8);
  if (v7)
  {
    v8 = *(char **)(a1 + 16);
    v9 = v7;
    if (v8 != v7)
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(v8 - 136));
      while (v8 != v7);
      v9 = *(char **)v6;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 22) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v10 = *(_DWORD *)(a2 + 4);
  v11 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 80) = -1;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = v10;
  *(_OWORD *)(a1 + 240) = v11;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  v12 = *(_QWORD *)(a2 + 8);
  if (v12 == -1)
  {
    *(_QWORD *)(a1 + 256) = a3;
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 256) = v12;
  if (v12)
  {
LABEL_10:
    v13 = 0;
    goto LABEL_11;
  }
  v13 = 8;
LABEL_11:
  *(_DWORD *)(a1 + 228) = v13;
  return 0;
}

uint64_t webm::MasterValueParser<webm::EditionEntry>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;

  v6 = a1 + 8;
  v7 = *(char **)(a1 + 8);
  if (v7)
  {
    v8 = *(char **)(a1 + 16);
    v9 = v7;
    if (v8 != v7)
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(v8 - 136));
      while (v8 != v7);
      v9 = *(char **)v6;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
  }
  *(_QWORD *)(v6 + 22) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(a1 + 37) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 40, a2, a3);
}

BOOL webm::MasterValueParser<webm::EditionEntry>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 272))
    return 0;
  v2 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 272) != 0;
}

BOOL webm::MasterValueParser<webm::EditionEntry>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) == 1;
}

uint64_t webm::MasterValueParser<webm::EditionEntry>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::EditionEntryParser::OnParseCompleted(webm::EditionEntryParser *this, webm::Callback *a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *((_DWORD *)this + 58);
  v4[0] = 17849;
  v4[1] = v2;
  v5 = *((_OWORD *)this + 15);
  return (*(uint64_t (**)(webm::Callback *, _DWORD *, char *))(*(_QWORD *)a2 + 160))(a2, v4, (char *)this + 8);
}

_QWORD *webm::MasterValueParser<webm::EditionEntry>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v8;
  uint64_t v9;

  *a1 = &off_24C0D72F0;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v8 = (_QWORD *)*v2;
      v9 = v2[3];
      v2[3] = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      operator delete(v2);
      v2 = v8;
    }
    while (v8);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(v5 - 136));
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void webm::MasterValueParser<webm::EditionEntry>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &off_24C0D72F0;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(v5 - 136));
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::EditionEntry>::OnParseCompleted()
{
  return 0;
}

_QWORD *webm::MasterValueParser<webm::EditionEntry>::ChildParser<webm::ChapterAtomParser,webm::MasterValueParser<webm::EditionEntry>::RepeatedChildFactory<webm::ChapterAtomParser,webm::ChapterAtom>::BuildParser(webm::MasterValueParser<webm::EditionEntry>*,webm::EditionEntry*)::{lambda(webm::ChapterAtomParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7410;
  a1[18] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[30];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[28];
  a1[28] = 0;
  if (v3)
    operator delete(v3);
  webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(a1 + 1));
  return a1;
}

void webm::MasterValueParser<webm::EditionEntry>::ChildParser<webm::ChapterAtomParser,webm::MasterValueParser<webm::EditionEntry>::RepeatedChildFactory<webm::ChapterAtomParser,webm::ChapterAtom>::BuildParser(webm::MasterValueParser<webm::EditionEntry>*,webm::EditionEntry*)::{lambda(webm::ChapterAtomParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D7410;
  a1[18] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[30];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[28];
  a1[28] = 0;
  if (v3)
    operator delete(v3);
  webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(a1 + 1));
  JUMPOUT(0x20BD0ADECLL);
}

_OWORD *webm::MasterValueParser<webm::EditionEntry>::ChildParser<webm::ChapterAtomParser,webm::MasterValueParser<webm::EditionEntry>::RepeatedChildFactory<webm::ChapterAtomParser,webm::ChapterAtom>::BuildParser(webm::MasterValueParser<webm::EditionEntry>*,webm::EditionEntry*)::{lambda(webm::ChapterAtomParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  _BYTE *v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::ChapterAtom>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 384) + 32) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return (_OWORD *)v5;
  }
  v7 = *(_QWORD *)(a1 + 392);
  v8 = *(_BYTE **)v7;
  result = *(_OWORD **)(v7 + 8);
  if ((_OWORD *)((char *)result - *(_QWORD *)v7) == (_OWORD *)136)
  {
    if (v8 == (_BYTE *)result)
      goto LABEL_14;
    if (!v8[128])
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)((char *)result - 136));
      while (result != (_OWORD *)v8);
      *(_QWORD *)(v7 + 8) = v8;
      v7 = *(_QWORD *)(a1 + 392);
      result = *(_OWORD **)(v7 + 8);
    }
  }
  v9 = (_OWORD *)(a1 + 8);
  if ((unint64_t)result >= *(_QWORD *)(v7 + 16))
  {
    *(_QWORD *)(v7 + 8) = std::vector<webm::Element<webm::ChapterAtom>>::__emplace_back_slow_path<webm::ChapterAtom,BOOL>((void **)v7, (uint64_t)v9, 1);
    return (_OWORD *)v5;
  }
  if (result)
  {
    *result = *v9;
    v10 = *(_OWORD *)(a1 + 24);
    *((_QWORD *)result + 4) = *(_QWORD *)(a1 + 40);
    result[1] = v10;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *((_BYTE *)result + 40) = *(_BYTE *)(a1 + 48);
    v11 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)((char *)result + 57) = *(_OWORD *)(a1 + 65);
    result[3] = v11;
    *((_QWORD *)result + 11) = 0;
    *((_QWORD *)result + 12) = 0;
    *((_QWORD *)result + 10) = 0;
    result[5] = *(_OWORD *)(a1 + 88);
    *((_QWORD *)result + 12) = *(_QWORD *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *((_QWORD *)result + 13) = 0;
    *((_QWORD *)result + 14) = 0;
    *((_QWORD *)result + 15) = 0;
    *(_OWORD *)((char *)result + 104) = *(_OWORD *)(a1 + 112);
    *((_QWORD *)result + 15) = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *((_BYTE *)result + 128) = 1;
    *(_QWORD *)(v7 + 8) = (char *)result + 136;
    return (_OWORD *)v5;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  _OWORD v11[8];

  memset(v11, 0, sizeof(v11));
  webm::ChapterAtom::operator=(a1 + 8, (uint64_t *)v11);
  webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)v11);
  *(_DWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 140) = 0;
  v6 = *(_DWORD *)(a2 + 4);
  v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 184) = -1;
  *(_DWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = v6;
  *(_OWORD *)(a1 + 344) = v7;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 == -1)
  {
    *(_QWORD *)(a1 + 360) = a3;
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + 360) = v8;
  if (v8)
  {
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  v9 = 8;
LABEL_6:
  *(_DWORD *)(a1 + 332) = v9;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  _OWORD v7[8];

  memset(v7, 0, sizeof(v7));
  webm::ChapterAtom::operator=(a1 + 8, (uint64_t *)v7);
  webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)v7);
  *(_DWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 140) = 256;
  return webm::MasterParser::InitAfterSeek(a1 + 144, a2, a3);
}

BOOL webm::MasterValueParser<webm::ChapterAtom>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 376))
    return 0;
  v2 = *(_OWORD *)(a1 + 200);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 216);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 376) != 0;
}

BOOL webm::MasterValueParser<webm::ChapterAtom>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 136) == 1;
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::MasterValueParser<webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::RepeatedChildFactory<webm::ChapterDisplayParser,webm::ChapterDisplay>,webm::MasterValueParser<webm::ChapterAtom>::RecursiveChildFactory<webm::ChapterAtomParser>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  std::string::size_type v25;
  uint64_t v26;
  std::string::size_type v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  std::string *v32;
  __int128 v33;
  std::string::size_type v34;
  std::string::size_type v35;
  std::string::size_type v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  std::string::size_type v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  _QWORD *v60;
  std::string __dst;

  *(_QWORD *)a1 = &off_24C0D7410;
  *(_QWORD *)(a1 + 8) = 0;
  v14 = a1 + 8;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  v15 = (_QWORD *)(a1 + 8 + *(_QWORD *)(a2 + 8));
  v16 = operator new();
  *(_QWORD *)(v16 + 16) = *v15;
  *(_DWORD *)(v16 + 24) = -1;
  *(_QWORD *)v16 = &off_24C0D7470;
  *(_QWORD *)(v16 + 32) = a1;
  *(_QWORD *)(v16 + 40) = v15;
  v55 = *(_DWORD *)a2;
  v56 = v16;
  v17 = v14 + *(_QWORD *)(a3 + 8);
  v18 = operator new();
  if (*(char *)(v17 + 23) < 0)
    std::string::__init_copy_ctor_external(&__dst, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
  else
    __dst = *(std::string *)v17;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(std::string *)(v18 + 32) = __dst;
  *(_QWORD *)v18 = off_24C0D74B8;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 64) = a1;
  *(_QWORD *)(v18 + 72) = v17;
  v53 = *(_DWORD *)a3;
  v19 = (_QWORD *)(v14 + *(_QWORD *)(a4 + 8));
  v54 = v18;
  v20 = operator new();
  *(_QWORD *)(v20 + 16) = *v19;
  *(_DWORD *)(v20 + 24) = -1;
  *(_QWORD *)v20 = &off_24C0D7470;
  *(_QWORD *)(v20 + 32) = a1;
  *(_QWORD *)(v20 + 40) = v19;
  v51 = *(_DWORD *)a4;
  v52 = v20;
  v21 = (_QWORD *)(v14 + *(_QWORD *)(a5 + 8));
  v22 = operator new();
  *(_QWORD *)(v22 + 16) = *v21;
  *(_DWORD *)(v22 + 24) = -1;
  *(_QWORD *)v22 = &off_24C0D7470;
  *(_QWORD *)(v22 + 32) = a1;
  *(_QWORD *)(v22 + 40) = v21;
  v49 = *(_DWORD *)a5;
  v50 = v22;
  v23 = *(_QWORD *)(a6 + 8);
  result = operator new();
  v25 = result;
  *(_QWORD *)result = &off_24C0D75A8;
  *(_QWORD *)(result + 8) = 0;
  v26 = result + 8;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_BYTE *)(result + 32) = 0;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 3;
  if (&__dst <= (std::string *)"eng" && (char *)__dst.__r_.__value_.__r.__words + 3 > "eng")
  {
    __break(1u);
  }
  else
  {
    v48 = v23;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 6778469;
    v27 = __dst.__r_.__value_.__r.__words[0];
    v28 = (char *)operator new(0x20uLL);
    *(_QWORD *)(v25 + 40) = v28;
    *(_QWORD *)v28 = v27;
    *(_WORD *)(v28 + 23) = 3;
    *(_QWORD *)(v25 + 48) = v28 + 32;
    *(_QWORD *)(v25 + 56) = v28 + 32;
    *(_QWORD *)(v25 + 64) = 0;
    *(_DWORD *)(v25 + 88) = 0;
    *(_QWORD *)(v25 + 72) = 0;
    *(_QWORD *)(v25 + 80) = 0;
    v29 = operator new();
    *(_OWORD *)(v29 + 32) = *(_OWORD *)v26;
    *(_QWORD *)(v29 + 48) = *(_QWORD *)(v26 + 16);
    *(_QWORD *)(v29 + 16) = 0;
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)v29 = off_24C0D7608;
    *(_QWORD *)(v29 + 8) = 0;
    *(_QWORD *)(v29 + 64) = v25;
    *(_QWORD *)(v29 + 72) = v26;
    v59 = 133;
    v60 = (_QWORD *)v29;
    memset(&__dst, 0, sizeof(__dst));
    if (v28[23] < 0)
      std::string::__assign_no_alias<true>(&__dst, *(char **)v28, *((_QWORD *)v28 + 1));
    else
      __dst = *(std::string *)v28;
    v30 = operator new();
    size = __dst.__r_.__value_.__l.__size_;
    *(_QWORD *)(v30 + 32) = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v30 + 40) = size;
    *(_QWORD *)(v30 + 47) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
    LOBYTE(size) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
    *(_QWORD *)(v30 + 16) = 0;
    *(_QWORD *)(v30 + 24) = 0;
    *(_BYTE *)(v30 + 55) = size;
    *(_QWORD *)v30 = off_24C0D7650;
    *(_QWORD *)(v30 + 8) = 0;
    *(_QWORD *)(v30 + 64) = v25;
    *(_QWORD *)(v30 + 72) = v25 + 40;
    v57 = 17276;
    v58 = v30;
    memset(&__dst, 0, sizeof(__dst));
    v32 = *(std::string **)(v25 + 64);
    if (&__dst != v32 && v32 != *(std::string **)(v25 + 72))
    {
      if (SHIBYTE(v32->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__assign_no_alias<true>(&__dst, v32->__r_.__value_.__l.__data_, v32->__r_.__value_.__l.__size_);
      }
      else
      {
        v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v33;
      }
    }
    v34 = operator new();
    v35 = __dst.__r_.__value_.__l.__size_;
    *(_QWORD *)(v34 + 32) = __dst.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v34 + 40) = v35;
    *(_QWORD *)(v34 + 47) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
    LOBYTE(v35) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
    *(_QWORD *)(v34 + 16) = 0;
    *(_QWORD *)(v34 + 24) = 0;
    *(_BYTE *)(v34 + 55) = v35;
    *(_QWORD *)v34 = off_24C0D7650;
    *(_QWORD *)(v34 + 8) = 0;
    *(_QWORD *)(v34 + 64) = v25;
    *(_QWORD *)(v34 + 72) = v25 + 64;
    LODWORD(__dst.__r_.__value_.__l.__data_) = 17278;
    __dst.__r_.__value_.__l.__size_ = v34;
    webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v25 + 96, &v59, &v57, (unsigned int *)&__dst);
    v36 = __dst.__r_.__value_.__l.__size_;
    __dst.__r_.__value_.__l.__size_ = 0;
    if (v36)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v36 + 8))(v36);
    v37 = v58;
    v58 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v38 = v60;
    v60 = 0;
    if (v38)
      (*(void (**)(_QWORD *))(*v38 + 8))(v38);
    *(_QWORD *)v25 = &off_24C0D7548;
    *(_QWORD *)(v25 + 336) = a1;
    *(_QWORD *)(v25 + 344) = v14 + v48;
    LODWORD(__dst.__r_.__value_.__l.__data_) = *(_DWORD *)a6;
    __dst.__r_.__value_.__l.__size_ = v25;
    v39 = v14 + *(_QWORD *)(a7 + 8);
    v40 = (_QWORD *)operator new();
    v41 = *(_QWORD *)(a7 + 16);
    *v40 = &off_24C0D7698;
    v40[1] = 0;
    v40[2] = v41;
    v40[3] = a1;
    v40[4] = v39;
    v59 = *(_DWORD *)a7;
    v60 = v40;
    webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(a1 + 144, &v55, &v53, &v51, &v49, (unsigned int *)&__dst, &v59);
    v42 = v60;
    v60 = 0;
    if (v42)
      (*(void (**)(_QWORD *))(*v42 + 8))(v42);
    v43 = __dst.__r_.__value_.__l.__size_;
    __dst.__r_.__value_.__l.__size_ = 0;
    if (v43)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v43 + 8))(v43);
    v44 = v50;
    v50 = 0;
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
    v45 = v52;
    v52 = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
    v46 = v54;
    v54 = 0;
    if (v46)
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
    v47 = v56;
    v56 = 0;
    if (v47)
      (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    return a1;
  }
  return result;
}

void webm::ChapterAtomParser::~ChapterAtomParser(webm::ChapterAtomParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D7410;
  *((_QWORD *)this + 18) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 30);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    operator delete(v3);
  webm::ChapterAtom::~ChapterAtom((webm::ChapterAtomParser *)((char *)this + 8));
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D7410;
  *((_QWORD *)this + 18) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 30);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    operator delete(v3);
  webm::ChapterAtom::~ChapterAtom((webm::ChapterAtomParser *)((char *)this + 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 140))
  {
    if (*(_BYTE *)(a1 + 141))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 136) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 144, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 144, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 140) = 1;
    if (*(_BYTE *)(a1 + 141))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 136) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 136);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 141) = 1;
    if (*(_DWORD *)(a1 + 136) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::ChapterAtom>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7410;
  a1[18] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[30];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[28];
  a1[28] = 0;
  if (v3)
    operator delete(v3);
  webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(a1 + 1));
  return a1;
}

void webm::MasterValueParser<webm::ChapterAtom>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D7410;
  a1[18] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[30];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[28];
  a1[28] = 0;
  if (v3)
    operator delete(v3);
  webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(a1 + 1));
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 136) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<unsigned long long>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::ByteParser<std::string>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *a4 = 0;
  v5 = webm::ByteParser<std::string>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 64) + 136) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a1 + 31) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return v5;
}

uint64_t webm::ByteParser<std::string>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;
  std::string *v5;
  unint64_t v6;
  int v7;
  const std::string::value_type *v8;
  size_t v9;
  int v10;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == -1)
    return 4294966270;
  if (v2 > 0x7FFFFFFFFFFFFFF7)
    return 4294966267;
  v5 = (std::string *)(a1 + 8);
  if (v2)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      v6 = *(_QWORD *)(a1 + 16);
      if (v6 >= v2)
      {
        v5 = *(std::string **)(a1 + 8);
        *(_QWORD *)(a1 + 16) = v2;
        goto LABEL_23;
      }
    }
    else
    {
      v6 = *(unsigned __int8 *)(a1 + 31);
      if (v2 <= v6)
      {
        *(_BYTE *)(a1 + 31) = v2 & 0x7F;
LABEL_23:
        v5->__r_.__value_.__s.__data_[v2] = 0;
        result = 0;
        *(_QWORD *)(a1 + 56) = 0;
        return result;
      }
    }
    std::string::append(v5, v2 - v6, 0);
    result = 0;
    *(_QWORD *)(a1 + 56) = 0;
    return result;
  }
  v7 = *(char *)(a1 + 55);
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    if ((v7 & 0x80000000) == 0)
    {
      *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 32);
      v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 48);
      result = 0;
      *(_QWORD *)(a1 + 56) = v7;
      return result;
    }
    std::string::__assign_no_alias<true>(v5, *(char **)(a1 + 32), *(_QWORD *)(a1 + 40));
    v10 = *(char *)(a1 + 55);
    if (v10 < 0)
      goto LABEL_25;
LABEL_21:
    result = 0;
    *(_QWORD *)(a1 + 56) = v10;
    return result;
  }
  if (v7 >= 0)
    v8 = (const std::string::value_type *)(a1 + 32);
  else
    v8 = *(const std::string::value_type **)(a1 + 32);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 55);
  else
    v9 = *(_QWORD *)(a1 + 40);
  std::string::__assign_no_alias<false>(v5, v8, v9);
  v10 = *(char *)(a1 + 55);
  if ((v10 & 0x80000000) == 0)
    goto LABEL_21;
LABEL_25:
  result = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  return result;
}

uint64_t webm::ByteParser<std::string>::~ByteParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void webm::ByteParser<std::string>::~ByteParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t webm::ByteParser<std::string>::Feed(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = result;
  *a4 = 0;
  v7 = *(_QWORD *)(result + 56);
  if (*(char *)(result + 31) < 0)
  {
    if (v7 == *(_QWORD *)(result + 16))
      return 0;
  }
  else if (v7 == *(unsigned __int8 *)(result + 31))
  {
    return 0;
  }
  v8 = (uint64_t *)(result + 8);
  do
  {
    v16 = 0;
    if (*(char *)(v6 + 31) < 0)
    {
      v10 = *(_QWORD *)(v6 + 16);
      if (!v10)
      {
LABEL_22:
        __break(1u);
        return result;
      }
      v11 = *v8;
    }
    else
    {
      v10 = *(unsigned __int8 *)(v6 + 31);
      if (!*(_BYTE *)(v6 + 31))
        goto LABEL_22;
      v11 = v6 + 8;
    }
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, v10 - v7, v11 + v7, &v16);
    v9 = v16;
    *a4 += v16;
    v7 = *(_QWORD *)(v6 + 56) + v9;
    *(_QWORD *)(v6 + 56) = v7;
  }
  while ((_DWORD)result == -1);
  if ((_DWORD)result)
    return result;
  while (1)
  {
    while ((*(char *)(v6 + 31) & 0x80000000) == 0)
    {
      v12 = *(unsigned __int8 *)(v6 + 31);
      if (!*(_BYTE *)(v6 + 31) || *(_BYTE *)(v6 + 7 + v12))
        return 0;
      *(_BYTE *)(v6 + 31) = v12 - 1;
      *((_BYTE *)v8 + v12 - 1) = 0;
    }
    v13 = *(_QWORD *)(v6 + 16);
    if (!v13)
      break;
    v14 = *v8;
    if (*(_BYTE *)(*v8 + v13 - 1))
      break;
    v15 = v13 - 1;
    *(_QWORD *)(v6 + 16) = v15;
    *(_BYTE *)(v14 + v15) = 0;
  }
  return 0;
}

void webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::ChapterDisplayParser,webm::MasterValueParser<webm::ChapterAtom>::RepeatedChildFactory<webm::ChapterDisplayParser,webm::ChapterDisplay>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::ChapterDisplayParser*)#1}>::~ChildParser(uint64_t a1)
{
  webm::MasterValueParser<webm::ChapterDisplay>::~MasterValueParser(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::ChapterDisplayParser,webm::MasterValueParser<webm::ChapterAtom>::RepeatedChildFactory<webm::ChapterDisplayParser,webm::ChapterDisplay>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::ChapterDisplayParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char **v6;
  unint64_t v7;
  char *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::ChapterDisplay>::Feed(a1, a2, a3, a4);
  if (!(_DWORD)v5
    && *(_DWORD *)(*(_QWORD *)(a1 + 336) + 136) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v6 = *(char ***)(a1 + 344);
    v8 = *v6;
    v7 = (unint64_t)v6[1];
    if (v7 - (_QWORD)*v6 == 88)
    {
      if (v8 == (char *)v7)
        goto LABEL_31;
      if (!v8[80])
      {
        do
          v7 = webm::Element<webm::ChapterDisplay>::~Element(v7 - 88);
        while ((char *)v7 != v8);
        v6[1] = v8;
        v6 = *(char ***)(a1 + 344);
        v7 = (unint64_t)v6[1];
      }
    }
    v9 = (_OWORD *)(a1 + 8);
    v10 = (unint64_t)v6[2];
    if (v7 >= v10)
    {
      v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - (_QWORD)*v6) >> 3);
      if ((unint64_t)(v13 + 1) > 0x2E8BA2E8BA2E8BALL)
        goto LABEL_32;
      v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - (_QWORD)*v6) >> 3);
      v15 = 2 * v14;
      if (2 * v14 <= v13 + 1)
        v15 = v13 + 1;
      if (v14 >= 0x1745D1745D1745DLL)
        v16 = 0x2E8BA2E8BA2E8BALL;
      else
        v16 = v15;
      if (v16)
      {
        if (v16 > 0x2E8BA2E8BA2E8BALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v17 = 88 * v16;
        v18 = (char *)operator new(88 * v16);
        v19 = &v18[88 * v13];
        *(_OWORD *)v19 = *v9;
        v20 = &v18[v17];
        *((_QWORD *)v19 + 2) = *(_QWORD *)(a1 + 24);
        *(_QWORD *)v9 = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = 0;
        v19[24] = *(_BYTE *)(a1 + 32);
        *((_OWORD *)v19 + 2) = *(_OWORD *)(a1 + 40);
        *((_QWORD *)v19 + 6) = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_OWORD *)(v19 + 56) = *(_OWORD *)(a1 + 64);
        *((_QWORD *)v19 + 9) = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        v19[80] = 1;
        v12 = (unint64_t)(v19 + 88);
        v21 = *v6;
        v22 = v6[1];
        if (v22 == *v6)
        {
          *v6 = v19;
          v6[1] = (char *)v12;
          v6[2] = v20;
        }
        else
        {
          v23 = 0;
          do
          {
            v24 = &v19[v23];
            v25 = &v22[v23];
            v26 = *(_OWORD *)&v22[v23 - 88];
            *((_QWORD *)v24 - 9) = *(_QWORD *)&v22[v23 - 72];
            *(_OWORD *)(v24 - 88) = v26;
            *((_QWORD *)v25 - 10) = 0;
            *((_QWORD *)v25 - 9) = 0;
            *((_QWORD *)v25 - 11) = 0;
            *(v24 - 64) = v22[v23 - 64];
            *(_OWORD *)(v24 - 56) = *(_OWORD *)&v22[v23 - 56];
            *((_QWORD *)v24 - 5) = *(_QWORD *)&v22[v23 - 40];
            *((_QWORD *)v25 - 6) = 0;
            *((_QWORD *)v25 - 5) = 0;
            *((_QWORD *)v25 - 7) = 0;
            *((_OWORD *)v24 - 2) = *(_OWORD *)&v22[v23 - 32];
            *((_QWORD *)v24 - 2) = *(_QWORD *)&v22[v23 - 16];
            *((_QWORD *)v25 - 4) = 0;
            *((_QWORD *)v25 - 3) = 0;
            *((_QWORD *)v25 - 2) = 0;
            *(v24 - 8) = v22[v23 - 8];
            v23 -= 88;
          }
          while (&v22[v23] != v21);
          v22 = *v6;
          v27 = (uint64_t)v6[1];
          *v6 = &v19[v23];
          v6[1] = (char *)v12;
          for (v6[2] = v20; (char *)v27 != v22; v27 = webm::Element<webm::ChapterDisplay>::~Element(v27 - 88))
            ;
        }
        if (v22)
          operator delete(v22);
        goto LABEL_29;
      }
    }
    else if (v7)
    {
      v11 = *v9;
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 24);
      *(_OWORD *)v7 = v11;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)v9 = 0;
      *(_BYTE *)(v7 + 24) = *(_BYTE *)(a1 + 32);
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      *(_OWORD *)(v7 + 32) = *(_OWORD *)(a1 + 40);
      *(_QWORD *)(v7 + 48) = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 40) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 64) = 0;
      *(_QWORD *)(v7 + 72) = 0;
      *(_OWORD *)(v7 + 56) = *(_OWORD *)(a1 + 64);
      *(_QWORD *)(v7 + 72) = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_BYTE *)(v7 + 80) = 1;
      v12 = v7 + 88;
LABEL_29:
      v6[1] = (char *)v12;
      return v5;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    abort();
  }
  return v5;
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  uint64_t v8;

  webm::MasterValueParser<webm::ChapterDisplay>::PreInit(a1);
  v6 = *(_DWORD *)(a2 + 4);
  v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 136) = -1;
  *(_DWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = v6;
  *(_OWORD *)(a1 + 296) = v7;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 == -1)
  {
    *(_QWORD *)(a1 + 312) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 312) = v8;
    if (!v8)
    {
      *(_DWORD *)(a1 + 284) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 284) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  webm::MasterValueParser<webm::ChapterDisplay>::PreInit(a1);
  *(_BYTE *)(a1 + 93) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 96, a2, a3);
}

BOOL webm::MasterValueParser<webm::ChapterDisplay>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 328))
    return 0;
  v2 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 328) != 0;
}

BOOL webm::MasterValueParser<webm::ChapterDisplay>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 88) == 1;
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 92))
  {
    if (*(_BYTE *)(a1 + 93))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 88) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 96, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 96, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 92) = 1;
    if (*(_BYTE *)(a1 + 93))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 88) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 88);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 93) = 1;
    if (*(_DWORD *)(a1 + 88) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

void webm::MasterValueParser<webm::ChapterDisplay>::~MasterValueParser(uint64_t a1)
{
  webm::MasterValueParser<webm::ChapterDisplay>::~MasterValueParser(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::ChapterDisplay>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::ChapterDisplay>*,webm::ChapterDisplay*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void webm::MasterValueParser<webm::ChapterDisplay>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::ChapterDisplay>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::ChapterDisplay>*,webm::ChapterDisplay*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::ChapterDisplay>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::ChapterDisplay>*,webm::ChapterDisplay*)::{lambda(webm::ByteParser<std::string>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *a4 = 0;
  v5 = webm::ByteParser<std::string>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 64) + 88) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a1 + 31) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::ChapterDisplay>::RepeatedChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::ChapterDisplay>*,webm::ChapterDisplay*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void webm::MasterValueParser<webm::ChapterDisplay>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::ChapterDisplay>::RepeatedChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::ChapterDisplay>*,webm::ChapterDisplay*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::ChapterDisplay>::RepeatedChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::ChapterDisplay>*,webm::ChapterDisplay*)::{lambda(webm::ByteParser<std::string>*)#1}>::Feed(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  void **v7;
  char *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  void **v26;

  *a4 = 0;
  v5 = webm::ByteParser<std::string>::Feed((uint64_t)a1, a2, a3, a4);
  if ((_DWORD)v5 || *(_DWORD *)(a1[8] + 88) == 1 || ((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) != 0)
    return v5;
  v7 = (void **)a1[9];
  v9 = (char *)*v7;
  v8 = (char *)v7[1];
  if (v8 - (_BYTE *)*v7 != 32)
    goto LABEL_8;
  if (v9 == v8)
    goto LABEL_33;
  if (v9[24])
  {
LABEL_8:
    v10 = a1 + 1;
    v11 = (char *)v7[2];
    if (v8 < v11)
      goto LABEL_9;
    goto LABEL_15;
  }
  do
  {
    if (*(v8 - 9) < 0)
      operator delete(*((void **)v8 - 4));
    v8 -= 32;
  }
  while (v8 != v9);
  v7[1] = v9;
  v7 = (void **)a1[9];
  v8 = (char *)v7[1];
  v11 = (char *)v7[2];
  v10 = a1 + 1;
  if (v8 >= v11)
  {
LABEL_15:
    v14 = (v8 - (_BYTE *)*v7) >> 5;
    if ((unint64_t)(v14 + 1) >> 59)
      goto LABEL_34;
    v15 = v11 - (_BYTE *)*v7;
    v16 = v15 >> 4;
    if (v15 >> 4 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    v17 = (unint64_t)v15 >= 0x7FFFFFFFFFFFFFE0;
    v18 = 0x7FFFFFFFFFFFFFFLL;
    if (!v17)
      v18 = v16;
    if (v18)
    {
      if (v18 >> 59)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v19 = 32 * v18;
      v20 = (char *)operator new(32 * v18);
      v21 = &v20[v19];
      v22 = &v20[32 * v14];
      *(_OWORD *)v22 = *(_OWORD *)v10;
      *((_QWORD *)v22 + 2) = v10[2];
      *v10 = 0;
      v10[1] = 0;
      v10[2] = 0;
      v22[24] = 1;
      v13 = v22 + 32;
      v23 = (char *)*v7;
      v24 = (char *)v7[1];
      if (v24 == *v7)
      {
        *v7 = v22;
        v7[1] = v13;
        v7[2] = v21;
      }
      else
      {
        do
        {
          v25 = *((_OWORD *)v24 - 2);
          *((_QWORD *)v22 - 2) = *((_QWORD *)v24 - 2);
          *((_OWORD *)v22 - 2) = v25;
          *((_QWORD *)v24 - 3) = 0;
          *((_QWORD *)v24 - 2) = 0;
          *((_QWORD *)v24 - 4) = 0;
          *(v22 - 8) = *(v24 - 8);
          v22 -= 32;
          v24 -= 32;
        }
        while (v24 != v23);
        v24 = (char *)*v7;
        v26 = (void **)v7[1];
        *v7 = v22;
        v7[1] = v13;
        v7[2] = v21;
        while (v26 != (void **)v24)
        {
          if (*((char *)v26 - 9) < 0)
            operator delete(*(v26 - 4));
          v26 -= 4;
        }
      }
      if (v24)
        operator delete(v24);
      goto LABEL_32;
    }
LABEL_33:
    __break(1u);
LABEL_34:
    abort();
  }
LABEL_9:
  if (!v8)
    goto LABEL_33;
  v12 = *(_OWORD *)v10;
  *((_QWORD *)v8 + 2) = v10[2];
  *(_OWORD *)v8 = v12;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  v8[24] = 1;
  v13 = v8 + 32;
LABEL_32:
  v7[1] = v13;
  return v5;
}

uint64_t webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  _QWORD *v8;
  size_t prime;
  unint64_t v10;
  int8x8_t v11;
  size_t v12;
  uint8x8_t v13;
  uint64_t v14;
  size_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  uint64_t v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  uint64_t v28;

  *(_QWORD *)a1 = &off_24C0D70E8;
  *(_QWORD *)(a1 + 8) = &unk_24C0D7088;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = &unk_24C0D99A8;
  *(_QWORD *)(a1 + 32) = &unk_24C0D9A60;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 80) = 0u;
  v8 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 120) = &unk_24C0D9A18;
  *(_QWORD *)(a1 + 160) = &unk_24C0D99D0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  prime = std::__next_prime(5uLL);
  v10 = prime;
  v11 = *(int8x8_t *)(a1 + 88);
  if (prime > *(_QWORD *)&v11)
    goto LABEL_14;
  if (prime >= *(_QWORD *)&v11)
    goto LABEL_15;
  v12 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
  if (*(_QWORD *)&v11 >= 3uLL)
  {
    v13 = (uint8x8_t)vcnt_s8(v11);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] <= 1uLL)
    {
      v14 = 1 << -(char)__clz(v12 - 1);
      if (v12 >= 2)
        v12 = v14;
      if (v10 <= v12)
        v10 = v12;
      if (v10 >= *(_QWORD *)&v11)
        goto LABEL_15;
LABEL_14:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>((uint64_t)v8, v10);
      goto LABEL_15;
    }
  }
  v15 = std::__next_prime(v12);
  if (v10 <= v15)
    v10 = v15;
  if (v10 < *(_QWORD *)&v11)
    goto LABEL_14;
LABEL_15:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v8, a2, (uint64_t)a2);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v8, a3, (uint64_t)a3);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v8, a4, (uint64_t)a4);
  v16 = *(int8x8_t *)(a1 + 88);
  if (v16)
  {
    v17 = (uint8x8_t)vcnt_s8(v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v18 = 236;
      if (*(_QWORD *)&v16 <= 0xECuLL)
        v18 = 0xECu % *(_QWORD *)(a1 + 88);
    }
    else
    {
      v18 = (v16.i32[0] - 1) & 0xECLL;
    }
    v19 = *(uint64_t ***)(*v8 + 8 * v18);
    if (v19)
    {
      v20 = *v19;
      if (v20)
      {
        if (v17.u32[0] < 2uLL)
        {
          v21 = *(_QWORD *)&v16 - 1;
          while (1)
          {
            v23 = v20[1];
            if (v23 == 236)
            {
              if (*((_DWORD *)v20 + 4) == 236)
                return a1;
            }
            else if ((v23 & v21) != v18)
            {
              goto LABEL_35;
            }
            v20 = (uint64_t *)*v20;
            if (!v20)
              goto LABEL_35;
          }
        }
        do
        {
          v22 = v20[1];
          if (v22 == 236)
          {
            if (*((_DWORD *)v20 + 4) == 236)
              return a1;
          }
          else
          {
            if (v22 >= *(_QWORD *)&v16)
              v22 %= *(_QWORD *)&v16;
            if (v22 != v18)
              break;
          }
          v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
    }
  }
LABEL_35:
  v24 = operator new();
  *(_OWORD *)v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_QWORD *)v24 = &unk_24C0D9A88;
  *(_QWORD *)(v24 + 32) = 0;
  v27 = 236;
  v28 = v24;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v8, &v27, (uint64_t)&v27);
  v25 = v28;
  v28 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  _QWORD *v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t prime;
  size_t v24;
  uint8x8_t v25;
  uint64_t v26;
  size_t v27;
  unint64_t v28;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            v12 = v10[1];
            if (v12 == v6)
            {
              if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
                return v10;
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_23;
            }
            v10 = (uint64_t *)*v10;
            if (!v10)
              goto LABEL_23;
          }
        }
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v11 >= v7)
              v11 %= v7;
            if (v11 != v3)
              break;
          }
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_23:
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v6;
  *((_DWORD *)v14 + 4) = *(_DWORD *)a3;
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v14[3] = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    v20 = 1;
    if (v7 >= 3)
      v20 = (v7 & (v7 - 1)) != 0;
    v21 = v20 | (2 * v7);
    v22 = vcvtps_u32_f32(v16 / v17);
    if (v21 <= v22)
      prime = v22;
    else
      prime = v21;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
      v7 = *(_QWORD *)(a1 + 8);
    }
    if (prime > v7)
      goto LABEL_37;
    if (prime < v7)
    {
      v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 >= 3)
      {
        v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v25.i16[0] = vaddlv_u8(v25);
        if (v25.u32[0] <= 1uLL)
        {
          v26 = 1 << -(char)__clz(v24 - 1);
          if (v24 >= 2)
            v24 = v26;
          if (prime <= v24)
            prime = v24;
          if (prime >= v7)
            goto LABEL_50;
LABEL_37:
          std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>(a1, prime);
          goto LABEL_50;
        }
      }
      v27 = std::__next_prime(v24);
      if (prime <= v27)
        prime = v27;
      if (prime < v7)
        goto LABEL_37;
    }
LABEL_50:
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
      {
        v3 = v6 % v7;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v6 % v7));
        if (v19)
          goto LABEL_26;
      }
      else
      {
        v3 = v6;
        v18 = *(_QWORD *)a1;
        v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v6);
        if (v19)
          goto LABEL_26;
      }
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
      if (v19)
        goto LABEL_26;
    }
    goto LABEL_52;
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
LABEL_26:
    *v14 = *v19;
LABEL_63:
    *v19 = v14;
    goto LABEL_64;
  }
LABEL_52:
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v14)
  {
    v28 = *(_QWORD *)(*v14 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v28 >= v7)
        v28 %= v7;
    }
    else
    {
      v28 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_63;
  }
LABEL_64:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

uint64_t webm::MasterValueParser<webm::ChapterDisplay>::~MasterValueParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  *(_QWORD *)a1 = &off_24C0D75A8;
  *(_QWORD *)(a1 + 96) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 192);
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = *(void **)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 72);
    v6 = *(void **)(a1 + 64);
    if (v5 != v4)
    {
      do
      {
        if (*(char *)(v5 - 9) < 0)
          operator delete(*(void **)(v5 - 32));
        v5 -= 32;
      }
      while (v5 != v4);
      v6 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v4;
    operator delete(v6);
  }
  v9 = *(_QWORD *)(a1 + 40);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(void **)(a1 + 40);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 9) < 0)
          operator delete(*(void **)(v10 - 32));
        v10 -= 32;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 40);
    }
    *(_QWORD *)(a1 + 48) = v9;
    operator delete(v11);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t webm::Element<webm::ChapterDisplay>::~Element(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = *(void **)(a1 + 56);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(void **)(a1 + 32);
    if (v6 != v5)
    {
      do
      {
        if (*(char *)(v6 - 9) < 0)
          operator delete(*(void **)(v6 - 32));
        v6 -= 32;
      }
      while (v6 != v5);
      v7 = *(void **)(a1 + 32);
    }
    *(_QWORD *)(a1 + 40) = v5;
    operator delete(v7);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void webm::MasterValueParser<webm::ChapterDisplay>::PreInit(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void **v9;
  void **v10;
  void **v11;
  void *v12;
  _QWORD v13[2];
  char v14;

  v14 = 3;
  if (v13 <= (_QWORD *)"eng" && (char *)v13 + 3 > "eng")
  {
    __break(1u);
  }
  else
  {
    LODWORD(v13[0]) = 6778469;
    v2 = v13[0];
    v3 = (char *)operator new(0x20uLL);
    v4 = v3 + 32;
    *(_QWORD *)v3 = v2;
    *(_WORD *)(v3 + 23) = 3;
    v5 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v5);
    *v5 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v6 = *(_QWORD *)(a1 + 40);
    if (v6)
    {
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(void **)(a1 + 40);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 9) < 0)
            operator delete(*(void **)(v7 - 32));
          v7 -= 32;
        }
        while (v7 != v6);
        v8 = *(void **)(a1 + 40);
      }
      *(_QWORD *)(a1 + 48) = v6;
      operator delete(v8);
    }
    v9 = (void **)(a1 + 64);
    v10 = *(void ***)(a1 + 64);
    *(_QWORD *)(a1 + 40) = v3;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = v4;
    if (v10)
    {
      v11 = *(void ***)(a1 + 72);
      v12 = v10;
      if (v11 != v10)
      {
        do
        {
          if (*((char *)v11 - 9) < 0)
            operator delete(*(v11 - 4));
          v11 -= 4;
        }
        while (v11 != v10);
        v12 = *v9;
      }
      *(_QWORD *)(a1 + 72) = v10;
      operator delete(v12);
    }
    *v9 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *(_DWORD *)(a1 + 88) = 0;
    *(_WORD *)(a1 + 92) = 0;
  }
}

_QWORD *webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::RecursiveParser<webm::ChapterAtomParser>,webm::MasterValueParser<webm::ChapterAtom>::RecursiveChildFactory<webm::ChapterAtomParser>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::RecursiveParser<webm::ChapterAtomParser>*)#1}>::~ChildParser(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C0D76E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::RecursiveParser<webm::ChapterAtomParser>,webm::MasterValueParser<webm::ChapterAtom>::RecursiveChildFactory<webm::ChapterAtomParser>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::RecursiveParser<webm::ChapterAtomParser>*)#1}>::~ChildParser(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C0D76E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

_OWORD *webm::MasterValueParser<webm::ChapterAtom>::ChildParser<webm::RecursiveParser<webm::ChapterAtomParser>,webm::MasterValueParser<webm::ChapterAtom>::RecursiveChildFactory<webm::ChapterAtomParser>::BuildParser(webm::MasterValueParser<webm::ChapterAtom>*,webm::ChapterAtom*)::{lambda(webm::RecursiveParser<webm::ChapterAtomParser>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;

  *a4 = 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 136) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return (_OWORD *)v5;
  }
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE **)v7;
  result = *(_OWORD **)(v7 + 8);
  if ((_OWORD *)((char *)result - *(_QWORD *)v7) == (_OWORD *)136)
  {
    if (v8 == (_BYTE *)result)
      goto LABEL_14;
    if (!v8[128])
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)((char *)result - 136));
      while (result != (_OWORD *)v8);
      *(_QWORD *)(v7 + 8) = v8;
      v7 = *(_QWORD *)(a1 + 32);
      result = *(_OWORD **)(v7 + 8);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (_OWORD *)(v9 + 8);
  if ((unint64_t)result >= *(_QWORD *)(v7 + 16))
  {
    *(_QWORD *)(v7 + 8) = std::vector<webm::Element<webm::ChapterAtom>>::__emplace_back_slow_path<webm::ChapterAtom,BOOL>((void **)v7, (uint64_t)v10, 1);
    return (_OWORD *)v5;
  }
  if (result)
  {
    *result = *v10;
    v11 = *(_OWORD *)(v9 + 24);
    *((_QWORD *)result + 4) = *(_QWORD *)(v9 + 40);
    result[1] = v11;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *((_BYTE *)result + 40) = *(_BYTE *)(v9 + 48);
    v12 = *(_OWORD *)(v9 + 56);
    *(_OWORD *)((char *)result + 57) = *(_OWORD *)(v9 + 65);
    result[3] = v12;
    *((_QWORD *)result + 11) = 0;
    *((_QWORD *)result + 12) = 0;
    *((_QWORD *)result + 10) = 0;
    result[5] = *(_OWORD *)(v9 + 88);
    *((_QWORD *)result + 12) = *(_QWORD *)(v9 + 104);
    *(_QWORD *)(v9 + 88) = 0;
    *(_QWORD *)(v9 + 96) = 0;
    *(_QWORD *)(v9 + 104) = 0;
    *((_QWORD *)result + 13) = 0;
    *((_QWORD *)result + 14) = 0;
    *((_QWORD *)result + 15) = 0;
    *(_OWORD *)((char *)result + 104) = *(_OWORD *)(v9 + 112);
    *((_QWORD *)result + 15) = *(_QWORD *)(v9 + 128);
    *(_QWORD *)(v9 + 112) = 0;
    *(_QWORD *)(v9 + 120) = 0;
    *(_QWORD *)(v9 + 128) = 0;
    *((_BYTE *)result + 128) = 1;
    *(_QWORD *)(v7 + 8) = (char *)result + 136;
    return (_OWORD *)v5;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t webm::RecursiveParser<webm::ChapterAtomParser>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (!*(_QWORD *)(a1 + 16))
    return 4294966265;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v7 = operator new();
    v8 = *(_QWORD *)(a1 + 16) - 1;
    v17 = xmmword_208F521F0;
    v18 = xmmword_208F521E0;
    v15 = xmmword_208F52210;
    v16 = xmmword_208F52200;
    v14 = xmmword_208F52220;
    v11 = 182;
    v12 = 104;
    v13 = v8;
    v6 = webm::MasterValueParser<webm::ChapterAtom>::MasterValueParser<webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::RepeatedChildFactory<webm::ChapterDisplayParser,webm::ChapterDisplay>,webm::MasterValueParser<webm::ChapterAtom>::RecursiveChildFactory<webm::ChapterAtomParser>>(v7, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15, (uint64_t)&v14, (uint64_t)&v11);
    *(_QWORD *)v6 = &off_24C0D73B0;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v6 = *(_QWORD *)(a1 + 8);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2, a3);
}

uint64_t webm::RecursiveParser<webm::ChapterAtomParser>::InitAfterSeek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v7 = operator new();
    v8 = *(_QWORD *)(a1 + 16) - 1;
    v17 = xmmword_208F521F0;
    v18 = xmmword_208F521E0;
    v15 = xmmword_208F52210;
    v16 = xmmword_208F52200;
    v14 = xmmword_208F52220;
    v11 = 182;
    v12 = 104;
    v13 = v8;
    v6 = webm::MasterValueParser<webm::ChapterAtom>::MasterValueParser<webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::ChapterAtom>::RepeatedChildFactory<webm::ChapterDisplayParser,webm::ChapterDisplay>,webm::MasterValueParser<webm::ChapterAtom>::RecursiveChildFactory<webm::ChapterAtomParser>>(v7, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15, (uint64_t)&v14, (uint64_t)&v11);
    *(_QWORD *)v6 = &off_24C0D73B0;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v6 = *(_QWORD *)(a1 + 8);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2, a3);
}

_QWORD *webm::RecursiveParser<webm::ChapterAtomParser>::~RecursiveParser(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C0D76E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void webm::RecursiveParser<webm::ChapterAtomParser>::~RecursiveParser(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C0D76E0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::RecursiveParser<webm::ChapterAtomParser>::Feed(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

void webm::ChapterAtom::~ChapterAtom(webm::ChapterAtom *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (char *)*((_QWORD *)this + 13);
  if (v2)
  {
    v3 = (char *)*((_QWORD *)this + 14);
    v4 = v2;
    if (v3 != v2)
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(v3 - 136));
      while (v3 != v2);
      v4 = (char *)*((_QWORD *)this + 13);
    }
    *((_QWORD *)this + 14) = v2;
    operator delete(v4);
  }
  v5 = *((_QWORD *)this + 10);
  if (v5)
  {
    v6 = *((_QWORD *)this + 11);
    v7 = (void *)*((_QWORD *)this + 10);
    if (v6 != v5)
    {
      do
        v6 = webm::Element<webm::ChapterDisplay>::~Element(v6 - 88);
      while (v6 != v5);
      v7 = (void *)*((_QWORD *)this + 10);
    }
    *((_QWORD *)this + 11) = v5;
    operator delete(v7);
  }
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

char *std::vector<webm::Element<webm::ChapterAtom>>::__emplace_back_slow_path<webm::ChapterAtom,BOOL>(void **a1, uint64_t a2, char a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char v21;
  __int128 v22;
  char *v23;

  v3 = 0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x1E1E1E1E1E1E1E1)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0xE1E1E1E1E1E1E1E2 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xF0F0F0F0F0F0F0F1 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0xF0F0F0F0F0F0F0)
    v6 = 0x1E1E1E1E1E1E1E1;
  else
    v6 = v4;
  if (!v6)
  {
    __break(1u);
LABEL_21:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v6 > 0x1E1E1E1E1E1E1E1)
    goto LABEL_21;
  v9 = 136 * v6;
  v10 = (char *)operator new(136 * v6);
  v11 = &v10[v9];
  v12 = *(_OWORD *)(a2 + 16);
  v13 = &v10[136 * v3];
  *(_OWORD *)v13 = *(_OWORD *)a2;
  *((_OWORD *)v13 + 1) = v12;
  *((_QWORD *)v13 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  v13[40] = *(_BYTE *)(a2 + 40);
  *((_OWORD *)v13 + 3) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v13 + 57) = *(_OWORD *)(a2 + 57);
  *((_OWORD *)v13 + 5) = *(_OWORD *)(a2 + 80);
  *((_QWORD *)v13 + 12) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(v13 + 104) = *(_OWORD *)(a2 + 104);
  *((_QWORD *)v13 + 15) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v13[128] = a3;
  v14 = v13 + 136;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v13;
    a1[1] = v14;
    a1[2] = v11;
    if (!v16)
      return v14;
    goto LABEL_15;
  }
  v17 = 0;
  do
  {
    v18 = &v13[v17];
    v19 = &v16[v17];
    *(_OWORD *)(v18 - 136) = *(_OWORD *)&v16[v17 - 136];
    v20 = *(_OWORD *)&v16[v17 - 120];
    *((_QWORD *)v18 - 13) = *(_QWORD *)&v16[v17 - 104];
    *(_OWORD *)(v18 - 120) = v20;
    *((_QWORD *)v19 - 14) = 0;
    *((_QWORD *)v19 - 13) = 0;
    v21 = v16[v17 - 96];
    *((_QWORD *)v19 - 15) = 0;
    *(v18 - 96) = v21;
    v22 = *(_OWORD *)&v16[v17 - 88];
    *(_OWORD *)(v18 - 79) = *(_OWORD *)&v16[v17 - 79];
    *(_OWORD *)(v18 - 88) = v22;
    *(_OWORD *)(v18 - 56) = *(_OWORD *)&v16[v17 - 56];
    *((_QWORD *)v18 - 5) = *(_QWORD *)&v16[v17 - 40];
    *((_QWORD *)v19 - 7) = 0;
    *((_QWORD *)v19 - 6) = 0;
    *((_QWORD *)v19 - 5) = 0;
    *((_OWORD *)v18 - 2) = *(_OWORD *)&v16[v17 - 32];
    *((_QWORD *)v18 - 2) = *(_QWORD *)&v16[v17 - 16];
    *((_QWORD *)v19 - 4) = 0;
    *((_QWORD *)v19 - 3) = 0;
    *((_QWORD *)v19 - 2) = 0;
    *(v18 - 8) = v16[v17 - 8];
    v17 -= 136;
  }
  while (&v16[v17] != v15);
  v16 = (char *)*a1;
  v23 = (char *)a1[1];
  *a1 = &v13[v17];
  a1[1] = v14;
  a1[2] = v11;
  while (v23 != v16)
    webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(v23 - 136));
  if (v16)
LABEL_15:
    operator delete(v16);
  return v14;
}

uint64_t webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned int *a7)
{
  _QWORD *v14;
  size_t prime;
  unint64_t v16;
  int8x8_t v17;
  size_t v18;
  uint8x8_t v19;
  uint64_t v20;
  size_t v21;
  int8x8_t v22;
  uint8x8_t v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v33;
  uint64_t v34;

  *(_QWORD *)a1 = &off_24C0D70E8;
  *(_QWORD *)(a1 + 8) = &unk_24C0D7088;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = &unk_24C0D99A8;
  *(_QWORD *)(a1 + 32) = &unk_24C0D9A60;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 80) = 0u;
  v14 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 120) = &unk_24C0D9A18;
  *(_QWORD *)(a1 + 160) = &unk_24C0D99D0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  prime = std::__next_prime(7uLL);
  v16 = prime;
  v17 = *(int8x8_t *)(a1 + 88);
  if (prime > *(_QWORD *)&v17)
    goto LABEL_14;
  if (prime >= *(_QWORD *)&v17)
    goto LABEL_15;
  v18 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
  if (*(_QWORD *)&v17 >= 3uLL)
  {
    v19 = (uint8x8_t)vcnt_s8(v17);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] <= 1uLL)
    {
      v20 = 1 << -(char)__clz(v18 - 1);
      if (v18 >= 2)
        v18 = v20;
      if (v16 <= v18)
        v16 = v18;
      if (v16 >= *(_QWORD *)&v17)
        goto LABEL_15;
LABEL_14:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>((uint64_t)v14, v16);
      goto LABEL_15;
    }
  }
  v21 = std::__next_prime(v18);
  if (v16 <= v21)
    v16 = v21;
  if (v16 < *(_QWORD *)&v17)
    goto LABEL_14;
LABEL_15:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v14, a2, (uint64_t)a2);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v14, a3, (uint64_t)a3);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v14, a4, (uint64_t)a4);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v14, a5, (uint64_t)a5);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v14, a6, (uint64_t)a6);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v14, a7, (uint64_t)a7);
  v22 = *(int8x8_t *)(a1 + 88);
  if (v22)
  {
    v23 = (uint8x8_t)vcnt_s8(v22);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      v24 = 236;
      if (*(_QWORD *)&v22 <= 0xECuLL)
        v24 = 0xECu % *(_QWORD *)(a1 + 88);
    }
    else
    {
      v24 = (v22.i32[0] - 1) & 0xECLL;
    }
    v25 = *(uint64_t ***)(*v14 + 8 * v24);
    if (v25)
    {
      v26 = *v25;
      if (v26)
      {
        if (v23.u32[0] < 2uLL)
        {
          v27 = *(_QWORD *)&v22 - 1;
          while (1)
          {
            v29 = v26[1];
            if (v29 == 236)
            {
              if (*((_DWORD *)v26 + 4) == 236)
                return a1;
            }
            else if ((v29 & v27) != v24)
            {
              goto LABEL_35;
            }
            v26 = (uint64_t *)*v26;
            if (!v26)
              goto LABEL_35;
          }
        }
        do
        {
          v28 = v26[1];
          if (v28 == 236)
          {
            if (*((_DWORD *)v26 + 4) == 236)
              return a1;
          }
          else
          {
            if (v28 >= *(_QWORD *)&v22)
              v28 %= *(_QWORD *)&v22;
            if (v28 != v24)
              break;
          }
          v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
    }
  }
LABEL_35:
  v30 = operator new();
  *(_OWORD *)v30 = 0u;
  *(_OWORD *)(v30 + 16) = 0u;
  *(_QWORD *)v30 = &unk_24C0D9A88;
  *(_QWORD *)(v30 + 32) = 0;
  v33 = 236;
  v34 = v30;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v14, &v33, (uint64_t)&v33);
  v31 = v34;
  v34 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  return a1;
}

uint64_t webm::ChapterAtom::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  void **v8;
  void *v9;
  __int128 v10;
  uint64_t v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a1 + 16;
  v6 = (__int128 *)(a2 + 2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)v5);
  v7 = *v6;
  *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
  *(_OWORD *)v5 = v7;
  *((_BYTE *)a2 + 39) = 0;
  *((_BYTE *)a2 + 16) = 0;
  v8 = (void **)(a1 + 80);
  v9 = *(void **)(a1 + 80);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v10 = *(_OWORD *)((char *)a2 + 57);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 57) = v10;
  if (v9)
  {
    v11 = *(_QWORD *)(a1 + 88);
    v12 = v9;
    if ((void *)v11 != v9)
    {
      do
        v11 = webm::Element<webm::ChapterDisplay>::~Element(v11 - 88);
      while ((void *)v11 != v9);
      v12 = *v8;
    }
    *(_QWORD *)(a1 + 88) = v9;
    operator delete(v12);
    *v8 = 0;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
  }
  *(_OWORD *)(a1 + 80) = *((_OWORD *)a2 + 5);
  *(_QWORD *)(a1 + 96) = a2[12];
  a2[10] = 0;
  a2[11] = 0;
  a2[12] = 0;
  v13 = (void **)(a1 + 104);
  v14 = *(_QWORD *)(a1 + 104);
  if (v14)
  {
    v15 = *(_QWORD *)(a1 + 112);
    v16 = *(void **)(a1 + 104);
    if (v15 != v14)
    {
      do
        webm::ChapterAtom::~ChapterAtom((webm::ChapterAtom *)(v15 - 136));
      while (v15 != v14);
      v16 = *v13;
    }
    *(_QWORD *)(a1 + 112) = v14;
    operator delete(v16);
    *v13 = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(_QWORD *)(a1 + 120) = a2[15];
  a2[13] = 0;
  a2[14] = 0;
  a2[15] = 0;
  return a1;
}

void webm::ClusterParser::~ClusterParser(webm::ClusterParser *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0D7788;
  *((_QWORD *)this + 12) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 24);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
    operator delete(v3);
  if (*((_QWORD *)this + 8))
  {
    std::vector<webm::Element<webm::BlockGroup>>::__clear[abi:sn180100]((uint64_t *)this + 8);
    operator delete(*((void **)this + 8));
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0D7788;
  *((_QWORD *)this + 12) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 24);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v3)
    operator delete(v3);
  if (*((_QWORD *)this + 8))
  {
    std::vector<webm::Element<webm::BlockGroup>>::__clear[abi:sn180100]((uint64_t *)this + 8);
    operator delete(*((void **)this + 8));
  }
  v4 = (void *)*((_QWORD *)this + 5);
  if (v4)
  {
    *((_QWORD *)this + 6) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Cluster>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 92))
  {
    if (*(_BYTE *)(a1 + 93))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 88) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 96, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 96, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 92) = 1;
    if (*(_BYTE *)(a1 + 93))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 88) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 88);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 93) = 1;
    if (*(_DWORD *)(a1 + 88) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::Cluster>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  int v10;
  __int128 v11;
  uint64_t v12;
  int v13;

  v7 = (_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 40);
  *(v7 - 4) = 0;
  *(v7 - 3) = 0;
  *((_BYTE *)v7 - 8) = 0;
  *(v7 - 2) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    operator delete(v6);
  }
  v9 = (void **)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  if (v8)
  {
    std::vector<webm::Element<webm::BlockGroup>>::__clear[abi:sn180100]((uint64_t *)(a1 + 64));
    operator delete(*v9);
  }
  *v9 = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v10 = *(_DWORD *)(a2 + 4);
  v11 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 136) = -1;
  *(_DWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = v10;
  *(_OWORD *)(a1 + 296) = v11;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  v12 = *(_QWORD *)(a2 + 8);
  if (v12 == -1)
  {
    *(_QWORD *)(a1 + 312) = a3;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 312) = v12;
  if (v12)
  {
LABEL_9:
    v13 = 0;
    goto LABEL_10;
  }
  v13 = 8;
LABEL_10:
  *(_DWORD *)(a1 + 284) = v13;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Cluster>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;

  v7 = (_QWORD *)(a1 + 40);
  v6 = *(void **)(a1 + 40);
  *(v7 - 4) = 0;
  *(v7 - 3) = 0;
  *((_BYTE *)v7 - 8) = 0;
  *(v7 - 2) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 48) = v6;
    operator delete(v6);
  }
  v9 = (void **)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 64);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  if (v8)
  {
    std::vector<webm::Element<webm::BlockGroup>>::__clear[abi:sn180100]((uint64_t *)(a1 + 64));
    operator delete(*v9);
  }
  *v9 = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 85) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 93) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 96, a2, a3);
}

BOOL webm::MasterValueParser<webm::Cluster>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 328))
    return 0;
  v2 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 328) != 0;
}

BOOL webm::MasterValueParser<webm::Cluster>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 88) == 1;
}

uint64_t webm::ClusterParser::OnParseStarted(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _DWORD v5[2];
  __int128 v6;

  v3 = *(_DWORD *)(a1 + 288);
  v5[0] = 524531317;
  v5[1] = v3;
  v6 = *(_OWORD *)(a1 + 296);
  return (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)a2 + 72))(a2, v5, a1 + 8, a3);
}

uint64_t webm::ClusterParser::OnParseCompleted(webm::ClusterParser *this, webm::Callback *a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *((_DWORD *)this + 72);
  v4[0] = 524531317;
  v4[1] = v2;
  v5 = *(_OWORD *)((char *)this + 296);
  return (*(uint64_t (**)(webm::Callback *, _DWORD *, char *))(*(_QWORD *)a2 + 136))(a2, v4, (char *)this + 8);
}

_QWORD *webm::MasterValueParser<webm::Cluster>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D7788;
  a1[12] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[24];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[22];
  a1[22] = 0;
  if (v3)
    operator delete(v3);
  if (a1[8])
  {
    std::vector<webm::Element<webm::BlockGroup>>::__clear[abi:sn180100](a1 + 8);
    operator delete((void *)a1[8]);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::Cluster>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7788;
  a1[12] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[24];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[22];
  a1[22] = 0;
  if (v3)
    operator delete(v3);
  if (a1[8])
  {
    std::vector<webm::Element<webm::BlockGroup>>::__clear[abi:sn180100](a1 + 8);
    operator delete((void *)a1[8]);
  }
  v4 = (void *)a1[5];
  if (v4)
  {
    a1[6] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Cluster>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Cluster>::OnParseCompleted()
{
  return 0;
}

void webm::MasterValueParser<webm::Cluster>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Cluster>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Cluster>*,webm::Cluster*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Cluster>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Cluster>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Cluster>*,webm::Cluster*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 88) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

_QWORD *webm::MasterValueParser<webm::Cluster>::ChildParser<webm::BasicBlockParser<webm::SimpleBlock>,webm::MasterValueParser<webm::Cluster>::RepeatedChildFactory<webm::BasicBlockParser<webm::SimpleBlock>,webm::SimpleBlock,webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::BuildParser(webm::MasterValueParser<webm::Cluster>*,webm::Cluster*)::{lambda(webm::BasicBlockParser<webm::SimpleBlock>*)#1},webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::~ChildParser(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0D6F00;
  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  return a1;
}

void webm::MasterValueParser<webm::Cluster>::ChildParser<webm::BasicBlockParser<webm::SimpleBlock>,webm::MasterValueParser<webm::Cluster>::RepeatedChildFactory<webm::BasicBlockParser<webm::SimpleBlock>,webm::SimpleBlock,webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::BuildParser(webm::MasterValueParser<webm::Cluster>*,webm::Cluster*)::{lambda(webm::BasicBlockParser<webm::SimpleBlock>*)#1},webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::~ChildParser(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0D6F00;
  v2 = (void *)a1[21];
  if (v2)
  {
    a1[22] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Cluster>::ChildParser<webm::BasicBlockParser<webm::SimpleBlock>,webm::MasterValueParser<webm::Cluster>::RepeatedChildFactory<webm::BasicBlockParser<webm::SimpleBlock>,webm::SimpleBlock,webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::BuildParser(webm::MasterValueParser<webm::Cluster>*,webm::Cluster*)::{lambda(webm::BasicBlockParser<webm::SimpleBlock>*)#1},webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::Feed(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  _QWORD *v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  __int128 v27;
  char *v28;

  *a4 = 0;
  v8 = (_BYTE *)a1[26];
  if (v8[93])
    goto LABEL_2;
  result = (*(uint64_t (**)(_BYTE *, uint64_t, _BYTE *))(*(_QWORD *)v8 + 56))(v8, a2, v8 + 88);
  if (!(_DWORD)result)
  {
    v10 = a1[26];
    *(_BYTE *)(v10 + 93) = 1;
    if (*(_DWORD *)(v10 + 88) == 1)
      return 0x80000000;
LABEL_2:
    result = webm::BasicBlockParser<webm::SimpleBlock>::Feed((uint64_t)a1, a2, a3, a4);
    if ((_DWORD)result)
      return result;
    if (*(_DWORD *)(a1[26] + 88) == 1 || ((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) != 0)
      return 0;
    v11 = a1[27];
    v12 = *(_BYTE **)v11;
    v13 = *(_BYTE **)(v11 + 8);
    if (&v13[-*(_QWORD *)v11] == (_BYTE *)32)
    {
      if (v12 == v13)
        goto LABEL_31;
      if (!v12[24])
      {
        *(_QWORD *)(v11 + 8) = v12;
        v13 = v12;
      }
    }
    v14 = a1 + 2;
    v15 = *(_QWORD *)(v11 + 16);
    if ((unint64_t)v13 >= v15)
    {
      v18 = (v13 - v12) >> 5;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 59)
        goto LABEL_32;
      v20 = v15 - (_QWORD)v12;
      if (v20 >> 4 > v19)
        v19 = v20 >> 4;
      v21 = (unint64_t)v20 >= 0x7FFFFFFFFFFFFFE0;
      v22 = 0x7FFFFFFFFFFFFFFLL;
      if (!v21)
        v22 = v19;
      if (v22)
      {
        if (v22 >> 59)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v23 = 32 * v22;
        v24 = (char *)operator new(32 * v22);
        v25 = &v24[v23];
        v26 = &v24[32 * v18];
        *(_OWORD *)v26 = *(_OWORD *)v14;
        *((_QWORD *)v26 + 2) = v14[2];
        v26[24] = 1;
        v17 = v26 + 32;
        if (v13 == v12)
        {
          v28 = &v24[32 * v18];
        }
        else
        {
          do
          {
            v27 = *((_OWORD *)v13 - 2);
            v28 = v26 - 32;
            *(_OWORD *)(v26 - 23) = *(_OWORD *)(v13 - 23);
            *((_OWORD *)v26 - 2) = v27;
            v13 -= 32;
            v26 -= 32;
          }
          while (v13 != v12);
        }
        *(_QWORD *)v11 = v28;
        *(_QWORD *)(v11 + 8) = v17;
        *(_QWORD *)(v11 + 16) = v25;
        if (v12)
          operator delete(v12);
        goto LABEL_30;
      }
    }
    else if (v13)
    {
      v16 = *(_OWORD *)v14;
      *((_QWORD *)v13 + 2) = a1[4];
      *(_OWORD *)v13 = v16;
      v13[24] = 1;
      v17 = v13 + 32;
LABEL_30:
      result = 0;
      *(_QWORD *)(v11 + 8) = v17;
      return result;
    }
LABEL_31:
    __break(1u);
LABEL_32:
    abort();
  }
  return result;
}

void webm::MasterValueParser<webm::Cluster>::ChildParser<webm::BlockGroupParser,webm::MasterValueParser<webm::Cluster>::RepeatedChildFactory<webm::BlockGroupParser,webm::BlockGroup,webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::BuildParser(webm::MasterValueParser<webm::Cluster>*,webm::Cluster*)::{lambda(webm::BlockGroupParser*)#1},webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::~ChildParser(_QWORD *a1)
{
  webm::MasterValueParser<webm::BlockGroup>::~MasterValueParser(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Cluster>::ChildParser<webm::BlockGroupParser,webm::MasterValueParser<webm::Cluster>::RepeatedChildFactory<webm::BlockGroupParser,webm::BlockGroup,webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::BuildParser(webm::MasterValueParser<webm::Cluster>*,webm::Cluster*)::{lambda(webm::BlockGroupParser*)#1},webm::MasterValueParser<webm::Cluster>::TagUseAsStart>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  _BYTE *v8;
  uint64_t result;
  uint64_t v10;
  char **v11;
  char *v12;
  char *v13;
  _OWORD *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char v36;
  char *v37;
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  int v44;

  *a4 = 0;
  v8 = *(_BYTE **)(a1 + 424);
  if (!v8[93])
  {
    result = (*(uint64_t (**)(_BYTE *, void **, _BYTE *))(*(_QWORD *)v8 + 56))(v8, a2, v8 + 88);
    if ((_DWORD)result)
      return result;
    v10 = *(_QWORD *)(a1 + 424);
    *(_BYTE *)(v10 + 93) = 1;
    if (*(_DWORD *)(v10 + 88) == 1)
      return 0x80000000;
  }
  *a4 = 0;
  if (*(_BYTE *)(a1 + 181))
  {
    result = webm::MasterValueParser<webm::BlockGroup>::Feed(a1, a2, a3, a4);
    if (!(_DWORD)result)
      goto LABEL_4;
  }
  else
  {
    v44 = 0;
    result = (*(uint64_t (**)(uint64_t, void **, int *))(*(_QWORD *)a1 + 56))(a1, a2, &v44);
    if (!(_DWORD)result)
    {
      *(_DWORD *)(a1 + 176) = v44;
      *(_BYTE *)(a1 + 181) = 1;
      result = webm::MasterValueParser<webm::BlockGroup>::Feed(a1, a2, a3, a4);
      if (!(_DWORD)result)
      {
LABEL_4:
        if (*(_DWORD *)(*(_QWORD *)(a1 + 424) + 88) == 1
          || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
        {
          return 0;
        }
        v11 = *(char ***)(a1 + 432);
        v13 = *v11;
        v12 = v11[1];
        if (v12 - *v11 == 176)
        {
          if (v13 == v12)
            goto LABEL_49;
          if (!v13[168])
          {
            std::vector<webm::Element<webm::BlockGroup>>::__clear[abi:sn180100](*(uint64_t **)(a1 + 432));
            v11 = *(char ***)(a1 + 432);
            v12 = v11[1];
          }
        }
        v14 = (_OWORD *)(a1 + 8);
        v15 = v11[2];
        if (v12 >= v15)
        {
          v19 = 0x2E8BA2E8BA2E8BA3 * ((v12 - *v11) >> 4);
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) > 0x1745D1745D1745DLL)
            goto LABEL_50;
          v21 = 0x2E8BA2E8BA2E8BA3 * ((v15 - *v11) >> 4);
          if (2 * v21 > v20)
            v20 = 2 * v21;
          if (v21 >= 0xBA2E8BA2E8BA2ELL)
            v20 = 0x1745D1745D1745DLL;
          if (v20)
          {
            if (v20 > 0x1745D1745D1745DLL)
              std::__throw_bad_array_new_length[abi:sn180100]();
            v22 = 176 * v20;
            v23 = (char *)operator new(176 * v20);
            v24 = *(_OWORD *)(a1 + 24);
            v25 = &v23[176 * v19];
            *(_OWORD *)v25 = *v14;
            *((_OWORD *)v25 + 1) = v24;
            *(_OWORD *)(v25 + 25) = *(_OWORD *)(a1 + 33);
            *((_OWORD *)v25 + 3) = *(_OWORD *)(a1 + 56);
            v26 = *(_OWORD *)(a1 + 104);
            *((_OWORD *)v25 + 5) = *(_OWORD *)(a1 + 88);
            *((_OWORD *)v25 + 6) = v26;
            v27 = *(_OWORD *)(a1 + 144);
            *(_OWORD *)(v25 + 120) = *(_OWORD *)(a1 + 128);
            v28 = &v23[v22];
            *((_QWORD *)v25 + 8) = *(_QWORD *)(a1 + 72);
            *(_QWORD *)(a1 + 56) = 0;
            *(_QWORD *)(a1 + 64) = 0;
            *(_QWORD *)(a1 + 72) = 0;
            v25[72] = *(_BYTE *)(a1 + 80);
            *((_QWORD *)v25 + 14) = *(_QWORD *)(a1 + 120);
            *(_QWORD *)(a1 + 104) = 0;
            *(_QWORD *)(a1 + 112) = 0;
            *(_QWORD *)(a1 + 120) = 0;
            *(_OWORD *)(v25 + 136) = v27;
            *((_QWORD *)v25 + 19) = *(_QWORD *)(a1 + 160);
            *(_QWORD *)(a1 + 144) = 0;
            *(_QWORD *)(a1 + 152) = 0;
            *(_QWORD *)(a1 + 160) = 0;
            v25[160] = *(_BYTE *)(a1 + 168);
            v25[168] = 1;
            v18 = v25 + 176;
            v29 = *v11;
            v30 = v11[1];
            if (v30 == *v11)
            {
              *v11 = v25;
              v11[1] = v18;
              v11[2] = v28;
            }
            else
            {
              v31 = 0;
              do
              {
                v32 = &v25[v31];
                v33 = &v30[v31];
                v34 = *(_OWORD *)&v30[v31 - 176];
                v35 = *(_OWORD *)&v30[v31 - 160];
                *(_OWORD *)(v32 - 151) = *(_OWORD *)&v30[v31 - 151];
                *((_OWORD *)v32 - 11) = v34;
                *((_OWORD *)v32 - 10) = v35;
                *((_OWORD *)v32 - 8) = *(_OWORD *)&v30[v31 - 128];
                *((_QWORD *)v32 - 14) = *(_QWORD *)&v30[v31 - 112];
                *((_QWORD *)v33 - 16) = 0;
                *((_QWORD *)v33 - 15) = 0;
                *((_QWORD *)v33 - 14) = 0;
                *(v32 - 104) = v30[v31 - 104];
                *((_OWORD *)v32 - 6) = *(_OWORD *)&v30[v31 - 96];
                *((_OWORD *)v32 - 5) = *(_OWORD *)&v30[v31 - 80];
                *((_QWORD *)v32 - 8) = *(_QWORD *)&v30[v31 - 64];
                *((_QWORD *)v33 - 10) = 0;
                *((_QWORD *)v33 - 9) = 0;
                *((_QWORD *)v33 - 8) = 0;
                *(_OWORD *)(v32 - 56) = *(_OWORD *)&v30[v31 - 56];
                *(_OWORD *)(v32 - 40) = *(_OWORD *)&v30[v31 - 40];
                *((_QWORD *)v32 - 3) = *(_QWORD *)&v30[v31 - 24];
                *((_QWORD *)v33 - 5) = 0;
                *((_QWORD *)v33 - 4) = 0;
                v36 = v30[v31 - 16];
                *((_QWORD *)v33 - 3) = 0;
                *(v32 - 16) = v36;
                *(v32 - 8) = v30[v31 - 8];
                v31 -= 176;
              }
              while (&v30[v31] != v29);
              v30 = *v11;
              v37 = v11[1];
              *v11 = &v25[v31];
              v11[1] = v18;
              v11[2] = v28;
              while (v37 != v30)
              {
                v39 = (void *)*((_QWORD *)v37 - 5);
                if (v39)
                {
                  *((_QWORD *)v37 - 4) = v39;
                  operator delete(v39);
                }
                v40 = (void *)*((_QWORD *)v37 - 10);
                if (v40)
                {
                  *((_QWORD *)v37 - 9) = v40;
                  operator delete(v40);
                }
                v41 = *((_QWORD *)v37 - 16);
                if (v41)
                {
                  v42 = *((_QWORD *)v37 - 15);
                  v38 = (void *)*((_QWORD *)v37 - 16);
                  if (v42 != v41)
                  {
                    do
                    {
                      v43 = *(void **)(v42 - 40);
                      if (v43)
                      {
                        *(_QWORD *)(v42 - 32) = v43;
                        operator delete(v43);
                      }
                      v42 -= 56;
                    }
                    while (v42 != v41);
                    v38 = (void *)*((_QWORD *)v37 - 16);
                  }
                  *((_QWORD *)v37 - 15) = v41;
                  operator delete(v38);
                }
                v37 -= 176;
              }
            }
            if (v30)
              operator delete(v30);
            goto LABEL_48;
          }
        }
        else if (v12)
        {
          v16 = *v14;
          v17 = *(_OWORD *)(a1 + 24);
          *(_OWORD *)(v12 + 25) = *(_OWORD *)(a1 + 33);
          *(_OWORD *)v12 = v16;
          *((_OWORD *)v12 + 1) = v17;
          *((_QWORD *)v12 + 7) = 0;
          *((_QWORD *)v12 + 8) = 0;
          *((_QWORD *)v12 + 6) = 0;
          *((_OWORD *)v12 + 3) = *(_OWORD *)(a1 + 56);
          *((_QWORD *)v12 + 8) = *(_QWORD *)(a1 + 72);
          *(_QWORD *)(a1 + 56) = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_QWORD *)(a1 + 72) = 0;
          v12[72] = *(_BYTE *)(a1 + 80);
          *((_OWORD *)v12 + 5) = *(_OWORD *)(a1 + 88);
          *((_QWORD *)v12 + 13) = 0;
          *((_QWORD *)v12 + 14) = 0;
          *((_QWORD *)v12 + 12) = 0;
          *((_OWORD *)v12 + 6) = *(_OWORD *)(a1 + 104);
          *((_QWORD *)v12 + 14) = *(_QWORD *)(a1 + 120);
          *(_QWORD *)(a1 + 112) = 0;
          *(_QWORD *)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          *(_OWORD *)(v12 + 120) = *(_OWORD *)(a1 + 128);
          *((_QWORD *)v12 + 18) = 0;
          *((_QWORD *)v12 + 19) = 0;
          *((_QWORD *)v12 + 17) = 0;
          *(_OWORD *)(v12 + 136) = *(_OWORD *)(a1 + 144);
          *((_QWORD *)v12 + 19) = *(_QWORD *)(a1 + 160);
          *(_QWORD *)(a1 + 152) = 0;
          *(_QWORD *)(a1 + 160) = 0;
          *(_QWORD *)(a1 + 144) = 0;
          v12[160] = *(_BYTE *)(a1 + 168);
          v12[168] = 1;
          v18 = v12 + 176;
LABEL_48:
          result = 0;
          v11[1] = v18;
          return result;
        }
LABEL_49:
        __break(1u);
LABEL_50:
        abort();
      }
    }
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  __int128 v7;
  uint64_t v8;

  webm::MasterValueParser<webm::BlockGroup>::PreInit(a1);
  v6 = *(_DWORD *)(a2 + 4);
  v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 200) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 224) = -1;
  *(_DWORD *)(a1 + 236) = 0;
  *(_QWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 376) = v6;
  *(_OWORD *)(a1 + 384) = v7;
  *(_QWORD *)(a1 + 408) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 == -1)
  {
    *(_QWORD *)(a1 + 400) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 400) = v8;
    if (!v8)
    {
      *(_DWORD *)(a1 + 372) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 372) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  webm::MasterValueParser<webm::BlockGroup>::PreInit(a1);
  *(_BYTE *)(a1 + 181) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 184, a2, a3);
}

BOOL webm::MasterValueParser<webm::BlockGroup>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 416))
    return 0;
  v2 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 256);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 416) != 0;
}

BOOL webm::MasterValueParser<webm::BlockGroup>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 176) == 1;
}

uint64_t webm::BlockGroupParser::OnParseStarted(uint64_t a1, uint64_t a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *(_DWORD *)(a1 + 376);
  v4[0] = 160;
  v4[1] = v2;
  v5 = *(_OWORD *)(a1 + 384);
  return (*(uint64_t (**)(uint64_t, _DWORD *))(*(_QWORD *)a2 + 96))(a2, v4);
}

uint64_t webm::BlockGroupParser::OnParseCompleted(webm::BlockGroupParser *this, webm::Callback *a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *((_DWORD *)this + 94);
  v4[0] = 160;
  v4[1] = v2;
  v5 = *((_OWORD *)this + 24);
  return (*(uint64_t (**)(webm::Callback *, _DWORD *, char *))(*(_QWORD *)a2 + 120))(a2, v4, (char *)this + 8);
}

void webm::MasterValueParser<webm::BlockGroup>::~MasterValueParser(_QWORD *a1)
{
  webm::MasterValueParser<webm::BlockGroup>::~MasterValueParser(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 180))
  {
    if (*(_BYTE *)(a1 + 181))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 176) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 184, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 184, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 180) = 1;
    if (*(_BYTE *)(a1 + 181))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 176) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 176);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 181) = 1;
    if (*(_DWORD *)(a1 + 176) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::OnParseCompleted()
{
  return 0;
}

_QWORD *webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::BasicBlockParser<webm::Block>,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::BasicBlockParser<webm::Block>,webm::Block>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::BasicBlockParser<webm::Block>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0D6EB8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  return a1;
}

void webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::BasicBlockParser<webm::Block>,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::BasicBlockParser<webm::Block>,webm::Block>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::BasicBlockParser<webm::Block>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C0D6EB8;
  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::BasicBlockParser<webm::Block>,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::BasicBlockParser<webm::Block>,webm::Block>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::BasicBlockParser<webm::Block>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;

  *a4 = 0;
  v5 = webm::BasicBlockParser<webm::Block>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 200) + 176) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 208);
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 16);
  *(_BYTE *)(v7 + 16) = 1;
  return v5;
}

void webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::VirtualBlockParser,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::VirtualBlockParser,webm::VirtualBlock>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::VirtualBlockParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::VirtualBlockParser,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::VirtualBlockParser,webm::VirtualBlock>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::VirtualBlockParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  _OWORD *v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *a4 = 0;
  v14 = 0;
  v8 = a1 + 40;
  v9 = (_OWORD *)(a1 + 24);
  v10 = *(_DWORD *)(a1 + 96);
  while (v10 != 2)
  {
    if (v10 == 1)
    {
      if (*(_QWORD *)(a1 + 8) < *(_QWORD *)(a1 + 16))
        return 4294966266;
      v10 = 2;
      *(_DWORD *)(a1 + 96) = 2;
    }
    else if (!v10)
    {
      result = webm::BlockHeaderParser::Feed(v8, a2, a3, &v14);
      v12 = v14;
      *a4 += v14;
      *(_QWORD *)(a1 + 16) += v12;
      if ((_DWORD)result)
        return result;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 48);
      *(_WORD *)(a1 + 32) = *(_WORD *)(a1 + 56);
      v10 = 1;
      *(_DWORD *)(a1 + 96) = 1;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 104) + 176) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v13 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)v13 = *v9;
  *(_BYTE *)(v13 + 16) = 1;
  return result;
}

_QWORD *webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::BlockAdditionsParser,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::BlockAdditionsParser,webm::BlockAdditions>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::BlockAdditionsParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  *a1 = &off_24C0D7A28;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v9 = *(void **)(v5 - 40);
        if (v9)
        {
          *(_QWORD *)(v5 - 32) = v9;
          operator delete(v9);
        }
        v5 -= 56;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::BlockAdditionsParser,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::BlockAdditionsParser,webm::BlockAdditions>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::BlockAdditionsParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  *a1 = &off_24C0D7A28;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v9 = *(void **)(v5 - 40);
        if (v9)
        {
          *(_QWORD *)(v5 - 32) = v9;
          operator delete(v9);
        }
        v5 -= 56;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::BlockAdditionsParser,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::BlockAdditionsParser,webm::BlockAdditions>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::BlockAdditionsParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char **v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::BlockAdditions>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 280) + 176) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(char ***)(a1 + 288);
  v8 = *v7;
  if (*v7)
  {
    v9 = v7[1];
    v10 = *v7;
    if (v9 != v8)
    {
      do
      {
        v11 = (void *)*((_QWORD *)v9 - 5);
        if (v11)
        {
          *((_QWORD *)v9 - 4) = v11;
          operator delete(v11);
        }
        v9 -= 56;
      }
      while (v9 != v8);
      v10 = *v7;
    }
    v7[1] = v8;
    operator delete(v10);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 8);
  v7[2] = *(char **)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *((_BYTE *)v7 + 24) = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::BlockAdditions>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v6 = a1 + 8;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(void **)(a1 + 8);
    if (v8 != v7)
    {
      do
      {
        v10 = *(void **)(v8 - 40);
        if (v10)
        {
          *(_QWORD *)(v8 - 32) = v10;
          operator delete(v10);
        }
        v8 -= 56;
      }
      while (v8 != v7);
      v9 = *(void **)v6;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 22) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v11 = *(_DWORD *)(a2 + 4);
  v12 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 80) = -1;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = v11;
  *(_OWORD *)(a1 + 240) = v12;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 == -1)
  {
    *(_QWORD *)(a1 + 256) = a3;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 256) = v13;
  if (v13)
  {
LABEL_13:
    v14 = 0;
    goto LABEL_14;
  }
  v14 = 8;
LABEL_14:
  *(_DWORD *)(a1 + 228) = v14;
  return 0;
}

uint64_t webm::MasterValueParser<webm::BlockAdditions>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v6 = a1 + 8;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(void **)(a1 + 8);
    if (v8 != v7)
    {
      do
      {
        v10 = *(void **)(v8 - 40);
        if (v10)
        {
          *(_QWORD *)(v8 - 32) = v10;
          operator delete(v10);
        }
        v8 -= 56;
      }
      while (v8 != v7);
      v9 = *(void **)v6;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
  }
  *(_QWORD *)(v6 + 22) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(a1 + 37) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 40, a2, a3);
}

BOOL webm::MasterValueParser<webm::BlockAdditions>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 272))
    return 0;
  v2 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 272) != 0;
}

BOOL webm::MasterValueParser<webm::BlockAdditions>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) == 1;
}

uint64_t webm::MasterValueParser<webm::BlockAdditions>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::BlockAdditions>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::BlockAdditions>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 36))
  {
    if (*(_BYTE *)(a1 + 37))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 32) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 40, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 40, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 36) = 1;
    if (*(_BYTE *)(a1 + 37))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 32) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 32);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 37) = 1;
    if (*(_DWORD *)(a1 + 32) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::BlockAdditions>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  *a1 = &off_24C0D7A28;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v9 = *(void **)(v5 - 40);
        if (v9)
        {
          *(_QWORD *)(v5 - 32) = v9;
          operator delete(v9);
        }
        v5 -= 56;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void webm::MasterValueParser<webm::BlockAdditions>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  *a1 = &off_24C0D7A28;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v9 = *(void **)(v5 - 40);
        if (v9)
        {
          *(_QWORD *)(v5 - 32) = v9;
          operator delete(v9);
        }
        v5 -= 56;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::MasterValueParser<webm::BlockAdditions>::ChildParser<webm::BlockMoreParser,webm::MasterValueParser<webm::BlockAdditions>::RepeatedChildFactory<webm::BlockMoreParser,webm::BlockMore>::BuildParser(webm::MasterValueParser<webm::BlockAdditions>*,webm::BlockAdditions*)::{lambda(webm::BlockMoreParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D7AE8;
  a1[8] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[20];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[18];
  a1[18] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::BlockAdditions>::ChildParser<webm::BlockMoreParser,webm::MasterValueParser<webm::BlockAdditions>::RepeatedChildFactory<webm::BlockMoreParser,webm::BlockMore>::BuildParser(webm::MasterValueParser<webm::BlockAdditions>*,webm::BlockAdditions*)::{lambda(webm::BlockMoreParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7AE8;
  a1[8] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[20];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[18];
  a1[18] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockAdditions>::ChildParser<webm::BlockMoreParser,webm::MasterValueParser<webm::BlockAdditions>::RepeatedChildFactory<webm::BlockMoreParser,webm::BlockMore>::BuildParser(webm::MasterValueParser<webm::BlockAdditions>*,webm::BlockAdditions*)::{lambda(webm::BlockMoreParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char **v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  char *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  void *v29;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::BlockMore>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 304) + 32) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(char ***)(a1 + 312);
  v9 = *v7;
  v8 = v7[1];
  if (v8 - *v7 != 56)
    goto LABEL_8;
  if (v9 == v8)
    goto LABEL_35;
  if (v9[48])
  {
LABEL_8:
    v10 = (_OWORD *)(a1 + 8);
    v11 = v7[2];
    if (v8 < v11)
      goto LABEL_9;
    goto LABEL_15;
  }
  do
  {
    v13 = (void *)*((_QWORD *)v8 - 5);
    if (v13)
    {
      *((_QWORD *)v8 - 4) = v13;
      operator delete(v13);
    }
    v8 -= 56;
  }
  while (v8 != v9);
  v7[1] = v9;
  v7 = *(char ***)(a1 + 312);
  v8 = v7[1];
  v11 = v7[2];
  v10 = (_OWORD *)(a1 + 8);
  if (v8 >= v11)
  {
LABEL_15:
    v14 = 0x6DB6DB6DB6DB6DB7 * ((v8 - *v7) >> 3);
    if ((unint64_t)(v14 + 1) > 0x492492492492492)
      goto LABEL_36;
    v15 = 0x6DB6DB6DB6DB6DB7 * ((v11 - *v7) >> 3);
    v16 = 2 * v15;
    if (2 * v15 <= v14 + 1)
      v16 = v14 + 1;
    if (v15 >= 0x249249249249249)
      v17 = 0x492492492492492;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 > 0x492492492492492)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v18 = 56 * v17;
      v19 = (char *)operator new(56 * v17);
      v20 = &v19[v18];
      v21 = &v19[56 * v14];
      v22 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v21 = *v10;
      *((_OWORD *)v21 + 1) = v22;
      *((_QWORD *)v21 + 4) = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0;
      v21[40] = *(_BYTE *)(a1 + 48);
      v21[48] = 1;
      v12 = v21 + 56;
      v23 = *v7;
      v24 = v7[1];
      if (v24 == *v7)
      {
        *v7 = v21;
        v7[1] = v12;
        v7[2] = v20;
      }
      else
      {
        v25 = 0;
        do
        {
          v26 = &v21[v25];
          v27 = &v24[v25];
          *(_OWORD *)(v26 - 56) = *(_OWORD *)&v24[v25 - 56];
          *(_OWORD *)(v26 - 40) = *(_OWORD *)&v24[v25 - 40];
          *((_QWORD *)v26 - 3) = *(_QWORD *)&v24[v25 - 24];
          *((_QWORD *)v27 - 4) = 0;
          *((_QWORD *)v27 - 3) = 0;
          *((_QWORD *)v27 - 5) = 0;
          *(v26 - 16) = v24[v25 - 16];
          *(v26 - 8) = v24[v25 - 8];
          v25 -= 56;
        }
        while (&v24[v25] != v23);
        v24 = *v7;
        v28 = v7[1];
        *v7 = &v21[v25];
        v7[1] = v12;
        v7[2] = v20;
        while (v28 != v24)
        {
          v29 = (void *)*((_QWORD *)v28 - 5);
          if (v29)
          {
            *((_QWORD *)v28 - 4) = v29;
            operator delete(v29);
          }
          v28 -= 56;
        }
      }
      if (v24)
        operator delete(v24);
      goto LABEL_34;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    abort();
  }
LABEL_9:
  if (!v8)
    goto LABEL_35;
  *(_OWORD *)v8 = *v10;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *((_OWORD *)v8 + 1) = *(_OWORD *)(a1 + 24);
  *((_QWORD *)v8 + 4) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v8[40] = *(_BYTE *)(a1 + 48);
  v8[48] = 1;
  v12 = v8 + 56;
LABEL_34:
  v7[1] = v12;
  return v5;
}

uint64_t webm::MasterValueParser<webm::BlockMore>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  v7 = a1 + 24;
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(v7 - 16) = 1;
  *(_BYTE *)(v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 60) = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 24) = 0;
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 80) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 104) = -1;
  *(_DWORD *)(a1 + 116) = 0;
  *(_QWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = v8;
  *(_OWORD *)(a1 + 264) = v9;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 == -1)
  {
    *(_QWORD *)(a1 + 280) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 280) = v10;
    if (!v10)
    {
      *(_DWORD *)(a1 + 252) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 252) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::BlockMore>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;

  v7 = a1 + 24;
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(v7 - 16) = 1;
  *(_BYTE *)(v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  *(_DWORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 60) = 256;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *(_BYTE *)(v7 + 24) = 0;
  return webm::MasterParser::InitAfterSeek(a1 + 64, a2, a3);
}

BOOL webm::MasterValueParser<webm::BlockMore>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 296))
    return 0;
  v2 = *(_OWORD *)(a1 + 120);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 136);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 296) != 0;
}

BOOL webm::MasterValueParser<webm::BlockMore>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 56) == 1;
}

uint64_t webm::MasterValueParser<webm::BlockMore>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::BlockMore>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::BlockMore>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 60))
  {
    if (*(_BYTE *)(a1 + 61))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 56) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 64, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 64, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 60) = 1;
    if (*(_BYTE *)(a1 + 61))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 56) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 56);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 61) = 1;
    if (*(_DWORD *)(a1 + 56) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::BlockMore>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D7AE8;
  a1[8] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[20];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[18];
  a1[18] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::BlockMore>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7AE8;
  a1[8] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[20];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[18];
  a1[18] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::BlockMore>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::BlockMore>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::BlockMore>*,webm::BlockMore*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockMore>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::BlockMore>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::BlockMore>*,webm::BlockMore*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

_QWORD *webm::MasterValueParser<webm::BlockMore>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::BlockMore>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::BlockMore>*,webm::BlockMore*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void webm::MasterValueParser<webm::BlockMore>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::BlockMore>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::BlockMore>*,webm::BlockMore*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::MasterValueParser<webm::BlockMore>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::BlockMore>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::BlockMore>*,webm::BlockMore*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::Feed(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = result;
  *a4 = 0;
  v5 = result + 1;
  v6 = result[7];
  if (v6 != result[2] - result[1])
  {
    do
    {
      v14 = 0;
      v9 = v4[1];
      v10 = v4[2];
      if (v9 == v10)
      {
        __break(1u);
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, v10 - (v9 + v6), v9 + v6, &v14);
      v11 = v14;
      *a4 += v14;
      v6 = v4[7] + v11;
      v4[7] = v6;
    }
    while ((_DWORD)result == -1);
    if ((_DWORD)result)
      return result;
  }
  if (*(_DWORD *)(v4[8] + 56) == 1)
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 48))(v4) & 1) != 0)
    return 0;
  v12 = v4[9];
  v13 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v13;
    operator delete(v13);
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
  }
  result = 0;
  *(_OWORD *)v12 = *(_OWORD *)(v4 + 1);
  *(_QWORD *)(v12 + 16) = v4[3];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *(_BYTE *)(v12 + 24) = 1;
  return result;
}

uint64_t webm::ByteParser<std::vector<unsigned char>>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  char **v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t result;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == -1)
    return 4294966270;
  if ((v2 & 0x8000000000000000) != 0)
    return 4294966267;
  v4 = (char **)(a1 + 8);
  if (!v2)
  {
    std::vector<unsigned char>::__assign_with_size[abi:sn180100]<unsigned char *,unsigned char *>(v4, *(char **)(a1 + 32), *(char **)(a1 + 40), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
    v9 = *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
LABEL_9:
    result = 0;
    *(_QWORD *)(a1 + 56) = v9;
    return result;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16) - v5;
  v7 = v2 >= v6;
  if (v2 > v6)
  {
    std::vector<unsigned char>::__append(v4, v2 - v6);
    result = 0;
    *(_QWORD *)(a1 + 56) = 0;
    return result;
  }
  v9 = 0;
  if (v7)
    goto LABEL_9;
  *(_QWORD *)(a1 + 16) = v5 + v2;
  result = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return result;
}

_QWORD *webm::ByteParser<std::vector<unsigned char>>::~ByteParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void webm::ByteParser<std::vector<unsigned char>>::~ByteParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::ByteParser<std::vector<unsigned char>>::Feed(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a4 = 0;
  v4 = result[7];
  if (v4 == result[2] - result[1])
    return 0;
  v7 = result;
  while (1)
  {
    v11 = 0;
    v8 = v7[1];
    v9 = v7[2];
    if (v8 == v9)
      break;
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, v9 - (v8 + v4), v8 + v4, &v11);
    v10 = v11;
    *a4 += v11;
    v4 = v7[7] + v10;
    v7[7] = v4;
    if ((_DWORD)result != -1)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  _QWORD *v6;
  size_t prime;
  unint64_t v8;
  int8x8_t v9;
  size_t v10;
  uint8x8_t v11;
  uint64_t v12;
  size_t v13;
  int8x8_t v14;
  uint8x8_t v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v25;
  uint64_t v26;

  *(_QWORD *)a1 = &off_24C0D70E8;
  *(_QWORD *)(a1 + 8) = &unk_24C0D7088;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = &unk_24C0D99A8;
  *(_QWORD *)(a1 + 32) = &unk_24C0D9A60;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 80) = 0u;
  v6 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 120) = &unk_24C0D9A18;
  *(_QWORD *)(a1 + 160) = &unk_24C0D99D0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  prime = std::__next_prime(3uLL);
  v8 = prime;
  v9 = *(int8x8_t *)(a1 + 88);
  if (prime > *(_QWORD *)&v9)
    goto LABEL_14;
  if (prime >= *(_QWORD *)&v9)
    goto LABEL_15;
  v10 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
  if (*(_QWORD *)&v9 >= 3uLL)
  {
    v11 = (uint8x8_t)vcnt_s8(v9);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] <= 1uLL)
    {
      v12 = 1 << -(char)__clz(v10 - 1);
      if (v10 >= 2)
        v10 = v12;
      if (v8 <= v10)
        v8 = v10;
      if (v8 >= *(_QWORD *)&v9)
        goto LABEL_15;
LABEL_14:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>((uint64_t)v6, v8);
      goto LABEL_15;
    }
  }
  v13 = std::__next_prime(v10);
  if (v8 <= v13)
    v8 = v13;
  if (v8 < *(_QWORD *)&v9)
    goto LABEL_14;
LABEL_15:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v6, a2, (uint64_t)a2);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v6, a3, (uint64_t)a3);
  v14 = *(int8x8_t *)(a1 + 88);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8(v14);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] > 1uLL)
    {
      v16 = 236;
      if (*(_QWORD *)&v14 <= 0xECuLL)
        v16 = 0xECu % *(_QWORD *)(a1 + 88);
    }
    else
    {
      v16 = (v14.i32[0] - 1) & 0xECLL;
    }
    v17 = *(uint64_t ***)(*v6 + 8 * v16);
    if (v17)
    {
      v18 = *v17;
      if (v18)
      {
        if (v15.u32[0] < 2uLL)
        {
          v19 = *(_QWORD *)&v14 - 1;
          while (1)
          {
            v21 = v18[1];
            if (v21 == 236)
            {
              if (*((_DWORD *)v18 + 4) == 236)
                return a1;
            }
            else if ((v21 & v19) != v16)
            {
              goto LABEL_35;
            }
            v18 = (uint64_t *)*v18;
            if (!v18)
              goto LABEL_35;
          }
        }
        do
        {
          v20 = v18[1];
          if (v20 == 236)
          {
            if (*((_DWORD *)v18 + 4) == 236)
              return a1;
          }
          else
          {
            if (v20 >= *(_QWORD *)&v14)
              v20 %= *(_QWORD *)&v14;
            if (v20 != v16)
              break;
          }
          v18 = (uint64_t *)*v18;
        }
        while (v18);
      }
    }
  }
LABEL_35:
  v22 = operator new();
  *(_OWORD *)v22 = 0u;
  *(_OWORD *)(v22 + 16) = 0u;
  *(_QWORD *)v22 = &unk_24C0D9A88;
  *(_QWORD *)(v22 + 32) = 0;
  v25 = 236;
  v26 = v22;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v6, &v25, (uint64_t)&v25);
  v23 = v26;
  v26 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  return a1;
}

void webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 176) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

void webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::IntParser<long long>,webm::MasterValueParser<webm::BlockGroup>::RepeatedChildFactory<webm::IntParser<long long>,long long>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::IntParser<long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::IntParser<long long>,webm::MasterValueParser<webm::BlockGroup>::RepeatedChildFactory<webm::IntParser<long long>,long long>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::IntParser<long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  char *i;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char v32;
  unsigned __int8 v34;
  uint64_t v35;

  v6 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v6 > 8)
  {
    v7 = 4294966270;
    v8 = *(_DWORD *)(a1 + 24);
    v9 = v8 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 24) = v8 - *(_DWORD *)a4;
    if (!v9)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (!v6)
  {
LABEL_8:
    v7 = 0;
    v13 = *(_DWORD *)(a1 + 24);
    v9 = v13 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 24) = v13 - *(_DWORD *)a4;
    if (!v9)
      goto LABEL_15;
    goto LABEL_12;
  }
  v11 = v6 + 1;
  while (1)
  {
    v34 = 0;
    v35 = 0;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v34, &v35);
    if ((_DWORD)v12)
      break;
    ++*a4;
    *(_QWORD *)(a1 + 8) = v34 | (*(_QWORD *)(a1 + 8) << 8);
    if ((int)--v11 <= 1)
      goto LABEL_8;
  }
  v7 = v12;
  v14 = *(_DWORD *)(a1 + 24);
  v9 = v14 == *(_DWORD *)a4;
  *(_DWORD *)(a1 + 24) = v14 - *(_DWORD *)a4;
  if (v9)
  {
LABEL_12:
    v15 = *(_DWORD *)(a1 + 28);
    if (v15 >= 1)
    {
      v16 = -1 << (8 * v15 - 1);
      v17 = *(_QWORD *)(a1 + 8);
      if ((v17 & v16) != 0)
        *(_QWORD *)(a1 + 8) = v17 | v16;
    }
  }
LABEL_15:
  if (!(_DWORD)v7
    && *(_DWORD *)(*(_QWORD *)(a1 + 32) + 176) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v18 = *(_QWORD *)(a1 + 40);
    v19 = *(_BYTE **)v18;
    v20 = *(_BYTE **)(v18 + 8);
    if (&v20[-*(_QWORD *)v18] == (_BYTE *)16)
    {
      if (v19 == v20)
        goto LABEL_38;
      if (!v19[8])
      {
        *(_QWORD *)(v18 + 8) = v19;
        v20 = v19;
      }
    }
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = (v20 - v19) >> 4;
      v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60)
        goto LABEL_39;
      v25 = v21 - (_QWORD)v19;
      if (v25 >> 3 > v24)
        v24 = v25 >> 3;
      v26 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0;
      v27 = 0xFFFFFFFFFFFFFFFLL;
      if (!v26)
        v27 = v24;
      if (v27)
      {
        if (v27 >> 60)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v28 = 16 * v27;
        v29 = (char *)operator new(16 * v27);
        v30 = &v29[16 * v23];
        *(_QWORD *)v30 = *(_QWORD *)(a1 + 8);
        v30[8] = 1;
        for (i = v30 + 16; v20 != v19; v30[8] = v32)
        {
          v31 = *((_QWORD *)v20 - 2);
          v20 -= 16;
          v32 = v20[8];
          *((_QWORD *)v30 - 2) = v31;
          v30 -= 16;
        }
        *(_QWORD *)v18 = v30;
        *(_QWORD *)(v18 + 8) = i;
        *(_QWORD *)(v18 + 16) = &v29[v28];
        if (v19)
          operator delete(v19);
        goto LABEL_36;
      }
    }
    else if (v20)
    {
      *(_QWORD *)v20 = *(_QWORD *)(a1 + 8);
      v20[8] = 1;
      i = v20 + 16;
LABEL_36:
      *(_QWORD *)(v18 + 8) = i;
      return v7;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    abort();
  }
  return v7;
}

uint64_t webm::IntParser<long long>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::IntParser<long long>,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::IntParser<long long>,long long>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::IntParser<long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::IntParser<long long>,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::IntParser<long long>,long long>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::IntParser<long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v6 > 8)
  {
    v7 = 4294966270;
    v8 = *(_DWORD *)(a1 + 24);
    v9 = v8 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 24) = v8 - *(_DWORD *)a4;
    if (!v9)
      goto LABEL_15;
    goto LABEL_12;
  }
  if (!v6)
  {
LABEL_8:
    v7 = 0;
    v13 = *(_DWORD *)(a1 + 24);
    v9 = v13 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 24) = v13 - *(_DWORD *)a4;
    if (!v9)
      goto LABEL_15;
    goto LABEL_12;
  }
  v11 = v6 + 1;
  while (1)
  {
    v20 = 0;
    v21 = 0;
    v12 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v20, &v21);
    if ((_DWORD)v12)
      break;
    ++*a4;
    *(_QWORD *)(a1 + 8) = v20 | (*(_QWORD *)(a1 + 8) << 8);
    if ((int)--v11 <= 1)
      goto LABEL_8;
  }
  v7 = v12;
  v14 = *(_DWORD *)(a1 + 24);
  v9 = v14 == *(_DWORD *)a4;
  *(_DWORD *)(a1 + 24) = v14 - *(_DWORD *)a4;
  if (v9)
  {
LABEL_12:
    v15 = *(_DWORD *)(a1 + 28);
    if (v15 >= 1)
    {
      v16 = -1 << (8 * v15 - 1);
      v17 = *(_QWORD *)(a1 + 8);
      if ((v17 & v16) != 0)
        *(_QWORD *)(a1 + 8) = v17 | v16;
    }
  }
LABEL_15:
  if (!(_DWORD)v7
    && *(_DWORD *)(*(_QWORD *)(a1 + 32) + 176) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v18 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)v18 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(v18 + 8) = 1;
  }
  return v7;
}

_QWORD *webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::SlicesParser,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::SlicesParser,webm::Slices>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::SlicesParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D7D58;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::SlicesParser,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::SlicesParser,webm::Slices>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::SlicesParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7D58;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::BlockGroup>::ChildParser<webm::SlicesParser,webm::MasterValueParser<webm::BlockGroup>::SingleChildFactory<webm::SlicesParser,webm::Slices>::BuildParser(webm::MasterValueParser<webm::BlockGroup>*,webm::BlockGroup*)::{lambda(webm::SlicesParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  void *v8;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::Slices>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 280) + 176) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 288);
  v8 = *(void **)v7;
  if (*(_QWORD *)v7)
  {
    *(_QWORD *)(v7 + 8) = v8;
    operator delete(v8);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
  }
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::Slices>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  v7 = (_QWORD *)(a1 + 8);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)((char *)v7 + 22) = 0;
  v7[2] = 0;
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 80) = -1;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = v8;
  *(_OWORD *)(a1 + 240) = v9;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 == -1)
  {
    *(_QWORD *)(a1 + 256) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 256) = v10;
    if (!v10)
    {
      *(_DWORD *)(a1 + 228) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 228) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Slices>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;

  v7 = (_QWORD *)(a1 + 8);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  *(_QWORD *)((char *)v7 + 22) = 0;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(_BYTE *)(a1 + 37) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 40, a2, a3);
}

BOOL webm::MasterValueParser<webm::Slices>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 272))
    return 0;
  v2 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 272) != 0;
}

BOOL webm::MasterValueParser<webm::Slices>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) == 1;
}

uint64_t webm::MasterValueParser<webm::Slices>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Slices>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::Slices>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 36))
  {
    if (*(_BYTE *)(a1 + 37))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 32) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 40, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 40, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 36) = 1;
    if (*(_BYTE *)(a1 + 37))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 32) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 32);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 37) = 1;
    if (*(_DWORD *)(a1 + 32) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::Slices>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D7D58;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::Slices>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7D58;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::MasterValueParser<webm::Slices>::ChildParser<webm::TimeSliceParser,webm::MasterValueParser<webm::Slices>::RepeatedChildFactory<webm::TimeSliceParser,webm::TimeSlice>::BuildParser(webm::MasterValueParser<webm::Slices>*,webm::Slices*)::{lambda(webm::TimeSliceParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7E18;
  a1[4] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[14];
  a1[14] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::Slices>::ChildParser<webm::TimeSliceParser,webm::MasterValueParser<webm::Slices>::RepeatedChildFactory<webm::TimeSliceParser,webm::TimeSlice>::BuildParser(webm::MasterValueParser<webm::Slices>*,webm::Slices*)::{lambda(webm::TimeSliceParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D7E18;
  a1[4] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[14];
  a1[14] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Slices>::ChildParser<webm::TimeSliceParser,webm::MasterValueParser<webm::Slices>::RepeatedChildFactory<webm::TimeSliceParser,webm::TimeSlice>::BuildParser(webm::MasterValueParser<webm::Slices>*,webm::Slices*)::{lambda(webm::TimeSliceParser*)#1}>::Feed(_QWORD *a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::TimeSlice>::Feed((uint64_t)a1, a2, a3, a4);
  if (!(_DWORD)v5
    && *(_DWORD *)(a1[34] + 32) != 1
    && ((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) == 0)
  {
    v6 = a1[35];
    v7 = *(_BYTE **)v6;
    v8 = *(_BYTE **)(v6 + 8);
    if (&v8[-*(_QWORD *)v6] == (_BYTE *)24)
    {
      if (v7 == v8)
        goto LABEL_27;
      if (!v7[16])
      {
        *(_QWORD *)(v6 + 8) = v7;
        v8 = v7;
      }
    }
    v9 = a1 + 1;
    v10 = *(_QWORD *)(v6 + 16);
    if ((unint64_t)v8 >= v10)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3) + 1;
      if (v12 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_28;
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v7) >> 3);
      if (2 * v13 > v12)
        v12 = 2 * v13;
      if (v13 >= 0x555555555555555)
        v14 = 0xAAAAAAAAAAAAAAALL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v15 = 24 * v14;
        v16 = (char *)operator new(24 * v14);
        v17 = &v16[v15];
        v18 = &v16[8 * ((v8 - v7) >> 3)];
        *(_OWORD *)v18 = *v9;
        v18[16] = 1;
        v11 = v18 + 24;
        if (v8 == v7)
        {
          v20 = &v16[8 * ((v8 - v7) >> 3)];
        }
        else
        {
          do
          {
            v19 = *(_OWORD *)(v8 - 24);
            v20 = v18 - 24;
            *(v18 - 8) = *(v8 - 8);
            *(_OWORD *)(v18 - 24) = v19;
            v8 -= 24;
            v18 -= 24;
          }
          while (v8 != v7);
        }
        *(_QWORD *)v6 = v20;
        *(_QWORD *)(v6 + 8) = v11;
        *(_QWORD *)(v6 + 16) = v17;
        if (v7)
          operator delete(v7);
        goto LABEL_25;
      }
    }
    else if (v8)
    {
      *(_OWORD *)v8 = *v9;
      v8[16] = 1;
      v11 = v8 + 24;
LABEL_25:
      *(_QWORD *)(v6 + 8) = v11;
      return v5;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    abort();
  }
  return v5;
}

uint64_t webm::MasterValueParser<webm::TimeSlice>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 22) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 72) = -1;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = v3;
  *(_OWORD *)(a1 + 232) = v4;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 248) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 248) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 220) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 220) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::TimeSlice>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 21) = 0;
  *(_BYTE *)(a1 + 29) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 32, a2, a3);
}

BOOL webm::MasterValueParser<webm::TimeSlice>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 264))
    return 0;
  v2 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 264) != 0;
}

BOOL webm::MasterValueParser<webm::TimeSlice>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) == 1;
}

uint64_t webm::MasterValueParser<webm::TimeSlice>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::TimeSlice>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::TimeSlice>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 28))
  {
    if (*(_BYTE *)(a1 + 29))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 24) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 32, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 32, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 28) = 1;
    if (*(_BYTE *)(a1 + 29))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 24) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 24);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 29) = 1;
    if (*(_DWORD *)(a1 + 24) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::TimeSlice>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7E18;
  a1[4] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[14];
  a1[14] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::TimeSlice>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D7E18;
  a1[4] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[14];
  a1[14] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::TimeSlice>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::TimeSlice>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::TimeSlice>*,webm::TimeSlice*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TimeSlice>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::TimeSlice>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::TimeSlice>*,webm::TimeSlice*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

_QWORD *webm::MasterValueParser<webm::BlockGroup>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;

  *a1 = &off_24C0D78D8;
  a1[23] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[35];
  if (v2)
  {
    do
    {
      v9 = (_QWORD *)*v2;
      v10 = v2[3];
      v2[3] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      operator delete(v2);
      v2 = v9;
    }
    while (v9);
  }
  v3 = (void *)a1[33];
  a1[33] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[18];
  if (v4)
  {
    a1[19] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  v6 = a1[7];
  if (v6)
  {
    v7 = a1[8];
    v8 = (void *)a1[7];
    if (v7 != v6)
    {
      do
      {
        v11 = *(void **)(v7 - 40);
        if (v11)
        {
          *(_QWORD *)(v7 - 32) = v11;
          operator delete(v11);
        }
        v7 -= 56;
      }
      while (v7 != v6);
      v8 = (void *)a1[7];
    }
    a1[8] = v6;
    operator delete(v8);
  }
  return a1;
}

void std::vector<webm::Element<webm::BlockGroup>>::__clear[abi:sn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 176)
  {
    v5 = *(void **)(i - 40);
    if (v5)
    {
      *(_QWORD *)(i - 32) = v5;
      operator delete(v5);
    }
    v6 = *(void **)(i - 80);
    if (v6)
    {
      *(_QWORD *)(i - 72) = v6;
      operator delete(v6);
    }
    v7 = *(_QWORD *)(i - 128);
    if (v7)
    {
      v8 = *(_QWORD *)(i - 120);
      v4 = *(void **)(i - 128);
      if (v8 != v7)
      {
        do
        {
          v9 = *(void **)(v8 - 40);
          if (v9)
          {
            *(_QWORD *)(v8 - 32) = v9;
            operator delete(v9);
          }
          v8 -= 56;
        }
        while (v8 != v7);
        v4 = *(void **)(i - 128);
      }
      *(_QWORD *)(i - 120) = v7;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void webm::MasterValueParser<webm::BlockGroup>::PreInit(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = a1 + 56;
  v3 = *(char **)(a1 + 56);
  *(_OWORD *)(a1 + 33) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  if (v3)
  {
    v4 = *(char **)(a1 + 64);
    v5 = v3;
    if (v4 != v3)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 5);
        if (v6)
        {
          *((_QWORD *)v4 - 4) = v6;
          operator delete(v6);
        }
        v4 -= 56;
      }
      while (v4 != v3);
      v5 = *(char **)v2;
    }
    *(_QWORD *)(a1 + 64) = v3;
    operator delete(v5);
  }
  v7 = *(void **)(a1 + 104);
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)v2 = 0;
  *(_BYTE *)(v2 + 24) = 0;
  if (v7)
  {
    *(_QWORD *)(a1 + 112) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 144);
  *(_BYTE *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  if (v8)
  {
    *(_QWORD *)(a1 + 152) = v8;
    operator delete(v8);
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 180) = 0;
}

uint64_t webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  _QWORD *v10;
  size_t prime;
  unint64_t v12;
  int8x8_t v13;
  size_t v14;
  uint8x8_t v15;
  uint64_t v16;
  size_t v17;
  int8x8_t v18;
  uint8x8_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v29;
  uint64_t v30;

  *(_QWORD *)a1 = &off_24C0D70E8;
  *(_QWORD *)(a1 + 8) = &unk_24C0D7088;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = &unk_24C0D99A8;
  *(_QWORD *)(a1 + 32) = &unk_24C0D9A60;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 80) = 0u;
  v10 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 120) = &unk_24C0D9A18;
  *(_QWORD *)(a1 + 160) = &unk_24C0D99D0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  prime = std::__next_prime(5uLL);
  v12 = prime;
  v13 = *(int8x8_t *)(a1 + 88);
  if (prime > *(_QWORD *)&v13)
    goto LABEL_14;
  if (prime >= *(_QWORD *)&v13)
    goto LABEL_15;
  v14 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
  if (*(_QWORD *)&v13 >= 3uLL)
  {
    v15 = (uint8x8_t)vcnt_s8(v13);
    v15.i16[0] = vaddlv_u8(v15);
    if (v15.u32[0] <= 1uLL)
    {
      v16 = 1 << -(char)__clz(v14 - 1);
      if (v14 >= 2)
        v14 = v16;
      if (v12 <= v14)
        v12 = v14;
      if (v12 >= *(_QWORD *)&v13)
        goto LABEL_15;
LABEL_14:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>((uint64_t)v10, v12);
      goto LABEL_15;
    }
  }
  v17 = std::__next_prime(v14);
  if (v12 <= v17)
    v12 = v17;
  if (v12 < *(_QWORD *)&v13)
    goto LABEL_14;
LABEL_15:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v10, a2, (uint64_t)a2);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v10, a3, (uint64_t)a3);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v10, a4, (uint64_t)a4);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v10, a5, (uint64_t)a5);
  v18 = *(int8x8_t *)(a1 + 88);
  if (v18)
  {
    v19 = (uint8x8_t)vcnt_s8(v18);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.u32[0] > 1uLL)
    {
      v20 = 236;
      if (*(_QWORD *)&v18 <= 0xECuLL)
        v20 = 0xECu % *(_QWORD *)(a1 + 88);
    }
    else
    {
      v20 = (v18.i32[0] - 1) & 0xECLL;
    }
    v21 = *(uint64_t ***)(*v10 + 8 * v20);
    if (v21)
    {
      v22 = *v21;
      if (v22)
      {
        if (v19.u32[0] < 2uLL)
        {
          v23 = *(_QWORD *)&v18 - 1;
          while (1)
          {
            v25 = v22[1];
            if (v25 == 236)
            {
              if (*((_DWORD *)v22 + 4) == 236)
                return a1;
            }
            else if ((v25 & v23) != v20)
            {
              goto LABEL_35;
            }
            v22 = (uint64_t *)*v22;
            if (!v22)
              goto LABEL_35;
          }
        }
        do
        {
          v24 = v22[1];
          if (v24 == 236)
          {
            if (*((_DWORD *)v22 + 4) == 236)
              return a1;
          }
          else
          {
            if (v24 >= *(_QWORD *)&v18)
              v24 %= *(_QWORD *)&v18;
            if (v24 != v20)
              break;
          }
          v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
    }
  }
LABEL_35:
  v26 = operator new();
  *(_OWORD *)v26 = 0u;
  *(_OWORD *)(v26 + 16) = 0u;
  *(_QWORD *)v26 = &unk_24C0D9A88;
  *(_QWORD *)(v26 + 32) = 0;
  v29 = 236;
  v30 = v26;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v10, &v29, (uint64_t)&v29);
  v27 = v30;
  v30 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  return a1;
}

void webm::CuesParser::~CuesParser(webm::CuesParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::CuePointParser::~CuePointParser(webm::CuePointParser *this)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0D7F68;
  *((_QWORD *)this + 7) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 19);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_24C0D7F68;
  *((_QWORD *)this + 7) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 19);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::CuePoint>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 52))
  {
    if (*(_BYTE *)(a1 + 53))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 48) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 56, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 56, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 52) = 1;
    if (*(_BYTE *)(a1 + 53))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 48) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 48);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 53) = 1;
    if (*(_DWORD *)(a1 + 48) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::CuePoint>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  v7 = (_QWORD *)(a1 + 24);
  v6 = *(void **)(a1 + 24);
  *(v7 - 2) = 0;
  *((_BYTE *)v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  *v7 = 0;
  v7[1] = 0;
  *(_QWORD *)((char *)v7 + 22) = 0;
  v7[2] = 0;
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 72) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 96) = -1;
  *(_DWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = v8;
  *(_OWORD *)(a1 + 256) = v9;
  *(_QWORD *)(a1 + 280) = 0;
  *(_BYTE *)(a1 + 288) = 0;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 == -1)
  {
    *(_QWORD *)(a1 + 272) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 272) = v10;
    if (!v10)
    {
      *(_DWORD *)(a1 + 244) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 244) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::CuePoint>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  void *v6;
  _QWORD *v7;

  v7 = (_QWORD *)(a1 + 24);
  v6 = *(void **)(a1 + 24);
  *(v7 - 2) = 0;
  *((_BYTE *)v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  *(_QWORD *)((char *)v7 + 22) = 0;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(_BYTE *)(a1 + 53) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 56, a2, a3);
}

BOOL webm::MasterValueParser<webm::CuePoint>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 288))
    return 0;
  v2 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 128);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 288) != 0;
}

BOOL webm::MasterValueParser<webm::CuePoint>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1;
}

uint64_t webm::MasterValueParser<webm::CuePoint>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::CuePointParser::OnParseCompleted(webm::CuePointParser *this, webm::Callback *a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *((_DWORD *)this + 62);
  v4[0] = 187;
  v4[1] = v2;
  v5 = *((_OWORD *)this + 16);
  return (*(uint64_t (**)(webm::Callback *, _DWORD *, char *))(*(_QWORD *)a2 + 152))(a2, v4, (char *)this + 8);
}

_QWORD *webm::MasterValueParser<webm::CuePoint>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D7F68;
  a1[7] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[19];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[17];
  a1[17] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::CuePoint>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D7F68;
  a1[7] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[19];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[17];
  a1[17] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::CuePoint>::OnParseCompleted()
{
  return 0;
}

void webm::MasterValueParser<webm::CuePoint>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::CuePoint>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::CuePoint>*,webm::CuePoint*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::CuePoint>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::CuePoint>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::CuePoint>*,webm::CuePoint*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 48) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

_QWORD *webm::MasterValueParser<webm::CuePoint>::ChildParser<webm::CueTrackPositionsParser,webm::MasterValueParser<webm::CuePoint>::RepeatedChildFactory<webm::CueTrackPositionsParser,webm::CueTrackPositions>::BuildParser(webm::MasterValueParser<webm::CuePoint>*,webm::CuePoint*)::{lambda(webm::CueTrackPositionsParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D8070;
  a1[12] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[24];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[22];
  a1[22] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::CuePoint>::ChildParser<webm::CueTrackPositionsParser,webm::MasterValueParser<webm::CuePoint>::RepeatedChildFactory<webm::CueTrackPositionsParser,webm::CueTrackPositions>::BuildParser(webm::MasterValueParser<webm::CuePoint>*,webm::CuePoint*)::{lambda(webm::CueTrackPositionsParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D8070;
  a1[12] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[24];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[22];
  a1[22] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::CuePoint>::ChildParser<webm::CueTrackPositionsParser,webm::MasterValueParser<webm::CuePoint>::RepeatedChildFactory<webm::CueTrackPositionsParser,webm::CueTrackPositions>::BuildParser(webm::MasterValueParser<webm::CuePoint>*,webm::CuePoint*)::{lambda(webm::CueTrackPositionsParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _OWORD *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::CueTrackPositions>::Feed(a1, a2, a3, a4);
  if (!(_DWORD)v5
    && *(_DWORD *)(*(_QWORD *)(a1 + 336) + 48) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 344);
    v7 = *(_BYTE **)v6;
    v8 = *(_BYTE **)(v6 + 8);
    if (&v8[-*(_QWORD *)v6] == (_BYTE *)88)
    {
      if (v7 == v8)
        goto LABEL_27;
      if (!v7[80])
      {
        *(_QWORD *)(v6 + 8) = v7;
        v8 = v7;
      }
    }
    v9 = (_OWORD *)(a1 + 8);
    v10 = *(_QWORD *)(v6 + 16);
    if ((unint64_t)v8 >= v10)
    {
      v15 = 0x2E8BA2E8BA2E8BA3 * ((v8 - v7) >> 3) + 1;
      if (v15 > 0x2E8BA2E8BA2E8BALL)
        goto LABEL_28;
      v16 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - (_QWORD)v7) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x1745D1745D1745DLL)
        v17 = 0x2E8BA2E8BA2E8BALL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 > 0x2E8BA2E8BA2E8BALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v18 = 88 * v17;
        v19 = (char *)operator new(88 * v17);
        v20 = &v19[v18];
        v21 = &v19[8 * ((v8 - v7) >> 3)];
        v22 = v9[3];
        *((_OWORD *)v21 + 2) = v9[2];
        *((_OWORD *)v21 + 3) = v22;
        *((_OWORD *)v21 + 4) = v9[4];
        v23 = v9[1];
        *(_OWORD *)v21 = *v9;
        *((_OWORD *)v21 + 1) = v23;
        v21[80] = 1;
        v14 = v21 + 88;
        if (v8 == v7)
        {
          v28 = &v19[8 * ((v8 - v7) >> 3)];
        }
        else
        {
          do
          {
            v24 = *(_OWORD *)(v8 - 88);
            *(_OWORD *)(v21 - 72) = *(_OWORD *)(v8 - 72);
            *(_OWORD *)(v21 - 88) = v24;
            v25 = *(_OWORD *)(v8 - 56);
            v26 = *(_OWORD *)(v8 - 40);
            v27 = *(_OWORD *)(v8 - 24);
            v28 = v21 - 88;
            *(v21 - 8) = *(v8 - 8);
            *(_OWORD *)(v21 - 24) = v27;
            *(_OWORD *)(v21 - 40) = v26;
            *(_OWORD *)(v21 - 56) = v25;
            v8 -= 88;
            v21 -= 88;
          }
          while (v8 != v7);
        }
        *(_QWORD *)v6 = v28;
        *(_QWORD *)(v6 + 8) = v14;
        *(_QWORD *)(v6 + 16) = v20;
        if (v7)
          operator delete(v7);
        goto LABEL_25;
      }
    }
    else if (v8)
    {
      *(_OWORD *)v8 = *v9;
      v11 = *(_OWORD *)(a1 + 24);
      v12 = *(_OWORD *)(a1 + 40);
      v13 = *(_OWORD *)(a1 + 72);
      *((_OWORD *)v8 + 3) = *(_OWORD *)(a1 + 56);
      *((_OWORD *)v8 + 4) = v13;
      *((_OWORD *)v8 + 1) = v11;
      *((_OWORD *)v8 + 2) = v12;
      v8[80] = 1;
      v14 = v8 + 88;
LABEL_25:
      *(_QWORD *)(v6 + 8) = v14;
      return v5;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    abort();
  }
  return v5;
}

uint64_t webm::MasterValueParser<webm::CueTrackPositions>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 72) = 1;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 92) = 0;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 136) = -1;
  *(_DWORD *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = v3;
  *(_OWORD *)(a1 + 296) = v4;
  *(_QWORD *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 328) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 312) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 312) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 284) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 284) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::CueTrackPositions>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 72) = 1;
  *(_WORD *)(a1 + 92) = 256;
  *(_BYTE *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  return webm::MasterParser::InitAfterSeek(a1 + 96, a2, a3);
}

BOOL webm::MasterValueParser<webm::CueTrackPositions>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 328))
    return 0;
  v2 = *(_OWORD *)(a1 + 152);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 168);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 328) != 0;
}

BOOL webm::MasterValueParser<webm::CueTrackPositions>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 88) == 1;
}

uint64_t webm::MasterValueParser<webm::CueTrackPositions>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::CueTrackPositions>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::CueTrackPositions>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 92))
  {
    if (*(_BYTE *)(a1 + 93))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 88) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 96, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 96, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 92) = 1;
    if (*(_BYTE *)(a1 + 93))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 88) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 88);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 93) = 1;
    if (*(_DWORD *)(a1 + 88) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::CueTrackPositions>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D8070;
  a1[12] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[24];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[22];
  a1[22] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::CueTrackPositions>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D8070;
  a1[12] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[24];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[22];
  a1[22] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::CueTrackPositions>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::CueTrackPositions>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::CueTrackPositions>*,webm::CueTrackPositions*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::CueTrackPositions>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::CueTrackPositions>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::CueTrackPositions>*,webm::CueTrackPositions*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 88) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

uint64_t webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(uint64_t a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned int *a6)
{
  _QWORD *v12;
  size_t prime;
  unint64_t v14;
  int8x8_t v15;
  size_t v16;
  uint8x8_t v17;
  uint64_t v18;
  size_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  uint64_t v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v31;
  uint64_t v32;

  *(_QWORD *)a1 = &off_24C0D70E8;
  *(_QWORD *)(a1 + 8) = &unk_24C0D7088;
  *(_DWORD *)(a1 + 16) = -1;
  *(_QWORD *)(a1 + 24) = &unk_24C0D99A8;
  *(_QWORD *)(a1 + 32) = &unk_24C0D9A60;
  *(_DWORD *)(a1 + 40) = -1;
  *(_OWORD *)(a1 + 80) = 0u;
  v12 = (_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_QWORD *)(a1 + 120) = &unk_24C0D9A18;
  *(_QWORD *)(a1 + 160) = &unk_24C0D99D0;
  *(_DWORD *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  prime = std::__next_prime(7uLL);
  v14 = prime;
  v15 = *(int8x8_t *)(a1 + 88);
  if (prime > *(_QWORD *)&v15)
    goto LABEL_14;
  if (prime >= *(_QWORD *)&v15)
    goto LABEL_15;
  v16 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 104) / *(float *)(a1 + 112));
  if (*(_QWORD *)&v15 >= 3uLL)
  {
    v17 = (uint8x8_t)vcnt_s8(v15);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] <= 1uLL)
    {
      v18 = 1 << -(char)__clz(v16 - 1);
      if (v16 >= 2)
        v16 = v18;
      if (v14 <= v16)
        v14 = v16;
      if (v14 >= *(_QWORD *)&v15)
        goto LABEL_15;
LABEL_14:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>((uint64_t)v12, v14);
      goto LABEL_15;
    }
  }
  v19 = std::__next_prime(v16);
  if (v14 <= v19)
    v14 = v19;
  if (v14 < *(_QWORD *)&v15)
    goto LABEL_14;
LABEL_15:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v12, a2, (uint64_t)a2);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v12, a3, (uint64_t)a3);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v12, a4, (uint64_t)a4);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v12, a5, (uint64_t)a5);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v12, a6, (uint64_t)a6);
  v20 = *(int8x8_t *)(a1 + 88);
  if (v20)
  {
    v21 = (uint8x8_t)vcnt_s8(v20);
    v21.i16[0] = vaddlv_u8(v21);
    if (v21.u32[0] > 1uLL)
    {
      v22 = 236;
      if (*(_QWORD *)&v20 <= 0xECuLL)
        v22 = 0xECu % *(_QWORD *)(a1 + 88);
    }
    else
    {
      v22 = (v20.i32[0] - 1) & 0xECLL;
    }
    v23 = *(uint64_t ***)(*v12 + 8 * v22);
    if (v23)
    {
      v24 = *v23;
      if (v24)
      {
        if (v21.u32[0] < 2uLL)
        {
          v25 = *(_QWORD *)&v20 - 1;
          while (1)
          {
            v27 = v24[1];
            if (v27 == 236)
            {
              if (*((_DWORD *)v24 + 4) == 236)
                return a1;
            }
            else if ((v27 & v25) != v22)
            {
              goto LABEL_35;
            }
            v24 = (uint64_t *)*v24;
            if (!v24)
              goto LABEL_35;
          }
        }
        do
        {
          v26 = v24[1];
          if (v26 == 236)
          {
            if (*((_DWORD *)v24 + 4) == 236)
              return a1;
          }
          else
          {
            if (v26 >= *(_QWORD *)&v20)
              v26 %= *(_QWORD *)&v20;
            if (v26 != v22)
              break;
          }
          v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
    }
  }
LABEL_35:
  v28 = operator new();
  *(_OWORD *)v28 = 0u;
  *(_OWORD *)(v28 + 16) = 0u;
  *(_QWORD *)v28 = &unk_24C0D9A88;
  *(_QWORD *)(v28 + 32) = 0;
  v31 = 236;
  v32 = v28;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>((uint64_t)v12, &v31, (uint64_t)&v31);
  v29 = v32;
  v32 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  return a1;
}

void webm::InfoParser::~InfoParser(webm::InfoParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = off_24C0D8178;
  *((_QWORD *)this + 20) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 32);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    operator delete(v3);
  if (*((char *)this + 143) < 0)
  {
    operator delete(*((void **)this + 15));
    if ((*((char *)this + 111) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 79) & 0x80000000) == 0)
        return;
LABEL_13:
      operator delete(*((void **)this + 7));
      return;
    }
  }
  else if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 11));
  if (*((char *)this + 79) < 0)
    goto LABEL_13;
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = off_24C0D8178;
  *((_QWORD *)this + 20) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 32);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
    operator delete(v3);
  if (*((char *)this + 143) < 0)
  {
    operator delete(*((void **)this + 15));
    if ((*((char *)this + 111) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*((char *)this + 79) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if ((*((char *)this + 111) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*((void **)this + 11));
  if ((*((char *)this + 79) & 0x80000000) == 0)
LABEL_14:
    JUMPOUT(0x20BD0ADECLL);
LABEL_13:
  operator delete(*((void **)this + 7));
  goto LABEL_14;
}

uint64_t webm::MasterValueParser<webm::Info>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 156))
  {
    if (*(_BYTE *)(a1 + 157))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 152) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 160, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 160, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 156) = 1;
    if (*(_BYTE *)(a1 + 157))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 152) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 152);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 157) = 1;
    if (*(_DWORD *)(a1 + 152) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::Info>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)(a1 + 8) = 1000000;
  *(_BYTE *)(a1 + 16) = 0;
  v6 = a1 + 56;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v7 = a1 + 88;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_8:
    operator delete(*(void **)v7);
    v8 = a1 + 120;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_4;
    goto LABEL_9;
  }
  operator delete(*(void **)v6);
  v7 = a1 + 88;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  if (*(char *)(a1 + 111) < 0)
    goto LABEL_8;
LABEL_3:
  v8 = a1 + 120;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    goto LABEL_4;
LABEL_9:
  operator delete(*(void **)v8);
LABEL_4:
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 156) = 0;
  v9 = *(_DWORD *)(a2 + 4);
  v10 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 176) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 200) = -1;
  *(_DWORD *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 204) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 352) = v9;
  *(_OWORD *)(a1 + 360) = v10;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11 == -1)
  {
    *(_QWORD *)(a1 + 376) = a3;
    goto LABEL_11;
  }
  *(_QWORD *)(a1 + 376) = v11;
  if (v11)
  {
LABEL_11:
    v12 = 0;
    goto LABEL_12;
  }
  v12 = 8;
LABEL_12:
  *(_DWORD *)(a1 + 348) = v12;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Info>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(a1 + 8) = 1000000;
  *(_BYTE *)(a1 + 16) = 0;
  v6 = a1 + 56;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    v7 = a1 + 88;
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(a1 + 64) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)v7);
    v8 = a1 + 120;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
      goto LABEL_4;
LABEL_7:
    operator delete(*(void **)v8);
    goto LABEL_4;
  }
  operator delete(*(void **)v6);
  v7 = a1 + 88;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  if (*(char *)(a1 + 111) < 0)
    goto LABEL_6;
LABEL_3:
  v8 = a1 + 120;
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  if (*(char *)(a1 + 143) < 0)
    goto LABEL_7;
LABEL_4:
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 156) = 256;
  return webm::MasterParser::InitAfterSeek(a1 + 160, a2, a3);
}

BOOL webm::MasterValueParser<webm::Info>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 392))
    return 0;
  v2 = *(_OWORD *)(a1 + 216);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 232);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 392) != 0;
}

BOOL webm::MasterValueParser<webm::Info>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 152) == 1;
}

uint64_t webm::MasterValueParser<webm::Info>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::InfoParser::OnParseCompleted(webm::InfoParser *this, webm::Callback *a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *((_DWORD *)this + 88);
  v4[0] = 357149030;
  v4[1] = v2;
  v5 = *(_OWORD *)((char *)this + 360);
  return (*(uint64_t (**)(webm::Callback *, _DWORD *, char *))(*(_QWORD *)a2 + 64))(a2, v4, (char *)this + 8);
}

uint64_t webm::MasterValueParser<webm::Info>::~MasterValueParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_24C0D8178;
  *(_QWORD *)(a1 + 160) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 256);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v3)
    operator delete(v3);
  if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_12:
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 79) & 0x80000000) == 0)
      return a1;
    goto LABEL_13;
  }
  operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 111) < 0)
    goto LABEL_12;
LABEL_6:
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
    return a1;
LABEL_13:
  operator delete(*(void **)(a1 + 56));
  return a1;
}

void webm::MasterValueParser<webm::Info>::~MasterValueParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24C0D8178;
  *(_QWORD *)(a1 + 160) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 256);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v3)
    operator delete(v3);
  if (*(char *)(a1 + 143) < 0)
  {
    operator delete(*(void **)(a1 + 120));
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if ((*(char *)(a1 + 111) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 88));
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
LABEL_14:
    JUMPOUT(0x20BD0ADECLL);
LABEL_13:
  operator delete(*(void **)(a1 + 56));
  goto LABEL_14;
}

uint64_t webm::MasterValueParser<webm::Info>::OnParseCompleted()
{
  return 0;
}

void webm::MasterValueParser<webm::Info>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Info>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Info>*,webm::Info*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Info>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Info>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Info>*,webm::Info*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 152) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

void webm::MasterValueParser<webm::Info>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Info>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::Info>*,webm::Info*)::{lambda(webm::FloatParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

double webm::MasterValueParser<webm::Info>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Info>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::Info>*,webm::Info*)::{lambda(webm::FloatParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v7;
  unsigned int v9;
  double result;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  *a4 = 0;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 <= 8)
    {
      v9 = v5 + 1;
      while (1)
      {
        v14 = 0;
        v15 = 0;
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
        if (v7)
          break;
        ++*a4;
        *(_QWORD *)(a1 + 24) = v14 | (*(_QWORD *)(a1 + 24) << 8);
        if ((int)--v9 <= 1)
        {
          v7 = 0;
          break;
        }
      }
    }
    else
    {
      v7 = -1026;
    }
    v11 = *(_DWORD *)(a1 + 32);
    v12 = v11 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 32) = v11 - *(_DWORD *)a4;
    if (v12)
    {
      if (*(_BYTE *)(a1 + 36))
      {
        result = *(float *)(a1 + 24);
        *(double *)(a1 + 8) = result;
        if (v7)
          return result;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        if (v7)
          return result;
      }
    }
    else if (v7)
    {
      return result;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 152) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + 48);
    result = *(double *)(a1 + 8);
    *(double *)v13 = result;
    *(_BYTE *)(v13 + 8) = 1;
  }
  return result;
}

void webm::MasterValueParser<webm::Info>::ChildParser<webm::DateParser,webm::MasterValueParser<webm::Info>::SingleChildFactory<webm::DateParser,long long>::BuildParser(webm::MasterValueParser<webm::Info>*,webm::Info*)::{lambda(webm::DateParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Info>::ChildParser<webm::DateParser,webm::MasterValueParser<webm::Info>::SingleChildFactory<webm::DateParser,long long>::BuildParser(webm::MasterValueParser<webm::Info>*,webm::Info*)::{lambda(webm::DateParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 152) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

uint64_t webm::MasterValueParser<webm::Info>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::Info>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::Info>*,webm::Info*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void webm::MasterValueParser<webm::Info>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::Info>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::Info>*,webm::Info*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t webm::MasterValueParser<webm::Info>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::Info>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::Info>*,webm::Info*)::{lambda(webm::ByteParser<std::string>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *a4 = 0;
  v5 = webm::ByteParser<std::string>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 64) + 152) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a1 + 31) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return v5;
}

void webm::SeekHeadParser::~SeekHeadParser(webm::SeekHeadParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::SeekParser::~SeekParser(webm::SeekParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D83A0;
  *((_QWORD *)this + 5) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 17);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D83A0;
  *((_QWORD *)this + 5) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 17);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Seek>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 36))
  {
    if (*(_BYTE *)(a1 + 37))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 32) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 40, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 40, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 36) = 1;
    if (*(_BYTE *)(a1 + 37))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 32) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 32);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 37) = 1;
    if (*(_DWORD *)(a1 + 32) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::Seek>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 30) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 80) = -1;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = v3;
  *(_OWORD *)(a1 + 240) = v4;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 256) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 256) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 228) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 228) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Seek>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 29) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 37) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 40, a2, a3);
}

BOOL webm::MasterValueParser<webm::Seek>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 272))
    return 0;
  v2 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 272) != 0;
}

BOOL webm::MasterValueParser<webm::Seek>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) == 1;
}

uint64_t webm::MasterValueParser<webm::Seek>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::SeekParser::OnParseCompleted(webm::SeekParser *this, webm::Callback *a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *((_DWORD *)this + 58);
  v4[0] = 19899;
  v4[1] = v2;
  v5 = *((_OWORD *)this + 15);
  return (*(uint64_t (**)(webm::Callback *, _DWORD *, char *))(*(_QWORD *)a2 + 56))(a2, v4, (char *)this + 8);
}

_QWORD *webm::MasterValueParser<webm::Seek>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D83A0;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::Seek>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D83A0;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Seek>::OnParseCompleted()
{
  return 0;
}

void webm::MasterValueParser<webm::Seek>::ChildParser<webm::IdElementParser,webm::MasterValueParser<webm::Seek>::SingleChildFactory<webm::IdElementParser,webm::Id>::BuildParser(webm::MasterValueParser<webm::Seek>*,webm::Seek*)::{lambda(webm::IdElementParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Seek>::ChildParser<webm::IdElementParser,webm::MasterValueParser<webm::Seek>::SingleChildFactory<webm::IdElementParser,webm::Id>::BuildParser(webm::MasterValueParser<webm::Seek>*,webm::Seek*)::{lambda(webm::IdElementParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 12);
  *a4 = 0;
  if (v5 > 4)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 12) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_DWORD *)(a1 + 8) = v13 | (*(_DWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 12) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 12);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 12) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 16) + 32) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)v12 = *(_DWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 4) = 1;
  return result;
}

void webm::MasterValueParser<webm::Seek>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Seek>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Seek>*,webm::Seek*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Seek>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Seek>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Seek>*,webm::Seek*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 32) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

void webm::TagsParser::~TagsParser(webm::TagsParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::TagParser::~TagParser(webm::TagParser *this)
{
  webm::MasterValueParser<webm::Tag>::~MasterValueParser((uint64_t)this);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Tag>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 116))
  {
    if (*(_BYTE *)(a1 + 117))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 112) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 120, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 120, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 116) = 1;
    if (*(_BYTE *)(a1 + 117))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 112) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 112);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 117) = 1;
    if (*(_DWORD *)(a1 + 112) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::Tag>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void **v9;
  char *v10;
  char *v11;
  void *v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  int v16;

  *(_QWORD *)(a1 + 8) = 50;
  *(_BYTE *)(a1 + 16) = 0;
  v6 = a1 + 24;
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    v8 = a1 + 56;
    v7 = *(void **)(a1 + 56);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    if (!v7)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)v6);
  v8 = a1 + 56;
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  if (v7)
  {
LABEL_3:
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
LABEL_4:
  v9 = (void **)(a1 + 88);
  v10 = *(char **)(a1 + 88);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  if (v10)
  {
    v11 = *(char **)(a1 + 96);
    v12 = v10;
    if (v11 != v10)
    {
      do
        webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(v11 - 168));
      while (v11 != v10);
      v12 = *v9;
    }
    *(_QWORD *)(a1 + 96) = v10;
    operator delete(v12);
  }
  *v9 = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 110) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v13 = *(_DWORD *)(a2 + 4);
  v14 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 136) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 160) = -1;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = v13;
  *(_OWORD *)(a1 + 320) = v14;
  *(_QWORD *)(a1 + 344) = 0;
  *(_BYTE *)(a1 + 352) = 0;
  v15 = *(_QWORD *)(a2 + 8);
  if (v15 == -1)
  {
    *(_QWORD *)(a1 + 336) = a3;
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 336) = v15;
  if (v15)
  {
LABEL_15:
    v16 = 0;
    goto LABEL_16;
  }
  v16 = 8;
LABEL_16:
  *(_DWORD *)(a1 + 308) = v16;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Tag>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void **v9;
  char *v10;
  char *v11;
  void *v12;

  *(_QWORD *)(a1 + 8) = 50;
  *(_BYTE *)(a1 + 16) = 0;
  v6 = a1 + 24;
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    v8 = a1 + 56;
    v7 = *(void **)(a1 + 56);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    if (!v7)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)v6);
  v8 = a1 + 56;
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  if (v7)
  {
LABEL_3:
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
LABEL_4:
  v9 = (void **)(a1 + 88);
  v10 = *(char **)(a1 + 88);
  *(_QWORD *)v8 = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_BYTE *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 16) = 0;
  if (v10)
  {
    v11 = *(char **)(a1 + 96);
    v12 = v10;
    if (v11 != v10)
    {
      do
        webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(v11 - 168));
      while (v11 != v10);
      v12 = *v9;
    }
    *(_QWORD *)(a1 + 96) = v10;
    operator delete(v12);
  }
  *v9 = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 109) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 117) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 120, a2, a3);
}

BOOL webm::MasterValueParser<webm::Tag>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 352))
    return 0;
  v2 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 192);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 352) != 0;
}

BOOL webm::MasterValueParser<webm::Tag>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 112) == 1;
}

uint64_t webm::MasterValueParser<webm::Tag>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::TagParser::OnParseCompleted(webm::TagParser *this, webm::Callback *a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *((_DWORD *)this + 78);
  v4[0] = 29555;
  v4[1] = v2;
  v5 = *((_OWORD *)this + 20);
  return (*(uint64_t (**)(webm::Callback *, _DWORD *, char *))(*(_QWORD *)a2 + 168))(a2, v4, (char *)this + 8);
}

void webm::MasterValueParser<webm::Tag>::~MasterValueParser(uint64_t a1)
{
  webm::MasterValueParser<webm::Tag>::~MasterValueParser(a1);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Tag>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::Tag>::ChildParser<webm::TargetsParser,webm::MasterValueParser<webm::Tag>::SingleChildFactory<webm::TargetsParser,webm::Targets>::BuildParser(webm::MasterValueParser<webm::Tag>*,webm::Tag*)::{lambda(webm::TargetsParser*)#1}>::~ChildParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_24C0D85F8;
  *(_QWORD *)(a1 + 88) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 184);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void webm::MasterValueParser<webm::Tag>::ChildParser<webm::TargetsParser,webm::MasterValueParser<webm::Tag>::SingleChildFactory<webm::TargetsParser,webm::Targets>::BuildParser(webm::MasterValueParser<webm::Tag>*,webm::Tag*)::{lambda(webm::TargetsParser*)#1}>::~ChildParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_24C0D85F8;
  *(_QWORD *)(a1 + 88) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 184);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Tag>::ChildParser<webm::TargetsParser,webm::MasterValueParser<webm::Tag>::SingleChildFactory<webm::TargetsParser,webm::Targets>::BuildParser(webm::MasterValueParser<webm::Tag>*,webm::Tag*)::{lambda(webm::TargetsParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  void *v11;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::Targets>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 328) + 112) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 336);
  v8 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)v7 = v8;
  v9 = (void **)(v7 + 16);
  if (*(char *)(v7 + 39) < 0)
    operator delete(*v9);
  v10 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)v9 = v10;
  *(_BYTE *)(a1 + 47) = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v11 = *(void **)(v7 + 48);
  *(_BYTE *)(v7 + 40) = *(_BYTE *)(a1 + 48);
  if (v11)
  {
    *(_QWORD *)(v7 + 56) = v11;
    operator delete(v11);
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 56) = 0;
    *(_QWORD *)(v7 + 64) = 0;
  }
  *(_OWORD *)(v7 + 48) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(v7 + 64) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(v7 + 72) = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::Targets>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;

  *(_QWORD *)(a1 + 8) = 50;
  *(_BYTE *)(a1 + 16) = 0;
  v6 = a1 + 24;
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
  {
    v8 = (_QWORD *)(a1 + 56);
    v7 = *(void **)(a1 + 56);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    if (!v7)
      goto LABEL_4;
    goto LABEL_3;
  }
  operator delete(*(void **)v6);
  v8 = (_QWORD *)(a1 + 56);
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  if (v7)
  {
LABEL_3:
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
LABEL_4:
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)((char *)v8 + 22) = 0;
  v8[2] = 0;
  v9 = *(_DWORD *)(a2 + 4);
  v10 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 104) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 128) = -1;
  *(_DWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = v9;
  *(_OWORD *)(a1 + 288) = v10;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  v11 = *(_QWORD *)(a2 + 8);
  if (v11 == -1)
  {
    *(_QWORD *)(a1 + 304) = a3;
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 304) = v11;
  if (v11)
  {
LABEL_10:
    v12 = 0;
    goto LABEL_11;
  }
  v12 = 8;
LABEL_11:
  *(_DWORD *)(a1 + 276) = v12;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Targets>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  _QWORD *v8;

  *(_QWORD *)(a1 + 8) = 50;
  *(_BYTE *)(a1 + 16) = 0;
  v6 = a1 + 24;
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)v6);
    v8 = (_QWORD *)(a1 + 56);
    v7 = *(void **)(a1 + 56);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    if (!v7)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8 = (_QWORD *)(a1 + 56);
  v7 = *(void **)(a1 + 56);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  if (v7)
  {
LABEL_3:
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
LABEL_4:
  *v8 = 0;
  v8[1] = 0;
  *(_QWORD *)((char *)v8 + 21) = 0;
  v8[2] = 0;
  *(_BYTE *)(a1 + 85) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 88, a2, a3);
}

BOOL webm::MasterValueParser<webm::Targets>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 320))
    return 0;
  v2 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 320) != 0;
}

BOOL webm::MasterValueParser<webm::Targets>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 80) == 1;
}

uint64_t webm::MasterValueParser<webm::Targets>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Targets>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::Targets>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 84))
  {
    if (*(_BYTE *)(a1 + 85))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 80) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 88, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 88, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 84) = 1;
    if (*(_BYTE *)(a1 + 85))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 80) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 80);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 85) = 1;
    if (*(_DWORD *)(a1 + 80) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::Targets>::~MasterValueParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_24C0D85F8;
  *(_QWORD *)(a1 + 88) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 184);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void webm::MasterValueParser<webm::Targets>::~MasterValueParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_24C0D85F8;
  *(_QWORD *)(a1 + 88) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 184);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::Targets>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Targets>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Targets>*,webm::Targets*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Targets>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Targets>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Targets>*,webm::Targets*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 80) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

uint64_t webm::MasterValueParser<webm::Targets>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::Targets>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::Targets>*,webm::Targets*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void webm::MasterValueParser<webm::Targets>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::Targets>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::Targets>*,webm::Targets*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t webm::MasterValueParser<webm::Targets>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::Targets>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::Targets>*,webm::Targets*)::{lambda(webm::ByteParser<std::string>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *a4 = 0;
  v5 = webm::ByteParser<std::string>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 64) + 80) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a1 + 31) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return v5;
}

void webm::MasterValueParser<webm::Targets>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Targets>::RepeatedChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Targets>*,webm::Targets*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Targets>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Targets>::RepeatedChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Targets>*,webm::Targets*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  char *i;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char v25;
  unsigned __int8 v26;
  uint64_t v27;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_12:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v26 = 0;
      v27 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v26, &v27);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v26 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_12;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 80) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return 0;
  }
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_BYTE **)v11;
  v13 = *(_BYTE **)(v11 + 8);
  if (&v13[-*(_QWORD *)v11] == (_BYTE *)16)
  {
    if (v12 == v13)
      goto LABEL_32;
    if (!v12[8])
    {
      *(_QWORD *)(v11 + 8) = v12;
      v13 = v12;
    }
  }
  v14 = *(_QWORD *)(v11 + 16);
  if ((unint64_t)v13 >= v14)
  {
    v16 = (v13 - v12) >> 4;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 60)
      goto LABEL_33;
    v18 = v14 - (_QWORD)v12;
    if (v18 >> 3 > v17)
      v17 = v18 >> 3;
    v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0;
    v20 = 0xFFFFFFFFFFFFFFFLL;
    if (!v19)
      v20 = v17;
    if (v20)
    {
      if (v20 >> 60)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 16 * v20;
      v22 = (char *)operator new(16 * v20);
      v23 = &v22[16 * v16];
      *(_QWORD *)v23 = *(_QWORD *)(a1 + 8);
      v23[8] = 1;
      for (i = v23 + 16; v13 != v12; v23[8] = v25)
      {
        v24 = *((_QWORD *)v13 - 2);
        v13 -= 16;
        v25 = v13[8];
        *((_QWORD *)v23 - 2) = v24;
        v23 -= 16;
      }
      *(_QWORD *)v11 = v23;
      *(_QWORD *)(v11 + 8) = i;
      *(_QWORD *)(v11 + 16) = &v22[v21];
      if (v12)
        operator delete(v12);
      goto LABEL_31;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    abort();
  }
  if (!v13)
    goto LABEL_32;
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 8);
  v13[8] = 1;
  i = v13 + 16;
LABEL_31:
  result = 0;
  *(_QWORD *)(v11 + 8) = i;
  return result;
}

_QWORD *webm::MasterValueParser<webm::Tag>::ChildParser<webm::SimpleTagParser,webm::MasterValueParser<webm::Tag>::RepeatedChildFactory<webm::SimpleTagParser,webm::SimpleTag>::BuildParser(webm::MasterValueParser<webm::Tag>*,webm::Tag*)::{lambda(webm::SimpleTagParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D87F0;
  a1[22] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[34];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[32];
  a1[32] = 0;
  if (v3)
    operator delete(v3);
  webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(a1 + 1));
  return a1;
}

void webm::MasterValueParser<webm::Tag>::ChildParser<webm::SimpleTagParser,webm::MasterValueParser<webm::Tag>::RepeatedChildFactory<webm::SimpleTagParser,webm::SimpleTag>::BuildParser(webm::MasterValueParser<webm::Tag>*,webm::Tag*)::{lambda(webm::SimpleTagParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D87F0;
  a1[22] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[34];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[32];
  a1[32] = 0;
  if (v3)
    operator delete(v3);
  webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(a1 + 1));
  JUMPOUT(0x20BD0ADECLL);
}

_OWORD *webm::MasterValueParser<webm::Tag>::ChildParser<webm::SimpleTagParser,webm::MasterValueParser<webm::Tag>::RepeatedChildFactory<webm::SimpleTagParser,webm::SimpleTag>::BuildParser(webm::MasterValueParser<webm::Tag>*,webm::Tag*)::{lambda(webm::SimpleTagParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  _BYTE *v8;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::SimpleTag>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 416) + 112) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return (_OWORD *)v5;
  }
  v7 = *(_QWORD *)(a1 + 424);
  v8 = *(_BYTE **)v7;
  result = *(_OWORD **)(v7 + 8);
  if ((_OWORD *)((char *)result - *(_QWORD *)v7) == (_OWORD *)168)
  {
    if (v8 == (_BYTE *)result)
      goto LABEL_14;
    if (!v8[160])
    {
      do
        webm::SimpleTag::~SimpleTag((webm::SimpleTag *)((char *)result - 168));
      while (result != (_OWORD *)v8);
      *(_QWORD *)(v7 + 8) = v8;
      v7 = *(_QWORD *)(a1 + 424);
      result = *(_OWORD **)(v7 + 8);
    }
  }
  v9 = (__int128 *)(a1 + 8);
  if ((unint64_t)result >= *(_QWORD *)(v7 + 16))
  {
    *(_QWORD *)(v7 + 8) = std::vector<webm::Element<webm::SimpleTag>>::__emplace_back_slow_path<webm::SimpleTag,BOOL>((void **)v7, (uint64_t)v9, 1);
    return (_OWORD *)v5;
  }
  if (result)
  {
    v10 = *v9;
    *((_QWORD *)result + 2) = *(_QWORD *)(a1 + 24);
    *result = v10;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)v9 = 0;
    *((_BYTE *)result + 24) = *(_BYTE *)(a1 + 32);
    v11 = *(_OWORD *)(a1 + 40);
    *((_QWORD *)result + 6) = *(_QWORD *)(a1 + 56);
    result[2] = v11;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 40) = 0;
    *((_BYTE *)result + 56) = *(_BYTE *)(a1 + 64);
    *((_WORD *)result + 32) = *(_WORD *)(a1 + 72);
    v12 = *(_OWORD *)(a1 + 80);
    *((_QWORD *)result + 11) = *(_QWORD *)(a1 + 96);
    *(_OWORD *)((char *)result + 72) = v12;
    *(_QWORD *)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    *((_BYTE *)result + 96) = *(_BYTE *)(a1 + 104);
    *((_QWORD *)result + 14) = 0;
    *((_QWORD *)result + 15) = 0;
    *((_QWORD *)result + 13) = 0;
    *(_OWORD *)((char *)result + 104) = *(_OWORD *)(a1 + 112);
    *((_QWORD *)result + 15) = *(_QWORD *)(a1 + 128);
    *(_QWORD *)(a1 + 120) = 0;
    *(_QWORD *)(a1 + 128) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *((_BYTE *)result + 128) = *(_BYTE *)(a1 + 136);
    *((_QWORD *)result + 18) = 0;
    *((_QWORD *)result + 19) = 0;
    *((_QWORD *)result + 17) = 0;
    *(_OWORD *)((char *)result + 136) = *(_OWORD *)(a1 + 144);
    *((_QWORD *)result + 19) = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    *((_BYTE *)result + 160) = 1;
    *(_QWORD *)(v7 + 8) = (char *)result + 168;
    return (_OWORD *)v5;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t webm::MasterValueParser<webm::SimpleTag>::Init(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[3];
  uint64_t v13;
  char v14;
  __int16 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v5 = result;
  memset(v12, 0, 32);
  HIBYTE(v11) = 3;
  if (&v10 > (__int128 *)"und" || (char *)&v10 + 3 <= "und")
  {
    LODWORD(v10) = 6581877;
    v13 = v11;
    v12[2] = v10;
    v14 = 0;
    v15 = 1;
    v16 = 0uLL;
    v17 = 0uLL;
    v18 = 0uLL;
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0;
    webm::SimpleTag::operator=(result + 8, v12);
    webm::SimpleTag::~SimpleTag((webm::SimpleTag *)v12);
    *(_DWORD *)(v5 + 168) = 0;
    *(_WORD *)(v5 + 172) = 0;
    v6 = *(_DWORD *)(a2 + 4);
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v5 + 192) = 0xFFFFFFFFLL;
    *(_DWORD *)(v5 + 216) = -1;
    *(_DWORD *)(v5 + 228) = 0;
    *(_QWORD *)(v5 + 220) = 0;
    *(_QWORD *)(v5 + 352) = 0;
    *(_DWORD *)(v5 + 360) = 0;
    *(_DWORD *)(v5 + 368) = v6;
    *(_OWORD *)(v5 + 376) = v7;
    *(_QWORD *)(v5 + 400) = 0;
    *(_BYTE *)(v5 + 408) = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (v8 == -1)
    {
      *(_QWORD *)(v5 + 392) = a3;
    }
    else
    {
      *(_QWORD *)(v5 + 392) = v8;
      if (!v8)
      {
        v9 = 8;
LABEL_8:
        *(_DWORD *)(v5 + 364) = v9;
        return 0;
      }
    }
    v9 = 0;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t webm::MasterValueParser<webm::SimpleTag>::InitAfterSeek(uint64_t result, unsigned int **a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8[3];
  uint64_t v9;
  char v10;
  __int16 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v5 = result;
  memset(v8, 0, 32);
  HIBYTE(v7) = 3;
  if (&v6 <= (__int128 *)"und" && (char *)&v6 + 3 > "und")
  {
    __break(1u);
  }
  else
  {
    LODWORD(v6) = 6581877;
    v9 = v7;
    v8[2] = v6;
    v10 = 0;
    v11 = 1;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
    v17 = 0;
    webm::SimpleTag::operator=(result + 8, v8);
    webm::SimpleTag::~SimpleTag((webm::SimpleTag *)v8);
    *(_DWORD *)(v5 + 168) = 0;
    *(_WORD *)(v5 + 172) = 256;
    return webm::MasterParser::InitAfterSeek(v5 + 176, a2, a3);
  }
  return result;
}

BOOL webm::MasterValueParser<webm::SimpleTag>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 408))
    return 0;
  v2 = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 248);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 408) != 0;
}

BOOL webm::MasterValueParser<webm::SimpleTag>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 168) == 1;
}

uint64_t webm::MasterValueParser<webm::SimpleTag>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::SimpleTag>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::SimpleTag>::MasterValueParser<webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>,webm::MasterValueParser<webm::SimpleTag>::RecursiveChildFactory<webm::SimpleTagParser>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string::size_type size;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v40;
  _QWORD *v41;
  unsigned int v42;
  _QWORD *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  std::string v50;

  *(_QWORD *)a1 = &off_24C0D87F0;
  *(_QWORD *)(a1 + 8) = 0;
  v14 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *((_BYTE *)&v50.__r_.__value_.__s + 23) = 3;
  if (&v50 <= (std::string *)"und" && (char *)v50.__r_.__value_.__r.__words + 3 > "und")
  {
    __break(1u);
    goto LABEL_30;
  }
  LODWORD(v50.__r_.__value_.__l.__data_) = 6581877;
  *(std::string *)(a1 + 40) = v50;
  *(_BYTE *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  v15 = v14 + *(_QWORD *)(a2 + 8);
  v16 = operator new();
  if (*(char *)(v15 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
  else
    v50 = *(std::string *)v15;
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  *(std::string *)(v16 + 32) = v50;
  *(_QWORD *)v16 = off_24C0D8850;
  *(_QWORD *)(v16 + 8) = 0;
  *(_QWORD *)(v16 + 64) = a1;
  *(_QWORD *)(v16 + 72) = v15;
  v48 = *(_DWORD *)a2;
  v17 = v14 + *(_QWORD *)(a3 + 8);
  v49 = v16;
  v18 = operator new();
  if (*(char *)(v17 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v17, *(_QWORD *)(v17 + 8));
  else
    v50 = *(std::string *)v17;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(std::string *)(v18 + 32) = v50;
  *(_QWORD *)v18 = off_24C0D8850;
  *(_QWORD *)(v18 + 8) = 0;
  *(_QWORD *)(v18 + 64) = a1;
  *(_QWORD *)(v18 + 72) = v17;
  v46 = *(_DWORD *)a3;
  v19 = (_BYTE *)(v14 + *(_QWORD *)(a4 + 8));
  v47 = v18;
  v20 = operator new();
  *(_BYTE *)(v20 + 9) = *v19;
  *(_DWORD *)(v20 + 12) = -1;
  *(_QWORD *)v20 = &off_24C0D8898;
  *(_QWORD *)(v20 + 24) = a1;
  *(_QWORD *)(v20 + 32) = v19;
  v44 = *(_DWORD *)a4;
  v45 = v20;
  v21 = v14 + *(_QWORD *)(a5 + 8);
  v22 = operator new();
  if (*(char *)(v21 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v21, *(_QWORD *)(v21 + 8));
  else
    v50 = *(std::string *)v21;
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  *(std::string *)(v22 + 32) = v50;
  *(_QWORD *)v22 = off_24C0D8850;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 64) = a1;
  *(_QWORD *)(v22 + 72) = v21;
  LODWORD(v50.__r_.__value_.__l.__data_) = *(_DWORD *)a5;
  v23 = v14 + *(_QWORD *)(a6 + 8);
  v50.__r_.__value_.__l.__size_ = v22;
  v24 = (_QWORD *)operator new();
  v26 = *(const void **)v23;
  v25 = *(_QWORD *)(v23 + 8);
  v27 = v25 - *(_QWORD *)v23;
  if (v25 != *(_QWORD *)v23)
  {
    if ((v27 & 0x8000000000000000) == 0)
    {
      v28 = (char *)operator new(v25 - *(_QWORD *)v23);
      v29 = &v28[v27];
      memcpy(v28, v26, v27);
      goto LABEL_16;
    }
LABEL_30:
    abort();
  }
  v28 = 0;
  v29 = 0;
LABEL_16:
  v24[2] = 0;
  v24[3] = 0;
  v24[4] = v28;
  v24[5] = v29;
  v24[6] = v29;
  *v24 = &off_24C0D88E0;
  v24[1] = 0;
  v24[8] = a1;
  v24[9] = v23;
  v42 = *(_DWORD *)a6;
  v30 = v14 + *(_QWORD *)(a7 + 8);
  v43 = v24;
  v31 = (_QWORD *)operator new();
  v32 = *(_QWORD *)(a7 + 16);
  *v31 = &off_24C0D8928;
  v31[1] = 0;
  v31[2] = v32;
  v31[3] = a1;
  v31[4] = v30;
  v40 = *(_DWORD *)a7;
  v41 = v31;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(a1 + 176, &v48, &v46, &v44, (unsigned int *)&v50, &v42, &v40);
  v33 = v41;
  v41 = 0;
  if (v33)
    (*(void (**)(_QWORD *))(*v33 + 8))(v33);
  v34 = v43;
  v43 = 0;
  if (v34)
    (*(void (**)(_QWORD *))(*v34 + 8))(v34);
  size = v50.__r_.__value_.__l.__size_;
  v50.__r_.__value_.__l.__size_ = 0;
  if (size)
    (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  v36 = v45;
  v45 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = v47;
  v47 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = v49;
  v49 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  return a1;
}

void webm::SimpleTagParser::~SimpleTagParser(webm::SimpleTagParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D87F0;
  *((_QWORD *)this + 22) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 34);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
    operator delete(v3);
  webm::SimpleTag::~SimpleTag((webm::SimpleTagParser *)((char *)this + 8));
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D87F0;
  *((_QWORD *)this + 22) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 34);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  *((_QWORD *)this + 32) = 0;
  if (v3)
    operator delete(v3);
  webm::SimpleTag::~SimpleTag((webm::SimpleTagParser *)((char *)this + 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::SimpleTag>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 172))
  {
    if (*(_BYTE *)(a1 + 173))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 168) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 176, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 176, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 172) = 1;
    if (*(_BYTE *)(a1 + 173))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 168) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 168);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 173) = 1;
    if (*(_DWORD *)(a1 + 168) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::SimpleTag>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D87F0;
  a1[22] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[34];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[32];
  a1[32] = 0;
  if (v3)
    operator delete(v3);
  webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(a1 + 1));
  return a1;
}

void webm::MasterValueParser<webm::SimpleTag>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D87F0;
  a1[22] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[34];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[32];
  a1[32] = 0;
  if (v3)
    operator delete(v3);
  webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(a1 + 1));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::ByteParser<std::string>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *a4 = 0;
  v5 = webm::ByteParser<std::string>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 64) + 168) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a1 + 31) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return v5;
}

void webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::BoolParser,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::BoolParser,BOOL>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::BoolParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::BoolParser,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::BoolParser,BOOL>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::BoolParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unsigned int v11;
  int v12;
  BOOL v13;
  _BYTE *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v5 = *(_DWORD *)(a1 + 12);
  *a4 = 0;
  if (v5 <= 8)
  {
    if (v5)
    {
      v7 = 0;
      v11 = v5 + 1;
      while (1)
      {
        v16 = 0;
        v17 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v16, &v17);
        if ((_DWORD)result)
          break;
        v6 = *a4 + 1;
        *a4 = v6;
        v7 = v16 | (v7 << 8);
        if ((int)--v11 <= 1)
          goto LABEL_9;
      }
      v6 = *a4;
    }
    else
    {
      LODWORD(v6) = 0;
      v7 = 0;
LABEL_9:
      result = 0;
    }
  }
  else
  {
    LODWORD(v6) = 0;
    v7 = 0;
    result = 4294966270;
  }
  v12 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v12 - v6;
  if (v7)
    v13 = v12 == (_DWORD)v6;
  else
    v13 = 1;
  if (!v13 || v7 > 1)
    return 4294966266;
  if (*(int *)(a1 + 16) >= 1)
    *(_BYTE *)(a1 + 8) = v7 == 1;
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 168) == 1
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    {
      return 0;
    }
    else
    {
      result = 0;
      v15 = *(_BYTE **)(a1 + 32);
      *v15 = *(_BYTE *)(a1 + 8);
      v15[1] = 1;
    }
  }
  return result;
}

uint64_t webm::BoolParser::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  result = 0;
  *(_DWORD *)(a1 + 12) = v2;
  *(_DWORD *)(a1 + 16) = v2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a1 + 9);
  return result;
}

_QWORD *webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::Feed(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = result;
  *a4 = 0;
  v5 = result + 1;
  v6 = result[7];
  if (v6 != result[2] - result[1])
  {
    do
    {
      v14 = 0;
      v9 = v4[1];
      v10 = v4[2];
      if (v9 == v10)
      {
        __break(1u);
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, v10 - (v9 + v6), v9 + v6, &v14);
      v11 = v14;
      *a4 += v14;
      v6 = v4[7] + v11;
      v4[7] = v6;
    }
    while ((_DWORD)result == -1);
    if ((_DWORD)result)
      return result;
  }
  if (*(_DWORD *)(v4[8] + 168) == 1)
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 48))(v4) & 1) != 0)
    return 0;
  v12 = v4[9];
  v13 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v13;
    operator delete(v13);
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
  }
  result = 0;
  *(_OWORD *)v12 = *(_OWORD *)(v4 + 1);
  *(_QWORD *)(v12 + 16) = v4[3];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *(_BYTE *)(v12 + 24) = 1;
  return result;
}

_QWORD *webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::RecursiveParser<webm::SimpleTagParser>,webm::MasterValueParser<webm::SimpleTag>::RecursiveChildFactory<webm::SimpleTagParser>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::RecursiveParser<webm::SimpleTagParser>*)#1}>::~ChildParser(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C0D8970;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::RecursiveParser<webm::SimpleTagParser>,webm::MasterValueParser<webm::SimpleTag>::RecursiveChildFactory<webm::SimpleTagParser>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::RecursiveParser<webm::SimpleTagParser>*)#1}>::~ChildParser(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C0D8970;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

_OWORD *webm::MasterValueParser<webm::SimpleTag>::ChildParser<webm::RecursiveParser<webm::SimpleTagParser>,webm::MasterValueParser<webm::SimpleTag>::RecursiveChildFactory<webm::SimpleTagParser>::BuildParser(webm::MasterValueParser<webm::SimpleTag>*,webm::SimpleTag*)::{lambda(webm::RecursiveParser<webm::SimpleTagParser>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _OWORD *result;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *a4 = 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 24) + 168) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return (_OWORD *)v5;
  }
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_BYTE **)v7;
  result = *(_OWORD **)(v7 + 8);
  if ((_OWORD *)((char *)result - *(_QWORD *)v7) == (_OWORD *)168)
  {
    if (v8 == (_BYTE *)result)
      goto LABEL_14;
    if (!v8[160])
    {
      do
        webm::SimpleTag::~SimpleTag((webm::SimpleTag *)((char *)result - 168));
      while (result != (_OWORD *)v8);
      *(_QWORD *)(v7 + 8) = v8;
      v7 = *(_QWORD *)(a1 + 32);
      result = *(_OWORD **)(v7 + 8);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (__int128 *)(v9 + 8);
  if ((unint64_t)result >= *(_QWORD *)(v7 + 16))
  {
    *(_QWORD *)(v7 + 8) = std::vector<webm::Element<webm::SimpleTag>>::__emplace_back_slow_path<webm::SimpleTag,BOOL>((void **)v7, (uint64_t)v10, 1);
    return (_OWORD *)v5;
  }
  if (result)
  {
    v11 = *v10;
    *((_QWORD *)result + 2) = *(_QWORD *)(v9 + 24);
    *result = v11;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)v10 = 0;
    *((_BYTE *)result + 24) = *(_BYTE *)(v9 + 32);
    v12 = *(_OWORD *)(v9 + 40);
    *((_QWORD *)result + 6) = *(_QWORD *)(v9 + 56);
    result[2] = v12;
    *(_QWORD *)(v9 + 48) = 0;
    *(_QWORD *)(v9 + 56) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *((_BYTE *)result + 56) = *(_BYTE *)(v9 + 64);
    *((_WORD *)result + 32) = *(_WORD *)(v9 + 72);
    v13 = *(_OWORD *)(v9 + 80);
    *((_QWORD *)result + 11) = *(_QWORD *)(v9 + 96);
    *(_OWORD *)((char *)result + 72) = v13;
    *(_QWORD *)(v9 + 88) = 0;
    *(_QWORD *)(v9 + 96) = 0;
    *(_QWORD *)(v9 + 80) = 0;
    *((_BYTE *)result + 96) = *(_BYTE *)(v9 + 104);
    *((_QWORD *)result + 14) = 0;
    *((_QWORD *)result + 15) = 0;
    *((_QWORD *)result + 13) = 0;
    *(_OWORD *)((char *)result + 104) = *(_OWORD *)(v9 + 112);
    *((_QWORD *)result + 15) = *(_QWORD *)(v9 + 128);
    *(_QWORD *)(v9 + 120) = 0;
    *(_QWORD *)(v9 + 128) = 0;
    *(_QWORD *)(v9 + 112) = 0;
    *((_BYTE *)result + 128) = *(_BYTE *)(v9 + 136);
    *((_QWORD *)result + 18) = 0;
    *((_QWORD *)result + 19) = 0;
    *((_QWORD *)result + 17) = 0;
    *(_OWORD *)((char *)result + 136) = *(_OWORD *)(v9 + 144);
    *((_QWORD *)result + 19) = *(_QWORD *)(v9 + 160);
    *(_QWORD *)(v9 + 144) = 0;
    *(_QWORD *)(v9 + 152) = 0;
    *(_QWORD *)(v9 + 160) = 0;
    *((_BYTE *)result + 160) = 1;
    *(_QWORD *)(v7 + 8) = (char *)result + 168;
    return (_OWORD *)v5;
  }
LABEL_14:
  __break(1u);
  return result;
}

uint64_t webm::RecursiveParser<webm::SimpleTagParser>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if (!*(_QWORD *)(a1 + 16))
    return 4294966265;
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v7 = operator new();
    v8 = *(_QWORD *)(a1 + 16) - 1;
    v17 = xmmword_208F52250;
    v18 = xmmword_208F52240;
    v15 = xmmword_208F52270;
    v16 = xmmword_208F52260;
    v14 = xmmword_208F52280;
    v11 = 26568;
    v12 = 136;
    v13 = v8;
    v6 = webm::MasterValueParser<webm::SimpleTag>::MasterValueParser<webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>,webm::MasterValueParser<webm::SimpleTag>::RecursiveChildFactory<webm::SimpleTagParser>>(v7, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15, (uint64_t)&v14, (uint64_t)&v11);
    *(_QWORD *)v6 = &off_24C0D8790;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v6 = *(_QWORD *)(a1 + 8);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2, a3);
}

uint64_t webm::RecursiveParser<webm::SimpleTagParser>::InitAfterSeek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v7 = operator new();
    v8 = *(_QWORD *)(a1 + 16) - 1;
    v17 = xmmword_208F52250;
    v18 = xmmword_208F52240;
    v15 = xmmword_208F52270;
    v16 = xmmword_208F52260;
    v14 = xmmword_208F52280;
    v11 = 26568;
    v12 = 136;
    v13 = v8;
    v6 = webm::MasterValueParser<webm::SimpleTag>::MasterValueParser<webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::SimpleTag>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>,webm::MasterValueParser<webm::SimpleTag>::RecursiveChildFactory<webm::SimpleTagParser>>(v7, (uint64_t)&v18, (uint64_t)&v17, (uint64_t)&v16, (uint64_t)&v15, (uint64_t)&v14, (uint64_t)&v11);
    *(_QWORD *)v6 = &off_24C0D8790;
    v9 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      v6 = *(_QWORD *)(a1 + 8);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2, a3);
}

_QWORD *webm::RecursiveParser<webm::SimpleTagParser>::~RecursiveParser(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C0D8970;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void webm::RecursiveParser<webm::SimpleTagParser>::~RecursiveParser(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_24C0D8970;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::RecursiveParser<webm::SimpleTagParser>::Feed(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

void webm::SimpleTag::~SimpleTag(webm::SimpleTag *this)
{
  char *v2;
  char *v3;
  char *v4;
  void *v5;

  v2 = (char *)*((_QWORD *)this + 17);
  if (v2)
  {
    v3 = (char *)*((_QWORD *)this + 18);
    v4 = v2;
    if (v3 != v2)
    {
      do
        webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(v3 - 168));
      while (v3 != v2);
      v4 = (char *)*((_QWORD *)this + 17);
    }
    *((_QWORD *)this + 18) = v2;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 95) < 0)
  {
    operator delete(*((void **)this + 9));
    if ((*((char *)this + 55) & 0x80000000) == 0)
    {
LABEL_10:
      if ((*((char *)this + 23) & 0x80000000) == 0)
        return;
LABEL_14:
      operator delete(*(void **)this);
      return;
    }
  }
  else if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    goto LABEL_10;
  }
  operator delete(*((void **)this + 4));
  if (*((char *)this + 23) < 0)
    goto LABEL_14;
}

char *std::vector<webm::Element<webm::SimpleTag>>::__emplace_back_slow_path<webm::SimpleTag,BOOL>(void **a1, uint64_t a2, char a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  char v21;
  __int128 v22;
  __int128 v23;
  char v24;
  uint64_t v25;
  char *v26;

  v3 = 0xCF3CF3CF3CF3CF3DLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x186186186186186)
    abort();
  if (0x9E79E79E79E79E7ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x9E79E79E79E79E7ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xCF3CF3CF3CF3CF3DLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0xC30C30C30C30C3)
    v6 = 0x186186186186186;
  else
    v6 = v4;
  if (!v6)
  {
    __break(1u);
LABEL_21:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v6 > 0x186186186186186)
    goto LABEL_21;
  v9 = 168 * v6;
  v10 = (char *)operator new(168 * v6);
  v11 = &v10[168 * v3];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  v12 = &v10[v9];
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11[24] = *(_BYTE *)(a2 + 24);
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v11[56] = *(_BYTE *)(a2 + 56);
  *((_WORD *)v11 + 32) = *(_WORD *)(a2 + 64);
  v13 = *(_OWORD *)(a2 + 72);
  *((_QWORD *)v11 + 11) = *(_QWORD *)(a2 + 88);
  *(_OWORD *)(v11 + 72) = v13;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v11[96] = *(_BYTE *)(a2 + 96);
  *(_OWORD *)(v11 + 104) = *(_OWORD *)(a2 + 104);
  *((_QWORD *)v11 + 15) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v11[128] = *(_BYTE *)(a2 + 128);
  *(_OWORD *)(v11 + 136) = *(_OWORD *)(a2 + 136);
  *((_QWORD *)v11 + 19) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  v11[160] = a3;
  v14 = v11 + 168;
  v15 = (char *)*a1;
  v16 = (char *)a1[1];
  if (v16 == *a1)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v16)
      return v14;
    goto LABEL_15;
  }
  v17 = 0;
  do
  {
    v18 = &v16[v17];
    v19 = *(_OWORD *)&v16[v17 - 168];
    v20 = &v11[v17];
    *((_QWORD *)v20 - 19) = *(_QWORD *)&v16[v17 - 152];
    *(_OWORD *)(v20 - 168) = v19;
    *((_QWORD *)v18 - 20) = 0;
    *((_QWORD *)v18 - 19) = 0;
    v21 = v16[v17 - 144];
    *((_QWORD *)v18 - 21) = 0;
    *(v20 - 144) = v21;
    v22 = *(_OWORD *)&v16[v17 - 136];
    *((_QWORD *)v20 - 15) = *(_QWORD *)&v16[v17 - 120];
    *(_OWORD *)(v20 - 136) = v22;
    *((_QWORD *)v18 - 16) = 0;
    *((_QWORD *)v18 - 15) = 0;
    *((_QWORD *)v18 - 17) = 0;
    *(v20 - 112) = v16[v17 - 112];
    *((_WORD *)v20 - 52) = *(_WORD *)&v16[v17 - 104];
    v23 = *(_OWORD *)&v16[v17 - 96];
    *((_QWORD *)v20 - 10) = *(_QWORD *)&v16[v17 - 80];
    *((_OWORD *)v20 - 6) = v23;
    *((_QWORD *)v18 - 11) = 0;
    *((_QWORD *)v18 - 10) = 0;
    *((_QWORD *)v18 - 12) = 0;
    v24 = v16[v17 - 72];
    *((_OWORD *)v20 - 4) = *(_OWORD *)&v16[v17 - 64];
    v25 = *(_QWORD *)&v16[v17 - 48];
    *(v20 - 72) = v24;
    *((_QWORD *)v20 - 6) = v25;
    *((_QWORD *)v18 - 7) = 0;
    *((_QWORD *)v18 - 6) = 0;
    *((_QWORD *)v18 - 8) = 0;
    *(v20 - 40) = v16[v17 - 40];
    *((_OWORD *)v20 - 2) = *(_OWORD *)&v16[v17 - 32];
    *((_QWORD *)v20 - 2) = *(_QWORD *)&v16[v17 - 16];
    *((_QWORD *)v18 - 4) = 0;
    *((_QWORD *)v18 - 3) = 0;
    *((_QWORD *)v18 - 2) = 0;
    *(v20 - 8) = v16[v17 - 8];
    v17 -= 168;
  }
  while (&v16[v17] != v15);
  v16 = (char *)*a1;
  v26 = (char *)a1[1];
  *a1 = &v11[v17];
  a1[1] = v14;
  a1[2] = v12;
  while (v26 != v16)
    webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(v26 - 168));
  if (v16)
LABEL_15:
    operator delete(v16);
  return v14;
}

uint64_t webm::SimpleTag::operator=(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void *v9;
  void **v10;
  char *v11;
  char *v12;
  void *v13;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v5 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*v5);
  v6 = a2[2];
  *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 6);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 55) = 0;
  *((_BYTE *)a2 + 32) = 0;
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_WORD *)(a1 + 64) = *((_WORD *)a2 + 32);
  v7 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v7);
  v8 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v9 = *(void **)(a1 + 104);
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  if (v9)
  {
    *(_QWORD *)(a1 + 112) = v9;
    operator delete(v9);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
  }
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)a2 + 104);
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  v10 = (void **)(a1 + 136);
  v11 = *(char **)(a1 + 136);
  *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
  if (v11)
  {
    v12 = *(char **)(a1 + 144);
    v13 = v11;
    if (v12 != v11)
    {
      do
        webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(v12 - 168));
      while (v12 != v11);
      v13 = *v10;
    }
    *(_QWORD *)(a1 + 144) = v11;
    operator delete(v13);
    *v10 = 0;
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_QWORD *)(a1 + 152) = *((_QWORD *)a2 + 19);
  *((_QWORD *)a2 + 17) = 0;
  *((_QWORD *)a2 + 18) = 0;
  *((_QWORD *)a2 + 19) = 0;
  return a1;
}

uint64_t webm::MasterValueParser<webm::Tag>::~MasterValueParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  _QWORD *v9;
  uint64_t v10;

  *(_QWORD *)a1 = &off_24C0D8538;
  *(_QWORD *)(a1 + 120) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 216);
  if (v2)
  {
    do
    {
      v9 = (_QWORD *)*v2;
      v10 = v2[3];
      v2[3] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      operator delete(v2);
      v2 = v9;
    }
    while (v9);
  }
  v3 = *(void **)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(_QWORD *)(a1 + 88);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(void **)(a1 + 88);
    if (v5 != v4)
    {
      do
        webm::SimpleTag::~SimpleTag((webm::SimpleTag *)(v5 - 168));
      while (v5 != v4);
      v6 = *(void **)(a1 + 88);
    }
    *(_QWORD *)(a1 + 96) = v4;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 56);
  if (v7)
  {
    *(_QWORD *)(a1 + 64) = v7;
    operator delete(v7);
  }
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void webm::TracksParser::~TracksParser(webm::TracksParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 12);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::MasterValueParser<webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<webm::TrackType>,webm::TrackType>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::VideoParser,webm::Video>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::AudioParser,webm::Audio>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ContentEncodingsParser,webm::ContentEncodings>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  _QWORD *v20;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  const void *v51;
  size_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  size_t prime;
  unint64_t v102;
  int8x8_t v103;
  size_t v104;
  uint8x8_t v105;
  uint64_t v106;
  size_t v107;
  int8x8_t v108;
  uint8x8_t v109;
  uint64_t v110;
  uint64_t **v111;
  uint64_t *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  std::string::size_type v116;
  std::string::size_type size;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  size_t v128;
  unint64_t v129;
  int8x8_t v130;
  size_t v131;
  uint8x8_t v132;
  uint64_t v133;
  size_t v134;
  int8x8_t v135;
  uint8x8_t v136;
  uint64_t v137;
  uint64_t **v138;
  uint64_t *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  std::string::size_type v143;
  std::string::size_type v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  std::string::size_type v161;
  _QWORD *v162;
  _BYTE *v163;
  _BYTE *v164;
  size_t v165;
  char *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _QWORD *v174;
  std::string::size_type v175;
  size_t v176;
  unint64_t v177;
  int8x8_t v178;
  size_t v179;
  uint8x8_t v180;
  uint64_t v181;
  size_t v182;
  int8x8_t v183;
  uint8x8_t v184;
  uint64_t v185;
  uint64_t **v186;
  uint64_t *v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  std::string::size_type v191;
  std::string::size_type v192;
  _QWORD *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  std::string::size_type v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  std::string::size_type v218;
  uint64_t v219;
  uint64_t v220;
  std::string::size_type v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  std::string::size_type v225;
  uint64_t v226;
  _QWORD *v227;
  _BYTE *v228;
  _BYTE *v229;
  size_t v230;
  char *v231;
  char *v232;
  std::string::size_type v233;
  std::string::size_type v234;
  std::string::size_type v235;
  std::string::size_type v236;
  _QWORD *v237;
  _QWORD *v238;
  std::string::size_type v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  std::string::size_type v243;
  size_t v244;
  unint64_t v245;
  int8x8_t v246;
  size_t v247;
  uint8x8_t v248;
  uint64_t v249;
  size_t v250;
  int8x8_t v251;
  uint8x8_t v252;
  uint64_t v253;
  uint64_t **v254;
  uint64_t *v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  std::string::size_type v259;
  std::string::size_type v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v280;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  uint64_t v286;
  unsigned int v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  unsigned int v291;
  _QWORD *v292;
  unsigned int v293;
  uint64_t v294;
  unsigned int v295;
  uint64_t v296;
  unsigned int v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  unsigned int v301;
  uint64_t v302;
  unsigned int v303;
  uint64_t v304;
  unsigned int v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  uint64_t v312;
  unsigned int v313;
  uint64_t v314;
  std::string v315;
  unsigned int v316;
  uint64_t v317;
  unsigned int v318;
  uint64_t v319;
  unsigned int v320;
  uint64_t v321;
  unsigned int v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  unsigned int v326;
  uint64_t v327;
  unsigned int v328;
  uint64_t v329;
  unsigned int v330;
  uint64_t v331;
  unsigned int v332;
  uint64_t v333;
  unsigned int v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  unsigned int v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  unsigned int v344;
  uint64_t v345;
  unsigned int v346;
  uint64_t v347;
  unsigned int v348;
  uint64_t v349;
  unsigned int v350;
  uint64_t v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int v354;
  uint64_t v355;
  unsigned int v356;
  uint64_t v357;
  unsigned int v358;
  uint64_t v359;
  unsigned int v360;
  uint64_t v361;
  unsigned int v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  unsigned int v366;
  uint64_t v367;
  unsigned int v368;
  uint64_t v369;
  unsigned int v370;
  uint64_t v371;
  unsigned int v372;
  uint64_t v373;
  unsigned int v374;
  uint64_t v375;
  unsigned int v376;
  uint64_t v377;
  unsigned int v378;
  uint64_t v379;
  unsigned int v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  unsigned int v384;
  uint64_t v385;
  unsigned int v386;
  _QWORD *v387;
  unsigned int v388;
  _QWORD *v389;

  *(_QWORD *)a1 = &off_24C0D8A60;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0x1000000010001;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *((_BYTE *)&v315.__r_.__value_.__s + 23) = 3;
  *(_BYTE *)(a1 + 104) = 0;
  if (&v315 <= (std::string *)"eng" && (char *)v315.__r_.__value_.__r.__words + 3 > "eng")
  {
    __break(1u);
    goto LABEL_325;
  }
  LODWORD(v315.__r_.__value_.__l.__data_) = 6778469;
  *(std::string *)(a1 + 112) = v315;
  *(_BYTE *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_BYTE *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_BYTE *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 464) = 0;
  *(_BYTE *)(a1 + 472) = 0;
  *(_OWORD *)(a1 + 345) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 441) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 496) = 2;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 585) = 0u;
  *(_QWORD *)(a1 + 640) = 2;
  *(_QWORD *)(a1 + 656) = 2;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 857) = 0u;
  *(_OWORD *)(a1 + 969) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_QWORD *)(a1 + 992) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 1000) = 0;
  *(_QWORD *)(a1 + 1008) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 1024) = 1;
  *(_BYTE *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1040) = 0u;
  *(_BYTE *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1080) = 0;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_BYTE *)(a1 + 1088) = 0;
  *(_DWORD *)(a1 + 1096) = 0;
  v20 = (_QWORD *)(a1 + 8 + *(_QWORD *)(a2 + 8));
  v284 = a1 + 8;
  v27 = operator new();
  *(_QWORD *)(v27 + 16) = *v20;
  *(_DWORD *)(v27 + 24) = -1;
  *(_QWORD *)v27 = &off_24C0D8AC0;
  *(_QWORD *)(v27 + 32) = a1;
  *(_QWORD *)(v27 + 40) = v20;
  v313 = *(_DWORD *)a2;
  v314 = v27;
  v28 = (_QWORD *)(v284 + *(_QWORD *)(a3 + 8));
  v29 = operator new();
  *(_QWORD *)(v29 + 16) = *v28;
  *(_DWORD *)(v29 + 24) = -1;
  *(_QWORD *)v29 = &off_24C0D8AC0;
  *(_QWORD *)(v29 + 32) = a1;
  *(_QWORD *)(v29 + 40) = v28;
  v311 = *(_DWORD *)a3;
  v312 = v29;
  v30 = (_QWORD *)(v284 + *(_QWORD *)(a4 + 8));
  v31 = operator new();
  *(_QWORD *)(v31 + 16) = *v30;
  *(_DWORD *)(v31 + 24) = -1;
  *(_QWORD *)v31 = &off_24C0D8B08;
  *(_QWORD *)(v31 + 32) = a1;
  *(_QWORD *)(v31 + 40) = v30;
  v309 = *(_DWORD *)a4;
  v310 = v31;
  v32 = (_BYTE *)(v284 + *(_QWORD *)(a5 + 8));
  v33 = operator new();
  *(_BYTE *)(v33 + 9) = *v32;
  *(_DWORD *)(v33 + 12) = -1;
  *(_QWORD *)v33 = &off_24C0D8B50;
  *(_QWORD *)(v33 + 24) = a1;
  *(_QWORD *)(v33 + 32) = v32;
  v307 = *(_DWORD *)a5;
  v308 = v33;
  v34 = (_BYTE *)(v284 + *(_QWORD *)(a6 + 8));
  v35 = operator new();
  *(_BYTE *)(v35 + 9) = *v34;
  *(_DWORD *)(v35 + 12) = -1;
  *(_QWORD *)v35 = &off_24C0D8B50;
  *(_QWORD *)(v35 + 24) = a1;
  *(_QWORD *)(v35 + 32) = v34;
  v305 = *(_DWORD *)a6;
  v306 = v35;
  v36 = (_BYTE *)(v284 + *(_QWORD *)(a7 + 8));
  v37 = operator new();
  *(_BYTE *)(v37 + 9) = *v36;
  *(_DWORD *)(v37 + 12) = -1;
  *(_QWORD *)v37 = &off_24C0D8B50;
  *(_QWORD *)(v37 + 24) = a1;
  *(_QWORD *)(v37 + 32) = v36;
  v303 = *(_DWORD *)a7;
  v304 = v37;
  v38 = (_BYTE *)(v284 + *(_QWORD *)(a8 + 8));
  v39 = operator new();
  *(_BYTE *)(v39 + 9) = *v38;
  *(_DWORD *)(v39 + 12) = -1;
  *(_QWORD *)v39 = &off_24C0D8B50;
  *(_QWORD *)(v39 + 24) = a1;
  *(_QWORD *)(v39 + 32) = v38;
  v301 = *(_DWORD *)a8;
  v302 = v39;
  v40 = (_QWORD *)(v284 + *(_QWORD *)(a9 + 8));
  v41 = operator new();
  *(_QWORD *)(v41 + 16) = *v40;
  *(_DWORD *)(v41 + 24) = -1;
  *(_QWORD *)v41 = &off_24C0D8AC0;
  *(_QWORD *)(v41 + 32) = a1;
  *(_QWORD *)(v41 + 40) = v40;
  v299 = *(_DWORD *)a9;
  v300 = v41;
  v42 = v284 + *(_QWORD *)(a10 + 8);
  v43 = operator new();
  if (*(char *)(v42 + 23) < 0)
    std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)v42, *(_QWORD *)(v42 + 8));
  else
    v315 = *(std::string *)v42;
  *(_QWORD *)(v43 + 16) = 0;
  *(_QWORD *)(v43 + 24) = 0;
  *(std::string *)(v43 + 32) = v315;
  *(_QWORD *)v43 = off_24C0D8B98;
  *(_QWORD *)(v43 + 8) = 0;
  *(_QWORD *)(v43 + 64) = a1;
  *(_QWORD *)(v43 + 72) = v42;
  v297 = *(_DWORD *)a10;
  v44 = v284 + *(_QWORD *)(a11 + 8);
  v298 = v43;
  v45 = operator new();
  if (*(char *)(v44 + 23) < 0)
    std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)v44, *(_QWORD *)(v44 + 8));
  else
    v315 = *(std::string *)v44;
  *(_QWORD *)(v45 + 16) = 0;
  *(_QWORD *)(v45 + 24) = 0;
  *(std::string *)(v45 + 32) = v315;
  *(_QWORD *)v45 = off_24C0D8B98;
  *(_QWORD *)(v45 + 8) = 0;
  *(_QWORD *)(v45 + 64) = a1;
  *(_QWORD *)(v45 + 72) = v44;
  v295 = *(_DWORD *)a11;
  v46 = v284 + *(_QWORD *)(a12 + 8);
  v296 = v45;
  v47 = operator new();
  if (*(char *)(v46 + 23) < 0)
    std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)v46, *(_QWORD *)(v46 + 8));
  else
    v315 = *(std::string *)v46;
  *(_QWORD *)(v47 + 16) = 0;
  *(_QWORD *)(v47 + 24) = 0;
  *(std::string *)(v47 + 32) = v315;
  *(_QWORD *)v47 = off_24C0D8B98;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 64) = a1;
  *(_QWORD *)(v47 + 72) = v46;
  v293 = *(_DWORD *)a12;
  v48 = v284 + *(_QWORD *)(a13 + 8);
  v294 = v47;
  v49 = (_QWORD *)operator new();
  v51 = *(const void **)v48;
  v50 = *(_QWORD *)(v48 + 8);
  v52 = v50 - *(_QWORD *)v48;
  if (v50 == *(_QWORD *)v48)
  {
    v53 = 0;
    v54 = 0;
  }
  else
  {
    if ((v52 & 0x8000000000000000) != 0)
      goto LABEL_325;
    v53 = (char *)operator new(v50 - *(_QWORD *)v48);
    v54 = &v53[v52];
    memcpy(v53, v51, v52);
  }
  v49[2] = 0;
  v49[3] = 0;
  v49[4] = v53;
  v49[5] = v54;
  v49[6] = v54;
  *v49 = &off_24C0D8BE0;
  v49[1] = 0;
  v49[8] = a1;
  v49[9] = v48;
  v291 = *(_DWORD *)a13;
  v292 = v49;
  v55 = v284 + *(_QWORD *)(a14 + 8);
  v56 = operator new();
  if (*(char *)(v55 + 23) < 0)
    std::string::__init_copy_ctor_external(&v315, *(const std::string::value_type **)v55, *(_QWORD *)(v55 + 8));
  else
    v315 = *(std::string *)v55;
  *(_QWORD *)(v56 + 16) = 0;
  *(_QWORD *)(v56 + 24) = 0;
  *(std::string *)(v56 + 32) = v315;
  *(_QWORD *)v56 = off_24C0D8B98;
  *(_QWORD *)(v56 + 8) = 0;
  *(_QWORD *)(v56 + 64) = a1;
  *(_QWORD *)(v56 + 72) = v55;
  v289 = *(_DWORD *)a14;
  v57 = (_QWORD *)(v284 + *(_QWORD *)(a15 + 8));
  v290 = v56;
  v58 = operator new();
  *(_QWORD *)(v58 + 16) = *v57;
  *(_DWORD *)(v58 + 24) = -1;
  *(_QWORD *)v58 = &off_24C0D8AC0;
  *(_QWORD *)(v58 + 32) = a1;
  *(_QWORD *)(v58 + 40) = v57;
  v287 = *(_DWORD *)a15;
  v288 = v58;
  v59 = (_QWORD *)(v284 + *(_QWORD *)(a16 + 8));
  v60 = operator new();
  *(_QWORD *)(v60 + 16) = *v59;
  *(_DWORD *)(v60 + 24) = -1;
  *(_QWORD *)v60 = &off_24C0D8AC0;
  v283 = a1;
  *(_QWORD *)(v60 + 32) = a1;
  *(_QWORD *)(v60 + 40) = v59;
  v285 = *(_DWORD *)a16;
  v286 = v60;
  v280 = *(_QWORD *)(a17 + 8);
  v61 = operator new();
  *(_QWORD *)v61 = &off_24C0D8C88;
  *(_QWORD *)(v61 + 8) = 0;
  *(_BYTE *)(v61 + 16) = 0;
  *(_QWORD *)(v61 + 24) = 0;
  *(_BYTE *)(v61 + 32) = 0;
  *(_QWORD *)(v61 + 40) = 0;
  *(_BYTE *)(v61 + 48) = 0;
  *(_QWORD *)(v61 + 56) = 0;
  *(_BYTE *)(v61 + 64) = 0;
  *(_QWORD *)(v61 + 72) = 0;
  *(_BYTE *)(v61 + 80) = 0;
  *(_QWORD *)(v61 + 88) = 0;
  *(_BYTE *)(v61 + 96) = 0;
  *(_QWORD *)(v61 + 104) = 0;
  *(_BYTE *)(v61 + 112) = 0;
  *(_QWORD *)(v61 + 120) = 0;
  *(_BYTE *)(v61 + 128) = 0;
  *(_QWORD *)(v61 + 136) = 0;
  *(_BYTE *)(v61 + 144) = 0;
  *(_QWORD *)(v61 + 152) = 0;
  *(_BYTE *)(v61 + 160) = 0;
  *(_QWORD *)(v61 + 168) = 0;
  *(_BYTE *)(v61 + 176) = 0;
  *(_QWORD *)(v61 + 184) = 0;
  *(_BYTE *)(v61 + 192) = 0;
  *(_QWORD *)(v61 + 200) = 0;
  *(_BYTE *)(v61 + 208) = 0;
  *(_QWORD *)(v61 + 216) = 0;
  *(_BYTE *)(v61 + 224) = 0;
  *(_QWORD *)(v61 + 232) = 2;
  *(_BYTE *)(v61 + 240) = 0;
  *(_QWORD *)(v61 + 248) = 0;
  *(_BYTE *)(v61 + 256) = 0;
  *(_QWORD *)(v61 + 344) = 0;
  *(_BYTE *)(v61 + 352) = 0;
  *(_QWORD *)(v61 + 360) = 0;
  *(_BYTE *)(v61 + 368) = 0;
  *(_OWORD *)(v61 + 321) = 0u;
  *(_OWORD *)(v61 + 296) = 0u;
  *(_OWORD *)(v61 + 312) = 0u;
  *(_OWORD *)(v61 + 264) = 0u;
  *(_OWORD *)(v61 + 280) = 0u;
  *(_QWORD *)(v61 + 376) = 2;
  *(_BYTE *)(v61 + 384) = 0;
  *(_QWORD *)(v61 + 392) = 2;
  *(_BYTE *)(v61 + 400) = 0;
  *(_OWORD *)(v61 + 408) = 0u;
  *(_OWORD *)(v61 + 424) = 0u;
  *(_OWORD *)(v61 + 440) = 0u;
  *(_OWORD *)(v61 + 456) = 0u;
  *(_OWORD *)(v61 + 472) = 0u;
  *(_OWORD *)(v61 + 488) = 0u;
  *(_OWORD *)(v61 + 504) = 0u;
  *(_OWORD *)(v61 + 520) = 0u;
  *(_OWORD *)(v61 + 536) = 0u;
  *(_OWORD *)(v61 + 552) = 0u;
  *(_OWORD *)(v61 + 568) = 0u;
  *(_OWORD *)(v61 + 584) = 0u;
  *(_OWORD *)(v61 + 593) = 0u;
  *(_BYTE *)(v61 + 712) = 0;
  *(_OWORD *)(v61 + 680) = 0u;
  *(_OWORD *)(v61 + 696) = 0u;
  *(_OWORD *)(v61 + 648) = 0u;
  *(_OWORD *)(v61 + 664) = 0u;
  *(_OWORD *)(v61 + 616) = 0u;
  *(_OWORD *)(v61 + 632) = 0u;
  *(_DWORD *)(v61 + 720) = 0;
  v62 = operator new();
  *(_QWORD *)(v62 + 16) = *(_QWORD *)(v61 + 8);
  *(_DWORD *)(v62 + 24) = -1;
  *(_QWORD *)v62 = &off_24C0D8CE8;
  *(_QWORD *)(v62 + 32) = v61;
  *(_QWORD *)(v62 + 40) = v61 + 8;
  v342 = 154;
  v343 = v62;
  v63 = operator new();
  *(_QWORD *)(v63 + 16) = *(_QWORD *)(v61 + 24);
  *(_DWORD *)(v63 + 24) = -1;
  *(_QWORD *)v63 = &off_24C0D8D30;
  *(_QWORD *)(v63 + 32) = v61;
  *(_QWORD *)(v63 + 40) = v61 + 24;
  v340 = 21432;
  v341 = v63;
  v64 = operator new();
  *(_QWORD *)(v64 + 16) = *(_QWORD *)(v61 + 40);
  *(_DWORD *)(v64 + 24) = -1;
  *(_QWORD *)v64 = &off_24C0D8D78;
  *(_QWORD *)(v64 + 32) = v61;
  *(_QWORD *)(v64 + 40) = v61 + 40;
  v338 = 21440;
  v339 = v64;
  v65 = operator new();
  *(_QWORD *)(v65 + 16) = *(_QWORD *)(v61 + 56);
  *(_DWORD *)(v65 + 24) = -1;
  *(_QWORD *)v65 = &off_24C0D8D78;
  *(_QWORD *)(v65 + 32) = v61;
  *(_QWORD *)(v65 + 40) = v61 + 56;
  v336 = 176;
  v337 = v65;
  v66 = operator new();
  *(_QWORD *)(v66 + 16) = *(_QWORD *)(v61 + 72);
  *(_DWORD *)(v66 + 24) = -1;
  *(_QWORD *)v66 = &off_24C0D8D78;
  *(_QWORD *)(v66 + 32) = v61;
  *(_QWORD *)(v66 + 40) = v61 + 72;
  v334 = 186;
  v335 = v66;
  v67 = operator new();
  *(_QWORD *)(v67 + 16) = *(_QWORD *)(v61 + 88);
  *(_DWORD *)(v67 + 24) = -1;
  *(_QWORD *)v67 = &off_24C0D8D78;
  *(_QWORD *)(v67 + 32) = v61;
  *(_QWORD *)(v67 + 40) = v61 + 88;
  v332 = 21674;
  v333 = v67;
  v68 = operator new();
  *(_QWORD *)(v68 + 16) = *(_QWORD *)(v61 + 104);
  *(_DWORD *)(v68 + 24) = -1;
  *(_QWORD *)v68 = &off_24C0D8D78;
  *(_QWORD *)(v68 + 32) = v61;
  *(_QWORD *)(v68 + 40) = v61 + 104;
  v330 = 21691;
  v331 = v68;
  v69 = operator new();
  *(_QWORD *)(v69 + 16) = *(_QWORD *)(v61 + 120);
  *(_DWORD *)(v69 + 24) = -1;
  *(_QWORD *)v69 = &off_24C0D8D78;
  *(_QWORD *)(v69 + 32) = v61;
  *(_QWORD *)(v69 + 40) = v61 + 120;
  v328 = 21708;
  v329 = v69;
  v70 = operator new();
  *(_QWORD *)(v70 + 16) = *(_QWORD *)(v61 + 136);
  *(_DWORD *)(v70 + 24) = -1;
  *(_QWORD *)v70 = &off_24C0D8D78;
  *(_QWORD *)(v70 + 32) = v61;
  *(_QWORD *)(v70 + 40) = v61 + 136;
  v326 = 21725;
  v327 = v70;
  v71 = operator new();
  *(_QWORD *)(v71 + 16) = *(_QWORD *)(v61 + 152);
  *(_DWORD *)(v71 + 24) = -1;
  *(_QWORD *)v71 = &off_24C0D8DC0;
  *(_QWORD *)(v71 + 32) = v61;
  *(_QWORD *)(v71 + 40) = v61 + 152;
  v324 = 21680;
  v325 = v71;
  v72 = operator new();
  *(_QWORD *)(v72 + 16) = *(_QWORD *)(v61 + 168);
  *(_DWORD *)(v72 + 24) = -1;
  *(_QWORD *)v72 = &off_24C0D8DC0;
  *(_QWORD *)(v72 + 32) = v61;
  *(_QWORD *)(v72 + 40) = v61 + 168;
  v322 = 21690;
  v323 = v72;
  v73 = operator new();
  *(_QWORD *)(v73 + 16) = *(_QWORD *)(v61 + 184);
  *(_DWORD *)(v73 + 24) = -1;
  *(_QWORD *)v73 = &off_24C0D8E08;
  *(_QWORD *)(v73 + 32) = v61;
  *(_QWORD *)(v73 + 40) = v61 + 184;
  v320 = 21682;
  v321 = v73;
  v74 = operator new();
  *(_QWORD *)(v74 + 16) = *(_QWORD *)(v61 + 200);
  *(_DWORD *)(v74 + 24) = -1;
  *(_QWORD *)v74 = &off_24C0D8E50;
  *(_QWORD *)(v74 + 32) = v61;
  *(_QWORD *)(v74 + 40) = v61 + 200;
  v318 = 21683;
  v319 = v74;
  v75 = operator new();
  *(_QWORD *)(v75 + 16) = *(_QWORD *)(v61 + 216);
  *(_DWORD *)(v75 + 32) = -1;
  *(_QWORD *)v75 = &off_24C0D8E98;
  *(_QWORD *)(v75 + 40) = v61;
  *(_QWORD *)(v75 + 48) = v61 + 216;
  v316 = 2327523;
  v317 = v75;
  v76 = operator new();
  *(_QWORD *)v76 = &off_24C0D8F40;
  *(_QWORD *)(v76 + 8) = 2;
  *(_QWORD *)(v76 + 24) = 0;
  *(_BYTE *)(v76 + 16) = 0;
  *(_BYTE *)(v76 + 32) = 0;
  *(_QWORD *)(v76 + 40) = 0;
  *(_BYTE *)(v76 + 48) = 0;
  *(_QWORD *)(v76 + 56) = 0;
  *(_QWORD *)(v76 + 72) = 0;
  *(_BYTE *)(v76 + 64) = 0;
  *(_BYTE *)(v76 + 80) = 0;
  *(_QWORD *)(v76 + 88) = 0;
  *(_BYTE *)(v76 + 96) = 0;
  *(_QWORD *)(v76 + 104) = 0;
  *(_QWORD *)(v76 + 120) = 0;
  *(_BYTE *)(v76 + 112) = 0;
  *(_BYTE *)(v76 + 128) = 0;
  *(_QWORD *)(v76 + 136) = 0;
  *(_BYTE *)(v76 + 144) = 0;
  *(_QWORD *)(v76 + 152) = 2;
  *(_QWORD *)(v76 + 168) = 2;
  *(_BYTE *)(v76 + 160) = 0;
  *(_BYTE *)(v76 + 176) = 0;
  *(_QWORD *)(v76 + 184) = 0;
  *(_BYTE *)(v76 + 192) = 0;
  *(_QWORD *)(v76 + 200) = 0;
  *(_OWORD *)(v76 + 216) = 0u;
  *(_BYTE *)(v76 + 208) = 0;
  *(_BYTE *)(v76 + 376) = 0;
  *(_OWORD *)(v76 + 344) = 0u;
  *(_OWORD *)(v76 + 360) = 0u;
  *(_OWORD *)(v76 + 312) = 0u;
  *(_OWORD *)(v76 + 328) = 0u;
  *(_OWORD *)(v76 + 280) = 0u;
  *(_OWORD *)(v76 + 296) = 0u;
  *(_OWORD *)(v76 + 264) = 0u;
  *(_OWORD *)(v76 + 248) = 0u;
  *(_OWORD *)(v76 + 232) = 0u;
  *(_DWORD *)(v76 + 384) = 0;
  v77 = operator new();
  *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 + 8);
  *(_DWORD *)(v77 + 24) = -1;
  *(_QWORD *)v77 = &off_24C0D8FA0;
  *(_QWORD *)(v77 + 32) = v76;
  *(_QWORD *)(v77 + 40) = v76 + 8;
  v368 = 21937;
  v369 = v77;
  v78 = operator new();
  *(_QWORD *)(v78 + 16) = *(_QWORD *)(v76 + 24);
  *(_DWORD *)(v78 + 24) = -1;
  *(_QWORD *)v78 = &off_24C0D8FE8;
  *(_QWORD *)(v78 + 32) = v76;
  *(_QWORD *)(v78 + 40) = v76 + 24;
  v366 = 21938;
  v367 = v78;
  v79 = operator new();
  *(_QWORD *)(v79 + 16) = *(_QWORD *)(v76 + 40);
  *(_DWORD *)(v79 + 24) = -1;
  *(_QWORD *)v79 = &off_24C0D8FE8;
  *(_QWORD *)(v79 + 32) = v76;
  *(_QWORD *)(v79 + 40) = v76 + 40;
  v364 = 21939;
  v365 = v79;
  v80 = operator new();
  *(_QWORD *)(v80 + 16) = *(_QWORD *)(v76 + 56);
  *(_DWORD *)(v80 + 24) = -1;
  *(_QWORD *)v80 = &off_24C0D8FE8;
  *(_QWORD *)(v80 + 32) = v76;
  *(_QWORD *)(v80 + 40) = v76 + 56;
  v362 = 21940;
  v363 = v80;
  v81 = operator new();
  *(_QWORD *)(v81 + 16) = *(_QWORD *)(v76 + 72);
  *(_DWORD *)(v81 + 24) = -1;
  *(_QWORD *)v81 = &off_24C0D8FE8;
  *(_QWORD *)(v81 + 32) = v76;
  *(_QWORD *)(v81 + 40) = v76 + 72;
  v360 = 21941;
  v361 = v81;
  v82 = operator new();
  *(_QWORD *)(v82 + 16) = *(_QWORD *)(v76 + 88);
  *(_DWORD *)(v82 + 24) = -1;
  *(_QWORD *)v82 = &off_24C0D8FE8;
  *(_QWORD *)(v82 + 32) = v76;
  *(_QWORD *)(v82 + 40) = v76 + 88;
  v358 = 21942;
  v359 = v82;
  v83 = operator new();
  *(_QWORD *)(v83 + 16) = *(_QWORD *)(v76 + 104);
  *(_DWORD *)(v83 + 24) = -1;
  *(_QWORD *)v83 = &off_24C0D8FE8;
  *(_QWORD *)(v83 + 32) = v76;
  *(_QWORD *)(v83 + 40) = v76 + 104;
  v356 = 21943;
  v357 = v83;
  v84 = operator new();
  *(_QWORD *)(v84 + 16) = *(_QWORD *)(v76 + 120);
  *(_DWORD *)(v84 + 24) = -1;
  *(_QWORD *)v84 = &off_24C0D8FE8;
  *(_QWORD *)(v84 + 32) = v76;
  *(_QWORD *)(v84 + 40) = v76 + 120;
  v354 = 21944;
  v355 = v84;
  v85 = operator new();
  *(_QWORD *)(v85 + 16) = *(_QWORD *)(v76 + 136);
  *(_DWORD *)(v85 + 24) = -1;
  *(_QWORD *)v85 = &off_24C0D9030;
  *(_QWORD *)(v85 + 32) = v76;
  *(_QWORD *)(v85 + 40) = v76 + 136;
  v352 = 21945;
  v353 = v85;
  v86 = operator new();
  *(_QWORD *)(v86 + 16) = *(_QWORD *)(v76 + 152);
  *(_DWORD *)(v86 + 24) = -1;
  *(_QWORD *)v86 = &off_24C0D9078;
  *(_QWORD *)(v86 + 32) = v76;
  *(_QWORD *)(v86 + 40) = v76 + 152;
  v350 = 21946;
  v351 = v86;
  v87 = operator new();
  *(_QWORD *)(v87 + 16) = *(_QWORD *)(v76 + 168);
  *(_DWORD *)(v87 + 24) = -1;
  *(_QWORD *)v87 = &off_24C0D90C0;
  *(_QWORD *)(v87 + 32) = v76;
  *(_QWORD *)(v87 + 40) = v76 + 168;
  v348 = 21947;
  v349 = v87;
  v88 = operator new();
  *(_QWORD *)(v88 + 16) = *(_QWORD *)(v76 + 184);
  *(_DWORD *)(v88 + 24) = -1;
  *(_QWORD *)v88 = &off_24C0D8FE8;
  *(_QWORD *)(v88 + 32) = v76;
  *(_QWORD *)(v88 + 40) = v76 + 184;
  v346 = 21948;
  v347 = v88;
  v89 = operator new();
  *(_QWORD *)(v89 + 16) = *(_QWORD *)(v76 + 200);
  *(_DWORD *)(v89 + 24) = -1;
  *(_QWORD *)v89 = &off_24C0D8FE8;
  *(_QWORD *)(v89 + 32) = v76;
  *(_QWORD *)(v89 + 40) = v76 + 200;
  v344 = 21949;
  v345 = v89;
  v90 = operator new();
  *(_QWORD *)v90 = &off_24C0D9168;
  *(_QWORD *)(v90 + 8) = 0;
  *(_BYTE *)(v90 + 16) = 0;
  *(_QWORD *)(v90 + 24) = 0;
  *(_BYTE *)(v90 + 32) = 0;
  *(_QWORD *)(v90 + 40) = 0;
  *(_BYTE *)(v90 + 48) = 0;
  *(_QWORD *)(v90 + 56) = 0;
  *(_BYTE *)(v90 + 64) = 0;
  *(_QWORD *)(v90 + 72) = 0;
  *(_BYTE *)(v90 + 80) = 0;
  *(_QWORD *)(v90 + 88) = 0;
  *(_BYTE *)(v90 + 96) = 0;
  *(_QWORD *)(v90 + 104) = 0;
  *(_BYTE *)(v90 + 112) = 0;
  *(_QWORD *)(v90 + 120) = 0;
  *(_BYTE *)(v90 + 128) = 0;
  *(_QWORD *)(v90 + 136) = 0;
  *(_BYTE *)(v90 + 144) = 0;
  *(_QWORD *)(v90 + 152) = 0;
  *(_BYTE *)(v90 + 160) = 0;
  *(_DWORD *)(v90 + 168) = 0;
  v91 = operator new();
  *(_QWORD *)(v91 + 16) = *(_QWORD *)(v90 + 8);
  *(_DWORD *)(v91 + 32) = -1;
  *(_QWORD *)v91 = &off_24C0D91C8;
  *(_QWORD *)(v91 + 40) = v90;
  *(_QWORD *)(v91 + 48) = v90 + 8;
  v388 = 21969;
  v389 = (_QWORD *)v91;
  v92 = operator new();
  *(_QWORD *)(v92 + 16) = *(_QWORD *)(v90 + 24);
  *(_DWORD *)(v92 + 32) = -1;
  *(_QWORD *)v92 = &off_24C0D91C8;
  *(_QWORD *)(v92 + 40) = v90;
  *(_QWORD *)(v92 + 48) = v90 + 24;
  v386 = 21970;
  v387 = (_QWORD *)v92;
  v93 = operator new();
  *(_QWORD *)(v93 + 16) = *(_QWORD *)(v90 + 40);
  *(_DWORD *)(v93 + 32) = -1;
  *(_QWORD *)v93 = &off_24C0D91C8;
  *(_QWORD *)(v93 + 40) = v90;
  *(_QWORD *)(v93 + 48) = v90 + 40;
  v384 = 21971;
  v385 = v93;
  v94 = operator new();
  *(_QWORD *)(v94 + 16) = *(_QWORD *)(v90 + 56);
  *(_DWORD *)(v94 + 32) = -1;
  *(_QWORD *)v94 = &off_24C0D91C8;
  *(_QWORD *)(v94 + 40) = v90;
  *(_QWORD *)(v94 + 48) = v90 + 56;
  v382 = 21972;
  v383 = v94;
  v95 = operator new();
  *(_QWORD *)(v95 + 16) = *(_QWORD *)(v90 + 72);
  *(_DWORD *)(v95 + 32) = -1;
  *(_QWORD *)v95 = &off_24C0D91C8;
  *(_QWORD *)(v95 + 40) = v90;
  *(_QWORD *)(v95 + 48) = v90 + 72;
  v380 = 21973;
  v381 = v95;
  v96 = operator new();
  *(_QWORD *)(v96 + 16) = *(_QWORD *)(v90 + 88);
  *(_DWORD *)(v96 + 32) = -1;
  *(_QWORD *)v96 = &off_24C0D91C8;
  *(_QWORD *)(v96 + 40) = v90;
  *(_QWORD *)(v96 + 48) = v90 + 88;
  v378 = 21974;
  v379 = v96;
  v97 = operator new();
  *(_QWORD *)(v97 + 16) = *(_QWORD *)(v90 + 104);
  *(_DWORD *)(v97 + 32) = -1;
  *(_QWORD *)v97 = &off_24C0D91C8;
  *(_QWORD *)(v97 + 40) = v90;
  *(_QWORD *)(v97 + 48) = v90 + 104;
  v376 = 21975;
  v377 = v97;
  v98 = operator new();
  *(_QWORD *)(v98 + 16) = *(_QWORD *)(v90 + 120);
  *(_DWORD *)(v98 + 32) = -1;
  *(_QWORD *)v98 = &off_24C0D91C8;
  *(_QWORD *)(v98 + 40) = v90;
  *(_QWORD *)(v98 + 48) = v90 + 120;
  v374 = 21976;
  v375 = v98;
  v99 = operator new();
  *(_QWORD *)(v99 + 16) = *(_QWORD *)(v90 + 136);
  *(_DWORD *)(v99 + 32) = -1;
  *(_QWORD *)v99 = &off_24C0D91C8;
  *(_QWORD *)(v99 + 40) = v90;
  *(_QWORD *)(v99 + 48) = v90 + 136;
  v372 = 21977;
  v373 = v99;
  v100 = operator new();
  *(_QWORD *)(v100 + 16) = *(_QWORD *)(v90 + 152);
  *(_DWORD *)(v100 + 32) = -1;
  *(_QWORD *)v100 = &off_24C0D91C8;
  *(_QWORD *)(v100 + 40) = v90;
  *(_QWORD *)(v100 + 48) = v90 + 152;
  v370 = 21978;
  v371 = v100;
  *(_QWORD *)(v90 + 176) = &off_24C0D70E8;
  *(_QWORD *)(v90 + 184) = &unk_24C0D7088;
  *(_DWORD *)(v90 + 192) = -1;
  *(_QWORD *)(v90 + 200) = &unk_24C0D99A8;
  *(_QWORD *)(v90 + 208) = &unk_24C0D9A60;
  *(_DWORD *)(v90 + 216) = -1;
  *(_OWORD *)(v90 + 256) = 0u;
  *(_OWORD *)(v90 + 272) = 0u;
  *(_DWORD *)(v90 + 288) = 1065353216;
  *(_QWORD *)(v90 + 296) = &unk_24C0D9A18;
  *(_QWORD *)(v90 + 336) = &unk_24C0D99D0;
  *(_DWORD *)(v90 + 360) = 0;
  *(_BYTE *)(v90 + 408) = 0;
  prime = std::__next_prime(0xBuLL);
  v102 = prime;
  v103 = *(int8x8_t *)(v90 + 264);
  if (prime > *(_QWORD *)&v103)
    goto LABEL_20;
  if (prime >= *(_QWORD *)&v103)
    goto LABEL_33;
  v104 = vcvtps_u32_f32((float)*(unint64_t *)(v90 + 280) / *(float *)(v90 + 288));
  if (*(_QWORD *)&v103 >= 3uLL)
  {
    v105 = (uint8x8_t)vcnt_s8(v103);
    v105.i16[0] = vaddlv_u8(v105);
    if (v105.u32[0] <= 1uLL)
    {
      v106 = 1 << -(char)__clz(v104 - 1);
      if (v104 >= 2)
        v104 = v106;
      if (v102 <= v104)
        v102 = v104;
      if (v102 >= *(_QWORD *)&v103)
        goto LABEL_33;
LABEL_20:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>(v90 + 256, v102);
      goto LABEL_33;
    }
  }
  v107 = std::__next_prime(v104);
  if (v102 <= v107)
    v102 = v107;
  if (v102 < *(_QWORD *)&v103)
    goto LABEL_20;
LABEL_33:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v388, (uint64_t)&v388);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v386, (uint64_t)&v386);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v384, (uint64_t)&v384);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v382, (uint64_t)&v382);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v380, (uint64_t)&v380);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v378, (uint64_t)&v378);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v376, (uint64_t)&v376);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v374, (uint64_t)&v374);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v372, (uint64_t)&v372);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, &v370, (uint64_t)&v370);
  v108 = *(int8x8_t *)(v90 + 264);
  if (v108)
  {
    v109 = (uint8x8_t)vcnt_s8(v108);
    v109.i16[0] = vaddlv_u8(v109);
    if (v109.u32[0] > 1uLL)
    {
      v110 = 236;
      if (*(_QWORD *)&v108 <= 0xECuLL)
        v110 = 0xECu % *(_QWORD *)(v90 + 264);
    }
    else
    {
      v110 = (v108.i32[0] - 1) & 0xECLL;
    }
    v111 = *(uint64_t ***)(*(_QWORD *)(v90 + 256) + 8 * v110);
    if (v111)
    {
      v112 = *v111;
      if (v112)
      {
        if (v109.u32[0] < 2uLL)
        {
          v113 = *(_QWORD *)&v108 - 1;
          while (1)
          {
            v115 = v112[1];
            if (v115 == 236)
            {
              if (*((_DWORD *)v112 + 4) == 236)
                goto LABEL_55;
            }
            else if ((v115 & v113) != v110)
            {
              goto LABEL_53;
            }
            v112 = (uint64_t *)*v112;
            if (!v112)
              goto LABEL_53;
          }
        }
        do
        {
          v114 = v112[1];
          if (v114 == 236)
          {
            if (*((_DWORD *)v112 + 4) == 236)
              goto LABEL_55;
          }
          else
          {
            if (v114 >= *(_QWORD *)&v108)
              v114 %= *(_QWORD *)&v108;
            if (v114 != v110)
              break;
          }
          v112 = (uint64_t *)*v112;
        }
        while (v112);
      }
    }
  }
LABEL_53:
  v116 = operator new();
  *(_OWORD *)v116 = 0u;
  *(_OWORD *)(v116 + 16) = 0u;
  *(_QWORD *)v116 = &unk_24C0D9A88;
  *(_QWORD *)(v116 + 32) = 0;
  LODWORD(v315.__r_.__value_.__l.__data_) = 236;
  v315.__r_.__value_.__l.__size_ = v116;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v90 + 256, (unsigned int *)&v315, (uint64_t)&v315);
  size = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (size)
    (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
LABEL_55:
  v118 = v371;
  v371 = 0;
  if (v118)
    (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
  v119 = v373;
  v373 = 0;
  if (v119)
    (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  v120 = v375;
  v375 = 0;
  if (v120)
    (*(void (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
  v121 = v377;
  v377 = 0;
  if (v121)
    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
  v122 = v379;
  v379 = 0;
  if (v122)
    (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
  v123 = v381;
  v381 = 0;
  if (v123)
    (*(void (**)(uint64_t))(*(_QWORD *)v123 + 8))(v123);
  v124 = v383;
  v383 = 0;
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  v125 = v385;
  v385 = 0;
  if (v125)
    (*(void (**)(uint64_t))(*(_QWORD *)v125 + 8))(v125);
  v126 = v387;
  v387 = 0;
  if (v126)
    (*(void (**)(_QWORD *))(*v126 + 8))(v126);
  v127 = v389;
  v389 = 0;
  if (v127)
    (*(void (**)(_QWORD *))(*v127 + 8))(v127);
  *(_QWORD *)v90 = &off_24C0D9108;
  *(_QWORD *)(v90 + 416) = v76;
  *(_QWORD *)(v90 + 424) = v76 + 216;
  v388 = 21968;
  v389 = (_QWORD *)v90;
  *(_QWORD *)(v76 + 392) = &off_24C0D70E8;
  *(_QWORD *)(v76 + 400) = &unk_24C0D7088;
  *(_DWORD *)(v76 + 408) = -1;
  *(_QWORD *)(v76 + 416) = &unk_24C0D99A8;
  *(_QWORD *)(v76 + 424) = &unk_24C0D9A60;
  *(_DWORD *)(v76 + 432) = -1;
  *(_OWORD *)(v76 + 488) = 0u;
  *(_OWORD *)(v76 + 472) = 0u;
  *(_DWORD *)(v76 + 504) = 1065353216;
  *(_QWORD *)(v76 + 512) = &unk_24C0D9A18;
  *(_QWORD *)(v76 + 552) = &unk_24C0D99D0;
  *(_DWORD *)(v76 + 576) = 0;
  *(_BYTE *)(v76 + 624) = 0;
  v128 = std::__next_prime(0xFuLL);
  v129 = v128;
  v130 = *(int8x8_t *)(v76 + 480);
  if (v128 > *(_QWORD *)&v130)
    goto LABEL_76;
  if (v128 >= *(_QWORD *)&v130)
    goto LABEL_89;
  v131 = vcvtps_u32_f32((float)*(unint64_t *)(v76 + 496) / *(float *)(v76 + 504));
  if (*(_QWORD *)&v130 >= 3uLL)
  {
    v132 = (uint8x8_t)vcnt_s8(v130);
    v132.i16[0] = vaddlv_u8(v132);
    if (v132.u32[0] <= 1uLL)
    {
      v133 = 1 << -(char)__clz(v131 - 1);
      if (v131 >= 2)
        v131 = v133;
      if (v129 <= v131)
        v129 = v131;
      if (v129 >= *(_QWORD *)&v130)
        goto LABEL_89;
LABEL_76:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>(v76 + 472, v129);
      goto LABEL_89;
    }
  }
  v134 = std::__next_prime(v131);
  if (v129 <= v134)
    v129 = v134;
  if (v129 < *(_QWORD *)&v130)
    goto LABEL_76;
LABEL_89:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v368, (uint64_t)&v368);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v366, (uint64_t)&v366);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v364, (uint64_t)&v364);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v362, (uint64_t)&v362);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v360, (uint64_t)&v360);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v358, (uint64_t)&v358);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v356, (uint64_t)&v356);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v354, (uint64_t)&v354);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v352, (uint64_t)&v352);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v350, (uint64_t)&v350);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v348, (uint64_t)&v348);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v346, (uint64_t)&v346);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v344, (uint64_t)&v344);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, &v388, (uint64_t)&v388);
  v135 = *(int8x8_t *)(v76 + 480);
  if (v135)
  {
    v136 = (uint8x8_t)vcnt_s8(v135);
    v136.i16[0] = vaddlv_u8(v136);
    if (v136.u32[0] > 1uLL)
    {
      v137 = 236;
      if (*(_QWORD *)&v135 <= 0xECuLL)
        v137 = 0xECu % *(_QWORD *)(v76 + 480);
    }
    else
    {
      v137 = (v135.i32[0] - 1) & 0xECLL;
    }
    v138 = *(uint64_t ***)(*(_QWORD *)(v76 + 472) + 8 * v137);
    if (v138)
    {
      v139 = *v138;
      if (v139)
      {
        if (v136.u32[0] < 2uLL)
        {
          v140 = *(_QWORD *)&v135 - 1;
          while (1)
          {
            v142 = v139[1];
            if (v142 == 236)
            {
              if (*((_DWORD *)v139 + 4) == 236)
                goto LABEL_111;
            }
            else if ((v142 & v140) != v137)
            {
              goto LABEL_109;
            }
            v139 = (uint64_t *)*v139;
            if (!v139)
              goto LABEL_109;
          }
        }
        do
        {
          v141 = v139[1];
          if (v141 == 236)
          {
            if (*((_DWORD *)v139 + 4) == 236)
              goto LABEL_111;
          }
          else
          {
            if (v141 >= *(_QWORD *)&v135)
              v141 %= *(_QWORD *)&v135;
            if (v141 != v137)
              break;
          }
          v139 = (uint64_t *)*v139;
        }
        while (v139);
      }
    }
  }
LABEL_109:
  v143 = operator new();
  *(_OWORD *)v143 = 0u;
  *(_OWORD *)(v143 + 16) = 0u;
  *(_QWORD *)v143 = &unk_24C0D9A88;
  *(_QWORD *)(v143 + 32) = 0;
  LODWORD(v315.__r_.__value_.__l.__data_) = 236;
  v315.__r_.__value_.__l.__size_ = v143;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v76 + 472, (unsigned int *)&v315, (uint64_t)&v315);
  v144 = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (v144)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v144 + 8))(v144);
LABEL_111:
  v145 = v389;
  v389 = 0;
  if (v145)
    (*(void (**)(_QWORD *))(*v145 + 8))(v145);
  v146 = v345;
  v345 = 0;
  if (v146)
    (*(void (**)(uint64_t))(*(_QWORD *)v146 + 8))(v146);
  v147 = v347;
  v347 = 0;
  if (v147)
    (*(void (**)(uint64_t))(*(_QWORD *)v147 + 8))(v147);
  v148 = v349;
  v349 = 0;
  if (v148)
    (*(void (**)(uint64_t))(*(_QWORD *)v148 + 8))(v148);
  v149 = v351;
  v351 = 0;
  if (v149)
    (*(void (**)(uint64_t))(*(_QWORD *)v149 + 8))(v149);
  v150 = v353;
  v353 = 0;
  if (v150)
    (*(void (**)(uint64_t))(*(_QWORD *)v150 + 8))(v150);
  v151 = v355;
  v355 = 0;
  if (v151)
    (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
  v152 = v357;
  v357 = 0;
  if (v152)
    (*(void (**)(uint64_t))(*(_QWORD *)v152 + 8))(v152);
  v153 = v359;
  v359 = 0;
  if (v153)
    (*(void (**)(uint64_t))(*(_QWORD *)v153 + 8))(v153);
  v154 = v361;
  v361 = 0;
  if (v154)
    (*(void (**)(uint64_t))(*(_QWORD *)v154 + 8))(v154);
  v155 = v363;
  v363 = 0;
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  v156 = v365;
  v365 = 0;
  if (v156)
    (*(void (**)(uint64_t))(*(_QWORD *)v156 + 8))(v156);
  v157 = v367;
  v367 = 0;
  if (v157)
    (*(void (**)(uint64_t))(*(_QWORD *)v157 + 8))(v157);
  v158 = v369;
  v369 = 0;
  if (v158)
    (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
  *(_QWORD *)v76 = &off_24C0D8EE0;
  *(_QWORD *)(v76 + 632) = v61;
  *(_QWORD *)(v76 + 640) = v61 + 232;
  v380 = 21936;
  v381 = v76;
  v159 = operator new();
  *(_QWORD *)v159 = &off_24C0D9270;
  *(_QWORD *)(v159 + 8) = 0;
  *(_BYTE *)(v159 + 16) = 0;
  *(_QWORD *)(v159 + 24) = 0;
  v160 = (_QWORD *)(v159 + 24);
  *(_QWORD *)(v159 + 32) = 0;
  *(_QWORD *)(v159 + 40) = 0;
  *(_BYTE *)(v159 + 48) = 0;
  *(_QWORD *)(v159 + 56) = 0;
  *(_BYTE *)(v159 + 64) = 0;
  *(_QWORD *)(v159 + 72) = 0;
  *(_BYTE *)(v159 + 80) = 0;
  *(_QWORD *)(v159 + 88) = 0;
  *(_BYTE *)(v159 + 96) = 0;
  *(_DWORD *)(v159 + 104) = 0;
  v161 = operator new();
  *(_QWORD *)(v161 + 16) = *(_QWORD *)(v159 + 8);
  *(_DWORD *)(v161 + 24) = -1;
  *(_QWORD *)v161 = &off_24C0D92D0;
  *(_QWORD *)(v161 + 32) = v159;
  *(_QWORD *)(v161 + 40) = v159 + 8;
  LODWORD(v315.__r_.__value_.__l.__data_) = 30321;
  v315.__r_.__value_.__l.__size_ = v161;
  v162 = (_QWORD *)operator new();
  v163 = *(_BYTE **)(v159 + 24);
  v164 = *(_BYTE **)(v159 + 32);
  v165 = v164 - v163;
  if (v164 == v163)
  {
    v166 = 0;
    v167 = 0;
  }
  else
  {
    if ((v165 & 0x8000000000000000) != 0)
      goto LABEL_325;
    v166 = (char *)operator new((size_t)&v164[-*v160]);
    v167 = &v166[v165];
    memcpy(v166, v163, v165);
  }
  v162[2] = 0;
  v162[3] = 0;
  v162[4] = v166;
  v162[5] = v167;
  v162[6] = v167;
  *v162 = &off_24C0D9318;
  v162[1] = 0;
  v162[8] = v159;
  v162[9] = v160;
  v388 = 30322;
  v389 = v162;
  v168 = operator new();
  *(_QWORD *)(v168 + 16) = *(_QWORD *)(v159 + 56);
  *(_DWORD *)(v168 + 32) = -1;
  *(_QWORD *)v168 = &off_24C0D9360;
  *(_QWORD *)(v168 + 40) = v159;
  *(_QWORD *)(v168 + 48) = v159 + 56;
  v386 = 30323;
  v387 = (_QWORD *)v168;
  v169 = operator new();
  *(_QWORD *)(v169 + 16) = *(_QWORD *)(v159 + 72);
  *(_DWORD *)(v169 + 32) = -1;
  *(_QWORD *)v169 = &off_24C0D9360;
  *(_QWORD *)(v169 + 40) = v159;
  *(_QWORD *)(v169 + 48) = v159 + 72;
  v384 = 30324;
  v385 = v169;
  v170 = operator new();
  *(_QWORD *)(v170 + 16) = *(_QWORD *)(v159 + 88);
  *(_DWORD *)(v170 + 32) = -1;
  *(_QWORD *)v170 = &off_24C0D9360;
  *(_QWORD *)(v170 + 40) = v159;
  *(_QWORD *)(v170 + 48) = v159 + 88;
  v382 = 30325;
  v383 = v170;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v159 + 112, (unsigned int *)&v315, &v388, &v386, &v384, &v382);
  v171 = v383;
  v383 = 0;
  if (v171)
    (*(void (**)(uint64_t))(*(_QWORD *)v171 + 8))(v171);
  v172 = v385;
  v385 = 0;
  if (v172)
    (*(void (**)(uint64_t))(*(_QWORD *)v172 + 8))(v172);
  v173 = v387;
  v387 = 0;
  if (v173)
    (*(void (**)(_QWORD *))(*v173 + 8))(v173);
  v174 = v389;
  v389 = 0;
  if (v174)
    (*(void (**)(_QWORD *))(*v174 + 8))(v174);
  v175 = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (v175)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v175 + 8))(v175);
  *(_QWORD *)v159 = &off_24C0D9210;
  *(_QWORD *)(v159 + 352) = v61;
  *(_QWORD *)(v159 + 360) = v61 + 616;
  v388 = 30320;
  v389 = (_QWORD *)v159;
  *(_QWORD *)(v61 + 728) = &off_24C0D70E8;
  *(_QWORD *)(v61 + 736) = &unk_24C0D7088;
  *(_DWORD *)(v61 + 744) = -1;
  *(_QWORD *)(v61 + 752) = &unk_24C0D99A8;
  *(_QWORD *)(v61 + 760) = &unk_24C0D9A60;
  *(_DWORD *)(v61 + 768) = -1;
  *(_OWORD *)(v61 + 824) = 0u;
  *(_OWORD *)(v61 + 808) = 0u;
  *(_DWORD *)(v61 + 840) = 1065353216;
  *(_QWORD *)(v61 + 848) = &unk_24C0D9A18;
  *(_QWORD *)(v61 + 888) = &unk_24C0D99D0;
  *(_DWORD *)(v61 + 912) = 0;
  *(_BYTE *)(v61 + 960) = 0;
  v176 = std::__next_prime(0x11uLL);
  v177 = v176;
  v178 = *(int8x8_t *)(v61 + 816);
  if (v176 > *(_QWORD *)&v178)
    goto LABEL_154;
  if (v176 >= *(_QWORD *)&v178)
    goto LABEL_167;
  v179 = vcvtps_u32_f32((float)*(unint64_t *)(v61 + 832) / *(float *)(v61 + 840));
  if (*(_QWORD *)&v178 >= 3uLL)
  {
    v180 = (uint8x8_t)vcnt_s8(v178);
    v180.i16[0] = vaddlv_u8(v180);
    if (v180.u32[0] <= 1uLL)
    {
      v181 = 1 << -(char)__clz(v179 - 1);
      if (v179 >= 2)
        v179 = v181;
      if (v177 <= v179)
        v177 = v179;
      if (v177 >= *(_QWORD *)&v178)
        goto LABEL_167;
LABEL_154:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>(v61 + 808, v177);
      goto LABEL_167;
    }
  }
  v182 = std::__next_prime(v179);
  if (v177 <= v182)
    v177 = v182;
  if (v177 < *(_QWORD *)&v178)
    goto LABEL_154;
LABEL_167:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v342, (uint64_t)&v342);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v340, (uint64_t)&v340);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v338, (uint64_t)&v338);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v336, (uint64_t)&v336);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v334, (uint64_t)&v334);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v332, (uint64_t)&v332);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v330, (uint64_t)&v330);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v328, (uint64_t)&v328);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v326, (uint64_t)&v326);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v324, (uint64_t)&v324);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v322, (uint64_t)&v322);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v320, (uint64_t)&v320);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v318, (uint64_t)&v318);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v316, (uint64_t)&v316);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v380, (uint64_t)&v380);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, &v388, (uint64_t)&v388);
  v183 = *(int8x8_t *)(v61 + 816);
  if (v183)
  {
    v184 = (uint8x8_t)vcnt_s8(v183);
    v184.i16[0] = vaddlv_u8(v184);
    if (v184.u32[0] > 1uLL)
    {
      v185 = 236;
      if (*(_QWORD *)&v183 <= 0xECuLL)
        v185 = 0xECu % *(_QWORD *)(v61 + 816);
    }
    else
    {
      v185 = (v183.i32[0] - 1) & 0xECLL;
    }
    v186 = *(uint64_t ***)(*(_QWORD *)(v61 + 808) + 8 * v185);
    if (v186)
    {
      v187 = *v186;
      if (v187)
      {
        if (v184.u32[0] < 2uLL)
        {
          v188 = *(_QWORD *)&v183 - 1;
          while (1)
          {
            v190 = v187[1];
            if (v190 == 236)
            {
              if (*((_DWORD *)v187 + 4) == 236)
                goto LABEL_189;
            }
            else if ((v190 & v188) != v185)
            {
              goto LABEL_187;
            }
            v187 = (uint64_t *)*v187;
            if (!v187)
              goto LABEL_187;
          }
        }
        do
        {
          v189 = v187[1];
          if (v189 == 236)
          {
            if (*((_DWORD *)v187 + 4) == 236)
              goto LABEL_189;
          }
          else
          {
            if (v189 >= *(_QWORD *)&v183)
              v189 %= *(_QWORD *)&v183;
            if (v189 != v185)
              break;
          }
          v187 = (uint64_t *)*v187;
        }
        while (v187);
      }
    }
  }
LABEL_187:
  v191 = operator new();
  *(_OWORD *)v191 = 0u;
  *(_OWORD *)(v191 + 16) = 0u;
  *(_QWORD *)v191 = &unk_24C0D9A88;
  *(_QWORD *)(v191 + 32) = 0;
  LODWORD(v315.__r_.__value_.__l.__data_) = 236;
  v315.__r_.__value_.__l.__size_ = v191;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v61 + 808, (unsigned int *)&v315, (uint64_t)&v315);
  v192 = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (v192)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v192 + 8))(v192);
LABEL_189:
  v193 = v389;
  v389 = 0;
  if (v193)
    (*(void (**)(_QWORD *))(*v193 + 8))(v193);
  v194 = v381;
  v381 = 0;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  v195 = v317;
  v317 = 0;
  if (v195)
    (*(void (**)(uint64_t))(*(_QWORD *)v195 + 8))(v195);
  v196 = v319;
  v319 = 0;
  if (v196)
    (*(void (**)(uint64_t))(*(_QWORD *)v196 + 8))(v196);
  v197 = v321;
  v321 = 0;
  if (v197)
    (*(void (**)(uint64_t))(*(_QWORD *)v197 + 8))(v197);
  v198 = v323;
  v323 = 0;
  if (v198)
    (*(void (**)(uint64_t))(*(_QWORD *)v198 + 8))(v198);
  v199 = v325;
  v325 = 0;
  if (v199)
    (*(void (**)(uint64_t))(*(_QWORD *)v199 + 8))(v199);
  v200 = v327;
  v327 = 0;
  if (v200)
    (*(void (**)(uint64_t))(*(_QWORD *)v200 + 8))(v200);
  v201 = v329;
  v329 = 0;
  if (v201)
    (*(void (**)(uint64_t))(*(_QWORD *)v201 + 8))(v201);
  v202 = v331;
  v331 = 0;
  if (v202)
    (*(void (**)(uint64_t))(*(_QWORD *)v202 + 8))(v202);
  v203 = v333;
  v333 = 0;
  if (v203)
    (*(void (**)(uint64_t))(*(_QWORD *)v203 + 8))(v203);
  v204 = v335;
  v335 = 0;
  if (v204)
    (*(void (**)(uint64_t))(*(_QWORD *)v204 + 8))(v204);
  v205 = v337;
  v337 = 0;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  v206 = v339;
  v339 = 0;
  if (v206)
    (*(void (**)(uint64_t))(*(_QWORD *)v206 + 8))(v206);
  v207 = v341;
  v341 = 0;
  if (v207)
    (*(void (**)(uint64_t))(*(_QWORD *)v207 + 8))(v207);
  v208 = v343;
  v343 = 0;
  if (v208)
    (*(void (**)(uint64_t))(*(_QWORD *)v208 + 8))(v208);
  *(_QWORD *)v61 = &off_24C0D8C28;
  *(_QWORD *)(v61 + 976) = v283;
  *(_QWORD *)(v61 + 984) = v284 + v280;
  v378 = *(_DWORD *)a17;
  v379 = v61;
  v209 = *(_QWORD *)(a18 + 8);
  v210 = operator new();
  *(_QWORD *)v210 = &off_24C0D9408;
  *(_QWORD *)(v210 + 8) = 0x40BF400000000000;
  *(_BYTE *)(v210 + 16) = 0;
  *(_QWORD *)(v210 + 24) = 0x40BF400000000000;
  *(_BYTE *)(v210 + 32) = 0;
  *(_QWORD *)(v210 + 40) = 1;
  *(_BYTE *)(v210 + 48) = 0;
  *(_QWORD *)(v210 + 56) = 0;
  *(_BYTE *)(v210 + 64) = 0;
  *(_DWORD *)(v210 + 72) = 0;
  v211 = operator new();
  *(_QWORD *)(v211 + 16) = *(_QWORD *)(v210 + 8);
  *(_DWORD *)(v211 + 32) = -1;
  *(_QWORD *)v211 = &off_24C0D9468;
  *(_QWORD *)(v211 + 40) = v210;
  *(_QWORD *)(v211 + 48) = v210 + 8;
  LODWORD(v315.__r_.__value_.__l.__data_) = 181;
  v315.__r_.__value_.__l.__size_ = v211;
  v212 = operator new();
  *(_QWORD *)(v212 + 16) = *(_QWORD *)(v210 + 24);
  *(_DWORD *)(v212 + 32) = -1;
  *(_QWORD *)v212 = &off_24C0D94B0;
  *(_QWORD *)(v212 + 40) = v210;
  *(_QWORD *)(v212 + 48) = v210 + 24;
  v388 = 30901;
  v389 = (_QWORD *)v212;
  v213 = operator new();
  *(_QWORD *)(v213 + 16) = *(_QWORD *)(v210 + 40);
  *(_DWORD *)(v213 + 24) = -1;
  *(_QWORD *)v213 = &off_24C0D94F8;
  *(_QWORD *)(v213 + 32) = v210;
  *(_QWORD *)(v213 + 40) = v210 + 40;
  v386 = 159;
  v387 = (_QWORD *)v213;
  v214 = operator new();
  *(_QWORD *)(v214 + 16) = *(_QWORD *)(v210 + 56);
  *(_DWORD *)(v214 + 24) = -1;
  *(_QWORD *)v214 = &off_24C0D94F8;
  *(_QWORD *)(v214 + 32) = v210;
  *(_QWORD *)(v214 + 40) = v210 + 56;
  v384 = 25188;
  v385 = v214;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v210 + 80, (unsigned int *)&v315, &v388, &v386, &v384);
  v215 = v385;
  v385 = 0;
  if (v215)
    (*(void (**)(uint64_t))(*(_QWORD *)v215 + 8))(v215);
  v216 = v387;
  v387 = 0;
  if (v216)
    (*(void (**)(_QWORD *))(*v216 + 8))(v216);
  v217 = v389;
  v389 = 0;
  if (v217)
    (*(void (**)(_QWORD *))(*v217 + 8))(v217);
  v218 = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (v218)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v218 + 8))(v218);
  *(_QWORD *)v210 = &off_24C0D93A8;
  *(_QWORD *)(v210 + 328) = v283;
  *(_QWORD *)(v210 + 336) = v284 + v209;
  v376 = *(_DWORD *)a18;
  v377 = v210;
  v219 = *(_QWORD *)(a19 + 8);
  v220 = operator new();
  *(_QWORD *)v220 = &off_24C0D95A0;
  *(_QWORD *)(v220 + 8) = 0;
  *(_QWORD *)(v220 + 16) = 0;
  *(_QWORD *)(v220 + 24) = 0;
  *(_DWORD *)(v220 + 32) = 0;
  v221 = operator new();
  *(_QWORD *)v221 = &off_24C0D9660;
  *(_QWORD *)(v221 + 8) = 0;
  *(_QWORD *)(v221 + 24) = 1;
  *(_BYTE *)(v221 + 16) = 0;
  *(_BYTE *)(v221 + 32) = 0;
  *(_QWORD *)(v221 + 40) = 0;
  *(_BYTE *)(v221 + 48) = 0;
  *(_QWORD *)(v221 + 56) = 0;
  *(_BYTE *)(v221 + 64) = 0;
  *(_OWORD *)(v221 + 104) = 0u;
  *(_OWORD *)(v221 + 72) = 0u;
  *(_OWORD *)(v221 + 88) = 0u;
  *(_QWORD *)(v221 + 120) = 0;
  *(_QWORD *)(v221 + 104) = 1;
  *(_BYTE *)(v221 + 128) = 0;
  *(_DWORD *)(v221 + 136) = 0;
  v222 = operator new();
  *(_QWORD *)(v222 + 16) = 0;
  *(_DWORD *)(v222 + 24) = -1;
  *(_QWORD *)v222 = &off_24C0D96C0;
  *(_QWORD *)(v222 + 32) = v221;
  *(_QWORD *)(v222 + 40) = v221 + 8;
  v384 = 20529;
  v385 = v222;
  v223 = operator new();
  *(_QWORD *)(v223 + 16) = *(_QWORD *)(v221 + 24);
  *(_DWORD *)(v223 + 24) = -1;
  *(_QWORD *)v223 = &off_24C0D96C0;
  *(_QWORD *)(v223 + 32) = v221;
  *(_QWORD *)(v223 + 40) = v221 + 24;
  v382 = 20530;
  v383 = v223;
  v224 = operator new();
  *(_QWORD *)(v224 + 16) = *(_QWORD *)(v221 + 40);
  *(_DWORD *)(v224 + 24) = -1;
  *(_QWORD *)v224 = &off_24C0D9708;
  *(_QWORD *)(v224 + 32) = v221;
  *(_QWORD *)(v224 + 40) = v221 + 40;
  v380 = 20531;
  v381 = v224;
  v225 = operator new();
  *(_QWORD *)v225 = &off_24C0D97B0;
  *(_QWORD *)(v225 + 8) = 0;
  *(_BYTE *)(v225 + 16) = 0;
  *(_QWORD *)(v225 + 24) = 0;
  *(_QWORD *)(v225 + 32) = 0;
  *(_QWORD *)(v225 + 40) = 0;
  *(_BYTE *)(v225 + 48) = 0;
  *(_QWORD *)(v225 + 56) = 1;
  *(_BYTE *)(v225 + 64) = 0;
  *(_BYTE *)(v225 + 72) = 0;
  *(_DWORD *)(v225 + 80) = 0;
  v226 = operator new();
  *(_QWORD *)(v226 + 16) = 0;
  *(_DWORD *)(v226 + 24) = -1;
  *(_QWORD *)v226 = &off_24C0D9810;
  *(_QWORD *)(v226 + 32) = v225;
  *(_QWORD *)(v226 + 40) = v225 + 8;
  v388 = 18401;
  v389 = (_QWORD *)v226;
  v227 = (_QWORD *)operator new();
  v228 = *(_BYTE **)(v225 + 24);
  v229 = *(_BYTE **)(v225 + 32);
  v230 = v229 - v228;
  v282 = v219;
  if (v229 != v228)
  {
    if ((v230 & 0x8000000000000000) == 0)
    {
      v231 = (char *)operator new(v230);
      v232 = &v231[v230];
      memcpy(v231, v228, v230);
      goto LABEL_233;
    }
LABEL_325:
    abort();
  }
  v231 = 0;
  v232 = 0;
LABEL_233:
  v227[2] = 0;
  v227[3] = 0;
  v227[4] = v231;
  v227[5] = v232;
  v227[6] = v232;
  *v227 = &off_24C0D9858;
  v227[1] = 0;
  v227[8] = v225;
  v227[9] = v225 + 24;
  v386 = 18402;
  v387 = v227;
  v233 = operator new();
  *(_QWORD *)v233 = &off_24C0D9900;
  *(_QWORD *)(v233 + 8) = 1;
  *(_BYTE *)(v233 + 16) = 0;
  *(_DWORD *)(v233 + 24) = 0;
  v234 = operator new();
  *(_QWORD *)(v234 + 16) = 1;
  *(_DWORD *)(v234 + 24) = -1;
  *(_QWORD *)v234 = &off_24C0D9960;
  *(_QWORD *)(v234 + 32) = v233;
  *(_QWORD *)(v234 + 40) = v233 + 8;
  LODWORD(v315.__r_.__value_.__l.__data_) = 18408;
  v315.__r_.__value_.__l.__size_ = v234;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v233 + 32, (unsigned int *)&v315);
  v235 = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (v235)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v235 + 8))(v235);
  *(_QWORD *)v233 = &off_24C0D98A0;
  *(_QWORD *)(v233 + 272) = v225;
  *(_QWORD *)(v233 + 280) = v225 + 56;
  LODWORD(v315.__r_.__value_.__l.__data_) = 18407;
  v315.__r_.__value_.__l.__size_ = v233;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v225 + 88, &v388, &v386, (unsigned int *)&v315);
  v236 = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (v236)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v236 + 8))(v236);
  v237 = v387;
  v387 = 0;
  if (v237)
    (*(void (**)(_QWORD *))(*v237 + 8))(v237);
  v238 = v389;
  v389 = 0;
  if (v238)
    (*(void (**)(_QWORD *))(*v238 + 8))(v238);
  *(_QWORD *)v225 = &off_24C0D9750;
  *(_QWORD *)(v225 + 328) = v221;
  *(_QWORD *)(v225 + 336) = v221 + 56;
  LODWORD(v315.__r_.__value_.__l.__data_) = 20533;
  v315.__r_.__value_.__l.__size_ = v225;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v221 + 144, &v384, &v382, &v380, (unsigned int *)&v315);
  v239 = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (v239)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v239 + 8))(v239);
  v240 = v381;
  v381 = 0;
  if (v240)
    (*(void (**)(uint64_t))(*(_QWORD *)v240 + 8))(v240);
  v241 = v383;
  v383 = 0;
  if (v241)
    (*(void (**)(uint64_t))(*(_QWORD *)v241 + 8))(v241);
  v242 = v385;
  v385 = 0;
  if (v242)
    (*(void (**)(uint64_t))(*(_QWORD *)v242 + 8))(v242);
  *(_QWORD *)v221 = &off_24C0D9600;
  *(_QWORD *)(v221 + 384) = v220;
  *(_QWORD *)(v221 + 392) = v220 + 8;
  LODWORD(v315.__r_.__value_.__l.__data_) = 25152;
  v315.__r_.__value_.__l.__size_ = v221;
  webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v220 + 40, (unsigned int *)&v315);
  v243 = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (v243)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v243 + 8))(v243);
  *(_QWORD *)v220 = &off_24C0D9540;
  *(_QWORD *)(v220 + 280) = v283;
  *(_QWORD *)(v220 + 288) = v284 + v282;
  v388 = *(_DWORD *)a19;
  v389 = (_QWORD *)v220;
  *(_QWORD *)(v283 + 1104) = &off_24C0D70E8;
  *(_QWORD *)(v283 + 1112) = &unk_24C0D7088;
  *(_DWORD *)(v283 + 1120) = -1;
  *(_QWORD *)(v283 + 1128) = &unk_24C0D99A8;
  *(_QWORD *)(v283 + 1136) = &unk_24C0D9A60;
  *(_DWORD *)(v283 + 1144) = -1;
  *(_OWORD *)(v283 + 1200) = 0u;
  *(_OWORD *)(v283 + 1184) = 0u;
  *(_DWORD *)(v283 + 1216) = 1065353216;
  *(_QWORD *)(v283 + 1224) = &unk_24C0D9A18;
  *(_QWORD *)(v283 + 1264) = &unk_24C0D99D0;
  *(_DWORD *)(v283 + 1288) = 0;
  *(_BYTE *)(v283 + 1336) = 0;
  v244 = std::__next_prime(0x13uLL);
  v245 = v244;
  v246 = *(int8x8_t *)(v283 + 1192);
  if (v244 > *(_QWORD *)&v246)
    goto LABEL_264;
  if (v244 >= *(_QWORD *)&v246)
    goto LABEL_265;
  v247 = vcvtps_u32_f32((float)*(unint64_t *)(v283 + 1208) / *(float *)(v283 + 1216));
  if (*(_QWORD *)&v246 >= 3uLL)
  {
    v248 = (uint8x8_t)vcnt_s8(v246);
    v248.i16[0] = vaddlv_u8(v248);
    if (v248.u32[0] <= 1uLL)
    {
      v249 = 1 << -(char)__clz(v247 - 1);
      if (v247 >= 2)
        v247 = v249;
      if (v245 <= v247)
        v245 = v247;
      if (v245 >= *(_QWORD *)&v246)
        goto LABEL_265;
LABEL_264:
      std::__hash_table<std::__hash_value_type<int,int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,int>>>::__do_rehash<true>(v283 + 1184, v245);
      goto LABEL_265;
    }
  }
  v250 = std::__next_prime(v247);
  if (v245 <= v250)
    v245 = v250;
  if (v245 < *(_QWORD *)&v246)
    goto LABEL_264;
LABEL_265:
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v313, (uint64_t)&v313);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v311, (uint64_t)&v311);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v309, (uint64_t)&v309);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v307, (uint64_t)&v307);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v305, (uint64_t)&v305);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v303, (uint64_t)&v303);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v301, (uint64_t)&v301);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v299, (uint64_t)&v299);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v297, (uint64_t)&v297);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v295, (uint64_t)&v295);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v293, (uint64_t)&v293);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v291, (uint64_t)&v291);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v289, (uint64_t)&v289);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v287, (uint64_t)&v287);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v285, (uint64_t)&v285);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v378, (uint64_t)&v378);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v376, (uint64_t)&v376);
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, &v388, (uint64_t)&v388);
  v251 = *(int8x8_t *)(v283 + 1192);
  if (v251)
  {
    v252 = (uint8x8_t)vcnt_s8(v251);
    v252.i16[0] = vaddlv_u8(v252);
    if (v252.u32[0] > 1uLL)
    {
      v253 = 236;
      if (*(_QWORD *)&v251 <= 0xECuLL)
        v253 = 0xECu % *(_QWORD *)(v283 + 1192);
    }
    else
    {
      v253 = (v251.i32[0] - 1) & 0xECLL;
    }
    v254 = *(uint64_t ***)(*(_QWORD *)(v283 + 1184) + 8 * v253);
    if (v254)
    {
      v255 = *v254;
      if (v255)
      {
        if (v252.u32[0] < 2uLL)
        {
          v256 = *(_QWORD *)&v251 - 1;
          while (1)
          {
            v258 = v255[1];
            if (v258 == 236)
            {
              if (*((_DWORD *)v255 + 4) == 236)
                goto LABEL_287;
            }
            else if ((v258 & v256) != v253)
            {
              goto LABEL_285;
            }
            v255 = (uint64_t *)*v255;
            if (!v255)
              goto LABEL_285;
          }
        }
        do
        {
          v257 = v255[1];
          if (v257 == 236)
          {
            if (*((_DWORD *)v255 + 4) == 236)
              goto LABEL_287;
          }
          else
          {
            if (v257 >= *(_QWORD *)&v251)
              v257 %= *(_QWORD *)&v251;
            if (v257 != v253)
              break;
          }
          v255 = (uint64_t *)*v255;
        }
        while (v255);
      }
    }
  }
LABEL_285:
  v259 = operator new();
  *(_OWORD *)v259 = 0u;
  *(_OWORD *)(v259 + 16) = 0u;
  *(_QWORD *)v259 = &unk_24C0D9A88;
  *(_QWORD *)(v259 + 32) = 0;
  LODWORD(v315.__r_.__value_.__l.__data_) = 236;
  v315.__r_.__value_.__l.__size_ = v259;
  std::__hash_table<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::__unordered_map_hasher<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,webm::MasterParser::IdHash,std::equal_to<webm::Id>,true>,std::__unordered_map_equal<webm::Id,std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>,std::equal_to<webm::Id>,webm::MasterParser::IdHash,true>,std::allocator<std::__hash_value_type<webm::Id,std::unique_ptr<webm::ElementParser>>>>::__emplace_unique_key_args<webm::Id,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v283 + 1184, (unsigned int *)&v315, (uint64_t)&v315);
  v260 = v315.__r_.__value_.__l.__size_;
  v315.__r_.__value_.__l.__size_ = 0;
  if (v260)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v260 + 8))(v260);
LABEL_287:
  v261 = v389;
  v389 = 0;
  if (v261)
    (*(void (**)(_QWORD *))(*v261 + 8))(v261);
  v262 = v377;
  v377 = 0;
  if (v262)
    (*(void (**)(uint64_t))(*(_QWORD *)v262 + 8))(v262);
  v263 = v379;
  v379 = 0;
  if (v263)
    (*(void (**)(uint64_t))(*(_QWORD *)v263 + 8))(v263);
  v264 = v286;
  v286 = 0;
  if (v264)
    (*(void (**)(uint64_t))(*(_QWORD *)v264 + 8))(v264);
  v265 = v288;
  v288 = 0;
  if (v265)
    (*(void (**)(uint64_t))(*(_QWORD *)v265 + 8))(v265);
  v266 = v290;
  v290 = 0;
  if (v266)
    (*(void (**)(uint64_t))(*(_QWORD *)v266 + 8))(v266);
  v267 = v292;
  v292 = 0;
  if (v267)
    (*(void (**)(_QWORD *))(*v267 + 8))(v267);
  v268 = v294;
  v294 = 0;
  if (v268)
    (*(void (**)(uint64_t))(*(_QWORD *)v268 + 8))(v268);
  v269 = v296;
  v296 = 0;
  if (v269)
    (*(void (**)(uint64_t))(*(_QWORD *)v269 + 8))(v269);
  v270 = v298;
  v298 = 0;
  if (v270)
    (*(void (**)(uint64_t))(*(_QWORD *)v270 + 8))(v270);
  v271 = v300;
  v300 = 0;
  if (v271)
    (*(void (**)(uint64_t))(*(_QWORD *)v271 + 8))(v271);
  v272 = v302;
  v302 = 0;
  if (v272)
    (*(void (**)(uint64_t))(*(_QWORD *)v272 + 8))(v272);
  v273 = v304;
  v304 = 0;
  if (v273)
    (*(void (**)(uint64_t))(*(_QWORD *)v273 + 8))(v273);
  v274 = v306;
  v306 = 0;
  if (v274)
    (*(void (**)(uint64_t))(*(_QWORD *)v274 + 8))(v274);
  v275 = v308;
  v308 = 0;
  if (v275)
    (*(void (**)(uint64_t))(*(_QWORD *)v275 + 8))(v275);
  v276 = v310;
  v310 = 0;
  if (v276)
    (*(void (**)(uint64_t))(*(_QWORD *)v276 + 8))(v276);
  v277 = v312;
  v312 = 0;
  if (v277)
    (*(void (**)(uint64_t))(*(_QWORD *)v277 + 8))(v277);
  v278 = v314;
  v314 = 0;
  if (v278)
    (*(void (**)(uint64_t))(*(_QWORD *)v278 + 8))(v278);
  return v283;
}

void webm::TrackEntryParser::~TrackEntryParser(webm::TrackEntryParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D8A60;
  *((_QWORD *)this + 138) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 150);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v3)
    operator delete(v3);
  webm::TrackEntry::~TrackEntry((webm::TrackEntryParser *)((char *)this + 8));
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_24C0D8A60;
  *((_QWORD *)this + 138) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 150);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 148);
  *((_QWORD *)this + 148) = 0;
  if (v3)
    operator delete(v3);
  webm::TrackEntry::~TrackEntry((webm::TrackEntryParser *)((char *)this + 8));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 1100))
  {
    if (*(_BYTE *)(a1 + 1101))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 1096) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 1104, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 1104, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 1100) = 1;
    if (*(_BYTE *)(a1 + 1101))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 1096) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 1096);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 1101) = 1;
    if (*(_DWORD *)(a1 + 1096) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::Init(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  uint64_t v11;
  _OWORD v12[3];
  int v13;
  __int16 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[25];
  uint64_t v29;
  char v30;
  _QWORD v31[32];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[25];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[144];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  v5 = result;
  memset(v12, 0, sizeof(v12));
  v13 = 65537;
  v14 = 0;
  v15 = 1;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  HIBYTE(v11) = 3;
  v19 = 0;
  if (&v10 > (__int128 *)"eng" || (char *)&v10 + 3 <= "eng")
  {
    LODWORD(v10) = 6778469;
    v21 = v11;
    v20 = v10;
    v22 = 0;
    v29 = 0;
    v30 = 0;
    v23 = 0uLL;
    v24 = 0uLL;
    v25 = 0uLL;
    v26 = 0uLL;
    v27 = 0uLL;
    memset(v28, 0, sizeof(v28));
    bzero(v31, 0x2D0uLL);
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    memset(v35, 0, sizeof(v35));
    v31[28] = 2;
    v36 = 2;
    v37 = 2;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v47 = 0u;
    v48 = 0u;
    memset(v49, 0, 25);
    memset(&v49[32], 0, 105);
    v51 = 0;
    v53 = 0;
    v55 = 0;
    v57 = 0u;
    v50 = 0x40BF400000000000;
    v52 = 0x40BF400000000000;
    v54 = 1;
    v56 = 0;
    BYTE8(v57) = 0;
    *(_QWORD *)&v57 = 0;
    v59 = 0u;
    v58 = 0u;
    webm::TrackEntry::operator=(v5 + 8, (uint64_t)v12);
    webm::TrackEntry::~TrackEntry((webm::TrackEntry *)v12);
    *(_DWORD *)(v5 + 1096) = 0;
    *(_WORD *)(v5 + 1100) = 0;
    v6 = *(_DWORD *)(a2 + 4);
    v7 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v5 + 1120) = 0xFFFFFFFFLL;
    *(_DWORD *)(v5 + 1144) = -1;
    *(_DWORD *)(v5 + 1156) = 0;
    *(_QWORD *)(v5 + 1148) = 0;
    *(_QWORD *)(v5 + 1280) = 0;
    *(_DWORD *)(v5 + 1288) = 0;
    *(_DWORD *)(v5 + 1296) = v6;
    *(_OWORD *)(v5 + 1304) = v7;
    *(_QWORD *)(v5 + 1328) = 0;
    *(_BYTE *)(v5 + 1336) = 0;
    v8 = *(_QWORD *)(a2 + 8);
    if (v8 == -1)
    {
      *(_QWORD *)(v5 + 1320) = a3;
    }
    else
    {
      *(_QWORD *)(v5 + 1320) = v8;
      if (!v8)
      {
        v9 = 8;
LABEL_8:
        *(_DWORD *)(v5 + 1292) = v9;
        return 0;
      }
    }
    v9 = 0;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::InitAfterSeek(uint64_t result, unsigned int **a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[3];
  int v9;
  __int16 v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[25];
  uint64_t v25;
  char v26;
  _QWORD v27[32];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[25];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[144];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v5 = result;
  memset(v8, 0, sizeof(v8));
  v9 = 65537;
  v10 = 0;
  v11 = 1;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  HIBYTE(v7) = 3;
  v15 = 0;
  if (&v6 <= (__int128 *)"eng" && (char *)&v6 + 3 > "eng")
  {
    __break(1u);
  }
  else
  {
    LODWORD(v6) = 6778469;
    v17 = v7;
    v16 = v6;
    v18 = 0;
    v25 = 0;
    v26 = 0;
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
    v23 = 0uLL;
    memset(v24, 0, sizeof(v24));
    bzero(v27, 0x2D0uLL);
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    memset(v31, 0, sizeof(v31));
    v27[28] = 2;
    v32 = 2;
    v33 = 2;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    memset(v45, 0, 25);
    memset(&v45[32], 0, 105);
    v47 = 0;
    v49 = 0;
    v51 = 0;
    v53 = 0u;
    v46 = 0x40BF400000000000;
    v48 = 0x40BF400000000000;
    v50 = 1;
    v52 = 0;
    BYTE8(v53) = 0;
    *(_QWORD *)&v53 = 0;
    v55 = 0u;
    v54 = 0u;
    webm::TrackEntry::operator=(v5 + 8, (uint64_t)v8);
    webm::TrackEntry::~TrackEntry((webm::TrackEntry *)v8);
    *(_DWORD *)(v5 + 1096) = 0;
    *(_WORD *)(v5 + 1100) = 256;
    return webm::MasterParser::InitAfterSeek(v5 + 1104, a2, a3);
  }
  return result;
}

BOOL webm::MasterValueParser<webm::TrackEntry>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 1336))
    return 0;
  v2 = *(_OWORD *)(a1 + 1160);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 1176);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 1336) != 0;
}

BOOL webm::MasterValueParser<webm::TrackEntry>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 1096) == 1;
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::TrackEntryParser::OnParseCompleted(webm::TrackEntryParser *this, webm::Callback *a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *((_DWORD *)this + 324);
  v4[0] = 174;
  v4[1] = v2;
  v5 = *(_OWORD *)((char *)this + 1304);
  return (*(uint64_t (**)(webm::Callback *, _DWORD *, char *))(*(_QWORD *)a2 + 144))(a2, v4, (char *)this + 8);
}

_QWORD *webm::MasterValueParser<webm::TrackEntry>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D8A60;
  a1[138] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[150];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[148];
  a1[148] = 0;
  if (v3)
    operator delete(v3);
  webm::TrackEntry::~TrackEntry((webm::TrackEntry *)(a1 + 1));
  return a1;
}

void webm::MasterValueParser<webm::TrackEntry>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D8A60;
  a1[138] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[150];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[148];
  a1[148] = 0;
  if (v3)
    operator delete(v3);
  webm::TrackEntry::~TrackEntry((webm::TrackEntry *)(a1 + 1));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::OnParseCompleted()
{
  return 0;
}

void webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 1096) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

void webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::IntParser<webm::TrackType>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<webm::TrackType>,webm::TrackType>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::IntParser<webm::TrackType>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::IntParser<webm::TrackType>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::IntParser<webm::TrackType>,webm::TrackType>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::IntParser<webm::TrackType>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 1096) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::TrackType>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::BoolParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::BoolParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::BoolParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::BoolParser,BOOL>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::BoolParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;
  unsigned int v11;
  int v12;
  BOOL v13;
  _BYTE *v15;
  unsigned __int8 v16;
  uint64_t v17;

  v5 = *(_DWORD *)(a1 + 12);
  *a4 = 0;
  if (v5 <= 8)
  {
    if (v5)
    {
      v7 = 0;
      v11 = v5 + 1;
      while (1)
      {
        v16 = 0;
        v17 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v16, &v17);
        if ((_DWORD)result)
          break;
        v6 = *a4 + 1;
        *a4 = v6;
        v7 = v16 | (v7 << 8);
        if ((int)--v11 <= 1)
          goto LABEL_9;
      }
      v6 = *a4;
    }
    else
    {
      LODWORD(v6) = 0;
      v7 = 0;
LABEL_9:
      result = 0;
    }
  }
  else
  {
    LODWORD(v6) = 0;
    v7 = 0;
    result = 4294966270;
  }
  v12 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = v12 - v6;
  if (v7)
    v13 = v12 == (_DWORD)v6;
  else
    v13 = 1;
  if (!v13 || v7 > 1)
    return 4294966266;
  if (*(int *)(a1 + 16) >= 1)
    *(_BYTE *)(a1 + 8) = v7 == 1;
  if (!(_DWORD)result)
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 24) + 1096) == 1
      || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    {
      return 0;
    }
    else
    {
      result = 0;
      v15 = *(_BYTE **)(a1 + 32);
      *v15 = *(_BYTE *)(a1 + 8);
      v15[1] = 1;
    }
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::ByteParser<std::string>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *a4 = 0;
  v5 = webm::ByteParser<std::string>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 64) + 1096) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a1 + 31) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return v5;
}

_QWORD *webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::Feed(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = result;
  *a4 = 0;
  v5 = result + 1;
  v6 = result[7];
  if (v6 != result[2] - result[1])
  {
    do
    {
      v14 = 0;
      v9 = v4[1];
      v10 = v4[2];
      if (v9 == v10)
      {
        __break(1u);
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, v10 - (v9 + v6), v9 + v6, &v14);
      v11 = v14;
      *a4 += v14;
      v6 = v4[7] + v11;
      v4[7] = v6;
    }
    while ((_DWORD)result == -1);
    if ((_DWORD)result)
      return result;
  }
  if (*(_DWORD *)(v4[8] + 1096) == 1)
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 48))(v4) & 1) != 0)
    return 0;
  v12 = v4[9];
  v13 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v13;
    operator delete(v13);
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
  }
  result = 0;
  *(_OWORD *)v12 = *(_OWORD *)(v4 + 1);
  *(_QWORD *)(v12 + 16) = v4[3];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *(_BYTE *)(v12 + 24) = 1;
  return result;
}

_QWORD *webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::VideoParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::VideoParser,webm::Video>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::VideoParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D8C88;
  a1[91] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[103];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[101];
  a1[101] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[79];
  if (v4)
  {
    a1[80] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::VideoParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::VideoParser,webm::Video>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::VideoParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D8C88;
  a1[91] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[103];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[101];
  a1[101] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[79];
  if (v4)
  {
    a1[80] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::VideoParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::VideoParser,webm::Video>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::VideoParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  char v8;
  void *v9;
  __int128 v10;
  __int128 v11;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::Video>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5)
    return v5;
  if (*(_BYTE *)(a1 + 968))
  {
    if (*(_BYTE *)(a1 + 969))
      goto LABEL_5;
LABEL_8:
    *(_QWORD *)(a1 + 168) = *(_QWORD *)(a1 + 72);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 976) + 1096) != 1)
      goto LABEL_9;
    return v5;
  }
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 969))
    goto LABEL_8;
LABEL_5:
  if (*(_DWORD *)(*(_QWORD *)(a1 + 976) + 1096) == 1)
    return v5;
LABEL_9:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return v5;
  v7 = *(_QWORD *)(a1 + 984);
  memcpy((void *)v7, (const void *)(a1 + 8), 0x259uLL);
  v8 = *(_BYTE *)(a1 + 624);
  *(_QWORD *)(v7 + 608) = *(_QWORD *)(a1 + 616);
  *(_BYTE *)(v7 + 616) = v8;
  v9 = *(void **)(v7 + 624);
  if (v9)
  {
    *(_QWORD *)(v7 + 632) = v9;
    operator delete(v9);
    *(_QWORD *)(v7 + 624) = 0;
    *(_QWORD *)(v7 + 632) = 0;
    *(_QWORD *)(v7 + 640) = 0;
  }
  *(_OWORD *)(v7 + 624) = *(_OWORD *)(a1 + 632);
  *(_QWORD *)(v7 + 640) = *(_QWORD *)(a1 + 648);
  *(_QWORD *)(a1 + 640) = 0;
  *(_QWORD *)(a1 + 632) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_BYTE *)(v7 + 648) = *(_BYTE *)(a1 + 656);
  v10 = *(_OWORD *)(a1 + 664);
  v11 = *(_OWORD *)(a1 + 680);
  *(_OWORD *)(v7 + 681) = *(_OWORD *)(a1 + 689);
  *(_OWORD *)(v7 + 656) = v10;
  *(_OWORD *)(v7 + 672) = v11;
  *(_BYTE *)(v7 + 704) = *(_BYTE *)(a1 + 712);
  *(_BYTE *)(v7 + 712) = 1;
  return v5;
}

uint64_t webm::VideoParser::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a1 + 968) = 0;
  return webm::MasterValueParser<webm::Video>::Init(a1, a2, a3);
}

uint64_t webm::VideoParser::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  *(_WORD *)(a1 + 968) = 0;
  return webm::MasterValueParser<webm::Video>::InitAfterSeek(a1, a2, a3);
}

BOOL webm::MasterValueParser<webm::Video>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 960))
    return 0;
  v2 = *(_OWORD *)(a1 + 784);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 800);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 960) != 0;
}

BOOL webm::MasterValueParser<webm::Video>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 720) == 1;
}

uint64_t webm::MasterValueParser<webm::Video>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Video>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::VideoParser::OnChildParsed(uint64_t result, uint64_t a2)
{
  BOOL v2;

  v2 = *(_QWORD *)(a2 + 8) != 0;
  if (*(_DWORD *)a2 == 21680)
    *(_BYTE *)(result + 968) = v2;
  else
    *(_BYTE *)(result + 969) = v2;
  return result;
}

_QWORD *webm::MasterValueParser<webm::Video>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D8C88;
  a1[91] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[103];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[101];
  a1[101] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[79];
  if (v4)
  {
    a1[80] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::Video>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D8C88;
  a1[91] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[103];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[101];
  a1[101] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[79];
  if (v4)
  {
    a1[80] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Video>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 724))
  {
    if (*(_BYTE *)(a1 + 725))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 720) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 728, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 728, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 724) = 1;
    if (*(_BYTE *)(a1 + 725))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 720) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 720);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 725) = 1;
    if (*(_DWORD *)(a1 + 720) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::Video>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  int v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _OWORD v13[21];

  memset((char *)&v13[16] + 8, 0, 71);
  memset((char *)&v13[3] + 8, 0, 199);
  memset(&v13[1], 0, 24);
  *(_QWORD *)(a1 + 8) = 0;
  v13[0] = 0u;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_QWORD *)(a1 + 232) = 2;
  *(_OWORD *)(a1 + 177) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 257) = *(_OWORD *)((char *)&v13[16] + 8);
  *(_OWORD *)(a1 + 321) = 0u;
  *(_OWORD *)(a1 + 305) = *(_OWORD *)((char *)&v13[19] + 8);
  *(_OWORD *)(a1 + 289) = *(_OWORD *)((char *)&v13[18] + 8);
  *(_OWORD *)(a1 + 273) = *(_OWORD *)((char *)&v13[17] + 8);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 2;
  *(_OWORD *)(a1 + 353) = 0u;
  *(_OWORD *)(a1 + 337) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_208F1A990;
  *(_BYTE *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 401) = *(_OWORD *)((char *)&v13[3] + 8);
  *(_OWORD *)(a1 + 465) = *(_OWORD *)((char *)&v13[7] + 8);
  *(_OWORD *)(a1 + 449) = *(_OWORD *)((char *)&v13[6] + 8);
  *(_OWORD *)(a1 + 433) = *(_OWORD *)((char *)&v13[5] + 8);
  *(_OWORD *)(a1 + 417) = *(_OWORD *)((char *)&v13[4] + 8);
  *(_OWORD *)(a1 + 529) = *(_OWORD *)((char *)&v13[11] + 8);
  *(_OWORD *)(a1 + 513) = *(_OWORD *)((char *)&v13[10] + 8);
  *(_OWORD *)(a1 + 497) = *(_OWORD *)((char *)&v13[9] + 8);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)((char *)&v13[8] + 8);
  *(_OWORD *)(a1 + 593) = 0u;
  *(_OWORD *)(a1 + 577) = *(_OWORD *)((char *)&v13[14] + 8);
  *(_OWORD *)(a1 + 561) = *(_OWORD *)((char *)&v13[13] + 8);
  *(_OWORD *)(a1 + 545) = *(_OWORD *)((char *)&v13[12] + 8);
  *(_BYTE *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  v6 = a1 + 632;
  v7 = *(void **)(a1 + 632);
  if (v7)
  {
    *(_QWORD *)(a1 + 640) = v7;
    operator delete(v7);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(a1 + 664) = *(_OWORD *)((char *)v13 + 7);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)((char *)&v13[1] + 7);
  *(_OWORD *)(a1 + 689) = 0u;
  *(_BYTE *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  *(_WORD *)(a1 + 724) = 0;
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 744) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 768) = -1;
  *(_DWORD *)(a1 + 780) = 0;
  *(_QWORD *)(a1 + 772) = 0;
  *(_QWORD *)(a1 + 904) = 0;
  *(_DWORD *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 920) = v8;
  *(_OWORD *)(a1 + 928) = v9;
  *(_QWORD *)(a1 + 952) = 0;
  *(_BYTE *)(a1 + 960) = 0;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 == -1)
  {
    *(_QWORD *)(a1 + 944) = a3;
    goto LABEL_7;
  }
  *(_QWORD *)(a1 + 944) = v10;
  if (v10)
  {
LABEL_7:
    v11 = 0;
    goto LABEL_8;
  }
  v11 = 8;
LABEL_8:
  *(_DWORD *)(a1 + 916) = v11;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Video>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  _OWORD v9[21];

  memset((char *)&v9[16] + 8, 0, 71);
  memset((char *)&v9[3] + 8, 0, 199);
  memset(&v9[1], 0, 24);
  *(_QWORD *)(a1 + 8) = 0;
  v9[0] = 0u;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_QWORD *)(a1 + 232) = 2;
  *(_OWORD *)(a1 + 177) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 257) = *(_OWORD *)((char *)&v9[16] + 8);
  *(_OWORD *)(a1 + 321) = 0u;
  *(_OWORD *)(a1 + 305) = *(_OWORD *)((char *)&v9[19] + 8);
  *(_OWORD *)(a1 + 289) = *(_OWORD *)((char *)&v9[18] + 8);
  *(_OWORD *)(a1 + 273) = *(_OWORD *)((char *)&v9[17] + 8);
  *(_QWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 376) = 2;
  *(_OWORD *)(a1 + 353) = 0u;
  *(_OWORD *)(a1 + 337) = 0u;
  *(_OWORD *)(a1 + 384) = xmmword_208F1A990;
  *(_BYTE *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 401) = *(_OWORD *)((char *)&v9[3] + 8);
  *(_OWORD *)(a1 + 465) = *(_OWORD *)((char *)&v9[7] + 8);
  *(_OWORD *)(a1 + 449) = *(_OWORD *)((char *)&v9[6] + 8);
  *(_OWORD *)(a1 + 433) = *(_OWORD *)((char *)&v9[5] + 8);
  *(_OWORD *)(a1 + 417) = *(_OWORD *)((char *)&v9[4] + 8);
  *(_OWORD *)(a1 + 529) = *(_OWORD *)((char *)&v9[11] + 8);
  *(_OWORD *)(a1 + 513) = *(_OWORD *)((char *)&v9[10] + 8);
  *(_OWORD *)(a1 + 497) = *(_OWORD *)((char *)&v9[9] + 8);
  *(_OWORD *)(a1 + 481) = *(_OWORD *)((char *)&v9[8] + 8);
  *(_OWORD *)(a1 + 593) = 0u;
  *(_OWORD *)(a1 + 577) = *(_OWORD *)((char *)&v9[14] + 8);
  *(_OWORD *)(a1 + 561) = *(_OWORD *)((char *)&v9[13] + 8);
  *(_OWORD *)(a1 + 545) = *(_OWORD *)((char *)&v9[12] + 8);
  *(_BYTE *)(a1 + 624) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  v6 = a1 + 632;
  v7 = *(void **)(a1 + 632);
  if (v7)
  {
    *(_QWORD *)(a1 + 640) = v7;
    operator delete(v7);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(a1 + 664) = *(_OWORD *)((char *)v9 + 7);
  *(_OWORD *)(a1 + 680) = *(_OWORD *)((char *)&v9[1] + 7);
  *(_OWORD *)(a1 + 689) = 0u;
  *(_BYTE *)(a1 + 712) = 0;
  *(_DWORD *)(a1 + 720) = 0;
  *(_WORD *)(a1 + 724) = 256;
  return webm::MasterParser::InitAfterSeek(a1 + 728, a2, a3);
}

void webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<webm::FlagInterlaced>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<webm::FlagInterlaced>,webm::FlagInterlaced>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<webm::FlagInterlaced>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<webm::FlagInterlaced>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<webm::FlagInterlaced>,webm::FlagInterlaced>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<webm::FlagInterlaced>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 720) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::FlagInterlaced>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<webm::StereoMode>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<webm::StereoMode>,webm::StereoMode>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<webm::StereoMode>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<webm::StereoMode>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<webm::StereoMode>,webm::StereoMode>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<webm::StereoMode>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 720) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::StereoMode>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 720) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

void webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long,webm::MasterValueParser<webm::Video>::TagNotifyOnParseComplete>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<unsigned long long>*)#1},webm::MasterValueParser<webm::Video>::TagNotifyOnParseComplete>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long,webm::MasterValueParser<webm::Video>::TagNotifyOnParseComplete>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<unsigned long long>*)#1},webm::MasterValueParser<webm::Video>::TagNotifyOnParseComplete>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_13:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_13;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 720) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(v12 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 72))(v11, v11 + 784);
  }
  return 0;
}

void webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<webm::DisplayUnit>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<webm::DisplayUnit>,webm::DisplayUnit>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<webm::DisplayUnit>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<webm::DisplayUnit>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<webm::DisplayUnit>,webm::DisplayUnit>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<webm::DisplayUnit>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 720) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::DisplayUnit>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<webm::AspectRatioType>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<webm::AspectRatioType>,webm::AspectRatioType>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<webm::AspectRatioType>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Video>::ChildParser<webm::IntParser<webm::AspectRatioType>,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::IntParser<webm::AspectRatioType>,webm::AspectRatioType>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::IntParser<webm::AspectRatioType>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 720) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::AspectRatioType>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::MasterValueParser<webm::Video>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::FloatParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

double webm::MasterValueParser<webm::Video>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::FloatParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v7;
  unsigned int v9;
  double result;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  *a4 = 0;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 <= 8)
    {
      v9 = v5 + 1;
      while (1)
      {
        v14 = 0;
        v15 = 0;
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
        if (v7)
          break;
        ++*a4;
        *(_QWORD *)(a1 + 24) = v14 | (*(_QWORD *)(a1 + 24) << 8);
        if ((int)--v9 <= 1)
        {
          v7 = 0;
          break;
        }
      }
    }
    else
    {
      v7 = -1026;
    }
    v11 = *(_DWORD *)(a1 + 32);
    v12 = v11 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 32) = v11 - *(_DWORD *)a4;
    if (v12)
    {
      if (*(_BYTE *)(a1 + 36))
      {
        result = *(float *)(a1 + 24);
        *(double *)(a1 + 8) = result;
        if (v7)
          return result;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        if (v7)
          return result;
      }
    }
    else if (v7)
    {
      return result;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 720) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + 48);
    result = *(double *)(a1 + 8);
    *(double *)v13 = result;
    *(_BYTE *)(v13 + 8) = 1;
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::Video>::ChildParser<webm::ColourParser,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::ColourParser,webm::Colour>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::ColourParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D8F40;
  a1[49] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[61];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[59];
  a1[59] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::Video>::ChildParser<webm::ColourParser,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::ColourParser,webm::Colour>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::ColourParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D8F40;
  a1[49] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[61];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[59];
  a1[59] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Video>::ChildParser<webm::ColourParser,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::ColourParser,webm::Colour>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::ColourParser*)#1}>::Feed(_QWORD *a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  _BYTE *v7;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::Colour>::Feed((uint64_t)a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(a1[79] + 720) == 1
    || ((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = (_BYTE *)a1[80];
  memcpy(v7, a1 + 1, 0x178uLL);
  v7[376] = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::Colour>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 2;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  *(_QWORD *)(a1 + 152) = 2;
  *(_BYTE *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 2;
  *(_BYTE *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 374) = 0u;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 408) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 432) = -1;
  *(_QWORD *)(a1 + 436) = 0;
  *(_DWORD *)(a1 + 444) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = v3;
  *(_OWORD *)(a1 + 592) = v4;
  *(_QWORD *)(a1 + 616) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 608) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 608) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 580) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 580) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Colour>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(a1 + 8) = 2;
  v3 = a1 + 8;
  *(_OWORD *)(v3 + 176) = 0u;
  v3 += 176;
  *(_BYTE *)(v3 - 168) = 0;
  *(_QWORD *)(v3 - 160) = 0;
  *(_BYTE *)(v3 - 152) = 0;
  *(_QWORD *)(v3 - 64) = 0;
  *(_BYTE *)(v3 - 56) = 0;
  *(_QWORD *)(v3 - 48) = 0;
  *(_BYTE *)(v3 - 40) = 0;
  *(_OWORD *)(v3 - 144) = 0u;
  *(_OWORD *)(v3 - 128) = 0u;
  *(_OWORD *)(v3 - 112) = 0u;
  *(_OWORD *)(v3 - 96) = 0u;
  *(_OWORD *)(v3 - 87) = 0u;
  *(_QWORD *)(v3 - 32) = 2;
  *(_BYTE *)(v3 - 24) = 0;
  *(_QWORD *)(v3 - 16) = 2;
  *(_BYTE *)(v3 - 8) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  *(_OWORD *)(v3 + 112) = 0u;
  *(_OWORD *)(v3 + 128) = 0u;
  *(_OWORD *)(v3 + 144) = 0u;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_BYTE *)(v3 + 205) = 1;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 189) = 0u;
  return webm::MasterParser::InitAfterSeek(v3 + 208, a2, a3);
}

BOOL webm::MasterValueParser<webm::Colour>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 624))
    return 0;
  v2 = *(_OWORD *)(a1 + 448);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 464);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 624) != 0;
}

BOOL webm::MasterValueParser<webm::Colour>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 384) == 1;
}

uint64_t webm::MasterValueParser<webm::Colour>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Colour>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::Colour>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 388))
  {
    if (*(_BYTE *)(a1 + 389))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 384) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 392, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 392, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 388) = 1;
    if (*(_BYTE *)(a1 + 389))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 384) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 384);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 389) = 1;
    if (*(_DWORD *)(a1 + 384) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::Colour>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D8F40;
  a1[49] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[61];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[59];
  a1[59] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::Colour>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D8F40;
  a1[49] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[61];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[59];
  a1[59] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<webm::MatrixCoefficients>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<webm::MatrixCoefficients>,webm::MatrixCoefficients>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<webm::MatrixCoefficients>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<webm::MatrixCoefficients>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<webm::MatrixCoefficients>,webm::MatrixCoefficients>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<webm::MatrixCoefficients>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 384) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::MatrixCoefficients>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 384) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

void webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<webm::Range>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<webm::Range>,webm::Range>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<webm::Range>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<webm::Range>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<webm::Range>,webm::Range>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<webm::Range>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 384) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::Range>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<webm::TransferCharacteristics>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<webm::TransferCharacteristics>,webm::TransferCharacteristics>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<webm::TransferCharacteristics>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<webm::TransferCharacteristics>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<webm::TransferCharacteristics>,webm::TransferCharacteristics>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<webm::TransferCharacteristics>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 384) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::TransferCharacteristics>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<webm::Primaries>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<webm::Primaries>,webm::Primaries>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<webm::Primaries>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Colour>::ChildParser<webm::IntParser<webm::Primaries>,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::IntParser<webm::Primaries>,webm::Primaries>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::IntParser<webm::Primaries>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 384) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::Primaries>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

_QWORD *webm::MasterValueParser<webm::Colour>::ChildParser<webm::MasteringMetadataParser,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::MasteringMetadataParser,webm::MasteringMetadata>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::MasteringMetadataParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9168;
  a1[22] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[34];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[32];
  a1[32] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::Colour>::ChildParser<webm::MasteringMetadataParser,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::MasteringMetadataParser,webm::MasteringMetadata>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::MasteringMetadataParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D9168;
  a1[22] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[34];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[32];
  a1[32] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Colour>::ChildParser<webm::MasteringMetadataParser,webm::MasterValueParser<webm::Colour>::SingleChildFactory<webm::MasteringMetadataParser,webm::MasteringMetadata>::BuildParser(webm::MasterValueParser<webm::Colour>*,webm::Colour*)::{lambda(webm::MasteringMetadataParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::MasteringMetadata>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 416) + 384) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 424);
  v8 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v7 + 16) = v8;
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(v7 + 64) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v7 + 80) = v11;
  *(_OWORD *)(v7 + 32) = v9;
  *(_OWORD *)(v7 + 48) = v10;
  v12 = *(_OWORD *)(a1 + 104);
  v13 = *(_OWORD *)(a1 + 120);
  v14 = *(_OWORD *)(a1 + 152);
  *(_OWORD *)(v7 + 128) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(v7 + 144) = v14;
  *(_OWORD *)(v7 + 96) = v12;
  *(_OWORD *)(v7 + 112) = v13;
  *(_BYTE *)(v7 + 160) = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::MasteringMetadata>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 166) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 192) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 216) = -1;
  *(_QWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 368) = v3;
  *(_OWORD *)(a1 + 376) = v4;
  *(_QWORD *)(a1 + 400) = 0;
  *(_BYTE *)(a1 + 408) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 392) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 392) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 364) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 364) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::MasteringMetadata>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 165) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_BYTE *)(a1 + 173) = 1;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  return webm::MasterParser::InitAfterSeek(a1 + 176, a2, a3);
}

BOOL webm::MasterValueParser<webm::MasteringMetadata>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 408))
    return 0;
  v2 = *(_OWORD *)(a1 + 232);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 248);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 408) != 0;
}

BOOL webm::MasterValueParser<webm::MasteringMetadata>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 168) == 1;
}

uint64_t webm::MasterValueParser<webm::MasteringMetadata>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::MasteringMetadata>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::MasteringMetadata>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 172))
  {
    if (*(_BYTE *)(a1 + 173))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 168) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 176, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 176, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 172) = 1;
    if (*(_BYTE *)(a1 + 173))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 168) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 168);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 173) = 1;
    if (*(_DWORD *)(a1 + 168) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::MasteringMetadata>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9168;
  a1[22] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[34];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[32];
  a1[32] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::MasteringMetadata>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D9168;
  a1[22] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[34];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[32];
  a1[32] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::MasteringMetadata>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::MasteringMetadata>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::MasteringMetadata>*,webm::MasteringMetadata*)::{lambda(webm::FloatParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

double webm::MasterValueParser<webm::MasteringMetadata>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::MasteringMetadata>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::MasteringMetadata>*,webm::MasteringMetadata*)::{lambda(webm::FloatParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v7;
  unsigned int v9;
  double result;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  *a4 = 0;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 <= 8)
    {
      v9 = v5 + 1;
      while (1)
      {
        v14 = 0;
        v15 = 0;
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
        if (v7)
          break;
        ++*a4;
        *(_QWORD *)(a1 + 24) = v14 | (*(_QWORD *)(a1 + 24) << 8);
        if ((int)--v9 <= 1)
        {
          v7 = 0;
          break;
        }
      }
    }
    else
    {
      v7 = -1026;
    }
    v11 = *(_DWORD *)(a1 + 32);
    v12 = v11 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 32) = v11 - *(_DWORD *)a4;
    if (v12)
    {
      if (*(_BYTE *)(a1 + 36))
      {
        result = *(float *)(a1 + 24);
        *(double *)(a1 + 8) = result;
        if (v7)
          return result;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        if (v7)
          return result;
      }
    }
    else if (v7)
    {
      return result;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 168) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + 48);
    result = *(double *)(a1 + 8);
    *(double *)v13 = result;
    *(_BYTE *)(v13 + 8) = 1;
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::Video>::ChildParser<webm::ProjectionParser,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::ProjectionParser,webm::Projection>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::ProjectionParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D9270;
  a1[14] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[26];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[24];
  a1[24] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::Video>::ChildParser<webm::ProjectionParser,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::ProjectionParser,webm::Projection>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::ProjectionParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9270;
  a1[14] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[26];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[24];
  a1[24] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Video>::ChildParser<webm::ProjectionParser,webm::MasterValueParser<webm::Video>::SingleChildFactory<webm::ProjectionParser,webm::Projection>::BuildParser(webm::MasterValueParser<webm::Video>*,webm::Video*)::{lambda(webm::ProjectionParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::Projection>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 352) + 720) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 360);
  v8 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)v7 = v8;
  v9 = *(void **)(v7 + 16);
  if (v9)
  {
    *(_QWORD *)(v7 + 24) = v9;
    operator delete(v9);
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
  }
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(v7 + 40) = *(_BYTE *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(v7 + 73) = *(_OWORD *)(a1 + 81);
  *(_OWORD *)(v7 + 48) = v10;
  *(_OWORD *)(v7 + 64) = v11;
  *(_BYTE *)(v7 + 96) = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::Projection>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  v7 = a1 + 24;
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(v7 - 16) = 0;
  *(_BYTE *)(v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 108) = 0;
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 128) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 152) = -1;
  *(_QWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 164) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = v8;
  *(_OWORD *)(a1 + 312) = v9;
  *(_QWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 344) = 0;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 == -1)
  {
    *(_QWORD *)(a1 + 328) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 328) = v10;
    if (!v10)
    {
      *(_DWORD *)(a1 + 300) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 300) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Projection>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;

  v7 = a1 + 24;
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(v7 - 16) = 0;
  *(_BYTE *)(v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_WORD *)(a1 + 108) = 256;
  *(_OWORD *)(a1 + 81) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  return webm::MasterParser::InitAfterSeek(a1 + 112, a2, a3);
}

BOOL webm::MasterValueParser<webm::Projection>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 344))
    return 0;
  v2 = *(_OWORD *)(a1 + 168);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 184);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 344) != 0;
}

BOOL webm::MasterValueParser<webm::Projection>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 1;
}

uint64_t webm::MasterValueParser<webm::Projection>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Projection>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::Projection>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 108))
  {
    if (*(_BYTE *)(a1 + 109))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 104) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 112, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 112, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 108) = 1;
    if (*(_BYTE *)(a1 + 109))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 104) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 104);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 109) = 1;
    if (*(_DWORD *)(a1 + 104) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::Projection>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D9270;
  a1[14] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[26];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[24];
  a1[24] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::Projection>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9270;
  a1[14] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[26];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[24];
  a1[24] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::Projection>::ChildParser<webm::IntParser<webm::ProjectionType>,webm::MasterValueParser<webm::Projection>::SingleChildFactory<webm::IntParser<webm::ProjectionType>,webm::ProjectionType>::BuildParser(webm::MasterValueParser<webm::Projection>*,webm::Projection*)::{lambda(webm::IntParser<webm::ProjectionType>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Projection>::ChildParser<webm::IntParser<webm::ProjectionType>,webm::MasterValueParser<webm::Projection>::SingleChildFactory<webm::IntParser<webm::ProjectionType>,webm::ProjectionType>::BuildParser(webm::MasterValueParser<webm::Projection>*,webm::Projection*)::{lambda(webm::IntParser<webm::ProjectionType>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 104) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::ProjectionType>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

_QWORD *webm::MasterValueParser<webm::Projection>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::Projection>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::Projection>*,webm::Projection*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void webm::MasterValueParser<webm::Projection>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::Projection>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::Projection>*,webm::Projection*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::MasterValueParser<webm::Projection>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::Projection>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::Projection>*,webm::Projection*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::Feed(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = result;
  *a4 = 0;
  v5 = result + 1;
  v6 = result[7];
  if (v6 != result[2] - result[1])
  {
    do
    {
      v14 = 0;
      v9 = v4[1];
      v10 = v4[2];
      if (v9 == v10)
      {
        __break(1u);
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, v10 - (v9 + v6), v9 + v6, &v14);
      v11 = v14;
      *a4 += v14;
      v6 = v4[7] + v11;
      v4[7] = v6;
    }
    while ((_DWORD)result == -1);
    if ((_DWORD)result)
      return result;
  }
  if (*(_DWORD *)(v4[8] + 104) == 1)
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 48))(v4) & 1) != 0)
    return 0;
  v12 = v4[9];
  v13 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v13;
    operator delete(v13);
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
  }
  result = 0;
  *(_OWORD *)v12 = *(_OWORD *)(v4 + 1);
  *(_QWORD *)(v12 + 16) = v4[3];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *(_BYTE *)(v12 + 24) = 1;
  return result;
}

void webm::MasterValueParser<webm::Projection>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Projection>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::Projection>*,webm::Projection*)::{lambda(webm::FloatParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

double webm::MasterValueParser<webm::Projection>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Projection>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::Projection>*,webm::Projection*)::{lambda(webm::FloatParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v7;
  unsigned int v9;
  double result;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  *a4 = 0;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 <= 8)
    {
      v9 = v5 + 1;
      while (1)
      {
        v14 = 0;
        v15 = 0;
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
        if (v7)
          break;
        ++*a4;
        *(_QWORD *)(a1 + 24) = v14 | (*(_QWORD *)(a1 + 24) << 8);
        if ((int)--v9 <= 1)
        {
          v7 = 0;
          break;
        }
      }
    }
    else
    {
      v7 = -1026;
    }
    v11 = *(_DWORD *)(a1 + 32);
    v12 = v11 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 32) = v11 - *(_DWORD *)a4;
    if (v12)
    {
      if (*(_BYTE *)(a1 + 36))
      {
        result = *(float *)(a1 + 24);
        *(double *)(a1 + 8) = result;
        if (v7)
          return result;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        if (v7)
          return result;
      }
    }
    else if (v7)
    {
      return result;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 104) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + 48);
    result = *(double *)(a1 + 8);
    *(double *)v13 = result;
    *(_BYTE *)(v13 + 8) = 1;
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::AudioParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::AudioParser,webm::Audio>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::AudioParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9408;
  a1[10] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[20];
  a1[20] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::AudioParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::AudioParser,webm::Audio>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::AudioParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D9408;
  a1[10] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[20];
  a1[20] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::AudioParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::AudioParser,webm::Audio>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::AudioParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::Audio>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5)
    return v5;
  if (!*(_BYTE *)(a1 + 320))
  {
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 8);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 328) + 1096) != 1)
      goto LABEL_7;
    return v5;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 328) + 1096) == 1)
    return v5;
LABEL_7:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return v5;
  v7 = *(_QWORD *)(a1 + 336);
  v8 = *(_OWORD *)(a1 + 8);
  v9 = *(_OWORD *)(a1 + 24);
  v10 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(v7 + 32) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(v7 + 48) = v10;
  *(_OWORD *)v7 = v8;
  *(_OWORD *)(v7 + 16) = v9;
  *(_BYTE *)(v7 + 64) = 1;
  return v5;
}

uint64_t webm::AudioParser::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 8) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 70) = 0;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 96) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = v3;
  *(_OWORD *)(a1 + 280) = v4;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 296) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 296) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 268) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 268) = 0;
  return 0;
}

uint64_t webm::AudioParser::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  *(_BYTE *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 8) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 77) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 69) = 0;
  return webm::MasterParser::InitAfterSeek(a1 + 80, a2, a3);
}

BOOL webm::MasterValueParser<webm::Audio>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 312))
    return 0;
  v2 = *(_OWORD *)(a1 + 136);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 152);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 312) != 0;
}

BOOL webm::MasterValueParser<webm::Audio>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 72) == 1;
}

uint64_t webm::MasterValueParser<webm::Audio>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Audio>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::AudioParser::OnChildParsed(uint64_t result, uint64_t a2)
{
  *(_BYTE *)(result + 320) = *(_QWORD *)(a2 + 8) != 0;
  return result;
}

_QWORD *webm::MasterValueParser<webm::Audio>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9408;
  a1[10] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[20];
  a1[20] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::Audio>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D9408;
  a1[10] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[20];
  a1[20] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Audio>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 76))
  {
    if (*(_BYTE *)(a1 + 77))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 72) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 80, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 80, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 76) = 1;
    if (*(_BYTE *)(a1 + 77))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 72) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 72);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 77) = 1;
    if (*(_DWORD *)(a1 + 72) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::Audio>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 70) = 0;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 96) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 120) = -1;
  *(_DWORD *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 124) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = v3;
  *(_OWORD *)(a1 + 280) = v4;
  *(_QWORD *)(a1 + 304) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 296) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 296) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 268) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 268) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Audio>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0x40BF400000000000;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 77) = 1;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 69) = 0;
  return webm::MasterParser::InitAfterSeek(a1 + 80, a2, a3);
}

void webm::MasterValueParser<webm::Audio>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Audio>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::Audio>*,webm::Audio*)::{lambda(webm::FloatParser*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

double webm::MasterValueParser<webm::Audio>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Audio>::SingleChildFactory<webm::FloatParser,double>::BuildParser(webm::MasterValueParser<webm::Audio>*,webm::Audio*)::{lambda(webm::FloatParser*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v7;
  unsigned int v9;
  double result;
  int v11;
  BOOL v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  *a4 = 0;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 <= 8)
    {
      v9 = v5 + 1;
      while (1)
      {
        v14 = 0;
        v15 = 0;
        v7 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
        if (v7)
          break;
        ++*a4;
        *(_QWORD *)(a1 + 24) = v14 | (*(_QWORD *)(a1 + 24) << 8);
        if ((int)--v9 <= 1)
        {
          v7 = 0;
          break;
        }
      }
    }
    else
    {
      v7 = -1026;
    }
    v11 = *(_DWORD *)(a1 + 32);
    v12 = v11 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 32) = v11 - *(_DWORD *)a4;
    if (v12)
    {
      if (*(_BYTE *)(a1 + 36))
      {
        result = *(float *)(a1 + 24);
        *(double *)(a1 + 8) = result;
        if (v7)
          return result;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        if (v7)
          return result;
      }
    }
    else if (v7)
    {
      return result;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 72) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v13 = *(_QWORD *)(a1 + 48);
    result = *(double *)(a1 + 8);
    *(double *)v13 = result;
    *(_BYTE *)(v13 + 8) = 1;
  }
  return result;
}

void webm::MasterValueParser<webm::Audio>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Audio>::SingleChildFactory<webm::FloatParser,double,webm::MasterValueParser<webm::Audio>::TagNotifyOnParseComplete>::BuildParser(webm::MasterValueParser<webm::Audio>*,webm::Audio*)::{lambda(webm::FloatParser*)#1},webm::MasterValueParser<webm::Audio>::TagNotifyOnParseComplete>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Audio>::ChildParser<webm::FloatParser,webm::MasterValueParser<webm::Audio>::SingleChildFactory<webm::FloatParser,double,webm::MasterValueParser<webm::Audio>::TagNotifyOnParseComplete>::BuildParser(webm::MasterValueParser<webm::Audio>*,webm::Audio*)::{lambda(webm::FloatParser*)#1},webm::MasterValueParser<webm::Audio>::TagNotifyOnParseComplete>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  uint64_t result;
  unsigned int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  *a4 = 0;
  v5 = *(_DWORD *)(a1 + 32);
  if (v5)
  {
    if (v5 <= 8)
    {
      v9 = v5 + 1;
      while (1)
      {
        v14 = 0;
        v15 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
        if ((_DWORD)result)
          break;
        ++*a4;
        *(_QWORD *)(a1 + 24) = v14 | (*(_QWORD *)(a1 + 24) << 8);
        if ((int)--v9 <= 1)
        {
          result = 0;
          break;
        }
      }
    }
    else
    {
      result = 4294966270;
    }
    v10 = *(_DWORD *)(a1 + 32);
    v11 = v10 == *(_DWORD *)a4;
    *(_DWORD *)(a1 + 32) = v10 - *(_DWORD *)a4;
    if (v11)
    {
      if (*(_BYTE *)(a1 + 36))
      {
        *(double *)(a1 + 8) = *(float *)(a1 + 24);
        if ((_DWORD)result)
          return result;
      }
      else
      {
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 24);
        if ((_DWORD)result)
          return result;
      }
    }
    else if ((_DWORD)result)
    {
      return result;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 40) + 72) != 1
    && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)v13 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)(v13 + 8) = 1;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 72))(v12, v12 + 136);
  }
  return 0;
}

void webm::MasterValueParser<webm::Audio>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Audio>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Audio>*,webm::Audio*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Audio>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Audio>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Audio>*,webm::Audio*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 72) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

_QWORD *webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::ContentEncodingsParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ContentEncodingsParser,webm::ContentEncodings>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::ContentEncodingsParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  *a1 = &off_24C0D95A0;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v9 = *(void **)(v5 - 72);
        if (v9)
        {
          *(_QWORD *)(v5 - 64) = v9;
          operator delete(v9);
        }
        v5 -= 136;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::ContentEncodingsParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ContentEncodingsParser,webm::ContentEncodings>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::ContentEncodingsParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  *a1 = &off_24C0D95A0;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v9 = *(void **)(v5 - 72);
        if (v9)
        {
          *(_QWORD *)(v5 - 64) = v9;
          operator delete(v9);
        }
        v5 -= 136;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::TrackEntry>::ChildParser<webm::ContentEncodingsParser,webm::MasterValueParser<webm::TrackEntry>::SingleChildFactory<webm::ContentEncodingsParser,webm::ContentEncodings>::BuildParser(webm::MasterValueParser<webm::TrackEntry>*,webm::TrackEntry*)::{lambda(webm::ContentEncodingsParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char **v7;
  char *v8;
  char *v9;
  char *v10;
  void *v11;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::ContentEncodings>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 280) + 1096) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(char ***)(a1 + 288);
  v8 = *v7;
  if (*v7)
  {
    v9 = v7[1];
    v10 = *v7;
    if (v9 != v8)
    {
      do
      {
        v11 = (void *)*((_QWORD *)v9 - 9);
        if (v11)
        {
          *((_QWORD *)v9 - 8) = v11;
          operator delete(v11);
        }
        v9 -= 136;
      }
      while (v9 != v8);
      v10 = *v7;
    }
    v7[1] = v8;
    operator delete(v10);
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
  }
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 8);
  v7[2] = *(char **)(a1 + 24);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *((_BYTE *)v7 + 24) = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::ContentEncodings>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  int v14;

  v6 = a1 + 8;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(void **)(a1 + 8);
    if (v8 != v7)
    {
      do
      {
        v10 = *(void **)(v8 - 72);
        if (v10)
        {
          *(_QWORD *)(v8 - 64) = v10;
          operator delete(v10);
        }
        v8 -= 136;
      }
      while (v8 != v7);
      v9 = *(void **)v6;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 22) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  v11 = *(_DWORD *)(a2 + 4);
  v12 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 56) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 80) = -1;
  *(_DWORD *)(a1 + 92) = 0;
  *(_QWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 232) = v11;
  *(_OWORD *)(a1 + 240) = v12;
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  v13 = *(_QWORD *)(a2 + 8);
  if (v13 == -1)
  {
    *(_QWORD *)(a1 + 256) = a3;
    goto LABEL_13;
  }
  *(_QWORD *)(a1 + 256) = v13;
  if (v13)
  {
LABEL_13:
    v14 = 0;
    goto LABEL_14;
  }
  v14 = 8;
LABEL_14:
  *(_DWORD *)(a1 + 228) = v14;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncodings>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v6 = a1 + 8;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(void **)(a1 + 8);
    if (v8 != v7)
    {
      do
      {
        v10 = *(void **)(v8 - 72);
        if (v10)
        {
          *(_QWORD *)(v8 - 64) = v10;
          operator delete(v10);
        }
        v8 -= 136;
      }
      while (v8 != v7);
      v9 = *(void **)v6;
    }
    *(_QWORD *)(a1 + 16) = v7;
    operator delete(v9);
  }
  *(_QWORD *)(v6 + 22) = 0;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(a1 + 37) = 1;
  return webm::MasterParser::InitAfterSeek(a1 + 40, a2, a3);
}

BOOL webm::MasterValueParser<webm::ContentEncodings>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 272))
    return 0;
  v2 = *(_OWORD *)(a1 + 96);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 112);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 272) != 0;
}

BOOL webm::MasterValueParser<webm::ContentEncodings>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 32) == 1;
}

uint64_t webm::MasterValueParser<webm::ContentEncodings>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncodings>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncodings>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 36))
  {
    if (*(_BYTE *)(a1 + 37))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 32) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 40, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 40, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 36) = 1;
    if (*(_BYTE *)(a1 + 37))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 32) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 32);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 37) = 1;
    if (*(_DWORD *)(a1 + 32) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::ContentEncodings>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  *a1 = &off_24C0D95A0;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v9 = *(void **)(v5 - 72);
        if (v9)
        {
          *(_QWORD *)(v5 - 64) = v9;
          operator delete(v9);
        }
        v5 -= 136;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  return a1;
}

void webm::MasterValueParser<webm::ContentEncodings>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  *a1 = &off_24C0D95A0;
  a1[5] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[17];
  if (v2)
  {
    do
    {
      v7 = (_QWORD *)*v2;
      v8 = v2[3];
      v2[3] = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      operator delete(v2);
      v2 = v7;
    }
    while (v7);
  }
  v3 = (void *)a1[15];
  a1[15] = 0;
  if (v3)
    operator delete(v3);
  v4 = a1[1];
  if (v4)
  {
    v5 = a1[2];
    v6 = (void *)a1[1];
    if (v5 != v4)
    {
      do
      {
        v9 = *(void **)(v5 - 72);
        if (v9)
        {
          *(_QWORD *)(v5 - 64) = v9;
          operator delete(v9);
        }
        v5 -= 136;
      }
      while (v5 != v4);
      v6 = (void *)a1[1];
    }
    a1[2] = v4;
    operator delete(v6);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::MasterValueParser<webm::ContentEncodings>::ChildParser<webm::ContentEncodingParser,webm::MasterValueParser<webm::ContentEncodings>::RepeatedChildFactory<webm::ContentEncodingParser,webm::ContentEncoding>::BuildParser(webm::MasterValueParser<webm::ContentEncodings>*,webm::ContentEncodings*)::{lambda(webm::ContentEncodingParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D9660;
  a1[18] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[30];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[28];
  a1[28] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::ContentEncodings>::ChildParser<webm::ContentEncodingParser,webm::MasterValueParser<webm::ContentEncodings>::RepeatedChildFactory<webm::ContentEncodingParser,webm::ContentEncoding>::BuildParser(webm::MasterValueParser<webm::ContentEncodings>*,webm::ContentEncodings*)::{lambda(webm::ContentEncodingParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9660;
  a1[18] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[30];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[28];
  a1[28] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ContentEncodings>::ChildParser<webm::ContentEncodingParser,webm::MasterValueParser<webm::ContentEncodings>::RepeatedChildFactory<webm::ContentEncodingParser,webm::ContentEncoding>::BuildParser(webm::MasterValueParser<webm::ContentEncodings>*,webm::ContentEncodings*)::{lambda(webm::ContentEncodingParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  char **v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  void *v37;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::ContentEncoding>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 384) + 32) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(char ***)(a1 + 392);
  v9 = *v7;
  v8 = v7[1];
  if (v8 - *v7 != 136)
    goto LABEL_8;
  if (v9 == v8)
    goto LABEL_35;
  if (v9[128])
  {
LABEL_8:
    v10 = (_OWORD *)(a1 + 8);
    v11 = v7[2];
    if (v8 < v11)
      goto LABEL_9;
    goto LABEL_15;
  }
  do
  {
    v16 = (void *)*((_QWORD *)v8 - 9);
    if (v16)
    {
      *((_QWORD *)v8 - 8) = v16;
      operator delete(v16);
    }
    v8 -= 136;
  }
  while (v8 != v9);
  v7[1] = v9;
  v7 = *(char ***)(a1 + 392);
  v8 = v7[1];
  v11 = v7[2];
  v10 = (_OWORD *)(a1 + 8);
  if (v8 >= v11)
  {
LABEL_15:
    v17 = 0xF0F0F0F0F0F0F0F1 * ((v8 - *v7) >> 3);
    if (v17 + 1 > 0x1E1E1E1E1E1E1E1)
      goto LABEL_36;
    v18 = 0xF0F0F0F0F0F0F0F1 * ((v11 - *v7) >> 3);
    v19 = 2 * v18;
    if (2 * v18 <= v17 + 1)
      v19 = v17 + 1;
    if (v18 >= 0xF0F0F0F0F0F0F0)
      v20 = 0x1E1E1E1E1E1E1E1;
    else
      v20 = v19;
    if (v20)
    {
      if (v20 > 0x1E1E1E1E1E1E1E1)
        std::__throw_bad_array_new_length[abi:sn180100]();
      v21 = 136 * v20;
      v22 = (char *)operator new(136 * v20);
      v23 = &v22[v21];
      v24 = v10[1];
      v25 = &v22[136 * v17];
      *(_OWORD *)v25 = *v10;
      *((_OWORD *)v25 + 1) = v24;
      *(_OWORD *)(v25 + 25) = *(_OWORD *)((char *)v10 + 25);
      v26 = *(_OWORD *)(a1 + 72);
      *((_OWORD *)v25 + 3) = *(_OWORD *)(a1 + 56);
      *((_OWORD *)v25 + 4) = v26;
      *((_QWORD *)v25 + 10) = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      v25[88] = *(_BYTE *)(a1 + 96);
      v27 = *(_OWORD *)(a1 + 104);
      *((_QWORD *)v25 + 14) = *(_QWORD *)(a1 + 120);
      *((_OWORD *)v25 + 6) = v27;
      v25[120] = *(_BYTE *)(a1 + 128);
      v25[128] = 1;
      v15 = v25 + 136;
      v28 = *v7;
      v29 = v7[1];
      if (v29 == *v7)
      {
        *v7 = v25;
        v7[1] = v15;
        v7[2] = v23;
      }
      else
      {
        v30 = 0;
        do
        {
          v31 = &v25[v30];
          v32 = &v29[v30];
          v33 = *(_OWORD *)&v29[v30 - 136];
          v34 = *(_OWORD *)&v29[v30 - 120];
          *(_OWORD *)(v31 - 111) = *(_OWORD *)&v29[v30 - 111];
          *(_OWORD *)(v31 - 120) = v34;
          *(_OWORD *)(v31 - 136) = v33;
          *(_OWORD *)(v31 - 88) = *(_OWORD *)&v29[v30 - 88];
          *(_OWORD *)(v31 - 72) = *(_OWORD *)&v29[v30 - 72];
          *((_QWORD *)v31 - 7) = *(_QWORD *)&v29[v30 - 56];
          *((_QWORD *)v32 - 9) = 0;
          *((_QWORD *)v32 - 8) = 0;
          *((_QWORD *)v32 - 7) = 0;
          *(v31 - 48) = v29[v30 - 48];
          v35 = *(_OWORD *)&v29[v30 - 40];
          *((_QWORD *)v31 - 3) = *(_QWORD *)&v29[v30 - 24];
          *(_OWORD *)(v31 - 40) = v35;
          *(v31 - 16) = v29[v30 - 16];
          *(v31 - 8) = v29[v30 - 8];
          v30 -= 136;
        }
        while (&v29[v30] != v28);
        v29 = *v7;
        v36 = v7[1];
        *v7 = &v25[v30];
        v7[1] = v15;
        v7[2] = v23;
        while (v36 != v29)
        {
          v37 = (void *)*((_QWORD *)v36 - 9);
          if (v37)
          {
            *((_QWORD *)v36 - 8) = v37;
            operator delete(v37);
          }
          v36 -= 136;
        }
      }
      if (v29)
        operator delete(v29);
      goto LABEL_34;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    abort();
  }
LABEL_9:
  if (!v8)
    goto LABEL_35;
  v12 = *v10;
  v13 = v10[1];
  *(_OWORD *)(v8 + 25) = *(_OWORD *)((char *)v10 + 25);
  *(_OWORD *)v8 = v12;
  *((_OWORD *)v8 + 1) = v13;
  *((_OWORD *)v8 + 3) = *(_OWORD *)(a1 + 56);
  *((_QWORD *)v8 + 9) = 0;
  *((_QWORD *)v8 + 10) = 0;
  *((_QWORD *)v8 + 8) = 0;
  *((_OWORD *)v8 + 4) = *(_OWORD *)(a1 + 72);
  *((_QWORD *)v8 + 10) = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v8[88] = *(_BYTE *)(a1 + 96);
  v14 = *(_OWORD *)(a1 + 104);
  *((_QWORD *)v8 + 14) = *(_QWORD *)(a1 + 120);
  *((_OWORD *)v8 + 6) = v14;
  v8[120] = *(_BYTE *)(a1 + 128);
  v8[128] = 1;
  v15 = v8 + 136;
LABEL_34:
  v7[1] = v15;
  return v5;
}

uint64_t webm::MasterValueParser<webm::ContentEncoding>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  v7 = a1 + 72;
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(v7 - 64) = 0;
  *(_BYTE *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 1;
  *(_BYTE *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_BYTE *)(v7 - 24) = 0;
  *(_QWORD *)(v7 - 16) = 0;
  *(_BYTE *)(v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v6);
  }
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 140) = 0;
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 184) = -1;
  *(_QWORD *)(a1 + 188) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = v8;
  *(_OWORD *)(a1 + 344) = v9;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 == -1)
  {
    *(_QWORD *)(a1 + 360) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 360) = v10;
    if (!v10)
    {
      *(_DWORD *)(a1 + 332) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 332) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncoding>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;

  v7 = a1 + 72;
  v6 = *(void **)(a1 + 72);
  *(_QWORD *)(v7 - 64) = 0;
  *(_BYTE *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 1;
  *(_BYTE *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_BYTE *)(v7 - 24) = 0;
  *(_QWORD *)(v7 - 16) = 0;
  *(_BYTE *)(v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 80) = v6;
    operator delete(v6);
  }
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_WORD *)(a1 + 140) = 256;
  *(_BYTE *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  return webm::MasterParser::InitAfterSeek(a1 + 144, a2, a3);
}

BOOL webm::MasterValueParser<webm::ContentEncoding>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 376))
    return 0;
  v2 = *(_OWORD *)(a1 + 200);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 216);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 376) != 0;
}

BOOL webm::MasterValueParser<webm::ContentEncoding>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 136) == 1;
}

uint64_t webm::MasterValueParser<webm::ContentEncoding>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncoding>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncoding>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 140))
  {
    if (*(_BYTE *)(a1 + 141))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 136) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 144, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 144, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 140) = 1;
    if (*(_BYTE *)(a1 + 141))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 136) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 136);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 141) = 1;
    if (*(_DWORD *)(a1 + 136) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::ContentEncoding>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D9660;
  a1[18] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[30];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[28];
  a1[28] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::ContentEncoding>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9660;
  a1[18] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[30];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[28];
  a1[28] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[9];
  if (v4)
  {
    a1[10] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::ContentEncoding>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::ContentEncoding>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::ContentEncoding>*,webm::ContentEncoding*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ContentEncoding>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::ContentEncoding>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::ContentEncoding>*,webm::ContentEncoding*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 136) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

void webm::MasterValueParser<webm::ContentEncoding>::ChildParser<webm::IntParser<webm::ContentEncodingType>,webm::MasterValueParser<webm::ContentEncoding>::SingleChildFactory<webm::IntParser<webm::ContentEncodingType>,webm::ContentEncodingType>::BuildParser(webm::MasterValueParser<webm::ContentEncoding>*,webm::ContentEncoding*)::{lambda(webm::IntParser<webm::ContentEncodingType>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ContentEncoding>::ChildParser<webm::IntParser<webm::ContentEncodingType>,webm::MasterValueParser<webm::ContentEncoding>::SingleChildFactory<webm::IntParser<webm::ContentEncodingType>,webm::ContentEncodingType>::BuildParser(webm::MasterValueParser<webm::ContentEncoding>*,webm::ContentEncoding*)::{lambda(webm::IntParser<webm::ContentEncodingType>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 136) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::ContentEncodingType>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

_QWORD *webm::MasterValueParser<webm::ContentEncoding>::ChildParser<webm::ContentEncryptionParser,webm::MasterValueParser<webm::ContentEncoding>::SingleChildFactory<webm::ContentEncryptionParser,webm::ContentEncryption>::BuildParser(webm::MasterValueParser<webm::ContentEncoding>*,webm::ContentEncoding*)::{lambda(webm::ContentEncryptionParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D97B0;
  a1[11] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[23];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[21];
  a1[21] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::ContentEncoding>::ChildParser<webm::ContentEncryptionParser,webm::MasterValueParser<webm::ContentEncoding>::SingleChildFactory<webm::ContentEncryptionParser,webm::ContentEncryption>::BuildParser(webm::MasterValueParser<webm::ContentEncoding>*,webm::ContentEncoding*)::{lambda(webm::ContentEncryptionParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D97B0;
  a1[11] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[23];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[21];
  a1[21] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ContentEncoding>::ChildParser<webm::ContentEncryptionParser,webm::MasterValueParser<webm::ContentEncoding>::SingleChildFactory<webm::ContentEncryptionParser,webm::ContentEncryption>::BuildParser(webm::MasterValueParser<webm::ContentEncoding>*,webm::ContentEncoding*)::{lambda(webm::ContentEncryptionParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  __int128 v10;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::ContentEncryption>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 328) + 136) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 336);
  v8 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 8) = *(_BYTE *)(a1 + 16);
  *(_QWORD *)v7 = v8;
  v9 = *(void **)(v7 + 16);
  if (v9)
  {
    *(_QWORD *)(v7 + 24) = v9;
    operator delete(v9);
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
  }
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(v7 + 32) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(v7 + 40) = *(_BYTE *)(a1 + 48);
  v10 = *(_OWORD *)(a1 + 56);
  *(_BYTE *)(v7 + 64) = *(_BYTE *)(a1 + 72);
  *(_OWORD *)(v7 + 48) = v10;
  *(_BYTE *)(v7 + 72) = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::ContentEncryption>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  int v8;
  __int128 v9;
  uint64_t v10;

  v7 = a1 + 24;
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(v7 - 16) = 0;
  *(_BYTE *)(v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 84) = 0;
  v8 = *(_DWORD *)(a2 + 4);
  v9 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 104) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 128) = -1;
  *(_QWORD *)(a1 + 132) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_DWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 280) = v8;
  *(_OWORD *)(a1 + 288) = v9;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  v10 = *(_QWORD *)(a2 + 8);
  if (v10 == -1)
  {
    *(_QWORD *)(a1 + 304) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 304) = v10;
    if (!v10)
    {
      *(_DWORD *)(a1 + 276) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 276) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncryption>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;

  v7 = a1 + 24;
  v6 = *(void **)(a1 + 24);
  *(_QWORD *)(v7 - 16) = 0;
  *(_BYTE *)(v7 - 8) = 0;
  if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    operator delete(v6);
  }
  *(_QWORD *)v7 = 0;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 84) = 256;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  return webm::MasterParser::InitAfterSeek(a1 + 88, a2, a3);
}

BOOL webm::MasterValueParser<webm::ContentEncryption>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 320))
    return 0;
  v2 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 160);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 320) != 0;
}

BOOL webm::MasterValueParser<webm::ContentEncryption>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 80) == 1;
}

uint64_t webm::MasterValueParser<webm::ContentEncryption>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncryption>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncryption>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 84))
  {
    if (*(_BYTE *)(a1 + 85))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 80) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 88, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 88, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 84) = 1;
    if (*(_BYTE *)(a1 + 85))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 80) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 80);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 85) = 1;
    if (*(_DWORD *)(a1 + 80) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::ContentEncryption>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v6;
  uint64_t v7;

  *a1 = &off_24C0D97B0;
  a1[11] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[23];
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)a1[21];
  a1[21] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  return a1;
}

void webm::MasterValueParser<webm::ContentEncryption>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D97B0;
  a1[11] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[23];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[21];
  a1[21] = 0;
  if (v3)
    operator delete(v3);
  v4 = (void *)a1[3];
  if (v4)
  {
    a1[4] = v4;
    operator delete(v4);
  }
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::ContentEncryption>::ChildParser<webm::IntParser<webm::ContentEncAlgo>,webm::MasterValueParser<webm::ContentEncryption>::SingleChildFactory<webm::IntParser<webm::ContentEncAlgo>,webm::ContentEncAlgo>::BuildParser(webm::MasterValueParser<webm::ContentEncryption>*,webm::ContentEncryption*)::{lambda(webm::IntParser<webm::ContentEncAlgo>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ContentEncryption>::ChildParser<webm::IntParser<webm::ContentEncAlgo>,webm::MasterValueParser<webm::ContentEncryption>::SingleChildFactory<webm::IntParser<webm::ContentEncAlgo>,webm::ContentEncAlgo>::BuildParser(webm::MasterValueParser<webm::ContentEncryption>*,webm::ContentEncryption*)::{lambda(webm::IntParser<webm::ContentEncAlgo>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 80) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::ContentEncAlgo>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

_QWORD *webm::MasterValueParser<webm::ContentEncryption>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::ContentEncryption>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::ContentEncryption>*,webm::ContentEncryption*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void webm::MasterValueParser<webm::ContentEncryption>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::ContentEncryption>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::ContentEncryption>*,webm::ContentEncryption*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::~ChildParser(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_24C0D7BD8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x20BD0ADECLL);
}

_QWORD *webm::MasterValueParser<webm::ContentEncryption>::ChildParser<webm::ByteParser<std::vector<unsigned char>>,webm::MasterValueParser<webm::ContentEncryption>::SingleChildFactory<webm::ByteParser<std::vector<unsigned char>>,std::vector<unsigned char>>::BuildParser(webm::MasterValueParser<webm::ContentEncryption>*,webm::ContentEncryption*)::{lambda(webm::ByteParser<std::vector<unsigned char>>*)#1}>::Feed(_QWORD *result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v4 = result;
  *a4 = 0;
  v5 = result + 1;
  v6 = result[7];
  if (v6 != result[2] - result[1])
  {
    do
    {
      v14 = 0;
      v9 = v4[1];
      v10 = v4[2];
      if (v9 == v10)
      {
        __break(1u);
        return result;
      }
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a3 + 16))(a3, v10 - (v9 + v6), v9 + v6, &v14);
      v11 = v14;
      *a4 += v14;
      v6 = v4[7] + v11;
      v4[7] = v6;
    }
    while ((_DWORD)result == -1);
    if ((_DWORD)result)
      return result;
  }
  if (*(_DWORD *)(v4[8] + 80) == 1)
    return 0;
  if (((*(uint64_t (**)(_QWORD *))(*v4 + 48))(v4) & 1) != 0)
    return 0;
  v12 = v4[9];
  v13 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v13;
    operator delete(v13);
    *(_QWORD *)v12 = 0;
    *(_QWORD *)(v12 + 8) = 0;
    *(_QWORD *)(v12 + 16) = 0;
  }
  result = 0;
  *(_OWORD *)v12 = *(_OWORD *)(v4 + 1);
  *(_QWORD *)(v12 + 16) = v4[3];
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  *(_BYTE *)(v12 + 24) = 1;
  return result;
}

_QWORD *webm::MasterValueParser<webm::ContentEncryption>::ChildParser<webm::ContentEncAesSettingsParser,webm::MasterValueParser<webm::ContentEncryption>::SingleChildFactory<webm::ContentEncAesSettingsParser,webm::ContentEncAesSettings>::BuildParser(webm::MasterValueParser<webm::ContentEncryption>*,webm::ContentEncryption*)::{lambda(webm::ContentEncAesSettingsParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9900;
  a1[4] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[14];
  a1[14] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::ContentEncryption>::ChildParser<webm::ContentEncAesSettingsParser,webm::MasterValueParser<webm::ContentEncryption>::SingleChildFactory<webm::ContentEncAesSettingsParser,webm::ContentEncAesSettings>::BuildParser(webm::MasterValueParser<webm::ContentEncryption>*,webm::ContentEncryption*)::{lambda(webm::ContentEncAesSettingsParser*)#1}>::~ChildParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D9900;
  a1[4] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[14];
  a1[14] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ContentEncryption>::ChildParser<webm::ContentEncAesSettingsParser,webm::MasterValueParser<webm::ContentEncryption>::SingleChildFactory<webm::ContentEncAesSettingsParser,webm::ContentEncAesSettings>::BuildParser(webm::MasterValueParser<webm::ContentEncryption>*,webm::ContentEncryption*)::{lambda(webm::ContentEncAesSettingsParser*)#1}>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;

  *a4 = 0;
  v5 = webm::MasterValueParser<webm::ContentEncAesSettings>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 272) + 80) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 280);
  *(_OWORD *)v7 = *(_OWORD *)(a1 + 8);
  *(_BYTE *)(v7 + 16) = 1;
  return v5;
}

uint64_t webm::MasterValueParser<webm::ContentEncAesSettings>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 0;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 48) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 72) = -1;
  *(_DWORD *)(a1 + 84) = 0;
  *(_QWORD *)(a1 + 76) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = v3;
  *(_OWORD *)(a1 + 232) = v4;
  *(_QWORD *)(a1 + 256) = 0;
  *(_BYTE *)(a1 + 264) = 0;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == -1)
  {
    *(_QWORD *)(a1 + 248) = a3;
  }
  else
  {
    *(_QWORD *)(a1 + 248) = v5;
    if (!v5)
    {
      *(_DWORD *)(a1 + 220) = 8;
      return 0;
    }
  }
  *(_DWORD *)(a1 + 220) = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncAesSettings>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 256;
  return webm::MasterParser::InitAfterSeek(a1 + 32, a2, a3);
}

BOOL webm::MasterValueParser<webm::ContentEncAesSettings>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 264))
    return 0;
  v2 = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 104);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 264) != 0;
}

BOOL webm::MasterValueParser<webm::ContentEncAesSettings>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) == 1;
}

uint64_t webm::MasterValueParser<webm::ContentEncAesSettings>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncAesSettings>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::ContentEncAesSettings>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 28))
  {
    if (*(_BYTE *)(a1 + 29))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 24) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 32, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 32, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 28) = 1;
    if (*(_BYTE *)(a1 + 29))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 24) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 24);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 29) = 1;
    if (*(_DWORD *)(a1 + 24) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

_QWORD *webm::MasterValueParser<webm::ContentEncAesSettings>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &off_24C0D9900;
  a1[4] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = (void *)a1[14];
  a1[14] = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

void webm::MasterValueParser<webm::ContentEncAesSettings>::~MasterValueParser(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *a1 = &off_24C0D9900;
  a1[4] = &off_24C0D70E8;
  v2 = (_QWORD *)a1[16];
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)a1[14];
  a1[14] = 0;
  if (v3)
    operator delete(v3);
  JUMPOUT(0x20BD0ADECLL);
}

void webm::MasterValueParser<webm::ContentEncAesSettings>::ChildParser<webm::IntParser<webm::AesSettingsCipherMode>,webm::MasterValueParser<webm::ContentEncAesSettings>::SingleChildFactory<webm::IntParser<webm::AesSettingsCipherMode>,webm::AesSettingsCipherMode>::BuildParser(webm::MasterValueParser<webm::ContentEncAesSettings>*,webm::ContentEncAesSettings*)::{lambda(webm::IntParser<webm::AesSettingsCipherMode>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::ContentEncAesSettings>::ChildParser<webm::IntParser<webm::AesSettingsCipherMode>,webm::MasterValueParser<webm::ContentEncAesSettings>::SingleChildFactory<webm::IntParser<webm::AesSettingsCipherMode>,webm::AesSettingsCipherMode>::BuildParser(webm::MasterValueParser<webm::ContentEncAesSettings>*,webm::ContentEncAesSettings*)::{lambda(webm::IntParser<webm::AesSettingsCipherMode>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v13 = 0;
      v14 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v13, &v14);
      if ((_DWORD)result)
        break;
      v11 = *a4 + 1;
      *a4 = v11;
      *(_QWORD *)(a1 + 8) = v13 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - v11;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 24) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v12 + 8) = 1;
  return result;
}

uint64_t webm::IntParser<webm::AesSettingsCipherMode>::Init(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 > 8)
    return 4294966270;
  *(_DWORD *)(a1 + 24) = v2;
  *(_DWORD *)(a1 + 28) = v2;
  if (v2)
    *(_QWORD *)(a1 + 8) = 0;
  else
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 16);
  return 0;
}

void webm::TrackEntry::~TrackEntry(webm::TrackEntry *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = *((_QWORD *)this + 132);
  if (v2)
  {
    v3 = *((_QWORD *)this + 133);
    v4 = (void *)*((_QWORD *)this + 132);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 72);
        if (v5)
        {
          *(_QWORD *)(v3 - 64) = v5;
          operator delete(v5);
        }
        v3 -= 136;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 132);
    }
    *((_QWORD *)this + 133) = v2;
    operator delete(v4);
  }
  v6 = (void *)*((_QWORD *)this + 111);
  if (v6)
  {
    *((_QWORD *)this + 112) = v6;
    operator delete(v6);
  }
  if ((*((char *)this + 223) & 0x80000000) == 0)
  {
    v7 = (void *)*((_QWORD *)this + 21);
    if (!v7)
      goto LABEL_14;
    goto LABEL_13;
  }
  operator delete(*((void **)this + 25));
  v7 = (void *)*((_QWORD *)this + 21);
  if (v7)
  {
LABEL_13:
    *((_QWORD *)this + 22) = v7;
    operator delete(v7);
  }
LABEL_14:
  if (*((char *)this + 159) < 0)
  {
    operator delete(*((void **)this + 17));
    if ((*((char *)this + 127) & 0x80000000) == 0)
    {
LABEL_16:
      if ((*((char *)this + 95) & 0x80000000) == 0)
        return;
LABEL_22:
      operator delete(*((void **)this + 9));
      return;
    }
  }
  else if ((*((char *)this + 127) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(*((void **)this + 13));
  if (*((char *)this + 95) < 0)
    goto LABEL_22;
}

uint64_t webm::TrackEntry::operator=(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  void **v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  void *v14;
  void **v15;
  __int128 v16;
  __int128 v17;
  char v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  void *v28;
  void *v29;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_OWORD *)(a2 + 16);
  v5 = *(_OWORD *)(a2 + 32);
  v6 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  v7 = a1 + 72;
  v8 = (__int128 *)(a2 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)v7);
  v9 = *v8;
  *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
  *(_OWORD *)v7 = v9;
  *(_BYTE *)(a2 + 95) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v10 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a2 + 127) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  v12 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0)
    operator delete(*v12);
  v13 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)v12 = v13;
  *(_BYTE *)(a2 + 159) = 0;
  *(_BYTE *)(a2 + 136) = 0;
  v14 = *(void **)(a1 + 168);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  if (v14)
  {
    *(_QWORD *)(a1 + 176) = v14;
    operator delete(v14);
    *(_QWORD *)(a1 + 168) = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
  }
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_BYTE *)(a1 + 192) = *(_BYTE *)(a2 + 192);
  v15 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0)
    operator delete(*v15);
  v16 = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_OWORD *)v15 = v16;
  *(_BYTE *)(a2 + 223) = 0;
  *(_BYTE *)(a2 + 200) = 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  v17 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 241) = *(_OWORD *)(a2 + 241);
  *(_OWORD *)(a1 + 232) = v17;
  memcpy((void *)(a1 + 264), (const void *)(a2 + 264), 0x259uLL);
  v18 = *(_BYTE *)(a2 + 880);
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a2 + 872);
  *(_BYTE *)(a1 + 880) = v18;
  v19 = *(void **)(a1 + 888);
  if (v19)
  {
    *(_QWORD *)(a1 + 896) = v19;
    operator delete(v19);
    *(_QWORD *)(a1 + 888) = 0;
    *(_QWORD *)(a1 + 896) = 0;
    *(_QWORD *)(a1 + 904) = 0;
  }
  *(_QWORD *)(a1 + 888) = *(_QWORD *)(a2 + 888);
  *(_QWORD *)(a1 + 896) = *(_QWORD *)(a2 + 896);
  *(_QWORD *)(a1 + 904) = *(_QWORD *)(a2 + 904);
  *(_QWORD *)(a2 + 896) = 0;
  *(_QWORD *)(a2 + 888) = 0;
  *(_QWORD *)(a2 + 904) = 0;
  *(_BYTE *)(a1 + 912) = *(_BYTE *)(a2 + 912);
  v20 = *(_OWORD *)(a2 + 920);
  v21 = *(_OWORD *)(a2 + 936);
  *(_OWORD *)(a1 + 945) = *(_OWORD *)(a2 + 945);
  *(_OWORD *)(a1 + 920) = v20;
  *(_OWORD *)(a1 + 936) = v21;
  *(_BYTE *)(a1 + 968) = *(_BYTE *)(a2 + 968);
  *(_BYTE *)(a1 + 976) = *(_BYTE *)(a2 + 976);
  *(_OWORD *)(a1 + 984) = *(_OWORD *)(a2 + 984);
  v22 = *(_OWORD *)(a2 + 1000);
  v23 = *(_OWORD *)(a2 + 1016);
  v24 = *(_OWORD *)(a2 + 1032);
  *(_BYTE *)(a1 + 1048) = *(_BYTE *)(a2 + 1048);
  *(_OWORD *)(a1 + 1016) = v23;
  *(_OWORD *)(a1 + 1032) = v24;
  *(_OWORD *)(a1 + 1000) = v22;
  v25 = *(_QWORD *)(a1 + 1056);
  if (v25)
  {
    v26 = (void **)(a1 + 1056);
    v27 = *(_QWORD *)(a1 + 1064);
    v28 = *(void **)(a1 + 1056);
    if (v27 != v25)
    {
      do
      {
        v29 = *(void **)(v27 - 72);
        if (v29)
        {
          *(_QWORD *)(v27 - 64) = v29;
          operator delete(v29);
        }
        v27 -= 136;
      }
      while (v27 != v25);
      v28 = *v26;
    }
    *(_QWORD *)(a1 + 1064) = v25;
    operator delete(v28);
    *v26 = 0;
    *(_QWORD *)(a1 + 1064) = 0;
    *(_QWORD *)(a1 + 1072) = 0;
  }
  *(_OWORD *)(a1 + 1056) = *(_OWORD *)(a2 + 1056);
  *(_QWORD *)(a1 + 1072) = *(_QWORD *)(a2 + 1072);
  *(_QWORD *)(a2 + 1072) = 0;
  *(_OWORD *)(a2 + 1056) = 0u;
  *(_BYTE *)(a1 + 1080) = *(_BYTE *)(a2 + 1080);
  return a1;
}

uint64_t webm::SizeParser::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  LODWORD(result) = webm::VarIntParser::Feed(a1 + 8, a2, a3, a4);
  if ((_DWORD)result == -1030)
    return 4294966270;
  else
    return result;
}

void webm::SizeParser::~SizeParser(webm::SizeParser *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::SkipParser::Init(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 == -1)
    return 4294966270;
  result = 0;
  *(_QWORD *)(a1 + 8) = v2;
  return result;
}

uint64_t webm::SkipParser::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  *a4 = 0;
  if (!*(_QWORD *)(a1 + 8))
    return 0;
  do
  {
    v9 = 0;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 24))(a3);
    v8 = v9;
    *a4 += v9;
    *(_QWORD *)(a1 + 8) -= v8;
  }
  while ((_DWORD)result == -1);
  return result;
}

void webm::SkipParser::~SkipParser(webm::SkipParser *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::UnknownParser::Init(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  __int128 v4;

  if (*((_QWORD *)a2 + 1) == -1)
    return 4294966269;
  result = 0;
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 1);
  return result;
}

uint64_t webm::UnknownParser::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v5 = (_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, a1 + 8, a3, a1 + 32);
  *a4 = v6 - *v5;
  return result;
}

void webm::UnknownParser::~UnknownParser(webm::UnknownParser *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::VarIntParser::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;

  *a4 = 0;
  v7 = *(_DWORD *)(a1 + 8);
  if (v7 == -1)
  {
    v14 = 0;
    v15 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
    if ((_DWORD)result)
      return result;
    ++*a4;
    v10 = v14;
    if (!v14)
      return 4294966266;
    v11 = 0;
    do
      v12 = v11++;
    while (((v14 << v12) & 0x80) == 0);
    v7 = v12;
    *(_DWORD *)(a1 + 8) = v12;
    *(_DWORD *)(a1 + 12) = v12;
    *(_QWORD *)(a1 + 16) = v10;
    if (v12 > 8u)
      goto LABEL_3;
  }
  else if (v7 > 8)
  {
LABEL_3:
    v8 = 0;
    result = 4294966270;
    goto LABEL_16;
  }
  if (!v7)
  {
    v8 = 0;
    goto LABEL_15;
  }
  v14 = 0;
  v15 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
  if ((_DWORD)result)
  {
    v13 = 0;
LABEL_12:
    v8 = v13;
    goto LABEL_16;
  }
  v8 = v7;
  *(_QWORD *)(a1 + 16) = v14 | (*(_QWORD *)(a1 + 16) << 8);
  if (v7 == 1)
    goto LABEL_15;
  v14 = 0;
  v15 = 0;
  v13 = 1;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
  if ((_DWORD)result)
    goto LABEL_12;
  *(_QWORD *)(a1 + 16) = v14 | (*(_QWORD *)(a1 + 16) << 8);
  if (v7 == 2)
    goto LABEL_15;
  v14 = 0;
  v15 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
  if ((_DWORD)result)
  {
    v8 = 2;
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 16) = v14 | (*(_QWORD *)(a1 + 16) << 8);
  if (v7 == 3)
    goto LABEL_15;
  v14 = 0;
  v15 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
  if ((_DWORD)result)
  {
    v8 = 3;
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 16) = v14 | (*(_QWORD *)(a1 + 16) << 8);
  if (v7 == 4)
    goto LABEL_15;
  v14 = 0;
  v15 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
  if ((_DWORD)result)
  {
    v8 = 4;
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 16) = v14 | (*(_QWORD *)(a1 + 16) << 8);
  if (v7 == 5)
    goto LABEL_15;
  v14 = 0;
  v15 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
  if ((_DWORD)result)
  {
    v8 = 5;
    goto LABEL_16;
  }
  *(_QWORD *)(a1 + 16) = v14 | (*(_QWORD *)(a1 + 16) << 8);
  if (v7 == 6)
  {
LABEL_15:
    result = 0;
    goto LABEL_16;
  }
  v14 = 0;
  v15 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a1 + 16) = v14 | (*(_QWORD *)(a1 + 16) << 8);
    if (v7 != 7)
    {
      v14 = 0;
      v15 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v14, &v15);
      if ((_DWORD)result)
        v8 = 7;
      else
        *(_QWORD *)(a1 + 16) = v14 | (*(_QWORD *)(a1 + 16) << 8);
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  v8 = 6;
LABEL_16:
  *a4 += v8;
  *(_DWORD *)(a1 + 8) -= v8;
  if (!(_DWORD)result)
    *(_QWORD *)(a1 + 16) &= 0xFFFFFFFFFFFFFFFFLL >> (-7 * *(_DWORD *)(a1 + 12) + 57);
  return result;
}

void webm::VarIntParser::~VarIntParser(webm::VarIntParser *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

double webm::VirtualBlockParser::Init(uint64_t a1, uint64_t a2)
{
  double result;

  if ((unint64_t)(*(_QWORD *)(a2 + 8) + 1) >= 5)
  {
    *(_DWORD *)(a1 + 72) = -1;
    *(_QWORD *)(a1 + 88) = 2;
    result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
    *(_QWORD *)(a1 + 76) = 0;
    *(_DWORD *)(a1 + 84) = 0;
    *(_DWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  }
  return result;
}

uint64_t webm::VoidParser::Init(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  __int128 v4;

  if (*((_QWORD *)a2 + 1) == -1)
    return 4294966270;
  result = 0;
  v4 = *a2;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 1);
  return result;
}

uint64_t webm::VoidParser::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;

  v5 = (_QWORD *)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a1 + 8, a3, a1 + 32);
  *a4 = v6 - *v5;
  return result;
}

void webm::VoidParser::~VoidParser(webm::VoidParser *this)
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t vp9_parser::Vp9HeaderParser::ParseUncompressedHeader(vp9_parser::Vp9HeaderParser *this, const unsigned __int8 *a2, unint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  _BOOL4 v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  vp9_parser::Vp9HeaderParser *v25;
  int Literal;
  int v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  char v65;
  unsigned int v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  BOOL v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  _BOOL4 v74;
  unint64_t v75;
  int v76;
  _BOOL4 v77;
  unint64_t v78;
  int v79;
  _BOOL4 v80;
  unint64_t v81;
  int v82;
  _BOOL4 v83;
  unint64_t v84;
  int v85;
  unsigned int v86;
  unint64_t v87;
  unint64_t v88;
  BOOL v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  _BOOL4 v93;
  unint64_t v94;
  int v95;
  _BOOL4 v96;
  unint64_t v97;
  int v98;
  _BOOL4 v99;
  unint64_t v100;
  int v101;
  _BOOL4 v102;
  unint64_t v103;
  int v104;
  unsigned int v105;
  unint64_t v106;
  unint64_t v107;
  BOOL v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  _BOOL4 v112;
  unint64_t v113;
  int v114;
  _BOOL4 v115;
  unint64_t v116;
  int v117;
  _BOOL4 v118;
  unint64_t v119;
  int v120;
  _BOOL4 v121;
  unint64_t v122;
  int v123;
  unsigned int v124;
  unint64_t v125;
  unint64_t v126;
  BOOL v127;
  unint64_t v128;
  unint64_t v129;
  int v130;
  _BOOL4 v131;
  unint64_t v132;
  int v133;
  _BOOL4 v134;
  unint64_t v135;
  int v136;
  _BOOL4 v137;
  unint64_t v138;
  int v139;
  _BOOL4 v140;
  unint64_t v141;
  int v142;
  unsigned int v143;
  unint64_t v144;
  unint64_t v145;
  BOOL v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  _BOOL4 v150;
  unint64_t v151;
  int v152;
  _BOOL4 v153;
  unint64_t v154;
  int v155;
  _BOOL4 v156;
  unint64_t v157;
  int v158;
  _BOOL4 v159;
  unint64_t v160;
  int v161;
  unsigned int v162;
  unint64_t v163;
  BOOL v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  _BOOL4 v168;
  unint64_t v169;
  int v170;
  _BOOL4 v171;
  unint64_t v172;
  int v173;
  _BOOL4 v174;
  unint64_t v175;
  int v176;
  _BOOL4 v177;
  unint64_t v178;
  int v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  BOOL v190;
  BOOL v191;
  BOOL v192;
  int v193;
  int v194;
  int v196;
  int v197;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  _BOOL4 v202;
  BOOL v203;
  _BOOL4 v204;
  int v205;
  uint64_t v206;
  int v207;
  int v208;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  _BOOL4 v213;
  BOOL v214;
  _BOOL4 v215;
  int v216;
  uint64_t v217;
  char v218;
  unsigned int v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  _BOOL4 v223;
  BOOL v224;
  _BOOL4 v225;
  int v226;
  uint64_t v227;
  int v228;
  int v229;
  int v230;
  int v231;
  int v232;
  char v233;
  char v234;
  char v235;
  unsigned int v236;
  uint64_t v237;
  unsigned int v238;
  unint64_t v239;
  unsigned int v240;
  int v241;

  result = 0;
  if (a2 && a3)
  {
    *(_QWORD *)this = a2;
    *((_QWORD *)this + 1) = a3;
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = -1;
    *(_QWORD *)((char *)this + 28) = 0;
    *(_QWORD *)((char *)this + 44) = 0;
    *(_QWORD *)((char *)this + 36) = 0;
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    v5 = *a2;
    *((_QWORD *)this + 2) = 1;
    v6 = *a2;
    *((_QWORD *)this + 2) = 2;
    v7 = (v5 >> 6) & 2 | (v6 >> 6) & 1;
    if (v7 != 2)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Invalid VP9 frame_marker:%d\n", v7);
      return 0;
    }
    v8 = *a2;
    *((_QWORD *)this + 2) = 3;
    *((_DWORD *)this + 6) = (v8 >> 5) & 1;
    v9 = *a2;
    v10 = 4;
    *((_QWORD *)this + 2) = 4;
    v11 = (v9 >> 3) & 2 | (v8 >> 5) & 1;
    *((_DWORD *)this + 6) = v11;
    if (v11 == 3)
    {
      v12 = (*a2 >> 3) & 1;
      v10 = 5;
      *((_QWORD *)this + 2) = 5;
      *((_DWORD *)this + 6) = v12 + 3;
    }
    v13 = *a2 >> (v10 ^ 7);
    *((_QWORD *)this + 2) = v10 + 1;
    *((_DWORD *)this + 7) = v13 & 1;
    result = 1;
    if ((v13 & 1) == 0)
    {
      v14 = *a2 >> ((v10 + 1) ^ 7);
      *((_QWORD *)this + 2) = v10 | 2;
      v15 = (v14 & 1) == 0;
      *((_DWORD *)this + 8) = v15;
      v16 = *a2 >> ((v10 | 2) ^ 7);
      v17 = v10 + 3;
      *((_QWORD *)this + 2) = v10 + 3;
      v18 = (unint64_t)(v10 + 3) >> 3;
      v19 = (v16 & 1) == 0;
      *((_DWORD *)this + 9) = v19;
      if (v18 >= a3)
      {
        v20 = 0;
        *((_DWORD *)this + 10) = 0;
        if (v15)
        {
LABEL_9:
          if (vp9_parser::Vp9HeaderParser::ValidateVp9SyncCode(this))
          {
            vp9_parser::Vp9HeaderParser::ParseColorSpace((uint64_t)this);
            vp9_parser::Vp9HeaderParser::ParseFrameResolution((uint64_t *)this);
            v21 = *((_QWORD *)this + 1);
            v22 = *((_QWORD *)this + 2);
            if (*((_DWORD *)this + 10))
            {
              v23 = 1;
            }
            else
            {
              v49 = v22 >> 3;
              if (v22 >> 3 < v21)
              {
                *((_QWORD *)this + 2) = ++v22;
                v49 = v22 >> 3;
              }
              if (v49 >= v21)
              {
                v23 = 0;
              }
              else
              {
                v23 = (*(unsigned __int8 *)(*(_QWORD *)this + v49) >> (~(_BYTE)v22++ & 7)) & 1;
                *((_QWORD *)this + 2) = v22;
              }
            }
            v50 = v22 >> 3;
            v51 = (v22 + 1) >> 3;
            if (v22 >> 3 < v21)
              ++v22;
            else
              v51 = v22 >> 3;
            if (v51 >= v21)
              v52 = v51;
            else
              v52 = (v22 + 1) >> 3;
            if (v51 < v21)
              ++v22;
            if (v52 >= v21)
              v53 = v52;
            else
              v53 = (v22 + 1) >> 3;
            if (v52 < v21)
              ++v22;
            if (v53 >= v21)
              v54 = v53;
            else
              v54 = (v22 + 1) >> 3;
            if (v53 < v21)
              ++v22;
            if (v54 >= v21)
              v55 = v54;
            else
              v55 = (v22 + 1) >> 3;
            if (v54 < v21)
              ++v22;
            if (v55 >= v21)
              v56 = v55;
            else
              v56 = (v22 + 1) >> 3;
            if (v55 < v21)
              ++v22;
            if (v56 >= v21)
              v57 = v56;
            else
              v57 = (v22 + 1) >> 3;
            if (v56 < v21)
              ++v22;
            if (v57 >= v21)
              v58 = v57;
            else
              v58 = (v22 + 1) >> 3;
            if (v57 < v21)
              ++v22;
            if (v58 >= v21)
              v59 = v58;
            else
              v59 = (v22 + 1) >> 3;
            if (v58 < v21)
              ++v22;
            if (v59 >= v21)
              v60 = v59;
            else
              v60 = (v22 + 1) >> 3;
            if (v59 < v21)
              ++v22;
            v61 = (v22 + 1) >> 3;
            if (v60 < v21)
              ++v22;
            else
              v61 = v60;
            *((_DWORD *)this + 25) = v23;
            if (v50 < v21
              || v51 < v21
              || v52 < v21
              || v53 < v21
              || v54 < v21
              || v55 < v21
              || v56 < v21
              || v57 < v21
              || v58 < v21
              || v59 < v21
              || v60 < v21)
            {
              *((_QWORD *)this + 2) = v22;
            }
            if (v61 < v21)
            {
              v62 = *(_QWORD *)this;
              v63 = *(unsigned __int8 *)(*(_QWORD *)this + v61);
              v64 = v22 + 1;
              *((_QWORD *)this + 2) = v22 + 1;
              if (((v63 >> (~(_BYTE)v22 & 7)) & 1) == 0)
                goto LABEL_281;
              if (v64 >> 3 >= v21)
                goto LABEL_281;
              v65 = ~(_BYTE)v64 & 7;
              v66 = *(unsigned __int8 *)(v62 + (v64 >> 3));
              v64 = v22 + 2;
              *((_QWORD *)this + 2) = v22 + 2;
              if (((v66 >> v65) & 1) == 0)
                goto LABEL_281;
              if (v64 >> 3 < v21)
              {
                v67 = ~(_BYTE)v64 & 7;
                v68 = *(unsigned __int8 *)(v62 + (v64 >> 3));
                v64 = v22 + 3;
                *((_QWORD *)this + 2) = v22 + 3;
                if (((v68 >> v67) & 1) != 0)
                {
                  v69 = v64 >> 3;
                  v70 = v64 >> 3 < v21;
                  v71 = v22 + 4;
                  if (v64 >> 3 < v21)
                    v64 = v71;
                  v72 = v64 + 1;
                  v73 = v70 && v21 > v71 >> 3;
                  if (v73)
                    ++v64;
                  v74 = v21 > v72 >> 3;
                  v75 = v64 + 1;
                  v76 = v73 & v74;
                  if (v76)
                    ++v64;
                  v77 = v21 > v75 >> 3;
                  v78 = v64 + 1;
                  v79 = v76 & v77;
                  if (v79)
                    ++v64;
                  v80 = v21 > v78 >> 3;
                  v81 = v64 + 1;
                  v82 = v79 & v80;
                  if (v82)
                    ++v64;
                  v83 = v21 > v81 >> 3;
                  v84 = v64 + 1;
                  v85 = v82 & v83;
                  if (v85)
                    ++v64;
                  v64 += v85 & (v21 > v84 >> 3);
                  if (v69 < v21)
                    *((_QWORD *)this + 2) = v64;
                }
              }
              if (v64 >> 3 < v21)
              {
                v86 = *(unsigned __int8 *)(v62 + (v64 >> 3));
                v87 = v64 + 1;
                *((_QWORD *)this + 2) = v64 + 1;
                if (((v86 >> (~(_BYTE)v64 & 7)) & 1) != 0)
                {
                  v88 = v87 >> 3;
                  v89 = v87 >> 3 < v21;
                  v90 = v64 + 2;
                  if (v87 >> 3 < v21)
                    v87 = v90;
                  v91 = v87 + 1;
                  v92 = v89 && v21 > v90 >> 3;
                  if (v92)
                    ++v87;
                  v93 = v21 > v91 >> 3;
                  v94 = v87 + 1;
                  v95 = v92 & v93;
                  if (v95)
                    ++v87;
                  v96 = v21 > v94 >> 3;
                  v97 = v87 + 1;
                  v98 = v95 & v96;
                  if (v98)
                    ++v87;
                  v99 = v21 > v97 >> 3;
                  v100 = v87 + 1;
                  v101 = v98 & v99;
                  if (v101)
                    ++v87;
                  v102 = v21 > v100 >> 3;
                  v103 = v87 + 1;
                  v104 = v101 & v102;
                  if (v104)
                    ++v87;
                  v64 = v87 + (v104 & (v21 > v103 >> 3));
                  if (v88 < v21)
                    *((_QWORD *)this + 2) = v64;
                }
                else
                {
                  ++v64;
                }
              }
              if (v64 >> 3 < v21)
              {
                v105 = *(unsigned __int8 *)(v62 + (v64 >> 3));
                v106 = v64 + 1;
                *((_QWORD *)this + 2) = v64 + 1;
                if (((v105 >> (~(_BYTE)v64 & 7)) & 1) != 0)
                {
                  v107 = v106 >> 3;
                  v108 = v106 >> 3 < v21;
                  v109 = v64 + 2;
                  if (v106 >> 3 < v21)
                    v106 = v109;
                  v110 = v106 + 1;
                  v111 = v108 && v21 > v109 >> 3;
                  if (v111)
                    ++v106;
                  v112 = v21 > v110 >> 3;
                  v113 = v106 + 1;
                  v114 = v111 & v112;
                  if (v114)
                    ++v106;
                  v115 = v21 > v113 >> 3;
                  v116 = v106 + 1;
                  v117 = v114 & v115;
                  if (v117)
                    ++v106;
                  v118 = v21 > v116 >> 3;
                  v119 = v106 + 1;
                  v120 = v117 & v118;
                  if (v120)
                    ++v106;
                  v121 = v21 > v119 >> 3;
                  v122 = v106 + 1;
                  v123 = v120 & v121;
                  if (v123)
                    ++v106;
                  v64 = v106 + (v123 & (v21 > v122 >> 3));
                  if (v107 < v21)
                    *((_QWORD *)this + 2) = v64;
                }
                else
                {
                  ++v64;
                }
              }
              if (v64 >> 3 < v21)
              {
                v124 = *(unsigned __int8 *)(v62 + (v64 >> 3));
                v125 = v64 + 1;
                *((_QWORD *)this + 2) = v64 + 1;
                if (((v124 >> (~(_BYTE)v64 & 7)) & 1) != 0)
                {
                  v126 = v125 >> 3;
                  v127 = v125 >> 3 < v21;
                  v128 = v64 + 2;
                  if (v125 >> 3 < v21)
                    v125 = v128;
                  v129 = v125 + 1;
                  v130 = v127 && v21 > v128 >> 3;
                  if (v130)
                    ++v125;
                  v131 = v21 > v129 >> 3;
                  v132 = v125 + 1;
                  v133 = v130 & v131;
                  if (v133)
                    ++v125;
                  v134 = v21 > v132 >> 3;
                  v135 = v125 + 1;
                  v136 = v133 & v134;
                  if (v136)
                    ++v125;
                  v137 = v21 > v135 >> 3;
                  v138 = v125 + 1;
                  v139 = v136 & v137;
                  if (v139)
                    ++v125;
                  v140 = v21 > v138 >> 3;
                  v141 = v125 + 1;
                  v142 = v139 & v140;
                  if (v142)
                    ++v125;
                  v64 = v125 + (v142 & (v21 > v141 >> 3));
                  if (v126 < v21)
                    *((_QWORD *)this + 2) = v64;
                }
                else
                {
                  ++v64;
                }
              }
              if (v64 >> 3 < v21)
              {
                v143 = *(unsigned __int8 *)(v62 + (v64 >> 3));
                v144 = v64 + 1;
                *((_QWORD *)this + 2) = v64 + 1;
                if (((v143 >> (~(_BYTE)v64 & 7)) & 1) != 0)
                {
                  v145 = v144 >> 3;
                  v146 = v144 >> 3 < v21;
                  v147 = v64 + 2;
                  if (v144 >> 3 < v21)
                    v144 = v147;
                  v148 = v144 + 1;
                  v149 = v146 && v21 > v147 >> 3;
                  if (v149)
                    ++v144;
                  v150 = v21 > v148 >> 3;
                  v151 = v144 + 1;
                  v152 = v149 & v150;
                  if (v152)
                    ++v144;
                  v153 = v21 > v151 >> 3;
                  v154 = v144 + 1;
                  v155 = v152 & v153;
                  if (v155)
                    ++v144;
                  v156 = v21 > v154 >> 3;
                  v157 = v144 + 1;
                  v158 = v155 & v156;
                  if (v158)
                    ++v144;
                  v159 = v21 > v157 >> 3;
                  v160 = v144 + 1;
                  v161 = v158 & v159;
                  if (v161)
                    ++v144;
                  v64 = v144 + (v161 & (v21 > v160 >> 3));
                  if (v145 < v21)
                    *((_QWORD *)this + 2) = v64;
                }
                else
                {
                  ++v64;
                }
              }
              if (v64 >> 3 < v21)
              {
                v162 = *(unsigned __int8 *)(v62 + (v64 >> 3));
                v22 = v64 + 1;
                *((_QWORD *)this + 2) = v64 + 1;
                if (((v162 >> (~(_BYTE)v64 & 7)) & 1) != 0)
                {
                  v163 = v22 >> 3;
                  v164 = v22 >> 3 < v21;
                  v165 = v64 + 2;
                  if (v22 >> 3 < v21)
                    v22 = v165;
                  v166 = v22 + 1;
                  v167 = v164 && v21 > v165 >> 3;
                  if (v167)
                    ++v22;
                  v168 = v21 > v166 >> 3;
                  v169 = v22 + 1;
                  v170 = v167 & v168;
                  if (v170)
                    ++v22;
                  v171 = v21 > v169 >> 3;
                  v172 = v22 + 1;
                  v173 = v170 & v171;
                  if (v173)
                    ++v22;
                  v174 = v21 > v172 >> 3;
                  v175 = v22 + 1;
                  v176 = v173 & v174;
                  if (v176)
                    ++v22;
                  v177 = v21 > v175 >> 3;
                  v178 = v22 + 1;
                  v179 = v176 & v177;
                  if (v179)
                    ++v22;
                  v22 += v179 & (v21 > v178 >> 3);
                  if (v163 < v21)
                    *((_QWORD *)this + 2) = v22;
                }
              }
              else
              {
LABEL_281:
                v22 = v64;
              }
            }
            v180 = v22 >> 3;
            if (v22 >> 3 >= v21)
              v181 = v22 >> 3;
            else
              v181 = (v22 + 1) >> 3;
            if (v22 >> 3 >= v21)
              v182 = v22;
            else
              v182 = v22 + 1;
            if (v181 >= v21)
              v183 = v181;
            else
              v183 = (v182 + 1) >> 3;
            if (v181 < v21)
              ++v182;
            if (v183 >= v21)
              v184 = v183;
            else
              v184 = (v182 + 1) >> 3;
            if (v183 < v21)
              ++v182;
            if (v184 >= v21)
              v185 = v184;
            else
              v185 = (v182 + 1) >> 3;
            if (v184 < v21)
              ++v182;
            if (v185 >= v21)
              v186 = v185;
            else
              v186 = (v182 + 1) >> 3;
            if (v185 < v21)
              ++v182;
            if (v186 >= v21)
              v187 = v186;
            else
              v187 = (v182 + 1) >> 3;
            if (v186 < v21)
              ++v182;
            if (v187 >= v21)
              v188 = v187;
            else
              v188 = (v182 + 1) >> 3;
            if (v187 < v21)
              ++v182;
            v189 = (v182 + 1) >> 3;
            if (v188 < v21)
              ++v182;
            else
              v189 = v188;
            if (v180 >= v21
              && v181 >= v21
              && v183 >= v21
              && v184 >= v21
              && (v185 >= v21 ? (v190 = v186 >= v21) : (v190 = 0),
                  v190 ? (v191 = v187 >= v21) : (v191 = 0),
                  v191 ? (v192 = v188 >= v21) : (v192 = 0),
                  v192))
            {
              if (v189 >= v21)
                goto LABEL_345;
            }
            else
            {
              *((_QWORD *)this + 2) = v182;
              if (v189 >= v21)
              {
LABEL_345:
                if (v189 < v21)
                  goto LABEL_346;
LABEL_359:
                if (v189 >= v21)
                  goto LABEL_373;
                goto LABEL_360;
              }
            }
            v193 = *(unsigned __int8 *)(*(_QWORD *)this + v189);
            *((_QWORD *)this + 2) = v182 + 1;
            v194 = (1 << (~(_BYTE)v182 & 7)) & v193;
            v189 = (v182 + 1) >> 3;
            if (v189 >= v21 || v194 == 0)
            {
              ++v182;
              if (v189 >= v21)
                goto LABEL_359;
            }
            else
            {
              v199 = v182 + 2;
              v200 = (v182 + 2) >> 3;
              v201 = v182 + 3;
              v202 = v21 > v201 >> 3;
              v203 = v200 >= v21;
              v204 = v200 < v21;
              if (v203)
                v201 = v199;
              v205 = v204 && v202;
              v206 = v205 & (v21 > (v201 + 1) >> 3);
              if (v205)
                ++v201;
              v182 = v201 + v206;
              *((_QWORD *)this + 2) = v182;
              v189 = v182 >> 3;
              if (v182 >> 3 >= v21)
                goto LABEL_359;
            }
LABEL_346:
            v196 = *(unsigned __int8 *)(*(_QWORD *)this + v189);
            *((_QWORD *)this + 2) = v182 + 1;
            v197 = (1 << (~(_BYTE)v182 & 7)) & v196;
            v189 = (v182 + 1) >> 3;
            if (v189 >= v21 || v197 == 0)
            {
              ++v182;
              if (v189 >= v21)
                goto LABEL_373;
            }
            else
            {
              v210 = v182 + 2;
              v211 = (v182 + 2) >> 3;
              v212 = v182 + 3;
              v213 = v21 > v212 >> 3;
              v214 = v211 >= v21;
              v215 = v211 < v21;
              if (v214)
                v212 = v210;
              v216 = v215 && v213;
              v217 = v216 & (v21 > (v212 + 1) >> 3);
              if (v216)
                ++v212;
              v182 = v212 + v217;
              *((_QWORD *)this + 2) = v182;
              v189 = v182 >> 3;
              if (v182 >> 3 >= v21)
              {
LABEL_373:
                if (v189 < v21)
                  goto LABEL_374;
                goto LABEL_382;
              }
            }
LABEL_360:
            v207 = *(unsigned __int8 *)(*(_QWORD *)this + v189);
            *((_QWORD *)this + 2) = v182 + 1;
            v208 = (1 << (~(_BYTE)v182 & 7)) & v207;
            v189 = (v182 + 1) >> 3;
            if (v189 >= v21 || v208 == 0)
            {
              ++v182;
              if (v189 < v21)
                goto LABEL_374;
            }
            else
            {
              v220 = v182 + 2;
              v221 = (v182 + 2) >> 3;
              v222 = v182 + 3;
              v223 = v21 > v222 >> 3;
              v224 = v221 >= v21;
              v225 = v221 < v21;
              if (v224)
                v222 = v220;
              v226 = v225 && v223;
              v227 = v226 & (v21 > (v222 + 1) >> 3);
              if (v226)
                ++v222;
              v182 = v222 + v227;
              *((_QWORD *)this + 2) = v182;
              v189 = v182 >> 3;
              if (v182 >> 3 < v21)
              {
LABEL_374:
                v218 = ~(_BYTE)v182 & 7;
                v219 = *(unsigned __int8 *)(*(_QWORD *)this + v189);
                *((_QWORD *)this + 2) = ++v182;
                if (((v219 >> v218) & 1) != 0)
                  return 1;
              }
            }
LABEL_382:
            v228 = (((*((_DWORD *)this + 19) + 7) >> 3) + 7) >> 3;
            v229 = -1;
            do
              ++v229;
            while (v228 >> v229 > 3);
            v230 = 0;
            do
              v231 = 64 << v230++;
            while (v231 < v228);
            if (v229 <= 1)
              v232 = 1;
            else
              v232 = v229;
            v233 = v230 - 1;
            if (v232 != v230)
            {
              v234 = v232 - 1;
              if (v229 <= 1)
                v229 = 1;
              while (v182 >> 3 < v21)
              {
                v235 = ~(_BYTE)v182 & 7;
                v236 = *(unsigned __int8 *)(*(_QWORD *)this + (v182++ >> 3));
                *((_QWORD *)this + 2) = v182;
                if (((v236 >> v235) & 1) == 0)
                  goto LABEL_397;
                ++v233;
                if (v229 == ++v230)
                {
                  v233 = v234;
                  goto LABEL_397;
                }
              }
              v233 = v230 - 1;
            }
LABEL_397:
            if (v182 >> 3 < v21
              && (v237 = *(_QWORD *)this,
                  v238 = *(unsigned __int8 *)(*(_QWORD *)this + (v182 >> 3)),
                  v239 = v182 + 1,
                  *((_QWORD *)this + 2) = v182 + 1,
                  ((v238 >> (~(_BYTE)v182 & 7)) & 1) != 0))
            {
              if (v239 >> 3 >= v21)
              {
                LOBYTE(v241) = 1;
              }
              else
              {
                v240 = *(unsigned __int8 *)(v237 + (v239 >> 3));
                *((_QWORD *)this + 2) = v182 + 2;
                v241 = ((v240 >> (~(_BYTE)v239 & 7)) & 1) + 1;
              }
            }
            else
            {
              LOBYTE(v241) = 0;
            }
            result = 1;
            *((_DWORD *)this + 23) = 1 << v241;
            *((_DWORD *)this + 24) = 1 << v233;
            return result;
          }
LABEL_24:
          fwrite("Invalid Sync code!\n", 0x13uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
          return 0;
        }
      }
      else
      {
        v20 = (a2[v18] >> (~(_BYTE)v17 & 7)) & 1;
        v17 = v10 + 4;
        *((_QWORD *)this + 2) = v10 + 4;
        *((_DWORD *)this + 10) = v20;
        if (v15)
          goto LABEL_9;
      }
      if (v19 && v17 >> 3 < a3)
      {
        v24 = (a2[v17 >> 3] >> (~(_BYTE)v17 & 7)) & 1;
        *((_QWORD *)this + 2) = v17 + 1;
      }
      else
      {
        v24 = 0;
      }
      *((_DWORD *)this + 11) = v24;
      if (v20)
      {
        *((_DWORD *)this + 12) = 0;
        v25 = this;
        if (v24)
        {
LABEL_21:
          if (!vp9_parser::Vp9HeaderParser::ValidateVp9SyncCode(v25))
            goto LABEL_24;
          if (*((int *)this + 6) < 1)
          {
            *((_DWORD *)this + 17) = 1;
            *(_OWORD *)((char *)this + 52) = xmmword_208F523D0;
          }
          else
          {
            vp9_parser::Vp9HeaderParser::ParseColorSpace((uint64_t)this);
          }
          *((_DWORD *)this + 18) = vp9_parser::Vp9HeaderParser::VpxReadLiteral((uint64_t)this, 8);
LABEL_212:
          vp9_parser::Vp9HeaderParser::ParseFrameResolution((uint64_t *)this);
          return 1;
        }
      }
      else
      {
        Literal = vp9_parser::Vp9HeaderParser::VpxReadLiteral((uint64_t)this, 2);
        v27 = *((_DWORD *)this + 11);
        *((_DWORD *)this + 12) = Literal;
        v25 = this;
        if (v27)
          goto LABEL_21;
      }
      v28 = vp9_parser::Vp9HeaderParser::VpxReadLiteral((uint64_t)v25, 8);
      v29 = *((_QWORD *)this + 1);
      v30 = *((_QWORD *)this + 2);
      v31 = v30 >> 3;
      if (v30 >> 3 >= v29)
        v32 = v30 >> 3;
      else
        v32 = (v30 + 1) >> 3;
      if (v30 >> 3 < v29)
        ++v30;
      if (v32 >= v29)
        v33 = v32;
      else
        v33 = (v30 + 1) >> 3;
      if (v32 < v29)
        ++v30;
      if (v33 >= v29)
        v34 = v33;
      else
        v34 = (v30 + 1) >> 3;
      if (v33 < v29)
        ++v30;
      if (v34 >= v29)
        v35 = v34;
      else
        v35 = (v30 + 1) >> 3;
      if (v34 < v29)
        ++v30;
      if (v35 >= v29)
        v36 = v35;
      else
        v36 = (v30 + 1) >> 3;
      if (v35 < v29)
        ++v30;
      if (v36 >= v29)
        v37 = v36;
      else
        v37 = (v30 + 1) >> 3;
      if (v36 < v29)
        ++v30;
      if (v37 >= v29)
        v38 = v37;
      else
        v38 = (v30 + 1) >> 3;
      if (v37 < v29)
        ++v30;
      if (v38 >= v29)
        v39 = v38;
      else
        v39 = (v30 + 1) >> 3;
      if (v38 < v29)
        ++v30;
      if (v39 >= v29)
        v40 = v39;
      else
        v40 = (v30 + 1) >> 3;
      if (v39 < v29)
        ++v30;
      if (v40 >= v29)
        v41 = v40;
      else
        v41 = (v30 + 1) >> 3;
      if (v40 < v29)
        ++v30;
      if (v41 >= v29)
        v42 = v41;
      else
        v42 = (v30 + 1) >> 3;
      if (v41 < v29)
        ++v30;
      v43 = (v30 + 1) >> 3;
      if (v42 < v29)
        ++v30;
      else
        v43 = v42;
      *((_DWORD *)this + 18) = v28;
      if (v31 < v29
        || v32 < v29
        || v33 < v29
        || v34 < v29
        || v35 < v29
        || v36 < v29
        || v37 < v29
        || v38 < v29
        || v39 < v29
        || v40 < v29
        || v41 < v29
        || v42 < v29)
      {
        *((_QWORD *)this + 2) = v30;
      }
      if (v43 < v29)
      {
        v44 = ~(_BYTE)v30 & 7;
        v45 = *(unsigned __int8 *)(*(_QWORD *)this + v43);
        *((_QWORD *)this + 2) = ++v30;
        if (((v45 >> v44) & 1) != 0)
          return 1;
        v43 = v30 >> 3;
      }
      if (v43 >= v29)
      {
LABEL_103:
        if (v43 < v29)
        {
          v48 = *(unsigned __int8 *)(*(_QWORD *)this + v43);
          *((_QWORD *)this + 2) = v30 + 1;
          if (((v48 >> (~(_BYTE)v30 & 7)) & 1) != 0)
            return 1;
        }
        goto LABEL_212;
      }
      v46 = ~(_BYTE)v30 & 7;
      v47 = *(unsigned __int8 *)(*(_QWORD *)this + v43);
      *((_QWORD *)this + 2) = ++v30;
      if (((v47 >> v46) & 1) == 0)
      {
        v43 = v30 >> 3;
        goto LABEL_103;
      }
      return 1;
    }
  }
  return result;
}

uint64_t vp9_parser::Vp9HeaderParser::VpxReadLiteral(uint64_t this, int a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unsigned int v5;
  int v6;

  v2 = (_QWORD *)this;
  LODWORD(this) = 0;
  v3 = v2[1];
  v4 = v2[2];
  v5 = a2 + 1;
  do
  {
    while (v4 >> 3 < v3)
    {
      v6 = (*(unsigned __int8 *)(*v2 + (v4 >> 3)) >> (~(_BYTE)v4 & 7)) & 1;
      v2[2] = ++v4;
      this = (v6 << (v5-- - 2)) | this;
      if (v5 <= 1)
        return this;
    }
    this = this;
    --v5;
  }
  while (v5 > 1);
  return this;
}

BOOL vp9_parser::Vp9HeaderParser::ValidateVp9SyncCode(vp9_parser::Vp9HeaderParser *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;

  v2 = *((_QWORD *)this + 1);
  v1 = *((_QWORD *)this + 2);
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
  {
    v4 = 0;
LABEL_3:
    v5 = 0;
    if (v3 >= v2)
      goto LABEL_4;
    goto LABEL_28;
  }
  v4 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7)) & 1;
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
    goto LABEL_3;
  v5 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7)) & 1;
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
  {
LABEL_4:
    v6 = 0;
    if (v3 >= v2)
      goto LABEL_5;
    goto LABEL_29;
  }
LABEL_28:
  v6 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7)) & 1;
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
  {
LABEL_5:
    v7 = 0;
    if (v3 >= v2)
      goto LABEL_6;
    goto LABEL_30;
  }
LABEL_29:
  v7 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7)) & 1;
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
  {
LABEL_6:
    v8 = 0;
    if (v3 >= v2)
      goto LABEL_7;
    goto LABEL_31;
  }
LABEL_30:
  v8 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7)) & 1;
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
  {
LABEL_7:
    v9 = 0;
    if (v3 >= v2)
      goto LABEL_8;
    goto LABEL_32;
  }
LABEL_31:
  v9 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7)) & 1;
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
  {
LABEL_8:
    v10 = 0;
    if (v3 >= v2)
      goto LABEL_9;
    goto LABEL_33;
  }
LABEL_32:
  v10 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7)) & 1;
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
  {
LABEL_9:
    v11 = 0;
    if (v3 >= v2)
      goto LABEL_10;
    goto LABEL_34;
  }
LABEL_33:
  v11 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7)) & 1;
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
  {
LABEL_10:
    v12 = 0;
    if (v3 >= v2)
      goto LABEL_11;
    goto LABEL_35;
  }
LABEL_34:
  v28 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v12 = (v28 & 1) << 7;
  if (v1 >> 3 >= v2)
  {
LABEL_11:
    v13 = 0;
    if (v3 >= v2)
      goto LABEL_12;
    goto LABEL_36;
  }
LABEL_35:
  v29 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v13 = (v29 & 1) << 6;
  if (v1 >> 3 >= v2)
  {
LABEL_12:
    v14 = 0;
    if (v3 >= v2)
      goto LABEL_13;
    goto LABEL_37;
  }
LABEL_36:
  v30 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v14 = 32 * (v30 & 1);
  if (v1 >> 3 >= v2)
  {
LABEL_13:
    v15 = 0;
    if (v3 >= v2)
      goto LABEL_14;
    goto LABEL_38;
  }
LABEL_37:
  v31 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v15 = 16 * (v31 & 1);
  if (v1 >> 3 >= v2)
  {
LABEL_14:
    v16 = 0;
    if (v3 >= v2)
      goto LABEL_15;
    goto LABEL_39;
  }
LABEL_38:
  v32 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v16 = 8 * (v32 & 1);
  if (v1 >> 3 >= v2)
  {
LABEL_15:
    v17 = 0;
    if (v3 >= v2)
      goto LABEL_16;
    goto LABEL_40;
  }
LABEL_39:
  v33 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v17 = 4 * (v33 & 1);
  if (v1 >> 3 >= v2)
  {
LABEL_16:
    v18 = 0;
    if (v3 >= v2)
      goto LABEL_17;
    goto LABEL_41;
  }
LABEL_40:
  v34 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v18 = 2 * (v34 & 1);
  if (v1 >> 3 >= v2)
  {
LABEL_17:
    v19 = 0;
    if (v3 >= v2)
      goto LABEL_18;
    goto LABEL_42;
  }
LABEL_41:
  v19 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7)) & 1;
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  if (v1 >> 3 >= v2)
  {
LABEL_18:
    v20 = 0;
    if (v3 >= v2)
      goto LABEL_19;
    goto LABEL_43;
  }
LABEL_42:
  v35 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v20 = (v35 & 1) << 7;
  if (v1 >> 3 >= v2)
  {
LABEL_19:
    v21 = 0;
    if (v3 >= v2)
      goto LABEL_20;
    goto LABEL_44;
  }
LABEL_43:
  v36 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v21 = (v36 & 1) << 6;
  if (v1 >> 3 >= v2)
  {
LABEL_20:
    v22 = 0;
    if (v3 >= v2)
      goto LABEL_21;
    goto LABEL_45;
  }
LABEL_44:
  v37 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v22 = 32 * (v37 & 1);
  if (v1 >> 3 >= v2)
  {
LABEL_21:
    v23 = 0;
    if (v3 >= v2)
      goto LABEL_22;
    goto LABEL_46;
  }
LABEL_45:
  v38 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v23 = 16 * (v38 & 1);
  if (v1 >> 3 >= v2)
  {
LABEL_22:
    v24 = 0;
    if (v3 >= v2)
      goto LABEL_23;
    goto LABEL_47;
  }
LABEL_46:
  v39 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v24 = 8 * (v39 & 1);
  if (v1 >> 3 >= v2)
  {
LABEL_23:
    v25 = 0;
    if (v3 >= v2)
      goto LABEL_24;
LABEL_48:
    v41 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
    *((_QWORD *)this + 2) = v1;
    v3 = v1 >> 3;
    v26 = 2 * (v41 & 1);
    if (v1 >> 3 >= v2)
      goto LABEL_25;
    goto LABEL_49;
  }
LABEL_47:
  v40 = *(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1++ & 7);
  *((_QWORD *)this + 2) = v1;
  v3 = v1 >> 3;
  v25 = 4 * (v40 & 1);
  if (v1 >> 3 < v2)
    goto LABEL_48;
LABEL_24:
  v26 = 0;
  if (v3 >= v2)
  {
LABEL_25:
    v27 = 0;
    return (v11 | (v4 << 7) | (v5 << 6) | (32 * v6) | (16 * v7) | (8 * v8) | (4 * v9) | (2 * v10)) == 0x49
        && (v13 | v12 | v14 | v15 | v16 | v17 | v18 | v19) == 131
        && (v21 | v20 | v22 | v23 | v24 | v25 | v26 | v27) == 66;
  }
LABEL_49:
  v27 = (*(unsigned __int8 *)(*(_QWORD *)this + v3) >> (~(_BYTE)v1 & 7)) & 1;
  *((_QWORD *)this + 2) = v1 + 1;
  return (v11 | (v4 << 7) | (v5 << 6) | (32 * v6) | (16 * v7) | (8 * v8) | (4 * v9) | (2 * v10)) == 0x49
      && (v13 | v12 | v14 | v15 | v16 | v17 | v18 | v19) == 131
      && (v21 | v20 | v22 | v23 | v24 | v25 | v26 | v27) == 66;
}

uint64_t vp9_parser::Vp9HeaderParser::ParseColorSpace(uint64_t this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unint64_t v13;
  int v14;
  int v15;

  *(_DWORD *)(this + 52) = 0;
  v1 = *(_DWORD *)(this + 24);
  if (v1 <= 1)
  {
    v3 = *(_QWORD *)(this + 8);
    v2 = *(_QWORD *)(this + 16);
    *(_DWORD *)(this + 52) = 8;
    v6 = v2 >> 3;
    if (v2 >> 3 >= v3)
      goto LABEL_14;
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(this + 8);
  v2 = *(_QWORD *)(this + 16);
  if (v2 >> 3 >= v3
    || (v4 = ~(_BYTE)v2 & 7,
        v5 = *(unsigned __int8 *)(*(_QWORD *)this + (v2 >> 3)),
        ++v2,
        *(_QWORD *)(this + 16) = v2,
        ((v5 >> v4) & 1) == 0))
  {
    *(_DWORD *)(this + 52) = 10;
    v6 = v2 >> 3;
    if (v2 >> 3 >= v3)
      goto LABEL_14;
LABEL_7:
    v7 = *(unsigned __int8 *)(*(_QWORD *)this + v6) >> (~(_BYTE)v2++ & 7);
    *(_QWORD *)(this + 16) = v2;
    v6 = v2 >> 3;
    v8 = 4 * (v7 & 1);
    if (v2 >> 3 < v3)
      goto LABEL_15;
LABEL_8:
    if (v6 < v3)
      goto LABEL_16;
    goto LABEL_9;
  }
  *(_DWORD *)(this + 52) = 12;
  v6 = v2 >> 3;
  if (v2 >> 3 < v3)
    goto LABEL_7;
LABEL_14:
  v8 = 0;
  if (v6 >= v3)
    goto LABEL_8;
LABEL_15:
  v10 = *(unsigned __int8 *)(*(_QWORD *)this + v6) >> (~(_BYTE)v2++ & 7);
  *(_QWORD *)(this + 16) = v2;
  v6 = v2 >> 3;
  v8 |= 2 * (v10 & 1);
  if (v2 >> 3 < v3)
  {
LABEL_16:
    v11 = (*(unsigned __int8 *)(*(_QWORD *)this + v6) >> (~(_BYTE)v2++ & 7)) & 1;
    *(_QWORD *)(this + 16) = v2;
    v12 = v8 | v11;
    *(_DWORD *)(this + 56) = v12;
    if (v12 == 7)
      goto LABEL_17;
    goto LABEL_10;
  }
LABEL_9:
  *(_DWORD *)(this + 56) = v8;
  if (v8 == 7)
  {
LABEL_17:
    *(_DWORD *)(this + 60) = 1;
    if ((v1 | 2) == 3)
    {
      *(_QWORD *)(this + 64) = 0;
      if (v3 > v2 >> 3)
        goto LABEL_19;
    }
    return this;
  }
LABEL_10:
  if (v2 >> 3 >= v3)
  {
    *(_DWORD *)(this + 60) = 0;
    if ((v1 | 2) != 3)
      goto LABEL_12;
  }
  else
  {
    v9 = (*(unsigned __int8 *)(*(_QWORD *)this + (v2 >> 3)) >> (~(_BYTE)v2 & 7)) & 1;
    *(_QWORD *)(this + 16) = ++v2;
    *(_DWORD *)(this + 60) = v9;
    if ((v1 | 2) != 3)
    {
LABEL_12:
      *(_QWORD *)(this + 64) = 0x100000001;
      return this;
    }
  }
  v13 = v2 >> 3;
  if (v2 >> 3 >= v3)
  {
    *(_DWORD *)(this + 64) = 0;
  }
  else
  {
    v14 = (*(unsigned __int8 *)(*(_QWORD *)this + v13) >> (~(_BYTE)v2++ & 7)) & 1;
    *(_QWORD *)(this + 16) = v2;
    v13 = v2 >> 3;
    *(_DWORD *)(this + 64) = v14;
    if (v2 >> 3 < v3)
    {
      v15 = (*(unsigned __int8 *)(*(_QWORD *)this + v13) >> (~(_BYTE)v2++ & 7)) & 1;
      *(_QWORD *)(this + 16) = v2;
      *(_DWORD *)(this + 68) = v15;
      if (v2 >> 3 >= v3)
        return this;
      goto LABEL_19;
    }
  }
  *(_DWORD *)(this + 68) = 0;
  if (v13 < v3)
LABEL_19:
    *(_QWORD *)(this + 16) = v2 + 1;
  return this;
}

uint64_t *vp9_parser::Vp9HeaderParser::ParseFrameResolution(uint64_t *this)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;

  v1 = this[1];
  v2 = this[2];
  v3 = v2 >> 3;
  if (v2 >> 3 >= v1)
  {
    v5 = 0;
LABEL_3:
    if (v3 >= v1)
      goto LABEL_4;
    goto LABEL_37;
  }
  v4 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 = v4 << 15;
  if (v2 >> 3 >= v1)
    goto LABEL_3;
  v9 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= v9 << 14;
  if (v2 >> 3 >= v1)
  {
LABEL_4:
    if (v3 >= v1)
      goto LABEL_5;
    goto LABEL_38;
  }
LABEL_37:
  v10 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= v10 << 13;
  if (v2 >> 3 >= v1)
  {
LABEL_5:
    if (v3 >= v1)
      goto LABEL_6;
    goto LABEL_39;
  }
LABEL_38:
  v11 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= v11 << 12;
  if (v2 >> 3 >= v1)
  {
LABEL_6:
    if (v3 >= v1)
      goto LABEL_7;
    goto LABEL_40;
  }
LABEL_39:
  v12 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= v12 << 11;
  if (v2 >> 3 >= v1)
  {
LABEL_7:
    if (v3 >= v1)
      goto LABEL_8;
    goto LABEL_41;
  }
LABEL_40:
  v13 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= v13 << 10;
  if (v2 >> 3 >= v1)
  {
LABEL_8:
    if (v3 >= v1)
      goto LABEL_9;
    goto LABEL_42;
  }
LABEL_41:
  v14 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= v14 << 9;
  if (v2 >> 3 >= v1)
  {
LABEL_9:
    if (v3 >= v1)
      goto LABEL_10;
    goto LABEL_43;
  }
LABEL_42:
  v15 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= v15 << 8;
  if (v2 >> 3 >= v1)
  {
LABEL_10:
    if (v3 >= v1)
      goto LABEL_11;
    goto LABEL_44;
  }
LABEL_43:
  v16 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= v16 << 7;
  if (v2 >> 3 >= v1)
  {
LABEL_11:
    if (v3 >= v1)
      goto LABEL_12;
    goto LABEL_45;
  }
LABEL_44:
  v17 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= v17 << 6;
  if (v2 >> 3 >= v1)
  {
LABEL_12:
    if (v3 >= v1)
      goto LABEL_13;
    goto LABEL_46;
  }
LABEL_45:
  v18 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= 32 * v18;
  if (v2 >> 3 >= v1)
  {
LABEL_13:
    if (v3 >= v1)
      goto LABEL_14;
    goto LABEL_47;
  }
LABEL_46:
  v19 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= 16 * v19;
  if (v2 >> 3 >= v1)
  {
LABEL_14:
    if (v3 >= v1)
      goto LABEL_15;
    goto LABEL_48;
  }
LABEL_47:
  v20 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= 8 * v20;
  if (v2 >> 3 >= v1)
  {
LABEL_15:
    if (v3 >= v1)
      goto LABEL_16;
    goto LABEL_49;
  }
LABEL_48:
  v21 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= 4 * v21;
  if (v2 >> 3 >= v1)
  {
LABEL_16:
    if (v3 >= v1)
      goto LABEL_17;
    goto LABEL_50;
  }
LABEL_49:
  v22 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v5 |= 2 * v22;
  if (v2 >> 3 >= v1)
  {
LABEL_17:
    v6 = v5 + 1;
    *((_DWORD *)this + 19) = v5 + 1;
    if (v3 >= v1)
      goto LABEL_18;
    goto LABEL_51;
  }
LABEL_50:
  v23 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v6 = (v5 | v23) + 1;
  *((_DWORD *)this + 19) = v6;
  if (v2 >> 3 >= v1)
  {
LABEL_18:
    v7 = 0;
    if (v3 >= v1)
      goto LABEL_19;
    goto LABEL_52;
  }
LABEL_51:
  v24 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 = v24 << 15;
  if (v2 >> 3 >= v1)
  {
LABEL_19:
    if (v3 >= v1)
      goto LABEL_20;
    goto LABEL_53;
  }
LABEL_52:
  v25 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= v25 << 14;
  if (v2 >> 3 >= v1)
  {
LABEL_20:
    if (v3 >= v1)
      goto LABEL_21;
    goto LABEL_54;
  }
LABEL_53:
  v26 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= v26 << 13;
  if (v2 >> 3 >= v1)
  {
LABEL_21:
    if (v3 >= v1)
      goto LABEL_22;
    goto LABEL_55;
  }
LABEL_54:
  v27 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= v27 << 12;
  if (v2 >> 3 >= v1)
  {
LABEL_22:
    if (v3 >= v1)
      goto LABEL_23;
    goto LABEL_56;
  }
LABEL_55:
  v28 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= v28 << 11;
  if (v2 >> 3 >= v1)
  {
LABEL_23:
    if (v3 >= v1)
      goto LABEL_24;
    goto LABEL_57;
  }
LABEL_56:
  v29 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= v29 << 10;
  if (v2 >> 3 >= v1)
  {
LABEL_24:
    if (v3 >= v1)
      goto LABEL_25;
    goto LABEL_58;
  }
LABEL_57:
  v30 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= v30 << 9;
  if (v2 >> 3 >= v1)
  {
LABEL_25:
    if (v3 >= v1)
      goto LABEL_26;
    goto LABEL_59;
  }
LABEL_58:
  v31 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= v31 << 8;
  if (v2 >> 3 >= v1)
  {
LABEL_26:
    if (v3 >= v1)
      goto LABEL_27;
    goto LABEL_60;
  }
LABEL_59:
  v32 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= v32 << 7;
  if (v2 >> 3 >= v1)
  {
LABEL_27:
    if (v3 >= v1)
      goto LABEL_28;
    goto LABEL_61;
  }
LABEL_60:
  v33 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= v33 << 6;
  if (v2 >> 3 >= v1)
  {
LABEL_28:
    if (v3 >= v1)
      goto LABEL_29;
    goto LABEL_62;
  }
LABEL_61:
  v34 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= 32 * v34;
  if (v2 >> 3 >= v1)
  {
LABEL_29:
    if (v3 >= v1)
      goto LABEL_30;
    goto LABEL_63;
  }
LABEL_62:
  v35 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= 16 * v35;
  if (v2 >> 3 >= v1)
  {
LABEL_30:
    if (v3 >= v1)
      goto LABEL_31;
    goto LABEL_64;
  }
LABEL_63:
  v36 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= 8 * v36;
  if (v2 >> 3 >= v1)
  {
LABEL_31:
    if (v3 >= v1)
      goto LABEL_32;
    goto LABEL_65;
  }
LABEL_64:
  v37 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= 4 * v37;
  if (v2 >> 3 >= v1)
  {
LABEL_32:
    if (v3 >= v1)
      goto LABEL_33;
    goto LABEL_66;
  }
LABEL_65:
  v38 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v7 |= 2 * v38;
  if (v2 >> 3 >= v1)
  {
LABEL_33:
    v8 = v7 + 1;
    *((_DWORD *)this + 20) = v7 + 1;
    if (v3 >= v1)
      goto LABEL_101;
    goto LABEL_67;
  }
LABEL_66:
  v39 = (*(unsigned __int8 *)(*this + v3) >> (~(_BYTE)v2++ & 7)) & 1;
  this[2] = v2;
  v3 = v2 >> 3;
  v8 = (v7 | v39) + 1;
  *((_DWORD *)this + 20) = v8;
  if (v2 >> 3 >= v1)
  {
LABEL_101:
    *((_DWORD *)this + 21) = v6;
    *((_DWORD *)this + 22) = v8;
    return this;
  }
LABEL_67:
  v40 = *this;
  v41 = *(unsigned __int8 *)(*this + v3);
  v42 = v2 + 1;
  this[2] = v2 + 1;
  if (((v41 >> (~(_BYTE)v2 & 7)) & 1) == 0)
    goto LABEL_101;
  v43 = v42 >> 3;
  if (v42 >> 3 >= v1)
  {
    v45 = 0;
LABEL_70:
    if (v43 >= v1)
      goto LABEL_71;
    goto LABEL_104;
  }
  v44 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42 & 7)) & 1;
  v42 = v2 + 2;
  this[2] = v2 + 2;
  v43 = (v2 + 2) >> 3;
  v45 = v44 << 15;
  if (v43 >= v1)
    goto LABEL_70;
  v47 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= v47 << 14;
  if (v42 >> 3 >= v1)
  {
LABEL_71:
    if (v43 >= v1)
      goto LABEL_72;
    goto LABEL_105;
  }
LABEL_104:
  v48 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= v48 << 13;
  if (v42 >> 3 >= v1)
  {
LABEL_72:
    if (v43 >= v1)
      goto LABEL_73;
    goto LABEL_106;
  }
LABEL_105:
  v49 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= v49 << 12;
  if (v42 >> 3 >= v1)
  {
LABEL_73:
    if (v43 >= v1)
      goto LABEL_74;
    goto LABEL_107;
  }
LABEL_106:
  v50 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= v50 << 11;
  if (v42 >> 3 >= v1)
  {
LABEL_74:
    if (v43 >= v1)
      goto LABEL_75;
    goto LABEL_108;
  }
LABEL_107:
  v51 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= v51 << 10;
  if (v42 >> 3 >= v1)
  {
LABEL_75:
    if (v43 >= v1)
      goto LABEL_76;
    goto LABEL_109;
  }
LABEL_108:
  v52 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= v52 << 9;
  if (v42 >> 3 >= v1)
  {
LABEL_76:
    if (v43 >= v1)
      goto LABEL_77;
    goto LABEL_110;
  }
LABEL_109:
  v53 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= v53 << 8;
  if (v42 >> 3 >= v1)
  {
LABEL_77:
    if (v43 >= v1)
      goto LABEL_78;
    goto LABEL_111;
  }
LABEL_110:
  v54 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= v54 << 7;
  if (v42 >> 3 >= v1)
  {
LABEL_78:
    if (v43 >= v1)
      goto LABEL_79;
    goto LABEL_112;
  }
LABEL_111:
  v55 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= v55 << 6;
  if (v42 >> 3 >= v1)
  {
LABEL_79:
    if (v43 >= v1)
      goto LABEL_80;
    goto LABEL_113;
  }
LABEL_112:
  v56 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= 32 * v56;
  if (v42 >> 3 >= v1)
  {
LABEL_80:
    if (v43 >= v1)
      goto LABEL_81;
    goto LABEL_114;
  }
LABEL_113:
  v57 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= 16 * v57;
  if (v42 >> 3 >= v1)
  {
LABEL_81:
    if (v43 >= v1)
      goto LABEL_82;
    goto LABEL_115;
  }
LABEL_114:
  v58 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= 8 * v58;
  if (v42 >> 3 >= v1)
  {
LABEL_82:
    if (v43 >= v1)
      goto LABEL_83;
    goto LABEL_116;
  }
LABEL_115:
  v59 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= 4 * v59;
  if (v42 >> 3 >= v1)
  {
LABEL_83:
    if (v43 >= v1)
      goto LABEL_84;
    goto LABEL_117;
  }
LABEL_116:
  v60 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v45 |= 2 * v60;
  if (v42 >> 3 >= v1)
  {
LABEL_84:
    *((_DWORD *)this + 21) = v45 + 1;
    if (v43 >= v1)
      goto LABEL_85;
    goto LABEL_118;
  }
LABEL_117:
  v61 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  *((_DWORD *)this + 21) = (v45 | v61) + 1;
  if (v42 >> 3 >= v1)
  {
LABEL_85:
    v46 = 0;
    if (v43 >= v1)
      goto LABEL_86;
    goto LABEL_119;
  }
LABEL_118:
  v62 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7)) & 1;
  this[2] = v42;
  v43 = v42 >> 3;
  v46 = v62 << 15;
  if (v42 >> 3 >= v1)
  {
LABEL_86:
    if (v43 >= v1)
      goto LABEL_87;
    goto LABEL_120;
  }
LABEL_119:
  v63 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= (v63 & 1) << 14;
  if (v42 >> 3 >= v1)
  {
LABEL_87:
    if (v43 >= v1)
      goto LABEL_88;
    goto LABEL_121;
  }
LABEL_120:
  v64 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= (v64 & 1) << 13;
  if (v42 >> 3 >= v1)
  {
LABEL_88:
    if (v43 >= v1)
      goto LABEL_89;
    goto LABEL_122;
  }
LABEL_121:
  v65 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= (v65 & 1) << 12;
  if (v42 >> 3 >= v1)
  {
LABEL_89:
    if (v43 >= v1)
      goto LABEL_90;
    goto LABEL_123;
  }
LABEL_122:
  v66 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= (v66 & 1) << 11;
  if (v42 >> 3 >= v1)
  {
LABEL_90:
    if (v43 >= v1)
      goto LABEL_91;
    goto LABEL_124;
  }
LABEL_123:
  v67 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= (v67 & 1) << 10;
  if (v42 >> 3 >= v1)
  {
LABEL_91:
    if (v43 >= v1)
      goto LABEL_92;
    goto LABEL_125;
  }
LABEL_124:
  v68 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= (v68 & 1) << 9;
  if (v42 >> 3 >= v1)
  {
LABEL_92:
    if (v43 >= v1)
      goto LABEL_93;
    goto LABEL_126;
  }
LABEL_125:
  v69 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= (v69 & 1) << 8;
  if (v42 >> 3 >= v1)
  {
LABEL_93:
    if (v43 >= v1)
      goto LABEL_94;
    goto LABEL_127;
  }
LABEL_126:
  v70 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= (v70 & 1) << 7;
  if (v42 >> 3 >= v1)
  {
LABEL_94:
    if (v43 >= v1)
      goto LABEL_95;
    goto LABEL_128;
  }
LABEL_127:
  v71 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= (v71 & 1) << 6;
  if (v42 >> 3 >= v1)
  {
LABEL_95:
    if (v43 >= v1)
      goto LABEL_96;
    goto LABEL_129;
  }
LABEL_128:
  v72 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= 32 * (v72 & 1);
  if (v42 >> 3 >= v1)
  {
LABEL_96:
    if (v43 >= v1)
      goto LABEL_97;
    goto LABEL_130;
  }
LABEL_129:
  v73 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= 16 * (v73 & 1);
  if (v42 >> 3 >= v1)
  {
LABEL_97:
    if (v43 >= v1)
      goto LABEL_98;
    goto LABEL_131;
  }
LABEL_130:
  v74 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= 8 * (v74 & 1);
  if (v42 >> 3 >= v1)
  {
LABEL_98:
    if (v43 >= v1)
      goto LABEL_99;
LABEL_132:
    v76 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
    this[2] = v42;
    v43 = v42 >> 3;
    v46 |= 2 * (v76 & 1);
    if (v42 >> 3 >= v1)
      goto LABEL_100;
    goto LABEL_133;
  }
LABEL_131:
  v75 = *(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42++ & 7);
  this[2] = v42;
  v43 = v42 >> 3;
  v46 |= 4 * (v75 & 1);
  if (v42 >> 3 < v1)
    goto LABEL_132;
LABEL_99:
  if (v43 >= v1)
  {
LABEL_100:
    *((_DWORD *)this + 22) = v46 + 1;
    return this;
  }
LABEL_133:
  v77 = (*(unsigned __int8 *)(v40 + v43) >> (~(_BYTE)v42 & 7)) & 1;
  this[2] = v42 + 1;
  *((_DWORD *)this + 22) = (v46 | v77) + 1;
  return this;
}

void webm::WebmParser::~WebmParser(webm::WebmParser::DocumentParser **this)
{
  webm::WebmParser::DocumentParser *v2;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    webm::WebmParser::DocumentParser::~DocumentParser(v2);
    MEMORY[0x20BD0ADEC]();
  }
}

{
  webm::WebmParser::DocumentParser *v2;

  v2 = *this;
  *this = 0;
  if (v2)
  {
    webm::WebmParser::DocumentParser::~DocumentParser(v2);
    MEMORY[0x20BD0ADEC]();
  }
}

webm::WebmParser *webm::WebmParser::WebmParser(webm::WebmParser *this)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C0D7088;
  *(_DWORD *)(v2 + 8) = -1;
  *(_QWORD *)(v2 + 16) = &unk_24C0D99A8;
  *(_QWORD *)(v2 + 24) = &unk_24C0D9A60;
  *(_DWORD *)(v2 + 32) = -1;
  v9 = xmmword_208F523F0;
  v10 = xmmword_208F523E0;
  v7 = xmmword_208F52410;
  v8 = xmmword_208F52400;
  v5 = xmmword_208F52430;
  v6 = xmmword_208F52420;
  v4 = xmmword_208F52440;
  webm::MasterValueParser<webm::Ebml>::MasterValueParser<webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>>(v2 + 48, (uint64_t)&v10, (uint64_t)&v9, (uint64_t)&v8, (uint64_t)&v7, (uint64_t)&v6, (uint64_t)&v5, (uint64_t)&v4);
  *(_QWORD *)(v2 + 48) = off_24C0D9B30;
  webm::SegmentParser::SegmentParser((webm::SegmentParser *)(v2 + 432));
  *(_QWORD *)(v2 + 672) = &unk_24C0D9A88;
  *(_QWORD *)(v2 + 712) = &unk_24C0D99D0;
  *(_QWORD *)(v2 + 728) = &unk_24C0D9A18;
  *(_QWORD *)(v2 + 704) = 0;
  *(_QWORD *)(v2 + 768) = &unk_24C0D7130;
  *(_DWORD *)(v2 + 816) = 0;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_OWORD *)(v2 + 792) = 0u;
  *(_QWORD *)(v2 + 805) = 0;
  *(_QWORD *)this = v2;
  *((_DWORD *)this + 2) = -1;
  return this;
}

{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24C0D7088;
  *(_DWORD *)(v2 + 8) = -1;
  *(_QWORD *)(v2 + 16) = &unk_24C0D99A8;
  *(_QWORD *)(v2 + 24) = &unk_24C0D9A60;
  *(_DWORD *)(v2 + 32) = -1;
  v9 = xmmword_208F523F0;
  v10 = xmmword_208F523E0;
  v7 = xmmword_208F52410;
  v8 = xmmword_208F52400;
  v5 = xmmword_208F52430;
  v6 = xmmword_208F52420;
  v4 = xmmword_208F52440;
  webm::MasterValueParser<webm::Ebml>::MasterValueParser<webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>>(v2 + 48, (uint64_t)&v10, (uint64_t)&v9, (uint64_t)&v8, (uint64_t)&v7, (uint64_t)&v6, (uint64_t)&v5, (uint64_t)&v4);
  *(_QWORD *)(v2 + 48) = off_24C0D9B30;
  webm::SegmentParser::SegmentParser((webm::SegmentParser *)(v2 + 432));
  *(_QWORD *)(v2 + 672) = &unk_24C0D9A88;
  *(_QWORD *)(v2 + 712) = &unk_24C0D99D0;
  *(_QWORD *)(v2 + 728) = &unk_24C0D9A18;
  *(_QWORD *)(v2 + 704) = 0;
  *(_QWORD *)(v2 + 768) = &unk_24C0D7130;
  *(_DWORD *)(v2 + 816) = 0;
  *(_OWORD *)(v2 + 776) = 0u;
  *(_OWORD *)(v2 + 792) = 0u;
  *(_QWORD *)(v2 + 805) = 0;
  *(_QWORD *)this = v2;
  *((_DWORD *)this + 2) = -1;
  return this;
}

uint64_t *webm::WebmParser::DidSeek(uint64_t *this)
{
  uint64_t v1;

  v1 = *this;
  *(_QWORD *)(v1 + 8) = 0xFFFFFFFFLL;
  *(_DWORD *)(v1 + 32) = -1;
  *(_QWORD *)(v1 + 36) = 0;
  *(_DWORD *)(v1 + 44) = 0;
  *(_QWORD *)(v1 + 776) = 0;
  *(_DWORD *)(v1 + 808) = 0;
  *(_BYTE *)(v1 + 812) = 1;
  *(_DWORD *)(v1 + 816) = 0;
  *((_DWORD *)this + 2) = -1;
  return this;
}

uint64_t webm::WebmParser::Feed(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned __int8 v29;
  uint64_t v30;
  int v31;
  unsigned int *v32;
  uint64_t v33;
  _QWORD v34[2];
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;

  result = a1[2];
  if ((result & 0xFFFFFC00) == 0xFFFFF800)
    return result;
  v32 = a1;
  v7 = *(_QWORD *)a1;
  v8 = (_DWORD *)(*(_QWORD *)a1 + 808);
  v9 = *(_QWORD *)a1 + 768;
  if (*(_DWORD *)(v7 + 808) == 1)
    v10 = v9;
  else
    v10 = a2;
  v11 = (int *)(v7 + 784);
  v37 = 0;
  v12 = (_DWORD *)(v7 + 788);
  v33 = v9;
  while (2)
  {
    result = 0;
    switch(*(_DWORD *)(v7 + 816))
    {
      case 0:
        *(_DWORD *)(v7 + 788) = 0;
        *(_QWORD *)(v7 + 800) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
        *(_DWORD *)(v7 + 816) = 1;
        continue;
      case 1:
        v37 = 0;
        v14 = *(_DWORD *)(v7 + 8);
        if (v14 == -1)
        {
          LOBYTE(v34[0]) = 0;
          v35 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _DWORD **))(*(_QWORD *)a3 + 16))(a3, 1, v34, &v35);
          if ((_DWORD)result)
          {
            *v12 += v37;
            goto LABEL_39;
          }
          v25 = ++v37;
          v26 = LOBYTE(v34[0]);
          if (LOBYTE(v34[0]) <= 0xFu)
          {
            result = 4294966271;
            *v12 += v25;
            goto LABEL_39;
          }
          v28 = 0;
          do
            v29 = v28++;
          while (((LOBYTE(v34[0]) << v29) & 0x80) == 0);
          v14 = v29;
          *(_DWORD *)(v7 + 8) = v29;
          *(_DWORD *)(v7 + 12) = v26;
          if (v29 > 4u)
          {
LABEL_12:
            v15 = 0;
            result = 4294966270;
            goto LABEL_68;
          }
        }
        else if (v14 > 4)
        {
          goto LABEL_12;
        }
        if (!v14)
        {
          v15 = 0;
LABEL_67:
          result = 0;
          goto LABEL_68;
        }
        LOBYTE(v34[0]) = 0;
        v35 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _DWORD **))(*(_QWORD *)a3 + 16))(a3, 1, v34, &v35);
        if ((_DWORD)result)
        {
          v30 = 0;
LABEL_64:
          v15 = v30;
          goto LABEL_68;
        }
        v15 = v14;
        *(_DWORD *)(v7 + 12) = LOBYTE(v34[0]) | (*(_DWORD *)(v7 + 12) << 8);
        if (v14 == 1)
          goto LABEL_67;
        LOBYTE(v34[0]) = 0;
        v35 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _DWORD **))(*(_QWORD *)a3 + 16))(a3, 1, v34, &v35);
        v30 = 1;
        if ((_DWORD)result)
          goto LABEL_64;
        *(_DWORD *)(v7 + 12) = LOBYTE(v34[0]) | (*(_DWORD *)(v7 + 12) << 8);
        if (v14 == 2)
          goto LABEL_67;
        LOBYTE(v34[0]) = 0;
        v35 = 0;
        result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _DWORD **))(*(_QWORD *)a3 + 16))(a3, 1, v34, &v35);
        if ((_DWORD)result)
        {
          v15 = 2;
        }
        else
        {
          *(_DWORD *)(v7 + 12) = LOBYTE(v34[0]) | (*(_DWORD *)(v7 + 12) << 8);
          if (v14 == 3)
            goto LABEL_67;
          LOBYTE(v34[0]) = 0;
          v35 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _DWORD **))(*(_QWORD *)a3 + 16))(a3, 1, v34, &v35);
          if ((_DWORD)result)
            v15 = 3;
          else
            *(_DWORD *)(v7 + 12) = LOBYTE(v34[0]) | (*(_DWORD *)(v7 + 12) << 8);
        }
LABEL_68:
        v37 += v15;
        v31 = v37;
        *(_DWORD *)(v7 + 8) -= v15;
        *v12 += v31;
        if (!(_DWORD)result)
        {
          *(_DWORD *)(v7 + 816) = 2;
          continue;
        }
LABEL_39:
        if ((_DWORD)result != -3)
          goto LABEL_79;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3) != *(_QWORD *)(v7 + 800))
        {
          result = 4294967293;
          goto LABEL_79;
        }
        v13 = 7;
        goto LABEL_7;
      case 2:
        LODWORD(result) = webm::VarIntParser::Feed(v7 + 24, v10, a3, &v37);
        if ((_DWORD)result == -1030)
          result = 4294966270;
        else
          result = result;
        *v12 += v37;
        if ((_DWORD)result)
          goto LABEL_79;
        v16 = *(_DWORD *)(v7 + 12);
        *(_DWORD *)(v7 + 784) = v16;
        if (v16 == 408125543)
        {
          v17 = -1;
        }
        else if (*(_QWORD *)(v7 + 40) == 0xFFFFFFFFFFFFFFFFLL >> (-7 * *(_DWORD *)(v7 + 36) + 57))
        {
          v17 = -1;
        }
        else
        {
          v17 = *(_QWORD *)(v7 + 40);
        }
        *(_QWORD *)(v7 + 792) = v17;
        *(_DWORD *)(v7 + 816) = 3;
        continue;
      case 3:
        v18 = *v11;
        if (*v11 == 440786851)
        {
          v19 = v7 + 48;
          goto LABEL_43;
        }
        if (v18 == 408125543)
        {
          v19 = v7 + 432;
LABEL_43:
          *(_QWORD *)(v7 + 776) = v19;
          *(_BYTE *)(v7 + 812) = 0;
          v13 = 4;
          goto LABEL_7;
        }
        v35 = 0;
        v36 = 0;
        if (!*(_BYTE *)(v7 + 812))
          goto LABEL_53;
        if ((webm::Ancestory::ById(v18, &v35) & 1) != 0)
        {
          v21 = v36;
          v22 = v35 + 1;
          v23 = 48;
          if (*v35 == 408125543)
          {
            v23 = 432;
            v24 = v7 + 432;
          }
          else
          {
            v24 = v7 + 48;
          }
          *(_QWORD *)(v7 + 776) = v24;
          v34[0] = v22;
          v34[1] = v21;
          (*(void (**)(void))(*(_QWORD *)(v7 + v23) + 32))();
          *(_DWORD *)(v7 + 784) = *v35;
          *(_QWORD *)v12 = -1;
          *(_QWORD *)(v7 + 796) = -1;
          *(_DWORD *)(v7 + 804) = -1;
          *(_BYTE *)(v7 + 812) = 0;
          *(_DWORD *)(v7 + 808) = 0;
          v13 = 6;
LABEL_7:
          *(_DWORD *)(v7 + 816) = v13;
          continue;
        }
        v18 = *v11;
LABEL_53:
        if (v18 == 236)
        {
          v27 = v7 + 672;
LABEL_57:
          *(_QWORD *)(v7 + 776) = v27;
          v13 = 4;
          goto LABEL_7;
        }
        if (*(_QWORD *)(v7 + 792) != -1)
        {
          v27 = v7 + 728;
          goto LABEL_57;
        }
        result = 4294966269;
LABEL_79:
        v32[2] = result;
        return result;
      case 4:
        result = (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v10 + 16))(v10, v7 + 784, v8);
        if ((_DWORD)result)
          goto LABEL_79;
        if (*v8 == 1)
        {
          v10 = v33;
          if (*(_QWORD *)(v7 + 792) != -1)
          {
            *(_QWORD *)(v7 + 776) = v7 + 712;
            v10 = v33;
          }
        }
        v13 = 5;
        goto LABEL_7;
      case 5:
        result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v7 + 776) + 24))(*(_QWORD *)(v7 + 776), v7 + 784, *(_QWORD *)(v7 + 792));
        if ((_DWORD)result)
          goto LABEL_79;
        v13 = 6;
        goto LABEL_7;
      case 6:
        result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(v7 + 776) + 16))(*(_QWORD *)(v7 + 776), v10, a3, &v37);
        if ((_DWORD)result)
          goto LABEL_79;
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v7 + 776) + 40))(*(_QWORD *)(v7 + 776), v7 + 784) & 1) != 0)
        {
          v20 = 3;
        }
        else
        {
          *v12 = 0;
          v20 = 1;
        }
        *(_DWORD *)(v7 + 816) = v20;
        *(_QWORD *)(v7 + 8) = 0xFFFFFFFFLL;
        *(_DWORD *)(v7 + 32) = -1;
        *(_DWORD *)(v7 + 44) = 0;
        *(_QWORD *)(v7 + 36) = 0;
        *(_QWORD *)(v7 + 776) = 0;
        *(_DWORD *)(v7 + 808) = 0;
        *(_QWORD *)(v7 + 800) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 32))(a3);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 184))(a2, v7 + 784);
        v10 = a2;
        continue;
      case 7:
        goto LABEL_79;
      default:
        continue;
    }
  }
}

uint64_t *webm::WebmParser::Swap(uint64_t *this, webm::WebmParser *a2)
{
  uint64_t v2;

  v2 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v2;
  LODWORD(v2) = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v2;
  return this;
}

uint64_t *webm::swap(uint64_t *this, webm::WebmParser *a2, webm::WebmParser *a3)
{
  uint64_t v3;

  v3 = *this;
  *this = *(_QWORD *)a2;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = v3;
  return this;
}

void webm::WebmParser::DocumentParser::~DocumentParser(webm::WebmParser::DocumentParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *((_QWORD *)this + 54) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 66);
  if (v2)
  {
    do
    {
      v6 = (_QWORD *)*v2;
      v7 = v2[3];
      v2[3] = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      operator delete(v2);
      v2 = v6;
    }
    while (v6);
  }
  v3 = (void *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v3)
    operator delete(v3);
  *((_QWORD *)this + 6) = off_24C0D9AD0;
  *((_QWORD *)this + 24) = &off_24C0D70E8;
  v4 = (_QWORD *)*((_QWORD *)this + 36);
  if (v4)
  {
    do
    {
      v8 = (_QWORD *)*v4;
      v9 = v4[3];
      v4[3] = 0;
      if (v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      operator delete(v4);
      v4 = v8;
    }
    while (v8);
  }
  v5 = (void *)*((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v5)
    operator delete(v5);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
}

void webm::EbmlParser::~EbmlParser(webm::EbmlParser *this)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = off_24C0D9AD0;
  *((_QWORD *)this + 18) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 30);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    operator delete(v3);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
}

{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)this = off_24C0D9AD0;
  *((_QWORD *)this + 18) = &off_24C0D70E8;
  v2 = (_QWORD *)*((_QWORD *)this + 30);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = (void *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
    operator delete(v3);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Ebml>::~MasterValueParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_24C0D9AD0;
  *(_QWORD *)(a1 + 144) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 240);
  if (v2)
  {
    do
    {
      v5 = (_QWORD *)*v2;
      v6 = v2[3];
      v2[3] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v3)
    operator delete(v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  return a1;
}

void webm::MasterValueParser<webm::Ebml>::~MasterValueParser(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)a1 = off_24C0D9AD0;
  *(_QWORD *)(a1 + 144) = &off_24C0D70E8;
  v2 = *(_QWORD **)(a1 + 240);
  if (v2)
  {
    do
    {
      v4 = (_QWORD *)*v2;
      v5 = v2[3];
      v2[3] = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      operator delete(v2);
      v2 = v4;
    }
    while (v4);
  }
  v3 = *(void **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v3)
    operator delete(v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Ebml>::Feed(uint64_t a1, void **a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  void *v10;

  *a4 = 0;
  if (*(_BYTE *)(a1 + 140))
  {
    if (*(_BYTE *)(a1 + 141))
      goto LABEL_3;
  }
  else
  {
    v10 = &unk_24C0D7130;
    if (*(_DWORD *)(a1 + 136) == 1)
      a2 = &v10;
    result = webm::MasterParser::Feed(a1 + 144, a2, a3, a4);
    if ((_DWORD)result == 0x80000000)
    {
      v9 = 0;
      a2 = &v10;
      result = webm::MasterParser::Feed(a1 + 144, &v10, a3, &v9);
      *a4 += v9;
    }
    if ((_DWORD)result)
      return result;
    *(_BYTE *)(a1 + 140) = 1;
    if (*(_BYTE *)(a1 + 141))
    {
LABEL_3:
      if (*(_DWORD *)(a1 + 136) == 1)
        return 0;
      return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
    }
  }
  result = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a1 + 136);
  if (!(_DWORD)result)
  {
    *(_BYTE *)(a1 + 141) = 1;
    if (*(_DWORD *)(a1 + 136) == 1)
      return 0;
    return (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 64))(a1, a2);
  }
  return result;
}

uint64_t webm::MasterValueParser<webm::Ebml>::Init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  _BYTE v13[15];
  char v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v14 = 8;
  if (&v12 <= (uint64_t *)"matroska" && v13 > "matroska")
    __break(1u);
  v13[0] = 0;
  v15[0] = *(_QWORD *)v13;
  *(_QWORD *)((char *)v15 + 7) = *(_QWORD *)&v13[7];
  v6 = *(char *)(a1 + 95);
  *(_QWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 8;
  *(_BYTE *)(a1 + 64) = 0;
  if (v6 < 0)
    operator delete(*(void **)(a1 + 72));
  v7 = v15[0];
  *(_QWORD *)(a1 + 72) = 0x616B736F7274616DLL;
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 87) = *(_QWORD *)((char *)v15 + 7);
  *(_WORD *)(a1 + 95) = 8;
  *(_QWORD *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 1;
  *(_BYTE *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 140) = 0;
  LODWORD(v7) = *(_DWORD *)(a2 + 4);
  v8 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 160) = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 184) = -1;
  *(_DWORD *)(a1 + 196) = 0;
  *(_QWORD *)(a1 + 188) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  *(_DWORD *)(a1 + 336) = v7;
  *(_OWORD *)(a1 + 344) = v8;
  *(_QWORD *)(a1 + 368) = 0;
  *(_BYTE *)(a1 + 376) = 0;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9 == -1)
  {
    *(_QWORD *)(a1 + 360) = a3;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 360) = v9;
  if (v9)
  {
LABEL_9:
    v10 = 0;
    goto LABEL_10;
  }
  v10 = 8;
LABEL_10:
  *(_DWORD *)(a1 + 332) = v10;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Ebml>::InitAfterSeek(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[15];
  char v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v11 = 8;
  if (&v9 <= (uint64_t *)"matroska" && v10 > "matroska")
    __break(1u);
  v10[0] = 0;
  v12[0] = *(_QWORD *)v10;
  *(_QWORD *)((char *)v12 + 7) = *(_QWORD *)&v10[7];
  v6 = *(char *)(a1 + 95);
  *(_QWORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 4;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 8;
  *(_BYTE *)(a1 + 64) = 0;
  if (v6 < 0)
    operator delete(*(void **)(a1 + 72));
  v7 = v12[0];
  *(_QWORD *)(a1 + 72) = 0x616B736F7274616DLL;
  *(_QWORD *)(a1 + 80) = v7;
  *(_QWORD *)(a1 + 87) = *(_QWORD *)((char *)v12 + 7);
  *(_WORD *)(a1 + 95) = 8;
  *(_QWORD *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 1;
  *(_BYTE *)(a1 + 128) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 140) = 256;
  return webm::MasterParser::InitAfterSeek(a1 + 144, a2, a3);
}

BOOL webm::MasterValueParser<webm::Ebml>::GetCachedMetadata(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  if (!*(_BYTE *)(a1 + 376))
    return 0;
  v2 = *(_OWORD *)(a1 + 200);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 216);
  *(_OWORD *)a2 = v2;
  return *(_BYTE *)(a1 + 376) != 0;
}

BOOL webm::MasterValueParser<webm::Ebml>::WasSkipped(uint64_t a1)
{
  return *(_DWORD *)(a1 + 136) == 1;
}

uint64_t webm::MasterValueParser<webm::Ebml>::OnParseStarted(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t webm::MasterValueParser<webm::Ebml>::OnParseCompleted()
{
  return 0;
}

uint64_t webm::MasterValueParser<webm::Ebml>::MasterValueParser<webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::ByteParser<std::string>,std::string>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::string::size_type size;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  std::string v51;

  v13 = result;
  *(_QWORD *)result = off_24C0D9AD0;
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 1;
  *(_BYTE *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 4;
  *(_QWORD *)(result + 8) = 1;
  v14 = result + 8;
  *(_BYTE *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 8;
  *((_BYTE *)&v51.__r_.__value_.__s + 23) = 8;
  *(_BYTE *)(result + 64) = 0;
  if (&v51 <= (std::string *)"matroska" && &v51.__r_.__value_.__r.__words[1] > (std::string::size_type *)"matroska")
  {
    __break(1u);
  }
  else
  {
    strcpy((char *)&v51, "matroska");
    *(std::string *)(result + 72) = v51;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)(result + 104) = 1;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)(result + 120) = 1;
    *(_BYTE *)(result + 128) = 0;
    *(_DWORD *)(result + 136) = 0;
    v36 = result + 144;
    v15 = (_QWORD *)(v14 + *(_QWORD *)(a2 + 8));
    v16 = operator new();
    *(_QWORD *)(v16 + 16) = *v15;
    *(_DWORD *)(v16 + 24) = -1;
    *(_QWORD *)v16 = &off_24C0D9B90;
    *(_QWORD *)(v16 + 32) = v13;
    *(_QWORD *)(v16 + 40) = v15;
    v49 = *(_DWORD *)a2;
    v50 = v16;
    v17 = (_QWORD *)(v14 + *(_QWORD *)(a3 + 8));
    v18 = operator new();
    *(_QWORD *)(v18 + 16) = *v17;
    *(_DWORD *)(v18 + 24) = -1;
    *(_QWORD *)v18 = &off_24C0D9B90;
    *(_QWORD *)(v18 + 32) = v13;
    *(_QWORD *)(v18 + 40) = v17;
    v47 = *(_DWORD *)a3;
    v48 = v18;
    v19 = (_QWORD *)(v14 + *(_QWORD *)(a4 + 8));
    v20 = operator new();
    *(_QWORD *)(v20 + 16) = *v19;
    *(_DWORD *)(v20 + 24) = -1;
    *(_QWORD *)v20 = &off_24C0D9B90;
    *(_QWORD *)(v20 + 32) = v13;
    *(_QWORD *)(v20 + 40) = v19;
    v45 = *(_DWORD *)a4;
    v46 = v20;
    v21 = (_QWORD *)(v14 + *(_QWORD *)(a5 + 8));
    v22 = operator new();
    *(_QWORD *)(v22 + 16) = *v21;
    *(_DWORD *)(v22 + 24) = -1;
    *(_QWORD *)v22 = &off_24C0D9B90;
    *(_QWORD *)(v22 + 32) = v13;
    *(_QWORD *)(v22 + 40) = v21;
    v43 = *(_DWORD *)a5;
    v44 = v22;
    v23 = v14 + *(_QWORD *)(a6 + 8);
    v24 = operator new();
    if (*(char *)(v23 + 23) < 0)
      std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)v23, *(_QWORD *)(v23 + 8));
    else
      v51 = *(std::string *)v23;
    *(_QWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 24) = 0;
    *(std::string *)(v24 + 32) = v51;
    *(_QWORD *)v24 = off_24C0D9BD8;
    *(_QWORD *)(v24 + 8) = 0;
    *(_QWORD *)(v24 + 64) = v13;
    *(_QWORD *)(v24 + 72) = v23;
    LODWORD(v51.__r_.__value_.__l.__data_) = *(_DWORD *)a6;
    v25 = (_QWORD *)(v14 + *(_QWORD *)(a7 + 8));
    v51.__r_.__value_.__l.__size_ = v24;
    v26 = operator new();
    *(_QWORD *)(v26 + 16) = *v25;
    *(_DWORD *)(v26 + 24) = -1;
    *(_QWORD *)v26 = &off_24C0D9B90;
    *(_QWORD *)(v26 + 32) = v13;
    *(_QWORD *)(v26 + 40) = v25;
    v41 = *(_DWORD *)a7;
    v42 = v26;
    v27 = (_QWORD *)(v14 + *(_QWORD *)(a8 + 8));
    v28 = operator new();
    *(_QWORD *)(v28 + 16) = *v27;
    *(_DWORD *)(v28 + 24) = -1;
    *(_QWORD *)v28 = &off_24C0D9B90;
    *(_QWORD *)(v28 + 32) = v13;
    *(_QWORD *)(v28 + 40) = v27;
    v39 = *(_DWORD *)a8;
    v40 = v28;
    webm::MasterParser::MasterParser<std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>,std::pair<webm::Id,std::unique_ptr<webm::ElementParser>>>(v36, &v49, &v47, &v45, &v43, (unsigned int *)&v51, &v41, &v39);
    v29 = v40;
    v40 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v42;
    v42 = 0;
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
    size = v51.__r_.__value_.__l.__size_;
    v51.__r_.__value_.__l.__size_ = 0;
    if (size)
      (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
    v32 = v44;
    v44 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v46;
    v46 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v48;
    v48 = 0;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = v50;
    v50 = 0;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    return v13;
  }
  return result;
}

uint64_t webm::EbmlParser::OnParseCompleted(webm::EbmlParser *this, webm::Callback *a2)
{
  int v2;
  _DWORD v4[2];
  __int128 v5;

  v2 = *((_DWORD *)this + 84);
  v4[0] = 440786851;
  v4[1] = v2;
  v5 = *(_OWORD *)((char *)this + 344);
  return (*(uint64_t (**)(webm::Callback *, _DWORD *, char *))(*(_QWORD *)a2 + 32))(a2, v4, (char *)this + 8);
}

void webm::MasterValueParser<webm::Ebml>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Ebml>*,webm::Ebml*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::~ChildParser()
{
  JUMPOUT(0x20BD0ADECLL);
}

uint64_t webm::MasterValueParser<webm::Ebml>::ChildParser<webm::IntParser<unsigned long long>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::IntParser<unsigned long long>,unsigned long long>::BuildParser(webm::MasterValueParser<webm::Ebml>*,webm::Ebml*)::{lambda(webm::IntParser<unsigned long long>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unsigned int v5;
  int v6;
  uint64_t result;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 24);
  *a4 = 0;
  if (v5 > 8)
  {
    v6 = 0;
    result = 4294966270;
LABEL_14:
    *(_DWORD *)(a1 + 24) = v5 - v6;
    return result;
  }
  if (v5)
  {
    v10 = v5 + 1;
    while (1)
    {
      v12 = 0;
      v13 = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, uint64_t *))(*(_QWORD *)a3 + 16))(a3, 1, &v12, &v13);
      if ((_DWORD)result)
        break;
      ++*a4;
      *(_QWORD *)(a1 + 8) = v12 | (*(_QWORD *)(a1 + 8) << 8);
      if ((int)--v10 <= 1)
      {
        v5 = *(_DWORD *)(a1 + 24) - *(_DWORD *)a4;
        goto LABEL_8;
      }
    }
    v6 = *(_DWORD *)a4;
    v5 = *(_DWORD *)(a1 + 24);
    goto LABEL_14;
  }
LABEL_8:
  *(_DWORD *)(a1 + 24) = v5;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 136) == 1)
    return 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
    return 0;
  result = 0;
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v11 + 8) = 1;
  return result;
}

uint64_t webm::MasterValueParser<webm::Ebml>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::Ebml>*,webm::Ebml*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void webm::MasterValueParser<webm::Ebml>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::Ebml>*,webm::Ebml*)::{lambda(webm::ByteParser<std::string>*)#1}>::~ChildParser(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C0D7500;
  if (*(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_6:
      JUMPOUT(0x20BD0ADECLL);
  }
  else if ((*(char *)(a1 + 31) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(a1 + 8));
  goto LABEL_6;
}

uint64_t webm::MasterValueParser<webm::Ebml>::ChildParser<webm::ByteParser<std::string>,webm::MasterValueParser<webm::Ebml>::SingleChildFactory<webm::ByteParser<std::string>,std::string>::BuildParser(webm::MasterValueParser<webm::Ebml>*,webm::Ebml*)::{lambda(webm::ByteParser<std::string>*)#1}>::Feed(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v7;
  __int128 v8;

  *a4 = 0;
  v5 = webm::ByteParser<std::string>::Feed(a1, a2, a3, a4);
  if ((_DWORD)v5
    || *(_DWORD *)(*(_QWORD *)(a1 + 64) + 136) == 1
    || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) != 0)
  {
    return v5;
  }
  v7 = *(_QWORD *)(a1 + 72);
  if (*(char *)(v7 + 23) < 0)
    operator delete(*(void **)v7);
  v8 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v7 = v8;
  *(_BYTE *)(a1 + 31) = 0;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(v7 + 24) = 1;
  return v5;
}

uint64_t I420Copy(char *a1, int a2, char *a3, int a4, char *a5, int a6, char *a7, int a8, char *a9, int a10, char *a11, int a12, int a13, int a14)
{
  char *v14;
  char *v15;
  BOOL v16;
  int v17;
  char *v24;
  int v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  char *v31;
  int v32;
  char *v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  void *(*v44)(void *, void *, int);
  void *(*v45)(void *, void *, int);
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v53;
  char v54;
  void *(*v55)(void *, void *, int);
  void *(*v56)(void *, void *, int);
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  char v68;
  void *(*v69)(void *, void *, int);
  void *(*v70)(void *, void *, int);
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  void *(*v76)(void *, void *, int);

  v14 = a11;
  v15 = a9;
  if (a1)
    v16 = 1;
  else
    v16 = a7 == 0;
  v17 = v16;
  if (a13 < 1 || a9 == 0 || a5 == 0 || a3 == 0 || v17 == 0 || a11 == 0 || a14 == 0)
    return 0xFFFFFFFFLL;
  v24 = a7;
  v25 = ((1 - a14) >> 1) - 1;
  v26 = &a3[v25 * (uint64_t)a4];
  v27 = &a5[v25 * (uint64_t)a6];
  if (a14 >= 0)
    v28 = a6;
  else
    v28 = -a6;
  v74 = v28;
  if (a14 < 0)
    v29 = v27;
  else
    v29 = a5;
  if (a14 >= 0)
    v30 = a4;
  else
    v30 = -a4;
  v73 = v30;
  if (a14 < 0)
    v31 = v26;
  else
    v31 = a3;
  if (a14 >= 0)
    v32 = a2;
  else
    v32 = -a2;
  if (a14 < 0)
    v33 = &a1[~a14 * a2];
  else
    v33 = a1;
  if (a14 >= 0)
    v34 = a14;
  else
    v34 = -a14;
  if (a14 < 0)
    v35 = (1 - a14) >> 1;
  else
    v35 = (a14 + 1) >> 1;
  v75 = v35;
  if (a7)
  {
    v36 = v32 == a13 ? 0 : v32;
    v37 = v32 == a13 ? 0 : a8;
    v38 = v32 == a13 ? v34 * a13 : a13;
    v39 = v32 == a13 ? 1 : v34;
    if (a8 == a13)
    {
      v32 = v36;
      v40 = v37;
    }
    else
    {
      v40 = a8;
    }
    v41 = a8 == a13 ? v38 : a13;
    v42 = a8 == a13 ? v39 : v34;
    if (v33 != a7 || v32 != v40)
    {
      v43 = cpu_info_;
      if (!cpu_info_)
      {
        v43 = 7;
        cpu_info_ = 7;
      }
      v44 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
      if ((v41 & 0x1F) == 0)
        v44 = (void *(*)(void *, void *, int))CopyRow_NEON;
      if ((v43 & 4) != 0)
        v45 = v44;
      else
        v45 = CopyRow_C;
      v76 = v45;
      v46 = v32;
      v47 = v40;
      do
      {
        v76(v33, v24, v41);
        v33 += v46;
        v24 += v47;
        --v42;
      }
      while (v42);
    }
  }
  if (v75)
  {
    v48 = a10;
    v49 = (a13 + 1) >> 1;
    if ((v75 & 0x80000000) != 0)
    {
      v50 = -v75;
      v15 = &a9[~v75 * a10];
      v48 = -a10;
      v51 = v73;
      if (v73 != v49)
        goto LABEL_92;
    }
    else
    {
      v50 = v75;
      v51 = v73;
      if (v73 != v49)
        goto LABEL_92;
    }
    if (v48 == v49)
    {
      v51 = 0;
      v48 = 0;
      v53 = v50 * v49;
      v50 = 1;
      if (v15 != v31)
        goto LABEL_94;
LABEL_93:
      if (v51 == v48)
      {
LABEL_103:
        v59 = a12;
        v60 = v75;
        if ((v75 & 0x80000000) != 0)
        {
          v60 = -v75;
          v14 = &a11[~v75 * a12];
          v59 = -a12;
        }
        if (v59 == v49)
          v61 = 0;
        else
          v61 = v74;
        if (v59 == v49)
          v62 = 0;
        else
          v62 = v59;
        if (v59 == v49)
          v63 = v60 * v49;
        else
          v63 = (a13 + 1) >> 1;
        if (v59 == v49)
          v64 = 1;
        else
          v64 = v60;
        if (v74 == v49)
          v65 = v61;
        else
          v65 = v74;
        if (v74 == v49)
        {
          v59 = v62;
          v66 = v63;
        }
        else
        {
          v66 = v49;
        }
        if (v74 == v49)
          v67 = v64;
        else
          v67 = v60;
        if (v14 != v29 || v65 != v59)
        {
          v68 = cpu_info_;
          if (!cpu_info_)
          {
            v68 = 7;
            cpu_info_ = 7;
          }
          v69 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
          if ((v66 & 0x1F) == 0)
            v69 = (void *(*)(void *, void *, int))CopyRow_NEON;
          if ((v68 & 4) != 0)
            v70 = v69;
          else
            v70 = CopyRow_C;
          v71 = v65;
          v72 = v59;
          do
          {
            v70(v29, v14, v66);
            v29 += v71;
            v14 += v72;
            --v67;
          }
          while (v67);
        }
        return 0;
      }
LABEL_94:
      v54 = cpu_info_;
      if (!cpu_info_)
      {
        v54 = 7;
        cpu_info_ = 7;
      }
      v55 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
      if ((v53 & 0x1F) == 0)
        v55 = (void *(*)(void *, void *, int))CopyRow_NEON;
      if ((v54 & 4) != 0)
        v56 = v55;
      else
        v56 = CopyRow_C;
      v57 = v51;
      v58 = v48;
      do
      {
        v56(v31, v15, v53);
        v31 += v57;
        v15 += v58;
        --v50;
      }
      while (v50);
      goto LABEL_103;
    }
LABEL_92:
    v53 = ((a13 + 1) >> 1);
    if (v15 != v31)
      goto LABEL_94;
    goto LABEL_93;
  }
  return 0;
}

uint64_t libyuv::Planar16bitTo8bit(libyuv *this, const unsigned __int16 *a2, uint16x8_t *a3, const unsigned __int16 *a4, uint16x8_t *a5, const unsigned __int16 *a6, int8x16_t *a7, unsigned __int8 *a8, uint64_t a9, unsigned __int8 *a10, uint64_t a11, unsigned __int8 *a12, int a13, int a14, int a15, char a16, int a17, int a18)
{
  int v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t *v24;
  uint16x8_t *v25;
  int v26;
  int v27;
  uint16x8_t *v28;
  int v29;
  int v30;
  libyuv *v31;
  int v32;
  int v33;
  int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  char v41;
  uint16x8_t *(*v42)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint16x8_t *(*v43)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  char v52;
  uint16x8_t *(*v53)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint16x8_t *(*v54)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  char v67;
  uint16x8_t *(*v68)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint16x8_t *(*v69)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint64_t v70;
  uint64_t v71;
  uint16x8_t *v72;
  int v74;
  int v75;
  uint16x8_t *v76;
  unsigned int v77;
  int v78;
  unsigned int v79;

  if (SHIDWORD(a12) < 0)
    v18 = -((a14 - HIDWORD(a12)) >> a14);
  else
    v18 = (a14 + HIDWORD(a12)) >> a14;
  v19 = (a15 + a13) >> a15;
  if (a13 < 0)
    v19 = -((a15 - a13) >> a15);
  if (this)
    v20 = 1;
  else
    v20 = a7 == 0;
  v21 = v20;
  v22 = 0xFFFFFFFFLL;
  if (SHIDWORD(a12) >= 1)
  {
    v23 = a9;
    if (a9)
    {
      if (a5 && a3 && v21 && a11 && a13)
      {
        v24 = a7;
        v77 = v18;
        v79 = 1 << (24 - a16);
        v25 = (uint16x8_t *)((char *)a5 + 2 * ~v19 * (int)a6);
        if (a13 >= 0)
          v26 = (int)a6;
        else
          v26 = -(int)a6;
        v75 = v26;
        if (a13 >= 0)
          v25 = a5;
        v76 = v25;
        if (a13 >= 0)
          v27 = (int)a4;
        else
          v27 = -(int)a4;
        v74 = v27;
        if (a13 < 0)
          v28 = (uint16x8_t *)((char *)a3 + 2 * ~v19 * (int)a4);
        else
          v28 = a3;
        if (a13 >= 0)
          v29 = a13;
        else
          v29 = -a13;
        if (a13 >= 0)
          v30 = (int)a2;
        else
          v30 = -(int)a2;
        if (a13 < 0)
          v31 = (libyuv *)((char *)this + 2 * ~a13 * (int)a2);
        else
          v31 = this;
        if (a13 >= 0)
          v32 = v19;
        else
          v32 = -v19;
        v78 = v32;
        if (v30 == HIDWORD(a12))
          v33 = 0;
        else
          v33 = v30;
        if (v30 == HIDWORD(a12))
          v34 = 0;
        else
          v34 = (int)a8;
        if (v30 == HIDWORD(a12))
          v35 = v29 * HIDWORD(a12);
        else
          v35 = HIDWORD(a12);
        if (v30 == HIDWORD(a12))
          v36 = 1;
        else
          v36 = v29;
        if ((_DWORD)a8 == HIDWORD(a12))
          v37 = v33;
        else
          v37 = v30;
        if ((_DWORD)a8 == HIDWORD(a12))
          v38 = v34;
        else
          v38 = (int)a8;
        if ((_DWORD)a8 == HIDWORD(a12))
          v39 = v35;
        else
          v39 = HIDWORD(a12);
        if ((_DWORD)a8 == HIDWORD(a12))
          v40 = v36;
        else
          v40 = v29;
        v41 = cpu_info_;
        if (!cpu_info_)
        {
          v41 = 7;
          cpu_info_ = 7;
        }
        v42 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_Any_NEON;
        if ((v39 & 0xF) == 0)
          v42 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_NEON;
        v43 = (v41 & 4) != 0 ? v42 : Convert16To8Row_C;
        v44 = v38;
        v45 = 2 * v37;
        do
        {
          v43((uint16x8_t *)v31, v24, v79, v39);
          v24 = (int8x16_t *)((char *)v24 + v44);
          v31 = (libyuv *)((char *)v31 + v45);
          --v40;
        }
        while (v40);
        v22 = 0;
        if ((int)v77 >= 1)
        {
          v46 = a11;
          if (v78)
          {
            v47 = v78;
            v48 = (int)a10;
            if (v78 < 0)
            {
              v47 = -v78;
              v23 = a9 + ~v78 * (int)a10;
              v48 = -(int)a10;
            }
            v49 = v74;
            if (v74 == v77)
            {
              v50 = v48 == v77;
              if (v48 == v77)
                v49 = 0;
              else
                v49 = v74;
              if (v48 == v77)
                v48 = 0;
              if (v50)
                v51 = v47 * v77;
              else
                v51 = v77;
              if (v50)
                v47 = 1;
              v52 = cpu_info_;
              if (cpu_info_)
                goto LABEL_93;
            }
            else
            {
              v51 = v77;
              v52 = cpu_info_;
              if (cpu_info_)
                goto LABEL_93;
            }
            v52 = 7;
            cpu_info_ = 7;
LABEL_93:
            v53 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_Any_NEON;
            if ((v51 & 0xF) == 0)
              v53 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_NEON;
            if ((v52 & 4) != 0)
              v54 = v53;
            else
              v54 = Convert16To8Row_C;
            v55 = v48;
            v56 = 2 * v49;
            do
            {
              v54(v28, (int8x16_t *)v23, v79, v51);
              v23 += v55;
              v28 = (uint16x8_t *)((char *)v28 + v56);
              --v47;
            }
            while (v47);
            v57 = v78;
            if (v78 < 0)
            {
              v57 = -v78;
              v46 = a11 + ~v78 * (int)a12;
              v58 = -(int)a12;
            }
            else
            {
              v58 = (int)a12;
            }
            if (v58 == v77)
              v59 = 0;
            else
              v59 = v75;
            if (v58 == v77)
              v60 = 0;
            else
              v60 = v58;
            if (v58 == v77)
              v61 = v57 * v77;
            else
              v61 = v77;
            if (v58 == v77)
              v62 = 1;
            else
              v62 = v57;
            if (v75 == v77)
              v63 = v59;
            else
              v63 = v75;
            if (v75 == v77)
              v64 = v60;
            else
              v64 = v58;
            if (v75 == v77)
              v65 = v61;
            else
              v65 = v77;
            if (v75 == v77)
              v66 = v62;
            else
              v66 = v57;
            v67 = cpu_info_;
            if (!cpu_info_)
            {
              v67 = 7;
              cpu_info_ = 7;
            }
            v68 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_Any_NEON;
            if ((v65 & 0xF) == 0)
              v68 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_NEON;
            if ((v67 & 4) != 0)
              v69 = v68;
            else
              v69 = Convert16To8Row_C;
            v70 = v64;
            v71 = 2 * v63;
            v72 = v76;
            do
            {
              v69(v72, (int8x16_t *)v46, v79, v65);
              v46 += v70;
              v72 = (uint16x8_t *)((char *)v72 + v71);
              --v66;
            }
            while (v66);
            return 0;
          }
        }
      }
    }
  }
  return v22;
}

uint64_t libyuv::I21xToI420(libyuv *this, const unsigned __int16 *a2, uint64_t a3, const unsigned __int16 *a4, uint64_t a5, const unsigned __int16 *a6, int8x16_t *a7, unsigned __int8 *a8, __int128 *a9, unsigned __int8 *a10, __int128 *a11, unsigned __int8 *a12, int a13, char a14, int a15, int a16)
{
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  libyuv *v27;
  unint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unsigned int v36;
  char v37;
  uint16x8_t *(*v38)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint16x8_t *(*v39)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint64_t v40;
  uint64_t v41;
  int v42;
  char v43;
  __int128 *(*v44)(__int128 *, uint16x8_t *, uint64_t, unsigned int, unsigned int, unsigned int);
  __int128 *(*v45)(__int128 *, uint16x8_t *, uint64_t, unsigned int, unsigned int, unsigned int);
  int v46;
  int v47;
  int v48;
  int v49;
  char v50;
  __int128 *(*v51)(__int128 *, uint16x8_t *, uint64_t, unsigned int, unsigned int, unsigned int);
  int v52;
  int v53;
  __int128 *(*v54)(__int128 *, uint16x8_t *, uint64_t, unsigned int, unsigned int, unsigned int);
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  uint16x8_t *(*v62)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  __int128 *(*v63)(__int128 *, uint16x8_t *, uint64_t, unsigned int, unsigned int, unsigned int);
  int v64;
  __int128 *(*v65)(__int128 *, uint16x8_t *, uint64_t, unsigned int, unsigned int, unsigned int);

  if (SHIDWORD(a12) < 1 || a13 == 0)
    return 0xFFFFFFFFLL;
  v21 = a5 + 2 * ~a13 * (int)a6;
  if (a13 >= 0)
    v22 = (int)a6;
  else
    v22 = -(int)a6;
  if (a13 >= 0)
    v21 = a5;
  v56 = v21;
  v57 = v22;
  if (a13 >= 0)
    v23 = (int)a4;
  else
    v23 = -(int)a4;
  v64 = v23;
  if (a13 < 0)
    v24 = a3 + 2 * ~a13 * (int)a4;
  else
    v24 = a3;
  v55 = v24;
  if (a13 >= 0)
    v25 = (int)a2;
  else
    v25 = -(int)a2;
  if (a13 >= 0)
    v26 = a13;
  else
    v26 = -a13;
  if (a13 < 0)
    v27 = (libyuv *)((char *)this + 2 * ~a13 * (int)a2);
  else
    v27 = this;
  v60 = (HIDWORD(a12) + 1) >> 1;
  v28 = (v26 + 1) >> 1;
  v58 = ((unint64_t)v26 << 16) / v28;
  if (v25 == HIDWORD(a12))
    v29 = 0;
  else
    v29 = v25;
  if (v25 == HIDWORD(a12))
    v30 = 0;
  else
    v30 = (int)a8;
  if (v25 == HIDWORD(a12))
    v31 = v26 * HIDWORD(a12);
  else
    v31 = HIDWORD(a12);
  if (v25 == HIDWORD(a12))
    v32 = 1;
  else
    v32 = v26;
  if ((_DWORD)a8 == HIDWORD(a12))
    v33 = v29;
  else
    v33 = v25;
  if ((_DWORD)a8 == HIDWORD(a12))
    v34 = v30;
  else
    v34 = (int)a8;
  if ((_DWORD)a8 == HIDWORD(a12))
    v35 = v31;
  else
    v35 = HIDWORD(a12);
  v61 = v26;
  if ((_DWORD)a8 == HIDWORD(a12))
    v36 = v32;
  else
    v36 = v26;
  v37 = cpu_info_;
  if (!cpu_info_)
  {
    v37 = 7;
    cpu_info_ = 7;
  }
  v38 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_Any_NEON;
  if ((v35 & 0xF) == 0)
    v38 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_NEON;
  if ((v37 & 4) != 0)
    v39 = v38;
  else
    v39 = Convert16To8Row_C;
  v62 = v39;
  v40 = v34;
  v41 = 2 * v33;
  do
  {
    v62((uint16x8_t *)v27, a7, 1 << (24 - a14), v35);
    a7 = (int8x16_t *)((char *)a7 + v40);
    v27 = (libyuv *)((char *)v27 + v41);
    --v36;
  }
  while (v36);
  v59 = 1 << (24 - a14);
  if (v61 <= 1)
    v42 = 0;
  else
    v42 = (v61 << 16) - 65537;
  v43 = cpu_info_;
  if (!cpu_info_)
  {
    v43 = 7;
    cpu_info_ = 7;
  }
  v44 = (__int128 *(*)(__int128 *, uint16x8_t *, uint64_t, unsigned int, unsigned int, unsigned int))InterpolateRow_16To8_Any_NEON;
  if (((BYTE4(a12) + 1) & 0xE) == 0)
    v44 = (__int128 *(*)(__int128 *, uint16x8_t *, uint64_t, unsigned int, unsigned int, unsigned int))InterpolateRow_16To8_NEON;
  v54 = v44;
  if ((v43 & 4) != 0)
    v45 = v44;
  else
    v45 = InterpolateRow_16To8_C;
  v46 = v64;
  v63 = v45;
  v47 = 0x8000;
  v48 = v28;
  do
  {
    if (v47 >= v42)
      v49 = v42;
    else
      v49 = v47;
    v63(a9, (uint16x8_t *)(v55 + 2 * (v49 >> 16) * v46), v64, v59, v60, BYTE1(v49));
    v46 = v64;
    a9 = (__int128 *)((char *)a9 + (int)a10);
    v47 = v49 + v58;
    --v48;
  }
  while (v48);
  v50 = cpu_info_;
  if (!cpu_info_)
  {
    v50 = 7;
    cpu_info_ = 7;
  }
  if ((v50 & 4) != 0)
    v51 = v54;
  else
    v51 = InterpolateRow_16To8_C;
  v65 = v51;
  v52 = 0x8000;
  do
  {
    if (v52 >= v42)
      v53 = v42;
    else
      v53 = v52;
    v65(a11, (uint16x8_t *)(v56 + 2 * (v53 >> 16) * v57), v57, v59, v60, BYTE1(v53));
    a11 = (__int128 *)((char *)a11 + (int)a12);
    v52 = v53 + v58;
    LODWORD(v28) = v28 - 1;
  }
  while ((_DWORD)v28);
  return 0;
}

uint64_t I410ToI420(uint16x8_t *a1, int a2, unsigned __int16 *a3, int a4, unsigned __int16 *a5, int a6, int8x16_t *a7, int a8, char *a9, int a10, char *a11, int a12, int a13, int a14)
{
  int v18;
  unsigned __int16 *v19;
  int v20;
  unsigned __int16 *v21;
  int v22;
  uint16x8_t *v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  uint16x8_t *(*v31)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint16x8_t *(*v32)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int);
  uint64_t v33;
  uint64_t v34;
  unsigned __int16 *(*v35)(unsigned __int16 *, uint64_t, char *, int, unsigned int);
  int v36;
  int v37;
  int v38;
  char *v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  int v45;

  if (a13 < 1 || a14 == 0)
    return 0xFFFFFFFFLL;
  if (a14 >= 0)
    v18 = a6;
  else
    v18 = -a6;
  v43 = v18;
  if (a14 < 0)
    v19 = &a5[~a14 * a6];
  else
    v19 = a5;
  if (a14 >= 0)
    v20 = a4;
  else
    v20 = -a4;
  v42 = v20;
  if (a14 < 0)
    v21 = &a3[~a14 * a4];
  else
    v21 = a3;
  if (a14 >= 0)
    v22 = a2;
  else
    v22 = -a2;
  if (a14 < 0)
    v23 = (uint16x8_t *)((char *)a1 + 2 * ~a14 * a2);
  else
    v23 = a1;
  if (a14 >= 0)
    v24 = a14;
  else
    v24 = -a14;
  v44 = (a13 + 1) >> 1;
  v45 = v24;
  v25 = a8 == a13 && v22 == a13;
  if (v25)
    v26 = 0;
  else
    v26 = v22;
  if (v25)
    v27 = 0;
  else
    v27 = a8;
  if (v25)
    v28 = (v24 * a13);
  else
    v28 = a13;
  if (v25)
    v29 = 1;
  else
    v29 = v24;
  v30 = cpu_info_;
  if (!cpu_info_)
  {
    v30 = 7;
    cpu_info_ = 7;
  }
  v31 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_Any_NEON;
  if ((v28 & 0xF) == 0)
    v31 = (uint16x8_t *(*)(uint16x8_t *, int8x16_t *, unsigned int, unsigned int))Convert16To8Row_NEON;
  if ((v30 & 4) != 0)
    v32 = v31;
  else
    v32 = Convert16To8Row_C;
  v33 = v27;
  v34 = 2 * v26;
  do
  {
    v32(v23, a7, 0x4000u, v28);
    a7 = (int8x16_t *)((char *)a7 + v33);
    v23 = (uint16x8_t *)((char *)v23 + v34);
    --v29;
  }
  while (v29);
  if ((a13 & 1) != 0)
    v35 = ScaleRowDown2Box_16To8_Odd_C;
  else
    v35 = ScaleRowDown2Box_16To8_C;
  if (v45 >= 0)
    v36 = v45;
  else
    v36 = v45 + 1;
  v37 = v36 >> 1;
  if (v45 < 2)
  {
    v39 = a11;
    v40 = v44;
    v41 = v45;
    if ((v45 & 1) == 0)
      goto LABEL_63;
  }
  else
  {
    v38 = v36 >> 1;
    v39 = a11;
    do
    {
      v35(v21, v42, a9, v44, 0x4000u);
      a9 += a10;
      v21 += 2 * v42;
      --v38;
    }
    while (v38);
    v40 = v44;
    v41 = v45;
    if ((v45 & 1) == 0)
      goto LABEL_63;
  }
  v35(v21, 0, a9, v40, 0x4000u);
LABEL_63:
  if (v41 >= 2)
  {
    do
    {
      v35(v19, v43, v39, v40, 0x4000u);
      v39 += a12;
      v19 += 2 * v43;
      --v37;
    }
    while (v37);
  }
  if ((v41 & 1) != 0)
    v35(v19, 0, v39, v40, 0x4000u);
  return 0;
}

uint64_t I010ToP010(int16x8_t *a1, int a2, uint16x8_t *a3, int a4, uint16x8_t *a5, int a6, uint64_t a7, int a8, uint64_t a9, int a10, int a11, int a12)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t result;
  int16x8_t *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  char v30;
  int16x8_t *(*v31)(int16x8_t *, int16x8_t *, __int16, int);
  int16x8_t *(*v32)(int16x8_t *, int16x8_t *, __int16, int);
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  __int16 *v41;
  char v42;
  uint16x8_t *(*v43)(uint16x8_t *, uint16x8_t *, __int16 *, int, unsigned int);
  uint64_t v44;
  uint16x8_t *(*v45)(uint16x8_t *, uint16x8_t *, __int16 *, int, unsigned int);
  uint64_t v46;
  uint64_t v47;
  int v50;

  if (a11 < 0)
    v12 = -((1 - a11) >> 1);
  else
    v12 = (a11 + 1) >> 1;
  v13 = (a12 + 1) >> 1;
  if (a12 < 0)
    v13 = -((1 - a12) >> 1);
  if (a11 < 1 || a12 == 0)
    return 0xFFFFFFFFLL;
  v50 = v13;
  v19 = (int16x8_t *)(a7 + 2 * ((~a12 * a8) & (a12 >> 31)));
  if (a12 >= 0)
    v20 = a8;
  else
    v20 = -a8;
  if (a12 >= 0)
    v21 = a12;
  else
    v21 = -a12;
  if (v20 == a11)
    v22 = 0;
  else
    v22 = a2;
  if (v20 == a11)
    v23 = 0;
  else
    v23 = v20;
  if (v20 == a11)
    v24 = v21 * a11;
  else
    v24 = a11;
  if (v20 == a11)
    v25 = 1;
  else
    v25 = v21;
  if (a2 == a11)
    v26 = v22;
  else
    v26 = a2;
  if (a2 == a11)
    v27 = v23;
  else
    v27 = v20;
  if (a2 == a11)
    v28 = v24;
  else
    v28 = a11;
  if (a2 == a11)
    v29 = v25;
  else
    v29 = v21;
  v30 = cpu_info_;
  if (!cpu_info_)
  {
    v30 = 7;
    cpu_info_ = 7;
  }
  v31 = (int16x8_t *(*)(int16x8_t *, int16x8_t *, __int16, int))MultiplyRow_16_Any_NEON;
  if ((v28 & 0xF) == 0)
    v31 = (int16x8_t *(*)(int16x8_t *, int16x8_t *, __int16, int))MultiplyRow_16_NEON;
  if ((v30 & 4) != 0)
    v32 = v31;
  else
    v32 = MultiplyRow_16_C;
  v33 = 2 * v26;
  v34 = 2 * v27;
  do
  {
    v32(a1, v19, 64, v28);
    a1 = (int16x8_t *)((char *)a1 + v33);
    v19 = (int16x8_t *)((char *)v19 + v34);
    --v29;
  }
  while (v29);
  result = 0;
  if ((int)v12 >= 1 && v50)
  {
    v35 = (~v50 * a10) & (v50 >> 31);
    if (v50 >= 0)
      v36 = a10;
    else
      v36 = -a10;
    if (v50 >= 0)
      v37 = v50;
    else
      v37 = -v50;
    v38 = a4;
    if ((_DWORD)v12 == a4)
    {
      v39 = a6;
      if ((_DWORD)v12 == a6)
      {
        v40 = v36 == 2 * (_DWORD)v12;
        if (v36 == 2 * (_DWORD)v12)
          v38 = 0;
        else
          v38 = a4;
        if (v36 == 2 * (_DWORD)v12)
          v39 = 0;
        else
          v39 = a6;
        if (v36 == 2 * (_DWORD)v12)
          v36 = 0;
        if (v40)
          v12 = (v37 * a6);
        else
          v12 = v12;
        if (v40)
          v37 = 1;
      }
      v41 = (__int16 *)(a9 + 2 * v35);
      v42 = cpu_info_;
      if (cpu_info_)
        goto LABEL_77;
    }
    else
    {
      v39 = a6;
      v41 = (__int16 *)(a9 + 2 * v35);
      v42 = cpu_info_;
      if (cpu_info_)
        goto LABEL_77;
    }
    v42 = 7;
    cpu_info_ = 7;
LABEL_77:
    v43 = (uint16x8_t *(*)(uint16x8_t *, uint16x8_t *, __int16 *, int, unsigned int))MergeUVRow_16_Any_NEON;
    if ((v12 & 7) == 0)
      v43 = (uint16x8_t *(*)(uint16x8_t *, uint16x8_t *, __int16 *, int, unsigned int))MergeUVRow_16_NEON;
    v44 = 2 * v38;
    if ((v42 & 4) != 0)
      v45 = v43;
    else
      v45 = MergeUVRow_16_C;
    v46 = 2 * v36;
    v47 = 2 * v39;
    do
    {
      v45(a3, a5, v41, 10, v12);
      a3 = (uint16x8_t *)((char *)a3 + v44);
      v41 = (__int16 *)((char *)v41 + v46);
      a5 = (uint16x8_t *)((char *)a5 + v47);
      --v37;
    }
    while (v37);
    return 0;
  }
  return result;
}

uint64_t libyuv::I4xxToI420(libyuv *this, const unsigned __int8 *a2, unsigned __int8 *a3, const unsigned __int8 *a4, unsigned __int8 *a5, const unsigned __int8 *a6, int8x16_t *a7, unsigned __int8 *a8, int8x16_t *a9, unsigned __int8 *a10, int8x16_t *a11, unsigned __int8 *a12, unsigned int a13, unsigned int a14, int a15, int a16, int a17)
{
  int v17;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  uint64_t result;
  uint64_t v33;
  const unsigned __int8 *v34;
  int v35;

  v17 = (int)a4;
  if (SHIDWORD(a12) >= 0)
    v19 = HIDWORD(a12);
  else
    v19 = -HIDWORD(a12);
  if ((a13 & 0x80000000) == 0)
    v20 = a13;
  else
    v20 = -a13;
  if (this)
    v21 = 1;
  else
    v21 = a7 == 0;
  v22 = v21;
  if (SHIDWORD(a12) < 1
    || a9 == 0
    || a5 == 0
    || a3 == 0
    || v22 == 0
    || a11 == 0
    || a13 == 0
    || (int)a14 < 1
    || a15 == 0)
  {
    return 0xFFFFFFFFLL;
  }
  v35 = (int)a6;
  if (!a7
    || (result = ScalePlane((unsigned __int8 *)this, (int)a2, (libyuv *)HIDWORD(a12), a13, a7, (int)a8, v19, (const unsigned __int8 *)v20, 2), !(_DWORD)result))
  {
    v33 = (v19 + 1) >> 1;
    v34 = (const unsigned __int8 *)((v20 + 1) >> 1);
    result = ScalePlane(a3, v17, (libyuv *)a14, a15, a9, (int)a10, v33, v34, 2);
    if (!(_DWORD)result)
      return ScalePlane(a5, v35, (libyuv *)a14, a15, a11, (int)a12, v33, v34, 2);
  }
  return result;
}

uint64_t I400ToI420(char *a1, int a2, char *a3, int a4, char *a5, int a6, char *a7, int a8, int a9, int a10)
{
  uint64_t v10;
  char *v11;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  void *(*v28)(void *, void *, int);
  void *(*v29)(void *, void *, int);
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  char v36;
  void *(*v37)(void *, int, int);
  void *(*v38)(void *, int, int);
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  char v44;
  void *(*v45)(void *, int, int);
  void *(*v46)(void *, int, int);
  uint64_t v47;
  int v51;

  v10 = 0xFFFFFFFFLL;
  if (a5)
  {
    v11 = a7;
    if (a7)
    {
      if (a9 >= 1 && a10 != 0)
      {
        v13 = a5;
        v14 = a3;
        v51 = (a9 + 1) >> 1;
        if (a10 >= 0)
          v15 = a2;
        else
          v15 = -a2;
        if (a10 < 0)
          v16 = &a1[~a10 * a2];
        else
          v16 = a1;
        if (a10 >= 0)
          v17 = a10;
        else
          v17 = -a10;
        v18 = (v17 + 1) >> 1;
        if (a3)
        {
          v19 = v15 == a9 ? 0 : v15;
          v20 = v15 == a9 ? 0 : a4;
          v21 = v15 == a9 ? v17 * a9 : a9;
          v22 = v15 == a9 ? 1 : v17;
          v23 = a4 == a9 ? v19 : v15;
          v24 = a4 == a9 ? v20 : a4;
          v25 = a4 == a9 ? v21 : a9;
          v26 = a4 == a9 ? v22 : v17;
          if (v16 != a3 || v23 != v24)
          {
            v27 = cpu_info_;
            if (!cpu_info_)
            {
              v27 = 7;
              cpu_info_ = 7;
            }
            v28 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
            if ((v25 & 0x1F) == 0)
              v28 = (void *(*)(void *, void *, int))CopyRow_NEON;
            if ((v27 & 4) != 0)
              v29 = v28;
            else
              v29 = CopyRow_C;
            v30 = v23;
            v31 = v24;
            do
            {
              v29(v16, v14, v25);
              v16 += v30;
              v14 += v31;
              --v26;
            }
            while (v26);
          }
        }
        if (v51 == a6)
          v32 = 0;
        else
          v32 = a6;
        if (v51 == a6)
          v33 = v18;
        else
          v33 = 1;
        v34 = (v33 * v51);
        if (v51 == a6)
          v35 = 1;
        else
          v35 = v18;
        v36 = cpu_info_;
        if (!cpu_info_)
        {
          v36 = 7;
          cpu_info_ = 7;
        }
        if ((v34 & 0xF) != 0)
          v37 = (void *(*)(void *, int, int))SetRow_Any_NEON;
        else
          v37 = (void *(*)(void *, int, int))SetRow_NEON;
        if ((v36 & 4) != 0)
          v38 = v37;
        else
          v38 = SetRow_C;
        v39 = v32;
        do
        {
          v38(v13, 128, v34);
          v13 += v39;
          --v35;
        }
        while (v35);
        if (v51 == a8)
          v40 = 0;
        else
          v40 = a8;
        if (v51 == a8)
          v41 = v18;
        else
          v41 = 1;
        v42 = (v41 * v51);
        if (v51 == a8)
          v43 = 1;
        else
          v43 = v18;
        v44 = cpu_info_;
        if (!cpu_info_)
        {
          v44 = 7;
          cpu_info_ = 7;
        }
        if ((v42 & 0xF) != 0)
          v45 = (void *(*)(void *, int, int))SetRow_Any_NEON;
        else
          v45 = (void *(*)(void *, int, int))SetRow_NEON;
        if ((v44 & 4) != 0)
          v46 = v45;
        else
          v46 = SetRow_C;
        v47 = v40;
        do
        {
          v46(v11, 128, v42);
          v11 += v47;
          --v43;
        }
        while (v43);
        return 0;
      }
    }
  }
  return v10;
}

uint64_t NV12ToI420(char *a1, int a2, const char *a3, int a4, char *a5, int a6, char *a7, int a8, char *a9, int a10, int a11, int a12)
{
  char *v12;
  uint64_t result;
  char *v18;
  char *v19;
  int v20;
  const char *v21;
  int v22;
  int v23;
  char *v24;
  int v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  int v29;
  int v30;
  BOOL v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  int v44;
  char v45;
  void *(*v46)(void *, void *, int);
  void *(*v47)(void *, void *, int);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char v55;
  const char *(*v56)(const char *, char *, char *, int);
  uint64_t v57;
  const char *(*v58)(const char *, char *, char *, int);
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  void *(*v65)(void *, void *, int);

  v12 = a9;
  if (a11 < 1 || a3 == 0 || a7 == 0 || a9 == 0 || a12 == 0)
    return 0xFFFFFFFFLL;
  v18 = a7;
  v19 = a5;
  v20 = (a11 + 1) >> 1;
  if (a12 < 0)
    v21 = &a3[(((1 - a12) >> 1) - 1) * a4];
  else
    v21 = a3;
  if (a12 >= 0)
    v22 = a4;
  else
    v22 = -a4;
  if (a12 >= 0)
    v23 = a2;
  else
    v23 = -a2;
  if (a12 < 0)
    v24 = &a1[~a12 * a2];
  else
    v24 = a1;
  if (a12 >= 0)
    v25 = a12;
  else
    v25 = -a12;
  if (a12 < 0)
    v26 = (1 - a12) >> 1;
  else
    v26 = (a12 + 1) >> 1;
  v27 = a6 == a11 && v23 == a11;
  v28 = v25 * a11;
  if (v27)
    v29 = 0;
  else
    v29 = v23;
  if (v27)
    v30 = 0;
  else
    v30 = a6;
  if (v27)
    v25 = 1;
  else
    v28 = a11;
  v32 = v20 == a10 && v20 == a8 && v22 == ((a11 + 1) & 0xFFFFFFFE);
  v33 = v26 * a8;
  if (v32)
    v22 = 0;
  v63 = v22;
  if (v32)
    v34 = 0;
  else
    v34 = a8;
  if (v32)
    v35 = 0;
  else
    v35 = a10;
  v61 = v34;
  v62 = v35;
  if (!v32)
    v33 = (a11 + 1) >> 1;
  v64 = v33;
  if (v32)
    v36 = 1;
  else
    v36 = v26;
  if (a5 && v28 >= 1)
  {
    v37 = v30 == v28 ? 0 : v29;
    v38 = v30 == v28 ? 0 : v30;
    v39 = v30 == v28 ? v25 * v30 : v28;
    v40 = v30 == v28 ? 1 : v25;
    v41 = v29 == v28;
    if (v29 == v28)
    {
      v29 = v37;
      v42 = v38;
    }
    else
    {
      v42 = v30;
    }
    v43 = v41 ? v39 : v28;
    v44 = v41 ? v40 : v25;
    if (v24 != a5 || v29 != v42)
    {
      v45 = cpu_info_;
      if (!cpu_info_)
      {
        v45 = 7;
        cpu_info_ = 7;
      }
      v46 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
      if ((v43 & 0x1F) == 0)
        v46 = (void *(*)(void *, void *, int))CopyRow_NEON;
      if ((v45 & 4) != 0)
        v47 = v46;
      else
        v47 = CopyRow_C;
      v65 = v47;
      v48 = v29;
      v49 = v42;
      do
      {
        v65(v24, v19, v43);
        v24 += v48;
        v19 += v49;
        --v44;
      }
      while (v44);
    }
  }
  result = 0;
  v50 = v64;
  if (v64 >= 1 && v36)
  {
    if (v36 < 0)
    {
      v54 = ~v36;
      v36 = -v36;
      v18 += v61 * (uint64_t)v54;
      v12 = &a9[v62 * (uint64_t)v54];
      v53 = -v61;
      v52 = -v62;
      v51 = v63;
      if (v63 != 2 * v64)
      {
LABEL_109:
        v55 = cpu_info_;
        if (!cpu_info_)
        {
          v55 = 7;
          cpu_info_ = 7;
        }
        v56 = (const char *(*)(const char *, char *, char *, int))SplitUVRow_Any_NEON;
        if ((v50 & 0xF) == 0)
          v56 = (const char *(*)(const char *, char *, char *, int))SplitUVRow_NEON;
        v57 = v53;
        if ((v55 & 4) != 0)
          v58 = v56;
        else
          v58 = SplitUVRow_C;
        v59 = v52;
        v60 = v51;
        do
        {
          v58(v21, v18, v12, v50);
          v18 += v57;
          v12 += v59;
          v21 += v60;
          --v36;
        }
        while (v36);
        return 0;
      }
    }
    else
    {
      v52 = v62;
      v51 = v63;
      v53 = v61;
      if (v63 != 2 * v64)
        goto LABEL_109;
    }
    if (v53 == v64 && v52 == v64)
    {
      v51 = 0;
      v53 = 0;
      v52 = 0;
      v50 = (v36 * v64);
      v36 = 1;
    }
    goto LABEL_109;
  }
  return result;
}

uint64_t ARGBToI420(unsigned __int8 *a1, unsigned int a2, int8x16_t *a3, int a4, _BYTE *a5, int a6, _BYTE *a7, int a8, unsigned int a9, int a10)
{
  _BYTE *v16;
  _BYTE *v17;
  int8x16_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t (*v23)(unint64_t, int8x16_t *, unsigned int);
  unint64_t (*v24)(unint64_t, int8x16_t *, unsigned int);
  char v25;
  void *v26;
  unsigned __int8 *(*v27)(unsigned __int8 *, int, _BYTE *, _BYTE *, int);
  signed int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  signed int v33;
  uint64_t v34;

  if ((int)a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a7 == 0 || a10 == 0)
    return 0xFFFFFFFFLL;
  v16 = a7;
  v17 = a5;
  v18 = a3;
  if (a10 >= 0)
    v19 = a2;
  else
    v19 = -a2;
  if (a10 < 0)
    v20 = &a1[~a10 * a2];
  else
    v20 = a1;
  if (a10 >= 0)
    v21 = a10;
  else
    v21 = -a10;
  v22 = cpu_info_;
  if (!cpu_info_)
  {
    v22 = 7;
    cpu_info_ = 7;
  }
  v23 = (unint64_t (*)(unint64_t, int8x16_t *, unsigned int))ARGBToYRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v23 = (unint64_t (*)(unint64_t, int8x16_t *, unsigned int))ARGBToYRow_NEON;
  if ((v22 & 4) != 0)
    v24 = v23;
  else
    v24 = ARGBToYRow_C;
  v25 = cpu_info_;
  if (!cpu_info_)
  {
    v25 = 7;
    cpu_info_ = 7;
  }
  v26 = ARGBToUVRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v26 = ARGBToUVRow_NEON;
  if ((v25 & 4) != 0)
    v27 = (unsigned __int8 *(*)(unsigned __int8 *, int, _BYTE *, _BYTE *, int))v26;
  else
    v27 = ARGBToUVRow_C;
  if (v21 < 2)
    goto LABEL_46;
  v28 = 0;
  v34 = a4;
  v30 = v21;
  v33 = v21 - 1;
  v32 = 2 * a4;
  v31 = a6;
  v29 = a8;
  do
  {
    v27(v20, v19, v17, v16, a9);
    v24((unint64_t)v20, v18, a9);
    v24((unint64_t)&v20[(int)v19], (int8x16_t *)((char *)v18 + v34), a9);
    v20 += 2 * (int)v19;
    v18 = (int8x16_t *)((char *)v18 + v32);
    v17 += v31;
    v16 += v29;
    v28 += 2;
  }
  while (v28 < v33);
  if ((v30 & 1) != 0)
  {
LABEL_46:
    v27(v20, 0, v17, v16, a9);
    v24((unint64_t)v20, v18, a9);
  }
  return 0;
}

uint64_t BGRAToI420(unsigned __int8 *a1, unsigned int a2, int8x16_t *a3, int a4, _BYTE *a5, int a6, _BYTE *a7, int a8, unsigned int a9, int a10)
{
  _BYTE *v16;
  _BYTE *v17;
  int8x16_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  uint64_t (*v23)(uint64_t, int8x16_t *, unsigned int);
  uint64_t (*v24)(uint64_t, int8x16_t *, unsigned int);
  char v25;
  void *v26;
  unsigned __int8 *(*v27)(unsigned __int8 *, int, _BYTE *, _BYTE *, int);
  signed int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  signed int v33;
  uint64_t v34;

  if ((int)a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a7 == 0 || a10 == 0)
    return 0xFFFFFFFFLL;
  v16 = a7;
  v17 = a5;
  v18 = a3;
  if (a10 >= 0)
    v19 = a2;
  else
    v19 = -a2;
  if (a10 < 0)
    v20 = &a1[~a10 * a2];
  else
    v20 = a1;
  if (a10 >= 0)
    v21 = a10;
  else
    v21 = -a10;
  v22 = cpu_info_;
  if (!cpu_info_)
  {
    v22 = 7;
    cpu_info_ = 7;
  }
  v23 = (uint64_t (*)(uint64_t, int8x16_t *, unsigned int))BGRAToYRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v23 = (uint64_t (*)(uint64_t, int8x16_t *, unsigned int))BGRAToYRow_NEON;
  if ((v22 & 4) != 0)
    v24 = v23;
  else
    v24 = BGRAToYRow_C;
  v25 = cpu_info_;
  if (!cpu_info_)
  {
    v25 = 7;
    cpu_info_ = 7;
  }
  v26 = BGRAToUVRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v26 = BGRAToUVRow_NEON;
  if ((v25 & 4) != 0)
    v27 = (unsigned __int8 *(*)(unsigned __int8 *, int, _BYTE *, _BYTE *, int))v26;
  else
    v27 = BGRAToUVRow_C;
  if (v21 < 2)
    goto LABEL_46;
  v28 = 0;
  v34 = a4;
  v30 = v21;
  v33 = v21 - 1;
  v32 = 2 * a4;
  v31 = a6;
  v29 = a8;
  do
  {
    v27(v20, v19, v17, v16, a9);
    v24((uint64_t)v20, v18, a9);
    v24((uint64_t)&v20[(int)v19], (int8x16_t *)((char *)v18 + v34), a9);
    v20 += 2 * (int)v19;
    v18 = (int8x16_t *)((char *)v18 + v32);
    v17 += v31;
    v16 += v29;
    v28 += 2;
  }
  while (v28 < v33);
  if ((v30 & 1) != 0)
  {
LABEL_46:
    v27(v20, 0, v17, v16, a9);
    v24((uint64_t)v20, v18, a9);
  }
  return 0;
}

uint64_t ABGRToI420(unsigned __int8 *a1, unsigned int a2, int8x16_t *a3, int a4, _BYTE *a5, int a6, _BYTE *a7, int a8, unsigned int a9, int a10)
{
  _BYTE *v16;
  _BYTE *v17;
  int8x16_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  const char *(*v23)(const char *, int8x16_t *, unsigned int);
  const char *(*v24)(const char *, int8x16_t *, unsigned int);
  char v25;
  void *v26;
  unsigned __int8 *(*v27)(unsigned __int8 *, int, _BYTE *, _BYTE *, int);
  signed int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  signed int v33;
  uint64_t v34;

  if ((int)a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a7 == 0 || a10 == 0)
    return 0xFFFFFFFFLL;
  v16 = a7;
  v17 = a5;
  v18 = a3;
  if (a10 >= 0)
    v19 = a2;
  else
    v19 = -a2;
  if (a10 < 0)
    v20 = &a1[~a10 * a2];
  else
    v20 = a1;
  if (a10 >= 0)
    v21 = a10;
  else
    v21 = -a10;
  v22 = cpu_info_;
  if (!cpu_info_)
  {
    v22 = 7;
    cpu_info_ = 7;
  }
  v23 = (const char *(*)(const char *, int8x16_t *, unsigned int))ABGRToYRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v23 = (const char *(*)(const char *, int8x16_t *, unsigned int))ABGRToYRow_NEON;
  if ((v22 & 4) != 0)
    v24 = v23;
  else
    v24 = ABGRToYRow_C;
  v25 = cpu_info_;
  if (!cpu_info_)
  {
    v25 = 7;
    cpu_info_ = 7;
  }
  v26 = ABGRToUVRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v26 = ABGRToUVRow_NEON;
  if ((v25 & 4) != 0)
    v27 = (unsigned __int8 *(*)(unsigned __int8 *, int, _BYTE *, _BYTE *, int))v26;
  else
    v27 = ABGRToUVRow_C;
  if (v21 < 2)
    goto LABEL_46;
  v28 = 0;
  v34 = a4;
  v30 = v21;
  v33 = v21 - 1;
  v32 = 2 * a4;
  v31 = a6;
  v29 = a8;
  do
  {
    v27(v20, v19, v17, v16, a9);
    v24((const char *)v20, v18, a9);
    v24((const char *)&v20[(int)v19], (int8x16_t *)((char *)v18 + v34), a9);
    v20 += 2 * (int)v19;
    v18 = (int8x16_t *)((char *)v18 + v32);
    v17 += v31;
    v16 += v29;
    v28 += 2;
  }
  while (v28 < v33);
  if ((v30 & 1) != 0)
  {
LABEL_46:
    v27(v20, 0, v17, v16, a9);
    v24((const char *)v20, v18, a9);
  }
  return 0;
}

uint64_t RGBAToI420(unsigned __int8 *a1, unsigned int a2, int8x16_t *a3, int a4, _BYTE *a5, int a6, _BYTE *a7, int a8, unsigned int a9, int a10)
{
  _BYTE *v16;
  _BYTE *v17;
  int8x16_t *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  uint64_t (*v23)(uint64_t, int8x16_t *, unsigned int);
  uint64_t (*v24)(uint64_t, int8x16_t *, unsigned int);
  char v25;
  void *v26;
  unsigned __int8 *(*v27)(unsigned __int8 *, int, _BYTE *, _BYTE *, int);
  signed int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  signed int v33;
  uint64_t v34;

  if ((int)a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a7 == 0 || a10 == 0)
    return 0xFFFFFFFFLL;
  v16 = a7;
  v17 = a5;
  v18 = a3;
  if (a10 >= 0)
    v19 = a2;
  else
    v19 = -a2;
  if (a10 < 0)
    v20 = &a1[~a10 * a2];
  else
    v20 = a1;
  if (a10 >= 0)
    v21 = a10;
  else
    v21 = -a10;
  v22 = cpu_info_;
  if (!cpu_info_)
  {
    v22 = 7;
    cpu_info_ = 7;
  }
  v23 = (uint64_t (*)(uint64_t, int8x16_t *, unsigned int))RGBAToYRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v23 = (uint64_t (*)(uint64_t, int8x16_t *, unsigned int))RGBAToYRow_NEON;
  if ((v22 & 4) != 0)
    v24 = v23;
  else
    v24 = RGBAToYRow_C;
  v25 = cpu_info_;
  if (!cpu_info_)
  {
    v25 = 7;
    cpu_info_ = 7;
  }
  v26 = RGBAToUVRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v26 = RGBAToUVRow_NEON;
  if ((v25 & 4) != 0)
    v27 = (unsigned __int8 *(*)(unsigned __int8 *, int, _BYTE *, _BYTE *, int))v26;
  else
    v27 = RGBAToUVRow_C;
  if (v21 < 2)
    goto LABEL_46;
  v28 = 0;
  v34 = a4;
  v30 = v21;
  v33 = v21 - 1;
  v32 = 2 * a4;
  v31 = a6;
  v29 = a8;
  do
  {
    v27(v20, v19, v17, v16, a9);
    v24((uint64_t)v20, v18, a9);
    v24((uint64_t)&v20[(int)v19], (int8x16_t *)((char *)v18 + v34), a9);
    v20 += 2 * (int)v19;
    v18 = (int8x16_t *)((char *)v18 + v32);
    v17 += v31;
    v16 += v29;
    v28 += 2;
  }
  while (v28 < v33);
  if ((v30 & 1) != 0)
  {
LABEL_46:
    v27(v20, 0, v17, v16, a9);
    v24((uint64_t)v20, v18, a9);
  }
  return 0;
}

uint64_t RGB24ToI420(unsigned __int8 *a1, unsigned int a2, unint64_t a3, int a4, _BYTE *a5, int a6, _BYTE *a7, int a8, unsigned int a9, int a10)
{
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  void *v23;
  const char *(*v24)(const char *, unint64_t, unsigned int);
  unsigned __int8 *(*v25)(unsigned __int8 *, int, _BYTE *, _BYTE *, int);
  const char *(*v26)(const char *, unint64_t, unsigned int);
  signed int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  signed int v32;
  uint64_t v33;

  if ((int)a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a7 == 0 || a10 == 0)
    return 0xFFFFFFFFLL;
  v16 = a7;
  v17 = a5;
  v18 = a3;
  if (a10 >= 0)
    v19 = a2;
  else
    v19 = -a2;
  if (a10 < 0)
    v20 = &a1[~a10 * a2];
  else
    v20 = a1;
  if (a10 >= 0)
    v21 = a10;
  else
    v21 = -a10;
  v22 = cpu_info_;
  if (!cpu_info_)
  {
    v22 = 7;
    cpu_info_ = 7;
  }
  v23 = RGB24ToUVRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v23 = RGB24ToUVRow_NEON;
  v24 = (const char *(*)(const char *, unint64_t, unsigned int))RGB24ToYRow_NEON;
  if ((a9 & 0xF) != 0)
    v24 = (const char *(*)(const char *, unint64_t, unsigned int))RGB24ToYRow_Any_NEON;
  if ((v22 & 4) != 0)
    v25 = (unsigned __int8 *(*)(unsigned __int8 *, int, _BYTE *, _BYTE *, int))v23;
  else
    v25 = RGB24ToUVRow_C;
  if ((v22 & 4) != 0)
    v26 = v24;
  else
    v26 = RGB24ToYRow_C;
  if (v21 < 2)
    goto LABEL_44;
  v27 = 0;
  v33 = a4;
  v29 = v21;
  v32 = v21 - 1;
  v31 = 2 * a4;
  v30 = a6;
  v28 = a8;
  do
  {
    v25(v20, v19, v17, v16, a9);
    v26((const char *)v20, v18, a9);
    v26((const char *)&v20[(int)v19], v18 + v33, a9);
    v20 += 2 * (int)v19;
    v18 += v31;
    v17 += v30;
    v16 += v28;
    v27 += 2;
  }
  while (v27 < v32);
  if ((v29 & 1) != 0)
  {
LABEL_44:
    v25(v20, 0, v17, v16, a9);
    v26((const char *)v20, v18, a9);
  }
  return 0;
}

uint64_t RAWToI420(unsigned __int8 *a1, unsigned int a2, unint64_t a3, int a4, _BYTE *a5, int a6, _BYTE *a7, int a8, unsigned int a9, int a10)
{
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  void *v23;
  const char *(*v24)(const char *, unint64_t, unsigned int);
  unsigned __int8 *(*v25)(unsigned __int8 *, int, _BYTE *, _BYTE *, int);
  const char *(*v26)(const char *, unint64_t, unsigned int);
  signed int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  signed int v32;
  uint64_t v33;

  if ((int)a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a7 == 0 || a10 == 0)
    return 0xFFFFFFFFLL;
  v16 = a7;
  v17 = a5;
  v18 = a3;
  if (a10 >= 0)
    v19 = a2;
  else
    v19 = -a2;
  if (a10 < 0)
    v20 = &a1[~a10 * a2];
  else
    v20 = a1;
  if (a10 >= 0)
    v21 = a10;
  else
    v21 = -a10;
  v22 = cpu_info_;
  if (!cpu_info_)
  {
    v22 = 7;
    cpu_info_ = 7;
  }
  v23 = RAWToUVRow_Any_NEON;
  if ((a9 & 0xF) == 0)
    v23 = RAWToUVRow_NEON;
  v24 = (const char *(*)(const char *, unint64_t, unsigned int))RAWToYRow_NEON;
  if ((a9 & 0xF) != 0)
    v24 = (const char *(*)(const char *, unint64_t, unsigned int))RAWToYRow_Any_NEON;
  if ((v22 & 4) != 0)
    v25 = (unsigned __int8 *(*)(unsigned __int8 *, int, _BYTE *, _BYTE *, int))v23;
  else
    v25 = RAWToUVRow_C;
  if ((v22 & 4) != 0)
    v26 = v24;
  else
    v26 = RAWToYRow_C;
  if (v21 < 2)
    goto LABEL_44;
  v27 = 0;
  v33 = a4;
  v29 = v21;
  v32 = v21 - 1;
  v31 = 2 * a4;
  v30 = a6;
  v28 = a8;
  do
  {
    v25(v20, v19, v17, v16, a9);
    v26((const char *)v20, v18, a9);
    v26((const char *)&v20[(int)v19], v18 + v33, a9);
    v20 += 2 * (int)v19;
    v18 += v31;
    v17 += v30;
    v16 += v28;
    v27 += 2;
  }
  while (v27 < v32);
  if ((v29 & 1) != 0)
  {
LABEL_44:
    v25(v20, 0, v17, v16, a9);
    v26((const char *)v20, v18, a9);
  }
  return 0;
}

uint64_t RGB565ToI420(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned int a9, int a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void (*v22)(uint64_t, uint64_t, _QWORD);
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  signed int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  signed int v30;
  uint64_t v31;

  if ((int)a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a7 == 0 || a10 == 0)
    return 0xFFFFFFFFLL;
  v16 = a7;
  v17 = a5;
  v18 = a3;
  if (a10 >= 0)
    v19 = a2;
  else
    v19 = -a2;
  if (a10 < 0)
    v20 = a1 + (int)(~a10 * a2);
  else
    v20 = a1;
  if (a10 >= 0)
    v21 = a10;
  else
    v21 = -a10;
  if (!cpu_info_)
  {
    cpu_info_ = 7;
LABEL_33:
    v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))RGB565ToUVRow_Any_NEON;
    if ((a9 & 0xF) == 0)
      v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))RGB565ToUVRow_NEON;
    if ((a9 & 7) != 0)
      v23 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))RGB565ToUVRow_Any_NEON;
    else
      v23 = v24;
    if ((a9 & 7) != 0)
      v22 = (void (*)(uint64_t, uint64_t, _QWORD))RGB565ToYRow_Any_NEON;
    else
      v22 = (void (*)(uint64_t, uint64_t, _QWORD))RGB565ToYRow_NEON;
    if (v21 < 2)
      goto LABEL_45;
LABEL_42:
    v25 = 0;
    v31 = a4;
    v27 = v21;
    v30 = v21 - 1;
    v29 = 2 * a4;
    v28 = a6;
    v26 = a8;
    do
    {
      v23(v20, v19, v17, v16, a9);
      v22(v20, v18, a9);
      v22(v20 + (int)v19, v18 + v31, a9);
      v20 += 2 * (int)v19;
      v18 += v29;
      v17 += v28;
      v16 += v26;
      v25 += 2;
    }
    while (v25 < v30);
    if ((v27 & 1) == 0)
      return 0;
    goto LABEL_45;
  }
  if ((cpu_info_ & 4) != 0)
    goto LABEL_33;
  v22 = (void (*)(uint64_t, uint64_t, _QWORD))RGB565ToYRow_C;
  v23 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))RGB565ToUVRow_C;
  if (v21 >= 2)
    goto LABEL_42;
LABEL_45:
  v23(v20, 0, v17, v16, a9);
  v22(v20, v18, a9);
  return 0;
}

uint64_t ARGB1555ToI420(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned int a9, int a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void (*v22)(uint64_t, uint64_t, _QWORD);
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  signed int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  signed int v30;
  uint64_t v31;

  if ((int)a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a7 == 0 || a10 == 0)
    return 0xFFFFFFFFLL;
  v16 = a7;
  v17 = a5;
  v18 = a3;
  if (a10 >= 0)
    v19 = a2;
  else
    v19 = -a2;
  if (a10 < 0)
    v20 = a1 + (int)(~a10 * a2);
  else
    v20 = a1;
  if (a10 >= 0)
    v21 = a10;
  else
    v21 = -a10;
  if (!cpu_info_)
  {
    cpu_info_ = 7;
LABEL_33:
    v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))ARGB1555ToUVRow_Any_NEON;
    if ((a9 & 0xF) == 0)
      v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))ARGB1555ToUVRow_NEON;
    if ((a9 & 7) != 0)
      v23 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))ARGB1555ToUVRow_Any_NEON;
    else
      v23 = v24;
    if ((a9 & 7) != 0)
      v22 = (void (*)(uint64_t, uint64_t, _QWORD))ARGB1555ToYRow_Any_NEON;
    else
      v22 = (void (*)(uint64_t, uint64_t, _QWORD))ARGB1555ToYRow_NEON;
    if (v21 < 2)
      goto LABEL_45;
LABEL_42:
    v25 = 0;
    v31 = a4;
    v27 = v21;
    v30 = v21 - 1;
    v29 = 2 * a4;
    v28 = a6;
    v26 = a8;
    do
    {
      v23(v20, v19, v17, v16, a9);
      v22(v20, v18, a9);
      v22(v20 + (int)v19, v18 + v31, a9);
      v20 += 2 * (int)v19;
      v18 += v29;
      v17 += v28;
      v16 += v26;
      v25 += 2;
    }
    while (v25 < v30);
    if ((v27 & 1) == 0)
      return 0;
    goto LABEL_45;
  }
  if ((cpu_info_ & 4) != 0)
    goto LABEL_33;
  v22 = (void (*)(uint64_t, uint64_t, _QWORD))ARGB1555ToYRow_C;
  v23 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))ARGB1555ToUVRow_C;
  if (v21 >= 2)
    goto LABEL_42;
LABEL_45:
  v23(v20, 0, v17, v16, a9);
  v22(v20, v18, a9);
  return 0;
}

uint64_t ARGB4444ToI420(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned int a9, int a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  void (*v22)(uint64_t, uint64_t, _QWORD);
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  signed int v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  signed int v30;
  uint64_t v31;

  if ((int)a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a7 == 0 || a10 == 0)
    return 0xFFFFFFFFLL;
  v16 = a7;
  v17 = a5;
  v18 = a3;
  if (a10 >= 0)
    v19 = a2;
  else
    v19 = -a2;
  if (a10 < 0)
    v20 = a1 + (int)(~a10 * a2);
  else
    v20 = a1;
  if (a10 >= 0)
    v21 = a10;
  else
    v21 = -a10;
  if (!cpu_info_)
  {
    cpu_info_ = 7;
LABEL_33:
    v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))ARGB4444ToUVRow_Any_NEON;
    if ((a9 & 0xF) == 0)
      v24 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))ARGB4444ToUVRow_NEON;
    if ((a9 & 7) != 0)
      v23 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))ARGB4444ToUVRow_Any_NEON;
    else
      v23 = v24;
    if ((a9 & 7) != 0)
      v22 = (void (*)(uint64_t, uint64_t, _QWORD))ARGB4444ToYRow_Any_NEON;
    else
      v22 = (void (*)(uint64_t, uint64_t, _QWORD))ARGB4444ToYRow_NEON;
    if (v21 < 2)
      goto LABEL_45;
LABEL_42:
    v25 = 0;
    v31 = a4;
    v27 = v21;
    v30 = v21 - 1;
    v29 = 2 * a4;
    v28 = a6;
    v26 = a8;
    do
    {
      v23(v20, v19, v17, v16, a9);
      v22(v20, v18, a9);
      v22(v20 + (int)v19, v18 + v31, a9);
      v20 += 2 * (int)v19;
      v18 += v29;
      v17 += v28;
      v16 += v26;
      v25 += 2;
    }
    while (v25 < v30);
    if ((v27 & 1) == 0)
      return 0;
    goto LABEL_45;
  }
  if ((cpu_info_ & 4) != 0)
    goto LABEL_33;
  v22 = (void (*)(uint64_t, uint64_t, _QWORD))ARGB4444ToYRow_C;
  v23 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))ARGB4444ToUVRow_C;
  if (v21 >= 2)
    goto LABEL_42;
LABEL_45:
  v23(v20, 0, v17, v16, a9);
  v22(v20, v18, a9);
  return 0;
}

uint64_t I420ToI010(int8x16_t *a1, int a2, int8x16_t *a3, int a4, int8x16_t *a5, int a6, unint64_t a7, int a8, double a9, double a10, double a11, double a12, double a13, int8x16_t a14, uint64_t a15, int a16, uint64_t a17, int a18, int a19, int a20)
{
  BOOL v20;
  int v21;
  int v28;
  int8x16_t *v29;
  int8x16_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int32x4_t v44;
  unint64_t v45;
  int8x16_t *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  int8x16_t *v51;
  int8x16_t v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int32x4_t v71;
  int8x16_t *v72;
  uint64_t v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int8x16_t *v78;
  int8x16_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int32x4_t v93;
  int8x16_t *v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int8x16_t *v100;
  int8x16_t v101;
  uint64_t v102;

  if (a1)
    v20 = 1;
  else
    v20 = a7 == 0;
  v21 = v20;
  if (a19 < 1 || a15 == 0 || a5 == 0 || a3 == 0 || v21 == 0 || a17 == 0 || a20 == 0)
    return 0xFFFFFFFFLL;
  v28 = ((1 - a20) >> 1) - 1;
  v29 = (int8x16_t *)((char *)a3 + v28 * (uint64_t)a4);
  v30 = (int8x16_t *)((char *)a5 + v28 * (uint64_t)a6);
  if (a20 >= 0)
    v31 = a6;
  else
    v31 = -a6;
  if (a20 < 0)
  {
    LODWORD(v32) = -a4;
  }
  else
  {
    v30 = a5;
    LODWORD(v32) = a4;
  }
  if (a20 >= 0)
  {
    LODWORD(v33) = a2;
  }
  else
  {
    a3 = v29;
    LODWORD(v33) = -a2;
  }
  if (a20 >= 0)
  {
    v34 = a20;
  }
  else
  {
    a1 = (int8x16_t *)((char *)a1 + ~a20 * a2);
    v34 = -a20;
  }
  if (a20 < 0)
    v35 = (1 - a20) >> 1;
  else
    v35 = (a20 + 1) >> 1;
  if (a8 != a19 || (_DWORD)v33 != a19)
  {
    v33 = (int)v33;
    v37 = a8;
    v36 = a19;
    goto LABEL_47;
  }
  v36 = v34 * a19;
  if (v34 * a19 >= 1)
  {
    v37 = 0;
    v33 = 0;
    v34 = 1;
LABEL_47:
    v39 = 0;
    v40 = v36;
    v41 = 2 * v36;
    v42 = 2 * v37;
    v43 = v40 & 0xFFFFFFF8;
    v44 = vdupq_n_s32(0x40400u);
    v45 = a7;
    v46 = a1;
    do
    {
      if (v40 >= 8)
      {
        if (v45 >= (unint64_t)a1->u64 + v40 + v33 * v39 || (unint64_t)v46 >= a7 + v41 + v42 * v39)
        {
          if (v40 < 0x10)
          {
            v49 = 0;
LABEL_62:
            v54 = 2 * v49;
            do
            {
              a14.i64[0] = *(uint64_t *)((char *)v46->i64 + v49);
              a14 = (int8x16_t)vuzp2q_s16((int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(a14, (int8x16_t)xmmword_208F04F50), v44), (int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(a14, (int8x16_t)xmmword_208F04F40), v44));
              *(int8x16_t *)(v45 + v54) = a14;
              v49 += 8;
              v54 += 16;
            }
            while (v43 != v49);
            v47 = v40 & 0xFFFFFFF8;
            if (v43 == v40)
              goto LABEL_48;
            goto LABEL_65;
          }
          v50 = 0;
          v51 = v46;
          do
          {
            v52 = *v51++;
            a14 = (int8x16_t)vuzp2q_s16((int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_208F04F30), v44), (int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_208F04F20), v44));
            v53 = v45 + v50;
            *(int16x8_t *)v53 = vuzp2q_s16((int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_208F04F50), v44), (int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_208F04F40), v44));
            *(int8x16_t *)(v53 + 16) = a14;
            v50 += 32;
          }
          while ((v41 & 0x1FFFFFFE0) != v50);
          if ((v40 & 0xFFFFFFF0) == v40)
            goto LABEL_48;
          v49 = v40 & 0xFFFFFFF0;
          v47 = v49;
          if ((v40 & 8) != 0)
            goto LABEL_62;
        }
        else
        {
          v47 = 0;
        }
      }
      else
      {
        v47 = 0;
      }
      do
      {
LABEL_65:
        *(_WORD *)(v45 + 2 * v47) = (263168 * v46->u8[v47]) >> 16;
        ++v47;
      }
      while (v40 != v47);
LABEL_48:
      v46 = (int8x16_t *)((char *)v46 + v33);
      v45 += v42;
      ++v39;
    }
    while ((_DWORD)v39 != v34);
  }
  if (v35)
  {
    v55 = (a19 + 1) >> 1;
    v56 = ~v35;
    if (v35 >= 0)
      v57 = a16;
    else
      v57 = -a16;
    if (v35 >= 0)
      v58 = v35;
    else
      v58 = -v35;
    if ((_DWORD)v32 != v55 || v57 != v55)
    {
      v32 = (int)v32;
      v60 = v57;
      v59 = (a19 + 1) >> 1;
      v61 = v58;
      goto LABEL_79;
    }
    v59 = v58 * v55;
    if ((int)(v58 * v55) >= 1)
    {
      v60 = 0;
      v32 = 0;
      v61 = 1;
LABEL_79:
      v62 = 0;
      v63 = (v56 * a16) & (v35 >> 31);
      v64 = a15 + 2 * v63;
      v65 = v59;
      v66 = 2 * (v63 + v59);
      v67 = 2 * v60;
      v68 = v59 & 0xFFFFFFF0;
      v69 = v59 & 0xFFFFFFF8;
      v70 = (2 * v59) & 0x1FFFFFFE0;
      v71 = vdupq_n_s32(0x40400u);
      v72 = a3;
      do
      {
        if (v65 >= 8)
        {
          if (v64 >= (unint64_t)a3->u64 + v65 + v32 * v62 || (unint64_t)v72 >= a15 + v66 + v67 * v62)
          {
            if (v65 < 0x10)
            {
              v75 = 0;
LABEL_90:
              v76 = 2 * v75;
              do
              {
                a14.i64[0] = *(uint64_t *)((char *)v72->i64 + v75);
                a14 = (int8x16_t)vuzp2q_s16((int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(a14, (int8x16_t)xmmword_208F04F50), v71), (int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(a14, (int8x16_t)xmmword_208F04F40), v71));
                *(int8x16_t *)(v64 + v76) = a14;
                v75 += 8;
                v76 += 16;
              }
              while (v69 != v75);
              v73 = v69;
              if (v69 == v65)
                goto LABEL_80;
              goto LABEL_93;
            }
            v77 = 0;
            v78 = v72;
            do
            {
              v79 = *v78++;
              a14 = (int8x16_t)vuzp2q_s16((int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_208F04F30), v71), (int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_208F04F20), v71));
              v80 = v64 + v77;
              *(int16x8_t *)v80 = vuzp2q_s16((int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_208F04F50), v71), (int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v79, (int8x16_t)xmmword_208F04F40), v71));
              *(int8x16_t *)(v80 + 16) = a14;
              v77 += 32;
            }
            while (v70 != v77);
            if (v68 == v65)
              goto LABEL_80;
            v75 = v68;
            v73 = v68;
            if ((v65 & 8) != 0)
              goto LABEL_90;
          }
          else
          {
            v73 = 0;
          }
        }
        else
        {
          v73 = 0;
        }
        do
        {
LABEL_93:
          *(_WORD *)(v64 + 2 * v73) = (263168 * v72->u8[v73]) >> 16;
          ++v73;
        }
        while (v65 != v73);
LABEL_80:
        v72 = (int8x16_t *)((char *)v72 + v32);
        v64 += v67;
        ++v62;
      }
      while ((_DWORD)v62 != v61);
    }
    if (v35 >= 0)
      v81 = a18;
    else
      v81 = -a18;
    if (v31 != v55 || v81 != v55)
    {
      v83 = v31;
      v82 = v81;
      goto LABEL_108;
    }
    v55 *= v58;
    if ((int)v55 >= 1)
    {
      v82 = 0;
      v83 = 0;
      v58 = 1;
LABEL_108:
      v84 = 0;
      v85 = (v56 * a18) & (v35 >> 31);
      v86 = a17 + 2 * v85;
      v87 = v55;
      v88 = 2 * (v85 + v55);
      v89 = 2 * v82;
      v90 = v55 & 0xFFFFFFF0;
      v91 = v55 & 0xFFFFFFF8;
      v92 = (2 * v55) & 0x1FFFFFFE0;
      v93 = vdupq_n_s32(0x40400u);
      v94 = v30;
      do
      {
        if (v87 >= 8)
        {
          if (v86 >= (unint64_t)v30->u64 + v87 + v83 * v84 || (unint64_t)v94 >= a17 + v88 + v89 * v84)
          {
            if (v87 < 0x10)
            {
              v97 = 0;
LABEL_119:
              v98 = 2 * v97;
              do
              {
                a14.i64[0] = *(uint64_t *)((char *)v94->i64 + v97);
                a14 = (int8x16_t)vuzp2q_s16((int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(a14, (int8x16_t)xmmword_208F04F50), v93), (int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(a14, (int8x16_t)xmmword_208F04F40), v93));
                *(int8x16_t *)(v86 + v98) = a14;
                v97 += 8;
                v98 += 16;
              }
              while (v91 != v97);
              v95 = v91;
              if (v91 == v87)
                goto LABEL_109;
              goto LABEL_122;
            }
            v99 = 0;
            v100 = v94;
            do
            {
              v101 = *v100++;
              a14 = (int8x16_t)vuzp2q_s16((int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v101, (int8x16_t)xmmword_208F04F30), v93), (int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v101, (int8x16_t)xmmword_208F04F20), v93));
              v102 = v86 + v99;
              *(int16x8_t *)v102 = vuzp2q_s16((int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v101, (int8x16_t)xmmword_208F04F50), v93), (int16x8_t)vmulq_s32((int32x4_t)vqtbl1q_s8(v101, (int8x16_t)xmmword_208F04F40), v93));
              *(int8x16_t *)(v102 + 16) = a14;
              v99 += 32;
            }
            while (v92 != v99);
            if (v90 == v87)
              goto LABEL_109;
            v97 = v90;
            v95 = v90;
            if ((v87 & 8) != 0)
              goto LABEL_119;
          }
          else
          {
            v95 = 0;
          }
        }
        else
        {
          v95 = 0;
        }
        do
        {
LABEL_122:
          *(_WORD *)(v86 + 2 * v95) = (263168 * v94->u8[v95]) >> 16;
          ++v95;
        }
        while (v87 != v95);
LABEL_109:
        v94 = (int8x16_t *)((char *)v94 + v83);
        v86 += v89;
        ++v84;
      }
      while ((_DWORD)v84 != v58);
    }
  }
  return 0;
}

uint64_t I420ToNV12(char *a1, int a2, const char *a3, int a4, const char *a5, int a6, char *a7, int a8, char *a9, int a10, int a11, int a12)
{
  char *v12;
  int v13;
  char *v20;
  int v21;
  const char *v22;
  const char *v23;
  const char *v24;
  int v25;
  int v26;
  const char *v27;
  int v28;
  char *v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  char v39;
  void *(*v40)(void *, void *, int);
  void *(*v41)(void *, void *, int);
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  char v49;
  const char *(*v50)(const char *, const char *, char *, int);
  uint64_t v51;
  const char *(*v52)(const char *, const char *, char *, int);
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  void *(*v58)(void *, void *, int);

  v12 = a9;
  v13 = a11 + 2;
  if (a11 >= -1)
    v13 = a11 + 1;
  if (a11 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a9 == 0 || a12 == 0)
    return 0xFFFFFFFFLL;
  v20 = a7;
  v55 = v13;
  v21 = ((1 - a12) >> 1) - 1;
  v22 = &a3[v21 * (uint64_t)a4];
  v23 = &a5[v21 * (uint64_t)a6];
  if (a12 < 0)
    v24 = v23;
  else
    v24 = a5;
  if (a12 >= 0)
    v25 = a6;
  else
    v25 = -a6;
  v57 = v25;
  if (a12 >= 0)
    v26 = a4;
  else
    v26 = -a4;
  v56 = v26;
  if (a12 < 0)
    v27 = v22;
  else
    v27 = a3;
  if (a12 >= 0)
    v28 = a2;
  else
    v28 = -a2;
  if (a12 < 0)
    v29 = &a1[~a12 * a2];
  else
    v29 = a1;
  if (a12 >= 0)
    v30 = a12;
  else
    v30 = -a12;
  if (a12 < 0)
    v31 = (1 - a12) >> 1;
  else
    v31 = (a12 + 1) >> 1;
  if (a7)
  {
    v32 = v28 == a11 ? 0 : v28;
    v33 = v28 == a11 ? 0 : a8;
    v34 = v28 == a11 ? v30 * a11 : a11;
    v35 = v28 == a11 ? 1 : v30;
    if (a8 == a11)
    {
      v28 = v32;
      v36 = v33;
    }
    else
    {
      v36 = a8;
    }
    v37 = a8 == a11 ? v34 : a11;
    v38 = a8 == a11 ? v35 : v30;
    if (v29 != a7 || v28 != v36)
    {
      v39 = cpu_info_;
      if (!cpu_info_)
      {
        v39 = 7;
        cpu_info_ = 7;
      }
      v40 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
      if ((v37 & 0x1F) == 0)
        v40 = (void *(*)(void *, void *, int))CopyRow_NEON;
      if ((v39 & 4) != 0)
        v41 = v40;
      else
        v41 = CopyRow_C;
      v58 = v41;
      v42 = v28;
      v43 = v36;
      do
      {
        v58(v29, v20, v37);
        v29 += v42;
        v20 += v43;
        --v38;
      }
      while (v38);
    }
  }
  if (v31)
  {
    v44 = a10;
    v45 = (v55 >> 1);
    if (v31 < 0)
    {
      v46 = ~v31;
      v31 = -v31;
      v12 = &a9[v46 * a10];
      v44 = -a10;
    }
    v48 = v56;
    v47 = v57;
    if (v57 == (_DWORD)v45 && v56 == (_DWORD)v45 && v44 == 2 * (_DWORD)v45)
    {
      v48 = 0;
      v47 = 0;
      v44 = 0;
      v45 = (v31 * v45);
      v31 = 1;
    }
    v49 = cpu_info_;
    if (!cpu_info_)
    {
      v49 = 7;
      cpu_info_ = 7;
    }
    v50 = (const char *(*)(const char *, const char *, char *, int))MergeUVRow_Any_NEON;
    if ((v45 & 0xF) == 0)
      v50 = (const char *(*)(const char *, const char *, char *, int))MergeUVRow_NEON;
    v51 = v48;
    if ((v49 & 4) != 0)
      v52 = v50;
    else
      v52 = MergeUVRow_C;
    v53 = v47;
    v54 = v44;
    do
    {
      v52(v27, v24, v12, v45);
      v27 += v51;
      v24 += v53;
      v12 += v54;
      --v31;
    }
    while (v31);
  }
  return 0;
}

uint64_t ARGBToNV12(unsigned __int8 *a1, uint64_t a2, int8x16_t *a3, int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8)
{
  uint64_t result;
  int8x16_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v14;
  char v15;
  int v16;
  unint64_t (*v17)(unint64_t, int8x16_t *, unsigned int);
  unint64_t (*v18)(unint64_t, int8x16_t *, unsigned int);
  char v19;
  int v20;
  void *v21;
  unsigned __int8 *(*v22)(unsigned __int8 *, int, _BYTE *, _BYTE *, int);
  char v23;
  void *v24;
  void *v25;
  unint64_t v26;
  _BYTE *v27;
  signed int v28;
  unint64_t (*v29)(unint64_t, int8x16_t *, unsigned int);
  void (*v30)(unsigned __int8 *, _QWORD, unint64_t, _BYTE *, uint64_t);
  void *v31;
  unint64_t (*v32)(unint64_t, int8x16_t *, unsigned int);
  void (*v33)(unint64_t, _BYTE *, uint64_t, _QWORD);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;

  result = 0xFFFFFFFFLL;
  if ((int)a7 >= 1)
  {
    if (a1)
    {
      v10 = a3;
      if (a3)
      {
        v11 = a5;
        if (a5)
        {
          v12 = a8;
          if (a8)
          {
            v14 = a2;
            if ((a8 & 0x80000000) != 0)
            {
              v12 = -a8;
              a1 += (int)(~a8 * a2);
              v14 = -(int)a2;
              v15 = cpu_info_;
              if (cpu_info_)
              {
LABEL_9:
                v16 = a7 + 1;
                v17 = (unint64_t (*)(unint64_t, int8x16_t *, unsigned int))ARGBToYRow_Any_NEON;
                if ((a7 & 0xF) == 0)
                  v17 = (unint64_t (*)(unint64_t, int8x16_t *, unsigned int))ARGBToYRow_NEON;
                if ((v15 & 4) != 0)
                  v18 = v17;
                else
                  v18 = ARGBToYRow_C;
                v32 = v18;
                v19 = cpu_info_;
                if (!cpu_info_)
                {
                  v19 = 7;
                  cpu_info_ = 7;
                }
                v20 = v16 >> 1;
                if ((a7 & 0xF) != 0)
                  v21 = ARGBToUVRow_Any_NEON;
                else
                  v21 = ARGBToUVRow_NEON;
                if ((v19 & 4) != 0)
                  v22 = (unsigned __int8 *(*)(unsigned __int8 *, int, _BYTE *, _BYTE *, int))v21;
                else
                  v22 = ARGBToUVRow_C;
                v23 = cpu_info_;
                if (!cpu_info_)
                {
                  v23 = 7;
                  cpu_info_ = 7;
                }
                v24 = MergeUVRow_Any_NEON;
                if ((v16 & 0x1E) == 0)
                  v24 = MergeUVRow_NEON;
                if ((v23 & 4) == 0)
                  v24 = MergeUVRow_C;
                v33 = (void (*)(unint64_t, _BYTE *, uint64_t, _QWORD))v24;
                v25 = malloc_type_malloc((2 * (v20 + 31)) | 0x3F, 0x6E87D255uLL);
                v26 = ((unint64_t)v25 + 63) & 0xFFFFFFFFFFFFFFC0;
                if (!v26)
                  return v26 == 0;
                v31 = v25;
                v41 = v20;
                v27 = (_BYTE *)(v26 + (int)((v20 + 31) & 0xFFFFFFE0));
                if (v12 < 2)
                {
                  v30 = (void (*)(unsigned __int8 *, _QWORD, unint64_t, _BYTE *, uint64_t))v22;
                  v29 = v32;
                }
                else
                {
                  v28 = 0;
                  v39 = a4;
                  v40 = (int)v14;
                  v37 = 2 * (int)v14;
                  v38 = v14;
                  v29 = v32;
                  v36 = 2 * a4;
                  do
                  {
                    v22(a1, v38, (_BYTE *)v26, v27, a7);
                    v33(v26, v27, v11, v41);
                    v32((unint64_t)a1, v10, a7);
                    v32((unint64_t)&a1[v40], (int8x16_t *)((char *)v10 + v39), a7);
                    a1 += v37;
                    v10 = (int8x16_t *)((char *)v10 + v36);
                    v11 += a6;
                    v28 += 2;
                  }
                  while (v28 < (int)(v12 - 1));
                  v30 = (void (*)(unsigned __int8 *, _QWORD, unint64_t, _BYTE *, uint64_t))v22;
                  if ((v12 & 1) == 0)
                    goto LABEL_38;
                }
                v30(a1, 0, v26, v27, a7);
                v33(v26, v27, v11, v41);
                v29((unint64_t)a1, v10, a7);
LABEL_38:
                free(v31);
                return v26 == 0;
              }
            }
            else
            {
              v15 = cpu_info_;
              if (cpu_info_)
                goto LABEL_9;
            }
            v15 = 7;
            cpu_info_ = 7;
            goto LABEL_9;
          }
        }
      }
    }
  }
  return result;
}

uint64_t ConvertToI420(unsigned __int8 *a1, int a2, int8x16_t *a3, unsigned int a4, int8x16_t *a5, uint64_t a6, char *a7, uint64_t a8, int a9, int a10, unsigned __int8 *a11, unsigned int a12, int a13, int a14, int a15)
{
  int v15;
  char *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v38;
  unsigned int v39;
  int8x16_t *v40;
  int8x16_t *v41;
  int8x16_t *v42;
  uint64_t v43;
  uint64_t v44;
  int8x16_t *v45;
  int8x16_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  int8x16_t *v55;
  int8x16_t *v56;
  int v57;
  int v58;
  const char *v59;
  uint64_t v60;
  int v61;
  char v62;
  const char *(*v63)(const char *, int, uint8x16_t *, uint8x16_t *, int);
  void (*v64)(const char *, int8x16_t *, uint64_t);
  const char *(*v65)(const char *, int, uint8x16_t *, uint8x16_t *, int);
  void (*v66)(const char *, int8x16_t *, uint64_t);
  signed int v67;
  int8x16_t *v68;
  uint64_t v69;
  uint64_t v70;
  const char *(*v71)(const char *, int, uint8x16_t *, uint8x16_t *, int);
  int v72;
  const unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  int v86;
  int8x16_t *v87;
  int8x16_t *v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  char v93;
  void (*v94)(_QWORD);
  void (*v95)(const char *, int8x16_t *, uint64_t);
  signed int v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(_QWORD);
  unsigned __int8 *v101;
  int v102;
  int v103;
  int8x16_t *v104;
  int v105;
  int v106;
  int v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  signed int v112;
  signed int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  int v119;
  unsigned int v120;
  char *v121;
  unsigned int v123;
  char v124;
  unsigned int v125;
  char v126;
  char v127;
  int8x16_t *v128;
  int v129;

  v15 = a8;
  v17 = (char *)a5;
  v18 = (char *)a3;
  v19 = a1;
  v20 = a14;
  v21 = a15;
  if (a15 > 892679499)
  {
    if (a15 <= 1195724873)
    {
      if (a15 > 909202776)
      {
        if (a15 == 909202777)
        {
          v22 = 2;
        }
        else
        {
          if (a15 != 1129923656)
            goto LABEL_45;
          v22 = 6;
        }
      }
      else if (a15 == 892679500)
      {
        v22 = 15;
      }
      else
      {
        if (a15 != 892745036)
          goto LABEL_45;
        v22 = 16;
      }
    }
    else if (a15 <= 1448695128)
    {
      if (a15 == 1195724874)
      {
        v22 = 8;
      }
      else
      {
        if (a15 != 1448433993)
          goto LABEL_45;
        v22 = 0;
      }
    }
    else
    {
      switch(a15)
      {
        case 1448695129:
          v22 = 4;
          break;
        case 1937143161:
          v22 = 5;
          break;
        case 2037741106:
          v22 = 7;
          break;
        default:
          goto LABEL_45;
      }
    }
  }
  else if (a15 <= 828534115)
  {
    if (a15 > 825570612)
    {
      if (a15 == 825570613)
      {
        v22 = 17;
      }
      else
      {
        if (a15 != 825770306)
          goto LABEL_45;
        v22 = 10;
      }
    }
    else if (a15 == 402653184)
    {
      v22 = 14;
    }
    else
    {
      if (a15 != 0x20000000)
        goto LABEL_45;
      v22 = 13;
    }
  }
  else if (a15 <= 859981649)
  {
    if (a15 == 828534116)
    {
      v22 = 9;
    }
    else
    {
      if (a15 != 842093913)
        goto LABEL_45;
      v22 = 1;
    }
  }
  else
  {
    switch(a15)
    {
      case 859981650:
        v22 = 11;
        break;
      case 861030210:
        v22 = 12;
        break;
      case 875713881:
        v22 = 3;
        break;
      default:
        goto LABEL_45;
    }
  }
  v21 = *(_DWORD *)&libyuv::kFourCCAliases[8 * v22 + 4];
LABEL_45:
  if (a13 >= 0)
    v23 = a13;
  else
    v23 = -a13;
  if (a14)
    v24 = v21 == 808596553;
  else
    v24 = 1;
  v29 = !v24 && v21 != 842094158 && v21 != 825382478 && v21 != 842094169 || a3 == (int8x16_t *)a1;
  if (SHIDWORD(a11) >= 0)
    v30 = HIDWORD(a11);
  else
    v30 = -HIDWORD(a11);
  if (SHIDWORD(a11) >= 0)
    v31 = v23;
  else
    v31 = -v23;
  v32 = 0xFFFFFFFFLL;
  if (!a13)
    return v32;
  if (!HIDWORD(a11))
    return v32;
  v33 = a11;
  if ((int)a11 < 1)
    return v32;
  if (!a1)
    return v32;
  if (!a3)
    return v32;
  if (!a5)
    return v32;
  if (!a7)
    return v32;
  v34 = a12;
  if ((int)a12 < 1)
    return v32;
  v129 = v23;
  if (v29)
  {
    v119 = v30;
    v125 = v31;
    v35 = a8;
    v38 = v23 * a12;
    v39 = ((v23 + 1) >> 1) * ((a12 + 1) >> 1);
    v40 = (int8x16_t *)malloc_type_malloc((int)(v23 * a12 + 2 * v39), 0x1116C132uLL);
    if (!v40)
      return 1;
    v41 = (int8x16_t *)((char *)v40 + v38);
    v42 = (int8x16_t *)((char *)v41 + v39);
    v43 = (a12 + 1) >> 1;
    v44 = a12;
    v128 = v40;
    v45 = v40;
    v18 = (char *)a3;
    v17 = (char *)a5;
    v15 = v35;
    v20 = a14;
    v31 = v125;
    v34 = a12;
    a8 = v43;
    v46 = v42;
    v33 = a11;
    v19 = a1;
    v30 = v119;
  }
  else
  {
    v128 = 0;
    v46 = (int8x16_t *)a7;
    v43 = a6;
    v41 = a5;
    v44 = a4;
    v45 = a3;
  }
  v47 = (int)v33 + 1;
  v48 = v47 & 0xFFFFFFFFFFFFFFFELL;
  v123 = a8;
  v121 = (char *)v41;
  v120 = v43;
  v118 = (char *)v45;
  if (v21 > 875836497)
  {
    if (v21 > 1195521073)
    {
      if (v21 <= 1346520913)
      {
        if (v21 == 1195521074)
        {
          LODWORD(v49) = v34;
          v32 = RGB24ToI420(&v19[3 * (int)v33 * a10 + 3 * (uint64_t)a9], 3 * (int)v33, (unint64_t)v45, v44, v41, v43, v46, a8, v34, v31);
          v50 = v129;
          if ((v29 & 1) == 0)
            return v32;
        }
        else
        {
          if (v21 != 1329743698)
            goto LABEL_214;
          LODWORD(v49) = v34;
          v32 = ARGB1555ToI420((uint64_t)&v19[2 * a9 + 2 * (int)v33 * a10], 2 * (int)v33, (uint64_t)v45, v44, (uint64_t)v41, v43, (uint64_t)v46, a8, v34, v31);
          v50 = v129;
          if ((v29 & 1) == 0)
            return v32;
        }
        goto LABEL_224;
      }
      if (v21 == 1346520914)
      {
        LODWORD(v49) = v34;
        v32 = RGB565ToI420((uint64_t)&v19[2 * a9 + 2 * (int)v33 * a10], 2 * (int)v33, (uint64_t)v45, v44, (uint64_t)v41, v43, (uint64_t)v46, a8, v34, v31);
        v50 = v129;
        if ((v29 & 1) == 0)
          return v32;
        goto LABEL_224;
      }
      if (v21 == 1380401729)
      {
        LODWORD(v49) = v34;
        v32 = ABGRToI420(&v19[4 * a9 + 4 * (int)v33 * a10], 4 * (int)v33, v45, v44, v41, v43, v46, a8, v34, v31);
        v50 = v129;
        if ((v29 & 1) == 0)
          return v32;
        goto LABEL_224;
      }
      if (v21 != 1498831189)
        goto LABEL_214;
      v54 = a6;
      v105 = v20;
      v106 = v15;
      if ((a9 & 1) != 0)
        v55 = v46;
      else
        v55 = v41;
      if ((a9 & 1) != 0)
        v56 = v41;
      else
        v56 = v46;
      if ((a9 & 1) != 0)
        v57 = a8;
      else
        v57 = v43;
      if ((a9 & 1) != 0)
        v58 = v43;
      else
        v58 = a8;
      v59 = (const char *)&v19[2 * a9 + 2 * (int)v48 * a10];
      v60 = 2 * v48;
      if ((v31 & 0x80000000) != 0)
      {
        v61 = ~v31;
        v31 = -v31;
        v59 += v60 * v61;
        v60 = (-2 * v48);
      }
      v104 = v46;
      v124 = v29;
      v62 = cpu_info_;
      if (!cpu_info_)
      {
        v62 = 7;
        cpu_info_ = 7;
      }
      v63 = (const char *(*)(const char *, int, uint8x16_t *, uint8x16_t *, int))UYVYToUVRow_Any_NEON;
      if ((v34 & 0xF) == 0)
        v63 = (const char *(*)(const char *, int, uint8x16_t *, uint8x16_t *, int))UYVYToUVRow_NEON;
      v64 = (void (*)(const char *, int8x16_t *, uint64_t))UYVYToYRow_NEON;
      if ((v34 & 0xF) != 0)
        v64 = (void (*)(const char *, int8x16_t *, uint64_t))UYVYToYRow_Any_NEON;
      v65 = UYVYToUVRow_C;
      if ((v62 & 4) != 0)
      {
        v65 = v63;
        v66 = v64;
      }
      else
      {
        v66 = (void (*)(const char *, int8x16_t *, uint64_t))UYVYToYRow_C;
      }
      v108 = v17;
      v109 = v18;
      v107 = v54;
      v126 = v31;
      if (v31 < 2)
      {
        v68 = v45;
        v49 = v34;
      }
      else
      {
        v67 = 0;
        v116 = (int)v60;
        v114 = 2 * (int)v60;
        v112 = v31 - 1;
        v110 = v57;
        v68 = v45;
        v69 = v58;
        v49 = v34;
        do
        {
          v70 = v60;
          v71 = v65;
          ((void (*)(const char *))v65)(v59);
          v66(v59, v68, v49);
          v66(&v59[v116], (int8x16_t *)((char *)v68 + (int)v44), v49);
          v65 = v71;
          v60 = v70;
          v59 += v114;
          v68 = (int8x16_t *)((char *)v68 + 2 * (int)v44);
          v55 = (int8x16_t *)((char *)v55 + v110);
          v56 = (int8x16_t *)((char *)v56 + v69);
          v67 += 2;
        }
        while (v67 < v112);
      }
      if ((v126 & 1) == 0)
        goto LABEL_223;
      v65(v59, 0, (uint8x16_t *)v55, (uint8x16_t *)v56, v49);
      goto LABEL_222;
    }
    if (v21 > 1094862673)
    {
      switch(v21)
      {
        case 1094862674:
          LODWORD(v49) = v34;
          v32 = RGBAToI420(&v19[4 * a9 + 4 * (int)v33 * a10], 4 * (int)v33, v45, v44, v41, v43, v46, a8, v34, v31);
          v50 = v129;
          if ((v29 & 1) == 0)
            return v32;
          break;
        case 1095911234:
          LODWORD(v49) = v34;
          v32 = BGRAToI420(&v19[4 * a9 + 4 * (int)v33 * a10], 4 * (int)v33, v45, v44, v41, v43, v46, a8, v34, v31);
          v50 = v129;
          if ((v29 & 1) == 0)
            return v32;
          break;
        case 1111970369:
          LODWORD(v49) = v34;
          v32 = ARGBToI420(&v19[4 * a9 + 4 * (int)v33 * a10], 4 * (int)v33, v45, v44, v41, v43, v46, a8, v34, v31);
          v50 = v129;
          if ((v29 & 1) == 0)
            return v32;
          break;
        default:
          goto LABEL_214;
      }
      goto LABEL_224;
    }
    if (v21 == 875836498)
    {
      LODWORD(v49) = v34;
      v32 = ARGB4444ToI420((uint64_t)&v19[2 * a9 + 2 * (int)v33 * a10], 2 * (int)v33, (uint64_t)v45, v44, (uint64_t)v41, v43, (uint64_t)v46, a8, v34, v31);
      v50 = v129;
      if ((v29 & 1) == 0)
        return v32;
      goto LABEL_224;
    }
    v72 = 909203033;
LABEL_149:
    if (v21 != v72)
      goto LABEL_214;
    v73 = (const unsigned __int8 *)(v47 >> 1);
    v74 = &v19[(int)v33 * (uint64_t)v30];
    v75 = (uint64_t)(a9 + (a9 < 0)) >> 1;
    v76 = &v74[(int)v73 * (uint64_t)a10 + v75];
    v77 = &v74[(int)v73 * (uint64_t)(v30 + a10) + v75];
    if (v21 == 909203033)
      v78 = v77;
    else
      v78 = v76;
    if (v21 == 909203033)
      v79 = v76;
    else
      v79 = v77;
    LODWORD(v49) = v34;
    LODWORD(v101) = v43;
    v53 = libyuv::I4xxToI420((libyuv *)&v19[(int)v33 * (uint64_t)a10 + a9], (const unsigned __int8 *)v33, v78, v73, v79, v73, v45, (unsigned __int8 *)v44, v41, v101, v46, (unsigned __int8 *)__PAIR64__(v34, a8), v31, (v34 + 1) >> 1, v31, v102, v103);
LABEL_157:
    v32 = v53;
    v50 = v129;
    if ((v29 & 1) == 0)
      return v32;
    goto LABEL_224;
  }
  if (v21 <= 842094168)
  {
    if (v21 <= 808596552)
    {
      if (v21 == 544694642)
      {
        LODWORD(v49) = v34;
        v32 = RAWToI420(&v19[3 * (int)v33 * a10 + 3 * (uint64_t)a9], 3 * (int)v33, (unint64_t)v45, v44, v41, v43, v46, a8, v34, v31);
        v50 = v129;
        if ((v29 & 1) == 0)
          return v32;
      }
      else
      {
        if (v21 != 808465481)
          goto LABEL_214;
        LODWORD(v49) = v34;
        v32 = I400ToI420((char *)&v19[(int)v33 * (uint64_t)a10 + a9], v33, v45->i8, v44, v41->i8, v43, v46->i8, a8, v34, v31);
        v50 = v129;
        if ((v29 & 1) == 0)
          return v32;
      }
      goto LABEL_224;
    }
    if (v21 != 808596553)
    {
      if (v21 != 825382478)
      {
        if (v21 == 842094158)
        {
          LODWORD(v49) = v34;
          v32 = NV12ToI420Rotate((char *)&v19[(int)v33 * a10 + (uint64_t)a9], v33, (const char *)&v19[(int)v33 * (uint64_t)v30+ (int)v48 * (uint64_t)(a10 / 2)+ (int)((a9 + (a9 < 0)) & 0xFFFFFFFE)], v48, v45->i8, v44, v41->i8, v43, v46->i8, a8, v34, v31, v20);
          v50 = v129;
          if ((v29 & 1) == 0)
            return v32;
          goto LABEL_224;
        }
LABEL_214:
        v32 = 0xFFFFFFFFLL;
        if ((v29 & 1) == 0)
          return v32;
        goto LABEL_226;
      }
      LODWORD(v49) = v34;
      v32 = NV12ToI420Rotate((char *)&v19[(int)v33 * a10 + (uint64_t)a9], v33, (const char *)&v19[(int)v33 * (uint64_t)v30+ (int)v48 * (uint64_t)(a10 / 2)+ (int)((a9 + (a9 < 0)) & 0xFFFFFFFE)], v48, v45->i8, v44, v46->i8, a8, v41->i8, v43, v34, v31, v20);
      v50 = v129;
      if ((v29 & 1) == 0)
        return v32;
LABEL_224:
      if (!(_DWORD)v32)
        v32 = I420Rotate(v118, v44, v121, v120, v46->i8, v123, v18, a4, v17, a6, a7, v15, v49, v50, v20);
LABEL_226:
      free(v128);
      return v32;
    }
    goto LABEL_163;
  }
  if (v21 <= 844715352)
  {
    if (v21 == 842094169)
    {
LABEL_163:
      v80 = &v19[(int)v33 * (uint64_t)v30];
      v81 = (uint64_t)(a9 + (a9 < 0)) >> 1;
      v82 = (char *)&v80[(v47 >> 1) * (uint64_t)(a10 / 2) + v81];
      v83 = (char *)&v80[(v47 >> 1) * (uint64_t)(int)(a10 / 2 + ((v30 + 1) >> 1)) + v81];
      if (v21 == 842094169)
        v84 = v83;
      else
        v84 = v82;
      if (v21 == 842094169)
        v85 = v82;
      else
        v85 = v83;
      LODWORD(v49) = v34;
      v32 = I420Rotate((char *)&v19[(int)v33 * a10 + (uint64_t)a9], v33, v84, v47 >> 1, v85, v47 >> 1, v45->i8, v44, v41->i8, v43, v46->i8, a8, v34, v31, v20);
      v50 = v129;
      if ((v29 & 1) != 0)
        goto LABEL_224;
      return v32;
    }
    v72 = 842150985;
    goto LABEL_149;
  }
  if (v21 != 844715353)
  {
    if (v21 != 875714137 && v21 != 875836489)
      goto LABEL_214;
    v51 = 2 * v30;
    if (v21 == 875714137)
      v52 = 2 * v30;
    else
      v52 = v30;
    if (v21 == 875714137)
      v51 = v30;
    LODWORD(v49) = v34;
    LODWORD(v101) = v43;
    v53 = libyuv::I4xxToI420((libyuv *)&v19[(int)v33 * (uint64_t)a10 + a9], (const unsigned __int8 *)v33, &v19[(int)v33 * (uint64_t)(v52 + a10) + a9], (const unsigned __int8 *)v33, &v19[(int)v33 * (uint64_t)(v51 + a10) + a9], (const unsigned __int8 *)v33, v45, (unsigned __int8 *)v44, v41, v101, v46, (unsigned __int8 *)__PAIR64__(v34, a8), v31, v34, v31, v102, v103);
    goto LABEL_157;
  }
  v86 = a6;
  v105 = v20;
  v106 = v15;
  if ((a9 & 1) != 0)
    v87 = v46;
  else
    v87 = v41;
  if ((a9 & 1) != 0)
    v88 = v41;
  else
    v88 = v46;
  if ((a9 & 1) != 0)
    v89 = a8;
  else
    v89 = v43;
  if ((a9 & 1) != 0)
    v90 = v43;
  else
    v90 = a8;
  v59 = (const char *)&v19[2 * a9 + 2 * (int)v48 * a10];
  v91 = 2 * (int)v48;
  if ((v31 & 0x80000000) != 0)
  {
    v92 = ~v31;
    v31 = -v31;
    v59 += v91 * v92;
    v91 = (-2 * v48);
  }
  v104 = v46;
  v124 = v29;
  v93 = cpu_info_;
  if (!cpu_info_)
  {
    v93 = 7;
    cpu_info_ = 7;
  }
  v94 = (void (*)(_QWORD))YUY2ToUVRow_Any_NEON;
  if ((v34 & 0xF) == 0)
    v94 = (void (*)(_QWORD))YUY2ToUVRow_NEON;
  v95 = (void (*)(const char *, int8x16_t *, uint64_t))YUY2ToYRow_NEON;
  if ((v34 & 0xF) != 0)
    v95 = (void (*)(const char *, int8x16_t *, uint64_t))YUY2ToYRow_Any_NEON;
  if ((v93 & 4) != 0)
  {
    v66 = v95;
  }
  else
  {
    v94 = (void (*)(_QWORD))YUY2ToUVRow_C;
    v66 = (void (*)(const char *, int8x16_t *, uint64_t))YUY2ToYRow_C;
  }
  v108 = v17;
  v109 = v18;
  v107 = v86;
  v127 = v31;
  if (v31 < 2)
  {
    v68 = v45;
    v49 = v34;
  }
  else
  {
    v96 = 0;
    v117 = (int)v91;
    v115 = 2 * (int)v91;
    v113 = v31 - 1;
    v111 = v89;
    v68 = v45;
    v97 = v90;
    v49 = v34;
    do
    {
      v98 = v91;
      v99 = v94;
      v94(v59);
      v66(v59, v68, v49);
      v66(&v59[v117], (int8x16_t *)((char *)v68 + (int)v44), v49);
      v94 = v99;
      v91 = v98;
      v59 += v115;
      v68 = (int8x16_t *)((char *)v68 + 2 * (int)v44);
      v87 = (int8x16_t *)((char *)v87 + v111);
      v88 = (int8x16_t *)((char *)v88 + v97);
      v96 += 2;
    }
    while (v96 < v113);
  }
  if ((v127 & 1) != 0)
  {
    ((void (*)(const char *, _QWORD, int8x16_t *, int8x16_t *, uint64_t))v94)(v59, 0, v87, v88, v49);
LABEL_222:
    v66(v59, v68, v49);
  }
LABEL_223:
  v32 = 0;
  v17 = v108;
  v18 = v109;
  v15 = v106;
  LODWORD(a6) = v107;
  v20 = v105;
  v50 = v129;
  v46 = v104;
  if ((v124 & 1) != 0)
    goto LABEL_224;
  return v32;
}

uint64_t I420Rect(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7, int a8, int a9, int a10, int a11, unsigned int a12, int a13)
{
  uint64_t v13;
  BOOL v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  char v33;
  void *(*v34)(void *, int, int);
  void *(*v35)(void *, int, int);
  uint64_t v36;
  int v37;
  BOOL v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  void *(*v44)(void *, int, int);
  void *(*v45)(void *, int, int);
  uint64_t v46;
  int v47;
  int v48;
  char *v49;
  BOOL v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  char v55;
  void *(*v56)(void *, int, int);
  void *(*v57)(void *, int, int);
  uint64_t v58;
  char *v63;
  int v64;
  unsigned int v65;

  v13 = 0xFFFFFFFFLL;
  v18 = a11 > 255 || a9 < 1 || a1 == 0 || a3 == 0 || a5 == 0 || a10 == 0;
  if (!v18 && ((a8 | a7 | a11) & 0x80000000) == 0 && (a13 | a12) <= 0xFF)
  {
    v19 = a4;
    if (a8 >= 0)
      v20 = a8;
    else
      v20 = a8 + 1;
    v21 = v20 >> 1;
    v22 = a5 + (v20 >> 1) * (uint64_t)a6;
    if (a7 >= 0)
      v23 = a7;
    else
      v23 = a7 + 1;
    v24 = (uint64_t)v23 >> 1;
    v25 = (char *)(a3 + v21 * (uint64_t)a4 + v24);
    v64 = (a10 + 1) >> 1;
    if (a10 >= 0)
      v26 = a2;
    else
      v26 = -a2;
    if (a10 >= 0)
      v27 = a10;
    else
      v27 = -a10;
    if (a10 < 0)
      v28 = a1 + a8 * (uint64_t)a2 + a7 + a2 * (uint64_t)~a10;
    else
      v28 = a1 + a8 * (uint64_t)a2 + a7;
    if (v26 == a9)
      v29 = 0;
    else
      v29 = v26;
    if (v26 == a9)
      v30 = v27;
    else
      v30 = 1;
    v31 = (v30 * a9);
    if (v26 == a9)
      v32 = 1;
    else
      v32 = v27;
    v33 = cpu_info_;
    if (!cpu_info_)
    {
      v33 = 7;
      cpu_info_ = 7;
    }
    v63 = (char *)(v22 + v24);
    v65 = (a9 + 1) >> 1;
    v34 = (void *(*)(void *, int, int))SetRow_Any_NEON;
    if ((((_BYTE)v30 * (_BYTE)a9) & 0xF) == 0)
      v34 = (void *(*)(void *, int, int))SetRow_NEON;
    if ((v33 & 4) != 0)
      v35 = v34;
    else
      v35 = SetRow_C;
    v36 = v29;
    do
    {
      v35((void *)v28, a11, v31);
      v28 += v36;
      --v32;
    }
    while (v32);
    if ((a10 + 1) >= 2)
    {
      if (a10 > -2)
      {
        v37 = (a10 + 1) >> 1;
      }
      else
      {
        v37 = -v64;
        v25 += a4 * (uint64_t)~v64;
        v19 = -v19;
      }
      v38 = v19 == v65;
      if (v19 == v65)
        v39 = 0;
      else
        v39 = v19;
      if (v19 == v65)
        v40 = v37;
      else
        v40 = 1;
      v41 = v40 * v65;
      if (v38)
        v42 = 1;
      else
        v42 = v37;
      v43 = cpu_info_;
      if (!cpu_info_)
      {
        v43 = 7;
        cpu_info_ = 7;
      }
      v44 = (void *(*)(void *, int, int))SetRow_Any_NEON;
      if ((v41 & 0xF) == 0)
        v44 = (void *(*)(void *, int, int))SetRow_NEON;
      if ((v43 & 4) != 0)
        v45 = v44;
      else
        v45 = SetRow_C;
      v46 = v39;
      do
      {
        v45(v25, a12, v41);
        v25 += v46;
        --v42;
      }
      while (v42);
      v47 = (a10 + 1) >> 1;
      if (a10 > -2)
        v48 = a6;
      else
        v48 = -a6;
      if (a10 > -2)
      {
        v49 = v63;
      }
      else
      {
        v47 = -v64;
        v49 = &v63[a6 * (uint64_t)~v64];
      }
      v50 = v48 == v65;
      if (v48 == v65)
        v51 = 0;
      else
        v51 = v48;
      if (v48 == v65)
        v52 = v47;
      else
        v52 = 1;
      v53 = v52 * v65;
      if (v50)
        v54 = 1;
      else
        v54 = v47;
      v55 = cpu_info_;
      if (!cpu_info_)
      {
        v55 = 7;
        cpu_info_ = 7;
      }
      v56 = (void *(*)(void *, int, int))SetRow_Any_NEON;
      if ((v53 & 0xF) == 0)
        v56 = (void *(*)(void *, int, int))SetRow_NEON;
      if ((v55 & 4) != 0)
        v57 = v56;
      else
        v57 = SetRow_C;
      v58 = v51;
      do
      {
        v57(v49, a13, v53);
        v49 += v58;
        --v54;
      }
      while (v54);
    }
    return 0;
  }
  return v13;
}

void RotatePlane180(char *a1, int a2, unint64_t a3, int a4, uint64_t a5, int a6)
{
  void *v12;
  unint64_t v13;
  char v14;
  uint64_t (*v15)(uint64_t, unint64_t, int);
  uint64_t (*v16)(uint64_t, unint64_t, int);
  char v17;
  void *(*v18)(void *, void *, int);
  void *(*v19)(void *, void *, int);
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v12 = malloc_type_malloc((int)a5 + 63, 0x5EEFF69CuLL);
  v13 = ((unint64_t)v12 + 63) & 0xFFFFFFFFFFFFFFC0;
  if (v13)
  {
    v14 = cpu_info_;
    if (!cpu_info_)
    {
      v14 = 7;
      cpu_info_ = 7;
    }
    v25 = v12;
    v15 = (uint64_t (*)(uint64_t, unint64_t, int))MirrorRow_Any_NEON;
    if ((a5 & 0x1F) == 0)
      v15 = (uint64_t (*)(uint64_t, unint64_t, int))MirrorRow_NEON;
    if ((v14 & 4) != 0)
      v16 = v15;
    else
      v16 = MirrorRow_C;
    v17 = cpu_info_;
    if (!cpu_info_)
    {
      v17 = 7;
      cpu_info_ = 7;
    }
    v18 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
    if ((a5 & 0x1F) == 0)
      v18 = (void *(*)(void *, void *, int))CopyRow_NEON;
    if ((v17 & 4) != 0)
      v19 = v18;
    else
      v19 = CopyRow_C;
    if (a6 >= 1)
    {
      v20 = a4;
      v21 = (uint64_t)&a1[(a6 - 1) * (uint64_t)a2];
      v22 = a3 + (a6 - 1) * v20;
      v28 = a2;
      v27 = -(uint64_t)a2;
      v23 = v20;
      v26 = -v20;
      if ((a6 + 1) >> 1 <= 1)
        v24 = 1;
      else
        v24 = (a6 + 1) >> 1;
      do
      {
        v19(a1, (void *)v13, a5);
        v16(v21, a3, a5);
        v16(v13, v22, a5);
        a1 += v28;
        a3 += v23;
        v21 += v27;
        v22 += v26;
        --v24;
      }
      while (v24);
    }
    free(v25);
  }
}

uint64_t I420Rotate(char *a1, uint64_t a2, char *a3, unsigned int a4, char *a5, unsigned int a6, char *a7, uint64_t a8, char *a9, int a10, char *a11, int a12, int a13, int a14, int a15)
{
  BOOL v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  char *v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  char v45;
  uint64_t (*v46)(uint64_t, int, uint64_t, int, int);
  uint64_t (*v47)(uint64_t, int, uint64_t, int, int);
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, int, uint64_t, int, int);
  uint64_t (*v55)(uint64_t, int, uint64_t, int, int);
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t, int, uint64_t, int, int);
  uint64_t (*v64)(uint64_t, int, uint64_t, int, int);
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char v74;
  uint64_t (*v75)(uint64_t, int, uint64_t, int, int);
  uint64_t (*v76)(uint64_t, int, uint64_t, int, int);
  unsigned int v77;
  int v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL4 v84;
  char *v85;
  uint64_t v86;
  _OWORD *v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  _OWORD *v93;
  __int128 *v94;
  __int128 v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  _BOOL4 v101;
  char *v102;
  _OWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _OWORD *v109;
  char *v110;
  __int128 v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char v116;
  uint64_t (*v117)(uint64_t, int, uint64_t, int, int);
  char *v118;
  unsigned int v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char v126;
  uint64_t (*v127)(uint64_t, int, uint64_t, int, int);
  int v128;
  uint64_t v129;
  _BOOL4 v131;
  __int128 *v132;
  _OWORD *v133;
  char *v134;
  char *i;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 *v141;
  __int128 v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  int v150;
  char *v151;
  int v152;
  uint64_t (*v153)(uint64_t, int, uint64_t, int, int);
  uint64_t (*v154)(uint64_t, int, uint64_t, int, int);
  int v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;

  if (a1)
    v16 = 1;
  else
    v16 = a7 == 0;
  v17 = !v16;
  result = 0xFFFFFFFFLL;
  if (!a7)
    return result;
  v19 = a13;
  v20 = a11;
  v21 = a9;
  v22 = !a11 || a9 == 0;
  v23 = v22 || a13 < 1;
  v24 = v23 || a5 == 0;
  v25 = v24 || a3 == 0;
  v26 = !v25 && v17 == 0;
  if (!v26 || a14 == 0)
    return result;
  v28 = a7;
  v29 = a10;
  v30 = a13 + 1;
  v31 = ((a13 + 1) >> 1);
  v32 = &a1[~a14 * (int)a2];
  v33 = ((1 - a14) >> 1) - 1;
  v34 = &a3[v33 * (uint64_t)(int)a4];
  v35 = &a5[v33 * (uint64_t)(int)a6];
  if (a14 >= 0)
    v36 = a6;
  else
    v36 = -a6;
  v160 = v36;
  if (a14 < 0)
    v37 = v35;
  else
    v37 = a5;
  if (a14 >= 0)
    v38 = a4;
  else
    v38 = -a4;
  if (a14 < 0)
    v39 = v34;
  else
    v39 = a3;
  if (a14 >= 0)
    a2 = a2;
  else
    a2 = -(int)a2;
  if (a14 < 0)
    v40 = v32;
  else
    v40 = a1;
  if (a14 >= 0)
    LODWORD(v41) = a14;
  else
    LODWORD(v41) = -a14;
  if (a14 < 0)
    v42 = (1 - a14) >> 1;
  else
    v42 = (a14 + 1) >> 1;
  if (a15 > 179)
  {
    if (a15 == 180)
    {
      RotatePlane180(v40, a2, (unint64_t)a7, a8, a13, v41);
      RotatePlane180(v39, v38, (unint64_t)a9, a10, v31, v42);
      RotatePlane180(v37, v160, (unint64_t)a11, a12, v31, v42);
      return 0;
    }
    v162 = (v30 >> 1);
    if (a15 != 270)
      return result;
    v156 = v38;
    v159 = v37;
    v51 = &a7[(a13 - 1) * (int)a8];
    v52 = cpu_info_;
    if (!cpu_info_)
    {
      v52 = 7;
      cpu_info_ = 7;
    }
    v53 = -(uint64_t)(int)a8;
    v54 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_Any_NEON;
    if ((a13 & 7) == 0)
      v54 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_NEON;
    if ((v52 & 4) != 0)
      v55 = v54;
    else
      v55 = TransposeWx8_C;
    if (v41 < 8)
    {
      v59 = (v30 >> 1);
    }
    else
    {
      v150 = v42;
      v152 = a8;
      v56 = 8 * (int)a2;
      do
      {
        v57 = v41;
        v58 = a2;
        ((void (*)(char *))v55)(v40);
        a2 = v58;
        v19 = a13;
        v40 += v56;
        v51 += 8;
        v41 = v57 - 8;
      }
      while (v57 > 0xF);
      v59 = v162;
      v29 = a10;
      v42 = v150;
      LODWORD(a8) = v152;
      if (!(_DWORD)v41 || a13 < 1)
      {
LABEL_82:
        v60 = &a9[((int)v59 - 1) * (uint64_t)v29];
        v61 = cpu_info_;
        if (!cpu_info_)
        {
          v61 = 7;
          cpu_info_ = 7;
        }
        v62 = -(uint64_t)v29;
        v63 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_NEON;
        if ((((_BYTE)a13 + 1) & 0xE) != 0)
          v63 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_Any_NEON;
        v153 = v63;
        if ((v61 & 4) != 0)
          v64 = v63;
        else
          v64 = TransposeWx8_C;
        if (v42 < 8)
        {
          v66 = v42;
        }
        else
        {
          v65 = v42;
          do
          {
            v64((uint64_t)v39, v156, (uint64_t)v60, v62, v59);
            v39 += 8 * (int)v156;
            v60 += 8;
            v66 = v65 - 8;
            v23 = v65 > 0xF;
            v65 -= 8;
          }
          while (v23);
        }
        if (a13 >= 1 && (int)v66 >= 1)
        {
          v99 = 0;
          v101 = v66 > 7 && (_DWORD)v156 == 1;
          v102 = v39 + 16;
          v103 = v60 + 16;
          v104 = v60;
          v41 = (unint64_t)v39;
          do
          {
            if (v101 && (unint64_t)(v60 - &v39[v99 + v99 * a10]) >= 0x20)
            {
              if (v66 < 0x20)
              {
                v107 = 0;
LABEL_160:
                v112 = (char *)(v41 + (int)v156 * v107);
                v113 = &v104[v107];
                v114 = v107 - (v66 & 0xFFFFFFF8);
                do
                {
                  *(_QWORD *)v113 = *(_QWORD *)v112;
                  v113 += 8;
                  v112 += 8 * (int)v156;
                  v114 += 8;
                }
                while (v114);
                v105 = v66 & 0xFFFFFFF8;
                if (v105 == v66)
                  goto LABEL_147;
                goto LABEL_151;
              }
              v108 = v66 & 0xFFFFFFE0;
              v109 = v103;
              v110 = v102;
              do
              {
                v111 = *(_OWORD *)v110;
                *(v109 - 1) = *((_OWORD *)v110 - 1);
                *v109 = v111;
                v110 += 32 * (int)v156;
                v109 += 2;
                v108 -= 32;
              }
              while (v108);
              if ((v66 & 0xFFFFFFE0) == (unint64_t)v66)
                goto LABEL_147;
              v107 = v66 & 0xFFFFFFE0;
              v105 = v107;
              if ((v66 & 0x18) != 0)
                goto LABEL_160;
            }
            else
            {
              v105 = 0;
            }
LABEL_151:
            v106 = (int)v156 * v105;
            do
            {
              v104[v105++] = *(_BYTE *)(v41 + v106);
              v106 += (int)v156;
            }
            while (v66 != v105);
LABEL_147:
            ++v99;
            ++v102;
            v103 = (_OWORD *)((char *)v103 + v62);
            ++v41;
            v104 += v62;
          }
          while (v99 != v59);
        }
        v115 = &a11[((int)v59 - 1) * (uint64_t)a12];
        v116 = cpu_info_;
        if (!cpu_info_)
        {
          v116 = 7;
          cpu_info_ = 7;
        }
        if ((v116 & 4) != 0)
          v117 = v153;
        else
          v117 = TransposeWx8_C;
        v118 = v159;
        if (v42 < 8)
        {
          v119 = v42;
        }
        else
        {
          do
          {
            ((void (*)(char *, uint64_t, char *, uint64_t, uint64_t, unint64_t))v117)(v118, v160, v115, -(uint64_t)a12, v59, v41);
            v118 += 8 * (int)v160;
            v115 += 8;
            v119 = v42 - 8;
            v23 = v42 > 0xF;
            v42 -= 8;
          }
          while (v23);
        }
        result = 0;
        if (a13 < 1 || (int)v119 < 1)
          return result;
        v129 = 0;
        v131 = v119 > 7 && (_DWORD)v160 == 1;
        v132 = (__int128 *)(v118 + 16);
        v133 = v115 + 16;
        v134 = v115;
        for (i = v118; ; ++i)
        {
          if (v131 && (unint64_t)(v115 - &v118[v129 + v129 * a12]) >= 0x20)
          {
            if (v119 < 0x20)
            {
              v138 = 0;
LABEL_210:
              v143 = &i[(int)v160 * v138];
              v144 = &v134[v138];
              v145 = v138 - (v119 & 0xFFFFFFF8);
              do
              {
                *(_QWORD *)v144 = *(_QWORD *)v143;
                v144 += 8;
                v143 += 8 * (int)v160;
                v145 += 8;
              }
              while (v145);
              v136 = v119 & 0xFFFFFFF8;
              if (v136 == v119)
                goto LABEL_197;
              goto LABEL_201;
            }
            v139 = v119 & 0xFFFFFFE0;
            v140 = v133;
            v141 = v132;
            do
            {
              v142 = *v141;
              *(v140 - 1) = *(v141 - 1);
              *v140 = v142;
              v141 += 2 * (int)v160;
              v140 += 2;
              v139 -= 32;
            }
            while (v139);
            if ((v119 & 0xFFFFFFE0) == (unint64_t)v119)
              goto LABEL_197;
            v138 = v119 & 0xFFFFFFE0;
            v136 = v138;
            if ((v119 & 0x18) != 0)
              goto LABEL_210;
          }
          else
          {
            v136 = 0;
          }
LABEL_201:
          v137 = (int)v160 * v136;
          do
          {
            v134[v136++] = i[v137];
            v137 += (int)v160;
          }
          while (v119 != v136);
LABEL_197:
          ++v129;
          v132 = (__int128 *)((char *)v132 + 1);
          v133 = (_OWORD *)((char *)v133 - a12);
          v134 -= a12;
          if (v129 == v162)
            return 0;
        }
      }
    }
    v79 = 0;
    v80 = (char *)v41;
    v81 = (int)a2;
    v82 = (int)a8;
    v84 = v41 > 7 && (_DWORD)a2 == 1;
    v85 = v40 + 16;
    v86 = 32 * (int)a2;
    v87 = v51 + 16;
    v88 = 8 * (int)a2;
    v89 = v51;
    v90 = v40;
    while (1)
    {
      if (v84 && (unint64_t)(v51 - &v40[v79 + v79 * v82]) >= 0x20)
      {
        if (v80 < 0x20)
        {
          v92 = 0;
LABEL_133:
          v96 = &v90[v81 * (_QWORD)v92];
          v97 = &v92[(_QWORD)v89];
          v98 = &v92[-(v80 & 0xFFFFFFF8)];
          do
          {
            *(_QWORD *)v97 = *(_QWORD *)v96;
            v97 += 8;
            v96 += v88;
            v98 += 8;
          }
          while (v98);
          v41 = v80 & 0xFFFFFFF8;
          if ((char *)v41 == v80)
            goto LABEL_120;
          goto LABEL_124;
        }
        v41 = v80 & 0xFFFFFFE0;
        v93 = v87;
        v94 = (__int128 *)v85;
        do
        {
          v95 = *v94;
          *(v93 - 1) = *(v94 - 1);
          *v93 = v95;
          v94 = (__int128 *)((char *)v94 + v86);
          v93 += 2;
          v41 -= 32;
        }
        while (v41);
        if ((char *)(v80 & 0xFFFFFFE0) == v80)
          goto LABEL_120;
        v92 = (char *)(v80 & 0xFFFFFFE0);
        v41 = (unint64_t)v92;
        if ((v80 & 0x18) != 0)
          goto LABEL_133;
      }
      else
      {
        v41 = 0;
      }
LABEL_124:
      v91 = v81 * v41;
      do
      {
        v89[v41++] = v90[v91];
        v91 += v81;
      }
      while (v80 != (char *)v41);
LABEL_120:
      ++v79;
      ++v85;
      v87 = (_OWORD *)((char *)v87 + v53);
      ++v90;
      v89 += v53;
      if (v79 == v19)
        goto LABEL_82;
    }
  }
  if (!a15)
    return I420Copy(v40, a2, v39, v38, v37, v36, a7, a8, a9, a10, a11, a12, a13, v41);
  v161 = (v30 >> 1);
  if (a15 != 90)
    return result;
  v155 = v38;
  v43 = &v40[((int)v41 - 1) * (int)a2];
  v44 = -(uint64_t)(int)a2;
  v45 = cpu_info_;
  if (!cpu_info_)
  {
    v45 = 7;
    cpu_info_ = 7;
  }
  if ((a13 & 7) != 0)
    v46 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_Any_NEON;
  else
    v46 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_NEON;
  if ((v45 & 4) != 0)
    v47 = v46;
  else
    v47 = TransposeWx8_C;
  v158 = v37;
  if (v41 < 8)
  {
    v50 = (v30 >> 1);
  }
  else
  {
    v151 = v39;
    do
    {
      v48 = v41;
      v49 = a8;
      v47((uint64_t)v43, v44, (uint64_t)v28, a8, v19);
      a8 = v49;
      v19 = a13;
      v43 += 8 * v44;
      v28 += 8;
      LODWORD(v41) = v48 - 8;
    }
    while (v48 > 0xF);
    v50 = v161;
    LOBYTE(v30) = a13 + 1;
    v39 = v151;
    if (v48 == 8 || a13 < 1)
      goto LABEL_100;
  }
  v67 = 0;
  do
  {
    v68 = v43;
    v69 = v28;
    v70 = v41;
    do
    {
      *v69++ = *v68;
      v68 += (int)v44;
      --v70;
    }
    while (v70);
    ++v67;
    v28 += (int)a8;
    ++v43;
  }
  while (v67 != v19);
LABEL_100:
  v71 = v155;
  v157 = v42 - 1;
  v72 = &v39[v157 * v71];
  v73 = -v71;
  v74 = cpu_info_;
  if (!cpu_info_)
  {
    v74 = 7;
    cpu_info_ = 7;
  }
  if ((v30 & 0xE) != 0)
    v75 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_Any_NEON;
  else
    v75 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_NEON;
  v154 = v75;
  if ((v74 & 4) != 0)
    v76 = v75;
  else
    v76 = TransposeWx8_C;
  if (v42 < 8)
  {
    v78 = v42;
  }
  else
  {
    v77 = v42;
    do
    {
      v76((uint64_t)v72, v73, (uint64_t)v21, a10, v50);
      v72 += 8 * v73;
      v21 += 8;
      v78 = v77 - 8;
      v23 = v77 > 0xF;
      v77 -= 8;
    }
    while (v23);
  }
  if (a13 >= 1 && v78 >= 1)
  {
    v120 = 0;
    do
    {
      v121 = v72;
      v122 = v21;
      v123 = v78;
      do
      {
        *v122++ = *v121;
        v121 += (int)v73;
        --v123;
      }
      while (v123);
      ++v120;
      v21 += a10;
      ++v72;
    }
    while (v120 != v50);
  }
  v124 = &v158[(int)v157 * (uint64_t)(int)v160];
  v125 = -(uint64_t)(int)v160;
  v126 = cpu_info_;
  if (!cpu_info_)
  {
    v126 = 7;
    cpu_info_ = 7;
  }
  if ((v126 & 4) != 0)
    v127 = v154;
  else
    v127 = TransposeWx8_C;
  if (v42 < 8)
  {
    v128 = v42;
  }
  else
  {
    do
    {
      v127((uint64_t)v124, v125, (uint64_t)v20, a12, v161);
      v124 -= 8 * (int)v160;
      v20 += 8;
      v128 = v42 - 8;
      v23 = v42 > 0xF;
      v42 -= 8;
    }
    while (v23);
  }
  result = 0;
  if (a13 >= 1 && v128 >= 1)
  {
    v146 = 0;
    do
    {
      v147 = v124;
      v148 = v20;
      v149 = v128;
      do
      {
        *v148++ = *v147;
        v147 += (int)v125;
        --v149;
      }
      while (v149);
      ++v146;
      v20 += a12;
      ++v124;
    }
    while (v146 != v161);
    return 0;
  }
  return result;
}

uint64_t NV12ToI420Rotate(char *a1, uint64_t a2, const char *a3, unsigned int a4, char *a5, uint64_t a6, char *a7, uint64_t a8, char *a9, int a10, int a11, int a12, int a13)
{
  uint64_t v14;
  char *v15;
  BOOL v16;
  BOOL v20;
  char *v22;
  int v24;
  char *v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  unsigned int v29;
  int v30;
  uint64_t result;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t (*v35)(uint64_t, int, uint64_t, int, int);
  uint64_t (*v36)(uint64_t, int, uint64_t, int, int);
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t (*v46)(uint64_t, int, uint64_t, int, int);
  uint64_t (*v47)(uint64_t, int, uint64_t, int, int);
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char v55;
  uint64_t v56;
  void (*v57)(const char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t);
  int v58;
  char v59;
  void (*v60)(const char *, char *, char *, _QWORD);
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  char v70;
  void (*v71)(const char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t);
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v77;
  char *v78;
  uint64_t v79;
  _OWORD *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 *v89;
  __int128 v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  const char *v95;
  const char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v14 = a11;
  v15 = a9;
  if (a9)
    v16 = a7 == 0;
  else
    v16 = 1;
  v20 = v16 || a5 == 0 || a1 == 0 || a3 == 0 || a11 < 1;
  if (v20 || a12 == 0)
    return 0xFFFFFFFFLL;
  v22 = a7;
  v24 = a11 + 1;
  v25 = &a1[~a12 * (int)a2];
  if (a12 >= 0)
    v26 = a4;
  else
    v26 = -a4;
  v110 = v26;
  if (a12 < 0)
    v27 = &a3[(((1 - a12) >> 1) - 1) * a4];
  else
    v27 = a3;
  if (a12 >= 0)
    a2 = a2;
  else
    a2 = -(int)a2;
  if (a12 < 0)
    v28 = v25;
  else
    v28 = a1;
  if (a12 >= 0)
    v29 = a12;
  else
    v29 = -a12;
  if (a12 < 0)
    v30 = (1 - a12) >> 1;
  else
    v30 = (a12 + 1) >> 1;
  result = 0xFFFFFFFFLL;
  if (a13 <= 179)
  {
    if (!a13)
      return NV12ToI420(v28, a2, v27, v26, a5, a6, a7, a8, a9, a10, a11, v29);
    if (a13 != 90)
      return result;
    v107 = (v24 >> 1);
    v32 = &v28[((int)v29 - 1) * (int)a2];
    v33 = -(uint64_t)(int)a2;
    v34 = cpu_info_;
    if (!cpu_info_)
    {
      v34 = 7;
      cpu_info_ = 7;
    }
    v35 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_Any_NEON;
    if ((a11 & 7) == 0)
      v35 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_NEON;
    if ((v34 & 4) != 0)
      v36 = v35;
    else
      v36 = TransposeWx8_C;
    if (v29 < 8)
    {
      v40 = (v24 >> 1);
      v41 = a8;
      v42 = a10;
    }
    else
    {
      v111 = -8 * (int)a2;
      do
      {
        v37 = v29;
        v38 = v33;
        v39 = a6;
        ((void (*)(char *, uint64_t, char *, uint64_t))v36)(v32, v33, a5, a6);
        v33 = v38;
        a6 = v39;
        v14 = a11;
        v32 += v111;
        a5 += 8;
        v29 = v37 - 8;
      }
      while (v37 > 0xF);
      v40 = v107;
      v41 = a8;
      v42 = a10;
      if (!v29 || a11 < 1)
        goto LABEL_92;
    }
    v64 = 0;
    do
    {
      v65 = v32;
      v66 = a5;
      v67 = v29;
      do
      {
        *v66++ = *v65;
        v65 += (int)v33;
        --v67;
      }
      while (v67);
      ++v64;
      a5 += (int)a6;
      ++v32;
    }
    while (v64 != v14);
LABEL_92:
    v68 = &v27[(v30 - 1) * (int)v110];
    v69 = -(uint64_t)(int)v110;
    v70 = cpu_info_;
    if (!cpu_info_)
    {
      v70 = 7;
      cpu_info_ = 7;
    }
    if ((v70 & 4) != 0)
      v71 = (void (*)(const char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t))TransposeUVWx8_NEON;
    else
      v71 = (void (*)(const char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t))TransposeUVWx8_C;
    if (v30 < 8)
    {
      v72 = v30;
    }
    else
    {
      do
      {
        v71(v68, v69, v22, v41, v15, v42, v40);
        v68 -= 8 * (int)v110;
        v22 += 8;
        v15 += 8;
        v72 = v30 - 8;
        v20 = v30 > 0xF;
        v30 -= 8;
      }
      while (v20);
    }
    result = 0;
    if (a11 >= 1 && v72 >= 1)
    {
      v100 = 0;
      v101 = (char *)(v68 + 1);
      do
      {
        v102 = v101;
        v103 = v22;
        v104 = v15;
        v105 = v72;
        do
        {
          *v103++ = *(v102 - 1);
          *v104++ = *v102;
          v102 += (int)v69;
          --v105;
        }
        while (v105);
        v100 += 2;
        v15 += a10;
        v22 += (int)a8;
        v101 += 2;
      }
      while (v100 < ((a11 + 1) & 0xFFFFFFFE));
      return 0;
    }
    return result;
  }
  if (a13 == 180)
  {
    RotatePlane180(v28, a2, (unint64_t)a5, a6, a11, v29);
    v59 = cpu_info_;
    if (!cpu_info_)
    {
      v59 = 7;
      cpu_info_ = 7;
    }
    if ((((v24 & 0x1E) == 0) & ((v59 & 4) >> 2)) != 0)
      v60 = (void (*)(const char *, char *, char *, _QWORD))MirrorSplitUVRow_NEON;
    else
      v60 = (void (*)(const char *, char *, char *, _QWORD))MirrorSplitUVRow_C;
    if (v30 >= 1)
    {
      v61 = v30 - 1;
      v62 = &a9[v61 * a10];
      v63 = &v22[(int)v61 * (uint64_t)(int)a8];
      do
      {
        v60(v27, v63, v62, ((a11 + 1) >> 1));
        v27 += (int)v110;
        v63 -= (int)a8;
        v62 -= a10;
        --v30;
      }
      while (v30);
    }
    return 0;
  }
  if (a13 != 270)
    return result;
  v108 = (v24 >> 1);
  v43 = &a5[(a11 - 1) * (int)a6];
  v44 = cpu_info_;
  if (!cpu_info_)
  {
    v44 = 7;
    cpu_info_ = 7;
  }
  v45 = -(uint64_t)(int)a6;
  v46 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_Any_NEON;
  if ((a11 & 7) == 0)
    v46 = (uint64_t (*)(uint64_t, int, uint64_t, int, int))TransposeWx8_NEON;
  if ((v44 & 4) != 0)
    v47 = v46;
  else
    v47 = TransposeWx8_C;
  if (v29 < 8)
  {
    v52 = (v24 >> 1);
    v51 = a8;
    goto LABEL_101;
  }
  v106 = a6;
  v112 = 8 * (int)a2;
  v48 = -(uint64_t)(int)a6;
  do
  {
    v49 = v29;
    v50 = a2;
    ((void (*)(char *))v47)(v28);
    a2 = v50;
    v14 = a11;
    v28 += v112;
    v43 += 8;
    v29 = v49 - 8;
  }
  while (v49 > 0xF);
  v52 = v108;
  v51 = a8;
  LODWORD(a6) = v106;
  if (v29)
  {
    v45 = v48;
    if (a11 >= 1)
    {
LABEL_101:
      v73 = 0;
      v74 = v29;
      v75 = (int)a2;
      v77 = v29 > 7 && (_DWORD)a2 == 1;
      v78 = v28 + 16;
      v79 = 32 * (int)a2;
      v80 = v43 + 16;
      v81 = 8 * (int)a2;
      v82 = v43;
      v83 = v28;
      do
      {
        if (v77 && (unint64_t)(v43 - &v28[v73 + v73 * (int)a6]) >= 0x20)
        {
          if (v74 < 0x20)
          {
            v86 = 0;
LABEL_121:
            v91 = &v83[v75 * v86];
            v92 = &v82[v86];
            v93 = v86 - (v74 & 0xFFFFFFF8);
            do
            {
              *(_QWORD *)v92 = *(_QWORD *)v91;
              v92 += 8;
              v91 += v81;
              v93 += 8;
            }
            while (v93);
            v84 = v74 & 0xFFFFFFF8;
            if (v84 == v74)
              goto LABEL_108;
            goto LABEL_112;
          }
          v87 = v74 & 0xFFFFFFE0;
          v88 = v80;
          v89 = (__int128 *)v78;
          do
          {
            v90 = *v89;
            *(v88 - 1) = *(v89 - 1);
            *v88 = v90;
            v89 = (__int128 *)((char *)v89 + v79);
            v88 += 2;
            v87 -= 32;
          }
          while (v87);
          if ((v74 & 0xFFFFFFE0) == v74)
            goto LABEL_108;
          v86 = v74 & 0xFFFFFFE0;
          v84 = v86;
          if ((v74 & 0x18) != 0)
            goto LABEL_121;
        }
        else
        {
          v84 = 0;
        }
LABEL_112:
        v85 = v75 * v84;
        do
        {
          v82[v84++] = v83[v85];
          v85 += v75;
        }
        while (v74 != v84);
LABEL_108:
        ++v73;
        ++v78;
        v80 = (_OWORD *)((char *)v80 + v45);
        ++v83;
        v82 += v45;
      }
      while (v73 != v14);
    }
  }
  v53 = &v22[((int)v52 - 1) * (uint64_t)v51];
  v54 = &a9[((int)v52 - 1) * (uint64_t)a10];
  v55 = cpu_info_;
  if (!cpu_info_)
  {
    v55 = 7;
    cpu_info_ = 7;
  }
  v56 = -(uint64_t)v51;
  if ((v55 & 4) != 0)
    v57 = (void (*)(const char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t))TransposeUVWx8_NEON;
  else
    v57 = (void (*)(const char *, uint64_t, char *, uint64_t, char *, uint64_t, uint64_t))TransposeUVWx8_C;
  if (v30 < 8)
  {
    v58 = v30;
  }
  else
  {
    do
    {
      v57(v27, v110, v53, v56, v54, -(uint64_t)a10, v52);
      v27 += 8 * (int)v110;
      v53 += 8;
      v54 += 8;
      v58 = v30 - 8;
      v20 = v30 > 0xF;
      v30 -= 8;
    }
    while (v20);
  }
  result = 0;
  if (a11 >= 1 && v58 >= 1)
  {
    v94 = 0;
    v95 = v27 + 1;
    do
    {
      v96 = v95;
      v97 = v53;
      v98 = v54;
      v99 = v58;
      do
      {
        *v97++ = *(v96 - 1);
        *v98++ = *v96;
        v96 += (int)v110;
        --v99;
      }
      while (v99);
      v94 += 2;
      v54 -= a10;
      v53 += v56;
      v95 += 2;
    }
    while (v94 < ((a11 + 1) & 0xFFFFFFFE));
    return 0;
  }
  return result;
}

int8x8_t *TransposeWx8_Any_NEON(int8x8_t *result, int a2, int32x2_t *a3, int a4, int a5)
{
  unint64_t v5;
  int8x8_t *v6;
  int32x2_t *v7;
  int v8;
  int8x8_t *v9;
  int8x8_t v10;
  int8x8_t *v11;
  int8x8_t v12;
  int8x8_t *v13;
  int8x8_t v14;
  int8x8_t *v15;
  int8x8_t v16;
  int8x8_t *v17;
  int8x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  int16x4_t v22;
  int16x4_t v28;
  int16x4_t v30;
  int16x4_t v32;
  int16x4_t v34;
  int16x4_t v36;
  int16x4_t v38;
  int16x4_t v40;
  int32x2_t v42;
  int32x2_t v44;
  int32x2_t v46;
  int32x2_t v48;
  int32x2_t v50;
  int32x2_t v52;
  int32x2_t v54;
  int32x2_t v56;
  int32x2_t *v57;
  int32x2_t *v58;
  int32x2_t *v59;
  int32x2_t *v60;
  int32x2_t *v61;
  int v62;
  int8x16_t v63;
  __int32 *v64;
  __int32 *v65;
  __int32 *v66;
  __int32 *v67;
  int8x16_t v68;
  __int32 *v69;
  int8x16_t v70;
  int8x16_t v71;
  int32x2_t *v72;
  int32x2_t *v73;
  int32x2_t *v74;
  int8x8_t v75;
  __int16 *v76;
  int8x8_t v77;
  __int16 *v78;
  __int16 *v79;
  __int16 *v80;
  __int16 *v81;
  __int8 *v82;
  int32x2_t v83;
  __int8 *v84;
  __int8 *v85;
  __int8 *v86;
  __int8 *v87;
  __int8 *v88;
  int v89;
  __int8 *v90;
  __int8 *v91;
  _BYTE *v92;
  __int8 v93;

  v5 = a5 & 0xFFFFFFFFFFFFFFF8;
  if ((int)v5 >= 1)
  {
    v6 = result;
    v7 = a3;
    v8 = v5 - 8;
    do
    {
      v10 = *(int8x8_t *)((char *)v6 + a2);
      v9 = (int8x8_t *)((char *)v6 + a2 + a2);
      v12 = *v9;
      v11 = (int8x8_t *)((char *)v9 + a2);
      v14 = *v11;
      v13 = (int8x8_t *)((char *)v11 + a2);
      v16 = *v13;
      v15 = (int8x8_t *)((char *)v13 + a2);
      v18 = *v15;
      v17 = (int8x8_t *)((char *)v15 + a2);
      v19 = *v17;
      v20 = *(int8x8_t *)((char *)v17 + a2);
      _X14 = v6;
      v22 = (int16x4_t)vtrn2_s8(*v6, v10);
      __asm { PRFM            #0, [X14,#0x1C0] }
      v28 = (int16x4_t)vtrn1_s8(*v6, v10);
      _X14 = (char *)v6 + a2;
      v30 = (int16x4_t)vtrn2_s8(v12, v14);
      __asm { PRFM            #0, [X14,#0x1C0] }
      v32 = (int16x4_t)vtrn1_s8(v12, v14);
      _X14 = &_X14[a2];
      v34 = (int16x4_t)vtrn2_s8(v16, v18);
      __asm { PRFM            #0, [X14,#0x1C0] }
      v36 = (int16x4_t)vtrn1_s8(v16, v18);
      _X14 = &_X14[a2];
      v38 = (int16x4_t)vtrn2_s8(v19, v20);
      __asm { PRFM            #0, [X14,#0x1C0] }
      v40 = (int16x4_t)vtrn1_s8(v19, v20);
      _X14 = &_X14[a2];
      v42 = (int32x2_t)vtrn2_s16(v28, v32);
      __asm { PRFM            #0, [X14,#0x1C0] }
      v44 = (int32x2_t)vtrn1_s16(v28, v32);
      _X14 = &_X14[a2];
      v46 = (int32x2_t)vtrn2_s16(v22, v30);
      __asm { PRFM            #0, [X14,#0x1C0] }
      v48 = (int32x2_t)vtrn1_s16(v22, v30);
      _X14 = &_X14[a2];
      v50 = (int32x2_t)vtrn2_s16(v36, v40);
      __asm { PRFM            #0, [X14,#0x1C0] }
      v52 = (int32x2_t)vtrn1_s16(v36, v40);
      _X14 = &_X14[a2];
      v54 = (int32x2_t)vtrn2_s16(v34, v38);
      __asm { PRFM            #0, [X14,#0x1C0] }
      v56 = (int32x2_t)vtrn1_s16(v34, v38);
      *v7 = vtrn1_s32(v44, v52);
      *(int32x2_t *)((char *)v7 + a4) = vtrn1_s32(v48, v56);
      v57 = (int32x2_t *)((char *)v7 + a4 + a4);
      *v57 = vtrn1_s32(v42, v50);
      v58 = (int32x2_t *)((char *)v57 + a4);
      *v58 = vtrn1_s32(v46, v54);
      v59 = (int32x2_t *)((char *)v58 + a4);
      *v59 = vtrn2_s32(v44, v52);
      v60 = (int32x2_t *)((char *)v59 + a4);
      *v60 = vtrn2_s32(v48, v56);
      v61 = (int32x2_t *)((char *)v60 + a4);
      *v61 = vtrn2_s32(v42, v50);
      *(int32x2_t *)((char *)v61 + a4) = vtrn2_s32(v46, v54);
      ++v6;
      v7 += a4;
      _VF = __OFSUB__(v8, 8);
      v8 -= 8;
    }
    while (v8 < 0 == _VF);
    v62 = v8 + 8;
    if (v62)
    {
      if (v62 < 2)
        goto LABEL_11;
      if (v62 >= 4)
      {
        v63.i32[0] = v6->i32[0];
        v63.i32[1] = *(__int32 *)((char *)v6->i32 + a2);
        v64 = (__int32 *)((char *)v6 + a2 + a2);
        v63.i32[2] = *v64;
        v65 = (__int32 *)((char *)v64 + a2);
        v63.i32[3] = *v65;
        v66 = (__int32 *)((char *)v65 + a2);
        v68.i32[0] = *v66;
        v67 = (__int32 *)((char *)v66 + a2);
        v68.i32[1] = *v67;
        v69 = (__int32 *)((char *)v67 + a2);
        v68.i32[2] = *v69;
        v68.i32[3] = *(__int32 *)((char *)v69 + a2);
        v70 = vqtbl1q_s8(v63, libyuv::kVTbl4x4Transpose);
        v71 = vqtbl1q_s8(v68, libyuv::kVTbl4x4Transpose);
        v7->i32[0] = v70.i32[0];
        *(__int32 *)((char *)v7->i32 + a4) = v70.i32[1];
        v72 = (int32x2_t *)((char *)v7 + a4 + a4);
        v72->i32[0] = v70.i32[2];
        *(__int32 *)((char *)v72->i32 + a4) = v70.i32[3];
        v7->i32[1] = v71.i32[0];
        v73 = (int32x2_t *)((char *)v7 + a4 + 4);
        v73->i32[0] = v71.i32[1];
        v74 = (int32x2_t *)((char *)v73 + a4);
        v74->i32[0] = v71.i32[2];
        *(__int32 *)((char *)v74->i32 + a4) = v71.i32[3];
        v6 = (int8x8_t *)((char *)v6 + 4);
        v7 = (int32x2_t *)((char *)v7 + 4 * a4);
        v62 -= 4;
        if (!v62)
          goto LABEL_12;
        if (v62 < 2)
        {
LABEL_11:
          v83.i8[0] = v6->i8[0];
          v82 = (char *)v6 + a2;
          v83.i8[1] = *v82;
          v84 = &v82[a2];
          v83.i8[2] = *v84;
          v85 = &v84[a2];
          v83.i8[3] = *v85;
          v86 = &v85[a2];
          v83.i8[4] = *v86;
          v87 = &v86[a2];
          v83.i8[5] = *v87;
          v88 = &v87[a2];
          v83.i8[6] = *v88;
          v83.i8[7] = v88[a2];
          *v7 = v83;
          goto LABEL_12;
        }
      }
      v75.i16[0] = v6->i16[0];
      v77.i16[0] = *(__int16 *)((char *)v6->i16 + a2);
      v76 = (__int16 *)((char *)v6 + a2 + a2);
      v75.i16[1] = *v76;
      v78 = (__int16 *)((char *)v76 + a2);
      v77.i16[1] = *v78;
      v79 = (__int16 *)((char *)v78 + a2);
      v75.i16[2] = *v79;
      v80 = (__int16 *)((char *)v79 + a2);
      v77.i16[2] = *v80;
      v81 = (__int16 *)((char *)v80 + a2);
      v75.i16[3] = *v81;
      v77.i16[3] = *(__int16 *)((char *)v81 + a2);
      *v7 = (int32x2_t)vtrn1_s8(v75, v77);
      *(int8x8_t *)((char *)v7 + a4) = vtrn2_s8(v75, v77);
      v6 = (int8x8_t *)((char *)v6 + 2);
      v7 = (int32x2_t *)((char *)v7 + 2 * a4);
      if (v62 != 2)
        goto LABEL_11;
    }
  }
LABEL_12:
  v89 = a5 & 7;
  if ((a5 & 7) != 0)
  {
    v90 = (char *)result + v5;
    result = (int8x8_t *)((char *)a3 + (int)v5 * (uint64_t)a4);
    result->i8[0] = *v90;
    result->i8[1] = v90[a2];
    result->i8[2] = v90[2 * a2];
    result->i8[3] = v90[3 * a2];
    result->i8[4] = v90[4 * a2];
    result->i8[5] = v90[5 * a2];
    result->i8[6] = v90[6 * a2];
    result->i8[7] = v90[7 * a2];
    if (v89 != 1)
    {
      result = (int8x8_t *)((char *)result + a4);
      result->i8[0] = v90[1];
      result->i8[1] = v90[a2 + 1];
      result->i8[2] = v90[2 * a2 + 1];
      result->i8[3] = v90[3 * a2 + 1];
      result->i8[4] = v90[4 * a2 + 1];
      result->i8[5] = v90[5 * a2 + 1];
      result->i8[6] = v90[6 * a2 + 1];
      result->i8[7] = v90[7 * a2 + 1];
      if (v89 != 2)
      {
        result = (int8x8_t *)((char *)result + a4);
        result->i8[0] = v90[2];
        result->i8[1] = v90[a2 + 2];
        result->i8[2] = v90[2 * a2 + 2];
        result->i8[3] = v90[3 * a2 + 2];
        result->i8[4] = v90[4 * a2 + 2];
        result->i8[5] = v90[5 * a2 + 2];
        result->i8[6] = v90[6 * a2 + 2];
        result->i8[7] = v90[7 * a2 + 2];
        if (v89 != 3)
        {
          result = (int8x8_t *)((char *)result + a4);
          result->i8[0] = v90[3];
          result->i8[1] = v90[a2 + 3];
          result->i8[2] = v90[2 * a2 + 3];
          result->i8[3] = v90[3 * a2 + 3];
          result->i8[4] = v90[4 * a2 + 3];
          result->i8[5] = v90[5 * a2 + 3];
          result->i8[6] = v90[6 * a2 + 3];
          result->i8[7] = v90[7 * a2 + 3];
          if (v89 != 4)
          {
            result = (int8x8_t *)((char *)result + a4);
            result->i8[0] = v90[4];
            result->i8[1] = v90[a2 + 4];
            result->i8[2] = v90[2 * a2 + 4];
            result->i8[3] = v90[3 * a2 + 4];
            result->i8[4] = v90[4 * a2 + 4];
            result->i8[5] = v90[5 * a2 + 4];
            result->i8[6] = v90[6 * a2 + 4];
            result->i8[7] = v90[7 * a2 + 4];
            if (v89 != 5)
            {
              result = (int8x8_t *)((char *)result + a4);
              result->i8[0] = v90[5];
              result->i8[1] = v90[a2 + 5];
              result->i8[2] = v90[2 * a2 + 5];
              result->i8[3] = v90[3 * a2 + 5];
              result->i8[4] = v90[4 * a2 + 5];
              result->i8[5] = v90[5 * a2 + 5];
              result->i8[6] = v90[6 * a2 + 5];
              result->i8[7] = v90[7 * a2 + 5];
              if (v89 != 6)
              {
                v91 = (char *)result + a4;
                v93 = v90[6];
                v92 = v90 + 6;
                *v91 = v93;
                v91[1] = v92[a2];
                v91[2] = v92[2 * a2];
                v91[3] = v92[3 * a2];
                v91[4] = v92[4 * a2];
                v91[5] = v92[5 * a2];
                v91[6] = v92[6 * a2];
                v91[7] = v92[7 * a2];
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t TransposeWx8_C(uint64_t result, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v5;
  _BYTE *v6;

  if (a5 >= 1)
  {
    v5 = 0;
    v6 = (_BYTE *)(a3 + 3);
    do
    {
      *(v6 - 3) = *(_BYTE *)(result + v5);
      *(v6 - 2) = *(_BYTE *)(result + a2 + v5);
      *(v6 - 1) = *(_BYTE *)(result + 2 * a2 + v5);
      *v6 = *(_BYTE *)(result + 3 * a2 + v5);
      v6[1] = *(_BYTE *)(result + 4 * a2 + v5);
      v6[2] = *(_BYTE *)(result + 5 * a2 + v5);
      v6[3] = *(_BYTE *)(result + 6 * a2 + v5);
      v6[4] = *(_BYTE *)(result - a2 + 8 * a2 + v5++);
      v6 += a4;
    }
    while (a5 != (_DWORD)v5);
  }
  return result;
}

_BYTE *TransposeUVWx8_C(_BYTE *result, int a2, uint64_t a3, int a4, uint64_t a5, int a6, int a7)
{
  _BYTE *v7;
  _BYTE *v8;

  if (a7 >= 1)
  {
    v7 = (_BYTE *)(a5 + 3);
    v8 = (_BYTE *)(a3 + 3);
    do
    {
      *(v8 - 3) = *result;
      *(v7 - 3) = result[1];
      *(v8 - 2) = result[a2];
      *(v7 - 2) = result[a2 + 1];
      *(v8 - 1) = result[2 * a2];
      *(v7 - 1) = result[2 * a2 + 1];
      *v8 = result[3 * a2];
      *v7 = result[3 * a2 + 1];
      v8[1] = result[4 * a2];
      v7[1] = result[4 * a2 + 1];
      v8[2] = result[5 * a2];
      v7[2] = result[5 * a2 + 1];
      v8[3] = result[6 * a2];
      v7[3] = result[6 * a2 + 1];
      v8[4] = result[7 * a2];
      v7[4] = result[7 * a2 + 1];
      result += 2;
      v7 += a6;
      v8 += a4;
      --a7;
    }
    while (a7);
  }
  return result;
}

void *MergeUVRow_Any_NEON(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, int a4)
{
  unint64_t v6;
  unsigned int v8;
  int8x16_t *v10;
  int8x16_t v11;
  int8x16_t v12;
  size_t v19;
  int8x16_t *v22;
  int v23;
  int8x16_t v24;
  int8x16_t v25;
  _BYTE v29[128];
  _OWORD __dst[8];
  _OWORD v31[8];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  memset(v31, 0, sizeof(v31));
  v6 = a4 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v6 >= 1)
  {
    _X8 = a2;
    v8 = a4 & 0xFFFFFFF0;
    _X10 = a1;
    v10 = a3;
    do
    {
      v11 = *_X10++;
      v12 = *_X8++;
      v8 -= 16;
      __asm
      {
        PRFM            #0, [X10,#0x1C0]
        PRFM            #0, [X8,#0x1C0]
      }
      *v10 = vzip1q_s8(v11, v12);
      v10[1] = vzip2q_s8(v11, v12);
      v10 += 2;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v19 = a4 & 0xF;
  _X25 = (int8x16_t *)__dst;
  memcpy(__dst, &a1->i8[(int)v6], v19);
  _X22 = (int8x16_t *)v31;
  memcpy(v31, &a2->i8[(int)v6], v19);
  v22 = (int8x16_t *)v29;
  v23 = 16;
  do
  {
    v24 = *_X25++;
    v25 = *_X22++;
    v23 -= 16;
    __asm
    {
      PRFM            #0, [X25,#0x1C0]
      PRFM            #0, [X22,#0x1C0]
    }
    *v22 = vzip1q_s8(v24, v25);
    v22[1] = vzip2q_s8(v24, v25);
    v22 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a3 + 2 * v6, v29, (2 * v19));
}

void *MergeUVRow_16_Any_NEON(uint16x8_t *a1, uint16x8_t *a2, int16x8_t *a3, int a4, int a5)
{
  unint64_t v7;
  unsigned int v8;
  unsigned int v10;
  int16x8_t *v12;
  uint16x8_t v13;
  uint16x8_t v14;
  uint16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  uint64_t v24;
  size_t v25;
  int16x8_t *v28;
  int v29;
  uint16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  _BYTE v38[32];
  _OWORD __dst[2];
  _OWORD v40[2];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  memset(v40, 0, sizeof(v40));
  v7 = a5 & 0xFFFFFFFFFFFFFFF8;
  v8 = 16 - a4;
  if ((int)v7 >= 1)
  {
    _X8 = a2;
    v10 = a5 & 0xFFFFFFF8;
    _X10 = a1;
    v12 = a3;
    v13 = (uint16x8_t)vdupq_n_s16(v8);
    do
    {
      v14 = *_X10++;
      v10 -= 8;
      v15 = *_X8++;
      v16 = (int16x8_t)vshlq_u16(v14, v13);
      v17 = (int16x8_t)vshlq_u16(v15, v13);
      __asm
      {
        PRFM            #0, [X10,#0x1C0]
        PRFM            #0, [X8,#0x1C0]
      }
      *v12 = vzip1q_s16(v16, v17);
      v12[1] = vzip2q_s16(v16, v17);
      v12 += 2;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v24 = 2 * (int)v7;
  v25 = 2 * (a5 & 7u);
  _X26 = (uint16x8_t *)__dst;
  memcpy(__dst, &a1->i8[v24], v25);
  _X22 = (uint16x8_t *)v40;
  memcpy(v40, &a2->i8[v24], v25);
  v28 = (int16x8_t *)v38;
  v29 = 8;
  v30 = (uint16x8_t)vdupq_n_s16(v8);
  do
  {
    v31 = *_X26++;
    v29 -= 8;
    v32 = *_X22++;
    v33 = (int16x8_t)vshlq_u16(v31, v30);
    v34 = (int16x8_t)vshlq_u16(v32, v30);
    __asm
    {
      PRFM            #0, [X26,#0x1C0]
      PRFM            #0, [X22,#0x1C0]
    }
    *v28 = vzip1q_s16(v33, v34);
    v28[1] = vzip2q_s16(v33, v34);
    v28 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a3 + 4 * v7, v38, (2 * v25));
}

void *CopyRow_Any_NEON(__int128 *a1, _OWORD *a2, int a3)
{
  signed int v4;
  signed int v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  size_t v15;
  uint64_t v16;
  _OWORD *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  _BYTE v24[128];
  _OWORD __dst[8];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFE0;
  if ((int)(a3 & 0xFFFFFFE0) >= 1)
  {
    _X9 = a1;
    v6 = a3 & 0xFFFFFFE0;
    v7 = a2;
    do
    {
      v8 = *_X9;
      v9 = _X9[1];
      _X9 += 2;
      __asm { PRFM            #0, [X9,#0x1C0] }
      _VF = __OFSUB__(v6, 32);
      v6 -= 32;
      *v7 = v8;
      v7[1] = v9;
      v7 += 2;
    }
    while (!((v6 < 0) ^ _VF | (v6 == 0)));
  }
  v15 = a3 & 0x1F;
  v16 = v4;
  _X22 = __dst;
  memcpy(__dst, (char *)a1 + v4, v15);
  v18 = v24;
  v19 = 32;
  do
  {
    v20 = *_X22;
    v21 = _X22[1];
    _X22 += 2;
    __asm { PRFM            #0, [X22,#0x1C0] }
    _VF = __OFSUB__(v19, 32);
    v19 -= 32;
    *v18 = v20;
    v18[1] = v21;
    v18 += 2;
  }
  while (!((v19 < 0) ^ _VF | (v19 == 0)));
  return memcpy((char *)a2 + v16, v24, v15);
}

void *ARGBToYRow_Any_NEON(const char *a1, int8x8_t *a2, int a3)
{
  unint64_t v4;
  unsigned int v6;
  int8x8_t *v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v11;
  size_t v17;
  int8x8_t *v19;
  int v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  int16x8_t v24;
  _BYTE v27[128];
  _OWORD __dst[8];
  uint64_t v29;
  int8x16x4_t v30;
  int8x16x4_t v31;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    _X8 = a1;
    v6 = a3 & 0xFFFFFFF0;
    v7 = a2;
    v8 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 0);
    v9 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 1);
    v10 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 2);
    v11 = vdupq_lane_s16((int16x4_t)0x108000428119, 2);
    do
    {
      v30 = vld4q_s8(_X8);
      _X8 += 64;
      v6 -= 16;
      __asm { PRFM            #0, [X8,#0x1C0] }
      *v7 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v30.val[0].i8, *(uint8x8_t *)v8.i8), *(uint8x8_t *)v30.val[1].i8, *(uint8x8_t *)v9.i8), *(uint8x8_t *)v30.val[2].i8, *(uint8x8_t *)v10.i8), v11);
      v7[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v30.val[0], v8), (uint8x16_t)v30.val[1], v9), (uint8x16_t)v30.val[2], v10), v11);
      v7 += 2;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v17 = a3 & 0xF;
  _X23 = (const char *)__dst;
  memcpy(__dst, &a1[4 * (int)v4], (4 * v17));
  v19 = (int8x8_t *)v27;
  v20 = 16;
  v21 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 0);
  v22 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 1);
  v23 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 2);
  v24 = vdupq_lane_s16((int16x4_t)0x108000428119, 2);
  do
  {
    v31 = vld4q_s8(_X23);
    _X23 += 64;
    v20 -= 16;
    __asm { PRFM            #0, [X23,#0x1C0] }
    *v19 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.val[0].i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v31.val[1].i8, *(uint8x8_t *)v22.i8), *(uint8x8_t *)v31.val[2].i8, *(uint8x8_t *)v23.i8), v24);
    v19[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v31.val[0], v21), (uint8x16_t)v31.val[1], v22), (uint8x16_t)v31.val[2], v23), v24);
    v19 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v27, v17);
}

void *BGRAToYRow_Any_NEON(const char *a1, int8x8_t *a2, int a3)
{
  unint64_t v4;
  unsigned int v6;
  int8x8_t *v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v11;
  size_t v17;
  int8x8_t *v19;
  int v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  int16x8_t v24;
  _BYTE v27[128];
  _OWORD __dst[8];
  uint64_t v29;
  int8x16x4_t v30;
  int8x16x4_t v31;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    _X8 = a1;
    v6 = a3 & 0xFFFFFFF0;
    v7 = a2;
    v8 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 0);
    v9 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 1);
    v10 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 2);
    v11 = vdupq_lane_s16((int16x4_t)0x6557108000198142, 2);
    do
    {
      v30 = vld4q_s8(_X8);
      _X8 += 64;
      v6 -= 16;
      __asm { PRFM            #0, [X8,#0x1C0] }
      *v7 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v30.val[1].i8, *(uint8x8_t *)v8.i8), *(uint8x8_t *)v30.val[2].i8, *(uint8x8_t *)v9.i8), *(uint8x8_t *)v30.val[3].i8, *(uint8x8_t *)v10.i8), v11);
      v7[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v30.val[1], v8), (uint8x16_t)v30.val[2], v9), (uint8x16_t)v30.val[3], v10), v11);
      v7 += 2;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v17 = a3 & 0xF;
  _X23 = (const char *)__dst;
  memcpy(__dst, &a1[4 * (int)v4], (4 * v17));
  v19 = (int8x8_t *)v27;
  v20 = 16;
  v21 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 0);
  v22 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 1);
  v23 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 2);
  v24 = vdupq_lane_s16((int16x4_t)0x6557108000198142, 2);
  do
  {
    v31 = vld4q_s8(_X23);
    _X23 += 64;
    v20 -= 16;
    __asm { PRFM            #0, [X23,#0x1C0] }
    *v19 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.val[1].i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v31.val[2].i8, *(uint8x8_t *)v22.i8), *(uint8x8_t *)v31.val[3].i8, *(uint8x8_t *)v23.i8), v24);
    v19[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v31.val[1], v21), (uint8x16_t)v31.val[2], v22), (uint8x16_t)v31.val[3], v23), v24);
    v19 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v27, v17);
}

void *ABGRToYRow_Any_NEON(const char *a1, int8x8_t *a2, int a3)
{
  unint64_t v4;
  unsigned int v6;
  int8x8_t *v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v11;
  size_t v17;
  int8x8_t *v19;
  int v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  int16x8_t v24;
  _BYTE v27[128];
  _OWORD __dst[8];
  uint64_t v29;
  int8x16x4_t v30;
  int8x16x4_t v31;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    _X8 = a1;
    v6 = a3 & 0xFFFFFFF0;
    v7 = a2;
    v8 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 0);
    v9 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 1);
    v10 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 2);
    v11 = vdupq_lane_s16((int16x4_t)0x6557108000198142, 2);
    do
    {
      v30 = vld4q_s8(_X8);
      _X8 += 64;
      v6 -= 16;
      __asm { PRFM            #0, [X8,#0x1C0] }
      *v7 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v30.val[0].i8, *(uint8x8_t *)v8.i8), *(uint8x8_t *)v30.val[1].i8, *(uint8x8_t *)v9.i8), *(uint8x8_t *)v30.val[2].i8, *(uint8x8_t *)v10.i8), v11);
      v7[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v30.val[0], v8), (uint8x16_t)v30.val[1], v9), (uint8x16_t)v30.val[2], v10), v11);
      v7 += 2;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v17 = a3 & 0xF;
  _X23 = (const char *)__dst;
  memcpy(__dst, &a1[4 * (int)v4], (4 * v17));
  v19 = (int8x8_t *)v27;
  v20 = 16;
  v21 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 0);
  v22 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 1);
  v23 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 2);
  v24 = vdupq_lane_s16((int16x4_t)0x6557108000198142, 2);
  do
  {
    v31 = vld4q_s8(_X23);
    _X23 += 64;
    v20 -= 16;
    __asm { PRFM            #0, [X23,#0x1C0] }
    *v19 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.val[0].i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v31.val[1].i8, *(uint8x8_t *)v22.i8), *(uint8x8_t *)v31.val[2].i8, *(uint8x8_t *)v23.i8), v24);
    v19[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v31.val[0], v21), (uint8x16_t)v31.val[1], v22), (uint8x16_t)v31.val[2], v23), v24);
    v19 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v27, v17);
}

void *RGBAToYRow_Any_NEON(const char *a1, int8x8_t *a2, int a3)
{
  unint64_t v4;
  unsigned int v6;
  int8x8_t *v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v11;
  size_t v17;
  int8x8_t *v19;
  int v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  int16x8_t v24;
  _BYTE v27[128];
  _OWORD __dst[8];
  uint64_t v29;
  int8x16x4_t v30;
  int8x16x4_t v31;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    _X8 = a1;
    v6 = a3 & 0xFFFFFFF0;
    v7 = a2;
    v8 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 0);
    v9 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 1);
    v10 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 2);
    v11 = vdupq_lane_s16((int16x4_t)0x108000428119, 2);
    do
    {
      v30 = vld4q_s8(_X8);
      _X8 += 64;
      v6 -= 16;
      __asm { PRFM            #0, [X8,#0x1C0] }
      *v7 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v30.val[1].i8, *(uint8x8_t *)v8.i8), *(uint8x8_t *)v30.val[2].i8, *(uint8x8_t *)v9.i8), *(uint8x8_t *)v30.val[3].i8, *(uint8x8_t *)v10.i8), v11);
      v7[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v30.val[1], v8), (uint8x16_t)v30.val[2], v9), (uint8x16_t)v30.val[3], v10), v11);
      v7 += 2;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v17 = a3 & 0xF;
  _X23 = (const char *)__dst;
  memcpy(__dst, &a1[4 * (int)v4], (4 * v17));
  v19 = (int8x8_t *)v27;
  v20 = 16;
  v21 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 0);
  v22 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 1);
  v23 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 2);
  v24 = vdupq_lane_s16((int16x4_t)0x108000428119, 2);
  do
  {
    v31 = vld4q_s8(_X23);
    _X23 += 64;
    v20 -= 16;
    __asm { PRFM            #0, [X23,#0x1C0] }
    *v19 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.val[1].i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v31.val[2].i8, *(uint8x8_t *)v22.i8), *(uint8x8_t *)v31.val[3].i8, *(uint8x8_t *)v23.i8), v24);
    v19[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v31.val[1], v21), (uint8x16_t)v31.val[2], v22), (uint8x16_t)v31.val[3], v23), v24);
    v19 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v27, v17);
}

void *RGB24ToYRow_Any_NEON(const char *a1, int8x8_t *a2, int a3)
{
  unint64_t v4;
  unsigned int v6;
  int8x8_t *v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v11;
  size_t v17;
  int8x8_t *v19;
  int v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  int16x8_t v24;
  _BYTE v27[128];
  _OWORD __dst[8];
  uint64_t v29;
  int8x16x3_t v30;
  int8x16x3_t v31;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    _X8 = a1;
    v6 = a3 & 0xFFFFFFF0;
    v7 = a2;
    v8 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 0);
    v9 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 1);
    v10 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 2);
    v11 = vdupq_lane_s16((int16x4_t)0x108000428119, 2);
    do
    {
      v30 = vld3q_s8(_X8);
      _X8 += 48;
      v6 -= 16;
      __asm { PRFM            #0, [X8,#0x1C0] }
      *v7 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v30.val[0].i8, *(uint8x8_t *)v8.i8), *(uint8x8_t *)v30.val[1].i8, *(uint8x8_t *)v9.i8), *(uint8x8_t *)v30.val[2].i8, *(uint8x8_t *)v10.i8), v11);
      v7[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v30.val[0], v8), (uint8x16_t)v30.val[1], v9), (uint8x16_t)v30.val[2], v10), v11);
      v7 += 2;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v17 = a3 & 0xF;
  _X23 = (const char *)__dst;
  memcpy(__dst, &a1[3 * (int)v4], (3 * v17));
  v19 = (int8x8_t *)v27;
  v20 = 16;
  v21 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 0);
  v22 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 1);
  v23 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x108000428119, 2);
  v24 = vdupq_lane_s16((int16x4_t)0x108000428119, 2);
  do
  {
    v31 = vld3q_s8(_X23);
    _X23 += 48;
    v20 -= 16;
    __asm { PRFM            #0, [X23,#0x1C0] }
    *v19 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.val[0].i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v31.val[1].i8, *(uint8x8_t *)v22.i8), *(uint8x8_t *)v31.val[2].i8, *(uint8x8_t *)v23.i8), v24);
    v19[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v31.val[0], v21), (uint8x16_t)v31.val[1], v22), (uint8x16_t)v31.val[2], v23), v24);
    v19 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v27, v17);
}

void *RAWToYRow_Any_NEON(const char *a1, int8x8_t *a2, int a3)
{
  unint64_t v4;
  unsigned int v6;
  int8x8_t *v7;
  uint8x16_t v8;
  uint8x16_t v9;
  uint8x16_t v10;
  int16x8_t v11;
  size_t v17;
  int8x8_t *v19;
  int v20;
  uint8x16_t v21;
  uint8x16_t v22;
  uint8x16_t v23;
  int16x8_t v24;
  _BYTE v27[128];
  _OWORD __dst[8];
  uint64_t v29;
  int8x16x3_t v30;
  int8x16x3_t v31;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    _X8 = a1;
    v6 = a3 & 0xFFFFFFF0;
    v7 = a2;
    v8 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 0);
    v9 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 1);
    v10 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 2);
    v11 = vdupq_lane_s16((int16x4_t)0x6557108000198142, 2);
    do
    {
      v30 = vld3q_s8(_X8);
      _X8 += 48;
      v6 -= 16;
      __asm { PRFM            #0, [X8,#0x1C0] }
      *v7 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v30.val[0].i8, *(uint8x8_t *)v8.i8), *(uint8x8_t *)v30.val[1].i8, *(uint8x8_t *)v9.i8), *(uint8x8_t *)v30.val[2].i8, *(uint8x8_t *)v10.i8), v11);
      v7[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v30.val[0], v8), (uint8x16_t)v30.val[1], v9), (uint8x16_t)v30.val[2], v10), v11);
      v7 += 2;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v17 = a3 & 0xF;
  _X23 = (const char *)__dst;
  memcpy(__dst, &a1[3 * (int)v4], (3 * v17));
  v19 = (int8x8_t *)v27;
  v20 = 16;
  v21 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 0);
  v22 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 1);
  v23 = (uint8x16_t)vdupq_lane_s8((int8x8_t)0x6557108000198142, 2);
  v24 = vdupq_lane_s16((int16x4_t)0x6557108000198142, 2);
  do
  {
    v31 = vld3q_s8(_X23);
    _X23 += 48;
    v20 -= 16;
    __asm { PRFM            #0, [X23,#0x1C0] }
    *v19 = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v31.val[0].i8, *(uint8x8_t *)v21.i8), *(uint8x8_t *)v31.val[1].i8, *(uint8x8_t *)v22.i8), *(uint8x8_t *)v31.val[2].i8, *(uint8x8_t *)v23.i8), v24);
    v19[1] = vaddhn_s16((int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v31.val[0], v21), (uint8x16_t)v31.val[1], v22), (uint8x16_t)v31.val[2], v23), v24);
    v19 += 2;
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v27, v17);
}

void *RGB565ToYRow_Any_NEON(int16x8_t *a1, uint8x8_t *a2, int a3)
{
  unint64_t v4;
  uint8x8_t *v5;
  unsigned int v7;
  int16x8_t v8;
  int8x8_t v9;
  int8x16_t v10;
  int64x2_t v11;
  size_t v17;
  uint8x8_t *v19;
  int v20;
  int16x8_t v21;
  int8x8_t v22;
  int8x16_t v23;
  int64x2_t v24;
  _BYTE v27[128];
  _OWORD __dst[8];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((int)v4 >= 1)
  {
    v5 = a2;
    _X9 = a1;
    v7 = a3 & 0xFFFFFFF8;
    do
    {
      v8 = *_X9++;
      v7 -= 8;
      v9 = vshl_n_s8(vshrn_n_s16(v8, 5uLL), 2uLL);
      v10 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v8), (int16x8_t)vshrq_n_u16((uint16x8_t)v8, 0xBuLL)), 3uLL);
      v11 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v10, 5uLL), v10);
      __asm { PRFM            #0, [X9,#0x1C0] }
      *v5++ = vqadd_u8(vqrshrn_n_u16(vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v11.i8, (uint8x8_t)0x1919191919191919), (uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v9, 6uLL), v9), (uint8x8_t)0x8181818181818181), (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v11, 1), (uint8x8_t)0x4242424242424242), 8uLL), (uint8x8_t)0x1010101010101010);
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v17 = a3 & 7;
  _X22 = (int16x8_t *)__dst;
  memcpy(__dst, (char *)a1 + 2 * (int)v4, (2 * v17));
  v19 = (uint8x8_t *)v27;
  v20 = 8;
  do
  {
    v21 = *_X22++;
    v20 -= 8;
    v22 = vshl_n_s8(vshrn_n_s16(v21, 5uLL), 2uLL);
    v23 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v21), (int16x8_t)vshrq_n_u16((uint16x8_t)v21, 0xBuLL)), 3uLL);
    v24 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v23, 5uLL), v23);
    __asm { PRFM            #0, [X22,#0x1C0] }
    *v19++ = vqadd_u8(vqrshrn_n_u16(vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v24.i8, (uint8x8_t)0x1919191919191919), (uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v22, 6uLL), v22), (uint8x8_t)0x8181818181818181), (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v24, 1), (uint8x8_t)0x4242424242424242), 8uLL), (uint8x8_t)0x1010101010101010);
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v27, v17);
}

void *ARGB1555ToYRow_Any_NEON(int16x8_t *a1, uint8x8_t *a2, int a3)
{
  unint64_t v4;
  uint8x8_t *v5;
  unsigned int v7;
  int16x8_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int64x2_t v11;
  size_t v17;
  uint8x8_t *v19;
  int v20;
  int16x8_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int64x2_t v24;
  _BYTE v27[128];
  _OWORD __dst[8];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((int)v4 >= 1)
  {
    v5 = a2;
    _X9 = a1;
    v7 = a3 & 0xFFFFFFF8;
    do
    {
      v8 = *_X9++;
      v7 -= 8;
      v9 = vmovn_hight_s16(vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v8, 0xAuLL), 3uLL)), vshrq_n_s16(v8, 0xFuLL));
      v10 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v8), v8, 5uLL), 3uLL);
      v11 = (int64x2_t)vorrq_s8(v10, (int8x16_t)vshrq_n_u8((uint8x16_t)v10, 5uLL));
      __asm { PRFM            #0, [X9,#0x1C0] }
      *v5++ = vqadd_u8(vqrshrn_n_u16(vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v11.i8, (uint8x8_t)0x1919191919191919), (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v11, 1), (uint8x8_t)0x8181818181818181), (uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v9, 5uLL), v9), (uint8x8_t)0x4242424242424242), 8uLL), (uint8x8_t)0x1010101010101010);
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v17 = a3 & 7;
  _X22 = (int16x8_t *)__dst;
  memcpy(__dst, (char *)a1 + 2 * (int)v4, (2 * v17));
  v19 = (uint8x8_t *)v27;
  v20 = 8;
  do
  {
    v21 = *_X22++;
    v20 -= 8;
    v22 = vmovn_hight_s16(vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v21, 0xAuLL), 3uLL)), vshrq_n_s16(v21, 0xFuLL));
    v23 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v21), v21, 5uLL), 3uLL);
    v24 = (int64x2_t)vorrq_s8(v23, (int8x16_t)vshrq_n_u8((uint8x16_t)v23, 5uLL));
    __asm { PRFM            #0, [X22,#0x1C0] }
    *v19++ = vqadd_u8(vqrshrn_n_u16(vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v24.i8, (uint8x8_t)0x1919191919191919), (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v24, 1), (uint8x8_t)0x8181818181818181), (uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v22, 5uLL), v22), (uint8x8_t)0x4242424242424242), 8uLL), (uint8x8_t)0x1010101010101010);
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v27, v17);
}

void *ARGB4444ToYRow_Any_NEON(int16x8_t *a1, uint8x8_t *a2, int a3)
{
  unint64_t v4;
  uint8x8_t *v5;
  unsigned int v7;
  int16x8_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int64x2_t v12;
  size_t v18;
  uint8x8_t *v20;
  int v21;
  int16x8_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int64x2_t v26;
  _BYTE v29[128];
  _OWORD __dst[8];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF8;
  if ((int)v4 >= 1)
  {
    v5 = a2;
    _X9 = a1;
    v7 = a3 & 0xFFFFFFF8;
    do
    {
      v8 = *_X9++;
      v7 -= 8;
      v9 = vmovn_hight_s16(vshrn_n_s16(v8, 8uLL), v8);
      v10 = vshlq_n_s8(v9, 4uLL);
      v11 = (int8x16_t)vshrq_n_u8((uint8x16_t)v9, 4uLL);
      v12 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v10, 4uLL), v10);
      __asm { PRFM            #0, [X9,#0x1C0] }
      *v5++ = vqadd_u8(vqrshrn_n_u16(vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v12, 1), (uint8x8_t)0x1919191919191919), (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v11, 4uLL), v11), 1), (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v12.i8, (uint8x8_t)0x4242424242424242), 8uLL), (uint8x8_t)0x1010101010101010);
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v18 = a3 & 7;
  _X22 = (int16x8_t *)__dst;
  memcpy(__dst, (char *)a1 + 2 * (int)v4, (2 * v18));
  v20 = (uint8x8_t *)v29;
  v21 = 8;
  do
  {
    v22 = *_X22++;
    v21 -= 8;
    v23 = vmovn_hight_s16(vshrn_n_s16(v22, 8uLL), v22);
    v24 = vshlq_n_s8(v23, 4uLL);
    v25 = (int8x16_t)vshrq_n_u8((uint8x16_t)v23, 4uLL);
    v26 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v24, 4uLL), v24);
    __asm { PRFM            #0, [X22,#0x1C0] }
    *v20++ = vqadd_u8(vqrshrn_n_u16(vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v26, 1), (uint8x8_t)0x1919191919191919), (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v25, 4uLL), v25), 1), (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v26.i8, (uint8x8_t)0x4242424242424242), 8uLL), (uint8x8_t)0x1010101010101010);
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v29, v18);
}

void *YUY2ToYRow_Any_NEON(const char *a1, unsigned __int128 *a2, int a3)
{
  unint64_t v4;
  unsigned __int128 *v5;
  unsigned int v7;
  unsigned __int128 v8;
  size_t v14;
  unsigned __int128 *v16;
  int v17;
  unsigned __int128 v18;
  _BYTE v21[128];
  _OWORD __dst[8];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    v5 = a2;
    _X9 = a1;
    v7 = a3 & 0xFFFFFFF0;
    do
    {
      v8 = (unsigned __int128)vld2q_s8(_X9);
      _X9 += 32;
      v7 -= 16;
      __asm { PRFM            #0, [X9,#0x1C0] }
      *v5++ = v8;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v14 = a3 & 0xF;
  _X22 = (const char *)__dst;
  memcpy(__dst, &a1[2 * (int)v4], (2 * (a3 & 0xF) + 2) & 0x3C);
  v16 = (unsigned __int128 *)v21;
  v17 = 16;
  do
  {
    v18 = (unsigned __int128)vld2q_s8(_X22);
    _X22 += 32;
    v17 -= 16;
    __asm { PRFM            #0, [X22,#0x1C0] }
    *v16++ = v18;
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy((char *)a2 + v4, v21, v14);
}

void *UYVYToYRow_Any_NEON(const char *a1, int8x16_t *a2, int a3)
{
  unint64_t v4;
  int8x16_t *v5;
  unsigned int v7;
  size_t v13;
  int8x16_t *v15;
  int v16;
  _BYTE v19[128];
  _OWORD __dst[8];
  uint64_t v21;
  int8x16x2_t v22;
  int8x16x2_t v23;

  v21 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    v5 = a2;
    _X9 = a1;
    v7 = a3 & 0xFFFFFFF0;
    do
    {
      v22 = vld2q_s8(_X9);
      _X9 += 32;
      v7 -= 16;
      __asm { PRFM            #0, [X9,#0x1C0] }
      *v5++ = v22.val[1];
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v13 = a3 & 0xF;
  _X22 = (const char *)__dst;
  memcpy(__dst, &a1[2 * (int)v4], (2 * (a3 & 0xF) + 2) & 0x3C);
  v15 = (int8x16_t *)v19;
  v16 = 16;
  do
  {
    v23 = vld2q_s8(_X22);
    _X22 += 32;
    v16 -= 16;
    __asm { PRFM            #0, [X22,#0x1C0] }
    *v15++ = v23.val[1];
  }
  while (!(_NF ^ _VF | _ZF));
  return memcpy(&a2->i8[v4], v19, v13);
}

void *Convert16To8Row_Any_NEON(uint16x8_t *a1, uint8x16_t *a2, unsigned int a3, int a4)
{
  signed int v5;
  unsigned int v6;
  uint8x16_t *v7;
  signed int v9;
  uint16x8_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  size_t v18;
  uint8x16_t *v20;
  int v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  _BYTE v27[32];
  _OWORD __dst[4];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v5 = a4 & 0xFFFFFFF0;
  v6 = 15 - __clz(a3);
  if ((int)(a4 & 0xFFFFFFF0) >= 1)
  {
    v7 = a2;
    _X9 = a1;
    v9 = a4 & 0xFFFFFFF0;
    v10 = (uint16x8_t)vdupq_n_s16(v6);
    do
    {
      v11 = *_X9;
      v12 = _X9[1];
      _X9 += 2;
      __asm { PRFM            #0, [X9,#0x1C0] }
      _VF = __OFSUB__(v9, 16);
      v9 -= 16;
      *v7++ = vqmovn_high_u16(vqmovn_u16(vshlq_u16(v11, v10)), vshlq_u16(v12, v10));
    }
    while (!((v9 < 0) ^ _VF | (v9 == 0)));
  }
  v18 = a4 & 0xF;
  _X23 = (uint16x8_t *)__dst;
  memcpy(__dst, (char *)a1 + 2 * v5, (2 * v18));
  v20 = (uint8x16_t *)v27;
  v21 = 16;
  v22 = (uint16x8_t)vdupq_n_s16(v6);
  do
  {
    v23 = *_X23;
    v24 = _X23[1];
    _X23 += 2;
    __asm { PRFM            #0, [X23,#0x1C0] }
    _VF = __OFSUB__(v21, 16);
    v21 -= 16;
    *v20++ = vqmovn_high_u16(vqmovn_u16(vshlq_u16(v23, v22)), vshlq_u16(v24, v22));
  }
  while (!((v21 < 0) ^ _VF | (v21 == 0)));
  return memcpy(&a2->i8[v5], v27, v18);
}

void *MultiplyRow_16_Any_NEON(int16x8_t *a1, int16x8_t *a2, unsigned int a3, int a4)
{
  int16x8_t *v6;
  signed int v8;
  int16x8_t v9;
  int16x8_t v10;
  int16x8_t v11;
  uint64_t v17;
  size_t v18;
  int16x8_t *v20;
  int v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  _BYTE v27[64];
  _OWORD __dst[4];
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  if ((int)(a4 & 0xFFFFFFF0) >= 1)
  {
    v6 = a2;
    _X10 = a1;
    v8 = a4 & 0xFFFFFFF0;
    v9 = vdupq_n_s16(a3);
    do
    {
      v10 = *_X10;
      v11 = _X10[1];
      _X10 += 2;
      __asm { PRFM            #0, [X10,#0x1C0] }
      *v6 = vmulq_s16(v10, v9);
      v6[1] = vmulq_s16(v11, v9);
      v6 += 2;
      _VF = __OFSUB__(v8, 16);
      v8 -= 16;
    }
    while (!((v8 < 0) ^ _VF | (v8 == 0)));
  }
  v17 = 2 * (int)(a4 & 0xFFFFFFF0);
  v18 = 2 * (a4 & 0xFu);
  _X23 = (int16x8_t *)__dst;
  memcpy(__dst, &a1->i8[v17], v18);
  v20 = (int16x8_t *)v27;
  v21 = 16;
  v22 = vdupq_n_s16(a3);
  do
  {
    v23 = *_X23;
    v24 = _X23[1];
    _X23 += 2;
    __asm { PRFM            #0, [X23,#0x1C0] }
    *v20 = vmulq_s16(v23, v22);
    v20[1] = vmulq_s16(v24, v22);
    v20 += 2;
    _VF = __OFSUB__(v21, 16);
    v21 -= 16;
  }
  while (!((v21 < 0) ^ _VF | (v21 == 0)));
  return memcpy(&a2->i8[v17], v27, v18);
}

void *InterpolateRow_Any_NEON(uint8x16_t *a1, uint8x16_t *a2, uint64_t a3, int a4, unsigned int a5)
{
  size_t v9;
  signed int v10;
  unsigned int v13;
  uint8x16_t *v14;
  uint8x16_t v15;
  uint8x16_t v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint8x16_t v25;
  uint8x16_t v26;
  uint8x16_t v29;
  uint64_t v31;
  uint8x16_t *v34;
  int v35;
  uint8x16_t v36;
  uint8x16_t v37;
  uint8x16_t v38;
  uint8x16_t v39;
  uint8x16_t v42;
  uint8x16_t v43;
  uint8x16_t v46;
  _BYTE v49[64];
  _OWORD __dst[4];
  _OWORD v51[4];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  memset(v51, 0, sizeof(v51));
  v9 = a4 & 0xF;
  v10 = a4 & 0xFFFFFFF0;
  if ((int)(a4 & 0xFFFFFFF0) >= 1)
  {
    _X10 = (uint8x16_t *)((char *)a2 + a3);
    _X11 = a2;
    v13 = a4 & 0xFFFFFFF0;
    v14 = a1;
    if (a5)
    {
      if (a5 == 128)
      {
        do
        {
          v25 = *_X11++;
          v26 = *_X10++;
          v13 -= 16;
          __asm
          {
            PRFM            #0, [X11,#0x1C0]
            PRFM            #0, [X10,#0x1C0]
          }
          *v14++ = vrhaddq_u8(v25, v26);
        }
        while (!(_NF ^ _VF | _ZF));
      }
      else
      {
        v15 = (uint8x16_t)vdupq_n_s8(a5);
        v16 = (uint8x16_t)vdupq_n_s8(256 - a5);
        do
        {
          v17 = *_X11++;
          v18 = *_X10++;
          v13 -= 16;
          __asm
          {
            PRFM            #0, [X11,#0x1C0]
            PRFM            #0, [X10,#0x1C0]
          }
          *(int8x16_t *)v14++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v17.i8, *(uint8x8_t *)v16.i8), *(uint8x8_t *)v18.i8, *(uint8x8_t *)v15.i8), 8uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v17, v16), v18, v15), 8uLL);
        }
        while (!(_NF ^ _VF | _ZF));
      }
    }
    else
    {
      do
      {
        v29 = *_X11++;
        v13 -= 16;
        __asm { PRFM            #0, [X11,#0x1C0] }
        *v14++ = v29;
      }
      while (!(_NF ^ _VF | _ZF));
    }
  }
  v31 = v10;
  _X25 = (uint8x16_t *)__dst;
  memcpy(__dst, &a2->i8[v10], a4 & 0xF);
  if (a5)
    memcpy(v51, &a2->i8[a3 + v31], v9);
  _X9 = (uint8x16_t *)v51;
  v34 = (uint8x16_t *)v49;
  v35 = 16;
  if (a5)
  {
    if (a5 == 128)
    {
      do
      {
        v42 = *_X25++;
        v43 = *_X9++;
        v35 -= 16;
        __asm
        {
          PRFM            #0, [X25,#0x1C0]
          PRFM            #0, [X9,#0x1C0]
        }
        *v34++ = vrhaddq_u8(v42, v43);
      }
      while (!(_NF ^ _VF | _ZF));
    }
    else
    {
      v36 = (uint8x16_t)vdupq_n_s8(a5);
      v37 = (uint8x16_t)vdupq_n_s8(256 - a5);
      do
      {
        v38 = *_X25++;
        v39 = *_X9++;
        v35 -= 16;
        __asm
        {
          PRFM            #0, [X25,#0x1C0]
          PRFM            #0, [X9,#0x1C0]
        }
        *(int8x16_t *)v34++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmull_u8(*(uint8x8_t *)v38.i8, *(uint8x8_t *)v37.i8), *(uint8x8_t *)v39.i8, *(uint8x8_t *)v36.i8), 8uLL), (int16x8_t)vmlal_high_u8(vmull_high_u8(v38, v37), v39, v36), 8uLL);
      }
      while (!(_NF ^ _VF | _ZF));
    }
  }
  else
  {
    do
    {
      v46 = *_X25++;
      v35 -= 16;
      __asm { PRFM            #0, [X25,#0x1C0] }
      *v34++ = v46;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  return memcpy(&a1->i8[v31], v49, v9);
}

void *InterpolateRow_16To8_Any_NEON(uint8x8_t *a1, uint16x8_t *a2, uint64_t a3, unsigned int a4, int a5, unsigned int a6, double a7, double a8, uint16x8_t a9)
{
  size_t v13;
  signed int v14;
  unsigned int v15;
  signed int v17;
  uint8x8_t *v18;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v35;
  uint64_t v37;
  uint16x8_t v39;
  uint8x8_t *v41;
  int v42;
  uint16x8_t v43;
  uint16x8_t v44;
  uint16x8_t v45;
  uint16x8_t v46;
  uint16x8_t v47;
  uint16x8_t v50;
  uint16x8_t v51;
  uint16x8_t v54;
  _BYTE v57[64];
  _OWORD __dst[8];
  _OWORD v59[8];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  memset(v59, 0, sizeof(v59));
  v13 = a5 & 7;
  v14 = a5 & 0xFFFFFFF8;
  v15 = __clz(a4);
  if ((int)(a5 & 0xFFFFFFF8) >= 1)
  {
    _X10 = (uint16x8_t *)((char *)a2 + 2 * a3);
    v17 = a5 & 0xFFFFFFF8;
    v18 = a1;
    _X14 = a2;
    v20 = (uint16x8_t)vdupq_n_s16(15 - v15);
    if (a6)
    {
      if (a6 == 128)
      {
        do
        {
          v31 = *_X14++;
          v32 = *_X10++;
          v17 -= 8;
          __asm
          {
            PRFM            #0, [X14,#0x1C0]
            PRFM            #0, [X10,#0x1C0]
          }
          *v18++ = vqmovn_u16(vshlq_u16(vrhaddq_u16(v31, v32), v20));
        }
        while (!(_NF ^ _VF | _ZF));
      }
      else
      {
        v21 = (uint16x8_t)vdupq_n_s16(a6);
        v22 = (uint16x8_t)vdupq_n_s16(256 - a6);
        do
        {
          v23 = *_X14++;
          v24 = *_X10++;
          v17 -= 8;
          __asm
          {
            PRFM            #0, [X14,#0x1C0]
            PRFM            #0, [X10,#0x1C0]
          }
          *v18++ = vqmovn_u16(vshlq_u16((uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v23.i8, *(uint16x4_t *)v22.i8), *(uint16x4_t *)v24.i8, *(uint16x4_t *)v21.i8), 8uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v23, v22), v24, v21), 8uLL), v20));
        }
        while (!(_NF ^ _VF | _ZF));
      }
    }
    else
    {
      do
      {
        v35 = *_X14++;
        __asm { PRFM            #0, [X14,#0x1C0] }
        _VF = __OFSUB__(v17, 8);
        v17 -= 8;
        *v18++ = vqmovn_u16(vshlq_u16(v35, a9));
      }
      while (!((v17 < 0) ^ _VF | (v17 == 0)));
    }
  }
  v37 = v14;
  _X27 = (uint16x8_t *)__dst;
  memcpy(__dst, (char *)a2 + 2 * v14, 2 * (a5 & 7));
  if (a6)
    memcpy(v59, (char *)a2 + 2 * a3 + 2 * v37, 2 * v13);
  _X9 = (uint16x8_t *)v59;
  v41 = (uint8x8_t *)v57;
  v42 = 8;
  v43 = (uint16x8_t)vdupq_n_s16(15 - v15);
  if (a6)
  {
    if (a6 == 128)
    {
      do
      {
        v50 = *_X27++;
        v51 = *_X9++;
        v42 -= 8;
        __asm
        {
          PRFM            #0, [X27,#0x1C0]
          PRFM            #0, [X9,#0x1C0]
        }
        *v41++ = vqmovn_u16(vshlq_u16(vrhaddq_u16(v50, v51), v43));
      }
      while (!(_NF ^ _VF | _ZF));
    }
    else
    {
      v44 = (uint16x8_t)vdupq_n_s16(a6);
      v45 = (uint16x8_t)vdupq_n_s16(256 - a6);
      do
      {
        v46 = *_X27++;
        v47 = *_X9++;
        v42 -= 8;
        __asm
        {
          PRFM            #0, [X27,#0x1C0]
          PRFM            #0, [X9,#0x1C0]
        }
        *v41++ = vqmovn_u16(vshlq_u16((uint16x8_t)vrshrn_high_n_s32(vrshrn_n_s32((int32x4_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v46.i8, *(uint16x4_t *)v45.i8), *(uint16x4_t *)v47.i8, *(uint16x4_t *)v44.i8), 8uLL), (int32x4_t)vmlal_high_u16(vmull_high_u16(v46, v45), v47, v44), 8uLL), v43));
      }
      while (!(_NF ^ _VF | _ZF));
    }
  }
  else
  {
    do
    {
      v54 = *_X27++;
      __asm { PRFM            #0, [X27,#0x1C0] }
      _VF = __OFSUB__(v42, 8);
      v42 -= 8;
      *v41++ = vqmovn_u16(vshlq_u16(v54, v39));
    }
    while (!((v42 < 0) ^ _VF | (v42 == 0)));
  }
  return memcpy((char *)a1 + v37, v57, v13);
}

void *MirrorRow_Any_NEON(char *__src, int8x16_t *a2, int a3)
{
  size_t v4;
  signed int v5;
  int8x16_t *v6;
  signed int v7;
  int8x16_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  BOOL v11;
  int8x16_t *v12;
  int v13;
  int8x16_t *v14;
  int8x16_t v15;
  int8x16_t v16;
  _BYTE v18[64];
  _OWORD __dst[4];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v4 = a3 & 0x1F;
  v5 = a3 & 0xFFFFFFE0;
  if ((int)(a3 & 0xFFFFFFE0) >= 1)
  {
    v6 = a2;
    v7 = a3 & 0xFFFFFFE0;
    v8 = (int8x16_t *)&__src[v4 - 32 + v5];
    do
    {
      v9 = v8[1];
      v10 = *v8;
      v8 -= 2;
      v11 = __OFSUB__(v7, 32);
      v7 -= 32;
      *v6 = vqtbl1q_s8(v9, libyuv::kShuffleMirror);
      v6[1] = vqtbl1q_s8(v10, libyuv::kShuffleMirror);
      v6 += 2;
    }
    while (!((v7 < 0) ^ v11 | (v7 == 0)));
  }
  v12 = (int8x16_t *)__dst;
  memcpy(__dst, __src, a3 & 0x1F);
  v13 = 32;
  v14 = (int8x16_t *)v18;
  do
  {
    v15 = v12[1];
    v16 = *v12;
    v12 -= 2;
    v11 = __OFSUB__(v13, 32);
    v13 -= 32;
    *v14 = vqtbl1q_s8(v15, libyuv::kShuffleMirror);
    v14[1] = vqtbl1q_s8(v16, libyuv::kShuffleMirror);
    v14 += 2;
  }
  while (!((v13 < 0) ^ v11 | (v13 == 0)));
  return memcpy(&a2->i8[v5], &v18[(32 - v4)], v4);
}

void *SetRow_Any_NEON(int8x16_t *a1, unsigned int a2, int a3)
{
  signed int v3;
  signed int v4;
  int8x16_t *v5;
  int8x16_t v6;
  BOOL v7;
  size_t v8;
  int8x16_t *v9;
  int v10;
  int8x16_t v11;
  _QWORD v13[10];

  v13[9] = *MEMORY[0x24BDAC8D0];
  v3 = a3 & 0xFFFFFFF0;
  if ((int)(a3 & 0xFFFFFFF0) >= 1)
  {
    v4 = a3 & 0xFFFFFFF0;
    v5 = a1;
    v6 = vdupq_n_s8(a2);
    do
    {
      v7 = __OFSUB__(v4, 16);
      v4 -= 16;
      *v5++ = v6;
    }
    while (!((v4 < 0) ^ v7 | (v4 == 0)));
  }
  v8 = a3 & 0xF;
  v9 = (int8x16_t *)v13;
  v10 = 16;
  v11 = vdupq_n_s8(a2);
  do
  {
    v7 = __OFSUB__(v10, 16);
    v10 -= 16;
    *v9++ = v11;
  }
  while (!((v10 < 0) ^ v7 | (v10 == 0)));
  return memcpy(&a1->i8[v3], v13, v8);
}

void *SplitUVRow_Any_NEON(const char *a1, int8x16_t *a2, int8x16_t *a3, int a4)
{
  unint64_t v6;
  int8x16_t *v7;
  unsigned int v8;
  int8x16_t *v10;
  size_t v16;
  int8x16x2_t *v18;
  int v19;
  _BYTE *v20;
  _BYTE v23[128];
  _BYTE v24[128];
  _OWORD __dst[8];
  uint64_t v26;
  int8x16x2_t v27;
  int8x16x2_t v28;

  v26 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v6 = a4 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v6 >= 1)
  {
    v7 = a2;
    v8 = a4 & 0xFFFFFFF0;
    _X10 = a1;
    v10 = a3;
    do
    {
      v27 = vld2q_s8(_X10);
      _X10 += 32;
      v8 -= 16;
      __asm { PRFM            #0, [X10,#0x1C0] }
      *v7++ = v27.val[0];
      *v10++ = v27.val[1];
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v16 = a4 & 0xF;
  _X24 = (const char *)__dst;
  memcpy(__dst, &a1[2 * (int)v6], (2 * v16));
  v18 = (int8x16x2_t *)v23;
  v19 = 16;
  v20 = v24;
  do
  {
    v28 = vld2q_s8(_X24);
    _X24 += 32;
    v19 -= 16;
    __asm { PRFM            #0, [X24,#0x1C0] }
    *v18 = v28;
    v18 = (int8x16x2_t *)((char *)v18 + 16);
    v20 += 16;
  }
  while (!(_NF ^ _VF | _ZF));
  memcpy(&a2->i8[v6], v23, v16);
  return memcpy(&a3->i8[v6], v24, v16);
}

void *ARGBToUVRow_Any_NEON(const char *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  char v5;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  int8x8_t *v12;
  int8x8_t *v14;
  signed int v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  const char *v28;
  size_t v29;
  int8x8_t *v31;
  int v33;
  int8x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  uint64_t v43;
  _BYTE v45[128];
  _BYTE v46[128];
  _OWORD __dst[7];
  __int128 v48;
  _OWORD v49[8];
  uint64_t v50;
  int8x16x4_t v51;
  int8x16x4_t v52;
  int8x16x4_t v53;
  int8x16x4_t v54;

  v5 = a5;
  v50 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v48 = 0u;
  memset(v49, 0, sizeof(v49));
  v8 = a5 & 0xF;
  v9 = a5 & 0xFFFFFFF0;
  v10 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    _X8 = &a1[a2];
    v12 = a4;
    _X10 = a1;
    v14 = a3;
    v15 = a5 & 0xFFFFFFF0;
    v16.i64[0] = 0x38003800380038;
    v16.i64[1] = 0x38003800380038;
    v17.i64[0] = 0x25002500250025;
    v17.i64[1] = 0x25002500250025;
    v18.i64[0] = 0x13001300130013;
    v18.i64[1] = 0x13001300130013;
    v19.i64[0] = 0x9000900090009;
    v19.i64[1] = 0x9000900090009;
    v20.i64[0] = 0x2F002F002F002FLL;
    v20.i64[1] = 0x2F002F002F002FLL;
    v21.i64[0] = 0x8080808080808080;
    v21.i64[1] = 0x8080808080808080;
    do
    {
      v51 = vld4q_s8(_X10);
      _X10 += 64;
      __asm { PRFM            #0, [X10,#0x1C0] }
      v53 = vld4q_s8(_X8);
      _X8 += 64;
      __asm { PRFM            #0, [X8,#0x1C0] }
      v51.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v51.val[0]), (uint8x16_t)v53.val[0]), 1uLL);
      v51.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v51.val[1]), (uint8x16_t)v53.val[1]), 1uLL);
      v51.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v51.val[2]), (uint8x16_t)v53.val[2]), 1uLL);
      _VF = __OFSUB__(v15, 16);
      v15 -= 16;
      *v14++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v51.val[0], v16), (int16x8_t)v51.val[1], v17), (int16x8_t)v51.val[2], v18), v21);
      *v12++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v51.val[2], v16), (int16x8_t)v51.val[1], v20), (int16x8_t)v51.val[0], v19), v21);
    }
    while (!((v15 < 0) ^ _VF | (v15 == 0)));
  }
  v28 = &a1[4 * v9];
  v29 = 4 * (a5 & 0xF);
  memcpy(__dst, v28, v29);
  _X22 = (const char *)v49;
  memcpy(v49, &v28[v10], 4 * v8);
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)((char *)__dst + v29) = *(_DWORD *)&v46[v29 + 124];
    *(_DWORD *)((char *)v49 + v29) = *(_DWORD *)((char *)&v48 + v29 + 12);
  }
  v31 = (int8x8_t *)v45;
  _X9 = (const char *)__dst;
  v33 = 16;
  v34 = (int8x8_t *)v46;
  v35.i64[0] = 0x38003800380038;
  v35.i64[1] = 0x38003800380038;
  v36.i64[0] = 0x25002500250025;
  v36.i64[1] = 0x25002500250025;
  v37.i64[0] = 0x13001300130013;
  v37.i64[1] = 0x13001300130013;
  v38.i64[0] = 0x9000900090009;
  v38.i64[1] = 0x9000900090009;
  v39.i64[0] = 0x2F002F002F002FLL;
  v39.i64[1] = 0x2F002F002F002FLL;
  v40.i64[0] = 0x8080808080808080;
  v40.i64[1] = 0x8080808080808080;
  do
  {
    v52 = vld4q_s8(_X9);
    _X9 += 64;
    __asm { PRFM            #0, [X9,#0x1C0] }
    v54 = vld4q_s8(_X22);
    _X22 += 64;
    __asm { PRFM            #0, [X22,#0x1C0] }
    v52.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v52.val[0]), (uint8x16_t)v54.val[0]), 1uLL);
    v52.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v52.val[1]), (uint8x16_t)v54.val[1]), 1uLL);
    v52.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v52.val[2]), (uint8x16_t)v54.val[2]), 1uLL);
    _VF = __OFSUB__(v33, 16);
    v33 -= 16;
    *v31++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v52.val[0], v35), (int16x8_t)v52.val[1], v36), (int16x8_t)v52.val[2], v37), v40);
    *v34++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v52.val[2], v35), (int16x8_t)v52.val[1], v39), (int16x8_t)v52.val[0], v38), v40);
  }
  while (!((v33 < 0) ^ _VF | (v33 == 0)));
  v43 = (uint64_t)v9 >> 1;
  memcpy((char *)a3 + v43, v45, (v8 + 1) >> 1);
  return memcpy((char *)a4 + v43, v46, (v8 + 1) >> 1);
}

void *BGRAToUVRow_Any_NEON(const char *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  char v5;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  int8x8_t *v12;
  int8x8_t *v14;
  signed int v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  const char *v28;
  size_t v29;
  int8x8_t *v31;
  int v33;
  int8x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  uint64_t v43;
  _BYTE v45[128];
  _BYTE v46[128];
  _OWORD __dst[7];
  __int128 v48;
  _OWORD v49[8];
  uint64_t v50;
  int8x16x4_t v51;
  int8x16x4_t v52;
  int8x16x4_t v53;
  int8x16x4_t v54;

  v5 = a5;
  v50 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v48 = 0u;
  memset(v49, 0, sizeof(v49));
  v8 = a5 & 0xF;
  v9 = a5 & 0xFFFFFFF0;
  v10 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    _X8 = &a1[a2];
    v12 = a4;
    _X10 = a1;
    v14 = a3;
    v15 = a5 & 0xFFFFFFF0;
    v16.i64[0] = 0x38003800380038;
    v16.i64[1] = 0x38003800380038;
    v17.i64[0] = 0x25002500250025;
    v17.i64[1] = 0x25002500250025;
    v18.i64[0] = 0x13001300130013;
    v18.i64[1] = 0x13001300130013;
    v19.i64[0] = 0x9000900090009;
    v19.i64[1] = 0x9000900090009;
    v20.i64[0] = 0x2F002F002F002FLL;
    v20.i64[1] = 0x2F002F002F002FLL;
    v21.i64[0] = 0x8080808080808080;
    v21.i64[1] = 0x8080808080808080;
    do
    {
      v51 = vld4q_s8(_X10);
      _X10 += 64;
      v51.val[0] = (int8x16_t)vpaddlq_u8((uint8x16_t)v51.val[3]);
      __asm { PRFM            #0, [X10,#0x1C0] }
      v51.val[3] = (int8x16_t)vpaddlq_u8((uint8x16_t)v51.val[2]);
      v53 = vld4q_s8(_X8);
      _X8 += 64;
      __asm { PRFM            #0, [X8,#0x1C0] }
      v51.val[2] = (int8x16_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v51.val[1]), (uint8x16_t)v53.val[1]);
      v51.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v51.val[0], (uint8x16_t)v53.val[3]), 1uLL);
      v51.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v51.val[3], (uint8x16_t)v53.val[2]), 1uLL);
      v51.val[2] = (int8x16_t)vrshrq_n_u16((uint16x8_t)v51.val[2], 1uLL);
      _VF = __OFSUB__(v15, 16);
      v15 -= 16;
      *v14++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v51.val[0], v16), (int16x8_t)v51.val[1], v17), (int16x8_t)v51.val[2], v18), v21);
      *v12++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v51.val[2], v16), (int16x8_t)v51.val[1], v20), (int16x8_t)v51.val[0], v19), v21);
    }
    while (!((v15 < 0) ^ _VF | (v15 == 0)));
  }
  v28 = &a1[4 * v9];
  v29 = 4 * (a5 & 0xF);
  memcpy(__dst, v28, v29);
  _X22 = (const char *)v49;
  memcpy(v49, &v28[v10], 4 * v8);
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)((char *)__dst + v29) = *(_DWORD *)&v46[v29 + 124];
    *(_DWORD *)((char *)v49 + v29) = *(_DWORD *)((char *)&v48 + v29 + 12);
  }
  v31 = (int8x8_t *)v45;
  _X9 = (const char *)__dst;
  v33 = 16;
  v34 = (int8x8_t *)v46;
  v35.i64[0] = 0x38003800380038;
  v35.i64[1] = 0x38003800380038;
  v36.i64[0] = 0x25002500250025;
  v36.i64[1] = 0x25002500250025;
  v37.i64[0] = 0x13001300130013;
  v37.i64[1] = 0x13001300130013;
  v38.i64[0] = 0x9000900090009;
  v38.i64[1] = 0x9000900090009;
  v39.i64[0] = 0x2F002F002F002FLL;
  v39.i64[1] = 0x2F002F002F002FLL;
  v40.i64[0] = 0x8080808080808080;
  v40.i64[1] = 0x8080808080808080;
  do
  {
    v52 = vld4q_s8(_X9);
    _X9 += 64;
    v52.val[0] = (int8x16_t)vpaddlq_u8((uint8x16_t)v52.val[3]);
    __asm { PRFM            #0, [X9,#0x1C0] }
    v52.val[3] = (int8x16_t)vpaddlq_u8((uint8x16_t)v52.val[2]);
    v54 = vld4q_s8(_X22);
    _X22 += 64;
    __asm { PRFM            #0, [X22,#0x1C0] }
    v52.val[2] = (int8x16_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v52.val[1]), (uint8x16_t)v54.val[1]);
    v52.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v52.val[0], (uint8x16_t)v54.val[3]), 1uLL);
    v52.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v52.val[3], (uint8x16_t)v54.val[2]), 1uLL);
    v52.val[2] = (int8x16_t)vrshrq_n_u16((uint16x8_t)v52.val[2], 1uLL);
    _VF = __OFSUB__(v33, 16);
    v33 -= 16;
    *v31++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v52.val[0], v35), (int16x8_t)v52.val[1], v36), (int16x8_t)v52.val[2], v37), v40);
    *v34++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v52.val[2], v35), (int16x8_t)v52.val[1], v39), (int16x8_t)v52.val[0], v38), v40);
  }
  while (!((v33 < 0) ^ _VF | (v33 == 0)));
  v43 = (uint64_t)v9 >> 1;
  memcpy((char *)a3 + v43, v45, (v8 + 1) >> 1);
  return memcpy((char *)a4 + v43, v46, (v8 + 1) >> 1);
}

void *ABGRToUVRow_Any_NEON(const char *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  char v5;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  int8x8_t *v12;
  int8x8_t *v14;
  signed int v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  const char *v28;
  size_t v29;
  int8x8_t *v31;
  int v33;
  int8x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  uint64_t v43;
  _BYTE v45[128];
  _BYTE v46[128];
  _OWORD __dst[7];
  __int128 v48;
  _OWORD v49[8];
  uint64_t v50;
  int8x16x4_t v51;
  int8x16x4_t v52;
  int8x16x4_t v53;
  int8x16x4_t v54;

  v5 = a5;
  v50 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v48 = 0u;
  memset(v49, 0, sizeof(v49));
  v8 = a5 & 0xF;
  v9 = a5 & 0xFFFFFFF0;
  v10 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    _X8 = &a1[a2];
    v12 = a4;
    _X10 = a1;
    v14 = a3;
    v15 = a5 & 0xFFFFFFF0;
    v16.i64[0] = 0x38003800380038;
    v16.i64[1] = 0x38003800380038;
    v17.i64[0] = 0x25002500250025;
    v17.i64[1] = 0x25002500250025;
    v18.i64[0] = 0x13001300130013;
    v18.i64[1] = 0x13001300130013;
    v19.i64[0] = 0x9000900090009;
    v19.i64[1] = 0x9000900090009;
    v20.i64[0] = 0x2F002F002F002FLL;
    v20.i64[1] = 0x2F002F002F002FLL;
    v21.i64[0] = 0x8080808080808080;
    v21.i64[1] = 0x8080808080808080;
    do
    {
      v51 = vld4q_s8(_X10);
      _X10 += 64;
      v51.val[3] = (int8x16_t)vpaddlq_u8((uint8x16_t)v51.val[2]);
      __asm { PRFM            #0, [X10,#0x1C0] }
      v51.val[2] = (int8x16_t)vpaddlq_u8((uint8x16_t)v51.val[1]);
      v53 = vld4q_s8(_X8);
      _X8 += 64;
      __asm { PRFM            #0, [X8,#0x1C0] }
      v51.val[1] = (int8x16_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v51.val[0]), (uint8x16_t)v53.val[0]);
      v51.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v51.val[3], (uint8x16_t)v53.val[2]), 1uLL);
      v51.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v51.val[2], (uint8x16_t)v53.val[1]), 1uLL);
      v51.val[1] = (int8x16_t)vrshrq_n_u16((uint16x8_t)v51.val[1], 1uLL);
      _VF = __OFSUB__(v15, 16);
      v15 -= 16;
      *v14++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v51.val[0], v16), (int16x8_t)v51.val[2], v17), (int16x8_t)v51.val[1], v18), v21);
      *v12++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v51.val[1], v16), (int16x8_t)v51.val[2], v20), (int16x8_t)v51.val[0], v19), v21);
    }
    while (!((v15 < 0) ^ _VF | (v15 == 0)));
  }
  v28 = &a1[4 * v9];
  v29 = 4 * (a5 & 0xF);
  memcpy(__dst, v28, v29);
  _X22 = (const char *)v49;
  memcpy(v49, &v28[v10], 4 * v8);
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)((char *)__dst + v29) = *(_DWORD *)&v46[v29 + 124];
    *(_DWORD *)((char *)v49 + v29) = *(_DWORD *)((char *)&v48 + v29 + 12);
  }
  v31 = (int8x8_t *)v45;
  _X9 = (const char *)__dst;
  v33 = 16;
  v34 = (int8x8_t *)v46;
  v35.i64[0] = 0x38003800380038;
  v35.i64[1] = 0x38003800380038;
  v36.i64[0] = 0x25002500250025;
  v36.i64[1] = 0x25002500250025;
  v37.i64[0] = 0x13001300130013;
  v37.i64[1] = 0x13001300130013;
  v38.i64[0] = 0x9000900090009;
  v38.i64[1] = 0x9000900090009;
  v39.i64[0] = 0x2F002F002F002FLL;
  v39.i64[1] = 0x2F002F002F002FLL;
  v40.i64[0] = 0x8080808080808080;
  v40.i64[1] = 0x8080808080808080;
  do
  {
    v52 = vld4q_s8(_X9);
    _X9 += 64;
    v52.val[3] = (int8x16_t)vpaddlq_u8((uint8x16_t)v52.val[2]);
    __asm { PRFM            #0, [X9,#0x1C0] }
    v52.val[2] = (int8x16_t)vpaddlq_u8((uint8x16_t)v52.val[1]);
    v54 = vld4q_s8(_X22);
    _X22 += 64;
    __asm { PRFM            #0, [X22,#0x1C0] }
    v52.val[1] = (int8x16_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v52.val[0]), (uint8x16_t)v54.val[0]);
    v52.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v52.val[3], (uint8x16_t)v54.val[2]), 1uLL);
    v52.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8((uint16x8_t)v52.val[2], (uint8x16_t)v54.val[1]), 1uLL);
    v52.val[1] = (int8x16_t)vrshrq_n_u16((uint16x8_t)v52.val[1], 1uLL);
    _VF = __OFSUB__(v33, 16);
    v33 -= 16;
    *v31++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v52.val[0], v35), (int16x8_t)v52.val[2], v36), (int16x8_t)v52.val[1], v37), v40);
    *v34++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v52.val[1], v35), (int16x8_t)v52.val[2], v39), (int16x8_t)v52.val[0], v38), v40);
  }
  while (!((v33 < 0) ^ _VF | (v33 == 0)));
  v43 = (uint64_t)v9 >> 1;
  memcpy((char *)a3 + v43, v45, (v8 + 1) >> 1);
  return memcpy((char *)a4 + v43, v46, (v8 + 1) >> 1);
}

void *RGBAToUVRow_Any_NEON(const char *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  char v5;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  int8x8_t *v12;
  int8x8_t *v14;
  signed int v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  const char *v28;
  size_t v29;
  int8x8_t *v31;
  int v33;
  int8x8_t *v34;
  int16x8_t v35;
  int16x8_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  uint64_t v43;
  _BYTE v45[128];
  _BYTE v46[128];
  _OWORD __dst[7];
  __int128 v48;
  _OWORD v49[8];
  uint64_t v50;
  int8x16x4_t v51;
  int8x16x4_t v52;
  int8x16x4_t v53;
  int8x16x4_t v54;

  v5 = a5;
  v50 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v48 = 0u;
  memset(v49, 0, sizeof(v49));
  v8 = a5 & 0xF;
  v9 = a5 & 0xFFFFFFF0;
  v10 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    _X8 = &a1[a2];
    v12 = a4;
    _X10 = a1;
    v14 = a3;
    v15 = a5 & 0xFFFFFFF0;
    v16.i64[0] = 0x38003800380038;
    v16.i64[1] = 0x38003800380038;
    v17.i64[0] = 0x25002500250025;
    v17.i64[1] = 0x25002500250025;
    v18.i64[0] = 0x13001300130013;
    v18.i64[1] = 0x13001300130013;
    v19.i64[0] = 0x9000900090009;
    v19.i64[1] = 0x9000900090009;
    v20.i64[0] = 0x2F002F002F002FLL;
    v20.i64[1] = 0x2F002F002F002FLL;
    v21.i64[0] = 0x8080808080808080;
    v21.i64[1] = 0x8080808080808080;
    do
    {
      v51 = vld4q_s8(_X10);
      _X10 += 64;
      __asm { PRFM            #0, [X10,#0x1C0] }
      v53 = vld4q_s8(_X8);
      _X8 += 64;
      __asm { PRFM            #0, [X8,#0x1C0] }
      v51.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v51.val[1]), (uint8x16_t)v53.val[1]), 1uLL);
      v51.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v51.val[2]), (uint8x16_t)v53.val[2]), 1uLL);
      v51.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v51.val[3]), (uint8x16_t)v53.val[3]), 1uLL);
      _VF = __OFSUB__(v15, 16);
      v15 -= 16;
      *v14++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v51.val[0], v16), (int16x8_t)v51.val[1], v17), (int16x8_t)v51.val[2], v18), v21);
      *v12++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v51.val[2], v16), (int16x8_t)v51.val[1], v20), (int16x8_t)v51.val[0], v19), v21);
    }
    while (!((v15 < 0) ^ _VF | (v15 == 0)));
  }
  v28 = &a1[4 * v9];
  v29 = 4 * (a5 & 0xF);
  memcpy(__dst, v28, v29);
  _X22 = (const char *)v49;
  memcpy(v49, &v28[v10], 4 * v8);
  if ((v5 & 1) != 0)
  {
    *(_DWORD *)((char *)__dst + v29) = *(_DWORD *)&v46[v29 + 124];
    *(_DWORD *)((char *)v49 + v29) = *(_DWORD *)((char *)&v48 + v29 + 12);
  }
  v31 = (int8x8_t *)v45;
  _X9 = (const char *)__dst;
  v33 = 16;
  v34 = (int8x8_t *)v46;
  v35.i64[0] = 0x38003800380038;
  v35.i64[1] = 0x38003800380038;
  v36.i64[0] = 0x25002500250025;
  v36.i64[1] = 0x25002500250025;
  v37.i64[0] = 0x13001300130013;
  v37.i64[1] = 0x13001300130013;
  v38.i64[0] = 0x9000900090009;
  v38.i64[1] = 0x9000900090009;
  v39.i64[0] = 0x2F002F002F002FLL;
  v39.i64[1] = 0x2F002F002F002FLL;
  v40.i64[0] = 0x8080808080808080;
  v40.i64[1] = 0x8080808080808080;
  do
  {
    v52 = vld4q_s8(_X9);
    _X9 += 64;
    __asm { PRFM            #0, [X9,#0x1C0] }
    v54 = vld4q_s8(_X22);
    _X22 += 64;
    __asm { PRFM            #0, [X22,#0x1C0] }
    v52.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v52.val[1]), (uint8x16_t)v54.val[1]), 1uLL);
    v52.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v52.val[2]), (uint8x16_t)v54.val[2]), 1uLL);
    v52.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v52.val[3]), (uint8x16_t)v54.val[3]), 1uLL);
    _VF = __OFSUB__(v33, 16);
    v33 -= 16;
    *v31++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v52.val[0], v35), (int16x8_t)v52.val[1], v36), (int16x8_t)v52.val[2], v37), v40);
    *v34++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v52.val[2], v35), (int16x8_t)v52.val[1], v39), (int16x8_t)v52.val[0], v38), v40);
  }
  while (!((v33 < 0) ^ _VF | (v33 == 0)));
  v43 = (uint64_t)v9 >> 1;
  memcpy((char *)a3 + v43, v45, (v8 + 1) >> 1);
  return memcpy((char *)a4 + v43, v46, (v8 + 1) >> 1);
}

void *RGB24ToUVRow_Any_NEON(const char *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  char v5;
  int v8;
  signed int v9;
  uint64_t v10;
  int8x8_t *v12;
  int8x8_t *v14;
  signed int v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  const char *v28;
  size_t v29;
  char *v31;
  char *v32;
  int8x8_t *v33;
  int v35;
  int8x8_t *v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint64_t v45;
  _BYTE v47[128];
  _BYTE v48[128];
  _OWORD __dst[7];
  __int128 v50;
  _OWORD v51[8];
  uint64_t v52;
  int8x16x3_t v53;
  int8x16x3_t v54;
  int8x16x3_t v55;
  int8x16x3_t v56;

  v5 = a5;
  v52 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v8 = a5 & 0xF;
  v9 = a5 & 0xFFFFFFF0;
  v10 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    _X8 = &a1[a2];
    v12 = a4;
    _X10 = a1;
    v14 = a3;
    v15 = a5 & 0xFFFFFFF0;
    v16.i64[0] = 0x38003800380038;
    v16.i64[1] = 0x38003800380038;
    v17.i64[0] = 0x25002500250025;
    v17.i64[1] = 0x25002500250025;
    v18.i64[0] = 0x13001300130013;
    v18.i64[1] = 0x13001300130013;
    v19.i64[0] = 0x9000900090009;
    v19.i64[1] = 0x9000900090009;
    v20.i64[0] = 0x2F002F002F002FLL;
    v20.i64[1] = 0x2F002F002F002FLL;
    v21.i64[0] = 0x8080808080808080;
    v21.i64[1] = 0x8080808080808080;
    do
    {
      v53 = vld3q_s8(_X10);
      _X10 += 48;
      __asm { PRFM            #0, [X10,#0x1C0] }
      v55 = vld3q_s8(_X8);
      _X8 += 48;
      __asm { PRFM            #0, [X8,#0x1C0] }
      v53.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v53.val[0]), (uint8x16_t)v55.val[0]), 1uLL);
      v53.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v53.val[1]), (uint8x16_t)v55.val[1]), 1uLL);
      v53.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v53.val[2]), (uint8x16_t)v55.val[2]), 1uLL);
      _VF = __OFSUB__(v15, 16);
      v15 -= 16;
      *v14++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v53.val[0], v16), (int16x8_t)v53.val[1], v17), (int16x8_t)v53.val[2], v18), v21);
      *v12++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v53.val[2], v16), (int16x8_t)v53.val[1], v20), (int16x8_t)v53.val[0], v19), v21);
    }
    while (!((v15 < 0) ^ _VF | (v15 == 0)));
  }
  v28 = &a1[3 * v9];
  v29 = (3 * v8);
  memcpy(__dst, v28, v29);
  _X22 = (const char *)v51;
  memcpy(v51, &v28[v10], v29);
  if ((v5 & 1) != 0)
  {
    v31 = (char *)__dst + v29;
    *(_WORD *)v31 = *(_WORD *)&v48[v29 + 125];
    v31[2] = *((_BYTE *)__dst + v29 - 1);
    v32 = (char *)v51 + v29;
    *(_WORD *)v32 = *(_WORD *)((char *)&v50 + v29 + 13);
    v32[2] = *((_BYTE *)v51 + v29 - 1);
  }
  v33 = (int8x8_t *)v47;
  _X9 = (const char *)__dst;
  v35 = 16;
  v36 = (int8x8_t *)v48;
  v37.i64[0] = 0x38003800380038;
  v37.i64[1] = 0x38003800380038;
  v38.i64[0] = 0x25002500250025;
  v38.i64[1] = 0x25002500250025;
  v39.i64[0] = 0x13001300130013;
  v39.i64[1] = 0x13001300130013;
  v40.i64[0] = 0x9000900090009;
  v40.i64[1] = 0x9000900090009;
  v41.i64[0] = 0x2F002F002F002FLL;
  v41.i64[1] = 0x2F002F002F002FLL;
  v42.i64[0] = 0x8080808080808080;
  v42.i64[1] = 0x8080808080808080;
  do
  {
    v54 = vld3q_s8(_X9);
    _X9 += 48;
    __asm { PRFM            #0, [X9,#0x1C0] }
    v56 = vld3q_s8(_X22);
    _X22 += 48;
    __asm { PRFM            #0, [X22,#0x1C0] }
    v54.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v54.val[0]), (uint8x16_t)v56.val[0]), 1uLL);
    v54.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v54.val[1]), (uint8x16_t)v56.val[1]), 1uLL);
    v54.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v54.val[2]), (uint8x16_t)v56.val[2]), 1uLL);
    _VF = __OFSUB__(v35, 16);
    v35 -= 16;
    *v33++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v54.val[0], v37), (int16x8_t)v54.val[1], v38), (int16x8_t)v54.val[2], v39), v42);
    *v36++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v54.val[2], v37), (int16x8_t)v54.val[1], v41), (int16x8_t)v54.val[0], v40), v42);
  }
  while (!((v35 < 0) ^ _VF | (v35 == 0)));
  v45 = (uint64_t)v9 >> 1;
  memcpy((char *)a3 + v45, v47, (v8 + 1) >> 1);
  return memcpy((char *)a4 + v45, v48, (v8 + 1) >> 1);
}

void *RAWToUVRow_Any_NEON(const char *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  char v5;
  int v8;
  signed int v9;
  uint64_t v10;
  int8x8_t *v12;
  int8x8_t *v14;
  signed int v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  const char *v28;
  size_t v29;
  char *v31;
  char *v32;
  int8x8_t *v33;
  int v35;
  int8x8_t *v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint64_t v45;
  _BYTE v47[128];
  _BYTE v48[128];
  _OWORD __dst[7];
  __int128 v50;
  _OWORD v51[8];
  uint64_t v52;
  int8x16x3_t v53;
  int8x16x3_t v54;
  int8x16x3_t v55;
  int8x16x3_t v56;

  v5 = a5;
  v52 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v50 = 0u;
  memset(v51, 0, sizeof(v51));
  v8 = a5 & 0xF;
  v9 = a5 & 0xFFFFFFF0;
  v10 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    _X8 = &a1[a2];
    v12 = a4;
    _X10 = a1;
    v14 = a3;
    v15 = a5 & 0xFFFFFFF0;
    v16.i64[0] = 0x38003800380038;
    v16.i64[1] = 0x38003800380038;
    v17.i64[0] = 0x25002500250025;
    v17.i64[1] = 0x25002500250025;
    v18.i64[0] = 0x13001300130013;
    v18.i64[1] = 0x13001300130013;
    v19.i64[0] = 0x9000900090009;
    v19.i64[1] = 0x9000900090009;
    v20.i64[0] = 0x2F002F002F002FLL;
    v20.i64[1] = 0x2F002F002F002FLL;
    v21.i64[0] = 0x8080808080808080;
    v21.i64[1] = 0x8080808080808080;
    do
    {
      v53 = vld3q_s8(_X10);
      _X10 += 48;
      __asm { PRFM            #0, [X10,#0x1C0] }
      v55 = vld3q_s8(_X8);
      _X8 += 48;
      __asm { PRFM            #0, [X8,#0x1C0] }
      v53.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v53.val[2]), (uint8x16_t)v55.val[2]), 1uLL);
      v53.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v53.val[1]), (uint8x16_t)v55.val[1]), 1uLL);
      v53.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v53.val[0]), (uint8x16_t)v55.val[0]), 1uLL);
      _VF = __OFSUB__(v15, 16);
      v15 -= 16;
      *v14++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v53.val[2], v16), (int16x8_t)v53.val[1], v17), (int16x8_t)v53.val[0], v18), v21);
      *v12++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v53.val[0], v16), (int16x8_t)v53.val[1], v20), (int16x8_t)v53.val[2], v19), v21);
    }
    while (!((v15 < 0) ^ _VF | (v15 == 0)));
  }
  v28 = &a1[3 * v9];
  v29 = (3 * v8);
  memcpy(__dst, v28, v29);
  _X22 = (const char *)v51;
  memcpy(v51, &v28[v10], v29);
  if ((v5 & 1) != 0)
  {
    v31 = (char *)__dst + v29;
    *(_WORD *)v31 = *(_WORD *)&v48[v29 + 125];
    v31[2] = *((_BYTE *)__dst + v29 - 1);
    v32 = (char *)v51 + v29;
    *(_WORD *)v32 = *(_WORD *)((char *)&v50 + v29 + 13);
    v32[2] = *((_BYTE *)v51 + v29 - 1);
  }
  v33 = (int8x8_t *)v47;
  _X9 = (const char *)__dst;
  v35 = 16;
  v36 = (int8x8_t *)v48;
  v37.i64[0] = 0x38003800380038;
  v37.i64[1] = 0x38003800380038;
  v38.i64[0] = 0x25002500250025;
  v38.i64[1] = 0x25002500250025;
  v39.i64[0] = 0x13001300130013;
  v39.i64[1] = 0x13001300130013;
  v40.i64[0] = 0x9000900090009;
  v40.i64[1] = 0x9000900090009;
  v41.i64[0] = 0x2F002F002F002FLL;
  v41.i64[1] = 0x2F002F002F002FLL;
  v42.i64[0] = 0x8080808080808080;
  v42.i64[1] = 0x8080808080808080;
  do
  {
    v54 = vld3q_s8(_X9);
    _X9 += 48;
    __asm { PRFM            #0, [X9,#0x1C0] }
    v56 = vld3q_s8(_X22);
    _X22 += 48;
    __asm { PRFM            #0, [X22,#0x1C0] }
    v54.val[2] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v54.val[2]), (uint8x16_t)v56.val[2]), 1uLL);
    v54.val[1] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v54.val[1]), (uint8x16_t)v56.val[1]), 1uLL);
    v54.val[0] = (int8x16_t)vrshrq_n_u16(vpadalq_u8(vpaddlq_u8((uint8x16_t)v54.val[0]), (uint8x16_t)v56.val[0]), 1uLL);
    _VF = __OFSUB__(v35, 16);
    v35 -= 16;
    *v33++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v54.val[2], v37), (int16x8_t)v54.val[1], v38), (int16x8_t)v54.val[0], v39), v42);
    *v36++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16((int16x8_t)v54.val[0], v37), (int16x8_t)v54.val[1], v41), (int16x8_t)v54.val[2], v40), v42);
  }
  while (!((v35 < 0) ^ _VF | (v35 == 0)));
  v45 = (uint64_t)v9 >> 1;
  memcpy((char *)a3 + v45, v47, (v8 + 1) >> 1);
  return memcpy((char *)a4 + v45, v48, (v8 + 1) >> 1);
}

void *RGB565ToUVRow_Any_NEON(_OWORD *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  char v5;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  _OWORD *v11;
  int8x8_t *v12;
  _OWORD *v13;
  int8x8_t *v14;
  signed int v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v23;
  int8x8_t v24;
  int8x16_t v25;
  int64x2_t v26;
  uint16x4_t v27;
  uint16x4_t v33;
  uint16x4_t v34;
  int16x8_t v35;
  int8x8_t v36;
  int8x16_t v37;
  int64x2_t v38;
  uint16x4_t v39;
  uint16x4_t v40;
  uint16x4_t v41;
  int16x8_t v43;
  int8x8_t v44;
  int8x16_t v45;
  int64x2_t v46;
  uint16x8_t v47;
  uint16x8_t v49;
  uint16x8_t v50;
  int16x8_t v51;
  int8x8_t v52;
  int8x16_t v53;
  int64x2_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  char *v58;
  size_t v59;
  int16x8_t *v60;
  int8x8_t *v61;
  int16x8_t *v62;
  int v63;
  int8x8_t *v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v72;
  int8x8_t v73;
  int8x16_t v74;
  int64x2_t v75;
  uint16x4_t v76;
  uint16x4_t v78;
  uint16x4_t v79;
  int16x8_t v80;
  int8x8_t v81;
  int8x16_t v82;
  int64x2_t v83;
  uint16x4_t v84;
  uint16x4_t v85;
  uint16x4_t v86;
  int16x8_t v88;
  int8x8_t v89;
  int8x16_t v90;
  int64x2_t v91;
  uint16x8_t v92;
  uint16x8_t v94;
  uint16x8_t v95;
  int16x8_t v96;
  int8x8_t v97;
  int8x16_t v98;
  int64x2_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int16x8_t v102;
  uint64_t v103;
  _BYTE v105[128];
  _BYTE v106[128];
  _OWORD __dst[7];
  __int128 v108;
  _OWORD v109[8];
  uint64_t v110;

  v5 = a5;
  v110 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v108 = 0u;
  memset(v109, 0, sizeof(v109));
  v8 = a5 & 0xF;
  v9 = a5 & 0xFFFFFFF0;
  v10 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    v11 = (_OWORD *)((char *)a1 + a2);
    v12 = a4;
    v13 = a1;
    v14 = a3;
    v15 = a5 & 0xFFFFFFF0;
    v16.i64[0] = 0x38003800380038;
    v16.i64[1] = 0x38003800380038;
    v17.i64[0] = 0x25002500250025;
    v17.i64[1] = 0x25002500250025;
    v18.i64[0] = 0x13001300130013;
    v18.i64[1] = 0x13001300130013;
    v19.i64[0] = 0x9000900090009;
    v19.i64[1] = 0x9000900090009;
    v20.i64[0] = 0x2F002F002F002FLL;
    v20.i64[1] = 0x2F002F002F002FLL;
    v21.i64[0] = 0x8080808080808080;
    v21.i64[1] = 0x8080808080808080;
    do
    {
      v23 = *(int16x8_t *)v13;
      _X10 = v13 + 1;
      v24 = vshl_n_s8(vshrn_n_s16(v23, 5uLL), 2uLL);
      v25 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v23), (int16x8_t)vshrq_n_u16((uint16x8_t)v23, 0xBuLL)), 3uLL);
      v26 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v25, 5uLL), v25);
      v27 = vpaddl_u8(*(uint8x8_t *)v26.i8);
      __asm { PRFM            #0, [X10,#0x1C0] }
      v33 = vpaddl_u8((uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v24, 6uLL), v24));
      v34 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v26, 1));
      v35 = *(int16x8_t *)_X10;
      v13 = _X10 + 1;
      v36 = vshl_n_s8(vshrn_n_s16(v35, 5uLL), 2uLL);
      v37 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v35), (int16x8_t)vshrq_n_u16((uint16x8_t)v35, 0xBuLL)), 3uLL);
      v38 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v37, 5uLL), v37);
      v39 = vpaddl_u8(*(uint8x8_t *)v38.i8);
      v40 = vpaddl_u8((uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v36, 6uLL), v36));
      v41 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v38, 1));
      v43 = *(int16x8_t *)v11;
      _X8 = v11 + 1;
      v44 = vshl_n_s8(vshrn_n_s16(v43, 5uLL), 2uLL);
      v45 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v43), (int16x8_t)vshrq_n_u16((uint16x8_t)v43, 0xBuLL)), 3uLL);
      v46 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v45, 5uLL), v45);
      *(uint16x4_t *)v47.i8 = vpadal_u8(v27, *(uint8x8_t *)v46.i8);
      __asm { PRFM            #0, [X8,#0x1C0] }
      *(uint16x4_t *)v49.i8 = vpadal_u8(v33, (uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v44, 6uLL), v44));
      *(uint16x4_t *)v50.i8 = vpadal_u8(v34, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v46, 1));
      v51 = *(int16x8_t *)_X8;
      v11 = _X8 + 1;
      v52 = vshl_n_s8(vshrn_n_s16(v51, 5uLL), 2uLL);
      v53 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v51), (int16x8_t)vshrq_n_u16((uint16x8_t)v51, 0xBuLL)), 3uLL);
      v54 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v53, 5uLL), v53);
      v47.u64[1] = (unint64_t)vpadal_u8(v39, *(uint8x8_t *)v54.i8);
      v49.u64[1] = (unint64_t)vpadal_u8(v40, (uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v52, 6uLL), v52));
      v50.u64[1] = (unint64_t)vpadal_u8(v41, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v54, 1));
      v55 = (int16x8_t)vrshrq_n_u16(v47, 1uLL);
      v56 = (int16x8_t)vrshrq_n_u16(v49, 1uLL);
      v57 = (int16x8_t)vrshrq_n_u16(v50, 1uLL);
      _VF = __OFSUB__(v15, 16);
      v15 -= 16;
      *v14++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v55, v16), v56, v17), v57, v18), v21);
      *v12++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v57, v16), v56, v20), v55, v19), v21);
    }
    while (!((v15 < 0) ^ _VF | (v15 == 0)));
  }
  v58 = (char *)a1 + 2 * v9;
  v59 = 2 * (a5 & 0xF);
  memcpy(__dst, v58, v59);
  v60 = (int16x8_t *)v109;
  memcpy(v109, &v58[v10], 2 * v8);
  if ((v5 & 1) != 0)
  {
    *(_WORD *)((char *)__dst + v59) = *(_WORD *)&v106[v59 + 126];
    *(_WORD *)((char *)v109 + v59) = *(_WORD *)((char *)&v108 + v59 + 14);
  }
  v61 = (int8x8_t *)v105;
  v62 = (int16x8_t *)__dst;
  v63 = 16;
  v64 = (int8x8_t *)v106;
  v65.i64[0] = 0x38003800380038;
  v65.i64[1] = 0x38003800380038;
  v66.i64[0] = 0x25002500250025;
  v66.i64[1] = 0x25002500250025;
  v67.i64[0] = 0x13001300130013;
  v67.i64[1] = 0x13001300130013;
  v68.i64[0] = 0x9000900090009;
  v68.i64[1] = 0x9000900090009;
  v69.i64[0] = 0x2F002F002F002FLL;
  v69.i64[1] = 0x2F002F002F002FLL;
  v70.i64[0] = 0x8080808080808080;
  v70.i64[1] = 0x8080808080808080;
  do
  {
    v72 = *v62;
    _X9 = v62 + 1;
    v73 = vshl_n_s8(vshrn_n_s16(v72, 5uLL), 2uLL);
    v74 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v72), (int16x8_t)vshrq_n_u16((uint16x8_t)v72, 0xBuLL)), 3uLL);
    v75 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v74, 5uLL), v74);
    v76 = vpaddl_u8(*(uint8x8_t *)v75.i8);
    __asm { PRFM            #0, [X9,#0x1C0] }
    v78 = vpaddl_u8((uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v73, 6uLL), v73));
    v79 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v75, 1));
    v80 = *_X9;
    v62 = _X9 + 1;
    v81 = vshl_n_s8(vshrn_n_s16(v80, 5uLL), 2uLL);
    v82 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v80), (int16x8_t)vshrq_n_u16((uint16x8_t)v80, 0xBuLL)), 3uLL);
    v83 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v82, 5uLL), v82);
    v84 = vpaddl_u8(*(uint8x8_t *)v83.i8);
    v85 = vpaddl_u8((uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v81, 6uLL), v81));
    v86 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v83, 1));
    v88 = *v60;
    _X22 = v60 + 1;
    v89 = vshl_n_s8(vshrn_n_s16(v88, 5uLL), 2uLL);
    v90 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v88), (int16x8_t)vshrq_n_u16((uint16x8_t)v88, 0xBuLL)), 3uLL);
    v91 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v90, 5uLL), v90);
    *(uint16x4_t *)v92.i8 = vpadal_u8(v76, *(uint8x8_t *)v91.i8);
    __asm { PRFM            #0, [X22,#0x1C0] }
    *(uint16x4_t *)v94.i8 = vpadal_u8(v78, (uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v89, 6uLL), v89));
    *(uint16x4_t *)v95.i8 = vpadal_u8(v79, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v91, 1));
    v96 = *_X22;
    v60 = _X22 + 1;
    v97 = vshl_n_s8(vshrn_n_s16(v96, 5uLL), 2uLL);
    v98 = vshlq_n_s8(vmovn_hight_s16(vmovn_s16(v96), (int16x8_t)vshrq_n_u16((uint16x8_t)v96, 0xBuLL)), 3uLL);
    v99 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v98, 5uLL), v98);
    v92.u64[1] = (unint64_t)vpadal_u8(v84, *(uint8x8_t *)v99.i8);
    v94.u64[1] = (unint64_t)vpadal_u8(v85, (uint8x8_t)vorr_s8((int8x8_t)vshr_n_u8((uint8x8_t)v97, 6uLL), v97));
    v95.u64[1] = (unint64_t)vpadal_u8(v86, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v99, 1));
    v100 = (int16x8_t)vrshrq_n_u16(v92, 1uLL);
    v101 = (int16x8_t)vrshrq_n_u16(v94, 1uLL);
    v102 = (int16x8_t)vrshrq_n_u16(v95, 1uLL);
    _VF = __OFSUB__(v63, 16);
    v63 -= 16;
    *v61++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v100, v65), v101, v66), v102, v67), v70);
    *v64++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v102, v65), v101, v69), v100, v68), v70);
  }
  while (!((v63 < 0) ^ _VF | (v63 == 0)));
  v103 = (uint64_t)v9 >> 1;
  memcpy((char *)a3 + v103, v105, (v8 + 1) >> 1);
  return memcpy((char *)a4 + v103, v106, (v8 + 1) >> 1);
}

void *ARGB1555ToUVRow_Any_NEON(_OWORD *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5, double a6, double a7, double a8, int16x8_t a9)
{
  char v9;
  unsigned int v12;
  signed int v13;
  uint64_t v14;
  _OWORD *v15;
  int8x8_t *v16;
  _OWORD *v17;
  int8x8_t *v18;
  signed int v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v27;
  int8x16_t v28;
  int64x2_t v29;
  uint16x4_t v30;
  uint16x4_t v36;
  uint16x4_t v37;
  int16x8_t v38;
  int8x16_t v39;
  int64x2_t v40;
  uint16x4_t v41;
  uint16x4_t v42;
  uint16x4_t v43;
  int16x8_t v45;
  int8x16_t v46;
  int64x2_t v47;
  uint16x8_t v48;
  uint16x8_t v50;
  uint16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  int64x2_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  char *v58;
  size_t v59;
  int16x8_t *v60;
  int8x16_t v61;
  int8x8_t *v62;
  int16x8_t *v63;
  int v64;
  int8x8_t *v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v73;
  int8x16_t v74;
  int64x2_t v75;
  uint16x4_t v76;
  uint16x4_t v78;
  uint16x4_t v79;
  int16x8_t v80;
  int8x16_t v81;
  int64x2_t v82;
  uint16x4_t v83;
  uint16x4_t v84;
  uint16x4_t v85;
  int16x8_t v87;
  int8x16_t v88;
  int64x2_t v89;
  uint16x8_t v90;
  uint16x8_t v92;
  uint16x8_t v93;
  int16x8_t v94;
  int8x16_t v95;
  int64x2_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  uint64_t v100;
  _BYTE v102[128];
  _BYTE v103[128];
  _OWORD __dst[7];
  __int128 v105;
  _OWORD v106[8];
  uint64_t v107;

  v9 = a5;
  v107 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v105 = 0u;
  memset(v106, 0, sizeof(v106));
  v12 = a5 & 0xF;
  v13 = a5 & 0xFFFFFFF0;
  v14 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    v15 = (_OWORD *)((char *)a1 + a2);
    v16 = a4;
    v17 = a1;
    v18 = a3;
    v19 = a5 & 0xFFFFFFF0;
    v20.i64[0] = 0x38003800380038;
    v20.i64[1] = 0x38003800380038;
    v21.i64[0] = 0x25002500250025;
    v21.i64[1] = 0x25002500250025;
    v22.i64[0] = 0x13001300130013;
    v22.i64[1] = 0x13001300130013;
    v23.i64[0] = 0x9000900090009;
    v23.i64[1] = 0x9000900090009;
    v24.i64[0] = 0x2F002F002F002FLL;
    v24.i64[1] = 0x2F002F002F002FLL;
    v25.i64[0] = 0x8080808080808080;
    v25.i64[1] = 0x8080808080808080;
    do
    {
      v27 = *(int16x8_t *)v17;
      _X10 = v17 + 1;
      *(int8x8_t *)a9.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v27, 0xAuLL), 3uLL));
      v28 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v27), v27, 5uLL), 3uLL);
      v29 = (int64x2_t)vorrq_s8(v28, (int8x16_t)vshrq_n_u8((uint8x16_t)v28, 5uLL));
      v30 = vpaddl_u8(*(uint8x8_t *)v29.i8);
      __asm { PRFM            #0, [X10,#0x1C0] }
      v36 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v29, 1));
      v37 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)a9, 5uLL), (int8x16_t)a9));
      v38 = *(int16x8_t *)_X10;
      v17 = _X10 + 1;
      *(int8x8_t *)a9.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v38, 0xAuLL), 3uLL));
      v39 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v38), v38, 5uLL), 3uLL);
      v40 = (int64x2_t)vorrq_s8(v39, (int8x16_t)vshrq_n_u8((uint8x16_t)v39, 5uLL));
      v41 = vpaddl_u8(*(uint8x8_t *)v40.i8);
      v42 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v40, 1));
      v43 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)a9, 5uLL), (int8x16_t)a9));
      v45 = *(int16x8_t *)v15;
      _X8 = v15 + 1;
      *(int8x8_t *)a9.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v45, 0xAuLL), 3uLL));
      v46 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v45), v45, 5uLL), 3uLL);
      v47 = (int64x2_t)vorrq_s8(v46, (int8x16_t)vshrq_n_u8((uint8x16_t)v46, 5uLL));
      *(uint16x4_t *)v48.i8 = vpadal_u8(v30, *(uint8x8_t *)v47.i8);
      __asm { PRFM            #0, [X8,#0x1C0] }
      *(uint16x4_t *)v50.i8 = vpadal_u8(v36, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v47, 1));
      *(uint16x4_t *)v51.i8 = vpadal_u8(v37, (uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)a9, 5uLL), (int8x16_t)a9));
      v52 = *(int16x8_t *)_X8;
      v15 = _X8 + 1;
      *(int8x8_t *)a9.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v52, 0xAuLL), 3uLL));
      v53 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v52), v52, 5uLL), 3uLL);
      v54 = (int64x2_t)vorrq_s8(v53, (int8x16_t)vshrq_n_u8((uint8x16_t)v53, 5uLL));
      v48.u64[1] = (unint64_t)vpadal_u8(v41, *(uint8x8_t *)v54.i8);
      v50.u64[1] = (unint64_t)vpadal_u8(v42, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v54, 1));
      v51.u64[1] = (unint64_t)vpadal_u8(v43, (uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)a9, 5uLL), (int8x16_t)a9));
      v55 = (int16x8_t)vrshrq_n_u16(v48, 1uLL);
      v56 = (int16x8_t)vrshrq_n_u16(v50, 1uLL);
      v57 = (int16x8_t)vrshrq_n_u16(v51, 1uLL);
      _VF = __OFSUB__(v19, 16);
      v19 -= 16;
      a9 = vmlsq_s16(vmlsq_s16(vmulq_s16(v55, v20), v56, v21), v57, v22);
      *v18++ = vaddhn_s16(a9, v25);
      *v16++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v57, v20), v56, v24), v55, v23), v25);
    }
    while (!((v19 < 0) ^ _VF | (v19 == 0)));
  }
  v58 = (char *)a1 + 2 * v13;
  v59 = 2 * (a5 & 0xF);
  memcpy(__dst, v58, v59);
  v60 = (int16x8_t *)v106;
  memcpy(v106, &v58[v14], 2 * v12);
  if ((v9 & 1) != 0)
  {
    *(_WORD *)((char *)__dst + v59) = *(_WORD *)&v103[v59 + 126];
    *(_WORD *)((char *)v106 + v59) = *(_WORD *)((char *)&v105 + v59 + 14);
  }
  v62 = (int8x8_t *)v102;
  v63 = (int16x8_t *)__dst;
  v64 = 16;
  v65 = (int8x8_t *)v103;
  v66.i64[0] = 0x38003800380038;
  v66.i64[1] = 0x38003800380038;
  v67.i64[0] = 0x25002500250025;
  v67.i64[1] = 0x25002500250025;
  v68.i64[0] = 0x13001300130013;
  v68.i64[1] = 0x13001300130013;
  v69.i64[0] = 0x9000900090009;
  v69.i64[1] = 0x9000900090009;
  v70.i64[0] = 0x2F002F002F002FLL;
  v70.i64[1] = 0x2F002F002F002FLL;
  v71.i64[0] = 0x8080808080808080;
  v71.i64[1] = 0x8080808080808080;
  do
  {
    v73 = *v63;
    _X9 = v63 + 1;
    *(int8x8_t *)v61.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v73, 0xAuLL), 3uLL));
    v74 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v73), v73, 5uLL), 3uLL);
    v75 = (int64x2_t)vorrq_s8(v74, (int8x16_t)vshrq_n_u8((uint8x16_t)v74, 5uLL));
    v76 = vpaddl_u8(*(uint8x8_t *)v75.i8);
    __asm { PRFM            #0, [X9,#0x1C0] }
    v78 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v75, 1));
    v79 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v61, 5uLL), v61));
    v80 = *_X9;
    v63 = _X9 + 1;
    *(int8x8_t *)v61.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v80, 0xAuLL), 3uLL));
    v81 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v80), v80, 5uLL), 3uLL);
    v82 = (int64x2_t)vorrq_s8(v81, (int8x16_t)vshrq_n_u8((uint8x16_t)v81, 5uLL));
    v83 = vpaddl_u8(*(uint8x8_t *)v82.i8);
    v84 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v82, 1));
    v85 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v61, 5uLL), v61));
    v87 = *v60;
    _X22 = v60 + 1;
    *(int8x8_t *)v61.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v87, 0xAuLL), 3uLL));
    v88 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v87), v87, 5uLL), 3uLL);
    v89 = (int64x2_t)vorrq_s8(v88, (int8x16_t)vshrq_n_u8((uint8x16_t)v88, 5uLL));
    *(uint16x4_t *)v90.i8 = vpadal_u8(v76, *(uint8x8_t *)v89.i8);
    __asm { PRFM            #0, [X22,#0x1C0] }
    *(uint16x4_t *)v92.i8 = vpadal_u8(v78, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v89, 1));
    *(uint16x4_t *)v93.i8 = vpadal_u8(v79, (uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v61, 5uLL), v61));
    v94 = *_X22;
    v60 = _X22 + 1;
    *(int8x8_t *)v61.i8 = vmovn_s16(vshlq_n_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v94, 0xAuLL), 3uLL));
    v95 = vshlq_n_s8(vshrn_high_n_s16(vmovn_s16(v94), v94, 5uLL), 3uLL);
    v96 = (int64x2_t)vorrq_s8(v95, (int8x16_t)vshrq_n_u8((uint8x16_t)v95, 5uLL));
    v90.u64[1] = (unint64_t)vpadal_u8(v83, *(uint8x8_t *)v96.i8);
    v92.u64[1] = (unint64_t)vpadal_u8(v84, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v96, 1));
    v93.u64[1] = (unint64_t)vpadal_u8(v85, (uint8x8_t)*(_OWORD *)&vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v61, 5uLL), v61));
    v97 = (int16x8_t)vrshrq_n_u16(v90, 1uLL);
    v98 = (int16x8_t)vrshrq_n_u16(v92, 1uLL);
    v99 = (int16x8_t)vrshrq_n_u16(v93, 1uLL);
    _VF = __OFSUB__(v64, 16);
    v64 -= 16;
    v61 = (int8x16_t)vmlsq_s16(vmlsq_s16(vmulq_s16(v97, v66), v98, v67), v99, v68);
    *v62++ = vaddhn_s16((int16x8_t)v61, v71);
    *v65++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v99, v66), v98, v70), v97, v69), v71);
  }
  while (!((v64 < 0) ^ _VF | (v64 == 0)));
  v100 = (uint64_t)v13 >> 1;
  memcpy((char *)a3 + v100, v102, (v12 + 1) >> 1);
  return memcpy((char *)a4 + v100, v103, (v12 + 1) >> 1);
}

void *ARGB4444ToUVRow_Any_NEON(_OWORD *a1, int a2, int8x8_t *a3, int8x8_t *a4, int a5)
{
  char v5;
  unsigned int v8;
  signed int v9;
  uint64_t v10;
  _OWORD *v11;
  int8x8_t *v12;
  _OWORD *v13;
  int8x8_t *v14;
  signed int v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int16x8_t v19;
  int16x8_t v20;
  int16x8_t v21;
  int16x8_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int64x2_t v27;
  uint16x4_t v28;
  uint16x4_t v34;
  uint16x4_t v35;
  int16x8_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int64x2_t v40;
  uint16x4_t v41;
  uint16x4_t v42;
  uint16x4_t v43;
  int16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int64x2_t v49;
  uint16x8_t v50;
  uint16x8_t v52;
  uint16x8_t v53;
  int16x8_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int64x2_t v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  char *v62;
  size_t v63;
  int16x8_t *v64;
  int8x8_t *v65;
  int16x8_t *v66;
  int v67;
  int8x8_t *v68;
  int16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int64x2_t v80;
  uint16x4_t v81;
  uint16x4_t v83;
  uint16x4_t v84;
  int16x8_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int64x2_t v89;
  uint16x4_t v90;
  uint16x4_t v91;
  uint16x4_t v92;
  int16x8_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  int64x2_t v98;
  uint16x8_t v99;
  uint16x8_t v101;
  uint16x8_t v102;
  int16x8_t v103;
  int8x16_t v104;
  int8x16_t v105;
  int8x16_t v106;
  int64x2_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  uint64_t v111;
  _BYTE v113[128];
  _BYTE v114[128];
  _OWORD __dst[7];
  __int128 v116;
  _OWORD v117[8];
  uint64_t v118;

  v5 = a5;
  v118 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  v116 = 0u;
  memset(v117, 0, sizeof(v117));
  v8 = a5 & 0xF;
  v9 = a5 & 0xFFFFFFF0;
  v10 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    v11 = (_OWORD *)((char *)a1 + a2);
    v12 = a4;
    v13 = a1;
    v14 = a3;
    v15 = a5 & 0xFFFFFFF0;
    v16.i64[0] = 0x38003800380038;
    v16.i64[1] = 0x38003800380038;
    v17.i64[0] = 0x25002500250025;
    v17.i64[1] = 0x25002500250025;
    v18.i64[0] = 0x13001300130013;
    v18.i64[1] = 0x13001300130013;
    v19.i64[0] = 0x9000900090009;
    v19.i64[1] = 0x9000900090009;
    v20.i64[0] = 0x2F002F002F002FLL;
    v20.i64[1] = 0x2F002F002F002FLL;
    v21.i64[0] = 0x8080808080808080;
    v21.i64[1] = 0x8080808080808080;
    do
    {
      v23 = *(int16x8_t *)v13;
      _X10 = v13 + 1;
      v24 = vmovn_hight_s16(vshrn_n_s16(v23, 8uLL), v23);
      v25 = vshlq_n_s8(v24, 4uLL);
      v26 = (int8x16_t)vshrq_n_u8((uint8x16_t)v24, 4uLL);
      v27 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v25, 4uLL), v25);
      v28 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v27, 1));
      __asm { PRFM            #0, [X10,#0x1C0] }
      v34 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v26, 4uLL), v26), 1));
      v35 = vpaddl_u8(*(uint8x8_t *)v27.i8);
      v36 = *(int16x8_t *)_X10;
      v13 = _X10 + 1;
      v37 = vmovn_hight_s16(vshrn_n_s16(v36, 8uLL), v36);
      v38 = vshlq_n_s8(v37, 4uLL);
      v39 = (int8x16_t)vshrq_n_u8((uint8x16_t)v37, 4uLL);
      v40 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v38, 4uLL), v38);
      v41 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v40, 1));
      v42 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v39, 4uLL), v39), 1));
      v43 = vpaddl_u8(*(uint8x8_t *)v40.i8);
      v45 = *(int16x8_t *)v11;
      _X8 = v11 + 1;
      v46 = vmovn_hight_s16(vshrn_n_s16(v45, 8uLL), v45);
      v47 = vshlq_n_s8(v46, 4uLL);
      v48 = (int8x16_t)vshrq_n_u8((uint8x16_t)v46, 4uLL);
      v49 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v47, 4uLL), v47);
      *(uint16x4_t *)v50.i8 = vpadal_u8(v28, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v49, 1));
      __asm { PRFM            #0, [X8,#0x1C0] }
      *(uint16x4_t *)v52.i8 = vpadal_u8(v34, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v48, 4uLL), v48), 1));
      *(uint16x4_t *)v53.i8 = vpadal_u8(v35, *(uint8x8_t *)v49.i8);
      v54 = *(int16x8_t *)_X8;
      v11 = _X8 + 1;
      v55 = vmovn_hight_s16(vshrn_n_s16(v54, 8uLL), v54);
      v56 = vshlq_n_s8(v55, 4uLL);
      v57 = (int8x16_t)vshrq_n_u8((uint8x16_t)v55, 4uLL);
      v58 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v56, 4uLL), v56);
      v50.u64[1] = (unint64_t)vpadal_u8(v41, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v58, 1));
      v52.u64[1] = (unint64_t)vpadal_u8(v42, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v57, 4uLL), v57), 1));
      v53.u64[1] = (unint64_t)vpadal_u8(v43, *(uint8x8_t *)v58.i8);
      v59 = (int16x8_t)vrshrq_n_u16(v50, 1uLL);
      v60 = (int16x8_t)vrshrq_n_u16(v52, 1uLL);
      v61 = (int16x8_t)vrshrq_n_u16(v53, 1uLL);
      _VF = __OFSUB__(v15, 16);
      v15 -= 16;
      *v14++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v59, v16), v60, v17), v61, v18), v21);
      *v12++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v61, v16), v60, v20), v59, v19), v21);
    }
    while (!((v15 < 0) ^ _VF | (v15 == 0)));
  }
  v62 = (char *)a1 + 2 * v9;
  v63 = 2 * (a5 & 0xF);
  memcpy(__dst, v62, v63);
  v64 = (int16x8_t *)v117;
  memcpy(v117, &v62[v10], 2 * v8);
  if ((v5 & 1) != 0)
  {
    *(_WORD *)((char *)__dst + v63) = *(_WORD *)&v114[v63 + 126];
    *(_WORD *)((char *)v117 + v63) = *(_WORD *)((char *)&v116 + v63 + 14);
  }
  v65 = (int8x8_t *)v113;
  v66 = (int16x8_t *)__dst;
  v67 = 16;
  v68 = (int8x8_t *)v114;
  v69.i64[0] = 0x38003800380038;
  v69.i64[1] = 0x38003800380038;
  v70.i64[0] = 0x25002500250025;
  v70.i64[1] = 0x25002500250025;
  v71.i64[0] = 0x13001300130013;
  v71.i64[1] = 0x13001300130013;
  v72.i64[0] = 0x9000900090009;
  v72.i64[1] = 0x9000900090009;
  v73.i64[0] = 0x2F002F002F002FLL;
  v73.i64[1] = 0x2F002F002F002FLL;
  v74.i64[0] = 0x8080808080808080;
  v74.i64[1] = 0x8080808080808080;
  do
  {
    v76 = *v66;
    _X9 = v66 + 1;
    v77 = vmovn_hight_s16(vshrn_n_s16(v76, 8uLL), v76);
    v78 = vshlq_n_s8(v77, 4uLL);
    v79 = (int8x16_t)vshrq_n_u8((uint8x16_t)v77, 4uLL);
    v80 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v78, 4uLL), v78);
    v81 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v80, 1));
    __asm { PRFM            #0, [X9,#0x1C0] }
    v83 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v79, 4uLL), v79), 1));
    v84 = vpaddl_u8(*(uint8x8_t *)v80.i8);
    v85 = *_X9;
    v66 = _X9 + 1;
    v86 = vmovn_hight_s16(vshrn_n_s16(v85, 8uLL), v85);
    v87 = vshlq_n_s8(v86, 4uLL);
    v88 = (int8x16_t)vshrq_n_u8((uint8x16_t)v86, 4uLL);
    v89 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v87, 4uLL), v87);
    v90 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v89, 1));
    v91 = vpaddl_u8((uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v88, 4uLL), v88), 1));
    v92 = vpaddl_u8(*(uint8x8_t *)v89.i8);
    v94 = *v64;
    _X22 = v64 + 1;
    v95 = vmovn_hight_s16(vshrn_n_s16(v94, 8uLL), v94);
    v96 = vshlq_n_s8(v95, 4uLL);
    v97 = (int8x16_t)vshrq_n_u8((uint8x16_t)v95, 4uLL);
    v98 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v96, 4uLL), v96);
    *(uint16x4_t *)v99.i8 = vpadal_u8(v81, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v98, 1));
    __asm { PRFM            #0, [X22,#0x1C0] }
    *(uint16x4_t *)v101.i8 = vpadal_u8(v83, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v97, 4uLL), v97), 1));
    *(uint16x4_t *)v102.i8 = vpadal_u8(v84, *(uint8x8_t *)v98.i8);
    v103 = *_X22;
    v64 = _X22 + 1;
    v104 = vmovn_hight_s16(vshrn_n_s16(v103, 8uLL), v103);
    v105 = vshlq_n_s8(v104, 4uLL);
    v106 = (int8x16_t)vshrq_n_u8((uint8x16_t)v104, 4uLL);
    v107 = (int64x2_t)vorrq_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v105, 4uLL), v105);
    v99.u64[1] = (unint64_t)vpadal_u8(v90, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64(v107, 1));
    v101.u64[1] = (unint64_t)vpadal_u8(v91, (uint8x8_t)*(_OWORD *)&vdupq_laneq_s64((int64x2_t)vorrq_s8(vshlq_n_s8(v106, 4uLL), v106), 1));
    v102.u64[1] = (unint64_t)vpadal_u8(v92, *(uint8x8_t *)v107.i8);
    v108 = (int16x8_t)vrshrq_n_u16(v99, 1uLL);
    v109 = (int16x8_t)vrshrq_n_u16(v101, 1uLL);
    v110 = (int16x8_t)vrshrq_n_u16(v102, 1uLL);
    _VF = __OFSUB__(v67, 16);
    v67 -= 16;
    *v65++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v108, v69), v109, v70), v110, v71), v74);
    *v68++ = vaddhn_s16(vmlsq_s16(vmlsq_s16(vmulq_s16(v110, v69), v109, v73), v108, v72), v74);
  }
  while (!((v67 < 0) ^ _VF | (v67 == 0)));
  v111 = (uint64_t)v9 >> 1;
  memcpy((char *)a3 + v111, v113, (v8 + 1) >> 1);
  return memcpy((char *)a4 + v111, v114, (v8 + 1) >> 1);
}

void *YUY2ToUVRow_Any_NEON(const char *a1, int a2, uint8x8_t *a3, uint8x8_t *a4, int a5)
{
  signed int v7;
  uint64_t v8;
  const char *v9;
  uint8x8_t *v10;
  unsigned int v11;
  uint8x8_t *v12;
  const char *v19;
  size_t v20;
  const char *v22;
  uint8x8_t *v23;
  int v24;
  uint8x8_t *v25;
  uint64_t v27;
  _BYTE v29[128];
  _BYTE v30[128];
  _OWORD __dst[8];
  _OWORD v32[8];
  uint64_t v33;
  int8x8x4_t v34;
  int8x8x4_t v35;
  int8x8x4_t v36;
  int8x8x4_t v37;

  v33 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  memset(v32, 0, sizeof(v32));
  v7 = a5 & 0xFFFFFFF0;
  v8 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    v9 = &a1[a2];
    v10 = a3;
    v11 = a5 & 0xFFFFFFF0;
    v12 = a4;
    _X12 = a1;
    do
    {
      v34 = vld4_s8(_X12);
      _X12 += 32;
      v11 -= 16;
      v36 = vld4_s8(v9);
      v9 += 32;
      __asm { PRFM            #0, [X12,#0x1C0] }
      *v10++ = vrhadd_u8((uint8x8_t)v34.val[1], (uint8x8_t)v36.val[1]);
      *v12++ = vrhadd_u8((uint8x8_t)v34.val[3], (uint8x8_t)v36.val[3]);
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v19 = &a1[2 * v7];
  v20 = ((a5 & 0xFu) + 1) >> 1;
  _X27 = (const char *)__dst;
  memcpy(__dst, v19, (4 * v20));
  v22 = (const char *)v32;
  memcpy(v32, &v19[v8], (4 * v20));
  v23 = (uint8x8_t *)v29;
  v24 = 16;
  v25 = (uint8x8_t *)v30;
  do
  {
    v35 = vld4_s8(_X27);
    _X27 += 32;
    v24 -= 16;
    v37 = vld4_s8(v22);
    v22 += 32;
    __asm { PRFM            #0, [X27,#0x1C0] }
    *v23++ = vrhadd_u8((uint8x8_t)v35.val[1], (uint8x8_t)v37.val[1]);
    *v25++ = vrhadd_u8((uint8x8_t)v35.val[3], (uint8x8_t)v37.val[3]);
  }
  while (!(_NF ^ _VF | _ZF));
  v27 = (uint64_t)v7 >> 1;
  memcpy((char *)a3 + v27, v29, v20);
  return memcpy((char *)a4 + v27, v30, v20);
}

void *UYVYToUVRow_Any_NEON(const char *a1, int a2, uint8x8_t *a3, uint8x8_t *a4, int a5)
{
  signed int v7;
  uint64_t v8;
  const char *v9;
  uint8x8_t *v10;
  unsigned int v11;
  uint8x8_t *v12;
  const char *v19;
  size_t v20;
  const char *v22;
  uint8x8_t *v23;
  int v24;
  uint8x8_t *v25;
  uint64_t v27;
  _BYTE v29[128];
  _BYTE v30[128];
  _OWORD __dst[8];
  _OWORD v32[8];
  uint64_t v33;
  int8x8x4_t v34;
  int8x8x4_t v35;
  int8x8x4_t v36;
  int8x8x4_t v37;

  v33 = *MEMORY[0x24BDAC8D0];
  memset(__dst, 0, sizeof(__dst));
  memset(v32, 0, sizeof(v32));
  v7 = a5 & 0xFFFFFFF0;
  v8 = a2;
  if ((int)(a5 & 0xFFFFFFF0) >= 1)
  {
    v9 = &a1[a2];
    v10 = a3;
    v11 = a5 & 0xFFFFFFF0;
    v12 = a4;
    _X12 = a1;
    do
    {
      v34 = vld4_s8(_X12);
      _X12 += 32;
      v11 -= 16;
      v36 = vld4_s8(v9);
      v9 += 32;
      __asm { PRFM            #0, [X12,#0x1C0] }
      *v10++ = vrhadd_u8((uint8x8_t)v34.val[0], (uint8x8_t)v36.val[0]);
      *v12++ = vrhadd_u8((uint8x8_t)v34.val[2], (uint8x8_t)v36.val[2]);
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v19 = &a1[2 * v7];
  v20 = ((a5 & 0xFu) + 1) >> 1;
  _X27 = (const char *)__dst;
  memcpy(__dst, v19, (4 * v20));
  v22 = (const char *)v32;
  memcpy(v32, &v19[v8], (4 * v20));
  v23 = (uint8x8_t *)v29;
  v24 = 16;
  v25 = (uint8x8_t *)v30;
  do
  {
    v35 = vld4_s8(_X27);
    _X27 += 32;
    v24 -= 16;
    v37 = vld4_s8(v22);
    v22 += 32;
    __asm { PRFM            #0, [X27,#0x1C0] }
    *v23++ = vrhadd_u8((uint8x8_t)v35.val[0], (uint8x8_t)v37.val[0]);
    *v25++ = vrhadd_u8((uint8x8_t)v35.val[2], (uint8x8_t)v37.val[2]);
  }
  while (!(_NF ^ _VF | _ZF));
  v27 = (uint64_t)v7 >> 1;
  memcpy((char *)a3 + v27, v29, v20);
  return memcpy((char *)a4 + v27, v30, v20);
}

unint64_t ARGBToYRow_C(unint64_t result, int8x16_t *a2, unsigned int a3)
{
  BOOL v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  int16x8_t v10;
  uint64_t v11;
  const char *v12;
  int8x16_t *v13;
  uint64_t v14;
  int8x8_t *v15;
  const char *v16;
  uint64_t v17;
  int16x8_t v18;
  int v19;
  unsigned __int8 *v20;
  int8x8x4_t v21;
  int8x16x4_t v22;

  if ((int)a3 >= 1)
  {
    if (a3 < 9
      || (result + 4 * (a3 - 1) + 3 > (unint64_t)a2 ? (v3 = (unint64_t)a2->u64 + a3 > result) : (v3 = 0),
          v3))
    {
      v5 = 0;
    }
    else
    {
      if (a3 < 0x11)
      {
        v4 = 0;
LABEL_16:
        if ((a3 & 7) != 0)
          v14 = a3 & 7;
        else
          v14 = 8;
        v5 = a3 - v14;
        v15 = (int8x8_t *)&a2->i8[v4];
        v16 = (const char *)(result + 4 * v4);
        v17 = v14 + v4 - a3;
        v18 = vdupq_n_s16(0x1080u);
        do
        {
          v21 = vld4_s8(v16);
          v16 += 32;
          *v15++ = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)v21.val[2], (uint8x8_t)0x4242424242424242), (uint8x8_t)v21.val[1], (uint8x8_t)0x8181818181818181), (uint8x8_t)v21.val[0], (uint8x8_t)0x1919191919191919), v18);
          v17 += 8;
        }
        while (v17);
        result += 4 * (a3 - v14);
        a2 = (int8x16_t *)((char *)a2 + a3 - v14);
        goto LABEL_22;
      }
      v6 = 16;
      if ((a3 & 0xF) != 0)
        v6 = a3 & 0xF;
      v4 = a3 - v6;
      v7.i64[0] = 0x4242424242424242;
      v7.i64[1] = 0x4242424242424242;
      v8.i64[0] = 0x8181818181818181;
      v8.i64[1] = 0x8181818181818181;
      v9.i64[0] = 0x1919191919191919;
      v9.i64[1] = 0x1919191919191919;
      v10 = vdupq_n_s16(0x1080u);
      v11 = a3;
      v12 = (const char *)result;
      v13 = a2;
      do
      {
        v22 = vld4q_s8(v12);
        v12 += 64;
        *v13++ = vaddhn_high_s16(vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v22.val[2].i8, (uint8x8_t)0x4242424242424242), *(uint8x8_t *)v22.val[1].i8, (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v22.val[0].i8, (uint8x8_t)0x1919191919191919), v10), (int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v22.val[2], v7), (uint8x16_t)v22.val[1], v8), (uint8x16_t)v22.val[0], v9), v10);
        v11 -= 16;
      }
      while (v6 != v11);
      if (v6 >= 9)
        goto LABEL_16;
      a2 = (int8x16_t *)((char *)a2 + v4);
      result += 4 * v4;
      v5 = a3 - v6;
    }
LABEL_22:
    v19 = a3 - v5;
    v20 = (unsigned __int8 *)(result + 2);
    do
    {
      a2->i8[0] = (unsigned __int16)(129 * *(v20 - 1) + 66 * *v20 + 25 * *(v20 - 2) + 4224) >> 8;
      a2 = (int8x16_t *)((char *)a2 + 1);
      v20 += 4;
      --v19;
    }
    while (v19);
  }
  return result;
}

unsigned __int8 *ARGBToUVRow_C(unsigned __int8 *result, int a2, _BYTE *a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v5 = a2;
  if (a5 >= 2)
  {
    v6 = 0;
    do
    {
      v7 = (*result + result[4] + result[v5] + result[v5 + 4] + 1) >> 1;
      v8 = (result[1] + result[5] + result[v5 + 1] + result[v5 + 5] + 1) >> 1;
      v9 = (result[2] + result[6] + result[v5 + 2] + result[v5 + 6] + 1) >> 1;
      *a3++ = (unsigned __int16)(-37 * v8 + 56 * v7 - 19 * v9 - 32640) >> 8;
      *a4++ = (unsigned __int16)(-47 * v8 - 9 * v7 + 56 * v9 - 32640) >> 8;
      result += 8;
      v6 += 2;
    }
    while (v6 < a5 - 1);
  }
  v10 = &result[v5];
  if ((a5 & 1) != 0)
  {
    v11 = *v10 + *result;
    v12 = v10[1] + result[1];
    v13 = v10[2] + result[2];
    *a3 = (unsigned __int16)(-37 * v12 + 56 * v11 - 19 * v13 - 32640) >> 8;
    *a4 = (unsigned __int16)(-47 * v12 - 9 * v11 + 56 * v13 - 32640) >> 8;
  }
  return result;
}

uint64_t BGRAToYRow_C(uint64_t result, int8x16_t *a2, unsigned int a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  int16x8_t v10;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  int8x8_t *v14;
  const char *v15;
  uint64_t v16;
  int16x8_t v17;
  int v18;
  unsigned __int8 *v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  int8x8x4_t v23;
  int8x16x4_t v24;

  if ((int)a3 >= 1)
  {
    if (a3 < 9
      || result + 4 * (unint64_t)(a3 - 1) + 4 > (unint64_t)a2
      && result + 1 < (unint64_t)a2->u64 + a3)
    {
      v3 = 0;
      goto LABEL_20;
    }
    if (a3 >= 0x11)
    {
      v5 = 16;
      if ((a3 & 0xF) != 0)
        v5 = a3 & 0xF;
      v4 = a3 - v5;
      v6 = (const char *)(result + 1);
      v7.i64[0] = 0x4242424242424242;
      v7.i64[1] = 0x4242424242424242;
      v8.i64[0] = 0x8181818181818181;
      v8.i64[1] = 0x8181818181818181;
      v9.i64[0] = 0x1919191919191919;
      v9.i64[1] = 0x1919191919191919;
      v10 = vdupq_n_s16(0x1080u);
      v11 = a3;
      v12 = a2;
      do
      {
        v24 = vld4q_s8(v6);
        v6 += 64;
        *v12++ = vaddhn_high_s16(vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v24.val[0].i8, (uint8x8_t)0x4242424242424242), *(uint8x8_t *)v24.val[1].i8, (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v24.val[2].i8, (uint8x8_t)0x1919191919191919), v10), (int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v24.val[0], v7), (uint8x16_t)v24.val[1], v8), (uint8x16_t)v24.val[2], v9), v10);
        v11 -= 16;
      }
      while (v5 != v11);
      if (v5 < 9)
      {
        a2 = (int8x16_t *)((char *)a2 + v4);
        result += 4 * v4;
        v3 = a3 - v5;
LABEL_20:
        v18 = a3 - v3;
        v19 = (unsigned __int8 *)(result + 3);
        do
        {
          v20 = *(v19 - 2);
          v21 = *(v19 - 1);
          v22 = *v19;
          v19 += 4;
          a2->i8[0] = (unsigned __int16)(129 * v21 + 66 * v20 + 25 * v22 + 4224) >> 8;
          a2 = (int8x16_t *)((char *)a2 + 1);
          --v18;
        }
        while (v18);
        return result;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((a3 & 7) != 0)
      v13 = a3 & 7;
    else
      v13 = 8;
    v3 = a3 - v13;
    v14 = (int8x8_t *)&a2->i8[v4];
    v15 = (const char *)(result + 4 * v4 + 1);
    v16 = v13 + v4 - a3;
    v17 = vdupq_n_s16(0x1080u);
    do
    {
      v23 = vld4_s8(v15);
      v15 += 32;
      *v14++ = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)v23.val[0], (uint8x8_t)0x4242424242424242), (uint8x8_t)v23.val[1], (uint8x8_t)0x8181818181818181), (uint8x8_t)v23.val[2], (uint8x8_t)0x1919191919191919), v17);
      v16 += 8;
    }
    while (v16);
    result += 4 * (a3 - v13);
    a2 = (int8x16_t *)((char *)a2 + a3 - v13);
    goto LABEL_20;
  }
  return result;
}

unsigned __int8 *BGRAToUVRow_C(unsigned __int8 *result, int a2, _BYTE *a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v5 = a2;
  if (a5 >= 2)
  {
    v6 = 0;
    do
    {
      v7 = (result[3] + result[7] + result[v5 + 3] + result[v5 + 7] + 1) >> 1;
      v8 = (result[2] + result[6] + result[v5 + 2] + result[v5 + 6] + 1) >> 1;
      v9 = (result[1] + result[5] + result[v5 + 1] + result[v5 + 5] + 1) >> 1;
      *a3++ = (unsigned __int16)(-37 * v8 + 56 * v7 - 19 * v9 - 32640) >> 8;
      *a4++ = (unsigned __int16)(-47 * v8 - 9 * v7 + 56 * v9 - 32640) >> 8;
      result += 8;
      v6 += 2;
    }
    while (v6 < a5 - 1);
  }
  v10 = &result[v5];
  if ((a5 & 1) != 0)
  {
    v11 = v10[3] + result[3];
    v12 = v10[2] + result[2];
    v13 = v10[1] + result[1];
    *a3 = (unsigned __int16)(-37 * v12 + 56 * v11 - 19 * v13 - 32640) >> 8;
    *a4 = (unsigned __int16)(-47 * v12 - 9 * v11 + 56 * v13 - 32640) >> 8;
  }
  return result;
}

const char *ABGRToYRow_C(const char *result, int8x16_t *a2, unsigned int a3)
{
  BOOL v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  int16x8_t v10;
  uint64_t v11;
  const char *v12;
  int8x16_t *v13;
  uint64_t v14;
  int8x8_t *v15;
  const char *v16;
  uint64_t v17;
  int16x8_t v18;
  int v19;
  int8x8x4_t v20;
  int8x16x4_t v21;

  if ((int)a3 >= 1)
  {
    if (a3 < 9 || (&result[4 * a3 - 1] > (const char *)a2 ? (v3 = &a2->i8[a3] > result) : (v3 = 0), v3))
    {
      v5 = 0;
    }
    else
    {
      if (a3 < 0x11)
      {
        v4 = 0;
LABEL_16:
        if ((a3 & 7) != 0)
          v14 = a3 & 7;
        else
          v14 = 8;
        v5 = a3 - v14;
        v15 = (int8x8_t *)&a2->i8[v4];
        v16 = &result[4 * v4];
        v17 = v14 + v4 - a3;
        v18 = vdupq_n_s16(0x1080u);
        do
        {
          v20 = vld4_s8(v16);
          v16 += 32;
          *v15++ = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)v20.val[0], (uint8x8_t)0x4242424242424242), (uint8x8_t)v20.val[1], (uint8x8_t)0x8181818181818181), (uint8x8_t)v20.val[2], (uint8x8_t)0x1919191919191919), v18);
          v17 += 8;
        }
        while (v17);
        result += 4 * (a3 - v14);
        a2 = (int8x16_t *)((char *)a2 + a3 - v14);
        goto LABEL_22;
      }
      v6 = 16;
      if ((a3 & 0xF) != 0)
        v6 = a3 & 0xF;
      v4 = a3 - v6;
      v7.i64[0] = 0x4242424242424242;
      v7.i64[1] = 0x4242424242424242;
      v8.i64[0] = 0x8181818181818181;
      v8.i64[1] = 0x8181818181818181;
      v9.i64[0] = 0x1919191919191919;
      v9.i64[1] = 0x1919191919191919;
      v10 = vdupq_n_s16(0x1080u);
      v11 = a3;
      v12 = result;
      v13 = a2;
      do
      {
        v21 = vld4q_s8(v12);
        v12 += 64;
        *v13++ = vaddhn_high_s16(vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v21.val[0].i8, (uint8x8_t)0x4242424242424242), *(uint8x8_t *)v21.val[1].i8, (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v21.val[2].i8, (uint8x8_t)0x1919191919191919), v10), (int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v21.val[0], v7), (uint8x16_t)v21.val[1], v8), (uint8x16_t)v21.val[2], v9), v10);
        v11 -= 16;
      }
      while (v6 != v11);
      if (v6 >= 9)
        goto LABEL_16;
      a2 = (int8x16_t *)((char *)a2 + v4);
      result += 4 * v4;
      v5 = a3 - v6;
    }
LABEL_22:
    v19 = a3 - v5;
    do
    {
      a2->i8[0] = (unsigned __int16)(129 * *((unsigned __int8 *)result + 1)
                                   + 66 * *(unsigned __int8 *)result
                                   + 25 * *((unsigned __int8 *)result + 2)
                                   + 4224) >> 8;
      a2 = (int8x16_t *)((char *)a2 + 1);
      result += 4;
      --v19;
    }
    while (v19);
  }
  return result;
}

unsigned __int8 *ABGRToUVRow_C(unsigned __int8 *result, int a2, _BYTE *a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v5 = a2;
  if (a5 >= 2)
  {
    v6 = 0;
    do
    {
      v7 = (result[2] + result[6] + result[v5 + 2] + result[v5 + 6] + 1) >> 1;
      v8 = (result[1] + result[5] + result[v5 + 1] + result[v5 + 5] + 1) >> 1;
      v9 = (*result + result[4] + result[v5] + result[v5 + 4] + 1) >> 1;
      *a3++ = (unsigned __int16)(-37 * v8 + 56 * v7 - 19 * v9 - 32640) >> 8;
      *a4++ = (unsigned __int16)(-47 * v8 - 9 * v7 + 56 * v9 - 32640) >> 8;
      result += 8;
      v6 += 2;
    }
    while (v6 < a5 - 1);
  }
  v10 = &result[v5];
  if ((a5 & 1) != 0)
  {
    v11 = v10[2] + result[2];
    v12 = v10[1] + result[1];
    v13 = *v10 + *result;
    *a3 = (unsigned __int16)(-37 * v12 + 56 * v11 - 19 * v13 - 32640) >> 8;
    *a4 = (unsigned __int16)(-47 * v12 - 9 * v11 + 56 * v13 - 32640) >> 8;
  }
  return result;
}

uint64_t RGBAToYRow_C(uint64_t result, int8x16_t *a2, unsigned int a3)
{
  int v3;
  unint64_t v4;
  unint64_t v5;
  const char *v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint8x16_t v9;
  int16x8_t v10;
  uint64_t v11;
  int8x16_t *v12;
  uint64_t v13;
  int8x8_t *v14;
  const char *v15;
  uint64_t v16;
  int16x8_t v17;
  int v18;
  unsigned __int8 *v19;
  int8x8x4_t v20;
  int8x16x4_t v21;

  if ((int)a3 >= 1)
  {
    if (a3 < 9
      || result + 4 * (unint64_t)(a3 - 1) + 4 > (unint64_t)a2
      && result + 1 < (unint64_t)a2->u64 + a3)
    {
      v3 = 0;
      goto LABEL_20;
    }
    if (a3 >= 0x11)
    {
      v5 = 16;
      if ((a3 & 0xF) != 0)
        v5 = a3 & 0xF;
      v4 = a3 - v5;
      v6 = (const char *)(result + 1);
      v7.i64[0] = 0x4242424242424242;
      v7.i64[1] = 0x4242424242424242;
      v8.i64[0] = 0x8181818181818181;
      v8.i64[1] = 0x8181818181818181;
      v9.i64[0] = 0x1919191919191919;
      v9.i64[1] = 0x1919191919191919;
      v10 = vdupq_n_s16(0x1080u);
      v11 = a3;
      v12 = a2;
      do
      {
        v21 = vld4q_s8(v6);
        v6 += 64;
        *v12++ = vaddhn_high_s16(vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v21.val[2].i8, (uint8x8_t)0x4242424242424242), *(uint8x8_t *)v21.val[1].i8, (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v21.val[0].i8, (uint8x8_t)0x1919191919191919), v10), (int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v21.val[2], v7), (uint8x16_t)v21.val[1], v8), (uint8x16_t)v21.val[0], v9), v10);
        v11 -= 16;
      }
      while (v5 != v11);
      if (v5 < 9)
      {
        a2 = (int8x16_t *)((char *)a2 + v4);
        result += 4 * v4;
        v3 = a3 - v5;
LABEL_20:
        v18 = a3 - v3;
        v19 = (unsigned __int8 *)(result + 3);
        do
        {
          a2->i8[0] = (unsigned __int16)(129 * *(v19 - 1) + 66 * *v19 + 25 * *(v19 - 2) + 4224) >> 8;
          a2 = (int8x16_t *)((char *)a2 + 1);
          v19 += 4;
          --v18;
        }
        while (v18);
        return result;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((a3 & 7) != 0)
      v13 = a3 & 7;
    else
      v13 = 8;
    v3 = a3 - v13;
    v14 = (int8x8_t *)&a2->i8[v4];
    v15 = (const char *)(result + 4 * v4 + 1);
    v16 = v13 + v4 - a3;
    v17 = vdupq_n_s16(0x1080u);
    do
    {
      v20 = vld4_s8(v15);
      v15 += 32;
      *v14++ = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)v20.val[2], (uint8x8_t)0x4242424242424242), (uint8x8_t)v20.val[1], (uint8x8_t)0x8181818181818181), (uint8x8_t)v20.val[0], (uint8x8_t)0x1919191919191919), v17);
      v16 += 8;
    }
    while (v16);
    result += 4 * (a3 - v13);
    a2 = (int8x16_t *)((char *)a2 + a3 - v13);
    goto LABEL_20;
  }
  return result;
}

unsigned __int8 *RGBAToUVRow_C(unsigned __int8 *result, int a2, _BYTE *a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v5 = a2;
  if (a5 >= 2)
  {
    v6 = 0;
    do
    {
      v7 = (result[1] + result[5] + result[v5 + 1] + result[v5 + 5] + 1) >> 1;
      v8 = (result[2] + result[6] + result[v5 + 2] + result[v5 + 6] + 1) >> 1;
      v9 = (result[3] + result[7] + result[v5 + 3] + result[v5 + 7] + 1) >> 1;
      *a3++ = (unsigned __int16)(-37 * v8 + 56 * v7 - 19 * v9 - 32640) >> 8;
      *a4++ = (unsigned __int16)(-47 * v8 - 9 * v7 + 56 * v9 - 32640) >> 8;
      result += 8;
      v6 += 2;
    }
    while (v6 < a5 - 1);
  }
  v10 = &result[v5];
  if ((a5 & 1) != 0)
  {
    v11 = v10[1] + result[1];
    v12 = v10[2] + result[2];
    v13 = v10[3] + result[3];
    *a3 = (unsigned __int16)(-37 * v12 + 56 * v11 - 19 * v13 - 32640) >> 8;
    *a4 = (unsigned __int16)(-47 * v12 - 9 * v11 + 56 * v13 - 32640) >> 8;
  }
  return result;
}

const char *RGB24ToYRow_C(const char *result, unint64_t a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _BYTE *v7;
  int v8;
  unsigned __int8 *v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  uint64_t v13;
  const char *v14;
  int8x16_t *v15;
  int16x8_t v16;
  int8x8_t *v17;
  const char *v18;
  uint64_t v19;
  int16x8_t v20;
  int8x8x3_t v21;
  int8x16x3_t v22;

  if ((int)a3 >= 1)
  {
    if (a3 < 8 || ((unint64_t)&result[3 * a3] > a2 ? (v3 = a2 + a3 > (unint64_t)result) : (v3 = 0), v3))
    {
      LODWORD(v5) = 0;
      v6 = result;
      v7 = (_BYTE *)a2;
      goto LABEL_10;
    }
    if (a3 < 0x10)
    {
      v4 = 0;
      goto LABEL_18;
    }
    v4 = a3 & 0xFFFFFFF0;
    v10.i64[0] = 0x4242424242424242;
    v10.i64[1] = 0x4242424242424242;
    v11.i64[0] = 0x8181818181818181;
    v11.i64[1] = 0x8181818181818181;
    v12.i64[0] = 0x1919191919191919;
    v12.i64[1] = 0x1919191919191919;
    v13 = v4;
    v14 = result;
    v15 = (int8x16_t *)a2;
    v16 = vdupq_n_s16(0x1080u);
    do
    {
      v22 = vld3q_s8(v14);
      v14 += 48;
      *v15++ = vaddhn_high_s16(vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v22.val[2].i8, (uint8x8_t)0x4242424242424242), *(uint8x8_t *)v22.val[1].i8, (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v22.val[0].i8, (uint8x8_t)0x1919191919191919), v16), (int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v22.val[2], v10), (uint8x16_t)v22.val[1], v11), (uint8x16_t)v22.val[0], v12), v16);
      v13 -= 16;
    }
    while (v13);
    if (v4 != a3)
    {
      if ((a3 & 8) == 0)
      {
        v7 = (_BYTE *)(a2 + v4);
        v6 = &result[3 * v4];
        LODWORD(v5) = a3 & 0xFFFFFFF0;
        goto LABEL_10;
      }
LABEL_18:
      v5 = a3 & 0x7FFFFFF8;
      v6 = &result[3 * (a3 & 0xFFFFFFF8)];
      v7 = (_BYTE *)(a2 + (a3 & 0xFFFFFFF8));
      v17 = (int8x8_t *)(a2 + v4);
      v18 = &result[3 * v4];
      v19 = v4 - (a3 & 0xFFFFFFF8);
      v20 = vdupq_n_s16(0x1080u);
      do
      {
        v21 = vld3_s8(v18);
        v18 += 24;
        *v17++ = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)v21.val[2], (uint8x8_t)0x4242424242424242), (uint8x8_t)v21.val[1], (uint8x8_t)0x8181818181818181), (uint8x8_t)v21.val[0], (uint8x8_t)0x1919191919191919), v20);
        v19 += 8;
      }
      while (v19);
      if (v5 == a3)
        return result;
LABEL_10:
      v8 = a3 - v5;
      v9 = (unsigned __int8 *)(v6 + 2);
      do
      {
        *v7++ = (unsigned __int16)(129 * *(v9 - 1) + 66 * *v9 + 25 * *(v9 - 2) + 4224) >> 8;
        v9 += 3;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

unsigned __int8 *RGB24ToUVRow_C(unsigned __int8 *result, int a2, _BYTE *a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v5 = a2;
  if (a5 >= 2)
  {
    v6 = 0;
    do
    {
      v7 = (*result + result[3] + result[v5] + result[v5 + 3] + 1) >> 1;
      v8 = (result[1] + result[4] + result[v5 + 1] + result[v5 + 4] + 1) >> 1;
      v9 = (result[2] + result[5] + result[v5 + 2] + result[v5 + 5] + 1) >> 1;
      *a3++ = (unsigned __int16)(-37 * v8 + 56 * v7 - 19 * v9 - 32640) >> 8;
      *a4++ = (unsigned __int16)(-47 * v8 - 9 * v7 + 56 * v9 - 32640) >> 8;
      result += 6;
      v6 += 2;
    }
    while (v6 < a5 - 1);
  }
  v10 = &result[v5];
  if ((a5 & 1) != 0)
  {
    v11 = *v10 + *result;
    v12 = v10[1] + result[1];
    v13 = v10[2] + result[2];
    *a3 = (unsigned __int16)(-37 * v12 + 56 * v11 - 19 * v13 - 32640) >> 8;
    *a4 = (unsigned __int16)(-47 * v12 - 9 * v11 + 56 * v13 - 32640) >> 8;
  }
  return result;
}

const char *RAWToYRow_C(const char *result, unint64_t a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _BYTE *v7;
  int v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint64_t v12;
  const char *v13;
  int8x16_t *v14;
  int16x8_t v15;
  int8x8_t *v16;
  const char *v17;
  uint64_t v18;
  int16x8_t v19;
  int8x8x3_t v20;
  int8x16x3_t v21;

  if ((int)a3 >= 1)
  {
    if (a3 < 8 || ((unint64_t)&result[3 * a3] > a2 ? (v3 = a2 + a3 > (unint64_t)result) : (v3 = 0), v3))
    {
      LODWORD(v5) = 0;
      v6 = result;
      v7 = (_BYTE *)a2;
      goto LABEL_10;
    }
    if (a3 < 0x10)
    {
      v4 = 0;
      goto LABEL_18;
    }
    v4 = a3 & 0xFFFFFFF0;
    v9.i64[0] = 0x4242424242424242;
    v9.i64[1] = 0x4242424242424242;
    v10.i64[0] = 0x8181818181818181;
    v10.i64[1] = 0x8181818181818181;
    v11.i64[0] = 0x1919191919191919;
    v11.i64[1] = 0x1919191919191919;
    v12 = v4;
    v13 = result;
    v14 = (int8x16_t *)a2;
    v15 = vdupq_n_s16(0x1080u);
    do
    {
      v21 = vld3q_s8(v13);
      v13 += 48;
      *v14++ = vaddhn_high_s16(vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v21.val[0].i8, (uint8x8_t)0x4242424242424242), *(uint8x8_t *)v21.val[1].i8, (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v21.val[2].i8, (uint8x8_t)0x1919191919191919), v15), (int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v21.val[0], v9), (uint8x16_t)v21.val[1], v10), (uint8x16_t)v21.val[2], v11), v15);
      v12 -= 16;
    }
    while (v12);
    if (v4 != a3)
    {
      if ((a3 & 8) == 0)
      {
        v7 = (_BYTE *)(a2 + v4);
        v6 = &result[3 * v4];
        LODWORD(v5) = a3 & 0xFFFFFFF0;
        goto LABEL_10;
      }
LABEL_18:
      v5 = a3 & 0x7FFFFFF8;
      v6 = &result[3 * (a3 & 0xFFFFFFF8)];
      v7 = (_BYTE *)(a2 + (a3 & 0xFFFFFFF8));
      v16 = (int8x8_t *)(a2 + v4);
      v17 = &result[3 * v4];
      v18 = v4 - (a3 & 0xFFFFFFF8);
      v19 = vdupq_n_s16(0x1080u);
      do
      {
        v20 = vld3_s8(v17);
        v17 += 24;
        *v16++ = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)v20.val[0], (uint8x8_t)0x4242424242424242), (uint8x8_t)v20.val[1], (uint8x8_t)0x8181818181818181), (uint8x8_t)v20.val[2], (uint8x8_t)0x1919191919191919), v19);
        v18 += 8;
      }
      while (v18);
      if (v5 == a3)
        return result;
LABEL_10:
      v8 = a3 - v5;
      do
      {
        *v7++ = (unsigned __int16)(129 * *((unsigned __int8 *)v6 + 1)
                                 + 66 * *(unsigned __int8 *)v6
                                 + 25 * *((unsigned __int8 *)v6 + 2)
                                 + 4224) >> 8;
        v6 += 3;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

unsigned __int8 *RAWToUVRow_C(unsigned __int8 *result, int a2, _BYTE *a3, _BYTE *a4, int a5)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned __int8 *v10;
  __int16 v11;
  __int16 v12;
  __int16 v13;

  v5 = a2;
  if (a5 >= 2)
  {
    v6 = 0;
    do
    {
      v7 = (result[2] + result[5] + result[v5 + 2] + result[v5 + 5] + 1) >> 1;
      v8 = (result[1] + result[4] + result[v5 + 1] + result[v5 + 4] + 1) >> 1;
      v9 = (*result + result[3] + result[v5] + result[v5 + 3] + 1) >> 1;
      *a3++ = (unsigned __int16)(-37 * v8 + 56 * v7 - 19 * v9 - 32640) >> 8;
      *a4++ = (unsigned __int16)(-47 * v8 - 9 * v7 + 56 * v9 - 32640) >> 8;
      result += 6;
      v6 += 2;
    }
    while (v6 < a5 - 1);
  }
  v10 = &result[v5];
  if ((a5 & 1) != 0)
  {
    v11 = v10[2] + result[2];
    v12 = v10[1] + result[1];
    v13 = *v10 + *result;
    *a3 = (unsigned __int16)(-37 * v12 + 56 * v11 - 19 * v13 - 32640) >> 8;
    *a4 = (unsigned __int16)(-47 * v12 - 9 * v11 + 56 * v13 - 32640) >> 8;
  }
  return result;
}

_BYTE *RGB565ToYRow_C(_BYTE *result, unint64_t a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  int v8;
  int8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  uint64_t v13;
  const char *v14;
  int8x16_t *v15;
  int16x8_t v16;
  int8x16_t v17;
  uint8x16_t v18;
  int8x16_t v19;
  uint8x16_t v20;
  uint8x16_t v21;
  int8x8_t *v22;
  uint64_t v23;
  int16x8_t v24;
  const char *v25;
  int8x8_t v26;
  int8x8x2_t v27;
  int8x16x2_t v28;

  if ((int)a3 >= 1)
  {
    if (a3 < 8 || ((unint64_t)&result[2 * a3] > a2 ? (v3 = a2 + a3 > (unint64_t)result) : (v3 = 0), v3))
    {
      LODWORD(v5) = 0;
      v6 = result;
      v7 = (_BYTE *)a2;
      goto LABEL_10;
    }
    if (a3 < 0x10)
    {
      v4 = 0;
      goto LABEL_18;
    }
    v4 = a3 & 0xFFFFFFF0;
    v9.i64[0] = 0x3838383838383838;
    v9.i64[1] = 0x3838383838383838;
    v10.i64[0] = 0x4242424242424242;
    v10.i64[1] = 0x4242424242424242;
    v11.i64[0] = 0x8181818181818181;
    v11.i64[1] = 0x8181818181818181;
    v12.i64[0] = 0x1919191919191919;
    v12.i64[1] = 0x1919191919191919;
    v13 = v4;
    v14 = result;
    v15 = (int8x16_t *)a2;
    v16 = vdupq_n_s16(0x1080u);
    do
    {
      v28 = vld2q_s8(v14);
      v14 += 32;
      v17 = vshlq_n_s8(v28.val[1], 3uLL);
      v18 = (uint8x16_t)vandq_s8(v17, v9);
      v19 = vorrq_s8(v17, (int8x16_t)vshrq_n_u8((uint8x16_t)v28.val[0], 5uLL));
      v20 = (uint8x16_t)vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v28.val[0], 2uLL), v28.val[0], 3uLL);
      v21 = (uint8x16_t)vorrq_s8(vshlq_n_s8(v19, 2uLL), (int8x16_t)vshrq_n_u8(v18, 4uLL));
      v28.val[1] = vsriq_n_s8(v28.val[1], v28.val[1], 5uLL);
      *v15++ = vaddhn_high_s16(vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v28.val[1].i8, (uint8x8_t)0x4242424242424242), *(uint8x8_t *)v20.i8, (uint8x8_t)0x1919191919191919), *(uint8x8_t *)v21.i8, (uint8x8_t)0x8181818181818181), v16), (int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v28.val[1], v10), v20, v12), v21, v11), v16);
      v13 -= 16;
    }
    while (v13);
    if (v4 != a3)
    {
      if ((a3 & 8) == 0)
      {
        v7 = (_BYTE *)(a2 + v4);
        v6 = &result[2 * v4];
        LODWORD(v5) = a3 & 0xFFFFFFF0;
        goto LABEL_10;
      }
LABEL_18:
      v5 = a3 & 0x7FFFFFF8;
      v6 = &result[2 * (a3 & 0xFFFFFFF8)];
      v7 = (_BYTE *)(a2 + (a3 & 0xFFFFFFF8));
      v22 = (int8x8_t *)(a2 + v4);
      v23 = v4 - (a3 & 0xFFFFFFF8);
      v24 = vdupq_n_s16(0x1080u);
      v25 = &result[2 * v4];
      do
      {
        v27 = vld2_s8(v25);
        v25 += 16;
        v26 = vshl_n_s8(v27.val[1], 3uLL);
        *v22++ = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vsri_n_s8(v27.val[1], v27.val[1], 5uLL), (uint8x8_t)0x4242424242424242), (uint8x8_t)vsli_n_s8((int8x8_t)vshr_n_u8((uint8x8_t)v27.val[0], 2uLL), v27.val[0], 3uLL), (uint8x8_t)0x1919191919191919), (uint8x8_t)vorr_s8(vshl_n_s8(vorr_s8(v26, (int8x8_t)vshr_n_u8((uint8x8_t)v27.val[0], 5uLL)), 2uLL), (int8x8_t)vshr_n_u8((uint8x8_t)vand_s8(v26, (int8x8_t)0x3838383838383838), 4uLL)), (uint8x8_t)0x8181818181818181), v24);
        v23 += 8;
      }
      while (v23);
      if (v5 == a3)
        return result;
LABEL_10:
      v8 = a3 - v5;
      do
      {
        *v7++ = (unsigned __int16)(25 * ((8 * *v6) | (*v6 >> 2) & 7)
                                 + 66 * (v6[1] & 0xF8 | (v6[1] >> 5))
                                 + 129 * ((*v6 >> 3) & 0x1C | (32 * v6[1]) | (v6[1] >> 1) & 3)
                                 + 4224) >> 8;
        v6 += 2;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

const char *ARGB1555ToYRow_C(const char *result, unint64_t a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _BYTE *v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  int8x16_t v11;
  int8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  uint8x16_t v15;
  uint64_t v16;
  const char *v17;
  int8x16_t *v18;
  int16x8_t v19;
  int8x16_t v20;
  uint8x16_t v21;
  uint8x16_t v22;
  int8x8_t *v23;
  uint64_t v24;
  const char *v25;
  int16x8_t v26;
  int8x8_t v27;
  int8x8x2_t v28;
  int8x16x2_t v29;

  if ((int)a3 >= 1)
  {
    if (a3 < 8 || ((unint64_t)&result[2 * a3] > a2 ? (v3 = a2 + a3 > (unint64_t)result) : (v3 = 0), v3))
    {
      LODWORD(v5) = 0;
      v6 = result;
      v7 = (_BYTE *)a2;
      goto LABEL_10;
    }
    if (a3 < 0x10)
    {
      v4 = 0;
      goto LABEL_18;
    }
    v4 = a3 & 0xFFFFFFF0;
    v11.i64[0] = 0x1818181818181818;
    v11.i64[1] = 0x1818181818181818;
    v12.i64[0] = 0xF8F8F8F8F8F8F8F8;
    v12.i64[1] = 0xF8F8F8F8F8F8F8F8;
    v13.i64[0] = 0x4242424242424242;
    v13.i64[1] = 0x4242424242424242;
    v14.i64[0] = 0x8181818181818181;
    v14.i64[1] = 0x8181818181818181;
    v15.i64[0] = 0x1919191919191919;
    v15.i64[1] = 0x1919191919191919;
    v16 = v4;
    v17 = result;
    v18 = (int8x16_t *)a2;
    v19 = vdupq_n_s16(0x1080u);
    do
    {
      v29 = vld2q_s8(v17);
      v17 += 32;
      v20 = (int8x16_t)vsraq_n_u8((uint8x16_t)vandq_s8(vshlq_n_s8(v29.val[1], 3uLL), v11), (uint8x16_t)v29.val[0], 5uLL);
      v21 = (uint8x16_t)vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v29.val[0], 2uLL), v29.val[0], 3uLL);
      v22 = (uint8x16_t)vorrq_s8(vshlq_n_s8(v20, 3uLL), (int8x16_t)vshrq_n_u8((uint8x16_t)v20, 2uLL));
      v29.val[0] = vbslq_s8(v12, vaddq_s8(v29.val[1], v29.val[1]), (int8x16_t)vshrq_n_u8((uint8x16_t)v29.val[1], 4uLL));
      *v18++ = vaddhn_high_s16(vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v21.i8, (uint8x8_t)0x1919191919191919), *(uint8x8_t *)v29.val[0].i8, (uint8x8_t)0x4242424242424242), *(uint8x8_t *)v22.i8, (uint8x8_t)0x8181818181818181), v19), (int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8(v21, v15), (uint8x16_t)v29.val[0], v13), v22, v14), v19);
      v16 -= 16;
    }
    while (v16);
    if (v4 != a3)
    {
      if ((a3 & 8) == 0)
      {
        v7 = (_BYTE *)(a2 + v4);
        v6 = &result[2 * v4];
        LODWORD(v5) = a3 & 0xFFFFFFF0;
        goto LABEL_10;
      }
LABEL_18:
      v5 = a3 & 0x7FFFFFF8;
      v6 = &result[2 * (a3 & 0xFFFFFFF8)];
      v7 = (_BYTE *)(a2 + (a3 & 0xFFFFFFF8));
      v23 = (int8x8_t *)(a2 + v4);
      v24 = v4 - (a3 & 0xFFFFFFF8);
      v25 = &result[2 * v4];
      v26 = vdupq_n_s16(0x1080u);
      do
      {
        v28 = vld2_s8(v25);
        v25 += 16;
        v27 = (int8x8_t)vsra_n_u8((uint8x8_t)vand_s8(vshl_n_s8(v28.val[1], 3uLL), (int8x8_t)0x1818181818181818), (uint8x8_t)v28.val[0], 5uLL);
        *v23++ = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vsli_n_s8((int8x8_t)vshr_n_u8((uint8x8_t)v28.val[0], 2uLL), v28.val[0], 3uLL), (uint8x8_t)0x1919191919191919), (uint8x8_t)vbsl_s8((int8x8_t)0xF8F8F8F8F8F8F8F8, vadd_s8(v28.val[1], v28.val[1]), (int8x8_t)vshr_n_u8((uint8x8_t)v28.val[1], 4uLL)), (uint8x8_t)0x4242424242424242), (uint8x8_t)vorr_s8(vshl_n_s8(v27, 3uLL), (int8x8_t)vshr_n_u8((uint8x8_t)v27, 2uLL)), (uint8x8_t)0x8181818181818181), v26);
        v24 += 8;
      }
      while (v24);
      if (v5 == a3)
        return result;
LABEL_10:
      v8 = a3 - v5;
      do
      {
        v9 = *((unsigned __int8 *)v6 + 1);
        v10 = (*(unsigned __int8 *)v6 >> 5) & 0xFFFFFFE7 | (8 * (v9 & 3));
        *v7++ = (unsigned __int16)(66 * ((2 * v9) & 0xF8 | (v9 >> 4) & 7)
                                 + 25 * ((8 * *v6) | (*v6 >> 2) & 7)
                                 + 129 * ((v10 >> 2) | (8 * v10))
                                 + 4224) >> 8;
        v6 += 2;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

const char *ARGB4444ToYRow_C(const char *result, unint64_t a2, unsigned int a3)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _BYTE *v7;
  int v8;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint64_t v12;
  const char *v13;
  int8x16_t *v14;
  int16x8_t v15;
  uint8x16_t v16;
  int8x8_t *v17;
  uint64_t v18;
  int16x8_t v19;
  const char *v20;
  int8x8x2_t v21;
  int8x16x2_t v22;

  if ((int)a3 >= 1)
  {
    if (a3 < 8 || ((unint64_t)&result[2 * a3] > a2 ? (v3 = a2 + a3 > (unint64_t)result) : (v3 = 0), v3))
    {
      LODWORD(v5) = 0;
      v6 = result;
      v7 = (_BYTE *)a2;
      goto LABEL_10;
    }
    if (a3 < 0x10)
    {
      v4 = 0;
      goto LABEL_18;
    }
    v4 = a3 & 0xFFFFFFF0;
    v9.i64[0] = 0x4242424242424242;
    v9.i64[1] = 0x4242424242424242;
    v10.i64[0] = 0x8181818181818181;
    v10.i64[1] = 0x8181818181818181;
    v11.i64[0] = 0x1919191919191919;
    v11.i64[1] = 0x1919191919191919;
    v12 = v4;
    v13 = result;
    v14 = (int8x16_t *)a2;
    v15 = vdupq_n_s16(0x1080u);
    do
    {
      v22 = vld2q_s8(v13);
      v13 += 32;
      v16 = (uint8x16_t)vsliq_n_s8(v22.val[0], v22.val[0], 4uLL);
      v22.val[0] = vsriq_n_s8(v22.val[0], v22.val[0], 4uLL);
      v22.val[1] = vsliq_n_s8(v22.val[1], v22.val[1], 4uLL);
      *v14++ = vaddhn_high_s16(vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8(*(uint8x8_t *)v22.val[0].i8, (uint8x8_t)0x8181818181818181), *(uint8x8_t *)v16.i8, (uint8x8_t)0x1919191919191919), *(uint8x8_t *)v22.val[1].i8, (uint8x8_t)0x4242424242424242), v15), (int16x8_t)vmlal_high_u8(vmlal_high_u8(vmull_high_u8((uint8x16_t)v22.val[0], v10), v16, v11), (uint8x16_t)v22.val[1], v9), v15);
      v12 -= 16;
    }
    while (v12);
    if (v4 != a3)
    {
      if ((a3 & 8) == 0)
      {
        v7 = (_BYTE *)(a2 + v4);
        v6 = &result[2 * v4];
        LODWORD(v5) = a3 & 0xFFFFFFF0;
        goto LABEL_10;
      }
LABEL_18:
      v5 = a3 & 0x7FFFFFF8;
      v6 = &result[2 * (a3 & 0xFFFFFFF8)];
      v7 = (_BYTE *)(a2 + (a3 & 0xFFFFFFF8));
      v17 = (int8x8_t *)(a2 + v4);
      v18 = v4 - (a3 & 0xFFFFFFF8);
      v19 = vdupq_n_s16(0x1080u);
      v20 = &result[2 * v4];
      do
      {
        v21 = vld2_s8(v20);
        v20 += 16;
        *v17++ = vaddhn_s16((int16x8_t)vmlal_u8(vmlal_u8(vmull_u8((uint8x8_t)vsri_n_s8(v21.val[0], v21.val[0], 4uLL), (uint8x8_t)0x8181818181818181), (uint8x8_t)vsli_n_s8(v21.val[0], v21.val[0], 4uLL), (uint8x8_t)0x1919191919191919), (uint8x8_t)vsli_n_s8(v21.val[1], v21.val[1], 4uLL), (uint8x8_t)0x4242424242424242), v19);
        v18 += 8;
      }
      while (v18);
      if (v5 == a3)
        return result;
LABEL_10:
      v8 = a3 - v5;
      do
      {
        *v7++ = (unsigned __int16)(129 * (*v6 & 0xF0 | (*(unsigned __int8 *)v6 >> 4))
                                 + 25 * (*v6 & 0xF | (16 * *v6))
                                 + 66 * (v6[1] & 0xF | (16 * v6[1]))
                                 + 4224) >> 8;
        v6 += 2;
        --v8;
      }
      while (v8);
    }
  }
  return result;
}

unint64_t RGB565ToUVRow_C(unint64_t result, int a2, int8x16_t *a3, int8x16_t *a4, int a5)
{
  unsigned __int8 *v5;
  unsigned int v6;
  int v7;
  int8x16_t *v8;
  int8x16_t *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v17;
  BOOL v19;
  BOOL v21;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t v27;
  uint64_t v28;
  const char *v29;
  int8x16_t v30;
  int8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  uint8x16_t v38;
  uint32x4_t v39;
  uint32x4_t v40;
  uint32x4_t v41;
  uint32x4_t v42;
  uint16x8_t v43;
  int8x16_t v44;
  uint8x16_t v45;
  uint16x8_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  uint8x16_t v49;
  uint8x16_t v50;
  uint8x16_t v51;
  uint32x4_t v52;
  uint16x8_t v53;
  uint32x4_t v54;
  uint32x4_t v55;
  uint16x8_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  uint16x8_t v60;
  uint16x8_t v61;
  int8x16_t v62;
  uint16x8_t v63;
  uint16x8_t v64;
  uint16x8_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int16x4_t v70;
  uint16x4_t v71;
  int8x8_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  __int16 v80;
  int v81;
  int8x16x4_t v82;
  int8x16x4_t v83;
  int8x16x4_t v84;

  v5 = (unsigned __int8 *)(result + a2);
  v6 = a5 - 2;
  if (a5 >= 2)
  {
    if (v6 >= 0x1E)
    {
      v7 = 0;
      v11 = v6 >> 1;
      v12 = &a3->i8[v11 + 1];
      v13 = &a4->i8[v11 + 1];
      v14 = result + 4 * v11 + 4;
      v15 = v14 + a2;
      v17 = v15 > (unint64_t)a3 && v5 < (unsigned __int8 *)v12;
      v19 = v14 > (unint64_t)a3 && (unint64_t)v12 > result;
      v21 = v15 > (unint64_t)a4 && v5 < (unsigned __int8 *)v13;
      v23 = v14 > (unint64_t)a4 && (unint64_t)v13 > result;
      v24 = v12 > (char *)a4 && v13 > (char *)a3;
      if (!v24 && !v17 && !v19 && !v21 && !v23)
      {
        v25 = (v11 + 1);
        v26 = 4 * (v25 & 0xFFFFFFF0);
        v10 = (unsigned __int8 *)(result + v26);
        v9 = (int8x16_t *)((char *)a3 + (v25 & 0xFFFFFFF0));
        v8 = (int8x16_t *)((char *)a4 + (v25 & 0xFFFFFFF0));
        v5 += v26;
        v7 = 2 * (v25 & 0xFFFFFFF0);
        v27 = vdupq_n_s32(0x8080u);
        v28 = v25 & 0xFFFFFFF0;
        do
        {
          v29 = (const char *)(result + a2);
          v84 = vld4q_s8((const char *)result);
          result += 64;
          v83 = vld4q_s8(v29);
          v30 = vshlq_n_s8(v84.val[1], 3uLL);
          v31.i64[0] = 0x3838383838383838;
          v31.i64[1] = 0x3838383838383838;
          v32 = (uint8x16_t)vandq_s8(v30, v31);
          v33 = vorrq_s8(v30, (int8x16_t)vshrq_n_u8((uint8x16_t)v84.val[0], 5uLL));
          v34 = vshlq_n_s8(v84.val[3], 3uLL);
          v35 = (uint8x16_t)vandq_s8(v34, v31);
          v36 = vorrq_s8(v34, (int8x16_t)vshrq_n_u8((uint8x16_t)v84.val[2], 5uLL));
          v37 = vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v84.val[0], 2uLL), v84.val[0], 3uLL);
          v84.val[1] = vsriq_n_s8(v84.val[1], v84.val[1], 5uLL);
          v38 = (uint8x16_t)vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v84.val[2], 2uLL), v84.val[2], 3uLL);
          v84.val[3] = vsriq_n_s8(v84.val[3], v84.val[3], 5uLL);
          v39 = (uint32x4_t)vqtbl1q_s8(v84.val[1], (int8x16_t)xmmword_208F04F20);
          v40 = (uint32x4_t)vqtbl1q_s8(v84.val[1], (int8x16_t)xmmword_208F04F30);
          v41 = (uint32x4_t)vqtbl1q_s8(v84.val[1], (int8x16_t)xmmword_208F04F40);
          v42 = (uint32x4_t)vqtbl1q_s8(v84.val[1], (int8x16_t)xmmword_208F04F50);
          v43 = vmovl_high_u8((uint8x16_t)v84.val[3]);
          v44 = vshlq_n_s8(v83.val[1], 3uLL);
          v84.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v84.val[3].i8);
          v84.val[2] = vshlq_n_s8(v83.val[3], 3uLL);
          v84.val[3] = vorrq_s8(vshlq_n_s8(v33, 2uLL), (int8x16_t)vshrq_n_u8(v32, 4uLL));
          v45 = (uint8x16_t)vorrq_s8(vshlq_n_s8(v36, 2uLL), (int8x16_t)vshrq_n_u8(v35, 4uLL));
          v46 = vmovl_high_u8(v38);
          v47 = vaddw_high_u16((uint32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_208F04F20), v46);
          v48 = vaddw_u16((uint32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_208F04F30), *(uint16x4_t *)v46.i8);
          v49 = (uint8x16_t)vandq_s8(v84.val[2], v31);
          v84.val[1] = vorrq_s8(v84.val[2], (int8x16_t)vshrq_n_u8((uint8x16_t)v83.val[2], 5uLL));
          v84.val[2] = vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v83.val[0], 2uLL), v83.val[0], 3uLL);
          v83.val[1] = vsriq_n_s8(v83.val[1], v83.val[1], 5uLL);
          v50 = (uint8x16_t)vorrq_s8(vshlq_n_s8(vorrq_s8(v44, (int8x16_t)vshrq_n_u8((uint8x16_t)v83.val[0], 5uLL)), 2uLL), (int8x16_t)vshrq_n_u8((uint8x16_t)vandq_s8(v44, v31), 4uLL));
          v51 = (uint8x16_t)vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v83.val[2], 2uLL), v83.val[2], 3uLL);
          v83.val[3] = vsriq_n_s8(v83.val[3], v83.val[3], 5uLL);
          v84.val[1] = vorrq_s8(vshlq_n_s8(v84.val[1], 2uLL), (int8x16_t)vshrq_n_u8(v49, 4uLL));
          v52 = (uint32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_208F04F50);
          v53 = vmovl_u8(*(uint8x8_t *)v38.i8);
          v54 = vaddw_high_u16((uint32x4_t)vqtbl1q_s8(v37, (int8x16_t)xmmword_208F04F40), v53);
          v55 = vaddw_u16(v52, *(uint16x4_t *)v53.i8);
          v56 = vmovl_high_u8((uint8x16_t)v84.val[2]);
          v84.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v84.val[2].i8);
          v57 = (int32x4_t)vaddw_u16(v55, *(uint16x4_t *)v84.val[2].i8);
          v84.val[2] = (int8x16_t)vaddw_high_u16(v54, (uint16x8_t)v84.val[2]);
          v58 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v51.i8);
          v59 = (int8x16_t)vmovl_high_u8(v51);
          *(uint16x4_t *)v47.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_high_u16(v47, v56)), (uint16x4_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL));
          *(int16x4_t *)v48.i8 = vmovn_s32((int32x4_t)vaddw_u16(v48, *(uint16x4_t *)v56.i8));
          v56.i64[0] = vextq_s8(v58, v58, 8uLL).u64[0];
          *(uint16x4_t *)v48.i8 = vrhadd_u16(*(uint16x4_t *)v48.i8, *(uint16x4_t *)v59.i8);
          *(uint16x4_t *)v58.i8 = vrhadd_u16((uint16x4_t)vmovn_s32(v57), *(uint16x4_t *)v58.i8);
          v60 = vmovl_u8(*(uint8x8_t *)v83.val[1].i8);
          *(uint16x4_t *)v84.val[2].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v84.val[2]), *(uint16x4_t *)v56.i8);
          v61 = vmovl_high_u8((uint8x16_t)v83.val[1]);
          v62 = (int8x16_t)vmovl_high_u8((uint8x16_t)v83.val[3]);
          v83.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v83.val[3].i8);
          v83.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v45.i8);
          v83.val[2] = (int8x16_t)vaddw_u16((uint32x4_t)vqtbl1q_s8(v84.val[3], (int8x16_t)xmmword_208F04F50), *(uint16x4_t *)v83.val[3].i8);
          v83.val[1] = (int8x16_t)vaddw_high_u16((uint32x4_t)vqtbl1q_s8(v84.val[3], (int8x16_t)xmmword_208F04F40), (uint16x8_t)v83.val[3]);
          v83.val[3] = vqtbl1q_s8(v84.val[3], (int8x16_t)xmmword_208F04F20);
          v63 = vmovl_high_u8(v45);
          v84.val[3] = (int8x16_t)vaddw_u16((uint32x4_t)vqtbl1q_s8(v84.val[3], (int8x16_t)xmmword_208F04F30), *(uint16x4_t *)v63.i8);
          v83.val[3] = (int8x16_t)vaddw_high_u16((uint32x4_t)v83.val[3], v63);
          v64 = vmovl_high_u8(v50);
          v83.val[3] = (int8x16_t)vaddw_high_u16((uint32x4_t)v83.val[3], v64);
          v84.val[3] = (int8x16_t)vaddw_u16((uint32x4_t)v84.val[3], *(uint16x4_t *)v64.i8);
          v65 = vmovl_u8(*(uint8x8_t *)v50.i8);
          v83.val[1] = (int8x16_t)vaddw_high_u16((uint32x4_t)v83.val[1], v65);
          v66 = (int32x4_t)vaddw_u16((uint32x4_t)v83.val[2], *(uint16x4_t *)v65.i8);
          v83.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v84.val[1].i8);
          *(uint16x4_t *)v66.i8 = vrhadd_u16((uint16x4_t)vmovn_s32(v66), *(uint16x4_t *)v83.val[2].i8);
          *(uint16x4_t *)v83.val[1].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v83.val[1]), (uint16x4_t)*(_OWORD *)&vextq_s8(v83.val[2], v83.val[2], 8uLL));
          v83.val[2] = (int8x16_t)vaddw_u16(v42, *(uint16x4_t *)v84.val[0].i8);
          v84.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v84.val[1]);
          v67 = (int32x4_t)vaddw_high_u16(vaddw_high_u16(v39, v43), v61);
          v68 = (int32x4_t)vaddw_u16(vaddw_u16(v40, *(uint16x4_t *)v43.i8), *(uint16x4_t *)v61.i8);
          v61.i64[0] = vextq_s8(v84.val[1], v84.val[1], 8uLL).u64[0];
          *(uint16x4_t *)v84.val[1].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v84.val[3]), *(uint16x4_t *)v84.val[1].i8);
          v84.val[0] = (int8x16_t)vaddw_high_u16(vaddw_high_u16(v41, (uint16x8_t)v84.val[0]), v60);
          v83.val[2] = (int8x16_t)vaddw_u16((uint32x4_t)v83.val[2], *(uint16x4_t *)v60.i8);
          v60.i64[0] = vextq_s8(v83.val[0], v83.val[0], 8uLL).u64[0];
          *(uint16x4_t *)v83.val[3].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v83.val[3]), *(uint16x4_t *)v61.i8);
          *(uint16x4_t *)v83.val[0].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v83.val[2]), *(uint16x4_t *)v83.val[0].i8);
          *(uint16x4_t *)v83.val[2].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v84.val[0]), *(uint16x4_t *)v60.i8);
          *(uint16x4_t *)v84.val[0].i8 = vrhadd_u16((uint16x4_t)vmovn_s32(v68), *(uint16x4_t *)v62.i8);
          *(uint16x4_t *)v84.val[3].i8 = vrhadd_u16((uint16x4_t)vmovn_s32(v67), (uint16x4_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
          v82.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v84.val[3].i8, (uint16x4_t)0x12001200120012), *(uint16x4_t *)v47.i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v83.val[3].i8, (uint16x4_t)0x24002400240024), v27), 8uLL);
          v82.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v84.val[0].i8, (uint16x4_t)0x12001200120012), *(uint16x4_t *)v48.i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v84.val[1].i8, (uint16x4_t)0x24002400240024), v27), 8uLL);
          v82.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v83.val[2].i8, (uint16x4_t)0x12001200120012), *(uint16x4_t *)v84.val[2].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v83.val[1].i8, (uint16x4_t)0x24002400240024), v27), 8uLL);
          v82.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v83.val[0].i8, (uint16x4_t)0x12001200120012), *(uint16x4_t *)v58.i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v66.i8, (uint16x4_t)0x24002400240024), v27), 8uLL);
          v83.val[2] = (int8x16_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v83.val[2].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v84.val[2].i8, (uint16x4_t)0x8000800080008), *(uint16x4_t *)v83.val[1].i8, (uint16x4_t)0x2E002E002E002ELL);
          v84.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v84.val[3].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v47.i8, (uint16x4_t)0x8000800080008), *(uint16x4_t *)v83.val[3].i8, (uint16x4_t)0x2E002E002E002ELL), v27), 8uLL);
          v84.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v84.val[0].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v48.i8, (uint16x4_t)0x8000800080008), *(uint16x4_t *)v84.val[1].i8, (uint16x4_t)0x2E002E002E002ELL), v27), 8uLL);
          v84.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)v83.val[2], v27), 8uLL);
          *a3++ = vqtbl4q_s8(v82, (int8x16_t)xmmword_208F05040);
          v84.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v83.val[0].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v58.i8, (uint16x4_t)0x8000800080008), *(uint16x4_t *)v66.i8, (uint16x4_t)0x2E002E002E002ELL), v27), 8uLL);
          *a4++ = vqtbl4q_s8(v84, (int8x16_t)xmmword_208F05040);
          v28 -= 16;
        }
        while (v28);
        if ((v25 & 0xFFFFFFF0) == v25)
          goto LABEL_44;
        goto LABEL_42;
      }
    }
    else
    {
      v7 = 0;
    }
    v10 = (unsigned __int8 *)result;
    v9 = a3;
    v8 = a4;
LABEL_42:
    v69.i64[0] = 0xFF000000FFLL;
    v69.i64[1] = 0xFF000000FFLL;
    result = 65489;
    do
    {
      v70.i16[0] = v10[1];
      v70.i16[1] = v10[3];
      v71.i16[0] = *v10;
      v71.i16[1] = v10[2];
      v71.i16[2] = *v5;
      v71.i16[3] = v5[2];
      v70.i16[2] = v5[1];
      v70.i16[3] = v5[3];
      v72 = (int8x8_t)vshl_n_s16(v70, 3uLL);
      v73 = (((8 * *v10) | (*v10 >> 2) & 7)
           + ((8 * v10[2]) | (v10[2] >> 2) & 7)
           + ((8 * *v5) | (*v5 >> 2) & 7)
           + ((8 * v5[2]) | (v5[2] >> 2) & 7)
           + 1) >> 1;
      v74 = ((v10[1] & 0xF8 | (v10[1] >> 5))
                         + (v10[3] & 0xF8 | (v10[3] >> 5))
                         + (v5[1] & 0xF8 | (v5[1] >> 5))
                         + (v5[3] & 0xF8 | (v5[3] >> 5))
                         + 1) >> 1;
      v75 = (vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vshl_n_s16((int16x4_t)vorr_s8(v72, (int8x8_t)vshr_n_u16(v71, 5uLL)), 2uLL), (int8x8_t)vshr_n_u16((uint16x4_t)vand_s8(v72, (int8x8_t)0x38003800380038), 4uLL))), v69))+ 1) >> 1;
      v9->i8[0] = (unsigned __int16)(56 * v73 - 19 * v74 - 37 * v75 - 32640) >> 8;
      v9 = (int8x16_t *)((char *)v9 + 1);
      v8->i8[0] = (unsigned __int16)(-9 * v73 + 56 * v74 - 47 * v75 - 32640) >> 8;
      v8 = (int8x16_t *)((char *)v8 + 1);
      v10 += 4;
      v5 += 4;
      v7 += 2;
    }
    while (v7 < a5 - 1);
    goto LABEL_44;
  }
  v8 = a4;
  v9 = a3;
  v10 = (unsigned __int8 *)result;
LABEL_44:
  if ((a5 & 1) != 0)
  {
    v76 = *v10;
    v77 = v10[1];
    v78 = *v5;
    v79 = v5[1];
    v80 = ((8 * v78) | (v78 >> 2) & 7) + ((8 * v76) | (v76 >> 2) & 7);
    LOWORD(v76) = ((v78 >> 3) & 0x1C | (32 * v79) | (v79 >> 1) & 3)
                + ((v76 >> 3) & 0x1C | (32 * v77) | (v77 >> 1) & 3);
    v81 = (v79 & 0xF8 | (v79 >> 5)) + (v77 & 0xF8 | (v77 >> 5));
    v9->i8[0] = (unsigned __int16)(56 * v80 - 19 * v81 - 37 * v76 - 32640) >> 8;
    v8->i8[0] = (unsigned __int16)(-9 * v80 + 56 * v81 - 47 * v76 - 32640) >> 8;
  }
  return result;
}

unint64_t ARGB1555ToUVRow_C(unint64_t result, int a2, int8x16_t *a3, int8x16_t *a4, int a5, double a6, double a7, double a8, int16x4_t a9)
{
  unsigned __int8 *v9;
  unsigned int v10;
  int v11;
  int8x16_t *v12;
  int8x16_t *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v21;
  BOOL v23;
  BOOL v25;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int32x4_t v33;
  uint64_t v34;
  const char *v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  uint8x16_t v42;
  uint8x16_t v43;
  int8x16_t v44;
  uint8x16_t v45;
  int8x16_t v46;
  uint8x16_t v47;
  uint16x8_t v48;
  uint32x4_t v49;
  uint32x4_t v50;
  uint8x16_t v51;
  int8x16_t v52;
  int32x4_t v53;
  int32x4_t v54;
  uint32x4_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint16x8_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  int32x4_t v61;
  uint16x8_t v62;
  uint32x4_t v63;
  uint16x8_t v64;
  int32x4_t v65;
  int8x16_t v66;
  int8x16_t v67;
  uint32x4_t v68;
  uint32x4_t v69;
  uint32x4_t v70;
  int32x4_t v71;
  unsigned int v72;
  uint16x4_t v73;
  int8x8_t v74;
  int8x8_t v75;
  int16x4_t v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int8x16x4_t v90;
  int8x16x4_t v91;
  int8x16x4_t v92;

  v9 = (unsigned __int8 *)(result + a2);
  v10 = a5 - 2;
  if (a5 >= 2)
  {
    if (v10 >= 0x1E)
    {
      v11 = 0;
      v15 = v10 >> 1;
      v16 = &a3->i8[v15 + 1];
      v17 = &a4->i8[v15 + 1];
      v18 = result + 4 * v15 + 4;
      v19 = v18 + a2;
      v21 = v19 > (unint64_t)a3 && v9 < (unsigned __int8 *)v16;
      v23 = v18 > (unint64_t)a3 && (unint64_t)v16 > result;
      v25 = v19 > (unint64_t)a4 && v9 < (unsigned __int8 *)v17;
      v27 = v18 > (unint64_t)a4 && (unint64_t)v17 > result;
      v28 = v16 > (char *)a4 && v17 > (char *)a3;
      if (!v28 && !v21 && !v23 && !v25 && !v27)
      {
        v29 = (v15 + 1);
        v30 = 4 * (v29 & 0xFFFFFFF0);
        v14 = (unsigned __int8 *)(result + v30);
        v13 = (int8x16_t *)((char *)a3 + (v29 & 0xFFFFFFF0));
        v12 = (int8x16_t *)((char *)a4 + (v29 & 0xFFFFFFF0));
        v9 += v30;
        v11 = 2 * (v29 & 0xFFFFFFF0);
        v31.i64[0] = 0x1818181818181818;
        v31.i64[1] = 0x1818181818181818;
        v32.i64[0] = 0xF8F8F8F8F8F8F8F8;
        v32.i64[1] = 0xF8F8F8F8F8F8F8F8;
        *(double *)&a9 = NAN;
        v33 = vdupq_n_s32(0x8080u);
        v34 = v29 & 0xFFFFFFF0;
        do
        {
          v35 = (const char *)(result + a2);
          v91 = vld4q_s8((const char *)result);
          result += 64;
          v90 = vld4q_s8(v35);
          v36 = (int8x16_t)vsraq_n_u8((uint8x16_t)vandq_s8(vshlq_n_s8(v91.val[1], 3uLL), v31), (uint8x16_t)v91.val[0], 5uLL);
          v37 = (int8x16_t)vsraq_n_u8((uint8x16_t)vandq_s8(vshlq_n_s8(v91.val[3], 3uLL), v31), (uint8x16_t)v91.val[2], 5uLL);
          v38 = vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v91.val[0], 2uLL), v91.val[0], 3uLL);
          v39 = vorrq_s8(vshlq_n_s8(v36, 3uLL), (int8x16_t)vshrq_n_u8((uint8x16_t)v36, 2uLL));
          v40 = vbslq_s8(v32, vaddq_s8(v91.val[1], v91.val[1]), (int8x16_t)vshrq_n_u8((uint8x16_t)v91.val[1], 4uLL));
          v41 = (int8x16_t)vsraq_n_u8((uint8x16_t)vandq_s8(vshlq_n_s8(v90.val[1], 3uLL), v31), (uint8x16_t)v90.val[0], 5uLL);
          v42 = (uint8x16_t)vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v91.val[2], 2uLL), v91.val[2], 3uLL);
          v43 = (uint8x16_t)vorrq_s8(vshlq_n_s8(v37, 3uLL), (int8x16_t)vshrq_n_u8((uint8x16_t)v37, 2uLL));
          v44 = (int8x16_t)vsraq_n_u8((uint8x16_t)vandq_s8(vshlq_n_s8(v90.val[3], 3uLL), v31), (uint8x16_t)v90.val[2], 5uLL);
          v91.val[3] = vbslq_s8(v32, vaddq_s8(v91.val[3], v91.val[3]), (int8x16_t)vshrq_n_u8((uint8x16_t)v91.val[3], 4uLL));
          v91.val[0] = vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v90.val[0], 2uLL), v90.val[0], 3uLL);
          v91.val[1] = vshlq_n_s8(v41, 3uLL);
          v45 = (uint8x16_t)vbslq_s8(v32, vaddq_s8(v90.val[1], v90.val[1]), (int8x16_t)vshrq_n_u8((uint8x16_t)v90.val[1], 4uLL));
          v91.val[2] = vsliq_n_s8((int8x16_t)vshrq_n_u8((uint8x16_t)v90.val[2], 2uLL), v90.val[2], 3uLL);
          v46 = (int8x16_t)vshrq_n_u8((uint8x16_t)v41, 2uLL);
          v47 = (uint8x16_t)vbslq_s8(v32, vaddq_s8(v90.val[3], v90.val[3]), (int8x16_t)vshrq_n_u8((uint8x16_t)v90.val[3], 4uLL));
          v90.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v42.i8);
          v90.val[1] = (int8x16_t)vaddw_u16((uint32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_208F04F50), *(uint16x4_t *)v90.val[3].i8);
          v90.val[0] = (int8x16_t)vaddw_high_u16((uint32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_208F04F40), (uint16x8_t)v90.val[3]);
          v90.val[3] = vqtbl1q_s8(v38, (int8x16_t)xmmword_208F04F20);
          v48 = vmovl_high_u8(v42);
          v49 = vaddw_u16((uint32x4_t)vqtbl1q_s8(v38, (int8x16_t)xmmword_208F04F30), *(uint16x4_t *)v48.i8);
          v50 = vaddw_high_u16((uint32x4_t)v90.val[3], v48);
          v90.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v91.val[0].i8);
          v91.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v91.val[0]);
          v51 = (uint8x16_t)vorrq_s8(v91.val[1], v46);
          v52 = (int8x16_t)vmovl_high_u8((uint8x16_t)v91.val[2]);
          v53 = (int32x4_t)vaddw_high_u16(v50, (uint16x8_t)v91.val[0]);
          v91.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v91.val[2].i8);
          v90.val[2] = vorrq_s8(vshlq_n_s8(v44, 3uLL), (int8x16_t)vshrq_n_u8((uint8x16_t)v44, 2uLL));
          v54 = (int32x4_t)vaddw_high_u16((uint32x4_t)v90.val[0], (uint16x8_t)v90.val[3]);
          *(int16x4_t *)v90.val[0].i8 = vmovn_s32((int32x4_t)vaddw_u16((uint32x4_t)v90.val[1], *(uint16x4_t *)v90.val[3].i8));
          *(int16x4_t *)v90.val[1].i8 = vmovn_s32(v54);
          *(uint16x4_t *)v54.i8 = vrhadd_u16(*(uint16x4_t *)v90.val[0].i8, *(uint16x4_t *)v91.val[1].i8);
          *(uint16x4_t *)v91.val[1].i8 = vrhadd_u16(*(uint16x4_t *)v90.val[1].i8, (uint16x4_t)*(_OWORD *)&vextq_s8(v91.val[1], v91.val[1], 8uLL));
          *(uint16x4_t *)v91.val[0].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_u16(v49, *(uint16x4_t *)v91.val[0].i8)), *(uint16x4_t *)v52.i8);
          v90.val[0] = vqtbl1q_s8(v39, (int8x16_t)xmmword_208F04F20);
          *(uint16x4_t *)v91.val[2].i8 = vrhadd_u16((uint16x4_t)vmovn_s32(v53), (uint16x4_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL));
          v55 = (uint32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_208F04F30);
          v90.val[1] = vqtbl1q_s8(v39, (int8x16_t)xmmword_208F04F40);
          v90.val[3] = (int8x16_t)vmovl_high_u8(v43);
          v56 = vmovl_u8(*(uint8x8_t *)v43.i8);
          v57 = vmovl_u8(*(uint8x8_t *)v51.i8);
          v58 = vmovl_high_u8(v51);
          v59 = vaddw_u16((uint32x4_t)vqtbl1q_s8(v39, (int8x16_t)xmmword_208F04F50), *(uint16x4_t *)v56.i8);
          v60 = vaddw_high_u16((uint32x4_t)v90.val[1], v56);
          v90.val[1] = (int8x16_t)vmovl_high_u8((uint8x16_t)v90.val[2]);
          v90.val[2] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v90.val[2].i8);
          v90.val[0] = (int8x16_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)v90.val[0], (uint16x8_t)v90.val[3]), v58);
          v61 = (int32x4_t)vaddw_u16(vaddw_u16(v55, *(uint16x4_t *)v90.val[3].i8), *(uint16x4_t *)v58.i8);
          *(uint16x4_t *)v59.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_u16(v59, *(uint16x4_t *)v57.i8)), *(uint16x4_t *)v90.val[2].i8);
          *(uint16x4_t *)v60.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_high_u16(v60, v57)), (uint16x4_t)*(_OWORD *)&vextq_s8(v90.val[2], v90.val[2], 8uLL));
          v90.val[3] = vqtbl1q_s8(v40, (int8x16_t)xmmword_208F04F30);
          v62 = vmovl_high_u8((uint8x16_t)v91.val[3]);
          v91.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v91.val[3].i8);
          v63 = vaddw_high_u16((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_208F04F40), (uint16x8_t)v91.val[3]);
          v90.val[2] = (int8x16_t)vmovl_high_u8(v45);
          v64 = vmovl_u8(*(uint8x8_t *)v45.i8);
          v91.val[3] = (int8x16_t)vaddw_u16(vaddw_u16((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_208F04F50), *(uint16x4_t *)v91.val[3].i8), *(uint16x4_t *)v64.i8);
          v65 = (int32x4_t)vaddw_high_u16(v63, v64);
          v66 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v47.i8);
          v67 = (int8x16_t)vmovl_high_u8(v47);
          *(uint16x4_t *)v40.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16((uint32x4_t)vqtbl1q_s8(v40, (int8x16_t)xmmword_208F04F20), v62), (uint16x8_t)v90.val[2])), (uint16x4_t)*(_OWORD *)&vextq_s8(v67, v67, 8uLL));
          *(uint16x4_t *)v61.i8 = vrhadd_u16((uint16x4_t)vmovn_s32(v61), *(uint16x4_t *)v90.val[1].i8);
          *(uint16x4_t *)v67.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_u16(vaddw_u16((uint32x4_t)v90.val[3], *(uint16x4_t *)v62.i8), *(uint16x4_t *)v90.val[2].i8)), *(uint16x4_t *)v67.i8);
          *(uint16x4_t *)v65.i8 = vrhadd_u16((uint16x4_t)vmovn_s32(v65), (uint16x4_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
          *(uint16x4_t *)v90.val[0].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v90.val[0]), (uint16x4_t)*(_OWORD *)&vextq_s8(v90.val[1], v90.val[1], 8uLL));
          *(uint16x4_t *)v91.val[3].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v91.val[3]), *(uint16x4_t *)v66.i8);
          v68 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v91.val[2].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v40.i8, (uint16x4_t)0x12001200120012), *(uint16x4_t *)v90.val[0].i8, (uint16x4_t)0x24002400240024), v33), 8uLL);
          v69 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v91.val[0].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v67.i8, (uint16x4_t)0x12001200120012), *(uint16x4_t *)v61.i8, (uint16x4_t)0x24002400240024), v33), 8uLL);
          v70 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v91.val[1].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v65.i8, (uint16x4_t)0x12001200120012), *(uint16x4_t *)v60.i8, (uint16x4_t)0x24002400240024), v33), 8uLL);
          v90.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v54.i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v91.val[3].i8, (uint16x4_t)0x12001200120012), *(uint16x4_t *)v59.i8, (uint16x4_t)0x24002400240024), v33), 8uLL);
          v71 = (int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v54.i8, (uint16x4_t)0x8000800080008), *(uint16x4_t *)v91.val[3].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v59.i8, (uint16x4_t)0x2E002E002E002ELL);
          v92.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v91.val[2].i8, (uint16x4_t)0x8000800080008), *(uint16x4_t *)v40.i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v90.val[0].i8, (uint16x4_t)0x2E002E002E002ELL), v33), 8uLL);
          v92.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v91.val[0].i8, (uint16x4_t)0x8000800080008), *(uint16x4_t *)v67.i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v61.i8, (uint16x4_t)0x2E002E002E002ELL), v33), 8uLL);
          v92.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v91.val[1].i8, (uint16x4_t)0x8000800080008), *(uint16x4_t *)v65.i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v60.i8, (uint16x4_t)0x2E002E002E002ELL), v33), 8uLL);
          *a3++ = vqtbl4q_s8(*(int8x16x4_t *)((char *)&v90 + 48), (int8x16_t)xmmword_208F05040);
          v92.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v71, v33), 8uLL);
          *a4++ = vqtbl4q_s8(v92, (int8x16_t)xmmword_208F05040);
          v34 -= 16;
        }
        while (v34);
        if ((v29 & 0xFFFFFFF0) == v29)
          goto LABEL_44;
        goto LABEL_42;
      }
    }
    else
    {
      v11 = 0;
    }
    v14 = (unsigned __int8 *)result;
    v13 = a3;
    v12 = a4;
LABEL_42:
    result = 65489;
    do
    {
      v72 = ((8 * *v14) | (*v14 >> 2) & 7)
          + ((8 * v14[2]) | (v14[2] >> 2) & 7)
          + ((8 * *v9) | (*v9 >> 2) & 7)
          + ((8 * v9[2]) | (v9[2] >> 2) & 7)
          + 1;
      a9.i8[0] = v14[1];
      a9.i8[2] = v14[3];
      a9.i8[4] = v9[1];
      a9.i8[6] = v9[3];
      v73.i16[0] = *v14;
      v73.i16[1] = v14[2];
      v73.i16[2] = *v9;
      v73.i16[3] = v9[2];
      v74 = (int8x8_t)vshl_n_s16(a9, 3uLL);
      v75 = (int8x8_t)vadd_s16(a9, a9);
      a9.i16[0] = a9.u8[0];
      a9.i16[1] = a9.u8[2];
      a9.i16[2] = a9.u8[4];
      a9.i16[3] = a9.u8[6];
      v76 = (int16x4_t)vorr_s8(vand_s8(v74, (int8x8_t)0x18001800180018), (int8x8_t)vshr_n_u16(v73, 5uLL));
      a9 = (int16x4_t)(*(_QWORD *)&vshr_n_u16((uint16x4_t)a9, 4uLL) & 0xFFF7FFF7FFF7FFF7);
      v77 = (vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vand_s8(v75, (int8x8_t)0xF800F800F800F8), (int8x8_t)a9)))+ 1) >> 1;
      v78 = (vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vshl_n_s16(v76, 3uLL), (int8x8_t)vshr_n_u16((uint16x4_t)v76, 2uLL))))+ 1) >> 1;
      v13->i8[0] = (unsigned __int16)(-19 * v77 + 56 * (v72 >> 1) - 37 * v78 - 32640) >> 8;
      v13 = (int8x16_t *)((char *)v13 + 1);
      v12->i8[0] = (unsigned __int16)(56 * v77 - 9 * (v72 >> 1) - 47 * v78 - 32640) >> 8;
      v12 = (int8x16_t *)((char *)v12 + 1);
      v14 += 4;
      v9 += 4;
      v11 += 2;
    }
    while (v11 < a5 - 1);
    goto LABEL_44;
  }
  v12 = a4;
  v13 = a3;
  v14 = (unsigned __int8 *)result;
LABEL_44:
  if ((a5 & 1) != 0)
  {
    v79 = *v14;
    v80 = v14[1];
    v81 = (v79 >> 5) & 0xFFFFFFE7 | (8 * (v80 & 3));
    v82 = *v9;
    v83 = v9[1];
    v84 = (v82 >> 5) & 0xFFFFFFE7 | (8 * (v83 & 3));
    v85 = (8 * v79) | (v79 >> 2) & 7;
    v86 = (v81 >> 2) | (8 * v81);
    v87 = (2 * v80) & 0xF8 | (v80 >> 4) & 7;
    LOBYTE(v80) = (8 * v82) | (v82 >> 2) & 7;
    v88 = (v84 >> 2) | (8 * v84);
    v89 = (2 * v83) & 0xF8 | (v83 >> 4) & 7;
    LOWORD(v83) = v80 + v85;
    LOWORD(v86) = v88 + v86;
    v13->i8[0] = (unsigned __int16)(-19 * (v89 + v87) + 56 * v83 - 37 * v86 - 32640) >> 8;
    v12->i8[0] = (unsigned __int16)(56 * (v89 + v87) - 9 * v83 - 47 * v86 - 32640) >> 8;
  }
  return result;
}

char *ARGB4444ToUVRow_C(char *result, int a2, int8x16_t *a3, int8x16_t *a4, int a5)
{
  unsigned __int8 *v5;
  unsigned int v6;
  int v7;
  int8x16_t *v8;
  int8x16_t *v9;
  const char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v17;
  BOOL v19;
  BOOL v21;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int32x4_t v27;
  uint64_t v28;
  const char *v29;
  int8x16_t v30;
  int8x16_t v31;
  uint8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  uint32x4_t v35;
  uint32x4_t v36;
  uint32x4_t v37;
  uint32x4_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  uint16x8_t v42;
  int8x16_t v43;
  uint32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  int8x16_t v47;
  uint32x4_t v48;
  uint16x8_t v49;
  uint8x16_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  int32x4_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  uint32x4_t v61;
  uint32x4_t v62;
  int8x16_t v63;
  int32x2_t v64;
  int32x2_t v65;
  int32x2_t v66;
  int32x2_t v67;
  int32x2_t v68;
  unsigned __int32 v69;
  int32x2_t v70;
  int32x2_t v71;
  unsigned int v72;
  unsigned int v73;
  __int16 v74;
  int v75;
  __int16 v76;
  int8x16x4_t v77;
  int8x16x4_t v78;

  v5 = (unsigned __int8 *)&result[a2];
  v6 = a5 - 2;
  if (a5 >= 2)
  {
    if (v6 >= 0x1E)
    {
      v7 = 0;
      v11 = v6 >> 1;
      v12 = &a3->i8[v11 + 1];
      v13 = &a4->i8[v11 + 1];
      v14 = (unint64_t)&result[4 * v11 + 4];
      v15 = v14 + a2;
      v17 = v15 > (unint64_t)a3 && v5 < (unsigned __int8 *)v12;
      v19 = v14 > (unint64_t)a3 && v12 > result;
      v21 = v15 > (unint64_t)a4 && v5 < (unsigned __int8 *)v13;
      v23 = v14 > (unint64_t)a4 && v13 > result;
      v24 = v12 > (char *)a4 && v13 > (char *)a3;
      if (!v24 && !v17 && !v19 && !v21 && !v23)
      {
        v25 = (v11 + 1);
        v26 = 4 * (v25 & 0xFFFFFFF0);
        v10 = &result[v26];
        v9 = (int8x16_t *)((char *)a3 + (v25 & 0xFFFFFFF0));
        v8 = (int8x16_t *)((char *)a4 + (v25 & 0xFFFFFFF0));
        v5 += v26;
        v7 = 2 * (v25 & 0xFFFFFFF0);
        v27 = vdupq_n_s32(0x8080u);
        v28 = v25 & 0xFFFFFFF0;
        do
        {
          v29 = &result[a2];
          v78 = vld4q_s8(result);
          result += 64;
          v30 = v78.val[0];
          v77 = vld4q_s8(v29);
          v78.val[0] = vsriq_n_s8(v78.val[0], v78.val[0], 4uLL);
          v31 = vsliq_n_s8(v30, v30, 4uLL);
          v78.val[1] = vsliq_n_s8(v78.val[1], v78.val[1], 4uLL);
          v32 = (uint8x16_t)vsliq_n_s8(v78.val[2], v78.val[2], 4uLL);
          v78.val[2] = vsriq_n_s8(v78.val[2], v78.val[2], 4uLL);
          v78.val[3] = vsliq_n_s8(v78.val[3], v78.val[3], 4uLL);
          v33 = v77.val[0];
          v77.val[0] = vsriq_n_s8(v77.val[0], v77.val[0], 4uLL);
          v77.val[1] = vsliq_n_s8(v77.val[1], v77.val[1], 4uLL);
          v34 = v77.val[2];
          v77.val[2] = vsriq_n_s8(v77.val[2], v77.val[2], 4uLL);
          v35 = (uint32x4_t)vqtbl1q_s8(v78.val[0], (int8x16_t)xmmword_208F04F20);
          v77.val[3] = vsliq_n_s8(v77.val[3], v77.val[3], 4uLL);
          v36 = (uint32x4_t)vqtbl1q_s8(v78.val[0], (int8x16_t)xmmword_208F04F30);
          v37 = (uint32x4_t)vqtbl1q_s8(v78.val[0], (int8x16_t)xmmword_208F04F40);
          v38 = (uint32x4_t)vqtbl1q_s8(v78.val[0], (int8x16_t)xmmword_208F04F50);
          v39 = vmovl_high_u8((uint8x16_t)v78.val[2]);
          v40 = vmovl_u8(*(uint8x8_t *)v78.val[2].i8);
          v41 = vmovl_u8(*(uint8x8_t *)v77.val[0].i8);
          v42 = vmovl_high_u8((uint8x16_t)v77.val[0]);
          v43 = (int8x16_t)vmovl_high_u8((uint8x16_t)v77.val[2]);
          v44 = (uint32x4_t)vqtbl1q_s8(v78.val[1], (int8x16_t)xmmword_208F04F20);
          v45 = (uint32x4_t)vqtbl1q_s8(v78.val[1], (int8x16_t)xmmword_208F04F30);
          v46 = (uint32x4_t)vqtbl1q_s8(v78.val[1], (int8x16_t)xmmword_208F04F40);
          v47 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v77.val[2].i8);
          v48 = (uint32x4_t)vqtbl1q_s8(v78.val[1], (int8x16_t)xmmword_208F04F50);
          v49 = vmovl_high_u8((uint8x16_t)v78.val[3]);
          v78.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v78.val[3].i8);
          v78.val[1] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v77.val[1].i8);
          v78.val[2] = (int8x16_t)vmovl_high_u8((uint8x16_t)v77.val[1]);
          v78.val[3] = (int8x16_t)vmovl_high_u8((uint8x16_t)v77.val[3]);
          v77.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v77.val[3].i8);
          v77.val[3] = (int8x16_t)vmovl_high_u8(v32);
          v77.val[2] = (int8x16_t)vaddw_high_u16((uint32x4_t)vqtbl1q_s8(v31, (int8x16_t)xmmword_208F04F20), (uint16x8_t)v77.val[3]);
          v50 = (uint8x16_t)vsliq_n_s8(v33, v33, 4uLL);
          v77.val[1] = (int8x16_t)vaddw_u16((uint32x4_t)vqtbl1q_s8(v31, (int8x16_t)xmmword_208F04F30), *(uint16x4_t *)v77.val[3].i8);
          v77.val[3] = vqtbl1q_s8(v31, (int8x16_t)xmmword_208F04F50);
          v51 = vmovl_u8(*(uint8x8_t *)v32.i8);
          v52 = vaddw_high_u16((uint32x4_t)vqtbl1q_s8(v31, (int8x16_t)xmmword_208F04F40), v51);
          v53 = (uint8x16_t)vsliq_n_s8(v34, v34, 4uLL);
          v77.val[3] = (int8x16_t)vaddw_u16((uint32x4_t)v77.val[3], *(uint16x4_t *)v51.i8);
          v54 = vmovl_high_u8(v50);
          v55 = vmovl_u8(*(uint8x8_t *)v50.i8);
          v77.val[3] = (int8x16_t)vaddw_u16((uint32x4_t)v77.val[3], *(uint16x4_t *)v55.i8);
          v56 = (int32x4_t)vaddw_high_u16(v52, v55);
          v57 = (int8x16_t)vmovl_high_u8(v53);
          v77.val[1] = (int8x16_t)vaddw_u16((uint32x4_t)v77.val[1], *(uint16x4_t *)v54.i8);
          *(uint16x4_t *)v77.val[2].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_high_u16((uint32x4_t)v77.val[2], v54)), (uint16x4_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL));
          v58 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v53.i8);
          *(uint16x4_t *)v77.val[1].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v77.val[1]), *(uint16x4_t *)v57.i8);
          *(uint16x4_t *)v56.i8 = vrhadd_u16((uint16x4_t)vmovn_s32(v56), (uint16x4_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL));
          *(uint16x4_t *)v77.val[3].i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)v77.val[3]), *(uint16x4_t *)v58.i8);
          *(uint16x4_t *)v58.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_u16(vaddw_u16(v38, *(uint16x4_t *)v40.i8), *(uint16x4_t *)v41.i8)), *(uint16x4_t *)v47.i8);
          *(uint16x4_t *)v47.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(v37, v40), v41)), (uint16x4_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL));
          *(uint16x4_t *)v57.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_u16(vaddw_u16(v36, *(uint16x4_t *)v39.i8), *(uint16x4_t *)v42.i8)), *(uint16x4_t *)v43.i8);
          *(uint16x4_t *)v53.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(v35, v39), v42)), (uint16x4_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL));
          *(uint16x4_t *)v48.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_u16(vaddw_u16(v48, *(uint16x4_t *)v78.val[0].i8), *(uint16x4_t *)v78.val[1].i8)), *(uint16x4_t *)v77.val[0].i8);
          *(uint16x4_t *)v46.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(v46, (uint16x8_t)v78.val[0]), (uint16x8_t)v78.val[1])), (uint16x4_t)*(_OWORD *)&vextq_s8(v77.val[0], v77.val[0], 8uLL));
          *(uint16x4_t *)v45.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_u16(vaddw_u16(v45, *(uint16x4_t *)v49.i8), *(uint16x4_t *)v78.val[2].i8)), *(uint16x4_t *)v78.val[3].i8);
          *(uint16x4_t *)v49.i8 = vrhadd_u16((uint16x4_t)vmovn_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(v44, v49), (uint16x8_t)v78.val[2])), (uint16x4_t)*(_OWORD *)&vextq_s8(v78.val[3], v78.val[3], 8uLL));
          v78.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v53.i8, (uint16x4_t)0x24002400240024), *(uint16x4_t *)v77.val[2].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v49.i8, (uint16x4_t)0x12001200120012), v27), 8uLL);
          v78.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v57.i8, (uint16x4_t)0x24002400240024), *(uint16x4_t *)v77.val[1].i8, (uint16x4_t)0x38003800380038), *(uint16x4_t *)v45.i8, (uint16x4_t)0x12001200120012), v27), 8uLL);
          v59 = vmlal_u16(vmull_u16(*(uint16x4_t *)v58.i8, (uint16x4_t)0x24002400240024), *(uint16x4_t *)v77.val[3].i8, (uint16x4_t)0x38003800380038);
          v77.val[0] = (int8x16_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v58.i8, (uint16x4_t)0x2E002E002E002ELL), *(uint16x4_t *)v77.val[3].i8, (uint16x4_t)0x8000800080008);
          v77.val[3] = (int8x16_t)vmlal_u16(vmull_u16(*(uint16x4_t *)v47.i8, (uint16x4_t)0x24002400240024), *(uint16x4_t *)v56.i8, (uint16x4_t)0x38003800380038);
          v60 = vmlal_u16(vmull_u16(*(uint16x4_t *)v47.i8, (uint16x4_t)0x2E002E002E002ELL), *(uint16x4_t *)v56.i8, (uint16x4_t)0x8000800080008);
          v61 = vmlal_u16(vmull_u16(*(uint16x4_t *)v57.i8, (uint16x4_t)0x2E002E002E002ELL), *(uint16x4_t *)v77.val[1].i8, (uint16x4_t)0x8000800080008);
          v78.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v77.val[3], *(uint16x4_t *)v46.i8, (uint16x4_t)0x12001200120012), v27), 8uLL);
          v77.val[1] = (int8x16_t)vmlal_u16(vmlal_u16(vmull_u16(*(uint16x4_t *)v53.i8, (uint16x4_t)0x2E002E002E002ELL), *(uint16x4_t *)v77.val[2].i8, (uint16x4_t)0x8000800080008), *(uint16x4_t *)v49.i8, (uint16x4_t)0x38003800380038);
          v78.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(v59, *(uint16x4_t *)v48.i8, (uint16x4_t)0x12001200120012), v27), 8uLL);
          v62 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(v61, *(uint16x4_t *)v45.i8, (uint16x4_t)0x38003800380038), v27);
          v63 = vqtbl4q_s8(v78, (int8x16_t)xmmword_208F05040);
          v78.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)v77.val[1], v27), 8uLL);
          v77.val[3] = (int8x16_t)vshrq_n_u32(v62, 8uLL);
          v77.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16(v60, *(uint16x4_t *)v46.i8, (uint16x4_t)0x38003800380038), v27), 8uLL);
          *a3++ = v63;
          v77.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v77.val[0], *(uint16x4_t *)v48.i8, (uint16x4_t)0x38003800380038), v27), 8uLL);
          *a4++ = vqtbl4q_s8(v78, (int8x16_t)xmmword_208F05040);
          v28 -= 16;
        }
        while (v28);
        if ((v25 & 0xFFFFFFF0) == v25)
          goto LABEL_43;
        goto LABEL_42;
      }
    }
    else
    {
      v7 = 0;
    }
    v10 = result;
    v9 = a3;
    v8 = a4;
    do
    {
LABEL_42:
      v64.i32[0] = *(unsigned __int8 *)v10;
      v65.i32[0] = *((unsigned __int8 *)v10 + 2);
      v64.i32[1] = *((unsigned __int8 *)v10 + 1);
      v65.i32[1] = *((unsigned __int8 *)v10 + 3);
      v66.i32[0] = *v5;
      v66.i32[1] = v5[1];
      v67.i32[0] = v5[2];
      v67.i32[1] = v5[3];
      v68 = (int32x2_t)vrhadd_u32((uint32x2_t)vadd_s32(vadd_s32((int32x2_t)vand_s8(vorr_s8((int8x8_t)vshl_n_s32(v64, 4uLL), (int8x8_t)(*(_QWORD *)&v64 & 0xFFFFFF0FFFFFFF0FLL)), (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(vorr_s8((int8x8_t)vshl_n_s32(v65, 4uLL), (int8x8_t)(*(_QWORD *)&v65 & 0xFFFFFF0FFFFFFF0FLL)), (int8x8_t)0xFF000000FFLL)), (int32x2_t)vand_s8(vorr_s8((int8x8_t)vshl_n_s32(v66, 4uLL), (int8x8_t)(*(_QWORD *)&v66 & 0xFFFFFF0FFFFFFF0FLL)), (int8x8_t)0xFF000000FFLL)), (uint32x2_t)vand_s8(vorr_s8(
                                         (int8x8_t)vshl_n_s32(v67, 4uLL),
                                         (int8x8_t)(*(_QWORD *)&v67 & 0xFFFFFF0FFFFFFF0FLL)),
                                       (int8x8_t)0xFF000000FFLL));
      v69 = ((*v10 & 0xF0 | (*(unsigned __int8 *)v10 >> 4))
           + (v65.i8[0] & 0xF0 | ((unsigned __int32)v65.i32[0] >> 4))
           + (v66.i8[0] & 0xF0 | ((unsigned __int32)v66.i32[0] >> 4))
           + (v67.i8[0] & 0xF0 | ((unsigned __int32)v67.i32[0] >> 4))
           + 1) >> 1;
      v70 = vmul_s32(v68, (int32x2_t)0xFFED00000038);
      v71 = vmul_s32(v68, (int32x2_t)0x380000FFF7);
      result = (char *)((v70.i32[0] + 65499 * v69 + 32896 + v70.i32[1]) >> 8);
      v9->i8[0] = (unsigned __int16)(v70.i16[0] - 37 * v69 - 32640 + v70.i16[2]) >> 8;
      v9 = (int8x16_t *)((char *)v9 + 1);
      v8->i8[0] = (unsigned __int16)(v71.i16[0] - 47 * v69 - 32640 + v71.i16[2]) >> 8;
      v8 = (int8x16_t *)((char *)v8 + 1);
      v10 += 4;
      v5 += 4;
      v7 += 2;
    }
    while (v7 < a5 - 1);
    goto LABEL_43;
  }
  v8 = a4;
  v9 = a3;
  v10 = result;
LABEL_43:
  if ((a5 & 1) != 0)
  {
    v72 = *(unsigned __int8 *)v10;
    v73 = *v5;
    v74 = (v73 & 0xF | (16 * v73)) + (v72 & 0xF | (16 * v72));
    v75 = (v73 & 0xF0 | (v73 >> 4)) + (v72 & 0xF0 | (v72 >> 4));
    v76 = (v5[1] & 0xF | (16 * v5[1])) + (v10[1] & 0xF | (16 * v10[1]));
    v9->i8[0] = (unsigned __int16)(56 * v74 - 37 * v75 - 19 * v76 - 32640) >> 8;
    v8->i8[0] = (unsigned __int16)(-9 * v74 - 47 * v75 + 56 * v76 - 32640) >> 8;
  }
  return result;
}

uint64_t MirrorRow_C(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  char *v13;
  int8x16_t v14;
  int8x16x2_t v15;
  int8x16x2_t v16;

  v3 = a3 - 1;
  v4 = result + v3;
  if (a3 >= 2)
  {
    v5 = 2;
    if (v3 > 2)
      v5 = a3 - 1;
    if (v5 < 0x1F)
      goto LABEL_9;
    v6 = 2;
    if (v3 > 2)
      v6 = a3 - 1;
    if (a3 + result <= a2 || result + v3 - ((v6 - 1) | 1uLL) >= ((v6 - 1) & 0xFFFFFFFFFFFFFFFELL) + a2 + 2)
    {
      v10 = ((v5 - 1) >> 1) + 1;
      v7 = 2 * (v10 & 0x7FFFFFFFFFFFFFF0);
      v8 = (_BYTE *)(v4 - v7);
      v11 = (const char *)(v4 - 31);
      v12 = v10 & 0x7FFFFFFFFFFFFFF0;
      v13 = (char *)a2;
      do
      {
        v15 = vld2q_s8(v11);
        v14 = vrev64q_s8(v15.val[0]);
        v16.val[1] = vextq_s8(v14, v14, 8uLL);
        v15.val[0] = vrev64q_s8(v15.val[1]);
        v16.val[0] = vextq_s8(v15.val[0], v15.val[0], 8uLL);
        vst2q_s8(v13, v16);
        v13 += 32;
        v11 -= 32;
        v12 -= 16;
      }
      while (v12);
      if (v10 == (v10 & 0x7FFFFFFFFFFFFFF0))
      {
LABEL_11:
        if ((a3 & 1) == 0)
          return result;
        goto LABEL_12;
      }
    }
    else
    {
LABEL_9:
      v7 = 0;
      v8 = (_BYTE *)(result + v3);
    }
    do
    {
      v9 = (_BYTE *)(a2 + v7);
      *v9 = *v8;
      v9[1] = *(v8 - 1);
      v8 -= 2;
      v7 += 2;
    }
    while (v7 < v3);
    goto LABEL_11;
  }
  v8 = (_BYTE *)(result + v3);
  if ((a3 & 1) != 0)
LABEL_12:
    *(_BYTE *)(a2 + v3) = *v8;
  return result;
}

uint64_t MirrorSplitUVRow_C(uint64_t result, char *a2, char *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v17;
  unint64_t v18;
  BOOL v20;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  char *v31;
  int8x16x2_t v32;
  int8x16x2_t v33;
  int8x16x4_t v34;

  v4 = a4 - 1;
  v5 = 2 * (int)v4;
  v6 = result + v5;
  v7 = (char *)(result + v5);
  if (a4 < 2)
    goto LABEL_31;
  if (v4 <= 2uLL)
    v8 = 2;
  else
    v8 = v4;
  if (v8 < 0x1F)
  {
    v9 = 0;
    do
    {
LABEL_30:
      v30 = &a2[v9];
      *v30 = *v7;
      v30[1] = *(v7 - 2);
      v31 = &a3[v9 + 1];
      *(v31 - 1) = v7[1];
      *v31 = *(v7 - 1);
      v7 -= 4;
      v9 += 2;
    }
    while (v9 < v4);
    goto LABEL_31;
  }
  v9 = 0;
  v10 = 2;
  if (v4 > 2uLL)
    v10 = v4;
  v11 = v10 - 1;
  v12 = (v11 & 0xFFFFFFFFFFFFFFFELL) + 2;
  v13 = (unint64_t)&a2[v12];
  v14 = v5 - ((2 * v11) & 0x7FFFFFFFFFFFFFFCLL) + result - 2;
  v15 = v5 + result + 2;
  v17 = v15 > (unint64_t)a2 && v14 < v13;
  v18 = (unint64_t)&a3[v12];
  v20 = v15 > (unint64_t)a3 && v14 < v18;
  if (v13 > (unint64_t)a3 && v18 > (unint64_t)a2)
    goto LABEL_30;
  if (v17)
    goto LABEL_30;
  if (v20)
    goto LABEL_30;
  v22 = ((v8 - 1) >> 1) + 1;
  v7 = (char *)(v6 - 4 * (v22 & 0x7FFFFFFFFFFFFFF0));
  v9 = 2 * (v22 & 0x7FFFFFFFFFFFFFF0);
  v23 = (const char *)(v6 - 62);
  v24 = v22 & 0x7FFFFFFFFFFFFFF0;
  v25 = a2;
  v26 = a3;
  do
  {
    v34 = vld4q_s8(v23);
    v27 = vrev64q_s8(v34.val[0]);
    v32.val[1] = vextq_s8(v27, v27, 8uLL);
    v28 = vrev64q_s8(v34.val[1]);
    v33.val[1] = vextq_s8(v28, v28, 8uLL);
    v29 = vrev64q_s8(v34.val[2]);
    v32.val[0] = vextq_s8(v29, v29, 8uLL);
    v34.val[0] = vrev64q_s8(v34.val[3]);
    vst2q_s8(v25, v32);
    v25 += 32;
    v33.val[0] = vextq_s8(v34.val[0], v34.val[0], 8uLL);
    vst2q_s8(v26, v33);
    v26 += 32;
    v23 -= 64;
    v24 -= 16;
  }
  while (v24);
  if (v22 != (v22 & 0x7FFFFFFFFFFFFFF0))
    goto LABEL_30;
LABEL_31:
  if ((a4 & 1) != 0)
  {
    a2[v4] = *v7;
    a3[v4] = v7[1];
  }
  return result;
}

const char *SplitUVRow_C(const char *result, char *a2, char *a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v15;
  BOOL v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int8x16x2_t v25;
  int8x16x4_t v26;

  v4 = a4 - 1;
  if (a4 >= 2)
  {
    if (v4 <= 2uLL)
      v5 = 2;
    else
      v5 = v4;
    if (v5 >= 0x1F)
    {
      v6 = 0;
      v8 = 2;
      if (v4 > 2uLL)
        v8 = v4;
      v9 = v8 - 1;
      v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + 2;
      v11 = (unint64_t)&a2[v10];
      v12 = (unint64_t)&a3[v10];
      v13 = (unint64_t)&result[((2 * v9) & 0x7FFFFFFFFFFFFFFCLL) + 4];
      v15 = v13 > (unint64_t)a2 && v11 > (unint64_t)result;
      v17 = v13 > (unint64_t)a3 && v12 > (unint64_t)result;
      v18 = v11 > (unint64_t)a3 && v12 > (unint64_t)a2;
      if (!v18 && !v15 && !v17)
      {
        v19 = ((v5 - 1) >> 1) + 1;
        v6 = 2 * (v19 & 0x7FFFFFFFFFFFFFF0);
        v7 = &result[4 * (v19 & 0x7FFFFFFFFFFFFFF0)];
        v20 = v19 & 0x7FFFFFFFFFFFFFF0;
        v21 = a2;
        v22 = a3;
        do
        {
          v26 = vld4q_s8(result);
          result += 64;
          v25.val[0] = v26.val[1];
          v25.val[1] = v26.val[3];
          v26.val[1] = v26.val[2];
          vst2q_s8(v21, *(int8x16x2_t *)v26.val[0].i8);
          v21 += 32;
          vst2q_s8(v22, v25);
          v22 += 32;
          v20 -= 16;
        }
        while (v20);
        if (v19 == (v19 & 0x7FFFFFFFFFFFFFF0))
          goto LABEL_34;
        goto LABEL_33;
      }
    }
    else
    {
      v6 = 0;
    }
    v7 = result;
    do
    {
LABEL_33:
      v23 = &a2[v6];
      *v23 = *v7;
      v23[1] = v7[2];
      v24 = &a3[v6 + 1];
      *(v24 - 1) = v7[1];
      *v24 = v7[3];
      v7 += 4;
      v6 += 2;
    }
    while (v6 < v4);
    goto LABEL_34;
  }
  v7 = result;
LABEL_34:
  if ((a4 & 1) != 0)
  {
    a2[v4] = *v7;
    a3[v4] = v7[1];
  }
  return result;
}

const char *MergeUVRow_C(const char *result, const char *a2, char *a3, int a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v13;
  unint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  int8x16x2_t v19;
  int8x16x4_t v20;

  v4 = a4 - 1;
  if (a4 < 2)
  {
    v7 = a3;
  }
  else
  {
    if (v4 <= 2uLL)
      v5 = 2;
    else
      v5 = v4;
    if (v5 >= 0x1F)
    {
      v6 = 0;
      v8 = 2;
      if (v4 > 2uLL)
        v8 = v4;
      v9 = v8 - 1;
      v10 = (unint64_t)&a3[((2 * v9) & 0x7FFFFFFFFFFFFFFCLL) + 4];
      v11 = (v9 & 0xFFFFFFFFFFFFFFFELL) + 2;
      v13 = &a2[v11] > a3 && v10 > (unint64_t)a2;
      if (v10 > (unint64_t)result && &result[v11] > a3)
      {
        v7 = a3;
      }
      else if (v13)
      {
        v7 = a3;
      }
      else
      {
        v15 = ((v5 - 1) >> 1) + 1;
        v6 = 2 * (v15 & 0x7FFFFFFFFFFFFFF0);
        v7 = &a3[4 * (v15 & 0x7FFFFFFFFFFFFFF0)];
        v16 = v15 & 0x7FFFFFFFFFFFFFF0;
        v17 = a2;
        v18 = result;
        do
        {
          *(int8x16x2_t *)v20.val[1].i8 = vld2q_s8(v18);
          v18 += 32;
          v19 = vld2q_s8(v17);
          v17 += 32;
          v20.val[0] = v20.val[1];
          v20.val[1] = v19.val[0];
          v20.val[3] = v19.val[1];
          vst4q_s8(a3, v20);
          a3 += 64;
          v16 -= 16;
        }
        while (v16);
        if (v15 == (v15 & 0x7FFFFFFFFFFFFFF0))
          goto LABEL_28;
      }
    }
    else
    {
      v6 = 0;
      v7 = a3;
    }
    do
    {
      *v7 = result[v6];
      v7[1] = a2[v6];
      v7[2] = result[v6 + 1];
      v7[3] = a2[v6 + 1];
      v7 += 4;
      v6 += 2;
    }
    while (v6 < v4);
  }
LABEL_28:
  if ((a4 & 1) != 0)
  {
    *v7 = result[v4];
    v7[1] = a2[v4];
  }
  return result;
}

uint16x8_t *MergeUVRow_16_C(uint16x8_t *result, uint16x8_t *a2, __int16 *a3, int a4, unsigned int a5)
{
  unsigned int v5;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  int v12;
  int v13;
  __int16 *v14;
  BOOL v16;
  BOOL v17;
  uint32x4_t v18;
  uint64_t v19;
  uint16x8_t *v20;
  uint16x8_t *v21;
  uint16x8_t v22;
  int16x8_t v23;
  int16x8_t v24;
  uint16x8_t v25;
  int16x8x2_t v26;

  if ((int)a5 >= 1)
  {
    v5 = 16 - a4;
    if (a5 < 8)
    {
      v6 = 0;
LABEL_4:
      v7 = a3;
LABEL_5:
      v8 = a5 - v6;
      v9 = v6;
      v10 = (unsigned __int16 *)a2 + v6;
      v11 = &result->u16[v9];
      do
      {
        v12 = *v11++;
        *v7 = v12 << v5;
        v13 = *v10++;
        v7[1] = v13 << v5;
        v7 += 2;
        --v8;
      }
      while (v8);
      return result;
    }
    v6 = 0;
    v14 = &a3[2 * a5];
    v16 = (char *)a2 + 2 * a5 > (char *)a3 && v14 > (__int16 *)a2;
    v17 = v14 > (__int16 *)result && (char *)result + 2 * a5 > (char *)a3;
    if (v17 || v16)
      goto LABEL_4;
    v6 = a5 & 0x7FFFFFF8;
    v7 = &a3[2 * (a5 & 0xFFFFFFF8)];
    v18 = (uint32x4_t)vdupq_n_s32(v5);
    v19 = a5 & 0xFFFFFFF8;
    v20 = a2;
    v21 = result;
    do
    {
      v22 = *v21++;
      v23 = (int16x8_t)vshlq_u32(vmovl_high_u16(v22), v18);
      v24 = (int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v22.i8), v18);
      v25 = *v20++;
      v26.val[0] = vuzp1q_s16(v24, v23);
      v26.val[1] = vuzp1q_s16((int16x8_t)vshlq_u32(vmovl_u16(*(uint16x4_t *)v25.i8), v18), (int16x8_t)vshlq_u32(vmovl_high_u16(v25), v18));
      vst2q_s16(a3, v26);
      a3 += 16;
      v19 -= 8;
    }
    while (v19);
    if (v6 != a5)
      goto LABEL_5;
  }
  return result;
}

int16x8_t *MultiplyRow_16_C(int16x8_t *result, int16x8_t *a2, __int16 a3, int a4)
{
  uint64_t v4;
  int16x8_t v5;
  int16x8_t *v6;
  int16x8_t *v7;
  uint64_t v8;
  int16x8_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 *v12;
  __int16 *v13;
  __int16 v14;

  if (a4 >= 1)
  {
    v4 = 0;
    if (a4 < 0x10)
      goto LABEL_7;
    if ((unint64_t)((char *)a2 - (char *)result) < 0x20)
      goto LABEL_7;
    v4 = a4 & 0x7FFFFFF0;
    v5 = vdupq_n_s16(a3);
    v6 = result + 1;
    v7 = a2 + 1;
    v8 = a4 & 0xFFFFFFF0;
    do
    {
      v9 = vmulq_s16(*v6, v5);
      v7[-1] = vmulq_s16(v6[-1], v5);
      *v7 = v9;
      v6 += 2;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
    if (v4 != a4)
    {
LABEL_7:
      v10 = a4 - v4;
      v11 = v4;
      v12 = &a2->i16[v4];
      v13 = &result->i16[v11];
      do
      {
        v14 = *v13++;
        *v12++ = v14 * a3;
        --v10;
      }
      while (v10);
    }
  }
  return result;
}

uint16x8_t *Convert16To8Row_C(uint16x8_t *result, int8x16_t *a2, unsigned int a3, unsigned int a4)
{
  BOOL v4;
  int32x4_t v5;
  uint64_t v6;
  uint64_t v7;
  __int8 *v8;
  unsigned __int16 *v9;
  int v10;
  int v11;
  int32x4_t v12;
  uint64_t v13;
  int8x16_t *v14;
  uint16x8_t *v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint64_t v18;
  uint16x8_t *v19;
  _QWORD *v20;
  uint64_t v21;
  int32x4_t v22;
  uint16x8_t v23;
  int8x16x2_t v24;
  int8x16x4_t v25;

  if ((int)a4 < 1)
    return result;
  if (a4 < 8 || ((char *)result + 2 * a4 > (char *)a2 ? (v4 = &a2->i8[a4] > (__int8 *)result) : (v4 = 0), v4))
  {
    v6 = 0;
  }
  else
  {
    v5 = vdupq_n_s32(a3);
    if (a4 >= 0x10)
    {
      v6 = a4 & 0xFFFFFFF0;
      v12.i64[0] = 0xFF000000FFLL;
      v12.i64[1] = 0xFF000000FFLL;
      v13 = v6;
      v14 = a2;
      v15 = result;
      do
      {
        v17 = *v15;
        v16 = v15[1];
        v15 += 2;
        v25.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v5, (int32x4_t)vmovl_high_u16(v17)), 0x10uLL), v12);
        v25.val[3] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v5, (int32x4_t)vmovl_high_u16(v16)), 0x10uLL), v12);
        v25.val[2] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v16.i8)), 0x10uLL), v12);
        v25.val[0] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v17.i8)), 0x10uLL), v12);
        *v14++ = vqtbl4q_s8(v25, (int8x16_t)xmmword_208F05040);
        v13 -= 16;
      }
      while (v13);
      if (v6 == a4)
        return result;
      if ((a4 & 8) == 0)
        goto LABEL_10;
    }
    else
    {
      v6 = 0;
    }
    v18 = v6;
    v6 = a4 & 0xFFFFFFF8;
    v19 = (uint16x8_t *)((char *)result + 2 * v18);
    v20 = (uint64_t *)((char *)a2->i64 + v18);
    v21 = v18 - v6;
    v22.i64[0] = 0xFF000000FFLL;
    v22.i64[1] = 0xFF000000FFLL;
    do
    {
      v23 = *v19++;
      v24.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v5, (int32x4_t)vmovl_high_u16(v23)), 0x10uLL), v22);
      v24.val[0] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v5, (int32x4_t)vmovl_u16(*(uint16x4_t *)v23.i8)), 0x10uLL), v22);
      *v20++ = vqtbl2q_s8(v24, (int8x16_t)xmmword_208F05050).u64[0];
      v21 += 8;
    }
    while (v21);
    if (v6 == a4)
      return result;
  }
LABEL_10:
  v7 = a4 - v6;
  v8 = &a2->i8[v6];
  v9 = (unsigned __int16 *)result + v6;
  do
  {
    v10 = *v9++;
    v11 = (int)(v10 * a3) >> 16;
    if (v11 >= 255)
      LOBYTE(v11) = -1;
    *v8++ = v11;
    --v7;
  }
  while (v7);
  return result;
}

void *CopyRow_C(void *__src, void *__dst, int a3)
{
  return memcpy(__dst, __src, a3);
}

void *SetRow_C(void *a1, int a2, int a3)
{
  return memset(a1, a2, a3);
}

uint64_t YUY2ToUVRow_C(uint64_t result, int a2, uint8x16_t *a3, uint8x16_t *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint8x16_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v18;
  BOOL v20;
  BOOL v22;
  uint8x16_t *v23;
  char v25;
  BOOL v27;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8x16_t *v36;
  uint8x16_t *v37;
  const char *v38;
  const char *v39;
  unsigned __int128 v40;
  const char *v41;
  unsigned __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8x16_t *v47;
  uint8x16_t *v48;
  uint8x8_t *v49;
  uint8x8_t *v50;
  unint64_t v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  unint64_t v55;
  const char *v56;
  unint64_t v57;
  int8x8x4_t v58;
  int8x16x4_t v59;

  v5 = (a5 - 1);
  if (a5 >= 1)
  {
    v6 = a2 + 1;
    v7 = a2 + 3;
    if (a5 < 0x11)
    {
      v8 = 0;
      goto LABEL_64;
    }
    v8 = 0;
    v9 = v5 >> 1;
    v10 = (uint8x16_t *)&a3->i8[v9 + 1];
    v11 = result + v7;
    v12 = result + 1;
    v13 = result + 1 + 4 * v9 + v7;
    v14 = 4 * v9 + result + 4;
    v15 = result + v6;
    v16 = result + 1 + 4 * v9 + v6;
    v18 = v13 > (unint64_t)a3 && v11 < (unint64_t)v10;
    v20 = v14 > (unint64_t)a3 && v12 < (unint64_t)v10;
    v22 = v16 > (unint64_t)a3 && v15 < (unint64_t)v10;
    v30 = v13 > (unint64_t)a4;
    v23 = (uint8x16_t *)&a4->i8[v9 + 1];
    v25 = v30 && v11 < (unint64_t)v23;
    v27 = v14 > (unint64_t)a4 && v12 < (unint64_t)v23;
    v29 = v16 > (unint64_t)a4 && v15 < (unint64_t)v23;
    v30 = v10 > a4 && v23 > a3;
    if (v30 || v18 || v20 || v22 || (v25 & 1) != 0 || v27 || v29)
      goto LABEL_64;
    v31 = (v9 + 1);
    if (a5 >= 0x21)
    {
      v33 = 16;
      if ((((_BYTE)v9 + 1) & 0xF) != 0)
        v33 = ((_BYTE)v9 + 1) & 0xF;
      v32 = v31 - v33;
      v34 = v31;
      v35 = result;
      v36 = a4;
      v37 = a3;
      do
      {
        v38 = (const char *)(v35 + 1);
        v59 = vld4q_s8(v38);
        v39 = (const char *)(v35 + v6);
        v40 = (unsigned __int128)vld4q_s8(v39);
        *v37++ = vrhaddq_u8((uint8x16_t)v59.val[0], (uint8x16_t)v40);
        v41 = (const char *)(v35 + v7);
        v42 = (unsigned __int128)vld4q_s8(v41);
        *v36++ = vrhaddq_u8((uint8x16_t)v59.val[2], (uint8x16_t)v42);
        v35 += 64;
        v34 -= 16;
      }
      while (v33 != v34);
      if (v33 < 9)
      {
        a3 = (uint8x16_t *)((char *)a3 + v32);
        a4 = (uint8x16_t *)((char *)a4 + v32);
        v8 = 2 * v32;
        result += 4 * v32;
        do
        {
LABEL_64:
          a3->i8[0] = (*(unsigned __int8 *)(result + 1) + *(unsigned __int8 *)(result + v6) + 1) >> 1;
          a3 = (uint8x16_t *)((char *)a3 + 1);
          a4->i8[0] = (*(unsigned __int8 *)(result + 3) + *(unsigned __int8 *)(result + v7) + 1) >> 1;
          a4 = (uint8x16_t *)((char *)a4 + 1);
          result += 4;
          v8 += 2;
        }
        while (v8 < a5);
        return result;
      }
    }
    else
    {
      v32 = 0;
    }
    if ((v31 & 7) != 0)
      v43 = v31 & 7;
    else
      v43 = 8;
    v44 = v31 - v43;
    v8 = 2 * (v31 - v43);
    v45 = result + 4 * v44;
    v46 = ~(v5 >> 1);
    v47 = (uint8x16_t *)((char *)a4 + v44);
    v48 = (uint8x16_t *)((char *)a3 + v44);
    v49 = (uint8x8_t *)&a3->i8[v32];
    v50 = (uint8x8_t *)&a4->i8[v32];
    v51 = v46 + v43 + v32;
    v52 = result + 4 * v32;
    do
    {
      v53 = (const char *)(v52 + 1);
      v58 = vld4_s8(v53);
      v54 = (const char *)(v52 + v6);
      v55 = (unint64_t)vld4_s8(v54);
      *v49++ = vrhadd_u8((uint8x8_t)v58.val[0], (uint8x8_t)v55);
      v56 = (const char *)(v52 + v7);
      v57 = (unint64_t)vld4_s8(v56);
      *v50++ = vrhadd_u8((uint8x8_t)v58.val[2], (uint8x8_t)v57);
      v52 += 32;
      v51 += 8;
    }
    while (v51);
    result = v45;
    a4 = v47;
    a3 = v48;
    goto LABEL_64;
  }
  return result;
}

_BYTE *YUY2ToYRow_C(_BYTE *result, unint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  const char *v15;
  unint64_t v16;
  const char *v17;
  char *v18;
  _BYTE *v19;
  int8x16x4_t v20;
  int8x16x4_t v21;

  v3 = a3 - 1;
  if (a3 >= 2)
  {
    v4 = 2;
    if (v3 > 2uLL)
      v4 = v3;
    if (v4 >= 0x41)
    {
      v6 = 2;
      if (v3 > 2uLL)
        v6 = v3;
      v7 = v6 - 1;
      if ((unint64_t)&result[(2 * v7) | 3] > a2
        && (v7 & 0xFFFFFFFFFFFFFFFELL) + a2 + 2 > (unint64_t)result)
      {
        v5 = 0;
      }
      else
      {
        v9 = (v4 - 1) >> 1;
        v10 = v9 + 1;
        if (((v9 + 1) & 0x1F) != 0)
          v11 = (v9 + 1) & 0x1F;
        else
          v11 = 32;
        v12 = v10 - v11;
        v5 = 2 * (v10 - v11);
        v13 = &result[4 * v12];
        v14 = (char *)(a2 + 32);
        v15 = result + 64;
        v16 = ~v9 + v11;
        do
        {
          v17 = v15 - 64;
          v20 = vld4q_s8(v17);
          v21 = vld4q_s8(v15);
          v20.val[1] = v20.val[2];
          v18 = v14 - 32;
          vst2q_s8(v18, *(int8x16x2_t *)v20.val[0].i8);
          v21.val[1] = v21.val[2];
          vst2q_s8(v14, *(int8x16x2_t *)v21.val[0].i8);
          v14 += 64;
          v15 += 128;
          v16 += 32;
        }
        while (v16);
        result = v13;
      }
    }
    else
    {
      v5 = 0;
    }
    do
    {
      v19 = (_BYTE *)(a2 + v5);
      *v19 = *result;
      v19[1] = result[2];
      result += 4;
      v5 += 2;
    }
    while (v5 < v3);
  }
  if ((a3 & 1) != 0)
    *(_BYTE *)(a2 + v3) = *result;
  return result;
}

const char *UYVYToUVRow_C(const char *result, int a2, uint8x16_t *a3, uint8x16_t *a4, int a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint8x16_t *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  BOOL v17;
  BOOL v19;
  BOOL v21;
  uint8x16_t *v22;
  BOOL v24;
  BOOL v26;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  const char *v34;
  uint8x16_t *v35;
  uint8x16_t *v36;
  const char *v37;
  const char *v38;
  unsigned __int128 v39;
  const char *v40;
  unsigned __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint8x16_t *v44;
  unint64_t v45;
  uint8x16_t *v46;
  uint8x8_t *v47;
  uint8x8_t *v48;
  const char *v49;
  unint64_t v50;
  const char *v51;
  const char *v52;
  unint64_t v53;
  const char *v54;
  unint64_t v55;
  int8x8x4_t v56;
  int8x16x4_t v57;

  v5 = (a5 - 1);
  if (a5 >= 1)
  {
    v6 = a2;
    v7 = a2 + 2;
    if (a5 < 0x11)
    {
      v8 = 0;
      goto LABEL_64;
    }
    v8 = 0;
    v9 = v5 >> 1;
    v10 = (uint8x16_t *)&a3->i8[v9 + 1];
    v11 = (unsigned __int8 *)&result[v7];
    v12 = (unint64_t)&result[4 * v9 + 1 + v7];
    v13 = (unint64_t)&result[4 * v9 + 3];
    v14 = (unsigned __int8 *)&result[v6];
    v15 = (unint64_t)&result[4 * v9 + 1 + v6];
    v17 = v12 > (unint64_t)a3 && v11 < (unsigned __int8 *)v10;
    v19 = v13 > (unint64_t)a3 && v10 > (uint8x16_t *)result;
    v21 = v15 > (unint64_t)a3 && v14 < (unsigned __int8 *)v10;
    v22 = (uint8x16_t *)&a4->i8[v9 + 1];
    v24 = v12 > (unint64_t)a4 && v11 < (unsigned __int8 *)v22;
    v26 = v13 > (unint64_t)a4 && v22 > (uint8x16_t *)result;
    v28 = v15 > (unint64_t)a4 && v14 < (unsigned __int8 *)v22;
    v29 = v10 > a4 && v22 > a3;
    if (v29 || v17 || v19 || v21 || v24 || v26 || v28)
      goto LABEL_64;
    v30 = (v9 + 1);
    if (a5 >= 0x21)
    {
      v32 = 16;
      if ((((_BYTE)v9 + 1) & 0xF) != 0)
        v32 = ((_BYTE)v9 + 1) & 0xF;
      v31 = v30 - v32;
      v33 = v30;
      v34 = result;
      v35 = a4;
      v36 = a3;
      v37 = result;
      do
      {
        v57 = vld4q_s8(v37);
        v37 += 64;
        v38 = &v34[v6];
        v39 = (unsigned __int128)vld4q_s8(v38);
        *v36++ = vrhaddq_u8((uint8x16_t)v57.val[0], (uint8x16_t)v39);
        v40 = &v34[v7];
        v41 = (unsigned __int128)vld4q_s8(v40);
        *v35++ = vrhaddq_u8((uint8x16_t)v57.val[2], (uint8x16_t)v41);
        v33 -= 16;
        v34 = v37;
      }
      while (v32 != v33);
      if (v32 < 9)
      {
        a3 = (uint8x16_t *)((char *)a3 + v31);
        a4 = (uint8x16_t *)((char *)a4 + v31);
        v8 = 2 * v31;
        result += 4 * v31;
        do
        {
LABEL_64:
          a3->i8[0] = (*(unsigned __int8 *)result + result[v6] + 1) >> 1;
          a3 = (uint8x16_t *)((char *)a3 + 1);
          a4->i8[0] = (*((unsigned __int8 *)result + 2) + result[v7] + 1) >> 1;
          a4 = (uint8x16_t *)((char *)a4 + 1);
          result += 4;
          v8 += 2;
        }
        while (v8 < a5);
        return result;
      }
    }
    else
    {
      v31 = 0;
    }
    if ((v30 & 7) != 0)
      v42 = v30 & 7;
    else
      v42 = 8;
    v43 = v30 - v42;
    v8 = 2 * (v30 - v42);
    v44 = (uint8x16_t *)((char *)a4 + v43);
    v45 = ~(v5 >> 1);
    v46 = (uint8x16_t *)((char *)a3 + v43);
    v47 = (uint8x8_t *)&a3->i8[v31];
    v48 = (uint8x8_t *)&a4->i8[v31];
    v49 = &result[4 * v31];
    v50 = v45 + v42 + v31;
    v51 = v49;
    result += 4 * v43;
    do
    {
      v56 = vld4_s8(v51);
      v51 += 32;
      v52 = &v49[v6];
      v53 = (unint64_t)vld4_s8(v52);
      *v47++ = vrhadd_u8((uint8x8_t)v56.val[0], (uint8x8_t)v53);
      v54 = &v49[v7];
      v55 = (unint64_t)vld4_s8(v54);
      *v48++ = vrhadd_u8((uint8x8_t)v56.val[2], (uint8x8_t)v55);
      v49 = v51;
      v50 += 8;
    }
    while (v50);
    a4 = v44;
    a3 = v46;
    goto LABEL_64;
  }
  return result;
}

uint64_t UYVYToYRow_C(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  unint64_t v16;
  const char *v17;
  char *v18;
  _BYTE *v19;
  int8x16x4_t v20;
  int8x16x4_t v21;

  v3 = a3 - 1;
  if (a3 >= 2)
  {
    v4 = 2;
    if (v3 > 2uLL)
      v4 = v3;
    if (v4 >= 0x41)
    {
      v6 = 2;
      if (v3 > 2uLL)
        v6 = v3;
      v7 = v6 - 1;
      if (((2 * v7) & 0x7FFFFFFFFFFFFFFCuLL) + result + 4 <= a2 || result + 1 >= (v7 & 0xFFFFFFFFFFFFFFFELL) + a2 + 2)
      {
        v9 = (v4 - 1) >> 1;
        v10 = v9 + 1;
        if (((v9 + 1) & 0x1F) != 0)
          v11 = (v9 + 1) & 0x1F;
        else
          v11 = 32;
        v12 = v10 - v11;
        v5 = 2 * (v10 - v11);
        v13 = result + 4 * v12;
        v14 = (char *)(a2 + 32);
        v15 = (const char *)(result + 65);
        v16 = ~v9 + v11;
        do
        {
          v17 = v15 - 64;
          v20 = vld4q_s8(v17);
          v21 = vld4q_s8(v15);
          v20.val[1] = v20.val[2];
          v18 = v14 - 32;
          vst2q_s8(v18, *(int8x16x2_t *)v20.val[0].i8);
          v21.val[1] = v21.val[2];
          vst2q_s8(v14, *(int8x16x2_t *)v21.val[0].i8);
          v14 += 64;
          v15 += 128;
          v16 += 32;
        }
        while (v16);
        result = v13;
      }
      else
      {
        v5 = 0;
      }
    }
    else
    {
      v5 = 0;
    }
    do
    {
      v19 = (_BYTE *)(a2 + v5);
      *v19 = *(_BYTE *)(result + 1);
      v19[1] = *(_BYTE *)(result + 3);
      result += 4;
      v5 += 2;
    }
    while (v5 < v3);
  }
  if ((a3 & 1) != 0)
    *(_BYTE *)(a2 + v3) = *(_BYTE *)(result + 1);
  return result;
}

int8x16_t *InterpolateRow_C(int8x16_t *result, uint8x16_t *a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  __int8 *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  int8x16_t *v12;
  uint8x16_t *v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  int16x8_t v18;
  int16x8_t v19;
  uint64_t v20;
  uint8x16_t *v21;
  uint64_t v22;
  uint8x16_t *v23;
  uint8x16_t v24;
  uint64_t v25;
  uint8x8_t *v26;
  uint8x8_t *v27;
  uint64_t v28;
  uint8x8_t v29;
  uint8x8_t v30;
  int8x16_t *v31;
  uint64_t v32;
  uint8x16_t *v33;
  uint8x8_t *v34;
  uint8x16_t v35;
  uint8x16_t v36;
  int8x16_t v37;
  uint8x8_t *v38;
  int8x8_t *v39;
  uint64_t v40;

  if (!a5)
    return (int8x16_t *)memcpy(result, a2, a4);
  if (a5 != 128)
  {
    if (a4 < 1)
      return result;
    v9 = 256 - a5;
    v10 = &a2->i8[a3];
    if (a4 < 8)
    {
      LODWORD(v11) = 0;
LABEL_13:
      v12 = result;
      v13 = a2;
      goto LABEL_14;
    }
    LODWORD(v11) = 0;
    if ((unint64_t)((char *)result - v10) < 0x20 || (unint64_t)((char *)result - (char *)a2) < 0x20)
      goto LABEL_13;
    v18 = vdupq_n_s16(v9);
    v19 = vdupq_n_s16(a5);
    if (a4 >= 0x20)
    {
      v20 = a4 & 0xFFFFFFE0;
      v31 = result + 1;
      v32 = v20;
      v33 = a2;
      do
      {
        v34 = (uint8x8_t *)&v33->i8[a3];
        v35 = *v33;
        v36 = v33[1];
        v33 += 2;
        v37 = vraddhn_high_s16(vraddhn_s16(vmlaq_s16(vmulq_s16(v19, (int16x8_t)vmovl_u8(v34[2])), v18, (int16x8_t)vmovl_u8(*(uint8x8_t *)v36.i8)), (int16x8_t)0), vmlaq_s16(vmulq_s16(v19, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v34[2].i8)), v18, (int16x8_t)vmovl_high_u8(v36)), (int16x8_t)0);
        v31[-1] = vraddhn_high_s16(vraddhn_s16(vmlaq_s16(vmulq_s16(v19, (int16x8_t)vmovl_u8(*v34)), v18, (int16x8_t)vmovl_u8(*(uint8x8_t *)v35.i8)), (int16x8_t)0), vmlaq_s16(vmulq_s16(v19, (int16x8_t)vmovl_high_u8(*(uint8x16_t *)v34->i8)), v18, (int16x8_t)vmovl_high_u8(v35)), (int16x8_t)0);
        *v31 = v37;
        v31 += 2;
        v32 -= 32;
      }
      while (v32);
      if (v20 == a4)
        return result;
      if ((a4 & 0x18) == 0)
      {
        v13 = (uint8x16_t *)((char *)a2 + v20);
        v12 = (int8x16_t *)((char *)result + v20);
        v10 += v20;
        LODWORD(v11) = a4 & 0xFFFFFFE0;
        goto LABEL_14;
      }
    }
    else
    {
      v20 = 0;
    }
    v11 = a4 & 0xFFFFFFF8;
    v10 += v11;
    v12 = (int8x16_t *)((char *)result + v11);
    v13 = (uint8x16_t *)((char *)a2 + v11);
    v38 = (uint8x8_t *)&a2->i8[v20];
    v39 = (int8x8_t *)&result->i8[v20];
    v40 = v20 - v11;
    do
    {
      *v39++ = vraddhn_s16(vmlaq_s16(vmulq_s16(v19, (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v38 + a3))), v18, (int16x8_t)vmovl_u8(*v38)), (int16x8_t)0);
      ++v38;
      v40 += 8;
    }
    while (v40);
    if (v11 == a4)
      return result;
LABEL_14:
    v14 = a4 - v11;
    do
    {
      v16 = v13->u8[0];
      v13 = (uint8x16_t *)((char *)v13 + 1);
      v15 = v16;
      v17 = *v10++;
      v12->i8[0] = (unsigned __int16)(v17 * a5 + v9 * v15 + 128) >> 8;
      v12 = (int8x16_t *)((char *)v12 + 1);
      --v14;
    }
    while (v14);
    return result;
  }
  if (a4 < 1)
    return result;
  if (a4 < 8)
  {
    v5 = 0;
    goto LABEL_6;
  }
  v5 = 0;
  if ((unint64_t)((char *)result - &a2->i8[a3]) < 0x20 || (unint64_t)((char *)result - (char *)a2) < 0x20)
    goto LABEL_6;
  if (a4 >= 0x20)
  {
    v5 = a4 & 0xFFFFFFE0;
    v21 = (uint8x16_t *)&result[1];
    v22 = v5;
    v23 = a2;
    do
    {
      v24 = vrhaddq_u8(v23[1], *(uint8x16_t *)((char *)&v23[1] + a3));
      v21[-1] = vrhaddq_u8(*v23, *(uint8x16_t *)((char *)v23 + a3));
      *v21 = v24;
      v23 += 2;
      v21 += 2;
      v22 -= 32;
    }
    while (v22);
    if (v5 == a4)
      return result;
    if ((a4 & 0x18) == 0)
    {
LABEL_6:
      v6 = a4 - v5;
      v7 = &result->i8[v5];
      v8 = &a2->u8[v5];
      do
      {
        *v7++ = (*v8 + v8[a3] + 1) >> 1;
        ++v8;
        --v6;
      }
      while (v6);
      return result;
    }
  }
  else
  {
    v5 = 0;
  }
  v25 = v5;
  v5 = a4 & 0xFFFFFFF8;
  v26 = (uint8x8_t *)&a2->i8[v25];
  v27 = (uint8x8_t *)&result->i8[v25];
  v28 = v25 - v5;
  do
  {
    v29 = *(uint8x8_t *)((char *)v26 + a3);
    v30 = *v26++;
    *v27++ = vrhadd_u8(v30, v29);
    v28 += 8;
  }
  while (v28);
  if (v5 != a4)
    goto LABEL_6;
  return result;
}

__int128 *InterpolateRow_16To8_C(__int128 *result, uint16x8_t *a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned __int16 *v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int16 *v15;
  uint64_t v16;
  char *v17;
  unsigned __int16 *v18;
  BOOL v20;
  BOOL v21;
  unsigned __int16 *v22;
  unint64_t v23;
  BOOL v25;
  BOOL v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint64_t v30;
  __int128 *v31;
  unsigned __int16 *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  int8x16_t *v41;
  int8x16_t *v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int32x4_t v46;
  uint64_t v47;
  int32x4_t v48;
  uint16x8_t *v49;
  uint16x8_t *v50;
  _QWORD *v51;
  uint64_t v52;
  int32x4_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  uint16x8_t v56;
  uint16x8_t v57;
  uint64_t v58;
  _BYTE *v59;
  unsigned __int16 *v60;
  unsigned __int16 *v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int32x4_t v66;
  int32x4_t v67;
  uint64_t v68;
  int8x16_t *v69;
  uint16x8_t *v70;
  uint16x8_t v71;
  uint16x8_t v72;
  uint64_t v73;
  int32x4_t v74;
  uint16x8_t *v75;
  _QWORD *v76;
  uint64_t v77;
  int32x4_t v78;
  uint16x8_t v79;
  int32x4_t v80;
  int32x4_t v81;
  uint64_t v82;
  int8x16_t *v83;
  uint16x8_t *v84;
  uint16x8_t *v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint64_t v89;
  uint16x8_t *v90;
  _QWORD *v91;
  uint64_t v92;
  int32x4_t v93;
  int32x4_t v94;
  uint16x8_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x4_t v99;
  int8x16x4_t v100;
  int8x16x4_t v101;

  if (a6)
  {
    if (a6 == 128)
    {
      if ((int)a5 < 1)
        return result;
      if (a5 >= 8)
      {
        v6 = 0;
        v17 = (char *)result + a5;
        v18 = (unsigned __int16 *)a2 + a3;
        v20 = (char *)a2 + 2 * a5 > (char *)result && v17 > (char *)a2;
        v21 = v18 < (unsigned __int16 *)v17 && &v18[a5] > (unsigned __int16 *)result;
        if (!v21 && !v20)
        {
          if (a5 >= 0x10)
          {
            v6 = a5 & 0xFFFFFFF0;
            v38 = vdupq_n_s32(a4);
            v39.i64[0] = 0xFF000000FFLL;
            v39.i64[1] = 0xFF000000FFLL;
            v40 = v6;
            v41 = (int8x16_t *)result;
            v42 = (int8x16_t *)a2;
            do
            {
              v43 = v42[1];
              v44 = *(int8x16_t *)((char *)v42 + 2 * a3);
              v45 = *(int8x16_t *)((char *)v42 + 2 * a3 + 16);
              v46 = (int32x4_t)vmovl_u16(vrhadd_u16((uint16x4_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), (uint16x4_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)));
              v99.val[2] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vmovl_u16(vrhadd_u16(*(uint16x4_t *)v43.i8, *(uint16x4_t *)v45.i8)), v38), 0x10uLL), v39);
              v99.val[0] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vmovl_u16(vrhadd_u16(*(uint16x4_t *)v42->i8, *(uint16x4_t *)v44.i8)), v38), 0x10uLL), v39);
              v99.val[3] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v46, v38), 0x10uLL), v39);
              v99.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vmovl_u16(vrhadd_u16((uint16x4_t)*(_OWORD *)&vextq_s8(*v42, *v42, 8uLL), (uint16x4_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL))), v38), 0x10uLL), v39);
              *v41++ = vqtbl4q_s8(v99, (int8x16_t)xmmword_208F05040);
              v42 += 2;
              v40 -= 16;
            }
            while (v40);
            if (v6 == a5)
              return result;
            if ((a5 & 8) == 0)
              goto LABEL_60;
          }
          else
          {
            v6 = 0;
          }
          v47 = v6;
          v6 = a5 & 0xFFFFFFF8;
          v48 = vdupq_n_s32(a4);
          v49 = (uint16x8_t *)((char *)a2 + 2 * v47);
          v50 = (uint16x8_t *)((char *)a2 + 2 * v47 + 2 * a3);
          v51 = (_QWORD *)((char *)result + v47);
          v52 = v47 - v6;
          v53.i64[0] = 0xFF000000FFLL;
          v53.i64[1] = 0xFF000000FFLL;
          do
          {
            v54 = *v49++;
            v55 = v54;
            v56 = *v50++;
            v57 = vrhaddq_u16(v55, v56);
            v96.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vmovl_high_u16(v57), v48), 0x10uLL), v53);
            v96.val[0] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v57.i8), v48), 0x10uLL), v53);
            *v51++ = vqtbl2q_s8(v96, (int8x16_t)xmmword_208F05050).u64[0];
            v52 += 8;
          }
          while (v52);
          if (v6 == a5)
            return result;
        }
      }
      else
      {
        v6 = 0;
      }
LABEL_60:
      v58 = a5 - v6;
      v59 = (char *)result + v6;
      v60 = (unsigned __int16 *)a2 + v6 + a3;
      v61 = (unsigned __int16 *)a2 + v6;
      do
      {
        v63 = *v61++;
        v62 = v63;
        v64 = *v60++;
        v65 = (int)(((v62 + v64 + 1) >> 1) * a4) >> 16;
        if (v65 >= 255)
          LOBYTE(v65) = -1;
        *v59++ = v65;
        --v58;
      }
      while (v58);
      return result;
    }
    v13 = a5 - 1;
    if ((int)a5 < 1)
      return result;
    v14 = 256 - a6;
    v15 = (unsigned __int16 *)a2 + a3;
    if (a5 >= 8)
    {
      LODWORD(v16) = 0;
      v22 = (unsigned __int16 *)((char *)result + a5);
      v23 = (unint64_t)a2->u64 + 2 * v13 + 2 * a3 + 2;
      v25 = &a2->i16[v13 + 1] > (__int16 *)result && v22 > (unsigned __int16 *)a2;
      v26 = v15 < v22 && v23 > (unint64_t)result;
      if (!v26 && !v25)
      {
        v27 = vdupq_n_s32(v14);
        v28 = vdupq_n_s32(a6);
        v29 = vdupq_n_s32(a4);
        if (a5 >= 0x10)
        {
          v30 = a5 & 0x7FFFFFF0;
          v80.i64[0] = 0x8000000080;
          v80.i64[1] = 0x8000000080;
          v81.i64[0] = 0xFF000000FFLL;
          v81.i64[1] = 0xFF000000FFLL;
          v82 = a5 & 0xFFFFFFF0;
          v83 = (int8x16_t *)result;
          v84 = a2;
          do
          {
            v85 = (uint16x8_t *)((char *)v84 + 2 * a3);
            v87 = *v84;
            v86 = v84[1];
            v84 += 2;
            v88 = v85[1];
            v101.val[3] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v28, (int32x4_t)vmovl_high_u16(v88)), v27, (int32x4_t)vmovl_high_u16(v86)), v80), 8uLL), v29), 0x10uLL), v81);
            v101.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v28, (int32x4_t)vmovl_high_u16(*v85)), v27, (int32x4_t)vmovl_high_u16(v87)), v80), 8uLL), v29), 0x10uLL), v81);
            v101.val[2] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v28, (int32x4_t)vmovl_u16(*(uint16x4_t *)v88.i8)), v27, (int32x4_t)vmovl_u16(*(uint16x4_t *)v86.i8)), v80), 8uLL), v29), 0x10uLL), v81);
            v101.val[0] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v28, (int32x4_t)vmovl_u16(*(uint16x4_t *)v85->i8)), v27, (int32x4_t)vmovl_u16(*(uint16x4_t *)v87.i8)), v80), 8uLL), v29), 0x10uLL), v81);
            *v83++ = vqtbl4q_s8(v101, (int8x16_t)xmmword_208F05040);
            v82 -= 16;
          }
          while (v82);
          if (v30 == a5)
            return result;
          if ((a5 & 8) == 0)
          {
            v32 = (unsigned __int16 *)a2 + v30;
            v31 = (__int128 *)((char *)result + v30);
            v15 += v30;
            LODWORD(v16) = a5 & 0x7FFFFFF0;
LABEL_46:
            v33 = a5 - v16;
            do
            {
              v35 = *v32++;
              v34 = v35;
              v36 = *v15++;
              v37 = (int)(((int)(v36 * a6 + v14 * v34 + 128) >> 8) * a4) >> 16;
              if (v37 >= 255)
                LOBYTE(v37) = -1;
              *(_BYTE *)v31 = v37;
              v31 = (__int128 *)((char *)v31 + 1);
              --v33;
            }
            while (v33);
            return result;
          }
        }
        else
        {
          v30 = 0;
        }
        v16 = a5 & 0x7FFFFFF8;
        v89 = a5 & 0xFFFFFFF8;
        v15 = (unsigned __int16 *)((char *)v15 + v89 * 2);
        v31 = (__int128 *)((char *)result + (a5 & 0xFFFFFFF8));
        v32 = &a2->u16[v89];
        v90 = (uint16x8_t *)((char *)a2 + 2 * v30);
        v91 = (_QWORD *)((char *)result + v30);
        v92 = v30 - (a5 & 0xFFFFFFF8);
        v93.i64[0] = 0x8000000080;
        v93.i64[1] = 0x8000000080;
        v94.i64[0] = 0xFF000000FFLL;
        v94.i64[1] = 0xFF000000FFLL;
        result = &xmmword_208F05000;
        do
        {
          v95 = *(uint16x8_t *)((char *)v90 + 2 * a3);
          v98.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v28, (int32x4_t)vmovl_high_u16(v95)), v27, (int32x4_t)vmovl_high_u16(*v90)), v93), 8uLL), v29), 0x10uLL), v94);
          v98.val[0] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(vshrq_n_s32(vaddq_s32(vmlaq_s32(vmulq_s32(v28, (int32x4_t)vmovl_u16(*(uint16x4_t *)v95.i8)), v27, (int32x4_t)vmovl_u16(*(uint16x4_t *)v90->i8)), v93), 8uLL), v29), 0x10uLL), v94);
          *v91++ = vqtbl2q_s8(v98, (int8x16_t)xmmword_208F05050).u64[0];
          ++v90;
          v92 += 8;
        }
        while (v92);
        if (v16 == a5)
          return result;
        goto LABEL_46;
      }
    }
    else
    {
      LODWORD(v16) = 0;
    }
    v31 = result;
    v32 = (unsigned __int16 *)a2;
    goto LABEL_46;
  }
  if ((int)a5 < 1)
    return result;
  if (a5 >= 8 && ((char *)a2 + 2 * a5 <= (char *)result || (char *)result + a5 <= (char *)a2))
  {
    if (a5 >= 0x10)
    {
      v7 = a5 & 0xFFFFFFF0;
      v66 = vdupq_n_s32(a4);
      v67.i64[0] = 0xFF000000FFLL;
      v67.i64[1] = 0xFF000000FFLL;
      v68 = v7;
      v69 = (int8x16_t *)result;
      v70 = a2;
      do
      {
        v72 = *v70;
        v71 = v70[1];
        v70 += 2;
        v100.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v66, (int32x4_t)vmovl_high_u16(v72)), 0x10uLL), v67);
        v100.val[3] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v66, (int32x4_t)vmovl_high_u16(v71)), 0x10uLL), v67);
        v100.val[2] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v66, (int32x4_t)vmovl_u16(*(uint16x4_t *)v71.i8)), 0x10uLL), v67);
        v100.val[0] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v66, (int32x4_t)vmovl_u16(*(uint16x4_t *)v72.i8)), 0x10uLL), v67);
        *v69++ = vqtbl4q_s8(v100, (int8x16_t)xmmword_208F05040);
        v68 -= 16;
      }
      while (v68);
      if (v7 == a5)
        return result;
      if ((a5 & 8) == 0)
        goto LABEL_11;
    }
    else
    {
      v7 = 0;
    }
    v73 = v7;
    v7 = a5 & 0xFFFFFFF8;
    v74 = vdupq_n_s32(a4);
    v75 = (uint16x8_t *)((char *)a2 + 2 * v73);
    v76 = (_QWORD *)((char *)result + v73);
    v77 = v73 - v7;
    v78.i64[0] = 0xFF000000FFLL;
    v78.i64[1] = 0xFF000000FFLL;
    do
    {
      v79 = *v75++;
      v97.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v74, (int32x4_t)vmovl_high_u16(v79)), 0x10uLL), v78);
      v97.val[0] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32(v74, (int32x4_t)vmovl_u16(*(uint16x4_t *)v79.i8)), 0x10uLL), v78);
      *v76++ = vqtbl2q_s8(v97, (int8x16_t)xmmword_208F05050).u64[0];
      v77 += 8;
    }
    while (v77);
    if (v7 == a5)
      return result;
  }
  else
  {
    v7 = 0;
  }
LABEL_11:
  v8 = a5 - v7;
  v9 = (char *)result + v7;
  v10 = (unsigned __int16 *)a2 + v7;
  do
  {
    v11 = *v10++;
    v12 = (int)(v11 * a4) >> 16;
    if (v12 >= 255)
      LOBYTE(v12) = -1;
    *v9++ = v12;
    --v8;
  }
  while (v8);
  return result;
}

uint64_t ScalePlane(unsigned __int8 *a1, int a2, libyuv *this, int a4, int8x16_t *a5, int a6, uint64_t a7, const unsigned __int8 *a8, int a9)
{
  int v9;
  int v11;
  unsigned __int8 *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  _BOOL4 v22;
  unint64_t v23;
  int v24;
  unsigned __int8 *v25;
  uint64_t result;
  char v27;
  void *(*v28)(void *, void *, int);
  void *(*v29)(void *, void *, int);
  uint64_t v30;
  unint64_t v31;
  signed int v32;
  int v33;
  void (*v34)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t);
  void (*v35)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t);
  int v36;
  char v37;
  int8x16_t *(*v38)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  int8x16_t *(*v39)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  uint64_t v40;
  int v42;
  int v43;
  int v44;
  void *v45;
  void *v46;
  void *v47;
  char v48;
  uint8x16_t *(*v49)(uint8x16_t *, uint16x8_t *, int);
  const char *(*v50)(const char *, __int16 *, int);
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  const char *v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  const char *(*v61)(const char *, uint64_t, char *, int);
  void (*v62)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t);
  int v63;
  int v64;
  char v65;
  void (*v66)(unsigned __int8 *, int8x16_t *, uint64_t);
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  void (*v72)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t);
  void (*v73)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t);
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  void (*v85)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t);
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  void *v90;
  int v91;
  int v92;
  void (*v93)(_QWORD, uint64_t, _QWORD, _QWORD, void *, unsigned __int8 *);
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  size_t v97;
  uint64_t v98;
  unsigned __int8 *v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  unsigned int v105;

  v9 = (int)a8;
  v11 = a6;
  v12 = (unsigned __int8 *)a5;
  v13 = (unint64_t)this;
  v14 = a9;
  if ((int)this >= 0)
    v15 = this;
  else
    v15 = -(int)this;
  if (a4 >= 0)
    v16 = a4;
  else
    v16 = -a4;
  if (a9 != 2)
  {
    if (a9 != 3)
      goto LABEL_23;
    if ((int)v15 > 2 * (int)a7 && 2 * (int)a8 < v16)
    {
      v17 = 3;
      goto LABEL_35;
    }
  }
  if (3 * (_DWORD)a8 == v16 || v16 == (_DWORD)a8 || v16 == 1)
    v14 = 1;
  else
    v14 = 2;
  if ((_DWORD)v15 == 1)
  {
    v17 = 0;
    goto LABEL_35;
  }
LABEL_23:
  v22 = (_DWORD)v15 != (_DWORD)a7 && 3 * (_DWORD)a7 != (_DWORD)v15 && (_DWORD)v15 != 1;
  if (v14 == 1)
    v17 = v22;
  else
    v17 = v14;
LABEL_35:
  if (a4 >= 0)
    v23 = a4;
  else
    v23 = -a4;
  if (a4 >= 0)
    v24 = a2;
  else
    v24 = -a2;
  if (a4 < 0)
    v25 = &a1[~a4 * (uint64_t)a2];
  else
    v25 = a1;
  if ((_DWORD)a7 != (_DWORD)this || (_DWORD)v23 != (_DWORD)a8)
  {
    v101 = v24;
    if ((_DWORD)a7 == (_DWORD)this && v17 != 3)
    {
      if ((int)v23 >= (int)a8)
      {
        v31 = (uint64_t)((unint64_t)v23 << 16) / (int)a8;
        v32 = (v31 >> 1) - 0x8000;
        if ((v31 & 0x80000000) != 0)
          v32 = 0x8000 - (-(int)v31 >> 1);
      }
      else
      {
        LODWORD(v31) = 0;
        v32 = 0;
        if ((int)a8 >= 2 && v23 >= 2)
        {
          v32 = 0;
          v31 = ((v23 << 16) - 65537) / ((_DWORD)a8 - 1);
        }
      }
      if (v23 <= 1)
        v36 = 0;
      else
        v36 = ((_DWORD)v23 << 16) - 65537;
      v37 = cpu_info_;
      if (!cpu_info_)
      {
        v37 = 7;
        cpu_info_ = 7;
      }
      v38 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_Any_NEON;
      if ((this & 0xF) == 0)
        v38 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_NEON;
      if ((v37 & 4) != 0)
        v39 = v38;
      else
        v39 = InterpolateRow_C;
      if ((int)a8 >= 1)
      {
        v40 = v24;
        if (v17)
        {
          do
          {
            if (v32 >= v36)
              v42 = v36;
            else
              v42 = v32;
            v39((int8x16_t *)v12, (uint8x16_t *)&v25[(v42 >> 16) * (uint64_t)v24], v40, v13, BYTE1(v42));
            v24 = v101;
            v12 += a6;
            v32 = v42 + v31;
            --v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            if (v32 >= v36)
              v43 = v36;
            else
              v43 = v32;
            v39((int8x16_t *)v12, (uint8x16_t *)&v25[(v43 >> 16) * (uint64_t)v24], v40, v13, 0);
            v24 = v101;
            v12 += a6;
            v32 = v43 + v31;
            --v9;
          }
          while (v9);
        }
      }
      return 0;
    }
    if ((int)v15 < (int)a7 || (int)v23 < (int)a8)
    {
      v44 = 2 * (_DWORD)a8;
    }
    else
    {
      if (4 * (_DWORD)a7 == 3 * (_DWORD)this && 3 * (_DWORD)v23 == 4 * (_DWORD)a8)
      {
        if (v17 == 1)
          v33 = 0;
        else
          v33 = v24;
        if (cpu_info_)
        {
          if (v17)
            v34 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_1_Box_C;
          else
            v34 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_C;
          if (v17)
            v35 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_0_Box_C;
          else
            v35 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_C;
          if ((cpu_info_ & 4) == 0)
          {
LABEL_216:
            v91 = v33;
            if ((int)a8 < 3)
            {
              v83 = a7;
              v84 = v25;
              v85 = v34;
            }
            else
            {
              v80 = 0;
              v100 = (_DWORD)a8 - 2;
              v81 = v33;
              v82 = a6;
              v94 = 3 * v24;
              v96 = -v33;
              v83 = a7;
              v84 = v25;
              v98 = v24;
              v85 = v34;
              do
              {
                v35(v84, v81, v12, v83);
                v86 = &v12[v82];
                v85(&v84[v98], v81, v86, v83);
                v87 = &v86[v82];
                v35(&v84[v94], v96, v87, v83);
                v84 += v98 + v94;
                v12 = &v87[v82];
                v80 += 3;
              }
              while (v80 < v100);
            }
            if (v9 % 3 == 1)
            {
              v35(v84, 0, v12, v83);
            }
            else if (v9 % 3 == 2)
            {
              v35(v84, v91, v12, v83);
              v85(&v84[v101], 0, &v12[a6], v83);
            }
            return 0;
          }
        }
        else
        {
          cpu_info_ = 7;
        }
        if (v17)
          v35 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_0_Box_Any_NEON;
        else
          v35 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_Any_NEON;
        if (v17)
          v34 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_1_Box_Any_NEON;
        else
          v34 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_Any_NEON;
        HIDWORD(v79) = -1431655765 * a7 + 715827880;
        LODWORD(v79) = HIDWORD(v79);
        if ((v79 >> 3) <= 0xAAAAAAA)
        {
          if (v17)
            v35 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_0_Box_NEON;
          else
            v35 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_NEON;
          if (v17)
            v34 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_1_Box_NEON;
          else
            v34 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown34_NEON;
        }
        goto LABEL_216;
      }
      v44 = 2 * (_DWORD)a8;
      if ((_DWORD)this == 2 * (_DWORD)a7 && v44 == (_DWORD)v23)
      {
        if (v17)
          v60 = 0;
        else
          v60 = v24;
        if (cpu_info_)
        {
          v61 = ScaleRowDown2Box_C;
          if (v17 == 1)
            v61 = ScaleRowDown2Linear_C;
          if (v17)
            v62 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))v61;
          else
            v62 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown2_C;
          if ((cpu_info_ & 4) == 0)
          {
LABEL_195:
            if ((int)a8 >= 1)
            {
              v74 = a7;
              v75 = &v25[v60];
              v76 = 2 * v24;
              if (v17 >= 2)
                v77 = v24;
              else
                v77 = 0;
              v78 = v77;
              do
              {
                v62(v75, v78, v12, v74);
                result = 0;
                v75 += v76;
                v12 += v11;
                --v9;
              }
              while (v9);
              return result;
            }
            return 0;
          }
        }
        else
        {
          cpu_info_ = 7;
        }
        v72 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown2Box_Any_NEON;
        if (v17 == 1)
          v72 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown2Linear_Any_NEON;
        if (v17)
          v62 = v72;
        else
          v62 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown2_Any_NEON;
        if ((a7 & 0xF) == 0)
        {
          v73 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown2Box_NEON;
          if (v17 == 1)
            v73 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown2Linear_NEON;
          if (v17)
            v62 = v73;
          else
            v62 = (void (*)(unsigned __int8 *, uint64_t, unsigned __int8 *, uint64_t))ScaleRowDown2_NEON;
        }
        goto LABEL_195;
      }
      if (3 * (_DWORD)this == 8 * (_DWORD)a7 && 3 * (_DWORD)v23 == 8 * (_DWORD)a8)
      {
        libyuv::ScalePlaneDown38(a7, (int)a8, v24, a6, v25, (uint64_t)a5, v17);
        return 0;
      }
      if (4 * (_DWORD)a7 == (_DWORD)this && 4 * (_DWORD)a8 == (_DWORD)v23)
      {
        if (v17 == 3 || !v17)
        {
          libyuv::ScalePlaneDown4(a7, (int)a8, v24, a6, (uint64_t)v25, (uint64_t)a5, v17);
          return 0;
        }
        goto LABEL_159;
      }
    }
    if (v17 == 3 && v44 < (int)v23)
    {
      v99 = v25;
      v105 = 0;
      v104 = 0;
      v103 = 0;
      ScaleSlope((uint64_t)this, v23, a7, (int)a8, 3, &v105, &v104, (int *)&v103 + 1, (int *)&v103);
      v97 = (2 * v15);
      v45 = malloc_type_malloc((v97 + 63), 0x1781B9ABuLL);
      v46 = (void *)(((unint64_t)v45 + 63) & 0xFFFFFFFFFFFFFFC0);
      if (v46)
      {
        v90 = v45;
        v95 = a7;
        v47 = libyuv::ScaleAddCols1_C;
        if (HIDWORD(v103) == 0x10000)
          v47 = libyuv::ScaleAddCols0_C;
        if (WORD2(v103))
          v47 = libyuv::ScaleAddCols2_C;
        v93 = (void (*)(_QWORD, uint64_t, _QWORD, _QWORD, void *, unsigned __int8 *))v47;
        v48 = cpu_info_;
        if (!cpu_info_)
        {
          v48 = 7;
          cpu_info_ = 7;
        }
        v49 = ScaleAddRow_Any_NEON;
        if ((v15 & 0xF) == 0)
          v49 = ScaleAddRow_NEON;
        if ((v48 & 4) != 0)
          v50 = (const char *(*)(const char *, __int16 *, int))v49;
        else
          v50 = ScaleAddRow_C;
        if (v9 >= 1)
        {
          v51 = v11;
          v52 = 0;
          v92 = (_DWORD)v23 << 16;
          v53 = v101;
          v102 = v51;
          do
          {
            v54 = v104 >> 16;
            v55 = (const char *)&v99[(int)v53 * (uint64_t)(v104 >> 16)];
            v56 = v103 + v104;
            if ((int)v103 + v104 >= v92)
              v56 = v92;
            v104 = v56;
            v57 = (v56 >> 16) - v54;
            if (v57 <= 1)
              v58 = 1;
            else
              v58 = v57;
            bzero(v46, v97);
            v59 = v58;
            do
            {
              v50(v55, (__int16 *)v46, v15);
              v55 += v53;
              --v59;
            }
            while (v59);
            v93(v95, v58, v105, HIDWORD(v103), v46, v12);
            v12 += v102;
            ++v52;
          }
          while (v52 != v9);
        }
        free(v90);
      }
      return v46 == 0;
    }
LABEL_159:
    v63 = a7 + 2;
    if ((int)a7 >= -1)
      v63 = a7 + 1;
    v64 = v63 >> 1;
    if (v64 != (_DWORD)this || v17 != 1)
    {
      v68 = (_DWORD)a8 + 2;
      if ((int)a8 >= -1)
        v68 = (_DWORD)a8 + 1;
      if (v64 == (_DWORD)this && v68 >> 1 == (_DWORD)v23 && (v17 & 0xFFFFFFFE) == 2)
      {
        libyuv::ScalePlaneUp2_Bilinear((libyuv *)v23, a7, (char)a8, v24, a6, (uint64_t)v25, (uint64_t)a5, a8, v88);
      }
      else
      {
        if (v17 && (int)v23 < (int)a8)
          return libyuv::ScalePlaneBilinearUp((uint64_t)this, v23, a7, (int)a8, v24, a6, (uint64_t)v25, a5, v17);
        if (v17)
          return libyuv::ScalePlaneBilinearDown((uint64_t)this, v23, a7, (int)a8, v24, a6, (uint64_t)v25, a5, v17);
        libyuv::ScalePlaneSimple(this, v23, a7, (int)a8, v24, a6, (uint64_t)v25, (const unsigned __int8 *)a5, v88);
      }
      return 0;
    }
    v65 = cpu_info_;
    if (!cpu_info_)
    {
      v65 = 7;
      cpu_info_ = 7;
    }
    if ((v65 & 4) != 0)
      v66 = (void (*)(unsigned __int8 *, int8x16_t *, uint64_t))ScaleRowUp2_Linear_Any_NEON;
    else
      v66 = (void (*)(unsigned __int8 *, int8x16_t *, uint64_t))ScaleRowUp2_Linear_Any_C;
    v67 = v23 - 1;
    if ((_DWORD)a8 == 1)
    {
      v66(&v25[(v67 / 2) * (uint64_t)v24], a5, a7);
    }
    else if ((int)a8 >= 1)
    {
      v69 = v24;
      v70 = 0x7FFF;
      v71 = ((uint64_t)v67 << 16) / ((int)a8 - 1);
      do
      {
        v66(&v25[v69 * (uint64_t)(v70 >> 16)], (int8x16_t *)v12, a7);
        result = 0;
        v12 += v11;
        v70 += v71;
        --v9;
      }
      while (v9);
      return result;
    }
    return 0;
  }
  result = 0;
  if ((int)this >= 1 && (_DWORD)a8)
  {
    if ((a8 & 0x80000000) != 0)
    {
      v12 = &a5->u8[~(_DWORD)a8 * (uint64_t)a6];
      v11 = -a6;
      v9 = -(int)a8;
    }
    if (v24 == (_DWORD)this && v11 == (_DWORD)this)
    {
      v24 = 0;
      v11 = 0;
      v13 = (v9 * (_DWORD)this);
      v9 = 1;
    }
    if (v12 != v25 || v24 != v11)
    {
      v27 = cpu_info_;
      if (!cpu_info_)
      {
        v27 = 7;
        cpu_info_ = 7;
      }
      v28 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
      if ((v13 & 0x1F) == 0)
        v28 = (void *(*)(void *, void *, int))CopyRow_NEON;
      if ((v27 & 4) != 0)
        v29 = v28;
      else
        v29 = CopyRow_C;
      v30 = v24;
      do
      {
        v29(v25, v12, v13);
        v25 += v30;
        v12 += v11;
        --v9;
      }
      while (v9);
    }
    return 0;
  }
  return result;
}

unsigned __int8 *(*libyuv::ScalePlaneDown38(uint64_t a1, int a2, int a3, int a4, unsigned __int8 *a5, uint64_t a6, int a7))(unsigned __int8 *result, uint64_t a2, uint64_t a3, int a4)
{
  int v10;
  uint64_t (*v11)(unsigned __int8 *, uint64_t, uint64_t, uint64_t);
  unsigned __int8 *(*result)(unsigned __int8 *, uint64_t, uint64_t, int);
  unsigned __int8 *(*v13)(unsigned __int8 *, uint64_t, uint64_t, int);
  uint64_t (*v14)(unsigned __int8 *, uint64_t, uint64_t, uint64_t);
  unsigned int v15;
  unint64_t v16;
  unsigned __int8 *(*v17)(unsigned __int8 *, uint64_t, uint64_t, int);
  uint64_t (*v18)(unsigned __int8 *, uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *(*v32)(unsigned __int8 *, uint64_t, uint64_t, int);

  if (a7 == 1)
    v10 = 0;
  else
    v10 = a3;
  if (cpu_info_)
  {
    if (a7)
      v11 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))ScaleRowDown38_2_Box_C;
    else
      v11 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))ScaleRowDown38_C;
    if (a7)
      result = ScaleRowDown38_3_Box_C;
    else
      result = ScaleRowDown38_C;
    if ((cpu_info_ & 4) == 0)
    {
      v27 = a3;
      v28 = a4;
      v26 = v10;
      v29 = a2;
      v32 = result;
      if (a2 < 3)
        goto LABEL_30;
LABEL_28:
      v19 = 0;
      v31 = a2 - 2;
      v20 = v10;
      v21 = 3 * a3;
      v22 = a4;
      v30 = 6 * a3;
      v23 = 5 * a3;
      do
      {
        v32(a5, v20, a6, a1);
        v24 = a6 + v22;
        v32(&a5[v21], v20, v24, a1);
        v25 = v24 + v22;
        result = (unsigned __int8 *(*)(unsigned __int8 *, uint64_t, uint64_t, int))v11(&a5[v30], v20, v25, a1);
        a5 += v21 + v23;
        a6 = v25 + v22;
        v19 += 3;
      }
      while (v19 < v31);
      goto LABEL_30;
    }
  }
  else
  {
    cpu_info_ = 7;
  }
  v13 = (unsigned __int8 *(*)(unsigned __int8 *, uint64_t, uint64_t, int))ScaleRowDown38_3_Box_Any_NEON;
  v14 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))ScaleRowDown38_Any_NEON;
  if (a7)
    v14 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))ScaleRowDown38_2_Box_Any_NEON;
  else
    v13 = (unsigned __int8 *(*)(unsigned __int8 *, uint64_t, uint64_t, int))ScaleRowDown38_Any_NEON;
  HIDWORD(v16) = -1431655765 * a1 + 715827880;
  LODWORD(v16) = HIDWORD(v16);
  v15 = v16 >> 2;
  v17 = (unsigned __int8 *(*)(unsigned __int8 *, uint64_t, uint64_t, int))ScaleRowDown38_3_Box_NEON;
  v18 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))ScaleRowDown38_NEON;
  if (a7)
    v18 = (uint64_t (*)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))ScaleRowDown38_2_Box_NEON;
  else
    v17 = (unsigned __int8 *(*)(unsigned __int8 *, uint64_t, uint64_t, int))ScaleRowDown38_NEON;
  if (v15 <= 0x15555554)
    result = v17;
  else
    result = v13;
  if (v15 <= 0x15555554)
    v11 = v18;
  else
    v11 = v14;
  v27 = a3;
  v28 = a4;
  v26 = v10;
  v29 = a2;
  v32 = result;
  if (a2 >= 3)
    goto LABEL_28;
LABEL_30:
  if (v29 % 3 == 1)
    return (unsigned __int8 *(*)(unsigned __int8 *, uint64_t, uint64_t, int))v32(a5, 0, a6, a1);
  if (v29 % 3 == 2)
  {
    v32(a5, v26, a6, a1);
    return (unsigned __int8 *(*)(unsigned __int8 *, uint64_t, uint64_t, int))v32(&a5[3 * v27], 0, a6 + v28, a1);
  }
  return result;
}

uint64_t libyuv::ScalePlaneDown4(uint64_t result, int a2, int a3, int a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  int v8;
  uint64_t v9;
  int v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v8 = a2;
  v9 = result;
  v10 = 2 * a3;
  if (a7)
    v10 = 0;
  if (cpu_info_)
  {
    if (a7)
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))ScaleRowDown4Box_C;
    else
      v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))ScaleRowDown4_C;
    if ((cpu_info_ & 4) == 0)
    {
      if (a2 < 1)
        return result;
      goto LABEL_19;
    }
  }
  else
  {
    cpu_info_ = 7;
  }
  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))ScaleRowDown4Box_Any_NEON;
  if (!a7)
    v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))ScaleRowDown4_Any_NEON;
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))ScaleRowDown4_NEON;
  if (a7)
    v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))ScaleRowDown4Box_NEON;
  if ((result & 7) != 0)
    v11 = v12;
  else
    v11 = v13;
  if (a2 >= 1)
  {
LABEL_19:
    v14 = a5 + v10;
    if (a7 >= 2)
      v15 = a3;
    else
      v15 = 0;
    v16 = v15;
    v17 = 4 * a3;
    v18 = a4;
    do
    {
      result = v11(v14, v16, a6, v9);
      v14 += v17;
      a6 += v18;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t libyuv::ScalePlaneUp2_Bilinear(libyuv *this, uint64_t a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7, const unsigned __int8 *a8, unsigned __int8 *a9)
{
  int v15;
  char v16;
  void *v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  uint64_t (*v21)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t);
  uint64_t (*v22)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t);

  v15 = (int)this;
  v16 = cpu_info_;
  if (!cpu_info_)
  {
    v16 = 7;
    cpu_info_ = 7;
  }
  if ((v16 & 4) != 0)
    v17 = ScaleRowUp2_Bilinear_Any_NEON;
  else
    v17 = ScaleRowUp2_Bilinear_Any_C;
  v22 = (uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))v17;
  result = ((uint64_t (*)(uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))v17)(a6, 0, a7, 0, a2);
  v19 = a7 + a5;
  if (v15 < 2)
  {
    v21 = v22;
    if ((a3 & 1) == 0)
      return v21(a6, 0, v19, 0, a2);
  }
  else
  {
    v20 = v15 - 1;
    do
    {
      result = v22(a6, a4, v19, a5, a2);
      v21 = v22;
      a6 += a4;
      v19 += 2 * a5;
      --v20;
    }
    while (v20);
    if ((a3 & 1) == 0)
      return v21(a6, 0, v19, 0, a2);
  }
  return result;
}

BOOL libyuv::ScalePlaneBilinearUp(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, int8x16_t *a8, int a9)
{
  int v13;
  int v16;
  int v17;
  unsigned int v18;
  char v19;
  int v20;
  int8x16_t *(*v21)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  int8x16_t *(*v22)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  int8x8_t *(*v23)(int8x8_t *, uint64_t, int, signed int, signed int);
  unsigned int v24;
  _BOOL4 v25;
  int8x8_t *(*v26)(int8x8_t *, uint64_t, int, signed int, signed int);
  int8x8_t *(*v27)(int8x8_t *, uint64_t, int, signed int, signed int);
  int v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v46;
  void *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  int8x8_t *(*v54)(int8x8_t *, uint64_t, int, signed int, signed int);
  int8x16_t *(*v55)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  uint64_t v56;
  int v57;
  signed int v58;

  v13 = a4;
  v16 = a1;
  v58 = 0;
  v57 = 0;
  v56 = 0;
  v17 = a2 << 16;
  ScaleSlope(a1, a2, a3, a4, a9, &v58, &v57, (int *)&v56 + 1, (int *)&v56);
  if (v16 >= 0)
    v18 = v16;
  else
    v18 = -v16;
  v19 = cpu_info_;
  if (!cpu_info_)
  {
    v19 = 7;
    cpu_info_ = 7;
  }
  v20 = v17 - 0x10000;
  v21 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_Any_NEON;
  if ((a3 & 0xF) == 0)
    v21 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_NEON;
  if ((v19 & 4) != 0)
    v22 = v21;
  else
    v22 = InterpolateRow_C;
  v55 = v22;
  v23 = (int8x8_t *(*)(int8x8_t *, uint64_t, int, signed int, signed int))ScaleFilterCols_C;
  if (v18 >> 15)
    v23 = (int8x8_t *(*)(int8x8_t *, uint64_t, int, signed int, signed int))ScaleFilterCols64_C;
  v24 = cpu_info_;
  if (!cpu_info_)
  {
    v24 = 7;
    cpu_info_ = 7;
  }
  v51 = a2;
  v25 = v18 < 0x8000;
  v26 = ScaleFilterCols_Any_NEON;
  if ((a3 & 7) == 0)
    v26 = ScaleFilterCols_NEON;
  if ((v25 & (v24 >> 2)) != 0)
    v27 = v26;
  else
    v27 = v23;
  v54 = v27;
  v28 = v57;
  if (v57 > v20)
  {
    v57 = v20;
    v28 = v20;
  }
  v29 = malloc_type_malloc((int)((2 * (a3 + 31)) | 0x3F), 0x8C152A96uLL);
  v30 = ((unint64_t)v29 + 63) & 0xFFFFFFFFFFFFFFC0;
  if (v30)
  {
    v46 = a6;
    v47 = v29;
    v31 = a5;
    v32 = (a3 + 31) & 0xFFFFFFE0;
    v33 = a7;
    v34 = (v28 >> 16);
    v49 = v33;
    v35 = v33 + a5 * (uint64_t)(int)v34;
    v54((int8x8_t *)(((unint64_t)v29 + 63) & 0xFFFFFFFFFFFFFFC0), v35, a3, v58, HIDWORD(v56));
    v53 = v31;
    if (v51 <= 1)
      v36 = 0;
    else
      v36 = v31;
    v37 = v35 + v36;
    v48 = v30;
    v54((int8x8_t *)(v30 + v32), v37, a3, v58, HIDWORD(v56));
    if (v13 >= 1)
    {
      if (v51 <= 2)
        v38 = 0;
      else
        v38 = v31;
      v39 = v37 + v38;
      v52 = v20 >> 16;
      v50 = v49 + (int)v53 * (uint64_t)(v20 >> 16);
      v40 = v57;
      if (a9 == 1)
      {
        do
        {
          v41 = (v40 >> 16);
          if ((_DWORD)v41 == (_DWORD)v34)
            goto LABEL_32;
          if (v40 > v20)
          {
            v57 = v20;
            v41 = v52;
            v39 = v50;
          }
          if ((_DWORD)v41 == (_DWORD)v34)
          {
LABEL_32:
            v41 = v34;
          }
          else
          {
            v54((int8x8_t *)v30, v39, a3, v58, HIDWORD(v56));
            v30 += v32;
            v32 = -v32;
            v42 = v53;
            if (v57 + 0x10000 >= v20)
              v42 = 0;
            v39 += v42;
          }
          v55(a8, (uint8x16_t *)v30, 0, a3, 0);
          a8 = (int8x16_t *)((char *)a8 + v46);
          v40 = v57 + v56;
          v57 += v56;
          v34 = v41;
          --v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v43 = (v40 >> 16);
          if ((_DWORD)v43 == (_DWORD)v34)
            goto LABEL_42;
          if (v40 > v20)
          {
            v57 = v20;
            BYTE1(v40) = BYTE1(v20);
            v43 = v52;
            v39 = v50;
          }
          if ((_DWORD)v43 == (_DWORD)v34)
          {
LABEL_42:
            v43 = v34;
          }
          else
          {
            v54((int8x8_t *)v30, v39, a3, v58, HIDWORD(v56));
            v30 += v32;
            v32 = -v32;
            BYTE1(v40) = BYTE1(v57);
            v44 = v53;
            if (v57 + 0x10000 >= v20)
              v44 = 0;
            v39 += v44;
          }
          v55(a8, (uint8x16_t *)v30, v32, a3, BYTE1(v40));
          a8 = (int8x16_t *)((char *)a8 + v46);
          v40 = v57 + v56;
          v57 += v56;
          v34 = v43;
          --v13;
        }
        while (v13);
      }
    }
    free(v47);
    v30 = v48;
  }
  return v30 == 0;
}

uint64_t libyuv::ScalePlaneBilinearDown(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, _BYTE *a8, int a9)
{
  void *v16;
  unint64_t v17;
  int v18;
  _BYTE *(*v19)(_BYTE *, uint64_t, int, int, int);
  uint64_t v20;
  char v21;
  int v22;
  int8x16_t *(*v23)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  int8x16_t *(*v24)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  unsigned int v25;
  uint64_t v26;
  int8x8_t *(*v27)(int8x8_t *, uint64_t, int, signed int, signed int);
  int v28;
  uint8x16_t *v29;
  int8x16_t *(*v30)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  int v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  v16 = malloc_type_malloc((int)a1 + 63, 0xFACDF442uLL);
  v17 = ((unint64_t)v16 + 63) & 0xFFFFFFFFFFFFFFC0;
  if (!v17)
    return 1;
  v32 = a6;
  v33 = v16;
  v18 = a2 << 16;
  if ((int)a1 < 0x8000)
    v19 = ScaleFilterCols_C;
  else
    v19 = ScaleFilterCols64_C;
  ScaleSlope(a1, a2, a3, a4, a9, (_DWORD *)&v36 + 1, (int *)&v36, (int *)&v35 + 1, (int *)&v35);
  if ((int)a1 >= 0)
    v20 = a1;
  else
    v20 = -(int)a1;
  v21 = cpu_info_;
  if (!cpu_info_)
  {
    v21 = 7;
    cpu_info_ = 7;
  }
  v22 = v18 - 0x10000;
  v23 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_Any_NEON;
  if ((v20 & 0xF) == 0)
    v23 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_NEON;
  if ((v21 & 4) != 0)
    v24 = v23;
  else
    v24 = InterpolateRow_C;
  v25 = cpu_info_;
  v26 = a7;
  if (!cpu_info_)
  {
    v25 = 7;
    cpu_info_ = 7;
  }
  v27 = ScaleFilterCols_Any_NEON;
  if ((a3 & 7) == 0)
    v27 = ScaleFilterCols_NEON;
  if (((v20 < 0x8000) & (v25 >> 2)) != 0)
    v19 = (_BYTE *(*)(_BYTE *, uint64_t, int, int, int))v27;
  v28 = v36;
  if ((int)v36 > v22)
  {
    LODWORD(v36) = v18 - 0x10000;
    v28 = v18 - 0x10000;
  }
  if (a4 >= 1)
  {
    if (a9 == 1)
    {
      do
      {
        v19(a8, a7 + a5 * (uint64_t)(v28 >> 16), a3, HIDWORD(v36), HIDWORD(v35));
        a8 += v32;
        v28 = v36 + v35;
        if ((int)v36 + (int)v35 >= v22)
          v28 = v18 - 0x10000;
        LODWORD(v36) = v28;
        --a4;
      }
      while (a4);
    }
    else
    {
      do
      {
        v29 = (uint8x16_t *)(v26 + a5 * (uint64_t)(v28 >> 16));
        v30 = v24;
        v24((int8x16_t *)v17, v29, a5, v20, BYTE1(v28));
        v19(a8, v17, a3, HIDWORD(v36), HIDWORD(v35));
        v24 = v30;
        v26 = a7;
        a8 += v32;
        v28 = v36 + v35;
        if ((int)v36 + (int)v35 >= v22)
          v28 = v18 - 0x10000;
        LODWORD(v36) = v28;
        --a4;
      }
      while (a4);
    }
  }
  free(v33);
  return 0;
}

uint64_t libyuv::ScalePlaneSimple(libyuv *this, int a2, uint64_t a3, int a4, int a5, int a6, uint64_t a7, const unsigned __int8 *a8, unsigned __int8 *a9)
{
  int v13;
  int v15;
  uint64_t result;
  int v17;
  int v18;
  void *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v13 = a4;
  v15 = (int)this;
  v22 = 0;
  v23 = 0;
  result = ScaleSlope((uint64_t)this, a2, a3, a4, 0, (_DWORD *)&v23 + 1, (int *)&v23, (int *)&v22 + 1, (int *)&v22);
  if (v15 >= 0)
    v17 = v15;
  else
    v17 = -v15;
  v18 = 2 * v17;
  if (SHIDWORD(v23) < 0x8000 && v18 == (_DWORD)a3)
    v20 = ScaleColsUp2_C;
  else
    v20 = ScaleCols_C;
  if (v13 >= 1)
  {
    v21 = v23;
    do
    {
      result = ((uint64_t (*)(const unsigned __int8 *, uint64_t, uint64_t, _QWORD, _QWORD))v20)(a8, a7 + a5 * (uint64_t)(v21 >> 16), a3, HIDWORD(v23), HIDWORD(v22));
      a8 += a6;
      v21 = v23 + v22;
      LODWORD(v23) = v23 + v22;
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t I420Scale(unsigned __int8 *a1, int a2, unsigned __int8 *a3, int a4, unsigned __int8 *a5, int a6, libyuv *this, int a8, int8x16_t *a9, int a10, int8x16_t *a11, int a12, int8x16_t *a13, int a14, int a15, int a16, int a17)
{
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t result;
  unsigned int v27;
  unsigned int v28;

  if ((int)this < 0)
    v18 = -((1 - (int)this) >> 1);
  else
    v18 = ((_DWORD)this + 1) >> 1;
  if (a8 < 0)
    v19 = -((1 - a8) >> 1);
  else
    v19 = (a8 + 1) >> 1;
  v20 = -((1 - a15) >> 1);
  if (a15 >= 0)
    v20 = (a15 + 1) >> 1;
  v21 = (a16 + 1) >> 1;
  if (a16 < 0)
    v21 = -((1 - a16) >> 1);
  result = 0xFFFFFFFFLL;
  if (a15 >= 1
    && a11
    && a9
    && a8 <= 0x8000
    && (int)this <= 0x8000
    && (int)this >= 1
    && a1
    && a3
    && a5
    && a8
    && a13
    && a16 >= 1)
  {
    v27 = v20;
    v28 = v21;
    if (ScalePlane(a1, a2, this, a8, a9, a10, a15, (const unsigned __int8 *)a16, a17)|| ScalePlane(a3, a4, (libyuv *)v18, v19, a11, a12, v27, (const unsigned __int8 *)v28, a17))
    {
      return 1;
    }
    else
    {
      return ScalePlane(a5, a6, (libyuv *)v18, v19, a13, a14, v27, (const unsigned __int8 *)v28, a17);
    }
  }
  return result;
}

uint64_t I444Scale(unsigned __int8 *a1, int a2, unsigned __int8 *a3, int a4, unsigned __int8 *a5, int a6, libyuv *this, int a8, int8x16_t *a9, int a10, int8x16_t *a11, int a12, int8x16_t *a13, int a14, unsigned int a15, unsigned int a16, int a17)
{
  uint64_t result;
  BOOL v21;

  result = 0xFFFFFFFFLL;
  v21 = (int)a15 < 1 || a11 == 0 || a9 == 0;
  if (!v21 && a8 <= 0x8000 && (int)this <= 0x8000 && (int)this >= 1 && a1 && a3 && a5 && a8 && a13 && (int)a16 >= 1)
  {
    if (ScalePlane(a1, a2, this, a8, a9, a10, a15, (const unsigned __int8 *)a16, a17)
      || ScalePlane(a3, a4, this, a8, a11, a12, a15, (const unsigned __int8 *)a16, a17))
    {
      return 1;
    }
    else
    {
      return ScalePlane(a5, a6, this, a8, a13, a14, a15, (const unsigned __int8 *)a16, a17);
    }
  }
  return result;
}

uint64_t I422Scale(unsigned __int8 *a1, int a2, unsigned __int8 *a3, int a4, unsigned __int8 *a5, int a6, libyuv *this, int a8, int8x16_t *a9, int a10, int8x16_t *a11, int a12, int8x16_t *a13, int a14, int a15, unsigned int a16, int a17)
{
  unsigned int v19;
  unsigned int v20;
  uint64_t result;
  BOOL v23;
  unsigned int v28;
  unsigned int v29;

  v19 = -((1 - (int)this) >> 1);
  if ((int)this >= 0)
    v19 = ((_DWORD)this + 1) >> 1;
  v20 = (a15 + 1) >> 1;
  if (a15 < 0)
    v20 = -((1 - a15) >> 1);
  result = 0xFFFFFFFFLL;
  v23 = a15 < 1 || a11 == 0 || a9 == 0;
  if (!v23 && a8 <= 0x8000 && (int)this <= 0x8000 && (int)this >= 1 && a1 && a3 && a5 && a8 && a13 && (int)a16 >= 1)
  {
    v28 = v19;
    v29 = v20;
    if (ScalePlane(a1, a2, this, a8, a9, a10, a15, (const unsigned __int8 *)a16, a17)
      || ScalePlane(a3, a4, (libyuv *)v28, a8, a11, a12, v29, (const unsigned __int8 *)a16, a17))
    {
      return 1;
    }
    else
    {
      return ScalePlane(a5, a6, (libyuv *)v28, a8, a13, a14, v29, (const unsigned __int8 *)a16, a17);
    }
  }
  return result;
}

uint64_t libyuv::ScaleAddCols2_C(uint64_t this, int a2, int a3, int a4, uint64_t a5, unsigned __int16 *a6, unsigned __int8 *a7)
{
  int v7;
  int v8;
  int i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint16x8_t *v14;
  int32x4_t v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint16x8_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v23;
  _DWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = a4 >> 16;
  if (a4 >> 16 <= 1)
    v8 = 1;
  else
    v8 = a4 >> 16;
  v24[0] = 0x10000 / (v8 * a2);
  v24[1] = 0x10000 / (a2 + a2 * (v7 & ~(a4 >> 31)));
  if ((int)this >= 1)
  {
    for (i = 0; i != (_DWORD)this; ++i)
    {
      LODWORD(v10) = ((a3 + a4) >> 16) - (a3 >> 16);
      if ((int)v10 <= 1)
        v10 = 1;
      else
        v10 = v10;
      v11 = (uint64_t)a3 >> 16;
      if (v10 >= 0x10)
      {
        v12 = v10 & 0x7FFFFFF0;
        v14 = (uint16x8_t *)(a5 + 16 + 2 * v11);
        v15 = 0uLL;
        v16 = v12;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        do
        {
          v20 = v14[-1];
          v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)v17, v20);
          v15 = (int32x4_t)vaddw_u16((uint32x4_t)v15, *(uint16x4_t *)v20.i8);
          v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, *v14);
          v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v14->i8);
          v14 += 2;
          v16 -= 16;
        }
        while (v16);
        v13 = vaddvq_s32(vaddq_s32(vaddq_s32(v18, v15), vaddq_s32(v19, v17)));
        if (v12 == v10)
          goto LABEL_6;
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
      v21 = v10 - v12;
      v22 = (unsigned __int16 *)(a5 + 2 * v12 + 2 * v11);
      do
      {
        v23 = *v22++;
        v13 += v23;
        --v21;
      }
      while (v21);
LABEL_6:
      *(_BYTE *)a6 = (v24[(int)v10 - v7] * v13) >> 16;
      a6 = (unsigned __int16 *)((char *)a6 + 1);
      a3 += a4;
    }
  }
  return this;
}

uint64_t libyuv::ScaleAddCols1_C(uint64_t this, int a2, int a3, int a4, uint64_t a5, unsigned __int16 *a6, unsigned __int8 *a7)
{
  uint64_t v7;
  int v8;
  uint16x8_t *v9;
  uint16x8_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int32x4_t v14;
  uint64_t v15;
  uint16x8_t *v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  uint16x8_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  int v23;

  LODWORD(v7) = a4 >> 16;
  if (a4 >> 16 <= 1)
    v7 = 1;
  else
    v7 = v7;
  if ((int)this >= 1)
  {
    v8 = 0;
    v9 = (uint16x8_t *)(a5 + 2 * (a3 >> 16));
    v10 = v9 + 1;
    v11 = 2 * v7;
    do
    {
      if (v7 >= 0x10)
      {
        v14 = 0uLL;
        v15 = v7 & 0x7FFFFFF0;
        v16 = v10;
        v17 = 0uLL;
        v18 = 0uLL;
        v19 = 0uLL;
        do
        {
          v20 = v16[-1];
          v17 = (int32x4_t)vaddw_high_u16((uint32x4_t)v17, v20);
          v14 = (int32x4_t)vaddw_u16((uint32x4_t)v14, *(uint16x4_t *)v20.i8);
          v19 = (int32x4_t)vaddw_high_u16((uint32x4_t)v19, *v16);
          v18 = (int32x4_t)vaddw_u16((uint32x4_t)v18, *(uint16x4_t *)v16->i8);
          v16 += 2;
          v15 -= 16;
        }
        while (v15);
        v13 = vaddvq_s32(vaddq_s32(vaddq_s32(v18, v14), vaddq_s32(v19, v17)));
        v12 = v7 & 0x7FFFFFF0;
        if (v12 == v7)
          goto LABEL_6;
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
      v21 = v7 - v12;
      v22 = (unsigned __int16 *)v9 + v12;
      do
      {
        v23 = *v22++;
        v13 += v23;
        --v21;
      }
      while (v21);
LABEL_6:
      *(_BYTE *)a6 = (v13 * (0x10000 / ((int)v7 * a2))) >> 16;
      a6 = (unsigned __int16 *)((char *)a6 + 1);
      ++v8;
      v10 = (uint16x8_t *)((char *)v10 + v11);
      v9 = (uint16x8_t *)((char *)v9 + v11);
    }
    while (v8 != (_DWORD)this);
  }
  return this;
}

uint64_t libyuv::ScaleAddCols0_C(uint64_t this, int a2, int a3, int a4, uint64_t a5, int8x16_t *a6, unsigned __int8 *a7)
{
  uint64_t v7;
  unsigned int v8;
  uint16x8_t *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned __int16 *v13;
  int v14;
  int32x4_t v15;
  uint64_t v16;
  int8x16_t *v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint64_t v20;
  uint16x8_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint16x8_t v24;
  int8x16x2_t v25;
  int8x16x4_t v26;

  if ((int)this >= 1)
  {
    v7 = (uint64_t)a3 >> 16;
    v8 = 0x10000 / a2;
    if (this < 8
      || (v9 = (uint16x8_t *)(a5 + 2 * (a3 >> 16)),
          a5 + 2 * (v7 + (unint64_t)this) > (unint64_t)a6)
      && v9 < (uint16x8_t *)&a6->i8[this])
    {
      v10 = 0;
      v11 = (unsigned __int16 *)a6;
      goto LABEL_6;
    }
    v15 = vdupq_n_s32(v8);
    if (this >= 0x10)
    {
      v10 = this & 0xFFFFFFF0;
      v16 = v10;
      v17 = a6;
      do
      {
        v19 = *v9;
        v18 = v9[1];
        v9 += 2;
        v26.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v15, (int32x4_t)vmovl_high_u16(v19)), 0x10uLL);
        v26.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v15, (int32x4_t)vmovl_high_u16(v18)), 0x10uLL);
        v26.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v15, (int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8)), 0x10uLL);
        v26.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v15, (int32x4_t)vmovl_u16(*(uint16x4_t *)v19.i8)), 0x10uLL);
        *v17++ = vqtbl4q_s8(v26, (int8x16_t)xmmword_208F05040);
        v16 -= 16;
      }
      while (v16);
      if (v10 == this)
        return this;
      if ((this & 8) == 0)
      {
        v11 = (unsigned __int16 *)((char *)a6->u16 + v10);
LABEL_6:
        v12 = this - v10;
        v13 = (unsigned __int16 *)(a5 + 2 * v10 + 2 * v7);
        do
        {
          v14 = *v13++;
          *(_BYTE *)v11 = (v8 * v14) >> 16;
          v11 = (unsigned __int16 *)((char *)v11 + 1);
          --v12;
        }
        while (v12);
        return this;
      }
    }
    else
    {
      v10 = 0;
    }
    v20 = v10;
    v10 = this & 0xFFFFFFF8;
    v11 = (unsigned __int16 *)((char *)a6->u16 + v10);
    v21 = (uint16x8_t *)(a5 + 2 * v20 + 2 * v7);
    v22 = (uint64_t *)((char *)a6->i64 + v20);
    v23 = v20 - v10;
    do
    {
      v24 = *v21++;
      v25.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v15, (int32x4_t)vmovl_high_u16(v24)), 0x10uLL);
      v25.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vmulq_s32(v15, (int32x4_t)vmovl_u16(*(uint16x4_t *)v24.i8)), 0x10uLL);
      *v22++ = vqtbl2q_s8(v25, (int8x16_t)xmmword_208F05050).u64[0];
      v23 += 8;
    }
    while (v23);
    if (v10 != this)
      goto LABEL_6;
  }
  return this;
}

const char *ScaleRowDown2_Any_NEON(const char *result, uint64_t a2, int8x16_t *a3, int a4)
{
  unint64_t v4;
  unsigned int v6;
  int8x16_t *v7;
  unsigned int v13;
  const char *v14;
  __int8 *v15;
  int8x16x2_t v16;

  v4 = a4 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    _X8 = result;
    v6 = a4 & 0xFFFFFFF0;
    v7 = a3;
    do
    {
      v16 = vld2q_s8(_X8);
      _X8 += 32;
      v6 -= 16;
      __asm { PRFM            #0, [X8,#0x1C0] }
      *v7++ = v16.val[1];
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v13 = a4 & 0xF;
  v14 = &result[2 * (int)v4];
  v15 = &a3->i8[v4];
  if (v13 < 2)
  {
    if ((a4 & 1) == 0)
      return result;
LABEL_27:
    *v15 = v14[1];
    return result;
  }
  *v15 = v14[1];
  v15[1] = v14[3];
  if (v13 < 4)
  {
    v15 += 2;
    v14 += 4;
    if ((a4 & 1) != 0)
      goto LABEL_27;
  }
  else
  {
    v15[2] = v14[5];
    v15[3] = v14[7];
    if (v13 < 6)
    {
      v15 += 4;
      v14 += 8;
      if ((a4 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v15[4] = v14[9];
      v15[5] = v14[11];
      if (v13 < 8)
      {
        v15 += 6;
        v14 += 12;
        if ((a4 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        v15[6] = v14[13];
        v15[7] = v14[15];
        if (v13 < 0xA)
        {
          v15 += 8;
          v14 += 16;
          if ((a4 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          v15[8] = v14[17];
          v15[9] = v14[19];
          if (v13 < 0xC)
          {
            v15 += 10;
            v14 += 20;
            if ((a4 & 1) != 0)
              goto LABEL_27;
          }
          else
          {
            v15[10] = v14[21];
            v15[11] = v14[23];
            if (v13 < 0xE)
            {
              v15 += 12;
              v14 += 24;
              if ((a4 & 1) != 0)
                goto LABEL_27;
            }
            else
            {
              v15[12] = v14[25];
              v15[13] = v14[27];
              v15 += 14;
              v14 += 28;
              if ((a4 & 1) != 0)
                goto LABEL_27;
            }
          }
        }
      }
    }
  }
  return result;
}

const char *ScaleRowDown2Linear_Any_NEON(const char *result, uint64_t a2, uint8x16_t *a3, int a4)
{
  unint64_t v4;
  unsigned int v6;
  uint8x16_t *v7;
  unsigned int v13;
  unsigned __int8 *v14;
  __int8 *v15;
  int8x16x2_t v16;

  v4 = a4 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    _X9 = result;
    v6 = a4 & 0xFFFFFFF0;
    v7 = a3;
    do
    {
      v16 = vld2q_s8(_X9);
      _X9 += 32;
      v6 -= 16;
      __asm { PRFM            #0, [X9,#0x1C0] }
      *v7++ = vrhaddq_u8((uint8x16_t)v16.val[0], (uint8x16_t)v16.val[1]);
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v13 = a4 & 0xF;
  v14 = (unsigned __int8 *)&result[2 * (int)v4];
  v15 = &a3->i8[v4];
  if (v13 < 2)
  {
    if ((a4 & 1) == 0)
      return result;
LABEL_27:
    *v15 = (*v14 + v14[1] + 1) >> 1;
    return result;
  }
  *v15 = (*v14 + v14[1] + 1) >> 1;
  v15[1] = (v14[2] + v14[3] + 1) >> 1;
  if (v13 < 4)
  {
    v15 += 2;
    v14 += 4;
    if ((a4 & 1) != 0)
      goto LABEL_27;
  }
  else
  {
    v15[2] = (v14[4] + v14[5] + 1) >> 1;
    v15[3] = (v14[6] + v14[7] + 1) >> 1;
    if (v13 < 6)
    {
      v15 += 4;
      v14 += 8;
      if ((a4 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v15[4] = (v14[8] + v14[9] + 1) >> 1;
      v15[5] = (v14[10] + v14[11] + 1) >> 1;
      if (v13 < 8)
      {
        v15 += 6;
        v14 += 12;
        if ((a4 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        v15[6] = (v14[12] + v14[13] + 1) >> 1;
        v15[7] = (v14[14] + v14[15] + 1) >> 1;
        if (v13 < 0xA)
        {
          v15 += 8;
          v14 += 16;
          if ((a4 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          v15[8] = (v14[16] + v14[17] + 1) >> 1;
          v15[9] = (v14[18] + v14[19] + 1) >> 1;
          if (v13 < 0xC)
          {
            v15 += 10;
            v14 += 20;
            if ((a4 & 1) != 0)
              goto LABEL_27;
          }
          else
          {
            v15[10] = (v14[20] + v14[21] + 1) >> 1;
            v15[11] = (v14[22] + v14[23] + 1) >> 1;
            if (v13 < 0xE)
            {
              v15 += 12;
              v14 += 24;
              if ((a4 & 1) != 0)
                goto LABEL_27;
            }
            else
            {
              v15[12] = (v14[24] + v14[25] + 1) >> 1;
              v15[13] = (v14[26] + v14[27] + 1) >> 1;
              v15 += 14;
              v14 += 28;
              if ((a4 & 1) != 0)
                goto LABEL_27;
            }
          }
        }
      }
    }
  }
  return result;
}

uint8x16_t *ScaleRowDown2Box_Any_NEON(uint8x16_t *result, uint64_t a2, int8x16_t *a3, int a4)
{
  unint64_t v4;
  int8x16_t *v5;
  unsigned int v6;
  uint8x16_t v9;
  uint8x16_t v10;
  uint8x16_t v11;
  uint8x16_t v12;
  unsigned int v19;
  unsigned __int8 *v20;
  __int8 *v21;
  unsigned __int8 *v22;

  v4 = a4 & 0xFFFFFFFFFFFFFFF0;
  if ((int)v4 >= 1)
  {
    v5 = a3;
    v6 = a4 & 0xFFFFFFF0;
    _X12 = result;
    _X10 = (uint8x16_t *)((char *)result + a2);
    do
    {
      v9 = *_X12;
      v10 = _X12[1];
      _X12 += 2;
      v11 = *_X10;
      v12 = _X10[1];
      _X10 += 2;
      v6 -= 16;
      __asm
      {
        PRFM            #0, [X12,#0x1C0]
        PRFM            #0, [X10,#0x1C0]
      }
      *v5++ = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8(v9), v11), 2uLL), (int16x8_t)vpadalq_u8(vpaddlq_u8(v10), v12), 2uLL);
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v19 = a4 & 0xF;
  v20 = (unsigned __int8 *)result + 2 * (int)v4;
  v21 = &a3->i8[v4];
  v22 = &v20[a2];
  if (v19 < 2)
  {
    if ((a4 & 1) == 0)
      return result;
LABEL_27:
    *v21 = (*v20 + v20[1] + *v22 + v22[1] + 2) >> 2;
    return result;
  }
  *v21 = (*v20 + v20[1] + *v22 + v22[1] + 2) >> 2;
  v21[1] = (v20[2] + v20[3] + v22[2] + v22[3] + 2) >> 2;
  if (v19 < 4)
  {
    v21 += 2;
    v20 += 4;
    v22 += 4;
    if ((a4 & 1) != 0)
      goto LABEL_27;
  }
  else
  {
    v21[2] = (v20[4] + v20[5] + v22[4] + v22[5] + 2) >> 2;
    v21[3] = (v20[6] + v20[7] + v22[6] + v22[7] + 2) >> 2;
    if (v19 < 6)
    {
      v21 += 4;
      v20 += 8;
      v22 += 8;
      if ((a4 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v21[4] = (v20[8] + v20[9] + v22[8] + v22[9] + 2) >> 2;
      v21[5] = (v20[10] + v20[11] + v22[10] + v22[11] + 2) >> 2;
      if (v19 < 8)
      {
        v21 += 6;
        v20 += 12;
        v22 += 12;
        if ((a4 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        v21[6] = (v20[12] + v20[13] + v22[12] + v22[13] + 2) >> 2;
        v21[7] = (v20[14] + v20[15] + v22[14] + v22[15] + 2) >> 2;
        if (v19 < 0xA)
        {
          v21 += 8;
          v20 += 16;
          v22 += 16;
          if ((a4 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          v21[8] = (v20[16] + v20[17] + v22[16] + v22[17] + 2) >> 2;
          v21[9] = (v20[18] + v20[19] + v22[18] + v22[19] + 2) >> 2;
          if (v19 < 0xC)
          {
            v21 += 10;
            v20 += 20;
            v22 += 20;
            if ((a4 & 1) != 0)
              goto LABEL_27;
          }
          else
          {
            v21[10] = (v20[20] + v20[21] + v22[20] + v22[21] + 2) >> 2;
            v21[11] = (v20[22] + v20[23] + v22[22] + v22[23] + 2) >> 2;
            if (v19 < 0xE)
            {
              v21 += 12;
              v20 += 24;
              v22 += 24;
              if ((a4 & 1) != 0)
                goto LABEL_27;
            }
            else
            {
              v21[12] = (v20[24] + v20[25] + v22[24] + v22[25] + 2) >> 2;
              v21[13] = (v20[26] + v20[27] + v22[26] + v22[27] + 2) >> 2;
              v21 += 14;
              v20 += 28;
              v22 += 28;
              if ((a4 & 1) != 0)
                goto LABEL_27;
            }
          }
        }
      }
    }
  }
  return result;
}

const char *ScaleRowDown4_Any_NEON(const char *result, uint64_t a2, int8x8_t *a3, int a4)
{
  unint64_t v4;
  int8x8_t *v5;
  unsigned int v7;
  unsigned int v13;
  const char *v14;
  _BYTE *v15;
  int8x8x4_t v16;

  v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  if ((int)v4 >= 1)
  {
    v5 = a3;
    _X10 = result;
    v7 = a4 & 0xFFFFFFF8;
    do
    {
      v16 = vld4_s8(_X10);
      _X10 += 32;
      v7 -= 8;
      __asm { PRFM            #0, [X10,#0x1C0] }
      *v5++ = v16.val[2];
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v13 = a4 & 7;
  v14 = &result[4 * (int)v4];
  v15 = (char *)a3 + v4;
  if (v13 < 2)
  {
    if ((a4 & 1) == 0)
      return result;
LABEL_15:
    *v15 = v14[2];
    return result;
  }
  *v15 = v14[2];
  v15[1] = v14[6];
  if (v13 < 4)
  {
    v15 += 2;
    v14 += 8;
    if ((a4 & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    v15[2] = v14[10];
    v15[3] = v14[14];
    if (v13 < 6)
    {
      v15 += 4;
      v14 += 16;
      if ((a4 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15[4] = v14[18];
      v15[5] = v14[22];
      v15 += 6;
      v14 += 24;
      if ((a4 & 1) != 0)
        goto LABEL_15;
    }
  }
  return result;
}

float ScaleRowDown4Box_Any_NEON(uint8x16_t *a1, uint64_t a2, _DWORD *a3, int a4)
{
  unint64_t v4;
  _DWORD *v8;
  unsigned int v9;
  uint8x16_t v11;
  uint8x16_t v12;
  uint8x16_t v13;
  uint8x16_t v14;
  int16x8_t v22;

  v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  if ((int)v4 >= 1)
  {
    _X9 = (uint8x16_t *)((char *)a1 + a2);
    _X11 = (uint8x16_t *)((char *)a1 + 2 * a2);
    _X10 = (uint8x16_t *)((char *)a1 + 2 * a2 + a2);
    v8 = a3;
    v9 = a4 & 0xFFFFFFF8;
    _X14 = a1;
    do
    {
      v11 = *_X14++;
      v12 = *_X9++;
      v13 = *_X11++;
      v14 = *_X10++;
      v9 -= 4;
      __asm
      {
        PRFM            #0, [X14,#0x1C0]
        PRFM            #0, [X9,#0x1C0]
        PRFM            #0, [X11,#0x1C0]
      }
      v22 = (int16x8_t)vpadalq_u8(vpadalq_u8(vpadalq_u8(vpaddlq_u8(v11), v12), v13), v14);
      __asm { PRFM            #0, [X10,#0x1C0] }
      *v8++ = vrshrn_n_s16(vpaddq_s16(v22, v22), 4uLL).u32[0];
    }
    while (!(_NF ^ _VF | _ZF));
  }
  return ScaleRowDown4Box_C((unsigned __int8 *)a1 + 4 * (int)v4, a2, (_BYTE *)a3 + v4, a4 & 7);
}

const char *ScaleRowDown34_Any_NEON(const char *result, uint64_t a2, char *a3, unsigned int a4)
{
  signed int v4;
  unsigned int v5;
  unsigned int v7;
  char *v8;
  char *v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  char *v24;
  const char *v25;
  char *v26;
  char *v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  int8x8x4_t v31;
  int8x8x4_t v32;
  int8x16x4_t v33;
  int8x16x4_t v34;

  v4 = 24 * (a4 / 0x18);
  v5 = a4 % 0x18;
  if (v4 >= 1)
  {
    _X9 = result;
    v7 = 24 * (a4 / 0x18);
    v8 = a3;
    do
    {
      v31 = vld4_s8(_X9);
      _X9 += 32;
      v7 -= 24;
      v31.val[2] = v31.val[3];
      __asm { PRFM            #0, [X9,#0x1C0] }
      vst3_s8(v8, *(int8x8x3_t *)v31.val[0].i8);
      v8 += 24;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  if (v5)
  {
    v13 = &a3[v4];
    v14 = (int)(96 * (a4 / 0x18)) / 3;
    v15 = (char *)&result[v14];
    v16 = ~v4 + a4;
    if (v16 < 0x15)
    {
      v17 = 0;
      goto LABEL_24;
    }
    v18 = v16 / 3uLL;
    if (v13 < &result[4 * v18 + 4 + v14] && v15 < &a3[3 * v18 + (int)a4 - v5 + 3])
    {
      v17 = 0;
      goto LABEL_24;
    }
    v20 = (v18 + 1);
    if (v16 >= 0x5D)
    {
      v21 = v20 & 0x7FFFFFE0;
      v22 = &result[v14 + 64];
      v23 = v21;
      v24 = v13;
      do
      {
        v25 = v22 - 64;
        v33 = vld4q_s8(v25);
        v34 = vld4q_s8(v22);
        v33.val[2] = v33.val[3];
        v34.val[2] = v34.val[3];
        v26 = v24 + 96;
        vst3q_s8(v24, *(int8x16x3_t *)v33.val[0].i8);
        v27 = v24 + 48;
        vst3q_s8(v27, *(int8x16x3_t *)v34.val[0].i8);
        v22 += 128;
        v24 = v26;
        v23 -= 32;
      }
      while (v23);
      if (v21 == v20)
        return result;
      if ((v20 & 0x18) == 0)
      {
        v13 += 3 * v21;
        v15 += 4 * v21;
        v17 = 3 * v21;
        do
        {
LABEL_24:
          *v13 = *v15;
          v13[1] = v15[1];
          v13[2] = v15[3];
          v13 += 3;
          v15 += 4;
          v17 += 3;
        }
        while (v17 < v5);
        return result;
      }
    }
    else
    {
      v21 = 0;
    }
    v17 = 3 * (v20 & 0x7FFFFFF8);
    v15 += 4 * (v20 & 0x7FFFFFF8);
    v13 += 3 * (v20 & 0x7FFFFFF8);
    v28 = &a3[3 * v21 + (int)a4 - (int)v5];
    v29 = &result[4 * v21 + v14];
    v30 = v21 - (v20 & 0x7FFFFFF8);
    do
    {
      v32 = vld4_s8(v29);
      v29 += 32;
      v32.val[2] = v32.val[3];
      vst3_s8(v28, *(int8x8x3_t *)v32.val[0].i8);
      v28 += 24;
      v30 += 8;
    }
    while (v30);
    if ((v20 & 0x7FFFFFF8) != v20)
      goto LABEL_24;
  }
  return result;
}

char *ScaleRowDown34_0_Box_Any_NEON(char *result, uint64_t a2, char *a3, unsigned int a4)
{
  int8x16_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  signed int v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  char *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  int32x4_t v36;
  uint16x8_t v37;
  int32x4_t v38;
  const char *v39;
  uint8x8_t v40;
  uint16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int32x4_t v45;
  uint32x4_t v46;
  uint32x4_t v47;
  int16x8_t v48;
  int16x8_t v49;
  uint8x8_t v50;
  uint16x8_t v51;
  uint16x8_t v52;
  int32x4_t v53;
  int32x4_t v54;
  uint8x8_t v55;
  uint16x8_t v56;
  int16x8_t v57;
  int16x8_t v58;
  int16x8_t v59;
  int32x4_t v60;
  uint32x4_t v61;
  int16x8_t v62;
  int16x8_t v63;
  uint8x8_t v64;
  uint16x8_t v65;
  int32x4_t v66;
  uint32x4_t v67;
  uint32x4_t v68;
  int32x4_t v69;
  uint64_t v70;
  char *v71;
  const char *v72;
  const char *v73;
  uint16x8_t v74;
  uint16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  uint16x8_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int16x8_t v84;
  uint32x4_t v85;
  int32x4_t v86;
  uint16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int32x4_t v91;
  uint8x8_t v92;
  uint8x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int16x8_t v103;
  int32x4_t v104;
  int16x8_t v105;
  int16x8_t v106;
  int32x4_t v107;
  int16x8_t v108;
  int16x8_t v109;
  int32x4_t v110;
  int32x4_t v111;
  int32x4_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  uint16x8_t v118;
  uint16x8_t v119;
  uint16x8_t v120;
  uint32x4_t v121;
  int v122;
  unsigned int v123;
  int v124;
  unsigned int v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  int16x8_t v131;
  int8x16x2_t v132;
  int8x16x2_t v133;
  int8x16x3_t v134;
  int8x8x4_t v135;
  int8x8x4_t v136;
  int8x16x4_t v137;
  int8x16x4_t v138;
  int8x16x4_t v139;

  v8 = 24 * (a4 / 0x18);
  v9 = a4 % 0x18;
  if (v8 >= 1)
  {
    v10 = 24 * (a4 / 0x18);
    v11 = a3;
    _X13 = result;
    _X11 = &result[a2];
    do
    {
      v135 = vld4_s8(_X13);
      _X13 += 32;
      v136 = vld4_s8(_X11);
      _X11 += 32;
      v10 -= 24;
      v4 = (int8x16_t)vmlal_u8(vmovl_u8((uint8x8_t)v136.val[1]), (uint8x8_t)v135.val[1], (uint8x8_t)0x303030303030303);
      v5 = (int32x4_t)vmlal_u8(vmovl_u8((uint8x8_t)v136.val[2]), (uint8x8_t)v135.val[2], (uint8x8_t)0x303030303030303);
      __asm { PRFM            #0, [X13,#0x1C0] }
      v135.val[1] = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v4, 2uLL);
      v135.val[2] = (int8x8_t)vqrshrn_n_u16((uint16x8_t)v5, 2uLL);
      __asm { PRFM            #0, [X11,#0x1C0] }
      v135.val[0] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v135.val[1]), vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v136.val[0]), (uint8x8_t)v135.val[0], (uint8x8_t)0x303030303030303), 2uLL), (uint8x8_t)0x303030303030303), 2uLL);
      v135.val[1] = (int8x8_t)vrhadd_u8((uint8x8_t)v135.val[1], (uint8x8_t)v135.val[2]);
      v135.val[2] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v135.val[2]), vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v136.val[3]), (uint8x8_t)v135.val[3], (uint8x8_t)0x303030303030303), 2uLL), (uint8x8_t)0x303030303030303), 2uLL);
      vst3_s8(v11, *(int8x8x3_t *)v135.val[0].i8);
      v11 += 24;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  if (v9)
  {
    v19 = &a3[v8];
    v20 = (int)(96 * (a4 / 0x18)) / 3;
    v21 = (unsigned __int8 *)&result[v20];
    v22 = (unsigned __int8 *)&result[v20 + a2];
    v23 = ~v8 + a4;
    if (v23 < 0x15)
    {
      v24 = 0;
      goto LABEL_31;
    }
    v24 = 0;
    v25 = v23 / 3uLL;
    v26 = (unint64_t)&a3[3 * v25 + (int)a4 - v9 + 3];
    v27 = (unint64_t)&result[4 * v25 + 4 + v20];
    v29 = (unint64_t)v19 < v27 && (unint64_t)v21 < v26;
    v30 = (unint64_t)v22 >= v26 || (unint64_t)v19 >= v27 + a2;
    if (!v30 || v29)
      goto LABEL_31;
    v31 = (v25 + 1);
    if (v23 >= 0x2D)
    {
      v32 = v31 & 0x7FFFFFF0;
      v69.i64[0] = 0x200000002;
      v69.i64[1] = 0x200000002;
      v70 = v32;
      v71 = v19;
      v72 = &result[v20];
      do
      {
        v73 = &v72[a2];
        v138 = vld4q_s8(v72);
        v72 += 64;
        v139 = vld4q_s8(v73);
        v74 = vmovl_u8(*(uint8x8_t *)v138.val[0].i8);
        v75 = vmovl_high_u8((uint8x16_t)v138.val[0]);
        v76 = (int16x8_t)vqtbl1q_s8(v138.val[1], (int8x16_t)xmmword_208F04F50);
        v77 = (int16x8_t)vqtbl1q_s8(v138.val[1], (int8x16_t)xmmword_208F04F40);
        v78 = (int16x8_t)vqtbl1q_s8(v138.val[1], (int8x16_t)xmmword_208F04F30);
        v79 = (int16x8_t)vqtbl1q_s8(v138.val[1], (int8x16_t)xmmword_208F04F20);
        v80 = vuzp1q_s16(v78, v79);
        v81.i64[0] = 0x3000300030003;
        v81.i64[1] = 0x3000300030003;
        v82 = (int32x4_t)vmlal_high_u16((uint32x4_t)v79, v75, v81);
        v83 = (int32x4_t)vmlal_u16((uint32x4_t)v78, *(uint16x4_t *)v75.i8, (uint16x4_t)0x3000300030003);
        v84 = vuzp1q_s16(v76, v77);
        v85 = (uint32x4_t)v76;
        v86 = (int32x4_t)vmlal_high_u16((uint32x4_t)v77, v74, v81);
        v87.i64[0] = 0x3000300030003;
        v87.i64[1] = 0x3000300030003;
        v131 = (int16x8_t)vqtbl1q_s8(v138.val[2], (int8x16_t)xmmword_208F04F40);
        v88 = (int16x8_t)vqtbl1q_s8(v138.val[2], (int8x16_t)xmmword_208F04F50);
        v89 = (int16x8_t)vqtbl1q_s8(v138.val[2], (int8x16_t)xmmword_208F04F20);
        v90 = (int16x8_t)vqtbl1q_s8(v138.val[2], (int8x16_t)xmmword_208F04F30);
        v91 = (int32x4_t)vmlal_u16(v85, *(uint16x4_t *)v74.i8, (uint16x4_t)0x3000300030003);
        v92 = vrhadd_u8((uint8x8_t)vmovn_s16(v80), (uint8x8_t)vmovn_s16(vuzp1q_s16(v90, v89)));
        v93 = vrhadd_u8((uint8x8_t)vmovn_s16(v84), (uint8x8_t)vmovn_s16(vuzp1q_s16(v88, v131)));
        v94 = vmovl_u8(*(uint8x8_t *)v139.val[0].i8);
        v95 = vmovl_high_u8((uint8x16_t)v139.val[0]);
        v96 = (int16x8_t)vqtbl1q_s8(v139.val[1], (int8x16_t)xmmword_208F04F50);
        v97 = (int16x8_t)vqtbl1q_s8(v139.val[1], (int8x16_t)xmmword_208F04F40);
        v98 = (int16x8_t)vqtbl1q_s8(v139.val[1], (int8x16_t)xmmword_208F04F30);
        v99 = (int16x8_t)vqtbl1q_s8(v139.val[1], (int8x16_t)xmmword_208F04F20);
        v100 = vuzp1q_s16(v98, v99);
        v101 = (int32x4_t)vmlal_high_u16((uint32x4_t)v99, v95, v87);
        v102 = (int32x4_t)vmlal_u16((uint32x4_t)v98, *(uint16x4_t *)v95.i8, (uint16x4_t)0x3000300030003);
        v103 = vuzp1q_s16(v96, v97);
        v104 = (int32x4_t)vmlal_u16((uint32x4_t)v96, *(uint16x4_t *)v94.i8, (uint16x4_t)0x3000300030003);
        v105 = (int16x8_t)vqtbl1q_s8(v139.val[2], (int8x16_t)xmmword_208F04F20);
        v106 = (int16x8_t)vqtbl1q_s8(v139.val[2], (int8x16_t)xmmword_208F04F30);
        v107 = (int32x4_t)vmlal_high_u16((uint32x4_t)v97, v94, v87);
        v108 = (int16x8_t)vqtbl1q_s8(v139.val[2], (int8x16_t)xmmword_208F04F40);
        v109 = (int16x8_t)vqtbl1q_s8(v139.val[2], (int8x16_t)xmmword_208F04F50);
        v87.i64[0] = 0x300000003;
        v87.i64[1] = 0x300000003;
        v110 = (int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v82, v69), 2uLL), (int32x4_t)v87), (uint32x4_t)vaddq_s32(v101, v69), 2uLL);
        v111 = (int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v91, v69), 2uLL), (int32x4_t)v87), (uint32x4_t)vaddq_s32(v104, v69), 2uLL);
        v112 = (int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v86, v69), 2uLL), (int32x4_t)v87), (uint32x4_t)vaddq_s32(v107, v69), 2uLL);
        v137.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v110, v69), 2uLL);
        v137.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v83, v69), 2uLL), (int32x4_t)v87), (uint32x4_t)vaddq_s32(v102, v69), 2uLL), v69), 2uLL);
        v113 = vmovl_u8(v92);
        v114 = vmovl_u8(v93);
        v115 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v103), (uint8x8_t)vmovn_s16(vuzp1q_s16(v109, v108))));
        v116 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v100), (uint8x8_t)vmovn_s16(vuzp1q_s16(v106, v105))));
        v137.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v112, v69), 2uLL);
        v137.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v111, v69), 2uLL);
        v134.val[0] = vqtbl4q_s8(v137, (int8x16_t)xmmword_208F05040);
        v137.val[1].i64[0] = 0x3000300030003;
        v137.val[1].i64[1] = 0x3000300030003;
        v137.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16(v116), v113, (uint16x8_t)v137.val[1]), v69), 2uLL);
        v137.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v113.i8, (uint16x4_t)0x3000300030003), *(uint16x4_t *)v116.i8), v69), 2uLL);
        v137.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16(v115), v114, (uint16x8_t)v137.val[1]), v69), 2uLL);
        v137.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v114.i8, (uint16x4_t)0x3000300030003), *(uint16x4_t *)v115.i8), v69), 2uLL);
        v134.val[1] = vqtbl4q_s8(v137, (int8x16_t)xmmword_208F05040);
        v117 = vmovl_u8(*(uint8x8_t *)v138.val[3].i8);
        v118 = vmovl_high_u8((uint8x16_t)v138.val[3]);
        v119 = vmovl_u8(*(uint8x8_t *)v139.val[3].i8);
        v120 = vmovl_high_u8((uint8x16_t)v139.val[3]);
        v138.val[0].i64[0] = 0x3000300030003;
        v138.val[0].i64[1] = 0x3000300030003;
        v6 = (int32x4_t)vmlal_high_u16((uint32x4_t)v89, v118, (uint16x8_t)v138.val[0]);
        v7 = (int32x4_t)vmlal_u16((uint32x4_t)v90, *(uint16x4_t *)v118.i8, (uint16x4_t)0x3000300030003);
        v138.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v6, v69), 2uLL), (int32x4_t)v87), (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v105, v120, (uint16x8_t)v138.val[0]), v69), 2uLL), v69), 2uLL);
        v5 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v7, v69), 2uLL), (int32x4_t)v87), (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v106, *(uint16x4_t *)v120.i8, (uint16x4_t)0x3000300030003), v69), 2uLL), v69), 2uLL);
        v4 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v131, v117, (uint16x8_t)v138.val[0]), v69), 2uLL), (int32x4_t)v87), (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v108, v119, (uint16x8_t)v138.val[0]), v69), 2uLL), v69), 2uLL);
        v121 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v88, *(uint16x4_t *)v117.i8, (uint16x4_t)0x3000300030003), v69), 2uLL), (int32x4_t)v87), (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v109, *(uint16x4_t *)v119.i8, (uint16x4_t)0x3000300030003), v69), 2uLL),
                               v69),
                 2uLL);
        v134.val[2] = vqtbl4q_s8(*(int8x16x4_t *)(&v4 - 1), (int8x16_t)xmmword_208F05040);
        vst3q_s8(v71, v134);
        v71 += 48;
        v70 -= 16;
      }
      while (v70);
      if (v32 == v31)
        return result;
      if ((v31 & 8) == 0)
      {
        v24 = 3 * v32;
        v22 += 4 * v32;
        v21 += 4 * v32;
        v19 += 3 * v32;
        do
        {
LABEL_31:
          v122 = v21[1];
          v123 = (v122 + 3 * *v21 + 2) >> 2;
          v124 = v21[2];
          v125 = (v122 + v124 + 1) >> 1;
          v126 = (v124 + 3 * v21[3] + 2) >> 2;
          v127 = v22[1];
          v128 = v127 + 3 * *v22 + 2;
          v129 = v22[2];
          v130 = v127 + v129 + 1;
          result = (char *)(v129 + 3 * v22[3] + 2);
          *v19 = (3 * v123 + (v128 >> 2) + 2) >> 2;
          v19[1] = (3 * v125 + (v130 >> 1) + 2) >> 2;
          v19[2] = (3 * v126 + (result >> 2) + 2) >> 2;
          v19 += 3;
          v21 += 4;
          v22 += 4;
          v24 += 3;
        }
        while (v24 < v9);
        return result;
      }
    }
    else
    {
      v32 = 0;
    }
    v19 += 3 * (v31 & 0x7FFFFFF8);
    v33 = 4 * (v31 & 0x7FFFFFF8);
    v21 += v33;
    v22 += v33;
    v24 = 3 * (v31 & 0x7FFFFFF8);
    v34 = &result[4 * v32 + v20];
    result = &a3[3 * v32 + (int)a4 - (int)v9];
    v35 = v32 - (v31 & 0x7FFFFFF8);
    v36.i64[0] = 0x300000003;
    v36.i64[1] = 0x300000003;
    v37.i64[0] = 0x3000300030003;
    v37.i64[1] = 0x3000300030003;
    v38.i64[0] = 0x200000002;
    v38.i64[1] = 0x200000002;
    do
    {
      v39 = &v34[a2];
      *(int8x8x4_t *)((char *)&v4 - 8) = vld4_s8(v34);
      v34 += 32;
      v41 = vmovl_u8(v40);
      *(int8x8x4_t *)((char *)&v6 - 8) = vld4_s8(v39);
      v42 = (int16x8_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_208F04F50);
      v43 = (int16x8_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_208F04F40);
      v44 = vuzp1q_s16(v42, v43);
      v45 = (int32x4_t)vmlal_high_u16((uint32x4_t)v43, v41, v37);
      v46 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v42, *(uint16x4_t *)v41.i8, (uint16x4_t)0x3000300030003), v38);
      v47 = (uint32x4_t)vaddq_s32(v45, v38);
      v48 = (int16x8_t)vqtbl1q_s8((int8x16_t)v5, (int8x16_t)xmmword_208F04F40);
      v49 = (int16x8_t)vqtbl1q_s8((int8x16_t)v5, (int8x16_t)xmmword_208F04F50);
      v51 = vmovl_u8(v50);
      v52 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v44), (uint8x8_t)vmovn_s16(vuzp1q_s16(v49, v48))));
      v5 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v48, v51, v37), v38), 2uLL);
      v53 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v49, *(uint16x4_t *)v51.i8, (uint16x4_t)0x3000300030003), v38), 2uLL);
      v54 = (int32x4_t)vshrq_n_u32(v47, 2uLL);
      v56 = vmovl_u8(v55);
      v57 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, (int8x16_t)xmmword_208F04F50);
      v58 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, (int8x16_t)xmmword_208F04F40);
      v59 = vuzp1q_s16(v57, v58);
      v60 = (int32x4_t)vmlal_high_u16((uint32x4_t)v58, v56, v37);
      v61 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v57, *(uint16x4_t *)v56.i8, (uint16x4_t)0x3000300030003), v38);
      v62 = (int16x8_t)vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_208F04F40);
      v63 = (int16x8_t)vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_208F04F50);
      *(uint8x8_t *)v59.i8 = vrhadd_u8((uint8x8_t)vmovn_s16(v59), (uint8x8_t)vmovn_s16(vuzp1q_s16(v63, v62)));
      v65 = vmovl_u8(v64);
      v66 = (int32x4_t)vmlal_high_u16((uint32x4_t)v62, v65, v37);
      v6 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v59.i8);
      v67 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v63, *(uint16x4_t *)v65.i8, (uint16x4_t)0x3000300030003), v38);
      v7 = vaddq_s32(v66, v38);
      v132.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32(v54, v36), (uint32x4_t)vaddq_s32(v60, v38), 2uLL), v38), 2uLL);
      v132.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v46, 2uLL), v36), v61, 2uLL), v38), 2uLL);
      v132.val[0].i64[0] = vqtbl2q_s8(v132, (int8x16_t)xmmword_208F05050).u64[0];
      v133.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v6), v52, v37), v38), 2uLL);
      v133.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v52.i8, (uint16x4_t)0x3000300030003), *(uint16x4_t *)v6.i8), v38), 2uLL);
      v132.val[1].i64[0] = vqtbl2q_s8(v133, (int8x16_t)xmmword_208F05050).u64[0];
      v4 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32(v5, v36), (uint32x4_t)v7, 2uLL), v38), 2uLL);
      v68 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32(v53, v36), v67, 2uLL), v38), 2uLL);
      v60.i64[0] = vqtbl2q_s8(*(int8x16x2_t *)(&v4 - 1), (int8x16_t)xmmword_208F05050).u64[0];
      vst3_s8(result, *(int8x8x3_t *)(&v60 - 1));
      result += 24;
      v35 += 8;
    }
    while (v35);
    if ((v31 & 0x7FFFFFF8) != v31)
      goto LABEL_31;
  }
  return result;
}

char *ScaleRowDown34_1_Box_Any_NEON(char *result, uint64_t a2, char *a3, unsigned int a4)
{
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  signed int v8;
  unsigned int v9;
  unsigned int v10;
  char *v11;
  char *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint16x8_t v36;
  int32x4_t v37;
  const char *v38;
  uint8x8_t v39;
  uint16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int16x8_t v43;
  int32x4_t v44;
  uint32x4_t v45;
  uint32x4_t v46;
  int16x8_t v47;
  int16x8_t v48;
  uint16x8_t v49;
  uint8x8_t v50;
  uint16x8_t v51;
  uint32x4_t v52;
  uint8x8_t v53;
  uint16x8_t v54;
  int16x8_t v55;
  int16x8_t v56;
  int16x8_t v57;
  int32x4_t v58;
  uint32x4_t v59;
  uint32x4_t v60;
  int16x8_t v61;
  int16x8_t v62;
  uint16x8_t v63;
  uint8x8_t v64;
  uint16x8_t v65;
  uint32x4_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  const char *v70;
  int32x4_t v71;
  const char *v72;
  uint16x8_t v73;
  uint16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  uint16x8_t v80;
  int16x8_t v81;
  uint32x4_t v82;
  uint32x4_t v83;
  uint32x4_t v84;
  int16x8_t v85;
  uint16x8_t v86;
  uint16x8_t v87;
  uint16x8_t v88;
  uint16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint32x4_t v101;
  uint32x4_t v102;
  uint32x4_t v103;
  uint16x8_t v104;
  uint16x8_t v105;
  int v106;
  unsigned int v107;
  int v108;
  unsigned int v109;
  unsigned int v110;
  int v111;
  unsigned int v112;
  int v113;
  unsigned int v114;
  uint32x4_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int16x8_t v118;
  int8x16x2_t v119;
  int8x16x2_t v120;
  int8x8x4_t v121;
  int8x8x4_t v122;
  int8x16x4_t v123;
  int8x16x4_t v124;
  int8x16x4_t v125;

  v8 = 24 * (a4 / 0x18);
  v9 = a4 % 0x18;
  if (v8 >= 1)
  {
    v10 = 24 * (a4 / 0x18);
    v11 = a3;
    _X13 = result;
    _X11 = &result[a2];
    do
    {
      v121 = vld4_s8(_X13);
      _X13 += 32;
      v122 = vld4_s8(_X11);
      _X11 += 32;
      v10 -= 24;
      v121.val[1] = (int8x8_t)vrhadd_u8((uint8x8_t)v121.val[1], (uint8x8_t)v122.val[1]);
      v121.val[2] = (int8x8_t)vrhadd_u8((uint8x8_t)v121.val[2], (uint8x8_t)v122.val[2]);
      __asm { PRFM            #0, [X13,#0x1C0] }
      v121.val[0] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v121.val[1]), vrhadd_u8((uint8x8_t)v121.val[0], (uint8x8_t)v122.val[0]), (uint8x8_t)0x303030303030303), 2uLL);
      __asm { PRFM            #0, [X11,#0x1C0] }
      v121.val[1] = (int8x8_t)vrhadd_u8((uint8x8_t)v121.val[1], (uint8x8_t)v121.val[2]);
      v121.val[2] = (int8x8_t)vqrshrn_n_u16(vmlal_u8(vmovl_u8((uint8x8_t)v121.val[2]), vrhadd_u8((uint8x8_t)v121.val[3], (uint8x8_t)v122.val[3]), (uint8x8_t)0x303030303030303), 2uLL);
      vst3_s8(v11, *(int8x8x3_t *)v121.val[0].i8);
      v11 += 24;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  if (v9)
  {
    v19 = &a3[v8];
    v20 = (int)(96 * (a4 / 0x18)) / 3;
    v21 = (unsigned __int8 *)&result[v20];
    v22 = (unsigned __int8 *)&result[v20 + a2];
    v23 = ~v8 + a4;
    if (v23 < 0x15)
    {
      v24 = 0;
      goto LABEL_31;
    }
    v24 = 0;
    v25 = v23 / 3uLL;
    v26 = (unint64_t)&a3[3 * v25 + (int)a4 - v9 + 3];
    v27 = (unint64_t)&result[4 * v25 + 4 + v20];
    v29 = (unint64_t)v19 < v27 && (unint64_t)v21 < v26;
    v30 = (unint64_t)v22 >= v26 || (unint64_t)v19 >= v27 + a2;
    if (!v30 || v29)
      goto LABEL_31;
    v31 = (v25 + 1);
    if (v23 >= 0x2D)
    {
      v32 = v31 & 0x7FFFFFF0;
      v68 = v32;
      v69 = v19;
      v70 = &result[v20];
      v71.i64[0] = 0x200000002;
      v71.i64[1] = 0x200000002;
      do
      {
        v72 = &v70[a2];
        v124 = vld4q_s8(v70);
        v70 += 64;
        v125 = vld4q_s8(v72);
        v73 = vmovl_high_u8((uint8x16_t)v124.val[0]);
        v74 = vmovl_u8(*(uint8x8_t *)v124.val[0].i8);
        v75 = (int16x8_t)vqtbl1q_s8(v124.val[1], (int8x16_t)xmmword_208F04F20);
        v76 = (int16x8_t)vqtbl1q_s8(v124.val[1], (int8x16_t)xmmword_208F04F30);
        v77 = (int16x8_t)vqtbl1q_s8(v124.val[1], (int8x16_t)xmmword_208F04F40);
        v78 = (int16x8_t)vqtbl1q_s8(v124.val[1], (int8x16_t)xmmword_208F04F50);
        v79 = vuzp1q_s16(v78, v77);
        v80.i64[0] = 0x3000300030003;
        v80.i64[1] = 0x3000300030003;
        v81 = vuzp1q_s16(v76, v75);
        v82 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v75, v73, v80), v71);
        v83 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v76, *(uint16x4_t *)v73.i8, (uint16x4_t)0x3000300030003), v71);
        v84 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v77, v74, v80), v71), 2uLL);
        v117 = (int16x8_t)vqtbl1q_s8(v124.val[2], (int8x16_t)xmmword_208F04F40);
        v118 = (int16x8_t)vqtbl1q_s8(v124.val[2], (int8x16_t)xmmword_208F04F50);
        v115 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v78, *(uint16x4_t *)v74.i8, (uint16x4_t)0x3000300030003), v71), 2uLL);
        v116 = (int16x8_t)vqtbl1q_s8(v124.val[2], (int8x16_t)xmmword_208F04F20);
        v85 = (int16x8_t)vqtbl1q_s8(v124.val[2], (int8x16_t)xmmword_208F04F30);
        v86 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v81), (uint8x8_t)vmovn_s16(vuzp1q_s16(v85, v116))));
        v87 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v79), (uint8x8_t)vmovn_s16(vuzp1q_s16(v118, v117))));
        v88 = vmovl_high_u8((uint8x16_t)v125.val[0]);
        v89 = vmovl_u8(*(uint8x8_t *)v125.val[0].i8);
        v90 = (int16x8_t)vqtbl1q_s8(v125.val[1], (int8x16_t)xmmword_208F04F20);
        v91 = (int16x8_t)vqtbl1q_s8(v125.val[1], (int8x16_t)xmmword_208F04F30);
        v92 = (int16x8_t)vqtbl1q_s8(v125.val[1], (int8x16_t)xmmword_208F04F40);
        v123.val[3] = (int8x16_t)vrhaddq_u32(vshrq_n_u32(v82, 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v90, v88, v80), v71), 2uLL));
        v123.val[2] = (int8x16_t)vrhaddq_u32(vshrq_n_u32(v83, 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v91, *(uint16x4_t *)v88.i8, (uint16x4_t)0x3000300030003), v71), 2uLL));
        v93 = (int16x8_t)vqtbl1q_s8(v125.val[1], (int8x16_t)xmmword_208F04F50);
        v94 = vuzp1q_s16(v93, v92);
        v95 = (int16x8_t)vqtbl1q_s8(v125.val[2], (int8x16_t)xmmword_208F04F40);
        v123.val[1] = (int8x16_t)vrhaddq_u32(v84, vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v92, v89, v80), v71), 2uLL));
        v96 = (int16x8_t)vqtbl1q_s8(v125.val[2], (int8x16_t)xmmword_208F04F50);
        v97 = (int16x8_t)vqtbl1q_s8(v125.val[2], (int8x16_t)xmmword_208F04F20);
        v123.val[0] = (int8x16_t)vrhaddq_u32(v115, vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v93, *(uint16x4_t *)v89.i8, (uint16x4_t)0x3000300030003), v71), 2uLL));
        v98 = (int16x8_t)vqtbl1q_s8(v125.val[2], (int8x16_t)xmmword_208F04F30);
        v99 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(vuzp1q_s16(v91, v90)), (uint8x8_t)vmovn_s16(vuzp1q_s16(v98, v97))));
        v100 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v94), (uint8x8_t)vmovn_s16(vuzp1q_s16(v96, v95))));
        v101 = (uint32x4_t)vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v99.i8), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v86.i8)));
        v123.val[0] = vqtbl4q_s8(v123, (int8x16_t)xmmword_208F05040);
        v102 = vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_high_u16(v99), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_high_u16(v86))), 1uLL);
        v7 = (int8x16_t)vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_high_u16(v100), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_high_u16(v87))), 1uLL);
        v103 = vshrq_n_u32(v101, 1uLL);
        v6 = (int8x16_t)vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v100.i8), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v87.i8))), 1uLL);
        v123.val[1] = vqtbl4q_s8(*(int8x16x4_t *)v6.i8, (int8x16_t)xmmword_208F05040);
        v104 = vmovl_high_u8((uint8x16_t)v124.val[3]);
        v123.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v124.val[3].i8);
        v124.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v125.val[3]);
        v4 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v125.val[3].i8);
        v105.i64[0] = 0x3000300030003;
        v105.i64[1] = 0x3000300030003;
        v5 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v98, *(uint16x4_t *)v124.val[0].i8, (uint16x4_t)0x3000300030003), v71), 2uLL);
        v125.val[3] = (int8x16_t)vrhaddq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v116, v104, v105), v71), 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v97, (uint16x8_t)v124.val[0], v105), v71), 2uLL));
        v125.val[2] = (int8x16_t)vrhaddq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v85, *(uint16x4_t *)v104.i8, (uint16x4_t)0x3000300030003), v71), 2uLL), (uint32x4_t)v5);
        v125.val[1] = (int8x16_t)vrhaddq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v117, (uint16x8_t)v123.val[3], v105), v71), 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v95, (uint16x8_t)v4, v105), v71), 2uLL));
        v125.val[0] = (int8x16_t)vrhaddq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v118, *(uint16x4_t *)v123.val[3].i8, (uint16x4_t)0x3000300030003), v71), 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v96, *(uint16x4_t *)v4.i8, (uint16x4_t)0x3000300030003), v71), 2uLL));
        v123.val[2] = vqtbl4q_s8(v125, (int8x16_t)xmmword_208F05040);
        vst3q_s8(v69, *(int8x16x3_t *)v123.val[0].i8);
        v69 += 48;
        v68 -= 16;
      }
      while (v68);
      if (v32 == v31)
        return result;
      if ((v31 & 8) == 0)
      {
        v24 = 3 * v32;
        v22 += 4 * v32;
        v21 += 4 * v32;
        v19 += 3 * v32;
        do
        {
LABEL_31:
          v106 = v21[1];
          v107 = (v106 + 3 * *v21 + 2) >> 2;
          v108 = v21[2];
          v109 = (v106 + v108 + 1) >> 1;
          v110 = (v108 + 3 * v21[3] + 2) >> 2;
          v111 = v22[1];
          v112 = v111 + 3 * *v22 + 2;
          v113 = v22[2];
          v114 = v111 + v113 + 1;
          result = (char *)(v113 + 3 * v22[3] + 2);
          *v19 = (v107 + (v112 >> 2) + 1) >> 1;
          v19[1] = (v109 + (v114 >> 1) + 1) >> 1;
          v19[2] = (v110 + (result >> 2) + 1) >> 1;
          v19 += 3;
          v21 += 4;
          v22 += 4;
          v24 += 3;
        }
        while (v24 < v9);
        return result;
      }
    }
    else
    {
      v32 = 0;
    }
    v19 += 3 * (v31 & 0x7FFFFFF8);
    v33 = 4 * (v31 & 0x7FFFFFF8);
    v21 += v33;
    v22 += v33;
    v24 = 3 * (v31 & 0x7FFFFFF8);
    v34 = &result[4 * v32 + v20];
    result = &a3[3 * v32 + (int)a4 - (int)v9];
    v35 = v32 - (v31 & 0x7FFFFFF8);
    v36.i64[0] = 0x3000300030003;
    v36.i64[1] = 0x3000300030003;
    v37.i64[0] = 0x200000002;
    v37.i64[1] = 0x200000002;
    do
    {
      v38 = &v34[a2];
      *(int8x8x4_t *)((char *)&v4 - 8) = vld4_s8(v34);
      v34 += 32;
      v40 = vmovl_u8(v39);
      v41 = (int16x8_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_208F04F40);
      v42 = (int16x8_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_208F04F50);
      v43 = vuzp1q_s16(v42, v41);
      v44 = (int32x4_t)vmlal_u16((uint32x4_t)v42, *(uint16x4_t *)v40.i8, (uint16x4_t)0x3000300030003);
      v45 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v41, v40, v36), v37);
      v46 = vshrq_n_u32((uint32x4_t)vaddq_s32(v44, v37), 2uLL);
      v47 = (int16x8_t)vqtbl1q_s8(v5, (int8x16_t)xmmword_208F04F40);
      v48 = (int16x8_t)vqtbl1q_s8(v5, (int8x16_t)xmmword_208F04F50);
      v49 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v43), (uint8x8_t)vmovn_s16(vuzp1q_s16(v48, v47))));
      v51 = vmovl_u8(v50);
      *(int8x8x4_t *)((char *)&v6 - 8) = vld4_s8(v38);
      v4 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v48, *(uint16x4_t *)v51.i8, (uint16x4_t)0x3000300030003), v37), 2uLL);
      v52 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v47, v51, v36), v37), 2uLL);
      v54 = vmovl_u8(v53);
      v55 = (int16x8_t)vqtbl1q_s8(v6, (int8x16_t)xmmword_208F04F40);
      v56 = (int16x8_t)vqtbl1q_s8(v6, (int8x16_t)xmmword_208F04F50);
      v57 = vuzp1q_s16(v56, v55);
      v58 = (int32x4_t)vmlal_u16((uint32x4_t)v56, *(uint16x4_t *)v54.i8, (uint16x4_t)0x3000300030003);
      v59 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v55, v54, v36), v37);
      v60 = vshrq_n_u32((uint32x4_t)vaddq_s32(v58, v37), 2uLL);
      v61 = (int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_208F04F40);
      v62 = (int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_208F04F50);
      v63 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v57), (uint8x8_t)vmovn_s16(vuzp1q_s16(v62, v61))));
      v65 = vmovl_u8(v64);
      v120.val[1] = (int8x16_t)vrhaddq_u32(vshrq_n_u32(v45, 2uLL), vshrq_n_u32(v59, 2uLL));
      v120.val[0] = (int8x16_t)vrhaddq_u32(v46, v60);
      v6 = vqtbl2q_s8(v120, (int8x16_t)xmmword_208F05050);
      v66 = vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_high_u16(v63), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_high_u16(v49))), 1uLL);
      v5 = (int8x16_t)vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v63.i8), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v49.i8))), 1uLL);
      v7 = vqtbl2q_s8(*(int8x16x2_t *)v5.i8, (int8x16_t)xmmword_208F05050);
      v119.val[1] = (int8x16_t)vrhaddq_u32(v52, vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v61, v65, v36), v37), 2uLL));
      v119.val[0] = (int8x16_t)vrhaddq_u32((uint32x4_t)v4, vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v62, *(uint16x4_t *)v65.i8, (uint16x4_t)0x3000300030003), v37), 2uLL));
      v67 = vqtbl2q_s8(v119, (int8x16_t)xmmword_208F05050).u64[0];
      vst3_s8(result, *(int8x8x3_t *)v6.i8);
      result += 24;
      v35 += 8;
    }
    while (v35);
    if ((v31 & 0x7FFFFFF8) != v31)
      goto LABEL_31;
  }
  return result;
}

int8x16x2_t *ScaleRowDown38_Any_NEON(int8x16x2_t *result, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  signed int v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  int8x16_t v9;
  _DWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int8x16x2_t v20;

  v4 = 12 * (a4 / 0xC);
  v5 = a4 % 0xC;
  if (v4 >= 1)
  {
    v6 = 12 * (a4 / 0xC);
    v7 = a3;
    _X13 = result;
    do
    {
      v20 = *_X13++;
      v6 -= 12;
      v9 = vqtbl2q_s8(v20, libyuv::kShuf38);
      __asm { PRFM            #0, [X13,#0x1C0] }
      *v7 = v9.i64[0];
      v15 = v7 + 1;
      *v15 = v9.i32[2];
      v7 = v15 + 1;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  if (v5)
  {
    v16 = 0;
    v17 = (char *)a3 + v4;
    v18 = (char *)result + (int)(96 * (a4 / 0xC)) / 3;
    do
    {
      v19 = &v17[v16];
      *v19 = *v18;
      v19[1] = v18[3];
      v19[2] = v18[6];
      v18 += 8;
      v16 += 3;
    }
    while (v16 < v5);
  }
  return result;
}

unsigned __int8 *ScaleRowDown38_3_Box_Any_NEON(const char *a1, uint64_t a2, _QWORD *a3, unsigned int a4, double a5, double a6, int16x8_t a7)
{
  int16x8_t v7;
  int16x8_t v8;
  signed int v9;
  unsigned int v10;
  signed int v12;
  _QWORD *v13;
  int8x8_t v16;
  int8x8_t v17;
  int8x8_t v18;
  uint8x8_t v19;
  int16x8_t v20;
  int16x8_t v27;
  int16x8_t v28;
  int8x16_t v30;
  _DWORD *v31;
  int8x8x4_t v33;
  int8x8x4_t v34;

  v9 = 12 * (a4 / 0xC);
  v10 = a4 % 0xC;
  if (v9 >= 1)
  {
    _X12 = &a1[2 * a2];
    v12 = v9;
    v13 = a3;
    _X15 = a1;
    _X16 = &a1[a2];
    do
    {
      *(int8x8x4_t *)(&a7 - 1) = vld4_s8(_X15);
      _X15 += 32;
      v33 = vld4_s8(_X16);
      _X16 += 32;
      v34 = vld4_s8(_X12);
      _X12 += 32;
      v12 -= 12;
      *(int8x8_t *)v7.i8 = vtrn1_s8(v16, v17);
      *(int8x8_t *)v8.i8 = vtrn2_s8(v16, v17);
      v19 = (uint8x8_t)vtrn1_s8(*(int8x8_t *)a7.i8, v18);
      *(int16x4_t *)v7.i8 = vadd_s16(vadd_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)v7.i8), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn1_s8(v33.val[0], v33.val[1]))), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn1_s8(v34.val[0], v34.val[1])));
      *(int16x4_t *)v8.i8 = vadd_s16(vadd_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)v8.i8), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v33.val[0], v33.val[1]))), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v34.val[0], v34.val[1])));
      *(int16x4_t *)a7.i8 = vadd_s16(vadd_s16((int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(*(int8x8_t *)a7.i8, v18)), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v33.val[2], v33.val[3]))), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v34.val[2], v34.val[3])));
      a7 = vqrdmulhq_s16(a7, libyuv::kMult38_Div6);
      *(int8x8_t *)a7.i8 = vmovn_s16(a7);
      v20 = vaddq_s16((int16x8_t)vaddl_u8(v19, (uint8x8_t)vtrn1_s8(v33.val[2], v33.val[3])), (int16x8_t)vmovl_u8((uint8x8_t)vtrn1_s8(v34.val[2], v34.val[3])));
      *(int16x8_t *)v33.val[0].i8 = vtrn2q_s16(v20, v20);
      *(int16x4_t *)v20.i8 = vmovn_s32((int32x4_t)vtrn1q_s16(v20, v20));
      v33.val[0] = (int8x8_t)vmovn_s32(*(int32x4_t *)v33.val[0].i8);
      __asm { PRFM            #0, [X15,#0x1C0] }
      v7 = vaddq_s16(v7, v20);
      v8 = vaddq_s16(v8, *(int16x8_t *)v33.val[0].i8);
      __asm { PRFM            #0, [X16,#0x1C0] }
      v27 = vqrdmulhq_s16(v7, libyuv::kMult38_Div9);
      v28 = vqrdmulhq_s16(v8, libyuv::kMult38_Div9);
      __asm { PRFM            #0, [X12,#0x1C0] }
      v30 = vqtbl3q_s8(*(int8x16x3_t *)(&a7 - 2), libyuv::kShuf38_2);
      *v13 = v30.i64[0];
      v31 = v13 + 1;
      *v31 = v30.i32[2];
      v13 = v31 + 1;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  return ScaleRowDown38_3_Box_C((unsigned __int8 *)&a1[8 * v9 / 3], a2, (uint64_t)a3 + v9, v10);
}

const char *ScaleRowDown38_2_Box_Any_NEON(const char *result, uint64_t a2, _QWORD *a3, unsigned int a4, double a5, double a6, uint16x8_t a7)
{
  int16x8_t v7;
  int16x8_t v8;
  signed int v9;
  unsigned int v10;
  _QWORD *v12;
  unsigned int v13;
  int8x8_t v15;
  int8x8_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  int16x8_t v19;
  int16x8_t v26;
  int16x8_t v27;
  int8x16_t v28;
  _DWORD *v29;
  uint64_t v30;
  char *v31;
  unsigned __int8 *v32;
  char *v33;
  int8x8x4_t v34;

  v9 = 12 * (a4 / 0xC);
  v10 = a4 % 0xC;
  if (v9 >= 1)
  {
    _X12 = result;
    v12 = a3;
    v13 = 12 * (a4 / 0xC);
    _X13 = &result[a2];
    do
    {
      *(int8x8x4_t *)(&a7 - 1) = vld4_s8(_X12);
      _X12 += 32;
      v34 = vld4_s8(_X13);
      _X13 += 32;
      v13 -= 12;
      *(int8x8_t *)v7.i8 = vtrn1_s8(v15, v16);
      *(int8x8_t *)v8.i8 = vtrn2_s8(v15, v16);
      v18 = (uint8x8_t)vtrn1_s8(*(int8x8_t *)a7.i8, v17);
      *(int16x4_t *)v7.i8 = vadd_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)v7.i8), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn1_s8(v34.val[0], v34.val[1])));
      *(int16x4_t *)v8.i8 = vadd_s16((int16x4_t)vpaddl_u8(*(uint8x8_t *)v8.i8), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v34.val[0], v34.val[1])));
      *(int16x4_t *)a7.i8 = vadd_s16((int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(*(int8x8_t *)a7.i8, v17)), (int16x4_t)vpaddl_u8((uint8x8_t)vtrn2_s8(v34.val[2], v34.val[3])));
      *(uint8x8_t *)a7.i8 = vqrshrn_n_u16(a7, 2uLL);
      v19 = (int16x8_t)vaddl_u8(v18, (uint8x8_t)vtrn1_s8(v34.val[2], v34.val[3]));
      *(int16x8_t *)v34.val[0].i8 = vtrn2q_s16(v19, v19);
      *(int16x4_t *)v19.i8 = vmovn_s32((int32x4_t)vtrn1q_s16(v19, v19));
      v34.val[0] = (int8x8_t)vmovn_s32(*(int32x4_t *)v34.val[0].i8);
      __asm { PRFM            #0, [X12,#0x1C0] }
      v7 = vaddq_s16(v7, v19);
      v8 = vaddq_s16(v8, *(int16x8_t *)v34.val[0].i8);
      __asm { PRFM            #0, [X13,#0x1C0] }
      v26 = vqrdmulhq_s16(v7, libyuv::kMult38_Div6);
      v27 = vqrdmulhq_s16(v8, libyuv::kMult38_Div6);
      v28 = vqtbl3q_s8(*(int8x16x3_t *)(&a7 - 2), libyuv::kShuf38_2);
      *v12 = v28.i64[0];
      v29 = v12 + 1;
      *v29 = v28.i32[2];
      v12 = v29 + 1;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  if (v10)
  {
    v30 = 0;
    v31 = (char *)a3 + v9;
    v32 = (unsigned __int8 *)&result[(int)(96 * (a4 / 0xC)) / 3 + 3];
    do
    {
      v33 = &v31[v30];
      *v33 = (10922 * (*(v32 - 2) + *(v32 - 3) + *(v32 - 1) + v32[a2 - 3] + v32[a2 - 2] + v32[a2 - 1])) >> 16;
      v33[1] = (10922 * (v32[1] + *v32 + v32[2] + v32[a2] + v32[a2 + 1] + v32[a2 + 2])) >> 16;
      v33[2] = (v32[4] + v32[3] + v32[a2 + 3] + v32[a2 + 4]) >> 2;
      v30 += 3;
      v32 += 8;
    }
    while (v30 < v10);
  }
  return result;
}

const float *ScaleARGBRowDown2_Any_NEON(const float *result, uint64_t a2, float *a3, int a4)
{
  unint64_t v4;
  float *v5;
  unsigned int v7;
  unsigned int v13;
  const float *v14;
  float *v15;
  float32x4x4_t v16;

  v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  if ((int)v4 >= 1)
  {
    v5 = a3;
    _X10 = result;
    v7 = a4 & 0xFFFFFFF8;
    do
    {
      v16 = vld4q_f32(_X10);
      _X10 += 16;
      v7 -= 8;
      v16.val[2] = v16.val[3];
      __asm { PRFM            #0, [X10,#0x1C0] }
      vst2q_f32(v5, *(float32x4x2_t *)v16.val[1].f32);
      v5 += 8;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v13 = a4 & 7;
  v14 = &result[2 * (int)v4];
  v15 = &a3[v4];
  if (v13 < 2)
  {
    if ((a4 & 1) == 0)
      return result;
LABEL_15:
    *v15 = v14[1];
    return result;
  }
  *v15 = v14[1];
  v15[1] = v14[3];
  if (v13 < 4)
  {
    v14 += 4;
    v15 += 2;
    if ((a4 & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    v15[2] = v14[5];
    v15[3] = v14[7];
    if (v13 < 6)
    {
      v14 += 8;
      v15 += 4;
      if ((a4 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v15[4] = v14[9];
      v15[5] = v14[11];
      v14 += 12;
      v15 += 6;
      if ((a4 & 1) != 0)
        goto LABEL_15;
    }
  }
  return result;
}

const float *ScaleARGBRowDown2Linear_Any_NEON(const float *result, uint64_t a2, float *a3, int a4)
{
  unint64_t v4;
  float *v5;
  unsigned int v7;
  int v13;
  unsigned __int8 *v14;
  float *v15;
  float32x4x4_t v16;

  v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  if ((int)v4 >= 1)
  {
    v5 = a3;
    _X10 = result;
    v7 = a4 & 0xFFFFFFF8;
    do
    {
      v16 = vld4q_f32(_X10);
      _X10 += 16;
      v7 -= 8;
      v16.val[0] = (float32x4_t)vrhaddq_u8((uint8x16_t)v16.val[0], (uint8x16_t)v16.val[1]);
      __asm { PRFM            #0, [X10,#0x1C0] }
      v16.val[1] = (float32x4_t)vrhaddq_u8((uint8x16_t)v16.val[2], (uint8x16_t)v16.val[3]);
      vst2q_f32(v5, *(float32x4x2_t *)v16.val[0].f32);
      v5 += 8;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v13 = a4 & 7;
  if ((a4 & 7) != 0)
  {
    v14 = (unsigned __int8 *)&result[2 * (int)v4];
    v15 = &a3[v4];
    *(_BYTE *)v15 = (*v14 + v14[4] + 1) >> 1;
    *((_BYTE *)v15 + 1) = (v14[1] + v14[5] + 1) >> 1;
    *((_BYTE *)v15 + 2) = (v14[2] + v14[6] + 1) >> 1;
    *((_BYTE *)v15 + 3) = (v14[3] + v14[7] + 1) >> 1;
    if (v13 != 1)
    {
      *((_BYTE *)v15 + 4) = (v14[8] + v14[12] + 1) >> 1;
      *((_BYTE *)v15 + 5) = (v14[9] + v14[13] + 1) >> 1;
      *((_BYTE *)v15 + 6) = (v14[10] + v14[14] + 1) >> 1;
      *((_BYTE *)v15 + 7) = (v14[11] + v14[15] + 1) >> 1;
      if (v13 != 2)
      {
        *((_BYTE *)v15 + 8) = (v14[16] + v14[20] + 1) >> 1;
        *((_BYTE *)v15 + 9) = (v14[17] + v14[21] + 1) >> 1;
        *((_BYTE *)v15 + 10) = (v14[18] + v14[22] + 1) >> 1;
        *((_BYTE *)v15 + 11) = (v14[19] + v14[23] + 1) >> 1;
        if (v13 != 3)
        {
          *((_BYTE *)v15 + 12) = (v14[24] + v14[28] + 1) >> 1;
          *((_BYTE *)v15 + 13) = (v14[25] + v14[29] + 1) >> 1;
          *((_BYTE *)v15 + 14) = (v14[26] + v14[30] + 1) >> 1;
          *((_BYTE *)v15 + 15) = (v14[27] + v14[31] + 1) >> 1;
          if (v13 != 4)
          {
            *((_BYTE *)v15 + 16) = (v14[32] + v14[36] + 1) >> 1;
            *((_BYTE *)v15 + 17) = (v14[33] + v14[37] + 1) >> 1;
            *((_BYTE *)v15 + 18) = (v14[34] + v14[38] + 1) >> 1;
            *((_BYTE *)v15 + 19) = (v14[35] + v14[39] + 1) >> 1;
            if (v13 != 5)
            {
              *((_BYTE *)v15 + 20) = (v14[40] + v14[44] + 1) >> 1;
              *((_BYTE *)v15 + 21) = (v14[41] + v14[45] + 1) >> 1;
              *((_BYTE *)v15 + 22) = (v14[42] + v14[46] + 1) >> 1;
              *((_BYTE *)v15 + 23) = (v14[43] + v14[47] + 1) >> 1;
              if (v13 != 6)
              {
                *((_BYTE *)v15 + 24) = (v14[48] + v14[52] + 1) >> 1;
                *((_BYTE *)v15 + 25) = (v14[49] + v14[53] + 1) >> 1;
                *((_BYTE *)v15 + 26) = (v14[50] + v14[54] + 1) >> 1;
                *((_BYTE *)v15 + 27) = (v14[51] + v14[55] + 1) >> 1;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

const char *ScaleARGBRowDown2Box_Any_NEON(const char *result, uint64_t a2, char *a3, int a4)
{
  unint64_t v4;
  unsigned int v5;
  char *v7;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  char *v24;
  unsigned __int8 *v25;
  int v26;
  int8x16x4_t v27;
  int8x16x4_t v28;

  v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  if ((int)v4 >= 1)
  {
    v5 = a4 & 0xFFFFFFF8;
    _X11 = result;
    v7 = a3;
    _X9 = &result[a2];
    do
    {
      v27 = vld4q_s8(_X11);
      _X11 += 64;
      v5 -= 8;
      v28 = vld4q_s8(_X9);
      _X9 += 64;
      __asm
      {
        PRFM            #0, [X11,#0x1C0]
        PRFM            #0, [X9,#0x1C0]
      }
      *(int8x8_t *)v27.val[0].i8 = vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v27.val[0]), (uint8x16_t)v28.val[0]), 2uLL);
      *(int8x8_t *)v27.val[1].i8 = vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v27.val[1]), (uint8x16_t)v28.val[1]), 2uLL);
      *(int8x8_t *)v27.val[2].i8 = vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v27.val[2]), (uint8x16_t)v28.val[2]), 2uLL);
      *(int8x8_t *)v27.val[3].i8 = vrshrn_n_s16((int16x8_t)vpadalq_u8(vpaddlq_u8((uint8x16_t)v27.val[3]), (uint8x16_t)v28.val[3]), 2uLL);
      vst4_s8(v7, *(int8x8x4_t *)v27.val[0].i8);
      v7 += 32;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v15 = a4 & 7;
  if ((a4 & 7) != 0)
  {
    v16 = a2 + 4;
    v17 = a2 + 1;
    v18 = a2 + 5;
    v19 = a2 + 2;
    v20 = a2 + 6;
    v21 = a2 + 3;
    v22 = a2 + 7;
    v23 = (unsigned __int8 *)&result[8 * (int)v4];
    v24 = &a3[4 * v4];
    *v24 = (*v23 + v23[4] + v23[a2] + v23[a2 + 4] + 2) >> 2;
    v24[1] = (v23[1] + v23[5] + v23[a2 + 1] + v23[a2 + 5] + 2) >> 2;
    v24[2] = (v23[2] + v23[6] + v23[a2 + 2] + v23[a2 + 6] + 2) >> 2;
    result = (const char *)((v23[3] + v23[7] + v23[a2 + 3] + v23[a2 + 7] + 2) >> 2);
    v24[3] = (char)result;
    if (v15 != 1)
    {
      v24[4] = (v23[8] + v23[12] + v23[a2 + 8] + v23[v16 + 8] + 2) >> 2;
      v24[5] = (v23[9] + v23[13] + v23[v17 + 8] + v23[v18 + 8] + 2) >> 2;
      v24[6] = (v23[10] + v23[14] + v23[v19 + 8] + v23[v20 + 8] + 2) >> 2;
      result = (const char *)((v23[11] + v23[15] + v23[v21 + 8] + v23[v22 + 8] + 2) >> 2);
      v24[7] = (char)result;
      if (v15 != 2)
      {
        v24[8] = (v23[16] + v23[20] + v23[a2 + 16] + v23[v16 + 16] + 2) >> 2;
        v24[9] = (v23[17] + v23[21] + v23[v17 + 16] + v23[v18 + 16] + 2) >> 2;
        v24[10] = (v23[18] + v23[22] + v23[v19 + 16] + v23[v20 + 16] + 2) >> 2;
        result = (const char *)((v23[19] + v23[23] + v23[v21 + 16] + v23[v22 + 16] + 2) >> 2);
        v24[11] = (char)result;
        if (v15 != 3)
        {
          v24[12] = (v23[24] + v23[28] + v23[a2 + 24] + v23[v16 + 24] + 2) >> 2;
          v24[13] = (v23[25] + v23[29] + v23[v17 + 24] + v23[v18 + 24] + 2) >> 2;
          v24[14] = (v23[26] + v23[30] + v23[v19 + 24] + v23[v20 + 24] + 2) >> 2;
          result = (const char *)((v23[27] + v23[31] + v23[v21 + 24] + v23[v22 + 24] + 2) >> 2);
          v24[15] = (char)result;
          if (v15 != 4)
          {
            v24[16] = (v23[32] + v23[36] + v23[a2 + 32] + v23[v16 + 32] + 2) >> 2;
            v24[17] = (v23[33] + v23[37] + v23[v17 + 32] + v23[v18 + 32] + 2) >> 2;
            v24[18] = (v23[34] + v23[38] + v23[v19 + 32] + v23[v20 + 32] + 2) >> 2;
            result = (const char *)((v23[35] + v23[39] + v23[v21 + 32] + v23[v22 + 32] + 2) >> 2);
            v24[19] = (char)result;
            if (v15 != 5)
            {
              v24[20] = (v23[40] + v23[44] + v23[a2 + 40] + v23[v16 + 40] + 2) >> 2;
              v24[21] = (v23[41] + v23[45] + v23[v17 + 40] + v23[v18 + 40] + 2) >> 2;
              v24[22] = (v23[42] + v23[46] + v23[v19 + 40] + v23[v20 + 40] + 2) >> 2;
              result = (const char *)((v23[43] + v23[47] + v23[v21 + 40] + v23[v22 + 40] + 2) >> 2);
              v24[23] = (char)result;
              if (v15 != 6)
              {
                v26 = v23[48];
                v25 = v23 + 48;
                result = (const char *)v25[4];
                v24[24] = (v26 + (_DWORD)result + v25[a2] + v25[v16] + 2) >> 2;
                v24[25] = (v25[1] + v25[5] + v25[v17] + v25[v18] + 2) >> 2;
                v24[26] = (v25[2] + v25[6] + v25[v19] + v25[v20] + 2) >> 2;
                v24[27] = (v25[3] + v25[7] + v25[v21] + v25[v22] + 2) >> 2;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_DWORD *ScaleARGBRowDownEven_Any_NEON(_DWORD *result, uint64_t a2, int a3, _OWORD *a4, int a5)
{
  unsigned int v5;
  int v6;
  _OWORD *v7;
  unsigned int v9;
  _DWORD *v10;
  __int128 v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v19;
  _DWORD *v20;
  int v21;

  v5 = a5 & 0xFFFFFFFC;
  v6 = 4 * a3;
  if ((int)(a5 & 0xFFFFFFFC) >= 1)
  {
    v7 = a4;
    _X12 = result;
    v9 = a5 & 0xFFFFFFFC;
    do
    {
      LODWORD(v11) = *_X12;
      v10 = &_X12[v6 / 4u];
      DWORD1(v11) = *v10;
      v12 = &v10[v6 / 4u];
      DWORD2(v11) = *v12;
      v13 = &v12[v6 / 4u];
      HIDWORD(v11) = *v13;
      _X12 = &v13[v6 / 4u];
      v9 -= 4;
      __asm { PRFM            #0, [X12,#0x1C0] }
      *v7++ = v11;
    }
    while (!(_NF ^ _VF | _ZF));
  }
  v19 = (_DWORD *)((char *)result + (int)(v6 * v5));
  v20 = (_DWORD *)((char *)a4 + (int)(4 * v5));
  if ((a5 & 2) == 0)
  {
    if ((a5 & 1) == 0)
      return result;
LABEL_9:
    *v20 = *v19;
    return result;
  }
  *v20 = *v19;
  v21 = v19[a3];
  v19 += 2 * a3;
  v20[1] = v21;
  v20 += 2;
  if ((a5 & 1) != 0)
    goto LABEL_9;
  return result;
}

uint8x8_t *ScaleARGBRowDownEvenBox_Any_NEON(uint8x8_t *result, uint64_t a2, int a3, int8x16_t *a4, int a5)
{
  signed int v5;
  int v6;
  signed int v7;
  int8x16_t *v9;
  uint8x8_t *v11;
  uint8x8_t v12;
  uint8x8_t *v13;
  uint8x8_t v14;
  uint8x8_t *v15;
  uint8x8_t v16;
  uint8x8_t *v17;
  uint8x8_t v18;
  uint8x8_t *v19;
  uint8x8_t v20;
  uint8x8_t *v21;
  uint8x8_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  uint64_t v34;
  uint64_t v35;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int8 *v45;
  unsigned __int8 *v46;

  v5 = a5 & 0xFFFFFFFC;
  v6 = 4 * a3;
  if ((int)(a5 & 0xFFFFFFFC) >= 1)
  {
    v7 = a5 & 0xFFFFFFFC;
    _X12 = result;
    v9 = a4;
    _X10 = (uint8x8_t *)((char *)result + a2);
    do
    {
      v12 = *_X12;
      v11 = (uint8x8_t *)((char *)_X12 + v6);
      v14 = *_X10;
      v13 = (uint8x8_t *)((char *)_X10 + v6);
      v16 = *v11;
      v15 = (uint8x8_t *)((char *)v11 + v6);
      v18 = *v13;
      v17 = (uint8x8_t *)((char *)v13 + v6);
      v20 = *v15;
      v19 = (uint8x8_t *)((char *)v15 + v6);
      v22 = *v17;
      v21 = (uint8x8_t *)((char *)v17 + v6);
      v23 = *v19;
      _X12 = (uint8x8_t *)((char *)v19 + v6);
      v24 = *v21;
      _X10 = (uint8x8_t *)((char *)v21 + v6);
      v25 = (int16x8_t)vaddl_u8(v12, v14);
      v26 = (int16x8_t)vaddl_u8(v16, v18);
      v27 = (int16x8_t)vaddl_u8(v20, v22);
      v28 = (int16x8_t)vaddl_u8(v23, v24);
      __asm { PRFM            #0, [X12,#0x1C0] }
      v34 = v25.i64[1];
      v25.i64[1] = v26.i64[0];
      v26.i64[0] = v34;
      v35 = v27.i64[1];
      v27.i64[1] = v28.i64[0];
      v28.i64[0] = v35;
      __asm { PRFM            #0, [X10,#0x1C0] }
      _VF = __OFSUB__(v7, 4);
      v7 -= 4;
      *v9++ = vrshrn_high_n_s16(vrshrn_n_s16(vaddq_s16(v25, v26), 2uLL), vaddq_s16(v27, v28), 2uLL);
    }
    while (!((v7 < 0) ^ _VF | (v7 == 0)));
  }
  v37 = a5 & 3;
  if ((a5 & 3) != 0)
  {
    v38 = a2 + 4;
    v39 = a2 + 1;
    v40 = a2 + 5;
    v41 = a2 + 2;
    v42 = a2 + 6;
    v43 = a2 + 3;
    v44 = a2 + 7;
    result = (uint8x8_t *)((char *)result + v5 * v6);
    v45 = &a4->i8[4 * v5];
    *v45 = (result->u8[0] + result->u8[4] + result->u8[a2] + result->u8[a2 + 4] + 2) >> 2;
    v45[1] = (result->u8[1] + result->u8[5] + result->u8[a2 + 1] + result->u8[a2 + 5] + 2) >> 2;
    v45[2] = (result->u8[2] + result->u8[6] + result->u8[a2 + 2] + result->u8[a2 + 6] + 2) >> 2;
    v45[3] = (result->u8[3] + result->u8[7] + result->u8[a2 + 3] + result->u8[a2 + 7] + 2) >> 2;
    if (v37 != 1)
    {
      result = (uint8x8_t *)((char *)result + v6);
      v45[4] = (result->u8[0] + result->u8[4] + result->u8[a2] + result->u8[v38] + 2) >> 2;
      v45[5] = (result->u8[1] + result->u8[5] + result->u8[v39] + result->u8[v40] + 2) >> 2;
      v45[6] = (result->u8[2] + result->u8[6] + result->u8[v41] + result->u8[v42] + 2) >> 2;
      v45[7] = (result->u8[3] + result->u8[7] + result->u8[v43] + result->u8[v44] + 2) >> 2;
      if (v37 != 2)
      {
        v46 = (unsigned __int8 *)result + v6;
        result = (uint8x8_t *)v46[4];
        v45[8] = (*v46 + (_DWORD)result + v46[a2] + v46[v38] + 2) >> 2;
        v45[9] = (v46[1] + v46[5] + v46[v39] + v46[v40] + 2) >> 2;
        v45[10] = (v46[2] + v46[6] + v46[v41] + v46[v42] + 2) >> 2;
        v45[11] = (v46[3] + v46[7] + v46[v43] + v46[v44] + 2) >> 2;
      }
    }
  }
  return result;
}

uint8x16_t *ScaleAddRow_Any_NEON(uint8x16_t *result, uint16x8_t *a2, int a3)
{
  signed int v3;
  signed int v5;
  uint16x8_t *v6;
  uint8x16_t v7;
  uint16x8_t v8;
  unsigned __int8 *v14;
  __int16 *v15;
  unsigned int v16;

  v3 = a3 & 0xFFFFFFF0;
  if ((int)(a3 & 0xFFFFFFF0) >= 1)
  {
    _X9 = result;
    v5 = a3 & 0xFFFFFFF0;
    v6 = a2;
    do
    {
      v7 = *_X9++;
      v8 = vaddw_high_u8(v6[1], v7);
      __asm { PRFM            #0, [X9,#0x1C0] }
      *v6 = vaddw_u8(*v6, *(uint8x8_t *)v7.i8);
      v6[1] = v8;
      v6 += 2;
      _VF = __OFSUB__(v5, 16);
      v5 -= 16;
    }
    while (!((v5 < 0) ^ _VF | (v5 == 0)));
  }
  v14 = &result->u8[v3];
  v15 = &a2->i16[v3];
  v16 = a3 & 0xF;
  if (v16 < 2)
  {
    if ((a3 & 1) == 0)
      return result;
LABEL_27:
    *v15 += *v14;
    return result;
  }
  *v15 += *v14;
  v15[1] += v14[1];
  if (v16 < 4)
  {
    v14 += 2;
    v15 += 2;
    if ((a3 & 1) != 0)
      goto LABEL_27;
  }
  else
  {
    v15[2] += v14[2];
    v15[3] += v14[3];
    if (v16 < 6)
    {
      v14 += 4;
      v15 += 4;
      if ((a3 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v15[4] += v14[4];
      v15[5] += v14[5];
      if (v16 < 8)
      {
        v14 += 6;
        v15 += 6;
        if ((a3 & 1) != 0)
          goto LABEL_27;
      }
      else
      {
        v15[6] += v14[6];
        v15[7] += v14[7];
        if (v16 < 0xA)
        {
          v14 += 8;
          v15 += 8;
          if ((a3 & 1) != 0)
            goto LABEL_27;
        }
        else
        {
          v15[8] += v14[8];
          v15[9] += v14[9];
          if (v16 < 0xC)
          {
            v14 += 10;
            v15 += 10;
            if ((a3 & 1) != 0)
              goto LABEL_27;
          }
          else
          {
            v15[10] += v14[10];
            v15[11] += v14[11];
            if (v16 < 0xE)
            {
              v14 += 12;
              v15 += 12;
              if ((a3 & 1) != 0)
                goto LABEL_27;
            }
            else
            {
              v15[12] += v14[12];
              v15[13] += v14[13];
              v14 += 14;
              v15 += 14;
              if ((a3 & 1) != 0)
                goto LABEL_27;
            }
          }
        }
      }
    }
  }
  return result;
}

int8x8_t *ScaleFilterCols_Any_NEON(int8x8_t *result, uint64_t a2, int a3, signed int a4, signed int a5)
{
  signed int v5;
  unint64_t v6;
  int8x8_t *v7;
  signed int v8;
  int32x4_t v9;
  int32x4_t v10;
  int16x8_t v11;
  int16x8_t v12;
  int32x4_t v13;
  __int8 *v14;
  unint64_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  __int8 *v18;
  unint64_t v19;
  __int8 *v20;
  unint64_t v21;
  __int8 *v22;
  unint64_t v23;
  __int8 *v24;
  unint64_t v25;
  __int8 *v26;
  unint64_t v27;
  __int8 *v28;
  unint64_t v29;
  __int8 *v30;
  uint16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  BOOL v34;
  unsigned int v35;
  _BYTE *v36;
  int v37;
  int v38;
  int v39;
  int v40;

  v5 = a3 & 0xFFFFFFF8;
  if ((int)(a3 & 0xFFFFFFF8) >= 1)
  {
    v6 = a4;
    v7 = result;
    v8 = a3 & 0xFFFFFFF8;
    v9 = vdupq_n_s32(a5);
    v10 = vshlq_n_s32(v9, 2uLL);
    v11 = (int16x8_t)vaddq_s32(vmulq_s32(v9, (int32x4_t)__const_ScaleFilterCols_NEON_dx_offset), vdupq_n_s32(a4));
    v12 = (int16x8_t)vaddq_s32((int32x4_t)v11, v10);
    v13 = vshlq_n_s32(v10, 1uLL);
    do
    {
      v14 = (__int8 *)(a2 + (v6 >> 16));
      v15 = v6 + a5;
      v16.i8[0] = *v14;
      v17.i8[0] = v14[1];
      v18 = (__int8 *)(a2 + (v15 >> 16));
      v19 = v15 + a5;
      v16.i8[1] = *v18;
      v17.i8[1] = v18[1];
      v20 = (__int8 *)(a2 + (v19 >> 16));
      v21 = v19 + a5;
      v16.i8[2] = *v20;
      v17.i8[2] = v20[1];
      v22 = (__int8 *)(a2 + (v21 >> 16));
      v23 = v21 + a5;
      v16.i8[3] = *v22;
      v17.i8[3] = v22[1];
      v24 = (__int8 *)(a2 + (v23 >> 16));
      v25 = v23 + a5;
      v16.i8[4] = *v24;
      v17.i8[4] = v24[1];
      v26 = (__int8 *)(a2 + (v25 >> 16));
      v27 = v25 + a5;
      v16.i8[5] = *v26;
      v17.i8[5] = v26[1];
      v28 = (__int8 *)(a2 + (v27 >> 16));
      v29 = v27 + a5;
      v16.i8[6] = *v28;
      v17.i8[6] = v28[1];
      v30 = (__int8 *)(a2 + (v29 >> 16));
      v6 = v29 + a5;
      v16.i8[7] = *v30;
      v17.i8[7] = v30[1];
      v31 = (uint16x8_t)vuzp1q_s16(v11, v12);
      v32 = (int16x8_t)vmovl_u8(v16);
      v33 = (int16x8_t)vmovl_u8(v17);
      *v7++ = vmovn_s16(vaddq_s16(v32, vrshrn_high_n_s32(vrshrn_n_s32(vmulq_s32(vsubl_s16(*(int16x4_t *)v33.i8, *(int16x4_t *)v32.i8), (int32x4_t)vmovl_u16(*(uint16x4_t *)v31.i8)), 0x10uLL), vmulq_s32(vsubl_high_s16(v33, v32), (int32x4_t)vmovl_high_u16(v31)), 0x10uLL)));
      v11 = (int16x8_t)vaddq_s32((int32x4_t)v11, v13);
      v12 = (int16x8_t)vaddq_s32((int32x4_t)v12, v13);
      v34 = __OFSUB__(v8, 8);
      v8 -= 8;
    }
    while (!((v8 < 0) ^ v34 | (v8 == 0)));
  }
  v35 = a3 & 7;
  v36 = (char *)result + v5;
  v37 = a4 + v5 * a5;
  if (v35 < 2)
  {
    if ((a3 & 1) == 0)
      return result;
LABEL_15:
    *v36 = *(_BYTE *)(a2 + (v37 >> 16))
         + (((*(unsigned __int8 *)(a2 + (v37 >> 16) + 1) - *(unsigned __int8 *)(a2 + (v37 >> 16)))
           * (unsigned __int16)v37
           + 0x8000) >> 16);
    return result;
  }
  *v36 = *(_BYTE *)(a2 + ((a4 + v5 * a5) >> 16))
       + (((*(unsigned __int8 *)(a2 + ((a4 + v5 * a5) >> 16) + 1) - *(unsigned __int8 *)(a2 + ((a4 + v5 * a5) >> 16)))
         * (unsigned __int16)(a4 + v5 * a5)
         + 0x8000) >> 16);
  v38 = v37 + a5;
  v36[1] = *(_BYTE *)(a2 + (v38 >> 16))
         + (((*(unsigned __int8 *)(a2 + (v38 >> 16) + 1) - *(unsigned __int8 *)(a2 + (v38 >> 16)))
           * (unsigned __int16)v38
           + 0x8000) >> 16);
  v37 = v38 + a5;
  if (v35 < 4)
  {
    v36 += 2;
    if ((a3 & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    v36[2] = *(_BYTE *)(a2 + (v37 >> 16))
           + (((*(unsigned __int8 *)(a2 + (v37 >> 16) + 1) - *(unsigned __int8 *)(a2 + (v37 >> 16)))
             * (unsigned __int16)v37
             + 0x8000) >> 16);
    v39 = v37 + a5;
    v36[3] = *(_BYTE *)(a2 + (v39 >> 16))
           + (((*(unsigned __int8 *)(a2 + (v39 >> 16) + 1) - *(unsigned __int8 *)(a2 + (v39 >> 16)))
             * (unsigned __int16)v39
             + 0x8000) >> 16);
    v37 = v39 + a5;
    if (v35 < 6)
    {
      v36 += 4;
      if ((a3 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v36[4] = *(_BYTE *)(a2 + (v37 >> 16))
             + (((*(unsigned __int8 *)(a2 + (v37 >> 16) + 1) - *(unsigned __int8 *)(a2 + (v37 >> 16)))
               * (unsigned __int16)v37
               + 0x8000) >> 16);
      v40 = v37 + a5;
      v36[5] = *(_BYTE *)(a2 + (v40 >> 16))
             + (((*(unsigned __int8 *)(a2 + (v40 >> 16) + 1) - *(unsigned __int8 *)(a2 + (v40 >> 16)))
               * (unsigned __int16)v40
               + 0x8000) >> 16);
      v37 = v40 + a5;
      v36 += 6;
      if ((a3 & 1) != 0)
        goto LABEL_15;
    }
  }
  return result;
}

_OWORD *ScaleARGBCols_Any_NEON(_OWORD *result, uint64_t a2, int a3, int a4, int a5)
{
  unsigned int v5;
  unint64_t v6;
  _OWORD *v7;
  signed int v8;
  _DWORD *v10;
  unint64_t v11;
  __int128 v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v15;
  unint64_t v16;
  _DWORD *v17;
  unint64_t v18;
  _DWORD *v19;
  unint64_t v20;
  __int128 v21;
  _DWORD *v22;
  unint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  _DWORD *v26;
  unsigned int v32;
  _DWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;

  v5 = a3 & 0xFFFFFFF8;
  if ((int)(a3 & 0xFFFFFFF8) >= 1)
  {
    v6 = a4;
    v7 = result;
    v8 = a3 & 0xFFFFFFF8;
    _X13 = a2;
    do
    {
      v10 = (_DWORD *)(a2 + 4 * (v6 >> 16));
      v11 = v6 + a5;
      LODWORD(v12) = *v10;
      v13 = (_DWORD *)(a2 + 4 * (v11 >> 16));
      v14 = v11 + a5;
      DWORD1(v12) = *v13;
      v15 = (_DWORD *)(a2 + 4 * (v14 >> 16));
      v16 = v14 + a5;
      DWORD2(v12) = *v15;
      v17 = (_DWORD *)(a2 + 4 * (v16 >> 16));
      v18 = v16 + a5;
      HIDWORD(v12) = *v17;
      v19 = (_DWORD *)(a2 + 4 * (v18 >> 16));
      v20 = v18 + a5;
      LODWORD(v21) = *v19;
      v22 = (_DWORD *)(a2 + 4 * (v20 >> 16));
      v23 = v20 + a5;
      DWORD1(v21) = *v22;
      v24 = (_DWORD *)(a2 + 4 * (v23 >> 16));
      v25 = v23 + a5;
      DWORD2(v21) = *v24;
      v26 = (_DWORD *)(a2 + 4 * (v25 >> 16));
      v6 = v25 + a5;
      HIDWORD(v21) = *v26;
      __asm { PRFM            #0, [X13,#0x1C0] }
      *v7 = v12;
      v7[1] = v21;
      v7 += 2;
      _VF = __OFSUB__(v8, 8);
      v8 -= 8;
    }
    while (!((v8 < 0) ^ _VF | (v8 == 0)));
  }
  v32 = a3 & 7;
  v33 = (_DWORD *)((char *)result + (int)(4 * v5));
  v34 = a4 + v5 * a5;
  if (v32 < 2)
  {
    if ((a3 & 1) == 0)
      return result;
LABEL_15:
    *v33 = *(_DWORD *)(a2 + 4 * (v34 >> 16));
    return result;
  }
  *v33 = *(_DWORD *)(a2 + 4 * (v34 >> 16));
  v35 = v34 + a5;
  v33[1] = *(_DWORD *)(a2 + 4 * (v35 >> 16));
  v34 = v35 + a5;
  if (v32 < 4)
  {
    v33 += 2;
    if ((a3 & 1) != 0)
      goto LABEL_15;
  }
  else
  {
    v33[2] = *(_DWORD *)(a2 + 4 * (v34 >> 16));
    v36 = v34 + a5;
    v33[3] = *(_DWORD *)(a2 + 4 * (v36 >> 16));
    v34 = v36 + a5;
    if (v32 < 6)
    {
      v33 += 4;
      if ((a3 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v33[4] = *(_DWORD *)(a2 + 4 * (v34 >> 16));
      v37 = v34 + a5;
      v33[5] = *(_DWORD *)(a2 + 4 * (v37 >> 16));
      v34 = v37 + a5;
      v33 += 6;
      if ((a3 & 1) != 0)
        goto LABEL_15;
    }
  }
  return result;
}

unsigned int *ScaleARGBFilterCols_Any_NEON(int8x16_t *a1, uint64_t a2, int a3, signed int a4, signed int a5)
{
  unint64_t v5;
  int8x16_t *v6;
  signed int v7;
  int32x4_t v9;
  int32x4_t v10;
  int8x16_t v11;
  int32x4_t v12;
  __int32 *v13;
  unint64_t v14;
  uint8x16_t v15;
  uint8x16_t v16;
  __int32 *v17;
  unint64_t v18;
  __int32 *v19;
  unint64_t v20;
  __int32 *v21;
  int8x8_t v22;
  int8x8_t v23;
  int8x8_t v24;
  int8x16_t v25;
  uint8x16_t v26;

  if ((int)(a3 & 0xFFFFFFFC) >= 1)
  {
    v5 = a4;
    v6 = a1;
    v7 = a3 & 0xFFFFFFFC;
    _X14 = a2;
    v9 = vdupq_n_s32(a5);
    v10 = vshlq_n_s32(v9, 2uLL);
    v11.i64[0] = 0x7F7F7F7F7F7F7F7FLL;
    v11.i64[1] = 0x7F7F7F7F7F7F7F7FLL;
    v12 = vaddq_s32(vmulq_s32(v9, (int32x4_t)__const_ScaleARGBFilterCols_NEON_dx_offset), vdupq_n_s32(a4));
    do
    {
      v13 = (__int32 *)(a2 + 4 * (v5 >> 16));
      v14 = v5 + a5;
      v15.i32[0] = *v13;
      v16.i32[0] = v13[1];
      v17 = (__int32 *)(a2 + 4 * (v14 >> 16));
      v18 = v14 + a5;
      v15.i32[1] = *v17;
      v16.i32[1] = v17[1];
      v19 = (__int32 *)(a2 + 4 * (v18 >> 16));
      v20 = v18 + a5;
      v15.i32[2] = *v19;
      v16.i32[2] = v19[1];
      v21 = (__int32 *)(a2 + 4 * (v20 >> 16));
      v5 = v20 + a5;
      v15.i32[3] = *v21;
      v16.i32[3] = v21[1];
      v22 = vand_s8((int8x8_t)vshrn_n_s32(v12, 9uLL), (int8x8_t)0x7F007F007F007FLL);
      v23 = vdup_lane_s8(v22, 4);
      v24 = vdup_lane_s8(v22, 6);
      *(int8x8_t *)v25.i8 = vext_s8(vdup_lane_s8(v22, 0), vdup_lane_s8(v22, 2), 4uLL);
      v25.u64[1] = (unint64_t)vext_s8(v23, v24, 4uLL);
      v26 = (uint8x16_t)veorq_s8(v25, v11);
      __asm { PRFM            #0, [X14,#0x1C0] }
      *v6++ = vshrn_high_n_s16(vshrn_n_s16(vaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v15.i8, *(uint8x8_t *)v26.i8), (int16x8_t)vmull_u8(*(uint8x8_t *)v16.i8, *(uint8x8_t *)v25.i8)), 7uLL), vaddq_s16((int16x8_t)vmull_high_u8(v15, v26), (int16x8_t)vmull_high_u8(v16, (uint8x16_t)v25)), 7uLL);
      v12 = vaddq_s32(v12, v10);
      _VF = __OFSUB__(v7, 4);
      v7 -= 4;
    }
    while (!((v7 < 0) ^ _VF | (v7 == 0)));
  }
  return ScaleARGBFilterCols_C((unsigned int *)((char *)a1->u32 + (int)(4 * (a3 & 0xFFFFFFFC))), a2, a3 & 3, a4 + (a3 & 0xFFFFFFFC) * a5, a5);
}

_BYTE *ScaleRowUp2_Linear_Any_C(_BYTE *result, _BYTE *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint8x16_t *v13;
  uint8x16_t v14;
  uint64_t v15;
  char *v16;
  uint8x16_t v17;
  uint8x16_t v18;
  uint64_t v19;
  uint8x8_t *v20;
  char *v21;
  uint64_t v22;
  uint8x8_t v23;
  uint8x8_t v24;
  int8x8x2_t v25;
  int8x16x2_t v26;

  v3 = a3 - 1;
  *a2 = *result;
  if ((int)(v3 & 0xFFFFFFFE) < 1)
    goto LABEL_12;
  v4 = v3 >> 1;
  if (v3 < 0x10 || (a2 + 1 < &result[v4 + 1] ? (v5 = &a2[2 * v4 + 1] > result) : (v5 = 0), v5))
  {
    v6 = 0;
  }
  else
  {
    if (v3 < 0x20)
    {
      v6 = 0;
      goto LABEL_20;
    }
    v6 = v4 & 0x7FFFFFF0;
    v13 = (uint8x16_t *)(result + 1);
    v14.i64[0] = 0x303030303030303;
    v14.i64[1] = 0x303030303030303;
    v15 = v6;
    v16 = a2 + 1;
    do
    {
      v17 = *(uint8x16_t *)((char *)v13 - 1);
      v18 = *v13++;
      v26.val[0] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmovl_u8(*(uint8x8_t *)v18.i8), *(uint8x8_t *)v17.i8, (uint8x8_t)0x303030303030303), 2uLL), (int16x8_t)vmlal_high_u8(vmovl_high_u8(v18), v17, v14), 2uLL);
      v26.val[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vmlal_u8(vmovl_u8(*(uint8x8_t *)v17.i8), *(uint8x8_t *)v18.i8, (uint8x8_t)0x303030303030303), 2uLL), (int16x8_t)vmlal_high_u8(vmovl_high_u8(v17), v18, v14), 2uLL);
      vst2q_s8(v16, v26);
      v16 += 32;
      v15 -= 16;
    }
    while (v15);
    if (v6 == v4)
      goto LABEL_12;
    if ((v4 & 8) != 0)
    {
LABEL_20:
      v19 = v6;
      v6 = v4 & 0x7FFFFFF8;
      v20 = (uint8x8_t *)&result[v19 + 1];
      v21 = &a2[2 * v19 + 1];
      v22 = v19 - v6;
      do
      {
        v23 = *(uint8x8_t *)((char *)v20 - 1);
        v24 = *v20++;
        v25.val[0] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmovl_u8(v24), v23, (uint8x8_t)0x303030303030303), 2uLL);
        v25.val[1] = vrshrn_n_s16((int16x8_t)vmlal_u8(vmovl_u8(v23), v24, (uint8x8_t)0x303030303030303), 2uLL);
        vst2_s8(v21, v25);
        v21 += 16;
        v22 += 8;
      }
      while (v22);
      if (v6 == v4)
        goto LABEL_12;
    }
  }
  v7 = &result[v6 + 1];
  v8 = &a2[2 * v6 + 2];
  v9 = v4 - v6;
  do
  {
    *(v8 - 1) = (*v7 + 3 * *(v7 - 1) + 2) >> 2;
    v10 = *(v7 - 1);
    v11 = *v7++;
    *v8 = (v10 + 3 * v11 + 2) >> 2;
    v8 += 2;
    --v9;
  }
  while (v9);
LABEL_12:
  if ((int)v3 >= 0)
    v12 = a3 - 1;
  else
    v12 = a3;
  a2[v3] = result[v12 >> 1];
  return result;
}

_BYTE *ScaleRowUp2_Linear_Any_NEON(_BYTE *result, _BYTE *a2, int a3, double a4, double a5, uint8x8_t a6, double a7, uint16x8_t a8)
{
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  char *v11;
  uint8x8_t *v12;
  int v13;
  uint8x8_t v15;
  uint8x8_t v16;
  uint8x8_t v17;
  int8x8_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t v27;
  unsigned __int32 *v28;
  uint64_t v29;
  uint16x8_t v30;
  unsigned __int32 v31;
  unsigned __int8 *v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;

  v8 = a3 - 1;
  *a2 = *result;
  if ((int)(v8 & 0xFFFFFFFE) >= 1)
  {
    v9 = v8 & 0xE;
    v10 = (int)v8 & 0xFFFFFFFFFFFFFFF0;
    if ((_DWORD)v10)
    {
      v11 = a2 + 1;
      v12 = (uint8x8_t *)(result + 1);
      v13 = v8 & 0xFFFFFFF0;
      _X14 = (uint8x8_t *)result;
      do
      {
        v15 = *_X14++;
        v16 = v15;
        v17 = *v12++;
        __asm { PRFM            #0, [X14,#0x1C0] }
        a6 = (uint8x8_t)vrshrn_n_s16((int16x8_t)vmlal_u8(vmovl_u8(v16), v17, (uint8x8_t)0x303030303030303), 2uLL);
        v22 = vrshrn_n_s16((int16x8_t)vmlal_u8(vmovl_u8(v17), v16, (uint8x8_t)0x303030303030303), 2uLL);
        vst2_s8(v11, *(int8x8x2_t *)(&a6 - 1));
        v11 += 16;
        _VF = __OFSUB__(v13, 16);
        v13 -= 16;
      }
      while (!((v13 < 0) ^ _VF | (v13 == 0)));
    }
    if ((v8 & 0xE) != 0)
    {
      v23 = (uint64_t)(int)v10 >> 1;
      v24 = v9 >> 1;
      if (v9 >= 8
        && ((v25 = (double *)&a2[v10 + 1], v25 < (double *)&result[(v23 | v24) + 1])
          ? (_CF = &result[v23] >= &a2[v10 | (2 * v24) | 1])
          : (_CF = 1),
            _CF))
      {
        v27 = v24 & 4;
        v28 = (unsigned __int32 *)&result[v23 + 1];
        v29 = v27;
        do
        {
          a6.i32[0] = *(unsigned __int32 *)((char *)v28 - 1);
          v30 = vmovl_u8(a6);
          *(int16x4_t *)v30.i8 = vmul_s16(*(int16x4_t *)v30.i8, (int16x4_t)0x3000300030003);
          v31 = *v28++;
          a8.i32[0] = v31;
          *(uint16x4_t *)v30.i8 = vshr_n_u16((uint16x4_t)vadd_s16((int16x4_t)*(_OWORD *)&vaddw_u8(v30, *(uint8x8_t *)a8.i8), (int16x4_t)0x2000200020002), 2uLL);
          *(int16x4_t *)a8.i8 = vmul_s16((int16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a8.i8), (int16x4_t)0x3000300030003);
          a6 = (uint8x8_t)vtrn1_s8(*(int8x8_t *)v30.i8, (int8x8_t)vshr_n_u16((uint16x4_t)vadd_s16((int16x4_t)*(_OWORD *)&vaddw_u8(a8, a6), (int16x4_t)0x2000200020002), 2uLL));
          *v25++ = *(double *)&a6;
          v29 -= 4;
        }
        while (v29);
        if (v27 == v24)
          goto LABEL_20;
      }
      else
      {
        v27 = 0;
      }
      v32 = &result[v27 + 1 + v23];
      v33 = &a2[2 * v27 + 2 + v10];
      v34 = v24 - v27;
      do
      {
        *(v33 - 1) = (*v32 + 3 * *(v32 - 1) + 2) >> 2;
        v35 = *(v32 - 1);
        v36 = *v32++;
        *v33 = (v35 + 3 * v36 + 2) >> 2;
        v33 += 2;
        --v34;
      }
      while (v34);
    }
  }
LABEL_20:
  if ((int)v8 >= 0)
    v37 = a3 - 1;
  else
    v37 = a3;
  a2[v8] = result[v37 >> 1];
  return result;
}

unsigned __int8 *ScaleRowUp2_Bilinear_Any_C(unsigned __int8 *result, uint64_t a2, _BYTE *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  BOOL v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  BOOL v42;
  BOOL v43;
  BOOL v44;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  BOOL v53;
  BOOL v54;
  BOOL v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  BOOL v59;
  BOOL v60;
  BOOL v61;
  BOOL v62;
  BOOL v63;
  BOOL v64;
  BOOL v65;
  BOOL v66;
  BOOL v67;
  uint8x8_t *v68;
  uint8x16_t v69;
  int16x8_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint8x16_t v74;
  uint8x8_t *v75;
  uint8x16_t v76;
  uint8x16_t v77;
  uint8x16_t v78;
  uint8x16_t v79;
  uint8x16_t v80;
  int8x16_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint8x8_t *v86;
  int16x8_t v87;
  char *v88;
  uint8x8_t v89;
  uint8x8_t *v90;
  uint8x8_t v91;
  uint8x8_t v92;
  uint8x8_t v93;
  uint8x8_t v94;
  uint8x8_t v95;
  char *v96;
  unsigned __int8 *v97;
  _BYTE *v98;
  uint64_t v99;
  unsigned __int8 *v100;
  int v101;
  _BYTE *v102;
  int v103;
  uint64_t v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  BOOL v110;
  BOOL v111;
  BOOL v112;
  int8x8x2_t v113;
  int8x16x2_t v114;

  v5 = a5 - 1;
  v6 = &result[a2];
  *a3 = (result[a2] + 3 * *result + 2) >> 2;
  a3[a4] = (*result + 3 * result[a2] + 2) >> 2;
  if ((int)(v5 & 0xFFFFFFFE) < 1)
    goto LABEL_170;
  v7 = v5 >> 1;
  if (v5 >= 0x10)
  {
    v8 = 0;
    v9 = a3 + 1;
    v10 = 2 * v7;
    v11 = 2 * v7 - 2;
    if (&a3[v11 + 1] >= a3 + 1 && &a3[2 * v7] >= a3 + 2)
    {
      v12 = (unint64_t)&v9[a4];
      if (&v9[a4 + v11] >= &v9[a4] && &a3[2 * v7 + a4] >= &a3[a4 + 2])
      {
        v8 = 0;
        v13 = &result[v7];
        v14 = &a3[v10];
        v15 = a3 + 2;
        v16 = (unint64_t)&a3[v10 + 1];
        v17 = &a3[a4 + v10];
        v18 = &a3[a4 + 2];
        v19 = (unint64_t)(v17 + 1);
        v20 = result + 1;
        v21 = &result[v7 + 1];
        v22 = &result[v7 + a2];
        v23 = &result[a2 + 1];
        v24 = (unint64_t)&result[v7 + 1 + a2];
        v25 = v16 <= (unint64_t)result || v15 >= v13;
        v26 = !v25;
        v112 = v26;
        v27 = v17 <= result || v12 >= (unint64_t)v13;
        v28 = !v27;
        v111 = v28;
        v29 = v19 <= (unint64_t)result || v18 >= v13;
        v30 = !v29;
        v110 = v30;
        v31 = v20 >= v14 || v9 >= v21;
        v32 = !v31;
        v109 = v32;
        v33 = (unint64_t)v20 >= v16 || v15 >= v21;
        v34 = !v33;
        v108 = v34;
        v35 = v20 >= v17 || v12 >= (unint64_t)v21;
        v36 = !v35;
        v37 = (unint64_t)v20 >= v19 || v18 >= v21;
        v38 = !v37;
        v106 = v38;
        v107 = v36;
        v39 = v6 >= v14 || v9 >= v22;
        v40 = !v39;
        v105 = v40;
        v41 = (unint64_t)v6 >= v16 || v15 >= v22;
        v42 = !v41;
        v43 = v6 >= v17 || v12 >= (unint64_t)v22;
        v44 = !v43;
        v45 = (unint64_t)v6 >= v19 || v18 >= v22;
        v46 = !v45;
        v47 = v23 >= v14 || (unint64_t)v9 >= v24;
        v48 = !v47;
        v49 = (unint64_t)v23 >= v16 || (unint64_t)v15 >= v24;
        v50 = !v49;
        v51 = v23 >= v17 || v12 >= v24;
        v52 = !v51;
        v53 = (unint64_t)v23 >= v19 || (unint64_t)v18 >= v24;
        v54 = !v53;
        v55 = (unint64_t)v9 >= v16 || v15 >= v14;
        v56 = !v55;
        v57 = v9 >= v17 || v12 >= (unint64_t)v14;
        v58 = !v57;
        v59 = (unint64_t)v9 >= v19 || v18 >= v14;
        v60 = !v59;
        v61 = v15 >= v17 || v12 >= v16;
        v62 = !v61;
        v63 = (unint64_t)v15 >= v19 || (unint64_t)v18 >= v16;
        v64 = !v63;
        v65 = v12 >= v19 || v18 >= v17;
        v66 = !v65;
        v67 = v9 < v13 && v14 > result;
        if (!v67
          && !v112
          && !v111
          && !v110
          && !v109
          && !v108
          && !v107
          && !v106
          && !v105
          && !v42
          && !v44
          && !v46
          && !v48
          && !v50
          && !v52
          && !v54
          && !v56
          && !v58
          && !v60
          && !v62
          && !v64
          && !v66)
        {
          if (v5 >= 0x20)
          {
            v8 = v7 & 0x7FFFFFF0;
            v68 = (uint8x8_t *)(result + 1);
            v69.i64[0] = 0x909090909090909;
            v69.i64[1] = 0x909090909090909;
            v70.i64[0] = 0x3000300030003;
            v70.i64[1] = 0x3000300030003;
            v71 = a3 + 1;
            v72 = v8;
            v73 = a3 + 1;
            do
            {
              v74 = *(uint8x16_t *)((char *)&v68[-1].u32[1] + 3);
              v75 = (uint8x8_t *)((char *)v68 + a2);
              v76 = *(uint8x16_t *)&v68->i8[a2 - 1];
              v77 = *(uint8x16_t *)&v68->i8[a2];
              v114.val[0] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16((int16x8_t)vaddw_u8(vmull_u8(*(uint8x8_t *)v74.i8, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v77.i8), (int16x8_t)vaddl_u8(*(uint8x8_t *)v76.i8, *v68), v70), 4uLL), vmlaq_s16((int16x8_t)vmlal_high_u8(vmovl_high_u8(v77), v74, v69), (int16x8_t)vaddl_high_u8(v76, *(uint8x16_t *)v68->i8), v70), 4uLL);
              v114.val[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16((int16x8_t)vaddw_u8(vmull_u8(*v68, (uint8x8_t)0x909090909090909), *(uint8x8_t *)v76.i8), (int16x8_t)vaddl_u8(*(uint8x8_t *)v77.i8, *(uint8x8_t *)v74.i8), v70), 4uLL), vmlaq_s16((int16x8_t)vmlal_high_u8(vmovl_high_u8(v76), *(uint8x16_t *)v68->i8, v69), (int16x8_t)vaddl_high_u8(v77, v74), v70), 4uLL);
              vst2q_s8(v73, v114);
              v73 += 32;
              v78 = *(uint8x16_t *)((char *)&v68[-1].u32[1] + 3);
              v79 = *(uint8x16_t *)v68->i8;
              v68 += 2;
              v80 = *(uint8x16_t *)((char *)&v75[-1].u32[1] + 3);
              v114.val[1] = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16((int16x8_t)vmlal_u8(vmovl_u8(*(uint8x8_t *)v79.i8), *(uint8x8_t *)v80.i8, (uint8x8_t)0x909090909090909), (int16x8_t)vaddl_u8(*v75, *(uint8x8_t *)v78.i8), v70), 4uLL), vmlaq_s16((int16x8_t)vmlal_high_u8(vmovl_high_u8(v79), v80, v69), (int16x8_t)vaddl_high_u8(*(uint8x16_t *)v75->i8, v78), v70), 4uLL);
              v81 = vrshrn_high_n_s16(vrshrn_n_s16(vmlaq_s16((int16x8_t)vmlal_u8(vmovl_u8(*(uint8x8_t *)v78.i8), *v75, (uint8x8_t)0x909090909090909), (int16x8_t)vaddl_u8(*(uint8x8_t *)v80.i8, *(uint8x8_t *)v79.i8), v70), 4uLL), vmlaq_s16((int16x8_t)vmlal_high_u8(vmovl_high_u8(v78), *(uint8x16_t *)v75->i8, v69), (int16x8_t)vaddl_high_u8(v80, v79), v70), 4uLL);
              v82 = &v71[a4];
              vst2q_s8(v82, *(int8x16x2_t *)((char *)&v114 + 16));
              v71 = v73;
              v72 -= 16;
            }
            while (v72);
            if (v8 == v7)
              goto LABEL_170;
            if ((v7 & 8) == 0)
              goto LABEL_168;
          }
          else
          {
            v8 = 0;
          }
          v83 = v8;
          v8 = v7 & 0x7FFFFFF8;
          v84 = v83 - v8;
          v85 = (char *)&v9[2 * v83];
          v86 = (uint8x8_t *)&result[v83 + 1];
          v87.i64[0] = 0x3000300030003;
          v87.i64[1] = 0x3000300030003;
          v88 = v85;
          do
          {
            v89 = *(uint8x8_t *)((char *)v86 - 1);
            v90 = (uint8x8_t *)((char *)v86 + a2);
            v91 = *(uint8x8_t *)((char *)v86 + a2 - 1);
            v92 = *(uint8x8_t *)((char *)v86 + a2);
            v113.val[0] = vrshrn_n_s16(vmlaq_s16((int16x8_t)vaddw_u8(vmull_u8(v89, (uint8x8_t)0x909090909090909), v92), (int16x8_t)vaddl_u8(v91, *v86), v87), 4uLL);
            v113.val[1] = vrshrn_n_s16(vmlaq_s16((int16x8_t)vaddw_u8(vmull_u8(*v86, (uint8x8_t)0x909090909090909), v91), (int16x8_t)vaddl_u8(v92, v89), v87), 4uLL);
            vst2_s8(v88, v113);
            v88 += 16;
            v93 = *(uint8x8_t *)((char *)v86 - 1);
            v94 = *v86++;
            v95 = *(uint8x8_t *)((char *)v90 - 1);
            v113.val[0] = vrshrn_n_s16(vmlaq_s16((int16x8_t)vmlal_u8(vmovl_u8(v94), v95, (uint8x8_t)0x909090909090909), (int16x8_t)vaddl_u8(*v90, v93), v87), 4uLL);
            v113.val[1] = vrshrn_n_s16(vmlaq_s16((int16x8_t)vmlal_u8(vmovl_u8(v93), *v90, (uint8x8_t)0x909090909090909), (int16x8_t)vaddl_u8(v95, v94), v87), 4uLL);
            v96 = &v85[a4];
            vst2_s8(v96, v113);
            v85 = v88;
            v84 += 8;
          }
          while (v84);
          if (v8 == v7)
            goto LABEL_170;
        }
      }
    }
  }
  else
  {
    v8 = 0;
  }
LABEL_168:
  v97 = &result[v8];
  v98 = &a3[2 * v8 + 2];
  v99 = v7 - v8;
  v100 = &result[v8];
  do
  {
    v101 = *++v100;
    *(v98 - 1) = (9 * *v97 + v97[a2 + 1] + 3 * (v97[a2] + v101) + 8) >> 4;
    *v98 = (9 * *v100 + v97[a2] + 3 * (v97[a2 + 1] + *v97) + 8) >> 4;
    v102 = &v98[a4];
    *(v102 - 1) = (*v100 + 9 * v97[a2] + 3 * (v97[a2 + 1] + *v97) + 8) >> 4;
    *v102 = (*v97 + 9 * v97[a2 + 1] + 3 * (v97[a2] + *v100) + 8) >> 4;
    v98 += 2;
    v97 = v100;
    --v99;
  }
  while (v99);
LABEL_170:
  if ((int)v5 >= 0)
    v103 = v5;
  else
    v103 = v5 + 1;
  v104 = (uint64_t)v103 >> 1;
  a3[v5] = (v6[v104] + 3 * result[v104] + 2) >> 2;
  a3[a4 + v5] = (result[v104] + 3 * v6[v104] + 2) >> 2;
  return result;
}

unsigned __int8 *ScaleRowUp2_Bilinear_Any_NEON(unsigned __int8 *result, uint64_t a2, _BYTE *a3, uint64_t a4, int a5, double a6, double a7, double a8, uint8x8_t a9, double a10, int16x8_t a11, double a12, uint16x8_t a13)
{
  int16x4_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint8x8_t *v20;
  uint8x8_t *v21;
  int v22;
  int16x8_t v25;
  uint8x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  int16x8_t v33;
  int16x8_t v34;
  uint8x8_t v35;
  uint8x8_t v36;
  uint8x8_t v37;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t v47;
  uint8x8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint8x8_t *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint8x8_t *v54;
  uint8x8_t *v55;
  uint8x8_t *v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unint64_t v62;
  unsigned __int8 *v63;
  unint64_t v64;
  BOOL v66;
  BOOL v67;
  BOOL v68;
  BOOL v69;
  BOOL v70;
  BOOL v71;
  BOOL v72;
  BOOL v73;
  BOOL v74;
  BOOL v75;
  BOOL v76;
  BOOL v77;
  BOOL v78;
  BOOL v79;
  BOOL v80;
  BOOL v81;
  BOOL v82;
  BOOL v83;
  BOOL v84;
  BOOL v85;
  BOOL v86;
  BOOL v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  BOOL v91;
  BOOL v92;
  BOOL v93;
  BOOL v94;
  BOOL v95;
  BOOL v96;
  BOOL v97;
  BOOL v98;
  BOOL v99;
  BOOL v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  BOOL v105;
  BOOL v106;
  unsigned __int32 *v108;
  uint64_t v109;
  uint16x8_t v110;
  int16x4_t v111;
  unsigned __int32 *v112;
  uint8x8_t v113;
  unsigned __int32 v114;
  uint16x8_t v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  int v119;
  uint64_t v120;
  BOOL v121;
  BOOL v122;
  BOOL v123;
  BOOL v124;
  BOOL v125;
  BOOL v126;
  BOOL v127;
  BOOL v128;
  BOOL v129;
  BOOL v130;
  BOOL v131;
  BOOL v132;

  v14 = a5 - 1;
  v15 = &result[a2];
  *a3 = (result[a2] + 3 * *result + 2) >> 2;
  a3[a4] = (*result + 3 * result[a2] + 2) >> 2;
  if ((int)(v14 & 0xFFFFFFFE) >= 1)
  {
    v16 = v14 & 0xE;
    v17 = (int)v14 & 0xFFFFFFFFFFFFFFF0;
    if ((_DWORD)v17)
    {
      v18 = a3 + 1;
      v19 = &a3[a4 + 1];
      v20 = (uint8x8_t *)(result + 1);
      v21 = (uint8x8_t *)(v15 + 1);
      v22 = v14 & 0xFFFFFFF0;
      _X4 = (uint8x8_t *)&result[a2];
      _X5 = (uint8x8_t *)result;
      v25.i64[0] = 0x3000300030003;
      v25.i64[1] = 0x3000300030003;
      do
      {
        v26 = *_X5++;
        v27 = v26;
        v28 = *v20++;
        __asm { PRFM            #0, [X5,#0x1C0] }
        v33 = (int16x8_t)vmlal_u8(vmovl_u8(v27), v28, (uint8x8_t)0x303030303030303);
        v34 = (int16x8_t)vmlal_u8(vmovl_u8(v28), v27, (uint8x8_t)0x303030303030303);
        v35 = *_X4++;
        v36 = v35;
        v37 = *v21++;
        __asm { PRFM            #0, [X4,#0x1C0] }
        v39 = (int16x8_t)vmlal_u8(vmovl_u8(v37), v36, (uint8x8_t)0x303030303030303);
        v40 = (int16x8_t)vmlal_u8(vmovl_u8(v36), v37, (uint8x8_t)0x303030303030303);
        v41 = v39;
        v42 = vmlaq_s16(v40, v33, v25);
        a11 = vmlaq_s16(v39, v34, v25);
        *(int8x8_t *)v33.i8 = vrshrn_n_s16(vmlaq_s16(v33, v40, v25), 4uLL);
        *(int8x8_t *)v41.i8 = vrshrn_n_s16(vmlaq_s16(v34, v41, v25), 4uLL);
        *(int8x8_t *)v42.i8 = vrshrn_n_s16(v42, 4uLL);
        a9 = (uint8x8_t)vrshrn_n_s16(a11, 4uLL);
        vst2_s8(v19, *(int8x8x2_t *)((char *)&v33 - 8));
        v19 += 16;
        vst2_s8(v18, *(int8x8x2_t *)a9.i8);
        v18 += 16;
        _VF = __OFSUB__(v22, 16);
        v22 -= 16;
      }
      while (!((v22 < 0) ^ _VF | (v22 == 0)));
    }
    if ((v14 & 0xE) != 0)
    {
      v43 = (uint64_t)(int)v17 >> 1;
      v44 = &result[v43];
      v45 = &result[v43 + a2];
      v46 = v16 >> 1;
      if (v16 < 8)
      {
        v47 = 0;
LABEL_168:
        v116 = (uint64_t)&result[v43 + 1];
        v117 = &a3[2 * v47 + 2 + v17];
        do
        {
          *(v117 - 1) = (9 * *(unsigned __int8 *)(v116 + v47 - 1)
                       + v45[v47 + 1]
                       + 3 * (v45[v47] + *(unsigned __int8 *)(v116 + v47))
                       + 8) >> 4;
          *v117 = (9 * *(unsigned __int8 *)(v116 + v47)
                 + v45[v47]
                 + 3 * (v45[v47 + 1] + *(unsigned __int8 *)(v116 + v47 - 1))
                 + 8) >> 4;
          v118 = &v117[a4];
          *(v118 - 1) = (*(unsigned __int8 *)(v116 + v47)
                       + 9 * v45[v47]
                       + 3 * (v45[v47 + 1] + *(unsigned __int8 *)(v116 + v47 - 1))
                       + 8) >> 4;
          *v118 = (*(unsigned __int8 *)(v116 + v47 - 1)
                 + 9 * v45[v47 + 1]
                 + 3 * (v45[v47] + *(unsigned __int8 *)(v116 + v47))
                 + 8) >> 4;
          ++v116;
          v117 += 2;
          --v46;
          ++v45;
        }
        while (v47 != v46);
        goto LABEL_170;
      }
      v47 = 0;
      v48 = (uint8x8_t *)&a3[v17 + 1];
      v49 = 2 * v46;
      v50 = 2 * v46 - 2;
      if (&v48->i8[v50] < (__int8 *)v48)
        goto LABEL_168;
      if (&a3[(v17 | 2) + v50] < &a3[v17 | 2])
        goto LABEL_168;
      v51 = (uint8x8_t *)((char *)v48 + a4);
      if (&v48->i8[a4 + v50] < &v48->i8[a4] || &a3[2 * v46 + v17 + a4] < &a3[v17 + 2 + a4])
        goto LABEL_168;
      v47 = 0;
      v52 = &result[v43 | v46];
      v53 = &a3[v49 | v17];
      v54 = (uint8x8_t *)&a3[v17 | 2];
      v55 = (uint8x8_t *)&a3[v49 | v17 | 1];
      v56 = (uint8x8_t *)&a3[a4 + v17 + v49];
      v57 = (unint64_t)&a3[v17 + 2 + a4];
      v58 = (unint64_t)v56 + 1;
      v59 = &result[v43 | 1];
      v60 = (unint64_t)(v52 + 1);
      v61 = &result[v43 + a2];
      v62 = (unint64_t)&v61[v46];
      v63 = v61 + 1;
      v64 = v62 + 1;
      _CF = v44 >= (unsigned __int8 *)v55 || v54 >= (uint8x8_t *)v52;
      v66 = !_CF;
      v132 = v66;
      v67 = v44 >= (unsigned __int8 *)v56 || v51 >= (uint8x8_t *)v52;
      v68 = !v67;
      v131 = v68;
      v69 = (unint64_t)v44 >= v58 || v57 >= (unint64_t)v52;
      v70 = !v69;
      v130 = v70;
      v71 = v59 >= v53 || (unint64_t)v48 >= v60;
      v72 = !v71;
      v129 = v72;
      v73 = v59 >= (unsigned __int8 *)v55 || (unint64_t)v54 >= v60;
      v74 = !v73;
      v128 = v74;
      v75 = v59 >= (unsigned __int8 *)v56 || (unint64_t)v51 >= v60;
      v76 = !v75;
      v77 = (unint64_t)v59 >= v58 || v57 >= v60;
      v78 = !v77;
      v126 = v78;
      v127 = v76;
      v79 = v45 >= v53 || (unint64_t)v48 >= v62;
      v80 = !v79;
      v125 = v80;
      v81 = v45 >= (unsigned __int8 *)v55 || (unint64_t)v54 >= v62;
      v82 = !v81;
      v124 = v82;
      v83 = v45 >= (unsigned __int8 *)v56 || (unint64_t)v51 >= v62;
      v84 = !v83;
      v123 = v84;
      v85 = (unint64_t)v45 >= v58 || v57 >= v62;
      v86 = !v85;
      v122 = v86;
      v87 = v63 >= v53 || (unint64_t)v48 >= v64;
      v88 = !v87;
      v121 = v88;
      v89 = v63 >= (unsigned __int8 *)v55 || (unint64_t)v54 >= v64;
      v90 = !v89;
      v91 = v63 >= (unsigned __int8 *)v56 || (unint64_t)v51 >= v64;
      v92 = !v91;
      v93 = (unint64_t)v63 >= v58 || v57 >= v64;
      v94 = !v93;
      v95 = v48 >= v55 || v54 >= (uint8x8_t *)v53;
      v96 = !v95;
      v97 = v48 >= v56 || v51 >= (uint8x8_t *)v53;
      v98 = !v97;
      v99 = (unint64_t)v48 >= v58 || v57 >= (unint64_t)v53;
      v100 = !v99;
      v101 = v54 >= v56 || v51 >= v55;
      v102 = !v101;
      v103 = (unint64_t)v54 >= v58 || v57 >= (unint64_t)v55;
      v104 = !v103;
      v105 = (unint64_t)v51 >= v58 || v57 >= (unint64_t)v56;
      v106 = !v105;
      if (v48 < (uint8x8_t *)v52 && v44 < v53)
        goto LABEL_168;
      if (v132)
        goto LABEL_168;
      if (v131)
        goto LABEL_168;
      if (v130)
        goto LABEL_168;
      if (v129)
        goto LABEL_168;
      if (v128)
        goto LABEL_168;
      if (v127)
        goto LABEL_168;
      if (v126)
        goto LABEL_168;
      if (v125)
        goto LABEL_168;
      if (v124)
        goto LABEL_168;
      if (v123)
        goto LABEL_168;
      if (v122)
        goto LABEL_168;
      if (v121)
        goto LABEL_168;
      if (v90)
        goto LABEL_168;
      if (v92)
        goto LABEL_168;
      if (v94)
        goto LABEL_168;
      if (v96)
        goto LABEL_168;
      if (v98)
        goto LABEL_168;
      if (v100)
        goto LABEL_168;
      if (v102)
        goto LABEL_168;
      if (v104)
        goto LABEL_168;
      if (v106)
        goto LABEL_168;
      v47 = v46 & 4;
      v108 = (unsigned __int32 *)&result[v43 + 1];
      v109 = v47;
      do
      {
        a9.i32[0] = *(unsigned __int32 *)((char *)v108 - 1);
        v110 = vmovl_u8(a9);
        *(int16x4_t *)v110.i8 = vmul_s16(*(int16x4_t *)v110.i8, (int16x4_t)0x9000900090009);
        a11.i32[0] = *v108;
        v111 = (int16x4_t)vmovl_u8(*(uint8x8_t *)a11.i8).u64[0];
        v112 = (unsigned __int32 *)((char *)v108 + a2);
        a13.i32[0] = *(unsigned __int32 *)((char *)v108 + a2 - 1);
        v13.i32[0] = *(unsigned __int32 *)((char *)v108 + a2);
        a11 = (int16x8_t)vaddl_u8(*(uint8x8_t *)a13.i8, *(uint8x8_t *)a11.i8);
        *(uint16x4_t *)v110.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmla_s16((int16x4_t)*(_OWORD *)&vaddw_u8(v110, (uint8x8_t)v13), *(int16x4_t *)a11.i8, (int16x4_t)0x3000300030003), (int16x4_t)0x8000800080008), 4uLL);
        *(int16x4_t *)a11.i8 = vmul_s16(v111, (int16x4_t)0x9000900090009);
        *(int16x4_t *)a11.i8 = vmla_s16((int16x4_t)*(_OWORD *)&vaddw_u8((uint16x8_t)a11, *(uint8x8_t *)a13.i8), (int16x4_t)*(_OWORD *)&vaddl_u8((uint8x8_t)v13, a9), (int16x4_t)0x3000300030003);
        v113 = (uint8x8_t)vtrn1_s8(*(int8x8_t *)v110.i8, (int8x8_t)vshr_n_u16((uint16x4_t)vadd_s16(*(int16x4_t *)a11.i8, (int16x4_t)0x8000800080008), 4uLL));
        *v48 = v113;
        v113.i32[0] = *(unsigned __int32 *)((char *)v108 - 1);
        v114 = *v108++;
        v110.i32[0] = v114;
        a11.i32[0] = *(unsigned __int32 *)((char *)v112 - 1);
        v115 = vmovl_u8(*(uint8x8_t *)a11.i8);
        *(int16x4_t *)v115.i8 = vmul_s16(*(int16x4_t *)v115.i8, (int16x4_t)0x9000900090009);
        a13.i32[0] = *v112;
        v13 = (int16x4_t)vmovl_u8(*(uint8x8_t *)a13.i8).u64[0];
        a13 = vaddl_u8(*(uint8x8_t *)a13.i8, v113);
        *(uint16x4_t *)v115.i8 = vshr_n_u16((uint16x4_t)vadd_s16(vmla_s16((int16x4_t)*(_OWORD *)&vaddw_u8(v115, *(uint8x8_t *)v110.i8), *(int16x4_t *)a13.i8, (int16x4_t)0x3000300030003), (int16x4_t)0x8000800080008), 4uLL);
        *(int16x4_t *)a13.i8 = vmul_s16(v13, (int16x4_t)0x9000900090009);
        a9 = (uint8x8_t)vtrn1_s8(*(int8x8_t *)v115.i8, (int8x8_t)vshr_n_u16((uint16x4_t)vadd_s16(vmla_s16((int16x4_t)*(_OWORD *)&vaddw_u8(a13, v113), (int16x4_t)*(_OWORD *)&vaddl_u8(*(uint8x8_t *)a11.i8, *(uint8x8_t *)v110.i8), (int16x4_t)0x3000300030003), (int16x4_t)0x8000800080008), 4uLL));
        *(uint8x8_t *)((char *)v48++ + a4) = a9;
        v109 -= 4;
      }
      while (v109);
      if (v47 != v46)
        goto LABEL_168;
    }
  }
LABEL_170:
  if ((int)v14 >= 0)
    v119 = v14;
  else
    v119 = v14 + 1;
  v120 = (uint64_t)v119 >> 1;
  a3[v14] = (v15[v120] + 3 * result[v120] + 2) >> 2;
  a3[a4 + v14] = (result[v120] + 3 * v15[v120] + 2) >> 2;
  return result;
}

uint64_t libyuv::ScaleARGB(uint64_t a1, int a2, uint64_t a3, int a4, int8x16_t *a5, int a6, int a7, int a8, int a9, int a10, unsigned int a11, int a12, int a13)
{
  int v15;
  int v16;
  int v17;
  int64_t v18;
  int v19;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  char v34;
  int8x16_t *(*v35)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  int8x16_t *(*v36)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  int8x16_t *(*v41)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  int8x16_t *(*v42)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  unsigned int *(*v43)(unsigned int *, uint64_t, int, int, int);
  char v44;
  void (*v45)(unint64_t);
  void *v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  signed int v60;
  unsigned __int8 *(*v61)(unsigned __int8 *, uint64_t, _BYTE *, int);
  void (*v62)(uint64_t, uint64_t, int8x16_t *, _QWORD);
  uint64_t v63;
  unsigned int *(*v64)(unsigned int *, uint64_t, int, int, int);
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  int v69;
  char v70;
  int8x16_t *(*v71)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  int8x16_t *(*v72)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  char v73;
  unsigned int *(*v74)(unsigned int *, uint64_t, int, int, int);
  unsigned int *(*v75)(unsigned int *, uint64_t, int, int, int);
  void *v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t (*v85)(unint64_t, unint64_t, int);
  char v86;
  unint64_t (*v87)(unint64_t, unint64_t, int);
  uint64_t v88;
  unint64_t (*v90)(unint64_t, unint64_t, int);
  uint64_t result;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  char v96;
  void *(*v97)(void *, void *, int);
  void *(*v98)(void *, void *, int);
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  const char *(*v112)(const char *, uint64_t, char *, int);
  unsigned __int8 *(*v113)(unsigned __int8 *, uint64_t, int8x16_t *, int);
  unint64_t v114;
  unsigned __int8 *v115;
  int8x16_t *v116;
  unsigned int *(*v117)(unsigned int *, uint64_t, int, int, int);
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t, uint64_t, int8x16_t *, _QWORD);
  void (*v120)(uint64_t, uint64_t, int8x16_t *, _QWORD);
  void (*v121)(uint64_t, uint64_t, int8x16_t *, _QWORD);
  uint64_t v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t, uint64_t, int8x16_t *, _QWORD);
  void (*v129)(uint64_t, uint64_t, uint64_t, int8x16_t *, _QWORD);
  uint64_t v130;
  int v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  void *v137;
  int v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  unint64_t v143;
  void (*v144)(unint64_t);
  int v145;
  uint64_t v146;
  uint64_t v147;
  int8x16_t *(*v148)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  int8x16_t *(*v149)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  int8x16_t *(*v154)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int);
  uint64_t v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  _QWORD v159[2];

  v15 = a4;
  v16 = a2;
  v150 = a1;
  v17 = a13;
  v158 = 0;
  v159[0] = 0;
  if ((int)a3 >= 0)
    v18 = a3;
  else
    v18 = -(int)a3;
  if (a4 >= 0)
    v19 = a4;
  else
    v19 = -a4;
  if (a13 != 2)
  {
    if (a13 != 3)
      goto LABEL_23;
    if ((int)v18 > 2 * a7 && 2 * a8 < v19)
    {
      v17 = 3;
      goto LABEL_33;
    }
  }
  if (3 * a8 == v19 || v19 == a8 || v19 == 1)
    v17 = 1;
  else
    v17 = 2;
  if ((_DWORD)v18 == 1)
  {
    v17 = 0;
    goto LABEL_33;
  }
LABEL_23:
  if (v17 == 1)
    v17 = (_DWORD)v18 != a7 && 3 * a7 != (_DWORD)v18 && (_DWORD)v18 != 1;
LABEL_33:
  if (a4 < 0)
  {
    v15 = -a4;
    v150 = a1 + ~a4 * (uint64_t)a2;
    v16 = -a2;
  }
  ScaleSlope(a3, v15, a7, a8, v17, (_DWORD *)v159 + 1, (int *)v159, (int *)&v158 + 1, (int *)&v158);
  v145 = v16;
  if (a9)
  {
    v24 = SHIDWORD(v158) * (uint64_t)a9;
    HIDWORD(v159[0]) += (unsigned __int16)v24;
    v150 += 4 * (v24 >> 16);
    a5 = (int8x16_t *)((char *)a5 + 4 * a9);
  }
  v25 = a12;
  v26 = v158;
  if (a10)
  {
    v27 = (int)v158 * (uint64_t)a10;
    LODWORD(v159[0]) += (unsigned __int16)v27;
    v150 += (v27 >> 16) * v145;
    a5 = (int8x16_t *)((char *)a5 + a10 * (uint64_t)a6);
  }
  v153 = SHIDWORD(v158);
  v156 = v158;
  if (WORD2(v158) | (unsigned __int16)v158)
  {
    v28 = v17;
    goto LABEL_41;
  }
  v28 = 0;
  if (!(_DWORD)v158 || !HIDWORD(v158))
    goto LABEL_41;
  if (((HIDWORD(v158) | v158) & 0x10000) != 0)
  {
    v28 = v17;
    if ((v158 & HIDWORD(v158) & 0x10000) != 0)
    {
      v28 = 0;
      if (v158 == 0x1000000010000)
      {
        result = 0;
        if (a12 && (int)a11 >= 1 && a5 && v150)
        {
          v92 = v145;
          v93 = v150 + SWORD1(v159[0]) * (uint64_t)v145 + (int)((SHIDWORD(v159[0]) >> 14) & 0xFFFFFFFC);
          if (a12 < 0)
          {
            v25 = -a12;
            v93 += v145 * (uint64_t)~a12;
            v92 = -v145;
          }
          v94 = 4 * a11;
          if ((_DWORD)v94 == a6 && v92 == (_DWORD)v94)
          {
            a6 = 0;
            v94 = (v25 * v92);
            v25 = 1;
            v92 = 0;
          }
          if ((int8x16_t *)v93 == a5 && v92 == a6)
            return 0;
          v95 = a6;
          v96 = cpu_info_;
          if (!cpu_info_)
          {
            v96 = 7;
            cpu_info_ = 7;
          }
          v97 = (void *(*)(void *, void *, int))CopyRow_Any_NEON;
          if ((v94 & 0x1F) == 0)
            v97 = (void *(*)(void *, void *, int))CopyRow_NEON;
          if ((v96 & 4) != 0)
            v98 = v97;
          else
            v98 = CopyRow_C;
          v99 = v92;
          v100 = v95;
          do
          {
            v98((void *)v93, a5, v94);
            result = 0;
            v93 += v99;
            a5 = (int8x16_t *)((char *)a5 + v100);
            --v25;
          }
          while (v25);
        }
        return result;
      }
    }
LABEL_41:
    v29 = v15;
    v30 = SHIDWORD(v159[0]);
    if (HIDWORD(v158) == 0x10000)
    {
      v31 = v159[0];
      if (!WORD2(v159[0]))
      {
        v32 = a6;
        if (v29 <= 1)
          v33 = 0;
        else
          v33 = (v29 << 16) - 65537;
        v34 = cpu_info_;
        if (!cpu_info_)
        {
          v34 = 7;
          cpu_info_ = 7;
        }
        v35 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_Any_NEON;
        if ((a11 & 3) == 0)
          v35 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_NEON;
        if ((v34 & 4) != 0)
          v36 = v35;
        else
          v36 = InterpolateRow_C;
        if (a12 >= 1)
        {
          v37 = v150 + (int)((SHIDWORD(v159[0]) >> 14) & 0xFFFFFFFC);
          v154 = v36;
          v38 = 4 * a11;
          v39 = v32;
          if (v28)
          {
            do
            {
              if (v31 >= v33)
                v31 = v33;
              v154(a5, (uint8x16_t *)(v37 + (v31 >> 16) * (uint64_t)v145), v145, v38, BYTE1(v31));
              v37 = v150 + (int)(((int)v30 >> 14) & 0xFFFFFFFC);
              a5 = (int8x16_t *)((char *)a5 + v39);
              v31 += v156;
              --v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              if (v31 >= v33)
                v31 = v33;
              v154(a5, (uint8x16_t *)(v37 + (v31 >> 16) * (uint64_t)v145), v145, v38, 0);
              v37 = v150 + (int)(((int)v30 >> 14) & 0xFFFFFFFC);
              a5 = (int8x16_t *)((char *)a5 + v39);
              v31 += v156;
              --v25;
            }
            while (v25);
          }
        }
        return 0;
      }
    }
    else
    {
      v31 = v159[0];
    }
    if ((int)v158 < 0x10000 && v28)
    {
      v140 = v28;
      v40 = cpu_info_;
      if (!cpu_info_)
      {
        v40 = 7;
        cpu_info_ = 7;
      }
      v41 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_Any_NEON;
      if ((a11 & 3) == 0)
        v41 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_NEON;
      if ((v40 & 4) != 0)
        v42 = v41;
      else
        v42 = InterpolateRow_C;
      v148 = v42;
      v43 = ScaleARGBFilterCols_C;
      if (v18 >> 15)
        v43 = ScaleARGBFilterCols64_C;
      v44 = cpu_info_;
      if (!cpu_info_)
      {
        v44 = 7;
        cpu_info_ = 7;
      }
      v45 = (void (*)(unint64_t))ScaleARGBFilterCols_Any_NEON;
      if ((a11 & 3) == 0)
        v45 = (void (*)(unint64_t))ScaleARGBFilterCols_NEON;
      if ((v44 & 4) == 0)
        v45 = (void (*)(unint64_t))v43;
      v144 = v45;
      v147 = 4 * (int)a11;
      v46 = malloc_type_malloc((int)((2 * (v147 + 31)) | 0x3F), 0x447F5427uLL);
      v47 = ((unint64_t)v46 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v47)
      {
        v137 = v46;
        v138 = a6;
        v136 = v29;
        v48 = (v29 << 16) - 0x10000;
        v49 = v145;
        v143 = (v147 + 31) & 0xFFFFFFFFFFFFFFE0;
        if (v48 >= v31)
          v50 = v31;
        else
          v50 = v48;
        v51 = v50 >> 16;
        v146 = v150 + v145 * (uint64_t)(v50 >> 16);
        v144(((unint64_t)v46 + 63) & 0xFFFFFFFFFFFFFFC0);
        v142 = v49;
        if (v136 <= 1)
          v52 = 0;
        else
          v52 = v49;
        v53 = v146 + v52;
        ((void (*)(unint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v144)(v47 + v143, v146 + v52, a11, v30, v153);
        if (a12 >= 1)
        {
          if (v136 <= 2)
            v54 = 0;
          else
            v54 = v142;
          v55 = v53 + v54;
          v151 = v150 + (int)v142 * (uint64_t)(v48 >> 16);
          if (v140 == 1)
          {
            do
            {
              v56 = v50 >> 16;
              if (v50 >> 16 != v51)
              {
                v57 = v50 <= v48;
                if (v50 >= v48)
                  v50 = v48;
                if (v57)
                  v58 = v56;
                else
                  v58 = v48 >> 16;
                if (!v57)
                  v55 = v151;
                if (v58 != v51)
                {
                  ((void (*)(unint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v144)(v47, v55, a11, v30, v153);
                  v47 += (int)v143;
                  LODWORD(v143) = -(int)v143;
                  v59 = v142;
                  if (v50 + 0x10000 >= v48)
                    v59 = 0;
                  v55 += v59;
                  v51 = v58;
                }
                v26 = v156;
              }
              v148(a5, (uint8x16_t *)v47, 0, v147, 0);
              a5 = (int8x16_t *)((char *)a5 + v138);
              v50 += v26;
              --v25;
            }
            while (v25);
          }
          else
          {
            v101 = (v147 + 31) & 0xFFFFFFE0;
            do
            {
              v102 = v50 >> 16;
              if (v50 >> 16 != v51)
              {
                v103 = v50 <= v48;
                if (v50 >= v48)
                  v50 = v48;
                if (v103)
                  v104 = v102;
                else
                  v104 = v48 >> 16;
                if (!v103)
                  v55 = v151;
                if (v104 != v51)
                {
                  ((void (*)(unint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v144)(v47, v55, a11, v30, v153);
                  v47 += v101;
                  v101 = -v101;
                  v105 = v142;
                  if (v50 + 0x10000 >= v48)
                    v105 = 0;
                  v55 += v105;
                  v51 = v104;
                }
                v26 = v156;
              }
              v148(a5, (uint8x16_t *)v47, v101, v147, BYTE1(v50));
              a5 = (int8x16_t *)((char *)a5 + v138);
              v50 += v26;
              --v25;
            }
            while (v25);
          }
        }
        goto LABEL_229;
      }
    }
    else
    {
      if (!v28)
      {
        v85 = (unint64_t (*)(unint64_t, unint64_t, int))ScaleARGBCols_C;
        if (v18 >> 15)
          v85 = (unint64_t (*)(unint64_t, unint64_t, int))ScaleARGBCols64_C;
        v86 = cpu_info_;
        if (!cpu_info_)
        {
          v86 = 7;
          cpu_info_ = 7;
        }
        v87 = (unint64_t (*)(unint64_t, unint64_t, int))ScaleARGBCols_Any_NEON;
        if ((a11 & 7) == 0)
          v87 = (unint64_t (*)(unint64_t, unint64_t, int))ScaleARGBCols_NEON;
        if ((v86 & 4) != 0)
          v85 = v87;
        v88 = SHIDWORD(v159[0]);
        if (SHIDWORD(v159[0]) < 0x8000 && 2 * (_DWORD)v18 == a11)
          v90 = ScaleARGBColsUp2_C;
        else
          v90 = v85;
        if (a12 >= 1)
        {
          do
          {
            ((void (*)(int8x16_t *, uint64_t, _QWORD, uint64_t, uint64_t))v90)(a5, v150 + v145 * (uint64_t)(v31 >> 16), a11, v88, v153);
            a5 = (int8x16_t *)((char *)a5 + a6);
            v31 += v26;
            --v25;
          }
          while (v25);
        }
        return 0;
      }
      v141 = v28;
      v139 = a6;
      if (v18 >> 15)
        v64 = ScaleARGBFilterCols64_C;
      else
        v64 = ScaleARGBFilterCols_C;
      v65 = SHIDWORD(v159[0]) + SHIDWORD(v158) * (uint64_t)(int)(a11 - 1);
      if (v158 < 0)
        v66 = SHIDWORD(v159[0]) + SHIDWORD(v158) * (uint64_t)(int)(a11 - 1);
      else
        v66 = SHIDWORD(v159[0]);
      if (v158 < 0)
        v65 = SHIDWORD(v159[0]);
      v67 = (v66 >> 16) & 0xFFFFFFFFFFFFFFFCLL;
      v68 = ((v65 >> 16) + 5) & 0xFFFFFFFFFFFFFFFCLL;
      if (v68 >= v18)
        LODWORD(v68) = v18;
      v69 = v68 - v67;
      v70 = cpu_info_;
      if (!cpu_info_)
      {
        v70 = 7;
        cpu_info_ = 7;
      }
      v71 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_Any_NEON;
      if ((v69 & 3) == 0)
        v71 = (int8x16_t *(*)(int8x16_t *, uint8x16_t *, uint64_t, int, unsigned int))InterpolateRow_NEON;
      if ((v70 & 4) != 0)
        v72 = v71;
      else
        v72 = InterpolateRow_C;
      v149 = v72;
      v73 = cpu_info_;
      if (!cpu_info_)
      {
        v73 = 7;
        cpu_info_ = 7;
      }
      v74 = (unsigned int *(*)(unsigned int *, uint64_t, int, int, int))ScaleARGBFilterCols_Any_NEON;
      if ((a11 & 3) == 0)
        v74 = (unsigned int *(*)(unsigned int *, uint64_t, int, int, int))ScaleARGBFilterCols_NEON;
      if ((v73 & 4) != 0)
        v75 = v74;
      else
        v75 = v64;
      v76 = malloc_type_malloc(16 * v69 + 63, 0xA956F389uLL);
      v77 = ((unint64_t)v76 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v77)
      {
        if (a12 < 1)
        {
LABEL_230:
          free(v76);
          return 0;
        }
        v78 = v69;
        v137 = v76;
        v79 = (v30 - ((_DWORD)v67 << 16));
        v80 = v150 + 4 * v67;
        v81 = (v29 << 16) - 0x10000;
        if (v81 >= v31)
          v82 = v31;
        else
          v82 = (v29 << 16) - 0x10000;
        v83 = v150 + 4 * v67;
        if (v141 == 1)
        {
          do
          {
            v84 = v79;
            v75((unsigned int *)a5, v80 + v145 * (uint64_t)(v82 >> 16), a11, v79, v153);
            v80 = v83;
            v79 = v84;
            a5 = (int8x16_t *)((char *)a5 + v139);
            if (v82 + v156 >= v81)
              v82 = (v29 << 16) - 0x10000;
            else
              v82 += v156;
            --v25;
          }
          while (v25);
        }
        else
        {
          v152 = 4 * v78;
          v117 = v75;
          v118 = v79;
          do
          {
            v149((int8x16_t *)v77, (uint8x16_t *)(v80 + v145 * (uint64_t)(v82 >> 16)), v145, v152, BYTE1(v82));
            v117((unsigned int *)a5, v77, a11, v118, v153);
            v80 = v83;
            a5 = (int8x16_t *)((char *)a5 + v139);
            if (v82 + v156 >= v81)
              v82 = (v29 << 16) - 0x10000;
            else
              v82 += v156;
            --v25;
          }
          while (v25);
        }
LABEL_229:
        v76 = v137;
        goto LABEL_230;
      }
    }
    return 1;
  }
  if (HIDWORD(v158) != 0x20000)
  {
    v106 = v159[0];
    v107 = HIDWORD(v159[0]);
    if (HIDWORD(v158) == 0x40000 && v17 == 3)
    {
      v108 = a6;
      v109 = 8 * (int)a11 + 31;
      v137 = malloc_type_malloc((int)((2 * v109) | 0x3F), 0x13A05B9BuLL);
      v110 = ((unint64_t)v137 + 63) & 0xFFFFFFFFFFFFFFC0;
      if (v110)
      {
        v111 = cpu_info_;
        if (!cpu_info_)
        {
          v111 = 7;
          cpu_info_ = 7;
        }
        v112 = ScaleARGBRowDown2Box_Any_NEON;
        if ((a11 & 7) == 0)
          v112 = ScaleARGBRowDown2Box_NEON;
        if ((v111 & 4) != 0)
          v113 = (unsigned __int8 *(*)(unsigned __int8 *, uint64_t, int8x16_t *, int))v112;
        else
          v113 = (unsigned __int8 *(*)(unsigned __int8 *, uint64_t, int8x16_t *, int))ScaleARGBRowDown2Box_C;
        if (a12 >= 1)
        {
          v114 = v109 & 0xFFFFFFFFFFFFFFE0;
          v115 = (unsigned __int8 *)(v150 + (int)((v107 >> 14) & 0xFFFFFFFC) + (v106 >> 16) * (uint64_t)v145);
          v155 = (v156 >> 16) * (uint64_t)v145;
          v157 = v114;
          v116 = (int8x16_t *)(v110 + v114);
          do
          {
            v113(v115, v145, (int8x16_t *)v110, 2 * a11);
            v113(&v115[2 * v145], v145, v116, 2 * a11);
            v113((unsigned __int8 *)v110, v157, a5, a11);
            v115 += v155;
            a5 = (int8x16_t *)((char *)a5 + v108);
            --v25;
          }
          while (v25);
        }
        goto LABEL_229;
      }
      return 1;
    }
    if (cpu_info_)
    {
      if (v17)
        v119 = (void (*)(uint64_t, uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDownEvenBox_C;
      else
        v119 = (void (*)(uint64_t, uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDownEven_C;
      if ((cpu_info_ & 4) == 0)
      {
LABEL_270:
        if (a12 < 1)
          return 0;
        v130 = (SHIDWORD(v158) >> 16);
        v131 = a6;
        v132 = v150 + (int)((SHIDWORD(v159[0]) >> 14) & 0xFFFFFFFC) + (SLODWORD(v159[0]) >> 16) * (uint64_t)v145;
        if (v17 == 1)
          v133 = 0;
        else
          v133 = v145;
        v134 = v133;
        v135 = v131;
        do
        {
          v119(v132, v134, v130, a5, a11);
          result = 0;
          v132 += (v156 >> 16) * (uint64_t)v145;
          a5 = (int8x16_t *)((char *)a5 + v135);
          --v25;
        }
        while (v25);
        return result;
      }
    }
    else
    {
      cpu_info_ = 7;
    }
    v128 = (void (*)(uint64_t, uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDownEvenBox_Any_NEON;
    if (!v17)
      v128 = (void (*)(uint64_t, uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDownEven_Any_NEON;
    v129 = (void (*)(uint64_t, uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDownEven_NEON;
    if (v17)
      v129 = (void (*)(uint64_t, uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDownEvenBox_NEON;
    if ((a11 & 3) != 0)
      v119 = v128;
    else
      v119 = v129;
    goto LABEL_270;
  }
  v60 = (SHIDWORD(v159[0]) >> 14) & 0xFFFFFFFC;
  if (v17 != 2)
    v60 -= 4;
  if (cpu_info_)
  {
    v61 = ScaleARGBRowDown2Box_C;
    if (v17 == 1)
      v61 = ScaleARGBRowDown2Linear_C;
    if (v17)
      v62 = (void (*)(uint64_t, uint64_t, int8x16_t *, _QWORD))v61;
    else
      v62 = (void (*)(uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDown2_C;
    v63 = v150;
    if ((cpu_info_ & 4) == 0)
      goto LABEL_255;
  }
  else
  {
    cpu_info_ = 7;
    v63 = v150;
  }
  v120 = (void (*)(uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDown2Box_Any_NEON;
  if (v17 == 1)
    v120 = (void (*)(uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDown2Linear_Any_NEON;
  if (v17)
    v62 = v120;
  else
    v62 = (void (*)(uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDown2_Any_NEON;
  if ((a11 & 7) == 0)
  {
    v121 = (void (*)(uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDown2Box_NEON;
    if (v17 == 1)
      v121 = (void (*)(uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDown2Linear_NEON;
    if (v17)
      v62 = v121;
    else
      v62 = (void (*)(uint64_t, uint64_t, int8x16_t *, _QWORD))ScaleARGBRowDown2_NEON;
  }
LABEL_255:
  if (a12 < 1)
    return 0;
  v122 = v63 + v60 + SWORD1(v159[0]) * (uint64_t)v145;
  v123 = a6;
  v124 = ((int)v158 >> 16) * (uint64_t)v145;
  if (v17 == 1)
    v125 = 0;
  else
    v125 = v145;
  v126 = v125;
  v127 = v123;
  do
  {
    v62(v122, v126, a5, a11);
    result = 0;
    v122 += v124;
    a5 = (int8x16_t *)((char *)a5 + v127);
    --v25;
  }
  while (v25);
  return result;
}

uint64_t ScaleRowDown2_C(uint64_t result, uint64_t a2, _BYTE *a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  const char *v13;
  const char *v14;
  char *v15;
  int8x16x4_t v16;
  int8x16x4_t v17;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    if (v4 >= 0x40
      && ((v5 = v4 >> 1, result + 4 * (unint64_t)v5 + 4 <= (unint64_t)a3)
       || result + 1 >= (unint64_t)&a3[2 * v5 + 2]))
    {
      v7 = v5 + 1;
      v8 = v7 & 0x1F;
      if ((v7 & 0x1F) == 0)
        v8 = 32;
      v9 = v7 - v8;
      v6 = 2 * v9;
      v10 = result + 4 * v9;
      v11 = &a3[2 * v9];
      v12 = a3 + 32;
      v13 = (const char *)(result + 65);
      do
      {
        v14 = v13 - 64;
        v16 = vld4q_s8(v14);
        v17 = vld4q_s8(v13);
        v15 = v12 - 32;
        v16.val[1] = v16.val[2];
        vst2q_s8(v15, *(int8x16x2_t *)v16.val[0].i8);
        v17.val[1] = v17.val[2];
        vst2q_s8(v12, *(int8x16x2_t *)v17.val[0].i8);
        v12 += 64;
        v13 += 128;
        v9 -= 32;
      }
      while (v9);
      result = v10;
      a3 = v11;
    }
    else
    {
      v6 = 0;
    }
    do
    {
      *a3 = *(_BYTE *)(result + 1);
      a3[1] = *(_BYTE *)(result + 3);
      a3 += 2;
      result += 4;
      v6 += 2;
    }
    while (v6 < a4 - 1);
  }
  if ((a4 & 1) != 0)
    *a3 = *(_BYTE *)(result + 1);
  return result;
}

const char *ScaleRowDown2Linear_C(const char *result, uint64_t a2, char *a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  unsigned __int8 *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int8x16x2_t v11;
  int8x16x4_t v12;

  v4 = a4 - 2;
  if (a4 < 2)
  {
    v8 = a3;
    v7 = (unsigned __int8 *)result;
  }
  else
  {
    if (v4 >= 0x1E && ((v5 = v4 >> 1, &result[4 * v5 + 4] <= a3) || &a3[2 * v5 + 2] <= result))
    {
      v9 = v5 + 1;
      v6 = 2 * (v9 & 0xFFFFFFF0);
      v7 = (unsigned __int8 *)&result[4 * (v9 & 0xFFFFFFF0)];
      v8 = &a3[2 * (v9 & 0xFFFFFFF0)];
      v10 = v9 & 0xFFFFFFF0;
      do
      {
        v12 = vld4q_s8(result);
        result += 64;
        v11.val[0] = (int8x16_t)vrhaddq_u8((uint8x16_t)v12.val[0], (uint8x16_t)v12.val[1]);
        v11.val[1] = (int8x16_t)vrhaddq_u8((uint8x16_t)v12.val[2], (uint8x16_t)v12.val[3]);
        vst2q_s8(a3, v11);
        a3 += 32;
        v10 -= 16;
      }
      while (v10);
      if ((v9 & 0xFFFFFFF0) == v9)
        goto LABEL_9;
    }
    else
    {
      v6 = 0;
      v7 = (unsigned __int8 *)result;
      v8 = a3;
    }
    do
    {
      *v8 = (*v7 + v7[1] + 1) >> 1;
      v8[1] = (v7[2] + v7[3] + 1) >> 1;
      v8 += 2;
      v7 += 4;
      v6 += 2;
    }
    while (v6 < a4 - 1);
  }
LABEL_9:
  if ((a4 & 1) != 0)
    *v8 = (*v7 + v7[1] + 1) >> 1;
  return result;
}

const char *ScaleRowDown2Box_C(const char *result, uint64_t a2, char *a3, int a4)
{
  unsigned __int8 *v4;
  unsigned int v5;
  int v6;
  char *v7;
  unsigned __int8 *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int8x16x2_t v20;
  int8x16x4_t v21;
  int8x16x4_t v22;

  v4 = (unsigned __int8 *)&result[a2];
  v5 = a4 - 2;
  if (a4 >= 2)
  {
    if (v5 >= 0x1E)
    {
      v6 = 0;
      v9 = v5 >> 1;
      v10 = (unint64_t)&a3[2 * v9 + 2];
      v11 = (unint64_t)&result[4 * v9 + 4];
      v12 = v11 + a2;
      v14 = v11 > (unint64_t)a3 && v10 > (unint64_t)result;
      v15 = (unint64_t)v4 < v10 && v12 > (unint64_t)a3;
      if (!v15 && !v14)
      {
        v16 = v9 + 1;
        v6 = 2 * (v16 & 0xFFFFFFF0);
        v17 = 4 * (v16 & 0xFFFFFFF0);
        v4 += v17;
        v8 = (unsigned __int8 *)&result[v17];
        v7 = &a3[2 * (v16 & 0xFFFFFFF0)];
        v18 = v16 & 0xFFFFFFF0;
        do
        {
          v19 = &result[a2];
          v21 = vld4q_s8(result);
          result += 64;
          v22 = vld4q_s8(v19);
          v20.val[0] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v21.val[0].i8, *(uint8x8_t *)v21.val[1].i8), *(uint8x8_t *)v22.val[0].i8), *(uint8x8_t *)v22.val[1].i8), 2uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddl_high_u8((uint8x16_t)v21.val[0], (uint8x16_t)v21.val[1]), (uint8x16_t)v22.val[0]), (uint8x16_t)v22.val[1]), 2uLL);
          v20.val[1] = vrshrn_high_n_s16(vrshrn_n_s16((int16x8_t)vaddw_u8(vaddw_u8(vaddl_u8(*(uint8x8_t *)v21.val[2].i8, *(uint8x8_t *)v21.val[3].i8), *(uint8x8_t *)v22.val[2].i8), *(uint8x8_t *)v22.val[3].i8), 2uLL), (int16x8_t)vaddw_high_u8(vaddw_high_u8(vaddl_high_u8((uint8x16_t)v21.val[2], (uint8x16_t)v21.val[3]), (uint8x16_t)v22.val[2]), (uint8x16_t)v22.val[3]), 2uLL);
          vst2q_s8(a3, v20);
          a3 += 32;
          v18 -= 16;
        }
        while (v18);
        if ((v16 & 0xFFFFFFF0) == v16)
          goto LABEL_22;
        goto LABEL_21;
      }
    }
    else
    {
      v6 = 0;
    }
    v8 = (unsigned __int8 *)result;
    v7 = a3;
    do
    {
LABEL_21:
      *v7 = (*v8 + v8[1] + *v4 + v4[1] + 2) >> 2;
      v7[1] = (v8[2] + v8[3] + v4[2] + v4[3] + 2) >> 2;
      v7 += 2;
      v8 += 4;
      v4 += 4;
      v6 += 2;
    }
    while (v6 < a4 - 1);
    goto LABEL_22;
  }
  v7 = a3;
  v8 = (unsigned __int8 *)result;
LABEL_22:
  if ((a4 & 1) != 0)
    *v7 = (*v8 + v8[1] + *v4 + v4[1] + 2) >> 2;
  return result;
}

unsigned __int16 *ScaleRowDown2Box_16To8_C(unsigned __int16 *result, uint64_t a2, char *a3, int a4, unsigned int a5)
{
  unsigned __int16 *v5;
  unsigned int v6;
  int v7;
  char *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  const __int16 *v23;
  const __int16 *v24;
  int32x4_t v25;
  uint32x4_t v26;
  int v27;
  int v28;
  int v29;
  int16x8x4_t v30;
  int8x16x4_t v31;
  int16x8x4_t v32;
  int16x8x4_t v33;
  int16x8x4_t v34;

  v5 = &result[a2];
  v6 = a4 - 2;
  if (a4 < 2)
  {
    v8 = a3;
    v9 = result;
    goto LABEL_26;
  }
  if (v6 >= 0x1E)
  {
    v7 = 0;
    v10 = v6 >> 1;
    v11 = (unint64_t)&a3[2 * v10 + 2];
    v12 = (unint64_t)&result[4 * v10 + 4];
    v13 = v12 + 2 * a2;
    v15 = v12 > (unint64_t)a3 && v11 > (unint64_t)result;
    v16 = (unint64_t)v5 < v11 && v13 > (unint64_t)a3;
    if (!v16 && !v15)
    {
      v17 = v10 + 1;
      v7 = 2 * (v17 & 0xFFFFFFF0);
      v18 = 4 * (v17 & 0xFFFFFFF0);
      v5 = (unsigned __int16 *)((char *)v5 + v18 * 2);
      v9 = &result[v18];
      v8 = &a3[2 * (v17 & 0xFFFFFFF0)];
      v19 = vdupq_n_s32(a5);
      v20.i64[0] = 0x200000002;
      v20.i64[1] = 0x200000002;
      v21.i64[0] = 0xFF000000FFLL;
      v21.i64[1] = 0xFF000000FFLL;
      v22 = v17 & 0xFFFFFFF0;
      do
      {
        v23 = (const __int16 *)result;
        v30 = vld4q_s16(v23);
        v23 += 32;
        v32 = vld4q_s16(v23);
        v24 = (const __int16 *)&result[a2];
        v33 = vld4q_s16(v24);
        v24 += 32;
        v34 = vld4q_s16(v24);
        v25 = vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v30.val[0].i8, *(uint16x4_t *)v30.val[1].i8), *(uint16x4_t *)v33.val[0].i8), *(uint16x4_t *)v33.val[1].i8), v20), 2uLL), v19), 0x10uLL);
        v26 = vaddl_u16(*(uint16x4_t *)v32.val[2].i8, *(uint16x4_t *)v32.val[3].i8);
        v31.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v30.val[0], (uint16x8_t)v30.val[1]), (uint16x8_t)v33.val[0]), (uint16x8_t)v33.val[1]), v20), 2uLL), v19), 0x10uLL), v21);
        v30.val[1] = (int16x8_t)vaddw_high_u16(vaddl_high_u16((uint16x8_t)v32.val[2], (uint16x8_t)v32.val[3]), (uint16x8_t)v34.val[2]);
        v31.val[3] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v32.val[0], (uint16x8_t)v32.val[1]), (uint16x8_t)v34.val[0]), (uint16x8_t)v34.val[1]), v20), 2uLL), v19), 0x10uLL), v21);
        v31.val[0] = (int8x16_t)vminq_s32(v25, v21);
        v31.val[2] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v32.val[0].i8, *(uint16x4_t *)v32.val[1].i8), *(uint16x4_t *)v34.val[0].i8), *(uint16x4_t *)v34.val[1].i8), v20), 2uLL), v19), 0x10uLL), v21);
        v32.val[2] = (int16x8_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v30.val[2], (uint16x8_t)v30.val[3]), (uint16x8_t)v33.val[2]), (uint16x8_t)v33.val[3]), v20), 2uLL), v19), 0x10uLL), v21);
        v33.val[0] = (int16x8_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)v30.val[1], (uint16x8_t)v34.val[3]), v20), 2uLL), v19), 0x10uLL), v21);
        v32.val[1] = (int16x8_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v30.val[2].i8, *(uint16x4_t *)v30.val[3].i8), *(uint16x4_t *)v33.val[2].i8), *(uint16x4_t *)v33.val[3].i8), v20), 2uLL), v19), 0x10uLL), v21);
        v32.val[3] = (int16x8_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16(v26, *(uint16x4_t *)v34.val[2].i8), *(uint16x4_t *)v34.val[3].i8), v20), 2uLL), v19), 0x10uLL), v21);
        v30.val[0] = (int16x8_t)vqtbl4q_s8(v31, (int8x16_t)xmmword_208F05040);
        v30.val[1] = (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)((char *)&v32 + 16), (int8x16_t)xmmword_208F05040);
        vst2q_s8(a3, *(int8x16x2_t *)v30.val[0].i8);
        a3 += 32;
        result += 64;
        v22 -= 16;
      }
      while (v22);
      if ((v17 & 0xFFFFFFF0) == v17)
        goto LABEL_26;
      goto LABEL_21;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = result;
  v8 = a3;
  do
  {
LABEL_21:
    v27 = (int)(((*v9 + v9[1] + *v5 + v5[1] + 2) >> 2) * a5) >> 16;
    if (v27 >= 255)
      LOBYTE(v27) = -1;
    *v8 = v27;
    v28 = (int)(((v9[2] + v9[3] + v5[2] + v5[3] + 2) >> 2) * a5) >> 16;
    if (v28 >= 255)
      LOBYTE(v28) = -1;
    v8[1] = v28;
    v8 += 2;
    v9 += 4;
    v5 += 4;
    v7 += 2;
  }
  while (v7 < a4 - 1);
LABEL_26:
  if ((a4 & 1) != 0)
  {
    v29 = (int)(((*v9 + v9[1] + *v5 + v5[1] + 2) >> 2) * a5) >> 16;
    if (v29 >= 255)
      LOBYTE(v29) = -1;
    *v8 = v29;
  }
  return result;
}

unsigned __int16 *ScaleRowDown2Box_16To8_Odd_C(unsigned __int16 *result, uint64_t a2, char *a3, int a4, unsigned int a5)
{
  unsigned __int16 *v5;
  unsigned int v6;
  int v7;
  char *v8;
  unsigned __int16 *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  uint64_t v22;
  const __int16 *v23;
  const __int16 *v24;
  int32x4_t v25;
  uint32x4_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int16x8x4_t v31;
  int8x16x4_t v32;
  int16x8x4_t v33;
  int16x8x4_t v34;
  int16x8x4_t v35;

  v5 = &result[a2];
  v6 = a4 - 3;
  if (a4 < 3)
  {
    v8 = a3;
    v9 = result;
    goto LABEL_26;
  }
  if (v6 >= 0x1E)
  {
    v7 = 0;
    v10 = v6 >> 1;
    v11 = (unint64_t)&a3[2 * v10 + 2];
    v12 = (unint64_t)&result[4 * v10 + 4];
    v13 = v12 + 2 * a2;
    v15 = v12 > (unint64_t)a3 && v11 > (unint64_t)result;
    v16 = (unint64_t)v5 < v11 && v13 > (unint64_t)a3;
    if (!v16 && !v15)
    {
      v17 = v10 + 1;
      v7 = 2 * (v17 & 0xFFFFFFF0);
      v18 = 4 * (v17 & 0xFFFFFFF0);
      v5 = (unsigned __int16 *)((char *)v5 + v18 * 2);
      v9 = &result[v18];
      v8 = &a3[2 * (v17 & 0xFFFFFFF0)];
      v19 = vdupq_n_s32(a5);
      v20.i64[0] = 0x200000002;
      v20.i64[1] = 0x200000002;
      v21.i64[0] = 0xFF000000FFLL;
      v21.i64[1] = 0xFF000000FFLL;
      v22 = v17 & 0xFFFFFFF0;
      do
      {
        v23 = (const __int16 *)result;
        v31 = vld4q_s16(v23);
        v23 += 32;
        v33 = vld4q_s16(v23);
        v24 = (const __int16 *)&result[a2];
        v34 = vld4q_s16(v24);
        v24 += 32;
        v35 = vld4q_s16(v24);
        v25 = vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v31.val[0].i8, *(uint16x4_t *)v31.val[1].i8), *(uint16x4_t *)v34.val[0].i8), *(uint16x4_t *)v34.val[1].i8), v20), 2uLL), v19), 0x10uLL);
        v26 = vaddl_u16(*(uint16x4_t *)v33.val[2].i8, *(uint16x4_t *)v33.val[3].i8);
        v32.val[1] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v31.val[0], (uint16x8_t)v31.val[1]), (uint16x8_t)v34.val[0]), (uint16x8_t)v34.val[1]), v20), 2uLL), v19), 0x10uLL), v21);
        v31.val[1] = (int16x8_t)vaddw_high_u16(vaddl_high_u16((uint16x8_t)v33.val[2], (uint16x8_t)v33.val[3]), (uint16x8_t)v35.val[2]);
        v32.val[3] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v33.val[0], (uint16x8_t)v33.val[1]), (uint16x8_t)v35.val[0]), (uint16x8_t)v35.val[1]), v20), 2uLL), v19), 0x10uLL), v21);
        v32.val[0] = (int8x16_t)vminq_s32(v25, v21);
        v32.val[2] = (int8x16_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v33.val[0].i8, *(uint16x4_t *)v33.val[1].i8), *(uint16x4_t *)v35.val[0].i8), *(uint16x4_t *)v35.val[1].i8), v20), 2uLL), v19), 0x10uLL), v21);
        v33.val[2] = (int16x8_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16(vaddw_high_u16(vaddl_high_u16((uint16x8_t)v31.val[2], (uint16x8_t)v31.val[3]), (uint16x8_t)v34.val[2]), (uint16x8_t)v34.val[3]), v20), 2uLL), v19), 0x10uLL), v21);
        v34.val[0] = (int16x8_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_high_u16((uint32x4_t)v31.val[1], (uint16x8_t)v35.val[3]), v20), 2uLL), v19), 0x10uLL), v21);
        v33.val[1] = (int16x8_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16(vaddl_u16(*(uint16x4_t *)v31.val[2].i8, *(uint16x4_t *)v31.val[3].i8), *(uint16x4_t *)v34.val[2].i8), *(uint16x4_t *)v34.val[3].i8), v20), 2uLL), v19), 0x10uLL), v21);
        v33.val[3] = (int16x8_t)vminq_s32(vshrq_n_s32(vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vaddw_u16(v26, *(uint16x4_t *)v35.val[2].i8), *(uint16x4_t *)v35.val[3].i8), v20), 2uLL), v19), 0x10uLL), v21);
        v31.val[0] = (int16x8_t)vqtbl4q_s8(v32, (int8x16_t)xmmword_208F05040);
        v31.val[1] = (int16x8_t)vqtbl4q_s8(*(int8x16x4_t *)((char *)&v33 + 16), (int8x16_t)xmmword_208F05040);
        vst2q_s8(a3, *(int8x16x2_t *)v31.val[0].i8);
        a3 += 32;
        result += 64;
        v22 -= 16;
      }
      while (v22);
      if ((v17 & 0xFFFFFFF0) == v17)
        goto LABEL_26;
      goto LABEL_21;
    }
  }
  else
  {
    v7 = 0;
  }
  v9 = result;
  v8 = a3;
  do
  {
LABEL_21:
    v27 = (int)(((*v9 + v9[1] + *v5 + v5[1] + 2) >> 2) * a5) >> 16;
    if (v27 >= 255)
      LOBYTE(v27) = -1;
    *v8 = v27;
    v28 = (int)(((v9[2] + v9[3] + v5[2] + v5[3] + 2) >> 2) * a5) >> 16;
    if (v28 >= 255)
      LOBYTE(v28) = -1;
    v8[1] = v28;
    v8 += 2;
    v9 += 4;
    v5 += 4;
    v7 += 2;
  }
  while (v7 < a4 - 2);
LABEL_26:
  if ((a4 & 1) == 0)
  {
    v29 = (int)(((*v9 + v9[1] + *v5 + v5[1] + 2) >> 2) * a5) >> 16;
    if (v29 >= 255)
      LOBYTE(v29) = -1;
    *v8++ = v29;
    v9 += 2;
    v5 += 2;
  }
  v30 = (int)(((*v9 + *v5 + 1) >> 1) * a5) >> 16;
  if (v30 >= 255)
    LOBYTE(v30) = -1;
  *v8 = v30;
  return result;
}

char *ScaleRowDown4_C(char *result, uint64_t a2, char *a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int8 *v12;
  int8x8x2_t v13;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    if (v4 >= 0x50 && ((v5 = v4 >> 1, &result[8 * v5 + 7] <= a3) || result + 2 >= &a3[2 * v5 + 2]))
    {
      v7 = v5 + 1;
      v8 = v7 & 7;
      if ((v7 & 7) == 0)
        v8 = 8;
      v9 = v7 - v8;
      v6 = 2 * v9;
      v10 = &result[8 * v9];
      v11 = &a3[2 * v9];
      v12 = result + 34;
      do
      {
        v13.val[0].i8[0] = *(v12 - 32);
        v13.val[0].i8[1] = *(v12 - 24);
        v13.val[0].i8[2] = *(v12 - 16);
        v13.val[0].i8[3] = *(v12 - 8);
        v13.val[0].i8[4] = *v12;
        v13.val[0].i8[5] = v12[8];
        v13.val[0].i8[6] = v12[16];
        v13.val[0].i8[7] = v12[24];
        v13.val[1].i8[0] = *(v12 - 28);
        v13.val[1].i8[1] = *(v12 - 20);
        v13.val[1].i8[2] = *(v12 - 12);
        v13.val[1].i8[3] = *(v12 - 4);
        v13.val[1].i8[4] = v12[4];
        v13.val[1].i8[5] = v12[12];
        v13.val[1].i8[6] = v12[20];
        v13.val[1].i8[7] = v12[28];
        vst2_s8(a3, v13);
        a3 += 16;
        v12 += 64;
        v9 -= 8;
      }
      while (v9);
      result = v10;
      a3 = v11;
    }
    else
    {
      v6 = 0;
    }
    do
    {
      *a3 = result[2];
      a3[1] = result[6];
      a3 += 2;
      result += 8;
      v6 += 2;
    }
    while (v6 < a4 - 1);
  }
  if ((a4 & 1) != 0)
    *a3 = result[2];
  return result;
}

float ScaleRowDown4Box_C(unsigned __int8 *a1, uint64_t a2, _BYTE *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint8x8_t v8;
  uint8x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  float result;

  v4 = 2 * a2;
  if (a4 < 2)
  {
    if ((a4 & 1) == 0)
      return result;
LABEL_7:
    v8.i32[0] = *(_DWORD *)a1;
    v8.i32[1] = *(_DWORD *)&a1[a2];
    v9.i32[0] = *(_DWORD *)&a1[2 * a2];
    v10 = vmovl_u8(v8);
    v9.i32[1] = *(_DWORD *)&a1[2 * a2 + a2];
    v11 = vmovl_u8(v9);
    result = COERCE_FLOAT(vaddvq_s32(vaddq_s32((int32x4_t)vaddl_u16(*(uint16x4_t *)v10.i8, *(uint16x4_t *)v11.i8), (int32x4_t)vaddl_high_u16(v10, v11))));
    *a3 = (LODWORD(result) + 8) >> 4;
    return result;
  }
  v5 = 0;
  v6 = 3 * a2;
  do
  {
    v7 = &a3[v5];
    *v7 = (*a1
         + a1[1]
         + a1[2]
         + a1[3]
         + a1[a2]
         + a1[a2 + 1]
         + a1[a2 + 2]
         + a1[a2 + 3]
         + a1[v4]
         + a1[v4 + 1]
         + a1[v4 + 2]
         + a1[v4 + 3]
         + a1[v6]
         + a1[v6 + 1]
         + a1[v6 + 2]
         + a1[v6 + 3]
         + 8) >> 4;
    v7[1] = (a1[4]
           + a1[5]
           + a1[6]
           + a1[7]
           + a1[a2 + 4]
           + a1[a2 + 5]
           + a1[a2 + 6]
           + a1[a2 + 7]
           + a1[v4 + 4]
           + a1[v4 + 5]
           + a1[v4 + 6]
           + a1[v4 + 7]
           + a1[v6 + 4]
           + a1[v6 + 5]
           + a1[v6 + 6]
           + a1[v6 + 7]
           + 8) >> 4;
    a1 += 8;
    v5 += 2;
  }
  while ((int)v5 < a4 - 1);
  a3 += v5;
  if ((a4 & 1) != 0)
    goto LABEL_7;
  return result;
}

unint64_t ScaleRowDown34_C(unint64_t result, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _BYTE *v9;
  _BYTE *v10;
  const char *v11;
  uint64_t v12;
  char *v13;
  const char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  const char *v19;
  int8x8x4_t v20;
  int8x16x4_t v21;
  int8x16x4_t v22;

  if (a4 >= 1)
  {
    if (a4 < 0x16
      || ((v4 = (a4 - 1) / 3uLL, result + 4 * v4 + 4 > a3) ? (v5 = 3 * v4 + a3 + 3 > result) : (v5 = 0), v5))
    {
      v8 = 0;
      v9 = (_BYTE *)result;
      v10 = (_BYTE *)a3;
      goto LABEL_10;
    }
    v6 = (v4 + 1);
    if (a4 < 0x5E)
    {
      v7 = 0;
      goto LABEL_16;
    }
    v7 = v6 & 0x7FFFFFE0;
    v11 = (const char *)(result + 64);
    v12 = v7;
    v13 = (char *)a3;
    do
    {
      v14 = v11 - 64;
      v21 = vld4q_s8(v14);
      v22 = vld4q_s8(v11);
      v21.val[2] = v21.val[3];
      v22.val[2] = v22.val[3];
      v15 = v13 + 96;
      vst3q_s8(v13, *(int8x16x3_t *)v21.val[0].i8);
      v16 = v13 + 48;
      vst3q_s8(v16, *(int8x16x3_t *)v22.val[0].i8);
      v11 += 128;
      v13 = v15;
      v12 -= 32;
    }
    while (v12);
    if (v7 != v6)
    {
      if ((v6 & 0x18) == 0)
      {
        v10 = (_BYTE *)(a3 + 3 * v7);
        v9 = (_BYTE *)(result + 4 * v7);
        v8 = 3 * v7;
        goto LABEL_10;
      }
LABEL_16:
      v8 = 3 * (v6 & 0x7FFFFFF8);
      v9 = (_BYTE *)(result + 4 * (v6 & 0x7FFFFFF8));
      v10 = (_BYTE *)(a3 + 3 * (v6 & 0x7FFFFFF8));
      v17 = (char *)(a3 + 3 * v7);
      v18 = v7 - (v6 & 0x7FFFFFF8);
      v19 = (const char *)(result + 4 * v7);
      do
      {
        v20 = vld4_s8(v19);
        v19 += 32;
        v20.val[2] = v20.val[3];
        vst3_s8(v17, *(int8x8x3_t *)v20.val[0].i8);
        v17 += 24;
        v18 += 8;
      }
      while (v18);
      if ((v6 & 0x7FFFFFF8) == v6)
        return result;
      do
      {
LABEL_10:
        *v10 = *v9;
        v10[1] = v9[1];
        v10[2] = v9[3];
        v10 += 3;
        v9 += 4;
        v8 += 3;
      }
      while (v8 < a4);
    }
  }
  return result;
}

unint64_t ScaleRowDown34_0_Box_C(unint64_t result, uint64_t a2, _BYTE *a3, int a4)
{
  int8x16_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  char *v21;
  uint64_t v22;
  int32x4_t v23;
  uint16x8_t v24;
  int32x4_t v25;
  const char *v26;
  const char *v27;
  uint8x8_t v28;
  uint16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int32x4_t v33;
  uint32x4_t v34;
  uint32x4_t v35;
  int16x8_t v36;
  int16x8_t v37;
  uint8x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint8x8_t v43;
  uint16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  uint32x4_t v49;
  int16x8_t v50;
  int16x8_t v51;
  uint8x8_t v52;
  uint16x8_t v53;
  int32x4_t v54;
  uint32x4_t v55;
  uint32x4_t v56;
  int v57;
  unsigned int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  int32x4_t v64;
  uint64_t v65;
  char *v66;
  const char *v67;
  const char *v68;
  uint16x8_t v69;
  uint16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  uint16x8_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int16x8_t v79;
  uint32x4_t v80;
  int32x4_t v81;
  uint16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int16x8_t v85;
  int32x4_t v86;
  uint8x8_t v87;
  uint8x8_t v88;
  uint16x8_t v89;
  uint16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int16x8_t v98;
  int32x4_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int32x4_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int32x4_t v105;
  int32x4_t v106;
  int32x4_t v107;
  uint16x8_t v108;
  uint16x8_t v109;
  uint16x8_t v110;
  uint16x8_t v111;
  uint16x8_t v112;
  uint16x8_t v113;
  uint16x8_t v114;
  uint16x8_t v115;
  uint32x4_t v116;
  int16x8_t v117;
  int8x16x2_t v118;
  int8x16x2_t v119;
  int8x16x3_t v120;
  int8x16x4_t v121;
  int8x16x4_t v122;
  int8x16x4_t v123;

  if (a4 >= 1)
  {
    v8 = (unsigned __int8 *)(result + a2);
    if (a4 < 0x16)
    {
      v9 = 0;
LABEL_21:
      v18 = a3;
      v20 = (unsigned __int8 *)result;
      goto LABEL_22;
    }
    v9 = 0;
    v10 = (a4 - 1) / 3uLL;
    v11 = (unint64_t)&a3[3 * v10 + 3];
    v12 = result + 4 * v10 + 4;
    v14 = v12 > (unint64_t)a3 && v11 > result;
    v15 = (unint64_t)v8 < v11 && v12 + a2 > (unint64_t)a3;
    if (v15 || v14)
      goto LABEL_21;
    v16 = (v10 + 1);
    if (a4 >= 0x2E)
    {
      v17 = v16 & 0x7FFFFFF0;
      v64.i64[0] = 0x200000002;
      v64.i64[1] = 0x200000002;
      v65 = v17;
      v66 = a3;
      v67 = (const char *)result;
      do
      {
        v68 = &v67[a2];
        v122 = vld4q_s8(v67);
        v67 += 64;
        v123 = vld4q_s8(v68);
        v69 = vmovl_u8(*(uint8x8_t *)v122.val[0].i8);
        v70 = vmovl_high_u8((uint8x16_t)v122.val[0]);
        v71 = (int16x8_t)vqtbl1q_s8(v122.val[1], (int8x16_t)xmmword_208F04F50);
        v72 = (int16x8_t)vqtbl1q_s8(v122.val[1], (int8x16_t)xmmword_208F04F40);
        v73 = (int16x8_t)vqtbl1q_s8(v122.val[1], (int8x16_t)xmmword_208F04F30);
        v74 = (int16x8_t)vqtbl1q_s8(v122.val[1], (int8x16_t)xmmword_208F04F20);
        v75 = vuzp1q_s16(v73, v74);
        v76.i64[0] = 0x3000300030003;
        v76.i64[1] = 0x3000300030003;
        v77 = (int32x4_t)vmlal_high_u16((uint32x4_t)v74, v70, v76);
        v78 = (int32x4_t)vmlal_u16((uint32x4_t)v73, *(uint16x4_t *)v70.i8, (uint16x4_t)0x3000300030003);
        v79 = vuzp1q_s16(v71, v72);
        v80 = (uint32x4_t)v71;
        v81 = (int32x4_t)vmlal_high_u16((uint32x4_t)v72, v69, v76);
        v82.i64[0] = 0x3000300030003;
        v82.i64[1] = 0x3000300030003;
        v117 = (int16x8_t)vqtbl1q_s8(v122.val[2], (int8x16_t)xmmword_208F04F40);
        v83 = (int16x8_t)vqtbl1q_s8(v122.val[2], (int8x16_t)xmmword_208F04F50);
        v84 = (int16x8_t)vqtbl1q_s8(v122.val[2], (int8x16_t)xmmword_208F04F20);
        v85 = (int16x8_t)vqtbl1q_s8(v122.val[2], (int8x16_t)xmmword_208F04F30);
        v86 = (int32x4_t)vmlal_u16(v80, *(uint16x4_t *)v69.i8, (uint16x4_t)0x3000300030003);
        v87 = vrhadd_u8((uint8x8_t)vmovn_s16(v75), (uint8x8_t)vmovn_s16(vuzp1q_s16(v85, v84)));
        v88 = vrhadd_u8((uint8x8_t)vmovn_s16(v79), (uint8x8_t)vmovn_s16(vuzp1q_s16(v83, v117)));
        v89 = vmovl_u8(*(uint8x8_t *)v123.val[0].i8);
        v90 = vmovl_high_u8((uint8x16_t)v123.val[0]);
        v91 = (int16x8_t)vqtbl1q_s8(v123.val[1], (int8x16_t)xmmword_208F04F50);
        v92 = (int16x8_t)vqtbl1q_s8(v123.val[1], (int8x16_t)xmmword_208F04F40);
        v93 = (int16x8_t)vqtbl1q_s8(v123.val[1], (int8x16_t)xmmword_208F04F30);
        v94 = (int16x8_t)vqtbl1q_s8(v123.val[1], (int8x16_t)xmmword_208F04F20);
        v95 = vuzp1q_s16(v93, v94);
        v96 = (int32x4_t)vmlal_high_u16((uint32x4_t)v94, v90, v82);
        v97 = (int32x4_t)vmlal_u16((uint32x4_t)v93, *(uint16x4_t *)v90.i8, (uint16x4_t)0x3000300030003);
        v98 = vuzp1q_s16(v91, v92);
        v99 = (int32x4_t)vmlal_u16((uint32x4_t)v91, *(uint16x4_t *)v89.i8, (uint16x4_t)0x3000300030003);
        v100 = (int16x8_t)vqtbl1q_s8(v123.val[2], (int8x16_t)xmmword_208F04F20);
        v101 = (int16x8_t)vqtbl1q_s8(v123.val[2], (int8x16_t)xmmword_208F04F30);
        v102 = (int32x4_t)vmlal_high_u16((uint32x4_t)v92, v89, v82);
        v103 = (int16x8_t)vqtbl1q_s8(v123.val[2], (int8x16_t)xmmword_208F04F40);
        v104 = (int16x8_t)vqtbl1q_s8(v123.val[2], (int8x16_t)xmmword_208F04F50);
        v82.i64[0] = 0x300000003;
        v82.i64[1] = 0x300000003;
        v105 = (int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v77, v64), 2uLL), (int32x4_t)v82), (uint32x4_t)vaddq_s32(v96, v64), 2uLL);
        v106 = (int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v86, v64), 2uLL), (int32x4_t)v82), (uint32x4_t)vaddq_s32(v99, v64), 2uLL);
        v107 = (int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v81, v64), 2uLL), (int32x4_t)v82), (uint32x4_t)vaddq_s32(v102, v64), 2uLL);
        v121.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v105, v64), 2uLL);
        v121.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v78, v64), 2uLL), (int32x4_t)v82), (uint32x4_t)vaddq_s32(v97, v64), 2uLL), v64), 2uLL);
        v108 = vmovl_u8(v87);
        v109 = vmovl_u8(v88);
        v110 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v98), (uint8x8_t)vmovn_s16(vuzp1q_s16(v104, v103))));
        v111 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v95), (uint8x8_t)vmovn_s16(vuzp1q_s16(v101, v100))));
        v121.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v107, v64), 2uLL);
        v121.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v106, v64), 2uLL);
        v120.val[0] = vqtbl4q_s8(v121, (int8x16_t)xmmword_208F05040);
        v121.val[1].i64[0] = 0x3000300030003;
        v121.val[1].i64[1] = 0x3000300030003;
        v121.val[3] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16(v111), v108, (uint16x8_t)v121.val[1]), v64), 2uLL);
        v121.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v108.i8, (uint16x4_t)0x3000300030003), *(uint16x4_t *)v111.i8), v64), 2uLL);
        v121.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16(v110), v109, (uint16x8_t)v121.val[1]), v64), 2uLL);
        v121.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v109.i8, (uint16x4_t)0x3000300030003), *(uint16x4_t *)v110.i8), v64), 2uLL);
        v120.val[1] = vqtbl4q_s8(v121, (int8x16_t)xmmword_208F05040);
        v112 = vmovl_u8(*(uint8x8_t *)v122.val[3].i8);
        v113 = vmovl_high_u8((uint8x16_t)v122.val[3]);
        v114 = vmovl_u8(*(uint8x8_t *)v123.val[3].i8);
        v115 = vmovl_high_u8((uint8x16_t)v123.val[3]);
        v122.val[0].i64[0] = 0x3000300030003;
        v122.val[0].i64[1] = 0x3000300030003;
        v6 = (int32x4_t)vmlal_high_u16((uint32x4_t)v84, v113, (uint16x8_t)v122.val[0]);
        v7 = (int32x4_t)vmlal_u16((uint32x4_t)v85, *(uint16x4_t *)v113.i8, (uint16x4_t)0x3000300030003);
        v122.val[2] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v6, v64), 2uLL), (int32x4_t)v82), (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v100, v115, (uint16x8_t)v122.val[0]), v64), 2uLL), v64), 2uLL);
        v5 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32(v7, v64), 2uLL), (int32x4_t)v82), (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v101, *(uint16x4_t *)v115.i8, (uint16x4_t)0x3000300030003), v64), 2uLL), v64), 2uLL);
        v4 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v117, v112, (uint16x8_t)v122.val[0]), v64), 2uLL), (int32x4_t)v82), (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v103, v114, (uint16x8_t)v122.val[0]), v64), 2uLL), v64), 2uLL);
        v116 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v83, *(uint16x4_t *)v112.i8, (uint16x4_t)0x3000300030003), v64), 2uLL), (int32x4_t)v82), (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v104, *(uint16x4_t *)v114.i8, (uint16x4_t)0x3000300030003), v64), 2uLL),
                               v64),
                 2uLL);
        v120.val[2] = vqtbl4q_s8(*(int8x16x4_t *)(&v4 - 1), (int8x16_t)xmmword_208F05040);
        vst3q_s8(v66, v120);
        v66 += 48;
        v65 -= 16;
      }
      while (v65);
      if (v17 == v16)
        return result;
      if ((v16 & 8) == 0)
      {
        v9 = 3 * v17;
        v8 += 4 * v17;
        v20 = (unsigned __int8 *)(result + 4 * v17);
        v18 = &a3[3 * v17];
        do
        {
LABEL_22:
          v57 = v20[1];
          v58 = (v57 + 3 * *v20 + 2) >> 2;
          v59 = v20[2];
          v60 = (v57 + v59 + 1) >> 1;
          v61 = (v59 + 3 * v20[3] + 2) >> 2;
          v62 = v8[1];
          v63 = v8[2];
          result = 3 * v8[3];
          *v18 = (3 * v58 + ((v62 + 3 * *v8 + 2) >> 2) + 2) >> 2;
          v18[1] = (3 * v60 + ((v62 + v63 + 1) >> 1) + 2) >> 2;
          v18[2] = (3 * v61 + ((v63 + result + 2) >> 2) + 2) >> 2;
          v18 += 3;
          v20 += 4;
          v8 += 4;
          v9 += 3;
        }
        while (v9 < a4);
        return result;
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = &a3[3 * (v16 & 0x7FFFFFF8)];
    v19 = 4 * (v16 & 0x7FFFFFF8);
    v20 = (unsigned __int8 *)(result + v19);
    v8 += v19;
    v9 = 3 * (v16 & 0x7FFFFFF8);
    v21 = &a3[3 * v17];
    v22 = v17 - (v16 & 0x7FFFFFF8);
    v23.i64[0] = 0x300000003;
    v23.i64[1] = 0x300000003;
    v24.i64[0] = 0x3000300030003;
    v24.i64[1] = 0x3000300030003;
    v25.i64[0] = 0x200000002;
    v25.i64[1] = 0x200000002;
    v26 = (const char *)(result + 4 * v17);
    do
    {
      v27 = &v26[a2];
      *(int8x8x4_t *)((char *)&v4 - 8) = vld4_s8(v26);
      v26 += 32;
      v29 = vmovl_u8(v28);
      *(int8x8x4_t *)((char *)&v6 - 8) = vld4_s8(v27);
      v30 = (int16x8_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_208F04F50);
      v31 = (int16x8_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_208F04F40);
      v32 = vuzp1q_s16(v30, v31);
      v33 = (int32x4_t)vmlal_high_u16((uint32x4_t)v31, v29, v24);
      v34 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v30, *(uint16x4_t *)v29.i8, (uint16x4_t)0x3000300030003), v25);
      v35 = (uint32x4_t)vaddq_s32(v33, v25);
      v36 = (int16x8_t)vqtbl1q_s8((int8x16_t)v5, (int8x16_t)xmmword_208F04F40);
      v37 = (int16x8_t)vqtbl1q_s8((int8x16_t)v5, (int8x16_t)xmmword_208F04F50);
      v39 = vmovl_u8(v38);
      v40 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v32), (uint8x8_t)vmovn_s16(vuzp1q_s16(v37, v36))));
      v5 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v36, v39, v24), v25), 2uLL);
      v41 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v37, *(uint16x4_t *)v39.i8, (uint16x4_t)0x3000300030003), v25), 2uLL);
      v42 = (int32x4_t)vshrq_n_u32(v35, 2uLL);
      v44 = vmovl_u8(v43);
      v45 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, (int8x16_t)xmmword_208F04F50);
      v46 = (int16x8_t)vqtbl1q_s8((int8x16_t)v6, (int8x16_t)xmmword_208F04F40);
      v47 = vuzp1q_s16(v45, v46);
      v48 = (int32x4_t)vmlal_high_u16((uint32x4_t)v46, v44, v24);
      v49 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v45, *(uint16x4_t *)v44.i8, (uint16x4_t)0x3000300030003), v25);
      v50 = (int16x8_t)vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_208F04F40);
      v51 = (int16x8_t)vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_208F04F50);
      *(uint8x8_t *)v47.i8 = vrhadd_u8((uint8x8_t)vmovn_s16(v47), (uint8x8_t)vmovn_s16(vuzp1q_s16(v51, v50)));
      v53 = vmovl_u8(v52);
      v54 = (int32x4_t)vmlal_high_u16((uint32x4_t)v50, v53, v24);
      v6 = (int32x4_t)vmovl_u8(*(uint8x8_t *)v47.i8);
      v55 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v51, *(uint16x4_t *)v53.i8, (uint16x4_t)0x3000300030003), v25);
      v7 = vaddq_s32(v54, v25);
      v118.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32(v42, v23), (uint32x4_t)vaddq_s32(v48, v25), 2uLL), v25), 2uLL);
      v118.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32((int32x4_t)vshrq_n_u32(v34, 2uLL), v23), v49, 2uLL), v25), 2uLL);
      v118.val[0].i64[0] = vqtbl2q_s8(v118, (int8x16_t)xmmword_208F05050).u64[0];
      v119.val[1] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16(vmovl_high_u16((uint16x8_t)v6), v40, v24), v25), 2uLL);
      v119.val[0] = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vaddw_u16(vmull_u16(*(uint16x4_t *)v40.i8, (uint16x4_t)0x3000300030003), *(uint16x4_t *)v6.i8), v25), 2uLL);
      v118.val[1].i64[0] = vqtbl2q_s8(v119, (int8x16_t)xmmword_208F05050).u64[0];
      v4 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32(v5, v23), (uint32x4_t)v7, 2uLL), v25), 2uLL);
      v56 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vsraq_n_u32((uint32x4_t)vmulq_s32(v41, v23), v55, 2uLL), v25), 2uLL);
      v48.i64[0] = vqtbl2q_s8(*(int8x16x2_t *)(&v4 - 1), (int8x16_t)xmmword_208F05050).u64[0];
      vst3_s8(v21, *(int8x8x3_t *)(&v48 - 1));
      v21 += 24;
      v22 += 8;
    }
    while (v22);
    if ((v16 & 0x7FFFFFF8) != v16)
      goto LABEL_22;
  }
  return result;
}

unint64_t ScaleRowDown34_1_Box_C(unint64_t result, uint64_t a2, _BYTE *a3, int a4)
{
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  unsigned __int8 *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  char *v21;
  uint64_t v22;
  uint16x8_t v23;
  int32x4_t v24;
  const char *v25;
  const char *v26;
  uint8x8_t v27;
  uint16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  int16x8_t v31;
  int32x4_t v32;
  uint32x4_t v33;
  uint32x4_t v34;
  int16x8_t v35;
  int16x8_t v36;
  uint16x8_t v37;
  uint8x8_t v38;
  uint16x8_t v39;
  uint32x4_t v40;
  uint8x8_t v41;
  uint16x8_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int32x4_t v46;
  uint32x4_t v47;
  uint32x4_t v48;
  int16x8_t v49;
  int16x8_t v50;
  uint16x8_t v51;
  uint8x8_t v52;
  uint16x8_t v53;
  uint32x4_t v54;
  unint64_t v55;
  int v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v62;
  uint64_t v63;
  char *v64;
  const char *v65;
  int32x4_t v66;
  const char *v67;
  uint16x8_t v68;
  uint16x8_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  uint16x8_t v75;
  int16x8_t v76;
  uint32x4_t v77;
  uint32x4_t v78;
  uint32x4_t v79;
  int16x8_t v80;
  uint16x8_t v81;
  uint16x8_t v82;
  uint16x8_t v83;
  uint16x8_t v84;
  int16x8_t v85;
  int16x8_t v86;
  int16x8_t v87;
  int16x8_t v88;
  int16x8_t v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  uint16x8_t v94;
  uint16x8_t v95;
  uint32x4_t v96;
  uint32x4_t v97;
  uint32x4_t v98;
  uint16x8_t v99;
  uint16x8_t v100;
  uint32x4_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int16x8_t v104;
  int8x16x2_t v105;
  int8x16x2_t v106;
  int8x16x4_t v107;
  int8x16x4_t v108;
  int8x16x4_t v109;

  if (a4 >= 1)
  {
    v8 = (unsigned __int8 *)(result + a2);
    if (a4 < 0x16)
    {
      v9 = 0;
LABEL_21:
      v18 = a3;
      v20 = (unsigned __int8 *)result;
      goto LABEL_22;
    }
    v9 = 0;
    v10 = (a4 - 1) / 3uLL;
    v11 = (unint64_t)&a3[3 * v10 + 3];
    v12 = result + 4 * v10 + 4;
    v14 = v12 > (unint64_t)a3 && v11 > result;
    v15 = (unint64_t)v8 < v11 && v12 + a2 > (unint64_t)a3;
    if (v15 || v14)
      goto LABEL_21;
    v16 = (v10 + 1);
    if (a4 >= 0x2E)
    {
      v17 = v16 & 0x7FFFFFF0;
      v63 = v17;
      v64 = a3;
      v65 = (const char *)result;
      v66.i64[0] = 0x200000002;
      v66.i64[1] = 0x200000002;
      do
      {
        v67 = &v65[a2];
        v108 = vld4q_s8(v65);
        v65 += 64;
        v109 = vld4q_s8(v67);
        v68 = vmovl_high_u8((uint8x16_t)v108.val[0]);
        v69 = vmovl_u8(*(uint8x8_t *)v108.val[0].i8);
        v70 = (int16x8_t)vqtbl1q_s8(v108.val[1], (int8x16_t)xmmword_208F04F20);
        v71 = (int16x8_t)vqtbl1q_s8(v108.val[1], (int8x16_t)xmmword_208F04F30);
        v72 = (int16x8_t)vqtbl1q_s8(v108.val[1], (int8x16_t)xmmword_208F04F40);
        v73 = (int16x8_t)vqtbl1q_s8(v108.val[1], (int8x16_t)xmmword_208F04F50);
        v74 = vuzp1q_s16(v73, v72);
        v75.i64[0] = 0x3000300030003;
        v75.i64[1] = 0x3000300030003;
        v76 = vuzp1q_s16(v71, v70);
        v77 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v70, v68, v75), v66);
        v78 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v71, *(uint16x4_t *)v68.i8, (uint16x4_t)0x3000300030003), v66);
        v79 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v72, v69, v75), v66), 2uLL);
        v103 = (int16x8_t)vqtbl1q_s8(v108.val[2], (int8x16_t)xmmword_208F04F40);
        v104 = (int16x8_t)vqtbl1q_s8(v108.val[2], (int8x16_t)xmmword_208F04F50);
        v101 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v73, *(uint16x4_t *)v69.i8, (uint16x4_t)0x3000300030003), v66), 2uLL);
        v102 = (int16x8_t)vqtbl1q_s8(v108.val[2], (int8x16_t)xmmword_208F04F20);
        v80 = (int16x8_t)vqtbl1q_s8(v108.val[2], (int8x16_t)xmmword_208F04F30);
        v81 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v76), (uint8x8_t)vmovn_s16(vuzp1q_s16(v80, v102))));
        v82 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v74), (uint8x8_t)vmovn_s16(vuzp1q_s16(v104, v103))));
        v83 = vmovl_high_u8((uint8x16_t)v109.val[0]);
        v84 = vmovl_u8(*(uint8x8_t *)v109.val[0].i8);
        v85 = (int16x8_t)vqtbl1q_s8(v109.val[1], (int8x16_t)xmmword_208F04F20);
        v86 = (int16x8_t)vqtbl1q_s8(v109.val[1], (int8x16_t)xmmword_208F04F30);
        v87 = (int16x8_t)vqtbl1q_s8(v109.val[1], (int8x16_t)xmmword_208F04F40);
        v107.val[3] = (int8x16_t)vrhaddq_u32(vshrq_n_u32(v77, 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v85, v83, v75), v66), 2uLL));
        v107.val[2] = (int8x16_t)vrhaddq_u32(vshrq_n_u32(v78, 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v86, *(uint16x4_t *)v83.i8, (uint16x4_t)0x3000300030003), v66), 2uLL));
        v88 = (int16x8_t)vqtbl1q_s8(v109.val[1], (int8x16_t)xmmword_208F04F50);
        v89 = vuzp1q_s16(v88, v87);
        v90 = (int16x8_t)vqtbl1q_s8(v109.val[2], (int8x16_t)xmmword_208F04F40);
        v107.val[1] = (int8x16_t)vrhaddq_u32(v79, vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v87, v84, v75), v66), 2uLL));
        v91 = (int16x8_t)vqtbl1q_s8(v109.val[2], (int8x16_t)xmmword_208F04F50);
        v92 = (int16x8_t)vqtbl1q_s8(v109.val[2], (int8x16_t)xmmword_208F04F20);
        v107.val[0] = (int8x16_t)vrhaddq_u32(v101, vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v88, *(uint16x4_t *)v84.i8, (uint16x4_t)0x3000300030003), v66), 2uLL));
        v93 = (int16x8_t)vqtbl1q_s8(v109.val[2], (int8x16_t)xmmword_208F04F30);
        v94 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(vuzp1q_s16(v86, v85)), (uint8x8_t)vmovn_s16(vuzp1q_s16(v93, v92))));
        v95 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v89), (uint8x8_t)vmovn_s16(vuzp1q_s16(v91, v90))));
        v96 = (uint32x4_t)vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v94.i8), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v81.i8)));
        v107.val[0] = vqtbl4q_s8(v107, (int8x16_t)xmmword_208F05040);
        v97 = vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_high_u16(v94), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_high_u16(v81))), 1uLL);
        v7 = (int8x16_t)vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_high_u16(v95), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_high_u16(v82))), 1uLL);
        v98 = vshrq_n_u32(v96, 1uLL);
        v6 = (int8x16_t)vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v95.i8), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v82.i8))), 1uLL);
        v107.val[1] = vqtbl4q_s8(*(int8x16x4_t *)v6.i8, (int8x16_t)xmmword_208F05040);
        v99 = vmovl_high_u8((uint8x16_t)v108.val[3]);
        v107.val[3] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v108.val[3].i8);
        v108.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v109.val[3]);
        v4 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v109.val[3].i8);
        v100.i64[0] = 0x3000300030003;
        v100.i64[1] = 0x3000300030003;
        v5 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v93, *(uint16x4_t *)v108.val[0].i8, (uint16x4_t)0x3000300030003), v66), 2uLL);
        v109.val[3] = (int8x16_t)vrhaddq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v102, v99, v100), v66), 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v92, (uint16x8_t)v108.val[0], v100), v66), 2uLL));
        v109.val[2] = (int8x16_t)vrhaddq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v80, *(uint16x4_t *)v99.i8, (uint16x4_t)0x3000300030003), v66), 2uLL), (uint32x4_t)v5);
        v109.val[1] = (int8x16_t)vrhaddq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v103, (uint16x8_t)v107.val[3], v100), v66), 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v90, (uint16x8_t)v4, v100), v66), 2uLL));
        v109.val[0] = (int8x16_t)vrhaddq_u32(vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v104, *(uint16x4_t *)v107.val[3].i8, (uint16x4_t)0x3000300030003), v66), 2uLL), vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v91, *(uint16x4_t *)v4.i8, (uint16x4_t)0x3000300030003), v66), 2uLL));
        v107.val[2] = vqtbl4q_s8(v109, (int8x16_t)xmmword_208F05040);
        vst3q_s8(v64, *(int8x16x3_t *)v107.val[0].i8);
        v64 += 48;
        v63 -= 16;
      }
      while (v63);
      if (v17 == v16)
        return result;
      if ((v16 & 8) == 0)
      {
        v9 = 3 * v17;
        v8 += 4 * v17;
        v20 = (unsigned __int8 *)(result + 4 * v17);
        v18 = &a3[3 * v17];
        do
        {
LABEL_22:
          v56 = v20[1];
          v57 = (v56 + 3 * *v20 + 2) >> 2;
          v58 = v20[2];
          v59 = (v56 + v58 + 1) >> 1;
          v60 = (v58 + 3 * v20[3] + 2) >> 2;
          v61 = v8[1];
          v62 = v8[2];
          result = 3 * v8[3];
          *v18 = (v57 + ((v61 + 3 * *v8 + 2) >> 2) + 1) >> 1;
          v18[1] = (v59 + ((v61 + v62 + 1) >> 1) + 1) >> 1;
          v18[2] = (v60 + ((v62 + result + 2) >> 2) + 1) >> 1;
          v18 += 3;
          v20 += 4;
          v8 += 4;
          v9 += 3;
        }
        while (v9 < a4);
        return result;
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = &a3[3 * (v16 & 0x7FFFFFF8)];
    v19 = 4 * (v16 & 0x7FFFFFF8);
    v20 = (unsigned __int8 *)(result + v19);
    v8 += v19;
    v9 = 3 * (v16 & 0x7FFFFFF8);
    v21 = &a3[3 * v17];
    v22 = v17 - (v16 & 0x7FFFFFF8);
    v23.i64[0] = 0x3000300030003;
    v23.i64[1] = 0x3000300030003;
    v24.i64[0] = 0x200000002;
    v24.i64[1] = 0x200000002;
    v25 = (const char *)(result + 4 * v17);
    do
    {
      v26 = &v25[a2];
      *(int8x8x4_t *)((char *)&v4 - 8) = vld4_s8(v25);
      v25 += 32;
      v28 = vmovl_u8(v27);
      v29 = (int16x8_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_208F04F40);
      v30 = (int16x8_t)vqtbl1q_s8(v4, (int8x16_t)xmmword_208F04F50);
      v31 = vuzp1q_s16(v30, v29);
      v32 = (int32x4_t)vmlal_u16((uint32x4_t)v30, *(uint16x4_t *)v28.i8, (uint16x4_t)0x3000300030003);
      v33 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v29, v28, v23), v24);
      v34 = vshrq_n_u32((uint32x4_t)vaddq_s32(v32, v24), 2uLL);
      v35 = (int16x8_t)vqtbl1q_s8(v5, (int8x16_t)xmmword_208F04F40);
      v36 = (int16x8_t)vqtbl1q_s8(v5, (int8x16_t)xmmword_208F04F50);
      v37 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v31), (uint8x8_t)vmovn_s16(vuzp1q_s16(v36, v35))));
      v39 = vmovl_u8(v38);
      *(int8x8x4_t *)((char *)&v6 - 8) = vld4_s8(v26);
      v4 = (int8x16_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v36, *(uint16x4_t *)v39.i8, (uint16x4_t)0x3000300030003), v24), 2uLL);
      v40 = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v35, v39, v23), v24), 2uLL);
      v42 = vmovl_u8(v41);
      v43 = (int16x8_t)vqtbl1q_s8(v6, (int8x16_t)xmmword_208F04F40);
      v44 = (int16x8_t)vqtbl1q_s8(v6, (int8x16_t)xmmword_208F04F50);
      v45 = vuzp1q_s16(v44, v43);
      v46 = (int32x4_t)vmlal_u16((uint32x4_t)v44, *(uint16x4_t *)v42.i8, (uint16x4_t)0x3000300030003);
      v47 = (uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v43, v42, v23), v24);
      v48 = vshrq_n_u32((uint32x4_t)vaddq_s32(v46, v24), 2uLL);
      v49 = (int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_208F04F40);
      v50 = (int16x8_t)vqtbl1q_s8(v7, (int8x16_t)xmmword_208F04F50);
      v51 = vmovl_u8(vrhadd_u8((uint8x8_t)vmovn_s16(v45), (uint8x8_t)vmovn_s16(vuzp1q_s16(v50, v49))));
      v53 = vmovl_u8(v52);
      v106.val[1] = (int8x16_t)vrhaddq_u32(vshrq_n_u32(v33, 2uLL), vshrq_n_u32(v47, 2uLL));
      v106.val[0] = (int8x16_t)vrhaddq_u32(v34, v48);
      v6 = vqtbl2q_s8(v106, (int8x16_t)xmmword_208F05050);
      v54 = vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_high_u16(v51), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_high_u16(v37))), 1uLL);
      v5 = (int8x16_t)vshrq_n_u32((uint32x4_t)vsubq_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v51.i8), (int32x4_t)vmvnq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v37.i8))), 1uLL);
      v7 = vqtbl2q_s8(*(int8x16x2_t *)v5.i8, (int8x16_t)xmmword_208F05050);
      v105.val[1] = (int8x16_t)vrhaddq_u32(v40, vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_high_u16((uint32x4_t)v49, v53, v23), v24), 2uLL));
      v105.val[0] = (int8x16_t)vrhaddq_u32((uint32x4_t)v4, vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vmlal_u16((uint32x4_t)v50, *(uint16x4_t *)v53.i8, (uint16x4_t)0x3000300030003), v24), 2uLL));
      v55 = vqtbl2q_s8(v105, (int8x16_t)xmmword_208F05050).u64[0];
      vst3_s8(v21, *(int8x8x3_t *)v6.i8);
      v21 += 24;
      v22 += 8;
    }
    while (v22);
    if ((v16 & 0x7FFFFFF8) != v16)
      goto LABEL_22;
  }
  return result;
}

_BYTE *ScaleCols_C(_BYTE *result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  _BYTE *v6;

  if (a3 < 2)
  {
    if ((a3 & 1) == 0)
      return result;
LABEL_7:
    *result = *(_BYTE *)(a2 + (a4 >> 16));
    return result;
  }
  v5 = 0;
  do
  {
    v6 = &result[v5];
    *v6 = *(_BYTE *)(a2 + (a4 >> 16));
    v6[1] = *(_BYTE *)(a2 + ((a4 + a5) >> 16));
    a4 += a5 + a5;
    v5 += 2;
  }
  while ((int)v5 < a3 - 1);
  result += v5;
  if ((a3 & 1) != 0)
    goto LABEL_7;
  return result;
}

unint64_t ScaleColsUp2_C(unint64_t result, unint64_t a2, int a3)
{
  unsigned int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  char *v9;
  int8x16_t *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char v14;
  int8x16x2_t v15;
  int8x16x2_t v16;

  v3 = a3 - 2;
  if (a3 < 2)
  {
    v9 = (char *)a2;
    v7 = (_BYTE *)result;
  }
  else
  {
    if (v3 < 0x3E
      || ((v4 = v3 >> 1, v4 + a2 + 1 > result) ? (v5 = result + 2 * v4 + 2 > a2) : (v5 = 0), v5))
    {
      v8 = 0;
      v7 = (_BYTE *)result;
      v9 = (char *)a2;
    }
    else
    {
      v6 = (v4 + 1);
      v7 = (_BYTE *)(result + 2 * (v6 & 0xFFFFFFE0));
      v8 = 2 * (v6 & 0xFFFFFFE0);
      v9 = (char *)(a2 + (v6 & 0xFFFFFFE0));
      v10 = (int8x16_t *)(a2 + 16);
      v11 = (char *)(result + 32);
      v12 = v6 & 0xFFFFFFE0;
      do
      {
        v13 = v11 - 32;
        v15.val[0] = v10[-1];
        v16.val[0] = *v10;
        v15.val[1] = v15.val[0];
        vst2q_s8(v13, v15);
        v16.val[1] = v16.val[0];
        vst2q_s8(v11, v16);
        v10 += 2;
        v11 += 64;
        v12 -= 32;
      }
      while (v12);
      if ((v6 & 0xFFFFFFE0) == v6)
        goto LABEL_14;
    }
    do
    {
      v14 = *v9++;
      *v7 = v14;
      v7[1] = v14;
      v7 += 2;
      v8 += 2;
    }
    while (v8 < a3 - 1);
  }
LABEL_14:
  if ((a3 & 1) != 0)
    *v7 = *v9;
  return result;
}

_BYTE *ScaleFilterCols_C(_BYTE *result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  _BYTE *v6;

  if (a3 < 2)
  {
    if ((a3 & 1) == 0)
      return result;
LABEL_7:
    *result = *(_BYTE *)(a2 + (a4 >> 16))
            + (((*(unsigned __int8 *)(a2 + (a4 >> 16) + 1) - *(unsigned __int8 *)(a2 + (a4 >> 16)))
              * (unsigned __int16)a4
              + 0x8000) >> 16);
    return result;
  }
  v5 = 0;
  do
  {
    v6 = &result[v5];
    *v6 = *(_BYTE *)(a2 + (a4 >> 16))
        + (((*(unsigned __int8 *)(a2 + (a4 >> 16) + 1) - *(unsigned __int8 *)(a2 + (a4 >> 16)))
          * (unsigned __int16)a4
          + 0x8000) >> 16);
    v6[1] = *(_BYTE *)(a2 + ((a4 + a5) >> 16))
          + (((*(unsigned __int8 *)(a2 + ((a4 + a5) >> 16) + 1) - *(unsigned __int8 *)(a2 + ((a4 + a5) >> 16)))
            * (unsigned __int16)(a4 + a5)
            + 0x8000) >> 16);
    a4 += a5 + a5;
    v5 += 2;
  }
  while ((int)v5 < a3 - 1);
  result += v5;
  if ((a3 & 1) != 0)
    goto LABEL_7;
  return result;
}

_BYTE *ScaleFilterCols64_C(_BYTE *result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v5 = a4;
  if (a3 < 2)
  {
    if ((a3 & 1) == 0)
      return result;
LABEL_7:
    *result = *(_BYTE *)(a2 + (v5 >> 16))
            + (((*(unsigned __int8 *)(a2 + (v5 >> 16) + 1) - *(unsigned __int8 *)(a2 + (v5 >> 16)))
              * (unsigned __int16)v5
              + 0x8000) >> 16);
    return result;
  }
  v6 = 0;
  do
  {
    v7 = &result[v6];
    *v7 = *(_BYTE *)(a2 + (v5 >> 16))
        + (((*(unsigned __int8 *)(a2 + (v5 >> 16) + 1) - *(unsigned __int8 *)(a2 + (v5 >> 16)))
          * (unsigned __int16)v5
          + 0x8000) >> 16);
    v7[1] = *(_BYTE *)(a2 + ((v5 + a5) >> 16))
          + (((*(unsigned __int8 *)(a2 + ((v5 + a5) >> 16) + 1) - *(unsigned __int8 *)(a2 + ((v5 + a5) >> 16)))
            * (unsigned __int16)(a5 + v5)
            + 0x8000) >> 16);
    v5 += a5 + (uint64_t)a5;
    v6 += 2;
  }
  while ((int)v6 < a3 - 1);
  result += v6;
  if ((a3 & 1) != 0)
    goto LABEL_7;
  return result;
}

_BYTE *ScaleRowDown38_C(_BYTE *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  _BYTE *v5;

  if (a4 >= 1)
  {
    v4 = 0;
    do
    {
      v5 = (_BYTE *)(a3 + v4);
      *v5 = *result;
      v5[1] = result[3];
      v5[2] = result[6];
      result += 8;
      v4 += 3;
    }
    while ((int)v4 < a4);
  }
  return result;
}

unsigned __int8 *ScaleRowDown38_3_Box_C(unsigned __int8 *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = 2 * a2 + 3;
    v6 = a2 + 7;
    do
    {
      v7 = (_BYTE *)(a3 + v4);
      *v7 = (7281
           * (result[1]
            + *result
            + result[2]
            + result[v6 - 7]
            + result[v6 - 6]
            + result[v6 - 5]
            + result[v5 - 3]
            + result[v5 - 2]
            + result[v5 - 1])) >> 16;
      v7[1] = (7281
             * (result[4]
              + result[3]
              + result[5]
              + result[v6 - 4]
              + result[v6 - 3]
              + result[v6 - 2]
              + result[v5]
              + result[v5 + 1]
              + result[v5 + 2])) >> 16;
      v7[2] = (10922
             * (result[7] + result[6] + result[v6 - 1] + result[v6] + result[v5 + 3] + result[v5 + 4])) >> 16;
      result += 8;
      v4 += 3;
    }
    while ((int)v4 < a4);
  }
  return result;
}

uint64_t ScaleRowDown38_2_Box_C(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  unsigned __int8 *v5;
  _BYTE *v6;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = (unsigned __int8 *)(result + 3);
    do
    {
      v6 = (_BYTE *)(a3 + v4);
      *v6 = (10922 * (*(v5 - 2) + *(v5 - 3) + *(v5 - 1) + v5[a2 - 3] + v5[a2 - 2] + v5[a2 - 1])) >> 16;
      v6[1] = (10922 * (v5[1] + *v5 + v5[2] + v5[a2] + v5[a2 + 1] + v5[a2 + 2])) >> 16;
      v6[2] = (v5[4] + v5[3] + v5[a2 + 3] + v5[a2 + 4]) >> 2;
      v4 += 3;
      v5 += 8;
    }
    while ((int)v4 < a4);
  }
  return result;
}

const char *ScaleAddRow_C(const char *result, __int16 *a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  const char *v6;
  __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *v10;
  int8x16x2_t v11;
  int16x8x2_t v12;
  int16x8x2_t v13;
  int16x8x2_t v14;

  v3 = a3 - 2;
  if (a3 < 2)
  {
    v7 = a2;
    v6 = result;
  }
  else
  {
    if (v3 >= 0x1E && ((v4 = v3 >> 1, &result[2 * v4 + 2] <= (const char *)a2) || &a2[2 * v4 + 2] <= (__int16 *)result))
    {
      v8 = v4 + 1;
      v5 = 2 * (v8 & 0xFFFFFFF0);
      v6 = &result[2 * (v8 & 0xFFFFFFF0)];
      v7 = &a2[2 * (v8 & 0xFFFFFFF0)];
      v9 = v8 & 0xFFFFFFF0;
      do
      {
        v11 = vld2q_s8(result);
        result += 32;
        v10 = a2;
        v12 = vld2q_s16(v10);
        v10 += 16;
        v13 = vld2q_s16(v10);
        v14.val[0] = (int16x8_t)vaddw_high_u8((uint16x8_t)v13.val[0], (uint8x16_t)v11.val[0]);
        v14.val[1] = (int16x8_t)vaddw_high_u8((uint16x8_t)v13.val[1], (uint8x16_t)v11.val[1]);
        v13.val[0] = (int16x8_t)vaddw_u8((uint16x8_t)v12.val[0], *(uint8x8_t *)v11.val[0].i8);
        v13.val[1] = (int16x8_t)vaddw_u8((uint16x8_t)v12.val[1], *(uint8x8_t *)v11.val[1].i8);
        vst2q_s16(a2, v13);
        vst2q_s16(v10, v14);
        a2 += 32;
        v9 -= 16;
      }
      while (v9);
      if ((v8 & 0xFFFFFFF0) == v8)
        goto LABEL_9;
    }
    else
    {
      v5 = 0;
      v6 = result;
      v7 = a2;
    }
    do
    {
      *v7 += *(unsigned __int8 *)v6;
      v7[1] += *((unsigned __int8 *)v6 + 1);
      v6 += 2;
      v7 += 2;
      v5 += 2;
    }
    while (v5 < a3 - 1);
  }
LABEL_9:
  if ((a3 & 1) != 0)
    *v7 += *(unsigned __int8 *)v6;
  return result;
}

uint64_t ScaleARGBRowDown2_C(uint64_t result, uint64_t a2, _DWORD *a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  const float *v12;
  float *v13;
  const float *v14;
  float *v15;
  float32x4x4_t v16;
  float32x4x4_t v17;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    if (v4 >= 0x18
      && ((v5 = v4 >> 1, result + 16 * (unint64_t)v5 + 16 <= (unint64_t)a3)
       || result + 4 >= (unint64_t)&a3[2 * v5 + 2]))
    {
      v7 = v5 + 1;
      v8 = v7 & 7;
      if ((v7 & 7) == 0)
        v8 = 8;
      v9 = v7 - v8;
      v6 = 2 * v9;
      v10 = &a3[2 * v9];
      v11 = result + 16 * v9;
      v12 = (const float *)(result + 68);
      v13 = (float *)(a3 + 8);
      do
      {
        v14 = v12 - 16;
        v16 = vld4q_f32(v14);
        v17 = vld4q_f32(v12);
        v15 = v13 - 8;
        v16.val[1] = v16.val[2];
        vst2q_f32(v15, *(float32x4x2_t *)v16.val[0].f32);
        v17.val[1] = v17.val[2];
        vst2q_f32(v13, *(float32x4x2_t *)v17.val[0].f32);
        v12 += 32;
        v13 += 16;
        v9 -= 8;
      }
      while (v9);
      a3 = v10;
      result = v11;
    }
    else
    {
      v6 = 0;
    }
    do
    {
      *a3 = *(_DWORD *)(result + 4);
      a3[1] = *(_DWORD *)(result + 12);
      result += 16;
      a3 += 2;
      v6 += 2;
    }
    while (v6 < a4 - 1);
  }
  if ((a4 & 1) != 0)
    *a3 = *(_DWORD *)(result + 4);
  return result;
}

unsigned __int8 *ScaleARGBRowDown2Linear_C(unsigned __int8 *result, uint64_t a2, _BYTE *a3, int a4)
{
  if (a4 >= 1)
  {
    do
    {
      *a3 = (*result + result[4] + 1) >> 1;
      a3[1] = (result[1] + result[5] + 1) >> 1;
      a3[2] = (result[2] + result[6] + 1) >> 1;
      a3[3] = (result[3] + result[7] + 1) >> 1;
      result += 8;
      a3 += 4;
      --a4;
    }
    while (a4);
  }
  return result;
}

unsigned __int8 *ScaleARGBRowDown2Box_C(unsigned __int8 *result, uint64_t a2, _BYTE *a3, int a4)
{
  if (a4 >= 1)
  {
    do
    {
      *a3 = (*result + result[4] + result[a2] + result[a2 + 4] + 2) >> 2;
      a3[1] = (result[1] + result[5] + result[a2 + 1] + result[a2 + 5] + 2) >> 2;
      a3[2] = (result[2] + result[6] + result[a2 + 2] + result[a2 + 6] + 2) >> 2;
      a3[3] = (result[3] + result[7] + result[a2 + 3] + result[a2 + 7] + 2) >> 2;
      result += 8;
      a3 += 4;
      --a4;
    }
    while (a4);
  }
  return result;
}

_DWORD *ScaleARGBRowDownEven_C(_DWORD *result, uint64_t a2, int a3, _DWORD *a4, int a5)
{
  int v5;

  if (a5 >= 2)
  {
    v5 = 0;
    do
    {
      *a4 = *result;
      a4[1] = result[a3];
      a4 += 2;
      v5 += 2;
      result += 2 * a3;
    }
    while (v5 < a5 - 1);
  }
  if ((a5 & 1) != 0)
    *a4 = *result;
  return result;
}

unsigned __int8 *ScaleARGBRowDownEvenBox_C(unsigned __int8 *result, uint64_t a2, int a3, _BYTE *a4, int a5)
{
  if (a5 >= 1)
  {
    do
    {
      *a4 = (*result + result[4] + result[a2] + result[a2 + 4] + 2) >> 2;
      a4[1] = (result[1] + result[5] + result[a2 + 1] + result[a2 + 5] + 2) >> 2;
      a4[2] = (result[2] + result[6] + result[a2 + 2] + result[a2 + 6] + 2) >> 2;
      a4[3] = (result[3] + result[7] + result[a2 + 3] + result[a2 + 7] + 2) >> 2;
      result += 4 * a3;
      a4 += 4;
      --a5;
    }
    while (a5);
  }
  return result;
}

_DWORD *ScaleARGBCols_C(_DWORD *result, uint64_t a2, int a3, int a4, int a5)
{
  int v5;

  if (a3 >= 2)
  {
    v5 = 0;
    do
    {
      *result = *(_DWORD *)(a2 + 4 * (a4 >> 16));
      result[1] = *(_DWORD *)(a2 + 4 * ((a4 + a5) >> 16));
      a4 += a5 + a5;
      result += 2;
      v5 += 2;
    }
    while (v5 < a3 - 1);
  }
  if ((a3 & 1) != 0)
    *result = *(_DWORD *)(a2 + 4 * (a4 >> 16));
  return result;
}

_DWORD *ScaleARGBCols64_C(_DWORD *result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = a4;
  if (a3 >= 2)
  {
    v6 = 0;
    do
    {
      *result = *(_DWORD *)(a2 + 4 * (v5 >> 16));
      v7 = v5 + a5;
      result[1] = *(_DWORD *)(a2 + 4 * (v7 >> 16));
      v5 = v7 + a5;
      result += 2;
      v6 += 2;
    }
    while (v6 < a3 - 1);
  }
  if ((a3 & 1) != 0)
    *result = *(_DWORD *)(a2 + 4 * (v5 >> 16));
  return result;
}

unint64_t ScaleARGBColsUp2_C(unint64_t result, unint64_t a2, int a3)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  _DWORD *v6;
  int *v7;
  int v8;
  uint64_t v9;
  float32x4_t *v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float32x4x2_t v14;
  float32x4x2_t v15;

  v3 = a3 - 2;
  if (a3 < 2)
  {
    v7 = (int *)a2;
    v6 = (_DWORD *)result;
  }
  else
  {
    if (v3 >= 0x16 && ((v4 = v3 >> 1, a2 + 4 * v4 + 4 <= result) || result + 8 * v4 + 8 <= a2))
    {
      v9 = v4 + 1;
      v5 = 2 * (v9 & 0xFFFFFFF8);
      v6 = (_DWORD *)(result + 8 * (v9 & 0xFFFFFFF8));
      v7 = (int *)(a2 + 4 * (v9 & 0xFFFFFFF8));
      v10 = (float32x4_t *)(a2 + 16);
      v11 = (float *)(result + 32);
      v12 = v9 & 0xFFFFFFF8;
      do
      {
        v13 = v11 - 8;
        v14.val[0] = v10[-1];
        v15.val[0] = *v10;
        v14.val[1] = v14.val[0];
        vst2q_f32(v13, v14);
        v15.val[1] = v15.val[0];
        vst2q_f32(v11, v15);
        v10 += 2;
        v11 += 16;
        v12 -= 8;
      }
      while (v12);
      if ((v9 & 0xFFFFFFF8) == v9)
        goto LABEL_9;
    }
    else
    {
      v5 = 0;
      v6 = (_DWORD *)result;
      v7 = (int *)a2;
    }
    do
    {
      v8 = *v7++;
      *v6 = v8;
      v6[1] = v8;
      v6 += 2;
      v5 += 2;
    }
    while (v5 < a3 - 1);
  }
LABEL_9:
  if ((a3 & 1) != 0)
    *v6 = *v7;
  return result;
}

unsigned int *ScaleARGBFilterCols_C(unsigned int *result, uint64_t a2, int a3, int a4, int a5)
{
  int v5;
  int v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;

  if (a3 >= 2)
  {
    v5 = 0;
    do
    {
      v6 = (unsigned __int16)a4 >> 9;
      v7 = (unsigned int *)(a2 + 4 * (a4 >> 16));
      v8 = *v7;
      LODWORD(v7) = v7[1];
      *result = ((v8 * (v6 ^ 0x7F) + v7 * v6) >> 7) & 0xFFFFFF | (((HIBYTE(v8) * (v6 ^ 0x7F) + (v7 >> 24) * v6) >> 7) << 24) | ((BYTE2(v8) * (v6 ^ 0x7F) + BYTE2(v7) * v6) << 9) & 0x1FF0000 | (2 * (BYTE1(v8) * (v6 ^ 0x7F) + BYTE1(v7) * v6)) & 0x1FF00;
      v9 = (unsigned __int16)(a4 + a5) >> 9;
      v10 = (unsigned int *)(a2 + 4 * ((a4 + a5) >> 16));
      v11 = *v10;
      LODWORD(v10) = v10[1];
      v12 = v9 ^ 0x7F;
      result[1] = ((v11 * v12 + v10 * v9) >> 7) & 0xFFFFFF | (((HIBYTE(v11) * v12 + (v10 >> 24) * v9) >> 7) << 24) | ((BYTE2(v11) * v12 + BYTE2(v10) * v9) << 9) & 0x1FF0000 | (2 * (BYTE1(v11) * v12 + BYTE1(v10) * v9)) & 0x1FF00;
      a4 += a5 + a5;
      result += 2;
      v5 += 2;
    }
    while (v5 < a3 - 1);
  }
  if ((a3 & 1) != 0)
  {
    v13 = (unsigned __int16)a4 >> 9;
    v14 = (unsigned int *)(a2 + 4 * (a4 >> 16));
    v15 = *v14;
    LODWORD(v14) = v14[1];
    v16 = v13 ^ 0x7F;
    *result = ((v15 * v16 + v14 * v13) >> 7) & 0xFFFFFF | (((HIBYTE(v15) * v16 + (v14 >> 24) * v13) >> 7) << 24) | ((BYTE2(v15) * v16 + BYTE2(v14) * v13) << 9) & 0x1FF0000 | (2 * (BYTE1(v15) * v16 + BYTE1(v14) * v13)) & 0x1FF00;
  }
  return result;
}

unsigned int *ScaleARGBFilterCols64_C(unsigned int *result, uint64_t a2, int a3, int a4, int a5)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int *v16;
  unsigned int v17;
  int v18;

  v5 = a4;
  if (a3 >= 2)
  {
    v6 = 0;
    do
    {
      v7 = (unsigned __int16)v5 >> 9;
      v8 = (unsigned int *)(a2 + 4 * (v5 >> 16));
      v9 = *v8;
      LODWORD(v8) = v8[1];
      *result = ((v9 * (v7 ^ 0x7F) + v8 * v7) >> 7) & 0xFFFFFF | (((HIBYTE(v9) * (v7 ^ 0x7F) + (v8 >> 24) * v7) >> 7) << 24) | ((BYTE2(v9) * (v7 ^ 0x7F) + BYTE2(v8) * v7) << 9) & 0x1FF0000 | (2 * (BYTE1(v9) * (v7 ^ 0x7F) + BYTE1(v8) * v7)) & 0x1FF00;
      v10 = v5 + a5;
      v11 = (unsigned __int16)(a5 + v5) >> 9;
      v12 = (unsigned int *)(a2 + 4 * (v10 >> 16));
      v13 = *v12;
      LODWORD(v12) = v12[1];
      v14 = v11 ^ 0x7F;
      result[1] = ((v13 * v14 + v12 * v11) >> 7) & 0xFFFFFF | (((HIBYTE(v13) * v14 + (v12 >> 24) * v11) >> 7) << 24) | ((BYTE2(v13) * v14 + BYTE2(v12) * v11) << 9) & 0x1FF0000 | (2 * (BYTE1(v13) * v14 + BYTE1(v12) * v11)) & 0x1FF00;
      v5 = v10 + a5;
      result += 2;
      v6 += 2;
    }
    while (v6 < a3 - 1);
  }
  if ((a3 & 1) != 0)
  {
    v15 = (unsigned __int16)v5 >> 9;
    v16 = (unsigned int *)(a2 + 4 * (v5 >> 16));
    v17 = *v16;
    LODWORD(v16) = v16[1];
    v18 = v15 ^ 0x7F;
    *result = ((v17 * v18 + v16 * v15) >> 7) & 0xFFFFFF | (((HIBYTE(v17) * v18 + (v16 >> 24) * v15) >> 7) << 24) | ((BYTE2(v17) * v18 + BYTE2(v16) * v15) << 9) & 0x1FF0000 | (2 * (BYTE1(v17) * v18 + BYTE1(v16) * v15)) & 0x1FF00;
  }
  return result;
}

uint64_t ScaleSlope(uint64_t result, int a2, int a3, int a4, int a5, _DWORD *a6, int *a7, int *a8, int *a9)
{
  int v10;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a3 != 1 || (int)result <= 0x7FFF)
    v10 = a3;
  else
    v10 = result;
  if (a4 != 1 || a2 <= 0x7FFF)
    v12 = a4;
  else
    v12 = a2;
  switch(a5)
  {
    case 1:
      if ((int)result >= 0)
        v14 = result;
      else
        v14 = -(int)result;
      if (v10 <= (int)v14)
      {
        v21 = (uint64_t)((unint64_t)v14 << 16) / v10;
        *a8 = v21;
        v15 = (v21 >> 1) - 0x8000;
        if ((int)v21 < 0)
          v15 = 0x8000 - (-(int)v21 >> 1);
      }
      else
      {
        if ((int)result < 2 || v10 < 2)
        {
LABEL_48:
          v22 = ((uint64_t)a2 << 16) / v12;
          *a9 = v22;
          *a7 = (int)v22 >> 1;
          if ((result & 0x80000000) == 0)
            return result;
          goto LABEL_63;
        }
        v15 = 0;
        *a8 = ((v14 << 16) - 65537) / (v10 - 1);
      }
      *a6 = v15;
      goto LABEL_48;
    case 2:
      if ((int)result >= 0)
        v16 = result;
      else
        v16 = -(int)result;
      if (v10 <= (int)v16)
      {
        v23 = (uint64_t)((unint64_t)v16 << 16) / v10;
        *a8 = v23;
        v17 = (v23 >> 1) - 0x8000;
        if ((int)v23 < 0)
          v17 = 0x8000 - (-(int)v23 >> 1);
      }
      else
      {
        if ((int)result < 2 || v10 < 2)
        {
LABEL_53:
          if (v12 <= a2)
          {
            v24 = ((uint64_t)a2 << 16) / v12;
            *a9 = v24;
            if ((v24 & 0x80000000) != 0)
            {
              *a7 = 0x8000 - (-(int)v24 >> 1);
              if ((result & 0x80000000) == 0)
                return result;
            }
            else
            {
              *a7 = (v24 >> 1) - 0x8000;
              if ((result & 0x80000000) == 0)
                return result;
            }
          }
          else if (a2 >= 2)
          {
            *a9 = (((unint64_t)a2 << 16) - 65537) / (v12 - 1);
            *a7 = 0;
            if ((result & 0x80000000) == 0)
              return result;
          }
          else if ((result & 0x80000000) == 0)
          {
            return result;
          }
LABEL_63:
          *a6 += *a8 * (v10 - 1);
          *a8 = -*a8;
          return result;
        }
        v17 = 0;
        *a8 = ((v16 << 16) - 65537) / (v10 - 1);
      }
      *a6 = v17;
      goto LABEL_53;
    case 3:
      if ((int)result >= 0)
        v13 = result;
      else
        v13 = -(int)result;
      *a8 = (uint64_t)((unint64_t)v13 << 16) / v10;
      *a9 = ((uint64_t)a2 << 16) / v12;
      *a6 = 0;
      *a7 = 0;
      if ((result & 0x80000000) != 0)
        goto LABEL_63;
      break;
    default:
      if ((int)result >= 0)
        v18 = result;
      else
        v18 = -(int)result;
      *a8 = (uint64_t)((unint64_t)v18 << 16) / v10;
      *a9 = ((uint64_t)a2 << 16) / v12;
      if (*a8 < 0)
        v19 = -(-*a8 >> 1);
      else
        v19 = *a8 >> 1;
      *a6 = v19;
      v20 = *a9 >> 1;
      if (*a9 < 0)
        v20 = -(-*a9 >> 1);
      *a7 = v20;
      if ((result & 0x80000000) != 0)
        goto LABEL_63;
      break;
  }
  return result;
}

uint64_t aom_arm_cpu_caps()
{
  char *v0;
  int v1;
  char *v2;
  unsigned int v3;
  unsigned int v4;

  v0 = getenv("AOM_SIMD_CAPS");
  if (v0 && *v0)
  {
    v1 = strtol(v0, 0, 0);
  }
  else
  {
    v2 = getenv("AOM_SIMD_CAPS_MASK");
    if (v2 && *v2)
      v1 = strtol(v2, 0, 0) & 1;
    else
      v1 = 1;
  }
  v3 = v1 & 0xFFFFFFF7;
  if ((v1 & 4) != 0)
    v3 = v1;
  v4 = v3 & 0xFFFFFFEF;
  if ((v3 & 4) == 0)
    v3 &= ~0x10u;
  if ((v3 & 8) == 0)
    v3 = v4;
  if ((v3 & 0x10) != 0)
    return v3;
  else
    return v3 & 0xFFFFFFDF;
}

void av1_init_mb_wiener_var_buffer(uint64_t a1)
{
  unint64_t *v1;
  _DWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t *v5;
  unsigned int v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  size_t v10;
  void *v11;
  unint64_t v12;
  unsigned int v13;
  size_t v14;
  void *v15;
  unint64_t v16;

  v1 = (unint64_t *)(a1 + 637936);
  v2 = (_DWORD *)(a1 + 265632);
  *(_BYTE *)(a1 + 637968) = 3;
  v3 = *(_QWORD *)(a1 + 637936);
  if (*(_DWORD *)(a1 + 265632))
  {
    if (!v3 || !*(_QWORD *)(a1 + 637944))
      goto LABEL_7;
    v3 = *(_QWORD *)(a1 + 637952);
  }
  if (v3)
    return;
LABEL_7:
  v4 = (_DWORD *)(a1 + 456712);
  v5 = (uint64_t *)(a1 + 239088);
  v6 = *(_DWORD *)(a1 + 456716) * *(_DWORD *)(a1 + 456712);
  if (v6 > 0x9249248
    || (v7 = 56 * v6, (v8 = malloc_type_malloc(v7 + 23, 0x70F2D1FBuLL)) == 0)
    || (v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v9 - 8) = v8, !v9))
  {
    *v1 = 0;
    aom_internal_error(*v5, 2, "Failed to allocate cpi->mb_weber_stats");
    if (!*v2)
      return;
LABEL_13:
    if ((v4[1] * *v4) <= 0x7FFFFFFA
      && (v10 = 4 * (v4[1] * *v4), (v11 = malloc_type_malloc(v10 + 23, 0x70F2D1FBuLL)) != 0)
      && (v12 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v12 - 8) = v11, v12))
    {
      bzero((void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0), v10);
      v1[1] = v12;
      v13 = v4[1] * *v4;
      if (v13 > 0x3FFFFFFD)
        goto LABEL_22;
    }
    else
    {
      v1[1] = 0;
      aom_internal_error(*v5, 2, "Failed to allocate cpi->prep_rate_estimates");
      v13 = v4[1] * *v4;
      if (v13 > 0x3FFFFFFD)
      {
LABEL_22:
        v1[2] = 0;
        aom_internal_error(*v5, 2, "Failed to allocate cpi->ext_rate_distribution");
        return;
      }
    }
    v14 = 8 * v13;
    v15 = malloc_type_malloc(v14 + 23, 0x70F2D1FBuLL);
    if (v15)
    {
      v16 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v16 - 8) = v15;
      if (v16)
      {
        bzero((void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0), v14);
        v1[2] = v16;
        return;
      }
    }
    goto LABEL_22;
  }
  bzero((void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0), v7);
  *v1 = v9;
  if (*v2)
    goto LABEL_13;
}

uint64_t av1_calc_mb_wiener_var_row(uint64_t result, uint64_t a2, uint64_t a3, int a4, uint16x8_t *a5, int32x4_t *a6, int32x4_t *a7, int32x4_t *a8, double a9, int32x4_t a10, int32x4_t a11, int32x4_t a12, int32x4_t a13, __n128 a14, int32x4_t a15, double *a16, unint64_t *a17, int8x8_t *a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int32x4_t v21;
  int v22;
  int v23;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  _BYTE **v42;
  unsigned int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  _BOOL4 v48;
  int v49;
  int v50;
  _BOOL4 v51;
  _BYTE *v52;
  int v53;
  _BYTE **v54;
  BOOL v56;
  unsigned int v57;
  int v58;
  unsigned int v59;
  unsigned int v60;
  char v61;
  _BYTE *v62;
  unsigned int v63;
  unsigned int v64;
  char v65;
  unsigned int v66;
  unsigned int v67;
  _BYTE *v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  int v71;
  unsigned int v72;
  __n128 v73;
  int32x4_t v74;
  int v75;
  int32x4_t *v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  int32x4_t *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  unsigned __int8 *v87;
  __int16 *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  __int16 v98;
  int v99;
  int v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  unsigned __int16 v114;
  int8x8_t *v115;
  unsigned __int16 v116;
  unsigned __int8 *v117;
  int8x8_t *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  int v122;
  unsigned int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  unsigned int v128;
  char v129;
  unint64_t v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  int32x4_t v138;
  unint64_t v139;
  int32x4_t *v140;
  uint64_t v141;
  __int32 *v142;
  int v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *__b;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  double *v159;
  unint64_t *v160;
  _DWORD *v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  int v167;
  unint64_t v168;
  unint64_t v169;
  _BYTE *v170;
  _BYTE *v171;
  int v172;
  unsigned int v174;
  __int16 **v175;
  _DWORD *v176;
  uint64_t v178;
  unsigned int v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  int v183;
  unsigned int v184;
  uint64_t v186;
  unsigned int v187;
  int32x4_t *v189;
  int v190;
  unsigned int v191;
  uint8x8_t *v193;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  __int128 v199;
  uint64_t v200;
  unsigned __int16 v201;
  _OWORD *v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  int v206;
  _OWORD v207[11];
  uint64_t v208;

  v18 = a3;
  v208 = *MEMORY[0x24BDAC8D0];
  v180 = result + 265487;
  v19 = *(_QWORD *)(result + 265672);
  v20 = *(_QWORD *)(v19 + 40);
  v197 = *(int *)(v19 + 32);
  v21.i64[0] = 0;
  memset(v207, 0, sizeof(v207));
  v202 = v207;
  *(_QWORD *)(a3 + 7864) = &v202;
  v195 = result + 238992;
  v22 = *(_DWORD *)(result + 239576);
  v23 = v22 + 8;
  if (v22 < -8)
    v23 = v22 + 23;
  if (v22 >= 1)
  {
    v25 = a4;
    v187 = 0;
    v26 = 0;
    v174 = 0;
    v27 = *(unsigned __int8 *)(result + 637968);
    v28 = mi_size_wide[v27];
    v184 = a4 / v28;
    v171 = (_BYTE *)(a3 + 10632);
    v170 = (_BYTE *)(a3 + 5400);
    v186 = result + 627584;
    v176 = (_DWORD *)(result + 456716);
    v29 = max_txsize_lookup_0[v27];
    v30 = tx_size_wide[v29];
    v161 = (_DWORD *)(result + 389488);
    v162 = *(_QWORD *)result + 85024;
    HIDWORD(v157) = v23 >> 4;
    v31 = (v30 * v30);
    v181 = v27;
    v168 = 0x20005uLL >> v27;
    v169 = 0x3EFFFCuLL >> v27;
    v167 = (v28 - 1) & a4;
    v160 = a17;
    v159 = a16;
    v191 = *(_DWORD *)(a3 + 10656);
    v165 = v20 + 4 * a4 * (int)v197;
    v175 = (__int16 **)(&av1_scan_orders + 32 * v29);
    v158 = 0x61810uLL >> v29;
    v155 = 0x18608uLL >> v29;
    v151 = (0x60604uLL >> v29) & 1;
    v164 = -32 * a4;
    LODWORD(v157) = a4 - 1;
    v179 = v28;
    v182 = 4 * v28;
    v166 = v30;
    if (v30 <= 1)
      v32 = 1;
    else
      v32 = v30;
    v190 = v31 - 16;
    v178 = (v30 * v30);
    v154 = v31 - 1;
    v156 = (v31 - 1) & 0xFFFFFFFFFFFFFFF8;
    v189 = a6 + 7;
    v152 = (uint64_t)a7[1].i64 + 4;
    v153 = v156 | 1;
    v172 = *(_DWORD *)(result + 239576);
    v163 = v32;
    do
    {
      if ((v26 & 0xF) == 0)
      {
        (*(void (**)(uint64_t, _QWORD, _QWORD))(v186 + 416))(v162, v184, v174);
        v34 = *(_DWORD *)(v186 + 48);
        if (v34 >= *(_DWORD *)v186)
          v34 = *(_DWORD *)v186;
        if (v34 >= 2)
        {
          pthread_mutex_lock(*(pthread_mutex_t **)(v186 + 368));
          v35 = *(unsigned __int8 *)(v186 + 366);
          result = pthread_mutex_unlock(*(pthread_mutex_t **)(v186 + 368));
          if (v35)
            break;
        }
      }
      v36 = mi_size_high[v181];
      v37 = *(_DWORD *)(v195 + 628);
      v38 = mi_size_wide[*(unsigned __int8 *)(v195 + 608)];
      v39 = v25 / v38;
      v40 = v26 / v38;
      v41 = v26 + v37 * v25;
      *(_QWORD *)(*(_QWORD *)(v195 + 616) + 8 * v41) = *(_QWORD *)(v195 + 592)
                                                     + 176 * (v40 + v39 * *(_DWORD *)(v195 + 604));
      v42 = (_BYTE **)(*(_QWORD *)(v195 + 616) + 8 * v41);
      *(_QWORD *)(v18 + 7864) = v42;
      *(_QWORD *)(v18 + 7912) = *(_QWORD *)(v195 + 632) + v41;
      *(_DWORD *)(v18 + 7920) = v37;
      *(_QWORD *)(a2 + 16760) = *(_QWORD *)v195 + 84 * (v40 + *(_DWORD *)(v195 + 12) * v39);
      if ((signed int)(v36 + v25) >= *(_DWORD *)(v195 + 580))
        v43 = *(_DWORD *)(v195 + 580);
      else
        v43 = v36 + v25;
      v44 = v26 + v179;
      if ((signed int)(v26 + v179) >= *(_DWORD *)(v195 + 584))
        v45 = *(_DWORD *)(v195 + 584);
      else
        v45 = v26 + v179;
      v46 = *(_DWORD *)(v18 + 7840);
      v47 = *(_DWORD *)(v18 + 7848);
      *(_DWORD *)(v18 + 7932) = v164;
      *(_DWORD *)(v18 + 7936) = 32 * (v43 - (v36 + v25));
      *(_DWORD *)(v18 + 7924) = -32 * v26;
      *(_DWORD *)(v18 + 7928) = 32 * (v45 - v44);
      *(_DWORD *)v18 = v25;
      *(_DWORD *)(v18 + 4) = v26;
      v48 = v46 < v25;
      v170[2472] = v48;
      v49 = *(_DWORD *)(v18 + 2628);
      v50 = *(_DWORD *)(v18 + 2632);
      v51 = v47 < v26;
      v170[2473] = v51;
      v170[2474] = v48;
      if (!(v169 & 1 | (v49 == 0)))
        v51 = v26 - 1 > v47;
      v170[2475] = v51;
      if ((v168 & 1) != 0 && v50)
      {
        v48 = (int)v157 > v46;
        v170[2474] = v48;
      }
      if (v46 >= v25)
      {
        v52 = v171;
        *(_QWORD *)(v18 + 7888) = 0;
        if (v47 < v26)
        {
LABEL_31:
          *(_QWORD *)(v18 + 7880) = *(v42 - 1);
          if ((v25 & 1) != 0)
            goto LABEL_36;
          goto LABEL_32;
        }
      }
      else
      {
        v52 = v171;
        *(_QWORD *)(v18 + 7888) = v42[-*(int *)(v18 + 8)];
        if (v47 < v26)
          goto LABEL_31;
      }
      *(_QWORD *)(v18 + 7880) = 0;
      if ((v25 & 1) != 0)
        goto LABEL_36;
LABEL_32:
      if ((v36 & 1) != 0 && v50)
      {
        *(_BYTE *)(v18 + 12) = 0;
        v170[2909] = v36;
        v170[2908] = v179;
        *v52 = 0;
        if (v179 >= v36)
          goto LABEL_50;
        goto LABEL_48;
      }
LABEL_36:
      if ((v179 & 1) == 0 || (v26 & 1) != 0)
      {
        *(_BYTE *)(v18 + 12) = 1;
      }
      else
      {
        *(_BYTE *)(v18 + 12) = v49 == 0;
        if (v49)
        {
          v170[2909] = v36;
          v170[2908] = v179;
          *v52 = 0;
          if (v179 >= v36)
            goto LABEL_50;
          goto LABEL_48;
        }
      }
      v53 = *(_DWORD *)(v18 + 8);
      v54 = &(&v42[-(v49 & v26)])[-(v53 * (v50 & v25))];
      if (v48)
      {
        *(_QWORD *)(v18 + 7904) = v54[v49 - v53];
        if (!v51)
          goto LABEL_47;
      }
      else
      {
        *(_QWORD *)(v18 + 7904) = 0;
        if (!v51)
        {
LABEL_47:
          *(_QWORD *)(v18 + 7896) = 0;
          v170[2909] = v36;
          v170[2908] = v179;
          *v52 = 0;
          if (v179 >= v36)
            goto LABEL_50;
          goto LABEL_48;
        }
      }
      *(_QWORD *)(v18 + 7896) = v54[v53 * v50 - 1];
      v170[2909] = v36;
      v170[2908] = v179;
      *v52 = 0;
      if (v179 >= v36)
        goto LABEL_50;
LABEL_48:
      if (((v36 - 1) & v44) == 0)
        *v52 = 1;
LABEL_50:
      v56 = v179 > v36 && v167 == 0;
      v52[1] = v56;
      v57 = 4 * v36;
      v58 = *(unsigned __int8 *)(*(_QWORD *)(v195 + 24728) + 77);
      v59 = (v182 >> *(_DWORD *)(v18 + 20));
      v60 = (v57 >> *(_DWORD *)(v18 + 24));
      if (v59 <= 4)
        LOBYTE(v59) = 4;
      *(_BYTE *)(v18 + 184) = v59;
      if (v60 <= 4)
        v61 = 4;
      else
        v61 = v60;
      *(_BYTE *)(v18 + 185) = v61;
      if (v58)
      {
        v62 = *v42;
        *v62 = v181;
        v62[24] = 0;
        if (v46 < v25)
          goto LABEL_63;
      }
      else
      {
        v63 = (v182 >> *(_DWORD *)(v18 + 2628));
        v64 = (v57 >> *(_DWORD *)(v18 + 2632));
        if (v63 <= 4)
          LOBYTE(v63) = 4;
        *(_BYTE *)(v18 + 2792) = v63;
        if (v64 <= 4)
          v65 = 4;
        else
          v65 = v64;
        *(_BYTE *)(v18 + 2793) = v65;
        v66 = (v182 >> *(_DWORD *)(v18 + 5236));
        v67 = (v57 >> *(_DWORD *)(v18 + 5240));
        if (v66 <= 4)
          LOBYTE(v66) = 4;
        *v170 = v66;
        if (v67 <= 4)
          LOBYTE(v67) = 4;
        v170[1] = v67;
        v68 = *v42;
        *v68 = v181;
        v68[24] = 0;
        if (v46 < v25)
        {
LABEL_63:
          *(_QWORD *)(v18 + 7888) = 0;
          if (v47 >= v26)
            goto LABEL_77;
LABEL_76:
          *(_QWORD *)(v18 + 7880) = 0;
          goto LABEL_77;
        }
      }
      if (v47 < v26)
        goto LABEL_76;
LABEL_77:
      v183 = v26 + v179;
      v69 = 0;
      v70 = 0;
      v193 = (uint8x8_t *)(v165 + (4 * v26));
      v71 = 0x7FFFFFFF;
      do
      {
        av1_predict_intra_block(a3, *(unsigned __int8 *)(*(_QWORD *)(v195 + 24728) + 28), *(unsigned __int8 *)(*(_QWORD *)(v195 + 24728) + 61), v166, v166, v29, v69, 0, *(double *)v21.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64, (int32x2_t)a14.n128_u64[0], a15, 0, 5u, (uint64_t)v193, v197,
          a18,
          128,
          0,
          0,
          0);
        aom_subtract_block_neon(v166, v166, a5, v166, v193, v197, (uint8x8_t *)a18, 128);
        *(_QWORD *)&v198 = 0;
        BYTE1(v198) = v29;
        *((_QWORD *)&v198 + 1) = v191;
        *(_QWORD *)&v199 = 5;
        if (v191 == 8)
          ((void (*)(uint16x8_t *, int32x4_t *, uint64_t, _QWORD, uint64_t))lowbd_fwd_txfm_func_ls[v29])(a5, a6, v166, 0, 8);
        else
          av1_highbd_fwd_txfm((int16x4_t *)a5, a6, v166, (unsigned __int8 *)&v198, v73);
        a12 = a6[3];
        a11 = vabsq_s32(a6[2]);
        v74 = vaddq_s32(vabsq_s32(a6[1]), vabsq_s32(*a6));
        a10 = vaddq_s32(vabsq_s32(a12), a11);
        v75 = v190;
        if (v190)
        {
          v76 = v189;
          do
          {
            a12 = v76[-2];
            a13 = v76[-1];
            a14 = *(__n128 *)v76;
            v74 = vaddq_s32(vaddq_s32(vabsq_s32(v76[-3]), v74), vabsq_s32(a13));
            a11 = vabsq_s32(*v76);
            a10 = vaddq_s32(vaddq_s32(vabsq_s32(a12), a10), a11);
            v76 += 4;
            v75 -= 16;
          }
          while (v75);
        }
        v21 = vaddq_s32(v74, a10);
        v21.i32[0] = vaddvq_s32(v21);
        if (v21.i32[0] < v71)
          v70 = v69;
        v72 = v69;
        if (v21.i32[0] < v71)
          v71 = v21.i32[0];
        ++v69;
      }
      while (v72 < 0xC);
      v77 = v166;
      v78 = a3;
      av1_predict_intra_block(a3, *(unsigned __int8 *)(*(_QWORD *)(v195 + 24728) + 28), *(unsigned __int8 *)(*(_QWORD *)(v195 + 24728) + 61), v77, v77, v29, v70, 0, *(double *)v21.i64, *(double *)a10.i64, *(double *)a11.i64, *(double *)a12.i64, *(double *)a13.i64, (int32x2_t)a14.n128_u64[0], a15, 0, 5u, (uint64_t)v193, v197,
        a18,
        128,
        0,
        0,
        0);
      aom_subtract_block_neon(v77, v77, a5, v77, v193, v197, (uint8x8_t *)a18, 128);
      *(_QWORD *)&v198 = 0;
      BYTE1(v198) = v29;
      *((_QWORD *)&v198 + 1) = v191;
      *(_QWORD *)&v199 = 5;
      if (v191 == 8)
        ((void (*)(uint16x8_t *, int32x4_t *, uint64_t, _QWORD, uint64_t))lowbd_fwd_txfm_func_ls[v29])(a5, a6, v166, 0, 8);
      else
        av1_highbd_fwd_txfm((int16x4_t *)a5, a6, v166, (unsigned __int8 *)&v198, v79);
      v80 = a7;
      v201 = 0;
      v200 = 0;
      v198 = 0u;
      v199 = 0u;
      v81 = 1 << num_pels_log2_lookup_0[txsize_to_bsize_0[v29]];
      LODWORD(v198) = ((0x61E18uLL >> v29) & 1) + ((0x1810uLL >> v29) & 1);
      BYTE4(v198) = v29;
      v199 = 0uLL;
      *((_QWORD *)&v198 + 1) = 0;
      v196 = v81;
      av1_quantize_fp_facade((int16x8_t *)a6, v81, a2, a7, a8, (__int16 *)&v201, (uint64_t)v175, (int *)&v198, (int16x8_t)0);
      v84 = v201;
      v85 = v26 / v179;
      v86 = v163;
      v87 = (unsigned __int8 *)(v165 + v187);
      if (*(_DWORD *)(v180 + 145))
      {
        if (v201)
        {
          v88 = *v175;
          v89 = 1;
          v90 = v201;
          do
          {
            v91 = *v88++;
            v92 = v80->i32[v91];
            v93 = v92 == 0;
            if (v92 < 0)
              v92 = -v92;
            if (v93)
              v94 = v89;
            else
              v94 = v89 + 1;
            v95 = v94 + (int)(log1p((double)v92) / 0.693147181);
            v80 = a7;
            v89 = v95 + 1;
            --v90;
          }
          while (v90);
          v96 = v89 << 9;
          v78 = a3;
        }
        else
        {
          v96 = 512;
        }
        *(_DWORD *)(*(_QWORD *)(v186 + 10360) + 4 * (int)(v85 + *v176 * v184)) = v96;
      }
      if ((_DWORD)v84)
      {
        v203 = 0;
        v204 = 0;
        BYTE1(v203) = v29;
        v205 = 0;
        v206 = v84;
        v97 = **(_QWORD **)(v78 + 7864);
        v98 = *(_WORD *)(v97 + 167);
        v99 = *(_DWORD *)(v78 + 4 * (v98 & 7) + 10692);
        v100 = *(_DWORD *)(v78 + 10656);
        HIDWORD(v203) = v99;
        LODWORD(v204) = v100;
        if ((v98 & 0x80) != 0)
        {
          v101 = 1;
          if ((v158 & 1) == 0)
            goto LABEL_110;
LABEL_108:
          LOBYTE(v101) = 0;
        }
        else
        {
          v101 = *(char *)(v97 + 16) > 0;
          if ((v158 & 1) != 0)
            goto LABEL_108;
LABEL_110:
          if ((v155 & 1) == 0)
            LOBYTE(v101) = av1_ext_tx_set_lookup_5[2 * v101 + v151];
        }
        LOBYTE(v205) = v101;
        if (v99)
          av1_inv_txfm_add_c((uint64_t)a8, (uint64_t)a18);
        else
          av1_lowbd_inv_txfm2d_add_neon((uint64_t)a8, (uint64_t)a18, 128, 0, v29, v84, v82, v83, v145, v146, v147, (uint64_t)__b, v149, v150, v151, v152, v153, v154, v155,
            v156,
            v157,
            v158,
            (uint64_t)v159,
            (uint64_t)v160,
            (uint64_t)v161,
            v162,
            v163);
      }
      v102 = 0;
      v103 = 0;
      v104 = 0;
      v105 = 0;
      v106 = 0;
      v107 = 0;
      v108 = 0;
      v109 = (int)(v85 + *v176 * v184);
      v110 = *(_QWORD *)(v186 + 10352);
      v111 = v110 + 56 * v109;
      *(_QWORD *)(v111 + 16) = 0;
      v112 = v111 + 16;
      *(_DWORD *)(v112 + 8) = 65537;
      *(_QWORD *)(v112 - 8) = 0;
      result = v112 - 8;
      *(_QWORD *)(v112 + 16) = 0;
      v113 = (uint64_t *)(v112 + 16);
      v114 = 1;
      v115 = a18;
      v116 = 1;
      do
      {
        v117 = v87;
        v118 = v115;
        v119 = v86;
        do
        {
          v121 = *v117++;
          v120 = v121;
          v123 = v118->u8[0];
          v118 = (int8x8_t *)((char *)v118 + 1);
          v122 = v123;
          v108 += v120;
          v107 += v123;
          v124 = v120 - v123;
          v106 += v124;
          v105 += (v120 * v120);
          *(_QWORD *)result = v105;
          v104 += (v122 * v122);
          *(_QWORD *)v112 = v104;
          if (v116 <= (int)v120)
            v116 = v120;
          *(_WORD *)(v112 + 8) = v116;
          if (v114 <= v122)
            v114 = v122;
          *(_WORD *)(v112 + 10) = v114;
          v103 += (v124 * v124);
          *v113 = v103;
          --v119;
        }
        while (v119);
        ++v102;
        v115 += 16;
        v87 += v197;
      }
      while (v102 != v86);
      v25 = a4;
      v33 = v183;
      if (*(_BYTE *)v180)
      {
        *v159 = *v159 + (double)v103;
        if (*v161)
        {
          v125 = *(__int16 *)(*(_QWORD *)(a2 + 128) + 2);
          if (v125 <= 959)
          {
            v126 = v103 * (unsigned __int16)(280 - (v125 >> 3));
            if (v126 >= 0x3FFFFFFF80)
              v127 = 0x7FFFFFFF;
            else
              v127 = (unint64_t)v126 >> 7;
            goto LABEL_134;
          }
        }
        else if (v103)
        {
          v128 = *(__int16 *)(*(_QWORD *)(a2 + 128) + 2) >> 3;
          v129 = num_pels_log2_lookup_0[v181];
          v130 = (((v128 * (unint64_t)v128) << (v129 + 10)) + (v103 >> 1)) / v103;
          if (v130 >= 0x3BFDF)
            LODWORD(v130) = 245727;
          v131 = (v130 >> 2) + 8;
          v132 = __clz(v131);
          v133 = (v131 >> (28 - v132)) & 7 | (8 * (28 - v132));
          v134 = v133;
          v135 = ((int)v130 - *(_DWORD *)((char *)&model_rd_norm_xsq_iq_q10 + v134 * 4)) << 10 >> (30 - v132);
          v127 = (((v135 * model_rd_norm_rate_tab_q10[v133 + 1] + (1024 - v135) * model_rd_norm_rate_tab_q10[v134]) >> 10 << v129)
                + 1) >> 1;
          goto LABEL_134;
        }
        v127 = 0;
LABEL_134:
        a10.i64[0] = *v160;
        *(double *)v160 = *(double *)v160 + (double)v127;
      }
      v136 = 0;
      *(_QWORD *)result = v105 - v108 * v108 / v196;
      *(_QWORD *)v112 = v104 - v107 * v107 / v196;
      *v113 = v103 - v106 * v106 / v196;
      *(_QWORD *)(v110 + 56 * (int)v109 + 40) = v71;
      a7->i32[0] = 0;
      if (v178 >= 2)
      {
        if (v178 < 9)
        {
          v136 = 0;
          v137 = 1;
LABEL_141:
          v141 = v178 - v137;
          v142 = &a7->i32[v137];
          do
          {
            v144 = *v142++;
            v143 = v144;
            if (v144 < 0)
              v143 = -v143;
            if (v136 <= v143)
              v136 = v143;
            --v141;
          }
          while (v141);
          goto LABEL_147;
        }
        v138 = 0uLL;
        v139 = v156;
        v140 = (int32x4_t *)v152;
        a10 = 0uLL;
        do
        {
          a11 = vabsq_s32(v140[-1]);
          a12 = vabsq_s32(*v140);
          v138 = vmaxq_s32(v138, a11);
          a10 = vmaxq_s32(a10, a12);
          v140 += 2;
          v139 -= 8;
        }
        while (v139);
        v136 = vmaxvq_s32(vmaxq_s32(v138, a10));
        v137 = v153;
        if (v154 != v156)
          goto LABEL_141;
      }
LABEL_147:
      *(double *)v21.i64 = (double)v136;
      *(double *)(v110 + 56 * (int)v109 + 48) = (double)v136;
      v18 = a3;
      if (v183 >= v172 || (v183 & 0xF) == 0)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(v186 + 424))(v162, v184, v174, HIDWORD(v157));
        v33 = v183;
        ++v174;
      }
      v187 += v182;
      v26 = v33;
    }
    while (v33 < v172);
  }
  *(_QWORD *)(v18 + 7864) = 0;
  return result;
}

void av1_set_mb_wiener_variance(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, __int128 *a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29,int32x4_t a30)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  void *v27;
  unint64_t v28;
  double v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  __n128 v34;
  int32x4_t v35;
  double v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v42;
  unsigned int v43;
  FILE *v44;
  FILE *v45;
  int v46;
  double v47;
  double v48;
  int v49;
  int v50;
  int i;
  double v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  int v60;
  unsigned int v61;
  int v62;
  int v63;
  int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  double v77;
  double v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  unsigned int v82;
  int v83;
  double v84;
  int v85;
  int v86;
  double v87;
  unsigned int v88;
  double v89;
  double v90;
  unsigned int v91;
  uint64_t v92;
  double v93;
  double v94;
  int16x4_t v95;
  double v96;
  int v97;
  int v98;
  int v99;
  double v100;
  int v101;
  double v102;
  double v103;
  unsigned int v104;
  uint64_t v105;
  double v106;
  double v107;
  int16x4_t v108;
  double v109;
  int v110;
  int v111;
  double v112;
  unsigned int v113;
  double v114;
  double v115;
  unsigned int v116;
  uint64_t v117;
  double v118;
  double v119;
  int16x4_t v120;
  double v121;
  int v122;
  int v123;
  double v124;
  unsigned int v125;
  double v126;
  double v127;
  int v128;
  uint64_t v129;
  double v130;
  double v131;
  int16x4_t v132;
  double v133;
  int v134;
  int v135;
  double v136;
  unsigned int v137;
  double v138;
  double v139;
  unsigned int v140;
  uint64_t v141;
  double v142;
  double v143;
  int16x4_t v144;
  double v145;
  int v146;
  uint64_t v147;
  int v148;
  unsigned int v149;
  unsigned int v150;
  uint64_t v151;
  int v152;
  unsigned int v153;
  unsigned int v154;
  int v155;
  long double v156;
  uint64_t v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  int v161;
  unsigned int v162;
  char v163;
  int v164;
  double v165;
  double v166;
  double v167;
  unsigned int v168;
  unsigned int v169;
  int v170;
  unsigned int v171;
  uint64_t v172;
  double v173;
  int v174;
  int v175;
  double v176;
  unsigned int v177;
  double v178;
  double v179;
  unsigned int v180;
  uint64_t v181;
  double v182;
  double v183;
  int16x4_t v184;
  double v185;
  int v186;
  int v187;
  int v188;
  double v189;
  int v190;
  double v191;
  double v192;
  unsigned int v193;
  uint64_t v194;
  double v195;
  double v196;
  int16x4_t v197;
  double v198;
  int v199;
  int v200;
  double v201;
  unsigned int v202;
  double v203;
  double v204;
  unsigned int v205;
  uint64_t v206;
  double v207;
  double v208;
  int16x4_t v209;
  double v210;
  int v211;
  int v212;
  double v213;
  unsigned int v214;
  double v215;
  double v216;
  int v217;
  uint64_t v218;
  double v219;
  double v220;
  int16x4_t v221;
  double v222;
  int v223;
  int v224;
  double v225;
  unsigned int v226;
  double v227;
  double v228;
  unsigned int v229;
  uint64_t v230;
  double v231;
  double v232;
  int16x4_t v233;
  double v234;
  int v235;
  double v236;
  unsigned int v237;
  unsigned int v238;
  double v239;
  double v240;
  double v241;
  uint64_t v242;
  int v243;
  unsigned int v244;
  unsigned int v245;
  unsigned int v246;
  unsigned int v247;
  double v248;
  int v249;
  unsigned int v250;
  unsigned int v251;
  long double v252;
  int v253;
  _QWORD *v254;
  __int128 ***v255;
  unsigned __int8 *v256;
  uint64_t v257;
  char v258;
  int *v259;
  uint64_t v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  unsigned int v264;
  int v265;
  unsigned int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  int v274;
  uint64_t vars0;
  int vars0a;
  double vars8;

  v22 = MEMORY[0x24BDAC7A8](a1, a2);
  STACK[0x3978] = *MEMORY[0x24BDAC8D0];
  v23 = v22 + 627584;
  v24 = v22 + 239656;
  v25 = v22 + 234424;
  v255 = (__int128 ***)(v22 + 94344);
  v256 = (unsigned __int8 *)(v22 + 637968);
  LOBYTE(v253) = *(_BYTE *)(v22 + 638168);
  if (aom_realloc_frame_buffer(*(_QWORD *)(v22 + 239272) + 1248, *(_DWORD *)(v22 + 239096), *(_DWORD *)(v22 + 239100), *(_DWORD *)(*(_QWORD *)(v22 + 263720) + 96), *(_DWORD *)(*(_QWORD *)(v22 + 263720) + 100), *(unsigned __int8 *)(*(_QWORD *)(v22 + 263720) + 76), *(_DWORD *)(v22 + 265544), *(_DWORD *)(v22 + 239552), 0, 0, 0, v253, 0))aom_internal_error(*(_QWORD *)(v22 + 239088), 2, "Failed to allocate frame buffer");
  v26 = (int *)(v22 + 456712);
  v27 = malloc_type_malloc(0x4027uLL, 0x70F2D1FBuLL);
  if (v27)
  {
    v28 = ((unint64_t)v27 + 39) & 0xFFFFFFFFFFFFFFE0;
    *(_QWORD *)(v28 - 8) = v27;
    *(_QWORD *)v25 = v28;
    if (v28)
      goto LABEL_8;
  }
  else
  {
    *(_QWORD *)v25 = 0;
  }
  aom_internal_error(*(_QWORD *)(v22 + 239088), 2, "Failed to allocate td->wiener_tmp_pred_buf");
LABEL_8:
  *(_QWORD *)(v22 + 637976) = 0;
  a28 = 0u;
  a29 = 0u;
  a26 = 0u;
  a27 = 0u;
  a24 = 0u;
  a25 = 0u;
  a22 = 0u;
  a23 = 0u;
  a20 = 0u;
  a21 = 0u;
  a19 = 0u;
  a18 = &a19;
  *v255 = &a18;
  *(_DWORD *)v24 = *(_DWORD *)(v22 + 264696);
  *(_DWORD *)(v22 + 172664) = -1;
  av1_init_plane_quantizers((uint64_t *)v22, v22 + 86064, 0, 1);
  vars8 = 0.0;
  a17 = 0.0;
  if (*(_DWORD *)(v22 + 627632) >= *(_DWORD *)(v22 + 627584))
    v37 = *(_DWORD *)v23;
  else
    v37 = *(_DWORD *)(v22 + 627632);
  *(_QWORD *)(v22 + 628000) = av1_row_mt_sync_read_dummy;
  *(_QWORD *)(v22 + 628008) = av1_row_mt_sync_write_dummy;
  vars0 = v22 + 239656;
  if (v37 > 1 && !*(_BYTE *)(v22 + 265487))
  {
    *(_QWORD *)(v22 + 628000) = av1_row_mt_sync_read;
    *(_QWORD *)(v22 + 628008) = av1_row_mt_sync_write;
    av1_calc_mb_wiener_var_mt((unsigned int *)v22, v37);
    if (!*(_BYTE *)(v22 + 265487))
      goto LABEL_24;
    goto LABEL_17;
  }
  if (*v26 >= 1)
  {
    v38 = 0;
    v39 = mi_size_wide[*v256];
    do
    {
      av1_calc_mb_wiener_var_row(v22, v22 + 86064, v22 + 86480, v38, (uint16x8_t *)&STACK[0x3160], (int32x4_t *)&STACK[0x2160], (int32x4_t *)&STACK[0x1160], &a30, v29, v30, v31, v32, v33, v34, v35, &a17, (unint64_t *)&vars8, *(int8x8_t **)v25);
      v38 += v39;
    }
    while (v38 < *v26);
  }
  if (*(_BYTE *)(v22 + 265487))
  {
LABEL_17:
    if (*(int *)v24 <= 127)
    {
      v40 = *(_DWORD *)(v22 + 239100) * *(_DWORD *)(v22 + 239096);
      if (vars8 / (double)(100 * v40) > 2.0 && a17 / (double)v40 < 4.0)
      {
        *(_WORD *)(v22 + 265481) = 0;
        *(_BYTE *)(v22 + 265483) = 0;
        *(_BYTE *)(v22 + 265485) = 0;
      }
    }
  }
LABEL_24:
  if (!*(_DWORD *)(v22 + 265632)
    || (v42 = *v256, v43 = mi_size_wide[v42], (v44 = fopen(*(const char **)(v22 + 265640), "r")) == 0))
  {
LABEL_56:
    v69 = *(_DWORD *)(v25 + 5148);
    v254 = (_QWORD *)v25;
    if (v69 < 1)
      goto LABEL_271;
    goto LABEL_57;
  }
  v45 = v44;
  v46 = *v26;
  v47 = 0.0;
  v48 = 0.0;
  if (*v26 < 1)
    goto LABEL_35;
  v49 = v26[1];
  if (v49 < 1)
    goto LABEL_35;
  v50 = 0;
  while (2)
  {
    if (v49 < 1)
      goto LABEL_29;
    for (i = 0; i < v49; i += 4)
    {
      LODWORD(STACK[0x2160]) = 0;
      if (fscanf(v45, "%f", &STACK[0x2160]) != 1)
      {
        fclose(v45);
        v24 = vars0;
        goto LABEL_56;
      }
      v52 = *(float *)&STACK[0x2160];
      v48 = v48 + v52;
      v49 = v26[1];
      *(double *)(*(_QWORD *)(v23 + 10368) + 8 * (int)(i / v43 + v49 * (v50 / v43))) = v52;
    }
    v46 = *v26;
    v24 = vars0;
LABEL_29:
    v50 += 4;
    if (v50 < v46)
      continue;
    break;
  }
LABEL_35:
  fclose(v45);
  if (*v26 >= 1)
  {
    v53 = v26[1];
    if (v53 >= 1)
    {
      v54 = 0;
      v55 = 0;
      v56 = *(_QWORD *)(v23 + 10360);
      v57 = 0x5001FuLL >> v42;
      v58 = 0x10003uLL >> v42;
      v59 = 2 * v43;
      v60 = 3 * v43;
      do
      {
        v61 = 0;
        v62 = v54 / v43 * v53;
        do
        {
          v63 = v61 / v43;
          v64 = *(_DWORD *)(v56 + 4 * (int)(v61 / v43 + v62));
          if ((v57 & 1) != 0)
          {
            v64 += *(_DWORD *)(v56 + 4 * (int)((v43 + v61) / v43 + v62));
            if ((v58 & 1) != 0)
              v64 += *(_DWORD *)(v56 + 4 * (int)((v60 + v61) / v43 + v62))
                   + *(_DWORD *)(v56 + 4 * (int)((v59 + v61) / v43 + v62));
          }
          if ((v57 & 1) != 0)
          {
            v65 = (v54 + v43) / v43 * v53;
            v64 += *(_DWORD *)(v56 + 4 * (int)((v43 + v61) / v43 + v65)) + *(_DWORD *)(v56 + 4 * (int)(v63 + v65));
            if ((v58 & 1) != 0)
            {
              v66 = *(_DWORD *)(v56 + 4 * (int)((v60 + v61) / v43 + v65))
                  + *(_DWORD *)(v56 + 4 * (int)((v59 + v61) / v43 + v65))
                  + v64;
              v67 = (v59 + v54) / v43 * v53;
              v64 = *(_DWORD *)(v56 + 4 * (int)(v63 + v67)) + v66;
              if ((v57 & 1) != 0)
              {
                v64 += *(_DWORD *)(v56 + 4 * (int)((v43 + v61) / v43 + v67));
                if ((v58 & 1) != 0)
                  v64 += *(_DWORD *)(v56 + 4 * (int)((v60 + v61) / v43 + v67))
                       + *(_DWORD *)(v56 + 4 * (int)((v59 + v61) / v43 + v67));
              }
              if ((v58 & 1) != 0)
              {
                v68 = (v60 + v54) / v43 * v53;
                v64 += *(_DWORD *)(v56 + 4 * (int)(v63 + v68));
                if ((v57 & 1) != 0)
                {
                  v64 += *(_DWORD *)(v56 + 4 * (int)((v43 + v61) / v43 + v68));
                  if ((v58 & 1) != 0)
                    v64 += *(_DWORD *)(v56 + 4 * (int)((v60 + v61) / v43 + v68))
                         + *(_DWORD *)(v56 + 4 * (int)((v59 + v61) / v43 + v68));
                }
              }
            }
          }
          v55 += v64;
          v61 += 4;
        }
        while ((int)v61 < v53);
        v54 += 4;
      }
      while (v54 < *v26);
      v47 = (double)v55;
    }
  }
  *(double *)(v23 + 10376) = v47 / v48;
  v69 = *(_DWORD *)(v25 + 5148);
  v254 = (_QWORD *)v25;
  if (v69 >= 1)
  {
LABEL_57:
    v70 = *(_DWORD *)(v25 + 5152);
    if (v70 < 1)
      goto LABEL_271;
    v71 = 0;
    v72 = *(unsigned __int8 *)(*(_QWORD *)(v24 + 24064) + 28);
    v73 = mi_size_wide[v72];
    v74 = v73 >> 1;
    vars0a = v70 - v73 - (v73 >> 1);
    v257 = v72;
    v259 = v26;
    v75 = mi_size_wide[*v256];
    v76 = v26[1];
    v261 = mi_size_high[v72];
    v273 = v261 >> 1;
    v267 = v69 - v261 - (v261 >> 1);
    v77 = 0.0;
    v78 = 0.0;
    v271 = v73 >> 1;
    v272 = v73;
LABEL_60:
    v79 = 0;
    v80 = v71 + v261;
    v81 = v71 - v273 + v261;
    v263 = v71 + v273;
    v265 = v71 - v273;
    v82 = v71 + v273 + v261;
    v269 = v71;
    while (1)
    {
      v85 = 0;
      v86 = v79;
      v79 += v73;
      v87 = 1.0;
      v88 = v71;
      v89 = 1.0;
      v90 = 1.0;
      do
      {
        if ((int)v88 < v69)
        {
          v91 = v86;
          do
          {
            if ((int)v91 < v70)
            {
              v92 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v91 / v75 + v88 / v75 * v76);
              v93 = (double)*(uint64_t *)(v92 + 32);
              v94 = sqrt((double)*(uint64_t *)(v92 + 8));
              *(double *)&v95 = v94 * v93;
              LOWORD(v36) = *(_WORD *)(v92 + 26);
              v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
              v90 = v90 + v94 * v93 * v36;
              v95.i16[0] = *(_WORD *)(v92 + 24);
              v96 = (double)vmovl_s16(v95).i32[0];
              v89 = v89 + fabs(v36 * v94 - sqrt((double)*(uint64_t *)(v92 + 16)) * v96);
              v87 = v87 + sqrt(v93) * sqrt(v96) * 0.1;
              ++v85;
            }
            v91 += v75;
          }
          while (v91 < v79);
        }
        v88 += v75;
      }
      while (v88 < v80);
      v97 = (int)((v90 + v87) / (v89 + v87) / (double)v85);
      if (v97 <= 1)
        v97 = 1;
      if (v71 >= v273)
      {
        v99 = 0;
        v100 = 1.0;
        v101 = v265;
        v102 = 1.0;
        v103 = 1.0;
        do
        {
          if (v101 < v69)
          {
            v104 = v86;
            do
            {
              if ((int)v104 < v70)
              {
                v105 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v104 / v75 + v101 / (int)v75 * v76);
                v106 = (double)*(uint64_t *)(v105 + 32);
                v107 = sqrt((double)*(uint64_t *)(v105 + 8));
                *(double *)&v108 = v107 * v106;
                LOWORD(v36) = *(_WORD *)(v105 + 26);
                v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
                v103 = v103 + v107 * v106 * v36;
                v108.i16[0] = *(_WORD *)(v105 + 24);
                v109 = (double)vmovl_s16(v108).i32[0];
                v102 = v102 + fabs(v36 * v107 - sqrt((double)*(uint64_t *)(v105 + 16)) * v109);
                v100 = v100 + sqrt(v106) * sqrt(v109) * 0.1;
                ++v99;
              }
              v104 += v75;
            }
            while (v104 < v79);
          }
          v101 += v75;
        }
        while (v101 < v81);
        v110 = (int)((v103 + v100) / (v102 + v100) / (double)v99);
        if (v110 <= 1)
          v110 = 1;
        if (v97 >= v110)
          v97 = v110;
        if (v267 < v71)
        {
LABEL_76:
          v98 = v86 - v74;
          if (v86 >= v74)
            goto LABEL_103;
          goto LABEL_77;
        }
      }
      else if (v267 < v71)
      {
        goto LABEL_76;
      }
      v111 = 0;
      v112 = 1.0;
      v113 = v263;
      v114 = 1.0;
      v115 = 1.0;
      do
      {
        if ((int)v113 < v69)
        {
          v116 = v86;
          do
          {
            if ((int)v116 < v70)
            {
              v117 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v116 / v75 + v113 / v75 * v76);
              v118 = (double)*(uint64_t *)(v117 + 32);
              v119 = sqrt((double)*(uint64_t *)(v117 + 8));
              *(double *)&v120 = v119 * v118;
              LOWORD(v36) = *(_WORD *)(v117 + 26);
              v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
              v115 = v115 + v119 * v118 * v36;
              v120.i16[0] = *(_WORD *)(v117 + 24);
              v121 = (double)vmovl_s16(v120).i32[0];
              v114 = v114 + fabs(v36 * v119 - sqrt((double)*(uint64_t *)(v117 + 16)) * v121);
              v112 = v112 + sqrt(v118) * sqrt(v121) * 0.1;
              ++v111;
            }
            v116 += v75;
          }
          while (v116 < v79);
        }
        v113 += v75;
      }
      while (v113 < v82);
      v122 = (int)((v115 + v112) / (v114 + v112) / (double)v111);
      if (v122 <= 1)
        v122 = 1;
      if (v97 >= v122)
        v97 = v122;
      v98 = v86 - v74;
      if (v86 >= v74)
      {
LABEL_103:
        v123 = 0;
        v124 = 1.0;
        v125 = v71;
        v126 = 1.0;
        v127 = 1.0;
        do
        {
          if ((int)v125 < v69)
          {
            v128 = v98;
            do
            {
              if (v128 < v70)
              {
                v129 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v128 / (int)v75 + v125 / v75 * v76);
                v130 = (double)*(uint64_t *)(v129 + 32);
                v131 = sqrt((double)*(uint64_t *)(v129 + 8));
                *(double *)&v132 = v131 * v130;
                LOWORD(v36) = *(_WORD *)(v129 + 26);
                v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
                v127 = v127 + v131 * v130 * v36;
                v132.i16[0] = *(_WORD *)(v129 + 24);
                v133 = (double)vmovl_s16(v132).i32[0];
                v126 = v126 + fabs(v36 * v131 - sqrt((double)*(uint64_t *)(v129 + 16)) * v133);
                v124 = v124 + sqrt(v130) * sqrt(v133) * 0.1;
                ++v123;
              }
              v128 += v75;
            }
            while (v128 < (int)(v98 + v73));
          }
          v125 += v75;
        }
        while (v125 < v80);
        v134 = (int)((v127 + v124) / (v126 + v124) / (double)v123);
        if (v134 <= 1)
          v134 = 1;
        if (v97 >= v134)
          v97 = v134;
        if (vars0a < v86)
          goto LABEL_126;
LABEL_115:
        v135 = 0;
        v136 = 1.0;
        v137 = v71;
        v138 = 1.0;
        v139 = 1.0;
        do
        {
          if ((int)v137 < v69)
          {
            v140 = v86 + v74;
            do
            {
              if ((int)v140 < v70)
              {
                v141 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v140 / v75 + v137 / v75 * v76);
                v142 = (double)*(uint64_t *)(v141 + 32);
                v143 = sqrt((double)*(uint64_t *)(v141 + 8));
                *(double *)&v144 = v143 * v142;
                LOWORD(v36) = *(_WORD *)(v141 + 26);
                v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
                v139 = v139 + v143 * v142 * v36;
                v144.i16[0] = *(_WORD *)(v141 + 24);
                v145 = (double)vmovl_s16(v144).i32[0];
                v138 = v138 + fabs(v36 * v143 - sqrt((double)*(uint64_t *)(v141 + 16)) * v145);
                v136 = v136 + sqrt(v142) * sqrt(v145) * 0.1;
                ++v135;
              }
              v140 += v75;
            }
            while (v140 < v86 + v74 + v73);
          }
          v137 += v75;
        }
        while (v137 < v80);
        v146 = (int)((v139 + v136) / (v138 + v136) / (double)v135);
        if (v146 <= 1)
          v146 = 1;
        if (v97 >= v146)
          v97 = v146;
        goto LABEL_126;
      }
LABEL_77:
      if (vars0a >= v86)
        goto LABEL_115;
LABEL_126:
      v147 = 0;
      v148 = 0;
      v149 = v71;
      do
      {
        if ((int)v149 < v69)
        {
          v150 = v86;
          do
          {
            if ((int)v150 < v70)
            {
              v147 += *(_QWORD *)(*(_QWORD *)(v23 + 10352) + 56 * (int)(v150 / v75 + v149 / v75 * v76) + 40);
              ++v148;
            }
            v150 += v75;
          }
          while (v150 < v79);
        }
        v149 += v75;
      }
      while (v149 < v80);
      if (v148)
        v147 = (int)(v147 / v148);
      v151 = 0;
      v152 = 0;
      v153 = v71;
      do
      {
        if ((int)v153 < v69)
        {
          v154 = v86;
          do
          {
            if ((int)v154 < v70)
            {
              v151 += *(_QWORD *)(*(_QWORD *)(v23 + 10352) + 56 * (int)(v154 / v75 + v153 / v75 * v76) + 32);
              ++v152;
            }
            v154 += v75;
          }
          while (v154 < v79);
        }
        v153 += v75;
      }
      while (v153 < v80);
      if (v147 <= 1)
        v155 = 1;
      else
        v155 = v147;
      if (v152)
        v151 = (int)(v151 / v152);
      if (v151 <= 1)
        v83 = 1;
      else
        v83 = v151;
      v84 = (double)v155 / sqrt((double)v83);
      v77 = v77 + v84 * log((double)v97);
      v78 = v78 + v84;
      v74 = v271;
      v73 = v272;
      v71 = v269;
      if ((int)v79 >= v70)
      {
        v71 = v269 + v272;
        if ((int)(v269 + v272) < v69)
          goto LABEL_60;
        if (v78 <= 0.0)
        {
          v157 = 1;
        }
        else
        {
          v156 = exp(v77 / v78);
          v74 = v271;
          v73 = v272;
          v157 = (uint64_t)v156;
        }
        if (v157 <= 1)
          v158 = 1;
        else
          v158 = v157;
        v159 = mi_size_high[v257];
        v160 = mi_size_wide[*v256];
        v161 = v259[1];
        v162 = v159 >> 1;
        v262 = v159;
        v264 = v159 >> 1;
        v274 = v69 - v159 - (v159 >> 1);
        v163 = 1;
        while (2)
        {
          v164 = 0;
          v258 = v163;
          v260 = v158;
          v165 = (double)v158;
          v166 = 0.0;
          v167 = 0.0;
LABEL_159:
          v168 = 0;
          v169 = v164 + v262;
          v268 = v164 - v162;
          v270 = v164;
          v170 = v164 - v162 + v262;
          v266 = v164 + v162;
          v171 = v164 + v162 + v262;
LABEL_164:
          v174 = 0;
          v175 = v168;
          v168 += v73;
          v176 = 1.0;
          v177 = v164;
          v178 = 1.0;
          v179 = 1.0;
          do
          {
            if ((int)v177 < v69)
            {
              v180 = v175;
              do
              {
                if ((int)v180 < v70)
                {
                  v181 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v180 / v160 + v177 / v160 * v161);
                  v182 = (double)*(uint64_t *)(v181 + 32);
                  v183 = sqrt((double)*(uint64_t *)(v181 + 8));
                  *(double *)&v184 = v183 * v182;
                  LOWORD(v36) = *(_WORD *)(v181 + 26);
                  v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
                  v179 = v179 + v183 * v182 * v36;
                  v184.i16[0] = *(_WORD *)(v181 + 24);
                  v185 = (double)vmovl_s16(v184).i32[0];
                  v178 = v178 + fabs(v36 * v183 - sqrt((double)*(uint64_t *)(v181 + 16)) * v185);
                  v176 = v176 + sqrt(v182) * sqrt(v185) * 0.1;
                  ++v174;
                }
                v180 += v160;
              }
              while (v180 < v168);
            }
            v177 += v160;
          }
          while (v177 < v169);
          v186 = (int)((v179 + v176) / (v178 + v176) / (double)v174);
          if (v186 <= 1)
            v186 = 1;
          if (v164 >= v162)
          {
            v188 = 0;
            v189 = 1.0;
            v190 = v268;
            v191 = 1.0;
            v192 = 1.0;
            do
            {
              if (v190 < v69)
              {
                v193 = v175;
                do
                {
                  if ((int)v193 < v70)
                  {
                    v194 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v193 / v160 + v190 / (int)v160 * v161);
                    v195 = (double)*(uint64_t *)(v194 + 32);
                    v196 = sqrt((double)*(uint64_t *)(v194 + 8));
                    *(double *)&v197 = v196 * v195;
                    LOWORD(v36) = *(_WORD *)(v194 + 26);
                    v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
                    v192 = v192 + v196 * v195 * v36;
                    v197.i16[0] = *(_WORD *)(v194 + 24);
                    v198 = (double)vmovl_s16(v197).i32[0];
                    v191 = v191 + fabs(v36 * v196 - sqrt((double)*(uint64_t *)(v194 + 16)) * v198);
                    v189 = v189 + sqrt(v195) * sqrt(v198) * 0.1;
                    ++v188;
                  }
                  v193 += v160;
                }
                while (v193 < v168);
              }
              v190 += v160;
            }
            while (v190 < v170);
            v199 = (int)((v192 + v189) / (v191 + v189) / (double)v188);
            if (v199 <= 1)
              v199 = 1;
            if (v186 >= v199)
              v186 = v199;
            if (v274 >= v164)
              goto LABEL_190;
LABEL_175:
            v187 = v175 - v74;
            if (v175 < v74)
              goto LABEL_176;
LABEL_202:
            v212 = 0;
            v213 = 1.0;
            v214 = v164;
            v215 = 1.0;
            v216 = 1.0;
            do
            {
              if ((int)v214 < v69)
              {
                v217 = v187;
                do
                {
                  if (v217 < v70)
                  {
                    v218 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v217 / (int)v160 + v214 / v160 * v161);
                    v219 = (double)*(uint64_t *)(v218 + 32);
                    v220 = sqrt((double)*(uint64_t *)(v218 + 8));
                    *(double *)&v221 = v220 * v219;
                    LOWORD(v36) = *(_WORD *)(v218 + 26);
                    v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
                    v216 = v216 + v220 * v219 * v36;
                    v221.i16[0] = *(_WORD *)(v218 + 24);
                    v222 = (double)vmovl_s16(v221).i32[0];
                    v215 = v215 + fabs(v36 * v220 - sqrt((double)*(uint64_t *)(v218 + 16)) * v222);
                    v213 = v213 + sqrt(v219) * sqrt(v222) * 0.1;
                    ++v212;
                  }
                  v217 += v160;
                }
                while (v217 < (int)(v187 + v73));
              }
              v214 += v160;
            }
            while (v214 < v169);
            v223 = (int)((v216 + v213) / (v215 + v213) / (double)v212);
            if (v223 <= 1)
              v223 = 1;
            if (v186 >= v223)
              v186 = v223;
            if (vars0a < v175)
            {
LABEL_225:
              v236 = 10.0;
              v237 = v164;
              do
              {
                if ((int)v237 < v69)
                {
                  v238 = v175;
                  do
                  {
                    if ((int)v238 < v70)
                    {
                      v239 = *(double *)(*(_QWORD *)(v23 + 10352) + 56 * (int)(v238 / v160 + v237 / v160 * v161) + 48);
                      if (v239 >= 1.0 && v239 < v236)
                        v236 = *(double *)(*(_QWORD *)(v23 + 10352) + 56 * (int)(v238 / v160 + v237 / v160 * v161) + 48);
                    }
                    v238 += v160;
                  }
                  while (v238 < v168);
                }
                v237 += v160;
              }
              while (v237 < v169);
              v240 = 1.0;
              if (v236 >= 1.0)
              {
                v240 = 10.0;
                v246 = v164;
                do
                {
                  if ((int)v246 < v69)
                  {
                    v247 = v175;
                    do
                    {
                      if ((int)v247 < v70)
                      {
                        v248 = *(double *)(*(_QWORD *)(v23 + 10352) + 56 * (int)(v247 / v160 + v246 / v160 * v161) + 48);
                        if (v248 >= 1.0 && v248 < v240)
                          v240 = *(double *)(*(_QWORD *)(v23 + 10352)
                                           + 56 * (int)(v247 / v160 + v246 / v160 * v161)
                                           + 48);
                      }
                      v247 += v160;
                    }
                    while (v247 < v168);
                  }
                  v246 += v160;
                }
                while (v246 < v169);
              }
              v241 = fmax(fmin(v165 / (double)v186, 4.0), 0.25);
              if (v241 >= 1.0 / v240)
              {
                v242 = 0;
                v243 = 0;
                v244 = v164;
                do
                {
                  if ((int)v244 < v69)
                  {
                    v245 = v175;
                    do
                    {
                      if ((int)v245 < v70)
                      {
                        v242 += *(_QWORD *)(*(_QWORD *)(v23 + 10352)
                                          + 56 * (int)(v245 / v160 + v244 / v160 * v161)
                                          + 40);
                        ++v243;
                      }
                      v245 += v160;
                    }
                    while (v245 < v168);
                  }
                  v244 += v160;
                }
                while (v244 < v169);
                if (v243)
                  v242 = (int)(v242 / v243);
                v172 = 0;
                v249 = 0;
                if (v242 <= 1)
                  LODWORD(v242) = 1;
                v250 = v164;
                do
                {
                  if ((int)v250 < v69)
                  {
                    v251 = v175;
                    do
                    {
                      if ((int)v251 < v70)
                      {
                        v172 += *(_QWORD *)(*(_QWORD *)(v23 + 10352)
                                          + 56 * (int)(v251 / v160 + v250 / v160 * v161)
                                          + 32);
                        ++v249;
                      }
                      v251 += v160;
                    }
                    while (v251 < v168);
                  }
                  v250 += v160;
                }
                while (v250 < v169);
                if (v249)
                  v172 = (int)(v172 / v249);
                if (v172 <= 1)
                  LODWORD(v172) = 1;
                v173 = (double)(int)v242 / sqrt((double)(int)v172);
                v167 = v167 + v173 * log((double)(int)(v165 / v241));
                v166 = v166 + v173;
                v74 = v271;
                v73 = v272;
                v162 = v264;
                v164 = v270;
              }
              if ((int)v168 >= v70)
              {
                v164 += v73;
                if (v164 >= v69)
                {
                  v158 = v260;
                  if (v166 > 0.0)
                  {
                    v252 = exp(v167 / v166);
                    v162 = v264;
                    v74 = v271;
                    v73 = v272;
                    v158 = (uint64_t)v252;
                  }
                  v163 = 0;
                  if (v158 <= 1)
                    v158 = 1;
                  if ((v258 & 1) == 0)
                    goto LABEL_272;
                  continue;
                }
                goto LABEL_159;
              }
              goto LABEL_164;
            }
          }
          else
          {
            if (v274 < v164)
              goto LABEL_175;
LABEL_190:
            v200 = 0;
            v201 = 1.0;
            v202 = v266;
            v203 = 1.0;
            v204 = 1.0;
            do
            {
              if ((int)v202 < v69)
              {
                v205 = v175;
                do
                {
                  if ((int)v205 < v70)
                  {
                    v206 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v205 / v160 + v202 / v160 * v161);
                    v207 = (double)*(uint64_t *)(v206 + 32);
                    v208 = sqrt((double)*(uint64_t *)(v206 + 8));
                    *(double *)&v209 = v208 * v207;
                    LOWORD(v36) = *(_WORD *)(v206 + 26);
                    v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
                    v204 = v204 + v208 * v207 * v36;
                    v209.i16[0] = *(_WORD *)(v206 + 24);
                    v210 = (double)vmovl_s16(v209).i32[0];
                    v203 = v203 + fabs(v36 * v208 - sqrt((double)*(uint64_t *)(v206 + 16)) * v210);
                    v201 = v201 + sqrt(v207) * sqrt(v210) * 0.1;
                    ++v200;
                  }
                  v205 += v160;
                }
                while (v205 < v168);
              }
              v202 += v160;
            }
            while (v202 < v171);
            v211 = (int)((v204 + v201) / (v203 + v201) / (double)v200);
            if (v211 <= 1)
              v211 = 1;
            if (v186 >= v211)
              v186 = v211;
            v187 = v175 - v74;
            if (v175 >= v74)
              goto LABEL_202;
LABEL_176:
            if (vars0a < v175)
              goto LABEL_225;
          }
          break;
        }
        v224 = 0;
        v225 = 1.0;
        v226 = v164;
        v227 = 1.0;
        v228 = 1.0;
        do
        {
          if ((int)v226 < v69)
          {
            v229 = v175 + v74;
            do
            {
              if ((int)v229 < v70)
              {
                v230 = *(_QWORD *)(v23 + 10352) + 56 * (int)(v229 / v160 + v226 / v160 * v161);
                v231 = (double)*(uint64_t *)(v230 + 32);
                v232 = sqrt((double)*(uint64_t *)(v230 + 8));
                *(double *)&v233 = v232 * v231;
                LOWORD(v36) = *(_WORD *)(v230 + 26);
                v36 = (double)vmovl_s16(*(int16x4_t *)&v36).i32[0];
                v228 = v228 + v232 * v231 * v36;
                v233.i16[0] = *(_WORD *)(v230 + 24);
                v234 = (double)vmovl_s16(v233).i32[0];
                v227 = v227 + fabs(v36 * v232 - sqrt((double)*(uint64_t *)(v230 + 16)) * v234);
                v225 = v225 + sqrt(v231) * sqrt(v234) * 0.1;
                ++v224;
              }
              v229 += v160;
            }
            while (v229 < v175 + v74 + v73);
          }
          v226 += v160;
        }
        while (v226 < v169);
        v235 = (int)((v228 + v225) / (v227 + v225) / (double)v224);
        if (v235 <= 1)
          v235 = 1;
        if (v186 >= v235)
          v186 = v235;
        goto LABEL_225;
      }
    }
  }
LABEL_271:
  v158 = 1;
LABEL_272:
  *((_QWORD *)v256 + 1) = v158;
  *v255 = 0;
  aom_free_frame_buffer(v254[606] + 1248);
  if (*v254)
    free(*(void **)(*v254 - 8));
  *v254 = 0;
}

void av1_set_mb_ur_variance(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  size_t v10;
  void *v11;
  void *v12;
  int32x2_t *v13;
  int32x2_t *v14;
  double v15;
  uint64_t v16;
  double v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  int32x2_t *v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  double v45;
  double v46;
  int v47;
  double v48;
  double v49;
  double v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  int32x2_t *v62;
  int32x2_t **v63;
  unint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  double v68;
  int32x2_t *v69;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  int32x2_t *v79;
  int32x2_t *v80;
  int32x2_t *v81;
  uint64_t i;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v87;
  int32x2_t *v88;
  int32x2_t *v89;
  int32x2_t *v90;
  int32x2_t v91;
  int32x2_t v92;
  int32x2_t v93;
  int64x2_t v94;
  float64x2_t v95;
  int32x2_t v96;
  float64x2_t v97;
  double v98;
  double v99;
  uint64_t v100;
  double v101;
  int32x4_t *v102;
  unsigned int v103;
  int32x4_t *v104;
  uint64_t v105;
  int32x4_t v106;
  float64x2_t v107;
  int32x4_t *v110;
  int32x4_t *v111;
  uint64_t j;
  uint64_t v113;
  int32x4_t *v114;
  int32x4_t *v115;
  int32x4_t v116;
  int32x4_t v117;
  int64x2_t v118;
  float64x2_t v119;
  float64x2_t v120;
  double v121;
  double v122;
  int v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int32x2_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  _DWORD v145[2];
  unint64_t v146;
  int32x2_t *v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 239088;
  v124 = a1 + 264696;
  v3 = *(_QWORD *)(a1 + 265672);
  v139 = *(_QWORD *)(v3 + 40);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 263720) + 28);
  v5 = *(unsigned int *)(v3 + 32);
  v136 = mi_size_wide[v4];
  v6 = (((int)v136 + *(_DWORD *)(a1 + 239576) - 1) / (int)v136);
  v127 = mi_size_high[v4];
  v7 = (((int)v127 + *(_DWORD *)(a1 + 239572) - 1) / (int)v127);
  v123 = v7 * v6;
  if ((v7 * v6) > 0x7FFFFFFA)
  {
    v146 = 0;
    aom_internal_error(*(_QWORD *)v2, 2, "Failed to allocate mb_delta_q[0]");
    v8 = 0;
    v9 = 1;
    goto LABEL_12;
  }
  v10 = 4 * (int)v7 * (int)v6;
  if (v10 <= 0x1FFFFFFE9
    && (v11 = malloc_type_malloc(v10 + 23, 0x70F2D1FBuLL)) != 0
    && (v8 = ((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v8 - 8) = v11, v8))
  {
    bzero((void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF0), v10);
    v9 = 0;
    v146 = v8;
  }
  else
  {
    v146 = 0;
    aom_internal_error(*(_QWORD *)v2, 2, "Failed to allocate mb_delta_q[0]");
    v8 = 0;
    v9 = 1;
    if (v10 > 0x1FFFFFFE9)
      goto LABEL_12;
  }
  v12 = malloc_type_malloc(v10 + 23, 0x70F2D1FBuLL);
  if (v12)
  {
    *(_QWORD *)((((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0) - 8) = v12;
    if ((((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0) != 0)
    {
      v13 = (int32x2_t *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0);
      bzero(v13, v10);
      v14 = v13;
      v125 = 0;
      v147 = v13;
      v15 = 0.0;
      v16 = v127;
      v17 = 0.0;
      if ((int)v7 < 1)
        goto LABEL_45;
      goto LABEL_13;
    }
  }
LABEL_12:
  v147 = 0;
  aom_internal_error(*(_QWORD *)v2, 2, "Failed to allocate mb_delta_q[1]");
  v14 = 0;
  v125 = 1;
  v15 = 0.0;
  v16 = v127;
  v17 = 0.0;
  if ((int)v7 < 1)
    goto LABEL_45;
LABEL_13:
  if ((int)v6 >= 1)
  {
    v133 = v8;
    v126 = v7;
    v130 = 0;
    v18 = 0;
    v138 = 0;
    v19 = 0;
    v132 = v6;
    v129 = v14;
    do
    {
      v20 = 0;
      v21 = 0;
      v144 = 0;
      v135 = v19 * v6;
      v134 = v19 * v16;
      v128 = v19 + 1;
      v22 = ((v19 + 1) * v16);
      v140 = v22;
      do
      {
        v137 = v18;
        v35 = *(int *)(v2 + 484);
        _CF = v134 >= v35 || v134 >= v22;
        if (_CF)
        {
          v23 = v14;
          v24 = v21 + 1;
          v25 = 0.0;
          v26 = 0.0;
        }
        else
        {
          v37 = v21 * v136;
          v38 = v21 + 1;
          v25 = 0.0;
          if ((int)v136 + (int)v136 * (int)v21 <= (v21 * v136) || (v39 = *(int *)(v2 + 488), v37 >= v39))
          {
            v23 = v14;
            v26 = 0.0;
            v24 = v21 + 1;
          }
          else
          {
            v131 = v21;
            v40 = v38 * v136;
            v26 = 0.0;
            v41 = v130;
            v143 = v20;
            v141 = v21 * v136;
            v142 = v21 + 1;
            do
            {
              if (v37 < (int)v39)
              {
                v42 = v144 + 2;
                do
                {
                  v43 = av1_ss_size_lookup[2 * *(int *)(a1 + 86500) + 12 + *(int *)(a1 + 86504)];
                  v145[0] = 0;
                  v44 = ((*(unsigned int (**)(uint64_t, uint64_t, void *, _QWORD, _DWORD *))(*(_QWORD *)a1 + (v43 << 7) + 51408))(v139 + 4 * (int)v5 * (int)v41 + v20, v5, &AV1_VAR_OFFS, 0, v145)+ (1 << num_pels_log2_lookup_8[v43] >> 1)) >> num_pels_log2_lookup_8[v43];
                  if (v44 <= 1)
                    v44 = 1;
                  v25 = v25 + log((double)v44);
                  v26 = v26 + 1.0;
                  v39 = *(int *)(v2 + 488);
                  if (v42 >= v39)
                    break;
                  v20 += 8;
                  _CF = v42 >= v40;
                  v42 += 2;
                }
                while (!_CF);
                LODWORD(v35) = *(_DWORD *)(v2 + 484);
                v20 = v143;
                v22 = v140;
                v37 = v141;
                v38 = v142;
              }
              v41 += 2;
            }
            while ((uint64_t)v41 < (int)v35 && v41 < v22);
            v23 = v129;
            v24 = v38;
            v21 = v131;
          }
        }
        v27 = v21 + v135;
        v28 = exp(v25 / v26);
        v29 = exp(v28 * -0.004898) * -98.0 + 131.728;
        if (v29 >= 0.0)
          v30 = 0.5;
        else
          v30 = -0.5;
        v31 = 4 * v27;
        *(_DWORD *)(v133 + v31) = (int)(v29 + v30);
        v32 = exp(v28 * -0.003093) * -68.8 + 180.4;
        if (v32 >= 0.0)
          v33 = 0.5;
        else
          v33 = -0.5;
        v34 = v32 + v33;
        v14 = v23;
        v23->i32[(unint64_t)v31 / 4] = (int)v34;
        v138 += *(_DWORD *)(v133 + v31);
        v18 = v137 + (int)v34;
        v144 += v136;
        v20 += 4 * v136;
        v21 = v24;
      }
      while (v24 != v132);
      v6 = v132;
      v16 = v127;
      v130 += v127;
      v19 = v128;
    }
    while (v128 != v126);
    v17 = (double)v138;
    v15 = (double)v18;
    v7 = v126;
    v8 = v133;
  }
LABEL_45:
  v45 = v17 / (double)v123;
  if (v45 >= 0.0)
    v46 = 0.5;
  else
    v46 = -0.5;
  v47 = (int)(v45 + v46);
  v48 = v15 / (double)v123;
  if (v48 >= 0.0)
    v49 = 0.5;
  else
    v49 = -0.5;
  v50 = v48 + v49;
  v145[0] = v47;
  v145[1] = (int)v50;
  v51 = *(_DWORD *)v124;
  v52 = 255 - *(_DWORD *)v124;
  v53 = (int)v50 - v47;
  if (*(_DWORD *)v124 < (int)v50)
    v54 = (int)v50 - v47;
  else
    v54 = 255 - (int)v50;
  if (v51 >= (int)v50)
  {
    v55 = 0;
  }
  else
  {
    v52 = *(_DWORD *)v124 - v47;
    v55 = 1;
  }
  if (v51 < (int)v50)
    v56 = 2;
  else
    v56 = 1;
  if (v51 >= v47)
    v57 = v54;
  else
    v57 = v47;
  if (v51 >= v47)
    v58 = v52;
  else
    v58 = *(_DWORD *)v124;
  if (v51 >= v47)
    v59 = v55;
  else
    v59 = 0;
  if (v51 >= v47)
    v60 = v56;
  else
    v60 = 0;
  if ((int)v7 >= 1 && (int)v6 >= 1)
  {
    v63 = (int32x2_t **)(a1 + 637984);
    *(double *)&v64 = (double)v57;
    v65 = (double)v58 / (double)v57;
    LOBYTE(v64) = *(_BYTE *)(v124 + 42);
    v66 = (double)v64 / 100.0;
    if (v59)
    {
      v67 = 0;
      v68 = (double)v47 + v65 * (double)v53;
      v69 = *v63;
      v70 = 4 * v6;
      v71 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v65, 0);
      v72 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v68, 0);
      v73 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v66, 0);
      __asm
      {
        FMOV            V16.2D, #-0.5
        FMOV            V17.2D, #0.5
      }
      v79 = (int32x2_t *)v8;
      v80 = v14;
      v81 = v69;
      while (v6 >= 4)
      {
        v83 = (uint64_t)v69 + v70 * v67;
        v84 = v83 - (v70 * v67 + v8);
        v85 = v83 - ((_QWORD)v14 + v70 * v67);
        if (v84 < 8 || v85 < 8)
        {
          for (i = 0; i != v6; ++i)
          {
LABEL_95:
            v98 = v66 * ((double)v79->i32[i] + v65 * (double)(v80->i32[i] - v79->i32[i]) - v68);
            v99 = v98 + 0.5;
            if (v98 < 0.0)
              v99 = v98 + -0.5;
            v81->i32[i] = (int)v99;
          }
          goto LABEL_84;
        }
        v87 = v6 & 0xFFFFFFFE;
        v88 = v79;
        v89 = v80;
        v90 = v81;
        do
        {
          v91 = *v88++;
          v92 = v91;
          v93 = *v89++;
          v94.i64[0] = v92.i32[0];
          v94.i64[1] = v92.i32[1];
          v95 = vcvtq_f64_s64(v94);
          v96 = vsub_s32(v93, v92);
          v94.i64[0] = v96.i32[0];
          v94.i64[1] = v96.i32[1];
          v97 = vsubq_f64(vmlaq_f64(v95, vcvtq_f64_s64(v94), v71), v72);
          *v90++ = vmovn_s64(vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_n_f64(v97, v66)), (int8x16_t)vmlaq_f64(_Q16, v97, v73), (int8x16_t)vmlaq_f64(_Q17, v97, v73))));
          v87 -= 2;
        }
        while (v87);
        i = v6 & 0xFFFFFFFE;
        if (i != v6)
          goto LABEL_95;
LABEL_84:
        ++v67;
        v81 = (int32x2_t *)((char *)v81 + v70);
        v80 = (int32x2_t *)((char *)v80 + v70);
        v79 = (int32x2_t *)((char *)v79 + v70);
        if (v67 == v7)
          goto LABEL_77;
      }
      i = 0;
      goto LABEL_95;
    }
    v100 = 0;
    v101 = v65 * v66;
    v102 = (int32x4_t *)*(&v146 + v60);
    v103 = v145[v60];
    v104 = (int32x4_t *)*v63;
    v105 = 4 * v6;
    v106 = vdupq_n_s32(v103);
    v107 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v101, 0);
    __asm
    {
      FMOV            V5.2D, #-0.5
      FMOV            V6.2D, #0.5
    }
    v110 = v102;
    v111 = v104;
    while (v6 >= 4)
    {
      if ((unint64_t)(&v104->i8[v105 * v100] - &v102->i8[v105 * v100]) < 0x10)
      {
        for (j = 0; j != v6; ++j)
        {
LABEL_108:
          v121 = v101 * (double)(int)(v110->i32[j] - v103);
          v122 = v121 + 0.5;
          if (v121 < 0.0)
            v122 = v121 + -0.5;
          v111->i32[j] = (int)v122;
        }
        goto LABEL_100;
      }
      v113 = v6 & 0xFFFFFFFC;
      v114 = v110;
      v115 = v111;
      do
      {
        v116 = *v114++;
        v117 = vsubq_s32(v116, v106);
        v118.i64[0] = v117.i32[2];
        v118.i64[1] = v117.i32[3];
        v119 = vcvtq_f64_s64(v118);
        v118.i64[0] = v117.i32[0];
        v118.i64[1] = v117.i32[1];
        v120 = vcvtq_f64_s64(v118);
        *v115++ = vuzp1q_s32((int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_n_f64(v120, v101)), (int8x16_t)vmlaq_f64(_Q5, v120, v107), (int8x16_t)vmlaq_f64(_Q6, v120, v107))), (int32x4_t)vcvtq_s64_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_f64(vmulq_n_f64(v119, v101)), (int8x16_t)vmlaq_f64(_Q5, v119, v107), (int8x16_t)vmlaq_f64(_Q6, v119, v107))));
        v113 -= 4;
      }
      while (v113);
      j = v6 & 0xFFFFFFFC;
      if (j != v6)
        goto LABEL_108;
LABEL_100:
      ++v100;
      v111 = (int32x4_t *)((char *)v111 + v105);
      v110 = (int32x4_t *)((char *)v110 + v105);
      if (v100 == v7)
        goto LABEL_77;
    }
    j = 0;
    goto LABEL_108;
  }
LABEL_77:
  if ((v9 & 1) != 0)
  {
    if ((v125 & 1) != 0)
      return;
LABEL_81:
    free(*(void **)&v14[-1]);
    return;
  }
  v62 = v14;
  free(*(void **)(v8 - 8));
  v14 = v62;
  if ((v125 & 1) == 0)
    goto LABEL_81;
}

void av1_free_ref_frame_buffers(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(a1 + 96))
  {
    v2 = 0;
    v3 = 1248;
    do
    {
      v4 = *(_QWORD *)(a1 + 88);
      v5 = v4 + v3;
      if (*(int *)(v4 + v3 - 1248) >= 1)
      {
        v7 = *(_QWORD *)(v5 - 24);
        v6 = v5 - 24;
        if (v7)
        {
          (*(void (**)(_QWORD, uint64_t))(a1 + 80))(*(_QWORD *)(a1 + 64), v6);
          v4 = *(_QWORD *)(a1 + 88);
          v8 = v4 + v3;
          *(_DWORD *)(v4 + v3 - 1248) = 0;
          *(_QWORD *)(v8 - 16) = 0;
          *(_QWORD *)(v8 - 8) = 0;
          *(_QWORD *)(v8 - 24) = 0;
        }
      }
      v9 = *(_QWORD *)(v4 + v3 - 1176);
      if (v9)
        free(*(void **)(v9 - 8));
      v10 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(v10 + v3 - 1176) = 0;
      v11 = *(_QWORD *)(v10 + v3 - 1168);
      if (v11)
      {
        free(*(void **)(v11 - 8));
        v10 = *(_QWORD *)(a1 + 88);
      }
      *(_QWORD *)(v10 + v3 - 1168) = 0;
      aom_free_frame_buffer(v10 + v3);
      ++v2;
      v3 += 22728;
    }
    while (v2 < *(unsigned __int8 *)(a1 + 96));
  }
  v12 = *(_QWORD *)(a1 + 88);
  if (v12)
    free(*(void **)(v12 - 8));
  *(_QWORD *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
}

void av1_free_cdef_buffers(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  pthread_mutex_t *v19;
  uint64_t v20;
  pthread_cond_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = a1 + 23708;
  v7 = *(unsigned int *)(a1 + 23708);
  v8 = *(_QWORD *)(a1 + 23480);
  if (v8)
    free(*(void **)(v8 - 8));
  *(_QWORD *)(a1 + 23480) = 0;
  v9 = *(_QWORD *)(a1 + 23488);
  if (v9)
    free(*(void **)(v9 - 8));
  *(_QWORD *)(a1 + 23488) = 0;
  v10 = *(_QWORD *)(a1 + 23496);
  if (v10)
    free(*(void **)(v10 - 8));
  *(_QWORD *)(a1 + 23496) = 0;
  v11 = *(_QWORD *)(a1 + 23504);
  if (v11)
    free(*(void **)(v11 - 8));
  *(_QWORD *)(a1 + 23504) = 0;
  v12 = *(_QWORD *)(a1 + 23456);
  if (v12)
    free(*(void **)(v12 - 8));
  *(_QWORD *)(a1 + 23456) = 0;
  v13 = *(_QWORD *)(a1 + 23464);
  if (v13)
    free(*(void **)(v13 - 8));
  *(_QWORD *)(a1 + 23464) = 0;
  v14 = *(_QWORD *)(a1 + 23472);
  if (v14)
    free(*(void **)(v14 - 8));
  *(_QWORD *)(a1 + 23472) = 0;
  v15 = *(_QWORD *)(a3 + 8);
  if (v15)
  {
    if ((int)v7 < 1)
      goto LABEL_26;
    v16 = 0;
    v17 = 24 * v7;
    do
    {
      v18 = *(_QWORD *)(a3 + 8);
      v19 = *(pthread_mutex_t **)(v18 + v16);
      if (v19)
      {
        pthread_mutex_destroy(v19);
        v18 = *(_QWORD *)(a3 + 8);
        v20 = *(_QWORD *)(v18 + v16);
        if (v20)
        {
          free(*(void **)(v20 - 8));
          v18 = *(_QWORD *)(a3 + 8);
        }
      }
      v21 = *(pthread_cond_t **)(v18 + v16 + 8);
      if (v21)
      {
        pthread_cond_destroy(v21);
        v22 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + v16 + 8);
        if (v22)
          free(*(void **)(v22 - 8));
      }
      v16 += 24;
    }
    while (v17 != v16);
    v15 = *(_QWORD *)(a3 + 8);
    if (v15)
LABEL_26:
      free(*(void **)(v15 - 8));
    *(_QWORD *)(a3 + 8) = 0;
  }
  v23 = *(unsigned int *)(v6 + 4);
  if ((int)v23 >= 2 && *a2)
  {
    v24 = v23 + 1;
    do
    {
      v25 = *a2 + 488 * (v24 - 2);
      v28 = *(_QWORD *)(v25 + 40);
      v27 = (_QWORD *)(v25 + 40);
      v26 = v28;
      if (v28)
        free(*(void **)(v26 - 8));
      *v27 = 0;
      v29 = *(v27 - 3);
      if (v29)
        free(*(void **)(v29 - 8));
      *(v27 - 3) = 0;
      v30 = *(v27 - 2);
      if (v30)
        free(*(void **)(v30 - 8));
      *(v27 - 2) = 0;
      v31 = *(v27 - 1);
      if (v31)
        free(*(void **)(v31 - 8));
      *(v27 - 1) = 0;
      --v24;
    }
    while (v24 > 2);
    if (*a2)
      free(*(void **)(*a2 - 8));
    *a2 = 0;
  }
}

void av1_alloc_cdef_buffers(uint64_t a1, unint64_t *a2, uint64_t a3, int a4, int a5)
{
  unsigned int *v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  signed int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t i;
  unsigned int v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  pthread_mutex_t *v62;
  uint64_t v63;
  pthread_cond_t *v64;
  uint64_t v65;
  void *v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  void *v72;
  unint64_t v73;
  unint64_t v74;
  void *v75;
  unint64_t v76;
  unint64_t v77;
  void *v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  unint64_t v82;
  unint64_t v83;
  void *v84;
  unint64_t v85;
  void *v86;
  unint64_t v87;
  uint64_t j;
  uint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t v92;
  void *v93;
  unint64_t v94;
  unint64_t *v95;
  uint64_t v96;
  unint64_t v97;
  void *v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  unint64_t v102;
  unint64_t v103;
  void *v104;
  unint64_t v105;
  uint64_t v106;
  void *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  unint64_t v112;
  pthread_mutex_t *v113;
  void *v114;
  unint64_t v115;
  pthread_cond_t *v116;
  _BOOL4 v117;
  int v118;
  int v119;
  int v120;
  int *v121;
  unsigned int v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  int v126;
  __int128 v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v10 = (unsigned int *)(a1 + 23708);
  v11 = *(_QWORD *)(a1 + 24680);
  v126 = *(unsigned __int8 *)(v11 + 77);
  v129 = 0uLL;
  v130 = 0;
  v127 = 0uLL;
  v128 = 0;
  v12 = *(_DWORD *)(a1 + 532);
  v14 = v12 + 15;
  v13 = v12 < -15;
  v15 = v12 + 30;
  if (!v13)
    v15 = v14;
  v16 = v15 >> 4;
  if (*(_BYTE *)(v11 + 67))
  {
    v117 = a4 > 1;
    v17 = 96;
    if (a4 > 1)
      v17 = 32 * v16;
    if (*(_DWORD *)(a1 + 25288))
    {
      v119 = 0;
      v125 = 0;
      v18 = 0;
      v19 = *(_DWORD *)(a1 + 23712);
      if (!*(_QWORD *)(a1 + 23536))
        goto LABEL_20;
    }
    else
    {
      v20 = (4 * *(_DWORD *)(a1 + 536) + 15) & 0xFFFFFFF0;
      v21 = v17 * v20;
      *(_QWORD *)&v129 = v21;
      v125 = 0x4000;
      *(_QWORD *)&v127 = 0x4000;
      if (v126)
      {
        v119 = 1;
        v18 = 38016;
        v19 = *(_DWORD *)(a1 + 23712);
        if (v21 == *(_QWORD *)(a1 + 23536))
          goto LABEL_20;
      }
      else
      {
        v22 = 0;
        v23 = *(_DWORD *)(v11 + 96);
        v18 = 38016;
        v125 = 0x4000;
        do
        {
          v24 = v22;
          v25 = 8 * v22;
          *(_QWORD *)((char *)&v129 + v25 + 8) = v17 * (v20 >> v23);
          *(_QWORD *)((char *)&v127 + v25 + 8) = 16 * (256 << (2 - v23));
          v22 = v24 + 1;
        }
        while (v24 != 1);
        v119 = 1;
        v19 = *(_DWORD *)(a1 + 23712);
        if (v21 == *(_QWORD *)(a1 + 23536))
          goto LABEL_20;
      }
    }
  }
  else
  {
    v119 = 0;
    v125 = 0;
    v18 = 0;
    v117 = a4 > 1;
    v19 = *(_DWORD *)(a1 + 23712);
    if (!*(_QWORD *)(a1 + 23536))
      goto LABEL_20;
  }
  v26 = *(_QWORD *)(a1 + 23480);
  if (v26)
    free(*(void **)(v26 - 8));
  *(_QWORD *)(a1 + 23480) = 0;
LABEL_20:
  if (*((_QWORD *)&v129 + 1) == *(_QWORD *)(a1 + 23544))
  {
    if (v130 == *(_QWORD *)(a1 + 23552))
      goto LABEL_22;
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 23488);
    if (v27)
      free(*(void **)(v27 - 8));
    *(_QWORD *)(a1 + 23488) = 0;
    if (v130 == *(_QWORD *)(a1 + 23552))
    {
LABEL_22:
      if (*(_QWORD *)(a1 + 23560) == v18)
        goto LABEL_23;
      goto LABEL_31;
    }
  }
  v28 = *(_QWORD *)(a1 + 23496);
  if (v28)
    free(*(void **)(v28 - 8));
  *(_QWORD *)(a1 + 23496) = 0;
  if (*(_QWORD *)(a1 + 23560) == v18)
  {
LABEL_23:
    v123 = v18;
    if (v125 == *(_QWORD *)(a1 + 23512))
      goto LABEL_37;
    goto LABEL_34;
  }
LABEL_31:
  v29 = *(_QWORD *)(a1 + 23504);
  if (v29)
    free(*(void **)(v29 - 8));
  *(_QWORD *)(a1 + 23504) = 0;
  v123 = v18;
  if (v125 != *(_QWORD *)(a1 + 23512))
  {
LABEL_34:
    v30 = *(_QWORD *)(a1 + 23456);
    if (v30)
      free(*(void **)(v30 - 8));
    *(_QWORD *)(a1 + 23456) = 0;
  }
LABEL_37:
  v122 = a4;
  v121 = (int *)v10;
  v31 = a2;
  v32 = *((_QWORD *)&v127 + 1);
  if (*((_QWORD *)&v127 + 1) != *(_QWORD *)(a1 + 23520))
  {
    v33 = *(_QWORD *)(a1 + 23464);
    if (v33)
      free(*(void **)(v33 - 8));
    *(_QWORD *)(a1 + 23464) = 0;
  }
  v120 = v16;
  v124 = (_QWORD *)(a1 + 23512);
  v34 = v128;
  v35 = v123;
  if (v128 != *(_QWORD *)(a1 + 23528))
  {
    v36 = *(_QWORD *)(a1 + 23472);
    if (v36)
      free(*(void **)(v36 - 8));
    *(_QWORD *)(a1 + 23472) = 0;
  }
  v118 = a5;
  if (a5)
  {
    v37 = *a2;
    if (*a2)
    {
      if (v19 == v122)
      {
        if (v117)
        {
          for (i = v122 + 1; i > 2; --i)
          {
            v39 = i - 2;
            v40 = *v31;
            if (*(_QWORD *)(a1 + 23560) == v35)
            {
              v41 = (_QWORD *)(v40 + 488 * v39 + 16);
              if (v125 == *v124)
                goto LABEL_54;
            }
            else
            {
              v42 = v40 + 488 * v39;
              v45 = *(_QWORD *)(v42 + 40);
              v44 = (_QWORD *)(v42 + 40);
              v43 = v45;
              if (v45)
                free(*(void **)(v43 - 8));
              *v44 = 0;
              v35 = v123;
              v41 = (_QWORD *)(v40 + 488 * v39 + 16);
              if (v125 == *v124)
              {
LABEL_54:
                if (v32 != *(_QWORD *)(a1 + 23520))
                  goto LABEL_63;
                goto LABEL_55;
              }
            }
            if (*v41)
              free(*(void **)(*v41 - 8));
            *v41 = 0;
            if (v32 != *(_QWORD *)(a1 + 23520))
            {
LABEL_63:
              v46 = v41[1];
              if (v46)
                free(*(void **)(v46 - 8));
              v41[1] = 0;
              if (v34 == *(_QWORD *)(a1 + 23528))
                continue;
LABEL_66:
              v47 = v41[2];
              if (v47)
                free(*(void **)(v47 - 8));
              v41[2] = 0;
              continue;
            }
LABEL_55:
            if (v34 != *(_QWORD *)(a1 + 23528))
              goto LABEL_66;
          }
        }
      }
      else
      {
        v48 = v121[1];
        if ((int)v48 < 2)
          goto LABEL_80;
        v49 = v48 + 1;
        do
        {
          v50 = *v31 + 488 * (v49 - 2);
          v53 = *(_QWORD *)(v50 + 40);
          v52 = (_QWORD *)(v50 + 40);
          v51 = v53;
          if (v53)
            free(*(void **)(v51 - 8));
          *v52 = 0;
          v54 = *(v52 - 3);
          if (v54)
            free(*(void **)(v54 - 8));
          *(v52 - 3) = 0;
          v55 = *(v52 - 2);
          if (v55)
            free(*(void **)(v55 - 8));
          *(v52 - 2) = 0;
          v56 = *(v52 - 1);
          if (v56)
            free(*(void **)(v56 - 8));
          *(v52 - 1) = 0;
          --v49;
        }
        while (v49 > 2);
        v37 = *v31;
        v35 = v123;
        if (*v31)
LABEL_80:
          free(*(void **)(v37 - 8));
        *v31 = 0;
      }
    }
  }
  v57 = *v121;
  if ((_DWORD)v57 != v120)
  {
    v58 = *(_QWORD *)(a3 + 8);
    if (v58)
    {
      if ((int)v57 < 1)
        goto LABEL_94;
      v59 = 0;
      v60 = 24 * v57;
      do
      {
        v61 = *(_QWORD *)(a3 + 8);
        v62 = *(pthread_mutex_t **)(v61 + v59);
        if (v62)
        {
          pthread_mutex_destroy(v62);
          v61 = *(_QWORD *)(a3 + 8);
          v63 = *(_QWORD *)(v61 + v59);
          if (v63)
          {
            free(*(void **)(v63 - 8));
            v61 = *(_QWORD *)(a3 + 8);
          }
        }
        v64 = *(pthread_cond_t **)(v61 + v59 + 8);
        if (v64)
        {
          pthread_cond_destroy(v64);
          v65 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + v59 + 8);
          if (v65)
            free(*(void **)(v65 - 8));
        }
        v59 += 24;
      }
      while (v60 != v59);
      v58 = *(_QWORD *)(a3 + 8);
      v35 = v123;
      if (v58)
LABEL_94:
        free(*(void **)(v58 - 8));
      *(_QWORD *)(a3 + 8) = 0;
    }
  }
  *(_QWORD *)(a1 + 23560) = v35;
  *(_OWORD *)v124 = v127;
  *(_QWORD *)(a1 + 23528) = v128;
  *(_OWORD *)(a1 + 23536) = v129;
  *(_QWORD *)(a1 + 23552) = v130;
  *v121 = v120;
  v121[1] = v122;
  if (!v119)
    return;
  if (!*(_QWORD *)(a1 + 23504))
  {
    v66 = malloc_type_malloc(v35 | 0x17, 0x70F2D1FBuLL);
    if (v66)
    {
      v67 = ((unint64_t)v66 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v67 - 8) = v66;
      *(_QWORD *)(a1 + 23504) = v67;
      if (v67)
        goto LABEL_100;
    }
    else
    {
      *(_QWORD *)(a1 + 23504) = 0;
    }
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate *srcbuf");
    if (*(_QWORD *)(a1 + 23456))
      goto LABEL_109;
    goto LABEL_101;
  }
LABEL_100:
  if (*(_QWORD *)(a1 + 23456))
    goto LABEL_109;
LABEL_101:
  v68 = *(_QWORD *)(a1 + 23512);
  if (v68 <= 0x1FFFFFFE9 && (v69 = malloc_type_malloc(v68 + 23, 0x70F2D1FBuLL)) != 0)
  {
    v70 = ((unint64_t)v69 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v70 - 8) = v69;
    *(_QWORD *)(a1 + 23456) = v70;
    if (v70)
      goto LABEL_109;
  }
  else
  {
    *(_QWORD *)(a1 + 23456) = 0;
  }
  aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate colbuf[plane]");
LABEL_109:
  if (v126)
    goto LABEL_124;
  if (!*(_QWORD *)(a1 + 23464))
  {
    v71 = *(_QWORD *)(a1 + 23520);
    if (v71 <= 0x1FFFFFFE9 && (v72 = malloc_type_malloc(v71 + 23, 0x70F2D1FBuLL)) != 0)
    {
      v73 = ((unint64_t)v72 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v73 - 8) = v72;
      *(_QWORD *)(a1 + 23464) = v73;
      if (v73)
        goto LABEL_117;
    }
    else
    {
      *(_QWORD *)(a1 + 23464) = 0;
    }
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate colbuf[plane]");
  }
LABEL_117:
  if (*(_QWORD *)(a1 + 23472))
    goto LABEL_124;
  v74 = *(_QWORD *)(a1 + 23528);
  if (v74 <= 0x1FFFFFFE9 && (v75 = malloc_type_malloc(v74 + 23, 0x70F2D1FBuLL)) != 0)
  {
    v76 = ((unint64_t)v75 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v76 - 8) = v75;
    *(_QWORD *)(a1 + 23472) = v76;
    if (v76)
      goto LABEL_124;
  }
  else
  {
    *(_QWORD *)(a1 + 23472) = 0;
  }
  aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate colbuf[plane]");
LABEL_124:
  if (*(_QWORD *)(a1 + 23480))
    goto LABEL_131;
  v77 = *(_QWORD *)(a1 + 23536);
  if (v77 <= 0x1FFFFFFE9 && (v78 = malloc_type_malloc(v77 + 23, 0x70F2D1FBuLL)) != 0)
  {
    v79 = ((unint64_t)v78 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v79 - 8) = v78;
    *(_QWORD *)(a1 + 23480) = v79;
    if (v79)
      goto LABEL_131;
  }
  else
  {
    *(_QWORD *)(a1 + 23480) = 0;
  }
  aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate linebuf[plane]");
LABEL_131:
  if (v126)
    goto LABEL_146;
  if (!*(_QWORD *)(a1 + 23488))
  {
    v80 = *(_QWORD *)(a1 + 23544);
    if (v80 <= 0x1FFFFFFE9 && (v81 = malloc_type_malloc(v80 + 23, 0x70F2D1FBuLL)) != 0)
    {
      v82 = ((unint64_t)v81 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v82 - 8) = v81;
      *(_QWORD *)(a1 + 23488) = v82;
      if (v82)
        goto LABEL_139;
    }
    else
    {
      *(_QWORD *)(a1 + 23488) = 0;
    }
    aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate linebuf[plane]");
  }
LABEL_139:
  if (!*(_QWORD *)(a1 + 23496))
  {
    v83 = *(_QWORD *)(a1 + 23552);
    if (v83 > 0x1FFFFFFE9 || (v84 = malloc_type_malloc(v83 + 23, 0x70F2D1FBuLL)) == 0)
    {
      *(_QWORD *)(a1 + 23496) = 0;
LABEL_145:
      aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate linebuf[plane]");
      goto LABEL_146;
    }
    v85 = ((unint64_t)v84 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v85 - 8) = v84;
    *(_QWORD *)(a1 + 23496) = v85;
    if (!v85)
      goto LABEL_145;
  }
LABEL_146:
  if ((int)v122 >= 2)
  {
    if (v118)
    {
      if (!*v31)
      {
        if (v122 <= 0x10C9714
          && (v86 = malloc_type_malloc(488 * v122 + 23, 0x70F2D1FBuLL)) != 0
          && (v87 = ((unint64_t)v86 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v87 - 8) = v86, v87))
        {
          bzero((void *)(((unint64_t)v86 + 23) & 0xFFFFFFFFFFFFFFF0), 488 * v122);
          *v31 = v87;
        }
        else
        {
          *v31 = 0;
          aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate *cdef_worker");
        }
      }
      for (j = v122 + 1; j > 2; --j)
      {
        v89 = *v31 + 488 * (j - 2);
        v91 = *(_QWORD *)(v89 + 40);
        v90 = (unint64_t *)(v89 + 40);
        if (v91)
          goto LABEL_165;
        v92 = *(_QWORD *)(a1 + 23560);
        if (v92 <= 0x1FFFFFFE9 && (v93 = malloc_type_malloc(v92 + 23, 0x70F2D1FBuLL)) != 0)
        {
          v94 = ((unint64_t)v93 + 23) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v94 - 8) = v93;
          *v90 = v94;
          if (v94)
            goto LABEL_165;
        }
        else
        {
          *v90 = 0;
        }
        aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate *srcbuf");
LABEL_165:
        v96 = *(v90 - 3);
        v95 = v90 - 3;
        if (v96)
          goto LABEL_172;
        v97 = *(_QWORD *)(a1 + 23512);
        if (v97 <= 0x1FFFFFFE9 && (v98 = malloc_type_malloc(v97 + 23, 0x70F2D1FBuLL)) != 0)
        {
          v99 = ((unint64_t)v98 + 23) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v99 - 8) = v98;
          *v95 = v99;
          if (v99)
            goto LABEL_172;
        }
        else
        {
          *v95 = 0;
        }
        aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate colbuf[plane]");
LABEL_172:
        if (v126)
          continue;
        if (!v95[1])
        {
          v100 = *(_QWORD *)(a1 + 23520);
          if (v100 <= 0x1FFFFFFE9 && (v101 = malloc_type_malloc(v100 + 23, 0x70F2D1FBuLL)) != 0)
          {
            v102 = ((unint64_t)v101 + 23) & 0xFFFFFFFFFFFFFFF0;
            *(_QWORD *)(v102 - 8) = v101;
            v95[1] = v102;
            if (v102)
              goto LABEL_180;
          }
          else
          {
            v95[1] = 0;
          }
          aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate colbuf[plane]");
        }
LABEL_180:
        if (!v95[2])
        {
          v103 = *(_QWORD *)(a1 + 23528);
          if (v103 <= 0x1FFFFFFE9 && (v104 = malloc_type_malloc(v103 + 23, 0x70F2D1FBuLL)) != 0)
          {
            v105 = ((unint64_t)v104 + 23) & 0xFFFFFFFFFFFFFFF0;
            *(_QWORD *)(v105 - 8) = v104;
            v95[2] = v105;
            if (v105)
              continue;
          }
          else
          {
            v95[2] = 0;
          }
          aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate colbuf[plane]");
        }
      }
    }
    if (!*(_QWORD *)(a3 + 8))
    {
      v106 = *v121;
      if (v106 <= 0x15555554
        && (v107 = malloc_type_malloc(24 * v106 + 23, 0x70F2D1FBuLL)) != 0
        && (v108 = ((unint64_t)v107 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v108 - 8) = v107, v108))
      {
        bzero((void *)(((unint64_t)v107 + 23) & 0xFFFFFFFFFFFFFFF0), 24 * v106);
        *(_QWORD *)(a3 + 8) = v108;
      }
      else
      {
        *(_QWORD *)(a3 + 8) = 0;
        aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate *cdef_row_mt");
      }
      if ((int)v106 >= 1)
      {
        v109 = 0;
        v110 = 24 * v106;
        while (1)
        {
          v111 = malloc_type_malloc(0x57uLL, 0x70F2D1FBuLL);
          if (!v111)
            break;
          v112 = ((unint64_t)v111 + 23) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v112 - 8) = v111;
          *(_QWORD *)(*(_QWORD *)(a3 + 8) + v109) = v112;
          v113 = *(pthread_mutex_t **)(*(_QWORD *)(a3 + 8) + v109);
          if (!v113)
            goto LABEL_197;
LABEL_198:
          pthread_mutex_init(v113, 0);
          v114 = malloc_type_malloc(0x47uLL, 0x70F2D1FBuLL);
          if (v114)
          {
            v115 = ((unint64_t)v114 + 23) & 0xFFFFFFFFFFFFFFF0;
            *(_QWORD *)(v115 - 8) = v114;
          }
          else
          {
            v115 = 0;
          }
          *(_QWORD *)(*(_QWORD *)(a3 + 8) + v109 + 8) = v115;
          v116 = *(pthread_cond_t **)(*(_QWORD *)(a3 + 8) + v109 + 8);
          if (!v116)
          {
            aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate (*cdef_row_mt)[row_idx].row_cond_");
            v116 = *(pthread_cond_t **)(*(_QWORD *)(a3 + 8) + v109 + 8);
          }
          pthread_cond_init(v116, 0);
          v109 += 24;
          if (v110 == v109)
            return;
        }
        *(_QWORD *)(*(_QWORD *)(a3 + 8) + v109) = 0;
        v113 = *(pthread_mutex_t **)(*(_QWORD *)(a3 + 8) + v109);
        if (v113)
          goto LABEL_198;
LABEL_197:
        aom_internal_error(*(_QWORD *)(a1 + 48), 2, "Failed to allocate (*cdef_row_mt)[row_idx].row_mutex_");
        v113 = *(pthread_mutex_t **)(*(_QWORD *)(a3 + 8) + v109);
        goto LABEL_198;
      }
    }
  }
}

uint64_t av1_alloc_restoration_buffers(uint64_t result, int a2)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  int v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  unint64_t v42;

  v2 = result;
  v3 = (unsigned int *)(result + 23104);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(result + 24680) + 77);
  if (*(_QWORD *)(result + 23248))
    v5 = 1;
  else
    v5 = a2 == 0;
  if (v5)
  {
LABEL_7:
    if (*(_QWORD *)(v2 + 23256))
      goto LABEL_16;
    goto LABEL_11;
  }
  result = (uint64_t)malloc_type_malloc(0x13B9B7uLL, 0x70F2D1FBuLL);
  if (result)
  {
    v6 = (result + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v6 - 8) = result;
    *(_QWORD *)(v2 + 23248) = v6;
    if (v6)
      goto LABEL_7;
  }
  else
  {
    *(_QWORD *)(v2 + 23248) = 0;
  }
  result = aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate cm->rst_tmpbuf");
  if (*(_QWORD *)(v2 + 23256))
    goto LABEL_16;
LABEL_11:
  result = (uint64_t)malloc_type_malloc(0x1277uLL, 0x70F2D1FBuLL);
  if (result)
  {
    v7 = (result + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v7 - 8) = result;
    *(_QWORD *)(v2 + 23256) = v7;
    if (v7)
      goto LABEL_16;
  }
  else
  {
    *(_QWORD *)(v2 + 23256) = 0;
  }
  result = aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate cm->rlbs");
LABEL_16:
  v8 = 4 * *(_DWORD *)(v2 + 532);
  v10 = v8 + 71;
  v9 = v8 < -71;
  v11 = v8 + 134;
  if (!v9)
    v11 = v10;
  v12 = *(_DWORD *)(v2 + 72);
  v13 = *(_BYTE *)(*(_QWORD *)(v2 + 24680) + 76);
  v14 = 2 * (v11 >> 6);
  v15 = (v12 + 39) & 0xFFFFFFE0;
  v16 = (v14 * v15) << v13;
  v17 = *(_QWORD *)(v2 + 23088);
  if (v16 != v3[1] || v17 == 0)
  {
    if (!v17)
    {
      v19 = *(_QWORD *)(v2 + 23096);
      if (!v19)
        goto LABEL_26;
      goto LABEL_25;
    }
  }
  else if (*(_QWORD *)(v2 + 23096))
  {
    goto LABEL_42;
  }
  free(*(void **)(v17 - 8));
  v19 = *(_QWORD *)(v2 + 23096);
  if (v19)
LABEL_25:
    free(*(void **)(v19 - 8));
LABEL_26:
  if (v16 < 0)
  {
    *(_QWORD *)(v2 + 23088) = 0;
    aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate boundaries->stripe_boundary_above");
    goto LABEL_39;
  }
  v20 = malloc_type_malloc(v16 | 0x27u, 0x70F2D1FBuLL);
  if (!v20)
  {
    *(_QWORD *)(v2 + 23088) = 0;
LABEL_36:
    aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate boundaries->stripe_boundary_above");
    result = (uint64_t)malloc_type_malloc(v16 | 0x27u, 0x70F2D1FBuLL);
    if (result)
      goto LABEL_37;
LABEL_39:
    *(_QWORD *)(v2 + 23096) = 0;
LABEL_40:
    result = aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate boundaries->stripe_boundary_below");
    goto LABEL_41;
  }
  v21 = ((unint64_t)v20 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v21 - 8) = v20;
  *(_QWORD *)(v2 + 23088) = v21;
  if (!v21)
    goto LABEL_36;
  result = (uint64_t)malloc_type_malloc(v16 | 0x27u, 0x70F2D1FBuLL);
  if (!result)
    goto LABEL_39;
LABEL_37:
  v22 = (result + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v22 - 8) = result;
  *(_QWORD *)(v2 + 23096) = v22;
  if (!v22)
    goto LABEL_40;
LABEL_41:
  v3[1] = v16;
LABEL_42:
  *v3 = v15;
  if (v4)
    return result;
  v23 = *(_DWORD *)(*(_QWORD *)(v2 + 24680) + 96);
  if (v23)
    v24 = v12 + 1;
  else
    v24 = v12;
  v25 = ((v24 >> (v23 != 0)) + 39) & 0xFFFFFFE0;
  v26 = (v25 * v14) << v13;
  v27 = *(_QWORD *)(v2 + 23152);
  if (v26 == v3[17] && v27 != 0)
  {
    if (*(_QWORD *)(v2 + 23160))
      goto LABEL_70;
    goto LABEL_54;
  }
  if (v27)
LABEL_54:
    free(*(void **)(v27 - 8));
  v29 = *(_QWORD *)(v2 + 23160);
  if (v29)
    free(*(void **)(v29 - 8));
  if (v26 < 0)
  {
    *(_QWORD *)(v2 + 23152) = 0;
    aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate boundaries->stripe_boundary_above");
    goto LABEL_67;
  }
  v30 = malloc_type_malloc(v26 | 0x27u, 0x70F2D1FBuLL);
  if (!v30)
  {
    *(_QWORD *)(v2 + 23152) = 0;
LABEL_64:
    aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate boundaries->stripe_boundary_above");
    result = (uint64_t)malloc_type_malloc(v26 | 0x27u, 0x70F2D1FBuLL);
    if (result)
      goto LABEL_65;
LABEL_67:
    *(_QWORD *)(v2 + 23160) = 0;
LABEL_68:
    result = aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate boundaries->stripe_boundary_below");
    goto LABEL_69;
  }
  v31 = ((unint64_t)v30 + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v31 - 8) = v30;
  *(_QWORD *)(v2 + 23152) = v31;
  if (!v31)
    goto LABEL_64;
  result = (uint64_t)malloc_type_malloc(v26 | 0x27u, 0x70F2D1FBuLL);
  if (!result)
    goto LABEL_67;
LABEL_65:
  v32 = (result + 39) & 0xFFFFFFFFFFFFFFE0;
  *(_QWORD *)(v32 - 8) = result;
  *(_QWORD *)(v2 + 23160) = v32;
  if (!v32)
    goto LABEL_68;
LABEL_69:
  v3[17] = v26;
  v23 = *(_DWORD *)(*(_QWORD *)(v2 + 24680) + 96);
LABEL_70:
  v3[16] = v25;
  v5 = v23 == 0;
  v33 = v23 != 0;
  if (v5)
    v34 = v12;
  else
    v34 = v12 + 1;
  v35 = ((v34 >> v33) + 39) & 0xFFFFFFE0;
  v36 = (v35 * v14) << v13;
  v37 = *(_QWORD *)(v2 + 23216);
  if (v36 != v3[33] || v37 == 0)
  {
    if (!v37)
    {
LABEL_82:
      v39 = *(_QWORD *)(v2 + 23224);
      if (v39)
        free(*(void **)(v39 - 8));
      if (v36 < 0)
      {
        *(_QWORD *)(v2 + 23216) = 0;
        aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate boundaries->stripe_boundary_above");
      }
      else
      {
        v40 = malloc_type_malloc(v36 | 0x27u, 0x70F2D1FBuLL);
        if (v40)
        {
          v41 = ((unint64_t)v40 + 39) & 0xFFFFFFFFFFFFFFE0;
          *(_QWORD *)(v41 - 8) = v40;
          *(_QWORD *)(v2 + 23216) = v41;
          if (v41)
          {
            result = (uint64_t)malloc_type_malloc(v36 | 0x27u, 0x70F2D1FBuLL);
            if (!result)
              goto LABEL_94;
LABEL_92:
            v42 = (result + 39) & 0xFFFFFFFFFFFFFFE0;
            *(_QWORD *)(v42 - 8) = result;
            *(_QWORD *)(v2 + 23224) = v42;
            if (v42)
            {
LABEL_96:
              v3[33] = v36;
              goto LABEL_97;
            }
LABEL_95:
            result = aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate boundaries->stripe_boundary_below");
            goto LABEL_96;
          }
        }
        else
        {
          *(_QWORD *)(v2 + 23216) = 0;
        }
        aom_internal_error(*(_QWORD *)(v2 + 48), 2, "Failed to allocate boundaries->stripe_boundary_above");
        result = (uint64_t)malloc_type_malloc(v36 | 0x27u, 0x70F2D1FBuLL);
        if (result)
          goto LABEL_92;
      }
LABEL_94:
      *(_QWORD *)(v2 + 23224) = 0;
      goto LABEL_95;
    }
LABEL_81:
    free(*(void **)(v37 - 8));
    goto LABEL_82;
  }
  if (!*(_QWORD *)(v2 + 23224))
    goto LABEL_81;
LABEL_97:
  v3[32] = v35;
  return result;
}

double av1_free_restoration_buffers(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[2885];
  if (v2)
    free(*(void **)(v2 - 8));
  a1[2885] = 0;
  v3 = a1[2893];
  if (v3)
    free(*(void **)(v3 - 8));
  a1[2893] = 0;
  v4 = a1[2901];
  if (v4)
    free(*(void **)(v4 - 8));
  a1[2901] = 0;
  v5 = a1[2906];
  if (v5)
    free(*(void **)(v5 - 8));
  a1[2906] = 0;
  v6 = a1[2907];
  if (v6)
    free(*(void **)(v6 - 8));
  a1[2907] = 0;
  v7 = a1[2886];
  if (v7)
    free(*(void **)(v7 - 8));
  v8 = a1[2887];
  if (v8)
    free(*(void **)(v8 - 8));
  a1[2886] = 0;
  a1[2887] = 0;
  v9 = a1[2894];
  if (v9)
    free(*(void **)(v9 - 8));
  v10 = a1[2895];
  if (v10)
    free(*(void **)(v10 - 8));
  a1[2894] = 0;
  a1[2895] = 0;
  v11 = a1[2902];
  if (v11)
    free(*(void **)(v11 - 8));
  v12 = a1[2903];
  if (v12)
    free(*(void **)(v12 - 8));
  a1[2902] = 0;
  a1[2903] = 0;
  return aom_free_frame_buffer((uint64_t)(a1 + 2908));
}

void av1_free_above_context_buffers(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v2 = *((unsigned int *)a1 + 10);
  if (*((int *)a1 + 11) >= 1)
  {
    if ((int)v2 <= 0)
    {
      v11 = 0;
      do
      {
        v12 = *a1;
        if (*a1)
        {
          v13 = *(_QWORD *)(v12 + 8 * v11);
          if (v13)
          {
            free(*(void **)(v13 - 8));
            v12 = *a1;
          }
          *(_QWORD *)(v12 + 8 * v11) = 0;
        }
        v14 = a1[4];
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8 * v11);
          if (v15)
          {
            free(*(void **)(v15 - 8));
            v14 = a1[4];
          }
          *(_QWORD *)(v14 + 8 * v11) = 0;
        }
        ++v11;
      }
      while (v11 < *((int *)a1 + 11));
    }
    else
    {
      v3 = 0;
      do
      {
        for (i = 0; i != v2; ++i)
        {
          v5 = a1[i + 1];
          if (!v5)
            break;
          v6 = *(_QWORD *)(v5 + 8 * v3);
          if (v6)
          {
            free(*(void **)(v6 - 8));
            v5 = a1[i + 1];
          }
          *(_QWORD *)(v5 + 8 * v3) = 0;
        }
        v7 = *a1;
        if (*a1)
        {
          v8 = *(_QWORD *)(v7 + 8 * v3);
          if (v8)
          {
            free(*(void **)(v8 - 8));
            v7 = *a1;
          }
          *(_QWORD *)(v7 + 8 * v3) = 0;
        }
        v9 = a1[4];
        if (v9)
        {
          v10 = *(_QWORD *)(v9 + 8 * v3);
          if (v10)
          {
            free(*(void **)(v10 - 8));
            v9 = a1[4];
          }
          *(_QWORD *)(v9 + 8 * v3) = 0;
        }
        ++v3;
      }
      while (v3 < *((int *)a1 + 11));
    }
  }
  if ((int)v2 >= 1)
  {
    v16 = a1 + 1;
    do
    {
      if (*v16)
        free(*(void **)(*v16 - 8));
      *v16++ = 0;
      --v2;
    }
    while (v2);
  }
  if (*a1)
    free(*(void **)(*a1 - 8));
  *a1 = 0;
  v19 = a1[4];
  v18 = a1 + 4;
  v17 = v19;
  if (v19)
    free(*(void **)(v17 - 8));
  *v18 = 0;
  v18[1] = 0;
  *((_DWORD *)v18 + 4) = 0;
}

uint64_t av1_alloc_above_context_buffers(uint64_t a1, unsigned int a2, int a3, int a4)
{
  uint64_t v7;
  size_t v8;
  void *v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  BOOL v21;
  size_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  signed int v43;
  uint64_t v44;

  v43 = (a3 + 31) & 0xFFFFFFE0;
  *(_DWORD *)(a1 + 44) = a2;
  *(_DWORD *)(a1 + 48) = v43;
  *(_DWORD *)(a1 + 40) = a4;
  v44 = (int)a2;
  if (a4 >= 1)
  {
    v7 = 0;
    if (a2 <= 0x3FFFFFFD)
    {
      v8 = 8 * (int)a2;
      if (v8 <= 0x1FFFFFFE9)
      {
        v7 = 0;
        while (1)
        {
          v9 = malloc_type_malloc(v8 + 23, 0x70F2D1FBuLL);
          if (!v9)
            break;
          v10 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v10 - 8) = v9;
          if (!v10)
            break;
          bzero((void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0), v8);
          *(_QWORD *)(a1 + 8 + 8 * v7++) = v10;
          if (a4 == v7)
            goto LABEL_8;
        }
      }
    }
    *(_QWORD *)(a1 + 8 * v7 + 8) = 0;
    return 1;
  }
LABEL_8:
  if (a2 > 0x3FFFFFFD
    || (v11 = 8 * v44, (unint64_t)(8 * v44) > 0x1FFFFFFE9)
    || (v12 = malloc_type_malloc(v11 + 23, 0x70F2D1FBuLL)) == 0
    || (v13 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v13 - 8) = v12, !v13))
  {
    *(_QWORD *)a1 = 0;
    return 1;
  }
  bzero((void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0), v11);
  *(_QWORD *)a1 = v13;
  v14 = malloc_type_malloc(v11 + 23, 0x70F2D1FBuLL);
  if (!v14 || (v15 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v15 - 8) = v14, !v15))
  {
    *(_QWORD *)(a1 + 32) = 0;
    return 1;
  }
  bzero((void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF0), v11);
  *(_QWORD *)(a1 + 32) = v15;
  if (a2)
  {
    v16 = v43;
    v17 = a2;
    if (a4 <= 0)
    {
      if (v43 < 0)
      {
        **(_QWORD **)a1 = 0;
        if (**(_QWORD **)a1 && (**(_QWORD **)(a1 + 32) = 0) != 0)
        {
          v39 = 1;
          do
          {
            v40 = v39;
            if (a2 == v39)
              break;
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = 0;
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v39))
              break;
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v39++) = 0;
          }
          while (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v40));
          return v40 < v44;
        }
        else
        {
          return 1;
        }
      }
      else
      {
        v34 = 0;
        v21 = 1;
        do
        {
          v35 = malloc_type_malloc(v43 | 0x17, 0x70F2D1FBuLL);
          if (v35)
          {
            v36 = ((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF0;
            *(_QWORD *)(v36 - 8) = v35;
            if (v36)
              bzero((void *)(((unint64_t)v35 + 23) & 0xFFFFFFFFFFFFFFF0), v43);
          }
          else
          {
            v36 = 0;
          }
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v34) = v36;
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v34))
            break;
          v37 = malloc_type_malloc(v43 | 0x17, 0x70F2D1FBuLL);
          if (v37)
          {
            v38 = ((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF0;
            *(_QWORD *)(v38 - 8) = v37;
            if (v38)
              bzero((void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF0), v43);
          }
          else
          {
            v38 = 0;
          }
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v34) = v38;
          if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v34))
            break;
          v21 = ++v34 < v44;
        }
        while (v17 != v34);
      }
    }
    else
    {
      v18 = 0;
      v19 = a4;
      v20 = v43 | 0x17;
      v42 = v19;
      v21 = 1;
      v41 = a2;
LABEL_17:
      v22 = v16;
      v23 = (_QWORD *)(a1 + 8);
      v24 = v42;
      if (v43 < 0)
      {
        v27 = (_QWORD *)(a1 + 8);
        v28 = v42;
        while (1)
        {
          *(_QWORD *)(*v27 + 8 * v18) = 0;
          if (!*(_QWORD *)(*v27 + 8 * v18))
            break;
          ++v27;
          if (!--v28)
          {
LABEL_28:
            if (v43 < 0)
            {
              v31 = 0;
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = 0;
              v16 = v22;
              if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
                return v21;
            }
            else
            {
              v29 = malloc_type_malloc(v20, 0x70F2D1FBuLL);
              v16 = v22;
              if (v29)
              {
                v30 = ((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF0;
                *(_QWORD *)(v30 - 8) = v29;
                if (v30)
                  bzero((void *)(((unint64_t)v29 + 23) & 0xFFFFFFFFFFFFFFF0), v22);
              }
              else
              {
                v30 = 0;
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v30;
              if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
                return v21;
              v32 = malloc_type_malloc(v20, 0x70F2D1FBuLL);
              if (v32)
              {
                v31 = ((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF0;
                *(_QWORD *)(v31 - 8) = v32;
                if (v31)
                  bzero((void *)(((unint64_t)v32 + 23) & 0xFFFFFFFFFFFFFFF0), v22);
              }
              else
              {
                v31 = 0;
              }
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18) = v31;
            if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v18))
            {
              v21 = ++v18 < v44;
              if (v18 != v41)
                goto LABEL_17;
            }
            return v21;
          }
        }
      }
      else
      {
        while (1)
        {
          v25 = malloc_type_malloc(v20, 0x70F2D1FBuLL);
          if (v25)
          {
            v26 = ((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0;
            *(_QWORD *)(v26 - 8) = v25;
            if (v26)
              bzero((void *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0), v22);
          }
          else
          {
            v26 = 0;
          }
          *(_QWORD *)(*v23 + 8 * v18) = v26;
          if (!*(_QWORD *)(*v23 + 8 * v18))
            break;
          ++v23;
          if (!--v24)
            goto LABEL_28;
        }
      }
    }
  }
  else
  {
    return 0;
  }
  return v21;
}

uint64_t av1_alloc_context_buffers(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  size_t v4;
  unsigned int v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  void (*v11)(uint64_t);
  uint64_t result;
  void *v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;

  v2 = a1 + 520;
  (*(void (**)(uint64_t))(a1 + 608))(a1 + 520);
  v3 = (*(int *)(a1 + 532) + 31) & 0xFFFFFFFFFFFFFFE0;
  v4 = v3 * *(int *)(a1 + 580);
  v5 = (int)v3 / mi_size_wide_0[*(unsigned __int8 *)(a1 + 560)] * *(_DWORD *)(a1 + 556);
  if (*(_DWORD *)(a1 + 552) >= (signed int)v5 && *(_DWORD *)(a1 + 576) >= (int)v4)
    return 0;
  (*(void (**)(uint64_t))(a1 + 592))(v2);
  if (v5 <= 0x2E8BA2E
    && (v6 = malloc_type_malloc(176 * v5 + 23, 0x70F2D1FBuLL)) != 0
    && (v7 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v7 - 8) = v6, v7))
  {
    bzero((void *)(((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF0), 176 * v5);
    *(_QWORD *)(a1 + 544) = v7;
    *(_DWORD *)(a1 + 552) = v5;
    v8 = 8 * v4;
    v9 = v4 > 0x3FFFFFFD || v8 > 0x1FFFFFFE9;
    if (!v9
      && (v13 = malloc_type_malloc(v8 | 0x17, 0x70F2D1FBuLL),
          v13 && (v14 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v14 - 8) = v13, v14)))
    {
      bzero((void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF0), 8 * v4);
      *(_QWORD *)(a1 + 568) = v14;
      v15 = malloc_type_malloc(v4 | 0x17, 0x70F2D1FBuLL);
      if (v15)
      {
        v16 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0;
        *(_QWORD *)(v16 - 8) = v15;
        if (v16)
        {
          bzero((void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0), v4);
          result = 0;
          *(_QWORD *)(a1 + 584) = v16;
          *(_DWORD *)(a1 + 576) = v4;
          return result;
        }
      }
      v10 = (_QWORD *)(a1 + 584);
    }
    else
    {
      v10 = (_QWORD *)(a1 + 568);
    }
  }
  else
  {
    v10 = (_QWORD *)(a1 + 544);
  }
  *v10 = 0;
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 608))(v2, 0, 0, 0);
  v11 = *(void (**)(uint64_t))(a1 + 592);
  if (v11)
    v11(v2);
  av1_free_above_context_buffers((uint64_t *)(a1 + 25304));
  return 1;
}

uint64_t aom_codec_control(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t result;

  if (!a1)
    return 8;
  if (a2)
  {
    v10 = *(_QWORD *)(a1 + 8);
    if (v10 && (v11 = *(_QWORD **)(a1 + 48)) != 0 && (v12 = *(_QWORD *)(v10 + 40)) != 0)
    {
      v13 = (_DWORD *)(v12 + 8);
      v14 = *(v13 - 2);
      if (v14)
        goto LABEL_8;
LABEL_7:
      if (*(_QWORD *)v13)
      {
LABEL_8:
        while (v14 != a2)
        {
          v13 += 4;
          v14 = *(v13 - 2);
          if (!v14)
            goto LABEL_7;
        }
        result = (*(uint64_t (**)(_QWORD, uint64_t *))v13)(*(_QWORD *)(a1 + 48), &a9);
        *(_DWORD *)(a1 + 16) = result;
      }
      else
      {
        result = 1;
        *(_DWORD *)(a1 + 16) = 1;
        *v11 = "Invalid control ID";
      }
    }
    else
    {
      result = 1;
      *(_DWORD *)(a1 + 16) = 1;
    }
  }
  else
  {
    result = 8;
    *(_DWORD *)(a1 + 16) = 8;
  }
  return result;
}

uint64_t aom_set_error(uint64_t result, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;

  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = 0;
  if (a3)
  {
    v9 = result;
    *(_DWORD *)(result + 4) = 1;
    result = vsnprintf((char *)(result + 8), 0xC7uLL, a3, &a9);
    *(_BYTE *)(v9 + 207) = 0;
  }
  return result;
}

uint64_t aom_internal_error(uint64_t result, int a2, const char *a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  v3 = result;
  *(_DWORD *)result = a2;
  *(_DWORD *)(result + 4) = 0;
  if (a3)
  {
    *(_DWORD *)(result + 4) = 1;
    result = vsnprintf((char *)(result + 8), 0xC7uLL, a3, va);
    *(_BYTE *)(v3 + 207) = 0;
  }
  if (*(_DWORD *)(v3 + 208))
    longjmp((int *)(v3 + 212), *(_DWORD *)v3);
  return result;
}

char *aom_convolve8_horiz_neon(char *result, uint64_t a2, uint8x8_t *a3, uint64_t a4, unsigned __int16 *a5, int8x8_t a6, int8x8_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12)
{
  int v12;
  uint64_t *v13;
  int16x8_t v14;
  unint64_t v15;
  int8x8_t v16;
  int8x8_t *v17;
  int8x8_t v18;
  int8x8_t *v19;
  int8x8_t v20;
  int16x4_t v21;
  int16x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  uint8x8_t v25;
  uint8x8_t v26;
  uint8x8_t v27;
  uint8x8_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  int16x4_t v40;
  int16x4_t v41;
  int16x4_t v42;
  int16x4_t v43;
  int8x8_t v44;
  int8x8_t v45;
  int8x8_t v46;
  int16x4_t v47;
  int8x8_t v48;
  int16x4_t v49;
  int16x4_t v50;
  int16x4_t v51;
  int16x4_t v52;
  uint8x8_t v53;
  uint8x8_t v54;
  uint8x8_t v55;
  uint8x8_t v56;
  int16x4_t v57;
  int16x4_t v58;
  int16x4_t v59;
  int16x4_t v60;
  int16x8_t v61;
  int16x4_t v62;
  int16x4_t v63;
  int16x4_t v64;
  int16x8_t v65;
  int16x4_t v66;
  int16x4_t v67;
  int16x4_t v68;
  int32x2_t v69;
  int8x8_t v70;
  int8x8_t v71;
  int8x8_t v72;
  int16x8_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int v79;
  int16x8_t v80;
  int16x8_t v81;
  int32x2_t *v82;
  int8x16_t v83;
  uint64_t *v84;
  int8x16_t v85;
  uint64_t *v86;
  int8x16_t v87;
  uint64_t *v88;
  int8x16_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int8x16_t v102;
  int8x16_t v103;
  int8x16_t v104;
  uint8x8_t v105;
  uint8x8_t v106;
  uint8x8_t v107;
  int16x8_t v108;
  int32x2_t *v109;
  int32x2_t v110;
  int16x8_t v111;
  uint64_t *v112;
  int32x2_t *v113;
  int32x2_t v114;
  int32x2_t *v115;
  int16x8_t v116;
  int32x2_t v117;
  int32x2_t *v118;
  int32x2_t v119;
  int32x2_t *v120;
  int16x8_t v121;
  int16x4_t v122;
  int16x4_t v123;
  int16x8_t v124;
  int16x4_t v125;
  int8x8_t v126;
  int8x8_t v127;
  int8x8_t v128;
  int16x8_t v129;
  uint8x8_t v130;
  uint8x8_t v131;
  uint8x8_t v132;
  uint8x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  int16x8_t v139;
  int16x8_t v140;
  uint64_t v141;
  int16x8_t v142;
  int16x8_t v143;
  int16x8_t v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  int16x8_t v148;
  char *v149;
  int16x8_t v150;
  uint64_t v151;
  int8x16_t v152;
  int8x16_t v153;
  uint64_t *v154;
  int8x16_t v155;
  uint64_t *v156;
  int8x16_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t *v162;
  int16x8_t v163;
  int16x8_t v164;
  int16x8_t v165;
  int16x8_t v166;
  int32x4_t v167;
  int32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  uint8x8_t v174;
  uint8x8_t v175;
  int16x8_t v176;
  int16x8_t v177;
  int16x8_t v178;
  int16x8_t v179;
  int16x8_t v180;
  int16x8_t v181;
  int16x8_t v182;
  uint64_t *v183;
  int8x16_t v184;
  int8x16_t v185;
  int8x16_t v186;
  uint64_t *v187;
  int8x16_t v188;
  uint64_t v189;
  uint64_t *v190;
  int16x8_t v191;
  int16x8_t v192;
  int16x8_t v193;
  int16x8_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int8x16_t v198;
  int32x4_t v199;
  int8x16_t v200;
  int8x16_t v201;
  int8x16_t v202;
  uint8x8_t v203;
  uint8x8_t v204;
  int16x8_t v205;
  int16x8_t v206;
  int16x8_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int16x8_t v211;
  int16x8_t v212;
  int16x8_t v213;
  int16x8_t v214;
  int16x8_t v215;
  int16x8_t v216;
  int16x8_t v217;
  int16x8_t v218;
  int16x8_t v219;
  int16x8_t v220;
  int16x8_t v221;
  int16x8_t v222;
  int16x8_t v223;
  int16x8_t v224;
  int16x8_t v225;
  int16x8_t v226;
  int16x8_t v227;
  int16x8_t v228;
  int16x8_t v229;
  int16x8_t v230;
  int16x8_t v231;
  int16x8_t v232;
  int16x8_t v233;
  int8x16_t v234;
  int8x16_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int16x8_t v240;
  int16x8_t v241;
  int32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  int32x4_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  uint8x8_t *v250;
  uint8x8_t *v251;
  uint8x8_t *v252;
  uint8x8_t *v253;
  BOOL v254;
  int16x4_t v255;
  int16x8_t v256;
  int16x8_t v257;
  int16x8_t v258;
  int16x8_t v259;
  int v260;
  uint8x8_t v261;
  uint8x8_t v262;
  uint8x8_t v263;
  uint8x8_t v264;
  int8x8_t v265;
  int v266;
  uint8x8_t v267;
  uint8x8_t v268;
  uint8x8_t v269;
  uint64_t v270;
  int16x8_t v271;
  uint64_t v272;
  int16x8_t v273;
  char *v274;
  int16x8_t v275;
  uint8x8_t *v276;
  char *v277;
  uint64_t v278;
  uint8x8_t *v279;
  uint8x8_t v280;
  uint8x8_t v281;
  uint8x8_t v282;
  uint8x8_t v283;
  int8x8_t v284;
  int8x8_t v285;
  int v286;
  uint64_t v287;
  uint8x8_t v288;
  uint8x8_t v289;
  uint8x8_t v290;
  uint8x8_t v291;
  uint8x8_t v292;
  uint8x8_t v293;
  uint8x8_t v294;
  uint8x8_t v295;
  uint8x8_t *v296;
  uint8x8_t *v297;
  uint8x16_t v298;
  uint8x16_t v299;
  unint64_t v300;

  v12 = a12;
  if (a5[7] | *a5 || a5[6] | a5[1])
  {
    v13 = (uint64_t *)(result - 3);
    v14 = *(int16x8_t *)a5;
    if (a12 == 4)
    {
      v15 = 0;
      v16 = *(int8x8_t *)(result - 3);
      v17 = (int8x8_t *)((char *)v13 + a2);
      v18 = *v17;
      v19 = (int8x8_t *)((char *)v17 + a2);
      v20 = *(int8x8_t *)((char *)v19 + a2);
      v21 = (int16x4_t)vtrn1_s8(v16, v18);
      v22 = (int16x4_t)vtrn2_s8(v16, v18);
      v23 = (int16x4_t)vtrn1_s8(*v19, v20);
      v24 = (int16x4_t)vtrn2_s8(*v19, v20);
      v25 = (uint8x8_t)vtrn1_s16(v21, v23);
      v26 = (uint8x8_t)vtrn2_s16(v21, v23);
      v27 = (uint8x8_t)vtrn1_s16(v22, v24);
      v28 = (uint8x8_t)vtrn2_s16(v22, v24);
      v29 = (int8x16_t)vmovl_u8(v25);
      v30 = (int8x16_t)vmovl_u8(v27);
      v31 = (int8x16_t)vmovl_u8(v26);
      v32 = (int16x4_t)vmovl_u8(v28).u64[0];
      v33 = (int16x4_t)vextq_s8(v29, v29, 8uLL).u64[0];
      v34 = (int16x4_t)vextq_s8(v30, v30, 8uLL).u64[0];
      v35 = (int16x4_t)vextq_s8(v31, v31, 8uLL).u64[0];
      v36 = vdup_lane_s16(*(int16x4_t *)v14.i8, 0);
      v37 = vdup_lane_s16(*(int16x4_t *)v14.i8, 1);
      v38 = vdup_lane_s16(*(int16x4_t *)v14.i8, 2);
      v39 = vdup_laneq_s16(v14, 5);
      v40 = vdup_laneq_s16(v14, 6);
      v41 = vdup_laneq_s16(v14, 7);
      v42 = vdup_lane_s16(*(int16x4_t *)v14.i8, 3);
      v43 = vdup_laneq_s16(v14, 4);
      do
      {
        v44 = *(int8x8_t *)&result[v15 + 4];
        v45 = *(int8x8_t *)&result[a2 + 4 + v15];
        v46 = *(int8x8_t *)&result[2 * a2 + 4 + v15];
        v47 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v35, v40), v34, v39), *(int16x4_t *)v31.i8, v38), *(int16x4_t *)v30.i8, v37), *(int16x4_t *)v29.i8, v36);
        *(int16x4_t *)v29.i8 = v33;
        v48 = *(int8x8_t *)&result[3 * a2 + 4 + v15];
        v49 = (int16x4_t)vtrn1_s8(v44, v45);
        v50 = (int16x4_t)vtrn2_s8(v44, v45);
        v51 = (int16x4_t)vtrn1_s8(v46, v48);
        v52 = (int16x4_t)vtrn2_s8(v46, v48);
        v53 = (uint8x8_t)vzip1_s16(v49, v51);
        v54 = (uint8x8_t)vtrn2_s16(v49, v51);
        v55 = (uint8x8_t)vzip1_s16(v50, v52);
        v56 = (uint8x8_t)vtrn2_s16(v50, v52);
        v57 = vmla_s16(vmul_s16(v35, v39), v32, v38);
        v58 = vmla_s16(vmul_s16(*(int16x4_t *)v29.i8, v38), v32, v37);
        v59 = vmla_s16(vmla_s16(vmul_s16(v34, v38), *(int16x4_t *)v29.i8, v37), v32, v36);
        v60 = vmul_s16(v32, v42);
        v32 = (int16x4_t)vmovl_u8(v53).u64[0];
        *(int16x4_t *)v61.i8 = vqadd_s16(vqadd_s16(vmla_s16(v47, v32, v41), v60), vmul_s16(*(int16x4_t *)v29.i8, v43));
        v33 = (int16x4_t)vmovl_u8(v55).u64[0];
        v62 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(v57, *(int16x4_t *)v31.i8, v37), *(int16x4_t *)v30.i8, v36), v32, v40), v33, v41), vmul_s16(*(int16x4_t *)v29.i8, v42)), vmul_s16(v34, v43));
        v63 = vmla_s16(v58, *(int16x4_t *)v31.i8, v36);
        v64 = vmul_s16(v34, v42);
        *(int16x4_t *)v30.i8 = v34;
        v34 = (int16x4_t)vmovl_u8(v54).u64[0];
        *(int16x4_t *)v65.i8 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v63, v32, v39), v33, v40), v34, v41), v64), vmul_s16(v35, v43));
        v66 = vmul_s16(v35, v42);
        *(int16x4_t *)v31.i8 = v35;
        v35 = (int16x4_t)vmovl_u8(v56).u64[0];
        v61.u64[1] = (unint64_t)v62;
        v67 = (int16x4_t)vqrshrun_n_s16(v61, 7uLL);
        v65.u64[1] = (unint64_t)vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v59, v33, v39), v34, v40), v35, v41), v66), vmul_s16(v32, v43));
        v68 = (int16x4_t)vqrshrun_n_s16(v65, 7uLL);
        *(int16x4_t *)v65.i8 = vtrn1_s16(v67, v68);
        v69 = (int32x2_t)vtrn2_s16(v67, v68);
        v70 = (int8x8_t)vzip1_s32(*(int32x2_t *)v65.i8, v69);
        v71 = (int8x8_t)vzip2_s32(*(int32x2_t *)v65.i8, v69);
        *(int8x8_t *)v65.i8 = vtrn1_s8(v70, v71);
        a3->i32[v15 / 4] = v65.i32[0];
        v72 = vtrn2_s8(v70, v71);
        *(__int32 *)((char *)a3->i32 + 2 * a4 + v15) = v65.i32[1];
        *(__int32 *)((char *)a3->i32 + a4 + v15) = v72.i32[0];
        *(__int32 *)((char *)a3->i32 + 2 * a4 + a4 + v15) = v72.i32[1];
        v15 += 4;
      }
      while (a11 != (_DWORD)v15);
    }
    else if (a11 == 4)
    {
      v73 = vdupq_lane_s16(*(int16x4_t *)v14.i8, 0);
      v74 = vdupq_lane_s16(*(int16x4_t *)v14.i8, 1);
      v75 = vdupq_lane_s16(*(int16x4_t *)v14.i8, 2);
      v76 = vdupq_laneq_s16(v14, 5);
      v77 = vdupq_laneq_s16(v14, 6);
      v78 = vdupq_laneq_s16(v14, 7);
      v79 = a12 + 8;
      v80 = vdupq_lane_s16(*(int16x4_t *)v14.i8, 3);
      v81 = vdupq_laneq_s16(v14, 4);
      v82 = (int32x2_t *)(result + 4);
      do
      {
        *(int32x2_t *)v83.i8 = *(int32x2_t *)((char *)v82 - 7);
        v84 = (uint64_t *)((char *)&v82[-1] + a2 + 1);
        v85.i64[0] = *v84;
        v86 = (uint64_t *)((char *)v84 + a2);
        v87.i64[0] = *v86;
        v88 = (uint64_t *)((char *)v86 + a2);
        v89.i64[0] = *v88;
        v90 = *(uint64_t *)((char *)v88 + a2);
        v91 = (uint64_t *)((char *)v88 + a2 + a2);
        v92 = *v91;
        v93 = (uint64_t *)((char *)v91 + a2);
        v83.i64[1] = v90;
        v85.i64[1] = v92;
        v94 = (int16x8_t)vtrn1q_s8(v83, v85);
        v95 = (int16x8_t)vtrn2q_s8(v83, v85);
        v87.i64[1] = *v93;
        v89.i64[1] = *(uint64_t *)((char *)v93 + a2);
        v96 = (int16x8_t)vtrn1q_s8(v87, v89);
        v97 = (int16x8_t)vtrn2q_s8(v87, v89);
        v98 = (int32x4_t)vtrn1q_s16(v94, v96);
        v99 = (int32x4_t)vtrn2q_s16(v94, v96);
        v100 = (int32x4_t)vtrn1q_s16(v95, v97);
        v101 = (int32x4_t)vtrn2q_s16(v95, v97);
        v102 = (int8x16_t)vuzp1q_s32(v98, v100);
        v103 = (int8x16_t)vuzp2q_s32(v98, v100);
        v104 = (int8x16_t)vuzp1q_s32(v99, v101);
        v105 = (uint8x8_t)vextq_s8(v102, v102, 8uLL).u64[0];
        v106 = (uint8x8_t)vextq_s8(v103, v103, 8uLL).u64[0];
        v107 = (uint8x8_t)vzip2_s32(*(int32x2_t *)v99.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v99, (int8x16_t)v99, 8uLL));
        v108 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v102.i8);
        v109 = (int32x2_t *)((char *)v93 + a2 + 7 - 6 * a2);
        v110 = *v109;
        v111 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v103.i8);
        v112 = (uint64_t *)((char *)v109 + a2);
        v103.i64[0] = *v112;
        v113 = (int32x2_t *)((char *)v112 + a2);
        v114 = *v113;
        v115 = (int32x2_t *)((char *)v113 + a2);
        v116 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL));
        v117 = *v115;
        v118 = (int32x2_t *)((char *)v115 + a2);
        v119 = *v118;
        v120 = (int32x2_t *)((char *)v118 + a2);
        v121 = (int16x8_t)vmovl_u8(v107);
        v122 = (int16x4_t)vzip1_s32(*v82, v117);
        v123 = (int16x4_t)vzip1_s32(v110, v119);
        *(int32x2_t *)v103.i8 = vzip1_s32(*(int32x2_t *)v103.i8, *v120);
        v124 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v104.i8);
        v125 = (int16x4_t)vzip1_s32(v114, *(int32x2_t *)((char *)v120 + a2));
        v126 = (int8x8_t)vtrn1_s16(v122, *(int16x4_t *)v103.i8);
        *(int16x4_t *)v103.i8 = vtrn2_s16(v122, *(int16x4_t *)v103.i8);
        v127 = (int8x8_t)vtrn1_s16(v123, v125);
        v128 = (int8x8_t)vtrn2_s16(v123, v125);
        v129 = (int16x8_t)vmovl_u8(v105);
        v130 = (uint8x8_t)vtrn1_s8(v126, v127);
        v131 = (uint8x8_t)vtrn2_s8(v126, v127);
        v132 = (uint8x8_t)vtrn1_s8(*(int8x8_t *)v103.i8, v128);
        v133 = (uint8x8_t)vtrn2_s8(*(int8x8_t *)v103.i8, v128);
        v134 = (int16x8_t)vmovl_u8(v130);
        v135 = (int16x8_t)vmovl_u8(v106);
        v136 = (int16x8_t)vmovl_u8(v131);
        v137 = (int16x8_t)vmovl_u8(v132);
        v138 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v76, v121), v74, v124), v73, v129), v75, v116), v77, v134);
        v139 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v74, v116), v73, v124), v75, v111), v76, v134), v77, v136), v78, v137);
        *(int8x8_t *)v124.i8 = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v77, v121), v74, v129), v73, v108), v75, v124), v76, v135), v78, v134), vmulq_s16(v80, v116)), vmulq_s16(v81, v111)), 7uLL);
        *(int8x8_t *)v108.i8 = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(v138, v78, v136), vmulq_s16(v80, v111)), vmulq_s16(v81, v135)), 7uLL);
        v140 = vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v74, v111), v73, v116), v75, v135), v76, v136), v77, v137), v78, (int16x8_t)vmovl_u8(v133));
        *(int8x8_t *)v116.i8 = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(v139, vmulq_s16(v80, v135)), vmulq_s16(v81, v121)), 7uLL);
        *(int8x8_t *)v121.i8 = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(v140, vmulq_s16(v80, v121)), vmulq_s16(v81, v134)), 7uLL);
        *(int8x8_t *)v140.i8 = vtrn1_s8(*(int8x8_t *)v124.i8, *(int8x8_t *)v108.i8);
        *(int8x8_t *)v134.i8 = vtrn2_s8(*(int8x8_t *)v124.i8, *(int8x8_t *)v108.i8);
        *(int8x8_t *)v124.i8 = vtrn1_s8(*(int8x8_t *)v116.i8, *(int8x8_t *)v121.i8);
        *(int8x8_t *)v121.i8 = vtrn2_s8(*(int8x8_t *)v116.i8, *(int8x8_t *)v121.i8);
        *(int16x4_t *)v116.i8 = vtrn1_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v124.i8);
        *(int16x4_t *)v140.i8 = vtrn2_s16(*(int16x4_t *)v140.i8, *(int16x4_t *)v124.i8);
        *(int16x4_t *)v124.i8 = vtrn1_s16(*(int16x4_t *)v134.i8, *(int16x4_t *)v121.i8);
        a3->i32[0] = v116.i32[0];
        a3->i32[a4] = v116.i32[1];
        *(__int32 *)((char *)a3->i32 + a4) = v124.i32[0];
        *(int16x4_t *)v121.i8 = vtrn2_s16(*(int16x4_t *)v134.i8, *(int16x4_t *)v121.i8);
        *(__int32 *)((char *)a3->i32 + 5 * a4) = v124.i32[1];
        *(__int32 *)((char *)a3->i32 + 2 * a4) = v140.i32[0];
        *(__int32 *)((char *)a3->i32 + 6 * a4) = v140.i32[1];
        result = (char *)a3 + 7 * a4;
        *(__int32 *)((char *)a3->i32 + 3 * a4) = v121.i32[0];
        *(_DWORD *)result = v121.i32[1];
        a3 += a4;
        v79 -= 8;
        v82 += a2;
      }
      while (v79 > 8);
    }
    else
    {
      v141 = 8 * a2;
      v142 = vdupq_lane_s16(*(int16x4_t *)v14.i8, 0);
      v143 = vdupq_lane_s16(*(int16x4_t *)v14.i8, 1);
      v144 = vdupq_lane_s16(*(int16x4_t *)v14.i8, 2);
      v145 = vdupq_laneq_s16(v14, 5);
      v146 = vdupq_laneq_s16(v14, 6);
      v147 = vdupq_laneq_s16(v14, 7);
      v148 = vdupq_lane_s16(*(int16x4_t *)v14.i8, 3);
      v149 = result + 4;
      v150 = vdupq_laneq_s16(v14, 4);
      do
      {
        v151 = 0;
        v152.i64[0] = *v13;
        v153.i64[0] = *(uint64_t *)((char *)v13 + a2);
        v154 = (uint64_t *)((char *)v13 + a2 + a2);
        v155.i64[0] = *v154;
        v156 = (uint64_t *)((char *)v154 + a2);
        v157.i64[0] = *v156;
        v158 = (uint64_t *)((char *)v156 + a2);
        v159 = *v158;
        v160 = (uint64_t *)((char *)v158 + a2);
        v161 = *v160;
        v162 = (uint64_t *)((char *)v160 + a2);
        v152.i64[1] = v159;
        v153.i64[1] = v161;
        v163 = (int16x8_t)vtrn1q_s8(v152, v153);
        v155.i64[1] = *v162;
        v164 = (int16x8_t)vtrn2q_s8(v152, v153);
        v157.i64[1] = *(uint64_t *)((char *)v162 + a2);
        v165 = (int16x8_t)vtrn1q_s8(v155, v157);
        v166 = (int16x8_t)vtrn2q_s8(v155, v157);
        v167 = (int32x4_t)vtrn1q_s16(v163, v165);
        v168 = (int32x4_t)vtrn2q_s16(v163, v165);
        v169 = (int32x4_t)vtrn1q_s16(v164, v166);
        v170 = (int32x4_t)vtrn2q_s16(v164, v166);
        v171 = (int8x16_t)vuzp1q_s32(v167, v169);
        v172 = (int8x16_t)vuzp2q_s32(v167, v169);
        v173 = (int8x16_t)vuzp1q_s32(v168, v170);
        v174 = (uint8x8_t)vextq_s8(v172, v172, 8uLL).u64[0];
        v175 = (uint8x8_t)vzip2_s32(*(int32x2_t *)v168.i8, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v168, (int8x16_t)v168, 8uLL));
        v176 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v171.i8);
        v177 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v171, v171, 8uLL));
        v178 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v173.i8);
        v179 = (int16x8_t)vmovl_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL));
        v180 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v172.i8);
        v181 = (int16x8_t)vmovl_u8(v174);
        v182 = (int16x8_t)vmovl_u8(v175);
        do
        {
          v183 = (uint64_t *)&v149[v151 * 8 + a2];
          v184.i64[0] = *(_QWORD *)&v149[v151 * 8];
          v185.i64[0] = *v183;
          v186.i64[0] = *(uint64_t *)((char *)v183 + a2);
          v187 = (uint64_t *)((char *)v183 + a2 + a2);
          v188.i64[0] = *v187;
          v189 = *(uint64_t *)((char *)v187 + a2);
          v190 = (uint64_t *)((char *)v187 + a2 + a2);
          v184.i64[1] = v189;
          v185.i64[1] = *v190;
          v191 = (int16x8_t)vtrn1q_s8(v184, v185);
          v192 = (int16x8_t)vtrn2q_s8(v184, v185);
          v186.i64[1] = *(uint64_t *)((char *)v190 + a2);
          v188.i64[1] = *(uint64_t *)((char *)v190 + a2 + a2);
          v193 = (int16x8_t)vtrn1q_s8(v186, v188);
          v194 = (int16x8_t)vtrn2q_s8(v186, v188);
          v195 = (int32x4_t)vtrn1q_s16(v191, v193);
          v196 = (int32x4_t)vtrn2q_s16(v191, v193);
          v197 = (int32x4_t)vtrn1q_s16(v192, v194);
          v198 = (int8x16_t)vuzp1q_s32(v195, v197);
          v199 = (int32x4_t)vtrn2q_s16(v192, v194);
          v200 = (int8x16_t)vuzp2q_s32(v195, v197);
          v201 = (int8x16_t)vuzp1q_s32(v196, v199);
          v202 = (int8x16_t)vuzp2q_s32(v196, v199);
          v203 = (uint8x8_t)vextq_s8(v198, v198, 8uLL).u64[0];
          v204 = (uint8x8_t)vextq_s8(v201, v201, 8uLL).u64[0];
          v195.i64[0] = vextq_s8(v200, v200, 8uLL).u64[0];
          v196.i64[0] = vextq_s8(v202, v202, 8uLL).u64[0];
          v205 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v198.i8);
          v206 = vmlaq_s16(vmulq_s16(v176, v142), v177, v143);
          v207 = vmulq_s16(v177, v142);
          v177 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v201.i8);
          v208 = vmulq_s16(v179, v148);
          v209 = vmlaq_s16(vmlaq_s16(v207, v178, v143), v179, v144);
          v210 = vmlaq_s16(vmulq_s16(v178, v142), v179, v143);
          v176 = (int16x8_t)vmovl_u8(v203);
          v211 = vmulq_s16(v179, v142);
          v179 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v200.i8);
          v212 = vmlaq_s16(vmlaq_s16(vmlaq_s16(v206, v178, v144), v181, v145), v182, v146);
          v178 = (int16x8_t)vmovl_u8(v204);
          v213 = vmulq_s16(v180, v150);
          v214 = vmulq_s16(v180, v148);
          v215 = vmlaq_s16(v210, v180, v144);
          v216 = vmlaq_s16(v211, v180, v143);
          v217 = vmulq_s16(v180, v142);
          v180 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v195.i8);
          v218 = vmulq_s16(v181, v150);
          v219 = vmulq_s16(v181, v148);
          v220 = vmlaq_s16(v216, v181, v144);
          v221 = vmlaq_s16(v217, v181, v143);
          v222 = vqaddq_s16(vmlaq_s16(v212, v147, v205), v208);
          v223 = vmulq_s16(v181, v142);
          v181 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v202.i8);
          v224 = vqaddq_s16(v222, v213);
          v225 = vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v209, v182, v145), v146, v205), v147, v176), v214);
          v226 = vmulq_s16(v182, v150);
          v227 = vmulq_s16(v182, v148);
          v228 = vmlaq_s16(v221, v182, v144);
          v229 = vmlaq_s16(v223, v182, v143);
          v230 = vqaddq_s16(v225, v218);
          v231 = vmulq_s16(v182, v142);
          v182 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v196.i8);
          v232 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v215, v145, v205), v146, v176), v147, v177), v219), v226);
          v233 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v220, v145, v176), v146, v177), v147, v178), v227), vmulq_s16(v150, v205));
          v234 = vqrshrun_high_n_s16(vqrshrun_n_s16(v224, 7uLL), vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v228, v145, v177), v146, v178), v147, v179), vmulq_s16(v148, v205)), vmulq_s16(v150, v176)), 7uLL);
          v235 = vqrshrun_high_n_s16(vqrshrun_n_s16(v230, 7uLL), vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v229, v144, v205), v145, v178), v146, v179), v147, v180), vmulq_s16(v148, v176)), vmulq_s16(v150, v177)), 7uLL);
          v236 = (int16x8_t)vtrn1q_s8(v234, v235);
          v237 = (int16x8_t)vtrn2q_s8(v234, v235);
          v238 = vqrshrun_high_n_s16(vqrshrun_n_s16(v232, 7uLL), vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v231, v143, v205), v144, v176), v145, v179), v146, v180), v147, v181), vmulq_s16(v148, v177)), vmulq_s16(v150, v178)), 7uLL);
          v239 = vqrshrun_high_n_s16(vqrshrun_n_s16(v233, 7uLL), vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v143, v176), v142, v205), v144, v177), v145, v180), v146, v181), v147, v182), vmulq_s16(v148, v178)), vmulq_s16(v150, v179)), 7uLL);
          v240 = (int16x8_t)vtrn1q_s8(v238, v239);
          v241 = (int16x8_t)vtrn2q_s8(v238, v239);
          v242 = (int32x4_t)vtrn1q_s16(v236, v240);
          v243 = (int32x4_t)vtrn2q_s16(v236, v240);
          v244 = (int32x4_t)vtrn1q_s16(v237, v241);
          v245 = (int32x4_t)vtrn2q_s16(v237, v241);
          v246 = (int8x16_t)vuzp1q_s32(v242, v244);
          v247 = (int8x16_t)vuzp2q_s32(v242, v244);
          v248 = (int8x16_t)vuzp1q_s32(v243, v245);
          v249 = (int8x16_t)vuzp2q_s32(v243, v245);
          a3[v151] = *(uint8x8_t *)v246.i8;
          v250 = (uint8x8_t *)((char *)&a3[v151] + a4);
          *v250 = (uint8x8_t)vextq_s8(v246, v246, 8uLL).u64[0];
          v251 = (uint8x8_t *)((char *)v250 + a4);
          v252 = (uint8x8_t *)((char *)v251 + a4 + a4);
          *v251 = *(uint8x8_t *)v248.i8;
          *(uint8x8_t *)((char *)v251 + a4) = (uint8x8_t)vextq_s8(v248, v248, 8uLL).u64[0];
          v253 = (uint8x8_t *)((char *)v252 + a4 + a4);
          ++v151;
          *v252 = *(uint8x8_t *)v247.i8;
          *(uint8x8_t *)((char *)v252 + a4) = (uint8x8_t)vextq_s8(v247, v247, 8uLL).u64[0];
          *v253 = *(uint8x8_t *)v249.i8;
          *(uint8x8_t *)((char *)v253 + a4) = (uint8x8_t)vextq_s8(v249, v249, 8uLL).u64[0];
        }
        while (a11 != (_DWORD)(v151 * 8));
        v13 = (uint64_t *)((char *)v13 + v141);
        a3 += a4;
        v149 += v141;
        v254 = __OFSUB__(v12, 8);
        v12 -= 8;
      }
      while (!((v12 < 0) ^ v254 | (v12 == 0)));
    }
  }
  else if (a5[5] | a5[2])
  {
    v255 = vshr_n_s16(*(int16x4_t *)(a5 + 2), 1uLL);
    v256 = vdupq_lane_s16(v255, 0);
    if (a11 == 4)
    {
      v257 = vdupq_lane_s16(v255, 1);
      v258 = vdupq_lane_s16(v255, 2);
      v259 = vdupq_lane_s16(v255, 3);
      v260 = a12 + 2;
      do
      {
        v261.i32[0] = *(_DWORD *)(result - 1);
        v261.i32[1] = *(_DWORD *)&result[(int)a2 - 1];
        v262.i32[0] = *(_DWORD *)result;
        v262.i32[1] = *(_DWORD *)&result[(int)a2];
        v263.i32[0] = *(_DWORD *)(result + 1);
        v263.i32[1] = *(_DWORD *)&result[(int)a2 + 1];
        v264.i32[0] = *(_DWORD *)(result + 2);
        v264.i32[1] = *(_DWORD *)&result[(int)a2 + 2];
        v265 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v256, (int16x8_t)vmovl_u8(v261)), v257, (int16x8_t)vmovl_u8(v262)), v258, (int16x8_t)vmovl_u8(v263)), v259, (int16x8_t)vmovl_u8(v264)), 6uLL);
        a3->i32[0] = v265.i32[0];
        *(__int32 *)((char *)a3->i32 + a4) = v265.i32[1];
        a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
        v260 -= 2;
        result += 2 * a2;
      }
      while (v260 > 2);
    }
    else
    {
      v270 = 2 * a2;
      v271 = vdupq_lane_s16(v255, 1);
      v272 = 2 * a4;
      v273 = vdupq_lane_s16(v255, 2);
      v274 = (char *)a3 + a4;
      v275 = vdupq_lane_s16(v255, 3);
      v276 = (uint8x8_t *)(result + 2);
      v277 = &result[a2];
      do
      {
        v278 = -1;
        v279 = v276;
        do
        {
          v280 = *(uint8x8_t *)((char *)v279 - 3);
          v281 = *(uint8x8_t *)((char *)v279 - 2);
          v282 = *(uint8x8_t *)((char *)v279 - 1);
          v283 = *v279++;
          result = &v277[v278];
          v284 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v256, (int16x8_t)vmovl_u8(v280)), v271, (int16x8_t)vmovl_u8(v281)), v273, (int16x8_t)vmovl_u8(v282)), v275, (int16x8_t)vmovl_u8(v283)), 6uLL);
          v285 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v256, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v277[v278])), v271, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v277[v278 + 1])), v273, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v277[v278 + 2])), v275, (int16x8_t)vmovl_u8(*(uint8x8_t *)&v277[v278 + 3])), 6uLL);
          *(int8x8_t *)((char *)a3 + v278 + 1) = v284;
          *(int8x8_t *)&v274[v278 + 1] = v285;
          v278 += 8;
        }
        while ((_DWORD)v278 - a11 != -1);
        a3 = (uint8x8_t *)((char *)a3 + v272);
        v274 += v272;
        v276 = (uint8x8_t *)((char *)v276 + v270);
        v277 += v270;
        v254 = __OFSUB__(v12, 2);
        v12 -= 2;
      }
      while (!((v12 < 0) ^ v254 | (v12 == 0)));
    }
  }
  else
  {
    a6.i8[0] = *((_BYTE *)a5 + 6);
    a7.i8[0] = *((_BYTE *)a5 + 8);
    if (a11 == 4)
    {
      v286 = a12 + 4;
      v287 = (int)a2 + 2 * a2;
      v288 = (uint8x8_t)vdup_lane_s8(a6, 0);
      v289 = (uint8x8_t)vdup_lane_s8(a7, 0);
      do
      {
        v290.i32[0] = *(_DWORD *)result;
        v290.i32[1] = *(_DWORD *)&result[(int)a2];
        v291.i32[0] = *(_DWORD *)(result + 1);
        v291.i32[1] = *(_DWORD *)&result[(int)a2 + 1];
        v292.i32[0] = *(_DWORD *)&result[2 * a2];
        v292.i32[1] = *(_DWORD *)&result[v287];
        v293.i32[0] = *(_DWORD *)&result[2 * a2 + 1];
        v293.i32[1] = *(_DWORD *)&result[v287 + 1];
        v294 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v291, v289), v290, v288), 7uLL);
        v295 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v293, v289), v292, v288), 7uLL);
        a3->i32[0] = v294.i32[0];
        *(__int32 *)((char *)a3->i32 + a4) = v294.i32[1];
        v296 = (uint8x8_t *)((char *)a3 + a4 + a4);
        v296->i32[0] = v295.i32[0];
        v297 = (uint8x8_t *)((char *)v296 + a4);
        v297->i32[0] = v295.i32[1];
        result += 4 * a2;
        v286 -= 4;
        a3 = (uint8x8_t *)((char *)v297 + a4);
      }
      while (v286 > 4);
    }
    else if (a11 == 8)
    {
      v266 = a12 + 2;
      v267 = (uint8x8_t)vdup_lane_s8(a6, 0);
      v268 = (uint8x8_t)vdup_lane_s8(a7, 0);
      do
      {
        v269 = vqrshrn_n_u16(vmlal_u8(vmull_u8(*(uint8x8_t *)&result[a2 + 1], v268), *(uint8x8_t *)&result[a2], v267), 7uLL);
        *a3 = vqrshrn_n_u16(vmlal_u8(vmull_u8(*(uint8x8_t *)(result + 1), v268), *(uint8x8_t *)result, v267), 7uLL);
        *(uint8x8_t *)((char *)a3 + a4) = v269;
        a3 = (uint8x8_t *)((char *)a3 + 2 * a4);
        v266 -= 2;
        result += a2 + a2;
      }
      while (v266 > 2);
    }
    else
    {
      v298 = (uint8x16_t)vdupq_lane_s8(a6, 0);
      v299 = (uint8x16_t)vdupq_lane_s8(a7, 0);
      do
      {
        v300 = 0;
        do
        {
          *(uint8x16_t *)a3[v300 / 8].i8 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8(*(uint8x8_t *)&result[v300 + 1], *(uint8x8_t *)v299.i8), *(uint8x8_t *)&result[v300], *(uint8x8_t *)v298.i8), 7uLL), vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)&result[v300 + 1], v299), *(uint8x16_t *)&result[v300], v298), 7uLL);
          v300 += 16;
        }
        while (a11 != (_DWORD)v300);
        result += a2;
        a3 = (uint8x8_t *)((char *)a3 + a4);
        v254 = __OFSUB__(v12--, 1);
      }
      while (!((v12 < 0) ^ v254 | (v12 == 0)));
    }
  }
  return result;
}

uint8x8_t *aom_convolve8_vert_neon(uint8x8_t *result, uint64_t a2, int8x8_t *a3, uint64_t a4, int8x8_t a5, int8x8_t a6, uint64_t a7, uint64_t a8, unsigned __int16 *a9, uint64_t a10, int a11, int a12)
{
  int v12;
  int v13;
  uint8x8_t *v14;
  int16x8_t v15;
  uint8x8_t *v16;
  uint8x8_t v17;
  uint8x8_t *v18;
  uint8x8_t v19;
  uint8x8_t *v20;
  uint8x8_t v21;
  uint8x8_t *v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int16x4_t v26;
  int16x4_t v27;
  int16x4_t v28;
  int16x4_t v29;
  uint8x8_t *v30;
  int16x4_t v31;
  int16x4_t v32;
  int16x4_t v33;
  int16x4_t v34;
  int16x4_t v35;
  int16x4_t v36;
  int16x4_t v37;
  int16x4_t v38;
  int16x4_t v39;
  uint8x8_t v40;
  uint8x8_t *v41;
  uint8x8_t v42;
  uint8x8_t *v43;
  int16x4_t v44;
  int16x4_t v45;
  int16x4_t v46;
  int16x4_t v47;
  int16x8_t v48;
  uint8x8_t v49;
  uint8x8_t *v50;
  int16x4_t v51;
  int16x4_t v52;
  int16x4_t v53;
  int16x8_t v54;
  int16x4_t v55;
  int8x8_t v56;
  int8x8_t *v57;
  int8x8_t *v58;
  int16x8_t v59;
  int16x8_t v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint8x8_t *v67;
  uint8x8_t v68;
  uint8x8_t *v69;
  uint8x8_t v70;
  uint8x8_t *v71;
  uint8x8_t v72;
  uint8x8_t *v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int16x8_t v79;
  int16x8_t v80;
  uint8x8_t *v81;
  int v82;
  int8x8_t *v83;
  uint8x8_t v84;
  uint8x8_t *v85;
  uint8x8_t v86;
  uint8x8_t *v87;
  uint8x8_t v88;
  uint8x8_t *v89;
  int16x8_t v90;
  int16x8_t v91;
  int16x8_t v92;
  int16x8_t v93;
  int16x8_t v94;
  int16x8_t v95;
  int16x8_t v96;
  int16x8_t v97;
  int16x8_t v98;
  int16x8_t v99;
  int16x8_t v100;
  int16x8_t v101;
  int8x8_t *v102;
  int8x8_t *v103;
  int8x8_t *v104;
  uint8x8_t *v105;
  int16x4_t v106;
  uint8x8_t v107;
  uint8x8_t v108;
  int16x8_t v109;
  int16x8_t v110;
  int16x8_t v111;
  int16x8_t v112;
  int16x8_t v113;
  int16x8_t v114;
  uint8x8_t v115;
  uint8x8_t v116;
  uint8x8_t v117;
  uint8x8_t v118;
  int16x8_t v119;
  int16x8_t v120;
  int16x8_t v121;
  int16x8_t v122;
  int8x8_t *v123;
  int8x8_t *v124;
  int v125;
  uint8x8_t v126;
  uint8x8_t v127;
  uint8x8_t v128;
  uint8x8_t v129;
  uint16x8_t v130;
  uint16x8_t v131;
  int16x8_t v132;
  int16x8_t v133;
  int16x8_t v134;
  int16x8_t v135;
  int16x8_t v136;
  int16x8_t v137;
  int16x8_t v138;
  uint8x8_t *v139;
  int v140;
  int8x8_t *v141;
  uint8x8_t v142;
  uint8x8_t *v143;
  uint8x8_t v144;
  uint8x8_t *v145;
  uint8x8_t v146;
  uint8x8_t *v147;
  int16x8_t v148;
  int16x8_t v149;
  int16x8_t v150;
  int16x8_t v151;
  int8x8_t *v152;
  int8x8_t *v153;
  int8x8_t *v154;
  int v155;
  uint8x8_t v156;
  uint8x8_t v157;
  uint8x8_t v158;
  uint8x8_t v159;
  uint8x8_t v160;
  uint8x8_t v161;
  uint8x8_t v162;
  uint8x8_t v163;
  int8x8_t *v164;
  int8x8_t *v165;
  char *v166;
  uint8x16_t v167;
  uint8x16_t v168;
  uint64_t v169;
  BOOL v170;

  v13 = a11;
  v12 = a12;
  v14 = (uint8x8_t *)((char *)result - 3 * a2);
  if (a9[7] | *a9 || a9[6] | a9[1])
  {
    v15 = *(int16x8_t *)a9;
    if (a11 == 4)
    {
      v16 = (uint8x8_t *)((char *)v14 + a2 + a2);
      v17 = *v16;
      v18 = (uint8x8_t *)((char *)v16 + a2);
      v19 = *v18;
      v20 = (uint8x8_t *)((char *)v18 + a2);
      v21 = *v20;
      v22 = (uint8x8_t *)((char *)v20 + a2);
      v23 = (int16x4_t)vmovl_u8(*v14).u64[0];
      v24 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v14 + a2)).u64[0];
      v25 = (int16x4_t)vmovl_u8(v17).u64[0];
      v26 = (int16x4_t)vmovl_u8(v19).u64[0];
      v27 = (int16x4_t)vmovl_u8(v21).u64[0];
      v28 = (int16x4_t)vmovl_u8(*v22).u64[0];
      v29 = (int16x4_t)vmovl_u8(*(uint8x8_t *)((char *)v22 + a2)).u64[0];
      v30 = (uint8x8_t *)((char *)&v14[a2] - a2);
      v31 = vdup_lane_s16(*(int16x4_t *)v15.i8, 0);
      v32 = vdup_lane_s16(*(int16x4_t *)v15.i8, 1);
      v33 = vdup_lane_s16(*(int16x4_t *)v15.i8, 2);
      v34 = vdup_laneq_s16(v15, 5);
      v35 = vdup_laneq_s16(v15, 6);
      v36 = vdup_laneq_s16(v15, 7);
      v37 = vdup_lane_s16(*(int16x4_t *)v15.i8, 3);
      v38 = vdup_laneq_s16(v15, 4);
      do
      {
        v39 = vmla_s16(vmla_s16(vmla_s16(vmla_s16(vmul_s16(v29, v35), v28, v34), v25, v33), v24, v32), v23, v31);
        v23 = v27;
        v40 = *v30;
        v41 = (uint8x8_t *)((char *)v30 + a2);
        v42 = *v41;
        v43 = (uint8x8_t *)((char *)v41 + a2);
        v44 = vmla_s16(vmul_s16(v29, v34), v26, v33);
        v45 = vmla_s16(vmul_s16(v23, v33), v26, v32);
        v46 = vmla_s16(vmla_s16(vmul_s16(v28, v33), v23, v32), v26, v31);
        v47 = (int16x4_t)vmovl_u8(v40).u64[0];
        *(int16x4_t *)v48.i8 = vqadd_s16(vqadd_s16(vmla_s16(v39, v47, v36), vmul_s16(v26, v37)), vmul_s16(v23, v38));
        v49 = *v43;
        v50 = (uint8x8_t *)((char *)v43 + a2);
        v27 = (int16x4_t)vmovl_u8(v42).u64[0];
        v51 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(vmla_s16(v44, v25, v32), v24, v31), v47, v35), v27, v36), vmul_s16(v23, v37)), vmul_s16(v28, v38));
        v52 = vmla_s16(v45, v25, v31);
        v53 = vmul_s16(v28, v37);
        v24 = v28;
        v28 = (int16x4_t)vmovl_u8(v49).u64[0];
        *(int16x4_t *)v54.i8 = vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v52, v47, v34), v27, v35), v28, v36), v53), vmul_s16(v29, v38));
        v55 = vmul_s16(v29, v37);
        v25 = v29;
        v29 = (int16x4_t)vmovl_u8(*v50).u64[0];
        v48.u64[1] = (unint64_t)v51;
        *(int8x8_t *)v48.i8 = vqrshrun_n_s16(v48, 7uLL);
        v54.u64[1] = (unint64_t)vqadd_s16(vqadd_s16(vmla_s16(vmla_s16(vmla_s16(v46, v27, v34), v28, v35), v29, v36), v55), vmul_s16(v47, v38));
        v56 = vqrshrun_n_s16(v54, 7uLL);
        a3->i32[0] = v48.i32[0];
        *(__int32 *)((char *)a3->i32 + a4) = v48.i32[1];
        v57 = (int8x8_t *)((char *)a3 + a4 + a4);
        v57->i32[0] = v56.i32[0];
        v58 = (int8x8_t *)((char *)v57 + a4);
        v58->i32[0] = v56.i32[1];
        v30 = (uint8x8_t *)((char *)v50 + a2);
        a3 = (int8x8_t *)((char *)v58 + a4);
        v26 = v47;
        v12 -= 4;
      }
      while (v12);
    }
    else
    {
      v59 = vdupq_lane_s16(*(int16x4_t *)v15.i8, 0);
      v60 = vdupq_lane_s16(*(int16x4_t *)v15.i8, 1);
      v61 = vdupq_lane_s16(*(int16x4_t *)v15.i8, 2);
      v62 = vdupq_laneq_s16(v15, 5);
      v63 = vdupq_laneq_s16(v15, 6);
      v64 = vdupq_laneq_s16(v15, 7);
      v65 = vdupq_lane_s16(*(int16x4_t *)v15.i8, 3);
      v66 = vdupq_laneq_s16(v15, 4);
      do
      {
        v67 = (uint8x8_t *)((char *)v14 + a2 + a2);
        v68 = *v67;
        v69 = (uint8x8_t *)((char *)v67 + a2);
        v70 = *v69;
        v71 = (uint8x8_t *)((char *)v69 + a2);
        v72 = *v71;
        v73 = (uint8x8_t *)((char *)v71 + a2);
        v74 = (int16x8_t)vmovl_u8(*v14);
        v75 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v14 + a2));
        v76 = (int16x8_t)vmovl_u8(v68);
        v77 = (int16x8_t)vmovl_u8(v70);
        v78 = (int16x8_t)vmovl_u8(v72);
        v79 = (int16x8_t)vmovl_u8(*v73);
        v80 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v73 + a2));
        v81 = (uint8x8_t *)((char *)v14 + 7 * a2);
        v82 = a12;
        v83 = a3;
        do
        {
          v84 = *v81;
          v85 = (uint8x8_t *)((char *)v81 + a2);
          v86 = *v85;
          v87 = (uint8x8_t *)((char *)v85 + a2);
          v88 = *v87;
          v89 = (uint8x8_t *)((char *)v87 + a2);
          v90 = vmlaq_s16(vmlaq_s16(vmulq_s16(v74, v59), v75, v60), v76, v61);
          v91 = vmlaq_s16(vmlaq_s16(vmulq_s16(v75, v59), v76, v60), v77, v61);
          v92 = (int16x8_t)vmovl_u8(v84);
          v93 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v90, v79, v62), v80, v63), v64, v92), vmulq_s16(v77, v65)), vmulq_s16(v78, v66));
          v94 = vmulq_s16(v78, v65);
          v95 = vmlaq_s16(vmlaq_s16(vmulq_s16(v76, v59), v77, v60), v78, v61);
          v96 = vmlaq_s16(vmulq_s16(v77, v59), v78, v60);
          v74 = v78;
          v78 = (int16x8_t)vmovl_u8(v86);
          v97 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v91, v80, v62), v63, v92), v64, v78), v94), vmulq_s16(v79, v66));
          v98 = vmulq_s16(v79, v65);
          v99 = vmlaq_s16(v96, v79, v61);
          v75 = v79;
          v79 = (int16x8_t)vmovl_u8(v88);
          v100 = vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v95, v62, v92), v63, v78), v64, v79), v98), vmulq_s16(v80, v66));
          v101 = vmulq_s16(v80, v65);
          v76 = v80;
          v80 = (int16x8_t)vmovl_u8(*v89);
          *v83 = vqrshrun_n_s16(v93, 7uLL);
          v102 = (int8x8_t *)((char *)v83 + a4);
          *v102 = vqrshrun_n_s16(v97, 7uLL);
          v103 = (int8x8_t *)((char *)v102 + a4);
          *v103 = vqrshrun_n_s16(v100, 7uLL);
          v104 = (int8x8_t *)((char *)v103 + a4);
          *v104 = vqrshrun_n_s16(vqaddq_s16(vqaddq_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(v99, v62, v78), v63, v79), v64, v80), v101), vmulq_s16(v66, v92)), 7uLL);
          v81 = (uint8x8_t *)((char *)v89 + a2);
          v83 = (int8x8_t *)((char *)v104 + a4);
          v77 = v92;
          v82 -= 4;
        }
        while (v82);
        ++v14;
        ++a3;
        v13 -= 8;
      }
      while (v13);
    }
  }
  else if (a9[5] | a9[2])
  {
    v105 = (uint8x8_t *)((char *)v14 + 2 * a2);
    v106 = vshr_n_s16(*(int16x4_t *)(a9 + 2), 1uLL);
    if (a11 == 4)
    {
      v107.i32[0] = v105->i32[0];
      v107.i32[1] = *(__int32 *)((char *)v105->i32 + (int)a2);
      v108.i32[0] = *(__int32 *)((char *)v105->i32 + a2);
      v108.i32[1] = *(__int32 *)((char *)v105->i32 + a2 + (int)a2);
      v109 = (int16x8_t)vmovl_u8(v107);
      v110 = (int16x8_t)vmovl_u8(v108);
      v111 = vdupq_lane_s16(v106, 0);
      v112 = vdupq_lane_s16(v106, 1);
      v113 = vdupq_lane_s16(v106, 2);
      v114 = vdupq_lane_s16(v106, 3);
      do
      {
        v115.i32[0] = *(__int32 *)((char *)result->i32 + a2);
        v115.i32[1] = *(__int32 *)((char *)result->i32 + a2 + (int)a2);
        v116.i32[0] = *(__int32 *)((char *)result->i32 + 2 * a2);
        v116.i32[1] = *(__int32 *)((char *)result->i32 + 2 * a2 + (int)a2);
        v117.i32[0] = *(__int32 *)((char *)result->i32 + 3 * a2);
        v117.i32[1] = *(__int32 *)((char *)result->i32 + 3 * a2 + (int)a2);
        v118.i32[0] = result->i32[a2];
        v118.i32[1] = *(__int32 *)((char *)&result->i32[a2] + (int)a2);
        v119 = (int16x8_t)vmovl_u8(v115);
        v120 = (int16x8_t)vmovl_u8(v116);
        v121 = vmlaq_s16(vmulq_s16(v110, v112), v109, v111);
        v109 = (int16x8_t)vmovl_u8(v117);
        v122 = (int16x8_t)vmovl_u8(v118);
        *(int8x8_t *)v121.i8 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(v121, v113, v119), v114, v120), 6uLL);
        *(int8x8_t *)v119.i8 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v111, v119), v112, v120), v113, v109), v114, v122), 6uLL);
        a3->i32[0] = v121.i32[0];
        *(__int32 *)((char *)a3->i32 + a4) = v121.i32[1];
        v123 = (int8x8_t *)((char *)a3 + a4 + a4);
        v123->i32[0] = v119.i32[0];
        v124 = (int8x8_t *)((char *)v123 + a4);
        result = (uint8x8_t *)((char *)result + 4 * a2);
        v124->i32[0] = v119.i32[1];
        a3 = (int8x8_t *)((char *)v124 + a4);
        v110 = v122;
        v12 -= 4;
      }
      while (v12);
    }
    else
    {
      v132 = vdupq_lane_s16(v106, 0);
      v133 = vdupq_lane_s16(v106, 1);
      v134 = vdupq_lane_s16(v106, 2);
      v135 = vdupq_lane_s16(v106, 3);
      do
      {
        v136 = (int16x8_t)vmovl_u8(*v105);
        v137 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v105 + a2));
        v138 = (int16x8_t)vmovl_u8(*(uint8x8_t *)((char *)v105 + a2 + a2));
        v139 = (uint8x8_t *)((char *)v105 + 3 * a2);
        v140 = a12;
        v141 = a3;
        do
        {
          v142 = *v139;
          v143 = (uint8x8_t *)((char *)v139 + a2);
          v144 = *v143;
          v145 = (uint8x8_t *)((char *)v143 + a2);
          v146 = *v145;
          v147 = (uint8x8_t *)((char *)v145 + a2);
          v148 = (int16x8_t)vmovl_u8(v142);
          v149 = vmlaq_s16(vmlaq_s16(vmulq_s16(v137, v133), v138, v134), v136, v132);
          v136 = (int16x8_t)vmovl_u8(v144);
          v150 = (int16x8_t)vmovl_u8(v146);
          v151 = (int16x8_t)vmovl_u8(*v147);
          *v141 = vqrshrun_n_s16(vmlaq_s16(v149, v135, v148), 6uLL);
          v152 = (int8x8_t *)((char *)v141 + a4);
          *v152 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v137, v132), v138, v133), v134, v148), v135, v136), 6uLL);
          v153 = (int8x8_t *)((char *)v152 + a4);
          *v153 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v138, v132), v133, v148), v134, v136), v135, v150), 6uLL);
          v154 = (int8x8_t *)((char *)v153 + a4);
          v139 = (uint8x8_t *)((char *)v147 + a2);
          *v154 = vqrshrun_n_s16(vmlaq_s16(vmlaq_s16(vmlaq_s16(vmulq_s16(v132, v148), v133, v136), v134, v150), v135, v151), 6uLL);
          v141 = (int8x8_t *)((char *)v154 + a4);
          v137 = v150;
          v138 = v151;
          v140 -= 4;
        }
        while (v140);
        ++v105;
        ++a3;
        v13 -= 8;
      }
      while (v13);
    }
  }
  else
  {
    a5.i8[0] = *((_BYTE *)a9 + 6);
    a6.i8[0] = *((_BYTE *)a9 + 8);
    if (a11 == 4)
    {
      v155 = a12 + 4;
      v156 = (uint8x8_t)vdup_lane_s8(a5, 0);
      v157 = (uint8x8_t)vdup_lane_s8(a6, 0);
      do
      {
        v158.i32[0] = result->i32[0];
        v158.i32[1] = *(__int32 *)((char *)result->i32 + (int)a2);
        v159.i32[0] = *(__int32 *)((char *)result->i32 + a2);
        v159.i32[1] = *(__int32 *)((char *)result->i32 + a2 + (int)a2);
        v160.i32[0] = *(__int32 *)((char *)result->i32 + 2 * a2);
        v160.i32[1] = *(__int32 *)((char *)result->i32 + 2 * a2 + (int)a2);
        v161.i32[0] = *(__int32 *)((char *)result->i32 + 3 * a2);
        v161.i32[1] = *(__int32 *)((char *)result->i32 + 3 * a2 + (int)a2);
        v162 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v159, v157), v158, v156), 7uLL);
        v163 = vqrshrn_n_u16(vmlal_u8(vmull_u8(v161, v157), v160, v156), 7uLL);
        a3->i32[0] = v162.i32[0];
        *(__int32 *)((char *)a3->i32 + a4) = v162.i32[1];
        v164 = (int8x8_t *)((char *)a3 + a4 + a4);
        v164->i32[0] = v163.i32[0];
        v165 = (int8x8_t *)((char *)v164 + a4);
        v165->i32[0] = v163.i32[1];
        result = (uint8x8_t *)((char *)result + 4 * a2);
        v155 -= 4;
        a3 = (int8x8_t *)((char *)v165 + a4);
      }
      while (v155 > 4);
    }
    else if (a11 == 8)
    {
      v125 = a12 + 2;
      v126 = (uint8x8_t)vdup_lane_s8(a5, 0);
      v127 = (uint8x8_t)vdup_lane_s8(a6, 0);
      do
      {
        v128 = *result;
        v129 = *(uint8x8_t *)((char *)result + a2);
        result = (uint8x8_t *)((char *)result + 2 * a2);
        v130 = vmlal_u8(vmull_u8(v129, v127), v128, v126);
        v131 = vmlal_u8(vmull_u8(*result, v127), v129, v126);
        *a3 = (int8x8_t)vqrshrn_n_u16(v130, 7uLL);
        *(uint8x8_t *)((char *)a3 + a4) = vqrshrn_n_u16(v131, 7uLL);
        a3 = (int8x8_t *)((char *)a3 + 2 * a4);
        v125 -= 2;
      }
      while (v125 > 2);
    }
    else
    {
      v166 = (char *)result + a2;
      v167 = (uint8x16_t)vdupq_lane_s8(a5, 0);
      v168 = (uint8x16_t)vdupq_lane_s8(a6, 0);
      do
      {
        v169 = 0;
        do
        {
          *(uint8x16_t *)a3[v169].i8 = vqrshrn_high_n_u16(vqrshrn_n_u16(vmlal_u8(vmull_u8(*(uint8x8_t *)&v166[v169 * 8], *(uint8x8_t *)v168.i8), result[v169], *(uint8x8_t *)v167.i8), 7uLL), vmlal_high_u8(vmull_high_u8(*(uint8x16_t *)&v166[v169 * 8], v168), *(uint8x16_t *)result[v169].i8, v167), 7uLL);
          v169 += 2;
        }
        while (a11 != (_DWORD)(v169 * 8));
        result = (uint8x8_t *)((char *)result + a2);
        a3 = (int8x8_t *)((char *)a3 + a4);
        v166 += a2;
        v170 = __OFSUB__(v12--, 1);
      }
      while (!((v12 < 0) ^ v170 | (v12 == 0)));
    }
  }
  return result;
}

_WORD *aom_convolve_copy_neon(_WORD *result, uint64_t a2, _WORD *a3, uint64_t a4, int a5, int a6)
{
  int i;
  uint64_t v7;

  if ((a5 & 0xF) != 0)
  {
    if ((a5 & 7) != 0)
    {
      if ((a5 & 3) != 0)
      {
        if ((a5 & 1) == 0 && a6 >= 1)
        {
          do
          {
            *a3 = *result;
            result = (_WORD *)((char *)result + a2);
            a3 = (_WORD *)((char *)a3 + a4);
            --a6;
          }
          while (a6);
        }
      }
      else if (a6 >= 1)
      {
        do
        {
          *(_DWORD *)a3 = *(_DWORD *)result;
          result = (_WORD *)((char *)result + a2);
          a3 = (_WORD *)((char *)a3 + a4);
          --a6;
        }
        while (a6);
      }
    }
    else if (a6 >= 1)
    {
      do
      {
        *(_QWORD *)a3 = *(_QWORD *)result;
        result = (_WORD *)((char *)result + a2);
        a3 = (_WORD *)((char *)a3 + a4);
        --a6;
      }
      while (a6);
    }
  }
  else if (a5 >= 16 && a6 >= 1)
  {
    for (i = 0; i != a6; ++i)
    {
      v7 = 0;
      do
      {
        *(_OWORD *)&a3[8 * v7] = *(_OWORD *)&result[8 * v7];
        ++v7;
      }
      while (a5 >> 4 != (_DWORD)v7);
      result = (_WORD *)((char *)result + a2);
      a3 = (_WORD *)((char *)a3 + a4);
    }
  }
  return result;
}

uint64_t setup_rtcd_internal_3()
{
  uint64_t result;

  result = aom_arm_cpu_caps();
  aom_convolve8_horiz = aom_convolve8_horiz_neon;
  aom_convolve8_vert = aom_convolve8_vert_neon;
  aom_dist_wtd_sad128x128_avg = (uint64_t)aom_dist_wtd_sad128x128_avg_neon;
  aom_dist_wtd_sad128x64_avg = (uint64_t)aom_dist_wtd_sad128x64_avg_neon;
  aom_dist_wtd_sad16x16_avg = (uint64_t)aom_dist_wtd_sad16x16_avg_neon;
  aom_dist_wtd_sad16x32_avg = (uint64_t)aom_dist_wtd_sad16x32_avg_neon;
  aom_dist_wtd_sad16x8_avg = (uint64_t)aom_dist_wtd_sad16x8_avg_neon;
  aom_dist_wtd_sad32x16_avg = (uint64_t)aom_dist_wtd_sad32x16_avg_neon;
  aom_dist_wtd_sad32x32_avg = (uint64_t)aom_dist_wtd_sad32x32_avg_neon;
  aom_dist_wtd_sad32x64_avg = (uint64_t)aom_dist_wtd_sad32x64_avg_neon;
  aom_dist_wtd_sad64x128_avg = (uint64_t)aom_dist_wtd_sad64x128_avg_neon;
  aom_dist_wtd_sad64x32_avg = (uint64_t)aom_dist_wtd_sad64x32_avg_neon;
  aom_dist_wtd_sad64x64_avg = (uint64_t)aom_dist_wtd_sad64x64_avg_neon;
  aom_get_var_sse_sum_16x16_dual = aom_get_var_sse_sum_16x16_dual_neon;
  aom_get_var_sse_sum_8x8_quad = aom_get_var_sse_sum_8x8_quad_neon;
  aom_sad128x128 = (uint64_t)aom_sad128x128_neon;
  aom_sad128x128_avg = (uint64_t)aom_sad128x128_avg_neon;
  aom_sad128x128x3d = (uint64_t)aom_sad128x128x3d_neon;
  aom_sad128x128x4d = (uint64_t)aom_sad128x128x4d_neon;
  aom_sad128x64 = (uint64_t)aom_sad128x64_neon;
  aom_sad128x64_avg = (uint64_t)aom_sad128x64_avg_neon;
  aom_sad128x64x3d = (uint64_t)aom_sad128x64x3d_neon;
  aom_sad128x64x4d = (uint64_t)aom_sad128x64x4d_neon;
  aom_sad16x16 = (uint64_t)aom_sad16x16_neon;
  aom_sad16x16_avg = (uint64_t)aom_sad16x16_avg_neon;
  aom_sad16x16x3d = (uint64_t)aom_sad16x16x3d_neon;
  aom_sad16x16x4d = (uint64_t)aom_sad16x16x4d_neon;
  aom_sad16x32 = (uint64_t)aom_sad16x32_neon;
  aom_sad16x32_avg = (uint64_t)aom_sad16x32_avg_neon;
  aom_sad16x32x3d = (uint64_t)aom_sad16x32x3d_neon;
  aom_sad16x32x4d = (uint64_t)aom_sad16x32x4d_neon;
  aom_sad16x8 = (uint64_t)aom_sad16x8_neon;
  aom_sad16x8_avg = (uint64_t)aom_sad16x8_avg_neon;
  aom_sad16x8x3d = (uint64_t)aom_sad16x8x3d_neon;
  aom_sad16x8x4d = (uint64_t)aom_sad16x8x4d_neon;
  aom_sad32x16 = (uint64_t)aom_sad32x16_neon;
  aom_sad32x16_avg = (uint64_t)aom_sad32x16_avg_neon;
  aom_sad32x16x3d = (uint64_t)aom_sad32x16x3d_neon;
  aom_sad32x16x4d = (uint64_t)aom_sad32x16x4d_neon;
  aom_sad32x32 = (uint64_t)aom_sad32x32_neon;
  aom_sad32x32_avg = (uint64_t)aom_sad32x32_avg_neon;
  aom_sad32x32x3d = (uint64_t)aom_sad32x32x3d_neon;
  aom_sad32x32x4d = (uint64_t)aom_sad32x32x4d_neon;
  aom_sad32x64 = (uint64_t)aom_sad32x64_neon;
  aom_sad32x64_avg = (uint64_t)aom_sad32x64_avg_neon;
  aom_sad32x64x3d = (uint64_t)aom_sad32x64x3d_neon;
  aom_sad32x64x4d = (uint64_t)aom_sad32x64x4d_neon;
  aom_sad64x128 = (uint64_t)aom_sad64x128_neon;
  aom_sad64x128_avg = (uint64_t)aom_sad64x128_avg_neon;
  aom_sad64x128x3d = (uint64_t)aom_sad64x128x3d_neon;
  aom_sad64x128x4d = (uint64_t)aom_sad64x128x4d_neon;
  aom_sad64x32 = (uint64_t)aom_sad64x32_neon;
  aom_sad64x32_avg = (uint64_t)aom_sad64x32_avg_neon;
  aom_sad64x32x3d = (uint64_t)aom_sad64x32x3d_neon;
  aom_sad64x32x4d = (uint64_t)aom_sad64x32x4d_neon;
  aom_sad64x64 = (uint64_t)aom_sad64x64_neon;
  aom_sad64x64_avg = (uint64_t)aom_sad64x64_avg_neon;
  aom_sad64x64x3d = (uint64_t)aom_sad64x64x3d_neon;
  aom_sad64x64x4d = (uint64_t)aom_sad64x64x4d_neon;
  aom_sad_skip_128x128 = (uint64_t)aom_sad_skip_128x128_neon;
  aom_sad_skip_128x128x4d = (uint64_t)aom_sad_skip_128x128x4d_neon;
  aom_sad_skip_128x64 = (uint64_t)aom_sad_skip_128x64_neon;
  aom_sad_skip_128x64x4d = (uint64_t)aom_sad_skip_128x64x4d_neon;
  aom_sad_skip_16x16 = (uint64_t)aom_sad_skip_16x16_neon;
  aom_sad_skip_16x16x4d = (uint64_t)aom_sad_skip_16x16x4d_neon;
  aom_sad_skip_16x32 = (uint64_t)aom_sad_skip_16x32_neon;
  aom_sad_skip_16x32x4d = (uint64_t)aom_sad_skip_16x32x4d_neon;
  aom_sad_skip_16x8 = (uint64_t)aom_sad_skip_16x8_neon;
  aom_sad_skip_16x8x4d = (uint64_t)aom_sad_skip_16x8x4d_neon;
  aom_sad_skip_32x16 = (uint64_t)aom_sad_skip_32x16_neon;
  aom_sad_skip_32x16x4d = (uint64_t)aom_sad_skip_32x16x4d_neon;
  aom_sad_skip_32x32 = (uint64_t)aom_sad_skip_32x32_neon;
  aom_sad_skip_32x32x4d = (uint64_t)aom_sad_skip_32x32x4d_neon;
  aom_sad_skip_32x64 = (uint64_t)aom_sad_skip_32x64_neon;
  aom_sad_skip_32x64x4d = (uint64_t)aom_sad_skip_32x64x4d_neon;
  aom_sad_skip_64x128 = (uint64_t)aom_sad_skip_64x128_neon;
  aom_sad_skip_64x128x4d = (uint64_t)aom_sad_skip_64x128x4d_neon;
  aom_sad_skip_64x32 = (uint64_t)aom_sad_skip_64x32_neon;
  aom_sad_skip_64x32x4d = (uint64_t)aom_sad_skip_64x32x4d_neon;
  aom_sad_skip_64x64 = (uint64_t)aom_sad_skip_64x64_neon;
  aom_sad_skip_64x64x4d = (uint64_t)aom_sad_skip_64x64x4d_neon;
  aom_sse = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_sse_neon;
  aom_var_2d_u8 = (uint64_t)aom_var_2d_u8_neon;
  aom_variance128x128 = (uint64_t (*)(_QWORD))aom_variance128x128_neon;
  aom_variance128x64 = (uint64_t (*)(_QWORD))aom_variance128x64_neon;
  aom_variance16x16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance16x16_neon;
  aom_variance16x32 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance16x32_neon;
  aom_variance16x8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance16x8_neon;
  aom_variance32x16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance32x16_neon;
  aom_variance32x32 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance32x32_neon;
  aom_variance32x64 = (uint64_t (*)(_QWORD))aom_variance32x64_neon;
  aom_variance4x4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance4x4_neon;
  aom_variance4x8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance4x8_neon;
  aom_variance64x128 = (uint64_t (*)(_QWORD))aom_variance64x128_neon;
  aom_variance64x32 = (uint64_t (*)(_QWORD))aom_variance64x32_neon;
  aom_variance64x64 = (uint64_t (*)(_QWORD))aom_variance64x64_neon;
  aom_variance8x16 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance8x16_neon;
  aom_variance8x4 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance8x4_neon;
  aom_variance8x8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))aom_variance8x8_neon;
  return result;
}

uint64_t aom_codec_enc_init_ver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;

  if ((a5 & 0xFFFFFFFB) != 0x19)
  {
    v6 = 3;
    goto LABEL_9;
  }
  v6 = 8;
  if (!a1 || !a2 || !a3)
  {
LABEL_9:
    if (!a1)
      return v6;
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 8) != 7)
  {
    v6 = 3;
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(a2 + 16);
  if ((v7 & 2) == 0)
  {
    *(_DWORD *)(a1 + 16) = 4;
    return 4;
  }
  if ((a4 & 0x10000) != 0 && (v7 & 0x10000) == 0)
  {
    *(_DWORD *)(a1 + 16) = 4;
    return 4;
  }
  if ((a4 & 0x40000) != 0)
  {
    if ((v7 & 0x40000) == 0)
    {
      *(_DWORD *)(a1 + 16) = 4;
      return 4;
    }
  }
  else if (*(_DWORD *)(a3 + 32) >= 9u)
  {
    *(_QWORD *)(a1 + 24) = "High bit-depth used without the AOM_CODEC_USE_HIGHBITDEPTH flag.";
    *(_DWORD *)(a1 + 16) = 8;
    return 8;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = a4;
  v6 = (*(uint64_t (**)(uint64_t))(a2 + 24))(a1);
  if (!(_DWORD)v6)
  {
LABEL_12:
    *(_DWORD *)(a1 + 16) = v6;
    return v6;
  }
  v9 = *(_QWORD **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 24) = *v9;
    v10 = *(_QWORD *)(a1 + 8);
    if (v10)
    {
      (*(void (**)(void))(v10 + 32))();
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = v6;
      return v6;
    }
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = v6;
  return v6;
}

double aom_codec_enc_config_default(uint64_t a1, char *__dst, int a3)
{
  uint64_t v4;
  _DWORD *i;
  double result;

  if (a1)
  {
    if (__dst)
    {
      if ((*(_BYTE *)(a1 + 16) & 2) != 0)
      {
        v4 = *(unsigned int *)(a1 + 88);
        if ((int)v4 >= 1)
        {
          for (i = *(_DWORD **)(a1 + 96); *i != a3; i += 226)
          {
            if (!--v4)
              return result;
          }
          memcpy(__dst, i, 0x300uLL);
          *(_OWORD *)(__dst + 860) = 0u;
          *(_OWORD *)(__dst + 876) = 0u;
          *(_OWORD *)(__dst + 888) = 0u;
          *(_OWORD *)(__dst + 764) = 0u;
          *(_OWORD *)(__dst + 780) = 0u;
          *(_OWORD *)(__dst + 796) = 0u;
          *(_OWORD *)(__dst + 812) = 0u;
          *(_OWORD *)(__dst + 828) = 0u;
          *(_OWORD *)(__dst + 844) = 0u;
          *(_QWORD *)&result = 0x8000000000;
          *((_DWORD *)__dst + 194) = 4;
          *((_QWORD *)__dst + 96) = 0x8000000000;
          *((_DWORD *)__dst + 222) = 3;
        }
      }
    }
  }
  return result;
}

uint64_t aom_codec_get_cx_data(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  size_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (!a1)
    return 0;
  if (a2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3 && *(_QWORD *)(a1 + 48))
    {
      if ((*(_BYTE *)(v3 + 16) & 2) == 0)
      {
        v4 = 0;
        *(_DWORD *)(a1 + 16) = 4;
        return v4;
      }
      v6 = (*(uint64_t (**)(void))(v3 + 112))();
      v4 = v6;
      if (!v6 || *(_DWORD *)v6)
        return v4;
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(char **)(v7 + 16);
      if (v8)
      {
        v9 = *(char **)(v6 + 8);
        if (v9 != v8)
        {
          v10 = *(_QWORD *)(v6 + 16);
          v11 = *(unsigned int *)(v7 + 32);
          if (v10 + v11 + *(unsigned int *)(v7 + 36) <= *(_QWORD *)(v7 + 24))
          {
            memcpy(&v8[v11], v9, v10);
            v13 = *(_OWORD *)(v4 + 16);
            v12 = *(_OWORD *)(v4 + 32);
            *(_OWORD *)(v7 + 40) = *(_OWORD *)v4;
            *(_OWORD *)(v7 + 56) = v13;
            *(_OWORD *)(v7 + 72) = v12;
            v14 = *(_OWORD *)(v4 + 48);
            v15 = *(_OWORD *)(v4 + 64);
            v16 = *(_OWORD *)(v4 + 80);
            *(_OWORD *)(v7 + 136) = *(_OWORD *)(v4 + 96);
            *(_OWORD *)(v7 + 120) = v16;
            *(_OWORD *)(v7 + 104) = v15;
            *(_OWORD *)(v7 + 88) = v14;
            v17 = *(_OWORD *)(v4 + 112);
            v18 = *(_OWORD *)(v4 + 128);
            v19 = *(_OWORD *)(v4 + 144);
            *(_QWORD *)(v7 + 200) = *(_QWORD *)(v4 + 160);
            *(_OWORD *)(v7 + 184) = v19;
            *(_OWORD *)(v7 + 168) = v18;
            *(_OWORD *)(v7 + 152) = v17;
            v20 = *(_QWORD *)(v7 + 56) + (*(_DWORD *)(v7 + 36) + *(_DWORD *)(v7 + 32));
            *(_QWORD *)(v7 + 48) = v8;
            *(_QWORD *)(v7 + 56) = v20;
            v4 = v7 + 40;
          }
        }
      }
      if (v8 != *(char **)(v4 + 8))
        return v4;
      *(_QWORD *)(v7 + 16) = &v8[*(_QWORD *)(v4 + 16)];
      *(_QWORD *)(v7 + 24) -= *(_QWORD *)(v4 + 16);
      return v4;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = 1;
      return 0;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 8;
    return 0;
  }
}

_QWORD *img_alloc_helper_0(_QWORD *a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9, uint64_t (*a10)(uint64_t, unint64_t), uint64_t a11)
{
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  _QWORD *v36;
  int v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;

  v15 = a1;
  if (a1)
  {
    a1[20] = 0;
    *((_OWORD *)a1 + 8) = 0u;
    *((_OWORD *)a1 + 9) = 0u;
    *((_OWORD *)a1 + 6) = 0u;
    *((_OWORD *)a1 + 7) = 0u;
    *((_OWORD *)a1 + 4) = 0u;
    *((_OWORD *)a1 + 5) = 0u;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  if (!a2 || a3 > 0x8000000 || a4 > 0x8000000 || a5 > 0x10000 || a6 > 0x10000 || a7 > 0x10000 || a8 > 0x10000)
    goto LABEL_80;
  v16 = a5 <= 1 ? 1 : a5;
  v17 = (v16 - 1);
  if ((v16 & v17) != 0)
    goto LABEL_80;
  v18 = a6 <= 1 ? 1 : a6;
  if ((v18 & ((_DWORD)v18 - 1)) != 0)
    goto LABEL_80;
  v19 = a7 <= 1 ? 1 : a7;
  if ((v19 & (v19 - 1)) != 0)
    goto LABEL_80;
  v20 = 12;
  if (a2 <= 768)
  {
    v21 = 24;
    v22 = 16;
    switch(a2)
    {
      case 258:
      case 260:
      case 263:
        goto LABEL_45;
      case 261:
        goto LABEL_34;
      case 262:
        goto LABEL_39;
      default:
        goto LABEL_44;
    }
  }
  if (a2 > 2308)
  {
    if (a2 == 2309)
    {
      v22 = 32;
LABEL_34:
      v23 = (a2 & 0x800) == 0;
      if ((a2 & 0x800) != 0)
        v24 = 16;
      else
        v24 = 8;
      v25 = 1;
      v20 = v22;
      goto LABEL_58;
    }
    if (a2 == 2310)
    {
      v21 = 48;
LABEL_39:
      v23 = (a2 & 0x800) == 0;
      if ((a2 & 0x800) != 0)
        v24 = 16;
      else
        v24 = 8;
      v20 = v21;
      goto LABEL_43;
    }
    if (a2 != 2817)
      goto LABEL_44;
LABEL_32:
    v20 = 24;
    goto LABEL_45;
  }
  if (a2 != 769 && a2 != 771)
  {
    if (a2 != 2306)
    {
LABEL_44:
      v20 = 16;
      goto LABEL_45;
    }
    goto LABEL_32;
  }
LABEL_45:
  v23 = (a2 & 0x800) == 0;
  if ((a2 & 0x800) != 0)
    v24 = 16;
  else
    v24 = 8;
  v25 = 1;
  if (a2 > 770)
  {
    if (a2 > 2308)
    {
      if (a2 == 2817)
        goto LABEL_58;
    }
    else if (a2 == 771 || a2 == 2306)
    {
      goto LABEL_58;
    }
LABEL_43:
    v25 = 0;
    goto LABEL_58;
  }
  if (((a2 - 258) > 5 || ((1 << (a2 - 2)) & 0x2D) == 0) && a2 != 769)
    goto LABEL_43;
LABEL_58:
  v26 = 1;
  if (a2 <= 768)
  {
    if ((a2 - 258) > 5 || ((1 << (a2 - 2)) & 0x25) == 0)
      goto LABEL_68;
  }
  else if (a2 > 2305)
  {
    if (a2 != 2306 && a2 != 2817)
      goto LABEL_68;
  }
  else if (a2 != 769 && a2 != 771)
  {
LABEL_68:
    v26 = 0;
  }
  v27 = -1 << v25;
  if (-1 << v25 >= -v19)
    v27 = -v19;
  v28 = (~v27 + a3) & v27;
  if (-1 << v26 >= -v19)
    v29 = -v19;
  else
    v29 = -1 << v26;
  v30 = 2 * a8;
  v31 = v28 + v30;
  v32 = v20;
  if (v23)
    v33 = 3;
  else
    v33 = 4;
  if ((a2 & 0x100) == 0)
    v31 = ((v28 + v30) * (unint64_t)v20) >> v33;
  v34 = (v18 + (v31 << v33 >> 3) - 1) & -v18;
  if (v34 >> 31)
    goto LABEL_80;
  if (!a1)
  {
    v51 = v29;
    v52 = v24;
    v56 = (v18 + (v31 << v33 >> 3) - 1) & -v18;
    v58 = v28;
    v60 = v25;
    v62 = v26;
    v54 = v20;
    v36 = malloc_type_calloc(1uLL, 0xA8uLL, 0x10B004034508FE5uLL);
    v15 = v36;
    if (!v36)
      goto LABEL_80;
    *((_DWORD *)v36 + 37) = 1;
    v24 = v52;
    v20 = v54;
    v25 = v60;
    v26 = v62;
    v34 = v56;
    LODWORD(v28) = v58;
    v29 = v51;
  }
  v37 = (~v29 + a4) & v29;
  v15[17] = a9;
  if (!a9)
  {
    if ((a2 & 0x100) != 0)
      v38 = (v34 * (v37 + v30) * v32) >> v33;
    else
      v38 = v34 * (v37 + v30);
    v63 = v26;
    v53 = v37;
    if (a10)
    {
      v57 = v34;
      v59 = v28;
      v61 = v25;
      v39 = v24;
      v40 = v20;
      v41 = v38;
      v42 = a10(a11, v16 + v38 - 1);
      if (!v42)
      {
        v15[17] = 0;
        *((_DWORD *)v15 + 36) = 0;
        v15[13] = v41;
        goto LABEL_80;
      }
      v43 = 0;
      v44 = (v42 + v17) & ~v17;
      v20 = v40;
      v24 = v39;
      v25 = v61;
      v26 = v63;
      LODWORD(v34) = v57;
      LODWORD(v28) = v59;
      v37 = v53;
      v45 = v41;
    }
    else
    {
      v46 = v16;
      v55 = v20;
      v47 = v24;
      v48 = v25;
      v49 = v28;
      v50 = v34;
      v45 = v38;
      v44 = aom_memalign(v46, v38);
      v37 = v53;
      v20 = v55;
      LODWORD(v34) = v50;
      LODWORD(v28) = v49;
      v26 = v63;
      v25 = v48;
      v24 = v47;
      v43 = 1;
    }
    v15[17] = v44;
    *((_DWORD *)v15 + 36) = v43;
    v15[13] = v45;
    if (v44)
      goto LABEL_94;
LABEL_80:
    aom_img_free(v15);
    return 0;
  }
LABEL_94:
  *(_DWORD *)v15 = a2;
  *((_DWORD *)v15 + 8) = v37;
  *((_DWORD *)v15 + 9) = v24;
  *((_DWORD *)v15 + 7) = v28;
  *((_DWORD *)v15 + 14) = v25;
  *((_DWORD *)v15 + 15) = v26;
  *((_DWORD *)v15 + 28) = v20;
  *((_DWORD *)v15 + 23) = v34 >> v25;
  *((_DWORD *)v15 + 24) = v34 >> v25;
  *((_DWORD *)v15 + 22) = v34;
  if (a2 == 263)
    *(_QWORD *)((char *)v15 + 92) = 2 * (v34 >> v25);
  aom_img_set_rect((int *)v15, a3, a4, a8);
  return v15;
}

int *aom_img_set_rect(int *result, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (result[7] >= a2)
  {
    v4 = result[8];
    if (v4 >= a3)
    {
      result[10] = a2;
      result[11] = a3;
      v5 = *result;
      v6 = *((_QWORD *)result + 17);
      if ((*result & 0x100) != 0)
      {
        v7 = result[22];
        *((_QWORD *)result + 8) = v6 + (a4 << ((*result & 0x800) != 0)) + v7 * a4;
        v8 = v6 + (v4 + 2 * a4) * v7;
        v9 = result[15];
        v10 = a4 >> result[14];
        v11 = a4 >> v9;
        if (v5 == 263)
        {
          *((_QWORD *)result + 9) = v8 + 2 * v10 + result[23] * v11;
          *((_QWORD *)result + 10) = 0;
        }
        else
        {
          v12 = v10 << ((v5 & 0x800) != 0);
          v13 = v8 + v12;
          v14 = 2 * v11 + (unint64_t)(v4 >> v9);
          if ((v5 & 0x200) != 0)
          {
            v17 = result[24];
            *((_QWORD *)result + 9) = v8 + v14 * v17 + v12 + result[23] * v11;
            *((_QWORD *)result + 10) = v13 + v17 * v11;
          }
          else
          {
            v15 = result[23];
            v16 = v8 + v14 * v15 + v12 + result[24] * v11;
            *((_QWORD *)result + 9) = v13 + v15 * v11;
            *((_QWORD *)result + 10) = v16;
          }
        }
      }
      else
      {
        *((_QWORD *)result + 8) = v6 + result[22] * a4 + ((result[28] * a4) >> 3);
      }
    }
  }
  return result;
}

void aom_img_free(_QWORD *a1)
{
  unint64_t *v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;

  if (a1)
  {
    v2 = (unint64_t *)a1[19];
    if (v2)
    {
      v3 = (void *)v2[1];
      if (v3)
      {
        v4 = *v2;
        if (*v2)
        {
          v5 = 0;
          do
          {
            v6 = *(_QWORD **)(v2[1] + 8 * v5);
            if (v6)
            {
              v7 = (void *)v6[1];
              if (v7)
                free(v7);
              free(v6);
              v4 = *v2;
            }
            ++v5;
          }
          while (v5 < v4);
          v3 = (void *)v2[1];
        }
        free(v3);
      }
      free(v2);
      a1[19] = 0;
    }
    v8 = a1[17];
    if (v8 && *((_DWORD *)a1 + 36))
      free(*(void **)(v8 - 8));
    if (*((_DWORD *)a1 + 37))
      free(a1);
  }
}

void aom_img_remove_metadata(uint64_t a1)
{
  unint64_t *v2;
  void *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  void *v7;

  if (a1)
  {
    v2 = *(unint64_t **)(a1 + 152);
    if (v2)
    {
      v3 = (void *)v2[1];
      if (v3)
      {
        v4 = *v2;
        if (*v2)
        {
          v5 = 0;
          do
          {
            v6 = *(_QWORD **)(v2[1] + 8 * v5);
            if (v6)
            {
              v7 = (void *)v6[1];
              if (v7)
                free(v7);
              free(v6);
              v4 = *v2;
            }
            ++v5;
          }
          while (v5 < v4);
          v3 = (void *)v2[1];
        }
        free(v3);
      }
      free(v2);
      *(_QWORD *)(a1 + 152) = 0;
    }
  }
}

uint64_t aom_uleb_encode(unint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;

  v4 = 0;
  v5 = a1;
  do
  {
    ++v4;
    v6 = v5 > 0x7F;
    v5 >>= 7;
  }
  while (v6);
  v7 = 0xFFFFFFFFLL;
  if (!HIDWORD(a1) && (unint64_t)(v4 - 1) <= 7 && a4 && a3 && v4 - 1 < a2)
  {
    v8 = 0;
    do
    {
      v9 = a1 > 0x7F;
      v10 = a1 & 0x7F;
      a1 >>= 7;
      *(_BYTE *)(a3 + v8++) = v10 | (v9 << 7);
    }
    while (v4 != v8);
    v7 = 0;
    *a4 = v4;
  }
  return v7;
}

uint64_t aom_memalign(uint64_t a1, unint64_t a2)
{
  void *v4;

  if (0x1FFFFFFF9 - a1 < a2)
    return 0;
  v4 = malloc_type_malloc(a1 + a2 + 7, 0x70F2D1FBuLL);
  if (!v4)
    return 0;
  *(_QWORD *)((((unint64_t)v4 + a1 + 7) & -a1) - 8) = v4;
  return ((unint64_t)v4 + a1 + 7) & -a1;
}

unint64_t aom_malloc(unint64_t a1)
{
  unint64_t result;
  unint64_t v2;

  if (a1 > 0x1FFFFFFE9)
    return 0;
  result = (unint64_t)malloc_type_malloc(a1 + 23, 0x70F2D1FBuLL);
  if (result)
  {
    v2 = result;
    result = (result + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(result - 8) = v2;
  }
  return result;
}

unint64_t aom_calloc(unint64_t a1, unint64_t a2)
{
  unint64_t v2;
  size_t v3;
  void *v4;

  if (a1 && 0x1FFFFFFE9 / a1 < a2)
    return 0;
  v3 = a2 * a1;
  if (a2 * a1 <= 0x1FFFFFFE9)
  {
    v4 = malloc_type_malloc(v3 + 23, 0x70F2D1FBuLL);
    if (v4)
    {
      v2 = ((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v2 - 8) = v4;
      if (v2)
      {
        bzero((void *)(((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0), v3);
        return v2;
      }
      return v2;
    }
  }
  return 0;
}

double init_0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

BOOL reset_0(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  unint64_t v5;
  pthread_mutex_t *v6;
  pthread_mutex_t *v7;
  size_t v9;
  pthread_attr_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_DWORD *)(a1 + 48) = 0;
  v1 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v1 != 1)
  {
    if (!(_DWORD)v1)
    {
      v3 = malloc_type_malloc(0x8FuLL, 0x70F2D1FBuLL);
      if (!v3)
        goto LABEL_10;
      v4 = v3;
      v5 = ((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0;
      *(_QWORD *)(v5 - 8) = v4;
      if (!v5)
        goto LABEL_10;
      *(_QWORD *)(v5 + 112) = 0;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)v5 = 0u;
      *(_QWORD *)a1 = v5;
      if (!pthread_mutex_init((pthread_mutex_t *)v5, 0))
      {
        if (!pthread_cond_init((pthread_cond_t *)(*(_QWORD *)a1 + 64), 0))
        {
          memset(&v10, 0, sizeof(v10));
          if (!pthread_attr_init(&v10))
          {
            v9 = 0;
            if (pthread_attr_getstacksize(&v10, &v9) || v9 >> 18 || !pthread_attr_setstacksize(&v10, 0x40000uLL))
            {
              pthread_mutex_lock(*(pthread_mutex_t **)a1);
              if (!pthread_create((pthread_t *)(*(_QWORD *)a1 + 112), &v10, (void *(__cdecl *)(void *))thread_loop_0, (void *)a1))
              {
                v1 = 1;
                *(_DWORD *)(a1 + 8) = 1;
                pthread_mutex_unlock(*(pthread_mutex_t **)a1);
                pthread_attr_destroy(&v10);
                return v1;
              }
              pthread_mutex_unlock(*(pthread_mutex_t **)a1);
            }
            pthread_attr_destroy(&v10);
          }
          pthread_mutex_destroy(*(pthread_mutex_t **)a1);
          pthread_cond_destroy((pthread_cond_t *)(*(_QWORD *)a1 + 64));
          v6 = *(pthread_mutex_t **)a1;
          if (!*(_QWORD *)a1)
            goto LABEL_10;
          goto LABEL_9;
        }
        pthread_mutex_destroy(*(pthread_mutex_t **)a1);
      }
      v6 = *(pthread_mutex_t **)a1;
      if (!*(_QWORD *)a1)
      {
LABEL_10:
        v1 = 0;
        *(_QWORD *)a1 = 0;
        return v1;
      }
LABEL_9:
      free(*(void **)&v6[-1].__opaque[48]);
      goto LABEL_10;
    }
    v7 = *(pthread_mutex_t **)a1;
    if (*(_QWORD *)a1)
    {
      pthread_mutex_lock(v7);
      if (*(_DWORD *)(a1 + 8) >= 2u)
      {
        do
          pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)a1 + 64), *(pthread_mutex_t **)a1);
        while (*(_DWORD *)(a1 + 8) != 1);
      }
      pthread_mutex_unlock(*(pthread_mutex_t **)a1);
      return *(_DWORD *)(a1 + 48) == 0;
    }
    else
    {
      return 1;
    }
  }
  return v1;
}

void sync_0(void)
{
  pthread_mutex_t **v0;
  pthread_mutex_t **v1;
  pthread_mutex_t *v2;

  v1 = v0;
  v2 = *v0;
  if (v2)
  {
    pthread_mutex_lock(v2);
    if (*((_DWORD *)v1 + 2) >= 2u)
    {
      do
        pthread_cond_wait((pthread_cond_t *)&(*v1)[1], *v1);
      while (*((_DWORD *)v1 + 2) != 1);
    }
    pthread_mutex_unlock(*v1);
  }
}

pthread_mutex_t *launch_0(_DWORD *a1)
{
  pthread_mutex_t *result;
  int v3;

  result = *(pthread_mutex_t **)a1;
  if (result)
  {
    pthread_mutex_lock(result);
    v3 = a1[2];
    if (v3)
    {
      if (v3 != 1)
      {
        do
          pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)a1 + 64), *(pthread_mutex_t **)a1);
        while (a1[2] != 1);
      }
      a1[2] = 2;
      pthread_cond_signal((pthread_cond_t *)(*(_QWORD *)a1 + 64));
    }
    return (pthread_mutex_t *)pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  }
  return result;
}

_QWORD *execute_0(_QWORD *result)
{
  uint64_t (*v1)(_QWORD, _QWORD);
  _QWORD *v2;

  v1 = (uint64_t (*)(_QWORD, _QWORD))result[3];
  if (v1)
  {
    v2 = result;
    result = (_QWORD *)v1(result[4], result[5]);
    *((_DWORD *)v2 + 12) |= (_DWORD)result == 0;
  }
  return result;
}

std::__fs::filesystem::recursive_directory_iterator *__cdecl end_0(std::__fs::filesystem::recursive_directory_iterator *__return_ptr retstr, std::__fs::filesystem::recursive_directory_iterator *a2)
{
  std::__fs::filesystem::recursive_directory_iterator *result;
  int cntrl;

  result = (std::__fs::filesystem::recursive_directory_iterator *)a2->__imp_.__ptr_;
  if (result)
  {
    pthread_mutex_lock((pthread_mutex_t *)result);
    cntrl = (int)a2->__imp_.__cntrl_;
    if (cntrl)
    {
      while (cntrl != 1)
      {
        pthread_cond_wait((pthread_cond_t *)((char *)a2->__imp_.__ptr_ + 64), (pthread_mutex_t *)a2->__imp_.__ptr_);
        cntrl = (int)a2->__imp_.__cntrl_;
      }
      LODWORD(a2->__imp_.__cntrl_) = 0;
      pthread_cond_signal((pthread_cond_t *)((char *)a2->__imp_.__ptr_ + 64));
    }
    pthread_mutex_unlock((pthread_mutex_t *)a2->__imp_.__ptr_);
    pthread_join(*((pthread_t *)a2->__imp_.__ptr_ + 14), 0);
    pthread_mutex_destroy((pthread_mutex_t *)a2->__imp_.__ptr_);
    result = (std::__fs::filesystem::recursive_directory_iterator *)pthread_cond_destroy((pthread_cond_t *)((char *)a2->__imp_.__ptr_ + 64));
    if (a2->__imp_.__ptr_)
      free(*((void **)a2->__imp_.__ptr_ - 1));
    a2->__imp_.__ptr_ = 0;
  }
  return result;
}

uint64_t thread_loop_0(uint64_t a1)
{
  const char *v2;
  int i;
  unsigned int (*v4)(_QWORD, _QWORD);
  char __dst[64];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v2 = *(const char **)(a1 + 16);
  if (v2)
  {
    strncpy(__dst, v2, 0x3FuLL);
    __dst[63] = 0;
    pthread_setname_np(__dst);
  }
  pthread_mutex_lock(*(pthread_mutex_t **)a1);
  for (i = *(_DWORD *)(a1 + 8); i == 2; i = *(_DWORD *)(a1 + 8))
  {
LABEL_8:
    pthread_mutex_unlock(*(pthread_mutex_t **)a1);
    v4 = *(unsigned int (**)(_QWORD, _QWORD))(a1 + 24);
    if (v4)
      *(_DWORD *)(a1 + 48) |= v4(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)) == 0;
    pthread_mutex_lock(*(pthread_mutex_t **)a1);
    *(_DWORD *)(a1 + 8) = 1;
    pthread_cond_signal((pthread_cond_t *)(*(_QWORD *)a1 + 64));
  }
  while (i == 1)
  {
    pthread_cond_wait((pthread_cond_t *)(*(_QWORD *)a1 + 64), *(pthread_mutex_t **)a1);
    i = *(_DWORD *)(a1 + 8);
    if (i == 2)
      goto LABEL_8;
  }
  pthread_mutex_unlock(*(pthread_mutex_t **)a1);
  return 0;
}

uint64_t av1_caq_select_segment(uint64_t result, uint64_t a2, unsigned int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  _WORD *v22;
  __int16 v23;
  unsigned int v24;
  double v25;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  double v32;
  int v33;
  double v34;
  double v35;
  double v36;
  int v37;
  double v38;
  char *v40;
  uint64_t v41;
  int v44;
  int v45;

  v6 = a6;
  v7 = a4;
  v8 = a3;
  v9 = a2;
  v10 = result;
  v11 = result + 239040;
  if ((*(_BYTE *)(result + 239040) & 0xFD) != 0
    && !*(_BYTE *)(result + 239542)
    && !*(_BYTE *)(result + 267114)
    && (!*(_BYTE *)(result + 267112) || *(_DWORD *)(result + 388400)))
  {
    return result;
  }
  v12 = *(_DWORD *)(result + 388360);
  if (v12 < 256)
    return result;
  v13 = result + 265592;
  v14 = *(_QWORD *)(result + 263720);
  if (*(_BYTE *)(v14 + 77))
    v15 = 1;
  else
    v15 = 3;
  v45 = *(_DWORD *)(result + 239576);
  if (v45 - a5 >= mi_size_wide_1[a3])
    v16 = mi_size_wide_1[a3];
  else
    v16 = v45 - a5;
  v17 = *(_DWORD *)(result + 239572) - a4;
  if (v17 >= mi_size_high_0[a3])
    v18 = mi_size_high_0[a3];
  else
    v18 = v17;
  v44 = v16;
  v19 = ((uint64_t)(v16 * v12 * (int)v18) << 9) / (*(_DWORD *)(v14 + 32) * *(_DWORD *)(v14 + 32));
  v20 = *(_DWORD *)(result + 239656);
  v21 = *(_DWORD *)(v14 + 72);
  if (v20 >= 255)
    v20 = 255;
  switch(v21)
  {
    case 8:
      v22 = ac_qlookup_QTX;
      break;
    case 12:
      v22 = ac_qlookup_12_QTX;
      break;
    case 10:
      v22 = ac_qlookup_10_QTX;
      break;
    default:
      v23 = -1;
      goto LABEL_24;
  }
  v23 = v22[v20 & ~(v20 >> 31)];
LABEL_24:
  if (v23 <= 103)
    v24 = v23 > 43;
  else
    v24 = (v23 > 43) + 1;
  v25 = 10.0;
  if (*(_DWORD *)v13 >= 2u)
  {
    v28 = a5;
    v29 = v15;
    v30 = v19;
    v19 = result + 239040;
    v31 = result + 265592;
    v32 = exp(*(long double *)(result + 638016));
    v13 = v31;
    v11 = v19;
    LODWORD(v19) = v30;
    v15 = v29;
    a5 = v28;
    v7 = a4;
    v6 = a6;
    v9 = a2;
    v8 = a3;
    if (v32 > 8.0)
      v25 = v32;
    else
      v25 = 8.0;
  }
  v33 = a5;
  av1_setup_src_planes(v9, *(_QWORD *)(v13 + 80), v7, a5, v15, v8);
  result = av1_log_block_var(v10, v9, v8);
  v34 = (double)(int)result;
  v35 = (double)v6;
  v36 = (double)(int)v19;
  if (aq_c_transitions[5 * v24] * (double)(int)v19 <= (double)v6 || v25 + aq_c_var_thresholds[5 * v24] <= v34)
  {
    if (aq_c_transitions[5 * v24 + 1] * v36 <= v35 || v25 + aq_c_var_thresholds[5 * v24 + 1] <= v34)
    {
      if (aq_c_transitions[5 * v24 + 2] * v36 <= v35 || v25 + aq_c_var_thresholds[5 * v24 + 2] <= v34)
      {
        v38 = v36 + v36;
        if (v25 + 100.0 <= v34 || v38 <= v35)
          v37 = 4;
        else
          v37 = 3;
      }
      else
      {
        v37 = 2;
      }
    }
    else
    {
      v37 = 1;
    }
  }
  else
  {
    v37 = 0;
  }
  if ((int)v18 >= 1)
  {
    v40 = (char *)(*(_QWORD *)(v10 + 456656) + v33 + v45 * v7);
    v41 = *(int *)(v11 + 536);
    do
    {
      result = (uint64_t)memset(v40, v37, v44);
      v40 += v41;
      --v18;
    }
    while (v18);
  }
  return result;
}

unint64_t av1_cyclic_refresh_alloc(int a1, int a2)
{
  void *v4;
  unint64_t v5;
  int v6;
  size_t v7;
  void *v8;
  unint64_t v9;

  v4 = malloc_type_malloc(0x8FuLL, 0x70F2D1FBuLL);
  if (v4)
  {
    v5 = ((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v5 - 8) = v4;
    if (!v5)
      return v5;
    *(_QWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x70) = 0;
    *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x50) = 0u;
    *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x60) = 0u;
    *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x30) = 0u;
    *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x40) = 0u;
    *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0u;
    *(_OWORD *)((((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x20) = 0u;
    v6 = a2 * a1;
    *(_OWORD *)v5 = 0u;
    if (((a2 * a1) & 0x80000000) == 0)
    {
      v7 = v6;
      v8 = malloc_type_malloc(v6 + 23, 0x70F2D1FBuLL);
      if (v8)
      {
        v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0;
        *(_QWORD *)(v9 - 8) = v8;
        if (v9)
        {
          bzero((void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF0), v7);
          *(_QWORD *)(v5 + 40) = v9;
          *(_DWORD *)(v5 + 112) = 0;
          *(_DWORD *)(v5 + 4) = 5;
          *(_QWORD *)(v5 + 80) = 0x3FD0000000000000;
          return v5;
        }
      }
    }
    *(_QWORD *)(v5 + 40) = 0;
    *(_DWORD *)(v5 + 112) = 0;
    *(_DWORD *)(v5 + 4) = 5;
    *(_QWORD *)(v5 + 80) = 0x3FD0000000000000;
    free(*(void **)(v5 - 8));
  }
  return 0;
}

uint64_t av1_cyclic_refresh_estimate_bits_at_q(uint64_t a1, double a2, double a3, double a4, double a5, int16x4_t a6, int16x4_t a7, int16x4_t a8)
{
  int *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  int v14;
  double v15;
  uint64_t v16;
  int v17;
  double v18;
  unint64_t *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  double v24;
  _WORD *v25;
  uint64_t v26;
  double v27;
  int v28;
  BOOL v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  double v37;
  int v38;
  double v39;
  _WORD *v40;
  uint64_t v41;
  double v42;
  int v43;
  int v44;
  double v45;
  int v46;
  int v47;
  double v48;
  _WORD *v49;
  uint64_t v50;
  double v51;
  int v52;
  unint64_t v53;
  double v54;
  int v55;
  int v56;
  double v57;
  int v58;
  double v59;
  int v60;
  double v61;
  int v62;

  v8 = (int *)(a1 + 636980);
  v9 = a1 + 388560;
  v10 = (_DWORD *)(a1 + 264700);
  v11 = a1 + 239656;
  v12 = *(_DWORD **)(a1 + 456672);
  v14 = *(_DWORD *)(a1 + 239568);
  v15 = (double)(16 * v14);
  if (*(_DWORD *)(a1 + 388560))
  {
    v16 = 1374389535 * *(_DWORD *)(a1 + 239572) * *v12 * *(_DWORD *)(a1 + 239576);
    v17 = (v16 >> 37) + ((unint64_t)v16 >> 63);
    v18 = 0.0;
  }
  else
  {
    v17 = v12[7];
    v18 = (double)(int)v12[8] / v15;
  }
  v19 = (unint64_t *)(a1 + 638064);
  v20 = *(_DWORD *)v11;
  v13 = (_BYTE *)(a1 + 239040);
  v21 = *(unsigned __int8 *)(a1 + 239040);
  v22 = *v8;
  v23 = *(_DWORD *)(*(_QWORD *)(v11 + 24064) + 72);
  if (v23 == 8)
  {
    v25 = &ac_qlookup_QTX;
    v27 = 0.25;
  }
  else
  {
    if (v23 == 12)
    {
      v25 = &ac_qlookup_12_QTX;
      v26 = 0x3F90000000000000;
    }
    else
    {
      v24 = -1.0;
      if (v23 != 10)
        goto LABEL_15;
      v25 = &ac_qlookup_10_QTX;
      v26 = 0x3FB0000000000000;
    }
    v27 = *(double *)&v26;
  }
  if (v20 >= 255)
    v28 = 255;
  else
    v28 = v20;
  a6.i16[0] = v25[v28 & ~(v28 >> 31)];
  v24 = v27 * (double)vmovl_s16(a6).i32[0];
LABEL_15:
  v29 = v21 == 0;
  if (*v13)
    v30 = 750000;
  else
    v30 = 1000000;
  if (v29)
    v31 = 2000000;
  else
    v31 = 1500000;
  v32 = !v29;
  if (v22)
    v33 = v30;
  else
    v33 = v31;
  if (*v10 == 1)
    v34 = v32;
  else
    v34 = 0;
  if (*(_DWORD *)(v9 + 116))
    v35 = v34;
  else
    v35 = 0;
  v36 = v33;
  if (v35 == 1)
  {
    v36 = v33;
    if (*v19 != -1)
    {
      v37 = (double)((int)sqrt((double)*v19) << 9) / (double)v14;
      v38 = *(_DWORD *)(v9 + 52);
      if (!v38)
        v38 = (int)(300000.0 / v37);
      *(double *)&a7 = (double)v38;
      v36 = (int)(v37 * (double)v38);
      if (v36 <= 20000)
        v36 = 20000;
      if (v36 >= 170000)
        v36 = 170000;
    }
  }
  if (v23 == 8)
  {
    v40 = &ac_qlookup_QTX;
    v42 = 0.25;
  }
  else
  {
    if (v23 == 12)
    {
      v40 = &ac_qlookup_12_QTX;
      v41 = 0x3F90000000000000;
    }
    else
    {
      v39 = -1.0;
      if (v23 != 10)
        goto LABEL_51;
      v40 = &ac_qlookup_10_QTX;
      v41 = 0x3FB0000000000000;
    }
    v42 = *(double *)&v41;
  }
  v43 = v12[24] + v20;
  if (v43 >= 255)
    v43 = 255;
  a7.i16[0] = v40[v43 & ~(v43 >> 31)];
  v39 = v42 * (double)vmovl_s16(a7).i32[0];
LABEL_51:
  v44 = v33;
  if (v35)
  {
    v44 = v33;
    if (*v19 != -1)
    {
      v45 = (double)((int)sqrt((double)*v19) << 9) / (double)v14;
      v46 = *(_DWORD *)(v9 + 52);
      if (!v46)
        v46 = (int)(300000.0 / v45);
      *(double *)&a8 = (double)v46;
      v44 = (int)(v45 * (double)v46);
      if (v44 <= 20000)
        v44 = 20000;
      if (v44 >= 170000)
        v44 = 170000;
    }
  }
  v47 = v12[25];
  if (v23 == 8)
  {
    v49 = &ac_qlookup_QTX;
    v51 = 0.25;
  }
  else
  {
    if (v23 == 12)
    {
      v49 = &ac_qlookup_12_QTX;
      v50 = 0x3F90000000000000;
    }
    else
    {
      v48 = -1.0;
      if (v23 != 10)
        goto LABEL_69;
      v49 = &ac_qlookup_10_QTX;
      v50 = 0x3FB0000000000000;
    }
    v51 = *(double *)&v50;
  }
  v52 = v47 + v20;
  if (v52 >= 255)
    v52 = 255;
  a8.i16[0] = v49[v52 & ~(v52 >> 31)];
  v48 = v51 * (double)vmovl_s16(a8).i32[0];
LABEL_69:
  if (v35)
  {
    v53 = *v19;
    if (v53 != -1)
    {
      v54 = (double)((int)sqrt((double)v53) << 9) / (double)v14;
      v55 = *(_DWORD *)(v9 + 52);
      if (!v55)
        v55 = (int)(300000.0 / v54);
      v56 = (int)(v54 * (double)v55);
      if (v56 <= 20000)
        v56 = 20000;
      if (v56 >= 170000)
        v33 = 170000;
      else
        v33 = v56;
    }
  }
  v57 = (double)v17 / v15;
  v58 = (v14 * (int)((double)v36 * a2 / v24)) >> 9;
  if (v58 <= 200)
    v58 = 200;
  v59 = (double)v58;
  v60 = (v14 * (int)((double)v44 * a2 / v39)) >> 9;
  if (v60 <= 200)
    v60 = 200;
  v61 = v57 * (double)v60 + (1.0 - v57 - v18) * v59;
  v62 = (v14 * (int)((double)v33 * a2 / v48)) >> 9;
  if (v62 <= 200)
    v62 = 200;
  return (int)(v61 + v18 * (double)v62);
}

uint64_t av1_cyclic_refresh_rc_bits_per_mb(uint64_t a1, int a2, double a3, double a4, double a5, int16x4_t a6, int16x4_t a7)
{
  int *v7;
  int *v8;
  unsigned __int8 *v9;
  int16x4_t *v10;
  __int32 v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  _WORD *v17;
  uint64_t v18;
  double v19;
  int v20;
  int v21;
  int v22;
  int v23;
  double v24;
  int v25;
  int v26;
  int v27;
  double v28;
  _WORD *v29;
  int v30;
  double v31;
  int v32;
  int *v33;
  int v34;
  int v35;
  unint64_t *v36;
  int v37;
  double v38;
  _WORD *v39;
  uint64_t v40;
  double v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  BOOL v46;
  int v47;
  double v48;
  int v49;
  double v50;
  _WORD *v51;
  uint64_t v52;
  double v53;
  int v54;
  double v55;
  int v56;
  int v57;
  double v58;

  v7 = (int *)(a1 + 636980);
  v8 = (int *)(a1 + 388488);
  v9 = (unsigned __int8 *)(a1 + 239040);
  v10 = *(int16x4_t **)(a1 + 456672);
  v11 = v10[3].i32[0];
  if (!*(_DWORD *)(a1 + 388560))
  {
    v13 = v10[3].i32[1] + v11 + v10[4].i32[0];
    v14 = *v9;
    v15 = *v7;
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 263720) + 72);
    if (v16 != 8)
      goto LABEL_3;
LABEL_7:
    v17 = &ac_qlookup_QTX;
    v19 = 0.25;
    goto LABEL_10;
  }
  v12 = 1374389535 * *(_DWORD *)(a1 + 239572) * v10->i32[0] * *(_DWORD *)(a1 + 239576);
  v13 = (v12 >> 37) + ((unint64_t)v12 >> 63) + v11;
  v14 = *v9;
  v15 = *v7;
  v16 = *(_DWORD *)(*(_QWORD *)(a1 + 263720) + 72);
  if (v16 == 8)
    goto LABEL_7;
LABEL_3:
  if (v16 == 12)
  {
    v17 = &ac_qlookup_12_QTX;
    v18 = 0x3F90000000000000;
  }
  else
  {
    a5 = -1.0;
    if (v16 != 10)
      goto LABEL_14;
    v17 = &ac_qlookup_10_QTX;
    v18 = 0x3FB0000000000000;
  }
  v19 = *(double *)&v18;
LABEL_10:
  if (a2 >= 255)
    v20 = 255;
  else
    v20 = a2;
  LOWORD(a5) = v17[v20 & ~(v20 >> 31)];
  a5 = v19 * (double)vmovl_s16(*(int16x4_t *)&a5).i32[0];
LABEL_14:
  if (v14)
    v21 = 750000;
  else
    v21 = 1000000;
  if (v14)
    v22 = 1500000;
  else
    v22 = 2000000;
  if (v15)
    v23 = v21;
  else
    v23 = v22;
  v24 = (double)v23;
  v26 = *v8;
  v25 = *(_DWORD *)(a1 + 388492);
  if (v25 < *v8)
  {
    a6 = v10[9];
    v27 = (int)(*(double *)&a6 * (double)(int)(v24 / a5));
    while (1)
    {
      v32 = (v26 + v25) >> 1;
      if (v16 == 8)
      {
        v28 = 0.25;
        v29 = &ac_qlookup_QTX;
        goto LABEL_26;
      }
      if (v16 == 12)
        break;
      v31 = -1.0;
      if (v16 == 10)
      {
        v28 = 0.0625;
        v29 = &ac_qlookup_10_QTX;
        goto LABEL_26;
      }
LABEL_30:
      if ((int)(v24 / v31) > v27)
        v25 = v32 + 1;
      else
        v26 = (v26 + v25) >> 1;
      if (v25 >= v26)
        goto LABEL_39;
    }
    v28 = 0.015625;
    v29 = &ac_qlookup_12_QTX;
LABEL_26:
    if (v32 >= 255)
      v30 = 255;
    else
      v30 = (v26 + v25) >> 1;
    a6.i16[0] = v29[v30 & ~(v30 >> 31)];
    *(double *)&a6 = (double)vmovl_s16(a6).i32[0];
    v31 = v28 * *(double *)&a6;
    goto LABEL_30;
  }
LABEL_39:
  v33 = (int *)(a1 + 264700);
  v34 = v25 - a2;
  v35 = v10[1].i32[0] * a2;
  if (v35 / 100 < -v34)
    v34 = -v35 / 100;
  v36 = (unint64_t *)(a1 + 638064);
  v37 = *(_DWORD *)(a1 + 388676);
  if (v16 == 8)
  {
    v39 = &ac_qlookup_QTX;
    v41 = 0.25;
  }
  else
  {
    if (v16 == 12)
    {
      v39 = &ac_qlookup_12_QTX;
      v40 = 0x3F90000000000000;
    }
    else
    {
      v38 = -1.0;
      if (v16 != 10)
        goto LABEL_52;
      v39 = &ac_qlookup_10_QTX;
      v40 = 0x3FB0000000000000;
    }
    v41 = *(double *)&v40;
  }
  if (a2 >= 255)
    v42 = 255;
  else
    v42 = a2;
  a6.i16[0] = v39[v42 & ~(v42 >> 31)];
  v38 = v41 * (double)vmovl_s16(a6).i32[0];
LABEL_52:
  v43 = *((_DWORD *)v9 + 132);
  v44 = *v33;
  if (v14)
    v45 = v44 == 1;
  else
    v45 = 0;
  v46 = !v45 || v37 == 0;
  v47 = !v46;
  if (!v46 && *v36 != -1)
  {
    v48 = (double)((int)sqrt((double)*v36) << 9) / (double)v43;
    v49 = v8[31];
    if (!v49)
      v49 = (int)(300000.0 / v48);
    *(double *)&a7 = (double)v49;
    v23 = (int)(v48 * (double)v49);
    if (v23 <= 20000)
      v23 = 20000;
    if (v23 >= 170000)
      v23 = 170000;
  }
  if (v16 == 8)
  {
    v51 = &ac_qlookup_QTX;
    v53 = 0.25;
  }
  else
  {
    if (v16 == 12)
    {
      v51 = &ac_qlookup_12_QTX;
      v52 = 0x3F90000000000000;
    }
    else
    {
      v50 = -1.0;
      if (v16 != 10)
        goto LABEL_79;
      v51 = &ac_qlookup_10_QTX;
      v52 = 0x3FB0000000000000;
    }
    v53 = *(double *)&v52;
  }
  v54 = v34 + a2;
  if (v54 >= 255)
    v54 = 255;
  a7.i16[0] = v51[v54 & ~(v54 >> 31)];
  v50 = v53 * (double)vmovl_s16(a7).i32[0];
LABEL_79:
  if (v47 && *v36 != -1)
  {
    v55 = (double)((int)sqrt((double)*v36) << 9) / (double)v43;
    v56 = v8[31];
    if (!v56)
      v56 = (int)(300000.0 / v55);
    v57 = (int)(v55 * (double)v56);
    if (v57 <= 20000)
      v57 = 20000;
    if (v57 >= 170000)
      v57 = 170000;
    v24 = (double)v57;
  }
  v58 = (double)(v13 >> 1) / (double)(16 * v43);
  return (int)(v58 * (double)(int)(v24 * a3 / v50) + (1.0 - v58) * (double)(int)((double)v23 * a3 / v38));
}

uint64_t av1_cyclic_reset_segment_skip(uint64_t result, uint64_t a2, int a3, int a4, int a5, int a6)
{
  _QWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  char v23;
  char v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;

  v7 = (_QWORD *)(result + 456656);
  v8 = (_DWORD *)(result + 239272);
  v9 = **(_QWORD **)(a2 + 8280);
  v10 = *(_WORD *)(v9 + 167);
  v31 = v10 & 7;
  v11 = *(_QWORD *)(result + 456672);
  v12 = *(_DWORD *)(result + 239576);
  if (v12 - a4 >= mi_size_wide_2[a5])
    v13 = mi_size_wide_2[a5];
  else
    v13 = v12 - a4;
  v29 = v13;
  v14 = *(_DWORD *)(result + 239572);
  if (v14 - a3 >= mi_size_high_1[a5])
    v15 = mi_size_high_1[a5];
  else
    v15 = (v14 - a3);
  v30 = v15;
  if (!*(_DWORD *)(v11 + 108))
  {
    v16 = *(_DWORD *)(a2 + 416);
    v17 = *(_DWORD *)(a2 + 420);
    v18 = *(_QWORD *)(*(_QWORD *)v8 + 80);
    if (*(_BYTE *)(a2 + 8288))
    {
      if (*(_BYTE *)(a2 + 8289))
      {
        v19 = 8;
        if (v14 >= v16 && v12 >= v17)
        {
          v19 = *(unsigned __int8 *)(v18 + v17 + (v16 - 1) * v12 - 1);
          if (v19 >= 8)
            v19 = 8;
        }
      }
      else
      {
        v19 = 255;
      }
      v20 = 8;
      if (v14 >= v16 && v12 > v17)
      {
        v20 = *(unsigned __int8 *)(v18 + v17 + (v16 - 1) * v12);
        result = 8;
        if (v20 >= 8)
          v20 = 8;
      }
    }
    else
    {
      v19 = 255;
      v20 = 255;
    }
    if (*(_BYTE *)(a2 + 8289))
    {
      v21 = 8;
      if (v14 > v16 && v12 >= v17)
      {
        v22 = *(unsigned __int8 *)(v18 + v17 + v16 * v12 - 1);
        if (v22 >= 8)
          v21 = 8;
        else
          v21 = v22;
      }
    }
    else
    {
      v21 = 255;
    }
    if (v19 == v20)
      v23 = v20;
    else
      v23 = v21;
    if (v21 == 255)
    {
      v23 = v20;
      v24 = 0;
    }
    else
    {
      v24 = v21;
    }
    if (v20 == 255)
      v23 = v24;
    v25 = v23 & 7;
    *(_WORD *)(v9 + 167) = v10 & 0xFFF8 | v23 & 7;
    if (v31 != v25 && (int)v30 >= 1)
    {
      v26 = v8[76];
      v27 = v30;
      v28 = a4 + v26 * a3;
      do
      {
        bzero((void *)(*(_QWORD *)(v11 + 40) + v28), v29);
        memset((void *)(*v7 + v28), v25, v29);
        result = (uint64_t)memset((void *)(*(_QWORD *)(*(_QWORD *)v8 + 80) + v28), v25, v29);
        v28 += v26;
        --v27;
      }
      while (v27);
    }
  }
  if (!a6)
  {
    if (v31 == 2)
    {
      *(_DWORD *)(a2 + 86584) -= v30 * v29;
    }
    else if (v31 == 1)
    {
      *(_DWORD *)(a2 + 86580) -= v30 * v29;
    }
  }
  return result;
}

_QWORD *av1_cyclic_refresh_update_segment(_QWORD *result, uint64_t a2, int a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  char v18;
  __int16 v19;
  int v20;
  int v21;
  int v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  __int16 v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  int v36;
  _QWORD *v37;

  v9 = (char *)(result + 29909);
  v10 = **(_QWORD **)(a2 + 8280);
  v11 = result[57084];
  v12 = *((_DWORD *)result + 59894);
  if (v12 - a4 >= mi_size_wide_2[a5])
    v13 = mi_size_wide_2[a5];
  else
    v13 = v12 - a4;
  v35 = v13;
  v14 = *((_DWORD *)result + 59893) - a3;
  if (v14 >= mi_size_high_1[a5])
    v15 = mi_size_high_1[a5];
  else
    v15 = v14;
  v16 = a4 + v12 * a3;
  v17 = *(char *)(v10 + 17);
  if (*((_DWORD *)result + 159362))
  {
    if (v17 >= 1)
    {
      if (*((int *)result + 159363) > 1)
        goto LABEL_26;
LABEL_12:
      v18 = 0;
      v19 = 2;
      goto LABEL_33;
    }
  }
  else if (v17 > 0)
  {
    goto LABEL_12;
  }
  if (*(_QWORD *)(v11 + 56) < a7)
  {
    v20 = *(__int16 *)(v10 + 8);
    v21 = *(__int16 *)(v11 + 64);
    if (v20 > v21
      || ((v22 = *(__int16 *)(v10 + 10), v20 >= -v21) ? (v23 = v22 <= v21) : (v23 = 0),
          v23 ? (v24 = v22 < -v21) : (v24 = 1),
          v24 || (*(_WORD *)(v10 + 167) & 0x80) == 0 && *(char *)(v10 + 16) < 1))
    {
      v19 = 0;
      v18 = 1;
      goto LABEL_33;
    }
  }
LABEL_26:
  if (a5 >= 6
    && *(_QWORD *)(v11 + 48) > a6
    && ((*(_WORD *)(v10 + 167) & 0x80) != 0 || *(char *)(v10 + 16) >= 1)
    && !*(_DWORD *)(v10 + 8)
    && *(int *)(v11 + 88) > 10)
  {
    goto LABEL_12;
  }
  v18 = 0;
  v19 = 1;
LABEL_33:
  if (*(_DWORD *)(v11 + 108))
    v25 = 2;
  else
    v25 = 1;
  v26 = v16;
  v27 = *(unsigned __int8 *)(*(_QWORD *)(v11 + 40) + v16);
  v28 = *(_WORD *)(v10 + 167);
  if ((v28 & 7u) - 3 >= 0xFFFFFFFE)
  {
    v29 = v28 & 0xFFF8;
    if (a8)
      v19 = 0;
    v28 = v29 | v19;
    *(_WORD *)(v10 + 167) = v28;
  }
  v30 = v28 & 7;
  if ((v30 - 3) >= 0xFFFFFFFE)
  {
    v31 = -*(unsigned __int8 *)(v11 + 20);
    v36 = a9;
    v37 = result + 57082;
    if ((int)v15 < 1)
      goto LABEL_52;
  }
  else if ((v18 & 1) != 0)
  {
    v31 = 1;
    v36 = a9;
    v37 = result + 57082;
    if ((int)v15 < 1)
      goto LABEL_52;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(v11 + 40) + v26) == 1)
      v31 = 0;
    else
      v31 = v27;
    v36 = a9;
    v37 = result + 57082;
    if ((int)v15 < 1)
      goto LABEL_52;
  }
  v32 = 0;
  v33 = v25 * *((int *)result + 59894);
  do
  {
    memset((void *)(*(_QWORD *)(v11 + 40) + v26), v31, v35);
    memset((void *)(*v37 + v26), v30, v35);
    result = memset((void *)(*(_QWORD *)(*(_QWORD *)v9 + 80) + v26), v30, v35);
    v32 += v25;
    v26 += v33;
  }
  while (v32 < v15);
LABEL_52:
  if (!v36)
  {
    if (v30 == 2)
    {
      *(_DWORD *)(a2 + 86584) += v15 * v35;
    }
    else if (v30 == 1)
    {
      *(_DWORD *)(a2 + 86580) += v15 * v35;
    }
  }
  return result;
}

uint64_t av1_cyclic_refresh_update_parameters(uint64_t result)
{
  _BYTE *v1;
  int *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  BOOL v7;
  char v8;
  int v9;
  int v10;
  int v11;
  _DWORD *v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _BOOL4 v21;
  int v22;
  double v23;
  double v24;
  double v25;
  __int16 v26;
  unint64_t v27;

  v1 = (_BYTE *)(*(_QWORD *)result + 85017);
  v2 = (int *)(*(_QWORD *)result + 44216);
  v3 = *(_QWORD *)(result + 456672);
  v4 = *(_DWORD *)(result + 388492);
  if (v4 >= 12)
    v5 = v4 + 4;
  else
    v5 = 16;
  v6 = *(_DWORD *)(result + 265404);
  if (*(_DWORD *)(*(_QWORD *)result + 50960))
    v7 = 0;
  else
    v7 = v6 == 1;
  v8 = v7;
  v9 = *(_DWORD *)(result + 388392);
  if (v7 && v9 >= *(_DWORD *)(v3 + 112))
    v9 = *(_DWORD *)(v3 + 112);
  v10 = *(_DWORD *)(result + 388408);
  v11 = *(_BYTE *)(result + 239040) & 0xFD;
  if ((*(_BYTE *)(result + 239040) & 0xFD) == 0 || v10 || *v1)
  {
    *(_DWORD *)(v3 + 104) = 1;
    v12 = (_DWORD *)(v3 + 104);
    *(_DWORD *)(v3 + 4) = 5;
    *(_QWORD *)(v3 + 80) = 0x3FD0000000000000;
    *(_DWORD *)(v3 + 108) = *(_DWORD *)(result + 265552) > 9;
    if (!v11)
      goto LABEL_68;
    if (*(_DWORD *)(result + 264692))
      goto LABEL_22;
LABEL_21:
    if (*(_DWORD *)(result + 264688))
      goto LABEL_22;
LABEL_68:
    *v12 = 0;
    return result;
  }
  v13 = *(_DWORD *)(result + 265552) > 9;
  *(_DWORD *)(v3 + 104) = 1;
  *(_DWORD *)(v3 + 108) = v13;
  v12 = (_DWORD *)(v3 + 104);
  if (!*(_DWORD *)(result + 264692))
    goto LABEL_21;
LABEL_22:
  if (v10)
    goto LABEL_68;
  v14 = *(_DWORD *)(result + 637036);
  if (v14 > 0)
    goto LABEL_68;
  v15 = *(_DWORD *)(result + 637048);
  if (v15 != *(_DWORD *)(result + 637040))
    goto LABEL_68;
  v16 = *v2;
  if (v16 < v5 || v15 >= 2 && *(_DWORD *)(*(_QWORD *)(result + 637360) + 13144 * v14 + 13136))
    goto LABEL_68;
  if (v9 >= 21 && v16 > 235)
    goto LABEL_68;
  v17 = *(_DWORD *)(result + 388516);
  if (v17)
  {
    if (v17 <= 29 && v9 > 40)
      goto LABEL_68;
  }
  if (*v1)
    goto LABEL_68;
  v18 = *(_DWORD *)(result + 637044);
  if (v18 <= 2)
    v19 = *(_DWORD *)(v3 + 4) + 10;
  else
    v19 = 15;
  *(_DWORD *)v3 = v19;
  if (*(_DWORD *)(result + 456680))
  {
    v20 = (100 - *(_DWORD *)(result + 388528)) * v19;
    v19 = v20 / 100;
    *(_DWORD *)v3 = v20 / 100;
    if ((v20 + 99) <= 0xC6)
      *v12 = 0;
  }
  *(_DWORD *)(v3 + 8) = 60;
  *(_DWORD *)(v3 + 20) = 0;
  if (v6 == 1)
  {
    v21 = 0;
    v22 = 10;
  }
  else
  {
    v21 = *(unsigned __int8 *)(*(_QWORD *)(result + 263720) + 28) == 12;
    v22 = 15;
  }
  *(_DWORD *)(v3 + 116) = v21;
  *(_WORD *)(v3 + 64) = 32;
  *(_DWORD *)(v3 + 88) = v22;
  if (v19 < 1)
  {
    v24 = *(double *)(v3 + 80);
    goto LABEL_54;
  }
  if ((v8 & 1) == 0)
  {
    v24 = *(double *)(v3 + 80);
    if (v9 < (int)(4 * v18 * (0x64u / v19)))
    {
      v25 = 3.0;
      goto LABEL_55;
    }
LABEL_54:
    v25 = 2.25;
    goto LABEL_55;
  }
  v23 = (double)(v9 / 10) * 0.1;
  if (v23 > 0.75)
    v23 = 0.75;
  v24 = *(double *)(v3 + 80) + 3.0 - v23;
  *(double *)(v3 + 72) = v24;
  if (v9 <= 9 && ((*(_DWORD *)(result + 388496) & 0x80000000) != 0 || (*(_DWORD *)(result + 388500) & 0x80000000) != 0))
  {
    v25 = -0.25;
LABEL_55:
    v24 = v24 + v25;
    *(double *)(v3 + 72) = v24;
  }
  if (*(_DWORD *)(result + 239100) * *(_DWORD *)(result + 239096) > 101376)
    goto LABEL_63;
  if (v18 >= 2)
  {
    v26 = 32;
LABEL_61:
    *(_WORD *)(v3 + 64) = v26;
    *(_DWORD *)(v3 + 88) = 13;
    goto LABEL_63;
  }
  if (*(int *)(result + 388440) <= 2999)
  {
    v26 = 16;
    goto LABEL_61;
  }
  *(_DWORD *)(v3 + 8) = 50;
  *(double *)(v3 + 72) = fmax(v24, 2.0);
LABEL_63:
  if (!*(_DWORD *)(result + 264700))
  {
    v19 = 10;
    *(_DWORD *)v3 = 10;
    *(_QWORD *)(v3 + 72) = 0x3FF8000000000000;
    *(_DWORD *)(v3 + 88) = 10;
    if (*(_BYTE *)(result + 267112))
    {
      v19 = 0;
      *(_DWORD *)v3 = 0;
      *(_QWORD *)(v3 + 72) = 0x3FF0000000000000;
    }
  }
  if (*(_DWORD *)(result + 388560))
  {
    v27 = 1374389535 * *(_DWORD *)(result + 239572) * v19 * *(_DWORD *)(result + 239576);
    *(_DWORD *)(v3 + 28) = (v27 >> 63) + (SHIDWORD(v27) >> 5);
    v12 = (_DWORD *)(v3 + 32);
    goto LABEL_68;
  }
  return result;
}

void av1_cyclic_refresh_setup(uint64_t a1, double a2, int16x4_t a3, double a4, int16x4_t a5)
{
  uint64_t v6;
  char **v7;
  int *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  double v21;
  _WORD *v22;
  uint64_t v23;
  _DWORD *v24;
  double v25;
  int v26;
  int16x4_t v27;
  char *v28;
  double v29;
  _WORD *v30;
  uint64_t v31;
  double v32;
  int v33;
  double v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  double v40;
  int v41;
  double v42;
  _WORD *v43;
  int v44;
  double v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  _BOOL4 v54;
  int v55;
  unsigned int v56;
  double v57;
  double v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  double v63;
  double v64;
  double v65;
  _WORD *v66;
  uint64_t v67;
  double v68;
  int v69;
  int v70;
  int v71;
  double v72;
  double v73;
  int v74;
  double v75;
  _WORD *v76;
  int v77;
  double v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  int v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  int v98;
  int v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  unint64_t v106;
  int v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unint64_t v115;
  uint64_t v116;
  char *v117;
  unint64_t i;
  uint64_t v119;
  int v120;
  uint64_t v121;
  size_t v123;
  char *v124;
  unsigned __int8 *v126;
  _DWORD *v127;
  _QWORD *v128;
  int v129;
  int v130;
  int v131;
  char *v132;
  char *v133;
  int *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;

  v6 = a1 + 636980;
  v7 = (char **)(a1 + 456656);
  v8 = (int *)(a1 + 388360);
  v9 = a1 + 258032;
  v10 = (unsigned __int8 *)(a1 + 239040);
  v11 = *(_QWORD *)(a1 + 456672);
  v12 = *(_DWORD *)(a1 + 388408);
  v13 = *(_DWORD *)(*(_QWORD *)a1 + 35636);
  if (v13 <= 1599)
    v14 = v13 / 100;
  else
    v14 = 15;
  if (*(int *)(*(_QWORD *)a1 + 4 * *(unsigned __int8 *)(a1 + 456696) + 1152) >= 6)
    v15 = 6;
  else
    v15 = *(_DWORD *)(*(_QWORD *)a1 + 4 * *(unsigned __int8 *)(a1 + 456696) + 1152);
  v16 = *v10;
  v17 = *(_QWORD *)(a1 + 239264);
  v134 = (int *)(a1 + 388360);
  v135 = a1 + 258032;
  if (v17
    && (*(_DWORD *)(a1 + 239096) != *(_DWORD *)(v17 + 268) || *(_DWORD *)(a1 + 239100) != *(_DWORD *)(v17 + 272))
    && *(_DWORD *)(a1 + 637048) == *(_DWORD *)(a1 + 637040))
  {
    bzero(*(void **)(v11 + 40), *(int *)(a1 + 239576) * (uint64_t)*(int *)(a1 + 239572));
    v8 = v134;
    v9 = v135;
    *(_DWORD *)(v11 + 12) = 0;
    *(_DWORD *)(v11 + 16) = 0;
    *(_BYTE *)(a1 + 267112) = 1;
    *(_DWORD *)(v11 + 104) = 0;
    *(_DWORD *)(v11 + 112) = 0;
    *(_DWORD *)(v11 + 4) = 5;
    *(_QWORD *)(v11 + 80) = 0x3FD0000000000000;
  }
  if (*(_DWORD *)(v11 + 104))
  {
    ++*(_DWORD *)(v11 + 112);
    v18 = *(_DWORD *)(a1 + 239656);
    v19 = *(_QWORD *)(v9 + 5688);
    v20 = *(_DWORD *)(v19 + 72);
    if (v20 == 8)
    {
      v22 = ac_qlookup_QTX;
      v25 = 0.25;
    }
    else
    {
      if (v20 == 12)
      {
        v22 = ac_qlookup_12_QTX;
        v23 = 0x3F90000000000000;
      }
      else
      {
        v21 = -1.0;
        if (v20 != 10)
          goto LABEL_31;
        v22 = ac_qlookup_10_QTX;
        v23 = 0x3FB0000000000000;
      }
      v25 = *(double *)&v23;
    }
    if (v18 >= 255)
      v26 = 255;
    else
      v26 = *(_DWORD *)(a1 + 239656);
    a3.i16[0] = v22[v26 & ~(v26 >> 31)];
    v21 = v25 * (double)vmovl_s16(a3).i32[0];
LABEL_31:
    *(_QWORD *)(v11 + 48) = (uint64_t)*v8 << 10;
    *(_QWORD *)(v11 + 56) = 4 * (uint64_t)(v21 * v21);
    if (*(int *)(a1 + 265552) < 8 || *((_DWORD *)v10 + 15) * *((_DWORD *)v10 + 14) < 230400)
      *(_OWORD *)(v11 + 48) = xmmword_208F16BF0;
    *(_DWORD *)v9 = 65793;
    if (!*((_DWORD *)v7 + 6))
    {
      *(_OWORD *)(a1 + 258148) = 0u;
      *(_OWORD *)(a1 + 258132) = 0u;
      *(_OWORD *)(a1 + 258116) = 0u;
      *(_OWORD *)(a1 + 258100) = 0u;
      *(_OWORD *)(a1 + 258084) = 0u;
      *(_OWORD *)(a1 + 258068) = 0u;
      *(_OWORD *)(a1 + 258052) = 0u;
      *(_OWORD *)(a1 + 258036) = 0u;
      *(_OWORD *)(a1 + 258164) = 0u;
      *(_OWORD *)(a1 + 258180) = 0u;
      v20 = *(_DWORD *)(v19 + 72);
    }
    v27.i32[0] = *(_QWORD *)(v9 + 132) & 0xFFFFFFFE;
    v27.i32[1] = (*(_QWORD *)(v9 + 132) | 0x100000001uLL) >> 32;
    *(int16x4_t *)(v9 + 132) = v27;
    *(_DWORD *)(v9 + 140) |= 1u;
    v28 = v7[2];
    if (v20 == 8)
    {
      v30 = ac_qlookup_QTX;
      v32 = 0.25;
    }
    else
    {
      if (v20 == 12)
      {
        v30 = ac_qlookup_12_QTX;
        v31 = 0x3F90000000000000;
      }
      else
      {
        v29 = -1.0;
        if (v20 != 10)
          goto LABEL_47;
        v30 = ac_qlookup_10_QTX;
        v31 = 0x3FB0000000000000;
      }
      v32 = *(double *)&v31;
    }
    if (v18 >= 255)
      v33 = 255;
    else
      v33 = v18;
    v27.i16[0] = v30[v33 & ~(v33 >> 31)];
    v29 = v32 * (double)vmovl_s16(v27).i32[0];
LABEL_47:
    v34 = *(double *)(v11 + 72);
    if (*v10)
      v35 = 750000;
    else
      v35 = 1000000;
    if (*v10)
      v36 = 1500000;
    else
      v36 = 2000000;
    if (*(_DWORD *)v6)
      v37 = v35;
    else
      v37 = v36;
    v39 = v8[32];
    v38 = v8[33];
    if (v38 < v39)
    {
      v40 = (double)v37;
      v41 = (int)(v34 * (double)(int)((double)v37 / v29));
      while (1)
      {
        v46 = (v39 + v38) >> 1;
        if (v20 == 8)
        {
          v42 = 0.25;
          v43 = ac_qlookup_QTX;
          goto LABEL_59;
        }
        if (v20 == 12)
          break;
        v45 = -1.0;
        if (v20 == 10)
        {
          v42 = 0.0625;
          v43 = ac_qlookup_10_QTX;
          goto LABEL_59;
        }
LABEL_63:
        if ((int)(v40 / v45) > v41)
          v38 = v46 + 1;
        else
          v39 = (v39 + v38) >> 1;
        if (v38 >= v39)
          goto LABEL_72;
      }
      v42 = 0.015625;
      v43 = ac_qlookup_12_QTX;
LABEL_59:
      if (v46 >= 255)
        v44 = 255;
      else
        v44 = (v39 + v38) >> 1;
      a5.i16[0] = v43[v44 & ~(v44 >> 31)];
      *(double *)&a5 = (double)vmovl_s16(a5).i32[0];
      v45 = v42 * *(double *)&a5;
      goto LABEL_63;
    }
LABEL_72:
    v47 = v38 - v18;
    v48 = *((_DWORD *)v28 + 2) * v18;
    v49 = v48 / 100;
    v50 = -v48 / 100;
    if (v49 < -v47)
      v47 = v50;
    *(_DWORD *)(v11 + 96) = v47;
    v51 = *(_DWORD *)(a1 + 239656);
    if (v51 + v47 + *(_DWORD *)(a1 + 239660) >= 255)
      v52 = 255;
    else
      v52 = v51 + v47 + *(_DWORD *)(a1 + 239660);
    v53 = *(_DWORD *)(a1 + 265592);
    if (v53 > 1)
    {
      v54 = 1;
      if (v20 == 8)
        goto LABEL_227;
    }
    else if (v53 || *(_BYTE *)(v6 + 436))
    {
      v54 = 0;
      if (v20 == 8)
      {
LABEL_227:
        v55 = dc_qlookup_QTX[v52 & ~(v52 >> 31)];
        v56 = v55 * v55;
        if (!*(_BYTE *)(*(_QWORD *)a1 + *((unsigned __int8 *)v7 + 40) + 400))
        {
LABEL_94:
          v59 = (uint64_t)(((double)v55 * 0.0015 + 3.3) * (double)v56);
          if (v20 == 8)
            goto LABEL_99;
          goto LABEL_95;
        }
LABEL_86:
        v57 = (double)v55;
        v58 = (double)v56;
        if ((*(_BYTE *)(*(_QWORD *)a1 + *((unsigned __int8 *)v7 + 40) + 400) & 0xFE) == 2)
        {
          v59 = (uint64_t)((v57 * 0.0015 + 3.25) * v58);
          if (v20 == 8)
            goto LABEL_99;
        }
        else
        {
          v59 = (uint64_t)((v57 * 0.0015 + 3.2) * v58);
          if (v20 == 8)
            goto LABEL_99;
        }
LABEL_95:
        if (v20 == 12)
        {
          v59 = (v59 + 128) >> 8;
        }
        else
        {
          if (v20 != 10)
          {
            v61 = -1;
            if (!v16)
              goto LABEL_110;
            goto LABEL_107;
          }
          v59 = (v59 + 8) >> 4;
        }
LABEL_99:
        v60 = 0x7FFFFFFF;
        if (v59 < 0x7FFFFFFF)
          v60 = v59;
        if (v59 <= 0)
          v61 = 1;
        else
          v61 = v60;
        if (!v16)
        {
LABEL_110:
          *(_DWORD *)(v11 + 36) = v61;
          *(_WORD *)(v9 + 20) = v47;
          v63 = 0.1;
          v64 = v34 * ((double)*(int *)(v11 + 88) * 0.1);
          v65 = 4.0;
          if (v64 <= 4.0)
            v65 = v64;
          if (v20 == 8)
          {
            v66 = ac_qlookup_QTX;
            v68 = 0.25;
          }
          else
          {
            if (v20 == 12)
            {
              v66 = ac_qlookup_12_QTX;
              v67 = 0x3F90000000000000;
            }
            else
            {
              v63 = -1.0;
              if (v20 != 10)
              {
LABEL_123:
                if (*(_DWORD *)v6)
                  v36 = v35;
                v71 = v8[32];
                v70 = v8[33];
                if (v70 < v71)
                {
                  v72 = (double)v36;
                  v73 = (double)(int)((double)v36 / v63);
                  v74 = (int)(v65 * v73);
                  while (1)
                  {
                    v79 = (v71 + v70) >> 1;
                    if (v20 == 8)
                    {
                      v75 = 0.25;
                      v76 = ac_qlookup_QTX;
                      goto LABEL_128;
                    }
                    if (v20 == 12)
                      break;
                    v78 = -1.0;
                    if (v20 == 10)
                    {
                      v75 = 0.0625;
                      v76 = ac_qlookup_10_QTX;
                      goto LABEL_128;
                    }
LABEL_132:
                    if ((int)(v72 / v78) > v74)
                      v70 = v79 + 1;
                    else
                      v71 = (v71 + v70) >> 1;
                    if (v70 >= v71)
                      goto LABEL_141;
                  }
                  v75 = 0.015625;
                  v76 = ac_qlookup_12_QTX;
LABEL_128:
                  if (v79 >= 255)
                    v77 = 255;
                  else
                    v77 = (v71 + v70) >> 1;
                  LOWORD(v73) = v76[v77 & ~(v77 >> 31)];
                  v73 = (double)vmovl_s16(*(int16x4_t *)&v73).i32[0];
                  v78 = v75 * v73;
                  goto LABEL_132;
                }
LABEL_141:
                v80 = v70 - v51;
                v81 = v51 - v70;
                v82 = *((_DWORD *)v28 + 2) * v51;
                if (v82 / 100 < v81)
                  v80 = -v82 / 100;
                *(_DWORD *)(v11 + 100) = v80;
                *(_WORD *)(v9 + 36) = v80;
                v132 = v7[4];
                v133 = *v7;
                v83 = *((_DWORD *)v10 + 133);
                v126 = v10;
                v84 = *((int *)v10 + 134);
                v85 = v84 * v83;
                if (!*((_DWORD *)v7 + 6))
                {
                  bzero(v133, v85);
                  v8 = v134;
                  v9 = v135;
                  v19 = *(_QWORD *)(v135 + 5688);
                }
                v127 = (_DWORD *)v6;
                v128 = (_QWORD *)(a1 + 638056);
                v86 = *(_DWORD *)(v19 + 32);
                v87 = ((int)v84 + v86 - 1) / v86;
                v88 = (v83 + v86 - 1) / v86 * v87;
                v89 = 1374389535 * *(_DWORD *)v28 * v85;
                v90 = HIDWORD(v89);
                v91 = v89 >> 63;
                v92 = *((_DWORD *)v28 + 3);
                if (v92 >= v88)
                {
                  v92 = 0;
                  *((_DWORD *)v28 + 3) = 0;
                }
                v93 = 0;
                v94 = 0;
                v136 = 0;
                *((_DWORD *)v28 + 4) = v92;
                *((_DWORD *)v28 + 6) = 0;
                v95 = 2 * v84;
                v96 = 0x7FFFFFFFFFFFFFFFLL;
                v97 = v91 + ((int)v90 >> 5);
                v130 = v88;
                v131 = v87;
                v129 = v97;
                while (1)
                {
                  v98 = *(_DWORD *)(*(_QWORD *)(v9 + 5688) + 32);
                  v99 = v98 * (v92 / v87);
                  v100 = v92 % v87 * v98;
                  LODWORD(v101) = v84 - v100;
                  if ((int)v84 - v100 >= v98)
                    v101 = v98;
                  else
                    v101 = v101;
                  if (v83 - v99 >= v98)
                    v102 = v98;
                  else
                    v102 = (v83 - v99);
                  if (!*((_DWORD *)v28 + 29)
                    || v8[8] < 31
                    || *((int *)v28 + 28) < 31
                    || !*v128
                    || v127[13] != v127[15] - 1)
                  {
                    goto LABEL_167;
                  }
                  v94 = *(_QWORD *)(*v128 + 8 * v92);
                  v96 = *((_DWORD *)v126 + 15) * *((_DWORD *)v126 + 14) >= 230400 ? 0x8000 : 24576;
                  if ((int)v127[16] > 1)
                    break;
                  v136 = 0x2000;
                  if ((int)v102 < 1)
                  {
LABEL_212:
                    v113 = v101 * v102;
                    if ((int)v101 * (int)v102 > 1 || v94 >= v96)
                      goto LABEL_217;
                    goto LABEL_216;
                  }
LABEL_168:
                  v104 = v99 * (int)v84 + (uint64_t)v100;
                  if ((int)v101 < 1)
                  {
                    v113 = v101 * v102;
                    if ((int)v101 * (int)v102 > 1 || v94 >= v96)
                      goto LABEL_217;
LABEL_208:
                    v137 = v96;
                    v138 = v94;
                    v123 = (int)v101;
                    v124 = &v133[(int)v104];
                    do
                    {
                      memset(v124, 1, v123);
                      v124 += v84;
                      --v102;
                    }
                    while (v102);
                    v93 = *((_DWORD *)v28 + 6);
                    v8 = v134;
                    v9 = v135;
                    v88 = v130;
                    v87 = v131;
                    v96 = v137;
                    v94 = v138;
                    v97 = v129;
LABEL_216:
                    v93 += v113;
                    *((_DWORD *)v28 + 6) = v93;
                    goto LABEL_217;
                  }
                  if (v94 >= v136)
                  {
                    v115 = 0;
                    v107 = 0;
                    v116 = (int)v104;
                    v117 = &v132[(int)v104];
                    do
                    {
                      for (i = 0; i < v101; i += 2)
                      {
                        v119 = *((_QWORD *)v28 + 5) + v116;
                        v120 = *(char *)(v119 + i);
                        if (*(_BYTE *)(v119 + i))
                        {
                          if (v120 < 0)
                            *(_BYTE *)(v119 + i) = v120 + 1;
                        }
                        else if (!*((_DWORD *)v7 + 6) || !v117[i])
                        {
                          v107 += 4;
                        }
                      }
                      v115 += 2;
                      v117 += v95;
                      v116 += v95;
                    }
                    while (v115 < v102);
                  }
                  else
                  {
                    v105 = ((2 * v101 - 2) & 0xFFFFFFFC) + 4;
                    if (*((_DWORD *)v7 + 6))
                    {
                      v106 = 0;
                      v107 = 0;
                      v108 = &v132[v104];
                      v109 = v104;
                      while (1)
                      {
                        v110 = 0;
LABEL_176:
                        if (v108[v110])
                        {
                          v111 = *((_QWORD *)v28 + 5) + v109;
                          v112 = *(char *)(v111 + v110);
                          if (v112 < 0)
                            *(_BYTE *)(v111 + v110) = v112 + 1;
                          goto LABEL_180;
                        }
                        while (1)
                        {
                          v107 += 4;
LABEL_180:
                          v110 += 2;
                          if (v110 >= v101)
                            break;
                          if (*((_DWORD *)v7 + 6))
                            goto LABEL_176;
                        }
                        v106 += 2;
                        if (v106 >= v102)
                          break;
                        while (1)
                        {
                          v108 += v95;
                          v109 += v95;
                          if (*((_DWORD *)v7 + 6))
                            break;
                          v107 += v105;
                          v106 += 2;
                          if (v106 >= v102)
                            goto LABEL_202;
                        }
                      }
                    }
                    else
                    {
                      v121 = 2;
                      if (v102 > 2)
                        v121 = v102;
                      v107 = v105 + v105 * ((unint64_t)(v121 - 1) >> 1);
                    }
                  }
LABEL_202:
                  v113 = v101 * v102;
                  if (v107 >= ((int)v101 * (int)v102) >> 1 && v94 < v96)
                    goto LABEL_208;
                  v93 = *((_DWORD *)v28 + 6);
LABEL_217:
                  if (v92 + 1 == v88)
                    v92 = 0;
                  else
                    ++v92;
                  if (v93 >= v97 || v92 == *((_DWORD *)v28 + 3))
                  {
                    *((_DWORD *)v28 + 3) = v92;
                    if (!v93 && !*((_DWORD *)v7 + 6))
                      *(_DWORD *)v9 = 0;
                    return;
                  }
                }
                v103 = 0x2000;
                if (!v127[14])
                  v103 = 0x8000;
                v136 = v103;
                if (!v127[14])
                  v96 *= 16;
LABEL_167:
                if ((int)v102 < 1)
                  goto LABEL_212;
                goto LABEL_168;
              }
              v66 = ac_qlookup_10_QTX;
              v67 = 0x3FB0000000000000;
            }
            v68 = *(double *)&v67;
          }
          if (v51 >= 255)
            v69 = 255;
          else
            v69 = v51;
          LOWORD(v63) = v66[v69 & ~(v69 >> 31)];
          v63 = v68 * (double)vmovl_s16(*(int16x4_t *)&v63).i32[0];
          goto LABEL_123;
        }
LABEL_107:
        if (!*(_DWORD *)(a1 + 264720) && v54)
        {
          v62 = (rd_layer_depth_factor[v15] * (uint64_t)v61) >> 7;
          v61 = ((unint64_t)(v62 * rd_boost_factor_0[v14]) >> 7) + v62;
        }
        goto LABEL_110;
      }
    }
    else
    {
      v54 = *(_DWORD *)(*(_QWORD *)a1 + 23172) != 0;
      if (v20 == 8)
        goto LABEL_227;
    }
    if (v20 == 12)
    {
      v55 = dc_qlookup_12_QTX[v52 & ~(v52 >> 31)];
      v56 = v55 * v55;
      if (!*(_BYTE *)(*(_QWORD *)a1 + *((unsigned __int8 *)v7 + 40) + 400))
        goto LABEL_94;
    }
    else if (v20 == 10)
    {
      v55 = dc_qlookup_10_QTX[v52 & ~(v52 >> 31)];
      v56 = v55 * v55;
      if (!*(_BYTE *)(*(_QWORD *)a1 + *((unsigned __int8 *)v7 + 40) + 400))
        goto LABEL_94;
    }
    else
    {
      v55 = -1;
      v56 = 1;
      if (!*(_BYTE *)(*(_QWORD *)a1 + *((unsigned __int8 *)v7 + 40) + 400))
        goto LABEL_94;
    }
    goto LABEL_86;
  }
  if (!*((_DWORD *)v7 + 6) || v8[42] == 100)
  {
    v24 = (_DWORD *)v9;
    bzero(*v7, *((int *)v10 + 134) * (uint64_t)*((int *)v10 + 133));
    *v24 = 0;
  }
  if ((*v10 & 0xFD) == 0 || v12 || *(_BYTE *)(*(_QWORD *)a1 + 85017))
  {
    *(_QWORD *)(v11 + 12) = 0;
    *(_DWORD *)(v11 + 112) = 0;
    *(_QWORD *)(v11 + 28) = 0;
  }
}

uint64_t av1_log_block_var(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  int v4;
  double v5;
  int i;
  unint64_t j;
  unsigned int v10;
  double v11;

  v3 = 4 * mi_size_wide_3[a3] - ((*(int *)(a2 + 8344) >> 31) & (-*(_DWORD *)(a2 + 8344) >> 3));
  v4 = 4 * mi_size_high_2[a3] - ((*(int *)(a2 + 8352) >> 31) & (-*(_DWORD *)(a2 + 8352) >> 3));
  v5 = 0.0;
  if (v4 >= 1 && (int)v3 >= 1)
  {
    for (i = 0; i < v4; i += 4)
    {
      for (j = 0; j < v3; j += 4)
      {
        v10 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)a1 + 51408))(*(_QWORD *)(a2 + 48)
                                                                                    + i * *(_DWORD *)(a2 + 72) + j);
        v5 = v5 + log1p((double)v10 * 0.0625);
      }
    }
  }
  v11 = v5 / (double)((int)v3 / 4 * v4 / 4);
  if (v11 > 7.0)
    v11 = 7.0;
  return (int)v11;
}

uint64_t arg_match_helper(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4)
{
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  size_t v13;
  int v14;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t result;

  if (a4)
    *a4 = 0;
  v8 = *a3;
  if (!*a3 || *(_BYTE *)v8 != 45)
    return 0;
  v9 = *(const char **)a2;
  if (*(_QWORD *)a2 && (v10 = v8 + 1, !strcmp((const char *)(v8 + 1), v9)))
  {
    v17 = *(_DWORD *)(a2 + 16);
    if (!v17)
    {
      v16 = 0;
      v18 = 1;
      goto LABEL_27;
    }
    v16 = a3[1];
    v18 = 2;
    if (v17 == -1)
    {
LABEL_27:
      *(_QWORD *)a1 = a3;
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = v16;
      *(_DWORD *)(a1 + 24) = v18;
      *(_DWORD *)(a1 + 28) = 0;
      result = 1;
      *(_QWORD *)(a1 + 32) = a2;
      return result;
    }
  }
  else
  {
    v11 = *(const char **)(a2 + 8);
    if (!v11)
      return 0;
    v12 = strlen(*(const char **)(a2 + 8));
    if (*(_BYTE *)(v8 + 1) != 45)
      return 0;
    v13 = v12;
    v10 = v8 + 2;
    if (strncmp((const char *)(v8 + 2), v11, v12))
      return 0;
    v14 = *(unsigned __int8 *)(v13 + v8 + 2);
    if (v14 != 61 && v14 != 0)
      return 0;
    if (v14 == 61)
      v16 = v10 + v13 + 1;
    else
      v16 = 0;
    v17 = *(_DWORD *)(a2 + 16);
    v18 = 1;
    if (v17 == -1)
      goto LABEL_27;
  }
  if (!v17 || v16)
  {
    if (v17 || !v16)
      goto LABEL_27;
    if (a4)
      snprintf(a4, 0xC8uLL, "Error: option %s requires no argument.\n");
  }
  else if (a4)
  {
    snprintf(a4, 0xC8uLL, "Error: option %s requires argument.\n");
  }
  return 0;
}

unint64_t arg_parse_uint_helper(uint64_t a1, char *a2)
{
  unint64_t result;
  char *__endptr;

  __endptr = 0;
  result = strtoul(*(const char **)(a1 + 16), &__endptr, 10);
  if (a2)
    *a2 = 0;
  if (!**(_BYTE **)(a1 + 16) || *__endptr)
  {
    if (a2)
      snprintf(a2, 0xC8uLL, "Option %s: Invalid character '%c'\n");
    return 0;
  }
  if (HIDWORD(result))
  {
    if (a2)
      snprintf(a2, 0xC8uLL, "Option %s: Value %lu out of range for unsigned int\n");
    return 0;
  }
  return result;
}

uint64_t arg_parse_int_helper(uint64_t a1, char *a2)
{
  uint64_t result;
  char *__endptr;

  __endptr = 0;
  result = strtol(*(const char **)(a1 + 16), &__endptr, 10);
  if (a2)
    *a2 = 0;
  if (!**(_BYTE **)(a1 + 16) || *__endptr)
  {
    if (a2)
      snprintf(a2, 0xC8uLL, "Option %s: Invalid character '%c'\n");
    return 0;
  }
  if (result != (int)result)
  {
    if (a2)
      snprintf(a2, 0xC8uLL, "Option %s: Value %ld out of range for signed int\n");
    return 0;
  }
  return result;
}

uint64_t arg_parse_enum_helper(uint64_t a1, char *a2)
{
  uint64_t result;
  const char *v5;
  const char **v6;
  const char *v7;
  const char **v8;
  const char *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *__endptr;

  if (a2)
    *a2 = 0;
  __endptr = 0;
  result = strtol(*(const char **)(a1 + 16), &__endptr, 10);
  v5 = *(const char **)(a1 + 16);
  if (*v5 && !*__endptr && (v10 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 32), *v10))
  {
    v11 = v10 + 2;
    while (result != *((_DWORD *)v11 - 2))
    {
      v12 = *v11;
      v11 += 2;
      if (!v12)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v6 = *(const char ***)(*(_QWORD *)(a1 + 32) + 32);
    v7 = *v6;
    if (*v6)
    {
      v8 = v6 + 2;
      while (strcmp(v5, v7))
      {
        v9 = *v8;
        v8 += 2;
        v7 = v9;
        if (!v9)
          goto LABEL_9;
      }
      return *((unsigned int *)v8 - 2);
    }
    else
    {
LABEL_9:
      if (a2)
        snprintf(a2, 0xC8uLL, "Option %s: Invalid value '%s'\n", *(const char **)(a1 + 8), v5);
      return 0;
    }
  }
  return result;
}

uint64_t arg_parse_list_helper(uint64_t a1, uint64_t a2, int a3, char *a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *__endptr;

  v6 = *(char **)(a1 + 16);
  if (a4)
    *a4 = 0;
  if (*v6)
  {
    v7 = 0;
    __endptr = 0;
    v8 = a3 & ~(a3 >> 31);
    while (1)
    {
      v10 = strtol(v6, &__endptr, 10);
      v11 = v10;
      if (v10 != (int)v10)
        break;
      if (v8 == v7)
      {
        if (a4)
          snprintf(a4, 0xC8uLL, "Option %s: List has more than %d entries\n");
        return 0;
      }
      v6 = __endptr;
      if (*__endptr)
      {
        if (*__endptr != 44)
        {
          if (a4)
            snprintf(a4, 0xC8uLL, "Option %s: Bad list separator '%c'\n");
          return 0;
        }
        v6 = ++__endptr;
      }
      v9 = v7 + 1;
      *(_DWORD *)(a2 + 4 * v7++) = v11;
      if (!*v6)
        return v9;
    }
    if (a4)
      snprintf(a4, 0xC8uLL, "Option %s: Value %ld out of range for signed int\n");
  }
  return 0;
}

double set_encoder_config_0(uint64_t a1, int *a2, uint64_t a3, double a4, double a5, int32x4_t a6, double a7, int8x16_t a8)
{
  __int128 *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int32x4_t v14;
  int8x16_t v15;
  _BOOL4 v16;
  int v17;
  int v18;
  char v19;
  __int128 v20;
  int v21;
  int v22;
  double v23;
  unsigned int v24;
  int v25;
  int v26;
  char v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  BOOL v41;
  __int32 v42;
  BOOL v43;
  int v44;
  int32x4_t v45;
  int16x8_t v46;
  int v47;
  BOOL v48;
  int v49;
  BOOL v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  char v62;
  int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  int v72;
  int v73;
  BOOL v74;
  int v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  int *v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _DWORD *v88;
  int *v89;
  int v90;
  int v91;
  int v92;
  BOOL v93;
  int32x4_t v94;
  int32x4_t v95;
  int32x4_t v96;
  int8x16_t v97;
  int v98;
  int v99;
  BOOL v100;
  int v101;
  int v102;
  int v103;
  __int128 v104;
  double result;
  __int128 *v106;
  _OWORD *v107;
  uint64_t v108;
  __int128 v109;
  _OWORD *v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  int v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  int v119;

  v8 = (__int128 *)(a2 + 121);
  if (a2[191])
  {
    *(int8x8_t *)(a3 + 136) = vand_s8((int8x8_t)vceqz_s32(*(int32x2_t *)(a2 + 199)), (int8x8_t)0x100000001);
    v9 = a2[192];
    if (v9 == 128)
      v10 = 1;
    else
      v10 = 2;
    if (v9 == 64)
      v11 = 0;
    else
      v11 = v10;
    *(_DWORD *)(a3 + 256) = v11;
    *(_DWORD *)(a3 + 388) = a2[202] == 0;
    *(_DWORD *)(a3 + 336) = a2[204] == 0;
    *(_DWORD *)(a3 + 372) = a2[205] == 0;
    *(_DWORD *)(a3 + 196) = a2[214] == 0;
    *(_DWORD *)(a3 + 436) = a2[215] == 0;
    *(int32x2_t *)(a3 + 296) = vrev64_s32((int32x2_t)vand_s8((int8x8_t)vceqz_s32(*(int32x2_t *)(a2 + 195)), (int8x8_t)0x100000001));
    *(_DWORD *)(a3 + 304) = a2[197] == 0;
    *(_DWORD *)(a3 + 312) = a2[193];
    *(_DWORD *)(a3 + 308) = a2[194];
    *(_DWORD *)(a3 + 316) = a2[216] == 0;
    *(_DWORD *)(a3 + 324) = a2[217] == 0;
    *(_DWORD *)(a3 + 328) = a2[198] == 0;
    v12 = a2[206];
    v13 = a2[218];
    a6.i32[0] = a2[207];
    *(int8x8_t *)(a3 + 376) = vand_s8((int8x8_t)vceqz_s32(*(int32x2_t *)(a2 + 219)), (int8x8_t)0x100000001);
    *(_DWORD *)(a3 + 384) = a2[203] == 0;
    *(int32x2_t *)v14.i8 = vrev64_s32(*(int32x2_t *)(a2 + 212));
    v14.i32[2] = a2[221];
    v14.i32[3] = a2[211];
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    *(int8x16_t *)(a3 + 396) = vandq_s8((int8x16_t)vceqzq_s32(v14), v15);
    *(_DWORD *)(a3 + 148) = a2[201] == 0;
    *(int8x8_t *)(a3 + 428) = vand_s8((int8x8_t)vceqz_s32(*(int32x2_t *)(a2 + 209)), (int8x8_t)0x100000001);
    *(_DWORD *)(a3 + 152) = a2[222];
    v16 = a2[223] == 0;
    *(_DWORD *)(a3 + 352) = v16;
    a6.i32[1] = a2[208];
    *(_DWORD *)(a3 + 348) = v16;
    a6.i64[1] = __PAIR64__(v13, v12);
    *(int8x16_t *)(a3 + 356) = vandq_s8((int8x16_t)vceqzq_s32(a6), v15);
    *(_DWORD *)(a3 + 344) = a2[224];
    *(_DWORD *)(a3 + 460) = a2[225];
  }
  v17 = a2[24];
  *(_BYTE *)(a1 + 1076) = a2[2];
  v18 = *a2;
  *(_DWORD *)(a1 + 1036) = a2[1];
  v19 = 2 * (v18 == 2);
  if (v18 == 1)
    v19 = 1;
  *(_BYTE *)(a1 + 1104) = v19;
  *(_QWORD *)&v20 = *(_QWORD *)(a2 + 3);
  *((_QWORD *)&v20 + 1) = *((_QWORD *)a2 + 3);
  *(_OWORD *)(a1 + 24) = v20;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a3 + 248);
  v21 = a2[10];
  *(_DWORD *)(a1 + 8) = a2[9];
  v22 = a2[11];
  v23 = (double)v22 / (double)v21;
  *(double *)a1 = v23;
  v24 = a2[13];
  if (v24 < 2)
    v25 = a2[5];
  else
    v25 = *((_QWORD *)a2 + 14) / 0xE8uLL - 1;
  *(_DWORD *)(a1 + 12) = v25;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a3 + 452);
  if (v23 > 180.0)
    *(_QWORD *)a1 = 0x403E000000000000;
  v26 = *(_DWORD *)(a3 + 188);
  if ((v26 - 1) > 1)
  {
    *(_BYTE *)(a1 + 946) = 0;
    if (v26 != 1)
      goto LABEL_18;
LABEL_21:
    v27 = 0;
    goto LABEL_22;
  }
  *(_DWORD *)(a1 + 924) = v21;
  *(_DWORD *)(a1 + 928) = v22;
  *(_DWORD *)(a1 + 936) = 1;
  *(_BYTE *)(a1 + 946) = 1;
  if (v26 == 1)
    goto LABEL_21;
LABEL_18:
  if (v26 != 2)
    goto LABEL_23;
  v26 = 0;
  *(_DWORD *)(a1 + 940) = v21;
  v27 = 1;
LABEL_22:
  *(_DWORD *)(a1 + 932) = v26;
  *(_BYTE *)(a1 + 944) = v27;
  *(_BYTE *)(a1 + 945) = 1;
LABEL_23:
  *(_DWORD *)(a1 + 1080) = v24;
  v28 = *(_DWORD *)(a3 + 552);
  if (v28 == -1)
  {
    if (v24)
      v29 = 2;
    else
      v29 = 1;
    *(_DWORD *)(a1 + 1084) = v29;
  }
  else
  {
    *(_DWORD *)(a1 + 1084) = v28;
  }
  *(_QWORD *)(a1 + 148) = *(_QWORD *)(a3 + 120);
  *(_DWORD *)(a1 + 188) = v17;
  v30 = *(_DWORD *)(a3 + 524);
  v31 = *(_DWORD *)(a3 + 132);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a3 + 128);
  *(_DWORD *)(a1 + 160) = v30;
  if (v31)
  {
    v32 = 0;
    *(_DWORD *)(a1 + 180) = 0;
  }
  else
  {
    v33 = a2[36];
    *(_DWORD *)(a1 + 180) = quantizer_to_qindex_0[a2[35]];
    v32 = quantizer_to_qindex_0[v33];
  }
  *(_DWORD *)(a1 + 176) = v32;
  *(_DWORD *)(a1 + 184) = quantizer_to_qindex_0[*(int *)(a3 + 116)];
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 37);
  if (v17)
  {
    v35 = a2[39];
    v34 = a2[40];
    v36 = a2[41];
  }
  else
  {
    v34 = 60000;
    v35 = 240000;
    v36 = 60000;
  }
  *(_QWORD *)(a1 + 128) = v35;
  *(_QWORD *)(a1 + 112) = v34;
  *(_QWORD *)(a1 + 120) = v36;
  *(_QWORD *)(a1 + 136) = (1000 * a2[34]);
  *(_DWORD *)(a1 + 164) = a2[15];
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a3 + 484);
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 21);
  *(_DWORD *)(a1 + 200) = a2[44];
  v37 = a2[8];
  *(_DWORD *)(a1 + 272) = v37;
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a3 + 136);
  v38 = *a2;
  if (*a2 == 1)
    v39 = 0;
  else
    v39 = *(_DWORD *)(a3 + 140);
  *(_BYTE *)(a1 + 288) = v39 != 0;
  *(_BYTE *)(a1 + 289) = *(_DWORD *)(a3 + 144) != 0;
  *(_BYTE *)(a1 + 300) = *(_DWORD *)(a3 + 428) != 0;
  if (*(_DWORD *)(a3 + 352))
    v40 = a2[51] == 0;
  else
    v40 = 0;
  v41 = 0;
  *(_BYTE *)(a1 + 297) = v40;
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a3 + 256);
  v42 = *(_DWORD *)(a3 + 320);
  v43 = *(_DWORD *)(a3 + 364) != 0;
  v44 = *(_DWORD *)(a3 + 348);
  v45.i32[3] = v42;
  v45.i32[2] = *(_DWORD *)(a3 + 196);
  v45.i64[0] = *((_QWORD *)a2 + 26);
  v46 = (int16x8_t)vtstq_s32(v45, v45);
  *(int8x8_t *)v46.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v46), (int8x8_t)0x1000100010001);
  *(_DWORD *)(a1 + 292) = vmovn_s16(v46).u32[0];
  *(_BYTE *)(a1 + 298) = v43;
  *(_BYTE *)(a1 + 296) = (v44 & v42) != 0;
  if (v38 != 1 && *(_DWORD *)(a3 + 384))
    v41 = a2[51] == 0;
  *(_BYTE *)(a1 + 299) = v41;
  *(_BYTE *)(a1 + 290) = (*(_DWORD *)(a3 + 264) | a2[12]) != 0;
  *(_BYTE *)(a1 + 291) = *(_DWORD *)(a3 + 192) != 0;
  *(_BYTE *)(a1 + 229) = *(_DWORD *)(a3 + 156) != 0;
  *(_QWORD *)(a1 + 212) = *(_QWORD *)(a3 + 172);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a3 + 480);
  *(_BYTE *)(a1 + 227) = *(_DWORD *)(a3 + 200) != 0;
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a3 + 204);
  v47 = *(unsigned __int8 *)(a3 + 205);
  *(_BYTE *)(a1 + 225) = v47;
  *(_BYTE *)(a1 + 226) = *(_DWORD *)(a3 + 208);
  if (a2[185])
    v48 = v17 == 3;
  else
    v48 = 0;
  v49 = v48;
  *(_DWORD *)(a1 + 208) = v49;
  if (v47 == 5)
  {
    v50 = v37 == 10 && *(_DWORD *)(a3 + 228) == 9;
    *(_BYTE *)(a1 + 228) = v50;
LABEL_58:
    *(_BYTE *)(a1 + 280) = *(_DWORD *)(a3 + 212) != 0;
    *(_QWORD *)(a1 + 996) = *(_QWORD *)(a3 + 528);
    if (a2[48])
      goto LABEL_59;
    goto LABEL_55;
  }
  *(_BYTE *)(a1 + 228) = 0;
  if (v47)
    goto LABEL_58;
  *(_BYTE *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 996) = *(_QWORD *)(a3 + 528);
  if (a2[48])
  {
LABEL_59:
    v51 = *(_DWORD *)(a3 + 536);
    goto LABEL_60;
  }
LABEL_55:
  v51 = 3;
LABEL_60:
  *(_DWORD *)(a1 + 1004) = v51;
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a3 + 540);
  v52 = *((unsigned __int8 *)a2 + 64);
  *(_BYTE *)(a1 + 232) = v52;
  v54 = a2[17];
  v53 = a2[18];
  *(_BYTE *)(a1 + 233) = v54;
  *(_BYTE *)(a1 + 234) = v53;
  if (v52 == 1 && v54 == 8 && v53 == 8)
  {
    v52 = 0;
    *(_BYTE *)(a1 + 232) = 0;
  }
  *(_BYTE *)(a1 + 66) = *(_DWORD *)(a3 + 424) != 0;
  v55 = *(_DWORD *)(a3 + 152);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a1 + 52) = v55;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 48);
  *(_BYTE *)(a1 + 64) = *(_DWORD *)(a3 + 292);
  if (v52)
    v56 = 0;
  else
    v56 = *(_DWORD *)(a3 + 40);
  *(_BYTE *)(a1 + 65) = v56 != 0;
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a3 + 560);
  *(_BYTE *)(a1 + 72) = *(_DWORD *)(a3 + 564) != 0;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 26);
  v57 = *(_QWORD *)(a3 + 568);
  if (v57)
    *(_QWORD *)(a1 + 1088) = v57;
  *(_QWORD *)(a1 + 1096) = *(_QWORD *)(a3 + 576);
  v58 = a2[46];
  *(_BYTE *)(a1 + 104) = a2[45] != 0;
  v48 = v58 == 1;
  v59 = a2[47];
  v60 = a2[48];
  v62 = v48 && v59 != v60;
  *(_BYTE *)(a1 + 96) = v62;
  *(_DWORD *)(a1 + 76) = v59;
  *(_DWORD *)(a1 + 80) = v60;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 49);
  *(_BYTE *)(a1 + 105) = *(_DWORD *)(a3 + 268) != 0;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a3 + 556);
  if (!v60)
    *(_DWORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 106) = *(_DWORD *)(a3 + 432) != 0;
  v63 = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 1040) = *(_DWORD *)a3;
  if (v18 == 1)
  {
    v64 = a2[3];
    if (v64 >= a2[4])
      v64 = a2[4];
    if (v64 >= 0x438 && v63 <= 6)
    {
      v63 = 7;
      *(_DWORD *)(a1 + 1040) = 7;
    }
  }
  *(_DWORD *)(a1 + 920) = *(_DWORD *)(a3 + 244);
  *(_OWORD *)(a1 + 904) = *(_OWORD *)(a3 + 228);
  if (v18 == 1)
  {
    v65 = 0;
  }
  else
  {
    v66 = a2[14];
    if (v66 >= 48)
      v66 = 48;
    v65 = v66 & ~(v66 >> 31);
  }
  *(_DWORD *)(a1 + 304) = v65;
  v67 = *(_DWORD *)(a3 + 8);
  *(_BYTE *)(a1 + 324) = *(_DWORD *)(a3 + 4) != 0;
  *(_BYTE *)(a1 + 325) = v67 != 0;
  *(_OWORD *)(a1 + 308) = *(_OWORD *)(a3 + 56);
  *(_DWORD *)(a1 + 888) = *(_DWORD *)(a3 + 72);
  *(_QWORD *)(a1 + 872) = *(_QWORD *)(a3 + 80);
  *(_DWORD *)(a1 + 892) = *(_DWORD *)(a3 + 224);
  v68 = a2[51];
  if (v68)
  {
    v69 = 0;
    v70 = 0;
  }
  else
  {
    v69 = *(_DWORD *)(a3 + 272);
    v70 = *(_QWORD *)(a3 + 280);
  }
  v71 = 0;
  *(_DWORD *)(a1 + 896) = v69;
  *(_QWORD *)(a1 + 880) = v70;
  *(_DWORD *)(a1 + 900) = *(_DWORD *)(a3 + 112);
  *(_DWORD *)(a1 + 1012) = *(_DWORD *)(a3 + 440);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a3 + 444);
  if (a2[8] == 8 && v63 >= 8)
    v71 = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a1 + 1024) = v71;
  if (v68)
    v72 = 1;
  else
    v72 = *(_DWORD *)(a3 + 180);
  *(_DWORD *)(a1 + 328) = v72;
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a3 + 184);
  v73 = a2[51];
  *(_BYTE *)(a1 + 864) = v73 != 0;
  if (v73)
    v74 = *(_DWORD *)(a3 + 260) != 0;
  else
    v74 = 0;
  *(_BYTE *)(a1 + 865) = v74;
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a3 + 32);
  v76 = a2[55];
  v75 = a2[56];
  if (v76 >= 64)
    LODWORD(v77) = 64;
  else
    LODWORD(v77) = a2[55];
  *(_DWORD *)(a1 + 344) = v77;
  if (v75 >= 64)
    LODWORD(v78) = 64;
  else
    LODWORD(v78) = v75;
  *(_DWORD *)(a1 + 348) = v78;
  if (v76 >= 1)
  {
    if ((int)v77 <= 1)
      v77 = 1;
    else
      v77 = v77;
    if (v77 < 8 || (unint64_t)(a1 - (_QWORD)a2 + 124) < 0x20)
    {
      v79 = 0;
LABEL_113:
      v80 = v77 - v79;
      v81 = v79;
      v82 = (_DWORD *)(4 * v79 + a1 + 352);
      v83 = &a2[v81 + 57];
      do
      {
        v84 = *v83++;
        *v82++ = v84;
        --v80;
      }
      while (v80);
      goto LABEL_115;
    }
    v79 = v77 & 0x78;
    v106 = (__int128 *)(a2 + 61);
    v107 = (_OWORD *)(a1 + 368);
    v108 = v77 & 0x7FFFFFF8;
    do
    {
      v109 = *v106;
      *(v107 - 1) = *(v106 - 1);
      *v107 = v109;
      v106 += 2;
      v107 += 2;
      v108 -= 8;
    }
    while (v108);
    if (v79 != v77)
      goto LABEL_113;
  }
LABEL_115:
  if (v75 < 1)
    goto LABEL_124;
  if ((int)v78 <= 1)
    v78 = 1;
  else
    v78 = v78;
  if (v78 < 8 || (unint64_t)(a1 - (_QWORD)a2 + 124) < 0x20)
  {
    v85 = 0;
LABEL_122:
    v86 = v78 - v85;
    v87 = v85;
    v88 = (_DWORD *)(v87 * 4 + a1 + 608);
    v89 = &a2[v87 + 121];
    do
    {
      v90 = *v89++;
      *v88++ = v90;
      --v86;
    }
    while (v86);
    goto LABEL_124;
  }
  v85 = v78 & 0x78;
  v110 = (_OWORD *)(a1 + 624);
  v111 = v78 & 0x7FFFFFF8;
  do
  {
    v112 = *v8;
    v113 = v8[1];
    v8 += 2;
    *(v110 - 1) = v112;
    *v110 = v113;
    v110 += 2;
    v111 -= 8;
  }
  while (v111);
  if (v85 != v78)
    goto LABEL_122;
LABEL_124:
  *(_BYTE *)(a1 + 866) = *(_DWORD *)(a3 + 544) != 0;
  if (v73 && *(_DWORD *)(a3 + 256) >= 2u)
    *(_DWORD *)(a1 + 276) = 0;
  *(_DWORD *)(a1 + 948) = *(_DWORD *)(a3 + 340);
  *(_BYTE *)(a1 + 952) = *(_DWORD *)(a3 + 344) != 0;
  *(_BYTE *)(a1 + 953) = *(_DWORD *)(a3 + 360) != 0;
  v91 = *(_DWORD *)(a3 + 28);
  *(_BYTE *)(a1 + 1105) = *(_DWORD *)(a3 + 24) != 0;
  *(_BYTE *)(a1 + 1106) = v91 != 0;
  *(_BYTE *)(a1 + 966) = *(_DWORD *)(a3 + 148) != 0;
  v92 = *(_DWORD *)(a3 + 388);
  *(_BYTE *)(a1 + 964) = v92 != 0;
  v93 = (*a2 != 1 || *(int *)(a1 + 1040) <= 6) && (*(_DWORD *)(a3 + 392) & v92) != 0;
  *(_BYTE *)(a1 + 965) = v93;
  *(_BYTE *)(a1 + 990) = *(_DWORD *)(a3 + 296) != 0;
  *(_BYTE *)(a1 + 991) = *(_DWORD *)(a3 + 300) != 0;
  *(_BYTE *)(a1 + 992) = *(_DWORD *)(a3 + 304) != 0;
  *(_BYTE *)(a1 + 993) = *(_DWORD *)(a3 + 308);
  *(_BYTE *)(a1 + 994) = *(_DWORD *)(a3 + 312);
  v94.i64[0] = *(_QWORD *)(a3 + 408);
  a6.i64[0] = *(_QWORD *)(a3 + 324);
  v95.i32[0] = *(_DWORD *)(a3 + 316);
  v95.i32[1] = *(_DWORD *)(a3 + 396);
  v95.i64[1] = *(_QWORD *)(a3 + 400);
  v94.i32[2] = *(_DWORD *)(a3 + 416);
  v94.i32[3] = *(_DWORD *)(a3 + 436);
  a8.i32[0] = *(_DWORD *)(a3 + 584);
  v96 = (int32x4_t)vextq_s8(vextq_s8(a8, a8, 4uLL), (int8x16_t)a6, 0xCuLL);
  v96.i32[3] = *(_DWORD *)(a3 + 332);
  v97 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v95), (int16x8_t)vceqzq_s32(v94)), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32(v96), (int16x8_t)vceqzq_s32(*(int32x4_t *)(a3 + 460))));
  v94.i64[0] = 0x101010101010101;
  v94.i64[1] = 0x101010101010101;
  *(int8x16_t *)(a1 + 967) = vbicq_s8((int8x16_t)v94, v97);
  *(_BYTE *)(a1 + 983) = *(_DWORD *)(a3 + 476) != 0;
  *(_BYTE *)(a1 + 984) = (*(_DWORD *)(a3 + 320) & *(_DWORD *)(a3 + 336)) != 0;
  v98 = *(_DWORD *)(a3 + 356);
  *(_BYTE *)(a1 + 985) = v98 != 0;
  *(_BYTE *)(a1 + 987) = (*(_DWORD *)(a3 + 372) & v98) != 0;
  *(_BYTE *)(a1 + 988) = (*(_DWORD *)(a3 + 376) & v98) != 0;
  v99 = *(_DWORD *)(a3 + 364);
  if (v99)
    v100 = *(_DWORD *)(a3 + 368) != 0;
  else
    v100 = 0;
  *(_BYTE *)(a1 + 986) = v100;
  *(_BYTE *)(a1 + 989) = (*(_DWORD *)(a3 + 380) & v99) != 0;
  if (*(_DWORD *)(a3 + 132) || a2[51])
  {
    *(_DWORD *)(a1 + 248) = 0;
    *(_WORD *)(a1 + 244) = 2056;
LABEL_137:
    *(_BYTE *)(a1 + 252) = 0;
LABEL_138:
    v101 = 0;
    *(_DWORD *)(a1 + 248) = 0;
    *(_WORD *)(a1 + 244) = 2056;
    *(_QWORD *)(a1 + 236) = 0xFF000000FFLL;
    goto LABEL_139;
  }
  v101 = a2[19];
  v114 = a2[20];
  *(_DWORD *)(a1 + 248) = v101;
  *(_BYTE *)(a1 + 244) = v114;
  v115 = a2[21];
  v116 = a2[22];
  v117 = quantizer_to_qindex_0[v116];
  *(_BYTE *)(a1 + 245) = v115;
  *(_DWORD *)(a1 + 236) = v117;
  v118 = a2[23];
  *(_DWORD *)(a1 + 240) = quantizer_to_qindex_0[v118];
  if (!v101)
    goto LABEL_137;
  if (v101 != 3)
  {
    if (v101 != 1 || v114 != 8 || v115 != 8)
      goto LABEL_166;
LABEL_165:
    *(_DWORD *)(a1 + 248) = 0;
    goto LABEL_137;
  }
  if ((_DWORD)v116 == 63 && (_DWORD)v118 == 63)
    goto LABEL_165;
LABEL_166:
  v119 = *(_DWORD *)(a3 + 420);
  *(_BYTE *)(a1 + 252) = v119 != 0;
  if (!v119)
    goto LABEL_138;
LABEL_139:
  if (*(_DWORD *)(a1 + 12) == 1)
    *(_WORD *)(a1 + 945) = 0;
  *(_BYTE *)(a1 + 1108) = a2[54] != 0;
  *(_DWORD *)(a1 + 956) = *(_DWORD *)(a3 + 288);
  *(_DWORD *)(a1 + 960) = *(_DWORD *)(a3 + 548);
  v102 = 288;
  if (!*(_BYTE *)(a1 + 232))
  {
    if (*(_DWORD *)(a1 + 80))
      v103 = 160;
    else
      v103 = 64;
    if (v101)
      v102 = 288;
    else
      v102 = v103;
  }
  *(_DWORD *)(a1 + 1032) = v102;
  v104 = *(_OWORD *)(a3 + 504);
  *(_OWORD *)(a1 + 1044) = *(_OWORD *)(a3 + 488);
  *(_OWORD *)(a1 + 1060) = v104;
  *(_DWORD *)(a1 + 1028) = *(_DWORD *)(a3 + 520);
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a3 + 88);
  *(_DWORD *)(a1 + 1120) = *(_DWORD *)(a3 + 96);
  *(_QWORD *)(a1 + 1128) = *(_QWORD *)(a3 + 104);
  result = *(double *)(a3 + 588);
  *(double *)(a1 + 1136) = result;
  *(_DWORD *)(a1 + 1144) = *(_DWORD *)(a3 + 596);
  return result;
}

uint64_t av1_create_context_and_bufferpool(uint64_t a1, char **a2, unint64_t *a3, int32x2_t *a4, char a5, int a6)
{
  unint64_t v11;
  char *compressor;
  void *v15;
  int v16;
  BOOL v17;
  char v18;
  size_t v19;
  void *v20;
  unint64_t v21;
  uint64_t v22;

  v11 = *a3;
  if (*a3)
    goto LABEL_2;
  v15 = malloc_type_malloc(0x8FuLL, 0x70F2D1FBuLL);
  if (v15)
  {
    v11 = ((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0;
    *(_QWORD *)(v11 - 8) = v15;
    if (v11)
    {
      *(_QWORD *)((((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x70) = 0;
      *(_OWORD *)((((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x50) = 0u;
      *(_OWORD *)((((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x60) = 0u;
      *(_OWORD *)((((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x30) = 0u;
      *(_OWORD *)((((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x40) = 0u;
      *(_OWORD *)((((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0u;
      *(_OWORD *)((((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x20) = 0u;
      *(_OWORD *)v11 = 0u;
      v16 = a4[138].u8[0];
      v17 = v16 == 2;
      if (v16 == 2)
        v18 = 2;
      else
        v18 = 16;
      *(_BYTE *)((((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x60) = v18;
      if (v17)
        v19 = 45456;
      else
        v19 = 363648;
      v20 = malloc_type_malloc(v19 + 23, 0x70F2D1FBuLL);
      if (v20)
      {
        v21 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF0;
        *(_QWORD *)(v21 - 8) = v20;
        if (v21)
        {
          bzero((void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF0), v19);
          *(_QWORD *)(v11 + 88) = v21;
          if (!pthread_mutex_init((pthread_mutex_t *)v11, 0))
          {
            *a3 = v11;
LABEL_2:
            compressor = av1_create_compressor(a1, a4, v11, a5, a6);
            *a2 = compressor;
            return 2 * (compressor == 0);
          }
          v22 = *(_QWORD *)(v11 + 88);
          if (v22)
            free(*(void **)(v22 - 8));
        }
      }
      *(_QWORD *)(v11 + 88) = 0;
      *(_BYTE *)(v11 + 96) = 0;
      free(*(void **)(v11 - 8));
    }
  }
  return 2;
}

uint64_t encoder_init_0(uint64_t a1)
{
  uint64_t result;
  void *v3;
  unint64_t v4;
  int v5;
  double v6;
  double v7;
  int32x4_t v8;
  double v9;
  int8x16_t v10;
  int *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *primary_compressor;
  uint64_t v18;
  int v19;
  int v20;
  int v21;

  if (*(_QWORD *)(a1 + 48))
    return 0;
  v3 = malloc_type_malloc(0xB53FuLL, 0x70F2D1FBuLL);
  if (!v3)
    return 2;
  v4 = ((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 - 8) = v3;
  if (!v4)
    return 2;
  bzero((void *)(((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0), 0xB528uLL);
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 32);
  memcpy((void *)(v4 + 208), *(const void **)(a1 + 40), 0x388uLL);
  *(_QWORD *)(a1 + 40) = v4 + 208;
  memcpy((void *)(v4 + 1112), &default_extra_cfg_0, 0x258uLL);
  v5 = *(_DWORD *)(v4 + 208);
  if (v5 == 2)
    *(_DWORD *)(v4 + 1248) = 0;
  av1_initialize_enc(v5, *(_DWORD *)(v4 + 304));
  result = validate_config_1((const char **)v4, v4 + 208, v4 + 1112);
  if ((_DWORD)result)
    return result;
  v11 = (int *)(v4 + 46320);
  *(_DWORD *)(v4 + 46320) = 0;
  v12 = *(_DWORD *)(v4 + 252);
  if (v12 < 1)
  {
    LODWORD(v15) = 10000000 * *(_DWORD *)(v4 + 248);
  }
  else
  {
    v13 = *(_DWORD *)(v4 + 252);
    v14 = 10000000 * *(int *)(v4 + 248);
    do
    {
      v15 = v13;
      v13 = v14 % v13;
      v14 = v15;
    }
    while (v13 > 0);
  }
  *(_QWORD *)(v4 + 1712) = 10000000 * *(int *)(v4 + 248) / (int)v15;
  *(_DWORD *)(v4 + 1720) = v12 / (int)v15;
  set_encoder_config_0(v4 + 1744, (int *)(v4 + 208), v4 + 1112, v6, v7, v8, v9, v10);
  if (*(_DWORD *)(v4 + 1932) == 1 || *(_DWORD *)(v4 + 2824) || *(_BYTE *)(v4 + 2848))
  {
    v16 = 0;
  }
  else
  {
    v19 = *(_DWORD *)(v4 + 264);
    v20 = *(_DWORD *)(v4 + 1824);
    v21 = v20 <= 32 ? v20 + 16 : 48;
    if (v19 < v21)
      v21 = *(_DWORD *)(v4 + 264);
    *v11 = v21;
    v16 = v19 - v21 >= 17 ? 17 : 0;
  }
  *(_BYTE *)(v4 + 2851) = (*(_DWORD *)(a1 + 32) & 0x40000) != 0;
  *(_BYTE *)(v4 + 46368) = *(_DWORD *)(v4 + 416) != 0;
  primary_compressor = av1_create_primary_compressor(v4 + 3104, *v11, v4 + 1744);
  *(_QWORD *)(v4 + 2896) = primary_compressor;
  if (!primary_compressor)
    return 2;
  result = av1_create_context_and_bufferpool((uint64_t)primary_compressor, (char **)primary_compressor, (unint64_t *)(v4 + 46296), (int32x2_t *)(v4 + 1744), 0, -1);
  if (!(_DWORD)result)
  {
    v18 = *(_QWORD *)(v4 + 2896);
    *(_QWORD *)(v18 + 352) = *(_QWORD *)v18;
    if (*v11)
      return av1_create_context_and_bufferpool(v18, (char **)(v18 + 360), (unint64_t *)(v4 + 46304), (int32x2_t *)(v4 + 1744), 1, v16);
    return 0;
  }
  return result;
}

uint64_t encoder_destroy_0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  free(*(void **)(a1 + 2904));
  v2 = *(_QWORD *)(a1 + 1680);
  if (v2)
  {
    free(*(void **)(v2 - 8));
    *(_QWORD *)(a1 + 1680) = 0;
  }
  v3 = *(_QWORD *)(a1 + 1688);
  if (v3)
  {
    free(*(void **)(v3 - 8));
    *(_QWORD *)(a1 + 1688) = 0;
  }
  v4 = *(char **)(a1 + 1200);
  if (v4 != ".")
  {
    if (v4)
      free(*((void **)v4 - 1));
    *(_QWORD *)(a1 + 1200) = 0;
  }
  v5 = *(char **)(a1 + 1216);
  if (v5 != "./rate_map.txt")
  {
    if (v5)
      free(*((void **)v5 - 1));
    *(_QWORD *)(a1 + 1216) = 0;
  }
  v6 = (uint64_t *)(a1 + 46296);
  v7 = *(_QWORD *)(a1 + 1392);
  if (v7)
  {
    free(*(void **)(v7 - 8));
    *(_QWORD *)(a1 + 1392) = 0;
  }
  v8 = *(uint64_t **)(a1 + 2896);
  if (v8)
  {
    v9 = (void *)v8[4];
    if (v9)
      free(v9);
    v10 = (void *)v8[13];
    if (v10)
      free(v10);
    v11 = (void *)v8[22];
    if (v11)
      free(v11);
    av1_remove_compressor(*v8);
    if (*v6)
    {
      av1_free_ref_frame_buffers(*v6);
      pthread_mutex_destroy((pthread_mutex_t *)*v6);
      if (*v6)
        free(*(void **)(*v6 - 8));
      *v6 = 0;
    }
    av1_remove_compressor(v8[1]);
    if (*v6)
    {
      av1_free_ref_frame_buffers(*v6);
      pthread_mutex_destroy((pthread_mutex_t *)*v6);
      if (*v6)
        free(*(void **)(*v6 - 8));
      *v6 = 0;
    }
    av1_remove_compressor(v8[2]);
    if (*v6)
    {
      av1_free_ref_frame_buffers(*v6);
      pthread_mutex_destroy((pthread_mutex_t *)*v6);
      if (*v6)
        free(*(void **)(*v6 - 8));
      *v6 = 0;
    }
    av1_remove_compressor(v8[3]);
    if (*v6)
    {
      av1_free_ref_frame_buffers(*v6);
      pthread_mutex_destroy((pthread_mutex_t *)*v6);
      if (*v6)
        free(*(void **)(*v6 - 8));
      *v6 = 0;
    }
    v8[44] = 0;
    v12 = v8[45];
    if (v12)
    {
      av1_remove_compressor(v12);
      v13 = *(_QWORD *)(a1 + 46304);
      if (v13)
      {
        av1_free_ref_frame_buffers(v13);
        pthread_mutex_destroy(*(pthread_mutex_t **)(a1 + 46304));
        v14 = *(_QWORD *)(a1 + 46304);
        if (v14)
          free(*(void **)(v14 - 8));
        *(_QWORD *)(a1 + 46304) = 0;
      }
    }
    av1_remove_primary_compressor((uint64_t)v8);
  }
  v15 = *(_QWORD *)(a1 + 46312);
  v16 = *(_QWORD *)(a1 + 46360);
  if (v16)
    free(*(void **)(v16 - 8));
  v17 = *(_QWORD *)(a1 + 46352);
  if (v17)
    free(*(void **)(v17 - 8));
  if (v15)
    free(*(void **)(v15 - 8));
  free(*(void **)(a1 - 8));
  return 0;
}

uint64_t encoder_encode_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  int *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  const char *v15;
  int v17;
  size_t v18;
  unsigned int v19;
  unint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  unsigned int *v32;
  int8x16_t *v33;
  __int32 v34;
  int8x16_t *v35;
  int8x16_t *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  __int128 v60;
  int v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int *v69;
  unsigned int v70;
  unsigned int v71;
  BOOL v72;
  int v73;
  __int32 v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  int src_border_in_pixels;
  int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  _DWORD *v88;
  int *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  int *v93;
  int8x16_t *v94;
  int v95;
  int v96;
  int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int *v148;
  int v149;
  unsigned int v150;
  int v151;
  uint64_t v152;
  int8x16_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  __int8 *v157;
  int v158;
  int compressed_data;
  int *v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unsigned int v165;
  _DWORD **v166;
  _DWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _BYTE *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  _WORD *v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  size_t v178;
  uint64_t v179;
  size_t v180;
  int v181;
  uint64_t v182;
  size_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  uint64_t v197;
  uint64_t v198;
  size_t v199;
  _BOOL4 v200;
  int v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  unsigned __int8 v223;
  int v224;
  uint64_t v225;
  unsigned int **v226;
  uint64_t v227;
  uint64_t v228;
  int8x16_t *v230;
  __int8 *v231;
  int8x16_t *v232;
  uint64_t v233;
  uint64_t v234;
  _BOOL4 v235;
  int *v236;
  int *__attribute__((__org_typedef(jmp_buf))) v237;
  size_t __len[2];
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  _OWORD v246[3];
  __int128 v247;
  uint64_t v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  _BOOL8 v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unsigned int v256;

  v256 = 0;
  v5 = *(_QWORD *)(a1 + 2896);
  v255 = a3;
  v251 = 0u;
  v249 = 0u;
  v250 = 0u;
  v253 = a1 + 1712;
  v254 = 0;
  v252 = a2 == 0;
  v6 = *(_QWORD *)(v5 + 352);
  if (!v6)
    return 8;
  v10 = *(int **)(v5 + 360);
  v11 = (_QWORD *)(v6 + 456764);
  v12 = v6 + 264536;
  *v11 = *(_QWORD *)v12;
  v13 = *(_DWORD *)(v5 + 23172) && v10 == 0;
  if (v13 && !*(_DWORD *)(v12 + 1056))
    return 8;
  v234 = a1 + 1712;
  v235 = a2 == 0;
  v236 = v10;
  if (!a2)
    goto LABEL_58;
  v14 = *(_DWORD *)a2;
  v15 = "Invalid image format. Only YV12, NV12, I420, I422, I444 images are supported.";
  if (*(int *)a2 <= 2305)
  {
    switch(v14)
    {
      case 258:
      case 263:
        goto LABEL_23;
      case 259:
      case 260:
        goto LABEL_27;
      case 261:
        goto LABEL_15;
      case 262:
        goto LABEL_19;
      default:
        if (v14 == 769)
          goto LABEL_23;
        goto LABEL_27;
    }
  }
  if (v14 > 2309)
  {
    if (v14 != 2817)
    {
      if (v14 != 2310)
        goto LABEL_27;
LABEL_19:
      if (!*(_DWORD *)(a1 + 216) && !*(_DWORD *)(a1 + 416))
      {
        v15 = "Invalid image format. I444 images not supported in profile.";
        goto LABEL_27;
      }
    }
  }
  else if (v14 != 2306)
  {
    if (v14 != 2309)
    {
LABEL_27:
      *(_QWORD *)a1 = v15;
      v256 = 8;
      goto LABEL_58;
    }
LABEL_15:
    if (*(_DWORD *)(a1 + 216) != 2)
    {
      v15 = "Invalid image format. I422 images not supported in profile.";
      goto LABEL_27;
    }
  }
LABEL_23:
  if (*(_DWORD *)(a2 + 40) != *(_DWORD *)(a1 + 220) || *(_DWORD *)(a2 + 44) != *(_DWORD *)(a1 + 224))
  {
    v15 = "Image size must match encoder init configuration size";
    goto LABEL_27;
  }
  v256 = 0;
  if (v14 <= 2305)
  {
    v17 = 12;
    switch(v14)
    {
      case 258:
      case 263:
        goto LABEL_41;
      case 259:
      case 260:
        goto LABEL_39;
      case 261:
        v17 = 16;
        break;
      case 262:
        goto LABEL_37;
      default:
        if (v14 != 1027)
          goto LABEL_39;
        break;
    }
    goto LABEL_41;
  }
  if (v14 > 2309)
  {
    if (v14 == 2310)
    {
      v17 = 48;
      goto LABEL_41;
    }
    if (v14 != 2817)
      goto LABEL_39;
LABEL_37:
    v17 = 24;
    goto LABEL_41;
  }
  if (v14 == 2306)
    goto LABEL_37;
  if (v14 != 2309)
  {
LABEL_39:
    v17 = 0;
    goto LABEL_41;
  }
  v17 = 32;
LABEL_41:
  v18 = (((*(_DWORD *)(a1 + 224) + 31) & 0xFFFFFFE0) * ((*(_DWORD *)(a1 + 220) + 31) & 0xFFFFFFE0) * v17) >> 3;
  if (*(_DWORD *)(v12 + 56))
  {
    v19 = 8;
  }
  else if (*(_BYTE *)(v12 + 80))
  {
    v19 = 8;
  }
  else
  {
    v19 = 2;
  }
  v20 = v19 * (unint64_t)v18;
  if (v20 <= 0x2000)
    v20 = 0x2000;
  v21 = *(void **)(a1 + 2904);
  if (!v21 || *(_QWORD *)(a1 + 2912) < v20)
  {
    *(_QWORD *)(a1 + 2912) = v20;
    free(v21);
    v22 = malloc_type_malloc(*(_QWORD *)(a1 + 2912), 0xD022C234uLL);
    *(_QWORD *)(a1 + 2904) = v22;
    if (!v22)
    {
      *(_QWORD *)(a1 + 2912) = 0;
      return 2;
    }
  }
  if (*(int *)(v5 + 328) >= 2)
  {
    v23 = 0;
    v24 = (_DWORD *)(v5 + 100);
    v25 = *(unsigned int *)(v5 + 328);
    do
    {
      v26 = v25;
      if (!*(_QWORD *)(v24 - 17))
      {
        *(_QWORD *)(v24 - 15) = v18;
        *v24 = -1;
        *(_QWORD *)(v24 - 13) = 0;
        v27 = malloc_type_malloc(v18, 0xA1BA6F25uLL);
        *(_QWORD *)(v24 - 17) = v27;
        if (!v27)
        {
          *(_QWORD *)(v24 - 15) = 0;
          return 2;
        }
        v26 = *(unsigned int *)(v5 + 328);
      }
      v25 = v26;
      ++v23;
      v24 += 18;
    }
    while (v23 < (int)v26 - 1);
  }
LABEL_58:
  *(_QWORD *)(a1 + 3104) = 0x10000000000;
  v248 = a5;
  if (setjmp((int *)(v5 + 51188)))
  {
    *(_DWORD *)(v5 + 51184) = 0;
    v28 = *(_DWORD *)(v5 + 50976);
    if (v28)
    {
      v29 = 0;
      if (*(_DWORD *)(v5 + 50980))
        v29 = v5 + 50984;
      *(_QWORD *)a1 = v29;
    }
    return v28;
  }
  v30 = v236;
  *(_DWORD *)(v5 + 51184) = 1;
  v31 = *(_QWORD *)(v5 + 352);
  if (*(_DWORD *)(v5 + 50960) && !*(_DWORD *)(v31 + 637052) && !v248)
  {
    av1_set_svc_fixed_mode((uint64_t *)v31);
    v31 = *(_QWORD *)(v5 + 352);
  }
  v32 = (unsigned int *)(a1 + 46288);
  av1_apply_encoding_flags((_DWORD *)v31, v248);
  if (v236)
    av1_apply_encoding_flags(v236, v248);
  v33 = *(int8x16_t **)(v5 + 352);
  v34 = v33[16599].i32[2];
  v35 = v33 + 16551;
  v232 = v33;
  v36 = v33 + 16531;
  if ((v34 == 1
     || v33[39838].i8[8] == 1
     || !v34 && !*(_DWORD *)(v33->i64[0] + 23172) && v33[16601].i8[0] == 1 && !v35->i32[0])
    && *(_DWORD *)(a1 + 392) == 1)
  {
    v37 = *(_DWORD *)(a1 + 396);
    if (v37 == *(_DWORD *)(a1 + 400) && !v36->i32[0])
    {
      v38 = *v32 + 1;
      *v32 = v38;
      if (v38 > v37)
      {
        v248 |= 1uLL;
        *v32 = 1;
      }
    }
  }
  if (v256)
    goto LABEL_329;
  if ((*(_BYTE *)(a1 + 10) & 1) != 0)
    *(_DWORD *)(v5 + 23472) = 1;
  v230 = v33 + 16551;
  v231 = &v33[39838].i8[8];
  v237 = (int *)(v5 + 50976);
  if (a2)
  {
    if (*(_BYTE *)(a1 + 1736))
    {
      v39 = *(_QWORD *)(a1 + 1728);
    }
    else
    {
      v39 = v255;
      *(_QWORD *)(a1 + 1728) = v255;
      *(_BYTE *)(a1 + 1736) = 1;
    }
    if (v255 < v39)
    {
      aom_internal_error((uint64_t)v237, 8, "pts is smaller than initial pts");
      v39 = *(_QWORD *)(a1 + 1728);
    }
    v255 -= v39;
    v40 = v253;
    v41 = *(_QWORD *)v253;
    if (v255 > 0x7FFFFFFFFFFFFFFFLL / *(_QWORD *)v253)
    {
      aom_internal_error((uint64_t)v237, 8, "conversion of relative pts to ticks would overflow");
      v40 = v253;
      v41 = *(_QWORD *)v253;
    }
    v225 = v41;
    v228 = *(int *)(v40 + 8);
    if (a4 < 0)
      aom_internal_error((uint64_t)v237, 8, "duration is too big");
    v233 = (uint64_t)v33;
    if (v255 > (a4 ^ 0x7FFFFFFFFFFFFFFFLL))
      aom_internal_error((uint64_t)v237, 8, "relative pts + duration is too big");
    v42 = v253;
    v43 = *(_QWORD *)v253;
    if (v255 + a4 > 0x7FFFFFFFFFFFFFFFLL / *(_QWORD *)v253)
    {
      aom_internal_error((uint64_t)v237, 8, "conversion of relative pts + duration to ticks would overflow");
      v42 = v253;
      v43 = *(_QWORD *)v253;
    }
    v44 = v42;
    v45 = v43;
    v46 = *(int *)(v44 + 8);
    v247 = 0u;
    memset(v246, 0, sizeof(v246));
    v244 = 0u;
    v245 = 0u;
    v242 = 0u;
    v243 = 0u;
    v47 = *(_QWORD *)(a2 + 64);
    v48 = *(_QWORD *)(a2 + 72);
    *((_QWORD *)&v240 + 1) = v47;
    *(_QWORD *)&v241 = v48;
    v49 = *(_QWORD *)(a2 + 80);
    *((_QWORD *)&v241 + 1) = v49;
    v50 = *(_DWORD *)(a2 + 40);
    v51 = *(_DWORD *)(a2 + 44);
    v52 = *(_QWORD *)(a2 + 48);
    v53 = *(_DWORD *)(a2 + 32);
    v54 = *(_DWORD *)(a2 + 60);
    v55 = *(_DWORD *)(a2 + 56);
    LODWORD(__len[0]) = *(_DWORD *)(a2 + 28);
    HIDWORD(__len[0]) = (v55 + LODWORD(__len[0])) >> v55;
    v56 = v54;
    LODWORD(__len[1]) = v53;
    HIDWORD(__len[1]) = (v54 + v53) >> v54;
    LODWORD(v239) = v50;
    DWORD1(v239) = (v55 + v50) >> v55;
    DWORD2(v239) = v51;
    HIDWORD(v239) = (v54 + v51) >> v54;
    v57 = *(_DWORD *)(a2 + 16);
    DWORD1(v246[1]) = *(_DWORD *)(a2 + 12);
    v59 = *(_DWORD *)(a2 + 88);
    v58 = *(_DWORD *)(a2 + 92);
    *(_QWORD *)&v240 = __PAIR64__(v58, v59);
    *(_QWORD *)((char *)v246 + 12) = *(_QWORD *)(a2 + 4);
    BYTE8(v246[1]) = v57;
    *(_QWORD *)&v60 = *(_QWORD *)(a2 + 20);
    *((_QWORD *)&v60 + 1) = v52;
    *(_OWORD *)((char *)&v246[1] + 12) = v60;
    if ((*(_BYTE *)(a2 + 1) & 8) != 0)
    {
      *((_QWORD *)&v240 + 1) = v47 >> 1;
      *(_QWORD *)&v241 = v48 >> 1;
      *((_QWORD *)&v241 + 1) = v49 >> 1;
      v61 = v59 >> 1;
      LODWORD(v240) = v59 >> 1;
      DWORD1(v240) = v58 >> 1;
      v62 = 8;
    }
    else
    {
      v61 = v59;
      v62 = 0;
    }
    v63 = (LODWORD(__len[0]) + 31) & 0xFFFFFFE0;
    v64 = __OFSUB__(v61, v63);
    v65 = v61 - v63;
    if (v65 < 0 != v64)
      ++v65;
    LODWORD(v245) = (v65 >> 1) & ~(v65 >> 31);
    *(_QWORD *)&v246[0] = __PAIR64__(v54, v55);
    LODWORD(v247) = v62;
    *((_QWORD *)&v247 + 1) = *(_QWORD *)(a2 + 152);
    v256 = 0;
    if (*(_DWORD *)(a1 + 416))
    {
      DWORD1(v240) = 0;
      v241 = 0uLL;
      BYTE8(v246[1]) = 1;
    }
    v66 = v255 * v225;
    v67 = v45 * (v255 + a4);
    v226 = (unsigned int **)&v232[14943];
    v68 = v62 >> 3;
    if (!*(_QWORD *)(v5 + 368))
    {
      v227 = v46;
      if (v236)
        v69 = v236;
      else
        v69 = (int *)v232;
      v70 = v69[66204];
      v71 = av1_select_sb_size((uint64_t)v232[16532].i64, v36[2].i32[2], v36[2].i32[3], *(_DWORD *)(v5 + 50972));
      if (v36[15].i8[8])
      {
        v72 = v36[6].i32[0] == 0;
        v73 = 288;
      }
      else
      {
        v74 = v36[6].i32[0];
        if (v36[16].i32[2])
          v73 = 288;
        else
          v73 = 64;
        if (v36[16].i32[2])
        {
          v72 = v74 == 0;
        }
        else
        {
          v72 = v74 == 0;
          if (v36[6].i32[0])
          {
            v73 = block_size_wide[v71] + 32;
            v72 = 0;
          }
        }
      }
      v223 = v72;
      v230[45].i32[2] = v73;
      v75 = *(unsigned int *)(v5 + 328);
      if ((int)v75 >= 1)
      {
        v76 = (uint64_t *)v5;
        do
        {
          v77 = *v76++;
          *(_DWORD *)(v77 + 265544) = v230[45].i32[2];
          --v75;
        }
        while (v75);
      }
      src_border_in_pixels = get_src_border_in_pixels(v233, v71);
      v79 = av1_lookahead_init(v36[2].i32[2], v36[2].i32[3], v55, v56, v68, v70, src_border_in_pixels, v232[14972].i32[0], *(_DWORD *)(a1 + 46320), v223, v231[752]);
      *(_QWORD *)(v5 + 368) = v79;
      v46 = v227;
      if (!v79)
      {
        aom_internal_error((uint64_t)v237, 2, "Failed to allocate lag buffers");
        v46 = v227;
      }
    }
    v80 = v66 / v228;
    v81 = v67 / v46;
    if (*(int *)(v5 + 328) >= 1)
    {
      v82 = 0;
      do
      {
        v83 = av1_check_initial_width(*(_QWORD *)(v5 + 8 * v82), v68, v55, v56);
        if (v83)
          aom_internal_error((uint64_t)v237, v83, "av1_check_initial_width() failed");
        ++v82;
      }
      while (v82 < *(int *)(v5 + 328));
    }
    if (v236)
    {
      v84 = av1_check_initial_width((uint64_t)v236, v68, v55, v56);
      if (v84)
        aom_internal_error((uint64_t)v237, v84, "av1_check_initial_width() failed");
    }
    if (av1_receive_raw_frame(v233, *(_QWORD *)(a1 + 3096) | v248, (int64x2_t *)__len, v80, v81))
    {
      v85 = *v226;
      v86 = **v226;
      if (v86)
      {
        v87 = v85[1];
        v88 = v85 + 2;
        if (!v87)
          v88 = 0;
        *(_QWORD *)a1 = v88;
      }
      v256 = v86;
    }
    *(_QWORD *)(a1 + 3096) = 0;
    v30 = v236;
    v33 = (int8x16_t *)v233;
    v35 = v230;
  }
  v89 = (int *)(v5 + 74216);
  v90 = *(_QWORD *)(a1 + 2904);
  v91 = *(_QWORD *)(a1 + 2912);
  *(_QWORD *)&v249 = v90;
  *((_QWORD *)&v249 + 1) = v91;
  v92 = *(_QWORD *)(a1 + 2920);
  if (v92)
  {
    *(_QWORD *)&v249 = v90 + v92;
    *((_QWORD *)&v249 + 1) = v91 - v92;
    if (v91 - v92 < v91 >> 1)
    {
      aom_internal_error((uint64_t)v237, 1, "Compressed data buffer too small");
      v35 = v230;
    }
  }
  v93 = (int *)(v5 + 74216);
  v94 = v232 + 16532;
  if (v35[48].i32[2] != 1)
  {
    av1_compute_num_workers_for_mt(v33);
    v95 = vmaxvq_s32(vmaxq_s32(vmaxq_s32(*(int32x4_t *)(v33->i64[0] + 74220), *(int32x4_t *)(v33->i64[0] + 74236)), *(int32x4_t *)(v33->i64[0] + 74252)));
    v96 = (v95 & ~(v95 >> 31)) >= v230[45].i32[3] ? v230[45].i32[3] : v95 & ~(v95 >> 31);
    if (v96 >= 2)
    {
      v97 = *v89;
      if (*v89 < v96)
      {
        v98 = v230[48].u32[2];
        if (v98 > 1 || !v98 && !*v231 && *(_DWORD *)(v33->i64[0] + 23172))
        {
          *(_DWORD *)(v5 + 328) = av1_compute_num_fp_contexts(v5, v94);
          v97 = *v89;
        }
        v224 = v96;
        if (v97 >= 1)
        {
          v99 = 0;
          v100 = 0;
          do
          {
            v101 = v99;
            v102 = v100;
            off_253EA52E8((std::__fs::filesystem::recursive_directory_iterator *)off_253EA52E8, (std::__fs::filesystem::recursive_directory_iterator *)(*(_QWORD *)(v5 + 74272) + v100));
            v99 = v101 + 1;
            v100 = v102 + 56;
          }
          while (v101 + 1 < *v89);
          free_thread_data(v5);
          v103 = *(_QWORD *)(v5 + 74280);
          if (v103)
            free(*(void **)(v103 - 8));
          *(_QWORD *)(v5 + 74280) = 0;
          v104 = *(_QWORD *)(v5 + 74272);
          v30 = v236;
          if (v104)
            free(*(void **)(v104 - 8));
          *(_QWORD *)(v5 + 74272) = 0;
          *v89 = 0;
          if (*(int *)(v5 + 328) >= 1)
          {
            v105 = 0;
            v106 = *(unsigned int *)(v5 + 328);
            do
            {
              v109 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v105) + 234464);
              if (v109)
              {
                free(*(void **)(v109 - 8));
                v107 = *(_QWORD *)(v5 + 8 * v105);
                v108 = *(unsigned int *)(v5 + 328);
              }
              else
              {
                v107 = *(_QWORD *)(v5 + 8 * v105);
                v108 = v106;
              }
              *(_QWORD *)(v107 + 234464) = 0;
              v106 = v108;
              ++v105;
            }
            while (v105 < (int)v108);
          }
        }
        av1_create_workers(v5, v224);
        av1_init_tile_thread_data(v5, v230[48].i32[2] == 1);
      }
    }
  }
  v110 = (int *)(v5 + 74236);
  if (*(int *)(v5 + 74260) > 1)
    v110 = (int *)(v5 + 74216);
  v111 = *v110;
  if (*(_DWORD *)(v5 + 74332) < v111 && v111 <= *v89)
  {
    free_thread_data(v5);
    if (*(int *)(v5 + 328) >= 1)
    {
      v112 = 0;
      v113 = *(unsigned int *)(v5 + 328);
      do
      {
        v116 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v112) + 234464);
        if (v116)
        {
          free(*(void **)(v116 - 8));
          v114 = *(_QWORD *)(v5 + 8 * v112);
          v115 = *(unsigned int *)(v5 + 328);
        }
        else
        {
          v114 = *(_QWORD *)(v5 + 8 * v112);
          v115 = v113;
        }
        *(_QWORD *)(v114 + 234464) = 0;
        v113 = v115;
        ++v112;
      }
      while (v112 < (int)v115);
    }
    av1_init_tile_thread_data(v5, v230[48].i32[2] == 1);
  }
  if (*(int *)(v5 + 328) >= 1)
  {
    v117 = *(_OWORD *)(v5 + 74272);
    v118 = 0;
    v119 = v236;
    do
    {
      v120 = *(_QWORD *)(v5 + 8 * v118) + 627584;
      v121 = *v93;
      *(_DWORD *)v120 = *v93;
      *(_OWORD *)(v120 + 56) = v117;
      v122 = *(_DWORD *)(v5 + 74220);
      if (v121 < v122)
        v122 = v121;
      *(_DWORD *)(v120 + 4) = v122;
      v123 = *(_DWORD *)(v5 + 74224);
      if (v121 < v123)
        v123 = v121;
      *(_DWORD *)(v120 + 8) = v123;
      v124 = *(_DWORD *)(v5 + 74228);
      if (v121 < v124)
        v124 = v121;
      *(_DWORD *)(v120 + 12) = v124;
      v125 = *(_DWORD *)(v5 + 74232);
      if (v121 < v125)
        v125 = v121;
      *(_DWORD *)(v120 + 16) = v125;
      v126 = *(_DWORD *)(v5 + 74236);
      if (v121 < v126)
        v126 = v121;
      *(_DWORD *)(v120 + 20) = v126;
      v127 = *(_DWORD *)(v5 + 74240);
      if (v121 < v127)
        v127 = v121;
      *(_DWORD *)(v120 + 24) = v127;
      v128 = *(_DWORD *)(v5 + 74244);
      if (v121 < v128)
        v128 = v121;
      *(_DWORD *)(v120 + 28) = v128;
      v129 = *(_DWORD *)(v5 + 74248);
      if (v121 < v129)
        v129 = v121;
      *(_DWORD *)(v120 + 32) = v129;
      v130 = *(_DWORD *)(v5 + 74252);
      if (v121 < v130)
        v130 = v121;
      *(_DWORD *)(v120 + 36) = v130;
      v131 = *(_DWORD *)(v5 + 74256);
      if (v121 < v131)
        v131 = v121;
      *(_DWORD *)(v120 + 40) = v131;
      v132 = *(_DWORD *)(v5 + 74260);
      if (v121 < v132)
        v132 = v121;
      *(_DWORD *)(v120 + 44) = v132;
      if (v121 >= *(_DWORD *)(v5 + 74264))
        v121 = *(_DWORD *)(v5 + 74264);
      *(_DWORD *)(v120 + 48) = v121;
      ++v118;
    }
    while (v118 < *(int *)(v5 + 328));
    v133 = *(_DWORD *)(v5 + 328);
    if (v236)
      goto LABEL_206;
LABEL_233:
    if (*v93 <= 1)
      goto LABEL_244;
    goto LABEL_234;
  }
  v133 = *(_DWORD *)(v5 + 328);
  v119 = v236;
  if (!v236)
    goto LABEL_233;
LABEL_206:
  v134 = *v93;
  v30[156896] = *v93;
  *(_OWORD *)(v30 + 156910) = *(_OWORD *)(v5 + 74272);
  v135 = *(_DWORD *)(v5 + 74220);
  if (v134 < v135)
    v135 = v134;
  v30[156897] = v135;
  v136 = *(_DWORD *)(v5 + 74224);
  if (v134 < v136)
    v136 = v134;
  v30[156898] = v136;
  v137 = *(_DWORD *)(v5 + 74228);
  if (v134 < v137)
    v137 = v134;
  v30[156899] = v137;
  v138 = *(_DWORD *)(v5 + 74232);
  if (v134 < v138)
    v138 = v134;
  v30[156900] = v138;
  v139 = *(_DWORD *)(v5 + 74236);
  if (v134 < v139)
    v139 = v134;
  v30[156901] = v139;
  v140 = *(_DWORD *)(v5 + 74240);
  if (v134 < v140)
    v140 = v134;
  v30[156902] = v140;
  v141 = *(_DWORD *)(v5 + 74244);
  if (v134 < v141)
    v141 = v134;
  v30[156903] = v141;
  v142 = *(_DWORD *)(v5 + 74248);
  if (v134 < v142)
    v142 = v134;
  v30[156904] = v142;
  v143 = *(_DWORD *)(v5 + 74252);
  if (v134 < v143)
    v143 = v134;
  v30[156905] = v143;
  v144 = *(_DWORD *)(v5 + 74256);
  if (v134 < v144)
    v144 = v134;
  v30[156906] = v144;
  v145 = *(_DWORD *)(v5 + 74260);
  if (v134 < v145)
    v145 = v134;
  v30[156907] = v145;
  if (v134 >= *(_DWORD *)(v5 + 74264))
    v134 = *(_DWORD *)(v5 + 74264);
  v30[156908] = v134;
  if (*v93 <= 1)
    goto LABEL_239;
  v133 = *(_DWORD *)(v5 + 328);
LABEL_234:
  if (v133 >= 1)
  {
    v146 = 0;
    do
    {
      v147 = v146;
      av1_init_mt_sync(*(int **)(v5 + 8 * v146), *(_DWORD *)(*(_QWORD *)(v5 + 8 * v146) + 265592) == 1);
      v146 = v147 + 1;
    }
    while (v147 + 1 < *(int *)(v5 + 328));
  }
  if (v119)
  {
    av1_init_mt_sync(v119, 1);
LABEL_239:
    v240 = 0u;
    *(_OWORD *)__len = 0u;
    v239 = 0u;
    *(_QWORD *)&v241 = v235;
    *((_QWORD *)&v241 + 1) = v234;
    *(_QWORD *)&v242 = 0;
    if ((int)av1_get_compressed_data(v119, (uint64_t)__len) >= 1)
    {
      v148 = (int *)*((_QWORD *)v30 + 29886);
      v149 = *v148;
      if (v148[1])
        aom_internal_error((uint64_t)v237, v149, "%s");
      else
        aom_internal_error((uint64_t)v237, v149, 0, v222);
    }
    av1_post_encode_updates((uint64_t)v119, (uint64_t)__len);
  }
LABEL_244:
  v150 = v230[48].u32[2];
  if (v150 > 1 || !v150 && !*v231 && *(_DWORD *)(v33->i64[0] + 23172))
  {
    v151 = *(_DWORD *)(v5 + 6664);
    if (v151 >= 1 && v151 == v232[28543].u8[8])
      *(_DWORD *)(v5 + 328) = av1_compute_num_fp_contexts(v5, v94);
  }
  if (*((_QWORD *)&v249 + 1) >= *(_QWORD *)(a1 + 2912) >> 1)
  {
    v152 = 0;
    v153 = v33;
    v154 = 637916;
    while (1)
    {
      v155 = (uint64_t)v153;
      v156 = v152;
      v157 = &v153->i8[v154];
      v157[12] = 1;
      *((_DWORD *)v157 + 2) = -1;
      *(_DWORD *)v157 = -1;
      v157[4] = 0;
      v158 = *(_DWORD *)(v5 + 4 * v153[28543].u8[8] + 12668);
      if (!v158)
      {
        compressed_data = av1_get_compressed_data(v153->i32, (uint64_t)&v249);
        if (compressed_data)
        {
          if (compressed_data == -1)
            goto LABEL_329;
          v160 = *(int **)(v155 + 239088);
          v161 = *v160;
          if (v160[1])
            aom_internal_error((uint64_t)v237, v161, "%s");
          else
            aom_internal_error((uint64_t)v237, v161, 0, v222);
        }
        goto LABEL_271;
      }
      if (v158 != 1)
        break;
      av1_compress_parallel_frames((_QWORD *)v5, (uint64_t)&v249);
LABEL_271:
      v170 = (_BYTE *)(v155 + 239040);
      v171 = *(unsigned int *)(v5 + 328);
      if ((int)v171 >= 1 && (*v170 & 0xFD) == 0 && (_DWORD)v171 != 1)
      {
        v172 = *(_QWORD *)(v5 + 352);
        v173 = (_QWORD *)(v172 + 636976);
        v174 = (_WORD *)(v172 + 239535);
        v175 = v171 - 1;
        v176 = (uint64_t *)(v5 + 8);
        do
        {
          v177 = *v176++;
          *(_WORD *)(v177 + 239535) = *v174;
          *(_QWORD *)(v177 + 636976) = *v173;
          --v175;
        }
        while (v175);
      }
      *(_DWORD *)(v5 + 376) = 1;
      av1_post_encode_updates(v155, (uint64_t)&v249);
      v178 = v250;
      if ((_QWORD)v250)
      {
        if (!*(_DWORD *)(v155 + 264496) && !*(_QWORD *)(a1 + 2920))
        {
          memmove((void *)(*(_QWORD *)(a1 + 2904) + 2), *(const void **)(a1 + 2904), v250);
          **(_BYTE **)(a1 + 2904) = 18;
          v179 = *(_QWORD *)(a1 + 2904);
          if (v179)
            *(_BYTE *)(v179 + 1) = 0;
          else
            aom_internal_error((uint64_t)v237, 1, 0);
          *(_QWORD *)&v250 = v250 + 2;
          v178 = v250;
        }
        if (*(_BYTE *)(a1 + 2852))
        {
          v182 = v154;
          __len[0] = v178;
          if (av1_convert_sect5obus_to_annexb((char *)v249, __len))
            aom_internal_error((uint64_t)v237, 1, 0);
          *(_QWORD *)&v250 = __len[0];
          v183 = __len[0];
          v184 = 0;
          do
          {
            v185 = v183;
            v186 = ++v184;
            v183 >>= 7;
          }
          while (v185 > 0x7F);
          memmove((void *)(v249 + v186), (const void *)v249, __len[0]);
          v187 = v250;
          v188 = v249;
          v189 = v250;
          v190 = 0;
          do
          {
            v191 = v190;
            v192 = v189;
            v193 = ++v190;
            v189 >>= 7;
          }
          while (v192 > 0x7F);
          v194 = v193 - 1;
          if (v194 > 7 || (_QWORD)v249 == 0 || v194 > 3)
          {
            aom_internal_error((uint64_t)v237, 1, 0);
          }
          else
          {
            v197 = v191 + 1;
            v198 = 0;
            do
            {
              *(_BYTE *)(v188 + v198++) = v187 & 0x7F | ((v187 > 0x7F) << 7);
              v187 >>= 7;
            }
            while (v197 != v198);
          }
          *(_QWORD *)&v250 = v250 + v186;
          v178 = v250;
          v154 = v182;
        }
        *(_QWORD *)(a1 + 2920) += v178;
        v199 = *((_QWORD *)&v249 + 1) - v178;
        *(_QWORD *)&v249 = v249 + v178;
        *((_QWORD *)&v249 + 1) -= v178;
        if (*(_DWORD *)(v155 + 239520))
          v200 = 0;
        else
          v200 = *v170 == 0;
        v156 = v156 | v200;
        v180 = v199;
        v181 = *(_DWORD *)(v155 + 239520);
      }
      else
      {
        v180 = *((_QWORD *)&v249 + 1);
        v181 = 0;
      }
      if (!v181)
      {
        v152 = v156;
        v153 = (int8x16_t *)v155;
        if (v180 >= *(_QWORD *)(a1 + 2912) >> 1)
          continue;
      }
      if (v181)
      {
        v201 = *(_DWORD *)(v5 + 23476);
        if (v201 <= 0)
          v202 = 0;
        else
          v202 = v201 - 1;
        *(_DWORD *)(v5 + 23476) = v202;
        v203 = *(_QWORD *)(a1 + 2920);
        if (*(_BYTE *)(a1 + 2852))
        {
          v204 = *(_QWORD *)(a1 + 2920);
          v205 = 0;
          do
          {
            v206 = v204;
            v207 = ++v205;
            v204 >>= 7;
          }
          while (v206 > 0x7F);
          memmove((void *)(*(_QWORD *)(a1 + 2904) + v207), *(const void **)(a1 + 2904), *(_QWORD *)(a1 + 2920));
          if (av1_write_uleb_obu_size(0, v203, *(_QWORD *)(a1 + 2904)))
            aom_internal_error((uint64_t)v237, 1, 0);
          v208 = *(_QWORD *)(a1 + 2920) + v207;
          *(_QWORD *)(a1 + 2920) = v208;
        }
        else
        {
          v208 = *(_QWORD *)(a1 + 2920);
        }
        v209 = *(_DWORD *)(a1 + 3104);
        if (v209 < *(_DWORD *)(a1 + 3108))
        {
          v210 = *(_QWORD *)v253;
          if (*(uint64_t *)v253 >= 0)
            v211 = *(_QWORD *)v253;
          else
            v211 = v210 + 1;
          v212 = (v211 >> 1) - (v210 > 1);
          v213 = *(int *)(v253 + 8);
          v214 = ((v212 + (*((_QWORD *)&v251 + 1) - (_QWORD)v251) * v213) / v210);
          v215 = *(_DWORD *)(v155 + 456700);
          v216 = DWORD2(v250);
          v217 = v212 + v251 * v213;
          v218 = a1 + 3104 + 168 * v209;
          v219 = *(_QWORD *)(a1 + 1728);
          ++*(_DWORD *)(a1 + 3104);
          v220 = v250;
          *(_DWORD *)(v218 + 8) = 0;
          *(_DWORD *)(v218 + 12) = 0;
          *(_QWORD *)(v218 + 16) = *(_QWORD *)(a1 + 2904);
          *(_QWORD *)(v218 + 24) = v208;
          *(_QWORD *)(v218 + 32) = v217 / v210 + v219;
          *(_QWORD *)(v218 + 40) = v214;
          v221 = v216 & 0x71 | (v216 << 16);
          if (v215)
            v221 |= 2u;
          if ((_DWORD)v156)
            v221 |= 0x80u;
          *(_DWORD *)(v218 + 48) = v221;
          *(_DWORD *)(v218 + 52) = -1;
          *(_QWORD *)(v218 + 56) = v220;
          *(_OWORD *)(v218 + 64) = 0u;
          *(_OWORD *)(v218 + 80) = 0u;
          *(_OWORD *)(v218 + 96) = 0u;
          *(_OWORD *)(v218 + 112) = 0u;
          *(_OWORD *)(v218 + 128) = 0u;
          *(_OWORD *)(v218 + 144) = 0u;
          *(_OWORD *)(v218 + 160) = 0u;
        }
        *(_QWORD *)(a1 + 2920) = 0;
      }
      goto LABEL_329;
    }
    v162 = *(unsigned int *)(v5 + 328);
    v163 = *(_QWORD *)(v5 + 352);
    if ((int)v162 < 2)
    {
LABEL_264:
      v165 = 0;
      v166 = (_DWORD **)(v163 + 239272);
      v167 = *v166;
      if (!*v166)
        goto LABEL_266;
    }
    else
    {
      v164 = 1;
      while (*(unsigned __int8 *)(v163 + 456696) != *(unsigned __int8 *)(*(_QWORD *)(v5 + 8 * v164) + 456696))
      {
        if (v162 == ++v164)
          goto LABEL_264;
      }
      v165 = v164;
      v166 = (_DWORD **)(v163 + 239272);
      v167 = *v166;
      if (!*v166)
        goto LABEL_266;
    }
    --*v167;
    *v166 = 0;
LABEL_266:
    v168 = 8 * v165;
    *(_QWORD *)(v5 + 352) = *(_QWORD *)(v5 + v168);
    *(_QWORD *)(v5 + v168) = *(_QWORD *)v5;
    *(_QWORD *)v5 = *(_QWORD *)(v5 + 352);
    v169 = v5 + 72 * (int)v165;
    DWORD2(v250) = *(_DWORD *)(v169 - 16);
    v251 = *(_OWORD *)(v169 - 8);
    memcpy((void *)v249, *(const void **)(v169 - 40), *(_QWORD *)(v169 - 24));
    *(_QWORD *)&v250 = *(_QWORD *)(v169 - 24);
    v155 = *(_QWORD *)(v5 + 352);
    if (*(_DWORD *)(v155 + 239520))
      LODWORD(v254) = 1;
    goto LABEL_271;
  }
LABEL_329:
  *(_DWORD *)(v5 + 51184) = 0;
  return v256;
}

uint64_t encoder_get_cxdata_0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = a1 + 3112;
    *a2 = a1 + 3112;
  }
  if (0xCF3CF3CF3CF3CF3DLL * ((result - (a1 + 3104) - 8) >> 3) >= *(unsigned int *)(a1 + 3104))
    return 0;
  *a2 = result + 168;
  return result;
}

uint64_t encoder_set_config_0(uint64_t a1, _DWORD *a2)
{
  int v4;
  _BOOL4 v5;
  int *v6;
  unsigned int v7;
  unsigned int v8;
  const char *v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  double v20;
  double v21;
  int32x4_t v22;
  double v23;
  int8x16_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;

  v4 = a2[3];
  if (v4 == *(_DWORD *)(a1 + 220) && a2[4] == *(_DWORD *)(a1 + 224))
    goto LABEL_3;
  if (a2[14] > 1u || a2[13])
  {
    v9 = "Cannot change width or height after initialization";
    goto LABEL_10;
  }
  v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 456764);
  if (!v12 || (v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 456768)) == 0)
  {
LABEL_3:
    v5 = 0;
    v6 = (int *)(a1 + 46320);
    if (!*(_BYTE *)(a1 + 46368))
      goto LABEL_5;
  }
  else
  {
    v14 = a2[4];
    v5 = v12 > 2 * v4 || v13 > 2 * v14 || v4 > 16 * v12 || v14 > 16 * v13 || v4 > v12 || v14 > v13;
    v6 = (int *)(a1 + 46320);
    if (!*(_BYTE *)(a1 + 46368))
      goto LABEL_5;
  }
  if (!a2[52])
  {
    v9 = "Cannot change to monochrome = 0 after init with monochrome";
    goto LABEL_10;
  }
LABEL_5:
  v7 = a2[14];
  v8 = *(_DWORD *)(a1 + 264);
  if (v7 > v8)
  {
    v9 = "Cannot increase lag_in_frames";
LABEL_10:
    *(_QWORD *)a1 = v9;
    return 8;
  }
  if (v7 != v8 && *v6 >= 1)
  {
    v9 = "Cannot change lag_in_frames if LAP is enabled";
    goto LABEL_10;
  }
  v10 = validate_config_1((const char **)a1, (uint64_t)a2, a1 + 1112);
  if (!(_DWORD)v10)
  {
    memcpy((void *)(a1 + 208), a2, 0x388uLL);
    set_encoder_config_0(a1 + 1744, (int *)(a1 + 208), a1 + 1112, v20, v21, v22, v23, v24);
    v25 = *(_QWORD *)(a1 + 2896);
    if (*(unsigned __int8 *)(v25 + 49093) != *(unsigned __int8 *)(a1 + 2820))
      v5 = 1;
    v29 = 0;
    av1_change_config_seq(v25, a1 + 1744, &v29);
    v26 = *(_QWORD *)(a1 + 2896);
    if (*(int *)(v26 + 328) >= 1)
    {
      v27 = 0;
      do
      {
        av1_change_config(*(_QWORD *)(v26 + 8 * v27++), (unsigned int *)(a1 + 1744), v29);
        v26 = *(_QWORD *)(a1 + 2896);
      }
      while (v27 < *(int *)(v26 + 328));
    }
    v28 = *(_QWORD *)(v26 + 360);
    if (v28)
      av1_change_config(v28, (unsigned int *)(a1 + 1744), v29);
  }
  if (v5)
    *(_QWORD *)(a1 + 3096) |= 1uLL;
  return v10;
}

_QWORD *encoder_get_global_headers_0(uint64_t a1)
{
  return av1_get_global_headers(*(_QWORD *)(a1 + 2896));
}

uint64_t encoder_get_preview_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  __int128 v18;
  int v19;
  uint64_t v20;
  int v21;
  __int128 v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352);
  v2 = (uint64_t *)(v1 + 239096);
  if (!*(_DWORD *)(v1 + 239520))
    return 0;
  v3 = *(_QWORD *)(v1 + 239272);
  if (!v3 || *(_BYTE *)(v1 + 264584))
    return 0;
  v5 = *(_DWORD *)(v3 + 1264);
  v6 = *(_DWORD *)(v3 + 1272);
  v7 = *(_DWORD *)(v3 + 1280);
  v8 = *(_DWORD *)(v3 + 1284);
  v9 = *(_QWORD *)(v3 + 1288);
  v10 = *(_QWORD *)(v3 + 1296);
  v11 = *(_QWORD *)(v3 + 1304);
  v12 = *(_QWORD *)(v3 + 1344);
  v13 = *(_QWORD *)(v3 + 1368);
  v14 = *(_QWORD *)(v3 + 1376);
  v15 = *(_DWORD *)(v3 + 1384);
  v16 = *(_DWORD *)(v3 + 1388);
  v17 = *(unsigned __int8 *)(v3 + 1400);
  *(_QWORD *)&v18 = *(_QWORD *)(v3 + 1404);
  *(_QWORD *)&v22 = *(_QWORD *)(v3 + 1412);
  v19 = *(_DWORD *)(v3 + 1424);
  v20 = *v2;
  v21 = HIDWORD(v14);
  *((_QWORD *)&v22 + 1) = v14;
  v23 = v14;
  if ((_DWORD)v14)
    v24 = 261;
  else
    v24 = 262;
  if ((_DWORD)v14)
    v25 = 16;
  else
    v25 = 24;
  if (HIDWORD(v14))
    v26 = 258;
  else
    v26 = v24;
  if (HIDWORD(v14))
    v27 = 12;
  else
    v27 = v25;
  v28 = *(_QWORD *)(v3 + 1392);
  *(_DWORD *)(a1 + 2928) = v26;
  *(_DWORD *)(a1 + 2932) = v16;
  *(_QWORD *)(a1 + 2936) = v28;
  *(_DWORD *)(a1 + 2944) = v17;
  *(_DWORD *)(a1 + 2964) = 8;
  *((_QWORD *)&v18 + 1) = v20;
  *(_OWORD *)(a1 + 2948) = v18;
  *(_DWORD *)(a1 + 2968) = v5;
  *(_DWORD *)(a1 + 2972) = v6;
  *(_OWORD *)(a1 + 2976) = v22;
  *(_QWORD *)(a1 + 2992) = v9;
  *(_QWORD *)(a1 + 3000) = v10;
  *(_QWORD *)(a1 + 3008) = v11;
  *(_DWORD *)(a1 + 3016) = v7;
  *(_DWORD *)(a1 + 3020) = v8;
  *(_DWORD *)(a1 + 3024) = v8;
  if ((v19 & 8) != 0)
  {
    if (v23)
      v29 = 2309;
    else
      v29 = 2310;
    if (v21)
      v29 = 2306;
    *(_DWORD *)(a1 + 2928) = v29;
    *(_DWORD *)(a1 + 2964) = v15;
    *(_QWORD *)(a1 + 2992) = 2 * v9;
    *(_QWORD *)(a1 + 3000) = 2 * v10;
    v27 *= 2;
    *(_QWORD *)(a1 + 3008) = 2 * v11;
    *(_DWORD *)(a1 + 3016) = 2 * v7;
    v30 = 2 * v8;
    *(_DWORD *)(a1 + 3020) = v30;
    *(_DWORD *)(a1 + 3024) = v30;
  }
  *(_DWORD *)(a1 + 3040) = v27;
  *(_QWORD *)(a1 + 3056) = 0;
  *(_QWORD *)(a1 + 3064) = v12;
  *(_QWORD *)(a1 + 3072) = 0;
  *(_QWORD *)(a1 + 3032) = v13;
  *(_QWORD *)(a1 + 3080) = 0;
  return a1 + 2928;
}

uint64_t encoder_set_option(uint64_t a1, const char *a2, char *a3)
{
  uint64_t result;
  size_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  int32x4_t v22;
  double v23;
  int8x16_t v24;
  const char **v25;
  int v26;
  __int128 v27;
  char *__str[2];
  uint64_t v29;
  char *__endptr;
  __int128 v31;
  const char *__dst[76];

  __dst[75] = *(const char **)MEMORY[0x24BDAC8D0];
  result = 8;
  if (a1 && a2 && a3)
  {
    memcpy(__dst, (const void *)(a1 + 1112), 0x258uLL);
    v31 = xmmword_24C0DCDA0;
    v7 = strlen(a2);
    v8 = v7 + strlen(a3) + 4;
    if (v8 > 0x1FFFFFFE9)
      return 2;
    v9 = *(_QWORD *)(a1 + 2896);
    v10 = malloc_type_malloc(v8 + 23, 0x70F2D1FBuLL);
    if (!v10)
      return 2;
    v11 = v10;
    v12 = (char *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF0);
    *((_QWORD *)v12 - 1) = v11;
    *(_QWORD *)&v31 = v12;
    if (!v12)
      return 2;
    v13 = (char *)(v9 + 50984);
    snprintf(v12, v8, "--%s=%s", a2, a3);
    v29 = 0;
    v27 = 0u;
    *(_OWORD *)__str = 0u;
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB068, (uint64_t *)&v31, v13))
    {
      __endptr = 0;
      v14 = strtoul(__str[0], &__endptr, 10);
      *v13 = 0;
      if (!*__str[0] || *__endptr)
      {
        snprintf(v13, 0xC8uLL, "Option %s: Invalid character '%c'\n");
      }
      else
      {
        if (!HIDWORD(v14))
        {
LABEL_21:
          v16 = 0;
          HIDWORD(__dst[5]) = v14;
LABEL_35:
          if ((_QWORD)v31)
            free(*(void **)(v31 - 8));
          if (*v13)
            goto LABEL_38;
          *(_QWORD *)a1 = 0;
          if ((v16 & 1) != 0)
            return 8;
LABEL_78:
          result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
          if (!(_DWORD)result)
          {
            memcpy((void *)(a1 + 1112), __dst, 0x258uLL);
            return update_encoder_cfg(a1, v20, v21, v22, v23, v24);
          }
          return result;
        }
        snprintf(v13, 0xC8uLL, "Option %s: Value %lu out of range for unsigned int\n");
      }
      LODWORD(v14) = 0;
      goto LABEL_21;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6680, (uint64_t *)&v31, v13))
    {
      __endptr = 0;
      v15 = strtoul(__str[0], &__endptr, 10);
      *v13 = 0;
      if (!*__str[0] || *__endptr)
      {
        snprintf(v13, 0xC8uLL, "Option %s: Invalid character '%c'\n");
      }
      else
      {
        if (!HIDWORD(v15))
        {
LABEL_29:
          v16 = 0;
          LODWORD(__dst[7]) = v15;
          goto LABEL_35;
        }
        snprintf(v13, 0xC8uLL, "Option %s: Value %lu out of range for unsigned int\n");
      }
      LODWORD(v15) = 0;
      goto LABEL_29;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6720, (uint64_t *)&v31, v13))
    {
      __endptr = 0;
      v17 = strtoul(__str[0], &__endptr, 10);
      *v13 = 0;
      if (!*__str[0] || *__endptr)
      {
        snprintf(v13, 0xC8uLL, "Option %s: Invalid character '%c'\n");
      }
      else
      {
        if (!HIDWORD(v17))
        {
LABEL_34:
          v16 = 0;
          HIDWORD(__dst[7]) = v17;
          goto LABEL_35;
        }
        snprintf(v13, 0xC8uLL, "Option %s: Value %lu out of range for unsigned int\n");
      }
      LODWORD(v17) = 0;
      goto LABEL_34;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6760, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      LODWORD(__dst[8]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6800, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      HIDWORD(__dst[8]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAF78, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      LODWORD(__dst[0]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAE60, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      HIDWORD(__dst[0]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DADE8, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      HIDWORD(__dst[1]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAE10, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      LODWORD(__dst[2]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAE38, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      HIDWORD(__dst[2]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAFA0, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      LODWORD(__dst[3]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAFC8, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      HIDWORD(__dst[3]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAFF0, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      LODWORD(__dst[4]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB018, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      HIDWORD(__dst[4]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB040, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      LODWORD(__dst[5]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAE88, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      LODWORD(__dst[6]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAEB0, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      HIDWORD(__dst[6]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAED8, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      LODWORD(__dst[9]) = arg_parse_enum_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5960, (uint64_t *)&v31, v13))
    {
      v18 = allocate_and_set_string(a3, ".", &__dst[11], v13);
      v19 = v31;
      if (!(_QWORD)v31)
        goto LABEL_72;
      goto LABEL_71;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6000, (uint64_t *)&v31, v13))
    {
      v16 = 0;
      LODWORD(__dst[12]) = arg_parse_uint_helper((uint64_t)&v27, v13);
      goto LABEL_35;
    }
    if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6040, (uint64_t *)&v31, v13))
    {
      v18 = allocate_and_set_string(a3, "./rate_map.txt", &__dst[13], v13);
      v19 = v31;
      if (!(_QWORD)v31)
        goto LABEL_72;
    }
    else
    {
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAF00, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[14]) = arg_parse_enum_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAF28, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[14]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAF50, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[15]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6640, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[15]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6600, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[16]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB0E0, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[16]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB108, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[17]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB130, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[17]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5080, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[18]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5120, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[18]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5320, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[19]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5360, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[19]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5440, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[22]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5400, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[21]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5840, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[22]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5880, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[23]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5920, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[23]) = arg_parse_enum_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6320, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[24]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4160, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[24]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4200, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[25]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6400, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        BYTE4(__dst[25]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6440, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        BYTE5(__dst[25]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6480, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[26]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6520, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[26]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6560, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[27]) = arg_parse_uint_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7160, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[28]) = arg_parse_enum_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7000, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[28]) = arg_parse_enum_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7040, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[29]) = arg_parse_enum_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7080, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[29]) = arg_parse_enum_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7120, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[30]) = arg_parse_enum_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7240, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[32]) = arg_parse_enum_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6360, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[33]) = arg_parse_int_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DAD98, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        HIDWORD(__dst[33]) = arg_parse_int_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6080, (uint64_t *)&v31, v13))
      {
        v16 = 0;
        LODWORD(__dst[34]) = arg_parse_int_helper((uint64_t)&v27, v13);
        goto LABEL_35;
      }
      if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6120, (uint64_t *)&v31, v13))
      {
        v25 = &__dst[35];
      }
      else
      {
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7200, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[36]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB158, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[37]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB180, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[37]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB1A8, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[38]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB1D0, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[38]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4120, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[39]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4240, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[39]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4280, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[40]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4320, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[40]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4360, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[41]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4400, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[41]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4440, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[42]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6840, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[42]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6880, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[43]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6280, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[43]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4480, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[44]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4520, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[45]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4560, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[45]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4600, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[46]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4640, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[46]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4680, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[47]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4720, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[47]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4760, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[48]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4800, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[48]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4840, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[49]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4880, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[50]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4920, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[50]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 4960, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[51]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5000, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[51]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5040, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[52]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5160, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[53]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5200, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[53]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5240, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[54]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5280, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[54]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5480, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[57]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5520, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[58]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5560, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[58]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5600, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[59]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5640, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[60]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7400, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[60]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7280, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[65]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6960, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[65]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5680, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[66]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5720, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[66]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5760, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[67]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 5800, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[67]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6160, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          *(float *)&__dst[55] = (float)(int)arg_parse_int_helper((uint64_t)&v27, v13) / 10.0;
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6200, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[55]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6240, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[56]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 6920, (uint64_t *)&v31, v13))
        {
          v26 = arg_parse_int_helper((uint64_t)&v27, v13);
          if ((v26 - 3200) > 0xFFFFF31C)
          {
            v16 = 0;
            *((_BYTE *)&__dst[61] + (v26 / 100)) = v26
                                                               - 100
                                                               * (((5243 * (__int16)v26) >> 19)
                                                                + (5243 * (__int16)v26 < 0));
            goto LABEL_35;
          }
          snprintf(v13, 0xC8uLL, "Invalid operating point index: %d", v26 / 100);
          if ((_QWORD)v31)
            free(*(void **)(v31 - 8));
          v18 = 8;
LABEL_73:
          *(_QWORD *)a1 = v13;
          return v18;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DA6E0, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[56]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DA708, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[57]) = arg_parse_uint_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DA348, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          LODWORD(__dst[69]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7440, (uint64_t *)&v31, v13))
        {
          v16 = 0;
          HIDWORD(__dst[69]) = arg_parse_int_helper((uint64_t)&v27, v13);
          goto LABEL_35;
        }
        if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7600, (uint64_t *)&v31, v13))
        {
          v25 = &__dst[71];
        }
        else
        {
          if (!arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7720, (uint64_t *)&v31, v13))
          {
            if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7520, (uint64_t *)&v31, v13))
            {
              v16 = 0;
              LODWORD(__dst[70]) = arg_parse_int_helper((uint64_t)&v27, v13);
            }
            else if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7760, (uint64_t *)&v31, v13))
            {
              v16 = 0;
              LODWORD(__dst[73]) = arg_parse_uint_helper((uint64_t)&v27, v13);
            }
            else if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7800, (uint64_t *)&v31, v13))
            {
              v16 = 0;
              HIDWORD(__dst[73]) = arg_parse_int_helper((uint64_t)&v27, v13);
            }
            else if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7880, (uint64_t *)&v31, v13))
            {
              v16 = 0;
              HIDWORD(__dst[74]) = arg_parse_int_helper((uint64_t)&v27, v13);
            }
            else if (arg_match_helper((uint64_t)&v27, (uint64_t)&g_av1_codec_arg_defs + 7840, (uint64_t *)&v31, v13))
            {
              v16 = 0;
              LODWORD(__dst[74]) = arg_parse_int_helper((uint64_t)&v27, v13);
            }
            else if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB090, (uint64_t *)&v31, v13))
            {
              v16 = 0;
              *(_DWORD *)(a1 + 428) = arg_parse_list_helper((uint64_t)&v27, a1 + 436, 64, v13);
            }
            else if (arg_match_helper((uint64_t)&v27, (uint64_t)&unk_24C0DB0B8, (uint64_t *)&v31, v13))
            {
              v16 = 0;
              *(_DWORD *)(a1 + 432) = arg_parse_list_helper((uint64_t)&v27, a1 + 692, 64, v13);
            }
            else
            {
              snprintf(v13, 0xC8uLL, "Cannot find aom option %s", a2);
              v16 = 1;
            }
            goto LABEL_35;
          }
          v25 = &__dst[72];
        }
      }
      v18 = allocate_and_set_string(a3, 0, v25, v13);
      v19 = v31;
      if (!(_QWORD)v31)
      {
LABEL_72:
        if (!(_DWORD)v18)
        {
          if (*v13)
          {
LABEL_38:
            *(_QWORD *)a1 = v13;
            return 8;
          }
          *(_QWORD *)a1 = 0;
          goto LABEL_78;
        }
        goto LABEL_73;
      }
    }
LABEL_71:
    free(*(void **)(v19 - 8));
    goto LABEL_72;
  }
  return result;
}

uint64_t validate_config_1(const char **a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  const char *v7;
  uint64_t v8;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  signed int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  _BOOL4 v38;
  signed int v40;

  v3 = *(_DWORD *)(a2 + 12);
  if ((v3 - 1) >> 16)
  {
    v7 = "g_w out of range [1..65536]";
    goto LABEL_12;
  }
  v4 = *(_DWORD *)(a2 + 16);
  if ((v4 - 1) >> 16)
  {
    v7 = "g_h out of range [1..65536]";
    goto LABEL_12;
  }
  v5 = *(_DWORD *)(a2 + 24);
  if (v5 > 0x10000)
  {
    v7 = "g_forced_max_frame_width out of range [..65536]";
    goto LABEL_12;
  }
  v6 = *(_DWORD *)(a2 + 28);
  if (v6 >= 0x10001)
  {
    v7 = "g_forced_max_frame_height out of range [..65536]";
    goto LABEL_12;
  }
  if (v5 && v3 > v5)
  {
    v7 = "g_w out of range [..cfg->g_forced_max_frame_width]";
    goto LABEL_12;
  }
  if (v6 && v4 > v6)
  {
    v7 = "g_h out of range [..cfg->g_forced_max_frame_height]";
    goto LABEL_12;
  }
  if (v5)
    v3 = *(_DWORD *)(a2 + 24);
  if (v6)
    v4 = *(_DWORD *)(a2 + 28);
  if (v4 * (unint64_t)v3 > 0x40000000)
  {
    v7 = "max_frame_area out of range [..2^30]";
    goto LABEL_12;
  }
  v10 = *(_DWORD *)(a2 + 44);
  if ((v10 - 1) > 0x3B9AC9FF)
  {
    v7 = "g_timebase.den out of range [1..1000000000]";
    goto LABEL_12;
  }
  v11 = *(_DWORD *)(a2 + 40);
  v7 = "g_timebase.num out of range [1..cfg->g_timebase.den]";
  if (v11 < 1 || v11 > v10)
    goto LABEL_12;
  v12 = *(_DWORD *)(a2 + 8);
  if (v12 > 2)
  {
    v7 = "g_profile out of range [..MAX_PROFILES - 1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 136) > 0x1E8480u)
  {
    v7 = "rc_target_bitrate out of range [..2000000]";
    goto LABEL_12;
  }
  v13 = *(_DWORD *)(a2 + 144);
  if (v13 > 0x3F)
  {
    v7 = "rc_max_quantizer out of range [..63]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 140) > v13)
  {
    v7 = "rc_min_quantizer out of range [..cfg->rc_max_quantizer]";
    goto LABEL_12;
  }
  v14 = *(_DWORD *)(a3 + 132);
  if (v14 != (v14 != 0))
  {
    v7 = "lossless expected BOOLean";
    goto LABEL_12;
  }
  if (*(unsigned __int8 *)(a3 + 204) > 3u)
  {
    v7 = "aq_mode out of range [..AQ_MODE_COUNT - 1]";
    goto LABEL_12;
  }
  if (*(unsigned __int8 *)(a3 + 205) > 5u)
  {
    v7 = "deltaq_mode out of range [..DELTA_Q_MODE_COUNT - 1]";
    goto LABEL_12;
  }
  if (*(int *)(a3 + 212) > 1)
  {
    v7 = "deltalf_mode out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 216) > 1u)
  {
    v7 = "frame_periodic_boost out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)a2 != 1)
  {
    v7 = "g_usage out of range [AOM_USAGE_REALTIME..AOM_USAGE_REALTIME]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 4) > 0x40u)
  {
    v7 = "g_threads out of range [..MAX_NUM_THREADS]";
    goto LABEL_12;
  }
  v15 = *(_DWORD *)(a2 + 96);
  if (v15 > 3)
  {
    v7 = "rc_end_usage out of range [AOM_VBR..AOM_Q]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 148) > 0x64u)
  {
    v7 = "rc_undershoot_pct out of range [..100]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 152) > 0x64u)
  {
    v7 = "rc_overshoot_pct out of range [..100]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 168) > 0x64u)
  {
    v7 = "rc_2pass_vbr_bias_pct out of range [..100]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 184) > 1u)
  {
    v7 = "kf_mode out of range [AOM_KF_DISABLED..AOM_KF_AUTO]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 60) > 0x64u)
  {
    v7 = "rc_dropframe_thresh out of range [..100]";
    goto LABEL_12;
  }
  v16 = *(_DWORD *)(a2 + 52);
  if (v16 > 3)
  {
    v7 = "g_pass out of range [AOM_RC_ONE_PASS..AOM_RC_THIRD_PASS]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 56) > 0x30u)
  {
    v7 = "g_lag_in_frames out of range [..MAX_LAG_BUFFERS]";
    goto LABEL_12;
  }
  v17 = *(_DWORD *)(a3 + 56);
  if (v17 > 0x2F)
  {
    v7 = "min_gf_interval out of range [..MAX_LAG_BUFFERS - 1]";
    goto LABEL_12;
  }
  v18 = *(_DWORD *)(a3 + 60);
  if (v18 > 0x2F)
  {
    v7 = "max_gf_interval out of range [..MAX_LAG_BUFFERS - 1]";
    goto LABEL_12;
  }
  if (v17 <= 2)
    v17 = 2;
  if (v18 && v18 < v17)
  {
    v7 = "max_gf_interval out of range [AOMMAX(2, extra_cfg->min_gf_interval)..(MAX_LAG_BUFFERS - 1)]";
    goto LABEL_12;
  }
  v19 = *(_DWORD *)(a3 + 64);
  if (v19 > 5)
  {
    v7 = "gf_min_pyr_height out of range [..5]";
    goto LABEL_12;
  }
  v20 = *(_DWORD *)(a3 + 68);
  if (v20 > 5)
  {
    v7 = "gf_max_pyr_height out of range [..5]";
    goto LABEL_12;
  }
  if (v19 > v20)
  {
    v7 = "gf_min_pyr_height must be less than or equal to gf_max_pyramid_height";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 64) > 3u)
  {
    v7 = "rc_resize_mode out of range [..RESIZE_MODES - 1]";
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a2 + 68) - 8) > 8)
  {
    v7 = "rc_resize_denominator out of range [SCALE_NUMERATOR..SCALE_NUMERATOR << 1]";
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a2 + 72) - 8) > 8)
  {
    v7 = "rc_resize_kf_denominator out of range [SCALE_NUMERATOR..SCALE_NUMERATOR << 1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a2 + 76) > 4u)
  {
    v7 = "rc_superres_mode out of range [..AOM_SUPERRES_AUTO]";
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a2 + 80) - 8) > 8)
  {
    v7 = "rc_superres_denominator out of range [SCALE_NUMERATOR..SCALE_NUMERATOR << 1]";
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a2 + 84) - 8) > 8)
  {
    v7 = "rc_superres_kf_denominator out of range [SCALE_NUMERATOR..SCALE_NUMERATOR << 1]";
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a2 + 88) - 1) > 0x3E)
  {
    v7 = "rc_superres_qthresh out of range [1..63]";
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a2 + 92) - 1) > 0x3E)
  {
    v7 = "rc_superres_kf_qthresh out of range [1..63]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 292) > 2u)
  {
    v7 = "cdf_update_mode out of range [..2]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 288) > 2u)
  {
    v7 = "motion_vector_unit_test out of range [..2]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 548) > 1u)
  {
    v7 = "sb_multipass_unit_test out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 544) > 1u)
  {
    v7 = "ext_tile_debug out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 4) > 1u)
  {
    v7 = "enable_auto_alt_ref out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 8) > 2u)
  {
    v7 = "enable_auto_bwd_ref out of range [..2]";
    goto LABEL_12;
  }
  if (*(_DWORD *)a3 > 0xBu)
  {
    v7 = "cpu_used out of range [0..(cfg->g_usage == AOM_USAGE_REALTIME) ? 11 : 9]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 12) > 6u)
  {
    v7 = "noise_sensitivity out of range [..6]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 256) > 2u)
  {
    v7 = "superblock_size out of range [AOM_SUPERBLOCK_SIZE_64X64..AOM_SUPERBLOCK_SIZE_DYNAMIC]";
    goto LABEL_12;
  }
  v21 = *(_DWORD *)(a2 + 204);
  if (v21 > 1)
  {
    v7 = "large_scale_tile out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 260) > 1u)
  {
    v7 = "single_tile_decoding out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 96) > 1u)
  {
    v7 = "enable_rate_guide_deltaq out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 24) > 1u)
  {
    v7 = "row_mt out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 28) > 1u)
  {
    v7 = "fp_mt out of range [..1]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 32) > 6u)
  {
    v7 = "tile_columns out of range [..6]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 36) > 6u)
  {
    v7 = "tile_rows out of range [..6]";
    goto LABEL_12;
  }
  v22 = *(_DWORD *)(a2 + 208);
  if (v22 > 1)
  {
    v7 = "monochrome out of range [..1]";
    goto LABEL_12;
  }
  if (*(_BYTE *)(a3 + 204) && v21)
  {
    v7 = "Adaptive quantization are not supported in large scale tile coding.";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 16) > 7u)
  {
    v7 = "sharpness out of range [..7]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 48) > 0xFu)
  {
    v7 = "arnr_max_frames out of range [..15]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 52) > 6u)
  {
    v7 = "arnr_strength out of range [..6]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 116) > 0x3Fu)
  {
    v7 = "cq_level out of range [..63]";
    goto LABEL_12;
  }
  v23 = *(_DWORD *)(a2 + 32);
  if (v23 - 8 > 4)
  {
    v7 = "g_bit_depth out of range [AOM_BITS_8..AOM_BITS_12]";
    goto LABEL_12;
  }
  v24 = *(_DWORD *)(a2 + 36);
  if (v24 - 8 > 4)
  {
    v7 = "g_input_bit_depth out of range [8..12]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 224) > 2u)
  {
    v7 = "content out of range [AOM_CONTENT_DEFAULT..AOM_CONTENT_INVALID - 1]";
    goto LABEL_12;
  }
  if (v16 >= 2)
  {
    v25 = *(_QWORD *)(a2 + 104);
    if (!v25)
    {
      v7 = "rc_twopass_stats_in.buf not set.";
      goto LABEL_12;
    }
    v26 = *(_QWORD *)(a2 + 112);
    if (v26 % 0xE8)
    {
      v7 = "rc_twopass_stats_in.sz indicates truncated packet.";
      goto LABEL_12;
    }
    if (v26 < 0x1D0)
    {
      v7 = "rc_twopass_stats_in requires at least two packets.";
      goto LABEL_12;
    }
    if ((v26 / 0xE8) - 1 != (int)(*(double *)(v25 + 232 * (int)(v26 / 0xE8) - 56) + 0.5))
    {
      v7 = "rc_twopass_stats_in missing EOS stats packet";
      goto LABEL_12;
    }
  }
  v27 = *(_DWORD *)(a3 + 552);
  if (v27 != -1)
  {
    if (!v16 && v27 != 1)
    {
      v7 = "One pass encoding but passes != 1.";
      goto LABEL_12;
    }
    if ((int)v16 > v27)
    {
      v7 = "Current pass is larger than total number of passes.";
      goto LABEL_12;
    }
  }
  if (!v12)
    goto LABEL_166;
  if (v12 == 1)
  {
    if (v22)
    {
      v7 = "Monochrome is not supported in profile 1";
      goto LABEL_12;
    }
LABEL_166:
    if (v23 > 0xA)
    {
      v7 = "Codec bit-depth 12 not supported in profile < 2";
      goto LABEL_12;
    }
    if (v24 > 0xA)
    {
      v7 = "Source bit-depth 12 not supported in profile < 2";
      goto LABEL_12;
    }
  }
  v28 = *(_DWORD *)(a2 + 740);
  if (v15 == 3)
  {
    if (v28 >= 2)
    {
      v7 = "use_fixed_qp_offsets out of range [..1]";
      goto LABEL_12;
    }
  }
  else if (v28)
  {
    v7 = "--use_fixed_qp_offsets can only be used with --end-usage=q";
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a3 + 228) - 1) > 0x15)
  {
    v7 = "color_primaries out of range [AOM_CICP_CP_BT_709..AOM_CICP_CP_EBU_3213]";
    goto LABEL_12;
  }
  if ((*(_DWORD *)(a3 + 232) - 1) > 0x11)
  {
    v7 = "transfer_characteristics out of range [AOM_CICP_TC_BT_709..AOM_CICP_TC_HLG]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 236) > 0xEu)
  {
    v7 = "matrix_coefficients out of range [AOM_CICP_MC_IDENTITY..AOM_CICP_MC_ICTCP]";
    goto LABEL_12;
  }
  if (*(_DWORD *)(a3 + 244) > 1u)
  {
    v7 = "color_range out of range [0..1]";
    goto LABEL_12;
  }
  v29 = *(_DWORD *)(a3 + 484);
  if (v16 | v15)
  {
    if (v29)
    {
      v7 = "VBR corpus complexity is supported only in the case of single pass VBR mode.";
      goto LABEL_12;
    }
  }
  else if (v29 >= 0x2711)
  {
    v7 = "vbr_corpus_complexity_lap out of range [..MAX_VBR_CORPUS_COMPLEXITY]";
    goto LABEL_12;
  }
  v30 = *(_DWORD *)(a3 + 72);
  if (v30 == 8)
  {
    v7 = "This error may be related to the wrong configuration options: try to set -DCONFIG_TUNE_BUTTERAUGLI=1 at the time CMake is run.";
  }
  else if ((v30 & 0xFFFFFFFC) == 4)
  {
    v7 = "This error may be related to the wrong configuration options: try to set -DCONFIG_TUNE_VMAF=1 at the time CMake is run.";
  }
  else
  {
    if (v30 > 9)
    {
      v7 = "tuning out of range [AOM_TUNE_PSNR..AOM_TUNE_VMAF_SALIENCY_MAP]";
      goto LABEL_12;
    }
    if (*(_DWORD *)(a3 + 112) > 1u)
    {
      v7 = "dist_metric out of range [AOM_DIST_METRIC_PSNR..AOM_DIST_METRIC_QM_PSNR]";
      goto LABEL_12;
    }
    if (*(_DWORD *)(a3 + 188) > 2u)
    {
      v7 = "timing_info_type out of range [AOM_TIMING_UNSPECIFIED..AOM_TIMING_DEC_MODEL]";
      goto LABEL_12;
    }
    if (*(_DWORD *)(a3 + 272) > 0x10u)
    {
      v7 = "film_grain_test_vector out of range [0..16]";
      goto LABEL_12;
    }
    if (v14)
    {
      if (*(_BYTE *)(a3 + 204))
      {
        v7 = "Only --aq_mode=0 can be used with --lossless=1.";
        goto LABEL_12;
      }
      if (*(_DWORD *)(a3 + 200))
      {
        v7 = "Only --enable_chroma_deltaq=0 can be used with --lossless=1.";
        goto LABEL_12;
      }
    }
    if ((*(_DWORD *)(a3 + 340) - 3) > 4)
    {
      v7 = "max_reference_frames out of range [3..7]";
    }
    else if (*(_DWORD *)(a3 + 344) > 1u)
    {
      v7 = "enable_reduced_reference_set out of range [0..1]";
    }
    else if (*(_DWORD *)(a3 + 452) > 1u)
    {
      v7 = "chroma_subsampling_x out of range [..1]";
    }
    else if (*(_DWORD *)(a3 + 456) > 1u)
    {
      v7 = "chroma_subsampling_y out of range [..1]";
    }
    else if (*(_DWORD *)(a3 + 152) > 3u)
    {
      v7 = "disable_trellis_quant out of range [..3]";
    }
    else if (*(_DWORD *)(a3 + 528) > 3u)
    {
      v7 = "coeff_cost_upd_freq out of range [0..3]";
    }
    else if (*(_DWORD *)(a3 + 532) > 3u)
    {
      v7 = "mode_cost_upd_freq out of range [0..3]";
    }
    else if (*(_DWORD *)(a3 + 536) > 3u)
    {
      v7 = "mv_cost_upd_freq out of range [0..3]";
    }
    else if (*(_DWORD *)(a3 + 540) > 3u)
    {
      v7 = "dv_cost_upd_freq out of range [0..3]";
    }
    else
    {
      v31 = *(_DWORD *)(a3 + 308);
      if (v31 - 4 > 0x7C)
      {
        v7 = "min_partition_size out of range [4..128]";
      }
      else
      {
        v32 = *(_DWORD *)(a3 + 312);
        if (v32 - 4 > 0x7C)
        {
          v7 = "max_partition_size out of range [4..128]";
        }
        else if (v31 <= v32)
        {
          v33 = 0;
          v7 = "Target sequence level index is invalid";
          while (1)
          {
            v34 = *(unsigned __int8 *)(a3 + 488 + v33);
            if (v34 != 31)
            {
              v35 = v34 >= 0x1C || (v34 & 0xFA) == 2;
              v36 = v35 || v34 - 12 >= 0xFFFFFFFE;
              v37 = v36 || v34 - 28 >= 0xFFFFFFF8;
              v38 = !v37;
              if (v34 != 32 && !v38)
                break;
            }
            if (++v33 == 32)
            {
              if (*(_DWORD *)(a3 + 208) > 0x3E8u)
              {
                v7 = "deltaq_strength out of range [0..1000]";
                break;
              }
              if (*(_DWORD *)(a3 + 560) > 3u)
              {
                v7 = "loopfilter_control out of range [..3]";
                break;
              }
              if (*(_DWORD *)(a3 + 564) != (*(_DWORD *)(a3 + 564) != 0))
              {
                v7 = "skip_postproc_filtering expected BOOLean";
                break;
              }
              if (*(_DWORD *)(a3 + 136) > 2u)
              {
                v7 = "enable_cdef out of range [..2]";
                break;
              }
              if (*(_DWORD *)(a3 + 584) != (*(_DWORD *)(a3 + 584) != 0))
              {
                v7 = "auto_intra_tools_off expected BOOLean";
                break;
              }
              if (*(_DWORD *)(a3 + 588) != (*(_DWORD *)(a3 + 588) != 0))
              {
                v7 = "strict_level_conformance expected BOOLean";
                break;
              }
              if (*(_DWORD *)(a3 + 596) != (*(_DWORD *)(a3 + 596) != 0))
              {
                v7 = "sb_qp_sweep expected BOOLean";
                break;
              }
              v40 = *(_DWORD *)(a3 + 592);
              if ((v40 + 1) > 6)
              {
                v7 = "kf_max_pyr_height out of range [-1..5]";
                break;
              }
              v8 = 0;
              if (v40 != -1 && v40 < (int)v19)
              {
                v7 = "The value of kf-max-pyr-height should not be smaller than gf-min-pyr-height";
                break;
              }
              return v8;
            }
          }
        }
        else
        {
          v7 = "min_partition_size out of range [..extra_cfg->max_partition_size]";
        }
      }
    }
  }
LABEL_12:
  *a1 = v7;
  return 8;
}

uint64_t ctrl_copy_reference_1(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  unsigned int **v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[3];
  __int128 v32;
  unsigned int **v33;

  v33 = a2;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352);
  if (*(_BYTE *)(v2 + 264584))
    return 4;
  v4 = v33++;
  v5 = *v4;
  if (!v5)
    return 8;
  v32 = 0u;
  memset(v31, 0, sizeof(v31));
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v6 = *((_QWORD *)v5 + 9);
  v7 = *((_QWORD *)v5 + 10);
  *((_QWORD *)&v25 + 1) = v6;
  *(_QWORD *)&v26 = v7;
  v8 = *((_QWORD *)v5 + 11);
  *((_QWORD *)&v26 + 1) = v8;
  v9 = v5[12];
  v10 = v5[13];
  *(_QWORD *)((char *)&v31[2] + 4) = *((_QWORD *)v5 + 7);
  v11 = v5[10];
  v12 = v5[16];
  v13 = v5[17];
  LODWORD(v23) = v5[9];
  DWORD1(v23) = (v12 + v23) >> v12;
  DWORD2(v23) = v11;
  HIDWORD(v23) = (v13 + v11) >> v13;
  LODWORD(v24) = v9;
  DWORD1(v24) = (v12 + v9) >> v12;
  DWORD2(v24) = v10;
  HIDWORD(v24) = (v13 + v10) >> v13;
  v14 = v5[24];
  v15 = v5[25];
  *(_QWORD *)&v25 = __PAIR64__(v15, v14);
  *(_QWORD *)((char *)v31 + 12) = *(_QWORD *)(v5 + 3);
  DWORD1(v31[1]) = v5[5];
  BYTE8(v31[1]) = v5[6];
  *(_QWORD *)((char *)&v31[1] + 12) = *(_QWORD *)(v5 + 7);
  if ((*((_BYTE *)v5 + 9) & 8) != 0)
  {
    *((_QWORD *)&v25 + 1) = v6 >> 1;
    *(_QWORD *)&v26 = v7 >> 1;
    *((_QWORD *)&v26 + 1) = v8 >> 1;
    v14 >>= 1;
    LODWORD(v25) = v14;
    DWORD1(v25) = v15 >> 1;
    v16 = 8;
  }
  else
  {
    v16 = 0;
  }
  LODWORD(v32) = v16;
  v17 = (v5[9] + 31) & 0xFFFFFFE0;
  v18 = __OFSUB__(v14, v17);
  v19 = v14 - v17;
  if (v19 < 0 != v18)
    ++v19;
  LODWORD(v30) = (v19 >> 1) & ~(v19 >> 31);
  *(_QWORD *)&v31[0] = *((_QWORD *)v5 + 8);
  *((_QWORD *)&v32 + 1) = *((_QWORD *)v5 + 20);
  v20 = *v5;
  if (*(_BYTE *)(*(_QWORD *)(v2 + 263720) + 77))
    v21 = 1;
  else
    v21 = 3;
  if (v20 <= 7)
  {
    v22 = *(_QWORD *)(v2 + 8 * v20 + 239456);
    if (v22)
      aom_yv12_copy_frame_c((char *)(v22 + 1248), (uint64_t)&v23, v21);
  }
  return 0;
}

uint64_t ctrl_use_reference(uint64_t a1, _DWORD *a2)
{
  if ((int)*a2 <= 127)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 267120) = *a2;
  return 0;
}

uint64_t ctrl_set_reference_1(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[3];
  __int128 v31;
  unsigned int **v32;

  v32 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  v31 = 0u;
  memset(v30, 0, sizeof(v30));
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v3 = *((_QWORD *)v2 + 9);
  v4 = *((_QWORD *)v2 + 10);
  *((_QWORD *)&v24 + 1) = v3;
  *(_QWORD *)&v25 = v4;
  v5 = *((_QWORD *)v2 + 11);
  *((_QWORD *)&v25 + 1) = v5;
  v6 = v2[12];
  v7 = v2[13];
  *(_QWORD *)((char *)&v30[2] + 4) = *((_QWORD *)v2 + 7);
  v8 = v2[10];
  v10 = v2[16];
  v9 = v2[17];
  LODWORD(v22) = v2[9];
  DWORD1(v22) = (v10 + v22) >> v10;
  DWORD2(v22) = v8;
  HIDWORD(v22) = (v9 + v8) >> v9;
  LODWORD(v23) = v6;
  DWORD1(v23) = (v10 + v6) >> v10;
  DWORD2(v23) = v7;
  HIDWORD(v23) = (v9 + v7) >> v9;
  v11 = v2[24];
  v12 = v2[25];
  *(_QWORD *)&v24 = __PAIR64__(v12, v11);
  *(_QWORD *)((char *)v30 + 12) = *(_QWORD *)(v2 + 3);
  DWORD1(v30[1]) = v2[5];
  BYTE8(v30[1]) = v2[6];
  *(_QWORD *)((char *)&v30[1] + 12) = *(_QWORD *)(v2 + 7);
  if ((*((_BYTE *)v2 + 9) & 8) != 0)
  {
    *((_QWORD *)&v24 + 1) = v3 >> 1;
    *(_QWORD *)&v25 = v4 >> 1;
    *((_QWORD *)&v25 + 1) = v5 >> 1;
    v11 >>= 1;
    LODWORD(v24) = v11;
    DWORD1(v24) = v12 >> 1;
    v13 = 8;
  }
  else
  {
    v13 = 0;
  }
  LODWORD(v31) = v13;
  v15 = (v2[9] + 31) & 0xFFFFFFE0;
  v16 = __OFSUB__(v11, v15);
  v17 = v11 - v15;
  if (v17 < 0 != v16)
    ++v17;
  LODWORD(v29) = (v17 >> 1) & ~(v17 >> 31);
  *(_QWORD *)&v30[0] = *((_QWORD *)v2 + 8);
  *((_QWORD *)&v31 + 1) = *((_QWORD *)v2 + 20);
  v18 = *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352);
  v19 = *v2;
  if (*(_BYTE *)(*(_QWORD *)(v18 + 263720) + 77))
    v20 = 1;
  else
    v20 = 3;
  if (v19 <= 7)
  {
    v21 = *(_QWORD *)(v18 + 8 * v19 + 239456);
    if (v21)
      aom_yv12_copy_frame_c((char *)&v22, v21 + 1248, v20);
  }
  return 0;
}

uint64_t ctrl_set_roi_map_0()
{
  return 8;
}

uint64_t ctrl_set_active_map_0(uint64_t a1, unsigned __int8 ***a2)
{
  int v2;

  if (!*a2)
    return 8;
  av1_set_active_map(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352), **a2, *((_DWORD *)*a2 + 2), *((_DWORD *)*a2 + 3));
  return 8 * (v2 != 0);
}

uint64_t ctrl_set_scale_mode_0(uint64_t a1, unsigned int **a2, double a3, double a4, int32x4_t a5, double a6, int8x16_t a7)
{
  unsigned int *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v17;
  int v18;
  int v19;
  signed int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;

  v7 = *a2;
  if (!*a2)
    return 8;
  v8 = *(_QWORD *)(a1 + 2896);
  v9 = *(_DWORD *)(v8 + 376);
  if (v9)
  {
    v10 = *(_QWORD *)(v8 + 352);
    v11 = v10 + 264512;
    v12 = *v7;
    v13 = v7[1];
    if (v12 <= 8 && v13 <= 8)
      goto LABEL_13;
    return 8;
  }
  v11 = a1 + 1744;
  v10 = *(_QWORD *)(v8 + 352);
  v12 = *v7;
  v13 = v7[1];
  if (v12 > 8 || v13 > 8)
    return 8;
LABEL_13:
  if (v12 - 1 > 7)
  {
    v18 = 1;
    v19 = 1;
    v20 = v13 - 1;
    if (v13 - 1 > 7)
      goto LABEL_15;
LABEL_17:
    v23 = 4 * v20;
    v21 = *(_DWORD *)((char *)&unk_208F52BD4 + v23);
    v22 = *(_DWORD *)((char *)&unk_208F52BF4 + v23);
    goto LABEL_18;
  }
  v17 = 4 * (int)(v12 - 1);
  v18 = *(_DWORD *)((char *)&unk_208F52BD4 + v17);
  v19 = *(_DWORD *)((char *)&unk_208F52BF4 + v17);
  v20 = v13 - 1;
  if (v13 - 1 <= 7)
    goto LABEL_17;
LABEL_15:
  v21 = 1;
  v22 = 1;
LABEL_18:
  v24 = (v19 + *(_DWORD *)(v11 + 24) * v18 - 1) / v19;
  v25 = (v22 + *(_DWORD *)(v11 + 28) * v21 - 1) / v22;
  *(_DWORD *)(v10 + 456772) = v24;
  *(_DWORD *)(v10 + 456776) = v25;
  if (v13 | v12)
  {
    *(_BYTE *)(v11 + 232) = 1;
    *(_BYTE *)(v11 + 65) = 0;
  }
  if (!v9)
    return update_encoder_cfg(a1, a3, a4, a5, a6, a7);
  av1_check_fpmt_config(v8, v10 + 264512);
  return 0;
}

uint64_t ctrl_set_spatial_layer_id(uint64_t a1, int *a2)
{
  uint64_t result;

  if (*a2 > 3)
    return 8;
  result = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 264496) = *a2;
  return result;
}

uint64_t ctrl_set_cpuused_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[0] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_auto_alt_ref_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[1] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_auto_bwd_ref(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[2] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_sharpness_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[4] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_static_thresh_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[5] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_row_mt_1(uint64_t a1, int *a2)
{
  int v2;
  uint64_t result;
  void *v5;
  double v6;
  double v7;
  int32x4_t v8;
  double v9;
  int8x16_t v10;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2 == *(_DWORD *)(a1 + 1136))
    return 0;
  v5 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), sizeof(__dst));
  __dst[6] = v2;
  result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v5, __dst, 0x258uLL);
    return update_encoder_cfg(a1, v6, v7, v8, v9, v10);
  }
  return result;
}

uint64_t ctrl_set_fp_mt(uint64_t a1, _DWORD *a2)
{
  void *v3;
  uint64_t updated;
  _DWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t context_and_bufferpool;
  double v11;
  double v12;
  int32x4_t v13;
  double v14;
  int8x16_t v15;
  _DWORD __dst[150];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), sizeof(__dst));
  __dst[7] = *a2;
  updated = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
  if ((_DWORD)updated)
  {
    v5 = *(_DWORD **)(a1 + 2896);
    if (v5[82] == 1)
      goto LABEL_3;
LABEL_9:
    v7 = 1;
    goto LABEL_10;
  }
  memcpy(v3, __dst, 0x258uLL);
  updated = update_encoder_cfg(a1, v11, v12, v13, v14, v15);
  v5 = *(_DWORD **)(a1 + 2896);
  if (v5[82] != 1)
    goto LABEL_9;
LABEL_3:
  v6 = av1_compute_num_fp_contexts((uint64_t)v5, (_DWORD *)(*(_QWORD *)v5 + 264512));
  v7 = v6;
  if (v6 < 2)
  {
LABEL_10:
    *(_DWORD *)(*(_QWORD *)(a1 + 2896) + 328) = v7;
    return updated;
  }
  v8 = 8 * v6;
  v9 = 8;
  while (1)
  {
    context_and_bufferpool = av1_create_context_and_bufferpool(*(_QWORD *)(a1 + 2896), (char **)(*(_QWORD *)(a1 + 2896) + v9), (unint64_t *)(a1 + 46296), (int32x2_t *)(a1 + 1744), 0, -1);
    if ((_DWORD)context_and_bufferpool)
      return context_and_bufferpool;
    v9 += 8;
    if (v8 == v9)
      goto LABEL_10;
  }
}

uint64_t ctrl_set_tile_columns_0(uint64_t a1, int *a2)
{
  int v2;
  uint64_t result;
  void *v5;
  double v6;
  double v7;
  int32x4_t v8;
  double v9;
  int8x16_t v10;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2 == *(_DWORD *)(a1 + 1144))
    return 0;
  v5 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), sizeof(__dst));
  __dst[8] = v2;
  result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v5, __dst, 0x258uLL);
    return update_encoder_cfg(a1, v6, v7, v8, v9, v10);
  }
  return result;
}

uint64_t ctrl_set_tile_rows_0(uint64_t a1, int *a2)
{
  int v2;
  uint64_t result;
  void *v5;
  double v6;
  double v7;
  int32x4_t v8;
  double v9;
  int8x16_t v10;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2 == *(_DWORD *)(a1 + 1148))
    return 0;
  v5 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), sizeof(__dst));
  __dst[9] = v2;
  result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v5, __dst, 0x258uLL);
    return update_encoder_cfg(a1, v6, v7, v8, v9, v10);
  }
  return result;
}

uint64_t ctrl_set_enable_tpl_model(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  if (*a2)
  {
    *a1 = "TPL model can't be turned on in realtime only build.";
    return 8;
  }
  else
  {
    __dst[10] = 0;
    result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_set_enable_keyframe_filtering(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[11] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_arnr_max_frames_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[12] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_arnr_strength_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[13] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_tuning_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[18] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_cq_level_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[29] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_rc_max_intra_bitrate_pct_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[30] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_number_spatial_layers(uint64_t a1, int *a2, double a3, double a4, int32x4_t a5, double a6, int8x16_t a7)
{
  uint64_t v8;

  if (*a2 > 4)
    return 8;
  v8 = *(_QWORD *)(a1 + 2896);
  *(_DWORD *)(v8 + 50972) = *a2;
  if (*(_DWORD *)(v8 + 376))
    return 0;
  else
    return update_encoder_cfg(a1, a3, a4, a5, a6, a7);
}

uint64_t ctrl_set_rc_max_inter_bitrate_pct_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[31] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_rc_gf_cbr_boost_pct_1(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[32] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_lossless_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[33] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_cdef(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[34] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_restoration(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  if (*a2)
  {
    *a1 = "Restoration can't be turned on in realtime only build.";
    return 8;
  }
  else
  {
    __dst[35] = 0;
    result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_set_force_video_mode(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[36] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_obmc(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  if (*a2)
  {
    *a1 = "OBMC can't be enabled in realtime only build.";
    return 8;
  }
  else
  {
    __dst[37] = 0;
    result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_set_disable_trellis_quant(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[38] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_qm(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[39] = *a2;
  if (__dst[39])
  {
    *a1 = "QM can't be enabled with CONFIG_QUANT_MATRIX=0.";
    return 8;
  }
  else
  {
    result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_set_qm_y(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[40] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_qm_u(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[41] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_qm_v(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[42] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_qm_min(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[43] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_qm_max(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[44] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_num_tg(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[45] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_mtu(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[46] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_timing_info_type(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[47] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_frame_parallel_decoding_mode_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[48] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_error_resilient_mode(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[66] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_s_frame_mode(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[67] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_rect_partitions(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[74] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_ab_partitions(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[75] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_1to4_partitions(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[76] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_min_partition_size(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[77] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_max_partition_size(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[78] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_dual_filter(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[49] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_chroma_deltaq(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[50] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_intra_edge_filter(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[79] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_order_hint(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[80] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_tx64(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[81] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_flip_idtx(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[82] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_rect_tx(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[83] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_dist_wtd_comp(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[84] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_max_reference_frames(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[85] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_reduced_reference_set(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[86] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_ref_frame_mvs(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[87] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_allow_ref_frame_mvs(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[88] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_masked_comp(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[89] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_onesided_comp(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[90] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_interintra_comp(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[91] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_smooth_interintra(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[92] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_diff_wtd_comp(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[93] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_interinter_wedge(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[94] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_interintra_wedge(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[95] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_global_motion(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  if (*a2)
  {
    *a1 = "Global motion can't be enabled in realtime only build.";
    return 8;
  }
  else
  {
    __dst[96] = 0;
    result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_set_enable_warped_motion(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  if (*a2)
  {
    *a1 = "Warped motion can't be enabled in realtime only build.";
    return 8;
  }
  else
  {
    __dst[97] = 0;
    result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_set_allow_warped_motion(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[98] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_filter_intra(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[99] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_smooth_intra(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[100] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_paeth_intra(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[101] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_cfl_intra(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[102] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_directional_intra(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[103] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_diagonal_intra(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[104] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_superres(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[105] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_overlay(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[106] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_palette(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[107] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_intrabc(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[108] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_angle_delta(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[109] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_aq_mode_0(uint64_t a1, int *a2)
{
  void *v3;
  int v4;
  uint64_t result;
  double v6;
  double v7;
  int32x4_t v8;
  double v9;
  int8x16_t v10;
  _BYTE __dst[600];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), sizeof(__dst));
  v4 = *a2;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 388616))
    LOBYTE(v4) = 0;
  __dst[204] = v4;
  result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg(a1, v6, v7, v8, v9, v10);
  }
  return result;
}

uint64_t ctrl_set_reduced_tx_type_set(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[115] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_intra_dct_only(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[116] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_inter_dct_only(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[117] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_intra_default_tx_only(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[118] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_quant_b_adapt()
{
  return 4;
}

uint64_t ctrl_set_coeff_cost_upd_freq(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[132] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_mode_cost_upd_freq(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[133] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_mv_cost_upd_freq(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[134] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_deltaq_mode(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _BYTE __dst[600];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  if (*a2)
  {
    *a1 = "Delta Q mode can't be enabled in realtime only build.";
    return 8;
  }
  else
  {
    __dst[205] = *a2;
    result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_set_deltaq_strength(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[52] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_deltalf_mode(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[53] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_frame_periodic_boost_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[54] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_tune_content_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[56] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_cdf_update_mode(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[73] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_color_primaries(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[57] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_transfer_characteristics(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[58] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_matrix_coefficients(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[59] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_chroma_sample_position(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[60] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_color_range_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[61] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_noise_sensitivity_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[3] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_min_gf_interval_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[14] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_max_gf_interval_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[15] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_gf_min_pyr_height(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[16] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_gf_max_pyr_height(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[17] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_render_size_0(const char **a1, _DWORD **a2)
{
  void *v3;
  _DWORD *v4;
  uint64_t result;
  double v6;
  double v7;
  int32x4_t v8;
  double v9;
  int8x16_t v10;
  _DWORD __dst[150];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  v4 = *a2;
  __dst[62] = **a2;
  __dst[63] = v4[1];
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v6, v7, v8, v9, v10);
  }
  return result;
}

uint64_t ctrl_set_superblock_size(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[64] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_single_tile_decoding(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[65] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_vmaf_model_path(uint64_t a1, char **a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  const char *__dst[76];

  __dst[75] = *(const char **)MEMORY[0x24BDAC8D0];
  v3 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), 0x258uLL);
  result = allocate_and_set_string(*a2, "/usr/local/share/model/vmaf_v0.6.1.json", &__dst[10], (char *)(*(_QWORD *)(a1 + 2896) + 50984));
  if (!(_DWORD)result)
  {
    result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg(a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_set_partition_info_path(uint64_t a1, char **a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  const char *__dst[76];

  __dst[75] = *(const char **)MEMORY[0x24BDAC8D0];
  v3 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), 0x258uLL);
  result = allocate_and_set_string(*a2, ".", &__dst[11], (char *)(*(_QWORD *)(a1 + 2896) + 50984));
  if (!(_DWORD)result)
  {
    result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg(a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_enable_rate_guide_deltaq(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[24] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_rate_distribution_info(uint64_t a1, char **a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  const char *__dst[76];

  __dst[75] = *(const char **)MEMORY[0x24BDAC8D0];
  v3 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), 0x258uLL);
  result = allocate_and_set_string(*a2, "./rate_map.txt", &__dst[13], (char *)(*(_QWORD *)(a1 + 2896) + 50984));
  if (!(_DWORD)result)
  {
    result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg(a1, v5, v6, v7, v8, v9);
    }
  }
  return result;
}

uint64_t ctrl_set_film_grain_test_vector(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[68] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_film_grain_table(uint64_t a1, const char **a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  size_t v8;
  void *v9;
  char *v10;
  uint64_t result;
  double v12;
  double v13;
  int32x4_t v14;
  double v15;
  int8x16_t v16;
  char *__dst[76];

  __dst[75] = *(char **)MEMORY[0x24BDAC8D0];
  v3 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), 0x258uLL);
  v4 = *a2;
  if (*a2)
  {
    v5 = *(_QWORD *)(a1 + 2896);
    v6 = __dst[35];
    if (__dst[35])
    {
      if (!strcmp(*a2, __dst[35]))
        goto LABEL_12;
      free(*((void **)v6 - 1));
    }
    v7 = strlen(v4);
    v8 = v7 + 1;
    if (v7 + 1 > 0x1FFFFFFE9
      || (v9 = malloc_type_malloc(v7 + 24, 0x70F2D1FBuLL)) == 0
      || (v10 = (char *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0), *((_QWORD *)v10 - 1) = v9, !v10))
    {
      strcpy((char *)(v5 + 50984), "Failed to allocate memory for copying parameters.");
      return 2;
    }
    memcpy((void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF0), v4, v8);
  }
  else
  {
    v10 = 0;
  }
  __dst[35] = v10;
LABEL_12:
  result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg(a1, v12, v13, v14, v15, v16);
  }
  return result;
}

uint64_t ctrl_set_denoise_noise_level(const char **a1, int *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  float __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[110] = (float)*a2 / 10.0;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_denoise_block_size(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[111] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_enable_dnl_denoising(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[112] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_enable_motion_vector_unit_test_0(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[72] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_enable_fpmt_unit_test()
{
  return 4;
}

uint64_t ctrl_enable_ext_tile_debug(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[136] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_target_seq_level_idx(uint64_t a1, _DWORD *a2)
{
  void *v3;
  int v4;
  char *v5;
  uint64_t result;
  double v7;
  double v8;
  int32x4_t v9;
  double v10;
  int8x16_t v11;
  _BYTE __dst[600];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), sizeof(__dst));
  v4 = *a2 / 100;
  if ((*a2 - 3200) > 0xFFFFF31C)
  {
    __dst[v4 + 488] = *a2 - 100 * (((5243 * (__int16)*a2) >> 19) + (5243 * (__int16)*a2 < 0));
    result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
    if (!(_DWORD)result)
    {
      memcpy(v3, __dst, 0x258uLL);
      return update_encoder_cfg(a1, v7, v8, v9, v10, v11);
    }
  }
  else
  {
    v5 = (char *)(*(_QWORD *)(a1 + 2896) + 50984);
    snprintf(v5, 0xC8uLL, "Invalid operating point index: %d", v4);
    *(_QWORD *)a1 = v5;
    return 8;
  }
  return result;
}

uint64_t ctrl_set_tier_mask(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[130] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_min_cr(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[131] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_layer_id(uint64_t a1, int **a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  int v5;

  v2 = *(_DWORD **)(*(_QWORD *)(a1 + 2896) + 352);
  v3 = v2 + 159258;
  v2 += 66123;
  v5 = **a2;
  v4 = (*a2)[1];
  *v2 = v4;
  v2[1] = v5;
  *v3 = v5;
  v3[1] = v4;
  return 0;
}

uint64_t ctrl_set_svc_params(uint64_t a1, unsigned int **a2, double a3, double a4, int32x4_t a5, double a6, int8x16_t a7)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  unint64_t v19;
  void *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  int *v26;
  int *v27;
  int v28;
  int *v29;
  int v30;
  unsigned int *v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;

  v8 = *(_QWORD *)(a1 + 2896);
  v9 = *(_QWORD *)(v8 + 352);
  v10 = *a2;
  v11 = **a2;
  v12 = (*a2)[1];
  *(_DWORD *)(v8 + 50972) = v11;
  *(_DWORD *)(v8 + 50968) = v12;
  *(_DWORD *)(v9 + 637040) = v11;
  *(_DWORD *)(v9 + 637044) = v12;
  if (v11 <= 1 && v12 < 2)
  {
    if (*(_DWORD *)(v8 + 376))
      goto LABEL_36;
    return update_encoder_cfg(a1, a3, a4, a5, a6, a7);
  }
  *(_DWORD *)(v8 + 50960) = 1;
  v14 = v12 * v11;
  if ((int)v14 < 1)
  {
LABEL_12:
    v19 = *(_QWORD *)(v9 + 637360);
    if (v19)
    {
      if (*(_DWORD *)(v9 + 637368) >= (int)v14)
        goto LABEL_19;
      free(*(void **)(v19 - 8));
    }
    *(_DWORD *)(v9 + 637368) = 0;
    if (v14 > 0x9F8D5
      || (v20 = malloc_type_malloc(13144 * v14 + 23, 0x70F2D1FBuLL)) == 0
      || (v19 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v19 - 8) = v20, !v19))
    {
      *(_QWORD *)(v9 + 637360) = 0;
      return 2;
    }
    bzero((void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF0), 13144 * v14);
    *(_QWORD *)(v9 + 637360) = v19;
    *(_DWORD *)(v9 + 637368) = v14;
    v11 = *(_DWORD *)(v8 + 50972);
LABEL_19:
    if (v11)
    {
      v21 = *(_DWORD *)(v8 + 50968);
      if (!v21)
      {
        v24 = 0;
        v44 = *(_DWORD *)(v8 + 376);
        *(_QWORD *)(v9 + 264648) = 0;
        *(_QWORD *)(a1 + 1880) = 0;
        if (v44)
          goto LABEL_41;
        goto LABEL_44;
      }
      v22 = 0;
      v23 = 0;
      v24 = 0;
      do
      {
        v25 = &v10[v23];
        v26 = (int *)(v25 + 66);
        v27 = (int *)(v25 + 70);
        v28 = v22;
        v29 = (int *)(v10 + 106);
        v30 = v21;
        do
        {
          v31 = &v10[v28];
          v32 = v19 + 13144 * v28;
          *(_DWORD *)(v32 + 13092) = v31[2];
          *(_DWORD *)(v32 + 13096) = v31[34];
          v33 = *v26;
          if (*v26 <= 1)
            v33 = 1;
          *(_DWORD *)(v32 + 13056) = v33;
          v34 = *v27;
          if (*v27 <= 1)
            v34 = 1;
          *(_DWORD *)(v32 + 13060) = v34;
          v35 = v31[74];
          if (v35 <= 2147483)
            LODWORD(v36) = 1000 * v35;
          else
            LODWORD(v36) = 0x7FFFFFFF;
          v36 = (int)v36;
          *(_QWORD *)(v32 + 13048) = (int)v36;
          v38 = *v29++;
          v37 = v38;
          if (--v30)
            v36 = 0;
          v24 += v36;
          ++v28;
          *(_DWORD *)(v32 + 13040) = v37;
        }
        while (v30);
        ++v23;
        v22 += v21;
      }
      while (v23 != v11);
    }
    else
    {
      v24 = 0;
    }
    v39 = *(_DWORD *)(v8 + 376);
    *(_QWORD *)(v9 + 264648) = v24;
    *(_QWORD *)(a1 + 1880) = v24;
    if (v39)
    {
LABEL_41:
      v40 = *(_QWORD *)(v9 + 264632);
      v41 = *(_QWORD *)(v9 + 264640);
      v42 = *(_QWORD *)(v9 + 264648);
      *(_QWORD *)(v8 + 44136) = *(_QWORD *)(v9 + 264624) * v42 / 1000;
      if (v40)
        v43 = v40 * v42 / 1000;
      else
        v43 = v42 / 8;
      v45 = v41 * v42 / 1000;
      v46 = v42 / 8;
      if (v41)
        v47 = v45;
      else
        v47 = v46;
      *(_QWORD *)(v8 + 44144) = v43;
      *(_QWORD *)(v8 + 44152) = v47;
      v48 = *(_QWORD *)(v8 + 44368);
      if (v48 >= v47)
        v48 = v47;
      *(_QWORD *)(v8 + 44368) = v48;
      if (*(_QWORD *)(v8 + 44336) < v47)
        v47 = *(_QWORD *)(v8 + 44336);
      *(_QWORD *)(v8 + 44336) = v47;
      av1_update_layer_context_change_config(v9, v24, a3, a4, (__n128)a5);
      v49 = *(unsigned int *)(v9 + 637040);
      if (*(_DWORD *)(v9 + 239056) <= v49)
        goto LABEL_36;
      v50 = (uint64_t *)(*(_QWORD *)v9 + 44144);
      if (!*(_DWORD *)(*(_QWORD *)v9 + 50960))
      {
        v71 = *(_DWORD *)(v9 + 388440);
        v72 = *(_DWORD *)(v9 + 388452);
        if (v71 < v72 >> 1 || v71 > (3 * v72) >> 1)
        {
          *(_QWORD *)(v9 + 388496) = 0;
          v73 = *v50;
          v50[28] = *v50;
          v50[24] = v73;
        }
        goto LABEL_36;
      }
      if ((int)v49 < 1 || (v51 = *(unsigned int *)(v9 + 637044), (int)v51 < 1))
      {
LABEL_36:
        av1_check_fpmt_config(*(_QWORD *)(a1 + 2896), *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 264512);
        return 0;
      }
      v52 = 0;
      v53 = 0;
      v54 = *(_QWORD *)(v9 + 637360);
      v55 = 26288 * (*(_DWORD *)(v9 + 637044) >> 1);
      v56 = v54;
      while (1)
      {
        v57 = v54 + 13144 * (v53 * v51 + (v51 - 1));
        v58 = *(_DWORD *)(v57 + 96);
        v59 = *(_DWORD *)(v57 + 108);
        if (v58)
          v60 = v59 == 0;
        else
          v60 = 1;
        if (v60)
        {
          v61 = v54 + 13144 * v53 * v51;
          v58 = *(_DWORD *)(v61 + 96);
          v59 = *(_DWORD *)(v61 + 108);
        }
        if (v58 >= v59 >> 1 && v58 <= (3 * v59) >> 1)
          goto LABEL_60;
        if (v51 >= 2)
        {
          v64 = 0;
          do
          {
            v65 = (_QWORD *)(v56 + v64);
            v65[19] = 0;
            v65[1662] = 0;
            v66 = *(_QWORD *)(v56 + v64 + 8800);
            v67 = *(_QWORD *)(v56 + v64 + 21944);
            v65[1128] = v66;
            v65[2771] = v67;
            v65[1124] = v66;
            v65[2767] = v67;
            v64 += 26288;
          }
          while (v55 != v64);
          v63 = v51 & 0xFFFFFFFE;
          if (v63 == v51)
            goto LABEL_60;
        }
        else
        {
          v63 = 0;
        }
        v68 = v51 - v63;
        v69 = (_QWORD *)(v54 + 13144 * (v63 + v52));
        do
        {
          v69[19] = 0;
          v70 = v69[1100];
          v69[1128] = v70;
          v69[1124] = v70;
          v69 += 1643;
          --v68;
        }
        while (v68);
LABEL_60:
        ++v53;
        v56 += 13144 * v51;
        v52 += v51;
        if (v53 == v49)
          goto LABEL_36;
      }
    }
LABEL_44:
    *(_DWORD *)(v8 + 49136) = *(_DWORD *)(v8 + 50968) * v11 - 1;
    av1_init_layer_context(v9);
    return update_encoder_cfg(a1, a3, a4, a5, a6, a7);
  }
  v15 = (int *)(v10 + 34);
  v16 = v14;
  result = 8;
  while (1)
  {
    v18 = *(v15 - 32);
    if (v18 > 63)
      return 8;
    if (*v15 < 0 || *v15 > v18)
      return result;
    ++v15;
    if (!--v16)
      goto LABEL_12;
  }
}

uint64_t ctrl_set_svc_ref_frame_config_0(uint64_t a1, _DWORD **a2)
{
  _QWORD *v2;
  _DWORD *v3;
  _DWORD *v4;

  v2 = *(_QWORD **)(*(_QWORD *)(a1 + 2896) + 352);
  v3 = *a2;
  v4 = (_DWORD *)(*v2 + 84864);
  v4[22] = 1;
  *v4 = *v3;
  v4[7] = v3[7];
  v4[1] = v3[1];
  v4[8] = v3[8];
  v4[2] = v3[2];
  v4[9] = v3[9];
  v4[3] = v3[3];
  v4[10] = v3[10];
  v4[4] = v3[4];
  v4[11] = v3[11];
  v4[5] = v3[5];
  v4[12] = v3[12];
  v4[6] = v3[6];
  v4[13] = v3[13];
  v4[14] = v3[14];
  v4[15] = v3[15];
  v4[16] = v3[16];
  v4[17] = v3[17];
  v4[18] = v3[18];
  v4[19] = v3[19];
  v4[20] = v3[20];
  v4[21] = v3[21];
  *(_QWORD *)((char *)v2 + 637052) = 1;
  return 0;
}

uint64_t ctrl_set_svc_ref_frame_comp_pred(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *a2;
  v3 = (_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 2896) + 352) + 84960);
  *v3 = **a2;
  v3[1] = v2[1];
  v3[2] = v2[2];
  return 0;
}

uint64_t ctrl_set_vbr_corpus_complexity_lap(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[121] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_enable_sb_multipass_unit_test(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[137] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_enable_sb_qp_sweep(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[149] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_dv_cost_upd_freq(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[135] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_external_partition(uint64_t a1, _OWORD **a2)
{
  uint64_t v2;
  int *v3;
  __int128 v4;
  int v5;
  uint64_t result;
  int v7;
  __int128 v8;
  uint64_t v9;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352);
  v3 = (int *)(v2 + 637760);
  v4 = (*a2)[1];
  v8 = (*a2)[2];
  v9 = *((_QWORD *)*a2 + 6);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v2 + 263720) + 28);
  *(_OWORD *)(v2 + 637784) = **a2;
  *(_OWORD *)(v2 + 637800) = v4;
  *(_OWORD *)(v2 + 637816) = v8;
  *(_QWORD *)(v2 + 637832) = v9;
  *(_DWORD *)(v2 + 637768) = v5;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 637784))(v9, v2 + 637768, v2 + 637776);
  if ((_DWORD)result != 1)
  {
    if ((_DWORD)result == 2)
    {
      v7 = 0;
      v3[1] = 1;
    }
    else
    {
      v7 = 1;
    }
    result = 0;
    *v3 = v7;
  }
  return result;
}

uint64_t ctrl_set_enable_tx_size_search(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[119] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_loopfilter_control(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[140] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_skip_postproc_filtering(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  void *v4;
  uint64_t result;
  double v6;
  double v7;
  int32x4_t v8;
  double v9;
  int8x16_t v10;
  _DWORD __dst[150];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = a1 + 208;
  if (*(_DWORD *)(a1 + 208) != 2)
    return 4;
  v4 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), sizeof(__dst));
  __dst[141] = *a2;
  result = validate_config_1((const char **)a1, v2, (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v4, __dst, 0x258uLL);
    return update_encoder_cfg(a1, v6, v7, v8, v9, v10);
  }
  return result;
}

uint64_t ctrl_set_auto_intra_tools_off(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[146] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_rtc_external_rc(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 388560) = *a2;
  return 0;
}

uint64_t ctrl_set_quantizer_one_pass_0(uint64_t a1, int *a2)
{
  int v2;
  uint64_t result;
  void *v5;
  double v6;
  double v7;
  int32x4_t v8;
  double v9;
  int8x16_t v10;
  _BYTE __dst[600];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  if (*a2 > 0x3F)
    return 8;
  v5 = (void *)(a1 + 1112);
  memcpy(__dst, (const void *)(a1 + 1112), sizeof(__dst));
  *(_DWORD *)(a1 + 352) = v2;
  *(_DWORD *)(a1 + 348) = v2;
  __dst[204] = 0;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 388616) = 1;
  result = validate_config_1((const char **)a1, a1 + 208, (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v5, __dst, 0x258uLL);
    return update_encoder_cfg(a1, v6, v7, v8, v9, v10);
  }
  return result;
}

uint64_t ctrl_set_bitrate_one_pass_cbr(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  int v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 2896);
  v3 = *(_QWORD *)(v2 + 352);
  if (*(_DWORD *)(v3 + 265592)
    || *(_DWORD *)(*(_QWORD *)v3 + 23172)
    || *(_BYTE *)(v3 + 265616) != 1
    || *(_DWORD *)(v3 + 264816)
    || *(_DWORD *)(v3 + 264700) != 1
    || *(_DWORD *)(*(_QWORD *)v3 + 50960)
    || *(_DWORD *)(v2 + 328) != 1
    || *(_QWORD *)(v2 + 360))
  {
    return 8;
  }
  v5 = (uint64_t *)(v2 + 44136);
  v6 = *a2;
  *(_DWORD *)(a1 + 344) = *a2;
  v7 = 1000 * v6;
  v8 = *(_QWORD *)(v3 + 264632);
  v9 = *(_QWORD *)(v3 + 264624) * v7 / 1000;
  v10 = v8 * v7 / 1000;
  *(_QWORD *)(v3 + 264648) = v7;
  v11 = *(_QWORD *)(v3 + 264640);
  v12 = v8 == 0;
  v13 = v7 >> 3;
  if (v12)
    v10 = v7 >> 3;
  *v5 = v9;
  v5[1] = v10;
  v14 = (unsigned __int128)(v11 * v7 * (__int128)0x20C49BA5E353F7CFLL) >> 64;
  v15 = (v14 >> 7) + ((unint64_t)v14 >> 63);
  if (v11)
    v16 = v15;
  else
    v16 = v13;
  v5[2] = v16;
  v17 = v5[29];
  if (v17 >= v16)
    v17 = v16;
  v5[29] = v17;
  if (v5[25] < v16)
    v16 = v5[25];
  v5[25] = v16;
  av1_new_framerate(v3, *(double *)(v3 + 388624));
  if (*(_DWORD *)(v3 + 239056) <= *(_DWORD *)(v3 + 637040))
    return 0;
  v18 = (uint64_t *)(*(_QWORD *)v3 + 44144);
  if (*(_DWORD *)(*(_QWORD *)v3 + 50960))
  {
    av1_svc_check_reset_layer_rc_flag(v3);
    return 0;
  }
  v19 = *(_DWORD *)(v3 + 388440);
  v20 = *(_DWORD *)(v3 + 388452);
  if (v19 >= v20 >> 1 && v19 <= (3 * v20) >> 1)
    return 0;
  result = 0;
  *(_QWORD *)(v3 + 388496) = 0;
  v21 = *v18;
  v18[28] = *v18;
  v18[24] = v21;
  return result;
}

uint64_t ctrl_set_max_consec_frame_drop_cbr(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  _DWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352);
  v3 = *a2;
  if (*a2 < 0)
    return 8;
  result = 0;
  v5 = (_DWORD *)(v2 + 388476);
  *v5 = 0;
  v5[1] = v3;
  return result;
}

uint64_t ctrl_set_svc_frame_drop_mode(uint64_t a1, _DWORD *a2)
{
  _BOOL4 v2;

  v2 = *a2 > 1u;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 637400) = *a2;
  return (8 * v2);
}

uint64_t ctrl_get_quantizer_1(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*a2)
    return 8;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 239656);
  return result;
}

uint64_t ctrl_get_quantizer64_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = 0;
  do
  {
    v3 = v2 + 1;
    if (quantizer_to_qindex_0[v2] >= *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 239656))
      break;
  }
  while (v2++ != 63);
  result = 0;
  *(_DWORD *)*a2 = v3 - 1;
  return result;
}

uint64_t ctrl_get_loopfilter_level_0(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*a2)
    return 8;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 262064);
  return result;
}

uint64_t ctrl_get_reference_1(uint64_t a1, unsigned int **a2)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352);
  if (*(_BYTE *)(v2 + 264584))
    return 4;
  v4 = *a2;
  if (!*a2)
    return 8;
  v5 = *v4;
  if (v5 > 7)
    return 1;
  v6 = *(_QWORD *)(v2 + 8 * v5 + 239456);
  if (!v6)
    return 1;
  v7 = *(_DWORD *)(v6 + 1380);
  if (v7)
  {
    v4[2] = 258;
    v8 = *(_DWORD *)(v6 + 1376);
    v9 = 12;
    v10 = 2306;
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 1376);
    if (v8)
    {
      v4[2] = 261;
      v9 = 16;
      v10 = 2309;
    }
    else
    {
      v4[2] = 262;
      v9 = 24;
      v10 = 2310;
    }
  }
  *(_QWORD *)(v4 + 3) = *(_QWORD *)(v6 + 1388);
  v11 = *(unsigned __int8 *)(v6 + 1400);
  v4[5] = *(_DWORD *)(v6 + 1396);
  v4[6] = v11;
  *(_QWORD *)(v4 + 7) = *(_QWORD *)(v6 + 1404);
  v4[11] = 8;
  v4[9] = *(_DWORD *)(v6 + 1248);
  v4[10] = *(_DWORD *)(v6 + 1256);
  v4[12] = *(_DWORD *)(v6 + 1264);
  v4[13] = *(_DWORD *)(v6 + 1272);
  *((_QWORD *)v4 + 7) = *(_QWORD *)(v6 + 1412);
  v4[16] = v8;
  v4[17] = v7;
  *((_QWORD *)v4 + 9) = *(_QWORD *)(v6 + 1288);
  *((_QWORD *)v4 + 10) = *(_QWORD *)(v6 + 1296);
  *((_QWORD *)v4 + 11) = *(_QWORD *)(v6 + 1304);
  v4[24] = *(_DWORD *)(v6 + 1280);
  v4[25] = *(_DWORD *)(v6 + 1284);
  v4[26] = *(_DWORD *)(v6 + 1284);
  if ((*(_BYTE *)(v6 + 1424) & 8) != 0)
  {
    v9 *= 2;
    v4[2] = v10;
    v4[11] = *(_DWORD *)(v6 + 1384);
    *((_QWORD *)v4 + 9) = 2 * *(_QWORD *)(v6 + 1288);
    *((_QWORD *)v4 + 10) = 2 * *(_QWORD *)(v6 + 1296);
    *((_QWORD *)v4 + 11) = 2 * *(_QWORD *)(v6 + 1304);
    v4[24] = 2 * *(_DWORD *)(v6 + 1280);
    v4[25] = 2 * *(_DWORD *)(v6 + 1284);
    v4[26] = 2 * *(_DWORD *)(v6 + 1284);
  }
  result = 0;
  v4[30] = v9;
  v12 = *(_QWORD *)(v6 + 1344);
  *((_QWORD *)v4 + 17) = 0;
  *((_QWORD *)v4 + 18) = v12;
  *((_QWORD *)v4 + 19) = 0;
  *((_QWORD *)v4 + 14) = *(_QWORD *)(v6 + 1368);
  *((_QWORD *)v4 + 20) = 0;
  return result;
}

uint64_t ctrl_get_active_map_0(uint64_t a1, int8x16_t ***a2)
{
  if (*a2)
    return 8
         * (av1_get_active_map(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352), **a2, *((_DWORD *)*a2 + 2), *((_DWORD *)*a2 + 3)) != 0);
  else
    return 8;
}

uint64_t ctrl_get_new_frame_image(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 264584);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 267104);
  if (!v4 || *v3)
    return 1;
  v6 = (uint64_t *)(v4 + 1388);
  v7 = *(_DWORD *)(v4 + 1248);
  v8 = *(_DWORD *)(v4 + 1256);
  v9 = *(_DWORD *)(v4 + 1264);
  v10 = *(_DWORD *)(v4 + 1272);
  v11 = *(_DWORD *)(v4 + 1280);
  v12 = *(_DWORD *)(v4 + 1284);
  v13 = *(_QWORD *)(v4 + 1288);
  v14 = *(_QWORD *)(v4 + 1296);
  v15 = *(_QWORD *)(v4 + 1304);
  v16 = *(_QWORD *)(v4 + 1344);
  v17 = *(_QWORD *)(v4 + 1368);
  v18 = *(_QWORD *)(v4 + 1376);
  v19 = *(_DWORD *)(v4 + 1384);
  v20 = *(_DWORD *)(v4 + 1396);
  v21 = *(unsigned __int8 *)(v4 + 1400);
  v22 = HIDWORD(v18);
  v23 = *(_DWORD *)(v4 + 1424);
  v24 = *(_QWORD *)(v4 + 1404);
  *(_QWORD *)&v25 = *(_QWORD *)(v4 + 1412);
  *((_QWORD *)&v25 + 1) = v18;
  v26 = v18;
  if ((_DWORD)v18)
    v27 = 261;
  else
    v27 = 262;
  if ((_DWORD)v18)
    v28 = 16;
  else
    v28 = 24;
  if (HIDWORD(v18))
    v29 = 258;
  else
    v29 = v27;
  if (HIDWORD(v18))
    v30 = 12;
  else
    v30 = v28;
  v31 = *v6;
  *(_DWORD *)v2 = v29;
  *(_QWORD *)(v2 + 4) = v31;
  *(_DWORD *)(v2 + 12) = v20;
  *(_DWORD *)(v2 + 16) = v21;
  *(_QWORD *)(v2 + 20) = v24;
  *(_DWORD *)(v2 + 28) = v7;
  *(_DWORD *)(v2 + 32) = v8;
  *(_DWORD *)(v2 + 36) = 8;
  *(_DWORD *)(v2 + 40) = v9;
  *(_DWORD *)(v2 + 44) = v10;
  *(_OWORD *)(v2 + 48) = v25;
  *(_QWORD *)(v2 + 64) = v13;
  *(_QWORD *)(v2 + 72) = v14;
  *(_QWORD *)(v2 + 80) = v15;
  *(_DWORD *)(v2 + 88) = v11;
  *(_DWORD *)(v2 + 92) = v12;
  *(_DWORD *)(v2 + 96) = v12;
  if ((v23 & 8) != 0)
  {
    if (v26)
      v32 = 2309;
    else
      v32 = 2310;
    if (v22)
      v33 = 2306;
    else
      v33 = v32;
    *(_DWORD *)v2 = v33;
    *(_DWORD *)(v2 + 36) = v19;
    *(_QWORD *)(v2 + 64) = 2 * v13;
    *(_QWORD *)(v2 + 72) = 2 * v14;
    v30 *= 2;
    *(_QWORD *)(v2 + 80) = 2 * v15;
    v34 = 2 * v12;
    *(_DWORD *)(v2 + 88) = 2 * v11;
    *(_DWORD *)(v2 + 92) = v34;
    *(_DWORD *)(v2 + 96) = v34;
  }
  result = 0;
  *(_DWORD *)(v2 + 112) = v30;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = v16;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 104) = v17;
  return result;
}

uint64_t ctrl_copy_new_frame_image(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[3];
  __int128 v35;
  _OWORD v36[12];
  _QWORD *v37;

  v37 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352);
  v4 = *(_OWORD **)(v3 + 267104);
  if (!v4 || *(_BYTE *)(v3 + 264584))
    return 1;
  v6 = v4[87];
  v36[8] = v4[86];
  v36[9] = v6;
  v7 = v4[89];
  v36[10] = v4[88];
  v36[11] = v7;
  v8 = v4[83];
  v36[4] = v4[82];
  v36[5] = v8;
  v9 = v4[85];
  v36[6] = v4[84];
  v36[7] = v9;
  v10 = v4[79];
  v36[0] = v4[78];
  v36[1] = v10;
  v11 = v4[81];
  v36[2] = v4[80];
  v36[3] = v11;
  v35 = 0u;
  memset(v34, 0, sizeof(v34));
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v12 = *(_QWORD *)(v2 + 64);
  v13 = *(_QWORD *)(v2 + 72);
  *((_QWORD *)&v28 + 1) = v12;
  *(_QWORD *)&v29 = v13;
  v14 = *(_QWORD *)(v2 + 80);
  *((_QWORD *)&v29 + 1) = v14;
  v15 = *(_DWORD *)(v2 + 40);
  v16 = *(_DWORD *)(v2 + 44);
  *(_QWORD *)((char *)&v34[2] + 4) = *(_QWORD *)(v2 + 48);
  v17 = *(_DWORD *)(v2 + 32);
  v18 = *(_DWORD *)(v2 + 56);
  v19 = *(_DWORD *)(v2 + 60);
  LODWORD(v26) = *(_DWORD *)(v2 + 28);
  DWORD1(v26) = (v18 + v26) >> v18;
  DWORD2(v26) = v17;
  HIDWORD(v26) = (v19 + v17) >> v19;
  LODWORD(v27) = v15;
  DWORD1(v27) = (v18 + v15) >> v18;
  DWORD2(v27) = v16;
  HIDWORD(v27) = (v19 + v16) >> v19;
  v20 = *(_DWORD *)(v2 + 88);
  v21 = *(_DWORD *)(v2 + 92);
  *(_QWORD *)&v28 = __PAIR64__(v21, v20);
  *(_QWORD *)((char *)v34 + 12) = *(_QWORD *)(v2 + 4);
  DWORD1(v34[1]) = *(_DWORD *)(v2 + 12);
  BYTE8(v34[1]) = *(_DWORD *)(v2 + 16);
  *(_QWORD *)((char *)&v34[1] + 12) = *(_QWORD *)(v2 + 20);
  if ((*(_BYTE *)(v2 + 1) & 8) != 0)
  {
    *((_QWORD *)&v28 + 1) = v12 >> 1;
    *(_QWORD *)&v29 = v13 >> 1;
    *((_QWORD *)&v29 + 1) = v14 >> 1;
    v20 >>= 1;
    LODWORD(v28) = v20;
    DWORD1(v28) = v21 >> 1;
    v22 = 8;
  }
  else
  {
    v22 = 0;
  }
  LODWORD(v35) = v22;
  v23 = (*(_DWORD *)(v2 + 28) + 31) & 0xFFFFFFE0;
  v24 = __OFSUB__(v20, v23);
  v25 = v20 - v23;
  if (v25 < 0 != v24)
    ++v25;
  LODWORD(v33) = (v25 >> 1) & ~(v25 >> 31);
  *(_QWORD *)&v34[0] = *(_QWORD *)(v2 + 56);
  *((_QWORD *)&v35 + 1) = *(_QWORD *)(v2 + 152);
  return av1_copy_new_frame_enc(v3 + 239040, (uint64_t)v36, &v26);
}

uint64_t ctrl_set_chroma_subsampling_x(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[113] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_set_chroma_subsampling_y(const char **a1, _DWORD *a2)
{
  void *v3;
  uint64_t result;
  double v5;
  double v6;
  int32x4_t v7;
  double v8;
  int8x16_t v9;
  _DWORD __dst[150];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v3 = a1 + 139;
  memcpy(__dst, a1 + 139, sizeof(__dst));
  __dst[114] = *a2;
  result = validate_config_1(a1, (uint64_t)(a1 + 26), (uint64_t)__dst);
  if (!(_DWORD)result)
  {
    memcpy(v3, __dst, 0x258uLL);
    return update_encoder_cfg((uint64_t)a1, v5, v6, v7, v8, v9);
  }
  return result;
}

uint64_t ctrl_get_seq_level_idx(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v8;
  int v9;
  uint64_t v10;
  int v11;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 2896);
  if ((*(_DWORD *)(v3 + 49136) & 0x80000000) == 0)
  {
    v4 = 0;
    v11 = *(unsigned __int8 *)(v3 + 49081);
    v5 = *(char *)(v3 + 49093);
    do
    {
      *(_DWORD *)(v2 + 4 * v4) = 31;
      if (((*(_DWORD *)(v3 + 23208) >> v4) & 1) != 0)
      {
        v8 = 0;
        v9 = *(unsigned __int8 *)(v3 + v4 + 49341);
        v10 = *(_QWORD *)(v3 + 8 * v4 + 23216);
        while ((v8 & 0xFA) == 2
             || v8 - 20 < 8
             || v8 - 10 < 2
             || check_level_constraints(v10, v8, v9, v11, v5, 1) != 21)
        {
          if (++v8 == 28)
            goto LABEL_5;
        }
        *(_DWORD *)(v2 + 4 * v4) = v8;
      }
LABEL_5:
      ;
    }
    while (v4++ < *(int *)(v3 + 49136));
  }
  return 0;
}

uint64_t ctrl_get_baseline_gf_interval(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*a2)
    return 8;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(*(_QWORD *)(a1 + 2896) + 44120);
  return result;
}

uint64_t ctrl_get_target_seq_level_idx(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 2896);
  v4 = (int *)(v3 + 49136);
  if ((*(_DWORD *)(v3 + 49136) & 0x80000000) == 0)
  {
    v5 = 0;
    v6 = (_DWORD *)(v3 + 23208);
    v7 = v3 + 23176;
    do
    {
      *(_DWORD *)(v2 + 4 * v5) = 31;
      if (((*v6 >> v5) & 1) != 0)
        *(_DWORD *)(v2 + 4 * v5) = *(unsigned __int8 *)(v7 + v5);
    }
    while (v5++ < *v4);
  }
  return 0;
}

uint64_t ctrl_get_num_operating_points(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!*a2)
    return 8;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(*(_QWORD *)(a1 + 2896) + 49136) + 1;
  return result;
}

uint64_t ctrl_get_luma_cdef_strength(uint64_t a1, _OWORD **a2)
{
  _OWORD *v2;
  uint64_t result;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v2 = *a2;
  if (!*a2)
    return 8;
  result = 0;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 2896) + 352) + 262496;
  v6 = *(_OWORD *)(v5 + 120);
  v7 = *(_OWORD *)(v5 + 136);
  v8 = *(_OWORD *)(v5 + 168);
  v2[2] = *(_OWORD *)(v5 + 152);
  v2[3] = v8;
  *v2 = v6;
  v2[1] = v7;
  return result;
}

uint64_t update_encoder_cfg(uint64_t a1, double a2, double a3, int32x4_t a4, double a5, int8x16_t a6)
{
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int *v15;
  unsigned __int8 v17;

  v7 = a1 + 1744;
  v8 = (unsigned int *)(a1 + 1744);
  set_encoder_config_0(a1 + 1744, (int *)(a1 + 208), a1 + 1112, a2, a3, a4, a5, a6);
  av1_check_fpmt_config(*(_QWORD *)(a1 + 2896), v7);
  v17 = 0;
  av1_change_config_seq(*(_QWORD *)(a1 + 2896), v7, &v17);
  v9 = *(_QWORD *)(a1 + 2896);
  if (*(int *)(v9 + 328) < 1)
  {
LABEL_5:
    v14 = *(_QWORD *)(v9 + 360);
    if (v14)
    {
      v15 = *(int **)(v14 + 239088);
      if (setjmp(v15 + 53))
      {
        v15[52] = 0;
        return *v15;
      }
      v15[52] = 1;
      av1_change_config(v14, v8, v17);
      v15[52] = 0;
    }
    return 0;
  }
  else
  {
    v10 = 0;
    v11 = *(_QWORD *)(a1 + 2896);
    while (1)
    {
      v12 = *(_QWORD *)(v11 + 8 * v10);
      v13 = *(int **)(v12 + 239088);
      if (setjmp(v13 + 53))
        break;
      v13[52] = 1;
      av1_change_config(v12, v8, v17);
      v13[52] = 0;
      ++v10;
      v11 = *(_QWORD *)(a1 + 2896);
      v9 = v11;
      if (v10 >= *(int *)(v11 + 328))
        goto LABEL_5;
    }
    v13[52] = 0;
    return *v13;
  }
}

uint64_t allocate_and_set_string(char *__s, char *__s2, const char **a3, char *a4)
{
  char *v8;
  uint64_t result;
  size_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;

  if (!__s)
  {
    strcpy(a4, "Null pointer given to a string parameter.");
    return 8;
  }
  v8 = (char *)*a3;
  if (*a3)
  {
    result = strcmp(__s, *a3);
    if (!(_DWORD)result)
      return result;
    if (v8 != __s2)
      free(*((void **)v8 - 1));
  }
  if (__s2 && (result = strcmp(__s, __s2), !(_DWORD)result))
  {
    *a3 = __s2;
  }
  else
  {
    v10 = strlen(__s);
    v11 = v10 + 1;
    if (v10 + 1 <= 0x1FFFFFFE9
      && (v12 = malloc_type_malloc(v10 + 24, 0x70F2D1FBuLL)) != 0
      && (v13 = ((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0, *(_QWORD *)(v13 - 8) = v12, v13))
    {
      memcpy((void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF0), __s, v11);
      result = 0;
      *a3 = (const char *)v13;
    }
    else
    {
      strcpy(a4, "Failed to allocate memory for copying parameters.");
      return 2;
    }
  }
  return result;
}

uint64_t get_src_border_in_pixels(uint64_t a1, int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  signed int v9;

  if (*(_BYTE *)(a1 + 265616) != 1 || *(_BYTE *)(a1 + 264744) || *(_DWORD *)(a1 + 264760))
    return *(unsigned int *)(a1 + 265544);
  v3 = 4 << mi_size_wide_log2[a2];
  v4 = v3 - 1;
  v5 = *(_DWORD *)(a1 + 264536);
  v6 = v3 - 1 + v5;
  v7 = -v3;
  v8 = v6 & v7;
  v9 = (((v4 + *(_DWORD *)(a1 + 264540)) & v7) - *(_DWORD *)(a1 + 264540) + 31) & 0xFFFFFFE0;
  if ((int)((v8 - v5 + 31) & 0xFFFFFFE0) > v9)
    v9 = (v8 - v5 + 31) & 0xFFFFFFE0;
  if (v9 <= 32)
    return 32;
  else
    return v9;
}

void free_thread_data(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;

  v1 = a1 + 74216;
  v2 = *(_DWORD *)(a1 + 74216);
  v3 = *(unsigned __int8 *)(a1 + 49101);
  if (*(_BYTE *)(a1 + 49101))
    v4 = 1;
  else
    v4 = 3;
  if (v2 >= 2)
  {
    v6 = *(_DWORD *)(a1 + 74224);
    v5 = *(_DWORD *)(a1 + 74228);
    if (v5 >= v2)
      v5 = *(_DWORD *)(a1 + 74216);
    if (v6 >= v2)
      v6 = *(_DWORD *)(a1 + 74216);
    v57 = *(unsigned __int8 *)(a1 + 49100);
    v59 = v6;
    v58 = v5;
    v7 = 1;
    for (i = 464; ; i += 456)
    {
      v9 = (_QWORD *)(*(_QWORD *)(v1 + 64) + i);
      v10 = v9[1];
      *v9 = v10;
      if (v10)
        break;
LABEL_11:
      if (++v7 >= v2)
        return;
    }
    v11 = (_QWORD *)(v10 + 148248);
    v12 = *(_QWORD *)(v10 + 148400);
    if (v12)
      free(*(void **)(v12 - 8));
    v13 = *(_QWORD *)(v10 + 148280);
    if (v13)
      free(*(void **)(v13 - 8));
    v14 = *(_QWORD *)(v10 + 148328);
    if (v14)
      free(*(void **)(v14 - 8));
    v15 = *(_QWORD *)(v10 + 148288);
    if (v15)
      free(*(void **)(v15 - 8));
    v16 = *(_QWORD *)(v10 + 148296);
    if (v16)
      free(*(void **)(v16 - 8));
    v17 = *(_QWORD *)(v10 + 148304);
    if (v17)
      free(*(void **)(v17 - 8));
    v18 = *(_QWORD *)(v10 + 148312);
    if (v18)
      free(*(void **)(v18 - 8));
    v19 = *(_QWORD *)(v10 + 148320);
    if (v19)
      free(*(void **)(v19 - 8));
    *(_QWORD *)(v10 + 148320) = 0;
    *(_OWORD *)(v10 + 148288) = 0u;
    *(_OWORD *)(v10 + 148304) = 0u;
    v20 = *(_QWORD *)(v10 + 148344);
    if (v20)
      free(*(void **)(v20 - 8));
    v21 = *(_QWORD *)(v10 + 148352);
    if (v21)
      free(*(void **)(v21 - 8));
    v22 = *(_QWORD *)(v10 + 152704);
    if (v22)
      free(*(void **)(v22 - 8));
    v23 = *(_QWORD *)(v10 + 152712);
    if (v23)
      free(*(void **)(v23 - 8));
    v24 = *(_QWORD *)(v10 + 148256);
    if (v24)
      free(*(void **)(v24 - 8));
    v25 = *(_QWORD *)(v10 + 148264);
    if (v25)
      free(*(void **)(v25 - 8));
    v26 = *(_QWORD *)(v10 + 148272);
    if (v26)
      free(*(void **)(v26 - 8));
    if (*v11)
      free(*(void **)(*v11 - 8));
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v10 + 148264) = 0u;
    v27 = *(_QWORD *)(v10 + 148408);
    if (v27)
      free(*(void **)(v27 - 8));
    v28 = (_QWORD *)(v10 + 146536);
    v29 = *(_QWORD *)(v10 + 148216);
    if (v29)
      free(*(void **)(v29 - 8));
    *(_QWORD *)(v10 + 148216) = 0;
    v30 = *(_QWORD *)(v10 + 148224);
    if (v30)
      free(*(void **)(v30 - 8));
    *(_QWORD *)(v10 + 148224) = 0;
    v31 = *(_QWORD *)(v10 + 148232);
    if (v31)
      free(*(void **)(v31 - 8));
    *(_QWORD *)(v10 + 148232) = 0;
    v32 = *(_QWORD *)(v10 + 148240);
    if (v32)
      free(*(void **)(v32 - 8));
    *(_QWORD *)(v10 + 148240) = 0;
    v33 = *(_QWORD *)(v10 + 146672);
    if (v33)
      free(*(void **)(v33 - 8));
    *(_QWORD *)(v10 + 146672) = 0;
    v34 = *(_QWORD *)(v10 + 146680);
    if (v34)
      free(*(void **)(v34 - 8));
    *(_QWORD *)(v10 + 146680) = 0;
    v35 = *(_QWORD *)(v10 + 148120);
    if (v35)
      free(*(void **)(v35 - 8));
    av1_free_pmc(*(_QWORD **)(v10 + 148424), v4);
    *(_QWORD *)(v10 + 148424) = 0;
    av1_free_shared_coeff_buffer((_QWORD *)(v10 + 148128));
    v36 = *(_QWORD *)(v10 + 148200);
    if (v36)
      free(*(void **)(v36 - 8));
    *(_QWORD *)(v10 + 148200) = 0;
    if (v7 < v59)
    {
      if (v57)
        *(_QWORD *)(v10 + 148472) *= 2;
      v46 = *(_QWORD *)(v10 + 148448);
      if (v46)
        free(*(void **)(v46 - 8));
      *(_QWORD *)(v10 + 148448) = 0;
      v47 = *(_QWORD *)(v10 + 148456);
      if (v47)
        free(*(void **)(v47 - 8));
      *(_QWORD *)(v10 + 148456) = 0;
      v48 = *(_QWORD *)(v10 + 148464);
      if (v48)
        free(*(void **)(v48 - 8));
      *(_QWORD *)(v10 + 148464) = 0;
      v49 = *(_QWORD *)(v10 + 148472);
      if (v49)
        free(*(void **)(v49 - 8));
      *(_QWORD *)(v10 + 148472) = 0;
      if (v7 >= v58)
      {
LABEL_65:
        v37 = *(_QWORD *)(v10 + 152696);
        if (!v37)
          goto LABEL_67;
        goto LABEL_66;
      }
    }
    else if (v7 >= v58)
    {
      goto LABEL_65;
    }
    v50 = *(_QWORD *)(v10 + 148480);
    if (v50)
      free(*(void **)(v50 - 8));
    *(_QWORD *)(v10 + 148480) = 0;
    v51 = *(_QWORD *)(v10 + 148488);
    if (v51)
      free(*(void **)(v51 - 8));
    *(_QWORD *)(v10 + 148488) = 0;
    v52 = *(_QWORD *)(v10 + 148496);
    if (v52)
      free(*(void **)(v52 - 8));
    *(_QWORD *)(v10 + 148496) = 0;
    v53 = *(_QWORD *)(v10 + 148504);
    if (v53)
      free(*(void **)(v53 - 8));
    *(_QWORD *)(v10 + 148504) = 0;
    v54 = *(_QWORD *)(v10 + 148512);
    if (v54)
      free(*(void **)(v54 - 8));
    *(_QWORD *)(v10 + 148512) = 0;
    v37 = *(_QWORD *)(v10 + 152696);
    if (!v37)
    {
LABEL_67:
      *(_QWORD *)(v10 + 152696) = 0;
      v38 = *(_QWORD *)(v10 + 152680);
      if (v38)
        free(*(void **)(v38 - 8));
      *(_QWORD *)(v10 + 152680) = 0;
      if (*v28)
        free(*(void **)(*v28 - 8));
      v39 = (_QWORD *)(v10 + 109712);
      *v28 = 0;
      v40 = *(_QWORD *)(v10 + 109728);
      if (v40)
        free(*(void **)(v40 - 8));
      *(_QWORD *)(v10 + 109728) = 0;
      if (*(_QWORD *)v10)
        free(*(void **)(*(_QWORD *)v10 - 8));
      *(_QWORD *)v10 = 0;
      if (v3)
      {
        v41 = *(_QWORD *)(v10 + 11184);
        if (!v41)
        {
LABEL_78:
          *(_QWORD *)(v10 + 11184) = 0;
          if (*v39)
            free(*(void **)(*v39 - 8));
          *v39 = 0;
          v42 = *(_QWORD *)(v10 + 146568);
          if (v42)
            free(*(void **)(v42 - 8));
          *(_QWORD *)(v10 + 146568) = 0;
          v43 = *(_QWORD *)(v10 + 146656);
          if (v43)
            free(*(void **)(v43 - 8));
          *(_QWORD *)(v10 + 146656) = 0;
          v44 = *(_QWORD *)(v10 + 146664);
          if (v44)
            free(*(void **)(v44 - 8));
          *(_QWORD *)(v10 + 146664) = 0;
          av1_free_pc_tree_recursive(*(char **)(v10 + 152720), v4, 0, 0, 0);
          *(_QWORD *)(v10 + 152720) = 0;
          v45 = *(_QWORD *)(v10 + 148360);
          if (v45)
            free(*(void **)(v45 - 8));
          *(_QWORD *)(v10 + 148360) = 0;
          free(*(void **)(v10 - 8));
          *v9 = 0;
          v9[1] = 0;
          v2 = *(_DWORD *)v1;
          goto LABEL_11;
        }
      }
      else
      {
        v55 = *(_QWORD *)(v10 + 136);
        if (v55)
          free(*(void **)(v55 - 8));
        *(_QWORD *)(v10 + 136) = 0;
        v56 = *(_QWORD *)(v10 + 272);
        if (v56)
          free(*(void **)(v56 - 8));
        *(_QWORD *)(v10 + 272) = 0;
        v41 = *(_QWORD *)(v10 + 11184);
        if (!v41)
          goto LABEL_78;
      }
      free(*(void **)(v41 - 8));
      goto LABEL_78;
    }
LABEL_66:
    free(*(void **)(v37 - 8));
    goto LABEL_67;
  }
}

uint64_t decoder_init_0(_QWORD *a1)
{
  uint64_t result;
  void *v3;
  unint64_t v4;
  _OWORD *v5;

  if (a1[6])
    return 0;
  v3 = malloc_type_malloc(0x6347uLL, 0x70F2D1FBuLL);
  if (!v3)
    return 2;
  v4 = ((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 - 8) = v3;
  if (!v4)
    return 2;
  bzero((void *)(((unint64_t)v3 + 23) & 0xFFFFFFFFFFFFFFF0), 0x6330uLL);
  a1[6] = v4;
  *(_QWORD *)(v4 + 8) = a1[4];
  *(_DWORD *)(v4 + 420) = 0;
  *(_DWORD *)(v4 + 220) = 1;
  v5 = (_OWORD *)a1[5];
  if (v5)
  {
    *(_OWORD *)(v4 + 208) = *v5;
    a1[5] = v4 + 208;
  }
  result = 0;
  *(_QWORD *)(v4 + 25344) = 0;
  *(_DWORD *)(v4 + 468) = 1;
  *(_DWORD *)(v4 + 452) = -1;
  *(_QWORD *)(v4 + 456) = 0xFFFFFFFFLL;
  return result;
}

uint64_t decoder_destroy_0(uint64_t a1)
{
  uint64_t v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void (*v7)(_QWORD *);
  pthread_mutex_t **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  pthread_mutex_t *v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)(a1 + 25072);
  if (v2)
  {
    off_253EA52E8((std::__fs::filesystem::recursive_directory_iterator *)off_253EA52E8, *(std::__fs::filesystem::recursive_directory_iterator **)(a1 + 25072));
    v3 = *(_QWORD ***)(v2 + 32);
    if (v3)
    {
      v4 = *v3;
      if (*v3)
      {
        v5 = v4 + 4986;
        v6 = v4[5075];
        if (v6)
          free(*(void **)(v6 - 8));
        v4[5075] = 0;
        v7 = (void (*)(_QWORD *))v4[1974];
        if (v7)
          v7(v4 + 1965);
        v8 = (pthread_mutex_t **)(v4 + 5147);
        av1_free_above_context_buffers(v4 + 5063);
        if (*v5)
          free(*(void **)(*v5 - 8));
        *v5 = 0;
        v9 = v4[4987];
        if (v9)
          free(*(void **)(v9 - 8));
        v4[4987] = 0;
        av1_free_cdef_buffers((uint64_t)(v4 + 1900), v4 + 5151, (uint64_t)v8);
        if (*v8)
        {
          pthread_mutex_destroy(*v8);
          if (*v8)
            free(*(void **)&(*v8)[-1].__opaque[48]);
        }
        av1_free_restoration_buffers(v4 + 1900);
        av1_decoder_remove((uint64_t)v4);
      }
      free(*(v3 - 1));
    }
  }
  v10 = *(_QWORD *)(a1 + 25360);
  if (v10)
  {
    if (*(_QWORD *)(a1 + 25344))
    {
      v11 = 0;
      v12 = a1 + 25248;
      do
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 25360) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 25360) + 64), v12);
        ++v11;
        v12 += 24;
      }
      while (v11 < *(_QWORD *)(a1 + 25344));
      v10 = *(_QWORD *)(a1 + 25360);
    }
    av1_free_ref_frame_buffers(v10);
    v13 = *(_QWORD *)(a1 + 25360);
    v14 = *(_DWORD *)(v13 + 104);
    v15 = *(_QWORD *)(v13 + 112);
    if (v14 < 1)
    {
      v19 = *(pthread_mutex_t **)(a1 + 25360);
      if (!v15)
      {
LABEL_29:
        *(_QWORD *)(v13 + 112) = 0;
        *(_DWORD *)(v13 + 104) = 0;
        pthread_mutex_destroy(v19);
        goto LABEL_30;
      }
    }
    else
    {
      v16 = 0;
      for (i = 0; i < v14; ++i)
      {
        v18 = *(_QWORD *)(v15 + v16);
        if (v18)
        {
          free(*(void **)(v18 - 8));
          v15 = *(_QWORD *)(v13 + 112);
          v14 = *(_DWORD *)(v13 + 104);
        }
        *(_QWORD *)(v15 + v16) = 0;
        v16 += 24;
      }
    }
    free(*(void **)(v15 - 8));
    v19 = *(pthread_mutex_t **)(a1 + 25360);
    goto LABEL_29;
  }
LABEL_30:
  v20 = *(_QWORD *)(a1 + 25072);
  if (v20)
    free(*(void **)(v20 - 8));
  v21 = *(_QWORD *)(a1 + 25360);
  if (v21)
    free(*(void **)(v21 - 8));
  aom_img_free((_QWORD *)(a1 + 248));
  free(*(void **)(a1 - 8));
  return 0;
}

uint64_t decoder_peek_si_0(unsigned __int8 *a1, int64_t a2, uint64_t a3)
{
  return decoder_peek_si_internal_0(a1, a2, a3, 0);
}

uint64_t decoder_get_si_0(uint64_t a1, uint64_t a2)
{
  __int128 v2;

  v2 = *(_OWORD *)(a1 + 224);
  *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 240);
  *(_OWORD *)a2 = v2;
  return 0;
}

uint64_t decoder_decode_0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t result;
  _DWORD *v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t i;
  void *v25;
  _OWORD *v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  void *v38;
  _QWORD *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  int v66;

  if (*(_QWORD *)(a1 + 25072))
  {
    v8 = *(_QWORD *)(a1 + 25360);
    pthread_mutex_lock((pthread_mutex_t *)v8);
    v9 = **(_QWORD **)(*(_QWORD *)(a1 + 25072) + 32);
    v10 = (unint64_t *)(v9 + 363864);
    v11 = *(_QWORD *)(v9 + 363864);
    if (v11)
    {
      v12 = 0;
      v13 = v9 + 363832;
      do
      {
        v14 = *(_QWORD *)(v13 + 8 * v12);
        if (v14)
        {
          if ((*(_DWORD *)v14)-- == 1)
          {
            if (*(_QWORD *)(v14 + 1224))
            {
              v16 = (_QWORD *)(v14 + 1224);
              (*(void (**)(_QWORD, uint64_t))(v8 + 80))(*(_QWORD *)(v8 + 64), v14 + 1224);
              v16[1] = 0;
              v16[2] = 0;
              *v16 = 0;
              v11 = *v10;
            }
          }
        }
        ++v12;
      }
      while (v12 < v11);
    }
    *v10 = 0;
    pthread_mutex_unlock((pthread_mutex_t *)v8);
    if (*(_QWORD *)(a1 + 25344))
    {
      v17 = 0;
      v18 = (_QWORD *)(a1 + 25248);
      do
      {
        (*(void (**)(_QWORD, _QWORD *))(v8 + 80))(*(_QWORD *)(v8 + 64), v18);
        ++v17;
        v18[1] = 0;
        v18[2] = 0;
        *v18 = 0;
        v18 += 3;
      }
      while (v17 < *(_QWORD *)(a1 + 25344));
    }
    *(_QWORD *)(a1 + 25344) = 0;
  }
  if (!a2 && !a3)
  {
    result = 0;
    *(_DWORD *)(a1 + 420) = 1;
    return result;
  }
  result = 8;
  if (a2 && a3)
  {
    v20 = (_DWORD *)(a1 + 25056);
    *(_DWORD *)(a1 + 420) = 0;
    if (*(_QWORD *)(a1 + 25072))
    {
      if (*v20)
        goto LABEL_22;
      goto LABEL_62;
    }
    *(_QWORD *)(a1 + 432) = 0;
    *(_DWORD *)(a1 + 25352) = 1;
    v25 = malloc_type_malloc(0x8FuLL, 0x70F2D1FBuLL);
    if (v25)
    {
      v26 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0);
      *((_QWORD *)v26 - 1) = v25;
      if (v26)
      {
        *(_QWORD *)((((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x70) = 0;
        *(_OWORD *)((((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x50) = 0u;
        *(_OWORD *)((((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x60) = 0u;
        *(_OWORD *)((((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x30) = 0u;
        *(_OWORD *)((((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x40) = 0u;
        *(_OWORD *)((((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x10) = 0u;
        *(_OWORD *)((((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x20) = 0u;
        *v26 = 0u;
        *(_QWORD *)(a1 + 25360) = v26;
        *(_BYTE *)((((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF0) + 0x60) = 16;
        v27 = malloc_type_malloc(0x58C97uLL, 0x70F2D1FBuLL);
        if (v27)
        {
          v28 = ((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF0;
          *(_QWORD *)(v28 - 8) = v27;
          if (v28)
          {
            bzero((void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF0), 0x58C80uLL);
            v29 = *(_QWORD *)(a1 + 25360);
            *(_QWORD *)(v29 + 88) = v28;
            if (pthread_mutex_init((pthread_mutex_t *)v29, 0))
            {
              v30 = *(_QWORD *)(a1 + 25360);
              v31 = *(_QWORD *)(v30 + 88);
              if (v31)
              {
                free(*(void **)(v31 - 8));
                v30 = *(_QWORD *)(a1 + 25360);
              }
              *(_QWORD *)(v30 + 88) = 0;
              *(_BYTE *)(v30 + 96) = 0;
              free(*(void **)(v30 - 8));
              *(_QWORD *)(a1 + 25360) = 0;
              v32 = "Failed to allocate buffer pool mutex";
              goto LABEL_58;
            }
            v36 = malloc_type_malloc(0x4FuLL, 0x70F2D1FBuLL);
            if (v36)
            {
              v37 = ((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF0;
              *(_QWORD *)(v37 - 8) = v36;
              *(_QWORD *)(a1 + 25072) = v37;
              if (v37)
              {
                g_worker_interface_0(((unint64_t)v36 + 23) & 0xFFFFFFFFFFFFFFF0);
                *(_QWORD *)(v37 + 16) = "aom frameworker";
                v38 = malloc_type_malloc(0x5FuLL, 0x70F2D1FBuLL);
                if (v38)
                {
                  v39 = (_QWORD *)(((unint64_t)v38 + 39) & 0xFFFFFFFFFFFFFFE0);
                  *(v39 - 1) = v38;
                  *(_QWORD *)(v37 + 32) = v39;
                  if (v39)
                  {
                    v40 = av1_decoder_create(*(_QWORD *)(a1 + 25360));
                    *v39 = v40;
                    if (v40)
                    {
                      v39[5] = 0;
                      v41 = *(_DWORD *)(a1 + 208);
                      *((_DWORD *)v40 + 90969) = *(_DWORD *)(a1 + 220);
                      *((_DWORD *)v40 + 90970) = v41;
                      *((_DWORD *)v40 + 90971) = *(_DWORD *)(a1 + 424);
                      *((_DWORD *)v40 + 10121) = *(_DWORD *)(a1 + 460);
                      *((_DWORD *)v40 + 97215) = *v20;
                      *((_QWORD *)v40 + 45488) = *(_QWORD *)(a1 + 452);
                      v42 = *(_DWORD *)(a1 + 25064);
                      *((_DWORD *)v40 + 90980) = *(_DWORD *)(a1 + 25060);
                      *((_DWORD *)v40 + 90956) = v42;
                      *((_QWORD *)v40 + 45498) = *(_QWORD *)(a1 + 464);
                      *((_QWORD *)v40 + 48612) = 0;
                      *(_QWORD *)(v37 + 24) = frame_worker_hook;
                      v43 = **(_QWORD **)(*(_QWORD *)(a1 + 25072) + 32);
                      v44 = *(_QWORD **)(v43 + 40496);
                      *(_QWORD *)(v43 + 15432) = 0;
                      *(_DWORD *)(v43 + 15712) = *(_DWORD *)(a1 + 440);
                      *(_QWORD *)(v43 + 388852) = *(_QWORD *)(a1 + 444);
                      v45 = *(_QWORD *)(a1 + 25376);
                      if (v45 && (v46 = *(_QWORD *)(a1 + 25384)) != 0)
                      {
                        v44[9] = v45;
                        v44[10] = v46;
                        v47 = *(_QWORD **)(a1 + 25368);
                      }
                      else
                      {
                        v44[9] = av1_get_frame_buffer;
                        v44[10] = av1_release_frame_buffer;
                        v47 = v44 + 13;
                        if (av1_alloc_internal_frame_buffers((uint64_t)(v44 + 13)))
                          aom_internal_error(v43 + 390860, 2, "Failed to initialize internal frame buffers");
                      }
                      v44[8] = v47;
                      if (*v20)
                      {
LABEL_22:
                        v21 = 0;
                        v22 = 0;
                        v23 = 8;
                        if (a3 < 8)
                          v23 = a3;
                        ++a2;
                        for (i = a3 - 1; ; --i)
                        {
                          v22 |= (unint64_t)(*(_BYTE *)(a2 - 1) & 0x7F) << v21;
                          if ((*(_BYTE *)(a2 - 1) & 0x80) == 0)
                            break;
                          ++a2;
                          v21 += 7;
                          if (!--v23)
                            return 7;
                        }
                        if (HIDWORD(v22))
                          v33 = 1;
                        else
                          v33 = v22 > i;
                        if (v33)
                          return 7;
                        v34 = a2 + v22;
                        if (a2 < a2 + v22)
                          goto LABEL_65;
                        return 0;
                      }
LABEL_62:
                      v34 = a2 + a3;
                      if (a2 < a2 + a3)
                      {
                        while (1)
                        {
LABEL_65:
                          v48 = *v20;
                          if (*v20)
                          {
                            if (!a2)
                              return 7;
                            v49 = v34 - a2;
                            if (v34 - a2 >= 8)
                              v49 = 8;
                            if (!v49)
                              return 7;
                            v50 = *(_BYTE *)a2 & 0x7F;
                            if ((*(_BYTE *)a2 & 0x80) != 0)
                            {
                              if (v49 == 1)
                                return 7;
                              v52 = *(char *)(a2 + 1);
                              v50 |= (unint64_t)(v52 & 0x7F) << 7;
                              if (v52 < 0)
                              {
                                if (v49 == 2)
                                  return 7;
                                v53 = *(char *)(a2 + 2);
                                v50 |= (unint64_t)(v53 & 0x7F) << 14;
                                if (v53 < 0)
                                {
                                  if (v49 == 3)
                                    return 7;
                                  v54 = *(char *)(a2 + 3);
                                  v50 |= (unint64_t)(v54 & 0x7F) << 21;
                                  if (v54 < 0)
                                  {
                                    if (v49 == 4)
                                      return 7;
                                    v55 = *(char *)(a2 + 4);
                                    v50 |= (unint64_t)(v55 & 0x7F) << 28;
                                    if (v55 < 0)
                                    {
                                      if (v49 == 5)
                                        return 7;
                                      v56 = *(char *)(a2 + 5);
                                      v50 |= (unint64_t)(v56 & 0x7F) << 35;
                                      if (v56 < 0)
                                      {
                                        if (v49 == 6)
                                          return 7;
                                        v57 = *(char *)(a2 + 6);
                                        v50 |= (unint64_t)(v57 & 0x7F) << 42;
                                        if (v57 < 0)
                                        {
                                          if (v49 == 7)
                                            return 7;
                                          v58 = *(char *)(a2 + 7);
                                          if (v58 < 0)
                                            return 7;
                                          v50 |= (unint64_t)(v58 & 0x7F) << 49;
                                          v51 = 8;
                                        }
                                        else
                                        {
                                          v51 = 7;
                                        }
                                      }
                                      else
                                      {
                                        v51 = 6;
                                      }
                                    }
                                    else
                                    {
                                      v51 = 5;
                                    }
                                  }
                                  else
                                  {
                                    v51 = 4;
                                  }
                                }
                                else
                                {
                                  v51 = 3;
                                }
                              }
                              else
                              {
                                v51 = 2;
                              }
                            }
                            else
                            {
                              v51 = 1;
                            }
                            result = 7;
                            if (HIDWORD(v50))
                              return result;
                            a2 += v51;
                            if (v50 > v34 - a2)
                              return result;
                          }
                          else
                          {
                            v50 = v34 - a2;
                          }
                          if (!*(_DWORD *)(a1 + 228))
                          {
                            v66 = 0;
                            *(_DWORD *)(a1 + 244) = v48;
                            result = decoder_peek_si_internal_0((unsigned __int8 *)a2, v50, a1 + 224, &v66);
                            if ((_DWORD)result)
                              return result;
                            if (!(*(_DWORD *)(a1 + 232) | v66))
                              return 1;
                          }
                          v59 = *(_QWORD *)(a1 + 25072);
                          v60 = *(uint64_t **)(v59 + 32);
                          v60[1] = a2;
                          v60[3] = v50;
                          v60[4] = a4;
                          *((_DWORD *)v60 + 10) = 1;
                          v61 = *v60;
                          *(_DWORD *)(v61 + 40484) = *(_DWORD *)(a1 + 460);
                          *(_QWORD *)(v61 + 363904) = *(_QWORD *)(a1 + 452);
                          *(_QWORD *)(v61 + 363984) = *(_QWORD *)(a1 + 464);
                          memcpy((void *)(v61 + 363992), (const void *)(a1 + 472), 0x6008uLL);
                          *(_DWORD *)(*v60 + 388860) = *v20;
                          *(_DWORD *)(v59 + 48) = 0;
                          off_253EA52E0((_QWORD *)v59);
                          a2 = v60[2];
                          v62 = *v60;
                          if (*(_DWORD *)(v59 + 48))
                          {
                            result = *(unsigned int *)(v62 + 390860);
                            if ((_DWORD)result)
                            {
                              v64 = *(_DWORD *)(v62 + 390864);
                              v65 = v62 + 390868;
                              if (!v64)
                                v65 = 0;
                              *(_QWORD *)a1 = v65;
                              return result;
                            }
                          }
                          else if (*(_DWORD *)(a1 + 25352) == 1
                                 && !*(_DWORD *)(v62 + 363888)
                                 && (*(_BYTE *)(v62 + 15200) & 0xFD) == 0)
                          {
                            *(_DWORD *)(a1 + 25352) = 0;
                          }
                          if (a2 < v34)
                          {
                            v63 = v34 - a2;
                            while (!*(_BYTE *)a2)
                            {
                              ++a2;
                              if (!--v63)
                              {
                                a2 = v34;
                                break;
                              }
                            }
                          }
                          result = 0;
                          if (a2 >= v34)
                            return result;
                        }
                      }
                      return 0;
                    }
                    off_253EA52E8((std::__fs::filesystem::recursive_directory_iterator *)off_253EA52E8, (std::__fs::filesystem::recursive_directory_iterator *)v37);
                    free((void *)*(v39 - 1));
                    free(*(void **)(v37 - 8));
                    *(_QWORD *)(a1 + 25072) = 0;
                    v32 = "Failed to allocate frame_worker_data->pbi";
LABEL_58:
                    *(_QWORD *)a1 = v32;
                    return 2;
                  }
                }
                else
                {
                  *(_QWORD *)(v37 + 32) = 0;
                }
                off_253EA52E8((std::__fs::filesystem::recursive_directory_iterator *)off_253EA52E8, (std::__fs::filesystem::recursive_directory_iterator *)v37);
                free(*(void **)(v37 - 8));
                *(_QWORD *)(a1 + 25072) = 0;
                v32 = "Failed to allocate frame_worker_data";
                goto LABEL_58;
              }
            }
            else
            {
              *(_QWORD *)(a1 + 25072) = 0;
            }
            v32 = "Failed to allocate frame_worker";
            goto LABEL_58;
          }
        }
        v35 = *(_QWORD *)(a1 + 25360);
        *(_QWORD *)(v35 + 88) = 0;
        *(_BYTE *)(v35 + 96) = 0;
        free(*(void **)(v35 - 8));
      }
    }
    *(_QWORD *)(a1 + 25360) = 0;
    return 2;
  }
  return result;
}

_QWORD *decoder_get_frame_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  signed int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  unint64_t v45;
  signed int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  _BOOL4 v55;
  int v56;
  int v57;

  if (!a2)
    return 0;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 0;
  v5 = (_DWORD *)(a1 + 25352);
  v6 = *(uint64_t **)(v3 + 32);
  v7 = *v6;
  v8 = (_QWORD *)(*v6 + 390860);
  *v8 = 0;
  off_253EA52D0[0]();
  if (!v9)
  {
    v15 = 0;
    *((_DWORD *)v6 + 10) = 0;
    *v5 = 1;
    return v15;
  }
  v10 = *v6;
  v11 = *v6 + 363864;
  if (*((_DWORD *)v6 + 10) == 1)
  {
    *((_DWORD *)v6 + 10) = 0;
    if (*v5 == 1 && !*(_DWORD *)(v11 + 24) && (*(_BYTE *)(v10 + 15200) & 0xFD) == 0)
      *v5 = 0;
  }
  v12 = *a2;
  if (*(_QWORD *)v11 <= (unint64_t)*a2)
    return 0;
  v13 = *(_QWORD *)(v10 + 8 * v12 + 363832);
  v14 = *(_QWORD *)(v7 + 8 * v12 + 363832);
  *(_QWORD *)(a1 + 432) = v14;
  if (*v5)
    return 0;
  v17 = v7 + 363904;
  v18 = v13 + 1248;
  v15 = (_QWORD *)(a1 + 248);
  v19 = *(unint64_t **)(a1 + 400);
  v54 = (int *)(v7 + 363904);
  if (v19)
  {
    v53 = v13 + 1248;
    v20 = (void *)v19[1];
    if (v20)
    {
      v21 = *v19;
      if (*v19)
      {
        v51 = v13;
        v22 = 0;
        do
        {
          v23 = *(_QWORD **)(v19[1] + 8 * v22);
          if (v23)
          {
            v24 = (void *)v23[1];
            if (v24)
              free(v24);
            free(v23);
            v21 = *v19;
          }
          ++v22;
        }
        while (v22 < v21);
        v20 = (void *)v19[1];
        v13 = v51;
        v17 = v7 + 363904;
      }
      free(v20);
    }
    free(v19);
    *(_QWORD *)(a1 + 400) = 0;
    v18 = v53;
  }
  v25 = v7 + 39880;
  yuvconfig2image_0(a1 + 248, v18, v6[4]);
  v26 = *(_QWORD *)(v17 + 24936);
  if (v26)
  {
    *(_QWORD *)(a1 + 400) = v26;
    *(_QWORD *)(v17 + 24936) = 0;
  }
  if (*(_DWORD *)(v17 + 80))
  {
    v27 = *(unsigned __int8 *)(*(_QWORD *)v25 + 77);
    v28 = *(_BYTE *)(*(_QWORD *)v25 + 77) == 0;
    if (*(_DWORD *)(v7 + 40488))
    {
      v52 = v13;
      v29 = *v54;
      if ((*v54 & 0x80000000) == 0)
      {
        v56 = 0;
        if (!av1_get_uniform_tile_size(v7 + 15200, &v57, &v56))
          return 0;
        if (v29 >= *(_DWORD *)(v7 + 39908) - 1)
          v30 = *(_DWORD *)(v7 + 39908) - 1;
        else
          v30 = v29;
        v31 = v56;
        v32 = v30 * v56;
        v33 = *(_DWORD *)(a1 + 308);
        *(_QWORD *)(a1 + 312) += 4 * *(int *)(a1 + 336) * (uint64_t)v32;
        if (v27)
        {
          v28 = 0;
          v34 = *(_DWORD *)(v7 + 15732) - v32;
          if (v31 >= v34)
            v31 = v34;
          *(_DWORD *)(a1 + 292) = 4 * v31;
        }
        else
        {
          v36 = v32 * (4u >> v33);
          v37 = *(_QWORD *)(a1 + 328);
          v38 = *(_DWORD *)(a1 + 344);
          *(_QWORD *)(a1 + 320) += *(int *)(a1 + 340) * (uint64_t)v36;
          *(_QWORD *)(a1 + 328) = v37 + v38 * (uint64_t)v36;
          v39 = *(_DWORD *)(v7 + 15732) - v32;
          if (v31 >= v39)
            v31 = v39;
          *(_DWORD *)(a1 + 292) = 4 * v31;
          v28 = 1;
        }
      }
      v13 = v52;
      v40 = *(_DWORD *)(v7 + 363908);
      if ((v40 & 0x80000000) == 0)
      {
        v55 = v28;
        v57 = 0;
        if (av1_get_uniform_tile_size(v7 + 15200, &v57, &v56))
        {
          if (v40 >= *(_DWORD *)(v7 + 39904) - 1)
            v41 = *(_DWORD *)(v7 + 39904) - 1;
          else
            v41 = v40;
          v42 = v57;
          v43 = v41 * v57;
          v44 = *(_DWORD *)(a1 + 304);
          v45 = (((unint64_t)*(unsigned int *)(a1 + 248) >> 11) & 1) + 1;
          *(_QWORD *)(a1 + 312) += 4 * (int)v45 * (uint64_t)v43;
          if (v55)
          {
            v46 = v43 * (4u >> v44);
            v47 = *(_QWORD *)(a1 + 320) + (int)v45 * (uint64_t)v46;
            v48 = *(_QWORD *)(a1 + 328) + (int)v45 * (uint64_t)v46;
            *(_QWORD *)(a1 + 320) = v47;
            *(_QWORD *)(a1 + 328) = v48;
          }
          v49 = *(_DWORD *)(v7 + 15736) - v43;
          if (v42 >= v49)
            v42 = v49;
          *(_DWORD *)(a1 + 288) = 4 * v42;
          goto LABEL_55;
        }
        return 0;
      }
    }
LABEL_55:
    v50 = (_DWORD *)(v13 + 572);
    *(_QWORD *)(a1 + 408) = *(_QWORD *)(v14 + 1240);
    *(_QWORD *)(a1 + 364) = *(_QWORD *)(v14 + 1440);
    if (*(_DWORD *)(v7 + 388856))
      *v50 = 0;
    v15 = add_grain_if_needed(a1, (int *)(a1 + 248), (_QWORD *)(a1 + 25080), v50);
    if (v15)
    {
      ++*a2;
    }
    else
    {
      *v8 = 0x100000007;
      strcpy((char *)(v7 + 390868), "Grain synthesis failed\n");
    }
    return v15;
  }
  if (!*(_DWORD *)(v7 + 40484))
    goto LABEL_55;
  ++*a2;
  aom_img_remove_metadata(a1 + 248);
  yuvconfig2image_0(a1 + 248, v7 + 388576, 0);
  v35 = *(_QWORD *)(v7 + 388840);
  if (v35)
  {
    *(_QWORD *)(a1 + 400) = v35;
    *(_QWORD *)(v7 + 388840) = 0;
  }
  return v15;
}

uint64_t decoder_set_fb_fn_0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = 8;
  if (a2 && a3)
  {
    if (a1[3134])
    {
      return 1;
    }
    else
    {
      result = 0;
      a1[3172] = a2;
      a1[3173] = a3;
      a1[3171] = a4;
    }
  }
  return result;
}

uint64_t ctrl_copy_reference_2(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[3];
  __int128 v37;
  unsigned int **v38;

  v38 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  v37 = 0u;
  memset(v36, 0, sizeof(v36));
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 25072) + 32);
  v4 = *((_QWORD *)v2 + 9);
  v5 = *((_QWORD *)v2 + 10);
  *((_QWORD *)&v30 + 1) = v4;
  *(_QWORD *)&v31 = v5;
  v6 = *((_QWORD *)v2 + 11);
  *((_QWORD *)&v31 + 1) = v6;
  v7 = v2[12];
  v8 = v2[13];
  *(_QWORD *)((char *)&v36[2] + 4) = *((_QWORD *)v2 + 7);
  v9 = v2[9];
  v10 = v2[10];
  v12 = v2[16];
  v11 = v2[17];
  v13 = (v12 + v9) >> v12;
  *(_QWORD *)&v28 = __PAIR64__(v13, v9);
  v14 = (v12 + v7) >> v12;
  v15 = (v11 + v10) >> v11;
  *((_QWORD *)&v28 + 1) = __PAIR64__(v15, v10);
  *(_QWORD *)&v29 = __PAIR64__(v14, v7);
  DWORD2(v29) = v8;
  HIDWORD(v29) = (v11 + v8) >> v11;
  v16 = v2[24];
  v17 = v2[25];
  *(_QWORD *)&v30 = __PAIR64__(v17, v16);
  *(_QWORD *)((char *)v36 + 12) = *(_QWORD *)(v2 + 3);
  DWORD1(v36[1]) = v2[5];
  BYTE8(v36[1]) = v2[6];
  *(_QWORD *)((char *)&v36[1] + 12) = *(_QWORD *)(v2 + 7);
  if ((*((_BYTE *)v2 + 9) & 8) != 0)
  {
    *((_QWORD *)&v30 + 1) = v4 >> 1;
    *(_QWORD *)&v31 = v5 >> 1;
    *((_QWORD *)&v31 + 1) = v6 >> 1;
    v16 >>= 1;
    LODWORD(v30) = v16;
    DWORD1(v30) = v17 >> 1;
    v18 = 8;
  }
  else
  {
    v18 = 0;
  }
  LODWORD(v37) = v18;
  v20 = (v2[9] + 31) & 0xFFFFFFE0;
  v21 = __OFSUB__(v16, v20);
  v22 = v16 - v20;
  if (v22 < 0 != v21)
    ++v22;
  LODWORD(v35) = (v22 >> 1) & ~(v22 >> 31);
  *(_QWORD *)&v36[0] = *((_QWORD *)v2 + 8);
  *((_QWORD *)&v37 + 1) = *((_QWORD *)v2 + 20);
  v23 = *v3;
  v24 = *v2;
  if (*(_BYTE *)(*(_QWORD *)(v23 + 39880) + 77))
    v25 = 1;
  else
    v25 = 3;
  if (v24 <= 7 && (v26 = *(_QWORD *)(v23 + 8 * v24 + 15616)) != 0)
  {
    v27 = (unsigned int *)(v23 + 390860);
    if (*(_DWORD *)(v26 + 1256) == v10
      && *(_DWORD *)(v26 + 1248) == v9
      && *(_DWORD *)(v26 + 1260) == v15
      && *(_DWORD *)(v26 + 1252) == v13)
    {
      aom_yv12_copy_frame_c((char *)(v26 + 1248), (uint64_t)&v28, v25);
      return *v27;
    }
    else
    {
      aom_internal_error(v23 + 390860, 1, "Incorrect buffer dimensions", v28, v29, v30, v31, v32, v33, v34, v35, v36[0], v36[1], v36[2], v37);
      return *v27;
    }
  }
  else
  {
    aom_internal_error(v23 + 390860, 1, "No reference frame", v28, v29, v30, v31, v32, v33, v34, v35, v36[0], v36[1], v36[2], v37);
    return 1;
  }
}

uint64_t ctrl_set_reference_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  unsigned int v16;
  BOOL v17;
  int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[3];
  __int128 v28;
  _QWORD *v29;

  v29 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 25072) + 32);
  v4 = *(_QWORD *)(v2 + 72);
  v5 = *(_QWORD *)(v2 + 80);
  *((_QWORD *)&v21 + 1) = v4;
  *(_QWORD *)&v22 = v5;
  v6 = *(_QWORD *)(v2 + 88);
  *((_QWORD *)&v22 + 1) = v6;
  v7 = *(_DWORD *)(v2 + 48);
  v8 = *(_DWORD *)(v2 + 52);
  *(_QWORD *)((char *)&v27[2] + 4) = *(_QWORD *)(v2 + 56);
  v9 = *(_DWORD *)(v2 + 40);
  v10 = *(_DWORD *)(v2 + 64);
  v11 = *(_DWORD *)(v2 + 68);
  LODWORD(v19) = *(_DWORD *)(v2 + 36);
  DWORD1(v19) = (v10 + v19) >> v10;
  DWORD2(v19) = v9;
  HIDWORD(v19) = (v11 + v9) >> v11;
  LODWORD(v20) = v7;
  DWORD1(v20) = (v10 + v7) >> v10;
  DWORD2(v20) = v8;
  HIDWORD(v20) = (v11 + v8) >> v11;
  v12 = *(_DWORD *)(v2 + 96);
  v13 = *(_DWORD *)(v2 + 100);
  *(_QWORD *)&v21 = __PAIR64__(v13, v12);
  *(_QWORD *)((char *)v27 + 12) = *(_QWORD *)(v2 + 12);
  DWORD1(v27[1]) = *(_DWORD *)(v2 + 20);
  BYTE8(v27[1]) = *(_DWORD *)(v2 + 24);
  *(_QWORD *)((char *)&v27[1] + 12) = *(_QWORD *)(v2 + 28);
  if ((*(_BYTE *)(v2 + 9) & 8) != 0)
  {
    *((_QWORD *)&v21 + 1) = v4 >> 1;
    *(_QWORD *)&v22 = v5 >> 1;
    *((_QWORD *)&v22 + 1) = v6 >> 1;
    v12 >>= 1;
    LODWORD(v21) = v12;
    DWORD1(v21) = v13 >> 1;
    v14 = 8;
  }
  else
  {
    v14 = 0;
  }
  LODWORD(v28) = v14;
  v16 = (*(_DWORD *)(v2 + 36) + 31) & 0xFFFFFFE0;
  v17 = __OFSUB__(v12, v16);
  v18 = v12 - v16;
  if (v18 < 0 != v17)
    ++v18;
  LODWORD(v26) = (v18 >> 1) & ~(v18 >> 31);
  *(_QWORD *)&v27[0] = *(_QWORD *)(v2 + 64);
  *((_QWORD *)&v28 + 1) = *(_QWORD *)(v2 + 160);
  return av1_set_reference_dec(*v3 + 15200, *(_DWORD *)v2, *(_DWORD *)(v2 + 4), (uint64_t)&v19);
}

uint64_t ctrl_set_invert_tile_order_0(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 424) = *a2;
  return 0;
}

uint64_t ctrl_set_byte_alignment_0(uint64_t a1, __int32 *a2, int8x8_t a3)
{
  __int32 v3;
  uint8x8_t v4;
  uint64_t result;
  uint64_t v7;

  v3 = *a2;
  if (*a2)
  {
    a3.i32[0] = *a2;
    v4 = (uint8x8_t)vcnt_s8(a3);
    v4.i16[0] = vaddlv_u8(v4);
    if ((v3 - 32) > 0x3E0 || v4.i32[0] > 1u)
      return 8;
  }
  *(_DWORD *)(a1 + 440) = v3;
  v7 = *(_QWORD *)(a1 + 25072);
  result = 0;
  if (v7)
    *(_DWORD *)(**(_QWORD **)(v7 + 32) + 15712) = v3;
  return result;
}

uint64_t ctrl_set_skip_loop_filter_0(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  *(_DWORD *)(a1 + 444) = *a2;
  v3 = *(_QWORD *)(a1 + 25072);
  if (v3)
    *(_DWORD *)(**(_QWORD **)(v3 + 32) + 388852) = v2;
  return 0;
}

uint64_t ctrl_set_decode_tile_row(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 452) = *a2;
  return 0;
}

uint64_t ctrl_set_decode_tile_col(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 456) = *a2;
  return 0;
}

uint64_t ctrl_set_tile_mode(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 460) = *a2;
  return 0;
}

uint64_t ctrl_set_is_annexb(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 25056) = *a2;
  return 0;
}

uint64_t ctrl_set_operating_point(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 25060) = *a2;
  return 0;
}

uint64_t ctrl_set_output_all_layers(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 25064) = *a2;
  return 0;
}

uint64_t ctrl_set_inspection_callback()
{
  return 4;
}

uint64_t ctrl_ext_tile_debug(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 464) = *a2;
  return 0;
}

uint64_t ctrl_set_row_mt_2(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(a1 + 468) = *a2;
  return 0;
}

uint64_t ctrl_set_ext_ref_ptr(uint64_t a1, uint64_t **a2)
{
  uint64_t *v2;
  int v3;
  int *v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *((_DWORD *)v2 + 2);
  v4 = (int *)(a1 + 25048);
  *(_DWORD *)(a1 + 25048) = v3;
  if (v3 >= 1)
  {
    v5 = 0;
    do
    {
      v11 = *v2;
      *v2 += 168;
      v12 = *(_QWORD *)(v11 + 64);
      *(_QWORD *)(a1 + 512) = v12;
      v13 = *(_QWORD *)(v11 + 72);
      *(_QWORD *)(a1 + 520) = v13;
      v14 = *(_QWORD *)(v11 + 80);
      *(_QWORD *)(a1 + 528) = v14;
      v15 = *(_DWORD *)(v11 + 40);
      *(_DWORD *)(a1 + 488) = v15;
      v16 = *(_DWORD *)(v11 + 44);
      *(_DWORD *)(a1 + 496) = v16;
      *(_QWORD *)(a1 + 636) = *(_QWORD *)(v11 + 48);
      v17 = *(_DWORD *)(v11 + 28);
      *(_DWORD *)(a1 + 472) = v17;
      v18 = *(_DWORD *)(v11 + 32);
      *(_DWORD *)(a1 + 480) = v18;
      *(_DWORD *)(a1 + 476) = (*(_DWORD *)(v11 + 56) + v17) >> *(_DWORD *)(v11 + 56);
      *(_DWORD *)(a1 + 484) = (*(_DWORD *)(v11 + 60) + v18) >> *(_DWORD *)(v11 + 60);
      *(_DWORD *)(a1 + 492) = (*(_DWORD *)(v11 + 56) + v15) >> *(_DWORD *)(v11 + 56);
      *(_DWORD *)(a1 + 500) = (*(_DWORD *)(v11 + 60) + v16) >> *(_DWORD *)(v11 + 60);
      v6 = *(_DWORD *)(v11 + 88);
      *(_DWORD *)(a1 + 504) = v6;
      v19 = *(_DWORD *)(v11 + 92);
      *(_DWORD *)(a1 + 508) = v19;
      *(_QWORD *)(a1 + 612) = *(_QWORD *)(v11 + 4);
      v20 = *(_DWORD *)(v11 + 16);
      *(_DWORD *)(a1 + 620) = *(_DWORD *)(v11 + 12);
      *(_BYTE *)(a1 + 624) = v20;
      *(_QWORD *)(a1 + 628) = *(_QWORD *)(v11 + 20);
      if ((*(_BYTE *)(v11 + 1) & 8) != 0)
      {
        *(_QWORD *)(a1 + 512) = v12 >> 1;
        *(_QWORD *)(a1 + 520) = v13 >> 1;
        *(_QWORD *)(a1 + 528) = v14 >> 1;
        v6 >>= 1;
        *(_DWORD *)(a1 + 504) = v6;
        *(_DWORD *)(a1 + 508) = v19 >> 1;
        v7 = 8;
      }
      else
      {
        v7 = 0;
      }
      *(_DWORD *)(a1 + 648) = v7;
      v8 = (*(_DWORD *)(v11 + 28) + 31) & 0xFFFFFFE0;
      v9 = __OFSUB__(v6, v8);
      v10 = v6 - v8;
      if (v10 < 0 != v9)
        ++v10;
      *(_DWORD *)(a1 + 584) = (v10 >> 1) & ~(v10 >> 31);
      *(_QWORD *)(a1 + 600) = *(_QWORD *)(v11 + 56);
      *(_QWORD *)(a1 + 656) = *(_QWORD *)(v11 + 152);
      ++v5;
      a1 += 192;
    }
    while (v5 < *v4);
  }
  return 0;
}

uint64_t ctrl_set_skip_film_grain(uint64_t a1, int *a2)
{
  int v2;
  uint64_t v3;

  v2 = *a2;
  *(_DWORD *)(a1 + 448) = *a2;
  v3 = *(_QWORD *)(a1 + 25072);
  if (v3)
    *(_DWORD *)(**(_QWORD **)(v3 + 32) + 388856) = v2;
  return 0;
}

uint64_t ctrl_get_frame_corrupted_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  v3 = **(_QWORD **)(v2 + 32) + 363864;
  if (*(_DWORD *)(v3 + 64))
  {
    if (!*(_QWORD *)v3)
      return 1;
  }
  v4 = *(_QWORD *)(a1 + 432);
  result = 0;
  if (v4)
    *(_DWORD *)*a2 = *(_DWORD *)(v4 + 1420);
  return result;
}

uint64_t ctrl_get_last_quantizer(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 15816);
  return result;
}

uint64_t ctrl_get_last_ref_updates_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 15236);
  return result;
}

uint64_t ctrl_get_bit_depth_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(v2 + 32) + 39880) + 72);
  return result;
}

uint64_t ctrl_get_img_format(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v10;
  int v12;
  int v13;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  v4 = *(_QWORD *)(**(_QWORD **)(v2 + 32) + 39880);
  v5 = *(_DWORD *)(v4 + 96);
  v6 = *(_DWORD *)(v4 + 100);
  v7 = *(unsigned __int8 *)(v4 + 76);
  v8 = v6 | v5;
  if (v6 == 1 && v5 == 1)
    v10 = 258;
  else
    v10 = 0;
  if (v5 == 1 && v6 == 0)
    v12 = 261;
  else
    v12 = v10;
  if (!v8)
    v12 = 262;
  if (v7)
    v13 = v12 | 0x800;
  else
    v13 = v12;
  *(_DWORD *)*a2 = v13;
  return result;
}

uint64_t ctrl_get_tile_size(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 1;
  v4 = **(unsigned int ***)(v3 + 32);
  v5 = v4 + 9970;
  if (v4[9981])
  {
    v6 = v4[9984];
    v7 = v4[9985];
LABEL_5:
    result = 0;
    *v2 = (v6 << 18) + 4 * v7;
    return result;
  }
  v9 = v4[9976];
  if ((int)v9 < 1)
  {
    v6 = 0;
  }
  else
  {
    v10 = v4[9992];
    v11 = *(_DWORD *)(*(_QWORD *)v5 + 32);
    v6 = v11 * (v10 - v4[9991]);
    if ((_DWORD)v9 != 1)
    {
      v12 = v9 - 1;
      v13 = v4 + 9993;
      do
      {
        v15 = *v13++;
        v14 = v15;
        if ((v15 - v10) * v11 != v6)
          return 7;
        v10 = v14;
      }
      while (--v12);
    }
  }
  v16 = v4[9977];
  if ((int)v16 < 1)
  {
    result = 0;
    *v2 = v6 << 18;
    return result;
  }
  v17 = v4 + 10056;
  v18 = v4[10057];
  v19 = v18 - v4[10056];
  v20 = *(_DWORD *)(*(_QWORD *)v5 + 32);
  v7 = v20 * v19;
  if ((_DWORD)v16 == 1)
    goto LABEL_5;
  v21 = v16 - 1;
  v22 = v17 + 2;
  while (1)
  {
    v24 = *v22++;
    v23 = v24;
    if ((v24 - v18) * v20 != v7)
      return 7;
    v18 = v23;
    if (!--v21)
      goto LABEL_5;
  }
}

uint64_t ctrl_get_tile_count(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 363976) + 1;
  return result;
}

uint64_t ctrl_get_render_size_0(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 1;
  result = 0;
  v5 = **(_QWORD **)(v3 + 32);
  *v2 = *(_DWORD *)(v5 + 15264);
  v2[1] = *(_DWORD *)(v5 + 15268);
  return result;
}

uint64_t ctrl_get_frame_size_0(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 1;
  result = 0;
  v5 = **(_QWORD **)(v3 + 32);
  *v2 = *(_DWORD *)(v5 + 15256);
  v2[1] = *(_DWORD *)(v5 + 15260);
  return result;
}

uint64_t ctrl_get_accounting()
{
  return 4;
}

uint64_t ctrl_get_new_frame_image_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t result;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = **(_QWORD **)(*(_QWORD *)(a1 + 25072) + 32);
  v4 = *(_QWORD *)(v3 + 363864);
  if (!v4)
    return 1;
  v5 = *(_QWORD *)(v3 + 8 * v4 + 363824);
  v6 = *(_DWORD *)(v5 + 1248);
  v7 = *(_DWORD *)(v5 + 1256);
  v8 = (uint64_t *)(v5 + 1388);
  v9 = *(_DWORD *)(v5 + 1264);
  v10 = *(_DWORD *)(v5 + 1272);
  v11 = *(_DWORD *)(v5 + 1280);
  v12 = *(_DWORD *)(v5 + 1284);
  v13 = *(_QWORD *)(v5 + 1288);
  v14 = *(_QWORD *)(v5 + 1296);
  v15 = *(_QWORD *)(v5 + 1304);
  v16 = *(_QWORD *)(v5 + 1344);
  v17 = *(_QWORD *)(v5 + 1368);
  v18 = *(_QWORD *)(v5 + 1376);
  v19 = *(_DWORD *)(v5 + 1384);
  v20 = *(_DWORD *)(v5 + 1396);
  v21 = *(unsigned __int8 *)(v5 + 1400);
  v22 = HIDWORD(v18);
  v23 = *(_DWORD *)(v5 + 1424);
  v24 = *(_QWORD *)(v5 + 1404);
  *(_QWORD *)&v25 = *(_QWORD *)(v5 + 1412);
  *((_QWORD *)&v25 + 1) = v18;
  v26 = v18;
  if ((_DWORD)v18)
    v27 = 261;
  else
    v27 = 262;
  if ((_DWORD)v18)
    v28 = 16;
  else
    v28 = 24;
  if (HIDWORD(v18))
    v29 = 258;
  else
    v29 = v27;
  if (HIDWORD(v18))
    v30 = 12;
  else
    v30 = v28;
  v31 = *v8;
  *(_DWORD *)v2 = v29;
  *(_QWORD *)(v2 + 4) = v31;
  *(_DWORD *)(v2 + 12) = v20;
  *(_DWORD *)(v2 + 16) = v21;
  *(_QWORD *)(v2 + 20) = v24;
  *(_DWORD *)(v2 + 28) = v6;
  *(_DWORD *)(v2 + 32) = v7;
  *(_DWORD *)(v2 + 36) = 8;
  *(_DWORD *)(v2 + 40) = v9;
  *(_DWORD *)(v2 + 44) = v10;
  *(_OWORD *)(v2 + 48) = v25;
  *(_QWORD *)(v2 + 64) = v13;
  *(_QWORD *)(v2 + 72) = v14;
  *(_QWORD *)(v2 + 80) = v15;
  *(_DWORD *)(v2 + 88) = v11;
  *(_DWORD *)(v2 + 92) = v12;
  *(_DWORD *)(v2 + 96) = v12;
  if ((v23 & 8) != 0)
  {
    if (v26)
      v32 = 2309;
    else
      v32 = 2310;
    if (v22)
      v33 = 2306;
    else
      v33 = v32;
    *(_DWORD *)v2 = v33;
    *(_DWORD *)(v2 + 36) = v19;
    *(_QWORD *)(v2 + 64) = 2 * v13;
    *(_QWORD *)(v2 + 72) = 2 * v14;
    v30 *= 2;
    *(_QWORD *)(v2 + 80) = 2 * v15;
    v34 = 2 * v12;
    *(_DWORD *)(v2 + 88) = 2 * v11;
    *(_DWORD *)(v2 + 92) = v34;
    *(_DWORD *)(v2 + 96) = v34;
  }
  result = 0;
  *(_DWORD *)(v2 + 112) = v30;
  *(_QWORD *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = v16;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 104) = v17;
  return result;
}

uint64_t ctrl_copy_new_frame_image_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v24;
  BOOL v25;
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[3];
  __int128 v36;
  _OWORD v37[12];
  _QWORD *v38;

  v38 = a2 + 1;
  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = **(_QWORD **)(*(_QWORD *)(a1 + 25072) + 32);
  v4 = *(_QWORD *)(v3 + 363864);
  if (!v4)
    return 1;
  v5 = *(_OWORD **)(v3 + 8 * v4 + 363824);
  v6 = v5[87];
  v37[8] = v5[86];
  v37[9] = v6;
  v7 = v5[89];
  v37[10] = v5[88];
  v37[11] = v7;
  v8 = v5[83];
  v37[4] = v5[82];
  v37[5] = v8;
  v9 = v5[85];
  v37[6] = v5[84];
  v37[7] = v9;
  v10 = v5[79];
  v37[0] = v5[78];
  v37[1] = v10;
  v11 = v5[81];
  v37[2] = v5[80];
  v37[3] = v11;
  v36 = 0u;
  memset(v35, 0, sizeof(v35));
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v12 = *(_QWORD *)(v2 + 64);
  v13 = *(_QWORD *)(v2 + 72);
  *((_QWORD *)&v29 + 1) = v12;
  *(_QWORD *)&v30 = v13;
  v14 = *(_QWORD *)(v2 + 80);
  *((_QWORD *)&v30 + 1) = v14;
  v15 = *(_DWORD *)(v2 + 40);
  v16 = *(_DWORD *)(v2 + 44);
  *(_QWORD *)((char *)&v35[2] + 4) = *(_QWORD *)(v2 + 48);
  v17 = *(_DWORD *)(v2 + 32);
  v18 = *(_DWORD *)(v2 + 56);
  v19 = *(_DWORD *)(v2 + 60);
  LODWORD(v27) = *(_DWORD *)(v2 + 28);
  DWORD1(v27) = (v18 + v27) >> v18;
  DWORD2(v27) = v17;
  HIDWORD(v27) = (v19 + v17) >> v19;
  LODWORD(v28) = v15;
  DWORD1(v28) = (v18 + v15) >> v18;
  DWORD2(v28) = v16;
  HIDWORD(v28) = (v19 + v16) >> v19;
  v20 = *(_DWORD *)(v2 + 88);
  v21 = *(_DWORD *)(v2 + 92);
  *(_QWORD *)&v29 = __PAIR64__(v21, v20);
  *(_QWORD *)((char *)v35 + 12) = *(_QWORD *)(v2 + 4);
  DWORD1(v35[1]) = *(_DWORD *)(v2 + 12);
  BYTE8(v35[1]) = *(_DWORD *)(v2 + 16);
  *(_QWORD *)((char *)&v35[1] + 12) = *(_QWORD *)(v2 + 20);
  if ((*(_BYTE *)(v2 + 1) & 8) != 0)
  {
    *((_QWORD *)&v29 + 1) = v12 >> 1;
    *(_QWORD *)&v30 = v13 >> 1;
    *((_QWORD *)&v30 + 1) = v14 >> 1;
    v20 >>= 1;
    LODWORD(v29) = v20;
    DWORD1(v29) = v21 >> 1;
    v22 = 8;
  }
  else
  {
    v22 = 0;
  }
  LODWORD(v36) = v22;
  v24 = (*(_DWORD *)(v2 + 28) + 31) & 0xFFFFFFE0;
  v25 = __OFSUB__(v20, v24);
  v26 = v20 - v24;
  if (v26 < 0 != v25)
    ++v26;
  LODWORD(v34) = (v26 >> 1) & ~(v26 >> 31);
  *(_QWORD *)&v35[0] = *(_QWORD *)(v2 + 56);
  *((_QWORD *)&v36 + 1) = *(_QWORD *)(v2 + 152);
  return av1_copy_new_frame_dec(v3 + 15200, (uint64_t)v37, &v27);
}

uint64_t ctrl_get_reference_2(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *v2;
  if (v3 > 7)
    return 1;
  v4 = *(_QWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 25072) + 32) + 8 * v3 + 15616);
  if (!v4)
    return 1;
  yuvconfig2image_0((uint64_t)(v2 + 2), v4 + 1248, 0);
  return 0;
}

uint64_t ctrl_get_frame_header_info(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 1;
  result = 0;
  v5 = (uint64_t *)(**(_QWORD **)(v3 + 32) + 363944);
  v7 = v5[1];
  v6 = v5[2];
  v8 = *v5;
  *v2 = v6;
  v2[1] = v7;
  v2[2] = v8;
  return result;
}

uint64_t ctrl_get_tile_data(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 1;
  result = 0;
  v6 = (uint64_t *)(**(_QWORD **)(v3 + 32)
                 + ((uint64_t)*(int *)(**(_QWORD **)(v3 + 32) + 363904) << 10)
                 + 16 * *(int *)(**(_QWORD **)(v3 + 32) + 363908)
                 + 298256);
  v5 = *v6;
  *v2 = v6[1];
  v2[1] = v5;
  return result;
}

uint64_t ctrl_get_fwd_kf_value(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 388896);
  return result;
}

uint64_t ctrl_get_altref_present(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 388900);
  return result;
}

uint64_t ctrl_get_frame_flags(uint64_t a1, int **a2)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 1;
  v4 = **(_QWORD **)(v3 + 32);
  v5 = v4 + 15200;
  *v2 = 0;
  v6 = *(unsigned __int8 *)(v4 + 15200);
  if (v6 == 3)
  {
    *v2 = 32;
    v8 = 96;
    if (*(_BYTE *)(v5 + 502))
      goto LABEL_18;
    return 0;
  }
  if (v6 == 2)
  {
    *v2 = 16;
    v8 = 80;
    if (*(_BYTE *)(v5 + 502))
      goto LABEL_18;
    return 0;
  }
  if (*(_BYTE *)(v4 + 15200))
  {
    v8 = 64;
    if (*(_BYTE *)(v5 + 502))
      goto LABEL_18;
    return 0;
  }
  *v2 = 17;
  if (*(_DWORD *)(v4 + 15680))
    v7 = 17;
  else
    v7 = 145;
  *v2 = v7;
  v8 = v7 | 0x40;
  if (!*(_BYTE *)(v5 + 502))
    return 0;
LABEL_18:
  result = 0;
  *v2 = v8;
  return result;
}

uint64_t ctrl_get_tile_info(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint32x2_t *v4;
  uint32x2_t v5;
  uint32x2_t v6;
  uint32x2_t *v7;
  uint64_t v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  int32x4_t *v12;
  int32x4_t *v13;
  unint64_t v14;
  int32x4_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint32x2_t *v20;
  uint64_t v21;
  int32x4_t *v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  int32x4_t *v26;
  unint64_t v27;
  int32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint32x2_t *v32;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 1;
  v4 = **(uint32x2_t ***)(v3 + 32);
  v5 = v4[4988];
  v6 = v5;
  if (v4[4990].i32[1])
    v6 = vshl_u32((uint32x2_t)0x100000001, v4[4991]);
  v7 = v4 + 48613;
  *(uint32x2_t *)v2 = v6;
  if (v5.i32[0] >= 1)
  {
    v8 = (v5.i32[0] + 1);
    if (v5.i32[0] < 8u
      || (v2 + 8 < (unint64_t)&v4[4995] + 4 * v8 + 4
        ? (v9 = (unint64_t)&v4[4995] + 4 >= 4 * v8 + v2 + 4)
        : (v9 = 1),
          !v9))
    {
      v11 = 1;
LABEL_19:
      v17 = v8 - v11;
      v18 = 4 * v11;
      v19 = (_DWORD *)(4 * v11 + v2 + 4);
      v20 = (uint32x2_t *)((char *)v4 + v18 + 39964);
      do
      {
        *v19++ = v20->i32[0] - v20[-1].i32[1];
        v20 = (uint32x2_t *)((char *)v20 + 4);
        --v17;
      }
      while (v17);
      goto LABEL_21;
    }
    v10 = (v8 - 1) & 0xFFFFFFFFFFFFFFF8;
    v11 = v10 | 1;
    v12 = (int32x4_t *)(v2 + 24);
    v13 = (int32x4_t *)&v4[4998];
    v14 = v10;
    do
    {
      v15 = vsubq_s32(*v13, *(int32x4_t *)((char *)v13 - 4));
      v12[-1] = vsubq_s32(v13[-1], *(int32x4_t *)((char *)v13 - 20));
      *v12 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 8;
    }
    while (v14);
    if (v8 - 1 != v10)
      goto LABEL_19;
  }
LABEL_21:
  if (v5.i32[1] >= 1)
  {
    v21 = (v5.i32[1] + 1);
    if (v5.i32[1] >= 8u
      && ((v22 = (int32x4_t *)(v2 + 264), v2 + 264 < (unint64_t)&v4[5028] + 4 * v21)
        ? (v23 = (unint64_t)&v4[5028] >= 4 * v21 + v2 + 260)
        : (v23 = 1),
          v23))
    {
      v24 = (v21 - 1) & 0xFFFFFFFFFFFFFFF8;
      v25 = v24 | 1;
      v26 = (int32x4_t *)((char *)&v4[5030] + 4);
      v27 = v24;
      do
      {
        v28 = vsubq_s32(*v26, *(int32x4_t *)((char *)v26 - 4));
        *v22 = vsubq_s32(v26[-1], *(int32x4_t *)((char *)v26 - 20));
        v22[1] = v28;
        v22 += 2;
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      if (v21 - 1 == v24)
        goto LABEL_35;
    }
    else
    {
      v25 = 1;
    }
    v29 = v21 - v25;
    v30 = 4 * v25;
    v31 = (_DWORD *)(v30 + v2 + 260);
    v32 = (uint32x2_t *)((char *)v4 + v30 + 40224);
    do
    {
      *v31++ = v32->i32[0] - v32[-1].i32[1];
      v32 = (uint32x2_t *)((char *)v32 + 4);
      --v29;
    }
    while (v29);
  }
LABEL_35:
  result = 0;
  *(_DWORD *)(v2 + 520) = v7->i32[0];
  return result;
}

uint64_t ctrl_get_screen_content_tools_info(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 1;
  result = 0;
  v5 = (unsigned __int8 *)(**(_QWORD **)(v3 + 32) + 15694);
  v6 = v5[2];
  *v2 = v5[1];
  v2[1] = v6;
  v2[2] = *v5;
  return result;
}

uint64_t ctrl_get_still_picture(uint64_t a1, _DWORD **a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t result;
  unsigned __int8 *v5;
  int v6;

  v2 = *a2;
  if (!*a2)
    return 8;
  v3 = *(_QWORD *)(a1 + 25072);
  if (!v3)
    return 1;
  result = 0;
  v5 = (unsigned __int8 *)(**(_QWORD **)(v3 + 32) + 388977);
  v6 = *v5;
  LODWORD(v5) = v5[1];
  *v2 = v6;
  v2[1] = (_DWORD)v5;
  return result;
}

uint64_t ctrl_get_sb_size(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(unsigned __int8 *)(**(_QWORD **)(v2 + 32) + 388948) == 15;
  return result;
}

uint64_t ctrl_get_show_existing_frame_flag(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 15688);
  return result;
}

uint64_t ctrl_get_s_frame_info(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_QWORD *)*a2 = *(_QWORD *)(**(_QWORD **)(v2 + 32) + 388908);
  return result;
}

uint64_t ctrl_get_show_frame_flag(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 15680);
  return result;
}

uint64_t ctrl_get_base_q_idx(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 15816);
  return result;
}

uint64_t ctrl_get_order_hint(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;

  if (!*a2)
    return 8;
  v2 = *(_QWORD *)(a1 + 25072);
  if (!v2)
    return 1;
  result = 0;
  *(_DWORD *)*a2 = *(_DWORD *)(**(_QWORD **)(v2 + 32) + 15204);
  return result;
}

uint64_t ctrl_get_mi_info(uint64_t a1, int *a2)
{
  int v2;
  int v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t result;
  __int128 *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v2 = *a2;
  v3 = a2[2];
  v4 = (_OWORD *)*((_QWORD *)a2 + 2);
  if (!v4)
    return 8;
  v5 = *(_QWORD *)(a1 + 25072);
  if (!v5)
    return 1;
  v6 = *(uint64_t **)(v5 + 32);
  if (!v6)
    return 1;
  if (v2 < 0)
    return 8;
  v7 = *v6;
  result = 8;
  if (v2 < *(_DWORD *)(v7 + 15732) && (v3 & 0x80000000) == 0 && v3 < *(_DWORD *)(v7 + 15736))
  {
    result = 0;
    v9 = *(__int128 **)(*(_QWORD *)(v7 + 15768) + 8 * (v3 + *(_DWORD *)(v7 + 15780) * v2));
    v10 = v9[6];
    v12 = v9[3];
    v11 = v9[4];
    v4[5] = v9[5];
    v4[6] = v10;
    v4[3] = v12;
    v4[4] = v11;
    v13 = v9[10];
    v15 = v9[7];
    v14 = v9[8];
    v4[9] = v9[9];
    v4[10] = v13;
    v4[7] = v15;
    v4[8] = v14;
    v16 = *v9;
    v17 = v9[2];
    v4[1] = v9[1];
    v4[2] = v17;
    *v4 = v16;
  }
  return result;
}

uint64_t yuvconfig2image_0(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  v3 = *(_DWORD *)(a2 + 132);
  if (v3)
  {
    *(_DWORD *)result = 258;
    v4 = *(_DWORD *)(a2 + 128);
    v5 = 12;
    v6 = 2306;
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 128);
    if (v4)
    {
      *(_DWORD *)result = 261;
      v5 = 16;
      v6 = 2309;
    }
    else
    {
      *(_DWORD *)result = 262;
      v5 = 24;
      v6 = 2310;
    }
  }
  *(_QWORD *)(result + 4) = *(_QWORD *)(a2 + 140);
  v7 = *(unsigned __int8 *)(a2 + 152);
  *(_DWORD *)(result + 12) = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(result + 16) = v7;
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 156);
  *(_DWORD *)(result + 36) = 8;
  *(_DWORD *)(result + 28) = *(_DWORD *)a2;
  *(_DWORD *)(result + 32) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 164);
  *(_DWORD *)(result + 56) = v4;
  *(_DWORD *)(result + 60) = v3;
  *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 80) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(result + 88) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(result + 92) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(result + 96) = *(_DWORD *)(a2 + 36);
  if ((*(_BYTE *)(a2 + 176) & 8) != 0)
  {
    v5 *= 2;
    *(_DWORD *)result = v6;
    *(_DWORD *)(result + 36) = *(_DWORD *)(a2 + 136);
    *(_QWORD *)(result + 64) = 2 * *(_QWORD *)(a2 + 40);
    *(_QWORD *)(result + 72) = 2 * *(_QWORD *)(a2 + 48);
    *(_QWORD *)(result + 80) = 2 * *(_QWORD *)(a2 + 56);
    *(_DWORD *)(result + 88) = 2 * *(_DWORD *)(a2 + 32);
    *(_DWORD *)(result + 92) = 2 * *(_DWORD *)(a2 + 36);
    *(_DWORD *)(result + 96) = 2 * *(_DWORD *)(a2 + 36);
  }
  *(_DWORD *)(result + 112) = v5;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(result + 128) = a3;
  *(_QWORD *)(result + 136) = v8;
  *(_QWORD *)(result + 144) = 0;
  *(_QWORD *)(result + 104) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(result + 152) = 0;
  return result;
}

uint64_t decoder_peek_si_internal_0(unsigned __int8 *a1, int64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int64_t v10;
  unsigned __int8 *v11;
  uint64_t result;
  BOOL v13;
  int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  char v20;
  int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  unsigned int i;
  int v35;
  unsigned __int8 *v36;
  int v37;
  unsigned int j;
  int v39;
  unsigned __int8 *v40;
  char v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int v44;
  unsigned int k;
  unsigned int v46;
  char v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned __int8 *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  unsigned __int8 *v58;
  int v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned __int8 *v63;
  int v64;
  int v65;
  unsigned int v66;
  unsigned __int8 *v67;
  unint64_t v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  int v72;
  unsigned __int8 *v73;
  int v74;
  unsigned __int8 *v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  unsigned __int8 *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  int v92;
  unsigned __int8 *v93;
  int v94;
  unsigned __int8 *v95;
  int v96;
  unsigned __int8 *v97;
  int v98;
  unsigned __int8 *v99;
  int v100;
  unsigned __int8 *v101;
  int v102;
  int v103;
  unsigned int m;
  unsigned int v105;
  int v106;
  int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned __int8 *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned __int8 *v113;
  unint64_t v114;
  unsigned __int8 *v115;
  int v116;
  unsigned __int8 *v117;
  int v118;
  unsigned __int8 *v119;
  unsigned int v120;
  unsigned int v121;
  unsigned __int8 *v122;
  unsigned int v123;
  char v124;
  unsigned __int8 *v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  unsigned __int8 *v129;
  unint64_t v130;
  unsigned __int8 *v131;
  int v132;
  unsigned __int8 *v133;
  int v134;
  unsigned __int8 *v135;
  unsigned int v136;
  unsigned int v137;
  unsigned int v138;
  int v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned __int8 *v146;
  int v147;
  unsigned __int8 *v148;
  int v149;
  unsigned __int8 *v150;
  unsigned int v151;
  unsigned int v152;
  int v153;
  unsigned int v154;
  unsigned __int8 *v155;
  unint64_t v156;
  unsigned __int8 *v157;
  int v158;
  unsigned __int8 *v159;
  int v160;
  unsigned __int8 *v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  unsigned __int8 *v167;
  int v168;
  unsigned __int8 *v169;
  int v170;
  unsigned __int8 *v171;
  int v172;
  unsigned __int8 *v173;
  int v174;
  unsigned __int8 *v175;
  int v176;
  unsigned __int8 *v177;
  int v178;
  uint64_t v179;
  unsigned __int8 *v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  unsigned int v189;
  unsigned __int8 *v190;
  unsigned int v191;
  int v192;
  int v193;
  int v194;
  int v195;
  unsigned int v196;
  unsigned __int8 *v197;
  unsigned int v198;
  _DWORD *v199;
  int v200;
  int v201;
  int v202;
  int v203;
  int v204;
  int v205;
  int v206;
  int v207;
  int v208;
  int v209;
  int v210;
  int v211;
  int v212;
  int v213;
  int v214;
  int v215;
  int v216;
  char *v217;
  uint64_t v218;
  unsigned __int8 *v219;
  unsigned __int8 *v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t);
  uint64_t v224;
  unint64_t v225;
  _BYTE v226[48];
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;

  if (a2 < 1)
    return 8;
  v227 = v7;
  v228 = v6;
  v229 = v4;
  v230 = v5;
  v9 = a3;
  v10 = a2;
  v11 = a1;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  memset(v226, 0, 32);
  v224 = 0;
  v225 = 0;
  result = aom_read_obu_header_and_size(a1, a2, *(_DWORD *)(a3 + 20), (uint64_t)v226, &v225, &v224);
  if ((_DWORD)result)
    return result;
  if (v226[8] != 2)
    goto LABEL_8;
  v13 = v10 >= v225 + v224;
  v10 -= v225 + v224;
  if (!v13)
    return 7;
  v11 += v225 + v224;
  result = aom_read_obu_header_and_size(v11, v10, *(_DWORD *)(v9 + 20), (uint64_t)v226, &v225, &v224);
  if (!(_DWORD)result)
  {
LABEL_8:
    v199 = a4;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = v10 - v224;
      if (v10 - v224 < v225)
        return 7;
      v18 = (char *)&v11[v224];
      v19 = v226[8] == 6 || v226[8] == 3;
      if (v19)
      {
        if (v15 && v14)
          goto LABEL_627;
        if (v10 == v224)
          return 7;
        if (v10 <= v224)
        {
          v20 = 0;
LABEL_21:
          v21 = 0;
          if (v10 > v224)
LABEL_29:
            v22 = (*v18 >> (v20 ^ 7)) & 1;
          else
            v22 = 0;
          v28 = v22 | (2 * v21);
          if (v28 == 2)
            v29 = 1;
          else
            v29 = v16;
          if (!v28)
          {
            if (v15)
LABEL_627:
              *(_DWORD *)(v9 + 8) = 1;
            goto LABEL_628;
          }
          v16 = v29;
        }
        else if ((*v18 & 0x80000000) == 0)
        {
          v20 = 1;
          if (v10 <= v224)
            goto LABEL_21;
          v21 = (*v18 >> 6) & 1;
          v20 = 2;
          goto LABEL_29;
        }
LABEL_35:
        v30 = v225;
        v10 = v17 - v225;
        if (v17 == v225)
          goto LABEL_628;
        goto LABEL_36;
      }
      if (v226[8] != 1)
        goto LABEL_35;
      if (v17 < 2)
        return 7;
      v23 = (char *)&v11[v10];
      v219 = &v11[v224];
      v220 = &v11[v10];
      v221 = 0;
      v222 = 0;
      v223 = 0;
      v24 = (v10 > v224) | (2 * (v10 > v224));
      if (v10 <= v224)
      {
        v217 = (char *)&v11[v224];
        v218 = v10 - v224;
        v27 = (v10 > v224) | (2 * (v10 > v224));
      }
      else
      {
        v25 = (*v18 >> (v24 ^ 7)) & 1;
        v26 = v24 + 1;
        LODWORD(v221) = v26;
        v217 = (char *)&v11[v224];
        v218 = v10 - v224;
        v31 = (*v18 >> (v26 ^ 7)) & 1;
        v27 = v26 + 1;
        LODWORD(v221) = v26 + 1;
        if (!v25 && v31)
          return 5;
        if (v31)
        {
          v49 = v26 + 2;
          if (&v18[v27 >> 3] < v23)
            v27 = v49;
          v50 = v27 + 2;
          LODWORD(v221) = v27 + 2;
          v51 = (v27 + 2) >> 3;
          if (&v18[v51] < v23)
          {
            v50 = v27 + 3;
            LODWORD(v221) = v27 + 3;
            v51 = (v27 + 3) >> 3;
          }
          if (&v18[v51] < v23)
          {
            v52 = v50 + 1;
            LODWORD(v221) = v52;
            *(_QWORD *)(v9 + 12) = 0x100000001;
            v53 = v219;
            v54 = (unint64_t)v220;
            v55 = &v219[(unint64_t)v52 >> 3];
            if (v55 < v220)
              goto LABEL_572;
            goto LABEL_581;
          }
          goto LABEL_580;
        }
      }
      if (v10 <= v224)
        goto LABEL_79;
      v32 = *v18;
      LODWORD(v221) = v27 + 1;
      if (((v32 >> (v27 ^ 7)) & 1) == 0)
        goto LABEL_79;
      v33 = 0;
      for (i = 33; i > 1; --i)
      {
        while (1)
        {
          v36 = &v219[(unint64_t)v221 >> 3];
          if (v36 >= v220)
            break;
          v35 = (*v36 >> (~(_BYTE)v221 & 7)) & 1;
          LODWORD(v221) = v221 + 1;
          v33 |= v35 << (i-- - 2);
          if (i <= 1)
            goto LABEL_48;
        }
      }
LABEL_48:
      v37 = 0;
      for (j = 33; j > 1; --j)
      {
        while (1)
        {
          v40 = &v219[(unint64_t)v221 >> 3];
          if (v40 >= v220)
            break;
          v39 = (*v40 >> (~(_BYTE)v221 & 7)) & 1;
          LODWORD(v221) = v221 + 1;
          v37 |= v39 << (j-- - 2);
          if (j <= 1)
            goto LABEL_52;
        }
      }
LABEL_52:
      result = 1;
      if (!v33 || !v37)
        return result;
      v41 = v221;
      v42 = &v219[(unint64_t)v221 >> 3];
      if (v42 < v220)
      {
        v43 = *v42;
        LODWORD(v221) = v221 + 1;
        if (((v43 >> (~v41 & 7)) & 1) != 0)
        {
          v44 = 0;
          for (k = 1; ; ++k)
          {
            v47 = v221;
            v48 = &v219[(unint64_t)v221 >> 3];
            if (v48 < v220)
            {
              v46 = *v48;
              LODWORD(v221) = v221 + 1;
              if (((v46 >> (~v47 & 7)) & 1) != 0)
                break;
            }
            if (++v44 == 32)
              return 1;
          }
          v56 = 0;
          if (v44)
          {
            do
            {
              while (1)
              {
                v58 = &v219[(unint64_t)v221 >> 3];
                if (v58 >= v220)
                  break;
                v57 = (*v58 >> (~(_BYTE)v221 & 7)) & 1;
                LODWORD(v221) = v221 + 1;
                v56 |= v57 << (k-- - 2);
                if (k <= 1)
                  goto LABEL_74;
              }
              --k;
            }
            while (k > 1);
          }
LABEL_74:
          if (v56 + ~(-1 << v44) == -1)
            return 1;
        }
      }
      v59 = v221;
      v60 = &v219[(unint64_t)v221 >> 3];
      if (v60 < v220 && (v61 = *v60, v62 = v221 + 1, LODWORD(v221) = v221 + 1, ((v61 >> (~(_BYTE)v59 & 7)) & 1) != 0))
      {
        v63 = &v219[v62 >> 3];
        if (v63 >= v220)
        {
          v64 = 0;
        }
        else
        {
          v64 = (*v63 >> (~(_BYTE)v62 & 7)) & 1;
          v62 = v59 + 2;
          LODWORD(v221) = v59 + 2;
        }
        v95 = &v219[v62 >> 3];
        if (v95 >= v220)
        {
          v96 = 0;
        }
        else
        {
          v96 = (*v95 >> (~(_BYTE)v62++ & 7)) & 1;
          LODWORD(v221) = v62;
        }
        v97 = &v219[v62 >> 3];
        if (v97 >= v220)
        {
          v98 = 0;
        }
        else
        {
          v98 = (*v97 >> (~(_BYTE)v62++ & 7)) & 1;
          LODWORD(v221) = v62;
        }
        v99 = &v219[v62 >> 3];
        if (v99 >= v220)
        {
          v100 = 0;
        }
        else
        {
          v100 = (*v99 >> (~(_BYTE)v62++ & 7)) & 1;
          LODWORD(v221) = v62;
        }
        v101 = &v219[v62 >> 3];
        if (v101 >= v220)
        {
          v102 = 0;
        }
        else
        {
          v102 = (*v101 >> (~(_BYTE)v62 & 7)) & 1;
          LODWORD(v221) = v62 + 1;
        }
        v103 = (16 * v64) | (8 * v96) | (4 * v98) | (2 * v100);
        for (m = 33; m > 1; --m)
        {
          if (&v219[(unint64_t)v221 >> 3] < v220)
            LODWORD(v221) = v221 + 1;
        }
        v105 = v221;
        if (&v219[(unint64_t)v221 >> 3] < v220)
        {
          v105 = v221 + 1;
          LODWORD(v221) = v221 + 1;
        }
        if (&v219[v105 >> 3] < v220)
          LODWORD(v221) = ++v105;
        if (&v219[v105 >> 3] < v220)
          LODWORD(v221) = ++v105;
        if (&v219[v105 >> 3] < v220)
          LODWORD(v221) = ++v105;
        if (&v219[v105 >> 3] < v220)
          LODWORD(v221) = ++v105;
        if (&v219[v105 >> 3] < v220)
          LODWORD(v221) = ++v105;
        if (&v219[v105 >> 3] < v220)
          LODWORD(v221) = ++v105;
        if (&v219[v105 >> 3] < v220)
          LODWORD(v221) = ++v105;
        if (&v219[v105 >> 3] < v220)
          LODWORD(v221) = ++v105;
        if (&v219[v105 >> 3] < v220)
          LODWORD(v221) = v105 + 1;
        v215 = 0;
        v65 = (v102 | v103) + 1;
        v66 = v221;
        v67 = v219;
        v68 = (unint64_t)v220;
        v69 = &v219[(unint64_t)v221 >> 3];
        if (v69 < v220)
        {
LABEL_80:
          v201 = (*v69 >> (~(_BYTE)v66++ & 7)) & 1;
          LODWORD(v221) = v66;
          v70 = &v67[v66 >> 3];
          if ((unint64_t)v70 < v68)
            goto LABEL_81;
          goto LABEL_174;
        }
      }
      else
      {
LABEL_79:
        v65 = 1;
        v215 = 1;
        v66 = v221;
        v67 = v219;
        v68 = (unint64_t)v220;
        v69 = &v219[(unint64_t)v221 >> 3];
        if (v69 < v220)
          goto LABEL_80;
      }
      v201 = 0;
      v70 = &v67[v66 >> 3];
      if ((unint64_t)v70 < v68)
      {
LABEL_81:
        v200 = (*v70 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v71 = &v67[v66 >> 3];
        if ((unint64_t)v71 < v68)
          goto LABEL_82;
        goto LABEL_175;
      }
LABEL_174:
      v200 = 0;
      v71 = &v67[v66 >> 3];
      if ((unint64_t)v71 < v68)
      {
LABEL_82:
        v72 = (*v71 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v73 = &v67[v66 >> 3];
        if ((unint64_t)v73 < v68)
          goto LABEL_83;
        goto LABEL_176;
      }
LABEL_175:
      v72 = 0;
      v73 = &v67[v66 >> 3];
      if ((unint64_t)v73 < v68)
      {
LABEL_83:
        v74 = (*v73 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v75 = &v67[v66 >> 3];
        if ((unint64_t)v75 < v68)
          goto LABEL_84;
        goto LABEL_177;
      }
LABEL_176:
      v74 = 0;
      v75 = &v67[v66 >> 3];
      if ((unint64_t)v75 < v68)
      {
LABEL_84:
        v76 = (*v75 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v77 = &v67[v66 >> 3];
        if ((unint64_t)v77 < v68)
          goto LABEL_85;
        goto LABEL_178;
      }
LABEL_177:
      v76 = 0;
      v77 = &v67[v66 >> 3];
      if ((unint64_t)v77 < v68)
      {
LABEL_85:
        v78 = (*v77 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v79 = &v67[v66 >> 3];
        if ((unint64_t)v79 < v68)
          goto LABEL_86;
        goto LABEL_179;
      }
LABEL_178:
      v78 = 0;
      v79 = &v67[v66 >> 3];
      if ((unint64_t)v79 < v68)
      {
LABEL_86:
        v213 = (*v79 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v80 = &v67[v66 >> 3];
        if ((unint64_t)v80 < v68)
          goto LABEL_87;
        goto LABEL_180;
      }
LABEL_179:
      v213 = 0;
      v80 = &v67[v66 >> 3];
      if ((unint64_t)v80 < v68)
      {
LABEL_87:
        v212 = (*v80 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v81 = &v67[v66 >> 3];
        if ((unint64_t)v81 < v68)
          goto LABEL_88;
        goto LABEL_181;
      }
LABEL_180:
      v212 = 0;
      v81 = &v67[v66 >> 3];
      if ((unint64_t)v81 < v68)
      {
LABEL_88:
        v211 = (*v81 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v82 = &v67[v66 >> 3];
        if ((unint64_t)v82 < v68)
          goto LABEL_89;
        goto LABEL_182;
      }
LABEL_181:
      v211 = 0;
      v82 = &v67[v66 >> 3];
      if ((unint64_t)v82 < v68)
      {
LABEL_89:
        v210 = (*v82 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v83 = &v67[v66 >> 3];
        if ((unint64_t)v83 < v68)
          goto LABEL_90;
        goto LABEL_183;
      }
LABEL_182:
      v210 = 0;
      v83 = &v67[v66 >> 3];
      if ((unint64_t)v83 < v68)
      {
LABEL_90:
        v209 = (*v83 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v84 = &v67[v66 >> 3];
        if ((unint64_t)v84 < v68)
          goto LABEL_91;
        goto LABEL_184;
      }
LABEL_183:
      v209 = 0;
      v84 = &v67[v66 >> 3];
      if ((unint64_t)v84 < v68)
      {
LABEL_91:
        v208 = (*v84 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v85 = &v67[v66 >> 3];
        if ((unint64_t)v85 < v68)
          goto LABEL_92;
        goto LABEL_185;
      }
LABEL_184:
      v208 = 0;
      v85 = &v67[v66 >> 3];
      if ((unint64_t)v85 < v68)
      {
LABEL_92:
        v207 = (*v85 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v86 = &v67[v66 >> 3];
        if ((unint64_t)v86 < v68)
          goto LABEL_93;
        goto LABEL_186;
      }
LABEL_185:
      v207 = 0;
      v86 = &v67[v66 >> 3];
      if ((unint64_t)v86 < v68)
      {
LABEL_93:
        v206 = (*v86 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v87 = &v67[v66 >> 3];
        if ((unint64_t)v87 < v68)
          goto LABEL_94;
        goto LABEL_187;
      }
LABEL_186:
      v206 = 0;
      v87 = &v67[v66 >> 3];
      if ((unint64_t)v87 < v68)
      {
LABEL_94:
        v205 = (*v87 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v88 = &v67[v66 >> 3];
        if ((unint64_t)v88 < v68)
          goto LABEL_95;
        goto LABEL_188;
      }
LABEL_187:
      v205 = 0;
      v88 = &v67[v66 >> 3];
      if ((unint64_t)v88 < v68)
      {
LABEL_95:
        v204 = (*v88 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v89 = &v67[v66 >> 3];
        if ((unint64_t)v89 < v68)
          goto LABEL_96;
        goto LABEL_189;
      }
LABEL_188:
      v204 = 0;
      v89 = &v67[v66 >> 3];
      if ((unint64_t)v89 < v68)
      {
LABEL_96:
        v203 = (*v89 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v90 = &v67[v66 >> 3];
        if ((unint64_t)v90 < v68)
          goto LABEL_97;
        goto LABEL_190;
      }
LABEL_189:
      v203 = 0;
      v90 = &v67[v66 >> 3];
      if ((unint64_t)v90 < v68)
      {
LABEL_97:
        v202 = (*v90 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v91 = &v67[v66 >> 3];
        if ((unint64_t)v91 < v68)
          goto LABEL_98;
        goto LABEL_191;
      }
LABEL_190:
      v202 = 0;
      v91 = &v67[v66 >> 3];
      if ((unint64_t)v91 < v68)
      {
LABEL_98:
        v92 = (*v91 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        v93 = &v67[v66 >> 3];
        if ((unint64_t)v93 < v68)
          goto LABEL_99;
        goto LABEL_192;
      }
LABEL_191:
      v92 = 0;
      v93 = &v67[v66 >> 3];
      if ((unint64_t)v93 < v68)
      {
LABEL_99:
        v94 = (*v93 >> (~(_BYTE)v66++ & 7)) & 1;
        LODWORD(v221) = v66;
        if ((unint64_t)&v67[v66 >> 3] >= v68)
          goto LABEL_160;
LABEL_100:
        LODWORD(v221) = ++v66;
        goto LABEL_160;
      }
LABEL_192:
      v94 = 0;
      if ((unint64_t)&v67[v66 >> 3] < v68)
        goto LABEL_100;
LABEL_160:
      if ((unint64_t)&v67[v66 >> 3] < v68)
        LODWORD(v221) = ++v66;
      if ((unint64_t)&v67[v66 >> 3] < v68)
        LODWORD(v221) = v66 + 1;
      v106 = v78 | (2 * v76) | (16 * v200) | (8 * v72) | (4 * v74);
      v107 = (16 * v92) | (8 * v94);
      if (!v215)
      {
        v109 = v221;
        if (v201)
        {
          if (v107 && &v219[(unint64_t)v221 >> 3] < v220)
          {
            v109 = v221 + 1;
            LODWORD(v221) = v221 + 1;
          }
          v122 = &v219[v109 >> 3];
          if (v122 >= v220)
            goto LABEL_303;
          v123 = *v122;
          LODWORD(v221) = v109 + 1;
          if (((v123 >> (~(_BYTE)v109 & 7)) & 1) == 0)
            goto LABEL_305;
          aom_rb_read_literal((uint64_t)&v219, v65);
          aom_rb_read_literal((uint64_t)&v219, v65);
          if (&v219[(unint64_t)v221 >> 3] >= v220)
          {
LABEL_303:
            if (v223)
              v223(v222);
          }
          else
          {
            LODWORD(v221) = v221 + 1;
          }
LABEL_305:
          v124 = v221;
          v125 = &v219[(unint64_t)v221 >> 3];
          if (v125 >= v220)
          {
            if (v223)
              v223(v222);
          }
          else
          {
            v126 = *v125;
            LODWORD(v221) = v221 + 1;
            if (((v126 >> (~v124 & 7)) & 1) != 0)
              aom_rb_read_literal((uint64_t)&v219, 4);
          }
          if (!v106)
            goto LABEL_570;
          v127 = 1;
          while (2)
          {
            v128 = v221;
            v129 = v219;
            v130 = (unint64_t)v220;
            if (&v219[(unint64_t)v221 >> 3] >= v220)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              v128 = v221 + 1;
              LODWORD(v221) = v221 + 1;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            v131 = &v129[v128 >> 3];
            if ((unint64_t)v131 >= v130)
            {
              if (v223)
              {
                v223(v222);
                v132 = 0;
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
                v133 = &v219[v221 >> 3];
                if (v133 >= v220)
                  goto LABEL_368;
              }
              else
              {
                v132 = 0;
                v133 = &v129[v128 >> 3];
                if ((unint64_t)v133 >= v130)
                  goto LABEL_368;
              }
LABEL_364:
              v134 = (*v133 >> (~(_BYTE)v128++ & 7)) & 1;
              LODWORD(v221) = v128;
              if ((unint64_t)&v129[v128 >> 3] < v130)
                goto LABEL_365;
LABEL_370:
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              v132 = (*v131 >> (~(_BYTE)v128++ & 7)) & 1;
              LODWORD(v221) = v128;
              v133 = &v129[v128 >> 3];
              if ((unint64_t)v133 < v130)
                goto LABEL_364;
LABEL_368:
              if (v223)
              {
                v223(v222);
                v134 = 0;
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
                if (&v219[v221 >> 3] >= v220)
                  goto LABEL_370;
              }
              else
              {
                v134 = 0;
                if ((unint64_t)&v129[v128 >> 3] >= v130)
                  goto LABEL_370;
              }
LABEL_365:
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((unint64_t)&v129[v128 >> 3] >= v130)
            {
              if (v223)
              {
                v223(v222);
                v128 = v221;
                v129 = v219;
                v130 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v128;
            }
            if ((16 * v132) | (8 * v134))
            {
              if ((unint64_t)&v129[v128 >> 3] >= v130)
              {
                if (v223)
                {
                  v223(v222);
                  v128 = v221;
                  v129 = v219;
                  v130 = (unint64_t)v220;
                }
              }
              else
              {
                LODWORD(v221) = ++v128;
              }
            }
            v135 = &v129[v128 >> 3];
            if ((unint64_t)v135 >= v130)
              goto LABEL_401;
            v136 = *v135;
            LODWORD(v221) = v128 + 1;
            if (((v136 >> (~(_BYTE)v128 & 7)) & 1) == 0)
              goto LABEL_403;
            v137 = v65 + 1;
            do
            {
              if (&v219[(unint64_t)v221 >> 3] < v220)
              {
                LODWORD(v221) = v221 + 1;
              }
              else if (v223)
              {
                v223(v222);
              }
              --v137;
            }
            while (v137 > 1);
            v138 = v65 + 1;
            do
            {
              if (&v219[(unint64_t)v221 >> 3] < v220)
              {
                LODWORD(v221) = v221 + 1;
              }
              else if (v223)
              {
                v223(v222);
              }
              --v138;
            }
            while (v138 > 1);
            if (&v219[(unint64_t)v221 >> 3] >= v220)
            {
LABEL_401:
              if (v223)
                v223(v222);
            }
            else
            {
              LODWORD(v221) = v221 + 1;
            }
LABEL_403:
            v139 = v221;
            v140 = v219;
            v141 = v220;
            v142 = &v219[(unint64_t)v221 >> 3];
            if (v142 >= v220)
            {
LABEL_422:
              if (v223)
                v223(v222);
            }
            else
            {
              v143 = *v142;
              v144 = v221 + 1;
              LODWORD(v221) = v221 + 1;
              if (((v143 >> (~(_BYTE)v139 & 7)) & 1) != 0)
              {
                if (&v219[v144 >> 3] >= v220)
                {
                  if (v223)
                  {
                    v223(v222);
                    v144 = v221;
                    v140 = v219;
                    v141 = v220;
                  }
                }
                else
                {
                  v144 = v139 + 2;
                  LODWORD(v221) = v139 + 2;
                }
                if (&v140[v144 >> 3] >= v141)
                {
                  if (v223)
                  {
                    v223(v222);
                    v144 = v221;
                    v140 = v219;
                    v141 = v220;
                  }
                }
                else
                {
                  LODWORD(v221) = ++v144;
                }
                if (&v140[v144 >> 3] >= v141)
                {
                  if (v223)
                  {
                    v223(v222);
                    v144 = v221;
                    v140 = v219;
                    v141 = v220;
                  }
                }
                else
                {
                  LODWORD(v221) = ++v144;
                }
                if (&v140[v144 >> 3] >= v141)
                  goto LABEL_422;
                LODWORD(v221) = v144 + 1;
              }
            }
            v19 = v127++ == v106;
            if (v19)
              goto LABEL_570;
            continue;
          }
        }
        if (v107 && &v219[(unint64_t)v221 >> 3] < v220)
        {
          v109 = v221 + 1;
          LODWORD(v221) = v221 + 1;
        }
        v150 = &v219[v109 >> 3];
        if (v150 >= v220)
          goto LABEL_472;
        v151 = *v150;
        LODWORD(v221) = v109 + 1;
        if (((v151 >> (~(_BYTE)v109 & 7)) & 1) == 0)
          goto LABEL_474;
        aom_rb_read_literal((uint64_t)&v219, v65);
        aom_rb_read_literal((uint64_t)&v219, v65);
        if (&v219[(unint64_t)v221 >> 3] >= v220)
        {
LABEL_472:
          if (v223)
            v223(v222);
        }
        else
        {
          LODWORD(v221) = v221 + 1;
        }
LABEL_474:
        if (!v106)
          goto LABEL_570;
        v152 = v65 + 1;
        v153 = 1;
        while (2)
        {
          v154 = v221;
          v155 = v219;
          v156 = (unint64_t)v220;
          if (&v219[(unint64_t)v221 >> 3] >= v220)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            v154 = v221 + 1;
            LODWORD(v221) = v221 + 1;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          v157 = &v155[v154 >> 3];
          if ((unint64_t)v157 >= v156)
          {
            if (v223)
            {
              v223(v222);
              v158 = 0;
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
              v159 = &v219[v221 >> 3];
              if (v159 >= v220)
                goto LABEL_532;
            }
            else
            {
              v158 = 0;
              v159 = &v155[v154 >> 3];
              if ((unint64_t)v159 >= v156)
                goto LABEL_532;
            }
LABEL_528:
            v160 = (*v159 >> (~(_BYTE)v154++ & 7)) & 1;
            LODWORD(v221) = v154;
            if ((unint64_t)&v155[v154 >> 3] < v156)
              goto LABEL_529;
LABEL_534:
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            v158 = (*v157 >> (~(_BYTE)v154++ & 7)) & 1;
            LODWORD(v221) = v154;
            v159 = &v155[v154 >> 3];
            if ((unint64_t)v159 < v156)
              goto LABEL_528;
LABEL_532:
            if (v223)
            {
              v223(v222);
              v160 = 0;
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
              if (&v219[v221 >> 3] >= v220)
                goto LABEL_534;
            }
            else
            {
              v160 = 0;
              if ((unint64_t)&v155[v154 >> 3] >= v156)
                goto LABEL_534;
            }
LABEL_529:
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((unint64_t)&v155[v154 >> 3] >= v156)
          {
            if (v223)
            {
              v223(v222);
              v154 = v221;
              v155 = v219;
              v156 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v154;
          }
          if ((16 * v158) | (8 * v160))
          {
            if ((unint64_t)&v155[v154 >> 3] >= v156)
            {
              if (v223)
              {
                v223(v222);
                v154 = v221;
                v155 = v219;
                v156 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v154;
            }
          }
          v161 = &v155[v154 >> 3];
          if ((unint64_t)v161 >= v156)
          {
LABEL_564:
            if (v223)
              v223(v222);
          }
          else
          {
            v162 = *v161;
            LODWORD(v221) = v154 + 1;
            if (((v162 >> (~(_BYTE)v154 & 7)) & 1) != 0)
            {
              v163 = v152;
              do
              {
                if (&v219[(unint64_t)v221 >> 3] < v220)
                {
                  LODWORD(v221) = v221 + 1;
                }
                else if (v223)
                {
                  v223(v222);
                }
                --v163;
              }
              while (v163 > 1);
              v164 = v152;
              do
              {
                if (&v219[(unint64_t)v221 >> 3] < v220)
                {
                  LODWORD(v221) = v221 + 1;
                }
                else if (v223)
                {
                  v223(v222);
                }
                --v164;
              }
              while (v164 > 1);
              if (&v219[(unint64_t)v221 >> 3] >= v220)
                goto LABEL_564;
              LODWORD(v221) = v221 + 1;
            }
          }
          v19 = v153++ == v106;
          if (v19)
            goto LABEL_570;
          continue;
        }
      }
      if (v201)
      {
        v108 = v221;
        if (v107 && &v219[(unint64_t)v221 >> 3] < v220)
        {
          v108 = v221 + 1;
          LODWORD(v221) = v221 + 1;
        }
        v110 = &v219[v108 >> 3];
        if (v110 < v220)
        {
          v111 = *v110;
          LODWORD(v221) = v108 + 1;
          if (((v111 >> (~(_BYTE)v108 & 7)) & 1) != 0)
            aom_rb_read_literal((uint64_t)&v219, 4);
        }
        if (!v106)
          goto LABEL_570;
        while (1)
        {
          v112 = v221;
          v113 = v219;
          v114 = (unint64_t)v220;
          if (&v219[(unint64_t)v221 >> 3] >= v220)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            v112 = v221 + 1;
            LODWORD(v221) = v221 + 1;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          v115 = &v113[v112 >> 3];
          if ((unint64_t)v115 >= v114)
          {
            if (v223)
            {
              v223(v222);
              v116 = 0;
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
              v117 = &v219[v221 >> 3];
              if (v117 < v220)
                goto LABEL_257;
            }
            else
            {
              v116 = 0;
              v117 = &v113[v112 >> 3];
              if ((unint64_t)v117 < v114)
              {
LABEL_257:
                v118 = (*v117 >> (~(_BYTE)v112++ & 7)) & 1;
                LODWORD(v221) = v112;
                if ((unint64_t)&v113[v112 >> 3] < v114)
                  goto LABEL_258;
                goto LABEL_263;
              }
            }
          }
          else
          {
            v116 = (*v115 >> (~(_BYTE)v112++ & 7)) & 1;
            LODWORD(v221) = v112;
            v117 = &v113[v112 >> 3];
            if ((unint64_t)v117 < v114)
              goto LABEL_257;
          }
          if (v223)
          {
            v223(v222);
            v118 = 0;
            v112 = v221;
            v113 = v219;
            v114 = (unint64_t)v220;
            if (&v219[v221 >> 3] < v220)
              goto LABEL_258;
          }
          else
          {
            v118 = 0;
            if ((unint64_t)&v113[v112 >> 3] < v114)
            {
LABEL_258:
              LODWORD(v221) = ++v112;
              goto LABEL_265;
            }
          }
LABEL_263:
          if (v223)
          {
            v223(v222);
            v112 = v221;
            v113 = v219;
            v114 = (unint64_t)v220;
          }
LABEL_265:
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((unint64_t)&v113[v112 >> 3] >= v114)
          {
            if (v223)
            {
              v223(v222);
              v112 = v221;
              v113 = v219;
              v114 = (unint64_t)v220;
            }
          }
          else
          {
            LODWORD(v221) = ++v112;
          }
          if ((16 * v116) | (8 * v118))
          {
            if ((unint64_t)&v113[v112 >> 3] >= v114)
            {
              if (v223)
              {
                v223(v222);
                v112 = v221;
                v113 = v219;
                v114 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v112;
            }
          }
          v119 = &v113[v112 >> 3];
          if ((unint64_t)v119 >= v114)
          {
LABEL_297:
            if (v223)
              v223(v222);
            goto LABEL_206;
          }
          v120 = *v119;
          v121 = v112 + 1;
          LODWORD(v221) = v112 + 1;
          if (((v120 >> (~(_BYTE)v112 & 7)) & 1) != 0)
          {
            if ((unint64_t)&v113[v121 >> 3] >= v114)
            {
              if (v223)
              {
                v223(v222);
                v121 = v221;
                v113 = v219;
                v114 = (unint64_t)v220;
              }
            }
            else
            {
              v121 = v112 + 2;
              LODWORD(v221) = v112 + 2;
            }
            if ((unint64_t)&v113[v121 >> 3] >= v114)
            {
              if (v223)
              {
                v223(v222);
                v121 = v221;
                v113 = v219;
                v114 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v121;
            }
            if ((unint64_t)&v113[v121 >> 3] >= v114)
            {
              if (v223)
              {
                v223(v222);
                v121 = v221;
                v113 = v219;
                v114 = (unint64_t)v220;
              }
            }
            else
            {
              LODWORD(v221) = ++v121;
            }
            if ((unint64_t)&v113[v121 >> 3] >= v114)
              goto LABEL_297;
            LODWORD(v221) = v121 + 1;
          }
LABEL_206:
          if (!--v106)
            goto LABEL_570;
        }
      }
      if (v107 && &v219[(unint64_t)v221 >> 3] < v220)
        LODWORD(v221) = v221 + 1;
      while (v106)
      {
        v145 = v221;
        if (&v219[(unint64_t)v221 >> 3] < v220)
        {
          v145 = v221 + 1;
          LODWORD(v221) = v221 + 1;
        }
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        v146 = &v219[v145 >> 3];
        if (v146 >= v220)
        {
          v147 = 0;
          v148 = &v219[v145 >> 3];
          if (v148 >= v220)
          {
LABEL_466:
            v149 = 0;
            if (&v219[v145 >> 3] >= v220)
              goto LABEL_458;
LABEL_455:
            LODWORD(v221) = ++v145;
            goto LABEL_458;
          }
        }
        else
        {
          v147 = (*v146 >> (~(_BYTE)v145++ & 7)) & 1;
          LODWORD(v221) = v145;
          v148 = &v219[v145 >> 3];
          if (v148 >= v220)
            goto LABEL_466;
        }
        v149 = (*v148 >> (~(_BYTE)v145++ & 7)) & 1;
        LODWORD(v221) = v145;
        if (&v219[v145 >> 3] < v220)
          goto LABEL_455;
LABEL_458:
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = ++v145;
        if (&v219[v145 >> 3] < v220)
          LODWORD(v221) = v145 + 1;
        if ((16 * v147) | (8 * v149) && &v219[(unint64_t)v221 >> 3] < v220)
          LODWORD(v221) = v221 + 1;
        --v106;
      }
LABEL_570:
      v165 = (32 * v207) | (16 * v206) | (v211 << 9) | (v210 << 8) | (v213 << 11) | (v212 << 10) | (v208 << 6) | (v209 << 7);
      v166 = (8 * v205) | (4 * v204) | v165;
      v31 = 0;
      if ((2 * v203) | v202 | v166)
      {
        *(_DWORD *)(v9 + 12) = v211 + v210 + v212 + v213;
        *(_DWORD *)(v9 + 16) = ((((2 * v203) | v202 | v166) >> 1) & 1)
                             + (v202 & 1 | v166 & 1)
                             + ((v166 >> 2) & 1)
                             + ((v166 >> 3) & 1)
                             + ((v165 >> 4) & 1)
                             + ((v165 >> 5) & 1)
                             + v208
                             + v209;
        v52 = v221;
        v53 = v219;
        v54 = (unint64_t)v220;
        v55 = &v219[(unint64_t)v221 >> 3];
        if (v55 < v220)
          goto LABEL_572;
        goto LABEL_581;
      }
LABEL_580:
      *(_QWORD *)(v9 + 12) = 0x100000001;
      v52 = v221;
      v53 = v219;
      v54 = (unint64_t)v220;
      v55 = &v219[(unint64_t)v221 >> 3];
      if (v55 < v220)
      {
LABEL_572:
        v214 = (*v55 >> (~(_BYTE)v52++ & 7)) & 1;
        LODWORD(v221) = v52;
        v167 = &v53[v52 >> 3];
        if ((unint64_t)v167 < v54)
          goto LABEL_573;
        goto LABEL_583;
      }
LABEL_581:
      if (v223)
      {
        v223(v222);
        v214 = 0;
        v52 = v221;
        v53 = v219;
        v54 = (unint64_t)v220;
        v167 = &v219[v221 >> 3];
        if (v167 < v220)
          goto LABEL_573;
      }
      else
      {
        v214 = 0;
        v167 = &v53[v52 >> 3];
        if ((unint64_t)v167 < v54)
        {
LABEL_573:
          v168 = (*v167 >> (~(_BYTE)v52++ & 7)) & 1;
          LODWORD(v221) = v52;
          v169 = &v53[v52 >> 3];
          if ((unint64_t)v169 < v54)
            goto LABEL_574;
          goto LABEL_585;
        }
      }
LABEL_583:
      if (v223)
      {
        v223(v222);
        v168 = 0;
        v52 = v221;
        v53 = v219;
        v54 = (unint64_t)v220;
        v169 = &v219[v221 >> 3];
        if (v169 < v220)
          goto LABEL_574;
      }
      else
      {
        v168 = 0;
        v169 = &v53[v52 >> 3];
        if ((unint64_t)v169 < v54)
        {
LABEL_574:
          v170 = (*v169 >> (~(_BYTE)v52++ & 7)) & 1;
          LODWORD(v221) = v52;
          v171 = &v53[v52 >> 3];
          if ((unint64_t)v171 < v54)
            goto LABEL_575;
          goto LABEL_587;
        }
      }
LABEL_585:
      if (v223)
      {
        v223(v222);
        v170 = 0;
        v52 = v221;
        v53 = v219;
        v54 = (unint64_t)v220;
        v171 = &v219[v221 >> 3];
        if (v171 < v220)
          goto LABEL_575;
      }
      else
      {
        v170 = 0;
        v171 = &v53[v52 >> 3];
        if ((unint64_t)v171 < v54)
        {
LABEL_575:
          v172 = (*v171 >> (~(_BYTE)v52++ & 7)) & 1;
          LODWORD(v221) = v52;
          v173 = &v53[v52 >> 3];
          if ((unint64_t)v173 < v54)
            goto LABEL_576;
          goto LABEL_589;
        }
      }
LABEL_587:
      if (v223)
      {
        v223(v222);
        v172 = 0;
        v52 = v221;
        v53 = v219;
        v54 = (unint64_t)v220;
        v173 = &v219[v221 >> 3];
        if (v173 < v220)
          goto LABEL_576;
      }
      else
      {
        v172 = 0;
        v173 = &v53[v52 >> 3];
        if ((unint64_t)v173 < v54)
        {
LABEL_576:
          v174 = (*v173 >> (~(_BYTE)v52++ & 7)) & 1;
          LODWORD(v221) = v52;
          v216 = v31;
          v175 = &v53[v52 >> 3];
          if ((unint64_t)v175 < v54)
            goto LABEL_577;
          goto LABEL_591;
        }
      }
LABEL_589:
      if (v223)
      {
        v223(v222);
        v174 = 0;
        v52 = v221;
        v53 = v219;
        v54 = (unint64_t)v220;
        v216 = v31;
        v175 = &v219[v221 >> 3];
        if (v175 < v220)
          goto LABEL_577;
      }
      else
      {
        v174 = 0;
        v216 = v31;
        v175 = &v53[v52 >> 3];
        if ((unint64_t)v175 < v54)
        {
LABEL_577:
          v176 = (*v175 >> (~(_BYTE)v52++ & 7)) & 1;
          LODWORD(v221) = v52;
          v177 = &v53[v52 >> 3];
          if ((unint64_t)v177 < v54)
            goto LABEL_578;
          goto LABEL_593;
        }
      }
LABEL_591:
      if (v223)
      {
        v223(v222);
        v176 = 0;
        v52 = v221;
        v53 = v219;
        v54 = (unint64_t)v220;
        v177 = &v219[v221 >> 3];
        if (v177 < v220)
          goto LABEL_578;
      }
      else
      {
        v176 = 0;
        v177 = &v53[v52 >> 3];
        if ((unint64_t)v177 < v54)
        {
LABEL_578:
          v178 = (*v177 >> (~(_BYTE)v52++ & 7)) & 1;
          LODWORD(v221) = v52;
          v179 = v16;
          v180 = &v53[v52 >> 3];
          v181 = v9;
          if ((unint64_t)v180 >= v54)
            goto LABEL_595;
          goto LABEL_579;
        }
      }
LABEL_593:
      if (v223)
      {
        v223(v222);
        v178 = 0;
        v52 = v221;
        v179 = v16;
        v180 = &v219[v221 >> 3];
        v181 = v9;
        if (v180 >= v220)
          goto LABEL_595;
      }
      else
      {
        v178 = 0;
        v179 = v16;
        v180 = &v53[v52 >> 3];
        v181 = v9;
        if ((unint64_t)v180 >= v54)
        {
LABEL_595:
          if (v223)
            v223(v222);
          v182 = 0;
          goto LABEL_598;
        }
      }
LABEL_579:
      v182 = (*v180 >> (~(_BYTE)v52 & 7)) & 1;
      LODWORD(v221) = v52 + 1;
LABEL_598:
      v183 = 0;
      v184 = 2 * v170;
      v185 = 8 * v174;
      v186 = 2 * v178;
      v187 = v172 + 8 * v214 + 4 * v168 + v184;
      v18 = v217;
      do
      {
        while (1)
        {
          v190 = &v219[(unint64_t)v221 >> 3];
          if (v190 >= v220)
            break;
          v188 = (*v190 >> (~(_BYTE)v221 & 7)) & 1;
          LODWORD(v221) = v221 + 1;
          v183 |= v188 << v187;
          v189 = v187-- + 1;
          if (v189 <= 1)
            goto LABEL_604;
        }
        if (v223)
          v223(v222);
        v191 = v187-- + 1;
      }
      while (v191 > 1);
LABEL_604:
      v192 = 0;
      v193 = v183 + 1;
      v194 = v182 + v185 + 4 * v176 + v186;
      v9 = v181;
      v16 = v179;
      do
      {
        while (1)
        {
          v197 = &v219[(unint64_t)v221 >> 3];
          if (v197 >= v220)
            break;
          v195 = (*v197 >> (~(_BYTE)v221 & 7)) & 1;
          LODWORD(v221) = v221 + 1;
          v192 |= v195 << v194;
          v196 = v194-- + 1;
          if (v196 <= 1)
            goto LABEL_610;
        }
        if (v223)
          v223(v222);
        v198 = v194-- + 1;
      }
      while (v198 > 1);
LABEL_610:
      *(_DWORD *)v9 = v193;
      *(_DWORD *)(v9 + 4) = v192 + 1;
      v15 = 1;
      v14 = v216;
      v30 = v225;
      v10 = v218 - v225;
      if (v218 == v225)
      {
LABEL_628:
        result = 0;
        if (v199)
          *v199 = v16;
        return result;
      }
LABEL_36:
      v11 = (unsigned __int8 *)&v18[v30];
      result = aom_read_obu_header_and_size(&v18[v30], v10, *(_DWORD *)(v9 + 20), (uint64_t)v226, &v225, &v224);
    }
    while (!(_DWORD)result);
  }
  return result;
}

BOOL frame_worker_hook(uint64_t *a1)
{
  uint64_t v2;
  int v4;
  unsigned __int8 *v6;

  v2 = *a1;
  v6 = (unsigned __int8 *)a1[1];
  v4 = av1_receive_compressed_data(v2, a1[3], &v6);
  a1[2] = (uint64_t)v6;
  if (v4)
    *(_DWORD *)(*a1 + 363888) = 1;
  return v4 == 0;
}

_QWORD *add_grain_if_needed(uint64_t a1, int *a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v4 = (uint64_t)a2;
  if (*a4)
  {
    v8 = (a2[10] + 1) & 0xFFFFFFFE;
    v9 = (a2[11] + 1) & 0xFFFFFFFE;
    v10 = *(_QWORD *)(a1 + 25360);
    v11 = *(_QWORD *)(a1 + 25344);
    v12 = a1 + 24 * v11 + 25248;
    v14[0] = v10;
    v14[1] = v12;
    if (img_alloc_helper_0(a3, *a2, v8, v9, 0x10u, 0x10u, 1u, 0, 0, (uint64_t (*)(uint64_t, unint64_t))AllocWithGetFrameBufferCb, (uint64_t)v14))
    {
      a3[16] = *(_QWORD *)(v4 + 128);
      a3[20] = *(_QWORD *)(a1 + 24 * v11 + 25264);
      if (!av1_add_film_grain((uint64_t)a4, v4, (uint64_t)a3))
      {
        ++*(_QWORD *)(a1 + 25344);
        return a3;
      }
      (*(void (**)(_QWORD, uint64_t))(v10 + 80))(*(_QWORD *)(v10 + 64), v12);
    }
    return 0;
  }
  return (_QWORD *)v4;
}

uint64_t AllocWithGetFrameBufferCb(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;

  if (((*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(*a1 + 72))(*(_QWORD *)(*a1 + 64), a2, a1[1]) & 0x80000000) != 0)
    return 0;
  v4 = (_QWORD *)a1[1];
  if (!*v4)
    return 0;
  if (v4[1] >= a2)
    return *v4;
  return 0;
}

uint64_t av1_block_error_neon(int32x4_t *a1, int32x4_t *a2, uint64_t a3, _QWORD *a4)
{
  int64x2_t v4;
  int64x2_t v5;
  int16x4_t v6;
  int16x4_t v7;
  int16x4_t v8;
  int16x4_t v9;
  uint16x4_t v10;
  uint16x4_t v11;
  uint32x4_t v12;
  uint16x4_t v13;
  uint32x4_t v14;
  uint16x4_t v15;

  v4 = 0uLL;
  v5 = 0uLL;
  do
  {
    v6 = vmovn_s32(*a1);
    v7 = vmovn_s32(a1[1]);
    v8 = vmovn_s32(a1[2]);
    v9 = vmovn_s32(a1[3]);
    v10 = (uint16x4_t)vabd_s16(v6, vmovn_s32(*a2));
    v11 = (uint16x4_t)vabd_s16(v7, vmovn_s32(a2[1]));
    v12 = vmlal_u16(vmull_u16(v11, v11), v10, v10);
    v13 = (uint16x4_t)vabd_s16(v8, vmovn_s32(a2[2]));
    v14 = vmlal_u16(v12, v13, v13);
    v15 = (uint16x4_t)vabd_s16(v9, vmovn_s32(a2[3]));
    v5 = (int64x2_t)vpadalq_u32((uint64x2_t)v5, vmlal_u16(v14, v15, v15));
    v4 = vpadalq_s32(vpadalq_s32(v4, vmlal_s16(vmull_s16(v7, v7), v6, v6)), vmlal_s16(vmull_s16(v9, v9), v8, v8));
    a1 += 4;
    a2 += 4;
    a3 -= 16;
  }
  while (a3);
  *a4 = vaddvq_s64(v4);
  return vaddvq_s64(v5);
}

_DWORD *av1_fdct4(_DWORD *result, int *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v3 = result[3] + *result;
  *a2 = v3;
  v4 = result[2] + result[1];
  a2[1] = v4;
  v5 = result[1] - result[2];
  a2[2] = v5;
  v6 = *result - result[3];
  v7 = av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v8 = 1 << (a3 - 1);
  v9 = v8 + v7 * v3;
  v10 = (v9 + v7 * v4) >> a3;
  v11 = (v9 + -(v7 * v4)) >> a3;
  v12 = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v13 = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  *a2 = v10;
  a2[1] = (v8 + v12 * v5 + v13 * v6) >> a3;
  a2[2] = v11;
  a2[3] = (v8 + v12 * v6 + -(v5 * v13)) >> a3;
  return result;
}

uint64_t av1_fdct8(_DWORD *a1, int *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t result;
  int v31;
  int v32;

  v3 = a1[7] + *a1;
  *a2 = v3;
  v4 = a1[6] + a1[1];
  a2[1] = v4;
  v5 = a1[5] + a1[2];
  a2[2] = v5;
  v6 = a1[4] + a1[3];
  a2[3] = v6;
  v7 = a1[3] - a1[4];
  a2[4] = v7;
  v8 = a1[2] - a1[5];
  a2[5] = v8;
  v9 = a1[1] - a1[6];
  a2[6] = v9;
  v10 = 1 << (a3 - 1);
  v11 = av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v12 = v10 + v11 * v9;
  v13 = v12 + -(v11 * v8);
  v14 = v12 + v11 * v8;
  v15 = v10 + v11 * (v6 + v3);
  v16 = v5 + v4;
  v17 = v13 >> a3;
  v18 = v14 >> a3;
  v19 = (v15 + v11 * (v5 + v4)) >> a3;
  v20 = v4 - v5;
  v21 = (v15 + -(v11 * v16)) >> a3;
  LODWORD(v15) = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v22 = *a1 - a1[7];
  v23 = v3 - v6;
  v24 = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v25 = (v10 + (int)v15 * v20 + v24 * v23) >> a3;
  v26 = (v10 + (int)v15 * v23 + -(v20 * v24)) >> a3;
  v27 = v7 + v17;
  v28 = v7 - v17;
  v29 = v22 - v18;
  LODWORD(v18) = v22 + v18;
  LODWORD(v15) = av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  result = av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v31 = av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v32 = av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  *a2 = v19;
  a2[1] = (v10 + (int)v15 * v27 + (int)result * (int)v18) >> a3;
  a2[2] = v25;
  a2[3] = (v10 + v31 * v29 + -(v28 * v32)) >> a3;
  a2[4] = v21;
  a2[5] = (v10 + v31 * v28 + v32 * v29) >> a3;
  a2[6] = v26;
  a2[7] = (v10 + (int)v15 * (int)v18 + -(v27 * (_DWORD)result)) >> a3;
  return result;
}

uint64_t av1_fdct16(_DWORD *a1, int *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v3 = a1[15] + *a1;
  *a2 = v3;
  v4 = a1[14] + a1[1];
  a2[1] = v4;
  v5 = a1[13] + a1[2];
  a2[2] = v5;
  v6 = a1[12] + a1[3];
  a2[3] = v6;
  v7 = a1[11] + a1[4];
  a2[4] = v7;
  v8 = a1[10] + a1[5];
  a2[5] = v8;
  v9 = a1[9] + a1[6];
  a2[6] = v9;
  v10 = a1[8] + a1[7];
  a2[7] = v10;
  v11 = a1[7] - a1[8];
  a2[8] = v11;
  v12 = a1[6] - a1[9];
  a2[9] = v12;
  v13 = 1 << (a3 - 1);
  v14 = a1[5] - a1[10];
  a2[10] = v14;
  v15 = a1[4] - a1[11];
  a2[11] = v15;
  v16 = a1[3] - a1[12];
  a2[12] = v16;
  v17 = a1[2] - a1[13];
  a2[13] = v17;
  v18 = a1[1] - a1[14];
  a2[14] = v18;
  v19 = av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v20 = v13 + v19 * v17;
  v21 = v20 + -(v19 * v14);
  v22 = v13 + v19 * v16;
  v23 = v22 + -(v19 * v15);
  v24 = v22 + v19 * v15;
  v25 = v20 + v19 * v14;
  v26 = v13 + v19 * (v4 - v9);
  v27 = v26 + -(v19 * (v5 - v8));
  v28 = v26 + v19 * (v5 - v8);
  v29 = v13 + v19 * (v10 + v3 + v7 + v6);
  v30 = v9 + v4;
  v31 = v8 + v5;
  v32 = v29 + v19 * (v30 + v31);
  v84 = v29 + -(v19 * (v30 + v31));
  v33 = v30 - v31;
  v34 = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v35 = v10 + v3 - (v7 + v6);
  v36 = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v37 = v13 + v34 * v33 + v36 * v35;
  v82 = v32;
  v83 = v13 + v34 * v35 + -(v36 * v33);
  v38 = v25 >> a3;
  v39 = v18 + v38;
  v40 = v21 >> a3;
  v41 = v12 + v40;
  v42 = v13 + v34 * (v18 + (int)v38) + -(v36 * (v12 + (_DWORD)v40));
  LODWORD(v40) = v12 - v40;
  v43 = v18 - v38;
  v44 = v13 + -((_DWORD)v40 * v34) + -(v36 * v43);
  v45 = v13 + v34 * v43 + -(v36 * (_DWORD)v40);
  v46 = v13 + v34 * v41 + v36 * v39;
  v47 = v27 >> a3;
  v48 = v6 - v7;
  v49 = v48 + v47;
  LODWORD(v40) = av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v50 = v28 >> a3;
  v51 = v3 - v10;
  v52 = v51 + v50;
  v53 = av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v54 = v13 + (int)v40 * (v48 + (int)v47) + v53 * (v51 + (int)v50);
  v55 = v48 - v47;
  v56 = av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  LODWORD(v50) = v51 - v50;
  v57 = av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v58 = v13 + v56 * v55 + v57 * (int)v50;
  v59 = v13 + v56 * (int)v50 + -(v55 * v57);
  v60 = v13 + (int)v40 * v52 + -(v49 * v53);
  v61 = v23 >> a3;
  v62 = v42 >> a3;
  v63 = v11 + v61 + (v42 >> a3);
  LODWORD(v40) = av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v64 = v24 >> a3;
  v65 = v46 >> a3;
  v66 = *a1 - a1[15];
  LODWORD(v42) = v66 + v64 + v65;
  v67 = av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  LODWORD(v62) = v11 + v61 - v62;
  LODWORD(v47) = av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  LODWORD(v65) = v66 + v64 - v65;
  v68 = av1_cospi_arr_data[64 * (uint64_t)a3 - 604];
  v69 = v44 >> a3;
  v70 = v11 - v61;
  LODWORD(v61) = v70 - v69;
  v71 = av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v72 = v45 >> a3;
  v73 = v66 - v64;
  LODWORD(v64) = v73 - v72;
  v74 = av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v75 = v13 + v71 * (v70 - (int)v69) + v74 * (v73 - (int)v72);
  v76 = v70 + v69;
  LODWORD(v32) = v73 + v72;
  v77 = av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  v78 = av1_cospi_arr_data[64 * (uint64_t)a3 - 588];
  v79 = v13 + v77 * v76 + v78 * (int)v32;
  v80 = v13 + v77 * (int)v32 + -(v76 * v78);
  result = -(v63 * v67);
  *a2 = v82 >> a3;
  a2[1] = (v13 + (int)v40 * v63 + v67 * (int)v42) >> a3;
  a2[2] = v54 >> a3;
  a2[3] = v80 >> a3;
  a2[4] = v37 >> a3;
  a2[5] = v75 >> a3;
  a2[6] = v59 >> a3;
  a2[7] = (v13 + (int)v47 * (int)v65 + -((_DWORD)v62 * v68)) >> a3;
  a2[8] = v84 >> a3;
  a2[9] = (v13 + (int)v47 * (int)v62 + v68 * (int)v65) >> a3;
  a2[10] = v58 >> a3;
  a2[11] = (v13 + v71 * (int)v64 + -((_DWORD)v61 * v74)) >> a3;
  a2[12] = v83 >> a3;
  a2[13] = v79 >> a3;
  a2[14] = v60 >> a3;
  a2[15] = (v13 + (int)v40 * (int)v42 + (int)result) >> a3;
  return result;
}

uint64_t av1_fdct32(_DWORD *a1, int *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t result;
  int v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  int v160;
  uint64_t v161;

  v147 = a1[31] + *a1;
  *a2 = v147;
  v156 = a1[30] + a1[1];
  a2[1] = v156;
  v3 = a1[29] + a1[2];
  a2[2] = v3;
  v4 = a1[28] + a1[3];
  a2[3] = v4;
  v152 = a1[27] + a1[4];
  a2[4] = v152;
  v5 = a1[26] + a1[5];
  a2[5] = v5;
  v154 = a1[25] + a1[6];
  a2[6] = v154;
  v143 = a1[24] + a1[7];
  a2[7] = v143;
  v160 = a1[23] + a1[8];
  a2[8] = v160;
  v137 = a1[22] + a1[9];
  a2[9] = v137;
  v6 = a1[21] + a1[10];
  a2[10] = v6;
  v7 = a1[20] + a1[11];
  a2[11] = v7;
  v8 = 1 << (a3 - 1);
  v9 = a1[19] + a1[12];
  a2[12] = v9;
  v10 = a1[18] + a1[13];
  a2[13] = v10;
  v11 = a1[17] + a1[14];
  a2[14] = v11;
  v110 = v11;
  v158 = a1[16] + a1[15];
  a2[15] = v158;
  v149 = a1[15] - a1[16];
  a2[16] = v149;
  v135 = a1[14] - a1[17];
  a2[17] = v135;
  v12 = a1[13] - a1[18];
  a2[18] = v12;
  v13 = a1[12] - a1[19];
  a2[19] = v13;
  v14 = a1[11] - a1[20];
  a2[20] = v14;
  v15 = a1[10] - a1[21];
  a2[21] = v15;
  v16 = a1[9] - a1[22];
  a2[22] = v16;
  v17 = a1[8] - a1[23];
  a2[23] = v17;
  v18 = a1[7] - a1[24];
  a2[24] = v18;
  v19 = a1[6] - a1[25];
  a2[25] = v19;
  v20 = a1[5] - a1[26];
  a2[26] = v20;
  v21 = a1[4] - a1[27];
  a2[27] = v21;
  v22 = a1[3] - a1[28];
  a2[28] = v22;
  v23 = a1[2] - a1[29];
  a2[29] = v23;
  v123 = a1[1] - a1[30];
  a2[30] = v123;
  v24 = av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v25 = v8 + v24 * v18;
  v139 = v25 + -(v24 * v17);
  v141 = v25 + v24 * v17;
  v26 = v8 + v24 * v19;
  v121 = v26 + -(v24 * v16);
  v117 = v26 + v24 * v16;
  v27 = v8 + v24 * v20;
  v28 = v27 + -(v24 * v15);
  v29 = v27 + v24 * v15;
  v30 = v8 + v24 * v21;
  v31 = v30 + -(v24 * v14);
  v32 = v30 + v24 * v14;
  v33 = v8 + v24 * (v4 - v9);
  v129 = v33 + v24 * (v152 - v7);
  v131 = v33 + -(v24 * (v152 - v7));
  v34 = v8 + v24 * (v3 - v10);
  v35 = v34 + -(v24 * (v5 - v6));
  v114 = v34 + v24 * (v5 - v6);
  LODWORD(v25) = v10 + v3;
  v36 = v6 + v5;
  v37 = v11 + v156;
  v38 = v8 + v24 * (v11 + v156 - (v137 + v154));
  v39 = v10 + v3 - v36;
  v112 = v35;
  v113 = v38 + -(v24 * v39);
  v133 = v38 + v24 * v39;
  v40 = v28 >> a3;
  LODWORD(v28) = v12 + (v28 >> a3);
  LODWORD(v38) = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v41 = v29 >> a3;
  LODWORD(v35) = v23 + (v29 >> a3);
  LODWORD(v29) = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v116 = v8 + -((_DWORD)v38 * (_DWORD)v28) + (int)v29 * (int)v35;
  v42 = v13 + (v31 >> a3);
  v43 = v32 >> a3;
  v44 = v22 + v43;
  v45 = v13 - (v31 >> a3);
  v46 = v22 - v43;
  v126 = v8 + -((_DWORD)v38 * (v22 - (_DWORD)v43)) + -((_DWORD)v29 * v45);
  v128 = v8 + -((_DWORD)v38 * v42) + (int)v29 * (v22 + (int)v43);
  LODWORD(v43) = v12 - v40;
  LODWORD(v41) = v23 - v41;
  v47 = v8 + -((_DWORD)v38 * (_DWORD)v41) + -((_DWORD)v29 * (v12 - (_DWORD)v40));
  v48 = v8 + -((_DWORD)v38 * (_DWORD)v43) + (int)v29 * (int)v41;
  v120 = v8 + -((_DWORD)v38 * v45) + (int)v29 * v46;
  v119 = v8 + (int)v38 * v44 + (int)v29 * v42;
  v49 = v8 + (int)v38 * (int)v35 + (int)v29 * (int)v28;
  LODWORD(v35) = v7 + v152;
  LODWORD(v41) = v37 + v137 + v154;
  v50 = v25 + v36;
  v51 = v158 + v147 + v160 + v143;
  LODWORD(v43) = v9 + v4 + v35;
  LODWORD(v40) = v24 * (v41 + v25 + v36);
  v52 = v8 + v24 * (v51 + (int)v43);
  LODWORD(v41) = v41 - v50;
  v145 = v52 + (int)v40;
  v146 = v8 + (int)v38 * (v51 - (int)v43) + (int)v29 * (int)v41;
  v151 = v52 + -(int)v40;
  v153 = v8 + -((_DWORD)v38 * (_DWORD)v41) + (int)v29 * (v51 - (int)v43);
  LODWORD(v52) = v154 - v137 + (v112 >> a3);
  v53 = v156 - v110 + (v114 >> a3);
  v54 = v8 + -((_DWORD)v38 * (_DWORD)v52) + (int)v29 * v53;
  v55 = v154 - v137 - (v112 >> a3);
  LODWORD(v43) = v156 - v110 - (v114 >> a3);
  v115 = v8 + -((_DWORD)v38 * (_DWORD)v43) + -((_DWORD)v29 * v55);
  v56 = v8 + -((_DWORD)v38 * v55) + (int)v29 * (int)v43;
  v57 = v8 + (int)v38 * v53 + (int)v29 * (int)v52;
  LODWORD(v29) = v9 + v4 - v35;
  v58 = v158 + v147 - (v160 + v143);
  v59 = v29 + (v113 >> a3);
  LODWORD(v35) = av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v60 = v133 >> a3;
  v61 = v58 + (v133 >> a3);
  v62 = av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  v134 = v8 + (int)v35 * v59 + v62 * v61;
  LODWORD(v29) = v29 - (v113 >> a3);
  v63 = v58 - v60;
  v64 = av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  LODWORD(v60) = av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  v138 = v8 + v64 * v63 + -((_DWORD)v60 * (_DWORD)v29);
  v155 = v8 + v64 * (int)v29 + (int)v60 * v63;
  v157 = v8 + (int)v35 * v61 + -(v62 * v59);
  v65 = v117 >> a3;
  v66 = v49 >> a3;
  v67 = v123 + (v117 >> a3);
  LODWORD(v43) = v67 + v66;
  v68 = v135 + (v121 >> a3);
  v69 = v68 + (v116 >> a3);
  v118 = v8 + (int)v35 * (v67 + (int)v66) + -(v62 * v69);
  v70 = v68 - (v116 >> a3);
  LODWORD(v66) = v67 - v66;
  v71 = v8 + -(v70 * (_DWORD)v35) + -(v62 * (_DWORD)v66);
  v72 = v135 - (v121 >> a3);
  LODWORD(v65) = v123 - v65;
  v73 = v48 >> a3;
  v74 = v65 - (v48 >> a3);
  v75 = v47 >> a3;
  LODWORD(v47) = v72 - (v47 >> a3);
  v76 = v8 + v64 * v74 + -((_DWORD)v60 * (_DWORD)v47);
  v77 = v72 + v75;
  LODWORD(v65) = v65 + v73;
  v78 = v8 + -(v77 * v64) + -((_DWORD)v60 * (_DWORD)v65);
  v124 = v8 + v64 * (int)v65 + -((_DWORD)v60 * v77);
  v122 = v8 + v64 * (int)v47 + (int)v60 * v74;
  v79 = v8 + (int)v35 * (int)v66 + -(v62 * v70);
  v80 = v8 + (int)v35 * v69 + v62 * (int)v43;
  LODWORD(v65) = v147 - v158;
  v81 = v54 >> a3;
  v82 = v57 >> a3;
  LODWORD(v43) = v143 - v160 + (v131 >> a3);
  LODWORD(v60) = v43 + v81;
  v83 = av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  LODWORD(v47) = v147 - v158 + (v129 >> a3);
  v84 = v47 + v82;
  v85 = av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v136 = v8 + v83 * ((int)v43 + (int)v81) + v85 * ((int)v47 + (int)v82);
  v86 = v43 - v81;
  LODWORD(v81) = v47 - v82;
  LODWORD(v43) = av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  LODWORD(v47) = av1_cospi_arr_data[64 * (uint64_t)a3 - 604];
  v159 = v8 + (int)v43 * v86 + (int)v47 * (int)v81;
  LODWORD(v35) = v143 - v160 - (v131 >> a3);
  LODWORD(v65) = v65 - (v129 >> a3);
  v87 = v56 >> a3;
  LODWORD(v56) = v35 - (v115 >> a3);
  v88 = av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v89 = v65 - v87;
  LODWORD(v82) = av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  v144 = v8 + v88 * (int)v56 + (int)v82 * ((int)v65 - (int)v87);
  LODWORD(v35) = v35 + (v115 >> a3);
  LODWORD(v65) = v65 + v87;
  v90 = av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  LODWORD(v73) = av1_cospi_arr_data[64 * (uint64_t)a3 - 588];
  v161 = v8 + v90 * (int)v35 + (int)v73 * (int)v65;
  v91 = *a1 - a1[31];
  LODWORD(v29) = v149 + (v139 >> a3);
  LODWORD(v87) = v149 - (v139 >> a3);
  v140 = v8 + v90 * (int)v65 + -((_DWORD)v35 * (_DWORD)v73);
  LODWORD(v65) = v91 - (v141 >> a3);
  LODWORD(v35) = v91 + (v141 >> a3);
  LODWORD(v73) = v29 + (v128 >> a3);
  LODWORD(v29) = v29 - (v128 >> a3);
  v148 = v8 + v88 * v89 + -((_DWORD)v56 * (_DWORD)v82);
  LODWORD(v56) = v87 - (v126 >> a3);
  LODWORD(v82) = v87 + (v126 >> a3);
  LODWORD(v87) = v65 + (v120 >> a3);
  LODWORD(v65) = v65 - (v120 >> a3);
  v142 = v8 + (int)v43 * (int)v81 + -(v86 * (_DWORD)v47);
  v92 = v35 - (v119 >> a3);
  LODWORD(v81) = v35 + (v119 >> a3);
  v150 = v8 + v83 * v84 + -((_DWORD)v60 * v85);
  LODWORD(v120) = v73 + (v118 >> a3);
  LODWORD(v113) = v73 - (v118 >> a3);
  v109 = v29 + (v71 >> a3);
  v111 = v29 - (v71 >> a3);
  LODWORD(v60) = v56 + (v76 >> a3);
  v108 = v56 - (v76 >> a3);
  v93 = v80 >> a3;
  LODWORD(v119) = av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  LODWORD(v115) = v81 + (v80 >> a3);
  LODWORD(v116) = av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  LODWORD(v56) = v82 - (v78 >> a3);
  LODWORD(v80) = v82 + (v78 >> a3);
  LODWORD(v112) = v81 - v93;
  v94 = av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  LODWORD(v47) = av1_cospi_arr_data[64 * (uint64_t)a3 - 606];
  v130 = v8 + v94 * (int)v113 + (int)v47 * ((int)v81 - (int)v93);
  v95 = v87 + (v124 >> a3);
  v96 = v87 - (v124 >> a3);
  LODWORD(v87) = v65 - (v122 >> a3);
  LODWORD(v73) = v65 + (v122 >> a3);
  v97 = v79 >> a3;
  LODWORD(v71) = av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  v98 = v92 - v97;
  v99 = av1_cospi_arr_data[64 * (uint64_t)a3 - 622];
  v127 = v8 + (int)v71 * v111 + v99 * (v92 - (int)v97);
  LODWORD(v78) = v92 + v97;
  LODWORD(v76) = av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  LODWORD(v43) = av1_cospi_arr_data[64 * (uint64_t)a3 - 590];
  v132 = v8 + (int)v76 * v109 + (int)v43 * (v92 + (int)v97);
  v100 = av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  LODWORD(v65) = av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  LODWORD(v35) = av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  LODWORD(v82) = av1_cospi_arr_data[64 * (uint64_t)a3 - 598];
  v101 = av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  LODWORD(v93) = av1_cospi_arr_data[64 * (uint64_t)a3 - 614];
  v125 = v8 + v101 * (int)v56 + (int)v93 * v96;
  v102 = av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  v103 = av1_cospi_arr_data[64 * (uint64_t)a3 - 582];
  v104 = v8 + v102 * (int)v80 + v103 * v95;
  v105 = v8 + v102 * v95 + -((_DWORD)v80 * v103);
  v106 = v8 + v101 * v96 + -((_DWORD)v56 * (_DWORD)v93);
  result = (v8 + (int)v119 * (int)v120 + (int)v116 * (int)v115) >> a3;
  *a2 = v145 >> a3;
  a2[1] = result;
  a2[2] = v136 >> a3;
  a2[3] = v105 >> a3;
  a2[4] = v134 >> a3;
  a2[5] = (v8 + v100 * (int)v60 + (int)v65 * (int)v73) >> a3;
  a2[6] = v140 >> a3;
  a2[7] = (v8 + (int)v76 * (int)v78 + -(v109 * (_DWORD)v43)) >> a3;
  a2[8] = v146 >> a3;
  a2[9] = v127 >> a3;
  a2[10] = v144 >> a3;
  a2[11] = (v8 + (int)v35 * (int)v87 + -(v108 * (_DWORD)v82)) >> a3;
  a2[12] = v138 >> a3;
  a2[13] = v125 >> a3;
  a2[14] = v142 >> a3;
  a2[15] = (v8 + v94 * (int)v112 + -((_DWORD)v113 * (_DWORD)v47)) >> a3;
  a2[16] = v151 >> a3;
  a2[17] = v130 >> a3;
  a2[18] = v159 >> a3;
  a2[19] = v106 >> a3;
  a2[20] = v155 >> a3;
  a2[21] = (v8 + (int)v35 * v108 + (int)v82 * (int)v87) >> a3;
  a2[22] = v148 >> a3;
  a2[23] = (v8 + (int)v71 * v98 + -(v111 * v99)) >> a3;
  a2[24] = v153 >> a3;
  a2[25] = v132 >> a3;
  a2[26] = v161 >> a3;
  a2[27] = (v8 + v100 * (int)v73 + -((_DWORD)v60 * (_DWORD)v65)) >> a3;
  a2[28] = v157 >> a3;
  a2[29] = v104 >> a3;
  a2[30] = v150 >> a3;
  a2[31] = (v8 + (int)v119 * (int)v115 + -((_DWORD)v120 * (_DWORD)v116)) >> a3;
  return result;
}

int *av1_fadst4(int *result, _DWORD *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;

  v4 = *result;
  v3 = result[1];
  v6 = result[2];
  v5 = result[3];
  if (v3 | *result | v6 | v5)
  {
    v7 = (char *)&av1_sinpi_arr_data + 20 * a3;
    v8 = *((_DWORD *)v7 - 49);
    v9 = *((_DWORD *)v7 - 48);
    v10 = v8 * v4;
    v12 = v7 - 188;
    LODWORD(v7) = *((_DWORD *)v7 - 47);
    v11 = *((_DWORD *)v12 + 1);
    v13 = v11 * v4;
    v14 = (_DWORD)v7 * v6;
    v15 = (_DWORD)v7 * (v3 + v4 - v5);
    LODWORD(v7) = v13 - v8 * v3;
    v16 = v10 + v11 * v5 + v9 * v3;
    v17 = 1 << (a3 - 1);
    v18 = (_DWORD)v7 + v9 * v5;
    *a2 = (v17 + v16 + v14) >> a3;
    a2[1] = (v17 + v15) >> a3;
    a2[2] = (v17 + v18 - v14) >> a3;
    a2[3] = (v17 + v14 + v18 - v16) >> a3;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
  }
  return result;
}

uint64_t av1_fadst8(int *a1, int *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  int v49;

  v3 = *a1;
  *a2 = *a1;
  v4 = a1[7];
  v5 = -v4;
  a2[1] = -v4;
  v6 = a1[3];
  a2[2] = -(int)v6;
  v7 = a1[4];
  a2[3] = v7;
  v8 = a1[1];
  v9 = -v8;
  a2[4] = -v8;
  v10 = a1[6];
  a2[5] = v10;
  v11 = 1 << (a3 - 1);
  v12 = a1[2];
  a2[6] = v12;
  v13 = (int)av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v14 = v11 - v6 * v13;
  v15 = v14 + (int)v13 * v7;
  v16 = v14 + -((_DWORD)v13 * v7);
  v17 = v11 + (int)v13 * v12;
  v18 = a1[5];
  v19 = v17 + -(v18 * (_DWORD)v13);
  v20 = v17 + v18 * (int)v13;
  v21 = v19 >> a3;
  v22 = (v19 >> a3) - v8;
  LODWORD(v19) = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v23 = v20 >> a3;
  v24 = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v25 = v15 >> a3;
  v26 = v3 + v25;
  v27 = v3 - v25;
  v28 = v16 >> a3;
  v29 = (v11 + (int)v19 * v22 + v24 * (v10 + (int)v23)) >> a3;
  v30 = v28 - v4;
  v31 = (v11 + -((v10 + (_DWORD)v23) * (_DWORD)v19) + v24 * v22) >> a3;
  v32 = v10 - v23;
  v33 = v9 - v21;
  v34 = v5 - v28;
  v35 = (v11 + (int)v19 * v32 + -(v33 * v24)) >> a3;
  v36 = (v11 + (int)v19 * v33 + v24 * v32) >> a3;
  v37 = v26 + v29;
  LODWORD(v23) = v30 + v31;
  LODWORD(v21) = v27 + v35;
  LODWORD(v19) = v26 - v29;
  LODWORD(v29) = av1_cospi_arr_data[64 * (uint64_t)a3 - 636];
  v38 = v30 - v31;
  LODWORD(v31) = av1_cospi_arr_data[64 * (uint64_t)a3 - 580];
  v39 = v34 + v36;
  v40 = (v11 + (int)v29 * v37 + (int)v31 * (int)v23) >> a3;
  v41 = v27 - v35;
  v42 = v34 - v36;
  v43 = (v11 + -((_DWORD)v23 * (_DWORD)v29) + (int)v31 * v37) >> a3;
  v44 = av1_cospi_arr_data[64 * (uint64_t)a3 - 620];
  LODWORD(v35) = av1_cospi_arr_data[64 * (uint64_t)a3 - 596];
  v45 = (v11 + v44 * (int)v21 + (int)v35 * v39) >> a3;
  v46 = (v11 + -(v39 * v44) + (int)v35 * (int)v21) >> a3;
  LODWORD(v35) = av1_cospi_arr_data[64 * (uint64_t)a3 - 604];
  LODWORD(v31) = av1_cospi_arr_data[64 * (uint64_t)a3 - 612];
  result = (v11 + (int)v35 * (int)v19 + (int)v31 * v38) >> a3;
  v48 = (v11 + -(v38 * (_DWORD)v35) + (int)v31 * (int)v19) >> a3;
  LODWORD(v35) = av1_cospi_arr_data[64 * (uint64_t)a3 - 588];
  v49 = av1_cospi_arr_data[64 * (uint64_t)a3 - 628];
  *a2 = v43;
  a2[1] = (v11 + (int)v35 * v41 + v49 * v42) >> a3;
  a2[2] = v46;
  a2[3] = result;
  a2[4] = v48;
  a2[5] = v45;
  a2[6] = (v11 + -(v42 * (_DWORD)v35) + v49 * v41) >> a3;
  a2[7] = v40;
  return result;
}

uint64_t av1_fadst16(int *a1, int *a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t result;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;

  v3 = *a1;
  *a2 = *a1;
  v4 = a1[15];
  a2[1] = -v4;
  v5 = a1[7];
  a2[2] = -(int)v5;
  v6 = a1[8];
  a2[3] = v6;
  v7 = a1[3];
  v8 = -v7;
  a2[4] = -v7;
  v9 = a1[12];
  v10 = 1 << (a3 - 1);
  a2[5] = v9;
  v11 = a1[4];
  a2[6] = v11;
  v12 = a1[11];
  a2[7] = -v12;
  v13 = a1[1];
  v14 = -v13;
  a2[8] = -v13;
  v15 = a1[14];
  a2[9] = v15;
  v16 = a1[6];
  a2[10] = v16;
  v17 = a1[9];
  a2[11] = -v17;
  v18 = a1[2];
  a2[12] = v18;
  v19 = a1[13];
  a2[13] = -v19;
  v20 = a1[5];
  a2[14] = -(int)v20;
  v21 = (int)av1_cospi_arr_data[64 * (uint64_t)a3 - 608];
  v22 = v10 - v5 * v21;
  v23 = v22 + (int)v21 * v6;
  v24 = v22 + -((_DWORD)v21 * v6);
  v25 = v10 + (int)v21 * v11;
  v26 = v25 + -(v12 * (_DWORD)v21);
  v27 = v25 + (int)v21 * v12;
  v28 = v10 + (int)v21 * v16;
  v29 = v28 + -(v17 * (_DWORD)v21);
  v30 = v28 + (int)v21 * v17;
  v31 = a1[10];
  v32 = v10 - v20 * v21;
  v33 = v32 + (int)v21 * v31;
  v34 = v32 + -((_DWORD)v21 * v31);
  v35 = v26 >> a3;
  v36 = v35 - v7;
  LODWORD(v32) = av1_cospi_arr_data[64 * (uint64_t)a3 - 624];
  v37 = v27 >> a3;
  v38 = av1_cospi_arr_data[64 * (uint64_t)a3 - 592];
  v39 = v23 >> a3;
  v40 = v3 + v39;
  LODWORD(v39) = v3 - v39;
  v41 = v24 >> a3;
  v42 = v29 >> a3;
  v43 = v30 >> a3;
  v44 = v33 >> a3;
  v45 = v34 >> a3;
  v46 = (v10 + (int)v32 * v36 + v38 * (v9 + (int)v37)) >> a3;
  LODWORD(v21) = v41 - v4;
  v47 = -v4 - v41;
  v48 = v8 - v35;
  v49 = (v10 + -((_DWORD)v32 * (v9 + (_DWORD)v37)) + v38 * v36) >> a3;
  v50 = v9 - v37;
  v51 = v42 - v13;
  v52 = v10 + (int)v32 * (v9 - (int)v37) + -(v38 * v48);
  LODWORD(v37) = v15 + v43;
  v53 = v52 >> a3;
  v54 = v14 - v42;
  LODWORD(v42) = v15 - v43;
  v55 = (v10 + (int)v32 * v48 + v38 * v50) >> a3;
  v56 = -v19 - v45;
  v57 = (v10 + (int)v32 * (v18 + (int)v44) + v38 * ((int)v45 - v19)) >> a3;
  v58 = (v10 + -((_DWORD)v32 * ((_DWORD)v45 - v19)) + v38 * (v18 + (int)v44)) >> a3;
  v59 = (v10 + (int)v32 * v56 + -(v38 * (v18 - (_DWORD)v44))) >> a3;
  v60 = (v10 + (int)v32 * (v18 - (int)v44) + v38 * v56) >> a3;
  v61 = v40 + v46;
  v62 = v21 + v49;
  v63 = v39 + v53;
  v64 = v47 + v55;
  v65 = v40 - v46;
  v66 = v21 - v49;
  LODWORD(v45) = v39 - v53;
  LODWORD(v55) = v47 - v55;
  LODWORD(v53) = v51 + v57;
  LODWORD(v32) = av1_cospi_arr_data[64 * (uint64_t)a3 - 632];
  LODWORD(v21) = v54 + v59;
  LODWORD(v39) = av1_cospi_arr_data[64 * (uint64_t)a3 - 584];
  v67 = v42 + v60;
  v68 = (v10 + (int)v32 * (v51 + (int)v57) + (int)v39 * ((int)v37 + (int)v58)) >> a3;
  LODWORD(v57) = v51 - v57;
  v69 = v10 + -(((_DWORD)v37 + (_DWORD)v58) * (_DWORD)v32);
  LODWORD(v58) = v37 - v58;
  v70 = v54 - v59;
  v71 = (v69 + (int)v39 * (int)v53) >> a3;
  LODWORD(v69) = v42 - v60;
  LODWORD(v42) = av1_cospi_arr_data[64 * (uint64_t)a3 - 600];
  LODWORD(v37) = av1_cospi_arr_data[64 * (uint64_t)a3 - 616];
  v72 = (v10 + (int)v42 * (int)v21 + (int)v37 * v67) >> a3;
  v73 = (v10 + -(v67 * (_DWORD)v42) + (int)v37 * (int)v21) >> a3;
  v74 = (v10 + (int)v32 * (int)v58 + -((_DWORD)v57 * (_DWORD)v39)) >> a3;
  v75 = (v10 + (int)v32 * (int)v57 + (int)v39 * (int)v58) >> a3;
  v76 = (v10 + (int)v42 * (int)v69 + -(v70 * (_DWORD)v37)) >> a3;
  v77 = (v10 + (int)v42 * v70 + (int)v37 * (int)v69) >> a3;
  v78 = v61;
  LODWORD(v21) = v61 + v68;
  LODWORD(v58) = v62;
  LODWORD(v39) = v62 + v71;
  v79 = v63 + v72;
  v80 = v64 + v73;
  v81 = v65 + v74;
  v82 = v66 + v75;
  v83 = v45 + v76;
  LODWORD(v42) = v55 + v77;
  v84 = v78 - v68;
  LODWORD(v37) = v58 - v71;
  v85 = v63 - v72;
  LODWORD(v58) = v64 - v73;
  LODWORD(v74) = v65 - v74;
  LODWORD(v75) = v66 - v75;
  LODWORD(v76) = v45 - v76;
  LODWORD(v71) = v55 - v77;
  v86 = av1_cospi_arr_data[64 * (uint64_t)a3 - 638];
  v87 = av1_cospi_arr_data[64 * (uint64_t)a3 - 578];
  v88 = (v10 + v86 * (int)v21 + v87 * (int)v39) >> a3;
  v89 = (v10 + -((_DWORD)v39 * v86) + v87 * (int)v21) >> a3;
  v90 = av1_cospi_arr_data[64 * (uint64_t)a3 - 630];
  LODWORD(v45) = av1_cospi_arr_data[64 * (uint64_t)a3 - 586];
  v91 = (v10 + v90 * v79 + (int)v45 * v80) >> a3;
  result = (v10 + -(v80 * v90) + (int)v45 * v79) >> a3;
  LODWORD(v55) = av1_cospi_arr_data[64 * (uint64_t)a3 - 622];
  LODWORD(v77) = av1_cospi_arr_data[64 * (uint64_t)a3 - 594];
  v93 = (v10 + (int)v55 * v81 + (int)v77 * v82) >> a3;
  v94 = (v10 + -(v82 * (_DWORD)v55) + (int)v77 * v81) >> a3;
  v95 = av1_cospi_arr_data[64 * (uint64_t)a3 - 614];
  LODWORD(v72) = av1_cospi_arr_data[64 * (uint64_t)a3 - 602];
  v96 = (v10 + v95 * v83 + (int)v72 * (int)v42) >> a3;
  v97 = (v10 + -((_DWORD)v42 * v95) + (int)v72 * v83) >> a3;
  v98 = av1_cospi_arr_data[64 * (uint64_t)a3 - 606];
  v99 = av1_cospi_arr_data[64 * (uint64_t)a3 - 610];
  v100 = (v10 + v98 * v84 + v99 * (int)v37) >> a3;
  v101 = (v10 + -((_DWORD)v37 * v98) + v99 * v84) >> a3;
  v102 = av1_cospi_arr_data[64 * (uint64_t)a3 - 598];
  LODWORD(v42) = av1_cospi_arr_data[64 * (uint64_t)a3 - 618];
  v103 = (v10 + v102 * v85 + (int)v42 * (int)v58) >> a3;
  v104 = (v10 + -((_DWORD)v58 * v102) + (int)v42 * v85) >> a3;
  v105 = av1_cospi_arr_data[64 * (uint64_t)a3 - 590];
  LODWORD(v58) = av1_cospi_arr_data[64 * (uint64_t)a3 - 626];
  v106 = (v10 + v105 * (int)v74 + (int)v58 * (int)v75) >> a3;
  v107 = (v10 + -((_DWORD)v75 * v105) + (int)v58 * (int)v74) >> a3;
  LODWORD(v75) = av1_cospi_arr_data[64 * (uint64_t)a3 - 582];
  v108 = av1_cospi_arr_data[64 * (uint64_t)a3 - 634];
  *a2 = v89;
  a2[1] = (v10 + (int)v75 * (int)v76 + v108 * (int)v71) >> a3;
  a2[2] = result;
  a2[3] = v106;
  a2[4] = v94;
  a2[5] = v103;
  a2[6] = v97;
  a2[7] = v100;
  a2[8] = v101;
  a2[9] = v96;
  a2[10] = v104;
  a2[11] = v93;
  a2[12] = v107;
  a2[13] = v91;
  a2[14] = (v10 + -((_DWORD)v71 * (_DWORD)v75) + v108 * (int)v76) >> a3;
  a2[15] = v88;
  return result;
}

